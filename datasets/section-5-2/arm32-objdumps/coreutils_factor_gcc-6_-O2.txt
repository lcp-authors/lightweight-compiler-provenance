
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00010e30 <.init>:
   10e30:	push	{r3, lr}
   10e34:	bl	113f0 <__assert_fail@plt+0x2c4>
   10e38:	pop	{r3, pc}

Disassembly of section .plt:

00010e3c <calloc@plt-0x14>:
   10e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e40:	ldr	lr, [pc, #4]	; 10e4c <calloc@plt-0x4>
   10e44:	add	lr, pc, lr
   10e48:	ldr	pc, [lr, #8]!
   10e4c:			; <UNDEFINED> instruction: 0x0002a1b4

00010e50 <calloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #172032	; 0x2a000
   10e58:	ldr	pc, [ip, #436]!	; 0x1b4

00010e5c <fputs_unlocked@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #172032	; 0x2a000
   10e64:	ldr	pc, [ip, #428]!	; 0x1ac

00010e68 <raise@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #172032	; 0x2a000
   10e70:	ldr	pc, [ip, #420]!	; 0x1a4

00010e74 <iconv_close@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #172032	; 0x2a000
   10e7c:	ldr	pc, [ip, #412]!	; 0x19c

00010e80 <iconv@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #172032	; 0x2a000
   10e88:	ldr	pc, [ip, #404]!	; 0x194

00010e8c <strcmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #172032	; 0x2a000
   10e94:	ldr	pc, [ip, #396]!	; 0x18c

00010e98 <fflush@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #172032	; 0x2a000
   10ea0:	ldr	pc, [ip, #388]!	; 0x184

00010ea4 <wcwidth@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #172032	; 0x2a000
   10eac:	ldr	pc, [ip, #380]!	; 0x17c

00010eb0 <memmove@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #172032	; 0x2a000
   10eb8:	ldr	pc, [ip, #372]!	; 0x174

00010ebc <free@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #172032	; 0x2a000
   10ec4:	ldr	pc, [ip, #364]!	; 0x16c

00010ec8 <_exit@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #172032	; 0x2a000
   10ed0:	ldr	pc, [ip, #356]!	; 0x164

00010ed4 <memcpy@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #172032	; 0x2a000
   10edc:	ldr	pc, [ip, #348]!	; 0x15c

00010ee0 <mbsinit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #172032	; 0x2a000
   10ee8:	ldr	pc, [ip, #340]!	; 0x154

00010eec <memcmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #172032	; 0x2a000
   10ef4:	ldr	pc, [ip, #332]!	; 0x14c

00010ef8 <fputc_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #172032	; 0x2a000
   10f00:	ldr	pc, [ip, #324]!	; 0x144

00010f04 <dcgettext@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #172032	; 0x2a000
   10f0c:	ldr	pc, [ip, #316]!	; 0x13c

00010f10 <strdup@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #172032	; 0x2a000
   10f18:	ldr	pc, [ip, #308]!	; 0x134

00010f1c <realloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #172032	; 0x2a000
   10f24:	ldr	pc, [ip, #300]!	; 0x12c

00010f28 <textdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #172032	; 0x2a000
   10f30:	ldr	pc, [ip, #292]!	; 0x124

00010f34 <iswcntrl@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #172032	; 0x2a000
   10f3c:	ldr	pc, [ip, #284]!	; 0x11c

00010f40 <fflush_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #172032	; 0x2a000
   10f48:	ldr	pc, [ip, #276]!	; 0x114

00010f4c <iswprint@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #172032	; 0x2a000
   10f54:	ldr	pc, [ip, #268]!	; 0x10c

00010f58 <fwrite@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #172032	; 0x2a000
   10f60:	ldr	pc, [ip, #260]!	; 0x104

00010f64 <lseek64@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #172032	; 0x2a000
   10f6c:	ldr	pc, [ip, #252]!	; 0xfc

00010f70 <__ctype_get_mb_cur_max@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #172032	; 0x2a000
   10f78:	ldr	pc, [ip, #244]!	; 0xf4

00010f7c <__fpending@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #172032	; 0x2a000
   10f84:	ldr	pc, [ip, #236]!	; 0xec

00010f88 <mbrtowc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #172032	; 0x2a000
   10f90:	ldr	pc, [ip, #228]!	; 0xe4

00010f94 <error@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #172032	; 0x2a000
   10f9c:	ldr	pc, [ip, #220]!	; 0xdc

00010fa0 <malloc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #172032	; 0x2a000
   10fa8:	ldr	pc, [ip, #212]!	; 0xd4

00010fac <iconv_open@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #172032	; 0x2a000
   10fb4:	ldr	pc, [ip, #204]!	; 0xcc

00010fb8 <__libc_start_main@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #172032	; 0x2a000
   10fc0:	ldr	pc, [ip, #196]!	; 0xc4

00010fc4 <__freading@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #172032	; 0x2a000
   10fcc:	ldr	pc, [ip, #188]!	; 0xbc

00010fd0 <__gmon_start__@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #172032	; 0x2a000
   10fd8:	ldr	pc, [ip, #180]!	; 0xb4

00010fdc <getopt_long@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #172032	; 0x2a000
   10fe4:	ldr	pc, [ip, #172]!	; 0xac

00010fe8 <__ctype_b_loc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #172032	; 0x2a000
   10ff0:	ldr	pc, [ip, #164]!	; 0xa4

00010ff4 <exit@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #172032	; 0x2a000
   10ffc:	ldr	pc, [ip, #156]!	; 0x9c

00011000 <iswspace@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #172032	; 0x2a000
   11008:	ldr	pc, [ip, #148]!	; 0x94

0001100c <strlen@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #172032	; 0x2a000
   11014:	ldr	pc, [ip, #140]!	; 0x8c

00011018 <strchr@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #172032	; 0x2a000
   11020:	ldr	pc, [ip, #132]!	; 0x84

00011024 <__errno_location@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #172032	; 0x2a000
   1102c:	ldr	pc, [ip, #124]!	; 0x7c

00011030 <iswalnum@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #172032	; 0x2a000
   11038:	ldr	pc, [ip, #116]!	; 0x74

0001103c <__sprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #172032	; 0x2a000
   11044:	ldr	pc, [ip, #108]!	; 0x6c

00011048 <__cxa_atexit@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #172032	; 0x2a000
   11050:	ldr	pc, [ip, #100]!	; 0x64

00011054 <memset@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #172032	; 0x2a000
   1105c:	ldr	pc, [ip, #92]!	; 0x5c

00011060 <__printf_chk@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #172032	; 0x2a000
   11068:	ldr	pc, [ip, #84]!	; 0x54

0001106c <write@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #172032	; 0x2a000
   11074:	ldr	pc, [ip, #76]!	; 0x4c

00011078 <fileno@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #172032	; 0x2a000
   11080:	ldr	pc, [ip, #68]!	; 0x44

00011084 <__fprintf_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #172032	; 0x2a000
   1108c:	ldr	pc, [ip, #60]!	; 0x3c

00011090 <memchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #172032	; 0x2a000
   11098:	ldr	pc, [ip, #52]!	; 0x34

0001109c <fclose@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #172032	; 0x2a000
   110a4:	ldr	pc, [ip, #44]!	; 0x2c

000110a8 <strnlen@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #172032	; 0x2a000
   110b0:	ldr	pc, [ip, #36]!	; 0x24

000110b4 <fseeko64@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #172032	; 0x2a000
   110bc:	ldr	pc, [ip, #28]!

000110c0 <__uflow@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #172032	; 0x2a000
   110c8:	ldr	pc, [ip, #20]!

000110cc <__overflow@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #172032	; 0x2a000
   110d4:	ldr	pc, [ip, #12]!

000110d8 <setlocale@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #172032	; 0x2a000
   110e0:	ldr	pc, [ip, #4]!

000110e4 <strrchr@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #167936	; 0x29000
   110ec:	ldr	pc, [ip, #4092]!	; 0xffc

000110f0 <nl_langinfo@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #167936	; 0x29000
   110f8:	ldr	pc, [ip, #4084]!	; 0xff4

000110fc <bindtextdomain@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #167936	; 0x29000
   11104:	ldr	pc, [ip, #4076]!	; 0xfec

00011108 <isatty@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #167936	; 0x29000
   11110:	ldr	pc, [ip, #4068]!	; 0xfe4

00011114 <strncmp@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #167936	; 0x29000
   1111c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011120 <abort@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #167936	; 0x29000
   11128:	ldr	pc, [ip, #4052]!	; 0xfd4

0001112c <__assert_fail@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #167936	; 0x29000
   11134:	ldr	pc, [ip, #4044]!	; 0xfcc

Disassembly of section .text:

00011138 <.text>:
   11138:	ldr	r1, [pc, #24]	; 11158 <__assert_fail@plt+0x2c>
   1113c:	mov	r3, r0
   11140:	push	{r4, lr}
   11144:	ldr	r2, [pc, #16]	; 1115c <__assert_fail@plt+0x30>
   11148:	ldr	r0, [r1]
   1114c:	mov	r1, #1
   11150:	bl	11084 <__fprintf_chk@plt>
   11154:	bl	11120 <abort@plt>
   11158:	andeq	fp, r3, r8, ror r1
   1115c:			; <UNDEFINED> instruction: 0x0002a7b8
   11160:	push	{r4, lr}
   11164:	ldr	r3, [pc, #12]	; 11178 <__assert_fail@plt+0x4c>
   11168:	ldr	r2, [pc, #12]	; 1117c <__assert_fail@plt+0x50>
   1116c:	ldr	r1, [pc, #12]	; 11180 <__assert_fail@plt+0x54>
   11170:	ldr	r0, [pc, #12]	; 11184 <__assert_fail@plt+0x58>
   11174:	bl	1112c <__assert_fail@plt>
   11178:	andeq	r9, r2, r4, lsr #27
   1117c:			; <UNDEFINED> instruction: 0x000001ba
   11180:	andeq	sl, r2, r4, rrx
   11184:	andeq	sl, r2, r8, lsr #2
   11188:	push	{r4, lr}
   1118c:	ldr	r3, [pc, #12]	; 111a0 <__assert_fail@plt+0x74>
   11190:	ldr	r2, [pc, #12]	; 111a4 <__assert_fail@plt+0x78>
   11194:	ldr	r1, [pc, #12]	; 111a8 <__assert_fail@plt+0x7c>
   11198:	ldr	r0, [pc, #12]	; 111ac <__assert_fail@plt+0x80>
   1119c:	bl	1112c <__assert_fail@plt>
   111a0:			; <UNDEFINED> instruction: 0x00029db0
   111a4:	andeq	r0, r0, sp, ror #3
   111a8:	andeq	sl, r2, r4, rrx
   111ac:	andeq	sl, r2, r8, lsr #2
   111b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   111b4:	mov	r6, r0
   111b8:	sub	sp, sp, #24
   111bc:	ldr	r0, [r1]
   111c0:	mov	r4, r1
   111c4:	ldr	r7, [pc, #412]	; 11368 <__assert_fail@plt+0x23c>
   111c8:	bl	200d0 <__assert_fail@plt+0xefa4>
   111cc:	ldr	r1, [pc, #408]	; 1136c <__assert_fail@plt+0x240>
   111d0:	mov	r0, #6
   111d4:	bl	110d8 <setlocale@plt>
   111d8:	ldr	r1, [pc, #400]	; 11370 <__assert_fail@plt+0x244>
   111dc:	ldr	r0, [pc, #400]	; 11374 <__assert_fail@plt+0x248>
   111e0:	bl	110fc <bindtextdomain@plt>
   111e4:	ldr	r0, [pc, #392]	; 11374 <__assert_fail@plt+0x248>
   111e8:	bl	10f28 <textdomain@plt>
   111ec:	ldr	r3, [r7]
   111f0:	cmp	r3, #0
   111f4:	beq	112c4 <__assert_fail@plt+0x198>
   111f8:	ldr	r0, [pc, #376]	; 11378 <__assert_fail@plt+0x24c>
   111fc:	bl	26744 <__assert_fail@plt+0x15618>
   11200:	ldr	r0, [pc, #372]	; 1137c <__assert_fail@plt+0x250>
   11204:	bl	26744 <__assert_fail@plt+0x15618>
   11208:	ldr	r9, [pc, #368]	; 11380 <__assert_fail@plt+0x254>
   1120c:	ldr	r8, [pc, #344]	; 1136c <__assert_fail@plt+0x240>
   11210:	mov	r5, #0
   11214:	mov	sl, #1
   11218:	str	r5, [sp]
   1121c:	mov	r3, r9
   11220:	mov	r2, r8
   11224:	mov	r1, r4
   11228:	mov	r0, r6
   1122c:	bl	10fdc <getopt_long@plt>
   11230:	cmn	r0, #1
   11234:	beq	112d8 <__assert_fail@plt+0x1ac>
   11238:	cmn	r0, #2
   1123c:	beq	112bc <__assert_fail@plt+0x190>
   11240:	cmp	r0, #256	; 0x100
   11244:	beq	112b4 <__assert_fail@plt+0x188>
   11248:	cmn	r0, #3
   1124c:	beq	11258 <__assert_fail@plt+0x12c>
   11250:	mov	r0, #1
   11254:	bl	1777c <__assert_fail@plt+0x6650>
   11258:	ldr	r2, [pc, #292]	; 11384 <__assert_fail@plt+0x258>
   1125c:	ldr	r3, [pc, #292]	; 11388 <__assert_fail@plt+0x25c>
   11260:	ldr	r1, [pc, #292]	; 1138c <__assert_fail@plt+0x260>
   11264:	ldr	r0, [pc, #292]	; 11390 <__assert_fail@plt+0x264>
   11268:	ldr	r4, [r2]
   1126c:	ldr	r6, [r3]
   11270:	bl	209f4 <__assert_fail@plt+0xf8c8>
   11274:	ldr	r1, [pc, #280]	; 11394 <__assert_fail@plt+0x268>
   11278:	mov	r7, r0
   1127c:	ldr	r0, [pc, #276]	; 11398 <__assert_fail@plt+0x26c>
   11280:	bl	209f4 <__assert_fail@plt+0xf8c8>
   11284:	ldr	r2, [pc, #272]	; 1139c <__assert_fail@plt+0x270>
   11288:	str	r7, [sp, #4]
   1128c:	str	r2, [sp]
   11290:	mov	r3, r6
   11294:	str	r5, [sp, #12]
   11298:	ldr	r2, [pc, #256]	; 113a0 <__assert_fail@plt+0x274>
   1129c:	ldr	r1, [pc, #256]	; 113a4 <__assert_fail@plt+0x278>
   112a0:	str	r0, [sp, #8]
   112a4:	mov	r0, r4
   112a8:	bl	23784 <__assert_fail@plt+0x12658>
   112ac:	mov	r0, #0
   112b0:	bl	10ff4 <exit@plt>
   112b4:	strb	sl, [r7, #8]
   112b8:	b	11218 <__assert_fail@plt+0xec>
   112bc:	mov	r0, #0
   112c0:	bl	1777c <__assert_fail@plt+0x6650>
   112c4:	mov	r0, #1024	; 0x400
   112c8:	bl	23880 <__assert_fail@plt+0x12754>
   112cc:	str	r0, [r7]
   112d0:	str	r0, [r7, #4]
   112d4:	b	111f8 <__assert_fail@plt+0xcc>
   112d8:	ldr	r3, [pc, #200]	; 113a8 <__assert_fail@plt+0x27c>
   112dc:	ldr	r5, [r3]
   112e0:	cmp	r6, r5
   112e4:	movgt	r7, #1
   112e8:	ble	11318 <__assert_fail@plt+0x1ec>
   112ec:	ldr	r0, [r4, r5, lsl #2]
   112f0:	bl	17270 <__assert_fail@plt+0x6144>
   112f4:	add	r5, r5, #1
   112f8:	cmp	r0, #0
   112fc:	moveq	r7, #0
   11300:	cmp	r6, r5
   11304:	bne	112ec <__assert_fail@plt+0x1c0>
   11308:	eor	r0, r7, #1
   1130c:	uxtb	r0, r0
   11310:	add	sp, sp, #24
   11314:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11318:	add	r0, sp, #16
   1131c:	bl	22ab8 <__assert_fail@plt+0x1198c>
   11320:	ldr	r6, [pc, #132]	; 113ac <__assert_fail@plt+0x280>
   11324:	ldr	r5, [pc, #132]	; 113b0 <__assert_fail@plt+0x284>
   11328:	mov	r7, #1
   1132c:	mov	r4, #3
   11330:	b	11340 <__assert_fail@plt+0x214>
   11334:	bl	17270 <__assert_fail@plt+0x6144>
   11338:	and	r7, r7, r0
   1133c:	uxtb	r7, r7
   11340:	add	r3, sp, #16
   11344:	mov	r2, r4
   11348:	mov	r1, r5
   1134c:	ldr	r0, [r6]
   11350:	bl	22ac8 <__assert_fail@plt+0x1199c>
   11354:	cmn	r0, #1
   11358:	ldr	r0, [sp, #20]
   1135c:	bne	11334 <__assert_fail@plt+0x208>
   11360:	bl	17b4c <__assert_fail@plt+0x6a20>
   11364:	b	11308 <__assert_fail@plt+0x1dc>
   11368:	andeq	fp, r3, ip, lsl #3
   1136c:	andeq	r9, r2, r0, lsr #22
   11370:	andeq	r9, r2, r8, asr #24
   11374:	andeq	r9, r2, r0, lsr #23
   11378:	andeq	r7, r1, r8, ror #20
   1137c:	andeq	r2, r1, ip, lsl #15
   11380:	strdeq	r9, [r2], -ip
   11384:	andeq	fp, r3, r4, lsl #3
   11388:	andeq	fp, r3, r4, lsl r1
   1138c:	andeq	r9, r2, r0, ror #24
   11390:	andeq	r9, r2, r4, ror ip
   11394:	andeq	r9, r2, r8, lsl #25
   11398:	muleq	r2, r8, ip
   1139c:	andeq	r9, r2, r8, lsr #25
   113a0:	muleq	r2, ip, fp
   113a4:	andeq	r9, r2, r4, lsl sl
   113a8:	andeq	fp, r3, r0, ror r1
   113ac:	andeq	fp, r3, r0, lsl #3
   113b0:			; <UNDEFINED> instruction: 0x00029cb4
   113b4:	mov	fp, #0
   113b8:	mov	lr, #0
   113bc:	pop	{r1}		; (ldr r1, [sp], #4)
   113c0:	mov	r2, sp
   113c4:	push	{r2}		; (str r2, [sp, #-4]!)
   113c8:	push	{r0}		; (str r0, [sp, #-4]!)
   113cc:	ldr	ip, [pc, #16]	; 113e4 <__assert_fail@plt+0x2b8>
   113d0:	push	{ip}		; (str ip, [sp, #-4]!)
   113d4:	ldr	r0, [pc, #12]	; 113e8 <__assert_fail@plt+0x2bc>
   113d8:	ldr	r3, [pc, #12]	; 113ec <__assert_fail@plt+0x2c0>
   113dc:	bl	10fb8 <__libc_start_main@plt>
   113e0:	bl	11120 <abort@plt>
   113e4:	andeq	r6, r2, r0, asr #14
   113e8:			; <UNDEFINED> instruction: 0x000111b0
   113ec:	andeq	r6, r2, r0, ror #13
   113f0:	ldr	r3, [pc, #20]	; 1140c <__assert_fail@plt+0x2e0>
   113f4:	ldr	r2, [pc, #20]	; 11410 <__assert_fail@plt+0x2e4>
   113f8:	add	r3, pc, r3
   113fc:	ldr	r2, [r3, r2]
   11400:	cmp	r2, #0
   11404:	bxeq	lr
   11408:	b	10fd0 <__gmon_start__@plt>
   1140c:	andeq	r9, r2, r0, lsl #24
   11410:	andeq	r0, r0, r4, lsl #2
   11414:	ldr	r3, [pc, #28]	; 11438 <__assert_fail@plt+0x30c>
   11418:	ldr	r0, [pc, #28]	; 1143c <__assert_fail@plt+0x310>
   1141c:	sub	r3, r3, r0
   11420:	cmp	r3, #6
   11424:	bxls	lr
   11428:	ldr	r3, [pc, #16]	; 11440 <__assert_fail@plt+0x314>
   1142c:	cmp	r3, #0
   11430:	bxeq	lr
   11434:	bx	r3
   11438:	andeq	fp, r3, fp, ror #2
   1143c:	andeq	fp, r3, r8, ror #2
   11440:	andeq	r0, r0, r0
   11444:	ldr	r1, [pc, #36]	; 11470 <__assert_fail@plt+0x344>
   11448:	ldr	r0, [pc, #36]	; 11474 <__assert_fail@plt+0x348>
   1144c:	sub	r1, r1, r0
   11450:	asr	r1, r1, #2
   11454:	add	r1, r1, r1, lsr #31
   11458:	asrs	r1, r1, #1
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x34c>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	fp, r3, r8, ror #2
   11474:	andeq	fp, r3, r8, ror #2
   11478:	andeq	r0, r0, r0
   1147c:	push	{r4, lr}
   11480:	ldr	r4, [pc, #24]	; 114a0 <__assert_fail@plt+0x374>
   11484:	ldrb	r3, [r4]
   11488:	cmp	r3, #0
   1148c:	popne	{r4, pc}
   11490:	bl	11414 <__assert_fail@plt+0x2e8>
   11494:	mov	r3, #1
   11498:	strb	r3, [r4]
   1149c:	pop	{r4, pc}
   114a0:	andeq	fp, r3, r8, lsl #3
   114a4:	ldr	r0, [pc, #40]	; 114d4 <__assert_fail@plt+0x3a8>
   114a8:	ldr	r3, [r0]
   114ac:	cmp	r3, #0
   114b0:	bne	114b8 <__assert_fail@plt+0x38c>
   114b4:	b	11444 <__assert_fail@plt+0x318>
   114b8:	ldr	r3, [pc, #24]	; 114d8 <__assert_fail@plt+0x3ac>
   114bc:	cmp	r3, #0
   114c0:	beq	114b4 <__assert_fail@plt+0x388>
   114c4:	push	{r4, lr}
   114c8:	blx	r3
   114cc:	pop	{r4, lr}
   114d0:	b	11444 <__assert_fail@plt+0x318>
   114d4:	andeq	sl, r3, r4, lsl pc
	...
   114e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114e4:	mov	r6, r2
   114e8:	ldrb	lr, [r0, #250]	; 0xfa
   114ec:	mov	r7, r3
   114f0:	add	r8, r0, #16
   114f4:	subs	r1, lr, #1
   114f8:	add	r9, r0, #224	; 0xe0
   114fc:	bcc	115c4 <__assert_fail@plt+0x498>
   11500:	lsl	r3, r1, #3
   11504:	ldrd	r2, [r3, r8]
   11508:	cmp	r7, r3
   1150c:	cmpeq	r6, r2
   11510:	subcc	r2, lr, #-536870911	; 0xe0000001
   11514:	movcc	r3, r1
   11518:	addcc	r2, r8, r2, lsl #3
   1151c:	bcc	11538 <__assert_fail@plt+0x40c>
   11520:	b	115a0 <__assert_fail@plt+0x474>
   11524:	ldrd	r4, [r2, #-8]!
   11528:	mov	ip, r3
   1152c:	cmp	r5, r7
   11530:	cmpeq	r4, r6
   11534:	bls	1154c <__assert_fail@plt+0x420>
   11538:	subs	r3, r3, #1
   1153c:	bcs	11524 <__assert_fail@plt+0x3f8>
   11540:	mov	sl, #0
   11544:	mov	fp, sl
   11548:	b	11560 <__assert_fail@plt+0x434>
   1154c:	beq	115b0 <__assert_fail@plt+0x484>
   11550:	add	fp, r3, #1
   11554:	cmp	r1, r3
   11558:	lsl	sl, fp, #3
   1155c:	ble	11588 <__assert_fail@plt+0x45c>
   11560:	add	ip, r8, lr, lsl #3
   11564:	add	r1, r9, lr
   11568:	mvn	r2, r9
   1156c:	ldrd	r4, [ip, #-8]
   11570:	strd	r4, [ip], #-8
   11574:	ldrb	r4, [r1, #-1]
   11578:	strb	r4, [r1], #-1
   1157c:	add	r4, r2, r1
   11580:	cmp	r4, r3
   11584:	bgt	1156c <__assert_fail@plt+0x440>
   11588:	ldrb	r3, [sp, #36]	; 0x24
   1158c:	add	lr, lr, #1
   11590:	strd	r6, [r8, sl]
   11594:	strb	r3, [r9, fp]
   11598:	strb	lr, [r0, #250]	; 0xfa
   1159c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a0:	mov	ip, r1
   115a4:	movne	fp, lr
   115a8:	lslne	sl, lr, #3
   115ac:	bne	11588 <__assert_fail@plt+0x45c>
   115b0:	ldrb	r3, [r9, ip]
   115b4:	ldr	r2, [sp, #36]	; 0x24
   115b8:	add	r3, r3, r2
   115bc:	strb	r3, [r9, ip]
   115c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115c4:	mov	sl, #0
   115c8:	mov	fp, sl
   115cc:	b	11588 <__assert_fail@plt+0x45c>
   115d0:	ldr	r3, [r0, #8]
   115d4:	push	{r4, r5, r6, lr}
   115d8:	cmp	r3, #0
   115dc:	movne	r4, #0
   115e0:	mov	r6, r0
   115e4:	movne	r5, r4
   115e8:	beq	1160c <__assert_fail@plt+0x4e0>
   115ec:	ldr	r0, [r6]
   115f0:	add	r5, r5, #1
   115f4:	add	r0, r0, r4
   115f8:	bl	1a39c <__assert_fail@plt+0x9270>
   115fc:	ldr	r3, [r6, #8]
   11600:	add	r4, r4, #12
   11604:	cmp	r3, r5
   11608:	bhi	115ec <__assert_fail@plt+0x4c0>
   1160c:	ldr	r0, [r6]
   11610:	bl	17b4c <__assert_fail@plt+0x6a20>
   11614:	ldr	r0, [r6, #4]
   11618:	pop	{r4, r5, r6, lr}
   1161c:	b	17b4c <__assert_fail@plt+0x6a20>
   11620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11624:	sub	sp, sp, #172	; 0xac
   11628:	ldrd	r4, [sp, #248]	; 0xf8
   1162c:	strd	r2, [sp]
   11630:	str	r0, [sp, #124]	; 0x7c
   11634:	rsbs	r4, r4, #0
   11638:	rsc	r5, r5, #0
   1163c:	cmp	r2, #0
   11640:	sbcs	r3, r3, #0
   11644:	strd	r4, [sp, #80]	; 0x50
   11648:	ldrd	sl, [sp, #208]	; 0xd0
   1164c:	blt	11fe0 <__assert_fail@plt+0xeb4>
   11650:	ldrd	r2, [sp, #216]	; 0xd8
   11654:	cmp	r2, #0
   11658:	sbcs	r3, r3, #0
   1165c:	blt	11fcc <__assert_fail@plt+0xea0>
   11660:	ldrd	r2, [sp, #232]	; 0xe8
   11664:	cmp	r2, #0
   11668:	sbcs	r3, r3, #0
   1166c:	blt	11fb8 <__assert_fail@plt+0xe8c>
   11670:	ldrd	r0, [sp, #224]	; 0xe0
   11674:	ldr	ip, [sp, #228]	; 0xe4
   11678:	mov	r1, #0
   1167c:	umull	r6, r7, r0, fp
   11680:	umull	r4, r5, sl, ip
   11684:	mul	ip, sl, r1
   11688:	mla	r7, fp, r1, r7
   1168c:	mov	r3, #0
   11690:	strd	r0, [sp, #72]	; 0x48
   11694:	ldr	r1, [sp, #228]	; 0xe4
   11698:	umull	r8, r9, sl, r0
   1169c:	mla	ip, r0, r3, ip
   116a0:	mla	r5, r1, r3, r5
   116a4:	add	ip, ip, r9
   116a8:	adds	r4, r4, r6
   116ac:	adc	r5, r5, r7
   116b0:	strd	r8, [sp, #48]	; 0x30
   116b4:	adds	r8, ip, r4
   116b8:	ldr	ip, [sp, #228]	; 0xe4
   116bc:	mov	r1, #0
   116c0:	adc	r9, r1, r5
   116c4:	umull	r4, r5, fp, ip
   116c8:	strd	r8, [sp, #8]
   116cc:	cmp	r7, r9
   116d0:	cmpeq	r6, r8
   116d4:	mov	r2, sl
   116d8:	strd	r4, [sp, #40]	; 0x28
   116dc:	bls	116ec <__assert_fail@plt+0x5c0>
   116e0:	adds	r4, r4, #0
   116e4:	adc	r5, r5, #1
   116e8:	strd	r4, [sp, #40]	; 0x28
   116ec:	ldr	ip, [sp, #220]	; 0xdc
   116f0:	ldrd	r4, [sp, #216]	; 0xd8
   116f4:	mov	r5, #0
   116f8:	umull	r6, r7, r2, ip
   116fc:	ldr	lr, [sp, #220]	; 0xdc
   11700:	mov	r0, r4
   11704:	mov	r1, r5
   11708:	strd	r6, [sp, #24]
   1170c:	mul	ip, r2, r5
   11710:	strd	r0, [sp, #128]	; 0x80
   11714:	ldr	r1, [sp, #28]
   11718:	umull	r6, r7, r2, r4
   1171c:	mla	ip, r4, r3, ip
   11720:	mla	r3, lr, r3, r1
   11724:	umull	r8, r9, fp, r4
   11728:	str	r3, [sp, #28]
   1172c:	add	ip, ip, r7
   11730:	strd	r6, [sp, #56]	; 0x38
   11734:	ldrd	r6, [sp, #24]
   11738:	mla	r9, fp, r5, r9
   1173c:	ldrd	r2, [sp, #40]	; 0x28
   11740:	adds	r6, r6, r8
   11744:	ldr	r1, [sp, #8]
   11748:	ldr	r4, [sp, #12]
   1174c:	mov	r5, #0
   11750:	adc	r7, r7, r9
   11754:	adds	r0, ip, r6
   11758:	str	r1, [sp, #20]
   1175c:	adc	r1, r5, r7
   11760:	adds	r2, r2, r4
   11764:	adc	r3, r3, r5
   11768:	str	r5, [sp, #16]
   1176c:	strd	r2, [sp, #88]	; 0x58
   11770:	ldrd	r2, [sp, #16]
   11774:	ldr	ip, [sp, #48]	; 0x30
   11778:	strd	r0, [sp, #32]
   1177c:	adds	r2, r2, ip
   11780:	adc	r3, r3, #0
   11784:	cmp	r9, r1
   11788:	strd	r2, [sp, #16]
   1178c:	umull	r2, r3, fp, lr
   11790:	str	r5, [sp, #96]	; 0x60
   11794:	cmpeq	r8, r0
   11798:	strd	r2, [sp, #104]	; 0x68
   1179c:	bls	117ac <__assert_fail@plt+0x680>
   117a0:	adds	r2, r2, #0
   117a4:	adc	r3, r3, #1
   117a8:	strd	r2, [sp, #104]	; 0x68
   117ac:	ldrd	r0, [sp, #80]	; 0x50
   117b0:	ldrd	r2, [sp, #16]
   117b4:	ldr	lr, [sp, #56]	; 0x38
   117b8:	mul	ip, r0, r3
   117bc:	umull	r6, r7, r0, r2
   117c0:	mla	ip, r2, r1, ip
   117c4:	ldrd	r2, [sp, #240]	; 0xf0
   117c8:	add	ip, ip, r7
   117cc:	mov	r3, #0
   117d0:	mov	r8, r2
   117d4:	mov	r2, r6
   117d8:	umull	r0, r1, ip, r8
   117dc:	umull	sl, fp, r2, r8
   117e0:	strd	r0, [sp, #8]
   117e4:	ldr	r1, [sp, #244]	; 0xf4
   117e8:	mov	r9, r3
   117ec:	ldr	r0, [sp, #12]
   117f0:	umull	r4, r5, r1, r2
   117f4:	ldr	r1, [sp, #244]	; 0xf4
   117f8:	mov	r3, #0
   117fc:	mul	r6, r6, r9
   11800:	mla	r5, r1, r3, r5
   11804:	mla	r1, ip, r9, r0
   11808:	mla	r6, r8, r3, r6
   1180c:	str	r1, [sp, #12]
   11810:	ldr	r1, [sp, #36]	; 0x24
   11814:	strd	r8, [sp, #136]	; 0x88
   11818:	add	r8, r6, fp
   1181c:	ldrd	sl, [sp, #8]
   11820:	str	r1, [sp, #24]
   11824:	mov	r1, #0
   11828:	str	r1, [sp, #28]
   1182c:	ldrd	r0, [sp, #24]
   11830:	adds	sl, sl, r4
   11834:	adc	fp, fp, r5
   11838:	mov	r5, fp
   1183c:	adds	r4, sl, r8
   11840:	ldr	fp, [sp, #32]
   11844:	adc	r5, r5, r1
   11848:	adds	r0, r1, lr
   1184c:	mov	r9, r1
   11850:	adc	r1, fp, #0
   11854:	strd	r0, [sp, #112]	; 0x70
   11858:	ldrd	r0, [sp, #8]
   1185c:	str	r9, [sp, #8]
   11860:	cmp	r1, r5
   11864:	ldr	r1, [sp, #244]	; 0xf4
   11868:	cmpeq	r0, r4
   1186c:	umull	r0, r1, ip, r1
   11870:	mov	r6, r0
   11874:	mov	r7, r1
   11878:	strd	r6, [sp, #64]	; 0x40
   1187c:	bls	1188c <__assert_fail@plt+0x760>
   11880:	adds	r6, r0, #0
   11884:	adc	r7, r1, #1
   11888:	strd	r6, [sp, #64]	; 0x40
   1188c:	ldr	r0, [sp, #236]	; 0xec
   11890:	ldrd	r6, [sp, #232]	; 0xe8
   11894:	mov	r7, #0
   11898:	umull	r8, r9, r0, r2
   1189c:	mul	r4, r2, r7
   118a0:	mov	sl, r6
   118a4:	mov	fp, r7
   118a8:	mul	r0, ip, r7
   118ac:	ldr	lr, [sp, #236]	; 0xec
   118b0:	umull	r6, r7, r2, r6
   118b4:	ldr	r1, [sp, #8]
   118b8:	mla	r4, sl, r3, r4
   118bc:	mla	r9, lr, r3, r9
   118c0:	umull	r2, r3, ip, sl
   118c4:	mla	r0, r1, sl, r0
   118c8:	strd	r6, [sp, #48]	; 0x30
   118cc:	ldr	lr, [sp, #52]	; 0x34
   118d0:	add	r3, r0, r3
   118d4:	ldr	r0, [sp, #236]	; 0xec
   118d8:	add	r4, r4, lr
   118dc:	adds	r8, r8, r2
   118e0:	strd	sl, [sp, #160]	; 0xa0
   118e4:	mov	sl, r4
   118e8:	adc	r9, r9, r3
   118ec:	mov	r6, r5
   118f0:	mov	r7, #0
   118f4:	umull	r4, r5, ip, r0
   118f8:	adds	r0, sl, r8
   118fc:	adc	r1, r7, r9
   11900:	cmp	r3, r1
   11904:	strd	r0, [sp, #56]	; 0x38
   11908:	ldr	r3, [sp, #236]	; 0xec
   1190c:	ldr	r1, [sp, #8]
   11910:	cmpeq	r2, r0
   11914:	strd	r4, [sp, #40]	; 0x28
   11918:	mla	r3, r1, r3, r5
   1191c:	str	r3, [sp, #44]	; 0x2c
   11920:	bls	11934 <__assert_fail@plt+0x808>
   11924:	ldrd	r2, [sp, #40]	; 0x28
   11928:	adds	r2, r2, #0
   1192c:	adc	r3, r3, #1
   11930:	strd	r2, [sp, #40]	; 0x28
   11934:	ldrd	r0, [sp, #16]
   11938:	ldrd	r8, [sp]
   1193c:	ldrd	sl, [sp, #72]	; 0x48
   11940:	mov	ip, r0
   11944:	ldr	r0, [sp, #228]	; 0xe4
   11948:	mov	r3, #0
   1194c:	orrs	r1, ip, r1
   11950:	umull	r4, r5, r0, r8
   11954:	mul	ip, sl, r3
   11958:	mov	r2, r8
   1195c:	strd	r4, [sp, #32]
   11960:	mov	r1, sl
   11964:	umull	r8, r9, sl, r9
   11968:	mla	r0, r2, fp, ip
   1196c:	mov	r5, fp
   11970:	mov	r4, sl
   11974:	ldrd	sl, [sp, #112]	; 0x70
   11978:	movne	r1, #1
   1197c:	moveq	r1, #0
   11980:	adds	sl, sl, r1
   11984:	str	r0, [sp, #72]	; 0x48
   11988:	adc	fp, fp, #0
   1198c:	adds	r0, sl, r6
   11990:	adc	r1, fp, r7
   11994:	mov	r7, r1
   11998:	ldr	r1, [sp, #60]	; 0x3c
   1199c:	mov	r6, r0
   119a0:	str	r1, [sp, #8]
   119a4:	ldrd	r0, [sp, #64]	; 0x40
   119a8:	ldr	ip, [sp, #228]	; 0xe4
   119ac:	ldr	lr, [sp, #36]	; 0x24
   119b0:	adds	r0, r0, r6
   119b4:	adc	r1, r1, r7
   119b8:	mla	ip, ip, r3, lr
   119bc:	mov	r7, r1
   119c0:	ldr	lr, [sp, #4]
   119c4:	mov	r1, #0
   119c8:	str	r1, [sp, #12]
   119cc:	ldr	r1, [sp, #56]	; 0x38
   119d0:	str	ip, [sp, #36]	; 0x24
   119d4:	mov	ip, #0
   119d8:	mov	r6, r0
   119dc:	mla	r9, lr, r5, r9
   119e0:	str	r1, [sp, #20]
   119e4:	str	ip, [sp, #16]
   119e8:	umull	r0, r1, r4, r2
   119ec:	ldr	lr, [sp, #48]	; 0x30
   119f0:	mov	ip, r5
   119f4:	ldrd	r4, [sp, #88]	; 0x58
   119f8:	cmp	fp, r7
   119fc:	cmpeq	sl, r6
   11a00:	movhi	ip, #1
   11a04:	movls	ip, #0
   11a08:	adds	r4, r4, r6
   11a0c:	adc	r5, r5, r7
   11a10:	strd	r0, [sp, #152]	; 0x98
   11a14:	cmp	r7, r5
   11a18:	ldr	r0, [sp, #72]	; 0x48
   11a1c:	cmpeq	r6, r4
   11a20:	str	ip, [sp, #56]	; 0x38
   11a24:	add	ip, r0, r1
   11a28:	movhi	r1, #1
   11a2c:	movls	r1, #0
   11a30:	str	r1, [sp, #64]	; 0x40
   11a34:	ldrd	r0, [sp, #16]
   11a38:	adds	r0, r0, lr
   11a3c:	adc	r1, r1, #0
   11a40:	adds	sl, r0, r4
   11a44:	adc	fp, r1, r5
   11a48:	cmp	r5, fp
   11a4c:	cmpeq	r4, sl
   11a50:	movhi	r1, #1
   11a54:	movls	r1, #0
   11a58:	str	r1, [sp, #72]	; 0x48
   11a5c:	ldrd	r0, [sp, #32]
   11a60:	ldrd	r4, [sp, #8]
   11a64:	strd	sl, [sp, #144]	; 0x90
   11a68:	adds	r0, r0, r8
   11a6c:	adc	r1, r1, r9
   11a70:	adds	sl, ip, r0
   11a74:	adc	fp, r5, r1
   11a78:	cmp	r9, fp
   11a7c:	strd	sl, [sp, #16]
   11a80:	ldr	r1, [sp, #228]	; 0xe4
   11a84:	ldr	r0, [sp, #4]
   11a88:	cmpeq	r8, sl
   11a8c:	str	r5, [sp, #60]	; 0x3c
   11a90:	umull	r0, r1, r1, r0
   11a94:	str	r5, [sp, #68]	; 0x44
   11a98:	str	r5, [sp, #76]	; 0x4c
   11a9c:	strd	r0, [sp, #112]	; 0x70
   11aa0:	mov	ip, r5
   11aa4:	bls	11ab4 <__assert_fail@plt+0x988>
   11aa8:	adds	r0, r0, #0
   11aac:	adc	r1, r1, #1
   11ab0:	strd	r0, [sp, #112]	; 0x70
   11ab4:	ldrd	r0, [sp, #128]	; 0x80
   11ab8:	ldr	lr, [sp, #220]	; 0xdc
   11abc:	umull	sl, fp, r0, r2
   11ac0:	mul	r4, r0, r3
   11ac4:	mul	r9, r0, ip
   11ac8:	strd	sl, [sp, #88]	; 0x58
   11acc:	ldrd	sl, [sp]
   11ad0:	mla	r4, r2, r1, r4
   11ad4:	mla	r9, fp, r1, r9
   11ad8:	mov	r1, r0
   11adc:	mul	r8, lr, r3
   11ae0:	umull	r0, r1, r1, fp
   11ae4:	mov	r7, r1
   11ae8:	ldr	r1, [sp, #96]	; 0x60
   11aec:	mov	r6, r0
   11af0:	ldr	r0, [sp, #20]
   11af4:	mla	r8, r1, r2, r8
   11af8:	ldr	r1, [sp, #220]	; 0xdc
   11afc:	strd	r6, [sp]
   11b00:	ldr	r6, [sp, #96]	; 0x60
   11b04:	umull	r2, r3, r1, r2
   11b08:	mul	ip, ip, r1
   11b0c:	ldr	r1, [sp, #92]	; 0x5c
   11b10:	str	r0, [sp, #32]
   11b14:	add	r1, r4, r1
   11b18:	add	r0, r9, r7
   11b1c:	mov	r4, r1
   11b20:	str	r0, [sp, #4]
   11b24:	mov	r1, #0
   11b28:	mla	lr, r6, fp, ip
   11b2c:	str	r1, [sp, #36]	; 0x24
   11b30:	ldrd	r6, [sp]
   11b34:	ldr	r1, [sp, #220]	; 0xdc
   11b38:	add	r3, r8, r3
   11b3c:	adds	r6, r6, r2
   11b40:	umull	r0, r1, r1, fp
   11b44:	ldrd	sl, [sp, #32]
   11b48:	adc	r7, r7, r3
   11b4c:	ldr	ip, [sp, #152]	; 0x98
   11b50:	adds	r2, r6, r4
   11b54:	ldrd	r4, [sp]
   11b58:	ldr	r9, [sp, #16]
   11b5c:	adc	r3, r7, fp
   11b60:	adds	r8, fp, ip
   11b64:	adc	r9, r9, #0
   11b68:	cmp	r5, r3
   11b6c:	strd	r0, [sp, #48]	; 0x30
   11b70:	cmpeq	r4, r2
   11b74:	add	r1, lr, r1
   11b78:	str	r1, [sp, #52]	; 0x34
   11b7c:	bls	11b90 <__assert_fail@plt+0xa64>
   11b80:	ldrd	r0, [sp, #48]	; 0x30
   11b84:	adds	r0, r0, #0
   11b88:	adc	r1, r1, #1
   11b8c:	strd	r0, [sp, #48]	; 0x30
   11b90:	ldrd	r0, [sp, #144]	; 0x90
   11b94:	mov	lr, #0
   11b98:	str	lr, [sp, #20]
   11b9c:	adds	r0, r0, r8
   11ba0:	adc	r1, r1, r9
   11ba4:	mov	r6, r0
   11ba8:	mov	r7, r1
   11bac:	ldrd	r0, [sp, #80]	; 0x50
   11bb0:	str	r3, [sp, #16]
   11bb4:	strd	r6, [sp, #96]	; 0x60
   11bb8:	mul	ip, r0, r7
   11bbc:	mla	ip, r6, r1, ip
   11bc0:	mov	r1, r0
   11bc4:	umull	r0, r1, r1, r6
   11bc8:	mov	r4, r0
   11bcc:	mov	r0, lr
   11bd0:	ldr	lr, [sp, #88]	; 0x58
   11bd4:	add	ip, ip, r1
   11bd8:	adds	sl, r0, lr
   11bdc:	mov	r5, r1
   11be0:	mov	r1, r2
   11be4:	adc	fp, r1, #0
   11be8:	cmp	r9, r7
   11bec:	cmpeq	r8, r6
   11bf0:	mov	r1, r7
   11bf4:	movhi	r1, #1
   11bf8:	movls	r1, #0
   11bfc:	strd	r4, [sp]
   11c00:	str	r1, [sp, #128]	; 0x80
   11c04:	str	ip, [sp, #4]
   11c08:	ldr	r1, [sp, #244]	; 0xf4
   11c0c:	ldrd	r2, [sp]
   11c10:	mov	r3, #0
   11c14:	mov	r4, #0
   11c18:	mul	r5, r1, r3
   11c1c:	ldrd	r8, [sp, #24]
   11c20:	mla	r5, r4, r2, r5
   11c24:	ldrd	r6, [sp, #8]
   11c28:	adds	r8, r8, sl
   11c2c:	mov	r0, r8
   11c30:	str	r5, [sp, #8]
   11c34:	ldrd	r4, [sp, #104]	; 0x68
   11c38:	adc	r9, r9, fp
   11c3c:	adds	r6, r6, r0
   11c40:	mov	r1, r9
   11c44:	mov	r0, r6
   11c48:	adc	r7, r7, r1
   11c4c:	adds	r4, r4, r0
   11c50:	mov	r0, r4
   11c54:	ldr	r4, [sp, #244]	; 0xf4
   11c58:	mov	r1, r7
   11c5c:	adc	r5, r5, r1
   11c60:	mov	r1, r5
   11c64:	umull	r4, r5, r4, r2
   11c68:	ldrd	r8, [sp, #136]	; 0x88
   11c6c:	strd	r4, [sp, #88]	; 0x58
   11c70:	ldrd	r4, [sp, #56]	; 0x38
   11c74:	umull	r6, r7, r8, ip
   11c78:	mul	lr, r8, r3
   11c7c:	adds	r4, r4, r0
   11c80:	adc	r5, r5, r1
   11c84:	mov	r0, r4
   11c88:	mov	r1, r5
   11c8c:	umull	r4, r5, r8, r2
   11c90:	mla	lr, r2, r9, lr
   11c94:	strd	r4, [sp, #24]
   11c98:	mov	r5, r9
   11c9c:	ldrd	r8, [sp]
   11ca0:	strd	r6, [sp, #80]	; 0x50
   11ca4:	mov	r6, r7
   11ca8:	mla	r5, r9, r5, r6
   11cac:	ldrd	r6, [sp, #40]	; 0x28
   11cb0:	str	r5, [sp, #84]	; 0x54
   11cb4:	ldrd	r4, [sp, #64]	; 0x40
   11cb8:	adds	r4, r4, r0
   11cbc:	adc	r5, r5, r1
   11cc0:	mov	r0, r4
   11cc4:	mov	r1, r5
   11cc8:	ldrd	r4, [sp, #72]	; 0x48
   11ccc:	adds	r4, r4, r0
   11cd0:	adc	r5, r5, r1
   11cd4:	adds	r6, r6, r4
   11cd8:	adc	r7, r7, r5
   11cdc:	ldrd	r4, [sp, #32]
   11ce0:	ldr	r1, [sp, #128]	; 0x80
   11ce4:	strd	r6, [sp, #40]	; 0x28
   11ce8:	adds	r4, r4, r1
   11cec:	adc	r5, r5, #0
   11cf0:	mov	r0, r4
   11cf4:	mov	r1, r5
   11cf8:	ldr	r4, [sp, #92]	; 0x5c
   11cfc:	ldr	r5, [sp, #8]
   11d00:	add	r4, r5, r4
   11d04:	str	r4, [sp, #92]	; 0x5c
   11d08:	ldr	r5, [sp, #244]	; 0xf4
   11d0c:	ldr	r8, [sp, #28]
   11d10:	add	lr, lr, r8
   11d14:	umull	r4, r5, r5, r9
   11d18:	ldrd	r8, [sp, #112]	; 0x70
   11d1c:	str	lr, [sp, #56]	; 0x38
   11d20:	strd	r4, [sp, #8]
   11d24:	adds	r8, r8, r0
   11d28:	adc	r9, r9, r1
   11d2c:	cmp	fp, r7
   11d30:	cmpeq	sl, r6
   11d34:	ldrd	r0, [sp, #16]
   11d38:	ldrd	r6, [sp, #80]	; 0x50
   11d3c:	ldrd	sl, [sp, #88]	; 0x58
   11d40:	movhi	lr, #1
   11d44:	movls	lr, #0
   11d48:	str	r1, [sp, #60]	; 0x3c
   11d4c:	adds	sl, sl, r6
   11d50:	adc	fp, fp, r7
   11d54:	ldrd	r6, [sp, #56]	; 0x38
   11d58:	strd	r8, [sp, #32]
   11d5c:	str	lr, [sp, #24]
   11d60:	adds	r6, r6, sl
   11d64:	adc	r7, r7, fp
   11d68:	mov	r8, r6
   11d6c:	mov	r9, r7
   11d70:	mov	lr, #0
   11d74:	ldrd	r6, [sp, #80]	; 0x50
   11d78:	mov	r4, r5
   11d7c:	mla	lr, lr, ip, r4
   11d80:	cmp	r7, r9
   11d84:	cmpeq	r6, r8
   11d88:	str	lr, [sp, #12]
   11d8c:	str	r1, [sp, #28]
   11d90:	mov	lr, r1
   11d94:	bls	11da8 <__assert_fail@plt+0xc7c>
   11d98:	ldrd	r0, [sp, #8]
   11d9c:	adds	r0, r0, #0
   11da0:	adc	r1, r1, #1
   11da4:	strd	r0, [sp, #8]
   11da8:	ldr	r6, [sp, #236]	; 0xec
   11dac:	ldrd	r0, [sp, #160]	; 0xa0
   11db0:	mov	r7, #0
   11db4:	mul	r8, r6, r3
   11db8:	mov	r6, #0
   11dbc:	mul	fp, r0, r3
   11dc0:	mla	r8, r6, r2, r8
   11dc4:	ldr	r6, [sp, #236]	; 0xec
   11dc8:	mul	sl, r0, lr
   11dcc:	umull	r4, r5, r0, r2
   11dd0:	mla	fp, r2, r1, fp
   11dd4:	umull	r2, r3, r6, r2
   11dd8:	mla	sl, ip, r1, sl
   11ddc:	umull	r0, r1, r0, ip
   11de0:	mul	lr, lr, r6
   11de4:	add	r3, r8, r3
   11de8:	ldr	r8, [sp, #236]	; 0xec
   11dec:	add	r1, sl, r1
   11df0:	adds	r2, r2, r0
   11df4:	add	fp, fp, r5
   11df8:	adc	r3, r3, r1
   11dfc:	mov	r6, r9
   11e00:	adds	r2, r2, fp
   11e04:	umull	r8, r9, r8, ip
   11e08:	mla	ip, ip, r7, lr
   11e0c:	adc	r3, r3, r7
   11e10:	cmp	r1, r3
   11e14:	cmpeq	r0, r2
   11e18:	strd	r4, [sp]
   11e1c:	add	r9, ip, r9
   11e20:	bls	11e2c <__assert_fail@plt+0xd00>
   11e24:	adds	r8, r8, #0
   11e28:	adc	r9, r9, #1
   11e2c:	ldrd	r0, [sp, #96]	; 0x60
   11e30:	ldrd	sl, [sp, #40]	; 0x28
   11e34:	mov	r4, r3
   11e38:	mov	ip, r0
   11e3c:	orrs	r1, ip, r1
   11e40:	movne	ip, #1
   11e44:	moveq	ip, #0
   11e48:	adds	sl, sl, ip
   11e4c:	adc	fp, fp, #0
   11e50:	mov	r1, r2
   11e54:	adds	r2, sl, r6
   11e58:	adc	r3, fp, r7
   11e5c:	mov	r6, r2
   11e60:	mov	r7, r3
   11e64:	ldrd	r2, [sp, #8]
   11e68:	mov	r0, #0
   11e6c:	ldr	ip, [sp]
   11e70:	adds	r2, r2, r6
   11e74:	adc	r3, r3, r7
   11e78:	mov	r6, r2
   11e7c:	mov	r7, r3
   11e80:	ldrd	r2, [sp, #16]
   11e84:	strd	sl, [sp, #40]	; 0x28
   11e88:	ldrd	sl, [sp, #24]
   11e8c:	adds	r2, r2, r4
   11e90:	adc	r3, r3, r0
   11e94:	mov	r4, r2
   11e98:	mov	r5, r3
   11e9c:	ldrd	r2, [sp, #32]
   11ea0:	adds	r2, r2, r6
   11ea4:	adc	r3, r3, r7
   11ea8:	adds	r0, r0, ip
   11eac:	adc	r1, r1, #0
   11eb0:	adds	sl, sl, r4
   11eb4:	adc	fp, fp, r5
   11eb8:	mov	r4, sl
   11ebc:	mov	r5, fp
   11ec0:	ldrd	sl, [sp, #48]	; 0x30
   11ec4:	adds	r0, r0, r2
   11ec8:	adc	r1, r1, r3
   11ecc:	adds	sl, sl, r4
   11ed0:	adc	fp, fp, r5
   11ed4:	mov	r4, sl
   11ed8:	mov	r5, fp
   11edc:	ldrd	sl, [sp, #40]	; 0x28
   11ee0:	cmp	fp, r7
   11ee4:	cmpeq	sl, r6
   11ee8:	movhi	ip, #1
   11eec:	movls	ip, #0
   11ef0:	adds	r4, r4, ip
   11ef4:	adc	r5, r5, #0
   11ef8:	cmp	r7, r3
   11efc:	cmpeq	r6, r2
   11f00:	movhi	ip, #1
   11f04:	movls	ip, #0
   11f08:	adds	r4, r4, ip
   11f0c:	adc	r5, r5, #0
   11f10:	cmp	r3, r1
   11f14:	cmpeq	r2, r0
   11f18:	movhi	r3, #1
   11f1c:	movls	r3, #0
   11f20:	adds	r4, r4, r3
   11f24:	ldrd	r2, [sp, #232]	; 0xe8
   11f28:	adc	r5, r5, #0
   11f2c:	adds	r8, r8, r4
   11f30:	adc	r9, r9, r5
   11f34:	cmp	r3, r9
   11f38:	cmpeq	r2, r8
   11f3c:	bcs	11f90 <__assert_fail@plt+0xe64>
   11f40:	ldrd	r2, [sp, #240]	; 0xf0
   11f44:	ldrd	r4, [sp, #232]	; 0xe8
   11f48:	cmp	r3, r1
   11f4c:	cmpeq	r2, r0
   11f50:	movhi	r2, #1
   11f54:	movls	r2, #0
   11f58:	subs	r4, r8, r4
   11f5c:	mov	r3, #0
   11f60:	sbc	r5, r9, r5
   11f64:	subs	r8, r4, r2
   11f68:	sbc	r9, r5, r3
   11f6c:	ldrd	r2, [sp, #240]	; 0xf0
   11f70:	subs	r2, r0, r2
   11f74:	sbc	r3, r1, r3
   11f78:	mov	r0, r2
   11f7c:	mov	r1, r3
   11f80:	ldr	r3, [sp, #124]	; 0x7c
   11f84:	strd	r8, [r3]
   11f88:	add	sp, sp, #172	; 0xac
   11f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f90:	ldrd	r4, [sp, #240]	; 0xf0
   11f94:	moveq	r3, #1
   11f98:	movne	r3, #0
   11f9c:	cmp	r5, r1
   11fa0:	cmpeq	r4, r0
   11fa4:	movhi	r3, #0
   11fa8:	andls	r3, r3, #1
   11fac:	cmp	r3, #0
   11fb0:	bne	11f40 <__assert_fail@plt+0xe14>
   11fb4:	b	11f80 <__assert_fail@plt+0xe54>
   11fb8:	ldr	r3, [pc, #52]	; 11ff4 <__assert_fail@plt+0xec8>
   11fbc:	ldr	r2, [pc, #52]	; 11ff8 <__assert_fail@plt+0xecc>
   11fc0:	ldr	r1, [pc, #52]	; 11ffc <__assert_fail@plt+0xed0>
   11fc4:	ldr	r0, [pc, #52]	; 12000 <__assert_fail@plt+0xed4>
   11fc8:	bl	1112c <__assert_fail@plt>
   11fcc:	ldr	r3, [pc, #32]	; 11ff4 <__assert_fail@plt+0xec8>
   11fd0:	ldr	r2, [pc, #44]	; 12004 <__assert_fail@plt+0xed8>
   11fd4:	ldr	r1, [pc, #32]	; 11ffc <__assert_fail@plt+0xed0>
   11fd8:	ldr	r0, [pc, #40]	; 12008 <__assert_fail@plt+0xedc>
   11fdc:	bl	1112c <__assert_fail@plt>
   11fe0:	ldr	r3, [pc, #12]	; 11ff4 <__assert_fail@plt+0xec8>
   11fe4:	ldr	r2, [pc, #32]	; 1200c <__assert_fail@plt+0xee0>
   11fe8:	ldr	r1, [pc, #12]	; 11ffc <__assert_fail@plt+0xed0>
   11fec:	ldr	r0, [pc, #28]	; 12010 <__assert_fail@plt+0xee4>
   11ff0:	bl	1112c <__assert_fail@plt>
   11ff4:	andeq	r6, r2, r0, ror r7
   11ff8:	andeq	r0, r0, r3, ror #7
   11ffc:	andeq	r9, r2, ip, lsr r8
   12000:	andeq	r9, r2, ip, lsl #17
   12004:	andeq	r0, r0, r2, ror #7
   12008:	andeq	r9, r2, ip, ror #16
   1200c:	andeq	r0, r0, r1, ror #7
   12010:	andeq	r9, r2, ip, asr #16
   12014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12018:	sub	sp, sp, #92	; 0x5c
   1201c:	ldrd	r8, [r3]
   12020:	ldr	ip, [sp, #136]	; 0x88
   12024:	str	r2, [sp, #84]	; 0x54
   12028:	strd	r8, [sp, #48]	; 0x30
   1202c:	ldrd	r8, [r3, #8]
   12030:	mov	fp, #64	; 0x40
   12034:	mov	sl, fp
   12038:	strd	r8, [sp, #56]	; 0x38
   1203c:	ldrd	r8, [r2]
   12040:	ldrd	r2, [ip]
   12044:	ldrd	r4, [r1]
   12048:	ldrd	r6, [r1, #8]
   1204c:	strd	r2, [sp, #72]	; 0x48
   12050:	ldrd	r2, [ip, #8]
   12054:	mov	fp, r0
   12058:	strd	r2, [sp, #64]	; 0x40
   1205c:	b	120b0 <__assert_fail@plt+0xf84>
   12060:	ldrd	r2, [sp, #128]	; 0x80
   12064:	strd	r4, [sp, #16]
   12068:	strd	r4, [sp]
   1206c:	strd	r2, [sp, #40]	; 0x28
   12070:	ldrd	r2, [sp, #48]	; 0x30
   12074:	strd	r6, [sp, #8]
   12078:	mov	r0, fp
   1207c:	strd	r2, [sp, #32]
   12080:	ldrd	r2, [sp, #56]	; 0x38
   12084:	lsrs	r9, r9, #1
   12088:	rrx	r8, r8
   1208c:	strd	r2, [sp, #24]
   12090:	mov	r2, r6
   12094:	mov	r3, r7
   12098:	bl	11620 <__assert_fail@plt+0x4f4>
   1209c:	subs	sl, sl, #1
   120a0:	ldrd	r6, [fp]
   120a4:	mov	r4, r0
   120a8:	mov	r5, r1
   120ac:	beq	12104 <__assert_fail@plt+0xfd8>
   120b0:	and	r2, r8, #1
   120b4:	mov	r3, #0
   120b8:	orrs	r3, r2, r3
   120bc:	beq	12060 <__assert_fail@plt+0xf34>
   120c0:	ldrd	r2, [sp, #128]	; 0x80
   120c4:	strd	r4, [sp, #16]
   120c8:	strd	r6, [sp, #8]
   120cc:	strd	r2, [sp, #40]	; 0x28
   120d0:	ldrd	r2, [sp, #48]	; 0x30
   120d4:	mov	r0, fp
   120d8:	strd	r2, [sp, #32]
   120dc:	ldrd	r2, [sp, #56]	; 0x38
   120e0:	strd	r2, [sp, #24]
   120e4:	ldrd	r2, [sp, #72]	; 0x48
   120e8:	strd	r2, [sp]
   120ec:	ldrd	r2, [sp, #64]	; 0x40
   120f0:	bl	11620 <__assert_fail@plt+0x4f4>
   120f4:	ldrd	r2, [fp]
   120f8:	strd	r2, [sp, #64]	; 0x40
   120fc:	strd	r0, [sp, #72]	; 0x48
   12100:	b	12060 <__assert_fail@plt+0xf34>
   12104:	ldr	r3, [sp, #84]	; 0x54
   12108:	mov	sl, fp
   1210c:	ldrd	r8, [r3, #8]
   12110:	orrs	r3, r8, r9
   12114:	bne	1216c <__assert_fail@plt+0x1040>
   12118:	b	121c0 <__assert_fail@plt+0x1094>
   1211c:	ldrd	r2, [sp, #128]	; 0x80
   12120:	strd	r4, [sp, #16]
   12124:	strd	r4, [sp]
   12128:	strd	r2, [sp, #40]	; 0x28
   1212c:	ldrd	r2, [sp, #48]	; 0x30
   12130:	strd	r6, [sp, #8]
   12134:	mov	r0, sl
   12138:	strd	r2, [sp, #32]
   1213c:	ldrd	r2, [sp, #56]	; 0x38
   12140:	lsrs	r9, r9, #1
   12144:	rrx	r8, r8
   12148:	strd	r2, [sp, #24]
   1214c:	mov	r3, r7
   12150:	mov	r2, r6
   12154:	bl	11620 <__assert_fail@plt+0x4f4>
   12158:	orrs	r3, r8, r9
   1215c:	ldrd	r6, [sl]
   12160:	mov	r4, r0
   12164:	mov	r5, r1
   12168:	beq	121c0 <__assert_fail@plt+0x1094>
   1216c:	and	r2, r8, #1
   12170:	mov	r3, #0
   12174:	orrs	r3, r2, r3
   12178:	beq	1211c <__assert_fail@plt+0xff0>
   1217c:	ldrd	r2, [sp, #128]	; 0x80
   12180:	strd	r4, [sp, #16]
   12184:	strd	r6, [sp, #8]
   12188:	strd	r2, [sp, #40]	; 0x28
   1218c:	ldrd	r2, [sp, #48]	; 0x30
   12190:	mov	r0, sl
   12194:	strd	r2, [sp, #32]
   12198:	ldrd	r2, [sp, #56]	; 0x38
   1219c:	strd	r2, [sp, #24]
   121a0:	ldrd	r2, [sp, #72]	; 0x48
   121a4:	strd	r2, [sp]
   121a8:	ldrd	r2, [sp, #64]	; 0x40
   121ac:	bl	11620 <__assert_fail@plt+0x4f4>
   121b0:	ldrd	r2, [sl]
   121b4:	strd	r2, [sp, #64]	; 0x40
   121b8:	strd	r0, [sp, #72]	; 0x48
   121bc:	b	1211c <__assert_fail@plt+0xff0>
   121c0:	ldrd	r2, [sp, #64]	; 0x40
   121c4:	ldrd	r0, [sp, #72]	; 0x48
   121c8:	strd	r2, [sl]
   121cc:	add	sp, sp, #92	; 0x5c
   121d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121d8:	sub	sp, sp, #116	; 0x74
   121dc:	add	r1, sp, #152	; 0x98
   121e0:	ldr	r6, [sp, #164]	; 0xa4
   121e4:	strd	r2, [sp, #56]	; 0x38
   121e8:	strd	r2, [sp]
   121ec:	str	r6, [sp, #8]
   121f0:	mov	r3, r0
   121f4:	ldm	r1, {r1, r2, r7}
   121f8:	mov	r5, r0
   121fc:	add	r0, sp, #104	; 0x68
   12200:	bl	12014 <__assert_fail@plt+0xee8>
   12204:	ldrd	r2, [r6]
   12208:	ldrd	r8, [sp, #104]	; 0x68
   1220c:	strd	r2, [sp, #72]	; 0x48
   12210:	strd	r8, [sp, #88]	; 0x58
   12214:	cmp	r1, r3
   12218:	cmpeq	r0, r2
   1221c:	ldrd	r2, [r6, #8]
   12220:	strd	r0, [sp, #80]	; 0x50
   12224:	mov	sl, r2
   12228:	mov	fp, r3
   1222c:	beq	1238c <__assert_fail@plt+0x1260>
   12230:	ldrd	r2, [r5]
   12234:	ldrd	r8, [sp, #72]	; 0x48
   12238:	strd	r2, [sp, #48]	; 0x30
   1223c:	ldrd	r0, [sp, #48]	; 0x30
   12240:	ldrd	r2, [r5, #8]
   12244:	subs	r0, r0, r8
   12248:	sbc	r1, r1, r9
   1224c:	strd	r2, [sp, #96]	; 0x60
   12250:	subs	r2, r2, sl
   12254:	mov	r8, r0
   12258:	mov	r9, r1
   1225c:	sbc	r3, r3, fp
   12260:	ldrd	r0, [sp, #48]	; 0x30
   12264:	ldrd	sl, [sp, #72]	; 0x48
   12268:	strd	r8, [sp, #64]	; 0x40
   1226c:	cmp	fp, r1
   12270:	cmpeq	sl, r0
   12274:	movhi	ip, #1
   12278:	movls	ip, #0
   1227c:	subs	sl, r2, ip
   12280:	sbc	fp, r3, #0
   12284:	ldrd	r2, [sp, #80]	; 0x50
   12288:	strd	sl, [sp, #72]	; 0x48
   1228c:	cmp	r3, r9
   12290:	cmpeq	r2, r8
   12294:	ldrd	r8, [sp, #88]	; 0x58
   12298:	moveq	ip, #1
   1229c:	movne	ip, #0
   122a0:	cmp	r9, fp
   122a4:	cmpeq	r8, sl
   122a8:	movne	ip, #0
   122ac:	andeq	ip, ip, #1
   122b0:	cmp	ip, #0
   122b4:	str	ip, [sp, #88]	; 0x58
   122b8:	bne	1239c <__assert_fail@plt+0x1270>
   122bc:	cmp	r7, #1
   122c0:	bls	12380 <__assert_fail@plt+0x1254>
   122c4:	str	r6, [sp, #164]	; 0xa4
   122c8:	mov	r4, #1
   122cc:	mov	r6, r7
   122d0:	mov	r0, r2
   122d4:	mov	r1, r3
   122d8:	ldrd	sl, [sp, #96]	; 0x60
   122dc:	ldr	r7, [sp, #164]	; 0xa4
   122e0:	b	122f8 <__assert_fail@plt+0x11cc>
   122e4:	cmp	r6, r4
   122e8:	beq	12380 <__assert_fail@plt+0x1254>
   122ec:	ldrd	r2, [r5]
   122f0:	ldrd	sl, [r5, #8]
   122f4:	strd	r2, [sp, #48]	; 0x30
   122f8:	ldrd	r2, [sp, #56]	; 0x38
   122fc:	strd	sl, [sp, #24]
   12300:	strd	r0, [sp, #16]
   12304:	strd	r2, [sp, #40]	; 0x28
   12308:	ldrd	r2, [sp, #48]	; 0x30
   1230c:	strd	r8, [sp, #8]
   12310:	strd	r0, [sp]
   12314:	strd	r2, [sp, #32]
   12318:	add	r0, sp, #104	; 0x68
   1231c:	mov	r2, r8
   12320:	mov	r3, r9
   12324:	bl	11620 <__assert_fail@plt+0x4f4>
   12328:	ldrd	r2, [sp, #64]	; 0x40
   1232c:	ldrd	r8, [sp, #104]	; 0x68
   12330:	ldrd	sl, [sp, #72]	; 0x48
   12334:	add	r4, r4, #1
   12338:	cmp	r3, r1
   1233c:	cmpeq	r2, r0
   12340:	moveq	r3, #1
   12344:	movne	r3, #0
   12348:	cmp	fp, r9
   1234c:	cmpeq	sl, r8
   12350:	movne	r3, #0
   12354:	andeq	r3, r3, #1
   12358:	cmp	r3, #0
   1235c:	bne	1239c <__assert_fail@plt+0x1270>
   12360:	ldrd	r2, [r7]
   12364:	cmp	r1, r3
   12368:	cmpeq	r0, r2
   1236c:	bne	122e4 <__assert_fail@plt+0x11b8>
   12370:	ldrd	r2, [r7, #8]
   12374:	cmp	r9, r3
   12378:	cmpeq	r8, r2
   1237c:	bne	122e4 <__assert_fail@plt+0x11b8>
   12380:	ldr	r0, [sp, #88]	; 0x58
   12384:	add	sp, sp, #116	; 0x74
   12388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1238c:	ldrd	r8, [sp, #88]	; 0x58
   12390:	cmp	r9, r3
   12394:	cmpeq	r8, r2
   12398:	bne	12230 <__assert_fail@plt+0x1104>
   1239c:	mov	r3, #1
   123a0:	str	r3, [sp, #88]	; 0x58
   123a4:	ldr	r0, [sp, #88]	; 0x58
   123a8:	add	sp, sp, #116	; 0x74
   123ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123b0:	push	{r4, r5, r6, lr}
   123b4:	sub	sp, sp, #24
   123b8:	mov	r4, r2
   123bc:	mov	r2, sp
   123c0:	bl	17c14 <__assert_fail@plt+0x6ae8>
   123c4:	mov	r5, sp
   123c8:	ldr	r6, [pc, #76]	; 1241c <__assert_fail@plt+0x12f0>
   123cc:	sub	r5, r0, r5
   123d0:	rsb	r5, r5, #20
   123d4:	cmp	r5, r4
   123d8:	mov	r1, r0
   123dc:	ldrcs	r4, [r6, #4]
   123e0:	bcs	12400 <__assert_fail@plt+0x12d4>
   123e4:	ldr	r3, [r6, #4]
   123e8:	sub	r4, r4, r5
   123ec:	mov	r2, #48	; 0x30
   123f0:	add	r4, r3, r4
   123f4:	strb	r2, [r3], #1
   123f8:	cmp	r3, r4
   123fc:	bne	123f4 <__assert_fail@plt+0x12c8>
   12400:	mov	r2, r5
   12404:	mov	r0, r4
   12408:	bl	10ed4 <memcpy@plt>
   1240c:	add	r4, r4, r5
   12410:	str	r4, [r6, #4]
   12414:	add	sp, sp, #24
   12418:	pop	{r4, r5, r6, pc}
   1241c:	andeq	fp, r3, ip, lsl #3
   12420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12424:	mov	r4, r0
   12428:	mov	r5, r1
   1242c:	sub	sp, sp, #36	; 0x24
   12430:	orrs	ip, r4, r5
   12434:	strd	r2, [sp, #8]
   12438:	moveq	r0, r2
   1243c:	moveq	r1, r3
   12440:	moveq	r2, #0
   12444:	beq	12570 <__assert_fail@plt+0x1444>
   12448:	add	r3, pc, #304	; 0x130
   1244c:	ldrd	r2, [r3]
   12450:	bl	2656c <__assert_fail@plt+0x15440>
   12454:	add	r3, pc, #292	; 0x124
   12458:	ldrd	r2, [r3]
   1245c:	mov	r8, #0
   12460:	mov	r9, #0
   12464:	strd	r0, [sp, #24]
   12468:	mov	r0, r4
   1246c:	mov	r1, r5
   12470:	bl	2656c <__assert_fail@plt+0x15440>
   12474:	add	r5, pc, #260	; 0x104
   12478:	ldrd	r4, [r5]
   1247c:	mov	r0, r8
   12480:	mov	r1, r9
   12484:	mov	lr, #0
   12488:	mov	ip, #64	; 0x40
   1248c:	str	ip, [sp, #20]
   12490:	strd	sl, [sp]
   12494:	mov	r6, r2
   12498:	mov	r7, r3
   1249c:	lsl	r3, r4, #31
   124a0:	str	r3, [sp, #4]
   124a4:	mov	r3, #0
   124a8:	lsrs	r1, r1, #1
   124ac:	rrx	r0, r0
   124b0:	lsrs	r5, r5, #1
   124b4:	rrx	r4, r4
   124b8:	str	r3, [sp]
   124bc:	adds	r2, r8, r8
   124c0:	adc	r3, r9, r9
   124c4:	ldrd	r8, [sp]
   124c8:	cmp	r5, r7
   124cc:	cmpeq	r4, r6
   124d0:	orr	r8, r8, r0
   124d4:	orr	r9, r9, r1
   124d8:	mov	r0, r8
   124dc:	mov	r1, r9
   124e0:	moveq	ip, #1
   124e4:	movne	ip, #0
   124e8:	mov	r8, r2
   124ec:	mov	r9, r3
   124f0:	bcc	12510 <__assert_fail@plt+0x13e4>
   124f4:	ldrd	sl, [sp, #8]
   124f8:	cmp	r1, fp
   124fc:	cmpeq	r0, sl
   12500:	movhi	ip, #0
   12504:	andls	ip, ip, #1
   12508:	cmp	ip, #0
   1250c:	beq	12548 <__assert_fail@plt+0x141c>
   12510:	ldrd	sl, [sp, #8]
   12514:	adds	r8, r2, #1
   12518:	adc	r9, r3, #0
   1251c:	cmp	r1, fp
   12520:	cmpeq	r0, sl
   12524:	movhi	r2, #1
   12528:	movls	r2, #0
   1252c:	subs	r6, r6, r4
   12530:	sbc	r7, r7, r5
   12534:	subs	r6, r6, r2
   12538:	sbc	r7, r7, lr
   1253c:	subs	r2, sl, r0
   12540:	sbc	r3, fp, r1
   12544:	strd	r2, [sp, #8]
   12548:	ldr	r3, [sp, #20]
   1254c:	subs	r3, r3, #1
   12550:	str	r3, [sp, #20]
   12554:	bne	1249c <__assert_fail@plt+0x1370>
   12558:	mov	r2, r8
   1255c:	ldrd	r0, [sp, #24]
   12560:	mov	r3, r9
   12564:	bl	12420 <__assert_fail@plt+0x12f4>
   12568:	ldrd	r0, [sp, #8]
   1256c:	mov	r2, #9
   12570:	add	sp, sp, #36	; 0x24
   12574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12578:	b	123b0 <__assert_fail@plt+0x1284>
   1257c:	nop			; (mov r0, r0)
   12580:	blcc	fe6c4d88 <stdout@@GLIBC_2.4+0xfe689c04>
   12584:	andeq	r0, r0, r0
   12588:	push	{r0, r1, r2, r3}
   1258c:	push	{r4, r5, lr}
   12590:	sub	sp, sp, #12
   12594:	add	r4, sp, #28
   12598:	ldr	r5, [sp, #24]
   1259c:	b	125a4 <__assert_fail@plt+0x1478>
   125a0:	blx	r5
   125a4:	add	r4, r4, #4
   125a8:	ldr	r3, [r4, #-4]
   125ac:	str	r4, [sp, #4]
   125b0:	subs	r0, r3, #0
   125b4:	bne	125a0 <__assert_fail@plt+0x1474>
   125b8:	add	sp, sp, #12
   125bc:	pop	{r4, r5, lr}
   125c0:	add	sp, sp, #16
   125c4:	bx	lr
   125c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125cc:	sub	sp, sp, #12
   125d0:	ldr	r7, [r0, #8]
   125d4:	ldr	r3, [r0]
   125d8:	subs	r5, r7, #1
   125dc:	mov	r8, r0
   125e0:	mov	r6, r1
   125e4:	str	r3, [sp]
   125e8:	ldr	fp, [r0, #4]
   125ec:	bmi	12744 <__assert_fail@plt+0x1618>
   125f0:	add	r4, r7, r7, lsl #1
   125f4:	mov	r9, r5
   125f8:	lsl	r4, r4, #2
   125fc:	sub	sl, r4, #12
   12600:	add	sl, r3, sl
   12604:	b	12618 <__assert_fail@plt+0x14ec>
   12608:	sub	r9, r9, #1
   1260c:	cmn	r9, #1
   12610:	sub	sl, sl, #12
   12614:	beq	12654 <__assert_fail@plt+0x1528>
   12618:	mov	r1, r6
   1261c:	mov	r0, sl
   12620:	bl	1abcc <__assert_fail@plt+0x9aa0>
   12624:	cmp	r0, #0
   12628:	bgt	12608 <__assert_fail@plt+0x14dc>
   1262c:	mov	r0, sl
   12630:	mov	r1, r6
   12634:	bl	1abcc <__assert_fail@plt+0x9aa0>
   12638:	cmp	r0, #0
   1263c:	bne	126f8 <__assert_fail@plt+0x15cc>
   12640:	ldr	r2, [fp, r9, lsl #2]
   12644:	add	r2, r2, #1
   12648:	str	r2, [fp, r9, lsl #2]
   1264c:	add	sp, sp, #12
   12650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12654:	add	r3, r7, #1
   12658:	add	r1, r4, #12
   1265c:	ldr	r0, [sp]
   12660:	mov	r7, r3
   12664:	str	r3, [sp, #4]
   12668:	bl	238bc <__assert_fail@plt+0x12790>
   1266c:	lsl	r7, r7, #2
   12670:	mov	r1, r7
   12674:	mov	sl, r0
   12678:	mov	r0, fp
   1267c:	bl	238bc <__assert_fail@plt+0x12790>
   12680:	add	r4, sl, r4
   12684:	mov	fp, r0
   12688:	mov	r0, r4
   1268c:	bl	1a340 <__assert_fail@plt+0x9214>
   12690:	str	r9, [sp]
   12694:	sub	r2, r7, #4
   12698:	add	r7, fp, r2
   1269c:	mov	r0, r4
   126a0:	sub	r4, r0, #12
   126a4:	mov	r1, r4
   126a8:	bl	1a424 <__assert_fail@plt+0x92f8>
   126ac:	sub	r5, r5, #1
   126b0:	ldr	r1, [r7, #-4]
   126b4:	cmp	r5, r9
   126b8:	mov	r0, r4
   126bc:	str	r1, [r7], #-4
   126c0:	bgt	126a0 <__assert_fail@plt+0x1574>
   126c4:	ldr	r3, [sp]
   126c8:	mov	r1, r6
   126cc:	add	r9, r3, #1
   126d0:	add	r0, r9, r9, lsl #1
   126d4:	add	r0, sl, r0, lsl #2
   126d8:	bl	1a424 <__assert_fail@plt+0x92f8>
   126dc:	mov	r3, #1
   126e0:	str	r3, [fp, r9, lsl #2]
   126e4:	ldr	r3, [sp, #4]
   126e8:	stm	r8, {sl, fp}
   126ec:	str	r3, [r8, #8]
   126f0:	add	sp, sp, #12
   126f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126f8:	add	r3, r7, #1
   126fc:	add	r1, r4, #12
   12700:	ldr	r0, [sp]
   12704:	mov	r7, r3
   12708:	str	r3, [sp, #4]
   1270c:	bl	238bc <__assert_fail@plt+0x12790>
   12710:	lsl	r7, r7, #2
   12714:	mov	r1, r7
   12718:	mov	sl, r0
   1271c:	mov	r0, fp
   12720:	bl	238bc <__assert_fail@plt+0x12790>
   12724:	add	r4, sl, r4
   12728:	mov	fp, r0
   1272c:	mov	r0, r4
   12730:	bl	1a340 <__assert_fail@plt+0x9214>
   12734:	cmp	r5, r9
   12738:	str	r9, [sp]
   1273c:	bgt	12694 <__assert_fail@plt+0x1568>
   12740:	b	126c4 <__assert_fail@plt+0x1598>
   12744:	add	r3, r7, #1
   12748:	ldr	r0, [sp]
   1274c:	add	r4, r3, r3, lsl #1
   12750:	mov	r7, r3
   12754:	lsl	r4, r4, #2
   12758:	mov	r1, r4
   1275c:	str	r3, [sp, #4]
   12760:	str	r5, [sp]
   12764:	bl	238bc <__assert_fail@plt+0x12790>
   12768:	lsl	r1, r7, #2
   1276c:	mov	sl, r0
   12770:	mov	r0, fp
   12774:	bl	238bc <__assert_fail@plt+0x12790>
   12778:	mov	fp, r0
   1277c:	sub	r0, r4, #12
   12780:	add	r0, sl, r0
   12784:	bl	1a340 <__assert_fail@plt+0x9214>
   12788:	b	126c4 <__assert_fail@plt+0x1598>
   1278c:	push	{r4, r5, r6, lr}
   12790:	mov	r0, #1
   12794:	ldr	r5, [pc, #80]	; 127ec <__assert_fail@plt+0x16c0>
   12798:	ldm	r5, {r3, r4}
   1279c:	sub	r4, r4, r3
   127a0:	mov	r1, r3
   127a4:	mov	r2, r4
   127a8:	bl	17ba4 <__assert_fail@plt+0x6a78>
   127ac:	cmp	r4, r0
   127b0:	bne	127c0 <__assert_fail@plt+0x1694>
   127b4:	ldr	r3, [r5]
   127b8:	str	r3, [r5, #4]
   127bc:	pop	{r4, r5, r6, pc}
   127c0:	bl	11024 <__errno_location@plt>
   127c4:	mov	r2, #5
   127c8:	ldr	r1, [pc, #32]	; 127f0 <__assert_fail@plt+0x16c4>
   127cc:	ldr	r4, [r0]
   127d0:	mov	r0, #0
   127d4:	bl	10f04 <dcgettext@plt>
   127d8:	mov	r1, r4
   127dc:	ldr	r2, [pc, #16]	; 127f4 <__assert_fail@plt+0x16c8>
   127e0:	mov	r3, r0
   127e4:	mov	r0, #1
   127e8:	bl	10f94 <error@plt>
   127ec:	andeq	fp, r3, ip, lsl #3
   127f0:	andeq	r9, r2, ip, lsr #17
   127f4:	andeq	r9, r2, r0, asr sp
   127f8:	push	{r4, r5, r6, r7, r8, lr}
   127fc:	mov	r4, r2
   12800:	mov	r5, r3
   12804:	orrs	r3, r4, r5
   12808:	ldrd	r6, [sp, #24]
   1280c:	beq	1282c <__assert_fail@plt+0x1700>
   12810:	mov	r3, r0
   12814:	ldrd	r0, [r0, #8]
   12818:	orrs	r2, r0, r1
   1281c:	bne	12844 <__assert_fail@plt+0x1718>
   12820:	strd	r6, [r3]
   12824:	strd	r4, [r3, #8]
   12828:	pop	{r4, r5, r6, r7, r8, pc}
   1282c:	mov	r1, #1
   12830:	mov	r2, r6
   12834:	mov	r3, r7
   12838:	str	r1, [sp, #24]
   1283c:	pop	{r4, r5, r6, r7, r8, lr}
   12840:	b	114e0 <__assert_fail@plt+0x3b4>
   12844:	ldr	r3, [pc, #12]	; 12858 <__assert_fail@plt+0x172c>
   12848:	ldr	r2, [pc, #12]	; 1285c <__assert_fail@plt+0x1730>
   1284c:	ldr	r1, [pc, #12]	; 12860 <__assert_fail@plt+0x1734>
   12850:	ldr	r0, [pc, #12]	; 12864 <__assert_fail@plt+0x1738>
   12854:	bl	1112c <__assert_fail@plt>
   12858:	andeq	r6, r2, ip, ror r7
   1285c:	andeq	r0, r0, lr, lsr #4
   12860:	andeq	r9, r2, ip, lsr r8
   12864:			; <UNDEFINED> instruction: 0x000298b8
   12868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1286c:	sub	sp, sp, #44	; 0x2c
   12870:	mov	r1, #0
   12874:	ldrd	r4, [sp, #80]	; 0x50
   12878:	str	r0, [sp, #28]
   1287c:	ldrd	sl, [sp, #88]	; 0x58
   12880:	and	r0, r4, #1
   12884:	orrs	ip, r0, r1
   12888:	ldrd	r6, [sp, #96]	; 0x60
   1288c:	bne	128d4 <__assert_fail@plt+0x17a8>
   12890:	lsl	r1, r2, #31
   12894:	str	r1, [sp, #12]
   12898:	mov	r1, #0
   1289c:	str	r1, [sp, #8]
   128a0:	ldrd	r0, [sp, #8]
   128a4:	lsrs	r5, r5, #1
   128a8:	rrx	r4, r4
   128ac:	lsrs	r3, r3, #1
   128b0:	rrx	r2, r2
   128b4:	orr	r0, r0, r4
   128b8:	orr	r1, r1, r5
   128bc:	mov	r4, r0
   128c0:	mov	r5, r1
   128c4:	and	r0, r0, #1
   128c8:	mov	r1, #0
   128cc:	orrs	ip, r0, r1
   128d0:	beq	12890 <__assert_fail@plt+0x1764>
   128d4:	strd	r0, [sp, #8]
   128d8:	orr	r0, r2, sl
   128dc:	orr	r1, r3, fp
   128e0:	strd	r0, [sp, #16]
   128e4:	orrs	r1, r0, r1
   128e8:	beq	12a0c <__assert_fail@plt+0x18e0>
   128ec:	cmp	r3, fp
   128f0:	cmpeq	r2, sl
   128f4:	bhi	129ac <__assert_fail@plt+0x1880>
   128f8:	moveq	ip, #1
   128fc:	movne	ip, #0
   12900:	cmp	r5, r7
   12904:	cmpeq	r4, r6
   12908:	movhi	lr, #1
   1290c:	movls	lr, #0
   12910:	tst	ip, lr
   12914:	bne	129ac <__assert_fail@plt+0x1880>
   12918:	cmp	r3, fp
   1291c:	cmpeq	r2, sl
   12920:	bcc	1293c <__assert_fail@plt+0x1810>
   12924:	cmp	r5, r7
   12928:	cmpeq	r4, r6
   1292c:	movcs	ip, #0
   12930:	andcc	ip, ip, #1
   12934:	cmp	ip, #0
   12938:	beq	12ad4 <__assert_fail@plt+0x19a8>
   1293c:	subs	sl, sl, r2
   12940:	sbc	fp, fp, r3
   12944:	subs	sl, sl, lr
   12948:	sbc	fp, fp, #0
   1294c:	ldrd	r0, [sp, #8]
   12950:	subs	r6, r6, r4
   12954:	sbc	r7, r7, r5
   12958:	strd	r2, [sp, #16]
   1295c:	lsl	r3, sl, #31
   12960:	str	r3, [sp, #4]
   12964:	mov	r3, #0
   12968:	str	r3, [sp]
   1296c:	ldrd	r2, [sp]
   12970:	lsrs	r7, r7, #1
   12974:	rrx	r6, r6
   12978:	lsrs	fp, fp, #1
   1297c:	rrx	sl, sl
   12980:	orr	r2, r2, r6
   12984:	orr	r3, r3, r7
   12988:	mov	r6, r2
   1298c:	mov	r7, r3
   12990:	and	r2, r2, #1
   12994:	mov	r3, #0
   12998:	orrs	r3, r2, r3
   1299c:	beq	1295c <__assert_fail@plt+0x1830>
   129a0:	ldrd	r2, [sp, #16]
   129a4:	strd	r0, [sp, #8]
   129a8:	b	128d8 <__assert_fail@plt+0x17ac>
   129ac:	cmp	r5, r7
   129b0:	cmpeq	r4, r6
   129b4:	movcc	r0, #1
   129b8:	movcs	r0, #0
   129bc:	subs	r2, r2, sl
   129c0:	sbc	r3, r3, fp
   129c4:	mov	r1, #0
   129c8:	subs	r2, r2, r0
   129cc:	sbc	r3, r3, r1
   129d0:	subs	r4, r4, r6
   129d4:	sbc	r5, r5, r7
   129d8:	lsrs	r5, r5, #1
   129dc:	rrx	r4, r4
   129e0:	mov	r8, #0
   129e4:	orr	r4, r4, r8
   129e8:	and	r0, r4, #1
   129ec:	mov	r1, #0
   129f0:	lsl	r9, r2, #31
   129f4:	lsrs	r3, r3, #1
   129f8:	rrx	r2, r2
   129fc:	orrs	ip, r0, r1
   12a00:	orr	r5, r5, r9
   12a04:	beq	129d8 <__assert_fail@plt+0x18ac>
   12a08:	b	128d4 <__assert_fail@plt+0x17a8>
   12a0c:	ldrd	r0, [sp, #8]
   12a10:	ldr	ip, [sp, #28]
   12a14:	orrs	r3, r0, r1
   12a18:	ldrd	r2, [sp, #16]
   12a1c:	strd	r2, [ip]
   12a20:	bne	12aa0 <__assert_fail@plt+0x1974>
   12a24:	lsrs	r7, r7, #1
   12a28:	rrx	r6, r6
   12a2c:	b	12a7c <__assert_fail@plt+0x1950>
   12a30:	lsrs	r3, r5, #1
   12a34:	rrx	r2, r4
   12a38:	subs	r2, r2, r6
   12a3c:	sbc	r3, r3, r7
   12a40:	orrs	r1, r2, r3
   12a44:	asr	r8, r3, #31
   12a48:	and	r0, r2, r8
   12a4c:	and	r1, r3, r8
   12a50:	eor	r2, r2, r8
   12a54:	eor	r3, r3, r8
   12a58:	beq	12a90 <__assert_fail@plt+0x1964>
   12a5c:	adds	r6, r6, r0
   12a60:	adc	r7, r7, r1
   12a64:	subs	r2, r2, r8
   12a68:	sbc	r3, r3, r8
   12a6c:	mov	r4, r2
   12a70:	mov	r5, r3
   12a74:	and	r0, r4, #1
   12a78:	mov	r1, #0
   12a7c:	orrs	r3, r0, r1
   12a80:	bne	12a30 <__assert_fail@plt+0x1904>
   12a84:	lsrs	r5, r5, #1
   12a88:	rrx	r4, r4
   12a8c:	b	12a74 <__assert_fail@plt+0x1948>
   12a90:	orr	r0, r4, #1
   12a94:	mov	r1, r5
   12a98:	add	sp, sp, #44	; 0x2c
   12a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aa0:	orrs	r3, r6, r7
   12aa4:	moveq	r0, r4
   12aa8:	moveq	r1, r5
   12aac:	beq	12a98 <__assert_fail@plt+0x196c>
   12ab0:	mov	r2, r4
   12ab4:	mov	r3, r5
   12ab8:	mov	r4, r6
   12abc:	mov	r5, r7
   12ac0:	mov	r6, r2
   12ac4:	mov	r7, r3
   12ac8:	and	r0, r4, #1
   12acc:	mov	r1, #0
   12ad0:	b	12a24 <__assert_fail@plt+0x18f8>
   12ad4:	ldr	r1, [sp, #28]
   12ad8:	mov	r0, r4
   12adc:	strd	r2, [r1]
   12ae0:	mov	r1, r5
   12ae4:	add	sp, sp, #44	; 0x2c
   12ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af0:	sub	sp, sp, #36	; 0x24
   12af4:	mov	r8, r2
   12af8:	mov	r9, r3
   12afc:	ldrd	r2, [sp, #80]	; 0x50
   12b00:	str	r0, [sp, #20]
   12b04:	ldr	r7, [sp, #72]	; 0x48
   12b08:	orrs	r3, r2, r3
   12b0c:	ldr	r3, [sp, #76]	; 0x4c
   12b10:	ldr	r6, [sp, #88]	; 0x58
   12b14:	str	r3, [sp, #8]
   12b18:	ldr	ip, [sp, #92]	; 0x5c
   12b1c:	beq	12d60 <__assert_fail@plt+0x1c34>
   12b20:	orrs	r3, r8, r9
   12b24:	beq	12d54 <__assert_fail@plt+0x1c28>
   12b28:	ldrd	r2, [sp, #80]	; 0x50
   12b2c:	mov	r2, #0
   12b30:	mov	lr, #0
   12b34:	and	r3, r3, #-16777216	; 0xff000000
   12b38:	orrs	r3, r2, r3
   12b3c:	ldrd	r2, [sp, #80]	; 0x50
   12b40:	bne	12b6c <__assert_fail@plt+0x1a40>
   12b44:	lsl	r1, r3, #8
   12b48:	orr	r1, r1, r2, lsr #24
   12b4c:	lsl	r0, r2, #8
   12b50:	mov	r2, r0
   12b54:	mov	r3, r1
   12b58:	mov	r0, #0
   12b5c:	and	r1, r1, #-16777216	; 0xff000000
   12b60:	orrs	r1, r0, r1
   12b64:	add	lr, lr, #8
   12b68:	beq	12b44 <__assert_fail@plt+0x1a18>
   12b6c:	cmp	r2, #0
   12b70:	sbcs	r1, r3, #0
   12b74:	blt	12b90 <__assert_fail@plt+0x1a64>
   12b78:	adds	r2, r2, r2
   12b7c:	adc	r3, r3, r3
   12b80:	cmp	r2, #0
   12b84:	sbcs	r1, r3, #0
   12b88:	add	lr, lr, #1
   12b8c:	bge	12b78 <__assert_fail@plt+0x1a4c>
   12b90:	mov	r2, #0
   12b94:	and	r3, r9, #-16777216	; 0xff000000
   12b98:	orrs	r3, r2, r3
   12b9c:	mov	r4, #0
   12ba0:	mov	r2, r8
   12ba4:	mov	r3, r9
   12ba8:	bne	12bd4 <__assert_fail@plt+0x1aa8>
   12bac:	lsl	r1, r3, #8
   12bb0:	orr	r1, r1, r2, lsr #24
   12bb4:	lsl	r0, r2, #8
   12bb8:	mov	r2, r0
   12bbc:	mov	r3, r1
   12bc0:	mov	r0, #0
   12bc4:	and	r1, r1, #-16777216	; 0xff000000
   12bc8:	orrs	r1, r0, r1
   12bcc:	add	r4, r4, #8
   12bd0:	beq	12bac <__assert_fail@plt+0x1a80>
   12bd4:	cmp	r2, #0
   12bd8:	sbcs	r1, r3, #0
   12bdc:	blt	12bf8 <__assert_fail@plt+0x1acc>
   12be0:	adds	r2, r2, r2
   12be4:	adc	r3, r3, r3
   12be8:	cmp	r2, #0
   12bec:	sbcs	r1, r3, #0
   12bf0:	add	r4, r4, #1
   12bf4:	bge	12be0 <__assert_fail@plt+0x1ab4>
   12bf8:	sub	r3, lr, r4
   12bfc:	rsb	r2, r3, #64	; 0x40
   12c00:	mov	r0, #0
   12c04:	mov	r1, #0
   12c08:	lsl	fp, ip, r3
   12c0c:	strd	r0, [sp]
   12c10:	lsr	r1, r6, r2
   12c14:	str	r1, [sp]
   12c18:	ldr	lr, [sp]
   12c1c:	rsb	r0, r2, #32
   12c20:	ldr	r1, [sp, #84]	; 0x54
   12c24:	orr	r0, lr, ip, lsl r0
   12c28:	ldr	lr, [sp, #80]	; 0x50
   12c2c:	lsl	r5, r1, r3
   12c30:	sub	r1, r3, #32
   12c34:	str	r0, [sp]
   12c38:	orr	r5, r5, lr, lsl r1
   12c3c:	sub	r0, r2, #32
   12c40:	ldr	lr, [sp]
   12c44:	lsr	r2, ip, r2
   12c48:	orr	r0, lr, ip, lsr r0
   12c4c:	str	r2, [sp, #4]
   12c50:	ldr	r2, [sp, #80]	; 0x50
   12c54:	orr	fp, fp, r6, lsl r1
   12c58:	rsb	r1, r3, #32
   12c5c:	str	r0, [sp]
   12c60:	orr	r5, r5, r2, lsr r1
   12c64:	orr	fp, fp, r6, lsr r1
   12c68:	ldrd	r0, [sp]
   12c6c:	lsl	r4, r2, r3
   12c70:	orr	r1, r1, r5
   12c74:	orr	r0, r0, r4
   12c78:	cmp	r3, #0
   12c7c:	mov	r4, r0
   12c80:	mov	r5, r1
   12c84:	lsl	sl, r6, r3
   12c88:	ble	12d54 <__assert_fail@plt+0x1c28>
   12c8c:	mov	r2, #0
   12c90:	ldr	r1, [sp, #8]
   12c94:	mov	r0, r7
   12c98:	mov	ip, r2
   12c9c:	strd	r0, [sp, #8]
   12ca0:	cmp	r9, r5
   12ca4:	cmpeq	r8, r4
   12ca8:	bhi	12cd0 <__assert_fail@plt+0x1ba4>
   12cac:	ldrd	r0, [sp, #8]
   12cb0:	moveq	lr, #1
   12cb4:	movne	lr, #0
   12cb8:	cmp	r1, fp
   12cbc:	cmpeq	r0, sl
   12cc0:	movcc	lr, #0
   12cc4:	andcs	lr, lr, #1
   12cc8:	cmp	lr, #0
   12ccc:	beq	12d14 <__assert_fail@plt+0x1be8>
   12cd0:	ldrd	r0, [sp, #8]
   12cd4:	cmp	r1, fp
   12cd8:	cmpeq	r0, sl
   12cdc:	movcc	r1, #1
   12ce0:	movcs	r1, #0
   12ce4:	subs	r8, r8, r4
   12ce8:	stm	sp, {r1, ip}
   12cec:	ldrd	r0, [sp]
   12cf0:	sbc	r9, r9, r5
   12cf4:	subs	r0, r8, r0
   12cf8:	sbc	r1, r9, r1
   12cfc:	mov	r8, r0
   12d00:	mov	r9, r1
   12d04:	ldrd	r0, [sp, #8]
   12d08:	subs	r0, r0, sl
   12d0c:	sbc	r1, r1, fp
   12d10:	strd	r0, [sp, #8]
   12d14:	add	r2, r2, #1
   12d18:	lsrs	fp, fp, #1
   12d1c:	rrx	sl, sl
   12d20:	lsl	r7, r4, #31
   12d24:	mov	r6, #0
   12d28:	lsrs	r5, r5, #1
   12d2c:	rrx	r4, r4
   12d30:	cmp	r3, r2
   12d34:	orr	sl, sl, r6
   12d38:	orr	fp, fp, r7
   12d3c:	bne	12ca0 <__assert_fail@plt+0x1b74>
   12d40:	ldrd	r0, [sp, #8]
   12d44:	ldr	r3, [sp, #20]
   12d48:	strd	r8, [r3]
   12d4c:	add	sp, sp, #36	; 0x24
   12d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d54:	mov	r0, r7
   12d58:	ldr	r1, [sp, #8]
   12d5c:	b	12d44 <__assert_fail@plt+0x1c18>
   12d60:	ldr	r3, [pc, #12]	; 12d74 <__assert_fail@plt+0x1c48>
   12d64:	ldr	r2, [pc, #12]	; 12d78 <__assert_fail@plt+0x1c4c>
   12d68:	ldr	r1, [pc, #12]	; 12d7c <__assert_fail@plt+0x1c50>
   12d6c:	ldr	r0, [pc, #12]	; 12d80 <__assert_fail@plt+0x1c54>
   12d70:	bl	1112c <__assert_fail@plt>
   12d74:	muleq	r2, r0, r7
   12d78:	muleq	r0, fp, r1
   12d7c:	andeq	r9, r2, ip, lsr r8
   12d80:	ldrdeq	r9, [r2], -r0
   12d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d88:	mov	r4, r3
   12d8c:	mov	r6, r0
   12d90:	mov	r3, r0
   12d94:	mov	r7, r1
   12d98:	mov	r0, r4
   12d9c:	mov	r1, r2
   12da0:	ldr	r2, [sp, #32]
   12da4:	ldr	r8, [sp, #36]	; 0x24
   12da8:	bl	1d484 <__assert_fail@plt+0xc358>
   12dac:	mov	r0, r4
   12db0:	mov	r1, #1
   12db4:	bl	1ab74 <__assert_fail@plt+0x9a48>
   12db8:	cmp	r0, #0
   12dbc:	bne	12dc8 <__assert_fail@plt+0x1c9c>
   12dc0:	mov	r0, #1
   12dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dc8:	mov	r1, r7
   12dcc:	mov	r0, r4
   12dd0:	bl	1abcc <__assert_fail@plt+0x9aa0>
   12dd4:	cmp	r0, #0
   12dd8:	beq	12dc0 <__assert_fail@plt+0x1c94>
   12ddc:	cmp	r8, #1
   12de0:	movhi	r5, #1
   12de4:	movhi	sl, r5
   12de8:	movhi	r9, #2
   12dec:	bhi	12dfc <__assert_fail@plt+0x1cd0>
   12df0:	b	12e3c <__assert_fail@plt+0x1d10>
   12df4:	cmp	r8, r5
   12df8:	beq	12e3c <__assert_fail@plt+0x1d10>
   12dfc:	mov	r3, r6
   12e00:	mov	r2, r9
   12e04:	mov	r1, r4
   12e08:	mov	r0, r4
   12e0c:	bl	1d8ec <__assert_fail@plt+0xc7c0>
   12e10:	mov	r1, r7
   12e14:	mov	r0, r4
   12e18:	bl	1abcc <__assert_fail@plt+0x9aa0>
   12e1c:	add	r5, r5, #1
   12e20:	mov	r1, sl
   12e24:	cmp	r0, #0
   12e28:	mov	r0, r4
   12e2c:	beq	12dc0 <__assert_fail@plt+0x1c94>
   12e30:	bl	1ab74 <__assert_fail@plt+0x9a48>
   12e34:	cmp	r0, #0
   12e38:	bne	12df4 <__assert_fail@plt+0x1cc8>
   12e3c:	mov	r0, #0
   12e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e44:	mov	r3, #0
   12e48:	push	{r4, r5, r6, r7, r8, r9, lr}
   12e4c:	sub	sp, sp, #28
   12e50:	str	r3, [r1]
   12e54:	str	r3, [r1, #4]
   12e58:	str	r3, [r1, #8]
   12e5c:	mov	r7, r1
   12e60:	mov	r5, r0
   12e64:	bl	1aacc <__assert_fail@plt+0x99a0>
   12e68:	cmp	r0, #0
   12e6c:	bne	12e78 <__assert_fail@plt+0x1d4c>
   12e70:	add	sp, sp, #28
   12e74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12e78:	ldr	r8, [pc, #392]	; 13008 <__assert_fail@plt+0x1edc>
   12e7c:	ldrb	r3, [r8, #8]
   12e80:	cmp	r3, #0
   12e84:	bne	12fec <__assert_fail@plt+0x1ec0>
   12e88:	mov	r0, sp
   12e8c:	bl	1a340 <__assert_fail@plt+0x9214>
   12e90:	mov	r1, #0
   12e94:	mov	r0, r5
   12e98:	bl	1e464 <__assert_fail@plt+0xd338>
   12e9c:	mov	r1, r5
   12ea0:	mov	r4, r0
   12ea4:	mov	r2, r0
   12ea8:	mov	r0, r5
   12eac:	bl	1be40 <__assert_fail@plt+0xad14>
   12eb0:	cmp	r4, #0
   12eb4:	movne	r6, #2
   12eb8:	beq	12ee4 <__assert_fail@plt+0x1db8>
   12ebc:	mov	r1, r6
   12ec0:	add	r0, sp, #12
   12ec4:	bl	1a4b0 <__assert_fail@plt+0x9384>
   12ec8:	add	r1, sp, #12
   12ecc:	mov	r0, r7
   12ed0:	bl	125c8 <__assert_fail@plt+0x149c>
   12ed4:	add	r0, sp, #12
   12ed8:	bl	1a39c <__assert_fail@plt+0x9270>
   12edc:	subs	r4, r4, #1
   12ee0:	bne	12ebc <__assert_fail@plt+0x1d90>
   12ee4:	mov	r6, #1
   12ee8:	mov	r4, #3
   12eec:	ldr	r9, [pc, #280]	; 1300c <__assert_fail@plt+0x1ee0>
   12ef0:	b	12f18 <__assert_fail@plt+0x1dec>
   12ef4:	ldrb	r2, [ip, #40]	; 0x28
   12ef8:	mov	r6, r3
   12efc:	add	r4, r4, r2
   12f00:	mul	r1, r4, r4
   12f04:	bl	1ab74 <__assert_fail@plt+0x9a48>
   12f08:	cmp	r0, #0
   12f0c:	blt	12f70 <__assert_fail@plt+0x1e44>
   12f10:	cmp	r6, #668	; 0x29c
   12f14:	bhi	12f70 <__assert_fail@plt+0x1e44>
   12f18:	mov	r1, r4
   12f1c:	mov	r0, r5
   12f20:	bl	1c228 <__assert_fail@plt+0xb0fc>
   12f24:	add	ip, r9, r6
   12f28:	mov	r2, r4
   12f2c:	mov	r1, r5
   12f30:	add	r3, r6, #1
   12f34:	cmp	r0, #0
   12f38:	mov	r0, r5
   12f3c:	beq	12ef4 <__assert_fail@plt+0x1dc8>
   12f40:	mov	r0, r5
   12f44:	bl	1c0a0 <__assert_fail@plt+0xaf74>
   12f48:	mov	r1, r4
   12f4c:	add	r0, sp, #12
   12f50:	bl	1a4b0 <__assert_fail@plt+0x9384>
   12f54:	add	r1, sp, #12
   12f58:	mov	r0, r7
   12f5c:	bl	125c8 <__assert_fail@plt+0x149c>
   12f60:	add	r0, sp, #12
   12f64:	bl	1a39c <__assert_fail@plt+0x9270>
   12f68:	cmp	r6, #668	; 0x29c
   12f6c:	bls	12f18 <__assert_fail@plt+0x1dec>
   12f70:	mov	r0, sp
   12f74:	bl	1a39c <__assert_fail@plt+0x9270>
   12f78:	mov	r1, #1
   12f7c:	mov	r0, r5
   12f80:	bl	1ab74 <__assert_fail@plt+0x9a48>
   12f84:	cmp	r0, #0
   12f88:	beq	12e70 <__assert_fail@plt+0x1d44>
   12f8c:	ldrb	r3, [r8, #8]
   12f90:	cmp	r3, #0
   12f94:	bne	12fd0 <__assert_fail@plt+0x1ea4>
   12f98:	mov	r0, r5
   12f9c:	bl	1301c <__assert_fail@plt+0x1ef0>
   12fa0:	cmp	r0, #0
   12fa4:	bne	12fc0 <__assert_fail@plt+0x1e94>
   12fa8:	mov	r2, r7
   12fac:	mov	r0, r5
   12fb0:	mov	r1, #1
   12fb4:	bl	13238 <__assert_fail@plt+0x210c>
   12fb8:	add	sp, sp, #28
   12fbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12fc0:	mov	r1, r5
   12fc4:	mov	r0, r7
   12fc8:	bl	125c8 <__assert_fail@plt+0x149c>
   12fcc:	b	12e70 <__assert_fail@plt+0x1d44>
   12fd0:	ldr	r3, [pc, #56]	; 13010 <__assert_fail@plt+0x1ee4>
   12fd4:	mov	r2, #19
   12fd8:	mov	r1, #1
   12fdc:	ldr	r3, [r3]
   12fe0:	ldr	r0, [pc, #44]	; 13014 <__assert_fail@plt+0x1ee8>
   12fe4:	bl	10f58 <fwrite@plt>
   12fe8:	b	12f98 <__assert_fail@plt+0x1e6c>
   12fec:	ldr	r3, [pc, #28]	; 13010 <__assert_fail@plt+0x1ee4>
   12ff0:	mov	r2, #17
   12ff4:	mov	r1, #1
   12ff8:	ldr	r3, [r3]
   12ffc:	ldr	r0, [pc, #20]	; 13018 <__assert_fail@plt+0x1eec>
   13000:	bl	10f58 <fwrite@plt>
   13004:	b	12e88 <__assert_fail@plt+0x1d5c>
   13008:	andeq	fp, r3, ip, lsl #3
   1300c:	andeq	r6, r2, r0, ror r7
   13010:	andeq	fp, r3, r8, ror r1
   13014:	andeq	r9, r2, ip, ror #17
   13018:	ldrdeq	r9, [r2], -r8
   1301c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13020:	mov	r1, #1
   13024:	sub	sp, sp, #84	; 0x54
   13028:	mov	r7, r0
   1302c:	bl	1ab74 <__assert_fail@plt+0x9a48>
   13030:	cmp	r0, #0
   13034:	ble	131d4 <__assert_fail@plt+0x20a8>
   13038:	ldr	r1, [pc, #480]	; 13220 <__assert_fail@plt+0x20f4>
   1303c:	mov	r0, r7
   13040:	bl	1ab74 <__assert_fail@plt+0x9a48>
   13044:	cmp	r0, #0
   13048:	blt	131c0 <__assert_fail@plt+0x2094>
   1304c:	mov	r5, #0
   13050:	add	r4, sp, #56	; 0x38
   13054:	add	sl, sp, #20
   13058:	add	r3, sp, #44	; 0x2c
   1305c:	add	r2, sp, #32
   13060:	mov	r1, sl
   13064:	ldr	r0, [pc, #440]	; 13224 <__assert_fail@plt+0x20f8>
   13068:	stm	sp, {r4, r5}
   1306c:	bl	12588 <__assert_fail@plt+0x145c>
   13070:	mov	r2, #1
   13074:	add	r0, sp, #44	; 0x2c
   13078:	mov	r1, r7
   1307c:	bl	1aeac <__assert_fail@plt+0x9d80>
   13080:	mov	r1, r5
   13084:	add	r0, sp, #44	; 0x2c
   13088:	bl	1e464 <__assert_fail@plt+0xd338>
   1308c:	add	r1, sp, #44	; 0x2c
   13090:	mov	r2, r0
   13094:	mov	fp, r0
   13098:	mov	r0, sl
   1309c:	bl	1be6c <__assert_fail@plt+0xad40>
   130a0:	add	r0, sp, #32
   130a4:	mov	r1, #2
   130a8:	bl	1a410 <__assert_fail@plt+0x92e4>
   130ac:	mov	r3, r4
   130b0:	stm	sp, {sl, fp}
   130b4:	add	r2, sp, #32
   130b8:	add	r1, sp, #44	; 0x2c
   130bc:	mov	r0, r7
   130c0:	bl	12d84 <__assert_fail@plt+0x1c58>
   130c4:	subs	r3, r0, #0
   130c8:	str	r3, [sp, #12]
   130cc:	beq	131f4 <__assert_fail@plt+0x20c8>
   130d0:	add	r1, sp, #44	; 0x2c
   130d4:	mov	r0, r4
   130d8:	bl	1a424 <__assert_fail@plt+0x92f8>
   130dc:	add	r1, sp, #68	; 0x44
   130e0:	mov	r0, r4
   130e4:	bl	12e44 <__assert_fail@plt+0x1d18>
   130e8:	ldr	r9, [pc, #312]	; 13228 <__assert_fail@plt+0x20fc>
   130ec:	mov	r8, #1
   130f0:	ldr	r3, [sp, #76]	; 0x4c
   130f4:	cmp	r3, #0
   130f8:	beq	131ec <__assert_fail@plt+0x20c0>
   130fc:	mov	r6, #0
   13100:	mov	r5, r6
   13104:	b	13114 <__assert_fail@plt+0x1fe8>
   13108:	cmp	r0, #0
   1310c:	add	r6, r6, #12
   13110:	beq	13160 <__assert_fail@plt+0x2034>
   13114:	ldr	r2, [sp, #68]	; 0x44
   13118:	add	r1, sp, #44	; 0x2c
   1311c:	add	r2, r2, r6
   13120:	mov	r0, r4
   13124:	bl	1beb0 <__assert_fail@plt+0xad84>
   13128:	mov	r3, r7
   1312c:	mov	r2, r4
   13130:	add	r1, sp, #32
   13134:	mov	r0, r4
   13138:	bl	1d484 <__assert_fail@plt+0xc358>
   1313c:	mov	r1, r8
   13140:	mov	r0, r4
   13144:	bl	1ab74 <__assert_fail@plt+0x9a48>
   13148:	ldr	r3, [sp, #76]	; 0x4c
   1314c:	add	r5, r5, #1
   13150:	cmp	r5, r3
   13154:	bcc	13108 <__assert_fail@plt+0x1fdc>
   13158:	cmp	r0, #0
   1315c:	bne	131ec <__assert_fail@plt+0x20c0>
   13160:	add	r1, sp, #32
   13164:	mov	r0, r1
   13168:	ldrb	r2, [r9, #1]!
   1316c:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   13170:	stm	sp, {sl, fp}
   13174:	mov	r3, r4
   13178:	add	r2, sp, #32
   1317c:	add	r1, sp, #44	; 0x2c
   13180:	mov	r0, r7
   13184:	bl	12d84 <__assert_fail@plt+0x1c58>
   13188:	cmp	r0, #0
   1318c:	beq	131e8 <__assert_fail@plt+0x20bc>
   13190:	ldr	r3, [pc, #148]	; 1322c <__assert_fail@plt+0x2100>
   13194:	cmp	r9, r3
   13198:	bne	130f0 <__assert_fail@plt+0x1fc4>
   1319c:	mov	r2, #5
   131a0:	ldr	r1, [pc, #136]	; 13230 <__assert_fail@plt+0x2104>
   131a4:	mov	r0, #0
   131a8:	bl	10f04 <dcgettext@plt>
   131ac:	mov	r1, #0
   131b0:	mov	r2, r0
   131b4:	mov	r0, r1
   131b8:	bl	10f94 <error@plt>
   131bc:	bl	11120 <abort@plt>
   131c0:	mov	r3, #1
   131c4:	str	r3, [sp, #12]
   131c8:	ldr	r0, [sp, #12]
   131cc:	add	sp, sp, #84	; 0x54
   131d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d4:	mov	r3, #0
   131d8:	str	r3, [sp, #12]
   131dc:	ldr	r0, [sp, #12]
   131e0:	add	sp, sp, #84	; 0x54
   131e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e8:	str	r0, [sp, #12]
   131ec:	add	r0, sp, #68	; 0x44
   131f0:	bl	115d0 <__assert_fail@plt+0x4a4>
   131f4:	mov	r0, #0
   131f8:	str	r0, [sp, #4]
   131fc:	str	r4, [sp]
   13200:	add	r3, sp, #44	; 0x2c
   13204:	add	r2, sp, #32
   13208:	mov	r1, sl
   1320c:	ldr	r0, [pc, #32]	; 13234 <__assert_fail@plt+0x2108>
   13210:	bl	12588 <__assert_fail@plt+0x145c>
   13214:	ldr	r0, [sp, #12]
   13218:	add	sp, sp, #84	; 0x54
   1321c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13220:	cmneq	sp, r9, ror sp
   13224:	andeq	sl, r1, r0, asr #6
   13228:	muleq	r2, r7, r7
   1322c:	andeq	r6, r2, r3, lsr sl
   13230:	andeq	r9, r2, r0, lsl #18
   13234:	muleq	r1, ip, r3
   13238:	ldr	r3, [pc, #868]	; 135a4 <__assert_fail@plt+0x2478>
   1323c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13240:	sub	sp, sp, #116	; 0x74
   13244:	ldrb	r3, [r3, #8]
   13248:	mov	r5, r0
   1324c:	mov	sl, r1
   13250:	cmp	r3, #0
   13254:	str	r2, [sp, #32]
   13258:	bne	13588 <__assert_fail@plt+0x245c>
   1325c:	add	r2, sp, #100	; 0x64
   13260:	mov	r3, #0
   13264:	add	r1, sp, #88	; 0x58
   13268:	ldr	r0, [pc, #824]	; 135a8 <__assert_fail@plt+0x247c>
   1326c:	add	r8, sp, #64	; 0x40
   13270:	bl	12588 <__assert_fail@plt+0x145c>
   13274:	add	r4, sp, #40	; 0x28
   13278:	mov	r0, r8
   1327c:	mov	r1, #2
   13280:	bl	1a494 <__assert_fail@plt+0x9368>
   13284:	add	fp, sp, #52	; 0x34
   13288:	mov	r0, r4
   1328c:	mov	r1, #2
   13290:	bl	1a494 <__assert_fail@plt+0x9368>
   13294:	mov	r0, fp
   13298:	mov	r1, #2
   1329c:	bl	1a494 <__assert_fail@plt+0x9368>
   132a0:	mov	r3, #0
   132a4:	mov	r2, #1
   132a8:	mov	r7, r3
   132ac:	mov	r6, r2
   132b0:	add	r0, sp, #76	; 0x4c
   132b4:	mov	r1, #1
   132b8:	mov	r9, #1
   132bc:	strd	r6, [sp, #16]
   132c0:	bl	1a4b0 <__assert_fail@plt+0x9384>
   132c4:	add	r3, sl, r9
   132c8:	str	r3, [sp, #36]	; 0x24
   132cc:	mov	r1, r9
   132d0:	mov	r0, r5
   132d4:	bl	1ab74 <__assert_fail@plt+0x9a48>
   132d8:	cmp	r0, #0
   132dc:	bne	132f4 <__assert_fail@plt+0x21c8>
   132e0:	b	13540 <__assert_fail@plt+0x2414>
   132e4:	subs	r6, r6, #1
   132e8:	sbc	r7, r7, #0
   132ec:	orrs	r3, r6, r7
   132f0:	beq	133a8 <__assert_fail@plt+0x227c>
   132f4:	mov	r2, r4
   132f8:	mov	r1, r4
   132fc:	add	r0, sp, #88	; 0x58
   13300:	bl	1b774 <__assert_fail@plt+0xa648>
   13304:	mov	r2, r5
   13308:	add	r1, sp, #88	; 0x58
   1330c:	mov	r0, r4
   13310:	bl	1bde4 <__assert_fail@plt+0xacb8>
   13314:	mov	r2, sl
   13318:	mov	r1, r4
   1331c:	mov	r0, r4
   13320:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   13324:	mov	r2, r4
   13328:	mov	r1, fp
   1332c:	add	r0, sp, #88	; 0x58
   13330:	bl	1b114 <__assert_fail@plt+0x9fe8>
   13334:	add	r2, sp, #88	; 0x58
   13338:	add	r1, sp, #76	; 0x4c
   1333c:	add	r0, sp, #100	; 0x64
   13340:	bl	1b774 <__assert_fail@plt+0xa648>
   13344:	mov	r2, r5
   13348:	add	r1, sp, #100	; 0x64
   1334c:	add	r0, sp, #76	; 0x4c
   13350:	bl	1bde4 <__assert_fail@plt+0xacb8>
   13354:	mov	r3, #0
   13358:	and	r2, r6, #31
   1335c:	cmp	r3, #0
   13360:	cmpeq	r2, #1
   13364:	bne	132e4 <__assert_fail@plt+0x21b8>
   13368:	mov	r2, r5
   1336c:	add	r1, sp, #76	; 0x4c
   13370:	add	r0, sp, #88	; 0x58
   13374:	bl	1c25c <__assert_fail@plt+0xb130>
   13378:	mov	r1, r9
   1337c:	add	r0, sp, #88	; 0x58
   13380:	bl	1ab74 <__assert_fail@plt+0x9a48>
   13384:	cmp	r0, #0
   13388:	bne	13430 <__assert_fail@plt+0x2304>
   1338c:	mov	r1, r4
   13390:	mov	r0, r8
   13394:	bl	1a424 <__assert_fail@plt+0x92f8>
   13398:	subs	r6, r6, #1
   1339c:	sbc	r7, r7, #0
   133a0:	orrs	r3, r6, r7
   133a4:	bne	132f4 <__assert_fail@plt+0x21c8>
   133a8:	mov	r1, r4
   133ac:	mov	r0, fp
   133b0:	bl	1a424 <__assert_fail@plt+0x92f8>
   133b4:	ldrd	r0, [sp, #16]
   133b8:	adds	r2, r0, r0
   133bc:	adc	r3, r1, r1
   133c0:	strd	r2, [sp, #24]
   133c4:	orrs	r3, r0, r1
   133c8:	beq	13414 <__assert_fail@plt+0x22e8>
   133cc:	mov	r2, r4
   133d0:	mov	r1, r4
   133d4:	add	r0, sp, #88	; 0x58
   133d8:	bl	1b774 <__assert_fail@plt+0xa648>
   133dc:	adds	r6, r6, #1
   133e0:	mov	r2, r5
   133e4:	add	r1, sp, #88	; 0x58
   133e8:	mov	r0, r4
   133ec:	adc	r7, r7, #0
   133f0:	bl	1bde4 <__assert_fail@plt+0xacb8>
   133f4:	mov	r2, sl
   133f8:	mov	r1, r4
   133fc:	mov	r0, r4
   13400:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   13404:	ldrd	r2, [sp, #16]
   13408:	cmp	r3, r7
   1340c:	cmpeq	r2, r6
   13410:	bne	133cc <__assert_fail@plt+0x22a0>
   13414:	mov	r1, r4
   13418:	mov	r0, r8
   1341c:	ldrd	r6, [sp, #16]
   13420:	bl	1a424 <__assert_fail@plt+0x92f8>
   13424:	ldrd	r2, [sp, #24]
   13428:	strd	r2, [sp, #16]
   1342c:	b	132f4 <__assert_fail@plt+0x21c8>
   13430:	mov	r2, r8
   13434:	mov	r1, r8
   13438:	add	r0, sp, #88	; 0x58
   1343c:	bl	1b774 <__assert_fail@plt+0xa648>
   13440:	mov	r2, r5
   13444:	add	r1, sp, #88	; 0x58
   13448:	mov	r0, r8
   1344c:	bl	1bde4 <__assert_fail@plt+0xacb8>
   13450:	mov	r2, sl
   13454:	mov	r1, r8
   13458:	mov	r0, r8
   1345c:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   13460:	mov	r2, r8
   13464:	mov	r1, fp
   13468:	add	r0, sp, #88	; 0x58
   1346c:	bl	1b114 <__assert_fail@plt+0x9fe8>
   13470:	add	r1, sp, #88	; 0x58
   13474:	mov	r0, r1
   13478:	mov	r2, r5
   1347c:	bl	1c25c <__assert_fail@plt+0xb130>
   13480:	mov	r1, r9
   13484:	add	r0, sp, #88	; 0x58
   13488:	bl	1ab74 <__assert_fail@plt+0x9a48>
   1348c:	cmp	r0, #0
   13490:	beq	13430 <__assert_fail@plt+0x2304>
   13494:	add	r2, sp, #88	; 0x58
   13498:	mov	r1, r5
   1349c:	mov	r0, r5
   134a0:	bl	1beb0 <__assert_fail@plt+0xad84>
   134a4:	add	r0, sp, #88	; 0x58
   134a8:	bl	1301c <__assert_fail@plt+0x1ef0>
   134ac:	cmp	r0, #0
   134b0:	bne	13518 <__assert_fail@plt+0x23ec>
   134b4:	ldr	r3, [pc, #232]	; 135a4 <__assert_fail@plt+0x2478>
   134b8:	ldrb	r3, [r3, #8]
   134bc:	cmp	r3, #0
   134c0:	bne	1356c <__assert_fail@plt+0x2440>
   134c4:	ldr	r2, [sp, #32]
   134c8:	ldr	r1, [sp, #36]	; 0x24
   134cc:	add	r0, sp, #88	; 0x58
   134d0:	bl	13238 <__assert_fail@plt+0x210c>
   134d4:	mov	r0, r5
   134d8:	bl	1301c <__assert_fail@plt+0x1ef0>
   134dc:	cmp	r0, #0
   134e0:	bne	13534 <__assert_fail@plt+0x2408>
   134e4:	mov	r2, r5
   134e8:	mov	r1, r4
   134ec:	mov	r0, r4
   134f0:	bl	1bde4 <__assert_fail@plt+0xacb8>
   134f4:	mov	r2, r5
   134f8:	mov	r1, fp
   134fc:	mov	r0, fp
   13500:	bl	1bde4 <__assert_fail@plt+0xacb8>
   13504:	mov	r2, r5
   13508:	mov	r1, r8
   1350c:	mov	r0, r8
   13510:	bl	1bde4 <__assert_fail@plt+0xacb8>
   13514:	b	132cc <__assert_fail@plt+0x21a0>
   13518:	add	r1, sp, #88	; 0x58
   1351c:	ldr	r0, [sp, #32]
   13520:	bl	125c8 <__assert_fail@plt+0x149c>
   13524:	mov	r0, r5
   13528:	bl	1301c <__assert_fail@plt+0x1ef0>
   1352c:	cmp	r0, #0
   13530:	beq	134e4 <__assert_fail@plt+0x23b8>
   13534:	mov	r1, r5
   13538:	ldr	r0, [sp, #32]
   1353c:	bl	125c8 <__assert_fail@plt+0x149c>
   13540:	mov	r0, #0
   13544:	str	r0, [sp, #12]
   13548:	stmib	sp, {r4, r8}
   1354c:	str	fp, [sp]
   13550:	add	r3, sp, #88	; 0x58
   13554:	add	r2, sp, #100	; 0x64
   13558:	add	r1, sp, #76	; 0x4c
   1355c:	ldr	r0, [pc, #72]	; 135ac <__assert_fail@plt+0x2480>
   13560:	bl	12588 <__assert_fail@plt+0x145c>
   13564:	add	sp, sp, #116	; 0x74
   13568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1356c:	ldr	r3, [pc, #60]	; 135b0 <__assert_fail@plt+0x2484>
   13570:	mov	r2, #43	; 0x2b
   13574:	mov	r1, r9
   13578:	ldr	r3, [r3]
   1357c:	ldr	r0, [pc, #48]	; 135b4 <__assert_fail@plt+0x2488>
   13580:	bl	10f58 <fwrite@plt>
   13584:	b	134c4 <__assert_fail@plt+0x2398>
   13588:	ldr	r1, [pc, #32]	; 135b0 <__assert_fail@plt+0x2484>
   1358c:	mov	r3, sl
   13590:	ldr	r2, [pc, #32]	; 135b8 <__assert_fail@plt+0x248c>
   13594:	ldr	r0, [r1]
   13598:	mov	r1, #1
   1359c:	bl	11084 <__fprintf_chk@plt>
   135a0:	b	1325c <__assert_fail@plt+0x2130>
   135a4:	andeq	fp, r3, ip, lsl #3
   135a8:	andeq	sl, r1, r0, asr #6
   135ac:	muleq	r1, ip, r3
   135b0:	andeq	fp, r3, r8, ror r1
   135b4:	andeq	r9, r2, ip, asr #18
   135b8:	andeq	r9, r2, r4, lsr r9
   135bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c0:	sub	sp, sp, #132	; 0x84
   135c4:	mov	r4, r2
   135c8:	mov	r5, r3
   135cc:	and	r2, r2, #1
   135d0:	mov	r3, #0
   135d4:	orrs	r3, r2, r3
   135d8:	ldr	r3, [sp, #176]	; 0xb0
   135dc:	strd	r4, [sp, #48]	; 0x30
   135e0:	str	r3, [sp, #72]	; 0x48
   135e4:	ldr	r3, [sp, #180]	; 0xb4
   135e8:	mov	r8, r0
   135ec:	str	r3, [sp, #76]	; 0x4c
   135f0:	mov	r9, r1
   135f4:	ldr	r2, [sp, #184]	; 0xb8
   135f8:	ldr	r3, [sp, #188]	; 0xbc
   135fc:	bne	1393c <__assert_fail@plt+0x2810>
   13600:	mov	r0, r4
   13604:	mov	r1, r5
   13608:	orrs	r1, r0, r1
   1360c:	str	r2, [sp, #8]
   13610:	str	r3, [sp, #12]
   13614:	beq	13930 <__assert_fail@plt+0x2804>
   13618:	mov	r3, #0
   1361c:	str	r3, [sp, #112]	; 0x70
   13620:	ldr	lr, [sp, #172]	; 0xac
   13624:	ldrd	r2, [sp, #168]	; 0xa8
   13628:	mov	r3, #0
   1362c:	strd	r2, [sp, #56]	; 0x38
   13630:	mov	sl, r8
   13634:	mov	fp, #0
   13638:	mul	r3, sl, fp
   1363c:	umull	r6, r7, sl, sl
   13640:	umull	r0, r1, r9, sl
   13644:	add	r3, r7, r3, lsl #1
   13648:	str	r3, [sp, #16]
   1364c:	ldr	r3, [sp, #112]	; 0x70
   13650:	mla	r1, r9, fp, r1
   13654:	str	r3, [sp, #20]
   13658:	ldrd	r4, [sp, #16]
   1365c:	adds	r2, r0, r0
   13660:	adc	r3, r1, r1
   13664:	adds	r4, r4, r2
   13668:	adc	r5, r5, r3
   1366c:	cmp	r1, r5
   13670:	cmpeq	r0, r4
   13674:	mov	r2, r4
   13678:	mov	r3, r5
   1367c:	umull	r4, r5, r9, r9
   13680:	bls	1368c <__assert_fail@plt+0x2560>
   13684:	adds	r4, r4, #0
   13688:	adc	r5, r5, #1
   1368c:	mov	r1, #0
   13690:	str	r1, [sp, #4]
   13694:	str	r3, [sp]
   13698:	str	r2, [sp, #28]
   1369c:	ldrd	r2, [sp]
   136a0:	ldrd	sl, [sp, #56]	; 0x38
   136a4:	str	r3, [sp, #24]
   136a8:	ldrd	r0, [sp, #24]
   136ac:	adds	r0, r0, r6
   136b0:	adc	r1, r1, #0
   136b4:	adds	r2, r2, r4
   136b8:	adc	r3, r3, r5
   136bc:	ldr	r6, [sp, #72]	; 0x48
   136c0:	mov	r5, r3
   136c4:	ldr	r3, [sp, #76]	; 0x4c
   136c8:	mov	r4, r2
   136cc:	mul	ip, r0, r3
   136d0:	umull	r2, r3, r0, r6
   136d4:	mla	ip, r6, r1, ip
   136d8:	mul	r1, r2, fp
   136dc:	add	ip, ip, r3
   136e0:	mov	r3, #0
   136e4:	umull	r8, r9, r2, sl
   136e8:	mla	r8, sl, r3, r1
   136ec:	umull	r0, r1, r2, lr
   136f0:	umull	r6, r7, ip, sl
   136f4:	mla	r1, lr, r3, r1
   136f8:	add	r3, r8, r9
   136fc:	str	r3, [sp, #32]
   13700:	mov	r3, #0
   13704:	str	r3, [sp, #36]	; 0x24
   13708:	mla	r7, ip, fp, r7
   1370c:	ldrd	r2, [sp, #32]
   13710:	adds	r0, r0, r6
   13714:	adc	r1, r1, r7
   13718:	adds	r2, r2, r0
   1371c:	adc	r3, r3, r1
   13720:	cmp	r7, r3
   13724:	cmpeq	r6, r2
   13728:	mov	r1, r3
   1372c:	umull	r2, r3, ip, lr
   13730:	bls	1373c <__assert_fail@plt+0x2610>
   13734:	adds	r2, r2, #0
   13738:	adc	r3, r3, #1
   1373c:	str	r1, [sp, #40]	; 0x28
   13740:	mov	r1, #0
   13744:	str	r1, [sp, #44]	; 0x2c
   13748:	ldrd	r0, [sp, #40]	; 0x28
   1374c:	adds	r0, r0, r2
   13750:	adc	r1, r1, r3
   13754:	subs	r8, r4, r0
   13758:	sbc	r9, r5, r1
   1375c:	cmp	r5, r1
   13760:	cmpeq	r4, r0
   13764:	bcs	1377c <__assert_fail@plt+0x2650>
   13768:	ldrd	r2, [sp, #168]	; 0xa8
   1376c:	adds	r2, r2, r8
   13770:	adc	r3, r3, r9
   13774:	mov	r8, r2
   13778:	mov	r9, r3
   1377c:	ldrd	r2, [sp, #48]	; 0x30
   13780:	lsrs	r3, r3, #1
   13784:	rrx	r2, r2
   13788:	strd	r2, [sp, #48]	; 0x30
   1378c:	and	r2, r2, #1
   13790:	mov	r3, #0
   13794:	orrs	r3, r2, r3
   13798:	beq	13924 <__assert_fail@plt+0x27f8>
   1379c:	ldrd	r4, [sp, #8]
   137a0:	mov	fp, #0
   137a4:	mov	r1, #0
   137a8:	mul	ip, r4, fp
   137ac:	umull	r6, r7, r5, r8
   137b0:	umull	r2, r3, r9, r4
   137b4:	umull	r4, r5, r4, r8
   137b8:	mla	r0, r8, r1, ip
   137bc:	mla	r3, r9, r1, r3
   137c0:	add	r1, r0, r5
   137c4:	ldr	ip, [sp, #12]
   137c8:	str	r1, [sp, #80]	; 0x50
   137cc:	ldr	r1, [sp, #112]	; 0x70
   137d0:	mla	r7, ip, fp, r7
   137d4:	str	r1, [sp, #84]	; 0x54
   137d8:	ldrd	r0, [sp, #80]	; 0x50
   137dc:	adds	r2, r2, r6
   137e0:	adc	r3, r3, r7
   137e4:	adds	r0, r0, r2
   137e8:	adc	r1, r1, r3
   137ec:	cmp	r7, r1
   137f0:	cmpeq	r6, r0
   137f4:	mov	r2, r0
   137f8:	mov	r3, r1
   137fc:	mov	sl, r8
   13800:	umull	r0, r1, ip, r9
   13804:	bls	13810 <__assert_fail@plt+0x26e4>
   13808:	adds	r0, r0, #0
   1380c:	adc	r1, r1, #1
   13810:	mov	ip, #0
   13814:	str	ip, [sp, #68]	; 0x44
   13818:	str	r3, [sp, #64]	; 0x40
   1381c:	str	r2, [sp, #92]	; 0x5c
   13820:	ldrd	r2, [sp, #64]	; 0x40
   13824:	str	r3, [sp, #88]	; 0x58
   13828:	ldrd	r6, [sp, #88]	; 0x58
   1382c:	adds	r6, r6, r4
   13830:	adc	r7, r7, #0
   13834:	adds	r2, r2, r0
   13838:	adc	r3, r3, r1
   1383c:	ldrd	r4, [sp, #56]	; 0x38
   13840:	strd	r2, [sp, #8]
   13844:	ldr	r3, [sp, #76]	; 0x4c
   13848:	mul	r2, r6, r3
   1384c:	ldr	r3, [sp, #72]	; 0x48
   13850:	umull	r0, r1, r6, r3
   13854:	mla	r2, r3, r7, r2
   13858:	mov	r3, #0
   1385c:	add	ip, r2, r1
   13860:	mov	r2, r0
   13864:	umull	r0, r1, ip, r4
   13868:	mul	r6, r2, r5
   1386c:	umull	r4, r5, r2, r4
   13870:	strd	r4, [sp, #120]	; 0x78
   13874:	ldrd	r4, [sp, #56]	; 0x38
   13878:	mla	r6, r4, r3, r6
   1387c:	mla	r1, ip, r5, r1
   13880:	str	r6, [sp, #116]	; 0x74
   13884:	umull	r6, r7, r2, lr
   13888:	ldr	r2, [sp, #116]	; 0x74
   1388c:	mla	r7, lr, r3, r7
   13890:	ldr	r3, [sp, #124]	; 0x7c
   13894:	adds	r6, r6, r0
   13898:	add	r3, r2, r3
   1389c:	str	r3, [sp, #96]	; 0x60
   138a0:	mov	r3, #0
   138a4:	str	r3, [sp, #100]	; 0x64
   138a8:	ldrd	r2, [sp, #96]	; 0x60
   138ac:	adc	r7, r7, r1
   138b0:	adds	r2, r2, r6
   138b4:	adc	r3, r3, r7
   138b8:	cmp	r1, r3
   138bc:	cmpeq	r0, r2
   138c0:	mov	r7, r3
   138c4:	umull	r2, r3, ip, lr
   138c8:	bls	138d4 <__assert_fail@plt+0x27a8>
   138cc:	adds	r2, r2, #0
   138d0:	adc	r3, r3, #1
   138d4:	mov	r1, #0
   138d8:	str	r7, [sp, #104]	; 0x68
   138dc:	str	r1, [sp, #108]	; 0x6c
   138e0:	ldrd	r0, [sp, #104]	; 0x68
   138e4:	ldrd	r4, [sp, #8]
   138e8:	adds	r0, r0, r2
   138ec:	adc	r1, r1, r3
   138f0:	mov	r2, r0
   138f4:	subs	r0, r4, r2
   138f8:	mov	r3, r1
   138fc:	sbc	r1, r5, r3
   13900:	cmp	r5, r3
   13904:	cmpeq	r4, r2
   13908:	strd	r0, [sp, #8]
   1390c:	bcs	13638 <__assert_fail@plt+0x250c>
   13910:	ldrd	r2, [sp, #168]	; 0xa8
   13914:	adds	r2, r2, r0
   13918:	adc	r3, r3, r1
   1391c:	strd	r2, [sp, #8]
   13920:	b	13638 <__assert_fail@plt+0x250c>
   13924:	ldrd	r2, [sp, #48]	; 0x30
   13928:	orrs	r3, r2, r3
   1392c:	bne	13630 <__assert_fail@plt+0x2504>
   13930:	ldrd	r0, [sp, #8]
   13934:	add	sp, sp, #132	; 0x84
   13938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1393c:	strd	r8, [sp, #8]
   13940:	b	13618 <__assert_fail@plt+0x24ec>
   13944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13948:	sub	sp, sp, #116	; 0x74
   1394c:	mov	fp, r1
   13950:	ldrd	r4, [sp, #176]	; 0xb0
   13954:	mov	sl, r0
   13958:	str	r3, [sp, #100]	; 0x64
   1395c:	strd	r0, [sp]
   13960:	str	r2, [sp, #8]
   13964:	str	r3, [sp, #12]
   13968:	strd	r4, [sp, #16]
   1396c:	mov	r6, r2
   13970:	ldrd	r0, [sp, #152]	; 0x98
   13974:	ldrd	r2, [sp, #160]	; 0xa0
   13978:	strd	sl, [sp, #104]	; 0x68
   1397c:	bl	135bc <__assert_fail@plt+0x2490>
   13980:	ldrd	r4, [sp, #176]	; 0xb0
   13984:	ldrd	r8, [sp, #176]	; 0xb0
   13988:	mov	r3, fp
   1398c:	subs	r4, sl, r4
   13990:	sbc	r5, fp, r5
   13994:	strd	r4, [sp, #88]	; 0x58
   13998:	cmp	r9, r1
   1399c:	cmpeq	r8, r0
   139a0:	moveq	r3, #1
   139a4:	movne	r3, #0
   139a8:	cmp	r1, r5
   139ac:	cmpeq	r0, r4
   139b0:	movne	r8, r3
   139b4:	orreq	r8, r3, #1
   139b8:	cmp	r8, #0
   139bc:	bne	13b84 <__assert_fail@plt+0x2a58>
   139c0:	ldr	r3, [sp, #168]	; 0xa8
   139c4:	cmp	r3, #1
   139c8:	bls	13b84 <__assert_fail@plt+0x2a58>
   139cc:	mov	r2, sl
   139d0:	mov	r3, #0
   139d4:	mov	r9, #1
   139d8:	mov	lr, fp
   139dc:	strd	r2, [sp, #32]
   139e0:	str	r9, [sp, #44]	; 0x2c
   139e4:	str	r8, [sp, #96]	; 0x60
   139e8:	b	13a0c <__assert_fail@plt+0x28e0>
   139ec:	ldrd	r2, [sp, #176]	; 0xb0
   139f0:	cmp	r3, r1
   139f4:	cmpeq	r2, r0
   139f8:	beq	13b90 <__assert_fail@plt+0x2a64>
   139fc:	ldr	r3, [sp, #168]	; 0xa8
   13a00:	ldr	r2, [sp, #44]	; 0x2c
   13a04:	cmp	r3, r2
   13a08:	beq	13b90 <__assert_fail@plt+0x2a64>
   13a0c:	ldr	r3, [sp, #44]	; 0x2c
   13a10:	mov	r5, #0
   13a14:	add	r3, r3, #1
   13a18:	mul	ip, r0, r5
   13a1c:	str	r3, [sp, #44]	; 0x2c
   13a20:	umull	r2, r3, r0, r0
   13a24:	umull	sl, fp, r1, r0
   13a28:	add	ip, r3, ip, lsl #1
   13a2c:	str	ip, [sp, #48]	; 0x30
   13a30:	mov	ip, #0
   13a34:	str	ip, [sp, #52]	; 0x34
   13a38:	mla	fp, r1, r5, fp
   13a3c:	ldrd	r8, [sp, #48]	; 0x30
   13a40:	adds	r4, sl, sl
   13a44:	adc	r5, fp, fp
   13a48:	adds	r8, r8, r4
   13a4c:	adc	r9, r9, r5
   13a50:	cmp	fp, r9
   13a54:	cmpeq	sl, r8
   13a58:	str	r9, [sp, #24]
   13a5c:	str	ip, [sp, #28]
   13a60:	str	r8, [sp, #60]	; 0x3c
   13a64:	str	ip, [sp, #56]	; 0x38
   13a68:	umull	r4, r5, r1, r1
   13a6c:	bls	13a78 <__assert_fail@plt+0x294c>
   13a70:	adds	r4, r4, #0
   13a74:	adc	r5, r5, #1
   13a78:	ldrd	r0, [sp, #56]	; 0x38
   13a7c:	ldr	r3, [sp, #100]	; 0x64
   13a80:	ldrd	r8, [sp, #32]
   13a84:	adds	r0, r0, r2
   13a88:	adc	r1, r1, #0
   13a8c:	mul	ip, r0, r3
   13a90:	umull	r2, r3, r0, r6
   13a94:	mla	ip, r6, r1, ip
   13a98:	ldr	r7, [sp, #96]	; 0x60
   13a9c:	ldrd	r0, [sp, #24]
   13aa0:	add	ip, ip, r3
   13aa4:	mul	sl, r7, r2
   13aa8:	ldr	fp, [sp, #32]
   13aac:	mul	r7, r2, r9
   13ab0:	adds	r0, r0, r4
   13ab4:	mov	r3, #0
   13ab8:	adc	r1, r1, r5
   13abc:	umull	r4, r5, ip, r8
   13ac0:	umull	r8, r9, r2, r8
   13ac4:	mla	r7, fp, r3, r7
   13ac8:	mla	sl, lr, r3, sl
   13acc:	ldr	r3, [sp, #36]	; 0x24
   13ad0:	strd	r0, [sp, #80]	; 0x50
   13ad4:	umull	r0, r1, r2, lr
   13ad8:	mla	r5, ip, r3, r5
   13adc:	add	r3, r7, r9
   13ae0:	ldr	r7, [sp, #28]
   13ae4:	str	r3, [sp, #64]	; 0x40
   13ae8:	str	r7, [sp, #68]	; 0x44
   13aec:	ldrd	r8, [sp, #64]	; 0x40
   13af0:	adds	r0, r0, r4
   13af4:	add	r1, sl, r1
   13af8:	adc	r1, r1, r5
   13afc:	mov	r7, #0
   13b00:	adds	r8, r8, r0
   13b04:	umull	r2, r3, ip, lr
   13b08:	str	r7, [sp, #76]	; 0x4c
   13b0c:	adc	r9, r9, r1
   13b10:	ldr	r7, [sp, #96]	; 0x60
   13b14:	cmp	r5, r9
   13b18:	cmpeq	r4, r8
   13b1c:	str	r9, [sp, #72]	; 0x48
   13b20:	mla	r3, ip, r7, r3
   13b24:	bls	13b30 <__assert_fail@plt+0x2a04>
   13b28:	adds	r2, r2, #0
   13b2c:	adc	r3, r3, #1
   13b30:	ldrd	r0, [sp, #72]	; 0x48
   13b34:	ldrd	r4, [sp, #80]	; 0x50
   13b38:	adds	r0, r0, r2
   13b3c:	adc	r1, r1, r3
   13b40:	mov	r2, r0
   13b44:	mov	r3, r1
   13b48:	subs	r0, r4, r2
   13b4c:	sbc	r1, r5, r3
   13b50:	cmp	r5, r3
   13b54:	cmpeq	r4, r2
   13b58:	bcs	13b70 <__assert_fail@plt+0x2a44>
   13b5c:	ldrd	r2, [sp, #104]	; 0x68
   13b60:	adds	r2, r2, r0
   13b64:	adc	r3, r3, r1
   13b68:	mov	r0, r2
   13b6c:	mov	r1, r3
   13b70:	ldrd	r2, [sp, #88]	; 0x58
   13b74:	cmp	r3, r1
   13b78:	cmpeq	r2, r0
   13b7c:	bne	139ec <__assert_fail@plt+0x28c0>
   13b80:	mov	r8, #1
   13b84:	mov	r0, r8
   13b88:	add	sp, sp, #116	; 0x74
   13b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b90:	ldr	r8, [sp, #96]	; 0x60
   13b94:	mov	r0, r8
   13b98:	add	sp, sp, #116	; 0x74
   13b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ba4:	mov	r2, r0
   13ba8:	mov	r3, r1
   13bac:	sub	sp, sp, #412	; 0x19c
   13bb0:	strd	r2, [sp, #64]	; 0x40
   13bb4:	subs	r2, r0, #1
   13bb8:	sbc	r3, r1, #0
   13bbc:	mov	r0, r2
   13bc0:	mov	r1, r3
   13bc4:	and	r2, r2, #1
   13bc8:	mov	r3, #0
   13bcc:	orrs	r3, r2, r3
   13bd0:	strd	r0, [sp, #56]	; 0x38
   13bd4:	bne	140f4 <__assert_fail@plt+0x2fc8>
   13bd8:	mov	r3, r1
   13bdc:	mov	r2, r0
   13be0:	mov	r1, #0
   13be4:	lsrs	r3, r3, #1
   13be8:	rrx	r2, r2
   13bec:	and	r4, r2, #1
   13bf0:	mov	r5, #0
   13bf4:	orrs	r0, r4, r5
   13bf8:	add	r1, r1, #1
   13bfc:	beq	13be4 <__assert_fail@plt+0x2ab8>
   13c00:	strd	r2, [sp, #120]	; 0x78
   13c04:	str	r1, [sp, #132]	; 0x84
   13c08:	ldrd	r8, [sp, #64]	; 0x40
   13c0c:	ldr	r1, [pc, #1288]	; 1411c <__assert_fail@plt+0x2ff0>
   13c10:	mov	r6, #0
   13c14:	mov	r2, r8
   13c18:	mov	r3, r9
   13c1c:	lsrs	r3, r3, #1
   13c20:	rrx	r2, r2
   13c24:	and	r2, r2, #127	; 0x7f
   13c28:	add	r3, r1, r2
   13c2c:	mov	r2, r8
   13c30:	ldrb	r4, [r3, #716]	; 0x2cc
   13c34:	mov	r3, r9
   13c38:	mov	r9, #0
   13c3c:	mov	r8, r4
   13c40:	umull	r4, r5, r4, r4
   13c44:	strd	r2, [sp, #72]	; 0x48
   13c48:	adds	r0, r8, r8
   13c4c:	mul	ip, r4, r3
   13c50:	ldr	r3, [sp, #64]	; 0x40
   13c54:	adc	r1, r9, r9
   13c58:	umull	r8, r9, r4, r2
   13c5c:	mla	ip, r3, r5, ip
   13c60:	subs	r4, r0, r8
   13c64:	add	r9, ip, r9
   13c68:	sbc	r5, r1, r9
   13c6c:	adds	r0, r4, r4
   13c70:	adc	r1, r5, r5
   13c74:	mul	ip, r4, r5
   13c78:	umull	r4, r5, r4, r4
   13c7c:	ldrd	r8, [sp, #64]	; 0x40
   13c80:	add	r5, r5, ip, lsl #1
   13c84:	ldr	r3, [sp, #64]	; 0x40
   13c88:	mul	ip, r4, r9
   13c8c:	umull	r8, r9, r4, r8
   13c90:	mla	ip, r3, r5, ip
   13c94:	subs	r4, r0, r8
   13c98:	add	r9, ip, r9
   13c9c:	sbc	r5, r1, r9
   13ca0:	adds	r2, r4, r4
   13ca4:	adc	r3, r5, r5
   13ca8:	mul	ip, r4, r5
   13cac:	umull	r4, r5, r4, r4
   13cb0:	ldrd	r0, [sp, #64]	; 0x40
   13cb4:	add	r5, r5, ip, lsl #1
   13cb8:	mov	r7, #0
   13cbc:	mul	ip, r4, r1
   13cc0:	umull	r8, r9, r4, r0
   13cc4:	mla	ip, r0, r5, ip
   13cc8:	subs	r2, r2, r8
   13ccc:	add	r9, ip, r9
   13cd0:	mov	r1, #64	; 0x40
   13cd4:	sbc	r3, r3, r9
   13cd8:	mov	lr, r1
   13cdc:	ldrd	r0, [sp, #72]	; 0x48
   13ce0:	strd	r2, [sp, #40]	; 0x28
   13ce4:	mov	r4, #1
   13ce8:	mov	r5, #0
   13cec:	mov	ip, #0
   13cf0:	mov	r2, r6
   13cf4:	mov	r3, r7
   13cf8:	strd	r6, [sp, #48]	; 0x30
   13cfc:	lsl	fp, r0, #31
   13d00:	lsrs	r1, r1, #1
   13d04:	rrx	r0, r0
   13d08:	lsrs	r3, r3, #1
   13d0c:	rrx	r2, r2
   13d10:	cmp	r1, r5
   13d14:	mov	sl, #0
   13d18:	cmpeq	r0, r4
   13d1c:	orr	r2, r2, sl
   13d20:	orr	r3, r3, fp
   13d24:	bcc	13d48 <__assert_fail@plt+0x2c1c>
   13d28:	moveq	r8, #1
   13d2c:	movne	r8, sl
   13d30:	cmp	r3, r7
   13d34:	cmpeq	r2, r6
   13d38:	movhi	r8, #0
   13d3c:	andls	r8, r8, #1
   13d40:	cmp	r8, sl
   13d44:	beq	13d70 <__assert_fail@plt+0x2c44>
   13d48:	cmp	r3, r7
   13d4c:	cmpeq	r2, r6
   13d50:	movhi	r8, #1
   13d54:	movls	r8, #0
   13d58:	subs	r4, r4, r0
   13d5c:	sbc	r5, r5, r1
   13d60:	subs	r4, r4, r8
   13d64:	sbc	r5, r5, ip
   13d68:	subs	r6, r6, r2
   13d6c:	sbc	r7, r7, r3
   13d70:	subs	lr, lr, #1
   13d74:	bne	13cfc <__assert_fail@plt+0x2bd0>
   13d78:	ldrd	r4, [sp, #64]	; 0x40
   13d7c:	strd	r6, [sp, #24]
   13d80:	str	lr, [sp, #72]	; 0x48
   13d84:	subs	r2, r4, r6
   13d88:	sbc	r3, r5, r7
   13d8c:	cmp	r3, r7
   13d90:	cmpeq	r2, r6
   13d94:	movhi	sl, #1
   13d98:	movls	sl, #0
   13d9c:	rsbs	sl, sl, #0
   13da0:	mov	r0, r4
   13da4:	sbc	fp, fp, fp
   13da8:	mov	r1, r5
   13dac:	adds	r2, r6, r6
   13db0:	and	r0, r0, sl
   13db4:	adc	r3, r7, r7
   13db8:	and	r1, r1, fp
   13dbc:	mov	sl, r0
   13dc0:	mov	r0, r4
   13dc4:	subs	r4, r2, r4
   13dc8:	mov	fp, r1
   13dcc:	mov	r1, r5
   13dd0:	sbc	r5, r3, r5
   13dd4:	ldr	r3, [sp, #132]	; 0x84
   13dd8:	adds	sl, sl, r4
   13ddc:	str	r3, [sp, #16]
   13de0:	ldrd	r2, [sp, #120]	; 0x78
   13de4:	adc	fp, fp, r5
   13de8:	strd	r2, [sp, #8]
   13dec:	strd	sl, [sp]
   13df0:	ldrd	r2, [sp, #40]	; 0x28
   13df4:	bl	13944 <__assert_fail@plt+0x2818>
   13df8:	subs	r3, r0, #0
   13dfc:	str	r3, [sp, #148]	; 0x94
   13e00:	beq	140e0 <__assert_fail@plt+0x2fb4>
   13e04:	ldr	r2, [pc, #788]	; 14120 <__assert_fail@plt+0x2ff4>
   13e08:	add	r3, sp, #152	; 0x98
   13e0c:	str	r2, [sp, #128]	; 0x80
   13e10:	str	r3, [sp]
   13e14:	mov	r0, #0
   13e18:	ldrd	r2, [sp, #56]	; 0x38
   13e1c:	mov	r1, #0
   13e20:	bl	15d50 <__assert_fail@plt+0x4c24>
   13e24:	ldrb	r3, [sp, #402]	; 0x192
   13e28:	mov	r2, #2
   13e2c:	str	r7, [sp, #144]	; 0x90
   13e30:	str	r3, [sp, #48]	; 0x30
   13e34:	mov	r3, #0
   13e38:	strd	r2, [sp, #112]	; 0x70
   13e3c:	mov	r2, r6
   13e40:	mov	r3, #0
   13e44:	strd	r2, [sp, #136]	; 0x88
   13e48:	ldr	r3, [sp, #48]	; 0x30
   13e4c:	cmp	r3, #0
   13e50:	beq	140e8 <__assert_fail@plt+0x2fbc>
   13e54:	add	r5, sp, #160	; 0xa0
   13e58:	ldr	r4, [sp, #72]	; 0x48
   13e5c:	ldrd	r8, [sp, #64]	; 0x40
   13e60:	b	13e70 <__assert_fail@plt+0x2d44>
   13e64:	cmp	r1, r7
   13e68:	cmpeq	r0, r6
   13e6c:	beq	13ebc <__assert_fail@plt+0x2d90>
   13e70:	ldrd	r2, [r5, #8]!
   13e74:	ldrd	r0, [sp, #56]	; 0x38
   13e78:	bl	2656c <__assert_fail@plt+0x15440>
   13e7c:	ldrd	r2, [sp, #40]	; 0x28
   13e80:	strd	r6, [sp, #16]
   13e84:	strd	r8, [sp]
   13e88:	strd	r2, [sp, #8]
   13e8c:	add	r4, r4, #1
   13e90:	mov	r3, r1
   13e94:	mov	r2, r0
   13e98:	mov	r1, fp
   13e9c:	mov	r0, sl
   13ea0:	bl	135bc <__assert_fail@plt+0x2490>
   13ea4:	ldr	r3, [sp, #48]	; 0x30
   13ea8:	cmp	r4, r3
   13eac:	bne	13e64 <__assert_fail@plt+0x2d38>
   13eb0:	cmp	r1, r7
   13eb4:	cmpeq	r0, r6
   13eb8:	bne	140e8 <__assert_fail@plt+0x2fbc>
   13ebc:	ldr	r1, [sp, #128]	; 0x80
   13ec0:	ldrd	r4, [sp, #136]	; 0x88
   13ec4:	mov	r3, #0
   13ec8:	ldrb	r2, [r1, #1]!
   13ecc:	ldr	r8, [sp, #144]	; 0x90
   13ed0:	ldr	r9, [sp, #72]	; 0x48
   13ed4:	str	r1, [sp, #128]	; 0x80
   13ed8:	ldrd	r0, [sp, #112]	; 0x70
   13edc:	adds	r0, r0, r2
   13ee0:	adc	r1, r1, r3
   13ee4:	umull	r2, r3, r4, r0
   13ee8:	mov	fp, r1
   13eec:	mov	r1, #0
   13ef0:	strd	r2, [sp, #80]	; 0x50
   13ef4:	mul	ip, r4, r1
   13ef8:	umull	r2, r3, fp, r4
   13efc:	mla	ip, r0, r5, ip
   13f00:	mov	r4, r5
   13f04:	mul	lr, r8, r1
   13f08:	mla	r3, fp, r4, r3
   13f0c:	ldr	r4, [sp, #84]	; 0x54
   13f10:	mla	lr, r9, r0, lr
   13f14:	add	ip, ip, r4
   13f18:	mov	sl, r0
   13f1c:	str	ip, [sp, #88]	; 0x58
   13f20:	umull	r0, r1, r8, r0
   13f24:	umull	r4, r5, r8, fp
   13f28:	strd	sl, [sp, #112]	; 0x70
   13f2c:	mov	ip, #0
   13f30:	str	ip, [sp, #92]	; 0x5c
   13f34:	ldrd	r8, [sp, #88]	; 0x58
   13f38:	adds	r2, r2, r0
   13f3c:	add	r1, lr, r1
   13f40:	adc	r3, r3, r1
   13f44:	adds	r8, r8, r2
   13f48:	adc	r9, r9, r3
   13f4c:	cmp	r1, r9
   13f50:	mov	r3, r9
   13f54:	ldr	r9, [sp, #72]	; 0x48
   13f58:	cmpeq	r0, r8
   13f5c:	mov	r2, r8
   13f60:	mla	r5, r9, fp, r5
   13f64:	bls	13f70 <__assert_fail@plt+0x2e44>
   13f68:	adds	r4, r4, #0
   13f6c:	adc	r5, r5, #1
   13f70:	mov	r1, #0
   13f74:	str	r3, [sp, #96]	; 0x60
   13f78:	str	r1, [sp, #100]	; 0x64
   13f7c:	ldrd	r0, [sp, #96]	; 0x60
   13f80:	str	r2, [sp, #108]	; 0x6c
   13f84:	str	r1, [sp, #104]	; 0x68
   13f88:	adds	r2, r0, r4
   13f8c:	adc	r3, r1, r5
   13f90:	ldrd	sl, [sp, #104]	; 0x68
   13f94:	mov	r5, r3
   13f98:	ldr	r3, [sp, #80]	; 0x50
   13f9c:	mov	r4, r2
   13fa0:	adds	sl, sl, r3
   13fa4:	adc	fp, fp, #0
   13fa8:	orrs	r3, r4, r5
   13fac:	bne	14028 <__assert_fail@plt+0x2efc>
   13fb0:	mov	r0, sl
   13fb4:	mov	r1, fp
   13fb8:	ldrd	r2, [sp, #64]	; 0x40
   13fbc:	bl	2656c <__assert_fail@plt+0x15440>
   13fc0:	mov	sl, r2
   13fc4:	mov	fp, r3
   13fc8:	ldr	r3, [sp, #132]	; 0x84
   13fcc:	strd	r6, [sp, #24]
   13fd0:	str	r3, [sp, #16]
   13fd4:	ldrd	r2, [sp, #120]	; 0x78
   13fd8:	strd	sl, [sp]
   13fdc:	ldrd	r0, [sp, #64]	; 0x40
   13fe0:	strd	r2, [sp, #8]
   13fe4:	ldrd	r2, [sp, #40]	; 0x28
   13fe8:	bl	13944 <__assert_fail@plt+0x2818>
   13fec:	cmp	r0, #0
   13ff0:	beq	140e0 <__assert_fail@plt+0x2fb4>
   13ff4:	ldr	r3, [pc, #296]	; 14124 <__assert_fail@plt+0x2ff8>
   13ff8:	ldr	r2, [sp, #128]	; 0x80
   13ffc:	cmp	r3, r2
   14000:	bne	13e48 <__assert_fail@plt+0x2d1c>
   14004:	mov	r2, #5
   14008:	ldr	r1, [pc, #280]	; 14128 <__assert_fail@plt+0x2ffc>
   1400c:	mov	r0, #0
   14010:	bl	10f04 <dcgettext@plt>
   14014:	mov	r1, #0
   14018:	mov	r2, r0
   1401c:	mov	r0, r1
   14020:	bl	10f94 <error@plt>
   14024:	bl	11120 <abort@plt>
   14028:	ldrd	r2, [sp, #64]	; 0x40
   1402c:	cmp	r3, r5
   14030:	cmpeq	r2, r4
   14034:	bls	14108 <__assert_fail@plt+0x2fdc>
   14038:	mov	r2, #0
   1403c:	ldrd	r8, [sp, #64]	; 0x40
   14040:	mov	r3, r2
   14044:	mov	ip, #64	; 0x40
   14048:	lsl	r1, r8, #31
   1404c:	str	r1, [sp, #36]	; 0x24
   14050:	mov	r1, #0
   14054:	str	r1, [sp, #32]
   14058:	ldrd	r0, [sp, #32]
   1405c:	lsrs	r9, r9, #1
   14060:	rrx	r8, r8
   14064:	lsrs	r3, r3, #1
   14068:	rrx	r2, r2
   1406c:	cmp	r9, r5
   14070:	orr	r0, r0, r2
   14074:	orr	r1, r1, r3
   14078:	cmpeq	r8, r4
   1407c:	mov	r2, r0
   14080:	mov	r3, r1
   14084:	bcc	140a8 <__assert_fail@plt+0x2f7c>
   14088:	moveq	r1, #1
   1408c:	movne	r1, #0
   14090:	cmp	r3, fp
   14094:	cmpeq	r0, sl
   14098:	movhi	r1, #0
   1409c:	andls	r1, r1, #1
   140a0:	cmp	r1, #0
   140a4:	beq	140d4 <__assert_fail@plt+0x2fa8>
   140a8:	cmp	r3, fp
   140ac:	cmpeq	r2, sl
   140b0:	movhi	r0, #1
   140b4:	movls	r0, #0
   140b8:	subs	r4, r4, r8
   140bc:	sbc	r5, r5, r9
   140c0:	mov	r1, #0
   140c4:	subs	r4, r4, r0
   140c8:	sbc	r5, r5, r1
   140cc:	subs	sl, sl, r2
   140d0:	sbc	fp, fp, r3
   140d4:	subs	ip, ip, #1
   140d8:	bne	14048 <__assert_fail@plt+0x2f1c>
   140dc:	b	13fc8 <__assert_fail@plt+0x2e9c>
   140e0:	mov	r3, #0
   140e4:	str	r3, [sp, #148]	; 0x94
   140e8:	ldr	r0, [sp, #148]	; 0x94
   140ec:	add	sp, sp, #412	; 0x19c
   140f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f4:	ldrd	r2, [sp, #56]	; 0x38
   140f8:	strd	r2, [sp, #120]	; 0x78
   140fc:	mov	r3, #0
   14100:	str	r3, [sp, #132]	; 0x84
   14104:	b	13c08 <__assert_fail@plt+0x2adc>
   14108:	ldr	r3, [pc, #28]	; 1412c <__assert_fail@plt+0x3000>
   1410c:	ldr	r2, [pc, #28]	; 14130 <__assert_fail@plt+0x3004>
   14110:	ldr	r1, [pc, #28]	; 14134 <__assert_fail@plt+0x3008>
   14114:	ldr	r0, [pc, #28]	; 14138 <__assert_fail@plt+0x300c>
   14118:	bl	1112c <__assert_fail@plt>
   1411c:	andeq	r6, r2, r0, ror r7
   14120:	muleq	r2, r7, r7
   14124:	andeq	r6, r2, r3, lsr sl
   14128:	andeq	r9, r2, r0, lsl #18
   1412c:			; <UNDEFINED> instruction: 0x00026abc
   14130:	andeq	r0, r0, lr, ror #9
   14134:	andeq	r9, r2, ip, lsr r8
   14138:	andeq	r9, r2, r8, ror r9
   1413c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14140:	cmp	r1, #0
   14144:	sub	sp, sp, #332	; 0x14c
   14148:	cmpeq	r0, #1
   1414c:	strd	r0, [sp, #40]	; 0x28
   14150:	str	r2, [sp, #308]	; 0x134
   14154:	str	r3, [sp, #312]	; 0x138
   14158:	bls	14e40 <__assert_fail@plt+0x3d14>
   1415c:	mov	r2, #0
   14160:	mov	r3, #0
   14164:	ldrd	r6, [sp, #40]	; 0x28
   14168:	mov	r0, #1
   1416c:	mov	r1, #0
   14170:	mov	r4, r2
   14174:	mov	r5, r3
   14178:	mov	ip, #64	; 0x40
   1417c:	mov	sl, r2
   14180:	mov	fp, r3
   14184:	strd	r8, [sp, #48]	; 0x30
   14188:	lsl	r3, r6, #31
   1418c:	lsrs	r7, r7, #1
   14190:	rrx	r6, r6
   14194:	lsrs	r5, r5, #1
   14198:	rrx	r4, r4
   1419c:	cmp	r7, r1
   141a0:	mov	r2, #0
   141a4:	cmpeq	r6, r0
   141a8:	orr	r4, r4, r2
   141ac:	orr	r5, r5, r3
   141b0:	bcc	141d4 <__assert_fail@plt+0x30a8>
   141b4:	moveq	lr, #1
   141b8:	movne	lr, r2
   141bc:	cmp	r5, fp
   141c0:	cmpeq	r4, sl
   141c4:	movhi	lr, #0
   141c8:	andls	lr, lr, #1
   141cc:	cmp	lr, r2
   141d0:	beq	1420c <__assert_fail@plt+0x30e0>
   141d4:	cmp	r5, fp
   141d8:	cmpeq	r4, sl
   141dc:	movhi	lr, #1
   141e0:	movls	lr, #0
   141e4:	mov	r8, lr
   141e8:	subs	r0, r0, r6
   141ec:	sbc	r1, r1, r7
   141f0:	mov	lr, #0
   141f4:	subs	r8, r0, r8
   141f8:	sbc	r9, r1, lr
   141fc:	subs	sl, sl, r4
   14200:	mov	r0, r8
   14204:	mov	r1, r9
   14208:	sbc	fp, fp, r5
   1420c:	subs	ip, ip, #1
   14210:	bne	14188 <__assert_fail@plt+0x305c>
   14214:	ldrd	r4, [sp, #40]	; 0x28
   14218:	add	ip, sp, #320	; 0x140
   1421c:	mov	r0, sl
   14220:	strd	r2, [ip]
   14224:	subs	r2, r4, sl
   14228:	sbc	r3, r5, fp
   1422c:	cmp	fp, r3
   14230:	cmpeq	sl, r2
   14234:	movcc	r2, #1
   14238:	movcs	r2, #0
   1423c:	rsbs	r2, r2, #0
   14240:	mov	r1, fp
   14244:	sbc	r3, r3, r3
   14248:	adds	r6, sl, sl
   1424c:	adc	r7, fp, fp
   14250:	strd	r0, [sp, #120]	; 0x78
   14254:	mov	r0, r6
   14258:	mov	r6, r4
   1425c:	and	r4, r4, r2
   14260:	mov	r1, r7
   14264:	mov	r2, r4
   14268:	mov	r7, r5
   1426c:	subs	r4, r0, r6
   14270:	and	r5, r5, r3
   14274:	mov	r3, r5
   14278:	sbc	r5, r1, r7
   1427c:	ldr	r1, [sp, #308]	; 0x134
   14280:	adds	r4, r2, r4
   14284:	adc	r5, r3, r5
   14288:	mov	r2, r1
   1428c:	mov	r3, #0
   14290:	add	r0, sp, #296	; 0x128
   14294:	mov	sl, r4
   14298:	strd	r2, [r0]
   1429c:	mov	fp, r5
   142a0:	mov	r3, #1
   142a4:	ldrd	r8, [sp, #48]	; 0x30
   142a8:	str	r3, [sp, #116]	; 0x74
   142ac:	str	r3, [sp, #48]	; 0x30
   142b0:	add	r3, r1, #1
   142b4:	strd	r4, [sp, #128]	; 0x80
   142b8:	strd	r4, [sp, #224]	; 0xe0
   142bc:	str	r3, [sp, #316]	; 0x13c
   142c0:	add	r1, sp, #296	; 0x128
   142c4:	ldrd	r2, [sp, #40]	; 0x28
   142c8:	ldrd	r0, [r1]
   142cc:	cmp	r3, r1
   142d0:	cmpeq	r2, r0
   142d4:	bls	14eb4 <__assert_fail@plt+0x3d88>
   142d8:	ldrd	r6, [sp, #40]	; 0x28
   142dc:	add	r1, sp, #288	; 0x120
   142e0:	ldr	ip, [pc, #3064]	; 14ee0 <__assert_fail@plt+0x3db4>
   142e4:	mov	r2, r6
   142e8:	mov	r3, r7
   142ec:	lsrs	r3, r3, #1
   142f0:	rrx	r2, r2
   142f4:	strd	sl, [sp, #240]	; 0xf0
   142f8:	strd	r2, [r1]
   142fc:	add	r3, sp, #296	; 0x128
   14300:	and	r2, r2, #127	; 0x7f
   14304:	ldrd	r4, [r3]
   14308:	add	r2, ip, r2
   1430c:	ldr	ip, [sp, #40]	; 0x28
   14310:	subs	r0, r6, r4
   14314:	sbc	r1, r7, r5
   14318:	ldrb	r2, [r2, #716]	; 0x2cc
   1431c:	strd	r0, [sp, #96]	; 0x60
   14320:	mov	r0, r6
   14324:	mov	r1, r7
   14328:	ldrd	r6, [r3]
   1432c:	mov	lr, r1
   14330:	strd	r8, [sp, #216]	; 0xd8
   14334:	subs	r4, r6, r0
   14338:	mov	r6, r2
   1433c:	umull	r2, r3, r2, r2
   14340:	sbc	r5, r7, r1
   14344:	mul	r1, r2, r1
   14348:	strd	r4, [sp, #104]	; 0x68
   1434c:	umull	r4, r5, r2, r0
   14350:	mla	r1, ip, r3, r1
   14354:	adds	r6, r6, r6
   14358:	mov	r7, #0
   1435c:	adc	r7, r7, r7
   14360:	add	r5, r1, r5
   14364:	subs	r2, r6, r4
   14368:	sbc	r3, r7, r5
   1436c:	adds	r6, r2, r2
   14370:	adc	r7, r3, r3
   14374:	mul	r1, r2, r3
   14378:	umull	r2, r3, r2, r2
   1437c:	ldrd	r4, [sp, #40]	; 0x28
   14380:	add	r3, r3, r1, lsl #1
   14384:	ldr	ip, [sp, #40]	; 0x28
   14388:	mul	r1, r2, r5
   1438c:	umull	r4, r5, r2, r4
   14390:	mla	r1, ip, r3, r1
   14394:	subs	r2, r6, r4
   14398:	add	r5, r1, r5
   1439c:	sbc	r3, r7, r5
   143a0:	adds	r6, r2, r2
   143a4:	adc	r7, r3, r3
   143a8:	mul	r1, r2, r3
   143ac:	umull	r2, r3, r2, r2
   143b0:	ldrd	r4, [sp, #40]	; 0x28
   143b4:	add	r3, r3, r1, lsl #1
   143b8:	ldr	ip, [sp, #40]	; 0x28
   143bc:	mul	r1, r2, r5
   143c0:	umull	r4, r5, r2, r4
   143c4:	mla	r3, ip, r3, r1
   143c8:	ldrd	r0, [sp, #40]	; 0x28
   143cc:	mov	r1, #0
   143d0:	add	r5, r3, r5
   143d4:	strd	r0, [sp, #88]	; 0x58
   143d8:	ldrd	r0, [sp, #40]	; 0x28
   143dc:	subs	r6, r6, r4
   143e0:	sbc	r7, r7, r5
   143e4:	and	r0, r0, #1
   143e8:	mov	r1, #0
   143ec:	add	r3, sp, #280	; 0x118
   143f0:	strd	r6, [sp, #80]	; 0x50
   143f4:	strd	r0, [r3]
   143f8:	ldrd	r6, [sp, #128]	; 0x80
   143fc:	mov	r3, #0
   14400:	umull	r4, r5, r7, r6
   14404:	mul	ip, r6, r3
   14408:	umull	r0, r1, r6, r6
   1440c:	mla	r5, r7, r3, r5
   14410:	add	ip, r1, ip, lsl #1
   14414:	mov	r3, #0
   14418:	str	r3, [sp, #140]	; 0x8c
   1441c:	str	ip, [sp, #136]	; 0x88
   14420:	ldrd	r8, [sp, #136]	; 0x88
   14424:	adds	r2, r4, r4
   14428:	adc	r3, r5, r5
   1442c:	adds	r8, r8, r2
   14430:	adc	r9, r9, r3
   14434:	cmp	r5, r9
   14438:	cmpeq	r4, r8
   1443c:	mov	r2, r8
   14440:	mov	r3, r9
   14444:	umull	r6, r7, r7, r7
   14448:	bls	14454 <__assert_fail@plt+0x3328>
   1444c:	adds	r6, r6, #0
   14450:	adc	r7, r7, #1
   14454:	mov	ip, #0
   14458:	str	r3, [sp, #144]	; 0x90
   1445c:	str	ip, [sp, #148]	; 0x94
   14460:	ldrd	sl, [sp, #144]	; 0x90
   14464:	str	r2, [sp, #156]	; 0x9c
   14468:	ldrd	r8, [sp, #88]	; 0x58
   1446c:	str	fp, [sp, #152]	; 0x98
   14470:	ldrd	r4, [sp, #152]	; 0x98
   14474:	str	fp, [sp, #164]	; 0xa4
   14478:	adds	r4, r4, r0
   1447c:	adc	r5, r5, #0
   14480:	adds	r2, sl, r6
   14484:	adc	r3, fp, r7
   14488:	ldrd	r6, [sp, #80]	; 0x50
   1448c:	strd	r2, [sp, #56]	; 0x38
   14490:	mov	r3, #0
   14494:	mul	r2, r4, r7
   14498:	umull	r0, r1, r4, r6
   1449c:	mla	r2, r6, r5, r2
   144a0:	add	ip, r2, r1
   144a4:	mov	r2, r0
   144a8:	umull	r6, r7, ip, r8
   144ac:	mul	r1, r2, r9
   144b0:	umull	r4, r5, r2, r8
   144b4:	mla	r4, r8, r3, r1
   144b8:	umull	r0, r1, r2, lr
   144bc:	mla	r7, ip, r9, r7
   144c0:	mla	r1, lr, r3, r1
   144c4:	add	r3, r4, r5
   144c8:	str	r3, [sp, #160]	; 0xa0
   144cc:	ldrd	r2, [sp, #160]	; 0xa0
   144d0:	adds	r0, r0, r6
   144d4:	adc	r1, r1, r7
   144d8:	adds	r2, r2, r0
   144dc:	adc	r3, r3, r1
   144e0:	cmp	r7, r3
   144e4:	cmpeq	r6, r2
   144e8:	mov	r1, r3
   144ec:	umull	r2, r3, ip, lr
   144f0:	bls	144fc <__assert_fail@plt+0x33d0>
   144f4:	adds	r2, r2, #0
   144f8:	adc	r3, r3, #1
   144fc:	str	r1, [sp, #168]	; 0xa8
   14500:	mov	r1, #0
   14504:	str	r1, [sp, #172]	; 0xac
   14508:	ldrd	r0, [sp, #168]	; 0xa8
   1450c:	ldrd	r4, [sp, #56]	; 0x38
   14510:	adds	r0, r0, r2
   14514:	adc	r1, r1, r3
   14518:	mov	r2, r0
   1451c:	mov	r3, r1
   14520:	subs	r0, r4, r2
   14524:	sbc	r1, r5, r3
   14528:	cmp	r5, r3
   1452c:	cmpeq	r4, r2
   14530:	bcs	14548 <__assert_fail@plt+0x341c>
   14534:	ldrd	r2, [sp, #40]	; 0x28
   14538:	adds	r2, r2, r0
   1453c:	adc	r3, r3, r1
   14540:	mov	r0, r2
   14544:	mov	r1, r3
   14548:	ldrd	r2, [sp, #96]	; 0x60
   1454c:	ldrd	r4, [sp, #104]	; 0x68
   14550:	ldrd	r6, [sp, #40]	; 0x28
   14554:	cmp	r1, r3
   14558:	cmpeq	r0, r2
   1455c:	movcc	r2, #1
   14560:	movcs	r2, #0
   14564:	rsbs	r2, r2, #0
   14568:	sbc	r3, r3, r3
   1456c:	adds	r4, r4, r0
   14570:	adc	r5, r5, r1
   14574:	mov	r0, r4
   14578:	mov	r4, r6
   1457c:	ldrd	r8, [sp, #224]	; 0xe0
   14580:	mov	r1, r5
   14584:	and	r4, r4, r2
   14588:	mov	r5, r7
   1458c:	adds	r4, r4, r0
   14590:	and	r5, r5, r3
   14594:	adc	r5, r5, r1
   14598:	cmp	r9, r5
   1459c:	cmpeq	r8, r4
   145a0:	mov	r2, r8
   145a4:	movcc	r2, #1
   145a8:	movcs	r2, #0
   145ac:	mov	r0, r4
   145b0:	mov	r1, r5
   145b4:	rsbs	r2, r2, #0
   145b8:	mov	r4, r6
   145bc:	sbc	r3, r9, r9
   145c0:	and	r4, r4, r2
   145c4:	subs	r6, r8, r0
   145c8:	mov	r5, r7
   145cc:	mov	r2, r4
   145d0:	sbc	r7, r9, r1
   145d4:	strd	r0, [sp, #128]	; 0x80
   145d8:	ldrd	r0, [sp, #120]	; 0x78
   145dc:	adds	r2, r2, r6
   145e0:	and	r5, r5, r3
   145e4:	umull	r8, r9, r1, r2
   145e8:	ldr	ip, [sp, #124]	; 0x7c
   145ec:	mov	r3, r5
   145f0:	adc	r3, r3, r7
   145f4:	mov	r6, r2
   145f8:	mov	r7, #0
   145fc:	umull	sl, fp, r0, r6
   14600:	mul	r2, r0, r7
   14604:	mla	ip, ip, r7, r9
   14608:	umull	r0, r1, r3, r0
   1460c:	strd	r8, [sp, #56]	; 0x38
   14610:	mov	r5, #0
   14614:	str	ip, [sp, #60]	; 0x3c
   14618:	mla	r1, r3, r5, r1
   1461c:	mla	r2, r6, r5, r2
   14620:	ldrd	r4, [sp, #56]	; 0x38
   14624:	add	r2, r2, fp
   14628:	mov	ip, #0
   1462c:	adds	r6, r4, r0
   14630:	adc	r7, r5, r1
   14634:	str	r2, [sp, #176]	; 0xb0
   14638:	str	ip, [sp, #180]	; 0xb4
   1463c:	mov	r0, r6
   14640:	mov	r1, r7
   14644:	ldrd	r6, [sp, #176]	; 0xb0
   14648:	ldr	ip, [sp, #124]	; 0x7c
   1464c:	adds	r6, r6, r0
   14650:	adc	r7, r7, r1
   14654:	mov	r1, r7
   14658:	mov	r0, r6
   1465c:	cmp	r5, r1
   14660:	cmpeq	r4, r0
   14664:	umull	r2, r3, ip, r3
   14668:	bls	14674 <__assert_fail@plt+0x3548>
   1466c:	adds	r2, r2, #0
   14670:	adc	r3, r3, #1
   14674:	mov	ip, #0
   14678:	str	r1, [sp, #184]	; 0xb8
   1467c:	str	ip, [sp, #188]	; 0xbc
   14680:	ldrd	r4, [sp, #184]	; 0xb8
   14684:	str	r0, [sp, #196]	; 0xc4
   14688:	ldrd	r6, [sp, #80]	; 0x50
   1468c:	str	r5, [sp, #192]	; 0xc0
   14690:	ldrd	r0, [sp, #192]	; 0xc0
   14694:	mov	fp, r5
   14698:	ldrd	r8, [sp, #88]	; 0x58
   1469c:	adds	r0, r0, sl
   146a0:	adc	r1, r1, #0
   146a4:	adds	r4, r4, r2
   146a8:	adc	r5, r5, r3
   146ac:	mul	r2, r0, r7
   146b0:	strd	r4, [sp, #56]	; 0x38
   146b4:	umull	r4, r5, r0, r6
   146b8:	mla	r2, r6, r1, r2
   146bc:	mul	r1, r4, r9
   146c0:	add	ip, r2, r5
   146c4:	mov	r3, #0
   146c8:	mov	r2, r4
   146cc:	umull	r6, r7, ip, r8
   146d0:	umull	r4, r5, r2, r8
   146d4:	mla	r4, r8, r3, r1
   146d8:	umull	r0, r1, r2, lr
   146dc:	str	fp, [sp, #204]	; 0xcc
   146e0:	mla	r1, lr, r3, r1
   146e4:	add	r3, r4, r5
   146e8:	str	r3, [sp, #200]	; 0xc8
   146ec:	mla	r7, ip, r9, r7
   146f0:	ldrd	r2, [sp, #200]	; 0xc8
   146f4:	adds	r0, r0, r6
   146f8:	adc	r1, r1, r7
   146fc:	adds	r2, r2, r0
   14700:	adc	r3, r3, r1
   14704:	cmp	r7, r3
   14708:	cmpeq	r6, r2
   1470c:	mov	r1, r3
   14710:	umull	r2, r3, ip, lr
   14714:	bls	14720 <__assert_fail@plt+0x35f4>
   14718:	adds	r2, r2, #0
   1471c:	adc	r3, r3, #1
   14720:	str	r1, [sp, #208]	; 0xd0
   14724:	mov	r1, #0
   14728:	str	r1, [sp, #212]	; 0xd4
   1472c:	ldrd	r0, [sp, #208]	; 0xd0
   14730:	ldrd	r4, [sp, #56]	; 0x38
   14734:	adds	r0, r0, r2
   14738:	adc	r1, r1, r3
   1473c:	mov	r2, r0
   14740:	subs	r0, r4, r2
   14744:	mov	r3, r1
   14748:	sbc	r1, r5, r3
   1474c:	cmp	r5, r3
   14750:	cmpeq	r4, r2
   14754:	strd	r0, [sp, #120]	; 0x78
   14758:	bcs	1476c <__assert_fail@plt+0x3640>
   1475c:	ldrd	r2, [sp, #40]	; 0x28
   14760:	adds	r2, r2, r0
   14764:	adc	r3, r3, r1
   14768:	strd	r2, [sp, #120]	; 0x78
   1476c:	ldr	r3, [sp, #48]	; 0x30
   14770:	and	r3, r3, #31
   14774:	cmp	r3, #1
   14778:	beq	14978 <__assert_fail@plt+0x384c>
   1477c:	ldr	r3, [sp, #48]	; 0x30
   14780:	subs	ip, r3, #1
   14784:	str	ip, [sp, #48]	; 0x30
   14788:	bne	143f8 <__assert_fail@plt+0x32cc>
   1478c:	ldr	r3, [sp, #116]	; 0x74
   14790:	cmp	r3, #0
   14794:	lsl	r3, r3, #1
   14798:	str	r3, [sp, #304]	; 0x130
   1479c:	beq	14a68 <__assert_fail@plt+0x393c>
   147a0:	ldrd	r2, [sp, #128]	; 0x80
   147a4:	mov	sl, r2
   147a8:	mov	fp, r3
   147ac:	mov	r3, #0
   147b0:	umull	r0, r1, fp, sl
   147b4:	mul	r6, sl, r3
   147b8:	umull	r4, r5, sl, sl
   147bc:	mla	r1, fp, r3, r1
   147c0:	add	r6, r5, r6, lsl #1
   147c4:	mov	r3, #0
   147c8:	str	r3, [sp, #12]
   147cc:	str	r6, [sp, #8]
   147d0:	ldrd	r6, [sp, #8]
   147d4:	adds	r2, r0, r0
   147d8:	adc	r3, r1, r1
   147dc:	adds	r6, r6, r2
   147e0:	adc	r7, r7, r3
   147e4:	cmp	r1, r7
   147e8:	cmpeq	r0, r6
   147ec:	mov	r2, r6
   147f0:	mov	r3, r7
   147f4:	umull	sl, fp, fp, fp
   147f8:	bls	14804 <__assert_fail@plt+0x36d8>
   147fc:	adds	sl, sl, #0
   14800:	adc	fp, fp, #1
   14804:	mov	r9, #0
   14808:	str	r2, [sp, #20]
   1480c:	str	r9, [sp, #16]
   14810:	ldrd	r6, [sp, #16]
   14814:	mov	r8, r3
   14818:	str	r9, [sp, #28]
   1481c:	adds	r6, r6, r4
   14820:	adc	r7, r7, #0
   14824:	ldrd	r4, [sp, #80]	; 0x50
   14828:	adds	r2, sl, r3
   1482c:	adc	r3, fp, r9
   14830:	umull	r0, r1, r6, r4
   14834:	strd	r2, [sp, #48]	; 0x30
   14838:	mul	r2, r6, r5
   1483c:	mla	r2, r4, r7, r2
   14840:	ldrd	r4, [sp, #88]	; 0x58
   14844:	add	r2, r2, r1
   14848:	mov	r1, #0
   1484c:	umull	sl, fp, r0, r4
   14850:	mul	r3, r0, r5
   14854:	umull	r6, r7, r2, r4
   14858:	mla	r3, r4, r1, r3
   1485c:	strd	sl, [sp, #56]	; 0x38
   14860:	mov	fp, r5
   14864:	umull	r4, r5, r0, lr
   14868:	mla	r7, r2, fp, r7
   1486c:	mla	r5, lr, r1, r5
   14870:	ldr	r1, [sp, #60]	; 0x3c
   14874:	adds	r4, r4, r6
   14878:	add	r3, r3, r1
   1487c:	str	r3, [sp, #24]
   14880:	ldrd	r0, [sp, #24]
   14884:	adc	r5, r5, r7
   14888:	umull	r2, r3, r2, lr
   1488c:	adds	r0, r0, r4
   14890:	adc	r1, r1, r5
   14894:	cmp	r7, r1
   14898:	cmpeq	r6, r0
   1489c:	mov	r5, r1
   148a0:	bls	148ac <__assert_fail@plt+0x3780>
   148a4:	adds	r2, r2, #0
   148a8:	adc	r3, r3, #1
   148ac:	mov	r1, #0
   148b0:	str	r5, [sp, #32]
   148b4:	str	r1, [sp, #36]	; 0x24
   148b8:	ldrd	r0, [sp, #32]
   148bc:	ldrd	r4, [sp, #48]	; 0x30
   148c0:	adds	r0, r0, r2
   148c4:	adc	r1, r1, r3
   148c8:	mov	r2, r0
   148cc:	mov	r3, r1
   148d0:	subs	r0, r4, r2
   148d4:	sbc	r1, r5, r3
   148d8:	cmp	r5, r3
   148dc:	cmpeq	r4, r2
   148e0:	bcs	148f8 <__assert_fail@plt+0x37cc>
   148e4:	ldrd	r2, [sp, #40]	; 0x28
   148e8:	adds	r2, r2, r0
   148ec:	adc	r3, r3, r1
   148f0:	mov	r0, r2
   148f4:	mov	r1, r3
   148f8:	ldrd	r2, [sp, #96]	; 0x60
   148fc:	ldrd	r4, [sp, #104]	; 0x68
   14900:	add	ip, ip, #1
   14904:	cmp	r1, r3
   14908:	cmpeq	r0, r2
   1490c:	movcc	r2, #1
   14910:	movcs	r2, #0
   14914:	rsbs	r2, r2, #0
   14918:	sbc	r3, r3, r3
   1491c:	adds	r4, r4, r0
   14920:	adc	r5, r5, r1
   14924:	mov	r0, r4
   14928:	mov	r1, r5
   1492c:	ldrd	r4, [sp, #40]	; 0x28
   14930:	and	r5, r5, r3
   14934:	and	r4, r4, r2
   14938:	ldr	r3, [sp, #116]	; 0x74
   1493c:	adds	sl, r4, r0
   14940:	adc	fp, r5, r1
   14944:	cmp	r3, ip
   14948:	bne	147ac <__assert_fail@plt+0x3680>
   1494c:	ldrd	r2, [sp, #128]	; 0x80
   14950:	strd	sl, [sp, #240]	; 0xf0
   14954:	str	ip, [sp, #48]	; 0x30
   14958:	strd	r2, [sp, #224]	; 0xe0
   1495c:	ldr	r3, [sp, #304]	; 0x130
   14960:	mov	r2, sl
   14964:	str	r3, [sp, #116]	; 0x74
   14968:	mov	r3, fp
   1496c:	strd	r8, [sp, #216]	; 0xd8
   14970:	strd	r2, [sp, #128]	; 0x80
   14974:	b	143f8 <__assert_fail@plt+0x32cc>
   14978:	add	r3, sp, #280	; 0x118
   1497c:	ldrd	r2, [r3]
   14980:	orrs	r3, r2, r3
   14984:	bne	14a48 <__assert_fail@plt+0x391c>
   14988:	ldrd	r6, [sp, #120]	; 0x78
   1498c:	ldrd	r2, [sp, #40]	; 0x28
   14990:	ldrd	sl, [sp, #240]	; 0xf0
   14994:	ldrd	r8, [sp, #216]	; 0xd8
   14998:	lsrs	r7, r7, #1
   1499c:	rrx	r6, r6
   149a0:	and	r0, r2, #1
   149a4:	mov	r1, #0
   149a8:	orrs	r1, r0, r1
   149ac:	beq	14a1c <__assert_fail@plt+0x38f0>
   149b0:	lsrs	r5, r3, #1
   149b4:	rrx	r4, r2
   149b8:	subs	r4, r4, r6
   149bc:	sbc	r5, r5, r7
   149c0:	orrs	r1, r4, r5
   149c4:	beq	14a28 <__assert_fail@plt+0x38fc>
   149c8:	asr	r3, r5, #31
   149cc:	str	r3, [sp, #64]	; 0x40
   149d0:	str	r3, [sp, #68]	; 0x44
   149d4:	ldrd	r2, [sp, #64]	; 0x40
   149d8:	mov	r0, r2
   149dc:	mov	r1, r3
   149e0:	and	r0, r0, r4
   149e4:	adds	r6, r6, r0
   149e8:	and	r1, r1, r5
   149ec:	adc	r7, r7, r1
   149f0:	ldrd	r0, [sp, #64]	; 0x40
   149f4:	eor	r2, r2, r4
   149f8:	eor	r3, r3, r5
   149fc:	subs	r0, r2, r0
   14a00:	sbc	r1, r3, r1
   14a04:	mov	r2, r0
   14a08:	mov	r3, r1
   14a0c:	and	r0, r2, #1
   14a10:	mov	r1, #0
   14a14:	orrs	r1, r0, r1
   14a18:	bne	149b0 <__assert_fail@plt+0x3884>
   14a1c:	lsrs	r3, r3, #1
   14a20:	rrx	r2, r2
   14a24:	b	149a0 <__assert_fail@plt+0x3874>
   14a28:	bic	r2, r2, #1
   14a2c:	orrs	r3, r2, r3
   14a30:	strd	sl, [sp, #240]	; 0xf0
   14a34:	strd	r8, [sp, #216]	; 0xd8
   14a38:	bne	14a88 <__assert_fail@plt+0x395c>
   14a3c:	ldrd	r2, [sp, #128]	; 0x80
   14a40:	strd	r2, [sp, #240]	; 0xf0
   14a44:	b	1477c <__assert_fail@plt+0x3650>
   14a48:	ldrd	r2, [sp, #120]	; 0x78
   14a4c:	orrs	r1, r2, r3
   14a50:	beq	14a88 <__assert_fail@plt+0x395c>
   14a54:	add	r1, sp, #288	; 0x120
   14a58:	ldrd	sl, [sp, #240]	; 0xf0
   14a5c:	ldrd	r6, [r1]
   14a60:	ldrd	r8, [sp, #216]	; 0xd8
   14a64:	b	149a0 <__assert_fail@plt+0x3874>
   14a68:	ldr	r3, [sp, #116]	; 0x74
   14a6c:	ldr	r1, [sp, #304]	; 0x130
   14a70:	str	r3, [sp, #48]	; 0x30
   14a74:	ldrd	r2, [sp, #128]	; 0x80
   14a78:	str	r1, [sp, #116]	; 0x74
   14a7c:	strd	r2, [sp, #240]	; 0xf0
   14a80:	strd	r2, [sp, #224]	; 0xe0
   14a84:	b	143f8 <__assert_fail@plt+0x32cc>
   14a88:	ldrd	sl, [sp, #240]	; 0xf0
   14a8c:	mov	r3, #0
   14a90:	umull	r4, r5, fp, sl
   14a94:	mul	ip, sl, r3
   14a98:	umull	r0, r1, sl, sl
   14a9c:	mla	r5, fp, r3, r5
   14aa0:	add	r3, r1, ip, lsl #1
   14aa4:	str	r3, [sp, #248]	; 0xf8
   14aa8:	mov	r3, #0
   14aac:	str	r3, [sp, #252]	; 0xfc
   14ab0:	ldrd	r6, [sp, #248]	; 0xf8
   14ab4:	adds	r2, r4, r4
   14ab8:	adc	r3, r5, r5
   14abc:	adds	r6, r6, r2
   14ac0:	adc	r7, r7, r3
   14ac4:	cmp	r5, r7
   14ac8:	cmpeq	r4, r6
   14acc:	mov	r2, r6
   14ad0:	mov	r3, r7
   14ad4:	umull	sl, fp, fp, fp
   14ad8:	bls	14ae4 <__assert_fail@plt+0x39b8>
   14adc:	adds	sl, sl, #0
   14ae0:	adc	fp, fp, #1
   14ae4:	mov	ip, #0
   14ae8:	str	ip, [sp, #236]	; 0xec
   14aec:	str	r3, [sp, #232]	; 0xe8
   14af0:	str	r2, [sp, #260]	; 0x104
   14af4:	ldrd	r2, [sp, #232]	; 0xe8
   14af8:	add	ip, sp, #256	; 0x100
   14afc:	ldrd	r4, [sp, #80]	; 0x50
   14b00:	str	r3, [sp, #256]	; 0x100
   14b04:	ldrd	r6, [ip]
   14b08:	ldrd	r8, [sp, #88]	; 0x58
   14b0c:	adds	r6, r6, r0
   14b10:	adc	r7, r7, #0
   14b14:	adds	r2, r2, sl
   14b18:	mov	sl, r2
   14b1c:	mul	r2, r6, r5
   14b20:	umull	r0, r1, r6, r4
   14b24:	mla	r2, r4, r7, r2
   14b28:	adc	r3, r3, fp
   14b2c:	add	ip, r2, r1
   14b30:	mov	r2, r0
   14b34:	mov	fp, r3
   14b38:	mul	r1, r2, r9
   14b3c:	mov	r3, #0
   14b40:	umull	r4, r5, r2, r8
   14b44:	mla	r4, r8, r3, r1
   14b48:	umull	r0, r1, r2, lr
   14b4c:	umull	r6, r7, ip, r8
   14b50:	mla	r1, lr, r3, r1
   14b54:	add	r3, r4, r5
   14b58:	str	r3, [sp, #264]	; 0x108
   14b5c:	mov	r3, #0
   14b60:	str	r3, [sp, #268]	; 0x10c
   14b64:	add	r3, sp, #264	; 0x108
   14b68:	mla	r7, ip, r9, r7
   14b6c:	ldrd	r2, [r3]
   14b70:	adds	r0, r0, r6
   14b74:	adc	r1, r1, r7
   14b78:	adds	r2, r2, r0
   14b7c:	adc	r3, r3, r1
   14b80:	cmp	r7, r3
   14b84:	cmpeq	r6, r2
   14b88:	mov	r1, r3
   14b8c:	umull	r2, r3, ip, lr
   14b90:	bls	14b9c <__assert_fail@plt+0x3a70>
   14b94:	adds	r2, r2, #0
   14b98:	adc	r3, r3, #1
   14b9c:	str	r1, [sp, #272]	; 0x110
   14ba0:	mov	r1, #0
   14ba4:	str	r1, [sp, #276]	; 0x114
   14ba8:	add	r1, sp, #272	; 0x110
   14bac:	ldrd	r0, [r1]
   14bb0:	adds	r0, r0, r2
   14bb4:	adc	r1, r1, r3
   14bb8:	mov	r2, r0
   14bbc:	mov	r3, r1
   14bc0:	subs	r0, sl, r2
   14bc4:	sbc	r1, fp, r3
   14bc8:	cmp	fp, r3
   14bcc:	cmpeq	sl, r2
   14bd0:	bcs	14be8 <__assert_fail@plt+0x3abc>
   14bd4:	ldrd	r2, [sp, #40]	; 0x28
   14bd8:	adds	r2, r2, r0
   14bdc:	adc	r3, r3, r1
   14be0:	mov	r0, r2
   14be4:	mov	r1, r3
   14be8:	ldrd	r2, [sp, #96]	; 0x60
   14bec:	ldrd	r4, [sp, #104]	; 0x68
   14bf0:	ldrd	r6, [sp, #40]	; 0x28
   14bf4:	cmp	r1, r3
   14bf8:	cmpeq	r0, r2
   14bfc:	movcc	r2, #1
   14c00:	movcs	r2, #0
   14c04:	rsbs	r2, r2, #0
   14c08:	sbc	r3, r3, r3
   14c0c:	adds	r4, r4, r0
   14c10:	adc	r5, r5, r1
   14c14:	mov	r0, r4
   14c18:	mov	r4, r6
   14c1c:	and	r4, r4, r2
   14c20:	mov	r1, r5
   14c24:	mov	r5, r7
   14c28:	adds	sl, r4, r0
   14c2c:	and	r5, r5, r3
   14c30:	adc	fp, r5, r1
   14c34:	ldrd	r0, [sp, #224]	; 0xe0
   14c38:	mov	r2, r6
   14c3c:	mov	r3, r7
   14c40:	cmp	r1, fp
   14c44:	cmpeq	r0, sl
   14c48:	movcc	r4, #1
   14c4c:	movcs	r4, #0
   14c50:	rsbs	r4, r4, #0
   14c54:	sbc	r5, r5, r5
   14c58:	and	r2, r2, r4
   14c5c:	and	r3, r3, r5
   14c60:	mov	r4, r2
   14c64:	subs	r2, r0, sl
   14c68:	mov	r5, r3
   14c6c:	sbc	r3, r1, fp
   14c70:	adds	r4, r4, r2
   14c74:	adc	r5, r5, r3
   14c78:	add	r3, sp, #280	; 0x118
   14c7c:	ldrd	r2, [r3]
   14c80:	orrs	r3, r2, r3
   14c84:	bne	14e0c <__assert_fail@plt+0x3ce0>
   14c88:	ldrd	r8, [sp, #216]	; 0xd8
   14c8c:	lsrs	r3, r5, #1
   14c90:	rrx	r2, r4
   14c94:	mov	r4, r6
   14c98:	mov	r5, r7
   14c9c:	and	r0, r4, #1
   14ca0:	mov	r1, #0
   14ca4:	orrs	r1, r0, r1
   14ca8:	beq	14d18 <__assert_fail@plt+0x3bec>
   14cac:	lsrs	r7, r5, #1
   14cb0:	rrx	r6, r4
   14cb4:	subs	r6, r6, r2
   14cb8:	sbc	r7, r7, r3
   14cbc:	orrs	r1, r6, r7
   14cc0:	beq	14d24 <__assert_fail@plt+0x3bf8>
   14cc4:	asr	r1, r7, #31
   14cc8:	str	r1, [sp, #72]	; 0x48
   14ccc:	str	r1, [sp, #76]	; 0x4c
   14cd0:	ldrd	r4, [sp, #72]	; 0x48
   14cd4:	mov	r0, r4
   14cd8:	mov	r1, r5
   14cdc:	and	r0, r0, r6
   14ce0:	adds	r2, r2, r0
   14ce4:	and	r1, r1, r7
   14ce8:	adc	r3, r3, r1
   14cec:	ldrd	r0, [sp, #72]	; 0x48
   14cf0:	eor	r4, r4, r6
   14cf4:	eor	r5, r5, r7
   14cf8:	subs	r0, r4, r0
   14cfc:	sbc	r1, r5, r1
   14d00:	mov	r4, r0
   14d04:	mov	r5, r1
   14d08:	and	r0, r4, #1
   14d0c:	mov	r1, #0
   14d10:	orrs	r1, r0, r1
   14d14:	bne	14cac <__assert_fail@plt+0x3b80>
   14d18:	lsrs	r5, r5, #1
   14d1c:	rrx	r4, r4
   14d20:	b	14c9c <__assert_fail@plt+0x3b70>
   14d24:	orr	r4, r4, #1
   14d28:	cmp	r5, #0
   14d2c:	cmpeq	r4, #1
   14d30:	strd	r8, [sp, #216]	; 0xd8
   14d34:	beq	14a8c <__assert_fail@plt+0x3960>
   14d38:	ldrd	r2, [sp, #40]	; 0x28
   14d3c:	ldrd	r8, [sp, #216]	; 0xd8
   14d40:	cmp	r5, r3
   14d44:	cmpeq	r4, r2
   14d48:	beq	14ec8 <__assert_fail@plt+0x3d9c>
   14d4c:	ldrd	r0, [sp, #40]	; 0x28
   14d50:	mov	r2, r4
   14d54:	mov	r3, r5
   14d58:	bl	2656c <__assert_fail@plt+0x15440>
   14d5c:	add	r3, pc, #372	; 0x174
   14d60:	ldrd	r2, [r3]
   14d64:	cmp	r5, r3
   14d68:	cmpeq	r4, r2
   14d6c:	strd	r0, [sp, #40]	; 0x28
   14d70:	bhi	14e6c <__assert_fail@plt+0x3d40>
   14d74:	mov	r3, #1
   14d78:	str	r3, [sp]
   14d7c:	mov	r2, r4
   14d80:	mov	r3, r5
   14d84:	ldr	r0, [sp, #312]	; 0x138
   14d88:	bl	114e0 <__assert_fail@plt+0x3b4>
   14d8c:	ldrd	r2, [sp, #40]	; 0x28
   14d90:	cmp	r3, #0
   14d94:	cmpeq	r2, #1
   14d98:	bls	14e54 <__assert_fail@plt+0x3d28>
   14d9c:	add	r1, pc, #308	; 0x134
   14da0:	ldrd	r0, [r1]
   14da4:	cmp	r3, r1
   14da8:	cmpeq	r2, r0
   14dac:	bls	14e98 <__assert_fail@plt+0x3d6c>
   14db0:	ldrd	r0, [sp, #40]	; 0x28
   14db4:	bl	13ba0 <__assert_fail@plt+0x2a74>
   14db8:	cmp	r0, #0
   14dbc:	bne	14e98 <__assert_fail@plt+0x3d6c>
   14dc0:	ldrd	r4, [sp, #40]	; 0x28
   14dc4:	ldrd	r0, [sp, #128]	; 0x80
   14dc8:	mov	r2, r4
   14dcc:	mov	r3, r5
   14dd0:	bl	2656c <__assert_fail@plt+0x15440>
   14dd4:	ldrd	r0, [sp, #224]	; 0xe0
   14dd8:	strd	r2, [sp, #128]	; 0x80
   14ddc:	mov	r2, r4
   14de0:	mov	r3, r5
   14de4:	bl	2656c <__assert_fail@plt+0x15440>
   14de8:	mov	r0, sl
   14dec:	mov	r1, fp
   14df0:	strd	r2, [sp, #224]	; 0xe0
   14df4:	mov	r2, r4
   14df8:	mov	r3, r5
   14dfc:	bl	2656c <__assert_fail@plt+0x15440>
   14e00:	mov	sl, r2
   14e04:	mov	fp, r3
   14e08:	b	142c0 <__assert_fail@plt+0x3194>
   14e0c:	orrs	r3, r4, r5
   14e10:	addne	r3, sp, #288	; 0x120
   14e14:	ldrdne	r8, [sp, #216]	; 0xd8
   14e18:	ldrdne	r2, [r3]
   14e1c:	bne	14c9c <__assert_fail@plt+0x3b70>
   14e20:	ldrd	r2, [sp, #40]	; 0x28
   14e24:	ldrd	r8, [sp, #216]	; 0xd8
   14e28:	cmp	r3, #0
   14e2c:	ldr	r3, [sp, #308]	; 0x134
   14e30:	cmpeq	r2, #1
   14e34:	add	r3, r3, #1
   14e38:	str	r3, [sp, #308]	; 0x134
   14e3c:	bne	1415c <__assert_fail@plt+0x3030>
   14e40:	ldr	r3, [pc, #156]	; 14ee4 <__assert_fail@plt+0x3db8>
   14e44:	ldr	r2, [pc, #156]	; 14ee8 <__assert_fail@plt+0x3dbc>
   14e48:	ldr	r1, [pc, #156]	; 14eec <__assert_fail@plt+0x3dc0>
   14e4c:	ldr	r0, [pc, #156]	; 14ef0 <__assert_fail@plt+0x3dc4>
   14e50:	bl	1112c <__assert_fail@plt>
   14e54:	beq	14eac <__assert_fail@plt+0x3d80>
   14e58:	mov	sl, r6
   14e5c:	mov	fp, r7
   14e60:	strd	sl, [sp, #224]	; 0xe0
   14e64:	strd	sl, [sp, #128]	; 0x80
   14e68:	b	142c0 <__assert_fail@plt+0x3194>
   14e6c:	mov	r0, r4
   14e70:	mov	r1, r5
   14e74:	bl	13ba0 <__assert_fail@plt+0x2a74>
   14e78:	cmp	r0, #0
   14e7c:	bne	14d74 <__assert_fail@plt+0x3c48>
   14e80:	mov	r0, r4
   14e84:	mov	r1, r5
   14e88:	ldr	r3, [sp, #312]	; 0x138
   14e8c:	ldr	r2, [sp, #316]	; 0x13c
   14e90:	bl	1413c <__assert_fail@plt+0x3010>
   14e94:	b	14d8c <__assert_fail@plt+0x3c60>
   14e98:	mov	r1, #1
   14e9c:	ldrd	r2, [sp, #40]	; 0x28
   14ea0:	ldr	r0, [sp, #312]	; 0x138
   14ea4:	str	r1, [sp]
   14ea8:	bl	114e0 <__assert_fail@plt+0x3b4>
   14eac:	add	sp, sp, #332	; 0x14c
   14eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eb4:	ldr	r3, [pc, #40]	; 14ee4 <__assert_fail@plt+0x3db8>
   14eb8:	mov	r2, #1472	; 0x5c0
   14ebc:	ldr	r1, [pc, #40]	; 14eec <__assert_fail@plt+0x3dc0>
   14ec0:	ldr	r0, [pc, #44]	; 14ef4 <__assert_fail@plt+0x3dc8>
   14ec4:	bl	1112c <__assert_fail@plt>
   14ec8:	ldr	r3, [sp, #308]	; 0x134
   14ecc:	add	r3, r3, #1
   14ed0:	str	r3, [sp, #308]	; 0x134
   14ed4:	b	1415c <__assert_fail@plt+0x3030>
   14ed8:	cmneq	sp, r8, ror sp
   14edc:	andeq	r0, r0, r0
   14ee0:	andeq	r6, r2, r0, ror r7
   14ee4:	andeq	r6, r2, r4, asr #21
   14ee8:			; <UNDEFINED> instruction: 0x000005ba
   14eec:	andeq	r9, r2, ip, lsr r8
   14ef0:	andeq	r9, r2, r4, lsl #19
   14ef4:	muleq	r2, r0, r9
   14ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14efc:	subs	fp, r1, #0
   14f00:	sub	sp, sp, #204	; 0xcc
   14f04:	cmpeq	r0, #1
   14f08:	mov	sl, r0
   14f0c:	strd	r2, [sp, #48]	; 0x30
   14f10:	bls	15cac <__assert_fail@plt+0x4b80>
   14f14:	mov	r2, #0
   14f18:	mov	r3, #0
   14f1c:	mov	r6, #64	; 0x40
   14f20:	strd	r2, [sp, #104]	; 0x68
   14f24:	mov	r7, #0
   14f28:	mov	r2, #1
   14f2c:	mov	r3, #0
   14f30:	strd	r2, [sp, #96]	; 0x60
   14f34:	ldrd	r4, [sp, #104]	; 0x68
   14f38:	ldrd	r8, [sp, #48]	; 0x30
   14f3c:	mov	ip, #0
   14f40:	subs	r6, r6, #1
   14f44:	sbc	r7, r7, #0
   14f48:	mvn	r3, #0
   14f4c:	mvn	r2, #0
   14f50:	cmp	r7, r3
   14f54:	cmpeq	r6, r2
   14f58:	beq	15008 <__assert_fail@plt+0x3edc>
   14f5c:	lsr	r3, r5, #31
   14f60:	str	r3, [sp, #56]	; 0x38
   14f64:	mov	r3, #0
   14f68:	str	r3, [sp, #60]	; 0x3c
   14f6c:	ldrd	r2, [sp, #96]	; 0x60
   14f70:	adds	r0, r2, r2
   14f74:	adc	r1, r3, r3
   14f78:	ldrd	r2, [sp, #56]	; 0x38
   14f7c:	orr	r2, r2, r0
   14f80:	orr	r3, r3, r1
   14f84:	mov	r0, r2
   14f88:	mov	r1, r3
   14f8c:	adds	r2, r4, r4
   14f90:	adc	r3, r5, r5
   14f94:	cmp	fp, r1
   14f98:	cmpeq	sl, r0
   14f9c:	strd	r0, [sp, #96]	; 0x60
   14fa0:	mov	r4, r2
   14fa4:	mov	r5, r3
   14fa8:	bcc	14fcc <__assert_fail@plt+0x3ea0>
   14fac:	moveq	lr, #1
   14fb0:	movne	lr, #0
   14fb4:	cmp	r3, r9
   14fb8:	cmpeq	r2, r8
   14fbc:	movcc	lr, #0
   14fc0:	andcs	lr, lr, #1
   14fc4:	cmp	lr, #0
   14fc8:	beq	14f40 <__assert_fail@plt+0x3e14>
   14fcc:	ldrd	r0, [sp, #96]	; 0x60
   14fd0:	cmp	r3, r9
   14fd4:	cmpeq	r2, r8
   14fd8:	movcc	r4, #1
   14fdc:	movcs	r4, #0
   14fe0:	subs	r0, r0, sl
   14fe4:	sbc	r1, r1, fp
   14fe8:	subs	r0, r0, r4
   14fec:	sbc	r1, r1, ip
   14ff0:	subs	r2, r2, r8
   14ff4:	sbc	r3, r3, r9
   14ff8:	strd	r0, [sp, #96]	; 0x60
   14ffc:	mov	r4, r2
   15000:	mov	r5, r3
   15004:	b	14f40 <__assert_fail@plt+0x3e14>
   15008:	ldrd	r6, [sp, #96]	; 0x60
   1500c:	adds	r2, r4, r4
   15010:	adc	r3, r5, r5
   15014:	mov	r1, r3
   15018:	mov	r0, r2
   1501c:	adds	r2, r6, r6
   15020:	adc	r3, r7, r7
   15024:	cmp	r5, r1
   15028:	cmpeq	r4, r0
   1502c:	strd	r0, [sp, #72]	; 0x48
   15030:	mov	r7, r1
   15034:	movhi	r1, #1
   15038:	movls	r1, #0
   1503c:	strd	r4, [sp, #104]	; 0x68
   15040:	adds	r4, r2, r1
   15044:	adc	r5, r3, #0
   15048:	cmp	fp, r5
   1504c:	cmpeq	sl, r4
   15050:	strd	r8, [sp, #48]	; 0x30
   15054:	mov	r8, r4
   15058:	mov	r9, r5
   1505c:	bcc	15088 <__assert_fail@plt+0x3f5c>
   15060:	mov	r3, r7
   15064:	ldrd	r6, [sp, #48]	; 0x30
   15068:	moveq	r1, #1
   1506c:	movne	r1, #0
   15070:	cmp	r7, r3
   15074:	cmpeq	r6, r0
   15078:	movhi	r1, #0
   1507c:	andls	r1, r1, #1
   15080:	cmp	r1, #0
   15084:	beq	15c9c <__assert_fail@plt+0x4b70>
   15088:	ldrd	r0, [sp, #48]	; 0x30
   1508c:	ldrd	r4, [sp, #72]	; 0x48
   15090:	cmp	r1, r5
   15094:	cmpeq	r0, r4
   15098:	movhi	r0, #1
   1509c:	movls	r0, #0
   150a0:	subs	r2, r8, sl
   150a4:	sbc	r3, r9, fp
   150a8:	mov	r1, #0
   150ac:	subs	r2, r2, r0
   150b0:	sbc	r3, r3, r1
   150b4:	mov	r0, r2
   150b8:	mov	r1, r3
   150bc:	mov	r8, r2
   150c0:	mov	r9, r3
   150c4:	mov	r2, r4
   150c8:	mov	r3, r5
   150cc:	ldrd	r4, [sp, #48]	; 0x30
   150d0:	subs	r4, r2, r4
   150d4:	sbc	r5, r3, r5
   150d8:	mov	r2, r4
   150dc:	mov	r3, r5
   150e0:	strd	r2, [sp, #72]	; 0x48
   150e4:	mov	r2, r0
   150e8:	mov	r3, r1
   150ec:	strd	r2, [sp, #160]	; 0xa0
   150f0:	ldrd	r2, [sp, #48]	; 0x30
   150f4:	cmp	r3, #0
   150f8:	cmpeq	r2, #1
   150fc:	movne	r1, #1
   15100:	moveq	r1, #0
   15104:	orrs	r3, sl, fp
   15108:	mov	r2, r8
   1510c:	mov	r3, r9
   15110:	orrne	r1, r1, #1
   15114:	cmp	r1, #0
   15118:	strd	r2, [sp, #168]	; 0xa8
   1511c:	strd	r2, [sp, #176]	; 0xb0
   15120:	beq	15918 <__assert_fail@plt+0x47ec>
   15124:	mov	r3, #1
   15128:	ldr	r2, [sp, #240]	; 0xf0
   1512c:	mov	r5, r3
   15130:	mov	r4, r3
   15134:	str	r3, [sp, #116]	; 0x74
   15138:	mov	r3, #0
   1513c:	strd	r2, [sp, #80]	; 0x50
   15140:	ldrd	r2, [sp, #72]	; 0x48
   15144:	mov	r7, r3
   15148:	strd	r2, [sp, #56]	; 0x38
   1514c:	ldr	r3, [sp, #240]	; 0xf0
   15150:	mov	r6, r2
   15154:	add	r3, r3, r5
   15158:	str	r3, [sp, #156]	; 0x9c
   1515c:	mov	r2, r8
   15160:	mov	r3, r9
   15164:	strd	r6, [sp, #120]	; 0x78
   15168:	ldrd	r8, [sp, #48]	; 0x30
   1516c:	ldr	ip, [pc, #2628]	; 15bb8 <__assert_fail@plt+0x4a8c>
   15170:	ldr	lr, [sp, #48]	; 0x30
   15174:	mov	r6, r8
   15178:	mov	r7, r9
   1517c:	lsrs	r7, r7, #1
   15180:	rrx	r6, r6
   15184:	and	r0, r6, #127	; 0x7f
   15188:	add	r0, ip, r0
   1518c:	and	r6, r8, #1
   15190:	ldrb	r0, [r0, #716]	; 0x2cc
   15194:	mov	r7, #0
   15198:	strd	r6, [sp, #128]	; 0x80
   1519c:	mov	r6, r0
   151a0:	umull	r0, r1, r0, r0
   151a4:	adds	r8, r6, r6
   151a8:	mov	r7, #0
   151ac:	adc	r9, r7, r7
   151b0:	ldrd	r6, [sp, #48]	; 0x30
   151b4:	mul	ip, r0, r7
   151b8:	umull	r6, r7, r0, r6
   151bc:	mla	r1, lr, r1, ip
   151c0:	subs	r0, r8, r6
   151c4:	add	r1, r1, r7
   151c8:	mov	r7, r1
   151cc:	sbc	r1, r9, r7
   151d0:	adds	r6, r0, r0
   151d4:	adc	r7, r1, r1
   151d8:	mul	ip, r0, r1
   151dc:	umull	r0, r1, r0, r0
   151e0:	ldrd	r8, [sp, #48]	; 0x30
   151e4:	add	r1, r1, ip, lsl #1
   151e8:	ldr	lr, [sp, #48]	; 0x30
   151ec:	mul	ip, r0, r9
   151f0:	umull	r8, r9, r0, r8
   151f4:	mla	r1, lr, r1, ip
   151f8:	mov	r0, r6
   151fc:	add	r1, r1, r9
   15200:	subs	r0, r0, r8
   15204:	mov	r9, r1
   15208:	mov	r1, r7
   1520c:	sbc	r1, r1, r9
   15210:	adds	r6, r0, r0
   15214:	adc	r7, r1, r1
   15218:	mul	ip, r0, r1
   1521c:	umull	r0, r1, r0, r0
   15220:	ldrd	r8, [sp, #48]	; 0x30
   15224:	add	r1, r1, ip, lsl #1
   15228:	ldr	lr, [sp, #48]	; 0x30
   1522c:	mul	ip, r0, r9
   15230:	umull	r8, r9, r0, r8
   15234:	mla	r1, lr, r1, ip
   15238:	subs	r6, r6, r8
   1523c:	add	r1, r1, r9
   15240:	ldrd	r8, [sp, #48]	; 0x30
   15244:	sbc	r7, r7, r1
   15248:	strd	r6, [sp, #64]	; 0x40
   1524c:	ldrd	r0, [sp, #64]	; 0x40
   15250:	strd	r2, [sp, #8]
   15254:	strd	r8, [sp, #32]
   15258:	strd	r0, [sp, #40]	; 0x28
   1525c:	ldrd	r0, [sp, #72]	; 0x48
   15260:	strd	sl, [sp, #24]
   15264:	strd	r0, [sp, #16]
   15268:	strd	r0, [sp]
   1526c:	add	r0, sp, #192	; 0xc0
   15270:	bl	11620 <__assert_fail@plt+0x4f4>
   15274:	ldrd	r2, [sp, #80]	; 0x50
   15278:	adds	r2, r2, r0
   1527c:	adc	r3, r3, r1
   15280:	mov	r7, r3
   15284:	cmp	r1, r7
   15288:	mov	r6, r2
   1528c:	ldrd	r2, [sp, #192]	; 0xc0
   15290:	cmpeq	r0, r6
   15294:	movhi	ip, #1
   15298:	movls	ip, #0
   1529c:	adds	r0, r2, ip
   152a0:	adc	r1, r3, #0
   152a4:	cmp	r1, fp
   152a8:	cmpeq	r0, sl
   152ac:	strd	r6, [sp, #72]	; 0x48
   152b0:	strd	r0, [sp, #48]	; 0x30
   152b4:	mov	r3, r1
   152b8:	bhi	152dc <__assert_fail@plt+0x41b0>
   152bc:	moveq	r3, #1
   152c0:	movne	r3, #0
   152c4:	cmp	r7, r9
   152c8:	cmpeq	r6, r8
   152cc:	movcc	r3, #0
   152d0:	andcs	r3, r3, #1
   152d4:	cmp	r3, #0
   152d8:	beq	15318 <__assert_fail@plt+0x41ec>
   152dc:	ldrd	r6, [sp, #72]	; 0x48
   152e0:	ldrd	r0, [sp, #48]	; 0x30
   152e4:	cmp	r7, r9
   152e8:	cmpeq	r6, r8
   152ec:	movcc	r2, #1
   152f0:	movcs	r2, #0
   152f4:	subs	r0, r0, sl
   152f8:	mov	r3, #0
   152fc:	sbc	r1, r1, fp
   15300:	subs	r0, r0, r2
   15304:	sbc	r1, r1, r3
   15308:	subs	r2, r6, r8
   1530c:	sbc	r3, r7, r9
   15310:	strd	r0, [sp, #48]	; 0x30
   15314:	strd	r2, [sp, #72]	; 0x48
   15318:	ldrd	r6, [sp, #72]	; 0x48
   1531c:	mov	r2, r0
   15320:	mov	r3, r1
   15324:	ldrd	r0, [sp, #56]	; 0x38
   15328:	strd	r2, [sp, #160]	; 0xa0
   1532c:	ldrd	r2, [sp, #168]	; 0xa8
   15330:	subs	r0, r0, r6
   15334:	sbc	r1, r1, r7
   15338:	strd	r0, [sp, #88]	; 0x58
   1533c:	ldrd	r0, [sp, #48]	; 0x30
   15340:	subs	r0, r2, r0
   15344:	sbc	r1, r3, r1
   15348:	mov	r2, r0
   1534c:	mov	r3, r1
   15350:	ldrd	r0, [sp, #56]	; 0x38
   15354:	cmp	r7, r1
   15358:	cmpeq	r6, r0
   1535c:	movhi	r1, #1
   15360:	movls	r1, #0
   15364:	subs	r2, r2, r1
   15368:	sbc	r3, r3, #0
   1536c:	cmp	r2, #0
   15370:	strd	r2, [sp, #48]	; 0x30
   15374:	sbcs	r3, r3, #0
   15378:	blt	15584 <__assert_fail@plt+0x4458>
   1537c:	ldrd	r2, [sp, #64]	; 0x40
   15380:	strd	r8, [sp, #32]
   15384:	strd	sl, [sp, #24]
   15388:	strd	r2, [sp, #40]	; 0x28
   1538c:	ldrd	r2, [sp, #88]	; 0x58
   15390:	add	r0, sp, #192	; 0xc0
   15394:	strd	r2, [sp, #16]
   15398:	ldrd	r2, [sp, #48]	; 0x30
   1539c:	strd	r2, [sp, #8]
   153a0:	ldrd	r2, [sp, #104]	; 0x68
   153a4:	strd	r2, [sp]
   153a8:	ldrd	r2, [sp, #96]	; 0x60
   153ac:	bl	11620 <__assert_fail@plt+0x4f4>
   153b0:	ldr	r3, [sp, #116]	; 0x74
   153b4:	cmp	r3, #1
   153b8:	ldrd	r2, [sp, #192]	; 0xc0
   153bc:	strd	r2, [sp, #96]	; 0x60
   153c0:	strd	r0, [sp, #104]	; 0x68
   153c4:	beq	15508 <__assert_fail@plt+0x43dc>
   153c8:	ldrd	r2, [sp, #160]	; 0xa0
   153cc:	subs	r4, r4, #1
   153d0:	bne	154fc <__assert_fail@plt+0x43d0>
   153d4:	lsl	r1, r5, #1
   153d8:	cmp	r5, #0
   153dc:	str	r1, [sp, #88]	; 0x58
   153e0:	strd	r2, [sp, #168]	; 0xa8
   153e4:	ldrd	r0, [sp, #72]	; 0x48
   153e8:	beq	155d8 <__assert_fail@plt+0x44ac>
   153ec:	mov	r6, r0
   153f0:	mov	r7, r1
   153f4:	strd	r2, [sp, #48]	; 0x30
   153f8:	strd	sl, [sp, #56]	; 0x38
   153fc:	ldrd	r2, [sp, #64]	; 0x40
   15400:	strd	r6, [sp, #16]
   15404:	strd	r6, [sp]
   15408:	strd	r2, [sp, #40]	; 0x28
   1540c:	ldrd	r2, [sp, #56]	; 0x38
   15410:	strd	r8, [sp, #32]
   15414:	add	r0, sp, #192	; 0xc0
   15418:	strd	r2, [sp, #24]
   1541c:	ldrd	r2, [sp, #48]	; 0x30
   15420:	strd	r2, [sp, #8]
   15424:	bl	11620 <__assert_fail@plt+0x4f4>
   15428:	ldrd	r6, [sp, #80]	; 0x50
   1542c:	ldrd	r2, [sp, #192]	; 0xc0
   15430:	adds	r6, r6, r0
   15434:	adc	r7, r7, r1
   15438:	cmp	r1, r7
   1543c:	cmpeq	r0, r6
   15440:	movhi	r1, #1
   15444:	movls	r1, #0
   15448:	adds	sl, r2, r1
   1544c:	ldrd	r0, [sp, #56]	; 0x38
   15450:	adc	fp, r3, #0
   15454:	mov	r2, sl
   15458:	mov	r3, fp
   1545c:	cmp	fp, r1
   15460:	cmpeq	sl, r0
   15464:	strd	r2, [sp, #48]	; 0x30
   15468:	bhi	1548c <__assert_fail@plt+0x4360>
   1546c:	moveq	r1, #1
   15470:	movne	r1, #0
   15474:	cmp	r7, r9
   15478:	cmpeq	r6, r8
   1547c:	movcc	r1, #0
   15480:	andcs	r1, r1, #1
   15484:	cmp	r1, #0
   15488:	beq	154c4 <__assert_fail@plt+0x4398>
   1548c:	ldrd	r2, [sp, #48]	; 0x30
   15490:	ldrd	sl, [sp, #56]	; 0x38
   15494:	cmp	r7, r9
   15498:	cmpeq	r6, r8
   1549c:	movcc	r0, #1
   154a0:	movcs	r0, #0
   154a4:	subs	sl, r2, sl
   154a8:	sbc	fp, r3, fp
   154ac:	mov	r1, #0
   154b0:	subs	r2, sl, r0
   154b4:	sbc	r3, fp, r1
   154b8:	subs	r6, r6, r8
   154bc:	sbc	r7, r7, r9
   154c0:	strd	r2, [sp, #48]	; 0x30
   154c4:	add	r4, r4, #1
   154c8:	cmp	r5, r4
   154cc:	strd	r2, [sp, #160]	; 0xa0
   154d0:	bne	153fc <__assert_fail@plt+0x42d0>
   154d4:	ldrd	r2, [sp, #48]	; 0x30
   154d8:	ldrd	sl, [sp, #56]	; 0x38
   154dc:	strd	r6, [sp, #120]	; 0x78
   154e0:	ldrd	r0, [sp, #72]	; 0x48
   154e4:	mov	r4, r5
   154e8:	ldr	r5, [sp, #88]	; 0x58
   154ec:	strd	r0, [sp, #56]	; 0x38
   154f0:	ldrd	r0, [sp, #120]	; 0x78
   154f4:	strd	r2, [sp, #176]	; 0xb0
   154f8:	strd	r0, [sp, #72]	; 0x48
   154fc:	and	r1, r4, #31
   15500:	str	r1, [sp, #116]	; 0x74
   15504:	b	1524c <__assert_fail@plt+0x4120>
   15508:	ldrd	r2, [sp, #128]	; 0x80
   1550c:	orrs	r3, r2, r3
   15510:	beq	15d0c <__assert_fail@plt+0x4be0>
   15514:	ldrd	r0, [sp, #104]	; 0x68
   15518:	ldrd	r6, [sp, #96]	; 0x60
   1551c:	orr	r2, r0, r6
   15520:	orr	r3, r1, r7
   15524:	orrs	r3, r2, r3
   15528:	beq	155c0 <__assert_fail@plt+0x4494>
   1552c:	strd	r0, [sp]
   15530:	mov	r2, r6
   15534:	strd	r8, [sp, #16]
   15538:	strd	sl, [sp, #8]
   1553c:	mov	r3, r7
   15540:	add	r0, sp, #184	; 0xb8
   15544:	bl	12868 <__assert_fail@plt+0x173c>
   15548:	ldr	ip, [sp, #184]	; 0xb8
   1554c:	ldr	r2, [sp, #188]	; 0xbc
   15550:	cmp	r1, #0
   15554:	cmpeq	r0, #1
   15558:	movne	r3, #1
   1555c:	moveq	r3, #0
   15560:	orrs	r2, ip, r2
   15564:	orrne	r3, r3, #1
   15568:	cmp	r3, #0
   1556c:	bne	155e0 <__assert_fail@plt+0x44b4>
   15570:	ldrd	r2, [sp, #160]	; 0xa0
   15574:	ldrd	r0, [sp, #72]	; 0x48
   15578:	strd	r2, [sp, #176]	; 0xb0
   1557c:	strd	r0, [sp, #120]	; 0x78
   15580:	b	153cc <__assert_fail@plt+0x42a0>
   15584:	ldrd	r6, [sp, #88]	; 0x58
   15588:	ldrd	r2, [sp, #48]	; 0x30
   1558c:	adds	r0, r6, r8
   15590:	adc	r1, r7, r9
   15594:	adds	r2, r2, sl
   15598:	adc	r3, r3, fp
   1559c:	cmp	r7, r1
   155a0:	cmpeq	r6, r0
   155a4:	movhi	ip, #1
   155a8:	movls	ip, #0
   155ac:	strd	r0, [sp, #88]	; 0x58
   155b0:	adds	r0, r2, ip
   155b4:	adc	r1, r3, #0
   155b8:	strd	r0, [sp, #48]	; 0x30
   155bc:	b	1537c <__assert_fail@plt+0x4250>
   155c0:	mov	ip, sl
   155c4:	mov	r2, fp
   155c8:	mov	r0, r8
   155cc:	mov	r1, r9
   155d0:	strd	sl, [sp, #184]	; 0xb8
   155d4:	b	15550 <__assert_fail@plt+0x4424>
   155d8:	strd	r0, [sp, #120]	; 0x78
   155dc:	b	154e0 <__assert_fail@plt+0x43b4>
   155e0:	ldrd	r6, [sp, #120]	; 0x78
   155e4:	str	r4, [sp, #128]	; 0x80
   155e8:	str	r5, [sp, #152]	; 0x98
   155ec:	b	156c4 <__assert_fail@plt+0x4598>
   155f0:	moveq	r3, #1
   155f4:	movne	r3, #0
   155f8:	cmp	r7, r9
   155fc:	cmpeq	r6, r8
   15600:	movcc	r3, #0
   15604:	andcs	r3, r3, #1
   15608:	cmp	r3, #0
   1560c:	bne	15728 <__assert_fail@plt+0x45fc>
   15610:	mov	r2, r0
   15614:	mov	r3, r1
   15618:	strd	r2, [sp, #176]	; 0xb0
   1561c:	ldrd	r0, [sp, #56]	; 0x38
   15620:	ldrd	r2, [sp, #168]	; 0xa8
   15624:	subs	r4, r0, r6
   15628:	sbc	r5, r1, r7
   1562c:	strd	r4, [sp, #88]	; 0x58
   15630:	ldrd	r4, [sp, #48]	; 0x30
   15634:	subs	r4, r2, r4
   15638:	sbc	r5, r3, r5
   1563c:	cmp	r1, r7
   15640:	cmpeq	r0, r6
   15644:	movcc	r1, #1
   15648:	movcs	r1, #0
   1564c:	subs	r2, r4, r1
   15650:	sbc	r3, r5, #0
   15654:	cmp	r2, #0
   15658:	mov	r5, r3
   1565c:	sbcs	r3, r3, #0
   15660:	mov	r4, r2
   15664:	blt	15920 <__assert_fail@plt+0x47f4>
   15668:	ldrd	r2, [sp, #88]	; 0x58
   1566c:	orr	r3, r3, r5
   15670:	orr	r2, r2, r4
   15674:	mov	r0, r2
   15678:	mov	r1, r3
   1567c:	orrs	r3, r0, r1
   15680:	beq	1576c <__assert_fail@plt+0x4640>
   15684:	ldrd	r2, [sp, #88]	; 0x58
   15688:	strd	r8, [sp, #16]
   1568c:	strd	sl, [sp, #8]
   15690:	strd	r2, [sp]
   15694:	add	r0, sp, #184	; 0xb8
   15698:	mov	r2, r4
   1569c:	mov	r3, r5
   156a0:	bl	12868 <__assert_fail@plt+0x173c>
   156a4:	mov	r2, r0
   156a8:	mov	r3, r1
   156ac:	ldrd	r0, [sp, #184]	; 0xb8
   156b0:	orrs	ip, r0, r1
   156b4:	bne	15788 <__assert_fail@plt+0x465c>
   156b8:	cmp	r3, #0
   156bc:	cmpeq	r2, #1
   156c0:	bne	15960 <__assert_fail@plt+0x4834>
   156c4:	ldrd	r2, [sp, #176]	; 0xb0
   156c8:	ldrd	r0, [sp, #64]	; 0x40
   156cc:	strd	r6, [sp, #16]
   156d0:	strd	r6, [sp]
   156d4:	strd	r0, [sp, #40]	; 0x28
   156d8:	strd	r2, [sp, #8]
   156dc:	strd	r8, [sp, #32]
   156e0:	strd	sl, [sp, #24]
   156e4:	add	r0, sp, #192	; 0xc0
   156e8:	bl	11620 <__assert_fail@plt+0x4f4>
   156ec:	ldrd	r6, [sp, #80]	; 0x50
   156f0:	ldrd	r2, [sp, #192]	; 0xc0
   156f4:	adds	r6, r6, r0
   156f8:	adc	r7, r7, r1
   156fc:	cmp	r1, r7
   15700:	cmpeq	r0, r6
   15704:	movhi	ip, #1
   15708:	movls	ip, #0
   1570c:	adds	r0, r2, ip
   15710:	adc	r1, r3, #0
   15714:	cmp	r1, fp
   15718:	cmpeq	r0, sl
   1571c:	strd	r0, [sp, #48]	; 0x30
   15720:	mov	r3, r1
   15724:	bls	155f0 <__assert_fail@plt+0x44c4>
   15728:	ldrd	r0, [sp, #48]	; 0x30
   1572c:	cmp	r7, r9
   15730:	cmpeq	r6, r8
   15734:	movcc	r2, #1
   15738:	movcs	r2, #0
   1573c:	subs	r0, r0, sl
   15740:	mov	r3, #0
   15744:	sbc	r1, r1, fp
   15748:	subs	r0, r0, r2
   1574c:	sbc	r1, r1, r3
   15750:	mov	r2, r0
   15754:	mov	r3, r1
   15758:	subs	r6, r6, r8
   1575c:	strd	r2, [sp, #48]	; 0x30
   15760:	sbc	r7, r7, r9
   15764:	strd	r2, [sp, #176]	; 0xb0
   15768:	b	1561c <__assert_fail@plt+0x44f0>
   1576c:	mov	r0, sl
   15770:	mov	r1, fp
   15774:	orrs	ip, r0, r1
   15778:	mov	r2, r8
   1577c:	mov	r3, r9
   15780:	strd	sl, [sp, #184]	; 0xb8
   15784:	beq	156b8 <__assert_fail@plt+0x458c>
   15788:	cmp	fp, r1
   1578c:	mov	r5, r3
   15790:	cmpeq	sl, r0
   15794:	moveq	r3, #1
   15798:	movne	r3, #0
   1579c:	cmp	r5, r9
   157a0:	cmpeq	r2, r8
   157a4:	mov	r4, r2
   157a8:	movne	r3, #0
   157ac:	andeq	r3, r3, #1
   157b0:	cmp	r3, #0
   157b4:	strd	r4, [sp, #56]	; 0x38
   157b8:	strd	r8, [sp, #48]	; 0x30
   157bc:	bne	15d20 <__assert_fail@plt+0x4bf4>
   157c0:	ldrd	sl, [sp, #56]	; 0x38
   157c4:	ldr	ip, [pc, #1004]	; 15bb8 <__assert_fail@plt+0x4a8c>
   157c8:	mov	r7, #0
   157cc:	mov	r2, sl
   157d0:	mov	r3, fp
   157d4:	lsrs	r3, r3, #1
   157d8:	rrx	r2, r2
   157dc:	and	r2, r2, #127	; 0x7f
   157e0:	add	r3, ip, r2
   157e4:	mov	r2, sl
   157e8:	ldrb	r4, [r3, #716]	; 0x2cc
   157ec:	mov	r8, sl
   157f0:	mov	r3, fp
   157f4:	mov	r6, r4
   157f8:	umull	r4, r5, r4, r4
   157fc:	ldr	lr, [sp, #52]	; 0x34
   15800:	mov	r9, fp
   15804:	mul	ip, r4, fp
   15808:	umull	sl, fp, r4, sl
   1580c:	mla	ip, r2, r5, ip
   15810:	adds	r6, r6, r6
   15814:	adc	r7, r7, r7
   15818:	add	fp, ip, fp
   1581c:	subs	r4, r6, sl
   15820:	sbc	r5, r7, fp
   15824:	adds	r6, r4, r4
   15828:	adc	r7, r5, r5
   1582c:	mul	ip, r4, r5
   15830:	umull	r4, r5, r4, r4
   15834:	add	r5, r5, ip, lsl #1
   15838:	mul	ip, r4, r3
   1583c:	umull	sl, fp, r4, r2
   15840:	mla	ip, r2, r5, ip
   15844:	subs	r4, r6, sl
   15848:	add	fp, ip, fp
   1584c:	sbc	r5, r7, fp
   15850:	adds	r6, r4, r4
   15854:	adc	r7, r5, r5
   15858:	mul	ip, r4, r5
   1585c:	umull	r4, r5, r4, r4
   15860:	add	r5, r5, ip, lsl #1
   15864:	mul	ip, r4, r3
   15868:	umull	sl, fp, r4, r2
   1586c:	mla	ip, r2, r5, ip
   15870:	subs	r4, r6, sl
   15874:	add	fp, ip, fp
   15878:	ldr	ip, [sp, #48]	; 0x30
   1587c:	sbc	r5, r7, fp
   15880:	mul	ip, ip, r5
   15884:	mla	ip, r4, lr, ip
   15888:	ldr	lr, [sp, #48]	; 0x30
   1588c:	umull	r4, r5, lr, r4
   15890:	strd	r4, [sp, #48]	; 0x30
   15894:	ldr	lr, [sp, #52]	; 0x34
   15898:	add	ip, ip, lr
   1589c:	str	ip, [sp, #52]	; 0x34
   158a0:	bl	17208 <__assert_fail@plt+0x60dc>
   158a4:	cmp	r0, #0
   158a8:	bne	15c84 <__assert_fail@plt+0x4b58>
   158ac:	ldr	r3, [sp, #240]	; 0xf0
   158b0:	ldrd	r0, [sp, #184]	; 0xb8
   158b4:	add	ip, r3, #1
   158b8:	ldr	r3, [sp, #244]	; 0xf4
   158bc:	mov	r2, r8
   158c0:	str	r3, [sp, #4]
   158c4:	str	ip, [sp]
   158c8:	mov	r3, r9
   158cc:	bl	14ef8 <__assert_fail@plt+0x3dcc>
   158d0:	ldrd	r2, [sp, #48]	; 0x30
   158d4:	cmp	r3, #0
   158d8:	cmpeq	r2, #1
   158dc:	bls	15908 <__assert_fail@plt+0x47dc>
   158e0:	add	r3, pc, #712	; 0x2c8
   158e4:	ldrd	r2, [r3]
   158e8:	ldrd	r0, [sp, #48]	; 0x30
   158ec:	cmp	r1, r3
   158f0:	cmpeq	r0, r2
   158f4:	bls	15cd0 <__assert_fail@plt+0x4ba4>
   158f8:	ldrd	r0, [sp, #48]	; 0x30
   158fc:	bl	13ba0 <__assert_fail@plt+0x2a74>
   15900:	cmp	r0, #0
   15904:	bne	15cd0 <__assert_fail@plt+0x4ba4>
   15908:	ldr	r3, [sp, #244]	; 0xf4
   1590c:	ldr	r2, [sp, #240]	; 0xf0
   15910:	ldrd	r0, [sp, #48]	; 0x30
   15914:	bl	1413c <__assert_fail@plt+0x3010>
   15918:	add	sp, sp, #204	; 0xcc
   1591c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15920:	ldrd	r0, [sp, #88]	; 0x58
   15924:	adds	r0, r0, r8
   15928:	adc	r1, r1, r9
   1592c:	adds	r2, r2, sl
   15930:	adc	r3, r5, fp
   15934:	ldrd	r4, [sp, #88]	; 0x58
   15938:	strd	r0, [sp, #88]	; 0x58
   1593c:	cmp	r5, r1
   15940:	cmpeq	r4, r0
   15944:	movhi	ip, #1
   15948:	movls	ip, #0
   1594c:	adds	r0, r2, ip
   15950:	adc	r1, r3, #0
   15954:	mov	r4, r0
   15958:	mov	r5, r1
   1595c:	b	15668 <__assert_fail@plt+0x453c>
   15960:	strd	r6, [sp, #120]	; 0x78
   15964:	ldr	r4, [sp, #128]	; 0x80
   15968:	lsrs	r7, r3, #1
   1596c:	rrx	r6, r2
   15970:	strd	r0, [sp, #128]	; 0x80
   15974:	ldr	r1, [pc, #572]	; 15bb8 <__assert_fail@plt+0x4a8c>
   15978:	and	r6, r6, #127	; 0x7f
   1597c:	add	ip, r1, r6
   15980:	strd	r8, [sp, #48]	; 0x30
   15984:	ldrb	ip, [ip, #716]	; 0x2cc
   15988:	mov	r7, #0
   1598c:	ldr	r5, [sp, #152]	; 0x98
   15990:	umull	r8, r9, ip, ip
   15994:	mov	r0, r8
   15998:	adds	r8, ip, ip
   1599c:	mov	r1, r9
   159a0:	mul	ip, r0, r3
   159a4:	adc	r9, r7, r7
   159a8:	mov	r7, r9
   159ac:	mov	r9, r1
   159b0:	umull	r0, r1, r0, r2
   159b4:	mla	ip, r2, r9, ip
   159b8:	strd	r0, [sp, #64]	; 0x40
   159bc:	add	r1, ip, r1
   159c0:	str	r1, [sp, #68]	; 0x44
   159c4:	ldrd	r0, [sp, #64]	; 0x40
   159c8:	mov	r6, r8
   159cc:	subs	r6, r6, r0
   159d0:	mov	r8, r6
   159d4:	sbc	r7, r7, r1
   159d8:	mov	r9, r7
   159dc:	umull	r0, r1, r8, r8
   159e0:	mul	ip, r8, r9
   159e4:	mov	r8, r0
   159e8:	adds	r6, r6, r6
   159ec:	add	r1, r1, ip, lsl #1
   159f0:	mul	ip, r8, r3
   159f4:	mov	r9, r1
   159f8:	umull	r0, r1, r8, r2
   159fc:	mla	ip, r2, r9, ip
   15a00:	strd	r0, [sp, #64]	; 0x40
   15a04:	add	r1, ip, r1
   15a08:	str	r1, [sp, #68]	; 0x44
   15a0c:	ldrd	r0, [sp, #64]	; 0x40
   15a10:	adc	r7, r7, r7
   15a14:	subs	r6, r6, r0
   15a18:	sbc	r7, r7, r1
   15a1c:	mov	r0, r6
   15a20:	adds	r8, r6, r6
   15a24:	mov	r6, r8
   15a28:	mov	r8, r0
   15a2c:	mov	r1, r7
   15a30:	adc	r9, r7, r7
   15a34:	mov	r7, r9
   15a38:	mov	r9, r1
   15a3c:	umull	r0, r1, r8, r8
   15a40:	mul	ip, r8, r9
   15a44:	mov	r8, r0
   15a48:	add	r1, r1, ip, lsl #1
   15a4c:	mul	ip, r8, r3
   15a50:	mov	r9, r1
   15a54:	umull	r0, r1, r8, r2
   15a58:	mla	ip, r2, r9, ip
   15a5c:	strd	r0, [sp, #64]	; 0x40
   15a60:	add	r1, ip, r1
   15a64:	str	r1, [sp, #68]	; 0x44
   15a68:	ldrd	r0, [sp, #64]	; 0x40
   15a6c:	ldrd	r8, [sp, #48]	; 0x30
   15a70:	subs	r6, r6, r0
   15a74:	sbc	r7, r7, r1
   15a78:	umull	r0, r1, r8, r6
   15a7c:	mul	ip, r8, r7
   15a80:	cmp	r3, fp
   15a84:	mla	ip, r6, r9, ip
   15a88:	cmpeq	r2, sl
   15a8c:	add	ip, ip, r1
   15a90:	strd	r0, [sp, #48]	; 0x30
   15a94:	strd	r6, [sp, #88]	; 0x58
   15a98:	str	ip, [sp, #52]	; 0x34
   15a9c:	bls	15bc8 <__assert_fail@plt+0x4a9c>
   15aa0:	ldrd	sl, [sp, #128]	; 0x80
   15aa4:	cmp	r3, #0
   15aa8:	cmpeq	r2, #1
   15aac:	bls	15ae0 <__assert_fail@plt+0x49b4>
   15ab0:	add	r1, pc, #248	; 0xf8
   15ab4:	ldrd	r0, [r1]
   15ab8:	cmp	r3, r1
   15abc:	cmpeq	r2, r0
   15ac0:	bls	15b98 <__assert_fail@plt+0x4a6c>
   15ac4:	mov	r0, r2
   15ac8:	mov	r1, r3
   15acc:	strd	r2, [sp, #64]	; 0x40
   15ad0:	bl	13ba0 <__assert_fail@plt+0x2a74>
   15ad4:	ldrd	r2, [sp, #64]	; 0x40
   15ad8:	cmp	r0, #0
   15adc:	bne	15b98 <__assert_fail@plt+0x4a6c>
   15ae0:	mov	r0, r2
   15ae4:	mov	r1, r3
   15ae8:	ldr	r2, [sp, #156]	; 0x9c
   15aec:	ldr	r3, [sp, #244]	; 0xf4
   15af0:	bl	1413c <__assert_fail@plt+0x3010>
   15af4:	orrs	r3, sl, fp
   15af8:	beq	158d0 <__assert_fail@plt+0x47a4>
   15afc:	ldrd	r2, [sp, #48]	; 0x30
   15b00:	mov	r0, sl
   15b04:	mov	r1, fp
   15b08:	bl	17208 <__assert_fail@plt+0x60dc>
   15b0c:	cmp	r0, #0
   15b10:	bne	15cec <__assert_fail@plt+0x4bc0>
   15b14:	ldrd	r8, [sp, #48]	; 0x30
   15b18:	ldrd	r2, [sp, #160]	; 0xa0
   15b1c:	strd	sl, [sp, #8]
   15b20:	mov	r0, r8
   15b24:	mov	r1, r9
   15b28:	strd	r0, [sp, #16]
   15b2c:	ldrd	r0, [sp, #72]	; 0x48
   15b30:	strd	r0, [sp]
   15b34:	add	r0, sp, #160	; 0xa0
   15b38:	bl	12aec <__assert_fail@plt+0x19c0>
   15b3c:	ldrd	r6, [sp, #56]	; 0x38
   15b40:	mov	r2, r8
   15b44:	mov	r3, r9
   15b48:	strd	r2, [sp, #16]
   15b4c:	strd	r0, [sp, #72]	; 0x48
   15b50:	add	r0, sp, #200	; 0xc8
   15b54:	ldrd	r2, [r0, #-32]!	; 0xffffffe0
   15b58:	strd	r6, [sp]
   15b5c:	strd	sl, [sp, #8]
   15b60:	bl	12aec <__assert_fail@plt+0x19c0>
   15b64:	ldrd	r6, [sp, #120]	; 0x78
   15b68:	mov	r2, r8
   15b6c:	mov	r3, r9
   15b70:	strd	r2, [sp, #16]
   15b74:	strd	r0, [sp, #56]	; 0x38
   15b78:	add	r0, sp, #200	; 0xc8
   15b7c:	ldrd	r2, [r0, #-24]!	; 0xffffffe8
   15b80:	strd	sl, [sp, #8]
   15b84:	strd	r6, [sp]
   15b88:	bl	12aec <__assert_fail@plt+0x19c0>
   15b8c:	ldrd	r2, [sp, #160]	; 0xa0
   15b90:	strd	r0, [sp, #120]	; 0x78
   15b94:	b	15168 <__assert_fail@plt+0x403c>
   15b98:	mov	r1, #1
   15b9c:	str	r1, [sp]
   15ba0:	ldr	r0, [sp, #244]	; 0xf4
   15ba4:	bl	114e0 <__assert_fail@plt+0x3b4>
   15ba8:	b	15af4 <__assert_fail@plt+0x49c8>
   15bac:	nop			; (mov r0, r0)
   15bb0:	cmneq	sp, r8, ror sp
   15bb4:	andeq	r0, r0, r0
   15bb8:	andeq	r6, r2, r0, ror r7
   15bbc:	andeq	r6, r2, r0, ror #21
   15bc0:	andeq	r9, r2, ip, lsr r8
   15bc4:	muleq	r2, r8, r9
   15bc8:	ldrd	r0, [sp, #48]	; 0x30
   15bcc:	mov	r1, #0
   15bd0:	umull	r6, r7, r0, r3
   15bd4:	umull	r8, r9, r0, r2
   15bd8:	strd	r6, [sp, #64]	; 0x40
   15bdc:	mov	r7, #0
   15be0:	strd	r8, [sp, #128]	; 0x80
   15be4:	mul	lr, r0, r7
   15be8:	ldr	r9, [sp, #68]	; 0x44
   15bec:	mla	lr, r2, r1, lr
   15bf0:	mla	r1, r3, r1, r9
   15bf4:	ldr	r6, [sp, #132]	; 0x84
   15bf8:	str	r1, [sp, #68]	; 0x44
   15bfc:	umull	r0, r1, r2, ip
   15c00:	add	lr, lr, r6
   15c04:	mla	r1, ip, r7, r1
   15c08:	ldrd	r6, [sp, #64]	; 0x40
   15c0c:	str	lr, [sp, #136]	; 0x88
   15c10:	mov	lr, #0
   15c14:	adds	r6, r6, r0
   15c18:	adc	r7, r7, r1
   15c1c:	str	lr, [sp, #140]	; 0x8c
   15c20:	mov	r8, r6
   15c24:	mov	r9, r7
   15c28:	ldrd	r6, [sp, #136]	; 0x88
   15c2c:	adds	r6, r6, r8
   15c30:	adc	r7, r7, r9
   15c34:	cmp	r1, r7
   15c38:	cmpeq	r0, r6
   15c3c:	umull	r0, r1, ip, r3
   15c40:	bls	15c4c <__assert_fail@plt+0x4b20>
   15c44:	adds	r0, r0, #0
   15c48:	adc	r1, r1, #1
   15c4c:	mov	ip, #0
   15c50:	str	r7, [sp, #144]	; 0x90
   15c54:	str	ip, [sp, #148]	; 0x94
   15c58:	ldrd	r6, [sp, #144]	; 0x90
   15c5c:	subs	r6, sl, r6
   15c60:	sbc	r7, fp, r7
   15c64:	subs	r8, r6, r0
   15c68:	sbc	r9, r7, r1
   15c6c:	ldrd	r6, [sp, #88]	; 0x58
   15c70:	mul	r1, r6, r9
   15c74:	umull	sl, fp, r6, r8
   15c78:	mla	r1, r8, r7, r1
   15c7c:	add	fp, r1, fp
   15c80:	b	15aa4 <__assert_fail@plt+0x4978>
   15c84:	ldrd	r0, [sp, #56]	; 0x38
   15c88:	ldrd	r2, [sp, #184]	; 0xb8
   15c8c:	strd	r0, [sp]
   15c90:	ldr	r0, [sp, #244]	; 0xf4
   15c94:	bl	127f8 <__assert_fail@plt+0x16cc>
   15c98:	b	158d0 <__assert_fail@plt+0x47a4>
   15c9c:	mov	r2, r4
   15ca0:	mov	r3, r5
   15ca4:	strd	r2, [sp, #160]	; 0xa0
   15ca8:	b	150f0 <__assert_fail@plt+0x3fc4>
   15cac:	mov	r2, #1
   15cb0:	mov	r3, #0
   15cb4:	mov	r6, #128	; 0x80
   15cb8:	strd	r2, [sp, #104]	; 0x68
   15cbc:	mov	r2, #0
   15cc0:	mov	r3, #0
   15cc4:	mov	r7, #0
   15cc8:	strd	r2, [sp, #96]	; 0x60
   15ccc:	b	14f34 <__assert_fail@plt+0x3e08>
   15cd0:	mov	r1, #1
   15cd4:	ldrd	r2, [sp, #48]	; 0x30
   15cd8:	ldr	r0, [sp, #244]	; 0xf4
   15cdc:	str	r1, [sp]
   15ce0:	bl	114e0 <__assert_fail@plt+0x3b4>
   15ce4:	add	sp, sp, #204	; 0xcc
   15ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cec:	ldrd	r2, [sp, #48]	; 0x30
   15cf0:	ldr	r0, [sp, #244]	; 0xf4
   15cf4:	strd	r2, [sp]
   15cf8:	mov	r2, sl
   15cfc:	mov	r3, fp
   15d00:	bl	127f8 <__assert_fail@plt+0x16cc>
   15d04:	add	sp, sp, #204	; 0xcc
   15d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d0c:	ldr	r3, [pc, #-344]	; 15bbc <__assert_fail@plt+0x4a90>
   15d10:	mov	r2, #476	; 0x1dc
   15d14:	ldr	r1, [pc, #-348]	; 15bc0 <__assert_fail@plt+0x4a94>
   15d18:	ldr	r0, [pc, #-348]	; 15bc4 <__assert_fail@plt+0x4a98>
   15d1c:	bl	1112c <__assert_fail@plt>
   15d20:	ldr	r3, [sp, #240]	; 0xf0
   15d24:	mov	r2, r8
   15d28:	add	r3, r3, #1
   15d2c:	str	r3, [sp]
   15d30:	ldr	r3, [sp, #244]	; 0xf4
   15d34:	mov	r0, sl
   15d38:	str	r3, [sp, #4]
   15d3c:	mov	r1, fp
   15d40:	mov	r3, r9
   15d44:	bl	14ef8 <__assert_fail@plt+0x3dcc>
   15d48:	add	sp, sp, #204	; 0xcc
   15d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d54:	sub	sp, sp, #100	; 0x64
   15d58:	mov	r7, r3
   15d5c:	strd	r0, [sp, #48]	; 0x30
   15d60:	orrs	r1, r0, r1
   15d64:	mov	ip, r0
   15d68:	ldr	r3, [sp, #136]	; 0x88
   15d6c:	moveq	ip, #1
   15d70:	movne	ip, #0
   15d74:	cmp	r7, #0
   15d78:	cmpeq	r2, #1
   15d7c:	mov	r0, r3
   15d80:	mov	r6, r2
   15d84:	str	r3, [sp, #92]	; 0x5c
   15d88:	movhi	ip, #0
   15d8c:	andls	ip, ip, #1
   15d90:	mov	r2, #0
   15d94:	mov	r3, #0
   15d98:	mov	r1, #0
   15d9c:	cmp	ip, #0
   15da0:	strb	r1, [r0, #250]	; 0xfa
   15da4:	strd	r2, [r0, #8]
   15da8:	beq	15db4 <__assert_fail@plt+0x4c88>
   15dac:	add	sp, sp, #100	; 0x64
   15db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15db4:	and	r2, r6, #1
   15db8:	mov	r3, #0
   15dbc:	orrs	r3, r2, r3
   15dc0:	bne	15ecc <__assert_fail@plt+0x4da0>
   15dc4:	orrs	r3, r6, r7
   15dc8:	bne	15e3c <__assert_fail@plt+0x4d10>
   15dcc:	ldrd	r0, [sp, #48]	; 0x30
   15dd0:	mov	r3, #0
   15dd4:	and	r2, r0, #1
   15dd8:	orrs	r3, r2, r3
   15ddc:	bne	166fc <__assert_fail@plt+0x55d0>
   15de0:	mov	r2, r0
   15de4:	mov	r3, r1
   15de8:	b	15df0 <__assert_fail@plt+0x4cc4>
   15dec:	mov	ip, r1
   15df0:	lsrs	r3, r3, #1
   15df4:	rrx	r2, r2
   15df8:	mov	r1, #0
   15dfc:	and	r0, r2, #1
   15e00:	orrs	r1, r0, r1
   15e04:	add	r1, ip, #1
   15e08:	beq	15dec <__assert_fail@plt+0x4cc0>
   15e0c:	add	ip, ip, #65	; 0x41
   15e10:	ldrd	r4, [sp, #48]	; 0x30
   15e14:	rsb	r3, r1, #32
   15e18:	sub	r0, r1, #32
   15e1c:	lsr	r2, r4, r1
   15e20:	orr	r2, r2, r5, lsl r3
   15e24:	lsr	r3, r5, r1
   15e28:	orr	r2, r2, r5, lsr r0
   15e2c:	strd	r6, [sp, #48]	; 0x30
   15e30:	mov	r6, r2
   15e34:	mov	r7, r3
   15e38:	b	15eb8 <__assert_fail@plt+0x4d8c>
   15e3c:	mov	r2, r6
   15e40:	mov	r3, r7
   15e44:	lsrs	r3, r3, #1
   15e48:	rrx	r2, r2
   15e4c:	and	r0, r2, #1
   15e50:	mov	r1, #0
   15e54:	orrs	r1, r0, r1
   15e58:	add	ip, ip, #1
   15e5c:	beq	15e44 <__assert_fail@plt+0x4d18>
   15e60:	ldrd	sl, [sp, #48]	; 0x30
   15e64:	rsb	r3, ip, #64	; 0x40
   15e68:	sub	r2, r3, #32
   15e6c:	lsl	r5, fp, r3
   15e70:	lsr	r8, r6, ip
   15e74:	rsb	r0, ip, #32
   15e78:	orr	r5, r5, sl, lsl r2
   15e7c:	rsb	r2, r3, #32
   15e80:	orr	r8, r8, r7, lsl r0
   15e84:	orr	r5, r5, sl, lsr r2
   15e88:	sub	r1, ip, #32
   15e8c:	lsr	r2, sl, ip
   15e90:	orr	r8, r8, r7, lsr r1
   15e94:	lsl	r4, sl, r3
   15e98:	orr	r2, r2, fp, lsl r0
   15e9c:	lsr	r9, r7, ip
   15ea0:	lsr	r3, fp, ip
   15ea4:	orr	r2, r2, fp, lsr r1
   15ea8:	orr	r6, r4, r8
   15eac:	orr	r7, r5, r9
   15eb0:	str	r2, [sp, #48]	; 0x30
   15eb4:	str	r3, [sp, #52]	; 0x34
   15eb8:	str	ip, [sp]
   15ebc:	mov	r2, #2
   15ec0:	mov	r3, #0
   15ec4:	ldr	r0, [sp, #92]	; 0x5c
   15ec8:	bl	114e0 <__assert_fail@plt+0x3b4>
   15ecc:	ldrd	r2, [sp, #48]	; 0x30
   15ed0:	orrs	r3, r2, r3
   15ed4:	beq	16708 <__assert_fail@plt+0x55dc>
   15ed8:	ldr	r3, [pc, #2160]	; 16750 <__assert_fail@plt+0x5624>
   15edc:	ldr	sl, [pc, #2160]	; 16754 <__assert_fail@plt+0x5628>
   15ee0:	str	r3, [sp, #72]	; 0x48
   15ee4:	mov	r3, #2
   15ee8:	str	r3, [sp, #76]	; 0x4c
   15eec:	ldr	r3, [pc, #2148]	; 16758 <__assert_fail@plt+0x562c>
   15ef0:	mov	r2, #3
   15ef4:	mov	r1, r3
   15ef8:	mov	r3, #0
   15efc:	mov	fp, #0
   15f00:	strd	r2, [sp, #40]	; 0x28
   15f04:	mov	r3, sl
   15f08:	strd	r6, [sp, #80]	; 0x50
   15f0c:	mov	sl, fp
   15f10:	mov	fp, r3
   15f14:	b	15f80 <__assert_fail@plt+0x4e54>
   15f18:	ldrd	r2, [sp, #40]	; 0x28
   15f1c:	ldr	r1, [sp, #76]	; 0x4c
   15f20:	add	sl, sl, #1
   15f24:	adds	r2, r2, r1
   15f28:	adc	r3, r3, #0
   15f2c:	strd	r2, [sp, #40]	; 0x28
   15f30:	ldrd	r2, [sp, #48]	; 0x30
   15f34:	orrs	r8, r2, r3
   15f38:	ldr	r2, [pc, #2076]	; 1675c <__assert_fail@plt+0x5630>
   15f3c:	movne	r3, #1
   15f40:	moveq	r3, #0
   15f44:	cmp	sl, r2
   15f48:	movhi	r3, #0
   15f4c:	andls	r3, r3, #1
   15f50:	cmp	r3, #0
   15f54:	beq	160c8 <__assert_fail@plt+0x4f9c>
   15f58:	ldr	r3, [sp, #88]	; 0x58
   15f5c:	ldr	r2, [pc, #2044]	; 16760 <__assert_fail@plt+0x5634>
   15f60:	add	r1, r3, #16
   15f64:	ldr	r3, [sp, #72]	; 0x48
   15f68:	add	r2, r2, sl
   15f6c:	ldr	fp, [r3, r1]!
   15f70:	ldrb	r2, [r2, #1]
   15f74:	ldr	r3, [r3, #4]
   15f78:	str	r2, [sp, #76]	; 0x4c
   15f7c:	mov	r1, r3
   15f80:	ldrd	r4, [sp, #40]	; 0x28
   15f84:	ldr	r2, [sp, #72]	; 0x48
   15f88:	lsl	r3, sl, #4
   15f8c:	mov	r7, r5
   15f90:	mov	r6, r1
   15f94:	mov	r5, #0
   15f98:	str	r3, [sp, #88]	; 0x58
   15f9c:	add	r3, r2, r3
   15fa0:	str	r3, [sp, #68]	; 0x44
   15fa4:	ldrd	r2, [sp, #80]	; 0x50
   15fa8:	mul	ip, r2, r6
   15fac:	umull	r0, r1, r2, fp
   15fb0:	mla	ip, fp, r3, ip
   15fb4:	strd	r0, [sp, #8]
   15fb8:	add	ip, ip, r1
   15fbc:	str	ip, [sp, #12]
   15fc0:	ldrd	r0, [sp, #8]
   15fc4:	mov	r1, #0
   15fc8:	umull	r8, r9, ip, r4
   15fcc:	umull	r2, r3, r0, r4
   15fd0:	mul	lr, r0, r5
   15fd4:	strd	r2, [sp, #56]	; 0x38
   15fd8:	umull	r2, r3, r0, r7
   15fdc:	mla	lr, r4, r1, lr
   15fe0:	strd	r2, [sp, #16]
   15fe4:	mla	r3, r7, r1, r3
   15fe8:	mla	r9, ip, r5, r9
   15fec:	str	r3, [sp, #20]
   15ff0:	ldr	r3, [sp, #60]	; 0x3c
   15ff4:	add	r3, lr, r3
   15ff8:	str	r3, [sp, #24]
   15ffc:	mov	r3, #0
   16000:	str	r3, [sp, #28]
   16004:	ldrd	r2, [sp, #16]
   16008:	ldrd	r0, [sp, #24]
   1600c:	adds	r2, r2, r8
   16010:	adc	r3, r3, r9
   16014:	adds	r0, r0, r2
   16018:	adc	r1, r1, r3
   1601c:	mov	r3, r1
   16020:	cmp	r9, r3
   16024:	str	r1, [sp, #32]
   16028:	cmpeq	r8, r0
   1602c:	mov	r1, #0
   16030:	str	r1, [sp, #36]	; 0x24
   16034:	umull	r2, r3, ip, r7
   16038:	bls	16044 <__assert_fail@plt+0x4f18>
   1603c:	adds	r2, r2, #0
   16040:	adc	r3, r3, #1
   16044:	ldrd	r0, [sp, #32]
   16048:	adds	r0, r0, r2
   1604c:	adc	r1, r1, r3
   16050:	mov	r2, r0
   16054:	mov	r3, r1
   16058:	ldrd	r0, [sp, #48]	; 0x30
   1605c:	cmp	r3, r1
   16060:	cmpeq	r2, r0
   16064:	bhi	15f18 <__assert_fail@plt+0x4dec>
   16068:	subs	r0, r0, r2
   1606c:	sbc	r1, r1, r3
   16070:	mov	r3, r1
   16074:	ldr	r1, [sp, #68]	; 0x44
   16078:	mov	r2, r0
   1607c:	ldrd	r0, [r1, #8]
   16080:	umull	r8, r9, r2, fp
   16084:	strd	r0, [sp, #16]
   16088:	mul	r1, r2, r6
   1608c:	mla	r1, fp, r3, r1
   16090:	add	r9, r1, r9
   16094:	ldrd	r0, [sp, #16]
   16098:	cmp	r9, r1
   1609c:	cmpeq	r8, r0
   160a0:	bhi	15f18 <__assert_fail@plt+0x4dec>
   160a4:	strd	r8, [sp, #48]	; 0x30
   160a8:	ldrd	r8, [sp, #8]
   160ac:	mov	r3, #1
   160b0:	str	r3, [sp]
   160b4:	ldr	r0, [sp, #92]	; 0x5c
   160b8:	ldrd	r2, [sp, #40]	; 0x28
   160bc:	strd	r8, [sp, #80]	; 0x50
   160c0:	bl	114e0 <__assert_fail@plt+0x3b4>
   160c4:	b	15fa4 <__assert_fail@plt+0x4e78>
   160c8:	ldr	r3, [pc, #1676]	; 1675c <__assert_fail@plt+0x5630>
   160cc:	mov	fp, sl
   160d0:	cmp	sl, r3
   160d4:	ldrd	r6, [sp, #80]	; 0x50
   160d8:	bhi	1665c <__assert_fail@plt+0x5530>
   160dc:	ldr	r3, [pc, #1664]	; 16764 <__assert_fail@plt+0x5638>
   160e0:	ldr	r1, [sp, #72]	; 0x48
   160e4:	add	r3, r3, sl
   160e8:	lsl	r4, sl, #4
   160ec:	ldrb	r3, [r3, #3512]	; 0xdb8
   160f0:	add	r2, r1, r4
   160f4:	ldr	r5, [r1, fp, lsl #4]
   160f8:	str	r3, [sp, #24]
   160fc:	ldr	sl, [r2, #4]
   16100:	ldrd	r2, [r2, #8]
   16104:	strd	r2, [sp, #8]
   16108:	ldr	r9, [pc, #1624]	; 16768 <__assert_fail@plt+0x563c>
   1610c:	ldr	r3, [sp, #72]	; 0x48
   16110:	add	r9, fp, r9
   16114:	str	sl, [sp, #16]
   16118:	str	r8, [sp, #32]
   1611c:	add	r4, r3, r4
   16120:	mov	r8, fp
   16124:	ldrd	sl, [sp, #40]	; 0x28
   16128:	b	162a0 <__assert_fail@plt+0x5174>
   1612c:	ldr	r0, [r4, #20]
   16130:	ldr	r1, [r4, #16]
   16134:	mul	r0, r6, r0
   16138:	umull	r2, r3, r1, r6
   1613c:	mla	r1, r1, r7, r0
   16140:	add	r3, r1, r3
   16144:	ldrd	r0, [r4, #24]
   16148:	cmp	r3, r1
   1614c:	cmpeq	r2, r0
   16150:	bls	165f4 <__assert_fail@plt+0x54c8>
   16154:	ldr	r0, [r4, #36]	; 0x24
   16158:	ldr	r1, [r4, #32]
   1615c:	mul	r0, r6, r0
   16160:	umull	r2, r3, r1, r6
   16164:	mla	r1, r1, r7, r0
   16168:	add	r3, r1, r3
   1616c:	ldrd	r0, [r4, #40]	; 0x28
   16170:	cmp	r1, r3
   16174:	cmpeq	r0, r2
   16178:	bcs	16580 <__assert_fail@plt+0x5454>
   1617c:	ldr	r2, [r4, #52]	; 0x34
   16180:	ldr	r3, [r4, #48]	; 0x30
   16184:	mul	r2, r6, r2
   16188:	umull	r0, r1, r3, r6
   1618c:	mla	r3, r3, r7, r2
   16190:	add	r1, r3, r1
   16194:	ldrd	r2, [r4, #56]	; 0x38
   16198:	cmp	r1, r3
   1619c:	cmpeq	r0, r2
   161a0:	bls	164fc <__assert_fail@plt+0x53d0>
   161a4:	ldr	r2, [r4, #68]	; 0x44
   161a8:	ldr	r3, [r4, #64]	; 0x40
   161ac:	mul	r2, r6, r2
   161b0:	umull	r0, r1, r3, r6
   161b4:	mla	r3, r3, r7, r2
   161b8:	add	r1, r3, r1
   161bc:	ldrd	r2, [r4, #72]	; 0x48
   161c0:	cmp	r1, r3
   161c4:	cmpeq	r0, r2
   161c8:	bls	16484 <__assert_fail@plt+0x5358>
   161cc:	ldr	r2, [r4, #84]	; 0x54
   161d0:	ldr	r3, [r4, #80]	; 0x50
   161d4:	mul	r2, r6, r2
   161d8:	umull	r0, r1, r3, r6
   161dc:	mla	r3, r3, r7, r2
   161e0:	add	r1, r3, r1
   161e4:	ldrd	r2, [r4, #88]	; 0x58
   161e8:	cmp	r1, r3
   161ec:	cmpeq	r0, r2
   161f0:	bls	1640c <__assert_fail@plt+0x52e0>
   161f4:	ldr	r2, [r4, #100]	; 0x64
   161f8:	ldr	r3, [r4, #96]	; 0x60
   161fc:	mul	r2, r6, r2
   16200:	umull	r0, r1, r3, r6
   16204:	mla	r3, r3, r7, r2
   16208:	add	r1, r3, r1
   1620c:	ldrd	r2, [r4, #104]	; 0x68
   16210:	cmp	r3, r1
   16214:	cmpeq	r2, r0
   16218:	bcs	16390 <__assert_fail@plt+0x5264>
   1621c:	ldr	r2, [r4, #116]	; 0x74
   16220:	ldr	r3, [r4, #112]	; 0x70
   16224:	mul	r2, r6, r2
   16228:	umull	r0, r1, r3, r6
   1622c:	mla	r3, r3, r7, r2
   16230:	add	r1, r3, r1
   16234:	ldrd	r2, [r4, #120]	; 0x78
   16238:	cmp	r3, r1
   1623c:	cmpeq	r2, r0
   16240:	bcs	16314 <__assert_fail@plt+0x51e8>
   16244:	ldr	r3, [sp, #24]
   16248:	adds	sl, sl, r3
   1624c:	adc	fp, fp, #0
   16250:	umull	r2, r3, sl, sl
   16254:	mul	r1, sl, fp
   16258:	add	r3, r3, r1, lsl #1
   1625c:	cmp	r3, r7
   16260:	cmpeq	r2, r6
   16264:	bhi	16658 <__assert_fail@plt+0x552c>
   16268:	ldr	r3, [pc, #1260]	; 1675c <__assert_fail@plt+0x5630>
   1626c:	add	r8, r8, #8
   16270:	cmp	r8, r3
   16274:	add	r4, r4, #128	; 0x80
   16278:	add	r9, r9, #8
   1627c:	bhi	16658 <__assert_fail@plt+0x552c>
   16280:	ldr	r3, [r4, #4]
   16284:	ldr	r5, [r4]
   16288:	str	r3, [sp, #16]
   1628c:	ldrd	r2, [r4, #8]
   16290:	strd	r2, [sp, #8]
   16294:	ldr	r3, [pc, #1232]	; 1676c <__assert_fail@plt+0x5640>
   16298:	ldrb	r3, [r8, r3]
   1629c:	str	r3, [sp, #24]
   162a0:	ldr	r3, [sp, #16]
   162a4:	umull	r0, r1, r6, r5
   162a8:	mul	r3, r6, r3
   162ac:	mla	r3, r5, r7, r3
   162b0:	add	r1, r3, r1
   162b4:	ldrd	r2, [sp, #8]
   162b8:	cmp	r1, r3
   162bc:	cmpeq	r0, r2
   162c0:	bhi	1612c <__assert_fail@plt+0x5000>
   162c4:	mov	r6, r0
   162c8:	mov	r7, r1
   162cc:	mov	r3, #1
   162d0:	str	r3, [sp]
   162d4:	mov	r2, sl
   162d8:	mov	r3, fp
   162dc:	ldr	r0, [sp, #92]	; 0x5c
   162e0:	bl	114e0 <__assert_fail@plt+0x3b4>
   162e4:	ldr	r3, [sp, #16]
   162e8:	mul	r1, r6, r3
   162ec:	umull	r2, r3, r6, r5
   162f0:	mla	r1, r5, r7, r1
   162f4:	add	r3, r1, r3
   162f8:	ldrd	r0, [sp, #8]
   162fc:	cmp	r3, r1
   16300:	cmpeq	r2, r0
   16304:	bhi	1612c <__assert_fail@plt+0x5000>
   16308:	mov	r6, r2
   1630c:	mov	r7, r3
   16310:	b	162cc <__assert_fail@plt+0x51a0>
   16314:	mov	r6, r0
   16318:	mov	r7, r1
   1631c:	add	r5, r9, #2
   16320:	sub	r3, r9, #5
   16324:	str	r3, [sp, #8]
   16328:	ldr	ip, [sp, #8]
   1632c:	mov	r2, sl
   16330:	mov	r3, fp
   16334:	ldrb	r0, [ip, #1]!
   16338:	mov	r1, #0
   1633c:	adds	r2, r2, r0
   16340:	adc	r3, r3, r1
   16344:	cmp	ip, r5
   16348:	bne	16334 <__assert_fail@plt+0x5208>
   1634c:	mov	r1, #1
   16350:	str	r1, [sp]
   16354:	ldr	r0, [sp, #92]	; 0x5c
   16358:	bl	114e0 <__assert_fail@plt+0x3b4>
   1635c:	ldr	lr, [r4, #116]	; 0x74
   16360:	ldr	ip, [r4, #112]	; 0x70
   16364:	ldrd	r0, [r4, #120]	; 0x78
   16368:	mul	lr, r6, lr
   1636c:	umull	r2, r3, ip, r6
   16370:	mla	ip, ip, r7, lr
   16374:	add	r3, ip, r3
   16378:	cmp	r3, r1
   1637c:	cmpeq	r2, r0
   16380:	bhi	16244 <__assert_fail@plt+0x5118>
   16384:	mov	r6, r2
   16388:	mov	r7, r3
   1638c:	b	16328 <__assert_fail@plt+0x51fc>
   16390:	mov	r6, r0
   16394:	mov	r7, r1
   16398:	add	r5, r9, #2
   1639c:	sub	r3, r9, #4
   163a0:	str	r3, [sp, #8]
   163a4:	ldr	ip, [sp, #8]
   163a8:	mov	r2, sl
   163ac:	mov	r3, fp
   163b0:	ldrb	r0, [ip], #1
   163b4:	mov	r1, #0
   163b8:	adds	r2, r2, r0
   163bc:	adc	r3, r3, r1
   163c0:	cmp	ip, r5
   163c4:	bne	163b0 <__assert_fail@plt+0x5284>
   163c8:	mov	r1, #1
   163cc:	str	r1, [sp]
   163d0:	ldr	r0, [sp, #92]	; 0x5c
   163d4:	bl	114e0 <__assert_fail@plt+0x3b4>
   163d8:	ldr	lr, [r4, #100]	; 0x64
   163dc:	ldr	ip, [r4, #96]	; 0x60
   163e0:	ldrd	r0, [r4, #104]	; 0x68
   163e4:	mul	lr, r6, lr
   163e8:	umull	r2, r3, ip, r6
   163ec:	mla	ip, ip, r7, lr
   163f0:	add	r3, ip, r3
   163f4:	cmp	r3, r1
   163f8:	cmpeq	r2, r0
   163fc:	bhi	1621c <__assert_fail@plt+0x50f0>
   16400:	mov	r6, r2
   16404:	mov	r7, r3
   16408:	b	163a4 <__assert_fail@plt+0x5278>
   1640c:	sub	r3, r9, #5
   16410:	mov	r6, r0
   16414:	mov	r7, r1
   16418:	mov	r5, r3
   1641c:	mov	ip, r5
   16420:	mov	r2, sl
   16424:	mov	r3, fp
   16428:	ldrb	r0, [ip, #1]!
   1642c:	mov	r1, #0
   16430:	adds	r2, r2, r0
   16434:	adc	r3, r3, r1
   16438:	cmp	r9, ip
   1643c:	bne	16428 <__assert_fail@plt+0x52fc>
   16440:	mov	r1, #1
   16444:	str	r1, [sp]
   16448:	ldr	r0, [sp, #92]	; 0x5c
   1644c:	bl	114e0 <__assert_fail@plt+0x3b4>
   16450:	ldr	lr, [r4, #84]	; 0x54
   16454:	ldr	ip, [r4, #80]	; 0x50
   16458:	ldrd	r0, [r4, #88]	; 0x58
   1645c:	mul	lr, r6, lr
   16460:	umull	r2, r3, ip, r6
   16464:	mla	ip, ip, r7, lr
   16468:	add	r3, ip, r3
   1646c:	cmp	r3, r1
   16470:	cmpeq	r2, r0
   16474:	bhi	161f4 <__assert_fail@plt+0x50c8>
   16478:	mov	r6, r2
   1647c:	mov	r7, r3
   16480:	b	1641c <__assert_fail@plt+0x52f0>
   16484:	sub	r3, r9, #4
   16488:	mov	r6, r0
   1648c:	mov	r7, r1
   16490:	mov	r5, r3
   16494:	mov	ip, r5
   16498:	mov	r2, sl
   1649c:	mov	r3, fp
   164a0:	ldrb	r0, [ip], #1
   164a4:	mov	r1, #0
   164a8:	adds	r2, r2, r0
   164ac:	adc	r3, r3, r1
   164b0:	cmp	r9, ip
   164b4:	bne	164a0 <__assert_fail@plt+0x5374>
   164b8:	mov	r1, #1
   164bc:	str	r1, [sp]
   164c0:	ldr	r0, [sp, #92]	; 0x5c
   164c4:	bl	114e0 <__assert_fail@plt+0x3b4>
   164c8:	ldr	lr, [r4, #68]	; 0x44
   164cc:	ldr	ip, [r4, #64]	; 0x40
   164d0:	ldrd	r0, [r4, #72]	; 0x48
   164d4:	mul	lr, r6, lr
   164d8:	umull	r2, r3, ip, r6
   164dc:	mla	ip, ip, r7, lr
   164e0:	add	r3, ip, r3
   164e4:	cmp	r3, r1
   164e8:	cmpeq	r2, r0
   164ec:	bhi	161cc <__assert_fail@plt+0x50a0>
   164f0:	mov	r6, r2
   164f4:	mov	r7, r3
   164f8:	b	16494 <__assert_fail@plt+0x5368>
   164fc:	mov	r6, r0
   16500:	mov	r7, r1
   16504:	ldrb	r0, [r9, #-4]
   16508:	ldrb	r2, [r9, #-3]
   1650c:	mov	r1, #0
   16510:	mov	r3, #0
   16514:	adds	r2, r2, r0
   16518:	adc	r3, r3, r1
   1651c:	adds	r0, r2, sl
   16520:	adc	r1, r3, fp
   16524:	mov	r3, #1
   16528:	strd	r0, [sp, #8]
   1652c:	ldrb	r0, [r9, #-2]
   16530:	str	r3, [sp]
   16534:	ldrd	r2, [sp, #8]
   16538:	mov	r1, #0
   1653c:	adds	r2, r2, r0
   16540:	adc	r3, r3, r1
   16544:	ldr	r0, [sp, #92]	; 0x5c
   16548:	bl	114e0 <__assert_fail@plt+0x3b4>
   1654c:	ldr	lr, [r4, #52]	; 0x34
   16550:	ldr	ip, [r4, #48]	; 0x30
   16554:	ldrd	r0, [r4, #56]	; 0x38
   16558:	mul	lr, r6, lr
   1655c:	umull	r2, r3, ip, r6
   16560:	mla	ip, ip, r7, lr
   16564:	add	r3, ip, r3
   16568:	cmp	r3, r1
   1656c:	cmpeq	r2, r0
   16570:	bhi	161a4 <__assert_fail@plt+0x5078>
   16574:	mov	r6, r2
   16578:	mov	r7, r3
   1657c:	b	16504 <__assert_fail@plt+0x53d8>
   16580:	ldrb	r6, [r9, #-3]
   16584:	ldrb	r0, [r9, #-4]
   16588:	mov	r7, #0
   1658c:	mov	r1, #0
   16590:	adds	r0, r0, r6
   16594:	adc	r1, r1, r7
   16598:	mov	r6, r2
   1659c:	adds	r2, r0, sl
   165a0:	mov	r7, r3
   165a4:	adc	r3, r1, fp
   165a8:	strd	r2, [sp, #8]
   165ac:	mov	r3, #1
   165b0:	str	r3, [sp]
   165b4:	ldr	r0, [sp, #92]	; 0x5c
   165b8:	ldrd	r2, [sp, #8]
   165bc:	bl	114e0 <__assert_fail@plt+0x3b4>
   165c0:	ldr	lr, [r4, #36]	; 0x24
   165c4:	ldr	ip, [r4, #32]
   165c8:	ldrd	r0, [r4, #40]	; 0x28
   165cc:	mul	lr, r6, lr
   165d0:	umull	r2, r3, ip, r6
   165d4:	mla	ip, ip, r7, lr
   165d8:	add	r3, ip, r3
   165dc:	cmp	r3, r1
   165e0:	cmpeq	r2, r0
   165e4:	bhi	1617c <__assert_fail@plt+0x5050>
   165e8:	mov	r6, r2
   165ec:	mov	r7, r3
   165f0:	b	165ac <__assert_fail@plt+0x5480>
   165f4:	ldrb	r0, [r9, #-4]
   165f8:	mov	r1, #0
   165fc:	mov	r6, r2
   16600:	adds	r2, r0, sl
   16604:	mov	r7, r3
   16608:	adc	r3, r1, fp
   1660c:	strd	r2, [sp, #8]
   16610:	mov	r3, #1
   16614:	str	r3, [sp]
   16618:	ldr	r0, [sp, #92]	; 0x5c
   1661c:	ldrd	r2, [sp, #8]
   16620:	bl	114e0 <__assert_fail@plt+0x3b4>
   16624:	ldr	lr, [r4, #20]
   16628:	ldr	ip, [r4, #16]
   1662c:	ldrd	r0, [r4, #24]
   16630:	mul	lr, r6, lr
   16634:	umull	r2, r3, ip, r6
   16638:	mla	ip, ip, r7, lr
   1663c:	add	r3, ip, r3
   16640:	cmp	r3, r1
   16644:	cmpeq	r2, r0
   16648:	bhi	16154 <__assert_fail@plt+0x5028>
   1664c:	mov	r6, r2
   16650:	mov	r7, r3
   16654:	b	16610 <__assert_fail@plt+0x54e4>
   16658:	ldr	r8, [sp, #32]
   1665c:	cmp	r7, #0
   16660:	cmpeq	r6, #1
   16664:	movls	r3, #1
   16668:	movhi	r3, #0
   1666c:	cmp	r8, #0
   16670:	movne	r8, #0
   16674:	andeq	r8, r3, #1
   16678:	cmp	r8, #0
   1667c:	bne	15dac <__assert_fail@plt+0x4c80>
   16680:	mov	r2, r6
   16684:	mov	r3, r7
   16688:	ldrd	r0, [sp, #48]	; 0x30
   1668c:	bl	17208 <__assert_fail@plt+0x60dc>
   16690:	cmp	r0, #0
   16694:	bne	166e8 <__assert_fail@plt+0x55bc>
   16698:	ldrd	r2, [sp, #48]	; 0x30
   1669c:	orrs	r3, r2, r3
   166a0:	beq	166cc <__assert_fail@plt+0x55a0>
   166a4:	ldr	r3, [sp, #92]	; 0x5c
   166a8:	mov	ip, #1
   166ac:	str	r3, [sp, #4]
   166b0:	mov	r2, r6
   166b4:	mov	r3, r7
   166b8:	ldrd	r0, [sp, #48]	; 0x30
   166bc:	str	ip, [sp]
   166c0:	bl	14ef8 <__assert_fail@plt+0x3dcc>
   166c4:	add	sp, sp, #100	; 0x64
   166c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166cc:	ldr	r3, [sp, #92]	; 0x5c
   166d0:	mov	r0, r6
   166d4:	mov	r1, r7
   166d8:	mov	r2, #1
   166dc:	add	sp, sp, #100	; 0x64
   166e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166e4:	b	1413c <__assert_fail@plt+0x3010>
   166e8:	strd	r6, [sp]
   166ec:	ldrd	r2, [sp, #48]	; 0x30
   166f0:	ldr	r0, [sp, #92]	; 0x5c
   166f4:	bl	127f8 <__assert_fail@plt+0x16cc>
   166f8:	b	15dac <__assert_fail@plt+0x4c80>
   166fc:	mov	r1, ip
   16700:	mov	ip, #64	; 0x40
   16704:	b	15e10 <__assert_fail@plt+0x4ce4>
   16708:	add	r3, pc, #56	; 0x38
   1670c:	ldrd	r2, [r3]
   16710:	mov	fp, #0
   16714:	ldr	r5, [pc, #56]	; 16754 <__assert_fail@plt+0x5628>
   16718:	strd	r2, [sp, #8]
   1671c:	ldr	r3, [pc, #44]	; 16750 <__assert_fail@plt+0x5624>
   16720:	mov	r2, #3
   16724:	str	r3, [sp, #72]	; 0x48
   16728:	mov	r3, #26
   1672c:	str	r3, [sp, #24]
   16730:	mov	r3, #0
   16734:	ldr	sl, [pc, #28]	; 16758 <__assert_fail@plt+0x562c>
   16738:	mov	r8, fp
   1673c:	mov	r4, fp
   16740:	strd	r2, [sp, #40]	; 0x28
   16744:	b	16108 <__assert_fail@plt+0x4fdc>
   16748:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   1674c:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   16750:	strdeq	r6, [r2], -r0
   16754:	bge	feac1208 <stdout@@GLIBC_2.4+0xfea86084>
   16758:	bge	feac1208 <stdout@@GLIBC_2.4+0xfea86084>
   1675c:	muleq	r0, fp, r2
   16760:	muleq	r2, r8, r7
   16764:	andeq	r8, r2, r8, ror #14
   16768:	muleq	r2, sp, r7
   1676c:	andeq	r9, r2, r0, lsr #10
   16770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16774:	mov	r5, r3
   16778:	sub	sp, sp, #516	; 0x204
   1677c:	mov	r3, r2
   16780:	mov	r4, r2
   16784:	orrs	r3, r3, r5
   16788:	moveq	r3, #1
   1678c:	movne	r3, #0
   16790:	strd	r4, [sp, #16]
   16794:	subs	r4, r2, #1
   16798:	sbc	r5, r5, #0
   1679c:	strd	r0, [sp, #24]
   167a0:	subs	r0, r0, r3
   167a4:	sbc	r1, r1, #0
   167a8:	orrs	r3, r4, r5
   167ac:	strd	r4, [sp, #88]	; 0x58
   167b0:	strd	r0, [sp, #64]	; 0x40
   167b4:	beq	1713c <__assert_fail@plt+0x6010>
   167b8:	and	r2, r4, #1
   167bc:	mov	r3, #0
   167c0:	orrs	r3, r2, r3
   167c4:	movne	r2, #0
   167c8:	movne	r3, #64	; 0x40
   167cc:	strne	r2, [sp, #132]	; 0x84
   167d0:	bne	16808 <__assert_fail@plt+0x56dc>
   167d4:	ldrd	r2, [sp, #88]	; 0x58
   167d8:	ldrd	sl, [sp, #32]
   167dc:	mov	r1, #0
   167e0:	lsrs	r3, r3, #1
   167e4:	rrx	r2, r2
   167e8:	and	r4, r2, #1
   167ec:	mov	r5, #0
   167f0:	orrs	r0, r4, r5
   167f4:	add	r1, r1, #1
   167f8:	beq	167e0 <__assert_fail@plt+0x56b4>
   167fc:	rsb	r3, r1, #64	; 0x40
   16800:	str	r1, [sp, #132]	; 0x84
   16804:	strd	sl, [sp, #32]
   16808:	ldrd	r6, [sp, #64]	; 0x40
   1680c:	ldr	ip, [sp, #132]	; 0x84
   16810:	ldr	lr, [sp, #88]	; 0x58
   16814:	sub	r2, r3, #32
   16818:	lsl	r1, r7, r3
   1681c:	ldr	sl, [sp, #92]	; 0x5c
   16820:	lsr	r4, lr, ip
   16824:	orr	r1, r1, r6, lsl r2
   16828:	mov	lr, ip
   1682c:	rsb	r2, r3, #32
   16830:	rsb	ip, ip, #32
   16834:	lsl	r0, r6, r3
   16838:	ldr	r3, [sp, #92]	; 0x5c
   1683c:	orr	r4, r4, sl, lsl ip
   16840:	orr	r1, r1, r6, lsr r2
   16844:	sub	r2, lr, #32
   16848:	ldr	sl, [sp, #92]	; 0x5c
   1684c:	orr	r4, r4, r3, lsr r2
   16850:	lsr	r3, r6, lr
   16854:	lsr	r5, sl, lr
   16858:	orr	r3, r3, r7, lsl ip
   1685c:	add	ip, sp, #160	; 0xa0
   16860:	mov	sl, ip
   16864:	orr	r3, r3, r7, lsr r2
   16868:	orr	r0, r0, r4
   1686c:	orr	r1, r1, r5
   16870:	lsr	r2, r7, lr
   16874:	str	ip, [sp, #152]	; 0x98
   16878:	strd	r0, [sl]
   1687c:	str	r3, [sl, #8]
   16880:	str	r2, [sl, #12]
   16884:	ldrd	r6, [sp, #16]
   16888:	ldr	r1, [pc, #2408]	; 171f8 <__assert_fail@plt+0x60cc>
   1688c:	mov	r5, #0
   16890:	mov	r2, r6
   16894:	mov	r3, r7
   16898:	lsrs	r3, r3, #1
   1689c:	rrx	r2, r2
   168a0:	and	r2, r2, #127	; 0x7f
   168a4:	add	r2, r1, r2
   168a8:	mov	lr, r6
   168ac:	ldrb	r2, [r2, #716]	; 0x2cc
   168b0:	mov	r4, r2
   168b4:	umull	r2, r3, r2, r2
   168b8:	adds	r4, r4, r4
   168bc:	mul	ip, r2, r7
   168c0:	umull	r0, r1, r2, r6
   168c4:	mla	r3, r6, r3, ip
   168c8:	adc	r5, r5, r5
   168cc:	add	r1, r3, r1
   168d0:	subs	r0, r4, r0
   168d4:	sbc	r1, r5, r1
   168d8:	adds	r4, r0, r0
   168dc:	adc	r5, r1, r1
   168e0:	mul	r3, r0, r1
   168e4:	umull	r0, r1, r0, r0
   168e8:	add	r1, r1, r3, lsl #1
   168ec:	mul	ip, r0, r7
   168f0:	umull	r2, r3, r0, r6
   168f4:	mla	r1, r6, r1, ip
   168f8:	subs	r2, r4, r2
   168fc:	add	r3, r1, r3
   16900:	sbc	r3, r5, r3
   16904:	adds	r4, r2, r2
   16908:	adc	r5, r3, r3
   1690c:	mul	r1, r2, r3
   16910:	umull	r2, r3, r2, r2
   16914:	add	r3, r3, r1, lsl #1
   16918:	mul	ip, r2, r7
   1691c:	umull	r0, r1, r2, r6
   16920:	mla	r3, r6, r3, ip
   16924:	subs	r4, r4, r0
   16928:	add	r1, r3, r1
   1692c:	ldrd	r2, [sp, #24]
   16930:	sbc	r5, r5, r1
   16934:	mov	r7, #0
   16938:	cmp	r3, #0
   1693c:	cmpeq	r2, #1
   16940:	strd	r4, [sp, #56]	; 0x38
   16944:	movhi	r0, #64	; 0x40
   16948:	movhi	r1, #0
   1694c:	movhi	r4, #0
   16950:	movhi	r5, #0
   16954:	movhi	r6, #1
   16958:	movls	r0, #128	; 0x80
   1695c:	movls	r1, #0
   16960:	movls	r4, #1
   16964:	movls	r5, #0
   16968:	movls	r6, #0
   1696c:	mov	ip, #0
   16970:	subs	r0, r0, #1
   16974:	sbc	r1, r1, #0
   16978:	mvn	r3, #0
   1697c:	mvn	r2, #0
   16980:	cmp	r1, r3
   16984:	cmpeq	r0, r2
   16988:	beq	16a20 <__assert_fail@plt+0x58f4>
   1698c:	adds	r6, r6, r6
   16990:	adc	r7, r7, r7
   16994:	adds	r2, r4, r4
   16998:	adc	r3, r5, r5
   1699c:	lsr	r8, r5, #31
   169a0:	ldrd	r4, [sp, #24]
   169a4:	mov	r9, #0
   169a8:	orr	r7, r7, r9
   169ac:	cmp	r5, r7
   169b0:	orr	r6, r6, r8
   169b4:	cmpeq	r4, r6
   169b8:	mov	r5, r3
   169bc:	mov	r4, r2
   169c0:	bcc	169e8 <__assert_fail@plt+0x58bc>
   169c4:	ldrd	sl, [sp, #16]
   169c8:	moveq	lr, #1
   169cc:	movne	lr, r9
   169d0:	cmp	fp, r3
   169d4:	cmpeq	sl, r2
   169d8:	movhi	lr, #0
   169dc:	andls	lr, lr, #1
   169e0:	cmp	lr, r9
   169e4:	beq	16970 <__assert_fail@plt+0x5844>
   169e8:	ldrd	r4, [sp, #16]
   169ec:	ldrd	sl, [sp, #24]
   169f0:	cmp	r5, r3
   169f4:	cmpeq	r4, r2
   169f8:	movhi	r4, #1
   169fc:	movls	r4, #0
   16a00:	subs	sl, r6, sl
   16a04:	sbc	fp, r7, fp
   16a08:	subs	r6, sl, r4
   16a0c:	ldrd	r4, [sp, #16]
   16a10:	sbc	r7, fp, ip
   16a14:	subs	r4, r2, r4
   16a18:	sbc	r5, r3, r5
   16a1c:	b	16970 <__assert_fail@plt+0x5844>
   16a20:	adds	r8, r4, r4
   16a24:	adc	r9, r5, r5
   16a28:	adds	r2, r6, r6
   16a2c:	adc	r3, r7, r7
   16a30:	cmp	r5, r9
   16a34:	cmpeq	r4, r8
   16a38:	ldrd	sl, [sp, #24]
   16a3c:	movhi	r1, #1
   16a40:	movls	r1, #0
   16a44:	adds	r2, r2, r1
   16a48:	adc	r3, r3, #0
   16a4c:	cmp	fp, r3
   16a50:	cmpeq	sl, r2
   16a54:	mov	r1, fp
   16a58:	strd	r2, [sp, #184]	; 0xb8
   16a5c:	strd	r6, [sp, #200]	; 0xc8
   16a60:	strd	r4, [sp, #192]	; 0xc0
   16a64:	bcc	16a94 <__assert_fail@plt+0x5968>
   16a68:	ldrd	r6, [sp, #16]
   16a6c:	cmp	r7, r9
   16a70:	cmpeq	r6, r8
   16a74:	movls	r1, #1
   16a78:	movhi	r1, #0
   16a7c:	cmp	fp, r3
   16a80:	cmpeq	sl, r2
   16a84:	movne	r1, #0
   16a88:	andeq	r1, r1, #1
   16a8c:	cmp	r1, #0
   16a90:	beq	171e0 <__assert_fail@plt+0x60b4>
   16a94:	ldrd	r0, [sp, #24]
   16a98:	ldrd	r4, [sp, #16]
   16a9c:	subs	r0, r2, r0
   16aa0:	sbc	r1, r3, r1
   16aa4:	mov	r2, r0
   16aa8:	subs	r0, r8, r4
   16aac:	mov	r3, r1
   16ab0:	sbc	r1, r9, r5
   16ab4:	cmp	r5, r9
   16ab8:	cmpeq	r4, r8
   16abc:	movhi	ip, #1
   16ac0:	movls	ip, #0
   16ac4:	subs	r2, r2, ip
   16ac8:	sbc	r3, r3, #0
   16acc:	strd	r0, [sp, #176]	; 0xb0
   16ad0:	strd	r2, [sp, #184]	; 0xb8
   16ad4:	add	r3, sp, #192	; 0xc0
   16ad8:	str	r3, [sp, #12]
   16adc:	ldr	r3, [sp, #132]	; 0x84
   16ae0:	ldrd	r4, [sp, #16]
   16ae4:	str	r3, [sp, #8]
   16ae8:	ldr	r3, [sp, #152]	; 0x98
   16aec:	ldrd	r6, [sp, #24]
   16af0:	str	r3, [sp, #4]
   16af4:	add	r3, sp, #176	; 0xb0
   16af8:	str	r3, [sp]
   16afc:	add	r0, sp, #208	; 0xd0
   16b00:	ldrd	r2, [sp, #56]	; 0x38
   16b04:	strd	r4, [sp, #208]	; 0xd0
   16b08:	strd	r6, [sp, #216]	; 0xd8
   16b0c:	bl	121d4 <__assert_fail@plt+0x10a8>
   16b10:	subs	r3, r0, #0
   16b14:	str	r3, [sp, #156]	; 0x9c
   16b18:	beq	16fd4 <__assert_fail@plt+0x5ea8>
   16b1c:	ldrd	r8, [sp, #64]	; 0x40
   16b20:	ldrd	r6, [sp, #88]	; 0x58
   16b24:	add	r3, sp, #256	; 0x100
   16b28:	mov	r0, r8
   16b2c:	mov	r2, r6
   16b30:	mov	r1, r9
   16b34:	str	r3, [sp]
   16b38:	mov	r3, r7
   16b3c:	bl	15d50 <__assert_fail@plt+0x4c24>
   16b40:	ldr	r1, [pc, #1716]	; 171fc <__assert_fail@plt+0x60d0>
   16b44:	mov	r0, r6
   16b48:	str	r1, [sp, #128]	; 0x80
   16b4c:	mov	r1, r7
   16b50:	mov	r2, #0
   16b54:	lsl	r3, r8, #31
   16b58:	lsrs	r1, r1, #1
   16b5c:	rrx	r0, r0
   16b60:	orr	r6, r2, r0
   16b64:	orr	r7, r3, r1
   16b68:	str	r2, [sp, #44]	; 0x2c
   16b6c:	mov	r3, r9
   16b70:	mov	r2, r8
   16b74:	lsrs	r3, r3, #1
   16b78:	rrx	r2, r2
   16b7c:	ldrd	sl, [sp, #32]
   16b80:	strd	r2, [sp, #120]	; 0x78
   16b84:	mov	r8, r4
   16b88:	mov	r2, #2
   16b8c:	mov	r3, #0
   16b90:	mov	r9, r5
   16b94:	strd	r6, [sp, #112]	; 0x70
   16b98:	strd	r2, [sp, #104]	; 0x68
   16b9c:	add	r3, sp, #264	; 0x108
   16ba0:	ldrd	r2, [r3]
   16ba4:	orrs	r3, r2, r3
   16ba8:	bne	16fe0 <__assert_fail@plt+0x5eb4>
   16bac:	ldrb	r3, [sp, #506]	; 0x1fa
   16bb0:	cmp	r3, #0
   16bb4:	beq	16fd4 <__assert_fail@plt+0x5ea8>
   16bb8:	add	r3, sp, #264	; 0x108
   16bbc:	mov	r2, #1
   16bc0:	strd	r8, [sp, #136]	; 0x88
   16bc4:	str	r3, [sp, #32]
   16bc8:	strd	sl, [sp, #144]	; 0x90
   16bcc:	str	r2, [sp, #16]
   16bd0:	ldr	r1, [sp, #32]
   16bd4:	ldrd	r2, [r1, #8]!
   16bd8:	cmp	r3, #0
   16bdc:	cmpeq	r2, #2
   16be0:	str	r1, [sp, #32]
   16be4:	beq	16f20 <__assert_fail@plt+0x5df4>
   16be8:	lsrs	r1, r3, #1
   16bec:	rrx	r0, r2
   16bf0:	ldr	ip, [pc, #1536]	; 171f8 <__assert_fail@plt+0x60cc>
   16bf4:	and	r0, r0, #127	; 0x7f
   16bf8:	add	r0, ip, r0
   16bfc:	mov	r7, #0
   16c00:	ldrb	r0, [r0, #716]	; 0x2cc
   16c04:	mov	r6, r0
   16c08:	umull	r0, r1, r0, r0
   16c0c:	adds	r6, r6, r6
   16c10:	mul	ip, r0, r3
   16c14:	umull	r4, r5, r0, r2
   16c18:	mla	r1, r2, r1, ip
   16c1c:	adc	r7, r7, r7
   16c20:	add	r5, r1, r5
   16c24:	subs	r4, r6, r4
   16c28:	sbc	r5, r7, r5
   16c2c:	adds	r6, r4, r4
   16c30:	adc	r7, r5, r5
   16c34:	mul	r1, r4, r5
   16c38:	umull	r4, r5, r4, r4
   16c3c:	add	r5, r5, r1, lsl #1
   16c40:	mul	ip, r4, r3
   16c44:	umull	r0, r1, r4, r2
   16c48:	mla	ip, r2, r5, ip
   16c4c:	subs	r0, r6, r0
   16c50:	add	r1, ip, r1
   16c54:	sbc	r1, r7, r1
   16c58:	adds	r6, r0, r0
   16c5c:	adc	r7, r1, r1
   16c60:	mul	ip, r0, r1
   16c64:	umull	r0, r1, r0, r0
   16c68:	add	r1, r1, ip, lsl #1
   16c6c:	mul	ip, r0, r3
   16c70:	umull	r4, r5, r0, r2
   16c74:	mla	r1, r2, r1, ip
   16c78:	subs	r4, r6, r4
   16c7c:	add	r5, r1, r5
   16c80:	ldrd	r0, [sp, #64]	; 0x40
   16c84:	sbc	r5, r7, r5
   16c88:	cmp	r1, r3
   16c8c:	cmpeq	r0, r2
   16c90:	ldrd	r0, [sp, #88]	; 0x58
   16c94:	mul	ip, r0, r5
   16c98:	umull	r6, r7, r0, r4
   16c9c:	mla	ip, r4, r1, ip
   16ca0:	add	ip, ip, r7
   16ca4:	mov	r7, ip
   16ca8:	bcc	16dc4 <__assert_fail@plt+0x5c98>
   16cac:	umull	sl, fp, r3, r6
   16cb0:	mov	r8, r2
   16cb4:	strd	sl, [sp, #48]	; 0x30
   16cb8:	mov	r9, #0
   16cbc:	umull	sl, fp, r6, r8
   16cc0:	mul	r2, r6, r9
   16cc4:	mov	r1, #0
   16cc8:	ldr	lr, [sp, #52]	; 0x34
   16ccc:	mla	r2, r8, r1, r2
   16cd0:	strd	sl, [sp, #96]	; 0x60
   16cd4:	mla	r1, r3, r1, lr
   16cd8:	umull	sl, fp, ip, r3
   16cdc:	ldr	r3, [sp, #100]	; 0x64
   16ce0:	str	r1, [sp, #52]	; 0x34
   16ce4:	add	r3, r2, r3
   16ce8:	umull	r0, r1, ip, r8
   16cec:	str	r3, [sp, #72]	; 0x48
   16cf0:	ldr	r3, [sp, #44]	; 0x2c
   16cf4:	mla	r1, ip, r9, r1
   16cf8:	str	r3, [sp, #76]	; 0x4c
   16cfc:	ldrd	r2, [sp, #48]	; 0x30
   16d00:	ldrd	r8, [sp, #72]	; 0x48
   16d04:	adds	r2, r2, r0
   16d08:	adc	r3, r3, r1
   16d0c:	adds	r8, r8, r2
   16d10:	adc	r9, r9, r3
   16d14:	cmp	r1, r9
   16d18:	cmpeq	r0, r8
   16d1c:	mov	r3, r9
   16d20:	bls	16d2c <__assert_fail@plt+0x5c00>
   16d24:	adds	sl, sl, #0
   16d28:	adc	fp, fp, #1
   16d2c:	str	r3, [sp, #80]	; 0x50
   16d30:	mov	r3, #0
   16d34:	str	r3, [sp, #84]	; 0x54
   16d38:	ldrd	r0, [sp, #80]	; 0x50
   16d3c:	ldrd	r2, [sp, #64]	; 0x40
   16d40:	strd	r6, [sp, #224]	; 0xe0
   16d44:	subs	r2, r2, r0
   16d48:	sbc	r3, r3, r1
   16d4c:	subs	r0, r2, sl
   16d50:	sbc	r1, r3, fp
   16d54:	mul	ip, r0, r5
   16d58:	mov	r3, r1
   16d5c:	umull	r0, r1, r0, r4
   16d60:	mla	r4, r4, r3, ip
   16d64:	add	r1, r4, r1
   16d68:	strd	r0, [sp, #232]	; 0xe8
   16d6c:	add	r3, sp, #192	; 0xc0
   16d70:	str	r3, [sp, #8]
   16d74:	ldrd	r2, [sp, #56]	; 0x38
   16d78:	add	r1, sp, #176	; 0xb0
   16d7c:	add	r0, sp, #248	; 0xf8
   16d80:	strd	r2, [sp]
   16d84:	add	r3, sp, #208	; 0xd0
   16d88:	add	r2, sp, #224	; 0xe0
   16d8c:	bl	12014 <__assert_fail@plt+0xee8>
   16d90:	ldrd	r2, [sp, #192]	; 0xc0
   16d94:	cmp	r1, r3
   16d98:	cmpeq	r0, r2
   16d9c:	strd	r0, [sp, #240]	; 0xf0
   16da0:	beq	16dd8 <__assert_fail@plt+0x5cac>
   16da4:	ldrb	r3, [sp, #506]	; 0x1fa
   16da8:	ldr	r2, [sp, #16]
   16dac:	cmp	r3, r2
   16db0:	bls	16fd4 <__assert_fail@plt+0x5ea8>
   16db4:	ldr	r3, [sp, #16]
   16db8:	add	r3, r3, #1
   16dbc:	str	r3, [sp, #16]
   16dc0:	b	16bd0 <__assert_fail@plt+0x5aa4>
   16dc4:	mov	r3, #0
   16dc8:	strd	r6, [sp, #224]	; 0xe0
   16dcc:	str	r3, [sp, #232]	; 0xe8
   16dd0:	str	r3, [sp, #236]	; 0xec
   16dd4:	b	16d6c <__assert_fail@plt+0x5c40>
   16dd8:	ldrd	r0, [sp, #248]	; 0xf8
   16ddc:	ldrd	r2, [sp, #200]	; 0xc8
   16de0:	ldrb	lr, [sp, #506]	; 0x1fa
   16de4:	ldr	r4, [sp, #16]
   16de8:	cmp	r1, r3
   16dec:	cmpeq	r0, r2
   16df0:	movne	ip, #1
   16df4:	moveq	ip, #0
   16df8:	cmp	lr, r4
   16dfc:	bls	16fc4 <__assert_fail@plt+0x5e98>
   16e00:	cmp	r1, r3
   16e04:	ldr	r3, [sp, #16]
   16e08:	cmpeq	r0, r2
   16e0c:	add	r3, r3, #1
   16e10:	str	r3, [sp, #16]
   16e14:	bne	16bd0 <__assert_fail@plt+0x5aa4>
   16e18:	ldrd	r8, [sp, #136]	; 0x88
   16e1c:	ldrd	sl, [sp, #144]	; 0x90
   16e20:	ldr	r1, [sp, #128]	; 0x80
   16e24:	mov	r3, #0
   16e28:	ldrb	r2, [r1, #1]!
   16e2c:	str	r1, [sp, #128]	; 0x80
   16e30:	ldrd	r0, [sp, #104]	; 0x68
   16e34:	adds	r0, r0, r2
   16e38:	adc	r1, r1, r3
   16e3c:	ldrd	r2, [sp, #24]
   16e40:	strd	r0, [sp, #104]	; 0x68
   16e44:	cmp	r3, r1
   16e48:	cmpeq	r2, r0
   16e4c:	bls	16fa8 <__assert_fail@plt+0x5e7c>
   16e50:	mov	r4, #0
   16e54:	mov	r5, r4
   16e58:	mov	r2, r0
   16e5c:	mov	r3, r1
   16e60:	mov	r6, #64	; 0x40
   16e64:	mov	r7, #0
   16e68:	strd	r8, [sp, #16]
   16e6c:	subs	r6, r6, #1
   16e70:	sbc	r7, r7, #0
   16e74:	mvn	r1, #0
   16e78:	mvn	r0, #0
   16e7c:	cmp	r7, r1
   16e80:	cmpeq	r6, r0
   16e84:	beq	16f34 <__assert_fail@plt+0x5e08>
   16e88:	adds	r2, r2, r2
   16e8c:	adc	r3, r3, r3
   16e90:	adds	r0, r4, r4
   16e94:	adc	r1, r5, r5
   16e98:	lsr	sl, r5, #31
   16e9c:	ldrd	r4, [sp, #24]
   16ea0:	mov	fp, #0
   16ea4:	orr	r3, r3, fp
   16ea8:	cmp	r5, r3
   16eac:	orr	r2, r2, sl
   16eb0:	cmpeq	r4, r2
   16eb4:	mov	r5, r1
   16eb8:	mov	r4, r0
   16ebc:	bcc	16ee4 <__assert_fail@plt+0x5db8>
   16ec0:	ldrd	r8, [sp, #16]
   16ec4:	moveq	ip, #1
   16ec8:	movne	ip, fp
   16ecc:	cmp	r9, r1
   16ed0:	cmpeq	r8, r0
   16ed4:	movhi	ip, #0
   16ed8:	andls	ip, ip, #1
   16edc:	cmp	ip, fp
   16ee0:	beq	16e6c <__assert_fail@plt+0x5d40>
   16ee4:	ldrd	r4, [sp, #16]
   16ee8:	ldrd	r8, [sp, #24]
   16eec:	cmp	r5, r1
   16ef0:	cmpeq	r4, r0
   16ef4:	movhi	r4, #1
   16ef8:	movls	r4, #0
   16efc:	ldr	r5, [sp, #44]	; 0x2c
   16f00:	subs	r8, r2, r8
   16f04:	sbc	r9, r3, r9
   16f08:	subs	r2, r8, r4
   16f0c:	sbc	r3, r9, r5
   16f10:	ldrd	r4, [sp, #16]
   16f14:	subs	r4, r0, r4
   16f18:	sbc	r5, r1, r5
   16f1c:	b	16e6c <__assert_fail@plt+0x5d40>
   16f20:	ldrd	r2, [sp, #112]	; 0x70
   16f24:	strd	r2, [sp, #224]	; 0xe0
   16f28:	ldrd	r2, [sp, #120]	; 0x78
   16f2c:	strd	r2, [sp, #232]	; 0xe8
   16f30:	b	16d6c <__assert_fail@plt+0x5c40>
   16f34:	add	r1, sp, #192	; 0xc0
   16f38:	str	r1, [sp, #12]
   16f3c:	ldr	r1, [sp, #132]	; 0x84
   16f40:	strd	r2, [sp, #184]	; 0xb8
   16f44:	str	r1, [sp, #8]
   16f48:	ldr	r1, [sp, #152]	; 0x98
   16f4c:	add	r0, sp, #208	; 0xd0
   16f50:	str	r1, [sp, #4]
   16f54:	add	r1, sp, #176	; 0xb0
   16f58:	str	r1, [sp]
   16f5c:	ldrd	r2, [sp, #56]	; 0x38
   16f60:	strd	r4, [sp, #176]	; 0xb0
   16f64:	bl	121d4 <__assert_fail@plt+0x10a8>
   16f68:	ldrd	r8, [sp, #16]
   16f6c:	cmp	r0, #0
   16f70:	beq	171d0 <__assert_fail@plt+0x60a4>
   16f74:	ldr	r3, [pc, #644]	; 17200 <__assert_fail@plt+0x60d4>
   16f78:	ldr	r2, [sp, #128]	; 0x80
   16f7c:	cmp	r3, r2
   16f80:	bne	16b9c <__assert_fail@plt+0x5a70>
   16f84:	mov	r2, #5
   16f88:	ldr	r1, [pc, #628]	; 17204 <__assert_fail@plt+0x60d8>
   16f8c:	mov	r0, #0
   16f90:	bl	10f04 <dcgettext@plt>
   16f94:	mov	r1, #0
   16f98:	mov	r2, r0
   16f9c:	mov	r0, r1
   16fa0:	bl	10f94 <error@plt>
   16fa4:	bl	11120 <abort@plt>
   16fa8:	mov	r2, #0
   16fac:	mov	r3, r2
   16fb0:	ldrd	r4, [sp, #104]	; 0x68
   16fb4:	mov	r6, #128	; 0x80
   16fb8:	mov	r7, #0
   16fbc:	strd	r8, [sp, #16]
   16fc0:	b	16e6c <__assert_fail@plt+0x5d40>
   16fc4:	ldrd	r8, [sp, #136]	; 0x88
   16fc8:	ldrd	sl, [sp, #144]	; 0x90
   16fcc:	cmp	ip, #0
   16fd0:	beq	16e20 <__assert_fail@plt+0x5cf4>
   16fd4:	ldr	r0, [sp, #156]	; 0x9c
   16fd8:	add	sp, sp, #516	; 0x204
   16fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fe0:	add	r3, sp, #256	; 0x100
   16fe4:	ldr	r1, [pc, #524]	; 171f8 <__assert_fail@plt+0x60cc>
   16fe8:	ldrd	r6, [r3]
   16fec:	add	r3, sp, #192	; 0xc0
   16ff0:	str	r3, [sp, #8]
   16ff4:	ldrd	r2, [sp, #56]	; 0x38
   16ff8:	mov	r5, #0
   16ffc:	strd	r2, [sp]
   17000:	lsrs	r3, r7, #1
   17004:	rrx	r2, r6
   17008:	and	r2, r2, #127	; 0x7f
   1700c:	add	r2, r1, r2
   17010:	mov	r3, #0
   17014:	ldrb	r0, [r2, #716]	; 0x2cc
   17018:	str	r3, [sp, #232]	; 0xe8
   1701c:	str	r3, [sp, #236]	; 0xec
   17020:	mov	r4, r0
   17024:	umull	r0, r1, r0, r0
   17028:	add	r3, sp, #208	; 0xd0
   1702c:	strd	r0, [sp, #16]
   17030:	adds	r0, r4, r4
   17034:	adc	r1, r5, r5
   17038:	ldrd	r4, [sp, #16]
   1703c:	ldr	ip, [sp, #20]
   17040:	mul	r2, r4, r7
   17044:	umull	r4, r5, r4, r6
   17048:	mla	r2, r6, ip, r2
   1704c:	subs	r0, r0, r4
   17050:	add	r5, r2, r5
   17054:	sbc	r1, r1, r5
   17058:	adds	r4, r0, r0
   1705c:	adc	r5, r1, r1
   17060:	mul	r2, r0, r1
   17064:	umull	r0, r1, r0, r0
   17068:	strd	r4, [sp, #16]
   1706c:	add	r1, r1, r2, lsl #1
   17070:	mul	r2, r0, r7
   17074:	umull	r4, r5, r0, r6
   17078:	mla	r2, r6, r1, r2
   1707c:	ldrd	r0, [sp, #16]
   17080:	add	r5, r2, r5
   17084:	subs	r0, r0, r4
   17088:	sbc	r1, r1, r5
   1708c:	adds	r4, r0, r0
   17090:	adc	r5, r1, r1
   17094:	mul	r2, r0, r1
   17098:	umull	r0, r1, r0, r0
   1709c:	strd	r4, [sp, #16]
   170a0:	add	r1, r1, r2, lsl #1
   170a4:	mul	r2, r0, r7
   170a8:	umull	r4, r5, r0, r6
   170ac:	mla	r6, r6, r1, r2
   170b0:	ldrd	r0, [sp, #16]
   170b4:	add	r5, r6, r5
   170b8:	ldrd	r6, [sp, #88]	; 0x58
   170bc:	subs	r0, r0, r4
   170c0:	mov	r4, r0
   170c4:	sbc	r1, r1, r5
   170c8:	ldr	r0, [sp, #88]	; 0x58
   170cc:	mul	ip, r4, r7
   170d0:	mov	r5, r1
   170d4:	umull	r6, r7, r4, r6
   170d8:	mla	ip, r0, r5, ip
   170dc:	add	r2, sp, #224	; 0xe0
   170e0:	add	r7, ip, r7
   170e4:	add	r1, sp, #176	; 0xb0
   170e8:	add	r0, sp, #248	; 0xf8
   170ec:	strd	r6, [sp, #224]	; 0xe0
   170f0:	bl	12014 <__assert_fail@plt+0xee8>
   170f4:	ldrd	r2, [sp, #192]	; 0xc0
   170f8:	cmp	r1, r3
   170fc:	cmpeq	r0, r2
   17100:	strd	r0, [sp, #240]	; 0xf0
   17104:	bne	16bac <__assert_fail@plt+0x5a80>
   17108:	ldrd	r0, [sp, #248]	; 0xf8
   1710c:	ldrd	r2, [sp, #200]	; 0xc8
   17110:	ldrb	lr, [sp, #506]	; 0x1fa
   17114:	cmp	r1, r3
   17118:	cmpeq	r0, r2
   1711c:	movne	ip, #1
   17120:	moveq	ip, #0
   17124:	cmp	lr, #0
   17128:	beq	16fcc <__assert_fail@plt+0x5ea0>
   1712c:	cmp	r1, r3
   17130:	cmpeq	r0, r2
   17134:	bne	16bb8 <__assert_fail@plt+0x5a8c>
   17138:	b	16e20 <__assert_fail@plt+0x5cf4>
   1713c:	ldrd	r0, [sp, #64]	; 0x40
   17140:	mov	r3, #0
   17144:	and	r2, r0, #1
   17148:	orrs	r3, r2, r3
   1714c:	bne	171e8 <__assert_fail@plt+0x60bc>
   17150:	mov	r2, r0
   17154:	mov	r3, r1
   17158:	mov	ip, #0
   1715c:	ldrd	sl, [sp, #32]
   17160:	b	17168 <__assert_fail@plt+0x603c>
   17164:	mov	ip, r1
   17168:	lsrs	r3, r3, #1
   1716c:	rrx	r2, r2
   17170:	mov	r1, #0
   17174:	and	r0, r2, #1
   17178:	orrs	r1, r0, r1
   1717c:	add	r1, ip, #1
   17180:	beq	17164 <__assert_fail@plt+0x6038>
   17184:	add	r3, ip, #65	; 0x41
   17188:	strd	sl, [sp, #32]
   1718c:	str	r3, [sp, #132]	; 0x84
   17190:	ldrd	r4, [sp, #64]	; 0x40
   17194:	rsb	r3, r1, #32
   17198:	mov	r2, #0
   1719c:	lsr	r0, r4, r1
   171a0:	orr	r0, r0, r5, lsl r3
   171a4:	sub	r3, r1, #32
   171a8:	lsr	r1, r5, r1
   171ac:	orr	r0, r0, r5, lsr r3
   171b0:	add	r3, sp, #160	; 0xa0
   171b4:	mov	ip, r3
   171b8:	str	r3, [sp, #152]	; 0x98
   171bc:	mov	r3, #0
   171c0:	str	r0, [sp, #160]	; 0xa0
   171c4:	str	r1, [ip, #4]
   171c8:	strd	r2, [ip, #8]
   171cc:	b	16884 <__assert_fail@plt+0x5758>
   171d0:	str	r0, [sp, #156]	; 0x9c
   171d4:	ldr	r0, [sp, #156]	; 0x9c
   171d8:	add	sp, sp, #516	; 0x204
   171dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171e0:	strd	r8, [sp, #176]	; 0xb0
   171e4:	b	16ad4 <__assert_fail@plt+0x59a8>
   171e8:	mov	r3, #64	; 0x40
   171ec:	str	r3, [sp, #132]	; 0x84
   171f0:	mov	r1, #0
   171f4:	b	17190 <__assert_fail@plt+0x6064>
   171f8:	andeq	r6, r2, r0, ror r7
   171fc:	muleq	r2, r7, r7
   17200:	andeq	r6, r2, r3, lsr sl
   17204:	andeq	r9, r2, r0, lsl #18
   17208:	orrs	ip, r0, r1
   1720c:	bne	17248 <__assert_fail@plt+0x611c>
   17210:	cmp	r3, #0
   17214:	cmpeq	r2, #1
   17218:	push	{r4, r5}
   1721c:	mov	r4, r2
   17220:	mov	r5, r3
   17224:	bls	1724c <__assert_fail@plt+0x6120>
   17228:	add	r3, pc, #56	; 0x38
   1722c:	ldrd	r2, [r3]
   17230:	cmp	r5, r3
   17234:	cmpeq	r4, r2
   17238:	movls	r0, #1
   1723c:	bhi	17254 <__assert_fail@plt+0x6128>
   17240:	pop	{r4, r5}
   17244:	bx	lr
   17248:	b	16770 <__assert_fail@plt+0x5644>
   1724c:	mov	r0, #0
   17250:	b	17240 <__assert_fail@plt+0x6114>
   17254:	mov	r0, r4
   17258:	mov	r1, r5
   1725c:	pop	{r4, r5}
   17260:	b	13ba0 <__assert_fail@plt+0x2a74>
   17264:	nop			; (mov r0, r0)
   17268:	cmneq	sp, r8, ror sp
   1726c:	andeq	r0, r0, r0
   17270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17274:	mov	r2, r0
   17278:	ldrb	r3, [r0]
   1727c:	sub	sp, sp, #292	; 0x124
   17280:	mov	r4, r0
   17284:	cmp	r3, #32
   17288:	bne	17298 <__assert_fail@plt+0x616c>
   1728c:	ldrb	r3, [r2, #1]!
   17290:	cmp	r3, #32
   17294:	beq	1728c <__assert_fail@plt+0x6160>
   17298:	cmp	r3, #43	; 0x2b
   1729c:	addeq	r2, r2, #1
   172a0:	mov	r3, r2
   172a4:	mov	r1, #4
   172a8:	mov	r0, #0
   172ac:	str	r2, [sp, #8]
   172b0:	ldrb	r6, [r3], #1
   172b4:	cmp	r6, #0
   172b8:	sub	r2, r6, #48	; 0x30
   172bc:	beq	17308 <__assert_fail@plt+0x61dc>
   172c0:	cmp	r2, #9
   172c4:	mov	r1, r0
   172c8:	bls	172b0 <__assert_fail@plt+0x6184>
   172cc:	mov	r2, #5
   172d0:	ldr	r1, [pc, #1160]	; 17760 <__assert_fail@plt+0x6634>
   172d4:	mov	r0, #0
   172d8:	bl	10f04 <dcgettext@plt>
   172dc:	mov	r5, r0
   172e0:	mov	r0, r4
   172e4:	bl	22aa0 <__assert_fail@plt+0x11974>
   172e8:	mov	r1, #0
   172ec:	mov	r2, r5
   172f0:	mov	r3, r0
   172f4:	mov	r0, r1
   172f8:	bl	10f94 <error@plt>
   172fc:	mov	r0, #0
   17300:	add	sp, sp, #292	; 0x124
   17304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17308:	cmp	r1, #0
   1730c:	bne	17748 <__assert_fail@plt+0x661c>
   17310:	ldr	r3, [sp, #8]
   17314:	mov	r4, #0
   17318:	add	r7, r3, #1
   1731c:	ldrb	r2, [r3]
   17320:	mov	r5, #0
   17324:	cmp	r2, #0
   17328:	beq	1773c <__assert_fail@plt+0x6610>
   1732c:	sub	r2, r2, #48	; 0x30
   17330:	mov	sl, r4
   17334:	mov	fp, r5
   17338:	mov	ip, #10
   1733c:	str	r6, [sp, #12]
   17340:	umull	r8, r9, r4, ip
   17344:	mla	r9, ip, r5, r9
   17348:	adds	r0, r4, r4
   1734c:	adc	r1, r5, r5
   17350:	cmp	r9, r1
   17354:	cmpeq	r8, r0
   17358:	lsr	r3, r5, #31
   1735c:	add	r6, r3, r5, lsr #29
   17360:	umull	r0, r1, sl, ip
   17364:	mov	r3, #0
   17368:	movcc	lr, #1
   1736c:	movcs	lr, #0
   17370:	adds	r4, r8, r2
   17374:	adc	r5, r9, r3
   17378:	cmp	r3, r5
   1737c:	cmpeq	r2, r4
   17380:	add	r3, lr, r6
   17384:	movhi	r2, #1
   17388:	movls	r2, #0
   1738c:	mla	r1, ip, fp, r1
   17390:	add	r2, r2, r3
   17394:	adds	sl, r0, r2
   17398:	mov	r3, #0
   1739c:	adc	fp, r1, r3
   173a0:	cmp	r3, fp
   173a4:	cmpeq	r2, sl
   173a8:	bhi	173d0 <__assert_fail@plt+0x62a4>
   173ac:	ldrb	r2, [r7], #1
   173b0:	cmp	r2, #0
   173b4:	beq	17528 <__assert_fail@plt+0x63fc>
   173b8:	add	r1, pc, #920	; 0x398
   173bc:	ldrd	r0, [r1]
   173c0:	sub	r2, r2, #48	; 0x30
   173c4:	cmp	fp, r1
   173c8:	cmpeq	sl, r0
   173cc:	bls	17340 <__assert_fail@plt+0x6214>
   173d0:	ldr	r6, [sp, #12]
   173d4:	ldr	r3, [pc, #904]	; 17764 <__assert_fail@plt+0x6638>
   173d8:	ldrb	r3, [r3, #8]
   173dc:	cmp	r3, #0
   173e0:	bne	176d8 <__assert_fail@plt+0x65ac>
   173e4:	ldr	r5, [pc, #892]	; 17768 <__assert_fail@plt+0x663c>
   173e8:	ldr	r1, [sp, #8]
   173ec:	mov	r2, #10
   173f0:	add	r0, sp, #20
   173f4:	bl	1fbb0 <__assert_fail@plt+0xea84>
   173f8:	mov	r1, #10
   173fc:	add	r2, sp, #20
   17400:	ldr	r0, [r5]
   17404:	bl	1fbd4 <__assert_fail@plt+0xeaa8>
   17408:	ldr	r0, [r5]
   1740c:	ldr	r3, [r0, #20]
   17410:	ldr	r2, [r0, #24]
   17414:	cmp	r3, r2
   17418:	addcc	r1, r3, #1
   1741c:	movcc	r2, #58	; 0x3a
   17420:	strcc	r1, [r0, #20]
   17424:	strbcc	r2, [r3]
   17428:	bcs	17700 <__assert_fail@plt+0x65d4>
   1742c:	add	r3, sp, #32
   17430:	mov	r1, r3
   17434:	add	r0, sp, #20
   17438:	str	r3, [sp, #8]
   1743c:	bl	12e44 <__assert_fail@plt+0x1d18>
   17440:	ldr	r1, [sp, #40]	; 0x28
   17444:	cmp	r1, #0
   17448:	beq	174e0 <__assert_fail@plt+0x63b4>
   1744c:	ldr	r2, [sp, #36]	; 0x24
   17450:	mov	r7, r6
   17454:	mov	fp, r6
   17458:	mov	sl, #32
   1745c:	mov	r9, #10
   17460:	ldr	r3, [r2, r7]
   17464:	cmp	r3, #0
   17468:	beq	174d0 <__assert_fail@plt+0x63a4>
   1746c:	add	r8, r7, r7, lsl #1
   17470:	mov	r4, r6
   17474:	b	174a0 <__assert_fail@plt+0x6374>
   17478:	ldr	r2, [sp, #32]
   1747c:	mov	r1, r9
   17480:	add	r2, r2, r8
   17484:	ldr	r0, [r5]
   17488:	bl	1fbd4 <__assert_fail@plt+0xeaa8>
   1748c:	ldr	r2, [sp, #36]	; 0x24
   17490:	add	r4, r4, #1
   17494:	ldr	r3, [r2, r7]
   17498:	cmp	r3, r4
   1749c:	bls	174cc <__assert_fail@plt+0x63a0>
   174a0:	ldr	r0, [r5]
   174a4:	ldr	r3, [r0, #20]
   174a8:	ldr	r2, [r0, #24]
   174ac:	add	r1, r3, #1
   174b0:	cmp	r3, r2
   174b4:	strcc	r1, [r0, #20]
   174b8:	strbcc	sl, [r3]
   174bc:	bcc	17478 <__assert_fail@plt+0x634c>
   174c0:	mov	r1, sl
   174c4:	bl	110cc <__overflow@plt>
   174c8:	b	17478 <__assert_fail@plt+0x634c>
   174cc:	ldr	r1, [sp, #40]	; 0x28
   174d0:	add	fp, fp, #1
   174d4:	cmp	r1, fp
   174d8:	add	r7, r7, #4
   174dc:	bhi	17460 <__assert_fail@plt+0x6334>
   174e0:	ldr	r0, [sp, #8]
   174e4:	bl	115d0 <__assert_fail@plt+0x4a4>
   174e8:	add	r0, sp, #20
   174ec:	bl	1a39c <__assert_fail@plt+0x9270>
   174f0:	ldr	r0, [r5]
   174f4:	ldr	r3, [r0, #20]
   174f8:	ldr	r2, [r0, #24]
   174fc:	cmp	r3, r2
   17500:	addcc	r1, r3, #1
   17504:	movcc	r2, #10
   17508:	strcc	r1, [r0, #20]
   1750c:	strbcc	r2, [r3]
   17510:	bcs	176f4 <__assert_fail@plt+0x65c8>
   17514:	ldr	r0, [r5]
   17518:	bl	10f40 <fflush_unlocked@plt>
   1751c:	mov	r0, #1
   17520:	add	sp, sp, #292	; 0x124
   17524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17528:	cmp	sl, #0
   1752c:	sbcs	r3, fp, #0
   17530:	ldr	r6, [sp, #12]
   17534:	blt	173d4 <__assert_fail@plt+0x62a8>
   17538:	ldr	r8, [pc, #548]	; 17764 <__assert_fail@plt+0x6638>
   1753c:	ldrb	r3, [r8, #8]
   17540:	cmp	r3, #0
   17544:	beq	17560 <__assert_fail@plt+0x6434>
   17548:	ldr	r3, [pc, #540]	; 1776c <__assert_fail@plt+0x6640>
   1754c:	mov	r2, #36	; 0x24
   17550:	mov	r1, #1
   17554:	ldr	r3, [r3]
   17558:	ldr	r0, [pc, #528]	; 17770 <__assert_fail@plt+0x6644>
   1755c:	bl	10f58 <fwrite@plt>
   17560:	mov	r2, r4
   17564:	mov	r3, r5
   17568:	mov	r0, sl
   1756c:	mov	r1, fp
   17570:	bl	12420 <__assert_fail@plt+0x12f4>
   17574:	ldr	ip, [r8, #4]
   17578:	add	r3, sp, #32
   1757c:	mov	lr, #58	; 0x3a
   17580:	strb	lr, [ip]
   17584:	mov	r7, r3
   17588:	add	ip, ip, #1
   1758c:	str	r3, [sp, #8]
   17590:	mov	r2, r4
   17594:	str	r7, [sp]
   17598:	mov	r3, r5
   1759c:	mov	r0, sl
   175a0:	mov	r1, fp
   175a4:	str	ip, [r8, #4]
   175a8:	bl	15d50 <__assert_fail@plt+0x4c24>
   175ac:	ldrb	r2, [sp, #282]	; 0x11a
   175b0:	cmp	r2, #0
   175b4:	beq	17620 <__assert_fail@plt+0x64f4>
   175b8:	add	r4, sp, #256	; 0x100
   175bc:	add	r5, sp, #48	; 0x30
   175c0:	mov	fp, r6
   175c4:	mov	sl, #32
   175c8:	mov	r9, #0
   175cc:	ldrb	r3, [r4]
   175d0:	cmp	r3, #0
   175d4:	movne	r7, r6
   175d8:	beq	1760c <__assert_fail@plt+0x64e0>
   175dc:	ldr	r3, [r8, #4]
   175e0:	mov	r2, r9
   175e4:	add	ip, r3, #1
   175e8:	strb	sl, [r3]
   175ec:	ldrd	r0, [r5]
   175f0:	str	ip, [r8, #4]
   175f4:	bl	123b0 <__assert_fail@plt+0x1284>
   175f8:	ldrb	r3, [r4]
   175fc:	add	r7, r7, #1
   17600:	cmp	r7, r3
   17604:	bcc	175dc <__assert_fail@plt+0x64b0>
   17608:	ldrb	r2, [sp, #282]	; 0x11a
   1760c:	add	fp, fp, #1
   17610:	cmp	fp, r2
   17614:	add	r4, r4, #1
   17618:	add	r5, r5, #8
   1761c:	bcc	175cc <__assert_fail@plt+0x64a0>
   17620:	ldr	r3, [sp, #8]
   17624:	ldrd	r2, [r3, #8]
   17628:	orrs	r3, r2, r3
   1762c:	beq	17654 <__assert_fail@plt+0x6528>
   17630:	ldr	r3, [r8, #4]
   17634:	ldr	r1, [sp, #8]
   17638:	mov	r2, #32
   1763c:	add	ip, r3, #1
   17640:	strb	r2, [r3]
   17644:	ldrd	r2, [r1]
   17648:	ldrd	r0, [r1, #8]
   1764c:	str	ip, [r8, #4]
   17650:	bl	12420 <__assert_fail@plt+0x12f4>
   17654:	ldr	r6, [pc, #280]	; 17774 <__assert_fail@plt+0x6648>
   17658:	ldr	r3, [r8, #4]
   1765c:	ldr	r4, [r8]
   17660:	ldr	r0, [r6]
   17664:	add	r5, r3, #1
   17668:	mov	r2, #10
   1766c:	cmn	r0, #1
   17670:	strb	r2, [r3]
   17674:	str	r5, [r8, #4]
   17678:	sub	r7, r5, r4
   1767c:	beq	17714 <__assert_fail@plt+0x65e8>
   17680:	cmp	r0, #0
   17684:	bne	1770c <__assert_fail@plt+0x65e0>
   17688:	cmp	r7, #512	; 0x200
   1768c:	addcs	r4, r4, #512	; 0x200
   17690:	bcs	1769c <__assert_fail@plt+0x6570>
   17694:	b	1751c <__assert_fail@plt+0x63f0>
   17698:	mov	r4, r2
   1769c:	ldrb	r3, [r4, #-1]
   176a0:	sub	r2, r4, #1
   176a4:	cmp	r3, #10
   176a8:	bne	17698 <__assert_fail@plt+0x656c>
   176ac:	str	r4, [r8, #4]
   176b0:	bl	1278c <__assert_fail@plt+0x1660>
   176b4:	ldr	r3, [r8]
   176b8:	sub	r5, r5, r4
   176bc:	mov	r2, r5
   176c0:	mov	r1, r4
   176c4:	mov	r0, r3
   176c8:	bl	10ed4 <memcpy@plt>
   176cc:	add	r5, r0, r5
   176d0:	str	r5, [r8, #4]
   176d4:	b	1751c <__assert_fail@plt+0x63f0>
   176d8:	ldr	r3, [pc, #140]	; 1776c <__assert_fail@plt+0x6640>
   176dc:	mov	r2, #39	; 0x27
   176e0:	mov	r1, #1
   176e4:	ldr	r3, [r3]
   176e8:	ldr	r0, [pc, #136]	; 17778 <__assert_fail@plt+0x664c>
   176ec:	bl	10f58 <fwrite@plt>
   176f0:	b	173e4 <__assert_fail@plt+0x62b8>
   176f4:	mov	r1, #10
   176f8:	bl	110cc <__overflow@plt>
   176fc:	b	17514 <__assert_fail@plt+0x63e8>
   17700:	mov	r1, #58	; 0x3a
   17704:	bl	110cc <__overflow@plt>
   17708:	b	1742c <__assert_fail@plt+0x6300>
   1770c:	bl	1278c <__assert_fail@plt+0x1660>
   17710:	b	1751c <__assert_fail@plt+0x63f0>
   17714:	mov	r0, #0
   17718:	bl	11108 <isatty@plt>
   1771c:	cmp	r0, #0
   17720:	mov	r0, #1
   17724:	bne	17734 <__assert_fail@plt+0x6608>
   17728:	bl	11108 <isatty@plt>
   1772c:	adds	r0, r0, #0
   17730:	movne	r0, #1
   17734:	str	r0, [r6]
   17738:	b	17680 <__assert_fail@plt+0x6554>
   1773c:	mov	sl, r4
   17740:	mov	fp, r5
   17744:	b	17538 <__assert_fail@plt+0x640c>
   17748:	cmp	r1, #1
   1774c:	bne	172cc <__assert_fail@plt+0x61a0>
   17750:	b	173d4 <__assert_fail@plt+0x62a8>
   17754:	nop			; (mov r0, r0)
   17758:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1775c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   17760:	andeq	r9, r2, r8, asr #19
   17764:	andeq	fp, r3, ip, lsl #3
   17768:	andeq	fp, r3, r4, lsl #3
   1776c:	andeq	fp, r3, r8, ror r1
   17770:	andeq	r9, r2, r0, lsr #19
   17774:	andeq	fp, r3, r0, lsl r1
   17778:	andeq	r9, r2, ip, ror #19
   1777c:	subs	r6, r0, #0
   17780:	push	{r7, lr}
   17784:	sub	sp, sp, #56	; 0x38
   17788:	beq	177c4 <__assert_fail@plt+0x6698>
   1778c:	ldr	r3, [pc, #616]	; 179fc <__assert_fail@plt+0x68d0>
   17790:	mov	r2, #5
   17794:	ldr	r1, [pc, #612]	; 17a00 <__assert_fail@plt+0x68d4>
   17798:	mov	r0, #0
   1779c:	ldr	r4, [r3]
   177a0:	bl	10f04 <dcgettext@plt>
   177a4:	ldr	r3, [pc, #600]	; 17a04 <__assert_fail@plt+0x68d8>
   177a8:	mov	r1, #1
   177ac:	ldr	r3, [r3]
   177b0:	mov	r2, r0
   177b4:	mov	r0, r4
   177b8:	bl	11084 <__fprintf_chk@plt>
   177bc:	mov	r0, r6
   177c0:	bl	10ff4 <exit@plt>
   177c4:	mov	r2, #5
   177c8:	ldr	r1, [pc, #568]	; 17a08 <__assert_fail@plt+0x68dc>
   177cc:	bl	10f04 <dcgettext@plt>
   177d0:	ldr	r3, [pc, #556]	; 17a04 <__assert_fail@plt+0x68d8>
   177d4:	ldr	r7, [pc, #560]	; 17a0c <__assert_fail@plt+0x68e0>
   177d8:	ldr	r4, [pc, #560]	; 17a10 <__assert_fail@plt+0x68e4>
   177dc:	ldr	r3, [r3]
   177e0:	mov	r2, r3
   177e4:	mov	r1, r0
   177e8:	mov	r0, #1
   177ec:	bl	11060 <__printf_chk@plt>
   177f0:	mov	r2, #5
   177f4:	ldr	r1, [pc, #536]	; 17a14 <__assert_fail@plt+0x68e8>
   177f8:	mov	r0, r6
   177fc:	bl	10f04 <dcgettext@plt>
   17800:	ldr	r1, [r7]
   17804:	bl	10e5c <fputs_unlocked@plt>
   17808:	mov	r2, #5
   1780c:	ldr	r1, [pc, #516]	; 17a18 <__assert_fail@plt+0x68ec>
   17810:	mov	r0, r6
   17814:	bl	10f04 <dcgettext@plt>
   17818:	ldr	r1, [r7]
   1781c:	bl	10e5c <fputs_unlocked@plt>
   17820:	mov	r2, #5
   17824:	ldr	r1, [pc, #496]	; 17a1c <__assert_fail@plt+0x68f0>
   17828:	mov	r0, r6
   1782c:	bl	10f04 <dcgettext@plt>
   17830:	ldr	r1, [r7]
   17834:	bl	10e5c <fputs_unlocked@plt>
   17838:	ldm	r4!, {r0, r1, r2, r3}
   1783c:	mov	lr, sp
   17840:	stmia	lr!, {r0, r1, r2, r3}
   17844:	ldm	r4!, {r0, r1, r2, r3}
   17848:	ldr	ip, [sp]
   1784c:	stmia	lr!, {r0, r1, r2, r3}
   17850:	cmp	ip, #0
   17854:	ldm	r4!, {r0, r1, r2, r3}
   17858:	stmia	lr!, {r0, r1, r2, r3}
   1785c:	ldm	r4, {r0, r1}
   17860:	moveq	r4, sp
   17864:	stm	lr, {r0, r1}
   17868:	beq	17898 <__assert_fail@plt+0x676c>
   1786c:	ldr	r5, [pc, #428]	; 17a20 <__assert_fail@plt+0x68f4>
   17870:	mov	r4, sp
   17874:	b	17884 <__assert_fail@plt+0x6758>
   17878:	ldr	ip, [r4, #8]!
   1787c:	cmp	ip, #0
   17880:	beq	17898 <__assert_fail@plt+0x676c>
   17884:	mov	r1, ip
   17888:	mov	r0, r5
   1788c:	bl	10e8c <strcmp@plt>
   17890:	cmp	r0, #0
   17894:	bne	17878 <__assert_fail@plt+0x674c>
   17898:	ldr	r4, [r4, #4]
   1789c:	mov	r2, #5
   178a0:	cmp	r4, #0
   178a4:	ldr	r1, [pc, #376]	; 17a24 <__assert_fail@plt+0x68f8>
   178a8:	beq	17950 <__assert_fail@plt+0x6824>
   178ac:	mov	r0, #0
   178b0:	bl	10f04 <dcgettext@plt>
   178b4:	ldr	r3, [pc, #364]	; 17a28 <__assert_fail@plt+0x68fc>
   178b8:	ldr	r2, [pc, #364]	; 17a2c <__assert_fail@plt+0x6900>
   178bc:	mov	r1, r0
   178c0:	mov	r0, #1
   178c4:	bl	11060 <__printf_chk@plt>
   178c8:	mov	r1, #0
   178cc:	mov	r0, #5
   178d0:	bl	110d8 <setlocale@plt>
   178d4:	cmp	r0, #0
   178d8:	ldreq	r5, [pc, #320]	; 17a20 <__assert_fail@plt+0x68f4>
   178dc:	beq	178f8 <__assert_fail@plt+0x67cc>
   178e0:	mov	r2, #3
   178e4:	ldr	r1, [pc, #324]	; 17a30 <__assert_fail@plt+0x6904>
   178e8:	bl	11114 <strncmp@plt>
   178ec:	ldr	r5, [pc, #300]	; 17a20 <__assert_fail@plt+0x68f4>
   178f0:	cmp	r0, #0
   178f4:	bne	179e0 <__assert_fail@plt+0x68b4>
   178f8:	mov	r2, #5
   178fc:	ldr	r1, [pc, #304]	; 17a34 <__assert_fail@plt+0x6908>
   17900:	mov	r0, #0
   17904:	bl	10f04 <dcgettext@plt>
   17908:	ldr	r3, [pc, #272]	; 17a20 <__assert_fail@plt+0x68f4>
   1790c:	ldr	r2, [pc, #276]	; 17a28 <__assert_fail@plt+0x68fc>
   17910:	mov	r1, r0
   17914:	mov	r0, #1
   17918:	bl	11060 <__printf_chk@plt>
   1791c:	mov	r2, #5
   17920:	ldr	r1, [pc, #272]	; 17a38 <__assert_fail@plt+0x690c>
   17924:	mov	r0, #0
   17928:	bl	10f04 <dcgettext@plt>
   1792c:	ldr	r2, [pc, #264]	; 17a3c <__assert_fail@plt+0x6910>
   17930:	cmp	r4, r5
   17934:	ldr	r3, [pc, #260]	; 17a40 <__assert_fail@plt+0x6914>
   17938:	movne	r3, r2
   1793c:	mov	r1, r0
   17940:	mov	r2, r4
   17944:	mov	r0, #1
   17948:	bl	11060 <__printf_chk@plt>
   1794c:	b	177bc <__assert_fail@plt+0x6690>
   17950:	mov	r0, r4
   17954:	bl	10f04 <dcgettext@plt>
   17958:	ldr	r3, [pc, #200]	; 17a28 <__assert_fail@plt+0x68fc>
   1795c:	ldr	r2, [pc, #200]	; 17a2c <__assert_fail@plt+0x6900>
   17960:	mov	r1, r0
   17964:	mov	r0, #1
   17968:	bl	11060 <__printf_chk@plt>
   1796c:	mov	r1, r4
   17970:	mov	r0, #5
   17974:	bl	110d8 <setlocale@plt>
   17978:	cmp	r0, #0
   1797c:	beq	17994 <__assert_fail@plt+0x6868>
   17980:	mov	r2, #3
   17984:	ldr	r1, [pc, #164]	; 17a30 <__assert_fail@plt+0x6904>
   17988:	bl	11114 <strncmp@plt>
   1798c:	cmp	r0, #0
   17990:	bne	179d8 <__assert_fail@plt+0x68ac>
   17994:	mov	r2, #5
   17998:	ldr	r1, [pc, #148]	; 17a34 <__assert_fail@plt+0x6908>
   1799c:	mov	r0, #0
   179a0:	bl	10f04 <dcgettext@plt>
   179a4:	ldr	r3, [pc, #116]	; 17a20 <__assert_fail@plt+0x68f4>
   179a8:	ldr	r2, [pc, #120]	; 17a28 <__assert_fail@plt+0x68fc>
   179ac:	mov	r4, r3
   179b0:	mov	r1, r0
   179b4:	mov	r0, #1
   179b8:	bl	11060 <__printf_chk@plt>
   179bc:	ldr	r1, [pc, #116]	; 17a38 <__assert_fail@plt+0x690c>
   179c0:	mov	r2, #5
   179c4:	mov	r0, #0
   179c8:	bl	10f04 <dcgettext@plt>
   179cc:	ldr	r3, [pc, #108]	; 17a40 <__assert_fail@plt+0x6914>
   179d0:	mov	r1, r0
   179d4:	b	17940 <__assert_fail@plt+0x6814>
   179d8:	ldr	r5, [pc, #64]	; 17a20 <__assert_fail@plt+0x68f4>
   179dc:	mov	r4, r5
   179e0:	mov	r2, #5
   179e4:	ldr	r1, [pc, #88]	; 17a44 <__assert_fail@plt+0x6918>
   179e8:	mov	r0, #0
   179ec:	bl	10f04 <dcgettext@plt>
   179f0:	ldr	r1, [r7]
   179f4:	bl	10e5c <fputs_unlocked@plt>
   179f8:	b	178f8 <__assert_fail@plt+0x67cc>
   179fc:	andeq	fp, r3, r8, ror r1
   17a00:	andeq	r9, r2, ip, lsl sl
   17a04:	andeq	fp, r3, r0, lsr #3
   17a08:	andeq	r9, r2, r4, asr #20
   17a0c:	andeq	fp, r3, r4, lsl #3
   17a10:	andeq	r9, r2, r4, asr #15
   17a14:	andeq	r9, r2, ip, ror #20
   17a18:	strdeq	r9, [r2], -r4
   17a1c:	andeq	r9, r2, r4, lsr #22
   17a20:	andeq	r9, r2, r4, lsl sl
   17a24:	andeq	r9, r2, ip, asr fp
   17a28:	andeq	r9, r2, r4, ror fp
   17a2c:	muleq	r2, ip, fp
   17a30:	andeq	r9, r2, ip, lsr #23
   17a34:	strdeq	r9, [r2], -r8
   17a38:	andeq	r9, r2, r4, lsl ip
   17a3c:	andeq	r9, r2, r0, lsr #22
   17a40:	andeq	r9, r2, r0, asr #25
   17a44:			; <UNDEFINED> instruction: 0x00029bb0
   17a48:	ldr	r3, [pc, #4]	; 17a54 <__assert_fail@plt+0x6928>
   17a4c:	str	r0, [r3]
   17a50:	bx	lr
   17a54:	muleq	r3, r8, r1
   17a58:	ldr	r3, [pc, #4]	; 17a64 <__assert_fail@plt+0x6938>
   17a5c:	strb	r0, [r3, #4]
   17a60:	bx	lr
   17a64:	muleq	r3, r8, r1
   17a68:	ldr	r3, [pc, #192]	; 17b30 <__assert_fail@plt+0x6a04>
   17a6c:	push	{r4, r5, r6, lr}
   17a70:	sub	sp, sp, #8
   17a74:	ldr	r0, [r3]
   17a78:	bl	23fc8 <__assert_fail@plt+0x12e9c>
   17a7c:	cmp	r0, #0
   17a80:	beq	17aa4 <__assert_fail@plt+0x6978>
   17a84:	ldr	r4, [pc, #168]	; 17b34 <__assert_fail@plt+0x6a08>
   17a88:	ldrb	r3, [r4, #4]
   17a8c:	cmp	r3, #0
   17a90:	beq	17ac0 <__assert_fail@plt+0x6994>
   17a94:	bl	11024 <__errno_location@plt>
   17a98:	ldr	r3, [r0]
   17a9c:	cmp	r3, #32
   17aa0:	bne	17ac0 <__assert_fail@plt+0x6994>
   17aa4:	ldr	r3, [pc, #140]	; 17b38 <__assert_fail@plt+0x6a0c>
   17aa8:	ldr	r0, [r3]
   17aac:	bl	23fc8 <__assert_fail@plt+0x12e9c>
   17ab0:	cmp	r0, #0
   17ab4:	bne	17b08 <__assert_fail@plt+0x69dc>
   17ab8:	add	sp, sp, #8
   17abc:	pop	{r4, r5, r6, pc}
   17ac0:	mov	r2, #5
   17ac4:	ldr	r1, [pc, #112]	; 17b3c <__assert_fail@plt+0x6a10>
   17ac8:	mov	r0, #0
   17acc:	bl	10f04 <dcgettext@plt>
   17ad0:	ldr	r4, [r4]
   17ad4:	cmp	r4, #0
   17ad8:	mov	r5, r0
   17adc:	beq	17b14 <__assert_fail@plt+0x69e8>
   17ae0:	bl	11024 <__errno_location@plt>
   17ae4:	ldr	r6, [r0]
   17ae8:	mov	r0, r4
   17aec:	bl	22908 <__assert_fail@plt+0x117dc>
   17af0:	mov	r1, r6
   17af4:	str	r5, [sp]
   17af8:	ldr	r2, [pc, #64]	; 17b40 <__assert_fail@plt+0x6a14>
   17afc:	mov	r3, r0
   17b00:	mov	r0, #0
   17b04:	bl	10f94 <error@plt>
   17b08:	ldr	r3, [pc, #52]	; 17b44 <__assert_fail@plt+0x6a18>
   17b0c:	ldr	r0, [r3]
   17b10:	bl	10ec8 <_exit@plt>
   17b14:	bl	11024 <__errno_location@plt>
   17b18:	mov	r3, r5
   17b1c:	ldr	r2, [pc, #36]	; 17b48 <__assert_fail@plt+0x6a1c>
   17b20:	ldr	r1, [r0]
   17b24:	mov	r0, r4
   17b28:	bl	10f94 <error@plt>
   17b2c:	b	17b08 <__assert_fail@plt+0x69dc>
   17b30:	andeq	fp, r3, r4, lsl #3
   17b34:	muleq	r3, r8, r1
   17b38:	andeq	fp, r3, r8, ror r1
   17b3c:	andeq	r9, r2, ip, lsr #17
   17b40:	andeq	r9, r2, ip, asr #26
   17b44:	andeq	fp, r3, r8, lsl r1
   17b48:	andeq	r9, r2, r0, asr sp
   17b4c:	push	{r4, r5, lr}
   17b50:	sub	sp, sp, #12
   17b54:	mov	r5, r0
   17b58:	bl	11024 <__errno_location@plt>
   17b5c:	mov	r2, #0
   17b60:	mov	r4, r0
   17b64:	ldr	r3, [r0]
   17b68:	str	r2, [r4]
   17b6c:	mov	r0, r5
   17b70:	str	r3, [sp]
   17b74:	str	r3, [sp, #4]
   17b78:	bl	10ebc <free@plt>
   17b7c:	ldr	r3, [r4]
   17b80:	add	r2, sp, #8
   17b84:	cmp	r3, #0
   17b88:	moveq	r3, #4
   17b8c:	movne	r3, #0
   17b90:	add	r3, r2, r3
   17b94:	ldr	r3, [r3, #-8]
   17b98:	str	r3, [r4]
   17b9c:	add	sp, sp, #12
   17ba0:	pop	{r4, r5, pc}
   17ba4:	push	{r4, r5, r6, r7, r8, lr}
   17ba8:	subs	r4, r2, #0
   17bac:	beq	17c0c <__assert_fail@plt+0x6ae0>
   17bb0:	mov	r7, r0
   17bb4:	mov	r5, r1
   17bb8:	mov	r6, #0
   17bbc:	b	17bd8 <__assert_fail@plt+0x6aac>
   17bc0:	cmp	r0, #0
   17bc4:	beq	17bf8 <__assert_fail@plt+0x6acc>
   17bc8:	subs	r4, r4, r0
   17bcc:	add	r6, r6, r0
   17bd0:	add	r5, r5, r0
   17bd4:	beq	17bf0 <__assert_fail@plt+0x6ac4>
   17bd8:	mov	r2, r4
   17bdc:	mov	r1, r5
   17be0:	mov	r0, r7
   17be4:	bl	22df4 <__assert_fail@plt+0x11cc8>
   17be8:	cmn	r0, #1
   17bec:	bne	17bc0 <__assert_fail@plt+0x6a94>
   17bf0:	mov	r0, r6
   17bf4:	pop	{r4, r5, r6, r7, r8, pc}
   17bf8:	bl	11024 <__errno_location@plt>
   17bfc:	mov	r3, #28
   17c00:	str	r3, [r0]
   17c04:	mov	r0, r6
   17c08:	pop	{r4, r5, r6, r7, r8, pc}
   17c0c:	mov	r6, r4
   17c10:	b	17bf0 <__assert_fail@plt+0x6ac4>
   17c14:	push	{r4, r5, r6, r8, r9, lr}
   17c18:	mov	r4, r0
   17c1c:	mov	r5, r1
   17c20:	add	r6, r2, #20
   17c24:	mov	r8, #10
   17c28:	mov	r9, #0
   17c2c:	mov	r3, #0
   17c30:	strb	r3, [r2, #20]
   17c34:	mov	r0, r4
   17c38:	mov	r1, r5
   17c3c:	mov	r2, r8
   17c40:	mov	r3, r9
   17c44:	bl	2656c <__assert_fail@plt+0x15440>
   17c48:	mov	r0, r4
   17c4c:	mov	r1, r5
   17c50:	mov	r3, r9
   17c54:	add	r2, r2, #48	; 0x30
   17c58:	strb	r2, [r6, #-1]!
   17c5c:	mov	r2, r8
   17c60:	bl	2656c <__assert_fail@plt+0x15440>
   17c64:	mov	r4, r0
   17c68:	mov	r5, r1
   17c6c:	orrs	r3, r4, r5
   17c70:	bne	17c34 <__assert_fail@plt+0x6b08>
   17c74:	mov	r0, r6
   17c78:	pop	{r4, r5, r6, r8, r9, pc}
   17c7c:	andeq	r0, r0, r0
   17c80:	cmp	r0, #16
   17c84:	beq	17d08 <__assert_fail@plt+0x6bdc>
   17c88:	bls	17cb0 <__assert_fail@plt+0x6b84>
   17c8c:	cmp	r0, #64	; 0x40
   17c90:	beq	17d00 <__assert_fail@plt+0x6bd4>
   17c94:	bls	17ce0 <__assert_fail@plt+0x6bb4>
   17c98:	cmp	r0, #128	; 0x80
   17c9c:	beq	17cd8 <__assert_fail@plt+0x6bac>
   17ca0:	cmp	r0, #256	; 0x100
   17ca4:	bne	17cc8 <__assert_fail@plt+0x6b9c>
   17ca8:	mov	r0, #8
   17cac:	bx	lr
   17cb0:	cmp	r0, #4
   17cb4:	beq	17cf0 <__assert_fail@plt+0x6bc4>
   17cb8:	cmp	r0, #8
   17cbc:	beq	17cd0 <__assert_fail@plt+0x6ba4>
   17cc0:	cmp	r0, #2
   17cc4:	beq	17cf8 <__assert_fail@plt+0x6bcc>
   17cc8:	mov	r0, #0
   17ccc:	bx	lr
   17cd0:	mov	r0, #3
   17cd4:	bx	lr
   17cd8:	mov	r0, #7
   17cdc:	bx	lr
   17ce0:	cmp	r0, #32
   17ce4:	bne	17cc8 <__assert_fail@plt+0x6b9c>
   17ce8:	mov	r0, #5
   17cec:	bx	lr
   17cf0:	mov	r0, #2
   17cf4:	bx	lr
   17cf8:	mov	r0, #1
   17cfc:	bx	lr
   17d00:	mov	r0, #6
   17d04:	bx	lr
   17d08:	mov	r0, #4
   17d0c:	bx	lr
   17d10:	mov	ip, #0
   17d14:	push	{r4, r5, lr}
   17d18:	add	r2, r1, r2
   17d1c:	mov	lr, ip
   17d20:	mov	r4, ip
   17d24:	cmp	r2, r1
   17d28:	beq	17d60 <__assert_fail@plt+0x6c34>
   17d2c:	ldrb	r5, [r2, #-1]!
   17d30:	orr	lr, lr, r5, lsl ip
   17d34:	add	ip, ip, r3
   17d38:	cmp	ip, #31
   17d3c:	bls	17d24 <__assert_fail@plt+0x6bf8>
   17d40:	str	lr, [r0, r4, lsl #2]
   17d44:	ldrb	lr, [r2]
   17d48:	sub	ip, ip, #32
   17d4c:	sub	r5, r3, ip
   17d50:	cmp	r2, r1
   17d54:	add	r4, r4, #1
   17d58:	lsr	lr, lr, r5
   17d5c:	bne	17d2c <__assert_fail@plt+0x6c00>
   17d60:	cmp	lr, #0
   17d64:	strne	lr, [r0, r4, lsl #2]
   17d68:	addne	r4, r4, #1
   17d6c:	bne	17da4 <__assert_fail@plt+0x6c78>
   17d70:	cmp	r4, #0
   17d74:	beq	17da4 <__assert_fail@plt+0x6c78>
   17d78:	sub	r3, r4, #-1073741823	; 0xc0000001
   17d7c:	ldr	r2, [r0, r3, lsl #2]
   17d80:	add	r0, r0, r3, lsl #2
   17d84:	cmp	r2, #0
   17d88:	beq	17d9c <__assert_fail@plt+0x6c70>
   17d8c:	b	17da4 <__assert_fail@plt+0x6c78>
   17d90:	ldr	r3, [r0, #-4]!
   17d94:	cmp	r3, #0
   17d98:	bne	17da4 <__assert_fail@plt+0x6c78>
   17d9c:	subs	r4, r4, #1
   17da0:	bne	17d90 <__assert_fail@plt+0x6c64>
   17da4:	mov	r0, r4
   17da8:	pop	{r4, r5, pc}
   17dac:	b	17b4c <__assert_fail@plt+0x6a20>
   17db0:	push	{r4, lr}
   17db4:	mov	r1, r2
   17db8:	bl	23f10 <__assert_fail@plt+0x12de4>
   17dbc:	cmp	r0, #0
   17dc0:	popne	{r4, pc}
   17dc4:	ldr	r0, [pc]	; 17dcc <__assert_fail@plt+0x6ca0>
   17dc8:	bl	11138 <__assert_fail@plt+0xc>
   17dcc:	andeq	sl, r2, r4, lsr r0
   17dd0:	push	{r4, lr}
   17dd4:	ldr	lr, [sp, #8]
   17dd8:	sub	ip, lr, #1
   17ddc:	cmn	ip, #3
   17de0:	bls	17e98 <__assert_fail@plt+0x6d6c>
   17de4:	mvn	ip, r1
   17de8:	cmp	r1, r3
   17dec:	lsr	ip, ip, #31
   17df0:	movgt	ip, #0
   17df4:	cmp	ip, #0
   17df8:	beq	17eac <__assert_fail@plt+0x6d80>
   17dfc:	cmp	r0, #0
   17e00:	movne	ip, r1
   17e04:	bne	17e38 <__assert_fail@plt+0x6d0c>
   17e08:	add	ip, r1, #1
   17e0c:	cmp	r3, ip
   17e10:	addne	r2, r2, r1, lsl #2
   17e14:	bne	17e28 <__assert_fail@plt+0x6cfc>
   17e18:	b	17e78 <__assert_fail@plt+0x6d4c>
   17e1c:	add	ip, ip, #1
   17e20:	cmp	r3, ip
   17e24:	beq	17e78 <__assert_fail@plt+0x6d4c>
   17e28:	ldr	r0, [r2, #4]!
   17e2c:	cmp	lr, r0
   17e30:	beq	17e1c <__assert_fail@plt+0x6cf0>
   17e34:	eor	r0, r0, lr
   17e38:	rsb	r2, r0, #0
   17e3c:	and	r0, r0, r2
   17e40:	ands	r3, r0, #-16777216	; 0xff000000
   17e44:	bne	17e90 <__assert_fail@plt+0x6d64>
   17e48:	lsl	r0, r0, #8
   17e4c:	tst	r0, #-16777216	; 0xff000000
   17e50:	add	r3, r3, #8
   17e54:	beq	17e48 <__assert_fail@plt+0x6d1c>
   17e58:	cmp	r0, #0
   17e5c:	blt	17e6c <__assert_fail@plt+0x6d40>
   17e60:	lsls	r0, r0, #1
   17e64:	add	r3, r3, #1
   17e68:	bpl	17e60 <__assert_fail@plt+0x6d34>
   17e6c:	rsb	r3, r3, ip, lsl #5
   17e70:	add	r0, r3, #31
   17e74:	pop	{r4, pc}
   17e78:	cmp	lr, #0
   17e7c:	bne	17e88 <__assert_fail@plt+0x6d5c>
   17e80:	mvn	r0, #0
   17e84:	pop	{r4, pc}
   17e88:	lsl	r0, r3, #5
   17e8c:	pop	{r4, pc}
   17e90:	mov	r3, #0
   17e94:	b	17e58 <__assert_fail@plt+0x6d2c>
   17e98:	ldr	r3, [pc, #32]	; 17ec0 <__assert_fail@plt+0x6d94>
   17e9c:	ldr	r2, [pc, #32]	; 17ec4 <__assert_fail@plt+0x6d98>
   17ea0:	ldr	r1, [pc, #32]	; 17ec8 <__assert_fail@plt+0x6d9c>
   17ea4:	ldr	r0, [pc, #32]	; 17ecc <__assert_fail@plt+0x6da0>
   17ea8:	bl	1112c <__assert_fail@plt>
   17eac:	ldr	r3, [pc, #12]	; 17ec0 <__assert_fail@plt+0x6d94>
   17eb0:	mov	r2, #716	; 0x2cc
   17eb4:	ldr	r1, [pc, #12]	; 17ec8 <__assert_fail@plt+0x6d9c>
   17eb8:	ldr	r0, [pc, #16]	; 17ed0 <__assert_fail@plt+0x6da4>
   17ebc:	bl	1112c <__assert_fail@plt>
   17ec0:	andeq	r9, r2, r4, asr sp
   17ec4:	andeq	r0, r0, fp, asr #5
   17ec8:	andeq	sl, r2, r4, rrx
   17ecc:	andeq	sl, r2, r4, ror r0
   17ed0:	muleq	r2, r4, r0
   17ed4:	cmp	r1, #0
   17ed8:	beq	17fa0 <__assert_fail@plt+0x6e74>
   17edc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee0:	sub	fp, r0, #1
   17ee4:	ldr	r6, [pc, #208]	; 17fbc <__assert_fail@plt+0x6e90>
   17ee8:	mov	sl, #0
   17eec:	mvn	r0, #0
   17ef0:	ldr	r5, [r2]
   17ef4:	ldr	ip, [r2, #12]
   17ef8:	rsb	r7, r5, #32
   17efc:	and	r3, ip, r6
   17f00:	lsr	r4, r1, r7
   17f04:	and	lr, r4, r6
   17f08:	lsr	r8, r4, #16
   17f0c:	lsr	ip, ip, #16
   17f10:	mul	r9, r3, r8
   17f14:	mul	r3, r3, lr
   17f18:	mla	lr, ip, lr, r9
   17f1c:	mul	ip, ip, r8
   17f20:	add	lr, lr, r3, lsr #16
   17f24:	lsl	r1, r1, r5
   17f28:	and	r3, r3, r6
   17f2c:	cmp	r9, lr
   17f30:	add	r3, r3, lr, lsl #16
   17f34:	add	r4, r4, #1
   17f38:	addhi	ip, ip, #65536	; 0x10000
   17f3c:	add	lr, r4, lr, lsr #16
   17f40:	adds	r3, r1, r3
   17f44:	ldr	r4, [r2, #4]
   17f48:	adc	ip, ip, lr
   17f4c:	mul	r9, r4, ip
   17f50:	sub	r1, r1, r9
   17f54:	cmp	r3, r1
   17f58:	movcs	r3, #0
   17f5c:	movcc	r3, #1
   17f60:	rsb	r9, r3, #0
   17f64:	and	r9, r9, r4
   17f68:	add	r9, r9, r1
   17f6c:	cmp	r4, r9
   17f70:	sub	r1, ip, r3
   17f74:	subls	r9, r9, r4
   17f78:	addls	r1, r1, #1
   17f7c:	ands	r3, r9, r0, lsr r7
   17f80:	bne	17fa8 <__assert_fail@plt+0x6e7c>
   17f84:	lsr	r5, r9, r5
   17f88:	cmp	r1, #0
   17f8c:	strb	r5, [fp, #1]!
   17f90:	add	sl, sl, #1
   17f94:	bne	17ef0 <__assert_fail@plt+0x6dc4>
   17f98:	mov	r0, sl
   17f9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fa0:	mov	r0, r1
   17fa4:	bx	lr
   17fa8:	ldr	r3, [pc, #16]	; 17fc0 <__assert_fail@plt+0x6e94>
   17fac:	ldr	r2, [pc, #16]	; 17fc4 <__assert_fail@plt+0x6e98>
   17fb0:	ldr	r1, [pc, #16]	; 17fc8 <__assert_fail@plt+0x6e9c>
   17fb4:	ldr	r0, [pc, #16]	; 17fcc <__assert_fail@plt+0x6ea0>
   17fb8:	bl	1112c <__assert_fail@plt>
   17fbc:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   17fc0:	andeq	r9, r2, r4, ror #26
   17fc4:	andeq	r0, r0, fp, ror #9
   17fc8:	andeq	sl, r2, r4, rrx
   17fcc:	andeq	sl, r2, r8, lsr #1
   17fd0:	ldr	r3, [r0]
   17fd4:	cmp	r1, #1
   17fd8:	push	{r4, r5, r6, lr}
   17fdc:	movge	r5, r1
   17fe0:	movlt	r5, #1
   17fe4:	cmp	r3, #0
   17fe8:	mov	r4, r0
   17fec:	beq	1802c <__assert_fail@plt+0x6f00>
   17ff0:	ldr	r0, [pc, #76]	; 18044 <__assert_fail@plt+0x6f18>
   17ff4:	lsl	r1, r3, #2
   17ff8:	lsl	r2, r5, #2
   17ffc:	ldr	r3, [r0]
   18000:	ldr	r0, [r4, #8]
   18004:	blx	r3
   18008:	str	r0, [r4, #8]
   1800c:	ldr	r3, [r4, #4]
   18010:	str	r5, [r4]
   18014:	cmp	r3, #0
   18018:	rsblt	r3, r3, #0
   1801c:	cmp	r5, r3
   18020:	movlt	r3, #0
   18024:	strlt	r3, [r4, #4]
   18028:	pop	{r4, r5, r6, pc}
   1802c:	ldr	r3, [pc, #16]	; 18044 <__assert_fail@plt+0x6f18>
   18030:	lsl	r0, r5, #2
   18034:	ldr	r3, [r3, #4]
   18038:	blx	r3
   1803c:	str	r0, [r4, #8]
   18040:	b	1800c <__assert_fail@plt+0x6ee0>
   18044:	andeq	fp, r3, ip, lsl r1
   18048:	subs	r3, r0, #0
   1804c:	beq	18088 <__assert_fail@plt+0x6f5c>
   18050:	ands	r0, r3, #-16777216	; 0xff000000
   18054:	movne	r0, #0
   18058:	bne	1806c <__assert_fail@plt+0x6f40>
   1805c:	lsl	r3, r3, #8
   18060:	tst	r3, #-16777216	; 0xff000000
   18064:	add	r0, r0, #8
   18068:	beq	1805c <__assert_fail@plt+0x6f30>
   1806c:	cmp	r3, #0
   18070:	blt	18080 <__assert_fail@plt+0x6f54>
   18074:	lsls	r3, r3, #1
   18078:	add	r0, r0, #1
   1807c:	bpl	18074 <__assert_fail@plt+0x6f48>
   18080:	rsb	r0, r0, #32
   18084:	bx	lr
   18088:	push	{r4, lr}
   1808c:	ldr	r3, [pc, #12]	; 180a0 <__assert_fail@plt+0x6f74>
   18090:	ldr	r2, [pc, #12]	; 180a4 <__assert_fail@plt+0x6f78>
   18094:	ldr	r1, [pc, #12]	; 180a8 <__assert_fail@plt+0x6f7c>
   18098:	ldr	r0, [pc, #12]	; 180ac <__assert_fail@plt+0x6f80>
   1809c:	bl	1112c <__assert_fail@plt>
   180a0:	andeq	r9, r2, r8, ror sp
   180a4:			; <UNDEFINED> instruction: 0x000004ba
   180a8:	andeq	sl, r2, r4, rrx
   180ac:	andeq	sl, r2, r4, ror #1
   180b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   180b4:	mov	r6, r3
   180b8:	sub	r3, r3, #-1073741823	; 0xc0000001
   180bc:	mov	r7, r0
   180c0:	ldr	r0, [r2, r3, lsl #2]
   180c4:	mov	r5, r1
   180c8:	mov	r4, r2
   180cc:	bl	18048 <__assert_fail@plt+0x6f1c>
   180d0:	add	r3, r5, r6, lsl #5
   180d4:	sub	r3, r3, #33	; 0x21
   180d8:	mov	r1, r5
   180dc:	add	r0, r3, r0
   180e0:	bl	26120 <__assert_fail@plt+0x14ff4>
   180e4:	mvn	lr, #0
   180e8:	mvn	lr, lr, lsl r5
   180ec:	cmp	r0, #0
   180f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   180f4:	mov	ip, #0
   180f8:	uxtb	lr, lr
   180fc:	mov	r3, ip
   18100:	add	r2, r7, r0
   18104:	ldr	r1, [r4, r3, lsl #2]
   18108:	lsl	r8, r3, #2
   1810c:	lsr	r1, r1, ip
   18110:	add	ip, ip, r5
   18114:	cmp	ip, #31
   18118:	uxtb	r1, r1
   1811c:	bls	18140 <__assert_fail@plt+0x7014>
   18120:	add	r3, r3, #1
   18124:	cmp	r6, r3
   18128:	add	r8, r4, r8
   1812c:	subgt	ip, ip, #32
   18130:	ldrgt	r9, [r8, #4]
   18134:	subgt	r8, r5, ip
   18138:	orrgt	r1, r1, r9, lsl r8
   1813c:	uxtbgt	r1, r1
   18140:	and	r1, r1, lr
   18144:	strb	r1, [r2, #-1]!
   18148:	cmp	r7, r2
   1814c:	bne	18104 <__assert_fail@plt+0x6fd8>
   18150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18154:	cmp	r0, #0
   18158:	push	{r4, lr}
   1815c:	beq	18174 <__assert_fail@plt+0x7048>
   18160:	bl	23ee4 <__assert_fail@plt+0x12db8>
   18164:	cmp	r0, #0
   18168:	popne	{r4, pc}
   1816c:	ldr	r0, [pc, #20]	; 18188 <__assert_fail@plt+0x705c>
   18170:	bl	11138 <__assert_fail@plt+0xc>
   18174:	ldr	r3, [pc, #16]	; 1818c <__assert_fail@plt+0x7060>
   18178:	ldr	r2, [pc, #16]	; 18190 <__assert_fail@plt+0x7064>
   1817c:	ldr	r1, [pc, #16]	; 18194 <__assert_fail@plt+0x7068>
   18180:	ldr	r0, [pc, #16]	; 18198 <__assert_fail@plt+0x706c>
   18184:	bl	1112c <__assert_fail@plt>
   18188:	strdeq	sl, [r2], -r8
   1818c:	muleq	r2, r0, sp
   18190:	andeq	r0, r0, r3, lsr #2
   18194:	andeq	sl, r2, r4, rrx
   18198:	andeq	sl, r2, ip, ror #1
   1819c:	push	{r4, r5, r6, r7, r8, lr}
   181a0:	lsr	r7, r1, #5
   181a4:	ldr	lr, [r0, #4]
   181a8:	and	r1, r1, #31
   181ac:	mov	r4, #1
   181b0:	eor	r6, lr, lr, asr #31
   181b4:	sub	r6, r6, lr, asr #31
   181b8:	cmp	r6, r7
   181bc:	mov	r5, r0
   181c0:	lsl	r4, r4, r1
   181c4:	bgt	18210 <__assert_fail@plt+0x70e4>
   181c8:	ldr	r3, [r0]
   181cc:	cmp	r7, r3
   181d0:	bge	1827c <__assert_fail@plt+0x7150>
   181d4:	ldr	r0, [r0, #8]
   181d8:	add	r8, r7, #1
   181dc:	cmp	r6, r7
   181e0:	str	r4, [r0, r7, lsl #2]
   181e4:	add	r3, r0, r7, lsl #2
   181e8:	bge	18200 <__assert_fail@plt+0x70d4>
   181ec:	add	r0, r0, r6, lsl #2
   181f0:	mov	r2, #0
   181f4:	str	r2, [r0], #4
   181f8:	cmp	r3, r0
   181fc:	bne	181f4 <__assert_fail@plt+0x70c8>
   18200:	cmp	lr, #0
   18204:	rsblt	r8, r8, #0
   18208:	str	r8, [r5, #4]
   1820c:	pop	{r4, r5, r6, r7, r8, pc}
   18210:	sub	ip, r6, r7
   18214:	cmp	ip, #0
   18218:	lsl	r3, r7, #2
   1821c:	ldr	r0, [r0, #8]
   18220:	addgt	ip, r3, ip, lsl #2
   18224:	addgt	ip, r0, ip
   18228:	addgt	r3, r0, r3
   1822c:	bgt	18238 <__assert_fail@plt+0x710c>
   18230:	b	182a4 <__assert_fail@plt+0x7178>
   18234:	mov	r4, r1
   18238:	ldr	r2, [r3]
   1823c:	adds	r2, r4, r2
   18240:	str	r2, [r3], #4
   18244:	movcs	r1, #1
   18248:	movcc	r1, #0
   1824c:	cmp	r3, ip
   18250:	bne	18234 <__assert_fail@plt+0x7108>
   18254:	cmp	r4, r2
   18258:	movls	r8, r6
   1825c:	bls	18200 <__assert_fail@plt+0x70d4>
   18260:	ldr	r3, [r5]
   18264:	add	r8, r6, #1
   18268:	cmp	r6, r3
   1826c:	bge	18290 <__assert_fail@plt+0x7164>
   18270:	mov	r3, #1
   18274:	str	r3, [r0, r6, lsl #2]
   18278:	b	18200 <__assert_fail@plt+0x70d4>
   1827c:	add	r8, r7, #1
   18280:	mov	r1, r8
   18284:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   18288:	ldr	lr, [r5, #4]
   1828c:	b	181dc <__assert_fail@plt+0x70b0>
   18290:	mov	r1, r8
   18294:	mov	r0, r5
   18298:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1829c:	ldr	lr, [r5, #4]
   182a0:	b	18270 <__assert_fail@plt+0x7144>
   182a4:	bl	11160 <__assert_fail@plt+0x34>
   182a8:	push	{r4, r5, r6, lr}
   182ac:	lsr	r3, r2, #5
   182b0:	ldr	r5, [r0]
   182b4:	and	lr, r2, #31
   182b8:	mov	r2, #1
   182bc:	eor	ip, r5, r5, asr #31
   182c0:	sub	ip, ip, r5, asr #31
   182c4:	cmp	ip, r3
   182c8:	lsl	r2, r2, lr
   182cc:	ble	18344 <__assert_fail@plt+0x7218>
   182d0:	sub	r6, ip, r3
   182d4:	cmp	r6, #0
   182d8:	lsl	r3, r3, #2
   182dc:	addgt	r6, r3, r6, lsl #2
   182e0:	addgt	r6, r1, r6
   182e4:	addgt	r3, r1, r3
   182e8:	bgt	182f4 <__assert_fail@plt+0x71c8>
   182ec:	b	1836c <__assert_fail@plt+0x7240>
   182f0:	mov	r2, r4
   182f4:	ldr	lr, [r3]
   182f8:	sub	r4, lr, r2
   182fc:	cmp	lr, r2
   18300:	str	r4, [r3], #4
   18304:	movcs	r4, #0
   18308:	movcc	r4, #1
   1830c:	cmp	r3, r6
   18310:	bne	182f0 <__assert_fail@plt+0x71c4>
   18314:	cmp	lr, r2
   18318:	bcc	18358 <__assert_fail@plt+0x722c>
   1831c:	add	r1, r1, ip, lsl #2
   18320:	ldr	r3, [r1, #-4]!
   18324:	cmp	r3, #0
   18328:	bne	18334 <__assert_fail@plt+0x7208>
   1832c:	subs	ip, ip, #1
   18330:	bne	18320 <__assert_fail@plt+0x71f4>
   18334:	cmp	r5, #0
   18338:	rsblt	ip, ip, #0
   1833c:	str	ip, [r0]
   18340:	pop	{r4, r5, r6, pc}
   18344:	ldr	r3, [pc, #36]	; 18370 <__assert_fail@plt+0x7244>
   18348:	ldr	r2, [pc, #36]	; 18374 <__assert_fail@plt+0x7248>
   1834c:	ldr	r1, [pc, #36]	; 18378 <__assert_fail@plt+0x724c>
   18350:	ldr	r0, [pc, #36]	; 1837c <__assert_fail@plt+0x7250>
   18354:	bl	1112c <__assert_fail@plt>
   18358:	ldr	r3, [pc, #16]	; 18370 <__assert_fail@plt+0x7244>
   1835c:	ldr	r2, [pc, #28]	; 18380 <__assert_fail@plt+0x7254>
   18360:	ldr	r1, [pc, #16]	; 18378 <__assert_fail@plt+0x724c>
   18364:	ldr	r0, [pc, #24]	; 18384 <__assert_fail@plt+0x7258>
   18368:	bl	1112c <__assert_fail@plt>
   1836c:	bl	11188 <__assert_fail@plt+0x5c>
   18370:			; <UNDEFINED> instruction: 0x00029dbc
   18374:	andeq	r0, r0, r9, lsr #29
   18378:	andeq	sl, r2, r4, rrx
   1837c:	andeq	sl, r2, r0, lsr r1
   18380:	andeq	r0, r0, ip, lsr #29
   18384:	andeq	sl, r2, r0, asr #2
   18388:	ldr	ip, [r0]
   1838c:	mov	r2, #1
   18390:	cmp	ip, #0
   18394:	push	{r4, lr}
   18398:	mov	r4, r1
   1839c:	str	r2, [r0, #4]
   183a0:	ble	183b0 <__assert_fail@plt+0x7284>
   183a4:	ldr	r0, [r0, #8]
   183a8:	str	r4, [r0]
   183ac:	pop	{r4, pc}
   183b0:	mov	r1, r2
   183b4:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   183b8:	str	r4, [r0]
   183bc:	pop	{r4, pc}
   183c0:	vcmpe.f64	d0, #0.0
   183c4:	push	{r4, r5, r6, lr}
   183c8:	vldr	d7, [pc, #344]	; 18528 <__assert_fail@plt+0x73fc>
   183cc:	vpush	{d8-d9}
   183d0:	vmrs	APSR_nzcv, fpscr
   183d4:	vnegmi.f64	d8, d0
   183d8:	vmovpl.f64	d8, d0
   183dc:	vcmpe.f64	d8, d7
   183e0:	vmrs	APSR_nzcv, fpscr
   183e4:	bmi	184ec <__assert_fail@plt+0x73c0>
   183e8:	vldr	d7, [pc, #320]	; 18530 <__assert_fail@plt+0x7404>
   183ec:	vcmpe.f64	d8, d7
   183f0:	vmrs	APSR_nzcv, fpscr
   183f4:	movlt	r4, #1
   183f8:	blt	18418 <__assert_fail@plt+0x72ec>
   183fc:	vldr	d6, [pc, #308]	; 18538 <__assert_fail@plt+0x740c>
   18400:	mov	r4, #1
   18404:	vmul.f64	d8, d8, d6
   18408:	add	r4, r4, #1
   1840c:	vcmpe.f64	d8, d7
   18410:	vmrs	APSR_nzcv, fpscr
   18414:	bge	18404 <__assert_fail@plt+0x72d8>
   18418:	ldr	r3, [r0]
   1841c:	mov	r5, r0
   18420:	cmp	r3, r4
   18424:	vmov.f64	d9, d0
   18428:	ldrge	r0, [r0, #8]
   1842c:	blt	184d4 <__assert_fail@plt+0x73a8>
   18430:	vcvt.u32.f64	s15, d8
   18434:	vldr	d4, [pc, #236]	; 18528 <__assert_fail@plt+0x73fc>
   18438:	vcvt.f64.u32	d6, s15
   1843c:	vsub.f64	d8, d8, d6
   18440:	vcmpe.f64	d8, d4
   18444:	vmrs	APSR_nzcv, fpscr
   18448:	bpl	18510 <__assert_fail@plt+0x73e4>
   1844c:	vmov	r1, s15
   18450:	sub	r2, r4, #1
   18454:	sub	r3, r4, #2
   18458:	cmn	r3, #1
   1845c:	str	r1, [r0, r2, lsl #2]
   18460:	beq	184bc <__assert_fail@plt+0x7390>
   18464:	vldr	d3, [pc, #196]	; 18530 <__assert_fail@plt+0x7404>
   18468:	vmul.f64	d8, d8, d3
   1846c:	vcvt.u32.f64	s13, d8
   18470:	vcvt.f64.u32	d7, s13
   18474:	vsub.f64	d7, d8, d7
   18478:	vcmpe.f64	d7, d4
   1847c:	vmrs	APSR_nzcv, fpscr
   18480:	submi	r2, r4, #-1073741823	; 0xc0000001
   18484:	addmi	r2, r0, r2, lsl #2
   18488:	bmi	184ac <__assert_fail@plt+0x7380>
   1848c:	b	184fc <__assert_fail@plt+0x73d0>
   18490:	vmul.f64	d7, d7, d3
   18494:	vcvt.u32.f64	s13, d7
   18498:	vcvt.f64.u32	d5, s13
   1849c:	vsub.f64	d7, d7, d5
   184a0:	vcmpe.f64	d7, d4
   184a4:	vmrs	APSR_nzcv, fpscr
   184a8:	bpl	184fc <__assert_fail@plt+0x73d0>
   184ac:	sub	r3, r3, #1
   184b0:	cmn	r3, #1
   184b4:	vstmdb	r2!, {s13}
   184b8:	bne	18490 <__assert_fail@plt+0x7364>
   184bc:	vcmpe.f64	d9, #0.0
   184c0:	vmrs	APSR_nzcv, fpscr
   184c4:	bmi	184e4 <__assert_fail@plt+0x73b8>
   184c8:	vpop	{d8-d9}
   184cc:	str	r4, [r5, #4]
   184d0:	pop	{r4, r5, r6, pc}
   184d4:	mov	r1, r4
   184d8:	mov	r0, r5
   184dc:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   184e0:	b	18430 <__assert_fail@plt+0x7304>
   184e4:	rsb	r4, r4, #0
   184e8:	b	184c8 <__assert_fail@plt+0x739c>
   184ec:	vpop	{d8-d9}
   184f0:	mov	r3, #0
   184f4:	str	r3, [r0, #4]
   184f8:	pop	{r4, r5, r6, pc}
   184fc:	ldr	r3, [pc, #60]	; 18540 <__assert_fail@plt+0x7414>
   18500:	mov	r2, #1744	; 0x6d0
   18504:	ldr	r1, [pc, #56]	; 18544 <__assert_fail@plt+0x7418>
   18508:	ldr	r0, [pc, #56]	; 18548 <__assert_fail@plt+0x741c>
   1850c:	bl	1112c <__assert_fail@plt>
   18510:	ldr	r3, [pc, #40]	; 18540 <__assert_fail@plt+0x7414>
   18514:	ldr	r2, [pc, #48]	; 1854c <__assert_fail@plt+0x7420>
   18518:	ldr	r1, [pc, #36]	; 18544 <__assert_fail@plt+0x7418>
   1851c:	ldr	r0, [pc, #36]	; 18548 <__assert_fail@plt+0x741c>
   18520:	bl	1112c <__assert_fail@plt>
   18524:	nop			; (mov r0, r0)
   18528:	andeq	r0, r0, r0
   1852c:	svccc	0x00f00000	; IMB
   18530:	andeq	r0, r0, r0
   18534:	mvnsmi	r0, r0
   18538:	andeq	r0, r0, r0
   1853c:	ldclcc	0, cr0, [r0]
   18540:	andeq	r9, r2, ip, asr #27
   18544:	andeq	sl, r2, r4, rrx
   18548:	andeq	sl, r2, ip, asr #2
   1854c:	andeq	r0, r0, r8, asr #13
   18550:	cmp	r0, #0
   18554:	ldrne	r3, [pc, #40]	; 18584 <__assert_fail@plt+0x7458>
   18558:	ldrne	r3, [r3, #4]
   1855c:	strne	r3, [r0]
   18560:	cmp	r1, #0
   18564:	ldrne	r3, [pc, #24]	; 18584 <__assert_fail@plt+0x7458>
   18568:	ldrne	r3, [r3]
   1856c:	strne	r3, [r1]
   18570:	cmp	r2, #0
   18574:	ldrne	r3, [pc, #8]	; 18584 <__assert_fail@plt+0x7458>
   18578:	ldrne	r3, [r3, #8]
   1857c:	strne	r3, [r2]
   18580:	bx	lr
   18584:	andeq	fp, r3, ip, lsl r1
   18588:	push	{r4, lr}
   1858c:	cmp	r0, #0
   18590:	ldr	r4, [pc, #44]	; 185c4 <__assert_fail@plt+0x7498>
   18594:	ldr	lr, [pc, #44]	; 185c8 <__assert_fail@plt+0x749c>
   18598:	ldr	r3, [pc, #44]	; 185cc <__assert_fail@plt+0x74a0>
   1859c:	moveq	r0, r4
   185a0:	ldr	ip, [pc, #40]	; 185d0 <__assert_fail@plt+0x74a4>
   185a4:	cmp	r1, #0
   185a8:	moveq	r1, lr
   185ac:	cmp	r2, #0
   185b0:	moveq	r2, ip
   185b4:	str	r0, [r3, #4]
   185b8:	str	r1, [r3]
   185bc:	str	r2, [r3, #8]
   185c0:	pop	{r4, pc}
   185c4:	andeq	r8, r1, r4, asr r1
   185c8:			; <UNDEFINED> instruction: 0x00017db0
   185cc:	andeq	fp, r3, ip, lsl r1
   185d0:	andeq	r7, r1, ip, lsr #27
   185d4:	cmp	r2, #0
   185d8:	bxle	lr
   185dc:	add	r2, r1, r2, lsl #2
   185e0:	sub	r0, r0, #4
   185e4:	ldr	r3, [r1], #4
   185e8:	cmp	r1, r2
   185ec:	str	r3, [r0, #4]!
   185f0:	bne	185e4 <__assert_fail@plt+0x74b8>
   185f4:	bx	lr
   185f8:	cmp	r2, #0
   185fc:	bxle	lr
   18600:	lsl	r2, r2, #2
   18604:	add	r0, r0, r2
   18608:	add	r2, r1, r2
   1860c:	ldr	r3, [r2, #-4]!
   18610:	cmp	r2, r1
   18614:	str	r3, [r0, #-4]!
   18618:	bne	1860c <__assert_fail@plt+0x74e0>
   1861c:	bx	lr
   18620:	lsl	r3, r2, #2
   18624:	add	r0, r0, r3
   18628:	add	r1, r1, r3
   1862c:	b	18640 <__assert_fail@plt+0x7514>
   18630:	ldr	ip, [r0, #-4]!
   18634:	ldr	r3, [r1, #-4]!
   18638:	cmp	ip, r3
   1863c:	bne	18650 <__assert_fail@plt+0x7524>
   18640:	subs	r2, r2, #1
   18644:	bpl	18630 <__assert_fail@plt+0x7504>
   18648:	mov	r0, #0
   1864c:	bx	lr
   18650:	bls	1865c <__assert_fail@plt+0x7530>
   18654:	mov	r0, #1
   18658:	bx	lr
   1865c:	mvn	r0, #0
   18660:	bx	lr
   18664:	cmp	r1, #0
   18668:	ble	18698 <__assert_fail@plt+0x756c>
   1866c:	sub	r3, r1, #-1073741823	; 0xc0000001
   18670:	ldr	r2, [r0, r3, lsl #2]
   18674:	add	r0, r0, r3, lsl #2
   18678:	cmp	r2, #0
   1867c:	beq	18690 <__assert_fail@plt+0x7564>
   18680:	b	18698 <__assert_fail@plt+0x756c>
   18684:	ldr	r3, [r0, #-4]!
   18688:	cmp	r3, #0
   1868c:	bne	18698 <__assert_fail@plt+0x756c>
   18690:	subs	r1, r1, #1
   18694:	bne	18684 <__assert_fail@plt+0x7558>
   18698:	clz	r0, r1
   1869c:	lsr	r0, r0, #5
   186a0:	bx	lr
   186a4:	cmp	r1, #0
   186a8:	bxle	lr
   186ac:	add	r1, r0, r1, lsl #2
   186b0:	mov	r3, #0
   186b4:	str	r3, [r1, #-4]!
   186b8:	cmp	r1, r0
   186bc:	bne	186b4 <__assert_fail@plt+0x7588>
   186c0:	bx	lr
   186c4:	cmp	r2, #0
   186c8:	subgt	r0, r0, #4
   186cc:	addgt	r2, r1, r2, lsl #2
   186d0:	ble	186f8 <__assert_fail@plt+0x75cc>
   186d4:	ldr	ip, [r1], #4
   186d8:	adds	ip, r3, ip
   186dc:	movcs	r3, #1
   186e0:	movcc	r3, #0
   186e4:	cmp	r1, r2
   186e8:	str	ip, [r0, #4]!
   186ec:	bne	186d4 <__assert_fail@plt+0x75a8>
   186f0:	mov	r0, r3
   186f4:	bx	lr
   186f8:	push	{r4, lr}
   186fc:	bl	11160 <__assert_fail@plt+0x34>
   18700:	cmp	r3, #0
   18704:	ble	18750 <__assert_fail@plt+0x7624>
   18708:	push	{r4, r5, lr}
   1870c:	add	r3, r1, r3, lsl #2
   18710:	sub	r4, r0, #4
   18714:	sub	r2, r2, #4
   18718:	mov	r0, #0
   1871c:	ldr	ip, [r1], #4
   18720:	ldr	lr, [r2, #4]!
   18724:	adds	ip, ip, r0
   18728:	movcs	r5, #1
   1872c:	movcc	r5, #0
   18730:	adds	ip, lr, ip
   18734:	movcs	r0, #1
   18738:	movcc	r0, #0
   1873c:	cmp	r3, r1
   18740:	str	ip, [r4, #4]!
   18744:	add	r0, r0, r5
   18748:	bne	1871c <__assert_fail@plt+0x75f0>
   1874c:	pop	{r4, r5, pc}
   18750:	mov	r0, #0
   18754:	bx	lr
   18758:	push	{r4, r5, r6, r7, r8, lr}
   1875c:	ldr	r7, [sp, #24]
   18760:	cmp	r2, r7
   18764:	blt	187fc <__assert_fail@plt+0x76d0>
   18768:	cmp	r7, #0
   1876c:	movle	ip, #0
   18770:	ble	187b8 <__assert_fail@plt+0x768c>
   18774:	sub	r3, r3, #4
   18778:	mov	r5, r1
   1877c:	sub	r6, r0, #4
   18780:	add	r8, r1, r7, lsl #2
   18784:	mov	ip, #0
   18788:	ldr	lr, [r5], #4
   1878c:	ldr	r4, [r3, #4]!
   18790:	adds	lr, lr, ip
   18794:	movcs	ip, #1
   18798:	movcc	ip, #0
   1879c:	adds	lr, r4, lr
   187a0:	movcs	r4, #1
   187a4:	movcc	r4, #0
   187a8:	cmp	r5, r8
   187ac:	str	lr, [r6, #4]!
   187b0:	add	ip, r4, ip
   187b4:	bne	18788 <__assert_fail@plt+0x765c>
   187b8:	cmp	r2, r7
   187bc:	ble	187f4 <__assert_fail@plt+0x76c8>
   187c0:	sub	r2, r2, r7
   187c4:	lsl	r7, r7, #2
   187c8:	add	r2, r7, r2, lsl #2
   187cc:	add	r2, r1, r2
   187d0:	add	r0, r0, r7
   187d4:	add	r1, r1, r7
   187d8:	ldr	r3, [r1], #4
   187dc:	adds	r3, r3, ip
   187e0:	movcs	ip, #1
   187e4:	movcc	ip, #0
   187e8:	cmp	r2, r1
   187ec:	str	r3, [r0], #4
   187f0:	bne	187d8 <__assert_fail@plt+0x76ac>
   187f4:	mov	r0, ip
   187f8:	pop	{r4, r5, r6, r7, r8, pc}
   187fc:	ldr	r3, [pc, #12]	; 18810 <__assert_fail@plt+0x76e4>
   18800:	mov	r2, #480	; 0x1e0
   18804:	ldr	r1, [pc, #8]	; 18814 <__assert_fail@plt+0x76e8>
   18808:	ldr	r0, [pc, #8]	; 18818 <__assert_fail@plt+0x76ec>
   1880c:	bl	1112c <__assert_fail@plt>
   18810:	ldrdeq	r9, [r2], -r8
   18814:	andeq	sl, r2, r4, rrx
   18818:	andeq	sl, r2, r4, asr r1
   1881c:	push	{r4, r5, r6, r7, r8, lr}
   18820:	mov	r8, r1
   18824:	ldr	r4, [r1, #4]
   18828:	ldr	r5, [r2, #4]
   1882c:	cmp	r4, #0
   18830:	rsblt	r4, r4, #0
   18834:	cmp	r5, #0
   18838:	rsblt	r5, r5, #0
   1883c:	cmp	r4, r5
   18840:	sub	sp, sp, #8
   18844:	mov	r6, r2
   18848:	bge	18860 <__assert_fail@plt+0x7734>
   1884c:	mov	r2, r4
   18850:	mov	r8, r6
   18854:	mov	r4, r5
   18858:	mov	r6, r1
   1885c:	mov	r5, r2
   18860:	ldr	r3, [r0]
   18864:	cmp	r4, r3
   18868:	ldrlt	r7, [r0, #8]
   1886c:	bge	18898 <__assert_fail@plt+0x776c>
   18870:	ldr	r3, [r6, #8]
   18874:	ldr	r1, [r8, #8]
   18878:	mov	r2, r4
   1887c:	str	r5, [sp]
   18880:	mov	r0, r7
   18884:	bl	18758 <__assert_fail@plt+0x762c>
   18888:	str	r0, [r7, r4, lsl #2]
   1888c:	add	r0, r0, r4
   18890:	add	sp, sp, #8
   18894:	pop	{r4, r5, r6, r7, r8, pc}
   18898:	add	r1, r4, #1
   1889c:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   188a0:	mov	r7, r0
   188a4:	b	18870 <__assert_fail@plt+0x7744>
   188a8:	cmp	r2, #0
   188ac:	push	{r4, lr}
   188b0:	addgt	r2, r1, r2, lsl #2
   188b4:	subgt	r0, r0, #4
   188b8:	ble	188e4 <__assert_fail@plt+0x77b8>
   188bc:	ldr	ip, [r1], #4
   188c0:	cmp	r3, ip
   188c4:	sub	lr, ip, r3
   188c8:	movls	r3, #0
   188cc:	movhi	r3, #1
   188d0:	cmp	r1, r2
   188d4:	str	lr, [r0, #4]!
   188d8:	bne	188bc <__assert_fail@plt+0x7790>
   188dc:	mov	r0, r3
   188e0:	pop	{r4, pc}
   188e4:	bl	11188 <__assert_fail@plt+0x5c>
   188e8:	cmp	r3, #0
   188ec:	ble	18934 <__assert_fail@plt+0x7808>
   188f0:	push	{r4, lr}
   188f4:	add	r3, r1, r3, lsl #2
   188f8:	sub	r4, r0, #4
   188fc:	sub	r2, r2, #4
   18900:	mov	r0, #0
   18904:	ldr	ip, [r2, #4]!
   18908:	ldr	lr, [r1], #4
   1890c:	adds	ip, ip, r0
   18910:	movcs	r0, #1
   18914:	movcc	r0, #0
   18918:	cmp	lr, ip
   1891c:	addcc	r0, r0, #1
   18920:	sub	ip, lr, ip
   18924:	cmp	r1, r3
   18928:	str	ip, [r4, #4]!
   1892c:	bne	18904 <__assert_fail@plt+0x77d8>
   18930:	pop	{r4, pc}
   18934:	mov	r0, #0
   18938:	bx	lr
   1893c:	push	{r4, r5, r6, r7, r8, lr}
   18940:	ldr	r6, [sp, #24]
   18944:	cmp	r2, r6
   18948:	blt	189e8 <__assert_fail@plt+0x78bc>
   1894c:	cmp	r6, #0
   18950:	movle	ip, #0
   18954:	ble	18998 <__assert_fail@plt+0x786c>
   18958:	sub	r3, r3, #4
   1895c:	mov	r5, r1
   18960:	sub	r7, r0, #4
   18964:	add	r8, r1, r6, lsl #2
   18968:	mov	ip, #0
   1896c:	ldr	lr, [r3, #4]!
   18970:	ldr	r4, [r5], #4
   18974:	adds	lr, lr, ip
   18978:	movcs	ip, #1
   1897c:	movcc	ip, #0
   18980:	cmp	r4, lr
   18984:	addcc	ip, ip, #1
   18988:	sub	lr, r4, lr
   1898c:	cmp	r5, r8
   18990:	str	lr, [r7, #4]!
   18994:	bne	1896c <__assert_fail@plt+0x7840>
   18998:	cmp	r2, r6
   1899c:	ble	189e0 <__assert_fail@plt+0x78b4>
   189a0:	sub	lr, r2, r6
   189a4:	lsl	r6, r6, #2
   189a8:	add	lr, r6, lr, lsl #2
   189ac:	add	lr, r1, lr
   189b0:	add	r0, r0, r6
   189b4:	add	r1, r1, r6
   189b8:	mov	r2, ip
   189bc:	ldr	r3, [r1], #4
   189c0:	cmp	r3, ip
   189c4:	movcs	ip, #0
   189c8:	movcc	ip, #1
   189cc:	sub	r3, r3, r2
   189d0:	cmp	lr, r1
   189d4:	str	r3, [r0], #4
   189d8:	mov	r2, ip
   189dc:	bne	189bc <__assert_fail@plt+0x7890>
   189e0:	mov	r0, ip
   189e4:	pop	{r4, r5, r6, r7, r8, pc}
   189e8:	ldr	r3, [pc, #12]	; 189fc <__assert_fail@plt+0x78d0>
   189ec:	mov	r2, #532	; 0x214
   189f0:	ldr	r1, [pc, #8]	; 18a00 <__assert_fail@plt+0x78d4>
   189f4:	ldr	r0, [pc, #8]	; 18a04 <__assert_fail@plt+0x78d8>
   189f8:	bl	1112c <__assert_fail@plt>
   189fc:	andeq	r9, r2, r0, ror #27
   18a00:	andeq	sl, r2, r4, rrx
   18a04:	andeq	sl, r2, r4, asr r1
   18a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a0c:	sub	sp, sp, #12
   18a10:	eor	r4, r1, r1, asr #31
   18a14:	ldr	r8, [sp, #48]	; 0x30
   18a18:	eor	r6, r3, r3, asr #31
   18a1c:	sub	r4, r4, r1, asr #31
   18a20:	sub	r6, r6, r3, asr #31
   18a24:	cmp	r4, r6
   18a28:	mov	r7, r1
   18a2c:	mov	r5, r3
   18a30:	mov	r9, r2
   18a34:	ldr	r1, [r2]
   18a38:	ldr	lr, [r8]
   18a3c:	beq	18b2c <__assert_fail@plt+0x7a00>
   18a40:	blt	18ab8 <__assert_fail@plt+0x798c>
   18a44:	ldr	r3, [r0]
   18a48:	cmp	r4, r3
   18a4c:	ldrle	r5, [r0, #8]
   18a50:	bgt	18b5c <__assert_fail@plt+0x7a30>
   18a54:	str	r6, [sp]
   18a58:	mov	r3, lr
   18a5c:	mov	r2, r4
   18a60:	mov	r0, r5
   18a64:	bl	1893c <__assert_fail@plt+0x7810>
   18a68:	cmp	r0, #0
   18a6c:	bne	18b8c <__assert_fail@plt+0x7a60>
   18a70:	cmp	r7, #0
   18a74:	beq	18aa4 <__assert_fail@plt+0x7978>
   18a78:	sub	r3, r4, #-1073741823	; 0xc0000001
   18a7c:	ldr	r2, [r5, r3, lsl #2]
   18a80:	add	r3, r5, r3, lsl #2
   18a84:	cmp	r2, #0
   18a88:	beq	18a9c <__assert_fail@plt+0x7970>
   18a8c:	b	18aa8 <__assert_fail@plt+0x797c>
   18a90:	ldr	r2, [r3, #-4]!
   18a94:	cmp	r2, #0
   18a98:	bne	18aa8 <__assert_fail@plt+0x797c>
   18a9c:	subs	r4, r4, #1
   18aa0:	bne	18a90 <__assert_fail@plt+0x7964>
   18aa4:	mov	r4, #0
   18aa8:	mov	r0, r4
   18aac:	add	sp, sp, #12
   18ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ab4:	bhi	18a44 <__assert_fail@plt+0x7918>
   18ab8:	ldr	r3, [r0]
   18abc:	cmp	r6, r3
   18ac0:	ldrle	r7, [r0, #8]
   18ac4:	bgt	18b74 <__assert_fail@plt+0x7a48>
   18ac8:	mov	r3, r1
   18acc:	str	r4, [sp]
   18ad0:	mov	r1, lr
   18ad4:	mov	r2, r6
   18ad8:	mov	r0, r7
   18adc:	bl	1893c <__assert_fail@plt+0x7810>
   18ae0:	cmp	r0, #0
   18ae4:	bne	18ba0 <__assert_fail@plt+0x7a74>
   18ae8:	cmp	r5, #0
   18aec:	beq	18aa4 <__assert_fail@plt+0x7978>
   18af0:	sub	r3, r6, #-1073741823	; 0xc0000001
   18af4:	ldr	r2, [r7, r3, lsl #2]
   18af8:	add	r3, r7, r3, lsl #2
   18afc:	cmp	r2, #0
   18b00:	rsbne	r4, r6, #0
   18b04:	beq	18b10 <__assert_fail@plt+0x79e4>
   18b08:	b	18aa8 <__assert_fail@plt+0x797c>
   18b0c:	mov	r6, r4
   18b10:	subs	r4, r6, #1
   18b14:	beq	18aa8 <__assert_fail@plt+0x797c>
   18b18:	ldr	r2, [r3, #-4]!
   18b1c:	cmp	r2, #0
   18b20:	beq	18b0c <__assert_fail@plt+0x79e0>
   18b24:	rsb	r4, r6, #1
   18b28:	b	18aa8 <__assert_fail@plt+0x797c>
   18b2c:	lsl	ip, r4, #2
   18b30:	add	r2, r1, ip
   18b34:	mov	r3, r4
   18b38:	add	ip, lr, ip
   18b3c:	b	18b50 <__assert_fail@plt+0x7a24>
   18b40:	ldr	fp, [r2, #-4]!
   18b44:	ldr	sl, [ip, #-4]!
   18b48:	cmp	fp, sl
   18b4c:	bne	18ab4 <__assert_fail@plt+0x7988>
   18b50:	subs	r3, r3, #1
   18b54:	bcs	18b40 <__assert_fail@plt+0x7a14>
   18b58:	b	18aa4 <__assert_fail@plt+0x7978>
   18b5c:	mov	r1, r4
   18b60:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   18b64:	ldr	r1, [r9]
   18b68:	ldr	lr, [r8]
   18b6c:	mov	r5, r0
   18b70:	b	18a54 <__assert_fail@plt+0x7928>
   18b74:	mov	r1, r6
   18b78:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   18b7c:	ldr	lr, [r8]
   18b80:	ldr	r1, [r9]
   18b84:	mov	r7, r0
   18b88:	b	18ac8 <__assert_fail@plt+0x799c>
   18b8c:	ldr	r3, [pc, #32]	; 18bb4 <__assert_fail@plt+0x7a88>
   18b90:	ldr	r2, [pc, #32]	; 18bb8 <__assert_fail@plt+0x7a8c>
   18b94:	ldr	r1, [pc, #32]	; 18bbc <__assert_fail@plt+0x7a90>
   18b98:	ldr	r0, [pc, #32]	; 18bc0 <__assert_fail@plt+0x7a94>
   18b9c:	bl	1112c <__assert_fail@plt>
   18ba0:	ldr	r3, [pc, #12]	; 18bb4 <__assert_fail@plt+0x7a88>
   18ba4:	ldr	r2, [pc, #24]	; 18bc4 <__assert_fail@plt+0x7a98>
   18ba8:	ldr	r1, [pc, #12]	; 18bbc <__assert_fail@plt+0x7a90>
   18bac:	ldr	r0, [pc, #12]	; 18bc0 <__assert_fail@plt+0x7a94>
   18bb0:	bl	1112c <__assert_fail@plt>
   18bb4:	andeq	r9, r2, r8, ror #27
   18bb8:	ldrdeq	r0, [r0], -r6
   18bbc:	andeq	sl, r2, r4, rrx
   18bc0:	andeq	sl, r2, r0, asr #2
   18bc4:	ldrdeq	r0, [r0], -ip
   18bc8:	cmp	r2, #0
   18bcc:	push	{r4, r5, r6, r7, r8, lr}
   18bd0:	ble	18c3c <__assert_fail@plt+0x7b10>
   18bd4:	ldr	r5, [pc, #116]	; 18c50 <__assert_fail@plt+0x7b24>
   18bd8:	mov	r6, r0
   18bdc:	lsr	r7, r3, #16
   18be0:	mov	r0, #0
   18be4:	and	r3, r3, r5
   18be8:	ldr	lr, [r1], #4
   18bec:	and	r4, lr, r5
   18bf0:	lsr	lr, lr, #16
   18bf4:	mul	ip, r3, r4
   18bf8:	mul	r8, r3, lr
   18bfc:	mul	lr, r7, lr
   18c00:	mla	r4, r7, r4, r8
   18c04:	add	r4, r4, ip, lsr #16
   18c08:	and	ip, ip, r5
   18c0c:	cmp	r8, r4
   18c10:	add	ip, ip, r4, lsl #16
   18c14:	addhi	lr, lr, #65536	; 0x10000
   18c18:	adds	ip, ip, r0
   18c1c:	movcs	r0, #1
   18c20:	movcc	r0, #0
   18c24:	add	r0, r0, r4, lsr #16
   18c28:	subs	r2, r2, #1
   18c2c:	str	ip, [r6], #4
   18c30:	add	r0, lr, r0
   18c34:	bne	18be8 <__assert_fail@plt+0x7abc>
   18c38:	pop	{r4, r5, r6, r7, r8, pc}
   18c3c:	ldr	r3, [pc, #16]	; 18c54 <__assert_fail@plt+0x7b28>
   18c40:	ldr	r2, [pc, #16]	; 18c58 <__assert_fail@plt+0x7b2c>
   18c44:	ldr	r1, [pc, #16]	; 18c5c <__assert_fail@plt+0x7b30>
   18c48:	ldr	r0, [pc, #16]	; 18c60 <__assert_fail@plt+0x7b34>
   18c4c:	bl	1112c <__assert_fail@plt>
   18c50:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18c54:	strdeq	r9, [r2], -r4
   18c58:	andeq	r0, r0, r1, lsr #4
   18c5c:	andeq	sl, r2, r4, rrx
   18c60:	andeq	sl, r2, r0, ror #2
   18c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c68:	sub	sp, sp, #12
   18c6c:	subs	fp, r2, #0
   18c70:	ldr	sl, [sp, #48]	; 0x30
   18c74:	beq	18d98 <__assert_fail@plt+0x7c6c>
   18c78:	ldr	r2, [sl]
   18c7c:	mov	r9, r1
   18c80:	mov	r7, r0
   18c84:	mov	r1, r2
   18c88:	sub	r0, fp, #1
   18c8c:	str	r2, [sp, #4]
   18c90:	mov	r6, r3
   18c94:	bl	2630c <__assert_fail@plt+0x151e0>
   18c98:	ldrb	r0, [r9]
   18c9c:	ldr	r2, [sp, #4]
   18ca0:	cmp	r1, #0
   18ca4:	beq	18d7c <__assert_fail@plt+0x7c50>
   18ca8:	mov	r3, r9
   18cac:	add	lr, r9, r1
   18cb0:	ldrb	ip, [r3, #1]!
   18cb4:	cmp	lr, r3
   18cb8:	mla	r0, r0, r6, ip
   18cbc:	bne	18cb0 <__assert_fail@plt+0x7b84>
   18cc0:	add	r5, r1, #1
   18cc4:	cmp	fp, r5
   18cc8:	mov	r8, #1
   18ccc:	str	r0, [r7]
   18cd0:	bls	18d68 <__assert_fail@plt+0x7c3c>
   18cd4:	cmp	r2, #1
   18cd8:	add	r0, r5, #1
   18cdc:	add	r3, r9, r5
   18ce0:	ldrb	r4, [r9, r5]
   18ce4:	bls	18d60 <__assert_fail@plt+0x7c34>
   18ce8:	add	r5, r5, r2
   18cec:	sub	r5, r5, #1
   18cf0:	add	r5, r9, r5
   18cf4:	ldrb	r1, [r3, #1]!
   18cf8:	cmp	r5, r3
   18cfc:	mla	r4, r4, r6, r1
   18d00:	bne	18cf4 <__assert_fail@plt+0x7bc8>
   18d04:	sub	r5, r2, #1
   18d08:	add	r5, r5, r0
   18d0c:	mov	r2, r8
   18d10:	mov	r1, r7
   18d14:	ldr	r3, [sl, #4]
   18d18:	mov	r0, r7
   18d1c:	bl	18bc8 <__assert_fail@plt+0x7a9c>
   18d20:	mov	r2, r7
   18d24:	add	r1, r7, r8, lsl #2
   18d28:	ldr	r3, [r2]
   18d2c:	adds	r4, r4, r3
   18d30:	str	r4, [r2], #4
   18d34:	movcs	r4, #1
   18d38:	movcc	r4, #0
   18d3c:	cmp	r2, r1
   18d40:	bne	18d28 <__assert_fail@plt+0x7bfc>
   18d44:	adds	r0, r0, r4
   18d48:	addne	r8, r8, #1
   18d4c:	strne	r0, [r2]
   18d50:	cmp	fp, r5
   18d54:	bls	18d68 <__assert_fail@plt+0x7c3c>
   18d58:	ldr	r2, [sl]
   18d5c:	b	18cd4 <__assert_fail@plt+0x7ba8>
   18d60:	mov	r5, r0
   18d64:	b	18d0c <__assert_fail@plt+0x7be0>
   18d68:	cmp	fp, r5
   18d6c:	bne	18d84 <__assert_fail@plt+0x7c58>
   18d70:	mov	r0, r8
   18d74:	add	sp, sp, #12
   18d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d7c:	mov	r5, #1
   18d80:	b	18cc4 <__assert_fail@plt+0x7b98>
   18d84:	ldr	r3, [pc, #32]	; 18dac <__assert_fail@plt+0x7c80>
   18d88:	ldr	r2, [pc, #32]	; 18db0 <__assert_fail@plt+0x7c84>
   18d8c:	ldr	r1, [pc, #32]	; 18db4 <__assert_fail@plt+0x7c88>
   18d90:	ldr	r0, [pc, #32]	; 18db8 <__assert_fail@plt+0x7c8c>
   18d94:	bl	1112c <__assert_fail@plt>
   18d98:	ldr	r3, [pc, #12]	; 18dac <__assert_fail@plt+0x7c80>
   18d9c:	ldr	r2, [pc, #24]	; 18dbc <__assert_fail@plt+0x7c90>
   18da0:	ldr	r1, [pc, #12]	; 18db4 <__assert_fail@plt+0x7c88>
   18da4:	ldr	r0, [pc, #20]	; 18dc0 <__assert_fail@plt+0x7c94>
   18da8:	bl	1112c <__assert_fail@plt>
   18dac:	andeq	r9, r2, r0, lsl #28
   18db0:	andeq	r0, r0, r2, ror r5
   18db4:	andeq	sl, r2, r4, rrx
   18db8:	andeq	sl, r2, r0, ror r1
   18dbc:	andeq	r0, r0, sl, asr r5
   18dc0:	andeq	sl, r2, r8, ror #2
   18dc4:	cmp	r2, #0
   18dc8:	push	{r4, r5, r6, r7, r8, lr}
   18dcc:	ble	18e44 <__assert_fail@plt+0x7d18>
   18dd0:	ldr	r6, [pc, #128]	; 18e58 <__assert_fail@plt+0x7d2c>
   18dd4:	lsr	r7, r3, #16
   18dd8:	mov	r5, #0
   18ddc:	and	r3, r3, r6
   18de0:	ldr	lr, [r1], #4
   18de4:	and	r4, lr, r6
   18de8:	lsr	lr, lr, #16
   18dec:	mul	ip, r3, r4
   18df0:	mul	r8, r3, lr
   18df4:	mul	lr, r7, lr
   18df8:	mla	r4, r7, r4, r8
   18dfc:	add	r4, r4, ip, lsr #16
   18e00:	and	ip, ip, r6
   18e04:	add	ip, ip, r4, lsl #16
   18e08:	add	ip, ip, r5
   18e0c:	cmp	r8, r4
   18e10:	addhi	lr, lr, #65536	; 0x10000
   18e14:	ldr	r8, [r0]
   18e18:	cmp	r5, ip
   18e1c:	movls	r5, #0
   18e20:	movhi	r5, #1
   18e24:	add	r4, r5, r4, lsr #16
   18e28:	adds	ip, ip, r8
   18e2c:	adc	r5, lr, r4
   18e30:	subs	r2, r2, #1
   18e34:	str	ip, [r0], #4
   18e38:	bne	18de0 <__assert_fail@plt+0x7cb4>
   18e3c:	mov	r0, r5
   18e40:	pop	{r4, r5, r6, r7, r8, pc}
   18e44:	ldr	r3, [pc, #16]	; 18e5c <__assert_fail@plt+0x7d30>
   18e48:	mov	r2, #568	; 0x238
   18e4c:	ldr	r1, [pc, #12]	; 18e60 <__assert_fail@plt+0x7d34>
   18e50:	ldr	r0, [pc, #12]	; 18e64 <__assert_fail@plt+0x7d38>
   18e54:	bl	1112c <__assert_fail@plt>
   18e58:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18e5c:	andeq	r9, r2, r4, lsl lr
   18e60:	andeq	sl, r2, r4, rrx
   18e64:	andeq	sl, r2, r0, ror #2
   18e68:	cmp	r2, #0
   18e6c:	push	{r4, r5, r6, r7, r8, lr}
   18e70:	ble	18ef0 <__assert_fail@plt+0x7dc4>
   18e74:	ldr	r6, [pc, #136]	; 18f04 <__assert_fail@plt+0x7dd8>
   18e78:	lsr	r7, r3, #16
   18e7c:	mov	lr, #0
   18e80:	and	r3, r3, r6
   18e84:	ldr	r4, [r1], #4
   18e88:	and	r5, r4, r6
   18e8c:	lsr	r4, r4, #16
   18e90:	mul	ip, r3, r5
   18e94:	mul	r8, r3, r4
   18e98:	mul	r4, r7, r4
   18e9c:	mla	r5, r7, r5, r8
   18ea0:	add	r5, r5, ip, lsr #16
   18ea4:	and	ip, ip, r6
   18ea8:	add	ip, ip, r5, lsl #16
   18eac:	add	ip, ip, lr
   18eb0:	cmp	r8, r5
   18eb4:	addhi	r4, r4, #65536	; 0x10000
   18eb8:	ldr	r8, [r0]
   18ebc:	cmp	lr, ip
   18ec0:	movls	lr, #0
   18ec4:	movhi	lr, #1
   18ec8:	sub	ip, r8, ip
   18ecc:	add	lr, lr, r5, lsr #16
   18ed0:	cmp	r8, ip
   18ed4:	addcc	lr, lr, #1
   18ed8:	subs	r2, r2, #1
   18edc:	add	lr, r4, lr
   18ee0:	str	ip, [r0], #4
   18ee4:	bne	18e84 <__assert_fail@plt+0x7d58>
   18ee8:	mov	r0, lr
   18eec:	pop	{r4, r5, r6, r7, r8, pc}
   18ef0:	ldr	r3, [pc, #16]	; 18f08 <__assert_fail@plt+0x7ddc>
   18ef4:	ldr	r2, [pc, #16]	; 18f0c <__assert_fail@plt+0x7de0>
   18ef8:	ldr	r1, [pc, #16]	; 18f10 <__assert_fail@plt+0x7de4>
   18efc:	ldr	r0, [pc, #16]	; 18f14 <__assert_fail@plt+0x7de8>
   18f00:	bl	1112c <__assert_fail@plt>
   18f04:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18f08:	andeq	r9, r2, r4, lsr #28
   18f0c:	andeq	r0, r0, r2, asr r2
   18f10:	andeq	sl, r2, r4, rrx
   18f14:	andeq	sl, r2, r0, ror #2
   18f18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18f1c:	ldr	r4, [sp, #32]
   18f20:	cmp	r2, r4
   18f24:	blt	18fc4 <__assert_fail@plt+0x7e98>
   18f28:	cmp	r4, #0
   18f2c:	ble	19000 <__assert_fail@plt+0x7ed4>
   18f30:	mov	r7, r3
   18f34:	add	r3, r2, r4
   18f38:	mov	r8, r2
   18f3c:	add	r3, r0, r3, lsl #2
   18f40:	cmp	r3, r1
   18f44:	mov	r5, r0
   18f48:	mov	r9, r1
   18f4c:	bls	18f5c <__assert_fail@plt+0x7e30>
   18f50:	add	r2, r1, r2, lsl #2
   18f54:	cmp	r0, r2
   18f58:	bcc	18fec <__assert_fail@plt+0x7ec0>
   18f5c:	cmp	r3, r7
   18f60:	bls	18f70 <__assert_fail@plt+0x7e44>
   18f64:	add	r3, r7, r4, lsl #2
   18f68:	cmp	r5, r3
   18f6c:	bcc	18fd8 <__assert_fail@plt+0x7eac>
   18f70:	ldr	r3, [r7]
   18f74:	mov	r2, r8
   18f78:	mov	r1, r9
   18f7c:	mov	r0, r5
   18f80:	bl	18bc8 <__assert_fail@plt+0x7a9c>
   18f84:	subs	r4, r4, #1
   18f88:	lsl	r6, r8, #2
   18f8c:	str	r0, [r5, r8, lsl #2]
   18f90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f94:	add	r6, r6, #4
   18f98:	add	r6, r5, r6
   18f9c:	add	r5, r5, #4
   18fa0:	mov	r0, r5
   18fa4:	ldr	r3, [r7, #4]!
   18fa8:	mov	r2, r8
   18fac:	mov	r1, r9
   18fb0:	bl	18dc4 <__assert_fail@plt+0x7c98>
   18fb4:	subs	r4, r4, #1
   18fb8:	str	r0, [r6], #4
   18fbc:	bne	18f9c <__assert_fail@plt+0x7e70>
   18fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18fc4:	ldr	r3, [pc, #72]	; 19014 <__assert_fail@plt+0x7ee8>
   18fc8:	ldr	r2, [pc, #72]	; 19018 <__assert_fail@plt+0x7eec>
   18fcc:	ldr	r1, [pc, #72]	; 1901c <__assert_fail@plt+0x7ef0>
   18fd0:	ldr	r0, [pc, #72]	; 19020 <__assert_fail@plt+0x7ef4>
   18fd4:	bl	1112c <__assert_fail@plt>
   18fd8:	ldr	r3, [pc, #52]	; 19014 <__assert_fail@plt+0x7ee8>
   18fdc:	ldr	r2, [pc, #64]	; 19024 <__assert_fail@plt+0x7ef8>
   18fe0:	ldr	r1, [pc, #52]	; 1901c <__assert_fail@plt+0x7ef0>
   18fe4:	ldr	r0, [pc, #60]	; 19028 <__assert_fail@plt+0x7efc>
   18fe8:	bl	1112c <__assert_fail@plt>
   18fec:	ldr	r3, [pc, #32]	; 19014 <__assert_fail@plt+0x7ee8>
   18ff0:	mov	r2, #620	; 0x26c
   18ff4:	ldr	r1, [pc, #32]	; 1901c <__assert_fail@plt+0x7ef0>
   18ff8:	ldr	r0, [pc, #44]	; 1902c <__assert_fail@plt+0x7f00>
   18ffc:	bl	1112c <__assert_fail@plt>
   19000:	ldr	r3, [pc, #12]	; 19014 <__assert_fail@plt+0x7ee8>
   19004:	ldr	r2, [pc, #36]	; 19030 <__assert_fail@plt+0x7f04>
   19008:	ldr	r1, [pc, #12]	; 1901c <__assert_fail@plt+0x7ef0>
   1900c:	ldr	r0, [pc, #32]	; 19034 <__assert_fail@plt+0x7f08>
   19010:	bl	1112c <__assert_fail@plt>
   19014:	andeq	r9, r2, r4, lsr lr
   19018:	andeq	r0, r0, sl, ror #4
   1901c:	andeq	sl, r2, r4, rrx
   19020:	andeq	sl, r2, r8, ror r1
   19024:	andeq	r0, r0, sp, ror #4
   19028:			; <UNDEFINED> instruction: 0x0002a1b4
   1902c:	andeq	sl, r2, ip, lsl #3
   19030:	andeq	r0, r0, fp, ror #4
   19034:	andeq	sl, r2, r4, lsl #3
   19038:	push	{lr}		; (str lr, [sp, #-4]!)
   1903c:	sub	sp, sp, #12
   19040:	mov	ip, r3
   19044:	str	r3, [sp]
   19048:	mov	r3, r2
   1904c:	mov	r2, ip
   19050:	bl	18f18 <__assert_fail@plt+0x7dec>
   19054:	add	sp, sp, #12
   19058:	pop	{pc}		; (ldr pc, [sp], #4)
   1905c:	push	{lr}		; (str lr, [sp, #-4]!)
   19060:	sub	sp, sp, #12
   19064:	mov	r3, r1
   19068:	str	r2, [sp]
   1906c:	bl	18f18 <__assert_fail@plt+0x7dec>
   19070:	add	sp, sp, #12
   19074:	pop	{pc}		; (ldr pc, [sp], #4)
   19078:	cmp	r2, #0
   1907c:	push	{r4, r5, r6, r7, r8, lr}
   19080:	ble	190ec <__assert_fail@plt+0x7fc0>
   19084:	cmp	r3, #0
   19088:	beq	19114 <__assert_fail@plt+0x7fe8>
   1908c:	cmp	r3, #31
   19090:	bhi	19100 <__assert_fail@plt+0x7fd4>
   19094:	lsl	r8, r2, #2
   19098:	add	lr, r1, r8
   1909c:	rsb	r7, r3, #32
   190a0:	ldr	r4, [lr, #-4]
   190a4:	subs	ip, r2, #1
   190a8:	add	r8, r0, r8
   190ac:	sub	lr, lr, #4
   190b0:	lsr	r0, r4, r7
   190b4:	lsl	r4, r4, r3
   190b8:	beq	190e4 <__assert_fail@plt+0x7fb8>
   190bc:	mov	r5, r8
   190c0:	ldr	r1, [lr, #-4]!
   190c4:	subs	ip, ip, #1
   190c8:	orr	r6, r4, r1, lsr r7
   190cc:	lsl	r4, r1, r3
   190d0:	str	r6, [r5, #-4]!
   190d4:	bne	190c0 <__assert_fail@plt+0x7f94>
   190d8:	rsb	r2, r2, r2, lsl #30
   190dc:	add	r8, r8, r2, lsl #2
   190e0:	add	r8, r8, #4
   190e4:	str	r4, [r8, #-4]
   190e8:	pop	{r4, r5, r6, r7, r8, pc}
   190ec:	ldr	r3, [pc, #52]	; 19128 <__assert_fail@plt+0x7ffc>
   190f0:	ldr	r2, [pc, #52]	; 1912c <__assert_fail@plt+0x8000>
   190f4:	ldr	r1, [pc, #52]	; 19130 <__assert_fail@plt+0x8004>
   190f8:	ldr	r0, [pc, #52]	; 19134 <__assert_fail@plt+0x8008>
   190fc:	bl	1112c <__assert_fail@plt>
   19100:	ldr	r3, [pc, #32]	; 19128 <__assert_fail@plt+0x7ffc>
   19104:	ldr	r2, [pc, #44]	; 19138 <__assert_fail@plt+0x800c>
   19108:	ldr	r1, [pc, #32]	; 19130 <__assert_fail@plt+0x8004>
   1910c:	ldr	r0, [pc, #40]	; 1913c <__assert_fail@plt+0x8010>
   19110:	bl	1112c <__assert_fail@plt>
   19114:	ldr	r3, [pc, #12]	; 19128 <__assert_fail@plt+0x7ffc>
   19118:	mov	r2, #660	; 0x294
   1911c:	ldr	r1, [pc, #12]	; 19130 <__assert_fail@plt+0x8004>
   19120:	ldr	r0, [pc, #24]	; 19140 <__assert_fail@plt+0x8014>
   19124:	bl	1112c <__assert_fail@plt>
   19128:	andeq	r9, r2, ip, lsr lr
   1912c:	muleq	r0, r3, r2
   19130:	andeq	sl, r2, r4, rrx
   19134:	andeq	sl, r2, r0, ror #2
   19138:	muleq	r0, r5, r2
   1913c:	andeq	sl, r2, r8, ror #3
   19140:	ldrdeq	sl, [r2], -ip
   19144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19148:	sub	sp, sp, #20
   1914c:	mov	r6, r0
   19150:	str	r3, [sp]
   19154:	ldr	r3, [r3]
   19158:	mov	r5, r2
   1915c:	cmp	r3, #0
   19160:	beq	1926c <__assert_fail@plt+0x8140>
   19164:	cmp	r0, #0
   19168:	movne	r2, #0
   1916c:	strne	r0, [sp, #8]
   19170:	strne	r2, [sp, #4]
   19174:	lslne	r7, r5, #2
   19178:	beq	19280 <__assert_fail@plt+0x8154>
   1917c:	ldr	r8, [sp, #8]
   19180:	mov	r2, r5
   19184:	mov	r0, r8
   19188:	bl	19078 <__assert_fail@plt+0x7f4c>
   1918c:	mov	r1, r8
   19190:	mov	r4, r0
   19194:	ldr	r3, [sp]
   19198:	ldr	sl, [pc, #272]	; 192b0 <__assert_fail@plt+0x8184>
   1919c:	add	r1, r1, r7
   191a0:	ldr	r9, [r3, #12]
   191a4:	ldr	r7, [r3, #4]
   191a8:	lsr	fp, r9, #16
   191ac:	and	r9, r9, sl
   191b0:	b	19204 <__assert_fail@plt+0x80d8>
   191b4:	mul	r3, fp, r3
   191b8:	ldr	r4, [r1, #-4]!
   191bc:	cmp	lr, r2
   191c0:	addhi	r3, r3, #65536	; 0x10000
   191c4:	adds	r0, r0, r4
   191c8:	adc	r3, r3, ip
   191cc:	mul	r2, r3, r7
   191d0:	sub	r4, r4, r2
   191d4:	cmp	r0, r4
   191d8:	movcs	r0, #0
   191dc:	movcc	r0, #1
   191e0:	rsb	r2, r0, #0
   191e4:	and	r2, r2, r7
   191e8:	add	r4, r2, r4
   191ec:	cmp	r7, r4
   191f0:	sub	r3, r3, r0
   191f4:	addls	r3, r3, #1
   191f8:	subls	r4, r4, r7
   191fc:	cmp	r6, #0
   19200:	strne	r3, [r6, r5, lsl #2]
   19204:	lsr	r3, r4, #16
   19208:	and	r2, r4, sl
   1920c:	mul	lr, r9, r3
   19210:	mul	r8, r9, r2
   19214:	mla	r2, fp, r2, lr
   19218:	add	ip, r4, #1
   1921c:	add	r2, r2, r8, lsr #16
   19220:	and	r0, r8, sl
   19224:	subs	r5, r5, #1
   19228:	add	r0, r0, r2, lsl #16
   1922c:	add	ip, ip, r2, lsr #16
   19230:	bpl	191b4 <__assert_fail@plt+0x8088>
   19234:	ldr	r3, [sp, #4]
   19238:	cmp	r3, #0
   1923c:	beq	19258 <__assert_fail@plt+0x812c>
   19240:	ldr	r3, [pc, #108]	; 192b4 <__assert_fail@plt+0x8188>
   19244:	ldr	r2, [sp, #4]
   19248:	ldr	r0, [sp, #8]
   1924c:	ldr	r3, [r3, #8]
   19250:	lsl	r1, r2, #2
   19254:	blx	r3
   19258:	ldr	r3, [sp]
   1925c:	ldr	r0, [r3]
   19260:	lsr	r0, r4, r0
   19264:	add	sp, sp, #20
   19268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1926c:	str	r3, [sp, #4]
   19270:	str	r3, [sp, #8]
   19274:	mov	r4, r3
   19278:	lsl	r7, r2, #2
   1927c:	b	19194 <__assert_fail@plt+0x8068>
   19280:	ldr	r3, [pc, #44]	; 192b4 <__assert_fail@plt+0x8188>
   19284:	lsl	r7, r5, #2
   19288:	mov	r0, r7
   1928c:	ldr	r3, [r3, #4]
   19290:	str	r1, [sp, #12]
   19294:	blx	r3
   19298:	ldr	r3, [sp]
   1929c:	str	r5, [sp, #4]
   192a0:	ldr	r1, [sp, #12]
   192a4:	ldr	r3, [r3]
   192a8:	str	r0, [sp, #8]
   192ac:	b	1917c <__assert_fail@plt+0x8050>
   192b0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   192b4:	andeq	fp, r3, ip, lsl r1
   192b8:	cmp	r2, #0
   192bc:	push	{r4, r5, r6, r7, r8, lr}
   192c0:	ble	19320 <__assert_fail@plt+0x81f4>
   192c4:	cmp	r3, #0
   192c8:	beq	19348 <__assert_fail@plt+0x821c>
   192cc:	cmp	r3, #31
   192d0:	bhi	19334 <__assert_fail@plt+0x8208>
   192d4:	ldr	r4, [r1]
   192d8:	rsb	r7, r3, #32
   192dc:	subs	ip, r2, #1
   192e0:	lsl	r8, r4, r7
   192e4:	add	r1, r1, #4
   192e8:	lsr	r4, r4, r3
   192ec:	beq	19314 <__assert_fail@plt+0x81e8>
   192f0:	mov	r5, r0
   192f4:	ldr	lr, [r1], #4
   192f8:	subs	ip, ip, #1
   192fc:	orr	r6, r4, lr, lsl r7
   19300:	lsr	r4, lr, r3
   19304:	str	r6, [r5], #4
   19308:	bne	192f4 <__assert_fail@plt+0x81c8>
   1930c:	sub	r2, r2, #-1073741823	; 0xc0000001
   19310:	add	r0, r0, r2, lsl #2
   19314:	str	r4, [r0]
   19318:	mov	r0, r8
   1931c:	pop	{r4, r5, r6, r7, r8, pc}
   19320:	ldr	r3, [pc, #52]	; 1935c <__assert_fail@plt+0x8230>
   19324:	ldr	r2, [pc, #52]	; 19360 <__assert_fail@plt+0x8234>
   19328:	ldr	r1, [pc, #52]	; 19364 <__assert_fail@plt+0x8238>
   1932c:	ldr	r0, [pc, #52]	; 19368 <__assert_fail@plt+0x823c>
   19330:	bl	1112c <__assert_fail@plt>
   19334:	ldr	r3, [pc, #32]	; 1935c <__assert_fail@plt+0x8230>
   19338:	ldr	r2, [pc, #44]	; 1936c <__assert_fail@plt+0x8240>
   1933c:	ldr	r1, [pc, #32]	; 19364 <__assert_fail@plt+0x8238>
   19340:	ldr	r0, [pc, #40]	; 19370 <__assert_fail@plt+0x8244>
   19344:	bl	1112c <__assert_fail@plt>
   19348:	ldr	r3, [pc, #12]	; 1935c <__assert_fail@plt+0x8230>
   1934c:	ldr	r2, [pc, #32]	; 19374 <__assert_fail@plt+0x8248>
   19350:	ldr	r1, [pc, #12]	; 19364 <__assert_fail@plt+0x8238>
   19354:	ldr	r0, [pc, #28]	; 19378 <__assert_fail@plt+0x824c>
   19358:	bl	1112c <__assert_fail@plt>
   1935c:	andeq	r9, r2, r8, asr #28
   19360:			; <UNDEFINED> instruction: 0x000002b1
   19364:	andeq	sl, r2, r4, rrx
   19368:	andeq	sl, r2, r0, ror #2
   1936c:			; <UNDEFINED> instruction: 0x000002b3
   19370:	andeq	sl, r2, r8, ror #3
   19374:			; <UNDEFINED> instruction: 0x000002b2
   19378:	ldrdeq	sl, [r2], -ip
   1937c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19380:	sub	sp, sp, #52	; 0x34
   19384:	str	r3, [sp, #8]
   19388:	ldr	r3, [sp, #88]	; 0x58
   1938c:	str	r0, [sp, #16]
   19390:	cmp	r3, #0
   19394:	str	r1, [sp, #36]	; 0x24
   19398:	ldr	r5, [sp, #92]	; 0x5c
   1939c:	ble	19994 <__assert_fail@plt+0x8868>
   193a0:	ldr	r3, [sp, #88]	; 0x58
   193a4:	mov	r4, r2
   193a8:	cmp	r3, r2
   193ac:	bgt	199bc <__assert_fail@plt+0x8890>
   193b0:	ldr	r3, [sp, #88]	; 0x58
   193b4:	cmp	r3, #1
   193b8:	beq	1973c <__assert_fail@plt+0x8610>
   193bc:	ldr	r3, [sp, #88]	; 0x58
   193c0:	cmp	r3, #2
   193c4:	beq	19750 <__assert_fail@plt+0x8624>
   193c8:	ldr	r3, [sp, #88]	; 0x58
   193cc:	ldr	ip, [sp, #8]
   193d0:	sub	r3, r3, #-1073741823	; 0xc0000001
   193d4:	mov	r0, r3
   193d8:	str	r3, [sp, #44]	; 0x2c
   193dc:	ldr	r9, [r5, #4]
   193e0:	ldr	r3, [ip, r3, lsl #2]
   193e4:	lsl	r7, r0, #2
   193e8:	cmp	r9, r3
   193ec:	bne	19980 <__assert_fail@plt+0x8854>
   193f0:	ldr	r3, [sp, #8]
   193f4:	sub	r7, r7, #4
   193f8:	ldr	sl, [r5, #8]
   193fc:	ldr	r3, [r3, r7]
   19400:	ldr	r0, [sp, #88]	; 0x58
   19404:	cmp	sl, r3
   19408:	sub	r8, r0, #-1073741822	; 0xc0000002
   1940c:	bne	1996c <__assert_fail@plt+0x8840>
   19410:	cmp	r9, #0
   19414:	bge	19958 <__assert_fail@plt+0x882c>
   19418:	ldr	r3, [r5]
   1941c:	cmp	r3, #0
   19420:	str	r3, [sp, #40]	; 0x28
   19424:	bne	196f4 <__assert_fail@plt+0x85c8>
   19428:	ldr	r3, [sp, #88]	; 0x58
   1942c:	cmp	r3, #2
   19430:	ldr	r3, [r5, #12]
   19434:	ldrgt	r6, [sp, #40]	; 0x28
   19438:	ble	199a8 <__assert_fail@plt+0x887c>
   1943c:	ldr	r2, [sp, #88]	; 0x58
   19440:	ldr	r1, [sp, #36]	; 0x24
   19444:	sub	r2, r4, r2
   19448:	add	r8, r8, r2
   1944c:	str	r2, [sp, #4]
   19450:	add	r7, r1, r2, lsl #2
   19454:	uxth	r2, r3
   19458:	lsr	r3, r3, #16
   1945c:	str	r3, [sp, #20]
   19460:	uxth	r3, sl
   19464:	str	r3, [sp, #32]
   19468:	ldr	r3, [sp, #88]	; 0x58
   1946c:	add	r8, r1, r8, lsl #2
   19470:	sub	fp, r3, #1
   19474:	lsr	r3, sl, #16
   19478:	str	r3, [sp, #12]
   1947c:	ldr	r3, [sp, #88]	; 0x58
   19480:	str	r2, [sp, #24]
   19484:	sub	r3, r3, #2
   19488:	str	r3, [sp, #28]
   1948c:	ldr	r3, [r8, #4]
   19490:	cmp	r9, r6
   19494:	cmpeq	r3, sl
   19498:	beq	19670 <__assert_fail@plt+0x8544>
   1949c:	ldr	r1, [sp, #24]
   194a0:	lsr	r2, r6, #16
   194a4:	uxth	r0, r6
   194a8:	mul	ip, r1, r2
   194ac:	ldr	lr, [sp, #20]
   194b0:	mul	r1, r1, r0
   194b4:	mla	r0, lr, r0, ip
   194b8:	mul	r2, lr, r2
   194bc:	add	r0, r0, r1, lsr #16
   194c0:	uxth	r1, r1
   194c4:	cmp	ip, r0
   194c8:	add	r1, r1, r0, lsl #16
   194cc:	add	r6, r6, r0, lsr #16
   194d0:	addhi	r2, r2, #65536	; 0x10000
   194d4:	adds	r1, r3, r1
   194d8:	adc	r2, r2, r6
   194dc:	ldr	ip, [sp, #12]
   194e0:	uxth	r0, r2
   194e4:	ldr	r6, [sp, #32]
   194e8:	mul	lr, r0, ip
   194ec:	lsr	r4, r2, #16
   194f0:	mul	r5, r2, r9
   194f4:	mul	r0, r0, r6
   194f8:	mla	ip, r4, r6, lr
   194fc:	sub	r3, r3, r5
   19500:	ldr	r6, [r8]
   19504:	add	ip, ip, r0, lsr #16
   19508:	sub	r3, r3, r9
   1950c:	cmp	r6, sl
   19510:	subcc	r3, r3, #1
   19514:	cmp	lr, ip
   19518:	ldr	lr, [sp, #12]
   1951c:	uxth	r0, r0
   19520:	add	r0, r0, ip, lsl #16
   19524:	mul	r4, r4, lr
   19528:	sub	r6, r6, sl
   1952c:	sub	r3, r3, ip, lsr #16
   19530:	addhi	r4, r4, #65536	; 0x10000
   19534:	cmp	r6, r0
   19538:	subcc	r3, r3, #1
   1953c:	sub	r4, r3, r4
   19540:	cmp	r1, r4
   19544:	movhi	r5, #0
   19548:	movls	r5, #1
   1954c:	rsb	r3, r5, #0
   19550:	sub	r6, r6, r0
   19554:	and	r0, r3, sl
   19558:	adds	r6, r0, r6
   1955c:	and	r3, r3, r9
   19560:	adc	r4, r4, r3
   19564:	add	r2, r2, #1
   19568:	cmp	r9, r4
   1956c:	sub	r5, r2, r5
   19570:	bhi	195a0 <__assert_fail@plt+0x8474>
   19574:	movcc	r3, #1
   19578:	movcs	r3, #0
   1957c:	cmp	r6, sl
   19580:	orrcs	r3, r3, #1
   19584:	cmp	r3, #0
   19588:	beq	19694 <__assert_fail@plt+0x8568>
   1958c:	sub	r4, r4, r9
   19590:	cmp	r6, sl
   19594:	subcc	r4, r4, #1
   19598:	add	r5, r5, #1
   1959c:	sub	r6, r6, sl
   195a0:	mov	r3, r5
   195a4:	mov	r0, r7
   195a8:	ldr	r2, [sp, #28]
   195ac:	ldr	r1, [sp, #8]
   195b0:	bl	18e68 <__assert_fail@plt+0x7d3c>
   195b4:	sub	r7, r7, #4
   195b8:	cmp	r0, r6
   195bc:	movls	r3, #0
   195c0:	movhi	r3, #1
   195c4:	sub	r0, r6, r0
   195c8:	cmp	r3, r4
   195cc:	sub	r6, r4, r3
   195d0:	str	r0, [r8]
   195d4:	bls	1962c <__assert_fail@plt+0x8500>
   195d8:	ldr	r3, [sp, #8]
   195dc:	mov	ip, r7
   195e0:	sub	r0, r3, #4
   195e4:	mov	r3, #0
   195e8:	mov	r1, r3
   195ec:	ldr	lr, [ip, #4]
   195f0:	ldr	r2, [r0, #4]!
   195f4:	adds	r3, r3, lr
   195f8:	movcs	lr, #1
   195fc:	movcc	lr, #0
   19600:	add	r1, r1, #1
   19604:	adds	r2, r2, r3
   19608:	movcs	r3, #1
   1960c:	movcc	r3, #0
   19610:	cmp	r1, fp
   19614:	str	r2, [ip, #4]!
   19618:	add	r3, r3, lr
   1961c:	blt	195ec <__assert_fail@plt+0x84c0>
   19620:	add	r6, r9, r6
   19624:	add	r6, r3, r6
   19628:	sub	r5, r5, #1
   1962c:	ldr	r3, [sp, #16]
   19630:	sub	r8, r8, #4
   19634:	cmp	r3, #0
   19638:	ldrne	r2, [sp, #4]
   1963c:	strne	r5, [r3, r2, lsl #2]
   19640:	ldr	r3, [sp, #4]
   19644:	subs	r3, r3, #1
   19648:	str	r3, [sp, #4]
   1964c:	bpl	1948c <__assert_fail@plt+0x8360>
   19650:	ldr	r3, [sp, #40]	; 0x28
   19654:	ldr	r2, [sp, #44]	; 0x2c
   19658:	cmp	r3, #0
   1965c:	ldr	r3, [sp, #36]	; 0x24
   19660:	str	r6, [r3, r2, lsl #2]
   19664:	bne	196c4 <__assert_fail@plt+0x8598>
   19668:	add	sp, sp, #52	; 0x34
   1966c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19670:	mov	r0, r7
   19674:	mvn	r3, #0
   19678:	ldr	r2, [sp, #88]	; 0x58
   1967c:	ldr	r1, [sp, #8]
   19680:	bl	18e68 <__assert_fail@plt+0x7d3c>
   19684:	mvn	r5, #0
   19688:	sub	r7, r7, #4
   1968c:	ldr	r6, [r8, #4]
   19690:	b	1962c <__assert_fail@plt+0x8500>
   19694:	mov	r3, r5
   19698:	mov	r0, r7
   1969c:	ldr	r2, [sp, #28]
   196a0:	ldr	r1, [sp, #8]
   196a4:	bl	18e68 <__assert_fail@plt+0x7d3c>
   196a8:	sub	r7, r7, #4
   196ac:	sub	r3, r6, r0
   196b0:	str	r3, [r8]
   196b4:	cmp	r6, r0
   196b8:	movcs	r6, r4
   196bc:	subcc	r6, r4, #1
   196c0:	b	1962c <__assert_fail@plt+0x8500>
   196c4:	ldr	r1, [sp, #36]	; 0x24
   196c8:	ldr	r3, [sp, #40]	; 0x28
   196cc:	ldr	r2, [sp, #88]	; 0x58
   196d0:	mov	r0, r1
   196d4:	bl	192b8 <__assert_fail@plt+0x818c>
   196d8:	cmp	r0, #0
   196dc:	beq	19668 <__assert_fail@plt+0x853c>
   196e0:	ldr	r3, [pc, #764]	; 199e4 <__assert_fail@plt+0x88b8>
   196e4:	ldr	r2, [pc, #764]	; 199e8 <__assert_fail@plt+0x88bc>
   196e8:	ldr	r1, [pc, #764]	; 199ec <__assert_fail@plt+0x88c0>
   196ec:	ldr	r0, [pc, #764]	; 199f0 <__assert_fail@plt+0x88c4>
   196f0:	bl	1112c <__assert_fail@plt>
   196f4:	ldr	r0, [sp, #36]	; 0x24
   196f8:	bl	19078 <__assert_fail@plt+0x7f4c>
   196fc:	ldr	r3, [sp, #88]	; 0x58
   19700:	cmp	r3, #2
   19704:	ldr	r3, [r5, #12]
   19708:	mov	r6, r0
   1970c:	ble	199a8 <__assert_fail@plt+0x887c>
   19710:	ldr	r2, [sp, #8]
   19714:	ldr	r1, [sp, #44]	; 0x2c
   19718:	ldr	sl, [r2, r7]
   1971c:	ldr	r9, [r2, r1, lsl #2]
   19720:	cmp	r9, #0
   19724:	blt	1943c <__assert_fail@plt+0x8310>
   19728:	ldr	r3, [pc, #708]	; 199f4 <__assert_fail@plt+0x88c8>
   1972c:	ldr	r2, [pc, #708]	; 199f8 <__assert_fail@plt+0x88cc>
   19730:	ldr	r1, [pc, #692]	; 199ec <__assert_fail@plt+0x88c0>
   19734:	ldr	r0, [pc, #704]	; 199fc <__assert_fail@plt+0x88d0>
   19738:	bl	1112c <__assert_fail@plt>
   1973c:	mov	r3, r5
   19740:	bl	19144 <__assert_fail@plt+0x8018>
   19744:	ldr	r3, [sp, #36]	; 0x24
   19748:	str	r0, [r3]
   1974c:	b	19668 <__assert_fail@plt+0x853c>
   19750:	cmp	r2, #1
   19754:	ble	19944 <__assert_fail@plt+0x8818>
   19758:	ldr	r3, [r5]
   1975c:	ldr	r6, [r5, #4]
   19760:	cmp	r3, #0
   19764:	str	r3, [sp, #28]
   19768:	ldr	r7, [r5, #8]
   1976c:	ldr	fp, [r5, #12]
   19770:	bne	19928 <__assert_fail@plt+0x87fc>
   19774:	uxth	r2, fp
   19778:	mov	r0, r3
   1977c:	lsr	fp, fp, #16
   19780:	str	r2, [sp, #24]
   19784:	ldr	r2, [sp, #36]	; 0x24
   19788:	sub	r3, r4, #-1073741823	; 0xc0000001
   1978c:	ldr	r8, [pc, #620]	; 19a00 <__assert_fail@plt+0x88d4>
   19790:	ldr	r1, [sp, #16]
   19794:	sub	r4, r4, #2
   19798:	ldr	lr, [r2, r3, lsl #2]
   1979c:	add	r3, r2, r3, lsl #2
   197a0:	str	r3, [sp, #4]
   197a4:	and	r3, r7, r8
   197a8:	str	r3, [sp, #20]
   197ac:	add	r9, r1, r4, lsl #2
   197b0:	lsr	r3, r7, #16
   197b4:	mov	r5, r0
   197b8:	str	r3, [sp, #8]
   197bc:	sub	r3, r1, #4
   197c0:	str	r3, [sp, #12]
   197c4:	ldr	r1, [sp, #24]
   197c8:	lsr	r3, r5, #16
   197cc:	and	r2, r5, r8
   197d0:	mul	r0, r1, r3
   197d4:	mul	r1, r1, r2
   197d8:	mla	r2, fp, r2, r0
   197dc:	mul	r3, fp, r3
   197e0:	add	r2, r2, r1, lsr #16
   197e4:	cmp	r0, r2
   197e8:	ldr	r0, [sp, #4]
   197ec:	and	r1, r1, r8
   197f0:	add	r1, r1, r2, lsl #16
   197f4:	ldr	ip, [r0, #-4]!
   197f8:	add	r5, r5, r2, lsr #16
   197fc:	addhi	r3, r3, #65536	; 0x10000
   19800:	adds	r1, r1, lr
   19804:	adc	r3, r3, r5
   19808:	ldr	r2, [sp, #8]
   1980c:	str	r0, [sp, #4]
   19810:	and	r0, r3, r8
   19814:	ldr	r4, [sp, #20]
   19818:	mul	sl, r2, r0
   1981c:	mul	r2, r3, r6
   19820:	lsr	r5, r3, #16
   19824:	mul	r0, r4, r0
   19828:	sub	r2, lr, r2
   1982c:	mla	r4, r4, r5, sl
   19830:	ldr	lr, [sp, #8]
   19834:	add	r4, r4, r0, lsr #16
   19838:	sub	r2, r2, r6
   1983c:	mul	r5, lr, r5
   19840:	cmp	r7, ip
   19844:	subhi	r2, r2, #1
   19848:	and	r0, r0, r8
   1984c:	cmp	sl, r4
   19850:	add	r0, r0, r4, lsl #16
   19854:	sub	ip, ip, r7
   19858:	sub	r4, r2, r4, lsr #16
   1985c:	addhi	r5, r5, #65536	; 0x10000
   19860:	cmp	ip, r0
   19864:	subcc	r4, r4, #1
   19868:	sub	r5, r4, r5
   1986c:	cmp	r1, r5
   19870:	movhi	r1, #0
   19874:	movls	r1, #1
   19878:	rsb	r4, r1, #0
   1987c:	and	lr, r7, r4
   19880:	sub	ip, ip, r0
   19884:	adds	lr, lr, ip
   19888:	and	r4, r4, r6
   1988c:	adc	r5, r5, r4
   19890:	add	r3, r3, #1
   19894:	cmp	r6, r5
   19898:	sub	r1, r3, r1
   1989c:	bhi	198cc <__assert_fail@plt+0x87a0>
   198a0:	movcc	r3, #1
   198a4:	movcs	r3, #0
   198a8:	cmp	r7, lr
   198ac:	orrls	r3, r3, #1
   198b0:	cmp	r3, #0
   198b4:	beq	198cc <__assert_fail@plt+0x87a0>
   198b8:	sub	r5, r5, r6
   198bc:	cmp	r7, lr
   198c0:	subhi	r5, r5, #1
   198c4:	add	r1, r1, #1
   198c8:	sub	lr, lr, r7
   198cc:	ldr	r3, [sp, #16]
   198d0:	sub	r9, r9, #4
   198d4:	cmp	r3, #0
   198d8:	ldr	r3, [sp, #12]
   198dc:	strne	r1, [r9, #4]
   198e0:	cmp	r3, r9
   198e4:	bne	197c4 <__assert_fail@plt+0x8698>
   198e8:	ldr	r3, [sp, #28]
   198ec:	mov	r0, r5
   198f0:	cmp	r3, #0
   198f4:	beq	19918 <__assert_fail@plt+0x87ec>
   198f8:	rsb	r3, r3, #32
   198fc:	mvn	r2, #0
   19900:	ands	r2, lr, r2, lsr r3
   19904:	bne	199d0 <__assert_fail@plt+0x88a4>
   19908:	ldr	r2, [sp, #28]
   1990c:	lsl	r3, r5, r3
   19910:	lsr	r0, r5, r2
   19914:	orr	lr, r3, lr, lsr r2
   19918:	ldr	r3, [sp, #36]	; 0x24
   1991c:	str	r0, [r3, #4]
   19920:	str	lr, [r3]
   19924:	b	19668 <__assert_fail@plt+0x853c>
   19928:	ldr	r3, [sp, #28]
   1992c:	ldr	r0, [sp, #36]	; 0x24
   19930:	bl	19078 <__assert_fail@plt+0x7f4c>
   19934:	uxth	r3, fp
   19938:	str	r3, [sp, #24]
   1993c:	lsr	fp, fp, #16
   19940:	b	19784 <__assert_fail@plt+0x8658>
   19944:	ldr	r3, [pc, #184]	; 19a04 <__assert_fail@plt+0x88d8>
   19948:	ldr	r2, [pc, #184]	; 19a08 <__assert_fail@plt+0x88dc>
   1994c:	ldr	r1, [pc, #152]	; 199ec <__assert_fail@plt+0x88c0>
   19950:	ldr	r0, [pc, #180]	; 19a0c <__assert_fail@plt+0x88e0>
   19954:	bl	1112c <__assert_fail@plt>
   19958:	ldr	r3, [pc, #132]	; 199e4 <__assert_fail@plt+0x88b8>
   1995c:	ldr	r2, [pc, #172]	; 19a10 <__assert_fail@plt+0x88e4>
   19960:	ldr	r1, [pc, #132]	; 199ec <__assert_fail@plt+0x88c0>
   19964:	ldr	r0, [pc, #168]	; 19a14 <__assert_fail@plt+0x88e8>
   19968:	bl	1112c <__assert_fail@plt>
   1996c:	ldr	r3, [pc, #112]	; 199e4 <__assert_fail@plt+0x88b8>
   19970:	ldr	r2, [pc, #160]	; 19a18 <__assert_fail@plt+0x88ec>
   19974:	ldr	r1, [pc, #112]	; 199ec <__assert_fail@plt+0x88c0>
   19978:	ldr	r0, [pc, #156]	; 19a1c <__assert_fail@plt+0x88f0>
   1997c:	bl	1112c <__assert_fail@plt>
   19980:	ldr	r3, [pc, #92]	; 199e4 <__assert_fail@plt+0x88b8>
   19984:	ldr	r2, [pc, #148]	; 19a20 <__assert_fail@plt+0x88f4>
   19988:	ldr	r1, [pc, #92]	; 199ec <__assert_fail@plt+0x88c0>
   1998c:	ldr	r0, [pc, #144]	; 19a24 <__assert_fail@plt+0x88f8>
   19990:	bl	1112c <__assert_fail@plt>
   19994:	ldr	r3, [pc, #72]	; 199e4 <__assert_fail@plt+0x88b8>
   19998:	ldr	r2, [pc, #136]	; 19a28 <__assert_fail@plt+0x88fc>
   1999c:	ldr	r1, [pc, #72]	; 199ec <__assert_fail@plt+0x88c0>
   199a0:	ldr	r0, [pc, #132]	; 19a2c <__assert_fail@plt+0x8900>
   199a4:	bl	1112c <__assert_fail@plt>
   199a8:	ldr	r3, [pc, #68]	; 199f4 <__assert_fail@plt+0x88c8>
   199ac:	ldr	r2, [pc, #124]	; 19a30 <__assert_fail@plt+0x8904>
   199b0:	ldr	r1, [pc, #52]	; 199ec <__assert_fail@plt+0x88c0>
   199b4:	ldr	r0, [pc, #120]	; 19a34 <__assert_fail@plt+0x8908>
   199b8:	bl	1112c <__assert_fail@plt>
   199bc:	ldr	r3, [pc, #32]	; 199e4 <__assert_fail@plt+0x88b8>
   199c0:	ldr	r2, [pc, #112]	; 19a38 <__assert_fail@plt+0x890c>
   199c4:	ldr	r1, [pc, #32]	; 199ec <__assert_fail@plt+0x88c0>
   199c8:	ldr	r0, [pc, #108]	; 19a3c <__assert_fail@plt+0x8910>
   199cc:	bl	1112c <__assert_fail@plt>
   199d0:	ldr	r3, [pc, #44]	; 19a04 <__assert_fail@plt+0x88d8>
   199d4:	ldr	r2, [pc, #100]	; 19a40 <__assert_fail@plt+0x8914>
   199d8:	ldr	r1, [pc, #12]	; 199ec <__assert_fail@plt+0x88c0>
   199dc:	ldr	r0, [pc, #96]	; 19a44 <__assert_fail@plt+0x8918>
   199e0:	bl	1112c <__assert_fail@plt>
   199e4:	andeq	r9, r2, r4, asr lr
   199e8:	andeq	r0, r0, r2, ror r4
   199ec:	andeq	sl, r2, r4, rrx
   199f0:	andeq	sl, r2, r0, asr #2
   199f4:	andeq	r9, r2, ip, ror lr
   199f8:	andeq	r0, r0, r7, lsr #8
   199fc:	andeq	sl, r2, r4, lsr #5
   19a00:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   19a04:	andeq	r9, r2, r8, ror #28
   19a08:	strdeq	r0, [r0], -r1
   19a0c:	andeq	sl, r2, r0, lsl r2
   19a10:	andeq	r0, r0, r7, ror #8
   19a14:	andeq	sl, r2, r8, ror r2
   19a18:	andeq	r0, r0, r6, ror #8
   19a1c:	andeq	sl, r2, r4, ror #4
   19a20:	andeq	r0, r0, r5, ror #8
   19a24:	andeq	sl, r2, r0, asr r2
   19a28:	andeq	r0, r0, r9, asr r4
   19a2c:	strdeq	sl, [r2], -ip
   19a30:	andeq	r0, r0, r1, lsr #8
   19a34:	muleq	r2, ip, r2
   19a38:	andeq	r0, r0, sl, asr r4
   19a3c:	andeq	sl, r2, r4, lsl #4
   19a40:	andeq	r0, r0, ip, lsl #8
   19a44:	andeq	sl, r2, r8, lsl r2
   19a48:	lsr	r3, r1, #5
   19a4c:	push	{lr}		; (str lr, [sp, #-4]!)
   19a50:	mov	r2, r0
   19a54:	sub	sp, sp, #12
   19a58:	ldr	r0, [r0, r3, lsl #2]
   19a5c:	mvn	lr, #0
   19a60:	and	r1, r1, #31
   19a64:	mov	ip, #0
   19a68:	and	r0, r0, lr, lsl r1
   19a6c:	str	ip, [sp]
   19a70:	mov	r1, r3
   19a74:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   19a78:	add	sp, sp, #12
   19a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   19a80:	lsr	r3, r1, #5
   19a84:	mvn	ip, #0
   19a88:	and	r1, r1, #31
   19a8c:	push	{lr}		; (str lr, [sp, #-4]!)
   19a90:	lsl	r1, ip, r1
   19a94:	sub	sp, sp, #12
   19a98:	mov	r2, r0
   19a9c:	ldr	r0, [r0, r3, lsl #2]
   19aa0:	str	ip, [sp]
   19aa4:	bic	r0, r1, r0
   19aa8:	mov	r1, r3
   19aac:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   19ab0:	add	sp, sp, #12
   19ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ab8:	subs	r2, r2, #1
   19abc:	bxmi	lr
   19ac0:	sub	r0, r0, #4
   19ac4:	ldr	r3, [r1], #4
   19ac8:	sub	r2, r2, #1
   19acc:	mvn	r3, r3
   19ad0:	cmn	r2, #1
   19ad4:	str	r3, [r0, #4]!
   19ad8:	bne	19ac4 <__assert_fail@plt+0x8998>
   19adc:	bx	lr
   19ae0:	ldr	r3, [r1]
   19ae4:	push	{lr}		; (str lr, [sp, #-4]!)
   19ae8:	cmp	r3, #0
   19aec:	bne	19b28 <__assert_fail@plt+0x89fc>
   19af0:	subs	r2, r2, #1
   19af4:	str	r3, [r0]
   19af8:	beq	19b5c <__assert_fail@plt+0x8a30>
   19afc:	add	ip, r1, #4
   19b00:	add	lr, r0, #4
   19b04:	b	19b14 <__assert_fail@plt+0x89e8>
   19b08:	subs	r2, r2, #1
   19b0c:	str	r3, [lr], #4
   19b10:	beq	19b5c <__assert_fail@plt+0x8a30>
   19b14:	mov	r1, ip
   19b18:	ldr	r3, [ip], #4
   19b1c:	mov	r0, lr
   19b20:	cmp	r3, #0
   19b24:	beq	19b08 <__assert_fail@plt+0x89dc>
   19b28:	rsb	r3, r3, #0
   19b2c:	subs	r2, r2, #2
   19b30:	str	r3, [r0]
   19b34:	add	r1, r1, #4
   19b38:	bmi	19b54 <__assert_fail@plt+0x8a28>
   19b3c:	ldr	r3, [r1], #4
   19b40:	sub	r2, r2, #1
   19b44:	mvn	r3, r3
   19b48:	cmn	r2, #1
   19b4c:	str	r3, [r0, #4]!
   19b50:	bne	19b3c <__assert_fail@plt+0x8a10>
   19b54:	mov	r0, #1
   19b58:	pop	{pc}		; (ldr pc, [sp], #4)
   19b5c:	mov	r0, #0
   19b60:	pop	{pc}		; (ldr pc, [sp], #4)
   19b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b68:	mov	r6, r0
   19b6c:	ldr	r7, [r1, #4]
   19b70:	sub	sp, sp, #12
   19b74:	cmp	r2, #0
   19b78:	cmpne	r7, #0
   19b7c:	moveq	r3, #0
   19b80:	streq	r3, [r0, #4]
   19b84:	beq	19c98 <__assert_fail@plt+0x8b6c>
   19b88:	mov	fp, r2
   19b8c:	add	r8, fp, #31
   19b90:	mov	sl, r3
   19b94:	lsr	r9, r8, #5
   19b98:	cmp	r9, #0
   19b9c:	mov	r2, r1
   19ba0:	mov	r4, r9
   19ba4:	beq	19d40 <__assert_fail@plt+0x8c14>
   19ba8:	ldr	r3, [r0]
   19bac:	cmp	r9, r3
   19bb0:	ldrle	r5, [r0, #8]
   19bb4:	bgt	19ca0 <__assert_fail@plt+0x8b74>
   19bb8:	bic	r8, r8, #31
   19bbc:	sub	r8, r8, fp
   19bc0:	eor	fp, r7, r7, asr #31
   19bc4:	mvn	r3, #0
   19bc8:	sub	fp, fp, r7, asr #31
   19bcc:	cmp	r9, fp
   19bd0:	lsr	r8, r3, r8
   19bd4:	ble	19c18 <__assert_fail@plt+0x8aec>
   19bd8:	cmp	r7, #0
   19bdc:	movle	r1, #0
   19be0:	movgt	r1, #1
   19be4:	cmp	sl, r1
   19be8:	beq	19cdc <__assert_fail@plt+0x8bb0>
   19bec:	cmp	r2, r6
   19bf0:	beq	19c10 <__assert_fail@plt+0x8ae4>
   19bf4:	ldr	r3, [r2, #8]
   19bf8:	sub	r2, r5, #4
   19bfc:	add	r0, r3, fp, lsl #2
   19c00:	ldr	r1, [r3], #4
   19c04:	cmp	r3, r0
   19c08:	str	r1, [r2, #4]!
   19c0c:	bne	19c00 <__assert_fail@plt+0x8ad4>
   19c10:	mov	r4, fp
   19c14:	b	19c74 <__assert_fail@plt+0x8b48>
   19c18:	cmp	r2, r6
   19c1c:	ldreq	ip, [r6, #8]
   19c20:	beq	19c50 <__assert_fail@plt+0x8b24>
   19c24:	cmp	r9, #1
   19c28:	ldr	ip, [r2, #8]
   19c2c:	beq	19c50 <__assert_fail@plt+0x8b24>
   19c30:	sub	r3, r9, #-1073741822	; 0xc0000002
   19c34:	sub	r2, ip, #4
   19c38:	add	r3, ip, r3, lsl #2
   19c3c:	sub	r1, r5, #4
   19c40:	ldr	r0, [r2, #4]!
   19c44:	cmp	r2, r3
   19c48:	str	r0, [r1, #4]!
   19c4c:	bne	19c40 <__assert_fail@plt+0x8b14>
   19c50:	sub	fp, r9, #-1073741823	; 0xc0000001
   19c54:	cmp	r7, #0
   19c58:	ldr	r3, [ip, fp, lsl #2]
   19c5c:	movle	r2, #0
   19c60:	movgt	r2, #1
   19c64:	and	r3, r3, r8
   19c68:	cmp	sl, r2
   19c6c:	str	r3, [r5, fp, lsl #2]
   19c70:	beq	19cb8 <__assert_fail@plt+0x8b8c>
   19c74:	add	r3, r5, r4, lsl #2
   19c78:	ldr	r2, [r3, #-4]!
   19c7c:	cmp	r2, #0
   19c80:	bne	19c8c <__assert_fail@plt+0x8b60>
   19c84:	subs	r4, r4, #1
   19c88:	bne	19c78 <__assert_fail@plt+0x8b4c>
   19c8c:	cmp	r7, #0
   19c90:	rsblt	r4, r4, #0
   19c94:	str	r4, [r6, #4]
   19c98:	add	sp, sp, #12
   19c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ca0:	str	r1, [sp, #4]
   19ca4:	mov	r1, r9
   19ca8:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   19cac:	ldr	r2, [sp, #4]
   19cb0:	mov	r5, r0
   19cb4:	b	19bb8 <__assert_fail@plt+0x8a8c>
   19cb8:	mov	r2, r9
   19cbc:	mov	r1, r5
   19cc0:	mov	r0, r5
   19cc4:	bl	19ae0 <__assert_fail@plt+0x89b4>
   19cc8:	ldr	r3, [r5, fp, lsl #2]
   19ccc:	rsb	r7, r7, #0
   19cd0:	and	r8, r8, r3
   19cd4:	str	r8, [r5, fp, lsl #2]
   19cd8:	b	19c74 <__assert_fail@plt+0x8b48>
   19cdc:	ldr	r1, [r2, #8]
   19ce0:	mov	r0, r5
   19ce4:	mov	r2, fp
   19ce8:	str	r3, [sp, #4]
   19cec:	bl	19ae0 <__assert_fail@plt+0x89b4>
   19cf0:	cmp	r0, #0
   19cf4:	beq	19d2c <__assert_fail@plt+0x8c00>
   19cf8:	sub	r2, r9, #1
   19cfc:	sub	r9, r9, #-1073741823	; 0xc0000001
   19d00:	cmp	fp, r2
   19d04:	ldr	r3, [sp, #4]
   19d08:	addlt	fp, r5, fp, lsl #2
   19d0c:	addlt	r2, r5, r9, lsl #2
   19d10:	bge	19d20 <__assert_fail@plt+0x8bf4>
   19d14:	str	r3, [fp], #4
   19d18:	cmp	r2, fp
   19d1c:	bne	19d14 <__assert_fail@plt+0x8be8>
   19d20:	str	r8, [r5, r9, lsl #2]
   19d24:	rsb	r7, r7, #0
   19d28:	b	19c74 <__assert_fail@plt+0x8b48>
   19d2c:	ldr	r3, [pc, #32]	; 19d54 <__assert_fail@plt+0x8c28>
   19d30:	ldr	r2, [pc, #32]	; 19d58 <__assert_fail@plt+0x8c2c>
   19d34:	ldr	r1, [pc, #32]	; 19d5c <__assert_fail@plt+0x8c30>
   19d38:	ldr	r0, [pc, #32]	; 19d60 <__assert_fail@plt+0x8c34>
   19d3c:	bl	1112c <__assert_fail@plt>
   19d40:	ldr	r3, [pc, #12]	; 19d54 <__assert_fail@plt+0x8c28>
   19d44:	ldr	r2, [pc, #24]	; 19d64 <__assert_fail@plt+0x8c38>
   19d48:	ldr	r1, [pc, #12]	; 19d5c <__assert_fail@plt+0x8c30>
   19d4c:	ldr	r0, [pc, #20]	; 19d68 <__assert_fail@plt+0x8c3c>
   19d50:	bl	1112c <__assert_fail@plt>
   19d54:	andeq	r9, r2, ip, lsl #29
   19d58:	andeq	r0, r0, fp, lsl #19
   19d5c:	andeq	sl, r2, r4, rrx
   19d60:	andeq	sl, r2, r0, asr #2
   19d64:	andeq	r0, r0, fp, ror r9
   19d68:	andeq	sl, r2, r4, asr #5
   19d6c:	push	{r4, r5, r6, r7, r8, lr}
   19d70:	lsr	r8, r0, #16
   19d74:	mvn	r7, r0
   19d78:	mov	r4, r0
   19d7c:	mov	r5, r1
   19d80:	mov	r0, r7
   19d84:	mov	r1, r8
   19d88:	bl	26120 <__assert_fail@plt+0x14ff4>
   19d8c:	mov	r1, r8
   19d90:	mov	r6, r0
   19d94:	mov	r0, r7
   19d98:	bl	2630c <__assert_fail@plt+0x151e0>
   19d9c:	ldr	r3, [pc, #276]	; 19eb8 <__assert_fail@plt+0x8d8c>
   19da0:	and	r2, r4, r3
   19da4:	mul	r2, r6, r2
   19da8:	orr	r1, r3, r1, lsl #16
   19dac:	cmp	r1, r2
   19db0:	bcs	19ddc <__assert_fail@plt+0x8cb0>
   19db4:	add	r1, r1, r4
   19db8:	cmp	r2, r1
   19dbc:	movhi	r3, #1
   19dc0:	movls	r3, #0
   19dc4:	cmp	r4, r1
   19dc8:	movhi	r3, #0
   19dcc:	cmp	r3, #0
   19dd0:	subeq	r6, r6, #1
   19dd4:	subne	r6, r6, #2
   19dd8:	addne	r1, r1, r4
   19ddc:	sub	r1, r1, r2
   19de0:	lsr	r2, r1, #16
   19de4:	lsl	r3, r1, #16
   19de8:	mla	r1, r6, r2, r1
   19dec:	add	r3, r3, #65280	; 0xff00
   19df0:	add	r3, r3, #255	; 0xff
   19df4:	lsr	r2, r1, #16
   19df8:	add	r0, r2, #1
   19dfc:	mul	ip, r0, r4
   19e00:	sub	r3, r3, ip
   19e04:	cmp	r3, r1, lsl #16
   19e08:	addcs	r3, r3, r4
   19e0c:	movcs	r0, r2
   19e10:	add	r0, r0, r6, lsl #16
   19e14:	cmp	r3, r4
   19e18:	addcs	r0, r0, #1
   19e1c:	subcs	r3, r3, r4
   19e20:	cmp	r5, #0
   19e24:	popeq	{r4, r5, r6, r7, r8, pc}
   19e28:	mvn	r3, r3
   19e2c:	adds	r3, r5, r3
   19e30:	bcc	19e48 <__assert_fail@plt+0x8d1c>
   19e34:	cmp	r4, r3
   19e38:	subls	r3, r3, r4
   19e3c:	subhi	r0, r0, #1
   19e40:	subls	r0, r0, #2
   19e44:	sub	r3, r3, r4
   19e48:	ldr	r2, [pc, #104]	; 19eb8 <__assert_fail@plt+0x8d8c>
   19e4c:	lsr	r1, r5, #16
   19e50:	and	ip, r0, r2
   19e54:	and	r2, r2, r5
   19e58:	mul	r6, ip, r1
   19e5c:	mov	lr, r1
   19e60:	lsr	r1, r0, #16
   19e64:	mul	ip, ip, r2
   19e68:	mla	r2, r1, r2, r6
   19e6c:	mul	r1, r1, lr
   19e70:	add	r2, r2, ip, lsr #16
   19e74:	cmp	r6, r2
   19e78:	addhi	r1, r1, #65536	; 0x10000
   19e7c:	add	r1, r1, r2, lsr #16
   19e80:	adds	r3, r3, r1
   19e84:	popcc	{r4, r5, r6, r7, r8, pc}
   19e88:	uxth	ip, ip
   19e8c:	add	r2, ip, r2, lsl #16
   19e90:	cmp	r5, r2
   19e94:	movcs	r5, #0
   19e98:	movcc	r5, #1
   19e9c:	cmp	r4, r3
   19ea0:	movne	r5, #0
   19ea4:	andeq	r5, r5, #1
   19ea8:	orrcc	r5, r5, #1
   19eac:	sub	r0, r0, #1
   19eb0:	sub	r0, r0, r5
   19eb4:	pop	{r4, r5, r6, r7, r8, pc}
   19eb8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   19ebc:	cmp	r1, #0
   19ec0:	push	{r4, lr}
   19ec4:	beq	19f1c <__assert_fail@plt+0x8df0>
   19ec8:	ands	r2, r1, #-16777216	; 0xff000000
   19ecc:	mov	r4, r0
   19ed0:	mov	r3, r1
   19ed4:	movne	r2, #0
   19ed8:	bne	19eec <__assert_fail@plt+0x8dc0>
   19edc:	lsl	r3, r3, #8
   19ee0:	tst	r3, #-16777216	; 0xff000000
   19ee4:	add	r2, r2, #8
   19ee8:	beq	19edc <__assert_fail@plt+0x8db0>
   19eec:	cmp	r3, #0
   19ef0:	blt	19f00 <__assert_fail@plt+0x8dd4>
   19ef4:	lsls	r3, r3, #1
   19ef8:	add	r2, r2, #1
   19efc:	bpl	19ef4 <__assert_fail@plt+0x8dc8>
   19f00:	lsl	r0, r1, r2
   19f04:	str	r2, [r4]
   19f08:	str	r0, [r4, #4]
   19f0c:	mov	r1, #0
   19f10:	bl	19d6c <__assert_fail@plt+0x8c40>
   19f14:	str	r0, [r4, #12]
   19f18:	pop	{r4, pc}
   19f1c:	ldr	r3, [pc, #12]	; 19f30 <__assert_fail@plt+0x8e04>
   19f20:	ldr	r2, [pc, #12]	; 19f34 <__assert_fail@plt+0x8e08>
   19f24:	ldr	r1, [pc, #12]	; 19f38 <__assert_fail@plt+0x8e0c>
   19f28:	ldr	r0, [pc, #12]	; 19f3c <__assert_fail@plt+0x8e10>
   19f2c:	bl	1112c <__assert_fail@plt>
   19f30:	muleq	r2, ip, lr
   19f34:	andeq	r0, r0, r6, lsl #7
   19f38:	andeq	sl, r2, r4, rrx
   19f3c:	andeq	sl, r2, ip, asr #5
   19f40:	push	{r4, r5, r6, r7, r8, r9, lr}
   19f44:	sub	sp, sp, #36	; 0x24
   19f48:	mov	r7, r0
   19f4c:	ldr	r8, [sp, #64]	; 0x40
   19f50:	mov	r0, sp
   19f54:	mov	r5, r2
   19f58:	mov	r9, r3
   19f5c:	bl	19ebc <__assert_fail@plt+0x8d90>
   19f60:	cmp	r8, #1
   19f64:	movle	r4, #0
   19f68:	ble	19fe8 <__assert_fail@plt+0x8ebc>
   19f6c:	add	r0, sp, #16
   19f70:	ldr	r1, [r5, #4]
   19f74:	bl	19ebc <__assert_fail@plt+0x8d90>
   19f78:	mov	r4, #0
   19f7c:	mov	r6, r4
   19f80:	mov	r2, r8
   19f84:	add	r3, sp, #16
   19f88:	mov	r1, r9
   19f8c:	mov	r0, r9
   19f90:	bl	19144 <__assert_fail@plt+0x8018>
   19f94:	sub	r3, r8, #-1073741823	; 0xc0000001
   19f98:	mov	r2, sp
   19f9c:	ldr	r3, [r9, r3, lsl #2]
   19fa0:	cmp	r3, #0
   19fa4:	subeq	r8, r8, #1
   19fa8:	mov	r1, r0
   19fac:	add	r0, r7, r4
   19fb0:	bl	17ed4 <__assert_fail@plt+0x6da8>
   19fb4:	ldr	r3, [r5]
   19fb8:	cmp	r0, r3
   19fbc:	add	r4, r4, r0
   19fc0:	bcs	19fe0 <__assert_fail@plt+0x8eb4>
   19fc4:	add	r3, r7, r4
   19fc8:	strb	r6, [r3], #1
   19fcc:	ldr	r2, [r5]
   19fd0:	add	r0, r0, #1
   19fd4:	cmp	r2, r0
   19fd8:	add	r4, r4, #1
   19fdc:	bhi	19fc8 <__assert_fail@plt+0x8e9c>
   19fe0:	cmp	r8, #1
   19fe4:	bne	19f80 <__assert_fail@plt+0x8e54>
   19fe8:	mov	r2, sp
   19fec:	ldr	r1, [r9]
   19ff0:	add	r0, r7, r4
   19ff4:	bl	17ed4 <__assert_fail@plt+0x6da8>
   19ff8:	add	r0, r4, r0
   19ffc:	cmp	r0, #1
   1a000:	bls	1a02c <__assert_fail@plt+0x8f00>
   1a004:	sub	ip, r0, #2
   1a008:	sub	r3, r7, #1
   1a00c:	add	ip, r7, ip, lsr #1
   1a010:	add	r7, r7, r0
   1a014:	ldrb	r1, [r7, #-1]
   1a018:	ldrb	r2, [r3, #1]
   1a01c:	strb	r1, [r3, #1]!
   1a020:	cmp	r3, ip
   1a024:	strb	r2, [r7, #-1]!
   1a028:	bne	1a014 <__assert_fail@plt+0x8ee8>
   1a02c:	add	sp, sp, #36	; 0x24
   1a030:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a034:	cmp	r2, #0
   1a038:	push	{r4, lr}
   1a03c:	ble	1a190 <__assert_fail@plt+0x9064>
   1a040:	cmp	r2, #1
   1a044:	beq	1a0d0 <__assert_fail@plt+0x8fa4>
   1a048:	cmp	r2, #2
   1a04c:	mov	r4, r0
   1a050:	beq	1a0dc <__assert_fail@plt+0x8fb0>
   1a054:	sub	r2, r2, #-1073741823	; 0xc0000001
   1a058:	ldr	r0, [r1, r2, lsl #2]
   1a05c:	add	ip, r1, r2, lsl #2
   1a060:	cmp	r0, #0
   1a064:	ldr	r1, [ip, #-4]
   1a068:	beq	1a17c <__assert_fail@plt+0x9050>
   1a06c:	ands	r2, r0, #-16777216	; 0xff000000
   1a070:	moveq	r3, r0
   1a074:	bne	1a138 <__assert_fail@plt+0x900c>
   1a078:	lsl	r3, r3, #8
   1a07c:	tst	r3, #-16777216	; 0xff000000
   1a080:	add	r2, r2, #8
   1a084:	beq	1a078 <__assert_fail@plt+0x8f4c>
   1a088:	cmp	r3, #0
   1a08c:	blt	1a09c <__assert_fail@plt+0x8f70>
   1a090:	lsls	r3, r3, #1
   1a094:	add	r2, r2, #1
   1a098:	bpl	1a090 <__assert_fail@plt+0x8f64>
   1a09c:	cmp	r2, #0
   1a0a0:	str	r2, [r4]
   1a0a4:	beq	1a0c0 <__assert_fail@plt+0x8f94>
   1a0a8:	ldr	ip, [ip, #-8]
   1a0ac:	rsb	r3, r2, #32
   1a0b0:	lsr	ip, ip, r3
   1a0b4:	lsr	r3, r1, r3
   1a0b8:	orr	r1, ip, r1, lsl r2
   1a0bc:	orr	r0, r3, r0, lsl r2
   1a0c0:	stmib	r4, {r0, r1}
   1a0c4:	bl	19d6c <__assert_fail@plt+0x8c40>
   1a0c8:	str	r0, [r4, #12]
   1a0cc:	pop	{r4, pc}
   1a0d0:	ldr	r1, [r1]
   1a0d4:	pop	{r4, lr}
   1a0d8:	b	19ebc <__assert_fail@plt+0x8d90>
   1a0dc:	ldr	r0, [r1, #4]
   1a0e0:	ldr	r1, [r1]
   1a0e4:	cmp	r0, #0
   1a0e8:	beq	1a168 <__assert_fail@plt+0x903c>
   1a0ec:	ands	r2, r0, #-16777216	; 0xff000000
   1a0f0:	moveq	r3, r0
   1a0f4:	bne	1a154 <__assert_fail@plt+0x9028>
   1a0f8:	lsl	r3, r3, #8
   1a0fc:	tst	r3, #-16777216	; 0xff000000
   1a100:	add	r2, r2, #8
   1a104:	beq	1a0f8 <__assert_fail@plt+0x8fcc>
   1a108:	cmp	r3, #0
   1a10c:	blt	1a11c <__assert_fail@plt+0x8ff0>
   1a110:	lsls	r3, r3, #1
   1a114:	add	r2, r2, #1
   1a118:	bpl	1a110 <__assert_fail@plt+0x8fe4>
   1a11c:	cmp	r2, #0
   1a120:	str	r2, [r4]
   1a124:	lslne	r0, r0, r2
   1a128:	rsbne	r3, r2, #32
   1a12c:	orrne	r0, r0, r1, lsr r3
   1a130:	lslne	r1, r1, r2
   1a134:	b	1a0c0 <__assert_fail@plt+0x8f94>
   1a138:	cmp	r0, #0
   1a13c:	movge	r3, r0
   1a140:	movge	r2, #0
   1a144:	bge	1a090 <__assert_fail@plt+0x8f64>
   1a148:	mov	r3, #0
   1a14c:	str	r3, [r4]
   1a150:	b	1a0c0 <__assert_fail@plt+0x8f94>
   1a154:	cmp	r0, #0
   1a158:	movge	r3, r0
   1a15c:	movge	r2, #0
   1a160:	bge	1a110 <__assert_fail@plt+0x8fe4>
   1a164:	b	1a148 <__assert_fail@plt+0x901c>
   1a168:	ldr	r3, [pc, #52]	; 1a1a4 <__assert_fail@plt+0x9078>
   1a16c:	ldr	r2, [pc, #52]	; 1a1a8 <__assert_fail@plt+0x907c>
   1a170:	ldr	r1, [pc, #52]	; 1a1ac <__assert_fail@plt+0x9080>
   1a174:	ldr	r0, [pc, #52]	; 1a1b0 <__assert_fail@plt+0x9084>
   1a178:	bl	1112c <__assert_fail@plt>
   1a17c:	ldr	r3, [pc, #48]	; 1a1b4 <__assert_fail@plt+0x9088>
   1a180:	ldr	r2, [pc, #48]	; 1a1b8 <__assert_fail@plt+0x908c>
   1a184:	ldr	r1, [pc, #32]	; 1a1ac <__assert_fail@plt+0x9080>
   1a188:	ldr	r0, [pc, #32]	; 1a1b0 <__assert_fail@plt+0x9084>
   1a18c:	bl	1112c <__assert_fail@plt>
   1a190:	ldr	r3, [pc, #28]	; 1a1b4 <__assert_fail@plt+0x9088>
   1a194:	mov	r2, #932	; 0x3a4
   1a198:	ldr	r1, [pc, #12]	; 1a1ac <__assert_fail@plt+0x9080>
   1a19c:	ldr	r0, [pc, #24]	; 1a1bc <__assert_fail@plt+0x9090>
   1a1a0:	bl	1112c <__assert_fail@plt>
   1a1a4:	andeq	r9, r2, r4, asr #29
   1a1a8:	muleq	r0, r3, r3
   1a1ac:	andeq	sl, r2, r4, rrx
   1a1b0:	ldrdeq	sl, [r2], -r4
   1a1b4:			; <UNDEFINED> instruction: 0x00029eb0
   1a1b8:			; <UNDEFINED> instruction: 0x000003b1
   1a1bc:	strdeq	sl, [r2], -ip
   1a1c0:	push	{r4, r5, r6, r7, lr}
   1a1c4:	subs	r6, r3, #0
   1a1c8:	sub	sp, sp, #20
   1a1cc:	ble	1a278 <__assert_fail@plt+0x914c>
   1a1d0:	sub	r3, r6, #-1073741823	; 0xc0000001
   1a1d4:	mov	r5, r2
   1a1d8:	ldr	r3, [r2, r3, lsl #2]
   1a1dc:	cmp	r3, #0
   1a1e0:	beq	1a264 <__assert_fail@plt+0x9138>
   1a1e4:	mov	r7, r0
   1a1e8:	mov	r0, r1
   1a1ec:	mov	r4, r1
   1a1f0:	bl	17c80 <__assert_fail@plt+0x6b54>
   1a1f4:	subs	r1, r0, #0
   1a1f8:	bne	1a250 <__assert_fail@plt+0x9124>
   1a1fc:	mov	r1, r4
   1a200:	mvn	r0, #0
   1a204:	bl	26120 <__assert_fail@plt+0x14ff4>
   1a208:	mov	ip, r4
   1a20c:	mov	lr, #1
   1a210:	cmp	r4, r0
   1a214:	bhi	1a228 <__assert_fail@plt+0x90fc>
   1a218:	mul	ip, r4, ip
   1a21c:	add	lr, lr, #1
   1a220:	cmp	r0, ip
   1a224:	bcs	1a218 <__assert_fail@plt+0x90ec>
   1a228:	str	r6, [sp]
   1a22c:	mov	r3, r5
   1a230:	mov	r1, r4
   1a234:	mov	r0, r7
   1a238:	add	r2, sp, #8
   1a23c:	str	lr, [sp, #8]
   1a240:	str	ip, [sp, #12]
   1a244:	bl	19f40 <__assert_fail@plt+0x8e14>
   1a248:	add	sp, sp, #20
   1a24c:	pop	{r4, r5, r6, r7, pc}
   1a250:	mov	r3, r6
   1a254:	mov	r0, r7
   1a258:	bl	180b0 <__assert_fail@plt+0x6f84>
   1a25c:	add	sp, sp, #20
   1a260:	pop	{r4, r5, r6, r7, pc}
   1a264:	ldr	r3, [pc, #32]	; 1a28c <__assert_fail@plt+0x9160>
   1a268:	ldr	r2, [pc, #32]	; 1a290 <__assert_fail@plt+0x9164>
   1a26c:	ldr	r1, [pc, #32]	; 1a294 <__assert_fail@plt+0x9168>
   1a270:	ldr	r0, [pc, #32]	; 1a298 <__assert_fail@plt+0x916c>
   1a274:	bl	1112c <__assert_fail@plt>
   1a278:	ldr	r3, [pc, #12]	; 1a28c <__assert_fail@plt+0x9160>
   1a27c:	ldr	r2, [pc, #24]	; 1a29c <__assert_fail@plt+0x9170>
   1a280:	ldr	r1, [pc, #12]	; 1a294 <__assert_fail@plt+0x9168>
   1a284:	ldr	r0, [pc, #20]	; 1a2a0 <__assert_fail@plt+0x9174>
   1a288:	bl	1112c <__assert_fail@plt>
   1a28c:	ldrdeq	r9, [r2], -r8
   1a290:	andeq	r0, r0, r5, lsr #10
   1a294:	andeq	sl, r2, r4, rrx
   1a298:	andeq	sl, r2, r4, ror #5
   1a29c:	andeq	r0, r0, r4, lsr #10
   1a2a0:	ldrdeq	sl, [r2], -ip
   1a2a4:	push	{r4, r5, r6, r7, r8, lr}
   1a2a8:	subs	r5, r2, #0
   1a2ac:	sub	sp, sp, #16
   1a2b0:	moveq	r0, r5
   1a2b4:	beq	1a324 <__assert_fail@plt+0x91f8>
   1a2b8:	mov	r7, r0
   1a2bc:	mov	r0, r3
   1a2c0:	mov	r4, r3
   1a2c4:	mov	r6, r1
   1a2c8:	bl	17c80 <__assert_fail@plt+0x6b54>
   1a2cc:	subs	r3, r0, #0
   1a2d0:	bne	1a32c <__assert_fail@plt+0x9200>
   1a2d4:	mov	r1, r4
   1a2d8:	mvn	r0, #0
   1a2dc:	bl	26120 <__assert_fail@plt+0x14ff4>
   1a2e0:	mov	ip, r4
   1a2e4:	mov	lr, #1
   1a2e8:	cmp	r4, r0
   1a2ec:	bhi	1a300 <__assert_fail@plt+0x91d4>
   1a2f0:	mul	ip, r4, ip
   1a2f4:	add	lr, lr, #1
   1a2f8:	cmp	r0, ip
   1a2fc:	bcs	1a2f0 <__assert_fail@plt+0x91c4>
   1a300:	add	r8, sp, #8
   1a304:	mov	r3, r4
   1a308:	mov	r2, r5
   1a30c:	mov	r1, r6
   1a310:	mov	r0, r7
   1a314:	str	r8, [sp]
   1a318:	str	lr, [sp, #8]
   1a31c:	str	ip, [sp, #12]
   1a320:	bl	18c64 <__assert_fail@plt+0x7b38>
   1a324:	add	sp, sp, #16
   1a328:	pop	{r4, r5, r6, r7, r8, pc}
   1a32c:	mov	r2, r5
   1a330:	mov	r0, r7
   1a334:	bl	17d10 <__assert_fail@plt+0x6be4>
   1a338:	add	sp, sp, #16
   1a33c:	pop	{r4, r5, r6, r7, r8, pc}
   1a340:	ldr	r2, [pc, #16]	; 1a358 <__assert_fail@plt+0x922c>
   1a344:	mov	r3, #0
   1a348:	str	r2, [r0, #8]
   1a34c:	str	r3, [r0]
   1a350:	str	r3, [r0, #4]
   1a354:	bx	lr
   1a358:	andeq	r9, r2, r4, ror #29
   1a35c:	cmp	r1, #0
   1a360:	subne	r1, r1, #1
   1a364:	ldr	r3, [pc, #44]	; 1a398 <__assert_fail@plt+0x926c>
   1a368:	lsr	r1, r1, #5
   1a36c:	push	{r4, lr}
   1a370:	add	r1, r1, #1
   1a374:	mov	r4, r0
   1a378:	mov	r2, #0
   1a37c:	str	r1, [r0]
   1a380:	ldr	r3, [r3, #4]
   1a384:	lsl	r0, r1, #2
   1a388:	str	r2, [r4, #4]
   1a38c:	blx	r3
   1a390:	str	r0, [r4, #8]
   1a394:	pop	{r4, pc}
   1a398:	andeq	fp, r3, ip, lsl r1
   1a39c:	ldr	r1, [r0]
   1a3a0:	cmp	r1, #0
   1a3a4:	bxeq	lr
   1a3a8:	ldr	r3, [pc, #12]	; 1a3bc <__assert_fail@plt+0x9290>
   1a3ac:	lsl	r1, r1, #2
   1a3b0:	ldr	r0, [r0, #8]
   1a3b4:	ldr	r3, [r3, #8]
   1a3b8:	bx	r3
   1a3bc:	andeq	fp, r3, ip, lsl r1
   1a3c0:	subs	r3, r1, #0
   1a3c4:	blt	1a3d4 <__assert_fail@plt+0x92a8>
   1a3c8:	bne	1a400 <__assert_fail@plt+0x92d4>
   1a3cc:	str	r3, [r0, #4]
   1a3d0:	bx	lr
   1a3d4:	ldr	r1, [r0]
   1a3d8:	push	{r4, lr}
   1a3dc:	cmp	r1, #0
   1a3e0:	mov	r4, r3
   1a3e4:	mvn	r3, #0
   1a3e8:	str	r3, [r0, #4]
   1a3ec:	ldrgt	r0, [r0, #8]
   1a3f0:	ble	1a404 <__assert_fail@plt+0x92d8>
   1a3f4:	rsb	r3, r4, #0
   1a3f8:	str	r3, [r0]
   1a3fc:	pop	{r4, pc}
   1a400:	b	18388 <__assert_fail@plt+0x725c>
   1a404:	mov	r1, #1
   1a408:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1a40c:	b	1a3f4 <__assert_fail@plt+0x92c8>
   1a410:	subs	r2, r1, #0
   1a414:	beq	1a41c <__assert_fail@plt+0x92f0>
   1a418:	b	18388 <__assert_fail@plt+0x725c>
   1a41c:	str	r2, [r0, #4]
   1a420:	bx	lr
   1a424:	cmp	r0, r1
   1a428:	bxeq	lr
   1a42c:	push	{r4, r5, r6, r7, r8, lr}
   1a430:	mov	r5, r0
   1a434:	ldr	r7, [r1, #4]
   1a438:	ldr	r3, [r0]
   1a43c:	mov	r6, r1
   1a440:	eor	r4, r7, r7, asr #31
   1a444:	sub	r4, r4, r7, asr #31
   1a448:	cmp	r4, r3
   1a44c:	bgt	1a484 <__assert_fail@plt+0x9358>
   1a450:	ldr	r0, [r0, #8]
   1a454:	mov	lr, r7
   1a458:	ldr	r3, [r6, #8]
   1a45c:	cmp	r7, #0
   1a460:	addne	ip, r3, r4, lsl #2
   1a464:	subne	r2, r0, #4
   1a468:	beq	1a47c <__assert_fail@plt+0x9350>
   1a46c:	ldr	r1, [r3], #4
   1a470:	cmp	r3, ip
   1a474:	str	r1, [r2, #4]!
   1a478:	bne	1a46c <__assert_fail@plt+0x9340>
   1a47c:	str	lr, [r5, #4]
   1a480:	pop	{r4, r5, r6, r7, r8, pc}
   1a484:	mov	r1, r4
   1a488:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1a48c:	ldr	lr, [r6, #4]
   1a490:	b	1a458 <__assert_fail@plt+0x932c>
   1a494:	ldr	ip, [pc, #16]	; 1a4ac <__assert_fail@plt+0x9380>
   1a498:	mov	r2, #0
   1a49c:	str	ip, [r0, #8]
   1a4a0:	str	r2, [r0]
   1a4a4:	str	r2, [r0, #4]
   1a4a8:	b	1a3c0 <__assert_fail@plt+0x9294>
   1a4ac:	andeq	r9, r2, r4, ror #29
   1a4b0:	ldr	ip, [pc, #24]	; 1a4d0 <__assert_fail@plt+0x93a4>
   1a4b4:	cmp	r1, #0
   1a4b8:	mov	r2, #0
   1a4bc:	str	ip, [r0, #8]
   1a4c0:	str	r2, [r0]
   1a4c4:	str	r2, [r0, #4]
   1a4c8:	bxeq	lr
   1a4cc:	b	18388 <__assert_fail@plt+0x725c>
   1a4d0:	andeq	r9, r2, r4, ror #29
   1a4d4:	ldr	ip, [pc, #16]	; 1a4ec <__assert_fail@plt+0x93c0>
   1a4d8:	mov	r2, #0
   1a4dc:	str	ip, [r0, #8]
   1a4e0:	str	r2, [r0]
   1a4e4:	str	r2, [r0, #4]
   1a4e8:	b	1a424 <__assert_fail@plt+0x92f8>
   1a4ec:	andeq	r9, r2, r4, ror #29
   1a4f0:	ldr	r0, [r0, #4]
   1a4f4:	cmp	r0, #1
   1a4f8:	movhi	r0, #0
   1a4fc:	movls	r0, #1
   1a500:	bx	lr
   1a504:	ldr	r3, [r0, #4]
   1a508:	cmp	r3, #0
   1a50c:	blt	1a554 <__assert_fail@plt+0x9428>
   1a510:	cmp	r3, #1
   1a514:	ble	1a520 <__assert_fail@plt+0x93f4>
   1a518:	mov	r0, #0
   1a51c:	bx	lr
   1a520:	cmp	r3, #0
   1a524:	beq	1a54c <__assert_fail@plt+0x9420>
   1a528:	ldr	r3, [r0, #8]
   1a52c:	ldr	r3, [r3]
   1a530:	cmn	r3, #-2147483646	; 0x80000002
   1a534:	movhi	r0, #0
   1a538:	movls	r0, #1
   1a53c:	rsb	r0, r0, r3, lsr #31
   1a540:	subs	r0, r0, #1
   1a544:	movne	r0, #1
   1a548:	bx	lr
   1a54c:	mov	r0, #1
   1a550:	bx	lr
   1a554:	cmn	r3, #1
   1a558:	bne	1a518 <__assert_fail@plt+0x93ec>
   1a55c:	ldr	r3, [r0, #8]
   1a560:	ldr	r3, [r3]
   1a564:	mvn	r0, r3
   1a568:	lsr	r0, r0, #31
   1a56c:	cmp	r3, #-2147483648	; 0x80000000
   1a570:	rsbls	r0, r0, #0
   1a574:	rsbhi	r0, r0, #1
   1a578:	subs	r0, r0, #1
   1a57c:	movne	r0, #1
   1a580:	bx	lr
   1a584:	b	1a504 <__assert_fail@plt+0x93d8>
   1a588:	ldr	r0, [r0, #4]
   1a58c:	cmp	r0, #1
   1a590:	movhi	r0, #0
   1a594:	movls	r0, #1
   1a598:	bx	lr
   1a59c:	ldr	r3, [r0, #4]
   1a5a0:	cmp	r3, #0
   1a5a4:	blt	1a5f8 <__assert_fail@plt+0x94cc>
   1a5a8:	cmp	r3, #1
   1a5ac:	ble	1a5b8 <__assert_fail@plt+0x948c>
   1a5b0:	mov	r0, #0
   1a5b4:	bx	lr
   1a5b8:	cmp	r3, #0
   1a5bc:	beq	1a5f0 <__assert_fail@plt+0x94c4>
   1a5c0:	ldr	r3, [r0, #8]
   1a5c4:	ldr	r0, [pc, #96]	; 1a62c <__assert_fail@plt+0x9500>
   1a5c8:	ldr	r3, [r3]
   1a5cc:	cmp	r3, r0
   1a5d0:	movhi	r0, #0
   1a5d4:	movls	r0, #1
   1a5d8:	cmp	r3, #32768	; 0x8000
   1a5dc:	rsbcc	r0, r0, #0
   1a5e0:	rsbcs	r0, r0, #1
   1a5e4:	subs	r0, r0, #1
   1a5e8:	movne	r0, #1
   1a5ec:	bx	lr
   1a5f0:	mov	r0, #1
   1a5f4:	bx	lr
   1a5f8:	cmn	r3, #1
   1a5fc:	bne	1a5b0 <__assert_fail@plt+0x9484>
   1a600:	ldr	r3, [r0, #8]
   1a604:	ldr	r3, [r3]
   1a608:	cmp	r3, #32768	; 0x8000
   1a60c:	movcs	r0, #0
   1a610:	movcc	r0, #1
   1a614:	cmp	r3, #32768	; 0x8000
   1a618:	rsbls	r0, r0, #0
   1a61c:	rsbhi	r0, r0, #1
   1a620:	subs	r0, r0, #1
   1a624:	movne	r0, #1
   1a628:	bx	lr
   1a62c:	strdeq	r7, [r0], -lr
   1a630:	ldr	r3, [r0, #4]
   1a634:	cmp	r3, #0
   1a638:	blt	1a644 <__assert_fail@plt+0x9518>
   1a63c:	cmp	r3, #1
   1a640:	ble	1a64c <__assert_fail@plt+0x9520>
   1a644:	mov	r0, #0
   1a648:	bx	lr
   1a64c:	cmp	r3, #0
   1a650:	bne	1a65c <__assert_fail@plt+0x9530>
   1a654:	mov	r0, #1
   1a658:	bx	lr
   1a65c:	ldr	r3, [r0, #8]
   1a660:	ldr	r0, [pc, #36]	; 1a68c <__assert_fail@plt+0x9560>
   1a664:	ldr	r3, [r3]
   1a668:	cmp	r3, r0
   1a66c:	movhi	r0, #0
   1a670:	movls	r0, #1
   1a674:	cmp	r3, #65536	; 0x10000
   1a678:	rsbcc	r0, r0, #0
   1a67c:	rsbcs	r0, r0, #1
   1a680:	subs	r0, r0, #1
   1a684:	movne	r0, #1
   1a688:	bx	lr
   1a68c:	strdeq	pc, [r0], -lr
   1a690:	ldr	r3, [r0, #4]
   1a694:	cmp	r3, #0
   1a698:	beq	1a6b4 <__assert_fail@plt+0x9588>
   1a69c:	ldr	r3, [r0, #8]
   1a6a0:	ldr	r0, [r3]
   1a6a4:	rsblt	r0, r0, #0
   1a6a8:	bicge	r0, r0, #-2147483648	; 0x80000000
   1a6ac:	orrlt	r0, r0, #-2147483648	; 0x80000000
   1a6b0:	bx	lr
   1a6b4:	mov	r0, r3
   1a6b8:	bx	lr
   1a6bc:	ldr	r3, [r0, #4]
   1a6c0:	cmp	r3, #0
   1a6c4:	ldrne	r3, [r0, #8]
   1a6c8:	ldrne	r0, [r3]
   1a6cc:	moveq	r0, r3
   1a6d0:	bx	lr
   1a6d4:	ldr	r0, [r0, #4]
   1a6d8:	cmp	r0, #0
   1a6dc:	rsblt	r0, r0, #0
   1a6e0:	bx	lr
   1a6e4:	cmp	r1, #0
   1a6e8:	blt	1a70c <__assert_fail@plt+0x95e0>
   1a6ec:	ldr	r3, [r0, #4]
   1a6f0:	cmp	r3, #0
   1a6f4:	rsblt	r3, r3, #0
   1a6f8:	cmp	r1, r3
   1a6fc:	bge	1a70c <__assert_fail@plt+0x95e0>
   1a700:	ldr	r3, [r0, #8]
   1a704:	ldr	r0, [r3, r1, lsl #2]
   1a708:	bx	lr
   1a70c:	mov	r0, #0
   1a710:	bx	lr
   1a714:	cmp	r1, #0
   1a718:	subne	r1, r1, #1
   1a71c:	lsr	r1, r1, #5
   1a720:	add	r1, r1, #1
   1a724:	b	17fd0 <__assert_fail@plt+0x6ea4>
   1a728:	ldr	r0, [r0, #8]
   1a72c:	bx	lr
   1a730:	subs	r2, r1, #0
   1a734:	ble	1a750 <__assert_fail@plt+0x9624>
   1a738:	ldr	ip, [r0]
   1a73c:	cmp	r2, ip
   1a740:	bgt	1a74c <__assert_fail@plt+0x9620>
   1a744:	ldr	r0, [r0, #8]
   1a748:	bx	lr
   1a74c:	b	17fd0 <__assert_fail@plt+0x6ea4>
   1a750:	push	{r4, lr}
   1a754:	ldr	r3, [pc, #12]	; 1a768 <__assert_fail@plt+0x963c>
   1a758:	ldr	r2, [pc, #12]	; 1a76c <__assert_fail@plt+0x9640>
   1a75c:	ldr	r1, [pc, #12]	; 1a770 <__assert_fail@plt+0x9644>
   1a760:	ldr	r0, [pc, #12]	; 1a774 <__assert_fail@plt+0x9648>
   1a764:	bl	1112c <__assert_fail@plt>
   1a768:	andeq	r9, r2, r8, ror #29
   1a76c:	andeq	r0, r0, pc, ror r6
   1a770:	andeq	sl, r2, r4, rrx
   1a774:	andeq	sl, r2, r8, lsr #2
   1a778:	b	1a730 <__assert_fail@plt+0x9604>
   1a77c:	eor	r3, r1, r1, asr #31
   1a780:	cmp	r1, #0
   1a784:	sub	r3, r3, r1, asr #31
   1a788:	ldr	r2, [r0, #8]
   1a78c:	beq	1a7d0 <__assert_fail@plt+0x96a4>
   1a790:	sub	ip, r3, #-1073741823	; 0xc0000001
   1a794:	push	{lr}		; (str lr, [sp, #-4]!)
   1a798:	ldr	lr, [r2, ip, lsl #2]
   1a79c:	add	r2, r2, ip, lsl #2
   1a7a0:	cmp	lr, #0
   1a7a4:	beq	1a7b8 <__assert_fail@plt+0x968c>
   1a7a8:	b	1a7c0 <__assert_fail@plt+0x9694>
   1a7ac:	ldr	ip, [r2, #-4]!
   1a7b0:	cmp	ip, #0
   1a7b4:	bne	1a7c0 <__assert_fail@plt+0x9694>
   1a7b8:	subs	r3, r3, #1
   1a7bc:	bne	1a7ac <__assert_fail@plt+0x9680>
   1a7c0:	cmp	r1, #0
   1a7c4:	rsblt	r3, r3, #0
   1a7c8:	str	r3, [r0, #4]
   1a7cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7d0:	str	r1, [r0, #4]
   1a7d4:	bx	lr
   1a7d8:	mov	ip, #0
   1a7dc:	eor	r3, r2, r2, asr #31
   1a7e0:	cmp	r2, ip
   1a7e4:	sub	r3, r3, r2, asr #31
   1a7e8:	str	r1, [r0, #8]
   1a7ec:	str	ip, [r0]
   1a7f0:	beq	1a834 <__assert_fail@plt+0x9708>
   1a7f4:	sub	ip, r3, #-1073741823	; 0xc0000001
   1a7f8:	push	{lr}		; (str lr, [sp, #-4]!)
   1a7fc:	ldr	lr, [r1, ip, lsl #2]
   1a800:	add	r1, r1, ip, lsl #2
   1a804:	cmp	lr, #0
   1a808:	beq	1a81c <__assert_fail@plt+0x96f0>
   1a80c:	b	1a824 <__assert_fail@plt+0x96f8>
   1a810:	ldr	ip, [r1, #-4]!
   1a814:	cmp	ip, #0
   1a818:	bne	1a824 <__assert_fail@plt+0x96f8>
   1a81c:	subs	r3, r3, #1
   1a820:	bne	1a810 <__assert_fail@plt+0x96e4>
   1a824:	cmp	r2, #0
   1a828:	rsblt	r3, r3, #0
   1a82c:	str	r3, [r0, #4]
   1a830:	pop	{pc}		; (ldr pc, [sp], #4)
   1a834:	str	r2, [r0, #4]
   1a838:	bx	lr
   1a83c:	vcmp.f64	d0, d0
   1a840:	mov	r3, r0
   1a844:	vmrs	APSR_nzcv, fpscr
   1a848:	bne	1a864 <__assert_fail@plt+0x9738>
   1a84c:	vldr	d6, [pc, #28]	; 1a870 <__assert_fail@plt+0x9744>
   1a850:	vmul.f64	d6, d0, d6
   1a854:	vcmp.f64	d0, d6
   1a858:	vmrs	APSR_nzcv, fpscr
   1a85c:	beq	1a864 <__assert_fail@plt+0x9738>
   1a860:	b	183c0 <__assert_fail@plt+0x7294>
   1a864:	mov	r2, #0
   1a868:	str	r2, [r3, #4]
   1a86c:	bx	lr
   1a870:	andeq	r0, r0, r0
   1a874:	svccc	0x00e00000
   1a878:	vcmp.f64	d0, d0
   1a87c:	ldr	r1, [pc, #52]	; 1a8b8 <__assert_fail@plt+0x978c>
   1a880:	mov	r2, #0
   1a884:	str	r1, [r0, #8]
   1a888:	vmrs	APSR_nzcv, fpscr
   1a88c:	str	r2, [r0]
   1a890:	str	r2, [r0, #4]
   1a894:	bxne	lr
   1a898:	vldr	d6, [pc, #16]	; 1a8b0 <__assert_fail@plt+0x9784>
   1a89c:	vmul.f64	d6, d0, d6
   1a8a0:	vcmp.f64	d0, d6
   1a8a4:	vmrs	APSR_nzcv, fpscr
   1a8a8:	bxeq	lr
   1a8ac:	b	183c0 <__assert_fail@plt+0x7294>
   1a8b0:	andeq	r0, r0, r0
   1a8b4:	svccc	0x00e00000
   1a8b8:	andeq	r9, r2, r4, ror #29
   1a8bc:	push	{r4, lr}
   1a8c0:	ldr	lr, [r0, #4]
   1a8c4:	cmp	lr, #0
   1a8c8:	beq	1a974 <__assert_fail@plt+0x9848>
   1a8cc:	eor	r1, lr, lr, asr #31
   1a8d0:	ldr	ip, [r0, #8]
   1a8d4:	sub	r1, r1, lr, asr #31
   1a8d8:	sub	r1, r1, #1
   1a8dc:	ldr	r0, [ip, r1, lsl #2]
   1a8e0:	ands	r3, r0, #-16777216	; 0xff000000
   1a8e4:	bne	1a97c <__assert_fail@plt+0x9850>
   1a8e8:	mov	r2, r0
   1a8ec:	lsl	r2, r2, #8
   1a8f0:	tst	r2, #-16777216	; 0xff000000
   1a8f4:	add	r3, r3, #8
   1a8f8:	beq	1a8ec <__assert_fail@plt+0x97c0>
   1a8fc:	cmp	r2, #0
   1a900:	blt	1a910 <__assert_fail@plt+0x97e4>
   1a904:	lsls	r2, r2, #1
   1a908:	add	r3, r3, #1
   1a90c:	bpl	1a904 <__assert_fail@plt+0x97d8>
   1a910:	adds	r3, r3, #21
   1a914:	rsbmi	r2, r3, #0
   1a918:	mvnmi	r4, #0
   1a91c:	andmi	r0, r0, r4, lsl r2
   1a920:	vmov	s15, r0
   1a924:	vldr	d6, [pc, #108]	; 1a998 <__assert_fail@plt+0x986c>
   1a928:	mvn	r4, #0
   1a92c:	vcvt.f64.u32	d0, s15
   1a930:	subs	r1, r1, #1
   1a934:	bcc	1a968 <__assert_fail@plt+0x983c>
   1a938:	cmp	r3, #0
   1a93c:	vmul.f64	d0, d0, d6
   1a940:	ble	1a930 <__assert_fail@plt+0x9804>
   1a944:	subs	r3, r3, #32
   1a948:	ldr	r2, [ip, r1, lsl #2]
   1a94c:	rsbmi	r0, r3, #0
   1a950:	andmi	r2, r2, r4, lsl r0
   1a954:	subs	r1, r1, #1
   1a958:	vmov	s15, r2
   1a95c:	vcvt.f64.u32	d7, s15
   1a960:	vadd.f64	d0, d0, d7
   1a964:	bcs	1a938 <__assert_fail@plt+0x980c>
   1a968:	cmp	lr, #0
   1a96c:	vneglt.f64	d0, d0
   1a970:	pop	{r4, pc}
   1a974:	vldr	d0, [pc, #36]	; 1a9a0 <__assert_fail@plt+0x9874>
   1a978:	pop	{r4, pc}
   1a97c:	cmp	r0, #0
   1a980:	movlt	r3, #21
   1a984:	blt	1a920 <__assert_fail@plt+0x97f4>
   1a988:	mov	r2, r0
   1a98c:	mov	r3, #0
   1a990:	b	1a904 <__assert_fail@plt+0x97d8>
   1a994:	nop			; (mov r0, r0)
   1a998:	andeq	r0, r0, r0
   1a99c:	mvnsmi	r0, r0
	...
   1a9a8:	vcmpe.f64	d0, #0.0
   1a9ac:	ldr	r1, [r0, #4]
   1a9b0:	vmrs	APSR_nzcv, fpscr
   1a9b4:	vneglt.f64	d0, d0
   1a9b8:	cmp	r1, #0
   1a9bc:	beq	1aa54 <__assert_fail@plt+0x9928>
   1a9c0:	cmp	r1, #0
   1a9c4:	rsblt	r1, r1, #0
   1a9c8:	cmp	r1, #1
   1a9cc:	beq	1a9e8 <__assert_fail@plt+0x98bc>
   1a9d0:	vldr	d7, [pc, #160]	; 1aa78 <__assert_fail@plt+0x994c>
   1a9d4:	mov	r3, #1
   1a9d8:	add	r3, r3, #1
   1a9dc:	cmp	r1, r3
   1a9e0:	vmul.f64	d0, d0, d7
   1a9e4:	bne	1a9d8 <__assert_fail@plt+0x98ac>
   1a9e8:	vldr	d6, [pc, #144]	; 1aa80 <__assert_fail@plt+0x9954>
   1a9ec:	vcmpe.f64	d0, d6
   1a9f0:	vmrs	APSR_nzcv, fpscr
   1a9f4:	bge	1aa68 <__assert_fail@plt+0x993c>
   1a9f8:	vcvt.u32.f64	s14, d0
   1a9fc:	ldr	r2, [r0, #8]
   1aa00:	sub	r3, r1, #1
   1aa04:	ldr	r0, [r2, r3, lsl #2]
   1aa08:	vmov	ip, s14
   1aa0c:	cmp	ip, r0
   1aa10:	bcc	1aa70 <__assert_fail@plt+0x9944>
   1aa14:	bhi	1aa68 <__assert_fail@plt+0x993c>
   1aa18:	sub	r1, r1, #-1073741823	; 0xc0000001
   1aa1c:	add	r2, r2, r1, lsl #2
   1aa20:	b	1aa3c <__assert_fail@plt+0x9910>
   1aa24:	vcvt.u32.f64	s14, d0
   1aa28:	ldr	r1, [r2, #-4]!
   1aa2c:	vmov	r0, s14
   1aa30:	cmp	r0, r1
   1aa34:	bcc	1aa70 <__assert_fail@plt+0x9944>
   1aa38:	bhi	1aa68 <__assert_fail@plt+0x993c>
   1aa3c:	vcvt.f64.u32	d7, s14
   1aa40:	sub	r3, r3, #1
   1aa44:	cmn	r3, #1
   1aa48:	vsub.f64	d0, d0, d7
   1aa4c:	vmul.f64	d0, d0, d6
   1aa50:	bne	1aa24 <__assert_fail@plt+0x98f8>
   1aa54:	vcmpe.f64	d0, #0.0
   1aa58:	vmrs	APSR_nzcv, fpscr
   1aa5c:	mvngt	r0, #0
   1aa60:	movle	r0, #0
   1aa64:	bx	lr
   1aa68:	mvn	r0, #0
   1aa6c:	bx	lr
   1aa70:	mov	r0, #1
   1aa74:	bx	lr
   1aa78:	andeq	r0, r0, r0
   1aa7c:	ldclcc	0, cr0, [r0]
   1aa80:	andeq	r0, r0, r0
   1aa84:	mvnsmi	r0, r0
   1aa88:	ldr	r3, [r0, #4]
   1aa8c:	vcmpe.f64	d0, #0.0
   1aa90:	cmp	r3, #0
   1aa94:	blt	1aaa4 <__assert_fail@plt+0x9978>
   1aa98:	vmrs	APSR_nzcv, fpscr
   1aa9c:	bmi	1aabc <__assert_fail@plt+0x9990>
   1aaa0:	b	1a9a8 <__assert_fail@plt+0x987c>
   1aaa4:	vmrs	APSR_nzcv, fpscr
   1aaa8:	bge	1aac4 <__assert_fail@plt+0x9998>
   1aaac:	push	{r4, lr}
   1aab0:	bl	1a9a8 <__assert_fail@plt+0x987c>
   1aab4:	rsb	r0, r0, #0
   1aab8:	pop	{r4, pc}
   1aabc:	mov	r0, #1
   1aac0:	bx	lr
   1aac4:	mvn	r0, #0
   1aac8:	bx	lr
   1aacc:	ldr	r3, [r0, #4]
   1aad0:	lsr	r0, r3, #31
   1aad4:	cmp	r3, #0
   1aad8:	rsble	r0, r0, #0
   1aadc:	rsbgt	r0, r0, #1
   1aae0:	bx	lr
   1aae4:	cmp	r1, #0
   1aae8:	ldr	r3, [r0, #4]
   1aaec:	blt	1ab38 <__assert_fail@plt+0x9a0c>
   1aaf0:	cmp	r3, #0
   1aaf4:	blt	1ab48 <__assert_fail@plt+0x9a1c>
   1aaf8:	cmp	r3, #1
   1aafc:	ble	1ab08 <__assert_fail@plt+0x99dc>
   1ab00:	mov	r0, #1
   1ab04:	bx	lr
   1ab08:	cmp	r3, #0
   1ab0c:	moveq	r0, r3
   1ab10:	beq	1ab28 <__assert_fail@plt+0x99fc>
   1ab14:	ldr	r3, [r0, #8]
   1ab18:	ldr	r0, [r3]
   1ab1c:	cmp	r1, r0
   1ab20:	movcs	r3, #0
   1ab24:	movcc	r3, #1
   1ab28:	cmp	r1, r0
   1ab2c:	movls	r0, r3
   1ab30:	subhi	r0, r3, #1
   1ab34:	bx	lr
   1ab38:	cmp	r3, #0
   1ab3c:	bge	1ab00 <__assert_fail@plt+0x99d4>
   1ab40:	cmn	r3, #1
   1ab44:	beq	1ab50 <__assert_fail@plt+0x9a24>
   1ab48:	mvn	r0, #0
   1ab4c:	bx	lr
   1ab50:	ldr	r3, [r0, #8]
   1ab54:	rsb	r1, r1, #0
   1ab58:	ldr	r3, [r3]
   1ab5c:	cmp	r1, r3
   1ab60:	movls	r0, #0
   1ab64:	movhi	r0, #1
   1ab68:	cmp	r1, r3
   1ab6c:	subcc	r0, r0, #1
   1ab70:	bx	lr
   1ab74:	ldr	r3, [r0, #4]
   1ab78:	cmp	r3, #0
   1ab7c:	blt	1abc4 <__assert_fail@plt+0x9a98>
   1ab80:	cmp	r3, #1
   1ab84:	ble	1ab90 <__assert_fail@plt+0x9a64>
   1ab88:	mov	r0, #1
   1ab8c:	bx	lr
   1ab90:	cmp	r3, #0
   1ab94:	moveq	r0, r3
   1ab98:	bne	1abac <__assert_fail@plt+0x9a80>
   1ab9c:	cmp	r1, r0
   1aba0:	movls	r0, r3
   1aba4:	subhi	r0, r3, #1
   1aba8:	bx	lr
   1abac:	ldr	r3, [r0, #8]
   1abb0:	ldr	r0, [r3]
   1abb4:	cmp	r1, r0
   1abb8:	movcs	r3, #0
   1abbc:	movcc	r3, #1
   1abc0:	b	1ab9c <__assert_fail@plt+0x9a70>
   1abc4:	mvn	r0, #0
   1abc8:	bx	lr
   1abcc:	ldr	r3, [r0, #4]
   1abd0:	ldr	r2, [r1, #4]
   1abd4:	cmp	r3, r2
   1abd8:	beq	1abe8 <__assert_fail@plt+0x9abc>
   1abdc:	blt	1ac2c <__assert_fail@plt+0x9b00>
   1abe0:	mov	r0, #1
   1abe4:	bx	lr
   1abe8:	cmp	r3, #0
   1abec:	blt	1ac34 <__assert_fail@plt+0x9b08>
   1abf0:	ldr	r2, [r1, #8]
   1abf4:	ldr	r0, [r0, #8]
   1abf8:	lsl	ip, r3, #2
   1abfc:	add	r1, r0, ip
   1ac00:	add	r2, r2, ip
   1ac04:	b	1ac18 <__assert_fail@plt+0x9aec>
   1ac08:	ldr	ip, [r1, #-4]!
   1ac0c:	ldr	r0, [r2, #-4]!
   1ac10:	cmp	ip, r0
   1ac14:	bne	1ac28 <__assert_fail@plt+0x9afc>
   1ac18:	subs	r3, r3, #1
   1ac1c:	bcs	1ac08 <__assert_fail@plt+0x9adc>
   1ac20:	mov	r0, #0
   1ac24:	bx	lr
   1ac28:	bhi	1abe0 <__assert_fail@plt+0x9ab4>
   1ac2c:	mvn	r0, #0
   1ac30:	bx	lr
   1ac34:	rsb	ip, r3, r3, lsl #30
   1ac38:	ldr	r2, [r0, #8]
   1ac3c:	ldr	r1, [r1, #8]
   1ac40:	lsl	r0, ip, #2
   1ac44:	add	r1, r1, r0
   1ac48:	add	r2, r2, r0
   1ac4c:	rsb	r3, r3, #0
   1ac50:	b	1ac64 <__assert_fail@plt+0x9b38>
   1ac54:	ldr	ip, [r1, #-4]!
   1ac58:	ldr	r0, [r2, #-4]!
   1ac5c:	cmp	ip, r0
   1ac60:	bne	1ac28 <__assert_fail@plt+0x9afc>
   1ac64:	subs	r3, r3, #1
   1ac68:	bcs	1ac54 <__assert_fail@plt+0x9b28>
   1ac6c:	b	1ac20 <__assert_fail@plt+0x9af4>
   1ac70:	ldr	r3, [r0, #4]
   1ac74:	eor	r2, r3, r3, asr #31
   1ac78:	sub	r2, r2, r3, asr #31
   1ac7c:	cmp	r2, #1
   1ac80:	ble	1ac8c <__assert_fail@plt+0x9b60>
   1ac84:	mov	r0, #1
   1ac88:	bx	lr
   1ac8c:	cmp	r3, #0
   1ac90:	moveq	r0, r3
   1ac94:	bne	1aca8 <__assert_fail@plt+0x9b7c>
   1ac98:	cmp	r1, r0
   1ac9c:	movls	r0, r3
   1aca0:	subhi	r0, r3, #1
   1aca4:	bx	lr
   1aca8:	ldr	r3, [r0, #8]
   1acac:	ldr	r0, [r3]
   1acb0:	cmp	r1, r0
   1acb4:	movcs	r3, #0
   1acb8:	movcc	r3, #1
   1acbc:	b	1ac98 <__assert_fail@plt+0x9b6c>
   1acc0:	ldr	r3, [r0, #4]
   1acc4:	ldr	r2, [r1, #4]
   1acc8:	cmp	r3, #0
   1accc:	rsblt	r3, r3, #0
   1acd0:	cmp	r2, #0
   1acd4:	rsblt	r2, r2, #0
   1acd8:	cmp	r3, r2
   1acdc:	beq	1acec <__assert_fail@plt+0x9bc0>
   1ace0:	blt	1ad28 <__assert_fail@plt+0x9bfc>
   1ace4:	mov	r0, #1
   1ace8:	bx	lr
   1acec:	ldr	r2, [r1, #8]
   1acf0:	ldr	r0, [r0, #8]
   1acf4:	lsl	ip, r3, #2
   1acf8:	add	r1, r0, ip
   1acfc:	add	r2, r2, ip
   1ad00:	b	1ad14 <__assert_fail@plt+0x9be8>
   1ad04:	ldr	ip, [r1, #-4]!
   1ad08:	ldr	r0, [r2, #-4]!
   1ad0c:	cmp	ip, r0
   1ad10:	bne	1ad24 <__assert_fail@plt+0x9bf8>
   1ad14:	subs	r3, r3, #1
   1ad18:	bcs	1ad04 <__assert_fail@plt+0x9bd8>
   1ad1c:	mov	r0, #0
   1ad20:	bx	lr
   1ad24:	bhi	1ace4 <__assert_fail@plt+0x9bb8>
   1ad28:	mvn	r0, #0
   1ad2c:	bx	lr
   1ad30:	push	{r4, lr}
   1ad34:	mov	r4, r0
   1ad38:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ad3c:	ldr	r3, [r4, #4]
   1ad40:	cmp	r3, #0
   1ad44:	rsblt	r3, r3, #0
   1ad48:	str	r3, [r4, #4]
   1ad4c:	pop	{r4, pc}
   1ad50:	push	{r4, lr}
   1ad54:	mov	r4, r0
   1ad58:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ad5c:	ldr	r3, [r4, #4]
   1ad60:	rsb	r3, r3, #0
   1ad64:	str	r3, [r4, #4]
   1ad68:	pop	{r4, pc}
   1ad6c:	ldr	ip, [r0]
   1ad70:	ldr	r3, [r0, #8]
   1ad74:	ldr	r2, [r1, #8]
   1ad78:	push	{r4, r5, lr}
   1ad7c:	ldr	r4, [r0, #4]
   1ad80:	ldr	r5, [r1, #4]
   1ad84:	ldr	lr, [r1]
   1ad88:	str	r5, [r0, #4]
   1ad8c:	str	r4, [r1, #4]
   1ad90:	str	lr, [r0]
   1ad94:	str	ip, [r1]
   1ad98:	str	r2, [r0, #8]
   1ad9c:	str	r3, [r1, #8]
   1ada0:	pop	{r4, r5, pc}
   1ada4:	push	{r4, r5, lr}
   1ada8:	mov	r4, r1
   1adac:	ldr	lr, [r1, #4]
   1adb0:	ldr	r3, [r2, #4]
   1adb4:	sub	sp, sp, #12
   1adb8:	teq	lr, r3
   1adbc:	mov	r5, r0
   1adc0:	bmi	1ade0 <__assert_fail@plt+0x9cb4>
   1adc4:	bl	1881c <__assert_fail@plt+0x76f0>
   1adc8:	ldr	r3, [r4, #4]
   1adcc:	cmp	r3, #0
   1add0:	rsblt	r0, r0, #0
   1add4:	str	r0, [r5, #4]
   1add8:	add	sp, sp, #12
   1addc:	pop	{r4, r5, pc}
   1ade0:	add	ip, r2, #8
   1ade4:	str	ip, [sp]
   1ade8:	mov	r1, lr
   1adec:	add	r2, r4, #8
   1adf0:	bl	18a08 <__assert_fail@plt+0x78dc>
   1adf4:	b	1adc8 <__assert_fail@plt+0x9c9c>
   1adf8:	push	{r4, r5, r6, lr}
   1adfc:	sub	sp, sp, #16
   1ae00:	ldr	ip, [pc, #104]	; 1ae70 <__assert_fail@plt+0x9d44>
   1ae04:	mov	r3, #0
   1ae08:	cmp	r2, #0
   1ae0c:	add	r4, sp, #4
   1ae10:	mov	r5, r0
   1ae14:	mov	r6, r1
   1ae18:	str	ip, [sp, #12]
   1ae1c:	str	r3, [sp, #4]
   1ae20:	str	r3, [sp, #8]
   1ae24:	bne	1ae60 <__assert_fail@plt+0x9d34>
   1ae28:	mov	r1, r6
   1ae2c:	mov	r2, r4
   1ae30:	mov	r0, r5
   1ae34:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1ae38:	ldr	r1, [sp, #4]
   1ae3c:	cmp	r1, #0
   1ae40:	beq	1ae58 <__assert_fail@plt+0x9d2c>
   1ae44:	ldr	r3, [pc, #40]	; 1ae74 <__assert_fail@plt+0x9d48>
   1ae48:	lsl	r1, r1, #2
   1ae4c:	ldr	r0, [sp, #12]
   1ae50:	ldr	r3, [r3, #8]
   1ae54:	blx	r3
   1ae58:	add	sp, sp, #16
   1ae5c:	pop	{r4, r5, r6, pc}
   1ae60:	mov	r1, r2
   1ae64:	mov	r0, r4
   1ae68:	bl	18388 <__assert_fail@plt+0x725c>
   1ae6c:	b	1ae28 <__assert_fail@plt+0x9cfc>
   1ae70:	andeq	r9, r2, r4, ror #29
   1ae74:	andeq	fp, r3, ip, lsl r1
   1ae78:	push	{r4, r5, r6, lr}
   1ae7c:	mov	r4, r0
   1ae80:	mov	r5, r1
   1ae84:	mov	r1, r2
   1ae88:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ae8c:	ldr	r3, [r4, #4]
   1ae90:	mov	r2, r5
   1ae94:	rsb	r3, r3, #0
   1ae98:	str	r3, [r4, #4]
   1ae9c:	mov	r1, r4
   1aea0:	mov	r0, r4
   1aea4:	pop	{r4, r5, r6, lr}
   1aea8:	b	1adf8 <__assert_fail@plt+0x9ccc>
   1aeac:	mov	r3, r2
   1aeb0:	push	{r4, lr}
   1aeb4:	mov	r2, r1
   1aeb8:	mov	r4, r0
   1aebc:	mov	r1, r3
   1aec0:	bl	1ae78 <__assert_fail@plt+0x9d4c>
   1aec4:	mov	r1, r4
   1aec8:	mov	r0, r4
   1aecc:	bl	1a424 <__assert_fail@plt+0x92f8>
   1aed0:	ldr	r3, [r4, #4]
   1aed4:	rsb	r3, r3, #0
   1aed8:	str	r3, [r4, #4]
   1aedc:	pop	{r4, pc}
   1aee0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aee4:	subs	r7, r1, #0
   1aee8:	beq	1afa0 <__assert_fail@plt+0x9e74>
   1aeec:	cmp	r7, #0
   1aef0:	ldr	r1, [sp, #40]	; 0x28
   1aef4:	mov	fp, r2
   1aef8:	eor	r5, r7, r7, asr #31
   1aefc:	movle	r2, #0
   1af00:	movgt	r2, #1
   1af04:	lsr	ip, r3, #5
   1af08:	sub	r5, r5, r7, asr #31
   1af0c:	cmp	r1, r2
   1af10:	mov	r6, r0
   1af14:	sub	r5, r5, ip
   1af18:	and	r9, r3, #31
   1af1c:	mov	r1, ip
   1af20:	beq	1afa8 <__assert_fail@plt+0x9e7c>
   1af24:	cmp	r5, #0
   1af28:	ble	1b06c <__assert_fail@plt+0x9f40>
   1af2c:	lsl	sl, ip, #2
   1af30:	mov	r8, #0
   1af34:	ldr	r3, [r6]
   1af38:	cmp	r5, r3
   1af3c:	ldrle	r4, [r6, #8]
   1af40:	bgt	1b058 <__assert_fail@plt+0x9f2c>
   1af44:	cmp	r9, #0
   1af48:	bne	1b02c <__assert_fail@plt+0x9f00>
   1af4c:	ldr	ip, [fp]
   1af50:	sub	r2, r4, #4
   1af54:	add	ip, ip, sl
   1af58:	mov	r3, r9
   1af5c:	add	r3, r3, #1
   1af60:	ldr	r1, [ip], #4
   1af64:	cmp	r5, r3
   1af68:	str	r1, [r2, #4]!
   1af6c:	bgt	1af5c <__assert_fail@plt+0x9e30>
   1af70:	cmp	r8, #0
   1af74:	str	r5, [r6, #4]
   1af78:	bne	1b010 <__assert_fail@plt+0x9ee4>
   1af7c:	cmp	r7, #0
   1af80:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af84:	mov	r1, r6
   1af88:	mov	r0, r6
   1af8c:	bl	1a424 <__assert_fail@plt+0x92f8>
   1af90:	ldr	r3, [r6, #4]
   1af94:	rsb	r3, r3, #0
   1af98:	str	r3, [r6, #4]
   1af9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afa0:	str	r7, [r0, #4]
   1afa4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afa8:	cmp	r5, #0
   1afac:	ble	1b008 <__assert_fail@plt+0x9edc>
   1afb0:	cmp	ip, #0
   1afb4:	ldr	r0, [fp]
   1afb8:	beq	1afec <__assert_fail@plt+0x9ec0>
   1afbc:	sub	sl, ip, #-1073741823	; 0xc0000001
   1afc0:	ldr	r3, [r0, sl, lsl #2]
   1afc4:	lsl	sl, sl, #2
   1afc8:	cmp	r3, #0
   1afcc:	add	r3, r0, sl
   1afd0:	beq	1afe4 <__assert_fail@plt+0x9eb8>
   1afd4:	b	1b080 <__assert_fail@plt+0x9f54>
   1afd8:	ldr	r2, [r3, #-4]!
   1afdc:	cmp	r2, #0
   1afe0:	bne	1b080 <__assert_fail@plt+0x9f54>
   1afe4:	subs	r1, r1, #1
   1afe8:	bne	1afd8 <__assert_fail@plt+0x9eac>
   1afec:	ldr	r3, [r0, ip, lsl #2]
   1aff0:	mvn	r2, #0
   1aff4:	lsl	sl, ip, #2
   1aff8:	bics	r3, r3, r2, lsl r9
   1affc:	movne	r8, #1
   1b000:	moveq	r8, #0
   1b004:	b	1af34 <__assert_fail@plt+0x9e08>
   1b008:	mov	r3, #0
   1b00c:	str	r3, [r0, #4]
   1b010:	mov	r2, #1
   1b014:	mov	r1, r6
   1b018:	mov	r0, r6
   1b01c:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   1b020:	cmp	r7, #0
   1b024:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b028:	b	1af84 <__assert_fail@plt+0x9e58>
   1b02c:	ldr	r1, [fp]
   1b030:	mov	r3, r9
   1b034:	mov	r2, r5
   1b038:	add	r1, r1, sl
   1b03c:	mov	r0, r4
   1b040:	bl	192b8 <__assert_fail@plt+0x818c>
   1b044:	sub	r3, r5, #-1073741823	; 0xc0000001
   1b048:	ldr	r3, [r4, r3, lsl #2]
   1b04c:	cmp	r3, #0
   1b050:	subeq	r5, r5, #1
   1b054:	b	1af70 <__assert_fail@plt+0x9e44>
   1b058:	mov	r1, r5
   1b05c:	mov	r0, r6
   1b060:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1b064:	mov	r4, r0
   1b068:	b	1af44 <__assert_fail@plt+0x9e18>
   1b06c:	cmp	r7, #0
   1b070:	mov	r3, #0
   1b074:	str	r3, [r6, #4]
   1b078:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b07c:	b	1af84 <__assert_fail@plt+0x9e58>
   1b080:	add	sl, sl, #4
   1b084:	mov	r8, #1
   1b088:	b	1af34 <__assert_fail@plt+0x9e08>
   1b08c:	push	{r4, r5, r6, r7, lr}
   1b090:	sub	sp, sp, #12
   1b094:	ldr	r6, [r0, #4]
   1b098:	cmp	r6, #0
   1b09c:	ble	1b0f0 <__assert_fail@plt+0x9fc4>
   1b0a0:	mov	r5, r0
   1b0a4:	mov	r3, #0
   1b0a8:	ldr	r1, [r5, #8]!
   1b0ac:	mov	r4, r0
   1b0b0:	mov	r2, r1
   1b0b4:	ldr	r0, [r1]
   1b0b8:	str	r3, [sp]
   1b0bc:	mov	r1, r3
   1b0c0:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   1b0c4:	mov	ip, #2
   1b0c8:	mov	r2, r5
   1b0cc:	mov	r1, r6
   1b0d0:	str	ip, [sp]
   1b0d4:	mov	r7, r0
   1b0d8:	mov	r3, r7
   1b0dc:	mov	r0, r4
   1b0e0:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1b0e4:	mov	r0, r7
   1b0e8:	add	sp, sp, #12
   1b0ec:	pop	{r4, r5, r6, r7, pc}
   1b0f0:	ldr	r3, [pc, #12]	; 1b104 <__assert_fail@plt+0x9fd8>
   1b0f4:	ldr	r2, [pc, #12]	; 1b108 <__assert_fail@plt+0x9fdc>
   1b0f8:	ldr	r1, [pc, #12]	; 1b10c <__assert_fail@plt+0x9fe0>
   1b0fc:	ldr	r0, [pc, #12]	; 1b110 <__assert_fail@plt+0x9fe4>
   1b100:	bl	1112c <__assert_fail@plt>
   1b104:	strdeq	r9, [r2], -ip
   1b108:	andeq	r0, r0, r3, lsr #21
   1b10c:	andeq	sl, r2, r4, rrx
   1b110:	strdeq	sl, [r2], -r4
   1b114:	push	{r4, r5, lr}
   1b118:	mov	r4, r1
   1b11c:	ldr	lr, [r1, #4]
   1b120:	ldr	r3, [r2, #4]
   1b124:	sub	sp, sp, #12
   1b128:	teq	lr, r3
   1b12c:	mov	r5, r0
   1b130:	bmi	1b160 <__assert_fail@plt+0xa034>
   1b134:	add	ip, r2, #8
   1b138:	str	ip, [sp]
   1b13c:	mov	r1, lr
   1b140:	add	r2, r4, #8
   1b144:	bl	18a08 <__assert_fail@plt+0x78dc>
   1b148:	ldr	r3, [r4, #4]
   1b14c:	cmp	r3, #0
   1b150:	rsblt	r0, r0, #0
   1b154:	str	r0, [r5, #4]
   1b158:	add	sp, sp, #12
   1b15c:	pop	{r4, r5, pc}
   1b160:	bl	1881c <__assert_fail@plt+0x76f0>
   1b164:	b	1b148 <__assert_fail@plt+0xa01c>
   1b168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b16c:	mov	r9, r3
   1b170:	ldr	r5, [r3, #4]
   1b174:	sub	sp, sp, #76	; 0x4c
   1b178:	cmp	r5, #0
   1b17c:	ldr	r7, [r2, #4]
   1b180:	beq	1b61c <__assert_fail@plt+0xa4f0>
   1b184:	cmp	r7, #0
   1b188:	mov	r6, r0
   1b18c:	mov	r8, r1
   1b190:	bne	1b1b8 <__assert_fail@plt+0xa08c>
   1b194:	cmp	r0, #0
   1b198:	strne	r7, [r0, #4]
   1b19c:	cmp	r1, #0
   1b1a0:	moveq	r7, r1
   1b1a4:	movne	r7, #0
   1b1a8:	strne	r7, [r1, #4]
   1b1ac:	mov	r0, r7
   1b1b0:	add	sp, sp, #76	; 0x4c
   1b1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1b8:	eor	r4, r5, r5, asr #31
   1b1bc:	eor	sl, r7, r7, asr #31
   1b1c0:	sub	r4, r4, r5, asr #31
   1b1c4:	sub	sl, sl, r7, asr #31
   1b1c8:	cmp	sl, r4
   1b1cc:	mov	r3, r2
   1b1d0:	eor	r5, r5, r7
   1b1d4:	bge	1b2b4 <__assert_fail@plt+0xa188>
   1b1d8:	ldr	r2, [sp, #112]	; 0x70
   1b1dc:	cmp	r5, #0
   1b1e0:	cmpge	r2, #1
   1b1e4:	beq	1b248 <__assert_fail@plt+0xa11c>
   1b1e8:	ldr	r2, [sp, #112]	; 0x70
   1b1ec:	lsr	r5, r5, #31
   1b1f0:	cmp	r2, #0
   1b1f4:	movne	r5, #0
   1b1f8:	andeq	r5, r5, #1
   1b1fc:	cmp	r5, #0
   1b200:	beq	1b284 <__assert_fail@plt+0xa158>
   1b204:	cmp	r1, #0
   1b208:	beq	1b21c <__assert_fail@plt+0xa0f0>
   1b20c:	mov	r2, r9
   1b210:	mov	r1, r3
   1b214:	mov	r0, r8
   1b218:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1b21c:	cmp	r6, #0
   1b220:	beq	1b2a4 <__assert_fail@plt+0xa178>
   1b224:	ldr	r2, [r6]
   1b228:	mvn	r3, #0
   1b22c:	cmp	r2, #0
   1b230:	str	r3, [r6, #4]
   1b234:	ldrgt	r0, [r6, #8]
   1b238:	ble	1b604 <__assert_fail@plt+0xa4d8>
   1b23c:	mov	r7, #1
   1b240:	str	r7, [r0]
   1b244:	b	1b1ac <__assert_fail@plt+0xa080>
   1b248:	cmp	r1, #0
   1b24c:	beq	1b260 <__assert_fail@plt+0xa134>
   1b250:	mov	r2, r9
   1b254:	mov	r1, r3
   1b258:	mov	r0, r8
   1b25c:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1b260:	cmp	r6, #0
   1b264:	beq	1b2a4 <__assert_fail@plt+0xa178>
   1b268:	mov	r0, r6
   1b26c:	mov	r1, #1
   1b270:	bl	18388 <__assert_fail@plt+0x725c>
   1b274:	mov	r7, #1
   1b278:	mov	r0, r7
   1b27c:	add	sp, sp, #76	; 0x4c
   1b280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b284:	cmp	r1, #0
   1b288:	beq	1b298 <__assert_fail@plt+0xa16c>
   1b28c:	mov	r1, r3
   1b290:	mov	r0, r8
   1b294:	bl	1a424 <__assert_fail@plt+0x92f8>
   1b298:	cmp	r6, #0
   1b29c:	movne	r3, #0
   1b2a0:	strne	r3, [r6, #4]
   1b2a4:	mov	r7, #1
   1b2a8:	mov	r0, r7
   1b2ac:	add	sp, sp, #76	; 0x4c
   1b2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2b4:	ldr	r2, [pc, #904]	; 1b644 <__assert_fail@plt+0xa518>
   1b2b8:	mov	fp, #0
   1b2bc:	mov	r1, r3
   1b2c0:	add	r0, sp, #44	; 0x2c
   1b2c4:	str	r2, [sp, #52]	; 0x34
   1b2c8:	str	fp, [sp, #44]	; 0x2c
   1b2cc:	str	fp, [sp, #48]	; 0x30
   1b2d0:	bl	1a424 <__assert_fail@plt+0x92f8>
   1b2d4:	sub	r3, sl, r4
   1b2d8:	ldr	r2, [sp, #52]	; 0x34
   1b2dc:	cmp	r6, fp
   1b2e0:	add	r3, r3, #1
   1b2e4:	str	r3, [sp, #20]
   1b2e8:	str	r2, [sp, #12]
   1b2ec:	moveq	fp, r6
   1b2f0:	beq	1b32c <__assert_fail@plt+0xa200>
   1b2f4:	lsls	r0, r3, #5
   1b2f8:	moveq	r3, fp
   1b2fc:	movne	r3, #1
   1b300:	sub	r0, r0, r3
   1b304:	ldr	r3, [pc, #828]	; 1b648 <__assert_fail@plt+0xa51c>
   1b308:	lsr	r0, r0, #5
   1b30c:	add	r0, r0, #1
   1b310:	str	fp, [sp, #36]	; 0x24
   1b314:	str	r0, [sp, #32]
   1b318:	ldr	r3, [r3, #4]
   1b31c:	lsl	r0, r0, #2
   1b320:	blx	r3
   1b324:	mov	fp, r0
   1b328:	str	r0, [sp, #40]	; 0x28
   1b32c:	ldr	r3, [r9, #8]
   1b330:	add	r0, sp, #56	; 0x38
   1b334:	mov	r1, r3
   1b338:	mov	r2, r4
   1b33c:	str	r3, [sp, #16]
   1b340:	bl	1a034 <__assert_fail@plt+0x8f08>
   1b344:	cmp	r4, #2
   1b348:	ldr	r3, [sp, #16]
   1b34c:	ble	1b35c <__assert_fail@plt+0xa230>
   1b350:	ldr	r2, [sp, #56]	; 0x38
   1b354:	cmp	r2, #0
   1b358:	bne	1b504 <__assert_fail@plt+0xa3d8>
   1b35c:	add	r2, sp, #56	; 0x38
   1b360:	str	r2, [sp, #4]
   1b364:	str	r4, [sp]
   1b368:	mov	r2, sl
   1b36c:	ldr	r1, [sp, #12]
   1b370:	mov	r0, fp
   1b374:	bl	1937c <__assert_fail@plt+0x8250>
   1b378:	lsl	r3, r4, #2
   1b37c:	str	r3, [sp, #16]
   1b380:	cmp	fp, #0
   1b384:	beq	1b3ac <__assert_fail@plt+0xa280>
   1b388:	ldr	r2, [sp, #20]
   1b38c:	sub	r3, r2, #-1073741823	; 0xc0000001
   1b390:	ldr	r3, [fp, r3, lsl #2]
   1b394:	cmp	r3, #0
   1b398:	subeq	r2, r2, #1
   1b39c:	cmp	r5, #0
   1b3a0:	mov	r3, r2
   1b3a4:	rsblt	r3, r2, #0
   1b3a8:	str	r3, [sp, #36]	; 0x24
   1b3ac:	ldr	r3, [sp, #12]
   1b3b0:	ldr	r2, [sp, #16]
   1b3b4:	add	r3, r3, r2
   1b3b8:	ldr	r2, [r3, #-4]!
   1b3bc:	cmp	r2, #0
   1b3c0:	bne	1b474 <__assert_fail@plt+0xa348>
   1b3c4:	subs	r4, r4, #1
   1b3c8:	bne	1b3b8 <__assert_fail@plt+0xa28c>
   1b3cc:	cmp	r7, #0
   1b3d0:	strge	r4, [sp, #48]	; 0x30
   1b3d4:	movge	r7, r4
   1b3d8:	blt	1b584 <__assert_fail@plt+0xa458>
   1b3dc:	cmp	r6, #0
   1b3e0:	beq	1b41c <__assert_fail@plt+0xa2f0>
   1b3e4:	ldr	r0, [sp, #32]
   1b3e8:	ldr	r1, [r6]
   1b3ec:	ldr	ip, [sp, #36]	; 0x24
   1b3f0:	ldr	r2, [r6, #4]
   1b3f4:	ldr	r3, [sp, #40]	; 0x28
   1b3f8:	str	r0, [r6]
   1b3fc:	ldr	r0, [r6, #8]
   1b400:	cmp	r1, #0
   1b404:	str	r1, [sp, #32]
   1b408:	str	ip, [r6, #4]
   1b40c:	str	r2, [sp, #36]	; 0x24
   1b410:	str	r3, [r6, #8]
   1b414:	str	r0, [sp, #40]	; 0x28
   1b418:	bne	1b4f0 <__assert_fail@plt+0xa3c4>
   1b41c:	cmp	r8, #0
   1b420:	beq	1b4e8 <__assert_fail@plt+0xa3bc>
   1b424:	ldr	lr, [sp, #48]	; 0x30
   1b428:	ldr	ip, [r8, #4]
   1b42c:	ldr	r0, [sp, #44]	; 0x2c
   1b430:	ldr	r1, [r8]
   1b434:	ldr	r2, [sp, #52]	; 0x34
   1b438:	ldr	r3, [r8, #8]
   1b43c:	str	lr, [r8, #4]
   1b440:	str	ip, [sp, #48]	; 0x30
   1b444:	str	r0, [r8]
   1b448:	str	r1, [sp, #44]	; 0x2c
   1b44c:	str	r2, [r8, #8]
   1b450:	str	r3, [sp, #52]	; 0x34
   1b454:	cmp	r1, #0
   1b458:	beq	1b1ac <__assert_fail@plt+0xa080>
   1b45c:	ldr	r3, [pc, #484]	; 1b648 <__assert_fail@plt+0xa51c>
   1b460:	lsl	r1, r1, #2
   1b464:	ldr	r0, [sp, #52]	; 0x34
   1b468:	ldr	r3, [r3, #8]
   1b46c:	blx	r3
   1b470:	b	1b1ac <__assert_fail@plt+0xa080>
   1b474:	cmp	r7, #0
   1b478:	blt	1b5e0 <__assert_fail@plt+0xa4b4>
   1b47c:	ldr	r2, [sp, #112]	; 0x70
   1b480:	lsr	r3, r5, #31
   1b484:	cmp	r2, #0
   1b488:	movne	r3, #0
   1b48c:	andeq	r3, r3, #1
   1b490:	cmp	r3, #0
   1b494:	str	r4, [sp, #48]	; 0x30
   1b498:	beq	1b638 <__assert_fail@plt+0xa50c>
   1b49c:	cmp	r6, #0
   1b4a0:	beq	1b4dc <__assert_fail@plt+0xa3b0>
   1b4a4:	add	r1, sp, #32
   1b4a8:	mov	r0, r1
   1b4ac:	mov	r2, #1
   1b4b0:	bl	1aeac <__assert_fail@plt+0x9d80>
   1b4b4:	cmp	r8, #0
   1b4b8:	beq	1b614 <__assert_fail@plt+0xa4e8>
   1b4bc:	add	r1, sp, #44	; 0x2c
   1b4c0:	mov	r2, r9
   1b4c4:	mov	r0, r1
   1b4c8:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1b4cc:	mov	r7, #1
   1b4d0:	cmp	r6, #0
   1b4d4:	bne	1b3e4 <__assert_fail@plt+0xa2b8>
   1b4d8:	b	1b424 <__assert_fail@plt+0xa2f8>
   1b4dc:	cmp	r8, #0
   1b4e0:	moveq	r7, #1
   1b4e4:	bne	1b4bc <__assert_fail@plt+0xa390>
   1b4e8:	ldr	r1, [sp, #44]	; 0x2c
   1b4ec:	b	1b454 <__assert_fail@plt+0xa328>
   1b4f0:	ldr	r3, [pc, #336]	; 1b648 <__assert_fail@plt+0xa51c>
   1b4f4:	lsl	r1, r1, #2
   1b4f8:	ldr	r3, [r3, #8]
   1b4fc:	blx	r3
   1b500:	b	1b41c <__assert_fail@plt+0xa2f0>
   1b504:	str	r3, [sp, #28]
   1b508:	lsl	r3, r4, #2
   1b50c:	str	r3, [sp, #16]
   1b510:	mov	r0, r3
   1b514:	ldr	r3, [pc, #300]	; 1b648 <__assert_fail@plt+0xa51c>
   1b518:	ldr	r2, [r3, #4]
   1b51c:	blx	r2
   1b520:	ldr	r3, [sp, #28]
   1b524:	mov	r2, r4
   1b528:	mov	r1, r3
   1b52c:	ldr	r3, [sp, #56]	; 0x38
   1b530:	str	r0, [sp, #24]
   1b534:	bl	19078 <__assert_fail@plt+0x7f4c>
   1b538:	cmp	r0, #0
   1b53c:	bne	1b624 <__assert_fail@plt+0xa4f8>
   1b540:	mov	r2, sl
   1b544:	ldr	sl, [sp, #24]
   1b548:	add	r3, sp, #56	; 0x38
   1b54c:	str	r3, [sp, #4]
   1b550:	str	r4, [sp]
   1b554:	mov	r3, sl
   1b558:	ldr	r1, [sp, #12]
   1b55c:	mov	r0, fp
   1b560:	bl	1937c <__assert_fail@plt+0x8250>
   1b564:	cmp	sl, #0
   1b568:	beq	1b380 <__assert_fail@plt+0xa254>
   1b56c:	ldr	r3, [pc, #212]	; 1b648 <__assert_fail@plt+0xa51c>
   1b570:	mov	r0, sl
   1b574:	ldr	r1, [sp, #16]
   1b578:	ldr	r3, [r3, #8]
   1b57c:	blx	r3
   1b580:	b	1b380 <__assert_fail@plt+0xa254>
   1b584:	mov	r7, r4
   1b588:	mov	r3, r4
   1b58c:	str	r4, [sp, #48]	; 0x30
   1b590:	ldr	r2, [sp, #112]	; 0x70
   1b594:	cmp	r5, #0
   1b598:	cmpge	r2, #1
   1b59c:	moveq	r5, #1
   1b5a0:	movne	r5, #0
   1b5a4:	tst	r3, r5
   1b5a8:	beq	1b3dc <__assert_fail@plt+0xa2b0>
   1b5ac:	cmp	r6, #0
   1b5b0:	beq	1b5f8 <__assert_fail@plt+0xa4cc>
   1b5b4:	add	r1, sp, #32
   1b5b8:	mov	r0, r1
   1b5bc:	mov	r2, #1
   1b5c0:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   1b5c4:	cmp	r8, #0
   1b5c8:	beq	1b3e4 <__assert_fail@plt+0xa2b8>
   1b5cc:	add	r1, sp, #44	; 0x2c
   1b5d0:	mov	r2, r9
   1b5d4:	mov	r0, r1
   1b5d8:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1b5dc:	b	1b4d0 <__assert_fail@plt+0xa3a4>
   1b5e0:	ldr	r3, [sp, #112]	; 0x70
   1b5e4:	clz	r3, r3
   1b5e8:	lsr	r3, r3, #5
   1b5ec:	rsb	r4, r4, #0
   1b5f0:	and	r3, r3, r5, lsr #31
   1b5f4:	b	1b490 <__assert_fail@plt+0xa364>
   1b5f8:	cmp	r8, #0
   1b5fc:	bne	1b5cc <__assert_fail@plt+0xa4a0>
   1b600:	b	1b4e8 <__assert_fail@plt+0xa3bc>
   1b604:	mov	r0, r6
   1b608:	mov	r1, #1
   1b60c:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1b610:	b	1b23c <__assert_fail@plt+0xa110>
   1b614:	mov	r7, #1
   1b618:	b	1b3e4 <__assert_fail@plt+0xa2b8>
   1b61c:	ldr	r0, [pc, #40]	; 1b64c <__assert_fail@plt+0xa520>
   1b620:	bl	11138 <__assert_fail@plt+0xc>
   1b624:	ldr	r3, [pc, #36]	; 1b650 <__assert_fail@plt+0xa524>
   1b628:	ldr	r2, [pc, #36]	; 1b654 <__assert_fail@plt+0xa528>
   1b62c:	ldr	r1, [pc, #36]	; 1b658 <__assert_fail@plt+0xa52c>
   1b630:	ldr	r0, [pc, #36]	; 1b65c <__assert_fail@plt+0xa530>
   1b634:	bl	1112c <__assert_fail@plt>
   1b638:	mov	r7, #1
   1b63c:	mov	r3, r7
   1b640:	b	1b590 <__assert_fail@plt+0xa464>
   1b644:	andeq	r9, r2, r4, ror #29
   1b648:	andeq	fp, r3, ip, lsl r1
   1b64c:	andeq	sl, r2, r4, lsl #6
   1b650:	andeq	r9, r2, ip, lsl #30
   1b654:	andeq	r0, r0, r3, lsl #9
   1b658:	andeq	sl, r2, r4, rrx
   1b65c:	andeq	sl, r2, r0, asr #2
   1b660:	push	{r4, r5, r6, r7, lr}
   1b664:	sub	sp, sp, #44	; 0x2c
   1b668:	ldr	lr, [pc, #252]	; 1b76c <__assert_fail@plt+0xa640>
   1b66c:	mov	ip, #0
   1b670:	cmp	r3, #0
   1b674:	mov	r6, r0
   1b678:	mov	r4, r1
   1b67c:	str	lr, [sp, #24]
   1b680:	str	lr, [sp, #36]	; 0x24
   1b684:	str	ip, [sp, #16]
   1b688:	str	ip, [sp, #20]
   1b68c:	str	ip, [sp, #28]
   1b690:	str	ip, [sp, #32]
   1b694:	ldr	r7, [sp, #64]	; 0x40
   1b698:	addeq	r5, sp, #28
   1b69c:	bne	1b750 <__assert_fail@plt+0xa624>
   1b6a0:	add	r1, sp, #16
   1b6a4:	str	r7, [sp]
   1b6a8:	mov	r3, r5
   1b6ac:	mov	r0, r6
   1b6b0:	bl	1b168 <__assert_fail@plt+0xa03c>
   1b6b4:	ldr	r1, [sp, #28]
   1b6b8:	cmp	r1, #0
   1b6bc:	bne	1b738 <__assert_fail@plt+0xa60c>
   1b6c0:	ldr	r3, [sp, #20]
   1b6c4:	cmp	r3, #0
   1b6c8:	moveq	r5, r3
   1b6cc:	ldrne	r2, [sp, #24]
   1b6d0:	ldrne	r5, [r2]
   1b6d4:	cmp	r4, #0
   1b6d8:	ldreq	r1, [sp, #16]
   1b6dc:	beq	1b710 <__assert_fail@plt+0xa5e4>
   1b6e0:	ldr	r2, [r4]
   1b6e4:	ldr	lr, [sp, #16]
   1b6e8:	ldr	ip, [r4, #4]
   1b6ec:	ldr	r0, [r4, #8]
   1b6f0:	mov	r1, r2
   1b6f4:	str	r2, [sp, #16]
   1b6f8:	ldr	r2, [sp, #24]
   1b6fc:	str	lr, [r4]
   1b700:	str	ip, [sp, #20]
   1b704:	str	r3, [r4, #4]
   1b708:	str	r0, [sp, #24]
   1b70c:	str	r2, [r4, #8]
   1b710:	cmp	r1, #0
   1b714:	beq	1b72c <__assert_fail@plt+0xa600>
   1b718:	ldr	r3, [pc, #80]	; 1b770 <__assert_fail@plt+0xa644>
   1b71c:	lsl	r1, r1, #2
   1b720:	ldr	r0, [sp, #24]
   1b724:	ldr	r3, [r3, #8]
   1b728:	blx	r3
   1b72c:	mov	r0, r5
   1b730:	add	sp, sp, #44	; 0x2c
   1b734:	pop	{r4, r5, r6, r7, pc}
   1b738:	ldr	r3, [pc, #48]	; 1b770 <__assert_fail@plt+0xa644>
   1b73c:	lsl	r1, r1, #2
   1b740:	ldr	r0, [sp, #36]	; 0x24
   1b744:	ldr	r3, [r3, #8]
   1b748:	blx	r3
   1b74c:	b	1b6c0 <__assert_fail@plt+0xa594>
   1b750:	add	r5, sp, #28
   1b754:	mov	r1, r3
   1b758:	mov	r0, r5
   1b75c:	str	r2, [sp, #12]
   1b760:	bl	18388 <__assert_fail@plt+0x725c>
   1b764:	ldr	r2, [sp, #12]
   1b768:	b	1b6a0 <__assert_fail@plt+0xa574>
   1b76c:	andeq	r9, r2, r4, ror #29
   1b770:	andeq	fp, r3, ip, lsl r1
   1b774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b778:	sub	sp, sp, #20
   1b77c:	ldr	r3, [r2, #4]
   1b780:	ldr	r5, [r1, #4]
   1b784:	cmp	r3, #0
   1b788:	cmpne	r5, #0
   1b78c:	moveq	r3, #0
   1b790:	streq	r3, [r0, #4]
   1b794:	bne	1b7a0 <__assert_fail@plt+0xa674>
   1b798:	add	sp, sp, #20
   1b79c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7a0:	eor	r9, r3, r3, asr #31
   1b7a4:	str	r2, [sp, #12]
   1b7a8:	eor	r2, r5, r5, asr #31
   1b7ac:	sub	r9, r9, r3, asr #31
   1b7b0:	sub	r2, r2, r5, asr #31
   1b7b4:	add	r7, r2, r9
   1b7b8:	mov	r8, r1
   1b7bc:	lsls	r6, r7, #5
   1b7c0:	movne	r1, #1
   1b7c4:	moveq	r1, #0
   1b7c8:	sub	r6, r6, r1
   1b7cc:	ldr	fp, [pc, #152]	; 1b86c <__assert_fail@plt+0xa740>
   1b7d0:	lsr	r6, r6, #5
   1b7d4:	add	r6, r6, #1
   1b7d8:	mov	r4, r0
   1b7dc:	ldr	r1, [fp, #4]
   1b7e0:	lsl	r0, r6, #2
   1b7e4:	eor	r5, r5, r3
   1b7e8:	str	r2, [sp, #8]
   1b7ec:	blx	r1
   1b7f0:	ldr	r2, [sp, #8]
   1b7f4:	cmp	r2, r9
   1b7f8:	ldrge	r3, [sp, #12]
   1b7fc:	ldrlt	r1, [sp, #12]
   1b800:	ldrge	r1, [r8, #8]
   1b804:	ldrlt	r3, [r8, #8]
   1b808:	ldrge	r3, [r3, #8]
   1b80c:	ldrlt	r1, [r1, #8]
   1b810:	strge	r9, [sp]
   1b814:	strlt	r2, [sp]
   1b818:	movlt	r2, r9
   1b81c:	mov	sl, r0
   1b820:	bl	18f18 <__assert_fail@plt+0x7dec>
   1b824:	sub	r3, r7, #-1073741823	; 0xc0000001
   1b828:	ldr	r1, [r4]
   1b82c:	ldr	r3, [sl, r3, lsl #2]
   1b830:	ldr	r0, [r4, #8]
   1b834:	cmp	r3, #0
   1b838:	subeq	r7, r7, #1
   1b83c:	cmp	r5, #0
   1b840:	rsblt	r7, r7, #0
   1b844:	cmp	r1, #0
   1b848:	str	r7, [r4, #4]
   1b84c:	str	r6, [r4]
   1b850:	str	sl, [r4, #8]
   1b854:	beq	1b798 <__assert_fail@plt+0xa66c>
   1b858:	ldr	r3, [fp, #8]
   1b85c:	lsl	r1, r1, #2
   1b860:	add	sp, sp, #20
   1b864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b868:	bx	r3
   1b86c:	andeq	fp, r3, ip, lsl r1
   1b870:	push	{r4, r5, r6, lr}
   1b874:	sub	sp, sp, #16
   1b878:	ldr	ip, [pc, #104]	; 1b8e8 <__assert_fail@plt+0xa7bc>
   1b87c:	mov	r3, #0
   1b880:	cmp	r2, #0
   1b884:	add	r4, sp, #4
   1b888:	mov	r5, r0
   1b88c:	mov	r6, r1
   1b890:	str	ip, [sp, #12]
   1b894:	str	r3, [sp, #4]
   1b898:	str	r3, [sp, #8]
   1b89c:	bne	1b8d8 <__assert_fail@plt+0xa7ac>
   1b8a0:	mov	r1, r6
   1b8a4:	mov	r2, r4
   1b8a8:	mov	r0, r5
   1b8ac:	bl	1b774 <__assert_fail@plt+0xa648>
   1b8b0:	ldr	r1, [sp, #4]
   1b8b4:	cmp	r1, #0
   1b8b8:	beq	1b8d0 <__assert_fail@plt+0xa7a4>
   1b8bc:	ldr	r3, [pc, #40]	; 1b8ec <__assert_fail@plt+0xa7c0>
   1b8c0:	lsl	r1, r1, #2
   1b8c4:	ldr	r0, [sp, #12]
   1b8c8:	ldr	r3, [r3, #8]
   1b8cc:	blx	r3
   1b8d0:	add	sp, sp, #16
   1b8d4:	pop	{r4, r5, r6, pc}
   1b8d8:	mov	r1, r2
   1b8dc:	mov	r0, r4
   1b8e0:	bl	18388 <__assert_fail@plt+0x725c>
   1b8e4:	b	1b8a0 <__assert_fail@plt+0xa774>
   1b8e8:	andeq	r9, r2, r4, ror #29
   1b8ec:	andeq	fp, r3, ip, lsl r1
   1b8f0:	subs	ip, r2, #0
   1b8f4:	blt	1b8fc <__assert_fail@plt+0xa7d0>
   1b8f8:	b	1b870 <__assert_fail@plt+0xa744>
   1b8fc:	push	{r4, lr}
   1b900:	rsb	r2, ip, #0
   1b904:	mov	r4, r0
   1b908:	bl	1b870 <__assert_fail@plt+0xa744>
   1b90c:	mov	r1, r4
   1b910:	mov	r0, r4
   1b914:	bl	1a424 <__assert_fail@plt+0x92f8>
   1b918:	ldr	r3, [r4, #4]
   1b91c:	rsb	r3, r3, #0
   1b920:	str	r3, [r4, #4]
   1b924:	pop	{r4, pc}
   1b928:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b92c:	mov	r9, r0
   1b930:	ldr	r5, [r1, #4]
   1b934:	cmp	r5, #0
   1b938:	beq	1b9cc <__assert_fail@plt+0xa8a0>
   1b93c:	cmp	r5, #0
   1b940:	rsblt	r5, r5, #0
   1b944:	lsr	r4, r2, #5
   1b948:	ands	r3, r2, #31
   1b94c:	movne	r3, #1
   1b950:	mov	r8, r1
   1b954:	add	r7, r5, r4
   1b958:	ldr	r1, [r0]
   1b95c:	add	r7, r7, r3
   1b960:	cmp	r7, r1
   1b964:	and	sl, r2, #31
   1b968:	ldrle	r6, [r0, #8]
   1b96c:	bgt	1b9fc <__assert_fail@plt+0xa8d0>
   1b970:	cmp	sl, #0
   1b974:	bne	1b9d4 <__assert_fail@plt+0xa8a8>
   1b978:	sub	r3, r5, #1
   1b97c:	add	r3, r3, r4
   1b980:	ldr	r0, [r8, #8]
   1b984:	add	r3, r6, r3, lsl #2
   1b988:	add	r2, r0, r5, lsl #2
   1b98c:	ldr	r1, [r2, #-4]!
   1b990:	cmp	r2, r0
   1b994:	str	r1, [r3], #-4
   1b998:	bne	1b98c <__assert_fail@plt+0xa860>
   1b99c:	cmp	r4, #0
   1b9a0:	addne	r3, r6, r4, lsl #2
   1b9a4:	movne	r2, #0
   1b9a8:	beq	1b9b8 <__assert_fail@plt+0xa88c>
   1b9ac:	str	r2, [r3, #-4]!
   1b9b0:	cmp	r6, r3
   1b9b4:	bne	1b9ac <__assert_fail@plt+0xa880>
   1b9b8:	ldr	r3, [r8, #4]
   1b9bc:	cmp	r3, #0
   1b9c0:	blt	1ba14 <__assert_fail@plt+0xa8e8>
   1b9c4:	str	r7, [r9, #4]
   1b9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b9cc:	str	r5, [r0, #4]
   1b9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b9d4:	mov	r3, sl
   1b9d8:	mov	r2, r5
   1b9dc:	ldr	r1, [r8, #8]
   1b9e0:	add	r0, r6, r4, lsl #2
   1b9e4:	bl	19078 <__assert_fail@plt+0x7f4c>
   1b9e8:	sub	r3, r7, #-1073741823	; 0xc0000001
   1b9ec:	cmp	r0, #0
   1b9f0:	subeq	r7, r7, #1
   1b9f4:	str	r0, [r6, r3, lsl #2]
   1b9f8:	b	1b99c <__assert_fail@plt+0xa870>
   1b9fc:	mov	r1, r7
   1ba00:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1ba04:	cmp	sl, #0
   1ba08:	mov	r6, r0
   1ba0c:	beq	1b978 <__assert_fail@plt+0xa84c>
   1ba10:	b	1b9d4 <__assert_fail@plt+0xa8a8>
   1ba14:	rsb	r7, r7, #0
   1ba18:	str	r7, [r9, #4]
   1ba1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba20:	push	{r4, r5, r6, lr}
   1ba24:	sub	sp, sp, #16
   1ba28:	ldr	ip, [pc, #120]	; 1baa8 <__assert_fail@plt+0xa97c>
   1ba2c:	mov	r3, #0
   1ba30:	cmp	r2, #0
   1ba34:	add	r4, sp, #4
   1ba38:	mov	r5, r0
   1ba3c:	mov	r6, r1
   1ba40:	str	ip, [sp, #12]
   1ba44:	str	r3, [sp, #4]
   1ba48:	str	r3, [sp, #8]
   1ba4c:	bne	1ba98 <__assert_fail@plt+0xa96c>
   1ba50:	mov	r1, r6
   1ba54:	mov	r2, r4
   1ba58:	mov	r0, r4
   1ba5c:	bl	1b774 <__assert_fail@plt+0xa648>
   1ba60:	mov	r1, r5
   1ba64:	mov	r2, r4
   1ba68:	mov	r0, r5
   1ba6c:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1ba70:	ldr	r1, [sp, #4]
   1ba74:	cmp	r1, #0
   1ba78:	beq	1ba90 <__assert_fail@plt+0xa964>
   1ba7c:	ldr	r3, [pc, #40]	; 1baac <__assert_fail@plt+0xa980>
   1ba80:	lsl	r1, r1, #2
   1ba84:	ldr	r0, [sp, #12]
   1ba88:	ldr	r3, [r3, #8]
   1ba8c:	blx	r3
   1ba90:	add	sp, sp, #16
   1ba94:	pop	{r4, r5, r6, pc}
   1ba98:	mov	r1, r2
   1ba9c:	mov	r0, r4
   1baa0:	bl	18388 <__assert_fail@plt+0x725c>
   1baa4:	b	1ba50 <__assert_fail@plt+0xa924>
   1baa8:	andeq	r9, r2, r4, ror #29
   1baac:	andeq	fp, r3, ip, lsl r1
   1bab0:	push	{r4, r5, r6, lr}
   1bab4:	sub	sp, sp, #16
   1bab8:	ldr	ip, [pc, #120]	; 1bb38 <__assert_fail@plt+0xaa0c>
   1babc:	mov	r3, #0
   1bac0:	cmp	r2, #0
   1bac4:	add	r4, sp, #4
   1bac8:	mov	r5, r0
   1bacc:	mov	r6, r1
   1bad0:	str	ip, [sp, #12]
   1bad4:	str	r3, [sp, #4]
   1bad8:	str	r3, [sp, #8]
   1badc:	bne	1bb28 <__assert_fail@plt+0xa9fc>
   1bae0:	mov	r1, r6
   1bae4:	mov	r2, r4
   1bae8:	mov	r0, r4
   1baec:	bl	1b774 <__assert_fail@plt+0xa648>
   1baf0:	mov	r1, r5
   1baf4:	mov	r2, r4
   1baf8:	mov	r0, r5
   1bafc:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1bb00:	ldr	r1, [sp, #4]
   1bb04:	cmp	r1, #0
   1bb08:	beq	1bb20 <__assert_fail@plt+0xa9f4>
   1bb0c:	ldr	r3, [pc, #40]	; 1bb3c <__assert_fail@plt+0xaa10>
   1bb10:	lsl	r1, r1, #2
   1bb14:	ldr	r0, [sp, #12]
   1bb18:	ldr	r3, [r3, #8]
   1bb1c:	blx	r3
   1bb20:	add	sp, sp, #16
   1bb24:	pop	{r4, r5, r6, pc}
   1bb28:	mov	r1, r2
   1bb2c:	mov	r0, r4
   1bb30:	bl	18388 <__assert_fail@plt+0x725c>
   1bb34:	b	1bae0 <__assert_fail@plt+0xa9b4>
   1bb38:	andeq	r9, r2, r4, ror #29
   1bb3c:	andeq	fp, r3, ip, lsl r1
   1bb40:	push	{r4, r5, r6, lr}
   1bb44:	mov	r6, r2
   1bb48:	ldr	r2, [r2, #4]
   1bb4c:	sub	sp, sp, #8
   1bb50:	mov	r4, r0
   1bb54:	lsr	r2, r2, #31
   1bb58:	mov	r3, r6
   1bb5c:	str	r2, [sp]
   1bb60:	mov	r0, #0
   1bb64:	mov	r2, r1
   1bb68:	mov	r5, r1
   1bb6c:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bb70:	mov	r2, r4
   1bb74:	mov	r1, r4
   1bb78:	mov	r0, r4
   1bb7c:	bl	1b774 <__assert_fail@plt+0xa648>
   1bb80:	mov	r1, r5
   1bb84:	mov	r0, r4
   1bb88:	mov	r2, #2
   1bb8c:	bl	1bab0 <__assert_fail@plt+0xa984>
   1bb90:	mov	r0, #2
   1bb94:	mov	r2, r4
   1bb98:	mov	r1, r4
   1bb9c:	str	r0, [sp]
   1bba0:	mov	r3, r6
   1bba4:	mov	r0, #0
   1bba8:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bbac:	mov	r2, r5
   1bbb0:	mov	r1, r5
   1bbb4:	mov	r0, r5
   1bbb8:	add	sp, sp, #8
   1bbbc:	pop	{r4, r5, r6, lr}
   1bbc0:	b	1b774 <__assert_fail@plt+0xa648>
   1bbc4:	push	{r4, lr}
   1bbc8:	sub	sp, sp, #16
   1bbcc:	ldr	ip, [pc, #80]	; 1bc24 <__assert_fail@plt+0xaaf8>
   1bbd0:	mov	r3, #0
   1bbd4:	mov	r4, r0
   1bbd8:	add	r0, sp, #4
   1bbdc:	str	ip, [sp, #12]
   1bbe0:	str	r3, [sp, #4]
   1bbe4:	str	r3, [sp, #8]
   1bbe8:	bl	1b774 <__assert_fail@plt+0xa648>
   1bbec:	mov	r1, r4
   1bbf0:	add	r2, sp, #4
   1bbf4:	mov	r0, r4
   1bbf8:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1bbfc:	ldr	r1, [sp, #4]
   1bc00:	cmp	r1, #0
   1bc04:	beq	1bc1c <__assert_fail@plt+0xaaf0>
   1bc08:	ldr	r3, [pc, #24]	; 1bc28 <__assert_fail@plt+0xaafc>
   1bc0c:	lsl	r1, r1, #2
   1bc10:	ldr	r0, [sp, #12]
   1bc14:	ldr	r3, [r3, #8]
   1bc18:	blx	r3
   1bc1c:	add	sp, sp, #16
   1bc20:	pop	{r4, pc}
   1bc24:	andeq	r9, r2, r4, ror #29
   1bc28:	andeq	fp, r3, ip, lsl r1
   1bc2c:	push	{r4, lr}
   1bc30:	sub	sp, sp, #16
   1bc34:	ldr	ip, [pc, #80]	; 1bc8c <__assert_fail@plt+0xab60>
   1bc38:	mov	r3, #0
   1bc3c:	mov	r4, r0
   1bc40:	add	r0, sp, #4
   1bc44:	str	ip, [sp, #12]
   1bc48:	str	r3, [sp, #4]
   1bc4c:	str	r3, [sp, #8]
   1bc50:	bl	1b774 <__assert_fail@plt+0xa648>
   1bc54:	mov	r1, r4
   1bc58:	add	r2, sp, #4
   1bc5c:	mov	r0, r4
   1bc60:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1bc64:	ldr	r1, [sp, #4]
   1bc68:	cmp	r1, #0
   1bc6c:	beq	1bc84 <__assert_fail@plt+0xab58>
   1bc70:	ldr	r3, [pc, #24]	; 1bc90 <__assert_fail@plt+0xab64>
   1bc74:	lsl	r1, r1, #2
   1bc78:	ldr	r0, [sp, #12]
   1bc7c:	ldr	r3, [r3, #8]
   1bc80:	blx	r3
   1bc84:	add	sp, sp, #16
   1bc88:	pop	{r4, pc}
   1bc8c:	andeq	r9, r2, r4, ror #29
   1bc90:	andeq	fp, r3, ip, lsl r1
   1bc94:	push	{lr}		; (str lr, [sp, #-4]!)
   1bc98:	sub	sp, sp, #12
   1bc9c:	mov	ip, #1
   1bca0:	str	ip, [sp]
   1bca4:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bca8:	add	sp, sp, #12
   1bcac:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcb0:	push	{lr}		; (str lr, [sp, #-4]!)
   1bcb4:	sub	sp, sp, #12
   1bcb8:	mov	ip, #0
   1bcbc:	str	ip, [sp]
   1bcc0:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bcc4:	add	sp, sp, #12
   1bcc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bccc:	push	{lr}		; (str lr, [sp, #-4]!)
   1bcd0:	sub	sp, sp, #12
   1bcd4:	mov	ip, #2
   1bcd8:	str	ip, [sp]
   1bcdc:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bce0:	add	sp, sp, #12
   1bce4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bce8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bcec:	sub	sp, sp, #12
   1bcf0:	mov	ip, #1
   1bcf4:	mov	r3, r2
   1bcf8:	str	ip, [sp]
   1bcfc:	mov	r2, r1
   1bd00:	mov	r1, #0
   1bd04:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bd08:	add	sp, sp, #12
   1bd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd10:	push	{lr}		; (str lr, [sp, #-4]!)
   1bd14:	sub	sp, sp, #12
   1bd18:	mov	ip, #0
   1bd1c:	mov	r3, r2
   1bd20:	str	ip, [sp]
   1bd24:	mov	r2, r1
   1bd28:	mov	r1, ip
   1bd2c:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bd30:	add	sp, sp, #12
   1bd34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd38:	push	{lr}		; (str lr, [sp, #-4]!)
   1bd3c:	sub	sp, sp, #12
   1bd40:	mov	ip, #2
   1bd44:	mov	r3, r2
   1bd48:	str	ip, [sp]
   1bd4c:	mov	r2, r1
   1bd50:	mov	r1, #0
   1bd54:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bd58:	add	sp, sp, #12
   1bd5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd60:	push	{lr}		; (str lr, [sp, #-4]!)
   1bd64:	sub	sp, sp, #12
   1bd68:	mov	ip, #1
   1bd6c:	mov	r3, r2
   1bd70:	str	ip, [sp]
   1bd74:	mov	r2, r1
   1bd78:	mov	r1, r0
   1bd7c:	mov	r0, #0
   1bd80:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bd84:	add	sp, sp, #12
   1bd88:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd8c:	push	{lr}		; (str lr, [sp, #-4]!)
   1bd90:	sub	sp, sp, #12
   1bd94:	mov	ip, #0
   1bd98:	mov	r3, r2
   1bd9c:	str	ip, [sp]
   1bda0:	mov	r2, r1
   1bda4:	mov	r1, r0
   1bda8:	mov	r0, ip
   1bdac:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bdb0:	add	sp, sp, #12
   1bdb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdb8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bdbc:	sub	sp, sp, #12
   1bdc0:	mov	ip, #2
   1bdc4:	mov	r3, r2
   1bdc8:	str	ip, [sp]
   1bdcc:	mov	r2, r1
   1bdd0:	mov	r1, r0
   1bdd4:	mov	r0, #0
   1bdd8:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bddc:	add	sp, sp, #12
   1bde0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bde4:	ldr	ip, [r2, #4]
   1bde8:	push	{lr}		; (str lr, [sp, #-4]!)
   1bdec:	sub	sp, sp, #12
   1bdf0:	lsr	ip, ip, #31
   1bdf4:	mov	r3, r2
   1bdf8:	str	ip, [sp]
   1bdfc:	mov	r2, r1
   1be00:	mov	r1, r0
   1be04:	mov	r0, #0
   1be08:	bl	1b168 <__assert_fail@plt+0xa03c>
   1be0c:	add	sp, sp, #12
   1be10:	pop	{pc}		; (ldr pc, [sp], #4)
   1be14:	push	{lr}		; (str lr, [sp, #-4]!)
   1be18:	sub	sp, sp, #12
   1be1c:	mov	ip, r1
   1be20:	mov	lr, #1
   1be24:	ldr	r1, [r1, #4]
   1be28:	mov	r3, r2
   1be2c:	str	lr, [sp]
   1be30:	add	r2, ip, #8
   1be34:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1be38:	add	sp, sp, #12
   1be3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be40:	push	{lr}		; (str lr, [sp, #-4]!)
   1be44:	sub	sp, sp, #12
   1be48:	mov	ip, r1
   1be4c:	mov	lr, #0
   1be50:	ldr	r1, [r1, #4]
   1be54:	mov	r3, r2
   1be58:	str	lr, [sp]
   1be5c:	add	r2, ip, #8
   1be60:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1be64:	add	sp, sp, #12
   1be68:	pop	{pc}		; (ldr pc, [sp], #4)
   1be6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1be70:	sub	sp, sp, #12
   1be74:	mov	ip, r1
   1be78:	mov	lr, #2
   1be7c:	ldr	r1, [r1, #4]
   1be80:	mov	r3, r2
   1be84:	str	lr, [sp]
   1be88:	add	r2, ip, #8
   1be8c:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1be90:	add	sp, sp, #12
   1be94:	pop	{pc}		; (ldr pc, [sp], #4)
   1be98:	mov	r3, #1
   1be9c:	b	19b64 <__assert_fail@plt+0x8a38>
   1bea0:	mov	r3, #0
   1bea4:	b	19b64 <__assert_fail@plt+0x8a38>
   1bea8:	mov	r3, #2
   1beac:	b	19b64 <__assert_fail@plt+0x8a38>
   1beb0:	push	{lr}		; (str lr, [sp, #-4]!)
   1beb4:	sub	sp, sp, #12
   1beb8:	mov	ip, #2
   1bebc:	mov	r3, r2
   1bec0:	str	ip, [sp]
   1bec4:	mov	r2, r1
   1bec8:	mov	r1, #0
   1becc:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bed0:	cmp	r0, #0
   1bed4:	bne	1bee0 <__assert_fail@plt+0xadb4>
   1bed8:	add	sp, sp, #12
   1bedc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bee0:	ldr	r3, [pc, #12]	; 1bef4 <__assert_fail@plt+0xadc8>
   1bee4:	ldr	r2, [pc, #12]	; 1bef8 <__assert_fail@plt+0xadcc>
   1bee8:	ldr	r1, [pc, #12]	; 1befc <__assert_fail@plt+0xadd0>
   1beec:	ldr	r0, [pc, #12]	; 1bf00 <__assert_fail@plt+0xadd4>
   1bef0:	bl	1112c <__assert_fail@plt>
   1bef4:	andeq	r9, r2, r8, lsl pc
   1bef8:	ldrdeq	r0, [r0], -r9
   1befc:	andeq	sl, r2, r4, rrx
   1bf00:	andeq	sl, r2, r0, asr #2
   1bf04:	push	{lr}		; (str lr, [sp, #-4]!)
   1bf08:	sub	sp, sp, #12
   1bf0c:	mov	r3, r1
   1bf10:	mov	ip, #2
   1bf14:	mov	r1, #0
   1bf18:	mov	r2, r0
   1bf1c:	str	ip, [sp]
   1bf20:	mov	r0, r1
   1bf24:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bf28:	clz	r0, r0
   1bf2c:	lsr	r0, r0, #5
   1bf30:	add	sp, sp, #12
   1bf34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf38:	ldr	ip, [r2, #4]
   1bf3c:	push	{r4, r5, lr}
   1bf40:	cmp	ip, #0
   1bf44:	movle	r3, #0
   1bf48:	movgt	r3, #1
   1bf4c:	cmp	r3, ip, lsr #31
   1bf50:	sub	sp, sp, #28
   1bf54:	beq	1bfdc <__assert_fail@plt+0xaeb0>
   1bf58:	ldr	r3, [pc, #148]	; 1bff4 <__assert_fail@plt+0xaec8>
   1bf5c:	mov	r5, #0
   1bf60:	mov	r4, r2
   1bf64:	mov	r2, r1
   1bf68:	mov	r1, r0
   1bf6c:	add	r0, sp, #12
   1bf70:	str	r3, [sp, #20]
   1bf74:	str	r5, [sp, #12]
   1bf78:	str	r5, [sp, #16]
   1bf7c:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1bf80:	mov	ip, #2
   1bf84:	mov	r3, r4
   1bf88:	mov	r1, r5
   1bf8c:	add	r2, sp, #12
   1bf90:	mov	r0, r5
   1bf94:	str	ip, [sp]
   1bf98:	bl	1b168 <__assert_fail@plt+0xa03c>
   1bf9c:	ldr	r1, [sp, #12]
   1bfa0:	cmp	r1, r5
   1bfa4:	clz	r4, r0
   1bfa8:	lsr	r4, r4, #5
   1bfac:	bne	1bfbc <__assert_fail@plt+0xae90>
   1bfb0:	mov	r0, r4
   1bfb4:	add	sp, sp, #28
   1bfb8:	pop	{r4, r5, pc}
   1bfbc:	ldr	r3, [pc, #52]	; 1bff8 <__assert_fail@plt+0xaecc>
   1bfc0:	ldr	r0, [sp, #20]
   1bfc4:	lsl	r1, r1, #2
   1bfc8:	ldr	r3, [r3, #8]
   1bfcc:	blx	r3
   1bfd0:	mov	r0, r4
   1bfd4:	add	sp, sp, #28
   1bfd8:	pop	{r4, r5, pc}
   1bfdc:	bl	1abcc <__assert_fail@plt+0x9aa0>
   1bfe0:	clz	r4, r0
   1bfe4:	lsr	r4, r4, #5
   1bfe8:	mov	r0, r4
   1bfec:	add	sp, sp, #28
   1bff0:	pop	{r4, r5, pc}
   1bff4:	andeq	r9, r2, r4, ror #29
   1bff8:	andeq	fp, r3, ip, lsl r1
   1bffc:	push	{lr}		; (str lr, [sp, #-4]!)
   1c000:	sub	sp, sp, #12
   1c004:	mov	ip, #1
   1c008:	str	ip, [sp]
   1c00c:	bl	1b660 <__assert_fail@plt+0xa534>
   1c010:	add	sp, sp, #12
   1c014:	pop	{pc}		; (ldr pc, [sp], #4)
   1c018:	push	{lr}		; (str lr, [sp, #-4]!)
   1c01c:	sub	sp, sp, #12
   1c020:	mov	ip, #0
   1c024:	str	ip, [sp]
   1c028:	bl	1b660 <__assert_fail@plt+0xa534>
   1c02c:	add	sp, sp, #12
   1c030:	pop	{pc}		; (ldr pc, [sp], #4)
   1c034:	push	{lr}		; (str lr, [sp, #-4]!)
   1c038:	sub	sp, sp, #12
   1c03c:	mov	ip, #2
   1c040:	str	ip, [sp]
   1c044:	bl	1b660 <__assert_fail@plt+0xa534>
   1c048:	add	sp, sp, #12
   1c04c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c050:	push	{lr}		; (str lr, [sp, #-4]!)
   1c054:	sub	sp, sp, #12
   1c058:	mov	ip, #1
   1c05c:	mov	r3, r2
   1c060:	str	ip, [sp]
   1c064:	mov	r2, r1
   1c068:	mov	r1, #0
   1c06c:	bl	1b660 <__assert_fail@plt+0xa534>
   1c070:	add	sp, sp, #12
   1c074:	pop	{pc}		; (ldr pc, [sp], #4)
   1c078:	push	{lr}		; (str lr, [sp, #-4]!)
   1c07c:	sub	sp, sp, #12
   1c080:	mov	ip, #0
   1c084:	mov	r3, r2
   1c088:	str	ip, [sp]
   1c08c:	mov	r2, r1
   1c090:	mov	r1, ip
   1c094:	bl	1b660 <__assert_fail@plt+0xa534>
   1c098:	add	sp, sp, #12
   1c09c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0a4:	sub	sp, sp, #12
   1c0a8:	mov	ip, #2
   1c0ac:	mov	r3, r2
   1c0b0:	str	ip, [sp]
   1c0b4:	mov	r2, r1
   1c0b8:	mov	r1, #0
   1c0bc:	bl	1b660 <__assert_fail@plt+0xa534>
   1c0c0:	add	sp, sp, #12
   1c0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0c8:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0cc:	sub	sp, sp, #12
   1c0d0:	mov	ip, #1
   1c0d4:	mov	r3, r2
   1c0d8:	str	ip, [sp]
   1c0dc:	mov	r2, r1
   1c0e0:	mov	r1, r0
   1c0e4:	mov	r0, #0
   1c0e8:	bl	1b660 <__assert_fail@plt+0xa534>
   1c0ec:	add	sp, sp, #12
   1c0f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c0f4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0f8:	sub	sp, sp, #12
   1c0fc:	mov	ip, #2
   1c100:	mov	r3, r2
   1c104:	str	ip, [sp]
   1c108:	mov	r2, r1
   1c10c:	mov	r1, r0
   1c110:	mov	r0, #0
   1c114:	bl	1b660 <__assert_fail@plt+0xa534>
   1c118:	add	sp, sp, #12
   1c11c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c120:	push	{lr}		; (str lr, [sp, #-4]!)
   1c124:	sub	sp, sp, #12
   1c128:	mov	r3, r1
   1c12c:	mov	ip, #1
   1c130:	mov	r1, #0
   1c134:	mov	r2, r0
   1c138:	str	ip, [sp]
   1c13c:	mov	r0, r1
   1c140:	bl	1b660 <__assert_fail@plt+0xa534>
   1c144:	add	sp, sp, #12
   1c148:	pop	{pc}		; (ldr pc, [sp], #4)
   1c14c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c150:	sub	sp, sp, #12
   1c154:	mov	ip, #0
   1c158:	mov	r3, r1
   1c15c:	mov	r2, r0
   1c160:	str	ip, [sp]
   1c164:	mov	r1, ip
   1c168:	mov	r0, ip
   1c16c:	bl	1b660 <__assert_fail@plt+0xa534>
   1c170:	add	sp, sp, #12
   1c174:	pop	{pc}		; (ldr pc, [sp], #4)
   1c178:	push	{lr}		; (str lr, [sp, #-4]!)
   1c17c:	sub	sp, sp, #12
   1c180:	mov	r3, r1
   1c184:	mov	ip, #2
   1c188:	mov	r1, #0
   1c18c:	mov	r2, r0
   1c190:	str	ip, [sp]
   1c194:	mov	r0, r1
   1c198:	bl	1b660 <__assert_fail@plt+0xa534>
   1c19c:	add	sp, sp, #12
   1c1a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c1a8:	sub	sp, sp, #12
   1c1ac:	mov	ip, #0
   1c1b0:	mov	r3, r2
   1c1b4:	str	ip, [sp]
   1c1b8:	mov	r2, r1
   1c1bc:	mov	r1, r0
   1c1c0:	mov	r0, ip
   1c1c4:	bl	1b660 <__assert_fail@plt+0xa534>
   1c1c8:	add	sp, sp, #12
   1c1cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1d0:	b	1c1a4 <__assert_fail@plt+0xb078>
   1c1d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c1d8:	sub	sp, sp, #12
   1c1dc:	mov	ip, #2
   1c1e0:	mov	r3, r2
   1c1e4:	str	ip, [sp]
   1c1e8:	mov	r2, r1
   1c1ec:	mov	r1, #0
   1c1f0:	bl	1b660 <__assert_fail@plt+0xa534>
   1c1f4:	cmp	r0, #0
   1c1f8:	bne	1c204 <__assert_fail@plt+0xb0d8>
   1c1fc:	add	sp, sp, #12
   1c200:	pop	{pc}		; (ldr pc, [sp], #4)
   1c204:	ldr	r3, [pc, #12]	; 1c218 <__assert_fail@plt+0xb0ec>
   1c208:	ldr	r2, [pc, #12]	; 1c21c <__assert_fail@plt+0xb0f0>
   1c20c:	ldr	r1, [pc, #12]	; 1c220 <__assert_fail@plt+0xb0f4>
   1c210:	ldr	r0, [pc, #12]	; 1c224 <__assert_fail@plt+0xb0f8>
   1c214:	bl	1112c <__assert_fail@plt>
   1c218:	andeq	r9, r2, r8, lsr #30
   1c21c:	andeq	r0, r0, r7, asr sl
   1c220:	andeq	sl, r2, r4, rrx
   1c224:	andeq	sl, r2, r0, asr #2
   1c228:	push	{lr}		; (str lr, [sp, #-4]!)
   1c22c:	sub	sp, sp, #12
   1c230:	mov	r3, r1
   1c234:	mov	ip, #2
   1c238:	mov	r1, #0
   1c23c:	mov	r2, r0
   1c240:	str	ip, [sp]
   1c244:	mov	r0, r1
   1c248:	bl	1b660 <__assert_fail@plt+0xa534>
   1c24c:	clz	r0, r0
   1c250:	lsr	r0, r0, #5
   1c254:	add	sp, sp, #12
   1c258:	pop	{pc}		; (ldr pc, [sp], #4)
   1c25c:	ldr	r3, [r1, #4]
   1c260:	push	{r4, r5, r6, lr}
   1c264:	cmp	r3, #0
   1c268:	sub	sp, sp, #32
   1c26c:	mov	r5, r2
   1c270:	mov	r4, r0
   1c274:	moveq	r1, r2
   1c278:	beq	1c288 <__assert_fail@plt+0xb15c>
   1c27c:	ldr	r3, [r2, #4]
   1c280:	cmp	r3, #0
   1c284:	bne	1c2a4 <__assert_fail@plt+0xb178>
   1c288:	bl	1a424 <__assert_fail@plt+0x92f8>
   1c28c:	ldr	r3, [r4, #4]
   1c290:	cmp	r3, #0
   1c294:	rsblt	r3, r3, #0
   1c298:	str	r3, [r4, #4]
   1c29c:	add	sp, sp, #32
   1c2a0:	pop	{r4, r5, r6, pc}
   1c2a4:	ldr	r2, [pc, #844]	; 1c5f8 <__assert_fail@plt+0xb4cc>
   1c2a8:	mov	r3, #0
   1c2ac:	add	r0, sp, #8
   1c2b0:	str	r2, [sp, #16]
   1c2b4:	str	r2, [sp, #28]
   1c2b8:	str	r3, [sp, #8]
   1c2bc:	str	r3, [sp, #12]
   1c2c0:	str	r3, [sp, #20]
   1c2c4:	str	r3, [sp, #24]
   1c2c8:	bl	1a424 <__assert_fail@plt+0x92f8>
   1c2cc:	ldr	r3, [sp, #12]
   1c2d0:	add	r0, sp, #8
   1c2d4:	cmp	r3, #0
   1c2d8:	rsblt	r3, r3, #0
   1c2dc:	str	r3, [sp, #12]
   1c2e0:	bl	1b08c <__assert_fail@plt+0x9f60>
   1c2e4:	mov	r1, r5
   1c2e8:	mov	r6, r0
   1c2ec:	add	r0, sp, #20
   1c2f0:	bl	1a424 <__assert_fail@plt+0x92f8>
   1c2f4:	ldr	r3, [sp, #24]
   1c2f8:	add	r0, sp, #20
   1c2fc:	cmp	r3, #0
   1c300:	rsblt	r3, r3, #0
   1c304:	str	r3, [sp, #24]
   1c308:	bl	1b08c <__assert_fail@plt+0x9f60>
   1c30c:	ldr	r3, [sp, #12]
   1c310:	ldr	r2, [sp, #24]
   1c314:	cmp	r6, r0
   1c318:	movcs	r6, r0
   1c31c:	cmp	r3, r2
   1c320:	bge	1c34c <__assert_fail@plt+0xb220>
   1c324:	ldr	r0, [sp, #8]
   1c328:	ldr	r1, [sp, #20]
   1c32c:	str	r2, [sp, #12]
   1c330:	str	r3, [sp, #24]
   1c334:	ldr	r2, [sp, #16]
   1c338:	ldr	r3, [sp, #28]
   1c33c:	str	r0, [sp, #20]
   1c340:	str	r1, [sp, #8]
   1c344:	str	r2, [sp, #28]
   1c348:	str	r3, [sp, #16]
   1c34c:	mov	r3, #2
   1c350:	add	r2, sp, #8
   1c354:	str	r3, [sp]
   1c358:	mov	r1, r2
   1c35c:	add	r3, sp, #20
   1c360:	mov	r0, #0
   1c364:	bl	1b168 <__assert_fail@plt+0xa03c>
   1c368:	ldr	r3, [sp, #12]
   1c36c:	cmp	r3, #0
   1c370:	bne	1c404 <__assert_fail@plt+0xb2d8>
   1c374:	ldr	r1, [sp, #20]
   1c378:	ldr	r0, [r4]
   1c37c:	str	r1, [r4]
   1c380:	ldr	r1, [sp, #8]
   1c384:	ldr	lr, [r4, #4]
   1c388:	ldr	ip, [sp, #24]
   1c38c:	ldr	r2, [r4, #8]
   1c390:	ldr	r3, [sp, #28]
   1c394:	str	lr, [sp, #24]
   1c398:	str	ip, [r4, #4]
   1c39c:	str	r0, [sp, #20]
   1c3a0:	str	r2, [sp, #28]
   1c3a4:	str	r3, [r4, #8]
   1c3a8:	cmp	r1, #0
   1c3ac:	bne	1c45c <__assert_fail@plt+0xb330>
   1c3b0:	ldr	r1, [sp, #20]
   1c3b4:	cmp	r1, #0
   1c3b8:	beq	1c3d0 <__assert_fail@plt+0xb2a4>
   1c3bc:	ldr	r3, [pc, #568]	; 1c5fc <__assert_fail@plt+0xb4d0>
   1c3c0:	lsl	r1, r1, #2
   1c3c4:	ldr	r0, [sp, #28]
   1c3c8:	ldr	r3, [r3, #8]
   1c3cc:	blx	r3
   1c3d0:	mov	r2, r6
   1c3d4:	mov	r1, r4
   1c3d8:	mov	r0, r4
   1c3dc:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1c3e0:	add	sp, sp, #32
   1c3e4:	pop	{r4, r5, r6, pc}
   1c3e8:	ldr	r5, [sp, #24]
   1c3ec:	cmp	r5, #1
   1c3f0:	beq	1c4a8 <__assert_fail@plt+0xb37c>
   1c3f4:	add	r1, sp, #8
   1c3f8:	add	r2, sp, #20
   1c3fc:	mov	r0, r1
   1c400:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1c404:	add	r0, sp, #8
   1c408:	bl	1b08c <__assert_fail@plt+0x9f60>
   1c40c:	add	r1, sp, #20
   1c410:	add	r0, sp, #8
   1c414:	bl	1abcc <__assert_fail@plt+0x9aa0>
   1c418:	cmp	r0, #0
   1c41c:	beq	1c474 <__assert_fail@plt+0xb348>
   1c420:	bge	1c3e8 <__assert_fail@plt+0xb2bc>
   1c424:	ldr	r3, [sp, #12]
   1c428:	ldr	r2, [sp, #24]
   1c42c:	ldr	r0, [sp, #8]
   1c430:	ldr	r1, [sp, #20]
   1c434:	mov	r5, r3
   1c438:	str	r3, [sp, #24]
   1c43c:	str	r2, [sp, #12]
   1c440:	ldr	r3, [sp, #28]
   1c444:	ldr	r2, [sp, #16]
   1c448:	str	r0, [sp, #20]
   1c44c:	str	r1, [sp, #8]
   1c450:	str	r2, [sp, #28]
   1c454:	str	r3, [sp, #16]
   1c458:	b	1c3ec <__assert_fail@plt+0xb2c0>
   1c45c:	ldr	r3, [pc, #408]	; 1c5fc <__assert_fail@plt+0xb4d0>
   1c460:	lsl	r1, r1, #2
   1c464:	ldr	r0, [sp, #16]
   1c468:	ldr	r3, [r3, #8]
   1c46c:	blx	r3
   1c470:	b	1c3b0 <__assert_fail@plt+0xb284>
   1c474:	ldr	lr, [r4, #4]
   1c478:	ldr	ip, [sp, #12]
   1c47c:	ldr	r1, [r4]
   1c480:	ldr	r0, [sp, #8]
   1c484:	ldr	r2, [r4, #8]
   1c488:	ldr	r3, [sp, #16]
   1c48c:	str	lr, [sp, #12]
   1c490:	str	ip, [r4, #4]
   1c494:	str	r1, [sp, #8]
   1c498:	str	r0, [r4]
   1c49c:	str	r2, [sp, #16]
   1c4a0:	str	r3, [r4, #8]
   1c4a4:	b	1c3a8 <__assert_fail@plt+0xb27c>
   1c4a8:	mov	r2, #2
   1c4ac:	str	r2, [sp]
   1c4b0:	add	r2, sp, #8
   1c4b4:	add	r3, sp, #20
   1c4b8:	mov	r1, r2
   1c4bc:	mov	r0, #0
   1c4c0:	bl	1b168 <__assert_fail@plt+0xa03c>
   1c4c4:	ldr	r3, [r4]
   1c4c8:	cmp	r3, #0
   1c4cc:	ldrgt	r0, [r4, #8]
   1c4d0:	ble	1c5bc <__assert_fail@plt+0xb490>
   1c4d4:	ldr	r3, [sp, #16]
   1c4d8:	ldr	r2, [sp, #28]
   1c4dc:	ldr	r3, [r3]
   1c4e0:	ldr	r2, [r2]
   1c4e4:	orrs	ip, r3, r2
   1c4e8:	beq	1c5e4 <__assert_fail@plt+0xb4b8>
   1c4ec:	cmp	r3, #0
   1c4f0:	beq	1c590 <__assert_fail@plt+0xb464>
   1c4f4:	cmp	r2, #0
   1c4f8:	moveq	r2, r3
   1c4fc:	beq	1c590 <__assert_fail@plt+0xb464>
   1c500:	rsb	r1, ip, #0
   1c504:	and	r1, r1, ip
   1c508:	ands	ip, r1, #-16777216	; 0xff000000
   1c50c:	bne	1c5cc <__assert_fail@plt+0xb4a0>
   1c510:	lsl	r1, r1, #8
   1c514:	tst	r1, #-16777216	; 0xff000000
   1c518:	add	ip, ip, #8
   1c51c:	beq	1c510 <__assert_fail@plt+0xb3e4>
   1c520:	cmp	r1, #0
   1c524:	blt	1c534 <__assert_fail@plt+0xb408>
   1c528:	lsls	r1, r1, #1
   1c52c:	add	ip, ip, #1
   1c530:	bpl	1c528 <__assert_fail@plt+0xb3fc>
   1c534:	rsb	ip, ip, #31
   1c538:	lsr	r3, r3, ip
   1c53c:	tst	r3, #1
   1c540:	lsr	r2, r2, ip
   1c544:	beq	1c55c <__assert_fail@plt+0xb430>
   1c548:	tst	r2, #1
   1c54c:	bne	1c5d4 <__assert_fail@plt+0xb4a8>
   1c550:	mov	r1, r2
   1c554:	mov	r2, r3
   1c558:	mov	r3, r1
   1c55c:	lsr	r3, r3, #1
   1c560:	tst	r3, #1
   1c564:	beq	1c55c <__assert_fail@plt+0xb430>
   1c568:	cmp	r2, r3
   1c56c:	beq	1c58c <__assert_fail@plt+0xb460>
   1c570:	cmp	r3, r2
   1c574:	bcs	1c5a8 <__assert_fail@plt+0xb47c>
   1c578:	sub	r2, r2, r3
   1c57c:	lsr	r2, r2, #1
   1c580:	tst	r2, #1
   1c584:	beq	1c57c <__assert_fail@plt+0xb450>
   1c588:	b	1c568 <__assert_fail@plt+0xb43c>
   1c58c:	lsl	r2, r2, ip
   1c590:	adds	r3, r2, #0
   1c594:	movne	r3, #1
   1c598:	str	r2, [r0]
   1c59c:	ldr	r1, [sp, #8]
   1c5a0:	str	r3, [r4, #4]
   1c5a4:	b	1c3a8 <__assert_fail@plt+0xb27c>
   1c5a8:	sub	r3, r3, r2
   1c5ac:	lsr	r3, r3, #1
   1c5b0:	tst	r3, #1
   1c5b4:	beq	1c5ac <__assert_fail@plt+0xb480>
   1c5b8:	b	1c568 <__assert_fail@plt+0xb43c>
   1c5bc:	mov	r1, r5
   1c5c0:	mov	r0, r4
   1c5c4:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1c5c8:	b	1c4d4 <__assert_fail@plt+0xb3a8>
   1c5cc:	mov	ip, #0
   1c5d0:	b	1c520 <__assert_fail@plt+0xb3f4>
   1c5d4:	mov	r1, r3
   1c5d8:	mov	r3, r2
   1c5dc:	mov	r2, r1
   1c5e0:	b	1c568 <__assert_fail@plt+0xb43c>
   1c5e4:	ldr	r3, [pc, #20]	; 1c600 <__assert_fail@plt+0xb4d4>
   1c5e8:	ldr	r2, [pc, #20]	; 1c604 <__assert_fail@plt+0xb4d8>
   1c5ec:	ldr	r1, [pc, #20]	; 1c608 <__assert_fail@plt+0xb4dc>
   1c5f0:	ldr	r0, [pc, #20]	; 1c60c <__assert_fail@plt+0xb4e0>
   1c5f4:	bl	1112c <__assert_fail@plt>
   1c5f8:	andeq	r9, r2, r4, ror #29
   1c5fc:	andeq	fp, r3, ip, lsl r1
   1c600:	andeq	r9, r2, r8, lsr pc
   1c604:	andeq	r0, r0, r7, ror #20
   1c608:	andeq	sl, r2, r4, rrx
   1c60c:	andeq	sl, r2, r0, lsr #6
   1c610:	push	{r4, r5, r6, lr}
   1c614:	sub	sp, sp, #16
   1c618:	ldr	ip, [pc, #188]	; 1c6dc <__assert_fail@plt+0xb5b0>
   1c61c:	mov	r3, #0
   1c620:	subs	r5, r2, #0
   1c624:	mov	r4, r0
   1c628:	str	ip, [sp, #12]
   1c62c:	str	r3, [sp, #4]
   1c630:	str	r3, [sp, #8]
   1c634:	bne	1c6a8 <__assert_fail@plt+0xb57c>
   1c638:	add	r2, sp, #4
   1c63c:	mov	r0, r2
   1c640:	bl	1c25c <__assert_fail@plt+0xb130>
   1c644:	cmp	r4, #0
   1c648:	ldreq	r1, [sp, #4]
   1c64c:	beq	1c680 <__assert_fail@plt+0xb554>
   1c650:	ldr	lr, [sp, #8]
   1c654:	ldr	ip, [r4, #4]
   1c658:	ldr	r0, [sp, #4]
   1c65c:	ldr	r1, [r4]
   1c660:	ldr	r2, [sp, #12]
   1c664:	ldr	r3, [r4, #8]
   1c668:	str	lr, [r4, #4]
   1c66c:	str	ip, [sp, #8]
   1c670:	str	r0, [r4]
   1c674:	str	r1, [sp, #4]
   1c678:	str	r2, [r4, #8]
   1c67c:	str	r3, [sp, #12]
   1c680:	cmp	r1, #0
   1c684:	beq	1c69c <__assert_fail@plt+0xb570>
   1c688:	ldr	r3, [pc, #80]	; 1c6e0 <__assert_fail@plt+0xb5b4>
   1c68c:	lsl	r1, r1, #2
   1c690:	ldr	r0, [sp, #12]
   1c694:	ldr	r3, [r3, #8]
   1c698:	blx	r3
   1c69c:	mov	r0, r5
   1c6a0:	add	sp, sp, #16
   1c6a4:	pop	{r4, r5, r6, pc}
   1c6a8:	mov	r6, r1
   1c6ac:	add	r0, sp, #4
   1c6b0:	mov	r1, r5
   1c6b4:	bl	18388 <__assert_fail@plt+0x725c>
   1c6b8:	add	r2, sp, #4
   1c6bc:	mov	r1, r6
   1c6c0:	mov	r0, r2
   1c6c4:	bl	1c25c <__assert_fail@plt+0xb130>
   1c6c8:	ldr	r5, [sp, #8]
   1c6cc:	cmp	r5, #0
   1c6d0:	ldrne	r3, [sp, #12]
   1c6d4:	ldrne	r5, [r3]
   1c6d8:	b	1c644 <__assert_fail@plt+0xb518>
   1c6dc:	andeq	r9, r2, r4, ror #29
   1c6e0:	andeq	fp, r3, ip, lsl r1
   1c6e4:	push	{r4, r5, r6, lr}
   1c6e8:	sub	sp, sp, #16
   1c6ec:	ldr	lr, [r1, #4]
   1c6f0:	cmp	lr, #0
   1c6f4:	beq	1c708 <__assert_fail@plt+0xb5dc>
   1c6f8:	ldr	lr, [r2, #4]
   1c6fc:	mov	r5, r2
   1c700:	cmp	lr, #0
   1c704:	bne	1c718 <__assert_fail@plt+0xb5ec>
   1c708:	mov	r3, #0
   1c70c:	str	r3, [r0, #4]
   1c710:	add	sp, sp, #16
   1c714:	pop	{r4, r5, r6, pc}
   1c718:	ldr	ip, [pc, #132]	; 1c7a4 <__assert_fail@plt+0xb678>
   1c71c:	mov	r3, #0
   1c720:	mov	r6, r0
   1c724:	add	r0, sp, #4
   1c728:	str	ip, [sp, #12]
   1c72c:	str	r3, [sp, #4]
   1c730:	str	r3, [sp, #8]
   1c734:	mov	r4, r1
   1c738:	bl	1c25c <__assert_fail@plt+0xb130>
   1c73c:	add	r2, sp, #4
   1c740:	mov	r0, r2
   1c744:	mov	r1, r4
   1c748:	bl	1beb0 <__assert_fail@plt+0xad84>
   1c74c:	add	r1, sp, #4
   1c750:	mov	r2, r5
   1c754:	mov	r0, r6
   1c758:	bl	1b774 <__assert_fail@plt+0xa648>
   1c75c:	ldr	r1, [sp, #4]
   1c760:	cmp	r1, #0
   1c764:	bne	1c78c <__assert_fail@plt+0xb660>
   1c768:	mov	r1, r6
   1c76c:	mov	r0, r6
   1c770:	bl	1a424 <__assert_fail@plt+0x92f8>
   1c774:	ldr	r3, [r6, #4]
   1c778:	cmp	r3, #0
   1c77c:	rsblt	r3, r3, #0
   1c780:	str	r3, [r6, #4]
   1c784:	add	sp, sp, #16
   1c788:	pop	{r4, r5, r6, pc}
   1c78c:	ldr	r3, [pc, #20]	; 1c7a8 <__assert_fail@plt+0xb67c>
   1c790:	lsl	r1, r1, #2
   1c794:	ldr	r0, [sp, #12]
   1c798:	ldr	r3, [r3, #8]
   1c79c:	blx	r3
   1c7a0:	b	1c768 <__assert_fail@plt+0xb63c>
   1c7a4:	andeq	r9, r2, r4, ror #29
   1c7a8:	andeq	fp, r3, ip, lsl r1
   1c7ac:	subs	ip, r2, #0
   1c7b0:	beq	1c820 <__assert_fail@plt+0xb6f4>
   1c7b4:	push	{r4, r5, r6, lr}
   1c7b8:	mov	r5, r1
   1c7bc:	ldr	lr, [r1, #4]
   1c7c0:	cmp	lr, #0
   1c7c4:	bne	1c7d4 <__assert_fail@plt+0xb6a8>
   1c7c8:	mov	r3, #0
   1c7cc:	str	r3, [r0, #4]
   1c7d0:	pop	{r4, r5, r6, pc}
   1c7d4:	mov	r4, r0
   1c7d8:	mov	r0, #0
   1c7dc:	mov	r6, ip
   1c7e0:	bl	1c610 <__assert_fail@plt+0xb4e4>
   1c7e4:	mov	r1, r0
   1c7e8:	mov	r0, r6
   1c7ec:	bl	26120 <__assert_fail@plt+0x14ff4>
   1c7f0:	mov	r1, r5
   1c7f4:	mov	r2, r0
   1c7f8:	mov	r0, r4
   1c7fc:	bl	1b870 <__assert_fail@plt+0xa744>
   1c800:	mov	r1, r4
   1c804:	mov	r0, r4
   1c808:	bl	1a424 <__assert_fail@plt+0x92f8>
   1c80c:	ldr	r3, [r4, #4]
   1c810:	cmp	r3, #0
   1c814:	rsblt	r3, r3, #0
   1c818:	str	r3, [r4, #4]
   1c81c:	pop	{r4, r5, r6, pc}
   1c820:	mov	r3, #0
   1c824:	str	r3, [r0, #4]
   1c828:	bx	lr
   1c82c:	push	{r4, r5, r6, r7, r8, lr}
   1c830:	sub	sp, sp, #16
   1c834:	ldr	ip, [pc, #192]	; 1c8fc <__assert_fail@plt+0xb7d0>
   1c838:	mov	r3, #0
   1c83c:	mov	r8, r0
   1c840:	mov	r7, r1
   1c844:	add	r0, sp, #4
   1c848:	mov	r1, #1
   1c84c:	mov	r6, r2
   1c850:	str	ip, [sp, #12]
   1c854:	str	r3, [sp, #4]
   1c858:	str	r3, [sp, #8]
   1c85c:	mov	r5, #32
   1c860:	bl	18388 <__assert_fail@plt+0x725c>
   1c864:	mov	r4, #-2147483648	; 0x80000000
   1c868:	b	1c878 <__assert_fail@plt+0xb74c>
   1c86c:	subs	r5, r5, #1
   1c870:	lsr	r4, r4, #1
   1c874:	beq	1c8ac <__assert_fail@plt+0xb780>
   1c878:	add	r2, sp, #4
   1c87c:	mov	r1, r2
   1c880:	mov	r0, r2
   1c884:	bl	1b774 <__assert_fail@plt+0xa648>
   1c888:	tst	r4, r6
   1c88c:	beq	1c86c <__assert_fail@plt+0xb740>
   1c890:	add	r1, sp, #4
   1c894:	mov	r2, r7
   1c898:	mov	r0, r1
   1c89c:	bl	1b774 <__assert_fail@plt+0xa648>
   1c8a0:	subs	r5, r5, #1
   1c8a4:	lsr	r4, r4, #1
   1c8a8:	bne	1c878 <__assert_fail@plt+0xb74c>
   1c8ac:	ldr	r1, [r8]
   1c8b0:	ldr	lr, [sp, #4]
   1c8b4:	ldr	ip, [r8, #4]
   1c8b8:	ldr	r2, [sp, #8]
   1c8bc:	ldr	r0, [r8, #8]
   1c8c0:	ldr	r3, [sp, #12]
   1c8c4:	cmp	r1, #0
   1c8c8:	str	r1, [sp, #4]
   1c8cc:	str	lr, [r8]
   1c8d0:	str	ip, [sp, #8]
   1c8d4:	str	r2, [r8, #4]
   1c8d8:	str	r0, [sp, #12]
   1c8dc:	str	r3, [r8, #8]
   1c8e0:	beq	1c8f4 <__assert_fail@plt+0xb7c8>
   1c8e4:	ldr	r3, [pc, #20]	; 1c900 <__assert_fail@plt+0xb7d4>
   1c8e8:	lsl	r1, r1, #2
   1c8ec:	ldr	r3, [r3, #8]
   1c8f0:	blx	r3
   1c8f4:	add	sp, sp, #16
   1c8f8:	pop	{r4, r5, r6, r7, r8, pc}
   1c8fc:	andeq	r9, r2, r4, ror #29
   1c900:	andeq	fp, r3, ip, lsl r1
   1c904:	push	{r4, r5, lr}
   1c908:	sub	sp, sp, #28
   1c90c:	ldr	ip, [pc, #104]	; 1c97c <__assert_fail@plt+0xb850>
   1c910:	mov	r3, #0
   1c914:	cmp	r1, #0
   1c918:	mov	r5, r0
   1c91c:	str	ip, [sp, #20]
   1c920:	str	r3, [sp, #12]
   1c924:	str	r3, [sp, #16]
   1c928:	addeq	r4, sp, #12
   1c92c:	bne	1c964 <__assert_fail@plt+0xb838>
   1c930:	mov	r1, r4
   1c934:	mov	r0, r5
   1c938:	bl	1c82c <__assert_fail@plt+0xb700>
   1c93c:	ldr	r1, [sp, #12]
   1c940:	cmp	r1, #0
   1c944:	beq	1c95c <__assert_fail@plt+0xb830>
   1c948:	ldr	r3, [pc, #48]	; 1c980 <__assert_fail@plt+0xb854>
   1c94c:	lsl	r1, r1, #2
   1c950:	ldr	r0, [sp, #20]
   1c954:	ldr	r3, [r3, #8]
   1c958:	blx	r3
   1c95c:	add	sp, sp, #28
   1c960:	pop	{r4, r5, pc}
   1c964:	add	r4, sp, #12
   1c968:	mov	r0, r4
   1c96c:	str	r2, [sp, #4]
   1c970:	bl	18388 <__assert_fail@plt+0x725c>
   1c974:	ldr	r2, [sp, #4]
   1c978:	b	1c930 <__assert_fail@plt+0xb804>
   1c97c:	andeq	r9, r2, r4, ror #29
   1c980:	andeq	fp, r3, ip, lsl r1
   1c984:	push	{r4, r5, r6, r7, r8, lr}
   1c988:	mov	r4, r1
   1c98c:	cmp	r1, #0
   1c990:	addeq	r1, r1, #1
   1c994:	cmp	r1, #0
   1c998:	mov	r7, r2
   1c99c:	mov	r5, r0
   1c9a0:	streq	r1, [r0, #4]
   1c9a4:	bne	1c9dc <__assert_fail@plt+0xb8b0>
   1c9a8:	add	r6, r7, #1
   1c9ac:	cmp	r6, #1
   1c9b0:	popls	{r4, r5, r6, r7, r8, pc}
   1c9b4:	cmp	r4, r6
   1c9b8:	popls	{r4, r5, r6, r7, r8, pc}
   1c9bc:	sub	r4, r4, r7
   1c9c0:	mov	r2, r4
   1c9c4:	mov	r1, r5
   1c9c8:	mov	r0, r5
   1c9cc:	bl	1b870 <__assert_fail@plt+0xa744>
   1c9d0:	cmp	r6, r4
   1c9d4:	bcc	1c9bc <__assert_fail@plt+0xb890>
   1c9d8:	pop	{r4, r5, r6, r7, r8, pc}
   1c9dc:	bl	18388 <__assert_fail@plt+0x725c>
   1c9e0:	b	1c9a8 <__assert_fail@plt+0xb87c>
   1c9e4:	mov	r2, #2
   1c9e8:	b	1c984 <__assert_fail@plt+0xb858>
   1c9ec:	mov	r2, #1
   1c9f0:	b	1c984 <__assert_fail@plt+0xb858>
   1c9f4:	cmp	r2, r1
   1c9f8:	push	{r4, r5, r6, r7, lr}
   1c9fc:	mov	r4, r1
   1ca00:	sub	sp, sp, #20
   1ca04:	mov	r6, r2
   1ca08:	mov	r5, r0
   1ca0c:	bls	1cad4 <__assert_fail@plt+0xb9a8>
   1ca10:	mov	r3, #0
   1ca14:	cmp	r2, r1, lsr #1
   1ca18:	str	r3, [r0, #4]
   1ca1c:	bhi	1caac <__assert_fail@plt+0xb980>
   1ca20:	ldr	r1, [pc, #192]	; 1cae8 <__assert_fail@plt+0xb9bc>
   1ca24:	add	r7, sp, #4
   1ca28:	mov	r3, #0
   1ca2c:	str	r1, [sp, #12]
   1ca30:	mov	r0, r7
   1ca34:	mov	r2, #1
   1ca38:	mov	r1, r6
   1ca3c:	str	r3, [sp, #4]
   1ca40:	str	r3, [sp, #8]
   1ca44:	bl	1c984 <__assert_fail@plt+0xb858>
   1ca48:	cmp	r6, #0
   1ca4c:	beq	1ca74 <__assert_fail@plt+0xb948>
   1ca50:	sub	r6, r4, r6
   1ca54:	sub	r3, r4, #1
   1ca58:	mov	r2, r4
   1ca5c:	mov	r1, r5
   1ca60:	mov	r4, r3
   1ca64:	mov	r0, r5
   1ca68:	bl	1b870 <__assert_fail@plt+0xa744>
   1ca6c:	cmp	r4, r6
   1ca70:	bne	1ca54 <__assert_fail@plt+0xb928>
   1ca74:	mov	r1, r5
   1ca78:	mov	r2, r7
   1ca7c:	mov	r0, r5
   1ca80:	bl	1beb0 <__assert_fail@plt+0xad84>
   1ca84:	ldr	r1, [sp, #4]
   1ca88:	cmp	r1, #0
   1ca8c:	beq	1caa4 <__assert_fail@plt+0xb978>
   1ca90:	ldr	r3, [pc, #84]	; 1caec <__assert_fail@plt+0xb9c0>
   1ca94:	lsl	r1, r1, #2
   1ca98:	ldr	r0, [sp, #12]
   1ca9c:	ldr	r3, [r3, #8]
   1caa0:	blx	r3
   1caa4:	add	sp, sp, #20
   1caa8:	pop	{r4, r5, r6, r7, pc}
   1caac:	ldr	ip, [pc, #52]	; 1cae8 <__assert_fail@plt+0xb9bc>
   1cab0:	add	r7, sp, #4
   1cab4:	mov	r1, r3
   1cab8:	mov	r0, r7
   1cabc:	mov	r2, #1
   1cac0:	str	r3, [sp, #4]
   1cac4:	str	r3, [sp, #8]
   1cac8:	str	ip, [sp, #12]
   1cacc:	bl	1c984 <__assert_fail@plt+0xb858>
   1cad0:	b	1ca74 <__assert_fail@plt+0xb948>
   1cad4:	mov	r1, #1
   1cad8:	bl	18388 <__assert_fail@plt+0x725c>
   1cadc:	cmp	r6, r4, lsr #1
   1cae0:	subhi	r6, r4, r6
   1cae4:	b	1ca20 <__assert_fail@plt+0xb8f4>
   1cae8:	andeq	r9, r2, r4, ror #29
   1caec:	andeq	fp, r3, ip, lsl r1
   1caf0:	ldr	ip, [r0, #4]
   1caf4:	push	{r4, lr}
   1caf8:	lsr	lr, r1, #5
   1cafc:	eor	r3, ip, ip, asr #31
   1cb00:	sub	r3, r3, ip, asr #31
   1cb04:	cmp	r3, lr
   1cb08:	ble	1cb68 <__assert_fail@plt+0xba3c>
   1cb0c:	ldr	r2, [r0, #8]
   1cb10:	and	r1, r1, #31
   1cb14:	cmp	ip, #0
   1cb18:	ldr	r4, [r2, lr, lsl #2]
   1cb1c:	add	r2, r2, lr, lsl #2
   1cb20:	lsr	ip, r4, r1
   1cb24:	and	r0, ip, #1
   1cb28:	popge	{r4, pc}
   1cb2c:	cmp	r1, #0
   1cb30:	mov	r3, lr
   1cb34:	beq	1cb5c <__assert_fail@plt+0xba30>
   1cb38:	rsb	r1, r1, #32
   1cb3c:	lsls	r1, r4, r1
   1cb40:	beq	1cb5c <__assert_fail@plt+0xba30>
   1cb44:	mvn	ip, ip
   1cb48:	and	r0, ip, #1
   1cb4c:	pop	{r4, pc}
   1cb50:	ldr	r1, [r2, #-4]!
   1cb54:	cmp	r1, #0
   1cb58:	bne	1cb44 <__assert_fail@plt+0xba18>
   1cb5c:	subs	r3, r3, #1
   1cb60:	bcs	1cb50 <__assert_fail@plt+0xba24>
   1cb64:	pop	{r4, pc}
   1cb68:	lsr	r0, ip, #31
   1cb6c:	pop	{r4, pc}
   1cb70:	push	{r4, r5, r6, lr}
   1cb74:	mov	r4, r0
   1cb78:	mov	r5, r1
   1cb7c:	bl	1caf0 <__assert_fail@plt+0xb9c4>
   1cb80:	cmp	r0, #0
   1cb84:	popne	{r4, r5, r6, pc}
   1cb88:	ldr	r3, [r4, #4]
   1cb8c:	cmp	r3, #0
   1cb90:	blt	1cba4 <__assert_fail@plt+0xba78>
   1cb94:	mov	r1, r5
   1cb98:	mov	r0, r4
   1cb9c:	pop	{r4, r5, r6, lr}
   1cba0:	b	1819c <__assert_fail@plt+0x7070>
   1cba4:	mov	r2, r5
   1cba8:	ldr	r1, [r4, #8]
   1cbac:	add	r0, r4, #4
   1cbb0:	pop	{r4, r5, r6, lr}
   1cbb4:	b	182a8 <__assert_fail@plt+0x717c>
   1cbb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbbc:	sub	sp, sp, #92	; 0x5c
   1cbc0:	ldr	r4, [r3, #4]
   1cbc4:	str	r3, [sp, #12]
   1cbc8:	cmp	r4, #0
   1cbcc:	mov	sl, r1
   1cbd0:	mov	r9, r2
   1cbd4:	mov	fp, r0
   1cbd8:	beq	1d148 <__assert_fail@plt+0xc01c>
   1cbdc:	ldr	r3, [sp, #128]	; 0x80
   1cbe0:	ldr	r3, [r3, #4]
   1cbe4:	cmp	r3, #0
   1cbe8:	bne	1cc38 <__assert_fail@plt+0xbb0c>
   1cbec:	ldr	r1, [sp, #12]
   1cbf0:	bl	1a424 <__assert_fail@plt+0x92f8>
   1cbf4:	ldr	r3, [fp, #4]
   1cbf8:	cmp	r3, #0
   1cbfc:	rsblt	r3, r3, #0
   1cc00:	cmp	sl, #0
   1cc04:	str	r3, [fp, #4]
   1cc08:	beq	1cc24 <__assert_fail@plt+0xbaf8>
   1cc0c:	lsr	r1, r4, #31
   1cc10:	mov	r0, sl
   1cc14:	cmp	r4, #0
   1cc18:	rsble	r1, r1, #0
   1cc1c:	rsbgt	r1, r1, #1
   1cc20:	bl	1a3c0 <__assert_fail@plt+0x9294>
   1cc24:	cmp	r9, #0
   1cc28:	movne	r3, #0
   1cc2c:	strne	r3, [r9, #4]
   1cc30:	add	sp, sp, #92	; 0x5c
   1cc34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc38:	ldr	r6, [sp, #12]
   1cc3c:	ldr	r2, [pc, #1640]	; 1d2ac <__assert_fail@plt+0xc180>
   1cc40:	mov	r3, #0
   1cc44:	mov	r1, r6
   1cc48:	add	r0, sp, #16
   1cc4c:	str	r2, [sp, #24]
   1cc50:	str	r2, [sp, #36]	; 0x24
   1cc54:	str	r2, [sp, #48]	; 0x30
   1cc58:	str	r2, [sp, #60]	; 0x3c
   1cc5c:	str	r2, [sp, #72]	; 0x48
   1cc60:	str	r2, [sp, #84]	; 0x54
   1cc64:	str	r3, [sp, #16]
   1cc68:	str	r3, [sp, #20]
   1cc6c:	str	r3, [sp, #28]
   1cc70:	str	r3, [sp, #32]
   1cc74:	str	r3, [sp, #40]	; 0x28
   1cc78:	str	r3, [sp, #44]	; 0x2c
   1cc7c:	str	r3, [sp, #52]	; 0x34
   1cc80:	str	r3, [sp, #56]	; 0x38
   1cc84:	str	r3, [sp, #64]	; 0x40
   1cc88:	str	r3, [sp, #68]	; 0x44
   1cc8c:	str	r3, [sp, #76]	; 0x4c
   1cc90:	str	r3, [sp, #80]	; 0x50
   1cc94:	bl	1a424 <__assert_fail@plt+0x92f8>
   1cc98:	ldr	r3, [sp, #20]
   1cc9c:	add	r0, sp, #16
   1cca0:	cmp	r3, #0
   1cca4:	rsblt	r3, r3, #0
   1cca8:	str	r3, [sp, #20]
   1ccac:	bl	1b08c <__assert_fail@plt+0x9f60>
   1ccb0:	ldr	r1, [sp, #128]	; 0x80
   1ccb4:	mov	r4, r0
   1ccb8:	add	r0, sp, #28
   1ccbc:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ccc0:	ldr	r3, [sp, #32]
   1ccc4:	add	r0, sp, #28
   1ccc8:	cmp	r3, #0
   1cccc:	rsblt	r3, r3, #0
   1ccd0:	str	r3, [sp, #32]
   1ccd4:	bl	1b08c <__assert_fail@plt+0x9f60>
   1ccd8:	ldr	r3, [sp, #20]
   1ccdc:	ldr	r2, [sp, #32]
   1cce0:	cmp	r4, r0
   1cce4:	movcc	r5, r4
   1cce8:	movcs	r5, r0
   1ccec:	cmp	r3, r2
   1ccf0:	sub	r4, r4, r5
   1ccf4:	sub	r7, r0, r5
   1ccf8:	blt	1d194 <__assert_fail@plt+0xc068>
   1ccfc:	add	r2, sp, #16
   1cd00:	mov	r3, #2
   1cd04:	mov	r1, r2
   1cd08:	str	r3, [sp]
   1cd0c:	add	r0, sp, #76	; 0x4c
   1cd10:	add	r3, sp, #28
   1cd14:	bl	1b168 <__assert_fail@plt+0xa03c>
   1cd18:	add	r1, sp, #76	; 0x4c
   1cd1c:	mov	r0, r1
   1cd20:	mov	r2, r4
   1cd24:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1cd28:	mov	r1, r7
   1cd2c:	add	r0, sp, #52	; 0x34
   1cd30:	bl	1cb70 <__assert_fail@plt+0xba44>
   1cd34:	ldr	r3, [sp, #20]
   1cd38:	add	r7, r4, r7
   1cd3c:	cmp	r3, #0
   1cd40:	ble	1ce44 <__assert_fail@plt+0xbd18>
   1cd44:	add	r0, sp, #16
   1cd48:	bl	1b08c <__assert_fail@plt+0x9f60>
   1cd4c:	add	r6, sp, #64	; 0x40
   1cd50:	add	r1, r4, r0
   1cd54:	mov	r8, r0
   1cd58:	mov	r0, r6
   1cd5c:	bl	1cb70 <__assert_fail@plt+0xba44>
   1cd60:	add	r7, r7, r8
   1cd64:	add	r4, sp, #40	; 0x28
   1cd68:	b	1cdcc <__assert_fail@plt+0xbca0>
   1cd6c:	add	r1, sp, #16
   1cd70:	mov	r0, r1
   1cd74:	add	r2, sp, #28
   1cd78:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1cd7c:	add	r2, sp, #76	; 0x4c
   1cd80:	mov	r0, r2
   1cd84:	mov	r1, r6
   1cd88:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1cd8c:	add	r2, sp, #52	; 0x34
   1cd90:	mov	r0, r2
   1cd94:	mov	r1, r4
   1cd98:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1cd9c:	add	r0, sp, #16
   1cda0:	bl	1b08c <__assert_fail@plt+0x9f60>
   1cda4:	mov	r1, r6
   1cda8:	mov	r2, r0
   1cdac:	mov	r8, r0
   1cdb0:	mov	r0, r6
   1cdb4:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1cdb8:	mov	r2, r8
   1cdbc:	mov	r1, r4
   1cdc0:	mov	r0, r4
   1cdc4:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1cdc8:	add	r7, r7, r8
   1cdcc:	add	r1, sp, #28
   1cdd0:	add	r0, sp, #16
   1cdd4:	bl	1abcc <__assert_fail@plt+0x9aa0>
   1cdd8:	cmp	r0, #0
   1cddc:	beq	1ce58 <__assert_fail@plt+0xbd2c>
   1cde0:	bge	1cd6c <__assert_fail@plt+0xbc40>
   1cde4:	add	r1, sp, #28
   1cde8:	add	r2, sp, #16
   1cdec:	mov	r0, r1
   1cdf0:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1cdf4:	add	r2, sp, #76	; 0x4c
   1cdf8:	mov	r1, r6
   1cdfc:	mov	r0, r6
   1ce00:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1ce04:	add	r2, sp, #52	; 0x34
   1ce08:	mov	r1, r4
   1ce0c:	mov	r0, r4
   1ce10:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1ce14:	add	r0, sp, #28
   1ce18:	bl	1b08c <__assert_fail@plt+0x9f60>
   1ce1c:	add	r1, sp, #76	; 0x4c
   1ce20:	mov	r8, r0
   1ce24:	mov	r2, r0
   1ce28:	mov	r0, r1
   1ce2c:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1ce30:	add	r1, sp, #52	; 0x34
   1ce34:	mov	r2, r8
   1ce38:	mov	r0, r1
   1ce3c:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1ce40:	b	1cdc8 <__assert_fail@plt+0xbc9c>
   1ce44:	add	r6, sp, #64	; 0x40
   1ce48:	mov	r1, r4
   1ce4c:	mov	r0, r6
   1ce50:	bl	1cb70 <__assert_fail@plt+0xba44>
   1ce54:	add	r4, sp, #40	; 0x28
   1ce58:	add	r1, sp, #28
   1ce5c:	mov	r2, r5
   1ce60:	mov	r0, r1
   1ce64:	bl	1b928 <__assert_fail@plt+0xa7fc>
   1ce68:	mov	r1, r4
   1ce6c:	mov	r0, r4
   1ce70:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ce74:	ldr	r3, [sp, #44]	; 0x2c
   1ce78:	add	r2, sp, #28
   1ce7c:	rsb	r3, r3, #0
   1ce80:	ldr	r1, [sp, #128]	; 0x80
   1ce84:	add	r0, sp, #52	; 0x34
   1ce88:	str	r3, [sp, #44]	; 0x2c
   1ce8c:	bl	1beb0 <__assert_fail@plt+0xad84>
   1ce90:	add	r1, sp, #52	; 0x34
   1ce94:	mov	r0, r1
   1ce98:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ce9c:	ldr	r3, [sp, #56]	; 0x38
   1cea0:	add	r2, sp, #28
   1cea4:	cmp	r3, #0
   1cea8:	rsblt	r3, r3, #0
   1ceac:	ldr	r1, [sp, #12]
   1ceb0:	add	r0, sp, #76	; 0x4c
   1ceb4:	str	r3, [sp, #56]	; 0x38
   1ceb8:	bl	1beb0 <__assert_fail@plt+0xad84>
   1cebc:	add	r1, sp, #76	; 0x4c
   1cec0:	mov	r0, r1
   1cec4:	bl	1a424 <__assert_fail@plt+0x92f8>
   1cec8:	ldr	r3, [sp, #80]	; 0x50
   1cecc:	sub	r5, r7, #1
   1ced0:	cmp	r3, #0
   1ced4:	rsblt	r3, r3, #0
   1ced8:	cmp	r7, #0
   1cedc:	str	r3, [sp, #80]	; 0x50
   1cee0:	movne	r8, #2
   1cee4:	movne	r7, #1
   1cee8:	beq	1cfc4 <__assert_fail@plt+0xbe98>
   1ceec:	ldr	r3, [sp, #48]	; 0x30
   1cef0:	ldr	r1, [sp, #44]	; 0x2c
   1cef4:	ldr	r3, [r3]
   1cef8:	cmp	r1, #0
   1cefc:	moveq	r3, #0
   1cf00:	andne	r3, r3, #1
   1cf04:	cmp	r3, #0
   1cf08:	bne	1cf2c <__assert_fail@plt+0xbe00>
   1cf0c:	ldr	r3, [sp, #72]	; 0x48
   1cf10:	ldr	r2, [sp, #68]	; 0x44
   1cf14:	ldr	r3, [r3]
   1cf18:	cmp	r2, #0
   1cf1c:	moveq	r3, #0
   1cf20:	andne	r3, r3, #1
   1cf24:	cmp	r3, #0
   1cf28:	beq	1cf8c <__assert_fail@plt+0xbe60>
   1cf2c:	add	r2, sp, #52	; 0x34
   1cf30:	mov	r1, r4
   1cf34:	mov	r0, r4
   1cf38:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1cf3c:	add	r2, sp, #76	; 0x4c
   1cf40:	mov	r1, r6
   1cf44:	mov	r0, r6
   1cf48:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1cf4c:	ldr	r3, [sp, #72]	; 0x48
   1cf50:	ldr	r2, [sp, #68]	; 0x44
   1cf54:	ldr	r3, [r3]
   1cf58:	cmp	r2, #0
   1cf5c:	moveq	r3, #0
   1cf60:	andne	r3, r3, #1
   1cf64:	cmp	r3, #0
   1cf68:	bne	1d298 <__assert_fail@plt+0xc16c>
   1cf6c:	ldr	r3, [sp, #48]	; 0x30
   1cf70:	ldr	r1, [sp, #44]	; 0x2c
   1cf74:	ldr	r3, [r3]
   1cf78:	cmp	r1, #0
   1cf7c:	moveq	r3, #0
   1cf80:	andne	r3, r3, #1
   1cf84:	cmp	r3, #0
   1cf88:	bne	1d298 <__assert_fail@plt+0xc16c>
   1cf8c:	mov	r3, r7
   1cf90:	add	r2, sp, #48	; 0x30
   1cf94:	mov	r0, r4
   1cf98:	str	r8, [sp]
   1cf9c:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1cfa0:	sub	r5, r5, #1
   1cfa4:	ldr	r1, [sp, #68]	; 0x44
   1cfa8:	str	r8, [sp]
   1cfac:	mov	r3, r7
   1cfb0:	add	r2, sp, #72	; 0x48
   1cfb4:	mov	r0, r6
   1cfb8:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1cfbc:	cmn	r5, #1
   1cfc0:	bne	1ceec <__assert_fail@plt+0xbdc0>
   1cfc4:	add	r2, sp, #52	; 0x34
   1cfc8:	mov	r0, r2
   1cfcc:	mov	r1, r4
   1cfd0:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1cfd4:	add	r1, sp, #52	; 0x34
   1cfd8:	mov	r0, r4
   1cfdc:	bl	1acc0 <__assert_fail@plt+0x9b94>
   1cfe0:	cmp	r0, #0
   1cfe4:	ble	1d028 <__assert_fail@plt+0xbefc>
   1cfe8:	ldr	r1, [sp, #44]	; 0x2c
   1cfec:	ldr	r0, [sp, #56]	; 0x38
   1cff0:	ldr	r3, [sp, #40]	; 0x28
   1cff4:	str	r1, [sp, #56]	; 0x38
   1cff8:	str	r0, [sp, #44]	; 0x2c
   1cffc:	ldr	r1, [sp, #52]	; 0x34
   1d000:	ldr	r0, [sp, #48]	; 0x30
   1d004:	str	r3, [sp, #52]	; 0x34
   1d008:	ldr	r3, [sp, #60]	; 0x3c
   1d00c:	str	r1, [sp, #40]	; 0x28
   1d010:	str	r0, [sp, #60]	; 0x3c
   1d014:	add	r2, sp, #76	; 0x4c
   1d018:	mov	r1, r6
   1d01c:	mov	r0, r6
   1d020:	str	r3, [sp, #48]	; 0x30
   1d024:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1d028:	ldr	r3, [sp, #12]
   1d02c:	ldr	r3, [r3, #4]
   1d030:	cmp	r3, #0
   1d034:	blt	1d27c <__assert_fail@plt+0xc150>
   1d038:	ldr	r3, [sp, #128]	; 0x80
   1d03c:	ldr	r3, [r3, #4]
   1d040:	cmp	r3, #0
   1d044:	blt	1d260 <__assert_fail@plt+0xc134>
   1d048:	ldr	r3, [fp, #4]
   1d04c:	ldr	ip, [sp, #32]
   1d050:	ldr	r1, [fp]
   1d054:	ldr	r0, [sp, #28]
   1d058:	ldr	r2, [fp, #8]
   1d05c:	str	r3, [sp, #32]
   1d060:	ldr	r3, [sp, #36]	; 0x24
   1d064:	cmp	sl, #0
   1d068:	str	ip, [fp, #4]
   1d06c:	str	r1, [sp, #28]
   1d070:	str	r0, [fp]
   1d074:	str	r2, [sp, #36]	; 0x24
   1d078:	str	r3, [fp, #8]
   1d07c:	beq	1d0b0 <__assert_fail@plt+0xbf84>
   1d080:	ldr	r3, [sl, #4]
   1d084:	ldr	lr, [sp, #44]	; 0x2c
   1d088:	ldr	ip, [sl]
   1d08c:	ldr	r0, [sp, #40]	; 0x28
   1d090:	ldr	r2, [sl, #8]
   1d094:	str	r3, [sp, #44]	; 0x2c
   1d098:	ldr	r3, [sp, #48]	; 0x30
   1d09c:	str	lr, [sl, #4]
   1d0a0:	str	ip, [sp, #40]	; 0x28
   1d0a4:	str	r0, [sl]
   1d0a8:	str	r2, [sp, #48]	; 0x30
   1d0ac:	str	r3, [sl, #8]
   1d0b0:	cmp	r9, #0
   1d0b4:	beq	1d0e8 <__assert_fail@plt+0xbfbc>
   1d0b8:	ldr	r4, [r9, #4]
   1d0bc:	ldr	lr, [sp, #68]	; 0x44
   1d0c0:	ldr	ip, [r9]
   1d0c4:	ldr	r0, [sp, #64]	; 0x40
   1d0c8:	ldr	r2, [r9, #8]
   1d0cc:	ldr	r3, [sp, #72]	; 0x48
   1d0d0:	str	r4, [sp, #68]	; 0x44
   1d0d4:	str	lr, [r9, #4]
   1d0d8:	str	ip, [sp, #64]	; 0x40
   1d0dc:	str	r0, [r9]
   1d0e0:	str	r2, [sp, #72]	; 0x48
   1d0e4:	str	r3, [r9, #8]
   1d0e8:	ldr	r3, [sp, #16]
   1d0ec:	cmp	r3, #0
   1d0f0:	bne	1d244 <__assert_fail@plt+0xc118>
   1d0f4:	cmp	r1, #0
   1d0f8:	bne	1d22c <__assert_fail@plt+0xc100>
   1d0fc:	ldr	r1, [sp, #40]	; 0x28
   1d100:	cmp	r1, #0
   1d104:	bne	1d214 <__assert_fail@plt+0xc0e8>
   1d108:	ldr	r1, [sp, #52]	; 0x34
   1d10c:	cmp	r1, #0
   1d110:	bne	1d1fc <__assert_fail@plt+0xc0d0>
   1d114:	ldr	r1, [sp, #64]	; 0x40
   1d118:	cmp	r1, #0
   1d11c:	bne	1d1e4 <__assert_fail@plt+0xc0b8>
   1d120:	ldr	r1, [sp, #76]	; 0x4c
   1d124:	cmp	r1, #0
   1d128:	beq	1cc30 <__assert_fail@plt+0xbb04>
   1d12c:	ldr	r3, [pc, #380]	; 1d2b0 <__assert_fail@plt+0xc184>
   1d130:	lsl	r1, r1, #2
   1d134:	ldr	r0, [sp, #84]	; 0x54
   1d138:	ldr	r3, [r3, #8]
   1d13c:	blx	r3
   1d140:	add	sp, sp, #92	; 0x5c
   1d144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d148:	ldr	r1, [sp, #128]	; 0x80
   1d14c:	ldr	r5, [r1, #4]
   1d150:	bl	1a424 <__assert_fail@plt+0x92f8>
   1d154:	ldr	r3, [fp, #4]
   1d158:	cmp	r3, #0
   1d15c:	rsblt	r3, r3, #0
   1d160:	cmp	sl, #0
   1d164:	str	r3, [fp, #4]
   1d168:	strne	r4, [sl, #4]
   1d16c:	cmp	r9, #0
   1d170:	beq	1cc30 <__assert_fail@plt+0xbb04>
   1d174:	lsr	r1, r5, #31
   1d178:	mov	r0, r9
   1d17c:	cmp	r5, #0
   1d180:	rsble	r1, r1, #0
   1d184:	rsbgt	r1, r1, #1
   1d188:	bl	1a3c0 <__assert_fail@plt+0x9294>
   1d18c:	add	sp, sp, #92	; 0x5c
   1d190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d194:	mov	r1, sl
   1d198:	ldr	lr, [sp, #128]	; 0x80
   1d19c:	ldr	r0, [sp, #16]
   1d1a0:	mov	sl, r9
   1d1a4:	str	r2, [sp, #20]
   1d1a8:	mov	r9, r1
   1d1ac:	ldr	r2, [sp, #24]
   1d1b0:	ldr	r1, [sp, #28]
   1d1b4:	str	r3, [sp, #32]
   1d1b8:	ldr	r3, [sp, #36]	; 0x24
   1d1bc:	mov	ip, r4
   1d1c0:	str	lr, [sp, #12]
   1d1c4:	mov	r4, r7
   1d1c8:	str	r6, [sp, #128]	; 0x80
   1d1cc:	mov	r7, ip
   1d1d0:	str	r0, [sp, #28]
   1d1d4:	str	r1, [sp, #16]
   1d1d8:	str	r2, [sp, #36]	; 0x24
   1d1dc:	str	r3, [sp, #24]
   1d1e0:	b	1ccfc <__assert_fail@plt+0xbbd0>
   1d1e4:	ldr	r3, [pc, #196]	; 1d2b0 <__assert_fail@plt+0xc184>
   1d1e8:	lsl	r1, r1, #2
   1d1ec:	ldr	r0, [sp, #72]	; 0x48
   1d1f0:	ldr	r3, [r3, #8]
   1d1f4:	blx	r3
   1d1f8:	b	1d120 <__assert_fail@plt+0xbff4>
   1d1fc:	ldr	r3, [pc, #172]	; 1d2b0 <__assert_fail@plt+0xc184>
   1d200:	lsl	r1, r1, #2
   1d204:	ldr	r0, [sp, #60]	; 0x3c
   1d208:	ldr	r3, [r3, #8]
   1d20c:	blx	r3
   1d210:	b	1d114 <__assert_fail@plt+0xbfe8>
   1d214:	ldr	r3, [pc, #148]	; 1d2b0 <__assert_fail@plt+0xc184>
   1d218:	lsl	r1, r1, #2
   1d21c:	ldr	r0, [sp, #48]	; 0x30
   1d220:	ldr	r3, [r3, #8]
   1d224:	blx	r3
   1d228:	b	1d108 <__assert_fail@plt+0xbfdc>
   1d22c:	ldr	r3, [pc, #124]	; 1d2b0 <__assert_fail@plt+0xc184>
   1d230:	lsl	r1, r1, #2
   1d234:	ldr	r0, [sp, #36]	; 0x24
   1d238:	ldr	r3, [r3, #8]
   1d23c:	blx	r3
   1d240:	b	1d0fc <__assert_fail@plt+0xbfd0>
   1d244:	ldr	r2, [pc, #100]	; 1d2b0 <__assert_fail@plt+0xc184>
   1d248:	lsl	r1, r3, #2
   1d24c:	ldr	r0, [sp, #24]
   1d250:	ldr	r3, [r2, #8]
   1d254:	blx	r3
   1d258:	ldr	r1, [sp, #28]
   1d25c:	b	1d0f4 <__assert_fail@plt+0xbfc8>
   1d260:	mov	r1, r6
   1d264:	mov	r0, r6
   1d268:	bl	1a424 <__assert_fail@plt+0x92f8>
   1d26c:	ldr	r3, [sp, #68]	; 0x44
   1d270:	rsb	r3, r3, #0
   1d274:	str	r3, [sp, #68]	; 0x44
   1d278:	b	1d048 <__assert_fail@plt+0xbf1c>
   1d27c:	mov	r1, r4
   1d280:	mov	r0, r4
   1d284:	bl	1a424 <__assert_fail@plt+0x92f8>
   1d288:	ldr	r3, [sp, #44]	; 0x2c
   1d28c:	rsb	r3, r3, #0
   1d290:	str	r3, [sp, #44]	; 0x2c
   1d294:	b	1d038 <__assert_fail@plt+0xbf0c>
   1d298:	ldr	r3, [pc, #20]	; 1d2b4 <__assert_fail@plt+0xc188>
   1d29c:	ldr	r2, [pc, #20]	; 1d2b8 <__assert_fail@plt+0xc18c>
   1d2a0:	ldr	r1, [pc, #20]	; 1d2bc <__assert_fail@plt+0xc190>
   1d2a4:	ldr	r0, [pc, #20]	; 1d2c0 <__assert_fail@plt+0xc194>
   1d2a8:	bl	1112c <__assert_fail@plt>
   1d2ac:	andeq	r9, r2, r4, ror #29
   1d2b0:	andeq	fp, r3, ip, lsl r1
   1d2b4:	andeq	r9, r2, r4, asr #30
   1d2b8:	andeq	r0, r0, r6, lsl #23
   1d2bc:	andeq	sl, r2, r4, rrx
   1d2c0:	andeq	sl, r2, ip, lsr #6
   1d2c4:	push	{r4, r5, r6, lr}
   1d2c8:	sub	sp, sp, #32
   1d2cc:	ldr	r4, [r1, #4]
   1d2d0:	cmp	r4, #0
   1d2d4:	beq	1d350 <__assert_fail@plt+0xc224>
   1d2d8:	ldr	r4, [r2, #4]
   1d2dc:	eor	r3, r4, r4, asr #31
   1d2e0:	sub	r3, r3, r4, asr #31
   1d2e4:	cmp	r3, #1
   1d2e8:	ble	1d35c <__assert_fail@plt+0xc230>
   1d2ec:	mov	r4, #0
   1d2f0:	ldr	ip, [pc, #388]	; 1d47c <__assert_fail@plt+0xc350>
   1d2f4:	mov	r3, r1
   1d2f8:	str	r2, [sp]
   1d2fc:	mov	r5, r2
   1d300:	mov	r6, r0
   1d304:	mov	r2, r4
   1d308:	add	r1, sp, #20
   1d30c:	add	r0, sp, #8
   1d310:	str	r4, [sp, #8]
   1d314:	str	r4, [sp, #12]
   1d318:	str	r4, [sp, #20]
   1d31c:	str	r4, [sp, #24]
   1d320:	str	ip, [sp, #16]
   1d324:	str	ip, [sp, #28]
   1d328:	bl	1cbb8 <__assert_fail@plt+0xba8c>
   1d32c:	ldr	r3, [sp, #12]
   1d330:	cmp	r3, #1
   1d334:	bls	1d3b8 <__assert_fail@plt+0xc28c>
   1d338:	ldr	r1, [sp, #8]
   1d33c:	cmp	r1, #0
   1d340:	bne	1d434 <__assert_fail@plt+0xc308>
   1d344:	ldr	r1, [sp, #20]
   1d348:	cmp	r1, #0
   1d34c:	bne	1d398 <__assert_fail@plt+0xc26c>
   1d350:	mov	r0, r4
   1d354:	add	sp, sp, #32
   1d358:	pop	{r4, r5, r6, pc}
   1d35c:	cmp	r4, #0
   1d360:	beq	1d350 <__assert_fail@plt+0xc224>
   1d364:	ldr	r3, [r2, #8]
   1d368:	ldr	ip, [r3]
   1d36c:	clz	r3, ip
   1d370:	lsr	r3, r3, #5
   1d374:	cmp	ip, #1
   1d378:	rsbls	r3, r3, #0
   1d37c:	rsbhi	r3, r3, #1
   1d380:	cmp	r3, #1
   1d384:	movne	r4, #0
   1d388:	beq	1d2ec <__assert_fail@plt+0xc1c0>
   1d38c:	mov	r0, r4
   1d390:	add	sp, sp, #32
   1d394:	pop	{r4, r5, r6, pc}
   1d398:	ldr	r3, [pc, #224]	; 1d480 <__assert_fail@plt+0xc354>
   1d39c:	ldr	r0, [sp, #28]
   1d3a0:	lsl	r1, r1, #2
   1d3a4:	ldr	r3, [r3, #8]
   1d3a8:	blx	r3
   1d3ac:	mov	r0, r4
   1d3b0:	add	sp, sp, #32
   1d3b4:	pop	{r4, r5, r6, pc}
   1d3b8:	cmp	r3, #0
   1d3bc:	moveq	r4, r3
   1d3c0:	beq	1d338 <__assert_fail@plt+0xc20c>
   1d3c4:	ldr	r3, [sp, #16]
   1d3c8:	ldr	r3, [r3]
   1d3cc:	clz	r2, r3
   1d3d0:	cmp	r3, #1
   1d3d4:	movls	r3, #0
   1d3d8:	movhi	r3, #1
   1d3dc:	lsr	r2, r2, #5
   1d3e0:	cmp	r3, r2
   1d3e4:	moveq	r4, #1
   1d3e8:	movne	r4, #0
   1d3ec:	bne	1d338 <__assert_fail@plt+0xc20c>
   1d3f0:	ldr	r3, [sp, #24]
   1d3f4:	cmp	r3, #0
   1d3f8:	blt	1d44c <__assert_fail@plt+0xc320>
   1d3fc:	ldr	r1, [r6, #8]
   1d400:	ldm	r6, {ip, lr}
   1d404:	ldr	r2, [sp, #28]
   1d408:	str	r1, [sp, #28]
   1d40c:	ldr	r1, [sp, #8]
   1d410:	ldr	r0, [sp, #20]
   1d414:	cmp	r1, #0
   1d418:	mov	r4, #1
   1d41c:	str	lr, [sp, #24]
   1d420:	str	r3, [r6, #4]
   1d424:	str	ip, [sp, #20]
   1d428:	str	r0, [r6]
   1d42c:	str	r2, [r6, #8]
   1d430:	beq	1d344 <__assert_fail@plt+0xc218>
   1d434:	ldr	r3, [pc, #68]	; 1d480 <__assert_fail@plt+0xc354>
   1d438:	lsl	r1, r1, #2
   1d43c:	ldr	r0, [sp, #16]
   1d440:	ldr	r3, [r3, #8]
   1d444:	blx	r3
   1d448:	b	1d344 <__assert_fail@plt+0xc218>
   1d44c:	ldr	r3, [r5, #4]
   1d450:	add	r1, sp, #20
   1d454:	cmp	r3, #0
   1d458:	mov	r2, r5
   1d45c:	mov	r0, r1
   1d460:	blt	1d470 <__assert_fail@plt+0xc344>
   1d464:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1d468:	ldr	r3, [sp, #24]
   1d46c:	b	1d3fc <__assert_fail@plt+0xc2d0>
   1d470:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1d474:	ldr	r3, [sp, #24]
   1d478:	b	1d3fc <__assert_fail@plt+0xc2d0>
   1d47c:	andeq	r9, r2, r4, ror #29
   1d480:	andeq	fp, r3, ip, lsl r1
   1d484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d488:	sub	sp, sp, #84	; 0x54
   1d48c:	ldr	r6, [r3, #4]
   1d490:	mov	r8, r3
   1d494:	cmp	r6, #0
   1d498:	str	r2, [sp, #20]
   1d49c:	ldr	r4, [r2, #4]
   1d4a0:	str	r0, [sp, #32]
   1d4a4:	beq	1d8b8 <__assert_fail@plt+0xc78c>
   1d4a8:	cmp	r4, #0
   1d4ac:	beq	1d7b0 <__assert_fail@plt+0xc684>
   1d4b0:	ldr	sl, [r3, #8]
   1d4b4:	cmp	r6, #0
   1d4b8:	rsblt	r6, r6, #0
   1d4bc:	add	fp, sp, #64	; 0x40
   1d4c0:	mov	r5, r1
   1d4c4:	mov	r2, r6
   1d4c8:	mov	r1, sl
   1d4cc:	mov	r0, fp
   1d4d0:	bl	1a034 <__assert_fail@plt+0x8f08>
   1d4d4:	ldr	r3, [sp, #64]	; 0x40
   1d4d8:	cmp	r3, #0
   1d4dc:	str	r3, [sp, #28]
   1d4e0:	bne	1d764 <__assert_fail@plt+0xc638>
   1d4e4:	ldr	r3, [sp, #28]
   1d4e8:	str	r3, [sp, #24]
   1d4ec:	ldr	r3, [sp, #20]
   1d4f0:	ldr	r7, [pc, #976]	; 1d8c8 <__assert_fail@plt+0xc79c>
   1d4f4:	ldr	r3, [r3, #4]
   1d4f8:	str	r7, [sp, #60]	; 0x3c
   1d4fc:	cmp	r3, #0
   1d500:	mov	r3, #0
   1d504:	str	r3, [sp, #52]	; 0x34
   1d508:	str	r3, [sp, #56]	; 0x38
   1d50c:	blt	1d814 <__assert_fail@plt+0xc6e8>
   1d510:	add	r9, sp, #52	; 0x34
   1d514:	mov	r0, r9
   1d518:	mov	r1, r5
   1d51c:	str	r3, [sp, #8]
   1d520:	bl	1a424 <__assert_fail@plt+0x92f8>
   1d524:	ldr	r0, [sp, #56]	; 0x38
   1d528:	ldr	r3, [sp, #8]
   1d52c:	eor	r2, r0, r0, asr #31
   1d530:	sub	r2, r2, r0, asr #31
   1d534:	cmp	r6, r2
   1d538:	str	r2, [sp, #56]	; 0x38
   1d53c:	ble	1d838 <__assert_fail@plt+0xc70c>
   1d540:	ldr	r3, [r5, #4]
   1d544:	cmp	r3, #0
   1d548:	movlt	r5, r2
   1d54c:	blt	1d868 <__assert_fail@plt+0xc73c>
   1d550:	cmp	r0, #0
   1d554:	ldr	r1, [sp, #60]	; 0x3c
   1d558:	beq	1d8c0 <__assert_fail@plt+0xc794>
   1d55c:	mov	r3, r2
   1d560:	sub	r2, r3, #-1073741823	; 0xc0000001
   1d564:	ldr	r0, [r1, r2, lsl #2]
   1d568:	add	r2, r1, r2, lsl #2
   1d56c:	cmp	r0, #0
   1d570:	beq	1d584 <__assert_fail@plt+0xc458>
   1d574:	b	1d58c <__assert_fail@plt+0xc460>
   1d578:	ldr	r1, [r2, #-4]!
   1d57c:	cmp	r1, #0
   1d580:	bne	1d58c <__assert_fail@plt+0xc460>
   1d584:	subs	r3, r3, #1
   1d588:	bne	1d578 <__assert_fail@plt+0xc44c>
   1d58c:	str	r3, [sp, #56]	; 0x38
   1d590:	cmp	r4, #0
   1d594:	rsblt	r4, r4, #0
   1d598:	sub	r3, r4, #1
   1d59c:	mov	r2, r3
   1d5a0:	str	r3, [sp, #12]
   1d5a4:	sub	r3, r6, #-1073741823	; 0xc0000001
   1d5a8:	mov	r4, r3
   1d5ac:	str	r3, [sp, #36]	; 0x24
   1d5b0:	lsl	r2, r2, #2
   1d5b4:	mov	r3, #0
   1d5b8:	add	r0, sp, #40	; 0x28
   1d5bc:	mov	r1, #1
   1d5c0:	str	r3, [sp, #40]	; 0x28
   1d5c4:	str	r3, [sp, #44]	; 0x2c
   1d5c8:	str	r3, [sp, #8]
   1d5cc:	str	r7, [sp, #48]	; 0x30
   1d5d0:	str	r2, [sp, #16]
   1d5d4:	bl	18388 <__assert_fail@plt+0x725c>
   1d5d8:	ldr	r3, [sp, #12]
   1d5dc:	lsl	r8, r4, #2
   1d5e0:	cmn	r3, #1
   1d5e4:	beq	1d6c8 <__assert_fail@plt+0xc59c>
   1d5e8:	ldr	r3, [sp, #20]
   1d5ec:	ldr	r2, [sp, #16]
   1d5f0:	mov	r5, #32
   1d5f4:	ldr	r3, [r3, #8]
   1d5f8:	mov	r4, #-2147483648	; 0x80000000
   1d5fc:	ldr	r7, [r3, r2]
   1d600:	b	1d61c <__assert_fail@plt+0xc4f0>
   1d604:	ldr	r2, [sp, #44]	; 0x2c
   1d608:	cmp	r6, r2
   1d60c:	blt	1d650 <__assert_fail@plt+0xc524>
   1d610:	subs	r5, r5, #1
   1d614:	lsr	r4, r4, #1
   1d618:	beq	1d6a4 <__assert_fail@plt+0xc578>
   1d61c:	add	r2, sp, #40	; 0x28
   1d620:	mov	r1, r2
   1d624:	mov	r0, r2
   1d628:	bl	1b774 <__assert_fail@plt+0xa648>
   1d62c:	tst	r4, r7
   1d630:	beq	1d604 <__assert_fail@plt+0xc4d8>
   1d634:	add	r1, sp, #40	; 0x28
   1d638:	mov	r2, r9
   1d63c:	mov	r0, r1
   1d640:	bl	1b774 <__assert_fail@plt+0xa648>
   1d644:	ldr	r2, [sp, #44]	; 0x2c
   1d648:	cmp	r6, r2
   1d64c:	bge	1d610 <__assert_fail@plt+0xc4e4>
   1d650:	mov	r3, sl
   1d654:	ldr	r1, [sp, #48]	; 0x30
   1d658:	stm	sp, {r6, fp}
   1d65c:	ldr	r0, [sp, #8]
   1d660:	bl	1937c <__assert_fail@plt+0x8250>
   1d664:	ldr	r3, [sp, #48]	; 0x30
   1d668:	add	r2, r3, r8
   1d66c:	ldr	r3, [r3, r8]
   1d670:	cmp	r3, #0
   1d674:	mov	r3, r6
   1d678:	beq	1d68c <__assert_fail@plt+0xc560>
   1d67c:	b	1d694 <__assert_fail@plt+0xc568>
   1d680:	ldr	r1, [r2, #-4]!
   1d684:	cmp	r1, #0
   1d688:	bne	1d694 <__assert_fail@plt+0xc568>
   1d68c:	subs	r3, r3, #1
   1d690:	bne	1d680 <__assert_fail@plt+0xc554>
   1d694:	subs	r5, r5, #1
   1d698:	str	r3, [sp, #44]	; 0x2c
   1d69c:	lsr	r4, r4, #1
   1d6a0:	bne	1d61c <__assert_fail@plt+0xc4f0>
   1d6a4:	ldr	r3, [sp, #16]
   1d6a8:	sub	r3, r3, #4
   1d6ac:	str	r3, [sp, #16]
   1d6b0:	ldr	r3, [sp, #12]
   1d6b4:	sub	r3, r3, #1
   1d6b8:	str	r3, [sp, #12]
   1d6bc:	ldr	r3, [sp, #12]
   1d6c0:	cmn	r3, #1
   1d6c4:	bne	1d5e8 <__assert_fail@plt+0xc4bc>
   1d6c8:	ldr	r2, [sp, #44]	; 0x2c
   1d6cc:	cmp	r6, r2
   1d6d0:	ble	1d7c0 <__assert_fail@plt+0xc694>
   1d6d4:	ldr	r0, [sp, #24]
   1d6d8:	cmp	r0, #0
   1d6dc:	beq	1d6f0 <__assert_fail@plt+0xc5c4>
   1d6e0:	ldr	r3, [pc, #484]	; 1d8cc <__assert_fail@plt+0xc7a0>
   1d6e4:	add	r1, r8, #4
   1d6e8:	ldr	r3, [r3, #8]
   1d6ec:	blx	r3
   1d6f0:	ldr	r4, [sp, #32]
   1d6f4:	ldr	lr, [sp, #40]	; 0x28
   1d6f8:	ldr	r2, [sp, #44]	; 0x2c
   1d6fc:	ldr	r1, [r4]
   1d700:	ldr	ip, [r4, #4]
   1d704:	ldr	r0, [r4, #8]
   1d708:	ldr	r3, [sp, #48]	; 0x30
   1d70c:	cmp	r1, #0
   1d710:	str	r1, [sp, #40]	; 0x28
   1d714:	str	lr, [r4]
   1d718:	str	ip, [sp, #44]	; 0x2c
   1d71c:	str	r2, [r4, #4]
   1d720:	str	r0, [sp, #48]	; 0x30
   1d724:	str	r3, [r4, #8]
   1d728:	beq	1d73c <__assert_fail@plt+0xc610>
   1d72c:	ldr	r3, [pc, #408]	; 1d8cc <__assert_fail@plt+0xc7a0>
   1d730:	lsl	r1, r1, #2
   1d734:	ldr	r3, [r3, #8]
   1d738:	blx	r3
   1d73c:	ldr	r1, [sp, #52]	; 0x34
   1d740:	cmp	r1, #0
   1d744:	beq	1d75c <__assert_fail@plt+0xc630>
   1d748:	ldr	r3, [pc, #380]	; 1d8cc <__assert_fail@plt+0xc7a0>
   1d74c:	lsl	r1, r1, #2
   1d750:	ldr	r0, [sp, #60]	; 0x3c
   1d754:	ldr	r3, [r3, #8]
   1d758:	blx	r3
   1d75c:	add	sp, sp, #84	; 0x54
   1d760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d764:	ldr	r3, [pc, #352]	; 1d8cc <__assert_fail@plt+0xc7a0>
   1d768:	mov	r2, #0
   1d76c:	str	r2, [sp, #64]	; 0x40
   1d770:	ldr	r3, [r3, #4]
   1d774:	lsl	r0, r6, #2
   1d778:	blx	r3
   1d77c:	mov	r1, sl
   1d780:	ldr	r3, [sp, #28]
   1d784:	mov	r2, r6
   1d788:	str	r0, [sp, #24]
   1d78c:	bl	19078 <__assert_fail@plt+0x7f4c>
   1d790:	cmp	r0, #0
   1d794:	ldreq	sl, [sp, #24]
   1d798:	beq	1d4ec <__assert_fail@plt+0xc3c0>
   1d79c:	ldr	r3, [pc, #300]	; 1d8d0 <__assert_fail@plt+0xc7a4>
   1d7a0:	ldr	r2, [pc, #300]	; 1d8d4 <__assert_fail@plt+0xc7a8>
   1d7a4:	ldr	r1, [pc, #300]	; 1d8d8 <__assert_fail@plt+0xc7ac>
   1d7a8:	ldr	r0, [pc, #300]	; 1d8dc <__assert_fail@plt+0xc7b0>
   1d7ac:	bl	1112c <__assert_fail@plt>
   1d7b0:	mov	r1, #1
   1d7b4:	bl	18388 <__assert_fail@plt+0x725c>
   1d7b8:	add	sp, sp, #84	; 0x54
   1d7bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7c0:	ldr	ip, [sp, #28]
   1d7c4:	ldr	r1, [sp, #48]	; 0x30
   1d7c8:	mov	r3, sl
   1d7cc:	stm	sp, {r6, fp}
   1d7d0:	mov	r0, #0
   1d7d4:	str	ip, [sp, #64]	; 0x40
   1d7d8:	bl	1937c <__assert_fail@plt+0x8250>
   1d7dc:	ldr	r2, [sp, #48]	; 0x30
   1d7e0:	ldr	r1, [sp, #36]	; 0x24
   1d7e4:	add	r3, r2, r8
   1d7e8:	ldr	r2, [r2, r1, lsl #2]
   1d7ec:	cmp	r2, #0
   1d7f0:	beq	1d804 <__assert_fail@plt+0xc6d8>
   1d7f4:	b	1d80c <__assert_fail@plt+0xc6e0>
   1d7f8:	ldr	r2, [r3, #-4]!
   1d7fc:	cmp	r2, #0
   1d800:	bne	1d80c <__assert_fail@plt+0xc6e0>
   1d804:	subs	r6, r6, #1
   1d808:	bne	1d7f8 <__assert_fail@plt+0xc6cc>
   1d80c:	str	r6, [sp, #44]	; 0x2c
   1d810:	b	1d6d4 <__assert_fail@plt+0xc5a8>
   1d814:	add	r9, sp, #52	; 0x34
   1d818:	mov	r2, r8
   1d81c:	mov	r1, r5
   1d820:	mov	r0, r9
   1d824:	bl	1d2c4 <__assert_fail@plt+0xc198>
   1d828:	cmp	r0, #0
   1d82c:	bne	1d590 <__assert_fail@plt+0xc464>
   1d830:	ldr	r0, [pc, #168]	; 1d8e0 <__assert_fail@plt+0xc7b4>
   1d834:	bl	11138 <__assert_fail@plt+0xc>
   1d838:	mov	r0, r3
   1d83c:	ldr	r1, [sp, #60]	; 0x3c
   1d840:	mov	r3, sl
   1d844:	stm	sp, {r6, fp}
   1d848:	bl	1937c <__assert_fail@plt+0x8250>
   1d84c:	ldr	r3, [r5, #4]
   1d850:	cmp	r3, #0
   1d854:	blt	1d864 <__assert_fail@plt+0xc738>
   1d858:	ldr	r1, [sp, #60]	; 0x3c
   1d85c:	mov	r3, r6
   1d860:	b	1d560 <__assert_fail@plt+0xc434>
   1d864:	mov	r5, r6
   1d868:	ldr	r3, [sp, #52]	; 0x34
   1d86c:	cmp	r6, r3
   1d870:	ldrle	r3, [sp, #60]	; 0x3c
   1d874:	ble	1d888 <__assert_fail@plt+0xc75c>
   1d878:	mov	r1, r6
   1d87c:	mov	r0, r9
   1d880:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1d884:	mov	r3, r0
   1d888:	str	r5, [sp]
   1d88c:	mov	r0, r3
   1d890:	mov	r2, r6
   1d894:	mov	r1, sl
   1d898:	bl	1893c <__assert_fail@plt+0x7810>
   1d89c:	cmp	r0, #0
   1d8a0:	beq	1d858 <__assert_fail@plt+0xc72c>
   1d8a4:	ldr	r3, [pc, #36]	; 1d8d0 <__assert_fail@plt+0xc7a4>
   1d8a8:	ldr	r2, [pc, #52]	; 1d8e4 <__assert_fail@plt+0xc7b8>
   1d8ac:	ldr	r1, [pc, #36]	; 1d8d8 <__assert_fail@plt+0xc7ac>
   1d8b0:	ldr	r0, [pc, #36]	; 1d8dc <__assert_fail@plt+0xc7b0>
   1d8b4:	bl	1112c <__assert_fail@plt>
   1d8b8:	ldr	r0, [pc, #40]	; 1d8e8 <__assert_fail@plt+0xc7bc>
   1d8bc:	bl	11138 <__assert_fail@plt+0xc>
   1d8c0:	mov	r3, r0
   1d8c4:	b	1d58c <__assert_fail@plt+0xc460>
   1d8c8:	andeq	r9, r2, r4, ror #29
   1d8cc:	andeq	fp, r3, ip, lsl r1
   1d8d0:	andeq	r9, r2, r0, asr pc
   1d8d4:	andeq	r0, r0, ip, lsr #24
   1d8d8:	andeq	sl, r2, r4, rrx
   1d8dc:	andeq	sl, r2, r0, asr #2
   1d8e0:	andeq	sl, r2, r8, ror #6
   1d8e4:	andeq	r0, r0, r9, asr #24
   1d8e8:	andeq	sl, r2, r0, asr r3
   1d8ec:	push	{r4, r5, r6, lr}
   1d8f0:	sub	sp, sp, #24
   1d8f4:	ldr	lr, [pc, #116]	; 1d970 <__assert_fail@plt+0xc844>
   1d8f8:	mov	ip, #0
   1d8fc:	cmp	r2, #0
   1d900:	mov	r5, r0
   1d904:	mov	r6, r1
   1d908:	str	lr, [sp, #20]
   1d90c:	str	ip, [sp, #12]
   1d910:	str	ip, [sp, #16]
   1d914:	addeq	r4, sp, #12
   1d918:	bne	1d954 <__assert_fail@plt+0xc828>
   1d91c:	mov	r1, r6
   1d920:	mov	r2, r4
   1d924:	mov	r0, r5
   1d928:	bl	1d484 <__assert_fail@plt+0xc358>
   1d92c:	ldr	r1, [sp, #12]
   1d930:	cmp	r1, #0
   1d934:	beq	1d94c <__assert_fail@plt+0xc820>
   1d938:	ldr	r3, [pc, #52]	; 1d974 <__assert_fail@plt+0xc848>
   1d93c:	lsl	r1, r1, #2
   1d940:	ldr	r0, [sp, #20]
   1d944:	ldr	r3, [r3, #8]
   1d948:	blx	r3
   1d94c:	add	sp, sp, #24
   1d950:	pop	{r4, r5, r6, pc}
   1d954:	add	r4, sp, #12
   1d958:	mov	r1, r2
   1d95c:	mov	r0, r4
   1d960:	str	r3, [sp, #4]
   1d964:	bl	18388 <__assert_fail@plt+0x725c>
   1d968:	ldr	r3, [sp, #4]
   1d96c:	b	1d91c <__assert_fail@plt+0xc7f0>
   1d970:	andeq	r9, r2, r4, ror #29
   1d974:	andeq	fp, r3, ip, lsl r1
   1d978:	push	{r4, r5, r6, r7, r8, lr}
   1d97c:	ldr	r5, [sp, #24]
   1d980:	cmp	r5, #0
   1d984:	beq	1da40 <__assert_fail@plt+0xc914>
   1d988:	mov	r4, r2
   1d98c:	mov	r6, r0
   1d990:	mov	r2, r3
   1d994:	mov	r7, r1
   1d998:	mov	r3, r0
   1d99c:	mov	r1, r4
   1d9a0:	mov	r0, r4
   1d9a4:	bl	1d484 <__assert_fail@plt+0xc358>
   1d9a8:	ldr	r3, [r4, #4]
   1d9ac:	cmp	r3, #1
   1d9b0:	bls	1da0c <__assert_fail@plt+0xc8e0>
   1d9b4:	mov	r1, r7
   1d9b8:	mov	r0, r4
   1d9bc:	bl	1abcc <__assert_fail@plt+0x9aa0>
   1d9c0:	cmp	r0, #0
   1d9c4:	movne	r8, #2
   1d9c8:	bne	1d9fc <__assert_fail@plt+0xc8d0>
   1d9cc:	mov	r0, #1
   1d9d0:	pop	{r4, r5, r6, r7, r8, pc}
   1d9d4:	mov	r3, r6
   1d9d8:	mov	r2, r8
   1d9dc:	mov	r1, r4
   1d9e0:	mov	r0, r4
   1d9e4:	bl	1d8ec <__assert_fail@plt+0xc7c0>
   1d9e8:	mov	r1, r7
   1d9ec:	mov	r0, r4
   1d9f0:	bl	1abcc <__assert_fail@plt+0x9aa0>
   1d9f4:	cmp	r0, #0
   1d9f8:	beq	1d9cc <__assert_fail@plt+0xc8a0>
   1d9fc:	subs	r5, r5, #1
   1da00:	bne	1d9d4 <__assert_fail@plt+0xc8a8>
   1da04:	mov	r0, r5
   1da08:	pop	{r4, r5, r6, r7, r8, pc}
   1da0c:	cmp	r3, #0
   1da10:	beq	1d9b4 <__assert_fail@plt+0xc888>
   1da14:	ldr	r3, [r4, #8]
   1da18:	ldr	r3, [r3]
   1da1c:	clz	r2, r3
   1da20:	cmp	r3, #1
   1da24:	movls	r3, #0
   1da28:	movhi	r3, #1
   1da2c:	lsr	r2, r2, #5
   1da30:	cmp	r2, r3
   1da34:	bne	1d9b4 <__assert_fail@plt+0xc888>
   1da38:	mov	r0, #1
   1da3c:	pop	{r4, r5, r6, r7, r8, pc}
   1da40:	ldr	r3, [pc, #12]	; 1da54 <__assert_fail@plt+0xc928>
   1da44:	ldr	r2, [pc, #12]	; 1da58 <__assert_fail@plt+0xc92c>
   1da48:	ldr	r1, [pc, #12]	; 1da5c <__assert_fail@plt+0xc930>
   1da4c:	ldr	r0, [pc, #12]	; 1da60 <__assert_fail@plt+0xc934>
   1da50:	bl	1112c <__assert_fail@plt>
   1da54:	andeq	r9, r2, ip, asr pc
   1da58:	ldrdeq	r0, [r0], -lr
   1da5c:	andeq	sl, r2, r4, rrx
   1da60:	andeq	sl, r2, r0, lsr #7
   1da64:	push	{r4, r5, r6, lr}
   1da68:	mov	r4, r0
   1da6c:	mov	r5, r1
   1da70:	bl	1caf0 <__assert_fail@plt+0xb9c4>
   1da74:	cmp	r0, #0
   1da78:	popeq	{r4, r5, r6, pc}
   1da7c:	ldr	r3, [r4, #4]
   1da80:	cmp	r3, #0
   1da84:	blt	1da9c <__assert_fail@plt+0xc970>
   1da88:	mov	r2, r5
   1da8c:	ldr	r1, [r4, #8]
   1da90:	add	r0, r4, #4
   1da94:	pop	{r4, r5, r6, lr}
   1da98:	b	182a8 <__assert_fail@plt+0x717c>
   1da9c:	mov	r1, r5
   1daa0:	mov	r0, r4
   1daa4:	pop	{r4, r5, r6, lr}
   1daa8:	b	1819c <__assert_fail@plt+0x7070>
   1daac:	push	{r4, r5, r6, lr}
   1dab0:	mov	r4, r0
   1dab4:	mov	r5, r1
   1dab8:	bl	1caf0 <__assert_fail@plt+0xb9c4>
   1dabc:	ldr	r3, [r4, #4]
   1dac0:	cmp	r0, r3, lsr #31
   1dac4:	beq	1dadc <__assert_fail@plt+0xc9b0>
   1dac8:	mov	r2, r5
   1dacc:	ldr	r1, [r4, #8]
   1dad0:	add	r0, r4, #4
   1dad4:	pop	{r4, r5, r6, lr}
   1dad8:	b	182a8 <__assert_fail@plt+0x717c>
   1dadc:	mov	r1, r5
   1dae0:	mov	r0, r4
   1dae4:	pop	{r4, r5, r6, lr}
   1dae8:	b	1819c <__assert_fail@plt+0x7070>
   1daec:	push	{r4, lr}
   1daf0:	mov	r2, #1
   1daf4:	mov	r4, r0
   1daf8:	bl	1adf8 <__assert_fail@plt+0x9ccc>
   1dafc:	mov	r1, r4
   1db00:	mov	r0, r4
   1db04:	bl	1a424 <__assert_fail@plt+0x92f8>
   1db08:	ldr	r3, [r4, #4]
   1db0c:	rsb	r3, r3, #0
   1db10:	str	r3, [r4, #4]
   1db14:	pop	{r4, pc}
   1db18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db1c:	sub	sp, sp, #28
   1db20:	ldr	r7, [r1, #4]
   1db24:	ldr	r3, [r2, #4]
   1db28:	cmp	r7, #0
   1db2c:	rsblt	r7, r7, #0
   1db30:	cmp	r3, #0
   1db34:	rsblt	r3, r3, #0
   1db38:	cmp	r7, r3
   1db3c:	mov	fp, r1
   1db40:	str	r3, [sp, #4]
   1db44:	str	r0, [sp, #8]
   1db48:	bge	1db68 <__assert_fail@plt+0xca3c>
   1db4c:	mov	ip, r3
   1db50:	mov	r3, fp
   1db54:	mov	r1, r7
   1db58:	mov	fp, r2
   1db5c:	mov	r7, ip
   1db60:	mov	r2, r3
   1db64:	str	r1, [sp, #4]
   1db68:	ldr	r3, [sp, #4]
   1db6c:	cmp	r3, #0
   1db70:	beq	1dcf0 <__assert_fail@plt+0xcbc4>
   1db74:	ldr	r6, [r2, #4]
   1db78:	ldr	r4, [fp, #4]
   1db7c:	ldr	r3, [sp, #8]
   1db80:	lsr	r6, r6, #31
   1db84:	ldr	r1, [sp, #4]
   1db88:	rsb	r9, r6, #0
   1db8c:	lsr	r4, r4, #31
   1db90:	cmp	r9, #0
   1db94:	moveq	r7, r1
   1db98:	and	r5, r4, r6
   1db9c:	ldr	r3, [r3]
   1dba0:	add	r1, r5, r7
   1dba4:	cmp	r1, r3
   1dba8:	rsb	r8, r5, #0
   1dbac:	rsb	sl, r4, #0
   1dbb0:	bgt	1dd14 <__assert_fail@plt+0xcbe8>
   1dbb4:	ldr	r3, [sp, #8]
   1dbb8:	ldr	r3, [r3, #8]
   1dbbc:	str	r3, [sp, #12]
   1dbc0:	ldr	r0, [r2, #8]
   1dbc4:	ldr	r2, [sp, #4]
   1dbc8:	ldr	r3, [fp, #8]
   1dbcc:	sub	r0, r0, #4
   1dbd0:	lsl	r2, r2, #2
   1dbd4:	str	r3, [sp, #16]
   1dbd8:	mov	r1, r3
   1dbdc:	add	fp, r3, r2
   1dbe0:	ldr	r3, [sp, #12]
   1dbe4:	str	r2, [sp, #20]
   1dbe8:	sub	ip, r3, #4
   1dbec:	b	1dbf4 <__assert_fail@plt+0xcac8>
   1dbf0:	mov	r6, lr
   1dbf4:	ldr	r3, [r1], #4
   1dbf8:	ldr	r2, [r0, #4]!
   1dbfc:	eor	r3, r3, sl
   1dc00:	adds	r3, r3, r4
   1dc04:	eor	r2, r2, r9
   1dc08:	movcs	r4, #1
   1dc0c:	movcc	r4, #0
   1dc10:	adds	r2, r2, r6
   1dc14:	and	r3, r3, r2
   1dc18:	eor	r3, r3, r8
   1dc1c:	movcs	lr, #1
   1dc20:	movcc	lr, #0
   1dc24:	adds	r3, r3, r5
   1dc28:	movcs	r5, #1
   1dc2c:	movcc	r5, #0
   1dc30:	cmp	fp, r1
   1dc34:	str	r3, [ip, #4]!
   1dc38:	bne	1dbf0 <__assert_fail@plt+0xcac4>
   1dc3c:	cmp	r6, r2
   1dc40:	bhi	1dd2c <__assert_fail@plt+0xcc00>
   1dc44:	ldr	r3, [sp, #4]
   1dc48:	cmp	r3, r7
   1dc4c:	bge	1dc98 <__assert_fail@plt+0xcb6c>
   1dc50:	ldr	r3, [sp, #12]
   1dc54:	ldr	r2, [sp, #20]
   1dc58:	add	r2, r3, r2
   1dc5c:	ldr	r3, [sp, #16]
   1dc60:	add	r0, r3, r7, lsl #2
   1dc64:	ldr	r3, [r1], #4
   1dc68:	eor	r3, r3, sl
   1dc6c:	adds	r3, r3, r4
   1dc70:	and	r3, r3, r9
   1dc74:	eor	r3, r3, r8
   1dc78:	movcs	r4, #1
   1dc7c:	movcc	r4, #0
   1dc80:	adds	r3, r3, r5
   1dc84:	movcs	r5, #1
   1dc88:	movcc	r5, #0
   1dc8c:	cmp	r0, r1
   1dc90:	str	r3, [r2], #4
   1dc94:	bne	1dc64 <__assert_fail@plt+0xcb38>
   1dc98:	cmp	r5, #0
   1dc9c:	bne	1dd00 <__assert_fail@plt+0xcbd4>
   1dca0:	cmp	r7, #0
   1dca4:	beq	1dcd8 <__assert_fail@plt+0xcbac>
   1dca8:	ldr	r2, [sp, #12]
   1dcac:	sub	r0, r7, #-1073741823	; 0xc0000001
   1dcb0:	ldr	r3, [r2, r0, lsl #2]
   1dcb4:	add	r0, r2, r0, lsl #2
   1dcb8:	cmp	r3, #0
   1dcbc:	beq	1dcd0 <__assert_fail@plt+0xcba4>
   1dcc0:	b	1dcd8 <__assert_fail@plt+0xcbac>
   1dcc4:	ldr	r3, [r0, #-4]!
   1dcc8:	cmp	r3, #0
   1dccc:	bne	1dcd8 <__assert_fail@plt+0xcbac>
   1dcd0:	subs	r7, r7, #1
   1dcd4:	bne	1dcc4 <__assert_fail@plt+0xcb98>
   1dcd8:	ldr	r3, [sp, #8]
   1dcdc:	cmp	r8, #0
   1dce0:	rsbne	r7, r7, #0
   1dce4:	str	r7, [r3, #4]
   1dce8:	add	sp, sp, #28
   1dcec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcf0:	ldmib	sp, {r2, r3}
   1dcf4:	str	r2, [r3, #4]
   1dcf8:	add	sp, sp, #28
   1dcfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd00:	ldr	r2, [sp, #12]
   1dd04:	mov	r3, #1
   1dd08:	str	r3, [r2, r7, lsl #2]
   1dd0c:	add	r7, r7, r3
   1dd10:	b	1dcd8 <__assert_fail@plt+0xcbac>
   1dd14:	ldr	r0, [sp, #8]
   1dd18:	str	r2, [sp, #16]
   1dd1c:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1dd20:	ldr	r2, [sp, #16]
   1dd24:	str	r0, [sp, #12]
   1dd28:	b	1dbc0 <__assert_fail@plt+0xca94>
   1dd2c:	ldr	r3, [pc, #12]	; 1dd40 <__assert_fail@plt+0xcc14>
   1dd30:	ldr	r2, [pc, #12]	; 1dd44 <__assert_fail@plt+0xcc18>
   1dd34:	ldr	r1, [pc, #12]	; 1dd48 <__assert_fail@plt+0xcc1c>
   1dd38:	ldr	r0, [pc, #12]	; 1dd4c <__assert_fail@plt+0xcc20>
   1dd3c:	bl	1112c <__assert_fail@plt>
   1dd40:	andeq	r9, r2, ip, ror #30
   1dd44:	andeq	r0, r0, lr, lsl #30
   1dd48:	andeq	sl, r2, r4, rrx
   1dd4c:	andeq	sl, r2, r8, lsr #7
   1dd50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd54:	sub	sp, sp, #28
   1dd58:	ldr	r7, [r1, #4]
   1dd5c:	ldr	r3, [r2, #4]
   1dd60:	cmp	r7, #0
   1dd64:	rsblt	r7, r7, #0
   1dd68:	cmp	r3, #0
   1dd6c:	rsblt	r3, r3, #0
   1dd70:	cmp	r7, r3
   1dd74:	mov	fp, r1
   1dd78:	str	r3, [sp, #4]
   1dd7c:	str	r0, [sp, #8]
   1dd80:	bge	1dda0 <__assert_fail@plt+0xcc74>
   1dd84:	mov	ip, r3
   1dd88:	mov	r3, fp
   1dd8c:	mov	r1, r7
   1dd90:	mov	fp, r2
   1dd94:	mov	r7, ip
   1dd98:	mov	r2, r3
   1dd9c:	str	r1, [sp, #4]
   1dda0:	ldr	r3, [sp, #4]
   1dda4:	cmp	r3, #0
   1dda8:	beq	1df54 <__assert_fail@plt+0xce28>
   1ddac:	ldr	r6, [r2, #4]
   1ddb0:	ldr	r4, [fp, #4]
   1ddb4:	ldr	r3, [sp, #8]
   1ddb8:	lsr	r6, r6, #31
   1ddbc:	ldr	r1, [sp, #4]
   1ddc0:	rsb	r9, r6, #0
   1ddc4:	lsr	r4, r4, #31
   1ddc8:	cmp	r9, #0
   1ddcc:	movne	r7, r1
   1ddd0:	orr	r5, r4, r6
   1ddd4:	ldr	r3, [r3]
   1ddd8:	add	r1, r5, r7
   1dddc:	cmp	r1, r3
   1dde0:	rsb	r8, r5, #0
   1dde4:	rsb	sl, r4, #0
   1dde8:	bgt	1df3c <__assert_fail@plt+0xce10>
   1ddec:	ldr	r3, [sp, #8]
   1ddf0:	ldr	r3, [r3, #8]
   1ddf4:	str	r3, [sp, #12]
   1ddf8:	ldr	r0, [r2, #8]
   1ddfc:	ldr	r2, [sp, #4]
   1de00:	ldr	r3, [fp, #8]
   1de04:	sub	r0, r0, #4
   1de08:	lsl	r2, r2, #2
   1de0c:	str	r3, [sp, #16]
   1de10:	mov	r1, r3
   1de14:	add	fp, r3, r2
   1de18:	ldr	r3, [sp, #12]
   1de1c:	str	r2, [sp, #20]
   1de20:	sub	ip, r3, #4
   1de24:	b	1de2c <__assert_fail@plt+0xcd00>
   1de28:	mov	r6, lr
   1de2c:	ldr	r3, [r1], #4
   1de30:	ldr	r2, [r0, #4]!
   1de34:	eor	r3, r3, sl
   1de38:	adds	r3, r3, r4
   1de3c:	eor	r2, r2, r9
   1de40:	movcs	r4, #1
   1de44:	movcc	r4, #0
   1de48:	adds	r2, r2, r6
   1de4c:	orr	r3, r3, r2
   1de50:	eor	r3, r3, r8
   1de54:	movcs	lr, #1
   1de58:	movcc	lr, #0
   1de5c:	adds	r3, r3, r5
   1de60:	movcs	r5, #1
   1de64:	movcc	r5, #0
   1de68:	cmp	fp, r1
   1de6c:	str	r3, [ip, #4]!
   1de70:	bne	1de28 <__assert_fail@plt+0xccfc>
   1de74:	cmp	r6, r2
   1de78:	bhi	1df68 <__assert_fail@plt+0xce3c>
   1de7c:	ldr	r3, [sp, #4]
   1de80:	cmp	r3, r7
   1de84:	bge	1ded0 <__assert_fail@plt+0xcda4>
   1de88:	ldr	r3, [sp, #12]
   1de8c:	ldr	r2, [sp, #20]
   1de90:	add	r2, r3, r2
   1de94:	ldr	r3, [sp, #16]
   1de98:	add	r0, r3, r7, lsl #2
   1de9c:	ldr	r3, [r1], #4
   1dea0:	eor	r3, r3, sl
   1dea4:	adds	r3, r3, r4
   1dea8:	orr	r3, r9, r3
   1deac:	eor	r3, r3, r8
   1deb0:	movcs	r4, #1
   1deb4:	movcc	r4, #0
   1deb8:	adds	r3, r3, r5
   1debc:	movcs	r5, #1
   1dec0:	movcc	r5, #0
   1dec4:	cmp	r0, r1
   1dec8:	str	r3, [r2], #4
   1decc:	bne	1de9c <__assert_fail@plt+0xcd70>
   1ded0:	cmp	r5, #0
   1ded4:	bne	1df14 <__assert_fail@plt+0xcde8>
   1ded8:	cmp	r7, #0
   1dedc:	beq	1df24 <__assert_fail@plt+0xcdf8>
   1dee0:	ldr	r2, [sp, #12]
   1dee4:	sub	r0, r7, #-1073741823	; 0xc0000001
   1dee8:	ldr	r3, [r2, r0, lsl #2]
   1deec:	add	r0, r2, r0, lsl #2
   1def0:	cmp	r3, #0
   1def4:	beq	1df08 <__assert_fail@plt+0xcddc>
   1def8:	b	1df24 <__assert_fail@plt+0xcdf8>
   1defc:	ldr	r3, [r0, #-4]!
   1df00:	cmp	r3, #0
   1df04:	bne	1df24 <__assert_fail@plt+0xcdf8>
   1df08:	subs	r7, r7, #1
   1df0c:	bne	1defc <__assert_fail@plt+0xcdd0>
   1df10:	b	1df24 <__assert_fail@plt+0xcdf8>
   1df14:	ldr	r2, [sp, #12]
   1df18:	mov	r3, #1
   1df1c:	str	r3, [r2, r7, lsl #2]
   1df20:	add	r7, r7, r3
   1df24:	ldr	r3, [sp, #8]
   1df28:	cmp	r8, #0
   1df2c:	rsbne	r7, r7, #0
   1df30:	str	r7, [r3, #4]
   1df34:	add	sp, sp, #28
   1df38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df3c:	ldr	r0, [sp, #8]
   1df40:	str	r2, [sp, #16]
   1df44:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1df48:	ldr	r2, [sp, #16]
   1df4c:	str	r0, [sp, #12]
   1df50:	b	1ddf8 <__assert_fail@plt+0xcccc>
   1df54:	mov	r1, fp
   1df58:	ldr	r0, [sp, #8]
   1df5c:	add	sp, sp, #28
   1df60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df64:	b	1a424 <__assert_fail@plt+0x92f8>
   1df68:	ldr	r3, [pc, #12]	; 1df7c <__assert_fail@plt+0xce50>
   1df6c:	ldr	r2, [pc, #12]	; 1df80 <__assert_fail@plt+0xce54>
   1df70:	ldr	r1, [pc, #12]	; 1df84 <__assert_fail@plt+0xce58>
   1df74:	ldr	r0, [pc, #12]	; 1df88 <__assert_fail@plt+0xce5c>
   1df78:	bl	1112c <__assert_fail@plt>
   1df7c:	andeq	r9, r2, r4, ror pc
   1df80:	andeq	r0, r0, r7, asr pc
   1df84:	andeq	sl, r2, r4, rrx
   1df88:	andeq	sl, r2, r8, lsr #7
   1df8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df90:	sub	sp, sp, #28
   1df94:	ldr	r8, [r1, #4]
   1df98:	ldr	r3, [r2, #4]
   1df9c:	cmp	r8, #0
   1dfa0:	rsblt	r8, r8, #0
   1dfa4:	cmp	r3, #0
   1dfa8:	rsblt	r3, r3, #0
   1dfac:	cmp	r8, r3
   1dfb0:	mov	fp, r1
   1dfb4:	str	r3, [sp, #4]
   1dfb8:	str	r0, [sp, #8]
   1dfbc:	bge	1dfdc <__assert_fail@plt+0xceb0>
   1dfc0:	mov	ip, r3
   1dfc4:	mov	r3, fp
   1dfc8:	mov	r1, r8
   1dfcc:	mov	fp, r2
   1dfd0:	mov	r8, ip
   1dfd4:	mov	r2, r3
   1dfd8:	str	r1, [sp, #4]
   1dfdc:	ldr	r3, [sp, #4]
   1dfe0:	cmp	r3, #0
   1dfe4:	beq	1e180 <__assert_fail@plt+0xd054>
   1dfe8:	ldr	r4, [fp, #4]
   1dfec:	ldr	r6, [r2, #4]
   1dff0:	ldr	r3, [sp, #8]
   1dff4:	lsr	r4, r4, #31
   1dff8:	lsr	r6, r6, #31
   1dffc:	eor	r5, r4, r6
   1e000:	ldr	r3, [r3]
   1e004:	add	r1, r5, r8
   1e008:	cmp	r1, r3
   1e00c:	rsb	r9, r5, #0
   1e010:	rsb	r7, r4, #0
   1e014:	rsb	sl, r6, #0
   1e018:	bgt	1e168 <__assert_fail@plt+0xd03c>
   1e01c:	ldr	r3, [sp, #8]
   1e020:	ldr	r3, [r3, #8]
   1e024:	str	r3, [sp, #12]
   1e028:	ldr	r0, [r2, #8]
   1e02c:	ldr	r2, [sp, #4]
   1e030:	ldr	r3, [fp, #8]
   1e034:	sub	r0, r0, #4
   1e038:	lsl	r2, r2, #2
   1e03c:	str	r3, [sp, #16]
   1e040:	mov	r1, r3
   1e044:	add	fp, r3, r2
   1e048:	ldr	r3, [sp, #12]
   1e04c:	str	r2, [sp, #20]
   1e050:	sub	ip, r3, #4
   1e054:	b	1e05c <__assert_fail@plt+0xcf30>
   1e058:	mov	r6, lr
   1e05c:	ldr	r3, [r1], #4
   1e060:	ldr	r2, [r0, #4]!
   1e064:	eor	r3, r3, r7
   1e068:	adds	lr, r3, r4
   1e06c:	eor	r2, r2, sl
   1e070:	movcs	r4, #1
   1e074:	movcc	r4, #0
   1e078:	adds	r2, r2, r6
   1e07c:	eor	r3, r9, r2
   1e080:	eor	r3, r3, lr
   1e084:	movcs	lr, #1
   1e088:	movcc	lr, #0
   1e08c:	adds	r3, r3, r5
   1e090:	movcs	r5, #1
   1e094:	movcc	r5, #0
   1e098:	cmp	fp, r1
   1e09c:	str	r3, [ip, #4]!
   1e0a0:	bne	1e058 <__assert_fail@plt+0xcf2c>
   1e0a4:	cmp	r6, r2
   1e0a8:	bhi	1e194 <__assert_fail@plt+0xd068>
   1e0ac:	ldr	r3, [sp, #4]
   1e0b0:	cmp	r8, r3
   1e0b4:	ble	1e0fc <__assert_fail@plt+0xcfd0>
   1e0b8:	ldr	r3, [sp, #12]
   1e0bc:	ldr	r2, [sp, #20]
   1e0c0:	add	r2, r3, r2
   1e0c4:	ldr	r3, [sp, #16]
   1e0c8:	add	r0, r3, r8, lsl #2
   1e0cc:	ldr	r3, [r1], #4
   1e0d0:	eor	r3, r3, r7
   1e0d4:	adds	r3, r3, r4
   1e0d8:	eor	r3, r3, r7
   1e0dc:	movcs	r4, #1
   1e0e0:	movcc	r4, #0
   1e0e4:	adds	r3, r3, r5
   1e0e8:	movcs	r5, #1
   1e0ec:	movcc	r5, #0
   1e0f0:	cmp	r0, r1
   1e0f4:	str	r3, [r2], #4
   1e0f8:	bne	1e0cc <__assert_fail@plt+0xcfa0>
   1e0fc:	cmp	r5, #0
   1e100:	bne	1e140 <__assert_fail@plt+0xd014>
   1e104:	cmp	r8, #0
   1e108:	beq	1e150 <__assert_fail@plt+0xd024>
   1e10c:	ldr	r2, [sp, #12]
   1e110:	sub	r0, r8, #-1073741823	; 0xc0000001
   1e114:	ldr	r3, [r2, r0, lsl #2]
   1e118:	add	r0, r2, r0, lsl #2
   1e11c:	cmp	r3, #0
   1e120:	beq	1e134 <__assert_fail@plt+0xd008>
   1e124:	b	1e150 <__assert_fail@plt+0xd024>
   1e128:	ldr	r3, [r0, #-4]!
   1e12c:	cmp	r3, #0
   1e130:	bne	1e150 <__assert_fail@plt+0xd024>
   1e134:	subs	r8, r8, #1
   1e138:	bne	1e128 <__assert_fail@plt+0xcffc>
   1e13c:	b	1e150 <__assert_fail@plt+0xd024>
   1e140:	ldr	r2, [sp, #12]
   1e144:	mov	r3, #1
   1e148:	str	r3, [r2, r8, lsl #2]
   1e14c:	add	r8, r8, r3
   1e150:	ldr	r3, [sp, #8]
   1e154:	cmp	r9, #0
   1e158:	rsbne	r8, r8, #0
   1e15c:	str	r8, [r3, #4]
   1e160:	add	sp, sp, #28
   1e164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e168:	ldr	r0, [sp, #8]
   1e16c:	str	r2, [sp, #16]
   1e170:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1e174:	ldr	r2, [sp, #16]
   1e178:	str	r0, [sp, #12]
   1e17c:	b	1e028 <__assert_fail@plt+0xcefc>
   1e180:	mov	r1, fp
   1e184:	ldr	r0, [sp, #8]
   1e188:	add	sp, sp, #28
   1e18c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e190:	b	1a424 <__assert_fail@plt+0x92f8>
   1e194:	ldr	r3, [pc, #12]	; 1e1a8 <__assert_fail@plt+0xd07c>
   1e198:	ldr	r2, [pc, #12]	; 1e1ac <__assert_fail@plt+0xd080>
   1e19c:	ldr	r1, [pc, #12]	; 1e1b0 <__assert_fail@plt+0xd084>
   1e1a0:	ldr	r0, [pc, #12]	; 1e1b4 <__assert_fail@plt+0xd088>
   1e1a4:	bl	1112c <__assert_fail@plt>
   1e1a8:	andeq	r9, r2, ip, ror pc
   1e1ac:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1e1b0:	andeq	sl, r2, r4, rrx
   1e1b4:	andeq	sl, r2, r8, lsr #7
   1e1b8:	cmp	r1, #0
   1e1bc:	ble	1e23c <__assert_fail@plt+0xd110>
   1e1c0:	push	{r4, r5, r6, lr}
   1e1c4:	mov	r4, r0
   1e1c8:	ldr	lr, [pc, #116]	; 1e244 <__assert_fail@plt+0xd118>
   1e1cc:	ldr	ip, [pc, #116]	; 1e248 <__assert_fail@plt+0xd11c>
   1e1d0:	add	r5, r0, r1, lsl #2
   1e1d4:	mov	r0, #0
   1e1d8:	ldr	r2, [r4], #4
   1e1dc:	cmp	r2, #0
   1e1e0:	beq	1e228 <__assert_fail@plt+0xd0fc>
   1e1e4:	mov	r1, #0
   1e1e8:	and	r3, lr, r2, lsr #1
   1e1ec:	sub	r3, r2, r3
   1e1f0:	and	r6, r3, ip
   1e1f4:	and	r3, ip, r3, lsr #2
   1e1f8:	add	r3, r3, r6
   1e1fc:	lsrs	r2, r2, #16
   1e200:	add	r3, r3, r3, lsr #4
   1e204:	and	r6, r3, #15
   1e208:	lsl	r3, r3, #20
   1e20c:	add	r3, r6, r3, lsr #28
   1e210:	add	r1, r1, r3
   1e214:	bne	1e1e8 <__assert_fail@plt+0xd0bc>
   1e218:	cmp	r5, r4
   1e21c:	add	r0, r0, r1
   1e220:	bne	1e1d8 <__assert_fail@plt+0xd0ac>
   1e224:	pop	{r4, r5, r6, pc}
   1e228:	mov	r1, r2
   1e22c:	cmp	r5, r4
   1e230:	add	r0, r0, r1
   1e234:	bne	1e1d8 <__assert_fail@plt+0xd0ac>
   1e238:	b	1e224 <__assert_fail@plt+0xd0f8>
   1e23c:	mov	r0, #0
   1e240:	bx	lr
   1e244:	andeq	r5, r0, r5, asr r5
   1e248:	andeq	r3, r0, r3, lsr r3
   1e24c:	ldr	r1, [r0, #4]
   1e250:	cmp	r1, #0
   1e254:	bge	1e260 <__assert_fail@plt+0xd134>
   1e258:	mvn	r0, #0
   1e25c:	bx	lr
   1e260:	ldr	r0, [r0, #8]
   1e264:	b	1e1b8 <__assert_fail@plt+0xd08c>
   1e268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e26c:	sub	sp, sp, #12
   1e270:	ldr	r3, [r0, #4]
   1e274:	ldr	r7, [r1, #4]
   1e278:	str	r3, [sp]
   1e27c:	teq	r3, r7
   1e280:	bmi	1e3e4 <__assert_fail@plt+0xd2b8>
   1e284:	lsr	r5, r3, #31
   1e288:	cmp	r3, #0
   1e28c:	rsb	r6, r5, #0
   1e290:	blt	1e3f0 <__assert_fail@plt+0xd2c4>
   1e294:	ldr	r3, [sp]
   1e298:	ldr	sl, [r1, #8]
   1e29c:	cmp	r3, r7
   1e2a0:	ldr	r2, [r0, #8]
   1e2a4:	str	r2, [sp, #4]
   1e2a8:	stmlt	sp, {r7, sl}
   1e2ac:	movlt	r7, r3
   1e2b0:	movlt	sl, r2
   1e2b4:	cmp	r7, #0
   1e2b8:	ble	1e40c <__assert_fail@plt+0xd2e0>
   1e2bc:	ldr	r3, [sp, #4]
   1e2c0:	ldr	r4, [pc, #380]	; 1e444 <__assert_fail@plt+0xd318>
   1e2c4:	ldr	lr, [pc, #380]	; 1e448 <__assert_fail@plt+0xd31c>
   1e2c8:	sub	sl, sl, #4
   1e2cc:	mov	r9, r3
   1e2d0:	add	fp, r3, r7, lsl #2
   1e2d4:	mov	r8, r5
   1e2d8:	mov	r0, #0
   1e2dc:	ldr	r2, [r9], #4
   1e2e0:	ldr	r3, [sl, #4]!
   1e2e4:	eor	r2, r2, r6
   1e2e8:	adds	r2, r2, r5
   1e2ec:	eor	r3, r3, r6
   1e2f0:	movcs	r5, #1
   1e2f4:	movcc	r5, #0
   1e2f8:	adds	r3, r3, r8
   1e2fc:	movcs	r8, #1
   1e300:	movcc	r8, #0
   1e304:	cmp	r2, r3
   1e308:	mov	r1, #0
   1e30c:	eor	r2, r2, r3
   1e310:	beq	1e344 <__assert_fail@plt+0xd218>
   1e314:	and	r3, r4, r2, lsr #1
   1e318:	sub	r3, r2, r3
   1e31c:	and	ip, r3, lr
   1e320:	and	r3, lr, r3, lsr #2
   1e324:	add	r3, r3, ip
   1e328:	lsrs	r2, r2, #16
   1e32c:	add	r3, r3, r3, lsr #4
   1e330:	and	ip, r3, #15
   1e334:	lsl	r3, r3, #20
   1e338:	add	r3, ip, r3, lsr #28
   1e33c:	add	r1, r1, r3
   1e340:	bne	1e314 <__assert_fail@plt+0xd1e8>
   1e344:	cmp	fp, r9
   1e348:	add	r0, r0, r1
   1e34c:	bne	1e2dc <__assert_fail@plt+0xd1b0>
   1e350:	cmp	r8, #0
   1e354:	bne	1e430 <__assert_fail@plt+0xd304>
   1e358:	ldr	r3, [sp]
   1e35c:	cmp	r3, r7
   1e360:	ble	1e3dc <__assert_fail@plt+0xd2b0>
   1e364:	ldr	r2, [sp]
   1e368:	ldr	r3, [sp, #4]
   1e36c:	ldr	lr, [pc, #208]	; 1e444 <__assert_fail@plt+0xd318>
   1e370:	ldr	ip, [pc, #208]	; 1e448 <__assert_fail@plt+0xd31c>
   1e374:	add	r7, r3, r7, lsl #2
   1e378:	add	r8, r3, r2, lsl #2
   1e37c:	ldr	r2, [r7], #4
   1e380:	mov	r1, #0
   1e384:	eor	r2, r2, r6
   1e388:	adds	r2, r2, r5
   1e38c:	movcs	r5, #1
   1e390:	movcc	r5, #0
   1e394:	cmp	r6, r2
   1e398:	eor	r2, r2, r6
   1e39c:	beq	1e3d0 <__assert_fail@plt+0xd2a4>
   1e3a0:	and	r3, lr, r2, lsr #1
   1e3a4:	sub	r3, r2, r3
   1e3a8:	and	r4, r3, ip
   1e3ac:	and	r3, ip, r3, lsr #2
   1e3b0:	add	r3, r3, r4
   1e3b4:	lsrs	r2, r2, #16
   1e3b8:	add	r3, r3, r3, lsr #4
   1e3bc:	and	r4, r3, #15
   1e3c0:	lsl	r3, r3, #20
   1e3c4:	add	r3, r4, r3, lsr #28
   1e3c8:	add	r1, r1, r3
   1e3cc:	bne	1e3a0 <__assert_fail@plt+0xd274>
   1e3d0:	cmp	r8, r7
   1e3d4:	add	r0, r0, r1
   1e3d8:	bne	1e37c <__assert_fail@plt+0xd250>
   1e3dc:	add	sp, sp, #12
   1e3e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3e4:	mvn	r0, #0
   1e3e8:	add	sp, sp, #12
   1e3ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3f0:	cmp	r7, #0
   1e3f4:	bge	1e41c <__assert_fail@plt+0xd2f0>
   1e3f8:	ldr	r3, [sp]
   1e3fc:	rsb	r7, r7, #0
   1e400:	rsb	r3, r3, #0
   1e404:	str	r3, [sp]
   1e408:	b	1e294 <__assert_fail@plt+0xd168>
   1e40c:	mov	r7, #0
   1e410:	mov	r0, r7
   1e414:	mov	r8, r5
   1e418:	b	1e350 <__assert_fail@plt+0xd224>
   1e41c:	ldr	r3, [pc, #40]	; 1e44c <__assert_fail@plt+0xd320>
   1e420:	ldr	r2, [pc, #40]	; 1e450 <__assert_fail@plt+0xd324>
   1e424:	ldr	r1, [pc, #40]	; 1e454 <__assert_fail@plt+0xd328>
   1e428:	ldr	r0, [pc, #40]	; 1e458 <__assert_fail@plt+0xd32c>
   1e42c:	bl	1112c <__assert_fail@plt>
   1e430:	ldr	r3, [pc, #20]	; 1e44c <__assert_fail@plt+0xd320>
   1e434:	ldr	r2, [pc, #32]	; 1e45c <__assert_fail@plt+0xd330>
   1e438:	ldr	r1, [pc, #20]	; 1e454 <__assert_fail@plt+0xd328>
   1e43c:	ldr	r0, [pc, #28]	; 1e460 <__assert_fail@plt+0xd334>
   1e440:	bl	1112c <__assert_fail@plt>
   1e444:	andeq	r5, r0, r5, asr r5
   1e448:	andeq	r3, r0, r3, lsr r3
   1e44c:	andeq	r9, r2, r4, lsl #31
   1e450:	andeq	r0, r0, pc, ror #31
   1e454:	andeq	sl, r2, r4, rrx
   1e458:			; <UNDEFINED> instruction: 0x0002a3b0
   1e45c:	andeq	r1, r0, r4
   1e460:	andeq	sl, r2, r8, lsr #7
   1e464:	push	{r4, r5, lr}
   1e468:	lsr	ip, r1, #5
   1e46c:	ldr	lr, [r0, #4]
   1e470:	sub	sp, sp, #12
   1e474:	eor	r3, lr, lr, asr #31
   1e478:	sub	r3, r3, lr, asr #31
   1e47c:	cmp	r3, ip
   1e480:	bgt	1e498 <__assert_fail@plt+0xd36c>
   1e484:	cmp	lr, #0
   1e488:	movlt	r0, r1
   1e48c:	mvnge	r0, #0
   1e490:	add	sp, sp, #12
   1e494:	pop	{r4, r5, pc}
   1e498:	ldr	r2, [r0, #8]
   1e49c:	cmp	r1, #0
   1e4a0:	lsl	r4, ip, #2
   1e4a4:	ldr	r0, [r2, ip, lsl #2]
   1e4a8:	moveq	lr, r1
   1e4ac:	beq	1e4c8 <__assert_fail@plt+0xd39c>
   1e4b0:	cmp	lr, #0
   1e4b4:	movge	lr, #0
   1e4b8:	blt	1e4dc <__assert_fail@plt+0xd3b0>
   1e4bc:	and	r1, r1, #31
   1e4c0:	mvn	r4, #0
   1e4c4:	and	r0, r0, r4, lsl r1
   1e4c8:	str	lr, [sp]
   1e4cc:	mov	r1, ip
   1e4d0:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   1e4d4:	add	sp, sp, #12
   1e4d8:	pop	{r4, r5, pc}
   1e4dc:	cmp	ip, #0
   1e4e0:	beq	1e514 <__assert_fail@plt+0xd3e8>
   1e4e4:	sub	lr, r4, #4
   1e4e8:	add	r4, r2, lr
   1e4ec:	ldr	lr, [r2, lr]
   1e4f0:	cmp	lr, #0
   1e4f4:	bne	1e52c <__assert_fail@plt+0xd400>
   1e4f8:	mov	lr, ip
   1e4fc:	b	1e50c <__assert_fail@plt+0xd3e0>
   1e500:	ldr	r5, [r4, #-4]!
   1e504:	cmp	r5, #0
   1e508:	bne	1e52c <__assert_fail@plt+0xd400>
   1e50c:	subs	lr, lr, #1
   1e510:	bne	1e500 <__assert_fail@plt+0xd3d4>
   1e514:	mov	lr, #1
   1e518:	mvn	r0, r0
   1e51c:	adds	r0, r0, lr
   1e520:	mvncc	lr, #0
   1e524:	movcs	lr, #0
   1e528:	b	1e4bc <__assert_fail@plt+0xd390>
   1e52c:	mov	lr, #0
   1e530:	b	1e518 <__assert_fail@plt+0xd3ec>
   1e534:	push	{r4, r5, r6, r7, lr}
   1e538:	lsr	r6, r1, #5
   1e53c:	ldr	lr, [r0, #4]
   1e540:	sub	sp, sp, #12
   1e544:	cmp	lr, #0
   1e548:	eor	r3, lr, lr, asr #31
   1e54c:	sub	r3, r3, lr, asr #31
   1e550:	movlt	lr, #0
   1e554:	mvnge	lr, #0
   1e558:	cmp	r3, r6
   1e55c:	bgt	1e574 <__assert_fail@plt+0xd448>
   1e560:	cmp	lr, #0
   1e564:	movne	r0, r1
   1e568:	mvneq	r0, #0
   1e56c:	add	sp, sp, #12
   1e570:	pop	{r4, r5, r6, r7, pc}
   1e574:	ldr	r2, [r0, #8]
   1e578:	cmp	lr, #0
   1e57c:	lsl	ip, r6, #2
   1e580:	ldr	r7, [r2, r6, lsl #2]
   1e584:	eor	r7, r7, lr
   1e588:	bne	1e5cc <__assert_fail@plt+0xd4a0>
   1e58c:	cmp	r6, #0
   1e590:	beq	1e5c4 <__assert_fail@plt+0xd498>
   1e594:	sub	ip, ip, #4
   1e598:	add	r4, r2, ip
   1e59c:	ldr	r0, [r2, ip]
   1e5a0:	cmp	r0, #0
   1e5a4:	bne	1e5ec <__assert_fail@plt+0xd4c0>
   1e5a8:	mov	ip, r6
   1e5ac:	b	1e5bc <__assert_fail@plt+0xd490>
   1e5b0:	ldr	r5, [r4, #-4]!
   1e5b4:	cmp	r5, #0
   1e5b8:	bne	1e5ec <__assert_fail@plt+0xd4c0>
   1e5bc:	subs	ip, ip, #1
   1e5c0:	bne	1e5b0 <__assert_fail@plt+0xd484>
   1e5c4:	mov	r0, #1
   1e5c8:	sub	r7, r7, r0
   1e5cc:	and	ip, r1, #31
   1e5d0:	mvn	r0, #0
   1e5d4:	str	lr, [sp]
   1e5d8:	mov	r1, r6
   1e5dc:	and	r0, r7, r0, lsl ip
   1e5e0:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   1e5e4:	add	sp, sp, #12
   1e5e8:	pop	{r4, r5, r6, r7, pc}
   1e5ec:	mov	r0, #0
   1e5f0:	b	1e5c8 <__assert_fail@plt+0xd49c>
   1e5f4:	cmp	r1, #1
   1e5f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5fc:	sub	sp, sp, #20
   1e600:	ble	1e7a4 <__assert_fail@plt+0xd678>
   1e604:	cmp	r1, #62	; 0x3e
   1e608:	mov	r6, r1
   1e60c:	bgt	1e7b8 <__assert_fail@plt+0xd68c>
   1e610:	ldr	r4, [r0, #4]
   1e614:	cmp	r4, #0
   1e618:	moveq	r5, #1
   1e61c:	bne	1e62c <__assert_fail@plt+0xd500>
   1e620:	mov	r0, r5
   1e624:	add	sp, sp, #20
   1e628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e62c:	cmp	r4, #0
   1e630:	rsblt	r4, r4, #0
   1e634:	ldr	r7, [r0, #8]
   1e638:	sub	r8, r4, #-1073741823	; 0xc0000001
   1e63c:	sub	r5, r4, #1
   1e640:	ldr	r0, [r7, r8, lsl #2]
   1e644:	bl	18048 <__assert_fail@plt+0x6f1c>
   1e648:	sub	r3, r6, #2
   1e64c:	lsl	sl, r8, #2
   1e650:	add	r5, r0, r5, lsl #5
   1e654:	cmp	r3, #30
   1e658:	ldrls	pc, [pc, r3, lsl #2]
   1e65c:	b	1e71c <__assert_fail@plt+0xd5f0>
   1e660:	andeq	lr, r1, r0, lsr #12
   1e664:	andeq	lr, r1, ip, lsl r7
   1e668:	andeq	lr, r1, r0, lsl r7
   1e66c:	andeq	lr, r1, ip, lsl r7
   1e670:	andeq	lr, r1, ip, lsl r7
   1e674:	andeq	lr, r1, ip, lsl r7
   1e678:	strdeq	lr, [r1], -ip
   1e67c:	andeq	lr, r1, ip, lsl r7
   1e680:	andeq	lr, r1, ip, lsl r7
   1e684:	andeq	lr, r1, ip, lsl r7
   1e688:	andeq	lr, r1, ip, lsl r7
   1e68c:	andeq	lr, r1, ip, lsl r7
   1e690:	andeq	lr, r1, ip, lsl r7
   1e694:	andeq	lr, r1, ip, lsl r7
   1e698:	strdeq	lr, [r1], -r0
   1e69c:	andeq	lr, r1, ip, lsl r7
   1e6a0:	andeq	lr, r1, ip, lsl r7
   1e6a4:	andeq	lr, r1, ip, lsl r7
   1e6a8:	andeq	lr, r1, ip, lsl r7
   1e6ac:	andeq	lr, r1, ip, lsl r7
   1e6b0:	andeq	lr, r1, ip, lsl r7
   1e6b4:	andeq	lr, r1, ip, lsl r7
   1e6b8:	andeq	lr, r1, ip, lsl r7
   1e6bc:	andeq	lr, r1, ip, lsl r7
   1e6c0:	andeq	lr, r1, ip, lsl r7
   1e6c4:	andeq	lr, r1, ip, lsl r7
   1e6c8:	andeq	lr, r1, ip, lsl r7
   1e6cc:	andeq	lr, r1, ip, lsl r7
   1e6d0:	andeq	lr, r1, ip, lsl r7
   1e6d4:	andeq	lr, r1, ip, lsl r7
   1e6d8:	ldrdeq	lr, [r1], -ip
   1e6dc:	ldr	r0, [pc, #232]	; 1e7cc <__assert_fail@plt+0xd6a0>
   1e6e0:	add	r5, r5, #4
   1e6e4:	umull	r3, r5, r0, r5
   1e6e8:	lsr	r5, r5, #2
   1e6ec:	b	1e620 <__assert_fail@plt+0xd4f4>
   1e6f0:	add	r5, r5, #3
   1e6f4:	lsr	r5, r5, #2
   1e6f8:	b	1e620 <__assert_fail@plt+0xd4f4>
   1e6fc:	ldr	r0, [pc, #204]	; 1e7d0 <__assert_fail@plt+0xd6a4>
   1e700:	add	r5, r5, #2
   1e704:	umull	r3, r5, r0, r5
   1e708:	lsr	r5, r5, #1
   1e70c:	b	1e620 <__assert_fail@plt+0xd4f4>
   1e710:	add	r5, r5, #1
   1e714:	lsr	r5, r5, #1
   1e718:	b	1e620 <__assert_fail@plt+0xd4f4>
   1e71c:	ldr	fp, [pc, #176]	; 1e7d4 <__assert_fail@plt+0xd6a8>
   1e720:	add	sl, sl, #4
   1e724:	mov	r0, sl
   1e728:	ldr	r3, [fp, #4]
   1e72c:	blx	r3
   1e730:	add	r1, r7, sl
   1e734:	mov	r9, r0
   1e738:	sub	r3, r0, #4
   1e73c:	ldr	r2, [r7], #4
   1e740:	cmp	r7, r1
   1e744:	str	r2, [r3, #4]!
   1e748:	bne	1e73c <__assert_fail@plt+0xd610>
   1e74c:	mov	r1, r6
   1e750:	mov	r0, sp
   1e754:	bl	19ebc <__assert_fail@plt+0x8d90>
   1e758:	mov	r5, #0
   1e75c:	b	1e764 <__assert_fail@plt+0xd638>
   1e760:	sub	r8, r4, #-1073741823	; 0xc0000001
   1e764:	mov	r3, sp
   1e768:	mov	r2, r4
   1e76c:	mov	r1, r9
   1e770:	mov	r0, r9
   1e774:	bl	19144 <__assert_fail@plt+0x8018>
   1e778:	ldr	r3, [r9, r8, lsl #2]
   1e77c:	add	r5, r5, #1
   1e780:	cmp	r3, #0
   1e784:	subeq	r4, r4, #1
   1e788:	cmp	r4, #0
   1e78c:	bne	1e760 <__assert_fail@plt+0xd634>
   1e790:	ldr	r3, [fp, #8]
   1e794:	mov	r1, sl
   1e798:	mov	r0, r9
   1e79c:	blx	r3
   1e7a0:	b	1e620 <__assert_fail@plt+0xd4f4>
   1e7a4:	ldr	r3, [pc, #44]	; 1e7d8 <__assert_fail@plt+0xd6ac>
   1e7a8:	ldr	r2, [pc, #44]	; 1e7dc <__assert_fail@plt+0xd6b0>
   1e7ac:	ldr	r1, [pc, #44]	; 1e7e0 <__assert_fail@plt+0xd6b4>
   1e7b0:	ldr	r0, [pc, #44]	; 1e7e4 <__assert_fail@plt+0xd6b8>
   1e7b4:	bl	1112c <__assert_fail@plt>
   1e7b8:	ldr	r3, [pc, #24]	; 1e7d8 <__assert_fail@plt+0xd6ac>
   1e7bc:	ldr	r2, [pc, #36]	; 1e7e8 <__assert_fail@plt+0xd6bc>
   1e7c0:	ldr	r1, [pc, #24]	; 1e7e0 <__assert_fail@plt+0xd6b4>
   1e7c4:	ldr	r0, [pc, #32]	; 1e7ec <__assert_fail@plt+0xd6c0>
   1e7c8:	bl	1112c <__assert_fail@plt>
   1e7cc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e7d0:	bge	feac9284 <stdout@@GLIBC_2.4+0xfea8e100>
   1e7d4:	andeq	fp, r3, ip, lsl r1
   1e7d8:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   1e7dc:	andeq	r1, r0, pc, asr r0
   1e7e0:	andeq	sl, r2, r4, rrx
   1e7e4:			; <UNDEFINED> instruction: 0x0002a3b8
   1e7e8:	andeq	r1, r0, r0, rrx
   1e7ec:	andeq	sl, r2, r4, asr #7
   1e7f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e7f4:	mov	r6, r3
   1e7f8:	ldr	r7, [r2, #4]
   1e7fc:	sub	sp, sp, #52	; 0x34
   1e800:	lsr	r3, r7, #31
   1e804:	bics	r3, r3, r6
   1e808:	bne	1eb30 <__assert_fail@plt+0xda04>
   1e80c:	cmp	r6, #0
   1e810:	beq	1eb28 <__assert_fail@plt+0xd9fc>
   1e814:	eor	r3, r7, r7, asr #31
   1e818:	sub	r3, r3, r7, asr #31
   1e81c:	cmp	r3, #1
   1e820:	mov	r5, r2
   1e824:	mov	sl, r0
   1e828:	mov	fp, r1
   1e82c:	ble	1e9f0 <__assert_fail@plt+0xd8c4>
   1e830:	ldr	r8, [pc, #768]	; 1eb38 <__assert_fail@plt+0xda0c>
   1e834:	mov	r4, #0
   1e838:	mov	r1, #2
   1e83c:	mov	r0, r5
   1e840:	str	r8, [sp, #32]
   1e844:	str	r8, [sp, #20]
   1e848:	str	r4, [sp, #24]
   1e84c:	str	r4, [sp, #28]
   1e850:	str	r4, [sp, #12]
   1e854:	str	r4, [sp, #16]
   1e858:	bl	1e5f4 <__assert_fail@plt+0xd4c8>
   1e85c:	mov	r1, r6
   1e860:	sub	r0, r0, #1
   1e864:	bl	26120 <__assert_fail@plt+0x14ff4>
   1e868:	add	r1, r0, #1
   1e86c:	add	r0, sp, #12
   1e870:	bl	1cb70 <__assert_fail@plt+0xba44>
   1e874:	cmp	r6, #2
   1e878:	beq	1ea48 <__assert_fail@plt+0xd91c>
   1e87c:	cmp	r7, #0
   1e880:	str	r4, [sp, #36]	; 0x24
   1e884:	str	r4, [sp, #40]	; 0x28
   1e888:	str	r8, [sp, #44]	; 0x2c
   1e88c:	blt	1eb10 <__assert_fail@plt+0xd9e4>
   1e890:	ldr	r3, [sp, #16]
   1e894:	sub	r9, r6, #1
   1e898:	add	r4, sp, #24
   1e89c:	mov	r8, #2
   1e8a0:	mov	r7, #0
   1e8a4:	b	1e8ac <__assert_fail@plt+0xd780>
   1e8a8:	ldr	r3, [sp, #16]
   1e8ac:	ldr	r2, [sp, #28]
   1e8b0:	ldr	r1, [sp, #24]
   1e8b4:	ldr	r0, [sp, #12]
   1e8b8:	ldr	lr, [sp, #32]
   1e8bc:	ldr	ip, [sp, #20]
   1e8c0:	str	r2, [sp, #16]
   1e8c4:	str	r1, [sp, #12]
   1e8c8:	mov	r2, r9
   1e8cc:	mov	r1, r4
   1e8d0:	str	r0, [sp, #24]
   1e8d4:	add	r0, sp, #12
   1e8d8:	str	lr, [sp, #20]
   1e8dc:	str	ip, [sp, #32]
   1e8e0:	str	r3, [sp, #28]
   1e8e4:	bl	1c82c <__assert_fail@plt+0xb700>
   1e8e8:	add	r3, sp, #12
   1e8ec:	mov	r0, r3
   1e8f0:	mov	r2, r5
   1e8f4:	mov	r1, r7
   1e8f8:	str	r8, [sp]
   1e8fc:	bl	1b168 <__assert_fail@plt+0xa03c>
   1e900:	mov	r2, r9
   1e904:	mov	r1, r4
   1e908:	add	r0, sp, #36	; 0x24
   1e90c:	bl	1b870 <__assert_fail@plt+0xa744>
   1e910:	add	r1, sp, #12
   1e914:	mov	r0, r1
   1e918:	add	r2, sp, #36	; 0x24
   1e91c:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1e920:	add	r2, sp, #12
   1e924:	mov	r3, r6
   1e928:	mov	r1, r7
   1e92c:	mov	r0, r2
   1e930:	str	r8, [sp]
   1e934:	bl	1b660 <__assert_fail@plt+0xa534>
   1e938:	mov	r1, r4
   1e93c:	add	r0, sp, #12
   1e940:	bl	1acc0 <__assert_fail@plt+0x9b94>
   1e944:	cmp	r0, #0
   1e948:	blt	1e8a8 <__assert_fail@plt+0xd77c>
   1e94c:	ldr	r1, [sp, #36]	; 0x24
   1e950:	cmp	r1, #0
   1e954:	bne	1eaf8 <__assert_fail@plt+0xd9cc>
   1e958:	cmp	fp, #0
   1e95c:	beq	1e980 <__assert_fail@plt+0xd854>
   1e960:	mov	r2, r6
   1e964:	mov	r1, r4
   1e968:	add	r0, sp, #12
   1e96c:	bl	1c82c <__assert_fail@plt+0xb700>
   1e970:	add	r2, sp, #12
   1e974:	mov	r1, r5
   1e978:	mov	r0, fp
   1e97c:	bl	1b114 <__assert_fail@plt+0x9fe8>
   1e980:	cmp	sl, #0
   1e984:	ldreq	r1, [sp, #24]
   1e988:	beq	1e9c0 <__assert_fail@plt+0xd894>
   1e98c:	ldr	r3, [sl]
   1e990:	ldr	r4, [sp, #24]
   1e994:	ldr	lr, [sl, #4]
   1e998:	ldr	ip, [sp, #28]
   1e99c:	ldr	r0, [sl, #8]
   1e9a0:	ldr	r2, [sp, #32]
   1e9a4:	mov	r1, r3
   1e9a8:	str	r3, [sp, #24]
   1e9ac:	str	r4, [sl]
   1e9b0:	str	lr, [sp, #28]
   1e9b4:	str	ip, [sl, #4]
   1e9b8:	str	r0, [sp, #32]
   1e9bc:	str	r2, [sl, #8]
   1e9c0:	cmp	r1, #0
   1e9c4:	bne	1eae0 <__assert_fail@plt+0xd9b4>
   1e9c8:	ldr	r1, [sp, #12]
   1e9cc:	cmp	r1, #0
   1e9d0:	beq	1e9e8 <__assert_fail@plt+0xd8bc>
   1e9d4:	ldr	r3, [pc, #352]	; 1eb3c <__assert_fail@plt+0xda10>
   1e9d8:	lsl	r1, r1, #2
   1e9dc:	ldr	r0, [sp, #20]
   1e9e0:	ldr	r3, [r3, #8]
   1e9e4:	blx	r3
   1e9e8:	add	sp, sp, #52	; 0x34
   1e9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9f0:	cmp	r7, #0
   1e9f4:	beq	1ea1c <__assert_fail@plt+0xd8f0>
   1e9f8:	ldr	r3, [r5, #8]
   1e9fc:	ldr	r2, [r3]
   1ea00:	clz	r3, r2
   1ea04:	lsr	r3, r3, #5
   1ea08:	cmp	r2, #1
   1ea0c:	rsbls	r3, r3, #0
   1ea10:	rsbhi	r3, r3, #1
   1ea14:	cmp	r3, #1
   1ea18:	beq	1e830 <__assert_fail@plt+0xd704>
   1ea1c:	cmp	sl, #0
   1ea20:	beq	1ea30 <__assert_fail@plt+0xd904>
   1ea24:	mov	r1, r5
   1ea28:	mov	r0, sl
   1ea2c:	bl	1a424 <__assert_fail@plt+0x92f8>
   1ea30:	cmp	fp, #0
   1ea34:	beq	1e9e8 <__assert_fail@plt+0xd8bc>
   1ea38:	mov	r3, #0
   1ea3c:	str	r3, [fp, #4]
   1ea40:	add	sp, sp, #52	; 0x34
   1ea44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea48:	mov	r7, r4
   1ea4c:	mov	r8, r6
   1ea50:	add	r4, sp, #24
   1ea54:	mov	r9, #1
   1ea58:	ldr	ip, [sp, #28]
   1ea5c:	ldr	r3, [sp, #16]
   1ea60:	ldr	r2, [sp, #24]
   1ea64:	ldr	r1, [sp, #12]
   1ea68:	ldr	r0, [sp, #32]
   1ea6c:	str	ip, [sp, #16]
   1ea70:	ldr	ip, [sp, #20]
   1ea74:	str	r3, [sp, #28]
   1ea78:	str	r2, [sp, #12]
   1ea7c:	mov	r3, r4
   1ea80:	mov	r2, r5
   1ea84:	str	r1, [sp, #24]
   1ea88:	str	r0, [sp, #20]
   1ea8c:	mov	r1, r7
   1ea90:	str	r8, [sp]
   1ea94:	add	r0, sp, #12
   1ea98:	str	ip, [sp, #32]
   1ea9c:	bl	1b168 <__assert_fail@plt+0xa03c>
   1eaa0:	add	r1, sp, #12
   1eaa4:	mov	r0, r1
   1eaa8:	mov	r2, r4
   1eaac:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1eab0:	ldr	r1, [sp, #16]
   1eab4:	mov	r3, r9
   1eab8:	add	r2, sp, #20
   1eabc:	add	r0, sp, #12
   1eac0:	str	r8, [sp]
   1eac4:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1eac8:	mov	r1, r4
   1eacc:	add	r0, sp, #12
   1ead0:	bl	1acc0 <__assert_fail@plt+0x9b94>
   1ead4:	cmp	r0, #0
   1ead8:	blt	1ea58 <__assert_fail@plt+0xd92c>
   1eadc:	b	1e958 <__assert_fail@plt+0xd82c>
   1eae0:	ldr	r3, [pc, #84]	; 1eb3c <__assert_fail@plt+0xda10>
   1eae4:	lsl	r1, r1, #2
   1eae8:	ldr	r0, [sp, #32]
   1eaec:	ldr	r3, [r3, #8]
   1eaf0:	blx	r3
   1eaf4:	b	1e9c8 <__assert_fail@plt+0xd89c>
   1eaf8:	ldr	r3, [pc, #60]	; 1eb3c <__assert_fail@plt+0xda10>
   1eafc:	lsl	r1, r1, #2
   1eb00:	ldr	r0, [sp, #44]	; 0x2c
   1eb04:	ldr	r3, [r3, #8]
   1eb08:	blx	r3
   1eb0c:	b	1e958 <__assert_fail@plt+0xd82c>
   1eb10:	add	r1, sp, #12
   1eb14:	mov	r0, r1
   1eb18:	bl	1a424 <__assert_fail@plt+0x92f8>
   1eb1c:	ldr	r3, [sp, #16]
   1eb20:	rsb	r3, r3, #0
   1eb24:	b	1e894 <__assert_fail@plt+0xd768>
   1eb28:	ldr	r0, [pc, #16]	; 1eb40 <__assert_fail@plt+0xda14>
   1eb2c:	bl	11138 <__assert_fail@plt+0xc>
   1eb30:	ldr	r0, [pc, #12]	; 1eb44 <__assert_fail@plt+0xda18>
   1eb34:	bl	11138 <__assert_fail@plt+0xc>
   1eb38:	andeq	r9, r2, r4, ror #29
   1eb3c:	andeq	fp, r3, ip, lsl r1
   1eb40:	andeq	sl, r2, r0, lsl #8
   1eb44:	ldrdeq	sl, [r2], -r0
   1eb48:	push	{r4, lr}
   1eb4c:	sub	sp, sp, #16
   1eb50:	ldr	lr, [pc, #80]	; 1eba8 <__assert_fail@plt+0xda7c>
   1eb54:	mov	ip, #0
   1eb58:	mov	r3, r2
   1eb5c:	mov	r2, r1
   1eb60:	add	r1, sp, #4
   1eb64:	str	lr, [sp, #12]
   1eb68:	str	ip, [sp, #4]
   1eb6c:	str	ip, [sp, #8]
   1eb70:	bl	1e7f0 <__assert_fail@plt+0xd6c4>
   1eb74:	ldmib	sp, {r1, r4}
   1eb78:	clz	r4, r4
   1eb7c:	lsr	r4, r4, #5
   1eb80:	cmp	r1, #0
   1eb84:	beq	1eb9c <__assert_fail@plt+0xda70>
   1eb88:	ldr	r3, [pc, #28]	; 1ebac <__assert_fail@plt+0xda80>
   1eb8c:	lsl	r1, r1, #2
   1eb90:	ldr	r0, [sp, #12]
   1eb94:	ldr	r3, [r3, #8]
   1eb98:	blx	r3
   1eb9c:	mov	r0, r4
   1eba0:	add	sp, sp, #16
   1eba4:	pop	{r4, pc}
   1eba8:	andeq	r9, r2, r4, ror #29
   1ebac:	andeq	fp, r3, ip, lsl r1
   1ebb0:	ldr	r3, [r0, #4]
   1ebb4:	cmp	r3, #0
   1ebb8:	ble	1ebcc <__assert_fail@plt+0xdaa0>
   1ebbc:	mov	r1, r0
   1ebc0:	mov	r2, #2
   1ebc4:	mov	r0, #0
   1ebc8:	b	1eb48 <__assert_fail@plt+0xda1c>
   1ebcc:	moveq	r0, #1
   1ebd0:	movne	r0, #0
   1ebd4:	bx	lr
   1ebd8:	subs	r3, r1, #0
   1ebdc:	push	{lr}		; (str lr, [sp, #-4]!)
   1ebe0:	sub	sp, sp, #20
   1ebe4:	ble	1ec24 <__assert_fail@plt+0xdaf8>
   1ebe8:	sub	r2, r3, #-1073741823	; 0xc0000001
   1ebec:	mov	ip, r0
   1ebf0:	ldr	r2, [r0, r2, lsl #2]
   1ebf4:	cmp	r2, #0
   1ebf8:	beq	1ec38 <__assert_fail@plt+0xdb0c>
   1ebfc:	mov	lr, #0
   1ec00:	mov	r0, lr
   1ec04:	mov	r2, #2
   1ec08:	add	r1, sp, #4
   1ec0c:	str	ip, [sp, #12]
   1ec10:	str	r3, [sp, #8]
   1ec14:	str	lr, [sp, #4]
   1ec18:	bl	1eb48 <__assert_fail@plt+0xda1c>
   1ec1c:	add	sp, sp, #20
   1ec20:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec24:	ldr	r3, [pc, #32]	; 1ec4c <__assert_fail@plt+0xdb20>
   1ec28:	ldr	r2, [pc, #32]	; 1ec50 <__assert_fail@plt+0xdb24>
   1ec2c:	ldr	r1, [pc, #32]	; 1ec54 <__assert_fail@plt+0xdb28>
   1ec30:	ldr	r0, [pc, #32]	; 1ec58 <__assert_fail@plt+0xdb2c>
   1ec34:	bl	1112c <__assert_fail@plt>
   1ec38:	ldr	r3, [pc, #12]	; 1ec4c <__assert_fail@plt+0xdb20>
   1ec3c:	ldr	r2, [pc, #24]	; 1ec5c <__assert_fail@plt+0xdb30>
   1ec40:	ldr	r1, [pc, #12]	; 1ec54 <__assert_fail@plt+0xdb28>
   1ec44:	ldr	r0, [pc, #20]	; 1ec60 <__assert_fail@plt+0xdb34>
   1ec48:	bl	1112c <__assert_fail@plt>
   1ec4c:	andeq	r9, r2, r0, lsr #31
   1ec50:	andeq	r0, r0, r6, ror #25
   1ec54:	andeq	sl, r2, r4, rrx
   1ec58:	andeq	sl, r2, r8, lsr #2
   1ec5c:	andeq	r0, r0, r7, ror #25
   1ec60:	andeq	sl, r2, ip, lsl r4
   1ec64:	mov	r3, #2
   1ec68:	b	1e7f0 <__assert_fail@plt+0xd6c4>
   1ec6c:	mov	r2, r1
   1ec70:	mov	r3, #2
   1ec74:	mov	r1, #0
   1ec78:	b	1e7f0 <__assert_fail@plt+0xd6c4>
   1ec7c:	push	{r4, r5, r6, r7, lr}
   1ec80:	subs	r6, r3, #0
   1ec84:	sub	sp, sp, #44	; 0x2c
   1ec88:	ble	1edc8 <__assert_fail@plt+0xdc9c>
   1ec8c:	sub	r3, r6, #-1073741823	; 0xc0000001
   1ec90:	mov	r4, r0
   1ec94:	ldr	r3, [r2, r3, lsl #2]
   1ec98:	mov	r0, r2
   1ec9c:	cmp	r3, #0
   1eca0:	beq	1edb4 <__assert_fail@plt+0xdc88>
   1eca4:	ldr	r7, [pc, #304]	; 1eddc <__assert_fail@plt+0xdcb0>
   1eca8:	mov	ip, #0
   1ecac:	mov	r3, #2
   1ecb0:	str	r0, [sp, #36]	; 0x24
   1ecb4:	mov	r5, r1
   1ecb8:	add	r2, sp, #28
   1ecbc:	add	r1, sp, #16
   1ecc0:	add	r0, sp, #4
   1ecc4:	str	r6, [sp, #32]
   1ecc8:	str	r7, [sp, #24]
   1eccc:	str	r7, [sp, #12]
   1ecd0:	str	ip, [sp, #16]
   1ecd4:	str	ip, [sp, #20]
   1ecd8:	str	ip, [sp, #4]
   1ecdc:	str	ip, [sp, #8]
   1ece0:	str	ip, [sp, #28]
   1ece4:	add	r6, r6, #1
   1ece8:	bl	1e7f0 <__assert_fail@plt+0xd6c4>
   1ecec:	ldr	r3, [sp, #8]
   1ecf0:	cmp	r3, r6, asr #1
   1ecf4:	bne	1eda0 <__assert_fail@plt+0xdc74>
   1ecf8:	cmp	r3, #0
   1ecfc:	ldr	r0, [sp, #12]
   1ed00:	lslgt	r3, r3, #2
   1ed04:	addgt	r2, r4, r3
   1ed08:	addgt	r3, r0, r3
   1ed0c:	ble	1ed20 <__assert_fail@plt+0xdbf4>
   1ed10:	ldr	r1, [r3, #-4]!
   1ed14:	cmp	r3, r0
   1ed18:	str	r1, [r2, #-4]!
   1ed1c:	bne	1ed10 <__assert_fail@plt+0xdbe4>
   1ed20:	ldr	r1, [sp, #4]
   1ed24:	cmp	r1, #0
   1ed28:	bne	1ed8c <__assert_fail@plt+0xdc60>
   1ed2c:	cmp	r5, #0
   1ed30:	ldr	r4, [sp, #20]
   1ed34:	beq	1ed60 <__assert_fail@plt+0xdc34>
   1ed38:	cmp	r4, #0
   1ed3c:	ldr	r0, [sp, #24]
   1ed40:	ble	1ed60 <__assert_fail@plt+0xdc34>
   1ed44:	lsl	r3, r4, #2
   1ed48:	add	r1, r5, r3
   1ed4c:	add	r3, r0, r3
   1ed50:	ldr	r2, [r3, #-4]!
   1ed54:	cmp	r3, r0
   1ed58:	str	r2, [r1, #-4]!
   1ed5c:	bne	1ed50 <__assert_fail@plt+0xdc24>
   1ed60:	ldr	r1, [sp, #16]
   1ed64:	cmp	r1, #0
   1ed68:	beq	1ed80 <__assert_fail@plt+0xdc54>
   1ed6c:	ldr	r3, [pc, #108]	; 1ede0 <__assert_fail@plt+0xdcb4>
   1ed70:	lsl	r1, r1, #2
   1ed74:	ldr	r0, [sp, #24]
   1ed78:	ldr	r3, [r3, #8]
   1ed7c:	blx	r3
   1ed80:	mov	r0, r4
   1ed84:	add	sp, sp, #44	; 0x2c
   1ed88:	pop	{r4, r5, r6, r7, pc}
   1ed8c:	ldr	r3, [pc, #76]	; 1ede0 <__assert_fail@plt+0xdcb4>
   1ed90:	lsl	r1, r1, #2
   1ed94:	ldr	r3, [r3, #8]
   1ed98:	blx	r3
   1ed9c:	b	1ed2c <__assert_fail@plt+0xdc00>
   1eda0:	add	r3, r7, #212	; 0xd4
   1eda4:	ldr	r2, [pc, #56]	; 1ede4 <__assert_fail@plt+0xdcb8>
   1eda8:	ldr	r1, [pc, #56]	; 1ede8 <__assert_fail@plt+0xdcbc>
   1edac:	ldr	r0, [pc, #56]	; 1edec <__assert_fail@plt+0xdcc0>
   1edb0:	bl	1112c <__assert_fail@plt>
   1edb4:	ldr	r3, [pc, #52]	; 1edf0 <__assert_fail@plt+0xdcc4>
   1edb8:	ldr	r2, [pc, #52]	; 1edf4 <__assert_fail@plt+0xdcc8>
   1edbc:	ldr	r1, [pc, #36]	; 1ede8 <__assert_fail@plt+0xdcbc>
   1edc0:	ldr	r0, [pc, #48]	; 1edf8 <__assert_fail@plt+0xdccc>
   1edc4:	bl	1112c <__assert_fail@plt>
   1edc8:	ldr	r3, [pc, #32]	; 1edf0 <__assert_fail@plt+0xdcc4>
   1edcc:	ldr	r2, [pc, #40]	; 1edfc <__assert_fail@plt+0xdcd0>
   1edd0:	ldr	r1, [pc, #16]	; 1ede8 <__assert_fail@plt+0xdcbc>
   1edd4:	ldr	r0, [pc, #36]	; 1ee00 <__assert_fail@plt+0xdcd4>
   1edd8:	bl	1112c <__assert_fail@plt>
   1eddc:	andeq	r9, r2, r4, ror #29
   1ede0:	andeq	fp, r3, ip, lsl r1
   1ede4:	strdeq	r0, [r0], -r8
   1ede8:	andeq	sl, r2, r4, rrx
   1edec:	andeq	sl, r2, ip, lsr #8
   1edf0:			; <UNDEFINED> instruction: 0x00029fb8
   1edf4:	strdeq	r0, [r0], -r2
   1edf8:	andeq	sl, r2, ip, lsl r4
   1edfc:	strdeq	r0, [r0], -r1
   1ee00:	andeq	sl, r2, r8, lsr #2
   1ee04:	ldr	r2, [r0, #8]
   1ee08:	ldr	r3, [r0, #4]
   1ee0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee10:	sub	sp, sp, #100	; 0x64
   1ee14:	ldr	r2, [r2]
   1ee18:	cmp	r3, #0
   1ee1c:	moveq	ip, #0
   1ee20:	andne	ip, r2, #1
   1ee24:	cmp	ip, #0
   1ee28:	bne	1ee4c <__assert_fail@plt+0xdd20>
   1ee2c:	eor	r1, r3, r3, asr #31
   1ee30:	sub	r1, r1, r3, asr #31
   1ee34:	cmp	r1, #1
   1ee38:	ble	1efcc <__assert_fail@plt+0xdea0>
   1ee3c:	mov	r5, #0
   1ee40:	mov	r0, r5
   1ee44:	add	sp, sp, #100	; 0x64
   1ee48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee4c:	cmp	r3, #0
   1ee50:	rsblt	r3, r3, #0
   1ee54:	cmp	r3, #1
   1ee58:	beq	1ef90 <__assert_fail@plt+0xde64>
   1ee5c:	mov	r7, r1
   1ee60:	mov	r4, r0
   1ee64:	mov	r1, r0
   1ee68:	ldr	r2, [pc, #1912]	; 1f5e8 <__assert_fail@plt+0xe4bc>
   1ee6c:	mov	r0, #0
   1ee70:	bl	1c610 <__assert_fail@plt+0xb4e4>
   1ee74:	cmp	r0, #1
   1ee78:	bne	1ee3c <__assert_fail@plt+0xdd10>
   1ee7c:	ldr	r3, [r4, #4]
   1ee80:	eor	r2, r3, r3, asr #31
   1ee84:	sub	r2, r2, r3, asr #31
   1ee88:	cmp	r2, #1
   1ee8c:	ble	1f004 <__assert_fail@plt+0xded8>
   1ee90:	ldr	sl, [pc, #1876]	; 1f5ec <__assert_fail@plt+0xe4c0>
   1ee94:	add	fp, sp, #96	; 0x60
   1ee98:	mov	r5, #0
   1ee9c:	add	r0, sp, #24
   1eea0:	mov	r1, r4
   1eea4:	str	sl, [sp, #32]
   1eea8:	str	sl, [sp, #44]	; 0x2c
   1eeac:	str	r5, [sp, #24]
   1eeb0:	str	r5, [sp, #28]
   1eeb4:	str	r5, [sp, #36]	; 0x24
   1eeb8:	str	r5, [sp, #40]	; 0x28
   1eebc:	bl	1a424 <__assert_fail@plt+0x92f8>
   1eec0:	ldr	r1, [fp, #-64]!	; 0xffffffc0
   1eec4:	ldr	r8, [sp, #28]
   1eec8:	mov	r2, r1
   1eecc:	ldr	r3, [r1]
   1eed0:	cmp	r8, #0
   1eed4:	rsblt	r8, r8, #0
   1eed8:	sub	r3, r3, #1
   1eedc:	str	r8, [sp, #28]
   1eee0:	mov	r0, r3
   1eee4:	str	r3, [r1]
   1eee8:	mov	r3, r5
   1eeec:	mov	r1, r5
   1eef0:	str	r5, [sp]
   1eef4:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   1eef8:	mov	r6, #2
   1eefc:	mov	r2, fp
   1ef00:	mov	r1, r8
   1ef04:	str	r6, [sp]
   1ef08:	mov	r3, r0
   1ef0c:	mov	r9, r0
   1ef10:	add	r0, sp, #36	; 0x24
   1ef14:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1ef18:	mov	r1, r6
   1ef1c:	add	r0, sp, #48	; 0x30
   1ef20:	str	r5, [sp, #48]	; 0x30
   1ef24:	str	r5, [sp, #52]	; 0x34
   1ef28:	str	sl, [sp, #56]	; 0x38
   1ef2c:	bl	18388 <__assert_fail@plt+0x725c>
   1ef30:	str	r9, [sp]
   1ef34:	add	r3, sp, #36	; 0x24
   1ef38:	add	r2, sp, #48	; 0x30
   1ef3c:	add	r1, sp, #24
   1ef40:	mov	r0, r4
   1ef44:	bl	1d978 <__assert_fail@plt+0xc84c>
   1ef48:	cmp	r0, r5
   1ef4c:	bne	1f03c <__assert_fail@plt+0xdf10>
   1ef50:	mov	r5, #0
   1ef54:	ldr	r1, [sp, #24]
   1ef58:	cmp	r1, #0
   1ef5c:	bne	1f264 <__assert_fail@plt+0xe138>
   1ef60:	ldr	r1, [sp, #36]	; 0x24
   1ef64:	cmp	r1, #0
   1ef68:	bne	1f24c <__assert_fail@plt+0xe120>
   1ef6c:	ldr	r1, [sp, #48]	; 0x30
   1ef70:	cmp	r1, #0
   1ef74:	beq	1ee40 <__assert_fail@plt+0xdd14>
   1ef78:	ldr	r3, [pc, #1648]	; 1f5f0 <__assert_fail@plt+0xe4c4>
   1ef7c:	lsl	r1, r1, #2
   1ef80:	ldr	r0, [sp, #56]	; 0x38
   1ef84:	ldr	r3, [r3, #8]
   1ef88:	blx	r3
   1ef8c:	b	1ee40 <__assert_fail@plt+0xdd14>
   1ef90:	cmp	r2, #63	; 0x3f
   1ef94:	movhi	r3, #0
   1ef98:	movls	r3, #1
   1ef9c:	cmp	r2, #64	; 0x40
   1efa0:	rsbls	r3, r3, #0
   1efa4:	rsbhi	r3, r3, #1
   1efa8:	cmn	r3, #1
   1efac:	bne	1ee5c <__assert_fail@plt+0xdd30>
   1efb0:	ldr	r5, [pc, #1596]	; 1f5f4 <__assert_fail@plt+0xe4c8>
   1efb4:	lsr	r2, r2, #1
   1efb8:	lsr	r2, r5, r2
   1efbc:	and	r5, r2, #2
   1efc0:	mov	r0, r5
   1efc4:	add	sp, sp, #100	; 0x64
   1efc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efcc:	cmp	r3, #0
   1efd0:	beq	1ee3c <__assert_fail@plt+0xdd10>
   1efd4:	cmp	r2, #2
   1efd8:	movls	r3, #0
   1efdc:	movhi	r3, #1
   1efe0:	cmp	r2, #1
   1efe4:	movhi	r2, #0
   1efe8:	movls	r2, #1
   1efec:	cmp	r3, r2
   1eff0:	bne	1ee3c <__assert_fail@plt+0xdd10>
   1eff4:	mov	r5, #2
   1eff8:	mov	r0, r5
   1effc:	add	sp, sp, #100	; 0x64
   1f000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f004:	cmp	r3, #0
   1f008:	beq	1eff4 <__assert_fail@plt+0xdec8>
   1f00c:	ldr	r3, [r4, #8]
   1f010:	ldr	r1, [pc, #1504]	; 1f5f8 <__assert_fail@plt+0xe4cc>
   1f014:	ldr	r2, [r3]
   1f018:	cmp	r2, #960	; 0x3c0
   1f01c:	movhi	r3, #0
   1f020:	movls	r3, #1
   1f024:	cmp	r2, r1
   1f028:	rsbls	r3, r3, #0
   1f02c:	rsbhi	r3, r3, #1
   1f030:	cmn	r3, #1
   1f034:	beq	1eff4 <__assert_fail@plt+0xdec8>
   1f038:	b	1ee90 <__assert_fail@plt+0xdd64>
   1f03c:	ldr	r2, [r4, #8]
   1f040:	ldr	r3, [r4, #4]
   1f044:	str	r5, [sp, #72]	; 0x48
   1f048:	ldr	r5, [r2]
   1f04c:	str	r2, [sp, #80]	; 0x50
   1f050:	cmp	r3, #0
   1f054:	moveq	r5, #0
   1f058:	andne	r5, r5, #1
   1f05c:	cmp	r3, #0
   1f060:	rsblt	r3, r3, #0
   1f064:	cmp	r5, #0
   1f068:	str	r3, [sp, #76]	; 0x4c
   1f06c:	beq	1f56c <__assert_fail@plt+0xe440>
   1f070:	mov	r2, r6
   1f074:	add	r1, sp, #72	; 0x48
   1f078:	add	r0, sp, #48	; 0x30
   1f07c:	bl	1eb48 <__assert_fail@plt+0xda1c>
   1f080:	subs	r6, r0, #0
   1f084:	bne	1ef50 <__assert_fail@plt+0xde24>
   1f088:	ldr	r3, [sp, #52]	; 0x34
   1f08c:	cmp	r3, #1
   1f090:	mvnne	fp, #0
   1f094:	beq	1f4fc <__assert_fail@plt+0xe3d0>
   1f098:	mov	r8, #3
   1f09c:	mov	r3, #2
   1f0a0:	mov	r1, #0
   1f0a4:	add	r8, r8, #2
   1f0a8:	str	r3, [sp]
   1f0ac:	add	r2, sp, #72	; 0x48
   1f0b0:	mov	r3, r8
   1f0b4:	mov	r0, r1
   1f0b8:	bl	1b660 <__assert_fail@plt+0xa534>
   1f0bc:	cmp	r0, #0
   1f0c0:	beq	1ef50 <__assert_fail@plt+0xde24>
   1f0c4:	rsb	r3, r0, #0
   1f0c8:	and	r3, r3, r0
   1f0cc:	ands	r2, r3, #-16777216	; 0xff000000
   1f0d0:	lsr	r1, r8, #1
   1f0d4:	bne	1f27c <__assert_fail@plt+0xe150>
   1f0d8:	lsl	r3, r3, #8
   1f0dc:	tst	r3, #-16777216	; 0xff000000
   1f0e0:	add	r2, r2, #8
   1f0e4:	beq	1f0d8 <__assert_fail@plt+0xdfac>
   1f0e8:	cmp	r3, #0
   1f0ec:	blt	1f0fc <__assert_fail@plt+0xdfd0>
   1f0f0:	lsls	r3, r3, #1
   1f0f4:	add	r2, r2, #1
   1f0f8:	bpl	1f0f0 <__assert_fail@plt+0xdfc4>
   1f0fc:	rsb	r2, r2, #31
   1f100:	lsr	r0, r0, #1
   1f104:	mov	lr, r6
   1f108:	lsr	ip, r1, #1
   1f10c:	lsr	r3, r0, r2
   1f110:	eor	r0, ip, r1
   1f114:	and	r2, r2, r0
   1f118:	cmp	r3, r1
   1f11c:	eor	lr, lr, r2
   1f120:	bcs	1f17c <__assert_fail@plt+0xe050>
   1f124:	cmp	r3, #0
   1f128:	beq	1f1a0 <__assert_fail@plt+0xe074>
   1f12c:	and	r2, r3, r1
   1f130:	sub	r0, r1, r3
   1f134:	eor	lr, lr, r2
   1f138:	mov	r1, r3
   1f13c:	lsr	ip, r3, #1
   1f140:	rsb	r3, r0, #0
   1f144:	and	r3, r3, r0
   1f148:	ands	r2, r3, #-16777216	; 0xff000000
   1f14c:	bne	1f198 <__assert_fail@plt+0xe06c>
   1f150:	lsl	r3, r3, #8
   1f154:	tst	r3, #-16777216	; 0xff000000
   1f158:	add	r2, r2, #8
   1f15c:	beq	1f150 <__assert_fail@plt+0xe024>
   1f160:	cmp	r3, #0
   1f164:	blt	1f174 <__assert_fail@plt+0xe048>
   1f168:	lsls	r3, r3, #1
   1f16c:	add	r2, r2, #1
   1f170:	bpl	1f168 <__assert_fail@plt+0xe03c>
   1f174:	rsb	r2, r2, #32
   1f178:	b	1f10c <__assert_fail@plt+0xdfe0>
   1f17c:	subs	r0, r3, r1
   1f180:	bne	1f140 <__assert_fail@plt+0xe014>
   1f184:	ldr	r3, [pc, #1136]	; 1f5fc <__assert_fail@plt+0xe4d0>
   1f188:	ldr	r2, [pc, #1136]	; 1f600 <__assert_fail@plt+0xe4d4>
   1f18c:	ldr	r1, [pc, #1136]	; 1f604 <__assert_fail@plt+0xe4d8>
   1f190:	ldr	r0, [pc, #1136]	; 1f608 <__assert_fail@plt+0xe4dc>
   1f194:	bl	1112c <__assert_fail@plt>
   1f198:	mov	r2, #0
   1f19c:	b	1f160 <__assert_fail@plt+0xe034>
   1f1a0:	tst	lr, #1
   1f1a4:	bne	1f284 <__assert_fail@plt+0xe158>
   1f1a8:	cmp	r8, fp
   1f1ac:	bcc	1f09c <__assert_fail@plt+0xdf70>
   1f1b0:	sub	r7, r7, #24
   1f1b4:	cmp	r7, #0
   1f1b8:	movle	r8, #0
   1f1bc:	movgt	r8, #1
   1f1c0:	cmp	r8, #0
   1f1c4:	bne	1f214 <__assert_fail@plt+0xe0e8>
   1f1c8:	b	1ef54 <__assert_fail@plt+0xde28>
   1f1cc:	add	r1, sp, #24
   1f1d0:	add	r0, sp, #48	; 0x30
   1f1d4:	bl	1abcc <__assert_fail@plt+0x9aa0>
   1f1d8:	cmp	r0, #0
   1f1dc:	bge	1f230 <__assert_fail@plt+0xe104>
   1f1e0:	add	r3, sp, #36	; 0x24
   1f1e4:	str	r9, [sp]
   1f1e8:	add	r2, sp, #48	; 0x30
   1f1ec:	add	r1, sp, #24
   1f1f0:	mov	r0, r4
   1f1f4:	bl	1d978 <__assert_fail@plt+0xc84c>
   1f1f8:	add	r6, r6, #1
   1f1fc:	cmp	r6, r7
   1f200:	movge	r3, #0
   1f204:	andlt	r3, r0, #1
   1f208:	cmp	r3, #0
   1f20c:	mov	r5, r0
   1f210:	beq	1ef54 <__assert_fail@plt+0xde28>
   1f214:	add	r3, r6, #41	; 0x29
   1f218:	mlas	r1, r6, r6, r3
   1f21c:	streq	r1, [sp, #52]	; 0x34
   1f220:	beq	1f1cc <__assert_fail@plt+0xe0a0>
   1f224:	add	r0, sp, #48	; 0x30
   1f228:	bl	18388 <__assert_fail@plt+0x725c>
   1f22c:	b	1f1cc <__assert_fail@plt+0xe0a0>
   1f230:	cmp	r6, #29
   1f234:	bgt	1ef54 <__assert_fail@plt+0xde28>
   1f238:	ldr	r3, [pc, #972]	; 1f60c <__assert_fail@plt+0xe4e0>
   1f23c:	ldr	r2, [pc, #972]	; 1f610 <__assert_fail@plt+0xe4e4>
   1f240:	ldr	r1, [pc, #956]	; 1f604 <__assert_fail@plt+0xe4d8>
   1f244:	ldr	r0, [pc, #968]	; 1f614 <__assert_fail@plt+0xe4e8>
   1f248:	bl	1112c <__assert_fail@plt>
   1f24c:	ldr	r3, [pc, #924]	; 1f5f0 <__assert_fail@plt+0xe4c4>
   1f250:	lsl	r1, r1, #2
   1f254:	ldr	r0, [sp, #44]	; 0x2c
   1f258:	ldr	r3, [r3, #8]
   1f25c:	blx	r3
   1f260:	b	1ef6c <__assert_fail@plt+0xde40>
   1f264:	ldr	r3, [pc, #900]	; 1f5f0 <__assert_fail@plt+0xe4c4>
   1f268:	lsl	r1, r1, #2
   1f26c:	ldr	r0, [sp, #32]
   1f270:	ldr	r3, [r3, #8]
   1f274:	blx	r3
   1f278:	b	1ef60 <__assert_fail@plt+0xde34>
   1f27c:	mov	r2, #0
   1f280:	b	1f0e8 <__assert_fail@plt+0xdfbc>
   1f284:	ldr	r2, [sp, #80]	; 0x50
   1f288:	ldr	fp, [sp, #76]	; 0x4c
   1f28c:	mov	ip, r3
   1f290:	ldr	r5, [r2]
   1f294:	mvn	r3, #0
   1f298:	str	r3, [sp]
   1f29c:	mov	r1, ip
   1f2a0:	mvn	r0, r5
   1f2a4:	mov	r3, fp
   1f2a8:	str	ip, [sp, #60]	; 0x3c
   1f2ac:	str	ip, [sp, #64]	; 0x40
   1f2b0:	str	sl, [sp, #68]	; 0x44
   1f2b4:	bl	17dd0 <__assert_fail@plt+0x6ca4>
   1f2b8:	tst	r8, #2
   1f2bc:	lsrne	r8, r8, #2
   1f2c0:	addne	r8, r8, #1
   1f2c4:	str	r0, [sp, #12]
   1f2c8:	beq	1f548 <__assert_fail@plt+0xe41c>
   1f2cc:	ldr	r3, [sp, #12]
   1f2d0:	cmp	r3, #0
   1f2d4:	beq	1f5d4 <__assert_fail@plt+0xe4a8>
   1f2d8:	cmp	fp, #0
   1f2dc:	blt	1f59c <__assert_fail@plt+0xe470>
   1f2e0:	cmp	fp, #1
   1f2e4:	ble	1f594 <__assert_fail@plt+0xe468>
   1f2e8:	cmp	fp, #0
   1f2ec:	moveq	r5, #0
   1f2f0:	andne	r5, r5, #1
   1f2f4:	cmp	r5, #0
   1f2f8:	beq	1f580 <__assert_fail@plt+0xe454>
   1f2fc:	add	r0, sp, #84	; 0x54
   1f300:	mov	fp, #0
   1f304:	mov	r1, #1
   1f308:	str	sl, [sp, #92]	; 0x5c
   1f30c:	str	fp, [sp, #84]	; 0x54
   1f310:	str	fp, [sp, #88]	; 0x58
   1f314:	bl	18388 <__assert_fail@plt+0x725c>
   1f318:	add	r0, sp, #60	; 0x3c
   1f31c:	mov	r1, #1
   1f320:	bl	18388 <__assert_fail@plt+0x725c>
   1f324:	mov	r1, r8
   1f328:	add	r0, sp, #48	; 0x30
   1f32c:	bl	1a3c0 <__assert_fail@plt+0x9294>
   1f330:	mov	r1, #2
   1f334:	add	r0, sp, #72	; 0x48
   1f338:	bl	1e5f4 <__assert_fail@plt+0xd4c8>
   1f33c:	ldr	r3, [sp, #12]
   1f340:	sub	sl, r0, #2
   1f344:	cmp	r3, sl
   1f348:	bhi	1f498 <__assert_fail@plt+0xe36c>
   1f34c:	rsb	r3, r8, r8, lsl #31
   1f350:	str	fp, [sp, #16]
   1f354:	mov	fp, #2
   1f358:	lsl	r3, r3, #1
   1f35c:	str	r3, [sp, #20]
   1f360:	add	r1, sp, #84	; 0x54
   1f364:	mov	r0, r1
   1f368:	add	r2, sp, #60	; 0x3c
   1f36c:	bl	1b774 <__assert_fail@plt+0xa648>
   1f370:	add	r2, sp, #72	; 0x48
   1f374:	add	r1, sp, #48	; 0x30
   1f378:	add	r0, sp, #60	; 0x3c
   1f37c:	bl	1bb40 <__assert_fail@plt+0xaa14>
   1f380:	ldr	r3, [sp, #12]
   1f384:	cmp	r3, sl
   1f388:	beq	1f3a0 <__assert_fail@plt+0xe274>
   1f38c:	mov	r1, sl
   1f390:	add	r0, sp, #72	; 0x48
   1f394:	bl	1caf0 <__assert_fail@plt+0xb9c4>
   1f398:	cmp	r0, #0
   1f39c:	beq	1f470 <__assert_fail@plt+0xe344>
   1f3a0:	add	r1, sp, #48	; 0x30
   1f3a4:	mov	r0, r1
   1f3a8:	mov	r2, r8
   1f3ac:	bl	1b8f0 <__assert_fail@plt+0xa7c4>
   1f3b0:	ldr	r0, [sp, #88]	; 0x58
   1f3b4:	ldr	r3, [sp, #64]	; 0x40
   1f3b8:	ldr	r1, [sp, #60]	; 0x3c
   1f3bc:	ldr	r2, [sp, #84]	; 0x54
   1f3c0:	str	r0, [sp, #64]	; 0x40
   1f3c4:	ldr	r0, [sp, #92]	; 0x5c
   1f3c8:	str	r3, [sp, #88]	; 0x58
   1f3cc:	str	r1, [sp, #84]	; 0x54
   1f3d0:	ldr	r3, [sp, #68]	; 0x44
   1f3d4:	add	r1, sp, #84	; 0x54
   1f3d8:	str	r2, [sp, #60]	; 0x3c
   1f3dc:	str	r0, [sp, #68]	; 0x44
   1f3e0:	add	r2, sp, #60	; 0x3c
   1f3e4:	mov	r0, r1
   1f3e8:	str	r3, [sp, #92]	; 0x5c
   1f3ec:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1f3f0:	ldr	r3, [sp, #92]	; 0x5c
   1f3f4:	ldr	r1, [sp, #88]	; 0x58
   1f3f8:	ldr	r3, [r3]
   1f3fc:	cmp	r1, #0
   1f400:	moveq	r3, #0
   1f404:	andne	r3, r3, #1
   1f408:	cmp	r3, #0
   1f40c:	beq	1f424 <__assert_fail@plt+0xe2f8>
   1f410:	add	r1, sp, #84	; 0x54
   1f414:	mov	r0, r1
   1f418:	add	r2, sp, #72	; 0x48
   1f41c:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1f420:	ldr	r1, [sp, #88]	; 0x58
   1f424:	mov	r3, #1
   1f428:	add	r2, sp, #92	; 0x5c
   1f42c:	add	r0, sp, #84	; 0x54
   1f430:	str	fp, [sp]
   1f434:	bl	1aee0 <__assert_fail@plt+0x9db4>
   1f438:	add	r1, sp, #60	; 0x3c
   1f43c:	mov	r0, r1
   1f440:	ldr	r2, [sp, #20]
   1f444:	bl	1b8f0 <__assert_fail@plt+0xa7c4>
   1f448:	add	r2, sp, #60	; 0x3c
   1f44c:	mov	r0, r2
   1f450:	add	r1, sp, #84	; 0x54
   1f454:	bl	1ada4 <__assert_fail@plt+0x9c78>
   1f458:	add	r2, sp, #60	; 0x3c
   1f45c:	str	fp, [sp]
   1f460:	add	r3, sp, #72	; 0x48
   1f464:	mov	r1, r2
   1f468:	ldr	r0, [sp, #16]
   1f46c:	bl	1b168 <__assert_fail@plt+0xa03c>
   1f470:	add	r2, sp, #84	; 0x54
   1f474:	add	r3, sp, #72	; 0x48
   1f478:	str	fp, [sp]
   1f47c:	mov	r1, r2
   1f480:	ldr	r0, [sp, #16]
   1f484:	bl	1b168 <__assert_fail@plt+0xa03c>
   1f488:	ldr	r3, [sp, #12]
   1f48c:	sub	sl, sl, #1
   1f490:	cmp	r3, sl
   1f494:	bls	1f360 <__assert_fail@plt+0xe234>
   1f498:	ldr	r1, [sp, #84]	; 0x54
   1f49c:	ldr	r8, [sp, #88]	; 0x58
   1f4a0:	cmp	r1, #0
   1f4a4:	bne	1f554 <__assert_fail@plt+0xe428>
   1f4a8:	cmp	r8, #0
   1f4ac:	beq	1f514 <__assert_fail@plt+0xe3e8>
   1f4b0:	ldr	r3, [sp, #64]	; 0x40
   1f4b4:	cmp	r3, #0
   1f4b8:	beq	1f514 <__assert_fail@plt+0xe3e8>
   1f4bc:	ldr	r3, [sp, #12]
   1f4c0:	subs	r8, r3, #1
   1f4c4:	beq	1f4ec <__assert_fail@plt+0xe3c0>
   1f4c8:	add	r2, sp, #72	; 0x48
   1f4cc:	add	r1, sp, #48	; 0x30
   1f4d0:	add	r0, sp, #60	; 0x3c
   1f4d4:	bl	1bb40 <__assert_fail@plt+0xaa14>
   1f4d8:	ldr	r3, [sp, #64]	; 0x40
   1f4dc:	cmp	r3, #0
   1f4e0:	beq	1f514 <__assert_fail@plt+0xe3e8>
   1f4e4:	subs	r8, r8, #1
   1f4e8:	bne	1f4c8 <__assert_fail@plt+0xe39c>
   1f4ec:	sub	r7, r7, #24
   1f4f0:	mov	r8, r6
   1f4f4:	mov	r5, r6
   1f4f8:	b	1f524 <__assert_fail@plt+0xe3f8>
   1f4fc:	ldr	r3, [sp, #56]	; 0x38
   1f500:	ldr	fp, [r3]
   1f504:	sub	fp, fp, #1
   1f508:	cmp	fp, #3
   1f50c:	bhi	1f098 <__assert_fail@plt+0xdf6c>
   1f510:	b	1f1b0 <__assert_fail@plt+0xe084>
   1f514:	sub	r7, r7, #24
   1f518:	cmp	r7, #0
   1f51c:	movle	r8, #0
   1f520:	movgt	r8, #1
   1f524:	ldr	r1, [sp, #60]	; 0x3c
   1f528:	cmp	r1, #0
   1f52c:	beq	1f1c0 <__assert_fail@plt+0xe094>
   1f530:	ldr	r3, [pc, #184]	; 1f5f0 <__assert_fail@plt+0xe4c4>
   1f534:	lsl	r1, r1, #2
   1f538:	ldr	r0, [sp, #68]	; 0x44
   1f53c:	ldr	r3, [r3, #8]
   1f540:	blx	r3
   1f544:	b	1f1c0 <__assert_fail@plt+0xe094>
   1f548:	lsr	r8, r8, #2
   1f54c:	rsb	r8, r8, #0
   1f550:	b	1f2cc <__assert_fail@plt+0xe1a0>
   1f554:	ldr	r3, [pc, #148]	; 1f5f0 <__assert_fail@plt+0xe4c4>
   1f558:	lsl	r1, r1, #2
   1f55c:	ldr	r0, [sp, #92]	; 0x5c
   1f560:	ldr	r3, [r3, #8]
   1f564:	blx	r3
   1f568:	b	1f4a8 <__assert_fail@plt+0xe37c>
   1f56c:	add	r3, sl, #224	; 0xe0
   1f570:	mov	r2, #3504	; 0xdb0
   1f574:	ldr	r1, [pc, #136]	; 1f604 <__assert_fail@plt+0xe4d8>
   1f578:	ldr	r0, [pc, #152]	; 1f618 <__assert_fail@plt+0xe4ec>
   1f57c:	bl	1112c <__assert_fail@plt>
   1f580:	ldr	r3, [pc, #148]	; 1f61c <__assert_fail@plt+0xe4f0>
   1f584:	ldr	r2, [pc, #148]	; 1f620 <__assert_fail@plt+0xe4f4>
   1f588:	ldr	r1, [pc, #116]	; 1f604 <__assert_fail@plt+0xe4d8>
   1f58c:	ldr	r0, [pc, #132]	; 1f618 <__assert_fail@plt+0xe4ec>
   1f590:	bl	1112c <__assert_fail@plt>
   1f594:	cmp	fp, #0
   1f598:	bne	1f5b0 <__assert_fail@plt+0xe484>
   1f59c:	ldr	r3, [pc, #120]	; 1f61c <__assert_fail@plt+0xe4f0>
   1f5a0:	ldr	r2, [pc, #124]	; 1f624 <__assert_fail@plt+0xe4f8>
   1f5a4:	ldr	r1, [pc, #88]	; 1f604 <__assert_fail@plt+0xe4d8>
   1f5a8:	ldr	r0, [pc, #120]	; 1f628 <__assert_fail@plt+0xe4fc>
   1f5ac:	bl	1112c <__assert_fail@plt>
   1f5b0:	cmp	r5, #3
   1f5b4:	movhi	r3, #0
   1f5b8:	movls	r3, #1
   1f5bc:	cmp	r5, #4
   1f5c0:	rsbls	r3, r3, #0
   1f5c4:	rsbhi	r3, r3, #1
   1f5c8:	cmp	r3, #1
   1f5cc:	beq	1f2e8 <__assert_fail@plt+0xe1bc>
   1f5d0:	b	1f59c <__assert_fail@plt+0xe470>
   1f5d4:	ldr	r3, [pc, #64]	; 1f61c <__assert_fail@plt+0xe4f0>
   1f5d8:	ldr	r2, [pc, #76]	; 1f62c <__assert_fail@plt+0xe500>
   1f5dc:	ldr	r1, [pc, #32]	; 1f604 <__assert_fail@plt+0xe4d8>
   1f5e0:	ldr	r0, [pc, #72]	; 1f630 <__assert_fail@plt+0xe504>
   1f5e4:	bl	1112c <__assert_fail@plt>
   1f5e8:	smullgt	sp, pc, r7, r7	; <UNPREDICTABLE>
   1f5ec:	andeq	r9, r2, r4, ror #29
   1f5f0:	andeq	fp, r3, ip, lsl r1
   1f5f4:	stmdbgt	r9!, {r2, r3, r4, r6, r7, r9, sl, ip, pc}^
   1f5f8:	andeq	r0, r0, r1, asr #7
   1f5fc:	ldrdeq	r9, [r2], -r4
   1f600:	andeq	r0, r0, r2, asr sp
   1f604:	andeq	sl, r2, r4, rrx
   1f608:	andeq	sl, r2, r4, asr r4
   1f60c:	strdeq	r9, [r2], -r8
   1f610:	andeq	r0, r0, sp, lsr #28
   1f614:	andeq	sl, r2, ip, ror r4
   1f618:	andeq	sl, r2, r4, asr #8
   1f61c:	andeq	r9, r2, r8, ror #31
   1f620:	andeq	r0, r0, r6, ror sp
   1f624:	andeq	r0, r0, r5, ror sp
   1f628:	andeq	sl, r2, r4, ror #8
   1f62c:	andeq	r0, r0, r2, ror sp
   1f630:	andeq	sl, r2, ip, asr r4
   1f634:	cmp	r1, #1
   1f638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f63c:	mov	fp, r1
   1f640:	sub	sp, sp, #28
   1f644:	mov	r5, r0
   1f648:	mov	r8, r2
   1f64c:	ble	1f7d8 <__assert_fail@plt+0xe6ac>
   1f650:	cmp	r1, #36	; 0x24
   1f654:	ble	1f6d4 <__assert_fail@plt+0xe5a8>
   1f658:	cmp	r1, #62	; 0x3e
   1f65c:	bgt	1f834 <__assert_fail@plt+0xe708>
   1f660:	ldr	r6, [pc, #520]	; 1f870 <__assert_fail@plt+0xe744>
   1f664:	mov	r1, fp
   1f668:	mov	r0, r8
   1f66c:	bl	1e5f4 <__assert_fail@plt+0xd4c8>
   1f670:	cmp	r5, #0
   1f674:	movne	r7, #0
   1f678:	beq	1f818 <__assert_fail@plt+0xe6ec>
   1f67c:	ldr	r2, [r8, #4]
   1f680:	cmp	r2, #0
   1f684:	bne	1f6dc <__assert_fail@plt+0xe5b0>
   1f688:	mov	r8, #1
   1f68c:	mov	r3, #48	; 0x30
   1f690:	strb	r3, [r5]
   1f694:	mov	r3, #0
   1f698:	cmp	r7, #0
   1f69c:	strb	r3, [r5, r8]
   1f6a0:	beq	1f6c8 <__assert_fail@plt+0xe59c>
   1f6a4:	add	r2, r8, #1
   1f6a8:	cmp	r7, r2
   1f6ac:	beq	1f6c8 <__assert_fail@plt+0xe59c>
   1f6b0:	ldr	r3, [pc, #444]	; 1f874 <__assert_fail@plt+0xe748>
   1f6b4:	mov	r0, r5
   1f6b8:	mov	r1, r7
   1f6bc:	ldr	r3, [r3]
   1f6c0:	blx	r3
   1f6c4:	mov	r5, r0
   1f6c8:	mov	r0, r5
   1f6cc:	add	sp, sp, #28
   1f6d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6d4:	ldr	r6, [pc, #412]	; 1f878 <__assert_fail@plt+0xe74c>
   1f6d8:	b	1f664 <__assert_fail@plt+0xe538>
   1f6dc:	movlt	r1, #45	; 0x2d
   1f6e0:	strblt	r1, [r5]
   1f6e4:	movlt	r9, #1
   1f6e8:	movge	r9, #0
   1f6ec:	cmp	r2, #0
   1f6f0:	rsblt	r2, r2, #0
   1f6f4:	mov	r0, fp
   1f6f8:	str	r2, [sp, #8]
   1f6fc:	bl	17c80 <__assert_fail@plt+0x6b54>
   1f700:	subs	r1, r0, #0
   1f704:	bne	1f7fc <__assert_fail@plt+0xe6d0>
   1f708:	mov	r1, fp
   1f70c:	mvn	r0, #0
   1f710:	bl	26120 <__assert_fail@plt+0x14ff4>
   1f714:	cmp	fp, r0
   1f718:	bhi	1f83c <__assert_fail@plt+0xe710>
   1f71c:	mov	r2, fp
   1f720:	mov	r1, #1
   1f724:	mul	r2, fp, r2
   1f728:	add	r1, r1, #1
   1f72c:	cmp	r0, r2
   1f730:	bcs	1f724 <__assert_fail@plt+0xe5f8>
   1f734:	ldr	r3, [sp, #8]
   1f738:	ldr	sl, [pc, #308]	; 1f874 <__assert_fail@plt+0xe748>
   1f73c:	str	r2, [sp, #20]
   1f740:	lsl	r3, r3, #2
   1f744:	ldr	r2, [sl, #4]
   1f748:	str	r3, [sp, #12]
   1f74c:	str	r1, [sp, #16]
   1f750:	mov	r0, r3
   1f754:	blx	r2
   1f758:	ldr	r2, [r8, #8]
   1f75c:	mov	lr, r0
   1f760:	ldr	r3, [sp, #12]
   1f764:	sub	r1, lr, #4
   1f768:	add	ip, r2, r3
   1f76c:	ldr	r0, [r2], #4
   1f770:	cmp	r2, ip
   1f774:	str	r0, [r1, #4]!
   1f778:	bne	1f76c <__assert_fail@plt+0xe640>
   1f77c:	ldr	r3, [sp, #8]
   1f780:	add	r4, r5, r9
   1f784:	mov	r1, fp
   1f788:	str	r3, [sp]
   1f78c:	mov	r0, r4
   1f790:	mov	r3, lr
   1f794:	add	r2, sp, #16
   1f798:	mov	fp, lr
   1f79c:	bl	19f40 <__assert_fail@plt+0x8e14>
   1f7a0:	ldr	r3, [sl, #8]
   1f7a4:	ldr	r1, [sp, #12]
   1f7a8:	add	r8, r9, r0
   1f7ac:	mov	r0, fp
   1f7b0:	blx	r3
   1f7b4:	cmp	r8, r9
   1f7b8:	addhi	r2, r5, r8
   1f7bc:	bls	1f694 <__assert_fail@plt+0xe568>
   1f7c0:	ldrb	r3, [r4]
   1f7c4:	ldrb	r3, [r6, r3]
   1f7c8:	strb	r3, [r4], #1
   1f7cc:	cmp	r2, r4
   1f7d0:	bne	1f7c0 <__assert_fail@plt+0xe694>
   1f7d4:	b	1f694 <__assert_fail@plt+0xe568>
   1f7d8:	cmn	r1, #1
   1f7dc:	ldrge	r6, [pc, #140]	; 1f870 <__assert_fail@plt+0xe744>
   1f7e0:	movge	fp, #10
   1f7e4:	bge	1f664 <__assert_fail@plt+0xe538>
   1f7e8:	cmn	r1, #36	; 0x24
   1f7ec:	rsb	r3, r1, #0
   1f7f0:	blt	1f834 <__assert_fail@plt+0xe708>
   1f7f4:	mov	fp, r3
   1f7f8:	b	1f660 <__assert_fail@plt+0xe534>
   1f7fc:	add	r4, r5, r9
   1f800:	ldr	r2, [r8, #8]
   1f804:	ldr	r3, [sp, #8]
   1f808:	mov	r0, r4
   1f80c:	bl	180b0 <__assert_fail@plt+0x6f84>
   1f810:	add	r8, r9, r0
   1f814:	b	1f7b4 <__assert_fail@plt+0xe688>
   1f818:	ldr	r2, [pc, #84]	; 1f874 <__assert_fail@plt+0xe748>
   1f81c:	add	r7, r0, #2
   1f820:	mov	r0, r7
   1f824:	ldr	r2, [r2, #4]
   1f828:	blx	r2
   1f82c:	mov	r5, r0
   1f830:	b	1f67c <__assert_fail@plt+0xe550>
   1f834:	mov	r5, #0
   1f838:	b	1f6c8 <__assert_fail@plt+0xe59c>
   1f83c:	ldr	r3, [sp, #8]
   1f840:	ldr	sl, [pc, #44]	; 1f874 <__assert_fail@plt+0xe748>
   1f844:	mov	r1, #1
   1f848:	lsl	r3, r3, #2
   1f84c:	ldr	r2, [sl, #4]
   1f850:	str	r3, [sp, #12]
   1f854:	str	fp, [sp, #20]
   1f858:	str	r1, [sp, #16]
   1f85c:	mov	r0, r3
   1f860:	blx	r2
   1f864:	ldr	r2, [r8, #8]
   1f868:	mov	lr, r0
   1f86c:	b	1f760 <__assert_fail@plt+0xe634>
   1f870:	andeq	sl, r2, r4, lsl #9
   1f874:	andeq	fp, r3, ip, lsl r1
   1f878:	andeq	sl, r2, r4, asr #9
   1f87c:	sub	r3, r2, #2
   1f880:	cmp	r2, #0
   1f884:	cmpne	r3, #60	; 0x3c
   1f888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f88c:	sub	sp, sp, #28
   1f890:	bhi	1fb64 <__assert_fail@plt+0xea38>
   1f894:	mov	r4, r1
   1f898:	mov	sl, r2
   1f89c:	mov	r8, r0
   1f8a0:	bl	10fe8 <__ctype_b_loc@plt>
   1f8a4:	mov	r1, r4
   1f8a8:	ldr	ip, [r0]
   1f8ac:	mov	r7, r0
   1f8b0:	mov	r0, r1
   1f8b4:	ldrb	r4, [r1], #1
   1f8b8:	lsl	r3, r4, #1
   1f8bc:	ldrh	r3, [ip, r3]
   1f8c0:	tst	r3, #8192	; 0x2000
   1f8c4:	bne	1f8b0 <__assert_fail@plt+0xe784>
   1f8c8:	sub	r3, r4, #45	; 0x2d
   1f8cc:	clz	r3, r3
   1f8d0:	lsr	r3, r3, #5
   1f8d4:	cmp	sl, #0
   1f8d8:	add	fp, r0, r3
   1f8dc:	ldrb	r3, [r0, r3]
   1f8e0:	bne	1f91c <__assert_fail@plt+0xe7f0>
   1f8e4:	cmp	r3, #48	; 0x30
   1f8e8:	movne	sl, #10
   1f8ec:	beq	1faf0 <__assert_fail@plt+0xe9c4>
   1f8f0:	cmp	r3, #0
   1f8f4:	beq	1f9b4 <__assert_fail@plt+0xe888>
   1f8f8:	mov	r0, fp
   1f8fc:	bl	1100c <strlen@plt>
   1f900:	ldr	r9, [pc, #644]	; 1fb8c <__assert_fail@plt+0xea60>
   1f904:	ldr	r3, [r9, #4]
   1f908:	str	r0, [sp, #12]
   1f90c:	blx	r3
   1f910:	mov	r6, r0
   1f914:	mov	r0, #10
   1f918:	b	1f94c <__assert_fail@plt+0xe820>
   1f91c:	cmp	r3, #0
   1f920:	beq	1f9b4 <__assert_fail@plt+0xe888>
   1f924:	mov	r0, fp
   1f928:	bl	1100c <strlen@plt>
   1f92c:	ldr	r9, [pc, #600]	; 1fb8c <__assert_fail@plt+0xea60>
   1f930:	ldr	r3, [r9, #4]
   1f934:	str	r0, [sp, #12]
   1f938:	blx	r3
   1f93c:	cmp	sl, #36	; 0x24
   1f940:	mov	r6, r0
   1f944:	movle	r0, #10
   1f948:	movgt	r0, #36	; 0x24
   1f94c:	ldrb	r1, [fp]
   1f950:	cmp	r1, #0
   1f954:	beq	1f9a4 <__assert_fail@plt+0xe878>
   1f958:	sub	r0, r0, #97	; 0x61
   1f95c:	mov	r5, #0
   1f960:	ldr	ip, [r7]
   1f964:	lsl	r3, r1, #1
   1f968:	ldrh	r3, [ip, r3]
   1f96c:	tst	r3, #8192	; 0x2000
   1f970:	bne	1f9dc <__assert_fail@plt+0xe8b0>
   1f974:	sub	r3, r1, #48	; 0x30
   1f978:	uxtb	ip, r3
   1f97c:	cmp	ip, #9
   1f980:	movls	r1, r3
   1f984:	bls	1f9cc <__assert_fail@plt+0xe8a0>
   1f988:	sub	r3, r1, #97	; 0x61
   1f98c:	cmp	r3, #25
   1f990:	addls	r1, r0, r1
   1f994:	bls	1f9cc <__assert_fail@plt+0xe8a0>
   1f998:	sub	r3, r1, #65	; 0x41
   1f99c:	cmp	r3, #25
   1f9a0:	bls	1f9c8 <__assert_fail@plt+0xe89c>
   1f9a4:	ldr	r3, [r9, #8]
   1f9a8:	ldr	r1, [sp, #12]
   1f9ac:	mov	r0, r6
   1f9b0:	blx	r3
   1f9b4:	mov	r3, #0
   1f9b8:	mvn	r0, #0
   1f9bc:	str	r3, [r8, #4]
   1f9c0:	add	sp, sp, #28
   1f9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f9c8:	sub	r1, r1, #55	; 0x37
   1f9cc:	cmp	r1, sl
   1f9d0:	bcs	1f9a4 <__assert_fail@plt+0xe878>
   1f9d4:	strb	r1, [r6, r5]
   1f9d8:	add	r5, r5, #1
   1f9dc:	ldrb	r1, [fp, #1]!
   1f9e0:	cmp	r1, #0
   1f9e4:	bne	1f960 <__assert_fail@plt+0xe834>
   1f9e8:	cmp	r5, #0
   1f9ec:	beq	1f9a4 <__assert_fail@plt+0xe878>
   1f9f0:	mov	r0, sl
   1f9f4:	bl	17c80 <__assert_fail@plt+0x6b54>
   1f9f8:	subs	fp, r0, #0
   1f9fc:	beq	1fa60 <__assert_fail@plt+0xe934>
   1fa00:	mul	r7, fp, r5
   1fa04:	ldr	r3, [r8]
   1fa08:	add	r7, r7, #31
   1fa0c:	lsr	r7, r7, #5
   1fa10:	cmp	r7, r3
   1fa14:	ldrle	r0, [r8, #8]
   1fa18:	bgt	1fb24 <__assert_fail@plt+0xe9f8>
   1fa1c:	mov	r2, r5
   1fa20:	mov	r3, fp
   1fa24:	mov	r1, r6
   1fa28:	bl	17d10 <__assert_fail@plt+0x6be4>
   1fa2c:	mov	r5, r0
   1fa30:	cmp	r5, r7
   1fa34:	bgt	1fb50 <__assert_fail@plt+0xea24>
   1fa38:	mov	r0, r6
   1fa3c:	ldr	r3, [r9, #8]
   1fa40:	ldr	r1, [sp, #12]
   1fa44:	blx	r3
   1fa48:	cmp	r4, #45	; 0x2d
   1fa4c:	rsbeq	r5, r5, #0
   1fa50:	mov	r0, #0
   1fa54:	str	r5, [r8, #4]
   1fa58:	add	sp, sp, #28
   1fa5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa60:	mov	r1, sl
   1fa64:	mvn	r0, #0
   1fa68:	bl	26120 <__assert_fail@plt+0x14ff4>
   1fa6c:	mov	r3, sl
   1fa70:	mov	r1, #1
   1fa74:	cmp	sl, r0
   1fa78:	bhi	1fa8c <__assert_fail@plt+0xe960>
   1fa7c:	mul	r3, sl, r3
   1fa80:	add	r1, r1, #1
   1fa84:	cmp	r0, r3
   1fa88:	bcs	1fa7c <__assert_fail@plt+0xe950>
   1fa8c:	sub	r0, r5, #1
   1fa90:	add	r0, r0, r1
   1fa94:	str	r3, [sp, #20]
   1fa98:	str	r1, [sp, #16]
   1fa9c:	bl	26120 <__assert_fail@plt+0x14ff4>
   1faa0:	ldr	r3, [r8]
   1faa4:	cmp	r0, r3
   1faa8:	mov	r7, r0
   1faac:	ldrle	fp, [r8, #8]
   1fab0:	bgt	1fb10 <__assert_fail@plt+0xe9e4>
   1fab4:	add	r1, sp, #16
   1fab8:	str	r1, [sp]
   1fabc:	mov	r3, sl
   1fac0:	mov	r2, r5
   1fac4:	mov	r1, r6
   1fac8:	mov	r0, fp
   1facc:	bl	18c64 <__assert_fail@plt+0x7b38>
   1fad0:	cmp	r0, #0
   1fad4:	ble	1fb78 <__assert_fail@plt+0xea4c>
   1fad8:	sub	r3, r0, #-1073741823	; 0xc0000001
   1fadc:	ldr	r5, [fp, r3, lsl #2]
   1fae0:	cmp	r5, #0
   1fae4:	movne	r5, r0
   1fae8:	subeq	r5, r0, #1
   1faec:	b	1fa30 <__assert_fail@plt+0xe904>
   1faf0:	ldrb	r3, [fp, #1]
   1faf4:	and	r3, r3, #223	; 0xdf
   1faf8:	cmp	r3, #88	; 0x58
   1fafc:	bne	1fb34 <__assert_fail@plt+0xea08>
   1fb00:	ldrb	r3, [fp, #2]
   1fb04:	mov	sl, #16
   1fb08:	add	fp, fp, #2
   1fb0c:	b	1f8f0 <__assert_fail@plt+0xe7c4>
   1fb10:	mov	r1, r0
   1fb14:	mov	r0, r8
   1fb18:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1fb1c:	mov	fp, r0
   1fb20:	b	1fab4 <__assert_fail@plt+0xe988>
   1fb24:	mov	r1, r7
   1fb28:	mov	r0, r8
   1fb2c:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1fb30:	b	1fa1c <__assert_fail@plt+0xe8f0>
   1fb34:	cmp	r3, #66	; 0x42
   1fb38:	moveq	sl, #2
   1fb3c:	ldrbeq	r3, [fp, #2]
   1fb40:	addeq	fp, fp, sl
   1fb44:	beq	1f8f0 <__assert_fail@plt+0xe7c4>
   1fb48:	mov	sl, #8
   1fb4c:	b	1f8f8 <__assert_fail@plt+0xe7cc>
   1fb50:	ldr	r3, [pc, #56]	; 1fb90 <__assert_fail@plt+0xea64>
   1fb54:	ldr	r2, [pc, #56]	; 1fb94 <__assert_fail@plt+0xea68>
   1fb58:	ldr	r1, [pc, #56]	; 1fb98 <__assert_fail@plt+0xea6c>
   1fb5c:	ldr	r0, [pc, #56]	; 1fb9c <__assert_fail@plt+0xea70>
   1fb60:	bl	1112c <__assert_fail@plt>
   1fb64:	ldr	r3, [pc, #36]	; 1fb90 <__assert_fail@plt+0xea64>
   1fb68:	ldr	r2, [pc, #48]	; 1fba0 <__assert_fail@plt+0xea74>
   1fb6c:	ldr	r1, [pc, #36]	; 1fb98 <__assert_fail@plt+0xea6c>
   1fb70:	ldr	r0, [pc, #44]	; 1fba4 <__assert_fail@plt+0xea78>
   1fb74:	bl	1112c <__assert_fail@plt>
   1fb78:	ldr	r3, [pc, #16]	; 1fb90 <__assert_fail@plt+0xea64>
   1fb7c:	ldr	r2, [pc, #36]	; 1fba8 <__assert_fail@plt+0xea7c>
   1fb80:	ldr	r1, [pc, #16]	; 1fb98 <__assert_fail@plt+0xea6c>
   1fb84:	ldr	r0, [pc, #32]	; 1fbac <__assert_fail@plt+0xea80>
   1fb88:	bl	1112c <__assert_fail@plt>
   1fb8c:	andeq	fp, r3, ip, lsl r1
   1fb90:	andeq	sl, r2, ip
   1fb94:	andeq	r1, r0, r8, lsr r1
   1fb98:	andeq	sl, r2, r4, rrx
   1fb9c:	andeq	sl, r2, r4, lsl r5
   1fba0:	andeq	r1, r0, r0, ror #1
   1fba4:	andeq	sl, r2, ip, ror #9
   1fba8:	andeq	r1, r0, r5, lsr r1
   1fbac:	andeq	sl, r2, r4, asr #5
   1fbb0:	push	{lr}		; (str lr, [sp, #-4]!)
   1fbb4:	mov	ip, #0
   1fbb8:	ldr	lr, [pc, #16]	; 1fbd0 <__assert_fail@plt+0xeaa4>
   1fbbc:	str	ip, [r0]
   1fbc0:	str	lr, [r0, #8]
   1fbc4:	str	ip, [r0, #4]
   1fbc8:	pop	{lr}		; (ldr lr, [sp], #4)
   1fbcc:	b	1f87c <__assert_fail@plt+0xe750>
   1fbd0:	andeq	r9, r2, r4, ror #29
   1fbd4:	push	{r4, r5, r6, lr}
   1fbd8:	mov	r6, r0
   1fbdc:	mov	r0, #0
   1fbe0:	bl	1f634 <__assert_fail@plt+0xe508>
   1fbe4:	subs	r4, r0, #0
   1fbe8:	moveq	r6, r4
   1fbec:	beq	1fc24 <__assert_fail@plt+0xeaf8>
   1fbf0:	bl	1100c <strlen@plt>
   1fbf4:	mov	r3, r6
   1fbf8:	mov	r1, #1
   1fbfc:	mov	r5, r0
   1fc00:	mov	r2, r0
   1fc04:	mov	r0, r4
   1fc08:	bl	10f58 <fwrite@plt>
   1fc0c:	ldr	r3, [pc, #24]	; 1fc2c <__assert_fail@plt+0xeb00>
   1fc10:	add	r1, r5, #1
   1fc14:	ldr	r3, [r3, #8]
   1fc18:	mov	r6, r0
   1fc1c:	mov	r0, r4
   1fc20:	blx	r3
   1fc24:	mov	r0, r6
   1fc28:	pop	{r4, r5, r6, pc}
   1fc2c:	andeq	fp, r3, ip, lsl r1
   1fc30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc34:	sub	sp, sp, #20
   1fc38:	ldr	r7, [sp, #60]	; 0x3c
   1fc3c:	str	r0, [sp, #8]
   1fc40:	cmp	r7, #0
   1fc44:	ldr	fp, [sp, #56]	; 0x38
   1fc48:	bne	1fe0c <__assert_fail@plt+0xece0>
   1fc4c:	mov	r5, r3
   1fc50:	add	r3, r2, #1
   1fc54:	bics	r3, r3, #2
   1fc58:	bne	1fe28 <__assert_fail@plt+0xecfc>
   1fc5c:	mov	r6, r1
   1fc60:	add	r1, fp, #1
   1fc64:	cmp	r1, #2
   1fc68:	bhi	1fe14 <__assert_fail@plt+0xece8>
   1fc6c:	cmp	fp, #0
   1fc70:	beq	1fdb0 <__assert_fail@plt+0xec84>
   1fc74:	cmp	r2, fp
   1fc78:	beq	1fe04 <__assert_fail@plt+0xecd8>
   1fc7c:	lsl	r9, r5, #1
   1fc80:	cmp	r2, #1
   1fc84:	subeq	r8, r6, #1
   1fc88:	ldreq	r3, [sp, #64]	; 0x40
   1fc8c:	rsbeq	r9, r9, #0
   1fc90:	mlaeq	r8, r5, r8, r3
   1fc94:	ldrne	r8, [sp, #64]	; 0x40
   1fc98:	cmp	fp, #1
   1fc9c:	subeq	r3, r5, #1
   1fca0:	addeq	r8, r8, r3
   1fca4:	mul	r3, r6, r5
   1fca8:	ldr	r2, [sp, #8]
   1fcac:	add	r3, r3, #3
   1fcb0:	ldr	r2, [r2]
   1fcb4:	lsr	r3, r3, #2
   1fcb8:	cmp	r3, r2
   1fcbc:	str	r3, [sp, #12]
   1fcc0:	bgt	1fdcc <__assert_fail@plt+0xeca0>
   1fcc4:	ldr	r3, [sp, #8]
   1fcc8:	cmp	r6, #0
   1fccc:	ldr	r0, [r3, #8]
   1fcd0:	beq	1fde0 <__assert_fail@plt+0xecb4>
   1fcd4:	rsb	fp, fp, #0
   1fcd8:	mov	sl, #0
   1fcdc:	mul	r3, fp, r5
   1fce0:	mov	r2, sl
   1fce4:	mov	lr, sl
   1fce8:	str	r3, [sp, #4]
   1fcec:	cmp	r5, #0
   1fcf0:	movne	r1, r8
   1fcf4:	movne	r3, #0
   1fcf8:	beq	1fd38 <__assert_fail@plt+0xec0c>
   1fcfc:	ldrb	r4, [r1]
   1fd00:	lsl	ip, r2, #3
   1fd04:	add	r2, r2, #1
   1fd08:	cmp	r2, #4
   1fd0c:	orr	lr, lr, r4, lsl ip
   1fd10:	add	r3, r3, #1
   1fd14:	streq	lr, [r0, sl, lsl #2]
   1fd18:	moveq	r2, r7
   1fd1c:	addeq	sl, sl, #1
   1fd20:	moveq	lr, #0
   1fd24:	cmp	r5, r3
   1fd28:	add	r1, r1, fp
   1fd2c:	bne	1fcfc <__assert_fail@plt+0xebd0>
   1fd30:	ldr	r3, [sp, #4]
   1fd34:	add	r8, r8, r3
   1fd38:	subs	r6, r6, #1
   1fd3c:	add	r8, r8, r9
   1fd40:	bne	1fcec <__assert_fail@plt+0xebc0>
   1fd44:	ldr	r3, [sp, #12]
   1fd48:	cmp	r2, #0
   1fd4c:	moveq	r2, sl
   1fd50:	addne	r2, sl, #1
   1fd54:	cmp	r3, r2
   1fd58:	bne	1fdf0 <__assert_fail@plt+0xecc4>
   1fd5c:	cmp	lr, #0
   1fd60:	strne	lr, [r0, sl, lsl #2]
   1fd64:	addne	sl, sl, #1
   1fd68:	bne	1fda0 <__assert_fail@plt+0xec74>
   1fd6c:	cmp	sl, #0
   1fd70:	beq	1fda0 <__assert_fail@plt+0xec74>
   1fd74:	sub	r3, sl, #-1073741823	; 0xc0000001
   1fd78:	ldr	r2, [r0, r3, lsl #2]
   1fd7c:	add	r0, r0, r3, lsl #2
   1fd80:	cmp	r2, #0
   1fd84:	beq	1fd98 <__assert_fail@plt+0xec6c>
   1fd88:	b	1fda0 <__assert_fail@plt+0xec74>
   1fd8c:	ldr	r3, [r0, #-4]!
   1fd90:	cmp	r3, #0
   1fd94:	bne	1fda0 <__assert_fail@plt+0xec74>
   1fd98:	subs	sl, sl, #1
   1fd9c:	bne	1fd8c <__assert_fail@plt+0xec60>
   1fda0:	ldr	r3, [sp, #8]
   1fda4:	str	sl, [r3, #4]
   1fda8:	add	sp, sp, #20
   1fdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdb0:	cmn	r2, #1
   1fdb4:	mvnne	fp, #0
   1fdb8:	bne	1fc7c <__assert_fail@plt+0xeb50>
   1fdbc:	mov	fp, r2
   1fdc0:	mov	r9, r3
   1fdc4:	ldr	r8, [sp, #64]	; 0x40
   1fdc8:	b	1fca4 <__assert_fail@plt+0xeb78>
   1fdcc:	mov	r1, r3
   1fdd0:	ldr	r0, [sp, #8]
   1fdd4:	bl	17fd0 <__assert_fail@plt+0x6ea4>
   1fdd8:	cmp	r6, #0
   1fddc:	bne	1fcd4 <__assert_fail@plt+0xeba8>
   1fde0:	ldr	r3, [sp, #12]
   1fde4:	cmp	r3, #0
   1fde8:	ldreq	sl, [sp, #12]
   1fdec:	beq	1fda0 <__assert_fail@plt+0xec74>
   1fdf0:	ldr	r3, [pc, #68]	; 1fe3c <__assert_fail@plt+0xed10>
   1fdf4:	ldr	r2, [pc, #68]	; 1fe40 <__assert_fail@plt+0xed14>
   1fdf8:	ldr	r1, [pc, #68]	; 1fe44 <__assert_fail@plt+0xed18>
   1fdfc:	ldr	r0, [pc, #68]	; 1fe48 <__assert_fail@plt+0xed1c>
   1fe00:	bl	1112c <__assert_fail@plt>
   1fe04:	mov	r9, r7
   1fe08:	b	1fc80 <__assert_fail@plt+0xeb54>
   1fe0c:	ldr	r0, [pc, #56]	; 1fe4c <__assert_fail@plt+0xed20>
   1fe10:	bl	11138 <__assert_fail@plt+0xc>
   1fe14:	ldr	r3, [pc, #32]	; 1fe3c <__assert_fail@plt+0xed10>
   1fe18:	ldr	r2, [pc, #48]	; 1fe50 <__assert_fail@plt+0xed24>
   1fe1c:	ldr	r1, [pc, #32]	; 1fe44 <__assert_fail@plt+0xed18>
   1fe20:	ldr	r0, [pc, #44]	; 1fe54 <__assert_fail@plt+0xed28>
   1fe24:	bl	1112c <__assert_fail@plt>
   1fe28:	ldr	r3, [pc, #12]	; 1fe3c <__assert_fail@plt+0xed10>
   1fe2c:	ldr	r2, [pc, #36]	; 1fe58 <__assert_fail@plt+0xed2c>
   1fe30:	ldr	r1, [pc, #12]	; 1fe44 <__assert_fail@plt+0xed18>
   1fe34:	ldr	r0, [pc, #32]	; 1fe5c <__assert_fail@plt+0xed30>
   1fe38:	bl	1112c <__assert_fail@plt>
   1fe3c:	andeq	sl, r2, r8, lsl r0
   1fe40:	muleq	r0, fp, r1
   1fe44:	andeq	sl, r2, r4, rrx
   1fe48:	andeq	sl, r2, ip, ror r5
   1fe4c:	andeq	sl, r2, r0, lsr #10
   1fe50:	andeq	r1, r0, r5, ror r1
   1fe54:	andeq	sl, r2, r0, ror #10
   1fe58:	andeq	r1, r0, r4, ror r1
   1fe5c:	andeq	sl, r2, r4, asr #10
   1fe60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe64:	sub	sp, sp, #12
   1fe68:	ldr	r6, [sp, #52]	; 0x34
   1fe6c:	str	r0, [sp]
   1fe70:	cmp	r6, #0
   1fe74:	str	r1, [sp, #4]
   1fe78:	ldr	fp, [sp, #48]	; 0x30
   1fe7c:	ldr	r7, [sp, #56]	; 0x38
   1fe80:	bne	2004c <__assert_fail@plt+0xef20>
   1fe84:	mov	r4, r3
   1fe88:	add	r3, r2, #1
   1fe8c:	bics	r3, r3, #2
   1fe90:	mov	r9, r2
   1fe94:	bne	20038 <__assert_fail@plt+0xef0c>
   1fe98:	add	r3, fp, #1
   1fe9c:	cmp	r3, #2
   1fea0:	bhi	20084 <__assert_fail@plt+0xef58>
   1fea4:	cmp	r4, #0
   1fea8:	bne	1fed0 <__assert_fail@plt+0xeda4>
   1feac:	ldr	r3, [r7, #4]
   1feb0:	cmp	r3, #0
   1feb4:	bne	20070 <__assert_fail@plt+0xef44>
   1feb8:	ldr	r3, [sp, #4]
   1febc:	cmp	r3, #0
   1fec0:	strne	r4, [r3]
   1fec4:	ldr	r0, [sp]
   1fec8:	add	sp, sp, #12
   1fecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fed0:	ldr	r5, [r7, #4]
   1fed4:	cmp	r5, #0
   1fed8:	beq	20068 <__assert_fail@plt+0xef3c>
   1fedc:	cmp	r5, #0
   1fee0:	rsblt	r5, r5, #0
   1fee4:	ldr	r3, [r7, #8]
   1fee8:	sub	r2, r5, #-1073741823	; 0xc0000001
   1feec:	ldr	r3, [r3, r2, lsl #2]
   1fef0:	cmp	r3, #0
   1fef4:	movne	r2, r6
   1fef8:	bne	1ff04 <__assert_fail@plt+0xedd8>
   1fefc:	b	20054 <__assert_fail@plt+0xef28>
   1ff00:	mov	r2, r1
   1ff04:	lsrs	r3, r3, #8
   1ff08:	add	r1, r2, #1
   1ff0c:	bne	1ff00 <__assert_fail@plt+0xedd4>
   1ff10:	sub	r0, r5, #1
   1ff14:	mov	r1, r4
   1ff18:	add	r0, r4, r0, lsl #2
   1ff1c:	add	r0, r0, r2
   1ff20:	bl	26120 <__assert_fail@plt+0x14ff4>
   1ff24:	ldr	r3, [sp]
   1ff28:	cmp	r3, #0
   1ff2c:	mov	r8, r0
   1ff30:	beq	20020 <__assert_fail@plt+0xeef4>
   1ff34:	cmp	fp, #0
   1ff38:	bne	20000 <__assert_fail@plt+0xeed4>
   1ff3c:	cmn	r9, #1
   1ff40:	mvnne	fp, #0
   1ff44:	beq	20010 <__assert_fail@plt+0xeee4>
   1ff48:	lsl	sl, r4, #1
   1ff4c:	cmp	r9, #1
   1ff50:	subeq	r3, r8, #1
   1ff54:	ldreq	r2, [sp]
   1ff58:	rsbeq	sl, sl, #0
   1ff5c:	mlaeq	r3, r4, r3, r2
   1ff60:	ldrne	r3, [sp]
   1ff64:	cmp	fp, #1
   1ff68:	subeq	r2, r4, #1
   1ff6c:	addeq	r3, r3, r2
   1ff70:	cmp	r8, #0
   1ff74:	beq	1ffec <__assert_fail@plt+0xeec0>
   1ff78:	rsb	fp, fp, #0
   1ff7c:	mov	lr, #0
   1ff80:	mla	sl, r4, fp, sl
   1ff84:	mov	r2, lr
   1ff88:	mov	r9, r6
   1ff8c:	mov	r0, r6
   1ff90:	mov	r1, r6
   1ff94:	mov	ip, r3
   1ff98:	cmp	r0, #0
   1ff9c:	subne	r0, r0, #1
   1ffa0:	bne	1ffbc <__assert_fail@plt+0xee90>
   1ffa4:	cmp	r5, lr
   1ffa8:	movgt	r0, #3
   1ffac:	ldrgt	r2, [r7, #8]
   1ffb0:	movle	r0, #3
   1ffb4:	ldrgt	r2, [r2, lr, lsl #2]
   1ffb8:	addgt	lr, lr, #1
   1ffbc:	add	r1, r1, #1
   1ffc0:	cmp	r4, r1
   1ffc4:	strb	r2, [ip], fp
   1ffc8:	lsr	r2, r2, #8
   1ffcc:	bne	1ff98 <__assert_fail@plt+0xee6c>
   1ffd0:	add	r9, r9, #1
   1ffd4:	cmp	r8, r9
   1ffd8:	add	r3, r3, sl
   1ffdc:	bne	1ff90 <__assert_fail@plt+0xee64>
   1ffe0:	cmp	lr, r5
   1ffe4:	moveq	r4, r8
   1ffe8:	beq	1feb8 <__assert_fail@plt+0xed8c>
   1ffec:	ldr	r3, [pc, #164]	; 20098 <__assert_fail@plt+0xef6c>
   1fff0:	ldr	r2, [pc, #164]	; 2009c <__assert_fail@plt+0xef70>
   1fff4:	ldr	r1, [pc, #164]	; 200a0 <__assert_fail@plt+0xef74>
   1fff8:	ldr	r0, [pc, #164]	; 200a4 <__assert_fail@plt+0xef78>
   1fffc:	bl	1112c <__assert_fail@plt>
   20000:	cmp	r9, fp
   20004:	bne	1ff48 <__assert_fail@plt+0xee1c>
   20008:	mov	sl, #0
   2000c:	b	1ff4c <__assert_fail@plt+0xee20>
   20010:	mov	fp, r9
   20014:	ldr	r3, [sp]
   20018:	mov	sl, #0
   2001c:	b	1ff70 <__assert_fail@plt+0xee44>
   20020:	ldr	r3, [pc, #128]	; 200a8 <__assert_fail@plt+0xef7c>
   20024:	mul	r0, r0, r4
   20028:	ldr	r3, [r3, #4]
   2002c:	blx	r3
   20030:	str	r0, [sp]
   20034:	b	1ff34 <__assert_fail@plt+0xee08>
   20038:	ldr	r3, [pc, #88]	; 20098 <__assert_fail@plt+0xef6c>
   2003c:	ldr	r2, [pc, #104]	; 200ac <__assert_fail@plt+0xef80>
   20040:	ldr	r1, [pc, #88]	; 200a0 <__assert_fail@plt+0xef74>
   20044:	ldr	r0, [pc, #100]	; 200b0 <__assert_fail@plt+0xef84>
   20048:	bl	1112c <__assert_fail@plt>
   2004c:	ldr	r0, [pc, #96]	; 200b4 <__assert_fail@plt+0xef88>
   20050:	bl	11138 <__assert_fail@plt+0xc>
   20054:	ldr	r3, [pc, #60]	; 20098 <__assert_fail@plt+0xef6c>
   20058:	ldr	r2, [pc, #88]	; 200b8 <__assert_fail@plt+0xef8c>
   2005c:	ldr	r1, [pc, #60]	; 200a0 <__assert_fail@plt+0xef74>
   20060:	ldr	r0, [pc, #84]	; 200bc <__assert_fail@plt+0xef90>
   20064:	bl	1112c <__assert_fail@plt>
   20068:	mov	r4, r5
   2006c:	b	1feb8 <__assert_fail@plt+0xed8c>
   20070:	ldr	r3, [pc, #32]	; 20098 <__assert_fail@plt+0xef6c>
   20074:	ldr	r2, [pc, #68]	; 200c0 <__assert_fail@plt+0xef94>
   20078:	ldr	r1, [pc, #32]	; 200a0 <__assert_fail@plt+0xef74>
   2007c:	ldr	r0, [pc, #64]	; 200c4 <__assert_fail@plt+0xef98>
   20080:	bl	1112c <__assert_fail@plt>
   20084:	ldr	r3, [pc, #12]	; 20098 <__assert_fail@plt+0xef6c>
   20088:	ldr	r2, [pc, #56]	; 200c8 <__assert_fail@plt+0xef9c>
   2008c:	ldr	r1, [pc, #12]	; 200a0 <__assert_fail@plt+0xef74>
   20090:	ldr	r0, [pc, #52]	; 200cc <__assert_fail@plt+0xefa0>
   20094:	bl	1112c <__assert_fail@plt>
   20098:	andeq	sl, r2, r4, lsr #32
   2009c:	andeq	r1, r0, r3, lsl #4
   200a0:	andeq	sl, r2, r4, rrx
   200a4:	andeq	sl, r2, r4, ror #11
   200a8:	andeq	fp, r3, ip, lsl r1
   200ac:	andeq	r1, r0, lr, lsr #3
   200b0:	andeq	sl, r2, r4, asr #10
   200b4:	muleq	r2, r4, r5
   200b8:	andeq	r1, r0, r4, asr #3
   200bc:	ldrdeq	sl, [r2], -r8
   200c0:			; <UNDEFINED> instruction: 0x000011b0
   200c4:			; <UNDEFINED> instruction: 0x0002a5b8
   200c8:	andeq	r1, r0, pc, lsr #3
   200cc:	andeq	sl, r2, r0, ror #10
   200d0:	push	{r4, r5, r6, lr}
   200d4:	subs	r4, r0, #0
   200d8:	beq	2014c <__assert_fail@plt+0xf020>
   200dc:	mov	r1, #47	; 0x2f
   200e0:	bl	110e4 <strrchr@plt>
   200e4:	subs	r5, r0, #0
   200e8:	beq	20138 <__assert_fail@plt+0xf00c>
   200ec:	add	r6, r5, #1
   200f0:	sub	r3, r6, r4
   200f4:	cmp	r3, #6
   200f8:	ble	20138 <__assert_fail@plt+0xf00c>
   200fc:	mov	r2, #7
   20100:	ldr	r1, [pc, #96]	; 20168 <__assert_fail@plt+0xf03c>
   20104:	sub	r0, r5, #6
   20108:	bl	11114 <strncmp@plt>
   2010c:	cmp	r0, #0
   20110:	bne	20138 <__assert_fail@plt+0xf00c>
   20114:	mov	r2, #3
   20118:	ldr	r1, [pc, #76]	; 2016c <__assert_fail@plt+0xf040>
   2011c:	mov	r0, r6
   20120:	bl	11114 <strncmp@plt>
   20124:	cmp	r0, #0
   20128:	movne	r4, r6
   2012c:	ldreq	r3, [pc, #60]	; 20170 <__assert_fail@plt+0xf044>
   20130:	addeq	r4, r5, #4
   20134:	streq	r4, [r3]
   20138:	ldr	r2, [pc, #52]	; 20174 <__assert_fail@plt+0xf048>
   2013c:	ldr	r3, [pc, #52]	; 20178 <__assert_fail@plt+0xf04c>
   20140:	str	r4, [r2]
   20144:	str	r4, [r3]
   20148:	pop	{r4, r5, r6, pc}
   2014c:	ldr	r3, [pc, #40]	; 2017c <__assert_fail@plt+0xf050>
   20150:	mov	r2, #55	; 0x37
   20154:	mov	r1, #1
   20158:	ldr	r3, [r3]
   2015c:	ldr	r0, [pc, #28]	; 20180 <__assert_fail@plt+0xf054>
   20160:	bl	10f58 <fwrite@plt>
   20164:	bl	11120 <abort@plt>
   20168:	andeq	sl, r2, r4, lsr #12
   2016c:	andeq	sl, r2, ip, lsr #12
   20170:	andeq	fp, r3, r8, ror #2
   20174:	andeq	fp, r3, r0, lsr #3
   20178:	andeq	fp, r3, ip, ror #2
   2017c:	andeq	fp, r3, r8, ror r1
   20180:	andeq	sl, r2, ip, ror #11
   20184:	mov	r3, r1
   20188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2018c:	mov	r1, #2
   20190:	sub	sp, sp, #116	; 0x74
   20194:	mov	r4, r0
   20198:	mov	r0, r3
   2019c:	bl	22e88 <__assert_fail@plt+0x11d5c>
   201a0:	ldr	r7, [pc, #1952]	; 20948 <__assert_fail@plt+0xf81c>
   201a4:	mov	r6, #0
   201a8:	mov	r5, #1
   201ac:	mov	r9, r0
   201b0:	ldrb	r3, [r4]
   201b4:	cmp	r3, #0
   201b8:	beq	20798 <__assert_fail@plt+0xf66c>
   201bc:	mov	r1, r9
   201c0:	mov	r0, r4
   201c4:	bl	24c78 <__assert_fail@plt+0x13b4c>
   201c8:	subs	r8, r0, #0
   201cc:	beq	20798 <__assert_fail@plt+0xf66c>
   201d0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   201d4:	cmp	r0, #1
   201d8:	bls	20344 <__assert_fail@plt+0xf218>
   201dc:	cmp	r4, r8
   201e0:	str	r4, [sp, #16]
   201e4:	strb	r6, [sp]
   201e8:	str	r6, [sp, #4]
   201ec:	str	r6, [sp, #8]
   201f0:	strb	r6, [sp, #12]
   201f4:	bcc	20254 <__assert_fail@plt+0xf128>
   201f8:	b	207c8 <__assert_fail@plt+0xf69c>
   201fc:	ldrb	r3, [r4]
   20200:	and	r2, r3, #31
   20204:	lsr	r3, r3, #5
   20208:	ldr	r3, [r7, r3, lsl #2]
   2020c:	lsr	r3, r3, r2
   20210:	tst	r3, #1
   20214:	beq	202dc <__assert_fail@plt+0xf1b0>
   20218:	str	r5, [sp, #20]
   2021c:	ldrb	sl, [r4]
   20220:	strb	r5, [sp, #24]
   20224:	str	sl, [sp, #28]
   20228:	cmp	sl, #0
   2022c:	strb	r5, [sp, #12]
   20230:	beq	202d8 <__assert_fail@plt+0xf1ac>
   20234:	ldr	r4, [sp, #16]
   20238:	ldr	r3, [sp, #20]
   2023c:	strb	r6, [sp, #12]
   20240:	add	r4, r4, r3
   20244:	cmp	r8, r4
   20248:	str	r4, [sp, #16]
   2024c:	ldrb	r3, [sp, #24]
   20250:	bls	20394 <__assert_fail@plt+0xf268>
   20254:	ldrb	r3, [sp]
   20258:	cmp	r3, #0
   2025c:	beq	201fc <__assert_fail@plt+0xf0d0>
   20260:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20264:	mov	r1, r0
   20268:	mov	r0, r4
   2026c:	bl	22e5c <__assert_fail@plt+0x11d30>
   20270:	add	r3, sp, #4
   20274:	mov	r1, r4
   20278:	mov	r2, r0
   2027c:	add	r0, sp, #28
   20280:	bl	242b8 <__assert_fail@plt+0x1318c>
   20284:	cmn	r0, #1
   20288:	str	r0, [sp, #20]
   2028c:	beq	202f4 <__assert_fail@plt+0xf1c8>
   20290:	cmn	r0, #2
   20294:	beq	20328 <__assert_fail@plt+0xf1fc>
   20298:	cmp	r0, #0
   2029c:	bne	20308 <__assert_fail@plt+0xf1dc>
   202a0:	ldr	r4, [sp, #16]
   202a4:	str	r5, [sp, #20]
   202a8:	ldrb	r3, [r4]
   202ac:	cmp	r3, #0
   202b0:	bne	20934 <__assert_fail@plt+0xf808>
   202b4:	ldr	sl, [sp, #28]
   202b8:	cmp	sl, #0
   202bc:	bne	206d4 <__assert_fail@plt+0xf5a8>
   202c0:	add	r0, sp, #4
   202c4:	strb	r5, [sp, #24]
   202c8:	bl	10ee0 <mbsinit@plt>
   202cc:	cmp	r0, #0
   202d0:	bne	20320 <__assert_fail@plt+0xf1f4>
   202d4:	strb	r5, [sp, #12]
   202d8:	bl	11120 <abort@plt>
   202dc:	add	r0, sp, #4
   202e0:	bl	10ee0 <mbsinit@plt>
   202e4:	cmp	r0, #0
   202e8:	beq	2090c <__assert_fail@plt+0xf7e0>
   202ec:	strb	r5, [sp]
   202f0:	b	20260 <__assert_fail@plt+0xf134>
   202f4:	str	r5, [sp, #20]
   202f8:	strb	r6, [sp, #24]
   202fc:	ldr	sl, [sp, #28]
   20300:	ldr	r4, [sp, #16]
   20304:	b	20238 <__assert_fail@plt+0xf10c>
   20308:	add	r0, sp, #4
   2030c:	strb	r5, [sp, #24]
   20310:	bl	10ee0 <mbsinit@plt>
   20314:	ldr	sl, [sp, #28]
   20318:	cmp	r0, #0
   2031c:	beq	20228 <__assert_fail@plt+0xf0fc>
   20320:	strb	r6, [sp]
   20324:	b	20228 <__assert_fail@plt+0xf0fc>
   20328:	ldr	r4, [sp, #16]
   2032c:	mov	r0, r4
   20330:	bl	1100c <strlen@plt>
   20334:	strb	r6, [sp, #24]
   20338:	ldr	sl, [sp, #28]
   2033c:	str	r0, [sp, #20]
   20340:	b	20238 <__assert_fail@plt+0xf10c>
   20344:	cmp	r4, r8
   20348:	bcs	20844 <__assert_fail@plt+0xf718>
   2034c:	bl	10fe8 <__ctype_b_loc@plt>
   20350:	ldrb	r3, [r8, #-1]
   20354:	lsl	r3, r3, #1
   20358:	ldr	sl, [r0]
   2035c:	mov	r0, r9
   20360:	ldrh	r4, [sl, r3]
   20364:	bl	1100c <strlen@plt>
   20368:	and	r4, r4, #8
   2036c:	ldrb	r3, [r8, r0]
   20370:	cmp	r3, #0
   20374:	bne	20920 <__assert_fail@plt+0xf7f4>
   20378:	cmp	r4, #0
   2037c:	beq	20870 <__assert_fail@plt+0xf744>
   20380:	ldrb	r3, [r8]
   20384:	cmp	r3, #0
   20388:	beq	20798 <__assert_fail@plt+0xf66c>
   2038c:	add	r4, r8, #1
   20390:	b	201b0 <__assert_fail@plt+0xf084>
   20394:	cmp	r3, #0
   20398:	beq	207c8 <__assert_fail@plt+0xf69c>
   2039c:	mov	r0, sl
   203a0:	bl	11030 <iswalnum@plt>
   203a4:	clz	fp, r0
   203a8:	lsr	fp, fp, #5
   203ac:	strb	r6, [sp, #56]	; 0x38
   203b0:	ldrb	r3, [sp, #56]	; 0x38
   203b4:	str	r8, [sp, #16]
   203b8:	strb	r6, [sp]
   203bc:	cmp	r3, #0
   203c0:	str	r6, [sp, #4]
   203c4:	str	r6, [sp, #8]
   203c8:	strb	r6, [sp, #12]
   203cc:	str	r9, [sp, #72]	; 0x48
   203d0:	str	r6, [sp, #60]	; 0x3c
   203d4:	str	r6, [sp, #64]	; 0x40
   203d8:	strb	r6, [sp, #68]	; 0x44
   203dc:	mov	sl, r9
   203e0:	bne	2054c <__assert_fail@plt+0xf420>
   203e4:	ldrb	r3, [sl]
   203e8:	and	r2, r3, #31
   203ec:	lsr	r3, r3, #5
   203f0:	ldr	r3, [r7, r3, lsl #2]
   203f4:	lsr	r3, r3, r2
   203f8:	tst	r3, #1
   203fc:	beq	20674 <__assert_fail@plt+0xf548>
   20400:	str	r5, [sp, #76]	; 0x4c
   20404:	ldrb	r4, [sl]
   20408:	strb	r5, [sp, #80]	; 0x50
   2040c:	str	r4, [sp, #84]	; 0x54
   20410:	cmp	r4, #0
   20414:	strb	r5, [sp, #68]	; 0x44
   20418:	bne	204fc <__assert_fail@plt+0xf3d0>
   2041c:	ldrb	r3, [sp, #12]
   20420:	cmp	r3, #0
   20424:	bne	2070c <__assert_fail@plt+0xf5e0>
   20428:	ldrb	r3, [sp]
   2042c:	ldr	r4, [sp, #16]
   20430:	cmp	r3, #0
   20434:	bne	20468 <__assert_fail@plt+0xf33c>
   20438:	ldrb	r3, [r4]
   2043c:	and	r2, r3, #31
   20440:	lsr	r3, r3, #5
   20444:	ldr	r3, [r7, r3, lsl #2]
   20448:	lsr	r3, r3, r2
   2044c:	tst	r3, #1
   20450:	bne	20878 <__assert_fail@plt+0xf74c>
   20454:	add	r0, sp, #4
   20458:	bl	10ee0 <mbsinit@plt>
   2045c:	cmp	r0, #0
   20460:	beq	2090c <__assert_fail@plt+0xf7e0>
   20464:	strb	r5, [sp]
   20468:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   2046c:	mov	r1, r0
   20470:	mov	r0, r4
   20474:	bl	22e5c <__assert_fail@plt+0x11d30>
   20478:	add	r3, sp, #4
   2047c:	mov	r1, r4
   20480:	mov	r2, r0
   20484:	add	r0, sp, #28
   20488:	bl	242b8 <__assert_fail@plt+0x1318c>
   2048c:	cmn	r0, #1
   20490:	str	r0, [sp, #20]
   20494:	beq	20890 <__assert_fail@plt+0xf764>
   20498:	cmn	r0, #2
   2049c:	beq	208a4 <__assert_fail@plt+0xf778>
   204a0:	cmp	r0, #0
   204a4:	bne	208e4 <__assert_fail@plt+0xf7b8>
   204a8:	ldr	r3, [sp, #16]
   204ac:	str	r5, [sp, #20]
   204b0:	ldrb	r3, [r3]
   204b4:	cmp	r3, #0
   204b8:	bne	20934 <__assert_fail@plt+0xf808>
   204bc:	ldr	r4, [sp, #28]
   204c0:	cmp	r4, #0
   204c4:	bne	206d4 <__assert_fail@plt+0xf5a8>
   204c8:	add	r0, sp, #4
   204cc:	strb	r5, [sp, #24]
   204d0:	bl	10ee0 <mbsinit@plt>
   204d4:	cmp	r0, #0
   204d8:	strbne	r4, [sp]
   204dc:	strbne	r5, [sp, #12]
   204e0:	bne	20740 <__assert_fail@plt+0xf614>
   204e4:	b	20904 <__assert_fail@plt+0xf7d8>
   204e8:	ldr	r0, [sp, #72]	; 0x48
   204ec:	bl	1100c <strlen@plt>
   204f0:	strb	r6, [sp, #80]	; 0x50
   204f4:	str	r0, [sp, #76]	; 0x4c
   204f8:	strb	r5, [sp, #68]	; 0x44
   204fc:	ldrb	r3, [sp, #12]
   20500:	cmp	r3, #0
   20504:	beq	205b0 <__assert_fail@plt+0xf484>
   20508:	ldrb	r3, [sp, #24]
   2050c:	cmp	r3, #0
   20510:	ldrne	r4, [sp, #28]
   20514:	bne	2064c <__assert_fail@plt+0xf520>
   20518:	ldr	r4, [sp, #16]
   2051c:	ldr	r3, [sp, #20]
   20520:	ldr	sl, [sp, #72]	; 0x48
   20524:	add	r4, r4, r3
   20528:	ldrb	r3, [sp, #56]	; 0x38
   2052c:	ldr	r2, [sp, #76]	; 0x4c
   20530:	strb	r6, [sp, #12]
   20534:	add	sl, sl, r2
   20538:	cmp	r3, #0
   2053c:	strb	r6, [sp, #68]	; 0x44
   20540:	str	r4, [sp, #16]
   20544:	str	sl, [sp, #72]	; 0x48
   20548:	beq	203e4 <__assert_fail@plt+0xf2b8>
   2054c:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20550:	mov	r1, r0
   20554:	mov	r0, sl
   20558:	bl	22e5c <__assert_fail@plt+0x11d30>
   2055c:	add	r3, sp, #60	; 0x3c
   20560:	mov	r1, sl
   20564:	mov	r2, r0
   20568:	add	r0, sp, #84	; 0x54
   2056c:	bl	242b8 <__assert_fail@plt+0x1318c>
   20570:	cmn	r0, #1
   20574:	str	r0, [sp, #76]	; 0x4c
   20578:	strbeq	r6, [sp, #80]	; 0x50
   2057c:	streq	r5, [sp, #76]	; 0x4c
   20580:	beq	204f8 <__assert_fail@plt+0xf3cc>
   20584:	cmn	r0, #2
   20588:	beq	204e8 <__assert_fail@plt+0xf3bc>
   2058c:	cmp	r0, #0
   20590:	beq	206b4 <__assert_fail@plt+0xf588>
   20594:	ldr	r4, [sp, #84]	; 0x54
   20598:	add	r0, sp, #60	; 0x3c
   2059c:	strb	r5, [sp, #80]	; 0x50
   205a0:	bl	10ee0 <mbsinit@plt>
   205a4:	cmp	r0, #0
   205a8:	strbne	r6, [sp, #56]	; 0x38
   205ac:	b	20410 <__assert_fail@plt+0xf2e4>
   205b0:	ldrb	r3, [sp]
   205b4:	ldr	r4, [sp, #16]
   205b8:	cmp	r3, #0
   205bc:	bne	205f0 <__assert_fail@plt+0xf4c4>
   205c0:	ldrb	r3, [r4]
   205c4:	and	r2, r3, #31
   205c8:	lsr	r3, r3, #5
   205cc:	ldr	r3, [r7, r3, lsl #2]
   205d0:	lsr	r3, r3, r2
   205d4:	tst	r3, #1
   205d8:	bne	20658 <__assert_fail@plt+0xf52c>
   205dc:	add	r0, sp, #4
   205e0:	bl	10ee0 <mbsinit@plt>
   205e4:	cmp	r0, #0
   205e8:	beq	2090c <__assert_fail@plt+0xf7e0>
   205ec:	strb	r5, [sp]
   205f0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   205f4:	mov	r1, r0
   205f8:	mov	r0, r4
   205fc:	bl	22e5c <__assert_fail@plt+0x11d30>
   20600:	add	r3, sp, #4
   20604:	mov	r1, r4
   20608:	mov	r2, r0
   2060c:	add	r0, sp, #28
   20610:	bl	242b8 <__assert_fail@plt+0x1318c>
   20614:	cmn	r0, #1
   20618:	str	r0, [sp, #20]
   2061c:	beq	2068c <__assert_fail@plt+0xf560>
   20620:	cmn	r0, #2
   20624:	beq	2069c <__assert_fail@plt+0xf570>
   20628:	cmp	r0, #0
   2062c:	beq	206e8 <__assert_fail@plt+0xf5bc>
   20630:	ldr	r4, [sp, #28]
   20634:	add	r0, sp, #4
   20638:	strb	r5, [sp, #24]
   2063c:	bl	10ee0 <mbsinit@plt>
   20640:	strb	r5, [sp, #12]
   20644:	cmp	r0, #0
   20648:	strbne	r6, [sp]
   2064c:	cmp	r4, #0
   20650:	beq	202d8 <__assert_fail@plt+0xf1ac>
   20654:	b	20518 <__assert_fail@plt+0xf3ec>
   20658:	str	r5, [sp, #20]
   2065c:	ldrb	r3, [r4]
   20660:	strb	r5, [sp, #24]
   20664:	strb	r5, [sp, #12]
   20668:	str	r3, [sp, #28]
   2066c:	mov	r4, r3
   20670:	b	2064c <__assert_fail@plt+0xf520>
   20674:	add	r0, sp, #60	; 0x3c
   20678:	bl	10ee0 <mbsinit@plt>
   2067c:	cmp	r0, #0
   20680:	beq	2090c <__assert_fail@plt+0xf7e0>
   20684:	strb	r5, [sp, #56]	; 0x38
   20688:	b	2054c <__assert_fail@plt+0xf420>
   2068c:	str	r5, [sp, #20]
   20690:	strb	r6, [sp, #24]
   20694:	ldr	r4, [sp, #16]
   20698:	b	2051c <__assert_fail@plt+0xf3f0>
   2069c:	ldr	r4, [sp, #16]
   206a0:	mov	r0, r4
   206a4:	bl	1100c <strlen@plt>
   206a8:	strb	r6, [sp, #24]
   206ac:	str	r0, [sp, #20]
   206b0:	b	2051c <__assert_fail@plt+0xf3f0>
   206b4:	ldr	r3, [sp, #72]	; 0x48
   206b8:	str	r5, [sp, #76]	; 0x4c
   206bc:	ldrb	r3, [r3]
   206c0:	cmp	r3, #0
   206c4:	bne	20934 <__assert_fail@plt+0xf808>
   206c8:	ldr	r4, [sp, #84]	; 0x54
   206cc:	cmp	r4, #0
   206d0:	beq	20598 <__assert_fail@plt+0xf46c>
   206d4:	ldr	r3, [pc, #624]	; 2094c <__assert_fail@plt+0xf820>
   206d8:	mov	r2, #172	; 0xac
   206dc:	ldr	r1, [pc, #620]	; 20950 <__assert_fail@plt+0xf824>
   206e0:	ldr	r0, [pc, #620]	; 20954 <__assert_fail@plt+0xf828>
   206e4:	bl	1112c <__assert_fail@plt>
   206e8:	ldr	r4, [sp, #16]
   206ec:	str	r5, [sp, #20]
   206f0:	ldrb	r3, [r4]
   206f4:	cmp	r3, #0
   206f8:	bne	20934 <__assert_fail@plt+0xf808>
   206fc:	ldr	r4, [sp, #28]
   20700:	cmp	r4, #0
   20704:	beq	20634 <__assert_fail@plt+0xf508>
   20708:	b	206d4 <__assert_fail@plt+0xf5a8>
   2070c:	ldrb	r3, [sp, #24]
   20710:	ldr	r4, [sp, #28]
   20714:	cmp	r3, #0
   20718:	beq	20724 <__assert_fail@plt+0xf5f8>
   2071c:	cmp	r4, #0
   20720:	beq	20740 <__assert_fail@plt+0xf614>
   20724:	ldrb	r3, [sp, #24]
   20728:	cmp	r3, #0
   2072c:	beq	20740 <__assert_fail@plt+0xf614>
   20730:	mov	r0, r4
   20734:	bl	11030 <iswalnum@plt>
   20738:	cmp	r0, #0
   2073c:	bne	20748 <__assert_fail@plt+0xf61c>
   20740:	cmp	fp, #0
   20744:	bne	2079c <__assert_fail@plt+0xf670>
   20748:	str	r8, [sp, #16]
   2074c:	strb	r6, [sp]
   20750:	str	r6, [sp, #4]
   20754:	str	r6, [sp, #8]
   20758:	strb	r6, [sp, #12]
   2075c:	ldrb	r3, [r8]
   20760:	and	r2, r3, #31
   20764:	lsr	r3, r3, #5
   20768:	ldr	r3, [r7, r3, lsl #2]
   2076c:	lsr	r3, r3, r2
   20770:	tst	r3, #1
   20774:	beq	207d0 <__assert_fail@plt+0xf6a4>
   20778:	str	r5, [sp, #20]
   2077c:	ldrb	r3, [r8]
   20780:	strb	r5, [sp, #24]
   20784:	mov	r4, r3
   20788:	str	r3, [sp, #28]
   2078c:	cmp	r4, #0
   20790:	strb	r5, [sp, #12]
   20794:	bne	207bc <__assert_fail@plt+0xf690>
   20798:	mov	fp, #0
   2079c:	mov	r0, r9
   207a0:	bl	17b4c <__assert_fail@plt+0x6a20>
   207a4:	mov	r0, fp
   207a8:	add	sp, sp, #116	; 0x74
   207ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   207b0:	ldr	r0, [sp, #16]
   207b4:	bl	1100c <strlen@plt>
   207b8:	str	r0, [sp, #20]
   207bc:	ldr	r4, [sp, #20]
   207c0:	add	r4, r8, r4
   207c4:	b	201b0 <__assert_fail@plt+0xf084>
   207c8:	mov	fp, r5
   207cc:	b	203ac <__assert_fail@plt+0xf280>
   207d0:	add	r0, sp, #4
   207d4:	bl	10ee0 <mbsinit@plt>
   207d8:	cmp	r0, #0
   207dc:	beq	2090c <__assert_fail@plt+0xf7e0>
   207e0:	strb	r5, [sp]
   207e4:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   207e8:	mov	r1, r0
   207ec:	mov	r0, r8
   207f0:	bl	22e5c <__assert_fail@plt+0x11d30>
   207f4:	add	r3, sp, #4
   207f8:	mov	r1, r8
   207fc:	mov	r2, r0
   20800:	add	r0, sp, #28
   20804:	bl	242b8 <__assert_fail@plt+0x1318c>
   20808:	cmn	r0, #1
   2080c:	str	r0, [sp, #20]
   20810:	streq	r5, [sp, #20]
   20814:	beq	207bc <__assert_fail@plt+0xf690>
   20818:	cmn	r0, #2
   2081c:	beq	207b0 <__assert_fail@plt+0xf684>
   20820:	cmp	r0, #0
   20824:	beq	208c0 <__assert_fail@plt+0xf794>
   20828:	ldr	r4, [sp, #28]
   2082c:	add	r0, sp, #4
   20830:	strb	r5, [sp, #24]
   20834:	bl	10ee0 <mbsinit@plt>
   20838:	cmp	r0, #0
   2083c:	strbne	r6, [sp]
   20840:	b	2078c <__assert_fail@plt+0xf660>
   20844:	mov	r0, r9
   20848:	bl	1100c <strlen@plt>
   2084c:	ldrb	r4, [r8, r0]
   20850:	cmp	r4, #0
   20854:	beq	20870 <__assert_fail@plt+0xf744>
   20858:	bl	10fe8 <__ctype_b_loc@plt>
   2085c:	lsl	r4, r4, #1
   20860:	ldr	r3, [r0]
   20864:	ldrh	r3, [r3, r4]
   20868:	tst	r3, #8
   2086c:	bne	20380 <__assert_fail@plt+0xf254>
   20870:	mov	fp, #1
   20874:	b	2079c <__assert_fail@plt+0xf670>
   20878:	str	r5, [sp, #20]
   2087c:	ldrb	r4, [r4]
   20880:	strb	r5, [sp, #24]
   20884:	strb	r5, [sp, #12]
   20888:	str	r4, [sp, #28]
   2088c:	b	2071c <__assert_fail@plt+0xf5f0>
   20890:	str	r5, [sp, #20]
   20894:	strb	r6, [sp, #24]
   20898:	strb	r5, [sp, #12]
   2089c:	ldr	r4, [sp, #28]
   208a0:	b	20724 <__assert_fail@plt+0xf5f8>
   208a4:	ldr	r0, [sp, #16]
   208a8:	bl	1100c <strlen@plt>
   208ac:	strb	r6, [sp, #24]
   208b0:	strb	r5, [sp, #12]
   208b4:	ldr	r4, [sp, #28]
   208b8:	str	r0, [sp, #20]
   208bc:	b	20724 <__assert_fail@plt+0xf5f8>
   208c0:	ldr	r3, [sp, #16]
   208c4:	str	r5, [sp, #20]
   208c8:	ldrb	r3, [r3]
   208cc:	cmp	r3, #0
   208d0:	bne	20934 <__assert_fail@plt+0xf808>
   208d4:	ldr	r4, [sp, #28]
   208d8:	cmp	r4, #0
   208dc:	beq	2082c <__assert_fail@plt+0xf700>
   208e0:	b	206d4 <__assert_fail@plt+0xf5a8>
   208e4:	add	r0, sp, #4
   208e8:	strb	r5, [sp, #24]
   208ec:	bl	10ee0 <mbsinit@plt>
   208f0:	ldr	r4, [sp, #28]
   208f4:	cmp	r0, #0
   208f8:	strbne	r6, [sp]
   208fc:	strbne	r5, [sp, #12]
   20900:	bne	2071c <__assert_fail@plt+0xf5f0>
   20904:	strb	r5, [sp, #12]
   20908:	b	2071c <__assert_fail@plt+0xf5f0>
   2090c:	ldr	r3, [pc, #56]	; 2094c <__assert_fail@plt+0xf820>
   20910:	mov	r2, #143	; 0x8f
   20914:	ldr	r1, [pc, #52]	; 20950 <__assert_fail@plt+0xf824>
   20918:	ldr	r0, [pc, #56]	; 20958 <__assert_fail@plt+0xf82c>
   2091c:	bl	1112c <__assert_fail@plt>
   20920:	lsl	r3, r3, #1
   20924:	ldrh	r3, [sl, r3]
   20928:	tst	r3, #8
   2092c:	beq	20378 <__assert_fail@plt+0xf24c>
   20930:	b	20380 <__assert_fail@plt+0xf254>
   20934:	ldr	r3, [pc, #16]	; 2094c <__assert_fail@plt+0xf820>
   20938:	mov	r2, #171	; 0xab
   2093c:	ldr	r1, [pc, #12]	; 20950 <__assert_fail@plt+0xf824>
   20940:	ldr	r0, [pc, #20]	; 2095c <__assert_fail@plt+0xf830>
   20944:	bl	1112c <__assert_fail@plt>
   20948:	andeq	sl, r2, r8, ror #21
   2094c:	andeq	sl, r2, r0, lsr r6
   20950:	andeq	sl, r2, r4, asr #12
   20954:	andeq	sl, r2, r4, lsl #13
   20958:	andeq	sl, r2, r4, asr r6
   2095c:	andeq	sl, r2, ip, ror #12
   20960:	push	{r4, r5, r6, lr}
   20964:	mov	r1, r0
   20968:	mov	r4, r0
   2096c:	sub	sp, sp, #8
   20970:	mov	r2, #5
   20974:	mov	r0, #0
   20978:	bl	10f04 <dcgettext@plt>
   2097c:	cmp	r4, r0
   20980:	mov	r5, r0
   20984:	beq	20998 <__assert_fail@plt+0xf86c>
   20988:	mov	r1, r4
   2098c:	bl	20184 <__assert_fail@plt+0xf058>
   20990:	cmp	r0, #0
   20994:	beq	209a4 <__assert_fail@plt+0xf878>
   20998:	mov	r0, r5
   2099c:	add	sp, sp, #8
   209a0:	pop	{r4, r5, r6, pc}
   209a4:	mov	r0, r5
   209a8:	bl	1100c <strlen@plt>
   209ac:	mov	r6, r0
   209b0:	mov	r0, r4
   209b4:	bl	1100c <strlen@plt>
   209b8:	add	r0, r6, r0
   209bc:	add	r0, r0, #4
   209c0:	bl	23880 <__assert_fail@plt+0x12754>
   209c4:	str	r5, [sp]
   209c8:	str	r4, [sp, #4]
   209cc:	ldr	r3, [pc, #28]	; 209f0 <__assert_fail@plt+0xf8c4>
   209d0:	mvn	r2, #0
   209d4:	mov	r1, #1
   209d8:	mov	r6, r0
   209dc:	bl	1103c <__sprintf_chk@plt>
   209e0:	mov	r5, r6
   209e4:	mov	r0, r5
   209e8:	add	sp, sp, #8
   209ec:	pop	{r4, r5, r6, pc}
   209f0:	muleq	r2, r8, r6
   209f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   209f8:	mov	r2, #5
   209fc:	sub	sp, sp, #8
   20a00:	mov	r8, r0
   20a04:	mov	r6, r1
   20a08:	mov	r1, r0
   20a0c:	mov	r0, #0
   20a10:	bl	10f04 <dcgettext@plt>
   20a14:	mov	r7, r0
   20a18:	bl	241e4 <__assert_fail@plt+0x130b8>
   20a1c:	ldr	r1, [pc, #612]	; 20c88 <__assert_fail@plt+0xfb5c>
   20a20:	mov	r5, r0
   20a24:	bl	23f6c <__assert_fail@plt+0x12e40>
   20a28:	subs	r4, r0, #0
   20a2c:	bne	20b04 <__assert_fail@plt+0xf9d8>
   20a30:	cmp	r6, #0
   20a34:	movne	r9, r4
   20a38:	movne	r5, r6
   20a3c:	movne	sl, r6
   20a40:	beq	20c64 <__assert_fail@plt+0xfb38>
   20a44:	mov	r1, r8
   20a48:	mov	r0, r7
   20a4c:	bl	10e8c <strcmp@plt>
   20a50:	cmp	r0, #0
   20a54:	bne	20a8c <__assert_fail@plt+0xf960>
   20a58:	cmp	r4, r6
   20a5c:	cmpne	r4, #0
   20a60:	moveq	r7, r6
   20a64:	bne	20a74 <__assert_fail@plt+0xf948>
   20a68:	mov	r0, r7
   20a6c:	add	sp, sp, #8
   20a70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20a74:	mov	r0, r4
   20a78:	bl	17b4c <__assert_fail@plt+0x6a20>
   20a7c:	mov	r7, r6
   20a80:	mov	r0, r7
   20a84:	add	sp, sp, #8
   20a88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20a8c:	mov	r1, r8
   20a90:	mov	r0, r7
   20a94:	bl	20184 <__assert_fail@plt+0xf058>
   20a98:	cmp	r0, #0
   20a9c:	bne	20ad8 <__assert_fail@plt+0xf9ac>
   20aa0:	cmp	sl, #0
   20aa4:	beq	20abc <__assert_fail@plt+0xf990>
   20aa8:	mov	r1, sl
   20aac:	mov	r0, r7
   20ab0:	bl	20184 <__assert_fail@plt+0xf058>
   20ab4:	cmp	r0, #0
   20ab8:	bne	20ad8 <__assert_fail@plt+0xf9ac>
   20abc:	cmp	r5, #0
   20ac0:	beq	20bfc <__assert_fail@plt+0xfad0>
   20ac4:	mov	r1, r5
   20ac8:	mov	r0, r7
   20acc:	bl	20184 <__assert_fail@plt+0xf058>
   20ad0:	cmp	r0, #0
   20ad4:	beq	20bfc <__assert_fail@plt+0xfad0>
   20ad8:	cmp	r9, #0
   20adc:	beq	20ae8 <__assert_fail@plt+0xf9bc>
   20ae0:	mov	r0, r9
   20ae4:	bl	17b4c <__assert_fail@plt+0x6a20>
   20ae8:	cmp	r4, #0
   20aec:	beq	20a68 <__assert_fail@plt+0xf93c>
   20af0:	mov	r0, r4
   20af4:	bl	17b4c <__assert_fail@plt+0x6a20>
   20af8:	mov	r0, r7
   20afc:	add	sp, sp, #8
   20b00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20b04:	mov	r2, r5
   20b08:	ldr	r1, [pc, #376]	; 20c88 <__assert_fail@plt+0xfb5c>
   20b0c:	mov	r0, r6
   20b10:	bl	23e70 <__assert_fail@plt+0x12d44>
   20b14:	mov	r9, r0
   20b18:	mov	r0, r5
   20b1c:	bl	1100c <strlen@plt>
   20b20:	mov	r4, r0
   20b24:	add	r0, r0, #11
   20b28:	bl	23880 <__assert_fail@plt+0x12754>
   20b2c:	mov	r2, r4
   20b30:	mov	r1, r5
   20b34:	mov	sl, r0
   20b38:	bl	10ed4 <memcpy@plt>
   20b3c:	ldr	r3, [pc, #328]	; 20c8c <__assert_fail@plt+0xfb60>
   20b40:	add	ip, sl, r4
   20b44:	mov	r2, sl
   20b48:	ldm	r3!, {r0, r1}
   20b4c:	ldrh	lr, [r3]
   20b50:	ldrb	r3, [r3, #2]
   20b54:	str	r0, [sl, r4]
   20b58:	str	r1, [ip, #4]
   20b5c:	strh	lr, [ip, #8]
   20b60:	ldr	r1, [pc, #288]	; 20c88 <__assert_fail@plt+0xfb5c>
   20b64:	strb	r3, [ip, #10]
   20b68:	mov	r0, r6
   20b6c:	bl	23e70 <__assert_fail@plt+0x12d44>
   20b70:	mov	r4, r0
   20b74:	mov	r0, sl
   20b78:	bl	17b4c <__assert_fail@plt+0x6a20>
   20b7c:	cmp	r4, #0
   20b80:	beq	20ba0 <__assert_fail@plt+0xfa74>
   20b84:	mov	r1, #63	; 0x3f
   20b88:	mov	r0, r4
   20b8c:	bl	11018 <strchr@plt>
   20b90:	cmp	r0, #0
   20b94:	beq	20bc8 <__assert_fail@plt+0xfa9c>
   20b98:	mov	r0, r4
   20b9c:	bl	17b4c <__assert_fail@plt+0x6a20>
   20ba0:	cmp	r9, #0
   20ba4:	moveq	sl, r9
   20ba8:	moveq	r6, r8
   20bac:	moveq	r5, r9
   20bb0:	moveq	r4, r9
   20bb4:	movne	r5, #0
   20bb8:	movne	r4, r5
   20bbc:	movne	sl, r9
   20bc0:	movne	r6, r9
   20bc4:	b	20a44 <__assert_fail@plt+0xf918>
   20bc8:	subs	sl, r9, #0
   20bcc:	mov	r5, r4
   20bd0:	moveq	r6, r4
   20bd4:	movne	r6, r9
   20bd8:	b	20a44 <__assert_fail@plt+0xf918>
   20bdc:	mov	r1, r8
   20be0:	mov	r0, r7
   20be4:	bl	20184 <__assert_fail@plt+0xf058>
   20be8:	cmp	r0, #0
   20bec:	bne	20a68 <__assert_fail@plt+0xf93c>
   20bf0:	mov	r9, r0
   20bf4:	mov	r6, r8
   20bf8:	mov	r4, r0
   20bfc:	mov	r0, r7
   20c00:	bl	1100c <strlen@plt>
   20c04:	mov	r5, r0
   20c08:	mov	r0, r6
   20c0c:	bl	1100c <strlen@plt>
   20c10:	add	r0, r5, r0
   20c14:	add	r0, r0, #4
   20c18:	bl	23880 <__assert_fail@plt+0x12754>
   20c1c:	str	r6, [sp, #4]
   20c20:	str	r7, [sp]
   20c24:	ldr	r3, [pc, #100]	; 20c90 <__assert_fail@plt+0xfb64>
   20c28:	mvn	r2, #0
   20c2c:	mov	r1, #1
   20c30:	mov	r5, r0
   20c34:	bl	1103c <__sprintf_chk@plt>
   20c38:	cmp	r9, #0
   20c3c:	beq	20c48 <__assert_fail@plt+0xfb1c>
   20c40:	mov	r0, r9
   20c44:	bl	17b4c <__assert_fail@plt+0x6a20>
   20c48:	cmp	r4, #0
   20c4c:	moveq	r7, r5
   20c50:	beq	20a68 <__assert_fail@plt+0xf93c>
   20c54:	mov	r0, r4
   20c58:	bl	17b4c <__assert_fail@plt+0x6a20>
   20c5c:	mov	r7, r5
   20c60:	b	20a68 <__assert_fail@plt+0xf93c>
   20c64:	mov	r1, r8
   20c68:	mov	r0, r7
   20c6c:	bl	10e8c <strcmp@plt>
   20c70:	cmp	r0, #0
   20c74:	bne	20bdc <__assert_fail@plt+0xfab0>
   20c78:	mov	r7, r8
   20c7c:	mov	r0, r7
   20c80:	add	sp, sp, #8
   20c84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20c88:	andeq	sl, r2, r0, lsr #13
   20c8c:	andeq	sl, r2, r8, lsr #13
   20c90:	muleq	r2, r8, r6
   20c94:	push	{r4, r5, r6, lr}
   20c98:	mov	r2, #48	; 0x30
   20c9c:	mov	r4, r1
   20ca0:	mov	r1, #0
   20ca4:	mov	r5, r0
   20ca8:	bl	11054 <memset@plt>
   20cac:	cmp	r4, #10
   20cb0:	beq	20cc0 <__assert_fail@plt+0xfb94>
   20cb4:	str	r4, [r5]
   20cb8:	mov	r0, r5
   20cbc:	pop	{r4, r5, r6, pc}
   20cc0:	bl	11120 <abort@plt>
   20cc4:	push	{r4, r5, r6, lr}
   20cc8:	mov	r4, r0
   20ccc:	mov	r5, r1
   20cd0:	bl	241e4 <__assert_fail@plt+0x130b8>
   20cd4:	ldrb	r3, [r0]
   20cd8:	bic	r3, r3, #32
   20cdc:	cmp	r3, #85	; 0x55
   20ce0:	bne	20d40 <__assert_fail@plt+0xfc14>
   20ce4:	ldrb	r3, [r0, #1]
   20ce8:	bic	r3, r3, #32
   20cec:	cmp	r3, #84	; 0x54
   20cf0:	bne	20d7c <__assert_fail@plt+0xfc50>
   20cf4:	ldrb	r3, [r0, #2]
   20cf8:	bic	r3, r3, #32
   20cfc:	cmp	r3, #70	; 0x46
   20d00:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d04:	ldrb	r3, [r0, #3]
   20d08:	cmp	r3, #45	; 0x2d
   20d0c:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d10:	ldrb	r3, [r0, #4]
   20d14:	cmp	r3, #56	; 0x38
   20d18:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d1c:	ldrb	r3, [r0, #5]
   20d20:	cmp	r3, #0
   20d24:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d28:	ldrb	r2, [r4]
   20d2c:	ldr	r3, [pc, #152]	; 20dcc <__assert_fail@plt+0xfca0>
   20d30:	ldr	r0, [pc, #152]	; 20dd0 <__assert_fail@plt+0xfca4>
   20d34:	cmp	r2, #96	; 0x60
   20d38:	movne	r0, r3
   20d3c:	pop	{r4, r5, r6, pc}
   20d40:	cmp	r3, #71	; 0x47
   20d44:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d48:	ldrb	r3, [r0, #1]
   20d4c:	bic	r3, r3, #32
   20d50:	cmp	r3, #66	; 0x42
   20d54:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d58:	ldrb	r3, [r0, #2]
   20d5c:	cmp	r3, #49	; 0x31
   20d60:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d64:	ldrb	r3, [r0, #3]
   20d68:	cmp	r3, #56	; 0x38
   20d6c:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d70:	ldrb	r3, [r0, #4]
   20d74:	cmp	r3, #48	; 0x30
   20d78:	beq	20d90 <__assert_fail@plt+0xfc64>
   20d7c:	ldr	r3, [pc, #80]	; 20dd4 <__assert_fail@plt+0xfca8>
   20d80:	cmp	r5, #9
   20d84:	ldr	r0, [pc, #76]	; 20dd8 <__assert_fail@plt+0xfcac>
   20d88:	movne	r0, r3
   20d8c:	pop	{r4, r5, r6, pc}
   20d90:	ldrb	r3, [r0, #5]
   20d94:	cmp	r3, #51	; 0x33
   20d98:	bne	20d7c <__assert_fail@plt+0xfc50>
   20d9c:	ldrb	r3, [r0, #6]
   20da0:	cmp	r3, #48	; 0x30
   20da4:	bne	20d7c <__assert_fail@plt+0xfc50>
   20da8:	ldrb	r3, [r0, #7]
   20dac:	cmp	r3, #0
   20db0:	bne	20d7c <__assert_fail@plt+0xfc50>
   20db4:	ldrb	r2, [r4]
   20db8:	ldr	r3, [pc, #28]	; 20ddc <__assert_fail@plt+0xfcb0>
   20dbc:	ldr	r0, [pc, #28]	; 20de0 <__assert_fail@plt+0xfcb4>
   20dc0:	cmp	r2, #96	; 0x60
   20dc4:	movne	r0, r3
   20dc8:	pop	{r4, r5, r6, pc}
   20dcc:	andeq	sl, r2, ip, lsl #14
   20dd0:	andeq	sl, r2, r8, lsl #14
   20dd4:	andeq	sl, r2, ip, lsl r7
   20dd8:	andeq	sl, r2, r8, lsl r7
   20ddc:	andeq	sl, r2, r4, lsl r7
   20de0:	andeq	sl, r2, r0, lsl r7
   20de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20de8:	sub	sp, sp, #116	; 0x74
   20dec:	mov	sl, r0
   20df0:	str	r3, [sp, #24]
   20df4:	mov	r3, #1
   20df8:	mov	r8, r1
   20dfc:	str	r2, [sp, #56]	; 0x38
   20e00:	str	r3, [sp, #36]	; 0x24
   20e04:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   20e08:	ldr	r3, [sp, #156]	; 0x9c
   20e0c:	mov	fp, r8
   20e10:	mov	r2, #0
   20e14:	lsr	r3, r3, #1
   20e18:	and	r3, r3, #1
   20e1c:	str	r2, [sp, #68]	; 0x44
   20e20:	str	r3, [sp, #28]
   20e24:	str	r2, [sp, #40]	; 0x28
   20e28:	str	r2, [sp, #44]	; 0x2c
   20e2c:	str	r2, [sp, #52]	; 0x34
   20e30:	str	r2, [sp, #64]	; 0x40
   20e34:	str	r2, [sp, #72]	; 0x48
   20e38:	str	sl, [sp, #32]
   20e3c:	str	r0, [sp, #76]	; 0x4c
   20e40:	ldr	r3, [sp, #152]	; 0x98
   20e44:	cmp	r3, #10
   20e48:	ldrls	pc, [pc, r3, lsl #2]
   20e4c:	b	2200c <__assert_fail@plt+0x10ee0>
   20e50:	andeq	r0, r2, ip, ror lr
   20e54:	andeq	r1, r2, r4, ror #2
   20e58:	andeq	r1, r2, r8, lsl #3
   20e5c:	andeq	r1, r2, ip, lsr #3
   20e60:	ldrdeq	r1, [r2], -r8
   20e64:	andeq	r1, r2, ip, lsr #5
   20e68:	andeq	r1, r2, r4, lsl #5
   20e6c:	andeq	r1, r2, r0, asr #3
   20e70:	ldrdeq	r1, [r2], -r8
   20e74:	ldrdeq	r1, [r2], -r8
   20e78:	ldrdeq	r1, [r2], -r8
   20e7c:	mov	r3, #0
   20e80:	mov	r7, r3
   20e84:	str	r3, [sp, #28]
   20e88:	ldr	r3, [sp, #44]	; 0x2c
   20e8c:	mov	sl, #0
   20e90:	eor	r3, r3, #1
   20e94:	str	r3, [sp, #60]	; 0x3c
   20e98:	ldr	r3, [sp, #24]
   20e9c:	cmn	r3, #1
   20ea0:	beq	21404 <__assert_fail@plt+0x102d8>
   20ea4:	ldr	r3, [sp, #24]
   20ea8:	subs	r5, r3, sl
   20eac:	movne	r5, #1
   20eb0:	cmp	r5, #0
   20eb4:	beq	2141c <__assert_fail@plt+0x102f0>
   20eb8:	ldr	r3, [sp, #152]	; 0x98
   20ebc:	ldr	r8, [sp, #44]	; 0x2c
   20ec0:	cmp	r3, #2
   20ec4:	moveq	r8, #0
   20ec8:	andne	r8, r8, #1
   20ecc:	ldr	r3, [sp, #52]	; 0x34
   20ed0:	adds	r9, r3, #0
   20ed4:	movne	r9, #1
   20ed8:	ands	r6, r9, r8
   20edc:	beq	21884 <__assert_fail@plt+0x10758>
   20ee0:	ldr	r2, [sp, #52]	; 0x34
   20ee4:	ldr	r1, [sp, #24]
   20ee8:	cmp	r2, #1
   20eec:	mov	r3, r2
   20ef0:	movls	r3, #0
   20ef4:	movhi	r3, #1
   20ef8:	cmn	r1, #1
   20efc:	movne	r3, #0
   20f00:	cmp	r3, #0
   20f04:	add	r4, sl, r2
   20f08:	beq	20f18 <__assert_fail@plt+0xfdec>
   20f0c:	ldr	r0, [sp, #56]	; 0x38
   20f10:	bl	1100c <strlen@plt>
   20f14:	str	r0, [sp, #24]
   20f18:	ldr	r3, [sp, #24]
   20f1c:	cmp	r3, r4
   20f20:	ldr	r3, [sp, #56]	; 0x38
   20f24:	add	r3, r3, sl
   20f28:	str	r3, [sp, #48]	; 0x30
   20f2c:	bcc	21890 <__assert_fail@plt+0x10764>
   20f30:	mov	r0, r3
   20f34:	ldr	r2, [sp, #52]	; 0x34
   20f38:	ldr	r1, [sp, #64]	; 0x40
   20f3c:	bl	10eec <memcmp@plt>
   20f40:	cmp	r0, #0
   20f44:	bne	21890 <__assert_fail@plt+0x10764>
   20f48:	ldr	r3, [sp, #28]
   20f4c:	cmp	r3, #0
   20f50:	bne	2210c <__assert_fail@plt+0x10fe0>
   20f54:	ldr	r3, [sp, #48]	; 0x30
   20f58:	ldrb	r4, [r3]
   20f5c:	cmp	r4, #126	; 0x7e
   20f60:	ldrls	pc, [pc, r4, lsl #2]
   20f64:	b	21824 <__assert_fail@plt+0x106f8>
   20f68:	andeq	r1, r2, r8, asr #12
   20f6c:	andeq	r1, r2, r4, lsr #16
   20f70:	andeq	r1, r2, r4, lsr #16
   20f74:	andeq	r1, r2, r4, lsr #16
   20f78:	andeq	r1, r2, r4, lsr #16
   20f7c:	andeq	r1, r2, r4, lsr #16
   20f80:	andeq	r1, r2, r4, lsr #16
   20f84:	andeq	r1, r2, ip, lsr #12
   20f88:	andeq	r1, r2, r0, lsl r6
   20f8c:	andeq	r1, r2, ip, lsl #16
   20f90:	andeq	r1, r2, r0, ror r5
   20f94:	andeq	r1, r2, r4, asr r5
   20f98:	andeq	r1, r2, r8, ror #15
   20f9c:	andeq	r1, r2, r4, asr #15
   20fa0:	andeq	r1, r2, r4, lsr #16
   20fa4:	andeq	r1, r2, r4, lsr #16
   20fa8:	andeq	r1, r2, r4, lsr #16
   20fac:	andeq	r1, r2, r4, lsr #16
   20fb0:	andeq	r1, r2, r4, lsr #16
   20fb4:	andeq	r1, r2, r4, lsr #16
   20fb8:	andeq	r1, r2, r4, lsr #16
   20fbc:	andeq	r1, r2, r4, lsr #16
   20fc0:	andeq	r1, r2, r4, lsr #16
   20fc4:	andeq	r1, r2, r4, lsr #16
   20fc8:	andeq	r1, r2, r4, lsr #16
   20fcc:	andeq	r1, r2, r4, lsr #16
   20fd0:	andeq	r1, r2, r4, lsr #16
   20fd4:	andeq	r1, r2, r4, lsr #16
   20fd8:	andeq	r1, r2, r4, lsr #16
   20fdc:	andeq	r1, r2, r4, lsr #16
   20fe0:	andeq	r1, r2, r4, lsr #16
   20fe4:	andeq	r1, r2, r4, lsr #16
   20fe8:	andeq	r1, r2, r4, lsl #16
   20fec:	andeq	r1, r2, r8, lsr r7
   20ff0:	andeq	r1, r2, r8, lsr r7
   20ff4:	andeq	r1, r2, r8, asr #6
   20ff8:	andeq	r1, r2, r8, lsr r7
   20ffc:	ldrdeq	r1, [r2], -r0
   21000:	andeq	r1, r2, r8, lsr r7
   21004:	andeq	r1, r2, r4, lsr #15
   21008:	andeq	r1, r2, r8, lsr r7
   2100c:	andeq	r1, r2, r8, lsr r7
   21010:	andeq	r1, r2, r8, lsr r7
   21014:	ldrdeq	r1, [r2], -r0
   21018:	ldrdeq	r1, [r2], -r0
   2101c:	ldrdeq	r1, [r2], -r0
   21020:	ldrdeq	r1, [r2], -r0
   21024:	ldrdeq	r1, [r2], -r0
   21028:	ldrdeq	r1, [r2], -r0
   2102c:	ldrdeq	r1, [r2], -r0
   21030:	ldrdeq	r1, [r2], -r0
   21034:	ldrdeq	r1, [r2], -r0
   21038:	ldrdeq	r1, [r2], -r0
   2103c:	ldrdeq	r1, [r2], -r0
   21040:	ldrdeq	r1, [r2], -r0
   21044:	ldrdeq	r1, [r2], -r0
   21048:	ldrdeq	r1, [r2], -r0
   2104c:	ldrdeq	r1, [r2], -r0
   21050:	ldrdeq	r1, [r2], -r0
   21054:	andeq	r1, r2, r8, lsr r7
   21058:	andeq	r1, r2, r8, lsr r7
   2105c:	andeq	r1, r2, r8, lsr r7
   21060:	andeq	r1, r2, r8, lsr r7
   21064:	andeq	r1, r2, r4, ror r7
   21068:	andeq	r1, r2, r4, lsr #16
   2106c:	ldrdeq	r1, [r2], -r0
   21070:	ldrdeq	r1, [r2], -r0
   21074:	ldrdeq	r1, [r2], -r0
   21078:	ldrdeq	r1, [r2], -r0
   2107c:	ldrdeq	r1, [r2], -r0
   21080:	ldrdeq	r1, [r2], -r0
   21084:	ldrdeq	r1, [r2], -r0
   21088:	ldrdeq	r1, [r2], -r0
   2108c:	ldrdeq	r1, [r2], -r0
   21090:	ldrdeq	r1, [r2], -r0
   21094:	ldrdeq	r1, [r2], -r0
   21098:	ldrdeq	r1, [r2], -r0
   2109c:	ldrdeq	r1, [r2], -r0
   210a0:	ldrdeq	r1, [r2], -r0
   210a4:	ldrdeq	r1, [r2], -r0
   210a8:	ldrdeq	r1, [r2], -r0
   210ac:	ldrdeq	r1, [r2], -r0
   210b0:	ldrdeq	r1, [r2], -r0
   210b4:	ldrdeq	r1, [r2], -r0
   210b8:	ldrdeq	r1, [r2], -r0
   210bc:	ldrdeq	r1, [r2], -r0
   210c0:	ldrdeq	r1, [r2], -r0
   210c4:	ldrdeq	r1, [r2], -r0
   210c8:	ldrdeq	r1, [r2], -r0
   210cc:	ldrdeq	r1, [r2], -r0
   210d0:	ldrdeq	r1, [r2], -r0
   210d4:	andeq	r1, r2, r8, lsr r7
   210d8:	muleq	r2, r4, r4
   210dc:	ldrdeq	r1, [r2], -r0
   210e0:	andeq	r1, r2, r8, lsr r7
   210e4:	ldrdeq	r1, [r2], -r0
   210e8:	andeq	r1, r2, r8, lsr r7
   210ec:	ldrdeq	r1, [r2], -r0
   210f0:	ldrdeq	r1, [r2], -r0
   210f4:	ldrdeq	r1, [r2], -r0
   210f8:	ldrdeq	r1, [r2], -r0
   210fc:	ldrdeq	r1, [r2], -r0
   21100:	ldrdeq	r1, [r2], -r0
   21104:	ldrdeq	r1, [r2], -r0
   21108:	ldrdeq	r1, [r2], -r0
   2110c:	ldrdeq	r1, [r2], -r0
   21110:	ldrdeq	r1, [r2], -r0
   21114:	ldrdeq	r1, [r2], -r0
   21118:	ldrdeq	r1, [r2], -r0
   2111c:	ldrdeq	r1, [r2], -r0
   21120:	ldrdeq	r1, [r2], -r0
   21124:	ldrdeq	r1, [r2], -r0
   21128:	ldrdeq	r1, [r2], -r0
   2112c:	ldrdeq	r1, [r2], -r0
   21130:	ldrdeq	r1, [r2], -r0
   21134:	ldrdeq	r1, [r2], -r0
   21138:	ldrdeq	r1, [r2], -r0
   2113c:	ldrdeq	r1, [r2], -r0
   21140:	ldrdeq	r1, [r2], -r0
   21144:	ldrdeq	r1, [r2], -r0
   21148:	ldrdeq	r1, [r2], -r0
   2114c:	ldrdeq	r1, [r2], -r0
   21150:	ldrdeq	r1, [r2], -r0
   21154:	andeq	r1, r2, r8, lsr #6
   21158:	andeq	r1, r2, r8, lsr r7
   2115c:	andeq	r1, r2, r8, lsr #6
   21160:	andeq	r1, r2, r8, asr #6
   21164:	mov	r3, #1
   21168:	str	r3, [sp, #28]
   2116c:	str	r3, [sp, #52]	; 0x34
   21170:	ldr	r3, [pc, #4000]	; 22118 <__assert_fail@plt+0x10fec>
   21174:	mov	r7, #0
   21178:	str	r3, [sp, #64]	; 0x40
   2117c:	mov	r3, #2
   21180:	str	r3, [sp, #152]	; 0x98
   21184:	b	20e88 <__assert_fail@plt+0xfd5c>
   21188:	ldr	r3, [sp, #28]
   2118c:	cmp	r3, #0
   21190:	beq	212ec <__assert_fail@plt+0x101c0>
   21194:	mov	r3, #1
   21198:	str	r3, [sp, #52]	; 0x34
   2119c:	ldr	r3, [pc, #3956]	; 22118 <__assert_fail@plt+0x10fec>
   211a0:	mov	r7, #0
   211a4:	str	r3, [sp, #64]	; 0x40
   211a8:	b	20e88 <__assert_fail@plt+0xfd5c>
   211ac:	mov	r3, #1
   211b0:	str	r3, [sp, #44]	; 0x2c
   211b4:	str	r3, [sp, #52]	; 0x34
   211b8:	str	r3, [sp, #28]
   211bc:	b	21170 <__assert_fail@plt+0x10044>
   211c0:	mov	r3, #0
   211c4:	str	r3, [sp, #28]
   211c8:	mov	r3, #1
   211cc:	str	r3, [sp, #44]	; 0x2c
   211d0:	mov	r7, #0
   211d4:	b	20e88 <__assert_fail@plt+0xfd5c>
   211d8:	ldr	r3, [sp, #152]	; 0x98
   211dc:	cmp	r3, #10
   211e0:	beq	21224 <__assert_fail@plt+0x100f8>
   211e4:	mov	r2, #5
   211e8:	ldr	r1, [pc, #3884]	; 2211c <__assert_fail@plt+0x10ff0>
   211ec:	mov	r0, #0
   211f0:	bl	10f04 <dcgettext@plt>
   211f4:	ldr	r2, [pc, #3872]	; 2211c <__assert_fail@plt+0x10ff0>
   211f8:	cmp	r0, r2
   211fc:	str	r0, [sp, #164]	; 0xa4
   21200:	beq	22208 <__assert_fail@plt+0x110dc>
   21204:	mov	r2, #5
   21208:	ldr	r1, [pc, #3848]	; 22118 <__assert_fail@plt+0x10fec>
   2120c:	mov	r0, #0
   21210:	bl	10f04 <dcgettext@plt>
   21214:	ldr	r2, [pc, #3836]	; 22118 <__assert_fail@plt+0x10fec>
   21218:	cmp	r0, r2
   2121c:	str	r0, [sp, #168]	; 0xa8
   21220:	beq	221f8 <__assert_fail@plt+0x110cc>
   21224:	ldr	r7, [sp, #28]
   21228:	cmp	r7, #0
   2122c:	movne	r7, #0
   21230:	bne	21264 <__assert_fail@plt+0x10138>
   21234:	ldr	r3, [sp, #164]	; 0xa4
   21238:	ldrb	r3, [r3]
   2123c:	cmp	r3, #0
   21240:	beq	22218 <__assert_fail@plt+0x110ec>
   21244:	ldr	r2, [sp, #164]	; 0xa4
   21248:	ldr	r1, [sp, #32]
   2124c:	cmp	fp, r7
   21250:	strbhi	r3, [r1, r7]
   21254:	ldrb	r3, [r2, #1]!
   21258:	add	r7, r7, #1
   2125c:	cmp	r3, #0
   21260:	bne	2124c <__assert_fail@plt+0x10120>
   21264:	ldr	r0, [sp, #168]	; 0xa8
   21268:	bl	1100c <strlen@plt>
   2126c:	ldr	r3, [sp, #168]	; 0xa8
   21270:	str	r3, [sp, #64]	; 0x40
   21274:	mov	r3, #1
   21278:	str	r3, [sp, #44]	; 0x2c
   2127c:	str	r0, [sp, #52]	; 0x34
   21280:	b	20e88 <__assert_fail@plt+0xfd5c>
   21284:	mov	r3, #1
   21288:	str	r3, [sp, #44]	; 0x2c
   2128c:	str	r3, [sp, #52]	; 0x34
   21290:	str	r3, [sp, #28]
   21294:	ldr	r3, [pc, #3716]	; 22120 <__assert_fail@plt+0x10ff4>
   21298:	mov	r7, #0
   2129c:	str	r3, [sp, #64]	; 0x40
   212a0:	mov	r3, #5
   212a4:	str	r3, [sp, #152]	; 0x98
   212a8:	b	20e88 <__assert_fail@plt+0xfd5c>
   212ac:	ldr	r3, [sp, #28]
   212b0:	cmp	r3, #0
   212b4:	beq	21fb4 <__assert_fail@plt+0x10e88>
   212b8:	ldr	r3, [sp, #28]
   212bc:	mov	r7, #0
   212c0:	str	r3, [sp, #44]	; 0x2c
   212c4:	mov	r3, #1
   212c8:	str	r3, [sp, #52]	; 0x34
   212cc:	ldr	r3, [pc, #3660]	; 22120 <__assert_fail@plt+0x10ff4>
   212d0:	str	r3, [sp, #64]	; 0x40
   212d4:	b	20e88 <__assert_fail@plt+0xfd5c>
   212d8:	ldr	r3, [sp, #28]
   212dc:	cmp	r3, #0
   212e0:	mov	r3, #1
   212e4:	streq	r3, [sp, #44]	; 0x2c
   212e8:	bne	2116c <__assert_fail@plt+0x10040>
   212ec:	cmp	fp, #0
   212f0:	beq	21fe4 <__assert_fail@plt+0x10eb8>
   212f4:	ldr	r3, [sp, #32]
   212f8:	mov	r2, #39	; 0x27
   212fc:	mov	r7, #1
   21300:	strb	r2, [r3]
   21304:	mov	r3, #0
   21308:	str	r3, [sp, #28]
   2130c:	mov	r3, #1
   21310:	str	r3, [sp, #52]	; 0x34
   21314:	ldr	r3, [pc, #3580]	; 22118 <__assert_fail@plt+0x10fec>
   21318:	str	r3, [sp, #64]	; 0x40
   2131c:	mov	r3, #2
   21320:	str	r3, [sp, #152]	; 0x98
   21324:	b	20e88 <__assert_fail@plt+0xfd5c>
   21328:	ldr	r3, [sp, #24]
   2132c:	cmn	r3, #1
   21330:	beq	21f48 <__assert_fail@plt+0x10e1c>
   21334:	ldr	r3, [sp, #24]
   21338:	subs	r3, r3, #1
   2133c:	movne	r3, #1
   21340:	cmp	r3, #0
   21344:	bne	21350 <__assert_fail@plt+0x10224>
   21348:	cmp	sl, #0
   2134c:	beq	2173c <__assert_fail@plt+0x10610>
   21350:	ldr	r3, [sp, #152]	; 0x98
   21354:	mov	r5, #0
   21358:	sub	r2, r3, #2
   2135c:	mov	r8, r5
   21360:	clz	r2, r2
   21364:	lsr	r2, r2, #5
   21368:	ldr	r3, [sp, #60]	; 0x3c
   2136c:	ldr	r1, [sp, #28]
   21370:	orr	r3, r2, r3
   21374:	eor	r3, r3, #1
   21378:	orr	r3, r1, r3
   2137c:	tst	r3, #255	; 0xff
   21380:	bne	21aac <__assert_fail@plt+0x10980>
   21384:	cmp	r6, #0
   21388:	bne	214d8 <__assert_fail@plt+0x103ac>
   2138c:	ldr	r3, [sp, #40]	; 0x28
   21390:	eor	r8, r8, #1
   21394:	and	r8, r8, r3
   21398:	add	sl, sl, #1
   2139c:	uxtb	r6, r8
   213a0:	cmp	r6, #0
   213a4:	beq	213d8 <__assert_fail@plt+0x102ac>
   213a8:	cmp	fp, r7
   213ac:	movhi	r2, #39	; 0x27
   213b0:	ldrhi	r3, [sp, #32]
   213b4:	strbhi	r2, [r3, r7]
   213b8:	add	r3, r7, #1
   213bc:	cmp	fp, r3
   213c0:	movhi	r1, #39	; 0x27
   213c4:	ldrhi	r2, [sp, #32]
   213c8:	add	r7, r7, #2
   213cc:	strbhi	r1, [r2, r3]
   213d0:	mov	r3, #0
   213d4:	str	r3, [sp, #40]	; 0x28
   213d8:	cmp	r7, fp
   213dc:	ldrcc	r3, [sp, #32]
   213e0:	strbcc	r4, [r3, r7]
   213e4:	ldr	r3, [sp, #36]	; 0x24
   213e8:	cmp	r5, #0
   213ec:	moveq	r3, #0
   213f0:	str	r3, [sp, #36]	; 0x24
   213f4:	ldr	r3, [sp, #24]
   213f8:	add	r7, r7, #1
   213fc:	cmn	r3, #1
   21400:	bne	20ea4 <__assert_fail@plt+0xfd78>
   21404:	ldr	r3, [sp, #56]	; 0x38
   21408:	ldrb	r5, [r3, sl]
   2140c:	adds	r5, r5, #0
   21410:	movne	r5, #1
   21414:	cmp	r5, #0
   21418:	bne	20eb8 <__assert_fail@plt+0xfd8c>
   2141c:	ldr	r3, [sp, #152]	; 0x98
   21420:	ldr	r1, [sp, #28]
   21424:	sub	r3, r3, #2
   21428:	clz	r3, r3
   2142c:	lsr	r3, r3, #5
   21430:	and	r9, r1, r3
   21434:	cmp	r7, #0
   21438:	movne	r2, #0
   2143c:	andeq	r2, r9, #1
   21440:	cmp	r2, #0
   21444:	bne	21e20 <__assert_fail@plt+0x10cf4>
   21448:	eor	r2, r1, #1
   2144c:	ands	r3, r3, r2
   21450:	beq	222dc <__assert_fail@plt+0x111b0>
   21454:	ldr	r2, [sp, #68]	; 0x44
   21458:	cmp	r2, #0
   2145c:	beq	222c8 <__assert_fail@plt+0x1119c>
   21460:	ldr	r3, [sp, #36]	; 0x24
   21464:	cmp	r3, #0
   21468:	bne	22280 <__assert_fail@plt+0x11154>
   2146c:	ldr	r2, [sp, #72]	; 0x48
   21470:	clz	r3, fp
   21474:	cmp	r2, #0
   21478:	lsr	r3, r3, #5
   2147c:	moveq	r3, #0
   21480:	cmp	r3, #0
   21484:	beq	22220 <__assert_fail@plt+0x110f4>
   21488:	str	r3, [sp, #68]	; 0x44
   2148c:	ldr	fp, [sp, #72]	; 0x48
   21490:	b	20e40 <__assert_fail@plt+0xfd14>
   21494:	ldr	r3, [sp, #152]	; 0x98
   21498:	cmp	r3, #2
   2149c:	beq	21af0 <__assert_fail@plt+0x109c4>
   214a0:	ldr	r3, [sp, #44]	; 0x2c
   214a4:	ldr	r2, [sp, #28]
   214a8:	and	r2, r3, r2
   214ac:	ands	r2, r9, r2
   214b0:	bne	21afc <__assert_fail@plt+0x109d0>
   214b4:	mov	r4, #92	; 0x5c
   214b8:	mov	r3, r4
   214bc:	ldr	r1, [sp, #44]	; 0x2c
   214c0:	cmp	r1, #0
   214c4:	moveq	r5, #0
   214c8:	moveq	r8, r1
   214cc:	beq	21368 <__assert_fail@plt+0x1023c>
   214d0:	mov	r4, r3
   214d4:	mov	r5, #0
   214d8:	ldr	r3, [sp, #28]
   214dc:	cmp	r3, #0
   214e0:	bne	21ae4 <__assert_fail@plt+0x109b8>
   214e4:	ldr	r3, [sp, #40]	; 0x28
   214e8:	eor	r9, r3, #1
   214ec:	and	r9, r9, r2
   214f0:	ands	r9, r9, #255	; 0xff
   214f4:	beq	21538 <__assert_fail@plt+0x1040c>
   214f8:	cmp	fp, r7
   214fc:	movhi	r2, #39	; 0x27
   21500:	ldrhi	r3, [sp, #32]
   21504:	str	r9, [sp, #40]	; 0x28
   21508:	strbhi	r2, [r3, r7]
   2150c:	add	r3, r7, #1
   21510:	cmp	fp, r3
   21514:	movhi	r1, #36	; 0x24
   21518:	ldrhi	r2, [sp, #32]
   2151c:	strbhi	r1, [r2, r3]
   21520:	add	r3, r7, #2
   21524:	cmp	fp, r3
   21528:	add	r7, r7, #3
   2152c:	ldrhi	r2, [sp, #32]
   21530:	movhi	r1, #39	; 0x27
   21534:	strbhi	r1, [r2, r3]
   21538:	cmp	fp, r7
   2153c:	movhi	r2, #92	; 0x5c
   21540:	ldrhi	r3, [sp, #32]
   21544:	add	sl, sl, #1
   21548:	strbhi	r2, [r3, r7]
   2154c:	add	r7, r7, #1
   21550:	b	213d8 <__assert_fail@plt+0x102ac>
   21554:	ldr	r3, [sp, #152]	; 0x98
   21558:	mov	r4, #11
   2155c:	sub	r2, r3, #2
   21560:	mov	r3, #118	; 0x76
   21564:	clz	r2, r2
   21568:	lsr	r2, r2, #5
   2156c:	b	214bc <__assert_fail@plt+0x10390>
   21570:	mov	r4, #10
   21574:	mov	r3, #110	; 0x6e
   21578:	ldr	r2, [sp, #152]	; 0x98
   2157c:	ldr	r1, [sp, #28]
   21580:	sub	r2, r2, #2
   21584:	clz	r2, r2
   21588:	lsr	r2, r2, #5
   2158c:	ands	r1, r1, r2
   21590:	beq	214bc <__assert_fail@plt+0x10390>
   21594:	ldr	sl, [sp, #32]
   21598:	mov	r8, fp
   2159c:	mov	r2, r1
   215a0:	mov	r3, #2
   215a4:	str	r3, [sp, #152]	; 0x98
   215a8:	ldr	r9, [sp, #44]	; 0x2c
   215ac:	ldr	r3, [sp, #152]	; 0x98
   215b0:	and	r9, r9, r2
   215b4:	tst	r9, #255	; 0xff
   215b8:	movne	r3, #4
   215bc:	str	r3, [sp, #152]	; 0x98
   215c0:	ldr	r3, [sp, #156]	; 0x9c
   215c4:	mov	ip, #0
   215c8:	bic	r3, r3, #2
   215cc:	str	r3, [sp, #4]
   215d0:	ldr	r3, [sp, #168]	; 0xa8
   215d4:	ldr	r2, [sp, #56]	; 0x38
   215d8:	str	r3, [sp, #16]
   215dc:	ldr	r3, [sp, #164]	; 0xa4
   215e0:	mov	r1, r8
   215e4:	str	r3, [sp, #12]
   215e8:	ldr	r3, [sp, #152]	; 0x98
   215ec:	mov	r0, sl
   215f0:	str	r3, [sp]
   215f4:	str	ip, [sp, #8]
   215f8:	ldr	r3, [sp, #24]
   215fc:	bl	20de4 <__assert_fail@plt+0xfcb8>
   21600:	mov	fp, r0
   21604:	mov	r0, fp
   21608:	add	sp, sp, #116	; 0x74
   2160c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21610:	ldr	r3, [sp, #152]	; 0x98
   21614:	mov	r4, #8
   21618:	sub	r2, r3, #2
   2161c:	mov	r3, #98	; 0x62
   21620:	clz	r2, r2
   21624:	lsr	r2, r2, #5
   21628:	b	214bc <__assert_fail@plt+0x10390>
   2162c:	ldr	r3, [sp, #152]	; 0x98
   21630:	mov	r4, #7
   21634:	sub	r2, r3, #2
   21638:	mov	r3, #97	; 0x61
   2163c:	clz	r2, r2
   21640:	lsr	r2, r2, #5
   21644:	b	214bc <__assert_fail@plt+0x10390>
   21648:	ldr	r3, [sp, #44]	; 0x2c
   2164c:	cmp	r3, #0
   21650:	beq	21e34 <__assert_fail@plt+0x10d08>
   21654:	ldr	r3, [sp, #28]
   21658:	cmp	r3, #0
   2165c:	bne	2210c <__assert_fail@plt+0x10fe0>
   21660:	ldr	r3, [sp, #152]	; 0x98
   21664:	sub	r2, r3, #2
   21668:	ldr	r3, [sp, #40]	; 0x28
   2166c:	clz	r2, r2
   21670:	eor	r3, r3, #1
   21674:	lsr	r2, r2, #5
   21678:	ands	r3, r2, r3
   2167c:	moveq	r1, r7
   21680:	beq	216c4 <__assert_fail@plt+0x10598>
   21684:	cmp	fp, r7
   21688:	movhi	r0, #39	; 0x27
   2168c:	ldrhi	r1, [sp, #32]
   21690:	str	r3, [sp, #40]	; 0x28
   21694:	strbhi	r0, [r1, r7]
   21698:	add	r1, r7, #1
   2169c:	cmp	fp, r1
   216a0:	movhi	ip, #36	; 0x24
   216a4:	ldrhi	r0, [sp, #32]
   216a8:	strbhi	ip, [r0, r1]
   216ac:	add	r1, r7, #2
   216b0:	cmp	fp, r1
   216b4:	movhi	ip, #39	; 0x27
   216b8:	ldrhi	r0, [sp, #32]
   216bc:	strbhi	ip, [r0, r1]
   216c0:	add	r1, r7, #3
   216c4:	cmp	fp, r1
   216c8:	movhi	r0, #92	; 0x5c
   216cc:	ldrhi	r3, [sp, #32]
   216d0:	add	r7, r1, #1
   216d4:	strbhi	r0, [r3, r1]
   216d8:	cmp	r8, #0
   216dc:	beq	22020 <__assert_fail@plt+0x10ef4>
   216e0:	ldr	r0, [sp, #24]
   216e4:	add	r3, sl, #1
   216e8:	cmp	r3, r0
   216ec:	bcs	21f5c <__assert_fail@plt+0x10e30>
   216f0:	ldr	r0, [sp, #56]	; 0x38
   216f4:	ldrb	r3, [r0, r3]
   216f8:	sub	r3, r3, #48	; 0x30
   216fc:	cmp	r3, #9
   21700:	bhi	21f5c <__assert_fail@plt+0x10e30>
   21704:	cmp	fp, r7
   21708:	movhi	r3, #48	; 0x30
   2170c:	ldrhi	r0, [sp, #32]
   21710:	ldr	r5, [sp, #28]
   21714:	mov	r4, #48	; 0x30
   21718:	strbhi	r3, [r0, r7]
   2171c:	add	r3, r1, #2
   21720:	cmp	fp, r3
   21724:	movhi	r0, #48	; 0x30
   21728:	ldrhi	ip, [sp, #32]
   2172c:	add	r7, r1, #3
   21730:	strbhi	r0, [ip, r3]
   21734:	b	21368 <__assert_fail@plt+0x1023c>
   21738:	mov	r5, #0
   2173c:	ldr	r3, [sp, #152]	; 0x98
   21740:	sub	r2, r3, #2
   21744:	ldr	r3, [sp, #28]
   21748:	clz	r2, r2
   2174c:	lsr	r2, r2, #5
   21750:	ands	r8, r3, r2
   21754:	beq	21368 <__assert_fail@plt+0x1023c>
   21758:	mov	r3, r8
   2175c:	mov	r2, r3
   21760:	mov	r3, #2
   21764:	ldr	sl, [sp, #32]
   21768:	mov	r8, fp
   2176c:	str	r3, [sp, #152]	; 0x98
   21770:	b	215a8 <__assert_fail@plt+0x1047c>
   21774:	ldr	r3, [sp, #152]	; 0x98
   21778:	cmp	r3, #2
   2177c:	beq	21ea0 <__assert_fail@plt+0x10d74>
   21780:	cmp	r3, #5
   21784:	beq	21e60 <__assert_fail@plt+0x10d34>
   21788:	mov	r5, #0
   2178c:	sub	r2, r3, #2
   21790:	mov	r8, r5
   21794:	clz	r2, r2
   21798:	mov	r4, #63	; 0x3f
   2179c:	lsr	r2, r2, #5
   217a0:	b	21368 <__assert_fail@plt+0x1023c>
   217a4:	ldr	r3, [sp, #152]	; 0x98
   217a8:	cmp	r3, #2
   217ac:	beq	21ec0 <__assert_fail@plt+0x10d94>
   217b0:	mov	r2, #0
   217b4:	str	r5, [sp, #68]	; 0x44
   217b8:	mov	r8, r2
   217bc:	mov	r4, #39	; 0x27
   217c0:	b	21368 <__assert_fail@plt+0x1023c>
   217c4:	mov	r4, #13
   217c8:	mov	r3, #114	; 0x72
   217cc:	b	21578 <__assert_fail@plt+0x1044c>
   217d0:	ldr	r3, [sp, #152]	; 0x98
   217d4:	mov	r8, #0
   217d8:	sub	r2, r3, #2
   217dc:	clz	r2, r2
   217e0:	lsr	r2, r2, #5
   217e4:	b	21368 <__assert_fail@plt+0x1023c>
   217e8:	ldr	r3, [sp, #152]	; 0x98
   217ec:	mov	r4, #12
   217f0:	sub	r2, r3, #2
   217f4:	mov	r3, #102	; 0x66
   217f8:	clz	r2, r2
   217fc:	lsr	r2, r2, #5
   21800:	b	214bc <__assert_fail@plt+0x10390>
   21804:	mov	r5, r6
   21808:	b	2173c <__assert_fail@plt+0x10610>
   2180c:	ldr	r3, [sp, #152]	; 0x98
   21810:	sub	r2, r3, #2
   21814:	mov	r3, #116	; 0x74
   21818:	clz	r2, r2
   2181c:	lsr	r2, r2, #5
   21820:	b	214bc <__assert_fail@plt+0x10390>
   21824:	ldr	r8, [sp, #76]	; 0x4c
   21828:	cmp	r8, #1
   2182c:	bne	21cdc <__assert_fail@plt+0x10bb0>
   21830:	bl	10fe8 <__ctype_b_loc@plt>
   21834:	sxth	r3, r4
   21838:	mov	ip, r8
   2183c:	lsl	r3, r3, #1
   21840:	ldr	r2, [r0]
   21844:	ldrh	r3, [r2, r3]
   21848:	and	r3, r3, #16384	; 0x4000
   2184c:	cmp	r3, #0
   21850:	movne	r5, #1
   21854:	moveq	r5, #0
   21858:	moveq	r3, #1
   2185c:	movne	r3, #0
   21860:	ldr	r2, [sp, #44]	; 0x2c
   21864:	and	r3, r3, r2
   21868:	ands	r8, r3, #255	; 0xff
   2186c:	bne	21b70 <__assert_fail@plt+0x10a44>
   21870:	ldr	r3, [sp, #152]	; 0x98
   21874:	sub	r2, r3, #2
   21878:	clz	r2, r2
   2187c:	lsr	r2, r2, #5
   21880:	b	21368 <__assert_fail@plt+0x1023c>
   21884:	ldr	r3, [sp, #56]	; 0x38
   21888:	add	r3, r3, sl
   2188c:	str	r3, [sp, #48]	; 0x30
   21890:	ldr	r3, [sp, #48]	; 0x30
   21894:	mov	r6, #0
   21898:	ldrb	r4, [r3]
   2189c:	cmp	r4, #126	; 0x7e
   218a0:	ldrls	pc, [pc, r4, lsl #2]
   218a4:	b	21824 <__assert_fail@plt+0x106f8>
   218a8:	andeq	r1, r2, r8, asr #12
   218ac:	andeq	r1, r2, r4, lsr #16
   218b0:	andeq	r1, r2, r4, lsr #16
   218b4:	andeq	r1, r2, r4, lsr #16
   218b8:	andeq	r1, r2, r4, lsr #16
   218bc:	andeq	r1, r2, r4, lsr #16
   218c0:	andeq	r1, r2, r4, lsr #16
   218c4:	andeq	r1, r2, ip, lsr #12
   218c8:	andeq	r1, r2, r0, lsl r6
   218cc:	andeq	r1, r2, r4, lsr #21
   218d0:	andeq	r1, r2, r0, ror r5
   218d4:	andeq	r1, r2, r4, asr r5
   218d8:	andeq	r1, r2, r8, ror #15
   218dc:	andeq	r1, r2, r4, asr #15
   218e0:	andeq	r1, r2, r4, lsr #16
   218e4:	andeq	r1, r2, r4, lsr #16
   218e8:	andeq	r1, r2, r4, lsr #16
   218ec:	andeq	r1, r2, r4, lsr #16
   218f0:	andeq	r1, r2, r4, lsr #16
   218f4:	andeq	r1, r2, r4, lsr #16
   218f8:	andeq	r1, r2, r4, lsr #16
   218fc:	andeq	r1, r2, r4, lsr #16
   21900:	andeq	r1, r2, r4, lsr #16
   21904:	andeq	r1, r2, r4, lsr #16
   21908:	andeq	r1, r2, r4, lsr #16
   2190c:	andeq	r1, r2, r4, lsr #16
   21910:	andeq	r1, r2, r4, lsr #16
   21914:	andeq	r1, r2, r4, lsr #16
   21918:	andeq	r1, r2, r4, lsr #16
   2191c:	andeq	r1, r2, r4, lsr #16
   21920:	andeq	r1, r2, r4, lsr #16
   21924:	andeq	r1, r2, r4, lsr #16
   21928:	andeq	r1, r2, ip, lsr r7
   2192c:	andeq	r1, r2, r8, lsr r7
   21930:	andeq	r1, r2, r8, lsr r7
   21934:	andeq	r1, r2, r8, asr #6
   21938:	andeq	r1, r2, r8, lsr r7
   2193c:	ldrdeq	r1, [r2], -r0
   21940:	andeq	r1, r2, r8, lsr r7
   21944:	andeq	r1, r2, r4, lsr #15
   21948:	andeq	r1, r2, r8, lsr r7
   2194c:	andeq	r1, r2, r8, lsr r7
   21950:	andeq	r1, r2, r8, lsr r7
   21954:	ldrdeq	r1, [r2], -r0
   21958:	ldrdeq	r1, [r2], -r0
   2195c:	ldrdeq	r1, [r2], -r0
   21960:	ldrdeq	r1, [r2], -r0
   21964:	ldrdeq	r1, [r2], -r0
   21968:	ldrdeq	r1, [r2], -r0
   2196c:	ldrdeq	r1, [r2], -r0
   21970:	ldrdeq	r1, [r2], -r0
   21974:	ldrdeq	r1, [r2], -r0
   21978:	ldrdeq	r1, [r2], -r0
   2197c:	ldrdeq	r1, [r2], -r0
   21980:	ldrdeq	r1, [r2], -r0
   21984:	ldrdeq	r1, [r2], -r0
   21988:	ldrdeq	r1, [r2], -r0
   2198c:	ldrdeq	r1, [r2], -r0
   21990:	ldrdeq	r1, [r2], -r0
   21994:	andeq	r1, r2, r8, lsr r7
   21998:	andeq	r1, r2, r8, lsr r7
   2199c:	andeq	r1, r2, r8, lsr r7
   219a0:	andeq	r1, r2, r8, lsr r7
   219a4:	andeq	r1, r2, r4, ror r7
   219a8:	andeq	r1, r2, r4, lsr #16
   219ac:	ldrdeq	r1, [r2], -r0
   219b0:	ldrdeq	r1, [r2], -r0
   219b4:	ldrdeq	r1, [r2], -r0
   219b8:	ldrdeq	r1, [r2], -r0
   219bc:	ldrdeq	r1, [r2], -r0
   219c0:	ldrdeq	r1, [r2], -r0
   219c4:	ldrdeq	r1, [r2], -r0
   219c8:	ldrdeq	r1, [r2], -r0
   219cc:	ldrdeq	r1, [r2], -r0
   219d0:	ldrdeq	r1, [r2], -r0
   219d4:	ldrdeq	r1, [r2], -r0
   219d8:	ldrdeq	r1, [r2], -r0
   219dc:	ldrdeq	r1, [r2], -r0
   219e0:	ldrdeq	r1, [r2], -r0
   219e4:	ldrdeq	r1, [r2], -r0
   219e8:	ldrdeq	r1, [r2], -r0
   219ec:	ldrdeq	r1, [r2], -r0
   219f0:	ldrdeq	r1, [r2], -r0
   219f4:	ldrdeq	r1, [r2], -r0
   219f8:	ldrdeq	r1, [r2], -r0
   219fc:	ldrdeq	r1, [r2], -r0
   21a00:	ldrdeq	r1, [r2], -r0
   21a04:	ldrdeq	r1, [r2], -r0
   21a08:	ldrdeq	r1, [r2], -r0
   21a0c:	ldrdeq	r1, [r2], -r0
   21a10:	ldrdeq	r1, [r2], -r0
   21a14:	andeq	r1, r2, r8, lsr r7
   21a18:	muleq	r2, r4, r4
   21a1c:	ldrdeq	r1, [r2], -r0
   21a20:	andeq	r1, r2, r8, lsr r7
   21a24:	ldrdeq	r1, [r2], -r0
   21a28:	andeq	r1, r2, r8, lsr r7
   21a2c:	ldrdeq	r1, [r2], -r0
   21a30:	ldrdeq	r1, [r2], -r0
   21a34:	ldrdeq	r1, [r2], -r0
   21a38:	ldrdeq	r1, [r2], -r0
   21a3c:	ldrdeq	r1, [r2], -r0
   21a40:	ldrdeq	r1, [r2], -r0
   21a44:	ldrdeq	r1, [r2], -r0
   21a48:	ldrdeq	r1, [r2], -r0
   21a4c:	ldrdeq	r1, [r2], -r0
   21a50:	ldrdeq	r1, [r2], -r0
   21a54:	ldrdeq	r1, [r2], -r0
   21a58:	ldrdeq	r1, [r2], -r0
   21a5c:	ldrdeq	r1, [r2], -r0
   21a60:	ldrdeq	r1, [r2], -r0
   21a64:	ldrdeq	r1, [r2], -r0
   21a68:	ldrdeq	r1, [r2], -r0
   21a6c:	ldrdeq	r1, [r2], -r0
   21a70:	ldrdeq	r1, [r2], -r0
   21a74:	ldrdeq	r1, [r2], -r0
   21a78:	ldrdeq	r1, [r2], -r0
   21a7c:	ldrdeq	r1, [r2], -r0
   21a80:	ldrdeq	r1, [r2], -r0
   21a84:	ldrdeq	r1, [r2], -r0
   21a88:	ldrdeq	r1, [r2], -r0
   21a8c:	ldrdeq	r1, [r2], -r0
   21a90:	ldrdeq	r1, [r2], -r0
   21a94:	andeq	r1, r2, r8, lsr #6
   21a98:	andeq	r1, r2, r8, lsr r7
   21a9c:	andeq	r1, r2, r8, lsr #6
   21aa0:	andeq	r1, r2, r8, asr #6
   21aa4:	mov	r3, #116	; 0x74
   21aa8:	b	21578 <__assert_fail@plt+0x1044c>
   21aac:	ldr	r3, [sp, #160]	; 0xa0
   21ab0:	cmp	r3, #0
   21ab4:	beq	21384 <__assert_fail@plt+0x10258>
   21ab8:	lsr	r3, r4, #5
   21abc:	ldr	r0, [sp, #160]	; 0xa0
   21ac0:	uxtb	r3, r3
   21ac4:	and	r1, r4, #31
   21ac8:	ldr	r0, [r0, r3, lsl #2]
   21acc:	lsr	r3, r0, r1
   21ad0:	tst	r3, #1
   21ad4:	beq	21384 <__assert_fail@plt+0x10258>
   21ad8:	ldr	r3, [sp, #28]
   21adc:	cmp	r3, #0
   21ae0:	beq	214e4 <__assert_fail@plt+0x103b8>
   21ae4:	ldr	sl, [sp, #32]
   21ae8:	mov	r8, fp
   21aec:	b	215a8 <__assert_fail@plt+0x1047c>
   21af0:	ldr	r3, [sp, #28]
   21af4:	cmp	r3, #0
   21af8:	bne	2204c <__assert_fail@plt+0x10f20>
   21afc:	add	sl, sl, #1
   21b00:	ldr	r6, [sp, #40]	; 0x28
   21b04:	mov	r5, #0
   21b08:	mov	r4, #92	; 0x5c
   21b0c:	b	213a0 <__assert_fail@plt+0x10274>
   21b10:	cmp	r9, r8
   21b14:	bne	21d84 <__assert_fail@plt+0x10c58>
   21b18:	ldr	r0, [sp, #100]	; 0x64
   21b1c:	bl	10f4c <iswprint@plt>
   21b20:	add	r5, r5, r4
   21b24:	cmp	r0, #0
   21b28:	add	r0, sp, #104	; 0x68
   21b2c:	moveq	r6, #0
   21b30:	bl	10ee0 <mbsinit@plt>
   21b34:	cmp	r0, #0
   21b38:	beq	21d18 <__assert_fail@plt+0x10bec>
   21b3c:	mov	r2, r6
   21b40:	mov	ip, r5
   21b44:	eor	r5, r2, #1
   21b48:	ldr	r4, [sp, #80]	; 0x50
   21b4c:	ldr	r6, [sp, #84]	; 0x54
   21b50:	ldr	r7, [sp, #88]	; 0x58
   21b54:	uxtb	r5, r5
   21b58:	cmp	ip, #1
   21b5c:	bls	2205c <__assert_fail@plt+0x10f30>
   21b60:	ldr	r3, [sp, #44]	; 0x2c
   21b64:	and	r8, r3, r5
   21b68:	mov	r5, r2
   21b6c:	uxtb	r8, r8
   21b70:	add	r2, sl, ip
   21b74:	ldr	r0, [sp, #48]	; 0x30
   21b78:	mov	r1, #0
   21b7c:	str	r5, [sp, #48]	; 0x30
   21b80:	ldr	r9, [sp, #28]
   21b84:	ldr	ip, [sp, #40]	; 0x28
   21b88:	ldr	r3, [sp, #32]
   21b8c:	ldr	r5, [sp, #152]	; 0x98
   21b90:	b	21c4c <__assert_fail@plt+0x10b20>
   21b94:	cmp	r9, #0
   21b98:	bne	21f70 <__assert_fail@plt+0x10e44>
   21b9c:	eor	r1, ip, #1
   21ba0:	cmp	r5, #2
   21ba4:	movne	r1, #0
   21ba8:	andeq	r1, r1, #1
   21bac:	cmp	r1, #0
   21bb0:	beq	21be8 <__assert_fail@plt+0x10abc>
   21bb4:	cmp	fp, r7
   21bb8:	movhi	ip, #39	; 0x27
   21bbc:	strbhi	ip, [r3, r7]
   21bc0:	add	ip, r7, #1
   21bc4:	cmp	fp, ip
   21bc8:	movhi	lr, #36	; 0x24
   21bcc:	strbhi	lr, [r3, ip]
   21bd0:	add	ip, r7, #2
   21bd4:	cmp	fp, ip
   21bd8:	movhi	lr, #39	; 0x27
   21bdc:	strbhi	lr, [r3, ip]
   21be0:	add	r7, r7, #3
   21be4:	mov	ip, r1
   21be8:	cmp	fp, r7
   21bec:	movhi	r1, #92	; 0x5c
   21bf0:	strbhi	r1, [r3, r7]
   21bf4:	add	r1, r7, #1
   21bf8:	cmp	fp, r1
   21bfc:	lsrhi	lr, r4, #6
   21c00:	addhi	lr, lr, #48	; 0x30
   21c04:	strbhi	lr, [r3, r1]
   21c08:	add	lr, r7, #2
   21c0c:	cmp	fp, lr
   21c10:	lsrhi	r1, r4, #3
   21c14:	andhi	r1, r1, #7
   21c18:	addhi	r1, r1, #48	; 0x30
   21c1c:	add	sl, sl, #1
   21c20:	strbhi	r1, [r3, lr]
   21c24:	and	r4, r4, #7
   21c28:	cmp	r2, sl
   21c2c:	add	r4, r4, #48	; 0x30
   21c30:	add	r7, r7, #3
   21c34:	bls	21f94 <__assert_fail@plt+0x10e68>
   21c38:	mov	r1, r8
   21c3c:	cmp	fp, r7
   21c40:	strbhi	r4, [r3, r7]
   21c44:	ldrb	r4, [r0, #1]!
   21c48:	add	r7, r7, #1
   21c4c:	cmp	r8, #0
   21c50:	bne	21b94 <__assert_fail@plt+0x10a68>
   21c54:	cmp	r6, #0
   21c58:	bne	21ca8 <__assert_fail@plt+0x10b7c>
   21c5c:	eor	r6, r1, #1
   21c60:	and	r6, r6, ip
   21c64:	add	sl, sl, #1
   21c68:	cmp	r2, sl
   21c6c:	uxtb	r6, r6
   21c70:	bls	21cd0 <__assert_fail@plt+0x10ba4>
   21c74:	cmp	r6, #0
   21c78:	beq	21c3c <__assert_fail@plt+0x10b10>
   21c7c:	cmp	fp, r7
   21c80:	movhi	ip, #39	; 0x27
   21c84:	strbhi	ip, [r3, r7]
   21c88:	add	ip, r7, #1
   21c8c:	cmp	fp, ip
   21c90:	movhi	lr, #39	; 0x27
   21c94:	strbhi	lr, [r3, ip]
   21c98:	add	r7, r7, #2
   21c9c:	mov	r6, r8
   21ca0:	mov	ip, r8
   21ca4:	b	21c3c <__assert_fail@plt+0x10b10>
   21ca8:	cmp	fp, r7
   21cac:	eor	r6, r1, #1
   21cb0:	movhi	lr, #92	; 0x5c
   21cb4:	and	r6, r6, ip
   21cb8:	add	sl, sl, #1
   21cbc:	strbhi	lr, [r3, r7]
   21cc0:	cmp	r2, sl
   21cc4:	add	r7, r7, #1
   21cc8:	uxtb	r6, r6
   21ccc:	bhi	21c74 <__assert_fail@plt+0x10b48>
   21cd0:	str	ip, [sp, #40]	; 0x28
   21cd4:	ldr	r5, [sp, #48]	; 0x30
   21cd8:	b	213a0 <__assert_fail@plt+0x10274>
   21cdc:	ldr	r3, [sp, #24]
   21ce0:	cmn	r3, #1
   21ce4:	mov	r3, #0
   21ce8:	str	r3, [sp, #104]	; 0x68
   21cec:	str	r3, [sp, #108]	; 0x6c
   21cf0:	beq	22010 <__assert_fail@plt+0x10ee4>
   21cf4:	mov	r2, r5
   21cf8:	mov	r3, #0
   21cfc:	str	r7, [sp, #88]	; 0x58
   21d00:	ldr	r7, [sp, #152]	; 0x98
   21d04:	str	r5, [sp, #92]	; 0x5c
   21d08:	str	r6, [sp, #84]	; 0x54
   21d0c:	mov	r5, r3
   21d10:	mov	r6, r2
   21d14:	str	r4, [sp, #80]	; 0x50
   21d18:	ldr	r3, [sp, #56]	; 0x38
   21d1c:	add	r9, sl, r5
   21d20:	add	r8, r3, r9
   21d24:	ldr	r3, [sp, #24]
   21d28:	mov	r1, r8
   21d2c:	sub	r2, r3, r9
   21d30:	add	r0, sp, #100	; 0x64
   21d34:	add	r3, sp, #104	; 0x68
   21d38:	bl	242b8 <__assert_fail@plt+0x1318c>
   21d3c:	subs	r4, r0, #0
   21d40:	beq	220e8 <__assert_fail@plt+0x10fbc>
   21d44:	cmn	r4, #1
   21d48:	beq	220c8 <__assert_fail@plt+0x10f9c>
   21d4c:	cmn	r4, #2
   21d50:	beq	22068 <__assert_fail@plt+0x10f3c>
   21d54:	ldr	r2, [sp, #28]
   21d58:	cmp	r7, #2
   21d5c:	movne	r2, #0
   21d60:	andeq	r2, r2, #1
   21d64:	cmp	r2, #0
   21d68:	beq	21b18 <__assert_fail@plt+0x109ec>
   21d6c:	cmp	r4, #1
   21d70:	beq	21b18 <__assert_fail@plt+0x109ec>
   21d74:	sub	r3, r4, #1
   21d78:	add	r9, r3, r9
   21d7c:	ldr	r3, [sp, #56]	; 0x38
   21d80:	add	r9, r3, r9
   21d84:	ldrb	r3, [r8, #1]!
   21d88:	sub	r3, r3, #91	; 0x5b
   21d8c:	cmp	r3, #33	; 0x21
   21d90:	ldrls	pc, [pc, r3, lsl #2]
   21d94:	b	21b10 <__assert_fail@plt+0x109e4>
   21d98:	andeq	r1, r2, r0, lsr #28
   21d9c:	andeq	r1, r2, r0, lsr #28
   21da0:	andeq	r1, r2, r0, lsl fp
   21da4:	andeq	r1, r2, r0, lsr #28
   21da8:	andeq	r1, r2, r0, lsl fp
   21dac:	andeq	r1, r2, r0, lsr #28
   21db0:	andeq	r1, r2, r0, lsl fp
   21db4:	andeq	r1, r2, r0, lsl fp
   21db8:	andeq	r1, r2, r0, lsl fp
   21dbc:	andeq	r1, r2, r0, lsl fp
   21dc0:	andeq	r1, r2, r0, lsl fp
   21dc4:	andeq	r1, r2, r0, lsl fp
   21dc8:	andeq	r1, r2, r0, lsl fp
   21dcc:	andeq	r1, r2, r0, lsl fp
   21dd0:	andeq	r1, r2, r0, lsl fp
   21dd4:	andeq	r1, r2, r0, lsl fp
   21dd8:	andeq	r1, r2, r0, lsl fp
   21ddc:	andeq	r1, r2, r0, lsl fp
   21de0:	andeq	r1, r2, r0, lsl fp
   21de4:	andeq	r1, r2, r0, lsl fp
   21de8:	andeq	r1, r2, r0, lsl fp
   21dec:	andeq	r1, r2, r0, lsl fp
   21df0:	andeq	r1, r2, r0, lsl fp
   21df4:	andeq	r1, r2, r0, lsl fp
   21df8:	andeq	r1, r2, r0, lsl fp
   21dfc:	andeq	r1, r2, r0, lsl fp
   21e00:	andeq	r1, r2, r0, lsl fp
   21e04:	andeq	r1, r2, r0, lsl fp
   21e08:	andeq	r1, r2, r0, lsl fp
   21e0c:	andeq	r1, r2, r0, lsl fp
   21e10:	andeq	r1, r2, r0, lsl fp
   21e14:	andeq	r1, r2, r0, lsl fp
   21e18:	andeq	r1, r2, r0, lsl fp
   21e1c:	andeq	r1, r2, r0, lsr #28
   21e20:	mov	r3, #2
   21e24:	ldr	sl, [sp, #32]
   21e28:	mov	r8, fp
   21e2c:	str	r3, [sp, #152]	; 0x98
   21e30:	b	215a8 <__assert_fail@plt+0x1047c>
   21e34:	ldr	r3, [sp, #156]	; 0x9c
   21e38:	tst	r3, #1
   21e3c:	bne	21f68 <__assert_fail@plt+0x10e3c>
   21e40:	ldr	r3, [sp, #152]	; 0x98
   21e44:	ldr	r4, [sp, #44]	; 0x2c
   21e48:	sub	r2, r3, #2
   21e4c:	mov	r5, #0
   21e50:	clz	r2, r2
   21e54:	mov	r8, r4
   21e58:	lsr	r2, r2, #5
   21e5c:	b	21368 <__assert_fail@plt+0x1023c>
   21e60:	ldr	r3, [sp, #156]	; 0x9c
   21e64:	ands	r9, r3, #4
   21e68:	beq	21fa0 <__assert_fail@plt+0x10e74>
   21e6c:	ldr	r2, [sp, #24]
   21e70:	add	r3, sl, #2
   21e74:	cmp	r3, r2
   21e78:	bcs	21e8c <__assert_fail@plt+0x10d60>
   21e7c:	ldr	r2, [sp, #48]	; 0x30
   21e80:	ldrb	r4, [r2, #1]
   21e84:	cmp	r4, #63	; 0x3f
   21e88:	beq	22128 <__assert_fail@plt+0x10ffc>
   21e8c:	mov	r2, #0
   21e90:	mov	r8, r2
   21e94:	mov	r5, r2
   21e98:	mov	r4, #63	; 0x3f
   21e9c:	b	21368 <__assert_fail@plt+0x1023c>
   21ea0:	ldr	r3, [sp, #28]
   21ea4:	cmp	r3, #0
   21ea8:	bne	221cc <__assert_fail@plt+0x110a0>
   21eac:	mov	r2, r5
   21eb0:	mov	r8, r3
   21eb4:	mov	r5, #0
   21eb8:	mov	r4, #63	; 0x3f
   21ebc:	b	21368 <__assert_fail@plt+0x1023c>
   21ec0:	ldr	r3, [sp, #28]
   21ec4:	cmp	r3, #0
   21ec8:	bne	221cc <__assert_fail@plt+0x110a0>
   21ecc:	ldr	r2, [sp, #72]	; 0x48
   21ed0:	adds	r3, fp, #0
   21ed4:	movne	r3, #1
   21ed8:	cmp	r2, #0
   21edc:	movne	r3, #0
   21ee0:	cmp	r3, #0
   21ee4:	strne	fp, [sp, #72]	; 0x48
   21ee8:	movne	fp, #0
   21eec:	bne	21f28 <__assert_fail@plt+0x10dfc>
   21ef0:	cmp	fp, r7
   21ef4:	movhi	r2, #39	; 0x27
   21ef8:	ldrhi	r3, [sp, #32]
   21efc:	strbhi	r2, [r3, r7]
   21f00:	add	r3, r7, #1
   21f04:	cmp	fp, r3
   21f08:	movhi	r1, #92	; 0x5c
   21f0c:	ldrhi	r2, [sp, #32]
   21f10:	strbhi	r1, [r2, r3]
   21f14:	add	r3, r7, #2
   21f18:	cmp	fp, r3
   21f1c:	movhi	r1, #39	; 0x27
   21f20:	ldrhi	r2, [sp, #32]
   21f24:	strbhi	r1, [r2, r3]
   21f28:	ldr	r3, [sp, #28]
   21f2c:	add	r7, r7, #3
   21f30:	mov	r2, r5
   21f34:	mov	r8, r3
   21f38:	str	r5, [sp, #68]	; 0x44
   21f3c:	str	r3, [sp, #40]	; 0x28
   21f40:	mov	r4, #39	; 0x27
   21f44:	b	21368 <__assert_fail@plt+0x1023c>
   21f48:	ldr	r3, [sp, #56]	; 0x38
   21f4c:	ldrb	r3, [r3, #1]
   21f50:	adds	r3, r3, #0
   21f54:	movne	r3, #1
   21f58:	b	21340 <__assert_fail@plt+0x10214>
   21f5c:	ldr	r5, [sp, #28]
   21f60:	mov	r4, #48	; 0x30
   21f64:	b	21368 <__assert_fail@plt+0x1023c>
   21f68:	add	sl, sl, #1
   21f6c:	b	20e98 <__assert_fail@plt+0xfd6c>
   21f70:	mov	sl, r3
   21f74:	ldr	r3, [sp, #28]
   21f78:	mov	r8, fp
   21f7c:	str	r3, [sp, #44]	; 0x2c
   21f80:	ldr	r3, [sp, #152]	; 0x98
   21f84:	sub	r2, r3, #2
   21f88:	clz	r2, r2
   21f8c:	lsr	r2, r2, #5
   21f90:	b	215a8 <__assert_fail@plt+0x1047c>
   21f94:	str	ip, [sp, #40]	; 0x28
   21f98:	ldr	r5, [sp, #48]	; 0x30
   21f9c:	b	213d8 <__assert_fail@plt+0x102ac>
   21fa0:	mov	r2, r9
   21fa4:	mov	r8, r9
   21fa8:	mov	r5, #0
   21fac:	mov	r4, #63	; 0x3f
   21fb0:	b	21368 <__assert_fail@plt+0x1023c>
   21fb4:	cmp	fp, #0
   21fb8:	beq	22030 <__assert_fail@plt+0x10f04>
   21fbc:	ldr	r1, [sp, #32]
   21fc0:	mov	r3, #34	; 0x22
   21fc4:	mov	r2, #1
   21fc8:	strb	r3, [r1]
   21fcc:	ldr	r3, [pc, #332]	; 22120 <__assert_fail@plt+0x10ff4>
   21fd0:	str	r2, [sp, #52]	; 0x34
   21fd4:	mov	r7, r2
   21fd8:	str	r2, [sp, #44]	; 0x2c
   21fdc:	str	r3, [sp, #64]	; 0x40
   21fe0:	b	20e88 <__assert_fail@plt+0xfd5c>
   21fe4:	ldr	r3, [pc, #300]	; 22118 <__assert_fail@plt+0x10fec>
   21fe8:	str	r3, [sp, #64]	; 0x40
   21fec:	mov	r3, #0
   21ff0:	str	r3, [sp, #28]
   21ff4:	mov	r3, #1
   21ff8:	str	r3, [sp, #52]	; 0x34
   21ffc:	mov	r7, r3
   22000:	mov	r3, #2
   22004:	str	r3, [sp, #152]	; 0x98
   22008:	b	20e88 <__assert_fail@plt+0xfd5c>
   2200c:	bl	11120 <abort@plt>
   22010:	ldr	r0, [sp, #56]	; 0x38
   22014:	bl	1100c <strlen@plt>
   22018:	str	r0, [sp, #24]
   2201c:	b	21cf4 <__assert_fail@plt+0x10bc8>
   22020:	mov	r5, r8
   22024:	mov	r4, #48	; 0x30
   22028:	ldr	r8, [sp, #44]	; 0x2c
   2202c:	b	21368 <__assert_fail@plt+0x1023c>
   22030:	mov	r3, #1
   22034:	str	r3, [sp, #52]	; 0x34
   22038:	mov	r7, r3
   2203c:	str	r3, [sp, #44]	; 0x2c
   22040:	ldr	r3, [pc, #216]	; 22120 <__assert_fail@plt+0x10ff4>
   22044:	str	r3, [sp, #64]	; 0x40
   22048:	b	20e88 <__assert_fail@plt+0xfd5c>
   2204c:	ldr	sl, [sp, #32]
   22050:	mov	r8, fp
   22054:	mov	r2, r3
   22058:	b	215a8 <__assert_fail@plt+0x1047c>
   2205c:	mov	r3, r5
   22060:	mov	r5, r2
   22064:	b	21860 <__assert_fail@plt+0x10734>
   22068:	ldr	r1, [sp, #24]
   2206c:	mov	r2, r5
   22070:	cmp	r1, r9
   22074:	mov	ip, r5
   22078:	ldr	r4, [sp, #80]	; 0x50
   2207c:	ldr	r5, [sp, #92]	; 0x5c
   22080:	ldr	r6, [sp, #84]	; 0x54
   22084:	ldr	r7, [sp, #88]	; 0x58
   22088:	bls	220bc <__assert_fail@plt+0x10f90>
   2208c:	ldrb	r3, [r8]
   22090:	cmp	r3, #0
   22094:	bne	220a8 <__assert_fail@plt+0x10f7c>
   22098:	b	220c0 <__assert_fail@plt+0x10f94>
   2209c:	ldrb	r3, [r8, #1]!
   220a0:	cmp	r3, #0
   220a4:	beq	221c0 <__assert_fail@plt+0x11094>
   220a8:	add	r2, r2, #1
   220ac:	add	r3, sl, r2
   220b0:	cmp	r1, r3
   220b4:	bhi	2209c <__assert_fail@plt+0x10f70>
   220b8:	mov	ip, r2
   220bc:	mov	r3, #0
   220c0:	mov	r2, r3
   220c4:	b	21b58 <__assert_fail@plt+0x10a2c>
   220c8:	mov	r3, #0
   220cc:	mov	ip, r5
   220d0:	ldr	r4, [sp, #80]	; 0x50
   220d4:	ldr	r5, [sp, #92]	; 0x5c
   220d8:	ldr	r6, [sp, #84]	; 0x54
   220dc:	ldr	r7, [sp, #88]	; 0x58
   220e0:	mov	r2, r3
   220e4:	b	21b58 <__assert_fail@plt+0x10a2c>
   220e8:	mov	r3, r6
   220ec:	mov	ip, r5
   220f0:	eor	r5, r3, #1
   220f4:	mov	r2, r6
   220f8:	ldr	r4, [sp, #80]	; 0x50
   220fc:	ldr	r6, [sp, #84]	; 0x54
   22100:	ldr	r7, [sp, #88]	; 0x58
   22104:	uxtb	r5, r5
   22108:	b	21b58 <__assert_fail@plt+0x10a2c>
   2210c:	ldr	sl, [sp, #32]
   22110:	mov	r8, fp
   22114:	b	21f7c <__assert_fail@plt+0x10e50>
   22118:	andeq	sl, r2, ip, lsl r7
   2211c:	andeq	sl, r2, r0, lsr #14
   22120:	andeq	sl, r2, r8, lsl r7
   22124:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   22128:	ldr	r2, [sp, #56]	; 0x38
   2212c:	ldrb	r1, [r2, r3]
   22130:	sub	r2, r1, #33	; 0x21
   22134:	uxtb	r2, r2
   22138:	cmp	r2, #29
   2213c:	bhi	221dc <__assert_fail@plt+0x110b0>
   22140:	ldr	r0, [pc, #-36]	; 22124 <__assert_fail@plt+0x10ff8>
   22144:	mov	ip, #1
   22148:	ands	r2, r0, ip, lsl r2
   2214c:	beq	221ec <__assert_fail@plt+0x110c0>
   22150:	ldr	r2, [sp, #28]
   22154:	cmp	r2, #0
   22158:	bne	222ec <__assert_fail@plt+0x111c0>
   2215c:	cmp	fp, r7
   22160:	ldr	r8, [sp, #28]
   22164:	ldrhi	r2, [sp, #32]
   22168:	mov	sl, r3
   2216c:	mov	r5, r8
   22170:	strbhi	r4, [r2, r7]
   22174:	add	r2, r7, #1
   22178:	cmp	fp, r2
   2217c:	movhi	r0, #34	; 0x22
   22180:	ldrhi	ip, [sp, #32]
   22184:	mov	r4, r1
   22188:	strbhi	r0, [ip, r2]
   2218c:	add	r2, r7, #2
   22190:	cmp	fp, r2
   22194:	movhi	r0, #34	; 0x22
   22198:	ldrhi	ip, [sp, #32]
   2219c:	strbhi	r0, [ip, r2]
   221a0:	add	r2, r7, #3
   221a4:	cmp	fp, r2
   221a8:	movhi	r0, #63	; 0x3f
   221ac:	ldrhi	ip, [sp, #32]
   221b0:	add	r7, r7, #4
   221b4:	strbhi	r0, [ip, r2]
   221b8:	mov	r2, r8
   221bc:	b	21368 <__assert_fail@plt+0x1023c>
   221c0:	mov	ip, r2
   221c4:	mov	r2, r3
   221c8:	b	21b58 <__assert_fail@plt+0x10a2c>
   221cc:	ldr	sl, [sp, #32]
   221d0:	mov	r8, fp
   221d4:	ldr	r2, [sp, #28]
   221d8:	b	215a8 <__assert_fail@plt+0x1047c>
   221dc:	mov	r2, #0
   221e0:	mov	r8, r2
   221e4:	mov	r5, r2
   221e8:	b	21368 <__assert_fail@plt+0x1023c>
   221ec:	mov	r8, r2
   221f0:	mov	r5, #0
   221f4:	b	21368 <__assert_fail@plt+0x1023c>
   221f8:	ldr	r1, [sp, #152]	; 0x98
   221fc:	bl	20cc4 <__assert_fail@plt+0xfb98>
   22200:	str	r0, [sp, #168]	; 0xa8
   22204:	b	21224 <__assert_fail@plt+0x100f8>
   22208:	ldr	r1, [sp, #152]	; 0x98
   2220c:	bl	20cc4 <__assert_fail@plt+0xfb98>
   22210:	str	r0, [sp, #164]	; 0xa4
   22214:	b	21204 <__assert_fail@plt+0x100d8>
   22218:	ldr	r7, [sp, #28]
   2221c:	b	21264 <__assert_fail@plt+0x10138>
   22220:	ldr	sl, [sp, #32]
   22224:	ldr	r2, [sp, #68]	; 0x44
   22228:	mov	r8, fp
   2222c:	mov	fp, r7
   22230:	ldr	r3, [sp, #64]	; 0x40
   22234:	cmp	r3, #0
   22238:	moveq	r2, #0
   2223c:	andne	r2, r2, #1
   22240:	cmp	r2, #0
   22244:	beq	22270 <__assert_fail@plt+0x11144>
   22248:	mov	r2, r3
   2224c:	ldrb	r3, [r3]
   22250:	cmp	r3, #0
   22254:	beq	22270 <__assert_fail@plt+0x11144>
   22258:	cmp	r8, fp
   2225c:	strbhi	r3, [sl, fp]
   22260:	ldrb	r3, [r2, #1]!
   22264:	add	fp, fp, #1
   22268:	cmp	r3, #0
   2226c:	bne	22258 <__assert_fail@plt+0x1112c>
   22270:	cmp	r8, fp
   22274:	movhi	r3, #0
   22278:	strbhi	r3, [sl, fp]
   2227c:	b	21604 <__assert_fail@plt+0x104d8>
   22280:	ldr	r3, [sp, #168]	; 0xa8
   22284:	ldr	sl, [sp, #32]
   22288:	str	r3, [sp, #16]
   2228c:	ldr	r3, [sp, #164]	; 0xa4
   22290:	mov	ip, #5
   22294:	str	r3, [sp, #12]
   22298:	ldr	r3, [sp, #160]	; 0xa0
   2229c:	ldr	r2, [sp, #56]	; 0x38
   222a0:	str	r3, [sp, #8]
   222a4:	ldr	r3, [sp, #156]	; 0x9c
   222a8:	ldr	r1, [sp, #72]	; 0x48
   222ac:	str	r3, [sp, #4]
   222b0:	mov	r0, sl
   222b4:	ldr	r3, [sp, #24]
   222b8:	str	ip, [sp]
   222bc:	bl	20de4 <__assert_fail@plt+0xfcb8>
   222c0:	mov	fp, r0
   222c4:	b	21604 <__assert_fail@plt+0x104d8>
   222c8:	mov	r8, fp
   222cc:	ldr	sl, [sp, #32]
   222d0:	mov	fp, r7
   222d4:	mov	r2, r3
   222d8:	b	22230 <__assert_fail@plt+0x11104>
   222dc:	mov	r8, fp
   222e0:	ldr	sl, [sp, #32]
   222e4:	mov	fp, r7
   222e8:	b	22230 <__assert_fail@plt+0x11104>
   222ec:	ldr	sl, [sp, #32]
   222f0:	mov	r8, fp
   222f4:	b	215c0 <__assert_fail@plt+0x10494>
   222f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222fc:	sub	sp, sp, #52	; 0x34
   22300:	mov	r4, r0
   22304:	mov	r5, r3
   22308:	mov	sl, r1
   2230c:	mov	fp, r2
   22310:	bl	11024 <__errno_location@plt>
   22314:	ldr	r7, [pc, #412]	; 224b8 <__assert_fail@plt+0x1138c>
   22318:	cmn	r4, #-2147483647	; 0x80000001
   2231c:	ldr	r6, [r7]
   22320:	mov	r8, r0
   22324:	movne	r0, #0
   22328:	moveq	r0, #1
   2232c:	ldr	r3, [r8]
   22330:	orrs	r0, r0, r4, lsr #31
   22334:	str	r3, [sp, #24]
   22338:	bne	224b4 <__assert_fail@plt+0x11388>
   2233c:	ldr	r2, [r7, #4]
   22340:	cmp	r4, r2
   22344:	blt	223a4 <__assert_fail@plt+0x11278>
   22348:	add	r9, r7, #8
   2234c:	cmp	r6, r9
   22350:	str	r2, [sp, #44]	; 0x2c
   22354:	beq	22484 <__assert_fail@plt+0x11358>
   22358:	mov	r3, #8
   2235c:	sub	r2, r4, r2
   22360:	mov	r0, r6
   22364:	str	r3, [sp]
   22368:	add	r2, r2, #1
   2236c:	mvn	r3, #-2147483648	; 0x80000000
   22370:	add	r1, sp, #44	; 0x2c
   22374:	bl	23a0c <__assert_fail@plt+0x128e0>
   22378:	mov	r6, r0
   2237c:	str	r0, [r7]
   22380:	ldr	r0, [r7, #4]
   22384:	ldr	r2, [sp, #44]	; 0x2c
   22388:	mov	r1, #0
   2238c:	sub	r2, r2, r0
   22390:	add	r0, r6, r0, lsl #3
   22394:	lsl	r2, r2, #3
   22398:	bl	11054 <memset@plt>
   2239c:	ldr	r3, [sp, #44]	; 0x2c
   223a0:	str	r3, [r7, #4]
   223a4:	add	r3, r6, r4, lsl #3
   223a8:	ldr	r1, [r5, #4]
   223ac:	ldr	r7, [r3, #4]
   223b0:	ldr	r9, [r6, r4, lsl #3]
   223b4:	ldr	r2, [r5, #40]	; 0x28
   223b8:	ldr	ip, [r5, #44]	; 0x2c
   223bc:	add	r0, r5, #8
   223c0:	str	r3, [sp, #28]
   223c4:	ldr	r3, [r5]
   223c8:	orr	r1, r1, #1
   223cc:	mov	lr, r0
   223d0:	str	r1, [sp, #32]
   223d4:	str	r0, [sp, #36]	; 0x24
   223d8:	str	r1, [sp, #4]
   223dc:	str	r2, [sp, #12]
   223e0:	str	r3, [sp]
   223e4:	mov	r0, r7
   223e8:	mov	r1, r9
   223ec:	str	ip, [sp, #16]
   223f0:	str	lr, [sp, #8]
   223f4:	mov	r3, fp
   223f8:	mov	r2, sl
   223fc:	bl	20de4 <__assert_fail@plt+0xfcb8>
   22400:	cmp	r9, r0
   22404:	bhi	22470 <__assert_fail@plt+0x11344>
   22408:	ldr	r3, [pc, #172]	; 224bc <__assert_fail@plt+0x11390>
   2240c:	add	r9, r0, #1
   22410:	cmp	r7, r3
   22414:	str	r9, [r6, r4, lsl #3]
   22418:	beq	22424 <__assert_fail@plt+0x112f8>
   2241c:	mov	r0, r7
   22420:	bl	17b4c <__assert_fail@plt+0x6a20>
   22424:	mov	r0, r9
   22428:	bl	238a8 <__assert_fail@plt+0x1277c>
   2242c:	ldr	lr, [sp, #28]
   22430:	ldr	ip, [r5, #44]	; 0x2c
   22434:	ldr	r4, [r5, #40]	; 0x28
   22438:	mov	r3, fp
   2243c:	mov	r2, sl
   22440:	mov	r1, r9
   22444:	str	r0, [lr, #4]
   22448:	ldr	lr, [r5]
   2244c:	ldr	r5, [sp, #36]	; 0x24
   22450:	str	ip, [sp, #16]
   22454:	str	r5, [sp, #8]
   22458:	ldr	r5, [sp, #32]
   2245c:	str	r4, [sp, #12]
   22460:	str	r5, [sp, #4]
   22464:	str	lr, [sp]
   22468:	mov	r7, r0
   2246c:	bl	20de4 <__assert_fail@plt+0xfcb8>
   22470:	ldr	r3, [sp, #24]
   22474:	mov	r0, r7
   22478:	str	r3, [r8]
   2247c:	add	sp, sp, #52	; 0x34
   22480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22484:	mov	r3, #8
   22488:	sub	r2, r4, r2
   2248c:	str	r3, [sp]
   22490:	add	r1, sp, #44	; 0x2c
   22494:	add	r2, r2, #1
   22498:	mvn	r3, #-2147483648	; 0x80000000
   2249c:	bl	23a0c <__assert_fail@plt+0x128e0>
   224a0:	mov	r6, r0
   224a4:	ldm	r9, {r0, r1}
   224a8:	str	r6, [r7]
   224ac:	stm	r6, {r0, r1}
   224b0:	b	22380 <__assert_fail@plt+0x11254>
   224b4:	bl	11120 <abort@plt>
   224b8:	andeq	fp, r3, r8, lsr #2
   224bc:	andeq	fp, r3, r4, lsr #3
   224c0:	push	{r4, r5, r6, lr}
   224c4:	mov	r5, r0
   224c8:	bl	11024 <__errno_location@plt>
   224cc:	cmp	r5, #0
   224d0:	mov	r1, #48	; 0x30
   224d4:	mov	r4, r0
   224d8:	ldr	r0, [pc, #16]	; 224f0 <__assert_fail@plt+0x113c4>
   224dc:	ldr	r6, [r4]
   224e0:	movne	r0, r5
   224e4:	bl	23d08 <__assert_fail@plt+0x12bdc>
   224e8:	str	r6, [r4]
   224ec:	pop	{r4, r5, r6, pc}
   224f0:	andeq	fp, r3, r4, lsr #5
   224f4:	ldr	r3, [pc, #12]	; 22508 <__assert_fail@plt+0x113dc>
   224f8:	cmp	r0, #0
   224fc:	moveq	r0, r3
   22500:	ldr	r0, [r0]
   22504:	bx	lr
   22508:	andeq	fp, r3, r4, lsr #5
   2250c:	ldr	r3, [pc, #12]	; 22520 <__assert_fail@plt+0x113f4>
   22510:	cmp	r0, #0
   22514:	moveq	r0, r3
   22518:	str	r1, [r0]
   2251c:	bx	lr
   22520:	andeq	fp, r3, r4, lsr #5
   22524:	ldr	r3, [pc, #52]	; 22560 <__assert_fail@plt+0x11434>
   22528:	cmp	r0, #0
   2252c:	moveq	r0, r3
   22530:	add	r3, r0, #8
   22534:	push	{lr}		; (str lr, [sp, #-4]!)
   22538:	lsr	lr, r1, #5
   2253c:	and	r1, r1, #31
   22540:	ldr	ip, [r3, lr, lsl #2]
   22544:	lsr	r0, ip, r1
   22548:	eor	r2, r2, r0
   2254c:	and	r2, r2, #1
   22550:	and	r0, r0, #1
   22554:	eor	r1, ip, r2, lsl r1
   22558:	str	r1, [r3, lr, lsl #2]
   2255c:	pop	{pc}		; (ldr pc, [sp], #4)
   22560:	andeq	fp, r3, r4, lsr #5
   22564:	ldr	r3, [pc, #16]	; 2257c <__assert_fail@plt+0x11450>
   22568:	cmp	r0, #0
   2256c:	movne	r3, r0
   22570:	ldr	r0, [r3, #4]
   22574:	str	r1, [r3, #4]
   22578:	bx	lr
   2257c:	andeq	fp, r3, r4, lsr #5
   22580:	ldr	r3, [pc, #44]	; 225b4 <__assert_fail@plt+0x11488>
   22584:	cmp	r0, #0
   22588:	moveq	r0, r3
   2258c:	mov	ip, #10
   22590:	cmp	r2, #0
   22594:	cmpne	r1, #0
   22598:	str	ip, [r0]
   2259c:	beq	225ac <__assert_fail@plt+0x11480>
   225a0:	str	r1, [r0, #40]	; 0x28
   225a4:	str	r2, [r0, #44]	; 0x2c
   225a8:	bx	lr
   225ac:	push	{r4, lr}
   225b0:	bl	11120 <abort@plt>
   225b4:	andeq	fp, r3, r4, lsr #5
   225b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   225bc:	sub	sp, sp, #24
   225c0:	ldr	ip, [pc, #108]	; 22634 <__assert_fail@plt+0x11508>
   225c4:	ldr	r4, [sp, #56]	; 0x38
   225c8:	mov	r9, r2
   225cc:	cmp	r4, #0
   225d0:	moveq	r4, ip
   225d4:	mov	sl, r3
   225d8:	mov	r7, r0
   225dc:	mov	r8, r1
   225e0:	bl	11024 <__errno_location@plt>
   225e4:	ldr	r3, [r4, #44]	; 0x2c
   225e8:	mov	r1, r8
   225ec:	ldr	r6, [r0]
   225f0:	str	r3, [sp, #16]
   225f4:	ldr	r2, [r4, #40]	; 0x28
   225f8:	add	r3, r4, #8
   225fc:	str	r3, [sp, #8]
   22600:	str	r2, [sp, #12]
   22604:	ldr	r2, [r4, #4]
   22608:	mov	r5, r0
   2260c:	str	r2, [sp, #4]
   22610:	ldr	ip, [r4]
   22614:	mov	r3, sl
   22618:	mov	r2, r9
   2261c:	mov	r0, r7
   22620:	str	ip, [sp]
   22624:	bl	20de4 <__assert_fail@plt+0xfcb8>
   22628:	str	r6, [r5]
   2262c:	add	sp, sp, #24
   22630:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22634:	andeq	fp, r3, r4, lsr #5
   22638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2263c:	cmp	r3, #0
   22640:	sub	sp, sp, #44	; 0x2c
   22644:	ldr	r4, [pc, #192]	; 2270c <__assert_fail@plt+0x115e0>
   22648:	mov	r6, r2
   2264c:	movne	r4, r3
   22650:	mov	r9, r1
   22654:	mov	r8, r0
   22658:	bl	11024 <__errno_location@plt>
   2265c:	ldr	r3, [r4, #44]	; 0x2c
   22660:	ldr	r5, [r4, #4]
   22664:	add	sl, r4, #8
   22668:	cmp	r6, #0
   2266c:	orreq	r5, r5, #1
   22670:	mov	r1, #0
   22674:	ldr	r2, [r0]
   22678:	str	r3, [sp, #16]
   2267c:	ldr	r3, [r4, #40]	; 0x28
   22680:	stmib	sp, {r5, sl}
   22684:	str	r3, [sp, #12]
   22688:	ldr	r3, [r4]
   2268c:	mov	r7, r0
   22690:	str	r2, [sp, #28]
   22694:	str	r3, [sp]
   22698:	mov	r2, r8
   2269c:	mov	r3, r9
   226a0:	mov	r0, r1
   226a4:	bl	20de4 <__assert_fail@plt+0xfcb8>
   226a8:	add	r1, r0, #1
   226ac:	mov	fp, r0
   226b0:	mov	r0, r1
   226b4:	str	r1, [sp, #36]	; 0x24
   226b8:	bl	238a8 <__assert_fail@plt+0x1277c>
   226bc:	ldr	r3, [r4, #44]	; 0x2c
   226c0:	mov	r2, r8
   226c4:	str	r3, [sp, #16]
   226c8:	ldr	r3, [r4, #40]	; 0x28
   226cc:	str	r5, [sp, #4]
   226d0:	str	r3, [sp, #12]
   226d4:	str	sl, [sp, #8]
   226d8:	ldr	ip, [r4]
   226dc:	ldr	r1, [sp, #36]	; 0x24
   226e0:	mov	r3, r9
   226e4:	str	ip, [sp]
   226e8:	str	r0, [sp, #32]
   226ec:	bl	20de4 <__assert_fail@plt+0xfcb8>
   226f0:	ldr	r2, [sp, #28]
   226f4:	cmp	r6, #0
   226f8:	str	r2, [r7]
   226fc:	ldr	r0, [sp, #32]
   22700:	strne	fp, [r6]
   22704:	add	sp, sp, #44	; 0x2c
   22708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2270c:	andeq	fp, r3, r4, lsr #5
   22710:	mov	r3, r2
   22714:	mov	r2, #0
   22718:	b	22638 <__assert_fail@plt+0x1150c>
   2271c:	push	{r4, r5, r6, r7, r8, lr}
   22720:	ldr	r6, [pc, #116]	; 2279c <__assert_fail@plt+0x11670>
   22724:	ldr	r3, [r6, #4]
   22728:	ldr	r7, [r6]
   2272c:	cmp	r3, #1
   22730:	movgt	r5, r7
   22734:	movgt	r4, #1
   22738:	ble	22758 <__assert_fail@plt+0x1162c>
   2273c:	ldr	r0, [r5, #12]
   22740:	bl	17b4c <__assert_fail@plt+0x6a20>
   22744:	ldr	r3, [r6, #4]
   22748:	add	r4, r4, #1
   2274c:	cmp	r3, r4
   22750:	add	r5, r5, #8
   22754:	bgt	2273c <__assert_fail@plt+0x11610>
   22758:	ldr	r0, [r7, #4]
   2275c:	ldr	r4, [pc, #60]	; 227a0 <__assert_fail@plt+0x11674>
   22760:	cmp	r0, r4
   22764:	beq	22778 <__assert_fail@plt+0x1164c>
   22768:	bl	17b4c <__assert_fail@plt+0x6a20>
   2276c:	mov	r3, #256	; 0x100
   22770:	str	r4, [r6, #12]
   22774:	str	r3, [r6, #8]
   22778:	ldr	r4, [pc, #36]	; 227a4 <__assert_fail@plt+0x11678>
   2277c:	cmp	r7, r4
   22780:	beq	22790 <__assert_fail@plt+0x11664>
   22784:	mov	r0, r7
   22788:	bl	17b4c <__assert_fail@plt+0x6a20>
   2278c:	str	r4, [r6]
   22790:	mov	r3, #1
   22794:	str	r3, [r6, #4]
   22798:	pop	{r4, r5, r6, r7, r8, pc}
   2279c:	andeq	fp, r3, r8, lsr #2
   227a0:	andeq	fp, r3, r4, lsr #3
   227a4:	andeq	fp, r3, r0, lsr r1
   227a8:	ldr	r3, [pc, #4]	; 227b4 <__assert_fail@plt+0x11688>
   227ac:	mvn	r2, #0
   227b0:	b	222f8 <__assert_fail@plt+0x111cc>
   227b4:	andeq	fp, r3, r4, lsr #5
   227b8:	ldr	r3, [pc]	; 227c0 <__assert_fail@plt+0x11694>
   227bc:	b	222f8 <__assert_fail@plt+0x111cc>
   227c0:	andeq	fp, r3, r4, lsr #5
   227c4:	mov	r1, r0
   227c8:	ldr	r3, [pc, #8]	; 227d8 <__assert_fail@plt+0x116ac>
   227cc:	mvn	r2, #0
   227d0:	mov	r0, #0
   227d4:	b	222f8 <__assert_fail@plt+0x111cc>
   227d8:	andeq	fp, r3, r4, lsr #5
   227dc:	mov	r2, r1
   227e0:	ldr	r3, [pc, #8]	; 227f0 <__assert_fail@plt+0x116c4>
   227e4:	mov	r1, r0
   227e8:	mov	r0, #0
   227ec:	b	222f8 <__assert_fail@plt+0x111cc>
   227f0:	andeq	fp, r3, r4, lsr #5
   227f4:	push	{r4, r5, lr}
   227f8:	sub	sp, sp, #52	; 0x34
   227fc:	mov	r5, r2
   22800:	mov	r4, r0
   22804:	mov	r0, sp
   22808:	bl	20c94 <__assert_fail@plt+0xfb68>
   2280c:	mov	r3, sp
   22810:	mov	r1, r5
   22814:	mov	r0, r4
   22818:	mvn	r2, #0
   2281c:	bl	222f8 <__assert_fail@plt+0x111cc>
   22820:	add	sp, sp, #52	; 0x34
   22824:	pop	{r4, r5, pc}
   22828:	push	{r4, r5, r6, lr}
   2282c:	sub	sp, sp, #48	; 0x30
   22830:	mov	r5, r2
   22834:	mov	r6, r3
   22838:	mov	r4, r0
   2283c:	mov	r0, sp
   22840:	bl	20c94 <__assert_fail@plt+0xfb68>
   22844:	mov	r3, sp
   22848:	mov	r2, r6
   2284c:	mov	r1, r5
   22850:	mov	r0, r4
   22854:	bl	222f8 <__assert_fail@plt+0x111cc>
   22858:	add	sp, sp, #48	; 0x30
   2285c:	pop	{r4, r5, r6, pc}
   22860:	mov	r2, r1
   22864:	mov	r1, r0
   22868:	mov	r0, #0
   2286c:	b	227f4 <__assert_fail@plt+0x116c8>
   22870:	mov	r3, r2
   22874:	mov	r2, r1
   22878:	mov	r1, r0
   2287c:	mov	r0, #0
   22880:	b	22828 <__assert_fail@plt+0x116fc>
   22884:	push	{r4, r5, r6, r7, r8, lr}
   22888:	mov	r7, r0
   2288c:	ldr	lr, [pc, #100]	; 228f8 <__assert_fail@plt+0x117cc>
   22890:	mov	r8, r1
   22894:	mov	r4, r2
   22898:	ldm	lr!, {r0, r1, r2, r3}
   2289c:	sub	sp, sp, #48	; 0x30
   228a0:	mov	ip, sp
   228a4:	lsr	r5, r4, #5
   228a8:	stmia	ip!, {r0, r1, r2, r3}
   228ac:	add	r6, sp, #8
   228b0:	ldm	lr!, {r0, r1, r2, r3}
   228b4:	and	r4, r4, #31
   228b8:	stmia	ip!, {r0, r1, r2, r3}
   228bc:	ldm	lr, {r0, r1, r2, r3}
   228c0:	stm	ip, {r0, r1, r2, r3}
   228c4:	mov	r2, r8
   228c8:	ldr	lr, [r6, r5, lsl #2]
   228cc:	mov	r1, r7
   228d0:	mov	r3, sp
   228d4:	lsr	ip, lr, r4
   228d8:	eor	ip, ip, #1
   228dc:	and	ip, ip, #1
   228e0:	mov	r0, #0
   228e4:	eor	r4, lr, ip, lsl r4
   228e8:	str	r4, [r6, r5, lsl #2]
   228ec:	bl	222f8 <__assert_fail@plt+0x111cc>
   228f0:	add	sp, sp, #48	; 0x30
   228f4:	pop	{r4, r5, r6, r7, r8, pc}
   228f8:	andeq	fp, r3, r4, lsr #5
   228fc:	mov	r2, r1
   22900:	mvn	r1, #0
   22904:	b	22884 <__assert_fail@plt+0x11758>
   22908:	mov	r2, #58	; 0x3a
   2290c:	mvn	r1, #0
   22910:	b	22884 <__assert_fail@plt+0x11758>
   22914:	mov	r2, #58	; 0x3a
   22918:	b	22884 <__assert_fail@plt+0x11758>
   2291c:	push	{r4, r5, r6, r7, lr}
   22920:	sub	sp, sp, #100	; 0x64
   22924:	mov	r6, r0
   22928:	mov	r0, sp
   2292c:	mov	r7, r2
   22930:	bl	20c94 <__assert_fail@plt+0xfb68>
   22934:	mov	ip, sp
   22938:	add	lr, sp, #48	; 0x30
   2293c:	ldm	ip!, {r0, r1, r2, r3}
   22940:	stmia	lr!, {r0, r1, r2, r3}
   22944:	ldm	ip!, {r0, r1, r2, r3}
   22948:	ldr	r5, [sp, #60]	; 0x3c
   2294c:	stmia	lr!, {r0, r1, r2, r3}
   22950:	mvn	r4, r5
   22954:	ldm	ip, {r0, r1, r2, r3}
   22958:	and	ip, r4, #67108864	; 0x4000000
   2295c:	eor	ip, ip, r5
   22960:	str	ip, [sp, #60]	; 0x3c
   22964:	stm	lr, {r0, r1, r2, r3}
   22968:	mov	r1, r7
   2296c:	mov	r0, r6
   22970:	add	r3, sp, #48	; 0x30
   22974:	mvn	r2, #0
   22978:	bl	222f8 <__assert_fail@plt+0x111cc>
   2297c:	add	sp, sp, #100	; 0x64
   22980:	pop	{r4, r5, r6, r7, pc}
   22984:	push	{r4, r5, r6, r7, r8, lr}
   22988:	mov	r5, r1
   2298c:	ldr	lr, [pc, #100]	; 229f8 <__assert_fail@plt+0x118cc>
   22990:	mov	r4, r2
   22994:	mov	r7, r0
   22998:	mov	r8, r3
   2299c:	ldm	lr!, {r0, r1, r2, r3}
   229a0:	sub	sp, sp, #48	; 0x30
   229a4:	mov	ip, sp
   229a8:	mov	r6, #10
   229ac:	stmia	ip!, {r0, r1, r2, r3}
   229b0:	cmp	r4, #0
   229b4:	cmpne	r5, #0
   229b8:	ldm	lr!, {r0, r1, r2, r3}
   229bc:	str	r6, [sp]
   229c0:	stmia	ip!, {r0, r1, r2, r3}
   229c4:	ldm	lr, {r0, r1, r2, r3}
   229c8:	stm	ip, {r0, r1, r2, r3}
   229cc:	beq	229f4 <__assert_fail@plt+0x118c8>
   229d0:	mov	r3, sp
   229d4:	mov	r1, r8
   229d8:	mov	r0, r7
   229dc:	ldr	r2, [sp, #72]	; 0x48
   229e0:	str	r5, [sp, #40]	; 0x28
   229e4:	str	r4, [sp, #44]	; 0x2c
   229e8:	bl	222f8 <__assert_fail@plt+0x111cc>
   229ec:	add	sp, sp, #48	; 0x30
   229f0:	pop	{r4, r5, r6, r7, r8, pc}
   229f4:	bl	11120 <abort@plt>
   229f8:	andeq	fp, r3, r4, lsr #5
   229fc:	push	{lr}		; (str lr, [sp, #-4]!)
   22a00:	sub	sp, sp, #12
   22a04:	mvn	ip, #0
   22a08:	str	ip, [sp]
   22a0c:	bl	22984 <__assert_fail@plt+0x11858>
   22a10:	add	sp, sp, #12
   22a14:	pop	{pc}		; (ldr pc, [sp], #4)
   22a18:	push	{lr}		; (str lr, [sp, #-4]!)
   22a1c:	sub	sp, sp, #12
   22a20:	mvn	ip, #0
   22a24:	mov	r3, r2
   22a28:	str	ip, [sp]
   22a2c:	mov	r2, r1
   22a30:	mov	r1, r0
   22a34:	mov	r0, #0
   22a38:	bl	22984 <__assert_fail@plt+0x11858>
   22a3c:	add	sp, sp, #12
   22a40:	pop	{pc}		; (ldr pc, [sp], #4)
   22a44:	push	{lr}		; (str lr, [sp, #-4]!)
   22a48:	sub	sp, sp, #12
   22a4c:	str	r3, [sp]
   22a50:	mov	r3, r2
   22a54:	mov	r2, r1
   22a58:	mov	r1, r0
   22a5c:	mov	r0, #0
   22a60:	bl	22984 <__assert_fail@plt+0x11858>
   22a64:	add	sp, sp, #12
   22a68:	pop	{pc}		; (ldr pc, [sp], #4)
   22a6c:	ldr	r3, [pc]	; 22a74 <__assert_fail@plt+0x11948>
   22a70:	b	222f8 <__assert_fail@plt+0x111cc>
   22a74:	andeq	fp, r3, r8, lsr r1
   22a78:	mov	r2, r1
   22a7c:	ldr	r3, [pc, #8]	; 22a8c <__assert_fail@plt+0x11960>
   22a80:	mov	r1, r0
   22a84:	mov	r0, #0
   22a88:	b	222f8 <__assert_fail@plt+0x111cc>
   22a8c:	andeq	fp, r3, r8, lsr r1
   22a90:	ldr	r3, [pc, #4]	; 22a9c <__assert_fail@plt+0x11970>
   22a94:	mvn	r2, #0
   22a98:	b	222f8 <__assert_fail@plt+0x111cc>
   22a9c:	andeq	fp, r3, r8, lsr r1
   22aa0:	mov	r1, r0
   22aa4:	ldr	r3, [pc, #8]	; 22ab4 <__assert_fail@plt+0x11988>
   22aa8:	mvn	r2, #0
   22aac:	mov	r0, #0
   22ab0:	b	222f8 <__assert_fail@plt+0x111cc>
   22ab4:	andeq	fp, r3, r8, lsr r1
   22ab8:	mov	r3, #0
   22abc:	str	r3, [r0]
   22ac0:	str	r3, [r0, #4]
   22ac4:	bx	lr
   22ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22acc:	sub	sp, sp, #52	; 0x34
   22ad0:	add	r4, sp, #16
   22ad4:	mov	r7, r2
   22ad8:	mov	r6, r1
   22adc:	mov	r2, #32
   22ae0:	mov	r1, #0
   22ae4:	mov	r5, r0
   22ae8:	mov	r0, r4
   22aec:	mov	r8, r3
   22af0:	bl	11054 <memset@plt>
   22af4:	cmp	r7, #0
   22af8:	movne	r1, r6
   22afc:	movne	lr, #1
   22b00:	addne	r2, r1, r7
   22b04:	beq	22b28 <__assert_fail@plt+0x119fc>
   22b08:	ldrb	r3, [r1], #1
   22b0c:	and	ip, r3, #31
   22b10:	lsr	r3, r3, #5
   22b14:	cmp	r2, r1
   22b18:	ldr	r0, [r4, r3, lsl #2]
   22b1c:	orr	r0, r0, lr, lsl ip
   22b20:	str	r0, [r4, r3, lsl #2]
   22b24:	bne	22b08 <__assert_fail@plt+0x119dc>
   22b28:	ldr	r3, [r5, #4]
   22b2c:	ldr	r2, [r5, #8]
   22b30:	cmp	r3, r2
   22b34:	bcs	22c98 <__assert_fail@plt+0x11b6c>
   22b38:	add	r2, r3, #1
   22b3c:	str	r2, [r5, #4]
   22b40:	ldrb	r4, [r3]
   22b44:	lsr	r3, r4, #5
   22b48:	add	r2, sp, #48	; 0x30
   22b4c:	add	r3, r2, r3, lsl #2
   22b50:	and	r1, r4, #31
   22b54:	ldr	r2, [r3, #-32]	; 0xffffffe0
   22b58:	lsr	r3, r2, r1
   22b5c:	tst	r3, #1
   22b60:	bne	22b88 <__assert_fail@plt+0x11a5c>
   22b64:	b	22bb4 <__assert_fail@plt+0x11a88>
   22b68:	lsr	r2, r4, #5
   22b6c:	add	r1, sp, #48	; 0x30
   22b70:	add	r2, r1, r2, lsl #2
   22b74:	and	r3, r4, #31
   22b78:	ldr	r2, [r2, #-32]	; 0xffffffe0
   22b7c:	lsr	r3, r2, r3
   22b80:	tst	r3, #1
   22b84:	beq	22bb4 <__assert_fail@plt+0x11a88>
   22b88:	ldr	r3, [r5, #4]
   22b8c:	ldr	r2, [r5, #8]
   22b90:	add	r1, r3, #1
   22b94:	cmp	r3, r2
   22b98:	strcc	r1, [r5, #4]
   22b9c:	ldrbcc	r4, [r3]
   22ba0:	bcc	22b68 <__assert_fail@plt+0x11a3c>
   22ba4:	mov	r0, r5
   22ba8:	bl	110c0 <__uflow@plt>
   22bac:	subs	r4, r0, #0
   22bb0:	bge	22b68 <__assert_fail@plt+0x11a3c>
   22bb4:	ldr	r3, [r8]
   22bb8:	add	r7, sp, #48	; 0x30
   22bbc:	ldr	fp, [r8, #4]
   22bc0:	str	r3, [r7, #-36]!	; 0xffffffdc
   22bc4:	mov	r6, #0
   22bc8:	mov	sl, #1
   22bcc:	mvn	r9, #0
   22bd0:	b	22c20 <__assert_fail@plt+0x11af4>
   22bd4:	lsr	r3, r4, #5
   22bd8:	add	r1, sp, #48	; 0x30
   22bdc:	cmp	r4, #0
   22be0:	and	r2, r4, #31
   22be4:	add	r3, r1, r3, lsl #2
   22be8:	blt	22c6c <__assert_fail@plt+0x11b40>
   22bec:	ldr	r3, [r3, #-32]	; 0xffffffe0
   22bf0:	lsr	r3, r3, r2
   22bf4:	tst	r3, #1
   22bf8:	bne	22c6c <__assert_fail@plt+0x11b40>
   22bfc:	strb	r4, [fp, r6]
   22c00:	ldr	r3, [r5, #4]
   22c04:	ldr	r2, [r5, #8]
   22c08:	add	r1, r3, #1
   22c0c:	cmp	r3, r2
   22c10:	strcc	r1, [r5, #4]
   22c14:	ldrbcc	r4, [r3]
   22c18:	bcs	22c5c <__assert_fail@plt+0x11b30>
   22c1c:	add	r6, r6, #1
   22c20:	clz	r3, r6
   22c24:	lsr	r3, r3, #5
   22c28:	ands	r3, r3, r4, lsr #31
   22c2c:	bne	22c8c <__assert_fail@plt+0x11b60>
   22c30:	ldr	r3, [sp, #12]
   22c34:	cmp	r6, r3
   22c38:	bne	22bd4 <__assert_fail@plt+0x11aa8>
   22c3c:	mov	r0, fp
   22c40:	str	sl, [sp]
   22c44:	mov	r3, r9
   22c48:	mov	r2, #1
   22c4c:	mov	r1, r7
   22c50:	bl	23a0c <__assert_fail@plt+0x128e0>
   22c54:	mov	fp, r0
   22c58:	b	22bd4 <__assert_fail@plt+0x11aa8>
   22c5c:	mov	r0, r5
   22c60:	bl	110c0 <__uflow@plt>
   22c64:	mov	r4, r0
   22c68:	b	22c1c <__assert_fail@plt+0x11af0>
   22c6c:	mov	r3, #0
   22c70:	strb	r3, [fp, r6]
   22c74:	ldr	r3, [sp, #12]
   22c78:	mov	r0, r6
   22c7c:	str	fp, [r8, #4]
   22c80:	str	r3, [r8]
   22c84:	add	sp, sp, #52	; 0x34
   22c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c8c:	mvn	r0, #0
   22c90:	add	sp, sp, #52	; 0x34
   22c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c98:	mov	r0, r5
   22c9c:	bl	110c0 <__uflow@plt>
   22ca0:	subs	r4, r0, #0
   22ca4:	bge	22b44 <__assert_fail@plt+0x11a18>
   22ca8:	b	22bb4 <__assert_fail@plt+0x11a88>
   22cac:	cmp	r1, #0
   22cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22cb4:	mov	fp, r3
   22cb8:	sub	sp, sp, #36	; 0x24
   22cbc:	moveq	r3, #64	; 0x40
   22cc0:	mov	sl, r0
   22cc4:	addne	r0, r1, #1
   22cc8:	movne	r3, r0
   22ccc:	moveq	r0, r3
   22cd0:	mov	r1, #4
   22cd4:	str	r3, [sp, #20]
   22cd8:	str	r2, [sp, #12]
   22cdc:	bl	23968 <__assert_fail@plt+0x1283c>
   22ce0:	mov	r1, #4
   22ce4:	mov	r9, #1
   22ce8:	mov	r7, r0
   22cec:	ldr	r0, [sp, #20]
   22cf0:	bl	23968 <__assert_fail@plt+0x1283c>
   22cf4:	mov	r3, #0
   22cf8:	mov	r4, r3
   22cfc:	str	r3, [sp, #24]
   22d00:	str	r3, [sp, #28]
   22d04:	mov	r8, r0
   22d08:	b	22d38 <__assert_fail@plt+0x11c0c>
   22d0c:	cmn	r5, #1
   22d10:	mov	r1, r9
   22d14:	mov	r0, r6
   22d18:	beq	22da4 <__assert_fail@plt+0x11c78>
   22d1c:	bl	23968 <__assert_fail@plt+0x1283c>
   22d20:	str	r5, [r8, r4, lsl #2]
   22d24:	mov	r2, r6
   22d28:	ldr	r1, [sp, #28]
   22d2c:	bl	10ed4 <memcpy@plt>
   22d30:	str	r0, [r7, r4, lsl #2]
   22d34:	add	r4, r4, #1
   22d38:	add	r3, sp, #24
   22d3c:	mov	r2, fp
   22d40:	ldr	r1, [sp, #12]
   22d44:	mov	r0, sl
   22d48:	bl	22ac8 <__assert_fail@plt+0x1199c>
   22d4c:	ldr	r3, [sp, #20]
   22d50:	cmp	r4, r3
   22d54:	mov	r5, r0
   22d58:	add	r6, r0, #1
   22d5c:	blt	22d0c <__assert_fail@plt+0x11be0>
   22d60:	mov	r3, #4
   22d64:	str	r3, [sp]
   22d68:	mov	r0, r7
   22d6c:	mvn	r3, #0
   22d70:	mov	r2, r9
   22d74:	add	r1, sp, #20
   22d78:	bl	23a0c <__assert_fail@plt+0x128e0>
   22d7c:	ldr	r1, [sp, #20]
   22d80:	mov	r2, #4
   22d84:	mov	r7, r0
   22d88:	mov	r0, r8
   22d8c:	bl	2390c <__assert_fail@plt+0x127e0>
   22d90:	cmn	r5, #1
   22d94:	mov	r1, r9
   22d98:	mov	r8, r0
   22d9c:	mov	r0, r6
   22da0:	bne	22d1c <__assert_fail@plt+0x11bf0>
   22da4:	mov	r3, #0
   22da8:	str	r3, [r7, r4, lsl #2]
   22dac:	ldr	r0, [sp, #28]
   22db0:	str	r3, [r8, r4, lsl #2]
   22db4:	bl	17b4c <__assert_fail@plt+0x6a20>
   22db8:	ldr	r3, [sp, #76]	; 0x4c
   22dbc:	cmp	r3, #0
   22dc0:	ldr	r3, [sp, #72]	; 0x48
   22dc4:	str	r7, [r3]
   22dc8:	ldrne	r3, [sp, #76]	; 0x4c
   22dcc:	strne	r8, [r3]
   22dd0:	beq	22de0 <__assert_fail@plt+0x11cb4>
   22dd4:	mov	r0, r4
   22dd8:	add	sp, sp, #36	; 0x24
   22ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22de0:	mov	r0, r8
   22de4:	bl	17b4c <__assert_fail@plt+0x6a20>
   22de8:	mov	r0, r4
   22dec:	add	sp, sp, #36	; 0x24
   22df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22df4:	push	{r4, r5, r6, r7, r8, lr}
   22df8:	mov	r8, r0
   22dfc:	ldr	r5, [pc, #84]	; 22e58 <__assert_fail@plt+0x11d2c>
   22e00:	mov	r7, r1
   22e04:	mov	r4, r2
   22e08:	mov	r2, r4
   22e0c:	mov	r1, r7
   22e10:	mov	r0, r8
   22e14:	bl	1106c <write@plt>
   22e18:	subs	r6, r0, #0
   22e1c:	bge	22e50 <__assert_fail@plt+0x11d24>
   22e20:	bl	11024 <__errno_location@plt>
   22e24:	ldr	r3, [r0]
   22e28:	cmp	r3, #4
   22e2c:	beq	22e08 <__assert_fail@plt+0x11cdc>
   22e30:	cmp	r4, r5
   22e34:	sub	r3, r3, #22
   22e38:	clz	r3, r3
   22e3c:	lsr	r3, r3, #5
   22e40:	movls	r3, #0
   22e44:	cmp	r3, #0
   22e48:	mov	r4, r5
   22e4c:	bne	22e08 <__assert_fail@plt+0x11cdc>
   22e50:	mov	r0, r6
   22e54:	pop	{r4, r5, r6, r7, r8, pc}
   22e58:	svcvc	0x00f00000	; IMB
   22e5c:	push	{r4, r5, r6, lr}
   22e60:	mov	r2, r1
   22e64:	mov	r4, r1
   22e68:	mov	r1, #0
   22e6c:	mov	r5, r0
   22e70:	bl	11090 <memchr@plt>
   22e74:	cmp	r0, #0
   22e78:	subne	r0, r0, r5
   22e7c:	addne	r0, r0, #1
   22e80:	moveq	r0, r4
   22e84:	pop	{r4, r5, r6, pc}
   22e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e8c:	sub	sp, sp, #76	; 0x4c
   22e90:	mov	r7, r1
   22e94:	bl	10f10 <strdup@plt>
   22e98:	subs	r9, r0, #0
   22e9c:	beq	23330 <__assert_fail@plt+0x12204>
   22ea0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   22ea4:	cmp	r0, #1
   22ea8:	bls	230fc <__assert_fail@plt+0x11fd0>
   22eac:	cmp	r7, #0
   22eb0:	bne	231ac <__assert_fail@plt+0x12080>
   22eb4:	add	r8, sp, #20
   22eb8:	mov	r0, r9
   22ebc:	str	r9, [sp, #32]
   22ec0:	bl	1100c <strlen@plt>
   22ec4:	mov	sl, #0
   22ec8:	str	sl, [sp, #20]
   22ecc:	strb	sl, [sp, #16]
   22ed0:	str	sl, [r8, #4]
   22ed4:	strb	sl, [sp, #28]
   22ed8:	add	fp, r9, r0
   22edc:	cmp	r9, fp
   22ee0:	str	fp, [sp, #12]
   22ee4:	bcs	230d4 <__assert_fail@plt+0x11fa8>
   22ee8:	mov	r7, sl
   22eec:	str	sl, [sp, #4]
   22ef0:	mov	r5, sl
   22ef4:	mov	r4, r9
   22ef8:	mov	r6, #1
   22efc:	b	22f40 <__assert_fail@plt+0x11e14>
   22f00:	cmp	r5, #1
   22f04:	beq	2303c <__assert_fail@plt+0x11f10>
   22f08:	cmp	r5, #2
   22f0c:	bne	22fb0 <__assert_fail@plt+0x11e84>
   22f10:	ldrb	r1, [sp, #40]	; 0x28
   22f14:	cmp	r1, #0
   22f18:	beq	22fb0 <__assert_fail@plt+0x11e84>
   22f1c:	ldr	r0, [sp, #44]	; 0x2c
   22f20:	bl	11000 <iswspace@plt>
   22f24:	cmp	r0, #0
   22f28:	moveq	r5, #1
   22f2c:	add	r4, r4, sl
   22f30:	cmp	r4, fp
   22f34:	str	r4, [sp, #32]
   22f38:	strb	r7, [sp, #28]
   22f3c:	bcs	230e0 <__assert_fail@plt+0x11fb4>
   22f40:	ldrb	r3, [sp, #16]
   22f44:	cmp	r3, #0
   22f48:	bne	22fcc <__assert_fail@plt+0x11ea0>
   22f4c:	ldrb	r1, [r4]
   22f50:	ldr	r3, [pc, #1008]	; 23348 <__assert_fail@plt+0x1221c>
   22f54:	and	r0, r1, #31
   22f58:	lsr	r1, r1, #5
   22f5c:	ldr	r3, [r3, r1, lsl #2]
   22f60:	lsr	r3, r3, r0
   22f64:	ands	sl, r3, #1
   22f68:	beq	22fb8 <__assert_fail@plt+0x11e8c>
   22f6c:	str	r6, [sp, #36]	; 0x24
   22f70:	ldr	fp, [sp, #12]
   22f74:	ldrb	r1, [r4]
   22f78:	ldr	r4, [sp, #32]
   22f7c:	strb	r6, [sp, #40]	; 0x28
   22f80:	str	r1, [sp, #44]	; 0x2c
   22f84:	cmp	r5, #0
   22f88:	strb	r6, [sp, #28]
   22f8c:	bne	22f00 <__assert_fail@plt+0x11dd4>
   22f90:	ldrb	r1, [sp, #40]	; 0x28
   22f94:	cmp	r1, #0
   22f98:	beq	22fb0 <__assert_fail@plt+0x11e84>
   22f9c:	ldr	r0, [sp, #44]	; 0x2c
   22fa0:	bl	11000 <iswspace@plt>
   22fa4:	clz	r5, r0
   22fa8:	lsr	r5, r5, #5
   22fac:	b	22f2c <__assert_fail@plt+0x11e00>
   22fb0:	mov	r5, #1
   22fb4:	b	22f2c <__assert_fail@plt+0x11e00>
   22fb8:	mov	r0, r8
   22fbc:	bl	10ee0 <mbsinit@plt>
   22fc0:	cmp	r0, #0
   22fc4:	beq	23308 <__assert_fail@plt+0x121dc>
   22fc8:	strb	r6, [sp, #16]
   22fcc:	sub	r2, fp, r4
   22fd0:	mov	r1, r4
   22fd4:	mov	r3, r8
   22fd8:	add	r0, sp, #44	; 0x2c
   22fdc:	bl	242b8 <__assert_fail@plt+0x1318c>
   22fe0:	cmn	r0, #1
   22fe4:	str	r0, [sp, #36]	; 0x24
   22fe8:	beq	23068 <__assert_fail@plt+0x11f3c>
   22fec:	cmn	r0, #2
   22ff0:	beq	23080 <__assert_fail@plt+0x11f54>
   22ff4:	cmp	r0, #0
   22ff8:	ldr	r4, [sp, #32]
   22ffc:	bne	2301c <__assert_fail@plt+0x11ef0>
   23000:	str	r6, [sp, #36]	; 0x24
   23004:	ldrb	r3, [r4]
   23008:	cmp	r3, #0
   2300c:	bne	2331c <__assert_fail@plt+0x121f0>
   23010:	ldr	r3, [sp, #44]	; 0x2c
   23014:	cmp	r3, #0
   23018:	bne	23334 <__assert_fail@plt+0x12208>
   2301c:	mov	r0, r8
   23020:	strb	r6, [sp, #40]	; 0x28
   23024:	bl	10ee0 <mbsinit@plt>
   23028:	ldr	fp, [sp, #12]
   2302c:	ldr	sl, [sp, #36]	; 0x24
   23030:	cmp	r0, #0
   23034:	strbne	r7, [sp, #16]
   23038:	b	22f84 <__assert_fail@plt+0x11e58>
   2303c:	ldrb	r1, [sp, #40]	; 0x28
   23040:	cmp	r1, #0
   23044:	beq	22f2c <__assert_fail@plt+0x11e00>
   23048:	ldr	r0, [sp, #44]	; 0x2c
   2304c:	bl	11000 <iswspace@plt>
   23050:	ldr	r3, [sp, #4]
   23054:	cmp	r0, #0
   23058:	movne	r3, r4
   2305c:	str	r3, [sp, #4]
   23060:	movne	r5, #2
   23064:	b	22f2c <__assert_fail@plt+0x11e00>
   23068:	str	r6, [sp, #36]	; 0x24
   2306c:	strb	r7, [sp, #40]	; 0x28
   23070:	ldr	fp, [sp, #12]
   23074:	ldr	r4, [sp, #32]
   23078:	mov	sl, #1
   2307c:	b	22f84 <__assert_fail@plt+0x11e58>
   23080:	ldr	fp, [sp, #12]
   23084:	ldr	r4, [sp, #32]
   23088:	strb	r7, [sp, #40]	; 0x28
   2308c:	sub	sl, fp, r4
   23090:	str	sl, [sp, #36]	; 0x24
   23094:	b	22f84 <__assert_fail@plt+0x11e58>
   23098:	ldr	r4, [sp, #32]
   2309c:	mov	r2, #1
   230a0:	mov	r3, #0
   230a4:	str	r2, [sp, #36]	; 0x24
   230a8:	strb	r3, [sp, #40]	; 0x28
   230ac:	mov	r3, #1
   230b0:	strb	r3, [sp, #28]
   230b4:	mov	r0, r4
   230b8:	bl	1100c <strlen@plt>
   230bc:	mov	r1, r4
   230c0:	add	r2, r0, #1
   230c4:	mov	r0, r9
   230c8:	bl	10eb0 <memmove@plt>
   230cc:	cmp	r7, #1
   230d0:	bne	22eb8 <__assert_fail@plt+0x11d8c>
   230d4:	mov	r0, r9
   230d8:	add	sp, sp, #76	; 0x4c
   230dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230e0:	cmp	r5, #2
   230e4:	bne	230d4 <__assert_fail@plt+0x11fa8>
   230e8:	ldr	r3, [sp, #4]
   230ec:	mov	r0, r9
   230f0:	strb	r7, [r3]
   230f4:	add	sp, sp, #76	; 0x4c
   230f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230fc:	cmp	r7, #0
   23100:	beq	2315c <__assert_fail@plt+0x12030>
   23104:	ldrb	r4, [r9]
   23108:	cmp	r4, #0
   2310c:	beq	23300 <__assert_fail@plt+0x121d4>
   23110:	bl	10fe8 <__ctype_b_loc@plt>
   23114:	mov	r5, r9
   23118:	ldr	r2, [r0]
   2311c:	b	2312c <__assert_fail@plt+0x12000>
   23120:	ldrb	r4, [r5, #1]!
   23124:	cmp	r4, #0
   23128:	beq	2313c <__assert_fail@plt+0x12010>
   2312c:	lsl	r4, r4, #1
   23130:	ldrh	r3, [r2, r4]
   23134:	tst	r3, #8192	; 0x2000
   23138:	bne	23120 <__assert_fail@plt+0x11ff4>
   2313c:	mov	r0, r5
   23140:	bl	1100c <strlen@plt>
   23144:	mov	r1, r5
   23148:	add	r2, r0, #1
   2314c:	mov	r0, r9
   23150:	bl	10eb0 <memmove@plt>
   23154:	cmp	r7, #1
   23158:	beq	230d4 <__assert_fail@plt+0x11fa8>
   2315c:	mov	r0, r9
   23160:	bl	1100c <strlen@plt>
   23164:	sub	r0, r0, #1
   23168:	adds	r4, r9, r0
   2316c:	bcs	230d4 <__assert_fail@plt+0x11fa8>
   23170:	bl	10fe8 <__ctype_b_loc@plt>
   23174:	mov	r1, #0
   23178:	ldr	r2, [r0]
   2317c:	b	2318c <__assert_fail@plt+0x12060>
   23180:	strb	r1, [r4], #-1
   23184:	cmp	r9, r4
   23188:	bhi	230d4 <__assert_fail@plt+0x11fa8>
   2318c:	ldrb	r3, [r4]
   23190:	lsl	r3, r3, #1
   23194:	ldrh	r3, [r2, r3]
   23198:	tst	r3, #8192	; 0x2000
   2319c:	bne	23180 <__assert_fail@plt+0x12054>
   231a0:	mov	r0, r9
   231a4:	add	sp, sp, #76	; 0x4c
   231a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   231ac:	mov	r0, r9
   231b0:	str	r9, [sp, #32]
   231b4:	bl	1100c <strlen@plt>
   231b8:	add	r8, sp, #20
   231bc:	mov	sl, #0
   231c0:	str	sl, [sp, #20]
   231c4:	strb	sl, [sp, #16]
   231c8:	str	sl, [r8, #4]
   231cc:	strb	sl, [sp, #28]
   231d0:	add	r5, r9, r0
   231d4:	cmp	r9, r5
   231d8:	str	r5, [sp, #12]
   231dc:	movcs	r4, r9
   231e0:	bcs	230b4 <__assert_fail@plt+0x11f88>
   231e4:	ldr	fp, [pc, #348]	; 23348 <__assert_fail@plt+0x1221c>
   231e8:	mov	r4, r9
   231ec:	mov	r6, #1
   231f0:	b	23254 <__assert_fail@plt+0x12128>
   231f4:	ldrb	r3, [r4]
   231f8:	and	r2, r3, #31
   231fc:	lsr	r3, r3, #5
   23200:	ldr	r3, [fp, r3, lsl #2]
   23204:	lsr	r3, r3, r2
   23208:	tst	r3, #1
   2320c:	beq	232c8 <__assert_fail@plt+0x1219c>
   23210:	str	r6, [sp, #36]	; 0x24
   23214:	ldrb	r5, [r4]
   23218:	ldr	r4, [sp, #32]
   2321c:	strb	r6, [sp, #40]	; 0x28
   23220:	str	r5, [sp, #44]	; 0x2c
   23224:	mov	r0, r5
   23228:	strb	r6, [sp, #28]
   2322c:	bl	11000 <iswspace@plt>
   23230:	cmp	r0, #0
   23234:	beq	230b4 <__assert_fail@plt+0x11f88>
   23238:	ldr	r3, [sp, #36]	; 0x24
   2323c:	ldr	r5, [sp, #12]
   23240:	add	r4, r4, r3
   23244:	cmp	r5, r4
   23248:	strb	sl, [sp, #28]
   2324c:	str	r4, [sp, #32]
   23250:	bls	230b4 <__assert_fail@plt+0x11f88>
   23254:	ldrb	r3, [sp, #16]
   23258:	cmp	r3, #0
   2325c:	beq	231f4 <__assert_fail@plt+0x120c8>
   23260:	sub	r2, r5, r4
   23264:	mov	r1, r4
   23268:	mov	r3, r8
   2326c:	add	r0, sp, #44	; 0x2c
   23270:	bl	242b8 <__assert_fail@plt+0x1318c>
   23274:	cmn	r0, #1
   23278:	str	r0, [sp, #36]	; 0x24
   2327c:	beq	23098 <__assert_fail@plt+0x11f6c>
   23280:	cmn	r0, #2
   23284:	ldr	r4, [sp, #32]
   23288:	beq	232e8 <__assert_fail@plt+0x121bc>
   2328c:	cmp	r0, #0
   23290:	bne	232e0 <__assert_fail@plt+0x121b4>
   23294:	str	r6, [sp, #36]	; 0x24
   23298:	ldrb	r3, [r4]
   2329c:	cmp	r3, #0
   232a0:	bne	2331c <__assert_fail@plt+0x121f0>
   232a4:	ldr	r5, [sp, #44]	; 0x2c
   232a8:	cmp	r5, #0
   232ac:	bne	23334 <__assert_fail@plt+0x12208>
   232b0:	mov	r0, r8
   232b4:	strb	r6, [sp, #40]	; 0x28
   232b8:	bl	10ee0 <mbsinit@plt>
   232bc:	cmp	r0, #0
   232c0:	strbne	sl, [sp, #16]
   232c4:	b	23224 <__assert_fail@plt+0x120f8>
   232c8:	mov	r0, r8
   232cc:	bl	10ee0 <mbsinit@plt>
   232d0:	cmp	r0, #0
   232d4:	beq	23308 <__assert_fail@plt+0x121dc>
   232d8:	strb	r6, [sp, #16]
   232dc:	b	23260 <__assert_fail@plt+0x12134>
   232e0:	ldr	r5, [sp, #44]	; 0x2c
   232e4:	b	232b0 <__assert_fail@plt+0x12184>
   232e8:	ldr	r3, [sp, #12]
   232ec:	mov	r2, #0
   232f0:	sub	r3, r3, r4
   232f4:	str	r3, [sp, #36]	; 0x24
   232f8:	strb	r2, [sp, #40]	; 0x28
   232fc:	b	230ac <__assert_fail@plt+0x11f80>
   23300:	mov	r5, r9
   23304:	b	2313c <__assert_fail@plt+0x12010>
   23308:	ldr	r3, [pc, #60]	; 2334c <__assert_fail@plt+0x12220>
   2330c:	mov	r2, #135	; 0x87
   23310:	ldr	r1, [pc, #56]	; 23350 <__assert_fail@plt+0x12224>
   23314:	ldr	r0, [pc, #56]	; 23354 <__assert_fail@plt+0x12228>
   23318:	bl	1112c <__assert_fail@plt>
   2331c:	ldr	r3, [pc, #40]	; 2334c <__assert_fail@plt+0x12220>
   23320:	mov	r2, #162	; 0xa2
   23324:	ldr	r1, [pc, #36]	; 23350 <__assert_fail@plt+0x12224>
   23328:	ldr	r0, [pc, #40]	; 23358 <__assert_fail@plt+0x1222c>
   2332c:	bl	1112c <__assert_fail@plt>
   23330:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23334:	ldr	r3, [pc, #16]	; 2334c <__assert_fail@plt+0x12220>
   23338:	mov	r2, #163	; 0xa3
   2333c:	ldr	r1, [pc, #12]	; 23350 <__assert_fail@plt+0x12224>
   23340:	ldr	r0, [pc, #20]	; 2335c <__assert_fail@plt+0x12230>
   23344:	bl	1112c <__assert_fail@plt>
   23348:	andeq	sl, r2, r8, ror #21
   2334c:	andeq	sl, r2, ip, lsl #15
   23350:	andeq	sl, r2, r0, lsr #15
   23354:	andeq	sl, r2, r4, asr r6
   23358:	andeq	sl, r2, ip, ror #12
   2335c:	andeq	sl, r2, r4, lsl #13
   23360:	push	{r4, r5, r6, lr}
   23364:	sub	sp, sp, #32
   23368:	cmp	r1, #0
   2336c:	mov	r4, r0
   23370:	ldr	r5, [sp, #48]	; 0x30
   23374:	ldr	r6, [sp, #52]	; 0x34
   23378:	beq	23690 <__assert_fail@plt+0x12564>
   2337c:	stm	sp, {r2, r3}
   23380:	mov	r3, r1
   23384:	ldr	r2, [pc, #808]	; 236b4 <__assert_fail@plt+0x12588>
   23388:	mov	r1, #1
   2338c:	bl	11084 <__fprintf_chk@plt>
   23390:	mov	r2, #5
   23394:	ldr	r1, [pc, #796]	; 236b8 <__assert_fail@plt+0x1258c>
   23398:	mov	r0, #0
   2339c:	bl	10f04 <dcgettext@plt>
   233a0:	ldr	r3, [pc, #788]	; 236bc <__assert_fail@plt+0x12590>
   233a4:	ldr	r2, [pc, #788]	; 236c0 <__assert_fail@plt+0x12594>
   233a8:	str	r3, [sp]
   233ac:	mov	r1, #1
   233b0:	mov	r3, r0
   233b4:	mov	r0, r4
   233b8:	bl	11084 <__fprintf_chk@plt>
   233bc:	mov	r1, r4
   233c0:	mov	r0, #10
   233c4:	bl	10ef8 <fputc_unlocked@plt>
   233c8:	mov	r2, #5
   233cc:	ldr	r1, [pc, #752]	; 236c4 <__assert_fail@plt+0x12598>
   233d0:	mov	r0, #0
   233d4:	bl	10f04 <dcgettext@plt>
   233d8:	mov	r1, #1
   233dc:	ldr	r3, [pc, #740]	; 236c8 <__assert_fail@plt+0x1259c>
   233e0:	mov	r2, r0
   233e4:	mov	r0, r4
   233e8:	bl	11084 <__fprintf_chk@plt>
   233ec:	mov	r1, r4
   233f0:	mov	r0, #10
   233f4:	bl	10ef8 <fputc_unlocked@plt>
   233f8:	cmp	r6, #9
   233fc:	ldrls	pc, [pc, r6, lsl #2]
   23400:	b	236a8 <__assert_fail@plt+0x1257c>
   23404:	andeq	r3, r2, r8, lsl #9
   23408:	muleq	r2, r0, r4
   2340c:			; <UNDEFINED> instruction: 0x000234bc
   23410:	strdeq	r3, [r2], -r0
   23414:	andeq	r3, r2, ip, lsr #10
   23418:	andeq	r3, r2, r8, ror #10
   2341c:	andeq	r3, r2, r4, lsr #11
   23420:	andeq	r3, r2, r8, ror #11
   23424:	andeq	r3, r2, r8, lsr r6
   23428:	andeq	r3, r2, ip, lsr #8
   2342c:	ldr	r1, [pc, #664]	; 236cc <__assert_fail@plt+0x125a0>
   23430:	mov	r2, #5
   23434:	mov	r0, #0
   23438:	bl	10f04 <dcgettext@plt>
   2343c:	ldr	ip, [r5, #32]
   23440:	ldr	r1, [r5, #28]
   23444:	ldr	r2, [r5, #24]
   23448:	ldr	r3, [r5]
   2344c:	ldr	r6, [r5, #20]
   23450:	str	ip, [sp, #28]
   23454:	ldr	lr, [r5, #16]
   23458:	str	r1, [sp, #24]
   2345c:	ldr	ip, [r5, #12]
   23460:	str	r2, [sp, #20]
   23464:	ldr	r1, [r5, #8]
   23468:	ldr	r2, [r5, #4]
   2346c:	str	r6, [sp, #16]
   23470:	stmib	sp, {r1, ip, lr}
   23474:	mov	r1, #1
   23478:	str	r2, [sp]
   2347c:	mov	r2, r0
   23480:	mov	r0, r4
   23484:	bl	11084 <__fprintf_chk@plt>
   23488:	add	sp, sp, #32
   2348c:	pop	{r4, r5, r6, pc}
   23490:	mov	r2, #5
   23494:	ldr	r1, [pc, #564]	; 236d0 <__assert_fail@plt+0x125a4>
   23498:	mov	r0, #0
   2349c:	bl	10f04 <dcgettext@plt>
   234a0:	ldr	r3, [r5]
   234a4:	mov	r1, #1
   234a8:	mov	r2, r0
   234ac:	mov	r0, r4
   234b0:	add	sp, sp, #32
   234b4:	pop	{r4, r5, r6, lr}
   234b8:	b	11084 <__fprintf_chk@plt>
   234bc:	mov	r2, #5
   234c0:	ldr	r1, [pc, #524]	; 236d4 <__assert_fail@plt+0x125a8>
   234c4:	mov	r0, #0
   234c8:	bl	10f04 <dcgettext@plt>
   234cc:	ldr	r2, [r5, #4]
   234d0:	ldr	r3, [r5]
   234d4:	mov	r1, #1
   234d8:	str	r2, [sp, #48]	; 0x30
   234dc:	mov	r2, r0
   234e0:	mov	r0, r4
   234e4:	add	sp, sp, #32
   234e8:	pop	{r4, r5, r6, lr}
   234ec:	b	11084 <__fprintf_chk@plt>
   234f0:	mov	r2, #5
   234f4:	ldr	r1, [pc, #476]	; 236d8 <__assert_fail@plt+0x125ac>
   234f8:	mov	r0, #0
   234fc:	bl	10f04 <dcgettext@plt>
   23500:	ldr	r1, [r5, #8]
   23504:	ldr	r2, [r5, #4]
   23508:	ldr	r3, [r5]
   2350c:	str	r1, [sp, #52]	; 0x34
   23510:	str	r2, [sp, #48]	; 0x30
   23514:	mov	r1, #1
   23518:	mov	r2, r0
   2351c:	mov	r0, r4
   23520:	add	sp, sp, #32
   23524:	pop	{r4, r5, r6, lr}
   23528:	b	11084 <__fprintf_chk@plt>
   2352c:	mov	r2, #5
   23530:	ldr	r1, [pc, #420]	; 236dc <__assert_fail@plt+0x125b0>
   23534:	mov	r0, #0
   23538:	bl	10f04 <dcgettext@plt>
   2353c:	ldr	r1, [r5, #8]
   23540:	ldr	ip, [r5, #12]
   23544:	ldr	r2, [r5, #4]
   23548:	ldr	r3, [r5]
   2354c:	stmib	sp, {r1, ip}
   23550:	str	r2, [sp]
   23554:	mov	r1, #1
   23558:	mov	r2, r0
   2355c:	mov	r0, r4
   23560:	bl	11084 <__fprintf_chk@plt>
   23564:	b	23488 <__assert_fail@plt+0x1235c>
   23568:	mov	r2, #5
   2356c:	ldr	r1, [pc, #364]	; 236e0 <__assert_fail@plt+0x125b4>
   23570:	mov	r0, #0
   23574:	bl	10f04 <dcgettext@plt>
   23578:	add	r1, r5, #8
   2357c:	ldr	r2, [r5, #4]
   23580:	ldm	r1, {r1, ip, lr}
   23584:	ldr	r3, [r5]
   23588:	str	r2, [sp]
   2358c:	stmib	sp, {r1, ip, lr}
   23590:	mov	r1, #1
   23594:	mov	r2, r0
   23598:	mov	r0, r4
   2359c:	bl	11084 <__fprintf_chk@plt>
   235a0:	b	23488 <__assert_fail@plt+0x1235c>
   235a4:	mov	r2, #5
   235a8:	ldr	r1, [pc, #308]	; 236e4 <__assert_fail@plt+0x125b8>
   235ac:	mov	r0, #0
   235b0:	bl	10f04 <dcgettext@plt>
   235b4:	add	r1, r5, #8
   235b8:	ldr	r2, [r5, #4]
   235bc:	ldm	r1, {r1, ip, lr}
   235c0:	ldr	r6, [r5, #20]
   235c4:	ldr	r3, [r5]
   235c8:	stmib	sp, {r1, ip, lr}
   235cc:	mov	r1, #1
   235d0:	str	r2, [sp]
   235d4:	str	r6, [sp, #16]
   235d8:	mov	r2, r0
   235dc:	mov	r0, r4
   235e0:	bl	11084 <__fprintf_chk@plt>
   235e4:	b	23488 <__assert_fail@plt+0x1235c>
   235e8:	mov	r2, #5
   235ec:	ldr	r1, [pc, #244]	; 236e8 <__assert_fail@plt+0x125bc>
   235f0:	mov	r0, #0
   235f4:	bl	10f04 <dcgettext@plt>
   235f8:	ldr	r2, [r5, #24]
   235fc:	ldr	r3, [r5]
   23600:	ldr	r6, [r5, #20]
   23604:	ldr	lr, [r5, #16]
   23608:	ldr	ip, [r5, #12]
   2360c:	str	r2, [sp, #20]
   23610:	ldr	r1, [r5, #8]
   23614:	ldr	r2, [r5, #4]
   23618:	str	r6, [sp, #16]
   2361c:	stmib	sp, {r1, ip, lr}
   23620:	mov	r1, #1
   23624:	str	r2, [sp]
   23628:	mov	r2, r0
   2362c:	mov	r0, r4
   23630:	bl	11084 <__fprintf_chk@plt>
   23634:	b	23488 <__assert_fail@plt+0x1235c>
   23638:	mov	r2, #5
   2363c:	ldr	r1, [pc, #168]	; 236ec <__assert_fail@plt+0x125c0>
   23640:	mov	r0, #0
   23644:	bl	10f04 <dcgettext@plt>
   23648:	ldr	r1, [r5, #28]
   2364c:	ldr	r2, [r5, #24]
   23650:	ldr	r3, [r5]
   23654:	ldr	r6, [r5, #20]
   23658:	ldr	lr, [r5, #16]
   2365c:	str	r1, [sp, #24]
   23660:	ldr	ip, [r5, #12]
   23664:	str	r2, [sp, #20]
   23668:	ldr	r1, [r5, #8]
   2366c:	ldr	r2, [r5, #4]
   23670:	str	r6, [sp, #16]
   23674:	stmib	sp, {r1, ip, lr}
   23678:	mov	r1, #1
   2367c:	str	r2, [sp]
   23680:	mov	r2, r0
   23684:	mov	r0, r4
   23688:	bl	11084 <__fprintf_chk@plt>
   2368c:	b	23488 <__assert_fail@plt+0x1235c>
   23690:	str	r3, [sp]
   23694:	mov	r1, #1
   23698:	mov	r3, r2
   2369c:	ldr	r2, [pc, #76]	; 236f0 <__assert_fail@plt+0x125c4>
   236a0:	bl	11084 <__fprintf_chk@plt>
   236a4:	b	23390 <__assert_fail@plt+0x12264>
   236a8:	mov	r2, #5
   236ac:	ldr	r1, [pc, #64]	; 236f4 <__assert_fail@plt+0x125c8>
   236b0:	b	23434 <__assert_fail@plt+0x12308>
   236b4:			; <UNDEFINED> instruction: 0x0002a7b0
   236b8:	andeq	sl, r2, r4, asr #15
   236bc:	andeq	r0, r0, r6, ror #15
   236c0:	muleq	r2, ip, sl
   236c4:	andeq	sl, r2, r8, asr #15
   236c8:	andeq	sl, r2, r4, ror r8
   236cc:	andeq	sl, r2, r4, lsr #19
   236d0:	muleq	r2, r8, r8
   236d4:	andeq	sl, r2, r8, lsr #17
   236d8:	andeq	sl, r2, r0, asr #17
   236dc:	ldrdeq	sl, [r2], -ip
   236e0:	strdeq	sl, [r2], -ip
   236e4:	andeq	sl, r2, r0, lsr #18
   236e8:	andeq	sl, r2, r8, asr #18
   236ec:	andeq	sl, r2, r4, ror r9
   236f0:			; <UNDEFINED> instruction: 0x0002a7bc
   236f4:	ldrdeq	sl, [r2], -r8
   236f8:	push	{r4, r5, lr}
   236fc:	sub	sp, sp, #12
   23700:	ldr	r5, [sp, #24]
   23704:	ldr	ip, [r5]
   23708:	cmp	ip, #0
   2370c:	beq	23728 <__assert_fail@plt+0x125fc>
   23710:	mov	lr, r5
   23714:	mov	ip, #0
   23718:	ldr	r4, [lr, #4]!
   2371c:	add	ip, ip, #1
   23720:	cmp	r4, #0
   23724:	bne	23718 <__assert_fail@plt+0x125ec>
   23728:	stm	sp, {r5, ip}
   2372c:	bl	23360 <__assert_fail@plt+0x12234>
   23730:	add	sp, sp, #12
   23734:	pop	{r4, r5, pc}
   23738:	push	{r4, r5, lr}
   2373c:	sub	sp, sp, #52	; 0x34
   23740:	add	r5, sp, #4
   23744:	ldr	r4, [sp, #64]	; 0x40
   23748:	mov	ip, #0
   2374c:	sub	r4, r4, #4
   23750:	ldr	lr, [r4, #4]!
   23754:	cmp	lr, #0
   23758:	str	lr, [r5, #4]!
   2375c:	beq	2376c <__assert_fail@plt+0x12640>
   23760:	add	ip, ip, #1
   23764:	cmp	ip, #10
   23768:	bne	23750 <__assert_fail@plt+0x12624>
   2376c:	add	lr, sp, #8
   23770:	str	ip, [sp, #4]
   23774:	str	lr, [sp]
   23778:	bl	23360 <__assert_fail@plt+0x12234>
   2377c:	add	sp, sp, #52	; 0x34
   23780:	pop	{r4, r5, pc}
   23784:	push	{r3}		; (str r3, [sp, #-4]!)
   23788:	push	{r4, lr}
   2378c:	sub	sp, sp, #60	; 0x3c
   23790:	add	lr, sp, #56	; 0x38
   23794:	add	r3, sp, #72	; 0x48
   23798:	str	r3, [lr, #-44]!	; 0xffffffd4
   2379c:	add	r4, sp, #68	; 0x44
   237a0:	mov	r3, #0
   237a4:	ldr	ip, [r4, #4]!
   237a8:	cmp	ip, #0
   237ac:	str	ip, [lr, #4]!
   237b0:	beq	237c0 <__assert_fail@plt+0x12694>
   237b4:	add	r3, r3, #1
   237b8:	cmp	r3, #10
   237bc:	bne	237a4 <__assert_fail@plt+0x12678>
   237c0:	add	ip, sp, #16
   237c4:	str	r3, [sp, #4]
   237c8:	str	ip, [sp]
   237cc:	ldr	r3, [sp, #68]	; 0x44
   237d0:	bl	23360 <__assert_fail@plt+0x12234>
   237d4:	add	sp, sp, #60	; 0x3c
   237d8:	pop	{r4, lr}
   237dc:	add	sp, sp, #4
   237e0:	bx	lr
   237e4:	ldr	r3, [pc, #116]	; 23860 <__assert_fail@plt+0x12734>
   237e8:	push	{r4, lr}
   237ec:	mov	r0, #10
   237f0:	ldr	r1, [r3]
   237f4:	bl	10ef8 <fputc_unlocked@plt>
   237f8:	mov	r2, #5
   237fc:	ldr	r1, [pc, #96]	; 23864 <__assert_fail@plt+0x12738>
   23800:	mov	r0, #0
   23804:	bl	10f04 <dcgettext@plt>
   23808:	ldr	r2, [pc, #88]	; 23868 <__assert_fail@plt+0x1273c>
   2380c:	mov	r1, r0
   23810:	mov	r0, #1
   23814:	bl	11060 <__printf_chk@plt>
   23818:	mov	r2, #5
   2381c:	ldr	r1, [pc, #72]	; 2386c <__assert_fail@plt+0x12740>
   23820:	mov	r0, #0
   23824:	bl	10f04 <dcgettext@plt>
   23828:	ldr	r3, [pc, #64]	; 23870 <__assert_fail@plt+0x12744>
   2382c:	ldr	r2, [pc, #64]	; 23874 <__assert_fail@plt+0x12748>
   23830:	mov	r1, r0
   23834:	mov	r0, #1
   23838:	bl	11060 <__printf_chk@plt>
   2383c:	mov	r2, #5
   23840:	ldr	r1, [pc, #48]	; 23878 <__assert_fail@plt+0x1274c>
   23844:	mov	r0, #0
   23848:	bl	10f04 <dcgettext@plt>
   2384c:	ldr	r2, [pc, #40]	; 2387c <__assert_fail@plt+0x12750>
   23850:	pop	{r4, lr}
   23854:	mov	r1, r0
   23858:	mov	r0, #1
   2385c:	b	11060 <__printf_chk@plt>
   23860:	andeq	fp, r3, r4, lsl #3
   23864:	andeq	sl, r2, r4, lsl sl
   23868:	andeq	sl, r2, r8, lsr #20
   2386c:	andeq	sl, r2, r0, asr #20
   23870:	andeq	r9, r2, r4, ror fp
   23874:	muleq	r2, ip, fp
   23878:	andeq	sl, r2, r4, asr sl
   2387c:	andeq	sl, r2, ip, ror sl
   23880:	push	{r4, lr}
   23884:	bl	23ee4 <__assert_fail@plt+0x12db8>
   23888:	cmp	r0, #0
   2388c:	popne	{r4, pc}
   23890:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23894:	push	{r4, lr}
   23898:	bl	23ee4 <__assert_fail@plt+0x12db8>
   2389c:	cmp	r0, #0
   238a0:	popne	{r4, pc}
   238a4:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   238a8:	push	{r4, lr}
   238ac:	bl	23ee4 <__assert_fail@plt+0x12db8>
   238b0:	cmp	r0, #0
   238b4:	popne	{r4, pc}
   238b8:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   238bc:	push	{r4, r5, r6, lr}
   238c0:	mov	r5, r0
   238c4:	mov	r4, r1
   238c8:	bl	23f10 <__assert_fail@plt+0x12de4>
   238cc:	cmp	r0, #0
   238d0:	popne	{r4, r5, r6, pc}
   238d4:	adds	r4, r4, #0
   238d8:	movne	r4, #1
   238dc:	cmp	r5, #0
   238e0:	orreq	r4, r4, #1
   238e4:	cmp	r4, #0
   238e8:	popeq	{r4, r5, r6, pc}
   238ec:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   238f0:	push	{r4, lr}
   238f4:	cmp	r1, #0
   238f8:	orreq	r1, r1, #1
   238fc:	bl	23f10 <__assert_fail@plt+0x12de4>
   23900:	cmp	r0, #0
   23904:	popne	{r4, pc}
   23908:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   2390c:	push	{r4, r5, r6, lr}
   23910:	mov	r6, r0
   23914:	mov	r5, r1
   23918:	mov	r4, r2
   2391c:	bl	2588c <__assert_fail@plt+0x14760>
   23920:	cmp	r0, #0
   23924:	popne	{r4, r5, r6, pc}
   23928:	cmp	r6, #0
   2392c:	beq	2393c <__assert_fail@plt+0x12810>
   23930:	cmp	r5, #0
   23934:	cmpne	r4, #0
   23938:	popeq	{r4, r5, r6, pc}
   2393c:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23940:	b	2390c <__assert_fail@plt+0x127e0>
   23944:	cmp	r2, #0
   23948:	cmpne	r1, #0
   2394c:	moveq	r2, #1
   23950:	moveq	r1, r2
   23954:	push	{r4, lr}
   23958:	bl	2588c <__assert_fail@plt+0x14760>
   2395c:	cmp	r0, #0
   23960:	popne	{r4, pc}
   23964:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23968:	mov	r2, r1
   2396c:	mov	r1, r0
   23970:	mov	r0, #0
   23974:	b	2390c <__assert_fail@plt+0x127e0>
   23978:	mov	r2, r1
   2397c:	mov	r1, r0
   23980:	mov	r0, #0
   23984:	b	23944 <__assert_fail@plt+0x12818>
   23988:	push	{r4, r5, r6, lr}
   2398c:	subs	r6, r0, #0
   23990:	sub	sp, sp, #8
   23994:	mov	r5, r1
   23998:	ldr	r4, [r1]
   2399c:	beq	239d8 <__assert_fail@plt+0x128ac>
   239a0:	lsr	r1, r4, #1
   239a4:	add	r3, r1, #1
   239a8:	mvn	r3, r3
   239ac:	cmp	r4, r3
   239b0:	bhi	239d4 <__assert_fail@plt+0x128a8>
   239b4:	add	r4, r4, #1
   239b8:	add	r4, r4, r1
   239bc:	mov	r0, r6
   239c0:	mov	r1, r4
   239c4:	bl	2390c <__assert_fail@plt+0x127e0>
   239c8:	str	r4, [r5]
   239cc:	add	sp, sp, #8
   239d0:	pop	{r4, r5, r6, pc}
   239d4:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   239d8:	cmp	r4, #0
   239dc:	bne	239bc <__assert_fail@plt+0x12890>
   239e0:	mov	r1, r2
   239e4:	mov	r0, #64	; 0x40
   239e8:	str	r2, [sp, #4]
   239ec:	bl	26120 <__assert_fail@plt+0x14ff4>
   239f0:	ldr	r2, [sp, #4]
   239f4:	cmp	r0, #0
   239f8:	movne	r4, r0
   239fc:	addeq	r4, r0, #1
   23a00:	b	239bc <__assert_fail@plt+0x12890>
   23a04:	mov	r2, #1
   23a08:	b	23988 <__assert_fail@plt+0x1285c>
   23a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a10:	sub	sp, sp, #12
   23a14:	ldr	r6, [r1]
   23a18:	mov	sl, r1
   23a1c:	mov	r9, r0
   23a20:	asrs	r4, r6, #1
   23a24:	mov	r5, r2
   23a28:	mov	fp, r3
   23a2c:	ldr	r7, [sp, #48]	; 0x30
   23a30:	bmi	23b9c <__assert_fail@plt+0x12a70>
   23a34:	mvn	r3, #-2147483648	; 0x80000000
   23a38:	sub	r3, r3, r4
   23a3c:	cmp	r6, r3
   23a40:	movle	r3, #0
   23a44:	movgt	r3, #1
   23a48:	mvn	r8, fp
   23a4c:	cmp	r3, #0
   23a50:	addeq	r4, r4, r6
   23a54:	mvnne	r4, #-2147483648	; 0x80000000
   23a58:	lsr	r8, r8, #31
   23a5c:	cmp	fp, r4
   23a60:	movge	r3, #0
   23a64:	andlt	r3, r8, #1
   23a68:	cmp	r3, #0
   23a6c:	beq	23b54 <__assert_fail@plt+0x12a28>
   23a70:	cmp	r7, #0
   23a74:	blt	23c24 <__assert_fail@plt+0x12af8>
   23a78:	bne	23c1c <__assert_fail@plt+0x12af0>
   23a7c:	mov	r2, #64	; 0x40
   23a80:	mov	r1, r7
   23a84:	mov	r0, r2
   23a88:	str	r2, [sp, #4]
   23a8c:	bl	2632c <__assert_fail@plt+0x15200>
   23a90:	ldr	r2, [sp, #4]
   23a94:	mov	r1, r7
   23a98:	mov	r4, r0
   23a9c:	mov	r0, r2
   23aa0:	bl	2654c <__assert_fail@plt+0x15420>
   23aa4:	ldr	r2, [sp, #4]
   23aa8:	sub	r1, r2, r1
   23aac:	cmp	r9, #0
   23ab0:	sub	r3, r4, r6
   23ab4:	streq	r9, [sl]
   23ab8:	cmp	r3, r5
   23abc:	bge	23b40 <__assert_fail@plt+0x12a14>
   23ac0:	cmp	r5, #0
   23ac4:	blt	23bb0 <__assert_fail@plt+0x12a84>
   23ac8:	cmp	r6, #0
   23acc:	blt	23aec <__assert_fail@plt+0x129c0>
   23ad0:	mvn	r3, #-2147483648	; 0x80000000
   23ad4:	sub	r3, r3, r5
   23ad8:	cmp	r6, r3
   23adc:	movle	r3, #0
   23ae0:	movgt	r3, #1
   23ae4:	cmp	r3, #0
   23ae8:	bne	23cac <__assert_fail@plt+0x12b80>
   23aec:	add	r5, r6, r5
   23af0:	cmp	fp, r5
   23af4:	movge	r8, #0
   23af8:	andlt	r8, r8, #1
   23afc:	cmp	r8, #0
   23b00:	mov	r4, r5
   23b04:	bne	23cac <__assert_fail@plt+0x12b80>
   23b08:	cmp	r7, #0
   23b0c:	blt	23bc4 <__assert_fail@plt+0x12a98>
   23b10:	beq	23b3c <__assert_fail@plt+0x12a10>
   23b14:	cmp	r5, #0
   23b18:	blt	23c6c <__assert_fail@plt+0x12b40>
   23b1c:	mov	r1, r7
   23b20:	mvn	r0, #-2147483648	; 0x80000000
   23b24:	bl	2632c <__assert_fail@plt+0x15200>
   23b28:	cmp	r5, r0
   23b2c:	movle	r0, #0
   23b30:	movgt	r0, #1
   23b34:	cmp	r0, #0
   23b38:	bne	23cac <__assert_fail@plt+0x12b80>
   23b3c:	mul	r1, r5, r7
   23b40:	mov	r0, r9
   23b44:	bl	238bc <__assert_fail@plt+0x12790>
   23b48:	str	r4, [sl]
   23b4c:	add	sp, sp, #12
   23b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b54:	cmp	r7, #0
   23b58:	blt	23bf0 <__assert_fail@plt+0x12ac4>
   23b5c:	beq	23a7c <__assert_fail@plt+0x12950>
   23b60:	cmp	r4, #0
   23b64:	blt	23c2c <__assert_fail@plt+0x12b00>
   23b68:	mov	r1, r7
   23b6c:	mvn	r0, #-2147483648	; 0x80000000
   23b70:	bl	2632c <__assert_fail@plt+0x15200>
   23b74:	cmp	r0, r4
   23b78:	movge	r0, #0
   23b7c:	movlt	r0, #1
   23b80:	cmp	r0, #0
   23b84:	mvnne	r2, #-2147483648	; 0x80000000
   23b88:	bne	23a80 <__assert_fail@plt+0x12954>
   23b8c:	mul	r1, r7, r4
   23b90:	cmp	r1, #63	; 0x3f
   23b94:	bgt	23aac <__assert_fail@plt+0x12980>
   23b98:	b	23a7c <__assert_fail@plt+0x12950>
   23b9c:	rsb	r3, r4, #-2147483648	; 0x80000000
   23ba0:	cmp	r6, r3
   23ba4:	movge	r3, #0
   23ba8:	movlt	r3, #1
   23bac:	b	23a48 <__assert_fail@plt+0x1291c>
   23bb0:	rsb	r3, r5, #-2147483648	; 0x80000000
   23bb4:	cmp	r6, r3
   23bb8:	movge	r3, #0
   23bbc:	movlt	r3, #1
   23bc0:	b	23ae4 <__assert_fail@plt+0x129b8>
   23bc4:	cmp	r5, #0
   23bc8:	blt	23c50 <__assert_fail@plt+0x12b24>
   23bcc:	cmn	r7, #1
   23bd0:	beq	23b3c <__assert_fail@plt+0x12a10>
   23bd4:	mov	r1, r7
   23bd8:	mov	r0, #-2147483648	; 0x80000000
   23bdc:	bl	2632c <__assert_fail@plt+0x15200>
   23be0:	cmp	r5, r0
   23be4:	movle	r0, #0
   23be8:	movgt	r0, #1
   23bec:	b	23b34 <__assert_fail@plt+0x12a08>
   23bf0:	cmp	r4, #0
   23bf4:	blt	23c90 <__assert_fail@plt+0x12b64>
   23bf8:	cmn	r7, #1
   23bfc:	beq	23b8c <__assert_fail@plt+0x12a60>
   23c00:	mov	r1, r7
   23c04:	mov	r0, #-2147483648	; 0x80000000
   23c08:	bl	2632c <__assert_fail@plt+0x15200>
   23c0c:	cmp	r0, r4
   23c10:	movge	r0, #0
   23c14:	movlt	r0, #1
   23c18:	b	23b80 <__assert_fail@plt+0x12a54>
   23c1c:	mov	r4, fp
   23c20:	b	23b68 <__assert_fail@plt+0x12a3c>
   23c24:	mov	r4, fp
   23c28:	b	23bf8 <__assert_fail@plt+0x12acc>
   23c2c:	cmn	r4, #1
   23c30:	beq	23b8c <__assert_fail@plt+0x12a60>
   23c34:	mov	r1, r4
   23c38:	mov	r0, #-2147483648	; 0x80000000
   23c3c:	bl	2632c <__assert_fail@plt+0x15200>
   23c40:	cmp	r7, r0
   23c44:	movle	r0, #0
   23c48:	movgt	r0, #1
   23c4c:	b	23b80 <__assert_fail@plt+0x12a54>
   23c50:	mov	r1, r7
   23c54:	mvn	r0, #-2147483648	; 0x80000000
   23c58:	bl	2632c <__assert_fail@plt+0x15200>
   23c5c:	cmp	r5, r0
   23c60:	movge	r0, #0
   23c64:	movlt	r0, #1
   23c68:	b	23b34 <__assert_fail@plt+0x12a08>
   23c6c:	cmn	r5, #1
   23c70:	beq	23b3c <__assert_fail@plt+0x12a10>
   23c74:	mov	r1, r5
   23c78:	mov	r0, #-2147483648	; 0x80000000
   23c7c:	bl	2632c <__assert_fail@plt+0x15200>
   23c80:	cmp	r7, r0
   23c84:	movle	r0, #0
   23c88:	movgt	r0, #1
   23c8c:	b	23b34 <__assert_fail@plt+0x12a08>
   23c90:	mov	r1, r7
   23c94:	mvn	r0, #-2147483648	; 0x80000000
   23c98:	bl	2632c <__assert_fail@plt+0x15200>
   23c9c:	cmp	r0, r4
   23ca0:	movle	r0, #0
   23ca4:	movgt	r0, #1
   23ca8:	b	23b80 <__assert_fail@plt+0x12a54>
   23cac:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23cb0:	push	{r4, lr}
   23cb4:	mov	r1, #1
   23cb8:	bl	23e9c <__assert_fail@plt+0x12d70>
   23cbc:	cmp	r0, #0
   23cc0:	popne	{r4, pc}
   23cc4:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23cc8:	push	{r4, lr}
   23ccc:	mov	r1, #1
   23cd0:	bl	23e9c <__assert_fail@plt+0x12d70>
   23cd4:	cmp	r0, #0
   23cd8:	popne	{r4, pc}
   23cdc:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23ce0:	push	{r4, lr}
   23ce4:	bl	23e9c <__assert_fail@plt+0x12d70>
   23ce8:	cmp	r0, #0
   23cec:	popne	{r4, pc}
   23cf0:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23cf4:	push	{r4, lr}
   23cf8:	bl	23e9c <__assert_fail@plt+0x12d70>
   23cfc:	cmp	r0, #0
   23d00:	popne	{r4, pc}
   23d04:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23d08:	push	{r4, r5, r6, lr}
   23d0c:	mov	r6, r0
   23d10:	mov	r0, r1
   23d14:	mov	r4, r1
   23d18:	bl	23ee4 <__assert_fail@plt+0x12db8>
   23d1c:	subs	r5, r0, #0
   23d20:	beq	23d38 <__assert_fail@plt+0x12c0c>
   23d24:	mov	r2, r4
   23d28:	mov	r1, r6
   23d2c:	bl	10ed4 <memcpy@plt>
   23d30:	mov	r0, r5
   23d34:	pop	{r4, r5, r6, pc}
   23d38:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23d3c:	push	{r4, r5, r6, lr}
   23d40:	mov	r6, r0
   23d44:	mov	r0, r1
   23d48:	mov	r4, r1
   23d4c:	bl	23ee4 <__assert_fail@plt+0x12db8>
   23d50:	subs	r5, r0, #0
   23d54:	beq	23d6c <__assert_fail@plt+0x12c40>
   23d58:	mov	r2, r4
   23d5c:	mov	r1, r6
   23d60:	bl	10ed4 <memcpy@plt>
   23d64:	mov	r0, r5
   23d68:	pop	{r4, r5, r6, pc}
   23d6c:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23d70:	push	{r4, r5, r6, lr}
   23d74:	mov	r6, r0
   23d78:	add	r0, r1, #1
   23d7c:	mov	r4, r1
   23d80:	bl	23ee4 <__assert_fail@plt+0x12db8>
   23d84:	subs	r5, r0, #0
   23d88:	beq	23da8 <__assert_fail@plt+0x12c7c>
   23d8c:	mov	r3, #0
   23d90:	mov	r1, r6
   23d94:	strb	r3, [r5, r4]
   23d98:	mov	r2, r4
   23d9c:	bl	10ed4 <memcpy@plt>
   23da0:	mov	r0, r5
   23da4:	pop	{r4, r5, r6, pc}
   23da8:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23dac:	push	{r4, lr}
   23db0:	mov	r4, r0
   23db4:	bl	1100c <strlen@plt>
   23db8:	add	r1, r0, #1
   23dbc:	mov	r0, r4
   23dc0:	pop	{r4, lr}
   23dc4:	b	23d08 <__assert_fail@plt+0x12bdc>
   23dc8:	ldr	r3, [pc, #44]	; 23dfc <__assert_fail@plt+0x12cd0>
   23dcc:	push	{r4, lr}
   23dd0:	mov	r2, #5
   23dd4:	ldr	r1, [pc, #36]	; 23e00 <__assert_fail@plt+0x12cd4>
   23dd8:	mov	r0, #0
   23ddc:	ldr	r4, [r3]
   23de0:	bl	10f04 <dcgettext@plt>
   23de4:	ldr	r2, [pc, #24]	; 23e04 <__assert_fail@plt+0x12cd8>
   23de8:	mov	r1, #0
   23dec:	mov	r3, r0
   23df0:	mov	r0, r4
   23df4:	bl	10f94 <error@plt>
   23df8:	bl	11120 <abort@plt>
   23dfc:	andeq	fp, r3, r8, lsl r1
   23e00:	andeq	sl, r2, ip, asr #21
   23e04:	andeq	r9, r2, r0, asr sp
   23e08:	push	{r4, lr}
   23e0c:	sub	sp, sp, #8
   23e10:	ldr	ip, [sp, #16]
   23e14:	str	ip, [sp]
   23e18:	bl	258d8 <__assert_fail@plt+0x147ac>
   23e1c:	subs	r4, r0, #0
   23e20:	blt	23e30 <__assert_fail@plt+0x12d04>
   23e24:	mov	r0, r4
   23e28:	add	sp, sp, #8
   23e2c:	pop	{r4, pc}
   23e30:	bl	11024 <__errno_location@plt>
   23e34:	ldr	r3, [r0]
   23e38:	cmp	r3, #12
   23e3c:	bne	23e24 <__assert_fail@plt+0x12cf8>
   23e40:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23e44:	push	{r4, lr}
   23e48:	bl	25b44 <__assert_fail@plt+0x14a18>
   23e4c:	subs	r4, r0, #0
   23e50:	beq	23e5c <__assert_fail@plt+0x12d30>
   23e54:	mov	r0, r4
   23e58:	pop	{r4, pc}
   23e5c:	bl	11024 <__errno_location@plt>
   23e60:	ldr	r3, [r0]
   23e64:	cmp	r3, #12
   23e68:	bne	23e54 <__assert_fail@plt+0x12d28>
   23e6c:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23e70:	push	{r4, lr}
   23e74:	bl	25d18 <__assert_fail@plt+0x14bec>
   23e78:	subs	r4, r0, #0
   23e7c:	beq	23e88 <__assert_fail@plt+0x12d5c>
   23e80:	mov	r0, r4
   23e84:	pop	{r4, pc}
   23e88:	bl	11024 <__errno_location@plt>
   23e8c:	ldr	r3, [r0]
   23e90:	cmp	r3, #12
   23e94:	bne	23e80 <__assert_fail@plt+0x12d54>
   23e98:	bl	23dc8 <__assert_fail@plt+0x12c9c>
   23e9c:	cmp	r1, #0
   23ea0:	cmpne	r0, #0
   23ea4:	moveq	r1, #1
   23ea8:	moveq	r0, r1
   23eac:	umull	r2, r3, r0, r1
   23eb0:	adds	r3, r3, #0
   23eb4:	movne	r3, #1
   23eb8:	cmp	r2, #0
   23ebc:	blt	23ecc <__assert_fail@plt+0x12da0>
   23ec0:	cmp	r3, #0
   23ec4:	bne	23ecc <__assert_fail@plt+0x12da0>
   23ec8:	b	10e50 <calloc@plt>
   23ecc:	push	{r4, lr}
   23ed0:	bl	11024 <__errno_location@plt>
   23ed4:	mov	r3, #12
   23ed8:	str	r3, [r0]
   23edc:	mov	r0, #0
   23ee0:	pop	{r4, pc}
   23ee4:	cmp	r0, #0
   23ee8:	moveq	r0, #1
   23eec:	cmp	r0, #0
   23ef0:	blt	23ef8 <__assert_fail@plt+0x12dcc>
   23ef4:	b	10fa0 <malloc@plt>
   23ef8:	push	{r4, lr}
   23efc:	bl	11024 <__errno_location@plt>
   23f00:	mov	r3, #12
   23f04:	str	r3, [r0]
   23f08:	mov	r0, #0
   23f0c:	pop	{r4, pc}
   23f10:	cmp	r0, #0
   23f14:	beq	23f38 <__assert_fail@plt+0x12e0c>
   23f18:	cmp	r1, #0
   23f1c:	push	{lr}		; (str lr, [sp, #-4]!)
   23f20:	sub	sp, sp, #12
   23f24:	beq	23f40 <__assert_fail@plt+0x12e14>
   23f28:	blt	23f58 <__assert_fail@plt+0x12e2c>
   23f2c:	add	sp, sp, #12
   23f30:	pop	{lr}		; (ldr lr, [sp], #4)
   23f34:	b	10f1c <realloc@plt>
   23f38:	mov	r0, r1
   23f3c:	b	23ee4 <__assert_fail@plt+0x12db8>
   23f40:	str	r1, [sp, #4]
   23f44:	bl	17b4c <__assert_fail@plt+0x6a20>
   23f48:	ldr	r3, [sp, #4]
   23f4c:	mov	r0, r3
   23f50:	add	sp, sp, #12
   23f54:	pop	{pc}		; (ldr pc, [sp], #4)
   23f58:	bl	11024 <__errno_location@plt>
   23f5c:	mov	r2, #12
   23f60:	mov	r3, #0
   23f64:	str	r2, [r0]
   23f68:	b	23f4c <__assert_fail@plt+0x12e20>
   23f6c:	cmp	r0, r1
   23f70:	beq	23fc0 <__assert_fail@plt+0x12e94>
   23f74:	sub	r2, r0, #1
   23f78:	sub	r1, r1, #1
   23f7c:	b	23f88 <__assert_fail@plt+0x12e5c>
   23f80:	cmp	r0, r3
   23f84:	bne	23fb8 <__assert_fail@plt+0x12e8c>
   23f88:	ldrb	r0, [r2, #1]!
   23f8c:	sub	r3, r0, #65	; 0x41
   23f90:	cmp	r3, #25
   23f94:	ldrb	r3, [r1, #1]!
   23f98:	addls	r0, r0, #32
   23f9c:	sub	ip, r3, #65	; 0x41
   23fa0:	cmp	ip, #25
   23fa4:	addls	r3, r3, #32
   23fa8:	uxtb	r0, r0
   23fac:	cmp	r0, #0
   23fb0:	uxtb	r3, r3
   23fb4:	bne	23f80 <__assert_fail@plt+0x12e54>
   23fb8:	sub	r0, r0, r3
   23fbc:	bx	lr
   23fc0:	mov	r0, #0
   23fc4:	bx	lr
   23fc8:	push	{r4, r5, r6, lr}
   23fcc:	mov	r4, r0
   23fd0:	bl	10f7c <__fpending@plt>
   23fd4:	ldr	r5, [r4]
   23fd8:	and	r5, r5, #32
   23fdc:	mov	r6, r0
   23fe0:	mov	r0, r4
   23fe4:	bl	24044 <__assert_fail@plt+0x12f18>
   23fe8:	cmp	r5, #0
   23fec:	mov	r4, r0
   23ff0:	bne	24010 <__assert_fail@plt+0x12ee4>
   23ff4:	cmp	r0, #0
   23ff8:	beq	24008 <__assert_fail@plt+0x12edc>
   23ffc:	cmp	r6, #0
   24000:	beq	2402c <__assert_fail@plt+0x12f00>
   24004:	mvn	r4, #0
   24008:	mov	r0, r4
   2400c:	pop	{r4, r5, r6, pc}
   24010:	cmp	r0, #0
   24014:	bne	24004 <__assert_fail@plt+0x12ed8>
   24018:	bl	11024 <__errno_location@plt>
   2401c:	str	r4, [r0]
   24020:	mvn	r4, #0
   24024:	mov	r0, r4
   24028:	pop	{r4, r5, r6, pc}
   2402c:	bl	11024 <__errno_location@plt>
   24030:	ldr	r4, [r0]
   24034:	subs	r4, r4, #9
   24038:	mvnne	r4, #0
   2403c:	mov	r0, r4
   24040:	pop	{r4, r5, r6, pc}
   24044:	push	{r4, r5, lr}
   24048:	sub	sp, sp, #12
   2404c:	mov	r4, r0
   24050:	bl	11078 <fileno@plt>
   24054:	cmp	r0, #0
   24058:	mov	r0, r4
   2405c:	blt	240d8 <__assert_fail@plt+0x12fac>
   24060:	bl	10fc4 <__freading@plt>
   24064:	cmp	r0, #0
   24068:	bne	240a4 <__assert_fail@plt+0x12f78>
   2406c:	mov	r0, r4
   24070:	bl	240e4 <__assert_fail@plt+0x12fb8>
   24074:	cmp	r0, #0
   24078:	beq	240d4 <__assert_fail@plt+0x12fa8>
   2407c:	bl	11024 <__errno_location@plt>
   24080:	mov	r5, r0
   24084:	mov	r0, r4
   24088:	ldr	r4, [r5]
   2408c:	bl	1109c <fclose@plt>
   24090:	cmp	r4, #0
   24094:	mvnne	r0, #0
   24098:	strne	r4, [r5]
   2409c:	add	sp, sp, #12
   240a0:	pop	{r4, r5, pc}
   240a4:	mov	r0, r4
   240a8:	bl	11078 <fileno@plt>
   240ac:	mov	r3, #1
   240b0:	str	r3, [sp]
   240b4:	mov	r2, #0
   240b8:	mov	r3, #0
   240bc:	bl	10f64 <lseek64@plt>
   240c0:	mvn	r3, #0
   240c4:	mvn	r2, #0
   240c8:	cmp	r1, r3
   240cc:	cmpeq	r0, r2
   240d0:	bne	2406c <__assert_fail@plt+0x12f40>
   240d4:	mov	r0, r4
   240d8:	add	sp, sp, #12
   240dc:	pop	{r4, r5, lr}
   240e0:	b	1109c <fclose@plt>
   240e4:	push	{r4, lr}
   240e8:	subs	r4, r0, #0
   240ec:	sub	sp, sp, #8
   240f0:	beq	2410c <__assert_fail@plt+0x12fe0>
   240f4:	bl	10fc4 <__freading@plt>
   240f8:	cmp	r0, #0
   240fc:	beq	2410c <__assert_fail@plt+0x12fe0>
   24100:	ldr	r3, [r4]
   24104:	tst	r3, #256	; 0x100
   24108:	bne	2411c <__assert_fail@plt+0x12ff0>
   2410c:	mov	r0, r4
   24110:	add	sp, sp, #8
   24114:	pop	{r4, lr}
   24118:	b	10e98 <fflush@plt>
   2411c:	mov	r3, #1
   24120:	str	r3, [sp]
   24124:	mov	r2, #0
   24128:	mov	r3, #0
   2412c:	mov	r0, r4
   24130:	bl	24144 <__assert_fail@plt+0x13018>
   24134:	mov	r0, r4
   24138:	add	sp, sp, #8
   2413c:	pop	{r4, lr}
   24140:	b	10e98 <fflush@plt>
   24144:	push	{r4, r5, r6, r7, r8, lr}
   24148:	sub	sp, sp, #8
   2414c:	ldmib	r0, {ip, lr}
   24150:	mov	r4, r0
   24154:	ldr	r5, [sp, #32]
   24158:	cmp	lr, ip
   2415c:	beq	24174 <__assert_fail@plt+0x13048>
   24160:	str	r5, [sp, #32]
   24164:	mov	r0, r4
   24168:	add	sp, sp, #8
   2416c:	pop	{r4, r5, r6, r7, r8, lr}
   24170:	b	110b4 <fseeko64@plt>
   24174:	ldr	lr, [r0, #20]
   24178:	ldr	ip, [r0, #16]
   2417c:	cmp	lr, ip
   24180:	bne	24160 <__assert_fail@plt+0x13034>
   24184:	ldr	r8, [r0, #36]	; 0x24
   24188:	cmp	r8, #0
   2418c:	bne	24160 <__assert_fail@plt+0x13034>
   24190:	mov	r6, r2
   24194:	mov	r7, r3
   24198:	bl	11078 <fileno@plt>
   2419c:	mov	r2, r6
   241a0:	mov	r3, r7
   241a4:	str	r5, [sp]
   241a8:	bl	10f64 <lseek64@plt>
   241ac:	mvn	r3, #0
   241b0:	mvn	r2, #0
   241b4:	cmp	r1, r3
   241b8:	cmpeq	r0, r2
   241bc:	beq	241dc <__assert_fail@plt+0x130b0>
   241c0:	ldr	r3, [r4]
   241c4:	strd	r0, [r4, #80]	; 0x50
   241c8:	mov	r0, r8
   241cc:	bic	r3, r3, #16
   241d0:	str	r3, [r4]
   241d4:	add	sp, sp, #8
   241d8:	pop	{r4, r5, r6, r7, r8, pc}
   241dc:	mvn	r0, #0
   241e0:	b	241d4 <__assert_fail@plt+0x130a8>
   241e4:	push	{r4, lr}
   241e8:	mov	r0, #14
   241ec:	bl	110f0 <nl_langinfo@plt>
   241f0:	cmp	r0, #0
   241f4:	beq	2420c <__assert_fail@plt+0x130e0>
   241f8:	ldrb	r2, [r0]
   241fc:	ldr	r3, [pc, #16]	; 24214 <__assert_fail@plt+0x130e8>
   24200:	cmp	r2, #0
   24204:	moveq	r0, r3
   24208:	pop	{r4, pc}
   2420c:	ldr	r0, [pc]	; 24214 <__assert_fail@plt+0x130e8>
   24210:	pop	{r4, pc}
   24214:	andeq	sl, r2, r0, ror #21
   24218:	push	{r4, lr}
   2421c:	mov	r4, r0
   24220:	bl	10ea4 <wcwidth@plt>
   24224:	cmp	r0, #0
   24228:	popge	{r4, pc}
   2422c:	mov	r0, r4
   24230:	bl	10f34 <iswcntrl@plt>
   24234:	clz	r0, r0
   24238:	lsr	r0, r0, #5
   2423c:	pop	{r4, pc}
   24240:	mov	r3, r1
   24244:	push	{r4, r5, r6, lr}
   24248:	mov	r4, r1
   2424c:	ldr	r1, [r3], #16
   24250:	mov	r5, r0
   24254:	cmp	r1, r3
   24258:	strne	r1, [r0]
   2425c:	beq	24280 <__assert_fail@plt+0x13154>
   24260:	ldrb	r3, [r4, #8]
   24264:	ldr	r2, [r4, #4]
   24268:	cmp	r3, #0
   2426c:	strb	r3, [r5, #8]
   24270:	ldrne	r3, [r4, #12]
   24274:	str	r2, [r5, #4]
   24278:	strne	r3, [r5, #12]
   2427c:	pop	{r4, r5, r6, pc}
   24280:	add	r3, r0, #16
   24284:	mov	r0, r3
   24288:	ldr	r2, [r4, #4]
   2428c:	bl	10ed4 <memcpy@plt>
   24290:	str	r0, [r5]
   24294:	b	24260 <__assert_fail@plt+0x13134>
   24298:	ldr	r3, [pc, #20]	; 242b4 <__assert_fail@plt+0x13188>
   2429c:	lsr	r2, r0, #5
   242a0:	and	r0, r0, #31
   242a4:	ldr	r3, [r3, r2, lsl #2]
   242a8:	lsr	r0, r3, r0
   242ac:	and	r0, r0, #1
   242b0:	bx	lr
   242b4:	andeq	sl, r2, r8, ror #21
   242b8:	push	{r4, r5, r6, r7, lr}
   242bc:	subs	r6, r0, #0
   242c0:	sub	sp, sp, #12
   242c4:	addeq	r6, sp, #4
   242c8:	mov	r0, r6
   242cc:	mov	r5, r2
   242d0:	mov	r7, r1
   242d4:	bl	10f88 <mbrtowc@plt>
   242d8:	cmp	r5, #0
   242dc:	cmnne	r0, #3
   242e0:	mov	r4, r0
   242e4:	bls	24300 <__assert_fail@plt+0x131d4>
   242e8:	mov	r0, #0
   242ec:	bl	25de4 <__assert_fail@plt+0x14cb8>
   242f0:	cmp	r0, #0
   242f4:	moveq	r4, #1
   242f8:	ldrbeq	r3, [r7]
   242fc:	streq	r3, [r6]
   24300:	mov	r0, r4
   24304:	add	sp, sp, #12
   24308:	pop	{r4, r5, r6, r7, pc}
   2430c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24310:	mov	r6, r2
   24314:	lsrs	r2, r6, #30
   24318:	movne	ip, #1
   2431c:	moveq	ip, #0
   24320:	lsls	r2, r6, #2
   24324:	add	fp, sp, #28
   24328:	bmi	24334 <__assert_fail@plt+0x13208>
   2432c:	cmp	ip, #0
   24330:	beq	24340 <__assert_fail@plt+0x13214>
   24334:	mov	r0, #0
   24338:	sub	sp, fp, #28
   2433c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24340:	cmp	r2, #4016	; 0xfb0
   24344:	mov	r5, r0
   24348:	mov	r4, r1
   2434c:	mov	r7, r3
   24350:	bls	24424 <__assert_fail@plt+0x132f8>
   24354:	mov	r0, r2
   24358:	bl	25e40 <__assert_fail@plt+0x14d14>
   2435c:	cmp	r0, #0
   24360:	beq	24334 <__assert_fail@plt+0x13208>
   24364:	cmp	r6, #2
   24368:	mov	r3, #1
   2436c:	str	r3, [r0, #4]
   24370:	movhi	r8, r4
   24374:	addhi	r2, r0, #8
   24378:	movhi	ip, #0
   2437c:	movhi	r3, #2
   24380:	bls	243cc <__assert_fail@plt+0x132a0>
   24384:	ldrb	r1, [r8, #1]!
   24388:	ldrb	lr, [r4, ip]
   2438c:	cmp	lr, r1
   24390:	bne	243ac <__assert_fail@plt+0x13280>
   24394:	b	2443c <__assert_fail@plt+0x13310>
   24398:	ldr	lr, [r0, ip, lsl #2]
   2439c:	sub	ip, ip, lr
   243a0:	ldrb	lr, [r4, ip]
   243a4:	cmp	lr, r1
   243a8:	beq	2443c <__assert_fail@plt+0x13310>
   243ac:	cmp	ip, #0
   243b0:	bne	24398 <__assert_fail@plt+0x1326c>
   243b4:	mov	ip, #0
   243b8:	str	r3, [r2]
   243bc:	add	r3, r3, #1
   243c0:	cmp	r6, r3
   243c4:	add	r2, r2, #4
   243c8:	bne	24384 <__assert_fail@plt+0x13258>
   243cc:	mov	r2, #0
   243d0:	str	r2, [r7]
   243d4:	ldrb	r3, [r5]
   243d8:	mov	ip, r5
   243dc:	cmp	r3, #0
   243e0:	beq	24414 <__assert_fail@plt+0x132e8>
   243e4:	ldrb	r1, [r4, r2]
   243e8:	cmp	r1, r3
   243ec:	beq	2444c <__assert_fail@plt+0x13320>
   243f0:	cmp	r2, #0
   243f4:	addeq	r5, r5, #1
   243f8:	ldrbeq	r3, [ip, #1]
   243fc:	ldrne	r1, [r0, r2, lsl #2]
   24400:	addeq	ip, ip, #1
   24404:	addne	r5, r5, r1
   24408:	subne	r2, r2, r1
   2440c:	cmp	r3, #0
   24410:	bne	243e4 <__assert_fail@plt+0x132b8>
   24414:	bl	25e90 <__assert_fail@plt+0x14d64>
   24418:	mov	r0, #1
   2441c:	sub	sp, fp, #28
   24420:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24424:	add	r3, r2, #29
   24428:	bic	r3, r3, #7
   2442c:	sub	sp, sp, r3
   24430:	add	r0, sp, #15
   24434:	bic	r0, r0, #15
   24438:	b	2435c <__assert_fail@plt+0x13230>
   2443c:	add	ip, ip, #1
   24440:	sub	r1, r3, ip
   24444:	str	r1, [r2]
   24448:	b	243bc <__assert_fail@plt+0x13290>
   2444c:	add	r2, r2, #1
   24450:	cmp	r6, r2
   24454:	add	r1, ip, #1
   24458:	ldrbne	r3, [ip, #1]
   2445c:	movne	ip, r1
   24460:	bne	243dc <__assert_fail@plt+0x132b0>
   24464:	str	r5, [r7]
   24468:	bl	25e90 <__assert_fail@plt+0x14d64>
   2446c:	mov	r0, #1
   24470:	b	2441c <__assert_fail@plt+0x132f0>
   24474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24478:	add	fp, sp, #32
   2447c:	sub	sp, sp, #188	; 0xbc
   24480:	str	r0, [fp, #-212]	; 0xffffff2c
   24484:	mov	r0, r1
   24488:	mov	r4, r1
   2448c:	str	r2, [fp, #-220]	; 0xffffff24
   24490:	bl	25eb4 <__assert_fail@plt+0x14d88>
   24494:	mov	r3, #44	; 0x2c
   24498:	str	r0, [fp, #-208]	; 0xffffff30
   2449c:	umull	r0, r1, r0, r3
   244a0:	adds	r2, r1, #0
   244a4:	movne	r2, #1
   244a8:	cmp	r0, #0
   244ac:	blt	244b8 <__assert_fail@plt+0x1338c>
   244b0:	cmp	r2, #0
   244b4:	beq	244c4 <__assert_fail@plt+0x13398>
   244b8:	mov	r0, #0
   244bc:	sub	sp, fp, #32
   244c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244c4:	ldr	r2, [fp, #-208]	; 0xffffff30
   244c8:	mul	r0, r3, r2
   244cc:	cmp	r0, #4016	; 0xfb0
   244d0:	bls	2472c <__assert_fail@plt+0x13600>
   244d4:	bl	25e40 <__assert_fail@plt+0x14d14>
   244d8:	str	r0, [fp, #-216]	; 0xffffff28
   244dc:	ldr	r3, [fp, #-216]	; 0xffffff28
   244e0:	cmp	r3, #0
   244e4:	beq	244b8 <__assert_fail@plt+0x1338c>
   244e8:	ldr	r2, [fp, #-208]	; 0xffffff30
   244ec:	add	r6, r3, #16
   244f0:	mov	r7, #1
   244f4:	add	sl, r2, r2, lsl #2
   244f8:	mov	r8, #0
   244fc:	add	sl, r3, sl, lsl #3
   24500:	str	r4, [fp, #-188]	; 0xffffff44
   24504:	str	r8, [fp, #-196]	; 0xffffff3c
   24508:	strb	r8, [fp, #-204]	; 0xffffff34
   2450c:	str	r8, [fp, #-200]	; 0xffffff38
   24510:	strb	r8, [fp, #-192]	; 0xffffff40
   24514:	ldrb	r3, [fp, #-204]	; 0xffffff34
   24518:	ldr	r4, [fp, #-188]	; 0xffffff44
   2451c:	cmp	r3, #0
   24520:	bne	24948 <__assert_fail@plt+0x1381c>
   24524:	ldrb	r3, [r4]
   24528:	ldr	r1, [pc, #1840]	; 24c60 <__assert_fail@plt+0x13b34>
   2452c:	and	r2, r3, #31
   24530:	lsr	r3, r3, #5
   24534:	ldr	r3, [r1, r3, lsl #2]
   24538:	lsr	r3, r3, r2
   2453c:	tst	r3, #1
   24540:	beq	24934 <__assert_fail@plt+0x13808>
   24544:	str	r7, [fp, #-184]	; 0xffffff48
   24548:	ldrb	r4, [r4]
   2454c:	strb	r7, [fp, #-180]	; 0xffffff4c
   24550:	strb	r7, [fp, #-192]	; 0xffffff40
   24554:	cmp	r4, #0
   24558:	str	r4, [fp, #-176]	; 0xffffff50
   2455c:	bne	249b4 <__assert_fail@plt+0x13888>
   24560:	ldr	r3, [fp, #-208]	; 0xffffff30
   24564:	str	r7, [sl, #4]
   24568:	cmp	r3, #2
   2456c:	bls	2460c <__assert_fail@plt+0x134e0>
   24570:	ldr	r9, [fp, #-216]	; 0xffffff28
   24574:	add	r7, sl, #8
   24578:	mov	r5, r9
   2457c:	mov	r6, #2
   24580:	ldrb	r8, [r5, #48]	; 0x30
   24584:	b	245b4 <__assert_fail@plt+0x13488>
   24588:	ldrb	r2, [r3, #8]
   2458c:	cmp	r2, #0
   24590:	beq	245c4 <__assert_fail@plt+0x13498>
   24594:	ldr	r3, [r3, #12]
   24598:	ldr	r2, [r5, #52]	; 0x34
   2459c:	cmp	r2, r3
   245a0:	beq	245e8 <__assert_fail@plt+0x134bc>
   245a4:	cmp	r4, #0
   245a8:	beq	24ac0 <__assert_fail@plt+0x13994>
   245ac:	ldr	r3, [sl, r4, lsl #2]
   245b0:	sub	r4, r4, r3
   245b4:	add	r3, r4, r4, lsl #2
   245b8:	cmp	r8, #0
   245bc:	add	r3, r9, r3, lsl #3
   245c0:	bne	24588 <__assert_fail@plt+0x1345c>
   245c4:	ldr	r2, [r5, #44]	; 0x2c
   245c8:	ldr	r1, [r3, #4]
   245cc:	cmp	r2, r1
   245d0:	bne	245a4 <__assert_fail@plt+0x13478>
   245d4:	ldr	r1, [r3]
   245d8:	ldr	r0, [r5, #40]	; 0x28
   245dc:	bl	10eec <memcmp@plt>
   245e0:	cmp	r0, #0
   245e4:	bne	245a4 <__assert_fail@plt+0x13478>
   245e8:	add	r4, r4, #1
   245ec:	sub	r2, r6, r4
   245f0:	str	r2, [r7]
   245f4:	ldr	r3, [fp, #-208]	; 0xffffff30
   245f8:	add	r6, r6, #1
   245fc:	cmp	r3, r6
   24600:	add	r5, r5, #40	; 0x28
   24604:	add	r7, r7, #4
   24608:	bne	24580 <__assert_fail@plt+0x13454>
   2460c:	ldr	r1, [fp, #-212]	; 0xffffff2c
   24610:	mov	r2, #0
   24614:	str	r1, [fp, #-132]	; 0xffffff7c
   24618:	str	r1, [fp, #-76]	; 0xffffffb4
   2461c:	ldr	r1, [fp, #-220]	; 0xffffff24
   24620:	mov	r3, r2
   24624:	cmp	r3, #0
   24628:	str	sl, [fp, #-212]	; 0xffffff2c
   2462c:	str	r2, [r1]
   24630:	strb	r2, [fp, #-148]	; 0xffffff6c
   24634:	str	r2, [fp, #-144]	; 0xffffff70
   24638:	strb	r2, [fp, #-136]	; 0xffffff78
   2463c:	strb	r2, [fp, #-92]	; 0xffffffa4
   24640:	str	r2, [fp, #-88]	; 0xffffffa8
   24644:	strb	r2, [fp, #-80]	; 0xffffffb0
   24648:	mov	r8, r2
   2464c:	mov	r7, r2
   24650:	str	r2, [fp, #-140]	; 0xffffff74
   24654:	str	r2, [fp, #-84]	; 0xffffffac
   24658:	mov	r6, #1
   2465c:	ldr	r9, [pc, #1532]	; 24c60 <__assert_fail@plt+0x13b34>
   24660:	ldr	sl, [fp, #-216]	; 0xffffff28
   24664:	bne	24874 <__assert_fail@plt+0x13748>
   24668:	ldr	r5, [fp, #-76]	; 0xffffffb4
   2466c:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   24670:	cmp	r3, #0
   24674:	bne	246a8 <__assert_fail@plt+0x1357c>
   24678:	ldrb	r3, [r5]
   2467c:	and	r2, r3, #31
   24680:	lsr	r3, r3, #5
   24684:	ldr	r3, [r9, r3, lsl #2]
   24688:	lsr	r3, r3, r2
   2468c:	tst	r3, #1
   24690:	bne	249f8 <__assert_fail@plt+0x138cc>
   24694:	sub	r0, fp, #88	; 0x58
   24698:	bl	10ee0 <mbsinit@plt>
   2469c:	cmp	r0, #0
   246a0:	beq	24c38 <__assert_fail@plt+0x13b0c>
   246a4:	strb	r6, [fp, #-92]	; 0xffffffa4
   246a8:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   246ac:	mov	r1, r0
   246b0:	mov	r0, r5
   246b4:	bl	22e5c <__assert_fail@plt+0x11d30>
   246b8:	sub	r3, fp, #88	; 0x58
   246bc:	mov	r1, r5
   246c0:	mov	r2, r0
   246c4:	sub	r0, fp, #64	; 0x40
   246c8:	bl	242b8 <__assert_fail@plt+0x1318c>
   246cc:	cmn	r0, #1
   246d0:	str	r0, [fp, #-72]	; 0xffffffb8
   246d4:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   246d8:	streq	r6, [fp, #-72]	; 0xffffffb8
   246dc:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   246e0:	beq	2475c <__assert_fail@plt+0x13630>
   246e4:	cmn	r0, #2
   246e8:	beq	24748 <__assert_fail@plt+0x1361c>
   246ec:	cmp	r0, #0
   246f0:	beq	24bcc <__assert_fail@plt+0x13aa0>
   246f4:	ldr	r4, [fp, #-64]	; 0xffffffc0
   246f8:	sub	r0, fp, #88	; 0x58
   246fc:	strb	r6, [fp, #-68]	; 0xffffffbc
   24700:	bl	10ee0 <mbsinit@plt>
   24704:	strb	r6, [fp, #-80]	; 0xffffffb0
   24708:	cmp	r0, #0
   2470c:	strbne	r7, [fp, #-92]	; 0xffffffa4
   24710:	cmp	r4, #0
   24714:	bne	2488c <__assert_fail@plt+0x13760>
   24718:	ldr	r0, [fp, #-216]	; 0xffffff28
   2471c:	bl	25e90 <__assert_fail@plt+0x14d64>
   24720:	mov	r0, #1
   24724:	sub	sp, fp, #32
   24728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2472c:	add	r3, r0, #29
   24730:	bic	r3, r3, #7
   24734:	sub	sp, sp, r3
   24738:	add	r3, sp, #15
   2473c:	bic	r3, r3, #15
   24740:	str	r3, [fp, #-216]	; 0xffffff28
   24744:	b	244dc <__assert_fail@plt+0x133b0>
   24748:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2474c:	bl	1100c <strlen@plt>
   24750:	strb	r7, [fp, #-68]	; 0xffffffbc
   24754:	strb	r6, [fp, #-80]	; 0xffffffb0
   24758:	str	r0, [fp, #-72]	; 0xffffffb8
   2475c:	add	r3, r8, r8, lsl #2
   24760:	add	r3, sl, r3, lsl #3
   24764:	ldr	r2, [r3, #4]
   24768:	ldr	r4, [fp, #-72]	; 0xffffffb8
   2476c:	cmp	r2, r4
   24770:	beq	24a78 <__assert_fail@plt+0x1394c>
   24774:	cmp	r8, #0
   24778:	beq	24a30 <__assert_fail@plt+0x13904>
   2477c:	ldr	r3, [fp, #-212]	; 0xffffff2c
   24780:	ldr	r5, [r3, r8, lsl #2]
   24784:	cmp	r5, #0
   24788:	sub	r8, r8, r5
   2478c:	beq	24868 <__assert_fail@plt+0x1373c>
   24790:	ldrb	r3, [fp, #-136]	; 0xffffff78
   24794:	cmp	r3, #0
   24798:	bne	248b8 <__assert_fail@plt+0x1378c>
   2479c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   247a0:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   247a4:	cmp	r3, #0
   247a8:	bne	247dc <__assert_fail@plt+0x136b0>
   247ac:	ldrb	r3, [r4]
   247b0:	and	r2, r3, #31
   247b4:	lsr	r3, r3, #5
   247b8:	ldr	r3, [r9, r3, lsl #2]
   247bc:	lsr	r3, r3, r2
   247c0:	tst	r3, #1
   247c4:	bne	248cc <__assert_fail@plt+0x137a0>
   247c8:	sub	r0, fp, #144	; 0x90
   247cc:	bl	10ee0 <mbsinit@plt>
   247d0:	cmp	r0, #0
   247d4:	beq	24c38 <__assert_fail@plt+0x13b0c>
   247d8:	strb	r6, [fp, #-148]	; 0xffffff6c
   247dc:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   247e0:	mov	r1, r0
   247e4:	mov	r0, r4
   247e8:	bl	22e5c <__assert_fail@plt+0x11d30>
   247ec:	sub	r3, fp, #144	; 0x90
   247f0:	mov	r1, r4
   247f4:	mov	r2, r0
   247f8:	sub	r0, fp, #120	; 0x78
   247fc:	bl	242b8 <__assert_fail@plt+0x1318c>
   24800:	cmn	r0, #1
   24804:	str	r0, [fp, #-128]	; 0xffffff80
   24808:	beq	24844 <__assert_fail@plt+0x13718>
   2480c:	cmn	r0, #2
   24810:	beq	248e8 <__assert_fail@plt+0x137bc>
   24814:	cmp	r0, #0
   24818:	beq	24900 <__assert_fail@plt+0x137d4>
   2481c:	ldr	r4, [fp, #-120]	; 0xffffff88
   24820:	sub	r0, fp, #144	; 0x90
   24824:	strb	r6, [fp, #-124]	; 0xffffff84
   24828:	bl	10ee0 <mbsinit@plt>
   2482c:	strb	r6, [fp, #-136]	; 0xffffff78
   24830:	cmp	r0, #0
   24834:	strbne	r7, [fp, #-148]	; 0xffffff6c
   24838:	cmp	r4, #0
   2483c:	bne	2484c <__assert_fail@plt+0x13720>
   24840:	bl	11120 <abort@plt>
   24844:	str	r6, [fp, #-128]	; 0xffffff80
   24848:	strb	r7, [fp, #-124]	; 0xffffff84
   2484c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24850:	ldr	r3, [fp, #-128]	; 0xffffff80
   24854:	subs	r5, r5, #1
   24858:	add	r4, r4, r3
   2485c:	strb	r7, [fp, #-136]	; 0xffffff78
   24860:	str	r4, [fp, #-132]	; 0xffffff7c
   24864:	bne	247a0 <__assert_fail@plt+0x13674>
   24868:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   2486c:	cmp	r3, #0
   24870:	beq	24668 <__assert_fail@plt+0x1353c>
   24874:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   24878:	cmp	r3, #0
   2487c:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   24880:	beq	2475c <__assert_fail@plt+0x13630>
   24884:	cmp	r4, #0
   24888:	beq	24718 <__assert_fail@plt+0x135ec>
   2488c:	add	r3, r8, r8, lsl #2
   24890:	add	r3, sl, r3, lsl #3
   24894:	ldrb	r2, [r3, #8]
   24898:	cmp	r2, #0
   2489c:	beq	24764 <__assert_fail@plt+0x13638>
   248a0:	ldr	r3, [r3, #12]
   248a4:	cmp	r4, r3
   248a8:	bne	24774 <__assert_fail@plt+0x13648>
   248ac:	ldr	r4, [fp, #-72]	; 0xffffffb8
   248b0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   248b4:	b	24a94 <__assert_fail@plt+0x13968>
   248b8:	ldrb	r3, [fp, #-124]	; 0xffffff84
   248bc:	cmp	r3, #0
   248c0:	ldrne	r4, [fp, #-120]	; 0xffffff88
   248c4:	beq	2484c <__assert_fail@plt+0x13720>
   248c8:	b	24838 <__assert_fail@plt+0x1370c>
   248cc:	str	r6, [fp, #-128]	; 0xffffff80
   248d0:	ldrb	r3, [r4]
   248d4:	strb	r6, [fp, #-124]	; 0xffffff84
   248d8:	strb	r6, [fp, #-136]	; 0xffffff78
   248dc:	str	r3, [fp, #-120]	; 0xffffff88
   248e0:	mov	r4, r3
   248e4:	b	24838 <__assert_fail@plt+0x1370c>
   248e8:	ldr	r4, [fp, #-132]	; 0xffffff7c
   248ec:	mov	r0, r4
   248f0:	bl	1100c <strlen@plt>
   248f4:	strb	r7, [fp, #-124]	; 0xffffff84
   248f8:	str	r0, [fp, #-128]	; 0xffffff80
   248fc:	b	24850 <__assert_fail@plt+0x13724>
   24900:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24904:	str	r6, [fp, #-128]	; 0xffffff80
   24908:	ldrb	r3, [r4]
   2490c:	cmp	r3, #0
   24910:	bne	24c4c <__assert_fail@plt+0x13b20>
   24914:	ldr	r4, [fp, #-120]	; 0xffffff88
   24918:	cmp	r4, #0
   2491c:	beq	24820 <__assert_fail@plt+0x136f4>
   24920:	ldr	r3, [pc, #828]	; 24c64 <__assert_fail@plt+0x13b38>
   24924:	mov	r2, #172	; 0xac
   24928:	ldr	r1, [pc, #824]	; 24c68 <__assert_fail@plt+0x13b3c>
   2492c:	ldr	r0, [pc, #824]	; 24c6c <__assert_fail@plt+0x13b40>
   24930:	bl	1112c <__assert_fail@plt>
   24934:	sub	r0, fp, #200	; 0xc8
   24938:	bl	10ee0 <mbsinit@plt>
   2493c:	cmp	r0, #0
   24940:	beq	24c38 <__assert_fail@plt+0x13b0c>
   24944:	strb	r7, [fp, #-204]	; 0xffffff34
   24948:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   2494c:	mov	r1, r0
   24950:	mov	r0, r4
   24954:	bl	22e5c <__assert_fail@plt+0x11d30>
   24958:	sub	r3, fp, #200	; 0xc8
   2495c:	mov	r1, r4
   24960:	mov	r2, r0
   24964:	sub	r0, fp, #176	; 0xb0
   24968:	bl	242b8 <__assert_fail@plt+0x1318c>
   2496c:	cmn	r0, #1
   24970:	str	r0, [fp, #-184]	; 0xffffff48
   24974:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   24978:	streq	r7, [fp, #-184]	; 0xffffff48
   2497c:	beq	24a24 <__assert_fail@plt+0x138f8>
   24980:	cmn	r0, #2
   24984:	beq	24a14 <__assert_fail@plt+0x138e8>
   24988:	cmp	r0, #0
   2498c:	beq	24ac8 <__assert_fail@plt+0x1399c>
   24990:	ldr	r4, [fp, #-176]	; 0xffffff50
   24994:	sub	r0, fp, #200	; 0xc8
   24998:	strb	r7, [fp, #-180]	; 0xffffff4c
   2499c:	bl	10ee0 <mbsinit@plt>
   249a0:	strb	r7, [fp, #-192]	; 0xffffff40
   249a4:	cmp	r0, #0
   249a8:	strbne	r8, [fp, #-204]	; 0xffffff34
   249ac:	cmp	r4, #0
   249b0:	beq	24560 <__assert_fail@plt+0x13434>
   249b4:	mov	r9, r7
   249b8:	ldr	r4, [fp, #-188]	; 0xffffff44
   249bc:	sub	r3, fp, #172	; 0xac
   249c0:	cmp	r4, r3
   249c4:	strne	r4, [r6, #-16]
   249c8:	ldrne	r5, [fp, #-184]	; 0xffffff48
   249cc:	beq	24b94 <__assert_fail@plt+0x13a68>
   249d0:	cmp	r9, #0
   249d4:	add	r4, r4, r5
   249d8:	ldrne	r3, [fp, #-176]	; 0xffffff50
   249dc:	str	r5, [r6, #-12]
   249e0:	strb	r9, [r6, #-8]
   249e4:	strne	r3, [r6, #-4]
   249e8:	str	r4, [fp, #-188]	; 0xffffff44
   249ec:	add	r6, r6, #40	; 0x28
   249f0:	strb	r8, [fp, #-192]	; 0xffffff40
   249f4:	b	24514 <__assert_fail@plt+0x133e8>
   249f8:	str	r6, [fp, #-72]	; 0xffffffb8
   249fc:	ldrb	r3, [r5]
   24a00:	strb	r6, [fp, #-68]	; 0xffffffbc
   24a04:	strb	r6, [fp, #-80]	; 0xffffffb0
   24a08:	str	r3, [fp, #-64]	; 0xffffffc0
   24a0c:	mov	r4, r3
   24a10:	b	24710 <__assert_fail@plt+0x135e4>
   24a14:	ldr	r0, [fp, #-188]	; 0xffffff44
   24a18:	bl	1100c <strlen@plt>
   24a1c:	strb	r8, [fp, #-180]	; 0xffffff4c
   24a20:	str	r0, [fp, #-184]	; 0xffffff48
   24a24:	strb	r7, [fp, #-192]	; 0xffffff40
   24a28:	mov	r9, r8
   24a2c:	b	249b8 <__assert_fail@plt+0x1388c>
   24a30:	ldrb	r3, [fp, #-136]	; 0xffffff78
   24a34:	cmp	r3, #0
   24a38:	beq	24aec <__assert_fail@plt+0x139c0>
   24a3c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   24a40:	cmp	r3, #0
   24a44:	ldrne	r4, [fp, #-120]	; 0xffffff88
   24a48:	bne	24b88 <__assert_fail@plt+0x13a5c>
   24a4c:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24a50:	ldr	r3, [fp, #-128]	; 0xffffff80
   24a54:	ldr	r5, [fp, #-76]	; 0xffffffb4
   24a58:	add	r4, r4, r3
   24a5c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   24a60:	strb	r7, [fp, #-136]	; 0xffffff78
   24a64:	add	r5, r5, r3
   24a68:	strb	r7, [fp, #-80]	; 0xffffffb0
   24a6c:	str	r4, [fp, #-132]	; 0xffffff7c
   24a70:	str	r5, [fp, #-76]	; 0xffffffb4
   24a74:	b	2466c <__assert_fail@plt+0x13540>
   24a78:	ldr	r5, [fp, #-76]	; 0xffffffb4
   24a7c:	ldr	r0, [r3]
   24a80:	mov	r1, r5
   24a84:	mov	r2, r4
   24a88:	bl	10eec <memcmp@plt>
   24a8c:	cmp	r0, #0
   24a90:	bne	24774 <__assert_fail@plt+0x13648>
   24a94:	ldr	r3, [fp, #-208]	; 0xffffff30
   24a98:	add	r8, r8, #1
   24a9c:	add	r5, r5, r4
   24aa0:	cmp	r3, r8
   24aa4:	str	r5, [fp, #-76]	; 0xffffffb4
   24aa8:	strb	r7, [fp, #-80]	; 0xffffffb0
   24aac:	bne	2466c <__assert_fail@plt+0x13540>
   24ab0:	ldr	r2, [fp, #-220]	; 0xffffff24
   24ab4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   24ab8:	str	r3, [r2]
   24abc:	b	24718 <__assert_fail@plt+0x135ec>
   24ac0:	str	r6, [r7]
   24ac4:	b	245f4 <__assert_fail@plt+0x134c8>
   24ac8:	ldr	r3, [fp, #-188]	; 0xffffff44
   24acc:	str	r7, [fp, #-184]	; 0xffffff48
   24ad0:	ldrb	r3, [r3]
   24ad4:	cmp	r3, #0
   24ad8:	bne	24c4c <__assert_fail@plt+0x13b20>
   24adc:	ldr	r4, [fp, #-176]	; 0xffffff50
   24ae0:	cmp	r4, #0
   24ae4:	beq	24994 <__assert_fail@plt+0x13868>
   24ae8:	b	24920 <__assert_fail@plt+0x137f4>
   24aec:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   24af0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24af4:	cmp	r3, #0
   24af8:	bne	24b2c <__assert_fail@plt+0x13a00>
   24afc:	ldrb	r3, [r4]
   24b00:	and	r2, r3, #31
   24b04:	lsr	r3, r3, #5
   24b08:	ldr	r3, [r9, r3, lsl #2]
   24b0c:	lsr	r3, r3, r2
   24b10:	tst	r3, #1
   24b14:	bne	24bb0 <__assert_fail@plt+0x13a84>
   24b18:	sub	r0, fp, #144	; 0x90
   24b1c:	bl	10ee0 <mbsinit@plt>
   24b20:	cmp	r0, #0
   24b24:	beq	24c38 <__assert_fail@plt+0x13b0c>
   24b28:	strb	r6, [fp, #-148]	; 0xffffff6c
   24b2c:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   24b30:	mov	r1, r0
   24b34:	mov	r0, r4
   24b38:	bl	22e5c <__assert_fail@plt+0x11d30>
   24b3c:	sub	r3, fp, #144	; 0x90
   24b40:	mov	r1, r4
   24b44:	mov	r2, r0
   24b48:	sub	r0, fp, #120	; 0x78
   24b4c:	bl	242b8 <__assert_fail@plt+0x1318c>
   24b50:	cmn	r0, #1
   24b54:	str	r0, [fp, #-128]	; 0xffffff80
   24b58:	beq	24bf0 <__assert_fail@plt+0x13ac4>
   24b5c:	cmn	r0, #2
   24b60:	beq	24bfc <__assert_fail@plt+0x13ad0>
   24b64:	cmp	r0, #0
   24b68:	beq	24c14 <__assert_fail@plt+0x13ae8>
   24b6c:	ldr	r4, [fp, #-120]	; 0xffffff88
   24b70:	sub	r0, fp, #144	; 0x90
   24b74:	strb	r6, [fp, #-124]	; 0xffffff84
   24b78:	bl	10ee0 <mbsinit@plt>
   24b7c:	strb	r6, [fp, #-136]	; 0xffffff78
   24b80:	cmp	r0, #0
   24b84:	strbne	r7, [fp, #-148]	; 0xffffff6c
   24b88:	cmp	r4, #0
   24b8c:	beq	24840 <__assert_fail@plt+0x13714>
   24b90:	b	24a4c <__assert_fail@plt+0x13920>
   24b94:	ldr	r5, [fp, #-184]	; 0xffffff48
   24b98:	sub	r1, fp, #172	; 0xac
   24b9c:	mov	r2, r5
   24ba0:	mov	r0, r6
   24ba4:	bl	10ed4 <memcpy@plt>
   24ba8:	str	r6, [r6, #-16]
   24bac:	b	249d0 <__assert_fail@plt+0x138a4>
   24bb0:	str	r6, [fp, #-128]	; 0xffffff80
   24bb4:	ldrb	r3, [r4]
   24bb8:	strb	r6, [fp, #-124]	; 0xffffff84
   24bbc:	strb	r6, [fp, #-136]	; 0xffffff78
   24bc0:	str	r3, [fp, #-120]	; 0xffffff88
   24bc4:	mov	r4, r3
   24bc8:	b	24b88 <__assert_fail@plt+0x13a5c>
   24bcc:	ldr	r5, [fp, #-76]	; 0xffffffb4
   24bd0:	str	r6, [fp, #-72]	; 0xffffffb8
   24bd4:	ldrb	r3, [r5]
   24bd8:	cmp	r3, #0
   24bdc:	bne	24c4c <__assert_fail@plt+0x13b20>
   24be0:	ldr	r4, [fp, #-64]	; 0xffffffc0
   24be4:	cmp	r4, #0
   24be8:	beq	246f8 <__assert_fail@plt+0x135cc>
   24bec:	b	24920 <__assert_fail@plt+0x137f4>
   24bf0:	str	r6, [fp, #-128]	; 0xffffff80
   24bf4:	strb	r7, [fp, #-124]	; 0xffffff84
   24bf8:	b	24a4c <__assert_fail@plt+0x13920>
   24bfc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24c00:	mov	r0, r4
   24c04:	bl	1100c <strlen@plt>
   24c08:	strb	r7, [fp, #-124]	; 0xffffff84
   24c0c:	str	r0, [fp, #-128]	; 0xffffff80
   24c10:	b	24a50 <__assert_fail@plt+0x13924>
   24c14:	ldr	r4, [fp, #-132]	; 0xffffff7c
   24c18:	str	r6, [fp, #-128]	; 0xffffff80
   24c1c:	ldrb	r3, [r4]
   24c20:	cmp	r3, #0
   24c24:	bne	24c4c <__assert_fail@plt+0x13b20>
   24c28:	ldr	r4, [fp, #-120]	; 0xffffff88
   24c2c:	cmp	r4, #0
   24c30:	beq	24b70 <__assert_fail@plt+0x13a44>
   24c34:	b	24920 <__assert_fail@plt+0x137f4>
   24c38:	ldr	r3, [pc, #36]	; 24c64 <__assert_fail@plt+0x13b38>
   24c3c:	mov	r2, #143	; 0x8f
   24c40:	ldr	r1, [pc, #32]	; 24c68 <__assert_fail@plt+0x13b3c>
   24c44:	ldr	r0, [pc, #36]	; 24c70 <__assert_fail@plt+0x13b44>
   24c48:	bl	1112c <__assert_fail@plt>
   24c4c:	ldr	r3, [pc, #16]	; 24c64 <__assert_fail@plt+0x13b38>
   24c50:	mov	r2, #171	; 0xab
   24c54:	ldr	r1, [pc, #12]	; 24c68 <__assert_fail@plt+0x13b3c>
   24c58:	ldr	r0, [pc, #20]	; 24c74 <__assert_fail@plt+0x13b48>
   24c5c:	bl	1112c <__assert_fail@plt>
   24c60:	andeq	sl, r2, r8, ror #21
   24c64:	andeq	sl, r2, r8, lsl #22
   24c68:	andeq	sl, r2, r4, asr #12
   24c6c:	andeq	sl, r2, r4, lsl #13
   24c70:	andeq	sl, r2, r4, asr r6
   24c74:	andeq	sl, r2, ip, ror #12
   24c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c7c:	sub	sp, sp, #300	; 0x12c
   24c80:	mov	fp, r1
   24c84:	str	r0, [sp, #4]
   24c88:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   24c8c:	cmp	r0, #1
   24c90:	bls	24e50 <__assert_fail@plt+0x13d24>
   24c94:	ldrb	r2, [fp]
   24c98:	ldr	r9, [pc, #3028]	; 25874 <__assert_fail@plt+0x14748>
   24c9c:	mov	r1, #0
   24ca0:	and	r0, r2, #31
   24ca4:	lsr	r3, r2, #5
   24ca8:	str	fp, [sp, #32]
   24cac:	ldr	r3, [r9, r3, lsl #2]
   24cb0:	str	r1, [sp, #24]
   24cb4:	strb	r1, [sp, #16]
   24cb8:	lsr	r3, r3, r0
   24cbc:	ands	r4, r3, #1
   24cc0:	str	r1, [sp, #20]
   24cc4:	strb	r1, [sp, #28]
   24cc8:	beq	24db4 <__assert_fail@plt+0x13c88>
   24ccc:	mov	r3, #1
   24cd0:	mov	r4, r2
   24cd4:	str	r3, [sp, #36]	; 0x24
   24cd8:	strb	r3, [sp, #40]	; 0x28
   24cdc:	cmp	r4, #0
   24ce0:	mov	r3, #1
   24ce4:	str	r2, [sp, #44]	; 0x2c
   24ce8:	strb	r3, [sp, #28]
   24cec:	beq	24e44 <__assert_fail@plt+0x13d18>
   24cf0:	ldr	r1, [sp, #4]
   24cf4:	mov	r3, #0
   24cf8:	mov	sl, #1
   24cfc:	str	fp, [sp, #88]	; 0x58
   24d00:	str	fp, [sp, #12]
   24d04:	mov	r8, r3
   24d08:	mov	r7, r3
   24d0c:	mov	r5, sl
   24d10:	mov	r4, r1
   24d14:	mov	fp, r3
   24d18:	str	r1, [sp, #144]	; 0x90
   24d1c:	strb	r3, [sp, #72]	; 0x48
   24d20:	str	r3, [sp, #76]	; 0x4c
   24d24:	strb	r3, [sp, #84]	; 0x54
   24d28:	strb	r3, [sp, #128]	; 0x80
   24d2c:	str	r3, [sp, #132]	; 0x84
   24d30:	strb	r3, [sp, #140]	; 0x8c
   24d34:	str	r3, [sp, #8]
   24d38:	str	r3, [sp, #80]	; 0x50
   24d3c:	str	r3, [sp, #136]	; 0x88
   24d40:	ldrb	r3, [sp, #128]	; 0x80
   24d44:	cmp	r3, #0
   24d48:	bne	24fac <__assert_fail@plt+0x13e80>
   24d4c:	ldrb	r3, [r4]
   24d50:	and	r2, r3, #31
   24d54:	lsr	r3, r3, #5
   24d58:	ldr	r3, [r9, r3, lsl #2]
   24d5c:	lsr	r3, r3, r2
   24d60:	tst	r3, #1
   24d64:	beq	24f98 <__assert_fail@plt+0x13e6c>
   24d68:	str	r5, [sp, #148]	; 0x94
   24d6c:	ldrb	r4, [r4]
   24d70:	strb	r5, [sp, #152]	; 0x98
   24d74:	str	r4, [sp, #156]	; 0x9c
   24d78:	cmp	r4, #0
   24d7c:	strb	r5, [sp, #140]	; 0x8c
   24d80:	beq	24f80 <__assert_fail@plt+0x13e54>
   24d84:	cmp	fp, #9
   24d88:	movls	r2, #0
   24d8c:	andhi	r2, sl, #1
   24d90:	cmp	r2, #0
   24d94:	beq	257cc <__assert_fail@plt+0x146a0>
   24d98:	add	r3, fp, fp, lsl #2
   24d9c:	cmp	r8, r3
   24da0:	bcs	25070 <__assert_fail@plt+0x13f44>
   24da4:	add	r3, r8, #1
   24da8:	mov	sl, r2
   24dac:	ldr	r8, [sp, #8]
   24db0:	b	2518c <__assert_fail@plt+0x14060>
   24db4:	add	r0, sp, #20
   24db8:	bl	10ee0 <mbsinit@plt>
   24dbc:	cmp	r0, #0
   24dc0:	beq	25824 <__assert_fail@plt+0x146f8>
   24dc4:	mov	r5, #1
   24dc8:	strb	r5, [sp, #16]
   24dcc:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   24dd0:	mov	r1, r0
   24dd4:	mov	r0, fp
   24dd8:	bl	22e5c <__assert_fail@plt+0x11d30>
   24ddc:	add	r3, sp, #20
   24de0:	mov	r1, fp
   24de4:	mov	r2, r0
   24de8:	add	r0, sp, #44	; 0x2c
   24dec:	bl	242b8 <__assert_fail@plt+0x1318c>
   24df0:	cmn	r0, #1
   24df4:	str	r0, [sp, #36]	; 0x24
   24df8:	strbeq	r4, [sp, #40]	; 0x28
   24dfc:	streq	r5, [sp, #36]	; 0x24
   24e00:	beq	2524c <__assert_fail@plt+0x14120>
   24e04:	cmn	r0, #2
   24e08:	beq	2523c <__assert_fail@plt+0x14110>
   24e0c:	cmp	r0, #0
   24e10:	beq	2576c <__assert_fail@plt+0x14640>
   24e14:	ldr	r4, [sp, #44]	; 0x2c
   24e18:	mov	r3, #1
   24e1c:	add	r0, sp, #20
   24e20:	strb	r3, [sp, #40]	; 0x28
   24e24:	bl	10ee0 <mbsinit@plt>
   24e28:	cmp	r0, #0
   24e2c:	movne	r3, #0
   24e30:	strbne	r3, [sp, #16]
   24e34:	mov	r3, #1
   24e38:	cmp	r4, #0
   24e3c:	strb	r3, [sp, #28]
   24e40:	bne	24cf0 <__assert_fail@plt+0x13bc4>
   24e44:	ldr	r0, [sp, #4]
   24e48:	add	sp, sp, #300	; 0x12c
   24e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e50:	ldrb	r7, [fp]
   24e54:	cmp	r7, #0
   24e58:	beq	24e44 <__assert_fail@plt+0x13d18>
   24e5c:	ldr	r2, [sp, #4]
   24e60:	add	r8, fp, #1
   24e64:	ldrb	r3, [r2]
   24e68:	cmp	r3, #0
   24e6c:	beq	24f80 <__assert_fail@plt+0x13e54>
   24e70:	mov	r5, #0
   24e74:	add	r6, r2, #1
   24e78:	cmp	r7, r3
   24e7c:	mov	r4, r5
   24e80:	mov	r9, r5
   24e84:	mov	sl, fp
   24e88:	mov	lr, #1
   24e8c:	add	r5, r5, #1
   24e90:	sub	r0, r6, #1
   24e94:	beq	24f2c <__assert_fail@plt+0x13e00>
   24e98:	ldrb	r3, [r6]
   24e9c:	cmp	r3, #0
   24ea0:	beq	24f80 <__assert_fail@plt+0x13e54>
   24ea4:	add	r4, r4, #1
   24ea8:	cmp	r5, #9
   24eac:	movls	r3, #0
   24eb0:	andhi	r3, lr, #1
   24eb4:	cmp	r3, #0
   24eb8:	beq	24f18 <__assert_fail@plt+0x13dec>
   24ebc:	add	r2, r5, r5, lsl #2
   24ec0:	cmp	r4, r2
   24ec4:	bcc	24f8c <__assert_fail@plt+0x13e60>
   24ec8:	cmp	sl, #0
   24ecc:	str	r3, [sp, #4]
   24ed0:	beq	24ef0 <__assert_fail@plt+0x13dc4>
   24ed4:	mov	r0, sl
   24ed8:	sub	r1, r4, r9
   24edc:	bl	110a8 <strnlen@plt>
   24ee0:	ldrb	r2, [sl, r0]!
   24ee4:	cmp	r2, #0
   24ee8:	bne	25220 <__assert_fail@plt+0x140f4>
   24eec:	mov	r9, r4
   24ef0:	mov	r0, fp
   24ef4:	bl	1100c <strlen@plt>
   24ef8:	add	r3, sp, #240	; 0xf0
   24efc:	mov	r1, fp
   24f00:	mov	r2, r0
   24f04:	mov	r0, r6
   24f08:	bl	2430c <__assert_fail@plt+0x131e0>
   24f0c:	subs	lr, r0, #0
   24f10:	bne	257c4 <__assert_fail@plt+0x14698>
   24f14:	mov	sl, lr
   24f18:	ldrb	r3, [r6], #1
   24f1c:	cmp	r7, r3
   24f20:	add	r5, r5, #1
   24f24:	sub	r0, r6, #1
   24f28:	bne	24e98 <__assert_fail@plt+0x13d6c>
   24f2c:	ldrb	r3, [fp, #1]
   24f30:	cmp	r3, #0
   24f34:	beq	24e48 <__assert_fail@plt+0x13d1c>
   24f38:	ldrb	r2, [r6]
   24f3c:	cmp	r2, #0
   24f40:	beq	24f80 <__assert_fail@plt+0x13e54>
   24f44:	cmp	r2, r3
   24f48:	add	r4, r4, #2
   24f4c:	bne	24ea8 <__assert_fail@plt+0x13d7c>
   24f50:	mov	ip, r6
   24f54:	mov	r1, r8
   24f58:	b	24f68 <__assert_fail@plt+0x13e3c>
   24f5c:	cmp	r3, r2
   24f60:	add	r4, r4, #1
   24f64:	bne	24ea8 <__assert_fail@plt+0x13d7c>
   24f68:	ldrb	r3, [r1, #1]!
   24f6c:	cmp	r3, #0
   24f70:	beq	24e48 <__assert_fail@plt+0x13d1c>
   24f74:	ldrb	r2, [ip, #1]!
   24f78:	cmp	r2, #0
   24f7c:	bne	24f5c <__assert_fail@plt+0x13e30>
   24f80:	mov	r0, #0
   24f84:	add	sp, sp, #300	; 0x12c
   24f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f8c:	mov	lr, r3
   24f90:	ldrb	r3, [r6], #1
   24f94:	b	24f1c <__assert_fail@plt+0x13df0>
   24f98:	add	r0, sp, #132	; 0x84
   24f9c:	bl	10ee0 <mbsinit@plt>
   24fa0:	cmp	r0, #0
   24fa4:	beq	25824 <__assert_fail@plt+0x146f8>
   24fa8:	strb	r5, [sp, #128]	; 0x80
   24fac:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   24fb0:	mov	r1, r0
   24fb4:	mov	r0, r4
   24fb8:	bl	22e5c <__assert_fail@plt+0x11d30>
   24fbc:	add	r3, sp, #132	; 0x84
   24fc0:	mov	r1, r4
   24fc4:	mov	r2, r0
   24fc8:	add	r0, sp, #156	; 0x9c
   24fcc:	bl	242b8 <__assert_fail@plt+0x1318c>
   24fd0:	cmn	r0, #1
   24fd4:	str	r0, [sp, #148]	; 0x94
   24fd8:	strbeq	r7, [sp, #152]	; 0x98
   24fdc:	streq	r5, [sp, #148]	; 0x94
   24fe0:	beq	25020 <__assert_fail@plt+0x13ef4>
   24fe4:	cmn	r0, #2
   24fe8:	beq	25010 <__assert_fail@plt+0x13ee4>
   24fec:	cmp	r0, #0
   24ff0:	beq	256c0 <__assert_fail@plt+0x14594>
   24ff4:	ldr	r4, [sp, #156]	; 0x9c
   24ff8:	add	r0, sp, #132	; 0x84
   24ffc:	strb	r5, [sp, #152]	; 0x98
   25000:	bl	10ee0 <mbsinit@plt>
   25004:	cmp	r0, #0
   25008:	strbne	r7, [sp, #128]	; 0x80
   2500c:	b	24d78 <__assert_fail@plt+0x13c4c>
   25010:	ldr	r0, [sp, #144]	; 0x90
   25014:	bl	1100c <strlen@plt>
   25018:	strb	r7, [sp, #152]	; 0x98
   2501c:	str	r0, [sp, #148]	; 0x94
   25020:	cmp	fp, #9
   25024:	movls	r3, #0
   25028:	andhi	r3, sl, #1
   2502c:	cmp	r3, #0
   25030:	strb	r5, [sp, #140]	; 0x8c
   25034:	addeq	r8, r8, #1
   25038:	bne	25064 <__assert_fail@plt+0x13f38>
   2503c:	ldr	r6, [sp, #148]	; 0x94
   25040:	ldr	r3, [sp, #36]	; 0x24
   25044:	ldr	r4, [sp, #144]	; 0x90
   25048:	cmp	r6, r3
   2504c:	beq	25264 <__assert_fail@plt+0x14138>
   25050:	add	r4, r4, r6
   25054:	str	r4, [sp, #144]	; 0x90
   25058:	strb	r7, [sp, #140]	; 0x8c
   2505c:	add	fp, fp, #1
   25060:	b	24d40 <__assert_fail@plt+0x13c14>
   25064:	add	r2, fp, fp, lsl #2
   25068:	cmp	r8, r2
   2506c:	bcc	2584c <__assert_fail@plt+0x14720>
   25070:	ldr	r3, [sp, #8]
   25074:	subs	r6, r8, r3
   25078:	ldrb	r3, [sp, #84]	; 0x54
   2507c:	beq	25858 <__assert_fail@plt+0x1472c>
   25080:	cmp	r3, #0
   25084:	beq	25234 <__assert_fail@plt+0x14108>
   25088:	ldrb	r3, [sp, #96]	; 0x60
   2508c:	cmp	r3, #0
   25090:	ldrne	r4, [sp, #100]	; 0x64
   25094:	bne	25150 <__assert_fail@plt+0x14024>
   25098:	ldr	r4, [sp, #88]	; 0x58
   2509c:	ldr	r3, [sp, #92]	; 0x5c
   250a0:	subs	r6, r6, #1
   250a4:	add	r4, r4, r3
   250a8:	strb	r7, [sp, #84]	; 0x54
   250ac:	str	r4, [sp, #88]	; 0x58
   250b0:	mov	sl, r4
   250b4:	beq	2539c <__assert_fail@plt+0x14270>
   250b8:	ldrb	r3, [sp, #72]	; 0x48
   250bc:	cmp	r3, #0
   250c0:	bne	250f4 <__assert_fail@plt+0x13fc8>
   250c4:	ldrb	r3, [r4]
   250c8:	and	r2, r3, #31
   250cc:	lsr	r3, r3, #5
   250d0:	ldr	r3, [r9, r3, lsl #2]
   250d4:	lsr	r3, r3, r2
   250d8:	tst	r3, #1
   250dc:	bne	251bc <__assert_fail@plt+0x14090>
   250e0:	add	r0, sp, #76	; 0x4c
   250e4:	bl	10ee0 <mbsinit@plt>
   250e8:	cmp	r0, #0
   250ec:	beq	25824 <__assert_fail@plt+0x146f8>
   250f0:	strb	r5, [sp, #72]	; 0x48
   250f4:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   250f8:	mov	r1, r0
   250fc:	mov	r0, r4
   25100:	bl	22e5c <__assert_fail@plt+0x11d30>
   25104:	add	r3, sp, #76	; 0x4c
   25108:	mov	r1, r4
   2510c:	mov	r2, r0
   25110:	add	r0, sp, #100	; 0x64
   25114:	bl	242b8 <__assert_fail@plt+0x1318c>
   25118:	cmn	r0, #1
   2511c:	str	r0, [sp, #92]	; 0x5c
   25120:	beq	251d8 <__assert_fail@plt+0x140ac>
   25124:	cmn	r0, #2
   25128:	beq	251e4 <__assert_fail@plt+0x140b8>
   2512c:	cmp	r0, #0
   25130:	beq	251fc <__assert_fail@plt+0x140d0>
   25134:	ldr	r4, [sp, #100]	; 0x64
   25138:	add	r0, sp, #76	; 0x4c
   2513c:	strb	r5, [sp, #96]	; 0x60
   25140:	bl	10ee0 <mbsinit@plt>
   25144:	strb	r5, [sp, #84]	; 0x54
   25148:	cmp	r0, #0
   2514c:	strbne	r7, [sp, #72]	; 0x48
   25150:	cmp	r4, #0
   25154:	bne	25098 <__assert_fail@plt+0x13f6c>
   25158:	ldrb	r3, [sp, #84]	; 0x54
   2515c:	cmp	r3, #0
   25160:	beq	25398 <__assert_fail@plt+0x1426c>
   25164:	add	r2, sp, #240	; 0xf0
   25168:	ldr	r1, [sp, #12]
   2516c:	ldr	r0, [sp, #4]
   25170:	bl	24474 <__assert_fail@plt+0x13348>
   25174:	subs	sl, r0, #0
   25178:	bne	257c4 <__assert_fail@plt+0x14698>
   2517c:	ldrb	r3, [sp, #152]	; 0x98
   25180:	cmp	r3, #0
   25184:	add	r3, r8, #1
   25188:	beq	25258 <__assert_fail@plt+0x1412c>
   2518c:	ldrb	r2, [sp, #40]	; 0x28
   25190:	cmp	r2, #0
   25194:	beq	25258 <__assert_fail@plt+0x1412c>
   25198:	ldr	r1, [sp, #156]	; 0x9c
   2519c:	ldr	r2, [sp, #44]	; 0x2c
   251a0:	str	r8, [sp, #8]
   251a4:	cmp	r1, r2
   251a8:	beq	25764 <__assert_fail@plt+0x14638>
   251ac:	ldr	r4, [sp, #144]	; 0x90
   251b0:	mov	r8, r3
   251b4:	ldr	r6, [sp, #148]	; 0x94
   251b8:	b	25050 <__assert_fail@plt+0x13f24>
   251bc:	str	r5, [sp, #92]	; 0x5c
   251c0:	ldrb	r3, [r4]
   251c4:	strb	r5, [sp, #96]	; 0x60
   251c8:	strb	r5, [sp, #84]	; 0x54
   251cc:	str	r3, [sp, #100]	; 0x64
   251d0:	mov	r4, r3
   251d4:	b	25150 <__assert_fail@plt+0x14024>
   251d8:	str	r5, [sp, #92]	; 0x5c
   251dc:	strb	r7, [sp, #96]	; 0x60
   251e0:	b	25098 <__assert_fail@plt+0x13f6c>
   251e4:	ldr	r4, [sp, #88]	; 0x58
   251e8:	mov	r0, r4
   251ec:	bl	1100c <strlen@plt>
   251f0:	strb	r7, [sp, #96]	; 0x60
   251f4:	str	r0, [sp, #92]	; 0x5c
   251f8:	b	2509c <__assert_fail@plt+0x13f70>
   251fc:	ldr	r4, [sp, #88]	; 0x58
   25200:	str	r5, [sp, #92]	; 0x5c
   25204:	ldrb	r3, [r4]
   25208:	cmp	r3, #0
   2520c:	bne	25838 <__assert_fail@plt+0x1470c>
   25210:	ldr	r4, [sp, #100]	; 0x64
   25214:	cmp	r4, #0
   25218:	beq	25138 <__assert_fail@plt+0x1400c>
   2521c:	b	25384 <__assert_fail@plt+0x14258>
   25220:	ldr	r3, [sp, #4]
   25224:	mov	r9, r4
   25228:	mov	lr, r3
   2522c:	ldrb	r3, [r6], #1
   25230:	b	24f1c <__assert_fail@plt+0x13df0>
   25234:	ldr	r4, [sp, #88]	; 0x58
   25238:	b	250b8 <__assert_fail@plt+0x13f8c>
   2523c:	ldr	r0, [sp, #32]
   25240:	bl	1100c <strlen@plt>
   25244:	strb	r4, [sp, #40]	; 0x28
   25248:	str	r0, [sp, #36]	; 0x24
   2524c:	mov	r3, #1
   25250:	strb	r3, [sp, #28]
   25254:	b	24cf0 <__assert_fail@plt+0x13bc4>
   25258:	str	r8, [sp, #8]
   2525c:	mov	r8, r3
   25260:	b	2503c <__assert_fail@plt+0x13f10>
   25264:	mov	r2, r6
   25268:	mov	r0, r4
   2526c:	ldr	r1, [sp, #32]
   25270:	bl	10eec <memcmp@plt>
   25274:	cmp	r0, #0
   25278:	bne	25050 <__assert_fail@plt+0x13f24>
   2527c:	add	lr, sp, #128	; 0x80
   25280:	add	ip, sp, #184	; 0xb8
   25284:	ldm	lr!, {r0, r1, r2, r3}
   25288:	stmia	ip!, {r0, r1, r2, r3}
   2528c:	ldm	lr!, {r0, r1, r2, r3}
   25290:	strb	r7, [sp, #196]	; 0xc4
   25294:	stmia	ip!, {r0, r1, r2, r3}
   25298:	ldm	lr!, {r0, r1, r2, r3}
   2529c:	ldr	r4, [sp, #200]	; 0xc8
   252a0:	stmia	ip!, {r0, r1, r2, r3}
   252a4:	ldm	lr, {r0, r1}
   252a8:	ldr	r3, [sp, #204]	; 0xcc
   252ac:	add	r4, r4, r3
   252b0:	stm	ip, {r0, r1}
   252b4:	str	r4, [sp, #200]	; 0xc8
   252b8:	ldr	r3, [sp, #12]
   252bc:	strb	r7, [sp, #240]	; 0xf0
   252c0:	str	r3, [sp, #256]	; 0x100
   252c4:	ldrb	r3, [r3]
   252c8:	str	r7, [sp, #244]	; 0xf4
   252cc:	str	r7, [sp, #248]	; 0xf8
   252d0:	and	r2, r3, #31
   252d4:	lsr	r1, r3, #5
   252d8:	strb	r7, [sp, #252]	; 0xfc
   252dc:	ldr	r6, [r9, r1, lsl #2]
   252e0:	lsr	r6, r6, r2
   252e4:	ands	r6, r6, #1
   252e8:	beq	2530c <__assert_fail@plt+0x141e0>
   252ec:	mov	r4, r3
   252f0:	str	r5, [sp, #260]	; 0x104
   252f4:	str	r3, [sp, #268]	; 0x10c
   252f8:	strb	r5, [sp, #264]	; 0x108
   252fc:	cmp	r4, #0
   25300:	strb	r5, [sp, #252]	; 0xfc
   25304:	bne	253f0 <__assert_fail@plt+0x142c4>
   25308:	bl	11120 <abort@plt>
   2530c:	add	r0, sp, #244	; 0xf4
   25310:	bl	10ee0 <mbsinit@plt>
   25314:	cmp	r0, #0
   25318:	beq	25824 <__assert_fail@plt+0x146f8>
   2531c:	strb	r5, [sp, #240]	; 0xf0
   25320:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25324:	ldr	r4, [sp, #12]
   25328:	mov	r1, r0
   2532c:	mov	r0, r4
   25330:	bl	22e5c <__assert_fail@plt+0x11d30>
   25334:	add	r3, sp, #244	; 0xf4
   25338:	mov	r1, r4
   2533c:	mov	r2, r0
   25340:	add	r0, sp, #268	; 0x10c
   25344:	bl	242b8 <__assert_fail@plt+0x1318c>
   25348:	cmn	r0, #1
   2534c:	str	r0, [sp, #260]	; 0x104
   25350:	beq	257d8 <__assert_fail@plt+0x146ac>
   25354:	cmn	r0, #2
   25358:	beq	257e8 <__assert_fail@plt+0x146bc>
   2535c:	cmp	r0, #0
   25360:	bne	25790 <__assert_fail@plt+0x14664>
   25364:	ldr	r4, [sp, #256]	; 0x100
   25368:	str	r5, [sp, #260]	; 0x104
   2536c:	ldrb	r3, [r4]
   25370:	cmp	r3, #0
   25374:	bne	25838 <__assert_fail@plt+0x1470c>
   25378:	ldr	r4, [sp, #268]	; 0x10c
   2537c:	cmp	r4, #0
   25380:	beq	25794 <__assert_fail@plt+0x14668>
   25384:	ldr	r3, [pc, #1260]	; 25878 <__assert_fail@plt+0x1474c>
   25388:	mov	r2, #172	; 0xac
   2538c:	ldr	r1, [pc, #1256]	; 2587c <__assert_fail@plt+0x14750>
   25390:	ldr	r0, [pc, #1256]	; 25880 <__assert_fail@plt+0x14754>
   25394:	bl	1112c <__assert_fail@plt>
   25398:	ldr	sl, [sp, #88]	; 0x58
   2539c:	ldrb	r3, [sp, #72]	; 0x48
   253a0:	cmp	r3, #0
   253a4:	bne	256f8 <__assert_fail@plt+0x145cc>
   253a8:	ldrb	r3, [sl]
   253ac:	and	r2, r3, #31
   253b0:	lsr	r3, r3, #5
   253b4:	ldr	r3, [r9, r3, lsl #2]
   253b8:	lsr	r3, r3, r2
   253bc:	tst	r3, #1
   253c0:	beq	256e4 <__assert_fail@plt+0x145b8>
   253c4:	str	r5, [sp, #92]	; 0x5c
   253c8:	ldrb	r3, [sl]
   253cc:	strb	r5, [sp, #96]	; 0x60
   253d0:	strb	r5, [sp, #84]	; 0x54
   253d4:	mov	r4, r3
   253d8:	str	r3, [sp, #100]	; 0x64
   253dc:	cmp	r4, #0
   253e0:	beq	25164 <__assert_fail@plt+0x14038>
   253e4:	ldrb	r3, [sp, #152]	; 0x98
   253e8:	mov	sl, r5
   253ec:	b	25180 <__assert_fail@plt+0x14054>
   253f0:	ldr	r4, [sp, #256]	; 0x100
   253f4:	ldr	r3, [sp, #260]	; 0x104
   253f8:	strb	r7, [sp, #252]	; 0xfc
   253fc:	add	r4, r4, r3
   25400:	ldrb	r3, [sp, #240]	; 0xf0
   25404:	add	r8, r8, #1
   25408:	str	r4, [sp, #256]	; 0x100
   2540c:	cmp	r3, #0
   25410:	bne	255b0 <__assert_fail@plt+0x14484>
   25414:	ldrb	r3, [r4]
   25418:	and	r2, r3, #31
   2541c:	lsr	r3, r3, #5
   25420:	ldr	r3, [r9, r3, lsl #2]
   25424:	lsr	r3, r3, r2
   25428:	tst	r3, #1
   2542c:	beq	25648 <__assert_fail@plt+0x1451c>
   25430:	str	r5, [sp, #260]	; 0x104
   25434:	ldrb	r4, [r4]
   25438:	strb	r5, [sp, #264]	; 0x108
   2543c:	str	r4, [sp, #268]	; 0x10c
   25440:	cmp	r4, #0
   25444:	strb	r5, [sp, #252]	; 0xfc
   25448:	bne	2546c <__assert_fail@plt+0x14340>
   2544c:	ldr	r0, [sp, #144]	; 0x90
   25450:	add	sp, sp, #300	; 0x12c
   25454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25458:	ldr	r0, [sp, #256]	; 0x100
   2545c:	bl	1100c <strlen@plt>
   25460:	strb	r7, [sp, #264]	; 0x108
   25464:	str	r0, [sp, #260]	; 0x104
   25468:	strb	r5, [sp, #252]	; 0xfc
   2546c:	ldrb	r3, [sp, #196]	; 0xc4
   25470:	cmp	r3, #0
   25474:	beq	254a4 <__assert_fail@plt+0x14378>
   25478:	ldrb	r3, [sp, #208]	; 0xd0
   2547c:	cmp	r3, #0
   25480:	ldrne	r4, [sp, #212]	; 0xd4
   25484:	bne	2554c <__assert_fail@plt+0x14420>
   25488:	ldr	r2, [sp, #204]	; 0xcc
   2548c:	ldr	r3, [sp, #260]	; 0x104
   25490:	cmp	r2, r3
   25494:	beq	25630 <__assert_fail@plt+0x14504>
   25498:	ldr	r4, [sp, #144]	; 0x90
   2549c:	ldr	r6, [sp, #148]	; 0x94
   254a0:	b	25050 <__assert_fail@plt+0x13f24>
   254a4:	ldrb	r3, [sp, #184]	; 0xb8
   254a8:	ldr	r4, [sp, #200]	; 0xc8
   254ac:	cmp	r3, #0
   254b0:	bne	254e4 <__assert_fail@plt+0x143b8>
   254b4:	ldrb	r3, [r4]
   254b8:	and	r2, r3, #31
   254bc:	lsr	r3, r3, #5
   254c0:	ldr	r3, [r9, r3, lsl #2]
   254c4:	lsr	r3, r3, r2
   254c8:	tst	r3, #1
   254cc:	bne	25614 <__assert_fail@plt+0x144e8>
   254d0:	add	r0, sp, #188	; 0xbc
   254d4:	bl	10ee0 <mbsinit@plt>
   254d8:	cmp	r0, #0
   254dc:	beq	25824 <__assert_fail@plt+0x146f8>
   254e0:	strb	r5, [sp, #184]	; 0xb8
   254e4:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   254e8:	mov	r1, r0
   254ec:	mov	r0, r4
   254f0:	bl	22e5c <__assert_fail@plt+0x11d30>
   254f4:	add	r3, sp, #188	; 0xbc
   254f8:	mov	r1, r4
   254fc:	mov	r2, r0
   25500:	add	r0, sp, #212	; 0xd4
   25504:	bl	242b8 <__assert_fail@plt+0x1318c>
   25508:	cmn	r0, #1
   2550c:	str	r0, [sp, #204]	; 0xcc
   25510:	strbeq	r7, [sp, #208]	; 0xd0
   25514:	streq	r5, [sp, #204]	; 0xcc
   25518:	strbeq	r5, [sp, #196]	; 0xc4
   2551c:	beq	25488 <__assert_fail@plt+0x1435c>
   25520:	cmn	r0, #2
   25524:	beq	25660 <__assert_fail@plt+0x14534>
   25528:	cmp	r0, #0
   2552c:	beq	2569c <__assert_fail@plt+0x14570>
   25530:	ldr	r4, [sp, #212]	; 0xd4
   25534:	add	r0, sp, #188	; 0xbc
   25538:	strb	r5, [sp, #208]	; 0xd0
   2553c:	bl	10ee0 <mbsinit@plt>
   25540:	strb	r5, [sp, #196]	; 0xc4
   25544:	cmp	r0, #0
   25548:	strbne	r7, [sp, #184]	; 0xb8
   2554c:	cmp	r4, #0
   25550:	beq	24f80 <__assert_fail@plt+0x13e54>
   25554:	ldrb	r3, [sp, #264]	; 0x108
   25558:	cmp	r3, #0
   2555c:	beq	25488 <__assert_fail@plt+0x1435c>
   25560:	ldr	r0, [sp, #268]	; 0x10c
   25564:	subs	r0, r0, r4
   25568:	movne	r0, #1
   2556c:	cmp	r0, #0
   25570:	add	r1, r8, #1
   25574:	bne	25498 <__assert_fail@plt+0x1436c>
   25578:	ldr	r3, [sp, #200]	; 0xc8
   2557c:	ldr	r2, [sp, #204]	; 0xcc
   25580:	ldr	r4, [sp, #256]	; 0x100
   25584:	add	r3, r3, r2
   25588:	str	r3, [sp, #200]	; 0xc8
   2558c:	ldrb	r3, [sp, #240]	; 0xf0
   25590:	ldr	r2, [sp, #260]	; 0x104
   25594:	strb	r0, [sp, #196]	; 0xc4
   25598:	add	r4, r4, r2
   2559c:	cmp	r3, #0
   255a0:	strb	r0, [sp, #252]	; 0xfc
   255a4:	mov	r8, r1
   255a8:	str	r4, [sp, #256]	; 0x100
   255ac:	beq	25414 <__assert_fail@plt+0x142e8>
   255b0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   255b4:	mov	r1, r0
   255b8:	mov	r0, r4
   255bc:	bl	22e5c <__assert_fail@plt+0x11d30>
   255c0:	add	r3, sp, #244	; 0xf4
   255c4:	mov	r1, r4
   255c8:	mov	r2, r0
   255cc:	add	r0, sp, #268	; 0x10c
   255d0:	bl	242b8 <__assert_fail@plt+0x1318c>
   255d4:	cmn	r0, #1
   255d8:	str	r0, [sp, #260]	; 0x104
   255dc:	strbeq	r7, [sp, #264]	; 0x108
   255e0:	streq	r5, [sp, #260]	; 0x104
   255e4:	beq	25468 <__assert_fail@plt+0x1433c>
   255e8:	cmn	r0, #2
   255ec:	beq	25458 <__assert_fail@plt+0x1432c>
   255f0:	cmp	r0, #0
   255f4:	beq	25678 <__assert_fail@plt+0x1454c>
   255f8:	ldr	r4, [sp, #268]	; 0x10c
   255fc:	add	r0, sp, #244	; 0xf4
   25600:	strb	r5, [sp, #264]	; 0x108
   25604:	bl	10ee0 <mbsinit@plt>
   25608:	cmp	r0, #0
   2560c:	strbne	r7, [sp, #240]	; 0xf0
   25610:	b	25440 <__assert_fail@plt+0x14314>
   25614:	str	r5, [sp, #204]	; 0xcc
   25618:	ldrb	r0, [r4]
   2561c:	strb	r5, [sp, #208]	; 0xd0
   25620:	strb	r5, [sp, #196]	; 0xc4
   25624:	str	r0, [sp, #212]	; 0xd4
   25628:	mov	r4, r0
   2562c:	b	2554c <__assert_fail@plt+0x14420>
   25630:	ldr	r1, [sp, #256]	; 0x100
   25634:	ldr	r0, [sp, #200]	; 0xc8
   25638:	bl	10eec <memcmp@plt>
   2563c:	adds	r0, r0, #0
   25640:	movne	r0, #1
   25644:	b	2556c <__assert_fail@plt+0x14440>
   25648:	add	r0, sp, #244	; 0xf4
   2564c:	bl	10ee0 <mbsinit@plt>
   25650:	cmp	r0, #0
   25654:	beq	25824 <__assert_fail@plt+0x146f8>
   25658:	strb	r5, [sp, #240]	; 0xf0
   2565c:	b	255b0 <__assert_fail@plt+0x14484>
   25660:	ldr	r0, [sp, #200]	; 0xc8
   25664:	bl	1100c <strlen@plt>
   25668:	strb	r7, [sp, #208]	; 0xd0
   2566c:	strb	r5, [sp, #196]	; 0xc4
   25670:	str	r0, [sp, #204]	; 0xcc
   25674:	b	25488 <__assert_fail@plt+0x1435c>
   25678:	ldr	r3, [sp, #256]	; 0x100
   2567c:	str	r5, [sp, #260]	; 0x104
   25680:	ldrb	r3, [r3]
   25684:	cmp	r3, #0
   25688:	bne	25838 <__assert_fail@plt+0x1470c>
   2568c:	ldr	r4, [sp, #268]	; 0x10c
   25690:	cmp	r4, #0
   25694:	beq	255fc <__assert_fail@plt+0x144d0>
   25698:	b	25384 <__assert_fail@plt+0x14258>
   2569c:	ldr	r3, [sp, #200]	; 0xc8
   256a0:	str	r5, [sp, #204]	; 0xcc
   256a4:	ldrb	r3, [r3]
   256a8:	cmp	r3, #0
   256ac:	bne	25838 <__assert_fail@plt+0x1470c>
   256b0:	ldr	r4, [sp, #212]	; 0xd4
   256b4:	cmp	r4, #0
   256b8:	beq	25534 <__assert_fail@plt+0x14408>
   256bc:	b	25384 <__assert_fail@plt+0x14258>
   256c0:	ldr	r4, [sp, #144]	; 0x90
   256c4:	str	r5, [sp, #148]	; 0x94
   256c8:	ldrb	r3, [r4]
   256cc:	cmp	r3, #0
   256d0:	bne	25838 <__assert_fail@plt+0x1470c>
   256d4:	ldr	r4, [sp, #156]	; 0x9c
   256d8:	cmp	r4, #0
   256dc:	beq	24ff8 <__assert_fail@plt+0x13ecc>
   256e0:	b	25384 <__assert_fail@plt+0x14258>
   256e4:	add	r0, sp, #76	; 0x4c
   256e8:	bl	10ee0 <mbsinit@plt>
   256ec:	cmp	r0, #0
   256f0:	beq	25824 <__assert_fail@plt+0x146f8>
   256f4:	strb	r5, [sp, #72]	; 0x48
   256f8:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   256fc:	mov	r1, r0
   25700:	mov	r0, sl
   25704:	bl	22e5c <__assert_fail@plt+0x11d30>
   25708:	add	r3, sp, #76	; 0x4c
   2570c:	mov	r1, sl
   25710:	mov	r2, r0
   25714:	add	r0, sp, #100	; 0x64
   25718:	bl	242b8 <__assert_fail@plt+0x1318c>
   2571c:	cmn	r0, #1
   25720:	str	r0, [sp, #92]	; 0x5c
   25724:	strbeq	r7, [sp, #96]	; 0x60
   25728:	streq	r5, [sp, #92]	; 0x5c
   2572c:	strbeq	r5, [sp, #84]	; 0x54
   25730:	beq	253e4 <__assert_fail@plt+0x142b8>
   25734:	cmn	r0, #2
   25738:	beq	257ac <__assert_fail@plt+0x14680>
   2573c:	cmp	r0, #0
   25740:	beq	25800 <__assert_fail@plt+0x146d4>
   25744:	ldr	r4, [sp, #100]	; 0x64
   25748:	add	r0, sp, #76	; 0x4c
   2574c:	strb	r5, [sp, #96]	; 0x60
   25750:	bl	10ee0 <mbsinit@plt>
   25754:	strb	r5, [sp, #84]	; 0x54
   25758:	cmp	r0, #0
   2575c:	strbne	r7, [sp, #72]	; 0x48
   25760:	b	253dc <__assert_fail@plt+0x142b0>
   25764:	mov	r8, r3
   25768:	b	2527c <__assert_fail@plt+0x14150>
   2576c:	ldr	r3, [sp, #32]
   25770:	str	r5, [sp, #36]	; 0x24
   25774:	ldrb	r3, [r3]
   25778:	cmp	r3, #0
   2577c:	bne	25838 <__assert_fail@plt+0x1470c>
   25780:	ldr	r4, [sp, #44]	; 0x2c
   25784:	cmp	r4, #0
   25788:	beq	24e18 <__assert_fail@plt+0x13cec>
   2578c:	b	25384 <__assert_fail@plt+0x14258>
   25790:	ldr	r4, [sp, #268]	; 0x10c
   25794:	add	r0, sp, #244	; 0xf4
   25798:	strb	r5, [sp, #264]	; 0x108
   2579c:	bl	10ee0 <mbsinit@plt>
   257a0:	cmp	r0, #0
   257a4:	strbne	r7, [sp, #240]	; 0xf0
   257a8:	b	252fc <__assert_fail@plt+0x141d0>
   257ac:	ldr	r0, [sp, #88]	; 0x58
   257b0:	bl	1100c <strlen@plt>
   257b4:	strb	r7, [sp, #96]	; 0x60
   257b8:	strb	r5, [sp, #84]	; 0x54
   257bc:	str	r0, [sp, #92]	; 0x5c
   257c0:	b	253e4 <__assert_fail@plt+0x142b8>
   257c4:	ldr	r0, [sp, #240]	; 0xf0
   257c8:	b	24e48 <__assert_fail@plt+0x13d1c>
   257cc:	add	r3, r8, #1
   257d0:	ldr	r8, [sp, #8]
   257d4:	b	2518c <__assert_fail@plt+0x14060>
   257d8:	str	r5, [sp, #260]	; 0x104
   257dc:	strb	r6, [sp, #264]	; 0x108
   257e0:	ldr	r4, [sp, #256]	; 0x100
   257e4:	b	253f4 <__assert_fail@plt+0x142c8>
   257e8:	ldr	r4, [sp, #256]	; 0x100
   257ec:	mov	r0, r4
   257f0:	bl	1100c <strlen@plt>
   257f4:	strb	r6, [sp, #264]	; 0x108
   257f8:	str	r0, [sp, #260]	; 0x104
   257fc:	b	253f4 <__assert_fail@plt+0x142c8>
   25800:	ldr	r4, [sp, #88]	; 0x58
   25804:	str	r5, [sp, #92]	; 0x5c
   25808:	ldrb	r3, [r4]
   2580c:	cmp	r3, #0
   25810:	bne	25838 <__assert_fail@plt+0x1470c>
   25814:	ldr	r4, [sp, #100]	; 0x64
   25818:	cmp	r4, #0
   2581c:	beq	25748 <__assert_fail@plt+0x1461c>
   25820:	b	25384 <__assert_fail@plt+0x14258>
   25824:	ldr	r3, [pc, #76]	; 25878 <__assert_fail@plt+0x1474c>
   25828:	mov	r2, #143	; 0x8f
   2582c:	ldr	r1, [pc, #72]	; 2587c <__assert_fail@plt+0x14750>
   25830:	ldr	r0, [pc, #76]	; 25884 <__assert_fail@plt+0x14758>
   25834:	bl	1112c <__assert_fail@plt>
   25838:	ldr	r3, [pc, #56]	; 25878 <__assert_fail@plt+0x1474c>
   2583c:	mov	r2, #171	; 0xab
   25840:	ldr	r1, [pc, #52]	; 2587c <__assert_fail@plt+0x14750>
   25844:	ldr	r0, [pc, #60]	; 25888 <__assert_fail@plt+0x1475c>
   25848:	bl	1112c <__assert_fail@plt>
   2584c:	add	r8, r8, #1
   25850:	mov	sl, r3
   25854:	b	2503c <__assert_fail@plt+0x13f10>
   25858:	cmp	r3, #0
   2585c:	beq	25398 <__assert_fail@plt+0x1426c>
   25860:	ldrb	r3, [sp, #96]	; 0x60
   25864:	cmp	r3, #0
   25868:	ldrne	r4, [sp, #100]	; 0x64
   2586c:	beq	253e4 <__assert_fail@plt+0x142b8>
   25870:	b	253dc <__assert_fail@plt+0x142b0>
   25874:	andeq	sl, r2, r8, ror #21
   25878:	andeq	sl, r2, r8, lsl #22
   2587c:	andeq	sl, r2, r4, asr #12
   25880:	andeq	sl, r2, r4, lsl #13
   25884:	andeq	sl, r2, r4, asr r6
   25888:	andeq	sl, r2, ip, ror #12
   2588c:	push	{r4, r5, r6, lr}
   25890:	subs	r4, r2, #0
   25894:	mov	r6, r0
   25898:	mov	r5, r1
   2589c:	beq	258c8 <__assert_fail@plt+0x1479c>
   258a0:	mov	r1, r4
   258a4:	mvn	r0, #0
   258a8:	bl	26120 <__assert_fail@plt+0x14ff4>
   258ac:	cmp	r0, r5
   258b0:	bcs	258c8 <__assert_fail@plt+0x1479c>
   258b4:	bl	11024 <__errno_location@plt>
   258b8:	mov	r3, #12
   258bc:	str	r3, [r0]
   258c0:	mov	r0, #0
   258c4:	pop	{r4, r5, r6, pc}
   258c8:	mul	r1, r5, r4
   258cc:	mov	r0, r6
   258d0:	pop	{r4, r5, r6, lr}
   258d4:	b	23f10 <__assert_fail@plt+0x12de4>
   258d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   258dc:	sub	sp, sp, #4096	; 0x1000
   258e0:	sub	sp, sp, #36	; 0x24
   258e4:	mov	sl, #0
   258e8:	mov	r8, r1
   258ec:	mov	r6, r0
   258f0:	str	r0, [sp, #12]
   258f4:	str	r3, [sp, #8]
   258f8:	mov	r0, r2
   258fc:	add	r4, sp, #32
   25900:	mov	r5, r2
   25904:	str	sl, [sp]
   25908:	mov	r3, sl
   2590c:	mov	r2, sl
   25910:	mov	r1, sl
   25914:	bl	10e80 <iconv@plt>
   25918:	cmp	r8, sl
   2591c:	str	r6, [r4, #-16]
   25920:	str	r8, [r4, #-12]
   25924:	beq	25b30 <__assert_fail@plt+0x14a04>
   25928:	add	r7, sp, #24
   2592c:	add	r6, sp, #28
   25930:	mov	r9, #4096	; 0x1000
   25934:	b	25950 <__assert_fail@plt+0x14824>
   25938:	ldr	r3, [r4, #-8]
   2593c:	ldr	r2, [r4, #-12]
   25940:	sub	r3, r3, r4
   25944:	cmp	r2, #0
   25948:	add	sl, sl, r3
   2594c:	beq	2598c <__assert_fail@plt+0x14860>
   25950:	str	r6, [sp]
   25954:	mov	r3, r7
   25958:	add	r2, sp, #20
   2595c:	add	r1, sp, #16
   25960:	mov	r0, r5
   25964:	stmdb	r4, {r4, r9}
   25968:	bl	10e80 <iconv@plt>
   2596c:	cmn	r0, #1
   25970:	bne	25938 <__assert_fail@plt+0x1480c>
   25974:	bl	11024 <__errno_location@plt>
   25978:	ldr	r3, [r0]
   2597c:	cmp	r3, #7
   25980:	beq	25938 <__assert_fail@plt+0x1480c>
   25984:	cmp	r3, #22
   25988:	bne	25b1c <__assert_fail@plt+0x149f0>
   2598c:	mov	ip, #4096	; 0x1000
   25990:	mov	r2, #0
   25994:	str	r6, [sp]
   25998:	mov	r1, r2
   2599c:	mov	r3, r7
   259a0:	mov	r0, r5
   259a4:	stmdb	r4, {r4, ip}
   259a8:	bl	10e80 <iconv@plt>
   259ac:	cmn	r0, #1
   259b0:	beq	25b1c <__assert_fail@plt+0x149f0>
   259b4:	ldr	r9, [r4, #-8]
   259b8:	sub	r9, r9, r4
   259bc:	adds	r9, r9, sl
   259c0:	beq	25abc <__assert_fail@plt+0x14990>
   259c4:	ldr	r3, [sp, #8]
   259c8:	ldr	fp, [r3]
   259cc:	cmp	fp, #0
   259d0:	beq	25a98 <__assert_fail@plt+0x1496c>
   259d4:	add	r3, sp, #4160	; 0x1040
   259d8:	add	r3, r3, #8
   259dc:	ldr	r3, [r3]
   259e0:	ldr	r3, [r3]
   259e4:	cmp	r9, r3
   259e8:	bhi	25a98 <__assert_fail@plt+0x1496c>
   259ec:	mov	r3, #0
   259f0:	str	r3, [sp]
   259f4:	mov	r2, r3
   259f8:	mov	r1, r3
   259fc:	mov	r0, r5
   25a00:	bl	10e80 <iconv@plt>
   25a04:	ldr	r3, [sp, #12]
   25a08:	mov	sl, r4
   25a0c:	stmdb	r4, {r3, r8, fp}
   25a10:	str	r9, [sl], #-12
   25a14:	b	25a3c <__assert_fail@plt+0x14910>
   25a18:	str	r4, [sp]
   25a1c:	mov	r3, r6
   25a20:	mov	r2, r7
   25a24:	mov	r1, sl
   25a28:	mov	r0, r5
   25a2c:	bl	10e80 <iconv@plt>
   25a30:	cmn	r0, #1
   25a34:	beq	25ae0 <__assert_fail@plt+0x149b4>
   25a38:	ldr	r8, [r4, #-8]
   25a3c:	cmp	r8, #0
   25a40:	bne	25a18 <__assert_fail@plt+0x148ec>
   25a44:	mov	r2, #0
   25a48:	str	r4, [sp]
   25a4c:	mov	r3, r6
   25a50:	mov	r0, r5
   25a54:	mov	r1, r2
   25a58:	bl	10e80 <iconv@plt>
   25a5c:	cmn	r0, #1
   25a60:	beq	25af0 <__assert_fail@plt+0x149c4>
   25a64:	ldr	r3, [r4]
   25a68:	cmp	r3, #0
   25a6c:	bne	25b40 <__assert_fail@plt+0x14a14>
   25a70:	ldr	r2, [sp, #8]
   25a74:	str	fp, [r2]
   25a78:	add	r2, sp, #4160	; 0x1040
   25a7c:	add	r2, r2, #8
   25a80:	ldr	r2, [r2]
   25a84:	str	r9, [r2]
   25a88:	mov	r0, r3
   25a8c:	add	sp, sp, #4096	; 0x1000
   25a90:	add	sp, sp, #36	; 0x24
   25a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a98:	mov	r0, r9
   25a9c:	bl	23ee4 <__assert_fail@plt+0x12db8>
   25aa0:	subs	fp, r0, #0
   25aa4:	bne	259ec <__assert_fail@plt+0x148c0>
   25aa8:	bl	11024 <__errno_location@plt>
   25aac:	mov	r2, #12
   25ab0:	mvn	r3, #0
   25ab4:	str	r2, [r0]
   25ab8:	b	25a88 <__assert_fail@plt+0x1495c>
   25abc:	add	r3, sp, #4160	; 0x1040
   25ac0:	add	r3, r3, #8
   25ac4:	ldr	r3, [r3]
   25ac8:	str	r9, [r3]
   25acc:	mov	r3, r9
   25ad0:	mov	r0, r3
   25ad4:	add	sp, sp, #4096	; 0x1000
   25ad8:	add	sp, sp, #36	; 0x24
   25adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ae0:	bl	11024 <__errno_location@plt>
   25ae4:	ldr	r3, [r0]
   25ae8:	cmp	r3, #22
   25aec:	beq	25a44 <__assert_fail@plt+0x14918>
   25af0:	ldr	r3, [sp, #8]
   25af4:	ldr	r3, [r3]
   25af8:	cmp	fp, r3
   25afc:	beq	25b1c <__assert_fail@plt+0x149f0>
   25b00:	mov	r0, fp
   25b04:	bl	17b4c <__assert_fail@plt+0x6a20>
   25b08:	mvn	r3, #0
   25b0c:	mov	r0, r3
   25b10:	add	sp, sp, #4096	; 0x1000
   25b14:	add	sp, sp, #36	; 0x24
   25b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b1c:	mvn	r3, #0
   25b20:	mov	r0, r3
   25b24:	add	sp, sp, #4096	; 0x1000
   25b28:	add	sp, sp, #36	; 0x24
   25b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b30:	mov	sl, r8
   25b34:	add	r7, sp, #24
   25b38:	add	r6, sp, #28
   25b3c:	b	2598c <__assert_fail@plt+0x14860>
   25b40:	bl	11120 <abort@plt>
   25b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b48:	sub	sp, sp, #28
   25b4c:	mov	r8, r1
   25b50:	str	r0, [sp, #8]
   25b54:	bl	1100c <strlen@plt>
   25b58:	cmp	r0, #4096	; 0x1000
   25b5c:	mov	r4, r0
   25b60:	lslcc	r4, r0, #4
   25b64:	add	r7, r4, #1
   25b68:	str	r0, [sp, #12]
   25b6c:	mov	r0, r7
   25b70:	bl	23ee4 <__assert_fail@plt+0x12db8>
   25b74:	subs	r6, r0, #0
   25b78:	beq	25d08 <__assert_fail@plt+0x14bdc>
   25b7c:	mov	r3, #0
   25b80:	str	r3, [sp]
   25b84:	mov	r2, r3
   25b88:	mov	r1, r3
   25b8c:	mov	r0, r8
   25b90:	bl	10e80 <iconv@plt>
   25b94:	add	r9, sp, #20
   25b98:	str	r6, [sp, #16]
   25b9c:	str	r4, [sp, #20]
   25ba0:	b	25c00 <__assert_fail@plt+0x14ad4>
   25ba4:	bl	11024 <__errno_location@plt>
   25ba8:	mov	r1, r5
   25bac:	mov	sl, r0
   25bb0:	mov	r0, r6
   25bb4:	ldr	r3, [sl]
   25bb8:	cmp	r3, #22
   25bbc:	beq	25c24 <__assert_fail@plt+0x14af8>
   25bc0:	cmp	r3, #7
   25bc4:	bne	25ce4 <__assert_fail@plt+0x14bb8>
   25bc8:	ldr	r4, [sp, #16]
   25bcc:	cmp	r7, r5
   25bd0:	sub	r4, r4, r6
   25bd4:	bcs	25cdc <__assert_fail@plt+0x14bb0>
   25bd8:	bl	23f10 <__assert_fail@plt+0x12de4>
   25bdc:	sub	r3, r5, #1
   25be0:	sub	r3, r3, r4
   25be4:	mov	r7, r5
   25be8:	cmp	r0, #0
   25bec:	add	r4, r0, r4
   25bf0:	beq	25cdc <__assert_fail@plt+0x14bb0>
   25bf4:	mov	r6, r0
   25bf8:	str	r4, [sp, #16]
   25bfc:	str	r3, [sp, #20]
   25c00:	str	r9, [sp]
   25c04:	add	r3, sp, #16
   25c08:	add	r2, sp, #12
   25c0c:	add	r1, sp, #8
   25c10:	mov	r0, r8
   25c14:	bl	10e80 <iconv@plt>
   25c18:	lsl	r5, r7, #1
   25c1c:	cmn	r0, #1
   25c20:	beq	25ba4 <__assert_fail@plt+0x14a78>
   25c24:	mov	sl, #0
   25c28:	b	25c80 <__assert_fail@plt+0x14b54>
   25c2c:	bl	11024 <__errno_location@plt>
   25c30:	mov	r1, r5
   25c34:	mov	fp, r0
   25c38:	mov	r0, r6
   25c3c:	ldr	r3, [fp]
   25c40:	cmp	r3, #7
   25c44:	bne	25ce4 <__assert_fail@plt+0x14bb8>
   25c48:	ldr	r4, [sp, #16]
   25c4c:	cmp	r7, r5
   25c50:	sub	r4, r4, r6
   25c54:	bcs	25cfc <__assert_fail@plt+0x14bd0>
   25c58:	bl	23f10 <__assert_fail@plt+0x12de4>
   25c5c:	sub	r3, r5, #1
   25c60:	sub	r3, r3, r4
   25c64:	mov	r7, r5
   25c68:	cmp	r0, #0
   25c6c:	add	r4, r0, r4
   25c70:	beq	25cfc <__assert_fail@plt+0x14bd0>
   25c74:	mov	r6, r0
   25c78:	str	r4, [sp, #16]
   25c7c:	str	r3, [sp, #20]
   25c80:	str	r9, [sp]
   25c84:	add	r3, sp, #16
   25c88:	mov	r2, sl
   25c8c:	mov	r1, #0
   25c90:	mov	r0, r8
   25c94:	bl	10e80 <iconv@plt>
   25c98:	lsl	r5, r7, #1
   25c9c:	cmn	r0, #1
   25ca0:	beq	25c2c <__assert_fail@plt+0x14b00>
   25ca4:	ldr	r3, [sp, #16]
   25ca8:	mov	r2, #0
   25cac:	add	r1, r3, #1
   25cb0:	str	r1, [sp, #16]
   25cb4:	strb	r2, [r3]
   25cb8:	ldr	r1, [sp, #16]
   25cbc:	sub	r1, r1, r6
   25cc0:	cmp	r7, r1
   25cc4:	bls	25cf0 <__assert_fail@plt+0x14bc4>
   25cc8:	mov	r0, r6
   25ccc:	bl	23f10 <__assert_fail@plt+0x12de4>
   25cd0:	cmp	r0, #0
   25cd4:	movne	r6, r0
   25cd8:	b	25cf0 <__assert_fail@plt+0x14bc4>
   25cdc:	mov	r3, #12
   25ce0:	str	r3, [sl]
   25ce4:	mov	r0, r6
   25ce8:	bl	17b4c <__assert_fail@plt+0x6a20>
   25cec:	mov	r6, #0
   25cf0:	mov	r0, r6
   25cf4:	add	sp, sp, #28
   25cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25cfc:	mov	r3, #12
   25d00:	str	r3, [fp]
   25d04:	b	25ce4 <__assert_fail@plt+0x14bb8>
   25d08:	bl	11024 <__errno_location@plt>
   25d0c:	mov	r3, #12
   25d10:	str	r3, [r0]
   25d14:	b	25cf0 <__assert_fail@plt+0x14bc4>
   25d18:	push	{r4, r5, r6, lr}
   25d1c:	mov	r4, r0
   25d20:	ldrb	r3, [r0]
   25d24:	cmp	r3, #0
   25d28:	beq	25d48 <__assert_fail@plt+0x14c1c>
   25d2c:	mov	r6, r1
   25d30:	mov	r0, r6
   25d34:	mov	r1, r2
   25d38:	mov	r5, r2
   25d3c:	bl	23f6c <__assert_fail@plt+0x12e40>
   25d40:	cmp	r0, #0
   25d44:	bne	25d60 <__assert_fail@plt+0x14c34>
   25d48:	mov	r0, r4
   25d4c:	bl	10f10 <strdup@plt>
   25d50:	subs	r4, r0, #0
   25d54:	beq	25dac <__assert_fail@plt+0x14c80>
   25d58:	mov	r0, r4
   25d5c:	pop	{r4, r5, r6, pc}
   25d60:	mov	r0, r5
   25d64:	mov	r1, r6
   25d68:	bl	10fac <iconv_open@plt>
   25d6c:	cmn	r0, #1
   25d70:	mov	r5, r0
   25d74:	beq	25dc0 <__assert_fail@plt+0x14c94>
   25d78:	mov	r0, r4
   25d7c:	mov	r1, r5
   25d80:	bl	25b44 <__assert_fail@plt+0x14a18>
   25d84:	subs	r4, r0, #0
   25d88:	beq	25dc8 <__assert_fail@plt+0x14c9c>
   25d8c:	mov	r0, r5
   25d90:	bl	10e74 <iconv_close@plt>
   25d94:	cmp	r0, #0
   25d98:	bge	25d58 <__assert_fail@plt+0x14c2c>
   25d9c:	mov	r0, r4
   25da0:	bl	17b4c <__assert_fail@plt+0x6a20>
   25da4:	mov	r4, #0
   25da8:	b	25d58 <__assert_fail@plt+0x14c2c>
   25dac:	bl	11024 <__errno_location@plt>
   25db0:	mov	r3, #12
   25db4:	str	r3, [r0]
   25db8:	mov	r0, r4
   25dbc:	pop	{r4, r5, r6, pc}
   25dc0:	mov	r4, #0
   25dc4:	b	25d58 <__assert_fail@plt+0x14c2c>
   25dc8:	bl	11024 <__errno_location@plt>
   25dcc:	mov	r6, r0
   25dd0:	mov	r0, r5
   25dd4:	ldr	r5, [r6]
   25dd8:	bl	10e74 <iconv_close@plt>
   25ddc:	str	r5, [r6]
   25de0:	b	25d58 <__assert_fail@plt+0x14c2c>
   25de4:	push	{lr}		; (str lr, [sp, #-4]!)
   25de8:	sub	sp, sp, #268	; 0x10c
   25dec:	add	r1, sp, #4
   25df0:	ldr	r2, [pc, #60]	; 25e34 <__assert_fail@plt+0x14d08>
   25df4:	bl	26088 <__assert_fail@plt+0x14f5c>
   25df8:	cmp	r0, #0
   25dfc:	movne	r0, #0
   25e00:	bne	25e2c <__assert_fail@plt+0x14d00>
   25e04:	ldr	r1, [pc, #44]	; 25e38 <__assert_fail@plt+0x14d0c>
   25e08:	add	r0, sp, #4
   25e0c:	bl	10e8c <strcmp@plt>
   25e10:	cmp	r0, #0
   25e14:	beq	25e2c <__assert_fail@plt+0x14d00>
   25e18:	add	r0, sp, #4
   25e1c:	ldr	r1, [pc, #24]	; 25e3c <__assert_fail@plt+0x14d10>
   25e20:	bl	10e8c <strcmp@plt>
   25e24:	adds	r0, r0, #0
   25e28:	movne	r0, #1
   25e2c:	add	sp, sp, #268	; 0x10c
   25e30:	pop	{pc}		; (ldr pc, [sp], #4)
   25e34:	andeq	r0, r0, r1, lsl #2
   25e38:	andeq	sl, r2, ip, lsl fp
   25e3c:	andeq	sl, r2, r0, lsr #22
   25e40:	cmn	r0, #-2147483631	; 0x80000011
   25e44:	bls	25e50 <__assert_fail@plt+0x14d24>
   25e48:	mov	r0, #0
   25e4c:	bx	lr
   25e50:	push	{r4, lr}
   25e54:	add	r0, r0, #16
   25e58:	bl	10fa0 <malloc@plt>
   25e5c:	cmp	r0, #0
   25e60:	beq	25e88 <__assert_fail@plt+0x14d5c>
   25e64:	cmn	r0, #9
   25e68:	addls	r3, r0, #8
   25e6c:	bicls	r2, r3, #15
   25e70:	movhi	r2, #0
   25e74:	rsb	r3, r0, #8
   25e78:	add	r3, r3, r2
   25e7c:	add	r0, r0, r3
   25e80:	strb	r3, [r0, #-1]
   25e84:	pop	{r4, pc}
   25e88:	mov	r0, #0
   25e8c:	pop	{r4, pc}
   25e90:	tst	r0, #7
   25e94:	bne	25eac <__assert_fail@plt+0x14d80>
   25e98:	tst	r0, #8
   25e9c:	bxeq	lr
   25ea0:	ldrb	r3, [r0, #-1]
   25ea4:	sub	r0, r0, r3
   25ea8:	b	17b4c <__assert_fail@plt+0x6a20>
   25eac:	push	{r4, lr}
   25eb0:	bl	11120 <abort@plt>
   25eb4:	push	{r4, r5, r6, r7, r8, r9, lr}
   25eb8:	sub	sp, sp, #60	; 0x3c
   25ebc:	mov	r9, r0
   25ec0:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25ec4:	cmp	r0, #1
   25ec8:	bls	26030 <__assert_fail@plt+0x14f04>
   25ecc:	mov	r3, #0
   25ed0:	ldr	r8, [pc, #408]	; 26070 <__assert_fail@plt+0x14f44>
   25ed4:	mov	r5, r3
   25ed8:	mov	r4, r9
   25edc:	mov	r6, r3
   25ee0:	mov	r7, #1
   25ee4:	str	r9, [sp, #16]
   25ee8:	strb	r3, [sp]
   25eec:	str	r3, [sp, #4]
   25ef0:	strb	r3, [sp, #12]
   25ef4:	str	r3, [sp, #8]
   25ef8:	ldrb	r3, [sp]
   25efc:	cmp	r3, #0
   25f00:	bne	25f58 <__assert_fail@plt+0x14e2c>
   25f04:	ldrb	r3, [r4]
   25f08:	and	r2, r3, #31
   25f0c:	lsr	r3, r3, #5
   25f10:	ldr	r3, [r8, r3, lsl #2]
   25f14:	lsr	r3, r3, r2
   25f18:	tst	r3, #1
   25f1c:	beq	25f44 <__assert_fail@plt+0x14e18>
   25f20:	str	r7, [sp, #20]
   25f24:	ldrb	r4, [r4]
   25f28:	strb	r7, [sp, #24]
   25f2c:	cmp	r4, #0
   25f30:	str	r4, [sp, #28]
   25f34:	bne	25fb8 <__assert_fail@plt+0x14e8c>
   25f38:	mov	r0, r5
   25f3c:	add	sp, sp, #60	; 0x3c
   25f40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   25f44:	add	r0, sp, #4
   25f48:	bl	10ee0 <mbsinit@plt>
   25f4c:	cmp	r0, #0
   25f50:	beq	26048 <__assert_fail@plt+0x14f1c>
   25f54:	strb	r7, [sp]
   25f58:	bl	10f70 <__ctype_get_mb_cur_max@plt>
   25f5c:	mov	r1, r0
   25f60:	mov	r0, r4
   25f64:	bl	22e5c <__assert_fail@plt+0x11d30>
   25f68:	add	r3, sp, #4
   25f6c:	mov	r1, r4
   25f70:	mov	r2, r0
   25f74:	add	r0, sp, #28
   25f78:	bl	242b8 <__assert_fail@plt+0x1318c>
   25f7c:	cmn	r0, #1
   25f80:	str	r0, [sp, #20]
   25f84:	beq	25fd4 <__assert_fail@plt+0x14ea8>
   25f88:	cmn	r0, #2
   25f8c:	beq	26018 <__assert_fail@plt+0x14eec>
   25f90:	cmp	r0, #0
   25f94:	beq	25fe4 <__assert_fail@plt+0x14eb8>
   25f98:	ldr	r4, [sp, #28]
   25f9c:	add	r0, sp, #4
   25fa0:	strb	r7, [sp, #24]
   25fa4:	bl	10ee0 <mbsinit@plt>
   25fa8:	cmp	r0, #0
   25fac:	strbne	r6, [sp]
   25fb0:	cmp	r4, #0
   25fb4:	beq	25f38 <__assert_fail@plt+0x14e0c>
   25fb8:	ldr	r4, [sp, #16]
   25fbc:	ldr	r3, [sp, #20]
   25fc0:	add	r5, r5, #1
   25fc4:	add	r4, r4, r3
   25fc8:	strb	r6, [sp, #12]
   25fcc:	str	r4, [sp, #16]
   25fd0:	b	25ef8 <__assert_fail@plt+0x14dcc>
   25fd4:	str	r7, [sp, #20]
   25fd8:	strb	r6, [sp, #24]
   25fdc:	ldr	r4, [sp, #16]
   25fe0:	b	25fbc <__assert_fail@plt+0x14e90>
   25fe4:	ldr	r4, [sp, #16]
   25fe8:	str	r7, [sp, #20]
   25fec:	ldrb	r3, [r4]
   25ff0:	cmp	r3, #0
   25ff4:	bne	2605c <__assert_fail@plt+0x14f30>
   25ff8:	ldr	r4, [sp, #28]
   25ffc:	cmp	r4, #0
   26000:	beq	25f9c <__assert_fail@plt+0x14e70>
   26004:	ldr	r3, [pc, #104]	; 26074 <__assert_fail@plt+0x14f48>
   26008:	mov	r2, #172	; 0xac
   2600c:	ldr	r1, [pc, #100]	; 26078 <__assert_fail@plt+0x14f4c>
   26010:	ldr	r0, [pc, #100]	; 2607c <__assert_fail@plt+0x14f50>
   26014:	bl	1112c <__assert_fail@plt>
   26018:	ldr	r4, [sp, #16]
   2601c:	mov	r0, r4
   26020:	bl	1100c <strlen@plt>
   26024:	strb	r6, [sp, #24]
   26028:	str	r0, [sp, #20]
   2602c:	b	25fbc <__assert_fail@plt+0x14e90>
   26030:	mov	r0, r9
   26034:	bl	1100c <strlen@plt>
   26038:	mov	r5, r0
   2603c:	mov	r0, r5
   26040:	add	sp, sp, #60	; 0x3c
   26044:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26048:	ldr	r3, [pc, #36]	; 26074 <__assert_fail@plt+0x14f48>
   2604c:	mov	r2, #143	; 0x8f
   26050:	ldr	r1, [pc, #32]	; 26078 <__assert_fail@plt+0x14f4c>
   26054:	ldr	r0, [pc, #36]	; 26080 <__assert_fail@plt+0x14f54>
   26058:	bl	1112c <__assert_fail@plt>
   2605c:	ldr	r3, [pc, #16]	; 26074 <__assert_fail@plt+0x14f48>
   26060:	mov	r2, #171	; 0xab
   26064:	ldr	r1, [pc, #12]	; 26078 <__assert_fail@plt+0x14f4c>
   26068:	ldr	r0, [pc, #20]	; 26084 <__assert_fail@plt+0x14f58>
   2606c:	bl	1112c <__assert_fail@plt>
   26070:	andeq	sl, r2, r8, ror #21
   26074:	andeq	sl, r2, r8, lsr #22
   26078:	andeq	sl, r2, r4, asr #12
   2607c:	andeq	sl, r2, r4, lsl #13
   26080:	andeq	sl, r2, r4, asr r6
   26084:	andeq	sl, r2, ip, ror #12
   26088:	push	{r4, r5, r6, lr}
   2608c:	mov	r5, r1
   26090:	mov	r1, #0
   26094:	mov	r4, r2
   26098:	bl	110d8 <setlocale@plt>
   2609c:	subs	r6, r0, #0
   260a0:	beq	260fc <__assert_fail@plt+0x14fd0>
   260a4:	bl	1100c <strlen@plt>
   260a8:	cmp	r4, r0
   260ac:	bhi	260e4 <__assert_fail@plt+0x14fb8>
   260b0:	cmp	r4, #0
   260b4:	bne	260c0 <__assert_fail@plt+0x14f94>
   260b8:	mov	r0, #34	; 0x22
   260bc:	pop	{r4, r5, r6, pc}
   260c0:	sub	r4, r4, #1
   260c4:	mov	r1, r6
   260c8:	mov	r2, r4
   260cc:	mov	r0, r5
   260d0:	bl	10ed4 <memcpy@plt>
   260d4:	mov	r3, #0
   260d8:	strb	r3, [r5, r4]
   260dc:	mov	r0, #34	; 0x22
   260e0:	pop	{r4, r5, r6, pc}
   260e4:	add	r2, r0, #1
   260e8:	mov	r1, r6
   260ec:	mov	r0, r5
   260f0:	bl	10ed4 <memcpy@plt>
   260f4:	mov	r0, #0
   260f8:	pop	{r4, r5, r6, pc}
   260fc:	cmp	r4, #0
   26100:	beq	26110 <__assert_fail@plt+0x14fe4>
   26104:	strb	r6, [r5]
   26108:	mov	r0, #22
   2610c:	pop	{r4, r5, r6, pc}
   26110:	mov	r0, #22
   26114:	pop	{r4, r5, r6, pc}
   26118:	mov	r1, #0
   2611c:	b	110d8 <setlocale@plt>
   26120:	subs	r2, r1, #1
   26124:	bxeq	lr
   26128:	bcc	26300 <__assert_fail@plt+0x151d4>
   2612c:	cmp	r0, r1
   26130:	bls	262e4 <__assert_fail@plt+0x151b8>
   26134:	tst	r1, r2
   26138:	beq	262f0 <__assert_fail@plt+0x151c4>
   2613c:	clz	r3, r0
   26140:	clz	r2, r1
   26144:	sub	r3, r2, r3
   26148:	rsbs	r3, r3, #31
   2614c:	addne	r3, r3, r3, lsl #1
   26150:	mov	r2, #0
   26154:	addne	pc, pc, r3, lsl #2
   26158:	nop			; (mov r0, r0)
   2615c:	cmp	r0, r1, lsl #31
   26160:	adc	r2, r2, r2
   26164:	subcs	r0, r0, r1, lsl #31
   26168:	cmp	r0, r1, lsl #30
   2616c:	adc	r2, r2, r2
   26170:	subcs	r0, r0, r1, lsl #30
   26174:	cmp	r0, r1, lsl #29
   26178:	adc	r2, r2, r2
   2617c:	subcs	r0, r0, r1, lsl #29
   26180:	cmp	r0, r1, lsl #28
   26184:	adc	r2, r2, r2
   26188:	subcs	r0, r0, r1, lsl #28
   2618c:	cmp	r0, r1, lsl #27
   26190:	adc	r2, r2, r2
   26194:	subcs	r0, r0, r1, lsl #27
   26198:	cmp	r0, r1, lsl #26
   2619c:	adc	r2, r2, r2
   261a0:	subcs	r0, r0, r1, lsl #26
   261a4:	cmp	r0, r1, lsl #25
   261a8:	adc	r2, r2, r2
   261ac:	subcs	r0, r0, r1, lsl #25
   261b0:	cmp	r0, r1, lsl #24
   261b4:	adc	r2, r2, r2
   261b8:	subcs	r0, r0, r1, lsl #24
   261bc:	cmp	r0, r1, lsl #23
   261c0:	adc	r2, r2, r2
   261c4:	subcs	r0, r0, r1, lsl #23
   261c8:	cmp	r0, r1, lsl #22
   261cc:	adc	r2, r2, r2
   261d0:	subcs	r0, r0, r1, lsl #22
   261d4:	cmp	r0, r1, lsl #21
   261d8:	adc	r2, r2, r2
   261dc:	subcs	r0, r0, r1, lsl #21
   261e0:	cmp	r0, r1, lsl #20
   261e4:	adc	r2, r2, r2
   261e8:	subcs	r0, r0, r1, lsl #20
   261ec:	cmp	r0, r1, lsl #19
   261f0:	adc	r2, r2, r2
   261f4:	subcs	r0, r0, r1, lsl #19
   261f8:	cmp	r0, r1, lsl #18
   261fc:	adc	r2, r2, r2
   26200:	subcs	r0, r0, r1, lsl #18
   26204:	cmp	r0, r1, lsl #17
   26208:	adc	r2, r2, r2
   2620c:	subcs	r0, r0, r1, lsl #17
   26210:	cmp	r0, r1, lsl #16
   26214:	adc	r2, r2, r2
   26218:	subcs	r0, r0, r1, lsl #16
   2621c:	cmp	r0, r1, lsl #15
   26220:	adc	r2, r2, r2
   26224:	subcs	r0, r0, r1, lsl #15
   26228:	cmp	r0, r1, lsl #14
   2622c:	adc	r2, r2, r2
   26230:	subcs	r0, r0, r1, lsl #14
   26234:	cmp	r0, r1, lsl #13
   26238:	adc	r2, r2, r2
   2623c:	subcs	r0, r0, r1, lsl #13
   26240:	cmp	r0, r1, lsl #12
   26244:	adc	r2, r2, r2
   26248:	subcs	r0, r0, r1, lsl #12
   2624c:	cmp	r0, r1, lsl #11
   26250:	adc	r2, r2, r2
   26254:	subcs	r0, r0, r1, lsl #11
   26258:	cmp	r0, r1, lsl #10
   2625c:	adc	r2, r2, r2
   26260:	subcs	r0, r0, r1, lsl #10
   26264:	cmp	r0, r1, lsl #9
   26268:	adc	r2, r2, r2
   2626c:	subcs	r0, r0, r1, lsl #9
   26270:	cmp	r0, r1, lsl #8
   26274:	adc	r2, r2, r2
   26278:	subcs	r0, r0, r1, lsl #8
   2627c:	cmp	r0, r1, lsl #7
   26280:	adc	r2, r2, r2
   26284:	subcs	r0, r0, r1, lsl #7
   26288:	cmp	r0, r1, lsl #6
   2628c:	adc	r2, r2, r2
   26290:	subcs	r0, r0, r1, lsl #6
   26294:	cmp	r0, r1, lsl #5
   26298:	adc	r2, r2, r2
   2629c:	subcs	r0, r0, r1, lsl #5
   262a0:	cmp	r0, r1, lsl #4
   262a4:	adc	r2, r2, r2
   262a8:	subcs	r0, r0, r1, lsl #4
   262ac:	cmp	r0, r1, lsl #3
   262b0:	adc	r2, r2, r2
   262b4:	subcs	r0, r0, r1, lsl #3
   262b8:	cmp	r0, r1, lsl #2
   262bc:	adc	r2, r2, r2
   262c0:	subcs	r0, r0, r1, lsl #2
   262c4:	cmp	r0, r1, lsl #1
   262c8:	adc	r2, r2, r2
   262cc:	subcs	r0, r0, r1, lsl #1
   262d0:	cmp	r0, r1
   262d4:	adc	r2, r2, r2
   262d8:	subcs	r0, r0, r1
   262dc:	mov	r0, r2
   262e0:	bx	lr
   262e4:	moveq	r0, #1
   262e8:	movne	r0, #0
   262ec:	bx	lr
   262f0:	clz	r2, r1
   262f4:	rsb	r2, r2, #31
   262f8:	lsr	r0, r0, r2
   262fc:	bx	lr
   26300:	cmp	r0, #0
   26304:	mvnne	r0, #0
   26308:	b	265a8 <__assert_fail@plt+0x1547c>
   2630c:	cmp	r1, #0
   26310:	beq	26300 <__assert_fail@plt+0x151d4>
   26314:	push	{r0, r1, lr}
   26318:	bl	26120 <__assert_fail@plt+0x14ff4>
   2631c:	pop	{r1, r2, lr}
   26320:	mul	r3, r2, r0
   26324:	sub	r1, r1, r3
   26328:	bx	lr
   2632c:	cmp	r1, #0
   26330:	beq	2653c <__assert_fail@plt+0x15410>
   26334:	eor	ip, r0, r1
   26338:	rsbmi	r1, r1, #0
   2633c:	subs	r2, r1, #1
   26340:	beq	26508 <__assert_fail@plt+0x153dc>
   26344:	movs	r3, r0
   26348:	rsbmi	r3, r0, #0
   2634c:	cmp	r3, r1
   26350:	bls	26514 <__assert_fail@plt+0x153e8>
   26354:	tst	r1, r2
   26358:	beq	26524 <__assert_fail@plt+0x153f8>
   2635c:	clz	r2, r3
   26360:	clz	r0, r1
   26364:	sub	r2, r0, r2
   26368:	rsbs	r2, r2, #31
   2636c:	addne	r2, r2, r2, lsl #1
   26370:	mov	r0, #0
   26374:	addne	pc, pc, r2, lsl #2
   26378:	nop			; (mov r0, r0)
   2637c:	cmp	r3, r1, lsl #31
   26380:	adc	r0, r0, r0
   26384:	subcs	r3, r3, r1, lsl #31
   26388:	cmp	r3, r1, lsl #30
   2638c:	adc	r0, r0, r0
   26390:	subcs	r3, r3, r1, lsl #30
   26394:	cmp	r3, r1, lsl #29
   26398:	adc	r0, r0, r0
   2639c:	subcs	r3, r3, r1, lsl #29
   263a0:	cmp	r3, r1, lsl #28
   263a4:	adc	r0, r0, r0
   263a8:	subcs	r3, r3, r1, lsl #28
   263ac:	cmp	r3, r1, lsl #27
   263b0:	adc	r0, r0, r0
   263b4:	subcs	r3, r3, r1, lsl #27
   263b8:	cmp	r3, r1, lsl #26
   263bc:	adc	r0, r0, r0
   263c0:	subcs	r3, r3, r1, lsl #26
   263c4:	cmp	r3, r1, lsl #25
   263c8:	adc	r0, r0, r0
   263cc:	subcs	r3, r3, r1, lsl #25
   263d0:	cmp	r3, r1, lsl #24
   263d4:	adc	r0, r0, r0
   263d8:	subcs	r3, r3, r1, lsl #24
   263dc:	cmp	r3, r1, lsl #23
   263e0:	adc	r0, r0, r0
   263e4:	subcs	r3, r3, r1, lsl #23
   263e8:	cmp	r3, r1, lsl #22
   263ec:	adc	r0, r0, r0
   263f0:	subcs	r3, r3, r1, lsl #22
   263f4:	cmp	r3, r1, lsl #21
   263f8:	adc	r0, r0, r0
   263fc:	subcs	r3, r3, r1, lsl #21
   26400:	cmp	r3, r1, lsl #20
   26404:	adc	r0, r0, r0
   26408:	subcs	r3, r3, r1, lsl #20
   2640c:	cmp	r3, r1, lsl #19
   26410:	adc	r0, r0, r0
   26414:	subcs	r3, r3, r1, lsl #19
   26418:	cmp	r3, r1, lsl #18
   2641c:	adc	r0, r0, r0
   26420:	subcs	r3, r3, r1, lsl #18
   26424:	cmp	r3, r1, lsl #17
   26428:	adc	r0, r0, r0
   2642c:	subcs	r3, r3, r1, lsl #17
   26430:	cmp	r3, r1, lsl #16
   26434:	adc	r0, r0, r0
   26438:	subcs	r3, r3, r1, lsl #16
   2643c:	cmp	r3, r1, lsl #15
   26440:	adc	r0, r0, r0
   26444:	subcs	r3, r3, r1, lsl #15
   26448:	cmp	r3, r1, lsl #14
   2644c:	adc	r0, r0, r0
   26450:	subcs	r3, r3, r1, lsl #14
   26454:	cmp	r3, r1, lsl #13
   26458:	adc	r0, r0, r0
   2645c:	subcs	r3, r3, r1, lsl #13
   26460:	cmp	r3, r1, lsl #12
   26464:	adc	r0, r0, r0
   26468:	subcs	r3, r3, r1, lsl #12
   2646c:	cmp	r3, r1, lsl #11
   26470:	adc	r0, r0, r0
   26474:	subcs	r3, r3, r1, lsl #11
   26478:	cmp	r3, r1, lsl #10
   2647c:	adc	r0, r0, r0
   26480:	subcs	r3, r3, r1, lsl #10
   26484:	cmp	r3, r1, lsl #9
   26488:	adc	r0, r0, r0
   2648c:	subcs	r3, r3, r1, lsl #9
   26490:	cmp	r3, r1, lsl #8
   26494:	adc	r0, r0, r0
   26498:	subcs	r3, r3, r1, lsl #8
   2649c:	cmp	r3, r1, lsl #7
   264a0:	adc	r0, r0, r0
   264a4:	subcs	r3, r3, r1, lsl #7
   264a8:	cmp	r3, r1, lsl #6
   264ac:	adc	r0, r0, r0
   264b0:	subcs	r3, r3, r1, lsl #6
   264b4:	cmp	r3, r1, lsl #5
   264b8:	adc	r0, r0, r0
   264bc:	subcs	r3, r3, r1, lsl #5
   264c0:	cmp	r3, r1, lsl #4
   264c4:	adc	r0, r0, r0
   264c8:	subcs	r3, r3, r1, lsl #4
   264cc:	cmp	r3, r1, lsl #3
   264d0:	adc	r0, r0, r0
   264d4:	subcs	r3, r3, r1, lsl #3
   264d8:	cmp	r3, r1, lsl #2
   264dc:	adc	r0, r0, r0
   264e0:	subcs	r3, r3, r1, lsl #2
   264e4:	cmp	r3, r1, lsl #1
   264e8:	adc	r0, r0, r0
   264ec:	subcs	r3, r3, r1, lsl #1
   264f0:	cmp	r3, r1
   264f4:	adc	r0, r0, r0
   264f8:	subcs	r3, r3, r1
   264fc:	cmp	ip, #0
   26500:	rsbmi	r0, r0, #0
   26504:	bx	lr
   26508:	teq	ip, r0
   2650c:	rsbmi	r0, r0, #0
   26510:	bx	lr
   26514:	movcc	r0, #0
   26518:	asreq	r0, ip, #31
   2651c:	orreq	r0, r0, #1
   26520:	bx	lr
   26524:	clz	r2, r1
   26528:	rsb	r2, r2, #31
   2652c:	cmp	ip, #0
   26530:	lsr	r0, r3, r2
   26534:	rsbmi	r0, r0, #0
   26538:	bx	lr
   2653c:	cmp	r0, #0
   26540:	mvngt	r0, #-2147483648	; 0x80000000
   26544:	movlt	r0, #-2147483648	; 0x80000000
   26548:	b	265a8 <__assert_fail@plt+0x1547c>
   2654c:	cmp	r1, #0
   26550:	beq	2653c <__assert_fail@plt+0x15410>
   26554:	push	{r0, r1, lr}
   26558:	bl	26334 <__assert_fail@plt+0x15208>
   2655c:	pop	{r1, r2, lr}
   26560:	mul	r3, r2, r0
   26564:	sub	r1, r1, r3
   26568:	bx	lr
   2656c:	cmp	r3, #0
   26570:	cmpeq	r2, #0
   26574:	bne	2658c <__assert_fail@plt+0x15460>
   26578:	cmp	r1, #0
   2657c:	cmpeq	r0, #0
   26580:	mvnne	r1, #0
   26584:	mvnne	r0, #0
   26588:	b	265a8 <__assert_fail@plt+0x1547c>
   2658c:	sub	sp, sp, #8
   26590:	push	{sp, lr}
   26594:	bl	265b8 <__assert_fail@plt+0x1548c>
   26598:	ldr	lr, [sp, #4]
   2659c:	add	sp, sp, #8
   265a0:	pop	{r2, r3}
   265a4:	bx	lr
   265a8:	push	{r1, lr}
   265ac:	mov	r0, #8
   265b0:	bl	10e68 <raise@plt>
   265b4:	pop	{r1, pc}
   265b8:	cmp	r1, r3
   265bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   265c0:	cmpeq	r0, r2
   265c4:	mov	r4, r0
   265c8:	mov	r5, r1
   265cc:	ldr	r9, [sp, #28]
   265d0:	movcc	r0, #0
   265d4:	movcc	r1, #0
   265d8:	bcc	266d0 <__assert_fail@plt+0x155a4>
   265dc:	cmp	r3, #0
   265e0:	clzeq	ip, r2
   265e4:	clzne	ip, r3
   265e8:	addeq	ip, ip, #32
   265ec:	cmp	r5, #0
   265f0:	clzeq	r1, r4
   265f4:	addeq	r1, r1, #32
   265f8:	clzne	r1, r5
   265fc:	sub	ip, ip, r1
   26600:	sub	lr, ip, #32
   26604:	lsl	r7, r3, ip
   26608:	rsb	r8, ip, #32
   2660c:	orr	r7, r7, r2, lsl lr
   26610:	orr	r7, r7, r2, lsr r8
   26614:	lsl	r6, r2, ip
   26618:	cmp	r5, r7
   2661c:	cmpeq	r4, r6
   26620:	movcc	r0, #0
   26624:	movcc	r1, #0
   26628:	bcc	26644 <__assert_fail@plt+0x15518>
   2662c:	mov	r3, #1
   26630:	subs	r4, r4, r6
   26634:	lsl	r1, r3, lr
   26638:	lsl	r0, r3, ip
   2663c:	orr	r1, r1, r3, lsr r8
   26640:	sbc	r5, r5, r7
   26644:	cmp	ip, #0
   26648:	beq	266d0 <__assert_fail@plt+0x155a4>
   2664c:	lsrs	r3, r7, #1
   26650:	rrx	r2, r6
   26654:	mov	r6, ip
   26658:	b	2667c <__assert_fail@plt+0x15550>
   2665c:	subs	r4, r4, r2
   26660:	sbc	r5, r5, r3
   26664:	adds	r4, r4, r4
   26668:	adc	r5, r5, r5
   2666c:	adds	r4, r4, #1
   26670:	adc	r5, r5, #0
   26674:	subs	r6, r6, #1
   26678:	beq	26698 <__assert_fail@plt+0x1556c>
   2667c:	cmp	r5, r3
   26680:	cmpeq	r4, r2
   26684:	bcs	2665c <__assert_fail@plt+0x15530>
   26688:	adds	r4, r4, r4
   2668c:	adc	r5, r5, r5
   26690:	subs	r6, r6, #1
   26694:	bne	2667c <__assert_fail@plt+0x15550>
   26698:	lsr	r6, r4, ip
   2669c:	lsr	r7, r5, ip
   266a0:	orr	r6, r6, r5, lsl r8
   266a4:	adds	r2, r0, r4
   266a8:	orr	r6, r6, r5, lsr lr
   266ac:	adc	r3, r1, r5
   266b0:	lsl	r1, r7, ip
   266b4:	orr	r1, r1, r6, lsl lr
   266b8:	lsl	r0, r6, ip
   266bc:	orr	r1, r1, r6, lsr r8
   266c0:	subs	r0, r2, r0
   266c4:	mov	r4, r6
   266c8:	mov	r5, r7
   266cc:	sbc	r1, r3, r1
   266d0:	cmp	r9, #0
   266d4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   266d8:	strd	r4, [r9]
   266dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   266e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   266e4:	mov	r7, r0
   266e8:	ldr	r6, [pc, #72]	; 26738 <__assert_fail@plt+0x1560c>
   266ec:	ldr	r5, [pc, #72]	; 2673c <__assert_fail@plt+0x15610>
   266f0:	add	r6, pc, r6
   266f4:	add	r5, pc, r5
   266f8:	sub	r6, r6, r5
   266fc:	mov	r8, r1
   26700:	mov	r9, r2
   26704:	bl	10e30 <calloc@plt-0x20>
   26708:	asrs	r6, r6, #2
   2670c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   26710:	mov	r4, #0
   26714:	add	r4, r4, #1
   26718:	ldr	r3, [r5], #4
   2671c:	mov	r2, r9
   26720:	mov	r1, r8
   26724:	mov	r0, r7
   26728:	blx	r3
   2672c:	cmp	r6, r4
   26730:	bne	26714 <__assert_fail@plt+0x155e8>
   26734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26738:	andeq	r4, r1, r8, lsl r8
   2673c:	andeq	r4, r1, r0, lsl r8
   26740:	bx	lr
   26744:	ldr	r3, [pc, #12]	; 26758 <__assert_fail@plt+0x1562c>
   26748:	mov	r1, #0
   2674c:	add	r3, pc, r3
   26750:	ldr	r2, [r3]
   26754:	b	11048 <__cxa_atexit@plt>
   26758:			; <UNDEFINED> instruction: 0x000149b8

Disassembly of section .fini:

0002675c <.fini>:
   2675c:	push	{r3, lr}
   26760:	pop	{r3, pc}
