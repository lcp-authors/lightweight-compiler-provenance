
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_printer:     file format elf32-littlearm


Disassembly of section .init:

000123e8 <.init>:
   123e8:	push	{r3, lr}
   123ec:	bl	125fc <_start@@Base+0x3c>
   123f0:	pop	{r3, pc}

Disassembly of section .plt:

000123f4 <raise@plt-0x14>:
   123f4:	push	{lr}		; (str lr, [sp, #-4]!)
   123f8:	ldr	lr, [pc, #4]	; 12404 <raise@plt-0x4>
   123fc:	add	lr, pc, lr
   12400:	ldr	pc, [lr, #8]!
   12404:	strdeq	r9, [r1], -ip

00012408 <raise@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #102400	; 0x19000
   12410:	ldr	pc, [ip, #3068]!	; 0xbfc

00012414 <strcmp@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #102400	; 0x19000
   1241c:	ldr	pc, [ip, #3060]!	; 0xbf4

00012420 <fopen@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #102400	; 0x19000
   12428:	ldr	pc, [ip, #3052]!	; 0xbec

0001242c <memmove@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #102400	; 0x19000
   12434:	ldr	pc, [ip, #3044]!	; 0xbe4

00012438 <free@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #102400	; 0x19000
   12440:	ldr	pc, [ip, #3036]!	; 0xbdc

00012444 <memcpy@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #102400	; 0x19000
   1244c:	ldr	pc, [ip, #3028]!	; 0xbd4

00012450 <ftell@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #102400	; 0x19000
   12458:	ldr	pc, [ip, #3020]!	; 0xbcc

0001245c <memcmp@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #102400	; 0x19000
   12464:	ldr	pc, [ip, #3012]!	; 0xbc4

00012468 <rewind@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #102400	; 0x19000
   12470:	ldr	pc, [ip, #3004]!	; 0xbbc

00012474 <realloc@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #102400	; 0x19000
   1247c:	ldr	pc, [ip, #2996]!	; 0xbb4

00012480 <fwrite@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #102400	; 0x19000
   12488:	ldr	pc, [ip, #2988]!	; 0xbac

0001248c <fread@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #102400	; 0x19000
   12494:	ldr	pc, [ip, #2980]!	; 0xba4

00012498 <puts@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #102400	; 0x19000
   124a0:	ldr	pc, [ip, #2972]!	; 0xb9c

000124a4 <malloc@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #102400	; 0x19000
   124ac:	ldr	pc, [ip, #2964]!	; 0xb94

000124b0 <__libc_start_main@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #102400	; 0x19000
   124b8:	ldr	pc, [ip, #2956]!	; 0xb8c

000124bc <__gmon_start__@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #102400	; 0x19000
   124c4:	ldr	pc, [ip, #2948]!	; 0xb84

000124c8 <exit@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #102400	; 0x19000
   124d0:	ldr	pc, [ip, #2940]!	; 0xb7c

000124d4 <fprintf@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #102400	; 0x19000
   124dc:	ldr	pc, [ip, #2932]!	; 0xb74

000124e0 <memset@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #102400	; 0x19000
   124e8:	ldr	pc, [ip, #2924]!	; 0xb6c

000124ec <strncpy@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #102400	; 0x19000
   124f4:	ldr	pc, [ip, #2916]!	; 0xb64

000124f8 <fclose@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #102400	; 0x19000
   12500:	ldr	pc, [ip, #2908]!	; 0xb5c

00012504 <sprintf@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #102400	; 0x19000
   1250c:	ldr	pc, [ip, #2900]!	; 0xb54

00012510 <fseek@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #102400	; 0x19000
   12518:	ldr	pc, [ip, #2892]!	; 0xb4c

0001251c <fputs@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #102400	; 0x19000
   12524:	ldr	pc, [ip, #2884]!	; 0xb44

00012528 <abort@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #102400	; 0x19000
   12530:	ldr	pc, [ip, #2876]!	; 0xb3c

00012534 <__assert_fail@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #102400	; 0x19000
   1253c:	ldr	pc, [ip, #2868]!	; 0xb34

Disassembly of section .text:

00012540 <main@@Base>:
   12540:	push	{r4, r5, r6, lr}
   12544:	mov	r5, r0
   12548:	mov	r4, r1
   1254c:	ldr	r6, [pc, #88]	; 125ac <main@@Base+0x6c>
   12550:	ldr	r0, [pc, #88]	; 125b0 <main@@Base+0x70>
   12554:	ldr	r1, [r6]
   12558:	bl	1251c <fputs@plt>
   1255c:	cmp	r5, #1
   12560:	cmpne	r5, #4
   12564:	beq	1257c <main@@Base+0x3c>
   12568:	ldr	r0, [pc, #68]	; 125b4 <main@@Base+0x74>
   1256c:	ldr	r1, [r6]
   12570:	bl	1251c <fputs@plt>
   12574:	mov	r0, #1
   12578:	bl	124c8 <exit@plt>
   1257c:	cmp	r5, #4
   12580:	bne	125a4 <main@@Base+0x64>
   12584:	ldr	r3, [pc, #44]	; 125b8 <main@@Base+0x78>
   12588:	ldr	r2, [r4, #4]
   1258c:	str	r2, [r3]
   12590:	ldr	r3, [pc, #36]	; 125bc <main@@Base+0x7c>
   12594:	ldr	r2, [r4, #8]
   12598:	str	r2, [r3, #4]
   1259c:	ldr	r2, [r4, #12]
   125a0:	str	r2, [r3]
   125a4:	pop	{r4, r5, r6, lr}
   125a8:	b	136a0 <test_print@@Base>
   125ac:	andeq	ip, r2, r8, lsl #1
   125b0:	muleq	r1, r7, r0
   125b4:	strheq	fp, [r1], -r0
   125b8:	muleq	r2, r4, r0
   125bc:	andeq	ip, r2, r0, lsl #1

000125c0 <_start@@Base>:
   125c0:	mov	fp, #0
   125c4:	mov	lr, #0
   125c8:	pop	{r1}		; (ldr r1, [sp], #4)
   125cc:	mov	r2, sp
   125d0:	push	{r2}		; (str r2, [sp, #-4]!)
   125d4:	push	{r0}		; (str r0, [sp, #-4]!)
   125d8:	ldr	ip, [pc, #16]	; 125f0 <_start@@Base+0x30>
   125dc:	push	{ip}		; (str ip, [sp, #-4]!)
   125e0:	ldr	r0, [pc, #12]	; 125f4 <_start@@Base+0x34>
   125e4:	ldr	r3, [pc, #12]	; 125f8 <_start@@Base+0x38>
   125e8:	bl	124b0 <__libc_start_main@plt>
   125ec:	bl	12528 <abort@plt>
   125f0:	andeq	sl, r1, r0, asr #21
   125f4:	andeq	r2, r1, r0, asr #10
   125f8:	andeq	sl, r1, r0, ror #20
   125fc:	ldr	r3, [pc, #20]	; 12618 <_start@@Base+0x58>
   12600:	ldr	r2, [pc, #20]	; 1261c <_start@@Base+0x5c>
   12604:	add	r3, pc, r3
   12608:	ldr	r2, [r3, r2]
   1260c:	cmp	r2, #0
   12610:	bxeq	lr
   12614:	b	124bc <__gmon_start__@plt>
   12618:	strdeq	r9, [r1], -r4
   1261c:	andeq	r0, r0, r4, ror r0
   12620:	ldr	r0, [pc, #24]	; 12640 <_start@@Base+0x80>
   12624:	ldr	r3, [pc, #24]	; 12644 <_start@@Base+0x84>
   12628:	cmp	r3, r0
   1262c:	bxeq	lr
   12630:	ldr	r3, [pc, #16]	; 12648 <_start@@Base+0x88>
   12634:	cmp	r3, #0
   12638:	bxeq	lr
   1263c:	bx	r3
   12640:	andeq	ip, r2, r8, lsl #1
   12644:	andeq	ip, r2, r8, lsl #1
   12648:	andeq	r0, r0, r0
   1264c:	ldr	r0, [pc, #36]	; 12678 <_start@@Base+0xb8>
   12650:	ldr	r1, [pc, #36]	; 1267c <_start@@Base+0xbc>
   12654:	sub	r1, r1, r0
   12658:	asr	r1, r1, #2
   1265c:	add	r1, r1, r1, lsr #31
   12660:	asrs	r1, r1, #1
   12664:	bxeq	lr
   12668:	ldr	r3, [pc, #16]	; 12680 <_start@@Base+0xc0>
   1266c:	cmp	r3, #0
   12670:	bxeq	lr
   12674:	bx	r3
   12678:	andeq	ip, r2, r8, lsl #1
   1267c:	andeq	ip, r2, r8, lsl #1
   12680:	andeq	r0, r0, r0
   12684:	push	{r4, lr}
   12688:	ldr	r4, [pc, #24]	; 126a8 <_start@@Base+0xe8>
   1268c:	ldrb	r3, [r4]
   12690:	cmp	r3, #0
   12694:	popne	{r4, pc}
   12698:	bl	12620 <_start@@Base+0x60>
   1269c:	mov	r3, #1
   126a0:	strb	r3, [r4]
   126a4:	pop	{r4, pc}
   126a8:	muleq	r2, r0, r0
   126ac:	b	1264c <_start@@Base+0x8c>
   126b0:	bx	lr
   126b4:	ldr	r3, [pc, #108]	; 12728 <_start@@Base+0x168>
   126b8:	mov	r2, #0
   126bc:	push	{r0, r1, r4, r5, r6, lr}
   126c0:	mov	r4, r0
   126c4:	mov	r5, r1
   126c8:	mov	r6, #22
   126cc:	str	r3, [sp, #4]
   126d0:	mov	r3, #21
   126d4:	str	r3, [sp]
   126d8:	ldr	r3, [pc, #76]	; 1272c <_start@@Base+0x16c>
   126dc:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   126e0:	ldr	r3, [pc, #72]	; 12730 <_start@@Base+0x170>
   126e4:	mov	r1, r5
   126e8:	mov	r0, r4
   126ec:	mov	r2, #1
   126f0:	str	r6, [sp]
   126f4:	str	r3, [sp, #4]
   126f8:	ldr	r3, [pc, #52]	; 12734 <_start@@Base+0x174>
   126fc:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   12700:	ldr	r3, [pc, #48]	; 12738 <_start@@Base+0x178>
   12704:	mov	r2, #2
   12708:	mov	r1, r5
   1270c:	mov	r0, r4
   12710:	str	r6, [sp]
   12714:	str	r3, [sp, #4]
   12718:	ldr	r3, [pc, #28]	; 1273c <_start@@Base+0x17c>
   1271c:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   12720:	add	sp, sp, #8
   12724:	pop	{r4, r5, r6, pc}
   12728:	andeq	r2, r1, r8, lsr #16
   1272c:	strdeq	sl, [r1], -r4
   12730:	andeq	r2, r1, r8, asr #15
   12734:	andeq	sl, r1, sl, lsl #24
   12738:	andeq	r2, r1, r8, ror #14
   1273c:	andeq	sl, r1, r1, lsr #24
   12740:	mov	r3, #19
   12744:	push	{r0, r1, r2, lr}
   12748:	mov	r2, #0
   1274c:	str	r3, [sp]
   12750:	ldr	r3, [pc, #12]	; 12764 <_start@@Base+0x1a4>
   12754:	str	r2, [sp, #4]
   12758:	bl	162bc <flatcc_json_printer_int32_field@@Base>
   1275c:	add	sp, sp, #12
   12760:	pop	{pc}		; (ldr pc, [sp], #4)
   12764:	andeq	sl, r1, r8, lsr ip
   12768:	push	{r4, r5, lr}
   1276c:	mov	r2, #0
   12770:	sub	sp, sp, #20
   12774:	mov	r3, #0
   12778:	mov	r4, r0
   1277c:	mov	r5, r1
   12780:	strd	r2, [sp, #8]
   12784:	mov	r3, #15
   12788:	str	r3, [sp]
   1278c:	ldr	r3, [pc, #44]	; 127c0 <_start@@Base+0x200>
   12790:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   12794:	mov	r3, #0
   12798:	mov	r2, #1
   1279c:	mov	r1, r5
   127a0:	mov	r0, r4
   127a4:	str	r3, [sp, #4]
   127a8:	mov	r3, #21
   127ac:	str	r3, [sp]
   127b0:	ldr	r3, [pc, #12]	; 127c4 <_start@@Base+0x204>
   127b4:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   127b8:	add	sp, sp, #20
   127bc:	pop	{r4, r5, pc}
   127c0:	andeq	sl, r1, ip, asr #24
   127c4:	andeq	sl, r1, ip, asr ip
   127c8:	push	{r4, r5, lr}
   127cc:	mov	r2, #0
   127d0:	sub	sp, sp, #20
   127d4:	mov	r3, #0
   127d8:	mov	r4, r0
   127dc:	mov	r5, r1
   127e0:	strd	r2, [sp, #8]
   127e4:	mov	r3, #15
   127e8:	str	r3, [sp]
   127ec:	ldr	r3, [pc, #44]	; 12820 <_start@@Base+0x260>
   127f0:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   127f4:	mov	r3, #0
   127f8:	mov	r2, #1
   127fc:	mov	r1, r5
   12800:	mov	r0, r4
   12804:	str	r3, [sp, #4]
   12808:	mov	r3, #16
   1280c:	str	r3, [sp]
   12810:	ldr	r3, [pc, #12]	; 12824 <_start@@Base+0x264>
   12814:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   12818:	add	sp, sp, #20
   1281c:	pop	{r4, r5, pc}
   12820:	andeq	sl, r1, ip, asr #24
   12824:	andeq	sl, r1, r2, ror ip
   12828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1282c:	mov	r7, #4
   12830:	sub	sp, sp, #20
   12834:	mov	fp, #0
   12838:	mov	sl, #9
   1283c:	mov	r4, r0
   12840:	mov	r5, r1
   12844:	ldr	r3, [pc, #232]	; 12934 <_start@@Base+0x374>
   12848:	mov	r2, #0
   1284c:	mov	r6, #8
   12850:	str	r7, [sp]
   12854:	mov	r8, #0
   12858:	mov	r9, #0
   1285c:	bl	15cb8 <flatcc_json_printer_string_field@@Base>
   12860:	mov	r1, r5
   12864:	mov	r0, r4
   12868:	ldr	r3, [pc, #200]	; 12938 <_start@@Base+0x378>
   1286c:	mov	r2, #1
   12870:	strd	sl, [sp]
   12874:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   12878:	mov	r1, r5
   1287c:	mov	r0, r4
   12880:	ldr	r3, [pc, #180]	; 1293c <_start@@Base+0x37c>
   12884:	mov	r2, #2
   12888:	str	r7, [sp]
   1288c:	bl	15cb8 <flatcc_json_printer_string_field@@Base>
   12890:	mov	r1, r5
   12894:	mov	r0, r4
   12898:	ldr	r3, [pc, #160]	; 12940 <_start@@Base+0x380>
   1289c:	mov	r2, #3
   128a0:	str	r6, [sp]
   128a4:	strd	r8, [sp, #8]
   128a8:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   128ac:	mov	r2, r7
   128b0:	mov	r1, r5
   128b4:	ldr	r3, [pc, #136]	; 12944 <_start@@Base+0x384>
   128b8:	mov	r0, r4
   128bc:	str	r7, [sp]
   128c0:	bl	15cb8 <flatcc_json_printer_string_field@@Base>
   128c4:	mov	r1, r5
   128c8:	mov	r0, r4
   128cc:	ldr	r3, [pc, #116]	; 12948 <_start@@Base+0x388>
   128d0:	mov	r2, #5
   128d4:	str	r6, [sp]
   128d8:	strd	r8, [sp, #8]
   128dc:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   128e0:	mov	r1, r5
   128e4:	mov	r0, r4
   128e8:	ldr	r3, [pc, #92]	; 1294c <_start@@Base+0x38c>
   128ec:	mov	r2, #6
   128f0:	strd	sl, [sp]
   128f4:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   128f8:	mov	r1, r5
   128fc:	mov	r0, r4
   12900:	ldr	r3, [pc, #72]	; 12950 <_start@@Base+0x390>
   12904:	mov	r2, #7
   12908:	str	r6, [sp]
   1290c:	strd	r8, [sp, #8]
   12910:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   12914:	ldr	r3, [pc, #56]	; 12954 <_start@@Base+0x394>
   12918:	mov	r2, r6
   1291c:	mov	r1, r5
   12920:	mov	r0, r4
   12924:	strd	sl, [sp]
   12928:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   1292c:	add	sp, sp, #20
   12930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12934:	andeq	sl, r1, r3, lsl #25
   12938:	andeq	sl, r1, r8, lsl #25
   1293c:	muleq	r1, r2, ip
   12940:	muleq	r1, r7, ip
   12944:	andeq	sl, r1, r0, lsr #25
   12948:	andeq	sl, r1, r5, lsr #25
   1294c:	andeq	sl, r1, lr, lsr #25
   12950:			; <UNDEFINED> instruction: 0x0001acb8
   12954:	andeq	sl, r1, r1, asr #25
   12958:	ldr	r3, [pc, #1080]	; 12d98 <_start@@Base+0x7d8>
   1295c:	mov	r2, #0
   12960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12964:	mov	r6, #3
   12968:	sub	sp, sp, #20
   1296c:	mov	r4, r0
   12970:	mov	r5, r1
   12974:	mov	r7, #4
   12978:	mov	r8, #9
   1297c:	str	r6, [sp]
   12980:	mov	r9, #5
   12984:	mov	fp, #8
   12988:	str	r3, [sp, #4]
   1298c:	ldr	r3, [pc, #1032]	; 12d9c <_start@@Base+0x7dc>
   12990:	bl	1a1e4 <flatcc_json_printer_struct_field@@Base>
   12994:	mov	r3, #150	; 0x96
   12998:	mov	r1, r5
   1299c:	str	r7, [sp]
   129a0:	mov	r0, r4
   129a4:	mov	r2, #1
   129a8:	ldr	sl, [pc, #1008]	; 12da0 <_start@@Base+0x7e0>
   129ac:	str	r3, [sp, #4]
   129b0:	ldr	r3, [pc, #1004]	; 12da4 <_start@@Base+0x7e4>
   129b4:	bl	16214 <flatcc_json_printer_int16_field@@Base>
   129b8:	mov	r2, #2
   129bc:	mov	r3, #100	; 0x64
   129c0:	mov	r1, r5
   129c4:	mov	r0, r4
   129c8:	strd	r2, [sp]
   129cc:	ldr	r3, [pc, #980]	; 12da8 <_start@@Base+0x7e8>
   129d0:	bl	16214 <flatcc_json_printer_int16_field@@Base>
   129d4:	mov	r2, r6
   129d8:	mov	r1, r5
   129dc:	ldr	r3, [pc, #968]	; 12dac <_start@@Base+0x7ec>
   129e0:	mov	r0, r4
   129e4:	str	r7, [sp]
   129e8:	mov	r6, #17
   129ec:	bl	15cb8 <flatcc_json_printer_string_field@@Base>
   129f0:	mov	r1, r5
   129f4:	mov	r0, r4
   129f8:	ldr	r3, [pc, #944]	; 12db0 <_start@@Base+0x7f0>
   129fc:	mov	r2, #5
   12a00:	str	r8, [sp]
   12a04:	bl	175dc <flatcc_json_printer_uint8_vector_field@@Base>
   12a08:	ldr	r3, [pc, #932]	; 12db4 <_start@@Base+0x7f4>
   12a0c:	mov	r1, r5
   12a10:	mov	r0, r4
   12a14:	mov	r2, #6
   12a18:	stm	sp, {r9, fp}
   12a1c:	str	r3, [sp, #8]
   12a20:	ldr	r3, [pc, #912]	; 12db8 <_start@@Base+0x7f8>
   12a24:	bl	16970 <flatcc_json_printer_int8_enum_field@@Base>
   12a28:	ldr	r3, [pc, #908]	; 12dbc <_start@@Base+0x7fc>
   12a2c:	mov	r2, fp
   12a30:	mov	r1, r5
   12a34:	mov	r0, r4
   12a38:	str	r7, [sp]
   12a3c:	str	r3, [sp, #8]
   12a40:	ldr	r3, [pc, #888]	; 12dc0 <_start@@Base+0x800>
   12a44:	str	r3, [sp, #4]
   12a48:	ldr	r3, [pc, #884]	; 12dc4 <_start@@Base+0x804>
   12a4c:	bl	19e94 <flatcc_json_printer_union_field@@Base>
   12a50:	ldr	r3, [pc, #880]	; 12dc8 <_start@@Base+0x808>
   12a54:	mov	r2, r8
   12a58:	mov	r1, r5
   12a5c:	mov	r0, r4
   12a60:	str	r9, [sp]
   12a64:	str	r7, [sp, #4]
   12a68:	str	r3, [sp, #8]
   12a6c:	ldr	r3, [pc, #856]	; 12dcc <_start@@Base+0x80c>
   12a70:	bl	19640 <flatcc_json_printer_struct_vector_field@@Base>
   12a74:	mov	r1, r5
   12a78:	mov	r0, r4
   12a7c:	ldr	r3, [pc, #844]	; 12dd0 <_start@@Base+0x810>
   12a80:	mov	r2, #10
   12a84:	str	r6, [sp]
   12a88:	bl	1989c <flatcc_json_printer_string_vector_field@@Base>
   12a8c:	mov	r1, r5
   12a90:	mov	r0, r4
   12a94:	ldr	r3, [pc, #824]	; 12dd4 <_start@@Base+0x814>
   12a98:	mov	r2, #11
   12a9c:	stm	sp, {r6, sl}
   12aa0:	bl	19a30 <flatcc_json_printer_table_vector_field@@Base>
   12aa4:	mov	r1, r5
   12aa8:	mov	r0, r4
   12aac:	ldr	r3, [pc, #804]	; 12dd8 <_start@@Base+0x818>
   12ab0:	mov	r2, #12
   12ab4:	stm	sp, {r9, sl}
   12ab8:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   12abc:	mov	r2, #20
   12ac0:	mov	r1, r5
   12ac4:	ldr	r3, [pc, #784]	; 12ddc <_start@@Base+0x81c>
   12ac8:	mov	r0, r4
   12acc:	str	sl, [sp, #8]
   12ad0:	mov	sl, #0
   12ad4:	str	r2, [sp]
   12ad8:	mov	r2, #13
   12adc:	str	sl, [sp, #4]
   12ae0:	bl	1a550 <flatcc_json_printer_table_as_nested_root@@Base>
   12ae4:	ldr	r3, [pc, #756]	; 12de0 <_start@@Base+0x820>
   12ae8:	mov	r1, r5
   12aec:	mov	r0, r4
   12af0:	mov	r2, #14
   12af4:	str	r8, [sp]
   12af8:	mov	r8, #16
   12afc:	str	r3, [sp, #4]
   12b00:	ldr	r3, [pc, #732]	; 12de4 <_start@@Base+0x824>
   12b04:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   12b08:	mov	r3, #1
   12b0c:	mov	r1, r5
   12b10:	str	fp, [sp]
   12b14:	mov	r0, r4
   12b18:	mov	r2, #15
   12b1c:	str	r3, [sp, #4]
   12b20:	ldr	r3, [pc, #704]	; 12de8 <_start@@Base+0x828>
   12b24:	bl	16418 <flatcc_json_printer_bool_field@@Base>
   12b28:	mov	r2, r8
   12b2c:	mov	r1, r5
   12b30:	ldr	r3, [pc, #692]	; 12dec <_start@@Base+0x82c>
   12b34:	mov	r0, r4
   12b38:	stm	sp, {r8, sl}
   12b3c:	bl	162bc <flatcc_json_printer_int32_field@@Base>
   12b40:	mov	r2, r6
   12b44:	mov	r1, r5
   12b48:	ldr	r3, [pc, #672]	; 12df0 <_start@@Base+0x830>
   12b4c:	mov	r0, r4
   12b50:	stm	sp, {r8, sl}
   12b54:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   12b58:	mov	r2, #0
   12b5c:	mov	r3, #0
   12b60:	str	r8, [sp]
   12b64:	mov	r1, r5
   12b68:	mov	r0, r4
   12b6c:	strd	r2, [sp, #8]
   12b70:	mov	r2, #18
   12b74:	ldr	r3, [pc, #632]	; 12df4 <_start@@Base+0x834>
   12b78:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   12b7c:	mov	r2, #0
   12b80:	mov	r3, #0
   12b84:	str	r8, [sp]
   12b88:	mov	r1, r5
   12b8c:	mov	r0, r4
   12b90:	strd	r2, [sp, #8]
   12b94:	mov	r2, #19
   12b98:	ldr	r3, [pc, #600]	; 12df8 <_start@@Base+0x838>
   12b9c:	bl	160b8 <flatcc_json_printer_uint64_field@@Base>
   12ba0:	mov	r1, r5
   12ba4:	mov	r0, r4
   12ba8:	ldr	r3, [pc, #588]	; 12dfc <_start@@Base+0x83c>
   12bac:	mov	r2, #20
   12bb0:	stm	sp, {r6, sl}
   12bb4:	bl	162bc <flatcc_json_printer_int32_field@@Base>
   12bb8:	mov	r1, r5
   12bbc:	mov	r0, r4
   12bc0:	ldr	r3, [pc, #568]	; 12e00 <_start@@Base+0x840>
   12bc4:	mov	r2, #21
   12bc8:	stm	sp, {r6, sl}
   12bcc:	bl	16010 <flatcc_json_printer_uint32_field@@Base>
   12bd0:	mov	r2, #0
   12bd4:	mov	r3, #0
   12bd8:	str	r6, [sp]
   12bdc:	mov	r1, r5
   12be0:	mov	r0, r4
   12be4:	strd	r2, [sp, #8]
   12be8:	mov	r2, #22
   12bec:	ldr	r3, [pc, #528]	; 12e04 <_start@@Base+0x844>
   12bf0:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   12bf4:	mov	r2, #0
   12bf8:	mov	r3, #0
   12bfc:	str	r6, [sp]
   12c00:	mov	r1, r5
   12c04:	mov	r0, r4
   12c08:	strd	r2, [sp, #8]
   12c0c:	mov	r2, #23
   12c10:	ldr	r3, [pc, #496]	; 12e08 <_start@@Base+0x848>
   12c14:	bl	160b8 <flatcc_json_printer_uint64_field@@Base>
   12c18:	mov	r1, r5
   12c1c:	mov	r0, r4
   12c20:	ldr	r3, [pc, #484]	; 12e0c <_start@@Base+0x84c>
   12c24:	mov	r2, #24
   12c28:	str	r8, [sp]
   12c2c:	mov	r8, #6
   12c30:	bl	182c0 <flatcc_json_printer_bool_vector_field@@Base>
   12c34:	mov	r1, r5
   12c38:	mov	r0, r4
   12c3c:	vldr	s0, [pc, #328]	; 12d8c <_start@@Base+0x7cc>
   12c40:	mov	r2, #25
   12c44:	str	r9, [sp]
   12c48:	ldr	r3, [pc, #448]	; 12e10 <_start@@Base+0x850>
   12c4c:	bl	164c0 <flatcc_json_printer_float_field@@Base>
   12c50:	mov	r1, r5
   12c54:	mov	r0, r4
   12c58:	vldr	s0, [pc, #304]	; 12d90 <_start@@Base+0x7d0>
   12c5c:	mov	r2, #26
   12c60:	str	r8, [sp]
   12c64:	ldr	r3, [pc, #424]	; 12e14 <_start@@Base+0x854>
   12c68:	bl	164c0 <flatcc_json_printer_float_field@@Base>
   12c6c:	vldr	s0, [pc, #288]	; 12d94 <_start@@Base+0x7d4>
   12c70:	mov	r1, r5
   12c74:	mov	r0, r4
   12c78:	mov	r2, #27
   12c7c:	str	r8, [sp]
   12c80:	ldr	r3, [pc, #400]	; 12e18 <_start@@Base+0x858>
   12c84:	bl	164c0 <flatcc_json_printer_float_field@@Base>
   12c88:	mov	r3, #18
   12c8c:	mov	r1, r5
   12c90:	mov	r0, r4
   12c94:	mov	r2, #28
   12c98:	str	r3, [sp]
   12c9c:	ldr	r3, [pc, #376]	; 12e1c <_start@@Base+0x85c>
   12ca0:	bl	1989c <flatcc_json_printer_string_vector_field@@Base>
   12ca4:	ldr	r3, [pc, #372]	; 12e20 <_start@@Base+0x860>
   12ca8:	mov	r1, r5
   12cac:	mov	r0, r4
   12cb0:	mov	r2, #29
   12cb4:	str	fp, [sp, #4]
   12cb8:	str	r3, [sp, #8]
   12cbc:	mov	r3, #23
   12cc0:	str	r3, [sp]
   12cc4:	ldr	r3, [pc, #344]	; 12e24 <_start@@Base+0x864>
   12cc8:	bl	19640 <flatcc_json_printer_struct_vector_field@@Base>
   12ccc:	mov	r1, r5
   12cd0:	mov	r0, r4
   12cd4:	ldr	r3, [pc, #332]	; 12e28 <_start@@Base+0x868>
   12cd8:	mov	r2, #30
   12cdc:	str	r7, [sp]
   12ce0:	bl	175dc <flatcc_json_printer_uint8_vector_field@@Base>
   12ce4:	ldr	r3, [pc, #220]	; 12dc8 <_start@@Base+0x808>
   12ce8:	mov	r1, r5
   12cec:	mov	r0, r4
   12cf0:	mov	r2, #31
   12cf4:	str	r9, [sp]
   12cf8:	str	r7, [sp, #4]
   12cfc:	str	r3, [sp, #8]
   12d00:	ldr	r3, [pc, #292]	; 12e2c <_start@@Base+0x86c>
   12d04:	bl	19640 <flatcc_json_printer_struct_vector_field@@Base>
   12d08:	mov	r3, #15
   12d0c:	mov	r1, r5
   12d10:	mov	r0, r4
   12d14:	mov	r2, #32
   12d18:	str	r3, [sp]
   12d1c:	ldr	r3, [pc, #268]	; 12e30 <_start@@Base+0x870>
   12d20:	bl	18124 <flatcc_json_printer_int64_vector_field@@Base>
   12d24:	mov	r1, r5
   12d28:	mov	r0, r4
   12d2c:	ldr	r3, [pc, #256]	; 12e34 <_start@@Base+0x874>
   12d30:	mov	r2, #33	; 0x21
   12d34:	str	r6, [sp]
   12d38:	bl	18600 <flatcc_json_printer_double_vector_field@@Base>
   12d3c:	ldr	r3, [pc, #244]	; 12e38 <_start@@Base+0x878>
   12d40:	mov	r1, r5
   12d44:	mov	r0, r4
   12d48:	mov	r2, #34	; 0x22
   12d4c:	str	r3, [sp, #4]
   12d50:	mov	r3, #21
   12d54:	str	r3, [sp]
   12d58:	ldr	r3, [pc, #220]	; 12e3c <_start@@Base+0x87c>
   12d5c:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   12d60:	ldr	r3, [pc, #216]	; 12e40 <_start@@Base+0x880>
   12d64:	mov	r2, #35	; 0x23
   12d68:	mov	r1, r5
   12d6c:	mov	r0, r4
   12d70:	str	r3, [sp, #4]
   12d74:	mov	r3, #10
   12d78:	str	r3, [sp]
   12d7c:	ldr	r3, [pc, #192]	; 12e44 <_start@@Base+0x884>
   12d80:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   12d84:	add	sp, sp, #20
   12d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d8c:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   12d90:	submi	r0, r0, r0
   12d94:	andeq	r0, r0, r0
   12d98:	andeq	r3, r1, r4, ror #8
   12d9c:	andeq	sl, r1, fp, asr #25
   12da0:	andeq	r2, r1, r8, asr r9
   12da4:	andeq	sl, r1, pc, asr #25
   12da8:	ldrdeq	sl, [r1], -r4
   12dac:	ldrdeq	sl, [r1], -r7
   12db0:	ldrdeq	sl, [r1], -ip
   12db4:	andeq	r3, r1, r8, lsr #7
   12db8:	andeq	sl, r1, r6, ror #25
   12dbc:	strdeq	r2, [r1], -r0
   12dc0:	andeq	r3, r1, ip, asr r5
   12dc4:	andeq	sl, r1, lr, asr lr
   12dc8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12dcc:	andeq	sl, r1, ip, ror #25
   12dd0:	strdeq	sl, [r1], -r2
   12dd4:	andeq	sl, r1, r4, lsl #26
   12dd8:	andeq	sl, r1, r6, lsl sp
   12ddc:	andeq	sl, r1, ip, lsl sp
   12de0:	andeq	r2, r1, ip, lsl pc
   12de4:	andeq	sl, r1, r1, lsr sp
   12de8:	andeq	sl, r1, fp, lsr sp
   12dec:	andeq	sl, r1, r4, asr #26
   12df0:	andeq	sl, r1, r5, asr sp
   12df4:	andeq	sl, r1, r6, ror #26
   12df8:	andeq	sl, r1, r7, ror sp
   12dfc:	andeq	sl, r1, r8, lsl #27
   12e00:	muleq	r1, sl, sp
   12e04:	andeq	sl, r1, ip, lsr #27
   12e08:			; <UNDEFINED> instruction: 0x0001adbe
   12e0c:	ldrdeq	sl, [r1], -r0
   12e10:	andeq	sl, r1, r1, ror #27
   12e14:	andeq	sl, r1, r7, ror #27
   12e18:	andeq	sl, r1, lr, ror #27
   12e1c:	strdeq	sl, [r1], -r5
   12e20:			; <UNDEFINED> instruction: 0x00012ebc
   12e24:	andeq	sl, r1, r8, lsl #28
   12e28:	andeq	sl, r1, r0, lsr #28
   12e2c:	andeq	sl, r1, r5, lsr #28
   12e30:	andeq	sl, r1, fp, lsr #28
   12e34:	andeq	sl, r1, fp, lsr lr
   12e38:			; <UNDEFINED> instruction: 0x000126b0
   12e3c:	andeq	sl, r1, sp, asr #28
   12e40:	andeq	r2, r1, r8, asr #28
   12e44:	andeq	sl, r1, r3, ror #28
   12e48:	push	{r0, r1, r4, r5, r6, lr}
   12e4c:	mov	r3, #4
   12e50:	mov	r4, #0
   12e54:	mov	r2, r4
   12e58:	mov	r5, r0
   12e5c:	mov	r6, r1
   12e60:	stm	sp, {r3, r4}
   12e64:	ldr	r3, [pc, #68]	; 12eb0 <_start@@Base+0x8f0>
   12e68:	bl	15d2c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   12e6c:	mov	r2, #1
   12e70:	mov	r3, #7
   12e74:	mov	r1, r6
   12e78:	mov	r0, r5
   12e7c:	str	r3, [sp]
   12e80:	ldr	r3, [pc, #44]	; 12eb4 <_start@@Base+0x8f4>
   12e84:	str	r2, [sp, #4]
   12e88:	bl	15d2c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   12e8c:	mov	r3, #6
   12e90:	mov	r2, #2
   12e94:	mov	r1, r6
   12e98:	mov	r0, r5
   12e9c:	stm	sp, {r3, r4}
   12ea0:	ldr	r3, [pc, #16]	; 12eb8 <_start@@Base+0x8f8>
   12ea4:	bl	15d2c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   12ea8:	add	sp, sp, #8
   12eac:	pop	{r4, r5, r6, pc}
   12eb0:	andeq	fp, r1, fp, lsl r0
   12eb4:	andeq	sl, r1, lr, ror #28
   12eb8:	andeq	sl, r1, r6, ror lr
   12ebc:	mov	r3, #2
   12ec0:	push	{r0, r1, r2, r4, r5, lr}
   12ec4:	mov	r4, r1
   12ec8:	mov	r2, r1
   12ecc:	mov	r5, r0
   12ed0:	str	r3, [sp, #4]
   12ed4:	ldr	r3, [pc, #56]	; 12f14 <_start@@Base+0x954>
   12ed8:	str	r3, [sp]
   12edc:	mov	r3, #0
   12ee0:	mov	r1, r3
   12ee4:	bl	16e38 <flatcc_json_printer_uint32_struct_field@@Base>
   12ee8:	mov	r3, #8
   12eec:	mov	r2, r4
   12ef0:	mov	r1, #1
   12ef4:	mov	r0, r5
   12ef8:	str	r3, [sp, #4]
   12efc:	ldr	r3, [pc, #20]	; 12f18 <_start@@Base+0x958>
   12f00:	str	r3, [sp]
   12f04:	mov	r3, #4
   12f08:	bl	16e38 <flatcc_json_printer_uint32_struct_field@@Base>
   12f0c:	add	sp, sp, #12
   12f10:	pop	{r4, r5, pc}
   12f14:	andeq	sl, r1, sp, ror lr
   12f18:	andeq	sl, r1, r0, lsl #29
   12f1c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12f20:	mov	r6, #2
   12f24:	mov	r2, #0
   12f28:	mov	r4, r0
   12f2c:	mov	r5, r1
   12f30:	ldr	r3, [pc, #88]	; 12f90 <_start@@Base+0x9d0>
   12f34:	str	r6, [sp]
   12f38:	bl	15cb8 <flatcc_json_printer_string_field@@Base>
   12f3c:	mov	r2, #0
   12f40:	mov	r3, #0
   12f44:	mov	r1, r5
   12f48:	mov	r0, r4
   12f4c:	strd	r2, [sp, #8]
   12f50:	mov	r3, #3
   12f54:	mov	r2, #1
   12f58:	str	r3, [sp]
   12f5c:	ldr	r3, [pc, #48]	; 12f94 <_start@@Base+0x9d4>
   12f60:	bl	16364 <flatcc_json_printer_int64_field@@Base>
   12f64:	mov	r3, #0
   12f68:	mov	r2, r6
   12f6c:	mov	r1, r5
   12f70:	mov	r0, r4
   12f74:	str	r3, [sp, #4]
   12f78:	mov	r3, #5
   12f7c:	str	r3, [sp]
   12f80:	ldr	r3, [pc, #16]	; 12f98 <_start@@Base+0x9d8>
   12f84:	bl	15f68 <flatcc_json_printer_uint16_field@@Base>
   12f88:	add	sp, sp, #16
   12f8c:	pop	{r4, r5, r6, pc}
   12f90:	andeq	sl, r1, sp, ror lr
   12f94:	andeq	sl, r1, r9, lsl #29
   12f98:	andeq	sl, r1, sp, lsl #29
   12f9c:	ldr	r3, [pc, #68]	; 12fe8 <_start@@Base+0xa28>
   12fa0:	mov	r2, r1
   12fa4:	push	{r0, r1, r4, r5, r6, lr}
   12fa8:	mov	r4, #1
   12fac:	mov	r5, r1
   12fb0:	mov	r6, r0
   12fb4:	stm	sp, {r3, r4}
   12fb8:	mov	r3, #0
   12fbc:	mov	r1, r3
   12fc0:	bl	16f38 <flatcc_json_printer_int16_struct_field@@Base>
   12fc4:	ldr	r3, [pc, #32]	; 12fec <_start@@Base+0xa2c>
   12fc8:	mov	r2, r5
   12fcc:	mov	r1, r4
   12fd0:	mov	r0, r6
   12fd4:	stm	sp, {r3, r4}
   12fd8:	mov	r3, #2
   12fdc:	bl	16ee4 <flatcc_json_printer_int8_struct_field@@Base>
   12fe0:	add	sp, sp, #8
   12fe4:	pop	{r4, r5, r6, pc}
   12fe8:	muleq	r1, r8, sp
   12fec:	muleq	r1, r5, ip
   12ff0:	ldrb	r3, [r1, #8]
   12ff4:	sub	r3, r3, #1
   12ff8:	cmp	r3, #3
   12ffc:	ldrls	pc, [pc, r3, lsl #2]
   13000:	b	13034 <_start@@Base+0xa74>
   13004:	andeq	r3, r1, r4, lsl r0
   13008:	andeq	r3, r1, ip, lsl r0
   1300c:	andeq	r3, r1, r4, lsr #32
   13010:	andeq	r3, r1, ip, lsr #32
   13014:	ldr	r2, [pc, #28]	; 13038 <_start@@Base+0xa78>
   13018:	b	1a078 <flatcc_json_printer_union_table@@Base>
   1301c:	ldr	r2, [pc, #24]	; 1303c <_start@@Base+0xa7c>
   13020:	b	13018 <_start@@Base+0xa58>
   13024:	ldr	r2, [pc, #20]	; 13040 <_start@@Base+0xa80>
   13028:	b	13018 <_start@@Base+0xa58>
   1302c:	ldr	r2, [pc, #16]	; 13044 <_start@@Base+0xa84>
   13030:	b	13018 <_start@@Base+0xa58>
   13034:	bx	lr
   13038:	andeq	r2, r1, r8, asr r9
   1303c:	andeq	r3, r1, r0, lsl r3
   13040:	muleq	r1, ip, r6
   13044:	andeq	r3, r1, r8, asr #32
   13048:	ldr	r3, [pc, #124]	; 130cc <_start@@Base+0xb0c>
   1304c:	mov	r2, #0
   13050:	push	{r4, r5, lr}
   13054:	sub	sp, sp, #20
   13058:	mov	r4, r0
   1305c:	mov	r5, r1
   13060:	str	r3, [sp, #4]
   13064:	mov	r3, #6
   13068:	str	r3, [sp]
   1306c:	ldr	r3, [pc, #92]	; 130d0 <_start@@Base+0xb10>
   13070:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   13074:	ldr	r3, [pc, #88]	; 130d4 <_start@@Base+0xb14>
   13078:	mov	r1, r5
   1307c:	mov	r0, r4
   13080:	mov	r2, #1
   13084:	str	r3, [sp, #4]
   13088:	mov	r3, #5
   1308c:	str	r3, [sp]
   13090:	ldr	r3, [pc, #64]	; 130d8 <_start@@Base+0xb18>
   13094:	bl	19e14 <flatcc_json_printer_table_field@@Base>
   13098:	ldr	r3, [pc, #60]	; 130dc <_start@@Base+0xb1c>
   1309c:	mov	r2, #3
   130a0:	mov	r1, r5
   130a4:	mov	r0, r4
   130a8:	str	r3, [sp, #8]
   130ac:	ldr	r3, [pc, #44]	; 130e0 <_start@@Base+0xb20>
   130b0:	str	r3, [sp, #4]
   130b4:	mov	r3, #7
   130b8:	str	r3, [sp]
   130bc:	ldr	r3, [pc, #32]	; 130e4 <_start@@Base+0xb24>
   130c0:	bl	19b60 <flatcc_json_printer_union_vector_field@@Base>
   130c4:	add	sp, sp, #20
   130c8:	pop	{r4, r5, pc}
   130cc:			; <UNDEFINED> instruction: 0x000126b4
   130d0:	muleq	r1, r3, lr
   130d4:	andeq	r3, r1, r8, ror #1
   130d8:	muleq	r1, sl, lr
   130dc:	strdeq	r2, [r1], -r0
   130e0:	andeq	r3, r1, ip, asr r5
   130e4:	andeq	sl, r1, r0, lsr #29
   130e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   130ec:	mov	r3, #14
   130f0:	sub	sp, sp, #20
   130f4:	mov	r9, #10
   130f8:	mov	r6, r0
   130fc:	mov	r7, r1
   13100:	mov	r8, #9
   13104:	ldr	r5, [pc, #136]	; 13194 <_start@@Base+0xbd4>
   13108:	mov	r2, #1
   1310c:	ldr	r4, [pc, #132]	; 13198 <_start@@Base+0xbd8>
   13110:	stm	sp, {r3, r4, r5}
   13114:	ldr	r3, [pc, #128]	; 1319c <_start@@Base+0xbdc>
   13118:	bl	19e94 <flatcc_json_printer_union_field@@Base>
   1311c:	mov	r1, r7
   13120:	mov	r0, r6
   13124:	ldr	r3, [pc, #116]	; 131a0 <_start@@Base+0xbe0>
   13128:	mov	r2, #3
   1312c:	str	r9, [sp]
   13130:	strd	r4, [sp, #4]
   13134:	bl	19e94 <flatcc_json_printer_union_field@@Base>
   13138:	mov	r1, r7
   1313c:	mov	r0, r6
   13140:	ldr	r3, [pc, #92]	; 131a4 <_start@@Base+0xbe4>
   13144:	mov	r2, #5
   13148:	str	r8, [sp]
   1314c:	strd	r4, [sp, #4]
   13150:	bl	19e94 <flatcc_json_printer_union_field@@Base>
   13154:	mov	r3, #5
   13158:	mov	r1, r7
   1315c:	mov	r0, r6
   13160:	mov	r2, #7
   13164:	stm	sp, {r3, r4, r5}
   13168:	ldr	r3, [pc, #56]	; 131a8 <_start@@Base+0xbe8>
   1316c:	bl	19e94 <flatcc_json_printer_union_field@@Base>
   13170:	ldr	r3, [pc, #52]	; 131ac <_start@@Base+0xbec>
   13174:	mov	r2, r8
   13178:	mov	r1, r7
   1317c:	mov	r0, r6
   13180:	str	r9, [sp]
   13184:	strd	r4, [sp, #4]
   13188:	bl	19b60 <flatcc_json_printer_union_vector_field@@Base>
   1318c:	add	sp, sp, #20
   13190:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13194:			; <UNDEFINED> instruction: 0x000131b0
   13198:	andeq	r3, r1, ip, ror r2
   1319c:	andeq	sl, r1, r8, lsr #29
   131a0:			; <UNDEFINED> instruction: 0x0001aeb7
   131a4:	andeq	sl, r1, r2, asr #29
   131a8:	andeq	sl, r1, ip, asr #29
   131ac:	ldrdeq	sl, [r1], -r2
   131b0:	ldrb	r3, [r1, #8]
   131b4:	mov	ip, r0
   131b8:	mov	r2, r1
   131bc:	cmp	r3, #10
   131c0:	bhi	131e4 <_start@@Base+0xc24>
   131c4:	cmp	r3, #9
   131c8:	bcs	13208 <_start@@Base+0xc48>
   131cc:	cmp	r3, #2
   131d0:	beq	13200 <_start@@Base+0xc40>
   131d4:	cmp	r3, #8
   131d8:	bxne	lr
   131dc:	ldr	r2, [pc, #44]	; 13210 <_start@@Base+0xc50>
   131e0:	b	1a098 <flatcc_json_printer_union_struct@@Base>
   131e4:	cmp	r3, #11
   131e8:	beq	131f4 <_start@@Base+0xc34>
   131ec:	cmp	r3, #255	; 0xff
   131f0:	bxne	lr
   131f4:	mov	r1, r2
   131f8:	mov	r0, ip
   131fc:	b	1a11c <flatcc_json_printer_union_string@@Base>
   13200:	ldr	r2, [pc, #12]	; 13214 <_start@@Base+0xc54>
   13204:	b	1a078 <flatcc_json_printer_union_table@@Base>
   13208:	ldr	r2, [pc, #8]	; 13218 <_start@@Base+0xc58>
   1320c:	b	131e0 <_start@@Base+0xc20>
   13210:	andeq	r3, r1, ip, asr #4
   13214:	andeq	r2, r1, r0, asr #14
   13218:	andeq	r3, r1, ip, lsl r2
   1321c:	mov	r3, #10
   13220:	push	{r0, r1, r2, lr}
   13224:	mov	r2, r1
   13228:	str	r3, [sp, #4]
   1322c:	ldr	r3, [pc, #20]	; 13248 <_start@@Base+0xc88>
   13230:	str	r3, [sp]
   13234:	mov	r3, #0
   13238:	mov	r1, r3
   1323c:	bl	16f8c <flatcc_json_printer_int32_struct_field@@Base>
   13240:	add	sp, sp, #12
   13244:	pop	{pc}		; (ldr pc, [sp], #4)
   13248:	ldrdeq	sl, [r1], -sp
   1324c:	mov	r3, #11
   13250:	push	{r0, r1, r2, lr}
   13254:	mov	r2, r1
   13258:	str	r3, [sp, #4]
   1325c:	ldr	r3, [pc, #20]	; 13278 <_start@@Base+0xcb8>
   13260:	str	r3, [sp]
   13264:	mov	r3, #0
   13268:	mov	r1, r3
   1326c:	bl	16de4 <flatcc_json_printer_uint16_struct_field@@Base>
   13270:	add	sp, sp, #12
   13274:	pop	{pc}		; (ldr pc, [sp], #4)
   13278:	andeq	sl, r1, r8, ror #29
   1327c:	cmp	r1, #9
   13280:	mov	r2, r1
   13284:	mov	r3, r0
   13288:	moveq	r2, #5
   1328c:	ldreq	r1, [pc, #96]	; 132f4 <_start@@Base+0xd34>
   13290:	beq	132f0 <_start@@Base+0xd30>
   13294:	bhi	132c4 <_start@@Base+0xd04>
   13298:	cmp	r2, #2
   1329c:	moveq	r2, #5
   132a0:	ldreq	r1, [pc, #80]	; 132f8 <_start@@Base+0xd38>
   132a4:	beq	132f0 <_start@@Base+0xd30>
   132a8:	cmp	r2, #8
   132ac:	ldreq	r1, [pc, #72]	; 132fc <_start@@Base+0xd3c>
   132b0:	beq	132f0 <_start@@Base+0xd30>
   132b4:	mov	r2, #4
   132b8:	mov	r0, r3
   132bc:	ldr	r1, [pc, #60]	; 13300 <_start@@Base+0xd40>
   132c0:	b	132f0 <_start@@Base+0xd30>
   132c4:	cmp	r2, #11
   132c8:	moveq	r2, #5
   132cc:	ldreq	r1, [pc, #48]	; 13304 <_start@@Base+0xd44>
   132d0:	beq	132f0 <_start@@Base+0xd30>
   132d4:	movcc	r2, #7
   132d8:	ldrcc	r1, [pc, #40]	; 13308 <_start@@Base+0xd48>
   132dc:	bcc	132f0 <_start@@Base+0xd30>
   132e0:	cmp	r2, #255	; 0xff
   132e4:	moveq	r2, #6
   132e8:	ldreq	r1, [pc, #28]	; 1330c <_start@@Base+0xd4c>
   132ec:	bne	132b4 <_start@@Base+0xcf4>
   132f0:	b	15c48 <flatcc_json_printer_enum@@Base>
   132f4:	andeq	sl, r1, r3, lsl #30
   132f8:	strdeq	sl, [r1], -r4
   132fc:	strdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   13300:	andeq	sl, r1, lr, lsl pc
   13304:	andeq	sl, r1, r1, lsl pc
   13308:	andeq	sl, r1, r9, lsl #30
   1330c:	andeq	sl, r1, r7, lsl pc
   13310:	push	{r4, r5, r6, r7, lr}
   13314:	mov	r3, #5
   13318:	sub	sp, sp, #20
   1331c:	mov	r4, #2
   13320:	mov	r2, #0
   13324:	mov	r5, r0
   13328:	mov	r6, r1
   1332c:	ldr	r7, [pc, #96]	; 13394 <_start@@Base+0xdd4>
   13330:	stm	sp, {r3, r4, r7}
   13334:	ldr	r3, [pc, #92]	; 13398 <_start@@Base+0xdd8>
   13338:	bl	16970 <flatcc_json_printer_int8_enum_field@@Base>
   1333c:	mov	r3, #6
   13340:	mov	r1, r6
   13344:	mov	r0, r5
   13348:	mov	r2, #1
   1334c:	stm	sp, {r3, r4, r7}
   13350:	ldr	r3, [pc, #68]	; 1339c <_start@@Base+0xddc>
   13354:	bl	16970 <flatcc_json_printer_int8_enum_field@@Base>
   13358:	mov	r2, r4
   1335c:	mov	r1, r6
   13360:	ldr	r3, [pc, #56]	; 133a0 <_start@@Base+0xde0>
   13364:	mov	r0, r5
   13368:	str	r4, [sp]
   1336c:	str	r4, [sp, #4]
   13370:	bl	15ec0 <flatcc_json_printer_uint8_field@@Base>
   13374:	ldr	r3, [pc, #40]	; 133a4 <_start@@Base+0xde4>
   13378:	mov	r2, #3
   1337c:	mov	r1, r6
   13380:	mov	r0, r5
   13384:	stm	sp, {r2, r4}
   13388:	bl	15ec0 <flatcc_json_printer_uint8_field@@Base>
   1338c:	add	sp, sp, #20
   13390:	pop	{r4, r5, r6, r7, pc}
   13394:	andeq	r3, r1, r8, lsr #7
   13398:	andeq	sl, r1, r6, ror #25
   1339c:	andeq	sl, r1, r3, lsr #30
   133a0:	andeq	sl, r1, sl, lsr #30
   133a4:	andeq	sl, r1, sp, lsr #30
   133a8:	push	{r4, r5, r6, r7, r8, lr}
   133ac:	uxtb	r4, r1
   133b0:	tst	r4, #244	; 0xf4
   133b4:	movne	r6, #1
   133b8:	moveq	r6, #0
   133bc:	cmp	r4, #0
   133c0:	moveq	r6, #1
   133c4:	cmp	r6, #0
   133c8:	beq	133d4 <_start@@Base+0xe14>
   133cc:	pop	{r4, r5, r6, r7, r8, lr}
   133d0:	b	15b70 <flatcc_json_printer_int8@@Base>
   133d4:	sub	r3, r4, #1
   133d8:	mov	r5, r0
   133dc:	tst	r3, r4
   133e0:	movne	r7, #1
   133e4:	moveq	r7, #0
   133e8:	mov	r1, r7
   133ec:	bl	15c4c <flatcc_json_printer_delimit_enum_flags@@Base>
   133f0:	ands	r1, r4, #1
   133f4:	beq	13410 <_start@@Base+0xe50>
   133f8:	mov	r1, r6
   133fc:	mov	r3, #3
   13400:	ldr	r2, [pc, #80]	; 13458 <_start@@Base+0xe98>
   13404:	mov	r0, r5
   13408:	bl	15c80 <flatcc_json_printer_enum_flag@@Base>
   1340c:	mov	r1, #1
   13410:	tst	r4, #2
   13414:	beq	13430 <_start@@Base+0xe70>
   13418:	add	r6, r1, #1
   1341c:	mov	r3, #5
   13420:	ldr	r2, [pc, #52]	; 1345c <_start@@Base+0xe9c>
   13424:	mov	r0, r5
   13428:	bl	15c80 <flatcc_json_printer_enum_flag@@Base>
   1342c:	mov	r1, r6
   13430:	tst	r4, #8
   13434:	beq	13448 <_start@@Base+0xe88>
   13438:	mov	r3, #4
   1343c:	ldr	r2, [pc, #28]	; 13460 <_start@@Base+0xea0>
   13440:	mov	r0, r5
   13444:	bl	15c80 <flatcc_json_printer_enum_flag@@Base>
   13448:	mov	r1, r7
   1344c:	mov	r0, r5
   13450:	pop	{r4, r5, r6, r7, r8, lr}
   13454:	b	15c4c <flatcc_json_printer_delimit_enum_flags@@Base>
   13458:	andeq	sl, r1, r1, lsr pc
   1345c:	andeq	sl, r1, r5, lsr pc
   13460:	andeq	sl, r1, fp, lsr pc
   13464:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13468:	mov	r6, #1
   1346c:	mov	r4, r1
   13470:	mov	r2, r1
   13474:	mov	r5, r0
   13478:	ldr	r3, [pc, #188]	; 1353c <_start@@Base+0xf7c>
   1347c:	stm	sp, {r3, r6}
   13480:	mov	r3, #0
   13484:	mov	r1, r3
   13488:	bl	1708c <flatcc_json_printer_float_struct_field@@Base>
   1348c:	ldr	r3, [pc, #172]	; 13540 <_start@@Base+0xf80>
   13490:	mov	r2, r4
   13494:	mov	r1, r6
   13498:	mov	r0, r5
   1349c:	stm	sp, {r3, r6}
   134a0:	mov	r3, #4
   134a4:	bl	1708c <flatcc_json_printer_float_struct_field@@Base>
   134a8:	ldr	r3, [pc, #148]	; 13544 <_start@@Base+0xf84>
   134ac:	mov	r2, r4
   134b0:	mov	r0, r5
   134b4:	mov	r1, #2
   134b8:	stm	sp, {r3, r6}
   134bc:	mov	r3, #8
   134c0:	mov	r6, #5
   134c4:	bl	1708c <flatcc_json_printer_float_struct_field@@Base>
   134c8:	ldr	r3, [pc, #120]	; 13548 <_start@@Base+0xf88>
   134cc:	mov	r2, r4
   134d0:	mov	r0, r5
   134d4:	mov	r1, #3
   134d8:	stm	sp, {r3, r6}
   134dc:	mov	r3, #16
   134e0:	bl	170ec <flatcc_json_printer_double_struct_field@@Base>
   134e4:	ldr	r3, [pc, #96]	; 1354c <_start@@Base+0xf8c>
   134e8:	mov	r2, r4
   134ec:	mov	r0, r5
   134f0:	mov	r1, #4
   134f4:	str	r6, [sp, #4]
   134f8:	str	r3, [sp, #8]
   134fc:	ldr	r3, [pc, #76]	; 13550 <_start@@Base+0xf90>
   13500:	str	r3, [sp]
   13504:	mov	r3, #24
   13508:	bl	17354 <flatcc_json_printer_int8_enum_struct_field@@Base>
   1350c:	ldr	r3, [pc, #64]	; 13554 <_start@@Base+0xf94>
   13510:	mov	r2, r4
   13514:	mov	r1, r6
   13518:	mov	r0, r5
   1351c:	str	r6, [sp, #4]
   13520:	str	r3, [sp, #8]
   13524:	ldr	r3, [pc, #44]	; 13558 <_start@@Base+0xf98>
   13528:	str	r3, [sp]
   1352c:	mov	r3, #26
   13530:	bl	1a12c <flatcc_json_printer_embedded_struct_field@@Base>
   13534:	add	sp, sp, #16
   13538:	pop	{r4, r5, r6, pc}
   1353c:	andeq	sl, r1, r3, lsr #28
   13540:	andeq	sl, r1, sl, lsl sp
   13544:	andeq	sl, r1, r0, asr #30
   13548:	andeq	sl, r1, r2, asr #30
   1354c:	andeq	r3, r1, r8, lsr #7
   13550:	andeq	sl, r1, r8, asr #30
   13554:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13558:	andeq	sl, r1, lr, asr #30
   1355c:	sub	r1, r1, #1
   13560:	cmp	r1, #3
   13564:	ldrls	pc, [pc, r1, lsl #2]
   13568:	b	135ac <_start@@Base+0xfec>
   1356c:	andeq	r3, r1, ip, ror r5
   13570:	andeq	r3, r1, r8, lsl #11
   13574:	muleq	r1, r4, r5
   13578:	andeq	r3, r1, r0, lsr #11
   1357c:	ldr	r1, [pc, #52]	; 135b8 <_start@@Base+0xff8>
   13580:	mov	r2, #7
   13584:	b	15c48 <flatcc_json_printer_enum@@Base>
   13588:	mov	r2, #23
   1358c:	ldr	r1, [pc, #40]	; 135bc <_start@@Base+0xffc>
   13590:	b	13584 <_start@@Base+0xfc4>
   13594:	mov	r2, #8
   13598:	ldr	r1, [pc, #32]	; 135c0 <_start@@Base+0x1000>
   1359c:	b	13584 <_start@@Base+0xfc4>
   135a0:	mov	r2, #3
   135a4:	ldr	r1, [pc, #24]	; 135c4 <_start@@Base+0x1004>
   135a8:	b	13584 <_start@@Base+0xfc4>
   135ac:	mov	r2, #4
   135b0:	ldr	r1, [pc, #16]	; 135c8 <_start@@Base+0x1008>
   135b4:	b	13584 <_start@@Base+0xfc4>
   135b8:	andeq	sl, r1, r4, asr pc
   135bc:	andeq	sl, r1, ip, asr pc
   135c0:	andeq	sl, r1, r4, ror pc
   135c4:	andeq	sl, r1, sp, ror pc
   135c8:	andeq	sl, r1, lr, lsl pc
   135cc:	push	{r4, r5, r6, r7, r8, lr}
   135d0:	mov	r8, r1
   135d4:	ldr	r1, [pc, #188]	; 13698 <_start@@Base+0x10d8>
   135d8:	bl	12420 <fopen@plt>
   135dc:	subs	r6, r0, #0
   135e0:	beq	13690 <_start@@Base+0x10d0>
   135e4:	mov	r2, #2
   135e8:	mov	r1, #0
   135ec:	bl	12510 <fseek@plt>
   135f0:	mov	r0, r6
   135f4:	bl	12450 <ftell@plt>
   135f8:	cmp	r0, #10240	; 0x2800
   135fc:	mov	r4, r0
   13600:	str	r0, [r8]
   13604:	bhi	1362c <_start@@Base+0x106c>
   13608:	mov	r0, r6
   1360c:	bl	12468 <rewind@plt>
   13610:	cmp	r4, #0
   13614:	movne	r0, r4
   13618:	moveq	r0, #1
   1361c:	bl	124a4 <malloc@plt>
   13620:	subs	r5, r0, #0
   13624:	movne	r7, #0
   13628:	bne	13658 <_start@@Base+0x1098>
   1362c:	mov	r5, #0
   13630:	mov	r0, r6
   13634:	bl	124f8 <fclose@plt>
   13638:	cmp	r5, #0
   1363c:	beq	13648 <_start@@Base+0x1088>
   13640:	mov	r0, r5
   13644:	bl	12438 <free@plt>
   13648:	mov	r5, #0
   1364c:	str	r4, [r8]
   13650:	b	13688 <_start@@Base+0x10c8>
   13654:	add	r7, r7, r0
   13658:	mov	r3, r6
   1365c:	sub	r2, r4, r7
   13660:	mov	r1, #1
   13664:	add	r0, r5, r7
   13668:	bl	1248c <fread@plt>
   1366c:	cmp	r0, #0
   13670:	bne	13654 <_start@@Base+0x1094>
   13674:	cmp	r4, r7
   13678:	bne	13630 <_start@@Base+0x1070>
   1367c:	mov	r0, r6
   13680:	bl	124f8 <fclose@plt>
   13684:	str	r4, [r8]
   13688:	mov	r0, r5
   1368c:	pop	{r4, r5, r6, r7, r8, pc}
   13690:	mov	r4, r6
   13694:	b	13648 <_start@@Base+0x1088>
   13698:	andeq	sl, r1, r1, lsl #31
   1369c:	bx	lr

000136a0 <test_print@@Base>:
   136a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136a4:	mov	r3, #0
   136a8:	sub	sp, sp, #72	; 0x48
   136ac:	ldr	r6, [pc, #512]	; 138b4 <test_print@@Base+0x214>
   136b0:	str	r3, [sp, #12]
   136b4:	ldr	r1, [pc, #508]	; 138b8 <test_print@@Base+0x218>
   136b8:	str	r3, [sp, #16]
   136bc:	str	r3, [sp, #20]
   136c0:	ldr	r0, [r6]
   136c4:	bl	12420 <fopen@plt>
   136c8:	subs	r5, r0, #0
   136cc:	ldr	r4, [pc, #488]	; 138bc <test_print@@Base+0x21c>
   136d0:	bne	136f4 <test_print@@Base+0x54>
   136d4:	ldr	r1, [pc, #484]	; 138c0 <test_print@@Base+0x220>
   136d8:	ldr	r0, [r4]
   136dc:	mvn	r4, #0
   136e0:	ldr	r2, [r6]
   136e4:	bl	124d4 <fprintf@plt>
   136e8:	mov	r0, r4
   136ec:	add	sp, sp, #72	; 0x48
   136f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136f4:	ldr	r9, [pc, #456]	; 138c4 <test_print@@Base+0x224>
   136f8:	mov	r1, r5
   136fc:	add	r0, sp, #24
   13700:	bl	1a604 <flatcc_json_printer_init@@Base>
   13704:	mov	sl, r6
   13708:	mov	r3, #2
   1370c:	strb	r3, [sp, #49]	; 0x31
   13710:	mov	r3, #1
   13714:	ldr	r6, [r9]
   13718:	strh	r3, [sp, #50]	; 0x32
   1371c:	cmp	r6, #0
   13720:	beq	13778 <test_print@@Base+0xd8>
   13724:	ldr	r1, [pc, #412]	; 138c8 <test_print@@Base+0x228>
   13728:	mov	r0, r6
   1372c:	bl	12414 <strcmp@plt>
   13730:	cmp	r0, #0
   13734:	beq	13778 <test_print@@Base+0xd8>
   13738:	mov	r0, r6
   1373c:	add	r1, sp, #12
   13740:	bl	135cc <_start@@Base+0x100c>
   13744:	subs	r6, r0, #0
   13748:	beq	13788 <test_print@@Base+0xe8>
   1374c:	add	r1, sp, #16
   13750:	ldr	r0, [sl, #4]
   13754:	bl	135cc <_start@@Base+0x100c>
   13758:	subs	r8, r0, #0
   1375c:	bne	137f8 <test_print@@Base+0x158>
   13760:	ldr	r1, [pc, #356]	; 138cc <test_print@@Base+0x22c>
   13764:	mov	r7, r8
   13768:	ldr	r0, [r4]
   1376c:	ldr	r2, [sl, #4]
   13770:	bl	124d4 <fprintf@plt>
   13774:	b	137a0 <test_print@@Base+0x100>
   13778:	mov	r3, #288	; 0x120
   1377c:	ldr	r6, [pc, #332]	; 138d0 <test_print@@Base+0x230>
   13780:	str	r3, [sp, #12]
   13784:	b	1374c <test_print@@Base+0xac>
   13788:	ldr	r1, [pc, #324]	; 138d4 <test_print@@Base+0x234>
   1378c:	mov	r7, r6
   13790:	mov	r8, r6
   13794:	ldr	r0, [r4]
   13798:	ldr	r2, [r9]
   1379c:	bl	124d4 <fprintf@plt>
   137a0:	mvn	r4, #0
   137a4:	add	r0, sp, #24
   137a8:	bl	1a7e0 <flatcc_json_printer_clear@@Base>
   137ac:	ldr	r3, [r9]
   137b0:	cmp	r3, #0
   137b4:	cmpne	r6, #0
   137b8:	beq	137c4 <test_print@@Base+0x124>
   137bc:	mov	r0, r6
   137c0:	bl	12438 <free@plt>
   137c4:	cmp	r8, #0
   137c8:	beq	137d4 <test_print@@Base+0x134>
   137cc:	mov	r0, r8
   137d0:	bl	12438 <free@plt>
   137d4:	cmp	r7, #0
   137d8:	beq	137e4 <test_print@@Base+0x144>
   137dc:	mov	r0, r7
   137e0:	bl	12438 <free@plt>
   137e4:	cmp	r5, #0
   137e8:	beq	136e8 <test_print@@Base+0x48>
   137ec:	mov	r0, r5
   137f0:	bl	124f8 <fclose@plt>
   137f4:	b	136e8 <test_print@@Base+0x48>
   137f8:	ldr	r3, [pc, #216]	; 138d8 <test_print@@Base+0x238>
   137fc:	mov	r1, r6
   13800:	add	r0, sp, #24
   13804:	ldr	r2, [sp, #12]
   13808:	str	r3, [sp]
   1380c:	ldr	r3, [pc, #200]	; 138dc <test_print@@Base+0x23c>
   13810:	bl	1a3b8 <flatcc_json_printer_table_as_root@@Base>
   13814:	mov	r1, #1
   13818:	add	r0, sp, #24
   1381c:	ldr	r3, [sp, #68]	; 0x44
   13820:	blx	r3
   13824:	ldr	r3, [sp, #60]	; 0x3c
   13828:	cmp	r3, #0
   1382c:	beq	13838 <test_print@@Base+0x198>
   13830:	ldr	r0, [pc, #168]	; 138e0 <test_print@@Base+0x240>
   13834:	bl	12498 <puts@plt>
   13838:	mov	r0, r5
   1383c:	bl	124f8 <fclose@plt>
   13840:	add	r1, sp, #20
   13844:	ldr	r0, [sl]
   13848:	bl	135cc <_start@@Base+0x100c>
   1384c:	subs	r7, r0, #0
   13850:	bne	1386c <test_print@@Base+0x1cc>
   13854:	ldr	r1, [pc, #136]	; 138e4 <test_print@@Base+0x244>
   13858:	ldr	r0, [r4]
   1385c:	ldr	r2, [sl]
   13860:	bl	124d4 <fprintf@plt>
   13864:	mov	r5, #0
   13868:	b	137a0 <test_print@@Base+0x100>
   1386c:	ldr	r3, [sp, #16]
   13870:	ldr	r2, [sp, #20]
   13874:	ldr	r5, [r4]
   13878:	cmp	r2, r3
   1387c:	bne	13890 <test_print@@Base+0x1f0>
   13880:	mov	r1, r8
   13884:	bl	1245c <memcmp@plt>
   13888:	subs	r4, r0, #0
   1388c:	beq	138a0 <test_print@@Base+0x200>
   13890:	mov	r1, r5
   13894:	ldr	r0, [pc, #76]	; 138e8 <test_print@@Base+0x248>
   13898:	bl	1251c <fputs@plt>
   1389c:	b	13864 <test_print@@Base+0x1c4>
   138a0:	mov	r1, r5
   138a4:	ldr	r0, [pc, #64]	; 138ec <test_print@@Base+0x24c>
   138a8:	mov	r5, r4
   138ac:	bl	1251c <fputs@plt>
   138b0:	b	137a4 <test_print@@Base+0x104>
   138b4:	andeq	ip, r2, r0, lsl #1
   138b8:	andeq	sl, r1, r4, lsl #31
   138bc:	andeq	ip, r2, r8, lsl #1
   138c0:	andeq	sl, r1, r7, lsl #31
   138c4:	muleq	r2, r4, r0
   138c8:	andeq	sl, r1, r7, lsr #31
   138cc:	ldrdeq	sl, [r1], -r3
   138d0:	ldrdeq	sl, [r1], -r4
   138d4:	andeq	sl, r1, r9, lsr #31
   138d8:	andeq	r2, r1, r8, asr r9
   138dc:	strdeq	sl, [r1], -lr
   138e0:	andeq	fp, r1, r3
   138e4:	andeq	fp, r1, r0, lsr #32
   138e8:	andeq	fp, r1, r5, asr #32
   138ec:	andeq	fp, r1, ip, ror r0
   138f0:	cmp	r0, #1000	; 0x3e8
   138f4:	push	{r4, r5, lr}
   138f8:	mov	r3, r0
   138fc:	bcc	13948 <test_print@@Base+0x2a8>
   13900:	movw	r0, #9999	; 0x270f
   13904:	cmp	r3, r0
   13908:	movhi	r0, #5
   1390c:	movls	r0, #4
   13910:	mov	ip, #0
   13914:	tst	r0, #1
   13918:	add	r2, r1, r0
   1391c:	strb	ip, [r1, r0]
   13920:	beq	139c8 <test_print@@Base+0x328>
   13924:	cmp	r0, #3
   13928:	beq	13994 <test_print@@Base+0x2f4>
   1392c:	cmp	r0, #5
   13930:	beq	13964 <test_print@@Base+0x2c4>
   13934:	cmp	r0, #1
   13938:	popne	{r4, r5, pc}
   1393c:	add	r3, r3, #48	; 0x30
   13940:	strb	r3, [r2, #-1]
   13944:	pop	{r4, r5, pc}
   13948:	cmp	r0, #99	; 0x63
   1394c:	movhi	r0, #3
   13950:	bhi	13910 <test_print@@Base+0x270>
   13954:	cmp	r3, #9
   13958:	movhi	r0, #2
   1395c:	movls	r0, #1
   13960:	b	13910 <test_print@@Base+0x270>
   13964:	mov	ip, #100	; 0x64
   13968:	ldr	lr, [pc, #192]	; 13a30 <test_print@@Base+0x390>
   1396c:	udiv	r4, r3, ip
   13970:	mls	ip, ip, r4, r3
   13974:	uxth	r3, r4
   13978:	uxth	ip, ip
   1397c:	add	r5, lr, ip, lsl #1
   13980:	ldrb	ip, [lr, ip, lsl #1]
   13984:	strb	ip, [r2, #-2]
   13988:	ldrb	ip, [r5, #1]
   1398c:	strb	ip, [r2, #-1]
   13990:	add	r2, r1, #3
   13994:	mov	r1, #100	; 0x64
   13998:	ldr	ip, [pc, #144]	; 13a30 <test_print@@Base+0x390>
   1399c:	sub	r2, r2, #2
   139a0:	udiv	lr, r3, r1
   139a4:	mls	r1, r1, lr, r3
   139a8:	uxth	r3, lr
   139ac:	uxth	r1, r1
   139b0:	add	r4, ip, r1, lsl #1
   139b4:	ldrb	r1, [ip, r1, lsl #1]
   139b8:	strb	r1, [r2]
   139bc:	ldrb	r1, [r4, #1]
   139c0:	strb	r1, [r2, #1]
   139c4:	b	1393c <test_print@@Base+0x29c>
   139c8:	cmp	r0, #2
   139cc:	beq	13a08 <test_print@@Base+0x368>
   139d0:	cmp	r0, #4
   139d4:	popne	{r4, r5, pc}
   139d8:	mov	ip, #100	; 0x64
   139dc:	ldr	lr, [pc, #76]	; 13a30 <test_print@@Base+0x390>
   139e0:	udiv	r4, r3, ip
   139e4:	mls	ip, ip, r4, r3
   139e8:	uxth	r3, r4
   139ec:	uxth	ip, ip
   139f0:	add	r5, lr, ip, lsl #1
   139f4:	ldrb	ip, [lr, ip, lsl #1]
   139f8:	strb	ip, [r2, #-2]
   139fc:	ldrb	ip, [r5, #1]
   13a00:	strb	ip, [r2, #-1]
   13a04:	add	r2, r1, #2
   13a08:	mov	lr, #100	; 0x64
   13a0c:	ldr	ip, [pc, #28]	; 13a30 <test_print@@Base+0x390>
   13a10:	udiv	r1, r3, lr
   13a14:	mls	r3, lr, r1, r3
   13a18:	uxth	r3, r3
   13a1c:	add	r1, ip, r3, lsl #1
   13a20:	ldrb	r3, [ip, r3, lsl #1]
   13a24:	strb	r3, [r2, #-2]
   13a28:	ldrb	r3, [r1, #1]
   13a2c:	b	13940 <test_print@@Base+0x2a0>
   13a30:	andeq	fp, r1, r8, lsr #3
   13a34:	movw	r2, #9999	; 0x270f
   13a38:	push	{r4, lr}
   13a3c:	mov	r3, r0
   13a40:	cmp	r0, r2
   13a44:	bls	13ae0 <test_print@@Base+0x440>
   13a48:	ldr	r2, [pc, #636]	; 13ccc <test_print@@Base+0x62c>
   13a4c:	cmp	r0, r2
   13a50:	bls	13abc <test_print@@Base+0x41c>
   13a54:	ldr	r2, [pc, #628]	; 13cd0 <test_print@@Base+0x630>
   13a58:	cmp	r0, r2
   13a5c:	movhi	r0, #10
   13a60:	bhi	13a74 <test_print@@Base+0x3d4>
   13a64:	ldr	r0, [pc, #616]	; 13cd4 <test_print@@Base+0x634>
   13a68:	cmp	r3, r0
   13a6c:	movhi	r0, #9
   13a70:	movls	r0, #8
   13a74:	mov	ip, #0
   13a78:	tst	r0, #1
   13a7c:	add	r2, r1, r0
   13a80:	strb	ip, [r1, r0]
   13a84:	beq	13bc4 <test_print@@Base+0x524>
   13a88:	sub	r1, r0, #1
   13a8c:	cmp	r1, #8
   13a90:	ldrls	pc, [pc, r1, lsl #2]
   13a94:	b	13bc0 <test_print@@Base+0x520>
   13a98:			; <UNDEFINED> instruction: 0x00013bb8
   13a9c:	andeq	r3, r1, r0, asr #23
   13aa0:	andeq	r3, r1, ip, lsl #23
   13aa4:	andeq	r3, r1, r0, asr #23
   13aa8:	andeq	r3, r1, r0, ror #22
   13aac:	andeq	r3, r1, r0, asr #23
   13ab0:	andeq	r3, r1, r4, lsr fp
   13ab4:	andeq	r3, r1, r0, asr #23
   13ab8:	andeq	r3, r1, r8, lsl #22
   13abc:	ldr	r2, [pc, #532]	; 13cd8 <test_print@@Base+0x638>
   13ac0:	cmp	r0, r2
   13ac4:	movhi	r0, #7
   13ac8:	bhi	13a74 <test_print@@Base+0x3d4>
   13acc:	ldr	r0, [pc, #520]	; 13cdc <test_print@@Base+0x63c>
   13ad0:	cmp	r3, r0
   13ad4:	movhi	r0, #6
   13ad8:	movls	r0, #5
   13adc:	b	13a74 <test_print@@Base+0x3d4>
   13ae0:	cmp	r0, #99	; 0x63
   13ae4:	bls	13af8 <test_print@@Base+0x458>
   13ae8:	cmp	r0, #1000	; 0x3e8
   13aec:	movcs	r0, #4
   13af0:	movcc	r0, #3
   13af4:	b	13a74 <test_print@@Base+0x3d4>
   13af8:	cmp	r0, #9
   13afc:	movhi	r0, #2
   13b00:	movls	r0, #1
   13b04:	b	13a74 <test_print@@Base+0x3d4>
   13b08:	mov	r1, #100	; 0x64
   13b0c:	ldr	ip, [pc, #460]	; 13ce0 <test_print@@Base+0x640>
   13b10:	sub	r2, r2, #2
   13b14:	udiv	lr, r3, r1
   13b18:	mls	r1, r1, lr, r3
   13b1c:	mov	r3, lr
   13b20:	add	r4, ip, r1, lsl #1
   13b24:	ldrb	r1, [ip, r1, lsl #1]
   13b28:	strb	r1, [r2]
   13b2c:	ldrb	r1, [r4, #1]
   13b30:	strb	r1, [r2, #1]
   13b34:	mov	r1, #100	; 0x64
   13b38:	ldr	ip, [pc, #416]	; 13ce0 <test_print@@Base+0x640>
   13b3c:	sub	r2, r2, #2
   13b40:	udiv	lr, r3, r1
   13b44:	mls	r1, r1, lr, r3
   13b48:	mov	r3, lr
   13b4c:	add	r4, ip, r1, lsl #1
   13b50:	ldrb	r1, [ip, r1, lsl #1]
   13b54:	strb	r1, [r2]
   13b58:	ldrb	r1, [r4, #1]
   13b5c:	strb	r1, [r2, #1]
   13b60:	mov	r1, #100	; 0x64
   13b64:	ldr	ip, [pc, #372]	; 13ce0 <test_print@@Base+0x640>
   13b68:	sub	r2, r2, #2
   13b6c:	udiv	lr, r3, r1
   13b70:	mls	r1, r1, lr, r3
   13b74:	mov	r3, lr
   13b78:	add	r4, ip, r1, lsl #1
   13b7c:	ldrb	r1, [ip, r1, lsl #1]
   13b80:	strb	r1, [r2]
   13b84:	ldrb	r1, [r4, #1]
   13b88:	strb	r1, [r2, #1]
   13b8c:	mov	r1, #100	; 0x64
   13b90:	ldr	ip, [pc, #328]	; 13ce0 <test_print@@Base+0x640>
   13b94:	sub	r2, r2, #2
   13b98:	udiv	lr, r3, r1
   13b9c:	mls	r1, r1, lr, r3
   13ba0:	mov	r3, lr
   13ba4:	add	r4, ip, r1, lsl #1
   13ba8:	ldrb	r1, [ip, r1, lsl #1]
   13bac:	strb	r1, [r2]
   13bb0:	ldrb	r1, [r4, #1]
   13bb4:	strb	r1, [r2, #1]
   13bb8:	add	r3, r3, #48	; 0x30
   13bbc:	strb	r3, [r2, #-1]
   13bc0:	pop	{r4, pc}
   13bc4:	sub	r1, r0, #2
   13bc8:	cmp	r1, #8
   13bcc:	ldrls	pc, [pc, r1, lsl #2]
   13bd0:	b	13bc0 <test_print@@Base+0x520>
   13bd4:	andeq	r3, r1, r8, lsr #25
   13bd8:	andeq	r3, r1, r0, asr #23
   13bdc:	andeq	r3, r1, ip, ror ip
   13be0:	andeq	r3, r1, r0, asr #23
   13be4:	andeq	r3, r1, r0, asr ip
   13be8:	andeq	r3, r1, r0, asr #23
   13bec:	andeq	r3, r1, r4, lsr #24
   13bf0:	andeq	r3, r1, r0, asr #23
   13bf4:	strdeq	r3, [r1], -r8
   13bf8:	mov	r1, #100	; 0x64
   13bfc:	ldr	ip, [pc, #220]	; 13ce0 <test_print@@Base+0x640>
   13c00:	sub	r2, r2, #2
   13c04:	udiv	lr, r3, r1
   13c08:	mls	r1, r1, lr, r3
   13c0c:	mov	r3, lr
   13c10:	add	r4, ip, r1, lsl #1
   13c14:	ldrb	r1, [ip, r1, lsl #1]
   13c18:	strb	r1, [r2]
   13c1c:	ldrb	r1, [r4, #1]
   13c20:	strb	r1, [r2, #1]
   13c24:	mov	r1, #100	; 0x64
   13c28:	ldr	ip, [pc, #176]	; 13ce0 <test_print@@Base+0x640>
   13c2c:	sub	r2, r2, #2
   13c30:	udiv	lr, r3, r1
   13c34:	mls	r1, r1, lr, r3
   13c38:	mov	r3, lr
   13c3c:	add	r4, ip, r1, lsl #1
   13c40:	ldrb	r1, [ip, r1, lsl #1]
   13c44:	strb	r1, [r2]
   13c48:	ldrb	r1, [r4, #1]
   13c4c:	strb	r1, [r2, #1]
   13c50:	mov	r1, #100	; 0x64
   13c54:	ldr	ip, [pc, #132]	; 13ce0 <test_print@@Base+0x640>
   13c58:	sub	r2, r2, #2
   13c5c:	udiv	lr, r3, r1
   13c60:	mls	r1, r1, lr, r3
   13c64:	mov	r3, lr
   13c68:	add	r4, ip, r1, lsl #1
   13c6c:	ldrb	r1, [ip, r1, lsl #1]
   13c70:	strb	r1, [r2]
   13c74:	ldrb	r1, [r4, #1]
   13c78:	strb	r1, [r2, #1]
   13c7c:	mov	r1, #100	; 0x64
   13c80:	ldr	ip, [pc, #88]	; 13ce0 <test_print@@Base+0x640>
   13c84:	sub	r2, r2, #2
   13c88:	udiv	lr, r3, r1
   13c8c:	mls	r1, r1, lr, r3
   13c90:	mov	r3, lr
   13c94:	add	r4, ip, r1, lsl #1
   13c98:	ldrb	r1, [ip, r1, lsl #1]
   13c9c:	strb	r1, [r2]
   13ca0:	ldrb	r1, [r4, #1]
   13ca4:	strb	r1, [r2, #1]
   13ca8:	mov	lr, #100	; 0x64
   13cac:	ldr	ip, [pc, #44]	; 13ce0 <test_print@@Base+0x640>
   13cb0:	udiv	r1, r3, lr
   13cb4:	mls	r3, lr, r1, r3
   13cb8:	add	r1, ip, r3, lsl #1
   13cbc:	ldrb	r3, [ip, r3, lsl #1]
   13cc0:	strb	r3, [r2, #-2]
   13cc4:	ldrb	r3, [r1, #1]
   13cc8:	b	13bbc <test_print@@Base+0x51c>
   13ccc:	addseq	r9, r8, pc, ror r6
   13cd0:	blcc	fe6c64d4 <__bss_end__@@Base+0xfe69a43c>
   13cd4:	ldrbeq	lr, [r5, #255]!	; 0xff
   13cd8:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   13cdc:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   13ce0:	andeq	fp, r1, r8, lsr #3
   13ce4:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce8:	mov	r6, r0
   13cec:	mov	r7, r1
   13cf0:	add	r1, pc, #992	; 0x3e0
   13cf4:	ldrd	r0, [r1]
   13cf8:	cmp	r7, r1
   13cfc:	cmpeq	r6, r0
   13d00:	bhi	13d18 <test_print@@Base+0x678>
   13d04:	mov	r1, r2
   13d08:	mov	r0, r6
   13d0c:	add	sp, sp, #4
   13d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d14:	b	13a34 <test_print@@Base+0x394>
   13d18:	add	r1, pc, #960	; 0x3c0
   13d1c:	ldrd	r0, [r1]
   13d20:	cmp	r7, r1
   13d24:	cmpeq	r6, r0
   13d28:	bls	13e3c <test_print@@Base+0x79c>
   13d2c:	add	r1, pc, #948	; 0x3b4
   13d30:	ldrd	r0, [r1]
   13d34:	cmp	r7, r1
   13d38:	cmpeq	r6, r0
   13d3c:	bls	13e08 <test_print@@Base+0x768>
   13d40:	add	r1, pc, #936	; 0x3a8
   13d44:	ldrd	r0, [r1]
   13d48:	cmp	r7, r1
   13d4c:	cmpeq	r6, r0
   13d50:	bls	13dec <test_print@@Base+0x74c>
   13d54:	add	r1, pc, #924	; 0x39c
   13d58:	ldrd	r0, [r1]
   13d5c:	cmp	r7, r1
   13d60:	cmpeq	r6, r0
   13d64:	movhi	r8, #20
   13d68:	movls	r8, #19
   13d6c:	ldr	r9, [pc, #956]	; 14130 <test_print@@Base+0xa90>
   13d70:	mov	r3, #0
   13d74:	add	r4, r2, r8
   13d78:	mov	r0, r6
   13d7c:	mov	r1, r7
   13d80:	strb	r3, [r2, r8]
   13d84:	mov	r2, #100	; 0x64
   13d88:	mov	r3, #0
   13d8c:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13d90:	mov	sl, r2
   13d94:	mov	r3, #0
   13d98:	add	fp, r9, r2, lsl #1
   13d9c:	mov	r0, r6
   13da0:	mov	r2, #100	; 0x64
   13da4:	mov	r1, r7
   13da8:	mov	r5, r9
   13dac:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13db0:	tst	r8, #1
   13db4:	beq	14138 <test_print@@Base+0xa98>
   13db8:	sub	r3, r8, #11
   13dbc:	cmp	r3, #8
   13dc0:	ldrls	pc, [pc, r3, lsl #2]
   13dc4:	b	14008 <test_print@@Base+0x968>
   13dc8:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13dcc:	andeq	r4, r1, r8
   13dd0:	andeq	r3, r1, r4, asr #30
   13dd4:	andeq	r4, r1, r8
   13dd8:	strdeq	r3, [r1], -r4
   13ddc:	andeq	r4, r1, r8
   13de0:	andeq	r3, r1, r4, lsr #29
   13de4:	andeq	r4, r1, r8
   13de8:	andeq	r3, r1, r8, lsl #29
   13dec:	add	r1, pc, #780	; 0x30c
   13df0:	ldrd	r0, [r1]
   13df4:	cmp	r7, r1
   13df8:	cmpeq	r6, r0
   13dfc:	movhi	r8, #18
   13e00:	movls	r8, #17
   13e04:	b	13d6c <test_print@@Base+0x6cc>
   13e08:	add	r1, pc, #760	; 0x2f8
   13e0c:	ldrd	r0, [r1]
   13e10:	cmp	r7, r1
   13e14:	cmpeq	r6, r0
   13e18:	movhi	r8, #16
   13e1c:	bhi	13d6c <test_print@@Base+0x6cc>
   13e20:	add	r1, pc, #744	; 0x2e8
   13e24:	ldrd	r0, [r1]
   13e28:	cmp	r7, r1
   13e2c:	cmpeq	r6, r0
   13e30:	movhi	r8, #15
   13e34:	movls	r8, #14
   13e38:	b	13d6c <test_print@@Base+0x6cc>
   13e3c:	add	r1, pc, #724	; 0x2d4
   13e40:	ldrd	r0, [r1]
   13e44:	cmp	r7, r1
   13e48:	cmpeq	r6, r0
   13e4c:	bls	13e6c <test_print@@Base+0x7cc>
   13e50:	add	r1, pc, #712	; 0x2c8
   13e54:	ldrd	r0, [r1]
   13e58:	cmp	r7, r1
   13e5c:	cmpeq	r6, r0
   13e60:	movhi	r8, #13
   13e64:	movls	r8, #12
   13e68:	b	13d6c <test_print@@Base+0x6cc>
   13e6c:	add	r1, pc, #692	; 0x2b4
   13e70:	ldrd	r0, [r1]
   13e74:	cmp	r7, r1
   13e78:	cmpeq	r6, r0
   13e7c:	movhi	r8, #11
   13e80:	movls	r8, #10
   13e84:	b	13d6c <test_print@@Base+0x6cc>
   13e88:	ldrb	r3, [r9, sl, lsl #1]
   13e8c:	mov	r6, r0
   13e90:	mov	r7, r1
   13e94:	sub	r4, r4, #2
   13e98:	strb	r3, [r4]
   13e9c:	ldrb	r3, [fp, #1]
   13ea0:	strb	r3, [r4, #1]
   13ea4:	mov	r0, r6
   13ea8:	mov	r1, r7
   13eac:	mov	r2, #100	; 0x64
   13eb0:	mov	r3, #0
   13eb4:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13eb8:	mov	r9, r2
   13ebc:	add	fp, r5, r2, lsl #1
   13ec0:	mov	r3, #0
   13ec4:	mov	r0, r6
   13ec8:	mov	r1, r7
   13ecc:	mov	r2, #100	; 0x64
   13ed0:	sub	sl, r4, #2
   13ed4:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13ed8:	ldrb	r3, [r5, r9, lsl #1]
   13edc:	mov	r6, r0
   13ee0:	mov	r7, r1
   13ee4:	strb	r3, [r4, #-2]
   13ee8:	ldrb	r3, [fp, #1]
   13eec:	strb	r3, [r4, #-1]
   13ef0:	mov	r4, sl
   13ef4:	mov	r0, r6
   13ef8:	mov	r1, r7
   13efc:	mov	r2, #100	; 0x64
   13f00:	mov	r3, #0
   13f04:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13f08:	mov	r9, r2
   13f0c:	add	fp, r5, r2, lsl #1
   13f10:	mov	r3, #0
   13f14:	mov	r0, r6
   13f18:	mov	r1, r7
   13f1c:	mov	r2, #100	; 0x64
   13f20:	sub	sl, r4, #2
   13f24:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13f28:	ldrb	r3, [r5, r9, lsl #1]
   13f2c:	mov	r6, r0
   13f30:	mov	r7, r1
   13f34:	strb	r3, [r4, #-2]
   13f38:	ldrb	r3, [fp, #1]
   13f3c:	strb	r3, [r4, #-1]
   13f40:	mov	r4, sl
   13f44:	mov	r0, r6
   13f48:	mov	r1, r7
   13f4c:	mov	r2, #100	; 0x64
   13f50:	mov	r3, #0
   13f54:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13f58:	mov	r9, r2
   13f5c:	add	fp, r5, r2, lsl #1
   13f60:	mov	r3, #0
   13f64:	mov	r0, r6
   13f68:	mov	r1, r7
   13f6c:	mov	r2, #100	; 0x64
   13f70:	sub	sl, r4, #2
   13f74:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13f78:	ldrb	r3, [r5, r9, lsl #1]
   13f7c:	mov	r6, r0
   13f80:	mov	r7, r1
   13f84:	strb	r3, [r4, #-2]
   13f88:	ldrb	r3, [fp, #1]
   13f8c:	strb	r3, [r4, #-1]
   13f90:	mov	r4, sl
   13f94:	mov	r0, r6
   13f98:	mov	r1, r7
   13f9c:	mov	r2, #100	; 0x64
   13fa0:	mov	r3, #0
   13fa4:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13fa8:	add	r3, r5, r2, lsl #1
   13fac:	ldrb	r2, [r5, r2, lsl #1]
   13fb0:	mov	r0, r6
   13fb4:	mov	r1, r7
   13fb8:	sub	r9, r4, #3
   13fbc:	strb	r2, [r4, #-2]
   13fc0:	mov	r2, #100	; 0x64
   13fc4:	ldrb	r3, [r3, #1]
   13fc8:	strb	r3, [r4, #-1]
   13fcc:	mov	r3, #0
   13fd0:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13fd4:	mov	r2, #10
   13fd8:	mov	r3, #0
   13fdc:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   13fe0:	add	r2, r2, #48	; 0x30
   13fe4:	mov	r0, r6
   13fe8:	mov	r1, r7
   13fec:	mov	r3, #0
   13ff0:	strb	r2, [r4, #-3]
   13ff4:	mov	r2, #1000	; 0x3e8
   13ff8:	mov	r4, r9
   13ffc:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14000:	mov	r6, r0
   14004:	mov	r7, r1
   14008:	mov	r0, r6
   1400c:	mov	r1, r7
   14010:	mov	r2, #100	; 0x64
   14014:	mov	r3, #0
   14018:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   1401c:	add	r3, r5, r2, lsl #1
   14020:	ldrb	r2, [r5, r2, lsl #1]
   14024:	mov	r0, r6
   14028:	mov	r1, r7
   1402c:	strb	r2, [r4, #-2]
   14030:	mov	r2, #100	; 0x64
   14034:	ldrb	r3, [r3, #1]
   14038:	strb	r3, [r4, #-1]
   1403c:	mov	r3, #0
   14040:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14044:	mov	r2, #100	; 0x64
   14048:	mov	r3, #0
   1404c:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14050:	add	r3, r5, r2, lsl #1
   14054:	ldrb	r2, [r5, r2, lsl #1]
   14058:	mov	r0, r6
   1405c:	mov	r1, r7
   14060:	strb	r2, [r4, #-4]
   14064:	movw	r2, #10000	; 0x2710
   14068:	ldrb	r3, [r3, #1]
   1406c:	strb	r3, [r4, #-3]
   14070:	mov	r3, #0
   14074:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14078:	mov	r2, #100	; 0x64
   1407c:	mov	r3, #0
   14080:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14084:	add	r3, r5, r2, lsl #1
   14088:	ldrb	r2, [r5, r2, lsl #1]
   1408c:	mov	r0, r6
   14090:	mov	r1, r7
   14094:	strb	r2, [r4, #-6]
   14098:	ldrb	r3, [r3, #1]
   1409c:	ldr	r2, [pc, #144]	; 14134 <test_print@@Base+0xa94>
   140a0:	strb	r3, [r4, #-5]
   140a4:	mov	r3, #0
   140a8:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   140ac:	mov	r2, #100	; 0x64
   140b0:	mov	r3, #0
   140b4:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   140b8:	add	r3, r5, r2, lsl #1
   140bc:	ldrb	r2, [r5, r2, lsl #1]
   140c0:	mov	r0, r8
   140c4:	strb	r2, [r4, #-8]
   140c8:	ldrb	r3, [r3, #1]
   140cc:	strb	r3, [r4, #-7]
   140d0:	add	sp, sp, #4
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	blcc	fe6c68dc <__bss_end__@@Base+0xfe69a844>
   140dc:	andeq	r0, r0, r0
   140e0:	mrcmi	15, 3, r9, cr2, cr15, {7}
   140e4:	andeq	r0, r0, r8, lsl r9
   140e8:	svcvs	0x00c0ffff
   140ec:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   140f0:			; <UNDEFINED> instruction: 0xa763ffff
   140f4:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   140f8:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   140fc:	bhi	ff1dcd14 <__bss_end__@@Base+0xff1b0c7c>
   14100:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   14104:	smceq	13400	; 0x3458
   14108:	strbge	r7, [r6], #4095	; 0xfff
   1410c:	andeq	r8, r3, lr, ror sp
   14110:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   14114:	strdeq	r5, [r0], -r3
   14118:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   1411c:	andeq	r0, r0, r7, lsl r0
   14120:	strtle	r0, [r5], #4095	; 0xfff
   14124:	andeq	r0, r0, r8, ror #1
   14128:	strpl	lr, [fp], #-1023	; 0xfffffc01
   1412c:	andeq	r0, r0, r2
   14130:	andeq	fp, r1, r8, lsr #3
   14134:	andeq	r4, pc, r0, asr #4
   14138:	sub	r3, r8, #10
   1413c:	cmp	r3, #10
   14140:	ldrls	pc, [pc, r3, lsl #2]
   14144:	b	14008 <test_print@@Base+0x968>
   14148:	ldrdeq	r4, [r1], -r0
   1414c:	andeq	r4, r1, r8
   14150:	andeq	r4, r1, r0, lsl #5
   14154:	andeq	r4, r1, r8
   14158:	andeq	r4, r1, r0, lsr r2
   1415c:	andeq	r4, r1, r8
   14160:	andeq	r4, r1, r0, ror #3
   14164:	andeq	r4, r1, r8
   14168:	muleq	r1, r0, r1
   1416c:	andeq	r4, r1, r8
   14170:	andeq	r4, r1, r4, ror r1
   14174:	ldrb	r3, [r9, sl, lsl #1]
   14178:	mov	r6, r0
   1417c:	mov	r7, r1
   14180:	sub	r4, r4, #2
   14184:	strb	r3, [r4]
   14188:	ldrb	r3, [fp, #1]
   1418c:	strb	r3, [r4, #1]
   14190:	mov	r0, r6
   14194:	mov	r1, r7
   14198:	mov	r2, #100	; 0x64
   1419c:	mov	r3, #0
   141a0:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   141a4:	mov	r9, r2
   141a8:	add	fp, r5, r2, lsl #1
   141ac:	mov	r3, #0
   141b0:	mov	r0, r6
   141b4:	mov	r1, r7
   141b8:	mov	r2, #100	; 0x64
   141bc:	sub	sl, r4, #2
   141c0:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   141c4:	ldrb	r3, [r5, r9, lsl #1]
   141c8:	mov	r6, r0
   141cc:	mov	r7, r1
   141d0:	strb	r3, [r4, #-2]
   141d4:	ldrb	r3, [fp, #1]
   141d8:	strb	r3, [r4, #-1]
   141dc:	mov	r4, sl
   141e0:	mov	r0, r6
   141e4:	mov	r1, r7
   141e8:	mov	r2, #100	; 0x64
   141ec:	mov	r3, #0
   141f0:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   141f4:	mov	r9, r2
   141f8:	add	fp, r5, r2, lsl #1
   141fc:	mov	r3, #0
   14200:	mov	r0, r6
   14204:	mov	r1, r7
   14208:	mov	r2, #100	; 0x64
   1420c:	sub	sl, r4, #2
   14210:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14214:	ldrb	r3, [r5, r9, lsl #1]
   14218:	mov	r6, r0
   1421c:	mov	r7, r1
   14220:	strb	r3, [r4, #-2]
   14224:	ldrb	r3, [fp, #1]
   14228:	strb	r3, [r4, #-1]
   1422c:	mov	r4, sl
   14230:	mov	r0, r6
   14234:	mov	r1, r7
   14238:	mov	r2, #100	; 0x64
   1423c:	mov	r3, #0
   14240:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14244:	mov	r9, r2
   14248:	add	fp, r5, r2, lsl #1
   1424c:	mov	r3, #0
   14250:	mov	r0, r6
   14254:	mov	r1, r7
   14258:	mov	r2, #100	; 0x64
   1425c:	sub	sl, r4, #2
   14260:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14264:	ldrb	r3, [r5, r9, lsl #1]
   14268:	mov	r6, r0
   1426c:	mov	r7, r1
   14270:	strb	r3, [r4, #-2]
   14274:	ldrb	r3, [fp, #1]
   14278:	strb	r3, [r4, #-1]
   1427c:	mov	r4, sl
   14280:	mov	r0, r6
   14284:	mov	r1, r7
   14288:	mov	r2, #100	; 0x64
   1428c:	mov	r3, #0
   14290:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14294:	mov	r9, r2
   14298:	add	fp, r5, r2, lsl #1
   1429c:	mov	r3, #0
   142a0:	mov	r0, r6
   142a4:	mov	r1, r7
   142a8:	mov	r2, #100	; 0x64
   142ac:	sub	sl, r4, #2
   142b0:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   142b4:	ldrb	r3, [r5, r9, lsl #1]
   142b8:	mov	r6, r0
   142bc:	mov	r7, r1
   142c0:	strb	r3, [r4, #-2]
   142c4:	ldrb	r3, [fp, #1]
   142c8:	strb	r3, [r4, #-1]
   142cc:	mov	r4, sl
   142d0:	mov	r0, r6
   142d4:	mov	r1, r7
   142d8:	mov	r2, #100	; 0x64
   142dc:	mov	r3, #0
   142e0:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   142e4:	mov	r9, r2
   142e8:	add	fp, r5, r2, lsl #1
   142ec:	mov	r3, #0
   142f0:	mov	r0, r6
   142f4:	mov	r1, r7
   142f8:	mov	r2, #100	; 0x64
   142fc:	sub	sl, r4, #2
   14300:	bl	1a8ec <flatcc_json_printer_clear@@Base+0x10c>
   14304:	ldrb	r3, [r5, r9, lsl #1]
   14308:	mov	r6, r0
   1430c:	mov	r7, r1
   14310:	strb	r3, [r4, #-2]
   14314:	ldrb	r3, [fp, #1]
   14318:	strb	r3, [r4, #-1]
   1431c:	mov	r4, sl
   14320:	b	14008 <test_print@@Base+0x968>
   14324:	cmp	r0, #0
   14328:	push	{r4, lr}
   1432c:	lsr	r4, r0, #31
   14330:	movlt	r3, #45	; 0x2d
   14334:	rsblt	r0, r0, #0
   14338:	sxthlt	r0, r0
   1433c:	strblt	r3, [r1], #1
   14340:	uxth	r0, r0
   14344:	bl	138f0 <test_print@@Base+0x250>
   14348:	add	r0, r0, r4
   1434c:	pop	{r4, pc}
   14350:	cmp	r0, #0
   14354:	push	{r4, lr}
   14358:	lsr	r4, r0, #31
   1435c:	movlt	r3, #45	; 0x2d
   14360:	rsblt	r0, r0, #0
   14364:	strblt	r3, [r1], #1
   14368:	bl	13a34 <test_print@@Base+0x394>
   1436c:	add	r0, r0, r4
   14370:	pop	{r4, pc}
   14374:	cmp	r0, #0
   14378:	push	{r4, lr}
   1437c:	lsr	r4, r1, #31
   14380:	sbcs	r3, r1, #0
   14384:	bge	14398 <test_print@@Base+0xcf8>
   14388:	rsbs	r0, r0, #0
   1438c:	mov	r3, #45	; 0x2d
   14390:	rsc	r1, r1, #0
   14394:	strb	r3, [r2], #1
   14398:	bl	13ce4 <test_print@@Base+0x644>
   1439c:	add	r0, r0, r4
   143a0:	pop	{r4, pc}
   143a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a8:	sub	sp, sp, #108	; 0x6c
   143ac:	sub	r1, r1, #1
   143b0:	add	r1, r0, r1
   143b4:	ldr	lr, [sp, #144]	; 0x90
   143b8:	str	r1, [sp, #92]	; 0x5c
   143bc:	ldr	ip, [sp, #168]	; 0xa8
   143c0:	ldr	r8, [sp, #172]	; 0xac
   143c4:	ldr	r9, [sp, #148]	; 0x94
   143c8:	subs	r6, r2, ip
   143cc:	ldrd	r4, [sp, #152]	; 0x98
   143d0:	str	r6, [sp, #16]
   143d4:	sbc	r6, r3, r8
   143d8:	adds	sl, r2, ip
   143dc:	adc	fp, r3, r8
   143e0:	str	r6, [sp, #20]
   143e4:	subs	r6, lr, r4
   143e8:	str	r6, [sp]
   143ec:	sbc	r6, r9, r5
   143f0:	subs	r2, ip, r2
   143f4:	sbc	r3, r8, r3
   143f8:	str	r6, [sp, #4]
   143fc:	ldr	r6, [sp, #16]
   14400:	subs	r6, r6, lr
   14404:	str	r6, [sp, #96]	; 0x60
   14408:	ldr	r6, [sp, #20]
   1440c:	sbc	r6, r6, r9
   14410:	str	r6, [sp, #100]	; 0x64
   14414:	ldrd	r6, [sp, #16]
   14418:	cmp	r5, r7
   1441c:	cmpeq	r4, r6
   14420:	bcs	14524 <test_print@@Base+0xe84>
   14424:	ldrd	r0, [sp]
   14428:	ldrd	r6, [sp, #160]	; 0xa0
   1442c:	cmp	r7, r1
   14430:	cmpeq	r6, r0
   14434:	bls	1449c <test_print@@Base+0xdfc>
   14438:	adds	r3, ip, ip
   1443c:	str	r3, [sp, #32]
   14440:	adc	r3, r8, r8
   14444:	str	r3, [sp, #36]	; 0x24
   14448:	ldrd	r2, [sp, #32]
   1444c:	cmp	r3, r5
   14450:	cmpeq	r2, r4
   14454:	bls	145bc <test_print@@Base+0xf1c>
   14458:	mov	r0, #0
   1445c:	b	145e8 <test_print@@Base+0xf48>
   14460:	ldrd	r4, [sp, #8]
   14464:	ldr	r1, [sp, #92]	; 0x5c
   14468:	ldr	r0, [sp, #92]	; 0x5c
   1446c:	ldrb	r1, [r1]
   14470:	sub	r1, r1, #1
   14474:	strb	r1, [r0]
   14478:	ldr	r0, [sp]
   1447c:	ldr	r1, [sp, #160]	; 0xa0
   14480:	subs	r1, r0, r1
   14484:	ldr	r0, [sp, #4]
   14488:	str	r1, [sp]
   1448c:	ldr	r1, [sp, #164]	; 0xa4
   14490:	sbc	r1, r0, r1
   14494:	str	r1, [sp, #4]
   14498:	b	14414 <test_print@@Base+0xd74>
   1449c:	ldr	r1, [sp, #160]	; 0xa0
   144a0:	adds	r1, r4, r1
   144a4:	str	r1, [sp, #8]
   144a8:	ldr	r1, [sp, #164]	; 0xa4
   144ac:	adc	r1, r5, r1
   144b0:	str	r1, [sp, #12]
   144b4:	ldrd	r6, [sp, #8]
   144b8:	ldrd	r0, [sp, #16]
   144bc:	cmp	r7, r1
   144c0:	cmpeq	r6, r0
   144c4:	bcc	14460 <test_print@@Base+0xdc0>
   144c8:	ldr	r0, [sp]
   144cc:	ldr	r1, [sp, #8]
   144d0:	adds	r1, r2, r1
   144d4:	str	r1, [sp, #40]	; 0x28
   144d8:	ldr	r1, [sp, #12]
   144dc:	adc	r1, r3, r1
   144e0:	str	r1, [sp, #44]	; 0x2c
   144e4:	ldr	r1, [sp, #96]	; 0x60
   144e8:	adds	r1, r1, r0
   144ec:	ldr	r0, [sp, #4]
   144f0:	str	r1, [sp, #48]	; 0x30
   144f4:	ldr	r1, [sp, #100]	; 0x64
   144f8:	adc	r1, r1, r0
   144fc:	str	r1, [sp, #52]	; 0x34
   14500:	ldrd	r0, [sp, #40]	; 0x28
   14504:	ldrd	r6, [sp, #48]	; 0x30
   14508:	cmp	r1, r7
   1450c:	cmpeq	r0, r6
   14510:	bls	14460 <test_print@@Base+0xdc0>
   14514:	cmp	r5, fp
   14518:	cmpeq	r4, sl
   1451c:	bcc	14554 <test_print@@Base+0xeb4>
   14520:	b	14438 <test_print@@Base+0xd98>
   14524:	cmp	r5, fp
   14528:	cmpeq	r4, sl
   1452c:	bcs	14438 <test_print@@Base+0xd98>
   14530:	subs	r3, lr, r4
   14534:	ldrd	r0, [sp, #160]	; 0xa0
   14538:	str	r3, [sp, #56]	; 0x38
   1453c:	sbc	r3, r9, r5
   14540:	str	r3, [sp, #60]	; 0x3c
   14544:	ldrd	r2, [sp, #56]	; 0x38
   14548:	cmp	r3, r1
   1454c:	cmpeq	r2, r0
   14550:	bcc	14438 <test_print@@Base+0xd98>
   14554:	ldr	r3, [sp, #160]	; 0xa0
   14558:	adds	r3, r4, r3
   1455c:	str	r3, [sp, #24]
   14560:	ldr	r3, [sp, #164]	; 0xa4
   14564:	adc	r3, r5, r3
   14568:	str	r3, [sp, #28]
   1456c:	ldrd	r2, [sp, #24]
   14570:	cmp	r3, fp
   14574:	cmpeq	r2, sl
   14578:	bcc	14458 <test_print@@Base+0xdb8>
   1457c:	subs	r3, sl, r4
   14580:	str	r3, [sp, #64]	; 0x40
   14584:	sbc	r3, fp, r5
   14588:	str	r3, [sp, #68]	; 0x44
   1458c:	ldr	r3, [sp, #24]
   14590:	subs	r3, r3, sl
   14594:	str	r3, [sp, #72]	; 0x48
   14598:	ldr	r3, [sp, #28]
   1459c:	sbc	r3, r3, fp
   145a0:	str	r3, [sp, #76]	; 0x4c
   145a4:	ldrd	r2, [sp, #64]	; 0x40
   145a8:	ldrd	r0, [sp, #72]	; 0x48
   145ac:	cmp	r3, r1
   145b0:	cmpeq	r2, r0
   145b4:	bls	14438 <test_print@@Base+0xd98>
   145b8:	b	14458 <test_print@@Base+0xdb8>
   145bc:	lsl	r3, r8, #2
   145c0:	lsl	r2, ip, #2
   145c4:	orr	r3, r3, ip, lsr #30
   145c8:	subs	r2, lr, r2
   145cc:	sbc	r3, r9, r3
   145d0:	strd	r2, [sp, #80]	; 0x50
   145d4:	ldrd	r2, [sp, #80]	; 0x50
   145d8:	cmp	r3, r5
   145dc:	cmpeq	r2, r4
   145e0:	movcs	r0, #1
   145e4:	movcc	r0, #0
   145e8:	add	sp, sp, #108	; 0x6c
   145ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f0:	subs	r3, r0, #0
   145f4:	mov	r2, r1
   145f8:	push	{r4, r5, lr}
   145fc:	movlt	r0, #45	; 0x2d
   14600:	rsblt	r3, r3, #0
   14604:	mov	r4, #10
   14608:	mvn	lr, #9
   1460c:	strblt	r0, [r2], #1
   14610:	mov	r0, r2
   14614:	udiv	ip, r3, r4
   14618:	mla	r3, lr, ip, r3
   1461c:	add	r3, r3, #48	; 0x30
   14620:	strb	r3, [r0], #1
   14624:	subs	r3, ip, #0
   14628:	bne	14614 <test_print@@Base+0xf74>
   1462c:	sub	r4, r0, r2
   14630:	sub	lr, r2, #1
   14634:	strb	r3, [r0]
   14638:	add	ip, r4, r4, lsr #31
   1463c:	add	r2, r2, r4
   14640:	mov	r3, r0
   14644:	asr	ip, ip, #1
   14648:	sub	r4, r2, r3
   1464c:	cmp	ip, r4
   14650:	bgt	1465c <test_print@@Base+0xfbc>
   14654:	sub	r0, r0, r1
   14658:	pop	{r4, r5, pc}
   1465c:	ldrb	r4, [lr, #1]!
   14660:	ldrb	r5, [r3, #-1]!
   14664:	strb	r5, [lr]
   14668:	strb	r4, [r3]
   1466c:	b	14648 <test_print@@Base+0xfa8>
   14670:	lsl	r0, r0, #2
   14674:	mov	r3, #3
   14678:	udiv	r0, r0, r3
   1467c:	add	r0, r0, r3
   14680:	bic	r0, r0, #3
   14684:	bx	lr
   14688:	ldr	r3, [r0, #8]
   1468c:	add	r1, r1, #2
   14690:	lsl	r1, r1, #1
   14694:	cmp	r3, r1
   14698:	ble	146b8 <test_print@@Base+0x1018>
   1469c:	ldr	r3, [r0, #4]
   146a0:	ldrh	r3, [r3, r1]
   146a4:	cmp	r3, #0
   146a8:	beq	146b8 <test_print@@Base+0x1018>
   146ac:	ldr	r0, [r0]
   146b0:	add	r0, r0, r3
   146b4:	bx	lr
   146b8:	mov	r0, #0
   146bc:	bx	lr
   146c0:	ldrd	r2, [r0, #16]
   146c4:	cmp	r3, r2
   146c8:	bcc	146f4 <test_print@@Base+0x1054>
   146cc:	ldr	r1, [r0]
   146d0:	ldr	r2, [r0, #36]	; 0x24
   146d4:	sub	r3, r3, r1
   146d8:	str	r1, [r0, #20]
   146dc:	cmp	r2, #0
   146e0:	moveq	r2, #3
   146e4:	streq	r2, [r0, #36]	; 0x24
   146e8:	ldr	r2, [r0, #12]
   146ec:	add	r3, r2, r3
   146f0:	str	r3, [r0, #12]
   146f4:	ldr	r3, [r0, #20]
   146f8:	mov	r2, #0
   146fc:	strb	r2, [r3]
   14700:	bx	lr
   14704:	ldr	ip, [r0, #16]
   14708:	push	{r4, r5, r6, r7, r8, lr}
   1470c:	mov	r4, r0
   14710:	mov	r6, r2
   14714:	ldr	r3, [r0, #20]
   14718:	add	lr, r3, r2
   1471c:	cmp	ip, lr
   14720:	movhi	r0, r3
   14724:	bhi	1475c <test_print@@Base+0x10bc>
   14728:	cmp	r3, ip
   1472c:	mov	r7, r1
   14730:	ldrcs	r3, [r4, #44]	; 0x2c
   14734:	movcs	r1, #0
   14738:	bcs	1479c <test_print@@Base+0x10fc>
   1473c:	ldr	r5, [r4, #16]
   14740:	ldr	r3, [r4, #20]
   14744:	ldr	r0, [r4, #20]
   14748:	sub	r5, r5, r3
   1474c:	cmp	r5, r6
   14750:	bcc	14770 <test_print@@Base+0x10d0>
   14754:	mov	r2, r6
   14758:	mov	r1, r7
   1475c:	bl	12444 <memcpy@plt>
   14760:	ldr	r3, [r4, #20]
   14764:	add	r6, r3, r6
   14768:	str	r6, [r4, #20]
   1476c:	pop	{r4, r5, r6, r7, r8, pc}
   14770:	mov	r1, r7
   14774:	mov	r2, r5
   14778:	bl	12444 <memcpy@plt>
   1477c:	ldr	r3, [r4, #20]
   14780:	add	r7, r7, r5
   14784:	sub	r6, r6, r5
   14788:	mov	r1, #0
   1478c:	mov	r0, r4
   14790:	add	r3, r3, r5
   14794:	str	r3, [r4, #20]
   14798:	ldr	r3, [r4, #44]	; 0x2c
   1479c:	blx	r3
   147a0:	b	1473c <test_print@@Base+0x109c>
   147a4:	ldr	r3, [r0, #20]
   147a8:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ac:	mov	sl, r2
   147b0:	mov	r4, r0
   147b4:	mov	r7, #92	; 0x5c
   147b8:	mov	r8, #102	; 0x66
   147bc:	mov	r9, #117	; 0x75
   147c0:	add	r2, r3, #1
   147c4:	str	r2, [r0, #20]
   147c8:	mov	r2, #34	; 0x22
   147cc:	strb	r2, [r3]
   147d0:	ldrb	r5, [r1]
   147d4:	mov	r6, r1
   147d8:	cmp	r5, #34	; 0x22
   147dc:	cmpne	r5, #31
   147e0:	bls	147ec <test_print@@Base+0x114c>
   147e4:	cmp	r5, #92	; 0x5c
   147e8:	bne	14858 <test_print@@Base+0x11b8>
   147ec:	sub	fp, r6, r1
   147f0:	mov	r0, r4
   147f4:	mov	r2, fp
   147f8:	bl	14704 <test_print@@Base+0x1064>
   147fc:	ldr	r3, [r4, #20]
   14800:	subs	sl, sl, fp
   14804:	add	r2, r3, #1
   14808:	str	r2, [r4, #20]
   1480c:	beq	14940 <test_print@@Base+0x12a0>
   14810:	strb	r7, [r3]
   14814:	cmp	r5, #12
   14818:	ldr	r3, [r4, #20]
   1481c:	addeq	r2, r3, #1
   14820:	streq	r2, [r4, #20]
   14824:	strbeq	r8, [r3]
   14828:	beq	14894 <test_print@@Base+0x11f4>
   1482c:	bhi	14860 <test_print@@Base+0x11c0>
   14830:	cmp	r5, #9
   14834:	beq	148a0 <test_print@@Base+0x1200>
   14838:	cmp	r5, #10
   1483c:	beq	148b4 <test_print@@Base+0x1214>
   14840:	cmp	r5, #8
   14844:	bne	148c4 <test_print@@Base+0x1224>
   14848:	add	r2, r3, #1
   1484c:	str	r2, [r4, #20]
   14850:	mov	r2, #98	; 0x62
   14854:	b	148ac <test_print@@Base+0x120c>
   14858:	ldrb	r5, [r6, #1]!
   1485c:	b	147d8 <test_print@@Base+0x1138>
   14860:	cmp	r5, #34	; 0x22
   14864:	beq	14888 <test_print@@Base+0x11e8>
   14868:	cmp	r5, #92	; 0x5c
   1486c:	beq	14888 <test_print@@Base+0x11e8>
   14870:	cmp	r5, #13
   14874:	bne	148c4 <test_print@@Base+0x1224>
   14878:	add	r2, r3, #1
   1487c:	str	r2, [r4, #20]
   14880:	mov	r2, #114	; 0x72
   14884:	b	148ac <test_print@@Base+0x120c>
   14888:	add	r2, r3, #1
   1488c:	str	r2, [r4, #20]
   14890:	strb	r5, [r3]
   14894:	sub	sl, sl, #1
   14898:	add	r1, r6, #1
   1489c:	b	147d0 <test_print@@Base+0x1130>
   148a0:	add	r2, r3, #1
   148a4:	str	r2, [r4, #20]
   148a8:	mov	r2, #116	; 0x74
   148ac:	strb	r2, [r3]
   148b0:	b	14894 <test_print@@Base+0x11f4>
   148b4:	add	r2, r3, #1
   148b8:	str	r2, [r4, #20]
   148bc:	mov	r2, #110	; 0x6e
   148c0:	b	148ac <test_print@@Base+0x120c>
   148c4:	add	r2, r3, #1
   148c8:	str	r2, [r4, #20]
   148cc:	strb	r9, [r3]
   148d0:	ldr	r3, [r4, #20]
   148d4:	add	r2, r3, #1
   148d8:	str	r2, [r4, #20]
   148dc:	mov	r2, #48	; 0x30
   148e0:	strb	r2, [r3]
   148e4:	ldr	r3, [r4, #20]
   148e8:	add	r1, r3, #1
   148ec:	str	r1, [r4, #20]
   148f0:	lsr	r1, r5, #4
   148f4:	and	r5, r5, #15
   148f8:	strb	r2, [r3]
   148fc:	cmp	r1, #10
   14900:	movcc	r3, r2
   14904:	ldr	r2, [r4, #20]
   14908:	movcs	r3, #87	; 0x57
   1490c:	add	r3, r3, r1
   14910:	cmp	r5, #10
   14914:	add	r0, r2, #1
   14918:	str	r0, [r4, #20]
   1491c:	strb	r3, [r2]
   14920:	movcc	r3, #48	; 0x30
   14924:	movcs	r3, #87	; 0x57
   14928:	ldr	r2, [r4, #20]
   1492c:	add	r5, r3, r5
   14930:	add	r1, r2, #1
   14934:	str	r1, [r4, #20]
   14938:	strb	r5, [r2]
   1493c:	b	14894 <test_print@@Base+0x11f4>
   14940:	mov	r2, #34	; 0x22
   14944:	strb	r2, [r3]
   14948:	add	sp, sp, #4
   1494c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14950:	ldr	r2, [r1], #4
   14954:	b	147a4 <test_print@@Base+0x1104>
   14958:	ldr	r3, [r0, #20]
   1495c:	mov	ip, #34	; 0x22
   14960:	push	{r4, r5, r6, lr}
   14964:	mov	r4, r0
   14968:	strb	ip, [r3]
   1496c:	ldrb	ip, [r0, #26]
   14970:	ldr	lr, [r0, #16]
   14974:	ldr	r3, [r0, #20]
   14978:	cmp	ip, #0
   1497c:	addeq	r3, r3, #1
   14980:	add	ip, r3, r2
   14984:	cmp	lr, ip
   14988:	str	r3, [r0, #20]
   1498c:	bls	149cc <test_print@@Base+0x132c>
   14990:	mov	r0, r3
   14994:	mov	r5, r2
   14998:	bl	12444 <memcpy@plt>
   1499c:	ldr	r2, [r4, #20]
   149a0:	add	r2, r2, r5
   149a4:	str	r2, [r4, #20]
   149a8:	ldr	r3, [r4, #20]
   149ac:	mov	r2, #34	; 0x22
   149b0:	strb	r2, [r3]
   149b4:	ldrb	r2, [r4, #26]
   149b8:	ldr	r3, [r4, #20]
   149bc:	cmp	r2, #0
   149c0:	addeq	r3, r3, #1
   149c4:	str	r3, [r4, #20]
   149c8:	pop	{r4, r5, r6, pc}
   149cc:	bl	14704 <test_print@@Base+0x1064>
   149d0:	b	149a8 <test_print@@Base+0x1308>
   149d4:	push	{r4, r5, r6, lr}
   149d8:	mov	r4, r0
   149dc:	ldrb	r3, [r0, #25]
   149e0:	ldr	r2, [r0, #16]
   149e4:	ldr	r5, [r0, #32]
   149e8:	mul	r5, r5, r3
   149ec:	ldr	r3, [r0, #20]
   149f0:	add	r1, r3, r5
   149f4:	cmp	r2, r1
   149f8:	movcs	r2, r5
   149fc:	movcs	r1, #32
   14a00:	movcs	r0, r3
   14a04:	bcs	14a38 <test_print@@Base+0x1398>
   14a08:	cmp	r3, r2
   14a0c:	movcs	r1, #0
   14a10:	ldrcs	r3, [r4, #44]	; 0x2c
   14a14:	bcs	14a74 <test_print@@Base+0x13d4>
   14a18:	ldr	r6, [r4, #16]
   14a1c:	ldr	r3, [r4, #20]
   14a20:	ldr	r0, [r4, #20]
   14a24:	sub	r6, r6, r3
   14a28:	cmp	r6, r5
   14a2c:	bcc	14a4c <test_print@@Base+0x13ac>
   14a30:	mov	r2, r5
   14a34:	mov	r1, #32
   14a38:	bl	124e0 <memset@plt>
   14a3c:	ldr	r3, [r4, #20]
   14a40:	add	r5, r3, r5
   14a44:	str	r5, [r4, #20]
   14a48:	pop	{r4, r5, r6, pc}
   14a4c:	mov	r1, #32
   14a50:	mov	r2, r6
   14a54:	bl	124e0 <memset@plt>
   14a58:	ldr	r3, [r4, #20]
   14a5c:	sub	r5, r5, r6
   14a60:	mov	r1, #0
   14a64:	mov	r0, r4
   14a68:	add	r3, r3, r6
   14a6c:	str	r3, [r4, #20]
   14a70:	ldr	r3, [r4, #44]	; 0x2c
   14a74:	blx	r3
   14a78:	b	14a18 <test_print@@Base+0x1378>
   14a7c:	push	{r4, r5, r6, lr}
   14a80:	cmp	r1, #0
   14a84:	mov	r4, r0
   14a88:	ldr	r2, [r0, #20]
   14a8c:	ldr	r0, [r0]
   14a90:	ldr	r3, [r4, #40]	; 0x28
   14a94:	bne	14af4 <test_print@@Base+0x1454>
   14a98:	ldr	r5, [r4, #16]
   14a9c:	cmp	r5, r2
   14aa0:	bhi	14af4 <test_print@@Base+0x1454>
   14aa4:	sub	r5, r2, r5
   14aa8:	mov	r2, #1
   14aac:	ldr	r1, [r4, #8]
   14ab0:	bl	12480 <fwrite@plt>
   14ab4:	ldr	r0, [r4]
   14ab8:	mov	r2, r5
   14abc:	ldr	r1, [r4, #8]
   14ac0:	add	r1, r0, r1
   14ac4:	bl	12444 <memcpy@plt>
   14ac8:	ldr	r2, [r4]
   14acc:	ldr	r3, [r4, #12]
   14ad0:	add	r2, r2, r5
   14ad4:	str	r2, [r4, #20]
   14ad8:	ldr	r2, [r4, #8]
   14adc:	add	r3, r3, r2
   14ae0:	str	r3, [r4, #12]
   14ae4:	ldr	r3, [r4, #20]
   14ae8:	mov	r2, #0
   14aec:	strb	r2, [r3]
   14af0:	pop	{r4, r5, r6, pc}
   14af4:	sub	r5, r2, r0
   14af8:	mov	r2, #1
   14afc:	mov	r1, r5
   14b00:	bl	12480 <fwrite@plt>
   14b04:	ldr	r3, [r4]
   14b08:	ldr	r2, [r4, #12]
   14b0c:	str	r3, [r4, #20]
   14b10:	add	r2, r2, r5
   14b14:	str	r2, [r4, #12]
   14b18:	b	14ae4 <test_print@@Base+0x1444>
   14b1c:	push	{r4, r5, r6, lr}
   14b20:	mov	r2, #0
   14b24:	ldr	r3, [r0]
   14b28:	ldr	r5, [r0, #20]
   14b2c:	strb	r2, [r5]
   14b30:	ldr	r2, [r0, #16]
   14b34:	ldr	r1, [r0, #20]
   14b38:	cmp	r1, r2
   14b3c:	popcc	{r4, r5, r6, pc}
   14b40:	mov	r4, r0
   14b44:	sub	r5, r5, r3
   14b48:	ldrd	r0, [r0]
   14b4c:	lsl	r1, r1, #1
   14b50:	bl	12474 <realloc@plt>
   14b54:	cmp	r0, #0
   14b58:	bne	14b90 <test_print@@Base+0x14f0>
   14b5c:	ldr	r3, [r4, #36]	; 0x24
   14b60:	cmp	r3, #0
   14b64:	moveq	r3, #3
   14b68:	streq	r3, [r4, #36]	; 0x24
   14b6c:	ldr	r3, [r4, #12]
   14b70:	add	r5, r3, r5
   14b74:	ldr	r3, [r4]
   14b78:	str	r5, [r4, #12]
   14b7c:	str	r3, [r4, #20]
   14b80:	ldr	r3, [r4, #20]
   14b84:	mov	r2, #0
   14b88:	strb	r2, [r3]
   14b8c:	pop	{r4, r5, r6, pc}
   14b90:	ldr	r3, [r4, #4]
   14b94:	add	r5, r0, r5
   14b98:	str	r5, [r4, #20]
   14b9c:	lsl	r3, r3, #1
   14ba0:	stm	r4, {r0, r3}
   14ba4:	sub	r3, r3, #64	; 0x40
   14ba8:	add	r0, r0, r3
   14bac:	str	r3, [r4, #8]
   14bb0:	str	r0, [r4, #16]
   14bb4:	b	14b80 <test_print@@Base+0x14e0>
   14bb8:	ldr	r2, [r0, #16]
   14bbc:	ldr	r1, [r0, #20]
   14bc0:	cmp	r1, r2
   14bc4:	bxcc	lr
   14bc8:	mov	r1, #0
   14bcc:	ldr	r3, [r0, #44]	; 0x2c
   14bd0:	bx	r3
   14bd4:	push	{r4, r5, r6, lr}
   14bd8:	mov	r4, r0
   14bdc:	mov	r5, r1
   14be0:	mov	r6, r2
   14be4:	ldrb	r3, [r0, #25]
   14be8:	cmp	r3, #0
   14bec:	beq	14c50 <test_print@@Base+0x15b0>
   14bf0:	ldr	r3, [r0, #20]
   14bf4:	add	r2, r3, #1
   14bf8:	str	r2, [r0, #20]
   14bfc:	mov	r2, #10
   14c00:	strb	r2, [r3]
   14c04:	bl	149d4 <test_print@@Base+0x1334>
   14c08:	mov	r2, r6
   14c0c:	mov	r1, r5
   14c10:	mov	r0, r4
   14c14:	bl	14958 <test_print@@Base+0x12b8>
   14c18:	ldr	r3, [r4, #20]
   14c1c:	add	r2, r3, #1
   14c20:	str	r2, [r4, #20]
   14c24:	mov	r2, #58	; 0x3a
   14c28:	strb	r2, [r3]
   14c2c:	mov	r2, #32
   14c30:	ldr	r3, [r4, #20]
   14c34:	strb	r2, [r3]
   14c38:	ldrb	r2, [r4, #25]
   14c3c:	ldr	r3, [r4, #20]
   14c40:	cmp	r2, #0
   14c44:	addne	r3, r3, #1
   14c48:	str	r3, [r4, #20]
   14c4c:	pop	{r4, r5, r6, pc}
   14c50:	bl	14bb8 <test_print@@Base+0x1518>
   14c54:	b	14c08 <test_print@@Base+0x1568>
   14c58:	cmp	r0, #99	; 0x63
   14c5c:	mov	r3, #0
   14c60:	bls	14ca0 <test_print@@Base+0x1600>
   14c64:	strb	r3, [r1, #3]
   14c68:	mov	r3, #100	; 0x64
   14c6c:	ldr	ip, [pc, #112]	; 14ce4 <test_print@@Base+0x1644>
   14c70:	udiv	r2, r0, r3
   14c74:	mls	r0, r3, r2, r0
   14c78:	add	r2, r2, #48	; 0x30
   14c7c:	uxtb	r0, r0
   14c80:	add	r3, ip, r0, lsl #1
   14c84:	ldrb	r0, [ip, r0, lsl #1]
   14c88:	strb	r0, [r1, #1]
   14c8c:	mov	r0, #3
   14c90:	ldrb	r3, [r3, #1]
   14c94:	strb	r2, [r1]
   14c98:	strb	r3, [r1, #2]
   14c9c:	bx	lr
   14ca0:	cmp	r0, #9
   14ca4:	bls	14cd0 <test_print@@Base+0x1630>
   14ca8:	strb	r3, [r1, #2]
   14cac:	sxth	r0, r0
   14cb0:	ldr	r3, [pc, #44]	; 14ce4 <test_print@@Base+0x1644>
   14cb4:	add	r2, r3, r0, lsl #1
   14cb8:	ldrb	r3, [r3, r0, lsl #1]
   14cbc:	mov	r0, #2
   14cc0:	strb	r3, [r1]
   14cc4:	ldrb	r3, [r2, #1]
   14cc8:	strb	r3, [r1, #1]
   14ccc:	bx	lr
   14cd0:	add	r0, r0, #48	; 0x30
   14cd4:	strb	r0, [r1]
   14cd8:	mov	r0, #1
   14cdc:	strb	r3, [r1, #1]
   14ce0:	bx	lr
   14ce4:	andeq	fp, r1, r8, lsr #3
   14ce8:	cmp	r0, #0
   14cec:	push	{r4, lr}
   14cf0:	lsr	r4, r0, #31
   14cf4:	movlt	r3, #45	; 0x2d
   14cf8:	rsblt	r0, r0, #0
   14cfc:	sxtblt	r0, r0
   14d00:	strblt	r3, [r1], #1
   14d04:	uxtb	r0, r0
   14d08:	bl	14c58 <test_print@@Base+0x15b8>
   14d0c:	add	r0, r0, r4
   14d10:	pop	{r4, pc}
   14d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d18:	sub	sp, sp, #20
   14d1c:	mov	sl, r3
   14d20:	ldr	r3, [sp, #64]	; 0x40
   14d24:	ldr	lr, [sp, #68]	; 0x44
   14d28:	umull	r6, r7, r2, lr
   14d2c:	strd	r6, [sp]
   14d30:	umull	r6, r7, sl, r3
   14d34:	umull	r2, r3, r2, r3
   14d38:	ldr	r8, [sp]
   14d3c:	mov	r2, #0
   14d40:	mov	r9, r2
   14d44:	strd	r6, [sp, #8]
   14d48:	ldr	fp, [sp, #8]
   14d4c:	mov	r1, r3
   14d50:	adds	r1, r1, fp
   14d54:	adc	r3, r2, r2
   14d58:	adds	r1, r1, #-2147483648	; 0x80000000
   14d5c:	adc	r3, r3, r2
   14d60:	adds	r1, r1, r8
   14d64:	ldr	r8, [sp, #4]
   14d68:	adc	r3, r3, r2
   14d6c:	mov	r1, r3
   14d70:	ldr	r3, [sp, #12]
   14d74:	ldr	r2, [sp, #72]	; 0x48
   14d78:	adds	r4, r3, r8
   14d7c:	ldr	r3, [sp, #56]	; 0x38
   14d80:	adc	r5, r9, r9
   14d84:	umlal	r4, r5, lr, sl
   14d88:	add	r3, r3, r2
   14d8c:	adds	r1, r1, r4
   14d90:	add	r3, r3, #64	; 0x40
   14d94:	adc	r6, r9, r5
   14d98:	stm	r0, {r1, r6}
   14d9c:	str	r3, [r0, #8]
   14da0:	add	sp, sp, #20
   14da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14da8:	push	{r4, lr}
   14dac:	mov	r2, #260	; 0x104
   14db0:	ldr	r3, [pc, #8]	; 14dc0 <test_print@@Base+0x1720>
   14db4:	ldr	r1, [pc, #8]	; 14dc4 <test_print@@Base+0x1724>
   14db8:	ldr	r0, [pc, #8]	; 14dc8 <test_print@@Base+0x1728>
   14dbc:	bl	12534 <__assert_fail@plt>
   14dc0:	andeq	fp, r1, r1, ror r2
   14dc4:	andeq	fp, r1, ip, ror #17
   14dc8:	andeq	fp, r1, r2, asr #18
   14dcc:	push	{r4, lr}
   14dd0:	mov	r2, #239	; 0xef
   14dd4:	ldr	r3, [pc, #8]	; 14de4 <test_print@@Base+0x1744>
   14dd8:	ldr	r1, [pc, #8]	; 14de8 <test_print@@Base+0x1748>
   14ddc:	ldr	r0, [pc, #8]	; 14dec <test_print@@Base+0x174c>
   14de0:	bl	12534 <__assert_fail@plt>
   14de4:	andeq	fp, r1, r9, lsl #5
   14de8:	andeq	fp, r1, ip, ror #17
   14dec:	andeq	fp, r1, fp, asr #18
   14df0:	cmp	r0, #0
   14df4:	beq	14e14 <test_print@@Base+0x1774>
   14df8:	ldr	r3, [pc, #48]	; 14e30 <test_print@@Base+0x1790>
   14dfc:	mov	r0, #4
   14e00:	ldr	r2, [r3]
   14e04:	ldrb	r3, [r3, #4]
   14e08:	str	r2, [r1]
   14e0c:	strb	r3, [r1, #4]
   14e10:	bx	lr
   14e14:	ldr	r3, [pc, #24]	; 14e34 <test_print@@Base+0x1794>
   14e18:	mov	r0, #5
   14e1c:	ldr	r2, [r3]
   14e20:	ldrh	r3, [r3, #4]
   14e24:	str	r2, [r1]
   14e28:	strh	r3, [r1, #4]
   14e2c:	bx	lr
   14e30:	muleq	r1, sp, r2
   14e34:	andeq	fp, r1, r3, lsr #5
   14e38:	subs	r2, r2, #1
   14e3c:	push	{r4, lr}
   14e40:	mov	r4, r0
   14e44:	sub	sp, sp, #24
   14e48:	bne	14e64 <test_print@@Base+0x17c4>
   14e4c:	ldr	r3, [r0, #36]	; 0x24
   14e50:	cmp	r3, #0
   14e54:	moveq	r3, #2
   14e58:	streq	r3, [r0, #36]	; 0x24
   14e5c:	add	sp, sp, #24
   14e60:	pop	{r4, pc}
   14e64:	ldr	ip, [r0, #32]
   14e68:	add	ip, ip, #1
   14e6c:	str	ip, [r0, #32]
   14e70:	ldr	ip, [r0, #20]
   14e74:	add	lr, ip, #1
   14e78:	str	lr, [r0, #20]
   14e7c:	mov	lr, #123	; 0x7b
   14e80:	strb	lr, [ip]
   14e84:	mov	ip, #0
   14e88:	str	r1, [sp, #4]
   14e8c:	str	r2, [sp, #16]
   14e90:	ldr	r2, [r1]
   14e94:	str	ip, [sp, #20]
   14e98:	sub	r1, r1, r2
   14e9c:	ldrh	r2, [r1]
   14ea0:	str	r1, [sp, #8]
   14ea4:	add	r1, sp, #4
   14ea8:	str	r2, [sp, #12]
   14eac:	blx	r3
   14eb0:	ldrb	r3, [r4, #25]
   14eb4:	cmp	r3, #0
   14eb8:	beq	14ee4 <test_print@@Base+0x1844>
   14ebc:	ldr	r3, [r4, #20]
   14ec0:	mov	r0, r4
   14ec4:	add	r2, r3, #1
   14ec8:	str	r2, [r4, #20]
   14ecc:	mov	r2, #10
   14ed0:	strb	r2, [r3]
   14ed4:	ldr	r3, [r4, #32]
   14ed8:	sub	r3, r3, #1
   14edc:	str	r3, [r4, #32]
   14ee0:	bl	149d4 <test_print@@Base+0x1334>
   14ee4:	ldr	r3, [r4, #20]
   14ee8:	add	r2, r3, #1
   14eec:	str	r2, [r4, #20]
   14ef0:	mov	r2, #125	; 0x7d
   14ef4:	strb	r2, [r3]
   14ef8:	b	14e5c <test_print@@Base+0x17bc>
   14efc:	push	{r0, r1, r2, r4, r5, lr}
   14f00:	mov	r4, r0
   14f04:	mov	r0, #0
   14f08:	cmp	r1, r0
   14f0c:	cmpne	r2, #7
   14f10:	str	r0, [sp, #4]
   14f14:	bhi	14f3c <test_print@@Base+0x189c>
   14f18:	ldr	r3, [r4, #36]	; 0x24
   14f1c:	movw	r2, #1019	; 0x3fb
   14f20:	ldr	r1, [pc, #116]	; 14f9c <test_print@@Base+0x18fc>
   14f24:	cmp	r3, r0
   14f28:	ldr	r0, [pc, #112]	; 14fa0 <test_print@@Base+0x1900>
   14f2c:	moveq	r3, #1
   14f30:	streq	r3, [r4, #36]	; 0x24
   14f34:	ldr	r3, [pc, #104]	; 14fa4 <test_print@@Base+0x1904>
   14f38:	bl	12534 <__assert_fail@plt>
   14f3c:	cmp	r3, #0
   14f40:	beq	14f90 <test_print@@Base+0x18f0>
   14f44:	mov	r2, #4
   14f48:	mov	r5, r1
   14f4c:	add	r0, sp, r2
   14f50:	mov	r1, r3
   14f54:	bl	124ec <strncpy@plt>
   14f58:	ldr	r2, [r5, #4]
   14f5c:	ldr	r3, [sp, #4]
   14f60:	cmp	r2, r3
   14f64:	cmpne	r3, #0
   14f68:	beq	14f90 <test_print@@Base+0x18f0>
   14f6c:	ldr	r3, [r4, #36]	; 0x24
   14f70:	movw	r2, #1028	; 0x404
   14f74:	ldr	r1, [pc, #32]	; 14f9c <test_print@@Base+0x18fc>
   14f78:	ldr	r0, [pc, #40]	; 14fa8 <test_print@@Base+0x1908>
   14f7c:	cmp	r3, #0
   14f80:	moveq	r3, #1
   14f84:	streq	r3, [r4, #36]	; 0x24
   14f88:	ldr	r3, [pc, #20]	; 14fa4 <test_print@@Base+0x1904>
   14f8c:	b	14f38 <test_print@@Base+0x1898>
   14f90:	mov	r0, #1
   14f94:	add	sp, sp, #12
   14f98:	pop	{r4, r5, pc}
   14f9c:	andeq	fp, r1, r4, ror #18
   14fa0:	andeq	fp, r1, pc, lsr #19
   14fa4:	andeq	fp, r1, sl, lsr #5
   14fa8:	andeq	fp, r1, lr, asr #19
   14fac:	push	{r4, r5, lr}
   14fb0:	bics	lr, r3, #224	; 0xe0
   14fb4:	ldr	ip, [r2]
   14fb8:	beq	14fd0 <test_print@@Base+0x1930>
   14fbc:	cmp	lr, #1
   14fc0:	ldreq	lr, [pc, #312]	; 15100 <test_print@@Base+0x1a60>
   14fc4:	beq	14fd4 <test_print@@Base+0x1934>
   14fc8:	mov	r0, #3
   14fcc:	b	1504c <test_print@@Base+0x19ac>
   14fd0:	ldr	lr, [pc, #300]	; 15104 <test_print@@Base+0x1a64>
   14fd4:	cmp	ip, #2
   14fd8:	mov	r4, r0
   14fdc:	mov	r5, r1
   14fe0:	add	r0, r0, #4
   14fe4:	add	r1, r1, #3
   14fe8:	bhi	1505c <test_print@@Base+0x19bc>
   14fec:	cmp	ip, #1
   14ff0:	and	r3, r3, #128	; 0x80
   14ff4:	beq	150cc <test_print@@Base+0x1a2c>
   14ff8:	cmp	ip, #2
   14ffc:	bne	150c0 <test_print@@Base+0x1a20>
   15000:	ldrb	r1, [r5]
   15004:	cmp	r3, #0
   15008:	ldrb	r1, [lr, r1, lsr #2]
   1500c:	strb	r1, [r4]
   15010:	ldrb	r1, [r5]
   15014:	ldrb	r0, [r5, #1]
   15018:	lsl	r1, r1, #4
   1501c:	and	r1, r1, #48	; 0x30
   15020:	orr	r1, r1, r0, lsr #4
   15024:	ldrb	r1, [lr, r1]
   15028:	strb	r1, [r4, #1]
   1502c:	ldrb	r1, [r5, #1]
   15030:	lsl	r1, r1, #2
   15034:	and	r1, r1, #60	; 0x3c
   15038:	ldrb	r1, [lr, r1]
   1503c:	strb	r1, [r4, #2]
   15040:	bne	150b8 <test_print@@Base+0x1a18>
   15044:	mov	r0, #0
   15048:	mov	ip, r0
   1504c:	ldr	r3, [r2]
   15050:	sub	ip, r3, ip
   15054:	str	ip, [r2]
   15058:	pop	{r4, r5, pc}
   1505c:	ldrb	r4, [r1, #-3]
   15060:	sub	ip, ip, #3
   15064:	ldrb	r4, [lr, r4, lsr #2]
   15068:	strb	r4, [r0, #-4]
   1506c:	ldrb	r4, [r1, #-3]
   15070:	ldrb	r5, [r1, #-2]
   15074:	lsl	r4, r4, #4
   15078:	and	r4, r4, #48	; 0x30
   1507c:	orr	r4, r4, r5, lsr #4
   15080:	ldrb	r4, [lr, r4]
   15084:	strb	r4, [r0, #-3]
   15088:	ldrb	r4, [r1, #-2]
   1508c:	ldrb	r5, [r1, #-1]
   15090:	lsl	r4, r4, #2
   15094:	and	r4, r4, #60	; 0x3c
   15098:	orr	r4, r4, r5, lsr #6
   1509c:	ldrb	r4, [lr, r4]
   150a0:	strb	r4, [r0, #-2]
   150a4:	ldrb	r4, [r1, #-1]
   150a8:	and	r4, r4, #63	; 0x3f
   150ac:	ldrb	r4, [lr, r4]
   150b0:	strb	r4, [r0, #-1]
   150b4:	b	14fd4 <test_print@@Base+0x1934>
   150b8:	mov	r3, #61	; 0x3d
   150bc:	strb	r3, [r4, #3]
   150c0:	mov	ip, #0
   150c4:	mov	r0, ip
   150c8:	b	1504c <test_print@@Base+0x19ac>
   150cc:	ldrb	r1, [r5]
   150d0:	cmp	r3, #0
   150d4:	ldrb	r1, [lr, r1, lsr #2]
   150d8:	strb	r1, [r4]
   150dc:	ldrb	r1, [r5]
   150e0:	lsl	r1, r1, #4
   150e4:	and	r1, r1, #48	; 0x30
   150e8:	ldrb	r1, [lr, r1]
   150ec:	strb	r1, [r4, #1]
   150f0:	beq	15044 <test_print@@Base+0x19a4>
   150f4:	mov	r3, #61	; 0x3d
   150f8:	strb	r3, [r4, #2]
   150fc:	b	150bc <test_print@@Base+0x1a1c>
   15100:	andeq	fp, r1, r9, ror #19
   15104:	andeq	fp, r1, sl, lsr #20
   15108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1510c:	sub	sp, sp, #180	; 0xb4
   15110:	subs	r1, r0, #0
   15114:	vstr	d0, [sp, #64]	; 0x40
   15118:	str	r1, [sp, #104]	; 0x68
   1511c:	ldrd	r6, [sp, #64]	; 0x40
   15120:	bne	15138 <test_print@@Base+0x1a98>
   15124:	ldr	r3, [pc, #1140]	; 155a0 <test_print@@Base+0x1f00>
   15128:	mov	r2, #189	; 0xbd
   1512c:	ldr	r1, [pc, #1136]	; 155a4 <test_print@@Base+0x1f04>
   15130:	ldr	r0, [pc, #1136]	; 155a8 <test_print@@Base+0x1f08>
   15134:	bl	12534 <__assert_fail@plt>
   15138:	ldr	r5, [pc, #1132]	; 155ac <test_print@@Base+0x1f0c>
   1513c:	adds	r2, r6, r6
   15140:	mov	r4, #0
   15144:	adc	r3, r7, r7
   15148:	cmp	r3, r5
   1514c:	cmpeq	r2, r4
   15150:	bls	15170 <test_print@@Base+0x1ad0>
   15154:	mov	r3, r6
   15158:	mov	r2, r7
   1515c:	ldr	r1, [pc, #1100]	; 155b0 <test_print@@Base+0x1f10>
   15160:	bl	12504 <sprintf@plt>
   15164:	mov	r0, #21
   15168:	add	sp, sp, #180	; 0xb4
   1516c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15170:	cmp	r6, #0
   15174:	ldr	r4, [sp, #104]	; 0x68
   15178:	sbcs	r3, r7, #0
   1517c:	bge	1519c <test_print@@Base+0x1afc>
   15180:	vldr	d7, [sp, #64]	; 0x40
   15184:	mov	r3, #45	; 0x2d
   15188:	strb	r3, [r4], #1
   1518c:	add	r3, r7, #-2147483648	; 0x80000000
   15190:	mov	r7, r3
   15194:	vneg.f64	d7, d7
   15198:	vstr	d7, [sp, #64]	; 0x40
   1519c:	orrs	r3, r6, r7
   151a0:	bne	151c0 <test_print@@Base+0x1b20>
   151a4:	mov	r3, #48	; 0x30
   151a8:	strb	r3, [r4]
   151ac:	mov	r3, #0
   151b0:	strb	r3, [r4, #1]!
   151b4:	ldr	r3, [sp, #104]	; 0x68
   151b8:	sub	r0, r4, r3
   151bc:	b	15168 <test_print@@Base+0x1ac8>
   151c0:	ldr	r3, [pc, #1004]	; 155b4 <test_print@@Base+0x1f14>
   151c4:	mov	r2, #0
   151c8:	cmp	r7, r3
   151cc:	cmpeq	r6, r2
   151d0:	bne	151f8 <test_print@@Base+0x1b58>
   151d4:	mov	r3, #105	; 0x69
   151d8:	strb	r3, [r4]
   151dc:	mov	r3, #110	; 0x6e
   151e0:	strb	r3, [r4, #1]
   151e4:	mov	r3, #102	; 0x66
   151e8:	strb	r3, [r4, #2]
   151ec:	mov	r3, #0
   151f0:	strb	r3, [r4, #3]!
   151f4:	b	151b4 <test_print@@Base+0x1b14>
   151f8:	ldrd	r2, [sp, #64]	; 0x40
   151fc:	mov	r0, #0
   15200:	mov	r1, #0
   15204:	strd	r0, [sp, #56]	; 0x38
   15208:	bic	r1, r3, #-2147483648	; 0x80000000
   1520c:	mov	sl, r2
   15210:	ubfx	fp, r3, #0, #20
   15214:	lsr	r1, r1, #20
   15218:	lsl	r1, r1, #20
   1521c:	str	r1, [sp, #60]	; 0x3c
   15220:	ldrd	r0, [sp, #56]	; 0x38
   15224:	orrs	r2, r0, r1
   15228:	bne	15258 <test_print@@Base+0x1bb8>
   1522c:	orrs	r3, sl, fp
   15230:	beq	15270 <test_print@@Base+0x1bd0>
   15234:	ldr	r3, [pc, #892]	; 155b8 <test_print@@Base+0x1f18>
   15238:	mov	r1, sl
   1523c:	mov	lr, fp
   15240:	mov	r2, r3
   15244:	mov	ip, #0
   15248:	str	r1, [sp, #32]
   1524c:	ldr	r0, [pc, #872]	; 155bc <test_print@@Base+0x1f1c>
   15250:	str	lr, [sp, #36]	; 0x24
   15254:	b	15294 <test_print@@Base+0x1bf4>
   15258:	ubfx	r3, r3, #20, #11
   1525c:	adds	r1, sl, #0
   15260:	adc	lr, fp, #1048576	; 0x100000
   15264:	sub	r3, r3, #1072	; 0x430
   15268:	sub	r3, r3, #3
   1526c:	b	15240 <test_print@@Base+0x1ba0>
   15270:	bl	14da8 <test_print@@Base+0x1708>
   15274:	ldr	r6, [sp, #32]
   15278:	ldr	r2, [sp, #36]	; 0x24
   1527c:	lsl	r2, r2, #10
   15280:	orr	r2, r2, r6, lsr #22
   15284:	lsl	r6, r6, #10
   15288:	str	r2, [sp, #36]	; 0x24
   1528c:	mov	r2, r5
   15290:	str	r6, [sp, #32]
   15294:	ldr	r6, [sp, #36]	; 0x24
   15298:	sub	r5, r2, #10
   1529c:	str	ip, [sp, #88]	; 0x58
   152a0:	and	r6, r6, r0
   152a4:	str	r6, [sp, #92]	; 0x5c
   152a8:	ldrd	r6, [sp, #88]	; 0x58
   152ac:	orrs	r6, r6, r7
   152b0:	beq	15274 <test_print@@Base+0x1bd4>
   152b4:	ldrd	r6, [sp, #32]
   152b8:	mov	ip, r2
   152bc:	sub	r2, r2, #1
   152c0:	cmp	r6, #0
   152c4:	sbcs	r0, r7, #0
   152c8:	bge	15370 <test_print@@Base+0x1cd0>
   152cc:	adds	r2, r1, r1
   152d0:	sub	r5, r3, #11
   152d4:	adc	r0, lr, lr
   152d8:	adds	r8, r2, #1
   152dc:	adc	r9, r0, #0
   152e0:	str	r0, [sp, #88]	; 0x58
   152e4:	sub	r0, r3, #1
   152e8:	lsl	r6, r9, #10
   152ec:	lsl	r7, r8, #10
   152f0:	orr	r6, r6, r8, lsr #22
   152f4:	mov	r8, r7
   152f8:	mov	r9, r6
   152fc:	mov	r6, #0
   15300:	str	r6, [sp, #72]	; 0x48
   15304:	lsr	r6, r9, #22
   15308:	lsl	r6, r6, #22
   1530c:	str	r6, [sp, #76]	; 0x4c
   15310:	sub	r6, r5, #10
   15314:	str	r6, [sp, #108]	; 0x6c
   15318:	ldrd	r6, [sp, #72]	; 0x48
   1531c:	orrs	r6, r6, r7
   15320:	beq	1538c <test_print@@Base+0x1cec>
   15324:	cmp	r8, #0
   15328:	mov	r6, r5
   1532c:	sbcs	r7, r9, #0
   15330:	sub	r5, r5, #1
   15334:	bge	15394 <test_print@@Base+0x1cf4>
   15338:	vldr	d7, [sp, #64]	; 0x40
   1533c:	vcmpe.f64	d7, #0.0
   15340:	vmrs	APSR_nzcv, fpscr
   15344:	ble	1535c <test_print@@Base+0x1cbc>
   15348:	vldr	d7, [pc, #576]	; 15590 <test_print@@Base+0x1ef0>
   1534c:	vldr	d6, [sp, #64]	; 0x40
   15350:	vcmpe.f64	d6, d7
   15354:	vmrs	APSR_nzcv, fpscr
   15358:	bls	153a0 <test_print@@Base+0x1d00>
   1535c:	ldr	r3, [pc, #604]	; 155c0 <test_print@@Base+0x1f20>
   15360:	mov	r2, #138	; 0x8a
   15364:	ldr	r1, [pc, #568]	; 155a4 <test_print@@Base+0x1f04>
   15368:	ldr	r0, [pc, #596]	; 155c4 <test_print@@Base+0x1f24>
   1536c:	b	15134 <test_print@@Base+0x1a94>
   15370:	ldr	r0, [sp, #32]
   15374:	adds	r0, r0, r0
   15378:	str	r0, [sp, #32]
   1537c:	ldr	r0, [sp, #36]	; 0x24
   15380:	adc	r0, r0, r0
   15384:	str	r0, [sp, #36]	; 0x24
   15388:	b	152b4 <test_print@@Base+0x1c14>
   1538c:	ldr	r5, [sp, #108]	; 0x6c
   15390:	b	152e8 <test_print@@Base+0x1c48>
   15394:	adds	r8, r8, r8
   15398:	adc	r9, r9, r9
   1539c:	b	15324 <test_print@@Base+0x1c84>
   153a0:	orrs	r5, sl, fp
   153a4:	ldr	r7, [sp, #56]	; 0x38
   153a8:	moveq	r5, #1
   153ac:	movne	r5, #0
   153b0:	ldr	sl, [sp, #60]	; 0x3c
   153b4:	orrs	r7, r7, sl
   153b8:	moveq	r5, #0
   153bc:	cmp	r5, #0
   153c0:	beq	1557c <test_print@@Base+0x1edc>
   153c4:	lsl	fp, lr, #2
   153c8:	sub	r0, r3, #2
   153cc:	lsl	r2, r1, #2
   153d0:	orr	fp, fp, r1, lsr #30
   153d4:	subs	r2, r2, #1
   153d8:	sbc	fp, fp, #0
   153dc:	sub	r7, r0, r6
   153e0:	vldr	d6, [pc, #432]	; 15598 <test_print@@Base+0x1ef8>
   153e4:	lsl	fp, fp, r7
   153e8:	sub	r1, r7, #32
   153ec:	rsb	r3, r7, #32
   153f0:	lsl	r7, r2, r7
   153f4:	orr	fp, fp, r2, lsl r1
   153f8:	orr	fp, fp, r2, lsr r3
   153fc:	mvn	r3, #60	; 0x3c
   15400:	sub	r3, r3, ip
   15404:	vmov	s14, r3
   15408:	vcvt.f64.s32	d7, s14
   1540c:	vmul.f64	d7, d7, d6
   15410:	vcmpe.f64	d7, #0.0
   15414:	vcvt.s32.f64	s13, d7
   15418:	vmov	r3, s13
   1541c:	vmrs	APSR_nzcv, fpscr
   15420:	bmi	15438 <test_print@@Base+0x1d98>
   15424:	vcvt.f64.s32	d6, s13
   15428:	vsub.f64	d7, d7, d6
   1542c:	vcmp.f64	d7, #0.0
   15430:	vmrs	APSR_nzcv, fpscr
   15434:	addne	r3, r3, #1
   15438:	add	r3, r3, #344	; 0x158
   1543c:	ldr	r5, [pc, #388]	; 155c8 <test_print@@Base+0x1f28>
   15440:	add	r2, r3, #10
   15444:	add	r3, r3, #3
   15448:	str	ip, [sp]
   1544c:	cmp	r3, #0
   15450:	movlt	r3, r2
   15454:	asr	r3, r3, #3
   15458:	add	r1, r5, #304	; 0x130
   1545c:	add	r3, r3, #1
   15460:	lsl	r3, r3, #4
   15464:	add	r2, r1, r3
   15468:	ldrd	r0, [r1, r3]
   1546c:	ldrsh	r3, [r2, #10]
   15470:	ldrsh	sl, [r2, #8]
   15474:	mov	r2, r0
   15478:	str	r3, [sp, #108]	; 0x6c
   1547c:	mov	r3, r1
   15480:	strd	r2, [sp, #8]
   15484:	str	sl, [sp, #16]
   15488:	strd	r0, [sp, #88]	; 0x58
   1548c:	add	r0, sp, #128	; 0x80
   15490:	ldrd	r2, [sp, #32]
   15494:	bl	14d14 <test_print@@Base+0x1674>
   15498:	ldrd	r2, [sp, #128]	; 0x80
   1549c:	add	r0, sp, #160	; 0xa0
   154a0:	str	r6, [sp]
   154a4:	str	sl, [sp, #16]
   154a8:	strd	r2, [sp, #56]	; 0x38
   154ac:	ldr	r3, [sp, #136]	; 0x88
   154b0:	str	r3, [sp, #72]	; 0x48
   154b4:	ldrd	r2, [sp, #88]	; 0x58
   154b8:	strd	r2, [sp, #8]
   154bc:	mov	r2, r7
   154c0:	mov	r3, fp
   154c4:	bl	14d14 <test_print@@Base+0x1674>
   154c8:	ldrd	r2, [sp, #88]	; 0x58
   154cc:	add	r0, sp, #144	; 0x90
   154d0:	str	r6, [sp]
   154d4:	ldr	r7, [sp, #160]	; 0xa0
   154d8:	ldr	r1, [sp, #164]	; 0xa4
   154dc:	strd	r2, [sp, #8]
   154e0:	mov	r2, r8
   154e4:	mov	r3, r9
   154e8:	str	sl, [sp, #16]
   154ec:	ldr	fp, [sp, #168]	; 0xa8
   154f0:	str	r1, [sp, #32]
   154f4:	bl	14d14 <test_print@@Base+0x1674>
   154f8:	ldr	r1, [sp, #32]
   154fc:	ldr	r3, [sp, #152]	; 0x98
   15500:	str	r3, [sp, #88]	; 0x58
   15504:	subs	r3, r7, #1
   15508:	str	r3, [sp, #80]	; 0x50
   1550c:	sbc	r3, r1, #0
   15510:	ldr	r2, [sp, #80]	; 0x50
   15514:	str	r3, [sp, #84]	; 0x54
   15518:	ldr	r3, [sp, #144]	; 0x90
   1551c:	adds	r3, r3, #1
   15520:	str	r3, [sp, #40]	; 0x28
   15524:	ldr	r3, [sp, #148]	; 0x94
   15528:	adc	r3, r3, #0
   1552c:	str	r3, [sp, #44]	; 0x2c
   15530:	ldr	r3, [sp, #40]	; 0x28
   15534:	ldrd	r0, [sp, #40]	; 0x28
   15538:	subs	r3, r3, r2
   1553c:	ldr	r2, [sp, #84]	; 0x54
   15540:	str	r3, [sp, #48]	; 0x30
   15544:	ldr	r3, [sp, #44]	; 0x2c
   15548:	sbc	r3, r3, r2
   1554c:	str	r3, [sp, #52]	; 0x34
   15550:	ldrd	r2, [sp, #80]	; 0x50
   15554:	cmp	r3, r1
   15558:	ldr	r3, [sp, #88]	; 0x58
   1555c:	cmpeq	r2, r0
   15560:	movhi	r1, #1
   15564:	movls	r1, #0
   15568:	cmp	fp, r3
   1556c:	orrne	r1, r1, #1
   15570:	cmp	r1, #0
   15574:	beq	155d0 <test_print@@Base+0x1f30>
   15578:	bl	14dcc <test_print@@Base+0x172c>
   1557c:	ldr	r3, [sp, #88]	; 0x58
   15580:	subs	r2, r2, #1
   15584:	sbc	fp, r3, #0
   15588:	b	153dc <test_print@@Base+0x1d3c>
   1558c:	nop	{0}
   15590:			; <UNDEFINED> instruction: 0xffffffff
   15594:	svcvc	0x00efffff
   15598:			; <UNDEFINED> instruction: 0x509f79fe
   1559c:	svccc	0x00d34413
   155a0:			; <UNDEFINED> instruction: 0x0001b2b8
   155a4:	andeq	fp, r1, fp, ror #20
   155a8:	andeq	fp, r1, r2, asr #21
   155ac:			; <UNDEFINED> instruction: 0xffe00000
   155b0:	andeq	fp, r1, r6, asr #21
   155b4:	svcvc	0x00f00000	; IMB
   155b8:			; <UNDEFINED> instruction: 0xfffffbce
   155bc:			; <UNDEFINED> instruction: 0xffc00000
   155c0:	andeq	fp, r1, ip, asr #5
   155c4:	ldrdeq	fp, [r1], -r4
   155c8:	andeq	fp, r1, r8, lsr #3
   155cc:	strdeq	fp, [r1], -r9
   155d0:	ldr	r2, [sp, #44]	; 0x2c
   155d4:	movw	r0, #1233	; 0x4d1
   155d8:	ldr	r3, [sp, #72]	; 0x48
   155dc:	rsb	ip, r3, #0
   155e0:	mov	r3, #1
   155e4:	sub	r7, ip, #32
   155e8:	rsb	sl, ip, #32
   155ec:	orr	lr, r1, r3, lsl r7
   155f0:	str	sl, [sp, #112]	; 0x70
   155f4:	orr	lr, lr, r3, lsr sl
   155f8:	lsl	r3, r3, ip
   155fc:	str	r3, [sp, #116]	; 0x74
   15600:	ldr	r3, [sp, #40]	; 0x28
   15604:	lsr	r3, r3, ip
   15608:	orr	r3, r3, r2, lsl sl
   1560c:	orr	r3, r3, r2, lsr r7
   15610:	str	r3, [sp, #32]
   15614:	ldr	r3, [sp, #116]	; 0x74
   15618:	subs	r3, r3, #1
   1561c:	str	r3, [sp, #120]	; 0x78
   15620:	sbc	r3, lr, #0
   15624:	ldr	r2, [sp, #120]	; 0x78
   15628:	str	r3, [sp, #124]	; 0x7c
   1562c:	ldr	r3, [sp, #40]	; 0x28
   15630:	and	r8, r3, r2
   15634:	ldr	r3, [sp, #44]	; 0x2c
   15638:	sbc	r2, lr, #0
   1563c:	and	r9, r3, r2
   15640:	ldr	r3, [sp, #72]	; 0x48
   15644:	add	r2, r3, #65	; 0x41
   15648:	ldr	r3, [sp, #32]
   1564c:	mul	r0, r0, r2
   15650:	asr	r0, r0, #12
   15654:	add	r2, r0, #1
   15658:	add	r6, r5, r2, lsl #2
   1565c:	ldr	r6, [r6, #1696]	; 0x6a0
   15660:	cmp	r3, r6
   15664:	sub	r3, r4, #1
   15668:	movcc	r2, r0
   1566c:	add	r5, r5, r2, lsl #2
   15670:	str	r3, [sp, #80]	; 0x50
   15674:	ldr	r0, [r5, #1696]	; 0x6a0
   15678:	cmp	r2, #0
   1567c:	add	r5, r1, #1
   15680:	sub	r6, r2, #1
   15684:	bgt	157a4 <test_print@@Base+0x2104>
   15688:	rsb	r6, ip, #32
   1568c:	mov	r5, r1
   15690:	mov	r0, #1
   15694:	mov	r1, #0
   15698:	mov	r3, #10
   1569c:	add	r2, r5, r2
   156a0:	str	r6, [sp, #80]	; 0x50
   156a4:	sub	r6, ip, #32
   156a8:	str	r6, [sp, #96]	; 0x60
   156ac:	mul	sl, r3, r1
   156b0:	umull	r0, r1, r0, r3
   156b4:	umull	r6, r7, r8, r3
   156b8:	add	r1, sl, r1
   156bc:	ldr	sl, [sp, #52]	; 0x34
   156c0:	mla	r7, r3, r9, r7
   156c4:	mul	sl, r3, sl
   156c8:	str	sl, [sp, #32]
   156cc:	ldr	sl, [sp, #48]	; 0x30
   156d0:	umull	sl, fp, sl, r3
   156d4:	strd	sl, [sp, #48]	; 0x30
   156d8:	ldr	fp, [sp, #32]
   156dc:	ldr	sl, [sp, #52]	; 0x34
   156e0:	add	sl, fp, sl
   156e4:	ldr	fp, [sp, #80]	; 0x50
   156e8:	str	sl, [sp, #52]	; 0x34
   156ec:	lsr	sl, r6, ip
   156f0:	orr	sl, sl, r7, lsl fp
   156f4:	ldr	fp, [sp, #96]	; 0x60
   156f8:	orr	sl, sl, r7, lsr fp
   156fc:	add	sl, sl, #48	; 0x30
   15700:	strb	sl, [r4, r5]
   15704:	add	r5, r5, #1
   15708:	ldr	sl, [sp, #120]	; 0x78
   1570c:	and	r8, sl, r6
   15710:	ldr	sl, [sp, #124]	; 0x7c
   15714:	sub	r6, r2, r5
   15718:	and	r9, sl, r7
   1571c:	ldrd	sl, [sp, #48]	; 0x30
   15720:	cmp	fp, r9
   15724:	cmpeq	sl, r8
   15728:	bls	156ac <test_print@@Base+0x200c>
   1572c:	ldr	r3, [sp, #40]	; 0x28
   15730:	ldr	r2, [sp, #56]	; 0x38
   15734:	ldrd	sl, [sp, #56]	; 0x38
   15738:	subs	r3, r3, r2
   1573c:	ldr	r2, [sp, #60]	; 0x3c
   15740:	str	r3, [sp, #32]
   15744:	ldr	r3, [sp, #44]	; 0x2c
   15748:	sbc	ip, r3, r2
   1574c:	ldrd	r2, [sp, #40]	; 0x28
   15750:	cmp	fp, r3
   15754:	ldr	r3, [sp, #72]	; 0x48
   15758:	cmpeq	sl, r2
   1575c:	ldr	r2, [sp, #88]	; 0x58
   15760:	movhi	r7, #1
   15764:	movls	r7, #0
   15768:	cmp	r3, r2
   1576c:	orrne	r7, r7, #1
   15770:	cmp	r7, #0
   15774:	bne	15578 <test_print@@Base+0x1ed8>
   15778:	ldr	r2, [sp, #32]
   1577c:	mul	r3, r0, ip
   15780:	strd	r8, [sp, #8]
   15784:	strd	r0, [sp, #24]
   15788:	str	lr, [sp, #20]
   1578c:	mla	ip, r2, r1, r3
   15790:	ldr	r1, [sp, #116]	; 0x74
   15794:	umull	r2, r3, r0, r2
   15798:	add	r3, ip, r3
   1579c:	str	r1, [sp, #16]
   157a0:	b	15874 <test_print@@Base+0x21d4>
   157a4:	ldr	r3, [sp, #32]
   157a8:	ldrd	sl, [sp, #48]	; 0x30
   157ac:	udiv	r2, r3, r0
   157b0:	ldr	r3, [sp, #80]	; 0x50
   157b4:	add	r1, r2, #48	; 0x30
   157b8:	strb	r1, [r3, #1]!
   157bc:	str	r3, [sp, #80]	; 0x50
   157c0:	ldr	r3, [sp, #32]
   157c4:	ldr	r1, [sp, #112]	; 0x70
   157c8:	mls	r3, r0, r2, r3
   157cc:	mov	r2, #0
   157d0:	orr	r2, r2, r3, lsl r7
   157d4:	str	r3, [sp, #32]
   157d8:	orr	r2, r2, r3, lsr r1
   157dc:	lsl	r1, r3, ip
   157e0:	adds	r3, r1, r8
   157e4:	str	r3, [sp, #96]	; 0x60
   157e8:	adc	r3, r2, r9
   157ec:	str	r3, [sp, #100]	; 0x64
   157f0:	ldrd	r2, [sp, #96]	; 0x60
   157f4:	cmp	fp, r3
   157f8:	cmpeq	sl, r2
   157fc:	bls	158b8 <test_print@@Base+0x2218>
   15800:	ldr	r3, [sp, #40]	; 0x28
   15804:	ldrd	sl, [sp, #40]	; 0x28
   15808:	ldr	r2, [sp, #56]	; 0x38
   1580c:	ldrd	r8, [sp, #56]	; 0x38
   15810:	ldr	r1, [sp, #60]	; 0x3c
   15814:	subs	r2, r3, r2
   15818:	ldr	r3, [sp, #44]	; 0x2c
   1581c:	ldr	lr, [sp, #72]	; 0x48
   15820:	sbc	r3, r3, r1
   15824:	cmp	r9, fp
   15828:	cmpeq	r8, sl
   1582c:	ldr	r8, [sp, #88]	; 0x58
   15830:	movhi	r1, #1
   15834:	movls	r1, #0
   15838:	cmp	lr, r8
   1583c:	orrne	r1, r1, #1
   15840:	cmp	r1, #0
   15844:	bne	15578 <test_print@@Base+0x1ed8>
   15848:	orr	r7, r1, r0, lsl r7
   1584c:	ldr	r1, [sp, #112]	; 0x70
   15850:	mov	r8, #1
   15854:	lsl	ip, r0, ip
   15858:	mov	r9, #0
   1585c:	str	ip, [sp, #16]
   15860:	orr	r7, r7, r0, lsr r1
   15864:	ldrd	r0, [sp, #96]	; 0x60
   15868:	strd	r8, [sp, #24]
   1586c:	strd	r0, [sp, #8]
   15870:	str	r7, [sp, #20]
   15874:	ldrd	r0, [sp, #48]	; 0x30
   15878:	strd	r0, [sp]
   1587c:	mov	r1, r5
   15880:	mov	r0, r4
   15884:	bl	143a4 <test_print@@Base+0xd04>
   15888:	ldr	r3, [sp, #108]	; 0x6c
   1588c:	cmp	r0, #0
   15890:	sub	r7, r6, r3
   15894:	bne	158cc <test_print@@Base+0x222c>
   15898:	mov	r0, r4
   1589c:	ldr	r1, [pc, #-728]	; 155cc <test_print@@Base+0x1f2c>
   158a0:	ldrd	r2, [sp, #64]	; 0x40
   158a4:	bl	12504 <sprintf@plt>
   158a8:	ldr	r3, [sp, #104]	; 0x68
   158ac:	sub	r4, r4, r3
   158b0:	add	r0, r4, r0
   158b4:	b	15168 <test_print@@Base+0x1ac8>
   158b8:	mov	r3, #10
   158bc:	mov	r2, r6
   158c0:	mov	r1, r5
   158c4:	udiv	r0, r0, r3
   158c8:	b	15678 <test_print@@Base+0x1fd8>
   158cc:	ldr	r3, [sp, #108]	; 0x6c
   158d0:	cmp	r5, #2
   158d4:	movge	r0, r5
   158d8:	movlt	r0, #2
   158dc:	sub	r6, r3, r6
   158e0:	cmp	r0, r6
   158e4:	suble	r0, r0, #1
   158e8:	movgt	r0, r6
   158ec:	cmp	r7, #0
   158f0:	bge	159e8 <test_print@@Base+0x2348>
   158f4:	add	r3, r7, r5
   158f8:	cmp	r6, r5
   158fc:	cmnge	r3, #2
   15900:	blt	15970 <test_print@@Base+0x22d0>
   15904:	rsb	r0, r5, #2
   15908:	mov	r2, r5
   1590c:	sub	r0, r0, r7
   15910:	mov	r1, r4
   15914:	add	r0, r4, r0
   15918:	bl	1242c <memmove@plt>
   1591c:	mov	r3, #46	; 0x2e
   15920:	mov	r2, #2
   15924:	mov	r1, #48	; 0x30
   15928:	strb	r3, [r4, #1]
   1592c:	sub	r3, r2, r7
   15930:	sub	r3, r3, r5
   15934:	strb	r1, [r4]
   15938:	cmp	r3, r2
   1593c:	bgt	15964 <test_print@@Base+0x22c4>
   15940:	cmp	r3, #2
   15944:	addge	r3, r5, r3
   15948:	addlt	r3, r5, #2
   1594c:	mov	r2, #0
   15950:	add	r0, r4, r3
   15954:	strb	r2, [r4, r3]
   15958:	ldr	r3, [sp, #104]	; 0x68
   1595c:	sub	r0, r0, r3
   15960:	b	15168 <test_print@@Base+0x1ac8>
   15964:	strb	r1, [r4, r2]
   15968:	add	r2, r2, #1
   1596c:	b	15938 <test_print@@Base+0x2298>
   15970:	cmp	r5, #1
   15974:	addne	r3, r4, r5
   15978:	movne	r1, r3
   1597c:	bne	159a8 <test_print@@Base+0x2308>
   15980:	mov	r3, #101	; 0x65
   15984:	add	r6, r5, #1
   15988:	add	r1, r4, r6
   1598c:	mov	r0, r7
   15990:	strb	r3, [r4, r5]
   15994:	bl	145f0 <test_print@@Base+0xf50>
   15998:	add	r3, r6, r0
   1599c:	b	1594c <test_print@@Base+0x22ac>
   159a0:	ldrb	r2, [r3, #-1]
   159a4:	strb	r2, [r3], #-1
   159a8:	sub	r2, r1, r3
   159ac:	cmp	r0, r2
   159b0:	bgt	159a0 <test_print@@Base+0x2300>
   159b4:	sub	r2, r5, r0
   159b8:	mov	r1, #46	; 0x2e
   159bc:	adds	r0, r0, r7
   159c0:	add	r3, r5, #1
   159c4:	strb	r1, [r4, r2]
   159c8:	beq	1594c <test_print@@Base+0x22ac>
   159cc:	mov	r2, #101	; 0x65
   159d0:	add	r5, r5, #2
   159d4:	add	r1, r4, r5
   159d8:	strb	r2, [r4, r3]
   159dc:	bl	145f0 <test_print@@Base+0xf50>
   159e0:	add	r3, r5, r0
   159e4:	b	1594c <test_print@@Base+0x22ac>
   159e8:	cmp	r7, #2
   159ec:	bgt	15980 <test_print@@Base+0x22e0>
   159f0:	cmp	r7, #0
   159f4:	addne	r3, r4, r5
   159f8:	movne	r1, #48	; 0x30
   159fc:	addne	r2, r3, r7
   15a00:	bne	15a10 <test_print@@Base+0x2370>
   15a04:	mov	r3, r5
   15a08:	b	1594c <test_print@@Base+0x22ac>
   15a0c:	strb	r1, [r3], #1
   15a10:	cmp	r2, r3
   15a14:	bne	15a0c <test_print@@Base+0x236c>
   15a18:	add	r3, r7, r5
   15a1c:	b	1594c <test_print@@Base+0x22ac>

00015a20 <flatcc_json_printer_error_string@@Base>:
   15a20:	cmp	r0, #3
   15a24:	ldrls	r3, [pc, #12]	; 15a38 <flatcc_json_printer_error_string@@Base+0x18>
   15a28:	addls	r3, r3, r0, lsl #2
   15a2c:	ldrls	r0, [r3, #1740]	; 0x6cc
   15a30:	ldrhi	r0, [pc, #4]	; 15a3c <flatcc_json_printer_error_string@@Base+0x1c>
   15a34:	bx	lr
   15a38:	andeq	fp, r1, r8, lsr #3
   15a3c:	strdeq	fp, [r1], -pc	; <UNPREDICTABLE>

00015a40 <flatcc_json_printer_fmt_float@@Base>:
   15a40:	vcvt.f64.f32	d0, s0
   15a44:	b	15108 <test_print@@Base+0x1a68>

00015a48 <flatcc_json_printer_fmt_double@@Base>:
   15a48:	b	15108 <test_print@@Base+0x1a68>

00015a4c <flatcc_json_printer_fmt_bool@@Base>:
   15a4c:	cmp	r1, #0
   15a50:	beq	15a68 <flatcc_json_printer_fmt_bool@@Base+0x1c>
   15a54:	ldr	r3, [pc, #40]	; 15a84 <flatcc_json_printer_fmt_bool@@Base+0x38>
   15a58:	ldr	r3, [r3]
   15a5c:	str	r3, [r0]
   15a60:	mov	r0, #4
   15a64:	bx	lr
   15a68:	ldr	r3, [pc, #24]	; 15a88 <flatcc_json_printer_fmt_bool@@Base+0x3c>
   15a6c:	ldr	r2, [r3]
   15a70:	ldrb	r3, [r3, #4]
   15a74:	str	r2, [r0]
   15a78:	strb	r3, [r0, #4]
   15a7c:	mov	r0, #5
   15a80:	bx	lr
   15a84:	andeq	fp, r1, r7, lsl #22
   15a88:	andeq	fp, r1, ip, lsl #22

00015a8c <flatcc_json_printer_string@@Base>:
   15a8c:	b	147a4 <test_print@@Base+0x1104>

00015a90 <flatcc_json_printer_write@@Base>:
   15a90:	b	14704 <test_print@@Base+0x1064>

00015a94 <flatcc_json_printer_nl@@Base>:
   15a94:	ldr	r3, [r0, #20]
   15a98:	mov	r2, #10
   15a9c:	add	r1, r3, #1
   15aa0:	str	r1, [r0, #20]
   15aa4:	strb	r2, [r3]
   15aa8:	b	14bb8 <test_print@@Base+0x1518>

00015aac <flatcc_json_printer_char@@Base>:
   15aac:	ldr	r3, [r0, #20]
   15ab0:	add	r2, r3, #1
   15ab4:	str	r2, [r0, #20]
   15ab8:	strb	r1, [r3]
   15abc:	bx	lr

00015ac0 <flatcc_json_printer_indent@@Base>:
   15ac0:	b	149d4 <test_print@@Base+0x1334>

00015ac4 <flatcc_json_printer_add_level@@Base>:
   15ac4:	ldr	r3, [r0, #32]
   15ac8:	add	r1, r3, r1
   15acc:	str	r1, [r0, #32]
   15ad0:	bx	lr

00015ad4 <flatcc_json_printer_get_level@@Base>:
   15ad4:	ldr	r0, [r0, #32]
   15ad8:	bx	lr

00015adc <flatcc_json_printer_uint8@@Base>:
   15adc:	push	{r4, lr}
   15ae0:	mov	r4, r0
   15ae4:	mov	r0, r1
   15ae8:	ldr	r1, [r4, #20]
   15aec:	bl	14c58 <test_print@@Base+0x15b8>
   15af0:	ldr	r3, [r4, #20]
   15af4:	add	r0, r3, r0
   15af8:	str	r0, [r4, #20]
   15afc:	pop	{r4, pc}

00015b00 <flatcc_json_printer_uint16@@Base>:
   15b00:	push	{r4, lr}
   15b04:	mov	r4, r0
   15b08:	mov	r0, r1
   15b0c:	ldr	r1, [r4, #20]
   15b10:	bl	138f0 <test_print@@Base+0x250>
   15b14:	ldr	r3, [r4, #20]
   15b18:	add	r0, r3, r0
   15b1c:	str	r0, [r4, #20]
   15b20:	pop	{r4, pc}

00015b24 <flatcc_json_printer_uint32@@Base>:
   15b24:	push	{r4, lr}
   15b28:	mov	r4, r0
   15b2c:	mov	r0, r1
   15b30:	ldr	r1, [r4, #20]
   15b34:	bl	13a34 <test_print@@Base+0x394>
   15b38:	ldr	r3, [r4, #20]
   15b3c:	add	r0, r3, r0
   15b40:	str	r0, [r4, #20]
   15b44:	pop	{r4, pc}

00015b48 <flatcc_json_printer_uint64@@Base>:
   15b48:	push	{r4, lr}
   15b4c:	mov	r4, r0
   15b50:	mov	r1, r3
   15b54:	mov	r0, r2
   15b58:	ldr	r2, [r4, #20]
   15b5c:	bl	13ce4 <test_print@@Base+0x644>
   15b60:	ldr	r3, [r4, #20]
   15b64:	add	r0, r3, r0
   15b68:	str	r0, [r4, #20]
   15b6c:	pop	{r4, pc}

00015b70 <flatcc_json_printer_int8@@Base>:
   15b70:	push	{r4, lr}
   15b74:	mov	r4, r0
   15b78:	mov	r0, r1
   15b7c:	ldr	r1, [r4, #20]
   15b80:	bl	14ce8 <test_print@@Base+0x1648>
   15b84:	ldr	r3, [r4, #20]
   15b88:	add	r0, r3, r0
   15b8c:	str	r0, [r4, #20]
   15b90:	pop	{r4, pc}

00015b94 <flatcc_json_printer_int16@@Base>:
   15b94:	push	{r4, lr}
   15b98:	mov	r4, r0
   15b9c:	mov	r0, r1
   15ba0:	ldr	r1, [r4, #20]
   15ba4:	bl	14324 <test_print@@Base+0xc84>
   15ba8:	ldr	r3, [r4, #20]
   15bac:	add	r0, r3, r0
   15bb0:	str	r0, [r4, #20]
   15bb4:	pop	{r4, pc}

00015bb8 <flatcc_json_printer_int32@@Base>:
   15bb8:	push	{r4, lr}
   15bbc:	mov	r4, r0
   15bc0:	mov	r0, r1
   15bc4:	ldr	r1, [r4, #20]
   15bc8:	bl	14350 <test_print@@Base+0xcb0>
   15bcc:	ldr	r3, [r4, #20]
   15bd0:	add	r0, r3, r0
   15bd4:	str	r0, [r4, #20]
   15bd8:	pop	{r4, pc}

00015bdc <flatcc_json_printer_int64@@Base>:
   15bdc:	push	{r4, lr}
   15be0:	mov	r4, r0
   15be4:	mov	r1, r3
   15be8:	mov	r0, r2
   15bec:	ldr	r2, [r4, #20]
   15bf0:	bl	14374 <test_print@@Base+0xcd4>
   15bf4:	ldr	r3, [r4, #20]
   15bf8:	add	r0, r3, r0
   15bfc:	str	r0, [r4, #20]
   15c00:	pop	{r4, pc}

00015c04 <flatcc_json_printer_float@@Base>:
   15c04:	push	{r4, lr}
   15c08:	vcvt.f64.f32	d0, s0
   15c0c:	mov	r4, r0
   15c10:	ldr	r0, [r0, #20]
   15c14:	bl	15108 <test_print@@Base+0x1a68>
   15c18:	ldr	r3, [r4, #20]
   15c1c:	add	r0, r3, r0
   15c20:	str	r0, [r4, #20]
   15c24:	pop	{r4, pc}

00015c28 <flatcc_json_printer_double@@Base>:
   15c28:	push	{r4, lr}
   15c2c:	mov	r4, r0
   15c30:	ldr	r0, [r0, #20]
   15c34:	bl	15108 <test_print@@Base+0x1a68>
   15c38:	ldr	r3, [r4, #20]
   15c3c:	add	r0, r3, r0
   15c40:	str	r0, [r4, #20]
   15c44:	pop	{r4, pc}

00015c48 <flatcc_json_printer_enum@@Base>:
   15c48:	b	14958 <test_print@@Base+0x12b8>

00015c4c <flatcc_json_printer_delimit_enum_flags@@Base>:
   15c4c:	ldrb	r3, [r0, #26]
   15c50:	adds	r1, r1, #0
   15c54:	movne	r1, #1
   15c58:	ldr	r2, [r0, #20]
   15c5c:	cmp	r3, #0
   15c60:	movne	r3, r1
   15c64:	mov	r1, #34	; 0x22
   15c68:	moveq	r3, #1
   15c6c:	strb	r1, [r2]
   15c70:	ldr	r1, [r0, #20]
   15c74:	add	r1, r1, r3
   15c78:	str	r1, [r0, #20]
   15c7c:	bx	lr

00015c80 <flatcc_json_printer_enum_flag@@Base>:
   15c80:	push	{r4, lr}
   15c84:	mov	lr, r2
   15c88:	mov	r4, #32
   15c8c:	ldr	r2, [r0, #20]
   15c90:	strb	r4, [r2]
   15c94:	ldr	r2, [r0, #20]
   15c98:	cmp	r1, #0
   15c9c:	movle	r1, r2
   15ca0:	addgt	r1, r2, #1
   15ca4:	mov	r2, r3
   15ca8:	str	r1, [r0, #20]
   15cac:	mov	r1, lr
   15cb0:	pop	{r4, lr}
   15cb4:	b	14704 <test_print@@Base+0x1064>

00015cb8 <flatcc_json_printer_string_field@@Base>:
   15cb8:	push	{r4, r5, r6, r7, r8, lr}
   15cbc:	mov	r5, r1
   15cc0:	mov	r4, r0
   15cc4:	mov	r1, r2
   15cc8:	mov	r0, r5
   15ccc:	mov	r7, r3
   15cd0:	bl	14688 <test_print@@Base+0xfe8>
   15cd4:	subs	r6, r0, #0
   15cd8:	ldr	r8, [sp, #24]
   15cdc:	popeq	{r4, r5, r6, r7, r8, pc}
   15ce0:	ldr	r2, [r5, #16]
   15ce4:	add	r3, r2, #1
   15ce8:	cmp	r2, #0
   15cec:	str	r3, [r5, #16]
   15cf0:	beq	15d08 <flatcc_json_printer_string_field@@Base+0x50>
   15cf4:	ldr	r2, [r4, #20]
   15cf8:	add	r3, r2, #1
   15cfc:	str	r3, [r4, #20]
   15d00:	mov	r3, #44	; 0x2c
   15d04:	strb	r3, [r2]
   15d08:	mov	r1, r7
   15d0c:	mov	r0, r4
   15d10:	mov	r2, r8
   15d14:	bl	14bd4 <test_print@@Base+0x1534>
   15d18:	ldr	r1, [r6]
   15d1c:	mov	r0, r4
   15d20:	add	r1, r6, r1
   15d24:	pop	{r4, r5, r6, r7, r8, lr}
   15d28:	b	14950 <test_print@@Base+0x12b0>

00015d2c <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   15d2c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15d30:	mov	r6, r1
   15d34:	mov	r4, r0
   15d38:	mov	r1, r2
   15d3c:	mov	r0, r6
   15d40:	mov	r9, r3
   15d44:	bl	14688 <test_print@@Base+0xfe8>
   15d48:	subs	r5, r0, #0
   15d4c:	beq	15e2c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x100>
   15d50:	ldr	r2, [r6, #16]
   15d54:	add	r3, r2, #1
   15d58:	cmp	r2, #0
   15d5c:	str	r3, [r6, #16]
   15d60:	beq	15d78 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x4c>
   15d64:	ldr	r2, [r4, #20]
   15d68:	add	r3, r2, #1
   15d6c:	str	r3, [r4, #20]
   15d70:	mov	r3, #44	; 0x2c
   15d74:	strb	r3, [r2]
   15d78:	mov	r1, r9
   15d7c:	mov	r0, r4
   15d80:	ldr	r2, [sp, #40]	; 0x28
   15d84:	ldr	r7, [sp, #44]	; 0x2c
   15d88:	adds	r7, r7, #0
   15d8c:	movne	r7, #1
   15d90:	bl	14bd4 <test_print@@Base+0x1534>
   15d94:	ldr	r3, [r5]
   15d98:	orr	r8, r7, #128	; 0x80
   15d9c:	mov	r1, r8
   15da0:	add	r6, r5, r3
   15da4:	ldr	r3, [r5, r3]
   15da8:	add	r6, r6, #4
   15dac:	str	r3, [sp]
   15db0:	ldr	r3, [r4, #20]
   15db4:	add	r2, r3, #1
   15db8:	str	r2, [r4, #20]
   15dbc:	mov	r2, #34	; 0x22
   15dc0:	strb	r2, [r3]
   15dc4:	ldr	r0, [sp]
   15dc8:	bl	14670 <test_print@@Base+0xfd0>
   15dcc:	ldrd	r2, [r4, #16]
   15dd0:	mov	r9, r0
   15dd4:	add	r3, r3, r0
   15dd8:	cmp	r2, r3
   15ddc:	bhi	15df0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   15de0:	mov	r1, #0
   15de4:	mov	r0, r4
   15de8:	ldr	r3, [r4, #44]	; 0x2c
   15dec:	blx	r3
   15df0:	ldr	r5, [r4, #16]
   15df4:	ldr	r0, [r4, #20]
   15df8:	add	r3, r0, r9
   15dfc:	cmp	r5, r3
   15e00:	bcc	15e34 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x108>
   15e04:	mov	r3, r8
   15e08:	mov	r2, sp
   15e0c:	mov	r1, r6
   15e10:	bl	14fac <test_print@@Base+0x190c>
   15e14:	ldr	r2, [r4, #20]
   15e18:	add	r3, r2, r9
   15e1c:	add	r3, r3, #1
   15e20:	str	r3, [r4, #20]
   15e24:	mov	r3, #34	; 0x22
   15e28:	strb	r3, [r2, r9]
   15e2c:	add	sp, sp, #12
   15e30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e34:	sub	r5, r5, r0
   15e38:	bic	r5, r5, #3
   15e3c:	add	r3, r5, r5, lsl #1
   15e40:	cmp	r3, #3
   15e44:	lsr	r9, r3, #2
   15e48:	bhi	15e60 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x134>
   15e4c:	ldr	r3, [pc, #96]	; 15eb4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x188>
   15e50:	movw	r2, #277	; 0x115
   15e54:	ldr	r1, [pc, #92]	; 15eb8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x18c>
   15e58:	ldr	r0, [pc, #92]	; 15ebc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x190>
   15e5c:	bl	12534 <__assert_fail@plt>
   15e60:	add	r2, sp, #4
   15e64:	mov	r1, r6
   15e68:	str	r9, [sp, #4]
   15e6c:	mov	r3, r7
   15e70:	add	r6, r6, r9
   15e74:	bl	14fac <test_print@@Base+0x190c>
   15e78:	ldr	r3, [r4, #20]
   15e7c:	mov	r1, #0
   15e80:	mov	r0, r4
   15e84:	add	r5, r3, r5
   15e88:	ldr	r3, [sp]
   15e8c:	str	r5, [r4, #20]
   15e90:	sub	r3, r3, r9
   15e94:	str	r3, [sp]
   15e98:	ldr	r3, [r4, #44]	; 0x2c
   15e9c:	blx	r3
   15ea0:	mov	r1, r8
   15ea4:	ldr	r0, [sp]
   15ea8:	bl	14670 <test_print@@Base+0xfd0>
   15eac:	mov	r9, r0
   15eb0:	b	15df0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   15eb4:	andeq	fp, r1, r4, lsl #17
   15eb8:	andeq	fp, r1, r4, ror #18
   15ebc:	andeq	fp, r1, r2, lsl fp

00015ec0 <flatcc_json_printer_uint8_field@@Base>:
   15ec0:	push	{r4, r5, r6, r7, r8, lr}
   15ec4:	mov	r6, r1
   15ec8:	mov	r4, r0
   15ecc:	mov	r1, r2
   15ed0:	mov	r0, r6
   15ed4:	mov	r7, r3
   15ed8:	bl	14688 <test_print@@Base+0xfe8>
   15edc:	cmp	r0, #0
   15ee0:	ldrb	r5, [sp, #28]
   15ee4:	beq	15f58 <flatcc_json_printer_uint8_field@@Base+0x98>
   15ee8:	ldrb	r2, [r0]
   15eec:	cmp	r2, r5
   15ef0:	movne	r5, r2
   15ef4:	bne	15f04 <flatcc_json_printer_uint8_field@@Base+0x44>
   15ef8:	ldrb	r3, [r4, #28]
   15efc:	cmp	r3, #0
   15f00:	popne	{r4, r5, r6, r7, r8, pc}
   15f04:	ldr	r2, [r6, #16]
   15f08:	add	r3, r2, #1
   15f0c:	cmp	r2, #0
   15f10:	str	r3, [r6, #16]
   15f14:	beq	15f2c <flatcc_json_printer_uint8_field@@Base+0x6c>
   15f18:	ldr	r2, [r4, #20]
   15f1c:	add	r3, r2, #1
   15f20:	str	r3, [r4, #20]
   15f24:	mov	r3, #44	; 0x2c
   15f28:	strb	r3, [r2]
   15f2c:	mov	r1, r7
   15f30:	mov	r0, r4
   15f34:	ldr	r2, [sp, #24]
   15f38:	bl	14bd4 <test_print@@Base+0x1534>
   15f3c:	mov	r0, r5
   15f40:	ldr	r1, [r4, #20]
   15f44:	bl	14c58 <test_print@@Base+0x15b8>
   15f48:	ldr	r3, [r4, #20]
   15f4c:	add	r0, r3, r0
   15f50:	str	r0, [r4, #20]
   15f54:	pop	{r4, r5, r6, r7, r8, pc}
   15f58:	ldrb	r3, [r4, #29]
   15f5c:	cmp	r3, #0
   15f60:	bne	15f04 <flatcc_json_printer_uint8_field@@Base+0x44>
   15f64:	pop	{r4, r5, r6, r7, r8, pc}

00015f68 <flatcc_json_printer_uint16_field@@Base>:
   15f68:	push	{r4, r5, r6, r7, r8, lr}
   15f6c:	mov	r6, r1
   15f70:	mov	r4, r0
   15f74:	mov	r1, r2
   15f78:	mov	r0, r6
   15f7c:	mov	r7, r3
   15f80:	bl	14688 <test_print@@Base+0xfe8>
   15f84:	cmp	r0, #0
   15f88:	ldrh	r5, [sp, #28]
   15f8c:	beq	16000 <flatcc_json_printer_uint16_field@@Base+0x98>
   15f90:	ldrh	r2, [r0]
   15f94:	cmp	r2, r5
   15f98:	movne	r5, r2
   15f9c:	bne	15fac <flatcc_json_printer_uint16_field@@Base+0x44>
   15fa0:	ldrb	r3, [r4, #28]
   15fa4:	cmp	r3, #0
   15fa8:	popne	{r4, r5, r6, r7, r8, pc}
   15fac:	ldr	r2, [r6, #16]
   15fb0:	add	r3, r2, #1
   15fb4:	cmp	r2, #0
   15fb8:	str	r3, [r6, #16]
   15fbc:	beq	15fd4 <flatcc_json_printer_uint16_field@@Base+0x6c>
   15fc0:	ldr	r2, [r4, #20]
   15fc4:	add	r3, r2, #1
   15fc8:	str	r3, [r4, #20]
   15fcc:	mov	r3, #44	; 0x2c
   15fd0:	strb	r3, [r2]
   15fd4:	mov	r1, r7
   15fd8:	mov	r0, r4
   15fdc:	ldr	r2, [sp, #24]
   15fe0:	bl	14bd4 <test_print@@Base+0x1534>
   15fe4:	mov	r0, r5
   15fe8:	ldr	r1, [r4, #20]
   15fec:	bl	138f0 <test_print@@Base+0x250>
   15ff0:	ldr	r3, [r4, #20]
   15ff4:	add	r0, r3, r0
   15ff8:	str	r0, [r4, #20]
   15ffc:	pop	{r4, r5, r6, r7, r8, pc}
   16000:	ldrb	r3, [r4, #29]
   16004:	cmp	r3, #0
   16008:	bne	15fac <flatcc_json_printer_uint16_field@@Base+0x44>
   1600c:	pop	{r4, r5, r6, r7, r8, pc}

00016010 <flatcc_json_printer_uint32_field@@Base>:
   16010:	push	{r4, r5, r6, r7, r8, lr}
   16014:	mov	r6, r1
   16018:	mov	r4, r0
   1601c:	mov	r1, r2
   16020:	mov	r0, r6
   16024:	mov	r7, r3
   16028:	bl	14688 <test_print@@Base+0xfe8>
   1602c:	cmp	r0, #0
   16030:	ldr	r5, [sp, #28]
   16034:	beq	160a8 <flatcc_json_printer_uint32_field@@Base+0x98>
   16038:	ldr	r2, [r0]
   1603c:	cmp	r2, r5
   16040:	movne	r5, r2
   16044:	bne	16054 <flatcc_json_printer_uint32_field@@Base+0x44>
   16048:	ldrb	r3, [r4, #28]
   1604c:	cmp	r3, #0
   16050:	popne	{r4, r5, r6, r7, r8, pc}
   16054:	ldr	r2, [r6, #16]
   16058:	add	r3, r2, #1
   1605c:	cmp	r2, #0
   16060:	str	r3, [r6, #16]
   16064:	beq	1607c <flatcc_json_printer_uint32_field@@Base+0x6c>
   16068:	ldr	r2, [r4, #20]
   1606c:	add	r3, r2, #1
   16070:	str	r3, [r4, #20]
   16074:	mov	r3, #44	; 0x2c
   16078:	strb	r3, [r2]
   1607c:	mov	r1, r7
   16080:	mov	r0, r4
   16084:	ldr	r2, [sp, #24]
   16088:	bl	14bd4 <test_print@@Base+0x1534>
   1608c:	mov	r0, r5
   16090:	ldr	r1, [r4, #20]
   16094:	bl	13a34 <test_print@@Base+0x394>
   16098:	ldr	r3, [r4, #20]
   1609c:	add	r0, r3, r0
   160a0:	str	r0, [r4, #20]
   160a4:	pop	{r4, r5, r6, r7, r8, pc}
   160a8:	ldrb	r3, [r4, #29]
   160ac:	cmp	r3, #0
   160b0:	bne	16054 <flatcc_json_printer_uint32_field@@Base+0x44>
   160b4:	pop	{r4, r5, r6, r7, r8, pc}

000160b8 <flatcc_json_printer_uint64_field@@Base>:
   160b8:	push	{r4, r5, r6, r7, r8, lr}
   160bc:	mov	r5, r1
   160c0:	mov	r4, r0
   160c4:	mov	r1, r2
   160c8:	mov	r0, r5
   160cc:	mov	r8, r3
   160d0:	bl	14688 <test_print@@Base+0xfe8>
   160d4:	cmp	r0, #0
   160d8:	ldrd	r6, [sp, #32]
   160dc:	beq	1615c <flatcc_json_printer_uint64_field@@Base+0xa4>
   160e0:	ldrd	r2, [r0]
   160e4:	cmp	r3, r7
   160e8:	cmpeq	r2, r6
   160ec:	movne	r6, r2
   160f0:	movne	r7, r3
   160f4:	bne	16104 <flatcc_json_printer_uint64_field@@Base+0x4c>
   160f8:	ldrb	r3, [r4, #28]
   160fc:	cmp	r3, #0
   16100:	popne	{r4, r5, r6, r7, r8, pc}
   16104:	ldr	r2, [r5, #16]
   16108:	add	r3, r2, #1
   1610c:	cmp	r2, #0
   16110:	str	r3, [r5, #16]
   16114:	beq	1612c <flatcc_json_printer_uint64_field@@Base+0x74>
   16118:	ldr	r2, [r4, #20]
   1611c:	add	r3, r2, #1
   16120:	str	r3, [r4, #20]
   16124:	mov	r3, #44	; 0x2c
   16128:	strb	r3, [r2]
   1612c:	mov	r1, r8
   16130:	mov	r0, r4
   16134:	ldr	r2, [sp, #24]
   16138:	bl	14bd4 <test_print@@Base+0x1534>
   1613c:	mov	r0, r6
   16140:	mov	r1, r7
   16144:	ldr	r2, [r4, #20]
   16148:	bl	13ce4 <test_print@@Base+0x644>
   1614c:	ldr	r3, [r4, #20]
   16150:	add	r0, r3, r0
   16154:	str	r0, [r4, #20]
   16158:	pop	{r4, r5, r6, r7, r8, pc}
   1615c:	ldrb	r3, [r4, #29]
   16160:	cmp	r3, #0
   16164:	bne	16104 <flatcc_json_printer_uint64_field@@Base+0x4c>
   16168:	pop	{r4, r5, r6, r7, r8, pc}

0001616c <flatcc_json_printer_int8_field@@Base>:
   1616c:	push	{r4, r5, r6, r7, r8, lr}
   16170:	mov	r6, r1
   16174:	mov	r4, r0
   16178:	mov	r1, r2
   1617c:	mov	r0, r6
   16180:	mov	r7, r3
   16184:	bl	14688 <test_print@@Base+0xfe8>
   16188:	cmp	r0, #0
   1618c:	ldrsb	r5, [sp, #28]
   16190:	beq	16204 <flatcc_json_printer_int8_field@@Base+0x98>
   16194:	ldrsb	r2, [r0]
   16198:	cmp	r2, r5
   1619c:	movne	r5, r2
   161a0:	bne	161b0 <flatcc_json_printer_int8_field@@Base+0x44>
   161a4:	ldrb	r3, [r4, #28]
   161a8:	cmp	r3, #0
   161ac:	popne	{r4, r5, r6, r7, r8, pc}
   161b0:	ldr	r2, [r6, #16]
   161b4:	add	r3, r2, #1
   161b8:	cmp	r2, #0
   161bc:	str	r3, [r6, #16]
   161c0:	beq	161d8 <flatcc_json_printer_int8_field@@Base+0x6c>
   161c4:	ldr	r2, [r4, #20]
   161c8:	add	r3, r2, #1
   161cc:	str	r3, [r4, #20]
   161d0:	mov	r3, #44	; 0x2c
   161d4:	strb	r3, [r2]
   161d8:	mov	r1, r7
   161dc:	mov	r0, r4
   161e0:	ldr	r2, [sp, #24]
   161e4:	bl	14bd4 <test_print@@Base+0x1534>
   161e8:	mov	r0, r5
   161ec:	ldr	r1, [r4, #20]
   161f0:	bl	14ce8 <test_print@@Base+0x1648>
   161f4:	ldr	r3, [r4, #20]
   161f8:	add	r0, r3, r0
   161fc:	str	r0, [r4, #20]
   16200:	pop	{r4, r5, r6, r7, r8, pc}
   16204:	ldrb	r3, [r4, #29]
   16208:	cmp	r3, #0
   1620c:	bne	161b0 <flatcc_json_printer_int8_field@@Base+0x44>
   16210:	pop	{r4, r5, r6, r7, r8, pc}

00016214 <flatcc_json_printer_int16_field@@Base>:
   16214:	push	{r4, r5, r6, r7, r8, lr}
   16218:	mov	r6, r1
   1621c:	mov	r4, r0
   16220:	mov	r1, r2
   16224:	mov	r0, r6
   16228:	mov	r7, r3
   1622c:	bl	14688 <test_print@@Base+0xfe8>
   16230:	cmp	r0, #0
   16234:	ldrsh	r5, [sp, #28]
   16238:	beq	162ac <flatcc_json_printer_int16_field@@Base+0x98>
   1623c:	ldrsh	r2, [r0]
   16240:	cmp	r2, r5
   16244:	movne	r5, r2
   16248:	bne	16258 <flatcc_json_printer_int16_field@@Base+0x44>
   1624c:	ldrb	r3, [r4, #28]
   16250:	cmp	r3, #0
   16254:	popne	{r4, r5, r6, r7, r8, pc}
   16258:	ldr	r2, [r6, #16]
   1625c:	add	r3, r2, #1
   16260:	cmp	r2, #0
   16264:	str	r3, [r6, #16]
   16268:	beq	16280 <flatcc_json_printer_int16_field@@Base+0x6c>
   1626c:	ldr	r2, [r4, #20]
   16270:	add	r3, r2, #1
   16274:	str	r3, [r4, #20]
   16278:	mov	r3, #44	; 0x2c
   1627c:	strb	r3, [r2]
   16280:	mov	r1, r7
   16284:	mov	r0, r4
   16288:	ldr	r2, [sp, #24]
   1628c:	bl	14bd4 <test_print@@Base+0x1534>
   16290:	mov	r0, r5
   16294:	ldr	r1, [r4, #20]
   16298:	bl	14324 <test_print@@Base+0xc84>
   1629c:	ldr	r3, [r4, #20]
   162a0:	add	r0, r3, r0
   162a4:	str	r0, [r4, #20]
   162a8:	pop	{r4, r5, r6, r7, r8, pc}
   162ac:	ldrb	r3, [r4, #29]
   162b0:	cmp	r3, #0
   162b4:	bne	16258 <flatcc_json_printer_int16_field@@Base+0x44>
   162b8:	pop	{r4, r5, r6, r7, r8, pc}

000162bc <flatcc_json_printer_int32_field@@Base>:
   162bc:	push	{r4, r5, r6, r7, r8, lr}
   162c0:	mov	r6, r1
   162c4:	mov	r4, r0
   162c8:	mov	r1, r2
   162cc:	mov	r0, r6
   162d0:	mov	r7, r3
   162d4:	bl	14688 <test_print@@Base+0xfe8>
   162d8:	cmp	r0, #0
   162dc:	ldr	r5, [sp, #28]
   162e0:	beq	16354 <flatcc_json_printer_int32_field@@Base+0x98>
   162e4:	ldr	r2, [r0]
   162e8:	cmp	r2, r5
   162ec:	movne	r5, r2
   162f0:	bne	16300 <flatcc_json_printer_int32_field@@Base+0x44>
   162f4:	ldrb	r3, [r4, #28]
   162f8:	cmp	r3, #0
   162fc:	popne	{r4, r5, r6, r7, r8, pc}
   16300:	ldr	r2, [r6, #16]
   16304:	add	r3, r2, #1
   16308:	cmp	r2, #0
   1630c:	str	r3, [r6, #16]
   16310:	beq	16328 <flatcc_json_printer_int32_field@@Base+0x6c>
   16314:	ldr	r2, [r4, #20]
   16318:	add	r3, r2, #1
   1631c:	str	r3, [r4, #20]
   16320:	mov	r3, #44	; 0x2c
   16324:	strb	r3, [r2]
   16328:	mov	r1, r7
   1632c:	mov	r0, r4
   16330:	ldr	r2, [sp, #24]
   16334:	bl	14bd4 <test_print@@Base+0x1534>
   16338:	mov	r0, r5
   1633c:	ldr	r1, [r4, #20]
   16340:	bl	14350 <test_print@@Base+0xcb0>
   16344:	ldr	r3, [r4, #20]
   16348:	add	r0, r3, r0
   1634c:	str	r0, [r4, #20]
   16350:	pop	{r4, r5, r6, r7, r8, pc}
   16354:	ldrb	r3, [r4, #29]
   16358:	cmp	r3, #0
   1635c:	bne	16300 <flatcc_json_printer_int32_field@@Base+0x44>
   16360:	pop	{r4, r5, r6, r7, r8, pc}

00016364 <flatcc_json_printer_int64_field@@Base>:
   16364:	push	{r4, r5, r6, r7, r8, lr}
   16368:	mov	r5, r1
   1636c:	mov	r4, r0
   16370:	mov	r1, r2
   16374:	mov	r0, r5
   16378:	mov	r8, r3
   1637c:	bl	14688 <test_print@@Base+0xfe8>
   16380:	cmp	r0, #0
   16384:	ldrd	r6, [sp, #32]
   16388:	beq	16408 <flatcc_json_printer_int64_field@@Base+0xa4>
   1638c:	ldrd	r2, [r0]
   16390:	cmp	r3, r7
   16394:	cmpeq	r2, r6
   16398:	movne	r6, r2
   1639c:	movne	r7, r3
   163a0:	bne	163b0 <flatcc_json_printer_int64_field@@Base+0x4c>
   163a4:	ldrb	r3, [r4, #28]
   163a8:	cmp	r3, #0
   163ac:	popne	{r4, r5, r6, r7, r8, pc}
   163b0:	ldr	r2, [r5, #16]
   163b4:	add	r3, r2, #1
   163b8:	cmp	r2, #0
   163bc:	str	r3, [r5, #16]
   163c0:	beq	163d8 <flatcc_json_printer_int64_field@@Base+0x74>
   163c4:	ldr	r2, [r4, #20]
   163c8:	add	r3, r2, #1
   163cc:	str	r3, [r4, #20]
   163d0:	mov	r3, #44	; 0x2c
   163d4:	strb	r3, [r2]
   163d8:	mov	r1, r8
   163dc:	mov	r0, r4
   163e0:	ldr	r2, [sp, #24]
   163e4:	bl	14bd4 <test_print@@Base+0x1534>
   163e8:	mov	r0, r6
   163ec:	mov	r1, r7
   163f0:	ldr	r2, [r4, #20]
   163f4:	bl	14374 <test_print@@Base+0xcd4>
   163f8:	ldr	r3, [r4, #20]
   163fc:	add	r0, r3, r0
   16400:	str	r0, [r4, #20]
   16404:	pop	{r4, r5, r6, r7, r8, pc}
   16408:	ldrb	r3, [r4, #29]
   1640c:	cmp	r3, #0
   16410:	bne	163b0 <flatcc_json_printer_int64_field@@Base+0x4c>
   16414:	pop	{r4, r5, r6, r7, r8, pc}

00016418 <flatcc_json_printer_bool_field@@Base>:
   16418:	push	{r4, r5, r6, r7, r8, lr}
   1641c:	mov	r6, r1
   16420:	mov	r4, r0
   16424:	mov	r1, r2
   16428:	mov	r0, r6
   1642c:	mov	r7, r3
   16430:	bl	14688 <test_print@@Base+0xfe8>
   16434:	cmp	r0, #0
   16438:	ldrb	r5, [sp, #28]
   1643c:	beq	164b0 <flatcc_json_printer_bool_field@@Base+0x98>
   16440:	ldrb	r2, [r0]
   16444:	cmp	r2, r5
   16448:	movne	r5, r2
   1644c:	bne	1645c <flatcc_json_printer_bool_field@@Base+0x44>
   16450:	ldrb	r3, [r4, #28]
   16454:	cmp	r3, #0
   16458:	popne	{r4, r5, r6, r7, r8, pc}
   1645c:	ldr	r2, [r6, #16]
   16460:	add	r3, r2, #1
   16464:	cmp	r2, #0
   16468:	str	r3, [r6, #16]
   1646c:	beq	16484 <flatcc_json_printer_bool_field@@Base+0x6c>
   16470:	ldr	r2, [r4, #20]
   16474:	add	r3, r2, #1
   16478:	str	r3, [r4, #20]
   1647c:	mov	r3, #44	; 0x2c
   16480:	strb	r3, [r2]
   16484:	mov	r1, r7
   16488:	mov	r0, r4
   1648c:	ldr	r2, [sp, #24]
   16490:	bl	14bd4 <test_print@@Base+0x1534>
   16494:	mov	r0, r5
   16498:	ldr	r1, [r4, #20]
   1649c:	bl	14df0 <test_print@@Base+0x1750>
   164a0:	ldr	r3, [r4, #20]
   164a4:	add	r0, r3, r0
   164a8:	str	r0, [r4, #20]
   164ac:	pop	{r4, r5, r6, r7, r8, pc}
   164b0:	ldrb	r3, [r4, #29]
   164b4:	cmp	r3, #0
   164b8:	bne	1645c <flatcc_json_printer_bool_field@@Base+0x44>
   164bc:	pop	{r4, r5, r6, r7, r8, pc}

000164c0 <flatcc_json_printer_float_field@@Base>:
   164c0:	push	{r4, r5, r6, lr}
   164c4:	mov	r5, r1
   164c8:	mov	r4, r0
   164cc:	mov	r1, r2
   164d0:	mov	r0, r5
   164d4:	mov	r6, r3
   164d8:	vpush	{d8}
   164dc:	bl	14688 <test_print@@Base+0xfe8>
   164e0:	cmp	r0, #0
   164e4:	beq	1650c <flatcc_json_printer_float_field@@Base+0x4c>
   164e8:	vldr	s16, [r0]
   164ec:	vcmp.f32	s16, s0
   164f0:	vmrs	APSR_nzcv, fpscr
   164f4:	bne	1651c <flatcc_json_printer_float_field@@Base+0x5c>
   164f8:	ldrb	r3, [r4, #28]
   164fc:	cmp	r3, #0
   16500:	beq	1651c <flatcc_json_printer_float_field@@Base+0x5c>
   16504:	vpop	{d8}
   16508:	pop	{r4, r5, r6, pc}
   1650c:	ldrb	r3, [r4, #29]
   16510:	cmp	r3, #0
   16514:	beq	16504 <flatcc_json_printer_float_field@@Base+0x44>
   16518:	vmov.f32	s16, s0
   1651c:	ldr	r2, [r5, #16]
   16520:	add	r3, r2, #1
   16524:	cmp	r2, #0
   16528:	str	r3, [r5, #16]
   1652c:	beq	16544 <flatcc_json_printer_float_field@@Base+0x84>
   16530:	ldr	r2, [r4, #20]
   16534:	add	r3, r2, #1
   16538:	str	r3, [r4, #20]
   1653c:	mov	r3, #44	; 0x2c
   16540:	strb	r3, [r2]
   16544:	mov	r1, r6
   16548:	mov	r0, r4
   1654c:	ldr	r2, [sp, #24]
   16550:	bl	14bd4 <test_print@@Base+0x1534>
   16554:	vcvt.f64.f32	d0, s16
   16558:	ldr	r0, [r4, #20]
   1655c:	bl	15108 <test_print@@Base+0x1a68>
   16560:	ldr	r3, [r4, #20]
   16564:	add	r0, r3, r0
   16568:	str	r0, [r4, #20]
   1656c:	b	16504 <flatcc_json_printer_float_field@@Base+0x44>

00016570 <flatcc_json_printer_double_field@@Base>:
   16570:	push	{r4, r5, r6, lr}
   16574:	mov	r5, r1
   16578:	mov	r4, r0
   1657c:	mov	r1, r2
   16580:	mov	r0, r5
   16584:	mov	r6, r3
   16588:	vpush	{d8}
   1658c:	bl	14688 <test_print@@Base+0xfe8>
   16590:	cmp	r0, #0
   16594:	beq	165bc <flatcc_json_printer_double_field@@Base+0x4c>
   16598:	vldr	d8, [r0]
   1659c:	vcmp.f64	d8, d0
   165a0:	vmrs	APSR_nzcv, fpscr
   165a4:	bne	165cc <flatcc_json_printer_double_field@@Base+0x5c>
   165a8:	ldrb	r3, [r4, #28]
   165ac:	cmp	r3, #0
   165b0:	beq	165cc <flatcc_json_printer_double_field@@Base+0x5c>
   165b4:	vpop	{d8}
   165b8:	pop	{r4, r5, r6, pc}
   165bc:	ldrb	r3, [r4, #29]
   165c0:	cmp	r3, #0
   165c4:	beq	165b4 <flatcc_json_printer_double_field@@Base+0x44>
   165c8:	vmov.f64	d8, d0
   165cc:	ldr	r2, [r5, #16]
   165d0:	add	r3, r2, #1
   165d4:	cmp	r2, #0
   165d8:	str	r3, [r5, #16]
   165dc:	beq	165f4 <flatcc_json_printer_double_field@@Base+0x84>
   165e0:	ldr	r2, [r4, #20]
   165e4:	add	r3, r2, #1
   165e8:	str	r3, [r4, #20]
   165ec:	mov	r3, #44	; 0x2c
   165f0:	strb	r3, [r2]
   165f4:	mov	r1, r6
   165f8:	mov	r0, r4
   165fc:	ldr	r2, [sp, #24]
   16600:	bl	14bd4 <test_print@@Base+0x1534>
   16604:	vmov.f64	d0, d8
   16608:	ldr	r0, [r4, #20]
   1660c:	bl	15108 <test_print@@Base+0x1a68>
   16610:	ldr	r3, [r4, #20]
   16614:	add	r0, r3, r0
   16618:	str	r0, [r4, #20]
   1661c:	b	165b4 <flatcc_json_printer_double_field@@Base+0x44>

00016620 <flatcc_json_printer_uint8_enum_field@@Base>:
   16620:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16624:	mov	r6, r1
   16628:	mov	r4, r0
   1662c:	mov	r1, r2
   16630:	mov	r0, r6
   16634:	mov	r8, r3
   16638:	bl	14688 <test_print@@Base+0xfe8>
   1663c:	cmp	r0, #0
   16640:	ldrb	r5, [sp, #36]	; 0x24
   16644:	ldr	r9, [sp, #32]
   16648:	ldr	r7, [sp, #40]	; 0x28
   1664c:	beq	166cc <flatcc_json_printer_uint8_enum_field@@Base+0xac>
   16650:	ldrb	r2, [r0]
   16654:	cmp	r2, r5
   16658:	movne	r5, r2
   1665c:	bne	1666c <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   16660:	ldrb	r3, [r4, #28]
   16664:	cmp	r3, #0
   16668:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1666c:	ldr	r2, [r6, #16]
   16670:	add	r3, r2, #1
   16674:	cmp	r2, #0
   16678:	str	r3, [r6, #16]
   1667c:	beq	16694 <flatcc_json_printer_uint8_enum_field@@Base+0x74>
   16680:	ldr	r2, [r4, #20]
   16684:	add	r3, r2, #1
   16688:	str	r3, [r4, #20]
   1668c:	mov	r3, #44	; 0x2c
   16690:	strb	r3, [r2]
   16694:	mov	r2, r9
   16698:	mov	r1, r8
   1669c:	mov	r0, r4
   166a0:	bl	14bd4 <test_print@@Base+0x1534>
   166a4:	ldrb	r3, [r4, #27]
   166a8:	cmp	r3, #0
   166ac:	beq	166dc <flatcc_json_printer_uint8_enum_field@@Base+0xbc>
   166b0:	mov	r0, r5
   166b4:	ldr	r1, [r4, #20]
   166b8:	bl	14c58 <test_print@@Base+0x15b8>
   166bc:	ldr	r3, [r4, #20]
   166c0:	add	r0, r3, r0
   166c4:	str	r0, [r4, #20]
   166c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166cc:	ldrb	r3, [r4, #29]
   166d0:	cmp	r3, #0
   166d4:	bne	1666c <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   166d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166dc:	mov	r1, r5
   166e0:	mov	r0, r4
   166e4:	mov	r3, r7
   166e8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   166ec:	bx	r3

000166f0 <flatcc_json_printer_uint16_enum_field@@Base>:
   166f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166f4:	mov	r6, r1
   166f8:	mov	r4, r0
   166fc:	mov	r1, r2
   16700:	mov	r0, r6
   16704:	mov	r8, r3
   16708:	bl	14688 <test_print@@Base+0xfe8>
   1670c:	cmp	r0, #0
   16710:	ldrh	r5, [sp, #36]	; 0x24
   16714:	ldr	r9, [sp, #32]
   16718:	ldr	r7, [sp, #40]	; 0x28
   1671c:	beq	1679c <flatcc_json_printer_uint16_enum_field@@Base+0xac>
   16720:	ldrh	r2, [r0]
   16724:	cmp	r2, r5
   16728:	movne	r5, r2
   1672c:	bne	1673c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   16730:	ldrb	r3, [r4, #28]
   16734:	cmp	r3, #0
   16738:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1673c:	ldr	r2, [r6, #16]
   16740:	add	r3, r2, #1
   16744:	cmp	r2, #0
   16748:	str	r3, [r6, #16]
   1674c:	beq	16764 <flatcc_json_printer_uint16_enum_field@@Base+0x74>
   16750:	ldr	r2, [r4, #20]
   16754:	add	r3, r2, #1
   16758:	str	r3, [r4, #20]
   1675c:	mov	r3, #44	; 0x2c
   16760:	strb	r3, [r2]
   16764:	mov	r2, r9
   16768:	mov	r1, r8
   1676c:	mov	r0, r4
   16770:	bl	14bd4 <test_print@@Base+0x1534>
   16774:	ldrb	r3, [r4, #27]
   16778:	cmp	r3, #0
   1677c:	beq	167ac <flatcc_json_printer_uint16_enum_field@@Base+0xbc>
   16780:	mov	r0, r5
   16784:	ldr	r1, [r4, #20]
   16788:	bl	138f0 <test_print@@Base+0x250>
   1678c:	ldr	r3, [r4, #20]
   16790:	add	r0, r3, r0
   16794:	str	r0, [r4, #20]
   16798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1679c:	ldrb	r3, [r4, #29]
   167a0:	cmp	r3, #0
   167a4:	bne	1673c <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   167a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167ac:	mov	r1, r5
   167b0:	mov	r0, r4
   167b4:	mov	r3, r7
   167b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   167bc:	bx	r3

000167c0 <flatcc_json_printer_uint32_enum_field@@Base>:
   167c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   167c4:	mov	r6, r1
   167c8:	mov	r4, r0
   167cc:	mov	r1, r2
   167d0:	mov	r0, r6
   167d4:	mov	r8, r3
   167d8:	bl	14688 <test_print@@Base+0xfe8>
   167dc:	cmp	r0, #0
   167e0:	ldr	r9, [sp, #32]
   167e4:	ldr	r5, [sp, #36]	; 0x24
   167e8:	ldr	r7, [sp, #40]	; 0x28
   167ec:	beq	1686c <flatcc_json_printer_uint32_enum_field@@Base+0xac>
   167f0:	ldr	r2, [r0]
   167f4:	cmp	r2, r5
   167f8:	movne	r5, r2
   167fc:	bne	1680c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   16800:	ldrb	r3, [r4, #28]
   16804:	cmp	r3, #0
   16808:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1680c:	ldr	r2, [r6, #16]
   16810:	add	r3, r2, #1
   16814:	cmp	r2, #0
   16818:	str	r3, [r6, #16]
   1681c:	beq	16834 <flatcc_json_printer_uint32_enum_field@@Base+0x74>
   16820:	ldr	r2, [r4, #20]
   16824:	add	r3, r2, #1
   16828:	str	r3, [r4, #20]
   1682c:	mov	r3, #44	; 0x2c
   16830:	strb	r3, [r2]
   16834:	mov	r2, r9
   16838:	mov	r1, r8
   1683c:	mov	r0, r4
   16840:	bl	14bd4 <test_print@@Base+0x1534>
   16844:	ldrb	r3, [r4, #27]
   16848:	cmp	r3, #0
   1684c:	beq	1687c <flatcc_json_printer_uint32_enum_field@@Base+0xbc>
   16850:	mov	r0, r5
   16854:	ldr	r1, [r4, #20]
   16858:	bl	13a34 <test_print@@Base+0x394>
   1685c:	ldr	r3, [r4, #20]
   16860:	add	r0, r3, r0
   16864:	str	r0, [r4, #20]
   16868:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1686c:	ldrb	r3, [r4, #29]
   16870:	cmp	r3, #0
   16874:	bne	1680c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   16878:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1687c:	mov	r1, r5
   16880:	mov	r0, r4
   16884:	mov	r3, r7
   16888:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1688c:	bx	r3

00016890 <flatcc_json_printer_uint64_enum_field@@Base>:
   16890:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16894:	mov	r5, r1
   16898:	mov	r4, r0
   1689c:	mov	r1, r2
   168a0:	mov	r0, r5
   168a4:	mov	r9, r3
   168a8:	bl	14688 <test_print@@Base+0xfe8>
   168ac:	cmp	r0, #0
   168b0:	ldr	sl, [sp, #32]
   168b4:	ldrd	r6, [sp, #40]	; 0x28
   168b8:	ldr	r8, [sp, #48]	; 0x30
   168bc:	beq	16948 <flatcc_json_printer_uint64_enum_field@@Base+0xb8>
   168c0:	ldrd	r2, [r0]
   168c4:	cmp	r3, r7
   168c8:	cmpeq	r2, r6
   168cc:	movne	r6, r2
   168d0:	movne	r7, r3
   168d4:	bne	168e4 <flatcc_json_printer_uint64_enum_field@@Base+0x54>
   168d8:	ldrb	r3, [r4, #28]
   168dc:	cmp	r3, #0
   168e0:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   168e4:	ldr	r2, [r5, #16]
   168e8:	add	r3, r2, #1
   168ec:	cmp	r2, #0
   168f0:	str	r3, [r5, #16]
   168f4:	beq	1690c <flatcc_json_printer_uint64_enum_field@@Base+0x7c>
   168f8:	ldr	r2, [r4, #20]
   168fc:	add	r3, r2, #1
   16900:	str	r3, [r4, #20]
   16904:	mov	r3, #44	; 0x2c
   16908:	strb	r3, [r2]
   1690c:	mov	r2, sl
   16910:	mov	r1, r9
   16914:	mov	r0, r4
   16918:	bl	14bd4 <test_print@@Base+0x1534>
   1691c:	ldrb	r3, [r4, #27]
   16920:	cmp	r3, #0
   16924:	beq	16958 <flatcc_json_printer_uint64_enum_field@@Base+0xc8>
   16928:	mov	r0, r6
   1692c:	mov	r1, r7
   16930:	ldr	r2, [r4, #20]
   16934:	bl	13ce4 <test_print@@Base+0x644>
   16938:	ldr	r3, [r4, #20]
   1693c:	add	r0, r3, r0
   16940:	str	r0, [r4, #20]
   16944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16948:	ldrb	r3, [r4, #29]
   1694c:	cmp	r3, #0
   16950:	bne	168e4 <flatcc_json_printer_uint64_enum_field@@Base+0x54>
   16954:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16958:	mov	r2, r6
   1695c:	mov	r3, r7
   16960:	mov	r0, r4
   16964:	mov	r1, r8
   16968:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1696c:	bx	r1

00016970 <flatcc_json_printer_int8_enum_field@@Base>:
   16970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16974:	mov	r6, r1
   16978:	mov	r4, r0
   1697c:	mov	r1, r2
   16980:	mov	r0, r6
   16984:	mov	r8, r3
   16988:	bl	14688 <test_print@@Base+0xfe8>
   1698c:	cmp	r0, #0
   16990:	ldrsb	r5, [sp, #36]	; 0x24
   16994:	ldr	r9, [sp, #32]
   16998:	ldr	r7, [sp, #40]	; 0x28
   1699c:	beq	16a1c <flatcc_json_printer_int8_enum_field@@Base+0xac>
   169a0:	ldrsb	r2, [r0]
   169a4:	cmp	r2, r5
   169a8:	movne	r5, r2
   169ac:	bne	169bc <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   169b0:	ldrb	r3, [r4, #28]
   169b4:	cmp	r3, #0
   169b8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   169bc:	ldr	r2, [r6, #16]
   169c0:	add	r3, r2, #1
   169c4:	cmp	r2, #0
   169c8:	str	r3, [r6, #16]
   169cc:	beq	169e4 <flatcc_json_printer_int8_enum_field@@Base+0x74>
   169d0:	ldr	r2, [r4, #20]
   169d4:	add	r3, r2, #1
   169d8:	str	r3, [r4, #20]
   169dc:	mov	r3, #44	; 0x2c
   169e0:	strb	r3, [r2]
   169e4:	mov	r2, r9
   169e8:	mov	r1, r8
   169ec:	mov	r0, r4
   169f0:	bl	14bd4 <test_print@@Base+0x1534>
   169f4:	ldrb	r3, [r4, #27]
   169f8:	cmp	r3, #0
   169fc:	beq	16a2c <flatcc_json_printer_int8_enum_field@@Base+0xbc>
   16a00:	mov	r0, r5
   16a04:	ldr	r1, [r4, #20]
   16a08:	bl	14ce8 <test_print@@Base+0x1648>
   16a0c:	ldr	r3, [r4, #20]
   16a10:	add	r0, r3, r0
   16a14:	str	r0, [r4, #20]
   16a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a1c:	ldrb	r3, [r4, #29]
   16a20:	cmp	r3, #0
   16a24:	bne	169bc <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   16a28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a2c:	mov	r1, r5
   16a30:	mov	r0, r4
   16a34:	mov	r3, r7
   16a38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a3c:	bx	r3

00016a40 <flatcc_json_printer_int16_enum_field@@Base>:
   16a40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a44:	mov	r6, r1
   16a48:	mov	r4, r0
   16a4c:	mov	r1, r2
   16a50:	mov	r0, r6
   16a54:	mov	r8, r3
   16a58:	bl	14688 <test_print@@Base+0xfe8>
   16a5c:	cmp	r0, #0
   16a60:	ldrsh	r5, [sp, #36]	; 0x24
   16a64:	ldr	r9, [sp, #32]
   16a68:	ldr	r7, [sp, #40]	; 0x28
   16a6c:	beq	16aec <flatcc_json_printer_int16_enum_field@@Base+0xac>
   16a70:	ldrsh	r2, [r0]
   16a74:	cmp	r2, r5
   16a78:	movne	r5, r2
   16a7c:	bne	16a8c <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   16a80:	ldrb	r3, [r4, #28]
   16a84:	cmp	r3, #0
   16a88:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a8c:	ldr	r2, [r6, #16]
   16a90:	add	r3, r2, #1
   16a94:	cmp	r2, #0
   16a98:	str	r3, [r6, #16]
   16a9c:	beq	16ab4 <flatcc_json_printer_int16_enum_field@@Base+0x74>
   16aa0:	ldr	r2, [r4, #20]
   16aa4:	add	r3, r2, #1
   16aa8:	str	r3, [r4, #20]
   16aac:	mov	r3, #44	; 0x2c
   16ab0:	strb	r3, [r2]
   16ab4:	mov	r2, r9
   16ab8:	mov	r1, r8
   16abc:	mov	r0, r4
   16ac0:	bl	14bd4 <test_print@@Base+0x1534>
   16ac4:	ldrb	r3, [r4, #27]
   16ac8:	cmp	r3, #0
   16acc:	beq	16afc <flatcc_json_printer_int16_enum_field@@Base+0xbc>
   16ad0:	mov	r0, r5
   16ad4:	ldr	r1, [r4, #20]
   16ad8:	bl	14324 <test_print@@Base+0xc84>
   16adc:	ldr	r3, [r4, #20]
   16ae0:	add	r0, r3, r0
   16ae4:	str	r0, [r4, #20]
   16ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16aec:	ldrb	r3, [r4, #29]
   16af0:	cmp	r3, #0
   16af4:	bne	16a8c <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   16af8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16afc:	mov	r1, r5
   16b00:	mov	r0, r4
   16b04:	mov	r3, r7
   16b08:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b0c:	bx	r3

00016b10 <flatcc_json_printer_int32_enum_field@@Base>:
   16b10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b14:	mov	r6, r1
   16b18:	mov	r4, r0
   16b1c:	mov	r1, r2
   16b20:	mov	r0, r6
   16b24:	mov	r8, r3
   16b28:	bl	14688 <test_print@@Base+0xfe8>
   16b2c:	cmp	r0, #0
   16b30:	ldr	r9, [sp, #32]
   16b34:	ldr	r5, [sp, #36]	; 0x24
   16b38:	ldr	r7, [sp, #40]	; 0x28
   16b3c:	beq	16bbc <flatcc_json_printer_int32_enum_field@@Base+0xac>
   16b40:	ldr	r2, [r0]
   16b44:	cmp	r2, r5
   16b48:	movne	r5, r2
   16b4c:	bne	16b5c <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   16b50:	ldrb	r3, [r4, #28]
   16b54:	cmp	r3, #0
   16b58:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b5c:	ldr	r2, [r6, #16]
   16b60:	add	r3, r2, #1
   16b64:	cmp	r2, #0
   16b68:	str	r3, [r6, #16]
   16b6c:	beq	16b84 <flatcc_json_printer_int32_enum_field@@Base+0x74>
   16b70:	ldr	r2, [r4, #20]
   16b74:	add	r3, r2, #1
   16b78:	str	r3, [r4, #20]
   16b7c:	mov	r3, #44	; 0x2c
   16b80:	strb	r3, [r2]
   16b84:	mov	r2, r9
   16b88:	mov	r1, r8
   16b8c:	mov	r0, r4
   16b90:	bl	14bd4 <test_print@@Base+0x1534>
   16b94:	ldrb	r3, [r4, #27]
   16b98:	cmp	r3, #0
   16b9c:	beq	16bcc <flatcc_json_printer_int32_enum_field@@Base+0xbc>
   16ba0:	mov	r0, r5
   16ba4:	ldr	r1, [r4, #20]
   16ba8:	bl	14350 <test_print@@Base+0xcb0>
   16bac:	ldr	r3, [r4, #20]
   16bb0:	add	r0, r3, r0
   16bb4:	str	r0, [r4, #20]
   16bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bbc:	ldrb	r3, [r4, #29]
   16bc0:	cmp	r3, #0
   16bc4:	bne	16b5c <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   16bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bcc:	mov	r1, r5
   16bd0:	mov	r0, r4
   16bd4:	mov	r3, r7
   16bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16bdc:	bx	r3

00016be0 <flatcc_json_printer_int64_enum_field@@Base>:
   16be0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16be4:	mov	r5, r1
   16be8:	mov	r4, r0
   16bec:	mov	r1, r2
   16bf0:	mov	r0, r5
   16bf4:	mov	r9, r3
   16bf8:	bl	14688 <test_print@@Base+0xfe8>
   16bfc:	cmp	r0, #0
   16c00:	ldr	sl, [sp, #32]
   16c04:	ldrd	r6, [sp, #40]	; 0x28
   16c08:	ldr	r8, [sp, #48]	; 0x30
   16c0c:	beq	16c98 <flatcc_json_printer_int64_enum_field@@Base+0xb8>
   16c10:	ldrd	r2, [r0]
   16c14:	cmp	r3, r7
   16c18:	cmpeq	r2, r6
   16c1c:	movne	r6, r2
   16c20:	movne	r7, r3
   16c24:	bne	16c34 <flatcc_json_printer_int64_enum_field@@Base+0x54>
   16c28:	ldrb	r3, [r4, #28]
   16c2c:	cmp	r3, #0
   16c30:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c34:	ldr	r2, [r5, #16]
   16c38:	add	r3, r2, #1
   16c3c:	cmp	r2, #0
   16c40:	str	r3, [r5, #16]
   16c44:	beq	16c5c <flatcc_json_printer_int64_enum_field@@Base+0x7c>
   16c48:	ldr	r2, [r4, #20]
   16c4c:	add	r3, r2, #1
   16c50:	str	r3, [r4, #20]
   16c54:	mov	r3, #44	; 0x2c
   16c58:	strb	r3, [r2]
   16c5c:	mov	r2, sl
   16c60:	mov	r1, r9
   16c64:	mov	r0, r4
   16c68:	bl	14bd4 <test_print@@Base+0x1534>
   16c6c:	ldrb	r3, [r4, #27]
   16c70:	cmp	r3, #0
   16c74:	beq	16ca8 <flatcc_json_printer_int64_enum_field@@Base+0xc8>
   16c78:	mov	r0, r6
   16c7c:	mov	r1, r7
   16c80:	ldr	r2, [r4, #20]
   16c84:	bl	14374 <test_print@@Base+0xcd4>
   16c88:	ldr	r3, [r4, #20]
   16c8c:	add	r0, r3, r0
   16c90:	str	r0, [r4, #20]
   16c94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c98:	ldrb	r3, [r4, #29]
   16c9c:	cmp	r3, #0
   16ca0:	bne	16c34 <flatcc_json_printer_int64_enum_field@@Base+0x54>
   16ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ca8:	mov	r2, r6
   16cac:	mov	r3, r7
   16cb0:	mov	r0, r4
   16cb4:	mov	r1, r8
   16cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cbc:	bx	r1

00016cc0 <flatcc_json_printer_bool_enum_field@@Base>:
   16cc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cc4:	mov	r6, r1
   16cc8:	mov	r4, r0
   16ccc:	mov	r1, r2
   16cd0:	mov	r0, r6
   16cd4:	mov	r8, r3
   16cd8:	bl	14688 <test_print@@Base+0xfe8>
   16cdc:	cmp	r0, #0
   16ce0:	ldrb	r5, [sp, #36]	; 0x24
   16ce4:	ldr	r9, [sp, #32]
   16ce8:	ldr	r7, [sp, #40]	; 0x28
   16cec:	beq	16d6c <flatcc_json_printer_bool_enum_field@@Base+0xac>
   16cf0:	ldrb	r2, [r0]
   16cf4:	cmp	r2, r5
   16cf8:	movne	r5, r2
   16cfc:	bne	16d0c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   16d00:	ldrb	r3, [r4, #28]
   16d04:	cmp	r3, #0
   16d08:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d0c:	ldr	r2, [r6, #16]
   16d10:	add	r3, r2, #1
   16d14:	cmp	r2, #0
   16d18:	str	r3, [r6, #16]
   16d1c:	beq	16d34 <flatcc_json_printer_bool_enum_field@@Base+0x74>
   16d20:	ldr	r2, [r4, #20]
   16d24:	add	r3, r2, #1
   16d28:	str	r3, [r4, #20]
   16d2c:	mov	r3, #44	; 0x2c
   16d30:	strb	r3, [r2]
   16d34:	mov	r2, r9
   16d38:	mov	r1, r8
   16d3c:	mov	r0, r4
   16d40:	bl	14bd4 <test_print@@Base+0x1534>
   16d44:	ldrb	r3, [r4, #27]
   16d48:	cmp	r3, #0
   16d4c:	beq	16d7c <flatcc_json_printer_bool_enum_field@@Base+0xbc>
   16d50:	mov	r0, r5
   16d54:	ldr	r1, [r4, #20]
   16d58:	bl	14df0 <test_print@@Base+0x1750>
   16d5c:	ldr	r3, [r4, #20]
   16d60:	add	r0, r3, r0
   16d64:	str	r0, [r4, #20]
   16d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d6c:	ldrb	r3, [r4, #29]
   16d70:	cmp	r3, #0
   16d74:	bne	16d0c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   16d78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d7c:	mov	r1, r5
   16d80:	mov	r0, r4
   16d84:	mov	r3, r7
   16d88:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d8c:	bx	r3

00016d90 <flatcc_json_printer_uint8_struct_field@@Base>:
   16d90:	cmp	r1, #0
   16d94:	push	{r4, r5, r6, lr}
   16d98:	mov	r4, r0
   16d9c:	ldrb	r5, [r2, r3]
   16da0:	beq	16db8 <flatcc_json_printer_uint8_struct_field@@Base+0x28>
   16da4:	ldr	r3, [r0, #20]
   16da8:	add	r2, r3, #1
   16dac:	str	r2, [r0, #20]
   16db0:	mov	r2, #44	; 0x2c
   16db4:	strb	r2, [r3]
   16db8:	mov	r0, r4
   16dbc:	ldr	r1, [sp, #16]
   16dc0:	ldr	r2, [sp, #20]
   16dc4:	bl	14bd4 <test_print@@Base+0x1534>
   16dc8:	mov	r0, r5
   16dcc:	ldr	r1, [r4, #20]
   16dd0:	bl	14c58 <test_print@@Base+0x15b8>
   16dd4:	ldr	r3, [r4, #20]
   16dd8:	add	r0, r3, r0
   16ddc:	str	r0, [r4, #20]
   16de0:	pop	{r4, r5, r6, pc}

00016de4 <flatcc_json_printer_uint16_struct_field@@Base>:
   16de4:	cmp	r1, #0
   16de8:	push	{r4, r5, r6, lr}
   16dec:	mov	r4, r0
   16df0:	ldrh	r5, [r2, r3]
   16df4:	beq	16e0c <flatcc_json_printer_uint16_struct_field@@Base+0x28>
   16df8:	ldr	r3, [r0, #20]
   16dfc:	add	r2, r3, #1
   16e00:	str	r2, [r0, #20]
   16e04:	mov	r2, #44	; 0x2c
   16e08:	strb	r2, [r3]
   16e0c:	mov	r0, r4
   16e10:	ldr	r1, [sp, #16]
   16e14:	ldr	r2, [sp, #20]
   16e18:	bl	14bd4 <test_print@@Base+0x1534>
   16e1c:	mov	r0, r5
   16e20:	ldr	r1, [r4, #20]
   16e24:	bl	138f0 <test_print@@Base+0x250>
   16e28:	ldr	r3, [r4, #20]
   16e2c:	add	r0, r3, r0
   16e30:	str	r0, [r4, #20]
   16e34:	pop	{r4, r5, r6, pc}

00016e38 <flatcc_json_printer_uint32_struct_field@@Base>:
   16e38:	cmp	r1, #0
   16e3c:	push	{r4, r5, r6, lr}
   16e40:	mov	r4, r0
   16e44:	ldr	r5, [r2, r3]
   16e48:	beq	16e60 <flatcc_json_printer_uint32_struct_field@@Base+0x28>
   16e4c:	ldr	r3, [r0, #20]
   16e50:	add	r2, r3, #1
   16e54:	str	r2, [r0, #20]
   16e58:	mov	r2, #44	; 0x2c
   16e5c:	strb	r2, [r3]
   16e60:	mov	r0, r4
   16e64:	ldr	r1, [sp, #16]
   16e68:	ldr	r2, [sp, #20]
   16e6c:	bl	14bd4 <test_print@@Base+0x1534>
   16e70:	mov	r0, r5
   16e74:	ldr	r1, [r4, #20]
   16e78:	bl	13a34 <test_print@@Base+0x394>
   16e7c:	ldr	r3, [r4, #20]
   16e80:	add	r0, r3, r0
   16e84:	str	r0, [r4, #20]
   16e88:	pop	{r4, r5, r6, pc}

00016e8c <flatcc_json_printer_uint64_struct_field@@Base>:
   16e8c:	cmp	r1, #0
   16e90:	push	{r4, r6, r7, lr}
   16e94:	mov	r4, r0
   16e98:	ldrd	r6, [r2, r3]
   16e9c:	beq	16eb4 <flatcc_json_printer_uint64_struct_field@@Base+0x28>
   16ea0:	ldr	r3, [r0, #20]
   16ea4:	add	r2, r3, #1
   16ea8:	str	r2, [r0, #20]
   16eac:	mov	r2, #44	; 0x2c
   16eb0:	strb	r2, [r3]
   16eb4:	mov	r0, r4
   16eb8:	ldr	r1, [sp, #16]
   16ebc:	ldr	r2, [sp, #20]
   16ec0:	bl	14bd4 <test_print@@Base+0x1534>
   16ec4:	mov	r0, r6
   16ec8:	mov	r1, r7
   16ecc:	ldr	r2, [r4, #20]
   16ed0:	bl	13ce4 <test_print@@Base+0x644>
   16ed4:	ldr	r3, [r4, #20]
   16ed8:	add	r0, r3, r0
   16edc:	str	r0, [r4, #20]
   16ee0:	pop	{r4, r6, r7, pc}

00016ee4 <flatcc_json_printer_int8_struct_field@@Base>:
   16ee4:	cmp	r1, #0
   16ee8:	push	{r4, r5, r6, lr}
   16eec:	mov	r4, r0
   16ef0:	ldrsb	r5, [r2, r3]
   16ef4:	beq	16f0c <flatcc_json_printer_int8_struct_field@@Base+0x28>
   16ef8:	ldr	r3, [r0, #20]
   16efc:	add	r2, r3, #1
   16f00:	str	r2, [r0, #20]
   16f04:	mov	r2, #44	; 0x2c
   16f08:	strb	r2, [r3]
   16f0c:	mov	r0, r4
   16f10:	ldr	r1, [sp, #16]
   16f14:	ldr	r2, [sp, #20]
   16f18:	bl	14bd4 <test_print@@Base+0x1534>
   16f1c:	mov	r0, r5
   16f20:	ldr	r1, [r4, #20]
   16f24:	bl	14ce8 <test_print@@Base+0x1648>
   16f28:	ldr	r3, [r4, #20]
   16f2c:	add	r0, r3, r0
   16f30:	str	r0, [r4, #20]
   16f34:	pop	{r4, r5, r6, pc}

00016f38 <flatcc_json_printer_int16_struct_field@@Base>:
   16f38:	cmp	r1, #0
   16f3c:	push	{r4, r5, r6, lr}
   16f40:	mov	r4, r0
   16f44:	ldrsh	r5, [r2, r3]
   16f48:	beq	16f60 <flatcc_json_printer_int16_struct_field@@Base+0x28>
   16f4c:	ldr	r3, [r0, #20]
   16f50:	add	r2, r3, #1
   16f54:	str	r2, [r0, #20]
   16f58:	mov	r2, #44	; 0x2c
   16f5c:	strb	r2, [r3]
   16f60:	mov	r0, r4
   16f64:	ldr	r1, [sp, #16]
   16f68:	ldr	r2, [sp, #20]
   16f6c:	bl	14bd4 <test_print@@Base+0x1534>
   16f70:	mov	r0, r5
   16f74:	ldr	r1, [r4, #20]
   16f78:	bl	14324 <test_print@@Base+0xc84>
   16f7c:	ldr	r3, [r4, #20]
   16f80:	add	r0, r3, r0
   16f84:	str	r0, [r4, #20]
   16f88:	pop	{r4, r5, r6, pc}

00016f8c <flatcc_json_printer_int32_struct_field@@Base>:
   16f8c:	cmp	r1, #0
   16f90:	push	{r4, r5, r6, lr}
   16f94:	mov	r4, r0
   16f98:	ldr	r5, [r2, r3]
   16f9c:	beq	16fb4 <flatcc_json_printer_int32_struct_field@@Base+0x28>
   16fa0:	ldr	r3, [r0, #20]
   16fa4:	add	r2, r3, #1
   16fa8:	str	r2, [r0, #20]
   16fac:	mov	r2, #44	; 0x2c
   16fb0:	strb	r2, [r3]
   16fb4:	mov	r0, r4
   16fb8:	ldr	r1, [sp, #16]
   16fbc:	ldr	r2, [sp, #20]
   16fc0:	bl	14bd4 <test_print@@Base+0x1534>
   16fc4:	mov	r0, r5
   16fc8:	ldr	r1, [r4, #20]
   16fcc:	bl	14350 <test_print@@Base+0xcb0>
   16fd0:	ldr	r3, [r4, #20]
   16fd4:	add	r0, r3, r0
   16fd8:	str	r0, [r4, #20]
   16fdc:	pop	{r4, r5, r6, pc}

00016fe0 <flatcc_json_printer_int64_struct_field@@Base>:
   16fe0:	cmp	r1, #0
   16fe4:	push	{r4, r6, r7, lr}
   16fe8:	mov	r4, r0
   16fec:	ldrd	r6, [r2, r3]
   16ff0:	beq	17008 <flatcc_json_printer_int64_struct_field@@Base+0x28>
   16ff4:	ldr	r3, [r0, #20]
   16ff8:	add	r2, r3, #1
   16ffc:	str	r2, [r0, #20]
   17000:	mov	r2, #44	; 0x2c
   17004:	strb	r2, [r3]
   17008:	mov	r0, r4
   1700c:	ldr	r1, [sp, #16]
   17010:	ldr	r2, [sp, #20]
   17014:	bl	14bd4 <test_print@@Base+0x1534>
   17018:	mov	r0, r6
   1701c:	mov	r1, r7
   17020:	ldr	r2, [r4, #20]
   17024:	bl	14374 <test_print@@Base+0xcd4>
   17028:	ldr	r3, [r4, #20]
   1702c:	add	r0, r3, r0
   17030:	str	r0, [r4, #20]
   17034:	pop	{r4, r6, r7, pc}

00017038 <flatcc_json_printer_bool_struct_field@@Base>:
   17038:	cmp	r1, #0
   1703c:	push	{r4, r5, r6, lr}
   17040:	mov	r4, r0
   17044:	ldrb	r5, [r2, r3]
   17048:	beq	17060 <flatcc_json_printer_bool_struct_field@@Base+0x28>
   1704c:	ldr	r3, [r0, #20]
   17050:	add	r2, r3, #1
   17054:	str	r2, [r0, #20]
   17058:	mov	r2, #44	; 0x2c
   1705c:	strb	r2, [r3]
   17060:	mov	r0, r4
   17064:	ldr	r1, [sp, #16]
   17068:	ldr	r2, [sp, #20]
   1706c:	bl	14bd4 <test_print@@Base+0x1534>
   17070:	mov	r0, r5
   17074:	ldr	r1, [r4, #20]
   17078:	bl	14df0 <test_print@@Base+0x1750>
   1707c:	ldr	r3, [r4, #20]
   17080:	add	r0, r3, r0
   17084:	str	r0, [r4, #20]
   17088:	pop	{r4, r5, r6, pc}

0001708c <flatcc_json_printer_float_struct_field@@Base>:
   1708c:	add	r3, r2, r3
   17090:	cmp	r1, #0
   17094:	push	{r4, lr}
   17098:	mov	r4, r0
   1709c:	vpush	{d8}
   170a0:	vldr	s16, [r3]
   170a4:	beq	170bc <flatcc_json_printer_float_struct_field@@Base+0x30>
   170a8:	ldr	r3, [r0, #20]
   170ac:	add	r2, r3, #1
   170b0:	str	r2, [r0, #20]
   170b4:	mov	r2, #44	; 0x2c
   170b8:	strb	r2, [r3]
   170bc:	mov	r0, r4
   170c0:	ldr	r1, [sp, #16]
   170c4:	ldr	r2, [sp, #20]
   170c8:	bl	14bd4 <test_print@@Base+0x1534>
   170cc:	vcvt.f64.f32	d0, s16
   170d0:	ldr	r0, [r4, #20]
   170d4:	bl	15108 <test_print@@Base+0x1a68>
   170d8:	ldr	r3, [r4, #20]
   170dc:	vpop	{d8}
   170e0:	add	r0, r3, r0
   170e4:	str	r0, [r4, #20]
   170e8:	pop	{r4, pc}

000170ec <flatcc_json_printer_double_struct_field@@Base>:
   170ec:	add	r3, r2, r3
   170f0:	cmp	r1, #0
   170f4:	push	{r4, lr}
   170f8:	mov	r4, r0
   170fc:	vpush	{d8}
   17100:	vldr	d8, [r3]
   17104:	beq	1711c <flatcc_json_printer_double_struct_field@@Base+0x30>
   17108:	ldr	r3, [r0, #20]
   1710c:	add	r2, r3, #1
   17110:	str	r2, [r0, #20]
   17114:	mov	r2, #44	; 0x2c
   17118:	strb	r2, [r3]
   1711c:	mov	r0, r4
   17120:	ldr	r1, [sp, #16]
   17124:	ldr	r2, [sp, #20]
   17128:	bl	14bd4 <test_print@@Base+0x1534>
   1712c:	vmov.f64	d0, d8
   17130:	ldr	r0, [r4, #20]
   17134:	bl	15108 <test_print@@Base+0x1a68>
   17138:	ldr	r3, [r4, #20]
   1713c:	vpop	{d8}
   17140:	add	r0, r3, r0
   17144:	str	r0, [r4, #20]
   17148:	pop	{r4, pc}

0001714c <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   1714c:	push	{r4, r5, r6, lr}
   17150:	cmp	r1, #0
   17154:	mov	r4, r0
   17158:	ldrb	r5, [r2, r3]
   1715c:	ldr	r0, [sp, #16]
   17160:	ldr	ip, [sp, #20]
   17164:	ldr	r6, [sp, #24]
   17168:	beq	17180 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x34>
   1716c:	ldr	r3, [r4, #20]
   17170:	add	r2, r3, #1
   17174:	str	r2, [r4, #20]
   17178:	mov	r2, #44	; 0x2c
   1717c:	strb	r2, [r3]
   17180:	mov	r1, r0
   17184:	mov	r2, ip
   17188:	mov	r0, r4
   1718c:	bl	14bd4 <test_print@@Base+0x1534>
   17190:	ldrb	r3, [r4, #27]
   17194:	cmp	r3, #0
   17198:	beq	171b8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x6c>
   1719c:	mov	r0, r5
   171a0:	ldr	r1, [r4, #20]
   171a4:	bl	14c58 <test_print@@Base+0x15b8>
   171a8:	ldr	r3, [r4, #20]
   171ac:	add	r0, r3, r0
   171b0:	str	r0, [r4, #20]
   171b4:	pop	{r4, r5, r6, pc}
   171b8:	mov	r1, r5
   171bc:	mov	r0, r4
   171c0:	mov	r3, r6
   171c4:	pop	{r4, r5, r6, lr}
   171c8:	bx	r3

000171cc <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   171cc:	push	{r4, r5, r6, lr}
   171d0:	cmp	r1, #0
   171d4:	mov	r4, r0
   171d8:	ldrh	r5, [r2, r3]
   171dc:	ldr	r0, [sp, #16]
   171e0:	ldr	ip, [sp, #20]
   171e4:	ldr	r6, [sp, #24]
   171e8:	beq	17200 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x34>
   171ec:	ldr	r3, [r4, #20]
   171f0:	add	r2, r3, #1
   171f4:	str	r2, [r4, #20]
   171f8:	mov	r2, #44	; 0x2c
   171fc:	strb	r2, [r3]
   17200:	mov	r1, r0
   17204:	mov	r2, ip
   17208:	mov	r0, r4
   1720c:	bl	14bd4 <test_print@@Base+0x1534>
   17210:	ldrb	r3, [r4, #27]
   17214:	cmp	r3, #0
   17218:	beq	17238 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x6c>
   1721c:	mov	r0, r5
   17220:	ldr	r1, [r4, #20]
   17224:	bl	138f0 <test_print@@Base+0x250>
   17228:	ldr	r3, [r4, #20]
   1722c:	add	r0, r3, r0
   17230:	str	r0, [r4, #20]
   17234:	pop	{r4, r5, r6, pc}
   17238:	mov	r1, r5
   1723c:	mov	r0, r4
   17240:	mov	r3, r6
   17244:	pop	{r4, r5, r6, lr}
   17248:	bx	r3

0001724c <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   1724c:	push	{r4, r5, r6, lr}
   17250:	cmp	r1, #0
   17254:	mov	r4, r0
   17258:	ldr	r5, [r2, r3]
   1725c:	ldr	r0, [sp, #16]
   17260:	ldr	ip, [sp, #20]
   17264:	ldr	r6, [sp, #24]
   17268:	beq	17280 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x34>
   1726c:	ldr	r3, [r4, #20]
   17270:	add	r2, r3, #1
   17274:	str	r2, [r4, #20]
   17278:	mov	r2, #44	; 0x2c
   1727c:	strb	r2, [r3]
   17280:	mov	r1, r0
   17284:	mov	r2, ip
   17288:	mov	r0, r4
   1728c:	bl	14bd4 <test_print@@Base+0x1534>
   17290:	ldrb	r3, [r4, #27]
   17294:	cmp	r3, #0
   17298:	beq	172b8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x6c>
   1729c:	mov	r0, r5
   172a0:	ldr	r1, [r4, #20]
   172a4:	bl	13a34 <test_print@@Base+0x394>
   172a8:	ldr	r3, [r4, #20]
   172ac:	add	r0, r3, r0
   172b0:	str	r0, [r4, #20]
   172b4:	pop	{r4, r5, r6, pc}
   172b8:	mov	r1, r5
   172bc:	mov	r0, r4
   172c0:	mov	r3, r6
   172c4:	pop	{r4, r5, r6, lr}
   172c8:	bx	r3

000172cc <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   172cc:	push	{r4, r5, r6, r7, r8, lr}
   172d0:	cmp	r1, #0
   172d4:	mov	r4, r0
   172d8:	ldrd	r6, [r2, r3]
   172dc:	ldr	r0, [sp, #24]
   172e0:	ldr	ip, [sp, #28]
   172e4:	ldr	r5, [sp, #32]
   172e8:	beq	17300 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x34>
   172ec:	ldr	r3, [r4, #20]
   172f0:	add	r2, r3, #1
   172f4:	str	r2, [r4, #20]
   172f8:	mov	r2, #44	; 0x2c
   172fc:	strb	r2, [r3]
   17300:	mov	r1, r0
   17304:	mov	r2, ip
   17308:	mov	r0, r4
   1730c:	bl	14bd4 <test_print@@Base+0x1534>
   17310:	ldrb	r3, [r4, #27]
   17314:	cmp	r3, #0
   17318:	beq	1733c <flatcc_json_printer_uint64_enum_struct_field@@Base+0x70>
   1731c:	mov	r0, r6
   17320:	mov	r1, r7
   17324:	ldr	r2, [r4, #20]
   17328:	bl	13ce4 <test_print@@Base+0x644>
   1732c:	ldr	r3, [r4, #20]
   17330:	add	r0, r3, r0
   17334:	str	r0, [r4, #20]
   17338:	pop	{r4, r5, r6, r7, r8, pc}
   1733c:	mov	r2, r6
   17340:	mov	r3, r7
   17344:	mov	r0, r4
   17348:	mov	r1, r5
   1734c:	pop	{r4, r5, r6, r7, r8, lr}
   17350:	bx	r1

00017354 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   17354:	push	{r4, r5, r6, lr}
   17358:	cmp	r1, #0
   1735c:	mov	r4, r0
   17360:	ldrsb	r5, [r2, r3]
   17364:	ldr	r0, [sp, #16]
   17368:	ldr	ip, [sp, #20]
   1736c:	ldr	r6, [sp, #24]
   17370:	beq	17388 <flatcc_json_printer_int8_enum_struct_field@@Base+0x34>
   17374:	ldr	r3, [r4, #20]
   17378:	add	r2, r3, #1
   1737c:	str	r2, [r4, #20]
   17380:	mov	r2, #44	; 0x2c
   17384:	strb	r2, [r3]
   17388:	mov	r1, r0
   1738c:	mov	r2, ip
   17390:	mov	r0, r4
   17394:	bl	14bd4 <test_print@@Base+0x1534>
   17398:	ldrb	r3, [r4, #27]
   1739c:	cmp	r3, #0
   173a0:	beq	173c0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x6c>
   173a4:	mov	r0, r5
   173a8:	ldr	r1, [r4, #20]
   173ac:	bl	14ce8 <test_print@@Base+0x1648>
   173b0:	ldr	r3, [r4, #20]
   173b4:	add	r0, r3, r0
   173b8:	str	r0, [r4, #20]
   173bc:	pop	{r4, r5, r6, pc}
   173c0:	mov	r1, r5
   173c4:	mov	r0, r4
   173c8:	mov	r3, r6
   173cc:	pop	{r4, r5, r6, lr}
   173d0:	bx	r3

000173d4 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   173d4:	push	{r4, r5, r6, lr}
   173d8:	cmp	r1, #0
   173dc:	mov	r4, r0
   173e0:	ldrsh	r5, [r2, r3]
   173e4:	ldr	r0, [sp, #16]
   173e8:	ldr	ip, [sp, #20]
   173ec:	ldr	r6, [sp, #24]
   173f0:	beq	17408 <flatcc_json_printer_int16_enum_struct_field@@Base+0x34>
   173f4:	ldr	r3, [r4, #20]
   173f8:	add	r2, r3, #1
   173fc:	str	r2, [r4, #20]
   17400:	mov	r2, #44	; 0x2c
   17404:	strb	r2, [r3]
   17408:	mov	r1, r0
   1740c:	mov	r2, ip
   17410:	mov	r0, r4
   17414:	bl	14bd4 <test_print@@Base+0x1534>
   17418:	ldrb	r3, [r4, #27]
   1741c:	cmp	r3, #0
   17420:	beq	17440 <flatcc_json_printer_int16_enum_struct_field@@Base+0x6c>
   17424:	mov	r0, r5
   17428:	ldr	r1, [r4, #20]
   1742c:	bl	14324 <test_print@@Base+0xc84>
   17430:	ldr	r3, [r4, #20]
   17434:	add	r0, r3, r0
   17438:	str	r0, [r4, #20]
   1743c:	pop	{r4, r5, r6, pc}
   17440:	mov	r1, r5
   17444:	mov	r0, r4
   17448:	mov	r3, r6
   1744c:	pop	{r4, r5, r6, lr}
   17450:	bx	r3

00017454 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   17454:	push	{r4, r5, r6, lr}
   17458:	cmp	r1, #0
   1745c:	mov	r4, r0
   17460:	ldr	r5, [r2, r3]
   17464:	ldr	r0, [sp, #16]
   17468:	ldr	ip, [sp, #20]
   1746c:	ldr	r6, [sp, #24]
   17470:	beq	17488 <flatcc_json_printer_int32_enum_struct_field@@Base+0x34>
   17474:	ldr	r3, [r4, #20]
   17478:	add	r2, r3, #1
   1747c:	str	r2, [r4, #20]
   17480:	mov	r2, #44	; 0x2c
   17484:	strb	r2, [r3]
   17488:	mov	r1, r0
   1748c:	mov	r2, ip
   17490:	mov	r0, r4
   17494:	bl	14bd4 <test_print@@Base+0x1534>
   17498:	ldrb	r3, [r4, #27]
   1749c:	cmp	r3, #0
   174a0:	beq	174c0 <flatcc_json_printer_int32_enum_struct_field@@Base+0x6c>
   174a4:	mov	r0, r5
   174a8:	ldr	r1, [r4, #20]
   174ac:	bl	14350 <test_print@@Base+0xcb0>
   174b0:	ldr	r3, [r4, #20]
   174b4:	add	r0, r3, r0
   174b8:	str	r0, [r4, #20]
   174bc:	pop	{r4, r5, r6, pc}
   174c0:	mov	r1, r5
   174c4:	mov	r0, r4
   174c8:	mov	r3, r6
   174cc:	pop	{r4, r5, r6, lr}
   174d0:	bx	r3

000174d4 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   174d4:	push	{r4, r5, r6, r7, r8, lr}
   174d8:	cmp	r1, #0
   174dc:	mov	r4, r0
   174e0:	ldrd	r6, [r2, r3]
   174e4:	ldr	r0, [sp, #24]
   174e8:	ldr	ip, [sp, #28]
   174ec:	ldr	r5, [sp, #32]
   174f0:	beq	17508 <flatcc_json_printer_int64_enum_struct_field@@Base+0x34>
   174f4:	ldr	r3, [r4, #20]
   174f8:	add	r2, r3, #1
   174fc:	str	r2, [r4, #20]
   17500:	mov	r2, #44	; 0x2c
   17504:	strb	r2, [r3]
   17508:	mov	r1, r0
   1750c:	mov	r2, ip
   17510:	mov	r0, r4
   17514:	bl	14bd4 <test_print@@Base+0x1534>
   17518:	ldrb	r3, [r4, #27]
   1751c:	cmp	r3, #0
   17520:	beq	17544 <flatcc_json_printer_int64_enum_struct_field@@Base+0x70>
   17524:	mov	r0, r6
   17528:	mov	r1, r7
   1752c:	ldr	r2, [r4, #20]
   17530:	bl	14374 <test_print@@Base+0xcd4>
   17534:	ldr	r3, [r4, #20]
   17538:	add	r0, r3, r0
   1753c:	str	r0, [r4, #20]
   17540:	pop	{r4, r5, r6, r7, r8, pc}
   17544:	mov	r2, r6
   17548:	mov	r3, r7
   1754c:	mov	r0, r4
   17550:	mov	r1, r5
   17554:	pop	{r4, r5, r6, r7, r8, lr}
   17558:	bx	r1

0001755c <flatcc_json_printer_bool_enum_struct_field@@Base>:
   1755c:	push	{r4, r5, r6, lr}
   17560:	cmp	r1, #0
   17564:	mov	r4, r0
   17568:	ldrb	r5, [r2, r3]
   1756c:	ldr	r0, [sp, #16]
   17570:	ldr	ip, [sp, #20]
   17574:	ldr	r6, [sp, #24]
   17578:	beq	17590 <flatcc_json_printer_bool_enum_struct_field@@Base+0x34>
   1757c:	ldr	r3, [r4, #20]
   17580:	add	r2, r3, #1
   17584:	str	r2, [r4, #20]
   17588:	mov	r2, #44	; 0x2c
   1758c:	strb	r2, [r3]
   17590:	mov	r1, r0
   17594:	mov	r2, ip
   17598:	mov	r0, r4
   1759c:	bl	14bd4 <test_print@@Base+0x1534>
   175a0:	ldrb	r3, [r4, #27]
   175a4:	cmp	r3, #0
   175a8:	beq	175c8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x6c>
   175ac:	mov	r0, r5
   175b0:	ldr	r1, [r4, #20]
   175b4:	bl	14df0 <test_print@@Base+0x1750>
   175b8:	ldr	r3, [r4, #20]
   175bc:	add	r0, r3, r0
   175c0:	str	r0, [r4, #20]
   175c4:	pop	{r4, r5, r6, pc}
   175c8:	mov	r1, r5
   175cc:	mov	r0, r4
   175d0:	mov	r3, r6
   175d4:	pop	{r4, r5, r6, lr}
   175d8:	bx	r3

000175dc <flatcc_json_printer_uint8_vector_field@@Base>:
   175dc:	push	{r4, r5, r6, r7, r8, lr}
   175e0:	mov	r5, r1
   175e4:	mov	r4, r0
   175e8:	mov	r1, r2
   175ec:	mov	r0, r5
   175f0:	mov	r8, r3
   175f4:	bl	14688 <test_print@@Base+0xfe8>
   175f8:	cmp	r0, #0
   175fc:	popeq	{r4, r5, r6, r7, r8, pc}
   17600:	ldr	r3, [r5, #16]
   17604:	add	r2, r3, #1
   17608:	cmp	r3, #0
   1760c:	str	r2, [r5, #16]
   17610:	beq	17628 <flatcc_json_printer_uint8_vector_field@@Base+0x4c>
   17614:	ldr	r2, [r4, #20]
   17618:	add	r3, r2, #1
   1761c:	str	r3, [r4, #20]
   17620:	mov	r3, #44	; 0x2c
   17624:	strb	r3, [r2]
   17628:	ldr	r2, [r0]
   1762c:	mov	r1, r8
   17630:	add	r7, r0, r2
   17634:	ldr	r5, [r0, r2]
   17638:	mov	r0, r4
   1763c:	add	r6, r7, #4
   17640:	ldr	r2, [sp, #24]
   17644:	bl	14bd4 <test_print@@Base+0x1534>
   17648:	ldr	r3, [r4, #32]
   1764c:	cmp	r5, #0
   17650:	add	r3, r3, #1
   17654:	str	r3, [r4, #32]
   17658:	ldr	r3, [r4, #20]
   1765c:	add	r2, r3, #1
   17660:	str	r2, [r4, #20]
   17664:	mov	r2, #91	; 0x5b
   17668:	strb	r2, [r3]
   1766c:	beq	176b8 <flatcc_json_printer_uint8_vector_field@@Base+0xdc>
   17670:	ldrb	r3, [r4, #25]
   17674:	cmp	r3, #0
   17678:	beq	17718 <flatcc_json_printer_uint8_vector_field@@Base+0x13c>
   1767c:	ldr	r3, [r4, #20]
   17680:	mov	r0, r4
   17684:	add	r2, r3, #1
   17688:	str	r2, [r4, #20]
   1768c:	mov	r2, #10
   17690:	strb	r2, [r3]
   17694:	bl	149d4 <test_print@@Base+0x1334>
   17698:	ldrb	r0, [r7, #4]
   1769c:	add	r6, r7, #5
   176a0:	sub	r5, r5, #1
   176a4:	ldr	r1, [r4, #20]
   176a8:	bl	14c58 <test_print@@Base+0x15b8>
   176ac:	ldr	r3, [r4, #20]
   176b0:	add	r0, r3, r0
   176b4:	str	r0, [r4, #20]
   176b8:	add	r5, r6, r5
   176bc:	mov	r7, #44	; 0x2c
   176c0:	mov	r8, #10
   176c4:	ldr	r3, [r4, #20]
   176c8:	cmp	r6, r5
   176cc:	add	r2, r3, #1
   176d0:	bne	17724 <flatcc_json_printer_uint8_vector_field@@Base+0x148>
   176d4:	ldrb	r1, [r4, #25]
   176d8:	cmp	r1, #0
   176dc:	beq	17700 <flatcc_json_printer_uint8_vector_field@@Base+0x124>
   176e0:	str	r2, [r4, #20]
   176e4:	mov	r2, #10
   176e8:	mov	r0, r4
   176ec:	strb	r2, [r3]
   176f0:	ldr	r3, [r4, #32]
   176f4:	sub	r3, r3, #1
   176f8:	str	r3, [r4, #32]
   176fc:	bl	149d4 <test_print@@Base+0x1334>
   17700:	ldr	r3, [r4, #20]
   17704:	add	r2, r3, #1
   17708:	str	r2, [r4, #20]
   1770c:	mov	r2, #93	; 0x5d
   17710:	strb	r2, [r3]
   17714:	pop	{r4, r5, r6, r7, r8, pc}
   17718:	mov	r0, r4
   1771c:	bl	14bb8 <test_print@@Base+0x1518>
   17720:	b	17698 <flatcc_json_printer_uint8_vector_field@@Base+0xbc>
   17724:	str	r2, [r4, #20]
   17728:	strb	r7, [r3]
   1772c:	ldrb	r3, [r4, #25]
   17730:	cmp	r3, #0
   17734:	beq	1776c <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   17738:	ldr	r3, [r4, #20]
   1773c:	mov	r0, r4
   17740:	add	r2, r3, #1
   17744:	str	r2, [r4, #20]
   17748:	strb	r8, [r3]
   1774c:	bl	149d4 <test_print@@Base+0x1334>
   17750:	ldrb	r0, [r6], #1
   17754:	ldr	r1, [r4, #20]
   17758:	bl	14c58 <test_print@@Base+0x15b8>
   1775c:	ldr	r3, [r4, #20]
   17760:	add	r0, r3, r0
   17764:	str	r0, [r4, #20]
   17768:	b	176c4 <flatcc_json_printer_uint8_vector_field@@Base+0xe8>
   1776c:	mov	r0, r4
   17770:	bl	14bb8 <test_print@@Base+0x1518>
   17774:	b	17750 <flatcc_json_printer_uint8_vector_field@@Base+0x174>

00017778 <flatcc_json_printer_utype_vector_field@@Base>:
   17778:	b	175dc <flatcc_json_printer_uint8_vector_field@@Base>

0001777c <flatcc_json_printer_uint16_vector_field@@Base>:
   1777c:	push	{r4, r5, r6, r7, r8, lr}
   17780:	mov	r5, r1
   17784:	mov	r4, r0
   17788:	mov	r1, r2
   1778c:	mov	r0, r5
   17790:	mov	r8, r3
   17794:	bl	14688 <test_print@@Base+0xfe8>
   17798:	cmp	r0, #0
   1779c:	popeq	{r4, r5, r6, r7, r8, pc}
   177a0:	ldr	r3, [r5, #16]
   177a4:	add	r2, r3, #1
   177a8:	cmp	r3, #0
   177ac:	str	r2, [r5, #16]
   177b0:	beq	177c8 <flatcc_json_printer_uint16_vector_field@@Base+0x4c>
   177b4:	ldr	r2, [r4, #20]
   177b8:	add	r3, r2, #1
   177bc:	str	r3, [r4, #20]
   177c0:	mov	r3, #44	; 0x2c
   177c4:	strb	r3, [r2]
   177c8:	ldr	r2, [r0]
   177cc:	mov	r1, r8
   177d0:	add	r7, r0, r2
   177d4:	ldr	r5, [r0, r2]
   177d8:	mov	r0, r4
   177dc:	add	r6, r7, #4
   177e0:	ldr	r2, [sp, #24]
   177e4:	bl	14bd4 <test_print@@Base+0x1534>
   177e8:	ldr	r3, [r4, #32]
   177ec:	cmp	r5, #0
   177f0:	add	r3, r3, #1
   177f4:	str	r3, [r4, #32]
   177f8:	ldr	r3, [r4, #20]
   177fc:	add	r2, r3, #1
   17800:	str	r2, [r4, #20]
   17804:	mov	r2, #91	; 0x5b
   17808:	strb	r2, [r3]
   1780c:	beq	17858 <flatcc_json_printer_uint16_vector_field@@Base+0xdc>
   17810:	ldrb	r3, [r4, #25]
   17814:	cmp	r3, #0
   17818:	beq	178b8 <flatcc_json_printer_uint16_vector_field@@Base+0x13c>
   1781c:	ldr	r3, [r4, #20]
   17820:	mov	r0, r4
   17824:	add	r2, r3, #1
   17828:	str	r2, [r4, #20]
   1782c:	mov	r2, #10
   17830:	strb	r2, [r3]
   17834:	bl	149d4 <test_print@@Base+0x1334>
   17838:	ldrh	r0, [r7, #4]
   1783c:	add	r6, r7, #6
   17840:	sub	r5, r5, #1
   17844:	ldr	r1, [r4, #20]
   17848:	bl	138f0 <test_print@@Base+0x250>
   1784c:	ldr	r3, [r4, #20]
   17850:	add	r0, r3, r0
   17854:	str	r0, [r4, #20]
   17858:	mov	r7, #44	; 0x2c
   1785c:	mov	r8, #10
   17860:	ldr	r3, [r4, #20]
   17864:	sub	r5, r5, #1
   17868:	cmn	r5, #1
   1786c:	add	r2, r3, #1
   17870:	bne	178c4 <flatcc_json_printer_uint16_vector_field@@Base+0x148>
   17874:	ldrb	r1, [r4, #25]
   17878:	cmp	r1, #0
   1787c:	beq	178a0 <flatcc_json_printer_uint16_vector_field@@Base+0x124>
   17880:	str	r2, [r4, #20]
   17884:	mov	r2, #10
   17888:	mov	r0, r4
   1788c:	strb	r2, [r3]
   17890:	ldr	r3, [r4, #32]
   17894:	sub	r3, r3, #1
   17898:	str	r3, [r4, #32]
   1789c:	bl	149d4 <test_print@@Base+0x1334>
   178a0:	ldr	r3, [r4, #20]
   178a4:	add	r2, r3, #1
   178a8:	str	r2, [r4, #20]
   178ac:	mov	r2, #93	; 0x5d
   178b0:	strb	r2, [r3]
   178b4:	pop	{r4, r5, r6, r7, r8, pc}
   178b8:	mov	r0, r4
   178bc:	bl	14bb8 <test_print@@Base+0x1518>
   178c0:	b	17838 <flatcc_json_printer_uint16_vector_field@@Base+0xbc>
   178c4:	str	r2, [r4, #20]
   178c8:	strb	r7, [r3]
   178cc:	ldrb	r3, [r4, #25]
   178d0:	cmp	r3, #0
   178d4:	beq	1790c <flatcc_json_printer_uint16_vector_field@@Base+0x190>
   178d8:	ldr	r3, [r4, #20]
   178dc:	mov	r0, r4
   178e0:	add	r2, r3, #1
   178e4:	str	r2, [r4, #20]
   178e8:	strb	r8, [r3]
   178ec:	bl	149d4 <test_print@@Base+0x1334>
   178f0:	ldrh	r0, [r6], #2
   178f4:	ldr	r1, [r4, #20]
   178f8:	bl	138f0 <test_print@@Base+0x250>
   178fc:	ldr	r3, [r4, #20]
   17900:	add	r0, r3, r0
   17904:	str	r0, [r4, #20]
   17908:	b	17860 <flatcc_json_printer_uint16_vector_field@@Base+0xe4>
   1790c:	mov	r0, r4
   17910:	bl	14bb8 <test_print@@Base+0x1518>
   17914:	b	178f0 <flatcc_json_printer_uint16_vector_field@@Base+0x174>

00017918 <flatcc_json_printer_uint32_vector_field@@Base>:
   17918:	push	{r4, r5, r6, r7, r8, lr}
   1791c:	mov	r5, r1
   17920:	mov	r4, r0
   17924:	mov	r1, r2
   17928:	mov	r0, r5
   1792c:	mov	r8, r3
   17930:	bl	14688 <test_print@@Base+0xfe8>
   17934:	cmp	r0, #0
   17938:	popeq	{r4, r5, r6, r7, r8, pc}
   1793c:	ldr	r3, [r5, #16]
   17940:	add	r2, r3, #1
   17944:	cmp	r3, #0
   17948:	str	r2, [r5, #16]
   1794c:	beq	17964 <flatcc_json_printer_uint32_vector_field@@Base+0x4c>
   17950:	ldr	r2, [r4, #20]
   17954:	add	r3, r2, #1
   17958:	str	r3, [r4, #20]
   1795c:	mov	r3, #44	; 0x2c
   17960:	strb	r3, [r2]
   17964:	ldr	r2, [r0]
   17968:	mov	r1, r8
   1796c:	add	r7, r0, r2
   17970:	ldr	r5, [r0, r2]
   17974:	mov	r0, r4
   17978:	add	r6, r7, #4
   1797c:	ldr	r2, [sp, #24]
   17980:	bl	14bd4 <test_print@@Base+0x1534>
   17984:	ldr	r3, [r4, #32]
   17988:	cmp	r5, #0
   1798c:	add	r3, r3, #1
   17990:	str	r3, [r4, #32]
   17994:	ldr	r3, [r4, #20]
   17998:	add	r2, r3, #1
   1799c:	str	r2, [r4, #20]
   179a0:	mov	r2, #91	; 0x5b
   179a4:	strb	r2, [r3]
   179a8:	beq	179f4 <flatcc_json_printer_uint32_vector_field@@Base+0xdc>
   179ac:	ldrb	r3, [r4, #25]
   179b0:	cmp	r3, #0
   179b4:	beq	17a54 <flatcc_json_printer_uint32_vector_field@@Base+0x13c>
   179b8:	ldr	r3, [r4, #20]
   179bc:	mov	r0, r4
   179c0:	add	r2, r3, #1
   179c4:	str	r2, [r4, #20]
   179c8:	mov	r2, #10
   179cc:	strb	r2, [r3]
   179d0:	bl	149d4 <test_print@@Base+0x1334>
   179d4:	ldr	r0, [r7, #4]
   179d8:	add	r6, r7, #8
   179dc:	sub	r5, r5, #1
   179e0:	ldr	r1, [r4, #20]
   179e4:	bl	13a34 <test_print@@Base+0x394>
   179e8:	ldr	r3, [r4, #20]
   179ec:	add	r0, r3, r0
   179f0:	str	r0, [r4, #20]
   179f4:	mov	r7, #44	; 0x2c
   179f8:	mov	r8, #10
   179fc:	ldr	r3, [r4, #20]
   17a00:	sub	r5, r5, #1
   17a04:	cmn	r5, #1
   17a08:	add	r2, r3, #1
   17a0c:	bne	17a60 <flatcc_json_printer_uint32_vector_field@@Base+0x148>
   17a10:	ldrb	r1, [r4, #25]
   17a14:	cmp	r1, #0
   17a18:	beq	17a3c <flatcc_json_printer_uint32_vector_field@@Base+0x124>
   17a1c:	str	r2, [r4, #20]
   17a20:	mov	r2, #10
   17a24:	mov	r0, r4
   17a28:	strb	r2, [r3]
   17a2c:	ldr	r3, [r4, #32]
   17a30:	sub	r3, r3, #1
   17a34:	str	r3, [r4, #32]
   17a38:	bl	149d4 <test_print@@Base+0x1334>
   17a3c:	ldr	r3, [r4, #20]
   17a40:	add	r2, r3, #1
   17a44:	str	r2, [r4, #20]
   17a48:	mov	r2, #93	; 0x5d
   17a4c:	strb	r2, [r3]
   17a50:	pop	{r4, r5, r6, r7, r8, pc}
   17a54:	mov	r0, r4
   17a58:	bl	14bb8 <test_print@@Base+0x1518>
   17a5c:	b	179d4 <flatcc_json_printer_uint32_vector_field@@Base+0xbc>
   17a60:	str	r2, [r4, #20]
   17a64:	strb	r7, [r3]
   17a68:	ldrb	r3, [r4, #25]
   17a6c:	cmp	r3, #0
   17a70:	beq	17aa8 <flatcc_json_printer_uint32_vector_field@@Base+0x190>
   17a74:	ldr	r3, [r4, #20]
   17a78:	mov	r0, r4
   17a7c:	add	r2, r3, #1
   17a80:	str	r2, [r4, #20]
   17a84:	strb	r8, [r3]
   17a88:	bl	149d4 <test_print@@Base+0x1334>
   17a8c:	ldr	r0, [r6], #4
   17a90:	ldr	r1, [r4, #20]
   17a94:	bl	13a34 <test_print@@Base+0x394>
   17a98:	ldr	r3, [r4, #20]
   17a9c:	add	r0, r3, r0
   17aa0:	str	r0, [r4, #20]
   17aa4:	b	179fc <flatcc_json_printer_uint32_vector_field@@Base+0xe4>
   17aa8:	mov	r0, r4
   17aac:	bl	14bb8 <test_print@@Base+0x1518>
   17ab0:	b	17a8c <flatcc_json_printer_uint32_vector_field@@Base+0x174>

00017ab4 <flatcc_json_printer_uint64_vector_field@@Base>:
   17ab4:	push	{r4, r5, r6, r7, r8, lr}
   17ab8:	mov	r5, r1
   17abc:	mov	r4, r0
   17ac0:	mov	r1, r2
   17ac4:	mov	r0, r5
   17ac8:	mov	r8, r3
   17acc:	bl	14688 <test_print@@Base+0xfe8>
   17ad0:	cmp	r0, #0
   17ad4:	popeq	{r4, r5, r6, r7, r8, pc}
   17ad8:	ldr	r3, [r5, #16]
   17adc:	add	r2, r3, #1
   17ae0:	cmp	r3, #0
   17ae4:	str	r2, [r5, #16]
   17ae8:	beq	17b00 <flatcc_json_printer_uint64_vector_field@@Base+0x4c>
   17aec:	ldr	r2, [r4, #20]
   17af0:	add	r3, r2, #1
   17af4:	str	r3, [r4, #20]
   17af8:	mov	r3, #44	; 0x2c
   17afc:	strb	r3, [r2]
   17b00:	ldr	r2, [r0]
   17b04:	mov	r1, r8
   17b08:	add	r7, r0, r2
   17b0c:	ldr	r5, [r0, r2]
   17b10:	mov	r0, r4
   17b14:	add	r6, r7, #4
   17b18:	ldr	r2, [sp, #24]
   17b1c:	bl	14bd4 <test_print@@Base+0x1534>
   17b20:	ldr	r3, [r4, #32]
   17b24:	cmp	r5, #0
   17b28:	add	r3, r3, #1
   17b2c:	str	r3, [r4, #32]
   17b30:	ldr	r3, [r4, #20]
   17b34:	add	r2, r3, #1
   17b38:	str	r2, [r4, #20]
   17b3c:	mov	r2, #91	; 0x5b
   17b40:	strb	r2, [r3]
   17b44:	beq	17b90 <flatcc_json_printer_uint64_vector_field@@Base+0xdc>
   17b48:	ldrb	r3, [r4, #25]
   17b4c:	cmp	r3, #0
   17b50:	beq	17bf0 <flatcc_json_printer_uint64_vector_field@@Base+0x13c>
   17b54:	ldr	r3, [r4, #20]
   17b58:	mov	r0, r4
   17b5c:	add	r2, r3, #1
   17b60:	str	r2, [r4, #20]
   17b64:	mov	r2, #10
   17b68:	strb	r2, [r3]
   17b6c:	bl	149d4 <test_print@@Base+0x1334>
   17b70:	ldrd	r0, [r7, #4]
   17b74:	add	r6, r7, #12
   17b78:	sub	r5, r5, #1
   17b7c:	ldr	r2, [r4, #20]
   17b80:	bl	13ce4 <test_print@@Base+0x644>
   17b84:	ldr	r3, [r4, #20]
   17b88:	add	r0, r3, r0
   17b8c:	str	r0, [r4, #20]
   17b90:	mov	r7, #44	; 0x2c
   17b94:	mov	r8, #10
   17b98:	ldr	r3, [r4, #20]
   17b9c:	sub	r5, r5, #1
   17ba0:	cmn	r5, #1
   17ba4:	add	r2, r3, #1
   17ba8:	bne	17bfc <flatcc_json_printer_uint64_vector_field@@Base+0x148>
   17bac:	ldrb	r1, [r4, #25]
   17bb0:	cmp	r1, #0
   17bb4:	beq	17bd8 <flatcc_json_printer_uint64_vector_field@@Base+0x124>
   17bb8:	str	r2, [r4, #20]
   17bbc:	mov	r2, #10
   17bc0:	mov	r0, r4
   17bc4:	strb	r2, [r3]
   17bc8:	ldr	r3, [r4, #32]
   17bcc:	sub	r3, r3, #1
   17bd0:	str	r3, [r4, #32]
   17bd4:	bl	149d4 <test_print@@Base+0x1334>
   17bd8:	ldr	r3, [r4, #20]
   17bdc:	add	r2, r3, #1
   17be0:	str	r2, [r4, #20]
   17be4:	mov	r2, #93	; 0x5d
   17be8:	strb	r2, [r3]
   17bec:	pop	{r4, r5, r6, r7, r8, pc}
   17bf0:	mov	r0, r4
   17bf4:	bl	14bb8 <test_print@@Base+0x1518>
   17bf8:	b	17b70 <flatcc_json_printer_uint64_vector_field@@Base+0xbc>
   17bfc:	str	r2, [r4, #20]
   17c00:	strb	r7, [r3]
   17c04:	ldrb	r3, [r4, #25]
   17c08:	cmp	r3, #0
   17c0c:	beq	17c44 <flatcc_json_printer_uint64_vector_field@@Base+0x190>
   17c10:	ldr	r3, [r4, #20]
   17c14:	mov	r0, r4
   17c18:	add	r2, r3, #1
   17c1c:	str	r2, [r4, #20]
   17c20:	strb	r8, [r3]
   17c24:	bl	149d4 <test_print@@Base+0x1334>
   17c28:	ldrd	r0, [r6], #8
   17c2c:	ldr	r2, [r4, #20]
   17c30:	bl	13ce4 <test_print@@Base+0x644>
   17c34:	ldr	r3, [r4, #20]
   17c38:	add	r0, r3, r0
   17c3c:	str	r0, [r4, #20]
   17c40:	b	17b98 <flatcc_json_printer_uint64_vector_field@@Base+0xe4>
   17c44:	mov	r0, r4
   17c48:	bl	14bb8 <test_print@@Base+0x1518>
   17c4c:	b	17c28 <flatcc_json_printer_uint64_vector_field@@Base+0x174>

00017c50 <flatcc_json_printer_int8_vector_field@@Base>:
   17c50:	push	{r4, r5, r6, r7, r8, lr}
   17c54:	mov	r5, r1
   17c58:	mov	r4, r0
   17c5c:	mov	r1, r2
   17c60:	mov	r0, r5
   17c64:	mov	r8, r3
   17c68:	bl	14688 <test_print@@Base+0xfe8>
   17c6c:	cmp	r0, #0
   17c70:	popeq	{r4, r5, r6, r7, r8, pc}
   17c74:	ldr	r3, [r5, #16]
   17c78:	add	r2, r3, #1
   17c7c:	cmp	r3, #0
   17c80:	str	r2, [r5, #16]
   17c84:	beq	17c9c <flatcc_json_printer_int8_vector_field@@Base+0x4c>
   17c88:	ldr	r2, [r4, #20]
   17c8c:	add	r3, r2, #1
   17c90:	str	r3, [r4, #20]
   17c94:	mov	r3, #44	; 0x2c
   17c98:	strb	r3, [r2]
   17c9c:	ldr	r2, [r0]
   17ca0:	mov	r1, r8
   17ca4:	add	r7, r0, r2
   17ca8:	ldr	r5, [r0, r2]
   17cac:	mov	r0, r4
   17cb0:	add	r6, r7, #4
   17cb4:	ldr	r2, [sp, #24]
   17cb8:	bl	14bd4 <test_print@@Base+0x1534>
   17cbc:	ldr	r3, [r4, #32]
   17cc0:	cmp	r5, #0
   17cc4:	add	r3, r3, #1
   17cc8:	str	r3, [r4, #32]
   17ccc:	ldr	r3, [r4, #20]
   17cd0:	add	r2, r3, #1
   17cd4:	str	r2, [r4, #20]
   17cd8:	mov	r2, #91	; 0x5b
   17cdc:	strb	r2, [r3]
   17ce0:	beq	17d2c <flatcc_json_printer_int8_vector_field@@Base+0xdc>
   17ce4:	ldrb	r3, [r4, #25]
   17ce8:	cmp	r3, #0
   17cec:	beq	17d8c <flatcc_json_printer_int8_vector_field@@Base+0x13c>
   17cf0:	ldr	r3, [r4, #20]
   17cf4:	mov	r0, r4
   17cf8:	add	r2, r3, #1
   17cfc:	str	r2, [r4, #20]
   17d00:	mov	r2, #10
   17d04:	strb	r2, [r3]
   17d08:	bl	149d4 <test_print@@Base+0x1334>
   17d0c:	ldrsb	r0, [r7, #4]
   17d10:	add	r6, r7, #5
   17d14:	sub	r5, r5, #1
   17d18:	ldr	r1, [r4, #20]
   17d1c:	bl	14ce8 <test_print@@Base+0x1648>
   17d20:	ldr	r3, [r4, #20]
   17d24:	add	r0, r3, r0
   17d28:	str	r0, [r4, #20]
   17d2c:	add	r5, r6, r5
   17d30:	mov	r7, #44	; 0x2c
   17d34:	mov	r8, #10
   17d38:	ldr	r3, [r4, #20]
   17d3c:	cmp	r6, r5
   17d40:	add	r2, r3, #1
   17d44:	bne	17d98 <flatcc_json_printer_int8_vector_field@@Base+0x148>
   17d48:	ldrb	r1, [r4, #25]
   17d4c:	cmp	r1, #0
   17d50:	beq	17d74 <flatcc_json_printer_int8_vector_field@@Base+0x124>
   17d54:	str	r2, [r4, #20]
   17d58:	mov	r2, #10
   17d5c:	mov	r0, r4
   17d60:	strb	r2, [r3]
   17d64:	ldr	r3, [r4, #32]
   17d68:	sub	r3, r3, #1
   17d6c:	str	r3, [r4, #32]
   17d70:	bl	149d4 <test_print@@Base+0x1334>
   17d74:	ldr	r3, [r4, #20]
   17d78:	add	r2, r3, #1
   17d7c:	str	r2, [r4, #20]
   17d80:	mov	r2, #93	; 0x5d
   17d84:	strb	r2, [r3]
   17d88:	pop	{r4, r5, r6, r7, r8, pc}
   17d8c:	mov	r0, r4
   17d90:	bl	14bb8 <test_print@@Base+0x1518>
   17d94:	b	17d0c <flatcc_json_printer_int8_vector_field@@Base+0xbc>
   17d98:	str	r2, [r4, #20]
   17d9c:	strb	r7, [r3]
   17da0:	ldrb	r3, [r4, #25]
   17da4:	cmp	r3, #0
   17da8:	beq	17de0 <flatcc_json_printer_int8_vector_field@@Base+0x190>
   17dac:	ldr	r3, [r4, #20]
   17db0:	mov	r0, r4
   17db4:	add	r2, r3, #1
   17db8:	str	r2, [r4, #20]
   17dbc:	strb	r8, [r3]
   17dc0:	bl	149d4 <test_print@@Base+0x1334>
   17dc4:	ldrsb	r0, [r6], #1
   17dc8:	ldr	r1, [r4, #20]
   17dcc:	bl	14ce8 <test_print@@Base+0x1648>
   17dd0:	ldr	r3, [r4, #20]
   17dd4:	add	r0, r3, r0
   17dd8:	str	r0, [r4, #20]
   17ddc:	b	17d38 <flatcc_json_printer_int8_vector_field@@Base+0xe8>
   17de0:	mov	r0, r4
   17de4:	bl	14bb8 <test_print@@Base+0x1518>
   17de8:	b	17dc4 <flatcc_json_printer_int8_vector_field@@Base+0x174>

00017dec <flatcc_json_printer_int16_vector_field@@Base>:
   17dec:	push	{r4, r5, r6, r7, r8, lr}
   17df0:	mov	r5, r1
   17df4:	mov	r4, r0
   17df8:	mov	r1, r2
   17dfc:	mov	r0, r5
   17e00:	mov	r8, r3
   17e04:	bl	14688 <test_print@@Base+0xfe8>
   17e08:	cmp	r0, #0
   17e0c:	popeq	{r4, r5, r6, r7, r8, pc}
   17e10:	ldr	r3, [r5, #16]
   17e14:	add	r2, r3, #1
   17e18:	cmp	r3, #0
   17e1c:	str	r2, [r5, #16]
   17e20:	beq	17e38 <flatcc_json_printer_int16_vector_field@@Base+0x4c>
   17e24:	ldr	r2, [r4, #20]
   17e28:	add	r3, r2, #1
   17e2c:	str	r3, [r4, #20]
   17e30:	mov	r3, #44	; 0x2c
   17e34:	strb	r3, [r2]
   17e38:	ldr	r2, [r0]
   17e3c:	mov	r1, r8
   17e40:	add	r7, r0, r2
   17e44:	ldr	r5, [r0, r2]
   17e48:	mov	r0, r4
   17e4c:	add	r6, r7, #4
   17e50:	ldr	r2, [sp, #24]
   17e54:	bl	14bd4 <test_print@@Base+0x1534>
   17e58:	ldr	r3, [r4, #32]
   17e5c:	cmp	r5, #0
   17e60:	add	r3, r3, #1
   17e64:	str	r3, [r4, #32]
   17e68:	ldr	r3, [r4, #20]
   17e6c:	add	r2, r3, #1
   17e70:	str	r2, [r4, #20]
   17e74:	mov	r2, #91	; 0x5b
   17e78:	strb	r2, [r3]
   17e7c:	beq	17ec8 <flatcc_json_printer_int16_vector_field@@Base+0xdc>
   17e80:	ldrb	r3, [r4, #25]
   17e84:	cmp	r3, #0
   17e88:	beq	17f28 <flatcc_json_printer_int16_vector_field@@Base+0x13c>
   17e8c:	ldr	r3, [r4, #20]
   17e90:	mov	r0, r4
   17e94:	add	r2, r3, #1
   17e98:	str	r2, [r4, #20]
   17e9c:	mov	r2, #10
   17ea0:	strb	r2, [r3]
   17ea4:	bl	149d4 <test_print@@Base+0x1334>
   17ea8:	ldrsh	r0, [r7, #4]
   17eac:	add	r6, r7, #6
   17eb0:	sub	r5, r5, #1
   17eb4:	ldr	r1, [r4, #20]
   17eb8:	bl	14324 <test_print@@Base+0xc84>
   17ebc:	ldr	r3, [r4, #20]
   17ec0:	add	r0, r3, r0
   17ec4:	str	r0, [r4, #20]
   17ec8:	mov	r7, #44	; 0x2c
   17ecc:	mov	r8, #10
   17ed0:	ldr	r3, [r4, #20]
   17ed4:	sub	r5, r5, #1
   17ed8:	cmn	r5, #1
   17edc:	add	r2, r3, #1
   17ee0:	bne	17f34 <flatcc_json_printer_int16_vector_field@@Base+0x148>
   17ee4:	ldrb	r1, [r4, #25]
   17ee8:	cmp	r1, #0
   17eec:	beq	17f10 <flatcc_json_printer_int16_vector_field@@Base+0x124>
   17ef0:	str	r2, [r4, #20]
   17ef4:	mov	r2, #10
   17ef8:	mov	r0, r4
   17efc:	strb	r2, [r3]
   17f00:	ldr	r3, [r4, #32]
   17f04:	sub	r3, r3, #1
   17f08:	str	r3, [r4, #32]
   17f0c:	bl	149d4 <test_print@@Base+0x1334>
   17f10:	ldr	r3, [r4, #20]
   17f14:	add	r2, r3, #1
   17f18:	str	r2, [r4, #20]
   17f1c:	mov	r2, #93	; 0x5d
   17f20:	strb	r2, [r3]
   17f24:	pop	{r4, r5, r6, r7, r8, pc}
   17f28:	mov	r0, r4
   17f2c:	bl	14bb8 <test_print@@Base+0x1518>
   17f30:	b	17ea8 <flatcc_json_printer_int16_vector_field@@Base+0xbc>
   17f34:	str	r2, [r4, #20]
   17f38:	strb	r7, [r3]
   17f3c:	ldrb	r3, [r4, #25]
   17f40:	cmp	r3, #0
   17f44:	beq	17f7c <flatcc_json_printer_int16_vector_field@@Base+0x190>
   17f48:	ldr	r3, [r4, #20]
   17f4c:	mov	r0, r4
   17f50:	add	r2, r3, #1
   17f54:	str	r2, [r4, #20]
   17f58:	strb	r8, [r3]
   17f5c:	bl	149d4 <test_print@@Base+0x1334>
   17f60:	ldrsh	r0, [r6], #2
   17f64:	ldr	r1, [r4, #20]
   17f68:	bl	14324 <test_print@@Base+0xc84>
   17f6c:	ldr	r3, [r4, #20]
   17f70:	add	r0, r3, r0
   17f74:	str	r0, [r4, #20]
   17f78:	b	17ed0 <flatcc_json_printer_int16_vector_field@@Base+0xe4>
   17f7c:	mov	r0, r4
   17f80:	bl	14bb8 <test_print@@Base+0x1518>
   17f84:	b	17f60 <flatcc_json_printer_int16_vector_field@@Base+0x174>

00017f88 <flatcc_json_printer_int32_vector_field@@Base>:
   17f88:	push	{r4, r5, r6, r7, r8, lr}
   17f8c:	mov	r5, r1
   17f90:	mov	r4, r0
   17f94:	mov	r1, r2
   17f98:	mov	r0, r5
   17f9c:	mov	r8, r3
   17fa0:	bl	14688 <test_print@@Base+0xfe8>
   17fa4:	cmp	r0, #0
   17fa8:	popeq	{r4, r5, r6, r7, r8, pc}
   17fac:	ldr	r3, [r5, #16]
   17fb0:	add	r2, r3, #1
   17fb4:	cmp	r3, #0
   17fb8:	str	r2, [r5, #16]
   17fbc:	beq	17fd4 <flatcc_json_printer_int32_vector_field@@Base+0x4c>
   17fc0:	ldr	r2, [r4, #20]
   17fc4:	add	r3, r2, #1
   17fc8:	str	r3, [r4, #20]
   17fcc:	mov	r3, #44	; 0x2c
   17fd0:	strb	r3, [r2]
   17fd4:	ldr	r2, [r0]
   17fd8:	mov	r1, r8
   17fdc:	add	r7, r0, r2
   17fe0:	ldr	r5, [r0, r2]
   17fe4:	mov	r0, r4
   17fe8:	add	r6, r7, #4
   17fec:	ldr	r2, [sp, #24]
   17ff0:	bl	14bd4 <test_print@@Base+0x1534>
   17ff4:	ldr	r3, [r4, #32]
   17ff8:	cmp	r5, #0
   17ffc:	add	r3, r3, #1
   18000:	str	r3, [r4, #32]
   18004:	ldr	r3, [r4, #20]
   18008:	add	r2, r3, #1
   1800c:	str	r2, [r4, #20]
   18010:	mov	r2, #91	; 0x5b
   18014:	strb	r2, [r3]
   18018:	beq	18064 <flatcc_json_printer_int32_vector_field@@Base+0xdc>
   1801c:	ldrb	r3, [r4, #25]
   18020:	cmp	r3, #0
   18024:	beq	180c4 <flatcc_json_printer_int32_vector_field@@Base+0x13c>
   18028:	ldr	r3, [r4, #20]
   1802c:	mov	r0, r4
   18030:	add	r2, r3, #1
   18034:	str	r2, [r4, #20]
   18038:	mov	r2, #10
   1803c:	strb	r2, [r3]
   18040:	bl	149d4 <test_print@@Base+0x1334>
   18044:	ldr	r0, [r7, #4]
   18048:	add	r6, r7, #8
   1804c:	sub	r5, r5, #1
   18050:	ldr	r1, [r4, #20]
   18054:	bl	14350 <test_print@@Base+0xcb0>
   18058:	ldr	r3, [r4, #20]
   1805c:	add	r0, r3, r0
   18060:	str	r0, [r4, #20]
   18064:	mov	r7, #44	; 0x2c
   18068:	mov	r8, #10
   1806c:	ldr	r3, [r4, #20]
   18070:	sub	r5, r5, #1
   18074:	cmn	r5, #1
   18078:	add	r2, r3, #1
   1807c:	bne	180d0 <flatcc_json_printer_int32_vector_field@@Base+0x148>
   18080:	ldrb	r1, [r4, #25]
   18084:	cmp	r1, #0
   18088:	beq	180ac <flatcc_json_printer_int32_vector_field@@Base+0x124>
   1808c:	str	r2, [r4, #20]
   18090:	mov	r2, #10
   18094:	mov	r0, r4
   18098:	strb	r2, [r3]
   1809c:	ldr	r3, [r4, #32]
   180a0:	sub	r3, r3, #1
   180a4:	str	r3, [r4, #32]
   180a8:	bl	149d4 <test_print@@Base+0x1334>
   180ac:	ldr	r3, [r4, #20]
   180b0:	add	r2, r3, #1
   180b4:	str	r2, [r4, #20]
   180b8:	mov	r2, #93	; 0x5d
   180bc:	strb	r2, [r3]
   180c0:	pop	{r4, r5, r6, r7, r8, pc}
   180c4:	mov	r0, r4
   180c8:	bl	14bb8 <test_print@@Base+0x1518>
   180cc:	b	18044 <flatcc_json_printer_int32_vector_field@@Base+0xbc>
   180d0:	str	r2, [r4, #20]
   180d4:	strb	r7, [r3]
   180d8:	ldrb	r3, [r4, #25]
   180dc:	cmp	r3, #0
   180e0:	beq	18118 <flatcc_json_printer_int32_vector_field@@Base+0x190>
   180e4:	ldr	r3, [r4, #20]
   180e8:	mov	r0, r4
   180ec:	add	r2, r3, #1
   180f0:	str	r2, [r4, #20]
   180f4:	strb	r8, [r3]
   180f8:	bl	149d4 <test_print@@Base+0x1334>
   180fc:	ldr	r0, [r6], #4
   18100:	ldr	r1, [r4, #20]
   18104:	bl	14350 <test_print@@Base+0xcb0>
   18108:	ldr	r3, [r4, #20]
   1810c:	add	r0, r3, r0
   18110:	str	r0, [r4, #20]
   18114:	b	1806c <flatcc_json_printer_int32_vector_field@@Base+0xe4>
   18118:	mov	r0, r4
   1811c:	bl	14bb8 <test_print@@Base+0x1518>
   18120:	b	180fc <flatcc_json_printer_int32_vector_field@@Base+0x174>

00018124 <flatcc_json_printer_int64_vector_field@@Base>:
   18124:	push	{r4, r5, r6, r7, r8, lr}
   18128:	mov	r5, r1
   1812c:	mov	r4, r0
   18130:	mov	r1, r2
   18134:	mov	r0, r5
   18138:	mov	r8, r3
   1813c:	bl	14688 <test_print@@Base+0xfe8>
   18140:	cmp	r0, #0
   18144:	popeq	{r4, r5, r6, r7, r8, pc}
   18148:	ldr	r3, [r5, #16]
   1814c:	add	r2, r3, #1
   18150:	cmp	r3, #0
   18154:	str	r2, [r5, #16]
   18158:	beq	18170 <flatcc_json_printer_int64_vector_field@@Base+0x4c>
   1815c:	ldr	r2, [r4, #20]
   18160:	add	r3, r2, #1
   18164:	str	r3, [r4, #20]
   18168:	mov	r3, #44	; 0x2c
   1816c:	strb	r3, [r2]
   18170:	ldr	r2, [r0]
   18174:	mov	r1, r8
   18178:	add	r7, r0, r2
   1817c:	ldr	r5, [r0, r2]
   18180:	mov	r0, r4
   18184:	add	r6, r7, #4
   18188:	ldr	r2, [sp, #24]
   1818c:	bl	14bd4 <test_print@@Base+0x1534>
   18190:	ldr	r3, [r4, #32]
   18194:	cmp	r5, #0
   18198:	add	r3, r3, #1
   1819c:	str	r3, [r4, #32]
   181a0:	ldr	r3, [r4, #20]
   181a4:	add	r2, r3, #1
   181a8:	str	r2, [r4, #20]
   181ac:	mov	r2, #91	; 0x5b
   181b0:	strb	r2, [r3]
   181b4:	beq	18200 <flatcc_json_printer_int64_vector_field@@Base+0xdc>
   181b8:	ldrb	r3, [r4, #25]
   181bc:	cmp	r3, #0
   181c0:	beq	18260 <flatcc_json_printer_int64_vector_field@@Base+0x13c>
   181c4:	ldr	r3, [r4, #20]
   181c8:	mov	r0, r4
   181cc:	add	r2, r3, #1
   181d0:	str	r2, [r4, #20]
   181d4:	mov	r2, #10
   181d8:	strb	r2, [r3]
   181dc:	bl	149d4 <test_print@@Base+0x1334>
   181e0:	ldrd	r0, [r7, #4]
   181e4:	add	r6, r7, #12
   181e8:	sub	r5, r5, #1
   181ec:	ldr	r2, [r4, #20]
   181f0:	bl	14374 <test_print@@Base+0xcd4>
   181f4:	ldr	r3, [r4, #20]
   181f8:	add	r0, r3, r0
   181fc:	str	r0, [r4, #20]
   18200:	mov	r7, #44	; 0x2c
   18204:	mov	r8, #10
   18208:	ldr	r3, [r4, #20]
   1820c:	sub	r5, r5, #1
   18210:	cmn	r5, #1
   18214:	add	r2, r3, #1
   18218:	bne	1826c <flatcc_json_printer_int64_vector_field@@Base+0x148>
   1821c:	ldrb	r1, [r4, #25]
   18220:	cmp	r1, #0
   18224:	beq	18248 <flatcc_json_printer_int64_vector_field@@Base+0x124>
   18228:	str	r2, [r4, #20]
   1822c:	mov	r2, #10
   18230:	mov	r0, r4
   18234:	strb	r2, [r3]
   18238:	ldr	r3, [r4, #32]
   1823c:	sub	r3, r3, #1
   18240:	str	r3, [r4, #32]
   18244:	bl	149d4 <test_print@@Base+0x1334>
   18248:	ldr	r3, [r4, #20]
   1824c:	add	r2, r3, #1
   18250:	str	r2, [r4, #20]
   18254:	mov	r2, #93	; 0x5d
   18258:	strb	r2, [r3]
   1825c:	pop	{r4, r5, r6, r7, r8, pc}
   18260:	mov	r0, r4
   18264:	bl	14bb8 <test_print@@Base+0x1518>
   18268:	b	181e0 <flatcc_json_printer_int64_vector_field@@Base+0xbc>
   1826c:	str	r2, [r4, #20]
   18270:	strb	r7, [r3]
   18274:	ldrb	r3, [r4, #25]
   18278:	cmp	r3, #0
   1827c:	beq	182b4 <flatcc_json_printer_int64_vector_field@@Base+0x190>
   18280:	ldr	r3, [r4, #20]
   18284:	mov	r0, r4
   18288:	add	r2, r3, #1
   1828c:	str	r2, [r4, #20]
   18290:	strb	r8, [r3]
   18294:	bl	149d4 <test_print@@Base+0x1334>
   18298:	ldrd	r0, [r6], #8
   1829c:	ldr	r2, [r4, #20]
   182a0:	bl	14374 <test_print@@Base+0xcd4>
   182a4:	ldr	r3, [r4, #20]
   182a8:	add	r0, r3, r0
   182ac:	str	r0, [r4, #20]
   182b0:	b	18208 <flatcc_json_printer_int64_vector_field@@Base+0xe4>
   182b4:	mov	r0, r4
   182b8:	bl	14bb8 <test_print@@Base+0x1518>
   182bc:	b	18298 <flatcc_json_printer_int64_vector_field@@Base+0x174>

000182c0 <flatcc_json_printer_bool_vector_field@@Base>:
   182c0:	push	{r4, r5, r6, r7, r8, lr}
   182c4:	mov	r5, r1
   182c8:	mov	r4, r0
   182cc:	mov	r1, r2
   182d0:	mov	r0, r5
   182d4:	mov	r8, r3
   182d8:	bl	14688 <test_print@@Base+0xfe8>
   182dc:	cmp	r0, #0
   182e0:	popeq	{r4, r5, r6, r7, r8, pc}
   182e4:	ldr	r3, [r5, #16]
   182e8:	add	r2, r3, #1
   182ec:	cmp	r3, #0
   182f0:	str	r2, [r5, #16]
   182f4:	beq	1830c <flatcc_json_printer_bool_vector_field@@Base+0x4c>
   182f8:	ldr	r2, [r4, #20]
   182fc:	add	r3, r2, #1
   18300:	str	r3, [r4, #20]
   18304:	mov	r3, #44	; 0x2c
   18308:	strb	r3, [r2]
   1830c:	ldr	r2, [r0]
   18310:	mov	r1, r8
   18314:	add	r7, r0, r2
   18318:	ldr	r5, [r0, r2]
   1831c:	mov	r0, r4
   18320:	add	r6, r7, #4
   18324:	ldr	r2, [sp, #24]
   18328:	bl	14bd4 <test_print@@Base+0x1534>
   1832c:	ldr	r3, [r4, #32]
   18330:	cmp	r5, #0
   18334:	add	r3, r3, #1
   18338:	str	r3, [r4, #32]
   1833c:	ldr	r3, [r4, #20]
   18340:	add	r2, r3, #1
   18344:	str	r2, [r4, #20]
   18348:	mov	r2, #91	; 0x5b
   1834c:	strb	r2, [r3]
   18350:	beq	1839c <flatcc_json_printer_bool_vector_field@@Base+0xdc>
   18354:	ldrb	r3, [r4, #25]
   18358:	cmp	r3, #0
   1835c:	beq	183fc <flatcc_json_printer_bool_vector_field@@Base+0x13c>
   18360:	ldr	r3, [r4, #20]
   18364:	mov	r0, r4
   18368:	add	r2, r3, #1
   1836c:	str	r2, [r4, #20]
   18370:	mov	r2, #10
   18374:	strb	r2, [r3]
   18378:	bl	149d4 <test_print@@Base+0x1334>
   1837c:	ldrb	r0, [r7, #4]
   18380:	add	r6, r7, #5
   18384:	sub	r5, r5, #1
   18388:	ldr	r1, [r4, #20]
   1838c:	bl	14df0 <test_print@@Base+0x1750>
   18390:	ldr	r3, [r4, #20]
   18394:	add	r0, r3, r0
   18398:	str	r0, [r4, #20]
   1839c:	add	r5, r6, r5
   183a0:	mov	r7, #44	; 0x2c
   183a4:	mov	r8, #10
   183a8:	ldr	r3, [r4, #20]
   183ac:	cmp	r6, r5
   183b0:	add	r2, r3, #1
   183b4:	bne	18408 <flatcc_json_printer_bool_vector_field@@Base+0x148>
   183b8:	ldrb	r1, [r4, #25]
   183bc:	cmp	r1, #0
   183c0:	beq	183e4 <flatcc_json_printer_bool_vector_field@@Base+0x124>
   183c4:	str	r2, [r4, #20]
   183c8:	mov	r2, #10
   183cc:	mov	r0, r4
   183d0:	strb	r2, [r3]
   183d4:	ldr	r3, [r4, #32]
   183d8:	sub	r3, r3, #1
   183dc:	str	r3, [r4, #32]
   183e0:	bl	149d4 <test_print@@Base+0x1334>
   183e4:	ldr	r3, [r4, #20]
   183e8:	add	r2, r3, #1
   183ec:	str	r2, [r4, #20]
   183f0:	mov	r2, #93	; 0x5d
   183f4:	strb	r2, [r3]
   183f8:	pop	{r4, r5, r6, r7, r8, pc}
   183fc:	mov	r0, r4
   18400:	bl	14bb8 <test_print@@Base+0x1518>
   18404:	b	1837c <flatcc_json_printer_bool_vector_field@@Base+0xbc>
   18408:	str	r2, [r4, #20]
   1840c:	strb	r7, [r3]
   18410:	ldrb	r3, [r4, #25]
   18414:	cmp	r3, #0
   18418:	beq	18450 <flatcc_json_printer_bool_vector_field@@Base+0x190>
   1841c:	ldr	r3, [r4, #20]
   18420:	mov	r0, r4
   18424:	add	r2, r3, #1
   18428:	str	r2, [r4, #20]
   1842c:	strb	r8, [r3]
   18430:	bl	149d4 <test_print@@Base+0x1334>
   18434:	ldrb	r0, [r6], #1
   18438:	ldr	r1, [r4, #20]
   1843c:	bl	14df0 <test_print@@Base+0x1750>
   18440:	ldr	r3, [r4, #20]
   18444:	add	r0, r3, r0
   18448:	str	r0, [r4, #20]
   1844c:	b	183a8 <flatcc_json_printer_bool_vector_field@@Base+0xe8>
   18450:	mov	r0, r4
   18454:	bl	14bb8 <test_print@@Base+0x1518>
   18458:	b	18434 <flatcc_json_printer_bool_vector_field@@Base+0x174>

0001845c <flatcc_json_printer_float_vector_field@@Base>:
   1845c:	push	{r4, r5, r6, r7, r8, lr}
   18460:	mov	r5, r1
   18464:	mov	r4, r0
   18468:	mov	r1, r2
   1846c:	mov	r0, r5
   18470:	mov	r8, r3
   18474:	bl	14688 <test_print@@Base+0xfe8>
   18478:	cmp	r0, #0
   1847c:	popeq	{r4, r5, r6, r7, r8, pc}
   18480:	ldr	r3, [r5, #16]
   18484:	add	r2, r3, #1
   18488:	cmp	r3, #0
   1848c:	str	r2, [r5, #16]
   18490:	beq	184a8 <flatcc_json_printer_float_vector_field@@Base+0x4c>
   18494:	ldr	r2, [r4, #20]
   18498:	add	r3, r2, #1
   1849c:	str	r3, [r4, #20]
   184a0:	mov	r3, #44	; 0x2c
   184a4:	strb	r3, [r2]
   184a8:	ldr	r2, [r0]
   184ac:	mov	r1, r8
   184b0:	add	r7, r0, r2
   184b4:	ldr	r5, [r0, r2]
   184b8:	mov	r0, r4
   184bc:	add	r6, r7, #4
   184c0:	ldr	r2, [sp, #24]
   184c4:	bl	14bd4 <test_print@@Base+0x1534>
   184c8:	ldr	r3, [r4, #32]
   184cc:	cmp	r5, #0
   184d0:	add	r3, r3, #1
   184d4:	str	r3, [r4, #32]
   184d8:	ldr	r3, [r4, #20]
   184dc:	add	r2, r3, #1
   184e0:	str	r2, [r4, #20]
   184e4:	mov	r2, #91	; 0x5b
   184e8:	strb	r2, [r3]
   184ec:	beq	1853c <flatcc_json_printer_float_vector_field@@Base+0xe0>
   184f0:	ldrb	r3, [r4, #25]
   184f4:	cmp	r3, #0
   184f8:	beq	1859c <flatcc_json_printer_float_vector_field@@Base+0x140>
   184fc:	ldr	r3, [r4, #20]
   18500:	mov	r0, r4
   18504:	add	r2, r3, #1
   18508:	str	r2, [r4, #20]
   1850c:	mov	r2, #10
   18510:	strb	r2, [r3]
   18514:	bl	149d4 <test_print@@Base+0x1334>
   18518:	vldr	s0, [r7, #4]
   1851c:	add	r6, r7, #8
   18520:	sub	r5, r5, #1
   18524:	ldr	r0, [r4, #20]
   18528:	vcvt.f64.f32	d0, s0
   1852c:	bl	15108 <test_print@@Base+0x1a68>
   18530:	ldr	r3, [r4, #20]
   18534:	add	r0, r3, r0
   18538:	str	r0, [r4, #20]
   1853c:	mov	r7, #44	; 0x2c
   18540:	mov	r8, #10
   18544:	ldr	r3, [r4, #20]
   18548:	sub	r5, r5, #1
   1854c:	cmn	r5, #1
   18550:	add	r2, r3, #1
   18554:	bne	185a8 <flatcc_json_printer_float_vector_field@@Base+0x14c>
   18558:	ldrb	r1, [r4, #25]
   1855c:	cmp	r1, #0
   18560:	beq	18584 <flatcc_json_printer_float_vector_field@@Base+0x128>
   18564:	str	r2, [r4, #20]
   18568:	mov	r2, #10
   1856c:	mov	r0, r4
   18570:	strb	r2, [r3]
   18574:	ldr	r3, [r4, #32]
   18578:	sub	r3, r3, #1
   1857c:	str	r3, [r4, #32]
   18580:	bl	149d4 <test_print@@Base+0x1334>
   18584:	ldr	r3, [r4, #20]
   18588:	add	r2, r3, #1
   1858c:	str	r2, [r4, #20]
   18590:	mov	r2, #93	; 0x5d
   18594:	strb	r2, [r3]
   18598:	pop	{r4, r5, r6, r7, r8, pc}
   1859c:	mov	r0, r4
   185a0:	bl	14bb8 <test_print@@Base+0x1518>
   185a4:	b	18518 <flatcc_json_printer_float_vector_field@@Base+0xbc>
   185a8:	str	r2, [r4, #20]
   185ac:	strb	r7, [r3]
   185b0:	ldrb	r3, [r4, #25]
   185b4:	cmp	r3, #0
   185b8:	beq	185f4 <flatcc_json_printer_float_vector_field@@Base+0x198>
   185bc:	ldr	r3, [r4, #20]
   185c0:	mov	r0, r4
   185c4:	add	r2, r3, #1
   185c8:	str	r2, [r4, #20]
   185cc:	strb	r8, [r3]
   185d0:	bl	149d4 <test_print@@Base+0x1334>
   185d4:	vldmia	r6!, {s0}
   185d8:	ldr	r0, [r4, #20]
   185dc:	vcvt.f64.f32	d0, s0
   185e0:	bl	15108 <test_print@@Base+0x1a68>
   185e4:	ldr	r3, [r4, #20]
   185e8:	add	r0, r3, r0
   185ec:	str	r0, [r4, #20]
   185f0:	b	18544 <flatcc_json_printer_float_vector_field@@Base+0xe8>
   185f4:	mov	r0, r4
   185f8:	bl	14bb8 <test_print@@Base+0x1518>
   185fc:	b	185d4 <flatcc_json_printer_float_vector_field@@Base+0x178>

00018600 <flatcc_json_printer_double_vector_field@@Base>:
   18600:	push	{r4, r5, r6, r7, r8, lr}
   18604:	mov	r5, r1
   18608:	mov	r4, r0
   1860c:	mov	r1, r2
   18610:	mov	r0, r5
   18614:	mov	r8, r3
   18618:	bl	14688 <test_print@@Base+0xfe8>
   1861c:	cmp	r0, #0
   18620:	popeq	{r4, r5, r6, r7, r8, pc}
   18624:	ldr	r3, [r5, #16]
   18628:	add	r2, r3, #1
   1862c:	cmp	r3, #0
   18630:	str	r2, [r5, #16]
   18634:	beq	1864c <flatcc_json_printer_double_vector_field@@Base+0x4c>
   18638:	ldr	r2, [r4, #20]
   1863c:	add	r3, r2, #1
   18640:	str	r3, [r4, #20]
   18644:	mov	r3, #44	; 0x2c
   18648:	strb	r3, [r2]
   1864c:	ldr	r2, [r0]
   18650:	mov	r1, r8
   18654:	add	r7, r0, r2
   18658:	ldr	r5, [r0, r2]
   1865c:	mov	r0, r4
   18660:	add	r6, r7, #4
   18664:	ldr	r2, [sp, #24]
   18668:	bl	14bd4 <test_print@@Base+0x1534>
   1866c:	ldr	r3, [r4, #32]
   18670:	cmp	r5, #0
   18674:	add	r3, r3, #1
   18678:	str	r3, [r4, #32]
   1867c:	ldr	r3, [r4, #20]
   18680:	add	r2, r3, #1
   18684:	str	r2, [r4, #20]
   18688:	mov	r2, #91	; 0x5b
   1868c:	strb	r2, [r3]
   18690:	beq	186dc <flatcc_json_printer_double_vector_field@@Base+0xdc>
   18694:	ldrb	r3, [r4, #25]
   18698:	cmp	r3, #0
   1869c:	beq	1873c <flatcc_json_printer_double_vector_field@@Base+0x13c>
   186a0:	ldr	r3, [r4, #20]
   186a4:	mov	r0, r4
   186a8:	add	r2, r3, #1
   186ac:	str	r2, [r4, #20]
   186b0:	mov	r2, #10
   186b4:	strb	r2, [r3]
   186b8:	bl	149d4 <test_print@@Base+0x1334>
   186bc:	vldr	d0, [r7, #4]
   186c0:	add	r6, r7, #12
   186c4:	sub	r5, r5, #1
   186c8:	ldr	r0, [r4, #20]
   186cc:	bl	15108 <test_print@@Base+0x1a68>
   186d0:	ldr	r3, [r4, #20]
   186d4:	add	r0, r3, r0
   186d8:	str	r0, [r4, #20]
   186dc:	mov	r7, #44	; 0x2c
   186e0:	mov	r8, #10
   186e4:	ldr	r3, [r4, #20]
   186e8:	sub	r5, r5, #1
   186ec:	cmn	r5, #1
   186f0:	add	r2, r3, #1
   186f4:	bne	18748 <flatcc_json_printer_double_vector_field@@Base+0x148>
   186f8:	ldrb	r1, [r4, #25]
   186fc:	cmp	r1, #0
   18700:	beq	18724 <flatcc_json_printer_double_vector_field@@Base+0x124>
   18704:	str	r2, [r4, #20]
   18708:	mov	r2, #10
   1870c:	mov	r0, r4
   18710:	strb	r2, [r3]
   18714:	ldr	r3, [r4, #32]
   18718:	sub	r3, r3, #1
   1871c:	str	r3, [r4, #32]
   18720:	bl	149d4 <test_print@@Base+0x1334>
   18724:	ldr	r3, [r4, #20]
   18728:	add	r2, r3, #1
   1872c:	str	r2, [r4, #20]
   18730:	mov	r2, #93	; 0x5d
   18734:	strb	r2, [r3]
   18738:	pop	{r4, r5, r6, r7, r8, pc}
   1873c:	mov	r0, r4
   18740:	bl	14bb8 <test_print@@Base+0x1518>
   18744:	b	186bc <flatcc_json_printer_double_vector_field@@Base+0xbc>
   18748:	str	r2, [r4, #20]
   1874c:	strb	r7, [r3]
   18750:	ldrb	r3, [r4, #25]
   18754:	cmp	r3, #0
   18758:	beq	18790 <flatcc_json_printer_double_vector_field@@Base+0x190>
   1875c:	ldr	r3, [r4, #20]
   18760:	mov	r0, r4
   18764:	add	r2, r3, #1
   18768:	str	r2, [r4, #20]
   1876c:	strb	r8, [r3]
   18770:	bl	149d4 <test_print@@Base+0x1334>
   18774:	vldmia	r6!, {d0}
   18778:	ldr	r0, [r4, #20]
   1877c:	bl	15108 <test_print@@Base+0x1a68>
   18780:	ldr	r3, [r4, #20]
   18784:	add	r0, r3, r0
   18788:	str	r0, [r4, #20]
   1878c:	b	186e4 <flatcc_json_printer_double_vector_field@@Base+0xe4>
   18790:	mov	r0, r4
   18794:	bl	14bb8 <test_print@@Base+0x1518>
   18798:	b	18774 <flatcc_json_printer_double_vector_field@@Base+0x174>

0001879c <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   1879c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   187a0:	ldrb	lr, [r0, #27]
   187a4:	ldr	r9, [sp, #32]
   187a8:	ldr	r8, [sp, #36]	; 0x24
   187ac:	cmp	lr, #0
   187b0:	beq	187bc <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20>
   187b4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   187b8:	b	175dc <flatcc_json_printer_uint8_vector_field@@Base>
   187bc:	mov	r5, r1
   187c0:	mov	r4, r0
   187c4:	mov	r1, r2
   187c8:	mov	r0, r5
   187cc:	mov	sl, r3
   187d0:	bl	14688 <test_print@@Base+0xfe8>
   187d4:	cmp	r0, #0
   187d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   187dc:	ldr	r3, [r5, #16]
   187e0:	add	r2, r3, #1
   187e4:	cmp	r3, #0
   187e8:	str	r2, [r5, #16]
   187ec:	beq	18804 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x68>
   187f0:	ldr	r3, [r4, #20]
   187f4:	add	r2, r3, #1
   187f8:	str	r2, [r4, #20]
   187fc:	mov	r2, #44	; 0x2c
   18800:	strb	r2, [r3]
   18804:	ldr	r3, [r0]
   18808:	mov	r2, r9
   1880c:	mov	r1, sl
   18810:	add	r7, r0, r3
   18814:	ldr	r5, [r0, r3]
   18818:	mov	r0, r4
   1881c:	bl	14bd4 <test_print@@Base+0x1534>
   18820:	ldr	r3, [r4, #32]
   18824:	add	r6, r7, #4
   18828:	cmp	r5, #0
   1882c:	add	r3, r3, #1
   18830:	str	r3, [r4, #32]
   18834:	ldr	r3, [r4, #20]
   18838:	add	r2, r3, #1
   1883c:	str	r2, [r4, #20]
   18840:	mov	r2, #91	; 0x5b
   18844:	strb	r2, [r3]
   18848:	beq	18888 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xec>
   1884c:	ldrb	r3, [r4, #25]
   18850:	cmp	r3, #0
   18854:	beq	188e8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x14c>
   18858:	ldr	r3, [r4, #20]
   1885c:	mov	r0, r4
   18860:	add	r2, r3, #1
   18864:	str	r2, [r4, #20]
   18868:	mov	r2, #10
   1886c:	strb	r2, [r3]
   18870:	bl	149d4 <test_print@@Base+0x1334>
   18874:	ldrb	r1, [r7, #4]
   18878:	mov	r0, r4
   1887c:	add	r6, r7, #5
   18880:	sub	r5, r5, #1
   18884:	blx	r8
   18888:	add	r5, r6, r5
   1888c:	mov	r7, #44	; 0x2c
   18890:	mov	r9, #10
   18894:	ldr	r3, [r4, #20]
   18898:	cmp	r6, r5
   1889c:	add	r2, r3, #1
   188a0:	bne	188f4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x158>
   188a4:	ldrb	r1, [r4, #25]
   188a8:	cmp	r1, #0
   188ac:	beq	188d0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x134>
   188b0:	str	r2, [r4, #20]
   188b4:	mov	r2, #10
   188b8:	mov	r0, r4
   188bc:	strb	r2, [r3]
   188c0:	ldr	r3, [r4, #32]
   188c4:	sub	r3, r3, #1
   188c8:	str	r3, [r4, #32]
   188cc:	bl	149d4 <test_print@@Base+0x1334>
   188d0:	ldr	r3, [r4, #20]
   188d4:	add	r2, r3, #1
   188d8:	str	r2, [r4, #20]
   188dc:	mov	r2, #93	; 0x5d
   188e0:	strb	r2, [r3]
   188e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188e8:	mov	r0, r4
   188ec:	bl	14bb8 <test_print@@Base+0x1518>
   188f0:	b	18874 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd8>
   188f4:	str	r2, [r4, #20]
   188f8:	strb	r7, [r3]
   188fc:	ldrb	r3, [r4, #25]
   18900:	cmp	r3, #0
   18904:	beq	18930 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   18908:	ldr	r3, [r4, #20]
   1890c:	mov	r0, r4
   18910:	add	r2, r3, #1
   18914:	str	r2, [r4, #20]
   18918:	strb	r9, [r3]
   1891c:	bl	149d4 <test_print@@Base+0x1334>
   18920:	ldrb	r1, [r6], #1
   18924:	mov	r0, r4
   18928:	blx	r8
   1892c:	b	18894 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   18930:	mov	r0, r4
   18934:	bl	14bb8 <test_print@@Base+0x1518>
   18938:	b	18920 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x184>

0001893c <flatcc_json_printer_utype_enum_vector_field@@Base>:
   1893c:	b	1879c <flatcc_json_printer_uint8_enum_vector_field@@Base>

00018940 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   18940:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18944:	ldrb	lr, [r0, #27]
   18948:	ldr	r9, [sp, #32]
   1894c:	ldr	r8, [sp, #36]	; 0x24
   18950:	cmp	lr, #0
   18954:	beq	18960 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x20>
   18958:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1895c:	b	1777c <flatcc_json_printer_uint16_vector_field@@Base>
   18960:	mov	r5, r1
   18964:	mov	r4, r0
   18968:	mov	r1, r2
   1896c:	mov	r0, r5
   18970:	mov	sl, r3
   18974:	bl	14688 <test_print@@Base+0xfe8>
   18978:	cmp	r0, #0
   1897c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18980:	ldr	r3, [r5, #16]
   18984:	add	r2, r3, #1
   18988:	cmp	r3, #0
   1898c:	str	r2, [r5, #16]
   18990:	beq	189a8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x68>
   18994:	ldr	r3, [r4, #20]
   18998:	add	r2, r3, #1
   1899c:	str	r2, [r4, #20]
   189a0:	mov	r2, #44	; 0x2c
   189a4:	strb	r2, [r3]
   189a8:	ldr	r3, [r0]
   189ac:	mov	r2, r9
   189b0:	mov	r1, sl
   189b4:	add	r7, r0, r3
   189b8:	ldr	r5, [r0, r3]
   189bc:	mov	r0, r4
   189c0:	bl	14bd4 <test_print@@Base+0x1534>
   189c4:	ldr	r3, [r4, #32]
   189c8:	add	r6, r7, #4
   189cc:	cmp	r5, #0
   189d0:	add	r3, r3, #1
   189d4:	str	r3, [r4, #32]
   189d8:	ldr	r3, [r4, #20]
   189dc:	add	r2, r3, #1
   189e0:	str	r2, [r4, #20]
   189e4:	mov	r2, #91	; 0x5b
   189e8:	strb	r2, [r3]
   189ec:	beq	18a2c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xec>
   189f0:	ldrb	r3, [r4, #25]
   189f4:	cmp	r3, #0
   189f8:	beq	18a8c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x14c>
   189fc:	ldr	r3, [r4, #20]
   18a00:	mov	r0, r4
   18a04:	add	r2, r3, #1
   18a08:	str	r2, [r4, #20]
   18a0c:	mov	r2, #10
   18a10:	strb	r2, [r3]
   18a14:	bl	149d4 <test_print@@Base+0x1334>
   18a18:	ldrh	r1, [r7, #4]
   18a1c:	mov	r0, r4
   18a20:	add	r6, r7, #6
   18a24:	sub	r5, r5, #1
   18a28:	blx	r8
   18a2c:	mov	r7, #44	; 0x2c
   18a30:	mov	r9, #10
   18a34:	ldr	r3, [r4, #20]
   18a38:	sub	r5, r5, #1
   18a3c:	cmn	r5, #1
   18a40:	add	r2, r3, #1
   18a44:	bne	18a98 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x158>
   18a48:	ldrb	r1, [r4, #25]
   18a4c:	cmp	r1, #0
   18a50:	beq	18a74 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x134>
   18a54:	str	r2, [r4, #20]
   18a58:	mov	r2, #10
   18a5c:	mov	r0, r4
   18a60:	strb	r2, [r3]
   18a64:	ldr	r3, [r4, #32]
   18a68:	sub	r3, r3, #1
   18a6c:	str	r3, [r4, #32]
   18a70:	bl	149d4 <test_print@@Base+0x1334>
   18a74:	ldr	r3, [r4, #20]
   18a78:	add	r2, r3, #1
   18a7c:	str	r2, [r4, #20]
   18a80:	mov	r2, #93	; 0x5d
   18a84:	strb	r2, [r3]
   18a88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a8c:	mov	r0, r4
   18a90:	bl	14bb8 <test_print@@Base+0x1518>
   18a94:	b	18a18 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd8>
   18a98:	str	r2, [r4, #20]
   18a9c:	strb	r7, [r3]
   18aa0:	ldrb	r3, [r4, #25]
   18aa4:	cmp	r3, #0
   18aa8:	beq	18ad4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x194>
   18aac:	ldr	r3, [r4, #20]
   18ab0:	mov	r0, r4
   18ab4:	add	r2, r3, #1
   18ab8:	str	r2, [r4, #20]
   18abc:	strb	r9, [r3]
   18ac0:	bl	149d4 <test_print@@Base+0x1334>
   18ac4:	ldrh	r1, [r6], #2
   18ac8:	mov	r0, r4
   18acc:	blx	r8
   18ad0:	b	18a34 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   18ad4:	mov	r0, r4
   18ad8:	bl	14bb8 <test_print@@Base+0x1518>
   18adc:	b	18ac4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x184>

00018ae0 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   18ae0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ae4:	ldrb	lr, [r0, #27]
   18ae8:	ldr	r9, [sp, #32]
   18aec:	ldr	r8, [sp, #36]	; 0x24
   18af0:	cmp	lr, #0
   18af4:	beq	18b00 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x20>
   18af8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18afc:	b	17918 <flatcc_json_printer_uint32_vector_field@@Base>
   18b00:	mov	r5, r1
   18b04:	mov	r4, r0
   18b08:	mov	r1, r2
   18b0c:	mov	r0, r5
   18b10:	mov	sl, r3
   18b14:	bl	14688 <test_print@@Base+0xfe8>
   18b18:	cmp	r0, #0
   18b1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b20:	ldr	r3, [r5, #16]
   18b24:	add	r2, r3, #1
   18b28:	cmp	r3, #0
   18b2c:	str	r2, [r5, #16]
   18b30:	beq	18b48 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x68>
   18b34:	ldr	r3, [r4, #20]
   18b38:	add	r2, r3, #1
   18b3c:	str	r2, [r4, #20]
   18b40:	mov	r2, #44	; 0x2c
   18b44:	strb	r2, [r3]
   18b48:	ldr	r3, [r0]
   18b4c:	mov	r2, r9
   18b50:	mov	r1, sl
   18b54:	add	r7, r0, r3
   18b58:	ldr	r5, [r0, r3]
   18b5c:	mov	r0, r4
   18b60:	bl	14bd4 <test_print@@Base+0x1534>
   18b64:	ldr	r3, [r4, #32]
   18b68:	add	r6, r7, #4
   18b6c:	cmp	r5, #0
   18b70:	add	r3, r3, #1
   18b74:	str	r3, [r4, #32]
   18b78:	ldr	r3, [r4, #20]
   18b7c:	add	r2, r3, #1
   18b80:	str	r2, [r4, #20]
   18b84:	mov	r2, #91	; 0x5b
   18b88:	strb	r2, [r3]
   18b8c:	beq	18bcc <flatcc_json_printer_uint32_enum_vector_field@@Base+0xec>
   18b90:	ldrb	r3, [r4, #25]
   18b94:	cmp	r3, #0
   18b98:	beq	18c2c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x14c>
   18b9c:	ldr	r3, [r4, #20]
   18ba0:	mov	r0, r4
   18ba4:	add	r2, r3, #1
   18ba8:	str	r2, [r4, #20]
   18bac:	mov	r2, #10
   18bb0:	strb	r2, [r3]
   18bb4:	bl	149d4 <test_print@@Base+0x1334>
   18bb8:	mov	r0, r4
   18bbc:	ldr	r1, [r7, #4]
   18bc0:	add	r6, r7, #8
   18bc4:	sub	r5, r5, #1
   18bc8:	blx	r8
   18bcc:	mov	r7, #44	; 0x2c
   18bd0:	mov	r9, #10
   18bd4:	ldr	r3, [r4, #20]
   18bd8:	sub	r5, r5, #1
   18bdc:	cmn	r5, #1
   18be0:	add	r2, r3, #1
   18be4:	bne	18c38 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x158>
   18be8:	ldrb	r1, [r4, #25]
   18bec:	cmp	r1, #0
   18bf0:	beq	18c14 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x134>
   18bf4:	str	r2, [r4, #20]
   18bf8:	mov	r2, #10
   18bfc:	mov	r0, r4
   18c00:	strb	r2, [r3]
   18c04:	ldr	r3, [r4, #32]
   18c08:	sub	r3, r3, #1
   18c0c:	str	r3, [r4, #32]
   18c10:	bl	149d4 <test_print@@Base+0x1334>
   18c14:	ldr	r3, [r4, #20]
   18c18:	add	r2, r3, #1
   18c1c:	str	r2, [r4, #20]
   18c20:	mov	r2, #93	; 0x5d
   18c24:	strb	r2, [r3]
   18c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c2c:	mov	r0, r4
   18c30:	bl	14bb8 <test_print@@Base+0x1518>
   18c34:	b	18bb8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd8>
   18c38:	str	r2, [r4, #20]
   18c3c:	strb	r7, [r3]
   18c40:	ldrb	r3, [r4, #25]
   18c44:	cmp	r3, #0
   18c48:	beq	18c74 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x194>
   18c4c:	ldr	r3, [r4, #20]
   18c50:	mov	r0, r4
   18c54:	add	r2, r3, #1
   18c58:	str	r2, [r4, #20]
   18c5c:	strb	r9, [r3]
   18c60:	bl	149d4 <test_print@@Base+0x1334>
   18c64:	mov	r0, r4
   18c68:	ldr	r1, [r6], #4
   18c6c:	blx	r8
   18c70:	b	18bd4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   18c74:	mov	r0, r4
   18c78:	bl	14bb8 <test_print@@Base+0x1518>
   18c7c:	b	18c64 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x184>

00018c80 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   18c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c84:	ldrb	lr, [r0, #27]
   18c88:	ldr	r9, [sp, #32]
   18c8c:	ldr	r8, [sp, #36]	; 0x24
   18c90:	cmp	lr, #0
   18c94:	beq	18ca0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x20>
   18c98:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c9c:	b	17ab4 <flatcc_json_printer_uint64_vector_field@@Base>
   18ca0:	mov	r5, r1
   18ca4:	mov	r4, r0
   18ca8:	mov	r1, r2
   18cac:	mov	r0, r5
   18cb0:	mov	sl, r3
   18cb4:	bl	14688 <test_print@@Base+0xfe8>
   18cb8:	cmp	r0, #0
   18cbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18cc0:	ldr	r3, [r5, #16]
   18cc4:	add	r2, r3, #1
   18cc8:	cmp	r3, #0
   18ccc:	str	r2, [r5, #16]
   18cd0:	beq	18ce8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x68>
   18cd4:	ldr	r3, [r4, #20]
   18cd8:	add	r2, r3, #1
   18cdc:	str	r2, [r4, #20]
   18ce0:	mov	r2, #44	; 0x2c
   18ce4:	strb	r2, [r3]
   18ce8:	ldr	r3, [r0]
   18cec:	mov	r2, r9
   18cf0:	mov	r1, sl
   18cf4:	add	r7, r0, r3
   18cf8:	ldr	r5, [r0, r3]
   18cfc:	mov	r0, r4
   18d00:	bl	14bd4 <test_print@@Base+0x1534>
   18d04:	ldr	r3, [r4, #32]
   18d08:	add	r6, r7, #4
   18d0c:	cmp	r5, #0
   18d10:	add	r3, r3, #1
   18d14:	str	r3, [r4, #32]
   18d18:	ldr	r3, [r4, #20]
   18d1c:	add	r2, r3, #1
   18d20:	str	r2, [r4, #20]
   18d24:	mov	r2, #91	; 0x5b
   18d28:	strb	r2, [r3]
   18d2c:	beq	18d6c <flatcc_json_printer_uint64_enum_vector_field@@Base+0xec>
   18d30:	ldrb	r3, [r4, #25]
   18d34:	cmp	r3, #0
   18d38:	beq	18dcc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x14c>
   18d3c:	ldr	r3, [r4, #20]
   18d40:	mov	r0, r4
   18d44:	add	r2, r3, #1
   18d48:	str	r2, [r4, #20]
   18d4c:	mov	r2, #10
   18d50:	strb	r2, [r3]
   18d54:	bl	149d4 <test_print@@Base+0x1334>
   18d58:	mov	r0, r4
   18d5c:	ldrd	r2, [r7, #4]
   18d60:	add	r6, r7, #12
   18d64:	sub	r5, r5, #1
   18d68:	blx	r8
   18d6c:	mov	r7, #44	; 0x2c
   18d70:	mov	r9, #10
   18d74:	ldr	r3, [r4, #20]
   18d78:	sub	r5, r5, #1
   18d7c:	cmn	r5, #1
   18d80:	add	r2, r3, #1
   18d84:	bne	18dd8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x158>
   18d88:	ldrb	r1, [r4, #25]
   18d8c:	cmp	r1, #0
   18d90:	beq	18db4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x134>
   18d94:	str	r2, [r4, #20]
   18d98:	mov	r2, #10
   18d9c:	mov	r0, r4
   18da0:	strb	r2, [r3]
   18da4:	ldr	r3, [r4, #32]
   18da8:	sub	r3, r3, #1
   18dac:	str	r3, [r4, #32]
   18db0:	bl	149d4 <test_print@@Base+0x1334>
   18db4:	ldr	r3, [r4, #20]
   18db8:	add	r2, r3, #1
   18dbc:	str	r2, [r4, #20]
   18dc0:	mov	r2, #93	; 0x5d
   18dc4:	strb	r2, [r3]
   18dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18dcc:	mov	r0, r4
   18dd0:	bl	14bb8 <test_print@@Base+0x1518>
   18dd4:	b	18d58 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd8>
   18dd8:	str	r2, [r4, #20]
   18ddc:	strb	r7, [r3]
   18de0:	ldrb	r3, [r4, #25]
   18de4:	cmp	r3, #0
   18de8:	beq	18e14 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x194>
   18dec:	ldr	r3, [r4, #20]
   18df0:	mov	r0, r4
   18df4:	add	r2, r3, #1
   18df8:	str	r2, [r4, #20]
   18dfc:	strb	r9, [r3]
   18e00:	bl	149d4 <test_print@@Base+0x1334>
   18e04:	mov	r0, r4
   18e08:	ldrd	r2, [r6], #8
   18e0c:	blx	r8
   18e10:	b	18d74 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   18e14:	mov	r0, r4
   18e18:	bl	14bb8 <test_print@@Base+0x1518>
   18e1c:	b	18e04 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x184>

00018e20 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   18e20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e24:	ldrb	lr, [r0, #27]
   18e28:	ldr	r9, [sp, #32]
   18e2c:	ldr	r8, [sp, #36]	; 0x24
   18e30:	cmp	lr, #0
   18e34:	beq	18e40 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20>
   18e38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e3c:	b	17c50 <flatcc_json_printer_int8_vector_field@@Base>
   18e40:	mov	r5, r1
   18e44:	mov	r4, r0
   18e48:	mov	r1, r2
   18e4c:	mov	r0, r5
   18e50:	mov	sl, r3
   18e54:	bl	14688 <test_print@@Base+0xfe8>
   18e58:	cmp	r0, #0
   18e5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e60:	ldr	r3, [r5, #16]
   18e64:	add	r2, r3, #1
   18e68:	cmp	r3, #0
   18e6c:	str	r2, [r5, #16]
   18e70:	beq	18e88 <flatcc_json_printer_int8_enum_vector_field@@Base+0x68>
   18e74:	ldr	r3, [r4, #20]
   18e78:	add	r2, r3, #1
   18e7c:	str	r2, [r4, #20]
   18e80:	mov	r2, #44	; 0x2c
   18e84:	strb	r2, [r3]
   18e88:	ldr	r3, [r0]
   18e8c:	mov	r2, r9
   18e90:	mov	r1, sl
   18e94:	add	r7, r0, r3
   18e98:	ldr	r5, [r0, r3]
   18e9c:	mov	r0, r4
   18ea0:	bl	14bd4 <test_print@@Base+0x1534>
   18ea4:	ldr	r3, [r4, #32]
   18ea8:	add	r6, r7, #4
   18eac:	cmp	r5, #0
   18eb0:	add	r3, r3, #1
   18eb4:	str	r3, [r4, #32]
   18eb8:	ldr	r3, [r4, #20]
   18ebc:	add	r2, r3, #1
   18ec0:	str	r2, [r4, #20]
   18ec4:	mov	r2, #91	; 0x5b
   18ec8:	strb	r2, [r3]
   18ecc:	beq	18f0c <flatcc_json_printer_int8_enum_vector_field@@Base+0xec>
   18ed0:	ldrb	r3, [r4, #25]
   18ed4:	cmp	r3, #0
   18ed8:	beq	18f6c <flatcc_json_printer_int8_enum_vector_field@@Base+0x14c>
   18edc:	ldr	r3, [r4, #20]
   18ee0:	mov	r0, r4
   18ee4:	add	r2, r3, #1
   18ee8:	str	r2, [r4, #20]
   18eec:	mov	r2, #10
   18ef0:	strb	r2, [r3]
   18ef4:	bl	149d4 <test_print@@Base+0x1334>
   18ef8:	ldrsb	r1, [r7, #4]
   18efc:	mov	r0, r4
   18f00:	add	r6, r7, #5
   18f04:	sub	r5, r5, #1
   18f08:	blx	r8
   18f0c:	add	r5, r6, r5
   18f10:	mov	r7, #44	; 0x2c
   18f14:	mov	r9, #10
   18f18:	ldr	r3, [r4, #20]
   18f1c:	cmp	r6, r5
   18f20:	add	r2, r3, #1
   18f24:	bne	18f78 <flatcc_json_printer_int8_enum_vector_field@@Base+0x158>
   18f28:	ldrb	r1, [r4, #25]
   18f2c:	cmp	r1, #0
   18f30:	beq	18f54 <flatcc_json_printer_int8_enum_vector_field@@Base+0x134>
   18f34:	str	r2, [r4, #20]
   18f38:	mov	r2, #10
   18f3c:	mov	r0, r4
   18f40:	strb	r2, [r3]
   18f44:	ldr	r3, [r4, #32]
   18f48:	sub	r3, r3, #1
   18f4c:	str	r3, [r4, #32]
   18f50:	bl	149d4 <test_print@@Base+0x1334>
   18f54:	ldr	r3, [r4, #20]
   18f58:	add	r2, r3, #1
   18f5c:	str	r2, [r4, #20]
   18f60:	mov	r2, #93	; 0x5d
   18f64:	strb	r2, [r3]
   18f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f6c:	mov	r0, r4
   18f70:	bl	14bb8 <test_print@@Base+0x1518>
   18f74:	b	18ef8 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd8>
   18f78:	str	r2, [r4, #20]
   18f7c:	strb	r7, [r3]
   18f80:	ldrb	r3, [r4, #25]
   18f84:	cmp	r3, #0
   18f88:	beq	18fb4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   18f8c:	ldr	r3, [r4, #20]
   18f90:	mov	r0, r4
   18f94:	add	r2, r3, #1
   18f98:	str	r2, [r4, #20]
   18f9c:	strb	r9, [r3]
   18fa0:	bl	149d4 <test_print@@Base+0x1334>
   18fa4:	ldrsb	r1, [r6], #1
   18fa8:	mov	r0, r4
   18fac:	blx	r8
   18fb0:	b	18f18 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   18fb4:	mov	r0, r4
   18fb8:	bl	14bb8 <test_print@@Base+0x1518>
   18fbc:	b	18fa4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x184>

00018fc0 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   18fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18fc4:	ldrb	lr, [r0, #27]
   18fc8:	ldr	r9, [sp, #32]
   18fcc:	ldr	r8, [sp, #36]	; 0x24
   18fd0:	cmp	lr, #0
   18fd4:	beq	18fe0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x20>
   18fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18fdc:	b	17dec <flatcc_json_printer_int16_vector_field@@Base>
   18fe0:	mov	r5, r1
   18fe4:	mov	r4, r0
   18fe8:	mov	r1, r2
   18fec:	mov	r0, r5
   18ff0:	mov	sl, r3
   18ff4:	bl	14688 <test_print@@Base+0xfe8>
   18ff8:	cmp	r0, #0
   18ffc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19000:	ldr	r3, [r5, #16]
   19004:	add	r2, r3, #1
   19008:	cmp	r3, #0
   1900c:	str	r2, [r5, #16]
   19010:	beq	19028 <flatcc_json_printer_int16_enum_vector_field@@Base+0x68>
   19014:	ldr	r3, [r4, #20]
   19018:	add	r2, r3, #1
   1901c:	str	r2, [r4, #20]
   19020:	mov	r2, #44	; 0x2c
   19024:	strb	r2, [r3]
   19028:	ldr	r3, [r0]
   1902c:	mov	r2, r9
   19030:	mov	r1, sl
   19034:	add	r7, r0, r3
   19038:	ldr	r5, [r0, r3]
   1903c:	mov	r0, r4
   19040:	bl	14bd4 <test_print@@Base+0x1534>
   19044:	ldr	r3, [r4, #32]
   19048:	add	r6, r7, #4
   1904c:	cmp	r5, #0
   19050:	add	r3, r3, #1
   19054:	str	r3, [r4, #32]
   19058:	ldr	r3, [r4, #20]
   1905c:	add	r2, r3, #1
   19060:	str	r2, [r4, #20]
   19064:	mov	r2, #91	; 0x5b
   19068:	strb	r2, [r3]
   1906c:	beq	190ac <flatcc_json_printer_int16_enum_vector_field@@Base+0xec>
   19070:	ldrb	r3, [r4, #25]
   19074:	cmp	r3, #0
   19078:	beq	1910c <flatcc_json_printer_int16_enum_vector_field@@Base+0x14c>
   1907c:	ldr	r3, [r4, #20]
   19080:	mov	r0, r4
   19084:	add	r2, r3, #1
   19088:	str	r2, [r4, #20]
   1908c:	mov	r2, #10
   19090:	strb	r2, [r3]
   19094:	bl	149d4 <test_print@@Base+0x1334>
   19098:	ldrsh	r1, [r7, #4]
   1909c:	mov	r0, r4
   190a0:	add	r6, r7, #6
   190a4:	sub	r5, r5, #1
   190a8:	blx	r8
   190ac:	mov	r7, #44	; 0x2c
   190b0:	mov	r9, #10
   190b4:	ldr	r3, [r4, #20]
   190b8:	sub	r5, r5, #1
   190bc:	cmn	r5, #1
   190c0:	add	r2, r3, #1
   190c4:	bne	19118 <flatcc_json_printer_int16_enum_vector_field@@Base+0x158>
   190c8:	ldrb	r1, [r4, #25]
   190cc:	cmp	r1, #0
   190d0:	beq	190f4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x134>
   190d4:	str	r2, [r4, #20]
   190d8:	mov	r2, #10
   190dc:	mov	r0, r4
   190e0:	strb	r2, [r3]
   190e4:	ldr	r3, [r4, #32]
   190e8:	sub	r3, r3, #1
   190ec:	str	r3, [r4, #32]
   190f0:	bl	149d4 <test_print@@Base+0x1334>
   190f4:	ldr	r3, [r4, #20]
   190f8:	add	r2, r3, #1
   190fc:	str	r2, [r4, #20]
   19100:	mov	r2, #93	; 0x5d
   19104:	strb	r2, [r3]
   19108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1910c:	mov	r0, r4
   19110:	bl	14bb8 <test_print@@Base+0x1518>
   19114:	b	19098 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd8>
   19118:	str	r2, [r4, #20]
   1911c:	strb	r7, [r3]
   19120:	ldrb	r3, [r4, #25]
   19124:	cmp	r3, #0
   19128:	beq	19154 <flatcc_json_printer_int16_enum_vector_field@@Base+0x194>
   1912c:	ldr	r3, [r4, #20]
   19130:	mov	r0, r4
   19134:	add	r2, r3, #1
   19138:	str	r2, [r4, #20]
   1913c:	strb	r9, [r3]
   19140:	bl	149d4 <test_print@@Base+0x1334>
   19144:	ldrsh	r1, [r6], #2
   19148:	mov	r0, r4
   1914c:	blx	r8
   19150:	b	190b4 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   19154:	mov	r0, r4
   19158:	bl	14bb8 <test_print@@Base+0x1518>
   1915c:	b	19144 <flatcc_json_printer_int16_enum_vector_field@@Base+0x184>

00019160 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   19160:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19164:	ldrb	lr, [r0, #27]
   19168:	ldr	r9, [sp, #32]
   1916c:	ldr	r8, [sp, #36]	; 0x24
   19170:	cmp	lr, #0
   19174:	beq	19180 <flatcc_json_printer_int32_enum_vector_field@@Base+0x20>
   19178:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1917c:	b	17f88 <flatcc_json_printer_int32_vector_field@@Base>
   19180:	mov	r5, r1
   19184:	mov	r4, r0
   19188:	mov	r1, r2
   1918c:	mov	r0, r5
   19190:	mov	sl, r3
   19194:	bl	14688 <test_print@@Base+0xfe8>
   19198:	cmp	r0, #0
   1919c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   191a0:	ldr	r3, [r5, #16]
   191a4:	add	r2, r3, #1
   191a8:	cmp	r3, #0
   191ac:	str	r2, [r5, #16]
   191b0:	beq	191c8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x68>
   191b4:	ldr	r3, [r4, #20]
   191b8:	add	r2, r3, #1
   191bc:	str	r2, [r4, #20]
   191c0:	mov	r2, #44	; 0x2c
   191c4:	strb	r2, [r3]
   191c8:	ldr	r3, [r0]
   191cc:	mov	r2, r9
   191d0:	mov	r1, sl
   191d4:	add	r7, r0, r3
   191d8:	ldr	r5, [r0, r3]
   191dc:	mov	r0, r4
   191e0:	bl	14bd4 <test_print@@Base+0x1534>
   191e4:	ldr	r3, [r4, #32]
   191e8:	add	r6, r7, #4
   191ec:	cmp	r5, #0
   191f0:	add	r3, r3, #1
   191f4:	str	r3, [r4, #32]
   191f8:	ldr	r3, [r4, #20]
   191fc:	add	r2, r3, #1
   19200:	str	r2, [r4, #20]
   19204:	mov	r2, #91	; 0x5b
   19208:	strb	r2, [r3]
   1920c:	beq	1924c <flatcc_json_printer_int32_enum_vector_field@@Base+0xec>
   19210:	ldrb	r3, [r4, #25]
   19214:	cmp	r3, #0
   19218:	beq	192ac <flatcc_json_printer_int32_enum_vector_field@@Base+0x14c>
   1921c:	ldr	r3, [r4, #20]
   19220:	mov	r0, r4
   19224:	add	r2, r3, #1
   19228:	str	r2, [r4, #20]
   1922c:	mov	r2, #10
   19230:	strb	r2, [r3]
   19234:	bl	149d4 <test_print@@Base+0x1334>
   19238:	mov	r0, r4
   1923c:	ldr	r1, [r7, #4]
   19240:	add	r6, r7, #8
   19244:	sub	r5, r5, #1
   19248:	blx	r8
   1924c:	mov	r7, #44	; 0x2c
   19250:	mov	r9, #10
   19254:	ldr	r3, [r4, #20]
   19258:	sub	r5, r5, #1
   1925c:	cmn	r5, #1
   19260:	add	r2, r3, #1
   19264:	bne	192b8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x158>
   19268:	ldrb	r1, [r4, #25]
   1926c:	cmp	r1, #0
   19270:	beq	19294 <flatcc_json_printer_int32_enum_vector_field@@Base+0x134>
   19274:	str	r2, [r4, #20]
   19278:	mov	r2, #10
   1927c:	mov	r0, r4
   19280:	strb	r2, [r3]
   19284:	ldr	r3, [r4, #32]
   19288:	sub	r3, r3, #1
   1928c:	str	r3, [r4, #32]
   19290:	bl	149d4 <test_print@@Base+0x1334>
   19294:	ldr	r3, [r4, #20]
   19298:	add	r2, r3, #1
   1929c:	str	r2, [r4, #20]
   192a0:	mov	r2, #93	; 0x5d
   192a4:	strb	r2, [r3]
   192a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192ac:	mov	r0, r4
   192b0:	bl	14bb8 <test_print@@Base+0x1518>
   192b4:	b	19238 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd8>
   192b8:	str	r2, [r4, #20]
   192bc:	strb	r7, [r3]
   192c0:	ldrb	r3, [r4, #25]
   192c4:	cmp	r3, #0
   192c8:	beq	192f4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x194>
   192cc:	ldr	r3, [r4, #20]
   192d0:	mov	r0, r4
   192d4:	add	r2, r3, #1
   192d8:	str	r2, [r4, #20]
   192dc:	strb	r9, [r3]
   192e0:	bl	149d4 <test_print@@Base+0x1334>
   192e4:	mov	r0, r4
   192e8:	ldr	r1, [r6], #4
   192ec:	blx	r8
   192f0:	b	19254 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   192f4:	mov	r0, r4
   192f8:	bl	14bb8 <test_print@@Base+0x1518>
   192fc:	b	192e4 <flatcc_json_printer_int32_enum_vector_field@@Base+0x184>

00019300 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   19300:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19304:	ldrb	lr, [r0, #27]
   19308:	ldr	r9, [sp, #32]
   1930c:	ldr	r8, [sp, #36]	; 0x24
   19310:	cmp	lr, #0
   19314:	beq	19320 <flatcc_json_printer_int64_enum_vector_field@@Base+0x20>
   19318:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1931c:	b	18124 <flatcc_json_printer_int64_vector_field@@Base>
   19320:	mov	r5, r1
   19324:	mov	r4, r0
   19328:	mov	r1, r2
   1932c:	mov	r0, r5
   19330:	mov	sl, r3
   19334:	bl	14688 <test_print@@Base+0xfe8>
   19338:	cmp	r0, #0
   1933c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19340:	ldr	r3, [r5, #16]
   19344:	add	r2, r3, #1
   19348:	cmp	r3, #0
   1934c:	str	r2, [r5, #16]
   19350:	beq	19368 <flatcc_json_printer_int64_enum_vector_field@@Base+0x68>
   19354:	ldr	r3, [r4, #20]
   19358:	add	r2, r3, #1
   1935c:	str	r2, [r4, #20]
   19360:	mov	r2, #44	; 0x2c
   19364:	strb	r2, [r3]
   19368:	ldr	r3, [r0]
   1936c:	mov	r2, r9
   19370:	mov	r1, sl
   19374:	add	r7, r0, r3
   19378:	ldr	r5, [r0, r3]
   1937c:	mov	r0, r4
   19380:	bl	14bd4 <test_print@@Base+0x1534>
   19384:	ldr	r3, [r4, #32]
   19388:	add	r6, r7, #4
   1938c:	cmp	r5, #0
   19390:	add	r3, r3, #1
   19394:	str	r3, [r4, #32]
   19398:	ldr	r3, [r4, #20]
   1939c:	add	r2, r3, #1
   193a0:	str	r2, [r4, #20]
   193a4:	mov	r2, #91	; 0x5b
   193a8:	strb	r2, [r3]
   193ac:	beq	193ec <flatcc_json_printer_int64_enum_vector_field@@Base+0xec>
   193b0:	ldrb	r3, [r4, #25]
   193b4:	cmp	r3, #0
   193b8:	beq	1944c <flatcc_json_printer_int64_enum_vector_field@@Base+0x14c>
   193bc:	ldr	r3, [r4, #20]
   193c0:	mov	r0, r4
   193c4:	add	r2, r3, #1
   193c8:	str	r2, [r4, #20]
   193cc:	mov	r2, #10
   193d0:	strb	r2, [r3]
   193d4:	bl	149d4 <test_print@@Base+0x1334>
   193d8:	mov	r0, r4
   193dc:	ldrd	r2, [r7, #4]
   193e0:	add	r6, r7, #12
   193e4:	sub	r5, r5, #1
   193e8:	blx	r8
   193ec:	mov	r7, #44	; 0x2c
   193f0:	mov	r9, #10
   193f4:	ldr	r3, [r4, #20]
   193f8:	sub	r5, r5, #1
   193fc:	cmn	r5, #1
   19400:	add	r2, r3, #1
   19404:	bne	19458 <flatcc_json_printer_int64_enum_vector_field@@Base+0x158>
   19408:	ldrb	r1, [r4, #25]
   1940c:	cmp	r1, #0
   19410:	beq	19434 <flatcc_json_printer_int64_enum_vector_field@@Base+0x134>
   19414:	str	r2, [r4, #20]
   19418:	mov	r2, #10
   1941c:	mov	r0, r4
   19420:	strb	r2, [r3]
   19424:	ldr	r3, [r4, #32]
   19428:	sub	r3, r3, #1
   1942c:	str	r3, [r4, #32]
   19430:	bl	149d4 <test_print@@Base+0x1334>
   19434:	ldr	r3, [r4, #20]
   19438:	add	r2, r3, #1
   1943c:	str	r2, [r4, #20]
   19440:	mov	r2, #93	; 0x5d
   19444:	strb	r2, [r3]
   19448:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1944c:	mov	r0, r4
   19450:	bl	14bb8 <test_print@@Base+0x1518>
   19454:	b	193d8 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd8>
   19458:	str	r2, [r4, #20]
   1945c:	strb	r7, [r3]
   19460:	ldrb	r3, [r4, #25]
   19464:	cmp	r3, #0
   19468:	beq	19494 <flatcc_json_printer_int64_enum_vector_field@@Base+0x194>
   1946c:	ldr	r3, [r4, #20]
   19470:	mov	r0, r4
   19474:	add	r2, r3, #1
   19478:	str	r2, [r4, #20]
   1947c:	strb	r9, [r3]
   19480:	bl	149d4 <test_print@@Base+0x1334>
   19484:	mov	r0, r4
   19488:	ldrd	r2, [r6], #8
   1948c:	blx	r8
   19490:	b	193f4 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   19494:	mov	r0, r4
   19498:	bl	14bb8 <test_print@@Base+0x1518>
   1949c:	b	19484 <flatcc_json_printer_int64_enum_vector_field@@Base+0x184>

000194a0 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   194a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   194a4:	ldrb	lr, [r0, #27]
   194a8:	ldr	r9, [sp, #32]
   194ac:	ldr	r8, [sp, #36]	; 0x24
   194b0:	cmp	lr, #0
   194b4:	beq	194c0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x20>
   194b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   194bc:	b	182c0 <flatcc_json_printer_bool_vector_field@@Base>
   194c0:	mov	r5, r1
   194c4:	mov	r4, r0
   194c8:	mov	r1, r2
   194cc:	mov	r0, r5
   194d0:	mov	sl, r3
   194d4:	bl	14688 <test_print@@Base+0xfe8>
   194d8:	cmp	r0, #0
   194dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   194e0:	ldr	r3, [r5, #16]
   194e4:	add	r2, r3, #1
   194e8:	cmp	r3, #0
   194ec:	str	r2, [r5, #16]
   194f0:	beq	19508 <flatcc_json_printer_bool_enum_vector_field@@Base+0x68>
   194f4:	ldr	r3, [r4, #20]
   194f8:	add	r2, r3, #1
   194fc:	str	r2, [r4, #20]
   19500:	mov	r2, #44	; 0x2c
   19504:	strb	r2, [r3]
   19508:	ldr	r3, [r0]
   1950c:	mov	r2, r9
   19510:	mov	r1, sl
   19514:	add	r7, r0, r3
   19518:	ldr	r5, [r0, r3]
   1951c:	mov	r0, r4
   19520:	bl	14bd4 <test_print@@Base+0x1534>
   19524:	ldr	r3, [r4, #32]
   19528:	add	r6, r7, #4
   1952c:	cmp	r5, #0
   19530:	add	r3, r3, #1
   19534:	str	r3, [r4, #32]
   19538:	ldr	r3, [r4, #20]
   1953c:	add	r2, r3, #1
   19540:	str	r2, [r4, #20]
   19544:	mov	r2, #91	; 0x5b
   19548:	strb	r2, [r3]
   1954c:	beq	1958c <flatcc_json_printer_bool_enum_vector_field@@Base+0xec>
   19550:	ldrb	r3, [r4, #25]
   19554:	cmp	r3, #0
   19558:	beq	195ec <flatcc_json_printer_bool_enum_vector_field@@Base+0x14c>
   1955c:	ldr	r3, [r4, #20]
   19560:	mov	r0, r4
   19564:	add	r2, r3, #1
   19568:	str	r2, [r4, #20]
   1956c:	mov	r2, #10
   19570:	strb	r2, [r3]
   19574:	bl	149d4 <test_print@@Base+0x1334>
   19578:	ldrb	r1, [r7, #4]
   1957c:	mov	r0, r4
   19580:	add	r6, r7, #5
   19584:	sub	r5, r5, #1
   19588:	blx	r8
   1958c:	add	r5, r6, r5
   19590:	mov	r7, #44	; 0x2c
   19594:	mov	r9, #10
   19598:	ldr	r3, [r4, #20]
   1959c:	cmp	r6, r5
   195a0:	add	r2, r3, #1
   195a4:	bne	195f8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x158>
   195a8:	ldrb	r1, [r4, #25]
   195ac:	cmp	r1, #0
   195b0:	beq	195d4 <flatcc_json_printer_bool_enum_vector_field@@Base+0x134>
   195b4:	str	r2, [r4, #20]
   195b8:	mov	r2, #10
   195bc:	mov	r0, r4
   195c0:	strb	r2, [r3]
   195c4:	ldr	r3, [r4, #32]
   195c8:	sub	r3, r3, #1
   195cc:	str	r3, [r4, #32]
   195d0:	bl	149d4 <test_print@@Base+0x1334>
   195d4:	ldr	r3, [r4, #20]
   195d8:	add	r2, r3, #1
   195dc:	str	r2, [r4, #20]
   195e0:	mov	r2, #93	; 0x5d
   195e4:	strb	r2, [r3]
   195e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195ec:	mov	r0, r4
   195f0:	bl	14bb8 <test_print@@Base+0x1518>
   195f4:	b	19578 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd8>
   195f8:	str	r2, [r4, #20]
   195fc:	strb	r7, [r3]
   19600:	ldrb	r3, [r4, #25]
   19604:	cmp	r3, #0
   19608:	beq	19634 <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   1960c:	ldr	r3, [r4, #20]
   19610:	mov	r0, r4
   19614:	add	r2, r3, #1
   19618:	str	r2, [r4, #20]
   1961c:	strb	r9, [r3]
   19620:	bl	149d4 <test_print@@Base+0x1334>
   19624:	ldrb	r1, [r6], #1
   19628:	mov	r0, r4
   1962c:	blx	r8
   19630:	b	19598 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   19634:	mov	r0, r4
   19638:	bl	14bb8 <test_print@@Base+0x1518>
   1963c:	b	19624 <flatcc_json_printer_bool_enum_vector_field@@Base+0x184>

00019640 <flatcc_json_printer_struct_vector_field@@Base>:
   19640:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19644:	mov	r5, r1
   19648:	mov	r4, r0
   1964c:	mov	r1, r2
   19650:	mov	r0, r5
   19654:	mov	r8, r3
   19658:	bl	14688 <test_print@@Base+0xfe8>
   1965c:	cmp	r0, #0
   19660:	ldr	r9, [sp, #44]	; 0x2c
   19664:	ldr	r7, [sp, #48]	; 0x30
   19668:	beq	197dc <flatcc_json_printer_struct_vector_field@@Base+0x19c>
   1966c:	ldr	r3, [r5, #16]
   19670:	add	r2, r3, #1
   19674:	cmp	r3, #0
   19678:	str	r2, [r5, #16]
   1967c:	beq	19694 <flatcc_json_printer_struct_vector_field@@Base+0x54>
   19680:	ldr	r3, [r4, #20]
   19684:	add	r2, r3, #1
   19688:	str	r2, [r4, #20]
   1968c:	mov	r2, #44	; 0x2c
   19690:	strb	r2, [r3]
   19694:	ldr	r2, [r0]
   19698:	mov	r1, r8
   1969c:	add	r6, r0, r2
   196a0:	ldr	r5, [r0, r2]
   196a4:	mov	r0, r4
   196a8:	add	r6, r6, #4
   196ac:	ldr	r2, [sp, #40]	; 0x28
   196b0:	bl	14bd4 <test_print@@Base+0x1534>
   196b4:	ldr	r3, [r4, #32]
   196b8:	cmp	r5, #0
   196bc:	add	r3, r3, #1
   196c0:	str	r3, [r4, #32]
   196c4:	ldr	r3, [r4, #20]
   196c8:	add	r2, r3, #1
   196cc:	str	r2, [r4, #20]
   196d0:	mov	r2, #91	; 0x5b
   196d4:	strb	r2, [r3]
   196d8:	beq	1977c <flatcc_json_printer_struct_vector_field@@Base+0x13c>
   196dc:	ldrb	r3, [r4, #25]
   196e0:	cmp	r3, #0
   196e4:	beq	197e4 <flatcc_json_printer_struct_vector_field@@Base+0x1a4>
   196e8:	ldr	r3, [r4, #20]
   196ec:	mov	r0, r4
   196f0:	add	r2, r3, #1
   196f4:	str	r2, [r4, #20]
   196f8:	mov	r2, #10
   196fc:	strb	r2, [r3]
   19700:	bl	149d4 <test_print@@Base+0x1334>
   19704:	ldr	r3, [r4, #32]
   19708:	mov	r1, r6
   1970c:	mov	r0, r4
   19710:	add	r3, r3, #1
   19714:	str	r3, [r4, #32]
   19718:	ldr	r3, [r4, #20]
   1971c:	add	r2, r3, #1
   19720:	str	r2, [r4, #20]
   19724:	mov	r2, #123	; 0x7b
   19728:	strb	r2, [r3]
   1972c:	blx	r7
   19730:	ldrb	r3, [r4, #25]
   19734:	cmp	r3, #0
   19738:	beq	19764 <flatcc_json_printer_struct_vector_field@@Base+0x124>
   1973c:	ldr	r3, [r4, #20]
   19740:	mov	r0, r4
   19744:	add	r2, r3, #1
   19748:	str	r2, [r4, #20]
   1974c:	mov	r2, #10
   19750:	strb	r2, [r3]
   19754:	ldr	r3, [r4, #32]
   19758:	sub	r3, r3, #1
   1975c:	str	r3, [r4, #32]
   19760:	bl	149d4 <test_print@@Base+0x1334>
   19764:	ldr	r3, [r4, #20]
   19768:	sub	r5, r5, #1
   1976c:	add	r2, r3, #1
   19770:	str	r2, [r4, #20]
   19774:	mov	r2, #125	; 0x7d
   19778:	strb	r2, [r3]
   1977c:	mov	sl, #44	; 0x2c
   19780:	mov	r8, #10
   19784:	mov	fp, #123	; 0x7b
   19788:	ldr	r3, [r4, #20]
   1978c:	sub	r5, r5, #1
   19790:	cmn	r5, #1
   19794:	add	r2, r3, #1
   19798:	bne	197f0 <flatcc_json_printer_struct_vector_field@@Base+0x1b0>
   1979c:	ldrb	r1, [r4, #25]
   197a0:	cmp	r1, #0
   197a4:	beq	197c8 <flatcc_json_printer_struct_vector_field@@Base+0x188>
   197a8:	str	r2, [r4, #20]
   197ac:	mov	r2, #10
   197b0:	mov	r0, r4
   197b4:	strb	r2, [r3]
   197b8:	ldr	r3, [r4, #32]
   197bc:	sub	r3, r3, #1
   197c0:	str	r3, [r4, #32]
   197c4:	bl	149d4 <test_print@@Base+0x1334>
   197c8:	ldr	r3, [r4, #20]
   197cc:	add	r2, r3, #1
   197d0:	str	r2, [r4, #20]
   197d4:	mov	r2, #93	; 0x5d
   197d8:	strb	r2, [r3]
   197dc:	add	sp, sp, #4
   197e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e4:	mov	r0, r4
   197e8:	bl	14bb8 <test_print@@Base+0x1518>
   197ec:	b	19704 <flatcc_json_printer_struct_vector_field@@Base+0xc4>
   197f0:	str	r2, [r4, #20]
   197f4:	add	r6, r6, r9
   197f8:	strb	sl, [r3]
   197fc:	ldrb	r3, [r4, #25]
   19800:	cmp	r3, #0
   19804:	beq	19890 <flatcc_json_printer_struct_vector_field@@Base+0x250>
   19808:	ldr	r3, [r4, #20]
   1980c:	mov	r0, r4
   19810:	add	r2, r3, #1
   19814:	str	r2, [r4, #20]
   19818:	strb	r8, [r3]
   1981c:	bl	149d4 <test_print@@Base+0x1334>
   19820:	ldr	r3, [r4, #32]
   19824:	mov	r1, r6
   19828:	mov	r0, r4
   1982c:	add	r3, r3, #1
   19830:	str	r3, [r4, #32]
   19834:	ldr	r3, [r4, #20]
   19838:	add	r2, r3, #1
   1983c:	str	r2, [r4, #20]
   19840:	strb	fp, [r3]
   19844:	blx	r7
   19848:	ldrb	r3, [r4, #25]
   1984c:	cmp	r3, #0
   19850:	beq	19878 <flatcc_json_printer_struct_vector_field@@Base+0x238>
   19854:	ldr	r3, [r4, #20]
   19858:	mov	r0, r4
   1985c:	add	r2, r3, #1
   19860:	str	r2, [r4, #20]
   19864:	strb	r8, [r3]
   19868:	ldr	r3, [r4, #32]
   1986c:	sub	r3, r3, #1
   19870:	str	r3, [r4, #32]
   19874:	bl	149d4 <test_print@@Base+0x1334>
   19878:	ldr	r3, [r4, #20]
   1987c:	add	r2, r3, #1
   19880:	str	r2, [r4, #20]
   19884:	mov	r2, #125	; 0x7d
   19888:	strb	r2, [r3]
   1988c:	b	19788 <flatcc_json_printer_struct_vector_field@@Base+0x148>
   19890:	mov	r0, r4
   19894:	bl	14bb8 <test_print@@Base+0x1518>
   19898:	b	19820 <flatcc_json_printer_struct_vector_field@@Base+0x1e0>

0001989c <flatcc_json_printer_string_vector_field@@Base>:
   1989c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198a0:	mov	r5, r1
   198a4:	mov	r4, r0
   198a8:	mov	r1, r2
   198ac:	mov	r0, r5
   198b0:	mov	r7, r3
   198b4:	bl	14688 <test_print@@Base+0xfe8>
   198b8:	cmp	r0, #0
   198bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   198c0:	ldr	r2, [r5, #16]
   198c4:	add	r3, r2, #1
   198c8:	cmp	r2, #0
   198cc:	str	r3, [r5, #16]
   198d0:	beq	198e8 <flatcc_json_printer_string_vector_field@@Base+0x4c>
   198d4:	ldr	r2, [r4, #20]
   198d8:	add	r3, r2, #1
   198dc:	str	r3, [r4, #20]
   198e0:	mov	r3, #44	; 0x2c
   198e4:	strb	r3, [r2]
   198e8:	ldr	r2, [r0]
   198ec:	mov	r1, r7
   198f0:	add	r5, r0, r2
   198f4:	ldr	r6, [r0, r2]
   198f8:	mov	r0, r4
   198fc:	ldr	r2, [sp, #32]
   19900:	bl	14bd4 <test_print@@Base+0x1534>
   19904:	ldr	r3, [r4, #32]
   19908:	cmp	r6, #0
   1990c:	add	r3, r3, #1
   19910:	str	r3, [r4, #32]
   19914:	ldr	r3, [r4, #20]
   19918:	add	r2, r3, #1
   1991c:	str	r2, [r4, #20]
   19920:	mov	r2, #91	; 0x5b
   19924:	strb	r2, [r3]
   19928:	beq	1996c <flatcc_json_printer_string_vector_field@@Base+0xd0>
   1992c:	ldrb	r3, [r4, #25]
   19930:	cmp	r3, #0
   19934:	beq	199d0 <flatcc_json_printer_string_vector_field@@Base+0x134>
   19938:	ldr	r3, [r4, #20]
   1993c:	mov	r0, r4
   19940:	add	r2, r3, #1
   19944:	str	r2, [r4, #20]
   19948:	mov	r2, #10
   1994c:	strb	r2, [r3]
   19950:	bl	149d4 <test_print@@Base+0x1334>
   19954:	ldr	r1, [r5, #4]
   19958:	mov	r0, r4
   1995c:	sub	r6, r6, #1
   19960:	add	r1, r1, #4
   19964:	add	r1, r5, r1
   19968:	bl	14950 <test_print@@Base+0x12b0>
   1996c:	add	r5, r5, #8
   19970:	mov	r8, #44	; 0x2c
   19974:	mov	r9, #10
   19978:	ldr	r3, [r4, #20]
   1997c:	sub	r6, r6, #1
   19980:	cmn	r6, #1
   19984:	add	r2, r3, #1
   19988:	bne	199dc <flatcc_json_printer_string_vector_field@@Base+0x140>
   1998c:	ldrb	r1, [r4, #25]
   19990:	cmp	r1, #0
   19994:	beq	199b8 <flatcc_json_printer_string_vector_field@@Base+0x11c>
   19998:	str	r2, [r4, #20]
   1999c:	mov	r2, #10
   199a0:	mov	r0, r4
   199a4:	strb	r2, [r3]
   199a8:	ldr	r3, [r4, #32]
   199ac:	sub	r3, r3, #1
   199b0:	str	r3, [r4, #32]
   199b4:	bl	149d4 <test_print@@Base+0x1334>
   199b8:	ldr	r3, [r4, #20]
   199bc:	add	r2, r3, #1
   199c0:	str	r2, [r4, #20]
   199c4:	mov	r2, #93	; 0x5d
   199c8:	strb	r2, [r3]
   199cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   199d0:	mov	r0, r4
   199d4:	bl	14bb8 <test_print@@Base+0x1518>
   199d8:	b	19954 <flatcc_json_printer_string_vector_field@@Base+0xb8>
   199dc:	str	r2, [r4, #20]
   199e0:	mov	r7, r5
   199e4:	strb	r8, [r3]
   199e8:	ldrb	r3, [r4, #25]
   199ec:	cmp	r3, #0
   199f0:	beq	19a24 <flatcc_json_printer_string_vector_field@@Base+0x188>
   199f4:	ldr	r3, [r4, #20]
   199f8:	mov	r0, r4
   199fc:	add	r2, r3, #1
   19a00:	str	r2, [r4, #20]
   19a04:	strb	r9, [r3]
   19a08:	bl	149d4 <test_print@@Base+0x1334>
   19a0c:	ldr	r1, [r7]
   19a10:	mov	r0, r4
   19a14:	add	r5, r5, #4
   19a18:	add	r1, r7, r1
   19a1c:	bl	14950 <test_print@@Base+0x12b0>
   19a20:	b	19978 <flatcc_json_printer_string_vector_field@@Base+0xdc>
   19a24:	mov	r0, r4
   19a28:	bl	14bb8 <test_print@@Base+0x1518>
   19a2c:	b	19a0c <flatcc_json_printer_string_vector_field@@Base+0x170>

00019a30 <flatcc_json_printer_table_vector_field@@Base>:
   19a30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19a34:	mov	r6, r1
   19a38:	mov	r4, r0
   19a3c:	mov	r1, r2
   19a40:	mov	r0, r6
   19a44:	mov	r9, r3
   19a48:	bl	14688 <test_print@@Base+0xfe8>
   19a4c:	cmp	r0, #0
   19a50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a54:	ldr	r3, [r6, #16]
   19a58:	add	r2, r3, #1
   19a5c:	cmp	r3, #0
   19a60:	str	r2, [r6, #16]
   19a64:	beq	19a7c <flatcc_json_printer_table_vector_field@@Base+0x4c>
   19a68:	ldr	r2, [r4, #20]
   19a6c:	add	r3, r2, #1
   19a70:	str	r3, [r4, #20]
   19a74:	mov	r3, #44	; 0x2c
   19a78:	strb	r3, [r2]
   19a7c:	ldr	r2, [r0]
   19a80:	mov	r1, r9
   19a84:	add	r8, r0, r2
   19a88:	ldr	r5, [r0, r2]
   19a8c:	mov	r0, r4
   19a90:	add	r7, r8, #4
   19a94:	ldr	r2, [sp, #32]
   19a98:	bl	14bd4 <test_print@@Base+0x1534>
   19a9c:	ldr	r3, [r4, #32]
   19aa0:	cmp	r5, #0
   19aa4:	add	r3, r3, #1
   19aa8:	str	r3, [r4, #32]
   19aac:	ldr	r3, [r4, #20]
   19ab0:	add	r2, r3, #1
   19ab4:	str	r2, [r4, #20]
   19ab8:	mov	r2, #91	; 0x5b
   19abc:	strb	r2, [r3]
   19ac0:	beq	19ae0 <flatcc_json_printer_table_vector_field@@Base+0xb0>
   19ac4:	ldr	r1, [r8, #4]
   19ac8:	mov	r0, r4
   19acc:	sub	r5, r5, #1
   19ad0:	ldr	r2, [r6, #12]
   19ad4:	ldr	r3, [sp, #36]	; 0x24
   19ad8:	add	r1, r7, r1
   19adc:	bl	14e38 <test_print@@Base+0x1798>
   19ae0:	mov	r8, #44	; 0x2c
   19ae4:	ldr	r3, [r4, #20]
   19ae8:	sub	r5, r5, #1
   19aec:	cmn	r5, #1
   19af0:	add	r2, r3, #1
   19af4:	bne	19b3c <flatcc_json_printer_table_vector_field@@Base+0x10c>
   19af8:	ldrb	r1, [r4, #25]
   19afc:	cmp	r1, #0
   19b00:	beq	19b24 <flatcc_json_printer_table_vector_field@@Base+0xf4>
   19b04:	str	r2, [r4, #20]
   19b08:	mov	r2, #10
   19b0c:	mov	r0, r4
   19b10:	strb	r2, [r3]
   19b14:	ldr	r3, [r4, #32]
   19b18:	sub	r3, r3, #1
   19b1c:	str	r3, [r4, #32]
   19b20:	bl	149d4 <test_print@@Base+0x1334>
   19b24:	ldr	r3, [r4, #20]
   19b28:	add	r2, r3, #1
   19b2c:	str	r2, [r4, #20]
   19b30:	mov	r2, #93	; 0x5d
   19b34:	strb	r2, [r3]
   19b38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b3c:	str	r2, [r4, #20]
   19b40:	mov	r0, r4
   19b44:	strb	r8, [r3]
   19b48:	ldr	r1, [r7, #4]!
   19b4c:	ldr	r2, [r6, #12]
   19b50:	ldr	r3, [sp, #36]	; 0x24
   19b54:	add	r1, r7, r1
   19b58:	bl	14e38 <test_print@@Base+0x1798>
   19b5c:	b	19ae4 <flatcc_json_printer_table_vector_field@@Base+0xb4>

00019b60 <flatcc_json_printer_union_vector_field@@Base>:
   19b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b64:	mov	r7, r1
   19b68:	sub	r6, r2, #1
   19b6c:	sub	sp, sp, #132	; 0x84
   19b70:	mov	r1, r6
   19b74:	mov	r4, r0
   19b78:	mov	r0, r7
   19b7c:	mov	fp, r3
   19b80:	bl	14688 <test_print@@Base+0xfe8>
   19b84:	mov	r5, r0
   19b88:	mov	r1, r2
   19b8c:	mov	r0, r7
   19b90:	bl	14688 <test_print@@Base+0xfe8>
   19b94:	ldr	sl, [sp, #168]	; 0xa8
   19b98:	ldr	r3, [r7, #12]
   19b9c:	ldr	r9, [sp, #176]	; 0xb0
   19ba0:	cmp	sl, #100	; 0x64
   19ba4:	str	r3, [sp, #12]
   19ba8:	ble	19bd0 <flatcc_json_printer_union_vector_field@@Base+0x70>
   19bac:	ldr	r3, [r4, #36]	; 0x24
   19bb0:	movw	r2, #843	; 0x34b
   19bb4:	ldr	r1, [pc, #584]	; 19e04 <flatcc_json_printer_union_vector_field@@Base+0x2a4>
   19bb8:	ldr	r0, [pc, #584]	; 19e08 <flatcc_json_printer_union_vector_field@@Base+0x2a8>
   19bbc:	cmp	r3, #0
   19bc0:	moveq	r3, #1
   19bc4:	streq	r3, [r4, #36]	; 0x24
   19bc8:	ldr	r3, [pc, #572]	; 19e0c <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   19bcc:	bl	12534 <__assert_fail@plt>
   19bd0:	add	r3, sp, #20
   19bd4:	mov	r8, r0
   19bd8:	mov	r2, sl
   19bdc:	mov	r1, fp
   19be0:	mov	r0, r3
   19be4:	bl	12444 <memcpy@plt>
   19be8:	ldr	r2, [pc, #544]	; 19e10 <flatcc_json_printer_union_vector_field@@Base+0x2b0>
   19bec:	mov	r3, r0
   19bf0:	add	r1, r0, sl
   19bf4:	cmp	r8, #0
   19bf8:	cmpne	r5, #0
   19bfc:	ldr	r0, [r2]
   19c00:	ldrb	r2, [r2, #4]
   19c04:	str	r0, [r3, sl]
   19c08:	strb	r2, [r1, #4]
   19c0c:	beq	19d34 <flatcc_json_printer_union_vector_field@@Base+0x1d4>
   19c10:	ldr	r2, [sp, #172]	; 0xac
   19c14:	mov	r1, r7
   19c18:	mov	r0, r4
   19c1c:	str	r2, [sp, #4]
   19c20:	add	r2, sl, #5
   19c24:	str	r2, [sp]
   19c28:	mov	r2, r6
   19c2c:	bl	1879c <flatcc_json_printer_uint8_enum_vector_field@@Base>
   19c30:	ldr	r3, [r7, #16]
   19c34:	add	r2, r3, #1
   19c38:	cmp	r3, #0
   19c3c:	str	r2, [r7, #16]
   19c40:	beq	19c58 <flatcc_json_printer_union_vector_field@@Base+0xf8>
   19c44:	ldr	r3, [r4, #20]
   19c48:	add	r2, r3, #1
   19c4c:	str	r2, [r4, #20]
   19c50:	mov	r2, #44	; 0x2c
   19c54:	strb	r2, [r3]
   19c58:	ldr	r3, [r8]
   19c5c:	mov	r2, sl
   19c60:	mov	r1, fp
   19c64:	mov	r0, r4
   19c68:	ldr	r6, [r5]
   19c6c:	add	r7, r8, r3
   19c70:	add	r7, r7, #4
   19c74:	add	r6, r5, r6
   19c78:	ldr	r5, [r8, r3]
   19c7c:	bl	14bd4 <test_print@@Base+0x1534>
   19c80:	ldr	r3, [r4, #32]
   19c84:	add	r8, r6, #4
   19c88:	cmp	r5, #0
   19c8c:	add	r3, r3, #1
   19c90:	str	r3, [r4, #32]
   19c94:	ldr	r3, [r4, #20]
   19c98:	add	r2, r3, #1
   19c9c:	str	r2, [r4, #20]
   19ca0:	mov	r2, #91	; 0x5b
   19ca4:	strb	r2, [r3]
   19ca8:	beq	19cd0 <flatcc_json_printer_union_vector_field@@Base+0x170>
   19cac:	ldrb	r3, [r6, #4]
   19cb0:	cmp	r3, #0
   19cb4:	beq	19d3c <flatcc_json_printer_union_vector_field@@Base+0x1dc>
   19cb8:	add	r1, sp, #8
   19cbc:	mov	r0, r4
   19cc0:	str	r7, [sp, #8]
   19cc4:	strb	r3, [sp, #16]
   19cc8:	blx	r9
   19ccc:	sub	r5, r5, #1
   19cd0:	add	r5, r5, #4
   19cd4:	mov	sl, #110	; 0x6e
   19cd8:	add	r5, r6, r5
   19cdc:	mov	fp, #117	; 0x75
   19ce0:	mov	r6, #44	; 0x2c
   19ce4:	ldr	r3, [r4, #20]
   19ce8:	cmp	r8, r5
   19cec:	add	r2, r3, #1
   19cf0:	bne	19d8c <flatcc_json_printer_union_vector_field@@Base+0x22c>
   19cf4:	ldrb	r1, [r4, #25]
   19cf8:	cmp	r1, #0
   19cfc:	beq	19d20 <flatcc_json_printer_union_vector_field@@Base+0x1c0>
   19d00:	str	r2, [r4, #20]
   19d04:	mov	r2, #10
   19d08:	mov	r0, r4
   19d0c:	strb	r2, [r3]
   19d10:	ldr	r3, [r4, #32]
   19d14:	sub	r3, r3, #1
   19d18:	str	r3, [r4, #32]
   19d1c:	bl	149d4 <test_print@@Base+0x1334>
   19d20:	ldr	r3, [r4, #20]
   19d24:	add	r2, r3, #1
   19d28:	str	r2, [r4, #20]
   19d2c:	mov	r2, #93	; 0x5d
   19d30:	strb	r2, [r3]
   19d34:	add	sp, sp, #132	; 0x84
   19d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d3c:	ldr	r3, [r4, #20]
   19d40:	add	r2, r3, #1
   19d44:	str	r2, [r4, #20]
   19d48:	mov	r2, #110	; 0x6e
   19d4c:	strb	r2, [r3]
   19d50:	ldr	r3, [r4, #20]
   19d54:	add	r2, r3, #1
   19d58:	str	r2, [r4, #20]
   19d5c:	mov	r2, #117	; 0x75
   19d60:	strb	r2, [r3]
   19d64:	ldr	r3, [r4, #20]
   19d68:	add	r2, r3, #1
   19d6c:	str	r2, [r4, #20]
   19d70:	mov	r2, #108	; 0x6c
   19d74:	strb	r2, [r3]
   19d78:	ldr	r3, [r4, #20]
   19d7c:	add	r1, r3, #1
   19d80:	str	r1, [r4, #20]
   19d84:	strb	r2, [r3]
   19d88:	b	19ccc <flatcc_json_printer_union_vector_field@@Base+0x16c>
   19d8c:	ldrb	r1, [r8, #1]!
   19d90:	add	r7, r7, #4
   19d94:	str	r2, [r4, #20]
   19d98:	strb	r6, [r3]
   19d9c:	cmp	r1, #0
   19da0:	beq	19dbc <flatcc_json_printer_union_vector_field@@Base+0x25c>
   19da4:	mov	r0, r4
   19da8:	str	r7, [sp, #8]
   19dac:	strb	r1, [sp, #16]
   19db0:	add	r1, sp, #8
   19db4:	blx	r9
   19db8:	b	19ce4 <flatcc_json_printer_union_vector_field@@Base+0x184>
   19dbc:	ldr	r3, [r4, #20]
   19dc0:	add	r2, r3, #1
   19dc4:	str	r2, [r4, #20]
   19dc8:	strb	sl, [r3]
   19dcc:	ldr	r3, [r4, #20]
   19dd0:	add	r2, r3, #1
   19dd4:	str	r2, [r4, #20]
   19dd8:	strb	fp, [r3]
   19ddc:	ldr	r3, [r4, #20]
   19de0:	add	r2, r3, #1
   19de4:	str	r2, [r4, #20]
   19de8:	mov	r2, #108	; 0x6c
   19dec:	strb	r2, [r3]
   19df0:	ldr	r3, [r4, #20]
   19df4:	add	r1, r3, #1
   19df8:	str	r1, [r4, #20]
   19dfc:	strb	r2, [r3]
   19e00:	b	19ce4 <flatcc_json_printer_union_vector_field@@Base+0x184>
   19e04:	andeq	fp, r1, r4, ror #18
   19e08:	andeq	fp, r1, r8, lsl fp
   19e0c:	andeq	fp, r1, r5, lsr #17
   19e10:	andeq	fp, r1, r3, lsr fp

00019e14 <flatcc_json_printer_table_field@@Base>:
   19e14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e18:	mov	r5, r1
   19e1c:	mov	r4, r0
   19e20:	mov	r1, r2
   19e24:	mov	r0, r5
   19e28:	mov	r8, r3
   19e2c:	bl	14688 <test_print@@Base+0xfe8>
   19e30:	subs	r6, r0, #0
   19e34:	ldr	r9, [sp, #32]
   19e38:	ldr	r7, [sp, #36]	; 0x24
   19e3c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e40:	ldr	r2, [r5, #16]
   19e44:	add	r3, r2, #1
   19e48:	cmp	r2, #0
   19e4c:	str	r3, [r5, #16]
   19e50:	beq	19e68 <flatcc_json_printer_table_field@@Base+0x54>
   19e54:	ldr	r2, [r4, #20]
   19e58:	add	r3, r2, #1
   19e5c:	str	r3, [r4, #20]
   19e60:	mov	r3, #44	; 0x2c
   19e64:	strb	r3, [r2]
   19e68:	mov	r2, r9
   19e6c:	mov	r1, r8
   19e70:	mov	r0, r4
   19e74:	bl	14bd4 <test_print@@Base+0x1534>
   19e78:	ldr	r1, [r6]
   19e7c:	mov	r3, r7
   19e80:	mov	r0, r4
   19e84:	ldr	r2, [r5, #12]
   19e88:	add	r1, r6, r1
   19e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e90:	b	14e38 <test_print@@Base+0x1798>

00019e94 <flatcc_json_printer_union_field@@Base>:
   19e94:	push	{r4, r5, r6, r7, r8, r9, lr}
   19e98:	mov	r5, r1
   19e9c:	sub	sp, sp, #20
   19ea0:	sub	r1, r2, #1
   19ea4:	mov	r4, r0
   19ea8:	mov	r0, r5
   19eac:	mov	r8, r3
   19eb0:	bl	14688 <test_print@@Base+0xfe8>
   19eb4:	mov	r7, r0
   19eb8:	mov	r1, r2
   19ebc:	mov	r0, r5
   19ec0:	bl	14688 <test_print@@Base+0xfe8>
   19ec4:	cmp	r7, #0
   19ec8:	cmpne	r0, #0
   19ecc:	ldr	r6, [sp, #48]	; 0x30
   19ed0:	beq	1a040 <flatcc_json_printer_union_field@@Base+0x1ac>
   19ed4:	ldr	r3, [r5, #16]
   19ed8:	mov	r9, r0
   19edc:	ldrb	r7, [r7]
   19ee0:	add	r2, r3, #1
   19ee4:	cmp	r3, #0
   19ee8:	str	r2, [r5, #16]
   19eec:	beq	19f04 <flatcc_json_printer_union_field@@Base+0x70>
   19ef0:	ldr	r3, [r4, #20]
   19ef4:	add	r2, r3, #1
   19ef8:	str	r2, [r4, #20]
   19efc:	mov	r2, #44	; 0x2c
   19f00:	strb	r2, [r3]
   19f04:	ldrb	r3, [r4, #25]
   19f08:	cmp	r3, #0
   19f0c:	beq	1a048 <flatcc_json_printer_union_field@@Base+0x1b4>
   19f10:	ldr	r3, [r4, #20]
   19f14:	mov	r0, r4
   19f18:	add	r2, r3, #1
   19f1c:	str	r2, [r4, #20]
   19f20:	mov	r2, #10
   19f24:	strb	r2, [r3]
   19f28:	bl	149d4 <test_print@@Base+0x1334>
   19f2c:	ldr	r3, [r4, #20]
   19f30:	mov	r2, #34	; 0x22
   19f34:	mov	r1, r8
   19f38:	strb	r2, [r3]
   19f3c:	ldrb	r3, [r4, #26]
   19f40:	ldr	r2, [r4, #16]
   19f44:	ldr	r0, [r4, #20]
   19f48:	cmp	r3, #0
   19f4c:	addeq	r0, r0, #1
   19f50:	add	r3, r0, r6
   19f54:	cmp	r2, r3
   19f58:	mov	r2, r6
   19f5c:	str	r0, [r4, #20]
   19f60:	bls	1a054 <flatcc_json_printer_union_field@@Base+0x1c0>
   19f64:	bl	12444 <memcpy@plt>
   19f68:	ldr	r3, [r4, #20]
   19f6c:	add	r3, r3, r6
   19f70:	str	r3, [r4, #20]
   19f74:	mov	r2, #5
   19f78:	ldr	r1, [pc, #244]	; 1a074 <flatcc_json_printer_union_field@@Base+0x1e0>
   19f7c:	mov	r0, r4
   19f80:	bl	14704 <test_print@@Base+0x1064>
   19f84:	ldr	r3, [r4, #20]
   19f88:	mov	r2, #34	; 0x22
   19f8c:	strb	r2, [r3]
   19f90:	ldrb	r3, [r4, #26]
   19f94:	ldr	r1, [r4, #20]
   19f98:	clz	r3, r3
   19f9c:	lsr	r3, r3, #5
   19fa0:	add	r2, r1, r3
   19fa4:	add	r2, r2, #1
   19fa8:	str	r2, [r4, #20]
   19fac:	mov	r2, #58	; 0x3a
   19fb0:	strb	r2, [r1, r3]
   19fb4:	mov	r2, #32
   19fb8:	ldr	r3, [r4, #20]
   19fbc:	strb	r2, [r3]
   19fc0:	ldrb	r3, [r4, #25]
   19fc4:	ldr	r1, [r4, #20]
   19fc8:	cmp	r3, #0
   19fcc:	addne	r1, r1, #1
   19fd0:	ldrb	r3, [r4, #27]
   19fd4:	str	r1, [r4, #20]
   19fd8:	cmp	r3, #0
   19fdc:	beq	1a060 <flatcc_json_printer_union_field@@Base+0x1cc>
   19fe0:	mov	r0, r7
   19fe4:	bl	14c58 <test_print@@Base+0x15b8>
   19fe8:	ldr	r3, [r4, #20]
   19fec:	add	r0, r3, r0
   19ff0:	str	r0, [r4, #20]
   19ff4:	cmp	r7, #0
   19ff8:	beq	1a040 <flatcc_json_printer_union_field@@Base+0x1ac>
   19ffc:	ldr	r3, [r4, #20]
   1a000:	mov	r1, r8
   1a004:	mov	r0, r4
   1a008:	add	r2, r3, #1
   1a00c:	str	r2, [r4, #20]
   1a010:	mov	r2, #44	; 0x2c
   1a014:	strb	r2, [r3]
   1a018:	mov	r2, r6
   1a01c:	bl	14bd4 <test_print@@Base+0x1534>
   1a020:	ldr	r3, [r5, #12]
   1a024:	add	r1, sp, #4
   1a028:	mov	r0, r4
   1a02c:	str	r9, [sp, #4]
   1a030:	str	r3, [sp, #8]
   1a034:	ldr	r3, [sp, #56]	; 0x38
   1a038:	strb	r7, [sp, #12]
   1a03c:	blx	r3
   1a040:	add	sp, sp, #20
   1a044:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a048:	mov	r0, r4
   1a04c:	bl	14bb8 <test_print@@Base+0x1518>
   1a050:	b	19f2c <flatcc_json_printer_union_field@@Base+0x98>
   1a054:	mov	r0, r4
   1a058:	bl	14704 <test_print@@Base+0x1064>
   1a05c:	b	19f74 <flatcc_json_printer_union_field@@Base+0xe0>
   1a060:	mov	r1, r7
   1a064:	mov	r0, r4
   1a068:	ldr	r3, [sp, #52]	; 0x34
   1a06c:	blx	r3
   1a070:	b	19ff4 <flatcc_json_printer_union_field@@Base+0x160>
   1a074:	andeq	fp, r1, r3, lsr fp

0001a078 <flatcc_json_printer_union_table@@Base>:
   1a078:	ldr	ip, [r1]
   1a07c:	mov	r3, r2
   1a080:	push	{lr}		; (str lr, [sp, #-4]!)
   1a084:	ldr	r2, [r1, #4]
   1a088:	ldr	lr, [ip]
   1a08c:	add	r1, ip, lr
   1a090:	pop	{lr}		; (ldr lr, [sp], #4)
   1a094:	b	14e38 <test_print@@Base+0x1798>

0001a098 <flatcc_json_printer_union_struct@@Base>:
   1a098:	ldr	r3, [r0, #32]
   1a09c:	push	{r4, lr}
   1a0a0:	mov	r4, r0
   1a0a4:	add	r3, r3, #1
   1a0a8:	str	r3, [r0, #32]
   1a0ac:	ldr	r3, [r0, #20]
   1a0b0:	add	ip, r3, #1
   1a0b4:	str	ip, [r0, #20]
   1a0b8:	mov	ip, #123	; 0x7b
   1a0bc:	strb	ip, [r3]
   1a0c0:	ldr	r3, [r1]
   1a0c4:	ldr	r1, [r3]
   1a0c8:	add	r1, r3, r1
   1a0cc:	blx	r2
   1a0d0:	ldrb	r3, [r4, #25]
   1a0d4:	cmp	r3, #0
   1a0d8:	beq	1a104 <flatcc_json_printer_union_struct@@Base+0x6c>
   1a0dc:	ldr	r3, [r4, #20]
   1a0e0:	mov	r0, r4
   1a0e4:	add	r2, r3, #1
   1a0e8:	str	r2, [r4, #20]
   1a0ec:	mov	r2, #10
   1a0f0:	strb	r2, [r3]
   1a0f4:	ldr	r3, [r4, #32]
   1a0f8:	sub	r3, r3, #1
   1a0fc:	str	r3, [r4, #32]
   1a100:	bl	149d4 <test_print@@Base+0x1334>
   1a104:	ldr	r3, [r4, #20]
   1a108:	add	r2, r3, #1
   1a10c:	str	r2, [r4, #20]
   1a110:	mov	r2, #125	; 0x7d
   1a114:	strb	r2, [r3]
   1a118:	pop	{r4, pc}

0001a11c <flatcc_json_printer_union_string@@Base>:
   1a11c:	ldr	r3, [r1]
   1a120:	ldr	r1, [r3]
   1a124:	add	r1, r3, r1
   1a128:	b	14950 <test_print@@Base+0x12b0>

0001a12c <flatcc_json_printer_embedded_struct_field@@Base>:
   1a12c:	cmp	r1, #0
   1a130:	push	{r4, r5, r6, lr}
   1a134:	mov	r4, r0
   1a138:	mov	r6, r2
   1a13c:	mov	r5, r3
   1a140:	beq	1a158 <flatcc_json_printer_embedded_struct_field@@Base+0x2c>
   1a144:	ldr	r2, [r0, #20]
   1a148:	add	r3, r2, #1
   1a14c:	str	r3, [r0, #20]
   1a150:	mov	r3, #44	; 0x2c
   1a154:	strb	r3, [r2]
   1a158:	mov	r0, r4
   1a15c:	ldr	r1, [sp, #16]
   1a160:	ldr	r2, [sp, #20]
   1a164:	bl	14bd4 <test_print@@Base+0x1534>
   1a168:	ldr	r2, [r4, #32]
   1a16c:	add	r1, r6, r5
   1a170:	mov	r0, r4
   1a174:	add	r2, r2, #1
   1a178:	str	r2, [r4, #32]
   1a17c:	ldr	r2, [r4, #20]
   1a180:	add	r3, r2, #1
   1a184:	str	r3, [r4, #20]
   1a188:	mov	r3, #123	; 0x7b
   1a18c:	strb	r3, [r2]
   1a190:	ldr	r3, [sp, #24]
   1a194:	blx	r3
   1a198:	ldrb	r3, [r4, #25]
   1a19c:	cmp	r3, #0
   1a1a0:	beq	1a1cc <flatcc_json_printer_embedded_struct_field@@Base+0xa0>
   1a1a4:	ldr	r3, [r4, #20]
   1a1a8:	mov	r0, r4
   1a1ac:	add	r2, r3, #1
   1a1b0:	str	r2, [r4, #20]
   1a1b4:	mov	r2, #10
   1a1b8:	strb	r2, [r3]
   1a1bc:	ldr	r3, [r4, #32]
   1a1c0:	sub	r3, r3, #1
   1a1c4:	str	r3, [r4, #32]
   1a1c8:	bl	149d4 <test_print@@Base+0x1334>
   1a1cc:	ldr	r3, [r4, #20]
   1a1d0:	add	r2, r3, #1
   1a1d4:	str	r2, [r4, #20]
   1a1d8:	mov	r2, #125	; 0x7d
   1a1dc:	strb	r2, [r3]
   1a1e0:	pop	{r4, r5, r6, pc}

0001a1e4 <flatcc_json_printer_struct_field@@Base>:
   1a1e4:	push	{r4, r5, r6, r7, r8, lr}
   1a1e8:	mov	r5, r1
   1a1ec:	mov	r4, r0
   1a1f0:	mov	r1, r2
   1a1f4:	mov	r0, r5
   1a1f8:	mov	r7, r3
   1a1fc:	bl	14688 <test_print@@Base+0xfe8>
   1a200:	subs	r6, r0, #0
   1a204:	popeq	{r4, r5, r6, r7, r8, pc}
   1a208:	ldr	r2, [r5, #16]
   1a20c:	add	r3, r2, #1
   1a210:	cmp	r2, #0
   1a214:	str	r3, [r5, #16]
   1a218:	beq	1a230 <flatcc_json_printer_struct_field@@Base+0x4c>
   1a21c:	ldr	r2, [r4, #20]
   1a220:	add	r3, r2, #1
   1a224:	str	r3, [r4, #20]
   1a228:	mov	r3, #44	; 0x2c
   1a22c:	strb	r3, [r2]
   1a230:	mov	r1, r7
   1a234:	mov	r0, r4
   1a238:	ldr	r2, [sp, #24]
   1a23c:	bl	14bd4 <test_print@@Base+0x1534>
   1a240:	ldr	r3, [r4, #32]
   1a244:	mov	r1, r6
   1a248:	mov	r0, r4
   1a24c:	add	r3, r3, #1
   1a250:	str	r3, [r4, #32]
   1a254:	ldr	r3, [r4, #20]
   1a258:	add	r2, r3, #1
   1a25c:	str	r2, [r4, #20]
   1a260:	mov	r2, #123	; 0x7b
   1a264:	strb	r2, [r3]
   1a268:	ldr	r3, [sp, #28]
   1a26c:	blx	r3
   1a270:	ldrb	r3, [r4, #25]
   1a274:	cmp	r3, #0
   1a278:	beq	1a2a4 <flatcc_json_printer_struct_field@@Base+0xc0>
   1a27c:	ldr	r3, [r4, #20]
   1a280:	mov	r0, r4
   1a284:	add	r2, r3, #1
   1a288:	str	r2, [r4, #20]
   1a28c:	mov	r2, #10
   1a290:	strb	r2, [r3]
   1a294:	ldr	r3, [r4, #32]
   1a298:	sub	r3, r3, #1
   1a29c:	str	r3, [r4, #32]
   1a2a0:	bl	149d4 <test_print@@Base+0x1334>
   1a2a4:	ldr	r3, [r4, #20]
   1a2a8:	add	r2, r3, #1
   1a2ac:	str	r2, [r4, #20]
   1a2b0:	mov	r2, #125	; 0x7d
   1a2b4:	strb	r2, [r3]
   1a2b8:	pop	{r4, r5, r6, r7, r8, pc}

0001a2bc <flatcc_json_printer_struct_as_root@@Base>:
   1a2bc:	push	{r4, r5, r6, lr}
   1a2c0:	mov	r4, r0
   1a2c4:	mov	r5, r1
   1a2c8:	bl	14efc <test_print@@Base+0x185c>
   1a2cc:	cmp	r0, #0
   1a2d0:	bne	1a2dc <flatcc_json_printer_struct_as_root@@Base+0x20>
   1a2d4:	mvn	r0, #0
   1a2d8:	pop	{r4, r5, r6, pc}
   1a2dc:	ldr	r3, [r4, #32]
   1a2e0:	mov	r0, r4
   1a2e4:	add	r3, r3, #1
   1a2e8:	str	r3, [r4, #32]
   1a2ec:	ldr	r3, [r4, #20]
   1a2f0:	add	r2, r3, #1
   1a2f4:	str	r2, [r4, #20]
   1a2f8:	mov	r2, #123	; 0x7b
   1a2fc:	strb	r2, [r3]
   1a300:	ldr	r1, [r5]
   1a304:	ldr	r3, [sp, #16]
   1a308:	add	r1, r5, r1
   1a30c:	blx	r3
   1a310:	ldrb	r3, [r4, #25]
   1a314:	cmp	r3, #0
   1a318:	beq	1a344 <flatcc_json_printer_struct_as_root@@Base+0x88>
   1a31c:	ldr	r3, [r4, #20]
   1a320:	mov	r0, r4
   1a324:	add	r2, r3, #1
   1a328:	str	r2, [r4, #20]
   1a32c:	mov	r2, #10
   1a330:	strb	r2, [r3]
   1a334:	ldr	r3, [r4, #32]
   1a338:	sub	r3, r3, #1
   1a33c:	str	r3, [r4, #32]
   1a340:	bl	149d4 <test_print@@Base+0x1334>
   1a344:	ldr	r3, [r4, #20]
   1a348:	add	r2, r3, #1
   1a34c:	str	r2, [r4, #20]
   1a350:	mov	r2, #125	; 0x7d
   1a354:	strb	r2, [r3]
   1a358:	ldrb	r3, [r4, #25]
   1a35c:	cmp	r3, #0
   1a360:	beq	1a384 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   1a364:	ldr	r3, [r4, #32]
   1a368:	cmp	r3, #0
   1a36c:	bne	1a384 <flatcc_json_printer_struct_as_root@@Base+0xc8>
   1a370:	ldr	r3, [r4, #20]
   1a374:	add	r2, r3, #1
   1a378:	str	r2, [r4, #20]
   1a37c:	mov	r2, #10
   1a380:	strb	r2, [r3]
   1a384:	mov	r1, #1
   1a388:	mov	r0, r4
   1a38c:	ldr	r3, [r4, #44]	; 0x2c
   1a390:	blx	r3
   1a394:	ldr	r3, [r4, #36]	; 0x24
   1a398:	cmp	r3, #0
   1a39c:	bne	1a2d4 <flatcc_json_printer_struct_as_root@@Base+0x18>
   1a3a0:	ldr	r3, [r4]
   1a3a4:	ldr	r0, [r4, #20]
   1a3a8:	sub	r0, r0, r3
   1a3ac:	ldr	r3, [r4, #12]
   1a3b0:	add	r0, r0, r3
   1a3b4:	pop	{r4, r5, r6, pc}

0001a3b8 <flatcc_json_printer_table_as_root@@Base>:
   1a3b8:	push	{r4, r5, r6, lr}
   1a3bc:	mov	r4, r0
   1a3c0:	mov	r5, r1
   1a3c4:	bl	14efc <test_print@@Base+0x185c>
   1a3c8:	cmp	r0, #0
   1a3cc:	bne	1a3d8 <flatcc_json_printer_table_as_root@@Base+0x20>
   1a3d0:	mvn	r0, #0
   1a3d4:	pop	{r4, r5, r6, pc}
   1a3d8:	ldr	r1, [r5]
   1a3dc:	mov	r2, #100	; 0x64
   1a3e0:	mov	r0, r4
   1a3e4:	ldr	r3, [sp, #16]
   1a3e8:	add	r1, r5, r1
   1a3ec:	bl	14e38 <test_print@@Base+0x1798>
   1a3f0:	ldrb	r3, [r4, #25]
   1a3f4:	cmp	r3, #0
   1a3f8:	beq	1a41c <flatcc_json_printer_table_as_root@@Base+0x64>
   1a3fc:	ldr	r3, [r4, #32]
   1a400:	cmp	r3, #0
   1a404:	bne	1a41c <flatcc_json_printer_table_as_root@@Base+0x64>
   1a408:	ldr	r3, [r4, #20]
   1a40c:	add	r2, r3, #1
   1a410:	str	r2, [r4, #20]
   1a414:	mov	r2, #10
   1a418:	strb	r2, [r3]
   1a41c:	mov	r1, #1
   1a420:	mov	r0, r4
   1a424:	ldr	r3, [r4, #44]	; 0x2c
   1a428:	blx	r3
   1a42c:	ldr	r3, [r4, #36]	; 0x24
   1a430:	cmp	r3, #0
   1a434:	bne	1a3d0 <flatcc_json_printer_table_as_root@@Base+0x18>
   1a438:	ldr	r3, [r4]
   1a43c:	ldr	r0, [r4, #20]
   1a440:	sub	r0, r0, r3
   1a444:	ldr	r3, [r4, #12]
   1a448:	add	r0, r0, r3
   1a44c:	pop	{r4, r5, r6, pc}

0001a450 <flatcc_json_printer_struct_as_nested_root@@Base>:
   1a450:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a454:	mov	r7, r1
   1a458:	mov	r4, r0
   1a45c:	mov	r1, r2
   1a460:	mov	r0, r7
   1a464:	mov	r9, r3
   1a468:	bl	14688 <test_print@@Base+0xfe8>
   1a46c:	subs	r5, r0, #0
   1a470:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a474:	mov	r0, r4
   1a478:	ldr	r6, [r5]
   1a47c:	ldr	r3, [sp, #36]	; 0x24
   1a480:	add	r8, r5, r6
   1a484:	ldr	r2, [r5, r6]
   1a488:	mov	r1, r8
   1a48c:	bl	14efc <test_print@@Base+0x185c>
   1a490:	cmp	r0, #0
   1a494:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a498:	ldr	r3, [r7, #16]
   1a49c:	add	r2, r3, #1
   1a4a0:	cmp	r3, #0
   1a4a4:	str	r2, [r7, #16]
   1a4a8:	beq	1a4c0 <flatcc_json_printer_struct_as_nested_root@@Base+0x70>
   1a4ac:	ldr	r3, [r4, #20]
   1a4b0:	add	r2, r3, #1
   1a4b4:	str	r2, [r4, #20]
   1a4b8:	mov	r2, #44	; 0x2c
   1a4bc:	strb	r2, [r3]
   1a4c0:	mov	r1, r9
   1a4c4:	mov	r0, r4
   1a4c8:	ldr	r2, [sp, #32]
   1a4cc:	bl	14bd4 <test_print@@Base+0x1534>
   1a4d0:	ldr	r3, [r4, #32]
   1a4d4:	mov	r0, r4
   1a4d8:	add	r3, r3, #1
   1a4dc:	str	r3, [r4, #32]
   1a4e0:	ldr	r3, [r4, #20]
   1a4e4:	add	r2, r3, #1
   1a4e8:	str	r2, [r4, #20]
   1a4ec:	mov	r2, #123	; 0x7b
   1a4f0:	strb	r2, [r3]
   1a4f4:	ldr	r1, [r5, r6]
   1a4f8:	ldr	r3, [sp, #40]	; 0x28
   1a4fc:	add	r1, r8, r1
   1a500:	blx	r3
   1a504:	ldrb	r3, [r4, #25]
   1a508:	cmp	r3, #0
   1a50c:	beq	1a538 <flatcc_json_printer_struct_as_nested_root@@Base+0xe8>
   1a510:	ldr	r3, [r4, #20]
   1a514:	mov	r0, r4
   1a518:	add	r2, r3, #1
   1a51c:	str	r2, [r4, #20]
   1a520:	mov	r2, #10
   1a524:	strb	r2, [r3]
   1a528:	ldr	r3, [r4, #32]
   1a52c:	sub	r3, r3, #1
   1a530:	str	r3, [r4, #32]
   1a534:	bl	149d4 <test_print@@Base+0x1334>
   1a538:	ldr	r3, [r4, #20]
   1a53c:	add	r2, r3, #1
   1a540:	str	r2, [r4, #20]
   1a544:	mov	r2, #125	; 0x7d
   1a548:	strb	r2, [r3]
   1a54c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001a550 <flatcc_json_printer_table_as_nested_root@@Base>:
   1a550:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a554:	mov	r5, r1
   1a558:	mov	r4, r0
   1a55c:	mov	r1, r2
   1a560:	mov	r0, r5
   1a564:	mov	r9, r3
   1a568:	bl	14688 <test_print@@Base+0xfe8>
   1a56c:	cmp	r0, #0
   1a570:	ldrd	sl, [sp, #40]	; 0x28
   1a574:	ldr	r8, [sp, #48]	; 0x30
   1a578:	beq	1a5fc <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   1a57c:	mov	r3, fp
   1a580:	ldr	r2, [r0]
   1a584:	add	r7, r0, r2
   1a588:	ldr	r2, [r0, r2]
   1a58c:	mov	r0, r4
   1a590:	add	r6, r7, #4
   1a594:	mov	r1, r6
   1a598:	bl	14efc <test_print@@Base+0x185c>
   1a59c:	cmp	r0, #0
   1a5a0:	beq	1a5fc <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   1a5a4:	ldr	r3, [r5, #16]
   1a5a8:	add	r2, r3, #1
   1a5ac:	cmp	r3, #0
   1a5b0:	str	r2, [r5, #16]
   1a5b4:	beq	1a5cc <flatcc_json_printer_table_as_nested_root@@Base+0x7c>
   1a5b8:	ldr	r3, [r4, #20]
   1a5bc:	add	r2, r3, #1
   1a5c0:	str	r2, [r4, #20]
   1a5c4:	mov	r2, #44	; 0x2c
   1a5c8:	strb	r2, [r3]
   1a5cc:	mov	r2, sl
   1a5d0:	mov	r1, r9
   1a5d4:	mov	r0, r4
   1a5d8:	bl	14bd4 <test_print@@Base+0x1534>
   1a5dc:	ldr	r1, [r7, #4]
   1a5e0:	mov	r3, r8
   1a5e4:	mov	r0, r4
   1a5e8:	ldr	r2, [r5, #12]
   1a5ec:	add	r1, r6, r1
   1a5f0:	add	sp, sp, #4
   1a5f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5f8:	b	14e38 <test_print@@Base+0x1798>
   1a5fc:	add	sp, sp, #4
   1a600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a604 <flatcc_json_printer_init@@Base>:
   1a604:	push	{r4, r5, r6, lr}
   1a608:	mov	r2, #48	; 0x30
   1a60c:	mov	r5, r1
   1a610:	mov	r1, #0
   1a614:	mov	r4, r0
   1a618:	bl	124e0 <memset@plt>
   1a61c:	cmp	r5, #0
   1a620:	movw	r0, #16448	; 0x4040
   1a624:	ldreq	r3, [pc, #80]	; 1a67c <flatcc_json_printer_init@@Base+0x78>
   1a628:	ldreq	r5, [r3]
   1a62c:	ldr	r3, [pc, #76]	; 1a680 <flatcc_json_printer_init@@Base+0x7c>
   1a630:	str	r5, [r4, #40]	; 0x28
   1a634:	str	r3, [r4, #44]	; 0x2c
   1a638:	bl	124a4 <malloc@plt>
   1a63c:	cmp	r0, #0
   1a640:	str	r0, [r4]
   1a644:	beq	1a674 <flatcc_json_printer_init@@Base+0x70>
   1a648:	mov	r3, #1
   1a64c:	str	r0, [r4, #20]
   1a650:	strb	r3, [r4, #24]
   1a654:	movw	r3, #16448	; 0x4040
   1a658:	str	r3, [r4, #4]
   1a65c:	mov	r3, #16384	; 0x4000
   1a660:	add	r0, r0, r3
   1a664:	str	r3, [r4, #8]
   1a668:	str	r0, [r4, #16]
   1a66c:	mov	r0, #0
   1a670:	pop	{r4, r5, r6, pc}
   1a674:	mvn	r0, #0
   1a678:	pop	{r4, r5, r6, pc}
   1a67c:	andeq	ip, r2, ip, lsl #1
   1a680:	andeq	r4, r1, ip, ror sl

0001a684 <flatcc_json_printer_init_buffer@@Base>:
   1a684:	cmp	r2, #63	; 0x3f
   1a688:	push	{r4, r5, r6, lr}
   1a68c:	bhi	1a6a4 <flatcc_json_printer_init_buffer@@Base+0x20>
   1a690:	ldr	r3, [pc, #84]	; 1a6ec <flatcc_json_printer_init_buffer@@Base+0x68>
   1a694:	movw	r2, #1165	; 0x48d
   1a698:	ldr	r1, [pc, #80]	; 1a6f0 <flatcc_json_printer_init_buffer@@Base+0x6c>
   1a69c:	ldr	r0, [pc, #80]	; 1a6f4 <flatcc_json_printer_init_buffer@@Base+0x70>
   1a6a0:	bl	12534 <__assert_fail@plt>
   1a6a4:	mov	r4, r0
   1a6a8:	mov	r6, r1
   1a6ac:	mov	r5, r2
   1a6b0:	mov	r1, #0
   1a6b4:	mov	r2, #32
   1a6b8:	add	r0, r0, #12
   1a6bc:	bl	124e0 <memset@plt>
   1a6c0:	ldr	r3, [pc, #48]	; 1a6f8 <flatcc_json_printer_init_buffer@@Base+0x74>
   1a6c4:	mov	r0, #0
   1a6c8:	str	r6, [r4]
   1a6cc:	str	r5, [r4, #4]
   1a6d0:	sub	r5, r5, #64	; 0x40
   1a6d4:	str	r5, [r4, #8]
   1a6d8:	add	r5, r6, r5
   1a6dc:	str	r6, [r4, #20]
   1a6e0:	str	r5, [r4, #16]
   1a6e4:	str	r3, [r4, #44]	; 0x2c
   1a6e8:	pop	{r4, r5, r6, pc}
   1a6ec:	andeq	fp, r1, ip, asr #17
   1a6f0:	andeq	fp, r1, r4, ror #18
   1a6f4:	andeq	fp, r1, r9, lsr fp
   1a6f8:	andeq	r4, r1, r0, asr #13

0001a6fc <flatcc_json_printer_init_dynamic_buffer@@Base>:
   1a6fc:	cmp	r1, #0
   1a700:	push	{r4, r5, r6, lr}
   1a704:	mov	r5, r0
   1a708:	moveq	r4, #4096	; 0x1000
   1a70c:	beq	1a71c <flatcc_json_printer_init_dynamic_buffer@@Base+0x20>
   1a710:	cmp	r1, #64	; 0x40
   1a714:	movcs	r4, r1
   1a718:	movcc	r4, #64	; 0x40
   1a71c:	mov	r2, #32
   1a720:	mov	r1, #0
   1a724:	add	r0, r5, #12
   1a728:	bl	124e0 <memset@plt>
   1a72c:	mov	r0, r4
   1a730:	bl	124a4 <malloc@plt>
   1a734:	mov	r3, #1
   1a738:	stm	r5, {r0, r4}
   1a73c:	sub	r4, r4, #64	; 0x40
   1a740:	cmp	r0, #0
   1a744:	str	r4, [r5, #8]
   1a748:	add	r4, r0, r4
   1a74c:	strb	r3, [r5, #24]
   1a750:	ldr	r3, [pc, #44]	; 1a784 <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   1a754:	str	r4, [r5, #16]
   1a758:	str	r0, [r5, #20]
   1a75c:	str	r3, [r5, #44]	; 0x2c
   1a760:	bne	1a77c <flatcc_json_printer_init_dynamic_buffer@@Base+0x80>
   1a764:	ldr	r3, [r5, #36]	; 0x24
   1a768:	mvn	r0, #0
   1a76c:	cmp	r3, #0
   1a770:	moveq	r3, #3
   1a774:	streq	r3, [r5, #36]	; 0x24
   1a778:	pop	{r4, r5, r6, pc}
   1a77c:	mov	r0, #0
   1a780:	pop	{r4, r5, r6, pc}
   1a784:	andeq	r4, r1, ip, lsl fp

0001a788 <flatcc_json_printer_get_buffer@@Base>:
   1a788:	push	{r4, r5, r6, lr}
   1a78c:	mov	r5, r1
   1a790:	mov	r1, #0
   1a794:	mov	r4, r0
   1a798:	ldr	r3, [r0, #44]	; 0x2c
   1a79c:	blx	r3
   1a7a0:	cmp	r5, #0
   1a7a4:	ldr	r0, [r4]
   1a7a8:	ldrne	r3, [r4, #20]
   1a7ac:	subne	r3, r3, r0
   1a7b0:	strne	r3, [r5]
   1a7b4:	pop	{r4, r5, r6, pc}

0001a7b8 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   1a7b8:	push	{r4, r5, r6, lr}
   1a7bc:	mov	r5, r0
   1a7c0:	bl	1a788 <flatcc_json_printer_get_buffer@@Base>
   1a7c4:	mov	r4, r0
   1a7c8:	mov	r2, #48	; 0x30
   1a7cc:	mov	r1, #0
   1a7d0:	mov	r0, r5
   1a7d4:	bl	124e0 <memset@plt>
   1a7d8:	mov	r0, r4
   1a7dc:	pop	{r4, r5, r6, pc}

0001a7e0 <flatcc_json_printer_clear@@Base>:
   1a7e0:	push	{r4, lr}
   1a7e4:	mov	r4, r0
   1a7e8:	ldrb	r3, [r0, #24]
   1a7ec:	cmp	r3, #0
   1a7f0:	beq	1a804 <flatcc_json_printer_clear@@Base+0x24>
   1a7f4:	ldr	r0, [r0]
   1a7f8:	cmp	r0, #0
   1a7fc:	beq	1a804 <flatcc_json_printer_clear@@Base+0x24>
   1a800:	bl	12438 <free@plt>
   1a804:	mov	r0, r4
   1a808:	mov	r2, #48	; 0x30
   1a80c:	pop	{r4, lr}
   1a810:	mov	r1, #0
   1a814:	b	124e0 <memset@plt>
   1a818:	cmp	r3, #0
   1a81c:	cmpeq	r2, #0
   1a820:	bne	1a844 <flatcc_json_printer_clear@@Base+0x64>
   1a824:	cmp	r1, #0
   1a828:	movlt	r1, #-2147483648	; 0x80000000
   1a82c:	movlt	r0, #0
   1a830:	blt	1a840 <flatcc_json_printer_clear@@Base+0x60>
   1a834:	cmpeq	r0, #0
   1a838:	mvnne	r1, #-2147483648	; 0x80000000
   1a83c:	mvnne	r0, #0
   1a840:	b	1a928 <flatcc_json_printer_clear@@Base+0x148>
   1a844:	sub	sp, sp, #8
   1a848:	push	{sp, lr}
   1a84c:	cmp	r1, #0
   1a850:	blt	1a870 <flatcc_json_printer_clear@@Base+0x90>
   1a854:	cmp	r3, #0
   1a858:	blt	1a8a4 <flatcc_json_printer_clear@@Base+0xc4>
   1a85c:	bl	1a938 <flatcc_json_printer_clear@@Base+0x158>
   1a860:	ldr	lr, [sp, #4]
   1a864:	add	sp, sp, #8
   1a868:	pop	{r2, r3}
   1a86c:	bx	lr
   1a870:	rsbs	r0, r0, #0
   1a874:	sbc	r1, r1, r1, lsl #1
   1a878:	cmp	r3, #0
   1a87c:	blt	1a8c8 <flatcc_json_printer_clear@@Base+0xe8>
   1a880:	bl	1a938 <flatcc_json_printer_clear@@Base+0x158>
   1a884:	ldr	lr, [sp, #4]
   1a888:	add	sp, sp, #8
   1a88c:	pop	{r2, r3}
   1a890:	rsbs	r0, r0, #0
   1a894:	sbc	r1, r1, r1, lsl #1
   1a898:	rsbs	r2, r2, #0
   1a89c:	sbc	r3, r3, r3, lsl #1
   1a8a0:	bx	lr
   1a8a4:	rsbs	r2, r2, #0
   1a8a8:	sbc	r3, r3, r3, lsl #1
   1a8ac:	bl	1a938 <flatcc_json_printer_clear@@Base+0x158>
   1a8b0:	ldr	lr, [sp, #4]
   1a8b4:	add	sp, sp, #8
   1a8b8:	pop	{r2, r3}
   1a8bc:	rsbs	r0, r0, #0
   1a8c0:	sbc	r1, r1, r1, lsl #1
   1a8c4:	bx	lr
   1a8c8:	rsbs	r2, r2, #0
   1a8cc:	sbc	r3, r3, r3, lsl #1
   1a8d0:	bl	1a938 <flatcc_json_printer_clear@@Base+0x158>
   1a8d4:	ldr	lr, [sp, #4]
   1a8d8:	add	sp, sp, #8
   1a8dc:	pop	{r2, r3}
   1a8e0:	rsbs	r2, r2, #0
   1a8e4:	sbc	r3, r3, r3, lsl #1
   1a8e8:	bx	lr
   1a8ec:	cmp	r3, #0
   1a8f0:	cmpeq	r2, #0
   1a8f4:	bne	1a90c <flatcc_json_printer_clear@@Base+0x12c>
   1a8f8:	cmp	r1, #0
   1a8fc:	cmpeq	r0, #0
   1a900:	mvnne	r1, #0
   1a904:	mvnne	r0, #0
   1a908:	b	1a928 <flatcc_json_printer_clear@@Base+0x148>
   1a90c:	sub	sp, sp, #8
   1a910:	push	{sp, lr}
   1a914:	bl	1a938 <flatcc_json_printer_clear@@Base+0x158>
   1a918:	ldr	lr, [sp, #4]
   1a91c:	add	sp, sp, #8
   1a920:	pop	{r2, r3}
   1a924:	bx	lr
   1a928:	push	{r1, lr}
   1a92c:	mov	r0, #8
   1a930:	bl	12408 <raise@plt>
   1a934:	pop	{r1, pc}
   1a938:	cmp	r1, r3
   1a93c:	cmpeq	r0, r2
   1a940:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a944:	mov	r4, r0
   1a948:	movcc	r0, #0
   1a94c:	mov	r5, r1
   1a950:	ldr	lr, [sp, #36]	; 0x24
   1a954:	movcc	r1, r0
   1a958:	bcc	1aa54 <flatcc_json_printer_clear@@Base+0x274>
   1a95c:	cmp	r3, #0
   1a960:	clzeq	ip, r2
   1a964:	clzne	ip, r3
   1a968:	addeq	ip, ip, #32
   1a96c:	cmp	r5, #0
   1a970:	clzeq	r1, r4
   1a974:	addeq	r1, r1, #32
   1a978:	clzne	r1, r5
   1a97c:	sub	ip, ip, r1
   1a980:	sub	sl, ip, #32
   1a984:	lsl	r9, r3, ip
   1a988:	rsb	fp, ip, #32
   1a98c:	orr	r9, r9, r2, lsl sl
   1a990:	orr	r9, r9, r2, lsr fp
   1a994:	lsl	r8, r2, ip
   1a998:	cmp	r5, r9
   1a99c:	cmpeq	r4, r8
   1a9a0:	movcc	r0, #0
   1a9a4:	movcc	r1, r0
   1a9a8:	bcc	1a9c4 <flatcc_json_printer_clear@@Base+0x1e4>
   1a9ac:	mov	r0, #1
   1a9b0:	subs	r4, r4, r8
   1a9b4:	lsl	r1, r0, sl
   1a9b8:	orr	r1, r1, r0, lsr fp
   1a9bc:	lsl	r0, r0, ip
   1a9c0:	sbc	r5, r5, r9
   1a9c4:	cmp	ip, #0
   1a9c8:	beq	1aa54 <flatcc_json_printer_clear@@Base+0x274>
   1a9cc:	lsr	r6, r8, #1
   1a9d0:	orr	r6, r6, r9, lsl #31
   1a9d4:	lsr	r7, r9, #1
   1a9d8:	mov	r2, ip
   1a9dc:	b	1aa00 <flatcc_json_printer_clear@@Base+0x220>
   1a9e0:	subs	r3, r4, r6
   1a9e4:	sbc	r8, r5, r7
   1a9e8:	adds	r3, r3, r3
   1a9ec:	adc	r8, r8, r8
   1a9f0:	adds	r4, r3, #1
   1a9f4:	adc	r5, r8, #0
   1a9f8:	subs	r2, r2, #1
   1a9fc:	beq	1aa1c <flatcc_json_printer_clear@@Base+0x23c>
   1aa00:	cmp	r5, r7
   1aa04:	cmpeq	r4, r6
   1aa08:	bcs	1a9e0 <flatcc_json_printer_clear@@Base+0x200>
   1aa0c:	adds	r4, r4, r4
   1aa10:	adc	r5, r5, r5
   1aa14:	subs	r2, r2, #1
   1aa18:	bne	1aa00 <flatcc_json_printer_clear@@Base+0x220>
   1aa1c:	lsr	r3, r4, ip
   1aa20:	orr	r3, r3, r5, lsl fp
   1aa24:	lsr	r2, r5, ip
   1aa28:	orr	r3, r3, r5, lsr sl
   1aa2c:	adds	r0, r0, r4
   1aa30:	mov	r4, r3
   1aa34:	lsl	r3, r2, ip
   1aa38:	orr	r3, r3, r4, lsl sl
   1aa3c:	lsl	ip, r4, ip
   1aa40:	orr	r3, r3, r4, lsr fp
   1aa44:	adc	r1, r1, r5
   1aa48:	subs	r0, r0, ip
   1aa4c:	mov	r5, r2
   1aa50:	sbc	r1, r1, r3
   1aa54:	cmp	lr, #0
   1aa58:	strdne	r4, [lr]
   1aa5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001aa60 <__libc_csu_init@@Base>:
   1aa60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aa64:	mov	r7, r0
   1aa68:	ldr	r6, [pc, #72]	; 1aab8 <__libc_csu_init@@Base+0x58>
   1aa6c:	ldr	r5, [pc, #72]	; 1aabc <__libc_csu_init@@Base+0x5c>
   1aa70:	add	r6, pc, r6
   1aa74:	add	r5, pc, r5
   1aa78:	sub	r6, r6, r5
   1aa7c:	mov	r8, r1
   1aa80:	mov	r9, r2
   1aa84:	bl	123e8 <raise@plt-0x20>
   1aa88:	asrs	r6, r6, #2
   1aa8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aa90:	mov	r4, #0
   1aa94:	add	r4, r4, #1
   1aa98:	ldr	r3, [r5], #4
   1aa9c:	mov	r2, r9
   1aaa0:	mov	r1, r8
   1aaa4:	mov	r0, r7
   1aaa8:	blx	r3
   1aaac:	cmp	r6, r4
   1aab0:	bne	1aa94 <__libc_csu_init@@Base+0x34>
   1aab4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aab8:	muleq	r1, ip, r4
   1aabc:	muleq	r1, r4, r4

0001aac0 <__libc_csu_fini@@Base>:
   1aac0:	bx	lr

Disassembly of section .fini:

0001aac4 <.fini>:
   1aac4:	push	{r3, lr}
   1aac8:	pop	{r3, pc}
