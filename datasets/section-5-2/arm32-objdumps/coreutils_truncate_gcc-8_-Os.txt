
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c38 <.init>:
   10c38:	push	{r3, lr}
   10c3c:	bl	11868 <__assert_fail@plt+0x9ac>
   10c40:	pop	{r3, pc}

Disassembly of section .plt:

00010c44 <calloc@plt-0x14>:
   10c44:	push	{lr}		; (str lr, [sp, #-4]!)
   10c48:	ldr	lr, [pc, #4]	; 10c54 <calloc@plt-0x4>
   10c4c:	add	lr, pc, lr
   10c50:	ldr	pc, [lr, #8]!
   10c54:	andeq	r5, r1, ip, lsr #7

00010c58 <calloc@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #940]!	; 0x3ac

00010c64 <fputs_unlocked@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #932]!	; 0x3a4

00010c70 <raise@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #924]!	; 0x39c

00010c7c <strcmp@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #916]!	; 0x394

00010c88 <fflush@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #908]!	; 0x38c

00010c94 <free@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #900]!	; 0x384

00010ca0 <_exit@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #892]!	; 0x37c

00010cac <memcpy@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #884]!	; 0x374

00010cb8 <mbsinit@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #876]!	; 0x36c

00010cc4 <ftruncate64@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #868]!	; 0x364

00010cd0 <memcmp@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #860]!	; 0x35c

00010cdc <fputc_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #852]!	; 0x354

00010ce8 <dcgettext@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #844]!	; 0x34c

00010cf4 <realloc@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #836]!	; 0x344

00010d00 <textdomain@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #828]!	; 0x33c

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #820]!	; 0x334

00010d18 <__fxstat64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #812]!	; 0x32c

00010d24 <lseek64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #804]!	; 0x324

00010d30 <__ctype_get_mb_cur_max@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #796]!	; 0x31c

00010d3c <__fpending@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #788]!	; 0x314

00010d48 <ferror_unlocked@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #780]!	; 0x30c

00010d54 <mbrtowc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #772]!	; 0x304

00010d60 <error@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #764]!	; 0x2fc

00010d6c <open64@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #756]!	; 0x2f4

00010d78 <malloc@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #748]!	; 0x2ec

00010d84 <__libc_start_main@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d90 <__freading@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #732]!	; 0x2dc

00010d9c <__gmon_start__@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #724]!	; 0x2d4

00010da8 <getopt_long@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #716]!	; 0x2cc

00010db4 <__ctype_b_loc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #708]!	; 0x2c4

00010dc0 <exit@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #700]!	; 0x2bc

00010dcc <strlen@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #692]!	; 0x2b4

00010dd8 <strchr@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #684]!	; 0x2ac

00010de4 <__errno_location@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #676]!	; 0x2a4

00010df0 <__cxa_atexit@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #668]!	; 0x29c

00010dfc <memset@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #660]!	; 0x294

00010e08 <__printf_chk@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #652]!	; 0x28c

00010e14 <fileno@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #644]!	; 0x284

00010e20 <__fprintf_chk@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #636]!	; 0x27c

00010e2c <strtoimax@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #628]!	; 0x274

00010e38 <fclose@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #620]!	; 0x26c

00010e44 <fseeko64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #612]!	; 0x264

00010e50 <setlocale@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #604]!	; 0x25c

00010e5c <strrchr@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #596]!	; 0x254

00010e68 <nl_langinfo@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #588]!	; 0x24c

00010e74 <bindtextdomain@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #580]!	; 0x244

00010e80 <__xstat64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #572]!	; 0x23c

00010e8c <fputs@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #564]!	; 0x234

00010e98 <strncmp@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #556]!	; 0x22c

00010ea4 <abort@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #548]!	; 0x224

00010eb0 <close@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #540]!	; 0x21c

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #532]!	; 0x214

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	push	{r4, lr}
   10ecc:	bl	10de4 <__errno_location@plt>
   10ed0:	mov	r3, #12
   10ed4:	str	r3, [r0]
   10ed8:	mov	r0, #0
   10edc:	pop	{r4, pc}
   10ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ee4:	mov	sl, r0
   10ee8:	sub	sp, sp, #156	; 0x9c
   10eec:	mov	r7, r1
   10ef0:	mov	r8, #0
   10ef4:	mov	r9, r8
   10ef8:	mov	fp, r8
   10efc:	ldr	r0, [r1]
   10f00:	mov	r4, r8
   10f04:	bl	11cd8 <__assert_fail@plt+0xe1c>
   10f08:	ldr	r1, [pc, #2196]	; 117a4 <__assert_fail@plt+0x8e8>
   10f0c:	mov	r0, #6
   10f10:	bl	10e50 <setlocale@plt>
   10f14:	ldr	r1, [pc, #2188]	; 117a8 <__assert_fail@plt+0x8ec>
   10f18:	ldr	r0, [pc, #2188]	; 117ac <__assert_fail@plt+0x8f0>
   10f1c:	bl	10e74 <bindtextdomain@plt>
   10f20:	ldr	r0, [pc, #2180]	; 117ac <__assert_fail@plt+0x8f0>
   10f24:	bl	10d00 <textdomain@plt>
   10f28:	ldr	r0, [pc, #2176]	; 117b0 <__assert_fail@plt+0x8f4>
   10f2c:	ldr	r5, [pc, #2176]	; 117b4 <__assert_fail@plt+0x8f8>
   10f30:	bl	14840 <__assert_fail@plt+0x3984>
   10f34:	mov	r6, #0
   10f38:	ldr	r3, [pc, #2168]	; 117b8 <__assert_fail@plt+0x8fc>
   10f3c:	mov	r1, r7
   10f40:	mov	r0, sl
   10f44:	ldr	r2, [pc, #2160]	; 117bc <__assert_fail@plt+0x900>
   10f48:	str	r6, [sp]
   10f4c:	bl	10da8 <getopt_long@plt>
   10f50:	cmn	r0, #1
   10f54:	bne	10fd0 <__assert_fail@plt+0x114>
   10f58:	ldr	r3, [pc, #2144]	; 117c0 <__assert_fail@plt+0x904>
   10f5c:	ldr	r1, [pc, #2144]	; 117c4 <__assert_fail@plt+0x908>
   10f60:	ldr	r2, [r3]
   10f64:	lsl	r3, r2, #2
   10f68:	sub	r2, sl, r2
   10f6c:	ldr	sl, [r1, #4]
   10f70:	str	r3, [sp, #32]
   10f74:	cmp	sl, r6
   10f78:	bne	111cc <__assert_fail@plt+0x310>
   10f7c:	cmp	r4, r6
   10f80:	bne	1172c <__assert_fail@plt+0x870>
   10f84:	mov	r2, #5
   10f88:	ldr	r1, [pc, #2104]	; 117c8 <__assert_fail@plt+0x90c>
   10f8c:	mov	r0, r4
   10f90:	bl	10ce8 <dcgettext@plt>
   10f94:	mov	r5, r0
   10f98:	ldr	r1, [pc, #2092]	; 117cc <__assert_fail@plt+0x910>
   10f9c:	mov	r0, r4
   10fa0:	bl	132d0 <__assert_fail@plt+0x2414>
   10fa4:	mov	r6, r0
   10fa8:	ldr	r1, [pc, #2080]	; 117d0 <__assert_fail@plt+0x914>
   10fac:	mov	r0, #1
   10fb0:	bl	132d0 <__assert_fail@plt+0x2414>
   10fb4:	mov	r3, r6
   10fb8:	mov	r2, r5
   10fbc:	str	r0, [sp]
   10fc0:	mov	r1, r4
   10fc4:	mov	r0, r1
   10fc8:	bl	10d60 <error@plt>
   10fcc:	b	10ff0 <__assert_fail@plt+0x134>
   10fd0:	cmp	r0, #99	; 0x63
   10fd4:	beq	110b8 <__assert_fail@plt+0x1fc>
   10fd8:	bgt	10ff8 <__assert_fail@plt+0x13c>
   10fdc:	cmn	r0, #3
   10fe0:	beq	11198 <__assert_fail@plt+0x2dc>
   10fe4:	cmn	r0, #2
   10fe8:	moveq	r0, r6
   10fec:	beq	10ff4 <__assert_fail@plt+0x138>
   10ff0:	mov	r0, #1
   10ff4:	bl	1191c <__assert_fail@plt+0xa60>
   10ff8:	cmp	r0, #114	; 0x72
   10ffc:	beq	110c8 <__assert_fail@plt+0x20c>
   11000:	cmp	r0, #115	; 0x73
   11004:	beq	11020 <__assert_fail@plt+0x164>
   11008:	cmp	r0, #111	; 0x6f
   1100c:	bne	10ff0 <__assert_fail@plt+0x134>
   11010:	ldr	r3, [pc, #1964]	; 117c4 <__assert_fail@plt+0x908>
   11014:	mov	r2, #1
   11018:	strb	r2, [r3, #1]
   1101c:	b	10f34 <__assert_fail@plt+0x78>
   11020:	bl	10db4 <__ctype_b_loc@plt>
   11024:	ldr	r2, [r0]
   11028:	ldr	r3, [r5]
   1102c:	ldrb	r1, [r3]
   11030:	lsl	r0, r1, #1
   11034:	ldrh	r0, [r2, r0]
   11038:	tst	r0, #8192	; 0x2000
   1103c:	bne	110d8 <__assert_fail@plt+0x21c>
   11040:	cmp	r1, #47	; 0x2f
   11044:	addeq	r3, r3, #1
   11048:	moveq	r8, #4
   1104c:	streq	r3, [r5]
   11050:	beq	11068 <__assert_fail@plt+0x1ac>
   11054:	bhi	110e4 <__assert_fail@plt+0x228>
   11058:	cmp	r1, #37	; 0x25
   1105c:	addeq	r3, r3, #1
   11060:	moveq	r8, #5
   11064:	streq	r3, [r5]
   11068:	ldr	r6, [r5]
   1106c:	ldrb	r4, [r6]
   11070:	lsl	r3, r4, #1
   11074:	ldrh	r3, [r2, r3]
   11078:	tst	r3, #8192	; 0x2000
   1107c:	bne	1110c <__assert_fail@plt+0x250>
   11080:	sub	r4, r4, #43	; 0x2b
   11084:	ands	r4, r4, #253	; 0xfd
   11088:	bne	1111c <__assert_fail@plt+0x260>
   1108c:	cmp	r8, #0
   11090:	beq	11118 <__assert_fail@plt+0x25c>
   11094:	ldr	r1, [pc, #1848]	; 117d4 <__assert_fail@plt+0x918>
   11098:	mov	r2, #5
   1109c:	mov	r0, #0
   110a0:	bl	10ce8 <dcgettext@plt>
   110a4:	mov	r1, #0
   110a8:	mov	r2, r0
   110ac:	mov	r0, r1
   110b0:	bl	10d60 <error@plt>
   110b4:	b	10ff0 <__assert_fail@plt+0x134>
   110b8:	ldr	r3, [pc, #1796]	; 117c4 <__assert_fail@plt+0x908>
   110bc:	mov	r2, #1
   110c0:	strb	r2, [r3]
   110c4:	b	10f34 <__assert_fail@plt+0x78>
   110c8:	ldr	r3, [pc, #1780]	; 117c4 <__assert_fail@plt+0x908>
   110cc:	ldr	r2, [r5]
   110d0:	str	r2, [r3, #4]
   110d4:	b	10f34 <__assert_fail@plt+0x78>
   110d8:	add	r3, r3, #1
   110dc:	str	r3, [r5]
   110e0:	b	11028 <__assert_fail@plt+0x16c>
   110e4:	cmp	r1, #60	; 0x3c
   110e8:	addeq	r3, r3, #1
   110ec:	moveq	r8, #3
   110f0:	streq	r3, [r5]
   110f4:	beq	11068 <__assert_fail@plt+0x1ac>
   110f8:	cmp	r1, #62	; 0x3e
   110fc:	addeq	r3, r3, #1
   11100:	moveq	r8, #2
   11104:	streq	r3, [r5]
   11108:	b	11068 <__assert_fail@plt+0x1ac>
   1110c:	add	r6, r6, #1
   11110:	str	r6, [r5]
   11114:	b	11068 <__assert_fail@plt+0x1ac>
   11118:	mov	r8, #1
   1111c:	mov	r2, #5
   11120:	ldr	r1, [pc, #1712]	; 117d8 <__assert_fail@plt+0x91c>
   11124:	mov	r0, #0
   11128:	bl	10ce8 <dcgettext@plt>
   1112c:	ldr	r3, [pc, #1704]	; 117dc <__assert_fail@plt+0x920>
   11130:	mov	r4, #0
   11134:	mvn	r2, #0
   11138:	str	r3, [sp, #8]
   1113c:	mvn	r3, #-2147483648	; 0x80000000
   11140:	str	r0, [sp, #12]
   11144:	mov	r0, r6
   11148:	strd	r2, [sp]
   1114c:	mov	r2, #0
   11150:	mov	r3, #-2147483648	; 0x80000000
   11154:	str	r4, [sp, #16]
   11158:	bl	13be8 <__assert_fail@plt+0x2d2c>
   1115c:	orr	r2, r0, r1
   11160:	sub	r3, r8, #4
   11164:	cmp	r3, #1
   11168:	cmpls	r2, r4
   1116c:	mov	r9, r0
   11170:	mov	fp, r1
   11174:	bne	111c4 <__assert_fail@plt+0x308>
   11178:	mov	r2, #5
   1117c:	ldr	r1, [pc, #1628]	; 117e0 <__assert_fail@plt+0x924>
   11180:	mov	r0, r4
   11184:	bl	10ce8 <dcgettext@plt>
   11188:	mov	r2, r0
   1118c:	mov	r1, r4
   11190:	mov	r0, #1
   11194:	bl	10d60 <error@plt>
   11198:	ldr	r3, [pc, #1604]	; 117e4 <__assert_fail@plt+0x928>
   1119c:	ldr	r0, [pc, #1604]	; 117e8 <__assert_fail@plt+0x92c>
   111a0:	ldr	r2, [pc, #1604]	; 117ec <__assert_fail@plt+0x930>
   111a4:	stm	sp, {r3, r6}
   111a8:	ldr	r3, [pc, #1600]	; 117f0 <__assert_fail@plt+0x934>
   111ac:	ldr	r1, [pc, #1600]	; 117f4 <__assert_fail@plt+0x938>
   111b0:	ldr	r0, [r0]
   111b4:	ldr	r3, [r3]
   111b8:	bl	13724 <__assert_fail@plt+0x2868>
   111bc:	mov	r0, r6
   111c0:	bl	10dc0 <exit@plt>
   111c4:	mov	r4, #1
   111c8:	b	10f34 <__assert_fail@plt+0x78>
   111cc:	cmp	r8, #0
   111d0:	moveq	r5, r4
   111d4:	movne	r5, #0
   111d8:	cmp	r5, #0
   111dc:	beq	11224 <__assert_fail@plt+0x368>
   111e0:	mov	r2, #5
   111e4:	ldr	r1, [pc, #1548]	; 117f8 <__assert_fail@plt+0x93c>
   111e8:	mov	r0, r6
   111ec:	bl	10ce8 <dcgettext@plt>
   111f0:	mov	r4, r0
   111f4:	ldr	r1, [pc, #1488]	; 117cc <__assert_fail@plt+0x910>
   111f8:	mov	r0, r6
   111fc:	bl	132d0 <__assert_fail@plt+0x2414>
   11200:	ldr	r1, [pc, #1480]	; 117d0 <__assert_fail@plt+0x914>
   11204:	mov	r5, r0
   11208:	mov	r0, #1
   1120c:	bl	132d0 <__assert_fail@plt+0x2414>
   11210:	mov	r3, r5
   11214:	mov	r2, r4
   11218:	str	r0, [sp]
   1121c:	mov	r1, r6
   11220:	b	10fc4 <__assert_fail@plt+0x108>
   11224:	ldrb	r6, [r1, #1]
   11228:	eor	r6, r6, #1
   1122c:	orrs	r6, r4, r6
   11230:	bne	1174c <__assert_fail@plt+0x890>
   11234:	mov	r2, #5
   11238:	ldr	r1, [pc, #1468]	; 117fc <__assert_fail@plt+0x940>
   1123c:	mov	r0, r6
   11240:	bl	10ce8 <dcgettext@plt>
   11244:	mov	r4, r0
   11248:	ldr	r1, [pc, #1456]	; 11800 <__assert_fail@plt+0x944>
   1124c:	mov	r0, r6
   11250:	bl	132d0 <__assert_fail@plt+0x2414>
   11254:	mov	r5, r0
   11258:	ldr	r1, [pc, #1388]	; 117cc <__assert_fail@plt+0x910>
   1125c:	b	11208 <__assert_fail@plt+0x34c>
   11260:	ldr	r2, [sp, #64]	; 0x40
   11264:	and	r2, r2, #53248	; 0xd000
   11268:	cmp	r2, #32768	; 0x8000
   1126c:	bne	112a8 <__assert_fail@plt+0x3ec>
   11270:	ldrd	r2, [sp, #96]	; 0x60
   11274:	cmp	r2, #0
   11278:	sbcs	r1, r3, #0
   1127c:	bge	11308 <__assert_fail@plt+0x44c>
   11280:	bl	10de4 <__errno_location@plt>
   11284:	ldr	r1, [pc, #1400]	; 11804 <__assert_fail@plt+0x948>
   11288:	mov	r2, #5
   1128c:	ldr	r4, [r0]
   11290:	mov	r0, #0
   11294:	bl	10ce8 <dcgettext@plt>
   11298:	ldr	r3, [pc, #1316]	; 117c4 <__assert_fail@plt+0x908>
   1129c:	mov	r5, r0
   112a0:	ldr	r1, [r3, #4]
   112a4:	b	11788 <__assert_fail@plt+0x8cc>
   112a8:	mov	r0, sl
   112ac:	bl	10d6c <open64@plt>
   112b0:	mov	r6, r0
   112b4:	bl	10de4 <__errno_location@plt>
   112b8:	cmp	r6, #0
   112bc:	mov	sl, r0
   112c0:	blt	11280 <__assert_fail@plt+0x3c4>
   112c4:	mov	r3, #2
   112c8:	mov	r2, #0
   112cc:	mov	r0, r6
   112d0:	str	r3, [sp]
   112d4:	mov	r3, #0
   112d8:	bl	10d24 <lseek64@plt>
   112dc:	mov	r2, r0
   112e0:	mov	r3, r1
   112e4:	ldr	r5, [sl]
   112e8:	mov	r0, r6
   112ec:	strd	r2, [sp, #24]
   112f0:	bl	10eb0 <close@plt>
   112f4:	ldrd	r2, [sp, #24]
   112f8:	cmp	r2, #0
   112fc:	sbcs	r1, r3, #0
   11300:	strlt	r5, [sl]
   11304:	blt	11280 <__assert_fail@plt+0x3c4>
   11308:	cmp	r4, #0
   1130c:	mvneq	r0, #0
   11310:	mvneq	r1, #0
   11314:	strdne	r2, [sp, #24]
   11318:	movne	r2, r9
   1131c:	movne	r3, fp
   11320:	mov	r9, r2
   11324:	mov	fp, r3
   11328:	strdeq	r0, [sp, #24]
   1132c:	ldr	r3, [pc, #1168]	; 117c4 <__assert_fail@plt+0x908>
   11330:	movw	r2, #2049	; 0x801
   11334:	ldrb	r1, [r3]
   11338:	movw	r3, #2113	; 0x841
   1133c:	cmp	r1, #0
   11340:	moveq	r2, r3
   11344:	ldr	r3, [sp, #32]
   11348:	str	r2, [sp, #44]	; 0x2c
   1134c:	sub	r5, r3, #4
   11350:	add	r3, r7, r5
   11354:	str	r3, [sp, #40]	; 0x28
   11358:	mov	r3, #0
   1135c:	str	r3, [sp, #32]
   11360:	ldr	r3, [sp, #40]	; 0x28
   11364:	ldr	sl, [r3, #4]!
   11368:	cmp	sl, #0
   1136c:	str	r3, [sp, #40]	; 0x28
   11370:	bne	11380 <__assert_fail@plt+0x4c4>
   11374:	ldr	r0, [sp, #32]
   11378:	add	sp, sp, #156	; 0x9c
   1137c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11380:	movw	r2, #438	; 0x1b6
   11384:	mov	r0, sl
   11388:	ldr	r1, [sp, #44]	; 0x2c
   1138c:	bl	10d6c <open64@plt>
   11390:	subs	r3, r0, #0
   11394:	str	r3, [sp, #36]	; 0x24
   11398:	ldr	r3, [pc, #1060]	; 117c4 <__assert_fail@plt+0x908>
   1139c:	bge	113f8 <__assert_fail@plt+0x53c>
   113a0:	ldrb	r5, [r3]
   113a4:	bl	10de4 <__errno_location@plt>
   113a8:	ldr	r4, [r0]
   113ac:	cmp	r5, #0
   113b0:	beq	113bc <__assert_fail@plt+0x500>
   113b4:	cmp	r4, #2
   113b8:	beq	11360 <__assert_fail@plt+0x4a4>
   113bc:	ldr	r1, [pc, #1092]	; 11808 <__assert_fail@plt+0x94c>
   113c0:	mov	r2, #5
   113c4:	mov	r0, #0
   113c8:	bl	10ce8 <dcgettext@plt>
   113cc:	mov	r5, r0
   113d0:	mov	r1, sl
   113d4:	mov	r0, #4
   113d8:	bl	130f4 <__assert_fail@plt+0x2238>
   113dc:	mov	r3, r0
   113e0:	mov	r2, r5
   113e4:	mov	r1, r4
   113e8:	mov	r0, #0
   113ec:	bl	10d60 <error@plt>
   113f0:	mov	r3, #1
   113f4:	b	1135c <__assert_fail@plt+0x4a0>
   113f8:	ldrb	r4, [r3, #1]
   113fc:	cmp	r4, #0
   11400:	bne	1141c <__assert_fail@plt+0x560>
   11404:	ldr	r3, [sp, #28]
   11408:	cmp	r8, #0
   1140c:	moveq	r3, #0
   11410:	lsrne	r3, r3, #31
   11414:	cmp	r3, #0
   11418:	beq	11564 <__assert_fail@plt+0x6a8>
   1141c:	add	r1, sp, #48	; 0x30
   11420:	ldr	r0, [sp, #36]	; 0x24
   11424:	bl	14868 <__assert_fail@plt+0x39ac>
   11428:	subs	ip, r0, #0
   1142c:	beq	114a0 <__assert_fail@plt+0x5e4>
   11430:	bl	10de4 <__errno_location@plt>
   11434:	ldr	r1, [pc, #976]	; 1180c <__assert_fail@plt+0x950>
   11438:	mov	r2, #5
   1143c:	ldr	r4, [r0]
   11440:	mov	r0, #0
   11444:	bl	10ce8 <dcgettext@plt>
   11448:	mov	r5, r0
   1144c:	mov	r1, sl
   11450:	mov	r0, #4
   11454:	bl	130f4 <__assert_fail@plt+0x2238>
   11458:	mov	r3, r0
   1145c:	mov	r2, r5
   11460:	mov	r1, r4
   11464:	mov	r0, #0
   11468:	bl	10d60 <error@plt>
   1146c:	mov	r4, #0
   11470:	ldr	r0, [sp, #36]	; 0x24
   11474:	bl	10eb0 <close@plt>
   11478:	cmp	r0, #0
   1147c:	ldreq	r3, [sp, #32]
   11480:	eoreq	r4, r4, #1
   11484:	orreq	r3, r3, r4
   11488:	beq	1135c <__assert_fail@plt+0x4a0>
   1148c:	bl	10de4 <__errno_location@plt>
   11490:	mov	r2, #5
   11494:	ldr	r1, [pc, #884]	; 11810 <__assert_fail@plt+0x954>
   11498:	ldr	r4, [r0]
   1149c:	b	113c4 <__assert_fail@plt+0x508>
   114a0:	cmp	r4, #0
   114a4:	beq	11564 <__assert_fail@plt+0x6a8>
   114a8:	ldr	r6, [sp, #104]	; 0x68
   114ac:	sub	r3, r6, #1
   114b0:	cmp	r3, #536870912	; 0x20000000
   114b4:	movcs	r6, #512	; 0x200
   114b8:	cmp	fp, r9, asr #31
   114bc:	mov	r4, r6
   114c0:	asr	r5, r6, #31
   114c4:	smulleq	r2, r3, r9, r6
   114c8:	moveq	r0, r2
   114cc:	moveq	lr, r3
   114d0:	beq	11514 <__assert_fail@plt+0x658>
   114d4:	cmp	fp, #0
   114d8:	umull	r0, r1, r9, r6
   114dc:	umull	r2, r3, r6, fp
   114e0:	bge	114ec <__assert_fail@plt+0x630>
   114e4:	subs	r2, r2, ip
   114e8:	sbc	r3, r3, r6
   114ec:	adds	lr, r2, r1
   114f0:	mov	r7, #0
   114f4:	adc	r7, r3, r7
   114f8:	cmp	r7, lr, asr #31
   114fc:	beq	11514 <__assert_fail@plt+0x658>
   11500:	mul	lr, r9, r5
   11504:	mov	ip, #1
   11508:	umull	r0, r1, r9, r4
   1150c:	mla	lr, fp, r4, lr
   11510:	add	lr, lr, r1
   11514:	cmp	ip, #0
   11518:	mov	r4, r0
   1151c:	mov	r5, lr
   11520:	beq	1156c <__assert_fail@plt+0x6b0>
   11524:	mov	r2, #5
   11528:	ldr	r1, [pc, #740]	; 11814 <__assert_fail@plt+0x958>
   1152c:	mov	r0, #0
   11530:	bl	10ce8 <dcgettext@plt>
   11534:	mov	r4, r0
   11538:	mov	r1, sl
   1153c:	mov	r0, #4
   11540:	bl	130f4 <__assert_fail@plt+0x2238>
   11544:	mov	r1, #0
   11548:	mov	r2, r4
   1154c:	stm	sp, {r9, fp}
   11550:	str	r6, [sp, #8]
   11554:	str	r0, [sp, #12]
   11558:	mov	r0, r1
   1155c:	bl	10d60 <error@plt>
   11560:	b	1146c <__assert_fail@plt+0x5b0>
   11564:	mov	r4, r9
   11568:	mov	r5, fp
   1156c:	cmp	r8, #0
   11570:	beq	11688 <__assert_fail@plt+0x7cc>
   11574:	ldrd	r0, [sp, #24]
   11578:	mvn	r3, #0
   1157c:	mvn	r2, #0
   11580:	cmp	r1, r3
   11584:	cmpeq	r0, r2
   11588:	ldrdne	r6, [sp, #24]
   1158c:	bne	115b8 <__assert_fail@plt+0x6fc>
   11590:	ldr	r3, [sp, #64]	; 0x40
   11594:	and	r3, r3, #53248	; 0xd000
   11598:	cmp	r3, #32768	; 0x8000
   1159c:	bne	11630 <__assert_fail@plt+0x774>
   115a0:	ldrd	r6, [sp, #96]	; 0x60
   115a4:	cmp	r6, #0
   115a8:	sbcs	r3, r7, #0
   115ac:	movlt	r2, #5
   115b0:	ldrlt	r1, [pc, #608]	; 11818 <__assert_fail@plt+0x95c>
   115b4:	blt	11704 <__assert_fail@plt+0x848>
   115b8:	cmp	r8, #2
   115bc:	bne	11670 <__assert_fail@plt+0x7b4>
   115c0:	cmp	r6, r4
   115c4:	sbcs	r3, r7, r5
   115c8:	movlt	r6, r4
   115cc:	movlt	r7, r5
   115d0:	mov	r2, r6
   115d4:	mov	r3, r7
   115d8:	ldr	r0, [sp, #36]	; 0x24
   115dc:	bl	10cc4 <ftruncate64@plt>
   115e0:	cmp	r0, #0
   115e4:	moveq	r4, #1
   115e8:	beq	11470 <__assert_fail@plt+0x5b4>
   115ec:	bl	10de4 <__errno_location@plt>
   115f0:	ldr	r4, [r0]
   115f4:	mov	r2, #5
   115f8:	mov	r0, #0
   115fc:	ldr	r1, [pc, #536]	; 1181c <__assert_fail@plt+0x960>
   11600:	bl	10ce8 <dcgettext@plt>
   11604:	mov	r5, r0
   11608:	mov	r1, sl
   1160c:	mov	r0, #4
   11610:	bl	130f4 <__assert_fail@plt+0x2238>
   11614:	mov	r3, r0
   11618:	mov	r2, r5
   1161c:	strd	r6, [sp]
   11620:	mov	r1, r4
   11624:	mov	r0, #0
   11628:	bl	10d60 <error@plt>
   1162c:	b	1146c <__assert_fail@plt+0x5b0>
   11630:	mov	r3, #2
   11634:	mov	r2, #0
   11638:	ldr	r0, [sp, #36]	; 0x24
   1163c:	str	r3, [sp]
   11640:	mov	r3, #0
   11644:	bl	10d24 <lseek64@plt>
   11648:	cmp	r0, #0
   1164c:	mov	r6, r0
   11650:	sbcs	r3, r1, #0
   11654:	mov	r7, r1
   11658:	bge	115b8 <__assert_fail@plt+0x6fc>
   1165c:	bl	10de4 <__errno_location@plt>
   11660:	mov	r2, #5
   11664:	ldr	r1, [pc, #408]	; 11804 <__assert_fail@plt+0x948>
   11668:	ldr	r4, [r0]
   1166c:	b	11440 <__assert_fail@plt+0x584>
   11670:	cmp	r8, #3
   11674:	bne	116a4 <__assert_fail@plt+0x7e8>
   11678:	cmp	r6, r4
   1167c:	sbcs	r3, r7, r5
   11680:	movlt	r4, r6
   11684:	movlt	r5, r7
   11688:	cmp	r4, #0
   1168c:	mov	r6, r4
   11690:	sbcs	r3, r5, #0
   11694:	mov	r7, r5
   11698:	movlt	r6, #0
   1169c:	movlt	r7, #0
   116a0:	b	115d0 <__assert_fail@plt+0x714>
   116a4:	cmp	r8, #4
   116a8:	mov	r2, r4
   116ac:	mov	r3, r5
   116b0:	bne	116cc <__assert_fail@plt+0x810>
   116b4:	mov	r0, r6
   116b8:	mov	r1, r7
   116bc:	bl	145d0 <__assert_fail@plt+0x3714>
   116c0:	subs	r4, r6, r2
   116c4:	sbc	r5, r7, r3
   116c8:	b	11688 <__assert_fail@plt+0x7cc>
   116cc:	cmp	r8, #5
   116d0:	bne	116f0 <__assert_fail@plt+0x834>
   116d4:	mov	r0, r6
   116d8:	mov	r1, r7
   116dc:	bl	145d0 <__assert_fail@plt+0x3714>
   116e0:	orrs	r1, r2, r3
   116e4:	beq	116f0 <__assert_fail@plt+0x834>
   116e8:	subs	r2, r4, r2
   116ec:	sbc	r3, r5, r3
   116f0:	adds	r4, r6, r2
   116f4:	adcs	r5, r7, r3
   116f8:	bvc	11688 <__assert_fail@plt+0x7cc>
   116fc:	ldr	r1, [pc, #284]	; 11820 <__assert_fail@plt+0x964>
   11700:	mov	r2, #5
   11704:	mov	r0, #0
   11708:	bl	10ce8 <dcgettext@plt>
   1170c:	mov	r4, r0
   11710:	mov	r1, sl
   11714:	mov	r0, #4
   11718:	bl	130f4 <__assert_fail@plt+0x2238>
   1171c:	mov	r3, r0
   11720:	mov	r2, r4
   11724:	mov	r1, #0
   11728:	b	11464 <__assert_fail@plt+0x5a8>
   1172c:	cmp	r2, #0
   11730:	mvngt	r2, #0
   11734:	mvngt	r3, #0
   11738:	strdgt	r2, [sp, #24]
   1173c:	bgt	1132c <__assert_fail@plt+0x470>
   11740:	mov	r2, #5
   11744:	ldr	r1, [pc, #216]	; 11824 <__assert_fail@plt+0x968>
   11748:	b	1109c <__assert_fail@plt+0x1e0>
   1174c:	cmp	r2, #0
   11750:	ble	11740 <__assert_fail@plt+0x884>
   11754:	add	r1, sp, #48	; 0x30
   11758:	mov	r0, sl
   1175c:	bl	14858 <__assert_fail@plt+0x399c>
   11760:	subs	r1, r0, #0
   11764:	beq	11260 <__assert_fail@plt+0x3a4>
   11768:	bl	10de4 <__errno_location@plt>
   1176c:	ldr	r1, [pc, #180]	; 11828 <__assert_fail@plt+0x96c>
   11770:	mov	r2, #5
   11774:	ldr	r4, [r0]
   11778:	mov	r0, r5
   1177c:	bl	10ce8 <dcgettext@plt>
   11780:	mov	r5, r0
   11784:	mov	r1, sl
   11788:	mov	r0, #4
   1178c:	bl	130f4 <__assert_fail@plt+0x2238>
   11790:	mov	r3, r0
   11794:	mov	r2, r5
   11798:	mov	r1, r4
   1179c:	mov	r0, #1
   117a0:	bl	10d60 <error@plt>
   117a4:	andeq	r4, r1, r1, lsr #29
   117a8:	andeq	r4, r1, r2, lsr #29
   117ac:	strdeq	r4, [r1], -pc	; <UNPREDICTABLE>
   117b0:	andeq	r1, r1, r4, lsl #24
   117b4:	andeq	r6, r2, r8, asr #2
   117b8:			; <UNDEFINED> instruction: 0x000148bc
   117bc:	andeq	r4, r1, ip, lsl pc
   117c0:	andeq	r6, r2, r8, lsr r1
   117c4:	andeq	r6, r2, r0, asr r1
   117c8:	andeq	r4, r1, r3, lsr #30
   117cc:	andeq	r4, r1, r4, asr #30
   117d0:	andeq	r4, r1, fp, asr #30
   117d4:			; <UNDEFINED> instruction: 0x00014eba
   117d8:	andeq	r4, r1, r0, ror #29
   117dc:	andeq	r4, r1, pc, ror #29
   117e0:	strdeq	r4, [r1], -sp
   117e4:	andeq	r4, r1, lr, lsl #30
   117e8:	andeq	r6, r2, r4, asr #2
   117ec:	strdeq	r4, [r1], -fp
   117f0:	andeq	r6, r2, r8, ror #1
   117f4:	andeq	r4, r1, ip, lsr #18
   117f8:	andeq	r4, r1, r7, asr pc
   117fc:	andeq	r4, r1, lr, ror pc
   11800:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   11804:	andeq	r4, r1, lr, asr #31
   11808:	andeq	r4, r1, r8, ror #31
   1180c:	andeq	r5, r1, r3
   11810:	strheq	r5, [r1], -r2
   11814:	andeq	r5, r1, r3, lsl r0
   11818:	andeq	r5, r1, r1, asr #32
   1181c:	andeq	r5, r1, lr, lsl #1
   11820:	andeq	r5, r1, fp, rrx
   11824:	andeq	r4, r1, sl, lsr #31
   11828:			; <UNDEFINED> instruction: 0x00014fbf
   1182c:	mov	fp, #0
   11830:	mov	lr, #0
   11834:	pop	{r1}		; (ldr r1, [sp], #4)
   11838:	mov	r2, sp
   1183c:	push	{r2}		; (str r2, [sp, #-4]!)
   11840:	push	{r0}		; (str r0, [sp, #-4]!)
   11844:	ldr	ip, [pc, #16]	; 1185c <__assert_fail@plt+0x9a0>
   11848:	push	{ip}		; (str ip, [sp, #-4]!)
   1184c:	ldr	r0, [pc, #12]	; 11860 <__assert_fail@plt+0x9a4>
   11850:	ldr	r3, [pc, #12]	; 11864 <__assert_fail@plt+0x9a8>
   11854:	bl	10d84 <__libc_start_main@plt>
   11858:	bl	10ea4 <abort@plt>
   1185c:	andeq	r4, r1, ip, lsr r8
   11860:	andeq	r0, r1, r0, ror #29
   11864:	ldrdeq	r4, [r1], -ip
   11868:	ldr	r3, [pc, #20]	; 11884 <__assert_fail@plt+0x9c8>
   1186c:	ldr	r2, [pc, #20]	; 11888 <__assert_fail@plt+0x9cc>
   11870:	add	r3, pc, r3
   11874:	ldr	r2, [r3, r2]
   11878:	cmp	r2, #0
   1187c:	bxeq	lr
   11880:	b	10d9c <__gmon_start__@plt>
   11884:	andeq	r4, r1, r8, lsl #15
   11888:	ldrdeq	r0, [r0], -ip
   1188c:	ldr	r0, [pc, #24]	; 118ac <__assert_fail@plt+0x9f0>
   11890:	ldr	r3, [pc, #24]	; 118b0 <__assert_fail@plt+0x9f4>
   11894:	cmp	r3, r0
   11898:	bxeq	lr
   1189c:	ldr	r3, [pc, #16]	; 118b4 <__assert_fail@plt+0x9f8>
   118a0:	cmp	r3, #0
   118a4:	bxeq	lr
   118a8:	bx	r3
   118ac:	andeq	r6, r2, r0, lsr r1
   118b0:	andeq	r6, r2, r0, lsr r1
   118b4:	andeq	r0, r0, r0
   118b8:	ldr	r0, [pc, #36]	; 118e4 <__assert_fail@plt+0xa28>
   118bc:	ldr	r1, [pc, #36]	; 118e8 <__assert_fail@plt+0xa2c>
   118c0:	sub	r1, r1, r0
   118c4:	asr	r1, r1, #2
   118c8:	add	r1, r1, r1, lsr #31
   118cc:	asrs	r1, r1, #1
   118d0:	bxeq	lr
   118d4:	ldr	r3, [pc, #16]	; 118ec <__assert_fail@plt+0xa30>
   118d8:	cmp	r3, #0
   118dc:	bxeq	lr
   118e0:	bx	r3
   118e4:	andeq	r6, r2, r0, lsr r1
   118e8:	andeq	r6, r2, r0, lsr r1
   118ec:	andeq	r0, r0, r0
   118f0:	push	{r4, lr}
   118f4:	ldr	r4, [pc, #24]	; 11914 <__assert_fail@plt+0xa58>
   118f8:	ldrb	r3, [r4]
   118fc:	cmp	r3, #0
   11900:	popne	{r4, pc}
   11904:	bl	1188c <__assert_fail@plt+0x9d0>
   11908:	mov	r3, #1
   1190c:	strb	r3, [r4]
   11910:	pop	{r4, pc}
   11914:	andeq	r6, r2, ip, asr #2
   11918:	b	118b8 <__assert_fail@plt+0x9fc>
   1191c:	subs	r5, r0, #0
   11920:	push	{r7, lr}
   11924:	sub	sp, sp, #56	; 0x38
   11928:	ldr	r4, [pc, #592]	; 11b80 <__assert_fail@plt+0xcc4>
   1192c:	beq	11964 <__assert_fail@plt+0xaa8>
   11930:	mov	r2, #5
   11934:	mov	r0, #0
   11938:	ldr	r3, [pc, #580]	; 11b84 <__assert_fail@plt+0xcc8>
   1193c:	ldr	r1, [pc, #580]	; 11b88 <__assert_fail@plt+0xccc>
   11940:	ldr	r6, [r3]
   11944:	bl	10ce8 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	mov	r1, #1
   11950:	ldr	r3, [r4]
   11954:	mov	r0, r6
   11958:	bl	10e20 <__fprintf_chk@plt>
   1195c:	mov	r0, r5
   11960:	bl	10dc0 <exit@plt>
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #540]	; 11b8c <__assert_fail@plt+0xcd0>
   1196c:	mov	r6, sp
   11970:	bl	10ce8 <dcgettext@plt>
   11974:	ldr	r2, [r4]
   11978:	mov	r1, r0
   1197c:	mov	r0, #1
   11980:	bl	10e08 <__printf_chk@plt>
   11984:	ldr	r4, [pc, #516]	; 11b90 <__assert_fail@plt+0xcd4>
   11988:	mov	r2, #5
   1198c:	mov	r0, r5
   11990:	ldr	r1, [pc, #508]	; 11b94 <__assert_fail@plt+0xcd8>
   11994:	bl	10ce8 <dcgettext@plt>
   11998:	ldr	r7, [pc, #504]	; 11b98 <__assert_fail@plt+0xcdc>
   1199c:	ldr	r1, [r4]
   119a0:	bl	10c64 <fputs_unlocked@plt>
   119a4:	mov	r2, #5
   119a8:	ldr	r1, [pc, #492]	; 11b9c <__assert_fail@plt+0xce0>
   119ac:	mov	r0, r5
   119b0:	bl	10ce8 <dcgettext@plt>
   119b4:	ldr	r1, [r4]
   119b8:	bl	10c64 <fputs_unlocked@plt>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #472]	; 11ba0 <__assert_fail@plt+0xce4>
   119c4:	mov	r0, r5
   119c8:	bl	10ce8 <dcgettext@plt>
   119cc:	ldr	r1, [r4]
   119d0:	bl	10c64 <fputs_unlocked@plt>
   119d4:	mov	r2, #5
   119d8:	ldr	r1, [pc, #452]	; 11ba4 <__assert_fail@plt+0xce8>
   119dc:	mov	r0, r5
   119e0:	bl	10ce8 <dcgettext@plt>
   119e4:	ldr	r1, [r4]
   119e8:	bl	10c64 <fputs_unlocked@plt>
   119ec:	mov	r2, #5
   119f0:	ldr	r1, [pc, #432]	; 11ba8 <__assert_fail@plt+0xcec>
   119f4:	mov	r0, r5
   119f8:	bl	10ce8 <dcgettext@plt>
   119fc:	ldr	r1, [r4]
   11a00:	bl	10c64 <fputs_unlocked@plt>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #412]	; 11bac <__assert_fail@plt+0xcf0>
   11a0c:	mov	r0, r5
   11a10:	bl	10ce8 <dcgettext@plt>
   11a14:	ldr	r1, [r4]
   11a18:	bl	10c64 <fputs_unlocked@plt>
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #392]	; 11bb0 <__assert_fail@plt+0xcf4>
   11a24:	mov	r0, r5
   11a28:	bl	10ce8 <dcgettext@plt>
   11a2c:	ldr	r1, [r4]
   11a30:	bl	10c64 <fputs_unlocked@plt>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #372]	; 11bb4 <__assert_fail@plt+0xcf8>
   11a3c:	mov	r0, r5
   11a40:	bl	10ce8 <dcgettext@plt>
   11a44:	ldr	r1, [r4]
   11a48:	bl	10c64 <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #352]	; 11bb8 <__assert_fail@plt+0xcfc>
   11a54:	mov	r0, r5
   11a58:	bl	10ce8 <dcgettext@plt>
   11a5c:	ldr	r1, [r4]
   11a60:	bl	10c64 <fputs_unlocked@plt>
   11a64:	ldr	lr, [pc, #336]	; 11bbc <__assert_fail@plt+0xd00>
   11a68:	mov	ip, sp
   11a6c:	ldm	lr!, {r0, r1, r2, r3}
   11a70:	stmia	ip!, {r0, r1, r2, r3}
   11a74:	ldm	lr!, {r0, r1, r2, r3}
   11a78:	stmia	ip!, {r0, r1, r2, r3}
   11a7c:	ldm	lr!, {r0, r1, r2, r3}
   11a80:	stmia	ip!, {r0, r1, r2, r3}
   11a84:	ldm	lr, {r0, r1}
   11a88:	stm	ip, {r0, r1}
   11a8c:	ldr	r1, [r6]
   11a90:	cmp	r1, #0
   11a94:	bne	11b38 <__assert_fail@plt+0xc7c>
   11a98:	ldr	r6, [r6, #4]
   11a9c:	mov	r2, #5
   11aa0:	mov	r0, #0
   11aa4:	ldr	r7, [pc, #236]	; 11b98 <__assert_fail@plt+0xcdc>
   11aa8:	ldr	r1, [pc, #272]	; 11bc0 <__assert_fail@plt+0xd04>
   11aac:	cmp	r6, #0
   11ab0:	moveq	r6, r7
   11ab4:	bl	10ce8 <dcgettext@plt>
   11ab8:	mov	r1, r0
   11abc:	ldr	r3, [pc, #256]	; 11bc4 <__assert_fail@plt+0xd08>
   11ac0:	mov	r0, #1
   11ac4:	ldr	r2, [pc, #252]	; 11bc8 <__assert_fail@plt+0xd0c>
   11ac8:	bl	10e08 <__printf_chk@plt>
   11acc:	mov	r1, #0
   11ad0:	mov	r0, #5
   11ad4:	bl	10e50 <setlocale@plt>
   11ad8:	cmp	r0, #0
   11adc:	bne	11b50 <__assert_fail@plt+0xc94>
   11ae0:	mov	r2, #5
   11ae4:	ldr	r1, [pc, #224]	; 11bcc <__assert_fail@plt+0xd10>
   11ae8:	mov	r0, #0
   11aec:	bl	10ce8 <dcgettext@plt>
   11af0:	mov	r1, r0
   11af4:	ldr	r3, [pc, #156]	; 11b98 <__assert_fail@plt+0xcdc>
   11af8:	mov	r0, #1
   11afc:	ldr	r2, [pc, #192]	; 11bc4 <__assert_fail@plt+0xd08>
   11b00:	bl	10e08 <__printf_chk@plt>
   11b04:	mov	r2, #5
   11b08:	ldr	r1, [pc, #192]	; 11bd0 <__assert_fail@plt+0xd14>
   11b0c:	mov	r0, #0
   11b10:	bl	10ce8 <dcgettext@plt>
   11b14:	ldr	r2, [pc, #184]	; 11bd4 <__assert_fail@plt+0xd18>
   11b18:	cmp	r6, r7
   11b1c:	mov	r1, r0
   11b20:	mov	r0, #1
   11b24:	ldr	r3, [pc, #172]	; 11bd8 <__assert_fail@plt+0xd1c>
   11b28:	moveq	r3, r2
   11b2c:	mov	r2, r6
   11b30:	bl	10e08 <__printf_chk@plt>
   11b34:	b	1195c <__assert_fail@plt+0xaa0>
   11b38:	mov	r0, r7
   11b3c:	bl	10c7c <strcmp@plt>
   11b40:	cmp	r0, #0
   11b44:	beq	11a98 <__assert_fail@plt+0xbdc>
   11b48:	add	r6, r6, #8
   11b4c:	b	11a8c <__assert_fail@plt+0xbd0>
   11b50:	mov	r2, #3
   11b54:	ldr	r1, [pc, #128]	; 11bdc <__assert_fail@plt+0xd20>
   11b58:	bl	10e98 <strncmp@plt>
   11b5c:	cmp	r0, #0
   11b60:	beq	11ae0 <__assert_fail@plt+0xc24>
   11b64:	mov	r2, #5
   11b68:	ldr	r1, [pc, #112]	; 11be0 <__assert_fail@plt+0xd24>
   11b6c:	mov	r0, #0
   11b70:	bl	10ce8 <dcgettext@plt>
   11b74:	ldr	r1, [r4]
   11b78:	bl	10c64 <fputs_unlocked@plt>
   11b7c:	b	11ae0 <__assert_fail@plt+0xc24>
   11b80:	andeq	r6, r2, r0, ror #2
   11b84:	andeq	r6, r2, r0, asr #2
   11b88:	andeq	r4, r1, r5, lsr r9
   11b8c:	andeq	r4, r1, ip, asr r9
   11b90:	andeq	r6, r2, r4, asr #2
   11b94:	andeq	r4, r1, r9, ror r9
   11b98:	andeq	r4, r1, ip, lsr #18
   11b9c:	andeq	r4, r1, ip, lsl #21
   11ba0:	ldrdeq	r4, [r1], -r7
   11ba4:	andeq	r4, r1, r9, lsl #22
   11ba8:	andeq	r4, r1, r6, asr fp
   11bac:	andeq	r4, r1, r6, asr #23
   11bb0:	strdeq	r4, [r1], -r3
   11bb4:	andeq	r4, r1, r9, lsr #24
   11bb8:	strdeq	r4, [r1], -sp
   11bbc:	andeq	r4, r1, r4, lsl #17
   11bc0:			; <UNDEFINED> instruction: 0x00014dbc
   11bc4:	ldrdeq	r4, [r1], -r3
   11bc8:	strdeq	r4, [r1], -fp
   11bcc:	andeq	r4, r1, r4, asr lr
   11bd0:	andeq	r4, r1, pc, ror #28
   11bd4:	andeq	r5, r1, r1, ror #1
   11bd8:	andeq	r4, r1, r1, lsr #29
   11bdc:	andeq	r4, r1, r9, lsl #28
   11be0:	andeq	r4, r1, sp, lsl #28
   11be4:	ldr	r3, [pc, #4]	; 11bf0 <__assert_fail@plt+0xd34>
   11be8:	str	r0, [r3]
   11bec:	bx	lr
   11bf0:	andeq	r6, r2, r8, asr r1
   11bf4:	ldr	r3, [pc, #4]	; 11c00 <__assert_fail@plt+0xd44>
   11bf8:	strb	r0, [r3, #4]
   11bfc:	bx	lr
   11c00:	andeq	r6, r2, r8, asr r1
   11c04:	ldr	r3, [pc, #176]	; 11cbc <__assert_fail@plt+0xe00>
   11c08:	push	{r0, r1, r4, r5, r6, lr}
   11c0c:	ldr	r0, [r3]
   11c10:	bl	141c8 <__assert_fail@plt+0x330c>
   11c14:	cmp	r0, #0
   11c18:	beq	11ca0 <__assert_fail@plt+0xde4>
   11c1c:	ldr	r4, [pc, #156]	; 11cc0 <__assert_fail@plt+0xe04>
   11c20:	bl	10de4 <__errno_location@plt>
   11c24:	mov	r5, r0
   11c28:	ldrb	r6, [r4, #4]
   11c2c:	cmp	r6, #0
   11c30:	beq	11c40 <__assert_fail@plt+0xd84>
   11c34:	ldr	r3, [r0]
   11c38:	cmp	r3, #32
   11c3c:	beq	11ca0 <__assert_fail@plt+0xde4>
   11c40:	mov	r2, #5
   11c44:	ldr	r1, [pc, #120]	; 11cc4 <__assert_fail@plt+0xe08>
   11c48:	mov	r0, #0
   11c4c:	bl	10ce8 <dcgettext@plt>
   11c50:	mov	r6, r0
   11c54:	ldr	r0, [r4]
   11c58:	cmp	r0, #0
   11c5c:	beq	11c8c <__assert_fail@plt+0xdd0>
   11c60:	ldr	r4, [r5]
   11c64:	bl	13188 <__assert_fail@plt+0x22cc>
   11c68:	mov	r3, r0
   11c6c:	ldr	r2, [pc, #84]	; 11cc8 <__assert_fail@plt+0xe0c>
   11c70:	mov	r0, #0
   11c74:	str	r6, [sp]
   11c78:	mov	r1, r4
   11c7c:	bl	10d60 <error@plt>
   11c80:	ldr	r3, [pc, #68]	; 11ccc <__assert_fail@plt+0xe10>
   11c84:	ldr	r0, [r3]
   11c88:	bl	10ca0 <_exit@plt>
   11c8c:	mov	r3, r6
   11c90:	ldr	r2, [pc, #56]	; 11cd0 <__assert_fail@plt+0xe14>
   11c94:	ldr	r1, [r5]
   11c98:	bl	10d60 <error@plt>
   11c9c:	b	11c80 <__assert_fail@plt+0xdc4>
   11ca0:	ldr	r3, [pc, #44]	; 11cd4 <__assert_fail@plt+0xe18>
   11ca4:	ldr	r0, [r3]
   11ca8:	bl	141c8 <__assert_fail@plt+0x330c>
   11cac:	cmp	r0, #0
   11cb0:	bne	11c80 <__assert_fail@plt+0xdc4>
   11cb4:	add	sp, sp, #8
   11cb8:	pop	{r4, r5, r6, pc}
   11cbc:	andeq	r6, r2, r4, asr #2
   11cc0:	andeq	r6, r2, r8, asr r1
   11cc4:	andeq	r5, r1, sl, asr #2
   11cc8:	andeq	r5, r1, r6, asr r1
   11ccc:	andeq	r6, r2, ip, ror #1
   11cd0:	andeq	r5, r1, sl, asr r1
   11cd4:	andeq	r6, r2, r0, asr #2
   11cd8:	push	{r4, r5, r6, lr}
   11cdc:	subs	r4, r0, #0
   11ce0:	bne	11cf8 <__assert_fail@plt+0xe3c>
   11ce4:	ldr	r3, [pc, #124]	; 11d68 <__assert_fail@plt+0xeac>
   11ce8:	ldr	r0, [pc, #124]	; 11d6c <__assert_fail@plt+0xeb0>
   11cec:	ldr	r1, [r3]
   11cf0:	bl	10e8c <fputs@plt>
   11cf4:	bl	10ea4 <abort@plt>
   11cf8:	mov	r1, #47	; 0x2f
   11cfc:	bl	10e5c <strrchr@plt>
   11d00:	subs	r6, r0, #0
   11d04:	beq	11d54 <__assert_fail@plt+0xe98>
   11d08:	add	r5, r6, #1
   11d0c:	sub	r3, r5, r4
   11d10:	cmp	r3, #6
   11d14:	ble	11d54 <__assert_fail@plt+0xe98>
   11d18:	mov	r2, #7
   11d1c:	ldr	r1, [pc, #76]	; 11d70 <__assert_fail@plt+0xeb4>
   11d20:	sub	r0, r6, #6
   11d24:	bl	10e98 <strncmp@plt>
   11d28:	cmp	r0, #0
   11d2c:	bne	11d54 <__assert_fail@plt+0xe98>
   11d30:	mov	r2, #3
   11d34:	ldr	r1, [pc, #56]	; 11d74 <__assert_fail@plt+0xeb8>
   11d38:	mov	r0, r5
   11d3c:	bl	10e98 <strncmp@plt>
   11d40:	cmp	r0, #0
   11d44:	ldreq	r3, [pc, #44]	; 11d78 <__assert_fail@plt+0xebc>
   11d48:	addeq	r4, r6, #4
   11d4c:	movne	r4, r5
   11d50:	streq	r4, [r3]
   11d54:	ldr	r3, [pc, #32]	; 11d7c <__assert_fail@plt+0xec0>
   11d58:	str	r4, [r3]
   11d5c:	ldr	r3, [pc, #28]	; 11d80 <__assert_fail@plt+0xec4>
   11d60:	str	r4, [r3]
   11d64:	pop	{r4, r5, r6, pc}
   11d68:	andeq	r6, r2, r0, asr #2
   11d6c:	andeq	r5, r1, sp, asr r1
   11d70:	muleq	r1, r5, r1
   11d74:	muleq	r1, sp, r1
   11d78:	andeq	r6, r2, r0, lsr r1
   11d7c:	andeq	r6, r2, r0, ror #2
   11d80:	andeq	r6, r2, r4, lsr r1
   11d84:	push	{r4, lr}
   11d88:	mov	r2, #48	; 0x30
   11d8c:	mov	r4, r1
   11d90:	mov	r1, #0
   11d94:	bl	10dfc <memset@plt>
   11d98:	cmp	r4, #10
   11d9c:	bne	11da4 <__assert_fail@plt+0xee8>
   11da0:	bl	10ea4 <abort@plt>
   11da4:	str	r4, [r0]
   11da8:	pop	{r4, pc}
   11dac:	push	{r4, r5, r6, lr}
   11db0:	mov	r2, #5
   11db4:	mov	r6, r0
   11db8:	mov	r5, r1
   11dbc:	mov	r1, r0
   11dc0:	mov	r0, #0
   11dc4:	bl	10ce8 <dcgettext@plt>
   11dc8:	cmp	r6, r0
   11dcc:	mov	r4, r0
   11dd0:	bne	11e40 <__assert_fail@plt+0xf84>
   11dd4:	bl	14440 <__assert_fail@plt+0x3584>
   11dd8:	ldrb	r3, [r0]
   11ddc:	bic	r3, r3, #32
   11de0:	cmp	r3, #85	; 0x55
   11de4:	bne	11e48 <__assert_fail@plt+0xf8c>
   11de8:	ldrb	r3, [r0, #1]
   11dec:	bic	r3, r3, #32
   11df0:	cmp	r3, #84	; 0x54
   11df4:	bne	11eb8 <__assert_fail@plt+0xffc>
   11df8:	ldrb	r3, [r0, #2]
   11dfc:	bic	r3, r3, #32
   11e00:	cmp	r3, #70	; 0x46
   11e04:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e08:	ldrb	r3, [r0, #3]
   11e0c:	cmp	r3, #45	; 0x2d
   11e10:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e14:	ldrb	r3, [r0, #4]
   11e18:	cmp	r3, #56	; 0x38
   11e1c:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e20:	ldrb	r3, [r0, #5]
   11e24:	cmp	r3, #0
   11e28:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e2c:	ldrb	r2, [r4]
   11e30:	ldr	r3, [pc, #144]	; 11ec8 <__assert_fail@plt+0x100c>
   11e34:	ldr	r4, [pc, #144]	; 11ecc <__assert_fail@plt+0x1010>
   11e38:	cmp	r2, #96	; 0x60
   11e3c:	movne	r4, r3
   11e40:	mov	r0, r4
   11e44:	pop	{r4, r5, r6, pc}
   11e48:	cmp	r3, #71	; 0x47
   11e4c:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e50:	ldrb	r3, [r0, #1]
   11e54:	bic	r3, r3, #32
   11e58:	cmp	r3, #66	; 0x42
   11e5c:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e60:	ldrb	r3, [r0, #2]
   11e64:	cmp	r3, #49	; 0x31
   11e68:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e6c:	ldrb	r3, [r0, #3]
   11e70:	cmp	r3, #56	; 0x38
   11e74:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e78:	ldrb	r3, [r0, #4]
   11e7c:	cmp	r3, #48	; 0x30
   11e80:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e84:	ldrb	r3, [r0, #5]
   11e88:	cmp	r3, #51	; 0x33
   11e8c:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e90:	ldrb	r3, [r0, #6]
   11e94:	cmp	r3, #48	; 0x30
   11e98:	bne	11eb8 <__assert_fail@plt+0xffc>
   11e9c:	ldrb	r3, [r0, #7]
   11ea0:	cmp	r3, #0
   11ea4:	bne	11eb8 <__assert_fail@plt+0xffc>
   11ea8:	ldrb	r2, [r4]
   11eac:	ldr	r3, [pc, #28]	; 11ed0 <__assert_fail@plt+0x1014>
   11eb0:	ldr	r4, [pc, #28]	; 11ed4 <__assert_fail@plt+0x1018>
   11eb4:	b	11e38 <__assert_fail@plt+0xf7c>
   11eb8:	ldr	r4, [pc, #24]	; 11ed8 <__assert_fail@plt+0x101c>
   11ebc:	cmp	r5, #9
   11ec0:	ldr	r3, [pc, #20]	; 11edc <__assert_fail@plt+0x1020>
   11ec4:	b	11e3c <__assert_fail@plt+0xf80>
   11ec8:	strdeq	r5, [r1], -sl
   11ecc:	andeq	r5, r1, r5, lsl #4
   11ed0:	strdeq	r5, [r1], -lr
   11ed4:	andeq	r5, r1, r1, lsl #4
   11ed8:	strdeq	r5, [r1], -r8
   11edc:	andeq	r5, r1, r9, lsl #4
   11ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee4:	sub	sp, sp, #108	; 0x6c
   11ee8:	mov	r8, r0
   11eec:	mov	r5, r1
   11ef0:	mov	r6, #0
   11ef4:	str	r3, [sp, #40]	; 0x28
   11ef8:	str	r2, [sp, #48]	; 0x30
   11efc:	ldr	sl, [sp, #144]	; 0x90
   11f00:	bl	10d30 <__ctype_get_mb_cur_max@plt>
   11f04:	ldr	r3, [sp, #148]	; 0x94
   11f08:	str	r6, [sp, #24]
   11f0c:	str	r6, [sp, #32]
   11f10:	str	r6, [sp, #44]	; 0x2c
   11f14:	str	r6, [sp, #52]	; 0x34
   11f18:	ubfx	r7, r3, #1, #1
   11f1c:	mov	r3, #1
   11f20:	str	r6, [sp, #60]	; 0x3c
   11f24:	str	r3, [sp, #72]	; 0x48
   11f28:	str	r0, [sp, #76]	; 0x4c
   11f2c:	cmp	sl, #10
   11f30:	ldrls	pc, [pc, sl, lsl #2]
   11f34:	b	12178 <__assert_fail@plt+0x12bc>
   11f38:	andeq	r1, r1, r4, ror #30
   11f3c:	muleq	r1, r0, r1
   11f40:	andeq	r2, r1, r4, lsl r1
   11f44:	andeq	r2, r1, ip, lsr #2
   11f48:	strdeq	r2, [r1], -ip
   11f4c:	andeq	r2, r1, r4, asr r0
   11f50:	andeq	r2, r1, r4, lsr r0
   11f54:	andeq	r2, r1, ip, ror r1
   11f58:	andeq	r2, r1, r4, lsl #1
   11f5c:	andeq	r2, r1, r4, lsl #1
   11f60:	andeq	r2, r1, r4, lsl #1
   11f64:	mov	r4, sl
   11f68:	mov	r7, #0
   11f6c:	mov	r9, r5
   11f70:	mov	r3, #0
   11f74:	str	r6, [sp, #68]	; 0x44
   11f78:	str	r3, [sp, #28]
   11f7c:	ldr	r3, [sp, #40]	; 0x28
   11f80:	cmn	r3, #1
   11f84:	bne	12b24 <__assert_fail@plt+0x1c68>
   11f88:	ldr	r2, [sp, #28]
   11f8c:	ldr	r3, [sp, #48]	; 0x30
   11f90:	ldrb	r3, [r3, r2]
   11f94:	adds	r3, r3, #0
   11f98:	movne	r3, #1
   11f9c:	str	r3, [sp, #36]	; 0x24
   11fa0:	ldr	r3, [sp, #36]	; 0x24
   11fa4:	cmp	r3, #0
   11fa8:	bne	121b4 <__assert_fail@plt+0x12f8>
   11fac:	sub	r3, sl, #2
   11fb0:	cmp	r4, #0
   11fb4:	clz	r3, r3
   11fb8:	movne	r2, #0
   11fbc:	lsr	r3, r3, #5
   11fc0:	andeq	r2, r3, r7
   11fc4:	cmp	r2, #0
   11fc8:	bne	12378 <__assert_fail@plt+0x14bc>
   11fcc:	eor	r7, r7, #1
   11fd0:	ands	r3, r3, r7
   11fd4:	beq	12b9c <__assert_fail@plt+0x1ce0>
   11fd8:	ldr	r2, [sp, #68]	; 0x44
   11fdc:	cmp	r2, #0
   11fe0:	beq	12b64 <__assert_fail@plt+0x1ca8>
   11fe4:	ldr	r3, [sp, #72]	; 0x48
   11fe8:	cmp	r3, #0
   11fec:	beq	12b38 <__assert_fail@plt+0x1c7c>
   11ff0:	ldr	r2, [sp, #48]	; 0x30
   11ff4:	ldr	r3, [sp, #160]	; 0xa0
   11ff8:	ldr	r1, [sp, #60]	; 0x3c
   11ffc:	str	r3, [sp, #16]
   12000:	ldr	r3, [sp, #156]	; 0x9c
   12004:	str	r3, [sp, #12]
   12008:	ldr	r3, [sp, #152]	; 0x98
   1200c:	str	r3, [sp, #8]
   12010:	ldr	r3, [sp, #148]	; 0x94
   12014:	str	r3, [sp, #4]
   12018:	mov	r3, #5
   1201c:	str	r3, [sp]
   12020:	ldr	r3, [sp, #40]	; 0x28
   12024:	mov	r0, r8
   12028:	bl	11ee0 <__assert_fail@plt+0x1024>
   1202c:	mov	r4, r0
   12030:	b	12b90 <__assert_fail@plt+0x1cd4>
   12034:	ldr	r3, [pc, #2948]	; 12bc0 <__assert_fail@plt+0x1d04>
   12038:	mov	r7, #1
   1203c:	mov	r4, #0
   12040:	mov	sl, #5
   12044:	str	r7, [sp, #24]
   12048:	str	r7, [sp, #32]
   1204c:	str	r3, [sp, #44]	; 0x2c
   12050:	b	11f6c <__assert_fail@plt+0x10b0>
   12054:	cmp	r7, #0
   12058:	bne	1219c <__assert_fail@plt+0x12e0>
   1205c:	cmp	r5, #0
   12060:	mov	r4, #1
   12064:	movne	r3, #34	; 0x22
   12068:	strbne	r3, [r8]
   1206c:	mov	r3, #1
   12070:	str	r3, [sp, #24]
   12074:	str	r3, [sp, #32]
   12078:	ldr	r3, [pc, #2880]	; 12bc0 <__assert_fail@plt+0x1d04>
   1207c:	str	r3, [sp, #44]	; 0x2c
   12080:	b	11f6c <__assert_fail@plt+0x10b0>
   12084:	cmp	sl, #10
   12088:	beq	120ac <__assert_fail@plt+0x11f0>
   1208c:	mov	r1, sl
   12090:	ldr	r0, [pc, #2860]	; 12bc4 <__assert_fail@plt+0x1d08>
   12094:	bl	11dac <__assert_fail@plt+0xef0>
   12098:	mov	r1, sl
   1209c:	str	r0, [sp, #156]	; 0x9c
   120a0:	ldr	r0, [pc, #2848]	; 12bc8 <__assert_fail@plt+0x1d0c>
   120a4:	bl	11dac <__assert_fail@plt+0xef0>
   120a8:	str	r0, [sp, #160]	; 0xa0
   120ac:	cmp	r7, #0
   120b0:	moveq	r4, r7
   120b4:	beq	120cc <__assert_fail@plt+0x1210>
   120b8:	mov	r4, #0
   120bc:	b	120dc <__assert_fail@plt+0x1220>
   120c0:	cmp	r5, r4
   120c4:	strbhi	r3, [r8, r4]
   120c8:	add	r4, r4, #1
   120cc:	ldr	r3, [sp, #156]	; 0x9c
   120d0:	ldrb	r3, [r3, r4]
   120d4:	cmp	r3, #0
   120d8:	bne	120c0 <__assert_fail@plt+0x1204>
   120dc:	ldr	r0, [sp, #160]	; 0xa0
   120e0:	bl	10dcc <strlen@plt>
   120e4:	ldr	r3, [sp, #160]	; 0xa0
   120e8:	str	r0, [sp, #32]
   120ec:	str	r3, [sp, #44]	; 0x2c
   120f0:	mov	r3, #1
   120f4:	str	r3, [sp, #24]
   120f8:	b	11f6c <__assert_fail@plt+0x10b0>
   120fc:	mov	r3, #1
   12100:	cmp	r7, #0
   12104:	streq	r3, [sp, #24]
   12108:	beq	1214c <__assert_fail@plt+0x1290>
   1210c:	str	r3, [sp, #32]
   12110:	b	12138 <__assert_fail@plt+0x127c>
   12114:	cmp	r7, #0
   12118:	beq	1214c <__assert_fail@plt+0x1290>
   1211c:	mov	r3, #1
   12120:	str	r3, [sp, #32]
   12124:	ldr	r3, [pc, #2716]	; 12bc8 <__assert_fail@plt+0x1d0c>
   12128:	b	121ac <__assert_fail@plt+0x12f0>
   1212c:	mov	r7, #1
   12130:	str	r7, [sp, #24]
   12134:	str	r7, [sp, #32]
   12138:	ldr	r3, [pc, #2696]	; 12bc8 <__assert_fail@plt+0x1d0c>
   1213c:	mov	r4, #0
   12140:	str	r3, [sp, #44]	; 0x2c
   12144:	mov	sl, #2
   12148:	b	11f6c <__assert_fail@plt+0x10b0>
   1214c:	cmp	r5, #0
   12150:	movne	r3, #39	; 0x27
   12154:	movne	r7, #0
   12158:	strbne	r3, [r8]
   1215c:	moveq	r7, r5
   12160:	mov	r3, #1
   12164:	mov	r4, #1
   12168:	str	r3, [sp, #32]
   1216c:	ldr	r3, [pc, #2644]	; 12bc8 <__assert_fail@plt+0x1d0c>
   12170:	str	r3, [sp, #44]	; 0x2c
   12174:	b	12144 <__assert_fail@plt+0x1288>
   12178:	bl	10ea4 <abort@plt>
   1217c:	mov	r3, #1
   12180:	mov	r7, #0
   12184:	str	r3, [sp, #24]
   12188:	mov	r4, #0
   1218c:	b	11f6c <__assert_fail@plt+0x10b0>
   12190:	mov	r7, #1
   12194:	str	sl, [sp, #32]
   12198:	b	12138 <__assert_fail@plt+0x127c>
   1219c:	mov	r3, #1
   121a0:	str	r7, [sp, #24]
   121a4:	str	r3, [sp, #32]
   121a8:	ldr	r3, [pc, #2576]	; 12bc0 <__assert_fail@plt+0x1d04>
   121ac:	str	r3, [sp, #44]	; 0x2c
   121b0:	b	12188 <__assert_fail@plt+0x12cc>
   121b4:	ldr	fp, [sp, #24]
   121b8:	ldr	r3, [sp, #32]
   121bc:	cmp	sl, #2
   121c0:	moveq	fp, #0
   121c4:	andne	fp, fp, #1
   121c8:	adds	r5, r3, #0
   121cc:	movne	r5, #1
   121d0:	ands	r3, fp, r5
   121d4:	str	r3, [sp, #64]	; 0x40
   121d8:	beq	122a8 <__assert_fail@plt+0x13ec>
   121dc:	ldr	r3, [sp, #28]
   121e0:	ldr	r2, [sp, #32]
   121e4:	cmp	r2, #1
   121e8:	add	r6, r3, r2
   121ec:	mov	r3, r2
   121f0:	ldr	r2, [sp, #40]	; 0x28
   121f4:	movls	r3, #0
   121f8:	movhi	r3, #1
   121fc:	cmn	r2, #1
   12200:	movne	r3, #0
   12204:	cmp	r3, #0
   12208:	beq	12218 <__assert_fail@plt+0x135c>
   1220c:	ldr	r0, [sp, #48]	; 0x30
   12210:	bl	10dcc <strlen@plt>
   12214:	str	r0, [sp, #40]	; 0x28
   12218:	ldr	r3, [sp, #40]	; 0x28
   1221c:	cmp	r6, r3
   12220:	bhi	122a0 <__assert_fail@plt+0x13e4>
   12224:	ldr	r0, [sp, #28]
   12228:	ldr	r2, [sp, #32]
   1222c:	ldr	r3, [sp, #48]	; 0x30
   12230:	ldr	r1, [sp, #44]	; 0x2c
   12234:	add	r0, r3, r0
   12238:	bl	10cd0 <memcmp@plt>
   1223c:	cmp	r0, #0
   12240:	bne	122a0 <__assert_fail@plt+0x13e4>
   12244:	cmp	r7, #0
   12248:	beq	122a8 <__assert_fail@plt+0x13ec>
   1224c:	str	r7, [sp, #24]
   12250:	ldr	r3, [sp, #24]
   12254:	mov	r1, r9
   12258:	ldr	r2, [sp, #48]	; 0x30
   1225c:	cmp	sl, #2
   12260:	movne	r3, #0
   12264:	andeq	r3, r3, #1
   12268:	cmp	r3, #0
   1226c:	ldr	r3, [sp, #160]	; 0xa0
   12270:	movne	sl, #4
   12274:	str	sl, [sp]
   12278:	str	r3, [sp, #16]
   1227c:	ldr	r3, [sp, #156]	; 0x9c
   12280:	str	r3, [sp, #12]
   12284:	mov	r3, #0
   12288:	str	r3, [sp, #8]
   1228c:	ldr	r3, [sp, #148]	; 0x94
   12290:	bic	r3, r3, #2
   12294:	str	r3, [sp, #4]
   12298:	ldr	r3, [sp, #40]	; 0x28
   1229c:	b	12024 <__assert_fail@plt+0x1168>
   122a0:	mov	r3, #0
   122a4:	str	r3, [sp, #64]	; 0x40
   122a8:	ldr	r2, [sp, #28]
   122ac:	ldr	r3, [sp, #48]	; 0x30
   122b0:	add	r3, r3, r2
   122b4:	str	r3, [sp, #80]	; 0x50
   122b8:	ldr	r3, [sp, #48]	; 0x30
   122bc:	ldrb	r6, [r3, r2]
   122c0:	cmp	r6, #58	; 0x3a
   122c4:	bhi	12428 <__assert_fail@plt+0x156c>
   122c8:	cmp	r6, #43	; 0x2b
   122cc:	bcs	125e8 <__assert_fail@plt+0x172c>
   122d0:	cmp	r6, #32
   122d4:	beq	1263c <__assert_fail@plt+0x1780>
   122d8:	bhi	12380 <__assert_fail@plt+0x14c4>
   122dc:	cmp	r6, #9
   122e0:	beq	127e4 <__assert_fail@plt+0x1928>
   122e4:	bhi	12344 <__assert_fail@plt+0x1488>
   122e8:	cmp	r6, #7
   122ec:	beq	127f4 <__assert_fail@plt+0x1938>
   122f0:	bhi	12810 <__assert_fail@plt+0x1954>
   122f4:	cmp	r6, #0
   122f8:	beq	12658 <__assert_fail@plt+0x179c>
   122fc:	ldr	r3, [sp, #76]	; 0x4c
   12300:	cmp	r3, #1
   12304:	bne	1285c <__assert_fail@plt+0x19a0>
   12308:	bl	10db4 <__ctype_b_loc@plt>
   1230c:	ldr	r2, [r0]
   12310:	sxth	r3, r6
   12314:	lsl	r3, r3, #1
   12318:	ldrh	r5, [r2, r3]
   1231c:	ldr	r3, [sp, #76]	; 0x4c
   12320:	ubfx	r5, r5, #14, #1
   12324:	str	r3, [sp, #56]	; 0x38
   12328:	ldr	r3, [sp, #24]
   1232c:	eor	fp, r5, #1
   12330:	and	fp, fp, r3
   12334:	ands	fp, fp, #255	; 0xff
   12338:	beq	12518 <__assert_fail@plt+0x165c>
   1233c:	mov	r5, #0
   12340:	b	12908 <__assert_fail@plt+0x1a4c>
   12344:	cmp	r6, #11
   12348:	beq	12818 <__assert_fail@plt+0x195c>
   1234c:	bcc	127ec <__assert_fail@plt+0x1930>
   12350:	cmp	r6, #12
   12354:	beq	12820 <__assert_fail@plt+0x1964>
   12358:	cmp	r6, #13
   1235c:	moveq	r3, #114	; 0x72
   12360:	bne	122fc <__assert_fail@plt+0x1440>
   12364:	cmp	sl, #2
   12368:	movne	r2, #0
   1236c:	andeq	r2, r7, #1
   12370:	cmp	r2, #0
   12374:	beq	127f8 <__assert_fail@plt+0x193c>
   12378:	mov	sl, #2
   1237c:	b	12250 <__assert_fail@plt+0x1394>
   12380:	cmp	r6, #37	; 0x25
   12384:	beq	125e8 <__assert_fail@plt+0x172c>
   12388:	bhi	1239c <__assert_fail@plt+0x14e0>
   1238c:	cmp	r6, #35	; 0x23
   12390:	beq	12630 <__assert_fail@plt+0x1774>
   12394:	mov	r5, #0
   12398:	b	12640 <__assert_fail@plt+0x1784>
   1239c:	cmp	r6, #39	; 0x27
   123a0:	bne	12394 <__assert_fail@plt+0x14d8>
   123a4:	cmp	sl, #2
   123a8:	ldrne	r5, [sp, #36]	; 0x24
   123ac:	movne	r3, r5
   123b0:	strne	r3, [sp, #68]	; 0x44
   123b4:	bne	12734 <__assert_fail@plt+0x1878>
   123b8:	cmp	r7, #0
   123bc:	bne	12250 <__assert_fail@plt+0x1394>
   123c0:	ldr	r3, [sp, #60]	; 0x3c
   123c4:	cmp	r9, #0
   123c8:	clz	r3, r3
   123cc:	lsr	r3, r3, #5
   123d0:	moveq	r3, #0
   123d4:	cmp	r3, #0
   123d8:	strne	r9, [sp, #60]	; 0x3c
   123dc:	movne	r9, #0
   123e0:	bne	123f0 <__assert_fail@plt+0x1534>
   123e4:	cmp	r9, r4
   123e8:	movhi	r3, #39	; 0x27
   123ec:	strbhi	r3, [r8, r4]
   123f0:	add	r3, r4, #1
   123f4:	ldr	r5, [sp, #36]	; 0x24
   123f8:	mov	fp, #0
   123fc:	cmp	r3, r9
   12400:	movcc	r2, #92	; 0x5c
   12404:	str	fp, [sp, #52]	; 0x34
   12408:	strbcc	r2, [r8, r3]
   1240c:	add	r3, r4, #2
   12410:	add	r4, r4, #3
   12414:	cmp	r3, r9
   12418:	str	r5, [sp, #68]	; 0x44
   1241c:	movcc	r2, #39	; 0x27
   12420:	strbcc	r2, [r8, r3]
   12424:	b	12518 <__assert_fail@plt+0x165c>
   12428:	cmp	r6, #94	; 0x5e
   1242c:	beq	12394 <__assert_fail@plt+0x14d8>
   12430:	bhi	125f0 <__assert_fail@plt+0x1734>
   12434:	cmp	r6, #90	; 0x5a
   12438:	bhi	125dc <__assert_fail@plt+0x1720>
   1243c:	cmp	r6, #65	; 0x41
   12440:	bcs	125e8 <__assert_fail@plt+0x172c>
   12444:	cmp	r6, #62	; 0x3e
   12448:	bls	12394 <__assert_fail@plt+0x14d8>
   1244c:	cmp	r6, #63	; 0x3f
   12450:	bne	122fc <__assert_fail@plt+0x1440>
   12454:	cmp	sl, #2
   12458:	beq	1273c <__assert_fail@plt+0x1880>
   1245c:	cmp	sl, #5
   12460:	movne	fp, #0
   12464:	bne	12b0c <__assert_fail@plt+0x1c50>
   12468:	ldr	r3, [sp, #148]	; 0x94
   1246c:	tst	r3, #4
   12470:	beq	12744 <__assert_fail@plt+0x1888>
   12474:	ldr	r3, [sp, #28]
   12478:	add	r2, r3, #2
   1247c:	ldr	r3, [sp, #40]	; 0x28
   12480:	cmp	r2, r3
   12484:	bcs	12744 <__assert_fail@plt+0x1888>
   12488:	ldr	r1, [sp, #28]
   1248c:	ldr	r3, [sp, #48]	; 0x30
   12490:	add	r3, r3, r1
   12494:	ldrb	r1, [r3, #1]
   12498:	cmp	r1, #63	; 0x3f
   1249c:	bne	12744 <__assert_fail@plt+0x1888>
   124a0:	ldr	r3, [sp, #48]	; 0x30
   124a4:	ldrb	r6, [r3, r2]
   124a8:	sub	r3, r6, #33	; 0x21
   124ac:	uxtb	r3, r3
   124b0:	cmp	r3, #29
   124b4:	bhi	12b14 <__assert_fail@plt+0x1c58>
   124b8:	ldr	r0, [pc, #1804]	; 12bcc <__assert_fail@plt+0x1d10>
   124bc:	mov	r5, #1
   124c0:	ands	r5, r0, r5, lsl r3
   124c4:	beq	12b1c <__assert_fail@plt+0x1c60>
   124c8:	cmp	r7, #0
   124cc:	bne	12250 <__assert_fail@plt+0x1394>
   124d0:	cmp	r9, r4
   124d4:	add	r3, r4, #1
   124d8:	str	r2, [sp, #28]
   124dc:	mov	r5, #0
   124e0:	strbhi	r1, [r8, r4]
   124e4:	cmp	r9, r3
   124e8:	mov	fp, r5
   124ec:	movhi	r1, #34	; 0x22
   124f0:	strbhi	r1, [r8, r3]
   124f4:	add	r3, r4, #2
   124f8:	cmp	r9, r3
   124fc:	movhi	r1, #34	; 0x22
   12500:	strbhi	r1, [r8, r3]
   12504:	add	r3, r4, #3
   12508:	add	r4, r4, #4
   1250c:	cmp	r9, r3
   12510:	movhi	r1, #63	; 0x3f
   12514:	strbhi	r1, [r8, r3]
   12518:	ldr	r3, [sp, #24]
   1251c:	eor	r3, r3, #1
   12520:	cmp	sl, #2
   12524:	orreq	r3, r3, #1
   12528:	eor	r3, r3, #1
   1252c:	orr	r3, r7, r3
   12530:	tst	r3, #255	; 0xff
   12534:	beq	12560 <__assert_fail@plt+0x16a4>
   12538:	ldr	r3, [sp, #152]	; 0x98
   1253c:	cmp	r3, #0
   12540:	beq	12560 <__assert_fail@plt+0x16a4>
   12544:	ldr	r1, [sp, #152]	; 0x98
   12548:	ubfx	r2, r6, #5, #8
   1254c:	and	r3, r6, #31
   12550:	ldr	r2, [r1, r2, lsl #2]
   12554:	lsr	r3, r2, r3
   12558:	tst	r3, #1
   1255c:	bne	1256c <__assert_fail@plt+0x16b0>
   12560:	ldr	r3, [sp, #64]	; 0x40
   12564:	cmp	r3, #0
   12568:	beq	12764 <__assert_fail@plt+0x18a8>
   1256c:	sub	r3, sl, #2
   12570:	cmp	r7, #0
   12574:	clz	r3, r3
   12578:	lsr	r3, r3, #5
   1257c:	bne	12250 <__assert_fail@plt+0x1394>
   12580:	ldr	r2, [sp, #52]	; 0x34
   12584:	eor	r2, r2, #1
   12588:	ands	r3, r3, r2
   1258c:	beq	125c4 <__assert_fail@plt+0x1708>
   12590:	cmp	r9, r4
   12594:	str	r3, [sp, #52]	; 0x34
   12598:	movhi	r2, #39	; 0x27
   1259c:	strbhi	r2, [r8, r4]
   125a0:	add	r2, r4, #1
   125a4:	cmp	r9, r2
   125a8:	movhi	r1, #36	; 0x24
   125ac:	strbhi	r1, [r8, r2]
   125b0:	add	r2, r4, #2
   125b4:	add	r4, r4, #3
   125b8:	cmp	r9, r2
   125bc:	movhi	r1, #39	; 0x27
   125c0:	strbhi	r1, [r8, r2]
   125c4:	cmp	r9, r4
   125c8:	ldr	fp, [sp, #36]	; 0x24
   125cc:	movhi	r3, #92	; 0x5c
   125d0:	strbhi	r3, [r8, r4]
   125d4:	add	r4, r4, #1
   125d8:	b	12764 <__assert_fail@plt+0x18a8>
   125dc:	cmp	r6, #92	; 0x5c
   125e0:	beq	1274c <__assert_fail@plt+0x1890>
   125e4:	bls	12394 <__assert_fail@plt+0x14d8>
   125e8:	ldr	r5, [sp, #36]	; 0x24
   125ec:	b	12734 <__assert_fail@plt+0x1878>
   125f0:	cmp	r6, #122	; 0x7a
   125f4:	bhi	12614 <__assert_fail@plt+0x1758>
   125f8:	cmp	r6, #97	; 0x61
   125fc:	bcs	125e8 <__assert_fail@plt+0x172c>
   12600:	cmp	r6, #95	; 0x5f
   12604:	beq	125e8 <__assert_fail@plt+0x172c>
   12608:	cmp	r6, #96	; 0x60
   1260c:	bne	122fc <__assert_fail@plt+0x1440>
   12610:	b	12394 <__assert_fail@plt+0x14d8>
   12614:	cmp	r6, #124	; 0x7c
   12618:	beq	12394 <__assert_fail@plt+0x14d8>
   1261c:	bcc	12828 <__assert_fail@plt+0x196c>
   12620:	cmp	r6, #125	; 0x7d
   12624:	beq	12828 <__assert_fail@plt+0x196c>
   12628:	cmp	r6, #126	; 0x7e
   1262c:	bne	122fc <__assert_fail@plt+0x1440>
   12630:	ldr	r3, [sp, #28]
   12634:	cmp	r3, #0
   12638:	bne	12744 <__assert_fail@plt+0x1888>
   1263c:	ldr	r5, [sp, #36]	; 0x24
   12640:	cmp	sl, #2
   12644:	movne	fp, #0
   12648:	andeq	fp, r7, #1
   1264c:	cmp	fp, #0
   12650:	beq	12518 <__assert_fail@plt+0x165c>
   12654:	b	12378 <__assert_fail@plt+0x14bc>
   12658:	ldr	r3, [sp, #24]
   1265c:	cmp	r3, #0
   12660:	beq	12728 <__assert_fail@plt+0x186c>
   12664:	sub	r2, sl, #2
   12668:	cmp	r7, #0
   1266c:	clz	r2, r2
   12670:	lsr	r2, r2, #5
   12674:	bne	1224c <__assert_fail@plt+0x1390>
   12678:	ldr	r3, [sp, #52]	; 0x34
   1267c:	eor	r3, r3, #1
   12680:	ands	r2, r2, r3
   12684:	moveq	r3, r4
   12688:	beq	126c0 <__assert_fail@plt+0x1804>
   1268c:	cmp	r9, r4
   12690:	str	r2, [sp, #52]	; 0x34
   12694:	movhi	r3, #39	; 0x27
   12698:	strbhi	r3, [r8, r4]
   1269c:	add	r3, r4, #1
   126a0:	cmp	r9, r3
   126a4:	movhi	r1, #36	; 0x24
   126a8:	strbhi	r1, [r8, r3]
   126ac:	add	r3, r4, #2
   126b0:	cmp	r9, r3
   126b4:	movhi	r1, #39	; 0x27
   126b8:	strbhi	r1, [r8, r3]
   126bc:	add	r3, r4, #3
   126c0:	cmp	r9, r3
   126c4:	add	r4, r3, #1
   126c8:	movhi	r2, #92	; 0x5c
   126cc:	strbhi	r2, [r8, r3]
   126d0:	cmp	fp, #0
   126d4:	beq	12afc <__assert_fail@plt+0x1c40>
   126d8:	ldr	r2, [sp, #28]
   126dc:	ldr	r1, [sp, #40]	; 0x28
   126e0:	add	r2, r2, #1
   126e4:	cmp	r2, r1
   126e8:	bcs	12720 <__assert_fail@plt+0x1864>
   126ec:	ldr	r1, [sp, #48]	; 0x30
   126f0:	mov	r6, #48	; 0x30
   126f4:	ldrb	r2, [r1, r2]
   126f8:	sub	r2, r2, #48	; 0x30
   126fc:	cmp	r2, #9
   12700:	bhi	12b0c <__assert_fail@plt+0x1c50>
   12704:	cmp	r9, r4
   12708:	add	r2, r3, #2
   1270c:	strbhi	r6, [r8, r4]
   12710:	cmp	r9, r2
   12714:	add	r4, r3, #3
   12718:	movhi	r1, #48	; 0x30
   1271c:	strbhi	r1, [r8, r2]
   12720:	mov	r5, #0
   12724:	b	12b04 <__assert_fail@plt+0x1c48>
   12728:	ldr	r3, [sp, #148]	; 0x94
   1272c:	ands	r5, r3, #1
   12730:	bne	127b8 <__assert_fail@plt+0x18fc>
   12734:	mov	fp, #0
   12738:	b	12518 <__assert_fail@plt+0x165c>
   1273c:	cmp	r7, #0
   12740:	bne	12250 <__assert_fail@plt+0x1394>
   12744:	mov	r5, #0
   12748:	b	12734 <__assert_fail@plt+0x1878>
   1274c:	cmp	sl, #2
   12750:	bne	127c4 <__assert_fail@plt+0x1908>
   12754:	cmp	r7, #0
   12758:	bne	12250 <__assert_fail@plt+0x1394>
   1275c:	mov	r5, r7
   12760:	mov	fp, r7
   12764:	ldr	r3, [sp, #52]	; 0x34
   12768:	eor	fp, fp, #1
   1276c:	tst	r3, fp
   12770:	beq	1279c <__assert_fail@plt+0x18e0>
   12774:	cmp	r9, r4
   12778:	movhi	r3, #39	; 0x27
   1277c:	strbhi	r3, [r8, r4]
   12780:	add	r3, r4, #1
   12784:	add	r4, r4, #2
   12788:	cmp	r9, r3
   1278c:	movhi	r2, #39	; 0x27
   12790:	strbhi	r2, [r8, r3]
   12794:	mov	r3, #0
   12798:	str	r3, [sp, #52]	; 0x34
   1279c:	cmp	r9, r4
   127a0:	ldr	r3, [sp, #72]	; 0x48
   127a4:	strbhi	r6, [r8, r4]
   127a8:	cmp	r5, #0
   127ac:	add	r4, r4, #1
   127b0:	moveq	r3, #0
   127b4:	str	r3, [sp, #72]	; 0x48
   127b8:	ldr	r3, [sp, #28]
   127bc:	add	r3, r3, #1
   127c0:	b	11f78 <__assert_fail@plt+0x10bc>
   127c4:	ldr	r3, [sp, #24]
   127c8:	and	r3, r3, r7
   127cc:	tst	r5, r3
   127d0:	moveq	r3, r6
   127d4:	beq	12364 <__assert_fail@plt+0x14a8>
   127d8:	mov	fp, #0
   127dc:	mov	r5, fp
   127e0:	b	12764 <__assert_fail@plt+0x18a8>
   127e4:	mov	r3, #116	; 0x74
   127e8:	b	12364 <__assert_fail@plt+0x14a8>
   127ec:	mov	r3, #110	; 0x6e
   127f0:	b	12364 <__assert_fail@plt+0x14a8>
   127f4:	mov	r3, #97	; 0x61
   127f8:	ldr	r2, [sp, #24]
   127fc:	cmp	r2, #0
   12800:	beq	12744 <__assert_fail@plt+0x1888>
   12804:	mov	r6, r3
   12808:	mov	r5, #0
   1280c:	b	1256c <__assert_fail@plt+0x16b0>
   12810:	mov	r3, #98	; 0x62
   12814:	b	127f8 <__assert_fail@plt+0x193c>
   12818:	mov	r3, #118	; 0x76
   1281c:	b	127f8 <__assert_fail@plt+0x193c>
   12820:	mov	r3, #102	; 0x66
   12824:	b	127f8 <__assert_fail@plt+0x193c>
   12828:	ldr	r3, [sp, #40]	; 0x28
   1282c:	cmn	r3, #1
   12830:	bne	12850 <__assert_fail@plt+0x1994>
   12834:	ldr	r3, [sp, #48]	; 0x30
   12838:	ldrb	r3, [r3, #1]
   1283c:	adds	r3, r3, #0
   12840:	movne	r3, #1
   12844:	cmp	r3, #0
   12848:	bne	12744 <__assert_fail@plt+0x1888>
   1284c:	b	12630 <__assert_fail@plt+0x1774>
   12850:	ldr	r3, [sp, #40]	; 0x28
   12854:	subs	r3, r3, #1
   12858:	b	12840 <__assert_fail@plt+0x1984>
   1285c:	mov	r3, #0
   12860:	mov	r2, #0
   12864:	strd	r2, [sp, #96]	; 0x60
   12868:	ldr	r3, [sp, #40]	; 0x28
   1286c:	cmn	r3, #1
   12870:	bne	12880 <__assert_fail@plt+0x19c4>
   12874:	ldr	r0, [sp, #48]	; 0x30
   12878:	bl	10dcc <strlen@plt>
   1287c:	str	r0, [sp, #40]	; 0x28
   12880:	ldr	r5, [sp, #36]	; 0x24
   12884:	mov	r3, #0
   12888:	str	r3, [sp, #56]	; 0x38
   1288c:	ldr	r3, [sp, #28]
   12890:	add	r0, sp, #92	; 0x5c
   12894:	ldr	r1, [sp, #40]	; 0x28
   12898:	ldr	r2, [sp, #56]	; 0x38
   1289c:	add	r2, r3, r2
   128a0:	ldr	r3, [sp, #48]	; 0x30
   128a4:	add	fp, r3, r2
   128a8:	sub	r2, r1, r2
   128ac:	add	r3, sp, #96	; 0x60
   128b0:	mov	r1, fp
   128b4:	bl	14474 <__assert_fail@plt+0x35b8>
   128b8:	subs	r2, r0, #0
   128bc:	beq	128fc <__assert_fail@plt+0x1a40>
   128c0:	cmn	r2, #1
   128c4:	beq	12ad0 <__assert_fail@plt+0x1c14>
   128c8:	cmn	r2, #2
   128cc:	bne	12a40 <__assert_fail@plt+0x1b84>
   128d0:	ldr	r3, [sp, #28]
   128d4:	ldr	r2, [sp, #56]	; 0x38
   128d8:	add	r3, r3, r2
   128dc:	ldr	r2, [sp, #40]	; 0x28
   128e0:	cmp	r2, r3
   128e4:	bls	12ad0 <__assert_fail@plt+0x1c14>
   128e8:	ldr	r2, [sp, #56]	; 0x38
   128ec:	ldr	r3, [sp, #80]	; 0x50
   128f0:	ldrb	r5, [r3, r2]
   128f4:	cmp	r5, #0
   128f8:	bne	12a30 <__assert_fail@plt+0x1b74>
   128fc:	ldr	r3, [sp, #56]	; 0x38
   12900:	cmp	r3, #1
   12904:	bls	12328 <__assert_fail@plt+0x146c>
   12908:	ldr	r3, [sp, #28]
   1290c:	mov	fp, #0
   12910:	mov	ip, #92	; 0x5c
   12914:	ldr	r2, [sp, #56]	; 0x38
   12918:	add	r3, r3, r2
   1291c:	ldr	r2, [sp, #24]
   12920:	str	r3, [sp, #36]	; 0x24
   12924:	eor	r3, r5, #1
   12928:	and	r3, r3, r2
   1292c:	mov	r2, #39	; 0x27
   12930:	uxtb	r3, r3
   12934:	cmp	r3, #0
   12938:	beq	12ad8 <__assert_fail@plt+0x1c1c>
   1293c:	sub	r0, sl, #2
   12940:	cmp	r7, #0
   12944:	clz	r0, r0
   12948:	lsr	r0, r0, #5
   1294c:	bne	1224c <__assert_fail@plt+0x1390>
   12950:	ldr	r1, [sp, #52]	; 0x34
   12954:	eor	r1, r1, #1
   12958:	ands	r1, r0, r1
   1295c:	beq	1298c <__assert_fail@plt+0x1ad0>
   12960:	cmp	r9, r4
   12964:	add	r0, r4, #1
   12968:	str	r1, [sp, #52]	; 0x34
   1296c:	strbhi	r2, [r8, r4]
   12970:	cmp	r9, r0
   12974:	movhi	lr, #36	; 0x24
   12978:	strbhi	lr, [r8, r0]
   1297c:	add	r0, r4, #2
   12980:	add	r4, r4, #3
   12984:	cmp	r9, r0
   12988:	strbhi	r2, [r8, r0]
   1298c:	cmp	r9, r4
   12990:	add	r0, r4, #1
   12994:	mov	fp, r3
   12998:	strbhi	ip, [r8, r4]
   1299c:	cmp	r9, r0
   129a0:	lsrhi	r1, r6, #6
   129a4:	addhi	r1, r1, #48	; 0x30
   129a8:	strbhi	r1, [r8, r0]
   129ac:	add	r0, r4, #2
   129b0:	add	r4, r4, #3
   129b4:	cmp	r9, r0
   129b8:	ubfxhi	r1, r6, #3, #3
   129bc:	and	r6, r6, #7
   129c0:	add	r6, r6, #48	; 0x30
   129c4:	addhi	r1, r1, #48	; 0x30
   129c8:	strbhi	r1, [r8, r0]
   129cc:	eor	r0, fp, #1
   129d0:	ldr	r1, [sp, #28]
   129d4:	ldr	lr, [sp, #52]	; 0x34
   129d8:	add	r1, r1, #1
   129dc:	and	r0, r0, lr
   129e0:	ldr	lr, [sp, #36]	; 0x24
   129e4:	cmp	r1, lr
   129e8:	bcs	12764 <__assert_fail@plt+0x18a8>
   129ec:	cmp	r0, #0
   129f0:	beq	12a14 <__assert_fail@plt+0x1b58>
   129f4:	cmp	r9, r4
   129f8:	add	r0, r4, #1
   129fc:	strbhi	r2, [r8, r4]
   12a00:	cmp	r9, r0
   12a04:	add	r4, r4, #2
   12a08:	strbhi	r2, [r8, r0]
   12a0c:	mov	r0, #0
   12a10:	str	r0, [sp, #52]	; 0x34
   12a14:	ldr	r0, [sp, #48]	; 0x30
   12a18:	cmp	r9, r4
   12a1c:	str	r1, [sp, #28]
   12a20:	strbhi	r6, [r8, r4]
   12a24:	add	r4, r4, #1
   12a28:	ldrb	r6, [r0, r1]
   12a2c:	b	12934 <__assert_fail@plt+0x1a78>
   12a30:	ldr	r3, [sp, #56]	; 0x38
   12a34:	add	r3, r3, #1
   12a38:	str	r3, [sp, #56]	; 0x38
   12a3c:	b	128d0 <__assert_fail@plt+0x1a14>
   12a40:	cmp	sl, #2
   12a44:	movne	r3, #0
   12a48:	andeq	r3, r7, #1
   12a4c:	cmp	r3, #0
   12a50:	movne	r1, #1
   12a54:	bne	12ab0 <__assert_fail@plt+0x1bf4>
   12a58:	ldr	r0, [sp, #92]	; 0x5c
   12a5c:	str	r2, [sp, #84]	; 0x54
   12a60:	bl	10d0c <iswprint@plt>
   12a64:	ldr	r3, [sp, #56]	; 0x38
   12a68:	cmp	r0, #0
   12a6c:	add	r0, sp, #96	; 0x60
   12a70:	moveq	r5, #0
   12a74:	ldr	r2, [sp, #84]	; 0x54
   12a78:	add	r3, r3, r2
   12a7c:	str	r3, [sp, #56]	; 0x38
   12a80:	bl	10cb8 <mbsinit@plt>
   12a84:	cmp	r0, #0
   12a88:	beq	1288c <__assert_fail@plt+0x19d0>
   12a8c:	b	128fc <__assert_fail@plt+0x1a40>
   12a90:	ldrb	r3, [fp, #1]!
   12a94:	cmp	r3, #94	; 0x5e
   12a98:	beq	12378 <__assert_fail@plt+0x14bc>
   12a9c:	bhi	12abc <__assert_fail@plt+0x1c00>
   12aa0:	sub	r3, r3, #91	; 0x5b
   12aa4:	cmp	r3, #1
   12aa8:	bls	12378 <__assert_fail@plt+0x14bc>
   12aac:	add	r1, r1, #1
   12ab0:	cmp	r1, r2
   12ab4:	bne	12a90 <__assert_fail@plt+0x1bd4>
   12ab8:	b	12a58 <__assert_fail@plt+0x1b9c>
   12abc:	cmp	r3, #96	; 0x60
   12ac0:	beq	12378 <__assert_fail@plt+0x14bc>
   12ac4:	cmp	r3, #124	; 0x7c
   12ac8:	bne	12aac <__assert_fail@plt+0x1bf0>
   12acc:	b	12378 <__assert_fail@plt+0x14bc>
   12ad0:	mov	r5, #0
   12ad4:	b	128fc <__assert_fail@plt+0x1a40>
   12ad8:	ldr	r1, [sp, #64]	; 0x40
   12adc:	cmp	r1, #0
   12ae0:	beq	129cc <__assert_fail@plt+0x1b10>
   12ae4:	cmp	r9, r4
   12ae8:	mov	r1, #0
   12aec:	strbhi	ip, [r8, r4]
   12af0:	add	r4, r4, #1
   12af4:	str	r1, [sp, #64]	; 0x40
   12af8:	b	129cc <__assert_fail@plt+0x1b10>
   12afc:	mov	r5, fp
   12b00:	ldr	fp, [sp, #24]
   12b04:	mov	r6, #48	; 0x30
   12b08:	b	12518 <__assert_fail@plt+0x165c>
   12b0c:	mov	r5, #0
   12b10:	b	12518 <__assert_fail@plt+0x165c>
   12b14:	mov	r6, r1
   12b18:	b	12744 <__assert_fail@plt+0x1888>
   12b1c:	mov	r6, r1
   12b20:	b	12734 <__assert_fail@plt+0x1878>
   12b24:	ldr	r2, [sp, #28]
   12b28:	ldr	r3, [sp, #40]	; 0x28
   12b2c:	subs	r3, r3, r2
   12b30:	movne	r3, #1
   12b34:	b	11f9c <__assert_fail@plt+0x10e0>
   12b38:	ldr	r3, [sp, #60]	; 0x3c
   12b3c:	mov	sl, #2
   12b40:	ldr	r7, [sp, #72]	; 0x48
   12b44:	adds	r6, r3, #0
   12b48:	mov	r5, r3
   12b4c:	movne	r6, #1
   12b50:	cmp	r9, #0
   12b54:	movne	r6, #0
   12b58:	cmp	r6, #0
   12b5c:	bne	11f2c <__assert_fail@plt+0x1070>
   12b60:	ldr	r3, [sp, #68]	; 0x44
   12b64:	ldr	r2, [sp, #44]	; 0x2c
   12b68:	cmp	r2, #0
   12b6c:	moveq	r3, #0
   12b70:	andne	r3, r3, #1
   12b74:	cmp	r3, #0
   12b78:	movne	r3, r2
   12b7c:	subne	r3, r3, #1
   12b80:	bne	12bb0 <__assert_fail@plt+0x1cf4>
   12b84:	cmp	r9, r4
   12b88:	movhi	r3, #0
   12b8c:	strbhi	r3, [r8, r4]
   12b90:	mov	r0, r4
   12b94:	add	sp, sp, #108	; 0x6c
   12b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b9c:	mov	r3, r7
   12ba0:	b	12b64 <__assert_fail@plt+0x1ca8>
   12ba4:	cmp	r9, r4
   12ba8:	strbhi	r2, [r8, r4]
   12bac:	add	r4, r4, #1
   12bb0:	ldrb	r2, [r3, #1]!
   12bb4:	cmp	r2, #0
   12bb8:	bne	12ba4 <__assert_fail@plt+0x1ce8>
   12bbc:	b	12b84 <__assert_fail@plt+0x1cc8>
   12bc0:	strdeq	r5, [r1], -r8
   12bc4:	andeq	r5, r1, fp, lsl #4
   12bc8:	andeq	r5, r1, r9, lsl #4
   12bcc:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd4:	sub	sp, sp, #52	; 0x34
   12bd8:	mov	r6, r0
   12bdc:	mov	r5, r3
   12be0:	mov	r8, r1
   12be4:	mov	r9, r2
   12be8:	bl	10de4 <__errno_location@plt>
   12bec:	ldr	r3, [r0]
   12bf0:	cmn	r6, #-2147483647	; 0x80000001
   12bf4:	str	r0, [sp, #24]
   12bf8:	ldr	r7, [pc, #368]	; 12d70 <__assert_fail@plt+0x1eb4>
   12bfc:	str	r3, [sp, #32]
   12c00:	movne	r3, #0
   12c04:	moveq	r3, #1
   12c08:	orrs	r3, r3, r6, lsr #31
   12c0c:	ldr	r4, [r7]
   12c10:	beq	12c18 <__assert_fail@plt+0x1d5c>
   12c14:	bl	10ea4 <abort@plt>
   12c18:	ldr	r2, [r7, #4]
   12c1c:	cmp	r2, r6
   12c20:	bgt	12c90 <__assert_fail@plt+0x1dd4>
   12c24:	add	sl, r7, #8
   12c28:	mov	r3, #8
   12c2c:	cmp	r4, sl
   12c30:	add	r1, sp, #44	; 0x2c
   12c34:	str	r2, [sp, #44]	; 0x2c
   12c38:	sub	r2, r6, r2
   12c3c:	movne	r0, r4
   12c40:	moveq	r0, #0
   12c44:	add	r2, r2, #1
   12c48:	str	r3, [sp]
   12c4c:	mvn	r3, #-2147483648	; 0x80000000
   12c50:	bl	13924 <__assert_fail@plt+0x2a68>
   12c54:	cmp	r4, sl
   12c58:	mov	fp, r0
   12c5c:	str	r0, [r7]
   12c60:	ldmeq	r4, {r0, r1}
   12c64:	mov	r4, fp
   12c68:	ldr	r2, [sp, #44]	; 0x2c
   12c6c:	stmeq	fp, {r0, r1}
   12c70:	mov	r1, #0
   12c74:	ldr	r0, [r7, #4]
   12c78:	sub	r2, r2, r0
   12c7c:	add	r0, fp, r0, lsl #3
   12c80:	lsl	r2, r2, #3
   12c84:	bl	10dfc <memset@plt>
   12c88:	ldr	r3, [sp, #44]	; 0x2c
   12c8c:	str	r3, [r7, #4]
   12c90:	ldr	r3, [r5, #4]
   12c94:	add	sl, r4, r6, lsl #3
   12c98:	mov	r2, r8
   12c9c:	ldr	fp, [r4, r6, lsl #3]
   12ca0:	ldr	r7, [sl, #4]
   12ca4:	orr	r3, r3, #1
   12ca8:	str	r3, [sp, #28]
   12cac:	add	r3, r5, #8
   12cb0:	mov	r1, fp
   12cb4:	str	r3, [sp, #36]	; 0x24
   12cb8:	mov	r0, r7
   12cbc:	ldr	r3, [r5, #44]	; 0x2c
   12cc0:	str	r3, [sp, #16]
   12cc4:	ldr	r3, [r5, #40]	; 0x28
   12cc8:	str	r3, [sp, #12]
   12ccc:	add	r3, r5, #8
   12cd0:	str	r3, [sp, #8]
   12cd4:	ldr	r3, [sp, #28]
   12cd8:	str	r3, [sp, #4]
   12cdc:	ldr	r3, [r5]
   12ce0:	str	r3, [sp]
   12ce4:	mov	r3, r9
   12ce8:	bl	11ee0 <__assert_fail@plt+0x1024>
   12cec:	cmp	fp, r0
   12cf0:	bhi	12d58 <__assert_fail@plt+0x1e9c>
   12cf4:	ldr	r3, [pc, #120]	; 12d74 <__assert_fail@plt+0x1eb8>
   12cf8:	add	fp, r0, #1
   12cfc:	str	fp, [r4, r6, lsl #3]
   12d00:	cmp	r7, r3
   12d04:	beq	12d10 <__assert_fail@plt+0x1e54>
   12d08:	mov	r0, r7
   12d0c:	bl	14330 <__assert_fail@plt+0x3474>
   12d10:	mov	r0, fp
   12d14:	bl	13814 <__assert_fail@plt+0x2958>
   12d18:	ldr	r3, [r5, #44]	; 0x2c
   12d1c:	mov	r2, r8
   12d20:	mov	r1, fp
   12d24:	str	r0, [sl, #4]
   12d28:	mov	r7, r0
   12d2c:	str	r3, [sp, #16]
   12d30:	ldr	r3, [r5, #40]	; 0x28
   12d34:	str	r3, [sp, #12]
   12d38:	add	r3, r5, #8
   12d3c:	str	r3, [sp, #8]
   12d40:	ldr	r3, [sp, #28]
   12d44:	str	r3, [sp, #4]
   12d48:	ldr	r3, [r5]
   12d4c:	str	r3, [sp]
   12d50:	mov	r3, r9
   12d54:	bl	11ee0 <__assert_fail@plt+0x1024>
   12d58:	ldr	r3, [sp, #24]
   12d5c:	mov	r0, r7
   12d60:	ldr	r2, [sp, #32]
   12d64:	str	r2, [r3]
   12d68:	add	sp, sp, #52	; 0x34
   12d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d70:	strdeq	r6, [r2], -r0
   12d74:	andeq	r6, r2, r4, ror #2
   12d78:	push	{r4, r5, r6, lr}
   12d7c:	mov	r5, r0
   12d80:	bl	10de4 <__errno_location@plt>
   12d84:	mov	r4, r0
   12d88:	cmp	r5, #0
   12d8c:	ldr	r0, [pc, #20]	; 12da8 <__assert_fail@plt+0x1eec>
   12d90:	mov	r1, #48	; 0x30
   12d94:	movne	r0, r5
   12d98:	ldr	r6, [r4]
   12d9c:	bl	13a14 <__assert_fail@plt+0x2b58>
   12da0:	str	r6, [r4]
   12da4:	pop	{r4, r5, r6, pc}
   12da8:	andeq	r6, r2, r4, ror #4
   12dac:	ldr	r3, [pc, #12]	; 12dc0 <__assert_fail@plt+0x1f04>
   12db0:	cmp	r0, #0
   12db4:	moveq	r0, r3
   12db8:	ldr	r0, [r0]
   12dbc:	bx	lr
   12dc0:	andeq	r6, r2, r4, ror #4
   12dc4:	ldr	r3, [pc, #12]	; 12dd8 <__assert_fail@plt+0x1f1c>
   12dc8:	cmp	r0, #0
   12dcc:	moveq	r0, r3
   12dd0:	str	r1, [r0]
   12dd4:	bx	lr
   12dd8:	andeq	r6, r2, r4, ror #4
   12ddc:	ldr	r3, [pc, #52]	; 12e18 <__assert_fail@plt+0x1f5c>
   12de0:	cmp	r0, #0
   12de4:	push	{lr}		; (str lr, [sp, #-4]!)
   12de8:	lsr	lr, r1, #5
   12dec:	and	r1, r1, #31
   12df0:	moveq	r0, r3
   12df4:	add	r3, r0, #8
   12df8:	ldr	ip, [r3, lr, lsl #2]
   12dfc:	lsr	r0, ip, r1
   12e00:	eor	r2, r2, r0
   12e04:	and	r0, r0, #1
   12e08:	and	r2, r2, #1
   12e0c:	eor	r1, ip, r2, lsl r1
   12e10:	str	r1, [r3, lr, lsl #2]
   12e14:	pop	{pc}		; (ldr pc, [sp], #4)
   12e18:	andeq	r6, r2, r4, ror #4
   12e1c:	ldr	r3, [pc, #16]	; 12e34 <__assert_fail@plt+0x1f78>
   12e20:	cmp	r0, #0
   12e24:	movne	r3, r0
   12e28:	ldr	r0, [r3, #4]
   12e2c:	str	r1, [r3, #4]
   12e30:	bx	lr
   12e34:	andeq	r6, r2, r4, ror #4
   12e38:	ldr	r3, [pc, #44]	; 12e6c <__assert_fail@plt+0x1fb0>
   12e3c:	cmp	r0, #0
   12e40:	moveq	r0, r3
   12e44:	mov	r3, #10
   12e48:	cmp	r2, #0
   12e4c:	cmpne	r1, #0
   12e50:	str	r3, [r0]
   12e54:	bne	12e60 <__assert_fail@plt+0x1fa4>
   12e58:	push	{r4, lr}
   12e5c:	bl	10ea4 <abort@plt>
   12e60:	str	r1, [r0, #40]	; 0x28
   12e64:	str	r2, [r0, #44]	; 0x2c
   12e68:	bx	lr
   12e6c:	andeq	r6, r2, r4, ror #4
   12e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e74:	sub	sp, sp, #24
   12e78:	mov	sl, r3
   12e7c:	mov	r7, r0
   12e80:	mov	r8, r1
   12e84:	mov	r9, r2
   12e88:	ldr	r4, [sp, #56]	; 0x38
   12e8c:	ldr	r3, [pc, #88]	; 12eec <__assert_fail@plt+0x2030>
   12e90:	cmp	r4, #0
   12e94:	moveq	r4, r3
   12e98:	bl	10de4 <__errno_location@plt>
   12e9c:	ldr	r3, [r4, #44]	; 0x2c
   12ea0:	mov	r5, r0
   12ea4:	mov	r2, r9
   12ea8:	mov	r1, r8
   12eac:	mov	r0, r7
   12eb0:	ldr	r6, [r5]
   12eb4:	str	r3, [sp, #16]
   12eb8:	ldr	r3, [r4, #40]	; 0x28
   12ebc:	str	r3, [sp, #12]
   12ec0:	add	r3, r4, #8
   12ec4:	str	r3, [sp, #8]
   12ec8:	ldr	r3, [r4, #4]
   12ecc:	str	r3, [sp, #4]
   12ed0:	ldr	r3, [r4]
   12ed4:	str	r3, [sp]
   12ed8:	mov	r3, sl
   12edc:	bl	11ee0 <__assert_fail@plt+0x1024>
   12ee0:	str	r6, [r5]
   12ee4:	add	sp, sp, #24
   12ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12eec:	andeq	r6, r2, r4, ror #4
   12ef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef4:	cmp	r3, #0
   12ef8:	sub	sp, sp, #44	; 0x2c
   12efc:	mov	r6, r2
   12f00:	mov	sl, r1
   12f04:	mov	r9, r0
   12f08:	ldr	r4, [pc, #176]	; 12fc0 <__assert_fail@plt+0x2104>
   12f0c:	movne	r4, r3
   12f10:	bl	10de4 <__errno_location@plt>
   12f14:	ldr	r3, [r0]
   12f18:	mov	r1, #0
   12f1c:	mov	r2, r9
   12f20:	mov	r8, r0
   12f24:	mov	r0, r1
   12f28:	ldr	r5, [r4, #4]
   12f2c:	add	fp, r4, #8
   12f30:	str	r3, [sp, #28]
   12f34:	ldr	r3, [r4, #44]	; 0x2c
   12f38:	cmp	r6, #0
   12f3c:	orreq	r5, r5, #1
   12f40:	str	r3, [sp, #16]
   12f44:	ldr	r3, [r4, #40]	; 0x28
   12f48:	stmib	sp, {r5, fp}
   12f4c:	str	r3, [sp, #12]
   12f50:	ldr	r3, [r4]
   12f54:	str	r3, [sp]
   12f58:	mov	r3, sl
   12f5c:	bl	11ee0 <__assert_fail@plt+0x1024>
   12f60:	add	r1, r0, #1
   12f64:	mov	r7, r0
   12f68:	mov	r0, r1
   12f6c:	str	r1, [sp, #36]	; 0x24
   12f70:	bl	13814 <__assert_fail@plt+0x2958>
   12f74:	ldr	r3, [r4, #44]	; 0x2c
   12f78:	mov	r2, r9
   12f7c:	ldr	r1, [sp, #36]	; 0x24
   12f80:	str	r3, [sp, #16]
   12f84:	ldr	r3, [r4, #40]	; 0x28
   12f88:	stmib	sp, {r5, fp}
   12f8c:	str	r0, [sp, #32]
   12f90:	str	r3, [sp, #12]
   12f94:	ldr	r3, [r4]
   12f98:	str	r3, [sp]
   12f9c:	mov	r3, sl
   12fa0:	bl	11ee0 <__assert_fail@plt+0x1024>
   12fa4:	ldr	r3, [sp, #28]
   12fa8:	cmp	r6, #0
   12fac:	ldr	r0, [sp, #32]
   12fb0:	str	r3, [r8]
   12fb4:	strne	r7, [r6]
   12fb8:	add	sp, sp, #44	; 0x2c
   12fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc0:	andeq	r6, r2, r4, ror #4
   12fc4:	mov	r3, r2
   12fc8:	mov	r2, #0
   12fcc:	b	12ef0 <__assert_fail@plt+0x2034>
   12fd0:	push	{r4, r5, r6, r7, r8, lr}
   12fd4:	mov	r6, #1
   12fd8:	ldr	r4, [pc, #100]	; 13044 <__assert_fail@plt+0x2188>
   12fdc:	ldr	r5, [r4]
   12fe0:	add	r7, r5, #4
   12fe4:	ldr	r3, [r4, #4]
   12fe8:	cmp	r3, r6
   12fec:	bgt	13034 <__assert_fail@plt+0x2178>
   12ff0:	ldr	r6, [pc, #80]	; 13048 <__assert_fail@plt+0x218c>
   12ff4:	ldr	r0, [r5, #4]
   12ff8:	cmp	r0, r6
   12ffc:	beq	13010 <__assert_fail@plt+0x2154>
   13000:	bl	14330 <__assert_fail@plt+0x3474>
   13004:	mov	r3, #256	; 0x100
   13008:	str	r3, [r4, #8]
   1300c:	str	r6, [r4, #12]
   13010:	ldr	r6, [pc, #52]	; 1304c <__assert_fail@plt+0x2190>
   13014:	cmp	r5, r6
   13018:	beq	13028 <__assert_fail@plt+0x216c>
   1301c:	mov	r0, r5
   13020:	bl	14330 <__assert_fail@plt+0x3474>
   13024:	str	r6, [r4]
   13028:	mov	r3, #1
   1302c:	str	r3, [r4, #4]
   13030:	pop	{r4, r5, r6, r7, r8, pc}
   13034:	ldr	r0, [r7, r6, lsl #3]
   13038:	add	r6, r6, #1
   1303c:	bl	14330 <__assert_fail@plt+0x3474>
   13040:	b	12fe4 <__assert_fail@plt+0x2128>
   13044:	strdeq	r6, [r2], -r0
   13048:	andeq	r6, r2, r4, ror #2
   1304c:	strdeq	r6, [r2], -r8
   13050:	ldr	r3, [pc, #4]	; 1305c <__assert_fail@plt+0x21a0>
   13054:	mvn	r2, #0
   13058:	b	12bd0 <__assert_fail@plt+0x1d14>
   1305c:	andeq	r6, r2, r4, ror #4
   13060:	ldr	r3, [pc]	; 13068 <__assert_fail@plt+0x21ac>
   13064:	b	12bd0 <__assert_fail@plt+0x1d14>
   13068:	andeq	r6, r2, r4, ror #4
   1306c:	mov	r1, r0
   13070:	mov	r0, #0
   13074:	b	13050 <__assert_fail@plt+0x2194>
   13078:	mov	r2, r1
   1307c:	mov	r1, r0
   13080:	mov	r0, #0
   13084:	b	13060 <__assert_fail@plt+0x21a4>
   13088:	push	{r4, r5, lr}
   1308c:	sub	sp, sp, #52	; 0x34
   13090:	mov	r5, r2
   13094:	mov	r4, r0
   13098:	mov	r0, sp
   1309c:	bl	11d84 <__assert_fail@plt+0xec8>
   130a0:	mov	r3, sp
   130a4:	mvn	r2, #0
   130a8:	mov	r1, r5
   130ac:	mov	r0, r4
   130b0:	bl	12bd0 <__assert_fail@plt+0x1d14>
   130b4:	add	sp, sp, #52	; 0x34
   130b8:	pop	{r4, r5, pc}
   130bc:	push	{r4, r5, r6, lr}
   130c0:	sub	sp, sp, #48	; 0x30
   130c4:	mov	r5, r2
   130c8:	mov	r6, r3
   130cc:	mov	r4, r0
   130d0:	mov	r0, sp
   130d4:	bl	11d84 <__assert_fail@plt+0xec8>
   130d8:	mov	r3, sp
   130dc:	mov	r2, r6
   130e0:	mov	r1, r5
   130e4:	mov	r0, r4
   130e8:	bl	12bd0 <__assert_fail@plt+0x1d14>
   130ec:	add	sp, sp, #48	; 0x30
   130f0:	pop	{r4, r5, r6, pc}
   130f4:	mov	r2, r1
   130f8:	mov	r1, r0
   130fc:	mov	r0, #0
   13100:	b	13088 <__assert_fail@plt+0x21cc>
   13104:	mov	r3, r2
   13108:	mov	r2, r1
   1310c:	mov	r1, r0
   13110:	mov	r0, #0
   13114:	b	130bc <__assert_fail@plt+0x2200>
   13118:	push	{r4, r5, r6, lr}
   1311c:	mov	r4, r0
   13120:	mov	r5, r1
   13124:	mov	r6, r2
   13128:	sub	sp, sp, #48	; 0x30
   1312c:	mov	ip, sp
   13130:	ldr	lr, [pc, #64]	; 13178 <__assert_fail@plt+0x22bc>
   13134:	ldm	lr!, {r0, r1, r2, r3}
   13138:	stmia	ip!, {r0, r1, r2, r3}
   1313c:	ldm	lr!, {r0, r1, r2, r3}
   13140:	stmia	ip!, {r0, r1, r2, r3}
   13144:	ldm	lr, {r0, r1, r2, r3}
   13148:	stm	ip, {r0, r1, r2, r3}
   1314c:	mov	r1, r6
   13150:	mov	r2, #1
   13154:	mov	r0, sp
   13158:	bl	12ddc <__assert_fail@plt+0x1f20>
   1315c:	mov	r3, sp
   13160:	mov	r2, r5
   13164:	mov	r1, r4
   13168:	mov	r0, #0
   1316c:	bl	12bd0 <__assert_fail@plt+0x1d14>
   13170:	add	sp, sp, #48	; 0x30
   13174:	pop	{r4, r5, r6, pc}
   13178:	andeq	r6, r2, r4, ror #4
   1317c:	mov	r2, r1
   13180:	mvn	r1, #0
   13184:	b	13118 <__assert_fail@plt+0x225c>
   13188:	mov	r1, #58	; 0x3a
   1318c:	b	1317c <__assert_fail@plt+0x22c0>
   13190:	mov	r2, #58	; 0x3a
   13194:	b	13118 <__assert_fail@plt+0x225c>
   13198:	push	{r4, r5, lr}
   1319c:	sub	sp, sp, #100	; 0x64
   131a0:	mov	r4, r0
   131a4:	mov	r0, sp
   131a8:	mov	r5, r2
   131ac:	bl	11d84 <__assert_fail@plt+0xec8>
   131b0:	mov	ip, sp
   131b4:	add	lr, sp, #48	; 0x30
   131b8:	ldm	ip!, {r0, r1, r2, r3}
   131bc:	stmia	lr!, {r0, r1, r2, r3}
   131c0:	ldm	ip!, {r0, r1, r2, r3}
   131c4:	stmia	lr!, {r0, r1, r2, r3}
   131c8:	ldm	ip, {r0, r1, r2, r3}
   131cc:	stm	lr, {r0, r1, r2, r3}
   131d0:	mov	r2, #1
   131d4:	mov	r1, #58	; 0x3a
   131d8:	add	r0, sp, #48	; 0x30
   131dc:	bl	12ddc <__assert_fail@plt+0x1f20>
   131e0:	add	r3, sp, #48	; 0x30
   131e4:	mvn	r2, #0
   131e8:	mov	r1, r5
   131ec:	mov	r0, r4
   131f0:	bl	12bd0 <__assert_fail@plt+0x1d14>
   131f4:	add	sp, sp, #100	; 0x64
   131f8:	pop	{r4, r5, pc}
   131fc:	push	{r4, r5, r6, r7, lr}
   13200:	mov	r4, r0
   13204:	mov	r6, r1
   13208:	mov	r7, r2
   1320c:	mov	r5, r3
   13210:	sub	sp, sp, #52	; 0x34
   13214:	ldr	lr, [pc, #68]	; 13260 <__assert_fail@plt+0x23a4>
   13218:	mov	ip, sp
   1321c:	ldm	lr!, {r0, r1, r2, r3}
   13220:	stmia	ip!, {r0, r1, r2, r3}
   13224:	ldm	lr!, {r0, r1, r2, r3}
   13228:	stmia	ip!, {r0, r1, r2, r3}
   1322c:	ldm	lr, {r0, r1, r2, r3}
   13230:	stm	ip, {r0, r1, r2, r3}
   13234:	mov	r2, r7
   13238:	mov	r1, r6
   1323c:	mov	r0, sp
   13240:	bl	12e38 <__assert_fail@plt+0x1f7c>
   13244:	ldr	r2, [sp, #72]	; 0x48
   13248:	mov	r3, sp
   1324c:	mov	r1, r5
   13250:	mov	r0, r4
   13254:	bl	12bd0 <__assert_fail@plt+0x1d14>
   13258:	add	sp, sp, #52	; 0x34
   1325c:	pop	{r4, r5, r6, r7, pc}
   13260:	andeq	r6, r2, r4, ror #4
   13264:	mvn	ip, #0
   13268:	push	{r0, r1, r2, lr}
   1326c:	str	ip, [sp]
   13270:	bl	131fc <__assert_fail@plt+0x2340>
   13274:	add	sp, sp, #12
   13278:	pop	{pc}		; (ldr pc, [sp], #4)
   1327c:	mov	r3, r2
   13280:	mov	r2, r1
   13284:	mov	r1, r0
   13288:	mov	r0, #0
   1328c:	b	13264 <__assert_fail@plt+0x23a8>
   13290:	push	{r0, r1, r2, lr}
   13294:	str	r3, [sp]
   13298:	mov	r3, r2
   1329c:	mov	r2, r1
   132a0:	mov	r1, r0
   132a4:	mov	r0, #0
   132a8:	bl	131fc <__assert_fail@plt+0x2340>
   132ac:	add	sp, sp, #12
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	ldr	r3, [pc]	; 132bc <__assert_fail@plt+0x2400>
   132b8:	b	12bd0 <__assert_fail@plt+0x1d14>
   132bc:	andeq	r6, r2, r0, lsl #2
   132c0:	mov	r2, r1
   132c4:	mov	r1, r0
   132c8:	mov	r0, #0
   132cc:	b	132b4 <__assert_fail@plt+0x23f8>
   132d0:	mvn	r2, #0
   132d4:	b	132b4 <__assert_fail@plt+0x23f8>
   132d8:	mov	r1, r0
   132dc:	mov	r0, #0
   132e0:	b	132d0 <__assert_fail@plt+0x2414>
   132e4:	push	{r4, r5, r6, lr}
   132e8:	cmp	r1, #0
   132ec:	sub	sp, sp, #32
   132f0:	mov	r5, r0
   132f4:	ldr	r4, [sp, #48]	; 0x30
   132f8:	ldr	r6, [sp, #52]	; 0x34
   132fc:	beq	133b0 <__assert_fail@plt+0x24f4>
   13300:	strd	r2, [sp]
   13304:	mov	r3, r1
   13308:	mov	r1, #1
   1330c:	ldr	r2, [pc, #856]	; 1366c <__assert_fail@plt+0x27b0>
   13310:	bl	10e20 <__fprintf_chk@plt>
   13314:	mov	r2, #5
   13318:	ldr	r1, [pc, #848]	; 13670 <__assert_fail@plt+0x27b4>
   1331c:	mov	r0, #0
   13320:	bl	10ce8 <dcgettext@plt>
   13324:	movw	r3, #2022	; 0x7e6
   13328:	ldr	r2, [pc, #836]	; 13674 <__assert_fail@plt+0x27b8>
   1332c:	mov	r1, #1
   13330:	str	r3, [sp]
   13334:	mov	r3, r0
   13338:	mov	r0, r5
   1333c:	bl	10e20 <__fprintf_chk@plt>
   13340:	mov	r1, r5
   13344:	mov	r0, #10
   13348:	bl	10cdc <fputc_unlocked@plt>
   1334c:	mov	r2, #5
   13350:	ldr	r1, [pc, #800]	; 13678 <__assert_fail@plt+0x27bc>
   13354:	mov	r0, #0
   13358:	bl	10ce8 <dcgettext@plt>
   1335c:	mov	r2, r0
   13360:	mov	r1, #1
   13364:	ldr	r3, [pc, #784]	; 1367c <__assert_fail@plt+0x27c0>
   13368:	mov	r0, r5
   1336c:	bl	10e20 <__fprintf_chk@plt>
   13370:	mov	r1, r5
   13374:	mov	r0, #10
   13378:	bl	10cdc <fputc_unlocked@plt>
   1337c:	cmp	r6, #9
   13380:	ldrls	pc, [pc, r6, lsl #2]
   13384:	b	13660 <__assert_fail@plt+0x27a4>
   13388:	andeq	r3, r1, r0, lsr #9
   1338c:	andeq	r3, r1, r8, asr #7
   13390:	strdeq	r3, [r1], -r4
   13394:	andeq	r3, r1, r8, lsr #8
   13398:	andeq	r3, r1, r4, ror #8
   1339c:	andeq	r3, r1, r8, lsr #9
   133a0:	strdeq	r3, [r1], -r0
   133a4:	andeq	r3, r1, r0, asr #10
   133a8:	muleq	r1, r8, r5
   133ac:	strdeq	r3, [r1], -r8
   133b0:	mov	r1, #1
   133b4:	str	r3, [sp]
   133b8:	mov	r3, r2
   133bc:	ldr	r2, [pc, #700]	; 13680 <__assert_fail@plt+0x27c4>
   133c0:	bl	10e20 <__fprintf_chk@plt>
   133c4:	b	13314 <__assert_fail@plt+0x2458>
   133c8:	mov	r2, #5
   133cc:	ldr	r1, [pc, #688]	; 13684 <__assert_fail@plt+0x27c8>
   133d0:	mov	r0, #0
   133d4:	bl	10ce8 <dcgettext@plt>
   133d8:	ldr	r3, [r4]
   133dc:	mov	r2, r0
   133e0:	mov	r1, #1
   133e4:	mov	r0, r5
   133e8:	add	sp, sp, #32
   133ec:	pop	{r4, r5, r6, lr}
   133f0:	b	10e20 <__fprintf_chk@plt>
   133f4:	mov	r2, #5
   133f8:	ldr	r1, [pc, #648]	; 13688 <__assert_fail@plt+0x27cc>
   133fc:	mov	r0, #0
   13400:	bl	10ce8 <dcgettext@plt>
   13404:	ldr	r3, [r4, #4]
   13408:	mov	r2, r0
   1340c:	mov	r1, #1
   13410:	mov	r0, r5
   13414:	str	r3, [sp, #48]	; 0x30
   13418:	ldr	r3, [r4]
   1341c:	add	sp, sp, #32
   13420:	pop	{r4, r5, r6, lr}
   13424:	b	10e20 <__fprintf_chk@plt>
   13428:	mov	r2, #5
   1342c:	ldr	r1, [pc, #600]	; 1368c <__assert_fail@plt+0x27d0>
   13430:	mov	r0, #0
   13434:	bl	10ce8 <dcgettext@plt>
   13438:	ldr	r3, [r4, #8]
   1343c:	mov	r2, r0
   13440:	mov	r1, #1
   13444:	mov	r0, r5
   13448:	str	r3, [sp, #52]	; 0x34
   1344c:	ldr	r3, [r4, #4]
   13450:	str	r3, [sp, #48]	; 0x30
   13454:	ldr	r3, [r4]
   13458:	add	sp, sp, #32
   1345c:	pop	{r4, r5, r6, lr}
   13460:	b	10e20 <__fprintf_chk@plt>
   13464:	mov	r2, #5
   13468:	ldr	r1, [pc, #544]	; 13690 <__assert_fail@plt+0x27d4>
   1346c:	mov	r0, #0
   13470:	bl	10ce8 <dcgettext@plt>
   13474:	ldr	r3, [r4, #12]
   13478:	mov	r2, r0
   1347c:	mov	r1, #1
   13480:	mov	r0, r5
   13484:	str	r3, [sp, #8]
   13488:	ldr	r3, [r4, #8]
   1348c:	str	r3, [sp, #4]
   13490:	ldr	r3, [r4, #4]
   13494:	str	r3, [sp]
   13498:	ldr	r3, [r4]
   1349c:	bl	10e20 <__fprintf_chk@plt>
   134a0:	add	sp, sp, #32
   134a4:	pop	{r4, r5, r6, pc}
   134a8:	mov	r2, #5
   134ac:	ldr	r1, [pc, #480]	; 13694 <__assert_fail@plt+0x27d8>
   134b0:	mov	r0, #0
   134b4:	bl	10ce8 <dcgettext@plt>
   134b8:	ldr	r3, [r4, #16]
   134bc:	mov	r2, r0
   134c0:	mov	r1, #1
   134c4:	mov	r0, r5
   134c8:	str	r3, [sp, #12]
   134cc:	ldr	r3, [r4, #12]
   134d0:	str	r3, [sp, #8]
   134d4:	ldr	r3, [r4, #8]
   134d8:	str	r3, [sp, #4]
   134dc:	ldr	r3, [r4, #4]
   134e0:	str	r3, [sp]
   134e4:	ldr	r3, [r4]
   134e8:	bl	10e20 <__fprintf_chk@plt>
   134ec:	b	134a0 <__assert_fail@plt+0x25e4>
   134f0:	mov	r2, #5
   134f4:	ldr	r1, [pc, #412]	; 13698 <__assert_fail@plt+0x27dc>
   134f8:	mov	r0, #0
   134fc:	bl	10ce8 <dcgettext@plt>
   13500:	ldr	r3, [r4, #20]
   13504:	mov	r2, r0
   13508:	mov	r1, #1
   1350c:	mov	r0, r5
   13510:	str	r3, [sp, #16]
   13514:	ldr	r3, [r4, #16]
   13518:	str	r3, [sp, #12]
   1351c:	ldr	r3, [r4, #12]
   13520:	str	r3, [sp, #8]
   13524:	ldr	r3, [r4, #8]
   13528:	str	r3, [sp, #4]
   1352c:	ldr	r3, [r4, #4]
   13530:	str	r3, [sp]
   13534:	ldr	r3, [r4]
   13538:	bl	10e20 <__fprintf_chk@plt>
   1353c:	b	134a0 <__assert_fail@plt+0x25e4>
   13540:	mov	r2, #5
   13544:	ldr	r1, [pc, #336]	; 1369c <__assert_fail@plt+0x27e0>
   13548:	mov	r0, #0
   1354c:	bl	10ce8 <dcgettext@plt>
   13550:	ldr	r3, [r4, #24]
   13554:	mov	r2, r0
   13558:	mov	r1, #1
   1355c:	mov	r0, r5
   13560:	str	r3, [sp, #20]
   13564:	ldr	r3, [r4, #20]
   13568:	str	r3, [sp, #16]
   1356c:	ldr	r3, [r4, #16]
   13570:	str	r3, [sp, #12]
   13574:	ldr	r3, [r4, #12]
   13578:	str	r3, [sp, #8]
   1357c:	ldr	r3, [r4, #8]
   13580:	str	r3, [sp, #4]
   13584:	ldr	r3, [r4, #4]
   13588:	str	r3, [sp]
   1358c:	ldr	r3, [r4]
   13590:	bl	10e20 <__fprintf_chk@plt>
   13594:	b	134a0 <__assert_fail@plt+0x25e4>
   13598:	mov	r2, #5
   1359c:	ldr	r1, [pc, #252]	; 136a0 <__assert_fail@plt+0x27e4>
   135a0:	mov	r0, #0
   135a4:	bl	10ce8 <dcgettext@plt>
   135a8:	ldr	r3, [r4, #28]
   135ac:	mov	r2, r0
   135b0:	mov	r1, #1
   135b4:	mov	r0, r5
   135b8:	str	r3, [sp, #24]
   135bc:	ldr	r3, [r4, #24]
   135c0:	str	r3, [sp, #20]
   135c4:	ldr	r3, [r4, #20]
   135c8:	str	r3, [sp, #16]
   135cc:	ldr	r3, [r4, #16]
   135d0:	str	r3, [sp, #12]
   135d4:	ldr	r3, [r4, #12]
   135d8:	str	r3, [sp, #8]
   135dc:	ldr	r3, [r4, #8]
   135e0:	str	r3, [sp, #4]
   135e4:	ldr	r3, [r4, #4]
   135e8:	str	r3, [sp]
   135ec:	ldr	r3, [r4]
   135f0:	bl	10e20 <__fprintf_chk@plt>
   135f4:	b	134a0 <__assert_fail@plt+0x25e4>
   135f8:	ldr	r1, [pc, #164]	; 136a4 <__assert_fail@plt+0x27e8>
   135fc:	mov	r2, #5
   13600:	mov	r0, #0
   13604:	bl	10ce8 <dcgettext@plt>
   13608:	ldr	r3, [r4, #32]
   1360c:	mov	r2, r0
   13610:	mov	r1, #1
   13614:	mov	r0, r5
   13618:	str	r3, [sp, #28]
   1361c:	ldr	r3, [r4, #28]
   13620:	str	r3, [sp, #24]
   13624:	ldr	r3, [r4, #24]
   13628:	str	r3, [sp, #20]
   1362c:	ldr	r3, [r4, #20]
   13630:	str	r3, [sp, #16]
   13634:	ldr	r3, [r4, #16]
   13638:	str	r3, [sp, #12]
   1363c:	ldr	r3, [r4, #12]
   13640:	str	r3, [sp, #8]
   13644:	ldr	r3, [r4, #8]
   13648:	str	r3, [sp, #4]
   1364c:	ldr	r3, [r4, #4]
   13650:	str	r3, [sp]
   13654:	ldr	r3, [r4]
   13658:	bl	10e20 <__fprintf_chk@plt>
   1365c:	b	134a0 <__assert_fail@plt+0x25e4>
   13660:	mov	r2, #5
   13664:	ldr	r1, [pc, #60]	; 136a8 <__assert_fail@plt+0x27ec>
   13668:	b	13600 <__assert_fail@plt+0x2744>
   1366c:	andeq	r5, r1, r9, asr r2
   13670:	andeq	r5, r1, ip, ror #4
   13674:	andeq	r5, r1, sl, lsr r5
   13678:	andeq	r5, r1, r0, ror r2
   1367c:	andeq	r5, r1, fp, lsl r3
   13680:	andeq	r5, r1, r5, ror #4
   13684:	andeq	r5, r1, sp, lsr r3
   13688:	andeq	r5, r1, sp, asr #6
   1368c:	andeq	r5, r1, r4, ror #6
   13690:	andeq	r5, r1, r0, lsl #7
   13694:	andeq	r5, r1, r0, lsr #7
   13698:	andeq	r5, r1, r4, asr #7
   1369c:	andeq	r5, r1, ip, ror #7
   136a0:	andeq	r5, r1, r8, lsl r4
   136a4:	andeq	r5, r1, r8, asr #8
   136a8:	andeq	r5, r1, ip, ror r4
   136ac:	push	{r0, r1, r4, lr}
   136b0:	mov	ip, #0
   136b4:	ldr	lr, [sp, #16]
   136b8:	ldr	r4, [lr, ip, lsl #2]
   136bc:	cmp	r4, #0
   136c0:	bne	136d8 <__assert_fail@plt+0x281c>
   136c4:	str	lr, [sp]
   136c8:	str	ip, [sp, #4]
   136cc:	bl	132e4 <__assert_fail@plt+0x2428>
   136d0:	add	sp, sp, #8
   136d4:	pop	{r4, pc}
   136d8:	add	ip, ip, #1
   136dc:	b	136b8 <__assert_fail@plt+0x27fc>
   136e0:	push	{r4, r5, r6, lr}
   136e4:	sub	sp, sp, #48	; 0x30
   136e8:	mov	ip, #0
   136ec:	add	lr, sp, #8
   136f0:	mov	r5, lr
   136f4:	ldr	r6, [sp, #64]	; 0x40
   136f8:	ldr	r4, [r6, ip, lsl #2]
   136fc:	cmp	r4, #0
   13700:	str	r4, [lr], #4
   13704:	beq	13714 <__assert_fail@plt+0x2858>
   13708:	add	ip, ip, #1
   1370c:	cmp	ip, #10
   13710:	bne	136f8 <__assert_fail@plt+0x283c>
   13714:	stm	sp, {r5, ip}
   13718:	bl	132e4 <__assert_fail@plt+0x2428>
   1371c:	add	sp, sp, #48	; 0x30
   13720:	pop	{r4, r5, r6, pc}
   13724:	push	{r3}		; (str r3, [sp, #-4]!)
   13728:	push	{r0, r1, r2, r3, lr}
   1372c:	add	r3, sp, #24
   13730:	str	r3, [sp]
   13734:	str	r3, [sp, #12]
   13738:	ldr	r3, [sp, #20]
   1373c:	bl	136e0 <__assert_fail@plt+0x2824>
   13740:	add	sp, sp, #16
   13744:	pop	{lr}		; (ldr lr, [sp], #4)
   13748:	add	sp, sp, #4
   1374c:	bx	lr
   13750:	ldr	r3, [pc, #116]	; 137cc <__assert_fail@plt+0x2910>
   13754:	mov	r0, #10
   13758:	push	{r4, lr}
   1375c:	ldr	r1, [r3]
   13760:	bl	10cdc <fputc_unlocked@plt>
   13764:	mov	r2, #5
   13768:	ldr	r1, [pc, #96]	; 137d0 <__assert_fail@plt+0x2914>
   1376c:	mov	r0, #0
   13770:	bl	10ce8 <dcgettext@plt>
   13774:	mov	r1, r0
   13778:	ldr	r2, [pc, #84]	; 137d4 <__assert_fail@plt+0x2918>
   1377c:	mov	r0, #1
   13780:	bl	10e08 <__printf_chk@plt>
   13784:	mov	r2, #5
   13788:	ldr	r1, [pc, #72]	; 137d8 <__assert_fail@plt+0x291c>
   1378c:	mov	r0, #0
   13790:	bl	10ce8 <dcgettext@plt>
   13794:	mov	r1, r0
   13798:	ldr	r3, [pc, #60]	; 137dc <__assert_fail@plt+0x2920>
   1379c:	mov	r0, #1
   137a0:	ldr	r2, [pc, #56]	; 137e0 <__assert_fail@plt+0x2924>
   137a4:	bl	10e08 <__printf_chk@plt>
   137a8:	mov	r2, #5
   137ac:	ldr	r1, [pc, #48]	; 137e4 <__assert_fail@plt+0x2928>
   137b0:	mov	r0, #0
   137b4:	bl	10ce8 <dcgettext@plt>
   137b8:	mov	r1, r0
   137bc:	ldr	r2, [pc, #36]	; 137e8 <__assert_fail@plt+0x292c>
   137c0:	mov	r0, #1
   137c4:	pop	{r4, lr}
   137c8:	b	10e08 <__printf_chk@plt>
   137cc:	andeq	r6, r2, r4, asr #2
   137d0:			; <UNDEFINED> instruction: 0x000154b8
   137d4:	andeq	r5, r1, ip, asr #9
   137d8:	andeq	r5, r1, r2, ror #9
   137dc:	ldrdeq	r4, [r1], -r3
   137e0:	strdeq	r4, [r1], -fp
   137e4:	strdeq	r5, [r1], -r6
   137e8:	andeq	r5, r1, sp, lsl r5
   137ec:	push	{r4, lr}
   137f0:	bl	14158 <__assert_fail@plt+0x329c>
   137f4:	cmp	r0, #0
   137f8:	popne	{r4, pc}
   137fc:	bl	13aa4 <__assert_fail@plt+0x2be8>
   13800:	push	{r4, lr}
   13804:	bl	14158 <__assert_fail@plt+0x329c>
   13808:	cmp	r0, #0
   1380c:	popne	{r4, pc}
   13810:	bl	13aa4 <__assert_fail@plt+0x2be8>
   13814:	b	137ec <__assert_fail@plt+0x2930>
   13818:	push	{r4, r5, r6, lr}
   1381c:	mov	r5, r0
   13820:	mov	r4, r1
   13824:	bl	14184 <__assert_fail@plt+0x32c8>
   13828:	cmp	r0, #0
   1382c:	popne	{r4, r5, r6, pc}
   13830:	adds	r4, r4, #0
   13834:	movne	r4, #1
   13838:	cmp	r5, #0
   1383c:	moveq	r4, #1
   13840:	cmp	r4, #0
   13844:	popeq	{r4, r5, r6, pc}
   13848:	bl	13aa4 <__assert_fail@plt+0x2be8>
   1384c:	push	{r4, lr}
   13850:	bl	1441c <__assert_fail@plt+0x3560>
   13854:	cmp	r0, #0
   13858:	popne	{r4, pc}
   1385c:	bl	13aa4 <__assert_fail@plt+0x2be8>
   13860:	push	{r4, r5, r6, lr}
   13864:	mov	r6, r0
   13868:	mov	r5, r1
   1386c:	mov	r4, r2
   13870:	bl	144c4 <__assert_fail@plt+0x3608>
   13874:	cmp	r0, #0
   13878:	popne	{r4, r5, r6, pc}
   1387c:	cmp	r6, #0
   13880:	beq	13890 <__assert_fail@plt+0x29d4>
   13884:	cmp	r5, #0
   13888:	cmpne	r4, #0
   1388c:	popeq	{r4, r5, r6, pc}
   13890:	bl	13aa4 <__assert_fail@plt+0x2be8>
   13894:	b	13860 <__assert_fail@plt+0x29a4>
   13898:	push	{r4, lr}
   1389c:	bl	1442c <__assert_fail@plt+0x3570>
   138a0:	cmp	r0, #0
   138a4:	popne	{r4, pc}
   138a8:	bl	13aa4 <__assert_fail@plt+0x2be8>
   138ac:	mov	r2, r1
   138b0:	mov	r1, r0
   138b4:	mov	r0, #0
   138b8:	b	13860 <__assert_fail@plt+0x29a4>
   138bc:	mov	r2, r1
   138c0:	mov	r1, r0
   138c4:	mov	r0, #0
   138c8:	b	13898 <__assert_fail@plt+0x29dc>
   138cc:	cmp	r0, #0
   138d0:	push	{r4, r5, r6, lr}
   138d4:	mov	r5, r1
   138d8:	ldr	r4, [r1]
   138dc:	bne	13908 <__assert_fail@plt+0x2a4c>
   138e0:	cmp	r4, #0
   138e4:	bne	138f8 <__assert_fail@plt+0x2a3c>
   138e8:	mov	r4, #64	; 0x40
   138ec:	udiv	r4, r4, r2
   138f0:	cmp	r2, #64	; 0x40
   138f4:	addhi	r4, r4, #1
   138f8:	mov	r1, r4
   138fc:	bl	13860 <__assert_fail@plt+0x29a4>
   13900:	str	r4, [r5]
   13904:	pop	{r4, r5, r6, pc}
   13908:	lsr	r3, r4, #1
   1390c:	add	r3, r3, #1
   13910:	adds	r4, r4, r3
   13914:	bcc	138f8 <__assert_fail@plt+0x2a3c>
   13918:	bl	13aa4 <__assert_fail@plt+0x2be8>
   1391c:	mov	r2, #1
   13920:	b	138cc <__assert_fail@plt+0x2a10>
   13924:	ldr	ip, [r1]
   13928:	push	{r4, r5, r6, r7, r8, lr}
   1392c:	mov	r5, r1
   13930:	mvn	r8, r3
   13934:	lsr	r8, r8, #31
   13938:	ldr	lr, [sp, #24]
   1393c:	asr	r1, ip, #1
   13940:	adds	r4, ip, r1
   13944:	mvnvs	r4, #-2147483648	; 0x80000000
   13948:	cmp	r3, r4
   1394c:	movge	r1, #0
   13950:	andlt	r1, r8, #1
   13954:	cmp	r1, #0
   13958:	movne	r4, r3
   1395c:	smull	r6, r7, r4, lr
   13960:	cmp	r7, r6, asr #31
   13964:	bne	1397c <__assert_fail@plt+0x2ac0>
   13968:	cmp	r6, #63	; 0x3f
   1396c:	mov	r1, r6
   13970:	bgt	1398c <__assert_fail@plt+0x2ad0>
   13974:	mov	r1, #64	; 0x40
   13978:	b	13980 <__assert_fail@plt+0x2ac4>
   1397c:	mvn	r1, #-2147483648	; 0x80000000
   13980:	sdiv	r4, r1, lr
   13984:	mls	r6, lr, r4, r1
   13988:	sub	r1, r1, r6
   1398c:	cmp	r0, #0
   13990:	sub	r6, r4, ip
   13994:	streq	r0, [r5]
   13998:	cmp	r6, r2
   1399c:	bge	139d0 <__assert_fail@plt+0x2b14>
   139a0:	adds	r4, ip, r2
   139a4:	bvs	139cc <__assert_fail@plt+0x2b10>
   139a8:	cmp	r4, r3
   139ac:	movle	r3, #0
   139b0:	andgt	r3, r8, #1
   139b4:	cmp	r3, #0
   139b8:	bne	139cc <__assert_fail@plt+0x2b10>
   139bc:	smull	r2, r3, r4, lr
   139c0:	cmp	r3, r2, asr #31
   139c4:	mov	r1, r2
   139c8:	beq	139d0 <__assert_fail@plt+0x2b14>
   139cc:	bl	13aa4 <__assert_fail@plt+0x2be8>
   139d0:	bl	13818 <__assert_fail@plt+0x295c>
   139d4:	str	r4, [r5]
   139d8:	pop	{r4, r5, r6, r7, r8, pc}
   139dc:	push	{r4, lr}
   139e0:	bl	14104 <__assert_fail@plt+0x3248>
   139e4:	cmp	r0, #0
   139e8:	popne	{r4, pc}
   139ec:	bl	13aa4 <__assert_fail@plt+0x2be8>
   139f0:	mov	r1, #1
   139f4:	b	139dc <__assert_fail@plt+0x2b20>
   139f8:	push	{r4, lr}
   139fc:	bl	14104 <__assert_fail@plt+0x3248>
   13a00:	cmp	r0, #0
   13a04:	popne	{r4, pc}
   13a08:	bl	13aa4 <__assert_fail@plt+0x2be8>
   13a0c:	mov	r1, #1
   13a10:	b	139f8 <__assert_fail@plt+0x2b3c>
   13a14:	push	{r4, r5, r6, lr}
   13a18:	mov	r4, r1
   13a1c:	mov	r5, r0
   13a20:	mov	r0, r1
   13a24:	bl	137ec <__assert_fail@plt+0x2930>
   13a28:	mov	r2, r4
   13a2c:	mov	r1, r5
   13a30:	pop	{r4, r5, r6, lr}
   13a34:	b	10cac <memcpy@plt>
   13a38:	push	{r4, r5, r6, lr}
   13a3c:	mov	r4, r1
   13a40:	mov	r5, r0
   13a44:	mov	r0, r1
   13a48:	bl	13800 <__assert_fail@plt+0x2944>
   13a4c:	mov	r2, r4
   13a50:	mov	r1, r5
   13a54:	pop	{r4, r5, r6, lr}
   13a58:	b	10cac <memcpy@plt>
   13a5c:	push	{r4, r5, r6, lr}
   13a60:	mov	r5, r0
   13a64:	add	r0, r1, #1
   13a68:	mov	r4, r1
   13a6c:	bl	13800 <__assert_fail@plt+0x2944>
   13a70:	mov	r2, #0
   13a74:	mov	r1, r5
   13a78:	strb	r2, [r0, r4]
   13a7c:	mov	r2, r4
   13a80:	pop	{r4, r5, r6, lr}
   13a84:	b	10cac <memcpy@plt>
   13a88:	push	{r4, lr}
   13a8c:	mov	r4, r0
   13a90:	bl	10dcc <strlen@plt>
   13a94:	add	r1, r0, #1
   13a98:	mov	r0, r4
   13a9c:	pop	{r4, lr}
   13aa0:	b	13a14 <__assert_fail@plt+0x2b58>
   13aa4:	ldr	r3, [pc, #44]	; 13ad8 <__assert_fail@plt+0x2c1c>
   13aa8:	mov	r2, #5
   13aac:	mov	r0, #0
   13ab0:	push	{r4, lr}
   13ab4:	ldr	r1, [pc, #32]	; 13adc <__assert_fail@plt+0x2c20>
   13ab8:	ldr	r4, [r3]
   13abc:	bl	10ce8 <dcgettext@plt>
   13ac0:	mov	r3, r0
   13ac4:	ldr	r2, [pc, #20]	; 13ae0 <__assert_fail@plt+0x2c24>
   13ac8:	mov	r1, #0
   13acc:	mov	r0, r4
   13ad0:	bl	10d60 <error@plt>
   13ad4:	bl	10ea4 <abort@plt>
   13ad8:	andeq	r6, r2, ip, ror #1
   13adc:	andeq	r5, r1, r9, ror #10
   13ae0:	andeq	r5, r1, sl, asr r1
   13ae4:	push	{r4, r5, r6, r7, r8, r9, lr}
   13ae8:	sub	sp, sp, #20
   13aec:	mov	r9, r3
   13af0:	mov	r8, r2
   13af4:	mov	r2, r1
   13af8:	mov	r1, #0
   13afc:	mov	r7, r0
   13b00:	ldr	r3, [sp, #56]	; 0x38
   13b04:	ldr	r6, [sp, #64]	; 0x40
   13b08:	str	r3, [sp]
   13b0c:	add	r3, sp, #8
   13b10:	bl	13cb4 <__assert_fail@plt+0x2df8>
   13b14:	subs	r4, r0, #0
   13b18:	bne	13bb4 <__assert_fail@plt+0x2cf8>
   13b1c:	ldrd	r4, [sp, #8]
   13b20:	cmp	r4, r8
   13b24:	sbcs	r3, r5, r9
   13b28:	ldrd	r2, [sp, #48]	; 0x30
   13b2c:	movlt	r1, #1
   13b30:	movge	r1, #0
   13b34:	cmp	r2, r4
   13b38:	sbcs	r3, r3, r5
   13b3c:	movge	r3, r1
   13b40:	orrlt	r3, r1, #1
   13b44:	cmp	r3, #0
   13b48:	beq	13bd4 <__assert_fail@plt+0x2d18>
   13b4c:	bl	10de4 <__errno_location@plt>
   13b50:	cmp	r4, #1073741824	; 0x40000000
   13b54:	sbcs	r3, r5, #0
   13b58:	mov	r3, #75	; 0x4b
   13b5c:	blt	13b9c <__assert_fail@plt+0x2ce0>
   13b60:	str	r3, [r0]
   13b64:	cmp	r6, #0
   13b68:	moveq	r6, #1
   13b6c:	bl	10de4 <__errno_location@plt>
   13b70:	ldr	r4, [r0]
   13b74:	mov	r0, r7
   13b78:	cmp	r4, #22
   13b7c:	moveq	r4, #0
   13b80:	bl	132d8 <__assert_fail@plt+0x241c>
   13b84:	ldr	r2, [pc, #88]	; 13be4 <__assert_fail@plt+0x2d28>
   13b88:	mov	r1, r4
   13b8c:	str	r0, [sp]
   13b90:	mov	r0, r6
   13b94:	ldr	r3, [sp, #60]	; 0x3c
   13b98:	bl	10d60 <error@plt>
   13b9c:	mov	r8, #-1073741824	; 0xc0000000
   13ba0:	mvn	r9, #0
   13ba4:	cmp	r4, r8
   13ba8:	sbcs	r2, r5, r9
   13bac:	movge	r3, #34	; 0x22
   13bb0:	b	13b60 <__assert_fail@plt+0x2ca4>
   13bb4:	bl	10de4 <__errno_location@plt>
   13bb8:	cmp	r4, #1
   13bbc:	moveq	r3, #75	; 0x4b
   13bc0:	beq	13b60 <__assert_fail@plt+0x2ca4>
   13bc4:	cmp	r4, #3
   13bc8:	bne	13b64 <__assert_fail@plt+0x2ca8>
   13bcc:	mov	r3, #0
   13bd0:	b	13b60 <__assert_fail@plt+0x2ca4>
   13bd4:	mov	r0, r4
   13bd8:	mov	r1, r5
   13bdc:	add	sp, sp, #20
   13be0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13be4:	andeq	r5, r1, r6, asr r1
   13be8:	mov	r1, #10
   13bec:	b	13ae4 <__assert_fail@plt+0x2c28>
   13bf0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bf4:	mov	r3, #0
   13bf8:	asr	r5, r1, #31
   13bfc:	mov	r4, r1
   13c00:	mov	ip, r3
   13c04:	strd	r4, [sp]
   13c08:	subs	r2, r2, #1
   13c0c:	bcs	13c1c <__assert_fail@plt+0x2d60>
   13c10:	mov	r0, r3
   13c14:	add	sp, sp, #12
   13c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c1c:	ldrd	r4, [r0]
   13c20:	mov	lr, #0
   13c24:	cmp	r5, r4, asr #31
   13c28:	smulleq	r8, r9, r4, r1
   13c2c:	moveq	r6, r8
   13c30:	moveq	sl, r9
   13c34:	beq	13c7c <__assert_fail@plt+0x2dc0>
   13c38:	cmp	r5, #0
   13c3c:	umull	r8, r9, r4, r1
   13c40:	umull	r6, r7, r1, r5
   13c44:	bge	13c50 <__assert_fail@plt+0x2d94>
   13c48:	subs	r6, r6, ip
   13c4c:	sbc	r7, r7, r1
   13c50:	adds	sl, r6, r9
   13c54:	mov	fp, #0
   13c58:	adc	fp, r7, fp
   13c5c:	cmp	fp, sl, asr #31
   13c60:	ldrne	lr, [sp, #4]
   13c64:	moveq	r6, r8
   13c68:	umullne	r6, r7, r4, r1
   13c6c:	mulne	sl, r4, lr
   13c70:	movne	lr, #1
   13c74:	mlane	sl, r1, r5, sl
   13c78:	addne	sl, sl, r7
   13c7c:	cmp	lr, #0
   13c80:	beq	13cac <__assert_fail@plt+0x2df0>
   13c84:	cmp	r4, #0
   13c88:	sbcs	lr, r5, #0
   13c8c:	mov	lr, #1
   13c90:	mvnge	r4, #0
   13c94:	mvnge	r5, #-2147483648	; 0x80000000
   13c98:	movlt	r4, #0
   13c9c:	movlt	r5, #-2147483648	; 0x80000000
   13ca0:	strd	r4, [r0]
   13ca4:	orr	r3, r3, lr
   13ca8:	b	13c08 <__assert_fail@plt+0x2d4c>
   13cac:	stm	r0, {r6, sl}
   13cb0:	b	13ca4 <__assert_fail@plt+0x2de8>
   13cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb8:	cmp	r2, #36	; 0x24
   13cbc:	sub	sp, sp, #20
   13cc0:	ldr	r5, [sp, #56]	; 0x38
   13cc4:	bls	13cdc <__assert_fail@plt+0x2e20>
   13cc8:	ldr	r3, [pc, #1064]	; 140f8 <__assert_fail@plt+0x323c>
   13ccc:	mov	r2, #85	; 0x55
   13cd0:	ldr	r1, [pc, #1060]	; 140fc <__assert_fail@plt+0x3240>
   13cd4:	ldr	r0, [pc, #1060]	; 14100 <__assert_fail@plt+0x3244>
   13cd8:	bl	10ebc <__assert_fail@plt>
   13cdc:	cmp	r1, #0
   13ce0:	mov	r6, r1
   13ce4:	mov	r8, r0
   13ce8:	addeq	r6, sp, #4
   13cec:	mov	r9, r2
   13cf0:	mov	r7, r3
   13cf4:	bl	10de4 <__errno_location@plt>
   13cf8:	mov	sl, r0
   13cfc:	mov	r4, #0
   13d00:	mov	r2, r9
   13d04:	mov	r1, r6
   13d08:	mov	r0, r8
   13d0c:	str	r4, [sl]
   13d10:	bl	10e2c <strtoimax@plt>
   13d14:	ldr	r9, [r6]
   13d18:	strd	r0, [sp, #8]
   13d1c:	cmp	r9, r8
   13d20:	bne	13d5c <__assert_fail@plt+0x2ea0>
   13d24:	cmp	r5, r4
   13d28:	beq	13d54 <__assert_fail@plt+0x2e98>
   13d2c:	ldrb	r1, [r8]
   13d30:	cmp	r1, r4
   13d34:	beq	13d54 <__assert_fail@plt+0x2e98>
   13d38:	mov	r0, r5
   13d3c:	bl	10dd8 <strchr@plt>
   13d40:	cmp	r0, r4
   13d44:	movne	r2, #1
   13d48:	movne	r3, #0
   13d4c:	strdne	r2, [sp, #8]
   13d50:	bne	13d80 <__assert_fail@plt+0x2ec4>
   13d54:	mov	r4, #4
   13d58:	b	13dac <__assert_fail@plt+0x2ef0>
   13d5c:	ldr	r4, [sl]
   13d60:	cmp	r4, #0
   13d64:	beq	13d74 <__assert_fail@plt+0x2eb8>
   13d68:	cmp	r4, #34	; 0x22
   13d6c:	bne	13d54 <__assert_fail@plt+0x2e98>
   13d70:	mov	r4, #1
   13d74:	cmp	r5, #0
   13d78:	strdeq	r0, [r7]
   13d7c:	beq	13dac <__assert_fail@plt+0x2ef0>
   13d80:	ldrb	r8, [r9]
   13d84:	cmp	r8, #0
   13d88:	beq	1409c <__assert_fail@plt+0x31e0>
   13d8c:	mov	r1, r8
   13d90:	mov	r0, r5
   13d94:	bl	10dd8 <strchr@plt>
   13d98:	cmp	r0, #0
   13d9c:	bne	13db8 <__assert_fail@plt+0x2efc>
   13da0:	ldrd	r2, [sp, #8]
   13da4:	orr	r4, r4, #2
   13da8:	strd	r2, [r7]
   13dac:	mov	r0, r4
   13db0:	add	sp, sp, #20
   13db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db8:	cmp	r8, #84	; 0x54
   13dbc:	beq	13e10 <__assert_fail@plt+0x2f54>
   13dc0:	bhi	13df8 <__assert_fail@plt+0x2f3c>
   13dc4:	cmp	r8, #75	; 0x4b
   13dc8:	beq	13e10 <__assert_fail@plt+0x2f54>
   13dcc:	bhi	13de8 <__assert_fail@plt+0x2f2c>
   13dd0:	cmp	r8, #69	; 0x45
   13dd4:	beq	13e10 <__assert_fail@plt+0x2f54>
   13dd8:	cmp	r8, #71	; 0x47
   13ddc:	beq	13e10 <__assert_fail@plt+0x2f54>
   13de0:	mov	r5, #1
   13de4:	b	13f0c <__assert_fail@plt+0x3050>
   13de8:	cmp	r8, #77	; 0x4d
   13dec:	beq	13e10 <__assert_fail@plt+0x2f54>
   13df0:	cmp	r8, #80	; 0x50
   13df4:	b	13ddc <__assert_fail@plt+0x2f20>
   13df8:	cmp	r8, #103	; 0x67
   13dfc:	beq	13e10 <__assert_fail@plt+0x2f54>
   13e00:	bhi	13ee4 <__assert_fail@plt+0x3028>
   13e04:	sub	r3, r8, #89	; 0x59
   13e08:	cmp	r3, #1
   13e0c:	bhi	13de0 <__assert_fail@plt+0x2f24>
   13e10:	mov	r1, #48	; 0x30
   13e14:	mov	r0, r5
   13e18:	bl	10dd8 <strchr@plt>
   13e1c:	cmp	r0, #0
   13e20:	beq	13de0 <__assert_fail@plt+0x2f24>
   13e24:	ldrb	r3, [r9, #1]
   13e28:	cmp	r3, #68	; 0x44
   13e2c:	moveq	r5, #2
   13e30:	moveq	r1, #1000	; 0x3e8
   13e34:	beq	13e54 <__assert_fail@plt+0x2f98>
   13e38:	cmp	r3, #105	; 0x69
   13e3c:	beq	13efc <__assert_fail@plt+0x3040>
   13e40:	cmp	r3, #66	; 0x42
   13e44:	moveq	r5, #2
   13e48:	movne	r5, #1
   13e4c:	moveq	r1, #1000	; 0x3e8
   13e50:	movne	r1, #1024	; 0x400
   13e54:	cmp	r8, #89	; 0x59
   13e58:	beq	140e0 <__assert_fail@plt+0x3224>
   13e5c:	bhi	13f34 <__assert_fail@plt+0x3078>
   13e60:	cmp	r8, #75	; 0x4b
   13e64:	beq	13f74 <__assert_fail@plt+0x30b8>
   13e68:	bhi	13f14 <__assert_fail@plt+0x3058>
   13e6c:	cmp	r8, #69	; 0x45
   13e70:	beq	140bc <__assert_fail@plt+0x3200>
   13e74:	cmp	r8, #71	; 0x47
   13e78:	beq	140c8 <__assert_fail@plt+0x320c>
   13e7c:	cmp	r8, #66	; 0x42
   13e80:	bne	13da0 <__assert_fail@plt+0x2ee4>
   13e84:	ldrd	r2, [sp, #8]
   13e88:	mov	r0, #0
   13e8c:	cmp	r3, r2, asr #31
   13e90:	lsleq	r1, r3, #10
   13e94:	lsleq	r8, r2, #10
   13e98:	orreq	r1, r1, r2, lsr #22
   13e9c:	beq	14054 <__assert_fail@plt+0x3198>
   13ea0:	mov	r1, #1024	; 0x400
   13ea4:	cmp	r3, #0
   13ea8:	lsr	sl, r2, #22
   13eac:	lsl	lr, r2, #10
   13eb0:	umull	r8, r9, r1, r3
   13eb4:	bge	13ec0 <__assert_fail@plt+0x3004>
   13eb8:	subs	r8, r8, r0
   13ebc:	sbc	r9, r9, r1
   13ec0:	adds	r1, r8, sl
   13ec4:	mov	ip, #0
   13ec8:	adc	ip, r9, ip
   13ecc:	cmp	ip, r1, asr #31
   13ed0:	beq	14050 <__assert_fail@plt+0x3194>
   13ed4:	lsl	r1, r3, #10
   13ed8:	lsl	r8, r2, #10
   13edc:	orr	r1, r1, r2, lsr #22
   13ee0:	b	140b4 <__assert_fail@plt+0x31f8>
   13ee4:	cmp	r8, #109	; 0x6d
   13ee8:	beq	13e10 <__assert_fail@plt+0x2f54>
   13eec:	cmp	r8, #116	; 0x74
   13ef0:	beq	13e10 <__assert_fail@plt+0x2f54>
   13ef4:	cmp	r8, #107	; 0x6b
   13ef8:	b	13ddc <__assert_fail@plt+0x2f20>
   13efc:	ldrb	r3, [r9, #2]
   13f00:	cmp	r3, #66	; 0x42
   13f04:	movne	r5, #1
   13f08:	moveq	r5, #3
   13f0c:	mov	r1, #1024	; 0x400
   13f10:	b	13e54 <__assert_fail@plt+0x2f98>
   13f14:	cmp	r8, #80	; 0x50
   13f18:	beq	140d0 <__assert_fail@plt+0x3214>
   13f1c:	cmp	r8, #84	; 0x54
   13f20:	beq	140d8 <__assert_fail@plt+0x321c>
   13f24:	cmp	r8, #77	; 0x4d
   13f28:	bne	13da0 <__assert_fail@plt+0x2ee4>
   13f2c:	mov	r2, #2
   13f30:	b	140c0 <__assert_fail@plt+0x3204>
   13f34:	cmp	r8, #103	; 0x67
   13f38:	beq	140c8 <__assert_fail@plt+0x320c>
   13f3c:	bhi	13f60 <__assert_fail@plt+0x30a4>
   13f40:	cmp	r8, #98	; 0x62
   13f44:	beq	14000 <__assert_fail@plt+0x3144>
   13f48:	cmp	r8, #99	; 0x63
   13f4c:	beq	140f0 <__assert_fail@plt+0x3234>
   13f50:	cmp	r8, #90	; 0x5a
   13f54:	bne	13da0 <__assert_fail@plt+0x2ee4>
   13f58:	mov	r2, #7
   13f5c:	b	140c0 <__assert_fail@plt+0x3204>
   13f60:	cmp	r8, #109	; 0x6d
   13f64:	beq	13f2c <__assert_fail@plt+0x3070>
   13f68:	bhi	13f7c <__assert_fail@plt+0x30c0>
   13f6c:	cmp	r8, #107	; 0x6b
   13f70:	bne	13da0 <__assert_fail@plt+0x2ee4>
   13f74:	mov	r2, #1
   13f78:	b	140c0 <__assert_fail@plt+0x3204>
   13f7c:	cmp	r8, #116	; 0x74
   13f80:	beq	140d8 <__assert_fail@plt+0x321c>
   13f84:	cmp	r8, #119	; 0x77
   13f88:	bne	13da0 <__assert_fail@plt+0x2ee4>
   13f8c:	ldrd	r2, [sp, #8]
   13f90:	mov	r0, #0
   13f94:	adds	ip, r2, r2
   13f98:	adc	r1, r3, r3
   13f9c:	cmp	r3, r2, asr #31
   13fa0:	beq	13fec <__assert_fail@plt+0x3130>
   13fa4:	mov	r9, #0
   13fa8:	adds	ip, r2, r2
   13fac:	mov	r1, #2
   13fb0:	adc	sl, r9, r9
   13fb4:	cmp	r3, #0
   13fb8:	umull	r8, r9, r1, r3
   13fbc:	bge	13fcc <__assert_fail@plt+0x3110>
   13fc0:	mov	lr, #0
   13fc4:	subs	r8, r8, lr
   13fc8:	sbc	r9, r9, r1
   13fcc:	adds	r1, r8, sl
   13fd0:	mov	lr, #0
   13fd4:	adc	lr, r9, lr
   13fd8:	cmp	lr, r1, asr #31
   13fdc:	beq	13fec <__assert_fail@plt+0x3130>
   13fe0:	adds	ip, r2, r2
   13fe4:	mov	r0, #1
   13fe8:	adc	r1, r3, r3
   13fec:	cmp	r0, #0
   13ff0:	streq	ip, [sp, #8]
   13ff4:	bne	14060 <__assert_fail@plt+0x31a4>
   13ff8:	str	r1, [sp, #12]
   13ffc:	b	14080 <__assert_fail@plt+0x31c4>
   14000:	ldrd	r2, [sp, #8]
   14004:	mov	r0, #0
   14008:	cmp	r3, r2, asr #31
   1400c:	lsleq	r1, r3, #9
   14010:	lsleq	r8, r2, #9
   14014:	orreq	r1, r1, r2, lsr #23
   14018:	beq	14054 <__assert_fail@plt+0x3198>
   1401c:	mov	r1, #512	; 0x200
   14020:	cmp	r3, #0
   14024:	lsr	sl, r2, #23
   14028:	lsl	lr, r2, #9
   1402c:	umull	r8, r9, r1, r3
   14030:	bge	1403c <__assert_fail@plt+0x3180>
   14034:	subs	r8, r8, r0
   14038:	sbc	r9, r9, r1
   1403c:	adds	r1, r8, sl
   14040:	mov	ip, #0
   14044:	adc	ip, r9, ip
   14048:	cmp	ip, r1, asr #31
   1404c:	bne	140a8 <__assert_fail@plt+0x31ec>
   14050:	mov	r8, lr
   14054:	cmp	r0, #0
   14058:	streq	r8, [sp, #8]
   1405c:	beq	13ff8 <__assert_fail@plt+0x313c>
   14060:	cmp	r2, #0
   14064:	mov	r0, #1
   14068:	sbcs	r3, r3, #0
   1406c:	mvnge	r2, #0
   14070:	mvnge	r3, #-2147483648	; 0x80000000
   14074:	movlt	r2, #0
   14078:	movlt	r3, #-2147483648	; 0x80000000
   1407c:	strd	r2, [sp, #8]
   14080:	ldr	r3, [r6]
   14084:	orr	r4, r4, r0
   14088:	add	r2, r3, r5
   1408c:	str	r2, [r6]
   14090:	ldrb	r3, [r3, r5]
   14094:	cmp	r3, #0
   14098:	orrne	r4, r4, #2
   1409c:	ldrd	r2, [sp, #8]
   140a0:	strd	r2, [r7]
   140a4:	b	13dac <__assert_fail@plt+0x2ef0>
   140a8:	lsl	r1, r3, #9
   140ac:	lsl	r8, r2, #9
   140b0:	orr	r1, r1, r2, lsr #23
   140b4:	mov	r0, #1
   140b8:	b	14054 <__assert_fail@plt+0x3198>
   140bc:	mov	r2, #6
   140c0:	add	r0, sp, #8
   140c4:	b	140e8 <__assert_fail@plt+0x322c>
   140c8:	mov	r2, #3
   140cc:	b	140c0 <__assert_fail@plt+0x3204>
   140d0:	mov	r2, #5
   140d4:	b	140c0 <__assert_fail@plt+0x3204>
   140d8:	mov	r2, #4
   140dc:	b	140c0 <__assert_fail@plt+0x3204>
   140e0:	mov	r2, #8
   140e4:	add	r0, sp, r2
   140e8:	bl	13bf0 <__assert_fail@plt+0x2d34>
   140ec:	b	14080 <__assert_fail@plt+0x31c4>
   140f0:	mov	r0, #0
   140f4:	b	14080 <__assert_fail@plt+0x31c4>
   140f8:	andeq	r5, r1, sl, ror r5
   140fc:	andeq	r5, r1, r5, lsl #11
   14100:	muleq	r1, r3, r5
   14104:	cmp	r1, #0
   14108:	cmpne	r0, #0
   1410c:	beq	14144 <__assert_fail@plt+0x3288>
   14110:	push	{r4, r5, r6, lr}
   14114:	umull	r4, r5, r0, r1
   14118:	adds	r3, r5, #0
   1411c:	movne	r3, #1
   14120:	cmp	r4, #0
   14124:	blt	14130 <__assert_fail@plt+0x3274>
   14128:	cmp	r3, #0
   1412c:	beq	14150 <__assert_fail@plt+0x3294>
   14130:	bl	10de4 <__errno_location@plt>
   14134:	mov	r3, #12
   14138:	str	r3, [r0]
   1413c:	mov	r0, #0
   14140:	pop	{r4, r5, r6, pc}
   14144:	mov	r1, #1
   14148:	mov	r0, r1
   1414c:	b	10c58 <calloc@plt>
   14150:	pop	{r4, r5, r6, lr}
   14154:	b	1414c <__assert_fail@plt+0x3290>
   14158:	cmp	r0, #0
   1415c:	beq	1417c <__assert_fail@plt+0x32c0>
   14160:	bge	14180 <__assert_fail@plt+0x32c4>
   14164:	push	{r4, lr}
   14168:	bl	10de4 <__errno_location@plt>
   1416c:	mov	r3, #12
   14170:	str	r3, [r0]
   14174:	mov	r0, #0
   14178:	pop	{r4, pc}
   1417c:	mov	r0, #1
   14180:	b	10d78 <malloc@plt>
   14184:	cmp	r0, #0
   14188:	bne	14194 <__assert_fail@plt+0x32d8>
   1418c:	mov	r0, r1
   14190:	b	14158 <__assert_fail@plt+0x329c>
   14194:	cmp	r1, #0
   14198:	push	{r4, lr}
   1419c:	bne	141ac <__assert_fail@plt+0x32f0>
   141a0:	bl	14330 <__assert_fail@plt+0x3474>
   141a4:	mov	r0, #0
   141a8:	pop	{r4, pc}
   141ac:	blt	141b8 <__assert_fail@plt+0x32fc>
   141b0:	pop	{r4, lr}
   141b4:	b	10cf4 <realloc@plt>
   141b8:	bl	10de4 <__errno_location@plt>
   141bc:	mov	r3, #12
   141c0:	str	r3, [r0]
   141c4:	b	141a4 <__assert_fail@plt+0x32e8>
   141c8:	push	{r4, r5, r6, lr}
   141cc:	mov	r4, r0
   141d0:	bl	10d3c <__fpending@plt>
   141d4:	mov	r5, r0
   141d8:	mov	r0, r4
   141dc:	bl	10d48 <ferror_unlocked@plt>
   141e0:	mov	r6, r0
   141e4:	mov	r0, r4
   141e8:	bl	14238 <__assert_fail@plt+0x337c>
   141ec:	cmp	r6, #0
   141f0:	mov	r4, r0
   141f4:	bne	14220 <__assert_fail@plt+0x3364>
   141f8:	cmp	r0, #0
   141fc:	beq	14218 <__assert_fail@plt+0x335c>
   14200:	cmp	r5, #0
   14204:	bne	14230 <__assert_fail@plt+0x3374>
   14208:	bl	10de4 <__errno_location@plt>
   1420c:	ldr	r4, [r0]
   14210:	subs	r4, r4, #9
   14214:	mvnne	r4, #0
   14218:	mov	r0, r4
   1421c:	pop	{r4, r5, r6, pc}
   14220:	cmp	r0, #0
   14224:	bne	14230 <__assert_fail@plt+0x3374>
   14228:	bl	10de4 <__errno_location@plt>
   1422c:	str	r4, [r0]
   14230:	mvn	r4, #0
   14234:	b	14218 <__assert_fail@plt+0x335c>
   14238:	push	{r0, r1, r2, r4, r5, lr}
   1423c:	mov	r4, r0
   14240:	bl	10e14 <fileno@plt>
   14244:	cmp	r0, #0
   14248:	mov	r0, r4
   1424c:	bge	1425c <__assert_fail@plt+0x33a0>
   14250:	add	sp, sp, #12
   14254:	pop	{r4, r5, lr}
   14258:	b	10e38 <fclose@plt>
   1425c:	bl	10d90 <__freading@plt>
   14260:	cmp	r0, #0
   14264:	bne	142a0 <__assert_fail@plt+0x33e4>
   14268:	mov	r0, r4
   1426c:	bl	142e0 <__assert_fail@plt+0x3424>
   14270:	cmp	r0, #0
   14274:	bne	142d4 <__assert_fail@plt+0x3418>
   14278:	mov	r5, #0
   1427c:	mov	r0, r4
   14280:	bl	10e38 <fclose@plt>
   14284:	cmp	r5, #0
   14288:	beq	14298 <__assert_fail@plt+0x33dc>
   1428c:	bl	10de4 <__errno_location@plt>
   14290:	str	r5, [r0]
   14294:	mvn	r0, #0
   14298:	add	sp, sp, #12
   1429c:	pop	{r4, r5, pc}
   142a0:	mov	r0, r4
   142a4:	bl	10e14 <fileno@plt>
   142a8:	mov	r3, #1
   142ac:	mov	r2, #0
   142b0:	str	r3, [sp]
   142b4:	mov	r3, #0
   142b8:	bl	10d24 <lseek64@plt>
   142bc:	mvn	r3, #0
   142c0:	mvn	r2, #0
   142c4:	cmp	r1, r3
   142c8:	cmpeq	r0, r2
   142cc:	bne	14268 <__assert_fail@plt+0x33ac>
   142d0:	b	14278 <__assert_fail@plt+0x33bc>
   142d4:	bl	10de4 <__errno_location@plt>
   142d8:	ldr	r5, [r0]
   142dc:	b	1427c <__assert_fail@plt+0x33c0>
   142e0:	push	{r0, r1, r4, lr}
   142e4:	subs	r4, r0, #0
   142e8:	bne	142fc <__assert_fail@plt+0x3440>
   142ec:	mov	r0, r4
   142f0:	add	sp, sp, #8
   142f4:	pop	{r4, lr}
   142f8:	b	10c88 <fflush@plt>
   142fc:	bl	10d90 <__freading@plt>
   14300:	cmp	r0, #0
   14304:	beq	142ec <__assert_fail@plt+0x3430>
   14308:	ldr	r3, [r4]
   1430c:	tst	r3, #256	; 0x100
   14310:	beq	142ec <__assert_fail@plt+0x3430>
   14314:	mov	r3, #1
   14318:	mov	r2, #0
   1431c:	mov	r0, r4
   14320:	str	r3, [sp]
   14324:	mov	r3, #0
   14328:	bl	14380 <__assert_fail@plt+0x34c4>
   1432c:	b	142ec <__assert_fail@plt+0x3430>
   14330:	push	{r0, r1, r2, r4, r5, lr}
   14334:	mov	r5, r0
   14338:	bl	10de4 <__errno_location@plt>
   1433c:	mov	r4, r0
   14340:	mov	r0, r5
   14344:	ldr	r3, [r4]
   14348:	str	r3, [sp]
   1434c:	str	r3, [sp, #4]
   14350:	mov	r3, #0
   14354:	str	r3, [r4]
   14358:	bl	10c94 <free@plt>
   1435c:	ldr	r3, [r4]
   14360:	add	r2, sp, #8
   14364:	clz	r3, r3
   14368:	lsr	r3, r3, #5
   1436c:	add	r3, r2, r3, lsl #2
   14370:	ldr	r3, [r3, #-8]
   14374:	str	r3, [r4]
   14378:	add	sp, sp, #12
   1437c:	pop	{r4, r5, pc}
   14380:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   14384:	mov	r4, r0
   14388:	ldmib	r0, {ip, lr}
   1438c:	ldr	r8, [sp, #32]
   14390:	cmp	lr, ip
   14394:	bne	14404 <__assert_fail@plt+0x3548>
   14398:	ldr	ip, [r0, #16]
   1439c:	ldr	lr, [r0, #20]
   143a0:	cmp	lr, ip
   143a4:	bne	14404 <__assert_fail@plt+0x3548>
   143a8:	ldr	r5, [r0, #36]	; 0x24
   143ac:	cmp	r5, #0
   143b0:	bne	14404 <__assert_fail@plt+0x3548>
   143b4:	mov	r6, r2
   143b8:	mov	r7, r3
   143bc:	bl	10e14 <fileno@plt>
   143c0:	mov	r2, r6
   143c4:	mov	r3, r7
   143c8:	str	r8, [sp]
   143cc:	bl	10d24 <lseek64@plt>
   143d0:	mvn	r3, #0
   143d4:	mvn	r2, #0
   143d8:	cmp	r1, r3
   143dc:	cmpeq	r0, r2
   143e0:	mvneq	r0, #0
   143e4:	beq	143fc <__assert_fail@plt+0x3540>
   143e8:	ldr	r3, [r4]
   143ec:	strd	r0, [r4, #80]	; 0x50
   143f0:	mov	r0, r5
   143f4:	bic	r3, r3, #16
   143f8:	str	r3, [r4]
   143fc:	add	sp, sp, #8
   14400:	pop	{r4, r5, r6, r7, r8, pc}
   14404:	mov	r0, r4
   14408:	str	r8, [sp, #32]
   1440c:	add	sp, sp, #8
   14410:	pop	{r4, r5, r6, r7, r8, lr}
   14414:	b	10e44 <fseeko64@plt>
   14418:	b	14158 <__assert_fail@plt+0x329c>
   1441c:	cmp	r1, #0
   14420:	orreq	r1, r1, #1
   14424:	b	14184 <__assert_fail@plt+0x32c8>
   14428:	b	14104 <__assert_fail@plt+0x3248>
   1442c:	cmp	r2, #0
   14430:	cmpne	r1, #0
   14434:	moveq	r2, #1
   14438:	moveq	r1, r2
   1443c:	b	144c4 <__assert_fail@plt+0x3608>
   14440:	push	{r4, lr}
   14444:	mov	r0, #14
   14448:	bl	10e68 <nl_langinfo@plt>
   1444c:	cmp	r0, #0
   14450:	beq	14468 <__assert_fail@plt+0x35ac>
   14454:	ldrb	r2, [r0]
   14458:	ldr	r3, [pc, #16]	; 14470 <__assert_fail@plt+0x35b4>
   1445c:	cmp	r2, #0
   14460:	moveq	r0, r3
   14464:	pop	{r4, pc}
   14468:	ldr	r0, [pc]	; 14470 <__assert_fail@plt+0x35b4>
   1446c:	pop	{r4, pc}
   14470:			; <UNDEFINED> instruction: 0x000155b9
   14474:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14478:	subs	r5, r0, #0
   1447c:	mov	r7, r2
   14480:	addeq	r5, sp, #4
   14484:	mov	r6, r1
   14488:	mov	r0, r5
   1448c:	bl	10d54 <mbrtowc@plt>
   14490:	cmp	r7, #0
   14494:	cmnne	r0, #3
   14498:	mov	r4, r0
   1449c:	bls	144b8 <__assert_fail@plt+0x35fc>
   144a0:	mov	r0, #0
   144a4:	bl	144f0 <__assert_fail@plt+0x3634>
   144a8:	cmp	r0, #0
   144ac:	ldrbeq	r3, [r6]
   144b0:	moveq	r4, #1
   144b4:	streq	r3, [r5]
   144b8:	mov	r0, r4
   144bc:	add	sp, sp, #12
   144c0:	pop	{r4, r5, r6, r7, pc}
   144c4:	umull	r2, r3, r1, r2
   144c8:	cmp	r3, #0
   144cc:	bne	144d8 <__assert_fail@plt+0x361c>
   144d0:	mov	r1, r2
   144d4:	b	14184 <__assert_fail@plt+0x32c8>
   144d8:	push	{r4, lr}
   144dc:	bl	10de4 <__errno_location@plt>
   144e0:	mov	r3, #12
   144e4:	str	r3, [r0]
   144e8:	mov	r0, #0
   144ec:	pop	{r4, pc}
   144f0:	push	{lr}		; (str lr, [sp, #-4]!)
   144f4:	sub	sp, sp, #268	; 0x10c
   144f8:	movw	r2, #257	; 0x101
   144fc:	add	r1, sp, #4
   14500:	bl	1454c <__assert_fail@plt+0x3690>
   14504:	cmp	r0, #0
   14508:	movne	r0, #0
   1450c:	bne	1453c <__assert_fail@plt+0x3680>
   14510:	ldr	r1, [pc, #44]	; 14544 <__assert_fail@plt+0x3688>
   14514:	add	r0, sp, #4
   14518:	bl	10c7c <strcmp@plt>
   1451c:	cmp	r0, #0
   14520:	beq	14538 <__assert_fail@plt+0x367c>
   14524:	ldr	r1, [pc, #28]	; 14548 <__assert_fail@plt+0x368c>
   14528:	add	r0, sp, #4
   1452c:	bl	10c7c <strcmp@plt>
   14530:	adds	r0, r0, #0
   14534:	movne	r0, #1
   14538:	and	r0, r0, #1
   1453c:	add	sp, sp, #268	; 0x10c
   14540:	pop	{pc}		; (ldr pc, [sp], #4)
   14544:			; <UNDEFINED> instruction: 0x000155bf
   14548:	andeq	r5, r1, r1, asr #11
   1454c:	push	{r4, r5, r6, lr}
   14550:	mov	r5, r1
   14554:	mov	r1, #0
   14558:	mov	r4, r2
   1455c:	bl	10e50 <setlocale@plt>
   14560:	subs	r6, r0, #0
   14564:	bne	14578 <__assert_fail@plt+0x36bc>
   14568:	cmp	r4, #0
   1456c:	mov	r0, #22
   14570:	strbne	r6, [r5]
   14574:	pop	{r4, r5, r6, pc}
   14578:	bl	10dcc <strlen@plt>
   1457c:	cmp	r4, r0
   14580:	bls	1459c <__assert_fail@plt+0x36e0>
   14584:	add	r2, r0, #1
   14588:	mov	r1, r6
   1458c:	mov	r0, r5
   14590:	bl	10cac <memcpy@plt>
   14594:	mov	r0, #0
   14598:	pop	{r4, r5, r6, pc}
   1459c:	cmp	r4, #0
   145a0:	beq	145c0 <__assert_fail@plt+0x3704>
   145a4:	sub	r4, r4, #1
   145a8:	mov	r1, r6
   145ac:	mov	r2, r4
   145b0:	mov	r0, r5
   145b4:	bl	10cac <memcpy@plt>
   145b8:	mov	r3, #0
   145bc:	strb	r3, [r5, r4]
   145c0:	mov	r0, #34	; 0x22
   145c4:	pop	{r4, r5, r6, pc}
   145c8:	mov	r1, #0
   145cc:	b	10e50 <setlocale@plt>
   145d0:	cmp	r3, #0
   145d4:	cmpeq	r2, #0
   145d8:	bne	145fc <__assert_fail@plt+0x3740>
   145dc:	cmp	r1, #0
   145e0:	movlt	r1, #-2147483648	; 0x80000000
   145e4:	movlt	r0, #0
   145e8:	blt	145f8 <__assert_fail@plt+0x373c>
   145ec:	cmpeq	r0, #0
   145f0:	mvnne	r1, #-2147483648	; 0x80000000
   145f4:	mvnne	r0, #0
   145f8:	b	146a4 <__assert_fail@plt+0x37e8>
   145fc:	sub	sp, sp, #8
   14600:	push	{sp, lr}
   14604:	cmp	r1, #0
   14608:	blt	14628 <__assert_fail@plt+0x376c>
   1460c:	cmp	r3, #0
   14610:	blt	1465c <__assert_fail@plt+0x37a0>
   14614:	bl	146b4 <__assert_fail@plt+0x37f8>
   14618:	ldr	lr, [sp, #4]
   1461c:	add	sp, sp, #8
   14620:	pop	{r2, r3}
   14624:	bx	lr
   14628:	rsbs	r0, r0, #0
   1462c:	sbc	r1, r1, r1, lsl #1
   14630:	cmp	r3, #0
   14634:	blt	14680 <__assert_fail@plt+0x37c4>
   14638:	bl	146b4 <__assert_fail@plt+0x37f8>
   1463c:	ldr	lr, [sp, #4]
   14640:	add	sp, sp, #8
   14644:	pop	{r2, r3}
   14648:	rsbs	r0, r0, #0
   1464c:	sbc	r1, r1, r1, lsl #1
   14650:	rsbs	r2, r2, #0
   14654:	sbc	r3, r3, r3, lsl #1
   14658:	bx	lr
   1465c:	rsbs	r2, r2, #0
   14660:	sbc	r3, r3, r3, lsl #1
   14664:	bl	146b4 <__assert_fail@plt+0x37f8>
   14668:	ldr	lr, [sp, #4]
   1466c:	add	sp, sp, #8
   14670:	pop	{r2, r3}
   14674:	rsbs	r0, r0, #0
   14678:	sbc	r1, r1, r1, lsl #1
   1467c:	bx	lr
   14680:	rsbs	r2, r2, #0
   14684:	sbc	r3, r3, r3, lsl #1
   14688:	bl	146b4 <__assert_fail@plt+0x37f8>
   1468c:	ldr	lr, [sp, #4]
   14690:	add	sp, sp, #8
   14694:	pop	{r2, r3}
   14698:	rsbs	r2, r2, #0
   1469c:	sbc	r3, r3, r3, lsl #1
   146a0:	bx	lr
   146a4:	push	{r1, lr}
   146a8:	mov	r0, #8
   146ac:	bl	10c70 <raise@plt>
   146b0:	pop	{r1, pc}
   146b4:	cmp	r1, r3
   146b8:	cmpeq	r0, r2
   146bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c0:	mov	r4, r0
   146c4:	movcc	r0, #0
   146c8:	mov	r5, r1
   146cc:	ldr	lr, [sp, #36]	; 0x24
   146d0:	movcc	r1, r0
   146d4:	bcc	147d0 <__assert_fail@plt+0x3914>
   146d8:	cmp	r3, #0
   146dc:	clzeq	ip, r2
   146e0:	clzne	ip, r3
   146e4:	addeq	ip, ip, #32
   146e8:	cmp	r5, #0
   146ec:	clzeq	r1, r4
   146f0:	addeq	r1, r1, #32
   146f4:	clzne	r1, r5
   146f8:	sub	ip, ip, r1
   146fc:	sub	sl, ip, #32
   14700:	lsl	r9, r3, ip
   14704:	rsb	fp, ip, #32
   14708:	orr	r9, r9, r2, lsl sl
   1470c:	orr	r9, r9, r2, lsr fp
   14710:	lsl	r8, r2, ip
   14714:	cmp	r5, r9
   14718:	cmpeq	r4, r8
   1471c:	movcc	r0, #0
   14720:	movcc	r1, r0
   14724:	bcc	14740 <__assert_fail@plt+0x3884>
   14728:	mov	r0, #1
   1472c:	subs	r4, r4, r8
   14730:	lsl	r1, r0, sl
   14734:	orr	r1, r1, r0, lsr fp
   14738:	lsl	r0, r0, ip
   1473c:	sbc	r5, r5, r9
   14740:	cmp	ip, #0
   14744:	beq	147d0 <__assert_fail@plt+0x3914>
   14748:	lsr	r6, r8, #1
   1474c:	orr	r6, r6, r9, lsl #31
   14750:	lsr	r7, r9, #1
   14754:	mov	r2, ip
   14758:	b	1477c <__assert_fail@plt+0x38c0>
   1475c:	subs	r3, r4, r6
   14760:	sbc	r8, r5, r7
   14764:	adds	r3, r3, r3
   14768:	adc	r8, r8, r8
   1476c:	adds	r4, r3, #1
   14770:	adc	r5, r8, #0
   14774:	subs	r2, r2, #1
   14778:	beq	14798 <__assert_fail@plt+0x38dc>
   1477c:	cmp	r5, r7
   14780:	cmpeq	r4, r6
   14784:	bcs	1475c <__assert_fail@plt+0x38a0>
   14788:	adds	r4, r4, r4
   1478c:	adc	r5, r5, r5
   14790:	subs	r2, r2, #1
   14794:	bne	1477c <__assert_fail@plt+0x38c0>
   14798:	lsr	r3, r4, ip
   1479c:	orr	r3, r3, r5, lsl fp
   147a0:	lsr	r2, r5, ip
   147a4:	orr	r3, r3, r5, lsr sl
   147a8:	adds	r0, r0, r4
   147ac:	mov	r4, r3
   147b0:	lsl	r3, r2, ip
   147b4:	orr	r3, r3, r4, lsl sl
   147b8:	lsl	ip, r4, ip
   147bc:	orr	r3, r3, r4, lsr fp
   147c0:	adc	r1, r1, r5
   147c4:	subs	r0, r0, ip
   147c8:	mov	r5, r2
   147cc:	sbc	r1, r1, r3
   147d0:	cmp	lr, #0
   147d4:	strdne	r4, [lr]
   147d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147e0:	mov	r7, r0
   147e4:	ldr	r6, [pc, #72]	; 14834 <__assert_fail@plt+0x3978>
   147e8:	ldr	r5, [pc, #72]	; 14838 <__assert_fail@plt+0x397c>
   147ec:	add	r6, pc, r6
   147f0:	add	r5, pc, r5
   147f4:	sub	r6, r6, r5
   147f8:	mov	r8, r1
   147fc:	mov	r9, r2
   14800:	bl	10c38 <calloc@plt-0x20>
   14804:	asrs	r6, r6, #2
   14808:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1480c:	mov	r4, #0
   14810:	add	r4, r4, #1
   14814:	ldr	r3, [r5], #4
   14818:	mov	r2, r9
   1481c:	mov	r1, r8
   14820:	mov	r0, r7
   14824:	blx	r3
   14828:	cmp	r6, r4
   1482c:	bne	14810 <__assert_fail@plt+0x3954>
   14830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14834:	andeq	r1, r1, r0, lsr #14
   14838:	andeq	r1, r1, r8, lsl r7
   1483c:	bx	lr
   14840:	ldr	r3, [pc, #12]	; 14854 <__assert_fail@plt+0x3998>
   14844:	mov	r1, #0
   14848:	add	r3, pc, r3
   1484c:	ldr	r2, [r3]
   14850:	b	10df0 <__cxa_atexit@plt>
   14854:	muleq	r1, r4, r8
   14858:	mov	r2, r1
   1485c:	mov	r1, r0
   14860:	mov	r0, #3
   14864:	b	10e80 <__xstat64@plt>
   14868:	mov	r2, r1
   1486c:	mov	r1, r0
   14870:	mov	r0, #3
   14874:	b	10d18 <__fxstat64@plt>

Disassembly of section .fini:

00014878 <.fini>:
   14878:	push	{r3, lr}
   1487c:	pop	{r3, pc}
