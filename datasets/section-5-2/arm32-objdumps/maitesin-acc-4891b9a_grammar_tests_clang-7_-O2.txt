
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e10 <.init>:
   11e10:	push	{r3, lr}
   11e14:	bl	1205c <_start@@Base+0x3c>
   11e18:	pop	{r3, pc}

Disassembly of section .plt:

00011e1c <fdopen@plt-0x14>:
   11e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e20:	ldr	lr, [pc, #4]	; 11e2c <fdopen@plt-0x4>
   11e24:	add	lr, pc, lr
   11e28:	ldr	pc, [lr, #8]!
   11e2c:	ldrdeq	fp, [r1], -r4

00011e30 <fdopen@plt>:
   11e30:	add	ip, pc, #0, 12
   11e34:	add	ip, ip, #110592	; 0x1b000
   11e38:	ldr	pc, [ip, #468]!	; 0x1d4

00011e3c <setbuf@plt>:
   11e3c:	add	ip, pc, #0, 12
   11e40:	add	ip, ip, #110592	; 0x1b000
   11e44:	ldr	pc, [ip, #460]!	; 0x1cc

00011e48 <strtol@plt>:
   11e48:	add	ip, pc, #0, 12
   11e4c:	add	ip, ip, #110592	; 0x1b000
   11e50:	ldr	pc, [ip, #452]!	; 0x1c4

00011e54 <printf@plt>:
   11e54:	add	ip, pc, #0, 12
   11e58:	add	ip, ip, #110592	; 0x1b000
   11e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00011e60 <fflush@plt>:
   11e60:	add	ip, pc, #0, 12
   11e64:	add	ip, ip, #110592	; 0x1b000
   11e68:	ldr	pc, [ip, #436]!	; 0x1b4

00011e6c <free@plt>:
   11e6c:	add	ip, pc, #0, 12
   11e70:	add	ip, ip, #110592	; 0x1b000
   11e74:	ldr	pc, [ip, #428]!	; 0x1ac

00011e78 <memcpy@plt>:
   11e78:	add	ip, pc, #0, 12
   11e7c:	add	ip, ip, #110592	; 0x1b000
   11e80:	ldr	pc, [ip, #420]!	; 0x1a4

00011e84 <mmap64@plt>:
   11e84:	add	ip, pc, #0, 12
   11e88:	add	ip, ip, #110592	; 0x1b000
   11e8c:	ldr	pc, [ip, #412]!	; 0x19c

00011e90 <ftell@plt>:
   11e90:	add	ip, pc, #0, 12
   11e94:	add	ip, ip, #110592	; 0x1b000
   11e98:	ldr	pc, [ip, #404]!	; 0x194

00011e9c <uname@plt>:
   11e9c:	add	ip, pc, #0, 12
   11ea0:	add	ip, ip, #110592	; 0x1b000
   11ea4:	ldr	pc, [ip, #396]!	; 0x18c

00011ea8 <strdup@plt>:
   11ea8:	add	ip, pc, #0, 12
   11eac:	add	ip, ip, #110592	; 0x1b000
   11eb0:	ldr	pc, [ip, #388]!	; 0x184

00011eb4 <realloc@plt>:
   11eb4:	add	ip, pc, #0, 12
   11eb8:	add	ip, ip, #110592	; 0x1b000
   11ebc:	ldr	pc, [ip, #380]!	; 0x17c

00011ec0 <fwrite@plt>:
   11ec0:	add	ip, pc, #0, 12
   11ec4:	add	ip, ip, #110592	; 0x1b000
   11ec8:	ldr	pc, [ip, #372]!	; 0x174

00011ecc <open64@plt>:
   11ecc:	add	ip, pc, #0, 12
   11ed0:	add	ip, ip, #110592	; 0x1b000
   11ed4:	ldr	pc, [ip, #364]!	; 0x16c

00011ed8 <getenv@plt>:
   11ed8:	add	ip, pc, #0, 12
   11edc:	add	ip, ip, #110592	; 0x1b000
   11ee0:	ldr	pc, [ip, #356]!	; 0x164

00011ee4 <puts@plt>:
   11ee4:	add	ip, pc, #0, 12
   11ee8:	add	ip, ip, #110592	; 0x1b000
   11eec:	ldr	pc, [ip, #348]!	; 0x15c

00011ef0 <malloc@plt>:
   11ef0:	add	ip, pc, #0, 12
   11ef4:	add	ip, ip, #110592	; 0x1b000
   11ef8:	ldr	pc, [ip, #340]!	; 0x154

00011efc <__libc_start_main@plt>:
   11efc:	add	ip, pc, #0, 12
   11f00:	add	ip, ip, #110592	; 0x1b000
   11f04:	ldr	pc, [ip, #332]!	; 0x14c

00011f08 <strerror@plt>:
   11f08:	add	ip, pc, #0, 12
   11f0c:	add	ip, ip, #110592	; 0x1b000
   11f10:	ldr	pc, [ip, #324]!	; 0x144

00011f14 <__gmon_start__@plt>:
   11f14:	add	ip, pc, #0, 12
   11f18:	add	ip, ip, #110592	; 0x1b000
   11f1c:	ldr	pc, [ip, #316]!	; 0x13c

00011f20 <getpid@plt>:
   11f20:	add	ip, pc, #0, 12
   11f24:	add	ip, ip, #110592	; 0x1b000
   11f28:	ldr	pc, [ip, #308]!	; 0x134

00011f2c <exit@plt>:
   11f2c:	add	ip, pc, #0, 12
   11f30:	add	ip, ip, #110592	; 0x1b000
   11f34:	ldr	pc, [ip, #300]!	; 0x12c

00011f38 <strlen@plt>:
   11f38:	add	ip, pc, #0, 12
   11f3c:	add	ip, ip, #110592	; 0x1b000
   11f40:	ldr	pc, [ip, #292]!	; 0x124

00011f44 <strchr@plt>:
   11f44:	add	ip, pc, #0, 12
   11f48:	add	ip, ip, #110592	; 0x1b000
   11f4c:	ldr	pc, [ip, #284]!	; 0x11c

00011f50 <fprintf@plt>:
   11f50:	add	ip, pc, #0, 12
   11f54:	add	ip, ip, #110592	; 0x1b000
   11f58:	ldr	pc, [ip, #276]!	; 0x114

00011f5c <__errno_location@plt>:
   11f5c:	add	ip, pc, #0, 12
   11f60:	add	ip, ip, #110592	; 0x1b000
   11f64:	ldr	pc, [ip, #268]!	; 0x10c

00011f68 <__cxa_atexit@plt>:
   11f68:	add	ip, pc, #0, 12
   11f6c:	add	ip, ip, #110592	; 0x1b000
   11f70:	ldr	pc, [ip, #260]!	; 0x104

00011f74 <mkdir@plt>:
   11f74:	add	ip, pc, #0, 12
   11f78:	add	ip, ip, #110592	; 0x1b000
   11f7c:	ldr	pc, [ip, #252]!	; 0xfc

00011f80 <memset@plt>:
   11f80:	add	ip, pc, #0, 12
   11f84:	add	ip, ip, #110592	; 0x1b000
   11f88:	ldr	pc, [ip, #244]!	; 0xf4

00011f8c <strncpy@plt>:
   11f8c:	add	ip, pc, #0, 12
   11f90:	add	ip, ip, #110592	; 0x1b000
   11f94:	ldr	pc, [ip, #236]!	; 0xec

00011f98 <prctl@plt>:
   11f98:	add	ip, pc, #0, 12
   11f9c:	add	ip, ip, #110592	; 0x1b000
   11fa0:	ldr	pc, [ip, #228]!	; 0xe4

00011fa4 <fclose@plt>:
   11fa4:	add	ip, pc, #0, 12
   11fa8:	add	ip, ip, #110592	; 0x1b000
   11fac:	ldr	pc, [ip, #220]!	; 0xdc

00011fb0 <strnlen@plt>:
   11fb0:	add	ip, pc, #0, 12
   11fb4:	add	ip, ip, #110592	; 0x1b000
   11fb8:	ldr	pc, [ip, #212]!	; 0xd4

00011fbc <munmap@plt>:
   11fbc:	add	ip, pc, #0, 12
   11fc0:	add	ip, ip, #110592	; 0x1b000
   11fc4:	ldr	pc, [ip, #204]!	; 0xcc

00011fc8 <fcntl64@plt>:
   11fc8:	add	ip, pc, #0, 12
   11fcc:	add	ip, ip, #110592	; 0x1b000
   11fd0:	ldr	pc, [ip, #196]!	; 0xc4

00011fd4 <strrchr@plt>:
   11fd4:	add	ip, pc, #0, 12
   11fd8:	add	ip, ip, #110592	; 0x1b000
   11fdc:	ldr	pc, [ip, #188]!	; 0xbc

00011fe0 <msync@plt>:
   11fe0:	add	ip, pc, #0, 12
   11fe4:	add	ip, ip, #110592	; 0x1b000
   11fe8:	ldr	pc, [ip, #180]!	; 0xb4

00011fec <fseek@plt>:
   11fec:	add	ip, pc, #0, 12
   11ff0:	add	ip, ip, #110592	; 0x1b000
   11ff4:	ldr	pc, [ip, #172]!	; 0xac

00011ff8 <strncmp@plt>:
   11ff8:	add	ip, pc, #0, 12
   11ffc:	add	ip, ip, #110592	; 0x1b000
   12000:	ldr	pc, [ip, #164]!	; 0xa4

00012004 <abort@plt>:
   12004:	add	ip, pc, #0, 12
   12008:	add	ip, ip, #110592	; 0x1b000
   1200c:	ldr	pc, [ip, #156]!	; 0x9c

00012010 <__assert_fail@plt>:
   12010:	add	ip, pc, #0, 12
   12014:	add	ip, ip, #110592	; 0x1b000
   12018:	ldr	pc, [ip, #148]!	; 0x94

Disassembly of section .text:

00012020 <_start@@Base>:
   12020:	mov	fp, #0
   12024:	mov	lr, #0
   12028:	pop	{r1}		; (ldr r1, [sp], #4)
   1202c:	mov	r2, sp
   12030:	push	{r2}		; (str r2, [sp, #-4]!)
   12034:	push	{r0}		; (str r0, [sp, #-4]!)
   12038:	ldr	ip, [pc, #16]	; 12050 <_start@@Base+0x30>
   1203c:	push	{ip}		; (str ip, [sp, #-4]!)
   12040:	ldr	r0, [pc, #12]	; 12054 <_start@@Base+0x34>
   12044:	ldr	r3, [pc, #12]	; 12058 <_start@@Base+0x38>
   12048:	bl	11efc <__libc_start_main@plt>
   1204c:	bl	12004 <abort@plt>
   12050:	andeq	sl, r1, r8, asr #24
   12054:	andeq	r4, r1, r0, lsl r4
   12058:	andeq	sl, r1, r8, ror #23
   1205c:	ldr	r3, [pc, #20]	; 12078 <_start@@Base+0x58>
   12060:	ldr	r2, [pc, #20]	; 1207c <_start@@Base+0x5c>
   12064:	add	r3, pc, r3
   12068:	ldr	r2, [r3, r2]
   1206c:	cmp	r2, #0
   12070:	bxeq	lr
   12074:	b	11f14 <__gmon_start__@plt>
   12078:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1207c:	andeq	r0, r0, r8, asr #1
   12080:	ldr	r0, [pc, #24]	; 120a0 <_start@@Base+0x80>
   12084:	ldr	r3, [pc, #24]	; 120a4 <_start@@Base+0x84>
   12088:	cmp	r3, r0
   1208c:	bxeq	lr
   12090:	ldr	r3, [pc, #16]	; 120a8 <_start@@Base+0x88>
   12094:	cmp	r3, #0
   12098:	bxeq	lr
   1209c:	bx	r3
   120a0:	strdeq	sp, [r2], -ip
   120a4:	strdeq	sp, [r2], -ip
   120a8:	andeq	r0, r0, r0
   120ac:	ldr	r0, [pc, #36]	; 120d8 <_start@@Base+0xb8>
   120b0:	ldr	r1, [pc, #36]	; 120dc <_start@@Base+0xbc>
   120b4:	sub	r1, r1, r0
   120b8:	asr	r1, r1, #2
   120bc:	add	r1, r1, r1, lsr #31
   120c0:	asrs	r1, r1, #1
   120c4:	bxeq	lr
   120c8:	ldr	r3, [pc, #16]	; 120e0 <_start@@Base+0xc0>
   120cc:	cmp	r3, #0
   120d0:	bxeq	lr
   120d4:	bx	r3
   120d8:	strdeq	sp, [r2], -ip
   120dc:	strdeq	sp, [r2], -ip
   120e0:	andeq	r0, r0, r0
   120e4:	push	{r4, lr}
   120e8:	ldr	r4, [pc, #24]	; 12108 <_start@@Base+0xe8>
   120ec:	ldrb	r3, [r4]
   120f0:	cmp	r3, #0
   120f4:	popne	{r4, pc}
   120f8:	bl	12080 <_start@@Base+0x60>
   120fc:	mov	r3, #1
   12100:	strb	r3, [r4]
   12104:	pop	{r4, pc}
   12108:	andeq	sp, r2, r0, lsl #2
   1210c:	b	120ac <_start@@Base+0x8c>

00012110 <next@@Base>:
   12110:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12114:	add	fp, sp, #24
   12118:	ldr	r1, [pc, #564]	; 12354 <next@@Base+0x244>
   1211c:	mov	r3, #16
   12120:	ldr	r1, [pc, r1]
   12124:	str	r0, [r1]
   12128:	ldr	r8, [pc, #552]	; 12358 <next@@Base+0x248>
   1212c:	ldr	r2, [pc, #552]	; 1235c <next@@Base+0x24c>
   12130:	ldr	r2, [pc, r2]
   12134:	add	r8, pc, r8
   12138:	mov	r4, r8
   1213c:	adds	r2, r2, #1
   12140:	str	r2, [r8]
   12144:	ldr	r2, [r8, #4]
   12148:	adc	r2, r2, #0
   1214c:	str	r2, [r8, #4]
   12150:	ldr	r2, [r1, #204]	; 0xcc
   12154:	cmp	r2, #50	; 0x32
   12158:	movwcc	r3, #8
   1215c:	ldr	r3, [r4, r3]!
   12160:	adds	r3, r3, #1
   12164:	str	r3, [r4]
   12168:	ldr	r3, [r4, #4]
   1216c:	adc	r3, r3, #0
   12170:	cmp	r2, #49	; 0x31
   12174:	str	r3, [r4, #4]
   12178:	bhi	121a4 <next@@Base+0x94>
   1217c:	ldr	r4, [r8, #24]
   12180:	ldr	r3, [r8, #28]
   12184:	add	r2, r1, r2, lsl #2
   12188:	adds	r4, r4, #1
   1218c:	adc	r3, r3, #0
   12190:	str	r4, [r8, #24]
   12194:	str	r3, [r8, #28]
   12198:	str	r0, [r2, #4]
   1219c:	ldr	r2, [r1, #204]	; 0xcc
   121a0:	b	121c8 <next@@Base+0xb8>
   121a4:	ldr	r4, [r8, #32]
   121a8:	ldr	r3, [r8, #36]	; 0x24
   121ac:	adds	r4, r4, #1
   121b0:	adc	r3, r3, #0
   121b4:	str	r4, [r8, #32]
   121b8:	str	r3, [r8, #36]	; 0x24
   121bc:	ldr	r3, [r1, #212]	; 0xd4
   121c0:	add	r3, r3, #1
   121c4:	str	r3, [r1, #212]	; 0xd4
   121c8:	add	r2, r2, #1
   121cc:	mov	r4, #48	; 0x30
   121d0:	mov	r5, r8
   121d4:	str	r2, [r1, #204]	; 0xcc
   121d8:	ldr	r2, [pc, #384]	; 12360 <next@@Base+0x250>
   121dc:	ldr	r2, [pc, r2]
   121e0:	ldr	r3, [r2, #200]	; 0xc8
   121e4:	cmp	r3, #50	; 0x32
   121e8:	movwcc	r4, #40	; 0x28
   121ec:	ldr	r4, [r5, r4]!
   121f0:	adds	r4, r4, #1
   121f4:	str	r4, [r5]
   121f8:	ldr	r4, [r5, #4]
   121fc:	adc	r4, r4, #0
   12200:	cmp	r3, #49	; 0x31
   12204:	str	r4, [r5, #4]
   12208:	bhi	12230 <next@@Base+0x120>
   1220c:	add	r5, r3, #1
   12210:	str	r5, [r2, #200]	; 0xc8
   12214:	ldrd	r4, [r8, #56]	; 0x38
   12218:	adds	r4, r4, #1
   1221c:	adc	r5, r5, #0
   12220:	strd	r4, [r8, #56]	; 0x38
   12224:	ldr	r5, [pc, #312]	; 12364 <next@@Base+0x254>
   12228:	ldr	r5, [pc, r5]
   1222c:	str	r5, [r2, r3, lsl #2]
   12230:	ldr	r2, [r1, #232]	; 0xe8
   12234:	mov	r3, #72	; 0x48
   12238:	mov	r6, r8
   1223c:	cmp	r2, #0
   12240:	movwne	r3, #64	; 0x40
   12244:	ldr	r3, [r6, r3]!
   12248:	adds	r3, r3, #1
   1224c:	str	r3, [r6]
   12250:	ldr	r3, [r6, #4]
   12254:	adc	r3, r3, #0
   12258:	cmp	r2, #0
   1225c:	str	r3, [r6, #4]
   12260:	beq	1228c <next@@Base+0x17c>
   12264:	ldrd	r4, [r8, #80]	; 0x50
   12268:	adds	r4, r4, #1
   1226c:	adc	r5, r5, #0
   12270:	strd	r4, [r8, #80]	; 0x50
   12274:	blx	r2
   12278:	ldrd	r2, [r8, #144]	; 0x90
   1227c:	adds	r2, r2, #1
   12280:	adc	r3, r3, #0
   12284:	strd	r2, [r8, #144]	; 0x90
   12288:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1228c:	ldr	r0, [r1, #220]	; 0xdc
   12290:	mov	r2, #96	; 0x60
   12294:	mov	r3, r8
   12298:	cmp	r0, #0
   1229c:	movwne	r2, #88	; 0x58
   122a0:	ldr	r2, [r3, r2]!
   122a4:	adds	r2, r2, #1
   122a8:	str	r2, [r3]
   122ac:	ldr	r2, [r3, #4]
   122b0:	adc	r2, r2, #0
   122b4:	cmp	r0, #0
   122b8:	str	r2, [r3, #4]
   122bc:	beq	12318 <next@@Base+0x208>
   122c0:	ldr	r3, [r1, #224]	; 0xe0
   122c4:	mov	r6, #112	; 0x70
   122c8:	mov	r7, r8
   122cc:	ldr	r2, [r1, #228]	; 0xe4
   122d0:	cmp	r3, r0
   122d4:	movwlt	r6, #104	; 0x68
   122d8:	ldr	r6, [r7, r6]!
   122dc:	adds	r6, r6, #1
   122e0:	str	r6, [r7]
   122e4:	ldr	r6, [r7, #4]
   122e8:	adc	r6, r6, #0
   122ec:	cmp	r3, r0
   122f0:	str	r6, [r7, #4]
   122f4:	bge	12338 <next@@Base+0x228>
   122f8:	add	r0, r3, #1
   122fc:	str	r0, [r1, #224]	; 0xe0
   12300:	ldrd	r0, [r8, #120]	; 0x78
   12304:	adds	r0, r0, #1
   12308:	adc	r1, r1, #0
   1230c:	strd	r0, [r8, #120]	; 0x78
   12310:	ldr	r0, [r2, r3, lsl #2]
   12314:	b	12278 <next@@Base+0x168>
   12318:	ldr	r0, [r8, #136]	; 0x88
   1231c:	ldr	r3, [r8, #140]	; 0x8c
   12320:	adds	r0, r0, #1
   12324:	adc	r3, r3, #0
   12328:	str	r0, [r8, #136]	; 0x88
   1232c:	str	r3, [r8, #140]	; 0x8c
   12330:	ldr	r0, [r1, #216]	; 0xd8
   12334:	b	12278 <next@@Base+0x168>
   12338:	ldrd	r4, [r8, #128]	; 0x80
   1233c:	add	r0, r2, r0, lsl #2
   12340:	adds	r4, r4, #1
   12344:	adc	r5, r5, #0
   12348:	strd	r4, [r8, #128]	; 0x80
   1234c:	ldr	r0, [r0, #-4]
   12350:	b	12278 <next@@Base+0x168>
   12354:	andeq	sl, r1, r4, lsr #31
   12358:	ldrdeq	sl, [r1], -r4
   1235c:	ldrdeq	sl, [r1], -r8
   12360:	strdeq	sl, [r1], -r4
   12364:	muleq	r1, r4, lr
   12368:	nop	{0}
   1236c:	nop	{0}

00012370 <next_reset@@Base>:
   12370:	push	{r4, sl, fp, lr}
   12374:	add	fp, sp, #8
   12378:	ldr	r0, [pc, #80]	; 123d0 <next_reset@@Base+0x60>
   1237c:	add	r1, pc, #60	; 0x3c
   12380:	mov	r2, #236	; 0xec
   12384:	vld1.64	{d16-d17}, [r1 :128]
   12388:	mov	r1, #0
   1238c:	add	r0, pc, r0
   12390:	vld1.64	{d18-d19}, [r0 :128]
   12394:	vadd.i64	q8, q9, q8
   12398:	vst1.64	{d16-d17}, [r0 :128]
   1239c:	ldr	r4, [pc, #48]	; 123d4 <next_reset@@Base+0x64>
   123a0:	ldr	r4, [pc, r4]
   123a4:	mov	r0, r4
   123a8:	bl	11f80 <memset@plt>
   123ac:	mov	r0, #50	; 0x32
   123b0:	str	r0, [r4, #208]	; 0xd0
   123b4:	pop	{r4, sl, fp, pc}
   123b8:	nop	{0}
   123bc:	nop	{0}
   123c0:	andeq	r0, r0, r1
   123c4:	andeq	r0, r0, r0
   123c8:	andeq	r0, r0, r1
   123cc:	andeq	r0, r0, r0
   123d0:	andeq	sl, r1, ip, lsl lr
   123d4:	andeq	sl, r1, r4, lsr #26

000123d8 <push_back@@Base>:
   123d8:	push	{r4, r5, r6, r7, fp, lr}
   123dc:	add	fp, sp, #16
   123e0:	ldr	lr, [pc, #388]	; 1256c <push_back@@Base+0x194>
   123e4:	mov	r2, #16
   123e8:	ldr	lr, [pc, lr]
   123ec:	str	r0, [lr]
   123f0:	str	r1, [lr, #204]	; 0xcc
   123f4:	ldr	r6, [pc, #372]	; 12570 <push_back@@Base+0x198>
   123f8:	ldr	r3, [pc, #372]	; 12574 <push_back@@Base+0x19c>
   123fc:	ldr	r3, [pc, r3]
   12400:	add	r6, pc, r6
   12404:	mov	r4, r6
   12408:	adds	r3, r3, #1
   1240c:	str	r3, [r6]
   12410:	ldr	r3, [r6, #4]
   12414:	adc	r3, r3, #0
   12418:	str	r3, [r6, #4]
   1241c:	ldr	r3, [lr, #408]	; 0x198
   12420:	cmp	r3, #50	; 0x32
   12424:	movwcc	r2, #8
   12428:	ldr	r2, [r4, r2]!
   1242c:	adds	r2, r2, #1
   12430:	str	r2, [r4]
   12434:	ldr	r2, [r4, #4]
   12438:	adc	r2, r2, #0
   1243c:	cmp	r3, #49	; 0x31
   12440:	str	r2, [r4, #4]
   12444:	bhi	1247c <push_back@@Base+0xa4>
   12448:	ldr	r2, [r6, #24]
   1244c:	ldr	r7, [r6, #28]
   12450:	adds	r2, r2, #1
   12454:	str	r2, [r6, #24]
   12458:	adc	r7, r7, #0
   1245c:	add	r2, lr, r3, lsl #2
   12460:	str	r7, [r6, #28]
   12464:	str	r0, [r2, #4]
   12468:	ldr	r2, [lr, #408]	; 0x198
   1246c:	add	r2, lr, r2, lsl #2
   12470:	str	r1, [r2, #208]	; 0xd0
   12474:	ldr	r3, [lr, #408]	; 0x198
   12478:	b	124a0 <push_back@@Base+0xc8>
   1247c:	ldr	r2, [r6, #32]
   12480:	ldr	r7, [r6, #36]	; 0x24
   12484:	adds	r2, r2, #1
   12488:	adc	r7, r7, #0
   1248c:	str	r2, [r6, #32]
   12490:	str	r7, [r6, #36]	; 0x24
   12494:	ldr	r2, [lr, #416]	; 0x1a0
   12498:	add	r2, r2, #1
   1249c:	str	r2, [lr, #416]	; 0x1a0
   124a0:	add	r2, r3, #1
   124a4:	mov	r4, r6
   124a8:	str	r2, [lr, #408]	; 0x198
   124ac:	mov	r2, #48	; 0x30
   124b0:	ldr	ip, [pc, #192]	; 12578 <push_back@@Base+0x1a0>
   124b4:	ldr	ip, [pc, ip]
   124b8:	ldr	r3, [ip, #200]	; 0xc8
   124bc:	cmp	r3, #50	; 0x32
   124c0:	movwcc	r2, #40	; 0x28
   124c4:	ldr	r2, [r4, r2]!
   124c8:	adds	r2, r2, #1
   124cc:	str	r2, [r4]
   124d0:	ldr	r2, [r4, #4]
   124d4:	adc	r2, r2, #0
   124d8:	cmp	r3, #49	; 0x31
   124dc:	str	r2, [r4, #4]
   124e0:	bhi	12510 <push_back@@Base+0x138>
   124e4:	add	r2, r3, #1
   124e8:	str	r2, [ip, #200]	; 0xc8
   124ec:	ldr	r2, [r6, #56]	; 0x38
   124f0:	ldr	r7, [r6, #60]	; 0x3c
   124f4:	adds	r2, r2, #1
   124f8:	adc	r7, r7, #0
   124fc:	str	r2, [r6, #56]	; 0x38
   12500:	str	r7, [r6, #60]	; 0x3c
   12504:	ldr	r2, [pc, #112]	; 1257c <push_back@@Base+0x1a4>
   12508:	ldr	r2, [pc, r2]
   1250c:	str	r2, [ip, r3, lsl #2]
   12510:	ldr	r2, [lr, #420]	; 0x1a4
   12514:	mov	r3, #72	; 0x48
   12518:	mov	r5, r6
   1251c:	cmp	r2, #0
   12520:	movwne	r3, #64	; 0x40
   12524:	ldr	r3, [r5, r3]!
   12528:	adds	r3, r3, #1
   1252c:	str	r3, [r5]
   12530:	ldr	r3, [r5, #4]
   12534:	adc	r3, r3, #0
   12538:	cmp	r2, #0
   1253c:	str	r3, [r5, #4]
   12540:	beq	12558 <push_back@@Base+0x180>
   12544:	ldrd	r4, [r6, #80]	; 0x50
   12548:	adds	r4, r4, #1
   1254c:	adc	r5, r5, #0
   12550:	strd	r4, [r6, #80]	; 0x50
   12554:	blx	r2
   12558:	ldrd	r0, [r6, #88]	; 0x58
   1255c:	adds	r0, r0, #1
   12560:	adc	r1, r1, #0
   12564:	strd	r0, [r6, #88]	; 0x58
   12568:	pop	{r4, r5, r6, r7, fp, pc}
   1256c:	andeq	sl, r1, ip, asr #25
   12570:			; <UNDEFINED> instruction: 0x0001adb8
   12574:			; <UNDEFINED> instruction: 0x0001adbc
   12578:	andeq	sl, r1, ip, lsl ip
   1257c:	andeq	sl, r1, r4, asr #23

00012580 <push_back_reset@@Base>:
   12580:	push	{r4, sl, fp, lr}
   12584:	add	fp, sp, #8
   12588:	ldr	r0, [pc, #80]	; 125e0 <push_back_reset@@Base+0x60>
   1258c:	add	r1, pc, #60	; 0x3c
   12590:	mov	r2, #424	; 0x1a8
   12594:	vld1.64	{d16-d17}, [r1 :128]
   12598:	mov	r1, #0
   1259c:	add	r0, pc, r0
   125a0:	vld1.64	{d18-d19}, [r0 :128]
   125a4:	vadd.i64	q8, q9, q8
   125a8:	vst1.64	{d16-d17}, [r0 :128]
   125ac:	ldr	r4, [pc, #48]	; 125e4 <push_back_reset@@Base+0x64>
   125b0:	ldr	r4, [pc, r4]
   125b4:	mov	r0, r4
   125b8:	bl	11f80 <memset@plt>
   125bc:	mov	r0, #50	; 0x32
   125c0:	str	r0, [r4, #412]	; 0x19c
   125c4:	pop	{r4, sl, fp, pc}
   125c8:	nop	{0}
   125cc:	nop	{0}
   125d0:	andeq	r0, r0, r1
   125d4:	andeq	r0, r0, r0
   125d8:	andeq	r0, r0, r1
   125dc:	andeq	r0, r0, r0
   125e0:	andeq	sl, r1, ip, ror ip
   125e4:	andeq	sl, r1, r4, lsl #22
   125e8:	nop	{0}
   125ec:	nop	{0}

000125f0 <setup@@Base>:
   125f0:	push	{r4, r5, fp, lr}
   125f4:	add	fp, sp, #8
   125f8:	vpush	{d8-d9}
   125fc:	ldr	r0, [pc, #156]	; 126a0 <setup@@Base+0xb0>
   12600:	ldr	r1, [pc, #156]	; 126a4 <setup@@Base+0xb4>
   12604:	add	r2, pc, #132	; 0x84
   12608:	vld1.64	{d8-d9}, [r2 :128]
   1260c:	mov	r2, #236	; 0xec
   12610:	add	r0, pc, r0
   12614:	add	r1, pc, r1
   12618:	vld1.64	{d16-d17}, [r1 :128]
   1261c:	vld1.64	{d18-d19}, [r0 :128]
   12620:	vadd.i64	q8, q8, q4
   12624:	vadd.i64	q9, q9, q4
   12628:	vst1.64	{d16-d17}, [r1 :128]
   1262c:	vst1.64	{d18-d19}, [r0 :128]
   12630:	mov	r1, #0
   12634:	ldr	r4, [pc, #108]	; 126a8 <setup@@Base+0xb8>
   12638:	ldr	r4, [pc, r4]
   1263c:	mov	r0, r4
   12640:	bl	11f80 <memset@plt>
   12644:	ldr	r0, [pc, #96]	; 126ac <setup@@Base+0xbc>
   12648:	mov	r5, #50	; 0x32
   1264c:	mov	r1, #0
   12650:	mov	r2, #424	; 0x1a8
   12654:	str	r5, [r4, #208]	; 0xd0
   12658:	add	r0, pc, r0
   1265c:	vld1.64	{d16-d17}, [r0 :128]
   12660:	vadd.i64	q8, q8, q4
   12664:	vst1.64	{d16-d17}, [r0 :128]
   12668:	ldr	r4, [pc, #64]	; 126b0 <setup@@Base+0xc0>
   1266c:	ldr	r4, [pc, r4]
   12670:	mov	r0, r4
   12674:	bl	11f80 <memset@plt>
   12678:	str	r5, [r4, #412]	; 0x19c
   1267c:	vpop	{d8-d9}
   12680:	pop	{r4, r5, fp, pc}
   12684:	nop	{0}
   12688:	nop	{0}
   1268c:	nop	{0}
   12690:	andeq	r0, r0, r1
   12694:	andeq	r0, r0, r0
   12698:	andeq	r0, r0, r1
   1269c:	andeq	r0, r0, r0
   126a0:	muleq	r1, r8, fp
   126a4:	andeq	sl, r1, r4, lsl ip
   126a8:	andeq	sl, r1, ip, lsl #21
   126ac:	andeq	sl, r1, r0, asr #23
   126b0:	andeq	sl, r1, r8, asr #20

000126b4 <no_int_as_first_stuff@@Base>:
   126b4:	push	{r4, r5, r6, r7, fp, lr}
   126b8:	add	fp, sp, #16
   126bc:	sub	sp, sp, #16
   126c0:	ldr	r6, [pc, #268]	; 127d4 <no_int_as_first_stuff@@Base+0x120>
   126c4:	ldr	r0, [pc, #268]	; 127d8 <no_int_as_first_stuff@@Base+0x124>
   126c8:	mov	r4, sp
   126cc:	add	r1, sp, #4
   126d0:	ldr	r0, [pc, r0]
   126d4:	add	r6, pc, r6
   126d8:	adds	r0, r0, #1
   126dc:	str	r0, [r6]
   126e0:	ldr	r0, [r6, #4]
   126e4:	adc	r0, r0, #0
   126e8:	str	r0, [r6, #4]
   126ec:	mov	r0, r4
   126f0:	bl	16ad0 <init_grammar@@Base>
   126f4:	mov	r0, #4
   126f8:	bl	11ef0 <malloc@plt>
   126fc:	mov	r5, r0
   12700:	bl	14f80 <init_token_opar@@Base>
   12704:	ldr	r7, [pc, #208]	; 127dc <no_int_as_first_stuff@@Base+0x128>
   12708:	mov	r0, r4
   1270c:	ldr	r7, [pc, r7]
   12710:	str	r5, [r7, #216]	; 0xd8
   12714:	bl	16b94 <read_function_ast_node@@Base>
   12718:	ldr	r1, [r7, #204]	; 0xcc
   1271c:	mov	r2, #16
   12720:	mov	r3, r6
   12724:	cmp	r1, #1
   12728:	movweq	r2, #8
   1272c:	ldr	r2, [r3, r2]!
   12730:	adds	r2, r2, #1
   12734:	str	r2, [r3]
   12738:	ldr	r2, [r3, #4]
   1273c:	adc	r2, r2, #0
   12740:	cmp	r1, #1
   12744:	str	r2, [r3, #4]
   12748:	bne	12794 <no_int_as_first_stuff@@Base+0xe0>
   1274c:	mov	r1, #32
   12750:	cmp	r0, #0
   12754:	mov	r2, r6
   12758:	movweq	r1, #24
   1275c:	ldr	r1, [r2, r1]!
   12760:	adds	r1, r1, #1
   12764:	str	r1, [r2]
   12768:	ldr	r1, [r2, #4]
   1276c:	adc	r1, r1, #0
   12770:	cmp	r0, #0
   12774:	str	r1, [r2, #4]
   12778:	bne	127b4 <no_int_as_first_stuff@@Base+0x100>
   1277c:	ldrd	r0, [r6, #40]	; 0x28
   12780:	adds	r0, r0, #1
   12784:	adc	r1, r1, #0
   12788:	strd	r0, [r6, #40]	; 0x28
   1278c:	sub	sp, fp, #16
   12790:	pop	{r4, r5, r6, r7, fp, pc}
   12794:	ldr	r0, [pc, #68]	; 127e0 <no_int_as_first_stuff@@Base+0x12c>
   12798:	ldr	r1, [pc, #68]	; 127e4 <no_int_as_first_stuff@@Base+0x130>
   1279c:	ldr	r3, [pc, #68]	; 127e8 <no_int_as_first_stuff@@Base+0x134>
   127a0:	mov	r2, #41	; 0x29
   127a4:	add	r0, pc, r0
   127a8:	add	r1, pc, r1
   127ac:	add	r3, pc, r3
   127b0:	bl	12010 <__assert_fail@plt>
   127b4:	ldr	r0, [pc, #48]	; 127ec <no_int_as_first_stuff@@Base+0x138>
   127b8:	ldr	r1, [pc, #48]	; 127f0 <no_int_as_first_stuff@@Base+0x13c>
   127bc:	ldr	r3, [pc, #48]	; 127f4 <no_int_as_first_stuff@@Base+0x140>
   127c0:	mov	r2, #42	; 0x2a
   127c4:	add	r0, pc, r0
   127c8:	add	r1, pc, r1
   127cc:	add	r3, pc, r3
   127d0:	bl	12010 <__assert_fail@plt>
   127d4:	andeq	sl, r1, r4, ror #22
   127d8:	andeq	sl, r1, r8, ror #22
   127dc:			; <UNDEFINED> instruction: 0x0001a9b8
   127e0:	andeq	r8, r0, r8, asr #9
   127e4:	ldrdeq	r8, [r0], -lr
   127e8:	andeq	r8, r0, r5, lsr r5
   127ec:	andeq	r8, r0, sl, lsr r5
   127f0:			; <UNDEFINED> instruction: 0x000084be
   127f4:	andeq	r8, r0, r5, lsl r5

000127f8 <int_but_not_followed_by_function@@Base>:
   127f8:	push	{r4, r5, r6, r7, fp, lr}
   127fc:	add	fp, sp, #16
   12800:	sub	sp, sp, #16
   12804:	ldr	r6, [pc, #304]	; 1293c <int_but_not_followed_by_function@@Base+0x144>
   12808:	ldr	r0, [pc, #304]	; 12940 <int_but_not_followed_by_function@@Base+0x148>
   1280c:	mov	r4, sp
   12810:	add	r1, sp, #4
   12814:	ldr	r0, [pc, r0]
   12818:	add	r6, pc, r6
   1281c:	adds	r0, r0, #1
   12820:	str	r0, [r6]
   12824:	ldr	r0, [r6, #4]
   12828:	adc	r0, r0, #0
   1282c:	str	r0, [r6, #4]
   12830:	mov	r0, r4
   12834:	bl	16ad0 <init_grammar@@Base>
   12838:	mov	r0, #8
   1283c:	bl	11ef0 <malloc@plt>
   12840:	mov	r5, r0
   12844:	mov	r0, #4
   12848:	bl	11ef0 <malloc@plt>
   1284c:	str	r0, [r5]
   12850:	bl	14e90 <init_token_int_type@@Base>
   12854:	mov	r0, #4
   12858:	bl	11ef0 <malloc@plt>
   1285c:	str	r0, [r5, #4]
   12860:	bl	14f80 <init_token_opar@@Base>
   12864:	ldr	r7, [pc, #216]	; 12944 <int_but_not_followed_by_function@@Base+0x14c>
   12868:	mov	r0, #2
   1286c:	ldr	r7, [pc, r7]
   12870:	str	r0, [r7, #220]	; 0xdc
   12874:	mov	r0, r4
   12878:	str	r5, [r7, #228]	; 0xe4
   1287c:	bl	16b94 <read_function_ast_node@@Base>
   12880:	ldr	r1, [r7, #204]	; 0xcc
   12884:	mov	r2, #16
   12888:	mov	r3, r6
   1288c:	cmp	r1, #2
   12890:	movweq	r2, #8
   12894:	ldr	r2, [r3, r2]!
   12898:	adds	r2, r2, #1
   1289c:	str	r2, [r3]
   128a0:	ldr	r2, [r3, #4]
   128a4:	adc	r2, r2, #0
   128a8:	cmp	r1, #2
   128ac:	str	r2, [r3, #4]
   128b0:	bne	128fc <int_but_not_followed_by_function@@Base+0x104>
   128b4:	mov	r1, #32
   128b8:	cmp	r0, #0
   128bc:	mov	r2, r6
   128c0:	movweq	r1, #24
   128c4:	ldr	r1, [r2, r1]!
   128c8:	adds	r1, r1, #1
   128cc:	str	r1, [r2]
   128d0:	ldr	r1, [r2, #4]
   128d4:	adc	r1, r1, #0
   128d8:	cmp	r0, #0
   128dc:	str	r1, [r2, #4]
   128e0:	bne	1291c <int_but_not_followed_by_function@@Base+0x124>
   128e4:	ldrd	r0, [r6, #40]	; 0x28
   128e8:	adds	r0, r0, #1
   128ec:	adc	r1, r1, #0
   128f0:	strd	r0, [r6, #40]	; 0x28
   128f4:	sub	sp, fp, #16
   128f8:	pop	{r4, r5, r6, r7, fp, pc}
   128fc:	ldr	r0, [pc, #68]	; 12948 <int_but_not_followed_by_function@@Base+0x150>
   12900:	ldr	r1, [pc, #68]	; 1294c <int_but_not_followed_by_function@@Base+0x154>
   12904:	ldr	r3, [pc, #68]	; 12950 <int_but_not_followed_by_function@@Base+0x158>
   12908:	mov	r2, #67	; 0x43
   1290c:	add	r0, pc, r0
   12910:	add	r1, pc, r1
   12914:	add	r3, pc, r3
   12918:	bl	12010 <__assert_fail@plt>
   1291c:	ldr	r0, [pc, #48]	; 12954 <int_but_not_followed_by_function@@Base+0x15c>
   12920:	ldr	r1, [pc, #48]	; 12958 <int_but_not_followed_by_function@@Base+0x160>
   12924:	ldr	r3, [pc, #48]	; 1295c <int_but_not_followed_by_function@@Base+0x164>
   12928:	mov	r2, #68	; 0x44
   1292c:	add	r0, pc, r0
   12930:	add	r1, pc, r1
   12934:	add	r3, pc, r3
   12938:	bl	12010 <__assert_fail@plt>
   1293c:	andeq	sl, r1, r0, asr sl
   12940:	andeq	sl, r1, r4, asr sl
   12944:	andeq	sl, r1, r8, asr r8
   12948:	strdeq	r8, [r0], -lr
   1294c:	andeq	r8, r0, r6, ror r3
   12950:	andeq	r8, r0, r0, lsl r4
   12954:	ldrdeq	r8, [r0], -r2
   12958:	andeq	r8, r0, r6, asr r3
   1295c:	strdeq	r8, [r0], -r0

00012960 <boolean_expression_is_read_properly@@Base>:
   12960:	push	{r4, r5, r6, r7, fp, lr}
   12964:	add	fp, sp, #16
   12968:	sub	sp, sp, #16
   1296c:	ldr	r7, [pc, #492]	; 12b60 <boolean_expression_is_read_properly@@Base+0x200>
   12970:	ldr	r0, [pc, #492]	; 12b64 <boolean_expression_is_read_properly@@Base+0x204>
   12974:	ldr	r0, [pc, r0]
   12978:	add	r7, pc, r7
   1297c:	adds	r0, r0, #1
   12980:	str	r0, [r7]
   12984:	ldr	r0, [r7, #4]
   12988:	adc	r0, r0, #0
   1298c:	str	r0, [r7, #4]
   12990:	mov	r0, #3
   12994:	bl	11ef0 <malloc@plt>
   12998:	mov	r6, r0
   1299c:	movw	r0, #15649	; 0x3d21
   129a0:	mov	r4, sp
   129a4:	add	r1, sp, #4
   129a8:	strh	r0, [r6]
   129ac:	mov	r0, #0
   129b0:	strb	r0, [r6, #2]
   129b4:	mov	r0, r4
   129b8:	bl	16ad0 <init_grammar@@Base>
   129bc:	mov	r0, #20
   129c0:	bl	11ef0 <malloc@plt>
   129c4:	mov	r5, r0
   129c8:	mov	r0, #8
   129cc:	bl	11ef0 <malloc@plt>
   129d0:	mov	r1, #2
   129d4:	str	r0, [r5]
   129d8:	bl	14ee0 <init_token_int_value@@Base>
   129dc:	mov	r0, #8
   129e0:	bl	11ef0 <malloc@plt>
   129e4:	mov	r1, #2
   129e8:	str	r0, [r5, #4]
   129ec:	bl	14ee0 <init_token_int_value@@Base>
   129f0:	mov	r0, #8
   129f4:	bl	11ef0 <malloc@plt>
   129f8:	mov	r1, r6
   129fc:	str	r0, [r5, #8]
   12a00:	bl	15250 <init_token_boolean_op@@Base>
   12a04:	mov	r0, #8
   12a08:	bl	11ef0 <malloc@plt>
   12a0c:	mov	r1, #1
   12a10:	str	r0, [r5, #12]
   12a14:	bl	14ee0 <init_token_int_value@@Base>
   12a18:	mov	r0, #4
   12a1c:	bl	11ef0 <malloc@plt>
   12a20:	str	r0, [r5, #16]
   12a24:	bl	14fd0 <init_token_cpar@@Base>
   12a28:	ldr	r6, [pc, #312]	; 12b68 <boolean_expression_is_read_properly@@Base+0x208>
   12a2c:	mov	r0, #5
   12a30:	ldr	r6, [pc, r6]
   12a34:	str	r0, [r6, #220]	; 0xdc
   12a38:	mov	r0, r4
   12a3c:	str	r5, [r6, #228]	; 0xe4
   12a40:	bl	17300 <read_boolean_expression@@Base>
   12a44:	ldr	r1, [r6, #204]	; 0xcc
   12a48:	mov	r2, #16
   12a4c:	mov	r3, r7
   12a50:	cmp	r1, #5
   12a54:	movweq	r2, #8
   12a58:	ldr	r2, [r3, r2]!
   12a5c:	adds	r2, r2, #1
   12a60:	str	r2, [r3]
   12a64:	ldr	r2, [r3, #4]
   12a68:	adc	r2, r2, #0
   12a6c:	cmp	r1, #5
   12a70:	str	r2, [r3, #4]
   12a74:	bne	12b00 <boolean_expression_is_read_properly@@Base+0x1a0>
   12a78:	ldr	r1, [pc, #236]	; 12b6c <boolean_expression_is_read_properly@@Base+0x20c>
   12a7c:	mov	r2, #32
   12a80:	mov	r3, r7
   12a84:	ldr	r1, [pc, r1]
   12a88:	ldr	r1, [r1, #408]	; 0x198
   12a8c:	cmp	r1, #1
   12a90:	movweq	r2, #24
   12a94:	ldr	r2, [r3, r2]!
   12a98:	adds	r2, r2, #1
   12a9c:	str	r2, [r3]
   12aa0:	ldr	r2, [r3, #4]
   12aa4:	adc	r2, r2, #0
   12aa8:	cmp	r1, #1
   12aac:	str	r2, [r3, #4]
   12ab0:	bne	12b20 <boolean_expression_is_read_properly@@Base+0x1c0>
   12ab4:	ldr	r0, [r0]
   12ab8:	mov	r1, #48	; 0x30
   12abc:	mov	r2, r7
   12ac0:	cmp	r0, #5
   12ac4:	movweq	r1, #40	; 0x28
   12ac8:	ldr	r1, [r2, r1]!
   12acc:	adds	r1, r1, #1
   12ad0:	str	r1, [r2]
   12ad4:	ldr	r1, [r2, #4]
   12ad8:	adc	r1, r1, #0
   12adc:	cmp	r0, #5
   12ae0:	str	r1, [r2, #4]
   12ae4:	bne	12b40 <boolean_expression_is_read_properly@@Base+0x1e0>
   12ae8:	ldrd	r0, [r7, #56]	; 0x38
   12aec:	adds	r0, r0, #1
   12af0:	adc	r1, r1, #0
   12af4:	strd	r0, [r7, #56]	; 0x38
   12af8:	sub	sp, fp, #16
   12afc:	pop	{r4, r5, r6, r7, fp, pc}
   12b00:	ldr	r0, [pc, #104]	; 12b70 <boolean_expression_is_read_properly@@Base+0x210>
   12b04:	ldr	r1, [pc, #104]	; 12b74 <boolean_expression_is_read_properly@@Base+0x214>
   12b08:	ldr	r3, [pc, #104]	; 12b78 <boolean_expression_is_read_properly@@Base+0x218>
   12b0c:	mov	r2, #105	; 0x69
   12b10:	add	r0, pc, r0
   12b14:	add	r1, pc, r1
   12b18:	add	r3, pc, r3
   12b1c:	bl	12010 <__assert_fail@plt>
   12b20:	ldr	r0, [pc, #84]	; 12b7c <boolean_expression_is_read_properly@@Base+0x21c>
   12b24:	ldr	r1, [pc, #84]	; 12b80 <boolean_expression_is_read_properly@@Base+0x220>
   12b28:	ldr	r3, [pc, #84]	; 12b84 <boolean_expression_is_read_properly@@Base+0x224>
   12b2c:	mov	r2, #106	; 0x6a
   12b30:	add	r0, pc, r0
   12b34:	add	r1, pc, r1
   12b38:	add	r3, pc, r3
   12b3c:	bl	12010 <__assert_fail@plt>
   12b40:	ldr	r0, [pc, #64]	; 12b88 <boolean_expression_is_read_properly@@Base+0x228>
   12b44:	ldr	r1, [pc, #64]	; 12b8c <boolean_expression_is_read_properly@@Base+0x22c>
   12b48:	ldr	r3, [pc, #64]	; 12b90 <boolean_expression_is_read_properly@@Base+0x230>
   12b4c:	mov	r2, #107	; 0x6b
   12b50:	add	r0, pc, r0
   12b54:	add	r1, pc, r1
   12b58:	add	r3, pc, r3
   12b5c:	bl	12010 <__assert_fail@plt>
   12b60:	andeq	sl, r1, r0, lsr #18
   12b64:	andeq	sl, r1, r4, lsr #18
   12b68:	muleq	r1, r4, r6
   12b6c:	andeq	sl, r1, r0, lsr r6
   12b70:	andeq	r8, r0, ip, lsr r2
   12b74:	andeq	r8, r0, r2, ror r1
   12b78:	andeq	r8, r0, lr, asr #4
   12b7c:	andeq	r8, r0, r1, ror #4
   12b80:	andeq	r8, r0, r2, asr r1
   12b84:	andeq	r8, r0, lr, lsr #4
   12b88:	andeq	r8, r0, r0, ror #4
   12b8c:	andeq	r8, r0, r2, lsr r1
   12b90:	andeq	r8, r0, lr, lsl #4

00012b94 <boolean_expression_complex@@Base>:
   12b94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b98:	add	fp, sp, #24
   12b9c:	sub	sp, sp, #16
   12ba0:	ldr	r9, [pc, #548]	; 12dcc <boolean_expression_complex@@Base+0x238>
   12ba4:	ldr	r0, [pc, #548]	; 12dd0 <boolean_expression_complex@@Base+0x23c>
   12ba8:	ldr	r0, [pc, r0]
   12bac:	add	r9, pc, r9
   12bb0:	adds	r0, r0, #1
   12bb4:	str	r0, [r9]
   12bb8:	ldr	r0, [r9, #4]
   12bbc:	adc	r0, r0, #0
   12bc0:	str	r0, [r9, #4]
   12bc4:	mov	r0, #3
   12bc8:	bl	11ef0 <malloc@plt>
   12bcc:	mov	r4, r0
   12bd0:	mov	r0, #3
   12bd4:	bl	11ef0 <malloc@plt>
   12bd8:	mov	r7, r0
   12bdc:	mov	r0, #3
   12be0:	bl	11ef0 <malloc@plt>
   12be4:	mov	r6, r0
   12be8:	movw	r0, #15676	; 0x3d3c
   12bec:	movw	r1, #9766	; 0x2626
   12bf0:	mov	r8, sp
   12bf4:	strh	r0, [r4]
   12bf8:	mov	r0, #0
   12bfc:	strb	r0, [r7, #2]
   12c00:	strb	r0, [r4, #2]
   12c04:	strb	r0, [r6, #2]
   12c08:	movw	r0, #15677	; 0x3d3d
   12c0c:	strh	r1, [r7]
   12c10:	add	r1, sp, #4
   12c14:	strh	r0, [r6]
   12c18:	mov	r0, r8
   12c1c:	bl	16ad0 <init_grammar@@Base>
   12c20:	mov	r0, #40	; 0x28
   12c24:	bl	11ef0 <malloc@plt>
   12c28:	mov	r5, r0
   12c2c:	mov	r0, #8
   12c30:	bl	11ef0 <malloc@plt>
   12c34:	mov	r1, #2
   12c38:	str	r0, [r5]
   12c3c:	bl	14ee0 <init_token_int_value@@Base>
   12c40:	mov	r0, #8
   12c44:	bl	11ef0 <malloc@plt>
   12c48:	mov	r1, #2
   12c4c:	str	r0, [r5, #4]
   12c50:	bl	14ee0 <init_token_int_value@@Base>
   12c54:	mov	r0, #8
   12c58:	bl	11ef0 <malloc@plt>
   12c5c:	mov	r1, r4
   12c60:	str	r0, [r5, #8]
   12c64:	bl	15250 <init_token_boolean_op@@Base>
   12c68:	mov	r0, #8
   12c6c:	bl	11ef0 <malloc@plt>
   12c70:	mov	r1, #1
   12c74:	str	r0, [r5, #12]
   12c78:	bl	14ee0 <init_token_int_value@@Base>
   12c7c:	mov	r0, #8
   12c80:	bl	11ef0 <malloc@plt>
   12c84:	mov	r1, r7
   12c88:	str	r0, [r5, #16]
   12c8c:	bl	15250 <init_token_boolean_op@@Base>
   12c90:	mov	r0, #8
   12c94:	bl	11ef0 <malloc@plt>
   12c98:	mov	r1, #4
   12c9c:	str	r0, [r5, #20]
   12ca0:	bl	14ee0 <init_token_int_value@@Base>
   12ca4:	mov	r0, #8
   12ca8:	bl	11ef0 <malloc@plt>
   12cac:	mov	r1, #4
   12cb0:	str	r0, [r5, #24]
   12cb4:	bl	14ee0 <init_token_int_value@@Base>
   12cb8:	mov	r0, #8
   12cbc:	bl	11ef0 <malloc@plt>
   12cc0:	mov	r1, r6
   12cc4:	str	r0, [r5, #28]
   12cc8:	bl	15250 <init_token_boolean_op@@Base>
   12ccc:	mov	r0, #8
   12cd0:	bl	11ef0 <malloc@plt>
   12cd4:	mov	r1, #4
   12cd8:	str	r0, [r5, #32]
   12cdc:	bl	14ee0 <init_token_int_value@@Base>
   12ce0:	mov	r0, #4
   12ce4:	bl	11ef0 <malloc@plt>
   12ce8:	str	r0, [r5, #36]	; 0x24
   12cec:	bl	14fd0 <init_token_cpar@@Base>
   12cf0:	ldr	r4, [pc, #220]	; 12dd4 <boolean_expression_complex@@Base+0x240>
   12cf4:	mov	r0, #10
   12cf8:	ldr	r4, [pc, r4]
   12cfc:	str	r0, [r4, #220]	; 0xdc
   12d00:	mov	r0, r8
   12d04:	str	r5, [r4, #228]	; 0xe4
   12d08:	bl	17300 <read_boolean_expression@@Base>
   12d0c:	ldr	r1, [r4, #204]	; 0xcc
   12d10:	mov	r2, #16
   12d14:	mov	r3, r9
   12d18:	cmp	r1, #10
   12d1c:	movweq	r2, #8
   12d20:	ldr	r2, [r3, r2]!
   12d24:	adds	r2, r2, #1
   12d28:	str	r2, [r3]
   12d2c:	ldr	r2, [r3, #4]
   12d30:	adc	r2, r2, #0
   12d34:	cmp	r1, #10
   12d38:	str	r2, [r3, #4]
   12d3c:	bne	12d8c <boolean_expression_complex@@Base+0x1f8>
   12d40:	ldr	r0, [r0]
   12d44:	mov	r1, #32
   12d48:	mov	r2, r9
   12d4c:	cmp	r0, #5
   12d50:	movweq	r1, #24
   12d54:	ldr	r1, [r2, r1]!
   12d58:	adds	r1, r1, #1
   12d5c:	str	r1, [r2]
   12d60:	ldr	r1, [r2, #4]
   12d64:	adc	r1, r1, #0
   12d68:	cmp	r0, #5
   12d6c:	str	r1, [r2, #4]
   12d70:	bne	12dac <boolean_expression_complex@@Base+0x218>
   12d74:	ldrd	r0, [r9, #40]	; 0x28
   12d78:	adds	r0, r0, #1
   12d7c:	adc	r1, r1, #0
   12d80:	strd	r0, [r9, #40]	; 0x28
   12d84:	sub	sp, fp, #24
   12d88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d8c:	ldr	r0, [pc, #68]	; 12dd8 <boolean_expression_complex@@Base+0x244>
   12d90:	ldr	r1, [pc, #68]	; 12ddc <boolean_expression_complex@@Base+0x248>
   12d94:	ldr	r3, [pc, #68]	; 12de0 <boolean_expression_complex@@Base+0x24c>
   12d98:	mov	r2, #166	; 0xa6
   12d9c:	add	r0, pc, r0
   12da0:	add	r1, pc, r1
   12da4:	add	r3, pc, r3
   12da8:	bl	12010 <__assert_fail@plt>
   12dac:	ldr	r0, [pc, #48]	; 12de4 <boolean_expression_complex@@Base+0x250>
   12db0:	ldr	r1, [pc, #48]	; 12de8 <boolean_expression_complex@@Base+0x254>
   12db4:	ldr	r3, [pc, #48]	; 12dec <boolean_expression_complex@@Base+0x258>
   12db8:	mov	r2, #167	; 0xa7
   12dbc:	add	r0, pc, r0
   12dc0:	add	r1, pc, r1
   12dc4:	add	r3, pc, r3
   12dc8:	bl	12010 <__assert_fail@plt>
   12dcc:	andeq	sl, r1, ip, lsr #14
   12dd0:	andeq	sl, r1, r0, lsr r7
   12dd4:	andeq	sl, r1, ip, asr #7
   12dd8:	andeq	r8, r0, r4, lsr r0
   12ddc:	andeq	r7, r0, r6, ror #29
   12de0:	andeq	r8, r0, r7, asr #32
   12de4:	strdeq	r7, [r0], -r4
   12de8:	andeq	r7, r0, r6, asr #29
   12dec:	andeq	r8, r0, r7, lsr #32

00012df0 <boolean_binary_operator_is_read_properly@@Base>:
   12df0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12df4:	add	fp, sp, #24
   12df8:	sub	sp, sp, #16
   12dfc:	ldr	r7, [pc, #624]	; 13074 <boolean_binary_operator_is_read_properly@@Base+0x284>
   12e00:	ldr	r0, [pc, #624]	; 13078 <boolean_binary_operator_is_read_properly@@Base+0x288>
   12e04:	mov	r8, #3
   12e08:	ldr	r0, [pc, r0]
   12e0c:	add	r7, pc, r7
   12e10:	adds	r0, r0, #1
   12e14:	str	r0, [r7]
   12e18:	ldr	r0, [r7, #4]
   12e1c:	adc	r0, r0, #0
   12e20:	str	r0, [r7, #4]
   12e24:	mov	r0, #3
   12e28:	bl	11ef0 <malloc@plt>
   12e2c:	mov	r5, r0
   12e30:	movw	r0, #15649	; 0x3d21
   12e34:	mov	r4, sp
   12e38:	add	r1, sp, #4
   12e3c:	strh	r0, [r5]
   12e40:	mov	r0, #0
   12e44:	strb	r0, [r5, #2]
   12e48:	mov	r0, r4
   12e4c:	bl	16ad0 <init_grammar@@Base>
   12e50:	mov	r0, #12
   12e54:	bl	11ef0 <malloc@plt>
   12e58:	mov	r6, r0
   12e5c:	mov	r0, #8
   12e60:	bl	11ef0 <malloc@plt>
   12e64:	mov	r1, #2
   12e68:	str	r0, [r6]
   12e6c:	bl	14ee0 <init_token_int_value@@Base>
   12e70:	mov	r0, #8
   12e74:	bl	11ef0 <malloc@plt>
   12e78:	mov	r1, r5
   12e7c:	str	r0, [r6, #4]
   12e80:	bl	15250 <init_token_boolean_op@@Base>
   12e84:	mov	r0, #8
   12e88:	bl	11ef0 <malloc@plt>
   12e8c:	mov	r1, #1
   12e90:	str	r0, [r6, #8]
   12e94:	bl	14ee0 <init_token_int_value@@Base>
   12e98:	ldr	r5, [pc, #476]	; 1307c <boolean_binary_operator_is_read_properly@@Base+0x28c>
   12e9c:	mov	r0, r4
   12ea0:	ldr	r5, [pc, r5]
   12ea4:	str	r8, [r5, #220]	; 0xdc
   12ea8:	str	r6, [r5, #228]	; 0xe4
   12eac:	bl	17684 <read_boolean_binary_expression@@Base>
   12eb0:	ldr	r1, [r5, #204]	; 0xcc
   12eb4:	mov	r2, #16
   12eb8:	mov	r3, r7
   12ebc:	cmp	r1, #3
   12ec0:	movweq	r2, #8
   12ec4:	ldr	r2, [r3, r2]!
   12ec8:	adds	r2, r2, #1
   12ecc:	str	r2, [r3]
   12ed0:	ldr	r2, [r3, #4]
   12ed4:	adc	r2, r2, #0
   12ed8:	cmp	r1, #3
   12edc:	str	r2, [r3, #4]
   12ee0:	bne	12fd4 <boolean_binary_operator_is_read_properly@@Base+0x1e4>
   12ee4:	ldr	r1, [r0]
   12ee8:	mov	r2, #32
   12eec:	mov	r3, r7
   12ef0:	cmp	r1, #5
   12ef4:	movweq	r2, #24
   12ef8:	ldr	r2, [r3, r2]!
   12efc:	adds	r2, r2, #1
   12f00:	str	r2, [r3]
   12f04:	ldr	r2, [r3, #4]
   12f08:	adc	r2, r2, #0
   12f0c:	cmp	r1, #5
   12f10:	str	r2, [r3, #4]
   12f14:	bne	12ff4 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12f18:	ldr	r1, [r0, #8]
   12f1c:	mov	r2, #48	; 0x30
   12f20:	mov	r3, r7
   12f24:	ldr	r1, [r1]
   12f28:	cmp	r1, #1
   12f2c:	movweq	r2, #40	; 0x28
   12f30:	ldr	r2, [r3, r2]!
   12f34:	adds	r2, r2, #1
   12f38:	str	r2, [r3]
   12f3c:	ldr	r2, [r3, #4]
   12f40:	adc	r2, r2, #0
   12f44:	cmp	r1, #1
   12f48:	str	r2, [r3, #4]
   12f4c:	bne	13014 <boolean_binary_operator_is_read_properly@@Base+0x224>
   12f50:	ldr	r1, [r0, #16]
   12f54:	mov	r2, #64	; 0x40
   12f58:	mov	r3, r7
   12f5c:	cmp	r1, #1
   12f60:	movweq	r2, #56	; 0x38
   12f64:	ldr	r2, [r3, r2]!
   12f68:	adds	r2, r2, #1
   12f6c:	str	r2, [r3]
   12f70:	ldr	r2, [r3, #4]
   12f74:	adc	r2, r2, #0
   12f78:	cmp	r1, #1
   12f7c:	str	r2, [r3, #4]
   12f80:	bne	13034 <boolean_binary_operator_is_read_properly@@Base+0x244>
   12f84:	ldr	r0, [r0, #12]
   12f88:	mov	r1, #80	; 0x50
   12f8c:	mov	r2, r7
   12f90:	ldr	r0, [r0]
   12f94:	cmp	r0, #1
   12f98:	movweq	r1, #72	; 0x48
   12f9c:	ldr	r1, [r2, r1]!
   12fa0:	adds	r1, r1, #1
   12fa4:	str	r1, [r2]
   12fa8:	ldr	r1, [r2, #4]
   12fac:	adc	r1, r1, #0
   12fb0:	cmp	r0, #1
   12fb4:	str	r1, [r2, #4]
   12fb8:	bne	13054 <boolean_binary_operator_is_read_properly@@Base+0x264>
   12fbc:	ldrd	r0, [r7, #88]	; 0x58
   12fc0:	adds	r0, r0, #1
   12fc4:	adc	r1, r1, #0
   12fc8:	strd	r0, [r7, #88]	; 0x58
   12fcc:	sub	sp, fp, #24
   12fd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fd4:	ldr	r0, [pc, #164]	; 13080 <boolean_binary_operator_is_read_properly@@Base+0x290>
   12fd8:	ldr	r1, [pc, #164]	; 13084 <boolean_binary_operator_is_read_properly@@Base+0x294>
   12fdc:	ldr	r3, [pc, #164]	; 13088 <boolean_binary_operator_is_read_properly@@Base+0x298>
   12fe0:	mov	r2, #200	; 0xc8
   12fe4:	add	r0, pc, r0
   12fe8:	add	r1, pc, r1
   12fec:	add	r3, pc, r3
   12ff0:	bl	12010 <__assert_fail@plt>
   12ff4:	ldr	r0, [pc, #144]	; 1308c <boolean_binary_operator_is_read_properly@@Base+0x29c>
   12ff8:	ldr	r1, [pc, #144]	; 13090 <boolean_binary_operator_is_read_properly@@Base+0x2a0>
   12ffc:	ldr	r3, [pc, #144]	; 13094 <boolean_binary_operator_is_read_properly@@Base+0x2a4>
   13000:	mov	r2, #201	; 0xc9
   13004:	add	r0, pc, r0
   13008:	add	r1, pc, r1
   1300c:	add	r3, pc, r3
   13010:	bl	12010 <__assert_fail@plt>
   13014:	ldr	r0, [pc, #124]	; 13098 <boolean_binary_operator_is_read_properly@@Base+0x2a8>
   13018:	ldr	r1, [pc, #124]	; 1309c <boolean_binary_operator_is_read_properly@@Base+0x2ac>
   1301c:	ldr	r3, [pc, #124]	; 130a0 <boolean_binary_operator_is_read_properly@@Base+0x2b0>
   13020:	mov	r2, #203	; 0xcb
   13024:	add	r0, pc, r0
   13028:	add	r1, pc, r1
   1302c:	add	r3, pc, r3
   13030:	bl	12010 <__assert_fail@plt>
   13034:	ldr	r0, [pc, #104]	; 130a4 <boolean_binary_operator_is_read_properly@@Base+0x2b4>
   13038:	ldr	r1, [pc, #104]	; 130a8 <boolean_binary_operator_is_read_properly@@Base+0x2b8>
   1303c:	ldr	r3, [pc, #104]	; 130ac <boolean_binary_operator_is_read_properly@@Base+0x2bc>
   13040:	mov	r2, #204	; 0xcc
   13044:	add	r0, pc, r0
   13048:	add	r1, pc, r1
   1304c:	add	r3, pc, r3
   13050:	bl	12010 <__assert_fail@plt>
   13054:	ldr	r0, [pc, #84]	; 130b0 <boolean_binary_operator_is_read_properly@@Base+0x2c0>
   13058:	ldr	r1, [pc, #84]	; 130b4 <boolean_binary_operator_is_read_properly@@Base+0x2c4>
   1305c:	ldr	r3, [pc, #84]	; 130b8 <boolean_binary_operator_is_read_properly@@Base+0x2c8>
   13060:	mov	r2, #205	; 0xcd
   13064:	add	r0, pc, r0
   13068:	add	r1, pc, r1
   1306c:	add	r3, pc, r3
   13070:	bl	12010 <__assert_fail@plt>
   13074:	strdeq	sl, [r1], -ip
   13078:	andeq	sl, r1, r0, lsl #10
   1307c:	andeq	sl, r1, r4, lsr #4
   13080:	andeq	r7, r0, r9, lsr #28
   13084:	muleq	r0, lr, ip
   13088:	andeq	r7, r0, fp, lsr lr
   1308c:	andeq	r7, r0, ip, lsr #27
   13090:	andeq	r7, r0, lr, ror ip
   13094:	andeq	r7, r0, fp, lsl lr
   13098:	andeq	r7, r0, r3, lsr lr
   1309c:	andeq	r7, r0, lr, asr ip
   130a0:	strdeq	r7, [r0], -fp
   130a4:	andeq	r7, r0, lr, lsr #28
   130a8:	andeq	r7, r0, lr, lsr ip
   130ac:	ldrdeq	r7, [r0], -fp
   130b0:	andeq	r7, r0, r7, lsr #28
   130b4:	andeq	r7, r0, lr, lsl ip
   130b8:			; <UNDEFINED> instruction: 0x00007dbb

000130bc <boolean_unary_operator_is_read_properly@@Base>:
   130bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130c0:	add	fp, sp, #24
   130c4:	sub	sp, sp, #16
   130c8:	ldr	r7, [pc, #592]	; 13320 <boolean_unary_operator_is_read_properly@@Base+0x264>
   130cc:	ldr	r0, [pc, #592]	; 13324 <boolean_unary_operator_is_read_properly@@Base+0x268>
   130d0:	mov	r8, #2
   130d4:	ldr	r0, [pc, r0]
   130d8:	add	r7, pc, r7
   130dc:	adds	r0, r0, #1
   130e0:	str	r0, [r7]
   130e4:	ldr	r0, [r7, #4]
   130e8:	adc	r0, r0, #0
   130ec:	str	r0, [r7, #4]
   130f0:	mov	r0, #2
   130f4:	bl	11ef0 <malloc@plt>
   130f8:	mov	r5, r0
   130fc:	mov	r0, #33	; 0x21
   13100:	mov	r4, sp
   13104:	add	r1, sp, #4
   13108:	strh	r0, [r5]
   1310c:	mov	r0, r4
   13110:	bl	16ad0 <init_grammar@@Base>
   13114:	mov	r0, #8
   13118:	bl	11ef0 <malloc@plt>
   1311c:	mov	r6, r0
   13120:	mov	r0, #8
   13124:	bl	11ef0 <malloc@plt>
   13128:	mov	r1, r5
   1312c:	str	r0, [r6]
   13130:	bl	15250 <init_token_boolean_op@@Base>
   13134:	mov	r0, #8
   13138:	bl	11ef0 <malloc@plt>
   1313c:	mov	r1, #1
   13140:	str	r0, [r6, #4]
   13144:	bl	14ee0 <init_token_int_value@@Base>
   13148:	ldr	r5, [pc, #472]	; 13328 <boolean_unary_operator_is_read_properly@@Base+0x26c>
   1314c:	mov	r0, r4
   13150:	ldr	r5, [pc, r5]
   13154:	str	r8, [r5, #220]	; 0xdc
   13158:	str	r6, [r5, #228]	; 0xe4
   1315c:	bl	178b4 <read_boolean_unary_expression@@Base>
   13160:	ldr	r1, [r5, #204]	; 0xcc
   13164:	mov	r2, #16
   13168:	mov	r3, r7
   1316c:	cmp	r1, #2
   13170:	movweq	r2, #8
   13174:	ldr	r2, [r3, r2]!
   13178:	adds	r2, r2, #1
   1317c:	str	r2, [r3]
   13180:	ldr	r2, [r3, #4]
   13184:	adc	r2, r2, #0
   13188:	cmp	r1, #2
   1318c:	str	r2, [r3, #4]
   13190:	bne	13280 <boolean_unary_operator_is_read_properly@@Base+0x1c4>
   13194:	ldr	r1, [r0]
   13198:	mov	r2, #32
   1319c:	mov	r3, r7
   131a0:	cmp	r1, #5
   131a4:	movweq	r2, #24
   131a8:	ldr	r2, [r3, r2]!
   131ac:	adds	r2, r2, #1
   131b0:	str	r2, [r3]
   131b4:	ldr	r2, [r3, #4]
   131b8:	adc	r2, r2, #0
   131bc:	cmp	r1, #5
   131c0:	str	r2, [r3, #4]
   131c4:	bne	132a0 <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   131c8:	ldr	r1, [r0, #8]
   131cc:	mov	r2, #48	; 0x30
   131d0:	mov	r3, r7
   131d4:	ldr	r1, [r1]
   131d8:	cmp	r1, #1
   131dc:	movweq	r2, #40	; 0x28
   131e0:	ldr	r2, [r3, r2]!
   131e4:	adds	r2, r2, #1
   131e8:	str	r2, [r3]
   131ec:	ldr	r2, [r3, #4]
   131f0:	adc	r2, r2, #0
   131f4:	cmp	r1, #1
   131f8:	str	r2, [r3, #4]
   131fc:	bne	132c0 <boolean_unary_operator_is_read_properly@@Base+0x204>
   13200:	ldr	r1, [r0, #16]
   13204:	mov	r2, #64	; 0x40
   13208:	mov	r3, r7
   1320c:	cmp	r1, #8
   13210:	movweq	r2, #56	; 0x38
   13214:	ldr	r2, [r3, r2]!
   13218:	adds	r2, r2, #1
   1321c:	str	r2, [r3]
   13220:	ldr	r2, [r3, #4]
   13224:	adc	r2, r2, #0
   13228:	cmp	r1, #8
   1322c:	str	r2, [r3, #4]
   13230:	bne	132e0 <boolean_unary_operator_is_read_properly@@Base+0x224>
   13234:	ldr	r0, [r0, #12]
   13238:	mov	r1, #80	; 0x50
   1323c:	mov	r2, r7
   13240:	cmp	r0, #0
   13244:	movweq	r1, #72	; 0x48
   13248:	ldr	r1, [r2, r1]!
   1324c:	adds	r1, r1, #1
   13250:	str	r1, [r2]
   13254:	ldr	r1, [r2, #4]
   13258:	adc	r1, r1, #0
   1325c:	cmp	r0, #0
   13260:	str	r1, [r2, #4]
   13264:	bne	13300 <boolean_unary_operator_is_read_properly@@Base+0x244>
   13268:	ldrd	r0, [r7, #88]	; 0x58
   1326c:	adds	r0, r0, #1
   13270:	adc	r1, r1, #0
   13274:	strd	r0, [r7, #88]	; 0x58
   13278:	sub	sp, fp, #24
   1327c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13280:	ldr	r0, [pc, #164]	; 1332c <boolean_unary_operator_is_read_properly@@Base+0x270>
   13284:	ldr	r1, [pc, #164]	; 13330 <boolean_unary_operator_is_read_properly@@Base+0x274>
   13288:	ldr	r3, [pc, #164]	; 13334 <boolean_unary_operator_is_read_properly@@Base+0x278>
   1328c:	mov	r2, #235	; 0xeb
   13290:	add	r0, pc, r0
   13294:	add	r1, pc, r1
   13298:	add	r3, pc, r3
   1329c:	bl	12010 <__assert_fail@plt>
   132a0:	ldr	r0, [pc, #144]	; 13338 <boolean_unary_operator_is_read_properly@@Base+0x27c>
   132a4:	ldr	r1, [pc, #144]	; 1333c <boolean_unary_operator_is_read_properly@@Base+0x280>
   132a8:	ldr	r3, [pc, #144]	; 13340 <boolean_unary_operator_is_read_properly@@Base+0x284>
   132ac:	mov	r2, #236	; 0xec
   132b0:	add	r0, pc, r0
   132b4:	add	r1, pc, r1
   132b8:	add	r3, pc, r3
   132bc:	bl	12010 <__assert_fail@plt>
   132c0:	ldr	r0, [pc, #124]	; 13344 <boolean_unary_operator_is_read_properly@@Base+0x288>
   132c4:	ldr	r1, [pc, #124]	; 13348 <boolean_unary_operator_is_read_properly@@Base+0x28c>
   132c8:	ldr	r3, [pc, #124]	; 1334c <boolean_unary_operator_is_read_properly@@Base+0x290>
   132cc:	mov	r2, #238	; 0xee
   132d0:	add	r0, pc, r0
   132d4:	add	r1, pc, r1
   132d8:	add	r3, pc, r3
   132dc:	bl	12010 <__assert_fail@plt>
   132e0:	ldr	r0, [pc, #104]	; 13350 <boolean_unary_operator_is_read_properly@@Base+0x294>
   132e4:	ldr	r1, [pc, #104]	; 13354 <boolean_unary_operator_is_read_properly@@Base+0x298>
   132e8:	ldr	r3, [pc, #104]	; 13358 <boolean_unary_operator_is_read_properly@@Base+0x29c>
   132ec:	mov	r2, #239	; 0xef
   132f0:	add	r0, pc, r0
   132f4:	add	r1, pc, r1
   132f8:	add	r3, pc, r3
   132fc:	bl	12010 <__assert_fail@plt>
   13300:	ldr	r0, [pc, #84]	; 1335c <boolean_unary_operator_is_read_properly@@Base+0x2a0>
   13304:	ldr	r1, [pc, #84]	; 13360 <boolean_unary_operator_is_read_properly@@Base+0x2a4>
   13308:	ldr	r3, [pc, #84]	; 13364 <boolean_unary_operator_is_read_properly@@Base+0x2a8>
   1330c:	mov	r2, #240	; 0xf0
   13310:	add	r0, pc, r0
   13314:	add	r1, pc, r1
   13318:	add	r3, pc, r3
   1331c:	bl	12010 <__assert_fail@plt>
   13320:	muleq	r1, r0, r2
   13324:	muleq	r1, r4, r2
   13328:	andeq	r9, r1, r4, ror pc
   1332c:	andeq	r7, r0, sl, ror sl
   13330:	strdeq	r7, [r0], -r2
   13334:	andeq	r7, r0, pc, lsl #24
   13338:	andeq	r7, r0, r0, lsl #22
   1333c:	ldrdeq	r7, [r0], -r2
   13340:	andeq	r7, r0, pc, ror #23
   13344:	andeq	r7, r0, r7, lsl #23
   13348:			; <UNDEFINED> instruction: 0x000079b2
   1334c:	andeq	r7, r0, pc, asr #23
   13350:	andeq	r7, r0, r6, ror #23
   13354:	muleq	r0, r2, r9
   13358:	andeq	r7, r0, pc, lsr #23
   1335c:	ldrdeq	r7, [r0], -sl
   13360:	andeq	r7, r0, r2, ror r9
   13364:	andeq	r7, r0, pc, lsl #23

00013368 <if_statement_only@@Base>:
   13368:	push	{r4, r5, r6, r7, fp, lr}
   1336c:	add	fp, sp, #16
   13370:	sub	sp, sp, #16
   13374:	ldr	r7, [pc, #544]	; 1359c <if_statement_only@@Base+0x234>
   13378:	ldr	r0, [pc, #544]	; 135a0 <if_statement_only@@Base+0x238>
   1337c:	mov	r4, sp
   13380:	add	r1, sp, #4
   13384:	ldr	r0, [pc, r0]
   13388:	add	r7, pc, r7
   1338c:	adds	r0, r0, #1
   13390:	str	r0, [r7]
   13394:	ldr	r0, [r7, #4]
   13398:	adc	r0, r0, #0
   1339c:	str	r0, [r7, #4]
   133a0:	mov	r0, r4
   133a4:	bl	16ad0 <init_grammar@@Base>
   133a8:	mov	r0, #3
   133ac:	bl	11ef0 <malloc@plt>
   133b0:	mov	r6, r0
   133b4:	movw	r0, #15649	; 0x3d21
   133b8:	strh	r0, [r6]
   133bc:	mov	r0, #0
   133c0:	strb	r0, [r6, #2]
   133c4:	mov	r0, #36	; 0x24
   133c8:	bl	11ef0 <malloc@plt>
   133cc:	mov	r5, r0
   133d0:	mov	r0, #4
   133d4:	bl	11ef0 <malloc@plt>
   133d8:	str	r0, [r5]
   133dc:	bl	14f80 <init_token_opar@@Base>
   133e0:	mov	r0, #8
   133e4:	bl	11ef0 <malloc@plt>
   133e8:	mov	r1, #1
   133ec:	str	r0, [r5, #4]
   133f0:	bl	14ee0 <init_token_int_value@@Base>
   133f4:	mov	r0, #8
   133f8:	bl	11ef0 <malloc@plt>
   133fc:	mov	r1, #1
   13400:	str	r0, [r5, #8]
   13404:	bl	14ee0 <init_token_int_value@@Base>
   13408:	mov	r0, #8
   1340c:	bl	11ef0 <malloc@plt>
   13410:	mov	r1, r6
   13414:	str	r0, [r5, #12]
   13418:	bl	15250 <init_token_boolean_op@@Base>
   1341c:	mov	r0, #8
   13420:	bl	11ef0 <malloc@plt>
   13424:	mov	r1, #1
   13428:	str	r0, [r5, #16]
   1342c:	bl	14ee0 <init_token_int_value@@Base>
   13430:	mov	r0, #4
   13434:	bl	11ef0 <malloc@plt>
   13438:	str	r0, [r5, #20]
   1343c:	bl	14fd0 <init_token_cpar@@Base>
   13440:	mov	r0, #4
   13444:	bl	11ef0 <malloc@plt>
   13448:	str	r0, [r5, #24]
   1344c:	bl	15020 <init_token_obra@@Base>
   13450:	mov	r0, #4
   13454:	bl	11ef0 <malloc@plt>
   13458:	str	r0, [r5, #28]
   1345c:	bl	15070 <init_token_cbra@@Base>
   13460:	mov	r0, #4
   13464:	bl	11ef0 <malloc@plt>
   13468:	str	r0, [r5, #32]
   1346c:	bl	15160 <init_token_eof@@Base>
   13470:	ldr	r6, [pc, #300]	; 135a4 <if_statement_only@@Base+0x23c>
   13474:	mov	r0, #9
   13478:	ldr	r6, [pc, r6]
   1347c:	str	r0, [r6, #220]	; 0xdc
   13480:	mov	r0, r4
   13484:	str	r5, [r6, #228]	; 0xe4
   13488:	bl	17174 <read_if_statement@@Base>
   1348c:	ldr	r1, [r6, #204]	; 0xcc
   13490:	mov	r2, #16
   13494:	mov	r3, r7
   13498:	cmp	r1, #9
   1349c:	movweq	r2, #8
   134a0:	ldr	r2, [r3, r2]!
   134a4:	adds	r2, r2, #1
   134a8:	str	r2, [r3]
   134ac:	ldr	r2, [r3, #4]
   134b0:	adc	r2, r2, #0
   134b4:	cmp	r1, #9
   134b8:	str	r2, [r3, #4]
   134bc:	bne	1353c <if_statement_only@@Base+0x1d4>
   134c0:	mov	r1, #32
   134c4:	cmp	r0, #0
   134c8:	mov	r2, r7
   134cc:	movwne	r1, #24
   134d0:	ldr	r1, [r2, r1]!
   134d4:	adds	r1, r1, #1
   134d8:	str	r1, [r2]
   134dc:	ldr	r1, [r2, #4]
   134e0:	adc	r1, r1, #0
   134e4:	cmp	r0, #0
   134e8:	str	r1, [r2, #4]
   134ec:	beq	1355c <if_statement_only@@Base+0x1f4>
   134f0:	ldr	r0, [r0]
   134f4:	mov	r1, #48	; 0x30
   134f8:	mov	r2, r7
   134fc:	cmp	r0, #4
   13500:	movweq	r1, #40	; 0x28
   13504:	ldr	r1, [r2, r1]!
   13508:	adds	r1, r1, #1
   1350c:	str	r1, [r2]
   13510:	ldr	r1, [r2, #4]
   13514:	adc	r1, r1, #0
   13518:	cmp	r0, #4
   1351c:	str	r1, [r2, #4]
   13520:	bne	1357c <if_statement_only@@Base+0x214>
   13524:	ldrd	r0, [r7, #56]	; 0x38
   13528:	adds	r0, r0, #1
   1352c:	adc	r1, r1, #0
   13530:	strd	r0, [r7, #56]	; 0x38
   13534:	sub	sp, fp, #16
   13538:	pop	{r4, r5, r6, r7, fp, pc}
   1353c:	ldr	r0, [pc, #100]	; 135a8 <if_statement_only@@Base+0x240>
   13540:	ldr	r1, [pc, #100]	; 135ac <if_statement_only@@Base+0x244>
   13544:	ldr	r3, [pc, #100]	; 135b0 <if_statement_only@@Base+0x248>
   13548:	movw	r2, #283	; 0x11b
   1354c:	add	r0, pc, r0
   13550:	add	r1, pc, r1
   13554:	add	r3, pc, r3
   13558:	bl	12010 <__assert_fail@plt>
   1355c:	ldr	r0, [pc, #80]	; 135b4 <if_statement_only@@Base+0x24c>
   13560:	ldr	r1, [pc, #80]	; 135b8 <if_statement_only@@Base+0x250>
   13564:	ldr	r3, [pc, #80]	; 135bc <if_statement_only@@Base+0x254>
   13568:	mov	r2, #284	; 0x11c
   1356c:	add	r0, pc, r0
   13570:	add	r1, pc, r1
   13574:	add	r3, pc, r3
   13578:	bl	12010 <__assert_fail@plt>
   1357c:	ldr	r0, [pc, #60]	; 135c0 <if_statement_only@@Base+0x258>
   13580:	ldr	r1, [pc, #60]	; 135c4 <if_statement_only@@Base+0x25c>
   13584:	ldr	r3, [pc, #60]	; 135c8 <if_statement_only@@Base+0x260>
   13588:	movw	r2, #285	; 0x11d
   1358c:	add	r0, pc, r0
   13590:	add	r1, pc, r1
   13594:	add	r3, pc, r3
   13598:	bl	12010 <__assert_fail@plt>
   1359c:	andeq	sl, r1, r0, asr #32
   135a0:	andeq	sl, r1, r4, asr #32
   135a4:	andeq	r9, r1, ip, asr #24
   135a8:			; <UNDEFINED> instruction: 0x000079b3
   135ac:	andeq	r7, r0, r6, lsr r7
   135b0:	andeq	r7, r0, r5, asr #19
   135b4:	andeq	r7, r0, r6, asr #19
   135b8:	andeq	r7, r0, r6, lsl r7
   135bc:	andeq	r7, r0, r5, lsr #19
   135c0:			; <UNDEFINED> instruction: 0x000079b2
   135c4:	strdeq	r7, [r0], -r6
   135c8:	andeq	r7, r0, r5, lsl #19

000135cc <if_else_statements@@Base>:
   135cc:	push	{r4, r5, r6, r7, fp, lr}
   135d0:	add	fp, sp, #16
   135d4:	sub	sp, sp, #16
   135d8:	ldr	r7, [pc, #576]	; 13820 <if_else_statements@@Base+0x254>
   135dc:	ldr	r0, [pc, #576]	; 13824 <if_else_statements@@Base+0x258>
   135e0:	mov	r4, sp
   135e4:	add	r1, sp, #4
   135e8:	ldr	r0, [pc, r0]
   135ec:	add	r7, pc, r7
   135f0:	adds	r0, r0, #1
   135f4:	str	r0, [r7]
   135f8:	ldr	r0, [r7, #4]
   135fc:	adc	r0, r0, #0
   13600:	str	r0, [r7, #4]
   13604:	mov	r0, r4
   13608:	bl	16ad0 <init_grammar@@Base>
   1360c:	mov	r0, #3
   13610:	bl	11ef0 <malloc@plt>
   13614:	mov	r6, r0
   13618:	movw	r0, #15649	; 0x3d21
   1361c:	strh	r0, [r6]
   13620:	mov	r0, #0
   13624:	strb	r0, [r6, #2]
   13628:	mov	r0, #44	; 0x2c
   1362c:	bl	11ef0 <malloc@plt>
   13630:	mov	r5, r0
   13634:	mov	r0, #4
   13638:	bl	11ef0 <malloc@plt>
   1363c:	str	r0, [r5]
   13640:	bl	14f80 <init_token_opar@@Base>
   13644:	mov	r0, #8
   13648:	bl	11ef0 <malloc@plt>
   1364c:	mov	r1, #1
   13650:	str	r0, [r5, #4]
   13654:	bl	14ee0 <init_token_int_value@@Base>
   13658:	mov	r0, #8
   1365c:	bl	11ef0 <malloc@plt>
   13660:	mov	r1, #1
   13664:	str	r0, [r5, #8]
   13668:	bl	14ee0 <init_token_int_value@@Base>
   1366c:	mov	r0, #8
   13670:	bl	11ef0 <malloc@plt>
   13674:	mov	r1, r6
   13678:	str	r0, [r5, #12]
   1367c:	bl	15250 <init_token_boolean_op@@Base>
   13680:	mov	r0, #8
   13684:	bl	11ef0 <malloc@plt>
   13688:	mov	r1, #1
   1368c:	str	r0, [r5, #16]
   13690:	bl	14ee0 <init_token_int_value@@Base>
   13694:	mov	r0, #4
   13698:	bl	11ef0 <malloc@plt>
   1369c:	str	r0, [r5, #20]
   136a0:	bl	14fd0 <init_token_cpar@@Base>
   136a4:	mov	r0, #4
   136a8:	bl	11ef0 <malloc@plt>
   136ac:	str	r0, [r5, #24]
   136b0:	bl	15020 <init_token_obra@@Base>
   136b4:	mov	r0, #4
   136b8:	bl	11ef0 <malloc@plt>
   136bc:	str	r0, [r5, #28]
   136c0:	bl	15070 <init_token_cbra@@Base>
   136c4:	mov	r0, #4
   136c8:	bl	11ef0 <malloc@plt>
   136cc:	str	r0, [r5, #32]
   136d0:	bl	15200 <init_token_else@@Base>
   136d4:	mov	r0, #4
   136d8:	bl	11ef0 <malloc@plt>
   136dc:	str	r0, [r5, #36]	; 0x24
   136e0:	bl	15020 <init_token_obra@@Base>
   136e4:	mov	r0, #4
   136e8:	bl	11ef0 <malloc@plt>
   136ec:	str	r0, [r5, #40]	; 0x28
   136f0:	bl	15070 <init_token_cbra@@Base>
   136f4:	ldr	r6, [pc, #300]	; 13828 <if_else_statements@@Base+0x25c>
   136f8:	mov	r0, #11
   136fc:	ldr	r6, [pc, r6]
   13700:	str	r0, [r6, #220]	; 0xdc
   13704:	mov	r0, r4
   13708:	str	r5, [r6, #228]	; 0xe4
   1370c:	bl	17174 <read_if_statement@@Base>
   13710:	ldr	r1, [r6, #204]	; 0xcc
   13714:	mov	r2, #16
   13718:	mov	r3, r7
   1371c:	cmp	r1, #11
   13720:	movweq	r2, #8
   13724:	ldr	r2, [r3, r2]!
   13728:	adds	r2, r2, #1
   1372c:	str	r2, [r3]
   13730:	ldr	r2, [r3, #4]
   13734:	adc	r2, r2, #0
   13738:	cmp	r1, #11
   1373c:	str	r2, [r3, #4]
   13740:	bne	137c0 <if_else_statements@@Base+0x1f4>
   13744:	mov	r1, #32
   13748:	cmp	r0, #0
   1374c:	mov	r2, r7
   13750:	movwne	r1, #24
   13754:	ldr	r1, [r2, r1]!
   13758:	adds	r1, r1, #1
   1375c:	str	r1, [r2]
   13760:	ldr	r1, [r2, #4]
   13764:	adc	r1, r1, #0
   13768:	cmp	r0, #0
   1376c:	str	r1, [r2, #4]
   13770:	beq	137e0 <if_else_statements@@Base+0x214>
   13774:	ldr	r0, [r0]
   13778:	mov	r1, #48	; 0x30
   1377c:	mov	r2, r7
   13780:	cmp	r0, #4
   13784:	movweq	r1, #40	; 0x28
   13788:	ldr	r1, [r2, r1]!
   1378c:	adds	r1, r1, #1
   13790:	str	r1, [r2]
   13794:	ldr	r1, [r2, #4]
   13798:	adc	r1, r1, #0
   1379c:	cmp	r0, #4
   137a0:	str	r1, [r2, #4]
   137a4:	bne	13800 <if_else_statements@@Base+0x234>
   137a8:	ldrd	r0, [r7, #56]	; 0x38
   137ac:	adds	r0, r0, #1
   137b0:	adc	r1, r1, #0
   137b4:	strd	r0, [r7, #56]	; 0x38
   137b8:	sub	sp, fp, #16
   137bc:	pop	{r4, r5, r6, r7, fp, pc}
   137c0:	ldr	r0, [pc, #100]	; 1382c <if_else_statements@@Base+0x260>
   137c4:	ldr	r1, [pc, #100]	; 13830 <if_else_statements@@Base+0x264>
   137c8:	ldr	r3, [pc, #100]	; 13834 <if_else_statements@@Base+0x268>
   137cc:	mov	r2, #332	; 0x14c
   137d0:	add	r0, pc, r0
   137d4:	add	r1, pc, r1
   137d8:	add	r3, pc, r3
   137dc:	bl	12010 <__assert_fail@plt>
   137e0:	ldr	r0, [pc, #80]	; 13838 <if_else_statements@@Base+0x26c>
   137e4:	ldr	r1, [pc, #80]	; 1383c <if_else_statements@@Base+0x270>
   137e8:	ldr	r3, [pc, #80]	; 13840 <if_else_statements@@Base+0x274>
   137ec:	movw	r2, #333	; 0x14d
   137f0:	add	r0, pc, r0
   137f4:	add	r1, pc, r1
   137f8:	add	r3, pc, r3
   137fc:	bl	12010 <__assert_fail@plt>
   13800:	ldr	r0, [pc, #60]	; 13844 <if_else_statements@@Base+0x278>
   13804:	ldr	r1, [pc, #60]	; 13848 <if_else_statements@@Base+0x27c>
   13808:	ldr	r3, [pc, #60]	; 1384c <if_else_statements@@Base+0x280>
   1380c:	movw	r2, #334	; 0x14e
   13810:	add	r0, pc, r0
   13814:	add	r1, pc, r1
   13818:	add	r3, pc, r3
   1381c:	bl	12010 <__assert_fail@plt>
   13820:	andeq	r9, r1, ip, lsl lr
   13824:	andeq	r9, r1, r0, lsr #28
   13828:	andeq	r9, r1, r8, asr #19
   1382c:	andeq	r7, r0, r0, lsl #15
   13830:			; <UNDEFINED> instruction: 0x000074b2
   13834:	muleq	r0, r3, r7
   13838:	andeq	r7, r0, r2, asr #14
   1383c:	muleq	r0, r2, r4
   13840:	andeq	r7, r0, r3, ror r7
   13844:	andeq	r7, r0, lr, lsr #14
   13848:	andeq	r7, r0, r2, ror r4
   1384c:	andeq	r7, r0, r3, asr r7

00013850 <body_with_two_returns@@Base>:
   13850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13854:	add	fp, sp, #24
   13858:	sub	sp, sp, #16
   1385c:	ldr	r6, [pc, #664]	; 13afc <body_with_two_returns@@Base+0x2ac>
   13860:	ldr	r0, [pc, #664]	; 13b00 <body_with_two_returns@@Base+0x2b0>
   13864:	mov	r9, sp
   13868:	add	r1, sp, #4
   1386c:	ldr	r0, [pc, r0]
   13870:	add	r6, pc, r6
   13874:	adds	r0, r0, #1
   13878:	str	r0, [r6]
   1387c:	ldr	r0, [r6, #4]
   13880:	adc	r0, r0, #0
   13884:	str	r0, [r6, #4]
   13888:	mov	r0, r9
   1388c:	bl	16ad0 <init_grammar@@Base>
   13890:	mov	r0, #32
   13894:	mov	r7, #32
   13898:	bl	11ef0 <malloc@plt>
   1389c:	mov	r5, r0
   138a0:	mov	r0, #4
   138a4:	bl	11ef0 <malloc@plt>
   138a8:	str	r0, [r5]
   138ac:	bl	15020 <init_token_obra@@Base>
   138b0:	mov	r0, #4
   138b4:	bl	11ef0 <malloc@plt>
   138b8:	str	r0, [r5, #4]
   138bc:	bl	150c0 <init_token_return@@Base>
   138c0:	mov	r0, #8
   138c4:	mov	r8, #8
   138c8:	bl	11ef0 <malloc@plt>
   138cc:	mov	r1, #1
   138d0:	str	r0, [r5, #8]
   138d4:	bl	14ee0 <init_token_int_value@@Base>
   138d8:	mov	r0, #4
   138dc:	bl	11ef0 <malloc@plt>
   138e0:	str	r0, [r5, #12]
   138e4:	bl	15110 <init_token_semicolon@@Base>
   138e8:	mov	r0, #4
   138ec:	bl	11ef0 <malloc@plt>
   138f0:	str	r0, [r5, #16]
   138f4:	bl	150c0 <init_token_return@@Base>
   138f8:	mov	r0, #8
   138fc:	bl	11ef0 <malloc@plt>
   13900:	mov	r1, #1
   13904:	str	r0, [r5, #20]
   13908:	bl	14ee0 <init_token_int_value@@Base>
   1390c:	mov	r0, #4
   13910:	bl	11ef0 <malloc@plt>
   13914:	str	r0, [r5, #24]
   13918:	bl	15110 <init_token_semicolon@@Base>
   1391c:	mov	r0, #4
   13920:	bl	11ef0 <malloc@plt>
   13924:	str	r0, [r5, #28]
   13928:	bl	15070 <init_token_cbra@@Base>
   1392c:	ldr	r4, [pc, #464]	; 13b04 <body_with_two_returns@@Base+0x2b4>
   13930:	mov	r0, r9
   13934:	ldr	r4, [pc, r4]
   13938:	str	r8, [r4, #220]	; 0xdc
   1393c:	str	r5, [r4, #228]	; 0xe4
   13940:	bl	16d80 <read_body@@Base>
   13944:	ldr	r1, [r4, #204]	; 0xcc
   13948:	mov	r3, r6
   1394c:	cmp	r1, #8
   13950:	mov	r2, r1
   13954:	movwne	r2, #16
   13958:	ldr	r2, [r3, r2]!
   1395c:	adds	r2, r2, #1
   13960:	str	r2, [r3]
   13964:	ldr	r2, [r3, #4]
   13968:	adc	r2, r2, #0
   1396c:	cmp	r1, #8
   13970:	str	r2, [r3, #4]
   13974:	bne	13a5c <body_with_two_returns@@Base+0x20c>
   13978:	cmp	r0, #0
   1397c:	mov	r1, r6
   13980:	movwne	r7, #24
   13984:	ldr	r2, [r1, r7]!
   13988:	adds	r2, r2, #1
   1398c:	str	r2, [r1]
   13990:	ldr	r2, [r1, #4]
   13994:	adc	r2, r2, #0
   13998:	cmp	r0, #0
   1399c:	str	r2, [r1, #4]
   139a0:	beq	13a7c <body_with_two_returns@@Base+0x22c>
   139a4:	ldr	r1, [r0]
   139a8:	mov	r2, #48	; 0x30
   139ac:	mov	r3, r6
   139b0:	cmp	r1, #3
   139b4:	movweq	r2, #40	; 0x28
   139b8:	ldr	r2, [r3, r2]!
   139bc:	adds	r2, r2, #1
   139c0:	str	r2, [r3]
   139c4:	ldr	r2, [r3, #4]
   139c8:	adc	r2, r2, #0
   139cc:	cmp	r1, #3
   139d0:	str	r2, [r3, #4]
   139d4:	bne	13a9c <body_with_two_returns@@Base+0x24c>
   139d8:	ldr	r0, [r0, #4]
   139dc:	mov	r2, #64	; 0x40
   139e0:	mov	r3, r6
   139e4:	ldr	r1, [r0]
   139e8:	cmp	r1, #3
   139ec:	movweq	r2, #56	; 0x38
   139f0:	ldr	r2, [r3, r2]!
   139f4:	adds	r2, r2, #1
   139f8:	str	r2, [r3]
   139fc:	ldr	r2, [r3, #4]
   13a00:	adc	r2, r2, #0
   13a04:	cmp	r1, #3
   13a08:	str	r2, [r3, #4]
   13a0c:	bne	13abc <body_with_two_returns@@Base+0x26c>
   13a10:	ldr	r0, [r0, #4]
   13a14:	mov	r1, #80	; 0x50
   13a18:	mov	r2, r6
   13a1c:	cmp	r0, #0
   13a20:	movweq	r1, #72	; 0x48
   13a24:	ldr	r1, [r2, r1]!
   13a28:	adds	r1, r1, #1
   13a2c:	str	r1, [r2]
   13a30:	ldr	r1, [r2, #4]
   13a34:	adc	r1, r1, #0
   13a38:	cmp	r0, #0
   13a3c:	str	r1, [r2, #4]
   13a40:	bne	13adc <body_with_two_returns@@Base+0x28c>
   13a44:	ldrd	r0, [r6, #88]	; 0x58
   13a48:	adds	r0, r0, #1
   13a4c:	adc	r1, r1, #0
   13a50:	strd	r0, [r6, #88]	; 0x58
   13a54:	sub	sp, fp, #24
   13a58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13a5c:	ldr	r0, [pc, #164]	; 13b08 <body_with_two_returns@@Base+0x2b8>
   13a60:	ldr	r1, [pc, #164]	; 13b0c <body_with_two_returns@@Base+0x2bc>
   13a64:	ldr	r3, [pc, #164]	; 13b10 <body_with_two_returns@@Base+0x2c0>
   13a68:	movw	r2, #371	; 0x173
   13a6c:	add	r0, pc, r0
   13a70:	add	r1, pc, r1
   13a74:	add	r3, pc, r3
   13a78:	bl	12010 <__assert_fail@plt>
   13a7c:	ldr	r0, [pc, #144]	; 13b14 <body_with_two_returns@@Base+0x2c4>
   13a80:	ldr	r1, [pc, #144]	; 13b18 <body_with_two_returns@@Base+0x2c8>
   13a84:	ldr	r3, [pc, #144]	; 13b1c <body_with_two_returns@@Base+0x2cc>
   13a88:	mov	r2, #372	; 0x174
   13a8c:	add	r0, pc, r0
   13a90:	add	r1, pc, r1
   13a94:	add	r3, pc, r3
   13a98:	bl	12010 <__assert_fail@plt>
   13a9c:	ldr	r0, [pc, #124]	; 13b20 <body_with_two_returns@@Base+0x2d0>
   13aa0:	ldr	r1, [pc, #124]	; 13b24 <body_with_two_returns@@Base+0x2d4>
   13aa4:	ldr	r3, [pc, #124]	; 13b28 <body_with_two_returns@@Base+0x2d8>
   13aa8:	movw	r2, #373	; 0x175
   13aac:	add	r0, pc, r0
   13ab0:	add	r1, pc, r1
   13ab4:	add	r3, pc, r3
   13ab8:	bl	12010 <__assert_fail@plt>
   13abc:	ldr	r0, [pc, #104]	; 13b2c <body_with_two_returns@@Base+0x2dc>
   13ac0:	ldr	r1, [pc, #104]	; 13b30 <body_with_two_returns@@Base+0x2e0>
   13ac4:	ldr	r3, [pc, #104]	; 13b34 <body_with_two_returns@@Base+0x2e4>
   13ac8:	movw	r2, #374	; 0x176
   13acc:	add	r0, pc, r0
   13ad0:	add	r1, pc, r1
   13ad4:	add	r3, pc, r3
   13ad8:	bl	12010 <__assert_fail@plt>
   13adc:	ldr	r0, [pc, #84]	; 13b38 <body_with_two_returns@@Base+0x2e8>
   13ae0:	ldr	r1, [pc, #84]	; 13b3c <body_with_two_returns@@Base+0x2ec>
   13ae4:	ldr	r3, [pc, #84]	; 13b40 <body_with_two_returns@@Base+0x2f0>
   13ae8:	movw	r2, #375	; 0x177
   13aec:	add	r0, pc, r0
   13af0:	add	r1, pc, r1
   13af4:	add	r3, pc, r3
   13af8:	bl	12010 <__assert_fail@plt>
   13afc:	ldrdeq	r9, [r1], -r8
   13b00:	ldrdeq	r9, [r1], -ip
   13b04:	muleq	r1, r0, r7
   13b08:	andeq	r7, r0, r9, lsl r5
   13b0c:	andeq	r7, r0, r6, lsl r2
   13b10:	andeq	r7, r0, fp, lsr #10
   13b14:	andeq	r7, r0, r6, lsr #9
   13b18:	strdeq	r7, [r0], -r6
   13b1c:	andeq	r7, r0, fp, lsl #10
   13b20:	andeq	r7, r0, r0, lsl r5
   13b24:	ldrdeq	r7, [r0], -r6
   13b28:	andeq	r7, r0, fp, ror #9
   13b2c:	andeq	r7, r0, r6, lsl #10
   13b30:			; <UNDEFINED> instruction: 0x000071b6
   13b34:	andeq	r7, r0, fp, asr #9
   13b38:	andeq	r7, r0, r2, lsl #10
   13b3c:	muleq	r0, r6, r1
   13b40:	andeq	r7, r0, fp, lsr #9

00013b44 <body_with_one_return@@Base>:
   13b44:	push	{r4, r5, r6, r7, fp, lr}
   13b48:	add	fp, sp, #16
   13b4c:	sub	sp, sp, #16
   13b50:	ldr	r6, [pc, #524]	; 13d64 <body_with_one_return@@Base+0x220>
   13b54:	ldr	r0, [pc, #524]	; 13d68 <body_with_one_return@@Base+0x224>
   13b58:	mov	r4, sp
   13b5c:	add	r1, sp, #4
   13b60:	ldr	r0, [pc, r0]
   13b64:	add	r6, pc, r6
   13b68:	adds	r0, r0, #1
   13b6c:	str	r0, [r6]
   13b70:	ldr	r0, [r6, #4]
   13b74:	adc	r0, r0, #0
   13b78:	str	r0, [r6, #4]
   13b7c:	mov	r0, r4
   13b80:	bl	16ad0 <init_grammar@@Base>
   13b84:	mov	r0, #20
   13b88:	bl	11ef0 <malloc@plt>
   13b8c:	mov	r5, r0
   13b90:	mov	r0, #4
   13b94:	bl	11ef0 <malloc@plt>
   13b98:	str	r0, [r5]
   13b9c:	bl	15020 <init_token_obra@@Base>
   13ba0:	mov	r0, #4
   13ba4:	bl	11ef0 <malloc@plt>
   13ba8:	str	r0, [r5, #4]
   13bac:	bl	150c0 <init_token_return@@Base>
   13bb0:	mov	r0, #8
   13bb4:	bl	11ef0 <malloc@plt>
   13bb8:	mov	r1, #1
   13bbc:	str	r0, [r5, #8]
   13bc0:	bl	14ee0 <init_token_int_value@@Base>
   13bc4:	mov	r0, #4
   13bc8:	bl	11ef0 <malloc@plt>
   13bcc:	str	r0, [r5, #12]
   13bd0:	bl	15110 <init_token_semicolon@@Base>
   13bd4:	mov	r0, #4
   13bd8:	bl	11ef0 <malloc@plt>
   13bdc:	str	r0, [r5, #16]
   13be0:	bl	15070 <init_token_cbra@@Base>
   13be4:	ldr	r7, [pc, #384]	; 13d6c <body_with_one_return@@Base+0x228>
   13be8:	mov	r0, #5
   13bec:	ldr	r7, [pc, r7]
   13bf0:	str	r0, [r7, #220]	; 0xdc
   13bf4:	mov	r0, r4
   13bf8:	str	r5, [r7, #228]	; 0xe4
   13bfc:	bl	16d80 <read_body@@Base>
   13c00:	ldr	r1, [r7, #204]	; 0xcc
   13c04:	mov	r2, #16
   13c08:	mov	r3, r6
   13c0c:	cmp	r1, #5
   13c10:	movweq	r2, #8
   13c14:	ldr	r2, [r3, r2]!
   13c18:	adds	r2, r2, #1
   13c1c:	str	r2, [r3]
   13c20:	ldr	r2, [r3, #4]
   13c24:	adc	r2, r2, #0
   13c28:	cmp	r1, #5
   13c2c:	str	r2, [r3, #4]
   13c30:	bne	13ce4 <body_with_one_return@@Base+0x1a0>
   13c34:	mov	r1, #32
   13c38:	cmp	r0, #0
   13c3c:	mov	r2, r6
   13c40:	movwne	r1, #24
   13c44:	ldr	r1, [r2, r1]!
   13c48:	adds	r1, r1, #1
   13c4c:	str	r1, [r2]
   13c50:	ldr	r1, [r2, #4]
   13c54:	adc	r1, r1, #0
   13c58:	cmp	r0, #0
   13c5c:	str	r1, [r2, #4]
   13c60:	beq	13d04 <body_with_one_return@@Base+0x1c0>
   13c64:	ldr	r1, [r0]
   13c68:	mov	r2, #48	; 0x30
   13c6c:	mov	r3, r6
   13c70:	cmp	r1, #3
   13c74:	movweq	r2, #40	; 0x28
   13c78:	ldr	r2, [r3, r2]!
   13c7c:	adds	r2, r2, #1
   13c80:	str	r2, [r3]
   13c84:	ldr	r2, [r3, #4]
   13c88:	adc	r2, r2, #0
   13c8c:	cmp	r1, #3
   13c90:	str	r2, [r3, #4]
   13c94:	bne	13d24 <body_with_one_return@@Base+0x1e0>
   13c98:	ldr	r0, [r0, #4]
   13c9c:	mov	r1, #64	; 0x40
   13ca0:	mov	r2, r6
   13ca4:	cmp	r0, #0
   13ca8:	movweq	r1, #56	; 0x38
   13cac:	ldr	r1, [r2, r1]!
   13cb0:	adds	r1, r1, #1
   13cb4:	str	r1, [r2]
   13cb8:	ldr	r1, [r2, #4]
   13cbc:	adc	r1, r1, #0
   13cc0:	cmp	r0, #0
   13cc4:	str	r1, [r2, #4]
   13cc8:	bne	13d44 <body_with_one_return@@Base+0x200>
   13ccc:	ldrd	r0, [r6, #72]	; 0x48
   13cd0:	adds	r0, r0, #1
   13cd4:	adc	r1, r1, #0
   13cd8:	strd	r0, [r6, #72]	; 0x48
   13cdc:	sub	sp, fp, #16
   13ce0:	pop	{r4, r5, r6, r7, fp, pc}
   13ce4:	ldr	r0, [pc, #132]	; 13d70 <body_with_one_return@@Base+0x22c>
   13ce8:	ldr	r1, [pc, #132]	; 13d74 <body_with_one_return@@Base+0x230>
   13cec:	ldr	r3, [pc, #132]	; 13d78 <body_with_one_return@@Base+0x234>
   13cf0:	movw	r2, #406	; 0x196
   13cf4:	add	r0, pc, r0
   13cf8:	add	r1, pc, r1
   13cfc:	add	r3, pc, r3
   13d00:	bl	12010 <__assert_fail@plt>
   13d04:	ldr	r0, [pc, #112]	; 13d7c <body_with_one_return@@Base+0x238>
   13d08:	ldr	r1, [pc, #112]	; 13d80 <body_with_one_return@@Base+0x23c>
   13d0c:	ldr	r3, [pc, #112]	; 13d84 <body_with_one_return@@Base+0x240>
   13d10:	movw	r2, #407	; 0x197
   13d14:	add	r0, pc, r0
   13d18:	add	r1, pc, r1
   13d1c:	add	r3, pc, r3
   13d20:	bl	12010 <__assert_fail@plt>
   13d24:	ldr	r0, [pc, #92]	; 13d88 <body_with_one_return@@Base+0x244>
   13d28:	ldr	r1, [pc, #92]	; 13d8c <body_with_one_return@@Base+0x248>
   13d2c:	ldr	r3, [pc, #92]	; 13d90 <body_with_one_return@@Base+0x24c>
   13d30:	mov	r2, #408	; 0x198
   13d34:	add	r0, pc, r0
   13d38:	add	r1, pc, r1
   13d3c:	add	r3, pc, r3
   13d40:	bl	12010 <__assert_fail@plt>
   13d44:	ldr	r0, [pc, #72]	; 13d94 <body_with_one_return@@Base+0x250>
   13d48:	ldr	r1, [pc, #72]	; 13d98 <body_with_one_return@@Base+0x254>
   13d4c:	ldr	r3, [pc, #72]	; 13d9c <body_with_one_return@@Base+0x258>
   13d50:	movw	r2, #409	; 0x199
   13d54:	add	r0, pc, r0
   13d58:	add	r1, pc, r1
   13d5c:	add	r3, pc, r3
   13d60:	bl	12010 <__assert_fail@plt>
   13d64:	andeq	r9, r1, r4, asr #18
   13d68:	andeq	r9, r1, r8, asr #18
   13d6c:	ldrdeq	r9, [r1], -r8
   13d70:	andeq	r7, r0, r8, asr r0
   13d74:	andeq	r6, r0, lr, lsl #31
   13d78:	andeq	r7, r0, sl, lsl #6
   13d7c:	andeq	r7, r0, lr, lsl r2
   13d80:	andeq	r6, r0, lr, ror #30
   13d84:	andeq	r7, r0, sl, ror #5
   13d88:	andeq	r7, r0, r8, lsl #5
   13d8c:	andeq	r6, r0, lr, asr #30
   13d90:	andeq	r7, r0, sl, asr #5
   13d94:	andeq	r7, r0, lr, asr #5
   13d98:	andeq	r6, r0, lr, lsr #30
   13d9c:	andeq	r7, r0, sl, lsr #5

00013da0 <if_statement_inside_if_statement@@Base>:
   13da0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13da4:	add	fp, sp, #24
   13da8:	sub	sp, sp, #16
   13dac:	ldr	r4, [pc, #740]	; 14098 <if_statement_inside_if_statement@@Base+0x2f8>
   13db0:	ldr	r0, [pc, #740]	; 1409c <if_statement_inside_if_statement@@Base+0x2fc>
   13db4:	mov	r8, sp
   13db8:	add	r1, sp, #4
   13dbc:	ldr	r0, [pc, r0]
   13dc0:	add	r4, pc, r4
   13dc4:	adds	r0, r0, #1
   13dc8:	str	r0, [r4]
   13dcc:	ldr	r0, [r4, #4]
   13dd0:	adc	r0, r0, #0
   13dd4:	str	r0, [r4, #4]
   13dd8:	mov	r0, r8
   13ddc:	bl	16ad0 <init_grammar@@Base>
   13de0:	mov	r0, #3
   13de4:	bl	11ef0 <malloc@plt>
   13de8:	mov	r7, r0
   13dec:	mov	r0, #3
   13df0:	bl	11ef0 <malloc@plt>
   13df4:	mov	r6, r0
   13df8:	movw	r0, #15649	; 0x3d21
   13dfc:	mov	r1, #0
   13e00:	strh	r0, [r7]
   13e04:	strb	r1, [r6, #2]
   13e08:	strh	r0, [r6]
   13e0c:	mov	r0, #76	; 0x4c
   13e10:	strb	r1, [r7, #2]
   13e14:	bl	11ef0 <malloc@plt>
   13e18:	mov	r5, r0
   13e1c:	mov	r0, #4
   13e20:	bl	11ef0 <malloc@plt>
   13e24:	str	r0, [r5]
   13e28:	bl	14f80 <init_token_opar@@Base>
   13e2c:	mov	r0, #8
   13e30:	bl	11ef0 <malloc@plt>
   13e34:	mov	r1, #1
   13e38:	str	r0, [r5, #4]
   13e3c:	bl	14ee0 <init_token_int_value@@Base>
   13e40:	mov	r0, #8
   13e44:	bl	11ef0 <malloc@plt>
   13e48:	mov	r1, #1
   13e4c:	str	r0, [r5, #8]
   13e50:	bl	14ee0 <init_token_int_value@@Base>
   13e54:	mov	r0, #8
   13e58:	bl	11ef0 <malloc@plt>
   13e5c:	mov	r1, r7
   13e60:	str	r0, [r5, #12]
   13e64:	bl	15250 <init_token_boolean_op@@Base>
   13e68:	mov	r0, #8
   13e6c:	bl	11ef0 <malloc@plt>
   13e70:	mov	r1, #1
   13e74:	str	r0, [r5, #16]
   13e78:	bl	14ee0 <init_token_int_value@@Base>
   13e7c:	mov	r0, #4
   13e80:	bl	11ef0 <malloc@plt>
   13e84:	str	r0, [r5, #20]
   13e88:	bl	14fd0 <init_token_cpar@@Base>
   13e8c:	mov	r0, #4
   13e90:	bl	11ef0 <malloc@plt>
   13e94:	str	r0, [r5, #24]
   13e98:	bl	15020 <init_token_obra@@Base>
   13e9c:	mov	r0, #4
   13ea0:	bl	11ef0 <malloc@plt>
   13ea4:	str	r0, [r5, #28]
   13ea8:	bl	151b0 <init_token_if@@Base>
   13eac:	mov	r0, #4
   13eb0:	bl	11ef0 <malloc@plt>
   13eb4:	str	r0, [r5, #32]
   13eb8:	bl	14f80 <init_token_opar@@Base>
   13ebc:	mov	r0, #8
   13ec0:	bl	11ef0 <malloc@plt>
   13ec4:	mov	r1, #1
   13ec8:	str	r0, [r5, #36]	; 0x24
   13ecc:	bl	14ee0 <init_token_int_value@@Base>
   13ed0:	mov	r0, #8
   13ed4:	bl	11ef0 <malloc@plt>
   13ed8:	mov	r1, #1
   13edc:	str	r0, [r5, #40]	; 0x28
   13ee0:	bl	14ee0 <init_token_int_value@@Base>
   13ee4:	mov	r0, #8
   13ee8:	bl	11ef0 <malloc@plt>
   13eec:	mov	r1, r6
   13ef0:	str	r0, [r5, #44]	; 0x2c
   13ef4:	bl	15250 <init_token_boolean_op@@Base>
   13ef8:	mov	r0, #8
   13efc:	bl	11ef0 <malloc@plt>
   13f00:	mov	r1, #1
   13f04:	str	r0, [r5, #48]	; 0x30
   13f08:	bl	14ee0 <init_token_int_value@@Base>
   13f0c:	mov	r0, #4
   13f10:	bl	11ef0 <malloc@plt>
   13f14:	str	r0, [r5, #52]	; 0x34
   13f18:	bl	14fd0 <init_token_cpar@@Base>
   13f1c:	mov	r0, #4
   13f20:	bl	11ef0 <malloc@plt>
   13f24:	str	r0, [r5, #56]	; 0x38
   13f28:	bl	15020 <init_token_obra@@Base>
   13f2c:	mov	r0, #4
   13f30:	bl	11ef0 <malloc@plt>
   13f34:	str	r0, [r5, #60]	; 0x3c
   13f38:	bl	15070 <init_token_cbra@@Base>
   13f3c:	mov	r0, #4
   13f40:	bl	11ef0 <malloc@plt>
   13f44:	str	r0, [r5, #64]	; 0x40
   13f48:	bl	15070 <init_token_cbra@@Base>
   13f4c:	mov	r0, #4
   13f50:	bl	11ef0 <malloc@plt>
   13f54:	str	r0, [r5, #68]	; 0x44
   13f58:	bl	15070 <init_token_cbra@@Base>
   13f5c:	mov	r0, #4
   13f60:	bl	11ef0 <malloc@plt>
   13f64:	str	r0, [r5, #72]	; 0x48
   13f68:	bl	15160 <init_token_eof@@Base>
   13f6c:	ldr	r6, [pc, #300]	; 140a0 <if_statement_inside_if_statement@@Base+0x300>
   13f70:	mov	r0, #19
   13f74:	ldr	r6, [pc, r6]
   13f78:	str	r0, [r6, #220]	; 0xdc
   13f7c:	mov	r0, r8
   13f80:	str	r5, [r6, #228]	; 0xe4
   13f84:	bl	17174 <read_if_statement@@Base>
   13f88:	ldr	r1, [r6, #204]	; 0xcc
   13f8c:	mov	r2, #16
   13f90:	mov	r3, r4
   13f94:	cmp	r1, #19
   13f98:	movweq	r2, #8
   13f9c:	ldr	r2, [r3, r2]!
   13fa0:	adds	r2, r2, #1
   13fa4:	str	r2, [r3]
   13fa8:	ldr	r2, [r3, #4]
   13fac:	adc	r2, r2, #0
   13fb0:	cmp	r1, #19
   13fb4:	str	r2, [r3, #4]
   13fb8:	bne	14038 <if_statement_inside_if_statement@@Base+0x298>
   13fbc:	mov	r1, #32
   13fc0:	cmp	r0, #0
   13fc4:	mov	r2, r4
   13fc8:	movwne	r1, #24
   13fcc:	ldr	r1, [r2, r1]!
   13fd0:	adds	r1, r1, #1
   13fd4:	str	r1, [r2]
   13fd8:	ldr	r1, [r2, #4]
   13fdc:	adc	r1, r1, #0
   13fe0:	cmp	r0, #0
   13fe4:	str	r1, [r2, #4]
   13fe8:	beq	14058 <if_statement_inside_if_statement@@Base+0x2b8>
   13fec:	ldr	r0, [r0]
   13ff0:	mov	r1, #48	; 0x30
   13ff4:	mov	r2, r4
   13ff8:	cmp	r0, #4
   13ffc:	movweq	r1, #40	; 0x28
   14000:	ldr	r1, [r2, r1]!
   14004:	adds	r1, r1, #1
   14008:	str	r1, [r2]
   1400c:	ldr	r1, [r2, #4]
   14010:	adc	r1, r1, #0
   14014:	cmp	r0, #4
   14018:	str	r1, [r2, #4]
   1401c:	bne	14078 <if_statement_inside_if_statement@@Base+0x2d8>
   14020:	ldrd	r0, [r4, #56]	; 0x38
   14024:	adds	r0, r0, #1
   14028:	adc	r1, r1, #0
   1402c:	strd	r0, [r4, #56]	; 0x38
   14030:	sub	sp, fp, #24
   14034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14038:	ldr	r0, [pc, #100]	; 140a4 <if_statement_inside_if_statement@@Base+0x304>
   1403c:	ldr	r1, [pc, #100]	; 140a8 <if_statement_inside_if_statement@@Base+0x308>
   14040:	ldr	r3, [pc, #100]	; 140ac <if_statement_inside_if_statement@@Base+0x30c>
   14044:	mov	r2, #480	; 0x1e0
   14048:	add	r0, pc, r0
   1404c:	add	r1, pc, r1
   14050:	add	r3, pc, r3
   14054:	bl	12010 <__assert_fail@plt>
   14058:	ldr	r0, [pc, #80]	; 140b0 <if_statement_inside_if_statement@@Base+0x310>
   1405c:	ldr	r1, [pc, #80]	; 140b4 <if_statement_inside_if_statement@@Base+0x314>
   14060:	ldr	r3, [pc, #80]	; 140b8 <if_statement_inside_if_statement@@Base+0x318>
   14064:	movw	r2, #481	; 0x1e1
   14068:	add	r0, pc, r0
   1406c:	add	r1, pc, r1
   14070:	add	r3, pc, r3
   14074:	bl	12010 <__assert_fail@plt>
   14078:	ldr	r0, [pc, #60]	; 140bc <if_statement_inside_if_statement@@Base+0x31c>
   1407c:	ldr	r1, [pc, #60]	; 140c0 <if_statement_inside_if_statement@@Base+0x320>
   14080:	ldr	r3, [pc, #60]	; 140c4 <if_statement_inside_if_statement@@Base+0x324>
   14084:	movw	r2, #482	; 0x1e2
   14088:	add	r0, pc, r0
   1408c:	add	r1, pc, r1
   14090:	add	r3, pc, r3
   14094:	bl	12010 <__assert_fail@plt>
   14098:	andeq	r9, r1, r8, lsr r7
   1409c:	andeq	r9, r1, ip, lsr r7
   140a0:	andeq	r9, r1, r0, asr r1
   140a4:	andeq	r6, r0, ip, ror #31
   140a8:	andeq	r6, r0, sl, lsr ip
   140ac:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   140b0:	andeq	r6, r0, sl, asr #29
   140b4:	andeq	r6, r0, sl, lsl ip
   140b8:	ldrdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   140bc:			; <UNDEFINED> instruction: 0x00006eb6
   140c0:	strdeq	r6, [r0], -sl
   140c4:			; <UNDEFINED> instruction: 0x00006fbf

000140c8 <if_statement_inside_else_statement@@Base>:
   140c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140cc:	add	fp, sp, #24
   140d0:	sub	sp, sp, #16
   140d4:	ldr	r4, [pc, #772]	; 143e0 <if_statement_inside_else_statement@@Base+0x318>
   140d8:	ldr	r0, [pc, #772]	; 143e4 <if_statement_inside_else_statement@@Base+0x31c>
   140dc:	mov	r8, sp
   140e0:	add	r1, sp, #4
   140e4:	ldr	r0, [pc, r0]
   140e8:	add	r4, pc, r4
   140ec:	adds	r0, r0, #1
   140f0:	str	r0, [r4]
   140f4:	ldr	r0, [r4, #4]
   140f8:	adc	r0, r0, #0
   140fc:	str	r0, [r4, #4]
   14100:	mov	r0, r8
   14104:	bl	16ad0 <init_grammar@@Base>
   14108:	mov	r0, #3
   1410c:	bl	11ef0 <malloc@plt>
   14110:	mov	r7, r0
   14114:	mov	r0, #3
   14118:	bl	11ef0 <malloc@plt>
   1411c:	mov	r6, r0
   14120:	movw	r0, #15649	; 0x3d21
   14124:	mov	r1, #0
   14128:	strh	r0, [r7]
   1412c:	strb	r1, [r6, #2]
   14130:	strh	r0, [r6]
   14134:	mov	r0, #84	; 0x54
   14138:	strb	r1, [r7, #2]
   1413c:	bl	11ef0 <malloc@plt>
   14140:	mov	r5, r0
   14144:	mov	r0, #4
   14148:	bl	11ef0 <malloc@plt>
   1414c:	str	r0, [r5]
   14150:	bl	14f80 <init_token_opar@@Base>
   14154:	mov	r0, #8
   14158:	bl	11ef0 <malloc@plt>
   1415c:	mov	r1, #1
   14160:	str	r0, [r5, #4]
   14164:	bl	14ee0 <init_token_int_value@@Base>
   14168:	mov	r0, #8
   1416c:	bl	11ef0 <malloc@plt>
   14170:	mov	r1, #1
   14174:	str	r0, [r5, #8]
   14178:	bl	14ee0 <init_token_int_value@@Base>
   1417c:	mov	r0, #8
   14180:	bl	11ef0 <malloc@plt>
   14184:	mov	r1, r7
   14188:	str	r0, [r5, #12]
   1418c:	bl	15250 <init_token_boolean_op@@Base>
   14190:	mov	r0, #8
   14194:	bl	11ef0 <malloc@plt>
   14198:	mov	r1, #1
   1419c:	str	r0, [r5, #16]
   141a0:	bl	14ee0 <init_token_int_value@@Base>
   141a4:	mov	r0, #4
   141a8:	bl	11ef0 <malloc@plt>
   141ac:	str	r0, [r5, #20]
   141b0:	bl	14fd0 <init_token_cpar@@Base>
   141b4:	mov	r0, #4
   141b8:	bl	11ef0 <malloc@plt>
   141bc:	str	r0, [r5, #24]
   141c0:	bl	15020 <init_token_obra@@Base>
   141c4:	mov	r0, #4
   141c8:	bl	11ef0 <malloc@plt>
   141cc:	str	r0, [r5, #28]
   141d0:	bl	15070 <init_token_cbra@@Base>
   141d4:	mov	r0, #4
   141d8:	bl	11ef0 <malloc@plt>
   141dc:	str	r0, [r5, #32]
   141e0:	bl	15200 <init_token_else@@Base>
   141e4:	mov	r0, #4
   141e8:	bl	11ef0 <malloc@plt>
   141ec:	str	r0, [r5, #36]	; 0x24
   141f0:	bl	15020 <init_token_obra@@Base>
   141f4:	mov	r0, #4
   141f8:	bl	11ef0 <malloc@plt>
   141fc:	str	r0, [r5, #40]	; 0x28
   14200:	bl	151b0 <init_token_if@@Base>
   14204:	mov	r0, #4
   14208:	bl	11ef0 <malloc@plt>
   1420c:	str	r0, [r5, #44]	; 0x2c
   14210:	bl	14f80 <init_token_opar@@Base>
   14214:	mov	r0, #8
   14218:	bl	11ef0 <malloc@plt>
   1421c:	mov	r1, #1
   14220:	str	r0, [r5, #48]	; 0x30
   14224:	bl	14ee0 <init_token_int_value@@Base>
   14228:	mov	r0, #8
   1422c:	bl	11ef0 <malloc@plt>
   14230:	mov	r1, #1
   14234:	str	r0, [r5, #52]	; 0x34
   14238:	bl	14ee0 <init_token_int_value@@Base>
   1423c:	mov	r0, #8
   14240:	bl	11ef0 <malloc@plt>
   14244:	mov	r1, r6
   14248:	str	r0, [r5, #56]	; 0x38
   1424c:	bl	15250 <init_token_boolean_op@@Base>
   14250:	mov	r0, #8
   14254:	bl	11ef0 <malloc@plt>
   14258:	mov	r1, #1
   1425c:	str	r0, [r5, #60]	; 0x3c
   14260:	bl	14ee0 <init_token_int_value@@Base>
   14264:	mov	r0, #4
   14268:	bl	11ef0 <malloc@plt>
   1426c:	str	r0, [r5, #64]	; 0x40
   14270:	bl	14fd0 <init_token_cpar@@Base>
   14274:	mov	r0, #4
   14278:	bl	11ef0 <malloc@plt>
   1427c:	str	r0, [r5, #68]	; 0x44
   14280:	bl	15020 <init_token_obra@@Base>
   14284:	mov	r0, #4
   14288:	bl	11ef0 <malloc@plt>
   1428c:	str	r0, [r5, #72]	; 0x48
   14290:	bl	15070 <init_token_cbra@@Base>
   14294:	mov	r0, #4
   14298:	bl	11ef0 <malloc@plt>
   1429c:	str	r0, [r5, #76]	; 0x4c
   142a0:	bl	15070 <init_token_cbra@@Base>
   142a4:	mov	r0, #4
   142a8:	bl	11ef0 <malloc@plt>
   142ac:	str	r0, [r5, #80]	; 0x50
   142b0:	bl	15070 <init_token_cbra@@Base>
   142b4:	ldr	r6, [pc, #300]	; 143e8 <if_statement_inside_else_statement@@Base+0x320>
   142b8:	mov	r0, #21
   142bc:	ldr	r6, [pc, r6]
   142c0:	str	r0, [r6, #220]	; 0xdc
   142c4:	mov	r0, r8
   142c8:	str	r5, [r6, #228]	; 0xe4
   142cc:	bl	17174 <read_if_statement@@Base>
   142d0:	ldr	r1, [r6, #204]	; 0xcc
   142d4:	mov	r2, #16
   142d8:	mov	r3, r4
   142dc:	cmp	r1, #21
   142e0:	movweq	r2, #8
   142e4:	ldr	r2, [r3, r2]!
   142e8:	adds	r2, r2, #1
   142ec:	str	r2, [r3]
   142f0:	ldr	r2, [r3, #4]
   142f4:	adc	r2, r2, #0
   142f8:	cmp	r1, #21
   142fc:	str	r2, [r3, #4]
   14300:	bne	14380 <if_statement_inside_else_statement@@Base+0x2b8>
   14304:	mov	r1, #32
   14308:	cmp	r0, #0
   1430c:	mov	r2, r4
   14310:	movwne	r1, #24
   14314:	ldr	r1, [r2, r1]!
   14318:	adds	r1, r1, #1
   1431c:	str	r1, [r2]
   14320:	ldr	r1, [r2, #4]
   14324:	adc	r1, r1, #0
   14328:	cmp	r0, #0
   1432c:	str	r1, [r2, #4]
   14330:	beq	143a0 <if_statement_inside_else_statement@@Base+0x2d8>
   14334:	ldr	r0, [r0]
   14338:	mov	r1, #48	; 0x30
   1433c:	mov	r2, r4
   14340:	cmp	r0, #4
   14344:	movweq	r1, #40	; 0x28
   14348:	ldr	r1, [r2, r1]!
   1434c:	adds	r1, r1, #1
   14350:	str	r1, [r2]
   14354:	ldr	r1, [r2, #4]
   14358:	adc	r1, r1, #0
   1435c:	cmp	r0, #4
   14360:	str	r1, [r2, #4]
   14364:	bne	143c0 <if_statement_inside_else_statement@@Base+0x2f8>
   14368:	ldrd	r0, [r4, #56]	; 0x38
   1436c:	adds	r0, r0, #1
   14370:	adc	r1, r1, #0
   14374:	strd	r0, [r4, #56]	; 0x38
   14378:	sub	sp, fp, #24
   1437c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14380:	ldr	r0, [pc, #100]	; 143ec <if_statement_inside_else_statement@@Base+0x324>
   14384:	ldr	r1, [pc, #100]	; 143f0 <if_statement_inside_else_statement@@Base+0x328>
   14388:	ldr	r3, [pc, #100]	; 143f4 <if_statement_inside_else_statement@@Base+0x32c>
   1438c:	movw	r2, #558	; 0x22e
   14390:	add	r0, pc, r0
   14394:	add	r1, pc, r1
   14398:	add	r3, pc, r3
   1439c:	bl	12010 <__assert_fail@plt>
   143a0:	ldr	r0, [pc, #80]	; 143f8 <if_statement_inside_else_statement@@Base+0x330>
   143a4:	ldr	r1, [pc, #80]	; 143fc <if_statement_inside_else_statement@@Base+0x334>
   143a8:	ldr	r3, [pc, #80]	; 14400 <if_statement_inside_else_statement@@Base+0x338>
   143ac:	movw	r2, #559	; 0x22f
   143b0:	add	r0, pc, r0
   143b4:	add	r1, pc, r1
   143b8:	add	r3, pc, r3
   143bc:	bl	12010 <__assert_fail@plt>
   143c0:	ldr	r0, [pc, #60]	; 14404 <if_statement_inside_else_statement@@Base+0x33c>
   143c4:	ldr	r1, [pc, #60]	; 14408 <if_statement_inside_else_statement@@Base+0x340>
   143c8:	ldr	r3, [pc, #60]	; 1440c <if_statement_inside_else_statement@@Base+0x344>
   143cc:	mov	r2, #560	; 0x230
   143d0:	add	r0, pc, r0
   143d4:	add	r1, pc, r1
   143d8:	add	r3, pc, r3
   143dc:	bl	12010 <__assert_fail@plt>
   143e0:	andeq	r9, r1, r0, asr r4
   143e4:	andeq	r9, r1, r4, asr r4
   143e8:	andeq	r8, r1, r8, lsl #28
   143ec:	andeq	r6, r0, r7, ror #25
   143f0:	strdeq	r6, [r0], -r2
   143f4:	strdeq	r6, [r0], -sl
   143f8:	andeq	r6, r0, r2, lsl #23
   143fc:	ldrdeq	r6, [r0], -r2
   14400:	ldrdeq	r6, [r0], -sl
   14404:	andeq	r6, r0, lr, ror #22
   14408:			; <UNDEFINED> instruction: 0x000068b2
   1440c:			; <UNDEFINED> instruction: 0x00006cba

00014410 <main@@Base>:
   14410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14414:	add	fp, sp, #28
   14418:	sub	sp, sp, #4
   1441c:	vpush	{d8-d9}
   14420:	ldr	r0, [pc, #1648]	; 14a98 <main@@Base+0x688>
   14424:	add	r1, pc, #1012	; 0x3f4
   14428:	vld1.64	{d8-d9}, [r1 :128]
   1442c:	mov	r1, #0
   14430:	add	r0, pc, r0
   14434:	vld1.64	{d16-d17}, [r0 :128]
   14438:	vadd.i64	q8, q8, q4
   1443c:	vst1.64	{d16-d17}, [r0 :128]
   14440:	ldr	r4, [pc, #1620]	; 14a9c <main@@Base+0x68c>
   14444:	ldr	r4, [pc, r4]
   14448:	ldr	r0, [r4]
   1444c:	bl	11e3c <setbuf@plt>
   14450:	ldr	r3, [r4]
   14454:	ldr	r0, [pc, #1604]	; 14aa0 <main@@Base+0x690>
   14458:	mov	r1, #14
   1445c:	mov	r2, #1
   14460:	add	r0, pc, r0
   14464:	bl	11ec0 <fwrite@plt>
   14468:	ldr	r3, [r4]
   1446c:	ldr	r0, [pc, #1584]	; 14aa4 <main@@Base+0x694>
   14470:	mov	r1, #14
   14474:	mov	r2, #1
   14478:	add	r0, pc, r0
   1447c:	bl	11ec0 <fwrite@plt>
   14480:	ldr	r3, [r4]
   14484:	ldr	r0, [pc, #1564]	; 14aa8 <main@@Base+0x698>
   14488:	mov	r1, #15
   1448c:	mov	r2, #1
   14490:	add	r0, pc, r0
   14494:	bl	11ec0 <fwrite@plt>
   14498:	mov	r0, #0
   1449c:	bl	11e60 <fflush@plt>
   144a0:	ldr	r0, [pc, #1540]	; 14aac <main@@Base+0x69c>
   144a4:	ldr	r1, [pc, #1540]	; 14ab0 <main@@Base+0x6a0>
   144a8:	ldr	r2, [pc, #1540]	; 14ab4 <main@@Base+0x6a4>
   144ac:	add	r0, pc, r0
   144b0:	add	r1, pc, r1
   144b4:	add	r2, pc, r2
   144b8:	bl	11e54 <printf@plt>
   144bc:	ldr	r7, [pc, #1524]	; 14ab8 <main@@Base+0x6a8>
   144c0:	ldr	r9, [pc, #1524]	; 14abc <main@@Base+0x6ac>
   144c4:	mov	r1, #0
   144c8:	mov	r2, #236	; 0xec
   144cc:	add	r7, pc, r7
   144d0:	add	r9, pc, r9
   144d4:	vld1.64	{d16-d17}, [r9 :128]
   144d8:	vld1.64	{d18-d19}, [r7 :128]
   144dc:	vadd.i64	q8, q8, q4
   144e0:	vadd.i64	q9, q9, q4
   144e4:	vst1.64	{d16-d17}, [r9 :128]
   144e8:	vst1.64	{d18-d19}, [r7 :128]
   144ec:	ldr	r5, [pc, #1484]	; 14ac0 <main@@Base+0x6b0>
   144f0:	ldr	r5, [pc, r5]
   144f4:	mov	r0, r5
   144f8:	bl	11f80 <memset@plt>
   144fc:	ldr	sl, [pc, #1472]	; 14ac4 <main@@Base+0x6b4>
   14500:	mov	r8, #50	; 0x32
   14504:	mov	r1, #0
   14508:	mov	r2, #424	; 0x1a8
   1450c:	str	r8, [r5, #208]	; 0xd0
   14510:	add	sl, pc, sl
   14514:	vld1.64	{d16-d17}, [sl :128]
   14518:	vadd.i64	q8, q8, q4
   1451c:	vst1.64	{d16-d17}, [sl :128]
   14520:	ldr	r4, [pc, #1440]	; 14ac8 <main@@Base+0x6b8>
   14524:	ldr	r4, [pc, r4]
   14528:	mov	r0, r4
   1452c:	bl	11f80 <memset@plt>
   14530:	str	r8, [r4, #412]	; 0x19c
   14534:	bl	126b4 <no_int_as_first_stuff@@Base>
   14538:	ldr	r6, [pc, #1420]	; 14acc <main@@Base+0x6bc>
   1453c:	add	r6, pc, r6
   14540:	mov	r0, r6
   14544:	bl	11ee4 <puts@plt>
   14548:	ldr	r2, [pc, #1408]	; 14ad0 <main@@Base+0x6c0>
   1454c:	ldr	r0, [pc, #1408]	; 14ad4 <main@@Base+0x6c4>
   14550:	ldr	r1, [pc, #1408]	; 14ad8 <main@@Base+0x6c8>
   14554:	add	r2, pc, r2
   14558:	add	r0, pc, r0
   1455c:	add	r1, pc, r1
   14560:	bl	11e54 <printf@plt>
   14564:	vld1.64	{d16-d17}, [r9 :128]
   14568:	vld1.64	{d18-d19}, [r7 :128]
   1456c:	mov	r0, r5
   14570:	mov	r1, #0
   14574:	mov	r2, #236	; 0xec
   14578:	vadd.i64	q8, q8, q4
   1457c:	vadd.i64	q9, q9, q4
   14580:	vst1.64	{d16-d17}, [r9 :128]
   14584:	vst1.64	{d18-d19}, [r7 :128]
   14588:	bl	11f80 <memset@plt>
   1458c:	vld1.64	{d16-d17}, [sl :128]
   14590:	mov	r0, r4
   14594:	mov	r1, #0
   14598:	mov	r2, #424	; 0x1a8
   1459c:	str	r8, [r5, #208]	; 0xd0
   145a0:	vadd.i64	q8, q8, q4
   145a4:	vst1.64	{d16-d17}, [sl :128]
   145a8:	bl	11f80 <memset@plt>
   145ac:	str	r8, [r4, #412]	; 0x19c
   145b0:	bl	127f8 <int_but_not_followed_by_function@@Base>
   145b4:	mov	r0, r6
   145b8:	bl	11ee4 <puts@plt>
   145bc:	ldr	r2, [pc, #1304]	; 14adc <main@@Base+0x6cc>
   145c0:	ldr	r0, [pc, #1304]	; 14ae0 <main@@Base+0x6d0>
   145c4:	ldr	r1, [pc, #1304]	; 14ae4 <main@@Base+0x6d4>
   145c8:	add	r2, pc, r2
   145cc:	add	r0, pc, r0
   145d0:	add	r1, pc, r1
   145d4:	bl	11e54 <printf@plt>
   145d8:	vld1.64	{d16-d17}, [r9 :128]
   145dc:	vld1.64	{d18-d19}, [r7 :128]
   145e0:	mov	r0, r5
   145e4:	mov	r1, #0
   145e8:	mov	r2, #236	; 0xec
   145ec:	vadd.i64	q8, q8, q4
   145f0:	vadd.i64	q9, q9, q4
   145f4:	vst1.64	{d16-d17}, [r9 :128]
   145f8:	vst1.64	{d18-d19}, [r7 :128]
   145fc:	bl	11f80 <memset@plt>
   14600:	vld1.64	{d16-d17}, [sl :128]
   14604:	mov	r0, r4
   14608:	mov	r1, #0
   1460c:	mov	r2, #424	; 0x1a8
   14610:	str	r8, [r5, #208]	; 0xd0
   14614:	vadd.i64	q8, q8, q4
   14618:	vst1.64	{d16-d17}, [sl :128]
   1461c:	bl	11f80 <memset@plt>
   14620:	str	r8, [r4, #412]	; 0x19c
   14624:	bl	130bc <boolean_unary_operator_is_read_properly@@Base>
   14628:	mov	r0, r6
   1462c:	bl	11ee4 <puts@plt>
   14630:	ldr	r2, [pc, #1200]	; 14ae8 <main@@Base+0x6d8>
   14634:	ldr	r0, [pc, #1200]	; 14aec <main@@Base+0x6dc>
   14638:	ldr	r1, [pc, #1200]	; 14af0 <main@@Base+0x6e0>
   1463c:	add	r2, pc, r2
   14640:	add	r0, pc, r0
   14644:	add	r1, pc, r1
   14648:	bl	11e54 <printf@plt>
   1464c:	vld1.64	{d16-d17}, [r9 :128]
   14650:	vld1.64	{d18-d19}, [r7 :128]
   14654:	mov	r0, r5
   14658:	mov	r1, #0
   1465c:	mov	r2, #236	; 0xec
   14660:	vadd.i64	q8, q8, q4
   14664:	vadd.i64	q9, q9, q4
   14668:	vst1.64	{d16-d17}, [r9 :128]
   1466c:	vst1.64	{d18-d19}, [r7 :128]
   14670:	bl	11f80 <memset@plt>
   14674:	vld1.64	{d16-d17}, [sl :128]
   14678:	mov	r0, r4
   1467c:	mov	r1, #0
   14680:	mov	r2, #424	; 0x1a8
   14684:	str	r8, [r5, #208]	; 0xd0
   14688:	vadd.i64	q8, q8, q4
   1468c:	vst1.64	{d16-d17}, [sl :128]
   14690:	bl	11f80 <memset@plt>
   14694:	str	r8, [r4, #412]	; 0x19c
   14698:	bl	12df0 <boolean_binary_operator_is_read_properly@@Base>
   1469c:	mov	r0, r6
   146a0:	bl	11ee4 <puts@plt>
   146a4:	ldr	r2, [pc, #1096]	; 14af4 <main@@Base+0x6e4>
   146a8:	ldr	r0, [pc, #1096]	; 14af8 <main@@Base+0x6e8>
   146ac:	ldr	r1, [pc, #1096]	; 14afc <main@@Base+0x6ec>
   146b0:	add	r2, pc, r2
   146b4:	add	r0, pc, r0
   146b8:	add	r1, pc, r1
   146bc:	bl	11e54 <printf@plt>
   146c0:	vld1.64	{d16-d17}, [r9 :128]
   146c4:	vld1.64	{d18-d19}, [r7 :128]
   146c8:	mov	r0, r5
   146cc:	mov	r1, #0
   146d0:	mov	r2, #236	; 0xec
   146d4:	vadd.i64	q8, q8, q4
   146d8:	vadd.i64	q9, q9, q4
   146dc:	vst1.64	{d16-d17}, [r9 :128]
   146e0:	vst1.64	{d18-d19}, [r7 :128]
   146e4:	bl	11f80 <memset@plt>
   146e8:	vld1.64	{d16-d17}, [sl :128]
   146ec:	mov	r0, r4
   146f0:	mov	r1, #0
   146f4:	mov	r2, #424	; 0x1a8
   146f8:	str	r8, [r5, #208]	; 0xd0
   146fc:	vadd.i64	q8, q8, q4
   14700:	vst1.64	{d16-d17}, [sl :128]
   14704:	bl	11f80 <memset@plt>
   14708:	str	r8, [r4, #412]	; 0x19c
   1470c:	bl	12960 <boolean_expression_is_read_properly@@Base>
   14710:	mov	r0, r6
   14714:	bl	11ee4 <puts@plt>
   14718:	ldr	r2, [pc, #992]	; 14b00 <main@@Base+0x6f0>
   1471c:	ldr	r0, [pc, #992]	; 14b04 <main@@Base+0x6f4>
   14720:	ldr	r1, [pc, #992]	; 14b08 <main@@Base+0x6f8>
   14724:	add	r2, pc, r2
   14728:	add	r0, pc, r0
   1472c:	add	r1, pc, r1
   14730:	bl	11e54 <printf@plt>
   14734:	vld1.64	{d16-d17}, [r9 :128]
   14738:	vld1.64	{d18-d19}, [r7 :128]
   1473c:	mov	r0, r5
   14740:	mov	r1, #0
   14744:	mov	r2, #236	; 0xec
   14748:	vadd.i64	q8, q8, q4
   1474c:	vadd.i64	q9, q9, q4
   14750:	vst1.64	{d16-d17}, [r9 :128]
   14754:	vst1.64	{d18-d19}, [r7 :128]
   14758:	bl	11f80 <memset@plt>
   1475c:	vld1.64	{d16-d17}, [sl :128]
   14760:	mov	r0, r4
   14764:	mov	r1, #0
   14768:	mov	r2, #424	; 0x1a8
   1476c:	str	r8, [r5, #208]	; 0xd0
   14770:	vadd.i64	q8, q8, q4
   14774:	vst1.64	{d16-d17}, [sl :128]
   14778:	bl	11f80 <memset@plt>
   1477c:	str	r8, [r4, #412]	; 0x19c
   14780:	bl	12b94 <boolean_expression_complex@@Base>
   14784:	mov	r0, r6
   14788:	bl	11ee4 <puts@plt>
   1478c:	ldr	r2, [pc, #888]	; 14b0c <main@@Base+0x6fc>
   14790:	ldr	r0, [pc, #888]	; 14b10 <main@@Base+0x700>
   14794:	ldr	r1, [pc, #888]	; 14b14 <main@@Base+0x704>
   14798:	add	r2, pc, r2
   1479c:	add	r0, pc, r0
   147a0:	add	r1, pc, r1
   147a4:	bl	11e54 <printf@plt>
   147a8:	vld1.64	{d16-d17}, [r9 :128]
   147ac:	vld1.64	{d18-d19}, [r7 :128]
   147b0:	mov	r0, r5
   147b4:	mov	r1, #0
   147b8:	mov	r2, #236	; 0xec
   147bc:	vadd.i64	q8, q8, q4
   147c0:	vadd.i64	q9, q9, q4
   147c4:	vst1.64	{d16-d17}, [r9 :128]
   147c8:	vst1.64	{d18-d19}, [r7 :128]
   147cc:	bl	11f80 <memset@plt>
   147d0:	vld1.64	{d16-d17}, [sl :128]
   147d4:	mov	r0, r4
   147d8:	mov	r1, #0
   147dc:	mov	r2, #424	; 0x1a8
   147e0:	str	r8, [r5, #208]	; 0xd0
   147e4:	vadd.i64	q8, q8, q4
   147e8:	vst1.64	{d16-d17}, [sl :128]
   147ec:	bl	11f80 <memset@plt>
   147f0:	str	r8, [r4, #412]	; 0x19c
   147f4:	bl	13368 <if_statement_only@@Base>
   147f8:	mov	r0, r6
   147fc:	bl	11ee4 <puts@plt>
   14800:	ldr	r2, [pc, #784]	; 14b18 <main@@Base+0x708>
   14804:	ldr	r0, [pc, #784]	; 14b1c <main@@Base+0x70c>
   14808:	ldr	r1, [pc, #784]	; 14b20 <main@@Base+0x710>
   1480c:	add	r2, pc, r2
   14810:	b	14830 <main@@Base+0x420>
   14814:	nop	{0}
   14818:	nop	{0}
   1481c:	nop	{0}
   14820:	andeq	r0, r0, r1
   14824:	andeq	r0, r0, r0
   14828:	andeq	r0, r0, r1
   1482c:	andeq	r0, r0, r0
   14830:	add	r0, pc, r0
   14834:	add	r1, pc, r1
   14838:	bl	11e54 <printf@plt>
   1483c:	vld1.64	{d16-d17}, [r9 :128]
   14840:	vld1.64	{d18-d19}, [r7 :128]
   14844:	mov	r0, r5
   14848:	mov	r1, #0
   1484c:	mov	r2, #236	; 0xec
   14850:	vadd.i64	q8, q8, q4
   14854:	vadd.i64	q9, q9, q4
   14858:	vst1.64	{d16-d17}, [r9 :128]
   1485c:	vst1.64	{d18-d19}, [r7 :128]
   14860:	bl	11f80 <memset@plt>
   14864:	vld1.64	{d16-d17}, [sl :128]
   14868:	mov	r0, r4
   1486c:	mov	r1, #0
   14870:	mov	r2, #424	; 0x1a8
   14874:	str	r8, [r5, #208]	; 0xd0
   14878:	vadd.i64	q8, q8, q4
   1487c:	vst1.64	{d16-d17}, [sl :128]
   14880:	bl	11f80 <memset@plt>
   14884:	str	r8, [r4, #412]	; 0x19c
   14888:	bl	135cc <if_else_statements@@Base>
   1488c:	mov	r0, r6
   14890:	bl	11ee4 <puts@plt>
   14894:	ldr	r2, [pc, #648]	; 14b24 <main@@Base+0x714>
   14898:	ldr	r0, [pc, #648]	; 14b28 <main@@Base+0x718>
   1489c:	ldr	r1, [pc, #648]	; 14b2c <main@@Base+0x71c>
   148a0:	add	r2, pc, r2
   148a4:	add	r0, pc, r0
   148a8:	add	r1, pc, r1
   148ac:	bl	11e54 <printf@plt>
   148b0:	vld1.64	{d16-d17}, [r9 :128]
   148b4:	vld1.64	{d18-d19}, [r7 :128]
   148b8:	mov	r0, r5
   148bc:	mov	r1, #0
   148c0:	mov	r2, #236	; 0xec
   148c4:	vadd.i64	q8, q8, q4
   148c8:	vadd.i64	q9, q9, q4
   148cc:	vst1.64	{d16-d17}, [r9 :128]
   148d0:	vst1.64	{d18-d19}, [r7 :128]
   148d4:	bl	11f80 <memset@plt>
   148d8:	vld1.64	{d16-d17}, [sl :128]
   148dc:	mov	r0, r4
   148e0:	mov	r1, #0
   148e4:	mov	r2, #424	; 0x1a8
   148e8:	str	r8, [r5, #208]	; 0xd0
   148ec:	vadd.i64	q8, q8, q4
   148f0:	vst1.64	{d16-d17}, [sl :128]
   148f4:	bl	11f80 <memset@plt>
   148f8:	str	r8, [r4, #412]	; 0x19c
   148fc:	bl	13da0 <if_statement_inside_if_statement@@Base>
   14900:	mov	r0, r6
   14904:	bl	11ee4 <puts@plt>
   14908:	ldr	r2, [pc, #544]	; 14b30 <main@@Base+0x720>
   1490c:	ldr	r0, [pc, #544]	; 14b34 <main@@Base+0x724>
   14910:	ldr	r1, [pc, #544]	; 14b38 <main@@Base+0x728>
   14914:	add	r2, pc, r2
   14918:	add	r0, pc, r0
   1491c:	add	r1, pc, r1
   14920:	bl	11e54 <printf@plt>
   14924:	vld1.64	{d16-d17}, [r9 :128]
   14928:	vld1.64	{d18-d19}, [r7 :128]
   1492c:	mov	r0, r5
   14930:	mov	r1, #0
   14934:	mov	r2, #236	; 0xec
   14938:	vadd.i64	q8, q8, q4
   1493c:	vadd.i64	q9, q9, q4
   14940:	vst1.64	{d16-d17}, [r9 :128]
   14944:	vst1.64	{d18-d19}, [r7 :128]
   14948:	bl	11f80 <memset@plt>
   1494c:	vld1.64	{d16-d17}, [sl :128]
   14950:	mov	r0, r4
   14954:	mov	r1, #0
   14958:	mov	r2, #424	; 0x1a8
   1495c:	str	r8, [r5, #208]	; 0xd0
   14960:	vadd.i64	q8, q8, q4
   14964:	vst1.64	{d16-d17}, [sl :128]
   14968:	bl	11f80 <memset@plt>
   1496c:	str	r8, [r4, #412]	; 0x19c
   14970:	bl	140c8 <if_statement_inside_else_statement@@Base>
   14974:	mov	r0, r6
   14978:	bl	11ee4 <puts@plt>
   1497c:	ldr	r2, [pc, #440]	; 14b3c <main@@Base+0x72c>
   14980:	ldr	r0, [pc, #440]	; 14b40 <main@@Base+0x730>
   14984:	ldr	r1, [pc, #440]	; 14b44 <main@@Base+0x734>
   14988:	add	r2, pc, r2
   1498c:	add	r0, pc, r0
   14990:	add	r1, pc, r1
   14994:	bl	11e54 <printf@plt>
   14998:	vld1.64	{d16-d17}, [r9 :128]
   1499c:	vld1.64	{d18-d19}, [r7 :128]
   149a0:	mov	r0, r5
   149a4:	mov	r1, #0
   149a8:	mov	r2, #236	; 0xec
   149ac:	vadd.i64	q8, q8, q4
   149b0:	vadd.i64	q9, q9, q4
   149b4:	vst1.64	{d16-d17}, [r9 :128]
   149b8:	vst1.64	{d18-d19}, [r7 :128]
   149bc:	bl	11f80 <memset@plt>
   149c0:	vld1.64	{d16-d17}, [sl :128]
   149c4:	mov	r0, r4
   149c8:	mov	r1, #0
   149cc:	mov	r2, #424	; 0x1a8
   149d0:	str	r8, [r5, #208]	; 0xd0
   149d4:	vadd.i64	q8, q8, q4
   149d8:	vst1.64	{d16-d17}, [sl :128]
   149dc:	bl	11f80 <memset@plt>
   149e0:	str	r8, [r4, #412]	; 0x19c
   149e4:	bl	13b44 <body_with_one_return@@Base>
   149e8:	mov	r0, r6
   149ec:	bl	11ee4 <puts@plt>
   149f0:	ldr	r2, [pc, #336]	; 14b48 <main@@Base+0x738>
   149f4:	ldr	r0, [pc, #336]	; 14b4c <main@@Base+0x73c>
   149f8:	ldr	r1, [pc, #336]	; 14b50 <main@@Base+0x740>
   149fc:	add	r2, pc, r2
   14a00:	add	r0, pc, r0
   14a04:	add	r1, pc, r1
   14a08:	bl	11e54 <printf@plt>
   14a0c:	vld1.64	{d16-d17}, [r9 :128]
   14a10:	mov	r0, r5
   14a14:	mov	r1, #0
   14a18:	mov	r2, #236	; 0xec
   14a1c:	vadd.i64	q8, q8, q4
   14a20:	vst1.64	{d16-d17}, [r9 :128]
   14a24:	vld1.64	{d16-d17}, [r7 :128]
   14a28:	vadd.i64	q8, q8, q4
   14a2c:	vst1.64	{d16-d17}, [r7 :128]
   14a30:	bl	11f80 <memset@plt>
   14a34:	vld1.64	{d16-d17}, [sl :128]
   14a38:	mov	r0, r4
   14a3c:	mov	r1, #0
   14a40:	mov	r2, #424	; 0x1a8
   14a44:	str	r8, [r5, #208]	; 0xd0
   14a48:	vadd.i64	q8, q8, q4
   14a4c:	vst1.64	{d16-d17}, [sl :128]
   14a50:	bl	11f80 <memset@plt>
   14a54:	str	r8, [r4, #412]	; 0x19c
   14a58:	bl	13850 <body_with_two_returns@@Base>
   14a5c:	mov	r0, r6
   14a60:	bl	11ee4 <puts@plt>
   14a64:	ldr	r0, [pc, #232]	; 14b54 <main@@Base+0x744>
   14a68:	add	r0, pc, r0
   14a6c:	bl	11ee4 <puts@plt>
   14a70:	ldr	r0, [pc, #224]	; 14b58 <main@@Base+0x748>
   14a74:	add	r0, pc, r0
   14a78:	bl	11ee4 <puts@plt>
   14a7c:	ldr	r0, [pc, #216]	; 14b5c <main@@Base+0x74c>
   14a80:	add	r0, pc, r0
   14a84:	bl	11ee4 <puts@plt>
   14a88:	mov	r0, #0
   14a8c:	vpop	{d8-d9}
   14a90:	add	sp, sp, #4
   14a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a98:	andeq	r9, r1, r8, asr #2
   14a9c:	andeq	r8, r1, r4, lsl #25
   14aa0:	strdeq	r6, [r0], -r4
   14aa4:	andeq	r6, r0, r4, asr #24
   14aa8:	andeq	r6, r0, fp, lsr ip
   14aac:	andeq	r6, r0, pc, lsr #24
   14ab0:	andeq	r6, r0, sp, lsr ip
   14ab4:	andeq	r6, r0, r4, lsr sp
   14ab8:	ldrdeq	r8, [r1], -ip
   14abc:	andeq	r8, r1, r8, asr sp
   14ac0:	ldrdeq	r8, [r1], -r4
   14ac4:	andeq	r8, r1, r8, lsl #26
   14ac8:	muleq	r1, r0, fp
   14acc:	strdeq	r6, [r0], -r7
   14ad0:			; <UNDEFINED> instruction: 0x00006cb4
   14ad4:	andeq	r6, r0, r3, lsl #23
   14ad8:	muleq	r0, r1, fp
   14adc:	strdeq	r6, [r0], -r0
   14ae0:	andeq	r6, r0, pc, lsl #22
   14ae4:	andeq	r6, r0, sp, lsl fp
   14ae8:	andeq	r6, r0, ip, asr #24
   14aec:	muleq	r0, fp, sl
   14af0:	andeq	r6, r0, r9, lsr #21
   14af4:	andeq	r6, r0, r8, lsl #23
   14af8:	andeq	r6, r0, r7, lsr #20
   14afc:	andeq	r6, r0, r5, lsr sl
   14b00:	andeq	r6, r0, r4, asr #22
   14b04:			; <UNDEFINED> instruction: 0x000069b3
   14b08:	andeq	r6, r0, r1, asr #19
   14b0c:	andeq	r6, r0, r0, asr fp
   14b10:	andeq	r6, r0, pc, lsr r9
   14b14:	andeq	r6, r0, sp, asr #18
   14b18:	strdeq	r6, [r0], -ip
   14b1c:	andeq	r6, r0, fp, lsr #17
   14b20:			; <UNDEFINED> instruction: 0x000068b9
   14b24:	andeq	r6, r0, r8, asr #21
   14b28:	andeq	r6, r0, r7, lsr r8
   14b2c:	andeq	r6, r0, r5, asr #16
   14b30:	andeq	r6, r0, r4, lsl #21
   14b34:	andeq	r6, r0, r3, asr #15
   14b38:	ldrdeq	r6, [r0], -r1
   14b3c:	andeq	r6, r0, r0, asr #19
   14b40:	andeq	r6, r0, pc, asr #14
   14b44:	andeq	r6, r0, sp, asr r7
   14b48:	andeq	r6, r0, ip, lsr #18
   14b4c:	ldrdeq	r6, [r0], -fp
   14b50:	andeq	r6, r0, r9, ror #13
   14b54:	ldrdeq	r6, [r0], -r4
   14b58:	ldrdeq	r6, [r0], -r7
   14b5c:	ldrdeq	r6, [r0], -r4
   14b60:	push	{r4, r5, r6, lr}
   14b64:	sub	sp, sp, #8
   14b68:	ldr	r0, [pc, #112]	; 14be0 <main@@Base+0x7d0>
   14b6c:	ldr	r1, [pc, #112]	; 14be4 <main@@Base+0x7d4>
   14b70:	movw	r2, #18131	; 0x46d3
   14b74:	movt	r2, #24865	; 0x6121
   14b78:	add	r0, pc, r0
   14b7c:	add	r1, pc, r1
   14b80:	bl	17ce8 <read_boolean_unary_expression@@Base+0x434>
   14b84:	ldr	r0, [pc, #92]	; 14be8 <main@@Base+0x7d8>
   14b88:	ldr	r6, [pc, #92]	; 14bec <main@@Base+0x7dc>
   14b8c:	mov	r5, #0
   14b90:	add	r0, pc, r0
   14b94:	add	r6, pc, r6
   14b98:	add	r4, r0, #4
   14b9c:	mov	r3, r6
   14ba0:	ldr	r0, [r3, r5]!
   14ba4:	ldr	r1, [r3, #16]
   14ba8:	str	r1, [sp]
   14bac:	ldmib	r3, {r1, r2}
   14bb0:	ldrb	r3, [r3, #12]
   14bb4:	bl	1844c <read_boolean_unary_expression@@Base+0xb98>
   14bb8:	ldrd	r0, [r4, #-4]
   14bbc:	bl	18d00 <read_boolean_unary_expression@@Base+0x144c>
   14bc0:	add	r5, r5, #20
   14bc4:	add	r4, r4, #8
   14bc8:	cmp	r5, #360	; 0x168
   14bcc:	bne	14b9c <main@@Base+0x78c>
   14bd0:	bl	1947c <read_boolean_unary_expression@@Base+0x1bc8>
   14bd4:	add	sp, sp, #8
   14bd8:	pop	{r4, r5, r6, lr}
   14bdc:	b	1a1e8 <read_boolean_unary_expression@@Base+0x2934>
   14be0:	strdeq	r6, [r0], -r0
   14be4:	andeq	r6, r0, sp, ror r5
   14be8:			; <UNDEFINED> instruction: 0x00017cb8
   14bec:	andeq	r7, r1, r4, asr #22
   14bf0:	push	{fp, lr}
   14bf4:	bl	14b60 <main@@Base+0x750>
   14bf8:	ldr	r0, [pc, #548]	; 14e24 <main@@Base+0xa14>
   14bfc:	mov	r1, #0
   14c00:	mov	r2, #152	; 0x98
   14c04:	add	r0, pc, r0
   14c08:	bl	11f80 <memset@plt>
   14c0c:	ldr	r0, [pc, #532]	; 14e28 <main@@Base+0xa18>
   14c10:	vmov.i32	q8, #0	; 0x00000000
   14c14:	mov	ip, #80	; 0x50
   14c18:	add	r0, pc, r0
   14c1c:	add	r1, r0, #16
   14c20:	vst1.64	{d16-d17}, [r1 :128]
   14c24:	ldr	r1, [pc, #512]	; 14e2c <main@@Base+0xa1c>
   14c28:	add	r1, pc, r1
   14c2c:	add	r2, r1, #16
   14c30:	vst1.64	{d16-d17}, [r2 :128]
   14c34:	ldr	r2, [pc, #500]	; 14e30 <main@@Base+0xa20>
   14c38:	add	r2, pc, r2
   14c3c:	add	r3, r2, #64	; 0x40
   14c40:	vst1.64	{d16-d17}, [r3 :128]
   14c44:	add	r3, r2, #48	; 0x30
   14c48:	vst1.64	{d16-d17}, [r3 :128]
   14c4c:	add	r3, r2, #32
   14c50:	vst1.64	{d16-d17}, [r3 :128]
   14c54:	add	r3, r2, #16
   14c58:	vst1.64	{d16-d17}, [r3 :128]
   14c5c:	ldr	r3, [pc, #464]	; 14e34 <main@@Base+0xa24>
   14c60:	add	r3, pc, r3
   14c64:	vst1.64	{d16-d17}, [r3 :128]
   14c68:	ldr	r3, [pc, #456]	; 14e38 <main@@Base+0xa28>
   14c6c:	add	r3, pc, r3
   14c70:	vst1.64	{d16-d17}, [r3 :128]
   14c74:	ldr	r3, [pc, #448]	; 14e3c <main@@Base+0xa2c>
   14c78:	vst1.64	{d16-d17}, [r2 :128], ip
   14c7c:	vst1.64	{d16-d17}, [r2 :128]
   14c80:	add	r3, pc, r3
   14c84:	vst1.64	{d16-d17}, [r3 :128]
   14c88:	mov	r3, #32
   14c8c:	vst1.64	{d16-d17}, [r0 :128], r3
   14c90:	vst1.64	{d16-d17}, [r1 :128], r3
   14c94:	vst1.64	{d16-d17}, [r0 :128]
   14c98:	vst1.64	{d16-d17}, [r1 :128]
   14c9c:	ldr	r2, [pc, #412]	; 14e40 <main@@Base+0xa30>
   14ca0:	add	r2, pc, r2
   14ca4:	add	r0, r2, #32
   14ca8:	vst1.64	{d16-d17}, [r0 :128]
   14cac:	add	r0, r2, #16
   14cb0:	vst1.64	{d16-d17}, [r0 :128]
   14cb4:	mov	r0, #48	; 0x30
   14cb8:	vst1.64	{d16-d17}, [r2 :128], r0
   14cbc:	vst1.64	{d16-d17}, [r2 :128]
   14cc0:	ldr	r2, [pc, #380]	; 14e44 <main@@Base+0xa34>
   14cc4:	add	r2, pc, r2
   14cc8:	add	r1, r2, #16
   14ccc:	vst1.64	{d16-d17}, [r2 :128], r3
   14cd0:	vst1.64	{d16-d17}, [r1 :128]
   14cd4:	vst1.64	{d16-d17}, [r2 :128]
   14cd8:	ldr	r1, [pc, #360]	; 14e48 <main@@Base+0xa38>
   14cdc:	add	r1, pc, r1
   14ce0:	add	r2, r1, #64	; 0x40
   14ce4:	vst1.64	{d16-d17}, [r2 :128]
   14ce8:	add	r2, r1, #48	; 0x30
   14cec:	vst1.64	{d16-d17}, [r2 :128]
   14cf0:	add	r2, r1, #32
   14cf4:	vst1.64	{d16-d17}, [r2 :128]
   14cf8:	add	r2, r1, #16
   14cfc:	vst1.64	{d16-d17}, [r1 :128], ip
   14d00:	vst1.64	{d16-d17}, [r2 :128]
   14d04:	vst1.64	{d16-d17}, [r1 :128]
   14d08:	ldr	r1, [pc, #316]	; 14e4c <main@@Base+0xa3c>
   14d0c:	add	r1, pc, r1
   14d10:	add	r2, r1, #64	; 0x40
   14d14:	vst1.64	{d16-d17}, [r2 :128]
   14d18:	add	r2, r1, #48	; 0x30
   14d1c:	vst1.64	{d16-d17}, [r2 :128]
   14d20:	add	r2, r1, #32
   14d24:	vst1.64	{d16-d17}, [r2 :128]
   14d28:	add	r2, r1, #16
   14d2c:	vst1.64	{d16-d17}, [r1 :128], ip
   14d30:	vst1.64	{d16-d17}, [r2 :128]
   14d34:	vst1.64	{d16-d17}, [r1 :128]
   14d38:	ldr	r1, [pc, #272]	; 14e50 <main@@Base+0xa40>
   14d3c:	add	r1, pc, r1
   14d40:	add	r2, r1, #32
   14d44:	vst1.64	{d16-d17}, [r2 :128]
   14d48:	add	r2, r1, #16
   14d4c:	vst1.64	{d16-d17}, [r1 :128], r0
   14d50:	vst1.64	{d16-d17}, [r2 :128]
   14d54:	vst1.64	{d16-d17}, [r1 :128]
   14d58:	ldr	r1, [pc, #244]	; 14e54 <main@@Base+0xa44>
   14d5c:	add	r1, pc, r1
   14d60:	add	r2, r1, #32
   14d64:	vst1.64	{d16-d17}, [r2 :128]
   14d68:	add	r2, r1, #16
   14d6c:	vst1.64	{d16-d17}, [r1 :128], r0
   14d70:	vst1.64	{d16-d17}, [r2 :128]
   14d74:	vst1.64	{d16-d17}, [r1 :128]
   14d78:	ldr	r1, [pc, #216]	; 14e58 <main@@Base+0xa48>
   14d7c:	add	r1, pc, r1
   14d80:	add	r2, r1, #64	; 0x40
   14d84:	vst1.64	{d16-d17}, [r2 :128]
   14d88:	add	r2, r1, #48	; 0x30
   14d8c:	vst1.64	{d16-d17}, [r2 :128]
   14d90:	add	r2, r1, #32
   14d94:	vst1.64	{d16-d17}, [r2 :128]
   14d98:	add	r2, r1, #16
   14d9c:	vst1.64	{d16-d17}, [r1 :128], ip
   14da0:	vst1.64	{d16-d17}, [r2 :128]
   14da4:	vst1.64	{d16-d17}, [r1 :128]
   14da8:	ldr	r1, [pc, #172]	; 14e5c <main@@Base+0xa4c>
   14dac:	add	r1, pc, r1
   14db0:	add	r2, r1, #48	; 0x30
   14db4:	vst1.64	{d16-d17}, [r2 :128]
   14db8:	add	r2, r1, #32
   14dbc:	vst1.64	{d16-d17}, [r2 :128]
   14dc0:	add	r2, r1, #16
   14dc4:	vst1.64	{d16-d17}, [r2 :128]
   14dc8:	mov	r2, #64	; 0x40
   14dcc:	vst1.64	{d16-d17}, [r1 :128], r2
   14dd0:	vst1.64	{d16-d17}, [r1 :128]
   14dd4:	ldr	r1, [pc, #132]	; 14e60 <main@@Base+0xa50>
   14dd8:	add	r1, pc, r1
   14ddc:	add	r2, r1, #32
   14de0:	vst1.64	{d16-d17}, [r2 :128]
   14de4:	add	r2, r1, #16
   14de8:	vst1.64	{d16-d17}, [r1 :128], r0
   14dec:	vst1.64	{d16-d17}, [r2 :128]
   14df0:	vst1.64	{d16-d17}, [r1 :128]
   14df4:	ldr	r1, [pc, #104]	; 14e64 <main@@Base+0xa54>
   14df8:	add	r1, pc, r1
   14dfc:	add	r2, r1, #32
   14e00:	vst1.64	{d16-d17}, [r2 :128]
   14e04:	add	r2, r1, #16
   14e08:	vst1.64	{d16-d17}, [r1 :128], r0
   14e0c:	vst1.64	{d16-d17}, [r2 :128]
   14e10:	vst1.64	{d16-d17}, [r1 :128]
   14e14:	ldr	r0, [pc, #76]	; 14e68 <main@@Base+0xa58>
   14e18:	add	r0, pc, r0
   14e1c:	vst1.64	{d16-d17}, [r0 :128]
   14e20:	pop	{fp, pc}
   14e24:	andeq	r8, r1, r4, lsl #10
   14e28:	andeq	r8, r1, r0, asr r6
   14e2c:	andeq	r8, r1, r0, lsl r6
   14e30:	andeq	r8, r1, r0, lsl #11
   14e34:	andeq	r8, r1, r8, asr #10
   14e38:	andeq	r8, r1, ip, lsr #11
   14e3c:	andeq	r8, r1, r8, lsr #11
   14e40:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14e44:	andeq	r8, r1, r4, lsl r6
   14e48:	andeq	r8, r1, ip, lsr #12
   14e4c:	andeq	r8, r1, ip, asr r6
   14e50:	andeq	r8, r1, ip, lsl #13
   14e54:	andeq	r8, r1, ip, lsr #13
   14e58:	andeq	r8, r1, ip, asr #13
   14e5c:	strdeq	r8, [r1], -ip
   14e60:	andeq	r8, r1, r0, lsr #14
   14e64:	andeq	r8, r1, r0, asr #14
   14e68:	andeq	r8, r1, r0, ror #14
   14e6c:	ldr	r0, [pc, #12]	; 14e80 <main@@Base+0xa70>
   14e70:	ldr	r1, [pc, #12]	; 14e84 <main@@Base+0xa74>
   14e74:	add	r0, pc, r0
   14e78:	add	r1, pc, r1
   14e7c:	b	1a698 <__gcov_flush@@Base+0xb4>
   14e80:			; <UNDEFINED> instruction: 0xfffffce4
   14e84:			; <UNDEFINED> instruction: 0xfffffd70
	...

00014e90 <init_token_int_type@@Base>:
   14e90:	ldr	r1, [pc, #56]	; 14ed0 <init_token_int_type@@Base+0x40>
   14e94:	add	r2, pc, #36	; 0x24
   14e98:	vld1.64	{d16-d17}, [r2 :128]
   14e9c:	add	r1, pc, r1
   14ea0:	vld1.64	{d18-d19}, [r1 :128]
   14ea4:	vadd.i64	q8, q9, q8
   14ea8:	vst1.64	{d16-d17}, [r1 :128]
   14eac:	mov	r1, #0
   14eb0:	str	r1, [r0]
   14eb4:	bx	lr
   14eb8:	nop	{0}
   14ebc:	nop	{0}
   14ec0:	andeq	r0, r0, r1
   14ec4:	andeq	r0, r0, r0
   14ec8:	andeq	r0, r0, r1
   14ecc:	andeq	r0, r0, r0
   14ed0:	andeq	r8, r1, ip, ror #13
   14ed4:	nop	{0}
   14ed8:	nop	{0}
   14edc:	nop	{0}

00014ee0 <init_token_int_value@@Base>:
   14ee0:	ldr	r2, [pc, #56]	; 14f20 <init_token_int_value@@Base+0x40>
   14ee4:	add	r3, pc, #36	; 0x24
   14ee8:	vld1.64	{d16-d17}, [r3 :128]
   14eec:	add	r2, pc, r2
   14ef0:	vld1.64	{d18-d19}, [r2 :128]
   14ef4:	vadd.i64	q8, q9, q8
   14ef8:	vst1.64	{d16-d17}, [r2 :128]
   14efc:	mov	r2, #1
   14f00:	str	r2, [r0]
   14f04:	str	r1, [r0, #4]
   14f08:	bx	lr
   14f0c:	nop	{0}
   14f10:	andeq	r0, r0, r1
   14f14:	andeq	r0, r0, r0
   14f18:	andeq	r0, r0, r1
   14f1c:	andeq	r0, r0, r0
   14f20:	andeq	r8, r1, ip, lsr #13
   14f24:	nop	{0}
   14f28:	nop	{0}
   14f2c:	nop	{0}

00014f30 <init_token_function@@Base>:
   14f30:	ldr	r2, [pc, #56]	; 14f70 <init_token_function@@Base+0x40>
   14f34:	add	r3, pc, #36	; 0x24
   14f38:	vld1.64	{d16-d17}, [r3 :128]
   14f3c:	add	r2, pc, r2
   14f40:	vld1.64	{d18-d19}, [r2 :128]
   14f44:	vadd.i64	q8, q9, q8
   14f48:	vst1.64	{d16-d17}, [r2 :128]
   14f4c:	mov	r2, #2
   14f50:	str	r2, [r0]
   14f54:	str	r1, [r0, #4]
   14f58:	bx	lr
   14f5c:	nop	{0}
   14f60:	andeq	r0, r0, r1
   14f64:	andeq	r0, r0, r0
   14f68:	andeq	r0, r0, r1
   14f6c:	andeq	r0, r0, r0
   14f70:	andeq	r8, r1, ip, ror #12
   14f74:	nop	{0}
   14f78:	nop	{0}
   14f7c:	nop	{0}

00014f80 <init_token_opar@@Base>:
   14f80:	ldr	r1, [pc, #56]	; 14fc0 <init_token_opar@@Base+0x40>
   14f84:	add	r2, pc, #36	; 0x24
   14f88:	vld1.64	{d16-d17}, [r2 :128]
   14f8c:	add	r1, pc, r1
   14f90:	vld1.64	{d18-d19}, [r1 :128]
   14f94:	vadd.i64	q8, q9, q8
   14f98:	vst1.64	{d16-d17}, [r1 :128]
   14f9c:	mov	r1, #3
   14fa0:	str	r1, [r0]
   14fa4:	bx	lr
   14fa8:	nop	{0}
   14fac:	nop	{0}
   14fb0:	andeq	r0, r0, r1
   14fb4:	andeq	r0, r0, r0
   14fb8:	andeq	r0, r0, r1
   14fbc:	andeq	r0, r0, r0
   14fc0:	andeq	r8, r1, ip, lsr #12
   14fc4:	nop	{0}
   14fc8:	nop	{0}
   14fcc:	nop	{0}

00014fd0 <init_token_cpar@@Base>:
   14fd0:	ldr	r1, [pc, #56]	; 15010 <init_token_cpar@@Base+0x40>
   14fd4:	add	r2, pc, #36	; 0x24
   14fd8:	vld1.64	{d16-d17}, [r2 :128]
   14fdc:	add	r1, pc, r1
   14fe0:	vld1.64	{d18-d19}, [r1 :128]
   14fe4:	vadd.i64	q8, q9, q8
   14fe8:	vst1.64	{d16-d17}, [r1 :128]
   14fec:	mov	r1, #4
   14ff0:	str	r1, [r0]
   14ff4:	bx	lr
   14ff8:	nop	{0}
   14ffc:	nop	{0}
   15000:	andeq	r0, r0, r1
   15004:	andeq	r0, r0, r0
   15008:	andeq	r0, r0, r1
   1500c:	andeq	r0, r0, r0
   15010:	andeq	r8, r1, ip, ror #11
   15014:	nop	{0}
   15018:	nop	{0}
   1501c:	nop	{0}

00015020 <init_token_obra@@Base>:
   15020:	ldr	r1, [pc, #56]	; 15060 <init_token_obra@@Base+0x40>
   15024:	add	r2, pc, #36	; 0x24
   15028:	vld1.64	{d16-d17}, [r2 :128]
   1502c:	add	r1, pc, r1
   15030:	vld1.64	{d18-d19}, [r1 :128]
   15034:	vadd.i64	q8, q9, q8
   15038:	vst1.64	{d16-d17}, [r1 :128]
   1503c:	mov	r1, #5
   15040:	str	r1, [r0]
   15044:	bx	lr
   15048:	nop	{0}
   1504c:	nop	{0}
   15050:	andeq	r0, r0, r1
   15054:	andeq	r0, r0, r0
   15058:	andeq	r0, r0, r1
   1505c:	andeq	r0, r0, r0
   15060:	andeq	r8, r1, ip, lsr #11
   15064:	nop	{0}
   15068:	nop	{0}
   1506c:	nop	{0}

00015070 <init_token_cbra@@Base>:
   15070:	ldr	r1, [pc, #56]	; 150b0 <init_token_cbra@@Base+0x40>
   15074:	add	r2, pc, #36	; 0x24
   15078:	vld1.64	{d16-d17}, [r2 :128]
   1507c:	add	r1, pc, r1
   15080:	vld1.64	{d18-d19}, [r1 :128]
   15084:	vadd.i64	q8, q9, q8
   15088:	vst1.64	{d16-d17}, [r1 :128]
   1508c:	mov	r1, #6
   15090:	str	r1, [r0]
   15094:	bx	lr
   15098:	nop	{0}
   1509c:	nop	{0}
   150a0:	andeq	r0, r0, r1
   150a4:	andeq	r0, r0, r0
   150a8:	andeq	r0, r0, r1
   150ac:	andeq	r0, r0, r0
   150b0:	andeq	r8, r1, ip, ror #10
   150b4:	nop	{0}
   150b8:	nop	{0}
   150bc:	nop	{0}

000150c0 <init_token_return@@Base>:
   150c0:	ldr	r1, [pc, #56]	; 15100 <init_token_return@@Base+0x40>
   150c4:	add	r2, pc, #36	; 0x24
   150c8:	vld1.64	{d16-d17}, [r2 :128]
   150cc:	add	r1, pc, r1
   150d0:	vld1.64	{d18-d19}, [r1 :128]
   150d4:	vadd.i64	q8, q9, q8
   150d8:	vst1.64	{d16-d17}, [r1 :128]
   150dc:	mov	r1, #7
   150e0:	str	r1, [r0]
   150e4:	bx	lr
   150e8:	nop	{0}
   150ec:	nop	{0}
   150f0:	andeq	r0, r0, r1
   150f4:	andeq	r0, r0, r0
   150f8:	andeq	r0, r0, r1
   150fc:	andeq	r0, r0, r0
   15100:	andeq	r8, r1, ip, lsr #10
   15104:	nop	{0}
   15108:	nop	{0}
   1510c:	nop	{0}

00015110 <init_token_semicolon@@Base>:
   15110:	ldr	r1, [pc, #56]	; 15150 <init_token_semicolon@@Base+0x40>
   15114:	add	r2, pc, #36	; 0x24
   15118:	vld1.64	{d16-d17}, [r2 :128]
   1511c:	add	r1, pc, r1
   15120:	vld1.64	{d18-d19}, [r1 :128]
   15124:	vadd.i64	q8, q9, q8
   15128:	vst1.64	{d16-d17}, [r1 :128]
   1512c:	mov	r1, #8
   15130:	str	r1, [r0]
   15134:	bx	lr
   15138:	nop	{0}
   1513c:	nop	{0}
   15140:	andeq	r0, r0, r1
   15144:	andeq	r0, r0, r0
   15148:	andeq	r0, r0, r1
   1514c:	andeq	r0, r0, r0
   15150:	andeq	r8, r1, ip, ror #9
   15154:	nop	{0}
   15158:	nop	{0}
   1515c:	nop	{0}

00015160 <init_token_eof@@Base>:
   15160:	ldr	r1, [pc, #56]	; 151a0 <init_token_eof@@Base+0x40>
   15164:	add	r2, pc, #36	; 0x24
   15168:	vld1.64	{d16-d17}, [r2 :128]
   1516c:	add	r1, pc, r1
   15170:	vld1.64	{d18-d19}, [r1 :128]
   15174:	vadd.i64	q8, q9, q8
   15178:	vst1.64	{d16-d17}, [r1 :128]
   1517c:	mov	r1, #9
   15180:	str	r1, [r0]
   15184:	bx	lr
   15188:	nop	{0}
   1518c:	nop	{0}
   15190:	andeq	r0, r0, r1
   15194:	andeq	r0, r0, r0
   15198:	andeq	r0, r0, r1
   1519c:	andeq	r0, r0, r0
   151a0:	andeq	r8, r1, ip, lsr #9
   151a4:	nop	{0}
   151a8:	nop	{0}
   151ac:	nop	{0}

000151b0 <init_token_if@@Base>:
   151b0:	ldr	r1, [pc, #56]	; 151f0 <init_token_if@@Base+0x40>
   151b4:	add	r2, pc, #36	; 0x24
   151b8:	vld1.64	{d16-d17}, [r2 :128]
   151bc:	add	r1, pc, r1
   151c0:	vld1.64	{d18-d19}, [r1 :128]
   151c4:	vadd.i64	q8, q9, q8
   151c8:	vst1.64	{d16-d17}, [r1 :128]
   151cc:	mov	r1, #10
   151d0:	str	r1, [r0]
   151d4:	bx	lr
   151d8:	nop	{0}
   151dc:	nop	{0}
   151e0:	andeq	r0, r0, r1
   151e4:	andeq	r0, r0, r0
   151e8:	andeq	r0, r0, r1
   151ec:	andeq	r0, r0, r0
   151f0:	andeq	r8, r1, ip, ror #8
   151f4:	nop	{0}
   151f8:	nop	{0}
   151fc:	nop	{0}

00015200 <init_token_else@@Base>:
   15200:	ldr	r1, [pc, #56]	; 15240 <init_token_else@@Base+0x40>
   15204:	add	r2, pc, #36	; 0x24
   15208:	vld1.64	{d16-d17}, [r2 :128]
   1520c:	add	r1, pc, r1
   15210:	vld1.64	{d18-d19}, [r1 :128]
   15214:	vadd.i64	q8, q9, q8
   15218:	vst1.64	{d16-d17}, [r1 :128]
   1521c:	mov	r1, #11
   15220:	str	r1, [r0]
   15224:	bx	lr
   15228:	nop	{0}
   1522c:	nop	{0}
   15230:	andeq	r0, r0, r1
   15234:	andeq	r0, r0, r0
   15238:	andeq	r0, r0, r1
   1523c:	andeq	r0, r0, r0
   15240:	andeq	r8, r1, ip, lsr #8
   15244:	nop	{0}
   15248:	nop	{0}
   1524c:	nop	{0}

00015250 <init_token_boolean_op@@Base>:
   15250:	ldr	r2, [pc, #56]	; 15290 <init_token_boolean_op@@Base+0x40>
   15254:	add	r3, pc, #36	; 0x24
   15258:	vld1.64	{d16-d17}, [r3 :128]
   1525c:	add	r2, pc, r2
   15260:	vld1.64	{d18-d19}, [r2 :128]
   15264:	vadd.i64	q8, q9, q8
   15268:	vst1.64	{d16-d17}, [r2 :128]
   1526c:	mov	r2, #12
   15270:	str	r2, [r0]
   15274:	str	r1, [r0, #4]
   15278:	bx	lr
   1527c:	nop	{0}
   15280:	andeq	r0, r0, r1
   15284:	andeq	r0, r0, r0
   15288:	andeq	r0, r0, r1
   1528c:	andeq	r0, r0, r0
   15290:	andeq	r8, r1, ip, ror #7
   15294:	nop	{0}
   15298:	nop	{0}
   1529c:	nop	{0}

000152a0 <free_token_int_type@@Base>:
   152a0:	ldr	r1, [pc, #40]	; 152d0 <free_token_int_type@@Base+0x30>
   152a4:	add	r2, pc, #20
   152a8:	vld1.64	{d16-d17}, [r2 :128]
   152ac:	add	r1, pc, r1
   152b0:	vld1.64	{d18-d19}, [r1 :128]
   152b4:	vadd.i64	q8, q9, q8
   152b8:	vst1.64	{d16-d17}, [r1 :128]
   152bc:	b	11e6c <free@plt>
   152c0:	andeq	r0, r0, r1
   152c4:	andeq	r0, r0, r0
   152c8:	andeq	r0, r0, r1
   152cc:	andeq	r0, r0, r0
   152d0:	andeq	r8, r1, ip, lsr #7
   152d4:	nop	{0}
   152d8:	nop	{0}
   152dc:	nop	{0}

000152e0 <free_token_int_value@@Base>:
   152e0:	ldr	r1, [pc, #40]	; 15310 <free_token_int_value@@Base+0x30>
   152e4:	add	r2, pc, #20
   152e8:	vld1.64	{d16-d17}, [r2 :128]
   152ec:	add	r1, pc, r1
   152f0:	vld1.64	{d18-d19}, [r1 :128]
   152f4:	vadd.i64	q8, q9, q8
   152f8:	vst1.64	{d16-d17}, [r1 :128]
   152fc:	b	11e6c <free@plt>
   15300:	andeq	r0, r0, r1
   15304:	andeq	r0, r0, r0
   15308:	andeq	r0, r0, r1
   1530c:	andeq	r0, r0, r0
   15310:	andeq	r8, r1, ip, ror r3
   15314:	nop	{0}
   15318:	nop	{0}
   1531c:	nop	{0}

00015320 <free_token_function@@Base>:
   15320:	ldr	r1, [pc, #40]	; 15350 <free_token_function@@Base+0x30>
   15324:	add	r2, pc, #20
   15328:	vld1.64	{d16-d17}, [r2 :128]
   1532c:	add	r1, pc, r1
   15330:	vld1.64	{d18-d19}, [r1 :128]
   15334:	vadd.i64	q8, q9, q8
   15338:	vst1.64	{d16-d17}, [r1 :128]
   1533c:	b	11e6c <free@plt>
   15340:	andeq	r0, r0, r1
   15344:	andeq	r0, r0, r0
   15348:	andeq	r0, r0, r1
   1534c:	andeq	r0, r0, r0
   15350:	andeq	r8, r1, ip, asr #6
   15354:	nop	{0}
   15358:	nop	{0}
   1535c:	nop	{0}

00015360 <free_token_opar@@Base>:
   15360:	ldr	r1, [pc, #40]	; 15390 <free_token_opar@@Base+0x30>
   15364:	add	r2, pc, #20
   15368:	vld1.64	{d16-d17}, [r2 :128]
   1536c:	add	r1, pc, r1
   15370:	vld1.64	{d18-d19}, [r1 :128]
   15374:	vadd.i64	q8, q9, q8
   15378:	vst1.64	{d16-d17}, [r1 :128]
   1537c:	b	11e6c <free@plt>
   15380:	andeq	r0, r0, r1
   15384:	andeq	r0, r0, r0
   15388:	andeq	r0, r0, r1
   1538c:	andeq	r0, r0, r0
   15390:	andeq	r8, r1, ip, lsl r3
   15394:	nop	{0}
   15398:	nop	{0}
   1539c:	nop	{0}

000153a0 <free_token_cpar@@Base>:
   153a0:	ldr	r1, [pc, #40]	; 153d0 <free_token_cpar@@Base+0x30>
   153a4:	add	r2, pc, #20
   153a8:	vld1.64	{d16-d17}, [r2 :128]
   153ac:	add	r1, pc, r1
   153b0:	vld1.64	{d18-d19}, [r1 :128]
   153b4:	vadd.i64	q8, q9, q8
   153b8:	vst1.64	{d16-d17}, [r1 :128]
   153bc:	b	11e6c <free@plt>
   153c0:	andeq	r0, r0, r1
   153c4:	andeq	r0, r0, r0
   153c8:	andeq	r0, r0, r1
   153cc:	andeq	r0, r0, r0
   153d0:	andeq	r8, r1, ip, ror #5
   153d4:	nop	{0}
   153d8:	nop	{0}
   153dc:	nop	{0}

000153e0 <free_token_obra@@Base>:
   153e0:	ldr	r1, [pc, #40]	; 15410 <free_token_obra@@Base+0x30>
   153e4:	add	r2, pc, #20
   153e8:	vld1.64	{d16-d17}, [r2 :128]
   153ec:	add	r1, pc, r1
   153f0:	vld1.64	{d18-d19}, [r1 :128]
   153f4:	vadd.i64	q8, q9, q8
   153f8:	vst1.64	{d16-d17}, [r1 :128]
   153fc:	b	11e6c <free@plt>
   15400:	andeq	r0, r0, r1
   15404:	andeq	r0, r0, r0
   15408:	andeq	r0, r0, r1
   1540c:	andeq	r0, r0, r0
   15410:			; <UNDEFINED> instruction: 0x000182bc
   15414:	nop	{0}
   15418:	nop	{0}
   1541c:	nop	{0}

00015420 <free_token_cbra@@Base>:
   15420:	ldr	r1, [pc, #40]	; 15450 <free_token_cbra@@Base+0x30>
   15424:	add	r2, pc, #20
   15428:	vld1.64	{d16-d17}, [r2 :128]
   1542c:	add	r1, pc, r1
   15430:	vld1.64	{d18-d19}, [r1 :128]
   15434:	vadd.i64	q8, q9, q8
   15438:	vst1.64	{d16-d17}, [r1 :128]
   1543c:	b	11e6c <free@plt>
   15440:	andeq	r0, r0, r1
   15444:	andeq	r0, r0, r0
   15448:	andeq	r0, r0, r1
   1544c:	andeq	r0, r0, r0
   15450:	andeq	r8, r1, ip, lsl #5
   15454:	nop	{0}
   15458:	nop	{0}
   1545c:	nop	{0}

00015460 <free_token_return@@Base>:
   15460:	ldr	r1, [pc, #40]	; 15490 <free_token_return@@Base+0x30>
   15464:	add	r2, pc, #20
   15468:	vld1.64	{d16-d17}, [r2 :128]
   1546c:	add	r1, pc, r1
   15470:	vld1.64	{d18-d19}, [r1 :128]
   15474:	vadd.i64	q8, q9, q8
   15478:	vst1.64	{d16-d17}, [r1 :128]
   1547c:	b	11e6c <free@plt>
   15480:	andeq	r0, r0, r1
   15484:	andeq	r0, r0, r0
   15488:	andeq	r0, r0, r1
   1548c:	andeq	r0, r0, r0
   15490:	andeq	r8, r1, ip, asr r2
   15494:	nop	{0}
   15498:	nop	{0}
   1549c:	nop	{0}

000154a0 <free_token_semicolon@@Base>:
   154a0:	ldr	r1, [pc, #40]	; 154d0 <free_token_semicolon@@Base+0x30>
   154a4:	add	r2, pc, #20
   154a8:	vld1.64	{d16-d17}, [r2 :128]
   154ac:	add	r1, pc, r1
   154b0:	vld1.64	{d18-d19}, [r1 :128]
   154b4:	vadd.i64	q8, q9, q8
   154b8:	vst1.64	{d16-d17}, [r1 :128]
   154bc:	b	11e6c <free@plt>
   154c0:	andeq	r0, r0, r1
   154c4:	andeq	r0, r0, r0
   154c8:	andeq	r0, r0, r1
   154cc:	andeq	r0, r0, r0
   154d0:	andeq	r8, r1, ip, lsr #4
   154d4:	nop	{0}
   154d8:	nop	{0}
   154dc:	nop	{0}

000154e0 <free_token_eof@@Base>:
   154e0:	ldr	r1, [pc, #40]	; 15510 <free_token_eof@@Base+0x30>
   154e4:	add	r2, pc, #20
   154e8:	vld1.64	{d16-d17}, [r2 :128]
   154ec:	add	r1, pc, r1
   154f0:	vld1.64	{d18-d19}, [r1 :128]
   154f4:	vadd.i64	q8, q9, q8
   154f8:	vst1.64	{d16-d17}, [r1 :128]
   154fc:	b	11e6c <free@plt>
   15500:	andeq	r0, r0, r1
   15504:	andeq	r0, r0, r0
   15508:	andeq	r0, r0, r1
   1550c:	andeq	r0, r0, r0
   15510:	strdeq	r8, [r1], -ip
   15514:	nop	{0}
   15518:	nop	{0}
   1551c:	nop	{0}

00015520 <free_token_if@@Base>:
   15520:	ldr	r1, [pc, #40]	; 15550 <free_token_if@@Base+0x30>
   15524:	add	r2, pc, #20
   15528:	vld1.64	{d16-d17}, [r2 :128]
   1552c:	add	r1, pc, r1
   15530:	vld1.64	{d18-d19}, [r1 :128]
   15534:	vadd.i64	q8, q9, q8
   15538:	vst1.64	{d16-d17}, [r1 :128]
   1553c:	b	11e6c <free@plt>
   15540:	andeq	r0, r0, r1
   15544:	andeq	r0, r0, r0
   15548:	andeq	r0, r0, r1
   1554c:	andeq	r0, r0, r0
   15550:	andeq	r8, r1, ip, asr #3
   15554:	nop	{0}
   15558:	nop	{0}
   1555c:	nop	{0}

00015560 <free_token_else@@Base>:
   15560:	ldr	r1, [pc, #40]	; 15590 <free_token_else@@Base+0x30>
   15564:	add	r2, pc, #20
   15568:	vld1.64	{d16-d17}, [r2 :128]
   1556c:	add	r1, pc, r1
   15570:	vld1.64	{d18-d19}, [r1 :128]
   15574:	vadd.i64	q8, q9, q8
   15578:	vst1.64	{d16-d17}, [r1 :128]
   1557c:	b	11e6c <free@plt>
   15580:	andeq	r0, r0, r1
   15584:	andeq	r0, r0, r0
   15588:	andeq	r0, r0, r1
   1558c:	andeq	r0, r0, r0
   15590:	muleq	r1, ip, r1

00015594 <free_token_boolean_op@@Base>:
   15594:	push	{r4, r5, fp, lr}
   15598:	add	fp, sp, #8
   1559c:	ldr	r5, [pc, #132]	; 15628 <free_token_boolean_op@@Base+0x94>
   155a0:	mov	r4, r0
   155a4:	ldr	r0, [pc, #128]	; 1562c <free_token_boolean_op@@Base+0x98>
   155a8:	mov	r1, #16
   155ac:	ldr	r0, [pc, r0]
   155b0:	add	r5, pc, r5
   155b4:	mov	r2, r5
   155b8:	adds	r0, r0, #1
   155bc:	str	r0, [r5]
   155c0:	ldr	r0, [r5, #4]
   155c4:	adc	r0, r0, #0
   155c8:	str	r0, [r5, #4]
   155cc:	ldr	r0, [r4, #4]
   155d0:	cmp	r0, #0
   155d4:	movwne	r1, #8
   155d8:	ldr	r1, [r2, r1]!
   155dc:	adds	r1, r1, #1
   155e0:	str	r1, [r2]
   155e4:	ldr	r1, [r2, #4]
   155e8:	adc	r1, r1, #0
   155ec:	cmp	r0, #0
   155f0:	str	r1, [r2, #4]
   155f4:	beq	1560c <free_token_boolean_op@@Base+0x78>
   155f8:	ldrd	r2, [r5, #24]
   155fc:	adds	r2, r2, #1
   15600:	adc	r3, r3, #0
   15604:	strd	r2, [r5, #24]
   15608:	bl	11e6c <free@plt>
   1560c:	ldrd	r0, [r5, #32]
   15610:	adds	r0, r0, #1
   15614:	adc	r1, r1, #0
   15618:	strd	r0, [r5, #32]
   1561c:	mov	r0, r4
   15620:	pop	{r4, r5, fp, lr}
   15624:	b	11e6c <free@plt>
   15628:	andeq	r8, r1, r8, ror #2
   1562c:	andeq	r8, r1, ip, ror #2
   15630:	push	{r4, r5, r6, lr}
   15634:	sub	sp, sp, #8
   15638:	ldr	r0, [pc, #112]	; 156b0 <free_token_boolean_op@@Base+0x11c>
   1563c:	ldr	r1, [pc, #112]	; 156b4 <free_token_boolean_op@@Base+0x120>
   15640:	movw	r2, #10327	; 0x2857
   15644:	movt	r2, #23326	; 0x5b1e
   15648:	add	r0, pc, r0
   1564c:	add	r1, pc, r1
   15650:	bl	17ce8 <read_boolean_unary_expression@@Base+0x434>
   15654:	ldr	r0, [pc, #92]	; 156b8 <free_token_boolean_op@@Base+0x124>
   15658:	ldr	r6, [pc, #92]	; 156bc <free_token_boolean_op@@Base+0x128>
   1565c:	mov	r5, #0
   15660:	add	r0, pc, r0
   15664:	add	r6, pc, r6
   15668:	add	r4, r0, #4
   1566c:	mov	r3, r6
   15670:	ldr	r0, [r3, r5]!
   15674:	ldr	r1, [r3, #16]
   15678:	str	r1, [sp]
   1567c:	ldmib	r3, {r1, r2}
   15680:	ldrb	r3, [r3, #12]
   15684:	bl	1844c <read_boolean_unary_expression@@Base+0xb98>
   15688:	ldrd	r0, [r4, #-4]
   1568c:	bl	18d00 <read_boolean_unary_expression@@Base+0x144c>
   15690:	add	r5, r5, #20
   15694:	add	r4, r4, #8
   15698:	cmp	r5, #520	; 0x208
   1569c:	bne	1566c <free_token_boolean_op@@Base+0xd8>
   156a0:	bl	1947c <read_boolean_unary_expression@@Base+0x1bc8>
   156a4:	add	sp, sp, #8
   156a8:	pop	{r4, r5, r6, lr}
   156ac:	b	1a1e8 <read_boolean_unary_expression@@Base+0x2934>
   156b0:	andeq	r5, r0, r0, lsl #27
   156b4:	andeq	r5, r0, sp, lsr #21
   156b8:	andeq	r7, r1, r8, lsl #9
   156bc:	andeq	r7, r1, r4, ror r2
   156c0:	push	{fp, lr}
   156c4:	bl	15630 <free_token_boolean_op@@Base+0x9c>
   156c8:	ldr	r0, [pc, #336]	; 15820 <free_token_boolean_op@@Base+0x28c>
   156cc:	vmov.i32	q8, #0	; 0x00000000
   156d0:	mov	r1, #0
   156d4:	add	r0, pc, r0
   156d8:	vst1.64	{d16-d17}, [r0 :128]
   156dc:	ldr	r0, [pc, #320]	; 15824 <free_token_boolean_op@@Base+0x290>
   156e0:	add	r0, pc, r0
   156e4:	vst1.64	{d16-d17}, [r0 :128]
   156e8:	ldr	r0, [pc, #312]	; 15828 <free_token_boolean_op@@Base+0x294>
   156ec:	add	r0, pc, r0
   156f0:	vst1.64	{d16-d17}, [r0 :128]
   156f4:	ldr	r0, [pc, #304]	; 1582c <free_token_boolean_op@@Base+0x298>
   156f8:	add	r0, pc, r0
   156fc:	vst1.64	{d16-d17}, [r0 :128]
   15700:	ldr	r0, [pc, #296]	; 15830 <free_token_boolean_op@@Base+0x29c>
   15704:	add	r0, pc, r0
   15708:	vst1.64	{d16-d17}, [r0 :128]
   1570c:	ldr	r0, [pc, #288]	; 15834 <free_token_boolean_op@@Base+0x2a0>
   15710:	add	r0, pc, r0
   15714:	vst1.64	{d16-d17}, [r0 :128]
   15718:	ldr	r0, [pc, #280]	; 15838 <free_token_boolean_op@@Base+0x2a4>
   1571c:	add	r0, pc, r0
   15720:	vst1.64	{d16-d17}, [r0 :128]
   15724:	ldr	r0, [pc, #272]	; 1583c <free_token_boolean_op@@Base+0x2a8>
   15728:	add	r0, pc, r0
   1572c:	vst1.64	{d16-d17}, [r0 :128]
   15730:	ldr	r0, [pc, #264]	; 15840 <free_token_boolean_op@@Base+0x2ac>
   15734:	add	r0, pc, r0
   15738:	vst1.64	{d16-d17}, [r0 :128]
   1573c:	ldr	r0, [pc, #256]	; 15844 <free_token_boolean_op@@Base+0x2b0>
   15740:	add	r0, pc, r0
   15744:	vst1.64	{d16-d17}, [r0 :128]
   15748:	ldr	r0, [pc, #248]	; 15848 <free_token_boolean_op@@Base+0x2b4>
   1574c:	add	r0, pc, r0
   15750:	vst1.64	{d16-d17}, [r0 :128]
   15754:	ldr	r0, [pc, #240]	; 1584c <free_token_boolean_op@@Base+0x2b8>
   15758:	add	r0, pc, r0
   1575c:	vst1.64	{d16-d17}, [r0 :128]
   15760:	ldr	r0, [pc, #232]	; 15850 <free_token_boolean_op@@Base+0x2bc>
   15764:	add	r0, pc, r0
   15768:	vst1.64	{d16-d17}, [r0 :128]
   1576c:	ldr	r0, [pc, #224]	; 15854 <free_token_boolean_op@@Base+0x2c0>
   15770:	add	r0, pc, r0
   15774:	vst1.64	{d16-d17}, [r0 :128]
   15778:	ldr	r0, [pc, #216]	; 15858 <free_token_boolean_op@@Base+0x2c4>
   1577c:	add	r0, pc, r0
   15780:	vst1.64	{d16-d17}, [r0 :128]
   15784:	ldr	r0, [pc, #208]	; 1585c <free_token_boolean_op@@Base+0x2c8>
   15788:	add	r0, pc, r0
   1578c:	vst1.64	{d16-d17}, [r0 :128]
   15790:	ldr	r0, [pc, #200]	; 15860 <free_token_boolean_op@@Base+0x2cc>
   15794:	add	r0, pc, r0
   15798:	vst1.64	{d16-d17}, [r0 :128]
   1579c:	ldr	r0, [pc, #192]	; 15864 <free_token_boolean_op@@Base+0x2d0>
   157a0:	add	r0, pc, r0
   157a4:	vst1.64	{d16-d17}, [r0 :128]
   157a8:	ldr	r0, [pc, #184]	; 15868 <free_token_boolean_op@@Base+0x2d4>
   157ac:	add	r0, pc, r0
   157b0:	vst1.64	{d16-d17}, [r0 :128]
   157b4:	ldr	r0, [pc, #176]	; 1586c <free_token_boolean_op@@Base+0x2d8>
   157b8:	add	r0, pc, r0
   157bc:	vst1.64	{d16-d17}, [r0 :128]
   157c0:	ldr	r0, [pc, #168]	; 15870 <free_token_boolean_op@@Base+0x2dc>
   157c4:	add	r0, pc, r0
   157c8:	vst1.64	{d16-d17}, [r0 :128]
   157cc:	ldr	r0, [pc, #160]	; 15874 <free_token_boolean_op@@Base+0x2e0>
   157d0:	add	r0, pc, r0
   157d4:	vst1.64	{d16-d17}, [r0 :128]
   157d8:	ldr	r0, [pc, #152]	; 15878 <free_token_boolean_op@@Base+0x2e4>
   157dc:	add	r0, pc, r0
   157e0:	vst1.64	{d16-d17}, [r0 :128]
   157e4:	ldr	r0, [pc, #144]	; 1587c <free_token_boolean_op@@Base+0x2e8>
   157e8:	add	r0, pc, r0
   157ec:	vst1.64	{d16-d17}, [r0 :128]
   157f0:	ldr	r0, [pc, #136]	; 15880 <free_token_boolean_op@@Base+0x2ec>
   157f4:	add	r0, pc, r0
   157f8:	vst1.64	{d16-d17}, [r0 :128]
   157fc:	ldr	r0, [pc, #128]	; 15884 <free_token_boolean_op@@Base+0x2f0>
   15800:	add	r0, pc, r0
   15804:	add	r2, r0, #16
   15808:	str	r1, [r0, #32]
   1580c:	vst1.64	{d16-d17}, [r2 :128]
   15810:	mov	r2, #36	; 0x24
   15814:	vst1.64	{d16-d17}, [r0 :128], r2
   15818:	str	r1, [r0]
   1581c:	pop	{fp, pc}
   15820:	andeq	r7, r1, r4, asr #29
   15824:	andeq	r7, r1, r8, lsr #29
   15828:			; <UNDEFINED> instruction: 0x00017ebc
   1582c:	andeq	r7, r1, r0, asr #29
   15830:	andeq	r7, r1, r4, asr #29
   15834:	andeq	r7, r1, r8, asr #29
   15838:	andeq	r7, r1, ip, asr #29
   1583c:	ldrdeq	r7, [r1], -r0
   15840:	ldrdeq	r7, [r1], -r4
   15844:	ldrdeq	r7, [r1], -r8
   15848:	ldrdeq	r7, [r1], -ip
   1584c:	andeq	r7, r1, r0, ror #29
   15850:	andeq	r7, r1, r4, ror #29
   15854:	andeq	r7, r1, r8, ror #29
   15858:	andeq	r7, r1, ip, ror #29
   1585c:	strdeq	r7, [r1], -r0
   15860:	strdeq	r7, [r1], -r4
   15864:	strdeq	r7, [r1], -r8
   15868:	strdeq	r7, [r1], -ip
   1586c:	andeq	r7, r1, r0, lsl #30
   15870:	andeq	r7, r1, r4, lsl #30
   15874:	andeq	r7, r1, r8, lsl #30
   15878:	andeq	r7, r1, ip, lsl #30
   1587c:	andeq	r7, r1, r0, lsl pc
   15880:	andeq	r7, r1, r4, lsl pc
   15884:	andeq	r7, r1, r8, lsl pc
   15888:	ldr	r0, [pc, #12]	; 1589c <free_token_boolean_op@@Base+0x308>
   1588c:	ldr	r1, [pc, #12]	; 158a0 <free_token_boolean_op@@Base+0x30c>
   15890:	add	r0, pc, r0
   15894:	add	r1, pc, r1
   15898:	b	1a698 <__gcov_flush@@Base+0xb4>
   1589c:			; <UNDEFINED> instruction: 0xfffffd98
   158a0:			; <UNDEFINED> instruction: 0xfffffe24
	...

000158b0 <init_ast_base@@Base>:
   158b0:	ldr	ip, [pc, #56]	; 158f0 <init_ast_base@@Base+0x40>
   158b4:	add	r3, pc, #36	; 0x24
   158b8:	vld1.64	{d16-d17}, [r3 :128]
   158bc:	add	ip, pc, ip
   158c0:	vld1.64	{d18-d19}, [ip :128]
   158c4:	vadd.i64	q8, q9, q8
   158c8:	vst1.64	{d16-d17}, [ip :128]
   158cc:	stm	r0, {r1, r2}
   158d0:	bx	lr
   158d4:	nop	{0}
   158d8:	nop	{0}
   158dc:	nop	{0}
   158e0:	andeq	r0, r0, r1
   158e4:	andeq	r0, r0, r0
   158e8:	andeq	r0, r0, r1
   158ec:	andeq	r0, r0, r0
   158f0:	andeq	r7, r1, ip, lsl #29
   158f4:	nop	{0}
   158f8:	nop	{0}
   158fc:	nop	{0}

00015900 <init_ast_base_single@@Base>:
   15900:	ldr	ip, [pc, #72]	; 15950 <init_ast_base_single@@Base+0x50>
   15904:	ldr	r3, [pc, #72]	; 15954 <init_ast_base_single@@Base+0x54>
   15908:	add	r2, pc, #48	; 0x30
   1590c:	vld1.64	{d16-d17}, [r2 :128]
   15910:	mov	r2, #0
   15914:	add	ip, pc, ip
   15918:	add	r3, pc, r3
   1591c:	vld1.64	{d18-d19}, [r3 :128]
   15920:	vld1.64	{d20-d21}, [ip :128]
   15924:	vadd.i64	q9, q9, q8
   15928:	vadd.i64	q8, q10, q8
   1592c:	vst1.64	{d18-d19}, [r3 :128]
   15930:	vst1.64	{d16-d17}, [ip :128]
   15934:	stm	r0, {r1, r2}
   15938:	bx	lr
   1593c:	nop	{0}
   15940:	andeq	r0, r0, r1
   15944:	andeq	r0, r0, r0
   15948:	andeq	r0, r0, r1
   1594c:	andeq	r0, r0, r0
   15950:	andeq	r7, r1, r4, lsr lr
   15954:	andeq	r7, r1, r0, asr #28
   15958:	nop	{0}
   1595c:	nop	{0}

00015960 <init_node_id@@Base>:
   15960:	ldr	ip, [pc, #104]	; 159d0 <init_node_id@@Base+0x70>
   15964:	add	r3, pc, #84	; 0x54
   15968:	vld1.64	{d16-d17}, [r3 :128]
   1596c:	add	ip, pc, ip
   15970:	vld1.64	{d18-d19}, [ip :128]
   15974:	ldr	r3, [pc, #88]	; 159d4 <init_node_id@@Base+0x74>
   15978:	ldr	r2, [pc, #88]	; 159d8 <init_node_id@@Base+0x78>
   1597c:	add	r2, pc, r2
   15980:	add	r3, pc, r3
   15984:	vadd.i64	q9, q9, q8
   15988:	vld1.64	{d20-d21}, [r2 :128]
   1598c:	vld1.64	{d22-d23}, [r3 :128]
   15990:	vst1.64	{d18-d19}, [ip :128]
   15994:	vadd.i64	q10, q10, q8
   15998:	vadd.i64	q8, q11, q8
   1599c:	vst1.64	{d20-d21}, [r2 :128]
   159a0:	mov	r2, #0
   159a4:	vst1.64	{d16-d17}, [r3 :128]
   159a8:	str	r2, [r0]
   159ac:	str	r2, [r0, #4]
   159b0:	str	r1, [r0, #8]
   159b4:	bx	lr
   159b8:	nop	{0}
   159bc:	nop	{0}
   159c0:	andeq	r0, r0, r1
   159c4:	andeq	r0, r0, r0
   159c8:	andeq	r0, r0, r1
   159cc:	andeq	r0, r0, r0
   159d0:	strdeq	r7, [r1], -ip
   159d4:	andeq	r7, r1, r8, asr #27
   159d8:	ldrdeq	r7, [r1], -ip
   159dc:	nop	{0}

000159e0 <init_node_int@@Base>:
   159e0:	ldr	ip, [pc, #104]	; 15a50 <init_node_int@@Base+0x70>
   159e4:	add	r3, pc, #84	; 0x54
   159e8:	vld1.64	{d16-d17}, [r3 :128]
   159ec:	add	ip, pc, ip
   159f0:	vld1.64	{d18-d19}, [ip :128]
   159f4:	ldr	r3, [pc, #88]	; 15a54 <init_node_int@@Base+0x74>
   159f8:	ldr	r2, [pc, #88]	; 15a58 <init_node_int@@Base+0x78>
   159fc:	add	r3, pc, r3
   15a00:	add	r2, pc, r2
   15a04:	vadd.i64	q9, q9, q8
   15a08:	vld1.64	{d20-d21}, [r2 :128]
   15a0c:	vld1.64	{d22-d23}, [r3 :128]
   15a10:	vst1.64	{d18-d19}, [ip :128]
   15a14:	vadd.i64	q10, q10, q8
   15a18:	vadd.i64	q8, q11, q8
   15a1c:	vst1.64	{d20-d21}, [r2 :128]
   15a20:	vst1.64	{d16-d17}, [r3 :128]
   15a24:	mov	r3, #1
   15a28:	mov	r2, #0
   15a2c:	str	r3, [r0]
   15a30:	str	r2, [r0, #4]
   15a34:	str	r1, [r0, #8]
   15a38:	bx	lr
   15a3c:	nop	{0}
   15a40:	andeq	r0, r0, r1
   15a44:	andeq	r0, r0, r0
   15a48:	andeq	r0, r0, r1
   15a4c:	andeq	r0, r0, r0
   15a50:	andeq	r7, r1, ip, lsl #27
   15a54:	andeq	r7, r1, ip, asr #26
   15a58:	andeq	r7, r1, r8, asr sp
   15a5c:	nop	{0}

00015a60 <init_node_function@@Base>:
   15a60:	push	{fp, lr}
   15a64:	mov	fp, sp
   15a68:	ldr	ip, [pc, #112]	; 15ae0 <init_node_function@@Base+0x80>
   15a6c:	add	r3, pc, #92	; 0x5c
   15a70:	vld1.64	{d16-d17}, [r3 :128]
   15a74:	add	ip, pc, ip
   15a78:	vld1.64	{d18-d19}, [ip :128]
   15a7c:	ldr	lr, [pc, #96]	; 15ae4 <init_node_function@@Base+0x84>
   15a80:	ldr	r3, [pc, #96]	; 15ae8 <init_node_function@@Base+0x88>
   15a84:	add	r3, pc, r3
   15a88:	add	lr, pc, lr
   15a8c:	vadd.i64	q9, q9, q8
   15a90:	vld1.64	{d20-d21}, [r3 :128]
   15a94:	vld1.64	{d22-d23}, [lr :128]
   15a98:	vst1.64	{d18-d19}, [ip :128]
   15a9c:	mov	ip, #0
   15aa0:	vadd.i64	q10, q10, q8
   15aa4:	vadd.i64	q8, q11, q8
   15aa8:	vst1.64	{d20-d21}, [r3 :128]
   15aac:	mov	r3, #2
   15ab0:	vst1.64	{d16-d17}, [lr :128]
   15ab4:	stm	r0, {r3, ip}
   15ab8:	str	r1, [r0, #8]
   15abc:	str	r2, [r0, #12]
   15ac0:	pop	{fp, pc}
   15ac4:	nop	{0}
   15ac8:	nop	{0}
   15acc:	nop	{0}
   15ad0:	andeq	r0, r0, r1
   15ad4:	andeq	r0, r0, r0
   15ad8:	andeq	r0, r0, r1
   15adc:	andeq	r0, r0, r0
   15ae0:	andeq	r7, r1, r4, lsl sp
   15ae4:	andeq	r7, r1, r0, asr #25
   15ae8:	ldrdeq	r7, [r1], -r4
   15aec:	nop	{0}

00015af0 <init_node_return@@Base>:
   15af0:	ldr	ip, [pc, #104]	; 15b60 <init_node_return@@Base+0x70>
   15af4:	add	r3, pc, #84	; 0x54
   15af8:	vld1.64	{d16-d17}, [r3 :128]
   15afc:	add	ip, pc, ip
   15b00:	vld1.64	{d18-d19}, [ip :128]
   15b04:	ldr	r3, [pc, #88]	; 15b64 <init_node_return@@Base+0x74>
   15b08:	ldr	r2, [pc, #88]	; 15b68 <init_node_return@@Base+0x78>
   15b0c:	add	r3, pc, r3
   15b10:	add	r2, pc, r2
   15b14:	vadd.i64	q9, q9, q8
   15b18:	vld1.64	{d20-d21}, [r2 :128]
   15b1c:	vld1.64	{d22-d23}, [r3 :128]
   15b20:	vst1.64	{d18-d19}, [ip :128]
   15b24:	vadd.i64	q10, q10, q8
   15b28:	vadd.i64	q8, q11, q8
   15b2c:	vst1.64	{d20-d21}, [r2 :128]
   15b30:	vst1.64	{d16-d17}, [r3 :128]
   15b34:	mov	r3, #3
   15b38:	mov	r2, #0
   15b3c:	str	r3, [r0]
   15b40:	str	r2, [r0, #4]
   15b44:	str	r1, [r0, #8]
   15b48:	bx	lr
   15b4c:	nop	{0}
   15b50:	andeq	r0, r0, r1
   15b54:	andeq	r0, r0, r0
   15b58:	andeq	r0, r0, r1
   15b5c:	andeq	r0, r0, r0
   15b60:	muleq	r1, ip, ip
   15b64:	andeq	r7, r1, ip, lsr ip
   15b68:	andeq	r7, r1, r8, asr #24
   15b6c:	nop	{0}

00015b70 <init_node_if@@Base>:
   15b70:	push	{r4, sl, fp, lr}
   15b74:	add	fp, sp, #8
   15b78:	ldr	ip, [pc, #96]	; 15be0 <init_node_if@@Base+0x70>
   15b7c:	add	lr, pc, #76	; 0x4c
   15b80:	vld1.64	{d16-d17}, [lr :128]
   15b84:	add	ip, pc, ip
   15b88:	vld1.64	{d18-d19}, [ip :128]
   15b8c:	ldr	lr, [pc, #80]	; 15be4 <init_node_if@@Base+0x74>
   15b90:	ldr	r4, [pc, #80]	; 15be8 <init_node_if@@Base+0x78>
   15b94:	add	r4, pc, r4
   15b98:	add	lr, pc, lr
   15b9c:	vadd.i64	q9, q9, q8
   15ba0:	vld1.64	{d20-d21}, [r4 :128]
   15ba4:	vld1.64	{d22-d23}, [lr :128]
   15ba8:	vst1.64	{d18-d19}, [ip :128]
   15bac:	mov	ip, #0
   15bb0:	vadd.i64	q10, q10, q8
   15bb4:	vadd.i64	q8, q11, q8
   15bb8:	vst1.64	{d20-d21}, [r4 :128]
   15bbc:	mov	r4, #4
   15bc0:	vst1.64	{d16-d17}, [lr :128]
   15bc4:	stmia	r0!, {r4, ip}
   15bc8:	stm	r0, {r1, r2, r3}
   15bcc:	pop	{r4, sl, fp, pc}
   15bd0:	andeq	r0, r0, r1
   15bd4:	andeq	r0, r0, r0
   15bd8:	andeq	r0, r0, r1
   15bdc:	andeq	r0, r0, r0
   15be0:	andeq	r7, r1, r4, lsr #24
   15be4:			; <UNDEFINED> instruction: 0x00017bb0
   15be8:	andeq	r7, r1, r4, asr #23
   15bec:	nop	{0}

00015bf0 <init_node_boolean_operator@@Base>:
   15bf0:	push	{r4, sl, fp, lr}
   15bf4:	add	fp, sp, #8
   15bf8:	ldr	ip, [pc, #112]	; 15c70 <init_node_boolean_operator@@Base+0x80>
   15bfc:	add	lr, pc, #92	; 0x5c
   15c00:	vld1.64	{d16-d17}, [lr :128]
   15c04:	add	ip, pc, ip
   15c08:	vld1.64	{d18-d19}, [ip :128]
   15c0c:	ldr	lr, [pc, #96]	; 15c74 <init_node_boolean_operator@@Base+0x84>
   15c10:	ldr	r4, [pc, #96]	; 15c78 <init_node_boolean_operator@@Base+0x88>
   15c14:	add	r4, pc, r4
   15c18:	add	lr, pc, lr
   15c1c:	vadd.i64	q9, q9, q8
   15c20:	vld1.64	{d20-d21}, [r4 :128]
   15c24:	vld1.64	{d22-d23}, [lr :128]
   15c28:	vst1.64	{d18-d19}, [ip :128]
   15c2c:	mov	ip, #0
   15c30:	vadd.i64	q10, q10, q8
   15c34:	vadd.i64	q8, q11, q8
   15c38:	vst1.64	{d20-d21}, [r4 :128]
   15c3c:	mov	r4, #5
   15c40:	vst1.64	{d16-d17}, [lr :128]
   15c44:	stm	r0, {r4, ip}
   15c48:	str	r2, [r0, #8]
   15c4c:	str	r3, [r0, #12]
   15c50:	str	r1, [r0, #16]
   15c54:	pop	{r4, sl, fp, pc}
   15c58:	nop	{0}
   15c5c:	nop	{0}
   15c60:	andeq	r0, r0, r1
   15c64:	andeq	r0, r0, r0
   15c68:	andeq	r0, r0, r1
   15c6c:	andeq	r0, r0, r0
   15c70:			; <UNDEFINED> instruction: 0x00017bb4
   15c74:	andeq	r7, r1, r0, lsr fp
   15c78:	andeq	r7, r1, r4, asr #22

00015c7c <free_node@@Base>:
   15c7c:	push	{r4, r5, r6, sl, fp, lr}
   15c80:	add	fp, sp, #16
   15c84:	mov	r4, r0
   15c88:	ldr	r0, [pc, #876]	; 15ffc <free_node@@Base+0x380>
   15c8c:	mov	r1, #0
   15c90:	add	r0, pc, r0
   15c94:	str	r1, [r0]
   15c98:	ldr	r5, [pc, #864]	; 16000 <free_node@@Base+0x384>
   15c9c:	ldr	r0, [pc, #864]	; 16004 <free_node@@Base+0x388>
   15ca0:	ldr	r0, [pc, r0]
   15ca4:	add	r5, pc, r5
   15ca8:	adds	r0, r0, #1
   15cac:	str	r0, [r5]
   15cb0:	ldr	r0, [r5, #4]
   15cb4:	adc	r0, r0, #0
   15cb8:	str	r0, [r5, #4]
   15cbc:	ldr	r0, [r4]
   15cc0:	cmp	r0, #5
   15cc4:	bhi	15fc0 <free_node@@Base+0x344>
   15cc8:	add	r1, pc, #4
   15ccc:	ldr	r0, [r1, r0, lsl #2]
   15cd0:	add	pc, r1, r0
   15cd4:	andeq	r0, r0, r8, lsl r0
   15cd8:	andeq	r0, r0, r8, lsr r1
   15cdc:	andeq	r0, r0, r8, lsl #1
   15ce0:	andeq	r0, r0, r4, ror r1
   15ce4:	andeq	r0, r0, r4, asr r0
   15ce8:	andeq	r0, r0, ip, lsl r2
   15cec:	ldr	r0, [pc, #788]	; 16008 <free_node@@Base+0x38c>
   15cf0:	add	r0, pc, r0
   15cf4:	add	r1, r0, #4
   15cf8:	ldr	r0, [pc, #780]	; 1600c <free_node@@Base+0x390>
   15cfc:	add	r0, pc, r0
   15d00:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15d04:	ldrd	r0, [r5, #64]	; 0x40
   15d08:	ldr	r6, [pc, #768]	; 16010 <free_node@@Base+0x394>
   15d0c:	ldr	r2, [pc, #768]	; 16014 <free_node@@Base+0x398>
   15d10:	ldr	r2, [pc, r2]
   15d14:	adds	r0, r0, #1
   15d18:	add	r6, pc, r6
   15d1c:	adc	r1, r1, #0
   15d20:	strd	r0, [r5, #64]	; 0x40
   15d24:	b	15e80 <free_node@@Base+0x204>
   15d28:	ldr	r0, [pc, #824]	; 16068 <free_node@@Base+0x3ec>
   15d2c:	add	r0, pc, r0
   15d30:	add	r1, r0, #20
   15d34:	ldr	r0, [pc, #816]	; 1606c <free_node@@Base+0x3f0>
   15d38:	add	r0, pc, r0
   15d3c:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15d40:	ldrd	r0, [r5, #96]	; 0x60
   15d44:	adds	r0, r0, #1
   15d48:	adc	r1, r1, #0
   15d4c:	strd	r0, [r5, #96]	; 0x60
   15d50:	mov	r0, r4
   15d54:	bl	162e8 <free_node_if@@Base>
   15d58:	b	15fac <free_node@@Base+0x330>
   15d5c:	ldr	r0, [pc, #708]	; 16028 <free_node@@Base+0x3ac>
   15d60:	add	r0, pc, r0
   15d64:	add	r1, r0, #12
   15d68:	ldr	r0, [pc, #700]	; 1602c <free_node@@Base+0x3b0>
   15d6c:	add	r0, pc, r0
   15d70:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15d74:	ldrd	r0, [r5, #80]	; 0x50
   15d78:	ldr	r6, [pc, #688]	; 16030 <free_node@@Base+0x3b4>
   15d7c:	ldr	r2, [pc, #688]	; 16034 <free_node@@Base+0x3b8>
   15d80:	adds	r0, r0, #1
   15d84:	add	r6, pc, r6
   15d88:	ldr	r2, [pc, r2]
   15d8c:	adc	r1, r1, #0
   15d90:	strd	r0, [r5, #80]	; 0x50
   15d94:	ldr	r0, [r6, #4]
   15d98:	mov	r1, #16
   15d9c:	adds	r2, r2, #1
   15da0:	str	r2, [r6]
   15da4:	mov	r2, r6
   15da8:	adc	r0, r0, #0
   15dac:	str	r0, [r6, #4]
   15db0:	ldr	r0, [r4, #4]
   15db4:	cmp	r0, #0
   15db8:	movwne	r1, #8
   15dbc:	ldr	r1, [r2, r1]!
   15dc0:	adds	r1, r1, #1
   15dc4:	str	r1, [r2]
   15dc8:	ldr	r1, [r2, #4]
   15dcc:	adc	r1, r1, #0
   15dd0:	cmp	r0, #0
   15dd4:	str	r1, [r2, #4]
   15dd8:	beq	15df0 <free_node@@Base+0x174>
   15ddc:	ldrd	r2, [r6, #24]
   15de0:	adds	r2, r2, #1
   15de4:	adc	r3, r3, #0
   15de8:	strd	r2, [r6, #24]
   15dec:	bl	15c7c <free_node@@Base>
   15df0:	ldrd	r0, [r6, #32]
   15df4:	adds	r0, r0, #1
   15df8:	adc	r1, r1, #0
   15dfc:	strd	r0, [r6, #32]
   15e00:	ldr	r0, [r4, #8]
   15e04:	bl	11e6c <free@plt>
   15e08:	b	15fa4 <free_node@@Base+0x328>
   15e0c:	ldr	r0, [pc, #516]	; 16018 <free_node@@Base+0x39c>
   15e10:	add	r0, pc, r0
   15e14:	add	r1, r0, #8
   15e18:	ldr	r0, [pc, #508]	; 1601c <free_node@@Base+0x3a0>
   15e1c:	add	r0, pc, r0
   15e20:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15e24:	ldrd	r0, [r5, #72]	; 0x48
   15e28:	ldr	r6, [pc, #496]	; 16020 <free_node@@Base+0x3a4>
   15e2c:	ldr	r2, [pc, #496]	; 16024 <free_node@@Base+0x3a8>
   15e30:	ldr	r2, [pc, r2]
   15e34:	adds	r0, r0, #1
   15e38:	add	r6, pc, r6
   15e3c:	adc	r1, r1, #0
   15e40:	strd	r0, [r5, #72]	; 0x48
   15e44:	b	15e80 <free_node@@Base+0x204>
   15e48:	ldr	r0, [pc, #488]	; 16038 <free_node@@Base+0x3bc>
   15e4c:	add	r0, pc, r0
   15e50:	add	r1, r0, #16
   15e54:	ldr	r0, [pc, #480]	; 1603c <free_node@@Base+0x3c0>
   15e58:	add	r0, pc, r0
   15e5c:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15e60:	ldrd	r0, [r5, #88]	; 0x58
   15e64:	ldr	r6, [pc, #468]	; 16040 <free_node@@Base+0x3c4>
   15e68:	ldr	r2, [pc, #468]	; 16044 <free_node@@Base+0x3c8>
   15e6c:	ldr	r2, [pc, r2]
   15e70:	adds	r0, r0, #1
   15e74:	add	r6, pc, r6
   15e78:	adc	r1, r1, #0
   15e7c:	strd	r0, [r5, #88]	; 0x58
   15e80:	adds	r2, r2, #1
   15e84:	str	r2, [r6]
   15e88:	ldr	r0, [r6, #4]
   15e8c:	mov	r1, #16
   15e90:	mov	r2, r6
   15e94:	adc	r0, r0, #0
   15e98:	str	r0, [r6, #4]
   15e9c:	ldr	r0, [r4, #4]
   15ea0:	cmp	r0, #0
   15ea4:	movwne	r1, #8
   15ea8:	ldr	r1, [r2, r1]!
   15eac:	adds	r1, r1, #1
   15eb0:	str	r1, [r2]
   15eb4:	ldr	r1, [r2, #4]
   15eb8:	adc	r1, r1, #0
   15ebc:	cmp	r0, #0
   15ec0:	str	r1, [r2, #4]
   15ec4:	beq	15edc <free_node@@Base+0x260>
   15ec8:	ldrd	r2, [r6, #24]
   15ecc:	adds	r2, r2, #1
   15ed0:	adc	r3, r3, #0
   15ed4:	strd	r2, [r6, #24]
   15ed8:	bl	15c7c <free_node@@Base>
   15edc:	ldrd	r0, [r6, #32]
   15ee0:	adds	r0, r0, #1
   15ee4:	adc	r1, r1, #0
   15ee8:	strd	r0, [r6, #32]
   15eec:	b	15fa4 <free_node@@Base+0x328>
   15ef0:	ldr	r0, [pc, #336]	; 16048 <free_node@@Base+0x3cc>
   15ef4:	add	r0, pc, r0
   15ef8:	add	r1, r0, #24
   15efc:	ldr	r0, [pc, #328]	; 1604c <free_node@@Base+0x3d0>
   15f00:	add	r0, pc, r0
   15f04:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15f08:	ldrd	r0, [r5, #104]	; 0x68
   15f0c:	ldr	r6, [pc, #316]	; 16050 <free_node@@Base+0x3d4>
   15f10:	ldr	r2, [pc, #316]	; 16054 <free_node@@Base+0x3d8>
   15f14:	adds	r0, r0, #1
   15f18:	add	r6, pc, r6
   15f1c:	ldr	r2, [pc, r2]
   15f20:	adc	r1, r1, #0
   15f24:	strd	r0, [r5, #104]	; 0x68
   15f28:	ldr	r0, [r6, #4]
   15f2c:	mov	r1, #16
   15f30:	adds	r2, r2, #1
   15f34:	str	r2, [r6]
   15f38:	mov	r2, r6
   15f3c:	adc	r0, r0, #0
   15f40:	str	r0, [r6, #4]
   15f44:	ldr	r0, [r4, #4]
   15f48:	cmp	r0, #0
   15f4c:	movwne	r1, #8
   15f50:	ldr	r1, [r2, r1]!
   15f54:	adds	r1, r1, #1
   15f58:	str	r1, [r2]
   15f5c:	ldr	r1, [r2, #4]
   15f60:	adc	r1, r1, #0
   15f64:	cmp	r0, #0
   15f68:	str	r1, [r2, #4]
   15f6c:	beq	15f84 <free_node@@Base+0x308>
   15f70:	ldrd	r2, [r6, #24]
   15f74:	adds	r2, r2, #1
   15f78:	adc	r3, r3, #0
   15f7c:	strd	r2, [r6, #24]
   15f80:	bl	15c7c <free_node@@Base>
   15f84:	ldrd	r0, [r6, #32]
   15f88:	adds	r0, r0, #1
   15f8c:	adc	r1, r1, #0
   15f90:	strd	r0, [r6, #32]
   15f94:	ldr	r0, [r4, #8]
   15f98:	bl	15c7c <free_node@@Base>
   15f9c:	ldr	r0, [r4, #12]
   15fa0:	bl	15c7c <free_node@@Base>
   15fa4:	mov	r0, r4
   15fa8:	bl	11e6c <free@plt>
   15fac:	ldrd	r0, [r5, #112]	; 0x70
   15fb0:	adds	r0, r0, #1
   15fb4:	adc	r1, r1, #0
   15fb8:	strd	r0, [r5, #112]	; 0x70
   15fbc:	pop	{r4, r5, r6, sl, fp, pc}
   15fc0:	ldr	r0, [pc, #144]	; 16058 <free_node@@Base+0x3dc>
   15fc4:	ldr	r1, [pc, #144]	; 1605c <free_node@@Base+0x3e0>
   15fc8:	add	r0, pc, r0
   15fcc:	add	r1, pc, r1
   15fd0:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   15fd4:	ldr	r0, [pc, #132]	; 16060 <free_node@@Base+0x3e4>
   15fd8:	mov	r1, #31
   15fdc:	mov	r2, #1
   15fe0:	ldr	r0, [pc, r0]
   15fe4:	ldr	r3, [r0]
   15fe8:	ldr	r0, [pc, #116]	; 16064 <free_node@@Base+0x3e8>
   15fec:	add	r0, pc, r0
   15ff0:	bl	11ec0 <fwrite@plt>
   15ff4:	mov	r0, #1
   15ff8:	bl	11f2c <exit@plt>
   15ffc:	andeq	r7, r1, ip, asr #8
   16000:	andeq	r7, r1, r4, lsr #22
   16004:	andeq	r7, r1, r8, lsr #22
   16008:	andeq	r6, r1, r8, asr #29
   1600c:	andeq	r7, r1, r0, ror #7
   16010:	andeq	r7, r1, r0, lsr fp
   16014:	andeq	r7, r1, r8, lsr fp
   16018:	andeq	r6, r1, r8, lsr #27
   1601c:	andeq	r7, r1, r0, asr #5
   16020:	andeq	r7, r1, r0, asr #20
   16024:	andeq	r7, r1, r8, asr #20
   16028:	andeq	r6, r1, r8, asr lr
   1602c:	andeq	r7, r1, r0, ror r3
   16030:	andeq	r7, r1, r4, lsr #22
   16034:	andeq	r7, r1, r0, lsr #22
   16038:	andeq	r6, r1, ip, ror #26
   1603c:	andeq	r7, r1, r4, lsl #5
   16040:	andeq	r7, r1, r4, ror #20
   16044:	andeq	r7, r1, ip, ror #20
   16048:	andeq	r6, r1, r4, asr #25
   1604c:	ldrdeq	r7, [r1], -ip
   16050:	andeq	r7, r1, r0, lsr #20
   16054:	andeq	r7, r1, ip, lsl sl
   16058:	andeq	r7, r1, r4, lsl r1
   1605c:	andeq	r6, r1, ip, ror #23
   16060:	ldrdeq	r7, [r1], -r8
   16064:	andeq	r5, r0, ip, lsr #13
   16068:	andeq	r6, r1, ip, lsl #29
   1606c:	andeq	r7, r1, r4, lsr #7

00016070 <free_node_id@@Base>:
   16070:	push	{r4, r5, fp, lr}
   16074:	add	fp, sp, #8
   16078:	ldr	r5, [pc, #132]	; 16104 <free_node_id@@Base+0x94>
   1607c:	mov	r4, r0
   16080:	ldr	r0, [pc, #128]	; 16108 <free_node_id@@Base+0x98>
   16084:	mov	r1, #16
   16088:	ldr	r0, [pc, r0]
   1608c:	add	r5, pc, r5
   16090:	mov	r2, r5
   16094:	adds	r0, r0, #1
   16098:	str	r0, [r5]
   1609c:	ldr	r0, [r5, #4]
   160a0:	adc	r0, r0, #0
   160a4:	str	r0, [r5, #4]
   160a8:	ldr	r0, [r4, #4]
   160ac:	cmp	r0, #0
   160b0:	movwne	r1, #8
   160b4:	ldr	r1, [r2, r1]!
   160b8:	adds	r1, r1, #1
   160bc:	str	r1, [r2]
   160c0:	ldr	r1, [r2, #4]
   160c4:	adc	r1, r1, #0
   160c8:	cmp	r0, #0
   160cc:	str	r1, [r2, #4]
   160d0:	beq	160e8 <free_node_id@@Base+0x78>
   160d4:	ldrd	r2, [r5, #24]
   160d8:	adds	r2, r2, #1
   160dc:	adc	r3, r3, #0
   160e0:	strd	r2, [r5, #24]
   160e4:	bl	15c7c <free_node@@Base>
   160e8:	ldrd	r0, [r5, #32]
   160ec:	adds	r0, r0, #1
   160f0:	adc	r1, r1, #0
   160f4:	strd	r0, [r5, #32]
   160f8:	mov	r0, r4
   160fc:	pop	{r4, r5, fp, lr}
   16100:	b	11e6c <free@plt>
   16104:			; <UNDEFINED> instruction: 0x000177bc
   16108:	andeq	r7, r1, r0, asr #15

0001610c <free_node_int@@Base>:
   1610c:	push	{r4, r5, fp, lr}
   16110:	add	fp, sp, #8
   16114:	ldr	r5, [pc, #132]	; 161a0 <free_node_int@@Base+0x94>
   16118:	mov	r4, r0
   1611c:	ldr	r0, [pc, #128]	; 161a4 <free_node_int@@Base+0x98>
   16120:	mov	r1, #16
   16124:	ldr	r0, [pc, r0]
   16128:	add	r5, pc, r5
   1612c:	mov	r2, r5
   16130:	adds	r0, r0, #1
   16134:	str	r0, [r5]
   16138:	ldr	r0, [r5, #4]
   1613c:	adc	r0, r0, #0
   16140:	str	r0, [r5, #4]
   16144:	ldr	r0, [r4, #4]
   16148:	cmp	r0, #0
   1614c:	movwne	r1, #8
   16150:	ldr	r1, [r2, r1]!
   16154:	adds	r1, r1, #1
   16158:	str	r1, [r2]
   1615c:	ldr	r1, [r2, #4]
   16160:	adc	r1, r1, #0
   16164:	cmp	r0, #0
   16168:	str	r1, [r2, #4]
   1616c:	beq	16184 <free_node_int@@Base+0x78>
   16170:	ldrd	r2, [r5, #24]
   16174:	adds	r2, r2, #1
   16178:	adc	r3, r3, #0
   1617c:	strd	r2, [r5, #24]
   16180:	bl	15c7c <free_node@@Base>
   16184:	ldrd	r0, [r5, #32]
   16188:	adds	r0, r0, #1
   1618c:	adc	r1, r1, #0
   16190:	strd	r0, [r5, #32]
   16194:	mov	r0, r4
   16198:	pop	{r4, r5, fp, lr}
   1619c:	b	11e6c <free@plt>
   161a0:	andeq	r7, r1, r0, asr r7
   161a4:	andeq	r7, r1, r4, asr r7

000161a8 <free_node_function@@Base>:
   161a8:	push	{r4, r5, fp, lr}
   161ac:	add	fp, sp, #8
   161b0:	ldr	r5, [pc, #140]	; 16244 <free_node_function@@Base+0x9c>
   161b4:	mov	r4, r0
   161b8:	ldr	r0, [pc, #136]	; 16248 <free_node_function@@Base+0xa0>
   161bc:	mov	r1, #16
   161c0:	ldr	r0, [pc, r0]
   161c4:	add	r5, pc, r5
   161c8:	mov	r2, r5
   161cc:	adds	r0, r0, #1
   161d0:	str	r0, [r5]
   161d4:	ldr	r0, [r5, #4]
   161d8:	adc	r0, r0, #0
   161dc:	str	r0, [r5, #4]
   161e0:	ldr	r0, [r4, #4]
   161e4:	cmp	r0, #0
   161e8:	movwne	r1, #8
   161ec:	ldr	r1, [r2, r1]!
   161f0:	adds	r1, r1, #1
   161f4:	str	r1, [r2]
   161f8:	ldr	r1, [r2, #4]
   161fc:	adc	r1, r1, #0
   16200:	cmp	r0, #0
   16204:	str	r1, [r2, #4]
   16208:	beq	16220 <free_node_function@@Base+0x78>
   1620c:	ldrd	r2, [r5, #24]
   16210:	adds	r2, r2, #1
   16214:	adc	r3, r3, #0
   16218:	strd	r2, [r5, #24]
   1621c:	bl	15c7c <free_node@@Base>
   16220:	ldrd	r0, [r5, #32]
   16224:	adds	r0, r0, #1
   16228:	adc	r1, r1, #0
   1622c:	strd	r0, [r5, #32]
   16230:	ldr	r0, [r4, #8]
   16234:	bl	11e6c <free@plt>
   16238:	mov	r0, r4
   1623c:	pop	{r4, r5, fp, lr}
   16240:	b	11e6c <free@plt>
   16244:	andeq	r7, r1, r4, ror #13
   16248:	andeq	r7, r1, r8, ror #13

0001624c <free_node_return@@Base>:
   1624c:	push	{r4, r5, fp, lr}
   16250:	add	fp, sp, #8
   16254:	ldr	r5, [pc, #132]	; 162e0 <free_node_return@@Base+0x94>
   16258:	mov	r4, r0
   1625c:	ldr	r0, [pc, #128]	; 162e4 <free_node_return@@Base+0x98>
   16260:	mov	r1, #16
   16264:	ldr	r0, [pc, r0]
   16268:	add	r5, pc, r5
   1626c:	mov	r2, r5
   16270:	adds	r0, r0, #1
   16274:	str	r0, [r5]
   16278:	ldr	r0, [r5, #4]
   1627c:	adc	r0, r0, #0
   16280:	str	r0, [r5, #4]
   16284:	ldr	r0, [r4, #4]
   16288:	cmp	r0, #0
   1628c:	movwne	r1, #8
   16290:	ldr	r1, [r2, r1]!
   16294:	adds	r1, r1, #1
   16298:	str	r1, [r2]
   1629c:	ldr	r1, [r2, #4]
   162a0:	adc	r1, r1, #0
   162a4:	cmp	r0, #0
   162a8:	str	r1, [r2, #4]
   162ac:	beq	162c4 <free_node_return@@Base+0x78>
   162b0:	ldrd	r2, [r5, #24]
   162b4:	adds	r2, r2, #1
   162b8:	adc	r3, r3, #0
   162bc:	strd	r2, [r5, #24]
   162c0:	bl	15c7c <free_node@@Base>
   162c4:	ldrd	r0, [r5, #32]
   162c8:	adds	r0, r0, #1
   162cc:	adc	r1, r1, #0
   162d0:	strd	r0, [r5, #32]
   162d4:	mov	r0, r4
   162d8:	pop	{r4, r5, fp, lr}
   162dc:	b	11e6c <free@plt>
   162e0:	andeq	r7, r1, r0, ror r6
   162e4:	andeq	r7, r1, r4, ror r6

000162e8 <free_node_if@@Base>:
   162e8:	push	{r4, r5, fp, lr}
   162ec:	add	fp, sp, #8
   162f0:	ldr	r5, [pc, #156]	; 16394 <free_node_if@@Base+0xac>
   162f4:	mov	r4, r0
   162f8:	ldr	r0, [pc, #152]	; 16398 <free_node_if@@Base+0xb0>
   162fc:	mov	r1, #16
   16300:	ldr	r0, [pc, r0]
   16304:	add	r5, pc, r5
   16308:	mov	r2, r5
   1630c:	adds	r0, r0, #1
   16310:	str	r0, [r5]
   16314:	ldr	r0, [r5, #4]
   16318:	adc	r0, r0, #0
   1631c:	str	r0, [r5, #4]
   16320:	ldr	r0, [r4, #4]
   16324:	cmp	r0, #0
   16328:	movwne	r1, #8
   1632c:	ldr	r1, [r2, r1]!
   16330:	adds	r1, r1, #1
   16334:	str	r1, [r2]
   16338:	ldr	r1, [r2, #4]
   1633c:	adc	r1, r1, #0
   16340:	cmp	r0, #0
   16344:	str	r1, [r2, #4]
   16348:	beq	16360 <free_node_if@@Base+0x78>
   1634c:	ldrd	r2, [r5, #24]
   16350:	adds	r2, r2, #1
   16354:	adc	r3, r3, #0
   16358:	strd	r2, [r5, #24]
   1635c:	bl	15c7c <free_node@@Base>
   16360:	ldrd	r0, [r5, #32]
   16364:	adds	r0, r0, #1
   16368:	adc	r1, r1, #0
   1636c:	strd	r0, [r5, #32]
   16370:	ldr	r0, [r4, #8]
   16374:	bl	15c7c <free_node@@Base>
   16378:	ldr	r0, [r4, #12]
   1637c:	bl	15c7c <free_node@@Base>
   16380:	ldr	r0, [r4, #16]
   16384:	bl	15c7c <free_node@@Base>
   16388:	mov	r0, r4
   1638c:	pop	{r4, r5, fp, lr}
   16390:	b	11e6c <free@plt>
   16394:	andeq	r7, r1, r4, lsl #12
   16398:	andeq	r7, r1, r8, lsl #12

0001639c <free_node_boolean_operator@@Base>:
   1639c:	push	{r4, r5, fp, lr}
   163a0:	add	fp, sp, #8
   163a4:	ldr	r5, [pc, #148]	; 16440 <free_node_boolean_operator@@Base+0xa4>
   163a8:	mov	r4, r0
   163ac:	ldr	r0, [pc, #144]	; 16444 <free_node_boolean_operator@@Base+0xa8>
   163b0:	mov	r1, #16
   163b4:	ldr	r0, [pc, r0]
   163b8:	add	r5, pc, r5
   163bc:	mov	r2, r5
   163c0:	adds	r0, r0, #1
   163c4:	str	r0, [r5]
   163c8:	ldr	r0, [r5, #4]
   163cc:	adc	r0, r0, #0
   163d0:	str	r0, [r5, #4]
   163d4:	ldr	r0, [r4, #4]
   163d8:	cmp	r0, #0
   163dc:	movwne	r1, #8
   163e0:	ldr	r1, [r2, r1]!
   163e4:	adds	r1, r1, #1
   163e8:	str	r1, [r2]
   163ec:	ldr	r1, [r2, #4]
   163f0:	adc	r1, r1, #0
   163f4:	cmp	r0, #0
   163f8:	str	r1, [r2, #4]
   163fc:	beq	16414 <free_node_boolean_operator@@Base+0x78>
   16400:	ldrd	r2, [r5, #24]
   16404:	adds	r2, r2, #1
   16408:	adc	r3, r3, #0
   1640c:	strd	r2, [r5, #24]
   16410:	bl	15c7c <free_node@@Base>
   16414:	ldrd	r0, [r5, #32]
   16418:	adds	r0, r0, #1
   1641c:	adc	r1, r1, #0
   16420:	strd	r0, [r5, #32]
   16424:	ldr	r0, [r4, #8]
   16428:	bl	15c7c <free_node@@Base>
   1642c:	ldr	r0, [r4, #12]
   16430:	bl	15c7c <free_node@@Base>
   16434:	mov	r0, r4
   16438:	pop	{r4, r5, fp, lr}
   1643c:	b	11e6c <free@plt>
   16440:	andeq	r7, r1, r0, lsl #11
   16444:	andeq	r7, r1, r4, lsl #11

00016448 <get_boolean_op_value@@Base>:
   16448:	push	{r4, r5, r6, sl, fp, lr}
   1644c:	add	fp, sp, #16
   16450:	ldr	r6, [pc, #908]	; 167e4 <get_boolean_op_value@@Base+0x39c>
   16454:	ldr	r1, [pc, #908]	; 167e8 <get_boolean_op_value@@Base+0x3a0>
   16458:	ldr	r1, [pc, r1]
   1645c:	add	r6, pc, r6
   16460:	adds	r1, r1, #1
   16464:	str	r1, [r6]
   16468:	ldr	r1, [r6, #4]
   1646c:	adc	r1, r1, #0
   16470:	str	r1, [r6, #4]
   16474:	mov	r1, #2
   16478:	ldr	r4, [r0, #4]
   1647c:	mov	r0, r4
   16480:	bl	11fb0 <strnlen@plt>
   16484:	mov	r1, #16
   16488:	cmp	r0, #2
   1648c:	mov	r2, r6
   16490:	movweq	r1, #8
   16494:	ldr	r1, [r2, r1]!
   16498:	adds	r1, r1, #1
   1649c:	str	r1, [r2]
   164a0:	ldr	r1, [r2, #4]
   164a4:	adc	r1, r1, #0
   164a8:	cmp	r0, #2
   164ac:	str	r1, [r2, #4]
   164b0:	bne	16668 <get_boolean_op_value@@Base+0x220>
   164b4:	ldr	r1, [pc, #816]	; 167ec <get_boolean_op_value@@Base+0x3a4>
   164b8:	mov	r0, r4
   164bc:	mov	r2, #2
   164c0:	add	r1, pc, r1
   164c4:	bl	11ff8 <strncmp@plt>
   164c8:	mov	r1, #32
   164cc:	cmp	r0, #0
   164d0:	mov	r2, r6
   164d4:	movweq	r1, #24
   164d8:	ldr	r1, [r2, r1]!
   164dc:	adds	r1, r1, #1
   164e0:	str	r1, [r2]
   164e4:	ldr	r1, [r2, #4]
   164e8:	adc	r1, r1, #0
   164ec:	cmp	r0, #0
   164f0:	str	r1, [r2, #4]
   164f4:	beq	166c4 <get_boolean_op_value@@Base+0x27c>
   164f8:	ldr	r1, [pc, #752]	; 167f0 <get_boolean_op_value@@Base+0x3a8>
   164fc:	mov	r0, r4
   16500:	mov	r2, #2
   16504:	add	r1, pc, r1
   16508:	bl	11ff8 <strncmp@plt>
   1650c:	mov	r1, #56	; 0x38
   16510:	cmp	r0, #0
   16514:	mov	r2, r6
   16518:	movweq	r1, #48	; 0x30
   1651c:	ldr	r1, [r2, r1]!
   16520:	adds	r1, r1, #1
   16524:	str	r1, [r2]
   16528:	ldr	r1, [r2, #4]
   1652c:	adc	r1, r1, #0
   16530:	cmp	r0, #0
   16534:	str	r1, [r2, #4]
   16538:	beq	1673c <get_boolean_op_value@@Base+0x2f4>
   1653c:	ldr	r1, [pc, #688]	; 167f4 <get_boolean_op_value@@Base+0x3ac>
   16540:	mov	r0, r4
   16544:	mov	r2, #2
   16548:	mov	r5, #2
   1654c:	add	r1, pc, r1
   16550:	bl	11ff8 <strncmp@plt>
   16554:	mov	r1, #80	; 0x50
   16558:	cmp	r0, #0
   1655c:	mov	r2, r6
   16560:	movweq	r1, #72	; 0x48
   16564:	ldr	r1, [r2, r1]!
   16568:	adds	r1, r1, #1
   1656c:	str	r1, [r2]
   16570:	ldr	r1, [r2, #4]
   16574:	adc	r1, r1, #0
   16578:	cmp	r0, #0
   1657c:	str	r1, [r2, #4]
   16580:	beq	16754 <get_boolean_op_value@@Base+0x30c>
   16584:	ldr	r1, [pc, #620]	; 167f8 <get_boolean_op_value@@Base+0x3b0>
   16588:	mov	r0, r4
   1658c:	mov	r2, #2
   16590:	add	r1, pc, r1
   16594:	bl	11ff8 <strncmp@plt>
   16598:	mov	r1, #104	; 0x68
   1659c:	cmp	r0, #0
   165a0:	mov	r2, r6
   165a4:	movweq	r1, #96	; 0x60
   165a8:	ldr	r1, [r2, r1]!
   165ac:	adds	r1, r1, #1
   165b0:	str	r1, [r2]
   165b4:	ldr	r1, [r2, #4]
   165b8:	adc	r1, r1, #0
   165bc:	cmp	r0, #0
   165c0:	str	r1, [r2, #4]
   165c4:	beq	16768 <get_boolean_op_value@@Base+0x320>
   165c8:	ldr	r1, [pc, #556]	; 167fc <get_boolean_op_value@@Base+0x3b4>
   165cc:	mov	r0, r4
   165d0:	mov	r2, #2
   165d4:	add	r1, pc, r1
   165d8:	bl	11ff8 <strncmp@plt>
   165dc:	mov	r1, #128	; 0x80
   165e0:	cmp	r0, #0
   165e4:	mov	r2, r6
   165e8:	movweq	r1, #120	; 0x78
   165ec:	ldr	r1, [r2, r1]!
   165f0:	adds	r1, r1, #1
   165f4:	str	r1, [r2]
   165f8:	ldr	r1, [r2, #4]
   165fc:	adc	r1, r1, #0
   16600:	cmp	r0, #0
   16604:	str	r1, [r2, #4]
   16608:	beq	16780 <get_boolean_op_value@@Base+0x338>
   1660c:	ldr	r1, [pc, #492]	; 16800 <get_boolean_op_value@@Base+0x3b8>
   16610:	mov	r0, r4
   16614:	mov	r2, #2
   16618:	add	r1, pc, r1
   1661c:	bl	11ff8 <strncmp@plt>
   16620:	mov	r1, #152	; 0x98
   16624:	cmp	r0, #0
   16628:	mov	r2, r6
   1662c:	movweq	r1, #144	; 0x90
   16630:	ldr	r1, [r2, r1]!
   16634:	adds	r1, r1, #1
   16638:	str	r1, [r2]
   1663c:	ldr	r1, [r2, #4]
   16640:	adc	r1, r1, #0
   16644:	cmp	r0, #0
   16648:	str	r1, [r2, #4]
   1664c:	bne	167c0 <get_boolean_op_value@@Base+0x378>
   16650:	ldrd	r0, [r6, #160]	; 0xa0
   16654:	mov	r5, #5
   16658:	adds	r0, r0, #1
   1665c:	adc	r1, r1, #0
   16660:	strd	r0, [r6, #160]	; 0xa0
   16664:	b	16794 <get_boolean_op_value@@Base+0x34c>
   16668:	ldr	r0, [pc, #404]	; 16804 <get_boolean_op_value@@Base+0x3bc>
   1666c:	mov	r1, #0
   16670:	add	r0, pc, r0
   16674:	str	r1, [r0]
   16678:	ldrb	r0, [r4]
   1667c:	cmp	r0, #62	; 0x3e
   16680:	beq	1670c <get_boolean_op_value@@Base+0x2c4>
   16684:	cmp	r0, #60	; 0x3c
   16688:	beq	166dc <get_boolean_op_value@@Base+0x294>
   1668c:	cmp	r0, #33	; 0x21
   16690:	bne	167ac <get_boolean_op_value@@Base+0x364>
   16694:	ldr	r0, [pc, #364]	; 16808 <get_boolean_op_value@@Base+0x3c0>
   16698:	add	r0, pc, r0
   1669c:	add	r1, r0, #4
   166a0:	ldr	r0, [pc, #356]	; 1680c <get_boolean_op_value@@Base+0x3c4>
   166a4:	add	r0, pc, r0
   166a8:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   166ac:	ldrd	r0, [r6, #200]	; 0xc8
   166b0:	mov	r5, #8
   166b4:	adds	r0, r0, #1
   166b8:	adc	r1, r1, #0
   166bc:	strd	r0, [r6, #200]	; 0xc8
   166c0:	b	16794 <get_boolean_op_value@@Base+0x34c>
   166c4:	ldrd	r0, [r6, #40]	; 0x28
   166c8:	mov	r5, #0
   166cc:	adds	r0, r0, #1
   166d0:	adc	r1, r1, #0
   166d4:	strd	r0, [r6, #40]	; 0x28
   166d8:	b	16794 <get_boolean_op_value@@Base+0x34c>
   166dc:	ldr	r0, [pc, #324]	; 16828 <get_boolean_op_value@@Base+0x3e0>
   166e0:	add	r0, pc, r0
   166e4:	add	r1, r0, #8
   166e8:	ldr	r0, [pc, #316]	; 1682c <get_boolean_op_value@@Base+0x3e4>
   166ec:	add	r0, pc, r0
   166f0:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   166f4:	ldrd	r0, [r6, #208]	; 0xd0
   166f8:	mov	r5, #6
   166fc:	adds	r0, r0, #1
   16700:	adc	r1, r1, #0
   16704:	strd	r0, [r6, #208]	; 0xd0
   16708:	b	16794 <get_boolean_op_value@@Base+0x34c>
   1670c:	ldr	r0, [pc, #252]	; 16810 <get_boolean_op_value@@Base+0x3c8>
   16710:	add	r0, pc, r0
   16714:	add	r1, r0, #12
   16718:	ldr	r0, [pc, #244]	; 16814 <get_boolean_op_value@@Base+0x3cc>
   1671c:	add	r0, pc, r0
   16720:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   16724:	ldrd	r0, [r6, #216]	; 0xd8
   16728:	mov	r5, #7
   1672c:	adds	r0, r0, #1
   16730:	adc	r1, r1, #0
   16734:	strd	r0, [r6, #216]	; 0xd8
   16738:	b	16794 <get_boolean_op_value@@Base+0x34c>
   1673c:	ldrd	r0, [r6, #64]	; 0x40
   16740:	mov	r5, #1
   16744:	adds	r0, r0, #1
   16748:	adc	r1, r1, #0
   1674c:	strd	r0, [r6, #64]	; 0x40
   16750:	b	16794 <get_boolean_op_value@@Base+0x34c>
   16754:	ldrd	r0, [r6, #88]	; 0x58
   16758:	adds	r0, r0, #1
   1675c:	adc	r1, r1, #0
   16760:	strd	r0, [r6, #88]	; 0x58
   16764:	b	16794 <get_boolean_op_value@@Base+0x34c>
   16768:	ldrd	r0, [r6, #112]	; 0x70
   1676c:	mov	r5, #3
   16770:	adds	r0, r0, #1
   16774:	adc	r1, r1, #0
   16778:	strd	r0, [r6, #112]	; 0x70
   1677c:	b	16794 <get_boolean_op_value@@Base+0x34c>
   16780:	ldrd	r0, [r6, #136]	; 0x88
   16784:	mov	r5, #4
   16788:	adds	r0, r0, #1
   1678c:	adc	r1, r1, #0
   16790:	strd	r0, [r6, #136]	; 0x88
   16794:	ldrd	r0, [r6, #224]	; 0xe0
   16798:	adds	r0, r0, #1
   1679c:	adc	r1, r1, #0
   167a0:	strd	r0, [r6, #224]	; 0xe0
   167a4:	mov	r0, r5
   167a8:	pop	{r4, r5, r6, sl, fp, pc}
   167ac:	ldr	r0, [pc, #100]	; 16818 <get_boolean_op_value@@Base+0x3d0>
   167b0:	ldr	r1, [pc, #100]	; 1681c <get_boolean_op_value@@Base+0x3d4>
   167b4:	add	r0, pc, r0
   167b8:	add	r1, pc, r1
   167bc:	bl	16830 <get_boolean_op_value@@Base+0x3e8>
   167c0:	ldr	r0, [pc, #88]	; 16820 <get_boolean_op_value@@Base+0x3d8>
   167c4:	mov	r2, r4
   167c8:	ldr	r0, [pc, r0]
   167cc:	ldr	r0, [r0]
   167d0:	ldr	r1, [pc, #76]	; 16824 <get_boolean_op_value@@Base+0x3dc>
   167d4:	add	r1, pc, r1
   167d8:	bl	11f50 <fprintf@plt>
   167dc:	mov	r0, #1
   167e0:	bl	11f2c <exit@plt>
   167e4:	andeq	r7, r1, ip, lsl #10
   167e8:	andeq	r7, r1, r0, lsl r5
   167ec:	strdeq	r5, [r0], -r8
   167f0:			; <UNDEFINED> instruction: 0x000051b7
   167f4:	andeq	r5, r0, r2, ror r1
   167f8:	andeq	r5, r0, r1, lsr r1
   167fc:	strdeq	r5, [r0], -r0
   16800:	andeq	r5, r0, pc, lsr #1
   16804:	andeq	r6, r1, r0, ror sl
   16808:	andeq	r6, r1, ip, lsr r5
   1680c:	andeq	r6, r1, ip, lsr sl
   16810:	andeq	r6, r1, r4, asr #9
   16814:	andeq	r6, r1, r4, asr #19
   16818:	andeq	r6, r1, ip, lsr #18
   1681c:	andeq	r6, r1, ip, lsl r4
   16820:	strdeq	r6, [r1], -r0
   16824:	strdeq	r4, [r0], -r6
   16828:	strdeq	r6, [r1], -r4
   1682c:	strdeq	r6, [r1], -r4
   16830:	ldr	r0, [r0]
   16834:	cmn	r0, #1
   16838:	ldrne	r0, [r1, r0, lsl #2]
   1683c:	cmpne	r0, #0
   16840:	bne	16848 <get_boolean_op_value@@Base+0x400>
   16844:	bx	lr
   16848:	ldrd	r2, [r0]
   1684c:	adds	r2, r2, #1
   16850:	adc	r3, r3, #0
   16854:	strd	r2, [r0]
   16858:	bx	lr
   1685c:	push	{r4, r5, r6, lr}
   16860:	sub	sp, sp, #8
   16864:	ldr	r0, [pc, #112]	; 168dc <get_boolean_op_value@@Base+0x494>
   16868:	ldr	r1, [pc, #112]	; 168e0 <get_boolean_op_value@@Base+0x498>
   1686c:	movw	r2, #23410	; 0x5b72
   16870:	movt	r2, #13184	; 0x3380
   16874:	add	r0, pc, r0
   16878:	add	r1, pc, r1
   1687c:	bl	17ce8 <read_boolean_unary_expression@@Base+0x434>
   16880:	ldr	r0, [pc, #92]	; 168e4 <get_boolean_op_value@@Base+0x49c>
   16884:	ldr	r6, [pc, #92]	; 168e8 <get_boolean_op_value@@Base+0x4a0>
   16888:	mov	r5, #0
   1688c:	add	r0, pc, r0
   16890:	add	r6, pc, r6
   16894:	add	r4, r0, #4
   16898:	mov	r3, r6
   1689c:	ldr	r0, [r3, r5]!
   168a0:	ldr	r1, [r3, #16]
   168a4:	str	r1, [sp]
   168a8:	ldmib	r3, {r1, r2}
   168ac:	ldrb	r3, [r3, #12]
   168b0:	bl	1844c <read_boolean_unary_expression@@Base+0xb98>
   168b4:	ldrd	r0, [r4, #-4]
   168b8:	bl	18d00 <read_boolean_unary_expression@@Base+0x144c>
   168bc:	add	r5, r5, #20
   168c0:	add	r4, r4, #8
   168c4:	cmp	r5, #320	; 0x140
   168c8:	bne	16898 <get_boolean_op_value@@Base+0x450>
   168cc:	bl	1947c <read_boolean_unary_expression@@Base+0x1bc8>
   168d0:	add	sp, sp, #8
   168d4:	pop	{r4, r5, r6, lr}
   168d8:	b	1a1e8 <read_boolean_unary_expression@@Base+0x2934>
   168dc:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   168e0:	andeq	r4, r0, r1, lsl #17
   168e4:	muleq	r1, ip, r4
   168e8:	andeq	r6, r1, r8, asr r3
   168ec:	push	{fp, lr}
   168f0:	bl	1685c <get_boolean_op_value@@Base+0x414>
   168f4:	ldr	r2, [pc, #364]	; 16a68 <get_boolean_op_value@@Base+0x620>
   168f8:	mov	r0, #0
   168fc:	vmov.i32	q8, #0	; 0x00000000
   16900:	add	r2, pc, r2
   16904:	add	r1, r2, #16
   16908:	str	r0, [r2, #32]
   1690c:	vst1.64	{d16-d17}, [r1 :128]
   16910:	ldr	r3, [pc, #340]	; 16a6c <get_boolean_op_value@@Base+0x624>
   16914:	add	r3, pc, r3
   16918:	add	r1, r3, #96	; 0x60
   1691c:	str	r0, [r3, #112]	; 0x70
   16920:	vst1.64	{d16-d17}, [r1 :128]
   16924:	add	r1, r3, #80	; 0x50
   16928:	vst1.64	{d16-d17}, [r1 :128]
   1692c:	add	r1, r3, #64	; 0x40
   16930:	vst1.64	{d16-d17}, [r1 :128]
   16934:	add	r1, r3, #48	; 0x30
   16938:	vst1.64	{d16-d17}, [r1 :128]
   1693c:	add	r1, r3, #32
   16940:	vst1.64	{d16-d17}, [r1 :128]
   16944:	add	r1, r3, #16
   16948:	vst1.64	{d16-d17}, [r1 :128]
   1694c:	ldr	r1, [pc, #284]	; 16a70 <get_boolean_op_value@@Base+0x628>
   16950:	add	r1, pc, r1
   16954:	vst1.64	{d16-d17}, [r1 :128]
   16958:	ldr	r1, [pc, #276]	; 16a74 <get_boolean_op_value@@Base+0x62c>
   1695c:	add	r1, pc, r1
   16960:	vst1.64	{d16-d17}, [r1 :128]
   16964:	ldr	r1, [pc, #268]	; 16a78 <get_boolean_op_value@@Base+0x630>
   16968:	add	r1, pc, r1
   1696c:	vst1.64	{d16-d17}, [r1 :128]
   16970:	ldr	r1, [pc, #260]	; 16a7c <get_boolean_op_value@@Base+0x634>
   16974:	add	r1, pc, r1
   16978:	vst1.64	{d16-d17}, [r1 :128]
   1697c:	ldr	r1, [pc, #252]	; 16a80 <get_boolean_op_value@@Base+0x638>
   16980:	add	r1, pc, r1
   16984:	vst1.64	{d16-d17}, [r1 :128]
   16988:	ldr	r1, [pc, #244]	; 16a84 <get_boolean_op_value@@Base+0x63c>
   1698c:	add	r1, pc, r1
   16990:	vst1.64	{d16-d17}, [r1 :128]
   16994:	ldr	r1, [pc, #236]	; 16a88 <get_boolean_op_value@@Base+0x640>
   16998:	add	r1, pc, r1
   1699c:	vst1.64	{d16-d17}, [r1 :128]
   169a0:	ldr	r1, [pc, #228]	; 16a8c <get_boolean_op_value@@Base+0x644>
   169a4:	add	r1, pc, r1
   169a8:	vst1.64	{d16-d17}, [r1 :128]
   169ac:	mov	r1, #36	; 0x24
   169b0:	vst1.64	{d16-d17}, [r2 :128], r1
   169b4:	str	r0, [r2]
   169b8:	mov	r2, #116	; 0x74
   169bc:	vst1.64	{d16-d17}, [r3 :128], r2
   169c0:	str	r0, [r3]
   169c4:	ldr	r2, [pc, #196]	; 16a90 <get_boolean_op_value@@Base+0x648>
   169c8:	add	r2, pc, r2
   169cc:	add	r3, r2, #16
   169d0:	str	r0, [r2, #32]
   169d4:	vst1.64	{d16-d17}, [r2 :128], r1
   169d8:	vst1.64	{d16-d17}, [r3 :128]
   169dc:	str	r0, [r2]
   169e0:	ldr	r2, [pc, #172]	; 16a94 <get_boolean_op_value@@Base+0x64c>
   169e4:	add	r2, pc, r2
   169e8:	add	r3, r2, #16
   169ec:	str	r0, [r2, #32]
   169f0:	vst1.64	{d16-d17}, [r2 :128], r1
   169f4:	vst1.64	{d16-d17}, [r3 :128]
   169f8:	str	r0, [r2]
   169fc:	ldr	r2, [pc, #148]	; 16a98 <get_boolean_op_value@@Base+0x650>
   16a00:	add	r2, pc, r2
   16a04:	add	r3, r2, #16
   16a08:	str	r0, [r2, #32]
   16a0c:	vst1.64	{d16-d17}, [r2 :128], r1
   16a10:	vst1.64	{d16-d17}, [r3 :128]
   16a14:	str	r0, [r2]
   16a18:	ldr	r2, [pc, #124]	; 16a9c <get_boolean_op_value@@Base+0x654>
   16a1c:	add	r2, pc, r2
   16a20:	add	r3, r2, #16
   16a24:	str	r0, [r2, #32]
   16a28:	vst1.64	{d16-d17}, [r2 :128], r1
   16a2c:	vst1.64	{d16-d17}, [r3 :128]
   16a30:	str	r0, [r2]
   16a34:	ldr	r2, [pc, #100]	; 16aa0 <get_boolean_op_value@@Base+0x658>
   16a38:	add	r2, pc, r2
   16a3c:	add	r3, r2, #16
   16a40:	str	r0, [r2, #32]
   16a44:	vst1.64	{d16-d17}, [r2 :128], r1
   16a48:	mov	r1, #0
   16a4c:	str	r0, [r2]
   16a50:	vst1.64	{d16-d17}, [r3 :128]
   16a54:	mov	r2, #232	; 0xe8
   16a58:	ldr	r0, [pc, #68]	; 16aa4 <get_boolean_op_value@@Base+0x65c>
   16a5c:	add	r0, pc, r0
   16a60:	bl	11f80 <memset@plt>
   16a64:	pop	{fp, pc}
   16a68:	andeq	r6, r1, r8, asr #30
   16a6c:			; <UNDEFINED> instruction: 0x00016eb4
   16a70:	andeq	r6, r1, r8, lsl #28
   16a74:	andeq	r6, r1, ip, ror #27
   16a78:	andeq	r6, r1, r0, lsl #28
   16a7c:	andeq	r6, r1, r4, lsl #28
   16a80:	andeq	r6, r1, r8, lsl #28
   16a84:	andeq	r6, r1, ip, lsl #28
   16a88:	andeq	r6, r1, r0, lsl lr
   16a8c:	andeq	r6, r1, r4, lsl lr
   16a90:			; <UNDEFINED> instruction: 0x00016eb0
   16a94:	andeq	r6, r1, r4, asr #29
   16a98:	ldrdeq	r6, [r1], -r8
   16a9c:	andeq	r6, r1, ip, ror #29
   16aa0:	andeq	r6, r1, r0, lsl #30
   16aa4:	andeq	r6, r1, ip, lsl #30
   16aa8:	ldr	r0, [pc, #12]	; 16abc <get_boolean_op_value@@Base+0x674>
   16aac:	ldr	r1, [pc, #12]	; 16ac0 <get_boolean_op_value@@Base+0x678>
   16ab0:	add	r0, pc, r0
   16ab4:	add	r1, pc, r1
   16ab8:	b	1a698 <__gcov_flush@@Base+0xb4>
   16abc:			; <UNDEFINED> instruction: 0xfffffda4
   16ac0:			; <UNDEFINED> instruction: 0xfffffe30
	...

00016ad0 <init_grammar@@Base>:
   16ad0:	ldr	r2, [pc, #56]	; 16b10 <init_grammar@@Base+0x40>
   16ad4:	add	r3, pc, #36	; 0x24
   16ad8:	vld1.64	{d16-d17}, [r3 :128]
   16adc:	add	r2, pc, r2
   16ae0:	vld1.64	{d18-d19}, [r2 :128]
   16ae4:	vadd.i64	q8, q9, q8
   16ae8:	vst1.64	{d16-d17}, [r2 :128]
   16aec:	str	r1, [r0]
   16af0:	bx	lr
   16af4:	nop	{0}
   16af8:	nop	{0}
   16afc:	nop	{0}
   16b00:	andeq	r0, r0, r1
   16b04:	andeq	r0, r0, r0
   16b08:	andeq	r0, r0, r1
   16b0c:	andeq	r0, r0, r0
   16b10:	andeq	r6, r1, ip, ror pc
   16b14:	nop	{0}
   16b18:	nop	{0}
   16b1c:	nop	{0}

00016b20 <destroy_grammar@@Base>:
   16b20:	ldr	r0, [pc, #40]	; 16b50 <destroy_grammar@@Base+0x30>
   16b24:	add	r1, pc, #20
   16b28:	vld1.64	{d16-d17}, [r1 :128]
   16b2c:	add	r0, pc, r0
   16b30:	vld1.64	{d18-d19}, [r0 :128]
   16b34:	vadd.i64	q8, q9, q8
   16b38:	vst1.64	{d16-d17}, [r0 :128]
   16b3c:	bx	lr
   16b40:	andeq	r0, r0, r1
   16b44:	andeq	r0, r0, r0
   16b48:	andeq	r0, r0, r1
   16b4c:	andeq	r0, r0, r0
   16b50:	andeq	r6, r1, ip, lsr pc
   16b54:	nop	{0}
   16b58:	nop	{0}
   16b5c:	nop	{0}

00016b60 <build_ast@@Base>:
   16b60:	ldr	r1, [pc, #40]	; 16b90 <build_ast@@Base+0x30>
   16b64:	add	r2, pc, #20
   16b68:	vld1.64	{d16-d17}, [r2 :128]
   16b6c:	add	r1, pc, r1
   16b70:	vld1.64	{d18-d19}, [r1 :128]
   16b74:	vadd.i64	q8, q9, q8
   16b78:	vst1.64	{d16-d17}, [r1 :128]
   16b7c:	b	16b94 <read_function_ast_node@@Base>
   16b80:	andeq	r0, r0, r1
   16b84:	andeq	r0, r0, r0
   16b88:	andeq	r0, r0, r1
   16b8c:	andeq	r0, r0, r0
   16b90:	andeq	r6, r1, ip, lsl #30

00016b94 <read_function_ast_node@@Base>:
   16b94:	push	{r4, r5, r6, r7, fp, lr}
   16b98:	add	fp, sp, #16
   16b9c:	ldr	r7, [pc, #468]	; 16d78 <read_function_ast_node@@Base+0x1e4>
   16ba0:	mov	r4, r0
   16ba4:	ldr	r0, [pc, #464]	; 16d7c <read_function_ast_node@@Base+0x1e8>
   16ba8:	ldr	r0, [pc, r0]
   16bac:	add	r7, pc, r7
   16bb0:	adds	r0, r0, #1
   16bb4:	str	r0, [r7]
   16bb8:	ldr	r0, [r7, #4]
   16bbc:	adc	r0, r0, #0
   16bc0:	str	r0, [r7, #4]
   16bc4:	ldr	r0, [r4]
   16bc8:	bl	12110 <next@@Base>
   16bcc:	ldr	r1, [r0]
   16bd0:	mov	r2, #16
   16bd4:	mov	r3, r7
   16bd8:	cmp	r1, #0
   16bdc:	movwne	r2, #8
   16be0:	ldr	r2, [r3, r2]!
   16be4:	adds	r2, r2, #1
   16be8:	str	r2, [r3]
   16bec:	ldr	r2, [r3, #4]
   16bf0:	adc	r2, r2, #0
   16bf4:	cmp	r1, #0
   16bf8:	str	r2, [r3, #4]
   16bfc:	beq	16c18 <read_function_ast_node@@Base+0x84>
   16c00:	ldrd	r0, [r7, #24]
   16c04:	mov	r4, #0
   16c08:	adds	r0, r0, #1
   16c0c:	adc	r1, r1, #0
   16c10:	strd	r0, [r7, #24]
   16c14:	b	16d60 <read_function_ast_node@@Base+0x1cc>
   16c18:	bl	152a0 <free_token_int_type@@Base>
   16c1c:	ldr	r0, [r4]
   16c20:	bl	12110 <next@@Base>
   16c24:	mov	r5, r0
   16c28:	ldr	r0, [r0]
   16c2c:	mov	r1, #40	; 0x28
   16c30:	mov	r2, r7
   16c34:	cmp	r0, #2
   16c38:	movwne	r1, #32
   16c3c:	ldr	r1, [r2, r1]!
   16c40:	adds	r1, r1, #1
   16c44:	str	r1, [r2]
   16c48:	ldr	r1, [r2, #4]
   16c4c:	adc	r1, r1, #0
   16c50:	cmp	r0, #2
   16c54:	str	r1, [r2, #4]
   16c58:	beq	16c74 <read_function_ast_node@@Base+0xe0>
   16c5c:	ldrd	r0, [r7, #48]	; 0x30
   16c60:	mov	r4, #0
   16c64:	adds	r0, r0, #1
   16c68:	adc	r1, r1, #0
   16c6c:	strd	r0, [r7, #48]	; 0x30
   16c70:	b	16d60 <read_function_ast_node@@Base+0x1cc>
   16c74:	ldr	r0, [r4]
   16c78:	bl	12110 <next@@Base>
   16c7c:	ldr	r1, [r0]
   16c80:	mov	r2, #64	; 0x40
   16c84:	mov	r3, r7
   16c88:	cmp	r1, #3
   16c8c:	movwne	r2, #56	; 0x38
   16c90:	ldr	r2, [r3, r2]!
   16c94:	adds	r2, r2, #1
   16c98:	str	r2, [r3]
   16c9c:	ldr	r2, [r3, #4]
   16ca0:	adc	r2, r2, #0
   16ca4:	cmp	r1, #3
   16ca8:	str	r2, [r3, #4]
   16cac:	beq	16cc8 <read_function_ast_node@@Base+0x134>
   16cb0:	ldrd	r0, [r7, #72]	; 0x48
   16cb4:	mov	r4, #0
   16cb8:	adds	r0, r0, #1
   16cbc:	adc	r1, r1, #0
   16cc0:	strd	r0, [r7, #72]	; 0x48
   16cc4:	b	16d60 <read_function_ast_node@@Base+0x1cc>
   16cc8:	bl	15360 <free_token_opar@@Base>
   16ccc:	ldr	r0, [r4]
   16cd0:	bl	12110 <next@@Base>
   16cd4:	ldr	r1, [r0]
   16cd8:	mov	r2, #88	; 0x58
   16cdc:	mov	r3, r7
   16ce0:	cmp	r1, #4
   16ce4:	movwne	r2, #80	; 0x50
   16ce8:	ldr	r2, [r3, r2]!
   16cec:	adds	r2, r2, #1
   16cf0:	str	r2, [r3]
   16cf4:	ldr	r2, [r3, #4]
   16cf8:	adc	r2, r2, #0
   16cfc:	cmp	r1, #4
   16d00:	str	r2, [r3, #4]
   16d04:	beq	16d20 <read_function_ast_node@@Base+0x18c>
   16d08:	ldrd	r0, [r7, #96]	; 0x60
   16d0c:	mov	r4, #0
   16d10:	adds	r0, r0, #1
   16d14:	adc	r1, r1, #0
   16d18:	strd	r0, [r7, #96]	; 0x60
   16d1c:	b	16d60 <read_function_ast_node@@Base+0x1cc>
   16d20:	ldrd	r2, [r7, #104]	; 0x68
   16d24:	adds	r2, r2, #1
   16d28:	adc	r3, r3, #0
   16d2c:	strd	r2, [r7, #104]	; 0x68
   16d30:	bl	153a0 <free_token_cpar@@Base>
   16d34:	mov	r0, r4
   16d38:	bl	16d80 <read_body@@Base>
   16d3c:	mov	r6, r0
   16d40:	mov	r0, #16
   16d44:	bl	11ef0 <malloc@plt>
   16d48:	ldr	r1, [r5, #4]
   16d4c:	mov	r2, r6
   16d50:	mov	r4, r0
   16d54:	bl	15a60 <init_node_function@@Base>
   16d58:	mov	r0, r5
   16d5c:	bl	15320 <free_token_function@@Base>
   16d60:	ldrd	r0, [r7, #112]	; 0x70
   16d64:	adds	r0, r0, #1
   16d68:	adc	r1, r1, #0
   16d6c:	strd	r0, [r7, #112]	; 0x70
   16d70:	mov	r0, r4
   16d74:	pop	{r4, r5, r6, r7, fp, pc}
   16d78:	ldrdeq	r6, [r1], -ip
   16d7c:	andeq	r6, r1, r0, ror #29

00016d80 <read_body@@Base>:
   16d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d84:	add	fp, sp, #28
   16d88:	sub	sp, sp, #4
   16d8c:	ldr	r4, [pc, #644]	; 17018 <read_body@@Base+0x298>
   16d90:	mov	sl, r0
   16d94:	ldr	r0, [pc, #640]	; 1701c <read_body@@Base+0x29c>
   16d98:	ldr	r0, [pc, r0]
   16d9c:	add	r4, pc, r4
   16da0:	adds	r0, r0, #1
   16da4:	str	r0, [r4]
   16da8:	ldr	r0, [r4, #4]
   16dac:	adc	r0, r0, #0
   16db0:	str	r0, [r4, #4]
   16db4:	ldr	r0, [sl]
   16db8:	bl	12110 <next@@Base>
   16dbc:	ldr	r1, [r0]
   16dc0:	mov	r2, #16
   16dc4:	mov	r3, r4
   16dc8:	cmp	r1, #5
   16dcc:	movwne	r2, #8
   16dd0:	ldr	r2, [r3, r2]!
   16dd4:	adds	r2, r2, #1
   16dd8:	str	r2, [r3]
   16ddc:	ldr	r2, [r3, #4]
   16de0:	adc	r2, r2, #0
   16de4:	cmp	r1, #5
   16de8:	str	r2, [r3, #4]
   16dec:	beq	16e08 <read_body@@Base+0x88>
   16df0:	ldrd	r0, [r4, #24]
   16df4:	mov	r6, #0
   16df8:	adds	r0, r0, #1
   16dfc:	adc	r1, r1, #0
   16e00:	strd	r0, [r4, #24]
   16e04:	b	16ffc <read_body@@Base+0x27c>
   16e08:	ldrd	r2, [r4, #32]
   16e0c:	adds	r2, r2, #1
   16e10:	adc	r3, r3, #0
   16e14:	strd	r2, [r4, #32]
   16e18:	bl	153e0 <free_token_obra@@Base>
   16e1c:	ldr	r0, [sl]
   16e20:	bl	12110 <next@@Base>
   16e24:	mov	r7, r0
   16e28:	ldr	r0, [r0]
   16e2c:	mov	r1, #48	; 0x30
   16e30:	mov	r2, r4
   16e34:	mov	r6, #0
   16e38:	cmp	r0, #6
   16e3c:	movwne	r1, #40	; 0x28
   16e40:	ldr	r1, [r2, r1]!
   16e44:	adds	r1, r1, #1
   16e48:	str	r1, [r2]
   16e4c:	ldr	r1, [r2, #4]
   16e50:	adc	r1, r1, #0
   16e54:	cmp	r0, #6
   16e58:	str	r1, [r2, #4]
   16e5c:	beq	16fb0 <read_body@@Base+0x230>
   16e60:	ldr	r9, [pc, #440]	; 17020 <read_body@@Base+0x2a0>
   16e64:	ldr	r1, [pc, #440]	; 17024 <read_body@@Base+0x2a4>
   16e68:	mov	r8, #0
   16e6c:	mov	r6, #0
   16e70:	add	r1, pc, r1
   16e74:	add	r9, pc, r9
   16e78:	add	r1, r1, #8
   16e7c:	str	r1, [sp]
   16e80:	mov	r1, #0
   16e84:	cmp	r0, #10
   16e88:	str	r1, [r9]
   16e8c:	beq	16ed0 <read_body@@Base+0x150>
   16e90:	cmp	r0, #7
   16e94:	bne	16fcc <read_body@@Base+0x24c>
   16e98:	ldr	r0, [pc, #392]	; 17028 <read_body@@Base+0x2a8>
   16e9c:	add	r0, pc, r0
   16ea0:	add	r1, r0, #4
   16ea4:	mov	r0, r9
   16ea8:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   16eac:	ldrd	r0, [r4, #80]	; 0x50
   16eb0:	adds	r0, r0, #1
   16eb4:	adc	r1, r1, #0
   16eb8:	strd	r0, [r4, #80]	; 0x50
   16ebc:	mov	r0, r7
   16ec0:	bl	15460 <free_token_return@@Base>
   16ec4:	mov	r0, sl
   16ec8:	bl	17034 <read_return_expression@@Base>
   16ecc:	b	16efc <read_body@@Base+0x17c>
   16ed0:	ldr	r1, [sp]
   16ed4:	mov	r0, r9
   16ed8:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   16edc:	ldrd	r0, [r4, #88]	; 0x58
   16ee0:	adds	r0, r0, #1
   16ee4:	adc	r1, r1, #0
   16ee8:	strd	r0, [r4, #88]	; 0x58
   16eec:	mov	r0, r7
   16ef0:	bl	15520 <free_token_if@@Base>
   16ef4:	mov	r0, sl
   16ef8:	bl	17174 <read_if_statement@@Base>
   16efc:	mov	r5, r0
   16f00:	cmp	r6, #0
   16f04:	mov	r0, #112	; 0x70
   16f08:	mov	r1, r4
   16f0c:	movwne	r0, #104	; 0x68
   16f10:	ldr	r0, [r1, r0]!
   16f14:	adds	r0, r0, #1
   16f18:	str	r0, [r1]
   16f1c:	ldr	r0, [r1, #4]
   16f20:	adc	r0, r0, #0
   16f24:	cmp	r6, #0
   16f28:	str	r0, [r1, #4]
   16f2c:	beq	16f48 <read_body@@Base+0x1c8>
   16f30:	ldrd	r0, [r4, #120]	; 0x78
   16f34:	adds	r0, r0, #1
   16f38:	adc	r1, r1, #0
   16f3c:	strd	r0, [r4, #120]	; 0x78
   16f40:	str	r5, [r8, #4]
   16f44:	b	16f5c <read_body@@Base+0x1dc>
   16f48:	ldrd	r0, [r4, #128]	; 0x80
   16f4c:	mov	r6, r5
   16f50:	adds	r0, r0, #1
   16f54:	adc	r1, r1, #0
   16f58:	strd	r0, [r4, #128]	; 0x80
   16f5c:	ldrd	r0, [r4, #136]	; 0x88
   16f60:	adds	r0, r0, #1
   16f64:	adc	r1, r1, #0
   16f68:	strd	r0, [r4, #136]	; 0x88
   16f6c:	ldr	r0, [sl]
   16f70:	bl	12110 <next@@Base>
   16f74:	mov	r7, r0
   16f78:	ldr	r0, [r0]
   16f7c:	mov	r1, #48	; 0x30
   16f80:	mov	r2, r4
   16f84:	mov	r8, r5
   16f88:	cmp	r0, #6
   16f8c:	movwne	r1, #40	; 0x28
   16f90:	ldr	r1, [r2, r1]!
   16f94:	adds	r1, r1, #1
   16f98:	str	r1, [r2]
   16f9c:	ldr	r1, [r2, #4]
   16fa0:	adc	r1, r1, #0
   16fa4:	cmp	r0, #6
   16fa8:	str	r1, [r2, #4]
   16fac:	bne	16e80 <read_body@@Base+0x100>
   16fb0:	ldrd	r0, [r4, #144]	; 0x90
   16fb4:	adds	r0, r0, #1
   16fb8:	adc	r1, r1, #0
   16fbc:	strd	r0, [r4, #144]	; 0x90
   16fc0:	mov	r0, r7
   16fc4:	bl	15420 <free_token_cbra@@Base>
   16fc8:	b	16ffc <read_body@@Base+0x27c>
   16fcc:	ldr	r0, [pc, #88]	; 1702c <read_body@@Base+0x2ac>
   16fd0:	ldr	r1, [pc, #88]	; 17030 <read_body@@Base+0x2b0>
   16fd4:	add	r0, pc, r0
   16fd8:	add	r1, pc, r1
   16fdc:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   16fe0:	ldrd	r0, [r4, #96]	; 0x60
   16fe4:	adds	r0, r0, #1
   16fe8:	adc	r1, r1, #0
   16fec:	strd	r0, [r4, #96]	; 0x60
   16ff0:	mov	r1, r7
   16ff4:	ldr	r0, [sl]
   16ff8:	bl	123d8 <push_back@@Base>
   16ffc:	ldrd	r0, [r4, #152]	; 0x98
   17000:	adds	r0, r0, #1
   17004:	adc	r1, r1, #0
   17008:	strd	r0, [r4, #152]	; 0x98
   1700c:	mov	r0, r6
   17010:	sub	sp, fp, #28
   17014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17018:	andeq	r6, r1, ip, ror #26
   1701c:	andeq	r6, r1, r0, ror sp
   17020:	andeq	r6, r1, r0, ror r2
   17024:	andeq	r5, r1, r8, lsr pc
   17028:	andeq	r5, r1, ip, lsl #30
   1702c:	andeq	r6, r1, r0, lsl r1
   17030:	ldrdeq	r5, [r1], -r0

00017034 <read_return_expression@@Base>:
   17034:	push	{r4, r5, r6, r7, fp, lr}
   17038:	add	fp, sp, #16
   1703c:	ldr	r7, [pc, #296]	; 1716c <read_return_expression@@Base+0x138>
   17040:	mov	r4, r0
   17044:	ldr	r0, [pc, #292]	; 17170 <read_return_expression@@Base+0x13c>
   17048:	ldr	r0, [pc, r0]
   1704c:	add	r7, pc, r7
   17050:	adds	r0, r0, #1
   17054:	str	r0, [r7]
   17058:	ldr	r0, [r7, #4]
   1705c:	adc	r0, r0, #0
   17060:	str	r0, [r7, #4]
   17064:	ldr	r0, [r4]
   17068:	bl	12110 <next@@Base>
   1706c:	mov	r5, r0
   17070:	ldr	r0, [r0]
   17074:	mov	r1, #16
   17078:	mov	r2, r7
   1707c:	cmp	r0, #1
   17080:	movwne	r1, #8
   17084:	ldr	r1, [r2, r1]!
   17088:	adds	r1, r1, #1
   1708c:	str	r1, [r2]
   17090:	ldr	r1, [r2, #4]
   17094:	adc	r1, r1, #0
   17098:	cmp	r0, #1
   1709c:	str	r1, [r2, #4]
   170a0:	beq	170bc <read_return_expression@@Base+0x88>
   170a4:	ldrd	r0, [r7, #24]
   170a8:	mov	r5, #0
   170ac:	adds	r0, r0, #1
   170b0:	adc	r1, r1, #0
   170b4:	strd	r0, [r7, #24]
   170b8:	b	17154 <read_return_expression@@Base+0x120>
   170bc:	mov	r0, #12
   170c0:	bl	11ef0 <malloc@plt>
   170c4:	ldr	r1, [r5, #4]
   170c8:	mov	r6, r0
   170cc:	bl	159e0 <init_node_int@@Base>
   170d0:	mov	r0, r5
   170d4:	bl	152e0 <free_token_int_value@@Base>
   170d8:	mov	r0, #12
   170dc:	bl	11ef0 <malloc@plt>
   170e0:	mov	r1, r6
   170e4:	mov	r5, r0
   170e8:	bl	15af0 <init_node_return@@Base>
   170ec:	ldr	r0, [r4]
   170f0:	bl	12110 <next@@Base>
   170f4:	ldr	r1, [r0]
   170f8:	mov	r2, #40	; 0x28
   170fc:	mov	r3, r7
   17100:	cmp	r1, #8
   17104:	movwne	r2, #32
   17108:	ldr	r2, [r3, r2]!
   1710c:	adds	r2, r2, #1
   17110:	str	r2, [r3]
   17114:	ldr	r2, [r3, #4]
   17118:	adc	r2, r2, #0
   1711c:	cmp	r1, #8
   17120:	str	r2, [r3, #4]
   17124:	beq	17140 <read_return_expression@@Base+0x10c>
   17128:	ldrd	r0, [r7, #48]	; 0x30
   1712c:	mov	r5, #0
   17130:	adds	r0, r0, #1
   17134:	adc	r1, r1, #0
   17138:	strd	r0, [r7, #48]	; 0x30
   1713c:	b	17154 <read_return_expression@@Base+0x120>
   17140:	ldrd	r2, [r7, #56]	; 0x38
   17144:	adds	r2, r2, #1
   17148:	adc	r3, r3, #0
   1714c:	strd	r2, [r7, #56]	; 0x38
   17150:	bl	154a0 <free_token_semicolon@@Base>
   17154:	ldrd	r0, [r7, #64]	; 0x40
   17158:	adds	r0, r0, #1
   1715c:	adc	r1, r1, #0
   17160:	strd	r0, [r7, #64]	; 0x40
   17164:	mov	r0, r5
   17168:	pop	{r4, r5, r6, r7, fp, pc}
   1716c:	andeq	r6, r1, ip, asr fp
   17170:	andeq	r6, r1, r0, ror #22

00017174 <read_if_statement@@Base>:
   17174:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17178:	add	fp, sp, #24
   1717c:	ldr	r5, [pc, #360]	; 172ec <read_if_statement@@Base+0x178>
   17180:	mov	r4, r0
   17184:	ldr	r0, [pc, #356]	; 172f0 <read_if_statement@@Base+0x17c>
   17188:	ldr	r0, [pc, r0]
   1718c:	add	r5, pc, r5
   17190:	adds	r0, r0, #1
   17194:	str	r0, [r5]
   17198:	ldr	r0, [r5, #4]
   1719c:	adc	r0, r0, #0
   171a0:	str	r0, [r5, #4]
   171a4:	ldr	r0, [r4]
   171a8:	bl	12110 <next@@Base>
   171ac:	ldr	r1, [r0]
   171b0:	mov	r2, #16
   171b4:	mov	r3, r5
   171b8:	cmp	r1, #3
   171bc:	movwne	r2, #8
   171c0:	ldr	r2, [r3, r2]!
   171c4:	adds	r2, r2, #1
   171c8:	str	r2, [r3]
   171cc:	ldr	r2, [r3, #4]
   171d0:	adc	r2, r2, #0
   171d4:	cmp	r1, #3
   171d8:	str	r2, [r3, #4]
   171dc:	beq	171f8 <read_if_statement@@Base+0x84>
   171e0:	ldrd	r0, [r5, #24]
   171e4:	mov	r7, #0
   171e8:	adds	r0, r0, #1
   171ec:	adc	r1, r1, #0
   171f0:	strd	r0, [r5, #24]
   171f4:	b	172d4 <read_if_statement@@Base+0x160>
   171f8:	bl	15360 <free_token_opar@@Base>
   171fc:	mov	r0, r4
   17200:	bl	17300 <read_boolean_expression@@Base>
   17204:	mov	r8, r0
   17208:	mov	r0, r4
   1720c:	bl	16d80 <read_body@@Base>
   17210:	mov	r6, r0
   17214:	ldr	r0, [r4]
   17218:	bl	12110 <next@@Base>
   1721c:	mov	r1, r0
   17220:	ldr	r0, [r0]
   17224:	mov	r2, #40	; 0x28
   17228:	mov	r3, r5
   1722c:	cmp	r0, #11
   17230:	movweq	r2, #32
   17234:	ldr	r2, [r3, r2]!
   17238:	adds	r2, r2, #1
   1723c:	str	r2, [r3]
   17240:	ldr	r2, [r3, #4]
   17244:	adc	r2, r2, #0
   17248:	cmp	r0, #11
   1724c:	str	r2, [r3, #4]
   17250:	bne	17284 <read_if_statement@@Base+0x110>
   17254:	ldr	r0, [r5, #48]	; 0x30
   17258:	ldr	r3, [r5, #52]	; 0x34
   1725c:	adds	r0, r0, #1
   17260:	str	r0, [r5, #48]	; 0x30
   17264:	adc	r3, r3, #0
   17268:	mov	r0, r1
   1726c:	str	r3, [r5, #52]	; 0x34
   17270:	bl	15560 <free_token_else@@Base>
   17274:	mov	r0, r4
   17278:	bl	16d80 <read_body@@Base>
   1727c:	mov	r4, r0
   17280:	b	172a8 <read_if_statement@@Base+0x134>
   17284:	ldr	r0, [r5, #56]	; 0x38
   17288:	ldr	r3, [r5, #60]	; 0x3c
   1728c:	adds	r0, r0, #1
   17290:	adc	r3, r3, #0
   17294:	str	r0, [r5, #56]	; 0x38
   17298:	str	r3, [r5, #60]	; 0x3c
   1729c:	ldr	r0, [r4]
   172a0:	bl	123d8 <push_back@@Base>
   172a4:	mov	r4, #0
   172a8:	ldrd	r0, [r5, #64]	; 0x40
   172ac:	adds	r0, r0, #1
   172b0:	adc	r1, r1, #0
   172b4:	strd	r0, [r5, #64]	; 0x40
   172b8:	mov	r0, #20
   172bc:	bl	11ef0 <malloc@plt>
   172c0:	mov	r1, r8
   172c4:	mov	r2, r6
   172c8:	mov	r3, r4
   172cc:	mov	r7, r0
   172d0:	bl	15b70 <init_node_if@@Base>
   172d4:	ldrd	r0, [r5, #72]	; 0x48
   172d8:	adds	r0, r0, #1
   172dc:	adc	r1, r1, #0
   172e0:	strd	r0, [r5, #72]	; 0x48
   172e4:	mov	r0, r7
   172e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172ec:	andeq	r6, r1, ip, ror #20
   172f0:	andeq	r6, r1, r0, ror sl
   172f4:	nop	{0}
   172f8:	nop	{0}
   172fc:	nop	{0}

00017300 <read_boolean_expression@@Base>:
   17300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17304:	add	fp, sp, #28
   17308:	sub	sp, sp, #12
   1730c:	ldr	r8, [pc, #524]	; 17520 <read_boolean_expression@@Base+0x220>
   17310:	mov	r4, r0
   17314:	add	r0, pc, #500	; 0x1f4
   17318:	mov	r5, #0
   1731c:	vld1.64	{d16-d17}, [r0 :128]
   17320:	str	r5, [sp, #8]
   17324:	add	r8, pc, r8
   17328:	vld1.64	{d18-d19}, [r8 :128]
   1732c:	vadd.i64	q8, q9, q8
   17330:	vst1.64	{d16-d17}, [r8 :128]
   17334:	ldr	r0, [r4]
   17338:	bl	12110 <next@@Base>
   1733c:	mov	r6, r0
   17340:	ldr	r0, [r0]
   17344:	mov	r1, #24
   17348:	mov	r2, r8
   1734c:	cmp	r0, #4
   17350:	movwne	r1, #16
   17354:	ldr	r1, [r2, r1]!
   17358:	adds	r1, r1, #1
   1735c:	str	r1, [r2]
   17360:	ldr	r1, [r2, #4]
   17364:	adc	r1, r1, #0
   17368:	cmp	r0, #4
   1736c:	str	r1, [r2, #4]
   17370:	beq	174a4 <read_boolean_expression@@Base+0x1a4>
   17374:	ldr	sl, [pc, #424]	; 17524 <read_boolean_expression@@Base+0x224>
   17378:	ldr	r1, [pc, #424]	; 17528 <read_boolean_expression@@Base+0x228>
   1737c:	mov	r9, #0
   17380:	mov	r5, #0
   17384:	add	r1, pc, r1
   17388:	add	sl, pc, sl
   1738c:	add	r1, r1, #8
   17390:	str	r1, [sp, #4]
   17394:	cmp	r0, #12
   17398:	str	r9, [sl]
   1739c:	beq	17424 <read_boolean_expression@@Base+0x124>
   173a0:	cmp	r0, #3
   173a4:	beq	173e4 <read_boolean_expression@@Base+0xe4>
   173a8:	cmp	r0, #1
   173ac:	bne	174c8 <read_boolean_expression@@Base+0x1c8>
   173b0:	ldr	r0, [pc, #372]	; 1752c <read_boolean_expression@@Base+0x22c>
   173b4:	add	r0, pc, r0
   173b8:	add	r1, r0, #4
   173bc:	mov	r0, sl
   173c0:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   173c4:	ldrd	r0, [r8, #64]	; 0x40
   173c8:	adds	r0, r0, #1
   173cc:	adc	r1, r1, #0
   173d0:	strd	r0, [r8, #64]	; 0x40
   173d4:	mov	r1, r6
   173d8:	ldr	r0, [r4]
   173dc:	bl	123d8 <push_back@@Base>
   173e0:	b	17408 <read_boolean_expression@@Base+0x108>
   173e4:	ldr	r0, [pc, #324]	; 17530 <read_boolean_expression@@Base+0x230>
   173e8:	add	r0, pc, r0
   173ec:	add	r1, r0, #12
   173f0:	mov	r0, sl
   173f4:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   173f8:	ldrd	r0, [r8, #80]	; 0x50
   173fc:	adds	r0, r0, #1
   17400:	adc	r1, r1, #0
   17404:	strd	r0, [r8, #80]	; 0x50
   17408:	mov	r0, r4
   1740c:	mov	r1, r5
   17410:	add	r2, sp, #8
   17414:	mov	r3, r7
   17418:	bl	17544 <read_single_boolean_expression@@Base>
   1741c:	mov	r5, r0
   17420:	b	17454 <read_boolean_expression@@Base+0x154>
   17424:	ldr	r1, [sp, #4]
   17428:	mov	r0, sl
   1742c:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   17430:	ldrd	r0, [r8, #72]	; 0x48
   17434:	adds	r0, r0, #1
   17438:	adc	r1, r1, #0
   1743c:	strd	r0, [r8, #72]	; 0x48
   17440:	mov	r0, r6
   17444:	bl	16448 <get_boolean_op_value@@Base>
   17448:	mov	r7, r0
   1744c:	mov	r0, #1
   17450:	str	r0, [sp, #8]
   17454:	ldrd	r0, [r8, #88]	; 0x58
   17458:	adds	r0, r0, #1
   1745c:	adc	r1, r1, #0
   17460:	strd	r0, [r8, #88]	; 0x58
   17464:	ldr	r0, [r4]
   17468:	bl	12110 <next@@Base>
   1746c:	mov	r6, r0
   17470:	ldr	r0, [r0]
   17474:	mov	r1, #24
   17478:	mov	r2, r8
   1747c:	cmp	r0, #4
   17480:	movwne	r1, #16
   17484:	ldr	r1, [r2, r1]!
   17488:	adds	r1, r1, #1
   1748c:	str	r1, [r2]
   17490:	ldr	r1, [r2, #4]
   17494:	adc	r1, r1, #0
   17498:	cmp	r0, #4
   1749c:	str	r1, [r2, #4]
   174a0:	bne	17394 <read_boolean_expression@@Base+0x94>
   174a4:	ldrd	r0, [r8, #96]	; 0x60
   174a8:	adds	r0, r0, #1
   174ac:	adc	r1, r1, #0
   174b0:	strd	r0, [r8, #96]	; 0x60
   174b4:	mov	r0, r6
   174b8:	bl	153a0 <free_token_cpar@@Base>
   174bc:	mov	r0, r5
   174c0:	sub	sp, fp, #28
   174c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c8:	ldr	r0, [pc, #100]	; 17534 <read_boolean_expression@@Base+0x234>
   174cc:	ldr	r1, [pc, #100]	; 17538 <read_boolean_expression@@Base+0x238>
   174d0:	add	r0, pc, r0
   174d4:	add	r1, pc, r1
   174d8:	bl	17a18 <read_boolean_unary_expression@@Base+0x164>
   174dc:	ldr	r0, [pc, #88]	; 1753c <read_boolean_expression@@Base+0x23c>
   174e0:	mov	r1, #33	; 0x21
   174e4:	mov	r2, #1
   174e8:	ldr	r0, [pc, r0]
   174ec:	ldr	r3, [r0]
   174f0:	ldr	r0, [pc, #72]	; 17540 <read_boolean_expression@@Base+0x240>
   174f4:	add	r0, pc, r0
   174f8:	bl	11ec0 <fwrite@plt>
   174fc:	mov	r0, #1
   17500:	bl	11f2c <exit@plt>
   17504:	nop	{0}
   17508:	nop	{0}
   1750c:	nop	{0}
   17510:	andeq	r0, r0, r1
   17514:	andeq	r0, r0, r0
   17518:	andeq	r0, r0, r1
   1751c:	andeq	r0, r0, r0
   17520:	andeq	r6, r1, r4, lsr #18
   17524:	andeq	r5, r1, r0, ror #26
   17528:	andeq	r5, r1, r0, lsr sl
   1752c:	andeq	r5, r1, r0, lsl #20
   17530:	andeq	r5, r1, ip, asr #19
   17534:	andeq	r5, r1, r8, lsl ip
   17538:	andeq	r5, r1, r0, ror #17
   1753c:	ldrdeq	r5, [r1], -r0
   17540:	ldrdeq	r4, [r0], -r9

00017544 <read_single_boolean_expression@@Base>:
   17544:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17548:	add	fp, sp, #24
   1754c:	ldr	r5, [pc, #288]	; 17674 <read_single_boolean_expression@@Base+0x130>
   17550:	mov	r4, r2
   17554:	ldr	r2, [pc, #284]	; 17678 <read_single_boolean_expression@@Base+0x134>
   17558:	mov	r8, r3
   1755c:	ldr	r2, [pc, r2]
   17560:	add	r5, pc, r5
   17564:	mov	r3, r5
   17568:	adds	r2, r2, #1
   1756c:	str	r2, [r5]
   17570:	ldr	r2, [r5, #4]
   17574:	adc	r2, r2, #0
   17578:	cmp	r1, #0
   1757c:	str	r2, [r5, #4]
   17580:	mov	r2, #16
   17584:	movweq	r2, #8
   17588:	ldr	r2, [r3, r2]!
   1758c:	adds	r2, r2, #1
   17590:	str	r2, [r3]
   17594:	ldr	r2, [r3, #4]
   17598:	adc	r2, r2, #0
   1759c:	cmp	r1, #0
   175a0:	str	r2, [r3, #4]
   175a4:	beq	1761c <read_single_boolean_expression@@Base+0xd8>
   175a8:	ldr	r1, [r4]
   175ac:	mov	r2, #40	; 0x28
   175b0:	mov	r3, r5
   175b4:	cmp	r1, #0
   175b8:	movwne	r2, #32
   175bc:	ldr	r2, [r3, r2]!
   175c0:	adds	r2, r2, #1
   175c4:	str	r2, [r3]
   175c8:	ldr	r2, [r3, #4]
   175cc:	adc	r2, r2, #0
   175d0:	cmp	r1, #0
   175d4:	str	r2, [r3, #4]
   175d8:	beq	1764c <read_single_boolean_expression@@Base+0x108>
   175dc:	ldrd	r2, [r5, #48]	; 0x30
   175e0:	adds	r2, r2, #1
   175e4:	adc	r3, r3, #0
   175e8:	strd	r2, [r5, #48]	; 0x30
   175ec:	bl	17684 <read_boolean_binary_expression@@Base>
   175f0:	mov	r7, r0
   175f4:	mov	r0, #20
   175f8:	bl	11ef0 <malloc@plt>
   175fc:	mov	r1, r8
   17600:	mov	r2, #0
   17604:	mov	r3, r7
   17608:	mov	r6, r0
   1760c:	mov	r9, #0
   17610:	bl	15bf0 <init_node_boolean_operator@@Base>
   17614:	str	r9, [r4]
   17618:	b	17634 <read_single_boolean_expression@@Base+0xf0>
   1761c:	ldrd	r2, [r5, #24]
   17620:	adds	r2, r2, #1
   17624:	adc	r3, r3, #0
   17628:	strd	r2, [r5, #24]
   1762c:	bl	17684 <read_boolean_binary_expression@@Base>
   17630:	mov	r6, r0
   17634:	ldrd	r0, [r5, #56]	; 0x38
   17638:	adds	r0, r0, #1
   1763c:	adc	r1, r1, #0
   17640:	strd	r0, [r5, #56]	; 0x38
   17644:	mov	r0, r6
   17648:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1764c:	mov	r0, #4
   17650:	ldr	r2, [r0]
   17654:	ldr	r0, [pc, #32]	; 1767c <read_single_boolean_expression@@Base+0x138>
   17658:	ldr	r0, [pc, r0]
   1765c:	ldr	r0, [r0]
   17660:	ldr	r1, [pc, #24]	; 17680 <read_single_boolean_expression@@Base+0x13c>
   17664:	add	r1, pc, r1
   17668:	bl	11f50 <fprintf@plt>
   1766c:	mov	r0, #1
   17670:	bl	11f2c <exit@plt>
   17674:	andeq	r6, r1, r8, asr r7
   17678:	andeq	r6, r1, ip, asr r7
   1767c:	andeq	r5, r1, r0, ror #20
   17680:	andeq	r4, r0, fp, lsl #5

00017684 <read_boolean_binary_expression@@Base>:
   17684:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17688:	add	fp, sp, #24
   1768c:	ldr	r4, [pc, #536]	; 178ac <read_boolean_binary_expression@@Base+0x228>
   17690:	mov	r5, r0
   17694:	ldr	r0, [pc, #532]	; 178b0 <read_boolean_binary_expression@@Base+0x22c>
   17698:	ldr	r0, [pc, r0]
   1769c:	add	r4, pc, r4
   176a0:	adds	r0, r0, #1
   176a4:	str	r0, [r4]
   176a8:	ldr	r0, [r4, #4]
   176ac:	adc	r0, r0, #0
   176b0:	str	r0, [r4, #4]
   176b4:	ldr	r0, [r5]
   176b8:	bl	12110 <next@@Base>
   176bc:	mov	r6, r0
   176c0:	ldr	r0, [r0]
   176c4:	mov	r1, #16
   176c8:	mov	r2, r4
   176cc:	cmp	r0, #1
   176d0:	movwne	r1, #8
   176d4:	ldr	r1, [r2, r1]!
   176d8:	adds	r1, r1, #1
   176dc:	str	r1, [r2]
   176e0:	ldr	r1, [r2, #4]
   176e4:	adc	r1, r1, #0
   176e8:	cmp	r0, #1
   176ec:	str	r1, [r2, #4]
   176f0:	beq	17750 <read_boolean_binary_expression@@Base+0xcc>
   176f4:	mov	r1, #32
   176f8:	cmp	r0, #12
   176fc:	mov	r2, r4
   17700:	movweq	r1, #24
   17704:	ldr	r1, [r2, r1]!
   17708:	adds	r1, r1, #1
   1770c:	str	r1, [r2]
   17710:	ldr	r1, [r2, #4]
   17714:	adc	r1, r1, #0
   17718:	cmp	r0, #12
   1771c:	str	r1, [r2, #4]
   17720:	bne	177c0 <read_boolean_binary_expression@@Base+0x13c>
   17724:	ldrd	r0, [r4, #40]	; 0x28
   17728:	adds	r0, r0, #1
   1772c:	adc	r1, r1, #0
   17730:	strd	r0, [r4, #40]	; 0x28
   17734:	mov	r1, r6
   17738:	ldr	r0, [r5]
   1773c:	bl	123d8 <push_back@@Base>
   17740:	mov	r0, r5
   17744:	bl	178b4 <read_boolean_unary_expression@@Base>
   17748:	mov	r5, r0
   1774c:	b	17894 <read_boolean_binary_expression@@Base+0x210>
   17750:	mov	r0, #12
   17754:	bl	11ef0 <malloc@plt>
   17758:	ldr	r1, [r6, #4]
   1775c:	mov	r8, r0
   17760:	bl	159e0 <init_node_int@@Base>
   17764:	mov	r0, r6
   17768:	bl	152e0 <free_token_int_value@@Base>
   1776c:	ldr	r0, [r5]
   17770:	bl	12110 <next@@Base>
   17774:	mov	r7, r0
   17778:	ldr	r0, [r0]
   1777c:	mov	r1, #64	; 0x40
   17780:	mov	r2, r4
   17784:	cmp	r0, #12
   17788:	movwne	r1, #56	; 0x38
   1778c:	ldr	r1, [r2, r1]!
   17790:	adds	r1, r1, #1
   17794:	str	r1, [r2]
   17798:	ldr	r1, [r2, #4]
   1779c:	adc	r1, r1, #0
   177a0:	cmp	r0, #12
   177a4:	str	r1, [r2, #4]
   177a8:	beq	177d8 <read_boolean_binary_expression@@Base+0x154>
   177ac:	ldrd	r0, [r4, #72]	; 0x48
   177b0:	adds	r0, r0, #1
   177b4:	adc	r1, r1, #0
   177b8:	strd	r0, [r4, #72]	; 0x48
   177bc:	b	1783c <read_boolean_binary_expression@@Base+0x1b8>
   177c0:	ldrd	r0, [r4, #48]	; 0x30
   177c4:	mov	r5, #0
   177c8:	adds	r0, r0, #1
   177cc:	adc	r1, r1, #0
   177d0:	strd	r0, [r4, #48]	; 0x30
   177d4:	b	17894 <read_boolean_binary_expression@@Base+0x210>
   177d8:	mov	r0, r7
   177dc:	bl	16448 <get_boolean_op_value@@Base>
   177e0:	mov	r6, r0
   177e4:	mov	r0, r7
   177e8:	bl	15594 <free_token_boolean_op@@Base>
   177ec:	ldr	r0, [r5]
   177f0:	bl	12110 <next@@Base>
   177f4:	mov	r5, r0
   177f8:	ldr	r0, [r0]
   177fc:	mov	r1, #88	; 0x58
   17800:	mov	r2, r4
   17804:	cmp	r0, #1
   17808:	movwne	r1, #80	; 0x50
   1780c:	ldr	r1, [r2, r1]!
   17810:	adds	r1, r1, #1
   17814:	str	r1, [r2]
   17818:	ldr	r1, [r2, #4]
   1781c:	adc	r1, r1, #0
   17820:	cmp	r0, #1
   17824:	str	r1, [r2, #4]
   17828:	beq	1784c <read_boolean_binary_expression@@Base+0x1c8>
   1782c:	ldrd	r0, [r4, #96]	; 0x60
   17830:	adds	r0, r0, #1
   17834:	adc	r1, r1, #0
   17838:	strd	r0, [r4, #96]	; 0x60
   1783c:	mov	r0, r8
   17840:	bl	15c7c <free_node@@Base>
   17844:	mov	r5, #0
   17848:	b	17894 <read_boolean_binary_expression@@Base+0x210>
   1784c:	ldrd	r0, [r4, #104]	; 0x68
   17850:	adds	r0, r0, #1
   17854:	adc	r1, r1, #0
   17858:	strd	r0, [r4, #104]	; 0x68
   1785c:	mov	r0, #12
   17860:	bl	11ef0 <malloc@plt>
   17864:	ldr	r1, [r5, #4]
   17868:	mov	r7, r0
   1786c:	bl	159e0 <init_node_int@@Base>
   17870:	mov	r0, r5
   17874:	bl	152e0 <free_token_int_value@@Base>
   17878:	mov	r0, #20
   1787c:	bl	11ef0 <malloc@plt>
   17880:	mov	r1, r6
   17884:	mov	r2, r8
   17888:	mov	r3, r7
   1788c:	mov	r5, r0
   17890:	bl	15bf0 <init_node_boolean_operator@@Base>
   17894:	ldrd	r0, [r4, #112]	; 0x70
   17898:	adds	r0, r0, #1
   1789c:	adc	r1, r1, #0
   178a0:	strd	r0, [r4, #112]	; 0x70
   178a4:	mov	r0, r5
   178a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178ac:	andeq	r6, r1, ip, asr r6
   178b0:	andeq	r6, r1, r0, ror #12

000178b4 <read_boolean_unary_expression@@Base>:
   178b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   178b8:	add	fp, sp, #24
   178bc:	ldr	r5, [pc, #332]	; 17a10 <read_boolean_unary_expression@@Base+0x15c>
   178c0:	mov	r6, r0
   178c4:	ldr	r0, [pc, #328]	; 17a14 <read_boolean_unary_expression@@Base+0x160>
   178c8:	ldr	r0, [pc, r0]
   178cc:	add	r5, pc, r5
   178d0:	adds	r0, r0, #1
   178d4:	str	r0, [r5]
   178d8:	ldr	r0, [r5, #4]
   178dc:	adc	r0, r0, #0
   178e0:	str	r0, [r5, #4]
   178e4:	mov	r0, #20
   178e8:	bl	11ef0 <malloc@plt>
   178ec:	mov	r4, r0
   178f0:	ldr	r0, [r6]
   178f4:	bl	12110 <next@@Base>
   178f8:	mov	r7, r0
   178fc:	ldr	r0, [r0]
   17900:	mov	r1, #16
   17904:	mov	r2, r5
   17908:	cmp	r0, #12
   1790c:	movwne	r1, #8
   17910:	ldr	r1, [r2, r1]!
   17914:	adds	r1, r1, #1
   17918:	str	r1, [r2]
   1791c:	ldr	r1, [r2, #4]
   17920:	adc	r1, r1, #0
   17924:	cmp	r0, #12
   17928:	str	r1, [r2, #4]
   1792c:	beq	17944 <read_boolean_unary_expression@@Base+0x90>
   17930:	ldrd	r0, [r5, #24]
   17934:	adds	r0, r0, #1
   17938:	adc	r1, r1, #0
   1793c:	strd	r0, [r5, #24]
   17940:	b	179a8 <read_boolean_unary_expression@@Base+0xf4>
   17944:	mov	r0, r7
   17948:	bl	16448 <get_boolean_op_value@@Base>
   1794c:	mov	r8, r0
   17950:	mov	r0, r7
   17954:	bl	15594 <free_token_boolean_op@@Base>
   17958:	ldr	r0, [r6]
   1795c:	bl	12110 <next@@Base>
   17960:	mov	r6, r0
   17964:	ldr	r0, [r0]
   17968:	mov	r1, #40	; 0x28
   1796c:	mov	r2, r5
   17970:	cmp	r0, #1
   17974:	movwne	r1, #32
   17978:	ldr	r1, [r2, r1]!
   1797c:	adds	r1, r1, #1
   17980:	str	r1, [r2]
   17984:	ldr	r1, [r2, #4]
   17988:	adc	r1, r1, #0
   1798c:	cmp	r0, #1
   17990:	str	r1, [r2, #4]
   17994:	beq	179b8 <read_boolean_unary_expression@@Base+0x104>
   17998:	ldrd	r0, [r5, #48]	; 0x30
   1799c:	adds	r0, r0, #1
   179a0:	adc	r1, r1, #0
   179a4:	strd	r0, [r5, #48]	; 0x30
   179a8:	mov	r0, r4
   179ac:	bl	1639c <free_node_boolean_operator@@Base>
   179b0:	mov	r4, #0
   179b4:	b	179f8 <read_boolean_unary_expression@@Base+0x144>
   179b8:	ldrd	r0, [r5, #56]	; 0x38
   179bc:	adds	r0, r0, #1
   179c0:	adc	r1, r1, #0
   179c4:	strd	r0, [r5, #56]	; 0x38
   179c8:	mov	r0, #12
   179cc:	bl	11ef0 <malloc@plt>
   179d0:	ldr	r1, [r6, #4]
   179d4:	mov	r7, r0
   179d8:	bl	159e0 <init_node_int@@Base>
   179dc:	mov	r0, r6
   179e0:	bl	152e0 <free_token_int_value@@Base>
   179e4:	mov	r0, r4
   179e8:	mov	r1, r8
   179ec:	mov	r2, r7
   179f0:	mov	r3, #0
   179f4:	bl	15bf0 <init_node_boolean_operator@@Base>
   179f8:	ldrd	r0, [r5, #64]	; 0x40
   179fc:	adds	r0, r0, #1
   17a00:	adc	r1, r1, #0
   17a04:	strd	r0, [r5, #64]	; 0x40
   17a08:	mov	r0, r4
   17a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a10:	andeq	r6, r1, ip, lsr #9
   17a14:			; <UNDEFINED> instruction: 0x000164b0
   17a18:	ldr	r0, [r0]
   17a1c:	cmn	r0, #1
   17a20:	ldrne	r0, [r1, r0, lsl #2]
   17a24:	cmpne	r0, #0
   17a28:	bne	17a30 <read_boolean_unary_expression@@Base+0x17c>
   17a2c:	bx	lr
   17a30:	ldrd	r2, [r0]
   17a34:	adds	r2, r2, #1
   17a38:	adc	r3, r3, #0
   17a3c:	strd	r2, [r0]
   17a40:	bx	lr
   17a44:	push	{r4, r5, r6, lr}
   17a48:	sub	sp, sp, #8
   17a4c:	ldr	r0, [pc, #112]	; 17ac4 <read_boolean_unary_expression@@Base+0x210>
   17a50:	ldr	r1, [pc, #112]	; 17ac8 <read_boolean_unary_expression@@Base+0x214>
   17a54:	movw	r2, #27576	; 0x6bb8
   17a58:	movt	r2, #51930	; 0xcada
   17a5c:	add	r0, pc, r0
   17a60:	add	r1, pc, r1
   17a64:	bl	17ce8 <read_boolean_unary_expression@@Base+0x434>
   17a68:	ldr	r0, [pc, #92]	; 17acc <read_boolean_unary_expression@@Base+0x218>
   17a6c:	ldr	r6, [pc, #92]	; 17ad0 <read_boolean_unary_expression@@Base+0x21c>
   17a70:	mov	r5, #0
   17a74:	add	r0, pc, r0
   17a78:	add	r6, pc, r6
   17a7c:	add	r4, r0, #4
   17a80:	mov	r3, r6
   17a84:	ldr	r0, [r3, r5]!
   17a88:	ldr	r1, [r3, #16]
   17a8c:	str	r1, [sp]
   17a90:	ldmib	r3, {r1, r2}
   17a94:	ldrb	r3, [r3, #12]
   17a98:	bl	1844c <read_boolean_unary_expression@@Base+0xb98>
   17a9c:	ldrd	r0, [r4, #-4]
   17aa0:	bl	18d00 <read_boolean_unary_expression@@Base+0x144c>
   17aa4:	add	r5, r5, #20
   17aa8:	add	r4, r4, #8
   17aac:	cmp	r5, #220	; 0xdc
   17ab0:	bne	17a80 <read_boolean_unary_expression@@Base+0x1cc>
   17ab4:	bl	1947c <read_boolean_unary_expression@@Base+0x1bc8>
   17ab8:	add	sp, sp, #8
   17abc:	pop	{r4, r5, r6, lr}
   17ac0:	b	1a1e8 <read_boolean_unary_expression@@Base+0x2934>
   17ac4:	strdeq	r3, [r0], -ip
   17ac8:	muleq	r0, r9, r6
   17acc:	andeq	r5, r1, r4, lsr r4
   17ad0:	andeq	r5, r1, r0, asr r3
   17ad4:	push	{r4, r5, fp, lr}
   17ad8:	vpush	{d8-d9}
   17adc:	bl	17a44 <read_boolean_unary_expression@@Base+0x190>
   17ae0:	ldr	r0, [pc, #440]	; 17ca0 <read_boolean_unary_expression@@Base+0x3ec>
   17ae4:	vmov.i32	q4, #0	; 0x00000000
   17ae8:	mov	r4, #0
   17aec:	mov	r5, #116	; 0x74
   17af0:	mov	r2, #160	; 0xa0
   17af4:	add	r0, pc, r0
   17af8:	vst1.64	{d8-d9}, [r0 :128]
   17afc:	ldr	r0, [pc, #416]	; 17ca4 <read_boolean_unary_expression@@Base+0x3f0>
   17b00:	add	r0, pc, r0
   17b04:	vst1.64	{d8-d9}, [r0 :128]
   17b08:	ldr	r0, [pc, #408]	; 17ca8 <read_boolean_unary_expression@@Base+0x3f4>
   17b0c:	add	r0, pc, r0
   17b10:	vst1.64	{d8-d9}, [r0 :128]
   17b14:	ldr	r0, [pc, #400]	; 17cac <read_boolean_unary_expression@@Base+0x3f8>
   17b18:	add	r0, pc, r0
   17b1c:	add	r1, r0, #96	; 0x60
   17b20:	str	r4, [r0, #112]	; 0x70
   17b24:	vst1.64	{d8-d9}, [r1 :128]
   17b28:	add	r1, r0, #80	; 0x50
   17b2c:	vst1.64	{d8-d9}, [r1 :128]
   17b30:	add	r1, r0, #64	; 0x40
   17b34:	vst1.64	{d8-d9}, [r1 :128]
   17b38:	add	r1, r0, #48	; 0x30
   17b3c:	vst1.64	{d8-d9}, [r1 :128]
   17b40:	add	r1, r0, #32
   17b44:	vst1.64	{d8-d9}, [r1 :128]
   17b48:	add	r1, r0, #16
   17b4c:	vst1.64	{d8-d9}, [r0 :128], r5
   17b50:	vst1.64	{d8-d9}, [r1 :128]
   17b54:	str	r4, [r0]
   17b58:	mov	r1, #0
   17b5c:	ldr	r0, [pc, #332]	; 17cb0 <read_boolean_unary_expression@@Base+0x3fc>
   17b60:	add	r0, pc, r0
   17b64:	bl	11f80 <memset@plt>
   17b68:	ldr	r1, [pc, #324]	; 17cb4 <read_boolean_unary_expression@@Base+0x400>
   17b6c:	add	r1, pc, r1
   17b70:	add	r0, r1, #80	; 0x50
   17b74:	vst1.64	{d8-d9}, [r0 :128]
   17b78:	add	r0, r1, #64	; 0x40
   17b7c:	vst1.64	{d8-d9}, [r0 :128]
   17b80:	add	r0, r1, #48	; 0x30
   17b84:	vst1.64	{d8-d9}, [r0 :128]
   17b88:	add	r0, r1, #32
   17b8c:	vst1.64	{d8-d9}, [r0 :128]
   17b90:	add	r0, r1, #16
   17b94:	vst1.64	{d8-d9}, [r0 :128]
   17b98:	ldr	r0, [pc, #280]	; 17cb8 <read_boolean_unary_expression@@Base+0x404>
   17b9c:	add	r0, pc, r0
   17ba0:	add	r2, r0, #48	; 0x30
   17ba4:	vst1.64	{d8-d9}, [r2 :128]
   17ba8:	add	r2, r0, #32
   17bac:	vst1.64	{d8-d9}, [r2 :128]
   17bb0:	add	r2, r0, #16
   17bb4:	vst1.64	{d8-d9}, [r2 :128]
   17bb8:	ldr	r2, [pc, #252]	; 17cbc <read_boolean_unary_expression@@Base+0x408>
   17bbc:	str	r4, [r1, #96]	; 0x60
   17bc0:	add	r2, pc, r2
   17bc4:	add	r3, r2, #48	; 0x30
   17bc8:	str	r4, [r2, #64]	; 0x40
   17bcc:	vst1.64	{d8-d9}, [r3 :128]
   17bd0:	add	r3, r2, #32
   17bd4:	vst1.64	{d8-d9}, [r3 :128]
   17bd8:	add	r3, r2, #16
   17bdc:	vst1.64	{d8-d9}, [r3 :128]
   17be0:	mov	r3, #64	; 0x40
   17be4:	vst1.64	{d8-d9}, [r0 :128], r3
   17be8:	vst1.64	{d8-d9}, [r0 :128]
   17bec:	mov	r0, #68	; 0x44
   17bf0:	vst1.64	{d8-d9}, [r2 :128], r0
   17bf4:	str	r4, [r2]
   17bf8:	mov	r2, #100	; 0x64
   17bfc:	vst1.64	{d8-d9}, [r1 :128], r2
   17c00:	str	r4, [r1]
   17c04:	ldr	r1, [pc, #180]	; 17cc0 <read_boolean_unary_expression@@Base+0x40c>
   17c08:	add	r1, pc, r1
   17c0c:	add	r2, r1, #32
   17c10:	vst1.64	{d8-d9}, [r2 :128]
   17c14:	add	r2, r1, #16
   17c18:	vst1.64	{d8-d9}, [r2 :128]
   17c1c:	mov	r2, #48	; 0x30
   17c20:	vst1.64	{d8-d9}, [r1 :128], r2
   17c24:	vst1.64	{d8-d9}, [r1 :128]
   17c28:	ldr	r1, [pc, #148]	; 17cc4 <read_boolean_unary_expression@@Base+0x410>
   17c2c:	add	r1, pc, r1
   17c30:	add	r2, r1, #96	; 0x60
   17c34:	str	r4, [r1, #112]	; 0x70
   17c38:	vst1.64	{d8-d9}, [r2 :128]
   17c3c:	add	r2, r1, #80	; 0x50
   17c40:	vst1.64	{d8-d9}, [r2 :128]
   17c44:	add	r2, r1, #64	; 0x40
   17c48:	vst1.64	{d8-d9}, [r2 :128]
   17c4c:	add	r2, r1, #48	; 0x30
   17c50:	vst1.64	{d8-d9}, [r2 :128]
   17c54:	add	r2, r1, #32
   17c58:	vst1.64	{d8-d9}, [r2 :128]
   17c5c:	add	r2, r1, #16
   17c60:	vst1.64	{d8-d9}, [r1 :128], r5
   17c64:	vst1.64	{d8-d9}, [r2 :128]
   17c68:	str	r4, [r1]
   17c6c:	ldr	r1, [pc, #84]	; 17cc8 <read_boolean_unary_expression@@Base+0x414>
   17c70:	add	r1, pc, r1
   17c74:	add	r2, r1, #48	; 0x30
   17c78:	str	r4, [r1, #64]	; 0x40
   17c7c:	vst1.64	{d8-d9}, [r2 :128]
   17c80:	add	r2, r1, #32
   17c84:	vst1.64	{d8-d9}, [r2 :128]
   17c88:	add	r2, r1, #16
   17c8c:	vst1.64	{d8-d9}, [r1 :128], r0
   17c90:	vst1.64	{d8-d9}, [r2 :128]
   17c94:	str	r4, [r1]
   17c98:	vpop	{d8-d9}
   17c9c:	pop	{r4, r5, fp, pc}
   17ca0:	andeq	r5, r1, r4, ror pc
   17ca4:	andeq	r5, r1, r8, asr pc
   17ca8:	andeq	r5, r1, ip, ror #30
   17cac:	andeq	r5, r1, r0, ror pc
   17cb0:	andeq	r5, r1, r8, lsr #31
   17cb4:	ldrdeq	r6, [r1], -ip
   17cb8:	andeq	r6, r1, ip, asr r0
   17cbc:	andeq	r5, r1, r8, ror #31
   17cc0:	strheq	r6, [r1], -r0
   17cc4:	andeq	r6, r1, ip, asr #1
   17cc8:	andeq	r6, r1, r8, lsl #2
   17ccc:	ldr	r0, [pc, #12]	; 17ce0 <read_boolean_unary_expression@@Base+0x42c>
   17cd0:	ldr	r1, [pc, #12]	; 17ce4 <read_boolean_unary_expression@@Base+0x430>
   17cd4:	add	r0, pc, r0
   17cd8:	add	r1, pc, r1
   17cdc:	b	1a698 <__gcov_flush@@Base+0xb4>
   17ce0:			; <UNDEFINED> instruction: 0xfffffd68
   17ce4:			; <UNDEFINED> instruction: 0xfffffdf4
   17ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cec:	add	fp, sp, #28
   17cf0:	sub	sp, sp, #36	; 0x24
   17cf4:	mov	r9, r1
   17cf8:	mov	r6, r0
   17cfc:	add	r0, sp, #28
   17d00:	add	r1, sp, #32
   17d04:	mov	r8, r2
   17d08:	bl	1aa44 <__gcov_flush@@Base+0x460>
   17d0c:	cmp	r0, #0
   17d10:	beq	17d54 <read_boolean_unary_expression@@Base+0x4a0>
   17d14:	mov	r4, r0
   17d18:	mov	r0, r6
   17d1c:	ldr	r5, [sp, #32]
   17d20:	bl	11f38 <strlen@plt>
   17d24:	add	r0, r5, r0
   17d28:	add	r0, r0, #2
   17d2c:	bl	11ef0 <malloc@plt>
   17d30:	mov	r7, r0
   17d34:	ldr	r0, [sp, #28]
   17d38:	mov	r1, r6
   17d3c:	mov	r2, r4
   17d40:	str	r0, [sp]
   17d44:	mov	r0, r7
   17d48:	mov	r3, r5
   17d4c:	bl	1aad8 <__gcov_flush@@Base+0x4f4>
   17d50:	b	17d60 <read_boolean_unary_expression@@Base+0x4ac>
   17d54:	mov	r0, r6
   17d58:	bl	11ea8 <strdup@plt>
   17d5c:	mov	r7, r0
   17d60:	ldr	r0, [pc, #1548]	; 18374 <read_boolean_unary_expression@@Base+0xac0>
   17d64:	ldr	r6, [pc, #1548]	; 18378 <read_boolean_unary_expression@@Base+0xac4>
   17d68:	mov	r1, #2
   17d6c:	add	r0, pc, r0
   17d70:	add	r6, pc, r6
   17d74:	str	r7, [r0]
   17d78:	mov	r0, r7
   17d7c:	mov	r4, #0
   17d80:	strb	r4, [r6]
   17d84:	bl	11ecc <open64@plt>
   17d88:	ldr	r5, [pc, #1516]	; 1837c <read_boolean_unary_expression@@Base+0xac8>
   17d8c:	cmn	r0, #1
   17d90:	add	r5, pc, r5
   17d94:	str	r0, [r5]
   17d98:	beq	17da8 <read_boolean_unary_expression@@Base+0x4f4>
   17d9c:	ldr	r6, [pc, #1500]	; 18380 <read_boolean_unary_expression@@Base+0xacc>
   17da0:	add	r6, pc, r6
   17da4:	b	17e04 <read_boolean_unary_expression@@Base+0x550>
   17da8:	mov	r0, #1
   17dac:	strb	r0, [r6]
   17db0:	ldr	r0, [pc, #1508]	; 1839c <read_boolean_unary_expression@@Base+0xae8>
   17db4:	mov	r1, #66	; 0x42
   17db8:	mov	r2, #420	; 0x1a4
   17dbc:	ldr	r0, [pc, r0]
   17dc0:	bl	11ecc <open64@plt>
   17dc4:	ldr	r6, [pc, #1492]	; 183a0 <read_boolean_unary_expression@@Base+0xaec>
   17dc8:	cmn	r0, #1
   17dcc:	str	r0, [r5]
   17dd0:	add	r6, pc, r6
   17dd4:	bne	17e04 <read_boolean_unary_expression@@Base+0x550>
   17dd8:	ldr	r0, [pc, #1476]	; 183a4 <read_boolean_unary_expression@@Base+0xaf0>
   17ddc:	ldr	r0, [pc, r0]
   17de0:	bl	1a7ac <__gcov_flush@@Base+0x1c8>
   17de4:	ldr	r0, [pc, #1468]	; 183a8 <read_boolean_unary_expression@@Base+0xaf4>
   17de8:	mov	r1, #66	; 0x42
   17dec:	mov	r2, #420	; 0x1a4
   17df0:	ldr	r0, [pc, r0]
   17df4:	bl	11ecc <open64@plt>
   17df8:	cmn	r0, #1
   17dfc:	str	r0, [r5]
   17e00:	beq	1832c <read_boolean_unary_expression@@Base+0xa78>
   17e04:	str	r9, [sp, #20]
   17e08:	bl	1a878 <__gcov_flush@@Base+0x294>
   17e0c:	ldr	r0, [pc, #1392]	; 18384 <read_boolean_unary_expression@@Base+0xad0>
   17e10:	mov	r1, r6
   17e14:	ldr	r0, [pc, r0]
   17e18:	bl	11e30 <fdopen@plt>
   17e1c:	ldr	r5, [pc, #1380]	; 18388 <read_boolean_unary_expression@@Base+0xad4>
   17e20:	ldr	r9, [pc, #1380]	; 1838c <read_boolean_unary_expression@@Base+0xad8>
   17e24:	ldr	r1, [pc, #1380]	; 18390 <read_boolean_unary_expression@@Base+0xadc>
   17e28:	ldr	sl, [pc, #1380]	; 18394 <read_boolean_unary_expression@@Base+0xae0>
   17e2c:	add	r5, pc, r5
   17e30:	add	r9, pc, r9
   17e34:	add	r1, pc, r1
   17e38:	add	sl, pc, sl
   17e3c:	str	r4, [r5]
   17e40:	str	r4, [r5, #4]
   17e44:	str	r4, [r9]
   17e48:	str	r4, [r9, #4]
   17e4c:	str	r0, [r1]
   17e50:	str	r4, [sl]
   17e54:	ldr	r6, [pc, #1340]	; 18398 <read_boolean_unary_expression@@Base+0xae4>
   17e58:	ldr	r2, [pc, #1292]	; 1836c <read_boolean_unary_expression@@Base+0xab8>
   17e5c:	str	r8, [sp, #24]
   17e60:	add	r6, pc, r6
   17e64:	ldrb	r1, [r6]
   17e68:	mov	r6, r2
   17e6c:	cmp	r1, #1
   17e70:	bne	17e98 <read_boolean_unary_expression@@Base+0x5e4>
   17e74:	mov	r0, #131072	; 0x20000
   17e78:	mov	r4, #131072	; 0x20000
   17e7c:	bl	11ef0 <malloc@plt>
   17e80:	mov	r1, #0
   17e84:	str	r4, [r5]
   17e88:	str	r1, [r5, #4]
   17e8c:	mov	r8, r0
   17e90:	str	r0, [sl]
   17e94:	b	18028 <read_boolean_unary_expression@@Base+0x774>
   17e98:	mov	r1, #0
   17e9c:	mov	r2, #2
   17ea0:	mov	r8, #0
   17ea4:	bl	11fec <fseek@plt>
   17ea8:	ldr	r0, [pc, #1288]	; 183b8 <read_boolean_unary_expression@@Base+0xb04>
   17eac:	ldr	r0, [pc, r0]
   17eb0:	bl	11e90 <ftell@plt>
   17eb4:	mov	r2, r0
   17eb8:	ldr	r0, [pc, #1276]	; 183bc <read_boolean_unary_expression@@Base+0xb08>
   17ebc:	asr	r3, r2, #31
   17ec0:	add	r0, pc, r0
   17ec4:	cmp	r2, #0
   17ec8:	strd	r2, [r0]
   17ecc:	beq	17f9c <read_boolean_unary_expression@@Base+0x6e8>
   17ed0:	ldr	r0, [pc, #1256]	; 183c0 <read_boolean_unary_expression@@Base+0xb0c>
   17ed4:	mov	r1, r2
   17ed8:	mov	r2, #3
   17edc:	mov	r3, #1
   17ee0:	ldr	r0, [pc, r0]
   17ee4:	str	r8, [sp, #8]
   17ee8:	str	r8, [sp, #12]
   17eec:	str	r0, [sp]
   17ef0:	mov	r0, #0
   17ef4:	bl	11e84 <mmap64@plt>
   17ef8:	ldr	r1, [pc, #1220]	; 183c4 <read_boolean_unary_expression@@Base+0xb10>
   17efc:	cmn	r0, #1
   17f00:	add	r1, pc, r1
   17f04:	str	r0, [r1]
   17f08:	beq	17f64 <read_boolean_unary_expression@@Base+0x6b0>
   17f0c:	ldr	r1, [pc, #1232]	; 183e4 <read_boolean_unary_expression@@Base+0xb30>
   17f10:	add	r1, pc, r1
   17f14:	ldrb	r1, [r1]
   17f18:	cmp	r1, #0
   17f1c:	beq	17f28 <read_boolean_unary_expression@@Base+0x674>
   17f20:	mov	r8, r0
   17f24:	b	18034 <read_boolean_unary_expression@@Base+0x780>
   17f28:	ldr	ip, [r9, #4]
   17f2c:	ldr	r5, [pc, #1236]	; 18408 <read_boolean_unary_expression@@Base+0xb54>
   17f30:	mov	r4, r0
   17f34:	lsr	r2, r6, #16
   17f38:	ldr	r5, [pc, r5]
   17f3c:	lsr	r1, r6, #24
   17f40:	lsr	r3, r6, #8
   17f44:	strb	r6, [r4, r5]!
   17f48:	strb	r2, [r4, #2]
   17f4c:	adds	r2, r5, #4
   17f50:	adc	ip, ip, #0
   17f54:	strb	r1, [r4, #3]
   17f58:	strb	r3, [r4, #1]
   17f5c:	stm	r9, {r2, ip}
   17f60:	b	180fc <read_boolean_unary_expression@@Base+0x848>
   17f64:	bl	11f5c <__errno_location@plt>
   17f68:	ldr	r1, [pc, #1112]	; 183c8 <read_boolean_unary_expression@@Base+0xb14>
   17f6c:	ldr	r1, [pc, r1]
   17f70:	ldr	r0, [r0]
   17f74:	ldr	r4, [r1]
   17f78:	ldr	r7, [pc, #1100]	; 183cc <read_boolean_unary_expression@@Base+0xb18>
   17f7c:	ldr	r7, [pc, r7]
   17f80:	bl	11f08 <strerror@plt>
   17f84:	ldr	r1, [pc, #1092]	; 183d0 <read_boolean_unary_expression@@Base+0xb1c>
   17f88:	mov	r3, r0
   17f8c:	mov	r0, r4
   17f90:	add	r1, pc, r1
   17f94:	mov	r2, r7
   17f98:	bl	11f50 <fprintf@plt>
   17f9c:	str	r8, [r5]
   17fa0:	str	r8, [r5, #4]
   17fa4:	ldr	r0, [pc, #1064]	; 183d4 <read_boolean_unary_expression@@Base+0xb20>
   17fa8:	mov	r2, #16646144	; 0xfe0000
   17fac:	orr	r2, r2, #-16777216	; 0xff000000
   17fb0:	add	r0, pc, r0
   17fb4:	mvn	r3, #0
   17fb8:	str	r8, [r0]
   17fbc:	ldr	r1, [pc, #1044]	; 183d8 <read_boolean_unary_expression@@Base+0xb24>
   17fc0:	mov	r0, #1
   17fc4:	add	r1, pc, r1
   17fc8:	strb	r0, [r1]
   17fcc:	ldr	r0, [r9, #4]
   17fd0:	ldr	r1, [pc, #1028]	; 183dc <read_boolean_unary_expression@@Base+0xb28>
   17fd4:	eor	r3, r0, r3
   17fd8:	ldr	r1, [pc, r1]
   17fdc:	eor	r2, r1, r2
   17fe0:	orrs	r2, r2, r3
   17fe4:	beq	18024 <read_boolean_unary_expression@@Base+0x770>
   17fe8:	ldr	r2, [pc, #896]	; 18370 <read_boolean_unary_expression@@Base+0xabc>
   17fec:	adds	r1, r1, r2
   17ff0:	adc	r0, r0, #0
   17ff4:	mvn	r2, #0
   17ff8:	and	r7, r0, r2
   17ffc:	mov	r0, #16646144	; 0xfe0000
   18000:	orr	r0, r0, #-16777216	; 0xff000000
   18004:	and	r4, r1, r0
   18008:	mov	r0, r4
   1800c:	bl	11ef0 <malloc@plt>
   18010:	stm	r5, {r4, r7}
   18014:	mov	r8, r0
   18018:	ldr	r0, [pc, #960]	; 183e0 <read_boolean_unary_expression@@Base+0xb2c>
   1801c:	add	r0, pc, r0
   18020:	str	r8, [r0]
   18024:	mov	r0, r8
   18028:	mov	r1, #0
   1802c:	mov	r2, #131072	; 0x20000
   18030:	bl	11f80 <memset@plt>
   18034:	ldr	r0, [r9, #4]
   18038:	ldr	r1, [pc, #936]	; 183e8 <read_boolean_unary_expression@@Base+0xb34>
   1803c:	mov	sl, r5
   18040:	mov	r7, #7
   18044:	orr	r7, r7, #131072	; 0x20000
   18048:	ldr	r1, [pc, r1]
   1804c:	ldr	r4, [r5, #4]
   18050:	ldr	r5, [pc, #916]	; 183ec <read_boolean_unary_expression@@Base+0xb38>
   18054:	adds	r2, r1, #4
   18058:	adc	r3, r0, #0
   1805c:	ldr	r5, [pc, r5]
   18060:	subs	r2, r5, r2
   18064:	sbcs	r2, r4, r3
   18068:	bcs	18140 <read_boolean_unary_expression@@Base+0x88c>
   1806c:	adds	r1, r1, r7
   18070:	adc	r0, r0, #0
   18074:	subs	r1, r1, #4
   18078:	sbc	r0, r0, #0
   1807c:	mvn	r2, #0
   18080:	and	r5, r0, r2
   18084:	mov	r0, #16646144	; 0xfe0000
   18088:	orr	r0, r0, #-16777216	; 0xff000000
   1808c:	and	r4, r1, r0
   18090:	mov	r0, r8
   18094:	mov	r1, r4
   18098:	bl	11eb4 <realloc@plt>
   1809c:	strd	r4, [sl]
   180a0:	ldr	r1, [pc, #844]	; 183f4 <read_boolean_unary_expression@@Base+0xb40>
   180a4:	mov	r7, r6
   180a8:	lsr	r2, r6, #24
   180ac:	add	r1, pc, r1
   180b0:	mov	r3, r0
   180b4:	str	r0, [r1]
   180b8:	ldr	r6, [pc, #824]	; 183f8 <read_boolean_unary_expression@@Base+0xb44>
   180bc:	ldr	r1, [r9, #4]
   180c0:	lsr	r5, r7, #16
   180c4:	add	r6, pc, r6
   180c8:	ldrb	r6, [r6]
   180cc:	ldr	r4, [pc, #808]	; 183fc <read_boolean_unary_expression@@Base+0xb48>
   180d0:	ldr	r4, [pc, r4]
   180d4:	strb	r7, [r3, r4]!
   180d8:	strb	r2, [r3, #3]
   180dc:	lsr	r2, r7, #8
   180e0:	strb	r2, [r3, #1]
   180e4:	adds	r2, r4, #4
   180e8:	adc	ip, r1, #0
   180ec:	cmp	r6, #1
   180f0:	strb	r5, [r3, #2]
   180f4:	stm	r9, {r2, ip}
   180f8:	beq	18180 <read_boolean_unary_expression@@Base+0x8cc>
   180fc:	ldr	r4, [sp, #20]
   18100:	mov	r5, r0
   18104:	mov	lr, r9
   18108:	ldrb	r1, [r4]
   1810c:	ldrb	r3, [r4, #1]
   18110:	ldrb	r7, [r4, #2]
   18114:	ldrb	r6, [r4, #3]
   18118:	strb	r1, [r5, r2]!
   1811c:	adds	r4, r2, #4
   18120:	adc	r1, ip, #0
   18124:	strb	r6, [r5, #3]
   18128:	strb	r7, [r5, #2]
   1812c:	strb	r3, [r5, #1]
   18130:	str	r4, [lr]
   18134:	str	r1, [lr, #4]
   18138:	ldr	r6, [sp, #24]
   1813c:	b	182fc <read_boolean_unary_expression@@Base+0xa48>
   18140:	ldr	r1, [r9, #4]
   18144:	ldr	r4, [pc, #676]	; 183f0 <read_boolean_unary_expression@@Base+0xb3c>
   18148:	mov	r5, r6
   1814c:	lsr	r0, r6, #24
   18150:	ldr	r4, [pc, r4]
   18154:	lsr	r2, r6, #16
   18158:	lsr	r3, r6, #8
   1815c:	mov	r6, r8
   18160:	strb	r5, [r6, r4]!
   18164:	strb	r2, [r6, #2]
   18168:	adds	r2, r4, #4
   1816c:	adc	ip, r1, #0
   18170:	strb	r0, [r6, #3]
   18174:	strb	r3, [r6, #1]
   18178:	stm	r9, {r2, ip}
   1817c:	mov	r0, r8
   18180:	ldr	r7, [sl, #4]
   18184:	ldr	r3, [pc, #628]	; 18400 <read_boolean_unary_expression@@Base+0xb4c>
   18188:	adds	r6, r4, #8
   1818c:	mov	r8, r9
   18190:	adc	r5, r1, #0
   18194:	ldr	r3, [pc, r3]
   18198:	mov	r9, sl
   1819c:	subs	r3, r3, r6
   181a0:	sbcs	r3, r7, r5
   181a4:	bcs	18248 <read_boolean_unary_expression@@Base+0x994>
   181a8:	mov	r2, #7
   181ac:	orr	r2, r2, #131072	; 0x20000
   181b0:	adds	r2, r4, r2
   181b4:	adc	r4, r1, #0
   181b8:	mov	r1, #16646144	; 0xfe0000
   181bc:	orr	r1, r1, #-16777216	; 0xff000000
   181c0:	and	r6, r2, r1
   181c4:	mov	r1, r6
   181c8:	bl	11eb4 <realloc@plt>
   181cc:	ldr	sl, [pc, #568]	; 1840c <read_boolean_unary_expression@@Base+0xb58>
   181d0:	mvn	r1, #0
   181d4:	and	r7, r4, r1
   181d8:	add	sl, pc, sl
   181dc:	strd	r6, [r9]
   181e0:	str	r0, [sl]
   181e4:	ldr	r1, [pc, #548]	; 18410 <read_boolean_unary_expression@@Base+0xb5c>
   181e8:	ldr	r2, [sp, #20]
   181ec:	ldr	ip, [r8, #4]
   181f0:	add	r1, pc, r1
   181f4:	mov	lr, r8
   181f8:	ldrb	r3, [r1]
   181fc:	ldrb	r1, [r2]
   18200:	ldrb	r7, [r2, #1]
   18204:	ldrb	r6, [r2, #2]
   18208:	ldrb	r5, [r2, #3]
   1820c:	ldr	r2, [pc, #512]	; 18414 <read_boolean_unary_expression@@Base+0xb60>
   18210:	ldr	r2, [pc, r2]
   18214:	adds	r4, r2, #4
   18218:	strb	r1, [r0, r2]
   1821c:	add	r1, r0, r2
   18220:	strb	r5, [r1, #3]
   18224:	strb	r6, [r1, #2]
   18228:	strb	r7, [r1, #1]
   1822c:	adc	r1, ip, #0
   18230:	str	r4, [lr]
   18234:	str	r1, [lr, #4]
   18238:	ldr	r6, [sp, #24]
   1823c:	cmp	r3, #1
   18240:	beq	18290 <read_boolean_unary_expression@@Base+0x9dc>
   18244:	b	182fc <read_boolean_unary_expression@@Base+0xa48>
   18248:	ldr	r6, [sp, #20]
   1824c:	mov	r5, r0
   18250:	adds	r4, r2, #4
   18254:	ldrb	r1, [r6]
   18258:	ldrb	r3, [r6, #1]
   1825c:	ldrb	r7, [r6, #2]
   18260:	ldrb	r6, [r6, #3]
   18264:	strb	r1, [r5, r2]!
   18268:	adc	r1, ip, #0
   1826c:	strb	r3, [r5, #1]
   18270:	mov	r3, r8
   18274:	strb	r6, [r5, #3]
   18278:	strb	r7, [r5, #2]
   1827c:	str	r4, [r3]
   18280:	str	r1, [r3, #4]
   18284:	ldr	r6, [sp, #24]
   18288:	ldr	sl, [pc, #372]	; 18404 <read_boolean_unary_expression@@Base+0xb50>
   1828c:	add	sl, pc, sl
   18290:	ldr	r7, [r9, #4]
   18294:	ldr	r5, [pc, #380]	; 18418 <read_boolean_unary_expression@@Base+0xb64>
   18298:	adds	r3, r2, #8
   1829c:	adc	lr, ip, #0
   182a0:	ldr	r5, [pc, r5]
   182a4:	subs	r3, r5, r3
   182a8:	sbcs	r3, r7, lr
   182ac:	bcs	182f8 <read_boolean_unary_expression@@Base+0xa44>
   182b0:	mov	r1, #7
   182b4:	orr	r1, r1, #131072	; 0x20000
   182b8:	adds	r1, r2, r1
   182bc:	adc	r2, ip, #0
   182c0:	mvn	r3, #0
   182c4:	and	r5, r2, r3
   182c8:	mov	r2, #16646144	; 0xfe0000
   182cc:	orr	r2, r2, #-16777216	; 0xff000000
   182d0:	and	r4, r1, r2
   182d4:	mov	r1, r4
   182d8:	bl	11eb4 <realloc@plt>
   182dc:	strd	r4, [r9]
   182e0:	str	r0, [sl]
   182e4:	ldr	r1, [r8, #4]
   182e8:	ldr	r4, [pc, #300]	; 1841c <read_boolean_unary_expression@@Base+0xb68>
   182ec:	mov	lr, r8
   182f0:	ldr	r4, [pc, r4]
   182f4:	b	182fc <read_boolean_unary_expression@@Base+0xa48>
   182f8:	mov	lr, r8
   182fc:	lsr	r2, r6, #24
   18300:	strb	r6, [r0, r4]!
   18304:	lsr	r3, r6, #16
   18308:	lsr	r7, r6, #8
   1830c:	strb	r2, [r0, #3]
   18310:	strb	r3, [r0, #2]
   18314:	strb	r7, [r0, #1]
   18318:	adds	r0, r4, #4
   1831c:	adc	r1, r1, #0
   18320:	strd	r0, [lr]
   18324:	sub	sp, fp, #28
   18328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1832c:	bl	11f5c <__errno_location@plt>
   18330:	ldr	r1, [pc, #116]	; 183ac <read_boolean_unary_expression@@Base+0xaf8>
   18334:	ldr	r1, [pc, r1]
   18338:	ldr	r0, [r0]
   1833c:	ldr	r4, [r1]
   18340:	ldr	r5, [pc, #104]	; 183b0 <read_boolean_unary_expression@@Base+0xafc>
   18344:	ldr	r5, [pc, r5]
   18348:	bl	11f08 <strerror@plt>
   1834c:	ldr	r1, [pc, #96]	; 183b4 <read_boolean_unary_expression@@Base+0xb00>
   18350:	mov	r3, r0
   18354:	mov	r0, r4
   18358:	add	r1, pc, r1
   1835c:	mov	r2, r5
   18360:	bl	11f50 <fprintf@plt>
   18364:	sub	sp, fp, #28
   18368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1836c:	strbvs	r6, [r3, -r1, ror #8]!
   18370:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   18374:	andeq	r6, r1, r4, asr r0
   18378:	andeq	r6, r1, r4, asr r0
   1837c:	andeq	r5, r1, ip, asr r3
   18380:	andeq	r3, r0, r8, lsl sp
   18384:	ldrdeq	r5, [r1], -r8
   18388:	andeq	r5, r1, r4, lsr #31
   1838c:	andeq	r5, r1, r8, lsr #31
   18390:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18394:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18398:	andeq	r5, r1, r4, ror #30
   1839c:	andeq	r6, r1, r4
   183a0:	andeq	r3, r0, ip, ror #25
   183a4:	andeq	r5, r1, r4, ror #31
   183a8:	ldrdeq	r5, [r1], -r0
   183ac:	andeq	r4, r1, r4, lsl #27
   183b0:	andeq	r5, r1, ip, ror sl
   183b4:	andeq	r3, r0, r8, ror #14
   183b8:	andeq	r5, r1, ip, lsl pc
   183bc:	andeq	r5, r1, r0, lsr pc
   183c0:	andeq	r5, r1, ip, lsl #4
   183c4:	andeq	r5, r1, ip, asr #29
   183c8:	andeq	r5, r1, ip, asr #2
   183cc:	andeq	r5, r1, r4, asr #28
   183d0:	andeq	r3, r0, sl, lsl #25
   183d4:	andeq	r5, r1, ip, lsl lr
   183d8:	andeq	r5, r1, r0, lsl #28
   183dc:	andeq	r5, r1, r0, lsl #28
   183e0:			; <UNDEFINED> instruction: 0x00015db0
   183e4:			; <UNDEFINED> instruction: 0x00015eb4
   183e8:	muleq	r1, r0, sp
   183ec:	andeq	r5, r1, r4, ror sp
   183f0:	andeq	r5, r1, r8, lsl #25
   183f4:	andeq	r5, r1, r0, lsr #26
   183f8:	andeq	r5, r1, r0, lsl #26
   183fc:	andeq	r5, r1, r8, lsl #26
   18400:	andeq	r5, r1, ip, lsr ip
   18404:	andeq	r5, r1, r0, asr #22
   18408:	andeq	r5, r1, r0, lsr #29
   1840c:	strdeq	r5, [r1], -r4
   18410:	ldrdeq	r5, [r1], -r4
   18414:	andeq	r5, r1, r8, asr #23
   18418:	andeq	r5, r1, r0, lsr fp
   1841c:	andeq	r5, r1, r8, ror #21
   18420:	ldr	r0, [r0]
   18424:	cmn	r0, #1
   18428:	beq	18448 <read_boolean_unary_expression@@Base+0xb94>
   1842c:	ldr	r0, [r1, r0, lsl #2]
   18430:	cmp	r0, #0
   18434:	bxeq	lr
   18438:	ldrd	r2, [r0]
   1843c:	adds	r2, r2, #1
   18440:	adc	r3, r3, #0
   18444:	strd	r2, [r0]
   18448:	bx	lr
   1844c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18450:	add	fp, sp, #28
   18454:	sub	sp, sp, #12
   18458:	mov	r9, r0
   1845c:	ldr	r0, [pc, #2000]	; 18c34 <read_boolean_unary_expression@@Base+0x1380>
   18460:	mov	sl, #2
   18464:	cmp	r3, #0
   18468:	movne	sl, #3
   1846c:	ldr	r0, [pc, r0]
   18470:	cmp	r0, #0
   18474:	beq	18c2c <read_boolean_unary_expression@@Base+0x1378>
   18478:	stm	sp, {r2, r3}
   1847c:	ldr	r0, [pc, #1972]	; 18c38 <read_boolean_unary_expression@@Base+0x1384>
   18480:	str	r1, [sp, #8]
   18484:	add	r0, pc, r0
   18488:	ldrb	r0, [r0]
   1848c:	cmp	r0, #1
   18490:	bne	18520 <read_boolean_unary_expression@@Base+0xc6c>
   18494:	ldr	r0, [pc, #1952]	; 18c3c <read_boolean_unary_expression@@Base+0x1388>
   18498:	ldr	r4, [pc, #1952]	; 18c40 <read_boolean_unary_expression@@Base+0x138c>
   1849c:	add	r0, pc, r0
   184a0:	add	r4, pc, r4
   184a4:	ldr	r0, [r0, #4]
   184a8:	ldr	r5, [pc, #1940]	; 18c44 <read_boolean_unary_expression@@Base+0x1390>
   184ac:	ldr	r5, [pc, r5]
   184b0:	ldr	r7, [r4, #4]
   184b4:	ldr	r6, [pc, #1932]	; 18c48 <read_boolean_unary_expression@@Base+0x1394>
   184b8:	adds	r2, r5, #4
   184bc:	adc	r3, r0, #0
   184c0:	ldr	r6, [pc, r6]
   184c4:	subs	r2, r6, r2
   184c8:	sbcs	r2, r7, r3
   184cc:	bcs	18520 <read_boolean_unary_expression@@Base+0xc6c>
   184d0:	mov	r2, #7
   184d4:	orr	r2, r2, #131072	; 0x20000
   184d8:	adds	r1, r5, r2
   184dc:	adc	r0, r0, #0
   184e0:	subs	r1, r1, #4
   184e4:	sbc	r0, r0, #0
   184e8:	mvn	r2, #0
   184ec:	and	r7, r0, r2
   184f0:	mov	r0, #16646144	; 0xfe0000
   184f4:	orr	r0, r0, #-16777216	; 0xff000000
   184f8:	ldr	r8, [pc, #1868]	; 18c4c <read_boolean_unary_expression@@Base+0x1398>
   184fc:	and	r6, r1, r0
   18500:	ldr	r0, [pc, #1864]	; 18c50 <read_boolean_unary_expression@@Base+0x139c>
   18504:	mov	r1, r6
   18508:	add	r8, pc, r8
   1850c:	ldr	r0, [pc, r0]
   18510:	bl	11eb4 <realloc@plt>
   18514:	ldr	r1, [sp, #8]
   18518:	strd	r6, [r4]
   1851c:	str	r0, [r8]
   18520:	ldr	r3, [pc, #1836]	; 18c54 <read_boolean_unary_expression@@Base+0x13a0>
   18524:	ldr	r7, [pc, #1836]	; 18c58 <read_boolean_unary_expression@@Base+0x13a4>
   18528:	mov	r0, #0
   1852c:	add	r3, pc, r3
   18530:	mov	r2, #1
   18534:	ldr	r7, [pc, r7]
   18538:	ldr	r8, [pc, #1820]	; 18c5c <read_boolean_unary_expression@@Base+0x13a8>
   1853c:	adds	r4, r7, #4
   18540:	ldr	r8, [pc, r8]
   18544:	ldr	r6, [r3, #4]
   18548:	mov	r5, r8
   1854c:	strb	r0, [r5, r7]!
   18550:	strb	r2, [r5, #3]
   18554:	strb	r0, [r5, #2]
   18558:	strb	r0, [r5, #1]
   1855c:	adc	r5, r6, #0
   18560:	cmp	r1, #0
   18564:	strd	r4, [r3]
   18568:	beq	1857c <read_boolean_unary_expression@@Base+0xcc8>
   1856c:	mov	r0, r1
   18570:	bl	11f38 <strlen@plt>
   18574:	add	r0, sl, r0, lsr #2
   18578:	add	sl, r0, #2
   1857c:	ldr	r0, [pc, #1756]	; 18c60 <read_boolean_unary_expression@@Base+0x13ac>
   18580:	add	r0, pc, r0
   18584:	ldrb	r0, [r0]
   18588:	cmp	r0, #0
   1858c:	beq	1866c <read_boolean_unary_expression@@Base+0xdb8>
   18590:	ldr	lr, [pc, #1744]	; 18c68 <read_boolean_unary_expression@@Base+0x13b4>
   18594:	adds	r0, r7, #8
   18598:	adc	r1, r6, #0
   1859c:	add	lr, pc, lr
   185a0:	ldr	r2, [lr, #4]
   185a4:	ldr	r3, [pc, #1728]	; 18c6c <read_boolean_unary_expression@@Base+0x13b8>
   185a8:	ldr	r3, [pc, r3]
   185ac:	subs	r0, r3, r0
   185b0:	sbcs	r0, r2, r1
   185b4:	bcs	188bc <read_boolean_unary_expression@@Base+0x1008>
   185b8:	mov	r0, #7
   185bc:	orr	r0, r0, #131072	; 0x20000
   185c0:	adds	r0, r7, r0
   185c4:	adc	r1, r6, #0
   185c8:	mvn	r2, #0
   185cc:	and	r5, r1, r2
   185d0:	mov	r1, #16646144	; 0xfe0000
   185d4:	orr	r1, r1, #-16777216	; 0xff000000
   185d8:	and	r6, r0, r1
   185dc:	ldr	r4, [pc, #1680]	; 18c74 <read_boolean_unary_expression@@Base+0x13c0>
   185e0:	mov	r0, r8
   185e4:	mov	r1, r6
   185e8:	add	r4, pc, r4
   185ec:	mov	r7, lr
   185f0:	bl	11eb4 <realloc@plt>
   185f4:	mov	lr, r7
   185f8:	mov	r8, r0
   185fc:	str	r6, [lr]
   18600:	str	r5, [lr, #4]
   18604:	str	r8, [r4]
   18608:	ldr	r1, [pc, #1640]	; 18c78 <read_boolean_unary_expression@@Base+0x13c4>
   1860c:	lsr	r0, sl, #24
   18610:	add	r1, pc, r1
   18614:	lsr	r3, sl, #16
   18618:	ldrb	r2, [r1]
   1861c:	ldr	r1, [pc, #1624]	; 18c7c <read_boolean_unary_expression@@Base+0x13c8>
   18620:	add	r1, pc, r1
   18624:	mov	r7, r1
   18628:	ldr	r5, [r1, #4]
   1862c:	ldr	r4, [pc, #1612]	; 18c80 <read_boolean_unary_expression@@Base+0x13cc>
   18630:	mov	r1, r8
   18634:	ldr	r4, [pc, r4]
   18638:	strb	sl, [r1, r4]!
   1863c:	ldr	ip, [sp, #8]
   18640:	strb	r0, [r1, #3]
   18644:	lsr	r0, sl, #8
   18648:	strb	r0, [r1, #1]
   1864c:	adds	r0, r4, #4
   18650:	strb	r3, [r1, #2]
   18654:	adc	r1, r5, #0
   18658:	mov	sl, r7
   1865c:	cmp	r2, #1
   18660:	strd	r0, [sl]
   18664:	bne	186a4 <read_boolean_unary_expression@@Base+0xdf0>
   18668:	b	188f4 <read_boolean_unary_expression@@Base+0x1040>
   1866c:	mov	r3, r8
   18670:	lsr	r0, sl, #24
   18674:	strb	sl, [r3, r4]!
   18678:	lsr	r1, sl, #16
   1867c:	lsr	r2, sl, #8
   18680:	strb	r0, [r3, #3]
   18684:	strb	r1, [r3, #2]
   18688:	strb	r2, [r3, #1]
   1868c:	ldr	sl, [pc, #1488]	; 18c64 <read_boolean_unary_expression@@Base+0x13b0>
   18690:	ldr	ip, [sp, #8]
   18694:	adds	r0, r7, #8
   18698:	adc	r1, r6, #0
   1869c:	add	sl, pc, sl
   186a0:	strd	r0, [sl]
   186a4:	mov	r6, r8
   186a8:	lsr	r2, r9, #24
   186ac:	strb	r9, [r6, r0]!
   186b0:	lsr	r3, r9, #16
   186b4:	strb	r2, [r6, #3]
   186b8:	adds	r2, r0, #4
   186bc:	lsr	r7, r9, #8
   186c0:	strb	r3, [r6, #2]
   186c4:	adc	r3, r1, #0
   186c8:	strb	r7, [r6, #1]
   186cc:	strd	r2, [sl]
   186d0:	ldr	r5, [sp]
   186d4:	mov	r6, r8
   186d8:	adds	r4, r2, #4
   186dc:	lsr	r7, r5, #8
   186e0:	strb	r5, [r6, r2]!
   186e4:	lsr	r0, r5, #24
   186e8:	lsr	r1, r5, #16
   186ec:	strb	r7, [r6, #1]
   186f0:	adc	r7, r3, #0
   186f4:	strb	r0, [r6, #3]
   186f8:	strb	r1, [r6, #2]
   186fc:	stm	sl, {r4, r7}
   18700:	ldr	r0, [sp, #4]
   18704:	cmp	r0, #0
   18708:	beq	187e0 <read_boolean_unary_expression@@Base+0xf2c>
   1870c:	ldr	r0, [pc, #1420]	; 18ca0 <read_boolean_unary_expression@@Base+0x13ec>
   18710:	ldr	sl, [fp, #8]
   18714:	add	r0, pc, r0
   18718:	ldrb	r0, [r0]
   1871c:	cmp	r0, #1
   18720:	bne	187ac <read_boolean_unary_expression@@Base+0xef8>
   18724:	ldr	r9, [pc, #1400]	; 18ca4 <read_boolean_unary_expression@@Base+0x13f0>
   18728:	adds	r0, r2, #8
   1872c:	adc	r1, r3, #0
   18730:	add	r9, pc, r9
   18734:	ldr	r6, [r9, #4]
   18738:	ldr	r5, [pc, #1384]	; 18ca8 <read_boolean_unary_expression@@Base+0x13f4>
   1873c:	ldr	r5, [pc, r5]
   18740:	subs	r0, r5, r0
   18744:	sbcs	r0, r6, r1
   18748:	bcs	187ac <read_boolean_unary_expression@@Base+0xef8>
   1874c:	mov	r0, #7
   18750:	orr	r0, r0, #131072	; 0x20000
   18754:	adds	r0, r2, r0
   18758:	adc	r1, r3, #0
   1875c:	mvn	r2, #0
   18760:	and	r5, r1, r2
   18764:	mov	r1, #16646144	; 0xfe0000
   18768:	orr	r1, r1, #-16777216	; 0xff000000
   1876c:	and	r6, r0, r1
   18770:	ldr	r4, [pc, #1332]	; 18cac <read_boolean_unary_expression@@Base+0x13f8>
   18774:	mov	r0, r8
   18778:	mov	r1, r6
   1877c:	add	r4, pc, r4
   18780:	bl	11eb4 <realloc@plt>
   18784:	ldr	ip, [sp, #8]
   18788:	str	r6, [r9]
   1878c:	str	r5, [r9, #4]
   18790:	mov	r8, r0
   18794:	ldr	r0, [pc, #1300]	; 18cb0 <read_boolean_unary_expression@@Base+0x13fc>
   18798:	str	r8, [r4]
   1879c:	add	r0, pc, r0
   187a0:	ldr	r7, [r0, #4]
   187a4:	ldr	r4, [pc, #1288]	; 18cb4 <read_boolean_unary_expression@@Base+0x1400>
   187a8:	ldr	r4, [pc, r4]
   187ac:	mov	r3, r8
   187b0:	lsr	r0, sl, #24
   187b4:	strb	sl, [r3, r4]!
   187b8:	lsr	r1, sl, #16
   187bc:	lsr	r2, sl, #8
   187c0:	strb	r0, [r3, #3]
   187c4:	strb	r1, [r3, #2]
   187c8:	strb	r2, [r3, #1]
   187cc:	ldr	sl, [pc, #1252]	; 18cb8 <read_boolean_unary_expression@@Base+0x1404>
   187d0:	adds	r4, r4, #4
   187d4:	adc	r7, r7, #0
   187d8:	add	sl, pc, sl
   187dc:	stm	sl, {r4, r7}
   187e0:	cmp	ip, #0
   187e4:	beq	18c2c <read_boolean_unary_expression@@Base+0x1378>
   187e8:	mov	r0, ip
   187ec:	bl	11f38 <strlen@plt>
   187f0:	mov	r9, #1
   187f4:	add	r5, r9, r0, lsr #2
   187f8:	ldr	r0, [pc, #1212]	; 18cbc <read_boolean_unary_expression@@Base+0x1408>
   187fc:	add	r0, pc, r0
   18800:	ldrb	r0, [r0]
   18804:	cmp	r0, #1
   18808:	bne	188ac <read_boolean_unary_expression@@Base+0xff8>
   1880c:	ldr	sl, [pc, #1196]	; 18cc0 <read_boolean_unary_expression@@Base+0x140c>
   18810:	adds	r0, r4, #4
   18814:	adc	r1, r7, #0
   18818:	add	sl, pc, sl
   1881c:	ldr	r2, [sl, #4]
   18820:	ldr	r3, [pc, #1180]	; 18cc4 <read_boolean_unary_expression@@Base+0x1410>
   18824:	ldr	r3, [pc, r3]
   18828:	subs	r0, r3, r0
   1882c:	sbcs	r0, r2, r1
   18830:	bcs	18a60 <read_boolean_unary_expression@@Base+0x11ac>
   18834:	mov	r0, #0
   18838:	str	r0, [sp, #4]
   1883c:	mov	r0, #7
   18840:	orr	r0, r0, #131072	; 0x20000
   18844:	adds	r0, r4, r0
   18848:	adc	r1, r7, #0
   1884c:	subs	r0, r0, #4
   18850:	sbc	r1, r1, #0
   18854:	mvn	r2, #0
   18858:	and	r7, r1, r2
   1885c:	mov	r1, #16646144	; 0xfe0000
   18860:	orr	r1, r1, #-16777216	; 0xff000000
   18864:	and	r4, r0, r1
   18868:	ldr	r6, [pc, #1116]	; 18ccc <read_boolean_unary_expression@@Base+0x1418>
   1886c:	mov	r0, r8
   18870:	mov	r1, r4
   18874:	add	r6, pc, r6
   18878:	bl	11eb4 <realloc@plt>
   1887c:	stm	sl, {r4, r7}
   18880:	str	r0, [r6]
   18884:	ldr	sl, [pc, #1092]	; 18cd0 <read_boolean_unary_expression@@Base+0x141c>
   18888:	mov	r8, r0
   1888c:	add	sl, pc, sl
   18890:	ldr	r7, [sl, #4]
   18894:	ldr	r0, [pc, #1080]	; 18cd4 <read_boolean_unary_expression@@Base+0x1420>
   18898:	add	r0, pc, r0
   1889c:	ldrb	r9, [r0]
   188a0:	ldr	r4, [pc, #1072]	; 18cd8 <read_boolean_unary_expression@@Base+0x1424>
   188a4:	ldr	r4, [pc, r4]
   188a8:	b	18a70 <read_boolean_unary_expression@@Base+0x11bc>
   188ac:	mov	r0, #0
   188b0:	str	r0, [sp, #4]
   188b4:	mov	r9, #0
   188b8:	b	18a70 <read_boolean_unary_expression@@Base+0x11bc>
   188bc:	mov	r3, r8
   188c0:	lsr	r0, sl, #24
   188c4:	strb	sl, [r3, r4]!
   188c8:	lsr	r1, sl, #16
   188cc:	lsr	r2, sl, #8
   188d0:	strb	r0, [r3, #3]
   188d4:	strb	r1, [r3, #2]
   188d8:	strb	r2, [r3, #1]
   188dc:	ldr	sl, [pc, #908]	; 18c70 <read_boolean_unary_expression@@Base+0x13bc>
   188e0:	adds	r0, r7, #8
   188e4:	adc	r1, r6, #0
   188e8:	add	sl, pc, sl
   188ec:	ldr	ip, [sp, #8]
   188f0:	strd	r0, [sl]
   188f4:	ldr	r7, [lr, #4]
   188f8:	ldr	r6, [pc, #900]	; 18c84 <read_boolean_unary_expression@@Base+0x13d0>
   188fc:	adds	r2, r4, #8
   18900:	adc	r3, r5, #0
   18904:	ldr	r6, [pc, r6]
   18908:	subs	r2, r6, r2
   1890c:	sbcs	r2, r7, r3
   18910:	bcs	189b4 <read_boolean_unary_expression@@Base+0x1100>
   18914:	mov	r0, #7
   18918:	orr	r0, r0, #131072	; 0x20000
   1891c:	adds	r0, r4, r0
   18920:	adc	r1, r5, #0
   18924:	mvn	r2, #0
   18928:	and	r5, r1, r2
   1892c:	mov	r1, #16646144	; 0xfe0000
   18930:	orr	r1, r1, #-16777216	; 0xff000000
   18934:	and	r4, r0, r1
   18938:	ldr	r6, [pc, #840]	; 18c88 <read_boolean_unary_expression@@Base+0x13d4>
   1893c:	mov	r0, r8
   18940:	mov	r1, r4
   18944:	add	r6, pc, r6
   18948:	mov	r7, lr
   1894c:	bl	11eb4 <realloc@plt>
   18950:	mov	lr, r7
   18954:	str	r0, [r6]
   18958:	strd	r4, [lr]
   1895c:	mov	r8, r0
   18960:	ldr	ip, [sp, #8]
   18964:	ldr	r0, [pc, #800]	; 18c8c <read_boolean_unary_expression@@Base+0x13d8>
   18968:	ldr	r1, [sl, #4]
   1896c:	mov	r3, r8
   18970:	add	r0, pc, r0
   18974:	lsr	r2, r9, #24
   18978:	ldrb	r7, [r0]
   1897c:	ldr	r0, [pc, #780]	; 18c90 <read_boolean_unary_expression@@Base+0x13dc>
   18980:	lsr	r6, r9, #16
   18984:	ldr	r0, [pc, r0]
   18988:	strb	r9, [r3, r0]!
   1898c:	strb	r2, [r3, #3]
   18990:	lsr	r2, r9, #8
   18994:	strb	r2, [r3, #1]
   18998:	adds	r2, r0, #4
   1899c:	strb	r6, [r3, #2]
   189a0:	adc	r3, r1, #0
   189a4:	cmp	r7, #1
   189a8:	strd	r2, [sl]
   189ac:	bne	186d0 <read_boolean_unary_expression@@Base+0xe1c>
   189b0:	b	189e0 <read_boolean_unary_expression@@Base+0x112c>
   189b4:	mov	r6, r8
   189b8:	lsr	r2, r9, #24
   189bc:	strb	r9, [r6, r0]!
   189c0:	lsr	r3, r9, #16
   189c4:	strb	r2, [r6, #3]
   189c8:	adds	r2, r0, #4
   189cc:	lsr	r7, r9, #8
   189d0:	strb	r3, [r6, #2]
   189d4:	adc	r3, r1, #0
   189d8:	strb	r7, [r6, #1]
   189dc:	strd	r2, [sl]
   189e0:	ldr	r5, [lr, #4]
   189e4:	ldr	r4, [pc, #680]	; 18c94 <read_boolean_unary_expression@@Base+0x13e0>
   189e8:	adds	r7, r0, #8
   189ec:	adc	r6, r1, #0
   189f0:	ldr	r4, [pc, r4]
   189f4:	subs	r7, r4, r7
   189f8:	sbcs	r7, r5, r6
   189fc:	bcs	186d0 <read_boolean_unary_expression@@Base+0xe1c>
   18a00:	mov	r2, #7
   18a04:	orr	r2, r2, #131072	; 0x20000
   18a08:	adds	r0, r0, r2
   18a0c:	adc	r1, r1, #0
   18a10:	mvn	r2, #0
   18a14:	and	r5, r1, r2
   18a18:	mov	r1, #16646144	; 0xfe0000
   18a1c:	orr	r1, r1, #-16777216	; 0xff000000
   18a20:	and	r6, r0, r1
   18a24:	ldr	r4, [pc, #620]	; 18c98 <read_boolean_unary_expression@@Base+0x13e4>
   18a28:	mov	r0, r8
   18a2c:	mov	r1, r6
   18a30:	add	r4, pc, r4
   18a34:	mov	r7, lr
   18a38:	bl	11eb4 <realloc@plt>
   18a3c:	ldr	ip, [sp, #8]
   18a40:	str	r6, [r7]
   18a44:	str	r5, [r7, #4]
   18a48:	str	r0, [r4]
   18a4c:	ldr	r3, [sl, #4]
   18a50:	ldr	r2, [pc, #580]	; 18c9c <read_boolean_unary_expression@@Base+0x13e8>
   18a54:	mov	r8, r0
   18a58:	ldr	r2, [pc, r2]
   18a5c:	b	186d0 <read_boolean_unary_expression@@Base+0xe1c>
   18a60:	mov	r0, #0
   18a64:	str	r0, [sp, #4]
   18a68:	ldr	sl, [pc, #600]	; 18cc8 <read_boolean_unary_expression@@Base+0x1414>
   18a6c:	add	sl, pc, sl
   18a70:	mov	r3, r8
   18a74:	ldr	r0, [sp, #8]
   18a78:	strb	r5, [r3, r4]!
   18a7c:	adds	r4, r4, #4
   18a80:	lsr	r6, r5, #24
   18a84:	lsr	r1, r5, #16
   18a88:	lsr	r2, r5, #8
   18a8c:	adc	r5, r7, #0
   18a90:	strb	r6, [r3, #3]
   18a94:	strb	r1, [r3, #2]
   18a98:	strb	r2, [r3, #1]
   18a9c:	strd	r4, [sl]
   18aa0:	bl	11f38 <strlen@plt>
   18aa4:	mov	r7, r0
   18aa8:	cmp	r9, #0
   18aac:	beq	18b4c <read_boolean_unary_expression@@Base+0x1298>
   18ab0:	ldr	r6, [pc, #548]	; 18cdc <read_boolean_unary_expression@@Base+0x1428>
   18ab4:	adds	r0, r4, r7
   18ab8:	adc	r1, r5, #0
   18abc:	add	r6, pc, r6
   18ac0:	ldr	r2, [r6, #4]
   18ac4:	ldr	r3, [pc, #532]	; 18ce0 <read_boolean_unary_expression@@Base+0x142c>
   18ac8:	ldr	r3, [pc, r3]
   18acc:	subs	r3, r3, r0
   18ad0:	sbcs	r2, r2, r1
   18ad4:	bcs	18b44 <read_boolean_unary_expression@@Base+0x1290>
   18ad8:	mov	r2, #7
   18adc:	orr	r2, r2, #131072	; 0x20000
   18ae0:	adds	r0, r0, r2
   18ae4:	adc	r1, r1, #0
   18ae8:	subs	r0, r0, #8
   18aec:	sbc	r1, r1, #0
   18af0:	mvn	r2, #0
   18af4:	and	r5, r1, r2
   18af8:	mov	r1, #16646144	; 0xfe0000
   18afc:	orr	r1, r1, #-16777216	; 0xff000000
   18b00:	and	r4, r0, r1
   18b04:	ldr	r9, [pc, #472]	; 18ce4 <read_boolean_unary_expression@@Base+0x1430>
   18b08:	mov	r0, r8
   18b0c:	mov	r1, r4
   18b10:	add	r9, pc, r9
   18b14:	bl	11eb4 <realloc@plt>
   18b18:	strd	r4, [r6]
   18b1c:	str	r0, [r9]
   18b20:	mov	r8, r0
   18b24:	ldr	r5, [sl, #4]
   18b28:	ldr	r0, [pc, #440]	; 18ce8 <read_boolean_unary_expression@@Base+0x1434>
   18b2c:	add	r0, pc, r0
   18b30:	ldrb	r0, [r0]
   18b34:	str	r0, [sp, #4]
   18b38:	ldr	r4, [pc, #428]	; 18cec <read_boolean_unary_expression@@Base+0x1438>
   18b3c:	ldr	r4, [pc, r4]
   18b40:	b	18b4c <read_boolean_unary_expression@@Base+0x1298>
   18b44:	mov	r0, #1
   18b48:	str	r0, [sp, #4]
   18b4c:	ldr	r9, [sp, #8]
   18b50:	add	r0, r8, r4
   18b54:	mov	r2, r7
   18b58:	mov	r1, r9
   18b5c:	bl	11e78 <memcpy@plt>
   18b60:	adds	r6, r4, r7
   18b64:	mov	r0, r9
   18b68:	adc	r5, r5, #0
   18b6c:	str	r6, [sl]
   18b70:	str	r5, [sl, #4]
   18b74:	bl	11f38 <strlen@plt>
   18b78:	and	r0, r0, #3
   18b7c:	rsb	r4, r0, #4
   18b80:	ldr	r0, [sp, #4]
   18b84:	cmp	r0, #0
   18b88:	beq	18c10 <read_boolean_unary_expression@@Base+0x135c>
   18b8c:	ldr	r7, [pc, #348]	; 18cf0 <read_boolean_unary_expression@@Base+0x143c>
   18b90:	adds	r0, r6, r4
   18b94:	adc	r1, r5, #0
   18b98:	add	r7, pc, r7
   18b9c:	ldr	r2, [r7, #4]
   18ba0:	ldr	r3, [pc, #332]	; 18cf4 <read_boolean_unary_expression@@Base+0x1440>
   18ba4:	ldr	r3, [pc, r3]
   18ba8:	subs	r3, r3, r0
   18bac:	sbcs	r2, r2, r1
   18bb0:	bcs	18c10 <read_boolean_unary_expression@@Base+0x135c>
   18bb4:	mov	r2, #7
   18bb8:	orr	r2, r2, #131072	; 0x20000
   18bbc:	adds	r0, r0, r2
   18bc0:	adc	r1, r1, #0
   18bc4:	subs	r0, r0, #8
   18bc8:	sbc	r1, r1, #0
   18bcc:	mvn	r2, #0
   18bd0:	and	r5, r1, r2
   18bd4:	mov	r1, #16646144	; 0xfe0000
   18bd8:	orr	r1, r1, #-16777216	; 0xff000000
   18bdc:	and	r6, r0, r1
   18be0:	ldr	r9, [pc, #272]	; 18cf8 <read_boolean_unary_expression@@Base+0x1444>
   18be4:	mov	r0, r8
   18be8:	mov	r1, r6
   18bec:	add	r9, pc, r9
   18bf0:	bl	11eb4 <realloc@plt>
   18bf4:	str	r6, [r7]
   18bf8:	str	r5, [r7, #4]
   18bfc:	str	r0, [r9]
   18c00:	ldr	r5, [sl, #4]
   18c04:	ldr	r6, [pc, #240]	; 18cfc <read_boolean_unary_expression@@Base+0x1448>
   18c08:	mov	r8, r0
   18c0c:	ldr	r6, [pc, r6]
   18c10:	add	r0, r8, r6
   18c14:	mov	r1, #0
   18c18:	mov	r2, r4
   18c1c:	bl	11f80 <memset@plt>
   18c20:	adds	r0, r6, r4
   18c24:	adc	r1, r5, #0
   18c28:	strd	r0, [sl]
   18c2c:	sub	sp, fp, #28
   18c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c34:	andeq	r5, r1, ip, asr r9
   18c38:	andeq	r5, r1, r0, asr #18
   18c3c:	andeq	r5, r1, ip, lsr r9
   18c40:	andeq	r5, r1, r0, lsr r9
   18c44:	andeq	r5, r1, ip, lsr #18
   18c48:	andeq	r5, r1, r0, lsl r9
   18c4c:	andeq	r5, r1, r4, asr #17
   18c50:	andeq	r5, r1, r0, asr #17
   18c54:	andeq	r5, r1, ip, lsr #17
   18c58:	andeq	r5, r1, r4, lsr #17
   18c5c:	andeq	r5, r1, ip, lsl #17
   18c60:	andeq	r5, r1, r4, asr #16
   18c64:	andeq	r5, r1, ip, lsr r7
   18c68:	andeq	r5, r1, r4, lsr r8
   18c6c:	andeq	r5, r1, r8, lsr #16
   18c70:	strdeq	r5, [r1], -r0
   18c74:	andeq	r5, r1, r4, ror #15
   18c78:			; <UNDEFINED> instruction: 0x000157b4
   18c7c:			; <UNDEFINED> instruction: 0x000157b8
   18c80:	andeq	r5, r1, r4, lsr #15
   18c84:	andeq	r5, r1, ip, asr #9
   18c88:	andeq	r5, r1, r8, lsl #9
   18c8c:	andeq	r5, r1, r4, asr r4
   18c90:	andeq	r5, r1, r4, asr r4
   18c94:	andeq	r5, r1, r0, ror #7
   18c98:	muleq	r1, ip, r3
   18c9c:	andeq	r5, r1, r0, lsl #7
   18ca0:			; <UNDEFINED> instruction: 0x000156b0
   18ca4:	andeq	r5, r1, r0, lsr #13
   18ca8:	muleq	r1, r4, r6
   18cac:	andeq	r5, r1, r0, asr r6
   18cb0:	andeq	r5, r1, ip, lsr r6
   18cb4:	andeq	r5, r1, r0, lsr r6
   18cb8:	andeq	r5, r1, r0, lsl #12
   18cbc:	andeq	r5, r1, r8, asr #11
   18cc0:			; <UNDEFINED> instruction: 0x000155b8
   18cc4:	andeq	r5, r1, ip, lsr #11
   18cc8:	andeq	r5, r1, ip, ror #6
   18ccc:	andeq	r5, r1, r8, asr r5
   18cd0:	andeq	r5, r1, ip, asr #10
   18cd4:	andeq	r5, r1, ip, lsr #10
   18cd8:	andeq	r5, r1, r4, lsr r5
   18cdc:	andeq	r5, r1, r4, lsl r3
   18ce0:	andeq	r5, r1, r8, lsl #6
   18ce4:			; <UNDEFINED> instruction: 0x000152bc
   18ce8:	muleq	r1, r8, r2
   18cec:	muleq	r1, ip, r2
   18cf0:	andeq	r5, r1, r8, lsr r2
   18cf4:	andeq	r5, r1, ip, lsr #4
   18cf8:	andeq	r5, r1, r0, ror #3
   18cfc:	andeq	r5, r1, ip, asr #3
   18d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d04:	add	fp, sp, #28
   18d08:	sub	sp, sp, #28
   18d0c:	mov	ip, r0
   18d10:	ldr	r0, [pc, #1728]	; 193d8 <read_boolean_unary_expression@@Base+0x1b24>
   18d14:	ldr	r0, [pc, r0]
   18d18:	cmp	r0, #0
   18d1c:	beq	18e38 <read_boolean_unary_expression@@Base+0x1584>
   18d20:	ldr	r2, [pc, #1716]	; 193dc <read_boolean_unary_expression@@Base+0x1b28>
   18d24:	mov	sl, r1
   18d28:	add	r2, pc, r2
   18d2c:	ldr	r3, [r2, #4]
   18d30:	ldr	r4, [pc, #1704]	; 193e0 <read_boolean_unary_expression@@Base+0x1b2c>
   18d34:	ldr	r4, [pc, r4]
   18d38:	ldr	r6, [pc, #1700]	; 193e4 <read_boolean_unary_expression@@Base+0x1b30>
   18d3c:	add	r6, pc, r6
   18d40:	ldrb	r0, [r6]
   18d44:	cmp	r0, #0
   18d48:	beq	18e40 <read_boolean_unary_expression@@Base+0x158c>
   18d4c:	ldr	r8, [pc, #1720]	; 1940c <read_boolean_unary_expression@@Base+0x1b58>
   18d50:	mov	r5, #10551296	; 0xa10000
   18d54:	adds	r9, r4, #4
   18d58:	add	r8, pc, r8
   18d5c:	adc	r2, r3, #0
   18d60:	ldr	r0, [r8, #4]
   18d64:	ldr	r1, [pc, #1700]	; 19410 <read_boolean_unary_expression@@Base+0x1b5c>
   18d68:	orr	r5, r5, #16777216	; 0x1000000
   18d6c:	ldr	r1, [pc, r1]
   18d70:	subs	r1, r1, r9
   18d74:	sbcs	r0, r0, r2
   18d78:	bcs	18f50 <read_boolean_unary_expression@@Base+0x169c>
   18d7c:	mov	r0, #3
   18d80:	orr	r0, r0, #131072	; 0x20000
   18d84:	adds	r0, r4, r0
   18d88:	adc	r1, r3, #0
   18d8c:	mvn	r2, #0
   18d90:	and	r9, r1, r2
   18d94:	mov	r1, #16646144	; 0xfe0000
   18d98:	orr	r1, r1, #-16777216	; 0xff000000
   18d9c:	and	r4, r0, r1
   18da0:	ldr	r0, [pc, #1652]	; 1941c <read_boolean_unary_expression@@Base+0x1b68>
   18da4:	mov	r1, r4
   18da8:	mov	r7, ip
   18dac:	ldr	r0, [pc, r0]
   18db0:	bl	11eb4 <realloc@plt>
   18db4:	ldr	ip, [pc, #1636]	; 19420 <read_boolean_unary_expression@@Base+0x1b6c>
   18db8:	ldr	lr, [pc, #1636]	; 19424 <read_boolean_unary_expression@@Base+0x1b70>
   18dbc:	stm	r8, {r4, r9}
   18dc0:	ldr	r1, [pc, #1632]	; 19428 <read_boolean_unary_expression@@Base+0x1b74>
   18dc4:	add	ip, pc, ip
   18dc8:	add	lr, pc, lr
   18dcc:	add	r1, pc, r1
   18dd0:	mov	r2, r0
   18dd4:	str	r2, [r1]
   18dd8:	mov	r6, ip
   18ddc:	ldrb	ip, [ip]
   18de0:	ldr	r3, [lr, #4]
   18de4:	ldr	r4, [pc, #1600]	; 1942c <read_boolean_unary_expression@@Base+0x1b78>
   18de8:	lsr	r0, r5, #24
   18dec:	mov	r1, r8
   18df0:	ldr	r4, [pc, r4]
   18df4:	str	r2, [sp, #20]
   18df8:	lsl	r8, r7, #1
   18dfc:	strb	r5, [r2, r4]!
   18e00:	adds	r9, r4, #4
   18e04:	strb	r0, [r2, #3]
   18e08:	lsr	r0, r5, #16
   18e0c:	strb	r0, [r2, #2]
   18e10:	lsr	r0, r5, #8
   18e14:	strb	r0, [r2, #1]
   18e18:	adc	r5, r3, #0
   18e1c:	mov	r0, #0
   18e20:	cmp	ip, #1
   18e24:	str	r3, [sp, #16]
   18e28:	str	r9, [lr]
   18e2c:	str	r5, [lr, #4]
   18e30:	beq	18fa4 <read_boolean_unary_expression@@Base+0x16f0>
   18e34:	b	190f4 <read_boolean_unary_expression@@Base+0x1840>
   18e38:	sub	sp, fp, #28
   18e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e40:	ldr	r0, [pc, #1440]	; 193e8 <read_boolean_unary_expression@@Base+0x1b34>
   18e44:	mov	r7, r3
   18e48:	adds	r9, r4, #4
   18e4c:	mov	lr, r2
   18e50:	ldr	r0, [pc, r0]
   18e54:	str	r0, [sp, #20]
   18e58:	ldrb	r1, [r0, r4]!
   18e5c:	str	r7, [sp, #16]
   18e60:	ldrb	r5, [r0, #1]
   18e64:	ldrb	r3, [r0, #2]
   18e68:	ldrb	r0, [r0, #3]
   18e6c:	orr	r1, r1, r5, lsl #8
   18e70:	orr	r1, r1, r3, lsl #16
   18e74:	orr	r3, r1, r0, lsl #24
   18e78:	adc	r5, r7, #0
   18e7c:	mov	r7, #0
   18e80:	cmn	r3, #1
   18e84:	str	r9, [r2]
   18e88:	str	r5, [r2, #4]
   18e8c:	beq	19050 <read_boolean_unary_expression@@Base+0x179c>
   18e90:	mov	r0, #10551296	; 0xa10000
   18e94:	orr	r0, r0, #16777216	; 0x1000000
   18e98:	cmp	r3, r0
   18e9c:	bne	1905c <read_boolean_unary_expression@@Base+0x17a8>
   18ea0:	str	r5, [sp, #8]
   18ea4:	ldr	r0, [sp, #20]
   18ea8:	str	r4, [sp, #4]
   18eac:	adds	r5, r4, #8
   18eb0:	ldr	r3, [r0, r9]
   18eb4:	ldr	r0, [sp, #16]
   18eb8:	mov	r1, r9
   18ebc:	adc	r9, r0, #0
   18ec0:	cmn	r3, #1
   18ec4:	stm	lr, {r5, r9}
   18ec8:	beq	19068 <read_boolean_unary_expression@@Base+0x17b4>
   18ecc:	lsr	r0, r3, #1
   18ed0:	mov	r7, ip
   18ed4:	cmp	r0, ip
   18ed8:	bne	19068 <read_boolean_unary_expression@@Base+0x17b4>
   18edc:	lsl	r0, r7, #3
   18ee0:	mov	r4, r1
   18ee4:	bl	11ef0 <malloc@plt>
   18ee8:	mov	r1, r0
   18eec:	cmp	r7, #0
   18ef0:	beq	19090 <read_boolean_unary_expression@@Base+0x17dc>
   18ef4:	mov	r0, r7
   18ef8:	str	r7, [sp, #24]
   18efc:	str	r1, [sp, #12]
   18f00:	ldr	r2, [sp, #20]
   18f04:	ldr	r3, [r2, r5]!
   18f08:	adds	r5, r5, #8
   18f0c:	ldr	r2, [r2, #4]
   18f10:	str	r3, [r1]
   18f14:	adc	r9, r9, #0
   18f18:	str	r2, [r1, #4]
   18f1c:	subs	r0, r0, #1
   18f20:	add	r1, r1, #8
   18f24:	bne	18f00 <read_boolean_unary_expression@@Base+0x164c>
   18f28:	ldr	lr, [pc, #1236]	; 19404 <read_boolean_unary_expression@@Base+0x1b50>
   18f2c:	add	lr, pc, lr
   18f30:	mov	r0, lr
   18f34:	stm	r0, {r5, r9}
   18f38:	ldr	ip, [pc, #1224]	; 19408 <read_boolean_unary_expression@@Base+0x1b54>
   18f3c:	ldr	r0, [sp, #12]
   18f40:	add	ip, pc, ip
   18f44:	mov	r6, ip
   18f48:	ldr	ip, [sp, #24]
   18f4c:	b	190ac <read_boolean_unary_expression@@Base+0x17f8>
   18f50:	str	r3, [sp, #16]
   18f54:	ldr	r3, [pc, #1208]	; 19414 <read_boolean_unary_expression@@Base+0x1b60>
   18f58:	mov	lr, r5
   18f5c:	mov	r7, ip
   18f60:	lsr	ip, r5, #16
   18f64:	ldr	r3, [pc, r3]
   18f68:	lsr	r1, r5, #8
   18f6c:	str	r3, [sp, #20]
   18f70:	strb	lr, [r3, r4]!
   18f74:	lsr	r0, lr, #24
   18f78:	strb	r1, [r3, #1]
   18f7c:	strb	r0, [r3, #3]
   18f80:	strb	ip, [r3, #2]
   18f84:	ldr	lr, [pc, #1164]	; 19418 <read_boolean_unary_expression@@Base+0x1b64>
   18f88:	lsl	r5, r7, #1
   18f8c:	add	lr, pc, lr
   18f90:	mov	r1, r8
   18f94:	mov	r8, r5
   18f98:	str	r9, [lr]
   18f9c:	str	r2, [lr, #4]
   18fa0:	mov	r5, r2
   18fa4:	str	r8, [sp, #24]
   18fa8:	mov	r8, r1
   18fac:	ldr	r0, [sp, #16]
   18fb0:	ldr	r2, [r8, #4]
   18fb4:	ldr	r3, [pc, #1140]	; 19430 <read_boolean_unary_expression@@Base+0x1b7c>
   18fb8:	adds	ip, r4, #8
   18fbc:	adc	r1, r0, #0
   18fc0:	mov	r0, #0
   18fc4:	ldr	r3, [pc, r3]
   18fc8:	subs	r3, r3, ip
   18fcc:	sbcs	r1, r2, r1
   18fd0:	bcs	19048 <read_boolean_unary_expression@@Base+0x1794>
   18fd4:	ldr	r5, [pc, #1112]	; 19434 <read_boolean_unary_expression@@Base+0x1b80>
   18fd8:	mov	r0, #3
   18fdc:	ldr	r1, [sp, #16]
   18fe0:	orr	r0, r0, #131072	; 0x20000
   18fe4:	adds	r0, r4, r0
   18fe8:	adc	r1, r1, #0
   18fec:	adds	r0, r0, #4
   18ff0:	adc	r1, r1, #0
   18ff4:	mvn	r2, #0
   18ff8:	and	r9, r1, r2
   18ffc:	mov	r1, #16646144	; 0xfe0000
   19000:	orr	r1, r1, #-16777216	; 0xff000000
   19004:	and	r4, r0, r1
   19008:	ldr	r0, [sp, #20]
   1900c:	mov	r1, r4
   19010:	add	r5, pc, r5
   19014:	bl	11eb4 <realloc@plt>
   19018:	ldr	ip, [pc, #1048]	; 19438 <read_boolean_unary_expression@@Base+0x1b84>
   1901c:	ldr	lr, [pc, #1048]	; 1943c <read_boolean_unary_expression@@Base+0x1b88>
   19020:	stm	r8, {r4, r9}
   19024:	add	lr, pc, lr
   19028:	str	r0, [r5]
   1902c:	str	r0, [sp, #20]
   19030:	ldr	r5, [lr, #4]
   19034:	ldr	r9, [pc, #1028]	; 19440 <read_boolean_unary_expression@@Base+0x1b8c>
   19038:	add	ip, pc, ip
   1903c:	mov	r6, ip
   19040:	mov	r0, #0
   19044:	ldr	r9, [pc, r9]
   19048:	ldr	r8, [sp, #24]
   1904c:	b	190f4 <read_boolean_unary_expression@@Base+0x1840>
   19050:	ldr	r1, [sp, #16]
   19054:	mov	r0, #0
   19058:	b	190c0 <read_boolean_unary_expression@@Base+0x180c>
   1905c:	ldr	r1, [pc, #904]	; 193ec <read_boolean_unary_expression@@Base+0x1b38>
   19060:	add	r1, pc, r1
   19064:	b	19070 <read_boolean_unary_expression@@Base+0x17bc>
   19068:	ldr	r1, [pc, #904]	; 193f8 <read_boolean_unary_expression@@Base+0x1b44>
   1906c:	add	r1, pc, r1
   19070:	ldr	r0, [pc, #888]	; 193f0 <read_boolean_unary_expression@@Base+0x1b3c>
   19074:	ldr	r0, [pc, r0]
   19078:	ldr	r0, [r0]
   1907c:	ldr	r2, [pc, #880]	; 193f4 <read_boolean_unary_expression@@Base+0x1b40>
   19080:	ldr	r2, [pc, r2]
   19084:	sub	sp, fp, #28
   19088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1908c:	b	11f50 <fprintf@plt>
   19090:	ldr	lr, [pc, #868]	; 193fc <read_boolean_unary_expression@@Base+0x1b48>
   19094:	ldr	ip, [pc, #868]	; 19400 <read_boolean_unary_expression@@Base+0x1b4c>
   19098:	mov	r0, r1
   1909c:	add	lr, pc, lr
   190a0:	add	ip, pc, ip
   190a4:	mov	r6, ip
   190a8:	mov	ip, r7
   190ac:	mov	r9, r4
   190b0:	ldr	r5, [sp, #8]
   190b4:	ldr	r4, [sp, #4]
   190b8:	ldr	r1, [sp, #16]
   190bc:	mov	r7, #0
   190c0:	str	r4, [lr]
   190c4:	str	r1, [lr, #4]
   190c8:	ldr	r2, [sp, #20]
   190cc:	mov	r1, #1
   190d0:	lsl	r8, ip, #1
   190d4:	strb	r7, [r2, r4]!
   190d8:	strb	r1, [r2, #3]
   190dc:	mov	r1, #161	; 0xa1
   190e0:	strb	r7, [r2, #1]
   190e4:	strb	r1, [r2, #2]
   190e8:	str	r9, [lr]
   190ec:	str	r5, [lr, #4]
   190f0:	mov	r7, ip
   190f4:	ldr	r3, [sp, #20]
   190f8:	lsr	r1, r8, #16
   190fc:	mov	ip, r3
   19100:	strb	r8, [r3, r9]!
   19104:	lsr	r4, r8, #24
   19108:	lsr	r2, r8, #8
   1910c:	adds	r8, r9, #4
   19110:	strb	r1, [r3, #2]
   19114:	adc	r1, r5, #0
   19118:	cmp	r7, #0
   1911c:	strb	r4, [r3, #3]
   19120:	strb	r2, [r3, #1]
   19124:	str	r8, [lr]
   19128:	str	r1, [lr, #4]
   1912c:	str	r7, [sp, #24]
   19130:	beq	193cc <read_boolean_unary_expression@@Base+0x1b18>
   19134:	ldr	r7, [pc, #776]	; 19444 <read_boolean_unary_expression@@Base+0x1b90>
   19138:	mov	r4, lr
   1913c:	mov	r2, r0
   19140:	add	r7, pc, r7
   19144:	str	r0, [sp, #12]
   19148:	cmp	r0, #0
   1914c:	mov	r0, r4
   19150:	str	r2, [sp, #16]
   19154:	beq	19160 <read_boolean_unary_expression@@Base+0x18ac>
   19158:	ldrd	r2, [r2]
   1915c:	b	19168 <read_boolean_unary_expression@@Base+0x18b4>
   19160:	mov	r2, #0
   19164:	mov	r3, #0
   19168:	ldrd	r4, [sl]
   1916c:	adds	r4, r4, r2
   19170:	adc	r5, r5, r3
   19174:	strd	r4, [sl]
   19178:	ldrb	r2, [r6]
   1917c:	str	sl, [sp, #20]
   19180:	cmp	r2, #0
   19184:	beq	19250 <read_boolean_unary_expression@@Base+0x199c>
   19188:	ldr	r3, [r7, #4]
   1918c:	ldr	r6, [pc, #692]	; 19448 <read_boolean_unary_expression@@Base+0x1b94>
   19190:	adds	r2, r8, #4
   19194:	adc	r9, r1, #0
   19198:	ldr	r6, [pc, r6]
   1919c:	subs	r2, r6, r2
   191a0:	sbcs	r2, r3, r9
   191a4:	bcs	1928c <read_boolean_unary_expression@@Base+0x19d8>
   191a8:	mov	r2, #3
   191ac:	orr	r2, r2, #131072	; 0x20000
   191b0:	adds	r0, r8, r2
   191b4:	adc	r1, r1, #0
   191b8:	mvn	r2, #0
   191bc:	and	r8, r1, r2
   191c0:	mov	r1, #16646144	; 0xfe0000
   191c4:	orr	r1, r1, #-16777216	; 0xff000000
   191c8:	and	r6, r0, r1
   191cc:	mov	r0, ip
   191d0:	mov	r1, r6
   191d4:	bl	11eb4 <realloc@plt>
   191d8:	ldr	ip, [pc, #620]	; 1944c <read_boolean_unary_expression@@Base+0x1b98>
   191dc:	ldr	lr, [pc, #620]	; 19450 <read_boolean_unary_expression@@Base+0x1b9c>
   191e0:	stm	r7, {r6, r8}
   191e4:	mov	r3, r0
   191e8:	ldr	r0, [pc, #612]	; 19454 <read_boolean_unary_expression@@Base+0x1ba0>
   191ec:	add	lr, pc, lr
   191f0:	mov	r9, lr
   191f4:	add	r0, pc, r0
   191f8:	add	ip, pc, ip
   191fc:	str	r3, [r0]
   19200:	mov	lr, ip
   19204:	ldrb	ip, [ip]
   19208:	ldr	r1, [r9, #4]
   1920c:	ldr	r8, [pc, #580]	; 19458 <read_boolean_unary_expression@@Base+0x1ba4>
   19210:	mov	r7, r3
   19214:	lsr	r2, r4, #24
   19218:	ldr	r8, [pc, r8]
   1921c:	lsr	r6, r4, #16
   19220:	strb	r4, [r7, r8]!
   19224:	strb	r2, [r7, #3]
   19228:	lsr	r2, r4, #8
   1922c:	strb	r2, [r7, #1]
   19230:	adds	r2, r8, #4
   19234:	mov	r4, r9
   19238:	adc	r9, r1, #0
   1923c:	cmp	ip, #1
   19240:	strb	r6, [r7, #2]
   19244:	stm	r4, {r2, r9}
   19248:	beq	192c0 <read_boolean_unary_expression@@Base+0x1a0c>
   1924c:	b	1936c <read_boolean_unary_expression@@Base+0x1ab8>
   19250:	mov	r7, ip
   19254:	lsr	r2, r4, #24
   19258:	strb	r4, [r7, r8]!
   1925c:	lsr	r9, r4, #16
   19260:	strb	r2, [r7, #3]
   19264:	adds	r2, r8, #4
   19268:	mov	lr, r6
   1926c:	lsr	r6, r4, #8
   19270:	strb	r9, [r7, #2]
   19274:	adc	r9, r1, #0
   19278:	mov	r4, r0
   1927c:	strb	r6, [r7, #1]
   19280:	mov	r3, ip
   19284:	stm	r4, {r2, r9}
   19288:	b	1936c <read_boolean_unary_expression@@Base+0x1ab8>
   1928c:	mov	r6, ip
   19290:	lsr	r2, r4, #24
   19294:	strb	r4, [r6, r8]!
   19298:	lsr	r9, r4, #16
   1929c:	strb	r2, [r6, #3]
   192a0:	adds	r2, r8, #4
   192a4:	lsr	r7, r4, #8
   192a8:	strb	r9, [r6, #2]
   192ac:	adc	r9, r1, #0
   192b0:	mov	r4, r0
   192b4:	strb	r7, [r6, #1]
   192b8:	mov	r3, ip
   192bc:	stm	r4, {r2, r9}
   192c0:	ldr	lr, [pc, #404]	; 1945c <read_boolean_unary_expression@@Base+0x1ba8>
   192c4:	mov	r0, r4
   192c8:	adds	r7, r8, #8
   192cc:	add	lr, pc, lr
   192d0:	adc	ip, r1, #0
   192d4:	ldr	r4, [lr, #4]
   192d8:	ldr	r6, [pc, #384]	; 19460 <read_boolean_unary_expression@@Base+0x1bac>
   192dc:	ldr	r6, [pc, r6]
   192e0:	subs	r7, r6, r7
   192e4:	sbcs	r7, r4, ip
   192e8:	bcs	19360 <read_boolean_unary_expression@@Base+0x1aac>
   192ec:	mov	r2, #3
   192f0:	orr	r2, r2, #131072	; 0x20000
   192f4:	adds	r0, r8, r2
   192f8:	adc	r1, r1, #0
   192fc:	adds	r0, r0, #4
   19300:	adc	r1, r1, #0
   19304:	mvn	r2, #0
   19308:	and	r7, r1, r2
   1930c:	mov	r1, #16646144	; 0xfe0000
   19310:	orr	r1, r1, #-16777216	; 0xff000000
   19314:	and	r6, r0, r1
   19318:	mov	r0, r3
   1931c:	mov	r1, r6
   19320:	mov	r8, lr
   19324:	bl	11eb4 <realloc@plt>
   19328:	ldr	lr, [pc, #312]	; 19468 <read_boolean_unary_expression@@Base+0x1bb4>
   1932c:	strd	r6, [r8]
   19330:	mov	r3, r0
   19334:	add	lr, pc, lr
   19338:	mov	r4, lr
   1933c:	ldr	r9, [lr, #4]
   19340:	ldr	r0, [pc, #292]	; 1946c <read_boolean_unary_expression@@Base+0x1bb8>
   19344:	add	r0, pc, r0
   19348:	str	r3, [r0]
   1934c:	ldr	r2, [pc, #284]	; 19470 <read_boolean_unary_expression@@Base+0x1bbc>
   19350:	ldr	r2, [pc, r2]
   19354:	ldr	lr, [pc, #280]	; 19474 <read_boolean_unary_expression@@Base+0x1bc0>
   19358:	add	lr, pc, lr
   1935c:	b	1936c <read_boolean_unary_expression@@Base+0x1ab8>
   19360:	ldr	lr, [pc, #252]	; 19464 <read_boolean_unary_expression@@Base+0x1bb0>
   19364:	mov	r4, r0
   19368:	add	lr, pc, lr
   1936c:	mov	ip, r3
   19370:	lsr	r1, r5, #16
   19374:	strb	r5, [r3, r2]!
   19378:	lsr	r0, r5, #24
   1937c:	lsr	r7, r5, #8
   19380:	adds	r8, r2, #4
   19384:	strb	r1, [r3, #2]
   19388:	adc	r1, r9, #0
   1938c:	strb	r0, [r3, #3]
   19390:	strb	r7, [r3, #1]
   19394:	str	r8, [r4]
   19398:	str	r1, [r4, #4]
   1939c:	ldr	r0, [sp, #24]
   193a0:	mov	r6, lr
   193a4:	subs	r0, r0, #1
   193a8:	str	r0, [sp, #24]
   193ac:	ldr	sl, [sp, #20]
   193b0:	ldr	r2, [sp, #16]
   193b4:	ldr	r0, [sp, #12]
   193b8:	ldr	r7, [pc, #184]	; 19478 <read_boolean_unary_expression@@Base+0x1bc4>
   193bc:	add	sl, sl, #8
   193c0:	add	r2, r2, #8
   193c4:	add	r7, pc, r7
   193c8:	bne	19148 <read_boolean_unary_expression@@Base+0x1894>
   193cc:	sub	sp, fp, #28
   193d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193d4:	b	11e6c <free@plt>
   193d8:	strheq	r5, [r1], -r4
   193dc:	strheq	r5, [r1], -r0
   193e0:	andeq	r5, r1, r4, lsr #1
   193e4:	andeq	r5, r1, r8, lsl #1
   193e8:	andeq	r4, r1, ip, ror pc
   193ec:	andeq	r2, r0, r0, lsl #21
   193f0:	andeq	r4, r1, r4, asr #32
   193f4:	andeq	r4, r1, r0, asr #26
   193f8:			; <UNDEFINED> instruction: 0x00002abe
   193fc:	andeq	r4, r1, ip, lsr sp
   19400:	andeq	r4, r1, r4, lsr #26
   19404:	andeq	r4, r1, ip, lsr #29
   19408:	andeq	r4, r1, r4, lsl #29
   1940c:	andeq	r5, r1, r8, ror r0
   19410:	andeq	r5, r1, r4, rrx
   19414:	andeq	r4, r1, r8, ror #28
   19418:	andeq	r4, r1, ip, asr #28
   1941c:	andeq	r5, r1, r0, lsr #32
   19420:	andeq	r5, r1, r0
   19424:	andeq	r5, r1, r0, lsl r0
   19428:	andeq	r5, r1, r0
   1942c:	andeq	r4, r1, r8, ror #31
   19430:	andeq	r4, r1, ip, lsl #28
   19434:			; <UNDEFINED> instruction: 0x00014dbc
   19438:	andeq	r4, r1, ip, lsl #27
   1943c:			; <UNDEFINED> instruction: 0x00014db4
   19440:	muleq	r1, r4, sp
   19444:	muleq	r1, r0, ip
   19448:	andeq	r4, r1, r8, lsr ip
   1944c:	andeq	r4, r1, ip, asr #23
   19450:	andeq	r4, r1, ip, ror #23
   19454:	ldrdeq	r4, [r1], -r8
   19458:	andeq	r4, r1, r0, asr #23
   1945c:	andeq	r4, r1, r4, lsl #22
   19460:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   19464:	andeq	r4, r1, ip, asr sl
   19468:	andeq	r4, r1, r4, lsr #21
   1946c:	andeq	r4, r1, r8, lsl #21
   19470:	andeq	r4, r1, r8, lsl #21
   19474:	andeq	r4, r1, ip, ror #20
   19478:	andeq	r4, r1, ip, lsl #20
   1947c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19480:	add	fp, sp, #28
   19484:	sub	sp, sp, #4
   19488:	ldr	r0, [pc, #3180]	; 1a0fc <read_boolean_unary_expression@@Base+0x2848>
   1948c:	ldr	r0, [pc, r0]
   19490:	cmp	r0, #0
   19494:	beq	19af0 <read_boolean_unary_expression@@Base+0x223c>
   19498:	ldr	sl, [pc, #3168]	; 1a100 <read_boolean_unary_expression@@Base+0x284c>
   1949c:	add	sl, pc, sl
   194a0:	ldr	r6, [sl, #4]
   194a4:	ldr	r5, [pc, #3160]	; 1a104 <read_boolean_unary_expression@@Base+0x2850>
   194a8:	ldr	r5, [pc, r5]
   194ac:	ldr	r8, [pc, #3156]	; 1a108 <read_boolean_unary_expression@@Base+0x2854>
   194b0:	add	r8, pc, r8
   194b4:	ldrb	r0, [r8]
   194b8:	cmp	r0, #0
   194bc:	beq	19580 <read_boolean_unary_expression@@Base+0x1ccc>
   194c0:	ldr	r9, [pc, #3164]	; 1a124 <read_boolean_unary_expression@@Base+0x2870>
   194c4:	adds	r2, r5, #4
   194c8:	adc	ip, r6, #0
   194cc:	add	r9, pc, r9
   194d0:	ldr	r0, [r9, #4]
   194d4:	ldr	r3, [pc, #3148]	; 1a128 <read_boolean_unary_expression@@Base+0x2874>
   194d8:	ldr	r3, [pc, r3]
   194dc:	subs	r3, r3, r2
   194e0:	sbcs	r0, r0, ip
   194e4:	bcs	195d4 <read_boolean_unary_expression@@Base+0x1d20>
   194e8:	mov	r0, #7
   194ec:	orr	r0, r0, #131072	; 0x20000
   194f0:	adds	r0, r5, r0
   194f4:	adc	r1, r6, #0
   194f8:	subs	r0, r0, #4
   194fc:	sbc	r1, r1, #0
   19500:	mvn	r2, #0
   19504:	and	r5, r1, r2
   19508:	mov	r1, #16646144	; 0xfe0000
   1950c:	orr	r1, r1, #-16777216	; 0xff000000
   19510:	ldr	r4, [pc, #3096]	; 1a130 <read_boolean_unary_expression@@Base+0x287c>
   19514:	and	r6, r0, r1
   19518:	ldr	r0, [pc, #3092]	; 1a134 <read_boolean_unary_expression@@Base+0x2880>
   1951c:	mov	r1, r6
   19520:	add	r4, pc, r4
   19524:	ldr	r0, [pc, r0]
   19528:	bl	11eb4 <realloc@plt>
   1952c:	str	r6, [r9]
   19530:	str	r5, [r9, #4]
   19534:	str	r0, [r4]
   19538:	ldrb	r3, [r8]
   1953c:	ldr	r6, [sl, #4]
   19540:	ldr	r5, [pc, #3056]	; 1a138 <read_boolean_unary_expression@@Base+0x2884>
   19544:	mov	r2, r0
   19548:	mov	r1, #0
   1954c:	mov	r7, #161	; 0xa1
   19550:	ldr	r5, [pc, r5]
   19554:	strb	r1, [r2, r5]!
   19558:	strb	r7, [r2, #3]
   1955c:	strb	r1, [r2, #2]
   19560:	strb	r1, [r2, #1]
   19564:	adds	r2, r5, #4
   19568:	adc	ip, r6, #0
   1956c:	mov	r7, #1
   19570:	cmp	r3, #1
   19574:	stm	sl, {r2, ip}
   19578:	beq	195fc <read_boolean_unary_expression@@Base+0x1d48>
   1957c:	b	197d4 <read_boolean_unary_expression@@Base+0x1f20>
   19580:	ldr	r0, [pc, #2948]	; 1a10c <read_boolean_unary_expression@@Base+0x2858>
   19584:	ldr	r0, [pc, r0]
   19588:	mov	r1, r0
   1958c:	ldrb	r2, [r1, r5]!
   19590:	ldrb	r3, [r1, #1]
   19594:	ldrb	r7, [r1, #2]
   19598:	ldrb	r1, [r1, #3]
   1959c:	orr	r2, r2, r3, lsl #8
   195a0:	orr	r2, r2, r7, lsl #16
   195a4:	orr	r3, r2, r1, lsl #24
   195a8:	adds	r2, r5, #4
   195ac:	adc	ip, r6, #0
   195b0:	cmp	r3, #-1593835520	; 0xa1000000
   195b4:	stm	sl, {r2, ip}
   195b8:	beq	19774 <read_boolean_unary_expression@@Base+0x1ec0>
   195bc:	mov	r7, #1
   195c0:	cmn	r3, #1
   195c4:	beq	197b4 <read_boolean_unary_expression@@Base+0x1f00>
   195c8:	ldr	r1, [pc, #2880]	; 1a110 <read_boolean_unary_expression@@Base+0x285c>
   195cc:	add	r1, pc, r1
   195d0:	b	19eb4 <read_boolean_unary_expression@@Base+0x2600>
   195d4:	ldr	r0, [pc, #2896]	; 1a12c <read_boolean_unary_expression@@Base+0x2878>
   195d8:	mov	r3, #0
   195dc:	mov	r4, #161	; 0xa1
   195e0:	ldr	r0, [pc, r0]
   195e4:	mov	r7, r0
   195e8:	strb	r3, [r7, r5]!
   195ec:	strb	r4, [r7, #3]
   195f0:	strb	r3, [r7, #2]
   195f4:	strb	r3, [r7, #1]
   195f8:	stm	sl, {r2, ip}
   195fc:	ldr	r4, [r9, #4]
   19600:	ldr	r1, [pc, #2868]	; 1a13c <read_boolean_unary_expression@@Base+0x2888>
   19604:	adds	r3, r5, #8
   19608:	adc	r7, r6, #0
   1960c:	ldr	r1, [pc, r1]
   19610:	subs	r1, r1, r3
   19614:	sbcs	r1, r4, r7
   19618:	bcs	196a4 <read_boolean_unary_expression@@Base+0x1df0>
   1961c:	mov	r1, #7
   19620:	orr	r1, r1, #131072	; 0x20000
   19624:	adds	r1, r5, r1
   19628:	adc	r2, r6, #0
   1962c:	mvn	r3, #0
   19630:	and	r5, r2, r3
   19634:	mov	r2, #16646144	; 0xfe0000
   19638:	orr	r2, r2, #-16777216	; 0xff000000
   1963c:	ldr	r4, [pc, #2812]	; 1a140 <read_boolean_unary_expression@@Base+0x288c>
   19640:	and	r6, r1, r2
   19644:	mov	r1, r6
   19648:	add	r4, pc, r4
   1964c:	bl	11eb4 <realloc@plt>
   19650:	str	r6, [r9]
   19654:	str	r5, [r9, #4]
   19658:	str	r0, [r4]
   1965c:	ldrb	r1, [r8]
   19660:	ldr	ip, [sl, #4]
   19664:	ldr	r2, [pc, #2776]	; 1a144 <read_boolean_unary_expression@@Base+0x2890>
   19668:	mov	r7, r0
   1966c:	mov	r3, #9
   19670:	ldr	r2, [pc, r2]
   19674:	strb	r3, [r7, r2]!
   19678:	mov	r3, #0
   1967c:	strb	r3, [r7, #3]
   19680:	strb	r3, [r7, #2]
   19684:	strb	r3, [r7, #1]
   19688:	adds	r3, r2, #4
   1968c:	adc	r5, ip, #0
   19690:	mov	r7, #1
   19694:	cmp	r1, #1
   19698:	stm	sl, {r3, r5}
   1969c:	beq	196cc <read_boolean_unary_expression@@Base+0x1e18>
   196a0:	b	197fc <read_boolean_unary_expression@@Base+0x1f48>
   196a4:	mov	r3, r0
   196a8:	mov	r1, #9
   196ac:	strb	r1, [r3, r2]!
   196b0:	mov	r1, #0
   196b4:	strb	r1, [r3, #3]
   196b8:	strb	r1, [r3, #2]
   196bc:	strb	r1, [r3, #1]
   196c0:	adds	r3, r2, #4
   196c4:	adc	r5, ip, #0
   196c8:	stm	sl, {r3, r5}
   196cc:	ldr	r6, [r9, #4]
   196d0:	ldr	r4, [pc, #2672]	; 1a148 <read_boolean_unary_expression@@Base+0x2894>
   196d4:	adds	r1, r2, #8
   196d8:	adc	r7, ip, #0
   196dc:	ldr	r4, [pc, r4]
   196e0:	subs	r1, r4, r1
   196e4:	sbcs	r1, r6, r7
   196e8:	bcs	19bc0 <read_boolean_unary_expression@@Base+0x230c>
   196ec:	mov	r1, #7
   196f0:	orr	r1, r1, #131072	; 0x20000
   196f4:	adds	r1, r2, r1
   196f8:	adc	r2, ip, #0
   196fc:	mvn	r3, #0
   19700:	and	r5, r2, r3
   19704:	mov	r2, #16646144	; 0xfe0000
   19708:	orr	r2, r2, #-16777216	; 0xff000000
   1970c:	ldr	r4, [pc, #2616]	; 1a14c <read_boolean_unary_expression@@Base+0x2898>
   19710:	and	r6, r1, r2
   19714:	mov	r1, r6
   19718:	add	r4, pc, r4
   1971c:	bl	11eb4 <realloc@plt>
   19720:	str	r6, [r9]
   19724:	str	r5, [r9, #4]
   19728:	str	r0, [r4]
   1972c:	ldrb	r2, [r8]
   19730:	ldr	r5, [sl, #4]
   19734:	ldr	r3, [pc, #2580]	; 1a150 <read_boolean_unary_expression@@Base+0x289c>
   19738:	mov	r7, r0
   1973c:	mov	r1, #0
   19740:	ldr	r3, [pc, r3]
   19744:	adds	r6, r3, #4
   19748:	strb	r1, [r7, r3]!
   1974c:	strb	r1, [r7, #3]
   19750:	strb	r1, [r7, #2]
   19754:	strb	r1, [r7, #1]
   19758:	adc	r1, r5, #0
   1975c:	mov	r7, #1
   19760:	cmp	r2, #1
   19764:	str	r6, [sl]
   19768:	str	r1, [sl, #4]
   1976c:	bne	19824 <read_boolean_unary_expression@@Base+0x1f70>
   19770:	b	19be8 <read_boolean_unary_expression@@Base+0x2334>
   19774:	ldr	r3, [r0, r2]
   19778:	adds	r4, r5, #8
   1977c:	adc	r7, r6, #0
   19780:	cmp	r3, #9
   19784:	stm	sl, {r4, r7}
   19788:	bne	19eac <read_boolean_unary_expression@@Base+0x25f8>
   1978c:	ldr	r3, [pc, #2444]	; 1a120 <read_boolean_unary_expression@@Base+0x286c>
   19790:	adds	r4, r5, #20
   19794:	adc	r7, r6, #0
   19798:	add	r3, pc, r3
   1979c:	add	r6, r0, r5
   197a0:	ldrb	r3, [r3]
   197a4:	ldr	r6, [r6, #16]
   197a8:	stm	sl, {r4, r7}
   197ac:	eor	r3, r3, #1
   197b0:	add	r7, r6, r3
   197b4:	mov	r6, r0
   197b8:	mov	r3, #0
   197bc:	strb	r3, [r6, r5]!
   197c0:	mov	r5, #161	; 0xa1
   197c4:	strb	r5, [r6, #3]
   197c8:	strb	r3, [r6, #2]
   197cc:	strb	r3, [r6, #1]
   197d0:	stm	sl, {r2, ip}
   197d4:	mov	r3, r0
   197d8:	mov	r1, #9
   197dc:	strb	r1, [r3, r2]!
   197e0:	mov	r1, #0
   197e4:	strb	r1, [r3, #3]
   197e8:	strb	r1, [r3, #2]
   197ec:	strb	r1, [r3, #1]
   197f0:	adds	r3, r2, #4
   197f4:	adc	r5, ip, #0
   197f8:	stm	sl, {r3, r5}
   197fc:	mov	r2, r0
   19800:	mov	r1, #0
   19804:	strb	r1, [r2, r3]!
   19808:	adds	r6, r3, #4
   1980c:	strb	r1, [r2, #3]
   19810:	strb	r1, [r2, #2]
   19814:	strb	r1, [r2, #1]
   19818:	adc	r1, r5, #0
   1981c:	str	r6, [sl]
   19820:	str	r1, [sl, #4]
   19824:	mov	r3, r0
   19828:	mov	r2, #0
   1982c:	strb	r2, [r3, r6]!
   19830:	strb	r2, [r3, #3]
   19834:	strb	r2, [r3, #2]
   19838:	strb	r2, [r3, #1]
   1983c:	adds	r2, r6, #4
   19840:	adc	r3, r1, #0
   19844:	strd	r2, [sl]
   19848:	lsr	r1, r7, #24
   1984c:	strb	r7, [r0, r2]!
   19850:	lsr	r6, r7, #16
   19854:	lsr	r5, r7, #8
   19858:	strb	r1, [r0, #3]
   1985c:	strb	r6, [r0, #2]
   19860:	strb	r5, [r0, #1]
   19864:	ldrb	r0, [r8]
   19868:	adds	r4, r2, #4
   1986c:	adc	r5, r3, #0
   19870:	cmp	r0, #0
   19874:	strd	r4, [sl]
   19878:	beq	1992c <read_boolean_unary_expression@@Base+0x2078>
   1987c:	ldr	r9, [pc, #2284]	; 1a170 <read_boolean_unary_expression@@Base+0x28bc>
   19880:	adds	r0, r2, #8
   19884:	adc	r1, r3, #0
   19888:	add	r9, pc, r9
   1988c:	ldr	r7, [r9, #4]
   19890:	ldr	r6, [pc, #2268]	; 1a174 <read_boolean_unary_expression@@Base+0x28c0>
   19894:	ldr	r6, [pc, r6]
   19898:	subs	r0, r6, r0
   1989c:	sbcs	r0, r7, r1
   198a0:	bcs	19af8 <read_boolean_unary_expression@@Base+0x2244>
   198a4:	mov	r0, #7
   198a8:	orr	r0, r0, #131072	; 0x20000
   198ac:	adds	r0, r2, r0
   198b0:	adc	r1, r3, #0
   198b4:	mvn	r2, #0
   198b8:	and	r5, r1, r2
   198bc:	mov	r1, #16646144	; 0xfe0000
   198c0:	orr	r1, r1, #-16777216	; 0xff000000
   198c4:	ldr	r4, [pc, #2268]	; 1a1a8 <read_boolean_unary_expression@@Base+0x28f4>
   198c8:	and	r6, r0, r1
   198cc:	ldr	r0, [pc, #2264]	; 1a1ac <read_boolean_unary_expression@@Base+0x28f8>
   198d0:	mov	r1, r6
   198d4:	add	r4, pc, r4
   198d8:	ldr	r0, [pc, r0]
   198dc:	bl	11eb4 <realloc@plt>
   198e0:	str	r6, [r9]
   198e4:	str	r5, [r9, #4]
   198e8:	str	r0, [r4]
   198ec:	ldrb	r1, [r8]
   198f0:	ldr	r5, [sl, #4]
   198f4:	ldr	r4, [pc, #2228]	; 1a1b0 <read_boolean_unary_expression@@Base+0x28fc>
   198f8:	mov	r3, r0
   198fc:	mov	r2, #0
   19900:	ldr	r4, [pc, r4]
   19904:	strb	r2, [r3, r4]!
   19908:	strb	r2, [r3, #3]
   1990c:	strb	r2, [r3, #2]
   19910:	strb	r2, [r3, #1]
   19914:	adds	r2, r4, #4
   19918:	adc	r3, r5, #0
   1991c:	cmp	r1, #0
   19920:	strd	r2, [sl]
   19924:	beq	19958 <read_boolean_unary_expression@@Base+0x20a4>
   19928:	b	19b24 <read_boolean_unary_expression@@Base+0x2270>
   1992c:	ldr	r0, [pc, #2104]	; 1a16c <read_boolean_unary_expression@@Base+0x28b8>
   19930:	adds	r2, r2, #8
   19934:	mov	r1, #0
   19938:	adc	r3, r3, #0
   1993c:	ldr	r0, [pc, r0]
   19940:	mov	r7, r0
   19944:	strb	r1, [r7, r4]!
   19948:	strb	r1, [r7, #3]
   1994c:	strb	r1, [r7, #2]
   19950:	strb	r1, [r7, #1]
   19954:	strd	r2, [sl]
   19958:	mov	r7, r0
   1995c:	mov	r1, #0
   19960:	strb	r1, [r7, r2]!
   19964:	strb	r1, [r7, #3]
   19968:	strb	r1, [r7, #2]
   1996c:	strb	r1, [r7, #1]
   19970:	adds	r1, r2, #4
   19974:	adc	r5, r3, #0
   19978:	stm	sl, {r1, r5}
   1997c:	mov	r3, r0
   19980:	mov	r2, #0
   19984:	strb	r2, [r3, r1]!
   19988:	strb	r2, [r3, #3]
   1998c:	strb	r2, [r3, #2]
   19990:	strb	r2, [r3, #1]
   19994:	adds	r2, r1, #4
   19998:	adc	r3, r5, #0
   1999c:	strd	r2, [sl]
   199a0:	mov	r7, r0
   199a4:	mov	r1, #0
   199a8:	strb	r1, [r7, r2]!
   199ac:	strb	r1, [r7, #3]
   199b0:	strb	r1, [r7, #2]
   199b4:	strb	r1, [r7, #1]
   199b8:	adds	r1, r2, #4
   199bc:	adc	r5, r3, #0
   199c0:	stm	sl, {r1, r5}
   199c4:	mov	r3, r0
   199c8:	mov	r2, #0
   199cc:	strb	r2, [r3, r1]!
   199d0:	adds	r4, r1, #4
   199d4:	strb	r2, [r3, #3]
   199d8:	strb	r2, [r3, #2]
   199dc:	strb	r2, [r3, #1]
   199e0:	adc	r3, r5, #0
   199e4:	str	r4, [sl]
   199e8:	str	r3, [sl, #4]
   199ec:	mov	r2, r0
   199f0:	mov	r1, #0
   199f4:	strb	r1, [r2, r4]!
   199f8:	strb	r1, [r2, #3]
   199fc:	strb	r1, [r2, #2]
   19a00:	strb	r1, [r2, #1]
   19a04:	adds	r2, r4, #4
   19a08:	adc	r1, r3, #0
   19a0c:	str	r2, [sl]
   19a10:	str	r1, [sl, #4]
   19a14:	mov	r3, r0
   19a18:	mov	r4, #0
   19a1c:	strb	r4, [r3, r2]!
   19a20:	mov	r7, #163	; 0xa3
   19a24:	strb	r7, [r3, #3]
   19a28:	strb	r4, [r3, #2]
   19a2c:	strb	r4, [r3, #1]
   19a30:	ldrb	r7, [r8]
   19a34:	adds	r6, r2, #4
   19a38:	adc	r3, r1, #0
   19a3c:	cmp	r7, #1
   19a40:	str	r6, [sl]
   19a44:	str	r3, [sl, #4]
   19a48:	bne	19abc <read_boolean_unary_expression@@Base+0x2208>
   19a4c:	ldr	r8, [pc, #1852]	; 1a190 <read_boolean_unary_expression@@Base+0x28dc>
   19a50:	adds	lr, r2, #8
   19a54:	adc	ip, r1, #0
   19a58:	add	r8, pc, r8
   19a5c:	ldr	r5, [r8, #4]
   19a60:	ldr	r7, [pc, #1836]	; 1a194 <read_boolean_unary_expression@@Base+0x28e0>
   19a64:	ldr	r7, [pc, r7]
   19a68:	subs	r7, r7, lr
   19a6c:	sbcs	r7, r5, ip
   19a70:	bcs	19abc <read_boolean_unary_expression@@Base+0x2208>
   19a74:	mov	r3, #7
   19a78:	orr	r3, r3, #131072	; 0x20000
   19a7c:	adds	r2, r2, r3
   19a80:	adc	r1, r1, #0
   19a84:	mvn	r3, #0
   19a88:	and	r7, r1, r3
   19a8c:	mov	r1, #16646144	; 0xfe0000
   19a90:	orr	r1, r1, #-16777216	; 0xff000000
   19a94:	ldr	r5, [pc, #1788]	; 1a198 <read_boolean_unary_expression@@Base+0x28e4>
   19a98:	and	r6, r2, r1
   19a9c:	mov	r1, r6
   19aa0:	add	r5, pc, r5
   19aa4:	bl	11eb4 <realloc@plt>
   19aa8:	strd	r6, [r8]
   19aac:	str	r0, [r5]
   19ab0:	ldr	r3, [sl, #4]
   19ab4:	ldr	r6, [pc, #1760]	; 1a19c <read_boolean_unary_expression@@Base+0x28e8>
   19ab8:	ldr	r6, [pc, r6]
   19abc:	ldr	r0, [pc, #1756]	; 1a1a0 <read_boolean_unary_expression@@Base+0x28ec>
   19ac0:	ldr	r1, [pc, #1756]	; 1a1a4 <read_boolean_unary_expression@@Base+0x28f0>
   19ac4:	adds	r2, r6, #4
   19ac8:	add	r0, pc, r0
   19acc:	adc	r3, r3, #0
   19ad0:	ldr	r1, [pc, r1]
   19ad4:	strb	r4, [r1, r6]!
   19ad8:	strb	r4, [r1, #3]
   19adc:	strb	r4, [r1, #2]
   19ae0:	strb	r4, [r1, #1]
   19ae4:	mov	r1, #1
   19ae8:	strd	r2, [sl]
   19aec:	strb	r1, [r0]
   19af0:	sub	sp, fp, #28
   19af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19af8:	ldr	r0, [pc, #1656]	; 1a178 <read_boolean_unary_expression@@Base+0x28c4>
   19afc:	adds	r2, r2, #8
   19b00:	mov	r1, #0
   19b04:	adc	r3, r3, #0
   19b08:	ldr	r0, [pc, r0]
   19b0c:	mov	r7, r0
   19b10:	strb	r1, [r7, r4]!
   19b14:	strb	r1, [r7, #3]
   19b18:	strb	r1, [r7, #2]
   19b1c:	strb	r1, [r7, #1]
   19b20:	strd	r2, [sl]
   19b24:	ldr	r6, [r9, #4]
   19b28:	ldr	r1, [pc, #1668]	; 1a1b4 <read_boolean_unary_expression@@Base+0x2900>
   19b2c:	adds	ip, r4, #8
   19b30:	adc	r7, r5, #0
   19b34:	ldr	r1, [pc, r1]
   19b38:	subs	r1, r1, ip
   19b3c:	sbcs	r1, r6, r7
   19b40:	bcs	19c8c <read_boolean_unary_expression@@Base+0x23d8>
   19b44:	mov	r1, #7
   19b48:	orr	r1, r1, #131072	; 0x20000
   19b4c:	adds	r1, r4, r1
   19b50:	adc	r2, r5, #0
   19b54:	mvn	r3, #0
   19b58:	and	r5, r2, r3
   19b5c:	mov	r2, #16646144	; 0xfe0000
   19b60:	orr	r2, r2, #-16777216	; 0xff000000
   19b64:	ldr	r6, [pc, #1612]	; 1a1b8 <read_boolean_unary_expression@@Base+0x2904>
   19b68:	and	r4, r1, r2
   19b6c:	mov	r1, r4
   19b70:	add	r6, pc, r6
   19b74:	bl	11eb4 <realloc@plt>
   19b78:	str	r0, [r6]
   19b7c:	strd	r4, [r9]
   19b80:	ldrb	r7, [r8]
   19b84:	ldr	r3, [sl, #4]
   19b88:	ldr	r2, [pc, #1580]	; 1a1bc <read_boolean_unary_expression@@Base+0x2908>
   19b8c:	mov	r6, r0
   19b90:	mov	r1, #0
   19b94:	ldr	r2, [pc, r2]
   19b98:	strb	r1, [r6, r2]!
   19b9c:	strb	r1, [r6, #3]
   19ba0:	strb	r1, [r6, #2]
   19ba4:	strb	r1, [r6, #1]
   19ba8:	adds	r1, r2, #4
   19bac:	adc	r5, r3, #0
   19bb0:	cmp	r7, #1
   19bb4:	stm	sl, {r1, r5}
   19bb8:	bne	1997c <read_boolean_unary_expression@@Base+0x20c8>
   19bbc:	b	19cb0 <read_boolean_unary_expression@@Base+0x23fc>
   19bc0:	mov	r2, r0
   19bc4:	mov	r1, #0
   19bc8:	strb	r1, [r2, r3]!
   19bcc:	adds	r6, r3, #4
   19bd0:	strb	r1, [r2, #3]
   19bd4:	strb	r1, [r2, #2]
   19bd8:	strb	r1, [r2, #1]
   19bdc:	adc	r1, r5, #0
   19be0:	str	r6, [sl]
   19be4:	str	r1, [sl, #4]
   19be8:	ldr	r4, [r9, #4]
   19bec:	ldr	r2, [pc, #1376]	; 1a154 <read_boolean_unary_expression@@Base+0x28a0>
   19bf0:	adds	ip, r3, #8
   19bf4:	adc	r7, r5, #0
   19bf8:	ldr	r2, [pc, r2]
   19bfc:	subs	r2, r2, ip
   19c00:	sbcs	r2, r4, r7
   19c04:	bcs	19d50 <read_boolean_unary_expression@@Base+0x249c>
   19c08:	mov	r1, #7
   19c0c:	orr	r1, r1, #131072	; 0x20000
   19c10:	adds	r1, r3, r1
   19c14:	adc	r2, r5, #0
   19c18:	mvn	r3, #0
   19c1c:	and	r5, r2, r3
   19c20:	mov	r2, #16646144	; 0xfe0000
   19c24:	orr	r2, r2, #-16777216	; 0xff000000
   19c28:	ldr	r4, [pc, #1320]	; 1a158 <read_boolean_unary_expression@@Base+0x28a4>
   19c2c:	and	r6, r1, r2
   19c30:	mov	r1, r6
   19c34:	add	r4, pc, r4
   19c38:	bl	11eb4 <realloc@plt>
   19c3c:	str	r6, [r9]
   19c40:	str	r5, [r9, #4]
   19c44:	str	r0, [r4]
   19c48:	ldrb	r5, [r8]
   19c4c:	ldr	r1, [sl, #4]
   19c50:	ldr	r6, [pc, #1284]	; 1a15c <read_boolean_unary_expression@@Base+0x28a8>
   19c54:	mov	r3, r0
   19c58:	mov	r2, #0
   19c5c:	mov	r7, #1
   19c60:	ldr	r6, [pc, r6]
   19c64:	strb	r2, [r3, r6]!
   19c68:	strb	r2, [r3, #3]
   19c6c:	strb	r2, [r3, #2]
   19c70:	strb	r2, [r3, #1]
   19c74:	adds	r2, r6, #4
   19c78:	adc	r3, r1, #0
   19c7c:	cmp	r5, #1
   19c80:	strd	r2, [sl]
   19c84:	bne	19848 <read_boolean_unary_expression@@Base+0x1f94>
   19c88:	b	19d74 <read_boolean_unary_expression@@Base+0x24c0>
   19c8c:	mov	r7, r0
   19c90:	mov	r1, #0
   19c94:	strb	r1, [r7, r2]!
   19c98:	strb	r1, [r7, #3]
   19c9c:	strb	r1, [r7, #2]
   19ca0:	strb	r1, [r7, #1]
   19ca4:	adds	r1, r2, #4
   19ca8:	adc	r5, r3, #0
   19cac:	stm	sl, {r1, r5}
   19cb0:	ldr	r4, [r9, #4]
   19cb4:	ldr	r6, [pc, #1284]	; 1a1c0 <read_boolean_unary_expression@@Base+0x290c>
   19cb8:	adds	r7, r2, #8
   19cbc:	adc	ip, r3, #0
   19cc0:	ldr	r6, [pc, r6]
   19cc4:	subs	r7, r6, r7
   19cc8:	sbcs	r7, r4, ip
   19ccc:	bcs	19de8 <read_boolean_unary_expression@@Base+0x2534>
   19cd0:	mov	r1, #7
   19cd4:	orr	r1, r1, #131072	; 0x20000
   19cd8:	adds	r1, r2, r1
   19cdc:	adc	r2, r3, #0
   19ce0:	mvn	r3, #0
   19ce4:	and	r5, r2, r3
   19ce8:	mov	r2, #16646144	; 0xfe0000
   19cec:	orr	r2, r2, #-16777216	; 0xff000000
   19cf0:	ldr	r4, [pc, #1228]	; 1a1c4 <read_boolean_unary_expression@@Base+0x2910>
   19cf4:	and	r6, r1, r2
   19cf8:	mov	r1, r6
   19cfc:	add	r4, pc, r4
   19d00:	bl	11eb4 <realloc@plt>
   19d04:	str	r6, [r9]
   19d08:	str	r5, [r9, #4]
   19d0c:	str	r0, [r4]
   19d10:	ldrb	r7, [r8]
   19d14:	ldr	r5, [sl, #4]
   19d18:	ldr	r1, [pc, #1192]	; 1a1c8 <read_boolean_unary_expression@@Base+0x2914>
   19d1c:	mov	r3, r0
   19d20:	mov	r2, #0
   19d24:	ldr	r1, [pc, r1]
   19d28:	strb	r2, [r3, r1]!
   19d2c:	strb	r2, [r3, #3]
   19d30:	strb	r2, [r3, #2]
   19d34:	strb	r2, [r3, #1]
   19d38:	adds	r2, r1, #4
   19d3c:	adc	r3, r5, #0
   19d40:	cmp	r7, #1
   19d44:	strd	r2, [sl]
   19d48:	bne	199a0 <read_boolean_unary_expression@@Base+0x20ec>
   19d4c:	b	19e0c <read_boolean_unary_expression@@Base+0x2558>
   19d50:	mov	r3, r0
   19d54:	mov	r2, #0
   19d58:	strb	r2, [r3, r6]!
   19d5c:	strb	r2, [r3, #3]
   19d60:	strb	r2, [r3, #2]
   19d64:	strb	r2, [r3, #1]
   19d68:	adds	r2, r6, #4
   19d6c:	adc	r3, r1, #0
   19d70:	strd	r2, [sl]
   19d74:	ldr	r4, [r9, #4]
   19d78:	ldr	r5, [pc, #992]	; 1a160 <read_boolean_unary_expression@@Base+0x28ac>
   19d7c:	adds	lr, r6, #8
   19d80:	adc	ip, r1, #0
   19d84:	mov	r7, #1
   19d88:	ldr	r5, [pc, r5]
   19d8c:	subs	r5, r5, lr
   19d90:	sbcs	r5, r4, ip
   19d94:	bcs	19848 <read_boolean_unary_expression@@Base+0x1f94>
   19d98:	mov	r2, #7
   19d9c:	orr	r2, r2, #131072	; 0x20000
   19da0:	adds	r2, r6, r2
   19da4:	adc	r1, r1, #0
   19da8:	mvn	r3, #0
   19dac:	and	r5, r1, r3
   19db0:	mov	r1, #16646144	; 0xfe0000
   19db4:	orr	r1, r1, #-16777216	; 0xff000000
   19db8:	ldr	r4, [pc, #932]	; 1a164 <read_boolean_unary_expression@@Base+0x28b0>
   19dbc:	and	r6, r2, r1
   19dc0:	mov	r1, r6
   19dc4:	add	r4, pc, r4
   19dc8:	bl	11eb4 <realloc@plt>
   19dcc:	str	r6, [r9]
   19dd0:	str	r5, [r9, #4]
   19dd4:	str	r0, [r4]
   19dd8:	ldr	r3, [sl, #4]
   19ddc:	ldr	r2, [pc, #900]	; 1a168 <read_boolean_unary_expression@@Base+0x28b4>
   19de0:	ldr	r2, [pc, r2]
   19de4:	b	19848 <read_boolean_unary_expression@@Base+0x1f94>
   19de8:	mov	r3, r0
   19dec:	mov	r2, #0
   19df0:	strb	r2, [r3, r1]!
   19df4:	strb	r2, [r3, #3]
   19df8:	strb	r2, [r3, #2]
   19dfc:	strb	r2, [r3, #1]
   19e00:	adds	r2, r1, #4
   19e04:	adc	r3, r5, #0
   19e08:	strd	r2, [sl]
   19e0c:	ldr	r4, [r9, #4]
   19e10:	ldr	r6, [pc, #948]	; 1a1cc <read_boolean_unary_expression@@Base+0x2918>
   19e14:	adds	r7, r1, #8
   19e18:	adc	ip, r5, #0
   19e1c:	ldr	r6, [pc, r6]
   19e20:	subs	r7, r6, r7
   19e24:	sbcs	r7, r4, ip
   19e28:	bcs	19ed4 <read_boolean_unary_expression@@Base+0x2620>
   19e2c:	mov	r2, #7
   19e30:	orr	r2, r2, #131072	; 0x20000
   19e34:	adds	r1, r1, r2
   19e38:	adc	r2, r5, #0
   19e3c:	mvn	r3, #0
   19e40:	and	r5, r2, r3
   19e44:	mov	r2, #16646144	; 0xfe0000
   19e48:	orr	r2, r2, #-16777216	; 0xff000000
   19e4c:	ldr	r4, [pc, #892]	; 1a1d0 <read_boolean_unary_expression@@Base+0x291c>
   19e50:	and	r6, r1, r2
   19e54:	mov	r1, r6
   19e58:	add	r4, pc, r4
   19e5c:	bl	11eb4 <realloc@plt>
   19e60:	str	r6, [r9]
   19e64:	str	r5, [r9, #4]
   19e68:	str	r0, [r4]
   19e6c:	ldrb	r7, [r8]
   19e70:	ldr	r3, [sl, #4]
   19e74:	ldr	r2, [pc, #856]	; 1a1d4 <read_boolean_unary_expression@@Base+0x2920>
   19e78:	mov	r6, r0
   19e7c:	mov	r1, #0
   19e80:	ldr	r2, [pc, r2]
   19e84:	strb	r1, [r6, r2]!
   19e88:	strb	r1, [r6, #3]
   19e8c:	strb	r1, [r6, #2]
   19e90:	strb	r1, [r6, #1]
   19e94:	adds	r1, r2, #4
   19e98:	adc	r5, r3, #0
   19e9c:	cmp	r7, #1
   19ea0:	stm	sl, {r1, r5}
   19ea4:	bne	199c4 <read_boolean_unary_expression@@Base+0x2110>
   19ea8:	b	19ef8 <read_boolean_unary_expression@@Base+0x2644>
   19eac:	ldr	r1, [pc, #616]	; 1a11c <read_boolean_unary_expression@@Base+0x2868>
   19eb0:	add	r1, pc, r1
   19eb4:	ldr	r0, [pc, #600]	; 1a114 <read_boolean_unary_expression@@Base+0x2860>
   19eb8:	ldr	r0, [pc, r0]
   19ebc:	ldr	r0, [r0]
   19ec0:	ldr	r2, [pc, #592]	; 1a118 <read_boolean_unary_expression@@Base+0x2864>
   19ec4:	ldr	r2, [pc, r2]
   19ec8:	sub	sp, fp, #28
   19ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ed0:	b	11f50 <fprintf@plt>
   19ed4:	mov	r7, r0
   19ed8:	mov	r1, #0
   19edc:	strb	r1, [r7, r2]!
   19ee0:	strb	r1, [r7, #3]
   19ee4:	strb	r1, [r7, #2]
   19ee8:	strb	r1, [r7, #1]
   19eec:	adds	r1, r2, #4
   19ef0:	adc	r5, r3, #0
   19ef4:	stm	sl, {r1, r5}
   19ef8:	ldr	r4, [r9, #4]
   19efc:	ldr	r6, [pc, #724]	; 1a1d8 <read_boolean_unary_expression@@Base+0x2924>
   19f00:	adds	r7, r2, #8
   19f04:	adc	ip, r3, #0
   19f08:	ldr	r6, [pc, r6]
   19f0c:	subs	r7, r6, r7
   19f10:	sbcs	r7, r4, ip
   19f14:	bcs	19f9c <read_boolean_unary_expression@@Base+0x26e8>
   19f18:	mov	r1, #7
   19f1c:	orr	r1, r1, #131072	; 0x20000
   19f20:	adds	r1, r2, r1
   19f24:	adc	r2, r3, #0
   19f28:	mvn	r3, #0
   19f2c:	and	r5, r2, r3
   19f30:	mov	r2, #16646144	; 0xfe0000
   19f34:	orr	r2, r2, #-16777216	; 0xff000000
   19f38:	ldr	r4, [pc, #668]	; 1a1dc <read_boolean_unary_expression@@Base+0x2928>
   19f3c:	and	r6, r1, r2
   19f40:	mov	r1, r6
   19f44:	add	r4, pc, r4
   19f48:	bl	11eb4 <realloc@plt>
   19f4c:	str	r6, [r9]
   19f50:	str	r5, [r9, #4]
   19f54:	str	r0, [r4]
   19f58:	ldrb	r2, [r8]
   19f5c:	ldr	r5, [sl, #4]
   19f60:	ldr	r1, [pc, #632]	; 1a1e0 <read_boolean_unary_expression@@Base+0x292c>
   19f64:	mov	r7, r0
   19f68:	mov	r3, #0
   19f6c:	ldr	r1, [pc, r1]
   19f70:	adds	r4, r1, #4
   19f74:	strb	r3, [r7, r1]!
   19f78:	strb	r3, [r7, #3]
   19f7c:	strb	r3, [r7, #2]
   19f80:	strb	r3, [r7, #1]
   19f84:	adc	r3, r5, #0
   19f88:	cmp	r2, #1
   19f8c:	str	r4, [sl]
   19f90:	str	r3, [sl, #4]
   19f94:	bne	199ec <read_boolean_unary_expression@@Base+0x2138>
   19f98:	b	19fc4 <read_boolean_unary_expression@@Base+0x2710>
   19f9c:	mov	r3, r0
   19fa0:	mov	r2, #0
   19fa4:	strb	r2, [r3, r1]!
   19fa8:	adds	r4, r1, #4
   19fac:	strb	r2, [r3, #3]
   19fb0:	strb	r2, [r3, #2]
   19fb4:	strb	r2, [r3, #1]
   19fb8:	adc	r3, r5, #0
   19fbc:	str	r4, [sl]
   19fc0:	str	r3, [sl, #4]
   19fc4:	ldr	r6, [r9, #4]
   19fc8:	ldr	r2, [pc, #532]	; 1a1e4 <read_boolean_unary_expression@@Base+0x2930>
   19fcc:	adds	ip, r1, #8
   19fd0:	adc	r7, r5, #0
   19fd4:	ldr	r2, [pc, r2]
   19fd8:	subs	r2, r2, ip
   19fdc:	sbcs	r2, r6, r7
   19fe0:	bcs	1a068 <read_boolean_unary_expression@@Base+0x27b4>
   19fe4:	mov	r2, #7
   19fe8:	orr	r2, r2, #131072	; 0x20000
   19fec:	adds	r1, r1, r2
   19ff0:	adc	r2, r5, #0
   19ff4:	mvn	r3, #0
   19ff8:	and	r5, r2, r3
   19ffc:	mov	r2, #16646144	; 0xfe0000
   1a000:	orr	r2, r2, #-16777216	; 0xff000000
   1a004:	ldr	r4, [pc, #368]	; 1a17c <read_boolean_unary_expression@@Base+0x28c8>
   1a008:	and	r6, r1, r2
   1a00c:	mov	r1, r6
   1a010:	add	r4, pc, r4
   1a014:	bl	11eb4 <realloc@plt>
   1a018:	str	r6, [r9]
   1a01c:	str	r5, [r9, #4]
   1a020:	str	r0, [r4]
   1a024:	ldrb	r7, [r8]
   1a028:	ldr	r3, [sl, #4]
   1a02c:	ldr	r4, [pc, #332]	; 1a180 <read_boolean_unary_expression@@Base+0x28cc>
   1a030:	mov	r2, r0
   1a034:	mov	r1, #0
   1a038:	ldr	r4, [pc, r4]
   1a03c:	strb	r1, [r2, r4]!
   1a040:	strb	r1, [r2, #3]
   1a044:	strb	r1, [r2, #2]
   1a048:	strb	r1, [r2, #1]
   1a04c:	adds	r2, r4, #4
   1a050:	adc	r1, r3, #0
   1a054:	cmp	r7, #0
   1a058:	str	r2, [sl]
   1a05c:	str	r1, [sl, #4]
   1a060:	beq	19a14 <read_boolean_unary_expression@@Base+0x2160>
   1a064:	b	1a090 <read_boolean_unary_expression@@Base+0x27dc>
   1a068:	mov	r2, r0
   1a06c:	mov	r1, #0
   1a070:	strb	r1, [r2, r4]!
   1a074:	strb	r1, [r2, #3]
   1a078:	strb	r1, [r2, #2]
   1a07c:	strb	r1, [r2, #1]
   1a080:	adds	r2, r4, #4
   1a084:	adc	r1, r3, #0
   1a088:	str	r2, [sl]
   1a08c:	str	r1, [sl, #4]
   1a090:	ldr	r5, [r9, #4]
   1a094:	ldr	r6, [pc, #232]	; 1a184 <read_boolean_unary_expression@@Base+0x28d0>
   1a098:	adds	r7, r4, #8
   1a09c:	adc	ip, r3, #0
   1a0a0:	ldr	r6, [pc, r6]
   1a0a4:	subs	r7, r6, r7
   1a0a8:	sbcs	r7, r5, ip
   1a0ac:	bcs	19a14 <read_boolean_unary_expression@@Base+0x2160>
   1a0b0:	mov	r1, #7
   1a0b4:	orr	r1, r1, #131072	; 0x20000
   1a0b8:	adds	r1, r4, r1
   1a0bc:	adc	r2, r3, #0
   1a0c0:	mvn	r3, #0
   1a0c4:	and	r7, r2, r3
   1a0c8:	mov	r2, #16646144	; 0xfe0000
   1a0cc:	orr	r2, r2, #-16777216	; 0xff000000
   1a0d0:	ldr	r5, [pc, #176]	; 1a188 <read_boolean_unary_expression@@Base+0x28d4>
   1a0d4:	and	r6, r1, r2
   1a0d8:	mov	r1, r6
   1a0dc:	add	r5, pc, r5
   1a0e0:	bl	11eb4 <realloc@plt>
   1a0e4:	strd	r6, [r9]
   1a0e8:	str	r0, [r5]
   1a0ec:	ldr	r1, [sl, #4]
   1a0f0:	ldr	r2, [pc, #148]	; 1a18c <read_boolean_unary_expression@@Base+0x28d8>
   1a0f4:	ldr	r2, [pc, r2]
   1a0f8:	b	19a14 <read_boolean_unary_expression@@Base+0x2160>
   1a0fc:	andeq	r4, r1, ip, lsr r9
   1a100:	andeq	r4, r1, ip, lsr r9
   1a104:	andeq	r4, r1, r0, lsr r9
   1a108:	andeq	r4, r1, r4, lsl r9
   1a10c:	andeq	r4, r1, r8, asr #16
   1a110:			; <UNDEFINED> instruction: 0x000025b2
   1a114:	andeq	r3, r1, r0, lsl #4
   1a118:	strdeq	r3, [r1], -ip
   1a11c:	andeq	r1, r0, fp, lsl sp
   1a120:	andeq	r4, r1, r8, asr #12
   1a124:	andeq	r4, r1, r4, lsl #18
   1a128:	strdeq	r4, [r1], -r8
   1a12c:	andeq	r4, r1, ip, ror #15
   1a130:	andeq	r4, r1, ip, lsr #17
   1a134:	andeq	r4, r1, r8, lsr #17
   1a138:	andeq	r4, r1, r8, lsl #17
   1a13c:	andeq	r4, r1, r4, asr #15
   1a140:	andeq	r4, r1, r4, lsl #15
   1a144:	andeq	r4, r1, r8, ror #14
   1a148:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a14c:			; <UNDEFINED> instruction: 0x000146b4
   1a150:	muleq	r1, r8, r6
   1a154:	ldrdeq	r4, [r1], -r8
   1a158:	muleq	r1, r8, r1
   1a15c:	andeq	r4, r1, r8, ror r1
   1a160:	andeq	r4, r1, r8, asr #32
   1a164:	andeq	r4, r1, r8
   1a168:	strdeq	r3, [r1], -r8
   1a16c:	muleq	r1, r0, r4
   1a170:	andeq	r4, r1, r8, asr #10
   1a174:	andeq	r4, r1, ip, lsr r5
   1a178:	andeq	r4, r1, r4, asr #5
   1a17c:			; <UNDEFINED> instruction: 0x00013dbc
   1a180:	andeq	r3, r1, r0, lsr #27
   1a184:	andeq	r3, r1, r0, lsr sp
   1a188:	strdeq	r3, [r1], -r0
   1a18c:	andeq	r3, r1, r4, ror #25
   1a190:	andeq	r4, r1, r8, ror r3
   1a194:	andeq	r4, r1, ip, ror #6
   1a198:	andeq	r4, r1, ip, lsr #6
   1a19c:	andeq	r4, r1, r0, lsr #6
   1a1a0:	andeq	r4, r1, r8, lsl r3
   1a1a4:	strdeq	r4, [r1], -ip
   1a1a8:	strdeq	r4, [r1], -r8
   1a1ac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a1b0:	ldrdeq	r4, [r1], -r8
   1a1b4:	muleq	r1, ip, r2
   1a1b8:	andeq	r4, r1, ip, asr r2
   1a1bc:	andeq	r4, r1, r4, asr #4
   1a1c0:	andeq	r4, r1, r0, lsl r1
   1a1c4:	ldrdeq	r4, [r1], -r0
   1a1c8:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   1a1cc:			; <UNDEFINED> instruction: 0x00013fb4
   1a1d0:	andeq	r3, r1, r4, ror pc
   1a1d4:	andeq	r3, r1, r8, asr pc
   1a1d8:	andeq	r3, r1, r8, asr #29
   1a1dc:	andeq	r3, r1, r8, lsl #29
   1a1e0:	andeq	r3, r1, ip, ror #28
   1a1e4:	strdeq	r3, [r1], -ip
   1a1e8:	ldr	r0, [pc, #508]	; 1a3ec <read_boolean_unary_expression@@Base+0x2b38>
   1a1ec:	ldr	r0, [pc, r0]
   1a1f0:	cmp	r0, #0
   1a1f4:	beq	1a3a4 <read_boolean_unary_expression@@Base+0x2af0>
   1a1f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a1fc:	add	fp, sp, #24
   1a200:	ldr	r9, [pc, #488]	; 1a3f0 <read_boolean_unary_expression@@Base+0x2b3c>
   1a204:	mov	r4, #0
   1a208:	mov	r1, #0
   1a20c:	add	r9, pc, r9
   1a210:	ldrb	r0, [r9]
   1a214:	cmp	r0, #1
   1a218:	bne	1a29c <read_boolean_unary_expression@@Base+0x29e8>
   1a21c:	ldr	r0, [pc, #464]	; 1a3f4 <read_boolean_unary_expression@@Base+0x2b40>
   1a220:	ldr	r8, [pc, #464]	; 1a3f8 <read_boolean_unary_expression@@Base+0x2b44>
   1a224:	mov	r1, #1
   1a228:	add	r0, pc, r0
   1a22c:	add	r8, pc, r8
   1a230:	ldr	r0, [r0, #4]
   1a234:	ldr	r2, [pc, #448]	; 1a3fc <read_boolean_unary_expression@@Base+0x2b48>
   1a238:	ldr	r2, [pc, r2]
   1a23c:	ldr	r7, [r8, #4]
   1a240:	ldr	r5, [pc, #440]	; 1a400 <read_boolean_unary_expression@@Base+0x2b4c>
   1a244:	adds	r3, r2, #8
   1a248:	adc	r6, r0, #0
   1a24c:	ldr	r5, [pc, r5]
   1a250:	subs	r3, r5, r3
   1a254:	sbcs	r3, r7, r6
   1a258:	bcs	1a29c <read_boolean_unary_expression@@Base+0x29e8>
   1a25c:	mov	r1, #7
   1a260:	orr	r1, r1, #131072	; 0x20000
   1a264:	adds	r1, r2, r1
   1a268:	adc	r7, r0, #0
   1a26c:	mov	r0, #16646144	; 0xfe0000
   1a270:	orr	r0, r0, #-16777216	; 0xff000000
   1a274:	ldr	r5, [pc, #392]	; 1a404 <read_boolean_unary_expression@@Base+0x2b50>
   1a278:	and	r6, r1, r0
   1a27c:	ldr	r0, [pc, #388]	; 1a408 <read_boolean_unary_expression@@Base+0x2b54>
   1a280:	mov	r1, r6
   1a284:	add	r5, pc, r5
   1a288:	ldr	r0, [pc, r0]
   1a28c:	bl	11eb4 <realloc@plt>
   1a290:	ldrb	r1, [r9]
   1a294:	strd	r6, [r8]
   1a298:	str	r0, [r5]
   1a29c:	ldr	r3, [pc, #360]	; 1a40c <read_boolean_unary_expression@@Base+0x2b58>
   1a2a0:	ldr	r2, [pc, #360]	; 1a410 <read_boolean_unary_expression@@Base+0x2b5c>
   1a2a4:	add	r3, pc, r3
   1a2a8:	ldr	r2, [pc, r2]
   1a2ac:	ldr	r0, [pc, #352]	; 1a414 <read_boolean_unary_expression@@Base+0x2b60>
   1a2b0:	ldr	r0, [pc, r0]
   1a2b4:	ldr	r7, [r3, #4]
   1a2b8:	mov	r6, r0
   1a2bc:	strb	r4, [r6, r2]!
   1a2c0:	adds	r2, r2, #8
   1a2c4:	adc	r5, r7, #0
   1a2c8:	strb	r4, [r6, #5]
   1a2cc:	strb	r4, [r6, #3]
   1a2d0:	strb	r4, [r6, #2]
   1a2d4:	strb	r4, [r6, #1]
   1a2d8:	strb	r4, [r6, #4]!
   1a2dc:	cmp	r1, #0
   1a2e0:	strb	r4, [r6, #3]
   1a2e4:	strb	r4, [r6, #2]
   1a2e8:	stm	r3, {r2, r5}
   1a2ec:	beq	1a314 <read_boolean_unary_expression@@Base+0x2a60>
   1a2f0:	ldr	r3, [pc, #288]	; 1a418 <read_boolean_unary_expression@@Base+0x2b64>
   1a2f4:	mov	r1, r2
   1a2f8:	mov	r2, #1
   1a2fc:	ldr	r3, [pc, r3]
   1a300:	bl	11ec0 <fwrite@plt>
   1a304:	ldr	r0, [pc, #272]	; 1a41c <read_boolean_unary_expression@@Base+0x2b68>
   1a308:	ldr	r0, [pc, r0]
   1a30c:	bl	11e6c <free@plt>
   1a310:	b	1a360 <read_boolean_unary_expression@@Base+0x2aac>
   1a314:	ldr	r1, [pc, #260]	; 1a420 <read_boolean_unary_expression@@Base+0x2b6c>
   1a318:	mov	r2, #4
   1a31c:	ldr	r1, [pc, r1]
   1a320:	bl	11fe0 <msync@plt>
   1a324:	cmn	r0, #1
   1a328:	beq	1a3b0 <read_boolean_unary_expression@@Base+0x2afc>
   1a32c:	ldr	r1, [pc, #252]	; 1a430 <read_boolean_unary_expression@@Base+0x2b7c>
   1a330:	ldr	r1, [pc, r1]
   1a334:	ldr	r0, [pc, #248]	; 1a434 <read_boolean_unary_expression@@Base+0x2b80>
   1a338:	ldr	r0, [pc, r0]
   1a33c:	bl	11fbc <munmap@plt>
   1a340:	ldr	r0, [pc, #240]	; 1a438 <read_boolean_unary_expression@@Base+0x2b84>
   1a344:	ldr	r1, [pc, #240]	; 1a43c <read_boolean_unary_expression@@Base+0x2b88>
   1a348:	mov	r2, #0
   1a34c:	add	r0, pc, r0
   1a350:	add	r1, pc, r1
   1a354:	str	r2, [r0]
   1a358:	str	r2, [r0, #4]
   1a35c:	str	r2, [r1]
   1a360:	ldr	r0, [pc, #216]	; 1a440 <read_boolean_unary_expression@@Base+0x2b8c>
   1a364:	ldr	r0, [pc, r0]
   1a368:	bl	11e60 <fflush@plt>
   1a36c:	ldr	r0, [pc, #208]	; 1a444 <read_boolean_unary_expression@@Base+0x2b90>
   1a370:	ldr	r0, [pc, r0]
   1a374:	bl	1a8f0 <__gcov_flush@@Base+0x30c>
   1a378:	ldr	r0, [pc, #200]	; 1a448 <read_boolean_unary_expression@@Base+0x2b94>
   1a37c:	ldr	r0, [pc, r0]
   1a380:	bl	11fa4 <fclose@plt>
   1a384:	ldr	r0, [pc, #192]	; 1a44c <read_boolean_unary_expression@@Base+0x2b98>
   1a388:	ldr	r1, [pc, #192]	; 1a450 <read_boolean_unary_expression@@Base+0x2b9c>
   1a38c:	mov	r2, #0
   1a390:	add	r0, pc, r0
   1a394:	add	r1, pc, r1
   1a398:	str	r2, [r0]
   1a39c:	str	r2, [r1]
   1a3a0:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a3a4:	ldr	r0, [pc, #168]	; 1a454 <read_boolean_unary_expression@@Base+0x2ba0>
   1a3a8:	ldr	r0, [pc, r0]
   1a3ac:	b	11e6c <free@plt>
   1a3b0:	bl	11f5c <__errno_location@plt>
   1a3b4:	ldr	r1, [pc, #104]	; 1a424 <read_boolean_unary_expression@@Base+0x2b70>
   1a3b8:	ldr	r1, [pc, r1]
   1a3bc:	ldr	r0, [r0]
   1a3c0:	ldr	r4, [r1]
   1a3c4:	ldr	r5, [pc, #92]	; 1a428 <read_boolean_unary_expression@@Base+0x2b74>
   1a3c8:	ldr	r5, [pc, r5]
   1a3cc:	bl	11f08 <strerror@plt>
   1a3d0:	ldr	r1, [pc, #84]	; 1a42c <read_boolean_unary_expression@@Base+0x2b78>
   1a3d4:	mov	r3, r0
   1a3d8:	mov	r0, r4
   1a3dc:	add	r1, pc, r1
   1a3e0:	mov	r2, r5
   1a3e4:	bl	11f50 <fprintf@plt>
   1a3e8:	b	1a32c <read_boolean_unary_expression@@Base+0x2a78>
   1a3ec:	ldrdeq	r3, [r1], -ip
   1a3f0:			; <UNDEFINED> instruction: 0x00013bb8
   1a3f4:			; <UNDEFINED> instruction: 0x00013bb0
   1a3f8:	andeq	r3, r1, r4, lsr #23
   1a3fc:	andeq	r3, r1, r0, lsr #23
   1a400:	andeq	r3, r1, r4, lsl #23
   1a404:	andeq	r3, r1, r8, asr #22
   1a408:	andeq	r3, r1, r4, asr #22
   1a40c:	andeq	r3, r1, r4, lsr fp
   1a410:	andeq	r3, r1, r0, lsr fp
   1a414:	andeq	r3, r1, ip, lsl fp
   1a418:	andeq	r3, r1, ip, asr #21
   1a41c:	andeq	r3, r1, r4, asr #21
   1a420:	ldrdeq	r3, [r1], -r4
   1a424:	andeq	r2, r1, r0, lsl #26
   1a428:	strdeq	r3, [r1], -r8
   1a42c:	andeq	r1, r0, sp, asr r8
   1a430:	andeq	r3, r1, r0, asr #21
   1a434:	muleq	r1, r4, sl
   1a438:	andeq	r3, r1, r4, lsr #21
   1a43c:	andeq	r3, r1, ip, ror sl
   1a440:	andeq	r3, r1, r4, ror #20
   1a444:	andeq	r2, r1, ip, ror sp
   1a448:	andeq	r3, r1, ip, asr #20
   1a44c:	andeq	r3, r1, r8, lsr sl
   1a450:	andeq	r3, r1, r8, lsr sl
   1a454:	andeq	r3, r1, r8, lsl sl
   1a458:	push	{r4, sl, fp, lr}
   1a45c:	add	fp, sp, #8
   1a460:	mov	r4, r0
   1a464:	mov	r0, #12
   1a468:	bl	11ef0 <malloc@plt>
   1a46c:	ldr	r1, [pc, #60]	; 1a4b0 <read_boolean_unary_expression@@Base+0x2bfc>
   1a470:	mov	r2, #0
   1a474:	add	r1, pc, r1
   1a478:	stm	r0, {r1, r4}
   1a47c:	str	r2, [r0, #8]
   1a480:	ldr	r1, [pc, #44]	; 1a4b4 <read_boolean_unary_expression@@Base+0x2c00>
   1a484:	ldr	r1, [pc, r1]
   1a488:	mov	r2, r1
   1a48c:	ldr	r3, [r2], #4
   1a490:	ldr	r4, [r2]
   1a494:	cmp	r3, #0
   1a498:	mov	r3, r2
   1a49c:	addne	r3, r4, #8
   1a4a0:	moveq	r2, r1
   1a4a4:	str	r0, [r3]
   1a4a8:	str	r0, [r2]
   1a4ac:	pop	{r4, sl, fp, pc}
   1a4b0:	andeq	r3, r1, r0, ror r9
   1a4b4:	andeq	r2, r1, ip, lsr #24
   1a4b8:	push	{r4, r5, fp, lr}
   1a4bc:	add	fp, sp, #8
   1a4c0:	ldr	r0, [pc, #56]	; 1a500 <read_boolean_unary_expression@@Base+0x2c4c>
   1a4c4:	ldr	r0, [pc, r0]
   1a4c8:	ldr	r4, [r0]
   1a4cc:	cmp	r4, #0
   1a4d0:	beq	1a4fc <read_boolean_unary_expression@@Base+0x2c48>
   1a4d4:	ldr	r5, [pc, #40]	; 1a504 <read_boolean_unary_expression@@Base+0x2c50>
   1a4d8:	add	r5, pc, r5
   1a4dc:	ldr	r0, [r4]
   1a4e0:	cmp	r0, r5
   1a4e4:	bne	1a4f0 <read_boolean_unary_expression@@Base+0x2c3c>
   1a4e8:	ldr	r0, [r4, #4]
   1a4ec:	blx	r0
   1a4f0:	ldr	r4, [r4, #8]
   1a4f4:	cmp	r4, #0
   1a4f8:	bne	1a4dc <read_boolean_unary_expression@@Base+0x2c28>
   1a4fc:	pop	{r4, r5, fp, pc}
   1a500:	andeq	r2, r1, ip, ror #23
   1a504:	andeq	r3, r1, ip, lsl #18
   1a508:	push	{r4, r5, r6, r7, fp, lr}
   1a50c:	add	fp, sp, #16
   1a510:	ldr	r4, [pc, #100]	; 1a57c <read_boolean_unary_expression@@Base+0x2cc8>
   1a514:	ldr	r4, [pc, r4]
   1a518:	ldr	r0, [r4]
   1a51c:	cmp	r0, #0
   1a520:	beq	1a578 <read_boolean_unary_expression@@Base+0x2cc4>
   1a524:	ldr	r5, [pc, #84]	; 1a580 <read_boolean_unary_expression@@Base+0x2ccc>
   1a528:	mov	r6, #0
   1a52c:	add	r5, pc, r5
   1a530:	ldr	r1, [r0]
   1a534:	ldr	r7, [r0, #8]
   1a538:	cmp	r1, r5
   1a53c:	beq	1a548 <read_boolean_unary_expression@@Base+0x2c94>
   1a540:	mov	r6, r0
   1a544:	b	1a56c <read_boolean_unary_expression@@Base+0x2cb8>
   1a548:	ldr	r1, [r4]
   1a54c:	cmp	r0, r1
   1a550:	streq	r7, [r4]
   1a554:	ldr	r1, [r4, #4]
   1a558:	cmp	r0, r1
   1a55c:	streq	r6, [r4, #4]
   1a560:	cmp	r6, #0
   1a564:	strne	r7, [r6, #8]
   1a568:	bl	11e6c <free@plt>
   1a56c:	mov	r0, r7
   1a570:	cmp	r7, #0
   1a574:	bne	1a530 <read_boolean_unary_expression@@Base+0x2c7c>
   1a578:	pop	{r4, r5, r6, r7, fp, pc}
   1a57c:	muleq	r1, ip, fp
   1a580:			; <UNDEFINED> instruction: 0x000138b8
   1a584:	push	{r4, sl, fp, lr}
   1a588:	add	fp, sp, #8
   1a58c:	mov	r4, r0
   1a590:	mov	r0, #12
   1a594:	bl	11ef0 <malloc@plt>
   1a598:	ldr	r1, [pc, #60]	; 1a5dc <read_boolean_unary_expression@@Base+0x2d28>
   1a59c:	mov	r2, #0
   1a5a0:	add	r1, pc, r1
   1a5a4:	stm	r0, {r1, r4}
   1a5a8:	str	r2, [r0, #8]
   1a5ac:	ldr	r1, [pc, #44]	; 1a5e0 <read_boolean_unary_expression@@Base+0x2d2c>
   1a5b0:	ldr	r1, [pc, r1]
   1a5b4:	mov	r2, r1
   1a5b8:	ldr	r3, [r2], #4
   1a5bc:	ldr	r4, [r2]
   1a5c0:	cmp	r3, #0
   1a5c4:	mov	r3, r2
   1a5c8:	addne	r3, r4, #8
   1a5cc:	moveq	r2, r1
   1a5d0:	str	r0, [r3]
   1a5d4:	str	r0, [r2]
   1a5d8:	pop	{r4, sl, fp, pc}
   1a5dc:	andeq	r3, r1, r4, asr #16
   1a5e0:	strdeq	r2, [r1], -ip

0001a5e4 <__gcov_flush@@Base>:
   1a5e4:	push	{r4, sl, fp, lr}
   1a5e8:	add	fp, sp, #8
   1a5ec:	ldr	r0, [pc, #36]	; 1a618 <__gcov_flush@@Base+0x34>
   1a5f0:	ldr	r0, [pc, r0]
   1a5f4:	ldr	r4, [r0]
   1a5f8:	cmp	r4, #0
   1a5fc:	beq	1a614 <__gcov_flush@@Base+0x30>
   1a600:	ldr	r0, [r4, #4]
   1a604:	blx	r0
   1a608:	ldr	r4, [r4, #8]
   1a60c:	cmp	r4, #0
   1a610:	bne	1a600 <__gcov_flush@@Base+0x1c>
   1a614:	pop	{r4, sl, fp, pc}
   1a618:			; <UNDEFINED> instruction: 0x00012abc
   1a61c:	push	{r4, r5, r6, r7, fp, lr}
   1a620:	add	fp, sp, #16
   1a624:	ldr	r4, [pc, #100]	; 1a690 <__gcov_flush@@Base+0xac>
   1a628:	ldr	r4, [pc, r4]
   1a62c:	ldr	r0, [r4]
   1a630:	cmp	r0, #0
   1a634:	beq	1a68c <__gcov_flush@@Base+0xa8>
   1a638:	ldr	r5, [pc, #84]	; 1a694 <__gcov_flush@@Base+0xb0>
   1a63c:	mov	r6, #0
   1a640:	add	r5, pc, r5
   1a644:	ldr	r1, [r0]
   1a648:	ldr	r7, [r0, #8]
   1a64c:	cmp	r1, r5
   1a650:	beq	1a65c <__gcov_flush@@Base+0x78>
   1a654:	mov	r6, r0
   1a658:	b	1a680 <__gcov_flush@@Base+0x9c>
   1a65c:	ldr	r1, [r4]
   1a660:	cmp	r0, r1
   1a664:	streq	r7, [r4]
   1a668:	ldr	r1, [r4, #4]
   1a66c:	cmp	r0, r1
   1a670:	streq	r6, [r4, #4]
   1a674:	cmp	r6, #0
   1a678:	strne	r7, [r6, #8]
   1a67c:	bl	11e6c <free@plt>
   1a680:	mov	r0, r7
   1a684:	cmp	r7, #0
   1a688:	bne	1a644 <__gcov_flush@@Base+0x60>
   1a68c:	pop	{r4, r5, r6, r7, fp, pc}
   1a690:	andeq	r2, r1, r4, lsl #21
   1a694:	andeq	r3, r1, r4, lsr #15
   1a698:	push	{r4, r5, fp, lr}
   1a69c:	add	fp, sp, #8
   1a6a0:	mov	r4, r1
   1a6a4:	cmp	r0, #0
   1a6a8:	beq	1a6f8 <__gcov_flush@@Base+0x114>
   1a6ac:	mov	r5, r0
   1a6b0:	mov	r0, #12
   1a6b4:	bl	11ef0 <malloc@plt>
   1a6b8:	ldr	r1, [pc, #204]	; 1a78c <__gcov_flush@@Base+0x1a8>
   1a6bc:	mov	r2, #0
   1a6c0:	add	r1, pc, r1
   1a6c4:	stm	r0, {r1, r5}
   1a6c8:	str	r2, [r0, #8]
   1a6cc:	ldr	r1, [pc, #188]	; 1a790 <__gcov_flush@@Base+0x1ac>
   1a6d0:	ldr	r1, [pc, r1]
   1a6d4:	mov	r2, r1
   1a6d8:	ldr	r3, [r2], #4
   1a6dc:	ldr	r5, [r2]
   1a6e0:	cmp	r3, #0
   1a6e4:	mov	r3, r2
   1a6e8:	addne	r3, r5, #8
   1a6ec:	moveq	r2, r1
   1a6f0:	str	r0, [r3]
   1a6f4:	str	r0, [r2]
   1a6f8:	cmp	r4, #0
   1a6fc:	beq	1a748 <__gcov_flush@@Base+0x164>
   1a700:	mov	r0, #12
   1a704:	bl	11ef0 <malloc@plt>
   1a708:	ldr	r1, [pc, #132]	; 1a794 <__gcov_flush@@Base+0x1b0>
   1a70c:	mov	r2, #0
   1a710:	add	r1, pc, r1
   1a714:	stm	r0, {r1, r4}
   1a718:	str	r2, [r0, #8]
   1a71c:	ldr	r1, [pc, #116]	; 1a798 <__gcov_flush@@Base+0x1b4>
   1a720:	ldr	r1, [pc, r1]
   1a724:	mov	r2, r1
   1a728:	ldr	r3, [r2], #4
   1a72c:	ldr	r5, [r2]
   1a730:	cmp	r3, #0
   1a734:	mov	r3, r2
   1a738:	addne	r3, r5, #8
   1a73c:	moveq	r2, r1
   1a740:	str	r0, [r3]
   1a744:	str	r0, [r2]
   1a748:	ldr	r1, [pc, #76]	; 1a79c <__gcov_flush@@Base+0x1b8>
   1a74c:	add	r1, pc, r1
   1a750:	ldrb	r0, [r1]
   1a754:	cmp	r0, #0
   1a758:	popne	{r4, r5, fp, pc}
   1a75c:	ldr	r0, [pc, #60]	; 1a7a0 <__gcov_flush@@Base+0x1bc>
   1a760:	mov	r2, #1
   1a764:	strb	r2, [r1]
   1a768:	add	r0, pc, r0
   1a76c:	bl	1ac4c <__libc_csu_fini@@Base+0x4>
   1a770:	ldr	r0, [pc, #44]	; 1a7a4 <__gcov_flush@@Base+0x1c0>
   1a774:	add	r0, pc, r0
   1a778:	bl	1ac4c <__libc_csu_fini@@Base+0x4>
   1a77c:	ldr	r0, [pc, #36]	; 1a7a8 <__gcov_flush@@Base+0x1c4>
   1a780:	add	r0, pc, r0
   1a784:	pop	{r4, r5, fp, lr}
   1a788:	b	1ac4c <__libc_csu_fini@@Base+0x4>
   1a78c:	andeq	r3, r1, r4, lsr #14
   1a790:	andeq	r2, r1, r0, ror #19
   1a794:	ldrdeq	r3, [r1], -r4
   1a798:	andeq	r2, r1, ip, lsl #19
   1a79c:	muleq	r1, ip, r6
   1a7a0:			; <UNDEFINED> instruction: 0xfffffeac
   1a7a4:			; <UNDEFINED> instruction: 0xfffffd8c
   1a7a8:			; <UNDEFINED> instruction: 0xfffffd30
   1a7ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a7b0:	add	fp, sp, #24
   1a7b4:	ldr	r7, [pc, #76]	; 1a808 <__gcov_flush@@Base+0x224>
   1a7b8:	mov	r4, r0
   1a7bc:	mov	r5, #1
   1a7c0:	mov	r8, #0
   1a7c4:	ldr	r7, [pc, r7]
   1a7c8:	mov	r6, #47	; 0x2f
   1a7cc:	b	1a7d4 <__gcov_flush@@Base+0x1f0>
   1a7d0:	add	r5, r5, #1
   1a7d4:	ldrb	r0, [r4, r5]
   1a7d8:	cmp	r0, #47	; 0x2f
   1a7dc:	beq	1a7ec <__gcov_flush@@Base+0x208>
   1a7e0:	cmp	r0, #0
   1a7e4:	bne	1a7d0 <__gcov_flush@@Base+0x1ec>
   1a7e8:	b	1a804 <__gcov_flush@@Base+0x220>
   1a7ec:	strb	r8, [r4, r5]
   1a7f0:	ldr	r1, [r7]
   1a7f4:	mov	r0, r4
   1a7f8:	bl	11f74 <mkdir@plt>
   1a7fc:	strb	r6, [r4, r5]
   1a800:	b	1a7d0 <__gcov_flush@@Base+0x1ec>
   1a804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a808:	andeq	r2, r1, r4, ror #17
   1a80c:	ldr	r0, [pc, #8]	; 1a81c <__gcov_flush@@Base+0x238>
   1a810:	ldr	r0, [pc, r0]
   1a814:	ldr	r0, [r0]
   1a818:	bx	lr
   1a81c:	muleq	r1, r8, r8
   1a820:	ldr	r1, [pc, #8]	; 1a830 <__gcov_flush@@Base+0x24c>
   1a824:	ldr	r1, [pc, r1]
   1a828:	str	r0, [r1]
   1a82c:	bx	lr
   1a830:	andeq	r2, r1, r4, lsl #17
   1a834:	push	{r4, r5, r6, sl, fp, lr}
   1a838:	add	fp, sp, #16
   1a83c:	sub	sp, sp, #392	; 0x188
   1a840:	mov	r6, sp
   1a844:	mov	r5, r0
   1a848:	mov	r0, r6
   1a84c:	mov	r4, r1
   1a850:	bl	11e9c <uname@plt>
   1a854:	cmp	r0, #0
   1a858:	blt	1a870 <__gcov_flush@@Base+0x28c>
   1a85c:	add	r1, r6, #65	; 0x41
   1a860:	mov	r0, r5
   1a864:	mov	r2, r4
   1a868:	bl	11f8c <strncpy@plt>
   1a86c:	mov	r0, #0
   1a870:	sub	sp, fp, #16
   1a874:	pop	{r4, r5, r6, sl, fp, pc}
   1a878:	push	{r4, r5, r6, sl, fp, lr}
   1a87c:	add	fp, sp, #16
   1a880:	sub	sp, sp, #32
   1a884:	mov	r4, #0
   1a888:	mov	r5, r0
   1a88c:	str	r4, [sp, #20]
   1a890:	str	r4, [sp, #16]
   1a894:	str	r4, [sp, #12]
   1a898:	str	r4, [sp, #8]
   1a89c:	strh	r4, [sp, #2]
   1a8a0:	bl	11f20 <getpid@plt>
   1a8a4:	mov	r6, sp
   1a8a8:	str	r0, [sp, #24]
   1a8ac:	mov	r0, #1
   1a8b0:	strh	r0, [sp]
   1a8b4:	mov	r0, r5
   1a8b8:	mov	r1, #14
   1a8bc:	mov	r2, r6
   1a8c0:	bl	11fc8 <fcntl64@plt>
   1a8c4:	cmn	r0, #1
   1a8c8:	bne	1a8e4 <__gcov_flush@@Base+0x300>
   1a8cc:	bl	11f5c <__errno_location@plt>
   1a8d0:	ldr	r0, [r0]
   1a8d4:	cmp	r0, #4
   1a8d8:	beq	1a8b4 <__gcov_flush@@Base+0x2d0>
   1a8dc:	cmp	r0, #37	; 0x25
   1a8e0:	mvneq	r4, #0
   1a8e4:	mov	r0, r4
   1a8e8:	sub	sp, fp, #16
   1a8ec:	pop	{r4, r5, r6, sl, fp, pc}
   1a8f0:	push	{r4, r5, r6, sl, fp, lr}
   1a8f4:	add	fp, sp, #16
   1a8f8:	sub	sp, sp, #32
   1a8fc:	mov	r4, #0
   1a900:	mov	r5, r0
   1a904:	str	r4, [sp, #20]
   1a908:	str	r4, [sp, #16]
   1a90c:	str	r4, [sp, #12]
   1a910:	str	r4, [sp, #8]
   1a914:	strh	r4, [sp, #2]
   1a918:	bl	11f20 <getpid@plt>
   1a91c:	mov	r6, sp
   1a920:	str	r0, [sp, #24]
   1a924:	mov	r0, #2
   1a928:	strh	r0, [sp]
   1a92c:	mov	r0, r5
   1a930:	mov	r1, #14
   1a934:	mov	r2, r6
   1a938:	bl	11fc8 <fcntl64@plt>
   1a93c:	cmn	r0, #1
   1a940:	bne	1a95c <__gcov_flush@@Base+0x378>
   1a944:	bl	11f5c <__errno_location@plt>
   1a948:	ldr	r0, [r0]
   1a94c:	cmp	r0, #4
   1a950:	beq	1a92c <__gcov_flush@@Base+0x348>
   1a954:	cmp	r0, #37	; 0x25
   1a958:	mvneq	r4, #0
   1a95c:	mov	r0, r4
   1a960:	sub	sp, fp, #16
   1a964:	pop	{r4, r5, r6, sl, fp, pc}
   1a968:	push	{r4, r5, fp, lr}
   1a96c:	add	fp, sp, #8
   1a970:	sub	sp, sp, #32
   1a974:	mov	r2, #182	; 0xb6
   1a978:	orr	r2, r2, #256	; 0x100
   1a97c:	mov	r1, #66	; 0x42
   1a980:	bl	11ecc <open64@plt>
   1a984:	cmp	r0, #0
   1a988:	blt	1aa04 <__gcov_flush@@Base+0x420>
   1a98c:	mov	r4, r0
   1a990:	mov	r0, #0
   1a994:	str	r0, [sp, #20]
   1a998:	str	r0, [sp, #16]
   1a99c:	str	r0, [sp, #12]
   1a9a0:	str	r0, [sp, #8]
   1a9a4:	strh	r0, [sp, #2]
   1a9a8:	bl	11f20 <getpid@plt>
   1a9ac:	mov	r5, sp
   1a9b0:	str	r0, [sp, #24]
   1a9b4:	mov	r0, #1
   1a9b8:	strh	r0, [sp]
   1a9bc:	mov	r0, r4
   1a9c0:	mov	r1, #14
   1a9c4:	mov	r2, r5
   1a9c8:	bl	11fc8 <fcntl64@plt>
   1a9cc:	cmn	r0, #1
   1a9d0:	bne	1a9ec <__gcov_flush@@Base+0x408>
   1a9d4:	bl	11f5c <__errno_location@plt>
   1a9d8:	ldr	r0, [r0]
   1a9dc:	cmp	r0, #4
   1a9e0:	beq	1a9bc <__gcov_flush@@Base+0x3d8>
   1a9e4:	cmp	r0, #37	; 0x25
   1a9e8:	beq	1aa10 <__gcov_flush@@Base+0x42c>
   1a9ec:	ldr	r1, [pc, #76]	; 1aa40 <__gcov_flush@@Base+0x45c>
   1a9f0:	mov	r0, r4
   1a9f4:	add	r1, pc, r1
   1a9f8:	bl	11e30 <fdopen@plt>
   1a9fc:	sub	sp, fp, #8
   1aa00:	pop	{r4, r5, fp, pc}
   1aa04:	mov	r0, #0
   1aa08:	sub	sp, fp, #8
   1aa0c:	pop	{r4, r5, fp, pc}
   1aa10:	ldr	r1, [pc, #28]	; 1aa34 <__gcov_flush@@Base+0x450>
   1aa14:	ldr	r2, [pc, #28]	; 1aa38 <__gcov_flush@@Base+0x454>
   1aa18:	ldr	r0, [pc, #28]	; 1aa3c <__gcov_flush@@Base+0x458>
   1aa1c:	add	r1, pc, r1
   1aa20:	add	r2, pc, r2
   1aa24:	ldr	r0, [pc, r0]
   1aa28:	ldr	r0, [r0]
   1aa2c:	bl	11f50 <fprintf@plt>
   1aa30:	b	1a9ec <__gcov_flush@@Base+0x408>
   1aa34:	andeq	r1, r0, lr, lsr r2
   1aa38:	andeq	r1, r0, r3, lsl #5
   1aa3c:	muleq	r1, r4, r6
   1aa40:	andeq	r1, r0, r4, asr #1
   1aa44:	push	{r4, r5, r6, sl, fp, lr}
   1aa48:	add	fp, sp, #16
   1aa4c:	mov	r6, r0
   1aa50:	ldr	r0, [pc, #120]	; 1aad0 <__gcov_flush@@Base+0x4ec>
   1aa54:	mov	r4, r1
   1aa58:	add	r0, pc, r0
   1aa5c:	bl	11ed8 <getenv@plt>
   1aa60:	mov	r5, r0
   1aa64:	ldr	r0, [pc, #104]	; 1aad4 <__gcov_flush@@Base+0x4f0>
   1aa68:	add	r0, pc, r0
   1aa6c:	bl	11ed8 <getenv@plt>
   1aa70:	mov	r1, #0
   1aa74:	str	r1, [r4]
   1aa78:	str	r1, [r6]
   1aa7c:	cmp	r5, #0
   1aa80:	ldrbne	r2, [r5]
   1aa84:	cmpne	r2, #0
   1aa88:	bne	1aa94 <__gcov_flush@@Base+0x4b0>
   1aa8c:	mov	r0, r1
   1aa90:	pop	{r4, r5, r6, sl, fp, pc}
   1aa94:	cmp	r0, #0
   1aa98:	beq	1aab0 <__gcov_flush@@Base+0x4cc>
   1aa9c:	mov	r1, #0
   1aaa0:	mov	r2, #10
   1aaa4:	bl	11e48 <strtol@plt>
   1aaa8:	bic	r0, r0, r0, asr #31
   1aaac:	b	1aab4 <__gcov_flush@@Base+0x4d0>
   1aab0:	mov	r0, #0
   1aab4:	str	r0, [r6]
   1aab8:	mov	r0, r5
   1aabc:	bl	11f38 <strlen@plt>
   1aac0:	mov	r1, r5
   1aac4:	str	r0, [r4]
   1aac8:	mov	r0, r1
   1aacc:	pop	{r4, r5, r6, sl, fp, pc}
   1aad0:	andeq	r1, r0, r9, ror r2
   1aad4:	andeq	r1, r0, r5, ror r2
   1aad8:	push	{r4, r5, r6, r7, fp, lr}
   1aadc:	add	fp, sp, #16
   1aae0:	mov	r6, r0
   1aae4:	ldr	r0, [fp, #8]
   1aae8:	mov	r5, r3
   1aaec:	mov	r7, r2
   1aaf0:	mov	r4, r1
   1aaf4:	cmp	r0, #1
   1aaf8:	blt	1ab30 <__gcov_flush@@Base+0x54c>
   1aafc:	add	r1, r4, #1
   1ab00:	mov	r2, #0
   1ab04:	ldrb	r3, [r1]
   1ab08:	cmp	r3, #47	; 0x2f
   1ab0c:	beq	1ab1c <__gcov_flush@@Base+0x538>
   1ab10:	cmp	r3, #0
   1ab14:	bne	1ab24 <__gcov_flush@@Base+0x540>
   1ab18:	b	1ab30 <__gcov_flush@@Base+0x54c>
   1ab1c:	add	r2, r2, #1
   1ab20:	mov	r4, r1
   1ab24:	add	r1, r1, #1
   1ab28:	cmp	r2, r0
   1ab2c:	blt	1ab04 <__gcov_flush@@Base+0x520>
   1ab30:	mov	r0, r6
   1ab34:	mov	r1, r7
   1ab38:	mov	r2, r5
   1ab3c:	bl	11e78 <memcpy@plt>
   1ab40:	add	r0, r7, r5
   1ab44:	ldrb	r0, [r0, #-1]
   1ab48:	cmp	r0, #47	; 0x2f
   1ab4c:	movne	r0, #47	; 0x2f
   1ab50:	strbne	r0, [r6, r5]
   1ab54:	mov	r0, r4
   1ab58:	addne	r5, r5, #1
   1ab5c:	add	r5, r6, r5
   1ab60:	bl	11f38 <strlen@plt>
   1ab64:	add	r2, r0, #1
   1ab68:	mov	r0, r5
   1ab6c:	mov	r1, r4
   1ab70:	pop	{r4, r5, r6, r7, fp, lr}
   1ab74:	b	11e78 <memcpy@plt>
   1ab78:	mov	r1, #47	; 0x2f
   1ab7c:	b	11f44 <strchr@plt>
   1ab80:	mov	r1, #47	; 0x2f
   1ab84:	b	11fd4 <strrchr@plt>
   1ab88:	push	{fp, lr}
   1ab8c:	mov	fp, sp
   1ab90:	sub	sp, sp, #8
   1ab94:	mov	r0, #0
   1ab98:	str	r0, [sp, #4]
   1ab9c:	add	r1, sp, #4
   1aba0:	mov	r0, #2
   1aba4:	bl	11f98 <prctl@plt>
   1aba8:	ldr	r1, [sp, #4]
   1abac:	cmp	r0, #0
   1abb0:	cmpeq	r1, #9
   1abb4:	bne	1abc8 <__gcov_flush@@Base+0x5e4>
   1abb8:	mov	r0, #1
   1abbc:	mov	r1, #0
   1abc0:	bl	11f98 <prctl@plt>
   1abc4:	ldr	r1, [sp, #4]
   1abc8:	sub	r0, r1, #9
   1abcc:	clz	r0, r0
   1abd0:	lsr	r0, r0, #5
   1abd4:	mov	sp, fp
   1abd8:	pop	{fp, pc}
   1abdc:	mov	r0, #1
   1abe0:	mov	r1, #9
   1abe4:	b	11f98 <prctl@plt>

0001abe8 <__libc_csu_init@@Base>:
   1abe8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1abec:	mov	r7, r0
   1abf0:	ldr	r6, [pc, #72]	; 1ac40 <__libc_csu_init@@Base+0x58>
   1abf4:	ldr	r5, [pc, #72]	; 1ac44 <__libc_csu_init@@Base+0x5c>
   1abf8:	add	r6, pc, r6
   1abfc:	add	r5, pc, r5
   1ac00:	sub	r6, r6, r5
   1ac04:	mov	r8, r1
   1ac08:	mov	r9, r2
   1ac0c:	bl	11e10 <fdopen@plt-0x20>
   1ac10:	asrs	r6, r6, #2
   1ac14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac18:	mov	r4, #0
   1ac1c:	add	r4, r4, #1
   1ac20:	ldr	r3, [r5], #4
   1ac24:	mov	r2, r9
   1ac28:	mov	r1, r8
   1ac2c:	mov	r0, r7
   1ac30:	blx	r3
   1ac34:	cmp	r6, r4
   1ac38:	bne	1ac1c <__libc_csu_init@@Base+0x34>
   1ac3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ac40:	ldrdeq	r1, [r1], -ip
   1ac44:	andeq	r1, r1, r4, asr #21

0001ac48 <__libc_csu_fini@@Base>:
   1ac48:	bx	lr
   1ac4c:	ldr	r3, [pc, #12]	; 1ac60 <__libc_csu_fini@@Base+0x18>
   1ac50:	mov	r1, #0
   1ac54:	add	r3, pc, r3
   1ac58:	ldr	r2, [r3]
   1ac5c:	b	11f68 <__cxa_atexit@plt>
   1ac60:	andeq	r2, r1, r4, lsl #9

Disassembly of section .fini:

0001ac64 <.fini>:
   1ac64:	push	{r3, lr}
   1ac68:	pop	{r3, pc}
