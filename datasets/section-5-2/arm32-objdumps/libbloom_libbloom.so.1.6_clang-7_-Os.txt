
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

0000055c <.init>:
 55c:	push	{r3, lr}
 560:	bl	5e0 <memset@plt+0x10>
 564:	pop	{r3, pc}

Disassembly of section .plt:

00000568 <calloc@plt-0x14>:
 568:	push	{lr}		; (str lr, [sp, #-4]!)
 56c:	ldr	lr, [pc, #4]	; 578 <calloc@plt-0x4>
 570:	add	lr, pc, lr
 574:	ldr	pc, [lr, #8]!
 578:	andeq	r0, r1, r8, lsl #21

0000057c <calloc@plt>:
 57c:	add	ip, pc, #0, 12
 580:	add	ip, ip, #16, 20	; 0x10000
 584:	ldr	pc, [ip, #2696]!	; 0xa88

00000588 <log@plt>:
 588:	add	ip, pc, #0, 12
 58c:	add	ip, ip, #16, 20	; 0x10000
 590:	ldr	pc, [ip, #2688]!	; 0xa80

00000594 <__cxa_finalize@plt>:
 594:	add	ip, pc, #0, 12
 598:	add	ip, ip, #16, 20	; 0x10000
 59c:	ldr	pc, [ip, #2680]!	; 0xa78

000005a0 <printf@plt>:
 5a0:	add	ip, pc, #0, 12
 5a4:	add	ip, ip, #16, 20	; 0x10000
 5a8:	ldr	pc, [ip, #2672]!	; 0xa70

000005ac <murmurhash2@plt>:
 5ac:	add	ip, pc, #0, 12
 5b0:	add	ip, ip, #16, 20	; 0x10000
 5b4:	ldr	pc, [ip, #2664]!	; 0xa68

000005b8 <free@plt>:
 5b8:	add	ip, pc, #0, 12
 5bc:	add	ip, ip, #16, 20	; 0x10000
 5c0:	ldr	pc, [ip, #2656]!	; 0xa60

000005c4 <__gmon_start__@plt>:
 5c4:	add	ip, pc, #0, 12
 5c8:	add	ip, ip, #16, 20	; 0x10000
 5cc:	ldr	pc, [ip, #2648]!	; 0xa58

000005d0 <memset@plt>:
 5d0:	add	ip, pc, #0, 12
 5d4:	add	ip, ip, #16, 20	; 0x10000
 5d8:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000005e0 <bloom_init_size@@Base-0x128>:
 5e0:	ldr	r3, [pc, #20]	; 5fc <memset@plt+0x2c>
 5e4:	ldr	r2, [pc, #20]	; 600 <memset@plt+0x30>
 5e8:	add	r3, pc, r3
 5ec:	ldr	r2, [r3, r2]
 5f0:	cmp	r2, #0
 5f4:	bxeq	lr
 5f8:	b	5c4 <__gmon_start__@plt>
 5fc:	andeq	r0, r1, r0, lsl sl
 600:	andeq	r0, r0, r4, lsr r0
 604:	ldr	r0, [pc, #44]	; 638 <memset@plt+0x68>
 608:	ldr	r3, [pc, #44]	; 63c <memset@plt+0x6c>
 60c:	add	r0, pc, r0
 610:	add	r3, pc, r3
 614:	cmp	r3, r0
 618:	ldr	r3, [pc, #32]	; 640 <memset@plt+0x70>
 61c:	add	r3, pc, r3
 620:	bxeq	lr
 624:	ldr	r2, [pc, #24]	; 644 <memset@plt+0x74>
 628:	ldr	r3, [r3, r2]
 62c:	cmp	r3, #0
 630:	bxeq	lr
 634:	bx	r3
 638:	andeq	r0, r1, ip, lsr #20
 63c:	andeq	r0, r1, r8, lsr #20
 640:	ldrdeq	r0, [r1], -ip
 644:	andeq	r0, r0, r0, lsr r0
 648:	ldr	r0, [pc, #56]	; 688 <memset@plt+0xb8>
 64c:	ldr	r3, [pc, #56]	; 68c <memset@plt+0xbc>
 650:	add	r0, pc, r0
 654:	add	r3, pc, r3
 658:	sub	r1, r3, r0
 65c:	ldr	r3, [pc, #44]	; 690 <memset@plt+0xc0>
 660:	asr	r1, r1, #2
 664:	add	r3, pc, r3
 668:	add	r1, r1, r1, lsr #31
 66c:	asrs	r1, r1, #1
 670:	bxeq	lr
 674:	ldr	r2, [pc, #24]	; 694 <memset@plt+0xc4>
 678:	ldr	r3, [r3, r2]
 67c:	cmp	r3, #0
 680:	bxeq	lr
 684:	bx	r3
 688:	andeq	r0, r1, r8, ror #19
 68c:	andeq	r0, r1, r4, ror #19
 690:	muleq	r1, r4, r9
 694:	andeq	r0, r0, r8, lsr r0
 698:	ldr	r3, [pc, #76]	; 6ec <memset@plt+0x11c>
 69c:	ldr	r2, [pc, #76]	; 6f0 <memset@plt+0x120>
 6a0:	add	r3, pc, r3
 6a4:	add	r2, pc, r2
 6a8:	ldrb	r3, [r3]
 6ac:	cmp	r3, #0
 6b0:	bxne	lr
 6b4:	ldr	r3, [pc, #56]	; 6f4 <memset@plt+0x124>
 6b8:	push	{r4, lr}
 6bc:	ldr	r3, [r2, r3]
 6c0:	cmp	r3, #0
 6c4:	beq	6d4 <memset@plt+0x104>
 6c8:	ldr	r3, [pc, #40]	; 6f8 <memset@plt+0x128>
 6cc:	ldr	r0, [pc, r3]
 6d0:	bl	594 <__cxa_finalize@plt>
 6d4:	bl	604 <memset@plt+0x34>
 6d8:	ldr	r3, [pc, #28]	; 6fc <memset@plt+0x12c>
 6dc:	mov	r2, #1
 6e0:	add	r3, pc, r3
 6e4:	strb	r2, [r3]
 6e8:	pop	{r4, pc}
 6ec:	muleq	r1, r8, r9
 6f0:	andeq	r0, r1, r4, asr r9
 6f4:	andeq	r0, r0, ip, lsr #32
 6f8:	andeq	r0, r1, r8, ror #18
 6fc:	andeq	r0, r1, r8, asr r9
 700:	b	648 <memset@plt+0x78>
 704:	andeq	r0, r0, r0

00000708 <bloom_init_size@@Base>:
 708:	b	710 <bloom_init@@Base>
 70c:	nop	{0}

00000710 <bloom_init@@Base>:
 710:	push	{r4, r5, r6, sl, fp, lr}
 714:	add	fp, sp, #16
 718:	mov	r4, r0
 71c:	mov	r0, #0
 720:	mov	r5, #1
 724:	cmp	r1, #1000	; 0x3e8
 728:	str	r0, [r4, #44]	; 0x2c
 72c:	blt	7c4 <bloom_init@@Base+0xb4>
 730:	vcmp.f64	d0, #0.0
 734:	vmrs	APSR_nzcv, fpscr
 738:	beq	7c4 <bloom_init@@Base+0xb4>
 73c:	vstr	d0, [r4, #8]
 740:	mov	r6, r1
 744:	str	r1, [r4]
 748:	bl	588 <log@plt>
 74c:	vldr	d16, [pc, #124]	; 7d0 <bloom_init@@Base+0xc0>
 750:	vldr	d17, [pc, #128]	; 7d8 <bloom_init@@Base+0xc8>
 754:	vmov	s2, r6
 758:	mov	r5, #1
 75c:	vcvt.f64.s32	d18, s2
 760:	vdiv.f64	d16, d0, d16
 764:	vmul.f64	d17, d16, d17
 768:	vnmul.f64	d18, d16, d18
 76c:	vneg.f64	d16, d16
 770:	vrintp.f64	d17, d17
 774:	vcvt.s32.f64	s0, d18
 778:	vcvt.s32.f64	s2, d17
 77c:	vcvt.s32.f64	s4, d18
 780:	vstr	d16, [r4, #32]
 784:	vstr	s0, [r4, #16]
 788:	vmov	r1, s4
 78c:	vstr	s2, [r4, #24]
 790:	asr	r0, r1, #31
 794:	tst	r1, #7
 798:	add	r2, r1, r0, lsr #29
 79c:	mov	r1, #1
 7a0:	asr	r0, r2, #3
 7a4:	addne	r0, r5, r2, asr #3
 7a8:	str	r0, [r4, #20]
 7ac:	bl	57c <calloc@plt>
 7b0:	cmp	r0, #0
 7b4:	str	r0, [r4, #40]	; 0x28
 7b8:	movne	r0, #1
 7bc:	movne	r5, #0
 7c0:	strne	r0, [r4, #44]	; 0x2c
 7c4:	mov	r0, r5
 7c8:	pop	{r4, r5, r6, sl, fp, pc}
 7cc:	nop	{0}
 7d0:			; <UNDEFINED> instruction: 0xff82c587
 7d4:	svccc	0x00debfbd
 7d8:			; <UNDEFINED> instruction: 0xfefa39ec
 7dc:	svclt	0x00e62e42

000007e0 <bloom_check@@Base>:
 7e0:	mov	r3, #0
 7e4:	b	7e8 <bloom_check@@Base+0x8>
 7e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
 7ec:	add	fp, sp, #24
 7f0:	mov	r4, r0
 7f4:	ldr	r0, [r0, #44]	; 0x2c
 7f8:	cmp	r0, #0
 7fc:	beq	8a8 <bloom_check@@Base+0xc8>
 800:	mov	r7, r2
 804:	movw	r2, #45708	; 0xb28c
 808:	mov	r5, r1
 80c:	mov	r0, r1
 810:	mov	r8, r3
 814:	movt	r2, #38727	; 0x9747
 818:	mov	r1, r7
 81c:	bl	5ac <murmurhash2@plt>
 820:	mov	r6, r0
 824:	mov	r0, r5
 828:	mov	r1, r7
 82c:	mov	r2, r6
 830:	bl	5ac <murmurhash2@plt>
 834:	ldr	r9, [r4, #24]
 838:	cmp	r9, #0
 83c:	beq	8c0 <bloom_check@@Base+0xe0>
 840:	mov	r3, #0
 844:	mov	ip, #1
 848:	mov	lr, #0
 84c:	ldr	r1, [r4, #16]
 850:	ldr	r5, [r4, #40]	; 0x28
 854:	udiv	r2, r6, r1
 858:	mls	r7, r2, r1, r6
 85c:	ldrb	r1, [r5, r7, lsr #3]
 860:	and	r2, r7, #7
 864:	tst	r1, ip, lsl r2
 868:	beq	874 <bloom_check@@Base+0x94>
 86c:	add	lr, lr, #1
 870:	b	894 <bloom_check@@Base+0xb4>
 874:	cmp	r8, #0
 878:	moveq	r0, #0
 87c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
 880:	lsl	r2, ip, r2
 884:	lsr	r7, r7, #3
 888:	orr	r1, r1, r2
 88c:	strb	r1, [r5, r7]
 890:	ldr	r9, [r4, #24]
 894:	add	r3, r3, #1
 898:	add	r6, r6, r0
 89c:	cmp	r3, r9
 8a0:	bcc	84c <bloom_check@@Base+0x6c>
 8a4:	b	8c8 <bloom_check@@Base+0xe8>
 8a8:	ldr	r0, [pc, #40]	; 8d8 <bloom_check@@Base+0xf8>
 8ac:	mov	r1, r4
 8b0:	add	r0, pc, r0
 8b4:	bl	5a0 <printf@plt>
 8b8:	mvn	r0, #0
 8bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 8c0:	mov	lr, #0
 8c4:	mov	r9, #0
 8c8:	sub	r0, lr, r9
 8cc:	clz	r0, r0
 8d0:	lsr	r0, r0, #5
 8d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 8d8:	andeq	r0, r0, r1, lsl #5

000008dc <bloom_add@@Base>:
 8dc:	mov	r3, #1
 8e0:	b	7e8 <bloom_check@@Base+0x8>

000008e4 <bloom_print@@Base>:
 8e4:	push	{r4, sl, fp, lr}
 8e8:	add	fp, sp, #8
 8ec:	mov	r4, r0
 8f0:	ldr	r0, [pc, #116]	; 96c <bloom_print@@Base+0x88>
 8f4:	mov	r1, r4
 8f8:	add	r0, pc, r0
 8fc:	bl	5a0 <printf@plt>
 900:	ldr	r1, [r4]
 904:	ldr	r0, [pc, #100]	; 970 <bloom_print@@Base+0x8c>
 908:	add	r0, pc, r0
 90c:	bl	5a0 <printf@plt>
 910:	vldr	d16, [r4, #8]
 914:	ldr	r0, [pc, #88]	; 974 <bloom_print@@Base+0x90>
 918:	vmov	r2, r3, d16
 91c:	add	r0, pc, r0
 920:	bl	5a0 <printf@plt>
 924:	ldr	r1, [r4, #16]
 928:	ldr	r0, [pc, #72]	; 978 <bloom_print@@Base+0x94>
 92c:	add	r0, pc, r0
 930:	bl	5a0 <printf@plt>
 934:	vldr	d16, [r4, #32]
 938:	ldr	r0, [pc, #60]	; 97c <bloom_print@@Base+0x98>
 93c:	vmov	r2, r3, d16
 940:	add	r0, pc, r0
 944:	bl	5a0 <printf@plt>
 948:	ldr	r1, [r4, #20]
 94c:	ldr	r0, [pc, #44]	; 980 <bloom_print@@Base+0x9c>
 950:	add	r0, pc, r0
 954:	bl	5a0 <printf@plt>
 958:	ldr	r1, [r4, #24]
 95c:	ldr	r0, [pc, #32]	; 984 <bloom_print@@Base+0xa0>
 960:	add	r0, pc, r0
 964:	pop	{r4, sl, fp, lr}
 968:	b	5a0 <printf@plt>
 96c:			; <UNDEFINED> instruction: 0x000001bc
 970:			; <UNDEFINED> instruction: 0x000001b9
 974:			; <UNDEFINED> instruction: 0x000001b6
 978:			; <UNDEFINED> instruction: 0x000001b5
 97c:	andeq	r0, r0, pc, lsr #3
 980:			; <UNDEFINED> instruction: 0x000001b6
 984:			; <UNDEFINED> instruction: 0x000001b5

00000988 <bloom_free@@Base>:
 988:	push	{r4, sl, fp, lr}
 98c:	add	fp, sp, #8
 990:	mov	r4, r0
 994:	ldr	r0, [r0, #44]	; 0x2c
 998:	cmp	r0, #0
 99c:	beq	9a8 <bloom_free@@Base+0x20>
 9a0:	ldr	r0, [r4, #40]	; 0x28
 9a4:	bl	5b8 <free@plt>
 9a8:	mov	r0, #0
 9ac:	str	r0, [r4, #44]	; 0x2c
 9b0:	pop	{r4, sl, fp, pc}

000009b4 <bloom_reset@@Base>:
 9b4:	push	{r4, sl, fp, lr}
 9b8:	add	fp, sp, #8
 9bc:	ldr	r1, [r0, #44]	; 0x2c
 9c0:	cmp	r1, #0
 9c4:	beq	9e0 <bloom_reset@@Base+0x2c>
 9c8:	ldr	r2, [r0, #20]
 9cc:	ldr	r0, [r0, #40]	; 0x28
 9d0:	mov	r1, #0
 9d4:	mov	r4, #0
 9d8:	bl	5d0 <memset@plt>
 9dc:	b	9e4 <bloom_reset@@Base+0x30>
 9e0:	mov	r4, #1
 9e4:	mov	r0, r4
 9e8:	pop	{r4, sl, fp, pc}

000009ec <bloom_version@@Base>:
 9ec:	ldr	r0, [pc, #4]	; 9f8 <bloom_version@@Base+0xc>
 9f0:	add	r0, pc, r0
 9f4:	bx	lr
 9f8:	andeq	r0, r0, sp, lsr r1

000009fc <murmurhash2@@Base>:
 9fc:	eor	r3, r2, r1
 a00:	movw	r2, #59797	; 0xe995
 a04:	cmp	r1, #4
 a08:	movt	r2, #23505	; 0x5bd1
 a0c:	blt	a70 <murmurhash2@@Base+0x74>
 a10:	push	{r4, r5, r6, sl, fp, lr}
 a14:	add	fp, sp, #16
 a18:	mvn	r5, r1
 a1c:	add	r4, r1, #4
 a20:	cmn	r5, #8
 a24:	mvnle	r5, #7
 a28:	add	r5, r5, r1
 a2c:	sub	r1, r1, #4
 a30:	add	r5, r5, #4
 a34:	bic	ip, r5, #3
 a38:	mov	r5, r0
 a3c:	add	lr, ip, #4
 a40:	ldr	r6, [r5], #4
 a44:	sub	r4, r4, #4
 a48:	mul	r3, r3, r2
 a4c:	cmp	r4, #7
 a50:	mul	r6, r6, r2
 a54:	eor	r6, r6, r6, lsr #24
 a58:	mul	r6, r6, r2
 a5c:	eor	r3, r6, r3
 a60:	bgt	a40 <murmurhash2@@Base+0x44>
 a64:	sub	r1, r1, ip
 a68:	add	r0, r0, lr
 a6c:	pop	{r4, r5, r6, sl, fp, lr}
 a70:	cmp	r1, #1
 a74:	beq	a98 <murmurhash2@@Base+0x9c>
 a78:	cmp	r1, #2
 a7c:	beq	a90 <murmurhash2@@Base+0x94>
 a80:	cmp	r1, #3
 a84:	bne	aa4 <murmurhash2@@Base+0xa8>
 a88:	ldrb	r1, [r0, #2]
 a8c:	eor	r3, r3, r1, lsl #16
 a90:	ldrb	r1, [r0, #1]
 a94:	eor	r3, r3, r1, lsl #8
 a98:	ldrb	r0, [r0]
 a9c:	eor	r0, r3, r0
 aa0:	mul	r3, r0, r2
 aa4:	eor	r0, r3, r3, lsr #13
 aa8:	mul	r0, r0, r2
 aac:	eor	r0, r0, r0, lsr #15
 ab0:	bx	lr

Disassembly of section .fini:

00000ab4 <.fini>:
 ab4:	push	{r3, lr}
 ab8:	pop	{r3, pc}
