
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010d44 <.init>:
   10d44:	push	{r3, lr}
   10d48:	bl	11458 <__assert_fail@plt+0x454>
   10d4c:	pop	{r3, pc}

Disassembly of section .plt:

00010d50 <calloc@plt-0x14>:
   10d50:	push	{lr}		; (str lr, [sp, #-4]!)
   10d54:	ldr	lr, [pc, #4]	; 10d60 <calloc@plt-0x4>
   10d58:	add	lr, pc, lr
   10d5c:	ldr	pc, [lr, #8]!
   10d60:	andeq	r9, r1, r0, lsr #5

00010d64 <calloc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #672]!	; 0x2a0

00010d70 <fputs_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #664]!	; 0x298

00010d7c <strcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #656]!	; 0x290

00010d88 <posix_fadvise64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #648]!	; 0x288

00010d94 <fflush@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #640]!	; 0x280

00010da0 <memmove@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #632]!	; 0x278

00010dac <free@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #624]!	; 0x270

00010db8 <ferror@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #616]!	; 0x268

00010dc4 <_exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #608]!	; 0x260

00010dd0 <memcpy@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #600]!	; 0x258

00010ddc <mbsinit@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #592]!	; 0x250

00010de8 <fwrite_unlocked@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #584]!	; 0x248

00010df4 <memcmp@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #576]!	; 0x240

00010e00 <fputc_unlocked@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #568]!	; 0x238

00010e0c <dcgettext@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #560]!	; 0x230

00010e18 <realloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #552]!	; 0x228

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #544]!	; 0x220

00010e30 <iswprint@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #536]!	; 0x218

00010e3c <fwrite@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #528]!	; 0x210

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #520]!	; 0x208

00010e54 <__ctype_get_mb_cur_max@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #512]!	; 0x200

00010e60 <__fpending@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #504]!	; 0x1f8

00010e6c <mbrtowc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #496]!	; 0x1f0

00010e78 <error@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #488]!	; 0x1e8

00010e84 <malloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e90 <__libc_start_main@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #472]!	; 0x1d8

00010e9c <__freading@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ea8 <__gmon_start__@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #456]!	; 0x1c8

00010eb4 <getopt_long@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #448]!	; 0x1c0

00010ec0 <__ctype_b_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #440]!	; 0x1b8

00010ecc <exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #432]!	; 0x1b0

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ee4 <ungetc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #416]!	; 0x1a0

00010ef0 <__errno_location@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #408]!	; 0x198

00010efc <__cxa_atexit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #400]!	; 0x190

00010f08 <memset@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #392]!	; 0x188

00010f14 <fgetc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #384]!	; 0x180

00010f20 <__printf_chk@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #376]!	; 0x178

00010f2c <fileno@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #368]!	; 0x170

00010f38 <__fprintf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #360]!	; 0x168

00010f44 <memchr@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #352]!	; 0x160

00010f50 <fclose@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #344]!	; 0x158

00010f5c <fseeko64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #336]!	; 0x150

00010f68 <__fread_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #328]!	; 0x148

00010f74 <__uflow@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #320]!	; 0x140

00010f80 <__overflow@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #312]!	; 0x138

00010f8c <setlocale@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #304]!	; 0x130

00010f98 <strrchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #296]!	; 0x128

00010fa4 <nl_langinfo@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #288]!	; 0x120

00010fb0 <clearerr_unlocked@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #280]!	; 0x118

00010fbc <fopen64@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #272]!	; 0x110

00010fc8 <qsort@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #264]!	; 0x108

00010fd4 <bindtextdomain@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #256]!	; 0x100

00010fe0 <strncmp@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #248]!	; 0xf8

00010fec <abort@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #240]!	; 0xf0

00010ff8 <strspn@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #232]!	; 0xe8

00011004 <__assert_fail@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #224]!	; 0xe0

Disassembly of section .text:

00011010 <.text>:
   11010:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11014:	movw	r5, #41328	; 0xa170
   11018:	movt	r5, #2
   1101c:	strd	r6, [sp, #8]
   11020:	mov	r6, r1
   11024:	movw	r7, #35256	; 0x89b8
   11028:	movt	r7, #1
   1102c:	strd	r8, [sp, #16]
   11030:	mov	r8, r0
   11034:	strd	sl, [sp, #24]
   11038:	movw	fp, #41320	; 0xa168
   1103c:	movt	fp, #2
   11040:	str	lr, [sp, #32]
   11044:	sub	sp, sp, #28
   11048:	ldr	r0, [r1]
   1104c:	bl	13278 <__assert_fail@plt+0x2274>
   11050:	movw	r1, #33664	; 0x8380
   11054:	movt	r1, #1
   11058:	ldr	r9, [pc, #948]	; 11414 <__assert_fail@plt+0x410>
   1105c:	mov	r0, #6
   11060:	bl	10f8c <setlocale@plt>
   11064:	movw	r1, #35108	; 0x8924
   11068:	movt	r1, #1
   1106c:	movw	r0, #34940	; 0x887c
   11070:	movt	r0, #1
   11074:	bl	10fd4 <bindtextdomain@plt>
   11078:	movw	r0, #34940	; 0x887c
   1107c:	movt	r0, #1
   11080:	bl	10e24 <textdomain@plt>
   11084:	movw	r0, #10848	; 0x2a60
   11088:	movt	r0, #1
   1108c:	bl	18088 <__assert_fail@plt+0x7084>
   11090:	mov	r3, #0
   11094:	mov	sl, r3
   11098:	strb	r3, [r5, #4]
   1109c:	strb	r3, [r5, #16]
   110a0:	str	r3, [sp, #16]
   110a4:	str	r3, [sp, #20]
   110a8:	strb	r3, [r5, #29]
   110ac:	mov	r4, #0
   110b0:	mov	r3, r9
   110b4:	mov	r2, r7
   110b8:	mov	r1, r6
   110bc:	mov	r0, r8
   110c0:	str	r4, [sp]
   110c4:	bl	10eb4 <getopt_long@plt>
   110c8:	cmn	r0, #1
   110cc:	beq	11224 <__assert_fail@plt+0x220>
   110d0:	cmp	r0, #102	; 0x66
   110d4:	beq	11204 <__assert_fail@plt+0x200>
   110d8:	ble	11104 <__assert_fail@plt+0x100>
   110dc:	cmp	r0, #122	; 0x7a
   110e0:	beq	11214 <__assert_fail@plt+0x210>
   110e4:	bgt	11170 <__assert_fail@plt+0x16c>
   110e8:	cmp	r0, #110	; 0x6e
   110ec:	beq	110ac <__assert_fail@plt+0xa8>
   110f0:	cmp	r0, #115	; 0x73
   110f4:	bne	11400 <__assert_fail@plt+0x3fc>
   110f8:	mov	r3, #1
   110fc:	strb	r3, [r5, #4]
   11100:	b	110ac <__assert_fail@plt+0xa8>
   11104:	cmp	r0, #99	; 0x63
   11108:	bgt	111c8 <__assert_fail@plt+0x1c4>
   1110c:	cmp	r0, #98	; 0x62
   11110:	bge	111fc <__assert_fail@plt+0x1f8>
   11114:	cmn	r0, #3
   11118:	bne	111b8 <__assert_fail@plt+0x1b4>
   1111c:	movw	r3, #35208	; 0x8988
   11120:	movt	r3, #1
   11124:	movw	r1, #35224	; 0x8998
   11128:	movt	r1, #1
   1112c:	movw	r2, #35240	; 0x89a8
   11130:	movt	r2, #1
   11134:	movw	r0, #41316	; 0xa164
   11138:	movt	r0, #2
   1113c:	str	r2, [sp]
   11140:	movw	r2, #34936	; 0x8878
   11144:	movt	r2, #1
   11148:	stmib	sp, {r1, r3, r4}
   1114c:	movw	r3, #41216	; 0xa100
   11150:	movt	r3, #2
   11154:	movw	r1, #33212	; 0x81bc
   11158:	movt	r1, #1
   1115c:	ldr	r0, [r0]
   11160:	ldr	r3, [r3]
   11164:	bl	172ac <__assert_fail@plt+0x62a8>
   11168:	mov	r0, r4
   1116c:	bl	10ecc <exit@plt>
   11170:	cmp	r0, #256	; 0x100
   11174:	bne	111a0 <__assert_fail@plt+0x19c>
   11178:	ldr	r4, [fp]
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	moveq	r0, #1
   11188:	beq	11194 <__assert_fail@plt+0x190>
   1118c:	mov	r0, r4
   11190:	bl	10ed8 <strlen@plt>
   11194:	str	r0, [r5, #20]
   11198:	str	r4, [r5, #24]
   1119c:	b	110ac <__assert_fail@plt+0xa8>
   111a0:	movw	r3, #257	; 0x101
   111a4:	cmp	r0, r3
   111a8:	bne	11400 <__assert_fail@plt+0x3fc>
   111ac:	mov	r3, #1
   111b0:	strb	r3, [r5, #30]
   111b4:	b	110ac <__assert_fail@plt+0xa8>
   111b8:	cmn	r0, #2
   111bc:	bne	11400 <__assert_fail@plt+0x3fc>
   111c0:	mov	r0, r4
   111c4:	bl	11e04 <__assert_fail@plt+0xe00>
   111c8:	cmp	r0, #100	; 0x64
   111cc:	bne	11400 <__assert_fail@plt+0x3fc>
   111d0:	ldr	r2, [fp]
   111d4:	ldrb	r3, [r2]
   111d8:	cmp	r3, #0
   111dc:	beq	111ec <__assert_fail@plt+0x1e8>
   111e0:	ldrb	r2, [r2, #1]
   111e4:	cmp	r2, #0
   111e8:	bne	11408 <__assert_fail@plt+0x404>
   111ec:	strb	r3, [r5, #16]
   111f0:	mov	r3, #1
   111f4:	str	r3, [sp, #20]
   111f8:	b	110ac <__assert_fail@plt+0xa8>
   111fc:	mov	r3, #1
   11200:	str	r3, [sp, #16]
   11204:	cmp	sl, #0
   11208:	bne	113dc <__assert_fail@plt+0x3d8>
   1120c:	ldr	sl, [fp]
   11210:	b	110ac <__assert_fail@plt+0xa8>
   11214:	movw	r3, #41212	; 0xa0fc
   11218:	movt	r3, #2
   1121c:	strb	r4, [r3]
   11220:	b	110ac <__assert_fail@plt+0xa8>
   11224:	cmp	sl, r4
   11228:	movweq	r1, #35268	; 0x89c4
   1122c:	movteq	r1, #1
   11230:	beq	113e4 <__assert_fail@plt+0x3e0>
   11234:	ldr	r3, [sp, #16]
   11238:	cmp	r3, #0
   1123c:	beq	112b8 <__assert_fail@plt+0x2b4>
   11240:	ldr	r3, [sp, #20]
   11244:	cmp	r3, #0
   11248:	movwne	r1, #35324	; 0x89fc
   1124c:	movtne	r1, #1
   11250:	bne	113e4 <__assert_fail@plt+0x3e0>
   11254:	ldrb	r3, [r5, #4]
   11258:	cmp	r3, #0
   1125c:	movwne	r1, #35392	; 0x8a40
   11260:	movne	r2, #5
   11264:	movtne	r1, #1
   11268:	bne	113e8 <__assert_fail@plt+0x3e4>
   1126c:	ldrb	r3, [r5, #30]
   11270:	mov	r0, sl
   11274:	cmp	r3, #0
   11278:	beq	1139c <__assert_fail@plt+0x398>
   1127c:	mov	r1, #6
   11280:	bl	1223c <__assert_fail@plt+0x1238>
   11284:	ldr	r3, [r5, #24]
   11288:	mov	r2, #9
   1128c:	strb	r2, [r5, #16]
   11290:	cmp	r3, #0
   11294:	beq	113a8 <__assert_fail@plt+0x3a4>
   11298:	ldr	r2, [sp, #16]
   1129c:	movw	r3, #5388	; 0x150c
   112a0:	movt	r3, #1
   112a4:	movw	r9, #6824	; 0x1aa8
   112a8:	movt	r9, #1
   112ac:	cmp	r2, #0
   112b0:	moveq	r9, r3
   112b4:	b	112f0 <__assert_fail@plt+0x2ec>
   112b8:	ldrb	r3, [r5, #30]
   112bc:	mov	r0, sl
   112c0:	cmp	r3, #0
   112c4:	movne	r1, #2
   112c8:	moveq	r1, #0
   112cc:	bl	1223c <__assert_fail@plt+0x1238>
   112d0:	ldr	r3, [sp, #20]
   112d4:	cmp	r3, #0
   112d8:	beq	11284 <__assert_fail@plt+0x280>
   112dc:	ldr	r3, [r5, #24]
   112e0:	cmp	r3, #0
   112e4:	beq	113a8 <__assert_fail@plt+0x3a4>
   112e8:	movw	r9, #5388	; 0x150c
   112ec:	movt	r9, #1
   112f0:	movw	r7, #41296	; 0xa150
   112f4:	movt	r7, #2
   112f8:	ldr	r3, [r7]
   112fc:	cmp	r3, r8
   11300:	beq	113c4 <__assert_fail@plt+0x3c0>
   11304:	mov	r4, #1
   11308:	bge	11334 <__assert_fail@plt+0x330>
   1130c:	mov	r1, r9
   11310:	ldr	r0, [r6, r3, lsl #2]
   11314:	bl	11cbc <__assert_fail@plt+0xcb8>
   11318:	ldr	r3, [r7]
   1131c:	and	r4, r4, r0
   11320:	uxtb	r4, r4
   11324:	add	r3, r3, #1
   11328:	cmp	r3, r8
   1132c:	str	r3, [r7]
   11330:	blt	1130c <__assert_fail@plt+0x308>
   11334:	ldrb	r3, [r5, #29]
   11338:	cmp	r3, #0
   1133c:	bne	11364 <__assert_fail@plt+0x360>
   11340:	eor	r0, r4, #1
   11344:	uxtb	r0, r0
   11348:	add	sp, sp, #28
   1134c:	ldrd	r4, [sp]
   11350:	ldrd	r6, [sp, #8]
   11354:	ldrd	r8, [sp, #16]
   11358:	ldrd	sl, [sp, #24]
   1135c:	add	sp, sp, #32
   11360:	pop	{pc}		; (ldr pc, [sp], #4)
   11364:	movw	r3, #41312	; 0xa160
   11368:	movt	r3, #2
   1136c:	ldr	r0, [r3]
   11370:	bl	12ba0 <__assert_fail@plt+0x1b9c>
   11374:	cmn	r0, #1
   11378:	bne	11340 <__assert_fail@plt+0x33c>
   1137c:	bl	10ef0 <__errno_location@plt>
   11380:	mov	r4, #0
   11384:	movw	r2, #35848	; 0x8c08
   11388:	movt	r2, #1
   1138c:	ldr	r1, [r0]
   11390:	mov	r0, r4
   11394:	bl	10e78 <error@plt>
   11398:	b	11340 <__assert_fail@plt+0x33c>
   1139c:	mov	r1, #4
   113a0:	bl	1223c <__assert_fail@plt+0x1238>
   113a4:	b	11284 <__assert_fail@plt+0x280>
   113a8:	ldrb	r2, [r5, #16]
   113ac:	mov	r1, #1
   113b0:	ldr	r3, [pc, #96]	; 11418 <__assert_fail@plt+0x414>
   113b4:	str	r1, [r5, #20]
   113b8:	str	r3, [r5, #24]
   113bc:	strb	r2, [r5, #28]
   113c0:	b	11298 <__assert_fail@plt+0x294>
   113c4:	mov	r1, r9
   113c8:	movw	r0, #35848	; 0x8c08
   113cc:	movt	r0, #1
   113d0:	bl	11cbc <__assert_fail@plt+0xcb8>
   113d4:	mov	r4, r0
   113d8:	b	11334 <__assert_fail@plt+0x330>
   113dc:	movw	r1, #35132	; 0x893c
   113e0:	movt	r1, #1
   113e4:	mov	r2, #5
   113e8:	mov	r0, #0
   113ec:	bl	10e0c <dcgettext@plt>
   113f0:	mov	r1, #0
   113f4:	mov	r2, r0
   113f8:	mov	r0, r1
   113fc:	bl	10e78 <error@plt>
   11400:	mov	r0, #1
   11404:	bl	11e04 <__assert_fail@plt+0xe00>
   11408:	movw	r1, #35164	; 0x895c
   1140c:	movt	r1, #1
   11410:	b	113e4 <__assert_fail@plt+0x3e0>
   11414:	strdeq	r8, [r1], -r0
   11418:	andeq	sl, r2, ip, lsl #3
   1141c:	mov	fp, #0
   11420:	mov	lr, #0
   11424:	pop	{r1}		; (ldr r1, [sp], #4)
   11428:	mov	r2, sp
   1142c:	push	{r2}		; (str r2, [sp, #-4]!)
   11430:	push	{r0}		; (str r0, [sp, #-4]!)
   11434:	ldr	ip, [pc, #16]	; 1144c <__assert_fail@plt+0x448>
   11438:	push	{ip}		; (str ip, [sp, #-4]!)
   1143c:	ldr	r0, [pc, #12]	; 11450 <__assert_fail@plt+0x44c>
   11440:	ldr	r3, [pc, #12]	; 11454 <__assert_fail@plt+0x450>
   11444:	bl	10e90 <__libc_start_main@plt>
   11448:	bl	10fec <abort@plt>
   1144c:	andeq	r8, r1, r4, lsl #1
   11450:	andeq	r1, r1, r0, lsl r0
   11454:	andeq	r8, r1, r4, lsr #32
   11458:	ldr	r3, [pc, #20]	; 11474 <__assert_fail@plt+0x470>
   1145c:	ldr	r2, [pc, #20]	; 11478 <__assert_fail@plt+0x474>
   11460:	add	r3, pc, r3
   11464:	ldr	r2, [r3, r2]
   11468:	cmp	r2, #0
   1146c:	bxeq	lr
   11470:	b	10ea8 <__gmon_start__@plt>
   11474:	muleq	r1, r8, fp
   11478:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1147c:	ldr	r0, [pc, #24]	; 1149c <__assert_fail@plt+0x498>
   11480:	ldr	r3, [pc, #24]	; 114a0 <__assert_fail@plt+0x49c>
   11484:	cmp	r3, r0
   11488:	bxeq	lr
   1148c:	ldr	r3, [pc, #16]	; 114a4 <__assert_fail@plt+0x4a0>
   11490:	cmp	r3, #0
   11494:	bxeq	lr
   11498:	bx	r3
   1149c:	andeq	sl, r2, r8, asr #2
   114a0:	andeq	sl, r2, r8, asr #2
   114a4:	andeq	r0, r0, r0
   114a8:	ldr	r0, [pc, #36]	; 114d4 <__assert_fail@plt+0x4d0>
   114ac:	ldr	r1, [pc, #36]	; 114d8 <__assert_fail@plt+0x4d4>
   114b0:	sub	r1, r1, r0
   114b4:	asr	r1, r1, #2
   114b8:	add	r1, r1, r1, lsr #31
   114bc:	asrs	r1, r1, #1
   114c0:	bxeq	lr
   114c4:	ldr	r3, [pc, #16]	; 114dc <__assert_fail@plt+0x4d8>
   114c8:	cmp	r3, #0
   114cc:	bxeq	lr
   114d0:	bx	r3
   114d4:	andeq	sl, r2, r8, asr #2
   114d8:	andeq	sl, r2, r8, asr #2
   114dc:	andeq	r0, r0, r0
   114e0:	push	{r4, lr}
   114e4:	ldr	r4, [pc, #24]	; 11504 <__assert_fail@plt+0x500>
   114e8:	ldrb	r3, [r4]
   114ec:	cmp	r3, #0
   114f0:	popne	{r4, pc}
   114f4:	bl	1147c <__assert_fail@plt+0x478>
   114f8:	mov	r3, #1
   114fc:	strb	r3, [r4]
   11500:	pop	{r4, pc}
   11504:	andeq	sl, r2, ip, ror #2
   11508:	b	114a8 <__assert_fail@plt+0x4a4>
   1150c:	movw	r3, #41364	; 0xa194
   11510:	movt	r3, #2
   11514:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11518:	ldr	r2, [r3]
   1151c:	movw	r5, #41328	; 0xa170
   11520:	movt	r5, #2
   11524:	mov	r4, r0
   11528:	ldr	r1, [r0, #8]
   1152c:	strd	r6, [sp, #8]
   11530:	strd	r8, [sp, #16]
   11534:	strd	sl, [sp, #24]
   11538:	str	lr, [sp, #32]
   1153c:	sub	sp, sp, #36	; 0x24
   11540:	str	r2, [r5]
   11544:	str	r3, [sp, #24]
   11548:	ldr	r3, [r0, #4]
   1154c:	cmp	r1, r3
   11550:	bls	119dc <__assert_fail@plt+0x9d8>
   11554:	add	r2, r3, #1
   11558:	str	r2, [r0, #4]
   1155c:	ldrb	r0, [r3]
   11560:	mov	r1, r4
   11564:	mov	fp, #0
   11568:	bl	10ee4 <ungetc@plt>
   1156c:	ldr	r3, [r5]
   11570:	mov	r2, #0
   11574:	mov	sl, #1
   11578:	mov	r6, r2
   1157c:	movw	r7, #41212	; 0xa0fc
   11580:	movt	r7, #2
   11584:	str	r2, [sp, #16]
   11588:	movw	r8, #41316	; 0xa164
   1158c:	movt	r8, #2
   11590:	ldrb	r1, [r5, #4]
   11594:	ldrd	r2, [r3]
   11598:	cmp	r3, fp
   1159c:	cmpeq	r2, sl
   115a0:	movhi	r3, #1
   115a4:	movls	r3, r6
   115a8:	eor	r3, r3, r1
   115ac:	str	r3, [sp, #20]
   115b0:	ldr	r3, [sp, #20]
   115b4:	cmp	fp, #0
   115b8:	cmpeq	sl, #1
   115bc:	movne	r9, #0
   115c0:	andeq	r9, r3, #1
   115c4:	cmp	r9, #0
   115c8:	bne	11778 <__assert_fail@plt+0x774>
   115cc:	ldr	r1, [r5]
   115d0:	ldrd	r2, [r1]
   115d4:	cmp	r3, fp
   115d8:	cmpeq	r2, sl
   115dc:	bhi	116ec <__assert_fail@plt+0x6e8>
   115e0:	ldr	r3, [sp, #16]
   115e4:	cmp	r3, #0
   115e8:	beq	11654 <__assert_fail@plt+0x650>
   115ec:	mov	r1, #1
   115f0:	ldr	r3, [r8]
   115f4:	ldr	r2, [r5, #20]
   115f8:	ldr	r0, [r5, #24]
   115fc:	bl	10de8 <fwrite_unlocked@plt>
   11600:	b	11654 <__assert_fail@plt+0x650>
   11604:	add	r2, r3, #1
   11608:	ldrb	r1, [r7]
   1160c:	str	r2, [r4, #4]
   11610:	ldrb	r9, [r3]
   11614:	ldrb	r3, [r5, #16]
   11618:	cmp	r3, r9
   1161c:	beq	11680 <__assert_fail@plt+0x67c>
   11620:	cmp	r1, r9
   11624:	beq	11904 <__assert_fail@plt+0x900>
   11628:	cmn	r9, #1
   1162c:	beq	1181c <__assert_fail@plt+0x818>
   11630:	ldr	r0, [r8]
   11634:	ldr	r3, [r0, #20]
   11638:	ldr	r2, [r0, #24]
   1163c:	cmp	r3, r2
   11640:	addcc	r2, r3, #1
   11644:	strcc	r2, [r0, #20]
   11648:	strbcc	r9, [r3]
   1164c:	bcs	1176c <__assert_fail@plt+0x768>
   11650:	mov	r6, r9
   11654:	ldr	r3, [r4, #4]
   11658:	ldr	r2, [r4, #8]
   1165c:	cmp	r3, r2
   11660:	bcc	11604 <__assert_fail@plt+0x600>
   11664:	mov	r0, r4
   11668:	bl	10f74 <__uflow@plt>
   1166c:	ldrb	r3, [r5, #16]
   11670:	mov	r9, r0
   11674:	ldrb	r1, [r7]
   11678:	cmp	r3, r9
   1167c:	bne	11620 <__assert_fail@plt+0x61c>
   11680:	mov	r0, #1
   11684:	cmp	r1, r3
   11688:	mov	r2, r6
   1168c:	mov	r6, r9
   11690:	str	r0, [sp, #16]
   11694:	beq	11728 <__assert_fail@plt+0x724>
   11698:	ldr	r1, [r5]
   1169c:	adds	sl, sl, #1
   116a0:	adc	fp, fp, #0
   116a4:	ldrd	r2, [r1, #8]
   116a8:	cmp	fp, r3
   116ac:	cmpeq	sl, r2
   116b0:	addhi	r1, r1, #16
   116b4:	strhi	r1, [r5]
   116b8:	b	115b0 <__assert_fail@plt+0x5ac>
   116bc:	add	r2, r3, #1
   116c0:	ldrb	r1, [r7]
   116c4:	str	r2, [r4, #4]
   116c8:	ldrb	r0, [r3]
   116cc:	ldrb	r3, [r5, #16]
   116d0:	cmp	r3, r0
   116d4:	beq	11714 <__assert_fail@plt+0x710>
   116d8:	cmp	r1, r0
   116dc:	beq	11950 <__assert_fail@plt+0x94c>
   116e0:	cmn	r0, #1
   116e4:	beq	11824 <__assert_fail@plt+0x820>
   116e8:	mov	r6, r0
   116ec:	ldr	r3, [r4, #4]
   116f0:	ldr	r2, [r4, #8]
   116f4:	cmp	r3, r2
   116f8:	bcc	116bc <__assert_fail@plt+0x6b8>
   116fc:	mov	r0, r4
   11700:	bl	10f74 <__uflow@plt>
   11704:	ldrb	r3, [r5, #16]
   11708:	ldrb	r1, [r7]
   1170c:	cmp	r3, r0
   11710:	bne	116d8 <__assert_fail@plt+0x6d4>
   11714:	cmp	r1, r3
   11718:	mov	r2, r6
   1171c:	mov	r9, r0
   11720:	mov	r6, r0
   11724:	bne	11698 <__assert_fail@plt+0x694>
   11728:	ldr	r3, [r4, #4]
   1172c:	ldr	r1, [r4, #8]
   11730:	cmp	r3, r1
   11734:	bcs	119a4 <__assert_fail@plt+0x9a0>
   11738:	add	r1, r3, #1
   1173c:	str	r1, [r4, #4]
   11740:	ldrb	r0, [r3]
   11744:	mov	r1, r4
   11748:	str	r2, [sp, #28]
   1174c:	bl	10ee4 <ungetc@plt>
   11750:	ldrb	r3, [r5, #16]
   11754:	ldr	r2, [sp, #28]
   11758:	cmp	r9, r3
   1175c:	mov	r6, r2
   11760:	bne	11924 <__assert_fail@plt+0x920>
   11764:	mov	r6, r9
   11768:	b	11698 <__assert_fail@plt+0x694>
   1176c:	uxtb	r1, r9
   11770:	bl	10f80 <__overflow@plt>
   11774:	b	11650 <__assert_fail@plt+0x64c>
   11778:	ldrb	r0, [r7]
   1177c:	mov	r2, #0
   11780:	mvn	r3, #0
   11784:	ldr	r1, [pc, #792]	; 11aa4 <__assert_fail@plt+0xaa0>
   11788:	ldrb	ip, [r5, #16]
   1178c:	str	ip, [sp]
   11790:	stmib	sp, {r0, r4}
   11794:	add	r0, r1, #4
   11798:	bl	12de4 <__assert_fail@plt+0x1de0>
   1179c:	subs	r2, r0, #0
   117a0:	blt	11a3c <__assert_fail@plt+0xa38>
   117a4:	beq	11a84 <__assert_fail@plt+0xa80>
   117a8:	ldr	r0, [r5, #12]
   117ac:	sub	sl, r2, #1
   117b0:	ldrb	r3, [r5, #16]
   117b4:	ldrb	r1, [r0, sl]
   117b8:	cmp	r1, r3
   117bc:	beq	118c8 <__assert_fail@plt+0x8c4>
   117c0:	ldrb	r3, [r5, #4]
   117c4:	cmp	r3, #0
   117c8:	bne	11968 <__assert_fail@plt+0x964>
   117cc:	mov	r1, #1
   117d0:	ldr	r3, [r8]
   117d4:	bl	10de8 <fwrite_unlocked@plt>
   117d8:	ldr	r3, [r5, #12]
   117dc:	ldrb	r6, [r7]
   117e0:	ldrb	r0, [r3, sl]
   117e4:	cmp	r0, r6
   117e8:	moveq	r6, r0
   117ec:	beq	11810 <__assert_fail@plt+0x80c>
   117f0:	ldr	r0, [r8]
   117f4:	ldr	r2, [r0, #20]
   117f8:	ldr	r1, [r0, #24]
   117fc:	cmp	r2, r1
   11800:	addcc	r1, r2, #1
   11804:	strcc	r1, [r0, #20]
   11808:	strbcc	r6, [r2]
   1180c:	bcs	11a74 <__assert_fail@plt+0xa70>
   11810:	mov	sl, #1
   11814:	mov	fp, #0
   11818:	b	115b0 <__assert_fail@plt+0x5ac>
   1181c:	mov	r3, #1
   11820:	str	r3, [sp, #16]
   11824:	mov	r1, #1
   11828:	ldrb	r3, [r5, #16]
   1182c:	mov	r2, r6
   11830:	mov	ip, #0
   11834:	mvn	r6, #0
   11838:	ldr	lr, [sp, #16]
   1183c:	str	r1, [sp, #16]
   11840:	ldrb	r1, [r7]
   11844:	cmp	lr, #0
   11848:	bne	11868 <__assert_fail@plt+0x864>
   1184c:	ldrb	r0, [r5, #4]
   11850:	cmp	fp, #0
   11854:	cmpeq	sl, #1
   11858:	eor	r0, r0, #1
   1185c:	orrne	r0, r0, #1
   11860:	cmp	r0, #0
   11864:	beq	118a4 <__assert_fail@plt+0x8a0>
   11868:	subs	r2, r2, r1
   1186c:	movne	r2, #1
   11870:	cmp	r3, r1
   11874:	movne	r3, r2
   11878:	orreq	r3, r2, #1
   1187c:	orrs	r3, ip, r3
   11880:	beq	119e8 <__assert_fail@plt+0x9e4>
   11884:	ldr	r0, [r8]
   11888:	ldr	r3, [r0, #20]
   1188c:	ldr	r2, [r0, #24]
   11890:	cmp	r3, r2
   11894:	addcc	r2, r3, #1
   11898:	strcc	r2, [r0, #20]
   1189c:	strbcc	r1, [r3]
   118a0:	bcs	11a04 <__assert_fail@plt+0xa00>
   118a4:	ldr	r3, [sp, #16]
   118a8:	cmp	r3, #0
   118ac:	bne	119e8 <__assert_fail@plt+0x9e4>
   118b0:	ldr	r3, [sp, #24]
   118b4:	mov	sl, #1
   118b8:	mov	fp, #0
   118bc:	ldr	r3, [r3]
   118c0:	str	r3, [r5]
   118c4:	b	115b0 <__assert_fail@plt+0x5ac>
   118c8:	ldr	r1, [r5]
   118cc:	ldrd	r2, [r1]
   118d0:	cmp	r3, #0
   118d4:	cmpeq	r2, #1
   118d8:	bls	11978 <__assert_fail@plt+0x974>
   118dc:	ldrd	r2, [r1, #8]
   118e0:	cmp	r3, #0
   118e4:	cmpeq	r2, #1
   118e8:	bhi	11958 <__assert_fail@plt+0x954>
   118ec:	add	r1, r1, #16
   118f0:	mov	sl, #2
   118f4:	mov	fp, #0
   118f8:	mov	r6, #0
   118fc:	str	r1, [r5]
   11900:	b	115d0 <__assert_fail@plt+0x5cc>
   11904:	mov	r3, #1
   11908:	str	r3, [sp, #16]
   1190c:	ldrb	r3, [r5, #16]
   11910:	ldrb	r2, [r7]
   11914:	cmp	r2, r3
   11918:	beq	11924 <__assert_fail@plt+0x920>
   1191c:	cmp	r9, r3
   11920:	beq	11764 <__assert_fail@plt+0x760>
   11924:	ldrb	r1, [r7]
   11928:	mov	r2, r6
   1192c:	mov	r6, r9
   11930:	cmp	r1, r9
   11934:	moveq	ip, #1
   11938:	movne	ip, #0
   1193c:	bne	115b0 <__assert_fail@plt+0x5ac>
   11940:	mov	r0, #0
   11944:	ldr	lr, [sp, #16]
   11948:	str	r0, [sp, #16]
   1194c:	b	11844 <__assert_fail@plt+0x840>
   11950:	mov	r9, r0
   11954:	b	1190c <__assert_fail@plt+0x908>
   11958:	mov	sl, #2
   1195c:	mov	fp, #0
   11960:	mov	r6, #0
   11964:	b	115d0 <__assert_fail@plt+0x5cc>
   11968:	mov	sl, #1
   1196c:	mov	fp, #0
   11970:	mov	r6, #0
   11974:	b	115b0 <__assert_fail@plt+0x5ac>
   11978:	mov	r2, sl
   1197c:	mov	r1, #1
   11980:	ldr	r3, [r8]
   11984:	bl	10de8 <fwrite_unlocked@plt>
   11988:	ldrb	r2, [r5, #16]
   1198c:	ldrb	r3, [r7]
   11990:	cmp	r2, r3
   11994:	beq	11a0c <__assert_fail@plt+0xa08>
   11998:	str	r9, [sp, #16]
   1199c:	ldr	r1, [r5]
   119a0:	b	118dc <__assert_fail@plt+0x8d8>
   119a4:	mov	r0, r4
   119a8:	str	r2, [sp, #28]
   119ac:	bl	10f74 <__uflow@plt>
   119b0:	cmn	r0, #1
   119b4:	ldr	r2, [sp, #28]
   119b8:	bne	11744 <__assert_fail@plt+0x740>
   119bc:	mov	r1, #1
   119c0:	mov	r6, r0
   119c4:	ldrb	r3, [r5, #16]
   119c8:	mov	ip, #0
   119cc:	ldr	lr, [sp, #16]
   119d0:	str	r1, [sp, #16]
   119d4:	ldrb	r1, [r7]
   119d8:	b	11844 <__assert_fail@plt+0x840>
   119dc:	bl	10f74 <__uflow@plt>
   119e0:	cmn	r0, #1
   119e4:	bne	11560 <__assert_fail@plt+0x55c>
   119e8:	add	sp, sp, #36	; 0x24
   119ec:	ldrd	r4, [sp]
   119f0:	ldrd	r6, [sp, #8]
   119f4:	ldrd	r8, [sp, #16]
   119f8:	ldrd	sl, [sp, #24]
   119fc:	add	sp, sp, #32
   11a00:	pop	{pc}		; (ldr pc, [sp], #4)
   11a04:	bl	10f80 <__overflow@plt>
   11a08:	b	118a4 <__assert_fail@plt+0x8a0>
   11a0c:	ldr	r3, [r4, #4]
   11a10:	ldr	r2, [r4, #8]
   11a14:	cmp	r3, r2
   11a18:	bcs	11a5c <__assert_fail@plt+0xa58>
   11a1c:	add	r2, r3, #1
   11a20:	str	r2, [r4, #4]
   11a24:	ldrb	r0, [r3]
   11a28:	mov	r1, r4
   11a2c:	bl	10ee4 <ungetc@plt>
   11a30:	str	r9, [sp, #16]
   11a34:	ldr	r1, [r5]
   11a38:	b	118dc <__assert_fail@plt+0x8d8>
   11a3c:	ldr	r0, [r5, #12]
   11a40:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   11a44:	ldr	r3, [r4]
   11a48:	mov	r2, #0
   11a4c:	str	r2, [r5, #12]
   11a50:	tst	r3, #48	; 0x30
   11a54:	bne	119e8 <__assert_fail@plt+0x9e4>
   11a58:	bl	17a74 <__assert_fail@plt+0x6a70>
   11a5c:	mov	r0, r4
   11a60:	bl	10f74 <__uflow@plt>
   11a64:	cmn	r0, #1
   11a68:	bne	11a28 <__assert_fail@plt+0xa24>
   11a6c:	ldr	r1, [r5]
   11a70:	b	118dc <__assert_fail@plt+0x8d8>
   11a74:	mov	r1, r6
   11a78:	bl	10f80 <__overflow@plt>
   11a7c:	ldrb	r6, [r7]
   11a80:	b	11810 <__assert_fail@plt+0x80c>
   11a84:	movw	r3, #32940	; 0x80ac
   11a88:	movt	r3, #1
   11a8c:	movw	r1, #33184	; 0x81a0
   11a90:	movt	r1, #1
   11a94:	movw	r0, #33196	; 0x81ac
   11a98:	movt	r0, #1
   11a9c:	movw	r2, #315	; 0x13b
   11aa0:	bl	11004 <__assert_fail@plt>
   11aa4:	andeq	sl, r2, r8, ror r1
   11aa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11aac:	movw	r2, #41316	; 0xa164
   11ab0:	movt	r2, #2
   11ab4:	mov	r4, #0
   11ab8:	mov	r5, #0
   11abc:	strd	r6, [sp, #8]
   11ac0:	strd	sl, [sp, #24]
   11ac4:	movw	fp, #41364	; 0xa194
   11ac8:	movt	fp, #2
   11acc:	ldr	r3, [fp]
   11ad0:	mov	r6, r0
   11ad4:	mov	sl, #0
   11ad8:	strd	r8, [sp, #16]
   11adc:	movw	r8, #41328	; 0xa170
   11ae0:	movt	r8, #2
   11ae4:	mov	r1, r8
   11ae8:	movw	r9, #41212	; 0xa0fc
   11aec:	movt	r9, #2
   11af0:	str	lr, [sp, #32]
   11af4:	sub	sp, sp, #12
   11af8:	str	r2, [sp]
   11afc:	str	r3, [r1], #28
   11b00:	str	r1, [sp, #4]
   11b04:	ldr	r3, [r6, #4]
   11b08:	ldr	r2, [r6, #8]
   11b0c:	cmp	r2, r3
   11b10:	bls	11bc4 <__assert_fail@plt+0xbc0>
   11b14:	add	r2, r3, #1
   11b18:	ldrb	r0, [r9]
   11b1c:	str	r2, [r6, #4]
   11b20:	ldrb	r7, [r3]
   11b24:	cmp	r7, r0
   11b28:	beq	11c2c <__assert_fail@plt+0xc28>
   11b2c:	ldr	r1, [r8]
   11b30:	adds	r4, r4, #1
   11b34:	adc	r5, r5, #0
   11b38:	ldrd	r2, [r1, #8]
   11b3c:	cmp	r5, r3
   11b40:	cmpeq	r4, r2
   11b44:	addhi	r1, r1, #16
   11b48:	ldrd	r2, [r1]
   11b4c:	strhi	r1, [r8]
   11b50:	cmp	r3, r5
   11b54:	cmpeq	r2, r4
   11b58:	bhi	11b04 <__assert_fail@plt+0xb00>
   11b5c:	ldr	r1, [sp]
   11b60:	ldr	r0, [r8, #24]
   11b64:	ldr	ip, [r1]
   11b68:	ldr	r1, [sp, #4]
   11b6c:	cmp	r0, r1
   11b70:	beq	11b8c <__assert_fail@plt+0xb88>
   11b74:	cmp	r3, r5
   11b78:	cmpeq	r2, r4
   11b7c:	movne	sl, #0
   11b80:	cmp	sl, #0
   11b84:	moveq	sl, #1
   11b88:	bne	11c68 <__assert_fail@plt+0xc64>
   11b8c:	ldr	r3, [ip, #20]
   11b90:	ldr	r2, [ip, #24]
   11b94:	cmp	r3, r2
   11b98:	addcc	r2, r3, #1
   11b9c:	strcc	r2, [ip, #20]
   11ba0:	strbcc	r7, [r3]
   11ba4:	bcc	11b04 <__assert_fail@plt+0xb00>
   11ba8:	uxtb	r1, r7
   11bac:	mov	r0, ip
   11bb0:	bl	10f80 <__overflow@plt>
   11bb4:	ldr	r3, [r6, #4]
   11bb8:	ldr	r2, [r6, #8]
   11bbc:	cmp	r2, r3
   11bc0:	bhi	11b14 <__assert_fail@plt+0xb10>
   11bc4:	mov	r0, r6
   11bc8:	bl	10f74 <__uflow@plt>
   11bcc:	ldrb	r1, [r9]
   11bd0:	cmp	r1, r0
   11bd4:	beq	11c2c <__assert_fail@plt+0xc28>
   11bd8:	cmn	r0, #1
   11bdc:	bne	11cb4 <__assert_fail@plt+0xcb0>
   11be0:	orrs	r3, r4, r5
   11be4:	beq	11c10 <__assert_fail@plt+0xc0c>
   11be8:	movw	r3, #41316	; 0xa164
   11bec:	movt	r3, #2
   11bf0:	ldr	r0, [r3]
   11bf4:	ldr	r3, [r0, #20]
   11bf8:	ldr	r2, [r0, #24]
   11bfc:	cmp	r3, r2
   11c00:	addcc	r2, r3, #1
   11c04:	strcc	r2, [r0, #20]
   11c08:	strbcc	r1, [r3]
   11c0c:	bcs	11c94 <__assert_fail@plt+0xc90>
   11c10:	add	sp, sp, #12
   11c14:	ldrd	r4, [sp]
   11c18:	ldrd	r6, [sp, #8]
   11c1c:	ldrd	r8, [sp, #16]
   11c20:	ldrd	sl, [sp, #24]
   11c24:	add	sp, sp, #32
   11c28:	pop	{pc}		; (ldr pc, [sp], #4)
   11c2c:	ldr	r3, [sp]
   11c30:	ldr	r3, [r3]
   11c34:	ldr	r2, [r3, #20]
   11c38:	ldr	r1, [r3, #24]
   11c3c:	cmp	r2, r1
   11c40:	addcc	r1, r2, #1
   11c44:	strcc	r1, [r3, #20]
   11c48:	strbcc	r0, [r2]
   11c4c:	bcs	11c84 <__assert_fail@plt+0xc80>
   11c50:	ldr	r3, [fp]
   11c54:	mov	r4, #0
   11c58:	mov	r5, #0
   11c5c:	mov	sl, #0
   11c60:	str	r3, [r8]
   11c64:	b	11b04 <__assert_fail@plt+0xb00>
   11c68:	mov	r3, ip
   11c6c:	mov	r1, #1
   11c70:	ldr	r2, [r8, #20]
   11c74:	bl	10de8 <fwrite_unlocked@plt>
   11c78:	ldr	r3, [sp]
   11c7c:	ldr	ip, [r3]
   11c80:	b	11b8c <__assert_fail@plt+0xb88>
   11c84:	mov	r1, r0
   11c88:	mov	r0, r3
   11c8c:	bl	10f80 <__overflow@plt>
   11c90:	b	11c50 <__assert_fail@plt+0xc4c>
   11c94:	add	sp, sp, #12
   11c98:	ldrd	r4, [sp]
   11c9c:	ldrd	r6, [sp, #8]
   11ca0:	ldrd	r8, [sp, #16]
   11ca4:	ldrd	sl, [sp, #24]
   11ca8:	ldr	lr, [sp, #32]
   11cac:	add	sp, sp, #36	; 0x24
   11cb0:	b	10f80 <__overflow@plt>
   11cb4:	mov	r7, r0
   11cb8:	b	11b2c <__assert_fail@plt+0xb28>
   11cbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11cc0:	mov	r5, r1
   11cc4:	movw	r1, #35848	; 0x8c08
   11cc8:	movt	r1, #1
   11ccc:	strd	r6, [sp, #8]
   11cd0:	mov	r6, r0
   11cd4:	str	r8, [sp, #16]
   11cd8:	str	lr, [sp, #20]
   11cdc:	bl	10d7c <strcmp@plt>
   11ce0:	mov	r4, r0
   11ce4:	bl	10ef0 <__errno_location@plt>
   11ce8:	cmp	r4, #0
   11cec:	mov	r7, r0
   11cf0:	bne	11dbc <__assert_fail@plt+0xdb8>
   11cf4:	movw	r3, #41312	; 0xa160
   11cf8:	movt	r3, #2
   11cfc:	ldr	r4, [r3]
   11d00:	movw	r2, #41328	; 0xa170
   11d04:	movt	r2, #2
   11d08:	mov	r1, #1
   11d0c:	strb	r1, [r2, #29]
   11d10:	mov	r1, #2
   11d14:	mov	r0, r4
   11d18:	bl	12b50 <__assert_fail@plt+0x1b4c>
   11d1c:	mov	r0, r4
   11d20:	blx	r5
   11d24:	ldr	r3, [r4]
   11d28:	movw	r1, #35848	; 0x8c08
   11d2c:	movt	r1, #1
   11d30:	mov	r0, r6
   11d34:	ldr	r5, [r7]
   11d38:	tst	r3, #32
   11d3c:	moveq	r5, #0
   11d40:	bl	10d7c <strcmp@plt>
   11d44:	cmp	r0, #0
   11d48:	mov	r0, r4
   11d4c:	beq	11d7c <__assert_fail@plt+0xd78>
   11d50:	bl	12ba0 <__assert_fail@plt+0x1b9c>
   11d54:	cmn	r0, #1
   11d58:	ldreq	r5, [r7]
   11d5c:	cmp	r5, #0
   11d60:	moveq	r0, #1
   11d64:	bne	11d8c <__assert_fail@plt+0xd88>
   11d68:	ldrd	r4, [sp]
   11d6c:	ldrd	r6, [sp, #8]
   11d70:	ldr	r8, [sp, #16]
   11d74:	add	sp, sp, #20
   11d78:	pop	{pc}		; (ldr pc, [sp], #4)
   11d7c:	bl	10fb0 <clearerr_unlocked@plt>
   11d80:	cmp	r5, #0
   11d84:	moveq	r0, #1
   11d88:	beq	11d68 <__assert_fail@plt+0xd64>
   11d8c:	mov	r2, r6
   11d90:	mov	r1, #3
   11d94:	mov	r0, #0
   11d98:	bl	1643c <__assert_fail@plt+0x5438>
   11d9c:	mov	r3, r0
   11da0:	mov	r1, r5
   11da4:	mov	r0, #0
   11da8:	movw	r2, #36124	; 0x8d1c
   11dac:	movt	r2, #1
   11db0:	bl	10e78 <error@plt>
   11db4:	mov	r0, #0
   11db8:	b	11d68 <__assert_fail@plt+0xd64>
   11dbc:	movw	r1, #35604	; 0x8b14
   11dc0:	movt	r1, #1
   11dc4:	mov	r0, r6
   11dc8:	bl	10fbc <fopen64@plt>
   11dcc:	subs	r4, r0, #0
   11dd0:	bne	11d10 <__assert_fail@plt+0xd0c>
   11dd4:	ldr	r5, [r7]
   11dd8:	mov	r2, r6
   11ddc:	mov	r1, #3
   11de0:	bl	1643c <__assert_fail@plt+0x5438>
   11de4:	mov	r3, r0
   11de8:	movw	r2, #36124	; 0x8d1c
   11dec:	movt	r2, #1
   11df0:	mov	r0, r4
   11df4:	mov	r1, r5
   11df8:	bl	10e78 <error@plt>
   11dfc:	mov	r0, r4
   11e00:	b	11d68 <__assert_fail@plt+0xd64>
   11e04:	subs	r4, r0, #0
   11e08:	str	r7, [sp, #-8]!
   11e0c:	str	lr, [sp, #4]
   11e10:	sub	sp, sp, #56	; 0x38
   11e14:	beq	11e5c <__assert_fail@plt+0xe58>
   11e18:	movw	r3, #41304	; 0xa158
   11e1c:	movt	r3, #2
   11e20:	ldr	r5, [r3]
   11e24:	mov	r2, #5
   11e28:	movw	r1, #33216	; 0x81c0
   11e2c:	movt	r1, #1
   11e30:	mov	r0, #0
   11e34:	bl	10e0c <dcgettext@plt>
   11e38:	movw	r3, #41384	; 0xa1a8
   11e3c:	movt	r3, #2
   11e40:	mov	r2, r0
   11e44:	mov	r1, #1
   11e48:	ldr	r3, [r3]
   11e4c:	mov	r0, r5
   11e50:	bl	10f38 <__fprintf_chk@plt>
   11e54:	mov	r0, r4
   11e58:	bl	10ecc <exit@plt>
   11e5c:	mov	r2, #5
   11e60:	movw	r1, #33256	; 0x81e8
   11e64:	movt	r1, #1
   11e68:	movw	r5, #41316	; 0xa164
   11e6c:	movt	r5, #2
   11e70:	bl	10e0c <dcgettext@plt>
   11e74:	movw	r3, #41384	; 0xa1a8
   11e78:	movt	r3, #2
   11e7c:	mov	r1, r0
   11e80:	mov	r0, #1
   11e84:	ldr	r2, [r3]
   11e88:	bl	10f20 <__printf_chk@plt>
   11e8c:	mov	r2, #5
   11e90:	movw	r1, #33288	; 0x8208
   11e94:	movt	r1, #1
   11e98:	mov	r0, r4
   11e9c:	bl	10e0c <dcgettext@plt>
   11ea0:	ldr	r1, [r5]
   11ea4:	bl	10d70 <fputs_unlocked@plt>
   11ea8:	mov	r2, #5
   11eac:	movw	r1, #33356	; 0x824c
   11eb0:	movt	r1, #1
   11eb4:	mov	r0, r4
   11eb8:	bl	10e0c <dcgettext@plt>
   11ebc:	ldr	r1, [r5]
   11ec0:	bl	10d70 <fputs_unlocked@plt>
   11ec4:	mov	r2, #5
   11ec8:	movw	r1, #33412	; 0x8284
   11ecc:	movt	r1, #1
   11ed0:	mov	r0, r4
   11ed4:	bl	10e0c <dcgettext@plt>
   11ed8:	ldr	r1, [r5]
   11edc:	bl	10d70 <fputs_unlocked@plt>
   11ee0:	mov	r2, #5
   11ee4:	movw	r1, #33488	; 0x82d0
   11ee8:	movt	r1, #1
   11eec:	mov	r0, r4
   11ef0:	bl	10e0c <dcgettext@plt>
   11ef4:	ldr	r1, [r5]
   11ef8:	bl	10d70 <fputs_unlocked@plt>
   11efc:	mov	r2, #5
   11f00:	movw	r1, #33668	; 0x8384
   11f04:	movt	r1, #1
   11f08:	mov	r0, r4
   11f0c:	bl	10e0c <dcgettext@plt>
   11f10:	ldr	r1, [r5]
   11f14:	bl	10d70 <fputs_unlocked@plt>
   11f18:	mov	r2, #5
   11f1c:	movw	r1, #33908	; 0x8474
   11f20:	movt	r1, #1
   11f24:	mov	r0, r4
   11f28:	bl	10e0c <dcgettext@plt>
   11f2c:	ldr	r1, [r5]
   11f30:	bl	10d70 <fputs_unlocked@plt>
   11f34:	mov	r2, #5
   11f38:	movw	r1, #34024	; 0x84e8
   11f3c:	movt	r1, #1
   11f40:	mov	r0, r4
   11f44:	bl	10e0c <dcgettext@plt>
   11f48:	ldr	r1, [r5]
   11f4c:	bl	10d70 <fputs_unlocked@plt>
   11f50:	mov	r2, #5
   11f54:	movw	r1, #34236	; 0x85bc
   11f58:	movt	r1, #1
   11f5c:	mov	r0, r4
   11f60:	bl	10e0c <dcgettext@plt>
   11f64:	ldr	r1, [r5]
   11f68:	bl	10d70 <fputs_unlocked@plt>
   11f6c:	mov	r2, #5
   11f70:	movw	r1, #34300	; 0x85fc
   11f74:	movt	r1, #1
   11f78:	mov	r0, r4
   11f7c:	bl	10e0c <dcgettext@plt>
   11f80:	ldr	r1, [r5]
   11f84:	bl	10d70 <fputs_unlocked@plt>
   11f88:	mov	r2, #5
   11f8c:	movw	r1, #34348	; 0x862c
   11f90:	movt	r1, #1
   11f94:	mov	r0, r4
   11f98:	bl	10e0c <dcgettext@plt>
   11f9c:	ldr	r1, [r5]
   11fa0:	bl	10d70 <fputs_unlocked@plt>
   11fa4:	mov	r2, #5
   11fa8:	movw	r1, #34404	; 0x8664
   11fac:	movt	r1, #1
   11fb0:	mov	r0, r4
   11fb4:	bl	10e0c <dcgettext@plt>
   11fb8:	ldr	r1, [r5]
   11fbc:	bl	10d70 <fputs_unlocked@plt>
   11fc0:	mov	r2, #5
   11fc4:	movw	r1, #34608	; 0x8730
   11fc8:	movt	r1, #1
   11fcc:	mov	r0, r4
   11fd0:	bl	10e0c <dcgettext@plt>
   11fd4:	ldr	r1, [r5]
   11fd8:	bl	10d70 <fputs_unlocked@plt>
   11fdc:	movw	r0, #32940	; 0x80ac
   11fe0:	movt	r0, #1
   11fe4:	ldr	ip, [r0, #12]
   11fe8:	ldrd	r2, [r0, #20]
   11fec:	ldr	r6, [r0, #16]
   11ff0:	subs	r1, ip, #0
   11ff4:	str	ip, [sp]
   11ff8:	ldrd	r8, [r0, #28]
   11ffc:	strd	r2, [sp, #8]
   12000:	ldrd	r2, [r0, #36]	; 0x24
   12004:	str	r6, [sp, #4]
   12008:	ldrd	r6, [r0, #44]	; 0x2c
   1200c:	strd	r8, [sp, #16]
   12010:	ldrd	r8, [r0, #52]	; 0x34
   12014:	strd	r2, [sp, #24]
   12018:	ldrd	r2, [r0, #60]	; 0x3c
   1201c:	strd	r6, [sp, #32]
   12020:	movwne	r7, #33212	; 0x81bc
   12024:	mov	r6, sp
   12028:	movtne	r7, #1
   1202c:	strd	r8, [sp, #40]	; 0x28
   12030:	strd	r2, [sp, #48]	; 0x30
   12034:	bne	1212c <__assert_fail@plt+0x1128>
   12038:	ldr	r6, [r6, #4]
   1203c:	movw	r1, #34872	; 0x8838
   12040:	movt	r1, #1
   12044:	mov	r2, #5
   12048:	cmp	r6, #0
   1204c:	beq	12140 <__assert_fail@plt+0x113c>
   12050:	mov	r0, #0
   12054:	bl	10e0c <dcgettext@plt>
   12058:	mov	r1, r0
   1205c:	movw	r3, #34896	; 0x8850
   12060:	movt	r3, #1
   12064:	movw	r2, #34936	; 0x8878
   12068:	movt	r2, #1
   1206c:	mov	r0, #1
   12070:	bl	10f20 <__printf_chk@plt>
   12074:	mov	r1, #0
   12078:	mov	r0, #5
   1207c:	bl	10f8c <setlocale@plt>
   12080:	cmp	r0, #0
   12084:	movweq	r7, #33212	; 0x81bc
   12088:	movteq	r7, #1
   1208c:	beq	120b0 <__assert_fail@plt+0x10ac>
   12090:	movw	r1, #34952	; 0x8888
   12094:	movt	r1, #1
   12098:	mov	r2, #3
   1209c:	movw	r7, #33212	; 0x81bc
   120a0:	movt	r7, #1
   120a4:	bl	10fe0 <strncmp@plt>
   120a8:	cmp	r0, #0
   120ac:	bne	121f8 <__assert_fail@plt+0x11f4>
   120b0:	mov	r2, #5
   120b4:	movw	r1, #35028	; 0x88d4
   120b8:	movt	r1, #1
   120bc:	mov	r0, #0
   120c0:	bl	10e0c <dcgettext@plt>
   120c4:	mov	r1, r0
   120c8:	movw	r3, #33212	; 0x81bc
   120cc:	movt	r3, #1
   120d0:	movw	r2, #34896	; 0x8850
   120d4:	movt	r2, #1
   120d8:	mov	r0, #1
   120dc:	bl	10f20 <__printf_chk@plt>
   120e0:	mov	r2, #5
   120e4:	movw	r1, #35056	; 0x88f0
   120e8:	movt	r1, #1
   120ec:	mov	r0, #0
   120f0:	bl	10e0c <dcgettext@plt>
   120f4:	movw	r2, #35476	; 0x8a94
   120f8:	movt	r2, #1
   120fc:	cmp	r6, r7
   12100:	movw	r3, #33664	; 0x8380
   12104:	movt	r3, #1
   12108:	mov	r1, r0
   1210c:	moveq	r3, r2
   12110:	mov	r2, r6
   12114:	mov	r0, #1
   12118:	bl	10f20 <__printf_chk@plt>
   1211c:	b	11e54 <__assert_fail@plt+0xe50>
   12120:	ldr	r1, [r6, #8]!
   12124:	cmp	r1, #0
   12128:	beq	12038 <__assert_fail@plt+0x1034>
   1212c:	mov	r0, r7
   12130:	bl	10d7c <strcmp@plt>
   12134:	cmp	r0, #0
   12138:	bne	12120 <__assert_fail@plt+0x111c>
   1213c:	b	12038 <__assert_fail@plt+0x1034>
   12140:	mov	r0, r6
   12144:	bl	10e0c <dcgettext@plt>
   12148:	mov	r1, r0
   1214c:	movw	r3, #34896	; 0x8850
   12150:	movt	r3, #1
   12154:	movw	r2, #34936	; 0x8878
   12158:	movt	r2, #1
   1215c:	mov	r0, #1
   12160:	bl	10f20 <__printf_chk@plt>
   12164:	mov	r1, r6
   12168:	mov	r0, #5
   1216c:	bl	10f8c <setlocale@plt>
   12170:	cmp	r0, #0
   12174:	beq	12190 <__assert_fail@plt+0x118c>
   12178:	movw	r1, #34952	; 0x8888
   1217c:	movt	r1, #1
   12180:	mov	r2, #3
   12184:	bl	10fe0 <strncmp@plt>
   12188:	cmp	r0, #0
   1218c:	bne	121ec <__assert_fail@plt+0x11e8>
   12190:	mov	r2, #5
   12194:	movw	r1, #35028	; 0x88d4
   12198:	movt	r1, #1
   1219c:	mov	r0, #0
   121a0:	bl	10e0c <dcgettext@plt>
   121a4:	mov	r1, r0
   121a8:	movw	r3, #33212	; 0x81bc
   121ac:	movt	r3, #1
   121b0:	movw	r2, #34896	; 0x8850
   121b4:	movt	r2, #1
   121b8:	mov	r0, #1
   121bc:	bl	10f20 <__printf_chk@plt>
   121c0:	movw	r1, #35056	; 0x88f0
   121c4:	movt	r1, #1
   121c8:	mov	r2, #5
   121cc:	mov	r0, #0
   121d0:	bl	10e0c <dcgettext@plt>
   121d4:	movw	r6, #33212	; 0x81bc
   121d8:	movt	r6, #1
   121dc:	movw	r3, #35476	; 0x8a94
   121e0:	movt	r3, #1
   121e4:	mov	r1, r0
   121e8:	b	12110 <__assert_fail@plt+0x110c>
   121ec:	movw	r7, #33212	; 0x81bc
   121f0:	movt	r7, #1
   121f4:	mov	r6, r7
   121f8:	mov	r2, #5
   121fc:	movw	r1, #34956	; 0x888c
   12200:	movt	r1, #1
   12204:	mov	r0, #0
   12208:	bl	10e0c <dcgettext@plt>
   1220c:	ldr	r1, [r5]
   12210:	bl	10d70 <fputs_unlocked@plt>
   12214:	b	120b0 <__assert_fail@plt+0x10ac>
   12218:	ldr	r2, [r0]
   1221c:	ldr	r3, [r1]
   12220:	cmp	r2, r3
   12224:	blt	12234 <__assert_fail@plt+0x1230>
   12228:	movgt	r0, #1
   1222c:	movle	r0, #0
   12230:	bx	lr
   12234:	mvn	r0, #0
   12238:	bx	lr
   1223c:	ands	r3, r1, #1
   12240:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12244:	mov	r5, r0
   12248:	strd	r6, [sp, #8]
   1224c:	strd	r8, [sp, #16]
   12250:	strd	sl, [sp, #24]
   12254:	str	lr, [sp, #32]
   12258:	sub	sp, sp, #44	; 0x2c
   1225c:	str	r3, [sp, #24]
   12260:	str	r1, [sp, #28]
   12264:	beq	12290 <__assert_fail@plt+0x128c>
   12268:	movw	r1, #35848	; 0x8c08
   1226c:	movt	r1, #1
   12270:	bl	10d7c <strcmp@plt>
   12274:	cmp	r0, #0
   12278:	bne	1277c <__assert_fail@plt+0x1778>
   1227c:	add	r5, r5, #1
   12280:	mov	r6, #1
   12284:	mov	r7, #0
   12288:	mov	r9, #1
   1228c:	b	1229c <__assert_fail@plt+0x1298>
   12290:	mov	r9, r3
   12294:	mov	r6, #0
   12298:	mov	r7, #0
   1229c:	mov	r8, #0
   122a0:	movw	fp, #41360	; 0xa190
   122a4:	movt	fp, #2
   122a8:	mov	r0, #1
   122ac:	mov	r1, #0
   122b0:	mov	r3, r8
   122b4:	mov	sl, r9
   122b8:	strd	r0, [sp]
   122bc:	mov	r1, r5
   122c0:	ldrb	r4, [r5], #1
   122c4:	cmp	r4, #45	; 0x2d
   122c8:	beq	1239c <__assert_fail@plt+0x1398>
   122cc:	cmp	r4, #44	; 0x2c
   122d0:	str	r1, [sp, #8]
   122d4:	beq	12308 <__assert_fail@plt+0x1304>
   122d8:	str	r3, [sp, #12]
   122dc:	bl	10ec0 <__ctype_b_loc@plt>
   122e0:	ldr	r0, [r0]
   122e4:	lsl	r2, r4, #1
   122e8:	cmp	r4, #0
   122ec:	ldr	r1, [sp, #8]
   122f0:	ldr	r3, [sp, #12]
   122f4:	ldrh	r2, [r0, r2]
   122f8:	moveq	r2, #1
   122fc:	andne	r2, r2, #1
   12300:	cmp	r2, #0
   12304:	beq	125a0 <__assert_fail@plt+0x159c>
   12308:	cmp	sl, #0
   1230c:	beq	123d4 <__assert_fail@plt+0x13d0>
   12310:	orr	r9, r9, r3
   12314:	tst	r9, #255	; 0xff
   12318:	bne	1254c <__assert_fail@plt+0x1548>
   1231c:	ldr	r3, [sp, #24]
   12320:	cmp	r3, #0
   12324:	beq	128d8 <__assert_fail@plt+0x18d4>
   12328:	mov	r2, #1
   1232c:	mov	r3, #0
   12330:	strd	r2, [sp]
   12334:	ldr	r3, [fp]
   12338:	ldmib	fp, {r0, r2}
   1233c:	cmp	r3, r2
   12340:	beq	12684 <__assert_fail@plt+0x1680>
   12344:	lsl	r2, r3, #4
   12348:	mvn	r6, #0
   1234c:	add	r3, r3, #1
   12350:	mvn	r7, #0
   12354:	ldrd	r8, [sp]
   12358:	add	r1, r0, r2
   1235c:	strd	r8, [r0, r2]
   12360:	str	r3, [fp]
   12364:	strd	r6, [r1, #8]
   12368:	ldrb	r7, [r5, #-1]
   1236c:	cmp	r7, #0
   12370:	beq	12410 <__assert_fail@plt+0x140c>
   12374:	mov	r1, r5
   12378:	ldrb	r4, [r5], #1
   1237c:	mov	r8, #0
   12380:	mov	r6, #0
   12384:	mov	r7, #0
   12388:	mov	sl, r8
   1238c:	mov	r3, r8
   12390:	mov	r9, r8
   12394:	cmp	r4, #45	; 0x2d
   12398:	bne	122cc <__assert_fail@plt+0x12c8>
   1239c:	cmp	sl, #0
   123a0:	bne	128e8 <__assert_fail@plt+0x18e4>
   123a4:	orrs	r2, r6, r7
   123a8:	movne	r8, #0
   123ac:	andeq	r8, r9, #1
   123b0:	cmp	r8, #0
   123b4:	bne	12870 <__assert_fail@plt+0x186c>
   123b8:	cmp	r9, #0
   123bc:	beq	12580 <__assert_fail@plt+0x157c>
   123c0:	mov	sl, r9
   123c4:	strd	r6, [sp]
   123c8:	mov	r6, #0
   123cc:	mov	r7, #0
   123d0:	b	122bc <__assert_fail@plt+0x12b8>
   123d4:	orrs	r3, r6, r7
   123d8:	beq	12870 <__assert_fail@plt+0x186c>
   123dc:	ldr	r3, [fp]
   123e0:	ldmib	fp, {r0, r2}
   123e4:	cmp	r3, r2
   123e8:	beq	12654 <__assert_fail@plt+0x1650>
   123ec:	lsl	r2, r3, #4
   123f0:	add	r3, r3, #1
   123f4:	add	r1, r0, r2
   123f8:	strd	r6, [r0, r2]
   123fc:	str	r3, [fp]
   12400:	strd	r6, [r1, #8]
   12404:	ldrb	r7, [r5, #-1]
   12408:	cmp	r7, #0
   1240c:	bne	12374 <__assert_fail@plt+0x1370>
   12410:	cmp	r3, #0
   12414:	mov	r1, r3
   12418:	beq	12a00 <__assert_fail@plt+0x19fc>
   1241c:	movw	r3, #8728	; 0x2218
   12420:	movt	r3, #1
   12424:	mov	r2, #16
   12428:	bl	10fc8 <qsort@plt>
   1242c:	ldr	sl, [fp]
   12430:	ldr	r9, [fp, #4]
   12434:	cmp	sl, #0
   12438:	beq	124ec <__assert_fail@plt+0x14e8>
   1243c:	add	r7, r7, #1
   12440:	mov	r8, #16
   12444:	cmp	r7, sl
   12448:	mov	r1, r9
   1244c:	bcs	126ac <__assert_fail@plt+0x16a8>
   12450:	sub	r6, r8, #16
   12454:	ldrd	r4, [r1, r8]
   12458:	add	r0, r1, r8
   1245c:	add	ip, r1, r6
   12460:	add	r9, r8, #16
   12464:	ldrd	r2, [ip, #8]
   12468:	cmp	r3, r5
   1246c:	cmpeq	r2, r4
   12470:	movwcs	lr, #65535	; 0xffff
   12474:	movtcs	lr, #4095	; 0xfff
   12478:	subcs	lr, lr, r7
   1247c:	strcs	lr, [sp, #8]
   12480:	bcs	124a8 <__assert_fail@plt+0x14a4>
   12484:	b	1269c <__assert_fail@plt+0x1698>
   12488:	ldr	r1, [fp, #4]
   1248c:	add	ip, r1, r6
   12490:	ldrd	r4, [r1, r8]
   12494:	add	r0, r1, r8
   12498:	ldrd	r2, [ip, #8]
   1249c:	cmp	r5, r3
   124a0:	cmpeq	r4, r2
   124a4:	bhi	1269c <__assert_fail@plt+0x1698>
   124a8:	ldrd	r4, [r0, #8]
   124ac:	add	r1, r1, r9
   124b0:	cmp	r5, r3
   124b4:	cmpeq	r4, r2
   124b8:	movcc	r5, r3
   124bc:	ldr	r3, [sp, #8]
   124c0:	movcc	r4, r2
   124c4:	strd	r4, [ip, #8]
   124c8:	add	r2, sl, r3
   124cc:	lsl	r2, r2, #4
   124d0:	bl	10da0 <memmove@plt>
   124d4:	ldr	sl, [fp]
   124d8:	sub	sl, sl, #1
   124dc:	cmp	sl, r7
   124e0:	str	sl, [fp]
   124e4:	bhi	12488 <__assert_fail@plt+0x1484>
   124e8:	ldr	r9, [fp, #4]
   124ec:	ldr	r3, [sp, #28]
   124f0:	tst	r3, #2
   124f4:	bne	126bc <__assert_fail@plt+0x16b8>
   124f8:	add	sl, sl, #1
   124fc:	mov	r0, r9
   12500:	lsl	r1, sl, #4
   12504:	mvn	r4, #0
   12508:	mvn	r5, #0
   1250c:	str	sl, [fp]
   12510:	bl	17528 <__assert_fail@plt+0x6524>
   12514:	ldr	r3, [fp]
   12518:	str	r0, [fp, #4]
   1251c:	sub	r3, r3, #-268435455	; 0xf0000001
   12520:	lsl	r3, r3, #4
   12524:	add	r2, r0, r3
   12528:	strd	r4, [r2, #8]
   1252c:	strd	r4, [r0, r3]
   12530:	add	sp, sp, #44	; 0x2c
   12534:	ldrd	r4, [sp]
   12538:	ldrd	r6, [sp, #8]
   1253c:	ldrd	r8, [sp, #16]
   12540:	ldrd	sl, [sp, #24]
   12544:	add	sp, sp, #32
   12548:	pop	{pc}		; (ldr pc, [sp], #4)
   1254c:	cmp	r3, #0
   12550:	beq	12334 <__assert_fail@plt+0x1330>
   12554:	ldrd	r2, [sp]
   12558:	cmp	r3, r7
   1255c:	cmpeq	r2, r6
   12560:	bhi	128ac <__assert_fail@plt+0x18a8>
   12564:	ldr	r3, [fp]
   12568:	ldmib	fp, {r0, r2}
   1256c:	cmp	r3, r2
   12570:	beq	1266c <__assert_fail@plt+0x1668>
   12574:	lsl	r2, r3, #4
   12578:	add	r3, r3, #1
   1257c:	b	12354 <__assert_fail@plt+0x1350>
   12580:	mov	r0, #1
   12584:	mov	r1, #0
   12588:	mov	r8, r9
   1258c:	mov	r6, #0
   12590:	mov	r7, #0
   12594:	mov	sl, #1
   12598:	strd	r0, [sp]
   1259c:	b	122bc <__assert_fail@plt+0x12b8>
   125a0:	sub	r4, r4, #48	; 0x30
   125a4:	cmp	r4, #9
   125a8:	bhi	129b4 <__assert_fail@plt+0x19b0>
   125ac:	cmp	r8, #0
   125b0:	beq	12648 <__assert_fail@plt+0x1644>
   125b4:	ldr	r8, [fp, #12]
   125b8:	cmp	r8, #0
   125bc:	beq	12648 <__assert_fail@plt+0x1644>
   125c0:	add	r1, pc, #992	; 0x3e0
   125c4:	ldrd	r0, [r1]
   125c8:	cmp	sl, #0
   125cc:	moveq	r9, #1
   125d0:	movne	r3, sl
   125d4:	cmp	r7, r1
   125d8:	cmpeq	r6, r0
   125dc:	bhi	1290c <__assert_fail@plt+0x1908>
   125e0:	lsl	r1, r7, #2
   125e4:	lsl	r2, r6, #2
   125e8:	orr	r1, r1, r6, lsr #30
   125ec:	adds	r2, r2, r6
   125f0:	adc	r1, r1, r7
   125f4:	adds	r2, r2, r2
   125f8:	str	r2, [sp, #16]
   125fc:	adc	r2, r1, r1
   12600:	str	r2, [sp, #20]
   12604:	ldrd	r0, [sp, #16]
   12608:	adds	r0, r0, r4
   1260c:	adc	r1, r1, r4, asr #31
   12610:	cmp	r1, r7
   12614:	and	r2, r0, r1
   12618:	cmpeq	r0, r6
   1261c:	movcc	ip, #1
   12620:	movcs	ip, #0
   12624:	cmn	r2, #1
   12628:	movne	r2, #0
   1262c:	moveq	r2, #1
   12630:	orrs	r2, ip, r2
   12634:	bne	1290c <__assert_fail@plt+0x1908>
   12638:	mov	r6, r0
   1263c:	mov	r7, r1
   12640:	mov	r8, #1
   12644:	b	122bc <__assert_fail@plt+0x12b8>
   12648:	mov	r8, r1
   1264c:	str	r1, [fp, #12]
   12650:	b	125c0 <__assert_fail@plt+0x15bc>
   12654:	mov	r2, #16
   12658:	ldr	r1, [pc, #848]	; 129b0 <__assert_fail@plt+0x19ac>
   1265c:	bl	17710 <__assert_fail@plt+0x670c>
   12660:	str	r0, [fp, #4]
   12664:	ldr	r3, [fp]
   12668:	b	123ec <__assert_fail@plt+0x13e8>
   1266c:	mov	r2, #16
   12670:	ldr	r1, [pc, #824]	; 129b0 <__assert_fail@plt+0x19ac>
   12674:	bl	17710 <__assert_fail@plt+0x670c>
   12678:	str	r0, [fp, #4]
   1267c:	ldr	r3, [fp]
   12680:	b	12574 <__assert_fail@plt+0x1570>
   12684:	mov	r2, #16
   12688:	ldr	r1, [pc, #800]	; 129b0 <__assert_fail@plt+0x19ac>
   1268c:	bl	17710 <__assert_fail@plt+0x670c>
   12690:	str	r0, [fp, #4]
   12694:	ldr	r3, [fp]
   12698:	b	12344 <__assert_fail@plt+0x1340>
   1269c:	add	r7, r7, #1
   126a0:	mov	r8, r9
   126a4:	cmp	r7, sl
   126a8:	bcc	12450 <__assert_fail@plt+0x144c>
   126ac:	ldr	r3, [sp, #28]
   126b0:	mov	r9, r1
   126b4:	tst	r3, #2
   126b8:	beq	124f8 <__assert_fail@plt+0x14f4>
   126bc:	ldrd	r4, [r9]
   126c0:	mov	r0, #0
   126c4:	str	r0, [fp]
   126c8:	str	r0, [fp, #4]
   126cc:	str	r0, [fp, #8]
   126d0:	cmp	r5, #0
   126d4:	cmpeq	r4, #1
   126d8:	bhi	12814 <__assert_fail@plt+0x1810>
   126dc:	cmp	sl, #1
   126e0:	bls	12794 <__assert_fail@plt+0x1790>
   126e4:	add	r5, r9, sl, lsl #4
   126e8:	ldr	r8, [pc, #704]	; 129b0 <__assert_fail@plt+0x19ac>
   126ec:	mov	r4, r9
   126f0:	str	sl, [sp]
   126f4:	sub	r5, r5, #16
   126f8:	str	r9, [sp, #8]
   126fc:	mov	sl, r5
   12700:	b	1272c <__assert_fail@plt+0x1728>
   12704:	lsl	ip, r2, #4
   12708:	add	r2, r2, #1
   1270c:	add	r1, r0, ip
   12710:	strd	r6, [r0, ip]
   12714:	str	r2, [fp]
   12718:	str	r5, [r1, #8]
   1271c:	str	r9, [r1, #12]
   12720:	add	r4, r4, #16
   12724:	cmp	sl, r4
   12728:	beq	1278c <__assert_fail@plt+0x1788>
   1272c:	ldr	r2, [r4, #8]
   12730:	ldr	ip, [r4, #12]
   12734:	ldrd	r0, [r4, #16]
   12738:	adds	r6, r2, #1
   1273c:	adc	r7, ip, #0
   12740:	cmp	r7, r1
   12744:	cmpeq	r6, r0
   12748:	beq	12720 <__assert_fail@plt+0x171c>
   1274c:	subs	r5, r0, #1
   12750:	ldr	r2, [fp]
   12754:	sbc	r9, r1, #0
   12758:	ldrd	r0, [fp, #4]
   1275c:	cmp	r2, r1
   12760:	bne	12704 <__assert_fail@plt+0x1700>
   12764:	mov	r2, #16
   12768:	mov	r1, r8
   1276c:	bl	17710 <__assert_fail@plt+0x670c>
   12770:	str	r0, [fp, #4]
   12774:	ldr	r2, [fp]
   12778:	b	12704 <__assert_fail@plt+0x1700>
   1277c:	mov	r6, #0
   12780:	mov	r7, #0
   12784:	mov	r9, #0
   12788:	b	1229c <__assert_fail@plt+0x1298>
   1278c:	ldr	sl, [sp]
   12790:	ldr	r9, [sp, #8]
   12794:	add	sl, r9, sl, lsl #4
   12798:	mvn	r1, #0
   1279c:	mvn	r0, #0
   127a0:	ldrd	r2, [sl, #-8]
   127a4:	cmp	r3, r1
   127a8:	cmpeq	r2, r0
   127ac:	bne	127c4 <__assert_fail@plt+0x17c0>
   127b0:	mov	r0, r9
   127b4:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   127b8:	ldr	sl, [fp]
   127bc:	ldr	r9, [fp, #4]
   127c0:	b	124f8 <__assert_fail@plt+0x14f4>
   127c4:	adds	r5, r2, #1
   127c8:	ldr	r1, [fp]
   127cc:	adc	r4, r3, #0
   127d0:	ldmib	fp, {r0, r3}
   127d4:	cmp	r1, r3
   127d8:	beq	12858 <__assert_fail@plt+0x1854>
   127dc:	lsl	ip, r1, #4
   127e0:	mvn	r2, #0
   127e4:	mvn	r3, #0
   127e8:	add	r1, r1, #1
   127ec:	add	lr, r0, ip
   127f0:	str	r5, [r0, ip]
   127f4:	mov	r0, r9
   127f8:	str	r4, [lr, #4]
   127fc:	strd	r2, [lr, #8]
   12800:	str	r1, [fp]
   12804:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   12808:	ldr	sl, [fp]
   1280c:	ldr	r9, [fp, #4]
   12810:	b	124f8 <__assert_fail@plt+0x14f4>
   12814:	mov	r2, #16
   12818:	ldr	r1, [pc, #400]	; 129b0 <__assert_fail@plt+0x19ac>
   1281c:	mov	r6, #1
   12820:	bl	17710 <__assert_fail@plt+0x670c>
   12824:	ldr	r3, [fp]
   12828:	subs	ip, r4, #1
   1282c:	mov	r7, #0
   12830:	sbc	lr, r5, #0
   12834:	str	r0, [fp, #4]
   12838:	lsl	r1, r3, #4
   1283c:	add	r3, r3, #1
   12840:	add	r2, r0, r1
   12844:	strd	r6, [r0, r1]
   12848:	str	r3, [fp]
   1284c:	str	ip, [r2, #8]
   12850:	str	lr, [r2, #12]
   12854:	b	126dc <__assert_fail@plt+0x16d8>
   12858:	ldr	r1, [pc, #336]	; 129b0 <__assert_fail@plt+0x19ac>
   1285c:	mov	r2, #16
   12860:	bl	17710 <__assert_fail@plt+0x670c>
   12864:	str	r0, [fp, #4]
   12868:	ldr	r1, [fp]
   1286c:	b	127dc <__assert_fail@plt+0x17d8>
   12870:	ldr	r3, [sp, #28]
   12874:	mov	r0, sl
   12878:	mov	r2, #5
   1287c:	tst	r3, #4
   12880:	movwne	r1, #35740	; 0x8b9c
   12884:	movweq	r1, #35788	; 0x8bcc
   12888:	movtne	r1, #1
   1288c:	movteq	r1, #1
   12890:	bl	10e0c <dcgettext@plt>
   12894:	mov	r1, #0
   12898:	mov	r2, r0
   1289c:	mov	r0, r1
   128a0:	bl	10e78 <error@plt>
   128a4:	mov	r0, #1
   128a8:	bl	11e04 <__assert_fail@plt+0xe00>
   128ac:	movw	r1, #35852	; 0x8c0c
   128b0:	movt	r1, #1
   128b4:	mov	r2, #5
   128b8:	mov	r0, #0
   128bc:	bl	10e0c <dcgettext@plt>
   128c0:	mov	r1, #0
   128c4:	mov	r2, r0
   128c8:	mov	r0, r1
   128cc:	bl	10e78 <error@plt>
   128d0:	mov	r0, #1
   128d4:	bl	11e04 <__assert_fail@plt+0xe00>
   128d8:	movw	r1, #35816	; 0x8be8
   128dc:	movt	r1, #1
   128e0:	mov	r2, #5
   128e4:	b	128b8 <__assert_fail@plt+0x18b4>
   128e8:	ldr	r3, [sp, #28]
   128ec:	ands	r0, r3, #4
   128f0:	beq	1297c <__assert_fail@plt+0x1978>
   128f4:	movw	r1, #35688	; 0x8b68
   128f8:	movt	r1, #1
   128fc:	mov	r2, #5
   12900:	mov	r0, #0
   12904:	bl	10e0c <dcgettext@plt>
   12908:	b	12894 <__assert_fail@plt+0x1890>
   1290c:	movw	r1, #35880	; 0x8c28
   12910:	movt	r1, #1
   12914:	mov	r0, r8
   12918:	bl	10ff8 <strspn@plt>
   1291c:	mov	r1, r0
   12920:	mov	r0, r8
   12924:	bl	179d8 <__assert_fail@plt+0x69d4>
   12928:	ldr	r3, [sp, #28]
   1292c:	mov	r4, r0
   12930:	ands	r0, r3, #4
   12934:	beq	12990 <__assert_fail@plt+0x198c>
   12938:	movw	r1, #35892	; 0x8c34
   1293c:	movt	r1, #1
   12940:	mov	r2, #5
   12944:	mov	r0, #0
   12948:	bl	10e0c <dcgettext@plt>
   1294c:	mov	r5, r0
   12950:	mov	r0, r4
   12954:	bl	16be8 <__assert_fail@plt+0x5be4>
   12958:	mov	r1, #0
   1295c:	mov	r3, r0
   12960:	mov	r2, r5
   12964:	mov	r0, r1
   12968:	bl	10e78 <error@plt>
   1296c:	mov	r0, r4
   12970:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   12974:	mov	r0, #1
   12978:	bl	11e04 <__assert_fail@plt+0xe00>
   1297c:	movw	r1, #35720	; 0x8b88
   12980:	movt	r1, #1
   12984:	mov	r2, #5
   12988:	bl	10e0c <dcgettext@plt>
   1298c:	b	12894 <__assert_fail@plt+0x1890>
   12990:	movw	r1, #35932	; 0x8c5c
   12994:	movt	r1, #1
   12998:	mov	r2, #5
   1299c:	bl	10e0c <dcgettext@plt>
   129a0:	mov	r5, r0
   129a4:	b	12950 <__assert_fail@plt+0x194c>
   129a8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   129ac:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   129b0:	muleq	r2, r8, r1
   129b4:	ldr	r3, [sp, #28]
   129b8:	mov	r5, r1
   129bc:	ands	r0, r3, #4
   129c0:	beq	12a28 <__assert_fail@plt+0x1a24>
   129c4:	mov	r0, r2
   129c8:	movw	r1, #35964	; 0x8c7c
   129cc:	movt	r1, #1
   129d0:	mov	r2, #5
   129d4:	bl	10e0c <dcgettext@plt>
   129d8:	mov	r4, r0
   129dc:	mov	r0, r5
   129e0:	bl	16be8 <__assert_fail@plt+0x5be4>
   129e4:	mov	r1, #0
   129e8:	mov	r3, r0
   129ec:	mov	r2, r4
   129f0:	mov	r0, r1
   129f4:	bl	10e78 <error@plt>
   129f8:	mov	r0, #1
   129fc:	bl	11e04 <__assert_fail@plt+0xe00>
   12a00:	mov	r0, r3
   12a04:	ldr	r3, [sp, #28]
   12a08:	mov	r2, #5
   12a0c:	tst	r3, #4
   12a10:	movwne	r1, #36024	; 0x8cb8
   12a14:	movweq	r1, #36068	; 0x8ce4
   12a18:	movtne	r1, #1
   12a1c:	movteq	r1, #1
   12a20:	bl	10e0c <dcgettext@plt>
   12a24:	b	12894 <__assert_fail@plt+0x1890>
   12a28:	movw	r1, #36000	; 0x8ca0
   12a2c:	movt	r1, #1
   12a30:	mov	r2, #5
   12a34:	bl	10e0c <dcgettext@plt>
   12a38:	mov	r4, r0
   12a3c:	b	129dc <__assert_fail@plt+0x19d8>
   12a40:	movw	r3, #41376	; 0xa1a0
   12a44:	movt	r3, #2
   12a48:	str	r0, [r3]
   12a4c:	bx	lr
   12a50:	movw	r3, #41376	; 0xa1a0
   12a54:	movt	r3, #2
   12a58:	strb	r0, [r3, #4]
   12a5c:	bx	lr
   12a60:	movw	r3, #41316	; 0xa164
   12a64:	movt	r3, #2
   12a68:	strd	r4, [sp, #-16]!
   12a6c:	ldr	r0, [r3]
   12a70:	str	r6, [sp, #8]
   12a74:	str	lr, [sp, #12]
   12a78:	sub	sp, sp, #8
   12a7c:	bl	17bc0 <__assert_fail@plt+0x6bbc>
   12a80:	cmp	r0, #0
   12a84:	beq	12ab0 <__assert_fail@plt+0x1aac>
   12a88:	movw	r4, #41376	; 0xa1a0
   12a8c:	movt	r4, #2
   12a90:	ldrb	r6, [r4, #4]
   12a94:	bl	10ef0 <__errno_location@plt>
   12a98:	mov	r5, r0
   12a9c:	cmp	r6, #0
   12aa0:	beq	12adc <__assert_fail@plt+0x1ad8>
   12aa4:	ldr	r3, [r0]
   12aa8:	cmp	r3, #32
   12aac:	bne	12adc <__assert_fail@plt+0x1ad8>
   12ab0:	movw	r3, #41304	; 0xa158
   12ab4:	movt	r3, #2
   12ab8:	ldr	r0, [r3]
   12abc:	bl	17bc0 <__assert_fail@plt+0x6bbc>
   12ac0:	cmp	r0, #0
   12ac4:	bne	12b24 <__assert_fail@plt+0x1b20>
   12ac8:	add	sp, sp, #8
   12acc:	ldrd	r4, [sp]
   12ad0:	ldr	r6, [sp, #8]
   12ad4:	add	sp, sp, #12
   12ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   12adc:	movw	r1, #36108	; 0x8d0c
   12ae0:	movt	r1, #1
   12ae4:	mov	r2, #5
   12ae8:	mov	r0, #0
   12aec:	bl	10e0c <dcgettext@plt>
   12af0:	mov	r6, r0
   12af4:	ldr	r0, [r4]
   12af8:	cmp	r0, #0
   12afc:	beq	12b34 <__assert_fail@plt+0x1b30>
   12b00:	ldr	r4, [r5]
   12b04:	bl	1606c <__assert_fail@plt+0x5068>
   12b08:	mov	r3, r0
   12b0c:	movw	r2, #36120	; 0x8d18
   12b10:	movt	r2, #1
   12b14:	mov	r0, #0
   12b18:	str	r6, [sp]
   12b1c:	mov	r1, r4
   12b20:	bl	10e78 <error@plt>
   12b24:	movw	r3, #41220	; 0xa104
   12b28:	movt	r3, #2
   12b2c:	ldr	r0, [r3]
   12b30:	bl	10dc4 <_exit@plt>
   12b34:	mov	r3, r6
   12b38:	movw	r2, #36124	; 0x8d1c
   12b3c:	movt	r2, #1
   12b40:	ldr	r1, [r5]
   12b44:	bl	10e78 <error@plt>
   12b48:	b	12b24 <__assert_fail@plt+0x1b20>
   12b4c:	b	10d88 <posix_fadvise64@plt>
   12b50:	cmp	r0, #0
   12b54:	bxeq	lr
   12b58:	str	r4, [sp, #-16]!
   12b5c:	mov	r4, r1
   12b60:	strd	r6, [sp, #4]
   12b64:	mov	r6, #0
   12b68:	mov	r7, #0
   12b6c:	str	lr, [sp, #12]
   12b70:	sub	sp, sp, #16
   12b74:	bl	10f2c <fileno@plt>
   12b78:	mov	r2, r6
   12b7c:	mov	r3, r7
   12b80:	strd	r6, [sp]
   12b84:	str	r4, [sp, #8]
   12b88:	bl	10d88 <posix_fadvise64@plt>
   12b8c:	add	sp, sp, #16
   12b90:	ldr	r4, [sp]
   12b94:	ldrd	r6, [sp, #4]
   12b98:	add	sp, sp, #12
   12b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba0:	strd	r4, [sp, #-12]!
   12ba4:	mov	r4, r0
   12ba8:	str	lr, [sp, #8]
   12bac:	sub	sp, sp, #12
   12bb0:	bl	10f2c <fileno@plt>
   12bb4:	cmp	r0, #0
   12bb8:	mov	r0, r4
   12bbc:	blt	12c40 <__assert_fail@plt+0x1c3c>
   12bc0:	bl	10e9c <__freading@plt>
   12bc4:	cmp	r0, #0
   12bc8:	bne	12c0c <__assert_fail@plt+0x1c08>
   12bcc:	mov	r0, r4
   12bd0:	bl	12c54 <__assert_fail@plt+0x1c50>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12c3c <__assert_fail@plt+0x1c38>
   12bdc:	bl	10ef0 <__errno_location@plt>
   12be0:	mov	r5, r0
   12be4:	mov	r0, r4
   12be8:	ldr	r4, [r5]
   12bec:	bl	10f50 <fclose@plt>
   12bf0:	cmp	r4, #0
   12bf4:	mvnne	r0, #0
   12bf8:	strne	r4, [r5]
   12bfc:	add	sp, sp, #12
   12c00:	ldrd	r4, [sp]
   12c04:	add	sp, sp, #8
   12c08:	pop	{pc}		; (ldr pc, [sp], #4)
   12c0c:	mov	r0, r4
   12c10:	bl	10f2c <fileno@plt>
   12c14:	mov	r1, #1
   12c18:	mov	r2, #0
   12c1c:	mov	r3, #0
   12c20:	str	r1, [sp]
   12c24:	bl	10e48 <lseek64@plt>
   12c28:	mvn	r3, #0
   12c2c:	mvn	r2, #0
   12c30:	cmp	r1, r3
   12c34:	cmpeq	r0, r2
   12c38:	bne	12bcc <__assert_fail@plt+0x1bc8>
   12c3c:	mov	r0, r4
   12c40:	add	sp, sp, #12
   12c44:	ldrd	r4, [sp]
   12c48:	ldr	lr, [sp, #8]
   12c4c:	add	sp, sp, #12
   12c50:	b	10f50 <fclose@plt>
   12c54:	str	r4, [sp, #-8]!
   12c58:	subs	r4, r0, #0
   12c5c:	str	lr, [sp, #4]
   12c60:	sub	sp, sp, #8
   12c64:	beq	12c80 <__assert_fail@plt+0x1c7c>
   12c68:	bl	10e9c <__freading@plt>
   12c6c:	cmp	r0, #0
   12c70:	beq	12c80 <__assert_fail@plt+0x1c7c>
   12c74:	ldr	r3, [r4]
   12c78:	tst	r3, #256	; 0x100
   12c7c:	bne	12c98 <__assert_fail@plt+0x1c94>
   12c80:	mov	r0, r4
   12c84:	add	sp, sp, #8
   12c88:	ldr	r4, [sp]
   12c8c:	ldr	lr, [sp, #4]
   12c90:	add	sp, sp, #8
   12c94:	b	10d94 <fflush@plt>
   12c98:	mov	r1, #1
   12c9c:	mov	r2, #0
   12ca0:	mov	r3, #0
   12ca4:	mov	r0, r4
   12ca8:	str	r1, [sp]
   12cac:	bl	12d14 <__assert_fail@plt+0x1d10>
   12cb0:	b	12c80 <__assert_fail@plt+0x1c7c>
   12cb4:	strd	r4, [sp, #-12]!
   12cb8:	mov	r5, r0
   12cbc:	str	lr, [sp, #8]
   12cc0:	sub	sp, sp, #12
   12cc4:	bl	10ef0 <__errno_location@plt>
   12cc8:	mov	r4, r0
   12ccc:	mov	r2, #0
   12cd0:	ldr	r3, [r4]
   12cd4:	mov	r0, r5
   12cd8:	str	r2, [r4]
   12cdc:	str	r3, [sp]
   12ce0:	str	r3, [sp, #4]
   12ce4:	bl	10dac <free@plt>
   12ce8:	ldr	r3, [r4]
   12cec:	add	r2, sp, #8
   12cf0:	clz	r3, r3
   12cf4:	lsr	r3, r3, #5
   12cf8:	add	r3, r2, r3, lsl #2
   12cfc:	ldr	r3, [r3, #-8]
   12d00:	str	r3, [r4]
   12d04:	add	sp, sp, #12
   12d08:	ldrd	r4, [sp]
   12d0c:	add	sp, sp, #8
   12d10:	pop	{pc}		; (ldr pc, [sp], #4)
   12d14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d18:	mov	r4, r0
   12d1c:	ldr	ip, [r0, #4]
   12d20:	strd	r6, [sp, #8]
   12d24:	str	lr, [sp, #20]
   12d28:	ldr	lr, [r0, #8]
   12d2c:	str	r8, [sp, #16]
   12d30:	sub	sp, sp, #8
   12d34:	ldr	r5, [sp, #32]
   12d38:	cmp	lr, ip
   12d3c:	beq	12d64 <__assert_fail@plt+0x1d60>
   12d40:	mov	r0, r4
   12d44:	str	r5, [sp, #32]
   12d48:	add	sp, sp, #8
   12d4c:	ldrd	r4, [sp]
   12d50:	ldrd	r6, [sp, #8]
   12d54:	ldr	r8, [sp, #16]
   12d58:	ldr	lr, [sp, #20]
   12d5c:	add	sp, sp, #24
   12d60:	b	10f5c <fseeko64@plt>
   12d64:	ldr	ip, [r0, #16]
   12d68:	ldr	lr, [r0, #20]
   12d6c:	cmp	lr, ip
   12d70:	bne	12d40 <__assert_fail@plt+0x1d3c>
   12d74:	ldr	r8, [r0, #36]	; 0x24
   12d78:	cmp	r8, #0
   12d7c:	bne	12d40 <__assert_fail@plt+0x1d3c>
   12d80:	mov	r6, r2
   12d84:	mov	r7, r3
   12d88:	bl	10f2c <fileno@plt>
   12d8c:	mov	r2, r6
   12d90:	mov	r3, r7
   12d94:	str	r5, [sp]
   12d98:	bl	10e48 <lseek64@plt>
   12d9c:	mvn	r3, #0
   12da0:	mvn	r2, #0
   12da4:	cmp	r1, r3
   12da8:	cmpeq	r0, r2
   12dac:	beq	12ddc <__assert_fail@plt+0x1dd8>
   12db0:	ldr	r3, [r4]
   12db4:	strd	r0, [r4, #80]	; 0x50
   12db8:	bic	r3, r3, #16
   12dbc:	str	r3, [r4]
   12dc0:	mov	r0, r8
   12dc4:	add	sp, sp, #8
   12dc8:	ldrd	r4, [sp]
   12dcc:	ldrd	r6, [sp, #8]
   12dd0:	ldr	r8, [sp, #16]
   12dd4:	add	sp, sp, #20
   12dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ddc:	mvn	r8, #0
   12de0:	b	12dc0 <__assert_fail@plt+0x1dbc>
   12de4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12de8:	strd	r6, [sp, #8]
   12dec:	strd	sl, [sp, #24]
   12df0:	mov	sl, r3
   12df4:	ldr	r3, [r0]
   12df8:	strd	r8, [sp, #16]
   12dfc:	str	lr, [sp, #32]
   12e00:	sub	sp, sp, #36	; 0x24
   12e04:	ldr	r8, [r1]
   12e08:	cmp	r3, #0
   12e0c:	str	r3, [sp, #4]
   12e10:	str	r2, [sp, #8]
   12e14:	strd	r0, [sp, #16]
   12e18:	ldr	r9, [sp, #80]	; 0x50
   12e1c:	beq	13098 <__assert_fail@plt+0x2094>
   12e20:	ldr	r3, [sp, #8]
   12e24:	cmp	r8, r3
   12e28:	bcc	12ff8 <__assert_fail@plt+0x1ff4>
   12e2c:	subs	r4, r8, r3
   12e30:	moveq	r3, #1
   12e34:	movne	r3, #0
   12e38:	cmp	r8, sl
   12e3c:	movcc	r3, #0
   12e40:	andcs	r3, r3, #1
   12e44:	cmp	r3, #0
   12e48:	bne	12ff8 <__assert_fail@plt+0x1ff4>
   12e4c:	ldr	r3, [sp, #72]	; 0x48
   12e50:	cmn	r3, #1
   12e54:	beq	130bc <__assert_fail@plt+0x20b8>
   12e58:	mov	r2, r3
   12e5c:	ldr	r3, [sp, #76]	; 0x4c
   12e60:	cmn	r3, #1
   12e64:	moveq	r3, r2
   12e68:	str	r3, [sp, #76]	; 0x4c
   12e6c:	ldrd	r2, [sp, #4]
   12e70:	add	r6, r3, r2
   12e74:	b	12f00 <__assert_fail@plt+0x1efc>
   12e78:	ldr	r5, [sp, #28]
   12e7c:	ldr	r3, [sp, #72]	; 0x48
   12e80:	cmn	r3, #1
   12e84:	bne	1302c <__assert_fail@plt+0x2028>
   12e88:	mov	fp, #0
   12e8c:	add	r0, r5, #1
   12e90:	mov	r2, fp
   12e94:	cmp	r4, r0
   12e98:	cmpcc	r8, sl
   12e9c:	bcc	12f60 <__assert_fail@plt+0x1f5c>
   12ea0:	cmp	r4, #1
   12ea4:	bls	12edc <__assert_fail@plt+0x1ed8>
   12ea8:	ldr	r1, [sp, #28]
   12eac:	sub	r5, r4, #1
   12eb0:	cmp	r5, r1
   12eb4:	movcs	r5, r1
   12eb8:	cmp	r7, #0
   12ebc:	strbeq	r2, [r6]
   12ec0:	beq	12ed4 <__assert_fail@plt+0x1ed0>
   12ec4:	mov	r2, r5
   12ec8:	mov	r1, r7
   12ecc:	mov	r0, r6
   12ed0:	bl	10dd0 <memcpy@plt>
   12ed4:	add	r6, r6, r5
   12ed8:	sub	r4, r4, r5
   12edc:	cmp	r7, #0
   12ee0:	beq	12ef8 <__assert_fail@plt+0x1ef4>
   12ee4:	mov	r0, r9
   12ee8:	ldr	r1, [sp, #28]
   12eec:	bl	17c78 <__assert_fail@plt+0x6c74>
   12ef0:	cmp	r0, #0
   12ef4:	bne	12ff8 <__assert_fail@plt+0x1ff4>
   12ef8:	cmp	fp, #0
   12efc:	bne	13068 <__assert_fail@plt+0x2064>
   12f00:	add	r1, sp, #28
   12f04:	mov	r0, r9
   12f08:	bl	17c48 <__assert_fail@plt+0x6c44>
   12f0c:	subs	r7, r0, #0
   12f10:	bne	12e78 <__assert_fail@plt+0x1e74>
   12f14:	ldr	r3, [r9, #4]
   12f18:	ldr	r2, [r9, #8]
   12f1c:	cmp	r3, r2
   12f20:	bcs	12fd8 <__assert_fail@plt+0x1fd4>
   12f24:	add	r2, r3, #1
   12f28:	str	r2, [r9, #4]
   12f2c:	ldrb	r2, [r3]
   12f30:	mov	r0, #2
   12f34:	ldr	r3, [sp, #72]	; 0x48
   12f38:	ldr	r1, [sp, #76]	; 0x4c
   12f3c:	cmp	r1, r2
   12f40:	cmpne	r3, r2
   12f44:	mov	r3, #1
   12f48:	moveq	fp, #1
   12f4c:	movne	fp, #0
   12f50:	cmp	r4, r0
   12f54:	cmpcc	r8, sl
   12f58:	str	r3, [sp, #28]
   12f5c:	bcs	12ea0 <__assert_fail@plt+0x1e9c>
   12f60:	ldr	r3, [sp, #4]
   12f64:	cmp	r8, #63	; 0x3f
   12f68:	lslhi	r5, r8, #1
   12f6c:	addls	r5, r8, #64	; 0x40
   12f70:	sub	r6, r6, r3
   12f74:	ldr	r3, [sp, #8]
   12f78:	sub	r1, r5, r6
   12f7c:	cmp	r1, r0
   12f80:	addcc	r5, r6, r0
   12f84:	cmp	r5, sl
   12f88:	cmpls	r8, r5
   12f8c:	movcs	r5, sl
   12f90:	sub	r1, r5, r3
   12f94:	cmp	r1, #0
   12f98:	bge	12fa8 <__assert_fail@plt+0x1fa4>
   12f9c:	add	r5, r3, #-2147483648	; 0x80000000
   12fa0:	cmp	r8, r5
   12fa4:	beq	12ff8 <__assert_fail@plt+0x1ff4>
   12fa8:	mov	r1, r5
   12fac:	ldr	r0, [sp, #4]
   12fb0:	sub	r4, r5, r6
   12fb4:	str	r2, [sp, #12]
   12fb8:	bl	17b68 <__assert_fail@plt+0x6b64>
   12fbc:	cmp	r0, #0
   12fc0:	beq	12ff8 <__assert_fail@plt+0x1ff4>
   12fc4:	add	r6, r0, r6
   12fc8:	mov	r8, r5
   12fcc:	str	r0, [sp, #4]
   12fd0:	ldr	r2, [sp, #12]
   12fd4:	b	12ea0 <__assert_fail@plt+0x1e9c>
   12fd8:	mov	r0, r9
   12fdc:	bl	10f74 <__uflow@plt>
   12fe0:	cmn	r0, #1
   12fe4:	mov	r2, r0
   12fe8:	bne	12f30 <__assert_fail@plt+0x1f2c>
   12fec:	ldr	r3, [sp, #4]
   12ff0:	cmp	r6, r3
   12ff4:	bne	13068 <__assert_fail@plt+0x2064>
   12ff8:	ldr	r2, [sp, #4]
   12ffc:	mvn	r0, #0
   13000:	ldr	r3, [sp, #16]
   13004:	str	r2, [r3]
   13008:	ldr	r3, [sp, #20]
   1300c:	str	r8, [r3]
   13010:	add	sp, sp, #36	; 0x24
   13014:	ldrd	r4, [sp]
   13018:	ldrd	r6, [sp, #8]
   1301c:	ldrd	r8, [sp, #16]
   13020:	ldrd	sl, [sp, #24]
   13024:	add	sp, sp, #32
   13028:	pop	{pc}		; (ldr pc, [sp], #4)
   1302c:	mov	r1, r3
   13030:	mov	r3, r5
   13034:	ldr	r2, [sp, #76]	; 0x4c
   13038:	bl	130c8 <__assert_fail@plt+0x20c4>
   1303c:	subs	fp, r0, #0
   13040:	addeq	r0, r5, #1
   13044:	moveq	r2, fp
   13048:	beq	12e94 <__assert_fail@plt+0x1e90>
   1304c:	sub	r0, fp, r7
   13050:	mov	r2, #0
   13054:	add	r1, r0, #1
   13058:	mov	fp, #1
   1305c:	add	r0, r0, #2
   13060:	str	r1, [sp, #28]
   13064:	b	12e94 <__assert_fail@plt+0x1e90>
   13068:	ldrd	r2, [sp, #4]
   1306c:	add	r0, r2, r3
   13070:	mov	r3, #0
   13074:	subs	r0, r6, r0
   13078:	strb	r3, [r6]
   1307c:	ldr	r3, [sp, #16]
   13080:	str	r2, [r3]
   13084:	ldr	r3, [sp, #20]
   13088:	str	r8, [r3]
   1308c:	bne	13010 <__assert_fail@plt+0x200c>
   13090:	mvn	r0, #0
   13094:	b	13010 <__assert_fail@plt+0x200c>
   13098:	cmp	sl, #64	; 0x40
   1309c:	movcc	r8, sl
   130a0:	movcs	r8, #64	; 0x40
   130a4:	mov	r0, r8
   130a8:	bl	17b2c <__assert_fail@plt+0x6b28>
   130ac:	subs	r3, r0, #0
   130b0:	str	r3, [sp, #4]
   130b4:	bne	12e20 <__assert_fail@plt+0x1e1c>
   130b8:	b	13090 <__assert_fail@plt+0x208c>
   130bc:	ldr	r3, [sp, #76]	; 0x4c
   130c0:	str	r3, [sp, #72]	; 0x48
   130c4:	b	12e6c <__assert_fail@plt+0x1e68>
   130c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   130cc:	uxtb	r4, r1
   130d0:	uxtb	r5, r2
   130d4:	cmp	r4, r5
   130d8:	strd	r6, [sp, #8]
   130dc:	strd	r8, [sp, #16]
   130e0:	str	sl, [sp, #24]
   130e4:	str	lr, [sp, #28]
   130e8:	beq	13244 <__assert_fail@plt+0x2240>
   130ec:	cmp	r3, #0
   130f0:	mov	ip, r0
   130f4:	beq	13150 <__assert_fail@plt+0x214c>
   130f8:	tst	r0, #3
   130fc:	beq	13150 <__assert_fail@plt+0x214c>
   13100:	ldrb	r0, [r0]
   13104:	cmp	r4, r0
   13108:	cmpne	r5, r0
   1310c:	beq	13270 <__assert_fail@plt+0x226c>
   13110:	add	ip, ip, #1
   13114:	subs	r3, r3, #1
   13118:	mov	r0, ip
   1311c:	beq	13154 <__assert_fail@plt+0x2150>
   13120:	tst	ip, #3
   13124:	beq	13154 <__assert_fail@plt+0x2150>
   13128:	ldrb	lr, [ip], #1
   1312c:	cmp	lr, r4
   13130:	cmpne	lr, r5
   13134:	bne	13114 <__assert_fail@plt+0x2110>
   13138:	ldrd	r4, [sp]
   1313c:	ldrd	r6, [sp, #8]
   13140:	ldrd	r8, [sp, #16]
   13144:	ldr	sl, [sp, #24]
   13148:	add	sp, sp, #28
   1314c:	pop	{pc}		; (ldr pc, [sp], #4)
   13150:	mov	r0, ip
   13154:	lsl	r1, r1, #8
   13158:	cmp	r3, #3
   1315c:	lsl	r6, r2, #8
   13160:	uxth	r1, r1
   13164:	uxth	r6, r6
   13168:	orr	lr, r1, r4
   1316c:	orr	r6, r6, r5
   13170:	orr	lr, lr, lr, lsl #16
   13174:	orr	r6, r6, r6, lsl #16
   13178:	bls	131f4 <__assert_fail@plt+0x21f0>
   1317c:	ldr	r1, [r0]
   13180:	movw	r7, #65279	; 0xfeff
   13184:	movt	r7, #65278	; 0xfefe
   13188:	movw	r8, #32896	; 0x8080
   1318c:	movt	r8, #32896	; 0x8080
   13190:	eor	r9, lr, r1
   13194:	eor	r1, r1, r6
   13198:	add	r2, r9, r7
   1319c:	add	ip, r1, r7
   131a0:	bic	r1, ip, r1
   131a4:	bic	r2, r2, r9
   131a8:	orr	r2, r2, r1
   131ac:	tst	r2, r8
   131b0:	addeq	r1, r0, #4
   131b4:	beq	131e4 <__assert_fail@plt+0x21e0>
   131b8:	b	131fc <__assert_fail@plt+0x21f8>
   131bc:	ldr	ip, [r1], #4
   131c0:	eor	sl, ip, lr
   131c4:	eor	ip, ip, r6
   131c8:	add	r2, sl, r7
   131cc:	add	r9, ip, r7
   131d0:	bic	r2, r2, sl
   131d4:	bic	ip, r9, ip
   131d8:	orr	r2, r2, ip
   131dc:	tst	r2, r8
   131e0:	bne	131fc <__assert_fail@plt+0x21f8>
   131e4:	sub	r3, r3, #4
   131e8:	mov	r0, r1
   131ec:	cmp	r3, #3
   131f0:	bhi	131bc <__assert_fail@plt+0x21b8>
   131f4:	cmp	r3, #0
   131f8:	beq	13268 <__assert_fail@plt+0x2264>
   131fc:	ldrb	r2, [r0]
   13200:	cmp	r4, r2
   13204:	cmpne	r5, r2
   13208:	beq	13138 <__assert_fail@plt+0x2134>
   1320c:	add	r3, r0, r3
   13210:	add	r2, r0, #1
   13214:	cmp	r3, r2
   13218:	mov	r0, r2
   1321c:	beq	1323c <__assert_fail@plt+0x2238>
   13220:	ldrb	r1, [r2], #1
   13224:	cmp	r1, r4
   13228:	cmpne	r1, r5
   1322c:	beq	13138 <__assert_fail@plt+0x2134>
   13230:	cmp	r3, r2
   13234:	mov	r0, r2
   13238:	bne	13220 <__assert_fail@plt+0x221c>
   1323c:	mov	r0, #0
   13240:	b	13138 <__assert_fail@plt+0x2134>
   13244:	mov	r1, r4
   13248:	mov	r2, r3
   1324c:	ldrd	r4, [sp]
   13250:	ldrd	r6, [sp, #8]
   13254:	ldrd	r8, [sp, #16]
   13258:	ldr	sl, [sp, #24]
   1325c:	ldr	lr, [sp, #28]
   13260:	add	sp, sp, #32
   13264:	b	10f44 <memchr@plt>
   13268:	mov	r0, r3
   1326c:	b	13138 <__assert_fail@plt+0x2134>
   13270:	mov	r0, ip
   13274:	b	13138 <__assert_fail@plt+0x2134>
   13278:	strd	r4, [sp, #-16]!
   1327c:	subs	r4, r0, #0
   13280:	str	r6, [sp, #8]
   13284:	str	lr, [sp, #12]
   13288:	beq	13320 <__assert_fail@plt+0x231c>
   1328c:	mov	r1, #47	; 0x2f
   13290:	bl	10f98 <strrchr@plt>
   13294:	subs	r5, r0, #0
   13298:	beq	132f8 <__assert_fail@plt+0x22f4>
   1329c:	add	r6, r5, #1
   132a0:	sub	r3, r6, r4
   132a4:	cmp	r3, #6
   132a8:	ble	132f8 <__assert_fail@plt+0x22f4>
   132ac:	movw	r1, #36184	; 0x8d58
   132b0:	movt	r1, #1
   132b4:	mov	r2, #7
   132b8:	sub	r0, r5, #6
   132bc:	bl	10fe0 <strncmp@plt>
   132c0:	cmp	r0, #0
   132c4:	bne	132f8 <__assert_fail@plt+0x22f4>
   132c8:	movw	r1, #36192	; 0x8d60
   132cc:	movt	r1, #1
   132d0:	mov	r2, #3
   132d4:	mov	r0, r6
   132d8:	bl	10fe0 <strncmp@plt>
   132dc:	cmp	r0, #0
   132e0:	movne	r4, r6
   132e4:	bne	132f8 <__assert_fail@plt+0x22f4>
   132e8:	add	r4, r5, #4
   132ec:	movw	r3, #41288	; 0xa148
   132f0:	movt	r3, #2
   132f4:	str	r4, [r3]
   132f8:	movw	r2, #41384	; 0xa1a8
   132fc:	movt	r2, #2
   13300:	ldr	r6, [sp, #8]
   13304:	movw	r3, #41292	; 0xa14c
   13308:	movt	r3, #2
   1330c:	str	r4, [r2]
   13310:	str	r4, [r3]
   13314:	ldrd	r4, [sp]
   13318:	add	sp, sp, #12
   1331c:	pop	{pc}		; (ldr pc, [sp], #4)
   13320:	movw	r3, #41304	; 0xa158
   13324:	movt	r3, #2
   13328:	movw	r0, #36128	; 0x8d20
   1332c:	movt	r0, #1
   13330:	ldr	r3, [r3]
   13334:	mov	r2, #55	; 0x37
   13338:	mov	r1, #1
   1333c:	bl	10e3c <fwrite@plt>
   13340:	bl	10fec <abort@plt>
   13344:	mov	r2, #5
   13348:	strd	r4, [sp, #-16]!
   1334c:	mov	r5, r0
   13350:	str	r6, [sp, #8]
   13354:	mov	r6, r1
   13358:	mov	r1, r0
   1335c:	mov	r0, #0
   13360:	str	lr, [sp, #12]
   13364:	bl	10e0c <dcgettext@plt>
   13368:	cmp	r5, r0
   1336c:	mov	r4, r0
   13370:	beq	13388 <__assert_fail@plt+0x2384>
   13374:	mov	r0, r4
   13378:	ldrd	r4, [sp]
   1337c:	ldr	r6, [sp, #8]
   13380:	add	sp, sp, #12
   13384:	pop	{pc}		; (ldr pc, [sp], #4)
   13388:	bl	17dd4 <__assert_fail@plt+0x6dd0>
   1338c:	ldrb	r3, [r0]
   13390:	bic	r3, r3, #32
   13394:	cmp	r3, #85	; 0x55
   13398:	bne	13400 <__assert_fail@plt+0x23fc>
   1339c:	ldrb	r3, [r0, #1]
   133a0:	bic	r3, r3, #32
   133a4:	cmp	r3, #84	; 0x54
   133a8:	bne	13480 <__assert_fail@plt+0x247c>
   133ac:	ldrb	r3, [r0, #2]
   133b0:	bic	r3, r3, #32
   133b4:	cmp	r3, #70	; 0x46
   133b8:	bne	13480 <__assert_fail@plt+0x247c>
   133bc:	ldrb	r3, [r0, #3]
   133c0:	cmp	r3, #45	; 0x2d
   133c4:	bne	13480 <__assert_fail@plt+0x247c>
   133c8:	ldrb	r3, [r0, #4]
   133cc:	cmp	r3, #56	; 0x38
   133d0:	bne	13480 <__assert_fail@plt+0x247c>
   133d4:	ldrb	r3, [r0, #5]
   133d8:	cmp	r3, #0
   133dc:	bne	13480 <__assert_fail@plt+0x247c>
   133e0:	ldrb	r2, [r4]
   133e4:	movw	r3, #36284	; 0x8dbc
   133e8:	movt	r3, #1
   133ec:	movw	r4, #36296	; 0x8dc8
   133f0:	movt	r4, #1
   133f4:	cmp	r2, #96	; 0x60
   133f8:	movne	r4, r3
   133fc:	b	13374 <__assert_fail@plt+0x2370>
   13400:	cmp	r3, #71	; 0x47
   13404:	bne	13480 <__assert_fail@plt+0x247c>
   13408:	ldrb	r3, [r0, #1]
   1340c:	bic	r3, r3, #32
   13410:	cmp	r3, #66	; 0x42
   13414:	bne	13480 <__assert_fail@plt+0x247c>
   13418:	ldrb	r3, [r0, #2]
   1341c:	cmp	r3, #49	; 0x31
   13420:	bne	13480 <__assert_fail@plt+0x247c>
   13424:	ldrb	r3, [r0, #3]
   13428:	cmp	r3, #56	; 0x38
   1342c:	bne	13480 <__assert_fail@plt+0x247c>
   13430:	ldrb	r3, [r0, #4]
   13434:	cmp	r3, #48	; 0x30
   13438:	bne	13480 <__assert_fail@plt+0x247c>
   1343c:	ldrb	r3, [r0, #5]
   13440:	cmp	r3, #51	; 0x33
   13444:	bne	13480 <__assert_fail@plt+0x247c>
   13448:	ldrb	r3, [r0, #6]
   1344c:	cmp	r3, #48	; 0x30
   13450:	bne	13480 <__assert_fail@plt+0x247c>
   13454:	ldrb	r3, [r0, #7]
   13458:	cmp	r3, #0
   1345c:	bne	13480 <__assert_fail@plt+0x247c>
   13460:	ldrb	r2, [r4]
   13464:	movw	r3, #36288	; 0x8dc0
   13468:	movt	r3, #1
   1346c:	movw	r4, #36292	; 0x8dc4
   13470:	movt	r4, #1
   13474:	cmp	r2, #96	; 0x60
   13478:	movne	r4, r3
   1347c:	b	13374 <__assert_fail@plt+0x2370>
   13480:	movw	r3, #36300	; 0x8dcc
   13484:	movt	r3, #1
   13488:	cmp	r6, #9
   1348c:	movw	r4, #36280	; 0x8db8
   13490:	movt	r4, #1
   13494:	movne	r4, r3
   13498:	b	13374 <__assert_fail@plt+0x2370>
   1349c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134a0:	strd	r6, [sp, #8]
   134a4:	strd	r8, [sp, #16]
   134a8:	mov	r8, r3
   134ac:	strd	sl, [sp, #24]
   134b0:	mov	fp, r0
   134b4:	mov	sl, r1
   134b8:	str	lr, [sp, #32]
   134bc:	sub	sp, sp, #140	; 0x8c
   134c0:	ldr	r3, [sp, #180]	; 0xb4
   134c4:	str	r2, [sp, #28]
   134c8:	and	r4, r3, #2
   134cc:	ubfx	r3, r3, #1, #1
   134d0:	str	r3, [sp, #44]	; 0x2c
   134d4:	bl	10e54 <__ctype_get_mb_cur_max@plt>
   134d8:	ldr	r3, [sp, #176]	; 0xb0
   134dc:	str	r0, [sp, #76]	; 0x4c
   134e0:	cmp	r3, #10
   134e4:	ldrls	pc, [pc, r3, lsl #2]
   134e8:	b	14e84 <__assert_fail@plt+0x3e80>
   134ec:	andeq	r3, r1, ip, ror #18
   134f0:	andeq	r3, r1, r8, lsl #21
   134f4:	andeq	r4, r1, r4
   134f8:	strdeq	r3, [r1], -r4
   134fc:	andeq	r3, r1, r4, ror r8
   13500:	strdeq	r3, [r1], -r0
   13504:	andeq	r3, r1, r8, asr #19
   13508:	andeq	r3, r1, r0, lsr sl
   1350c:	andeq	r3, r1, r8, lsl r5
   13510:	andeq	r3, r1, r8, lsl r5
   13514:	andeq	r3, r1, r8, lsl r5
   13518:	ldr	r3, [sp, #176]	; 0xb0
   1351c:	cmp	r3, #10
   13520:	beq	1354c <__assert_fail@plt+0x2548>
   13524:	mov	r1, r3
   13528:	movw	r0, #36304	; 0x8dd0
   1352c:	movt	r0, #1
   13530:	bl	13344 <__assert_fail@plt+0x2340>
   13534:	str	r0, [sp, #188]	; 0xbc
   13538:	movw	r0, #36300	; 0x8dcc
   1353c:	movt	r0, #1
   13540:	ldr	r1, [sp, #176]	; 0xb0
   13544:	bl	13344 <__assert_fail@plt+0x2340>
   13548:	str	r0, [sp, #192]	; 0xc0
   1354c:	cmp	r4, #0
   13550:	movne	r4, #0
   13554:	beq	14c10 <__assert_fail@plt+0x3c0c>
   13558:	mov	r5, #0
   1355c:	ldr	r0, [sp, #192]	; 0xc0
   13560:	mov	r9, r5
   13564:	str	r5, [sp, #64]	; 0x40
   13568:	bl	10ed8 <strlen@plt>
   1356c:	mov	r3, #1
   13570:	ldr	r2, [sp, #44]	; 0x2c
   13574:	cmp	r0, r5
   13578:	moveq	r2, r5
   1357c:	str	r3, [sp, #32]
   13580:	str	r3, [sp, #48]	; 0x30
   13584:	str	r5, [sp, #52]	; 0x34
   13588:	str	r3, [sp, #60]	; 0x3c
   1358c:	ldr	r3, [sp, #180]	; 0xb4
   13590:	str	r0, [sp, #56]	; 0x38
   13594:	str	r5, [sp, #68]	; 0x44
   13598:	str	r5, [sp, #80]	; 0x50
   1359c:	str	r5, [sp, #84]	; 0x54
   135a0:	and	r3, r3, #1
   135a4:	str	r2, [sp, #88]	; 0x58
   135a8:	str	r3, [sp, #92]	; 0x5c
   135ac:	ldr	r3, [sp, #180]	; 0xb4
   135b0:	and	r3, r3, #4
   135b4:	str	r3, [sp, #96]	; 0x60
   135b8:	ldr	r3, [sp, #192]	; 0xc0
   135bc:	str	r3, [sp, #72]	; 0x48
   135c0:	mov	r3, fp
   135c4:	mov	r7, #0
   135c8:	mov	fp, r9
   135cc:	mov	r9, r3
   135d0:	cmn	r8, #1
   135d4:	beq	13bd8 <__assert_fail@plt+0x2bd4>
   135d8:	subs	r6, r8, r7
   135dc:	movne	r6, #1
   135e0:	cmp	r6, #0
   135e4:	beq	13bf0 <__assert_fail@plt+0x2bec>
   135e8:	ldr	r0, [sp, #28]
   135ec:	ldr	r3, [sp, #48]	; 0x30
   135f0:	cmp	r3, #0
   135f4:	add	r3, r0, r7
   135f8:	str	r3, [sp, #36]	; 0x24
   135fc:	beq	1407c <__assert_fail@plt+0x3078>
   13600:	ldr	r2, [sp, #56]	; 0x38
   13604:	cmp	r2, #0
   13608:	beq	1457c <__assert_fail@plt+0x3578>
   1360c:	cmp	r2, #1
   13610:	mov	r3, r2
   13614:	movls	r3, #0
   13618:	movhi	r3, #1
   1361c:	cmn	r8, #1
   13620:	add	r5, r7, r2
   13624:	movne	r3, #0
   13628:	cmp	r3, #0
   1362c:	beq	13638 <__assert_fail@plt+0x2634>
   13630:	bl	10ed8 <strlen@plt>
   13634:	mov	r8, r0
   13638:	cmp	r5, r8
   1363c:	bhi	1457c <__assert_fail@plt+0x3578>
   13640:	ldr	r0, [sp, #36]	; 0x24
   13644:	ldr	r2, [sp, #56]	; 0x38
   13648:	ldr	r1, [sp, #72]	; 0x48
   1364c:	bl	10df4 <memcmp@plt>
   13650:	cmp	r0, #0
   13654:	bne	1457c <__assert_fail@plt+0x3578>
   13658:	ldr	r3, [sp, #44]	; 0x2c
   1365c:	cmp	r3, #0
   13660:	bne	14d28 <__assert_fail@plt+0x3d24>
   13664:	ldr	r3, [sp, #36]	; 0x24
   13668:	ldrb	r5, [r3]
   1366c:	cmp	r5, #126	; 0x7e
   13670:	ldrls	pc, [pc, r5, lsl #2]
   13674:	b	14b10 <__assert_fail@plt+0x3b0c>
   13678:	andeq	r3, r1, ip, asr #26
   1367c:	andeq	r4, r1, r0, lsl fp
   13680:	andeq	r4, r1, r0, lsl fp
   13684:	andeq	r4, r1, r0, lsl fp
   13688:	andeq	r4, r1, r0, lsl fp
   1368c:	andeq	r4, r1, r0, lsl fp
   13690:	andeq	r4, r1, r0, lsl fp
   13694:	andeq	r3, r1, r4, lsr #25
   13698:	muleq	r1, ip, ip
   1369c:	andeq	r3, r1, ip, lsr #25
   136a0:	andeq	r3, r1, r0, lsr lr
   136a4:	andeq	r3, r1, r0, lsr #28
   136a8:	andeq	r3, r1, r8, asr #22
   136ac:	strdeq	r3, [r1], -ip
   136b0:	andeq	r4, r1, r0, lsl fp
   136b4:	andeq	r4, r1, r0, lsl fp
   136b8:	andeq	r4, r1, r0, lsl fp
   136bc:	andeq	r4, r1, r0, lsl fp
   136c0:	andeq	r4, r1, r0, lsl fp
   136c4:	andeq	r4, r1, r0, lsl fp
   136c8:	andeq	r4, r1, r0, lsl fp
   136cc:	andeq	r4, r1, r0, lsl fp
   136d0:	andeq	r4, r1, r0, lsl fp
   136d4:	andeq	r4, r1, r0, lsl fp
   136d8:	andeq	r4, r1, r0, lsl fp
   136dc:	andeq	r4, r1, r0, lsl fp
   136e0:	andeq	r4, r1, r0, lsl fp
   136e4:	andeq	r4, r1, r0, lsl fp
   136e8:	andeq	r4, r1, r0, lsl fp
   136ec:	andeq	r4, r1, r0, lsl fp
   136f0:	andeq	r4, r1, r0, lsl fp
   136f4:	andeq	r4, r1, r0, lsl fp
   136f8:	andeq	r3, r1, r8, lsr #29
   136fc:	muleq	r1, ip, lr
   13700:	muleq	r1, ip, lr
   13704:	muleq	r1, r0, lr
   13708:	muleq	r1, ip, lr
   1370c:	andeq	r3, r1, r4, ror pc
   13710:	muleq	r1, ip, lr
   13714:	andeq	r3, r1, r4, ror #31
   13718:	muleq	r1, ip, lr
   1371c:	muleq	r1, ip, lr
   13720:	muleq	r1, ip, lr
   13724:	andeq	r3, r1, r4, ror pc
   13728:	andeq	r3, r1, r4, ror pc
   1372c:	andeq	r3, r1, r4, ror pc
   13730:	andeq	r3, r1, r4, ror pc
   13734:	andeq	r3, r1, r4, ror pc
   13738:	andeq	r3, r1, r4, ror pc
   1373c:	andeq	r3, r1, r4, ror pc
   13740:	andeq	r3, r1, r4, ror pc
   13744:	andeq	r3, r1, r4, ror pc
   13748:	andeq	r3, r1, r4, ror pc
   1374c:	andeq	r3, r1, r4, ror pc
   13750:	andeq	r3, r1, r4, ror pc
   13754:	andeq	r3, r1, r4, ror pc
   13758:	andeq	r3, r1, r4, ror pc
   1375c:	andeq	r3, r1, r4, ror pc
   13760:	andeq	r3, r1, r4, ror pc
   13764:	muleq	r1, ip, lr
   13768:	muleq	r1, ip, lr
   1376c:	muleq	r1, ip, lr
   13770:	muleq	r1, ip, lr
   13774:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13778:	andeq	r4, r1, r0, lsl fp
   1377c:	andeq	r3, r1, r4, ror pc
   13780:	andeq	r3, r1, r4, ror pc
   13784:	andeq	r3, r1, r4, ror pc
   13788:	andeq	r3, r1, r4, ror pc
   1378c:	andeq	r3, r1, r4, ror pc
   13790:	andeq	r3, r1, r4, ror pc
   13794:	andeq	r3, r1, r4, ror pc
   13798:	andeq	r3, r1, r4, ror pc
   1379c:	andeq	r3, r1, r4, ror pc
   137a0:	andeq	r3, r1, r4, ror pc
   137a4:	andeq	r3, r1, r4, ror pc
   137a8:	andeq	r3, r1, r4, ror pc
   137ac:	andeq	r3, r1, r4, ror pc
   137b0:	andeq	r3, r1, r4, ror pc
   137b4:	andeq	r3, r1, r4, ror pc
   137b8:	andeq	r3, r1, r4, ror pc
   137bc:	andeq	r3, r1, r4, ror pc
   137c0:	andeq	r3, r1, r4, ror pc
   137c4:	andeq	r3, r1, r4, ror pc
   137c8:	andeq	r3, r1, r4, ror pc
   137cc:	andeq	r3, r1, r4, ror pc
   137d0:	andeq	r3, r1, r4, ror pc
   137d4:	andeq	r3, r1, r4, ror pc
   137d8:	andeq	r3, r1, r4, ror pc
   137dc:	andeq	r3, r1, r4, ror pc
   137e0:	andeq	r3, r1, r4, ror pc
   137e4:	muleq	r1, ip, lr
   137e8:	andeq	r3, r1, r8, lsr pc
   137ec:	andeq	r3, r1, r4, ror pc
   137f0:	muleq	r1, ip, lr
   137f4:	andeq	r3, r1, r4, ror pc
   137f8:	muleq	r1, ip, lr
   137fc:	andeq	r3, r1, r4, ror pc
   13800:	andeq	r3, r1, r4, ror pc
   13804:	andeq	r3, r1, r4, ror pc
   13808:	andeq	r3, r1, r4, ror pc
   1380c:	andeq	r3, r1, r4, ror pc
   13810:	andeq	r3, r1, r4, ror pc
   13814:	andeq	r3, r1, r4, ror pc
   13818:	andeq	r3, r1, r4, ror pc
   1381c:	andeq	r3, r1, r4, ror pc
   13820:	andeq	r3, r1, r4, ror pc
   13824:	andeq	r3, r1, r4, ror pc
   13828:	andeq	r3, r1, r4, ror pc
   1382c:	andeq	r3, r1, r4, ror pc
   13830:	andeq	r3, r1, r4, ror pc
   13834:	andeq	r3, r1, r4, ror pc
   13838:	andeq	r3, r1, r4, ror pc
   1383c:	andeq	r3, r1, r4, ror pc
   13840:	andeq	r3, r1, r4, ror pc
   13844:	andeq	r3, r1, r4, ror pc
   13848:	andeq	r3, r1, r4, ror pc
   1384c:	andeq	r3, r1, r4, ror pc
   13850:	andeq	r3, r1, r4, ror pc
   13854:	andeq	r3, r1, r4, ror pc
   13858:	andeq	r3, r1, r4, ror pc
   1385c:	andeq	r3, r1, r4, ror pc
   13860:	andeq	r3, r1, r4, ror pc
   13864:	andeq	r3, r1, r4, asr #28
   13868:	muleq	r1, ip, lr
   1386c:	andeq	r3, r1, r4, asr #28
   13870:	muleq	r1, r0, lr
   13874:	ldr	r3, [sp, #180]	; 0xb4
   13878:	cmp	r4, #0
   1387c:	and	r3, r3, #1
   13880:	str	r3, [sp, #92]	; 0x5c
   13884:	ldr	r3, [sp, #180]	; 0xb4
   13888:	and	r3, r3, #4
   1388c:	str	r3, [sp, #96]	; 0x60
   13890:	moveq	r3, #1
   13894:	streq	r3, [sp, #60]	; 0x3c
   13898:	beq	14028 <__assert_fail@plt+0x3024>
   1389c:	mov	r3, #0
   138a0:	mov	r2, #1
   138a4:	mov	r4, r3
   138a8:	mov	r9, r3
   138ac:	str	r2, [sp, #32]
   138b0:	str	r2, [sp, #44]	; 0x2c
   138b4:	str	r3, [sp, #48]	; 0x30
   138b8:	str	r2, [sp, #52]	; 0x34
   138bc:	str	r2, [sp, #56]	; 0x38
   138c0:	str	r3, [sp, #60]	; 0x3c
   138c4:	str	r2, [sp, #64]	; 0x40
   138c8:	str	r2, [sp, #68]	; 0x44
   138cc:	str	r3, [sp, #80]	; 0x50
   138d0:	str	r3, [sp, #84]	; 0x54
   138d4:	str	r3, [sp, #88]	; 0x58
   138d8:	movw	r3, #36300	; 0x8dcc
   138dc:	movt	r3, #1
   138e0:	str	r3, [sp, #72]	; 0x48
   138e4:	mov	r3, #2
   138e8:	str	r3, [sp, #176]	; 0xb0
   138ec:	b	135c0 <__assert_fail@plt+0x25bc>
   138f0:	ldr	r3, [sp, #180]	; 0xb4
   138f4:	cmp	r4, #0
   138f8:	and	r3, r3, #1
   138fc:	str	r3, [sp, #92]	; 0x5c
   13900:	ldr	r3, [sp, #180]	; 0xb4
   13904:	and	r3, r3, #4
   13908:	str	r3, [sp, #96]	; 0x60
   1390c:	bne	14ce0 <__assert_fail@plt+0x3cdc>
   13910:	cmp	sl, #0
   13914:	beq	14a8c <__assert_fail@plt+0x3a88>
   13918:	mov	r3, #34	; 0x22
   1391c:	mov	r2, r4
   13920:	mov	r1, #1
   13924:	mov	r9, r2
   13928:	strb	r3, [fp]
   1392c:	movw	r3, #36280	; 0x8db8
   13930:	movt	r3, #1
   13934:	mov	r4, r1
   13938:	str	r1, [sp, #32]
   1393c:	str	r2, [sp, #44]	; 0x2c
   13940:	str	r1, [sp, #48]	; 0x30
   13944:	str	r2, [sp, #52]	; 0x34
   13948:	str	r1, [sp, #56]	; 0x38
   1394c:	str	r1, [sp, #60]	; 0x3c
   13950:	str	r2, [sp, #64]	; 0x40
   13954:	str	r2, [sp, #68]	; 0x44
   13958:	str	r3, [sp, #72]	; 0x48
   1395c:	str	r2, [sp, #80]	; 0x50
   13960:	str	r2, [sp, #84]	; 0x54
   13964:	str	r2, [sp, #88]	; 0x58
   13968:	b	135c0 <__assert_fail@plt+0x25bc>
   1396c:	mov	r3, #0
   13970:	mov	r2, #1
   13974:	mov	r9, r3
   13978:	str	r2, [sp, #32]
   1397c:	str	r3, [sp, #44]	; 0x2c
   13980:	str	r3, [sp, #48]	; 0x30
   13984:	str	r3, [sp, #52]	; 0x34
   13988:	str	r3, [sp, #60]	; 0x3c
   1398c:	strd	r2, [sp, #64]	; 0x40
   13990:	str	r3, [sp, #72]	; 0x48
   13994:	str	r3, [sp, #80]	; 0x50
   13998:	str	r3, [sp, #88]	; 0x58
   1399c:	ldr	r3, [sp, #180]	; 0xb4
   139a0:	and	r3, r3, r2
   139a4:	str	r3, [sp, #92]	; 0x5c
   139a8:	ldr	r3, [sp, #180]	; 0xb4
   139ac:	and	r3, r3, #4
   139b0:	str	r3, [sp, #96]	; 0x60
   139b4:	ldr	r3, [sp, #176]	; 0xb0
   139b8:	mov	r4, r3
   139bc:	str	r3, [sp, #56]	; 0x38
   139c0:	str	r3, [sp, #84]	; 0x54
   139c4:	b	135c0 <__assert_fail@plt+0x25bc>
   139c8:	mov	r3, #1
   139cc:	mov	r4, #0
   139d0:	mov	r9, r4
   139d4:	str	r3, [sp, #32]
   139d8:	str	r3, [sp, #44]	; 0x2c
   139dc:	str	r3, [sp, #48]	; 0x30
   139e0:	str	r4, [sp, #52]	; 0x34
   139e4:	str	r3, [sp, #56]	; 0x38
   139e8:	str	r3, [sp, #60]	; 0x3c
   139ec:	str	r3, [sp, #88]	; 0x58
   139f0:	movw	r3, #36280	; 0x8db8
   139f4:	movt	r3, #1
   139f8:	str	r4, [sp, #64]	; 0x40
   139fc:	str	r4, [sp, #68]	; 0x44
   13a00:	str	r3, [sp, #72]	; 0x48
   13a04:	ldr	r3, [sp, #180]	; 0xb4
   13a08:	str	r4, [sp, #80]	; 0x50
   13a0c:	str	r4, [sp, #84]	; 0x54
   13a10:	and	r3, r3, #1
   13a14:	str	r3, [sp, #92]	; 0x5c
   13a18:	ldr	r3, [sp, #180]	; 0xb4
   13a1c:	and	r3, r3, #4
   13a20:	str	r3, [sp, #96]	; 0x60
   13a24:	mov	r3, #5
   13a28:	str	r3, [sp, #176]	; 0xb0
   13a2c:	b	135c0 <__assert_fail@plt+0x25bc>
   13a30:	mov	r3, #1
   13a34:	mov	r4, #0
   13a38:	mov	r9, r4
   13a3c:	str	r3, [sp, #32]
   13a40:	str	r4, [sp, #44]	; 0x2c
   13a44:	str	r3, [sp, #48]	; 0x30
   13a48:	str	r3, [sp, #60]	; 0x3c
   13a4c:	ldr	r3, [sp, #180]	; 0xb4
   13a50:	str	r4, [sp, #52]	; 0x34
   13a54:	str	r4, [sp, #56]	; 0x38
   13a58:	str	r4, [sp, #64]	; 0x40
   13a5c:	str	r4, [sp, #68]	; 0x44
   13a60:	and	r3, r3, #1
   13a64:	str	r4, [sp, #72]	; 0x48
   13a68:	str	r4, [sp, #80]	; 0x50
   13a6c:	str	r4, [sp, #84]	; 0x54
   13a70:	str	r3, [sp, #92]	; 0x5c
   13a74:	ldr	r3, [sp, #180]	; 0xb4
   13a78:	str	r4, [sp, #88]	; 0x58
   13a7c:	and	r3, r3, #4
   13a80:	str	r3, [sp, #96]	; 0x60
   13a84:	b	135c0 <__assert_fail@plt+0x25bc>
   13a88:	mov	r3, #0
   13a8c:	mov	r2, #1
   13a90:	ldr	r1, [sp, #176]	; 0xb0
   13a94:	mov	r4, r3
   13a98:	mov	r9, r3
   13a9c:	movw	r3, #36300	; 0x8dcc
   13aa0:	movt	r3, #1
   13aa4:	str	r2, [sp, #32]
   13aa8:	str	r2, [sp, #44]	; 0x2c
   13aac:	str	r4, [sp, #48]	; 0x30
   13ab0:	strd	r2, [sp, #68]	; 0x44
   13ab4:	ldr	r3, [sp, #180]	; 0xb4
   13ab8:	str	r2, [sp, #52]	; 0x34
   13abc:	str	r1, [sp, #56]	; 0x38
   13ac0:	str	r4, [sp, #60]	; 0x3c
   13ac4:	str	r2, [sp, #64]	; 0x40
   13ac8:	and	r3, r3, r2
   13acc:	str	r4, [sp, #80]	; 0x50
   13ad0:	str	r4, [sp, #84]	; 0x54
   13ad4:	str	r4, [sp, #88]	; 0x58
   13ad8:	str	r3, [sp, #92]	; 0x5c
   13adc:	ldr	r3, [sp, #180]	; 0xb4
   13ae0:	and	r3, r3, #4
   13ae4:	str	r3, [sp, #96]	; 0x60
   13ae8:	mov	r3, #2
   13aec:	str	r3, [sp, #176]	; 0xb0
   13af0:	b	135c0 <__assert_fail@plt+0x25bc>
   13af4:	mov	r3, #1
   13af8:	mov	r2, #0
   13afc:	mov	r4, r2
   13b00:	mov	r9, r2
   13b04:	str	r3, [sp, #32]
   13b08:	str	r3, [sp, #44]	; 0x2c
   13b0c:	str	r2, [sp, #48]	; 0x30
   13b10:	str	r3, [sp, #52]	; 0x34
   13b14:	str	r3, [sp, #56]	; 0x38
   13b18:	str	r3, [sp, #60]	; 0x3c
   13b1c:	str	r3, [sp, #64]	; 0x40
   13b20:	str	r3, [sp, #68]	; 0x44
   13b24:	str	r3, [sp, #88]	; 0x58
   13b28:	movw	r3, #36300	; 0x8dcc
   13b2c:	movt	r3, #1
   13b30:	str	r3, [sp, #72]	; 0x48
   13b34:	ldr	r3, [sp, #180]	; 0xb4
   13b38:	str	r2, [sp, #80]	; 0x50
   13b3c:	str	r2, [sp, #84]	; 0x54
   13b40:	and	r3, r3, #1
   13b44:	b	13ad8 <__assert_fail@plt+0x2ad4>
   13b48:	mov	r5, #102	; 0x66
   13b4c:	mov	r6, #0
   13b50:	ldr	r3, [sp, #44]	; 0x2c
   13b54:	cmp	r3, #0
   13b58:	bne	14a08 <__assert_fail@plt+0x3a04>
   13b5c:	ldr	r2, [sp, #52]	; 0x34
   13b60:	eor	r3, fp, #1
   13b64:	ands	r3, r2, r3
   13b68:	beq	13ba0 <__assert_fail@plt+0x2b9c>
   13b6c:	cmp	sl, r4
   13b70:	mov	fp, r3
   13b74:	movhi	r2, #39	; 0x27
   13b78:	strbhi	r2, [r9, r4]
   13b7c:	add	r2, r4, #1
   13b80:	cmp	sl, r2
   13b84:	movhi	r1, #36	; 0x24
   13b88:	strbhi	r1, [r9, r2]
   13b8c:	add	r2, r4, #2
   13b90:	add	r4, r4, #3
   13b94:	cmp	sl, r2
   13b98:	movhi	r1, #39	; 0x27
   13b9c:	strbhi	r1, [r9, r2]
   13ba0:	cmp	sl, r4
   13ba4:	add	r7, r7, #1
   13ba8:	movhi	r3, #92	; 0x5c
   13bac:	strbhi	r3, [r9, r4]
   13bb0:	add	r4, r4, #1
   13bb4:	cmp	r4, sl
   13bb8:	ldr	r3, [sp, #32]
   13bbc:	strbcc	r5, [r9, r4]
   13bc0:	cmp	r6, #0
   13bc4:	add	r4, r4, #1
   13bc8:	moveq	r3, #0
   13bcc:	cmn	r8, #1
   13bd0:	str	r3, [sp, #32]
   13bd4:	bne	135d8 <__assert_fail@plt+0x25d4>
   13bd8:	ldr	r3, [sp, #28]
   13bdc:	ldrb	r6, [r3, r7]
   13be0:	adds	r6, r6, #0
   13be4:	movne	r6, #1
   13be8:	cmp	r6, #0
   13bec:	bne	135e8 <__assert_fail@plt+0x25e4>
   13bf0:	mov	r3, r9
   13bf4:	mov	r9, fp
   13bf8:	mov	fp, r3
   13bfc:	ldr	r3, [sp, #68]	; 0x44
   13c00:	cmp	r4, #0
   13c04:	movne	r3, #0
   13c08:	cmp	r3, #0
   13c0c:	bne	14e00 <__assert_fail@plt+0x3dfc>
   13c10:	ldr	r3, [sp, #44]	; 0x2c
   13c14:	ldr	r2, [sp, #52]	; 0x34
   13c18:	eor	r3, r3, #1
   13c1c:	ands	r2, r3, r2
   13c20:	beq	14d38 <__assert_fail@plt+0x3d34>
   13c24:	ldr	r3, [sp, #80]	; 0x50
   13c28:	cmp	r3, #0
   13c2c:	beq	14d3c <__assert_fail@plt+0x3d38>
   13c30:	ldr	r3, [sp, #32]
   13c34:	cmp	r3, #0
   13c38:	bne	14db0 <__assert_fail@plt+0x3dac>
   13c3c:	ldr	r3, [sp, #84]	; 0x54
   13c40:	adds	r3, r3, #0
   13c44:	movne	r3, #1
   13c48:	cmp	sl, #0
   13c4c:	movne	r3, #0
   13c50:	cmp	r3, #0
   13c54:	ldreq	r2, [sp, #80]	; 0x50
   13c58:	beq	14d3c <__assert_fail@plt+0x3d38>
   13c5c:	ldr	r2, [sp, #84]	; 0x54
   13c60:	mov	sl, r2
   13c64:	mov	r0, #0
   13c68:	mov	r4, #1
   13c6c:	mov	r1, #39	; 0x27
   13c70:	str	r0, [sp, #44]	; 0x2c
   13c74:	strb	r1, [fp]
   13c78:	str	r0, [sp, #48]	; 0x30
   13c7c:	str	r4, [sp, #52]	; 0x34
   13c80:	str	r4, [sp, #56]	; 0x38
   13c84:	str	r4, [sp, #64]	; 0x40
   13c88:	str	r0, [sp, #68]	; 0x44
   13c8c:	str	r3, [sp, #80]	; 0x50
   13c90:	str	r2, [sp, #84]	; 0x54
   13c94:	str	r0, [sp, #88]	; 0x58
   13c98:	b	138d8 <__assert_fail@plt+0x28d4>
   13c9c:	mov	r5, #98	; 0x62
   13ca0:	b	13b4c <__assert_fail@plt+0x2b48>
   13ca4:	mov	r5, #97	; 0x61
   13ca8:	b	13b4c <__assert_fail@plt+0x2b48>
   13cac:	ldr	r3, [sp, #48]	; 0x30
   13cb0:	str	r3, [sp, #40]	; 0x28
   13cb4:	mov	r3, #116	; 0x74
   13cb8:	ldr	r2, [sp, #68]	; 0x44
   13cbc:	cmp	r2, #0
   13cc0:	bne	13ebc <__assert_fail@plt+0x2eb8>
   13cc4:	ldr	r2, [sp, #60]	; 0x3c
   13cc8:	cmp	r2, #0
   13ccc:	bne	13e18 <__assert_fail@plt+0x2e14>
   13cd0:	ldr	r3, [sp, #44]	; 0x2c
   13cd4:	mov	r6, #0
   13cd8:	cmp	r3, #0
   13cdc:	beq	13e88 <__assert_fail@plt+0x2e84>
   13ce0:	mov	r3, fp
   13ce4:	ldr	r2, [sp, #184]	; 0xb8
   13ce8:	cmp	r2, #0
   13cec:	beq	13d0c <__assert_fail@plt+0x2d08>
   13cf0:	ubfx	r1, r5, #5, #8
   13cf4:	mov	r0, r2
   13cf8:	and	r2, r5, #31
   13cfc:	ldr	r1, [r0, r1, lsl #2]
   13d00:	lsr	r2, r1, r2
   13d04:	tst	r2, #1
   13d08:	bne	13b50 <__assert_fail@plt+0x2b4c>
   13d0c:	ldr	r2, [sp, #40]	; 0x28
   13d10:	cmp	r2, #0
   13d14:	addeq	r7, r7, #1
   13d18:	bne	13b50 <__assert_fail@plt+0x2b4c>
   13d1c:	cmp	r3, #0
   13d20:	beq	13bb4 <__assert_fail@plt+0x2bb0>
   13d24:	cmp	sl, r4
   13d28:	mov	fp, #0
   13d2c:	movhi	r3, #39	; 0x27
   13d30:	strbhi	r3, [r9, r4]
   13d34:	add	r3, r4, #1
   13d38:	add	r4, r4, #2
   13d3c:	cmp	sl, r3
   13d40:	movhi	r2, #39	; 0x27
   13d44:	strbhi	r2, [r9, r3]
   13d48:	b	13bb4 <__assert_fail@plt+0x2bb0>
   13d4c:	ldr	r3, [sp, #48]	; 0x30
   13d50:	str	r3, [sp, #40]	; 0x28
   13d54:	eor	r3, fp, #1
   13d58:	ldr	r2, [sp, #52]	; 0x34
   13d5c:	ands	r2, r2, r3
   13d60:	beq	14a20 <__assert_fail@plt+0x3a1c>
   13d64:	cmp	sl, r4
   13d68:	movhi	r3, #39	; 0x27
   13d6c:	strbhi	r3, [r9, r4]
   13d70:	add	r3, r4, #1
   13d74:	cmp	sl, r3
   13d78:	movhi	r1, #36	; 0x24
   13d7c:	strbhi	r1, [r9, r3]
   13d80:	add	r3, r4, #2
   13d84:	cmp	sl, r3
   13d88:	movhi	r1, #39	; 0x27
   13d8c:	strbhi	r1, [r9, r3]
   13d90:	add	r3, r4, #3
   13d94:	cmp	sl, r3
   13d98:	bls	14a6c <__assert_fail@plt+0x3a68>
   13d9c:	mov	r4, r3
   13da0:	mov	r3, #92	; 0x5c
   13da4:	mov	fp, r2
   13da8:	mov	r2, r4
   13dac:	strb	r3, [r9, r4]
   13db0:	ldr	r3, [sp, #176]	; 0xb0
   13db4:	add	r4, r4, #1
   13db8:	cmp	r3, #2
   13dbc:	beq	14ad4 <__assert_fail@plt+0x3ad0>
   13dc0:	add	r3, r7, #1
   13dc4:	cmp	r3, r8
   13dc8:	bcs	13de0 <__assert_fail@plt+0x2ddc>
   13dcc:	ldr	r1, [sp, #28]
   13dd0:	ldrb	r3, [r1, r3]
   13dd4:	sub	r3, r3, #48	; 0x30
   13dd8:	cmp	r3, #9
   13ddc:	bls	14ae4 <__assert_fail@plt+0x3ae0>
   13de0:	mov	r3, #0
   13de4:	mov	r5, #48	; 0x30
   13de8:	ldr	r6, [sp, #64]	; 0x40
   13dec:	cmp	r6, #0
   13df0:	beq	13ce4 <__assert_fail@plt+0x2ce0>
   13df4:	mov	r6, #0
   13df8:	b	13d0c <__assert_fail@plt+0x2d08>
   13dfc:	ldr	r3, [sp, #48]	; 0x30
   13e00:	str	r3, [sp, #40]	; 0x28
   13e04:	ldr	r2, [sp, #60]	; 0x3c
   13e08:	mov	r5, #13
   13e0c:	mov	r3, #114	; 0x72
   13e10:	cmp	r2, #0
   13e14:	beq	13cd0 <__assert_fail@plt+0x2ccc>
   13e18:	mov	r5, r3
   13e1c:	b	13b4c <__assert_fail@plt+0x2b48>
   13e20:	ldr	r3, [sp, #48]	; 0x30
   13e24:	str	r3, [sp, #40]	; 0x28
   13e28:	mov	r3, #118	; 0x76
   13e2c:	b	13cc4 <__assert_fail@plt+0x2cc0>
   13e30:	ldr	r3, [sp, #48]	; 0x30
   13e34:	str	r3, [sp, #40]	; 0x28
   13e38:	mov	r5, #10
   13e3c:	mov	r3, #110	; 0x6e
   13e40:	b	13cc4 <__assert_fail@plt+0x2cc0>
   13e44:	ldr	r3, [sp, #48]	; 0x30
   13e48:	cmn	r8, #1
   13e4c:	str	r3, [sp, #40]	; 0x28
   13e50:	beq	14298 <__assert_fail@plt+0x3294>
   13e54:	subs	r3, r8, #1
   13e58:	movne	r3, #1
   13e5c:	cmp	r3, #0
   13e60:	bne	13e6c <__assert_fail@plt+0x2e68>
   13e64:	cmp	r7, #0
   13e68:	beq	13eb0 <__assert_fail@plt+0x2eac>
   13e6c:	mov	r6, #0
   13e70:	ldr	r3, [sp, #64]	; 0x40
   13e74:	cmp	r3, #0
   13e78:	beq	13ce0 <__assert_fail@plt+0x2cdc>
   13e7c:	ldr	r3, [sp, #44]	; 0x2c
   13e80:	cmp	r3, #0
   13e84:	bne	13ce0 <__assert_fail@plt+0x2cdc>
   13e88:	mov	r3, fp
   13e8c:	b	13d0c <__assert_fail@plt+0x2d08>
   13e90:	ldr	r3, [sp, #48]	; 0x30
   13e94:	str	r3, [sp, #40]	; 0x28
   13e98:	b	13e64 <__assert_fail@plt+0x2e60>
   13e9c:	ldr	r3, [sp, #48]	; 0x30
   13ea0:	str	r3, [sp, #40]	; 0x28
   13ea4:	b	13e6c <__assert_fail@plt+0x2e68>
   13ea8:	ldr	r6, [sp, #48]	; 0x30
   13eac:	str	r6, [sp, #40]	; 0x28
   13eb0:	ldr	r3, [sp, #68]	; 0x44
   13eb4:	cmp	r3, #0
   13eb8:	beq	13e70 <__assert_fail@plt+0x2e6c>
   13ebc:	mov	r3, #2
   13ec0:	mov	fp, r9
   13ec4:	str	r3, [sp, #176]	; 0xb0
   13ec8:	ldr	r3, [sp, #60]	; 0x3c
   13ecc:	cmp	r3, #0
   13ed0:	ldr	r3, [sp, #176]	; 0xb0
   13ed4:	movne	r3, #4
   13ed8:	str	r3, [sp, #176]	; 0xb0
   13edc:	mov	lr, #0
   13ee0:	mov	r0, fp
   13ee4:	ldr	r2, [sp, #28]
   13ee8:	ldr	r3, [sp, #180]	; 0xb4
   13eec:	ldr	r1, [sp, #188]	; 0xbc
   13ef0:	bic	ip, r3, #2
   13ef4:	ldr	r3, [sp, #176]	; 0xb0
   13ef8:	stm	sp, {r3, ip, lr}
   13efc:	mov	r3, r8
   13f00:	ldr	ip, [sp, #192]	; 0xc0
   13f04:	str	r1, [sp, #12]
   13f08:	mov	r1, sl
   13f0c:	str	ip, [sp, #16]
   13f10:	bl	1349c <__assert_fail@plt+0x2498>
   13f14:	mov	r4, r0
   13f18:	mov	r0, r4
   13f1c:	add	sp, sp, #140	; 0x8c
   13f20:	ldrd	r4, [sp]
   13f24:	ldrd	r6, [sp, #8]
   13f28:	ldrd	r8, [sp, #16]
   13f2c:	ldrd	sl, [sp, #24]
   13f30:	add	sp, sp, #32
   13f34:	pop	{pc}		; (ldr pc, [sp], #4)
   13f38:	ldr	r3, [sp, #48]	; 0x30
   13f3c:	str	r3, [sp, #40]	; 0x28
   13f40:	ldr	r3, [sp, #176]	; 0xb0
   13f44:	cmp	r3, #2
   13f48:	beq	142c0 <__assert_fail@plt+0x32bc>
   13f4c:	ldr	r3, [sp, #88]	; 0x58
   13f50:	cmp	r3, #0
   13f54:	moveq	r5, #92	; 0x5c
   13f58:	moveq	r3, r5
   13f5c:	beq	13cc4 <__assert_fail@plt+0x2cc0>
   13f60:	add	r7, r7, #1
   13f64:	mov	r3, fp
   13f68:	mov	r6, #0
   13f6c:	mov	r5, #92	; 0x5c
   13f70:	b	13d1c <__assert_fail@plt+0x2d18>
   13f74:	ldr	r3, [sp, #64]	; 0x40
   13f78:	cmp	r3, #0
   13f7c:	bne	14df4 <__assert_fail@plt+0x3df0>
   13f80:	ldr	r2, [sp, #48]	; 0x30
   13f84:	mov	r3, fp
   13f88:	mov	r6, r2
   13f8c:	str	r2, [sp, #40]	; 0x28
   13f90:	b	13ce4 <__assert_fail@plt+0x2ce0>
   13f94:	ldr	r3, [sp, #176]	; 0xb0
   13f98:	cmp	r3, #2
   13f9c:	beq	14d30 <__assert_fail@plt+0x3d2c>
   13fa0:	cmp	r3, #5
   13fa4:	ldr	r3, [sp, #48]	; 0x30
   13fa8:	str	r3, [sp, #40]	; 0x28
   13fac:	bne	13fd8 <__assert_fail@plt+0x2fd4>
   13fb0:	ldr	r3, [sp, #96]	; 0x60
   13fb4:	cmp	r3, #0
   13fb8:	beq	14a34 <__assert_fail@plt+0x3a30>
   13fbc:	add	r3, r7, #2
   13fc0:	cmp	r3, r8
   13fc4:	bcs	13fd8 <__assert_fail@plt+0x2fd4>
   13fc8:	ldr	r2, [sp, #36]	; 0x24
   13fcc:	ldrb	r5, [r2, #1]
   13fd0:	cmp	r5, #63	; 0x3f
   13fd4:	beq	14b1c <__assert_fail@plt+0x3b18>
   13fd8:	mov	r6, #0
   13fdc:	mov	r5, #63	; 0x3f
   13fe0:	b	13e70 <__assert_fail@plt+0x2e6c>
   13fe4:	ldr	r3, [sp, #176]	; 0xb0
   13fe8:	cmp	r3, #2
   13fec:	ldr	r3, [sp, #48]	; 0x30
   13ff0:	beq	147d8 <__assert_fail@plt+0x37d4>
   13ff4:	mov	r5, #39	; 0x27
   13ff8:	str	r3, [sp, #40]	; 0x28
   13ffc:	str	r6, [sp, #80]	; 0x50
   14000:	b	13e70 <__assert_fail@plt+0x2e6c>
   14004:	ldr	r3, [sp, #180]	; 0xb4
   14008:	cmp	r4, #0
   1400c:	and	r3, r3, #1
   14010:	str	r3, [sp, #92]	; 0x5c
   14014:	ldr	r3, [sp, #180]	; 0xb4
   14018:	and	r3, r3, #4
   1401c:	str	r3, [sp, #96]	; 0x60
   14020:	bne	14e40 <__assert_fail@plt+0x3e3c>
   14024:	str	r4, [sp, #60]	; 0x3c
   14028:	cmp	sl, #0
   1402c:	bne	14e24 <__assert_fail@plt+0x3e20>
   14030:	mov	r3, #1
   14034:	movw	r2, #36300	; 0x8dcc
   14038:	movt	r2, #1
   1403c:	mov	r4, r3
   14040:	mov	r3, #2
   14044:	mov	r9, sl
   14048:	str	r4, [sp, #32]
   1404c:	str	sl, [sp, #44]	; 0x2c
   14050:	str	sl, [sp, #48]	; 0x30
   14054:	str	r4, [sp, #52]	; 0x34
   14058:	str	r4, [sp, #56]	; 0x38
   1405c:	str	r4, [sp, #64]	; 0x40
   14060:	str	sl, [sp, #68]	; 0x44
   14064:	str	r2, [sp, #72]	; 0x48
   14068:	str	sl, [sp, #80]	; 0x50
   1406c:	str	sl, [sp, #84]	; 0x54
   14070:	str	sl, [sp, #88]	; 0x58
   14074:	str	r3, [sp, #176]	; 0xb0
   14078:	b	135c0 <__assert_fail@plt+0x25bc>
   1407c:	ldrb	r5, [r0, r7]
   14080:	cmp	r5, #126	; 0x7e
   14084:	ldrls	pc, [pc, r5, lsl #2]
   14088:	b	143ec <__assert_fail@plt+0x33e8>
   1408c:			; <UNDEFINED> instruction: 0x000143b8
   14090:	andeq	r4, r1, ip, ror #7
   14094:	andeq	r4, r1, ip, ror #7
   14098:	andeq	r4, r1, ip, ror #7
   1409c:	andeq	r4, r1, ip, ror #7
   140a0:	andeq	r4, r1, ip, ror #7
   140a4:	andeq	r4, r1, ip, ror #7
   140a8:	andeq	r4, r1, r8, lsr #7
   140ac:	muleq	r1, r8, r3
   140b0:	andeq	r4, r1, ip, lsl r3
   140b4:	andeq	r4, r1, r8, lsl #7
   140b8:	strdeq	r4, [r1], -ip
   140bc:	ldrdeq	r4, [r1], -ip
   140c0:	andeq	r4, r1, r8, ror #6
   140c4:	andeq	r4, r1, ip, ror #7
   140c8:	andeq	r4, r1, ip, ror #7
   140cc:	andeq	r4, r1, ip, ror #7
   140d0:	andeq	r4, r1, ip, ror #7
   140d4:	andeq	r4, r1, ip, ror #7
   140d8:	andeq	r4, r1, ip, ror #7
   140dc:	andeq	r4, r1, ip, ror #7
   140e0:	andeq	r4, r1, ip, ror #7
   140e4:	andeq	r4, r1, ip, ror #7
   140e8:	andeq	r4, r1, ip, ror #7
   140ec:	andeq	r4, r1, ip, ror #7
   140f0:	andeq	r4, r1, ip, ror #7
   140f4:	andeq	r4, r1, ip, ror #7
   140f8:	andeq	r4, r1, ip, ror #7
   140fc:	andeq	r4, r1, ip, ror #7
   14100:	andeq	r4, r1, ip, ror #7
   14104:	andeq	r4, r1, ip, ror #7
   14108:	andeq	r4, r1, ip, ror #7
   1410c:	andeq	r4, r1, r0, lsl r3
   14110:	andeq	r4, r1, r8, ror r3
   14114:	andeq	r4, r1, r8, ror r3
   14118:	strdeq	r4, [r1], -r0
   1411c:	andeq	r4, r1, r8, ror r3
   14120:	andeq	r4, r1, r4, ror #5
   14124:	andeq	r4, r1, r8, ror r3
   14128:	andeq	r4, r1, r4, asr r3
   1412c:	andeq	r4, r1, r8, ror r3
   14130:	andeq	r4, r1, r8, ror r3
   14134:	andeq	r4, r1, r8, ror r3
   14138:	andeq	r4, r1, r4, ror #5
   1413c:	andeq	r4, r1, r4, ror #5
   14140:	andeq	r4, r1, r4, ror #5
   14144:	andeq	r4, r1, r4, ror #5
   14148:	andeq	r4, r1, r4, ror #5
   1414c:	andeq	r4, r1, r4, ror #5
   14150:	andeq	r4, r1, r4, ror #5
   14154:	andeq	r4, r1, r4, ror #5
   14158:	andeq	r4, r1, r4, ror #5
   1415c:	andeq	r4, r1, r4, ror #5
   14160:	andeq	r4, r1, r4, ror #5
   14164:	andeq	r4, r1, r4, ror #5
   14168:	andeq	r4, r1, r4, ror #5
   1416c:	andeq	r4, r1, r4, ror #5
   14170:	andeq	r4, r1, r4, ror #5
   14174:	andeq	r4, r1, r4, ror #5
   14178:	andeq	r4, r1, r8, ror r3
   1417c:	andeq	r4, r1, r8, ror r3
   14180:	andeq	r4, r1, r8, ror r3
   14184:	andeq	r4, r1, r8, ror r3
   14188:	andeq	r4, r1, ip, lsr #6
   1418c:	andeq	r4, r1, ip, ror #7
   14190:	andeq	r4, r1, r4, ror #5
   14194:	andeq	r4, r1, r4, ror #5
   14198:	andeq	r4, r1, r4, ror #5
   1419c:	andeq	r4, r1, r4, ror #5
   141a0:	andeq	r4, r1, r4, ror #5
   141a4:	andeq	r4, r1, r4, ror #5
   141a8:	andeq	r4, r1, r4, ror #5
   141ac:	andeq	r4, r1, r4, ror #5
   141b0:	andeq	r4, r1, r4, ror #5
   141b4:	andeq	r4, r1, r4, ror #5
   141b8:	andeq	r4, r1, r4, ror #5
   141bc:	andeq	r4, r1, r4, ror #5
   141c0:	andeq	r4, r1, r4, ror #5
   141c4:	andeq	r4, r1, r4, ror #5
   141c8:	andeq	r4, r1, r4, ror #5
   141cc:	andeq	r4, r1, r4, ror #5
   141d0:	andeq	r4, r1, r4, ror #5
   141d4:	andeq	r4, r1, r4, ror #5
   141d8:	andeq	r4, r1, r4, ror #5
   141dc:	andeq	r4, r1, r4, ror #5
   141e0:	andeq	r4, r1, r4, ror #5
   141e4:	andeq	r4, r1, r4, ror #5
   141e8:	andeq	r4, r1, r4, ror #5
   141ec:	andeq	r4, r1, r4, ror #5
   141f0:	andeq	r4, r1, r4, ror #5
   141f4:	andeq	r4, r1, r4, ror #5
   141f8:	andeq	r4, r1, r8, ror r3
   141fc:	andeq	r4, r1, ip, lsr #5
   14200:	andeq	r4, r1, r4, ror #5
   14204:	andeq	r4, r1, r8, ror r3
   14208:	andeq	r4, r1, r4, ror #5
   1420c:	andeq	r4, r1, r8, ror r3
   14210:	andeq	r4, r1, r4, ror #5
   14214:	andeq	r4, r1, r4, ror #5
   14218:	andeq	r4, r1, r4, ror #5
   1421c:	andeq	r4, r1, r4, ror #5
   14220:	andeq	r4, r1, r4, ror #5
   14224:	andeq	r4, r1, r4, ror #5
   14228:	andeq	r4, r1, r4, ror #5
   1422c:	andeq	r4, r1, r4, ror #5
   14230:	andeq	r4, r1, r4, ror #5
   14234:	andeq	r4, r1, r4, ror #5
   14238:	andeq	r4, r1, r4, ror #5
   1423c:	andeq	r4, r1, r4, ror #5
   14240:	andeq	r4, r1, r4, ror #5
   14244:	andeq	r4, r1, r4, ror #5
   14248:	andeq	r4, r1, r4, ror #5
   1424c:	andeq	r4, r1, r4, ror #5
   14250:	andeq	r4, r1, r4, ror #5
   14254:	andeq	r4, r1, r4, ror #5
   14258:	andeq	r4, r1, r4, ror #5
   1425c:	andeq	r4, r1, r4, ror #5
   14260:	andeq	r4, r1, r4, ror #5
   14264:	andeq	r4, r1, r4, ror #5
   14268:	andeq	r4, r1, r4, ror #5
   1426c:	andeq	r4, r1, r4, ror #5
   14270:	andeq	r4, r1, r4, ror #5
   14274:	andeq	r4, r1, r4, ror #5
   14278:	andeq	r4, r1, r8, lsl #5
   1427c:	andeq	r4, r1, r8, ror r3
   14280:	andeq	r4, r1, r8, lsl #5
   14284:	strdeq	r4, [r1], -r0
   14288:	mov	r3, #0
   1428c:	cmn	r8, #1
   14290:	str	r3, [sp, #40]	; 0x28
   14294:	bne	13e54 <__assert_fail@plt+0x2e50>
   14298:	ldr	r3, [sp, #28]
   1429c:	ldrb	r3, [r3, #1]
   142a0:	adds	r3, r3, #0
   142a4:	movne	r3, #1
   142a8:	b	13e5c <__assert_fail@plt+0x2e58>
   142ac:	mov	r3, #0
   142b0:	str	r3, [sp, #40]	; 0x28
   142b4:	ldr	r3, [sp, #176]	; 0xb0
   142b8:	cmp	r3, #2
   142bc:	bne	13f4c <__assert_fail@plt+0x2f48>
   142c0:	ldr	r3, [sp, #44]	; 0x2c
   142c4:	cmp	r3, #0
   142c8:	bne	14c08 <__assert_fail@plt+0x3c04>
   142cc:	mov	r6, r3
   142d0:	add	r7, r7, #1
   142d4:	mov	r3, fp
   142d8:	mov	r5, #92	; 0x5c
   142dc:	b	13d1c <__assert_fail@plt+0x2d18>
   142e0:	ldr	r6, [sp, #48]	; 0x30
   142e4:	mov	r3, #0
   142e8:	str	r3, [sp, #40]	; 0x28
   142ec:	b	13e70 <__assert_fail@plt+0x2e6c>
   142f0:	mov	r3, #0
   142f4:	str	r3, [sp, #40]	; 0x28
   142f8:	b	13e64 <__assert_fail@plt+0x2e60>
   142fc:	mov	r3, #0
   14300:	str	r3, [sp, #40]	; 0x28
   14304:	mov	r3, #118	; 0x76
   14308:	b	13cc4 <__assert_fail@plt+0x2cc0>
   1430c:	ldr	r6, [sp, #48]	; 0x30
   14310:	mov	r3, #0
   14314:	str	r3, [sp, #40]	; 0x28
   14318:	b	13eb0 <__assert_fail@plt+0x2eac>
   1431c:	mov	r3, #0
   14320:	str	r3, [sp, #40]	; 0x28
   14324:	mov	r3, #116	; 0x74
   14328:	b	13cb8 <__assert_fail@plt+0x2cb4>
   1432c:	ldr	r3, [sp, #176]	; 0xb0
   14330:	cmp	r3, #2
   14334:	beq	14844 <__assert_fail@plt+0x3840>
   14338:	cmp	r3, #5
   1433c:	mov	r3, #0
   14340:	str	r3, [sp, #40]	; 0x28
   14344:	beq	13fb0 <__assert_fail@plt+0x2fac>
   14348:	mov	r6, #0
   1434c:	mov	r5, #63	; 0x3f
   14350:	b	13e70 <__assert_fail@plt+0x2e6c>
   14354:	ldr	r3, [sp, #176]	; 0xb0
   14358:	cmp	r3, #2
   1435c:	beq	147cc <__assert_fail@plt+0x37c8>
   14360:	mov	r3, #0
   14364:	b	13ff4 <__assert_fail@plt+0x2ff0>
   14368:	mov	r3, #0
   1436c:	str	r3, [sp, #40]	; 0x28
   14370:	mov	r3, #114	; 0x72
   14374:	b	13cb8 <__assert_fail@plt+0x2cb4>
   14378:	mov	r3, #0
   1437c:	mov	r6, r3
   14380:	str	r3, [sp, #40]	; 0x28
   14384:	b	13eb0 <__assert_fail@plt+0x2eac>
   14388:	mov	r3, #0
   1438c:	str	r3, [sp, #40]	; 0x28
   14390:	mov	r3, #110	; 0x6e
   14394:	b	13cb8 <__assert_fail@plt+0x2cb4>
   14398:	mov	r3, #0
   1439c:	str	r3, [sp, #40]	; 0x28
   143a0:	mov	r3, #98	; 0x62
   143a4:	b	13cc4 <__assert_fail@plt+0x2cc0>
   143a8:	mov	r3, #0
   143ac:	str	r3, [sp, #40]	; 0x28
   143b0:	mov	r3, #97	; 0x61
   143b4:	b	13cc4 <__assert_fail@plt+0x2cc0>
   143b8:	ldr	r3, [sp, #60]	; 0x3c
   143bc:	cmp	r3, #0
   143c0:	bne	147b0 <__assert_fail@plt+0x37ac>
   143c4:	ldr	r3, [sp, #92]	; 0x5c
   143c8:	cmp	r3, #0
   143cc:	addne	r7, r7, #1
   143d0:	bne	135d0 <__assert_fail@plt+0x25cc>
   143d4:	str	r3, [sp, #40]	; 0x28
   143d8:	b	13cd0 <__assert_fail@plt+0x2ccc>
   143dc:	mov	r3, #0
   143e0:	str	r3, [sp, #40]	; 0x28
   143e4:	mov	r3, #102	; 0x66
   143e8:	b	13cc4 <__assert_fail@plt+0x2cc0>
   143ec:	mov	r3, #0
   143f0:	str	r3, [sp, #40]	; 0x28
   143f4:	ldr	r3, [sp, #76]	; 0x4c
   143f8:	cmp	r3, #1
   143fc:	bne	14864 <__assert_fail@plt+0x3860>
   14400:	bl	10ec0 <__ctype_b_loc@plt>
   14404:	ldr	r2, [r0]
   14408:	sxth	r3, r5
   1440c:	lsl	r3, r3, #1
   14410:	ldr	r1, [sp, #76]	; 0x4c
   14414:	ldrh	r3, [r2, r3]
   14418:	mov	r0, r1
   1441c:	and	r3, r3, #16384	; 0x4000
   14420:	cmp	r3, #0
   14424:	ldr	r3, [sp, #60]	; 0x3c
   14428:	movne	r6, #1
   1442c:	moveq	r6, #0
   14430:	movne	r2, #0
   14434:	andeq	r2, r3, #1
   14438:	cmp	r2, #0
   1443c:	beq	13e70 <__assert_fail@plt+0x2e6c>
   14440:	ldr	r2, [sp, #60]	; 0x3c
   14444:	mov	r6, #0
   14448:	add	r1, r0, r7
   1444c:	mov	ip, #39	; 0x27
   14450:	str	r6, [sp, #100]	; 0x64
   14454:	mov	r0, #0
   14458:	ldr	lr, [sp, #36]	; 0x24
   1445c:	str	r8, [sp, #36]	; 0x24
   14460:	ldr	r6, [sp, #40]	; 0x28
   14464:	ldr	r8, [sp, #44]	; 0x2c
   14468:	b	14518 <__assert_fail@plt+0x3514>
   1446c:	cmp	r8, #0
   14470:	bne	14a4c <__assert_fail@plt+0x3a48>
   14474:	ldr	r0, [sp, #52]	; 0x34
   14478:	eor	r3, fp, #1
   1447c:	ands	r3, r0, r3
   14480:	beq	144b0 <__assert_fail@plt+0x34ac>
   14484:	cmp	sl, r4
   14488:	add	r0, r4, #1
   1448c:	strbhi	ip, [r9, r4]
   14490:	cmp	sl, r0
   14494:	movhi	fp, #36	; 0x24
   14498:	strbhi	fp, [r9, r0]
   1449c:	add	r0, r4, #2
   144a0:	mov	fp, r3
   144a4:	cmp	sl, r0
   144a8:	add	r4, r4, #3
   144ac:	strbhi	ip, [r9, r0]
   144b0:	cmp	sl, r4
   144b4:	movhi	r3, #92	; 0x5c
   144b8:	strbhi	r3, [r9, r4]
   144bc:	add	r3, r4, #1
   144c0:	cmp	sl, r3
   144c4:	bls	144d4 <__assert_fail@plt+0x34d0>
   144c8:	lsr	r0, r5, #6
   144cc:	add	r0, r0, #48	; 0x30
   144d0:	strb	r0, [r9, r3]
   144d4:	add	r3, r4, #2
   144d8:	cmp	sl, r3
   144dc:	bls	144ec <__assert_fail@plt+0x34e8>
   144e0:	ubfx	r0, r5, #3, #3
   144e4:	add	r0, r0, #48	; 0x30
   144e8:	strb	r0, [r9, r3]
   144ec:	add	r7, r7, #1
   144f0:	and	r5, r5, #7
   144f4:	cmp	r1, r7
   144f8:	add	r5, r5, #48	; 0x30
   144fc:	add	r4, r4, #3
   14500:	bls	14a60 <__assert_fail@plt+0x3a5c>
   14504:	mov	r0, r2
   14508:	cmp	sl, r4
   1450c:	strbhi	r5, [r9, r4]
   14510:	add	r4, r4, #1
   14514:	ldrb	r5, [lr, #1]!
   14518:	cmp	r2, #0
   1451c:	bne	1446c <__assert_fail@plt+0x3468>
   14520:	eor	r3, r0, #1
   14524:	cmp	r6, #0
   14528:	and	r3, r3, fp
   1452c:	uxtb	r3, r3
   14530:	beq	14544 <__assert_fail@plt+0x3540>
   14534:	cmp	sl, r4
   14538:	movhi	r6, #92	; 0x5c
   1453c:	strbhi	r6, [r9, r4]
   14540:	add	r4, r4, #1
   14544:	add	r7, r7, #1
   14548:	cmp	r7, r1
   1454c:	bcs	14a40 <__assert_fail@plt+0x3a3c>
   14550:	cmp	r3, #0
   14554:	beq	14a84 <__assert_fail@plt+0x3a80>
   14558:	cmp	sl, r4
   1455c:	add	r3, r4, #1
   14560:	mov	r6, #0
   14564:	strbhi	ip, [r9, r4]
   14568:	cmp	sl, r3
   1456c:	add	r4, r4, #2
   14570:	mov	fp, r6
   14574:	strbhi	ip, [r9, r3]
   14578:	b	14508 <__assert_fail@plt+0x3504>
   1457c:	ldr	r3, [sp, #36]	; 0x24
   14580:	ldrb	r5, [r3]
   14584:	cmp	r5, #126	; 0x7e
   14588:	ldrls	pc, [pc, r5, lsl #2]
   1458c:	b	143ec <__assert_fail@plt+0x33e8>
   14590:			; <UNDEFINED> instruction: 0x000147b0
   14594:	andeq	r4, r1, ip, ror #7
   14598:	andeq	r4, r1, ip, ror #7
   1459c:	andeq	r4, r1, ip, ror #7
   145a0:	andeq	r4, r1, ip, ror #7
   145a4:	andeq	r4, r1, ip, ror #7
   145a8:	andeq	r4, r1, ip, ror #7
   145ac:	andeq	r3, r1, r4, lsr #25
   145b0:	muleq	r1, ip, ip
   145b4:	andeq	r4, r1, ip, lsl r3
   145b8:	andeq	r4, r1, r4, lsr #15
   145bc:	strdeq	r4, [r1], -ip
   145c0:	andeq	r3, r1, r8, asr #22
   145c4:	muleq	r1, r8, r7
   145c8:	andeq	r4, r1, ip, ror #7
   145cc:	andeq	r4, r1, ip, ror #7
   145d0:	andeq	r4, r1, ip, ror #7
   145d4:	andeq	r4, r1, ip, ror #7
   145d8:	andeq	r4, r1, ip, ror #7
   145dc:	andeq	r4, r1, ip, ror #7
   145e0:	andeq	r4, r1, ip, ror #7
   145e4:	andeq	r4, r1, ip, ror #7
   145e8:	andeq	r4, r1, ip, ror #7
   145ec:	andeq	r4, r1, ip, ror #7
   145f0:	andeq	r4, r1, ip, ror #7
   145f4:	andeq	r4, r1, ip, ror #7
   145f8:	andeq	r4, r1, ip, ror #7
   145fc:	andeq	r4, r1, ip, ror #7
   14600:	andeq	r4, r1, ip, ror #7
   14604:	andeq	r4, r1, ip, ror #7
   14608:	andeq	r4, r1, ip, ror #7
   1460c:	andeq	r4, r1, ip, ror #7
   14610:	andeq	r4, r1, ip, lsl #6
   14614:	andeq	r4, r1, ip, lsl #15
   14618:	andeq	r4, r1, ip, lsl #15
   1461c:	strdeq	r4, [r1], -r0
   14620:	andeq	r4, r1, ip, lsl #15
   14624:	andeq	r4, r1, r0, ror #5
   14628:	andeq	r4, r1, ip, lsl #15
   1462c:	andeq	r4, r1, r4, asr r3
   14630:	andeq	r4, r1, ip, lsl #15
   14634:	andeq	r4, r1, ip, lsl #15
   14638:	andeq	r4, r1, ip, lsl #15
   1463c:	andeq	r4, r1, r0, ror #5
   14640:	andeq	r4, r1, r0, ror #5
   14644:	andeq	r4, r1, r0, ror #5
   14648:	andeq	r4, r1, r0, ror #5
   1464c:	andeq	r4, r1, r0, ror #5
   14650:	andeq	r4, r1, r0, ror #5
   14654:	andeq	r4, r1, r0, ror #5
   14658:	andeq	r4, r1, r0, ror #5
   1465c:	andeq	r4, r1, r0, ror #5
   14660:	andeq	r4, r1, r0, ror #5
   14664:	andeq	r4, r1, r0, ror #5
   14668:	andeq	r4, r1, r0, ror #5
   1466c:	andeq	r4, r1, r0, ror #5
   14670:	andeq	r4, r1, r0, ror #5
   14674:	andeq	r4, r1, r0, ror #5
   14678:	andeq	r4, r1, r0, ror #5
   1467c:	andeq	r4, r1, ip, lsl #15
   14680:	andeq	r4, r1, ip, lsl #15
   14684:	andeq	r4, r1, ip, lsl #15
   14688:	andeq	r4, r1, ip, lsl #15
   1468c:	andeq	r4, r1, ip, lsr #6
   14690:	andeq	r4, r1, ip, ror #7
   14694:	andeq	r4, r1, r0, ror #5
   14698:	andeq	r4, r1, r0, ror #5
   1469c:	andeq	r4, r1, r0, ror #5
   146a0:	andeq	r4, r1, r0, ror #5
   146a4:	andeq	r4, r1, r0, ror #5
   146a8:	andeq	r4, r1, r0, ror #5
   146ac:	andeq	r4, r1, r0, ror #5
   146b0:	andeq	r4, r1, r0, ror #5
   146b4:	andeq	r4, r1, r0, ror #5
   146b8:	andeq	r4, r1, r0, ror #5
   146bc:	andeq	r4, r1, r0, ror #5
   146c0:	andeq	r4, r1, r0, ror #5
   146c4:	andeq	r4, r1, r0, ror #5
   146c8:	andeq	r4, r1, r0, ror #5
   146cc:	andeq	r4, r1, r0, ror #5
   146d0:	andeq	r4, r1, r0, ror #5
   146d4:	andeq	r4, r1, r0, ror #5
   146d8:	andeq	r4, r1, r0, ror #5
   146dc:	andeq	r4, r1, r0, ror #5
   146e0:	andeq	r4, r1, r0, ror #5
   146e4:	andeq	r4, r1, r0, ror #5
   146e8:	andeq	r4, r1, r0, ror #5
   146ec:	andeq	r4, r1, r0, ror #5
   146f0:	andeq	r4, r1, r0, ror #5
   146f4:	andeq	r4, r1, r0, ror #5
   146f8:	andeq	r4, r1, r0, ror #5
   146fc:	andeq	r4, r1, ip, lsl #15
   14700:	andeq	r4, r1, ip, lsr #5
   14704:	andeq	r4, r1, r0, ror #5
   14708:	andeq	r4, r1, ip, lsl #15
   1470c:	andeq	r4, r1, r0, ror #5
   14710:	andeq	r4, r1, ip, lsl #15
   14714:	andeq	r4, r1, r0, ror #5
   14718:	andeq	r4, r1, r0, ror #5
   1471c:	andeq	r4, r1, r0, ror #5
   14720:	andeq	r4, r1, r0, ror #5
   14724:	andeq	r4, r1, r0, ror #5
   14728:	andeq	r4, r1, r0, ror #5
   1472c:	andeq	r4, r1, r0, ror #5
   14730:	andeq	r4, r1, r0, ror #5
   14734:	andeq	r4, r1, r0, ror #5
   14738:	andeq	r4, r1, r0, ror #5
   1473c:	andeq	r4, r1, r0, ror #5
   14740:	andeq	r4, r1, r0, ror #5
   14744:	andeq	r4, r1, r0, ror #5
   14748:	andeq	r4, r1, r0, ror #5
   1474c:	andeq	r4, r1, r0, ror #5
   14750:	andeq	r4, r1, r0, ror #5
   14754:	andeq	r4, r1, r0, ror #5
   14758:	andeq	r4, r1, r0, ror #5
   1475c:	andeq	r4, r1, r0, ror #5
   14760:	andeq	r4, r1, r0, ror #5
   14764:	andeq	r4, r1, r0, ror #5
   14768:	andeq	r4, r1, r0, ror #5
   1476c:	andeq	r4, r1, r0, ror #5
   14770:	andeq	r4, r1, r0, ror #5
   14774:	andeq	r4, r1, r0, ror #5
   14778:	andeq	r4, r1, r0, ror #5
   1477c:	andeq	r4, r1, r8, lsl #5
   14780:	andeq	r4, r1, ip, lsl #15
   14784:	andeq	r4, r1, r8, lsl #5
   14788:	strdeq	r4, [r1], -r0
   1478c:	mov	r3, #0
   14790:	str	r3, [sp, #40]	; 0x28
   14794:	b	13e6c <__assert_fail@plt+0x2e68>
   14798:	mov	r3, #0
   1479c:	str	r3, [sp, #40]	; 0x28
   147a0:	b	13e04 <__assert_fail@plt+0x2e00>
   147a4:	mov	r3, #0
   147a8:	str	r3, [sp, #40]	; 0x28
   147ac:	b	13e38 <__assert_fail@plt+0x2e34>
   147b0:	ldr	r3, [sp, #44]	; 0x2c
   147b4:	cmp	r3, #0
   147b8:	beq	13d50 <__assert_fail@plt+0x2d4c>
   147bc:	ldr	r3, [sp, #52]	; 0x34
   147c0:	mov	fp, r9
   147c4:	str	r3, [sp, #60]	; 0x3c
   147c8:	b	13ec8 <__assert_fail@plt+0x2ec4>
   147cc:	ldr	r3, [sp, #44]	; 0x2c
   147d0:	cmp	r3, #0
   147d4:	bne	14c08 <__assert_fail@plt+0x3c04>
   147d8:	str	r3, [sp, #40]	; 0x28
   147dc:	cmp	sl, #0
   147e0:	ldr	r3, [sp, #84]	; 0x54
   147e4:	clz	r3, r3
   147e8:	lsr	r3, r3, #5
   147ec:	moveq	r3, #0
   147f0:	cmp	r3, #0
   147f4:	strne	sl, [sp, #84]	; 0x54
   147f8:	movne	sl, #0
   147fc:	bne	1482c <__assert_fail@plt+0x3828>
   14800:	cmp	sl, r4
   14804:	movhi	r3, #39	; 0x27
   14808:	strbhi	r3, [r9, r4]
   1480c:	add	r3, r4, #1
   14810:	cmp	sl, r3
   14814:	movhi	r2, #92	; 0x5c
   14818:	strbhi	r2, [r9, r3]
   1481c:	add	r3, r4, #2
   14820:	cmp	sl, r3
   14824:	movhi	r2, #39	; 0x27
   14828:	strbhi	r2, [r9, r3]
   1482c:	mov	r3, #0
   14830:	add	r4, r4, #3
   14834:	str	r6, [sp, #80]	; 0x50
   14838:	mov	fp, r3
   1483c:	mov	r5, #39	; 0x27
   14840:	b	13d0c <__assert_fail@plt+0x2d08>
   14844:	ldr	r3, [sp, #44]	; 0x2c
   14848:	cmp	r3, #0
   1484c:	bne	14c08 <__assert_fail@plt+0x3c04>
   14850:	mov	r6, #0
   14854:	mov	r5, #63	; 0x3f
   14858:	str	r3, [sp, #40]	; 0x28
   1485c:	mov	r3, fp
   14860:	b	13d0c <__assert_fail@plt+0x2d08>
   14864:	mov	r2, #0
   14868:	mov	r3, #0
   1486c:	cmn	r8, #1
   14870:	strd	r2, [sp, #128]	; 0x80
   14874:	bne	14884 <__assert_fail@plt+0x3880>
   14878:	ldr	r0, [sp, #28]
   1487c:	bl	10ed8 <strlen@plt>
   14880:	mov	r8, r0
   14884:	str	r9, [sp, #100]	; 0x64
   14888:	mov	r3, #0
   1488c:	strd	sl, [sp, #104]	; 0x68
   14890:	ldr	sl, [sp, #28]
   14894:	str	r5, [sp, #112]	; 0x70
   14898:	mov	r5, r3
   1489c:	ldr	r9, [sp, #68]	; 0x44
   148a0:	str	r4, [sp, #116]	; 0x74
   148a4:	add	r4, r7, r5
   148a8:	add	r3, sp, #128	; 0x80
   148ac:	add	fp, sl, r4
   148b0:	sub	r2, r8, r4
   148b4:	mov	r1, fp
   148b8:	add	r0, sp, #124	; 0x7c
   148bc:	bl	17e20 <__assert_fail@plt+0x6e1c>
   148c0:	subs	r1, r0, #0
   148c4:	beq	14904 <__assert_fail@plt+0x3900>
   148c8:	cmn	r1, #1
   148cc:	beq	14c5c <__assert_fail@plt+0x3c58>
   148d0:	cmn	r1, #2
   148d4:	beq	14c7c <__assert_fail@plt+0x3c78>
   148d8:	cmp	r9, #0
   148dc:	bne	14934 <__assert_fail@plt+0x3930>
   148e0:	ldr	r0, [sp, #124]	; 0x7c
   148e4:	add	r5, r5, r1
   148e8:	bl	10e30 <iswprint@plt>
   148ec:	cmp	r0, #0
   148f0:	add	r0, sp, #128	; 0x80
   148f4:	moveq	r6, #0
   148f8:	bl	10ddc <mbsinit@plt>
   148fc:	cmp	r0, #0
   14900:	beq	148a4 <__assert_fail@plt+0x38a0>
   14904:	ldr	r3, [sp, #60]	; 0x3c
   14908:	add	r9, sp, #100	; 0x64
   1490c:	mov	r0, r5
   14910:	ldm	r9, {r9, sl, fp}
   14914:	eor	r2, r6, #1
   14918:	ldr	r5, [sp, #112]	; 0x70
   1491c:	and	r2, r2, r3
   14920:	uxtb	r2, r2
   14924:	ldr	r4, [sp, #116]	; 0x74
   14928:	cmp	r0, #1
   1492c:	bhi	14448 <__assert_fail@plt+0x3444>
   14930:	b	14438 <__assert_fail@plt+0x3434>
   14934:	cmp	r1, #1
   14938:	beq	148e0 <__assert_fail@plt+0x38dc>
   1493c:	add	r2, r4, #1
   14940:	add	r3, sl, r1
   14944:	add	r2, sl, r2
   14948:	add	r4, r3, r4
   1494c:	ldrb	r3, [r2], #1
   14950:	sub	r3, r3, #91	; 0x5b
   14954:	cmp	r3, #33	; 0x21
   14958:	ldrls	pc, [pc, r3, lsl #2]
   1495c:	b	149e8 <__assert_fail@plt+0x39e4>
   14960:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14964:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14968:	andeq	r4, r1, r8, ror #19
   1496c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14970:	andeq	r4, r1, r8, ror #19
   14974:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14978:	andeq	r4, r1, r8, ror #19
   1497c:	andeq	r4, r1, r8, ror #19
   14980:	andeq	r4, r1, r8, ror #19
   14984:	andeq	r4, r1, r8, ror #19
   14988:	andeq	r4, r1, r8, ror #19
   1498c:	andeq	r4, r1, r8, ror #19
   14990:	andeq	r4, r1, r8, ror #19
   14994:	andeq	r4, r1, r8, ror #19
   14998:	andeq	r4, r1, r8, ror #19
   1499c:	andeq	r4, r1, r8, ror #19
   149a0:	andeq	r4, r1, r8, ror #19
   149a4:	andeq	r4, r1, r8, ror #19
   149a8:	andeq	r4, r1, r8, ror #19
   149ac:	andeq	r4, r1, r8, ror #19
   149b0:	andeq	r4, r1, r8, ror #19
   149b4:	andeq	r4, r1, r8, ror #19
   149b8:	andeq	r4, r1, r8, ror #19
   149bc:	andeq	r4, r1, r8, ror #19
   149c0:	andeq	r4, r1, r8, ror #19
   149c4:	andeq	r4, r1, r8, ror #19
   149c8:	andeq	r4, r1, r8, ror #19
   149cc:	andeq	r4, r1, r8, ror #19
   149d0:	andeq	r4, r1, r8, ror #19
   149d4:	andeq	r4, r1, r8, ror #19
   149d8:	andeq	r4, r1, r8, ror #19
   149dc:	andeq	r4, r1, r8, ror #19
   149e0:	andeq	r4, r1, r8, ror #19
   149e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149e8:	cmp	r4, r2
   149ec:	bne	1494c <__assert_fail@plt+0x3948>
   149f0:	b	148e0 <__assert_fail@plt+0x38dc>
   149f4:	mov	r3, #2
   149f8:	ldr	fp, [sp, #100]	; 0x64
   149fc:	str	r3, [sp, #176]	; 0xb0
   14a00:	ldr	sl, [sp, #104]	; 0x68
   14a04:	b	13ec8 <__assert_fail@plt+0x2ec4>
   14a08:	ldr	r2, [sp, #52]	; 0x34
   14a0c:	mov	fp, r9
   14a10:	ldr	r3, [sp, #60]	; 0x3c
   14a14:	and	r3, r3, r2
   14a18:	str	r3, [sp, #60]	; 0x3c
   14a1c:	b	13ec8 <__assert_fail@plt+0x2ec4>
   14a20:	cmp	sl, r4
   14a24:	movhi	r2, fp
   14a28:	bhi	13da0 <__assert_fail@plt+0x2d9c>
   14a2c:	mov	r2, r4
   14a30:	b	13db0 <__assert_fail@plt+0x2dac>
   14a34:	mov	r6, r3
   14a38:	mov	r5, #63	; 0x3f
   14a3c:	b	13e70 <__assert_fail@plt+0x2e6c>
   14a40:	ldr	r8, [sp, #36]	; 0x24
   14a44:	ldr	r6, [sp, #100]	; 0x64
   14a48:	b	13d1c <__assert_fail@plt+0x2d18>
   14a4c:	mov	fp, r9
   14a50:	ldr	r8, [sp, #36]	; 0x24
   14a54:	ldr	r3, [sp, #52]	; 0x34
   14a58:	str	r3, [sp, #60]	; 0x3c
   14a5c:	b	13ec8 <__assert_fail@plt+0x2ec4>
   14a60:	ldr	r8, [sp, #36]	; 0x24
   14a64:	ldr	r6, [sp, #100]	; 0x64
   14a68:	b	13bb4 <__assert_fail@plt+0x2bb0>
   14a6c:	mov	r3, #0
   14a70:	add	r4, r4, #4
   14a74:	mov	fp, r2
   14a78:	mov	r6, r3
   14a7c:	mov	r5, #48	; 0x30
   14a80:	b	13d0c <__assert_fail@plt+0x2d08>
   14a84:	mov	r6, r3
   14a88:	b	14508 <__assert_fail@plt+0x3504>
   14a8c:	mov	r3, #1
   14a90:	movw	r2, #36280	; 0x8db8
   14a94:	movt	r2, #1
   14a98:	mov	r4, r3
   14a9c:	mov	r9, sl
   14aa0:	str	r3, [sp, #32]
   14aa4:	str	sl, [sp, #44]	; 0x2c
   14aa8:	str	r3, [sp, #48]	; 0x30
   14aac:	str	sl, [sp, #52]	; 0x34
   14ab0:	str	r3, [sp, #56]	; 0x38
   14ab4:	str	r3, [sp, #60]	; 0x3c
   14ab8:	str	sl, [sp, #64]	; 0x40
   14abc:	str	sl, [sp, #68]	; 0x44
   14ac0:	str	r2, [sp, #72]	; 0x48
   14ac4:	str	sl, [sp, #80]	; 0x50
   14ac8:	str	sl, [sp, #84]	; 0x54
   14acc:	str	sl, [sp, #88]	; 0x58
   14ad0:	b	135c0 <__assert_fail@plt+0x25bc>
   14ad4:	mov	r3, #0
   14ad8:	mov	r5, #48	; 0x30
   14adc:	mov	r6, r3
   14ae0:	b	13d0c <__assert_fail@plt+0x2d08>
   14ae4:	cmp	sl, r4
   14ae8:	mov	r5, #48	; 0x30
   14aec:	movhi	r3, #48	; 0x30
   14af0:	strbhi	r3, [r9, r4]
   14af4:	add	r3, r2, #2
   14af8:	add	r4, r2, #3
   14afc:	cmp	sl, r3
   14b00:	movhi	r1, #48	; 0x30
   14b04:	strbhi	r1, [r9, r3]
   14b08:	mov	r3, #0
   14b0c:	b	13de8 <__assert_fail@plt+0x2de4>
   14b10:	ldr	r3, [sp, #48]	; 0x30
   14b14:	str	r3, [sp, #40]	; 0x28
   14b18:	b	143f4 <__assert_fail@plt+0x33f0>
   14b1c:	ldr	r2, [sp, #28]
   14b20:	ldrb	r2, [r2, r3]
   14b24:	sub	r1, r2, #33	; 0x21
   14b28:	cmp	r1, #29
   14b2c:	ldrls	pc, [pc, r1, lsl #2]
   14b30:	b	13e6c <__assert_fail@plt+0x2e68>
   14b34:	andeq	r4, r1, ip, lsr #23
   14b38:	andeq	r3, r1, ip, ror #28
   14b3c:	andeq	r3, r1, ip, ror #28
   14b40:	andeq	r3, r1, ip, ror #28
   14b44:	andeq	r3, r1, ip, ror #28
   14b48:	andeq	r3, r1, ip, ror #28
   14b4c:	andeq	r4, r1, ip, lsr #23
   14b50:	andeq	r4, r1, ip, lsr #23
   14b54:	andeq	r4, r1, ip, lsr #23
   14b58:	andeq	r3, r1, ip, ror #28
   14b5c:	andeq	r3, r1, ip, ror #28
   14b60:	andeq	r3, r1, ip, ror #28
   14b64:	andeq	r4, r1, ip, lsr #23
   14b68:	andeq	r3, r1, ip, ror #28
   14b6c:	andeq	r4, r1, ip, lsr #23
   14b70:	andeq	r3, r1, ip, ror #28
   14b74:	andeq	r3, r1, ip, ror #28
   14b78:	andeq	r3, r1, ip, ror #28
   14b7c:	andeq	r3, r1, ip, ror #28
   14b80:	andeq	r3, r1, ip, ror #28
   14b84:	andeq	r3, r1, ip, ror #28
   14b88:	andeq	r3, r1, ip, ror #28
   14b8c:	andeq	r3, r1, ip, ror #28
   14b90:	andeq	r3, r1, ip, ror #28
   14b94:	andeq	r3, r1, ip, ror #28
   14b98:	andeq	r3, r1, ip, ror #28
   14b9c:	andeq	r3, r1, ip, ror #28
   14ba0:	andeq	r4, r1, ip, lsr #23
   14ba4:	andeq	r4, r1, ip, lsr #23
   14ba8:	andeq	r4, r1, ip, lsr #23
   14bac:	ldr	r1, [sp, #44]	; 0x2c
   14bb0:	cmp	r1, #0
   14bb4:	bne	14e14 <__assert_fail@plt+0x3e10>
   14bb8:	cmp	sl, r4
   14bbc:	mov	r7, r3
   14bc0:	movhi	r1, #63	; 0x3f
   14bc4:	mov	r5, r2
   14bc8:	mov	r3, fp
   14bcc:	strbhi	r1, [r9, r4]
   14bd0:	add	r1, r4, #1
   14bd4:	cmp	sl, r1
   14bd8:	movhi	r0, #34	; 0x22
   14bdc:	strbhi	r0, [r9, r1]
   14be0:	add	r1, r4, #2
   14be4:	cmp	sl, r1
   14be8:	movhi	r0, #34	; 0x22
   14bec:	strbhi	r0, [r9, r1]
   14bf0:	add	r1, r4, #3
   14bf4:	add	r4, r4, #4
   14bf8:	cmp	sl, r1
   14bfc:	movhi	r0, #63	; 0x3f
   14c00:	strbhi	r0, [r9, r1]
   14c04:	b	13de8 <__assert_fail@plt+0x2de4>
   14c08:	mov	fp, r9
   14c0c:	b	13ec8 <__assert_fail@plt+0x2ec4>
   14c10:	ldr	r3, [sp, #188]	; 0xbc
   14c14:	ldrb	r3, [r3]
   14c18:	cmp	r3, #0
   14c1c:	beq	13558 <__assert_fail@plt+0x2554>
   14c20:	ldr	r2, [sp, #188]	; 0xbc
   14c24:	cmp	sl, r4
   14c28:	bls	14c48 <__assert_fail@plt+0x3c44>
   14c2c:	strb	r3, [fp, r4]
   14c30:	add	r4, r4, #1
   14c34:	ldrb	r3, [r2, #1]!
   14c38:	cmp	r3, #0
   14c3c:	beq	13558 <__assert_fail@plt+0x2554>
   14c40:	cmp	sl, r4
   14c44:	bhi	14c2c <__assert_fail@plt+0x3c28>
   14c48:	ldrb	r3, [r2, #1]!
   14c4c:	add	r4, r4, #1
   14c50:	cmp	r3, #0
   14c54:	bne	14c24 <__assert_fail@plt+0x3c20>
   14c58:	b	13558 <__assert_fail@plt+0x2554>
   14c5c:	add	r9, sp, #100	; 0x64
   14c60:	mov	r0, r5
   14c64:	ldr	r2, [sp, #60]	; 0x3c
   14c68:	mov	r6, #0
   14c6c:	ldm	r9, {r9, sl, fp}
   14c70:	ldr	r5, [sp, #112]	; 0x70
   14c74:	ldr	r4, [sp, #116]	; 0x74
   14c78:	b	14928 <__assert_fail@plt+0x3924>
   14c7c:	cmp	r4, r8
   14c80:	add	r9, sp, #100	; 0x64
   14c84:	mov	r1, r4
   14c88:	mov	r2, fp
   14c8c:	ldm	r9, {r9, sl, fp}
   14c90:	mov	r3, r5
   14c94:	mov	r0, r5
   14c98:	ldr	r5, [sp, #112]	; 0x70
   14c9c:	ldr	r4, [sp, #116]	; 0x74
   14ca0:	bcs	14cd4 <__assert_fail@plt+0x3cd0>
   14ca4:	ldrb	r6, [r2]
   14ca8:	cmp	r6, #0
   14cac:	bne	14cc0 <__assert_fail@plt+0x3cbc>
   14cb0:	b	14e0c <__assert_fail@plt+0x3e08>
   14cb4:	ldrb	r6, [r2, #1]!
   14cb8:	cmp	r6, #0
   14cbc:	beq	14da4 <__assert_fail@plt+0x3da0>
   14cc0:	add	r3, r3, #1
   14cc4:	add	r1, r7, r3
   14cc8:	cmp	r8, r1
   14ccc:	bhi	14cb4 <__assert_fail@plt+0x3cb0>
   14cd0:	mov	r0, r3
   14cd4:	mov	r6, #0
   14cd8:	ldr	r2, [sp, #60]	; 0x3c
   14cdc:	b	14928 <__assert_fail@plt+0x3924>
   14ce0:	mov	r3, #1
   14ce4:	mov	r4, #0
   14ce8:	mov	r9, r4
   14cec:	str	r3, [sp, #32]
   14cf0:	str	r3, [sp, #44]	; 0x2c
   14cf4:	str	r3, [sp, #48]	; 0x30
   14cf8:	str	r4, [sp, #52]	; 0x34
   14cfc:	str	r3, [sp, #56]	; 0x38
   14d00:	str	r3, [sp, #60]	; 0x3c
   14d04:	str	r3, [sp, #88]	; 0x58
   14d08:	movw	r3, #36280	; 0x8db8
   14d0c:	movt	r3, #1
   14d10:	str	r4, [sp, #64]	; 0x40
   14d14:	str	r4, [sp, #68]	; 0x44
   14d18:	str	r3, [sp, #72]	; 0x48
   14d1c:	str	r4, [sp, #80]	; 0x50
   14d20:	str	r4, [sp, #84]	; 0x54
   14d24:	b	135c0 <__assert_fail@plt+0x25bc>
   14d28:	mov	fp, r9
   14d2c:	b	13edc <__assert_fail@plt+0x2ed8>
   14d30:	ldr	r3, [sp, #48]	; 0x30
   14d34:	b	14850 <__assert_fail@plt+0x384c>
   14d38:	mov	r2, r3
   14d3c:	ldr	r3, [sp, #72]	; 0x48
   14d40:	cmp	r3, #0
   14d44:	moveq	r2, #0
   14d48:	andne	r2, r2, #1
   14d4c:	cmp	r2, #0
   14d50:	beq	14d80 <__assert_fail@plt+0x3d7c>
   14d54:	mov	r2, r3
   14d58:	ldrb	r3, [r3]
   14d5c:	cmp	r3, #0
   14d60:	beq	14d80 <__assert_fail@plt+0x3d7c>
   14d64:	cmp	sl, r4
   14d68:	bls	14d90 <__assert_fail@plt+0x3d8c>
   14d6c:	strb	r3, [fp, r4]
   14d70:	add	r4, r4, #1
   14d74:	ldrb	r3, [r2, #1]!
   14d78:	cmp	r3, #0
   14d7c:	bne	14d64 <__assert_fail@plt+0x3d60>
   14d80:	cmp	sl, r4
   14d84:	movhi	r3, #0
   14d88:	strbhi	r3, [fp, r4]
   14d8c:	b	13f18 <__assert_fail@plt+0x2f14>
   14d90:	ldrb	r3, [r2, #1]!
   14d94:	add	r4, r4, #1
   14d98:	cmp	r3, #0
   14d9c:	bne	14d64 <__assert_fail@plt+0x3d60>
   14da0:	b	14d80 <__assert_fail@plt+0x3d7c>
   14da4:	mov	r0, r3
   14da8:	ldr	r2, [sp, #60]	; 0x3c
   14dac:	b	14928 <__assert_fail@plt+0x3924>
   14db0:	mov	ip, #5
   14db4:	mov	r3, r8
   14db8:	ldr	r1, [sp, #84]	; 0x54
   14dbc:	str	ip, [sp]
   14dc0:	ldr	r2, [sp, #180]	; 0xb4
   14dc4:	ldr	ip, [sp, #188]	; 0xbc
   14dc8:	ldr	r0, [sp, #184]	; 0xb8
   14dcc:	str	r2, [sp, #4]
   14dd0:	ldr	r2, [sp, #28]
   14dd4:	str	ip, [sp, #12]
   14dd8:	ldr	ip, [sp, #192]	; 0xc0
   14ddc:	str	r0, [sp, #8]
   14de0:	mov	r0, fp
   14de4:	str	ip, [sp, #16]
   14de8:	bl	1349c <__assert_fail@plt+0x2498>
   14dec:	mov	r4, r0
   14df0:	b	13f18 <__assert_fail@plt+0x2f14>
   14df4:	mov	r6, r3
   14df8:	str	r3, [sp, #40]	; 0x28
   14dfc:	b	13e88 <__assert_fail@plt+0x2e84>
   14e00:	mov	r3, #2
   14e04:	str	r3, [sp, #176]	; 0xb0
   14e08:	b	13ec8 <__assert_fail@plt+0x2ec4>
   14e0c:	ldr	r2, [sp, #60]	; 0x3c
   14e10:	b	14928 <__assert_fail@plt+0x3924>
   14e14:	mov	r3, #5
   14e18:	mov	fp, r9
   14e1c:	str	r3, [sp, #176]	; 0xb0
   14e20:	b	13edc <__assert_fail@plt+0x2ed8>
   14e24:	mov	r1, #1
   14e28:	mov	r9, #0
   14e2c:	mov	r3, r9
   14e30:	mov	r2, r9
   14e34:	str	r1, [sp, #32]
   14e38:	str	sl, [sp, #84]	; 0x54
   14e3c:	b	13c64 <__assert_fail@plt+0x2c60>
   14e40:	mov	r3, #0
   14e44:	mov	r2, #1
   14e48:	mov	r9, r3
   14e4c:	mov	r4, r3
   14e50:	str	r2, [sp, #32]
   14e54:	strd	r2, [sp, #44]	; 0x2c
   14e58:	strd	r2, [sp, #56]	; 0x38
   14e5c:	str	r3, [sp, #80]	; 0x50
   14e60:	str	r3, [sp, #84]	; 0x54
   14e64:	str	r3, [sp, #88]	; 0x58
   14e68:	movw	r3, #36300	; 0x8dcc
   14e6c:	movt	r3, #1
   14e70:	str	r2, [sp, #52]	; 0x34
   14e74:	str	r2, [sp, #64]	; 0x40
   14e78:	str	r2, [sp, #68]	; 0x44
   14e7c:	str	r3, [sp, #72]	; 0x48
   14e80:	b	135c0 <__assert_fail@plt+0x25bc>
   14e84:	bl	10fec <abort@plt>
   14e88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e8c:	mov	r4, r0
   14e90:	mov	r5, r3
   14e94:	strd	r6, [sp, #8]
   14e98:	movw	r7, #41224	; 0xa108
   14e9c:	movt	r7, #2
   14ea0:	strd	r8, [sp, #16]
   14ea4:	strd	sl, [sp, #24]
   14ea8:	mov	sl, r1
   14eac:	mov	fp, r2
   14eb0:	str	lr, [sp, #32]
   14eb4:	sub	sp, sp, #60	; 0x3c
   14eb8:	bl	10ef0 <__errno_location@plt>
   14ebc:	mov	r8, r0
   14ec0:	cmn	r4, #-2147483647	; 0x80000001
   14ec4:	ldr	r6, [r7]
   14ec8:	movne	r0, #0
   14ecc:	moveq	r0, #1
   14ed0:	ldr	r3, [r8]
   14ed4:	orrs	r0, r0, r4, lsr #31
   14ed8:	str	r3, [sp, #28]
   14edc:	bne	1506c <__assert_fail@plt+0x4068>
   14ee0:	ldr	r3, [r7, #4]
   14ee4:	cmp	r3, r4
   14ee8:	bgt	14f48 <__assert_fail@plt+0x3f44>
   14eec:	add	r1, r7, #8
   14ef0:	sub	r2, r4, r3
   14ef4:	str	r3, [sp, #52]	; 0x34
   14ef8:	cmp	r6, r1
   14efc:	add	r2, r2, #1
   14f00:	beq	15044 <__assert_fail@plt+0x4040>
   14f04:	mov	r1, #8
   14f08:	mov	r0, r6
   14f0c:	mvn	r3, #-2147483648	; 0x80000000
   14f10:	str	r1, [sp]
   14f14:	add	r1, sp, #52	; 0x34
   14f18:	bl	177a8 <__assert_fail@plt+0x67a4>
   14f1c:	mov	r6, r0
   14f20:	str	r0, [r7]
   14f24:	ldr	r0, [r7, #4]
   14f28:	mov	r1, #0
   14f2c:	ldr	r2, [sp, #52]	; 0x34
   14f30:	sub	r2, r2, r0
   14f34:	add	r0, r6, r0, lsl #3
   14f38:	lsl	r2, r2, #3
   14f3c:	bl	10f08 <memset@plt>
   14f40:	ldr	r3, [sp, #52]	; 0x34
   14f44:	str	r3, [r7, #4]
   14f48:	ldr	r1, [r5, #4]
   14f4c:	add	r0, r6, r4, lsl #3
   14f50:	add	ip, r5, #8
   14f54:	mov	r3, fp
   14f58:	mov	r2, sl
   14f5c:	ldr	r7, [r0, #4]
   14f60:	str	r0, [sp, #36]	; 0x24
   14f64:	str	ip, [sp, #40]	; 0x28
   14f68:	orr	r0, r1, #1
   14f6c:	ldr	r9, [r6, r4, lsl #3]
   14f70:	str	ip, [sp, #8]
   14f74:	ldr	lr, [r5, #44]	; 0x2c
   14f78:	str	r0, [sp, #4]
   14f7c:	ldr	ip, [r5]
   14f80:	mov	r1, r9
   14f84:	str	ip, [sp, #32]
   14f88:	ldr	ip, [r5, #40]	; 0x28
   14f8c:	str	ip, [sp, #12]
   14f90:	ldr	ip, [sp, #32]
   14f94:	str	lr, [sp, #16]
   14f98:	str	r0, [sp, #44]	; 0x2c
   14f9c:	mov	r0, r7
   14fa0:	str	ip, [sp]
   14fa4:	bl	1349c <__assert_fail@plt+0x2498>
   14fa8:	cmp	r9, r0
   14fac:	bhi	1501c <__assert_fail@plt+0x4018>
   14fb0:	add	r9, r0, #1
   14fb4:	movw	r3, #41388	; 0xa1ac
   14fb8:	movt	r3, #2
   14fbc:	cmp	r7, r3
   14fc0:	str	r9, [r6, r4, lsl #3]
   14fc4:	beq	14fd0 <__assert_fail@plt+0x3fcc>
   14fc8:	mov	r0, r7
   14fcc:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   14fd0:	mov	r0, r9
   14fd4:	bl	17504 <__assert_fail@plt+0x6500>
   14fd8:	ldr	ip, [r5]
   14fdc:	mov	r3, fp
   14fe0:	mov	r2, sl
   14fe4:	mov	r1, r9
   14fe8:	mov	r7, r0
   14fec:	ldr	lr, [sp, #36]	; 0x24
   14ff0:	ldr	r4, [r5, #40]	; 0x28
   14ff4:	str	r0, [lr, #4]
   14ff8:	ldr	lr, [r5, #44]	; 0x2c
   14ffc:	str	ip, [sp]
   15000:	ldr	ip, [sp, #44]	; 0x2c
   15004:	str	ip, [sp, #4]
   15008:	ldr	ip, [sp, #40]	; 0x28
   1500c:	str	r4, [sp, #12]
   15010:	str	lr, [sp, #16]
   15014:	str	ip, [sp, #8]
   15018:	bl	1349c <__assert_fail@plt+0x2498>
   1501c:	ldr	r3, [sp, #28]
   15020:	mov	r0, r7
   15024:	str	r3, [r8]
   15028:	add	sp, sp, #60	; 0x3c
   1502c:	ldrd	r4, [sp]
   15030:	ldrd	r6, [sp, #8]
   15034:	ldrd	r8, [sp, #16]
   15038:	ldrd	sl, [sp, #24]
   1503c:	add	sp, sp, #32
   15040:	pop	{pc}		; (ldr pc, [sp], #4)
   15044:	mov	r1, #8
   15048:	mvn	r3, #-2147483648	; 0x80000000
   1504c:	str	r1, [sp]
   15050:	add	r1, sp, #52	; 0x34
   15054:	bl	177a8 <__assert_fail@plt+0x67a4>
   15058:	ldrd	r2, [r7, #8]
   1505c:	mov	r6, r0
   15060:	str	r0, [r7]
   15064:	strd	r2, [r0]
   15068:	b	14f24 <__assert_fail@plt+0x3f20>
   1506c:	bl	10fec <abort@plt>
   15070:	strd	r4, [sp, #-16]!
   15074:	mov	r5, r0
   15078:	str	r6, [sp, #8]
   1507c:	str	lr, [sp, #12]
   15080:	bl	10ef0 <__errno_location@plt>
   15084:	mov	r4, r0
   15088:	cmp	r5, #0
   1508c:	ldr	r0, [pc, #32]	; 150b4 <__assert_fail@plt+0x40b0>
   15090:	mov	r1, #48	; 0x30
   15094:	movne	r0, r5
   15098:	ldr	r6, [r4]
   1509c:	bl	17948 <__assert_fail@plt+0x6944>
   150a0:	str	r6, [r4]
   150a4:	ldrd	r4, [sp]
   150a8:	ldr	r6, [sp, #8]
   150ac:	add	sp, sp, #12
   150b0:	pop	{pc}		; (ldr pc, [sp], #4)
   150b4:	andeq	sl, r2, ip, lsr #5
   150b8:	ldr	r3, [pc, #12]	; 150cc <__assert_fail@plt+0x40c8>
   150bc:	cmp	r0, #0
   150c0:	moveq	r0, r3
   150c4:	ldr	r0, [r0]
   150c8:	bx	lr
   150cc:	andeq	sl, r2, ip, lsr #5
   150d0:	ldr	r3, [pc, #12]	; 150e4 <__assert_fail@plt+0x40e0>
   150d4:	cmp	r0, #0
   150d8:	moveq	r0, r3
   150dc:	str	r1, [r0]
   150e0:	bx	lr
   150e4:	andeq	sl, r2, ip, lsr #5
   150e8:	ldr	r3, [pc, #52]	; 15124 <__assert_fail@plt+0x4120>
   150ec:	cmp	r0, #0
   150f0:	push	{lr}		; (str lr, [sp, #-4]!)
   150f4:	lsr	lr, r1, #5
   150f8:	and	r1, r1, #31
   150fc:	moveq	r0, r3
   15100:	add	r3, r0, #8
   15104:	ldr	ip, [r3, lr, lsl #2]
   15108:	lsr	r0, ip, r1
   1510c:	eor	r2, r2, r0
   15110:	and	r0, r0, #1
   15114:	and	r2, r2, #1
   15118:	eor	r1, ip, r2, lsl r1
   1511c:	str	r1, [r3, lr, lsl #2]
   15120:	pop	{pc}		; (ldr pc, [sp], #4)
   15124:	andeq	sl, r2, ip, lsr #5
   15128:	ldr	r3, [pc, #16]	; 15140 <__assert_fail@plt+0x413c>
   1512c:	cmp	r0, #0
   15130:	movne	r3, r0
   15134:	ldr	r0, [r3, #4]
   15138:	str	r1, [r3, #4]
   1513c:	bx	lr
   15140:	andeq	sl, r2, ip, lsr #5
   15144:	ldr	r3, [pc, #48]	; 1517c <__assert_fail@plt+0x4178>
   15148:	cmp	r0, #0
   1514c:	mov	ip, #10
   15150:	moveq	r0, r3
   15154:	cmp	r2, #0
   15158:	cmpne	r1, #0
   1515c:	str	ip, [r0]
   15160:	beq	15170 <__assert_fail@plt+0x416c>
   15164:	str	r1, [r0, #40]	; 0x28
   15168:	str	r2, [r0, #44]	; 0x2c
   1516c:	bx	lr
   15170:	str	r4, [sp, #-8]!
   15174:	str	lr, [sp, #4]
   15178:	bl	10fec <abort@plt>
   1517c:	andeq	sl, r2, ip, lsr #5
   15180:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15184:	strd	r6, [sp, #8]
   15188:	mov	r7, r0
   1518c:	mov	r6, r1
   15190:	strd	r8, [sp, #16]
   15194:	mov	r8, r2
   15198:	mov	r9, r3
   1519c:	str	lr, [sp, #24]
   151a0:	sub	sp, sp, #28
   151a4:	ldr	r4, [sp, #56]	; 0x38
   151a8:	ldr	ip, [pc, #104]	; 15218 <__assert_fail@plt+0x4214>
   151ac:	cmp	r4, #0
   151b0:	moveq	r4, ip
   151b4:	bl	10ef0 <__errno_location@plt>
   151b8:	ldr	ip, [r4, #44]	; 0x2c
   151bc:	mov	r5, r0
   151c0:	mov	r1, r6
   151c4:	add	lr, r4, #8
   151c8:	mov	r3, r9
   151cc:	ldr	r6, [r5]
   151d0:	mov	r2, r8
   151d4:	mov	r0, r7
   151d8:	str	ip, [sp, #16]
   151dc:	ldr	ip, [r4, #40]	; 0x28
   151e0:	str	lr, [sp, #8]
   151e4:	str	ip, [sp, #12]
   151e8:	ldr	ip, [r4, #4]
   151ec:	str	ip, [sp, #4]
   151f0:	ldr	ip, [r4]
   151f4:	str	ip, [sp]
   151f8:	bl	1349c <__assert_fail@plt+0x2498>
   151fc:	str	r6, [r5]
   15200:	add	sp, sp, #28
   15204:	ldrd	r4, [sp]
   15208:	ldrd	r6, [sp, #8]
   1520c:	ldrd	r8, [sp, #16]
   15210:	add	sp, sp, #24
   15214:	pop	{pc}		; (ldr pc, [sp], #4)
   15218:	andeq	sl, r2, ip, lsr #5
   1521c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15220:	cmp	r2, #0
   15224:	ldr	r4, [pc, #192]	; 152ec <__assert_fail@plt+0x42e8>
   15228:	movne	r4, r2
   1522c:	strd	r6, [sp, #8]
   15230:	strd	r8, [sp, #16]
   15234:	mov	r9, r1
   15238:	mov	r8, r0
   1523c:	strd	sl, [sp, #24]
   15240:	str	lr, [sp, #32]
   15244:	sub	sp, sp, #36	; 0x24
   15248:	bl	10ef0 <__errno_location@plt>
   1524c:	ldr	r5, [r4, #4]
   15250:	mov	r6, r0
   15254:	add	r7, r4, #8
   15258:	mov	r1, #0
   1525c:	mov	r3, r9
   15260:	ldr	ip, [r4, #44]	; 0x2c
   15264:	mov	r2, r8
   15268:	mov	r0, r1
   1526c:	ldr	sl, [r6]
   15270:	orr	r5, r5, #1
   15274:	str	ip, [sp, #16]
   15278:	ldr	ip, [r4, #40]	; 0x28
   1527c:	stmib	sp, {r5, r7, ip}
   15280:	ldr	ip, [r4]
   15284:	str	ip, [sp]
   15288:	bl	1349c <__assert_fail@plt+0x2498>
   1528c:	add	r1, r0, #1
   15290:	mov	r0, r1
   15294:	str	r1, [sp, #28]
   15298:	bl	17504 <__assert_fail@plt+0x6500>
   1529c:	ldr	ip, [r4, #44]	; 0x2c
   152a0:	mov	fp, r0
   152a4:	mov	r3, r9
   152a8:	mov	r2, r8
   152ac:	ldr	r1, [sp, #28]
   152b0:	str	ip, [sp, #16]
   152b4:	ldr	ip, [r4, #40]	; 0x28
   152b8:	stmib	sp, {r5, r7, ip}
   152bc:	ldr	ip, [r4]
   152c0:	str	ip, [sp]
   152c4:	bl	1349c <__assert_fail@plt+0x2498>
   152c8:	mov	r0, fp
   152cc:	str	sl, [r6]
   152d0:	add	sp, sp, #36	; 0x24
   152d4:	ldrd	r4, [sp]
   152d8:	ldrd	r6, [sp, #8]
   152dc:	ldrd	r8, [sp, #16]
   152e0:	ldrd	sl, [sp, #24]
   152e4:	add	sp, sp, #32
   152e8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ec:	andeq	sl, r2, ip, lsr #5
   152f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   152f4:	cmp	r3, #0
   152f8:	ldr	r4, [pc, #220]	; 153dc <__assert_fail@plt+0x43d8>
   152fc:	movne	r4, r3
   15300:	strd	r6, [sp, #8]
   15304:	mov	r6, r2
   15308:	strd	r8, [sp, #16]
   1530c:	mov	r9, r0
   15310:	strd	sl, [sp, #24]
   15314:	mov	sl, r1
   15318:	str	lr, [sp, #32]
   1531c:	sub	sp, sp, #44	; 0x2c
   15320:	bl	10ef0 <__errno_location@plt>
   15324:	ldr	r5, [r4, #4]
   15328:	mov	r7, r0
   1532c:	mov	r1, #0
   15330:	add	r8, r4, #8
   15334:	mov	r3, sl
   15338:	ldr	ip, [r4, #44]	; 0x2c
   1533c:	mov	r2, r9
   15340:	mov	r0, r1
   15344:	ldr	lr, [r7]
   15348:	cmp	r6, r1
   1534c:	orreq	r5, r5, #1
   15350:	str	ip, [sp, #16]
   15354:	ldr	ip, [r4, #40]	; 0x28
   15358:	stmib	sp, {r5, r8, ip}
   1535c:	ldr	ip, [r4]
   15360:	str	lr, [sp, #28]
   15364:	str	ip, [sp]
   15368:	bl	1349c <__assert_fail@plt+0x2498>
   1536c:	add	r1, r0, #1
   15370:	mov	fp, r0
   15374:	mov	r0, r1
   15378:	str	r1, [sp, #36]	; 0x24
   1537c:	bl	17504 <__assert_fail@plt+0x6500>
   15380:	ldr	ip, [r4, #44]	; 0x2c
   15384:	mov	r3, sl
   15388:	mov	r2, r9
   1538c:	ldr	r1, [sp, #36]	; 0x24
   15390:	str	ip, [sp, #16]
   15394:	ldr	ip, [r4, #40]	; 0x28
   15398:	str	r0, [sp, #32]
   1539c:	stmib	sp, {r5, r8, ip}
   153a0:	ldr	ip, [r4]
   153a4:	str	ip, [sp]
   153a8:	bl	1349c <__assert_fail@plt+0x2498>
   153ac:	ldr	lr, [sp, #28]
   153b0:	cmp	r6, #0
   153b4:	ldr	r0, [sp, #32]
   153b8:	str	lr, [r7]
   153bc:	strne	fp, [r6]
   153c0:	add	sp, sp, #44	; 0x2c
   153c4:	ldrd	r4, [sp]
   153c8:	ldrd	r6, [sp, #8]
   153cc:	ldrd	r8, [sp, #16]
   153d0:	ldrd	sl, [sp, #24]
   153d4:	add	sp, sp, #32
   153d8:	pop	{pc}		; (ldr pc, [sp], #4)
   153dc:	andeq	sl, r2, ip, lsr #5
   153e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   153e4:	movw	r5, #41224	; 0xa108
   153e8:	movt	r5, #2
   153ec:	ldr	r3, [r5, #4]
   153f0:	strd	r6, [sp, #8]
   153f4:	str	r8, [sp, #16]
   153f8:	str	lr, [sp, #20]
   153fc:	ldr	r7, [r5]
   15400:	cmp	r3, #1
   15404:	ble	15428 <__assert_fail@plt+0x4424>
   15408:	mov	r4, #1
   1540c:	add	r6, r7, #4
   15410:	ldr	r0, [r6, r4, lsl #3]
   15414:	add	r4, r4, #1
   15418:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   1541c:	ldr	r3, [r5, #4]
   15420:	cmp	r3, r4
   15424:	bgt	15410 <__assert_fail@plt+0x440c>
   15428:	ldr	r0, [r7, #4]
   1542c:	movw	r4, #41388	; 0xa1ac
   15430:	movt	r4, #2
   15434:	cmp	r0, r4
   15438:	beq	1544c <__assert_fail@plt+0x4448>
   1543c:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15440:	mov	r3, #256	; 0x100
   15444:	str	r3, [r5, #8]
   15448:	str	r4, [r5, #12]
   1544c:	ldr	r4, [pc, #44]	; 15480 <__assert_fail@plt+0x447c>
   15450:	cmp	r7, r4
   15454:	beq	15464 <__assert_fail@plt+0x4460>
   15458:	mov	r0, r7
   1545c:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15460:	str	r4, [r5]
   15464:	mov	r3, #1
   15468:	ldrd	r6, [sp, #8]
   1546c:	str	r3, [r5, #4]
   15470:	ldrd	r4, [sp]
   15474:	ldr	r8, [sp, #16]
   15478:	add	sp, sp, #20
   1547c:	pop	{pc}		; (ldr pc, [sp], #4)
   15480:	andeq	sl, r2, r0, lsl r1
   15484:	ldr	r3, [pc, #4]	; 15490 <__assert_fail@plt+0x448c>
   15488:	mvn	r2, #0
   1548c:	b	14e88 <__assert_fail@plt+0x3e84>
   15490:	andeq	sl, r2, ip, lsr #5
   15494:	ldr	r3, [pc]	; 1549c <__assert_fail@plt+0x4498>
   15498:	b	14e88 <__assert_fail@plt+0x3e84>
   1549c:	andeq	sl, r2, ip, lsr #5
   154a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   154a4:	movw	r4, #41224	; 0xa108
   154a8:	movt	r4, #2
   154ac:	strd	r6, [sp, #8]
   154b0:	strd	r8, [sp, #16]
   154b4:	strd	sl, [sp, #24]
   154b8:	mov	sl, r0
   154bc:	str	lr, [sp, #32]
   154c0:	sub	sp, sp, #44	; 0x2c
   154c4:	bl	10ef0 <__errno_location@plt>
   154c8:	ldr	r3, [r0]
   154cc:	mov	r8, r0
   154d0:	ldr	r2, [r4, #4]
   154d4:	ldr	r5, [r4]
   154d8:	str	r3, [sp, #28]
   154dc:	cmp	r2, #0
   154e0:	bgt	1553c <__assert_fail@plt+0x4538>
   154e4:	add	r3, r4, #8
   154e8:	str	r2, [sp, #36]	; 0x24
   154ec:	rsb	r2, r2, #1
   154f0:	cmp	r5, r3
   154f4:	beq	15608 <__assert_fail@plt+0x4604>
   154f8:	mov	r1, #8
   154fc:	mov	r0, r5
   15500:	mvn	r3, #-2147483648	; 0x80000000
   15504:	str	r1, [sp]
   15508:	add	r1, sp, #36	; 0x24
   1550c:	bl	177a8 <__assert_fail@plt+0x67a4>
   15510:	mov	r5, r0
   15514:	str	r0, [r4]
   15518:	ldr	r0, [r4, #4]
   1551c:	mov	r1, #0
   15520:	ldr	r2, [sp, #36]	; 0x24
   15524:	sub	r2, r2, r0
   15528:	add	r0, r5, r0, lsl #3
   1552c:	lsl	r2, r2, #3
   15530:	bl	10f08 <memset@plt>
   15534:	ldr	r3, [sp, #36]	; 0x24
   15538:	str	r3, [r4, #4]
   1553c:	movw	r4, #41388	; 0xa1ac
   15540:	movt	r4, #2
   15544:	ldr	r9, [r5]
   15548:	add	fp, r4, #264	; 0x108
   1554c:	mvn	r3, #0
   15550:	ldr	r7, [r4, #260]	; 0x104
   15554:	mov	r2, sl
   15558:	ldr	r6, [r5, #4]
   1555c:	str	fp, [sp, #8]
   15560:	mov	r1, r9
   15564:	ldr	ip, [r4, #256]	; 0x100
   15568:	orr	r7, r7, #1
   1556c:	ldr	lr, [r4, #300]	; 0x12c
   15570:	mov	r0, r6
   15574:	str	ip, [sp]
   15578:	str	r7, [sp, #4]
   1557c:	str	lr, [sp, #16]
   15580:	ldr	ip, [r4, #296]	; 0x128
   15584:	str	ip, [sp, #12]
   15588:	bl	1349c <__assert_fail@plt+0x2498>
   1558c:	cmp	r9, r0
   15590:	bhi	155e0 <__assert_fail@plt+0x45dc>
   15594:	add	r9, r0, #1
   15598:	cmp	r6, r4
   1559c:	str	r9, [r5]
   155a0:	beq	155ac <__assert_fail@plt+0x45a8>
   155a4:	mov	r0, r6
   155a8:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   155ac:	mov	r0, r9
   155b0:	bl	17504 <__assert_fail@plt+0x6500>
   155b4:	ldr	r3, [r4, #256]	; 0x100
   155b8:	mov	r2, sl
   155bc:	mov	r1, r9
   155c0:	mov	r6, r0
   155c4:	ldr	lr, [r4, #296]	; 0x128
   155c8:	ldr	ip, [r4, #300]	; 0x12c
   155cc:	str	r0, [r5, #4]
   155d0:	stm	sp, {r3, r7, fp, lr}
   155d4:	mvn	r3, #0
   155d8:	str	ip, [sp, #16]
   155dc:	bl	1349c <__assert_fail@plt+0x2498>
   155e0:	ldr	r3, [sp, #28]
   155e4:	mov	r0, r6
   155e8:	str	r3, [r8]
   155ec:	add	sp, sp, #44	; 0x2c
   155f0:	ldrd	r4, [sp]
   155f4:	ldrd	r6, [sp, #8]
   155f8:	ldrd	r8, [sp, #16]
   155fc:	ldrd	sl, [sp, #24]
   15600:	add	sp, sp, #32
   15604:	pop	{pc}		; (ldr pc, [sp], #4)
   15608:	mov	r0, #8
   1560c:	mvn	r3, #-2147483648	; 0x80000000
   15610:	add	r1, sp, #36	; 0x24
   15614:	str	r0, [sp]
   15618:	mov	r0, #0
   1561c:	bl	177a8 <__assert_fail@plt+0x67a4>
   15620:	ldrd	r2, [r4, #8]
   15624:	mov	r5, r0
   15628:	str	r0, [r4]
   1562c:	strd	r2, [r0]
   15630:	b	15518 <__assert_fail@plt+0x4514>
   15634:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15638:	movw	r4, #41224	; 0xa108
   1563c:	movt	r4, #2
   15640:	strd	r6, [sp, #8]
   15644:	strd	r8, [sp, #16]
   15648:	strd	sl, [sp, #24]
   1564c:	mov	sl, r0
   15650:	mov	fp, r1
   15654:	str	lr, [sp, #32]
   15658:	sub	sp, sp, #44	; 0x2c
   1565c:	bl	10ef0 <__errno_location@plt>
   15660:	ldr	r3, [r0]
   15664:	mov	r8, r0
   15668:	ldr	r2, [r4, #4]
   1566c:	ldr	r5, [r4]
   15670:	str	r3, [sp, #28]
   15674:	cmp	r2, #0
   15678:	bgt	156d4 <__assert_fail@plt+0x46d0>
   1567c:	add	r3, r4, #8
   15680:	str	r2, [sp, #36]	; 0x24
   15684:	rsb	r2, r2, #1
   15688:	cmp	r5, r3
   1568c:	beq	157b0 <__assert_fail@plt+0x47ac>
   15690:	mov	r1, #8
   15694:	mov	r0, r5
   15698:	mvn	r3, #-2147483648	; 0x80000000
   1569c:	str	r1, [sp]
   156a0:	add	r1, sp, #36	; 0x24
   156a4:	bl	177a8 <__assert_fail@plt+0x67a4>
   156a8:	mov	r5, r0
   156ac:	str	r0, [r4]
   156b0:	ldr	r0, [r4, #4]
   156b4:	mov	r1, #0
   156b8:	ldr	r2, [sp, #36]	; 0x24
   156bc:	sub	r2, r2, r0
   156c0:	add	r0, r5, r0, lsl #3
   156c4:	lsl	r2, r2, #3
   156c8:	bl	10f08 <memset@plt>
   156cc:	ldr	r3, [sp, #36]	; 0x24
   156d0:	str	r3, [r4, #4]
   156d4:	movw	r4, #41388	; 0xa1ac
   156d8:	movt	r4, #2
   156dc:	ldr	r9, [r5]
   156e0:	add	r0, r4, #264	; 0x108
   156e4:	mov	r3, fp
   156e8:	ldr	r7, [r4, #260]	; 0x104
   156ec:	mov	r2, sl
   156f0:	ldr	r6, [r5, #4]
   156f4:	str	r0, [sp, #8]
   156f8:	mov	r1, r9
   156fc:	ldr	ip, [r4, #256]	; 0x100
   15700:	orr	r7, r7, #1
   15704:	ldr	lr, [r4, #300]	; 0x12c
   15708:	mov	r0, r6
   1570c:	str	ip, [sp]
   15710:	str	r7, [sp, #4]
   15714:	str	lr, [sp, #16]
   15718:	ldr	ip, [r4, #296]	; 0x128
   1571c:	str	ip, [sp, #12]
   15720:	bl	1349c <__assert_fail@plt+0x2498>
   15724:	cmp	r9, r0
   15728:	bhi	15788 <__assert_fail@plt+0x4784>
   1572c:	add	r9, r0, #1
   15730:	cmp	r6, r4
   15734:	str	r9, [r5]
   15738:	beq	15744 <__assert_fail@plt+0x4740>
   1573c:	mov	r0, r6
   15740:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15744:	mov	r0, r9
   15748:	bl	17504 <__assert_fail@plt+0x6500>
   1574c:	ldr	ip, [r4, #256]	; 0x100
   15750:	mov	r1, r9
   15754:	mov	r3, fp
   15758:	mov	r2, sl
   1575c:	mov	r6, r0
   15760:	ldr	r9, [r4, #296]	; 0x128
   15764:	ldr	lr, [r4, #300]	; 0x12c
   15768:	str	r0, [r5, #4]
   1576c:	str	ip, [sp]
   15770:	ldr	ip, [pc, #100]	; 157dc <__assert_fail@plt+0x47d8>
   15774:	str	r7, [sp, #4]
   15778:	str	ip, [sp, #8]
   1577c:	str	r9, [sp, #12]
   15780:	str	lr, [sp, #16]
   15784:	bl	1349c <__assert_fail@plt+0x2498>
   15788:	ldr	r3, [sp, #28]
   1578c:	mov	r0, r6
   15790:	str	r3, [r8]
   15794:	add	sp, sp, #44	; 0x2c
   15798:	ldrd	r4, [sp]
   1579c:	ldrd	r6, [sp, #8]
   157a0:	ldrd	r8, [sp, #16]
   157a4:	ldrd	sl, [sp, #24]
   157a8:	add	sp, sp, #32
   157ac:	pop	{pc}		; (ldr pc, [sp], #4)
   157b0:	mov	r0, #8
   157b4:	mvn	r3, #-2147483648	; 0x80000000
   157b8:	add	r1, sp, #36	; 0x24
   157bc:	str	r0, [sp]
   157c0:	mov	r0, #0
   157c4:	bl	177a8 <__assert_fail@plt+0x67a4>
   157c8:	ldrd	r2, [r4, #8]
   157cc:	mov	r5, r0
   157d0:	str	r0, [r4]
   157d4:	strd	r2, [r0]
   157d8:	b	156b0 <__assert_fail@plt+0x46ac>
   157dc:			; <UNDEFINED> instruction: 0x0002a2b4
   157e0:	strd	r4, [sp, #-20]!	; 0xffffffec
   157e4:	mov	r4, #0
   157e8:	mov	r5, #0
   157ec:	strd	r6, [sp, #8]
   157f0:	cmp	r1, #10
   157f4:	str	lr, [sp, #16]
   157f8:	sub	sp, sp, #100	; 0x64
   157fc:	strd	r4, [sp, #48]	; 0x30
   15800:	beq	15848 <__assert_fail@plt+0x4844>
   15804:	mov	r3, sp
   15808:	strd	r4, [sp, #8]
   1580c:	str	r1, [sp, #48]	; 0x30
   15810:	mov	r1, r2
   15814:	mvn	r2, #0
   15818:	ldrd	r6, [sp, #48]	; 0x30
   1581c:	strd	r6, [sp]
   15820:	strd	r4, [sp, #16]
   15824:	strd	r4, [sp, #24]
   15828:	strd	r4, [sp, #32]
   1582c:	strd	r4, [sp, #40]	; 0x28
   15830:	bl	14e88 <__assert_fail@plt+0x3e84>
   15834:	add	sp, sp, #100	; 0x64
   15838:	ldrd	r4, [sp]
   1583c:	ldrd	r6, [sp, #8]
   15840:	add	sp, sp, #16
   15844:	pop	{pc}		; (ldr pc, [sp], #4)
   15848:	bl	10fec <abort@plt>
   1584c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15850:	mov	r4, #0
   15854:	mov	r5, #0
   15858:	strd	r6, [sp, #8]
   1585c:	cmp	r1, #10
   15860:	str	lr, [sp, #16]
   15864:	sub	sp, sp, #100	; 0x64
   15868:	strd	r4, [sp, #48]	; 0x30
   1586c:	beq	158b8 <__assert_fail@plt+0x48b4>
   15870:	mov	ip, r2
   15874:	mov	r2, r3
   15878:	strd	r4, [sp, #8]
   1587c:	str	r1, [sp, #48]	; 0x30
   15880:	mov	r3, sp
   15884:	mov	r1, ip
   15888:	ldrd	r6, [sp, #48]	; 0x30
   1588c:	strd	r6, [sp]
   15890:	strd	r4, [sp, #16]
   15894:	strd	r4, [sp, #24]
   15898:	strd	r4, [sp, #32]
   1589c:	strd	r4, [sp, #40]	; 0x28
   158a0:	bl	14e88 <__assert_fail@plt+0x3e84>
   158a4:	add	sp, sp, #100	; 0x64
   158a8:	ldrd	r4, [sp]
   158ac:	ldrd	r6, [sp, #8]
   158b0:	add	sp, sp, #16
   158b4:	pop	{pc}		; (ldr pc, [sp], #4)
   158b8:	bl	10fec <abort@plt>
   158bc:	mov	r2, #0
   158c0:	mov	r3, #0
   158c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158c8:	strd	r6, [sp, #8]
   158cc:	cmp	r0, #10
   158d0:	strd	r8, [sp, #16]
   158d4:	strd	sl, [sp, #24]
   158d8:	str	lr, [sp, #32]
   158dc:	sub	sp, sp, #124	; 0x7c
   158e0:	strd	r2, [sp, #72]	; 0x48
   158e4:	strd	r2, [sp, #80]	; 0x50
   158e8:	strd	r2, [sp, #88]	; 0x58
   158ec:	strd	r2, [sp, #96]	; 0x60
   158f0:	strd	r2, [sp, #104]	; 0x68
   158f4:	strd	r2, [sp, #112]	; 0x70
   158f8:	beq	15a9c <__assert_fail@plt+0x4a98>
   158fc:	mov	r6, r1
   15900:	movw	r4, #41224	; 0xa108
   15904:	movt	r4, #2
   15908:	str	r0, [sp, #72]	; 0x48
   1590c:	ldrd	r0, [sp, #72]	; 0x48
   15910:	strd	r0, [sp, #24]
   15914:	strd	r2, [sp, #32]
   15918:	strd	r2, [sp, #40]	; 0x28
   1591c:	strd	r2, [sp, #48]	; 0x30
   15920:	strd	r2, [sp, #56]	; 0x38
   15924:	strd	r2, [sp, #64]	; 0x40
   15928:	bl	10ef0 <__errno_location@plt>
   1592c:	mov	r8, r0
   15930:	ldr	r5, [r4]
   15934:	ldr	r2, [r4, #4]
   15938:	ldr	r9, [r0]
   1593c:	cmp	r2, #0
   15940:	bgt	1599c <__assert_fail@plt+0x4998>
   15944:	add	r3, r4, #8
   15948:	str	r2, [sp, #72]	; 0x48
   1594c:	rsb	r2, r2, #1
   15950:	cmp	r5, r3
   15954:	beq	15a70 <__assert_fail@plt+0x4a6c>
   15958:	mov	r3, #8
   1595c:	mov	r0, r5
   15960:	add	r1, sp, #72	; 0x48
   15964:	str	r3, [sp]
   15968:	mvn	r3, #-2147483648	; 0x80000000
   1596c:	bl	177a8 <__assert_fail@plt+0x67a4>
   15970:	mov	r5, r0
   15974:	str	r0, [r4]
   15978:	ldr	r0, [r4, #4]
   1597c:	mov	r1, #0
   15980:	ldr	r2, [sp, #72]	; 0x48
   15984:	sub	r2, r2, r0
   15988:	add	r0, r5, r0, lsl #3
   1598c:	lsl	r2, r2, #3
   15990:	bl	10f08 <memset@plt>
   15994:	ldr	r3, [sp, #72]	; 0x48
   15998:	str	r3, [r4, #4]
   1599c:	ldr	sl, [r5]
   159a0:	add	r0, sp, #32
   159a4:	mvn	r3, #0
   159a8:	mov	r2, r6
   159ac:	ldr	r7, [sp, #28]
   159b0:	ldr	r4, [r5, #4]
   159b4:	mov	r1, sl
   159b8:	str	r0, [sp, #8]
   159bc:	ldr	lr, [sp, #24]
   159c0:	orr	r7, r7, #1
   159c4:	ldr	ip, [sp, #64]	; 0x40
   159c8:	mov	r0, r4
   159cc:	ldr	fp, [sp, #68]	; 0x44
   159d0:	str	lr, [sp]
   159d4:	str	r7, [sp, #4]
   159d8:	str	ip, [sp, #12]
   159dc:	str	fp, [sp, #16]
   159e0:	bl	1349c <__assert_fail@plt+0x2498>
   159e4:	cmp	sl, r0
   159e8:	bhi	15a4c <__assert_fail@plt+0x4a48>
   159ec:	add	sl, r0, #1
   159f0:	movw	r3, #41388	; 0xa1ac
   159f4:	movt	r3, #2
   159f8:	cmp	r4, r3
   159fc:	str	sl, [r5]
   15a00:	beq	15a0c <__assert_fail@plt+0x4a08>
   15a04:	mov	r0, r4
   15a08:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15a0c:	mov	r0, sl
   15a10:	bl	17504 <__assert_fail@plt+0x6500>
   15a14:	ldr	r3, [sp, #24]
   15a18:	mov	r2, r6
   15a1c:	mov	r1, sl
   15a20:	mov	r4, r0
   15a24:	ldr	lr, [sp, #64]	; 0x40
   15a28:	ldr	ip, [sp, #68]	; 0x44
   15a2c:	str	r0, [r5, #4]
   15a30:	add	r5, sp, #32
   15a34:	stm	sp, {r3, r7}
   15a38:	mvn	r3, #0
   15a3c:	str	r5, [sp, #8]
   15a40:	str	lr, [sp, #12]
   15a44:	str	ip, [sp, #16]
   15a48:	bl	1349c <__assert_fail@plt+0x2498>
   15a4c:	mov	r0, r4
   15a50:	str	r9, [r8]
   15a54:	add	sp, sp, #124	; 0x7c
   15a58:	ldrd	r4, [sp]
   15a5c:	ldrd	r6, [sp, #8]
   15a60:	ldrd	r8, [sp, #16]
   15a64:	ldrd	sl, [sp, #24]
   15a68:	add	sp, sp, #32
   15a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a70:	mov	r0, #8
   15a74:	mvn	r3, #-2147483648	; 0x80000000
   15a78:	add	r1, sp, #72	; 0x48
   15a7c:	str	r0, [sp]
   15a80:	mov	r0, #0
   15a84:	bl	177a8 <__assert_fail@plt+0x67a4>
   15a88:	ldrd	r2, [r4, #8]
   15a8c:	mov	r5, r0
   15a90:	str	r0, [r4]
   15a94:	strd	r2, [r0]
   15a98:	b	15978 <__assert_fail@plt+0x4974>
   15a9c:	bl	10fec <abort@plt>
   15aa0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15aa4:	cmp	r0, #10
   15aa8:	strd	r6, [sp, #8]
   15aac:	mov	r6, #0
   15ab0:	mov	r7, #0
   15ab4:	strd	r8, [sp, #16]
   15ab8:	strd	sl, [sp, #24]
   15abc:	str	lr, [sp, #32]
   15ac0:	sub	sp, sp, #124	; 0x7c
   15ac4:	strd	r6, [sp, #72]	; 0x48
   15ac8:	strd	r6, [sp, #80]	; 0x50
   15acc:	strd	r6, [sp, #88]	; 0x58
   15ad0:	strd	r6, [sp, #96]	; 0x60
   15ad4:	strd	r6, [sp, #104]	; 0x68
   15ad8:	strd	r6, [sp, #112]	; 0x70
   15adc:	beq	15c88 <__assert_fail@plt+0x4c84>
   15ae0:	mov	sl, r2
   15ae4:	movw	r5, #41224	; 0xa108
   15ae8:	movt	r5, #2
   15aec:	str	r0, [sp, #72]	; 0x48
   15af0:	mov	r9, r1
   15af4:	ldrd	r2, [sp, #72]	; 0x48
   15af8:	strd	r2, [sp, #24]
   15afc:	strd	r6, [sp, #32]
   15b00:	strd	r6, [sp, #40]	; 0x28
   15b04:	strd	r6, [sp, #48]	; 0x30
   15b08:	strd	r6, [sp, #56]	; 0x38
   15b0c:	strd	r6, [sp, #64]	; 0x40
   15b10:	bl	10ef0 <__errno_location@plt>
   15b14:	mov	r7, r0
   15b18:	ldr	r4, [r5]
   15b1c:	ldr	r2, [r5, #4]
   15b20:	ldr	fp, [r0]
   15b24:	cmp	r2, #0
   15b28:	bgt	15b84 <__assert_fail@plt+0x4b80>
   15b2c:	add	r3, r5, #8
   15b30:	str	r2, [sp, #72]	; 0x48
   15b34:	rsb	r2, r2, #1
   15b38:	cmp	r4, r3
   15b3c:	beq	15c5c <__assert_fail@plt+0x4c58>
   15b40:	mov	r3, #8
   15b44:	mov	r0, r4
   15b48:	add	r1, sp, #72	; 0x48
   15b4c:	str	r3, [sp]
   15b50:	mvn	r3, #-2147483648	; 0x80000000
   15b54:	bl	177a8 <__assert_fail@plt+0x67a4>
   15b58:	mov	r4, r0
   15b5c:	str	r0, [r5]
   15b60:	ldr	r0, [r5, #4]
   15b64:	mov	r1, #0
   15b68:	ldr	r2, [sp, #72]	; 0x48
   15b6c:	sub	r2, r2, r0
   15b70:	add	r0, r4, r0, lsl #3
   15b74:	lsl	r2, r2, #3
   15b78:	bl	10f08 <memset@plt>
   15b7c:	ldr	r3, [sp, #72]	; 0x48
   15b80:	str	r3, [r5, #4]
   15b84:	ldr	ip, [sp, #24]
   15b88:	add	r0, sp, #32
   15b8c:	mov	r3, sl
   15b90:	mov	r2, r9
   15b94:	ldr	r6, [sp, #28]
   15b98:	ldr	r8, [r4]
   15b9c:	ldr	r5, [r4, #4]
   15ba0:	str	ip, [sp]
   15ba4:	orr	r6, r6, #1
   15ba8:	ldr	ip, [sp, #64]	; 0x40
   15bac:	mov	r1, r8
   15bb0:	str	r6, [sp, #4]
   15bb4:	ldr	lr, [sp, #68]	; 0x44
   15bb8:	str	r0, [sp, #8]
   15bbc:	mov	r0, r5
   15bc0:	str	ip, [sp, #12]
   15bc4:	str	lr, [sp, #16]
   15bc8:	bl	1349c <__assert_fail@plt+0x2498>
   15bcc:	cmp	r8, r0
   15bd0:	bhi	15c38 <__assert_fail@plt+0x4c34>
   15bd4:	add	r8, r0, #1
   15bd8:	movw	r3, #41388	; 0xa1ac
   15bdc:	movt	r3, #2
   15be0:	cmp	r5, r3
   15be4:	str	r8, [r4]
   15be8:	beq	15bf4 <__assert_fail@plt+0x4bf0>
   15bec:	mov	r0, r5
   15bf0:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15bf4:	mov	r0, r8
   15bf8:	bl	17504 <__assert_fail@plt+0x6500>
   15bfc:	ldr	lr, [sp, #24]
   15c00:	mov	r1, r8
   15c04:	mov	r3, sl
   15c08:	mov	r2, r9
   15c0c:	mov	r5, r0
   15c10:	ldr	r8, [sp, #64]	; 0x40
   15c14:	ldr	ip, [sp, #68]	; 0x44
   15c18:	str	r0, [r4, #4]
   15c1c:	str	lr, [sp]
   15c20:	add	lr, sp, #32
   15c24:	str	r6, [sp, #4]
   15c28:	str	lr, [sp, #8]
   15c2c:	str	r8, [sp, #12]
   15c30:	str	ip, [sp, #16]
   15c34:	bl	1349c <__assert_fail@plt+0x2498>
   15c38:	mov	r0, r5
   15c3c:	str	fp, [r7]
   15c40:	add	sp, sp, #124	; 0x7c
   15c44:	ldrd	r4, [sp]
   15c48:	ldrd	r6, [sp, #8]
   15c4c:	ldrd	r8, [sp, #16]
   15c50:	ldrd	sl, [sp, #24]
   15c54:	add	sp, sp, #32
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:	mov	r0, #8
   15c60:	mvn	r3, #-2147483648	; 0x80000000
   15c64:	add	r1, sp, #72	; 0x48
   15c68:	str	r0, [sp]
   15c6c:	mov	r0, #0
   15c70:	bl	177a8 <__assert_fail@plt+0x67a4>
   15c74:	ldrd	r2, [r5, #8]
   15c78:	mov	r4, r0
   15c7c:	str	r0, [r5]
   15c80:	strd	r2, [r0]
   15c84:	b	15b60 <__assert_fail@plt+0x4b5c>
   15c88:	bl	10fec <abort@plt>
   15c8c:	ldr	r3, [pc, #492]	; 15e80 <__assert_fail@plt+0x4e7c>
   15c90:	lsr	ip, r2, #5
   15c94:	and	r2, r2, #31
   15c98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c9c:	movw	r5, #41224	; 0xa108
   15ca0:	movt	r5, #2
   15ca4:	strd	r6, [sp, #8]
   15ca8:	strd	r8, [sp, #16]
   15cac:	strd	sl, [sp, #24]
   15cb0:	mov	sl, r0
   15cb4:	mov	fp, r1
   15cb8:	ldrd	r0, [r3]
   15cbc:	str	lr, [sp, #32]
   15cc0:	sub	sp, sp, #92	; 0x5c
   15cc4:	ldrd	r8, [r3, #8]
   15cc8:	add	r6, sp, #48	; 0x30
   15ccc:	strd	r0, [sp, #40]	; 0x28
   15cd0:	ldrd	r0, [r3, #16]
   15cd4:	strd	r8, [sp, #48]	; 0x30
   15cd8:	ldrd	r8, [r3, #24]
   15cdc:	strd	r0, [sp, #56]	; 0x38
   15ce0:	ldrd	r0, [r3, #32]
   15ce4:	strd	r8, [sp, #64]	; 0x40
   15ce8:	ldrd	r8, [r3, #40]	; 0x28
   15cec:	strd	r0, [sp, #72]	; 0x48
   15cf0:	strd	r8, [sp, #80]	; 0x50
   15cf4:	ldr	r3, [r6, ip, lsl #2]
   15cf8:	mvn	r1, r3, lsr r2
   15cfc:	and	r1, r1, #1
   15d00:	eor	r2, r3, r1, lsl r2
   15d04:	str	r2, [r6, ip, lsl #2]
   15d08:	bl	10ef0 <__errno_location@plt>
   15d0c:	ldr	r3, [r0]
   15d10:	mov	r8, r0
   15d14:	ldr	r2, [r5, #4]
   15d18:	ldr	r4, [r5]
   15d1c:	str	r3, [sp, #28]
   15d20:	cmp	r2, #0
   15d24:	bgt	15d80 <__assert_fail@plt+0x4d7c>
   15d28:	add	r3, r5, #8
   15d2c:	str	r2, [sp, #36]	; 0x24
   15d30:	rsb	r2, r2, #1
   15d34:	cmp	r4, r3
   15d38:	beq	15e54 <__assert_fail@plt+0x4e50>
   15d3c:	mov	r1, #8
   15d40:	mov	r0, r4
   15d44:	mvn	r3, #-2147483648	; 0x80000000
   15d48:	str	r1, [sp]
   15d4c:	add	r1, sp, #36	; 0x24
   15d50:	bl	177a8 <__assert_fail@plt+0x67a4>
   15d54:	mov	r4, r0
   15d58:	str	r0, [r5]
   15d5c:	ldr	r0, [r5, #4]
   15d60:	mov	r1, #0
   15d64:	ldr	r2, [sp, #36]	; 0x24
   15d68:	sub	r2, r2, r0
   15d6c:	add	r0, r4, r0, lsl #3
   15d70:	lsl	r2, r2, #3
   15d74:	bl	10f08 <memset@plt>
   15d78:	ldr	r3, [sp, #36]	; 0x24
   15d7c:	str	r3, [r5, #4]
   15d80:	ldr	ip, [sp, #40]	; 0x28
   15d84:	mov	r3, fp
   15d88:	mov	r2, sl
   15d8c:	ldr	r7, [sp, #44]	; 0x2c
   15d90:	ldr	r9, [r4]
   15d94:	ldr	r5, [r4, #4]
   15d98:	str	ip, [sp]
   15d9c:	orr	r7, r7, #1
   15da0:	ldr	ip, [sp, #80]	; 0x50
   15da4:	mov	r1, r9
   15da8:	str	r7, [sp, #4]
   15dac:	ldr	lr, [sp, #84]	; 0x54
   15db0:	mov	r0, r5
   15db4:	str	r6, [sp, #8]
   15db8:	str	ip, [sp, #12]
   15dbc:	str	lr, [sp, #16]
   15dc0:	bl	1349c <__assert_fail@plt+0x2498>
   15dc4:	cmp	r9, r0
   15dc8:	bhi	15e2c <__assert_fail@plt+0x4e28>
   15dcc:	add	r9, r0, #1
   15dd0:	movw	r3, #41388	; 0xa1ac
   15dd4:	movt	r3, #2
   15dd8:	cmp	r5, r3
   15ddc:	str	r9, [r4]
   15de0:	beq	15dec <__assert_fail@plt+0x4de8>
   15de4:	mov	r0, r5
   15de8:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15dec:	mov	r0, r9
   15df0:	bl	17504 <__assert_fail@plt+0x6500>
   15df4:	mov	r1, r9
   15df8:	ldr	ip, [sp, #40]	; 0x28
   15dfc:	mov	r3, fp
   15e00:	mov	r2, sl
   15e04:	mov	r5, r0
   15e08:	ldr	r9, [sp, #80]	; 0x50
   15e0c:	ldr	lr, [sp, #84]	; 0x54
   15e10:	str	r0, [r4, #4]
   15e14:	str	ip, [sp]
   15e18:	str	r7, [sp, #4]
   15e1c:	str	r6, [sp, #8]
   15e20:	str	r9, [sp, #12]
   15e24:	str	lr, [sp, #16]
   15e28:	bl	1349c <__assert_fail@plt+0x2498>
   15e2c:	ldr	r3, [sp, #28]
   15e30:	mov	r0, r5
   15e34:	str	r3, [r8]
   15e38:	add	sp, sp, #92	; 0x5c
   15e3c:	ldrd	r4, [sp]
   15e40:	ldrd	r6, [sp, #8]
   15e44:	ldrd	r8, [sp, #16]
   15e48:	ldrd	sl, [sp, #24]
   15e4c:	add	sp, sp, #32
   15e50:	pop	{pc}		; (ldr pc, [sp], #4)
   15e54:	mov	r0, #8
   15e58:	mvn	r3, #-2147483648	; 0x80000000
   15e5c:	add	r1, sp, #36	; 0x24
   15e60:	str	r0, [sp]
   15e64:	mov	r0, #0
   15e68:	bl	177a8 <__assert_fail@plt+0x67a4>
   15e6c:	ldrd	r2, [r5, #8]
   15e70:	mov	r4, r0
   15e74:	str	r0, [r5]
   15e78:	strd	r2, [r0]
   15e7c:	b	15d5c <__assert_fail@plt+0x4d58>
   15e80:	andeq	sl, r2, ip, lsr #5
   15e84:	ldr	ip, [pc, #476]	; 16068 <__assert_fail@plt+0x5064>
   15e88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15e8c:	movw	r4, #41224	; 0xa108
   15e90:	movt	r4, #2
   15e94:	ldrd	r2, [ip, #8]
   15e98:	strd	r6, [sp, #8]
   15e9c:	lsr	r7, r1, #5
   15ea0:	mov	r6, r0
   15ea4:	strd	r8, [sp, #16]
   15ea8:	str	lr, [sp, #32]
   15eac:	and	lr, r1, #31
   15eb0:	ldrd	r0, [ip]
   15eb4:	strd	sl, [sp, #24]
   15eb8:	sub	sp, sp, #84	; 0x54
   15ebc:	add	r5, sp, #40	; 0x28
   15ec0:	strd	r0, [sp, #32]
   15ec4:	strd	r2, [sp, #40]	; 0x28
   15ec8:	ldrd	r0, [ip, #16]
   15ecc:	ldrd	r2, [ip, #24]
   15ed0:	strd	r0, [sp, #48]	; 0x30
   15ed4:	ldrd	r0, [ip, #32]
   15ed8:	strd	r2, [sp, #56]	; 0x38
   15edc:	ldrd	r2, [ip, #40]	; 0x28
   15ee0:	strd	r0, [sp, #64]	; 0x40
   15ee4:	strd	r2, [sp, #72]	; 0x48
   15ee8:	ldr	r1, [r5, r7, lsl #2]
   15eec:	mvn	r3, r1, lsr lr
   15ef0:	and	r3, r3, #1
   15ef4:	eor	r1, r1, r3, lsl lr
   15ef8:	str	r1, [r5, r7, lsl #2]
   15efc:	bl	10ef0 <__errno_location@plt>
   15f00:	mov	r9, r0
   15f04:	ldr	sl, [r0]
   15f08:	ldr	r2, [r4, #4]
   15f0c:	ldr	r7, [r4]
   15f10:	cmp	r2, #0
   15f14:	bgt	15f70 <__assert_fail@plt+0x4f6c>
   15f18:	add	r3, r4, #8
   15f1c:	str	r2, [sp, #28]
   15f20:	rsb	r2, r2, #1
   15f24:	cmp	r7, r3
   15f28:	beq	1603c <__assert_fail@plt+0x5038>
   15f2c:	mov	r1, #8
   15f30:	mov	r0, r7
   15f34:	mvn	r3, #-2147483648	; 0x80000000
   15f38:	str	r1, [sp]
   15f3c:	add	r1, sp, #28
   15f40:	bl	177a8 <__assert_fail@plt+0x67a4>
   15f44:	mov	r7, r0
   15f48:	str	r0, [r4]
   15f4c:	ldr	r0, [r4, #4]
   15f50:	mov	r1, #0
   15f54:	ldr	r2, [sp, #28]
   15f58:	sub	r2, r2, r0
   15f5c:	add	r0, r7, r0, lsl #3
   15f60:	lsl	r2, r2, #3
   15f64:	bl	10f08 <memset@plt>
   15f68:	ldr	r3, [sp, #28]
   15f6c:	str	r3, [r4, #4]
   15f70:	ldr	ip, [sp, #32]
   15f74:	mvn	r3, #0
   15f78:	mov	r2, r6
   15f7c:	ldr	r8, [sp, #36]	; 0x24
   15f80:	ldr	fp, [r7]
   15f84:	ldr	r4, [r7, #4]
   15f88:	str	ip, [sp]
   15f8c:	orr	r8, r8, #1
   15f90:	ldr	ip, [sp, #72]	; 0x48
   15f94:	mov	r1, fp
   15f98:	str	r8, [sp, #4]
   15f9c:	ldr	lr, [sp, #76]	; 0x4c
   15fa0:	mov	r0, r4
   15fa4:	str	r5, [sp, #8]
   15fa8:	str	ip, [sp, #12]
   15fac:	str	lr, [sp, #16]
   15fb0:	bl	1349c <__assert_fail@plt+0x2498>
   15fb4:	cmp	fp, r0
   15fb8:	bhi	16018 <__assert_fail@plt+0x5014>
   15fbc:	add	fp, r0, #1
   15fc0:	movw	r3, #41388	; 0xa1ac
   15fc4:	movt	r3, #2
   15fc8:	cmp	r4, r3
   15fcc:	str	fp, [r7]
   15fd0:	beq	15fdc <__assert_fail@plt+0x4fd8>
   15fd4:	mov	r0, r4
   15fd8:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   15fdc:	mov	r0, fp
   15fe0:	bl	17504 <__assert_fail@plt+0x6500>
   15fe4:	ldr	r3, [sp, #32]
   15fe8:	mov	r2, r6
   15fec:	mov	r1, fp
   15ff0:	mov	r4, r0
   15ff4:	ldr	lr, [sp, #72]	; 0x48
   15ff8:	ldr	ip, [sp, #76]	; 0x4c
   15ffc:	str	r0, [r7, #4]
   16000:	stm	sp, {r3, r8}
   16004:	mvn	r3, #0
   16008:	str	r5, [sp, #8]
   1600c:	str	lr, [sp, #12]
   16010:	str	ip, [sp, #16]
   16014:	bl	1349c <__assert_fail@plt+0x2498>
   16018:	mov	r0, r4
   1601c:	str	sl, [r9]
   16020:	add	sp, sp, #84	; 0x54
   16024:	ldrd	r4, [sp]
   16028:	ldrd	r6, [sp, #8]
   1602c:	ldrd	r8, [sp, #16]
   16030:	ldrd	sl, [sp, #24]
   16034:	add	sp, sp, #32
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	mov	r0, #8
   16040:	mvn	r3, #-2147483648	; 0x80000000
   16044:	add	r1, sp, #28
   16048:	str	r0, [sp]
   1604c:	mov	r0, #0
   16050:	bl	177a8 <__assert_fail@plt+0x67a4>
   16054:	ldrd	r2, [r4, #8]
   16058:	mov	r7, r0
   1605c:	str	r0, [r4]
   16060:	strd	r2, [r0]
   16064:	b	15f4c <__assert_fail@plt+0x4f48>
   16068:	andeq	sl, r2, ip, lsr #5
   1606c:	ldr	ip, [pc, #472]	; 1624c <__assert_fail@plt+0x5248>
   16070:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16074:	mov	r5, r0
   16078:	movw	r4, #41224	; 0xa108
   1607c:	movt	r4, #2
   16080:	ldrd	r2, [ip]
   16084:	ldrd	r0, [ip, #8]
   16088:	strd	r6, [sp, #8]
   1608c:	strd	r8, [sp, #16]
   16090:	strd	sl, [sp, #24]
   16094:	str	lr, [sp, #32]
   16098:	sub	sp, sp, #84	; 0x54
   1609c:	strd	r2, [sp, #32]
   160a0:	strd	r0, [sp, #40]	; 0x28
   160a4:	ldr	r6, [sp, #44]	; 0x2c
   160a8:	ldrd	r2, [ip, #16]
   160ac:	ldrd	r0, [ip, #24]
   160b0:	mvn	lr, r6
   160b4:	and	lr, lr, #67108864	; 0x4000000
   160b8:	eor	lr, lr, r6
   160bc:	ldrd	r6, [ip, #40]	; 0x28
   160c0:	strd	r2, [sp, #48]	; 0x30
   160c4:	ldrd	r2, [ip, #32]
   160c8:	str	lr, [sp, #44]	; 0x2c
   160cc:	strd	r0, [sp, #56]	; 0x38
   160d0:	strd	r2, [sp, #64]	; 0x40
   160d4:	strd	r6, [sp, #72]	; 0x48
   160d8:	bl	10ef0 <__errno_location@plt>
   160dc:	mov	r8, r0
   160e0:	ldr	r9, [r0]
   160e4:	ldr	r2, [r4, #4]
   160e8:	ldr	r6, [r4]
   160ec:	cmp	r2, #0
   160f0:	bgt	1614c <__assert_fail@plt+0x5148>
   160f4:	add	r3, r4, #8
   160f8:	str	r2, [sp, #28]
   160fc:	rsb	r2, r2, #1
   16100:	cmp	r6, r3
   16104:	beq	16220 <__assert_fail@plt+0x521c>
   16108:	mov	r1, #8
   1610c:	mov	r0, r6
   16110:	mvn	r3, #-2147483648	; 0x80000000
   16114:	str	r1, [sp]
   16118:	add	r1, sp, #28
   1611c:	bl	177a8 <__assert_fail@plt+0x67a4>
   16120:	mov	r6, r0
   16124:	str	r0, [r4]
   16128:	ldr	r0, [r4, #4]
   1612c:	mov	r1, #0
   16130:	ldr	r2, [sp, #28]
   16134:	sub	r2, r2, r0
   16138:	add	r0, r6, r0, lsl #3
   1613c:	lsl	r2, r2, #3
   16140:	bl	10f08 <memset@plt>
   16144:	ldr	r3, [sp, #28]
   16148:	str	r3, [r4, #4]
   1614c:	ldr	sl, [r6]
   16150:	add	r0, sp, #40	; 0x28
   16154:	mvn	r3, #0
   16158:	mov	r2, r5
   1615c:	ldr	r7, [sp, #36]	; 0x24
   16160:	ldr	r4, [r6, #4]
   16164:	mov	r1, sl
   16168:	str	r0, [sp, #8]
   1616c:	ldr	lr, [sp, #32]
   16170:	orr	r7, r7, #1
   16174:	ldr	ip, [sp, #72]	; 0x48
   16178:	mov	r0, r4
   1617c:	ldr	fp, [sp, #76]	; 0x4c
   16180:	str	lr, [sp]
   16184:	str	r7, [sp, #4]
   16188:	str	ip, [sp, #12]
   1618c:	str	fp, [sp, #16]
   16190:	bl	1349c <__assert_fail@plt+0x2498>
   16194:	cmp	sl, r0
   16198:	bhi	161fc <__assert_fail@plt+0x51f8>
   1619c:	add	sl, r0, #1
   161a0:	movw	r3, #41388	; 0xa1ac
   161a4:	movt	r3, #2
   161a8:	cmp	r4, r3
   161ac:	str	sl, [r6]
   161b0:	beq	161bc <__assert_fail@plt+0x51b8>
   161b4:	mov	r0, r4
   161b8:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   161bc:	mov	r0, sl
   161c0:	bl	17504 <__assert_fail@plt+0x6500>
   161c4:	ldr	r3, [sp, #32]
   161c8:	mov	r2, r5
   161cc:	add	r5, sp, #40	; 0x28
   161d0:	mov	r1, sl
   161d4:	mov	r4, r0
   161d8:	ldr	lr, [sp, #72]	; 0x48
   161dc:	ldr	ip, [sp, #76]	; 0x4c
   161e0:	str	r0, [r6, #4]
   161e4:	stm	sp, {r3, r7}
   161e8:	mvn	r3, #0
   161ec:	str	r5, [sp, #8]
   161f0:	str	lr, [sp, #12]
   161f4:	str	ip, [sp, #16]
   161f8:	bl	1349c <__assert_fail@plt+0x2498>
   161fc:	mov	r0, r4
   16200:	str	r9, [r8]
   16204:	add	sp, sp, #84	; 0x54
   16208:	ldrd	r4, [sp]
   1620c:	ldrd	r6, [sp, #8]
   16210:	ldrd	r8, [sp, #16]
   16214:	ldrd	sl, [sp, #24]
   16218:	add	sp, sp, #32
   1621c:	pop	{pc}		; (ldr pc, [sp], #4)
   16220:	mov	r0, #8
   16224:	mvn	r3, #-2147483648	; 0x80000000
   16228:	add	r1, sp, #28
   1622c:	str	r0, [sp]
   16230:	mov	r0, #0
   16234:	bl	177a8 <__assert_fail@plt+0x67a4>
   16238:	ldrd	r2, [r4, #8]
   1623c:	mov	r6, r0
   16240:	str	r0, [r4]
   16244:	strd	r2, [r0]
   16248:	b	16128 <__assert_fail@plt+0x5124>
   1624c:	andeq	sl, r2, ip, lsr #5
   16250:	ldr	ip, [pc, #480]	; 16438 <__assert_fail@plt+0x5434>
   16254:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16258:	mov	r5, r0
   1625c:	movw	r4, #41224	; 0xa108
   16260:	movt	r4, #2
   16264:	ldrd	r2, [ip]
   16268:	strd	r6, [sp, #8]
   1626c:	mov	r6, r1
   16270:	ldrd	r0, [ip, #8]
   16274:	strd	r8, [sp, #16]
   16278:	strd	sl, [sp, #24]
   1627c:	str	lr, [sp, #32]
   16280:	sub	sp, sp, #84	; 0x54
   16284:	ldrd	r8, [ip, #40]	; 0x28
   16288:	strd	r2, [sp, #32]
   1628c:	strd	r0, [sp, #40]	; 0x28
   16290:	ldrd	r2, [ip, #16]
   16294:	ldr	r7, [sp, #44]	; 0x2c
   16298:	ldrd	r0, [ip, #24]
   1629c:	strd	r2, [sp, #48]	; 0x30
   162a0:	ldrd	r2, [ip, #32]
   162a4:	mvn	lr, r7
   162a8:	and	lr, lr, #67108864	; 0x4000000
   162ac:	eor	lr, lr, r7
   162b0:	str	lr, [sp, #44]	; 0x2c
   162b4:	strd	r0, [sp, #56]	; 0x38
   162b8:	strd	r2, [sp, #64]	; 0x40
   162bc:	strd	r8, [sp, #72]	; 0x48
   162c0:	bl	10ef0 <__errno_location@plt>
   162c4:	mov	r9, r0
   162c8:	ldr	sl, [r0]
   162cc:	ldr	r2, [r4, #4]
   162d0:	ldr	r7, [r4]
   162d4:	cmp	r2, #0
   162d8:	bgt	16334 <__assert_fail@plt+0x5330>
   162dc:	add	r3, r4, #8
   162e0:	str	r2, [sp, #28]
   162e4:	rsb	r2, r2, #1
   162e8:	cmp	r7, r3
   162ec:	beq	1640c <__assert_fail@plt+0x5408>
   162f0:	mov	r1, #8
   162f4:	mov	r0, r7
   162f8:	mvn	r3, #-2147483648	; 0x80000000
   162fc:	str	r1, [sp]
   16300:	add	r1, sp, #28
   16304:	bl	177a8 <__assert_fail@plt+0x67a4>
   16308:	mov	r7, r0
   1630c:	str	r0, [r4]
   16310:	ldr	r0, [r4, #4]
   16314:	mov	r1, #0
   16318:	ldr	r2, [sp, #28]
   1631c:	sub	r2, r2, r0
   16320:	add	r0, r7, r0, lsl #3
   16324:	lsl	r2, r2, #3
   16328:	bl	10f08 <memset@plt>
   1632c:	ldr	r3, [sp, #28]
   16330:	str	r3, [r4, #4]
   16334:	ldr	ip, [sp, #32]
   16338:	add	r0, sp, #40	; 0x28
   1633c:	mov	r3, r6
   16340:	mov	r2, r5
   16344:	ldr	r8, [sp, #36]	; 0x24
   16348:	ldr	fp, [r7]
   1634c:	ldr	r4, [r7, #4]
   16350:	str	ip, [sp]
   16354:	orr	r8, r8, #1
   16358:	ldr	ip, [sp, #72]	; 0x48
   1635c:	mov	r1, fp
   16360:	str	r8, [sp, #4]
   16364:	ldr	lr, [sp, #76]	; 0x4c
   16368:	str	r0, [sp, #8]
   1636c:	mov	r0, r4
   16370:	str	ip, [sp, #12]
   16374:	str	lr, [sp, #16]
   16378:	bl	1349c <__assert_fail@plt+0x2498>
   1637c:	cmp	fp, r0
   16380:	bhi	163e8 <__assert_fail@plt+0x53e4>
   16384:	add	fp, r0, #1
   16388:	movw	r3, #41388	; 0xa1ac
   1638c:	movt	r3, #2
   16390:	cmp	r4, r3
   16394:	str	fp, [r7]
   16398:	beq	163a4 <__assert_fail@plt+0x53a0>
   1639c:	mov	r0, r4
   163a0:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   163a4:	mov	r0, fp
   163a8:	bl	17504 <__assert_fail@plt+0x6500>
   163ac:	ldr	lr, [sp, #32]
   163b0:	mov	r2, r5
   163b4:	mov	r3, r6
   163b8:	mov	r1, fp
   163bc:	mov	r4, r0
   163c0:	ldr	r5, [sp, #72]	; 0x48
   163c4:	ldr	ip, [sp, #76]	; 0x4c
   163c8:	str	r0, [r7, #4]
   163cc:	str	lr, [sp]
   163d0:	add	lr, sp, #40	; 0x28
   163d4:	str	r8, [sp, #4]
   163d8:	str	lr, [sp, #8]
   163dc:	str	r5, [sp, #12]
   163e0:	str	ip, [sp, #16]
   163e4:	bl	1349c <__assert_fail@plt+0x2498>
   163e8:	mov	r0, r4
   163ec:	str	sl, [r9]
   163f0:	add	sp, sp, #84	; 0x54
   163f4:	ldrd	r4, [sp]
   163f8:	ldrd	r6, [sp, #8]
   163fc:	ldrd	r8, [sp, #16]
   16400:	ldrd	sl, [sp, #24]
   16404:	add	sp, sp, #32
   16408:	pop	{pc}		; (ldr pc, [sp], #4)
   1640c:	mov	r0, #8
   16410:	mvn	r3, #-2147483648	; 0x80000000
   16414:	add	r1, sp, #28
   16418:	str	r0, [sp]
   1641c:	mov	r0, #0
   16420:	bl	177a8 <__assert_fail@plt+0x67a4>
   16424:	ldrd	r2, [r4, #8]
   16428:	mov	r7, r0
   1642c:	str	r0, [r4]
   16430:	strd	r2, [r0]
   16434:	b	16310 <__assert_fail@plt+0x530c>
   16438:	andeq	sl, r2, ip, lsr #5
   1643c:	strd	r4, [sp, #-12]!
   16440:	mov	r4, #0
   16444:	mov	r5, #0
   16448:	str	lr, [sp, #8]
   1644c:	sub	sp, sp, #100	; 0x64
   16450:	cmp	r1, #10
   16454:	strd	r4, [sp]
   16458:	strd	r4, [sp, #8]
   1645c:	strd	r4, [sp, #16]
   16460:	strd	r4, [sp, #24]
   16464:	strd	r4, [sp, #32]
   16468:	strd	r4, [sp, #40]	; 0x28
   1646c:	beq	1649c <__assert_fail@plt+0x5498>
   16470:	mov	ip, #67108864	; 0x4000000
   16474:	mov	r3, sp
   16478:	str	r1, [sp]
   1647c:	mov	r1, r2
   16480:	mvn	r2, #0
   16484:	str	ip, [sp, #12]
   16488:	bl	14e88 <__assert_fail@plt+0x3e84>
   1648c:	add	sp, sp, #100	; 0x64
   16490:	ldrd	r4, [sp]
   16494:	add	sp, sp, #8
   16498:	pop	{pc}		; (ldr pc, [sp], #4)
   1649c:	bl	10fec <abort@plt>
   164a0:	ldr	ip, [pc, #156]	; 16544 <__assert_fail@plt+0x5540>
   164a4:	cmp	r2, #0
   164a8:	cmpne	r1, #0
   164ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   164b0:	strd	r6, [sp, #8]
   164b4:	mov	r6, r2
   164b8:	str	r8, [sp, #16]
   164bc:	mov	r8, r3
   164c0:	strd	sl, [sp, #20]
   164c4:	ldrd	r4, [ip]
   164c8:	str	lr, [sp, #28]
   164cc:	sub	sp, sp, #48	; 0x30
   164d0:	mov	lr, #10
   164d4:	ldrd	r2, [ip, #8]
   164d8:	ldrd	sl, [ip, #16]
   164dc:	strd	r4, [sp]
   164e0:	ldrd	r4, [ip, #32]
   164e4:	str	lr, [sp]
   164e8:	strd	r2, [sp, #8]
   164ec:	strd	sl, [sp, #16]
   164f0:	ldrd	r2, [ip, #24]
   164f4:	ldrd	sl, [ip, #40]	; 0x28
   164f8:	strd	r2, [sp, #24]
   164fc:	strd	r4, [sp, #32]
   16500:	strd	sl, [sp, #40]	; 0x28
   16504:	beq	16540 <__assert_fail@plt+0x553c>
   16508:	mov	r7, r1
   1650c:	mov	r3, sp
   16510:	mov	r1, r8
   16514:	mvn	r2, #0
   16518:	str	r7, [sp, #40]	; 0x28
   1651c:	str	r6, [sp, #44]	; 0x2c
   16520:	bl	14e88 <__assert_fail@plt+0x3e84>
   16524:	add	sp, sp, #48	; 0x30
   16528:	ldrd	r4, [sp]
   1652c:	ldrd	r6, [sp, #8]
   16530:	ldr	r8, [sp, #16]
   16534:	ldrd	sl, [sp, #20]
   16538:	add	sp, sp, #28
   1653c:	pop	{pc}		; (ldr pc, [sp], #4)
   16540:	bl	10fec <abort@plt>
   16544:	andeq	sl, r2, ip, lsr #5
   16548:	ldr	ip, [pc, #156]	; 165ec <__assert_fail@plt+0x55e8>
   1654c:	cmp	r2, #0
   16550:	cmpne	r1, #0
   16554:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16558:	strd	r6, [sp, #8]
   1655c:	mov	r6, r2
   16560:	str	r8, [sp, #16]
   16564:	mov	r8, r3
   16568:	strd	sl, [sp, #20]
   1656c:	ldrd	r4, [ip]
   16570:	str	lr, [sp, #28]
   16574:	sub	sp, sp, #48	; 0x30
   16578:	mov	lr, #10
   1657c:	ldrd	r2, [ip, #8]
   16580:	ldrd	sl, [ip, #16]
   16584:	strd	r4, [sp]
   16588:	ldrd	r4, [ip, #32]
   1658c:	str	lr, [sp]
   16590:	strd	r2, [sp, #8]
   16594:	strd	sl, [sp, #16]
   16598:	ldrd	r2, [ip, #24]
   1659c:	ldrd	sl, [ip, #40]	; 0x28
   165a0:	strd	r2, [sp, #24]
   165a4:	strd	r4, [sp, #32]
   165a8:	strd	sl, [sp, #40]	; 0x28
   165ac:	beq	165e8 <__assert_fail@plt+0x55e4>
   165b0:	ldr	r2, [sp, #80]	; 0x50
   165b4:	mov	r7, r1
   165b8:	mov	r3, sp
   165bc:	mov	r1, r8
   165c0:	str	r7, [sp, #40]	; 0x28
   165c4:	str	r6, [sp, #44]	; 0x2c
   165c8:	bl	14e88 <__assert_fail@plt+0x3e84>
   165cc:	add	sp, sp, #48	; 0x30
   165d0:	ldrd	r4, [sp]
   165d4:	ldrd	r6, [sp, #8]
   165d8:	ldr	r8, [sp, #16]
   165dc:	ldrd	sl, [sp, #20]
   165e0:	add	sp, sp, #28
   165e4:	pop	{pc}		; (ldr pc, [sp], #4)
   165e8:	bl	10fec <abort@plt>
   165ec:	andeq	sl, r2, ip, lsr #5
   165f0:	ldr	ip, [pc, #512]	; 167f8 <__assert_fail@plt+0x57f4>
   165f4:	cmp	r0, #0
   165f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   165fc:	ldrd	r4, [ip, #16]
   16600:	strd	r6, [sp, #8]
   16604:	clz	r6, r1
   16608:	mov	r7, r1
   1660c:	strd	r8, [sp, #16]
   16610:	mov	r8, r0
   16614:	lsr	r6, r6, #5
   16618:	strd	sl, [sp, #24]
   1661c:	mov	fp, r2
   16620:	mov	sl, #10
   16624:	ldrd	r2, [ip]
   16628:	moveq	r6, #1
   1662c:	str	lr, [sp, #32]
   16630:	sub	sp, sp, #92	; 0x5c
   16634:	cmp	r6, #0
   16638:	ldrd	r0, [ip, #8]
   1663c:	strd	r2, [sp, #40]	; 0x28
   16640:	strd	r4, [sp, #56]	; 0x38
   16644:	ldrd	r2, [ip, #24]
   16648:	strd	r0, [sp, #48]	; 0x30
   1664c:	ldrd	r0, [ip, #32]
   16650:	str	sl, [sp, #40]	; 0x28
   16654:	ldrd	r4, [ip, #40]	; 0x28
   16658:	strd	r2, [sp, #64]	; 0x40
   1665c:	strd	r0, [sp, #72]	; 0x48
   16660:	strd	r4, [sp, #80]	; 0x50
   16664:	bne	167f4 <__assert_fail@plt+0x57f0>
   16668:	movw	r5, #41224	; 0xa108
   1666c:	movt	r5, #2
   16670:	str	r8, [sp, #80]	; 0x50
   16674:	str	r7, [sp, #84]	; 0x54
   16678:	bl	10ef0 <__errno_location@plt>
   1667c:	ldr	r3, [r0]
   16680:	mov	r9, r0
   16684:	ldr	r2, [r5, #4]
   16688:	ldr	r4, [r5]
   1668c:	str	r3, [sp, #28]
   16690:	cmp	r2, #0
   16694:	movgt	r1, sl
   16698:	bgt	16700 <__assert_fail@plt+0x56fc>
   1669c:	add	r3, r5, #8
   166a0:	str	r2, [sp, #36]	; 0x24
   166a4:	rsb	r2, r2, #1
   166a8:	cmp	r4, r3
   166ac:	beq	167c8 <__assert_fail@plt+0x57c4>
   166b0:	mov	r1, #8
   166b4:	mov	r0, r4
   166b8:	mvn	r3, #-2147483648	; 0x80000000
   166bc:	str	r1, [sp]
   166c0:	add	r1, sp, #36	; 0x24
   166c4:	bl	177a8 <__assert_fail@plt+0x67a4>
   166c8:	mov	r4, r0
   166cc:	str	r0, [r5]
   166d0:	ldr	r0, [r5, #4]
   166d4:	mov	r1, #0
   166d8:	ldr	r2, [sp, #36]	; 0x24
   166dc:	sub	r2, r2, r0
   166e0:	add	r0, r4, r0, lsl #3
   166e4:	lsl	r2, r2, #3
   166e8:	bl	10f08 <memset@plt>
   166ec:	ldr	r3, [sp, #36]	; 0x24
   166f0:	ldr	r1, [sp, #40]	; 0x28
   166f4:	ldr	r8, [sp, #80]	; 0x50
   166f8:	str	r3, [r5, #4]
   166fc:	ldr	r7, [sp, #84]	; 0x54
   16700:	mvn	r3, #0
   16704:	mov	r2, fp
   16708:	ldr	r6, [sp, #44]	; 0x2c
   1670c:	ldr	sl, [r4]
   16710:	ldr	r5, [r4, #4]
   16714:	orr	r6, r6, #1
   16718:	stm	sp, {r1, r6}
   1671c:	add	r1, sp, #48	; 0x30
   16720:	str	r8, [sp, #12]
   16724:	mov	r0, r5
   16728:	str	r1, [sp, #8]
   1672c:	mov	r1, sl
   16730:	str	r7, [sp, #16]
   16734:	bl	1349c <__assert_fail@plt+0x2498>
   16738:	cmp	sl, r0
   1673c:	bhi	167a0 <__assert_fail@plt+0x579c>
   16740:	add	r7, r0, #1
   16744:	movw	r3, #41388	; 0xa1ac
   16748:	movt	r3, #2
   1674c:	cmp	r5, r3
   16750:	str	r7, [r4]
   16754:	beq	16760 <__assert_fail@plt+0x575c>
   16758:	mov	r0, r5
   1675c:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   16760:	mov	r0, r7
   16764:	bl	17504 <__assert_fail@plt+0x6500>
   16768:	ldr	r3, [sp, #40]	; 0x28
   1676c:	mov	r2, fp
   16770:	mov	r1, r7
   16774:	mov	r5, r0
   16778:	ldr	lr, [sp, #80]	; 0x50
   1677c:	ldr	ip, [sp, #84]	; 0x54
   16780:	str	r0, [r4, #4]
   16784:	add	r4, sp, #48	; 0x30
   16788:	stm	sp, {r3, r6}
   1678c:	mvn	r3, #0
   16790:	str	r4, [sp, #8]
   16794:	str	lr, [sp, #12]
   16798:	str	ip, [sp, #16]
   1679c:	bl	1349c <__assert_fail@plt+0x2498>
   167a0:	ldr	r3, [sp, #28]
   167a4:	mov	r0, r5
   167a8:	str	r3, [r9]
   167ac:	add	sp, sp, #92	; 0x5c
   167b0:	ldrd	r4, [sp]
   167b4:	ldrd	r6, [sp, #8]
   167b8:	ldrd	r8, [sp, #16]
   167bc:	ldrd	sl, [sp, #24]
   167c0:	add	sp, sp, #32
   167c4:	pop	{pc}		; (ldr pc, [sp], #4)
   167c8:	mov	r1, #8
   167cc:	mvn	r3, #-2147483648	; 0x80000000
   167d0:	mov	r0, r6
   167d4:	str	r1, [sp]
   167d8:	add	r1, sp, #36	; 0x24
   167dc:	bl	177a8 <__assert_fail@plt+0x67a4>
   167e0:	ldrd	r2, [r5, #8]
   167e4:	mov	r4, r0
   167e8:	str	r0, [r5]
   167ec:	strd	r2, [r0]
   167f0:	b	166d0 <__assert_fail@plt+0x56cc>
   167f4:	bl	10fec <abort@plt>
   167f8:	andeq	sl, r2, ip, lsr #5
   167fc:	ldr	ip, [pc, #536]	; 16a1c <__assert_fail@plt+0x5a18>
   16800:	cmp	r0, #0
   16804:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16808:	ldrd	r4, [ip, #16]
   1680c:	strd	r6, [sp, #8]
   16810:	mov	r6, r1
   16814:	mov	r7, r0
   16818:	strd	r8, [sp, #16]
   1681c:	mov	r9, #10
   16820:	strd	sl, [sp, #24]
   16824:	mov	sl, r2
   16828:	mov	fp, r3
   1682c:	str	lr, [sp, #32]
   16830:	clz	lr, r1
   16834:	sub	sp, sp, #92	; 0x5c
   16838:	ldrd	r2, [ip]
   1683c:	lsr	lr, lr, #5
   16840:	moveq	lr, #1
   16844:	ldrd	r0, [ip, #8]
   16848:	cmp	lr, #0
   1684c:	strd	r4, [sp, #56]	; 0x38
   16850:	ldrd	r4, [ip, #40]	; 0x28
   16854:	str	lr, [sp, #28]
   16858:	strd	r2, [sp, #40]	; 0x28
   1685c:	ldrd	r2, [ip, #24]
   16860:	strd	r0, [sp, #48]	; 0x30
   16864:	ldrd	r0, [ip, #32]
   16868:	str	r9, [sp, #40]	; 0x28
   1686c:	strd	r2, [sp, #64]	; 0x40
   16870:	strd	r4, [sp, #80]	; 0x50
   16874:	strd	r0, [sp, #72]	; 0x48
   16878:	bne	16a18 <__assert_fail@plt+0x5a14>
   1687c:	movw	r5, #41224	; 0xa108
   16880:	movt	r5, #2
   16884:	str	r7, [sp, #80]	; 0x50
   16888:	str	r6, [sp, #84]	; 0x54
   1688c:	bl	10ef0 <__errno_location@plt>
   16890:	ldr	r3, [r0]
   16894:	mov	r8, r0
   16898:	ldr	r2, [r5, #4]
   1689c:	ldr	r4, [r5]
   168a0:	str	r3, [sp, #24]
   168a4:	cmp	r2, #0
   168a8:	movgt	r1, r9
   168ac:	bgt	16914 <__assert_fail@plt+0x5910>
   168b0:	add	r3, r5, #8
   168b4:	str	r2, [sp, #36]	; 0x24
   168b8:	rsb	r2, r2, #1
   168bc:	cmp	r4, r3
   168c0:	beq	169ec <__assert_fail@plt+0x59e8>
   168c4:	mov	r1, #8
   168c8:	mov	r0, r4
   168cc:	mvn	r3, #-2147483648	; 0x80000000
   168d0:	str	r1, [sp]
   168d4:	add	r1, sp, #36	; 0x24
   168d8:	bl	177a8 <__assert_fail@plt+0x67a4>
   168dc:	mov	r4, r0
   168e0:	str	r0, [r5]
   168e4:	ldr	r0, [r5, #4]
   168e8:	mov	r1, #0
   168ec:	ldr	r2, [sp, #36]	; 0x24
   168f0:	sub	r2, r2, r0
   168f4:	add	r0, r4, r0, lsl #3
   168f8:	lsl	r2, r2, #3
   168fc:	bl	10f08 <memset@plt>
   16900:	ldr	r3, [sp, #36]	; 0x24
   16904:	ldr	r1, [sp, #40]	; 0x28
   16908:	ldr	r7, [sp, #80]	; 0x50
   1690c:	str	r3, [r5, #4]
   16910:	ldr	r6, [sp, #84]	; 0x54
   16914:	mov	r3, fp
   16918:	mov	r2, sl
   1691c:	ldr	r0, [sp, #44]	; 0x2c
   16920:	ldr	r9, [r4]
   16924:	ldr	r5, [r4, #4]
   16928:	orr	r0, r0, #1
   1692c:	str	r1, [sp]
   16930:	add	r1, sp, #48	; 0x30
   16934:	str	r0, [sp, #4]
   16938:	str	r1, [sp, #8]
   1693c:	mov	r1, r9
   16940:	str	r7, [sp, #12]
   16944:	str	r6, [sp, #16]
   16948:	str	r0, [sp, #28]
   1694c:	mov	r0, r5
   16950:	bl	1349c <__assert_fail@plt+0x2498>
   16954:	cmp	r9, r0
   16958:	bhi	169c4 <__assert_fail@plt+0x59c0>
   1695c:	add	r6, r0, #1
   16960:	movw	r3, #41388	; 0xa1ac
   16964:	movt	r3, #2
   16968:	cmp	r5, r3
   1696c:	str	r6, [r4]
   16970:	beq	1697c <__assert_fail@plt+0x5978>
   16974:	mov	r0, r5
   16978:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   1697c:	mov	r0, r6
   16980:	bl	17504 <__assert_fail@plt+0x6500>
   16984:	ldr	lr, [sp, #40]	; 0x28
   16988:	mov	r1, r6
   1698c:	mov	r3, fp
   16990:	mov	r2, sl
   16994:	mov	r5, r0
   16998:	ldr	r6, [sp, #80]	; 0x50
   1699c:	ldr	ip, [sp, #84]	; 0x54
   169a0:	str	r0, [r4, #4]
   169a4:	str	lr, [sp]
   169a8:	ldr	lr, [sp, #28]
   169ac:	str	lr, [sp, #4]
   169b0:	add	lr, sp, #48	; 0x30
   169b4:	str	r6, [sp, #12]
   169b8:	str	lr, [sp, #8]
   169bc:	str	ip, [sp, #16]
   169c0:	bl	1349c <__assert_fail@plt+0x2498>
   169c4:	ldr	r3, [sp, #24]
   169c8:	mov	r0, r5
   169cc:	str	r3, [r8]
   169d0:	add	sp, sp, #92	; 0x5c
   169d4:	ldrd	r4, [sp]
   169d8:	ldrd	r6, [sp, #8]
   169dc:	ldrd	r8, [sp, #16]
   169e0:	ldrd	sl, [sp, #24]
   169e4:	add	sp, sp, #32
   169e8:	pop	{pc}		; (ldr pc, [sp], #4)
   169ec:	mov	r1, #8
   169f0:	mvn	r3, #-2147483648	; 0x80000000
   169f4:	ldr	r0, [sp, #28]
   169f8:	str	r1, [sp]
   169fc:	add	r1, sp, #36	; 0x24
   16a00:	bl	177a8 <__assert_fail@plt+0x67a4>
   16a04:	ldrd	r2, [r5, #8]
   16a08:	mov	r4, r0
   16a0c:	str	r0, [r5]
   16a10:	strd	r2, [r0]
   16a14:	b	168e4 <__assert_fail@plt+0x58e0>
   16a18:	bl	10fec <abort@plt>
   16a1c:	andeq	sl, r2, ip, lsr #5
   16a20:	ldr	r3, [pc]	; 16a28 <__assert_fail@plt+0x5a24>
   16a24:	b	14e88 <__assert_fail@plt+0x3e84>
   16a28:	andeq	sl, r2, r8, lsl r1
   16a2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a30:	movw	r4, #41224	; 0xa108
   16a34:	movt	r4, #2
   16a38:	strd	r6, [sp, #8]
   16a3c:	strd	r8, [sp, #16]
   16a40:	strd	sl, [sp, #24]
   16a44:	mov	sl, r0
   16a48:	mov	fp, r1
   16a4c:	str	lr, [sp, #32]
   16a50:	sub	sp, sp, #44	; 0x2c
   16a54:	bl	10ef0 <__errno_location@plt>
   16a58:	ldr	r3, [r0]
   16a5c:	mov	r8, r0
   16a60:	ldr	r2, [r4, #4]
   16a64:	ldr	r5, [r4]
   16a68:	str	r3, [sp, #28]
   16a6c:	cmp	r2, #0
   16a70:	bgt	16acc <__assert_fail@plt+0x5ac8>
   16a74:	add	r3, r4, #8
   16a78:	str	r2, [sp, #36]	; 0x24
   16a7c:	rsb	r2, r2, #1
   16a80:	cmp	r5, r3
   16a84:	beq	16ba8 <__assert_fail@plt+0x5ba4>
   16a88:	mov	r1, #8
   16a8c:	mov	r0, r5
   16a90:	mvn	r3, #-2147483648	; 0x80000000
   16a94:	str	r1, [sp]
   16a98:	add	r1, sp, #36	; 0x24
   16a9c:	bl	177a8 <__assert_fail@plt+0x67a4>
   16aa0:	mov	r5, r0
   16aa4:	str	r0, [r4]
   16aa8:	ldr	r0, [r4, #4]
   16aac:	mov	r1, #0
   16ab0:	ldr	r2, [sp, #36]	; 0x24
   16ab4:	sub	r2, r2, r0
   16ab8:	add	r0, r5, r0, lsl #3
   16abc:	lsl	r2, r2, #3
   16ac0:	bl	10f08 <memset@plt>
   16ac4:	ldr	r3, [sp, #36]	; 0x24
   16ac8:	str	r3, [r4, #4]
   16acc:	ldr	ip, [r4, #16]
   16ad0:	mov	r3, fp
   16ad4:	mov	r2, sl
   16ad8:	ldr	r7, [r4, #20]
   16adc:	ldr	r0, [pc, #240]	; 16bd4 <__assert_fail@plt+0x5bd0>
   16ae0:	ldr	r9, [r5]
   16ae4:	orr	r7, r7, #1
   16ae8:	ldr	r6, [r5, #4]
   16aec:	str	ip, [sp]
   16af0:	ldr	ip, [r4, #56]	; 0x38
   16af4:	mov	r1, r9
   16af8:	str	r7, [sp, #4]
   16afc:	ldr	lr, [r4, #60]	; 0x3c
   16b00:	str	r0, [sp, #8]
   16b04:	mov	r0, r6
   16b08:	str	ip, [sp, #12]
   16b0c:	str	lr, [sp, #16]
   16b10:	bl	1349c <__assert_fail@plt+0x2498>
   16b14:	cmp	r9, r0
   16b18:	bhi	16b80 <__assert_fail@plt+0x5b7c>
   16b1c:	add	r9, r0, #1
   16b20:	movw	r3, #41388	; 0xa1ac
   16b24:	movt	r3, #2
   16b28:	cmp	r6, r3
   16b2c:	str	r9, [r5]
   16b30:	beq	16b3c <__assert_fail@plt+0x5b38>
   16b34:	mov	r0, r6
   16b38:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   16b3c:	mov	r0, r9
   16b40:	bl	17504 <__assert_fail@plt+0x6500>
   16b44:	ldr	ip, [r4, #16]
   16b48:	mov	r1, r9
   16b4c:	mov	r3, fp
   16b50:	mov	r2, sl
   16b54:	mov	r6, r0
   16b58:	ldr	r9, [r4, #56]	; 0x38
   16b5c:	ldr	lr, [r4, #60]	; 0x3c
   16b60:	str	r0, [r5, #4]
   16b64:	str	ip, [sp]
   16b68:	ldr	ip, [pc, #100]	; 16bd4 <__assert_fail@plt+0x5bd0>
   16b6c:	str	r7, [sp, #4]
   16b70:	str	ip, [sp, #8]
   16b74:	str	r9, [sp, #12]
   16b78:	str	lr, [sp, #16]
   16b7c:	bl	1349c <__assert_fail@plt+0x2498>
   16b80:	ldr	r3, [sp, #28]
   16b84:	mov	r0, r6
   16b88:	str	r3, [r8]
   16b8c:	add	sp, sp, #44	; 0x2c
   16b90:	ldrd	r4, [sp]
   16b94:	ldrd	r6, [sp, #8]
   16b98:	ldrd	r8, [sp, #16]
   16b9c:	ldrd	sl, [sp, #24]
   16ba0:	add	sp, sp, #32
   16ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ba8:	mov	r0, #8
   16bac:	mvn	r3, #-2147483648	; 0x80000000
   16bb0:	add	r1, sp, #36	; 0x24
   16bb4:	str	r0, [sp]
   16bb8:	mov	r0, #0
   16bbc:	bl	177a8 <__assert_fail@plt+0x67a4>
   16bc0:	ldrd	r2, [r4, #8]
   16bc4:	mov	r5, r0
   16bc8:	str	r0, [r4]
   16bcc:	strd	r2, [r0]
   16bd0:	b	16aa8 <__assert_fail@plt+0x5aa4>
   16bd4:	andeq	sl, r2, r0, lsr #2
   16bd8:	ldr	r3, [pc, #4]	; 16be4 <__assert_fail@plt+0x5be0>
   16bdc:	mvn	r2, #0
   16be0:	b	14e88 <__assert_fail@plt+0x3e84>
   16be4:	andeq	sl, r2, r8, lsl r1
   16be8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16bec:	movw	r4, #41224	; 0xa108
   16bf0:	movt	r4, #2
   16bf4:	strd	r6, [sp, #8]
   16bf8:	strd	r8, [sp, #16]
   16bfc:	strd	sl, [sp, #24]
   16c00:	mov	sl, r0
   16c04:	str	lr, [sp, #32]
   16c08:	sub	sp, sp, #44	; 0x2c
   16c0c:	bl	10ef0 <__errno_location@plt>
   16c10:	ldr	r3, [r0]
   16c14:	mov	r8, r0
   16c18:	ldr	r2, [r4, #4]
   16c1c:	ldr	r5, [r4]
   16c20:	str	r3, [sp, #28]
   16c24:	cmp	r2, #0
   16c28:	bgt	16c84 <__assert_fail@plt+0x5c80>
   16c2c:	add	r3, r4, #8
   16c30:	str	r2, [sp, #36]	; 0x24
   16c34:	rsb	r2, r2, #1
   16c38:	cmp	r5, r3
   16c3c:	beq	16d4c <__assert_fail@plt+0x5d48>
   16c40:	mov	r1, #8
   16c44:	mov	r0, r5
   16c48:	mvn	r3, #-2147483648	; 0x80000000
   16c4c:	str	r1, [sp]
   16c50:	add	r1, sp, #36	; 0x24
   16c54:	bl	177a8 <__assert_fail@plt+0x67a4>
   16c58:	mov	r5, r0
   16c5c:	str	r0, [r4]
   16c60:	ldr	r0, [r4, #4]
   16c64:	mov	r1, #0
   16c68:	ldr	r2, [sp, #36]	; 0x24
   16c6c:	sub	r2, r2, r0
   16c70:	add	r0, r5, r0, lsl #3
   16c74:	lsl	r2, r2, #3
   16c78:	bl	10f08 <memset@plt>
   16c7c:	ldr	r3, [sp, #36]	; 0x24
   16c80:	str	r3, [r4, #4]
   16c84:	ldr	ip, [r4, #16]
   16c88:	mvn	r3, #0
   16c8c:	mov	r2, sl
   16c90:	ldr	r7, [r4, #20]
   16c94:	ldr	fp, [pc, #220]	; 16d78 <__assert_fail@plt+0x5d74>
   16c98:	ldr	r9, [r5]
   16c9c:	orr	r7, r7, #1
   16ca0:	ldr	r6, [r5, #4]
   16ca4:	str	ip, [sp]
   16ca8:	ldr	ip, [r4, #56]	; 0x38
   16cac:	mov	r1, r9
   16cb0:	stmib	sp, {r7, fp}
   16cb4:	ldr	lr, [r4, #60]	; 0x3c
   16cb8:	mov	r0, r6
   16cbc:	str	ip, [sp, #12]
   16cc0:	str	lr, [sp, #16]
   16cc4:	bl	1349c <__assert_fail@plt+0x2498>
   16cc8:	cmp	r9, r0
   16ccc:	bhi	16d24 <__assert_fail@plt+0x5d20>
   16cd0:	add	r9, r0, #1
   16cd4:	movw	r3, #41388	; 0xa1ac
   16cd8:	movt	r3, #2
   16cdc:	cmp	r6, r3
   16ce0:	str	r9, [r5]
   16ce4:	beq	16cf0 <__assert_fail@plt+0x5cec>
   16ce8:	mov	r0, r6
   16cec:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   16cf0:	mov	r0, r9
   16cf4:	bl	17504 <__assert_fail@plt+0x6500>
   16cf8:	ldr	r3, [r4, #16]
   16cfc:	mov	r2, sl
   16d00:	mov	r1, r9
   16d04:	mov	r6, r0
   16d08:	ldr	lr, [r4, #56]	; 0x38
   16d0c:	ldr	ip, [r4, #60]	; 0x3c
   16d10:	str	r0, [r5, #4]
   16d14:	stm	sp, {r3, r7, fp, lr}
   16d18:	mvn	r3, #0
   16d1c:	str	ip, [sp, #16]
   16d20:	bl	1349c <__assert_fail@plt+0x2498>
   16d24:	ldr	r3, [sp, #28]
   16d28:	mov	r0, r6
   16d2c:	str	r3, [r8]
   16d30:	add	sp, sp, #44	; 0x2c
   16d34:	ldrd	r4, [sp]
   16d38:	ldrd	r6, [sp, #8]
   16d3c:	ldrd	r8, [sp, #16]
   16d40:	ldrd	sl, [sp, #24]
   16d44:	add	sp, sp, #32
   16d48:	pop	{pc}		; (ldr pc, [sp], #4)
   16d4c:	mov	r0, #8
   16d50:	mvn	r3, #-2147483648	; 0x80000000
   16d54:	add	r1, sp, #36	; 0x24
   16d58:	str	r0, [sp]
   16d5c:	mov	r0, #0
   16d60:	bl	177a8 <__assert_fail@plt+0x67a4>
   16d64:	ldrd	r2, [r4, #8]
   16d68:	mov	r5, r0
   16d6c:	str	r0, [r4]
   16d70:	strd	r2, [r0]
   16d74:	b	16c60 <__assert_fail@plt+0x5c5c>
   16d78:	andeq	sl, r2, r0, lsr #2
   16d7c:	cmp	r1, #0
   16d80:	strd	r4, [sp, #-16]!
   16d84:	mov	ip, r3
   16d88:	str	r6, [sp, #8]
   16d8c:	mov	r4, r0
   16d90:	str	lr, [sp, #12]
   16d94:	sub	sp, sp, #32
   16d98:	ldr	r5, [sp, #48]	; 0x30
   16d9c:	ldr	r6, [sp, #52]	; 0x34
   16da0:	beq	16ee4 <__assert_fail@plt+0x5ee0>
   16da4:	mov	r3, r1
   16da8:	mov	r1, #1
   16dac:	stm	sp, {r2, ip}
   16db0:	movw	r2, #36408	; 0x8e38
   16db4:	movt	r2, #1
   16db8:	bl	10f38 <__fprintf_chk@plt>
   16dbc:	mov	r2, #5
   16dc0:	movw	r1, #36428	; 0x8e4c
   16dc4:	movt	r1, #1
   16dc8:	mov	r0, #0
   16dcc:	bl	10e0c <dcgettext@plt>
   16dd0:	movw	ip, #2022	; 0x7e6
   16dd4:	mov	r3, r0
   16dd8:	mov	r1, #1
   16ddc:	movw	r2, #37156	; 0x9124
   16de0:	movt	r2, #1
   16de4:	mov	r0, r4
   16de8:	str	ip, [sp]
   16dec:	bl	10f38 <__fprintf_chk@plt>
   16df0:	mov	r1, r4
   16df4:	mov	r0, #10
   16df8:	bl	10e00 <fputc_unlocked@plt>
   16dfc:	mov	r2, #5
   16e00:	movw	r1, #36432	; 0x8e50
   16e04:	movt	r1, #1
   16e08:	mov	r0, #0
   16e0c:	bl	10e0c <dcgettext@plt>
   16e10:	mov	r2, r0
   16e14:	mov	r1, #1
   16e18:	movw	r3, #36604	; 0x8efc
   16e1c:	movt	r3, #1
   16e20:	mov	r0, r4
   16e24:	bl	10f38 <__fprintf_chk@plt>
   16e28:	mov	r1, r4
   16e2c:	mov	r0, #10
   16e30:	bl	10e00 <fputc_unlocked@plt>
   16e34:	cmp	r6, #9
   16e38:	ldrls	pc, [pc, r6, lsl #2]
   16e3c:	b	17150 <__assert_fail@plt+0x614c>
   16e40:	ldrdeq	r6, [r1], -r0
   16e44:	andeq	r6, r1, r0, lsl #30
   16e48:	andeq	r6, r1, ip, lsr pc
   16e4c:	andeq	r6, r1, ip, ror pc
   16e50:	andeq	r6, r1, r4, asr #31
   16e54:	strdeq	r6, [r1], -ip
   16e58:	andeq	r7, r1, r4, asr #32
   16e5c:	muleq	r1, r8, r0
   16e60:	strdeq	r7, [r1], -r0
   16e64:	andeq	r6, r1, r8, ror #28
   16e68:	movw	r1, #36908	; 0x902c
   16e6c:	movt	r1, #1
   16e70:	mov	r2, #5
   16e74:	mov	r0, #0
   16e78:	bl	10e0c <dcgettext@plt>
   16e7c:	ldr	lr, [r5, #4]
   16e80:	mov	r2, r0
   16e84:	mov	r1, #1
   16e88:	mov	r0, r4
   16e8c:	ldr	r3, [r5, #8]
   16e90:	ldr	ip, [r5, #32]
   16e94:	str	lr, [sp]
   16e98:	ldr	lr, [r5, #12]
   16e9c:	str	ip, [sp, #28]
   16ea0:	ldr	ip, [r5, #28]
   16ea4:	str	r3, [sp, #4]
   16ea8:	ldr	r3, [r5, #16]
   16eac:	str	lr, [sp, #8]
   16eb0:	ldr	lr, [r5, #20]
   16eb4:	str	ip, [sp, #24]
   16eb8:	ldr	ip, [r5, #24]
   16ebc:	str	r3, [sp, #12]
   16ec0:	ldr	r3, [r5]
   16ec4:	str	lr, [sp, #16]
   16ec8:	str	ip, [sp, #20]
   16ecc:	bl	10f38 <__fprintf_chk@plt>
   16ed0:	add	sp, sp, #32
   16ed4:	ldrd	r4, [sp]
   16ed8:	ldr	r6, [sp, #8]
   16edc:	add	sp, sp, #12
   16ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ee4:	mov	r3, r2
   16ee8:	mov	r1, #1
   16eec:	str	ip, [sp]
   16ef0:	movw	r2, #36420	; 0x8e44
   16ef4:	movt	r2, #1
   16ef8:	bl	10f38 <__fprintf_chk@plt>
   16efc:	b	16dbc <__assert_fail@plt+0x5db8>
   16f00:	mov	r2, #5
   16f04:	movw	r1, #36640	; 0x8f20
   16f08:	movt	r1, #1
   16f0c:	mov	r0, #0
   16f10:	bl	10e0c <dcgettext@plt>
   16f14:	ldr	r3, [r5]
   16f18:	mov	r2, r0
   16f1c:	mov	r1, #1
   16f20:	mov	r0, r4
   16f24:	add	sp, sp, #32
   16f28:	ldrd	r4, [sp]
   16f2c:	ldr	r6, [sp, #8]
   16f30:	ldr	lr, [sp, #12]
   16f34:	add	sp, sp, #16
   16f38:	b	10f38 <__fprintf_chk@plt>
   16f3c:	mov	r2, #5
   16f40:	movw	r1, #36656	; 0x8f30
   16f44:	movt	r1, #1
   16f48:	mov	r0, #0
   16f4c:	bl	10e0c <dcgettext@plt>
   16f50:	ldm	r5, {r3, ip}
   16f54:	mov	r2, r0
   16f58:	mov	r1, #1
   16f5c:	mov	r0, r4
   16f60:	str	ip, [sp, #48]	; 0x30
   16f64:	add	sp, sp, #32
   16f68:	ldrd	r4, [sp]
   16f6c:	ldr	r6, [sp, #8]
   16f70:	ldr	lr, [sp, #12]
   16f74:	add	sp, sp, #16
   16f78:	b	10f38 <__fprintf_chk@plt>
   16f7c:	mov	r2, #5
   16f80:	movw	r1, #36680	; 0x8f48
   16f84:	movt	r1, #1
   16f88:	mov	r0, #0
   16f8c:	bl	10e0c <dcgettext@plt>
   16f90:	ldm	r5, {r3, lr}
   16f94:	mov	r2, r0
   16f98:	mov	r1, #1
   16f9c:	mov	r0, r4
   16fa0:	ldr	ip, [r5, #8]
   16fa4:	str	lr, [sp, #48]	; 0x30
   16fa8:	str	ip, [sp, #52]	; 0x34
   16fac:	add	sp, sp, #32
   16fb0:	ldrd	r4, [sp]
   16fb4:	ldr	r6, [sp, #8]
   16fb8:	ldr	lr, [sp, #12]
   16fbc:	add	sp, sp, #16
   16fc0:	b	10f38 <__fprintf_chk@plt>
   16fc4:	mov	r2, #5
   16fc8:	movw	r1, #36708	; 0x8f64
   16fcc:	movt	r1, #1
   16fd0:	mov	r0, #0
   16fd4:	bl	10e0c <dcgettext@plt>
   16fd8:	ldmib	r5, {r3, ip, lr}
   16fdc:	mov	r2, r0
   16fe0:	mov	r1, #1
   16fe4:	mov	r0, r4
   16fe8:	str	r3, [sp]
   16fec:	ldr	r3, [r5]
   16ff0:	stmib	sp, {ip, lr}
   16ff4:	bl	10f38 <__fprintf_chk@plt>
   16ff8:	b	16ed0 <__assert_fail@plt+0x5ecc>
   16ffc:	mov	r2, #5
   17000:	movw	r1, #36740	; 0x8f84
   17004:	movt	r1, #1
   17008:	mov	r0, #0
   1700c:	bl	10e0c <dcgettext@plt>
   17010:	ldmib	r5, {ip, lr}
   17014:	mov	r2, r0
   17018:	mov	r1, #1
   1701c:	mov	r0, r4
   17020:	ldr	r3, [r5, #16]
   17024:	str	ip, [sp]
   17028:	ldr	ip, [r5, #12]
   1702c:	str	r3, [sp, #12]
   17030:	ldr	r3, [r5]
   17034:	str	lr, [sp, #4]
   17038:	str	ip, [sp, #8]
   1703c:	bl	10f38 <__fprintf_chk@plt>
   17040:	b	16ed0 <__assert_fail@plt+0x5ecc>
   17044:	mov	r2, #5
   17048:	movw	r1, #36776	; 0x8fa8
   1704c:	movt	r1, #1
   17050:	mov	r0, #0
   17054:	bl	10e0c <dcgettext@plt>
   17058:	ldr	lr, [r5, #4]
   1705c:	mov	r2, r0
   17060:	mov	r1, #1
   17064:	mov	r0, r4
   17068:	ldr	r3, [r5, #8]
   1706c:	ldr	ip, [r5, #20]
   17070:	str	lr, [sp]
   17074:	ldr	lr, [r5, #12]
   17078:	str	ip, [sp, #16]
   1707c:	ldr	ip, [r5, #16]
   17080:	str	r3, [sp, #4]
   17084:	ldr	r3, [r5]
   17088:	str	lr, [sp, #8]
   1708c:	str	ip, [sp, #12]
   17090:	bl	10f38 <__fprintf_chk@plt>
   17094:	b	16ed0 <__assert_fail@plt+0x5ecc>
   17098:	mov	r2, #5
   1709c:	movw	r1, #36816	; 0x8fd0
   170a0:	movt	r1, #1
   170a4:	mov	r0, #0
   170a8:	bl	10e0c <dcgettext@plt>
   170ac:	ldmib	r5, {r3, ip}
   170b0:	mov	r2, r0
   170b4:	mov	r1, #1
   170b8:	mov	r0, r4
   170bc:	ldr	lr, [r5, #24]
   170c0:	str	r3, [sp]
   170c4:	ldr	r3, [r5, #12]
   170c8:	str	lr, [sp, #20]
   170cc:	ldr	lr, [r5, #20]
   170d0:	str	ip, [sp, #4]
   170d4:	ldr	ip, [r5, #16]
   170d8:	str	r3, [sp, #8]
   170dc:	ldr	r3, [r5]
   170e0:	str	ip, [sp, #12]
   170e4:	str	lr, [sp, #16]
   170e8:	bl	10f38 <__fprintf_chk@plt>
   170ec:	b	16ed0 <__assert_fail@plt+0x5ecc>
   170f0:	mov	r2, #5
   170f4:	movw	r1, #36860	; 0x8ffc
   170f8:	movt	r1, #1
   170fc:	mov	r0, #0
   17100:	bl	10e0c <dcgettext@plt>
   17104:	ldmib	r5, {ip, lr}
   17108:	mov	r2, r0
   1710c:	mov	r1, #1
   17110:	mov	r0, r4
   17114:	ldr	r3, [r5, #28]
   17118:	str	ip, [sp]
   1711c:	ldr	ip, [r5, #12]
   17120:	str	r3, [sp, #24]
   17124:	ldr	r3, [r5, #24]
   17128:	str	lr, [sp, #4]
   1712c:	ldr	lr, [r5, #16]
   17130:	str	ip, [sp, #8]
   17134:	ldr	ip, [r5, #20]
   17138:	str	r3, [sp, #20]
   1713c:	ldr	r3, [r5]
   17140:	str	lr, [sp, #12]
   17144:	str	ip, [sp, #16]
   17148:	bl	10f38 <__fprintf_chk@plt>
   1714c:	b	16ed0 <__assert_fail@plt+0x5ecc>
   17150:	movw	r1, #36960	; 0x9060
   17154:	movt	r1, #1
   17158:	b	16e70 <__assert_fail@plt+0x5e6c>
   1715c:	strd	r4, [sp, #-12]!
   17160:	str	lr, [sp, #8]
   17164:	sub	sp, sp, #12
   17168:	ldr	r5, [sp, #24]
   1716c:	ldr	ip, [r5]
   17170:	cmp	ip, #0
   17174:	beq	17190 <__assert_fail@plt+0x618c>
   17178:	mov	lr, r5
   1717c:	mov	ip, #0
   17180:	ldr	r4, [lr, #4]!
   17184:	add	ip, ip, #1
   17188:	cmp	r4, #0
   1718c:	bne	17180 <__assert_fail@plt+0x617c>
   17190:	stm	sp, {r5, ip}
   17194:	bl	16d7c <__assert_fail@plt+0x5d78>
   17198:	add	sp, sp, #12
   1719c:	ldrd	r4, [sp]
   171a0:	add	sp, sp, #8
   171a4:	pop	{pc}		; (ldr pc, [sp], #4)
   171a8:	push	{lr}		; (str lr, [sp, #-4]!)
   171ac:	sub	sp, sp, #52	; 0x34
   171b0:	ldr	ip, [sp, #56]	; 0x38
   171b4:	ldr	lr, [ip]
   171b8:	cmp	lr, #0
   171bc:	str	lr, [sp, #8]
   171c0:	beq	17258 <__assert_fail@plt+0x6254>
   171c4:	ldr	lr, [ip, #4]
   171c8:	cmp	lr, #0
   171cc:	str	lr, [sp, #12]
   171d0:	beq	1726c <__assert_fail@plt+0x6268>
   171d4:	ldr	lr, [ip, #8]
   171d8:	cmp	lr, #0
   171dc:	str	lr, [sp, #16]
   171e0:	beq	17274 <__assert_fail@plt+0x6270>
   171e4:	ldr	lr, [ip, #12]
   171e8:	cmp	lr, #0
   171ec:	str	lr, [sp, #20]
   171f0:	beq	1727c <__assert_fail@plt+0x6278>
   171f4:	ldr	lr, [ip, #16]
   171f8:	cmp	lr, #0
   171fc:	str	lr, [sp, #24]
   17200:	beq	17284 <__assert_fail@plt+0x6280>
   17204:	ldr	lr, [ip, #20]
   17208:	cmp	lr, #0
   1720c:	str	lr, [sp, #28]
   17210:	beq	1728c <__assert_fail@plt+0x6288>
   17214:	ldr	lr, [ip, #24]
   17218:	cmp	lr, #0
   1721c:	str	lr, [sp, #32]
   17220:	beq	17294 <__assert_fail@plt+0x6290>
   17224:	ldr	lr, [ip, #28]
   17228:	cmp	lr, #0
   1722c:	str	lr, [sp, #36]	; 0x24
   17230:	beq	1729c <__assert_fail@plt+0x6298>
   17234:	ldr	lr, [ip, #32]
   17238:	cmp	lr, #0
   1723c:	str	lr, [sp, #40]	; 0x28
   17240:	beq	172a4 <__assert_fail@plt+0x62a0>
   17244:	ldr	ip, [ip, #36]	; 0x24
   17248:	cmp	ip, #0
   1724c:	str	ip, [sp, #44]	; 0x2c
   17250:	movne	lr, #10
   17254:	moveq	lr, #9
   17258:	add	ip, sp, #8
   1725c:	stm	sp, {ip, lr}
   17260:	bl	16d7c <__assert_fail@plt+0x5d78>
   17264:	add	sp, sp, #52	; 0x34
   17268:	pop	{pc}		; (ldr pc, [sp], #4)
   1726c:	mov	lr, #1
   17270:	b	17258 <__assert_fail@plt+0x6254>
   17274:	mov	lr, #2
   17278:	b	17258 <__assert_fail@plt+0x6254>
   1727c:	mov	lr, #3
   17280:	b	17258 <__assert_fail@plt+0x6254>
   17284:	mov	lr, #4
   17288:	b	17258 <__assert_fail@plt+0x6254>
   1728c:	mov	lr, #5
   17290:	b	17258 <__assert_fail@plt+0x6254>
   17294:	mov	lr, #6
   17298:	b	17258 <__assert_fail@plt+0x6254>
   1729c:	mov	lr, #7
   172a0:	b	17258 <__assert_fail@plt+0x6254>
   172a4:	mov	lr, #8
   172a8:	b	17258 <__assert_fail@plt+0x6254>
   172ac:	push	{r3}		; (str r3, [sp, #-4]!)
   172b0:	push	{lr}		; (str lr, [sp, #-4]!)
   172b4:	sub	sp, sp, #56	; 0x38
   172b8:	ldr	ip, [sp, #64]	; 0x40
   172bc:	add	r3, sp, #64	; 0x40
   172c0:	str	r3, [sp, #12]
   172c4:	cmp	ip, #0
   172c8:	str	ip, [sp, #16]
   172cc:	beq	17364 <__assert_fail@plt+0x6360>
   172d0:	ldr	ip, [sp, #68]	; 0x44
   172d4:	cmp	ip, #0
   172d8:	str	ip, [sp, #20]
   172dc:	beq	17388 <__assert_fail@plt+0x6384>
   172e0:	ldr	ip, [sp, #72]	; 0x48
   172e4:	cmp	ip, #0
   172e8:	str	ip, [sp, #24]
   172ec:	beq	17390 <__assert_fail@plt+0x638c>
   172f0:	ldr	ip, [sp, #76]	; 0x4c
   172f4:	cmp	ip, #0
   172f8:	str	ip, [sp, #28]
   172fc:	beq	17398 <__assert_fail@plt+0x6394>
   17300:	ldr	ip, [sp, #80]	; 0x50
   17304:	cmp	ip, #0
   17308:	str	ip, [sp, #32]
   1730c:	beq	173a0 <__assert_fail@plt+0x639c>
   17310:	ldr	ip, [sp, #84]	; 0x54
   17314:	cmp	ip, #0
   17318:	str	ip, [sp, #36]	; 0x24
   1731c:	beq	173a8 <__assert_fail@plt+0x63a4>
   17320:	ldr	ip, [sp, #88]	; 0x58
   17324:	cmp	ip, #0
   17328:	str	ip, [sp, #40]	; 0x28
   1732c:	beq	173b0 <__assert_fail@plt+0x63ac>
   17330:	ldr	ip, [sp, #92]	; 0x5c
   17334:	cmp	ip, #0
   17338:	str	ip, [sp, #44]	; 0x2c
   1733c:	beq	173b8 <__assert_fail@plt+0x63b4>
   17340:	ldr	ip, [sp, #96]	; 0x60
   17344:	cmp	ip, #0
   17348:	str	ip, [sp, #48]	; 0x30
   1734c:	beq	173c0 <__assert_fail@plt+0x63bc>
   17350:	ldr	r3, [sp, #100]	; 0x64
   17354:	cmp	r3, #0
   17358:	str	r3, [sp, #52]	; 0x34
   1735c:	movne	ip, #10
   17360:	moveq	ip, #9
   17364:	ldr	r3, [sp, #60]	; 0x3c
   17368:	add	lr, sp, #16
   1736c:	str	lr, [sp]
   17370:	str	ip, [sp, #4]
   17374:	bl	16d7c <__assert_fail@plt+0x5d78>
   17378:	add	sp, sp, #56	; 0x38
   1737c:	pop	{lr}		; (ldr lr, [sp], #4)
   17380:	add	sp, sp, #4
   17384:	bx	lr
   17388:	mov	ip, #1
   1738c:	b	17364 <__assert_fail@plt+0x6360>
   17390:	mov	ip, #2
   17394:	b	17364 <__assert_fail@plt+0x6360>
   17398:	mov	ip, #3
   1739c:	b	17364 <__assert_fail@plt+0x6360>
   173a0:	mov	ip, #4
   173a4:	b	17364 <__assert_fail@plt+0x6360>
   173a8:	mov	ip, #5
   173ac:	b	17364 <__assert_fail@plt+0x6360>
   173b0:	mov	ip, #6
   173b4:	b	17364 <__assert_fail@plt+0x6360>
   173b8:	mov	ip, #7
   173bc:	b	17364 <__assert_fail@plt+0x6360>
   173c0:	mov	ip, #8
   173c4:	b	17364 <__assert_fail@plt+0x6360>
   173c8:	movw	r3, #41316	; 0xa164
   173cc:	movt	r3, #2
   173d0:	str	r4, [sp, #-8]!
   173d4:	mov	r0, #10
   173d8:	ldr	r1, [r3]
   173dc:	str	lr, [sp, #4]
   173e0:	bl	10e00 <fputc_unlocked@plt>
   173e4:	mov	r2, #5
   173e8:	movw	r1, #37020	; 0x909c
   173ec:	movt	r1, #1
   173f0:	mov	r0, #0
   173f4:	bl	10e0c <dcgettext@plt>
   173f8:	mov	r1, r0
   173fc:	movw	r2, #37040	; 0x90b0
   17400:	movt	r2, #1
   17404:	mov	r0, #1
   17408:	bl	10f20 <__printf_chk@plt>
   1740c:	mov	r2, #5
   17410:	movw	r1, #37064	; 0x90c8
   17414:	movt	r1, #1
   17418:	mov	r0, #0
   1741c:	bl	10e0c <dcgettext@plt>
   17420:	mov	r1, r0
   17424:	movw	r3, #34896	; 0x8850
   17428:	movt	r3, #1
   1742c:	movw	r2, #34936	; 0x8878
   17430:	movt	r2, #1
   17434:	mov	r0, #1
   17438:	bl	10f20 <__printf_chk@plt>
   1743c:	mov	r2, #5
   17440:	movw	r1, #37084	; 0x90dc
   17444:	movt	r1, #1
   17448:	mov	r0, #0
   1744c:	bl	10e0c <dcgettext@plt>
   17450:	mov	r1, r0
   17454:	movw	r2, #37124	; 0x9104
   17458:	movt	r2, #1
   1745c:	mov	r0, #1
   17460:	ldr	r4, [sp]
   17464:	ldr	lr, [sp, #4]
   17468:	add	sp, sp, #8
   1746c:	b	10f20 <__printf_chk@plt>
   17470:	strd	r4, [sp, #-16]!
   17474:	mov	r4, r0
   17478:	mov	r5, r2
   1747c:	str	r6, [sp, #8]
   17480:	mov	r6, r1
   17484:	str	lr, [sp, #12]
   17488:	bl	17e90 <__assert_fail@plt+0x6e8c>
   1748c:	cmp	r0, #0
   17490:	beq	174a4 <__assert_fail@plt+0x64a0>
   17494:	ldrd	r4, [sp]
   17498:	ldr	r6, [sp, #8]
   1749c:	add	sp, sp, #12
   174a0:	pop	{pc}		; (ldr pc, [sp], #4)
   174a4:	cmp	r4, #0
   174a8:	beq	174b8 <__assert_fail@plt+0x64b4>
   174ac:	cmp	r6, #0
   174b0:	cmpne	r5, #0
   174b4:	beq	17494 <__assert_fail@plt+0x6490>
   174b8:	bl	17a74 <__assert_fail@plt+0x6a70>
   174bc:	str	r4, [sp, #-8]!
   174c0:	str	lr, [sp, #4]
   174c4:	bl	17b2c <__assert_fail@plt+0x6b28>
   174c8:	cmp	r0, #0
   174cc:	beq	174dc <__assert_fail@plt+0x64d8>
   174d0:	ldr	r4, [sp]
   174d4:	add	sp, sp, #4
   174d8:	pop	{pc}		; (ldr pc, [sp], #4)
   174dc:	bl	17a74 <__assert_fail@plt+0x6a70>
   174e0:	str	r4, [sp, #-8]!
   174e4:	str	lr, [sp, #4]
   174e8:	bl	17b2c <__assert_fail@plt+0x6b28>
   174ec:	cmp	r0, #0
   174f0:	beq	17500 <__assert_fail@plt+0x64fc>
   174f4:	ldr	r4, [sp]
   174f8:	add	sp, sp, #4
   174fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17500:	bl	17a74 <__assert_fail@plt+0x6a70>
   17504:	str	r4, [sp, #-8]!
   17508:	str	lr, [sp, #4]
   1750c:	bl	17b2c <__assert_fail@plt+0x6b28>
   17510:	cmp	r0, #0
   17514:	beq	17524 <__assert_fail@plt+0x6520>
   17518:	ldr	r4, [sp]
   1751c:	add	sp, sp, #4
   17520:	pop	{pc}		; (ldr pc, [sp], #4)
   17524:	bl	17a74 <__assert_fail@plt+0x6a70>
   17528:	strd	r4, [sp, #-16]!
   1752c:	mov	r5, r0
   17530:	mov	r4, r1
   17534:	str	r6, [sp, #8]
   17538:	str	lr, [sp, #12]
   1753c:	bl	17b68 <__assert_fail@plt+0x6b64>
   17540:	cmp	r0, #0
   17544:	beq	17558 <__assert_fail@plt+0x6554>
   17548:	ldrd	r4, [sp]
   1754c:	ldr	r6, [sp, #8]
   17550:	add	sp, sp, #12
   17554:	pop	{pc}		; (ldr pc, [sp], #4)
   17558:	adds	r4, r4, #0
   1755c:	movne	r4, #1
   17560:	cmp	r5, #0
   17564:	moveq	r4, #1
   17568:	cmp	r4, #0
   1756c:	beq	17548 <__assert_fail@plt+0x6544>
   17570:	bl	17a74 <__assert_fail@plt+0x6a70>
   17574:	cmp	r1, #0
   17578:	orreq	r1, r1, #1
   1757c:	str	r4, [sp, #-8]!
   17580:	str	lr, [sp, #4]
   17584:	bl	17b68 <__assert_fail@plt+0x6b64>
   17588:	cmp	r0, #0
   1758c:	beq	1759c <__assert_fail@plt+0x6598>
   17590:	ldr	r4, [sp]
   17594:	add	sp, sp, #4
   17598:	pop	{pc}		; (ldr pc, [sp], #4)
   1759c:	bl	17a74 <__assert_fail@plt+0x6a70>
   175a0:	strd	r4, [sp, #-16]!
   175a4:	mov	r4, r0
   175a8:	mov	r5, r2
   175ac:	str	r6, [sp, #8]
   175b0:	mov	r6, r1
   175b4:	str	lr, [sp, #12]
   175b8:	bl	17e90 <__assert_fail@plt+0x6e8c>
   175bc:	cmp	r0, #0
   175c0:	beq	175d4 <__assert_fail@plt+0x65d0>
   175c4:	ldrd	r4, [sp]
   175c8:	ldr	r6, [sp, #8]
   175cc:	add	sp, sp, #12
   175d0:	pop	{pc}		; (ldr pc, [sp], #4)
   175d4:	cmp	r4, #0
   175d8:	beq	175e8 <__assert_fail@plt+0x65e4>
   175dc:	cmp	r6, #0
   175e0:	cmpne	r5, #0
   175e4:	beq	175c4 <__assert_fail@plt+0x65c0>
   175e8:	bl	17a74 <__assert_fail@plt+0x6a70>
   175ec:	cmp	r2, #0
   175f0:	cmpne	r1, #0
   175f4:	str	r4, [sp, #-8]!
   175f8:	moveq	r2, #1
   175fc:	str	lr, [sp, #4]
   17600:	moveq	r1, r2
   17604:	bl	17e90 <__assert_fail@plt+0x6e8c>
   17608:	cmp	r0, #0
   1760c:	beq	1761c <__assert_fail@plt+0x6618>
   17610:	ldr	r4, [sp]
   17614:	add	sp, sp, #4
   17618:	pop	{pc}		; (ldr pc, [sp], #4)
   1761c:	bl	17a74 <__assert_fail@plt+0x6a70>
   17620:	mov	r2, r1
   17624:	mov	r1, r0
   17628:	str	r4, [sp, #-8]!
   1762c:	mov	r0, #0
   17630:	str	lr, [sp, #4]
   17634:	bl	17e90 <__assert_fail@plt+0x6e8c>
   17638:	cmp	r0, #0
   1763c:	beq	1764c <__assert_fail@plt+0x6648>
   17640:	ldr	r4, [sp]
   17644:	add	sp, sp, #4
   17648:	pop	{pc}		; (ldr pc, [sp], #4)
   1764c:	bl	17a74 <__assert_fail@plt+0x6a70>
   17650:	cmp	r1, #0
   17654:	cmpne	r0, #0
   17658:	str	r4, [sp, #-8]!
   1765c:	moveq	r2, #1
   17660:	movne	r2, r1
   17664:	str	lr, [sp, #4]
   17668:	movne	r1, r0
   1766c:	moveq	r1, r2
   17670:	mov	r0, #0
   17674:	bl	17e90 <__assert_fail@plt+0x6e8c>
   17678:	cmp	r0, #0
   1767c:	beq	1768c <__assert_fail@plt+0x6688>
   17680:	ldr	r4, [sp]
   17684:	add	sp, sp, #4
   17688:	pop	{pc}		; (ldr pc, [sp], #4)
   1768c:	bl	17a74 <__assert_fail@plt+0x6a70>
   17690:	cmp	r0, #0
   17694:	strd	r4, [sp, #-16]!
   17698:	mov	r5, r1
   1769c:	ldr	r4, [r1]
   176a0:	str	r6, [sp, #8]
   176a4:	str	lr, [sp, #12]
   176a8:	beq	176f0 <__assert_fail@plt+0x66ec>
   176ac:	lsr	r3, r4, #1
   176b0:	add	r3, r3, #1
   176b4:	adds	r4, r4, r3
   176b8:	bcs	176ec <__assert_fail@plt+0x66e8>
   176bc:	mov	r2, #1
   176c0:	mov	r1, r4
   176c4:	bl	17e90 <__assert_fail@plt+0x6e8c>
   176c8:	cmp	r0, #0
   176cc:	beq	176e4 <__assert_fail@plt+0x66e0>
   176d0:	ldr	r6, [sp, #8]
   176d4:	str	r4, [r5]
   176d8:	ldrd	r4, [sp]
   176dc:	add	sp, sp, #12
   176e0:	pop	{pc}		; (ldr pc, [sp], #4)
   176e4:	cmp	r4, #0
   176e8:	beq	176d0 <__assert_fail@plt+0x66cc>
   176ec:	bl	17a74 <__assert_fail@plt+0x6a70>
   176f0:	cmp	r4, #0
   176f4:	mov	r2, #1
   176f8:	moveq	r4, #64	; 0x40
   176fc:	mov	r1, r4
   17700:	bl	17e90 <__assert_fail@plt+0x6e8c>
   17704:	cmp	r0, #0
   17708:	bne	176d0 <__assert_fail@plt+0x66cc>
   1770c:	b	176ec <__assert_fail@plt+0x66e8>
   17710:	cmp	r0, #0
   17714:	strd	r4, [sp, #-16]!
   17718:	mov	r5, r1
   1771c:	ldr	r4, [r1]
   17720:	str	r6, [sp, #8]
   17724:	mov	r6, r2
   17728:	str	lr, [sp, #12]
   1772c:	beq	17774 <__assert_fail@plt+0x6770>
   17730:	lsr	r3, r4, #1
   17734:	add	r3, r3, #1
   17738:	adds	r4, r4, r3
   1773c:	bcs	17770 <__assert_fail@plt+0x676c>
   17740:	mov	r1, r4
   17744:	bl	17e90 <__assert_fail@plt+0x6e8c>
   17748:	cmp	r0, #0
   1774c:	beq	17764 <__assert_fail@plt+0x6760>
   17750:	ldr	r6, [sp, #8]
   17754:	str	r4, [r5]
   17758:	ldrd	r4, [sp]
   1775c:	add	sp, sp, #12
   17760:	pop	{pc}		; (ldr pc, [sp], #4)
   17764:	cmp	r4, #0
   17768:	cmpne	r6, #0
   1776c:	beq	17750 <__assert_fail@plt+0x674c>
   17770:	bl	17a74 <__assert_fail@plt+0x6a70>
   17774:	cmp	r4, #0
   17778:	bne	1778c <__assert_fail@plt+0x6788>
   1777c:	mov	r4, #64	; 0x40
   17780:	udiv	r4, r4, r2
   17784:	cmp	r2, #64	; 0x40
   17788:	addhi	r4, r4, #1
   1778c:	mov	r2, r6
   17790:	mov	r1, r4
   17794:	mov	r0, #0
   17798:	bl	17e90 <__assert_fail@plt+0x6e8c>
   1779c:	cmp	r0, #0
   177a0:	bne	17750 <__assert_fail@plt+0x674c>
   177a4:	b	17770 <__assert_fail@plt+0x676c>
   177a8:	ldr	ip, [r1]
   177ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   177b0:	strd	r6, [sp, #8]
   177b4:	mov	r7, r1
   177b8:	mov	r6, r0
   177bc:	str	r8, [sp, #16]
   177c0:	mvn	r8, r3
   177c4:	lsr	r8, r8, #31
   177c8:	str	lr, [sp, #20]
   177cc:	asr	r1, ip, #1
   177d0:	ldr	lr, [sp, #24]
   177d4:	adds	r4, ip, r1
   177d8:	mvnvs	r4, #-2147483648	; 0x80000000
   177dc:	cmp	r3, r4
   177e0:	movge	r1, #0
   177e4:	andlt	r1, r8, #1
   177e8:	cmp	r1, #0
   177ec:	movne	r4, r3
   177f0:	smull	r0, r1, r4, lr
   177f4:	cmp	r1, r0, asr #31
   177f8:	bne	178a8 <__assert_fail@plt+0x68a4>
   177fc:	cmp	r0, #63	; 0x3f
   17800:	mov	r5, r0
   17804:	ble	17874 <__assert_fail@plt+0x6870>
   17808:	cmp	r6, #0
   1780c:	sub	r1, r4, ip
   17810:	streq	r6, [r7]
   17814:	cmp	r1, r2
   17818:	bge	17848 <__assert_fail@plt+0x6844>
   1781c:	adds	r4, ip, r2
   17820:	bvs	178a4 <__assert_fail@plt+0x68a0>
   17824:	cmp	r4, r3
   17828:	movle	r3, #0
   1782c:	andgt	r3, r8, #1
   17830:	cmp	r3, #0
   17834:	bne	178a4 <__assert_fail@plt+0x68a0>
   17838:	smull	r0, r1, r4, lr
   1783c:	cmp	r1, r0, asr #31
   17840:	mov	r5, r0
   17844:	bne	178a4 <__assert_fail@plt+0x68a0>
   17848:	mov	r1, r5
   1784c:	mov	r0, r6
   17850:	bl	17b68 <__assert_fail@plt+0x6b64>
   17854:	cmp	r0, #0
   17858:	beq	17888 <__assert_fail@plt+0x6884>
   1785c:	ldr	r8, [sp, #16]
   17860:	str	r4, [r7]
   17864:	ldrd	r4, [sp]
   17868:	ldrd	r6, [sp, #8]
   1786c:	add	sp, sp, #20
   17870:	pop	{pc}		; (ldr pc, [sp], #4)
   17874:	mov	r0, #64	; 0x40
   17878:	sdiv	r4, r0, lr
   1787c:	mls	r5, lr, r4, r0
   17880:	sub	r5, r0, r5
   17884:	b	17808 <__assert_fail@plt+0x6804>
   17888:	adds	r5, r5, #0
   1788c:	movne	r5, #1
   17890:	cmp	r6, #0
   17894:	movne	r6, r5
   17898:	moveq	r6, #1
   1789c:	cmp	r6, #0
   178a0:	beq	1785c <__assert_fail@plt+0x6858>
   178a4:	bl	17a74 <__assert_fail@plt+0x6a70>
   178a8:	mvn	r0, #-2147483648	; 0x80000000
   178ac:	b	17878 <__assert_fail@plt+0x6874>
   178b0:	mov	r1, #1
   178b4:	str	r4, [sp, #-8]!
   178b8:	str	lr, [sp, #4]
   178bc:	bl	17ab8 <__assert_fail@plt+0x6ab4>
   178c0:	cmp	r0, #0
   178c4:	beq	178d4 <__assert_fail@plt+0x68d0>
   178c8:	ldr	r4, [sp]
   178cc:	add	sp, sp, #4
   178d0:	pop	{pc}		; (ldr pc, [sp], #4)
   178d4:	bl	17a74 <__assert_fail@plt+0x6a70>
   178d8:	mov	r1, #1
   178dc:	str	r4, [sp, #-8]!
   178e0:	str	lr, [sp, #4]
   178e4:	bl	17ab8 <__assert_fail@plt+0x6ab4>
   178e8:	cmp	r0, #0
   178ec:	beq	178fc <__assert_fail@plt+0x68f8>
   178f0:	ldr	r4, [sp]
   178f4:	add	sp, sp, #4
   178f8:	pop	{pc}		; (ldr pc, [sp], #4)
   178fc:	bl	17a74 <__assert_fail@plt+0x6a70>
   17900:	str	r4, [sp, #-8]!
   17904:	str	lr, [sp, #4]
   17908:	bl	17ab8 <__assert_fail@plt+0x6ab4>
   1790c:	cmp	r0, #0
   17910:	beq	17920 <__assert_fail@plt+0x691c>
   17914:	ldr	r4, [sp]
   17918:	add	sp, sp, #4
   1791c:	pop	{pc}		; (ldr pc, [sp], #4)
   17920:	bl	17a74 <__assert_fail@plt+0x6a70>
   17924:	str	r4, [sp, #-8]!
   17928:	str	lr, [sp, #4]
   1792c:	bl	17ab8 <__assert_fail@plt+0x6ab4>
   17930:	cmp	r0, #0
   17934:	beq	17944 <__assert_fail@plt+0x6940>
   17938:	ldr	r4, [sp]
   1793c:	add	sp, sp, #4
   17940:	pop	{pc}		; (ldr pc, [sp], #4)
   17944:	bl	17a74 <__assert_fail@plt+0x6a70>
   17948:	strd	r4, [sp, #-16]!
   1794c:	mov	r4, r1
   17950:	str	r6, [sp, #8]
   17954:	mov	r6, r0
   17958:	mov	r0, r1
   1795c:	str	lr, [sp, #12]
   17960:	bl	17b2c <__assert_fail@plt+0x6b28>
   17964:	subs	r5, r0, #0
   17968:	beq	1798c <__assert_fail@plt+0x6988>
   1796c:	mov	r2, r4
   17970:	mov	r1, r6
   17974:	bl	10dd0 <memcpy@plt>
   17978:	mov	r0, r5
   1797c:	ldrd	r4, [sp]
   17980:	ldr	r6, [sp, #8]
   17984:	add	sp, sp, #12
   17988:	pop	{pc}		; (ldr pc, [sp], #4)
   1798c:	bl	17a74 <__assert_fail@plt+0x6a70>
   17990:	strd	r4, [sp, #-16]!
   17994:	mov	r4, r1
   17998:	str	r6, [sp, #8]
   1799c:	mov	r6, r0
   179a0:	mov	r0, r1
   179a4:	str	lr, [sp, #12]
   179a8:	bl	17b2c <__assert_fail@plt+0x6b28>
   179ac:	subs	r5, r0, #0
   179b0:	beq	179d4 <__assert_fail@plt+0x69d0>
   179b4:	mov	r2, r4
   179b8:	mov	r1, r6
   179bc:	bl	10dd0 <memcpy@plt>
   179c0:	mov	r0, r5
   179c4:	ldrd	r4, [sp]
   179c8:	ldr	r6, [sp, #8]
   179cc:	add	sp, sp, #12
   179d0:	pop	{pc}		; (ldr pc, [sp], #4)
   179d4:	bl	17a74 <__assert_fail@plt+0x6a70>
   179d8:	strd	r4, [sp, #-16]!
   179dc:	mov	r4, r1
   179e0:	str	r6, [sp, #8]
   179e4:	mov	r6, r0
   179e8:	add	r0, r1, #1
   179ec:	str	lr, [sp, #12]
   179f0:	bl	17b2c <__assert_fail@plt+0x6b28>
   179f4:	subs	r5, r0, #0
   179f8:	beq	17a24 <__assert_fail@plt+0x6a20>
   179fc:	mov	r3, #0
   17a00:	mov	r1, r6
   17a04:	mov	r2, r4
   17a08:	strb	r3, [r5, r4]
   17a0c:	bl	10dd0 <memcpy@plt>
   17a10:	mov	r0, r5
   17a14:	ldrd	r4, [sp]
   17a18:	ldr	r6, [sp, #8]
   17a1c:	add	sp, sp, #12
   17a20:	pop	{pc}		; (ldr pc, [sp], #4)
   17a24:	bl	17a74 <__assert_fail@plt+0x6a70>
   17a28:	strd	r4, [sp, #-16]!
   17a2c:	str	r6, [sp, #8]
   17a30:	mov	r6, r0
   17a34:	str	lr, [sp, #12]
   17a38:	bl	10ed8 <strlen@plt>
   17a3c:	add	r4, r0, #1
   17a40:	mov	r0, r4
   17a44:	bl	17b2c <__assert_fail@plt+0x6b28>
   17a48:	subs	r5, r0, #0
   17a4c:	beq	17a70 <__assert_fail@plt+0x6a6c>
   17a50:	mov	r2, r4
   17a54:	mov	r1, r6
   17a58:	bl	10dd0 <memcpy@plt>
   17a5c:	mov	r0, r5
   17a60:	ldrd	r4, [sp]
   17a64:	ldr	r6, [sp, #8]
   17a68:	add	sp, sp, #12
   17a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a70:	bl	17a74 <__assert_fail@plt+0x6a70>
   17a74:	movw	r3, #41220	; 0xa104
   17a78:	movt	r3, #2
   17a7c:	str	r4, [sp, #-8]!
   17a80:	ldr	r4, [r3]
   17a84:	mov	r2, #5
   17a88:	movw	r1, #37204	; 0x9154
   17a8c:	movt	r1, #1
   17a90:	mov	r0, #0
   17a94:	str	lr, [sp, #4]
   17a98:	bl	10e0c <dcgettext@plt>
   17a9c:	mov	r3, r0
   17aa0:	movw	r2, #36124	; 0x8d1c
   17aa4:	movt	r2, #1
   17aa8:	mov	r1, #0
   17aac:	mov	r0, r4
   17ab0:	bl	10e78 <error@plt>
   17ab4:	bl	10fec <abort@plt>
   17ab8:	cmp	r1, #0
   17abc:	cmpne	r0, #0
   17ac0:	beq	17b0c <__assert_fail@plt+0x6b08>
   17ac4:	strd	r4, [sp, #-16]!
   17ac8:	umull	r4, r5, r0, r1
   17acc:	str	r6, [sp, #8]
   17ad0:	str	lr, [sp, #12]
   17ad4:	adds	r3, r5, #0
   17ad8:	movne	r3, #1
   17adc:	cmp	r4, #0
   17ae0:	blt	17aec <__assert_fail@plt+0x6ae8>
   17ae4:	cmp	r3, #0
   17ae8:	beq	17b18 <__assert_fail@plt+0x6b14>
   17aec:	bl	10ef0 <__errno_location@plt>
   17af0:	mov	r3, #12
   17af4:	ldrd	r4, [sp]
   17af8:	ldr	r6, [sp, #8]
   17afc:	add	sp, sp, #12
   17b00:	str	r3, [r0]
   17b04:	mov	r0, #0
   17b08:	pop	{pc}		; (ldr pc, [sp], #4)
   17b0c:	mov	r1, #1
   17b10:	mov	r0, r1
   17b14:	b	10d64 <calloc@plt>
   17b18:	ldrd	r4, [sp]
   17b1c:	ldr	r6, [sp, #8]
   17b20:	ldr	lr, [sp, #12]
   17b24:	add	sp, sp, #16
   17b28:	b	10d64 <calloc@plt>
   17b2c:	cmp	r0, #0
   17b30:	beq	17b3c <__assert_fail@plt+0x6b38>
   17b34:	blt	17b44 <__assert_fail@plt+0x6b40>
   17b38:	b	10e84 <malloc@plt>
   17b3c:	mov	r0, #1
   17b40:	b	10e84 <malloc@plt>
   17b44:	str	r4, [sp, #-8]!
   17b48:	str	lr, [sp, #4]
   17b4c:	bl	10ef0 <__errno_location@plt>
   17b50:	mov	r3, #12
   17b54:	ldr	r4, [sp]
   17b58:	add	sp, sp, #4
   17b5c:	str	r3, [r0]
   17b60:	mov	r0, #0
   17b64:	pop	{pc}		; (ldr pc, [sp], #4)
   17b68:	cmp	r0, #0
   17b6c:	beq	17b94 <__assert_fail@plt+0x6b90>
   17b70:	cmp	r1, #0
   17b74:	str	r4, [sp, #-8]!
   17b78:	str	lr, [sp, #4]
   17b7c:	beq	17b9c <__assert_fail@plt+0x6b98>
   17b80:	blt	17bb0 <__assert_fail@plt+0x6bac>
   17b84:	ldr	r4, [sp]
   17b88:	ldr	lr, [sp, #4]
   17b8c:	add	sp, sp, #8
   17b90:	b	10e18 <realloc@plt>
   17b94:	mov	r0, r1
   17b98:	b	17b2c <__assert_fail@plt+0x6b28>
   17b9c:	bl	12cb4 <__assert_fail@plt+0x1cb0>
   17ba0:	ldr	r4, [sp]
   17ba4:	add	sp, sp, #4
   17ba8:	mov	r0, #0
   17bac:	pop	{pc}		; (ldr pc, [sp], #4)
   17bb0:	bl	10ef0 <__errno_location@plt>
   17bb4:	mov	r3, #12
   17bb8:	str	r3, [r0]
   17bbc:	b	17ba0 <__assert_fail@plt+0x6b9c>
   17bc0:	strd	r4, [sp, #-16]!
   17bc4:	mov	r4, r0
   17bc8:	str	r6, [sp, #8]
   17bcc:	str	lr, [sp, #12]
   17bd0:	bl	10e60 <__fpending@plt>
   17bd4:	ldr	r5, [r4]
   17bd8:	mov	r6, r0
   17bdc:	mov	r0, r4
   17be0:	bl	12ba0 <__assert_fail@plt+0x1b9c>
   17be4:	mov	r4, r0
   17be8:	and	r5, r5, #32
   17bec:	cmp	r5, #0
   17bf0:	bne	17c28 <__assert_fail@plt+0x6c24>
   17bf4:	cmp	r0, #0
   17bf8:	beq	17c14 <__assert_fail@plt+0x6c10>
   17bfc:	cmp	r6, #0
   17c00:	bne	17c40 <__assert_fail@plt+0x6c3c>
   17c04:	bl	10ef0 <__errno_location@plt>
   17c08:	ldr	r4, [r0]
   17c0c:	subs	r4, r4, #9
   17c10:	mvnne	r4, #0
   17c14:	mov	r0, r4
   17c18:	ldrd	r4, [sp]
   17c1c:	ldr	r6, [sp, #8]
   17c20:	add	sp, sp, #12
   17c24:	pop	{pc}		; (ldr pc, [sp], #4)
   17c28:	cmp	r0, #0
   17c2c:	bne	17c40 <__assert_fail@plt+0x6c3c>
   17c30:	bl	10ef0 <__errno_location@plt>
   17c34:	str	r4, [r0]
   17c38:	mvn	r4, #0
   17c3c:	b	17c14 <__assert_fail@plt+0x6c10>
   17c40:	mvn	r4, #0
   17c44:	b	17c14 <__assert_fail@plt+0x6c10>
   17c48:	mov	r3, r0
   17c4c:	ldr	r2, [r0, #16]
   17c50:	ldr	r0, [r0, #20]
   17c54:	cmp	r0, r2
   17c58:	bhi	17c70 <__assert_fail@plt+0x6c6c>
   17c5c:	ldmib	r3, {r0, r3}
   17c60:	subs	r3, r3, r0
   17c64:	beq	17c70 <__assert_fail@plt+0x6c6c>
   17c68:	str	r3, [r1]
   17c6c:	bx	lr
   17c70:	mov	r0, #0
   17c74:	bx	lr
   17c78:	strd	r4, [sp, #-20]!	; 0xffffffec
   17c7c:	subs	r4, r1, #0
   17c80:	strd	r6, [sp, #8]
   17c84:	str	lr, [sp, #16]
   17c88:	sub	sp, sp, #4096	; 0x1000
   17c8c:	sub	sp, sp, #12
   17c90:	beq	17d3c <__assert_fail@plt+0x6d38>
   17c94:	mov	r6, r0
   17c98:	bl	17ec8 <__assert_fail@plt+0x6ec4>
   17c9c:	subs	r5, r0, #0
   17ca0:	beq	17d44 <__assert_fail@plt+0x6d40>
   17ca4:	add	r7, sp, #8
   17ca8:	b	17cbc <__assert_fail@plt+0x6cb8>
   17cac:	subs	r4, r4, #1
   17cb0:	beq	17d94 <__assert_fail@plt+0x6d90>
   17cb4:	subs	r5, r5, #1
   17cb8:	beq	17d44 <__assert_fail@plt+0x6d40>
   17cbc:	mov	r1, r7
   17cc0:	mov	r0, r6
   17cc4:	bl	17c48 <__assert_fail@plt+0x6c44>
   17cc8:	cmp	r0, #0
   17ccc:	mov	r0, r6
   17cd0:	beq	17d04 <__assert_fail@plt+0x6d00>
   17cd4:	ldr	r3, [r7]
   17cd8:	cmp	r3, #0
   17cdc:	beq	17d04 <__assert_fail@plt+0x6d00>
   17ce0:	ldr	r2, [r6, #4]
   17ce4:	cmp	r3, r4
   17ce8:	movcs	r3, r4
   17cec:	subs	r4, r4, r3
   17cf0:	add	r2, r2, r3
   17cf4:	str	r2, [r6, #4]
   17cf8:	beq	17d94 <__assert_fail@plt+0x6d90>
   17cfc:	subs	r5, r5, r3
   17d00:	beq	17d44 <__assert_fail@plt+0x6d40>
   17d04:	bl	10f14 <fgetc@plt>
   17d08:	cmn	r0, #1
   17d0c:	bne	17cac <__assert_fail@plt+0x6ca8>
   17d10:	mov	r0, r6
   17d14:	bl	10db8 <ferror@plt>
   17d18:	adds	r0, r0, #0
   17d1c:	movne	r0, #1
   17d20:	rsb	r0, r0, #0
   17d24:	add	sp, sp, #4096	; 0x1000
   17d28:	add	sp, sp, #12
   17d2c:	ldrd	r4, [sp]
   17d30:	ldrd	r6, [sp, #8]
   17d34:	add	sp, sp, #16
   17d38:	pop	{pc}		; (ldr pc, [sp], #4)
   17d3c:	mov	r0, r4
   17d40:	b	17d24 <__assert_fail@plt+0x6d20>
   17d44:	mov	r0, r6
   17d48:	bl	10f2c <fileno@plt>
   17d4c:	cmp	r0, #0
   17d50:	bge	17d9c <__assert_fail@plt+0x6d98>
   17d54:	add	r7, sp, #8
   17d58:	b	17d64 <__assert_fail@plt+0x6d60>
   17d5c:	subs	r4, r4, r5
   17d60:	beq	17d3c <__assert_fail@plt+0x6d38>
   17d64:	cmp	r4, #4096	; 0x1000
   17d68:	mov	r2, #1
   17d6c:	str	r6, [sp]
   17d70:	movcc	r5, r4
   17d74:	movcs	r5, #4096	; 0x1000
   17d78:	mov	r1, #4096	; 0x1000
   17d7c:	mov	r3, r5
   17d80:	mov	r0, r7
   17d84:	bl	10f68 <__fread_chk@plt>
   17d88:	cmp	r5, r0
   17d8c:	bls	17d5c <__assert_fail@plt+0x6d58>
   17d90:	b	17d10 <__assert_fail@plt+0x6d0c>
   17d94:	mov	r0, #0
   17d98:	b	17d24 <__assert_fail@plt+0x6d20>
   17d9c:	mov	r5, #1
   17da0:	mov	r3, #0
   17da4:	mov	r2, #0
   17da8:	str	r5, [sp]
   17dac:	bl	10e48 <lseek64@plt>
   17db0:	cmp	r0, #0
   17db4:	sbcs	r3, r1, #0
   17db8:	blt	17d54 <__assert_fail@plt+0x6d50>
   17dbc:	mov	r2, r4
   17dc0:	mov	r0, r6
   17dc4:	str	r5, [sp]
   17dc8:	mov	r3, #0
   17dcc:	bl	12d14 <__assert_fail@plt+0x1d10>
   17dd0:	b	17d24 <__assert_fail@plt+0x6d20>
   17dd4:	mov	r0, #14
   17dd8:	str	r4, [sp, #-8]!
   17ddc:	str	lr, [sp, #4]
   17de0:	bl	10fa4 <nl_langinfo@plt>
   17de4:	cmp	r0, #0
   17de8:	beq	17e0c <__assert_fail@plt+0x6e08>
   17dec:	ldrb	r2, [r0]
   17df0:	movw	r3, #37224	; 0x9168
   17df4:	movt	r3, #1
   17df8:	ldr	r4, [sp]
   17dfc:	add	sp, sp, #4
   17e00:	cmp	r2, #0
   17e04:	moveq	r0, r3
   17e08:	pop	{pc}		; (ldr pc, [sp], #4)
   17e0c:	ldr	r4, [sp]
   17e10:	add	sp, sp, #4
   17e14:	movw	r0, #37224	; 0x9168
   17e18:	movt	r0, #1
   17e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e20:	strd	r4, [sp, #-20]!	; 0xffffffec
   17e24:	mov	r5, r2
   17e28:	strd	r6, [sp, #8]
   17e2c:	subs	r6, r0, #0
   17e30:	mov	r7, r1
   17e34:	str	lr, [sp, #16]
   17e38:	sub	sp, sp, #12
   17e3c:	addeq	r6, sp, #4
   17e40:	mov	r0, r6
   17e44:	bl	10e6c <mbrtowc@plt>
   17e48:	cmp	r5, #0
   17e4c:	cmnne	r0, #3
   17e50:	mov	r4, r0
   17e54:	bhi	17e70 <__assert_fail@plt+0x6e6c>
   17e58:	mov	r0, r4
   17e5c:	add	sp, sp, #12
   17e60:	ldrd	r4, [sp]
   17e64:	ldrd	r6, [sp, #8]
   17e68:	add	sp, sp, #16
   17e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e70:	mov	r0, #0
   17e74:	bl	17f08 <__assert_fail@plt+0x6f04>
   17e78:	cmp	r0, #0
   17e7c:	bne	17e58 <__assert_fail@plt+0x6e54>
   17e80:	ldrb	r3, [r7]
   17e84:	mov	r4, #1
   17e88:	str	r3, [r6]
   17e8c:	b	17e58 <__assert_fail@plt+0x6e54>
   17e90:	umull	r2, r3, r1, r2
   17e94:	cmp	r3, #0
   17e98:	bne	17ea4 <__assert_fail@plt+0x6ea0>
   17e9c:	mov	r1, r2
   17ea0:	b	17b68 <__assert_fail@plt+0x6b64>
   17ea4:	str	r4, [sp, #-8]!
   17ea8:	str	lr, [sp, #4]
   17eac:	bl	10ef0 <__errno_location@plt>
   17eb0:	mov	r3, #12
   17eb4:	ldr	r4, [sp]
   17eb8:	add	sp, sp, #4
   17ebc:	str	r3, [r0]
   17ec0:	mov	r0, #0
   17ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ec8:	ldr	r3, [r0, #16]
   17ecc:	ldr	r2, [r0, #20]
   17ed0:	cmp	r2, r3
   17ed4:	bhi	17f00 <__assert_fail@plt+0x6efc>
   17ed8:	ldm	r0, {r1, r2, r3}
   17edc:	tst	r1, #256	; 0x100
   17ee0:	sub	r3, r3, r2
   17ee4:	beq	17ef8 <__assert_fail@plt+0x6ef4>
   17ee8:	ldr	r1, [r0, #36]	; 0x24
   17eec:	ldr	r2, [r0, #44]	; 0x2c
   17ef0:	sub	r2, r2, r1
   17ef4:	add	r3, r3, r2
   17ef8:	mov	r0, r3
   17efc:	bx	lr
   17f00:	mov	r0, #0
   17f04:	bx	lr
   17f08:	push	{lr}		; (str lr, [sp, #-4]!)
   17f0c:	sub	sp, sp, #268	; 0x10c
   17f10:	movw	r2, #257	; 0x101
   17f14:	add	r1, sp, #4
   17f18:	bl	17f60 <__assert_fail@plt+0x6f5c>
   17f1c:	cmp	r0, #0
   17f20:	movne	r0, #0
   17f24:	bne	17f58 <__assert_fail@plt+0x6f54>
   17f28:	movw	r1, #37232	; 0x9170
   17f2c:	movt	r1, #1
   17f30:	add	r0, sp, #4
   17f34:	bl	10d7c <strcmp@plt>
   17f38:	cmp	r0, #0
   17f3c:	beq	17f58 <__assert_fail@plt+0x6f54>
   17f40:	add	r0, sp, #4
   17f44:	movw	r1, #37236	; 0x9174
   17f48:	movt	r1, #1
   17f4c:	bl	10d7c <strcmp@plt>
   17f50:	adds	r0, r0, #0
   17f54:	movne	r0, #1
   17f58:	add	sp, sp, #268	; 0x10c
   17f5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f60:	strd	r4, [sp, #-16]!
   17f64:	mov	r5, r1
   17f68:	mov	r1, #0
   17f6c:	mov	r4, r2
   17f70:	str	r6, [sp, #8]
   17f74:	str	lr, [sp, #12]
   17f78:	bl	10f8c <setlocale@plt>
   17f7c:	subs	r6, r0, #0
   17f80:	beq	18000 <__assert_fail@plt+0x6ffc>
   17f84:	bl	10ed8 <strlen@plt>
   17f88:	cmp	r4, r0
   17f8c:	bhi	17fac <__assert_fail@plt+0x6fa8>
   17f90:	cmp	r4, #0
   17f94:	moveq	r0, #34	; 0x22
   17f98:	bne	17fd0 <__assert_fail@plt+0x6fcc>
   17f9c:	ldrd	r4, [sp]
   17fa0:	ldr	r6, [sp, #8]
   17fa4:	add	sp, sp, #12
   17fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fac:	add	r2, r0, #1
   17fb0:	mov	r1, r6
   17fb4:	mov	r0, r5
   17fb8:	bl	10dd0 <memcpy@plt>
   17fbc:	ldrd	r4, [sp]
   17fc0:	mov	r0, #0
   17fc4:	ldr	r6, [sp, #8]
   17fc8:	add	sp, sp, #12
   17fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   17fd0:	sub	r4, r4, #1
   17fd4:	mov	r1, r6
   17fd8:	mov	r2, r4
   17fdc:	mov	r0, r5
   17fe0:	bl	10dd0 <memcpy@plt>
   17fe4:	mov	r3, #0
   17fe8:	mov	r0, #34	; 0x22
   17fec:	strb	r3, [r5, r4]
   17ff0:	ldrd	r4, [sp]
   17ff4:	ldr	r6, [sp, #8]
   17ff8:	add	sp, sp, #12
   17ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   18000:	cmp	r4, #0
   18004:	mov	r0, #22
   18008:	strbne	r6, [r5]
   1800c:	ldrd	r4, [sp]
   18010:	ldr	r6, [sp, #8]
   18014:	add	sp, sp, #12
   18018:	pop	{pc}		; (ldr pc, [sp], #4)
   1801c:	mov	r1, #0
   18020:	b	10f8c <setlocale@plt>
   18024:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18028:	mov	r7, r0
   1802c:	ldr	r6, [pc, #72]	; 1807c <__assert_fail@plt+0x7078>
   18030:	ldr	r5, [pc, #72]	; 18080 <__assert_fail@plt+0x707c>
   18034:	add	r6, pc, r6
   18038:	add	r5, pc, r5
   1803c:	sub	r6, r6, r5
   18040:	mov	r8, r1
   18044:	mov	r9, r2
   18048:	bl	10d44 <calloc@plt-0x20>
   1804c:	asrs	r6, r6, #2
   18050:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18054:	mov	r4, #0
   18058:	add	r4, r4, #1
   1805c:	ldr	r3, [r5], #4
   18060:	mov	r2, r9
   18064:	mov	r1, r8
   18068:	mov	r0, r7
   1806c:	blx	r3
   18070:	cmp	r6, r4
   18074:	bne	18058 <__assert_fail@plt+0x7054>
   18078:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1807c:	ldrdeq	r1, [r1], -r8
   18080:	ldrdeq	r1, [r1], -r0
   18084:	bx	lr
   18088:	ldr	r3, [pc, #12]	; 1809c <__assert_fail@plt+0x7098>
   1808c:	mov	r1, #0
   18090:	add	r3, pc, r3
   18094:	ldr	r2, [r3]
   18098:	b	10efc <__cxa_atexit@plt>
   1809c:	andeq	r2, r1, r0, rrx

Disassembly of section .fini:

000180a0 <.fini>:
   180a0:	push	{r3, lr}
   180a4:	pop	{r3, pc}
