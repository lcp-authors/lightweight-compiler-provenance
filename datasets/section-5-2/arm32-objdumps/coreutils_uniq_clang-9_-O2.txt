
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010ea0 <.init>:
   10ea0:	push	{r3, lr}
   10ea4:	bl	1119c <__assert_fail@plt+0x48>
   10ea8:	pop	{r3, pc}

Disassembly of section .plt:

00010eac <calloc@plt-0x14>:
   10eac:	push	{lr}		; (str lr, [sp, #-4]!)
   10eb0:	ldr	lr, [pc, #4]	; 10ebc <calloc@plt-0x4>
   10eb4:	add	lr, pc, lr
   10eb8:	ldr	pc, [lr, #8]!
   10ebc:	andeq	r8, r1, r4, asr #2

00010ec0 <calloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #324]!	; 0x144

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #316]!	; 0x13c

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #308]!	; 0x134

00010ee4 <strcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #300]!	; 0x12c

00010ef0 <strtol@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #292]!	; 0x124

00010efc <posix_fadvise64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #284]!	; 0x11c

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #276]!	; 0x114

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #268]!	; 0x10c

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #260]!	; 0x104

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #252]!	; 0xfc

00010f38 <__strtoull_internal@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #244]!	; 0xf4

00010f44 <mbsinit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #236]!	; 0xec

00010f50 <fwrite_unlocked@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #228]!	; 0xe4

00010f5c <dcgettext@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #220]!	; 0xdc

00010f68 <dup2@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #212]!	; 0xd4

00010f74 <realloc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #204]!	; 0xcc

00010f80 <textdomain@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #196]!	; 0xc4

00010f8c <iswprint@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #188]!	; 0xbc

00010f98 <fwrite@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #180]!	; 0xb4

00010fa4 <lseek64@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #172]!	; 0xac

00010fb0 <__ctype_get_mb_cur_max@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #164]!	; 0xa4

00010fbc <__fpending@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #156]!	; 0x9c

00010fc8 <mbrtowc@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #148]!	; 0x94

00010fd4 <error@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #140]!	; 0x8c

00010fe0 <open64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #132]!	; 0x84

00010fec <getenv@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #124]!	; 0x7c

00010ff8 <malloc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #116]!	; 0x74

00011004 <__libc_start_main@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #108]!	; 0x6c

00011010 <__freading@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #100]!	; 0x64

0001101c <__ctype_toupper_loc@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #92]!	; 0x5c

00011028 <__gmon_start__@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #84]!	; 0x54

00011034 <freopen64@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #76]!	; 0x4c

00011040 <getopt_long@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #68]!	; 0x44

0001104c <__ctype_b_loc@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #60]!	; 0x3c

00011058 <exit@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #52]!	; 0x34

00011064 <bcmp@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #24, 20	; 0x18000
   1106c:	ldr	pc, [ip, #44]!	; 0x2c

00011070 <strlen@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #24, 20	; 0x18000
   11078:	ldr	pc, [ip, #36]!	; 0x24

0001107c <strchr@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #24, 20	; 0x18000
   11084:	ldr	pc, [ip, #28]!

00011088 <__errno_location@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #24, 20	; 0x18000
   11090:	ldr	pc, [ip, #20]!

00011094 <__cxa_atexit@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #24, 20	; 0x18000
   1109c:	ldr	pc, [ip, #12]!

000110a0 <memset@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #24, 20	; 0x18000
   110a8:	ldr	pc, [ip, #4]!

000110ac <__printf_chk@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #4092]!	; 0xffc

000110b8 <fileno@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #94208	; 0x17000
   110c0:	ldr	pc, [ip, #4084]!	; 0xff4

000110c4 <__fprintf_chk@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #94208	; 0x17000
   110cc:	ldr	pc, [ip, #4076]!	; 0xfec

000110d0 <fclose@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #94208	; 0x17000
   110d8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110dc <fseeko64@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #94208	; 0x17000
   110e4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110e8 <__uflow@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #94208	; 0x17000
   110f0:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f4 <__overflow@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #94208	; 0x17000
   110fc:	ldr	pc, [ip, #4044]!	; 0xfcc

00011100 <setlocale@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #94208	; 0x17000
   11108:	ldr	pc, [ip, #4036]!	; 0xfc4

0001110c <strrchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #94208	; 0x17000
   11114:	ldr	pc, [ip, #4028]!	; 0xfbc

00011118 <nl_langinfo@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #94208	; 0x17000
   11120:	ldr	pc, [ip, #4020]!	; 0xfb4

00011124 <bindtextdomain@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #94208	; 0x17000
   1112c:	ldr	pc, [ip, #4012]!	; 0xfac

00011130 <strncmp@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #94208	; 0x17000
   11138:	ldr	pc, [ip, #4004]!	; 0xfa4

0001113c <abort@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #94208	; 0x17000
   11144:	ldr	pc, [ip, #3996]!	; 0xf9c

00011148 <close@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #94208	; 0x17000
   11150:	ldr	pc, [ip, #3988]!	; 0xf94

00011154 <__assert_fail@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #94208	; 0x17000
   1115c:	ldr	pc, [ip, #3980]!	; 0xf8c

Disassembly of section .text:

00011160 <.text>:
   11160:	mov	fp, #0
   11164:	mov	lr, #0
   11168:	pop	{r1}		; (ldr r1, [sp], #4)
   1116c:	mov	r2, sp
   11170:	push	{r2}		; (str r2, [sp, #-4]!)
   11174:	push	{r0}		; (str r0, [sp, #-4]!)
   11178:	ldr	ip, [pc, #16]	; 11190 <__assert_fail@plt+0x3c>
   1117c:	push	{ip}		; (str ip, [sp, #-4]!)
   11180:	ldr	r0, [pc, #12]	; 11194 <__assert_fail@plt+0x40>
   11184:	ldr	r3, [pc, #12]	; 11198 <__assert_fail@plt+0x44>
   11188:	bl	11004 <__libc_start_main@plt>
   1118c:	bl	1113c <abort@plt>
   11190:	strdeq	r6, [r1], -ip
   11194:	andeq	r1, r1, ip, lsr #11
   11198:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1119c:	ldr	r3, [pc, #20]	; 111b8 <__assert_fail@plt+0x64>
   111a0:	ldr	r2, [pc, #20]	; 111bc <__assert_fail@plt+0x68>
   111a4:	add	r3, pc, r3
   111a8:	ldr	r2, [r3, r2]
   111ac:	cmp	r2, #0
   111b0:	bxeq	lr
   111b4:	b	11028 <__gmon_start__@plt>
   111b8:	andeq	r7, r1, r4, asr lr
   111bc:	andeq	r0, r0, ip, ror #1
   111c0:	ldr	r0, [pc, #24]	; 111e0 <__assert_fail@plt+0x8c>
   111c4:	ldr	r3, [pc, #24]	; 111e4 <__assert_fail@plt+0x90>
   111c8:	cmp	r3, r0
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0x94>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r9, r2, r8, asr #2
   111e4:	andeq	r9, r2, r8, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	ldr	r0, [pc, #36]	; 11218 <__assert_fail@plt+0xc4>
   111f0:	ldr	r1, [pc, #36]	; 1121c <__assert_fail@plt+0xc8>
   111f4:	sub	r1, r1, r0
   111f8:	asr	r1, r1, #2
   111fc:	add	r1, r1, r1, lsr #31
   11200:	asrs	r1, r1, #1
   11204:	bxeq	lr
   11208:	ldr	r3, [pc, #16]	; 11220 <__assert_fail@plt+0xcc>
   1120c:	cmp	r3, #0
   11210:	bxeq	lr
   11214:	bx	r3
   11218:	andeq	r9, r2, r8, asr #2
   1121c:	andeq	r9, r2, r8, asr #2
   11220:	andeq	r0, r0, r0
   11224:	push	{r4, lr}
   11228:	ldr	r4, [pc, #24]	; 11248 <__assert_fail@plt+0xf4>
   1122c:	ldrb	r3, [r4]
   11230:	cmp	r3, #0
   11234:	popne	{r4, pc}
   11238:	bl	111c0 <__assert_fail@plt+0x6c>
   1123c:	mov	r3, #1
   11240:	strb	r3, [r4]
   11244:	pop	{r4, pc}
   11248:	andeq	r9, r2, ip, ror #2
   1124c:	b	111ec <__assert_fail@plt+0x98>
   11250:	push	{fp, lr}
   11254:	mov	fp, sp
   11258:	sub	sp, sp, #56	; 0x38
   1125c:	mov	r4, r0
   11260:	cmp	r0, #0
   11264:	bne	11568 <__assert_fail@plt+0x414>
   11268:	movw	r1, #28747	; 0x704b
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10f5c <dcgettext@plt>
   1127c:	mov	r1, r0
   11280:	movw	r0, #37272	; 0x9198
   11284:	movt	r0, #2
   11288:	ldr	r2, [r0]
   1128c:	mov	r0, #1
   11290:	bl	110ac <__printf_chk@plt>
   11294:	movw	r1, #28787	; 0x7073
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f5c <dcgettext@plt>
   112a8:	movw	r7, #37220	; 0x9164
   112ac:	movt	r7, #2
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ecc <fputs_unlocked@plt>
   112b8:	movw	r1, #30647	; 0x77b7
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f5c <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ecc <fputs_unlocked@plt>
   112d4:	movw	r1, #28960	; 0x7120
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f5c <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ecc <fputs_unlocked@plt>
   112f0:	movw	r1, #29098	; 0x71aa
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f5c <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ecc <fputs_unlocked@plt>
   1130c:	movw	r1, #29343	; 0x729f
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f5c <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ecc <fputs_unlocked@plt>
   11328:	movw	r1, #29403	; 0x72db
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f5c <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ecc <fputs_unlocked@plt>
   11344:	movw	r1, #29555	; 0x7373
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f5c <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ecc <fputs_unlocked@plt>
   11360:	movw	r1, #29733	; 0x7425
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	movt	r1, #1
   11370:	bl	10f5c <dcgettext@plt>
   11374:	ldr	r1, [r7]
   11378:	bl	10ecc <fputs_unlocked@plt>
   1137c:	movw	r1, #29797	; 0x7465
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10f5c <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10ecc <fputs_unlocked@plt>
   11398:	movw	r1, #29865	; 0x74a9
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10f5c <dcgettext@plt>
   113ac:	ldr	r1, [r7]
   113b0:	bl	10ecc <fputs_unlocked@plt>
   113b4:	movw	r1, #29910	; 0x74d6
   113b8:	mov	r0, #0
   113bc:	mov	r2, #5
   113c0:	movt	r1, #1
   113c4:	bl	10f5c <dcgettext@plt>
   113c8:	ldr	r1, [r7]
   113cc:	bl	10ecc <fputs_unlocked@plt>
   113d0:	movw	r1, #29964	; 0x750c
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f5c <dcgettext@plt>
   113e4:	ldr	r1, [r7]
   113e8:	bl	10ecc <fputs_unlocked@plt>
   113ec:	movw	r1, #30084	; 0x7584
   113f0:	mov	r0, #0
   113f4:	mov	r2, #5
   113f8:	movt	r1, #1
   113fc:	bl	10f5c <dcgettext@plt>
   11400:	ldr	r1, [r7]
   11404:	bl	10ecc <fputs_unlocked@plt>
   11408:	movw	r0, #31464	; 0x7ae8
   1140c:	mov	r2, #48	; 0x30
   11410:	mov	r6, sp
   11414:	movw	r5, #30227	; 0x7613
   11418:	movt	r0, #1
   1141c:	movt	r5, #1
   11420:	add	r1, r0, #32
   11424:	add	r3, r0, #16
   11428:	vld1.64	{d18-d19}, [r0], r2
   1142c:	vld1.64	{d16-d17}, [r1]
   11430:	vld1.64	{d20-d21}, [r3]
   11434:	vldr	d22, [r0]
   11438:	add	r1, r6, #32
   1143c:	add	r0, r6, #16
   11440:	vst1.64	{d16-d17}, [r1]
   11444:	movw	r1, #30722	; 0x7802
   11448:	vst1.64	{d20-d21}, [r0]
   1144c:	mov	r0, r6
   11450:	movt	r1, #1
   11454:	vst1.64	{d18-d19}, [r0], r2
   11458:	vstr	d22, [r0]
   1145c:	mov	r0, r5
   11460:	bl	10ee4 <strcmp@plt>
   11464:	cmp	r0, #0
   11468:	ldrne	r1, [r6, #8]!
   1146c:	cmpne	r1, #0
   11470:	bne	1145c <__assert_fail@plt+0x308>
   11474:	movw	r1, #30817	; 0x7861
   11478:	ldr	r6, [r6, #4]
   1147c:	mov	r0, #0
   11480:	mov	r2, #5
   11484:	movt	r1, #1
   11488:	bl	10f5c <dcgettext@plt>
   1148c:	movw	r2, #30436	; 0x76e4
   11490:	movw	r3, #30840	; 0x7878
   11494:	mov	r1, r0
   11498:	mov	r0, #1
   1149c:	movt	r2, #1
   114a0:	movt	r3, #1
   114a4:	bl	110ac <__printf_chk@plt>
   114a8:	cmp	r6, #0
   114ac:	mov	r0, #5
   114b0:	mov	r1, #0
   114b4:	moveq	r6, r5
   114b8:	bl	11100 <setlocale@plt>
   114bc:	cmp	r0, #0
   114c0:	beq	114f8 <__assert_fail@plt+0x3a4>
   114c4:	movw	r1, #30880	; 0x78a0
   114c8:	mov	r2, #3
   114cc:	movt	r1, #1
   114d0:	bl	11130 <strncmp@plt>
   114d4:	cmp	r0, #0
   114d8:	beq	114f8 <__assert_fail@plt+0x3a4>
   114dc:	movw	r1, #30884	; 0x78a4
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	10f5c <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	10ecc <fputs_unlocked@plt>
   114f8:	movw	r1, #30955	; 0x78eb
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	10f5c <dcgettext@plt>
   1150c:	movw	r2, #30840	; 0x7878
   11510:	mov	r1, r0
   11514:	mov	r0, #1
   11518:	mov	r3, r5
   1151c:	movt	r2, #1
   11520:	bl	110ac <__printf_chk@plt>
   11524:	movw	r1, #30982	; 0x7906
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	10f5c <dcgettext@plt>
   11538:	mov	r1, r0
   1153c:	movw	r0, #30750	; 0x781e
   11540:	movw	r3, #31032	; 0x7938
   11544:	cmp	r6, r5
   11548:	mov	r2, r6
   1154c:	movt	r0, #1
   11550:	movt	r3, #1
   11554:	moveq	r3, r0
   11558:	mov	r0, #1
   1155c:	bl	110ac <__printf_chk@plt>
   11560:	mov	r0, r4
   11564:	bl	11058 <exit@plt>
   11568:	movw	r0, #37208	; 0x9158
   1156c:	movw	r1, #28708	; 0x7024
   11570:	mov	r2, #5
   11574:	movt	r0, #2
   11578:	movt	r1, #1
   1157c:	ldr	r5, [r0]
   11580:	mov	r0, #0
   11584:	bl	10f5c <dcgettext@plt>
   11588:	mov	r2, r0
   1158c:	movw	r0, #37272	; 0x9198
   11590:	mov	r1, #1
   11594:	movt	r0, #2
   11598:	ldr	r3, [r0]
   1159c:	mov	r0, r5
   115a0:	bl	110c4 <__fprintf_chk@plt>
   115a4:	mov	r0, r4
   115a8:	bl	11058 <exit@plt>
   115ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115b0:	add	fp, sp, #28
   115b4:	sub	sp, sp, #76	; 0x4c
   115b8:	mov	r5, r0
   115bc:	movw	r0, #30232	; 0x7618
   115c0:	mov	r4, r1
   115c4:	movt	r0, #1
   115c8:	bl	10fec <getenv@plt>
   115cc:	mov	r6, r0
   115d0:	movw	r0, #31729	; 0x7bf1
   115d4:	movt	r0, #1
   115d8:	str	r0, [sp, #44]	; 0x2c
   115dc:	str	r0, [sp, #48]	; 0x30
   115e0:	ldr	r0, [r4]
   115e4:	bl	13470 <__assert_fail@plt+0x231c>
   115e8:	movw	r1, #31032	; 0x7938
   115ec:	mov	r0, #6
   115f0:	movt	r1, #1
   115f4:	bl	11100 <setlocale@plt>
   115f8:	movw	r7, #30440	; 0x76e8
   115fc:	movw	r1, #30248	; 0x7628
   11600:	movt	r7, #1
   11604:	movt	r1, #1
   11608:	mov	r0, r7
   1160c:	bl	11124 <bindtextdomain@plt>
   11610:	mov	r0, r7
   11614:	bl	10f80 <textdomain@plt>
   11618:	movw	r0, #11408	; 0x2c90
   1161c:	movt	r0, #1
   11620:	bl	17000 <__assert_fail@plt+0x5eac>
   11624:	movw	r0, #37232	; 0x9170
   11628:	mov	r1, #0
   1162c:	mvn	r2, #0
   11630:	mov	r7, #10
   11634:	mov	r9, #0
   11638:	mov	r8, #0
   1163c:	movt	r0, #2
   11640:	str	r1, [r0]
   11644:	movw	r0, #37236	; 0x9174
   11648:	movt	r0, #2
   1164c:	str	r1, [r0]
   11650:	movw	r0, #37240	; 0x9178
   11654:	movt	r0, #2
   11658:	str	r2, [r0]
   1165c:	movw	r0, #37244	; 0x917c
   11660:	mov	r2, #1
   11664:	movt	r0, #2
   11668:	strb	r2, [r0]
   1166c:	movw	r0, #37245	; 0x917d
   11670:	movt	r0, #2
   11674:	strb	r2, [r0]
   11678:	movw	r0, #37246	; 0x917e
   1167c:	movt	r0, #2
   11680:	strb	r1, [r0]
   11684:	movw	r0, #37248	; 0x9180
   11688:	movt	r0, #2
   1168c:	strb	r2, [r0]
   11690:	movw	r0, #37252	; 0x9184
   11694:	movt	r0, #2
   11698:	str	r1, [r0]
   1169c:	mov	r0, #0
   116a0:	mov	r1, #0
   116a4:	str	r1, [sp, #40]	; 0x28
   116a8:	b	116cc <__assert_fail@plt+0x578>
   116ac:	movw	r3, #37236	; 0x9174
   116b0:	mov	r1, #0
   116b4:	movt	r3, #2
   116b8:	str	r1, [r3]
   116bc:	sub	r1, r0, #48	; 0x30
   116c0:	str	r1, [r3]
   116c4:	mov	r9, #1
   116c8:	mov	r7, sl
   116cc:	cmp	r8, #0
   116d0:	mov	r1, r8
   116d4:	mov	sl, r7
   116d8:	mov	r2, r6
   116dc:	movwne	r1, #1
   116e0:	cmp	r6, #0
   116e4:	movwne	r2, #1
   116e8:	cmn	r0, #1
   116ec:	beq	11954 <__assert_fail@plt+0x800>
   116f0:	ands	r1, r2, r1
   116f4:	bne	11954 <__assert_fail@plt+0x800>
   116f8:	movw	r2, #30272	; 0x7640
   116fc:	movw	r3, #31192	; 0x79d8
   11700:	mov	r7, #0
   11704:	mov	r0, r5
   11708:	mov	r1, r4
   1170c:	movt	r2, #1
   11710:	movt	r3, #1
   11714:	str	r7, [sp]
   11718:	bl	11040 <getopt_long@plt>
   1171c:	add	r1, r0, #3
   11720:	cmp	r1, #125	; 0x7d
   11724:	bhi	119a8 <__assert_fail@plt+0x854>
   11728:	add	r2, pc, #0
   1172c:	ldr	pc, [r2, r1, lsl #2]
   11730:	muleq	r1, ip, r3
   11734:	strdeq	r2, [r1], -r0
   11738:	andeq	r1, r1, r4, asr r9
   1173c:	andeq	r2, r1, r4, asr r3
   11740:	muleq	r1, r8, fp
   11744:	andeq	r2, r1, r4, asr r3
   11748:	andeq	r2, r1, r4, asr r3
   1174c:	andeq	r2, r1, r4, asr r3
   11750:	andeq	r2, r1, r4, asr r3
   11754:	andeq	r2, r1, r4, asr r3
   11758:	andeq	r2, r1, r4, asr r3
   1175c:	andeq	r2, r1, r4, asr r3
   11760:	andeq	r2, r1, r4, asr r3
   11764:	andeq	r2, r1, r4, asr r3
   11768:	andeq	r2, r1, r4, asr r3
   1176c:	andeq	r2, r1, r4, asr r3
   11770:	andeq	r2, r1, r4, asr r3
   11774:	andeq	r2, r1, r4, asr r3
   11778:	andeq	r2, r1, r4, asr r3
   1177c:	andeq	r2, r1, r4, asr r3
   11780:	andeq	r2, r1, r4, asr r3
   11784:	andeq	r2, r1, r4, asr r3
   11788:	andeq	r2, r1, r4, asr r3
   1178c:	andeq	r2, r1, r4, asr r3
   11790:	andeq	r2, r1, r4, asr r3
   11794:	andeq	r2, r1, r4, asr r3
   11798:	andeq	r2, r1, r4, asr r3
   1179c:	andeq	r2, r1, r4, asr r3
   117a0:	andeq	r2, r1, r4, asr r3
   117a4:	andeq	r2, r1, r4, asr r3
   117a8:	andeq	r2, r1, r4, asr r3
   117ac:	andeq	r2, r1, r4, asr r3
   117b0:	andeq	r2, r1, r4, asr r3
   117b4:	andeq	r2, r1, r4, asr r3
   117b8:	andeq	r2, r1, r4, asr r3
   117bc:	andeq	r2, r1, r4, asr r3
   117c0:	andeq	r2, r1, r4, asr r3
   117c4:	andeq	r2, r1, r4, asr r3
   117c8:	andeq	r2, r1, r4, asr r3
   117cc:	andeq	r2, r1, r4, asr r3
   117d0:	andeq	r2, r1, r4, asr r3
   117d4:	andeq	r2, r1, r4, asr r3
   117d8:	andeq	r2, r1, r4, asr r3
   117dc:	andeq	r2, r1, r4, asr r3
   117e0:	andeq	r2, r1, r4, asr r3
   117e4:	andeq	r2, r1, r4, asr r3
   117e8:	andeq	r2, r1, r4, asr r3
   117ec:	andeq	r2, r1, r4, asr r3
   117f0:	andeq	r2, r1, r4, asr r3
   117f4:	andeq	r2, r1, r4, asr r3
   117f8:	andeq	r2, r1, r4, asr r3
   117fc:	andeq	r1, r1, r8, lsr #18
   11800:	andeq	r1, r1, r8, lsr #18
   11804:	andeq	r1, r1, r8, lsr #18
   11808:	andeq	r1, r1, r8, lsr #18
   1180c:	andeq	r1, r1, r8, lsr #18
   11810:	andeq	r1, r1, r8, lsr #18
   11814:	andeq	r1, r1, r8, lsr #18
   11818:	andeq	r1, r1, r8, lsr #18
   1181c:	andeq	r1, r1, r8, lsr #18
   11820:	andeq	r1, r1, r8, lsr #18
   11824:	andeq	r2, r1, r4, asr r3
   11828:	andeq	r2, r1, r4, asr r3
   1182c:	andeq	r2, r1, r4, asr r3
   11830:	andeq	r2, r1, r4, asr r3
   11834:	andeq	r2, r1, r4, asr r3
   11838:	andeq	r2, r1, r4, asr r3
   1183c:	andeq	r2, r1, r4, asr r3
   11840:	andeq	r2, r1, r4, asr r3
   11844:	andeq	r2, r1, r4, asr r3
   11848:	andeq	r2, r1, r4, asr r3
   1184c:	andeq	r1, r1, r8, lsl sl
   11850:	andeq	r2, r1, r4, asr r3
   11854:	andeq	r2, r1, r4, asr r3
   11858:	andeq	r2, r1, r4, asr r3
   1185c:	andeq	r2, r1, r4, asr r3
   11860:	andeq	r2, r1, r4, asr r3
   11864:	andeq	r2, r1, r4, asr r3
   11868:	andeq	r2, r1, r4, asr r3
   1186c:	andeq	r2, r1, r4, asr r3
   11870:	andeq	r2, r1, r4, asr r3
   11874:	andeq	r2, r1, r4, asr r3
   11878:	andeq	r2, r1, r4, asr r3
   1187c:	andeq	r2, r1, r4, asr r3
   11880:	andeq	r2, r1, r4, asr r3
   11884:	andeq	r2, r1, r4, asr r3
   11888:	andeq	r2, r1, r4, asr r3
   1188c:	andeq	r2, r1, r4, asr r3
   11890:	andeq	r2, r1, r4, asr r3
   11894:	andeq	r2, r1, r4, asr r3
   11898:	andeq	r2, r1, r4, asr r3
   1189c:	andeq	r2, r1, r4, asr r3
   118a0:	andeq	r2, r1, r4, asr r3
   118a4:	andeq	r2, r1, r4, asr r3
   118a8:	andeq	r2, r1, r4, asr r3
   118ac:	andeq	r2, r1, r4, asr r3
   118b0:	andeq	r2, r1, r4, asr r3
   118b4:	andeq	r2, r1, r4, asr r3
   118b8:	andeq	r2, r1, r4, asr r3
   118bc:	andeq	r2, r1, r4, asr r3
   118c0:	andeq	r2, r1, r4, asr r3
   118c4:	andeq	r2, r1, r4, asr r3
   118c8:	andeq	r1, r1, r0, lsl fp
   118cc:	andeq	r1, r1, r0, asr ip
   118d0:	andeq	r2, r1, r4, asr r3
   118d4:	andeq	r1, r1, r8, lsr #21
   118d8:	andeq	r2, r1, r4, asr r3
   118dc:	andeq	r2, r1, r4, asr r3
   118e0:	ldrdeq	r1, [r1], -r8
   118e4:	andeq	r2, r1, r4, asr r3
   118e8:	andeq	r2, r1, r4, asr r3
   118ec:	andeq	r2, r1, r4, asr r3
   118f0:	andeq	r2, r1, r4, asr r3
   118f4:	andeq	r2, r1, r4, asr r3
   118f8:	andeq	r2, r1, r4, asr r3
   118fc:	andeq	r2, r1, r4, asr r3
   11900:	andeq	r2, r1, r4, asr r3
   11904:	andeq	r2, r1, r4, asr r3
   11908:	andeq	r1, r1, r4, lsr fp
   1190c:	andeq	r2, r1, r4, asr r3
   11910:	andeq	r1, r1, ip, lsr #24
   11914:	andeq	r2, r1, r4, asr r3
   11918:	andeq	r1, r1, r4, ror ip
   1191c:	andeq	r2, r1, r4, asr r3
   11920:	andeq	r2, r1, r4, asr r3
   11924:	andeq	r1, r1, ip, asr #13
   11928:	cmp	r9, #2
   1192c:	beq	116ac <__assert_fail@plt+0x558>
   11930:	movw	r3, #37236	; 0x9174
   11934:	movw	r1, #39321	; 0x9999
   11938:	movt	r3, #2
   1193c:	movt	r1, #6553	; 0x1999
   11940:	ldr	r2, [r3]
   11944:	cmp	r2, r1
   11948:	bls	11990 <__assert_fail@plt+0x83c>
   1194c:	mvn	r1, #0
   11950:	b	116c0 <__assert_fail@plt+0x56c>
   11954:	movw	r7, #37200	; 0x9150
   11958:	movt	r7, #2
   1195c:	ldr	r1, [r7]
   11960:	cmp	r1, r5
   11964:	bge	11d24 <__assert_fail@plt+0xbd0>
   11968:	cmp	r8, #2
   1196c:	beq	1235c <__assert_fail@plt+0x1208>
   11970:	add	r2, r1, #1
   11974:	str	r2, [r7]
   11978:	add	r2, sp, #44	; 0x2c
   1197c:	mov	r7, sl
   11980:	ldr	r1, [r4, r1, lsl #2]
   11984:	str	r1, [r2, r8, lsl #2]
   11988:	add	r8, r8, #1
   1198c:	b	116cc <__assert_fail@plt+0x578>
   11990:	add	r1, r2, r2, lsl #2
   11994:	add	r1, r0, r1, lsl #1
   11998:	sub	r1, r1, #48	; 0x30
   1199c:	cmp	r1, r2
   119a0:	mvncc	r1, #0
   119a4:	b	116c0 <__assert_fail@plt+0x56c>
   119a8:	cmp	r0, #256	; 0x100
   119ac:	bne	12354 <__assert_fail@plt+0x1200>
   119b0:	movw	r0, #37224	; 0x9168
   119b4:	movt	r0, #2
   119b8:	ldr	r1, [r0]
   119bc:	cmp	r1, #0
   119c0:	beq	11cf4 <__assert_fail@plt+0xba0>
   119c4:	movw	r0, #37116	; 0x90fc
   119c8:	movw	r7, #31428	; 0x7ac4
   119cc:	mov	r2, #4
   119d0:	movt	r0, #2
   119d4:	str	r2, [sp]
   119d8:	movw	r2, #31444	; 0x7ad4
   119dc:	movt	r7, #1
   119e0:	movt	r2, #1
   119e4:	ldr	r0, [r0]
   119e8:	mov	r3, r7
   119ec:	str	r0, [sp, #4]
   119f0:	mov	r0, #1
   119f4:	str	r0, [sp, #8]
   119f8:	movw	r0, #30328	; 0x7678
   119fc:	movt	r0, #1
   11a00:	bl	129fc <__assert_fail@plt+0x18a8>
   11a04:	ldr	r0, [r7, r0, lsl #2]
   11a08:	movw	r1, #37256	; 0x9188
   11a0c:	movt	r1, #2
   11a10:	str	r0, [r1]
   11a14:	b	11d04 <__assert_fail@plt+0xbb0>
   11a18:	movw	r0, #37246	; 0x917e
   11a1c:	movw	r1, #37245	; 0x917d
   11a20:	mov	r2, #1
   11a24:	movt	r0, #2
   11a28:	movt	r1, #2
   11a2c:	strb	r2, [r0]
   11a30:	mov	r0, #0
   11a34:	strb	r0, [r1]
   11a38:	movw	r1, #37224	; 0x9168
   11a3c:	movt	r1, #2
   11a40:	ldr	r1, [r1]
   11a44:	cmp	r1, #0
   11a48:	beq	11a88 <__assert_fail@plt+0x934>
   11a4c:	movw	r0, #37116	; 0x90fc
   11a50:	movw	r7, #31400	; 0x7aa8
   11a54:	mov	r3, #4
   11a58:	movt	r0, #2
   11a5c:	str	r3, [sp]
   11a60:	movt	r7, #1
   11a64:	ldr	r0, [r0]
   11a68:	mov	r3, r7
   11a6c:	stmib	sp, {r0, r2}
   11a70:	movw	r0, #30313	; 0x7669
   11a74:	movw	r2, #31412	; 0x7ab4
   11a78:	movt	r0, #1
   11a7c:	movt	r2, #1
   11a80:	bl	129fc <__assert_fail@plt+0x18a8>
   11a84:	ldr	r0, [r7, r0, lsl #2]
   11a88:	movw	r1, #37252	; 0x9184
   11a8c:	mov	r7, sl
   11a90:	movt	r1, #2
   11a94:	str	r0, [r1]
   11a98:	mov	r0, #1
   11a9c:	str	r0, [sp, #40]	; 0x28
   11aa0:	mov	r0, #68	; 0x44
   11aa4:	b	116cc <__assert_fail@plt+0x578>
   11aa8:	movw	r0, #37224	; 0x9168
   11aac:	mov	r1, #0
   11ab0:	mov	r2, #10
   11ab4:	sub	r3, fp, #40	; 0x28
   11ab8:	movt	r0, #2
   11abc:	ldr	r7, [r0]
   11ac0:	movw	r0, #31032	; 0x7938
   11ac4:	movt	r0, #1
   11ac8:	str	r0, [sp]
   11acc:	mov	r0, r7
   11ad0:	bl	15e48 <__assert_fail@plt+0x4cf4>
   11ad4:	cmp	r0, #2
   11ad8:	bcs	123f8 <__assert_fail@plt+0x12a4>
   11adc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11ae0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11ae4:	mvn	r3, #0
   11ae8:	mov	r9, #2
   11aec:	mov	r7, sl
   11af0:	subs	r2, r0, r3
   11af4:	sbcs	r1, r1, #0
   11af8:	movw	r1, #37236	; 0x9174
   11afc:	movt	r1, #2
   11b00:	movcs	r0, r3
   11b04:	str	r0, [r1]
   11b08:	mov	r0, #102	; 0x66
   11b0c:	b	116cc <__assert_fail@plt+0x578>
   11b10:	movw	r0, #37248	; 0x9180
   11b14:	mov	r1, #0
   11b18:	mov	r7, sl
   11b1c:	movt	r0, #2
   11b20:	strb	r1, [r0]
   11b24:	mov	r0, #1
   11b28:	str	r0, [sp, #40]	; 0x28
   11b2c:	mov	r0, #99	; 0x63
   11b30:	b	116cc <__assert_fail@plt+0x578>
   11b34:	movw	r0, #37224	; 0x9168
   11b38:	mov	r1, #0
   11b3c:	mov	r2, #10
   11b40:	sub	r3, fp, #40	; 0x28
   11b44:	movt	r0, #2
   11b48:	ldr	r7, [r0]
   11b4c:	movw	r0, #31032	; 0x7938
   11b50:	movt	r0, #1
   11b54:	str	r0, [sp]
   11b58:	mov	r0, r7
   11b5c:	bl	15e48 <__assert_fail@plt+0x4cf4>
   11b60:	cmp	r0, #2
   11b64:	bcs	12404 <__assert_fail@plt+0x12b0>
   11b68:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11b6c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11b70:	mvn	r3, #0
   11b74:	mov	r7, sl
   11b78:	subs	r2, r0, r3
   11b7c:	sbcs	r1, r1, #0
   11b80:	movw	r1, #37232	; 0x9170
   11b84:	movt	r1, #2
   11b88:	movcs	r0, r3
   11b8c:	str	r0, [r1]
   11b90:	mov	r0, #115	; 0x73
   11b94:	b	116cc <__assert_fail@plt+0x578>
   11b98:	movw	r0, #37224	; 0x9168
   11b9c:	movt	r0, #2
   11ba0:	ldr	r0, [r0]
   11ba4:	ldrb	r0, [r0]
   11ba8:	cmp	r0, #43	; 0x2b
   11bac:	bne	11c00 <__assert_fail@plt+0xaac>
   11bb0:	bl	13414 <__assert_fail@plt+0x22c0>
   11bb4:	movw	r1, #62032	; 0xf250
   11bb8:	movt	r1, #65532	; 0xfffc
   11bbc:	add	r0, r0, r1
   11bc0:	cmp	r0, #696	; 0x2b8
   11bc4:	bls	11c00 <__assert_fail@plt+0xaac>
   11bc8:	movw	r0, #37224	; 0x9168
   11bcc:	movw	r1, #31032	; 0x7938
   11bd0:	mov	r2, #10
   11bd4:	sub	r3, fp, #40	; 0x28
   11bd8:	movt	r0, #2
   11bdc:	movt	r1, #1
   11be0:	ldr	r0, [r0]
   11be4:	str	r1, [sp]
   11be8:	mov	r1, #0
   11bec:	bl	15e48 <__assert_fail@plt+0x4cf4>
   11bf0:	cmp	r0, #0
   11bf4:	ldreq	r0, [fp, #-36]	; 0xffffffdc
   11bf8:	cmpeq	r0, #0
   11bfc:	beq	11d10 <__assert_fail@plt+0xbbc>
   11c00:	cmp	r8, #2
   11c04:	beq	12410 <__assert_fail@plt+0x12bc>
   11c08:	movw	r0, #37224	; 0x9168
   11c0c:	add	r1, sp, #44	; 0x2c
   11c10:	movt	r0, #2
   11c14:	ldr	r0, [r0]
   11c18:	str	r0, [r1, r8, lsl #2]
   11c1c:	add	r8, r8, #1
   11c20:	mov	r0, #1
   11c24:	mov	r7, sl
   11c28:	b	116cc <__assert_fail@plt+0x578>
   11c2c:	movw	r0, #37244	; 0x917c
   11c30:	mov	r1, #0
   11c34:	mov	r7, sl
   11c38:	movt	r0, #2
   11c3c:	strb	r1, [r0]
   11c40:	mov	r0, #1
   11c44:	str	r0, [sp, #40]	; 0x28
   11c48:	mov	r0, #117	; 0x75
   11c4c:	b	116cc <__assert_fail@plt+0x578>
   11c50:	movw	r0, #37245	; 0x917d
   11c54:	mov	r1, #0
   11c58:	mov	r7, sl
   11c5c:	movt	r0, #2
   11c60:	strb	r1, [r0]
   11c64:	mov	r0, #1
   11c68:	str	r0, [sp, #40]	; 0x28
   11c6c:	mov	r0, #100	; 0x64
   11c70:	b	116cc <__assert_fail@plt+0x578>
   11c74:	movw	r0, #37224	; 0x9168
   11c78:	mov	r1, #0
   11c7c:	mov	r2, #10
   11c80:	sub	r3, fp, #40	; 0x28
   11c84:	movt	r0, #2
   11c88:	ldr	r7, [r0]
   11c8c:	movw	r0, #31032	; 0x7938
   11c90:	movt	r0, #1
   11c94:	str	r0, [sp]
   11c98:	mov	r0, r7
   11c9c:	bl	15e48 <__assert_fail@plt+0x4cf4>
   11ca0:	cmp	r0, #2
   11ca4:	bcs	1244c <__assert_fail@plt+0x12f8>
   11ca8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11cac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11cb0:	mvn	r3, #0
   11cb4:	mov	r7, sl
   11cb8:	subs	r2, r0, r3
   11cbc:	sbcs	r1, r1, #0
   11cc0:	movw	r1, #37240	; 0x9178
   11cc4:	movt	r1, #2
   11cc8:	movcs	r0, r3
   11ccc:	str	r0, [r1]
   11cd0:	mov	r0, #119	; 0x77
   11cd4:	b	116cc <__assert_fail@plt+0x578>
   11cd8:	movw	r0, #37260	; 0x918c
   11cdc:	mov	r1, #1
   11ce0:	mov	r7, sl
   11ce4:	movt	r0, #2
   11ce8:	strb	r1, [r0]
   11cec:	mov	r0, #105	; 0x69
   11cf0:	b	116cc <__assert_fail@plt+0x578>
   11cf4:	movw	r0, #37256	; 0x9188
   11cf8:	mov	r1, #3
   11cfc:	movt	r0, #2
   11d00:	str	r1, [r0]
   11d04:	mov	r0, #256	; 0x100
   11d08:	mov	r7, sl
   11d0c:	b	116cc <__assert_fail@plt+0x578>
   11d10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11d14:	movw	r1, #37232	; 0x9170
   11d18:	movt	r1, #2
   11d1c:	str	r0, [r1]
   11d20:	b	11c20 <__assert_fail@plt+0xacc>
   11d24:	movw	r0, #37256	; 0x9188
   11d28:	movt	r0, #2
   11d2c:	ldr	r0, [r0]
   11d30:	cmp	r0, #0
   11d34:	beq	11d48 <__assert_fail@plt+0xbf4>
   11d38:	ldr	r1, [sp, #40]	; 0x28
   11d3c:	eor	r1, r1, #1
   11d40:	tst	r1, #1
   11d44:	beq	124b4 <__assert_fail@plt+0x1360>
   11d48:	movw	r1, #37248	; 0x9180
   11d4c:	cmp	r0, #0
   11d50:	movt	r1, #2
   11d54:	ldrb	r1, [r1]
   11d58:	beq	11d64 <__assert_fail@plt+0xc10>
   11d5c:	cmp	r1, #0
   11d60:	beq	124c0 <__assert_fail@plt+0x136c>
   11d64:	cmp	r1, #0
   11d68:	bne	11d80 <__assert_fail@plt+0xc2c>
   11d6c:	movw	r0, #37246	; 0x917e
   11d70:	movt	r0, #2
   11d74:	ldrb	r0, [r0]
   11d78:	cmp	r0, #1
   11d7c:	beq	1252c <__assert_fail@plt+0x13d8>
   11d80:	ldr	r6, [sp, #44]	; 0x2c
   11d84:	movw	r1, #31729	; 0x7bf1
   11d88:	ldr	r4, [sp, #48]	; 0x30
   11d8c:	movt	r1, #1
   11d90:	mov	r0, r6
   11d94:	bl	10ee4 <strcmp@plt>
   11d98:	movw	r5, #37216	; 0x9160
   11d9c:	cmp	r0, #0
   11da0:	movt	r5, #2
   11da4:	beq	11dc4 <__assert_fail@plt+0xc70>
   11da8:	ldr	r2, [r5]
   11dac:	movw	r1, #31635	; 0x7b93
   11db0:	mov	r0, r6
   11db4:	movt	r1, #1
   11db8:	bl	12ed8 <__assert_fail@plt+0x1d84>
   11dbc:	cmp	r0, #0
   11dc0:	beq	124cc <__assert_fail@plt+0x1378>
   11dc4:	movw	r1, #31729	; 0x7bf1
   11dc8:	mov	r0, r4
   11dcc:	movt	r1, #1
   11dd0:	bl	10ee4 <strcmp@plt>
   11dd4:	cmp	r0, #0
   11dd8:	beq	11e00 <__assert_fail@plt+0xcac>
   11ddc:	movw	r0, #37220	; 0x9164
   11de0:	movw	r1, #31163	; 0x79bb
   11de4:	movt	r0, #2
   11de8:	movt	r1, #1
   11dec:	ldr	r2, [r0]
   11df0:	mov	r0, r4
   11df4:	bl	12ed8 <__assert_fail@plt+0x1d84>
   11df8:	cmp	r0, #0
   11dfc:	beq	124fc <__assert_fail@plt+0x13a8>
   11e00:	ldr	r0, [r5]
   11e04:	mov	r1, #2
   11e08:	str	r6, [sp, #12]
   11e0c:	bl	12d7c <__assert_fail@plt+0x1c28>
   11e10:	sub	r7, fp, #40	; 0x28
   11e14:	mov	r0, r7
   11e18:	bl	131c8 <__assert_fail@plt+0x2074>
   11e1c:	add	r4, sp, #52	; 0x34
   11e20:	mov	r0, r4
   11e24:	bl	131c8 <__assert_fail@plt+0x2074>
   11e28:	movw	r0, #37245	; 0x917d
   11e2c:	movt	r0, #2
   11e30:	ldrb	r0, [r0]
   11e34:	cmp	r0, #1
   11e38:	bne	11e9c <__assert_fail@plt+0xd48>
   11e3c:	movw	r0, #37244	; 0x917c
   11e40:	movt	r0, #2
   11e44:	ldrb	r0, [r0]
   11e48:	cmp	r0, #1
   11e4c:	bne	11e9c <__assert_fail@plt+0xd48>
   11e50:	movw	r0, #37248	; 0x9180
   11e54:	movt	r0, #2
   11e58:	ldrb	r0, [r0]
   11e5c:	cmp	r0, #0
   11e60:	beq	11e9c <__assert_fail@plt+0xd48>
   11e64:	ldr	r1, [r5]
   11e68:	mov	r2, #0
   11e6c:	str	r4, [sp, #40]	; 0x28
   11e70:	str	r2, [sp, #32]
   11e74:	ldrb	r0, [r1]
   11e78:	tst	r0, #16
   11e7c:	bne	12298 <__assert_fail@plt+0x1144>
   11e80:	uxtb	r0, sl
   11e84:	mov	r9, #0
   11e88:	sub	r6, fp, #40	; 0x28
   11e8c:	str	r0, [sp, #28]
   11e90:	mov	r0, #0
   11e94:	str	r0, [sp, #32]
   11e98:	b	12184 <__assert_fail@plt+0x1030>
   11e9c:	ldr	r1, [r5]
   11ea0:	uxtb	r2, sl
   11ea4:	add	r9, sp, #52	; 0x34
   11ea8:	mov	r0, r9
   11eac:	str	r2, [sp, #20]
   11eb0:	bl	132c8 <__assert_fail@plt+0x2174>
   11eb4:	cmp	r0, #0
   11eb8:	beq	12310 <__assert_fail@plt+0x11bc>
   11ebc:	mov	r0, r9
   11ec0:	bl	12558 <__assert_fail@plt+0x1404>
   11ec4:	ldr	r1, [r5]
   11ec8:	str	r0, [sp, #28]
   11ecc:	mov	r8, #0
   11ed0:	mov	r4, #0
   11ed4:	ldrb	r0, [r1]
   11ed8:	tst	r0, #16
   11edc:	bne	122fc <__assert_fail@plt+0x11a8>
   11ee0:	ldr	r0, [sp, #28]
   11ee4:	ldr	r2, [sp, #56]	; 0x38
   11ee8:	ldr	r3, [sp, #60]	; 0x3c
   11eec:	mov	r8, #0
   11ef0:	mov	r4, #0
   11ef4:	mvn	r0, r0
   11ef8:	add	r0, r2, r0
   11efc:	add	r6, r0, r3
   11f00:	mov	r0, #1
   11f04:	str	r0, [sp, #16]
   11f08:	add	r0, sp, #52	; 0x34
   11f0c:	str	r0, [sp, #32]
   11f10:	b	11f7c <__assert_fail@plt+0xe28>
   11f14:	ldr	r1, [sp, #16]
   11f18:	orr	r0, r8, r4
   11f1c:	clz	r0, r0
   11f20:	lsr	r0, r0, #5
   11f24:	and	r1, r1, r0
   11f28:	str	r1, [sp, #16]
   11f2c:	ldr	r7, [sp, #32]
   11f30:	mov	r1, r6
   11f34:	mov	r2, r8
   11f38:	mov	r3, r4
   11f3c:	mov	r0, r7
   11f40:	bl	12644 <__assert_fail@plt+0x14f0>
   11f44:	cmp	r9, #0
   11f48:	ldr	r9, [sp, #36]	; 0x24
   11f4c:	ldr	r0, [sp, #40]	; 0x28
   11f50:	mov	r6, r5
   11f54:	movwne	r8, #0
   11f58:	movwne	r4, #0
   11f5c:	str	r9, [sp, #32]
   11f60:	str	r0, [sp, #28]
   11f64:	movw	r5, #37216	; 0x9160
   11f68:	movt	r5, #2
   11f6c:	ldr	r1, [r5]
   11f70:	ldrb	r0, [r1]
   11f74:	tst	r0, #16
   11f78:	bne	122fc <__assert_fail@plt+0x11a8>
   11f7c:	ldr	r2, [sp, #20]
   11f80:	mov	r0, r7
   11f84:	bl	132c8 <__assert_fail@plt+0x2174>
   11f88:	cmp	r0, #0
   11f8c:	beq	122e8 <__assert_fail@plt+0x1194>
   11f90:	mov	r0, r7
   11f94:	bl	12558 <__assert_fail@plt+0x1404>
   11f98:	mov	r5, r0
   11f9c:	movw	r0, #37240	; 0x9178
   11fa0:	ldmib	r7, {r1, r3}
   11fa4:	str	r6, [sp, #24]
   11fa8:	mov	r9, #1
   11fac:	str	r7, [sp, #36]	; 0x24
   11fb0:	movt	r0, #2
   11fb4:	str	r5, [sp, #40]	; 0x28
   11fb8:	ldr	r2, [r0]
   11fbc:	mov	r0, r6
   11fc0:	cmp	r2, r6
   11fc4:	mvn	r6, r5
   11fc8:	add	r1, r1, r6
   11fcc:	movcc	r0, r2
   11fd0:	add	r5, r1, r3
   11fd4:	movw	r1, #37260	; 0x918c
   11fd8:	movt	r1, #2
   11fdc:	cmp	r2, r5
   11fe0:	movcs	r2, r5
   11fe4:	ldrb	r1, [r1]
   11fe8:	cmp	r1, #1
   11fec:	bne	12008 <__assert_fail@plt+0xeb4>
   11ff0:	cmp	r2, r0
   11ff4:	bne	12028 <__assert_fail@plt+0xed4>
   11ff8:	ldr	r0, [sp, #40]	; 0x28
   11ffc:	ldr	r1, [sp, #28]
   12000:	bl	133c0 <__assert_fail@plt+0x226c>
   12004:	b	1201c <__assert_fail@plt+0xec8>
   12008:	cmp	r2, r0
   1200c:	bne	12028 <__assert_fail@plt+0xed4>
   12010:	ldr	r0, [sp, #40]	; 0x28
   12014:	ldr	r1, [sp, #28]
   12018:	bl	11064 <bcmp@plt>
   1201c:	cmp	r0, #0
   12020:	mov	r9, r0
   12024:	movwne	r9, #1
   12028:	mvn	r3, #1
   1202c:	mvn	r2, #0
   12030:	eor	r6, r9, #1
   12034:	adds	r0, r3, #1
   12038:	adc	r1, r2, #0
   1203c:	adds	r8, r8, r6
   12040:	adc	r4, r4, #0
   12044:	eor	r0, r8, r0
   12048:	eor	r1, r4, r1
   1204c:	orrs	r0, r0, r1
   12050:	movw	r0, #37252	; 0x9184
   12054:	movt	r0, #2
   12058:	moveq	r4, r2
   1205c:	moveq	r8, r3
   12060:	ldr	r0, [r0]
   12064:	cmp	r0, #0
   12068:	beq	120c8 <__assert_fail@plt+0xf74>
   1206c:	cmp	r9, #0
   12070:	bne	11f14 <__assert_fail@plt+0xdc0>
   12074:	eor	r1, r8, #1
   12078:	orrs	r1, r1, r4
   1207c:	bne	120d0 <__assert_fail@plt+0xf7c>
   12080:	cmp	r0, #1
   12084:	beq	1209c <__assert_fail@plt+0xf48>
   12088:	cmp	r0, #2
   1208c:	bne	120d0 <__assert_fail@plt+0xf7c>
   12090:	ldr	r0, [sp, #16]
   12094:	tst	r0, #1
   12098:	bne	120d0 <__assert_fail@plt+0xf7c>
   1209c:	movw	r0, #37220	; 0x9164
   120a0:	movt	r0, #2
   120a4:	ldr	r0, [r0]
   120a8:	ldr	r1, [r0, #20]
   120ac:	ldr	r2, [r0, #24]
   120b0:	cmp	r1, r2
   120b4:	bcs	120f4 <__assert_fail@plt+0xfa0>
   120b8:	add	r2, r1, #1
   120bc:	str	r2, [r0, #20]
   120c0:	strb	sl, [r1]
   120c4:	b	120d0 <__assert_fail@plt+0xf7c>
   120c8:	cmp	r9, #0
   120cc:	bne	11f2c <__assert_fail@plt+0xdd8>
   120d0:	movw	r0, #37246	; 0x917e
   120d4:	movt	r0, #2
   120d8:	ldrb	r0, [r0]
   120dc:	cmp	r0, #1
   120e0:	beq	11f2c <__assert_fail@plt+0xdd8>
   120e4:	ldr	r9, [sp, #32]
   120e8:	ldr	r7, [sp, #36]	; 0x24
   120ec:	ldr	r6, [sp, #24]
   120f0:	b	11f64 <__assert_fail@plt+0xe10>
   120f4:	ldr	r1, [sp, #20]
   120f8:	bl	110f4 <__overflow@plt>
   120fc:	b	120d0 <__assert_fail@plt+0xf7c>
   12100:	cmp	r0, #1
   12104:	cmpne	r0, #4
   12108:	bne	1225c <__assert_fail@plt+0x1108>
   1210c:	movw	r0, #37220	; 0x9164
   12110:	movt	r0, #2
   12114:	ldr	r0, [r0]
   12118:	ldr	r1, [r0, #20]
   1211c:	ldr	r2, [r0, #24]
   12120:	cmp	r1, r2
   12124:	bcs	12280 <__assert_fail@plt+0x112c>
   12128:	add	r2, r1, #1
   1212c:	str	r2, [r0, #20]
   12130:	strb	sl, [r1]
   12134:	movw	r0, #37220	; 0x9164
   12138:	ldr	r2, [r6, #4]
   1213c:	mov	r1, #1
   12140:	movt	r0, #2
   12144:	str	r1, [sp, #32]
   12148:	mov	r1, #1
   1214c:	ldr	r3, [r0]
   12150:	ldr	r0, [r6, #8]
   12154:	bl	10f50 <fwrite_unlocked@plt>
   12158:	mov	r0, r6
   1215c:	ldr	r6, [sp, #40]	; 0x28
   12160:	mov	r9, r7
   12164:	str	r8, [sp, #36]	; 0x24
   12168:	str	r0, [sp, #40]	; 0x28
   1216c:	movw	r5, #37216	; 0x9160
   12170:	movt	r5, #2
   12174:	ldr	r1, [r5]
   12178:	ldrb	r0, [r1]
   1217c:	tst	r0, #16
   12180:	bne	12298 <__assert_fail@plt+0x1144>
   12184:	ldr	r2, [sp, #28]
   12188:	mov	r0, r6
   1218c:	bl	132c8 <__assert_fail@plt+0x2174>
   12190:	cmp	r0, #0
   12194:	beq	12298 <__assert_fail@plt+0x1144>
   12198:	mov	r0, r6
   1219c:	bl	12558 <__assert_fail@plt+0x1404>
   121a0:	mov	r7, r0
   121a4:	ldmib	r6, {r0, r1}
   121a8:	mov	r4, #1
   121ac:	cmp	r9, #0
   121b0:	mvn	r2, r7
   121b4:	add	r0, r0, r2
   121b8:	add	r8, r0, r1
   121bc:	beq	1222c <__assert_fail@plt+0x10d8>
   121c0:	movw	r0, #37240	; 0x9178
   121c4:	movw	r1, #37260	; 0x918c
   121c8:	movt	r0, #2
   121cc:	movt	r1, #2
   121d0:	ldr	r2, [r0]
   121d4:	ldr	r0, [sp, #36]	; 0x24
   121d8:	ldrb	r1, [r1]
   121dc:	cmp	r2, r0
   121e0:	movcc	r0, r2
   121e4:	cmp	r2, r8
   121e8:	movcs	r2, r8
   121ec:	cmp	r1, #1
   121f0:	bne	1220c <__assert_fail@plt+0x10b8>
   121f4:	cmp	r2, r0
   121f8:	bne	1222c <__assert_fail@plt+0x10d8>
   121fc:	mov	r0, r7
   12200:	mov	r1, r9
   12204:	bl	133c0 <__assert_fail@plt+0x226c>
   12208:	b	12220 <__assert_fail@plt+0x10cc>
   1220c:	cmp	r2, r0
   12210:	bne	1222c <__assert_fail@plt+0x10d8>
   12214:	mov	r0, r7
   12218:	mov	r1, r9
   1221c:	bl	11064 <bcmp@plt>
   12220:	cmp	r0, #0
   12224:	mov	r4, r0
   12228:	movwne	r4, #1
   1222c:	movw	r0, #37256	; 0x9188
   12230:	cmp	r4, #0
   12234:	movt	r0, #2
   12238:	ldr	r0, [r0]
   1223c:	cmpne	r0, #0
   12240:	bne	12100 <__assert_fail@plt+0xfac>
   12244:	clz	r0, r0
   12248:	mvn	r1, r4
   1224c:	lsr	r0, r0, #5
   12250:	tst	r1, r0
   12254:	beq	12134 <__assert_fail@plt+0xfe0>
   12258:	b	1216c <__assert_fail@plt+0x1018>
   1225c:	ldr	r1, [sp, #32]
   12260:	orr	r0, r0, #1
   12264:	subs	r0, r0, #3
   12268:	movwne	r0, #1
   1226c:	mvn	r1, r1
   12270:	orr	r0, r1, r0
   12274:	tst	r0, #1
   12278:	beq	1210c <__assert_fail@plt+0xfb8>
   1227c:	b	12134 <__assert_fail@plt+0xfe0>
   12280:	ldr	r1, [sp, #28]
   12284:	bl	110f4 <__overflow@plt>
   12288:	movw	r0, #37256	; 0x9188
   1228c:	movt	r0, #2
   12290:	ldr	r0, [r0]
   12294:	b	12244 <__assert_fail@plt+0x10f0>
   12298:	movw	r0, #37256	; 0x9188
   1229c:	movt	r0, #2
   122a0:	ldr	r0, [r0]
   122a4:	cmp	r0, #4
   122a8:	cmpne	r0, #2
   122ac:	bne	12310 <__assert_fail@plt+0x11bc>
   122b0:	ldr	r0, [sp, #32]
   122b4:	tst	r0, #1
   122b8:	beq	12310 <__assert_fail@plt+0x11bc>
   122bc:	movw	r0, #37220	; 0x9164
   122c0:	movt	r0, #2
   122c4:	ldr	r0, [r0]
   122c8:	ldr	r1, [r0, #20]
   122cc:	ldr	r2, [r0, #24]
   122d0:	cmp	r1, r2
   122d4:	bcs	12348 <__assert_fail@plt+0x11f4>
   122d8:	add	r2, r1, #1
   122dc:	str	r2, [r0, #20]
   122e0:	strb	sl, [r1]
   122e4:	b	12310 <__assert_fail@plt+0x11bc>
   122e8:	ldr	r0, [r5]
   122ec:	ldr	r9, [sp, #32]
   122f0:	ldrb	r0, [r0]
   122f4:	tst	r0, #32
   122f8:	bne	12310 <__assert_fail@plt+0x11bc>
   122fc:	mov	r0, r9
   12300:	mov	r1, #0
   12304:	mov	r2, r8
   12308:	mov	r3, r4
   1230c:	bl	12644 <__assert_fail@plt+0x14f0>
   12310:	ldr	r0, [r5]
   12314:	ldrb	r1, [r0]
   12318:	tst	r1, #32
   1231c:	bne	1247c <__assert_fail@plt+0x1328>
   12320:	bl	12db8 <__assert_fail@plt+0x1c64>
   12324:	cmp	r0, #0
   12328:	bne	1247c <__assert_fail@plt+0x1328>
   1232c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12330:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   12334:	ldr	r0, [sp, #60]	; 0x3c
   12338:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   1233c:	mov	r0, #0
   12340:	sub	sp, fp, #28
   12344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12348:	uxtb	r1, sl
   1234c:	bl	110f4 <__overflow@plt>
   12350:	b	12310 <__assert_fail@plt+0x11bc>
   12354:	mov	r0, #1
   12358:	bl	11250 <__assert_fail@plt+0xfc>
   1235c:	movw	r1, #30296	; 0x7658
   12360:	mov	r0, #0
   12364:	mov	r2, #5
   12368:	movt	r1, #1
   1236c:	bl	10f5c <dcgettext@plt>
   12370:	mov	r5, r0
   12374:	ldr	r0, [r7]
   12378:	ldr	r0, [r4, r0, lsl #2]
   1237c:	bl	150c4 <__assert_fail@plt+0x3f70>
   12380:	mov	r3, r0
   12384:	mov	r0, #0
   12388:	mov	r1, #0
   1238c:	mov	r2, r5
   12390:	bl	10fd4 <error@plt>
   12394:	mov	r0, #1
   12398:	bl	11250 <__assert_fail@plt+0xfc>
   1239c:	movw	r0, #37112	; 0x90f8
   123a0:	movw	r2, #30470	; 0x7706
   123a4:	mov	r1, #0
   123a8:	movw	r7, #30450	; 0x76f2
   123ac:	movt	r0, #2
   123b0:	movt	r2, #1
   123b4:	str	r1, [sp, #8]
   123b8:	movw	r1, #30227	; 0x7613
   123bc:	movt	r7, #1
   123c0:	movt	r1, #1
   123c4:	ldr	r3, [r0]
   123c8:	movw	r0, #37220	; 0x9164
   123cc:	str	r2, [sp, #4]
   123d0:	movw	r2, #30436	; 0x76e4
   123d4:	str	r7, [sp]
   123d8:	movt	r0, #2
   123dc:	movt	r2, #1
   123e0:	ldr	r0, [r0]
   123e4:	bl	15694 <__assert_fail@plt+0x4540>
   123e8:	mov	r0, #0
   123ec:	bl	11058 <exit@plt>
   123f0:	mov	r0, #0
   123f4:	bl	11250 <__assert_fail@plt+0xfc>
   123f8:	movw	r1, #30336	; 0x7680
   123fc:	movt	r1, #1
   12400:	b	12454 <__assert_fail@plt+0x1300>
   12404:	movw	r1, #30369	; 0x76a1
   12408:	movt	r1, #1
   1240c:	b	12454 <__assert_fail@plt+0x1300>
   12410:	movw	r1, #30296	; 0x7658
   12414:	mov	r0, #0
   12418:	mov	r2, #5
   1241c:	movt	r1, #1
   12420:	bl	10f5c <dcgettext@plt>
   12424:	mov	r4, r0
   12428:	movw	r0, #37224	; 0x9168
   1242c:	movt	r0, #2
   12430:	ldr	r0, [r0]
   12434:	bl	150c4 <__assert_fail@plt+0x3f70>
   12438:	mov	r3, r0
   1243c:	mov	r0, #0
   12440:	mov	r1, #0
   12444:	mov	r2, r4
   12448:	b	12390 <__assert_fail@plt+0x123c>
   1244c:	movw	r1, #30401	; 0x76c1
   12450:	movt	r1, #1
   12454:	mov	r0, #0
   12458:	mov	r2, #5
   1245c:	bl	10f5c <dcgettext@plt>
   12460:	movw	r2, #31156	; 0x79b4
   12464:	str	r0, [sp]
   12468:	mov	r0, #1
   1246c:	mov	r1, #0
   12470:	mov	r3, r7
   12474:	movt	r2, #1
   12478:	bl	10fd4 <error@plt>
   1247c:	movw	r1, #31165	; 0x79bd
   12480:	mov	r0, #0
   12484:	mov	r2, #5
   12488:	movt	r1, #1
   1248c:	bl	10f5c <dcgettext@plt>
   12490:	ldr	r1, [sp, #12]
   12494:	mov	r4, r0
   12498:	mov	r0, #4
   1249c:	bl	14b9c <__assert_fail@plt+0x3a48>
   124a0:	mov	r3, r0
   124a4:	mov	r0, #1
   124a8:	mov	r1, #0
   124ac:	mov	r2, r4
   124b0:	bl	10fd4 <error@plt>
   124b4:	movw	r1, #30486	; 0x7716
   124b8:	movt	r1, #1
   124bc:	b	12534 <__assert_fail@plt+0x13e0>
   124c0:	movw	r1, #30533	; 0x7745
   124c4:	movt	r1, #1
   124c8:	b	12534 <__assert_fail@plt+0x13e0>
   124cc:	bl	11088 <__errno_location@plt>
   124d0:	ldr	r4, [r0]
   124d4:	mov	r0, #0
   124d8:	mov	r1, #3
   124dc:	mov	r2, r6
   124e0:	bl	14e18 <__assert_fail@plt+0x3cc4>
   124e4:	movw	r2, #31622	; 0x7b86
   124e8:	mov	r3, r0
   124ec:	mov	r0, #1
   124f0:	mov	r1, r4
   124f4:	movt	r2, #1
   124f8:	bl	10fd4 <error@plt>
   124fc:	bl	11088 <__errno_location@plt>
   12500:	ldr	r5, [r0]
   12504:	mov	r0, #0
   12508:	mov	r1, #3
   1250c:	mov	r2, r4
   12510:	bl	14e18 <__assert_fail@plt+0x3cc4>
   12514:	movw	r2, #31622	; 0x7b86
   12518:	mov	r3, r0
   1251c:	mov	r0, #1
   12520:	mov	r1, r5
   12524:	movt	r2, #1
   12528:	bl	10fd4 <error@plt>
   1252c:	movw	r1, #30584	; 0x7778
   12530:	movt	r1, #1
   12534:	mov	r0, #0
   12538:	mov	r2, #5
   1253c:	bl	10f5c <dcgettext@plt>
   12540:	mov	r2, r0
   12544:	mov	r0, #0
   12548:	mov	r1, #0
   1254c:	bl	10fd4 <error@plt>
   12550:	mov	r0, #1
   12554:	bl	11250 <__assert_fail@plt+0xfc>
   12558:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1255c:	add	fp, sp, #24
   12560:	ldmib	r0, {r1, r4}
   12564:	mov	r5, #0
   12568:	subs	r6, r1, #1
   1256c:	beq	12620 <__assert_fail@plt+0x14cc>
   12570:	movw	r0, #37236	; 0x9174
   12574:	movt	r0, #2
   12578:	ldr	r8, [r0]
   1257c:	cmp	r8, #0
   12580:	beq	12620 <__assert_fail@plt+0x14cc>
   12584:	mov	r5, #0
   12588:	mov	r7, #0
   1258c:	cmp	r5, r6
   12590:	bcs	125c8 <__assert_fail@plt+0x1474>
   12594:	bl	1104c <__ctype_b_loc@plt>
   12598:	ldr	r0, [r0]
   1259c:	b	125ac <__assert_fail@plt+0x1458>
   125a0:	add	r5, r5, #1
   125a4:	cmp	r6, r5
   125a8:	beq	1261c <__assert_fail@plt+0x14c8>
   125ac:	ldrb	r1, [r4, r5]
   125b0:	cmp	r1, #10
   125b4:	beq	125a0 <__assert_fail@plt+0x144c>
   125b8:	add	r1, r0, r1, lsl #1
   125bc:	ldrh	r1, [r1]
   125c0:	ands	r1, r1, #1
   125c4:	bne	125a0 <__assert_fail@plt+0x144c>
   125c8:	cmp	r5, r6
   125cc:	bcs	12604 <__assert_fail@plt+0x14b0>
   125d0:	bl	1104c <__ctype_b_loc@plt>
   125d4:	ldr	r0, [r0]
   125d8:	ldrb	r1, [r4, r5]
   125dc:	cmp	r1, #10
   125e0:	beq	12604 <__assert_fail@plt+0x14b0>
   125e4:	add	r1, r0, r1, lsl #1
   125e8:	ldrh	r1, [r1]
   125ec:	ands	r1, r1, #1
   125f0:	bne	12604 <__assert_fail@plt+0x14b0>
   125f4:	add	r5, r5, #1
   125f8:	cmp	r6, r5
   125fc:	bne	125d8 <__assert_fail@plt+0x1484>
   12600:	b	1261c <__assert_fail@plt+0x14c8>
   12604:	cmp	r6, r5
   12608:	bls	12620 <__assert_fail@plt+0x14cc>
   1260c:	add	r7, r7, #1
   12610:	cmp	r7, r8
   12614:	bcc	1258c <__assert_fail@plt+0x1438>
   12618:	b	12620 <__assert_fail@plt+0x14cc>
   1261c:	mov	r5, r6
   12620:	movw	r1, #37232	; 0x9170
   12624:	sub	r0, r6, r5
   12628:	movt	r1, #2
   1262c:	ldr	r1, [r1]
   12630:	cmp	r1, r0
   12634:	movcc	r0, r1
   12638:	add	r0, r0, r5
   1263c:	add	r0, r4, r0
   12640:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12644:	push	{r4, sl, fp, lr}
   12648:	add	fp, sp, #8
   1264c:	mov	r4, r0
   12650:	orrs	r0, r2, r3
   12654:	beq	12678 <__assert_fail@plt+0x1524>
   12658:	cmp	r1, #0
   1265c:	beq	12684 <__assert_fail@plt+0x1530>
   12660:	movw	r0, #37246	; 0x917e
   12664:	movt	r0, #2
   12668:	ldrb	r0, [r0]
   1266c:	cmp	r0, #1
   12670:	popne	{r4, sl, fp, pc}
   12674:	b	12698 <__assert_fail@plt+0x1544>
   12678:	movw	r0, #37245	; 0x917d
   1267c:	movt	r0, #2
   12680:	b	1268c <__assert_fail@plt+0x1538>
   12684:	movw	r0, #37244	; 0x917c
   12688:	movt	r0, #2
   1268c:	ldrb	r0, [r0]
   12690:	cmp	r0, #0
   12694:	beq	126e4 <__assert_fail@plt+0x1590>
   12698:	movw	r0, #37248	; 0x9180
   1269c:	movt	r0, #2
   126a0:	ldrb	r0, [r0]
   126a4:	cmp	r0, #0
   126a8:	bne	126c4 <__assert_fail@plt+0x1570>
   126ac:	movw	r1, #31182	; 0x79ce
   126b0:	adds	r2, r2, #1
   126b4:	mov	r0, #1
   126b8:	movt	r1, #1
   126bc:	adc	r3, r3, #0
   126c0:	bl	110ac <__printf_chk@plt>
   126c4:	movw	r0, #37220	; 0x9164
   126c8:	ldr	r2, [r4, #4]
   126cc:	mov	r1, #1
   126d0:	movt	r0, #2
   126d4:	ldr	r3, [r0]
   126d8:	ldr	r0, [r4, #8]
   126dc:	pop	{r4, sl, fp, lr}
   126e0:	b	10f50 <fwrite_unlocked@plt>
   126e4:	pop	{r4, sl, fp, pc}
   126e8:	mov	r0, #1
   126ec:	b	11250 <__assert_fail@plt+0xfc>
   126f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126f4:	add	fp, sp, #28
   126f8:	sub	sp, sp, #12
   126fc:	mov	r4, r3
   12700:	mov	r6, r2
   12704:	mov	r5, r1
   12708:	mov	sl, r0
   1270c:	bl	11070 <strlen@plt>
   12710:	ldr	r8, [r5]
   12714:	cmp	r8, #0
   12718:	beq	127d8 <__assert_fail@plt+0x1684>
   1271c:	mov	r7, r0
   12720:	mov	r0, #0
   12724:	add	r9, r5, #4
   12728:	mov	r5, #0
   1272c:	str	r6, [sp, #4]
   12730:	str	r0, [sp]
   12734:	mvn	r0, #0
   12738:	str	r0, [sp, #8]
   1273c:	b	12758 <__assert_fail@plt+0x1604>
   12740:	str	r5, [sp, #8]
   12744:	ldr	r8, [r9, r5, lsl #2]
   12748:	add	r6, r6, r4
   1274c:	add	r5, r5, #1
   12750:	cmp	r8, #0
   12754:	beq	127c0 <__assert_fail@plt+0x166c>
   12758:	mov	r0, r8
   1275c:	mov	r1, sl
   12760:	mov	r2, r7
   12764:	bl	11130 <strncmp@plt>
   12768:	cmp	r0, #0
   1276c:	bne	12744 <__assert_fail@plt+0x15f0>
   12770:	mov	r0, r8
   12774:	bl	11070 <strlen@plt>
   12778:	cmp	r0, r7
   1277c:	beq	127dc <__assert_fail@plt+0x1688>
   12780:	ldr	r0, [sp, #8]
   12784:	cmn	r0, #1
   12788:	beq	12740 <__assert_fail@plt+0x15ec>
   1278c:	ldr	r0, [sp, #4]
   12790:	cmp	r0, #0
   12794:	beq	127b4 <__assert_fail@plt+0x1660>
   12798:	ldr	r1, [sp, #8]
   1279c:	mov	r2, r4
   127a0:	mla	r0, r1, r4, r0
   127a4:	mov	r1, r6
   127a8:	bl	11064 <bcmp@plt>
   127ac:	cmp	r0, #0
   127b0:	beq	12744 <__assert_fail@plt+0x15f0>
   127b4:	mov	r0, #1
   127b8:	str	r0, [sp]
   127bc:	b	12744 <__assert_fail@plt+0x15f0>
   127c0:	ldr	r0, [sp]
   127c4:	tst	r0, #1
   127c8:	ldr	r0, [sp, #8]
   127cc:	mvnne	r0, #1
   127d0:	sub	sp, fp, #28
   127d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d8:	mvn	r5, #0
   127dc:	mov	r0, r5
   127e0:	sub	sp, fp, #28
   127e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e8:	push	{r4, r5, r6, r7, fp, lr}
   127ec:	add	fp, sp, #16
   127f0:	mov	r5, r0
   127f4:	ldr	r0, [r1]
   127f8:	mvn	r4, #0
   127fc:	cmp	r0, #0
   12800:	beq	1282c <__assert_fail@plt+0x16d8>
   12804:	add	r7, r1, #4
   12808:	mov	r6, #0
   1280c:	mov	r1, r5
   12810:	bl	10ee4 <strcmp@plt>
   12814:	cmp	r0, #0
   12818:	beq	12834 <__assert_fail@plt+0x16e0>
   1281c:	ldr	r0, [r7, r6, lsl #2]
   12820:	add	r6, r6, #1
   12824:	cmp	r0, #0
   12828:	bne	1280c <__assert_fail@plt+0x16b8>
   1282c:	mov	r0, r4
   12830:	pop	{r4, r5, r6, r7, fp, pc}
   12834:	mov	r0, r6
   12838:	pop	{r4, r5, r6, r7, fp, pc}
   1283c:	push	{r4, r5, r6, sl, fp, lr}
   12840:	add	fp, sp, #16
   12844:	sub	sp, sp, #8
   12848:	mov	r5, r0
   1284c:	movw	r0, #31535	; 0x7b2f
   12850:	mov	r4, r1
   12854:	movw	r1, #31562	; 0x7b4a
   12858:	cmn	r2, #1
   1285c:	mov	r2, #5
   12860:	movt	r0, #1
   12864:	movt	r1, #1
   12868:	moveq	r1, r0
   1286c:	mov	r0, #0
   12870:	bl	10f5c <dcgettext@plt>
   12874:	mov	r6, r0
   12878:	mov	r0, #0
   1287c:	mov	r1, #8
   12880:	mov	r2, r4
   12884:	bl	14af4 <__assert_fail@plt+0x39a0>
   12888:	mov	r4, r0
   1288c:	mov	r0, #1
   12890:	mov	r1, r5
   12894:	bl	150b4 <__assert_fail@plt+0x3f60>
   12898:	str	r0, [sp]
   1289c:	mov	r0, #0
   128a0:	mov	r1, #0
   128a4:	mov	r2, r6
   128a8:	mov	r3, r4
   128ac:	bl	10fd4 <error@plt>
   128b0:	sub	sp, fp, #16
   128b4:	pop	{r4, r5, r6, sl, fp, pc}
   128b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128bc:	add	fp, sp, #28
   128c0:	sub	sp, sp, #4
   128c4:	mov	sl, r1
   128c8:	movw	r1, #31591	; 0x7b67
   128cc:	mov	r4, r2
   128d0:	mov	r6, r0
   128d4:	mov	r0, #0
   128d8:	mov	r2, #5
   128dc:	mov	r8, #0
   128e0:	movt	r1, #1
   128e4:	bl	10f5c <dcgettext@plt>
   128e8:	movw	r1, #37208	; 0x9158
   128ec:	movt	r1, #2
   128f0:	ldr	r1, [r1]
   128f4:	bl	10ecc <fputs_unlocked@plt>
   128f8:	ldr	r7, [r6]
   128fc:	cmp	r7, #0
   12900:	beq	129bc <__assert_fail@plt+0x1868>
   12904:	add	r0, r6, #4
   12908:	mov	r9, #0
   1290c:	mov	r6, #0
   12910:	str	r0, [sp]
   12914:	cmp	r9, #0
   12918:	bne	12970 <__assert_fail@plt+0x181c>
   1291c:	mov	r5, #0
   12920:	movw	r0, #37208	; 0x9158
   12924:	movt	r0, #2
   12928:	ldr	r6, [r0]
   1292c:	mov	r0, r7
   12930:	bl	150c4 <__assert_fail@plt+0x3f70>
   12934:	movw	r2, #31612	; 0x7b7c
   12938:	mov	r3, r0
   1293c:	mov	r0, r6
   12940:	mov	r1, #1
   12944:	movt	r2, #1
   12948:	bl	110c4 <__fprintf_chk@plt>
   1294c:	add	r6, sl, r5
   12950:	ldr	r0, [sp]
   12954:	add	r8, r8, r4
   12958:	ldr	r7, [r0, -r9, lsl #2]
   1295c:	sub	r9, r9, #1
   12960:	cmp	r7, #0
   12964:	beq	129bc <__assert_fail@plt+0x1868>
   12968:	cmp	r9, #0
   1296c:	beq	1291c <__assert_fail@plt+0x17c8>
   12970:	add	r1, sl, r8
   12974:	mov	r0, r6
   12978:	mov	r2, r4
   1297c:	bl	11064 <bcmp@plt>
   12980:	cmp	r0, #0
   12984:	mov	r5, r8
   12988:	bne	12920 <__assert_fail@plt+0x17cc>
   1298c:	movw	r0, #37208	; 0x9158
   12990:	movt	r0, #2
   12994:	ldr	r5, [r0]
   12998:	mov	r0, r7
   1299c:	bl	150c4 <__assert_fail@plt+0x3f70>
   129a0:	movw	r2, #31620	; 0x7b84
   129a4:	mov	r3, r0
   129a8:	mov	r0, r5
   129ac:	mov	r1, #1
   129b0:	movt	r2, #1
   129b4:	bl	110c4 <__fprintf_chk@plt>
   129b8:	b	12950 <__assert_fail@plt+0x17fc>
   129bc:	movw	r0, #37208	; 0x9158
   129c0:	movt	r0, #2
   129c4:	ldr	r0, [r0]
   129c8:	ldr	r1, [r0, #20]
   129cc:	ldr	r2, [r0, #24]
   129d0:	cmp	r1, r2
   129d4:	addcc	r2, r1, #1
   129d8:	strcc	r2, [r0, #20]
   129dc:	movcc	r0, #10
   129e0:	strbcc	r0, [r1]
   129e4:	subcc	sp, fp, #28
   129e8:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ec:	mov	r1, #10
   129f0:	sub	sp, fp, #28
   129f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f8:	b	110f4 <__overflow@plt>
   129fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a00:	add	fp, sp, #28
   12a04:	sub	sp, sp, #20
   12a08:	mov	r9, r0
   12a0c:	ldr	r0, [fp, #16]
   12a10:	mov	r8, r3
   12a14:	mov	sl, r2
   12a18:	mov	r7, r1
   12a1c:	cmp	r0, #0
   12a20:	beq	12ae0 <__assert_fail@plt+0x198c>
   12a24:	mov	r0, r7
   12a28:	str	r9, [sp, #8]
   12a2c:	str	r8, [sp, #16]
   12a30:	bl	11070 <strlen@plt>
   12a34:	ldr	r9, [sl]
   12a38:	cmp	r9, #0
   12a3c:	beq	12b50 <__assert_fail@plt+0x19fc>
   12a40:	str	sl, [sp, #4]
   12a44:	add	r8, sl, #4
   12a48:	ldr	sl, [sp, #16]
   12a4c:	mov	r4, r0
   12a50:	mov	r0, #0
   12a54:	mvn	r6, #0
   12a58:	mov	r5, #0
   12a5c:	str	r0, [sp, #12]
   12a60:	b	12a80 <__assert_fail@plt+0x192c>
   12a64:	mov	r6, r5
   12a68:	ldr	r9, [r8, r5, lsl #2]
   12a6c:	ldr	r0, [fp, #8]
   12a70:	add	r5, r5, #1
   12a74:	add	sl, sl, r0
   12a78:	cmp	r9, #0
   12a7c:	beq	12b20 <__assert_fail@plt+0x19cc>
   12a80:	mov	r0, r9
   12a84:	mov	r1, r7
   12a88:	mov	r2, r4
   12a8c:	bl	11130 <strncmp@plt>
   12a90:	cmp	r0, #0
   12a94:	bne	12a68 <__assert_fail@plt+0x1914>
   12a98:	mov	r0, r9
   12a9c:	bl	11070 <strlen@plt>
   12aa0:	cmp	r0, r4
   12aa4:	beq	12bd4 <__assert_fail@plt+0x1a80>
   12aa8:	cmn	r6, #1
   12aac:	beq	12a64 <__assert_fail@plt+0x1910>
   12ab0:	ldr	r0, [sp, #16]
   12ab4:	cmp	r0, #0
   12ab8:	beq	12ad4 <__assert_fail@plt+0x1980>
   12abc:	ldr	r2, [fp, #8]
   12ac0:	mov	r1, sl
   12ac4:	mla	r0, r6, r2, r0
   12ac8:	bl	11064 <bcmp@plt>
   12acc:	cmp	r0, #0
   12ad0:	beq	12a68 <__assert_fail@plt+0x1914>
   12ad4:	mov	r0, #1
   12ad8:	str	r0, [sp, #12]
   12adc:	b	12a68 <__assert_fail@plt+0x1914>
   12ae0:	ldr	r0, [sl]
   12ae4:	movw	r4, #31535	; 0x7b2f
   12ae8:	movt	r4, #1
   12aec:	cmp	r0, #0
   12af0:	beq	12b60 <__assert_fail@plt+0x1a0c>
   12af4:	add	r5, sl, #4
   12af8:	mov	r6, #0
   12afc:	mov	r1, r7
   12b00:	bl	10ee4 <strcmp@plt>
   12b04:	cmp	r0, #0
   12b08:	beq	12b38 <__assert_fail@plt+0x19e4>
   12b0c:	ldr	r0, [r5, r6, lsl #2]
   12b10:	add	r6, r6, #1
   12b14:	cmp	r0, #0
   12b18:	bne	12afc <__assert_fail@plt+0x19a8>
   12b1c:	b	12b60 <__assert_fail@plt+0x1a0c>
   12b20:	ldr	r0, [sp, #12]
   12b24:	ldr	r8, [sp, #16]
   12b28:	ldr	sl, [sp, #4]
   12b2c:	ldr	r9, [sp, #8]
   12b30:	tst	r0, #1
   12b34:	bne	12b44 <__assert_fail@plt+0x19f0>
   12b38:	cmn	r6, #1
   12b3c:	bgt	12bc8 <__assert_fail@plt+0x1a74>
   12b40:	beq	12b58 <__assert_fail@plt+0x1a04>
   12b44:	movw	r4, #31562	; 0x7b4a
   12b48:	movt	r4, #1
   12b4c:	b	12b60 <__assert_fail@plt+0x1a0c>
   12b50:	ldr	r8, [sp, #16]
   12b54:	ldr	r9, [sp, #8]
   12b58:	movw	r4, #31535	; 0x7b2f
   12b5c:	movt	r4, #1
   12b60:	ldr	r6, [fp, #12]
   12b64:	mov	r0, #0
   12b68:	mov	r1, r4
   12b6c:	mov	r2, #5
   12b70:	bl	10f5c <dcgettext@plt>
   12b74:	mov	r4, r0
   12b78:	mov	r0, #0
   12b7c:	mov	r1, #8
   12b80:	mov	r2, r7
   12b84:	bl	14af4 <__assert_fail@plt+0x39a0>
   12b88:	mov	r5, r0
   12b8c:	mov	r0, #1
   12b90:	mov	r1, r9
   12b94:	bl	150b4 <__assert_fail@plt+0x3f60>
   12b98:	str	r0, [sp]
   12b9c:	mov	r0, #0
   12ba0:	mov	r1, #0
   12ba4:	mov	r2, r4
   12ba8:	mov	r3, r5
   12bac:	bl	10fd4 <error@plt>
   12bb0:	ldr	r2, [fp, #8]
   12bb4:	mov	r0, sl
   12bb8:	mov	r1, r8
   12bbc:	bl	128b8 <__assert_fail@plt+0x1764>
   12bc0:	blx	r6
   12bc4:	mvn	r6, #0
   12bc8:	mov	r0, r6
   12bcc:	sub	sp, fp, #28
   12bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd4:	ldr	r8, [sp, #16]
   12bd8:	ldr	sl, [sp, #4]
   12bdc:	ldr	r9, [sp, #8]
   12be0:	mov	r6, r5
   12be4:	cmn	r6, #1
   12be8:	bgt	12bc8 <__assert_fail@plt+0x1a74>
   12bec:	b	12b40 <__assert_fail@plt+0x19ec>
   12bf0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12bf4:	add	fp, sp, #24
   12bf8:	ldr	r6, [r1]
   12bfc:	cmp	r6, #0
   12c00:	beq	12c64 <__assert_fail@plt+0x1b10>
   12c04:	mov	r8, r1
   12c08:	mov	r7, r2
   12c0c:	mov	r1, r2
   12c10:	mov	r2, r3
   12c14:	mov	r4, r3
   12c18:	mov	r9, r0
   12c1c:	bl	11064 <bcmp@plt>
   12c20:	cmp	r0, #0
   12c24:	beq	12c5c <__assert_fail@plt+0x1b08>
   12c28:	add	r7, r7, r4
   12c2c:	add	r5, r8, #4
   12c30:	ldr	r6, [r5]
   12c34:	cmp	r6, #0
   12c38:	beq	12c64 <__assert_fail@plt+0x1b10>
   12c3c:	mov	r0, r9
   12c40:	mov	r1, r7
   12c44:	mov	r2, r4
   12c48:	bl	11064 <bcmp@plt>
   12c4c:	add	r7, r7, r4
   12c50:	add	r5, r5, #4
   12c54:	cmp	r0, #0
   12c58:	bne	12c30 <__assert_fail@plt+0x1adc>
   12c5c:	mov	r0, r6
   12c60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c64:	mov	r6, #0
   12c68:	mov	r0, r6
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c70:	movw	r1, #37264	; 0x9190
   12c74:	movt	r1, #2
   12c78:	str	r0, [r1]
   12c7c:	bx	lr
   12c80:	movw	r1, #37268	; 0x9194
   12c84:	movt	r1, #2
   12c88:	strb	r0, [r1]
   12c8c:	bx	lr
   12c90:	push	{r4, r5, r6, sl, fp, lr}
   12c94:	add	fp, sp, #16
   12c98:	sub	sp, sp, #8
   12c9c:	movw	r0, #37220	; 0x9164
   12ca0:	movt	r0, #2
   12ca4:	ldr	r0, [r0]
   12ca8:	bl	16bc0 <__assert_fail@plt+0x5a6c>
   12cac:	cmp	r0, #0
   12cb0:	beq	12cd8 <__assert_fail@plt+0x1b84>
   12cb4:	movw	r0, #37268	; 0x9194
   12cb8:	movt	r0, #2
   12cbc:	ldrb	r0, [r0]
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cf8 <__assert_fail@plt+0x1ba4>
   12cc8:	bl	11088 <__errno_location@plt>
   12ccc:	ldr	r0, [r0]
   12cd0:	cmp	r0, #32
   12cd4:	bne	12cf8 <__assert_fail@plt+0x1ba4>
   12cd8:	movw	r0, #37208	; 0x9158
   12cdc:	movt	r0, #2
   12ce0:	ldr	r0, [r0]
   12ce4:	bl	16bc0 <__assert_fail@plt+0x5a6c>
   12ce8:	cmp	r0, #0
   12cec:	subeq	sp, fp, #16
   12cf0:	popeq	{r4, r5, r6, sl, fp, pc}
   12cf4:	b	12d68 <__assert_fail@plt+0x1c14>
   12cf8:	movw	r1, #31625	; 0x7b89
   12cfc:	mov	r0, #0
   12d00:	mov	r2, #5
   12d04:	movt	r1, #1
   12d08:	bl	10f5c <dcgettext@plt>
   12d0c:	mov	r4, r0
   12d10:	movw	r0, #37264	; 0x9190
   12d14:	movt	r0, #2
   12d18:	ldr	r6, [r0]
   12d1c:	bl	11088 <__errno_location@plt>
   12d20:	ldr	r5, [r0]
   12d24:	cmp	r6, #0
   12d28:	bne	12d44 <__assert_fail@plt+0x1bf0>
   12d2c:	movw	r2, #31622	; 0x7b86
   12d30:	mov	r0, #0
   12d34:	mov	r1, r5
   12d38:	mov	r3, r4
   12d3c:	movt	r2, #1
   12d40:	b	12d64 <__assert_fail@plt+0x1c10>
   12d44:	mov	r0, r6
   12d48:	bl	14d3c <__assert_fail@plt+0x3be8>
   12d4c:	movw	r2, #31156	; 0x79b4
   12d50:	mov	r3, r0
   12d54:	str	r4, [sp]
   12d58:	mov	r0, #0
   12d5c:	mov	r1, r5
   12d60:	movt	r2, #1
   12d64:	bl	10fd4 <error@plt>
   12d68:	movw	r0, #37120	; 0x9100
   12d6c:	movt	r0, #2
   12d70:	ldr	r0, [r0]
   12d74:	bl	10f20 <_exit@plt>
   12d78:	b	10efc <posix_fadvise64@plt>
   12d7c:	cmp	r0, #0
   12d80:	bxeq	lr
   12d84:	push	{r4, sl, fp, lr}
   12d88:	add	fp, sp, #8
   12d8c:	sub	sp, sp, #16
   12d90:	mov	r4, r1
   12d94:	bl	110b8 <fileno@plt>
   12d98:	mov	r1, #0
   12d9c:	mov	r2, #0
   12da0:	mov	r3, #0
   12da4:	str	r1, [sp]
   12da8:	stmib	sp, {r1, r4}
   12dac:	bl	10efc <posix_fadvise64@plt>
   12db0:	sub	sp, fp, #8
   12db4:	pop	{r4, sl, fp, pc}
   12db8:	push	{r4, r5, r6, sl, fp, lr}
   12dbc:	add	fp, sp, #16
   12dc0:	sub	sp, sp, #8
   12dc4:	mov	r4, r0
   12dc8:	bl	110b8 <fileno@plt>
   12dcc:	cmn	r0, #1
   12dd0:	ble	12e44 <__assert_fail@plt+0x1cf0>
   12dd4:	mov	r0, r4
   12dd8:	bl	11010 <__freading@plt>
   12ddc:	cmp	r0, #0
   12de0:	beq	12e0c <__assert_fail@plt+0x1cb8>
   12de4:	mov	r0, r4
   12de8:	bl	110b8 <fileno@plt>
   12dec:	mov	r1, #1
   12df0:	mov	r2, #0
   12df4:	mov	r3, #0
   12df8:	str	r1, [sp]
   12dfc:	bl	10fa4 <lseek64@plt>
   12e00:	and	r0, r0, r1
   12e04:	cmn	r0, #1
   12e08:	beq	12e44 <__assert_fail@plt+0x1cf0>
   12e0c:	mov	r0, r4
   12e10:	bl	12e54 <__assert_fail@plt+0x1d00>
   12e14:	cmp	r0, #0
   12e18:	beq	12e44 <__assert_fail@plt+0x1cf0>
   12e1c:	bl	11088 <__errno_location@plt>
   12e20:	ldr	r6, [r0]
   12e24:	mov	r5, r0
   12e28:	mov	r0, r4
   12e2c:	bl	110d0 <fclose@plt>
   12e30:	cmp	r6, #0
   12e34:	strne	r6, [r5]
   12e38:	mvnne	r0, #0
   12e3c:	sub	sp, fp, #16
   12e40:	pop	{r4, r5, r6, sl, fp, pc}
   12e44:	mov	r0, r4
   12e48:	sub	sp, fp, #16
   12e4c:	pop	{r4, r5, r6, sl, fp, lr}
   12e50:	b	110d0 <fclose@plt>
   12e54:	push	{r4, sl, fp, lr}
   12e58:	add	fp, sp, #8
   12e5c:	sub	sp, sp, #8
   12e60:	mov	r4, r0
   12e64:	cmp	r0, #0
   12e68:	beq	12ea0 <__assert_fail@plt+0x1d4c>
   12e6c:	mov	r0, r4
   12e70:	bl	11010 <__freading@plt>
   12e74:	cmp	r0, #0
   12e78:	beq	12ea0 <__assert_fail@plt+0x1d4c>
   12e7c:	ldrb	r0, [r4, #1]
   12e80:	tst	r0, #1
   12e84:	beq	12ea0 <__assert_fail@plt+0x1d4c>
   12e88:	mov	r0, #1
   12e8c:	mov	r2, #0
   12e90:	mov	r3, #0
   12e94:	str	r0, [sp]
   12e98:	mov	r0, r4
   12e9c:	bl	13120 <__assert_fail@plt+0x1fcc>
   12ea0:	mov	r0, r4
   12ea4:	sub	sp, fp, #8
   12ea8:	pop	{r4, sl, fp, lr}
   12eac:	b	10f08 <fflush@plt>
   12eb0:	push	{r4, r5, r6, sl, fp, lr}
   12eb4:	add	fp, sp, #16
   12eb8:	mov	r4, r0
   12ebc:	bl	11088 <__errno_location@plt>
   12ec0:	ldr	r6, [r0]
   12ec4:	mov	r5, r0
   12ec8:	mov	r0, r4
   12ecc:	bl	10f14 <free@plt>
   12ed0:	str	r6, [r5]
   12ed4:	pop	{r4, r5, r6, sl, fp, pc}
   12ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12edc:	add	fp, sp, #28
   12ee0:	sub	sp, sp, #4
   12ee4:	mov	r5, r0
   12ee8:	mov	r0, r2
   12eec:	mov	r4, r2
   12ef0:	mov	r9, r1
   12ef4:	bl	110b8 <fileno@plt>
   12ef8:	mov	r7, #0
   12efc:	cmp	r0, #0
   12f00:	beq	12f40 <__assert_fail@plt+0x1dec>
   12f04:	cmp	r0, #1
   12f08:	beq	12f4c <__assert_fail@plt+0x1df8>
   12f0c:	cmp	r0, #2
   12f10:	beq	12f28 <__assert_fail@plt+0x1dd4>
   12f14:	mov	r0, #2
   12f18:	mov	r1, #2
   12f1c:	bl	10f68 <dup2@plt>
   12f20:	subs	r7, r0, #2
   12f24:	movwne	r7, #1
   12f28:	mov	r0, #1
   12f2c:	mov	r1, #1
   12f30:	bl	10f68 <dup2@plt>
   12f34:	subs	r6, r0, #1
   12f38:	movwne	r6, #1
   12f3c:	b	12f50 <__assert_fail@plt+0x1dfc>
   12f40:	mov	r6, #0
   12f44:	mov	r8, #0
   12f48:	b	13018 <__assert_fail@plt+0x1ec4>
   12f4c:	mov	r6, #0
   12f50:	mov	r0, #0
   12f54:	mov	r1, #0
   12f58:	mov	sl, #0
   12f5c:	bl	10f68 <dup2@plt>
   12f60:	cmp	r0, #0
   12f64:	mov	r8, #0
   12f68:	beq	12fa8 <__assert_fail@plt+0x1e54>
   12f6c:	movw	r0, #31637	; 0x7b95
   12f70:	mov	r1, #0
   12f74:	movt	r0, #1
   12f78:	bl	10fe0 <open64@plt>
   12f7c:	cmp	r0, #0
   12f80:	beq	12fa4 <__assert_fail@plt+0x1e50>
   12f84:	cmn	r0, #1
   12f88:	ble	130a4 <__assert_fail@plt+0x1f50>
   12f8c:	bl	11148 <close@plt>
   12f90:	bl	11088 <__errno_location@plt>
   12f94:	mov	r4, r0
   12f98:	mov	r0, #9
   12f9c:	str	r0, [r4]
   12fa0:	b	130ac <__assert_fail@plt+0x1f58>
   12fa4:	mov	r8, #1
   12fa8:	cmp	r6, #0
   12fac:	beq	12fcc <__assert_fail@plt+0x1e78>
   12fb0:	movw	r0, #31637	; 0x7b95
   12fb4:	mov	r1, #0
   12fb8:	movt	r0, #1
   12fbc:	bl	10fe0 <open64@plt>
   12fc0:	mov	sl, #1
   12fc4:	cmp	r0, #1
   12fc8:	bne	13084 <__assert_fail@plt+0x1f30>
   12fcc:	cmp	r7, #0
   12fd0:	beq	13010 <__assert_fail@plt+0x1ebc>
   12fd4:	movw	r0, #31637	; 0x7b95
   12fd8:	mov	r1, #0
   12fdc:	movt	r0, #1
   12fe0:	bl	10fe0 <open64@plt>
   12fe4:	mov	r7, #1
   12fe8:	cmp	r0, #2
   12fec:	beq	13014 <__assert_fail@plt+0x1ec0>
   12ff0:	cmn	r0, #1
   12ff4:	ble	130fc <__assert_fail@plt+0x1fa8>
   12ff8:	bl	11148 <close@plt>
   12ffc:	bl	11088 <__errno_location@plt>
   13000:	mov	r4, r0
   13004:	mov	r0, #9
   13008:	str	r0, [r4]
   1300c:	b	13104 <__assert_fail@plt+0x1fb0>
   13010:	mov	r7, #0
   13014:	mov	r6, sl
   13018:	mov	r0, r5
   1301c:	mov	r1, r9
   13020:	mov	r2, r4
   13024:	bl	11034 <freopen64@plt>
   13028:	mov	r5, r0
   1302c:	bl	11088 <__errno_location@plt>
   13030:	ldr	r9, [r0]
   13034:	mov	r4, r0
   13038:	cmp	r7, #0
   1303c:	beq	13048 <__assert_fail@plt+0x1ef4>
   13040:	mov	r0, #2
   13044:	bl	11148 <close@plt>
   13048:	cmp	r6, #0
   1304c:	beq	13058 <__assert_fail@plt+0x1f04>
   13050:	mov	r0, #1
   13054:	bl	11148 <close@plt>
   13058:	cmp	r8, #0
   1305c:	beq	13068 <__assert_fail@plt+0x1f14>
   13060:	mov	r0, #0
   13064:	bl	11148 <close@plt>
   13068:	cmp	r5, #0
   1306c:	bne	13078 <__assert_fail@plt+0x1f24>
   13070:	mov	r5, #0
   13074:	str	r9, [r4]
   13078:	mov	r0, r5
   1307c:	sub	sp, fp, #28
   13080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13084:	cmn	r0, #1
   13088:	ble	130c4 <__assert_fail@plt+0x1f70>
   1308c:	bl	11148 <close@plt>
   13090:	bl	11088 <__errno_location@plt>
   13094:	mov	r4, r0
   13098:	mov	r0, #9
   1309c:	str	r0, [r4]
   130a0:	b	130cc <__assert_fail@plt+0x1f78>
   130a4:	bl	11088 <__errno_location@plt>
   130a8:	mov	r4, r0
   130ac:	ldr	r9, [r4]
   130b0:	mov	r8, #1
   130b4:	mov	r5, #0
   130b8:	cmp	r7, #0
   130bc:	bne	13040 <__assert_fail@plt+0x1eec>
   130c0:	b	13048 <__assert_fail@plt+0x1ef4>
   130c4:	bl	11088 <__errno_location@plt>
   130c8:	mov	r4, r0
   130cc:	ldr	r9, [r4]
   130d0:	mov	r5, #0
   130d4:	cmp	r7, #0
   130d8:	beq	13050 <__assert_fail@plt+0x1efc>
   130dc:	mov	r0, #2
   130e0:	bl	11148 <close@plt>
   130e4:	mov	r0, #1
   130e8:	bl	11148 <close@plt>
   130ec:	mov	r5, #0
   130f0:	cmp	r8, #0
   130f4:	bne	13060 <__assert_fail@plt+0x1f0c>
   130f8:	b	13070 <__assert_fail@plt+0x1f1c>
   130fc:	bl	11088 <__errno_location@plt>
   13100:	mov	r4, r0
   13104:	ldr	r9, [r4]
   13108:	mov	r0, #2
   1310c:	bl	11148 <close@plt>
   13110:	mov	r5, #0
   13114:	cmp	sl, #0
   13118:	bne	13050 <__assert_fail@plt+0x1efc>
   1311c:	b	13058 <__assert_fail@plt+0x1f04>
   13120:	push	{r4, r5, r6, r7, fp, lr}
   13124:	add	fp, sp, #16
   13128:	sub	sp, sp, #8
   1312c:	mov	r4, r0
   13130:	ldr	r0, [r0, #4]
   13134:	mov	r5, r3
   13138:	mov	r6, r2
   1313c:	ldr	r1, [r4, #8]
   13140:	cmp	r1, r0
   13144:	bne	13160 <__assert_fail@plt+0x200c>
   13148:	ldrd	r0, [r4, #16]
   1314c:	cmp	r1, r0
   13150:	bne	13160 <__assert_fail@plt+0x200c>
   13154:	ldr	r0, [r4, #36]	; 0x24
   13158:	cmp	r0, #0
   1315c:	beq	13178 <__assert_fail@plt+0x2024>
   13160:	mov	r0, r4
   13164:	mov	r2, r6
   13168:	mov	r3, r5
   1316c:	sub	sp, fp, #16
   13170:	pop	{r4, r5, r6, r7, fp, lr}
   13174:	b	110dc <fseeko64@plt>
   13178:	ldr	r7, [fp, #8]
   1317c:	mov	r0, r4
   13180:	bl	110b8 <fileno@plt>
   13184:	mov	r2, r6
   13188:	mov	r3, r5
   1318c:	str	r7, [sp]
   13190:	bl	10fa4 <lseek64@plt>
   13194:	and	r2, r0, r1
   13198:	cmn	r2, #1
   1319c:	beq	131bc <__assert_fail@plt+0x2068>
   131a0:	strd	r0, [r4, #80]	; 0x50
   131a4:	ldr	r0, [r4]
   131a8:	bic	r0, r0, #16
   131ac:	str	r0, [r4]
   131b0:	mov	r0, #0
   131b4:	sub	sp, fp, #16
   131b8:	pop	{r4, r5, r6, r7, fp, pc}
   131bc:	mvn	r0, #0
   131c0:	sub	sp, fp, #16
   131c4:	pop	{r4, r5, r6, r7, fp, pc}
   131c8:	mov	r1, #0
   131cc:	str	r1, [r0]
   131d0:	str	r1, [r0, #4]
   131d4:	str	r1, [r0, #8]
   131d8:	bx	lr
   131dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e0:	add	fp, sp, #28
   131e4:	sub	sp, sp, #4
   131e8:	mov	r9, r0
   131ec:	ldrb	r0, [r1]
   131f0:	tst	r0, #16
   131f4:	bne	132b8 <__assert_fail@plt+0x2164>
   131f8:	ldr	r4, [r9, #8]
   131fc:	ldr	r0, [r9]
   13200:	mov	r5, r1
   13204:	mov	r8, #1
   13208:	add	sl, r4, r0
   1320c:	mov	r6, r4
   13210:	b	13220 <__assert_fail@plt+0x20cc>
   13214:	strb	r7, [r6], #1
   13218:	cmp	r7, #10
   1321c:	beq	132ac <__assert_fail@plt+0x2158>
   13220:	ldmib	r5, {r0, r1}
   13224:	cmp	r0, r1
   13228:	bcs	13274 <__assert_fail@plt+0x2120>
   1322c:	add	r1, r0, #1
   13230:	str	r1, [r5, #4]
   13234:	ldrb	r7, [r0]
   13238:	cmp	r6, sl
   1323c:	bne	13214 <__assert_fail@plt+0x20c0>
   13240:	ldr	r6, [r9]
   13244:	mov	r0, r4
   13248:	mov	r1, r9
   1324c:	mov	r2, #1
   13250:	mvn	r3, #0
   13254:	str	r8, [sp]
   13258:	bl	15af8 <__assert_fail@plt+0x49a4>
   1325c:	str	r0, [r9, #8]
   13260:	mov	r4, r0
   13264:	add	r6, r0, r6
   13268:	ldr	r0, [r9]
   1326c:	add	sl, r4, r0
   13270:	b	13214 <__assert_fail@plt+0x20c0>
   13274:	mov	r0, r5
   13278:	bl	110e8 <__uflow@plt>
   1327c:	mov	r7, r0
   13280:	cmn	r0, #1
   13284:	bne	13238 <__assert_fail@plt+0x20e4>
   13288:	cmp	r6, r4
   1328c:	beq	132b8 <__assert_fail@plt+0x2164>
   13290:	ldrb	r0, [r5]
   13294:	tst	r0, #32
   13298:	bne	132b8 <__assert_fail@plt+0x2164>
   1329c:	ldrb	r0, [r6, #-1]
   132a0:	mov	r7, #10
   132a4:	cmp	r0, #10
   132a8:	bne	13238 <__assert_fail@plt+0x20e4>
   132ac:	sub	r0, r6, r4
   132b0:	str	r0, [r9, #4]
   132b4:	b	132bc <__assert_fail@plt+0x2168>
   132b8:	mov	r9, #0
   132bc:	mov	r0, r9
   132c0:	sub	sp, fp, #28
   132c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132cc:	add	fp, sp, #28
   132d0:	sub	sp, sp, #4
   132d4:	mov	sl, r0
   132d8:	ldrb	r0, [r1]
   132dc:	tst	r0, #16
   132e0:	bne	133a8 <__assert_fail@plt+0x2254>
   132e4:	ldr	r4, [sl, #8]
   132e8:	ldr	r0, [sl]
   132ec:	mov	r8, r2
   132f0:	mov	r6, r1
   132f4:	add	r9, r4, r0
   132f8:	mov	r7, r4
   132fc:	b	1330c <__assert_fail@plt+0x21b8>
   13300:	strb	r5, [r7], #1
   13304:	cmp	r5, r8
   13308:	beq	1339c <__assert_fail@plt+0x2248>
   1330c:	ldmib	r6, {r0, r1}
   13310:	cmp	r0, r1
   13314:	bcs	13364 <__assert_fail@plt+0x2210>
   13318:	add	r1, r0, #1
   1331c:	str	r1, [r6, #4]
   13320:	ldrb	r5, [r0]
   13324:	cmp	r7, r9
   13328:	bne	13300 <__assert_fail@plt+0x21ac>
   1332c:	ldr	r7, [sl]
   13330:	mov	r0, #1
   13334:	mov	r1, sl
   13338:	mov	r2, #1
   1333c:	mvn	r3, #0
   13340:	str	r0, [sp]
   13344:	mov	r0, r4
   13348:	bl	15af8 <__assert_fail@plt+0x49a4>
   1334c:	str	r0, [sl, #8]
   13350:	mov	r4, r0
   13354:	add	r7, r0, r7
   13358:	ldr	r0, [sl]
   1335c:	add	r9, r4, r0
   13360:	b	13300 <__assert_fail@plt+0x21ac>
   13364:	mov	r0, r6
   13368:	bl	110e8 <__uflow@plt>
   1336c:	mov	r5, r0
   13370:	cmn	r0, #1
   13374:	bne	13324 <__assert_fail@plt+0x21d0>
   13378:	cmp	r7, r4
   1337c:	beq	133a8 <__assert_fail@plt+0x2254>
   13380:	ldrb	r0, [r6]
   13384:	tst	r0, #32
   13388:	bne	133a8 <__assert_fail@plt+0x2254>
   1338c:	ldrb	r0, [r7, #-1]
   13390:	mov	r5, r8
   13394:	cmp	r0, r8
   13398:	bne	13324 <__assert_fail@plt+0x21d0>
   1339c:	sub	r0, r7, r4
   133a0:	str	r0, [sl, #4]
   133a4:	b	133ac <__assert_fail@plt+0x2258>
   133a8:	mov	sl, #0
   133ac:	mov	r0, sl
   133b0:	sub	sp, fp, #28
   133b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b8:	ldr	r0, [r0, #8]
   133bc:	b	12eb0 <__assert_fail@plt+0x1d5c>
   133c0:	push	{r4, r5, r6, sl, fp, lr}
   133c4:	add	fp, sp, #16
   133c8:	cmp	r2, #0
   133cc:	beq	1340c <__assert_fail@plt+0x22b8>
   133d0:	mov	r4, r2
   133d4:	mov	r5, r1
   133d8:	mov	r6, r0
   133dc:	bl	1101c <__ctype_toupper_loc@plt>
   133e0:	ldr	r1, [r0]
   133e4:	ldrb	r0, [r5]
   133e8:	ldrb	r2, [r6]
   133ec:	ldr	r0, [r1, r0, lsl #2]
   133f0:	ldr	r2, [r1, r2, lsl #2]
   133f4:	subs	r0, r2, r0
   133f8:	bne	13410 <__assert_fail@plt+0x22bc>
   133fc:	add	r6, r6, #1
   13400:	add	r5, r5, #1
   13404:	subs	r4, r4, #1
   13408:	bne	133e4 <__assert_fail@plt+0x2290>
   1340c:	mov	r0, #0
   13410:	pop	{r4, r5, r6, sl, fp, pc}
   13414:	push	{r4, sl, fp, lr}
   13418:	add	fp, sp, #8
   1341c:	sub	sp, sp, #8
   13420:	movw	r0, #31647	; 0x7b9f
   13424:	movt	r0, #1
   13428:	bl	10fec <getenv@plt>
   1342c:	movw	r4, #4201	; 0x1069
   13430:	cmp	r0, #0
   13434:	movt	r4, #3
   13438:	beq	13464 <__assert_fail@plt+0x2310>
   1343c:	ldrb	r1, [r0]
   13440:	cmp	r1, #0
   13444:	beq	13464 <__assert_fail@plt+0x2310>
   13448:	add	r1, sp, #4
   1344c:	mov	r2, #10
   13450:	bl	10ef0 <strtol@plt>
   13454:	ldr	r1, [sp, #4]
   13458:	ldrb	r1, [r1]
   1345c:	cmp	r1, #0
   13460:	moveq	r4, r0
   13464:	mov	r0, r4
   13468:	sub	sp, fp, #8
   1346c:	pop	{r4, sl, fp, pc}
   13470:	push	{r4, r5, fp, lr}
   13474:	add	fp, sp, #8
   13478:	cmp	r0, #0
   1347c:	beq	13510 <__assert_fail@plt+0x23bc>
   13480:	mov	r1, #47	; 0x2f
   13484:	mov	r4, r0
   13488:	bl	1110c <strrchr@plt>
   1348c:	cmp	r0, #0
   13490:	mov	r5, r4
   13494:	addne	r5, r0, #1
   13498:	sub	r0, r5, r4
   1349c:	cmp	r0, #7
   134a0:	blt	134f4 <__assert_fail@plt+0x23a0>
   134a4:	movw	r1, #31719	; 0x7be7
   134a8:	sub	r0, r5, #7
   134ac:	mov	r2, #7
   134b0:	movt	r1, #1
   134b4:	bl	11130 <strncmp@plt>
   134b8:	cmp	r0, #0
   134bc:	bne	134f4 <__assert_fail@plt+0x23a0>
   134c0:	movw	r1, #31727	; 0x7bef
   134c4:	mov	r0, r5
   134c8:	mov	r2, #3
   134cc:	movt	r1, #1
   134d0:	bl	11130 <strncmp@plt>
   134d4:	cmp	r0, #0
   134d8:	beq	134e4 <__assert_fail@plt+0x2390>
   134dc:	mov	r4, r5
   134e0:	b	134f4 <__assert_fail@plt+0x23a0>
   134e4:	movw	r0, #37192	; 0x9148
   134e8:	add	r4, r5, #3
   134ec:	movt	r0, #2
   134f0:	str	r4, [r0]
   134f4:	movw	r0, #37196	; 0x914c
   134f8:	movt	r0, #2
   134fc:	str	r4, [r0]
   13500:	movw	r0, #37272	; 0x9198
   13504:	movt	r0, #2
   13508:	str	r4, [r0]
   1350c:	pop	{r4, r5, fp, pc}
   13510:	movw	r0, #37208	; 0x9158
   13514:	mov	r1, #55	; 0x37
   13518:	mov	r2, #1
   1351c:	movt	r0, #2
   13520:	ldr	r3, [r0]
   13524:	movw	r0, #31663	; 0x7baf
   13528:	movt	r0, #1
   1352c:	bl	10f98 <fwrite@plt>
   13530:	bl	1113c <abort@plt>
   13534:	push	{r4, r5, r6, sl, fp, lr}
   13538:	add	fp, sp, #16
   1353c:	mov	r4, r0
   13540:	movw	r0, #37280	; 0x91a0
   13544:	movt	r0, #2
   13548:	cmp	r4, #0
   1354c:	moveq	r4, r0
   13550:	bl	11088 <__errno_location@plt>
   13554:	ldr	r6, [r0]
   13558:	mov	r5, r0
   1355c:	mov	r0, r4
   13560:	mov	r1, #48	; 0x30
   13564:	bl	15d28 <__assert_fail@plt+0x4bd4>
   13568:	str	r6, [r5]
   1356c:	pop	{r4, r5, r6, sl, fp, pc}
   13570:	movw	r1, #37280	; 0x91a0
   13574:	cmp	r0, #0
   13578:	movt	r1, #2
   1357c:	movne	r1, r0
   13580:	ldr	r0, [r1]
   13584:	bx	lr
   13588:	movw	r2, #37280	; 0x91a0
   1358c:	cmp	r0, #0
   13590:	movt	r2, #2
   13594:	movne	r2, r0
   13598:	str	r1, [r2]
   1359c:	bx	lr
   135a0:	movw	r3, #37280	; 0x91a0
   135a4:	cmp	r0, #0
   135a8:	and	r2, r2, #1
   135ac:	movt	r3, #2
   135b0:	movne	r3, r0
   135b4:	ubfx	r0, r1, #5, #3
   135b8:	and	r1, r1, #31
   135bc:	add	ip, r3, r0, lsl #2
   135c0:	mov	r0, #1
   135c4:	ldr	r3, [ip, #8]
   135c8:	and	r0, r0, r3, lsr r1
   135cc:	eor	r2, r0, r2
   135d0:	eor	r1, r3, r2, lsl r1
   135d4:	str	r1, [ip, #8]
   135d8:	bx	lr
   135dc:	movw	r2, #37280	; 0x91a0
   135e0:	cmp	r0, #0
   135e4:	movt	r2, #2
   135e8:	movne	r2, r0
   135ec:	ldr	r0, [r2, #4]
   135f0:	str	r1, [r2, #4]
   135f4:	bx	lr
   135f8:	push	{fp, lr}
   135fc:	mov	fp, sp
   13600:	movw	r3, #37280	; 0x91a0
   13604:	cmp	r0, #0
   13608:	movt	r3, #2
   1360c:	movne	r3, r0
   13610:	cmp	r1, #0
   13614:	mov	r0, #10
   13618:	cmpne	r2, #0
   1361c:	str	r0, [r3]
   13620:	bne	13628 <__assert_fail@plt+0x24d4>
   13624:	bl	1113c <abort@plt>
   13628:	str	r1, [r3, #40]	; 0x28
   1362c:	str	r2, [r3, #44]	; 0x2c
   13630:	pop	{fp, pc}
   13634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13638:	add	fp, sp, #28
   1363c:	sub	sp, sp, #20
   13640:	mov	r7, r0
   13644:	ldr	r0, [fp, #8]
   13648:	movw	r5, #37280	; 0x91a0
   1364c:	mov	r8, r3
   13650:	mov	r9, r2
   13654:	mov	sl, r1
   13658:	movt	r5, #2
   1365c:	cmp	r0, #0
   13660:	movne	r5, r0
   13664:	bl	11088 <__errno_location@plt>
   13668:	ldr	r2, [r5, #40]	; 0x28
   1366c:	ldr	r3, [r5, #44]	; 0x2c
   13670:	mov	r4, r0
   13674:	ldm	r5, {r0, r1}
   13678:	add	r5, r5, #8
   1367c:	ldr	r6, [r4]
   13680:	stm	sp, {r0, r1, r5}
   13684:	mov	r0, r7
   13688:	mov	r1, sl
   1368c:	str	r2, [sp, #12]
   13690:	str	r3, [sp, #16]
   13694:	mov	r2, r9
   13698:	mov	r3, r8
   1369c:	bl	136ac <__assert_fail@plt+0x2558>
   136a0:	str	r6, [r4]
   136a4:	sub	sp, fp, #28
   136a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136b0:	add	fp, sp, #28
   136b4:	sub	sp, sp, #156	; 0x9c
   136b8:	mov	r5, r0
   136bc:	add	r0, r2, #1
   136c0:	mov	r6, r1
   136c4:	mov	sl, r3
   136c8:	str	r2, [fp, #-80]	; 0xffffffb0
   136cc:	str	r0, [sp, #72]	; 0x48
   136d0:	ldr	r0, [fp, #12]
   136d4:	and	r1, r0, #1
   136d8:	str	r1, [sp, #36]	; 0x24
   136dc:	and	r1, r0, #4
   136e0:	str	r1, [sp, #32]
   136e4:	ubfx	r9, r0, #1, #1
   136e8:	bl	10fb0 <__ctype_get_mb_cur_max@plt>
   136ec:	str	r0, [sp, #40]	; 0x28
   136f0:	ldr	r0, [fp, #24]
   136f4:	ldr	r7, [fp, #8]
   136f8:	mov	r1, #0
   136fc:	str	r5, [fp, #-84]	; 0xffffffac
   13700:	str	r1, [fp, #-56]	; 0xffffffc8
   13704:	mov	r1, #0
   13708:	str	r1, [sp, #60]	; 0x3c
   1370c:	mov	r1, #1
   13710:	str	r1, [fp, #-48]	; 0xffffffd0
   13714:	str	r0, [sp, #80]	; 0x50
   13718:	ldr	r0, [fp, #20]
   1371c:	str	r0, [sp, #76]	; 0x4c
   13720:	mov	r0, #0
   13724:	str	r0, [sp, #56]	; 0x38
   13728:	mov	r0, #0
   1372c:	str	r0, [fp, #-88]	; 0xffffffa8
   13730:	mov	r0, #0
   13734:	str	r0, [fp, #-72]	; 0xffffffb8
   13738:	mov	r0, #0
   1373c:	cmp	r7, #10
   13740:	bhi	146d4 <__assert_fail@plt+0x3580>
   13744:	add	r1, pc, #24
   13748:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1374c:	mov	r4, r6
   13750:	mov	r8, #0
   13754:	mov	r2, #1
   13758:	mov	r3, #0
   1375c:	mov	lr, sl
   13760:	ldr	pc, [r1, r7, lsl #2]
   13764:	andeq	r3, r1, r8, lsr #16
   13768:	andeq	r3, r1, ip, ror r8
   1376c:	andeq	r3, r1, ip, lsr r8
   13770:	andeq	r3, r1, r0, lsr #16
   13774:	andeq	r3, r1, r0, ror r8
   13778:	andeq	r3, r1, r4, lsr #17
   1377c:	andeq	r3, r1, ip, asr #16
   13780:	andeq	r3, r1, r8, lsr #18
   13784:	muleq	r1, r0, r7
   13788:	muleq	r1, r0, r7
   1378c:			; <UNDEFINED> instruction: 0x000137b8
   13790:	movw	r0, #31809	; 0x7c41
   13794:	mov	r1, r7
   13798:	movt	r0, #1
   1379c:	bl	150dc <__assert_fail@plt+0x3f88>
   137a0:	str	r0, [sp, #76]	; 0x4c
   137a4:	movw	r0, #31811	; 0x7c43
   137a8:	mov	r1, r7
   137ac:	movt	r0, #1
   137b0:	bl	150dc <__assert_fail@plt+0x3f88>
   137b4:	str	r0, [sp, #80]	; 0x50
   137b8:	mov	r8, #0
   137bc:	tst	r9, #1
   137c0:	bne	137f8 <__assert_fail@plt+0x26a4>
   137c4:	ldr	r0, [sp, #76]	; 0x4c
   137c8:	ldrb	r0, [r0]
   137cc:	cmp	r0, #0
   137d0:	beq	137f8 <__assert_fail@plt+0x26a4>
   137d4:	ldr	r1, [sp, #76]	; 0x4c
   137d8:	mov	r8, #0
   137dc:	add	r1, r1, #1
   137e0:	cmp	r8, r4
   137e4:	strbcc	r0, [r5, r8]
   137e8:	ldrb	r0, [r1, r8]
   137ec:	add	r8, r8, #1
   137f0:	cmp	r0, #0
   137f4:	bne	137e0 <__assert_fail@plt+0x268c>
   137f8:	ldr	r6, [sp, #80]	; 0x50
   137fc:	mov	r0, r6
   13800:	bl	11070 <strlen@plt>
   13804:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13808:	str	r0, [fp, #-72]	; 0xffffffb8
   1380c:	str	r6, [fp, #-88]	; 0xffffffa8
   13810:	mov	r2, #1
   13814:	mov	r3, r9
   13818:	mov	lr, sl
   1381c:	b	13928 <__assert_fail@plt+0x27d4>
   13820:	mov	r0, #1
   13824:	b	1387c <__assert_fail@plt+0x2728>
   13828:	mov	r7, #0
   1382c:	mov	r8, #0
   13830:	mov	r2, r0
   13834:	mov	r3, #0
   13838:	b	13928 <__assert_fail@plt+0x27d4>
   1383c:	tst	r9, #1
   13840:	bne	1387c <__assert_fail@plt+0x2728>
   13844:	mov	r2, r0
   13848:	b	138d4 <__assert_fail@plt+0x2780>
   1384c:	mov	r0, #1
   13850:	mov	r8, #0
   13854:	mov	r7, #5
   13858:	mov	r2, #1
   1385c:	str	r0, [fp, #-72]	; 0xffffffb8
   13860:	movw	r0, #31807	; 0x7c3f
   13864:	movt	r0, #1
   13868:	str	r0, [fp, #-88]	; 0xffffffa8
   1386c:	b	1389c <__assert_fail@plt+0x2748>
   13870:	mov	r2, #1
   13874:	tst	r9, #1
   13878:	beq	138d4 <__assert_fail@plt+0x2780>
   1387c:	mov	r1, #1
   13880:	mov	r8, #0
   13884:	mov	r7, #2
   13888:	mov	r2, r0
   1388c:	str	r1, [fp, #-72]	; 0xffffffb8
   13890:	movw	r1, #31811	; 0x7c43
   13894:	movt	r1, #1
   13898:	str	r1, [fp, #-88]	; 0xffffffa8
   1389c:	mov	r3, #1
   138a0:	b	13928 <__assert_fail@plt+0x27d4>
   138a4:	tst	r9, #1
   138a8:	beq	138f8 <__assert_fail@plt+0x27a4>
   138ac:	mov	r0, #1
   138b0:	mov	r8, #0
   138b4:	mov	r2, #1
   138b8:	mov	r3, #1
   138bc:	mov	r7, #5
   138c0:	str	r0, [fp, #-72]	; 0xffffffb8
   138c4:	movw	r0, #31807	; 0x7c3f
   138c8:	movt	r0, #1
   138cc:	str	r0, [fp, #-88]	; 0xffffffa8
   138d0:	b	13928 <__assert_fail@plt+0x27d4>
   138d4:	cmp	r4, #0
   138d8:	mov	r8, #1
   138dc:	mov	r3, #0
   138e0:	mov	r7, #2
   138e4:	movne	r0, #39	; 0x27
   138e8:	strbne	r0, [r5]
   138ec:	movw	r0, #31811	; 0x7c43
   138f0:	movt	r0, #1
   138f4:	b	1391c <__assert_fail@plt+0x27c8>
   138f8:	cmp	r4, #0
   138fc:	mov	r8, #1
   13900:	mov	r2, #1
   13904:	mov	r7, #5
   13908:	mov	r3, #0
   1390c:	movne	r0, #34	; 0x22
   13910:	strbne	r0, [r5]
   13914:	movw	r0, #31807	; 0x7c3f
   13918:	movt	r0, #1
   1391c:	str	r0, [fp, #-88]	; 0xffffffa8
   13920:	mov	r0, #1
   13924:	str	r0, [fp, #-72]	; 0xffffffb8
   13928:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1392c:	eor	r6, r3, #1
   13930:	str	r7, [fp, #-68]	; 0xffffffbc
   13934:	str	r3, [fp, #-76]	; 0xffffffb4
   13938:	str	r2, [sp, #84]	; 0x54
   1393c:	str	r6, [sp, #92]	; 0x5c
   13940:	cmp	r0, #0
   13944:	movwne	r0, #1
   13948:	and	r1, r0, r3
   1394c:	and	r1, r2, r1
   13950:	str	r1, [sp, #48]	; 0x30
   13954:	sub	r1, r7, #2
   13958:	clz	r1, r1
   1395c:	lsr	r1, r1, #5
   13960:	and	r1, r1, r3
   13964:	str	r1, [sp, #64]	; 0x40
   13968:	subs	r1, r7, #2
   1396c:	mov	r7, #0
   13970:	movwne	r1, #1
   13974:	orr	r6, r1, r6
   13978:	and	r1, r1, r2
   1397c:	and	r0, r0, r1
   13980:	str	r6, [sp, #68]	; 0x44
   13984:	str	r0, [fp, #-60]	; 0xffffffc4
   13988:	orr	r0, r1, r3
   1398c:	ldr	r1, [fp, #16]
   13990:	eor	r0, r0, #1
   13994:	clz	r1, r1
   13998:	lsr	r1, r1, #5
   1399c:	orr	r0, r1, r0
   139a0:	str	r0, [fp, #-64]	; 0xffffffc0
   139a4:	eor	r0, r2, #1
   139a8:	str	r0, [sp, #52]	; 0x34
   139ac:	cmn	lr, #1
   139b0:	beq	139c0 <__assert_fail@plt+0x286c>
   139b4:	cmp	r7, lr
   139b8:	bne	139cc <__assert_fail@plt+0x2878>
   139bc:	b	14514 <__assert_fail@plt+0x33c0>
   139c0:	ldrb	r0, [ip, r7]
   139c4:	cmp	r0, #0
   139c8:	beq	1451c <__assert_fail@plt+0x33c8>
   139cc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   139d0:	mov	sl, #0
   139d4:	cmp	r0, #0
   139d8:	beq	13a10 <__assert_fail@plt+0x28bc>
   139dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139e0:	add	r5, r7, r0
   139e4:	cmp	r0, #2
   139e8:	bcc	13a04 <__assert_fail@plt+0x28b0>
   139ec:	cmn	lr, #1
   139f0:	bne	13a04 <__assert_fail@plt+0x28b0>
   139f4:	mov	r0, ip
   139f8:	bl	11070 <strlen@plt>
   139fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a00:	mov	lr, r0
   13a04:	cmp	r5, lr
   13a08:	bls	13a18 <__assert_fail@plt+0x28c4>
   13a0c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a10:	mov	r0, #0
   13a14:	b	13a64 <__assert_fail@plt+0x2910>
   13a18:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13a1c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13a20:	add	r0, ip, r7
   13a24:	mov	r6, r4
   13a28:	mov	r4, lr
   13a2c:	bl	11064 <bcmp@plt>
   13a30:	ldr	r2, [sp, #92]	; 0x5c
   13a34:	cmp	r0, #0
   13a38:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a3c:	mov	r1, r0
   13a40:	movwne	r1, #1
   13a44:	orr	r1, r1, r2
   13a48:	tst	r1, #1
   13a4c:	beq	145a4 <__assert_fail@plt+0x3450>
   13a50:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a54:	clz	r0, r0
   13a58:	mov	lr, r4
   13a5c:	mov	r4, r6
   13a60:	lsr	r0, r0, #5
   13a64:	str	r0, [fp, #-52]	; 0xffffffcc
   13a68:	ldrb	r6, [ip, r7]
   13a6c:	cmp	r6, #126	; 0x7e
   13a70:	bhi	13fa0 <__assert_fail@plt+0x2e4c>
   13a74:	add	r3, pc, #16
   13a78:	mov	r9, #1
   13a7c:	mov	r2, #110	; 0x6e
   13a80:	mov	r0, #97	; 0x61
   13a84:	mov	r1, #0
   13a88:	ldr	pc, [r3, r6, lsl #2]
   13a8c:	andeq	r3, r1, r0, lsl #28
   13a90:	andeq	r3, r1, r0, lsr #31
   13a94:	andeq	r3, r1, r0, lsr #31
   13a98:	andeq	r3, r1, r0, lsr #31
   13a9c:	andeq	r3, r1, r0, lsr #31
   13aa0:	andeq	r3, r1, r0, lsr #31
   13aa4:	andeq	r3, r1, r0, lsr #31
   13aa8:	andeq	r4, r1, ip, ror r0
   13aac:	andeq	r3, r1, r0, ror #27
   13ab0:	ldrdeq	r3, [r1], -r8
   13ab4:	andeq	r3, r1, ip, ror #27
   13ab8:	andeq	r3, r1, r8, lsl #30
   13abc:	ldrdeq	r3, [r1], -r0
   13ac0:	andeq	r3, r1, r8, ror #27
   13ac4:	andeq	r3, r1, r0, lsr #31
   13ac8:	andeq	r3, r1, r0, lsr #31
   13acc:	andeq	r3, r1, r0, lsr #31
   13ad0:	andeq	r3, r1, r0, lsr #31
   13ad4:	andeq	r3, r1, r0, lsr #31
   13ad8:	andeq	r3, r1, r0, lsr #31
   13adc:	andeq	r3, r1, r0, lsr #31
   13ae0:	andeq	r3, r1, r0, lsr #31
   13ae4:	andeq	r3, r1, r0, lsr #31
   13ae8:	andeq	r3, r1, r0, lsr #31
   13aec:	andeq	r3, r1, r0, lsr #31
   13af0:	andeq	r3, r1, r0, lsr #31
   13af4:	andeq	r3, r1, r0, lsr #31
   13af8:	andeq	r3, r1, r0, lsr #31
   13afc:	andeq	r3, r1, r0, lsr #31
   13b00:	andeq	r3, r1, r0, lsr #31
   13b04:	andeq	r3, r1, r0, lsr #31
   13b08:	andeq	r3, r1, r0, lsr #31
   13b0c:	andeq	r3, r1, r4, lsl #27
   13b10:	andeq	r3, r1, r8, lsl #27
   13b14:	andeq	r3, r1, r8, lsl #27
   13b18:	andeq	r3, r1, r0, ror sp
   13b1c:	andeq	r3, r1, r8, lsl #27
   13b20:	andeq	r3, r1, r8, lsl #25
   13b24:	andeq	r3, r1, r8, lsl #27
   13b28:	andeq	r3, r1, r0, lsl pc
   13b2c:	andeq	r3, r1, r8, lsl #27
   13b30:	andeq	r3, r1, r8, lsl #27
   13b34:	andeq	r3, r1, r8, lsl #27
   13b38:	andeq	r3, r1, r8, lsl #25
   13b3c:	andeq	r3, r1, r8, lsl #25
   13b40:	andeq	r3, r1, r8, lsl #25
   13b44:	andeq	r3, r1, r8, lsl #25
   13b48:	andeq	r3, r1, r8, lsl #25
   13b4c:	andeq	r3, r1, r8, lsl #25
   13b50:	andeq	r3, r1, r8, lsl #25
   13b54:	andeq	r3, r1, r8, lsl #25
   13b58:	andeq	r3, r1, r8, lsl #25
   13b5c:	andeq	r3, r1, r8, lsl #25
   13b60:	andeq	r3, r1, r8, lsl #25
   13b64:	andeq	r3, r1, r8, lsl #25
   13b68:	andeq	r3, r1, r8, lsl #25
   13b6c:	andeq	r3, r1, r8, lsl #25
   13b70:	andeq	r3, r1, r8, lsl #25
   13b74:	andeq	r3, r1, r8, lsl #25
   13b78:	andeq	r3, r1, r8, lsl #27
   13b7c:	andeq	r3, r1, r8, lsl #27
   13b80:	andeq	r3, r1, r8, lsl #27
   13b84:	andeq	r3, r1, r8, lsl #27
   13b88:	ldrdeq	r3, [r1], -r8
   13b8c:	andeq	r3, r1, r0, lsr #31
   13b90:	andeq	r3, r1, r8, lsl #25
   13b94:	andeq	r3, r1, r8, lsl #25
   13b98:	andeq	r3, r1, r8, lsl #25
   13b9c:	andeq	r3, r1, r8, lsl #25
   13ba0:	andeq	r3, r1, r8, lsl #25
   13ba4:	andeq	r3, r1, r8, lsl #25
   13ba8:	andeq	r3, r1, r8, lsl #25
   13bac:	andeq	r3, r1, r8, lsl #25
   13bb0:	andeq	r3, r1, r8, lsl #25
   13bb4:	andeq	r3, r1, r8, lsl #25
   13bb8:	andeq	r3, r1, r8, lsl #25
   13bbc:	andeq	r3, r1, r8, lsl #25
   13bc0:	andeq	r3, r1, r8, lsl #25
   13bc4:	andeq	r3, r1, r8, lsl #25
   13bc8:	andeq	r3, r1, r8, lsl #25
   13bcc:	andeq	r3, r1, r8, lsl #25
   13bd0:	andeq	r3, r1, r8, lsl #25
   13bd4:	andeq	r3, r1, r8, lsl #25
   13bd8:	andeq	r3, r1, r8, lsl #25
   13bdc:	andeq	r3, r1, r8, lsl #25
   13be0:	andeq	r3, r1, r8, lsl #25
   13be4:	andeq	r3, r1, r8, lsl #25
   13be8:	andeq	r3, r1, r8, lsl #25
   13bec:	andeq	r3, r1, r8, lsl #25
   13bf0:	andeq	r3, r1, r8, lsl #25
   13bf4:	andeq	r3, r1, r8, lsl #25
   13bf8:	andeq	r3, r1, r8, lsl #27
   13bfc:			; <UNDEFINED> instruction: 0x00013db0
   13c00:	andeq	r3, r1, r8, lsl #25
   13c04:	andeq	r3, r1, r8, lsl #27
   13c08:	andeq	r3, r1, r8, lsl #25
   13c0c:	andeq	r3, r1, r8, lsl #27
   13c10:	andeq	r3, r1, r8, lsl #25
   13c14:	andeq	r3, r1, r8, lsl #25
   13c18:	andeq	r3, r1, r8, lsl #25
   13c1c:	andeq	r3, r1, r8, lsl #25
   13c20:	andeq	r3, r1, r8, lsl #25
   13c24:	andeq	r3, r1, r8, lsl #25
   13c28:	andeq	r3, r1, r8, lsl #25
   13c2c:	andeq	r3, r1, r8, lsl #25
   13c30:	andeq	r3, r1, r8, lsl #25
   13c34:	andeq	r3, r1, r8, lsl #25
   13c38:	andeq	r3, r1, r8, lsl #25
   13c3c:	andeq	r3, r1, r8, lsl #25
   13c40:	andeq	r3, r1, r8, lsl #25
   13c44:	andeq	r3, r1, r8, lsl #25
   13c48:	andeq	r3, r1, r8, lsl #25
   13c4c:	andeq	r3, r1, r8, lsl #25
   13c50:	andeq	r3, r1, r8, lsl #25
   13c54:	andeq	r3, r1, r8, lsl #25
   13c58:	andeq	r3, r1, r8, lsl #25
   13c5c:	andeq	r3, r1, r8, lsl #25
   13c60:	andeq	r3, r1, r8, lsl #25
   13c64:	andeq	r3, r1, r8, lsl #25
   13c68:	andeq	r3, r1, r8, lsl #25
   13c6c:	andeq	r3, r1, r8, lsl #25
   13c70:	andeq	r3, r1, r8, lsl #25
   13c74:	andeq	r3, r1, r8, lsl #25
   13c78:	andeq	r3, r1, r4, asr #26
   13c7c:	andeq	r3, r1, r8, lsl #27
   13c80:	andeq	r3, r1, r4, asr #26
   13c84:	andeq	r3, r1, r0, ror sp
   13c88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c8c:	tst	r0, #1
   13c90:	bne	13cbc <__assert_fail@plt+0x2b68>
   13c94:	ldr	r1, [fp, #16]
   13c98:	ubfx	r0, r6, #5, #3
   13c9c:	mov	r2, #1
   13ca0:	ldr	r0, [r1, r0, lsl #2]
   13ca4:	and	r1, r6, #31
   13ca8:	tst	r0, r2, lsl r1
   13cac:	beq	13cbc <__assert_fail@plt+0x2b68>
   13cb0:	mov	r0, r6
   13cb4:	mov	r1, r9
   13cb8:	b	13cd0 <__assert_fail@plt+0x2b7c>
   13cbc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13cc0:	mov	r1, r9
   13cc4:	cmp	r0, #0
   13cc8:	mov	r0, r6
   13ccc:	beq	14010 <__assert_fail@plt+0x2ebc>
   13cd0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13cd4:	tst	r2, #1
   13cd8:	bne	145e0 <__assert_fail@plt+0x348c>
   13cdc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ce0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ce4:	subs	r2, r2, #2
   13ce8:	movwne	r2, #1
   13cec:	orr	r2, r2, r3
   13cf0:	tst	r2, #1
   13cf4:	bne	13d30 <__assert_fail@plt+0x2bdc>
   13cf8:	cmp	r8, r4
   13cfc:	movcc	r2, #39	; 0x27
   13d00:	strbcc	r2, [r5, r8]
   13d04:	add	r2, r8, #1
   13d08:	cmp	r2, r4
   13d0c:	movcc	r3, #36	; 0x24
   13d10:	strbcc	r3, [r5, r2]
   13d14:	add	r2, r8, #2
   13d18:	add	r8, r8, #3
   13d1c:	cmp	r2, r4
   13d20:	movcc	r3, #39	; 0x27
   13d24:	strbcc	r3, [r5, r2]
   13d28:	mov	r2, #1
   13d2c:	str	r2, [fp, #-56]	; 0xffffffc8
   13d30:	cmp	r8, r4
   13d34:	movcc	r2, #92	; 0x5c
   13d38:	strbcc	r2, [r5, r8]
   13d3c:	add	r8, r8, #1
   13d40:	b	14054 <__assert_fail@plt+0x2f00>
   13d44:	cmp	lr, #1
   13d48:	beq	13d70 <__assert_fail@plt+0x2c1c>
   13d4c:	mov	r9, #0
   13d50:	cmn	lr, #1
   13d54:	bne	13d7c <__assert_fail@plt+0x2c28>
   13d58:	ldrb	r0, [ip, #1]
   13d5c:	cmp	r0, #0
   13d60:	beq	13d70 <__assert_fail@plt+0x2c1c>
   13d64:	mvn	lr, #0
   13d68:	mov	sl, #0
   13d6c:	b	13c88 <__assert_fail@plt+0x2b34>
   13d70:	mov	r9, #0
   13d74:	cmp	r7, #0
   13d78:	beq	13d84 <__assert_fail@plt+0x2c30>
   13d7c:	mov	sl, #0
   13d80:	b	13c88 <__assert_fail@plt+0x2b34>
   13d84:	mov	r1, #1
   13d88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d8c:	cmp	r0, #2
   13d90:	bne	13da8 <__assert_fail@plt+0x2c54>
   13d94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d98:	mov	r9, r1
   13d9c:	tst	r0, #1
   13da0:	beq	13c88 <__assert_fail@plt+0x2b34>
   13da4:	b	145e0 <__assert_fail@plt+0x348c>
   13da8:	mov	r9, r1
   13dac:	b	13c88 <__assert_fail@plt+0x2b34>
   13db0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13db4:	cmp	r0, #2
   13db8:	bne	13ff4 <__assert_fail@plt+0x2ea0>
   13dbc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13dc0:	tst	r0, #1
   13dc4:	bne	145e0 <__assert_fail@plt+0x348c>
   13dc8:	mov	sl, #0
   13dcc:	b	14008 <__assert_fail@plt+0x2eb4>
   13dd0:	mov	r0, #102	; 0x66
   13dd4:	b	1407c <__assert_fail@plt+0x2f28>
   13dd8:	mov	r2, #116	; 0x74
   13ddc:	b	13dec <__assert_fail@plt+0x2c98>
   13de0:	mov	r0, #98	; 0x62
   13de4:	b	1407c <__assert_fail@plt+0x2f28>
   13de8:	mov	r2, #114	; 0x72
   13dec:	ldr	r0, [sp, #68]	; 0x44
   13df0:	tst	r0, #1
   13df4:	mov	r0, r2
   13df8:	bne	1407c <__assert_fail@plt+0x2f28>
   13dfc:	b	145e0 <__assert_fail@plt+0x348c>
   13e00:	ldr	r0, [sp, #84]	; 0x54
   13e04:	tst	r0, #1
   13e08:	beq	14098 <__assert_fail@plt+0x2f44>
   13e0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e10:	tst	r0, #1
   13e14:	bne	146cc <__assert_fail@plt+0x3578>
   13e18:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e20:	subs	r0, r0, #2
   13e24:	movwne	r0, #1
   13e28:	orr	r0, r0, r1
   13e2c:	tst	r0, #1
   13e30:	bne	13e6c <__assert_fail@plt+0x2d18>
   13e34:	cmp	r8, r4
   13e38:	movcc	r0, #39	; 0x27
   13e3c:	strbcc	r0, [r5, r8]
   13e40:	add	r0, r8, #1
   13e44:	cmp	r0, r4
   13e48:	movcc	r1, #36	; 0x24
   13e4c:	strbcc	r1, [r5, r0]
   13e50:	add	r0, r8, #2
   13e54:	add	r8, r8, #3
   13e58:	cmp	r0, r4
   13e5c:	movcc	r1, #39	; 0x27
   13e60:	strbcc	r1, [r5, r0]
   13e64:	mov	r0, #1
   13e68:	str	r0, [fp, #-56]	; 0xffffffc8
   13e6c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13e70:	cmp	r8, r4
   13e74:	mov	r9, #0
   13e78:	mov	sl, #1
   13e7c:	mov	r6, #48	; 0x30
   13e80:	movcc	r0, #92	; 0x5c
   13e84:	strbcc	r0, [r5, r8]
   13e88:	add	r0, r8, #1
   13e8c:	cmp	r1, #2
   13e90:	beq	14260 <__assert_fail@plt+0x310c>
   13e94:	add	r1, r7, #1
   13e98:	cmp	r1, lr
   13e9c:	bcs	14260 <__assert_fail@plt+0x310c>
   13ea0:	ldrb	r1, [ip, r1]
   13ea4:	sub	r1, r1, #48	; 0x30
   13ea8:	uxtb	r1, r1
   13eac:	cmp	r1, #9
   13eb0:	bhi	14260 <__assert_fail@plt+0x310c>
   13eb4:	cmp	r0, r4
   13eb8:	movcc	r1, #48	; 0x30
   13ebc:	strbcc	r1, [r5, r0]
   13ec0:	add	r0, r8, #2
   13ec4:	add	r8, r8, #3
   13ec8:	cmp	r0, r4
   13ecc:	movcc	r1, #48	; 0x30
   13ed0:	strbcc	r1, [r5, r0]
   13ed4:	b	13c88 <__assert_fail@plt+0x2b34>
   13ed8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13edc:	mov	sl, #0
   13ee0:	mov	r6, #63	; 0x3f
   13ee4:	cmp	r0, #5
   13ee8:	beq	14268 <__assert_fail@plt+0x3114>
   13eec:	cmp	r0, #2
   13ef0:	bne	14310 <__assert_fail@plt+0x31bc>
   13ef4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ef8:	mov	r9, #0
   13efc:	tst	r0, #1
   13f00:	beq	13c88 <__assert_fail@plt+0x2b34>
   13f04:	b	145e0 <__assert_fail@plt+0x348c>
   13f08:	mov	r0, #118	; 0x76
   13f0c:	b	1407c <__assert_fail@plt+0x2f28>
   13f10:	mov	r0, #1
   13f14:	mov	r6, #39	; 0x27
   13f18:	str	r0, [sp, #60]	; 0x3c
   13f1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f20:	cmp	r0, #2
   13f24:	bne	140b4 <__assert_fail@plt+0x2f60>
   13f28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f2c:	tst	r0, #1
   13f30:	bne	145e0 <__assert_fail@plt+0x348c>
   13f34:	ldr	r2, [sp, #56]	; 0x38
   13f38:	clz	r1, r4
   13f3c:	mov	sl, #0
   13f40:	mov	r9, #1
   13f44:	lsr	r1, r1, #5
   13f48:	cmp	r2, #0
   13f4c:	mov	r0, r2
   13f50:	movwne	r0, #1
   13f54:	orrs	r0, r0, r1
   13f58:	moveq	r2, r4
   13f5c:	moveq	r4, r0
   13f60:	cmp	r8, r4
   13f64:	str	r2, [sp, #56]	; 0x38
   13f68:	movcc	r0, #39	; 0x27
   13f6c:	strbcc	r0, [r5, r8]
   13f70:	add	r0, r8, #1
   13f74:	cmp	r0, r4
   13f78:	movcc	r1, #92	; 0x5c
   13f7c:	strbcc	r1, [r5, r0]
   13f80:	add	r0, r8, #2
   13f84:	add	r8, r8, #3
   13f88:	cmp	r0, r4
   13f8c:	movcc	r1, #39	; 0x27
   13f90:	strbcc	r1, [r5, r0]
   13f94:	mov	r0, #0
   13f98:	str	r0, [fp, #-56]	; 0xffffffc8
   13f9c:	b	13c88 <__assert_fail@plt+0x2b34>
   13fa0:	ldr	r0, [sp, #40]	; 0x28
   13fa4:	str	r4, [sp, #88]	; 0x58
   13fa8:	cmp	r0, #1
   13fac:	bne	140bc <__assert_fail@plt+0x2f68>
   13fb0:	str	lr, [sp, #28]
   13fb4:	bl	1104c <__ctype_b_loc@plt>
   13fb8:	ldr	r0, [r0]
   13fbc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13fc0:	mov	r2, #1
   13fc4:	add	r0, r0, r6, lsl #1
   13fc8:	ldrb	r0, [r0, #1]
   13fcc:	ubfx	r9, r0, #6, #1
   13fd0:	ldr	r0, [sp, #52]	; 0x34
   13fd4:	cmp	r2, #1
   13fd8:	orr	r0, r9, r0
   13fdc:	bhi	14318 <__assert_fail@plt+0x31c4>
   13fe0:	tst	r0, #1
   13fe4:	beq	14318 <__assert_fail@plt+0x31c4>
   13fe8:	ldr	lr, [sp, #28]
   13fec:	ldr	r4, [sp, #88]	; 0x58
   13ff0:	b	13c88 <__assert_fail@plt+0x2b34>
   13ff4:	ldr	r1, [sp, #48]	; 0x30
   13ff8:	mov	sl, #0
   13ffc:	mov	r0, #92	; 0x5c
   14000:	cmp	r1, #0
   14004:	beq	1407c <__assert_fail@plt+0x2f28>
   14008:	mov	r6, #92	; 0x5c
   1400c:	mov	r9, #0
   14010:	cmp	sl, #0
   14014:	bne	1404c <__assert_fail@plt+0x2ef8>
   14018:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1401c:	tst	r0, #1
   14020:	beq	1404c <__assert_fail@plt+0x2ef8>
   14024:	cmp	r8, r4
   14028:	movcc	r0, #39	; 0x27
   1402c:	strbcc	r0, [r5, r8]
   14030:	add	r0, r8, #1
   14034:	add	r8, r8, #2
   14038:	cmp	r0, r4
   1403c:	movcc	r1, #39	; 0x27
   14040:	strbcc	r1, [r5, r0]
   14044:	mov	r0, #0
   14048:	str	r0, [fp, #-56]	; 0xffffffc8
   1404c:	mov	r1, r9
   14050:	mov	r0, r6
   14054:	cmp	r8, r4
   14058:	strbcc	r0, [r5, r8]
   1405c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14060:	add	r8, r8, #1
   14064:	and	r0, r0, r1
   14068:	str	r0, [fp, #-48]	; 0xffffffd0
   1406c:	add	r7, r7, #1
   14070:	cmn	lr, #1
   14074:	bne	139b4 <__assert_fail@plt+0x2860>
   14078:	b	139c0 <__assert_fail@plt+0x286c>
   1407c:	ldr	r1, [sp, #84]	; 0x54
   14080:	mov	sl, #0
   14084:	mov	r9, #0
   14088:	tst	r1, #1
   1408c:	mov	r1, #0
   14090:	beq	13c88 <__assert_fail@plt+0x2b34>
   14094:	b	13cd0 <__assert_fail@plt+0x2b7c>
   14098:	ldr	r0, [sp, #36]	; 0x24
   1409c:	mov	r6, #0
   140a0:	mov	sl, #0
   140a4:	mov	r9, #0
   140a8:	cmp	r0, #0
   140ac:	beq	13c88 <__assert_fail@plt+0x2b34>
   140b0:	b	1406c <__assert_fail@plt+0x2f18>
   140b4:	mov	r9, #1
   140b8:	b	13c88 <__assert_fail@plt+0x2b34>
   140bc:	mov	r0, #0
   140c0:	cmn	lr, #1
   140c4:	sub	r4, fp, #40	; 0x28
   140c8:	str	r0, [fp, #-36]	; 0xffffffdc
   140cc:	str	r0, [fp, #-40]	; 0xffffffd8
   140d0:	bne	140e4 <__assert_fail@plt+0x2f90>
   140d4:	mov	r0, ip
   140d8:	bl	11070 <strlen@plt>
   140dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   140e0:	mov	lr, r0
   140e4:	ldr	r0, [sp, #72]	; 0x48
   140e8:	mov	r9, #1
   140ec:	mov	r2, #0
   140f0:	str	lr, [sp, #28]
   140f4:	add	r0, r0, r7
   140f8:	str	r0, [sp, #20]
   140fc:	b	14140 <__assert_fail@plt+0x2fec>
   14100:	ldr	r5, [sp, #44]	; 0x2c
   14104:	add	r5, r0, r5
   14108:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1410c:	bl	10f8c <iswprint@plt>
   14110:	cmp	r0, #0
   14114:	sub	r4, fp, #40	; 0x28
   14118:	movwne	r0, #1
   1411c:	and	r9, r9, r0
   14120:	mov	r0, r4
   14124:	bl	10f44 <mbsinit@plt>
   14128:	mov	r2, r5
   1412c:	ldr	lr, [sp, #28]
   14130:	ldr	r5, [fp, #-84]	; 0xffffffac
   14134:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14138:	cmp	r0, #0
   1413c:	bne	13fd0 <__assert_fail@plt+0x2e7c>
   14140:	add	r0, r2, r7
   14144:	str	r2, [sp, #44]	; 0x2c
   14148:	mov	r3, r4
   1414c:	add	r1, ip, r0
   14150:	str	r0, [sp, #24]
   14154:	sub	r2, lr, r0
   14158:	sub	r0, fp, #44	; 0x2c
   1415c:	bl	16c7c <__assert_fail@plt+0x5b28>
   14160:	cmp	r0, #0
   14164:	beq	14508 <__assert_fail@plt+0x33b4>
   14168:	cmn	r0, #1
   1416c:	beq	144c4 <__assert_fail@plt+0x3370>
   14170:	ldr	lr, [sp, #28]
   14174:	cmn	r0, #2
   14178:	beq	144cc <__assert_fail@plt+0x3378>
   1417c:	ldr	r2, [sp, #64]	; 0x40
   14180:	ldr	r4, [sp, #88]	; 0x58
   14184:	ldr	ip, [sp, #84]	; 0x54
   14188:	cmp	r0, #2
   1418c:	mov	r1, #0
   14190:	movwcc	r1, #1
   14194:	eor	r2, r2, #1
   14198:	orrs	r1, r2, r1
   1419c:	bne	14100 <__assert_fail@plt+0x2fac>
   141a0:	ldr	r1, [sp, #44]	; 0x2c
   141a4:	ldr	r2, [sp, #20]
   141a8:	add	r1, r2, r1
   141ac:	sub	r2, r0, #1
   141b0:	b	141c0 <__assert_fail@plt+0x306c>
   141b4:	add	r1, r1, #1
   141b8:	subs	r2, r2, #1
   141bc:	beq	14100 <__assert_fail@plt+0x2fac>
   141c0:	ldrb	r3, [r1]
   141c4:	sub	r3, r3, #91	; 0x5b
   141c8:	cmp	r3, #33	; 0x21
   141cc:	bhi	141b4 <__assert_fail@plt+0x3060>
   141d0:	add	r5, pc, #0
   141d4:	ldr	pc, [r5, r3, lsl #2]
   141d8:			; <UNDEFINED> instruction: 0x000145bc
   141dc:			; <UNDEFINED> instruction: 0x000145bc
   141e0:			; <UNDEFINED> instruction: 0x000141b4
   141e4:			; <UNDEFINED> instruction: 0x000145bc
   141e8:			; <UNDEFINED> instruction: 0x000141b4
   141ec:			; <UNDEFINED> instruction: 0x000145bc
   141f0:			; <UNDEFINED> instruction: 0x000141b4
   141f4:			; <UNDEFINED> instruction: 0x000141b4
   141f8:			; <UNDEFINED> instruction: 0x000141b4
   141fc:			; <UNDEFINED> instruction: 0x000141b4
   14200:			; <UNDEFINED> instruction: 0x000141b4
   14204:			; <UNDEFINED> instruction: 0x000141b4
   14208:			; <UNDEFINED> instruction: 0x000141b4
   1420c:			; <UNDEFINED> instruction: 0x000141b4
   14210:			; <UNDEFINED> instruction: 0x000141b4
   14214:			; <UNDEFINED> instruction: 0x000141b4
   14218:			; <UNDEFINED> instruction: 0x000141b4
   1421c:			; <UNDEFINED> instruction: 0x000141b4
   14220:			; <UNDEFINED> instruction: 0x000141b4
   14224:			; <UNDEFINED> instruction: 0x000141b4
   14228:			; <UNDEFINED> instruction: 0x000141b4
   1422c:			; <UNDEFINED> instruction: 0x000141b4
   14230:			; <UNDEFINED> instruction: 0x000141b4
   14234:			; <UNDEFINED> instruction: 0x000141b4
   14238:			; <UNDEFINED> instruction: 0x000141b4
   1423c:			; <UNDEFINED> instruction: 0x000141b4
   14240:			; <UNDEFINED> instruction: 0x000141b4
   14244:			; <UNDEFINED> instruction: 0x000141b4
   14248:			; <UNDEFINED> instruction: 0x000141b4
   1424c:			; <UNDEFINED> instruction: 0x000141b4
   14250:			; <UNDEFINED> instruction: 0x000141b4
   14254:			; <UNDEFINED> instruction: 0x000141b4
   14258:			; <UNDEFINED> instruction: 0x000141b4
   1425c:			; <UNDEFINED> instruction: 0x000145bc
   14260:	mov	r8, r0
   14264:	b	13c88 <__assert_fail@plt+0x2b34>
   14268:	ldr	r0, [sp, #32]
   1426c:	cmp	r0, #0
   14270:	beq	14310 <__assert_fail@plt+0x31bc>
   14274:	add	r0, r7, #2
   14278:	cmp	r0, lr
   1427c:	bcs	14310 <__assert_fail@plt+0x31bc>
   14280:	add	r1, r7, ip
   14284:	ldrb	r1, [r1, #1]
   14288:	cmp	r1, #63	; 0x3f
   1428c:	bne	14310 <__assert_fail@plt+0x31bc>
   14290:	ldrb	r9, [ip, r0]
   14294:	sub	r2, r9, #33	; 0x21
   14298:	cmp	r2, #29
   1429c:	bhi	14310 <__assert_fail@plt+0x31bc>
   142a0:	movw	r1, #20929	; 0x51c1
   142a4:	mov	r3, #1
   142a8:	movt	r1, #14336	; 0x3800
   142ac:	tst	r1, r3, lsl r2
   142b0:	beq	14310 <__assert_fail@plt+0x31bc>
   142b4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   142b8:	tst	r1, #1
   142bc:	bne	145e0 <__assert_fail@plt+0x348c>
   142c0:	cmp	r8, r4
   142c4:	add	r2, r8, #1
   142c8:	mov	r6, r9
   142cc:	mov	r7, r0
   142d0:	mov	r9, #0
   142d4:	movcc	r1, #63	; 0x3f
   142d8:	strbcc	r1, [r5, r8]
   142dc:	cmp	r2, r4
   142e0:	movcc	r1, #34	; 0x22
   142e4:	strbcc	r1, [r5, r2]
   142e8:	add	r2, r8, #2
   142ec:	cmp	r2, r4
   142f0:	movcc	r1, #34	; 0x22
   142f4:	strbcc	r1, [r5, r2]
   142f8:	add	r2, r8, #3
   142fc:	add	r8, r8, #4
   14300:	cmp	r2, r4
   14304:	movcc	r1, #63	; 0x3f
   14308:	strbcc	r1, [r5, r2]
   1430c:	b	13c88 <__assert_fail@plt+0x2b34>
   14310:	mov	r9, #0
   14314:	b	13c88 <__assert_fail@plt+0x2b34>
   14318:	ldr	lr, [sp, #28]
   1431c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   14320:	add	r1, r2, r7
   14324:	mov	r2, #0
   14328:	str	r1, [sp, #44]	; 0x2c
   1432c:	tst	r0, #1
   14330:	bne	1444c <__assert_fail@plt+0x32f8>
   14334:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14338:	tst	r1, #1
   1433c:	bne	145dc <__assert_fail@plt+0x3488>
   14340:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14344:	subs	r2, r1, #2
   14348:	movwne	r2, #1
   1434c:	orr	r2, r2, r4
   14350:	tst	r2, #1
   14354:	bne	14398 <__assert_fail@plt+0x3244>
   14358:	ldr	r1, [sp, #88]	; 0x58
   1435c:	add	r2, r8, #1
   14360:	mov	r4, #1
   14364:	cmp	r8, r1
   14368:	movcc	r1, #39	; 0x27
   1436c:	strbcc	r1, [r5, r8]
   14370:	ldr	r1, [sp, #88]	; 0x58
   14374:	cmp	r2, r1
   14378:	movcc	r1, #36	; 0x24
   1437c:	strbcc	r1, [r5, r2]
   14380:	ldr	r1, [sp, #88]	; 0x58
   14384:	add	r2, r8, #2
   14388:	add	r8, r8, #3
   1438c:	cmp	r2, r1
   14390:	movcc	r1, #39	; 0x27
   14394:	strbcc	r1, [r5, r2]
   14398:	ldr	r1, [sp, #88]	; 0x58
   1439c:	add	r2, r8, #1
   143a0:	cmp	r8, r1
   143a4:	movcc	r1, #92	; 0x5c
   143a8:	strbcc	r1, [r5, r8]
   143ac:	ldr	r1, [sp, #88]	; 0x58
   143b0:	cmp	r2, r1
   143b4:	bcs	143c8 <__assert_fail@plt+0x3274>
   143b8:	uxtb	r3, r6
   143bc:	mov	r1, #48	; 0x30
   143c0:	orr	r3, r1, r3, lsr #6
   143c4:	strb	r3, [r5, r2]
   143c8:	ldr	r1, [sp, #88]	; 0x58
   143cc:	add	r2, r8, #2
   143d0:	add	r8, r8, #3
   143d4:	cmp	r2, r1
   143d8:	lsrcc	r3, r6, #3
   143dc:	movcc	r1, #6
   143e0:	bficc	r3, r1, #3, #29
   143e4:	mov	r1, #6
   143e8:	bfi	r6, r1, #3, #29
   143ec:	strbcc	r3, [r5, r2]
   143f0:	mov	r2, #1
   143f4:	b	14474 <__assert_fail@plt+0x3320>
   143f8:	ldr	r1, [sp, #88]	; 0x58
   143fc:	ldr	r5, [fp, #-84]	; 0xffffffac
   14400:	ldr	r4, [sp, #88]	; 0x58
   14404:	cmp	r8, r1
   14408:	movcc	r1, #39	; 0x27
   1440c:	strbcc	r1, [r5, r8]
   14410:	add	r1, r8, #1
   14414:	add	r8, r8, #2
   14418:	cmp	r1, r4
   1441c:	movcc	r4, #39	; 0x27
   14420:	strbcc	r4, [r5, r1]
   14424:	mov	r4, #0
   14428:	ldr	r1, [sp, #88]	; 0x58
   1442c:	cmp	r8, r1
   14430:	ldr	r1, [sp, #72]	; 0x48
   14434:	strbcc	r6, [r5, r8]
   14438:	add	r8, r8, #1
   1443c:	ldrb	r6, [r1, r7]
   14440:	mov	r7, r3
   14444:	tst	r0, #1
   14448:	beq	14334 <__assert_fail@plt+0x31e0>
   1444c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14450:	tst	r1, #1
   14454:	beq	1446c <__assert_fail@plt+0x3318>
   14458:	ldr	r1, [sp, #88]	; 0x58
   1445c:	cmp	r8, r1
   14460:	movcc	r1, #92	; 0x5c
   14464:	strbcc	r1, [r5, r8]
   14468:	add	r8, r8, #1
   1446c:	mov	r1, #0
   14470:	str	r1, [fp, #-52]	; 0xffffffcc
   14474:	ldr	r1, [sp, #44]	; 0x2c
   14478:	add	r3, r7, #1
   1447c:	and	sl, r2, #1
   14480:	cmp	r1, r3
   14484:	bls	144a8 <__assert_fail@plt+0x3354>
   14488:	cmp	sl, #0
   1448c:	mvn	r5, r4
   14490:	movwne	sl, #1
   14494:	orr	r5, r5, sl
   14498:	tst	r5, #1
   1449c:	beq	143f8 <__assert_fail@plt+0x32a4>
   144a0:	ldr	r5, [fp, #-84]	; 0xffffffac
   144a4:	b	14428 <__assert_fail@plt+0x32d4>
   144a8:	str	r4, [fp, #-56]	; 0xffffffc8
   144ac:	ldr	r4, [sp, #88]	; 0x58
   144b0:	cmp	sl, #0
   144b4:	movwne	sl, #1
   144b8:	cmp	sl, #0
   144bc:	beq	14018 <__assert_fail@plt+0x2ec4>
   144c0:	b	1404c <__assert_fail@plt+0x2ef8>
   144c4:	mov	r9, #0
   144c8:	b	14508 <__assert_fail@plt+0x33b4>
   144cc:	ldr	r0, [sp, #24]
   144d0:	mov	r9, #0
   144d4:	cmp	lr, r0
   144d8:	bls	14508 <__assert_fail@plt+0x33b4>
   144dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   144e0:	ldr	r2, [sp, #44]	; 0x2c
   144e4:	add	r0, ip, r7
   144e8:	ldrb	r1, [r0, r2]
   144ec:	cmp	r1, #0
   144f0:	beq	13fd0 <__assert_fail@plt+0x2e7c>
   144f4:	add	r2, r2, #1
   144f8:	add	r1, r7, r2
   144fc:	cmp	r1, lr
   14500:	bcc	144e8 <__assert_fail@plt+0x3394>
   14504:	b	13fd0 <__assert_fail@plt+0x2e7c>
   14508:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1450c:	ldr	r2, [sp, #44]	; 0x2c
   14510:	b	13fd0 <__assert_fail@plt+0x2e7c>
   14514:	mov	lr, r7
   14518:	b	14520 <__assert_fail@plt+0x33cc>
   1451c:	mvn	lr, #0
   14520:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14524:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14528:	eor	r0, r1, #2
   1452c:	orr	r0, r0, r8
   14530:	clz	r0, r0
   14534:	lsr	r0, r0, #5
   14538:	tst	r2, r0
   1453c:	bne	145e0 <__assert_fail@plt+0x348c>
   14540:	subs	r0, r1, #2
   14544:	movwne	r0, #1
   14548:	orr	r0, r2, r0
   1454c:	tst	r0, #1
   14550:	ldreq	r0, [sp, #60]	; 0x3c
   14554:	eoreq	r0, r0, #1
   14558:	tsteq	r0, #1
   1455c:	bne	14674 <__assert_fail@plt+0x3520>
   14560:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14564:	mov	sl, lr
   14568:	tst	r0, #1
   1456c:	bne	14640 <__assert_fail@plt+0x34ec>
   14570:	ldr	r6, [sp, #56]	; 0x38
   14574:	mov	r9, #0
   14578:	cmp	r6, #0
   1457c:	beq	1466c <__assert_fail@plt+0x3518>
   14580:	ldr	r0, [sp, #84]	; 0x54
   14584:	mov	r1, #0
   14588:	mov	r7, #2
   1458c:	cmp	r4, #0
   14590:	str	r1, [fp, #-48]	; 0xffffffd0
   14594:	mov	r1, #0
   14598:	str	r1, [fp, #-76]	; 0xffffffb4
   1459c:	beq	1373c <__assert_fail@plt+0x25e8>
   145a0:	b	14674 <__assert_fail@plt+0x3520>
   145a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   145a8:	ldr	r1, [fp, #12]
   145ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   145b0:	mov	lr, r4
   145b4:	mov	r4, r6
   145b8:	b	14600 <__assert_fail@plt+0x34ac>
   145bc:	tst	ip, #1
   145c0:	ldr	r5, [fp, #-84]	; 0xffffffac
   145c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   145c8:	ldr	r1, [fp, #12]
   145cc:	mov	r0, #2
   145d0:	movwne	r0, #4
   145d4:	mov	r2, r0
   145d8:	b	14600 <__assert_fail@plt+0x34ac>
   145dc:	ldr	r4, [sp, #88]	; 0x58
   145e0:	ldr	r1, [sp, #84]	; 0x54
   145e4:	mov	r0, #2
   145e8:	tst	r1, #1
   145ec:	movwne	r0, #4
   145f0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   145f4:	ldr	r1, [fp, #12]
   145f8:	cmp	r2, #2
   145fc:	moveq	r2, r0
   14600:	mov	r0, #0
   14604:	bic	r1, r1, #2
   14608:	str	r2, [sp]
   1460c:	mov	r2, ip
   14610:	mov	r3, lr
   14614:	str	r0, [sp, #8]
   14618:	ldr	r0, [sp, #76]	; 0x4c
   1461c:	str	r1, [sp, #4]
   14620:	mov	r1, r4
   14624:	str	r0, [sp, #12]
   14628:	ldr	r0, [sp, #80]	; 0x50
   1462c:	str	r0, [sp, #16]
   14630:	mov	r0, r5
   14634:	bl	136ac <__assert_fail@plt+0x2558>
   14638:	mov	r8, r0
   1463c:	b	146c0 <__assert_fail@plt+0x356c>
   14640:	mov	r0, #5
   14644:	ldr	r1, [sp, #56]	; 0x38
   14648:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1464c:	mov	r3, sl
   14650:	str	r0, [sp]
   14654:	ldr	r0, [fp, #12]
   14658:	str	r0, [sp, #4]
   1465c:	ldr	r0, [fp, #16]
   14660:	str	r0, [sp, #8]
   14664:	ldr	r0, [sp, #76]	; 0x4c
   14668:	b	14624 <__assert_fail@plt+0x34d0>
   1466c:	mov	r0, #0
   14670:	str	r0, [fp, #-76]	; 0xffffffb4
   14674:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14678:	cmp	r1, #0
   1467c:	beq	146b4 <__assert_fail@plt+0x3560>
   14680:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14684:	tst	r0, #1
   14688:	bne	146b4 <__assert_fail@plt+0x3560>
   1468c:	ldrb	r0, [r1]
   14690:	cmp	r0, #0
   14694:	beq	146b4 <__assert_fail@plt+0x3560>
   14698:	add	r1, r1, #1
   1469c:	cmp	r8, r4
   146a0:	strbcc	r0, [r5, r8]
   146a4:	add	r8, r8, #1
   146a8:	ldrb	r0, [r1], #1
   146ac:	cmp	r0, #0
   146b0:	bne	1469c <__assert_fail@plt+0x3548>
   146b4:	cmp	r8, r4
   146b8:	movcc	r0, #0
   146bc:	strbcc	r0, [r5, r8]
   146c0:	mov	r0, r8
   146c4:	sub	sp, fp, #28
   146c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146cc:	mov	r0, #4
   146d0:	b	145f0 <__assert_fail@plt+0x349c>
   146d4:	bl	1113c <abort@plt>
   146d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146dc:	add	fp, sp, #28
   146e0:	sub	sp, sp, #28
   146e4:	movw	r5, #37280	; 0x91a0
   146e8:	cmp	r2, #0
   146ec:	mov	r4, r1
   146f0:	mov	r7, r0
   146f4:	str	r0, [sp, #20]
   146f8:	movt	r5, #2
   146fc:	movne	r5, r2
   14700:	bl	11088 <__errno_location@plt>
   14704:	mov	sl, r0
   14708:	ldr	r2, [r5, #40]	; 0x28
   1470c:	ldr	r3, [r5, #44]	; 0x2c
   14710:	ldm	r5, {r0, r1}
   14714:	orr	r8, r1, #1
   14718:	add	r9, r5, #8
   1471c:	mov	r1, #0
   14720:	ldr	r6, [sl]
   14724:	stm	sp, {r0, r8, r9}
   14728:	mov	r0, #0
   1472c:	str	r2, [sp, #12]
   14730:	str	r3, [sp, #16]
   14734:	mov	r2, r7
   14738:	mov	r3, r4
   1473c:	str	r6, [sp, #24]
   14740:	mov	r6, r4
   14744:	bl	136ac <__assert_fail@plt+0x2558>
   14748:	add	r7, r0, #1
   1474c:	mov	r0, r7
   14750:	bl	158f8 <__assert_fail@plt+0x47a4>
   14754:	mov	r4, r0
   14758:	ldr	r0, [r5]
   1475c:	ldr	r2, [r5, #44]	; 0x2c
   14760:	ldr	r1, [r5, #40]	; 0x28
   14764:	mov	r3, r6
   14768:	stm	sp, {r0, r8, r9}
   1476c:	str	r2, [sp, #16]
   14770:	ldr	r2, [sp, #20]
   14774:	str	r1, [sp, #12]
   14778:	mov	r0, r4
   1477c:	mov	r1, r7
   14780:	bl	136ac <__assert_fail@plt+0x2558>
   14784:	ldr	r0, [sp, #24]
   14788:	str	r0, [sl]
   1478c:	mov	r0, r4
   14790:	sub	sp, fp, #28
   14794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1479c:	add	fp, sp, #28
   147a0:	sub	sp, sp, #36	; 0x24
   147a4:	movw	r8, #37280	; 0x91a0
   147a8:	cmp	r3, #0
   147ac:	mov	r4, r2
   147b0:	str	r2, [sp, #24]
   147b4:	mov	r5, r1
   147b8:	mov	r6, r0
   147bc:	str	r0, [sp, #20]
   147c0:	movt	r8, #2
   147c4:	movne	r8, r3
   147c8:	bl	11088 <__errno_location@plt>
   147cc:	str	r0, [sp, #28]
   147d0:	ldr	r1, [r8, #40]	; 0x28
   147d4:	ldr	r2, [r8, #44]	; 0x2c
   147d8:	ldr	r7, [r0]
   147dc:	cmp	r4, #0
   147e0:	add	sl, r8, #8
   147e4:	mov	r0, #0
   147e8:	ldm	r8, {r3, r9}
   147ec:	orreq	r9, r9, #1
   147f0:	stm	sp, {r3, r9, sl}
   147f4:	str	r1, [sp, #12]
   147f8:	str	r2, [sp, #16]
   147fc:	mov	r1, #0
   14800:	mov	r2, r6
   14804:	mov	r3, r5
   14808:	str	r7, [sp, #32]
   1480c:	mov	r7, r5
   14810:	bl	136ac <__assert_fail@plt+0x2558>
   14814:	add	r4, r0, #1
   14818:	mov	r5, r0
   1481c:	mov	r0, r4
   14820:	bl	158f8 <__assert_fail@plt+0x47a4>
   14824:	mov	r6, r0
   14828:	ldr	r0, [r8]
   1482c:	ldr	r2, [r8, #44]	; 0x2c
   14830:	ldr	r1, [r8, #40]	; 0x28
   14834:	mov	r3, r7
   14838:	stm	sp, {r0, r9, sl}
   1483c:	str	r2, [sp, #16]
   14840:	ldr	r2, [sp, #20]
   14844:	str	r1, [sp, #12]
   14848:	mov	r0, r6
   1484c:	mov	r1, r4
   14850:	bl	136ac <__assert_fail@plt+0x2558>
   14854:	ldr	r0, [sp, #24]
   14858:	ldr	r1, [sp, #32]
   1485c:	ldr	r2, [sp, #28]
   14860:	cmp	r0, #0
   14864:	str	r1, [r2]
   14868:	strne	r5, [r0]
   1486c:	mov	r0, r6
   14870:	sub	sp, fp, #28
   14874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14878:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1487c:	add	fp, sp, #24
   14880:	movw	r5, #37132	; 0x910c
   14884:	movw	r8, #37128	; 0x9108
   14888:	movt	r5, #2
   1488c:	movt	r8, #2
   14890:	ldr	r0, [r5]
   14894:	ldr	r4, [r8]
   14898:	cmp	r0, #2
   1489c:	blt	148c8 <__assert_fail@plt+0x3774>
   148a0:	add	r7, r4, #12
   148a4:	mov	r6, #0
   148a8:	ldr	r0, [r7, r6, lsl #3]
   148ac:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   148b0:	ldr	r1, [r5]
   148b4:	add	r2, r6, #2
   148b8:	add	r0, r6, #1
   148bc:	mov	r6, r0
   148c0:	cmp	r2, r1
   148c4:	blt	148a8 <__assert_fail@plt+0x3754>
   148c8:	ldr	r0, [r4, #4]
   148cc:	movw	r9, #37328	; 0x91d0
   148d0:	movw	r7, #37136	; 0x9110
   148d4:	movt	r9, #2
   148d8:	movt	r7, #2
   148dc:	cmp	r0, r9
   148e0:	beq	148f0 <__assert_fail@plt+0x379c>
   148e4:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   148e8:	mov	r0, #256	; 0x100
   148ec:	stm	r7, {r0, r9}
   148f0:	cmp	r4, r7
   148f4:	beq	14904 <__assert_fail@plt+0x37b0>
   148f8:	mov	r0, r4
   148fc:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   14900:	str	r7, [r8]
   14904:	mov	r0, #1
   14908:	str	r0, [r5]
   1490c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14910:	movw	r3, #37280	; 0x91a0
   14914:	mvn	r2, #0
   14918:	movt	r3, #2
   1491c:	b	14920 <__assert_fail@plt+0x37cc>
   14920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14924:	add	fp, sp, #28
   14928:	sub	sp, sp, #44	; 0x2c
   1492c:	mov	r7, r3
   14930:	str	r2, [sp, #36]	; 0x24
   14934:	str	r1, [sp, #32]
   14938:	mov	r5, r0
   1493c:	bl	11088 <__errno_location@plt>
   14940:	cmp	r5, #0
   14944:	bmi	14ab4 <__assert_fail@plt+0x3960>
   14948:	cmn	r5, #-2147483647	; 0x80000001
   1494c:	beq	14ab4 <__assert_fail@plt+0x3960>
   14950:	movw	r8, #37132	; 0x910c
   14954:	movw	r4, #37128	; 0x9108
   14958:	str	r0, [sp, #28]
   1495c:	ldr	r0, [r0]
   14960:	movt	r8, #2
   14964:	movt	r4, #2
   14968:	ldr	r1, [r8]
   1496c:	ldr	r6, [r4]
   14970:	str	r0, [sp, #24]
   14974:	cmp	r1, r5
   14978:	ble	14984 <__assert_fail@plt+0x3830>
   1497c:	mov	sl, r6
   14980:	b	149f0 <__assert_fail@plt+0x389c>
   14984:	movw	r9, #37136	; 0x9110
   14988:	mov	r0, #8
   1498c:	str	r1, [fp, #-32]	; 0xffffffe0
   14990:	sub	r1, r5, r1
   14994:	mvn	r3, #-2147483648	; 0x80000000
   14998:	movt	r9, #2
   1499c:	str	r0, [sp]
   149a0:	add	r2, r1, #1
   149a4:	sub	r1, fp, #32
   149a8:	subs	r0, r6, r9
   149ac:	movne	r0, r6
   149b0:	bl	15af8 <__assert_fail@plt+0x49a4>
   149b4:	mov	sl, r0
   149b8:	cmp	r6, r9
   149bc:	str	r0, [r4]
   149c0:	bne	149cc <__assert_fail@plt+0x3878>
   149c4:	ldrd	r0, [r9]
   149c8:	stm	sl, {r0, r1}
   149cc:	ldr	r1, [r8]
   149d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   149d4:	add	r0, sl, r1, lsl #3
   149d8:	sub	r1, r2, r1
   149dc:	lsl	r2, r1, #3
   149e0:	mov	r1, #0
   149e4:	bl	110a0 <memset@plt>
   149e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   149ec:	str	r0, [r8]
   149f0:	mov	r9, sl
   149f4:	ldm	r7, {r0, r1}
   149f8:	orr	r8, r1, #1
   149fc:	add	r1, r7, #8
   14a00:	ldr	r2, [r7, #40]	; 0x28
   14a04:	ldr	r3, [r7, #44]	; 0x2c
   14a08:	ldr	r6, [r9, r5, lsl #3]!
   14a0c:	str	r1, [sp, #20]
   14a10:	ldr	r4, [r9, #4]!
   14a14:	stm	sp, {r0, r8}
   14a18:	add	r0, sp, #8
   14a1c:	stm	r0, {r1, r2, r3}
   14a20:	ldr	r2, [sp, #32]
   14a24:	ldr	r3, [sp, #36]	; 0x24
   14a28:	mov	r1, r6
   14a2c:	mov	r0, r4
   14a30:	bl	136ac <__assert_fail@plt+0x2558>
   14a34:	cmp	r6, r0
   14a38:	bhi	14a9c <__assert_fail@plt+0x3948>
   14a3c:	add	r6, r0, #1
   14a40:	movw	r0, #37328	; 0x91d0
   14a44:	movt	r0, #2
   14a48:	str	r6, [sl, r5, lsl #3]
   14a4c:	cmp	r4, r0
   14a50:	beq	14a5c <__assert_fail@plt+0x3908>
   14a54:	mov	r0, r4
   14a58:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   14a5c:	mov	r0, r6
   14a60:	bl	158f8 <__assert_fail@plt+0x47a4>
   14a64:	str	r0, [r9]
   14a68:	mov	r4, r0
   14a6c:	add	r3, sp, #8
   14a70:	ldr	r0, [r7]
   14a74:	ldr	r1, [r7, #40]	; 0x28
   14a78:	ldr	r2, [r7, #44]	; 0x2c
   14a7c:	stm	sp, {r0, r8}
   14a80:	ldr	r0, [sp, #20]
   14a84:	stm	r3, {r0, r1, r2}
   14a88:	ldr	r2, [sp, #32]
   14a8c:	ldr	r3, [sp, #36]	; 0x24
   14a90:	mov	r0, r4
   14a94:	mov	r1, r6
   14a98:	bl	136ac <__assert_fail@plt+0x2558>
   14a9c:	ldr	r0, [sp, #28]
   14aa0:	ldr	r1, [sp, #24]
   14aa4:	str	r1, [r0]
   14aa8:	mov	r0, r4
   14aac:	sub	sp, fp, #28
   14ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab4:	bl	1113c <abort@plt>
   14ab8:	movw	r3, #37280	; 0x91a0
   14abc:	movt	r3, #2
   14ac0:	b	14920 <__assert_fail@plt+0x37cc>
   14ac4:	movw	r3, #37280	; 0x91a0
   14ac8:	mov	r1, r0
   14acc:	mov	r0, #0
   14ad0:	mvn	r2, #0
   14ad4:	movt	r3, #2
   14ad8:	b	14920 <__assert_fail@plt+0x37cc>
   14adc:	movw	r3, #37280	; 0x91a0
   14ae0:	mov	r2, r1
   14ae4:	mov	r1, r0
   14ae8:	mov	r0, #0
   14aec:	movt	r3, #2
   14af0:	b	14920 <__assert_fail@plt+0x37cc>
   14af4:	push	{fp, lr}
   14af8:	mov	fp, sp
   14afc:	sub	sp, sp, #48	; 0x30
   14b00:	vmov.i32	q8, #0	; 0x00000000
   14b04:	mov	ip, #32
   14b08:	mov	r3, sp
   14b0c:	mov	lr, r2
   14b10:	cmp	r1, #10
   14b14:	add	r2, r3, #16
   14b18:	vst1.64	{d16-d17}, [r3], ip
   14b1c:	vst1.64	{d16-d17}, [r2]
   14b20:	vst1.64	{d16-d17}, [r3]
   14b24:	beq	14b44 <__assert_fail@plt+0x39f0>
   14b28:	str	r1, [sp]
   14b2c:	mov	r3, sp
   14b30:	mov	r1, lr
   14b34:	mvn	r2, #0
   14b38:	bl	14920 <__assert_fail@plt+0x37cc>
   14b3c:	mov	sp, fp
   14b40:	pop	{fp, pc}
   14b44:	bl	1113c <abort@plt>
   14b48:	push	{r4, sl, fp, lr}
   14b4c:	add	fp, sp, #8
   14b50:	sub	sp, sp, #48	; 0x30
   14b54:	vmov.i32	q8, #0	; 0x00000000
   14b58:	mov	ip, r3
   14b5c:	mov	r3, sp
   14b60:	mov	lr, #32
   14b64:	cmp	r1, #10
   14b68:	add	r4, r3, #16
   14b6c:	vst1.64	{d16-d17}, [r3], lr
   14b70:	vst1.64	{d16-d17}, [r4]
   14b74:	vst1.64	{d16-d17}, [r3]
   14b78:	beq	14b98 <__assert_fail@plt+0x3a44>
   14b7c:	str	r1, [sp]
   14b80:	mov	r1, r2
   14b84:	mov	r3, sp
   14b88:	mov	r2, ip
   14b8c:	bl	14920 <__assert_fail@plt+0x37cc>
   14b90:	sub	sp, fp, #8
   14b94:	pop	{r4, sl, fp, pc}
   14b98:	bl	1113c <abort@plt>
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	sub	sp, sp, #48	; 0x30
   14ba8:	vmov.i32	q8, #0	; 0x00000000
   14bac:	mov	r3, sp
   14bb0:	mov	ip, #32
   14bb4:	cmp	r0, #10
   14bb8:	add	r2, r3, #16
   14bbc:	vst1.64	{d16-d17}, [r3], ip
   14bc0:	vst1.64	{d16-d17}, [r2]
   14bc4:	vst1.64	{d16-d17}, [r3]
   14bc8:	beq	14be8 <__assert_fail@plt+0x3a94>
   14bcc:	str	r0, [sp]
   14bd0:	mov	r3, sp
   14bd4:	mov	r0, #0
   14bd8:	mvn	r2, #0
   14bdc:	bl	14920 <__assert_fail@plt+0x37cc>
   14be0:	mov	sp, fp
   14be4:	pop	{fp, pc}
   14be8:	bl	1113c <abort@plt>
   14bec:	push	{fp, lr}
   14bf0:	mov	fp, sp
   14bf4:	sub	sp, sp, #48	; 0x30
   14bf8:	vmov.i32	q8, #0	; 0x00000000
   14bfc:	mov	r3, sp
   14c00:	mov	ip, #32
   14c04:	cmp	r0, #10
   14c08:	add	lr, r3, #16
   14c0c:	vst1.64	{d16-d17}, [r3], ip
   14c10:	vst1.64	{d16-d17}, [lr]
   14c14:	vst1.64	{d16-d17}, [r3]
   14c18:	beq	14c34 <__assert_fail@plt+0x3ae0>
   14c1c:	str	r0, [sp]
   14c20:	mov	r3, sp
   14c24:	mov	r0, #0
   14c28:	bl	14920 <__assert_fail@plt+0x37cc>
   14c2c:	mov	sp, fp
   14c30:	pop	{fp, pc}
   14c34:	bl	1113c <abort@plt>
   14c38:	push	{r4, sl, fp, lr}
   14c3c:	add	fp, sp, #8
   14c40:	sub	sp, sp, #48	; 0x30
   14c44:	mov	lr, r0
   14c48:	movw	r0, #37280	; 0x91a0
   14c4c:	mov	ip, r1
   14c50:	mov	r1, #32
   14c54:	mov	r4, #1
   14c58:	movt	r0, #2
   14c5c:	add	r3, r0, #16
   14c60:	vld1.64	{d16-d17}, [r0], r1
   14c64:	vld1.64	{d20-d21}, [r0]
   14c68:	vld1.64	{d18-d19}, [r3]
   14c6c:	mov	r3, sp
   14c70:	add	r0, r3, #32
   14c74:	add	r1, r3, #16
   14c78:	vst1.64	{d20-d21}, [r0]
   14c7c:	mov	r0, #28
   14c80:	vst1.64	{d18-d19}, [r1]
   14c84:	mov	r1, r3
   14c88:	and	r0, r0, r2, lsr #3
   14c8c:	and	r2, r2, #31
   14c90:	vst1.64	{d16-d17}, [r1], r0
   14c94:	ldr	r0, [r1, #8]
   14c98:	bic	r4, r4, r0, lsr r2
   14c9c:	eor	r0, r0, r4, lsl r2
   14ca0:	mov	r2, ip
   14ca4:	str	r0, [r1, #8]
   14ca8:	mov	r0, #0
   14cac:	mov	r1, lr
   14cb0:	bl	14920 <__assert_fail@plt+0x37cc>
   14cb4:	sub	sp, fp, #8
   14cb8:	pop	{r4, sl, fp, pc}
   14cbc:	push	{fp, lr}
   14cc0:	mov	fp, sp
   14cc4:	sub	sp, sp, #48	; 0x30
   14cc8:	mov	ip, r0
   14ccc:	movw	r0, #37280	; 0x91a0
   14cd0:	mov	r2, #32
   14cd4:	movt	r0, #2
   14cd8:	add	r3, r0, #16
   14cdc:	vld1.64	{d16-d17}, [r0], r2
   14ce0:	vld1.64	{d20-d21}, [r0]
   14ce4:	vld1.64	{d18-d19}, [r3]
   14ce8:	mov	r3, sp
   14cec:	add	r0, r3, #32
   14cf0:	add	r2, r3, #16
   14cf4:	vst1.64	{d20-d21}, [r0]
   14cf8:	mov	r0, #28
   14cfc:	vst1.64	{d18-d19}, [r2]
   14d00:	mov	r2, r3
   14d04:	and	r0, r0, r1, lsr #3
   14d08:	and	r1, r1, #31
   14d0c:	vst1.64	{d16-d17}, [r2], r0
   14d10:	mov	r0, #1
   14d14:	ldr	lr, [r2, #8]
   14d18:	bic	r0, r0, lr, lsr r1
   14d1c:	eor	r0, lr, r0, lsl r1
   14d20:	mov	r1, ip
   14d24:	str	r0, [r2, #8]
   14d28:	mov	r0, #0
   14d2c:	mvn	r2, #0
   14d30:	bl	14920 <__assert_fail@plt+0x37cc>
   14d34:	mov	sp, fp
   14d38:	pop	{fp, pc}
   14d3c:	push	{fp, lr}
   14d40:	mov	fp, sp
   14d44:	sub	sp, sp, #48	; 0x30
   14d48:	mov	r1, r0
   14d4c:	movw	r0, #37280	; 0x91a0
   14d50:	mov	r3, #32
   14d54:	movt	r0, #2
   14d58:	add	r2, r0, #16
   14d5c:	vld1.64	{d16-d17}, [r0], r3
   14d60:	mov	r3, sp
   14d64:	vld1.64	{d18-d19}, [r2]
   14d68:	vld1.64	{d20-d21}, [r0]
   14d6c:	add	r2, r3, #16
   14d70:	add	r0, r3, #32
   14d74:	vst1.64	{d18-d19}, [r2]
   14d78:	vst1.64	{d20-d21}, [r0]
   14d7c:	mov	r0, #12
   14d80:	mov	r2, r3
   14d84:	vst1.64	{d16-d17}, [r2], r0
   14d88:	ldr	r0, [r2]
   14d8c:	orr	r0, r0, #67108864	; 0x4000000
   14d90:	str	r0, [r2]
   14d94:	mov	r0, #0
   14d98:	mvn	r2, #0
   14d9c:	bl	14920 <__assert_fail@plt+0x37cc>
   14da0:	mov	sp, fp
   14da4:	pop	{fp, pc}
   14da8:	push	{fp, lr}
   14dac:	mov	fp, sp
   14db0:	sub	sp, sp, #48	; 0x30
   14db4:	mov	ip, r1
   14db8:	mov	r1, r0
   14dbc:	movw	r0, #37280	; 0x91a0
   14dc0:	mov	r2, #32
   14dc4:	movt	r0, #2
   14dc8:	add	r3, r0, #16
   14dcc:	vld1.64	{d16-d17}, [r0], r2
   14dd0:	vld1.64	{d18-d19}, [r3]
   14dd4:	vld1.64	{d20-d21}, [r0]
   14dd8:	mov	r3, sp
   14ddc:	add	r2, r3, #16
   14de0:	add	r0, r3, #32
   14de4:	vst1.64	{d18-d19}, [r2]
   14de8:	vst1.64	{d20-d21}, [r0]
   14dec:	mov	r0, #12
   14df0:	mov	r2, r3
   14df4:	vst1.64	{d16-d17}, [r2], r0
   14df8:	ldr	r0, [r2]
   14dfc:	orr	r0, r0, #67108864	; 0x4000000
   14e00:	str	r0, [r2]
   14e04:	mov	r0, #0
   14e08:	mov	r2, ip
   14e0c:	bl	14920 <__assert_fail@plt+0x37cc>
   14e10:	mov	sp, fp
   14e14:	pop	{fp, pc}
   14e18:	push	{r4, sl, fp, lr}
   14e1c:	add	fp, sp, #8
   14e20:	sub	sp, sp, #96	; 0x60
   14e24:	vmov.i32	q8, #0	; 0x00000000
   14e28:	mov	ip, r2
   14e2c:	mov	r2, sp
   14e30:	mov	r4, #28
   14e34:	cmp	r1, #10
   14e38:	mov	r3, r2
   14e3c:	add	lr, r2, #16
   14e40:	vst1.64	{d16-d17}, [r3], r4
   14e44:	vst1.64	{d16-d17}, [lr]
   14e48:	vst1.32	{d16-d17}, [r3]
   14e4c:	beq	14e9c <__assert_fail@plt+0x3d48>
   14e50:	vld1.64	{d16-d17}, [r2], r4
   14e54:	vld1.64	{d18-d19}, [lr]
   14e58:	add	r3, sp, #48	; 0x30
   14e5c:	vld1.32	{d20-d21}, [r2]
   14e60:	add	r2, r3, #20
   14e64:	add	r4, r3, #4
   14e68:	vst1.32	{d18-d19}, [r2]
   14e6c:	add	r2, r3, #32
   14e70:	vst1.32	{d16-d17}, [r4]
   14e74:	vst1.32	{d20-d21}, [r2]
   14e78:	str	r1, [sp, #48]	; 0x30
   14e7c:	mvn	r2, #0
   14e80:	ldr	r1, [sp, #60]	; 0x3c
   14e84:	orr	r1, r1, #67108864	; 0x4000000
   14e88:	str	r1, [sp, #60]	; 0x3c
   14e8c:	mov	r1, ip
   14e90:	bl	14920 <__assert_fail@plt+0x37cc>
   14e94:	sub	sp, fp, #8
   14e98:	pop	{r4, sl, fp, pc}
   14e9c:	bl	1113c <abort@plt>
   14ea0:	push	{r4, r5, r6, sl, fp, lr}
   14ea4:	add	fp, sp, #16
   14ea8:	sub	sp, sp, #48	; 0x30
   14eac:	mov	ip, r3
   14eb0:	movw	r3, #37280	; 0x91a0
   14eb4:	mov	r6, #32
   14eb8:	cmp	r1, #0
   14ebc:	mov	r4, sp
   14ec0:	movt	r3, #2
   14ec4:	cmpne	r2, #0
   14ec8:	add	r5, r4, #16
   14ecc:	add	lr, r3, #16
   14ed0:	vld1.64	{d16-d17}, [r3], r6
   14ed4:	vld1.64	{d18-d19}, [lr]
   14ed8:	vld1.64	{d20-d21}, [r3]
   14edc:	mov	r3, #10
   14ee0:	vst1.64	{d16-d17}, [r4], r6
   14ee4:	vst1.64	{d18-d19}, [r5]
   14ee8:	vst1.64	{d20-d21}, [r4]
   14eec:	str	r3, [sp]
   14ef0:	bne	14ef8 <__assert_fail@plt+0x3da4>
   14ef4:	bl	1113c <abort@plt>
   14ef8:	str	r2, [sp, #44]	; 0x2c
   14efc:	str	r1, [sp, #40]	; 0x28
   14f00:	mov	r3, sp
   14f04:	mov	r1, ip
   14f08:	mvn	r2, #0
   14f0c:	bl	14920 <__assert_fail@plt+0x37cc>
   14f10:	sub	sp, fp, #16
   14f14:	pop	{r4, r5, r6, sl, fp, pc}
   14f18:	push	{r4, r5, r6, sl, fp, lr}
   14f1c:	add	fp, sp, #16
   14f20:	sub	sp, sp, #48	; 0x30
   14f24:	mov	lr, r3
   14f28:	movw	r3, #37280	; 0x91a0
   14f2c:	mov	r6, #32
   14f30:	cmp	r1, #0
   14f34:	mov	r4, sp
   14f38:	movt	r3, #2
   14f3c:	cmpne	r2, #0
   14f40:	add	r5, r4, #16
   14f44:	add	ip, r3, #16
   14f48:	vld1.64	{d16-d17}, [r3], r6
   14f4c:	vld1.64	{d18-d19}, [ip]
   14f50:	vld1.64	{d20-d21}, [r3]
   14f54:	mov	r3, #10
   14f58:	vst1.64	{d16-d17}, [r4], r6
   14f5c:	vst1.64	{d18-d19}, [r5]
   14f60:	vst1.64	{d20-d21}, [r4]
   14f64:	str	r3, [sp]
   14f68:	bne	14f70 <__assert_fail@plt+0x3e1c>
   14f6c:	bl	1113c <abort@plt>
   14f70:	ldr	ip, [fp, #8]
   14f74:	str	r2, [sp, #44]	; 0x2c
   14f78:	str	r1, [sp, #40]	; 0x28
   14f7c:	mov	r3, sp
   14f80:	mov	r1, lr
   14f84:	mov	r2, ip
   14f88:	bl	14920 <__assert_fail@plt+0x37cc>
   14f8c:	sub	sp, fp, #16
   14f90:	pop	{r4, r5, r6, sl, fp, pc}
   14f94:	push	{r4, sl, fp, lr}
   14f98:	add	fp, sp, #8
   14f9c:	sub	sp, sp, #48	; 0x30
   14fa0:	movw	r3, #37280	; 0x91a0
   14fa4:	mov	lr, #32
   14fa8:	mov	ip, r2
   14fac:	cmp	r0, #0
   14fb0:	movt	r3, #2
   14fb4:	cmpne	r1, #0
   14fb8:	add	r2, r3, #16
   14fbc:	vld1.64	{d16-d17}, [r3], lr
   14fc0:	vld1.64	{d20-d21}, [r3]
   14fc4:	vld1.64	{d18-d19}, [r2]
   14fc8:	mov	r2, sp
   14fcc:	add	r4, r2, #16
   14fd0:	vst1.64	{d16-d17}, [r2], lr
   14fd4:	vst1.64	{d20-d21}, [r2]
   14fd8:	mov	r2, #10
   14fdc:	vst1.64	{d18-d19}, [r4]
   14fe0:	str	r2, [sp]
   14fe4:	bne	14fec <__assert_fail@plt+0x3e98>
   14fe8:	bl	1113c <abort@plt>
   14fec:	str	r1, [sp, #44]	; 0x2c
   14ff0:	str	r0, [sp, #40]	; 0x28
   14ff4:	mov	r3, sp
   14ff8:	mov	r0, #0
   14ffc:	mov	r1, ip
   15000:	mvn	r2, #0
   15004:	bl	14920 <__assert_fail@plt+0x37cc>
   15008:	sub	sp, fp, #8
   1500c:	pop	{r4, sl, fp, pc}
   15010:	push	{r4, r5, fp, lr}
   15014:	add	fp, sp, #8
   15018:	sub	sp, sp, #48	; 0x30
   1501c:	mov	ip, r3
   15020:	movw	r3, #37280	; 0x91a0
   15024:	mov	r4, #32
   15028:	mov	lr, r2
   1502c:	cmp	r0, #0
   15030:	movt	r3, #2
   15034:	cmpne	r1, #0
   15038:	add	r2, r3, #16
   1503c:	vld1.64	{d16-d17}, [r3], r4
   15040:	vld1.64	{d20-d21}, [r3]
   15044:	vld1.64	{d18-d19}, [r2]
   15048:	mov	r2, sp
   1504c:	add	r5, r2, #16
   15050:	vst1.64	{d16-d17}, [r2], r4
   15054:	vst1.64	{d20-d21}, [r2]
   15058:	mov	r2, #10
   1505c:	vst1.64	{d18-d19}, [r5]
   15060:	str	r2, [sp]
   15064:	bne	1506c <__assert_fail@plt+0x3f18>
   15068:	bl	1113c <abort@plt>
   1506c:	str	r1, [sp, #44]	; 0x2c
   15070:	str	r0, [sp, #40]	; 0x28
   15074:	mov	r3, sp
   15078:	mov	r0, #0
   1507c:	mov	r1, lr
   15080:	mov	r2, ip
   15084:	bl	14920 <__assert_fail@plt+0x37cc>
   15088:	sub	sp, fp, #8
   1508c:	pop	{r4, r5, fp, pc}
   15090:	movw	r3, #37144	; 0x9118
   15094:	movt	r3, #2
   15098:	b	14920 <__assert_fail@plt+0x37cc>
   1509c:	movw	r3, #37144	; 0x9118
   150a0:	mov	r2, r1
   150a4:	mov	r1, r0
   150a8:	mov	r0, #0
   150ac:	movt	r3, #2
   150b0:	b	14920 <__assert_fail@plt+0x37cc>
   150b4:	movw	r3, #37144	; 0x9118
   150b8:	mvn	r2, #0
   150bc:	movt	r3, #2
   150c0:	b	14920 <__assert_fail@plt+0x37cc>
   150c4:	movw	r3, #37144	; 0x9118
   150c8:	mov	r1, r0
   150cc:	mov	r0, #0
   150d0:	mvn	r2, #0
   150d4:	movt	r3, #2
   150d8:	b	14920 <__assert_fail@plt+0x37cc>
   150dc:	push	{r4, r5, fp, lr}
   150e0:	add	fp, sp, #8
   150e4:	mov	r5, r0
   150e8:	mov	r4, r1
   150ec:	mov	r0, #0
   150f0:	mov	r2, #5
   150f4:	mov	r1, r5
   150f8:	bl	10f5c <dcgettext@plt>
   150fc:	cmp	r0, r5
   15100:	popne	{r4, r5, fp, pc}
   15104:	bl	16c44 <__assert_fail@plt+0x5af0>
   15108:	ldrb	r1, [r0]
   1510c:	and	r1, r1, #223	; 0xdf
   15110:	cmp	r1, #71	; 0x47
   15114:	beq	1517c <__assert_fail@plt+0x4028>
   15118:	cmp	r1, #85	; 0x55
   1511c:	bne	151d4 <__assert_fail@plt+0x4080>
   15120:	ldrb	r1, [r0, #1]
   15124:	and	r1, r1, #223	; 0xdf
   15128:	cmp	r1, #84	; 0x54
   1512c:	bne	151d4 <__assert_fail@plt+0x4080>
   15130:	ldrb	r1, [r0, #2]
   15134:	and	r1, r1, #223	; 0xdf
   15138:	cmp	r1, #70	; 0x46
   1513c:	bne	151d4 <__assert_fail@plt+0x4080>
   15140:	ldrb	r1, [r0, #3]
   15144:	cmp	r1, #45	; 0x2d
   15148:	bne	151d4 <__assert_fail@plt+0x4080>
   1514c:	ldrb	r1, [r0, #4]
   15150:	cmp	r1, #56	; 0x38
   15154:	bne	151d4 <__assert_fail@plt+0x4080>
   15158:	ldrb	r0, [r0, #5]
   1515c:	cmp	r0, #0
   15160:	bne	151d4 <__assert_fail@plt+0x4080>
   15164:	ldrb	r1, [r5]
   15168:	movw	r2, #31813	; 0x7c45
   1516c:	movw	r0, #31817	; 0x7c49
   15170:	movt	r2, #1
   15174:	movt	r0, #1
   15178:	b	15204 <__assert_fail@plt+0x40b0>
   1517c:	ldrb	r1, [r0, #1]
   15180:	and	r1, r1, #223	; 0xdf
   15184:	cmp	r1, #66	; 0x42
   15188:	bne	151d4 <__assert_fail@plt+0x4080>
   1518c:	ldrb	r1, [r0, #2]
   15190:	cmp	r1, #49	; 0x31
   15194:	bne	151d4 <__assert_fail@plt+0x4080>
   15198:	ldrb	r1, [r0, #3]
   1519c:	cmp	r1, #56	; 0x38
   151a0:	bne	151d4 <__assert_fail@plt+0x4080>
   151a4:	ldrb	r1, [r0, #4]
   151a8:	cmp	r1, #48	; 0x30
   151ac:	bne	151d4 <__assert_fail@plt+0x4080>
   151b0:	ldrb	r1, [r0, #5]
   151b4:	cmp	r1, #51	; 0x33
   151b8:	bne	151d4 <__assert_fail@plt+0x4080>
   151bc:	ldrb	r1, [r0, #6]
   151c0:	cmp	r1, #48	; 0x30
   151c4:	bne	151d4 <__assert_fail@plt+0x4080>
   151c8:	ldrb	r0, [r0, #7]
   151cc:	cmp	r0, #0
   151d0:	beq	151f0 <__assert_fail@plt+0x409c>
   151d4:	movw	r1, #31807	; 0x7c3f
   151d8:	movw	r0, #31811	; 0x7c43
   151dc:	cmp	r4, #9
   151e0:	movt	r1, #1
   151e4:	movt	r0, #1
   151e8:	moveq	r0, r1
   151ec:	pop	{r4, r5, fp, pc}
   151f0:	ldrb	r1, [r5]
   151f4:	movw	r2, #31821	; 0x7c4d
   151f8:	movw	r0, #31825	; 0x7c51
   151fc:	movt	r2, #1
   15200:	movt	r0, #1
   15204:	cmp	r1, #96	; 0x60
   15208:	moveq	r0, r2
   1520c:	pop	{r4, r5, fp, pc}
   15210:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15214:	add	fp, sp, #24
   15218:	sub	sp, sp, #32
   1521c:	ldr	r6, [fp, #12]
   15220:	ldr	r7, [fp, #8]
   15224:	mov	r4, r2
   15228:	mov	r8, r0
   1522c:	cmp	r1, #0
   15230:	beq	15258 <__assert_fail@plt+0x4104>
   15234:	movw	r2, #31912	; 0x7ca8
   15238:	mov	r5, r1
   1523c:	str	r3, [sp, #4]
   15240:	str	r4, [sp]
   15244:	mov	r0, r8
   15248:	mov	r1, #1
   1524c:	movt	r2, #1
   15250:	mov	r3, r5
   15254:	b	15270 <__assert_fail@plt+0x411c>
   15258:	movw	r2, #31924	; 0x7cb4
   1525c:	str	r3, [sp]
   15260:	mov	r0, r8
   15264:	mov	r1, #1
   15268:	mov	r3, r4
   1526c:	movt	r2, #1
   15270:	bl	110c4 <__fprintf_chk@plt>
   15274:	movw	r1, #31931	; 0x7cbb
   15278:	mov	r0, #0
   1527c:	mov	r2, #5
   15280:	movt	r1, #1
   15284:	bl	10f5c <dcgettext@plt>
   15288:	movw	r2, #32649	; 0x7f89
   1528c:	mov	r3, r0
   15290:	movw	r0, #2022	; 0x7e6
   15294:	mov	r1, #1
   15298:	movt	r2, #1
   1529c:	str	r0, [sp]
   152a0:	mov	r0, r8
   152a4:	bl	110c4 <__fprintf_chk@plt>
   152a8:	movw	r4, #31031	; 0x7937
   152ac:	mov	r1, r8
   152b0:	movt	r4, #1
   152b4:	mov	r0, r4
   152b8:	bl	10ecc <fputs_unlocked@plt>
   152bc:	movw	r1, #31935	; 0x7cbf
   152c0:	mov	r0, #0
   152c4:	mov	r2, #5
   152c8:	movt	r1, #1
   152cc:	bl	10f5c <dcgettext@plt>
   152d0:	movw	r3, #32106	; 0x7d6a
   152d4:	mov	r2, r0
   152d8:	mov	r0, r8
   152dc:	mov	r1, #1
   152e0:	movt	r3, #1
   152e4:	bl	110c4 <__fprintf_chk@plt>
   152e8:	mov	r0, r4
   152ec:	mov	r1, r8
   152f0:	bl	10ecc <fputs_unlocked@plt>
   152f4:	cmp	r6, #9
   152f8:	bhi	15334 <__assert_fail@plt+0x41e0>
   152fc:	add	r0, pc, #0
   15300:	ldr	pc, [r0, r6, lsl #2]
   15304:	andeq	r5, r1, ip, lsr #6
   15308:	andeq	r5, r1, r0, asr #6
   1530c:	andeq	r5, r1, r0, ror r3
   15310:	muleq	r1, r8, r3
   15314:	andeq	r5, r1, r0, asr #7
   15318:	andeq	r5, r1, r8, ror #7
   1531c:	andeq	r5, r1, r0, lsl r4
   15320:	andeq	r5, r1, r8, asr #8
   15324:	andeq	r5, r1, r8, ror #9
   15328:	muleq	r1, r0, r4
   1532c:	sub	sp, fp, #24
   15330:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15334:	movw	r1, #32459	; 0x7ecb
   15338:	movt	r1, #1
   1533c:	b	15498 <__assert_fail@plt+0x4344>
   15340:	movw	r1, #32140	; 0x7d8c
   15344:	mov	r0, #0
   15348:	mov	r2, #5
   1534c:	movt	r1, #1
   15350:	bl	10f5c <dcgettext@plt>
   15354:	ldr	r3, [r7]
   15358:	mov	r2, r0
   1535c:	mov	r0, r8
   15360:	mov	r1, #1
   15364:	sub	sp, fp, #24
   15368:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1536c:	b	110c4 <__fprintf_chk@plt>
   15370:	movw	r1, #32156	; 0x7d9c
   15374:	mov	r0, #0
   15378:	mov	r2, #5
   1537c:	movt	r1, #1
   15380:	bl	10f5c <dcgettext@plt>
   15384:	mov	r2, r0
   15388:	ldr	r3, [r7]
   1538c:	ldr	r0, [r7, #4]
   15390:	str	r0, [sp]
   15394:	b	15484 <__assert_fail@plt+0x4330>
   15398:	movw	r1, #32179	; 0x7db3
   1539c:	mov	r0, #0
   153a0:	mov	r2, #5
   153a4:	movt	r1, #1
   153a8:	bl	10f5c <dcgettext@plt>
   153ac:	mov	r2, r0
   153b0:	ldr	r3, [r7]
   153b4:	ldmib	r7, {r0, r1}
   153b8:	stm	sp, {r0, r1}
   153bc:	b	15484 <__assert_fail@plt+0x4330>
   153c0:	movw	r1, #32207	; 0x7dcf
   153c4:	mov	r0, #0
   153c8:	mov	r2, #5
   153cc:	movt	r1, #1
   153d0:	bl	10f5c <dcgettext@plt>
   153d4:	ldr	r3, [r7]
   153d8:	mov	r2, r0
   153dc:	ldmib	r7, {r0, r1, r7}
   153e0:	stm	sp, {r0, r1, r7}
   153e4:	b	15484 <__assert_fail@plt+0x4330>
   153e8:	movw	r1, #32239	; 0x7def
   153ec:	mov	r0, #0
   153f0:	mov	r2, #5
   153f4:	movt	r1, #1
   153f8:	bl	10f5c <dcgettext@plt>
   153fc:	ldr	r3, [r7]
   15400:	mov	r2, r0
   15404:	ldmib	r7, {r0, r1, r6, r7}
   15408:	stm	sp, {r0, r1, r6, r7}
   1540c:	b	15484 <__assert_fail@plt+0x4330>
   15410:	movw	r1, #32275	; 0x7e13
   15414:	mov	r0, #0
   15418:	mov	r2, #5
   1541c:	movt	r1, #1
   15420:	bl	10f5c <dcgettext@plt>
   15424:	mov	r2, r0
   15428:	ldr	r3, [r7]
   1542c:	ldmib	r7, {r0, r1, r6}
   15430:	ldr	r5, [r7, #16]
   15434:	ldr	r7, [r7, #20]
   15438:	stm	sp, {r0, r1, r6}
   1543c:	str	r5, [sp, #12]
   15440:	str	r7, [sp, #16]
   15444:	b	15484 <__assert_fail@plt+0x4330>
   15448:	movw	r1, #32315	; 0x7e3b
   1544c:	mov	r0, #0
   15450:	mov	r2, #5
   15454:	movt	r1, #1
   15458:	bl	10f5c <dcgettext@plt>
   1545c:	mov	r2, r0
   15460:	ldr	r3, [r7]
   15464:	ldmib	r7, {r0, r1, r6}
   15468:	ldr	r5, [r7, #16]
   1546c:	ldr	r4, [r7, #20]
   15470:	ldr	r7, [r7, #24]
   15474:	stm	sp, {r0, r1, r6}
   15478:	str	r5, [sp, #12]
   1547c:	str	r4, [sp, #16]
   15480:	str	r7, [sp, #20]
   15484:	mov	r0, r8
   15488:	mov	r1, #1
   1548c:	b	15538 <__assert_fail@plt+0x43e4>
   15490:	movw	r1, #32407	; 0x7e97
   15494:	movt	r1, #1
   15498:	mov	r0, #0
   1549c:	mov	r2, #5
   154a0:	bl	10f5c <dcgettext@plt>
   154a4:	mov	ip, r0
   154a8:	ldr	r3, [r7]
   154ac:	ldr	r0, [r7, #4]
   154b0:	ldr	r1, [r7, #8]
   154b4:	ldr	r6, [r7, #12]
   154b8:	ldr	r5, [r7, #16]
   154bc:	ldr	r4, [r7, #20]
   154c0:	ldr	r2, [r7, #24]
   154c4:	ldr	lr, [r7, #28]
   154c8:	ldr	r7, [r7, #32]
   154cc:	stm	sp, {r0, r1, r6}
   154d0:	str	r5, [sp, #12]
   154d4:	str	r4, [sp, #16]
   154d8:	str	r2, [sp, #20]
   154dc:	str	lr, [sp, #24]
   154e0:	str	r7, [sp, #28]
   154e4:	b	1552c <__assert_fail@plt+0x43d8>
   154e8:	movw	r1, #32359	; 0x7e67
   154ec:	mov	r0, #0
   154f0:	mov	r2, #5
   154f4:	movt	r1, #1
   154f8:	bl	10f5c <dcgettext@plt>
   154fc:	mov	ip, r0
   15500:	ldr	r3, [r7]
   15504:	ldmib	r7, {r0, r1, r6}
   15508:	ldr	r5, [r7, #16]
   1550c:	ldr	r4, [r7, #20]
   15510:	ldr	r2, [r7, #24]
   15514:	ldr	r7, [r7, #28]
   15518:	stm	sp, {r0, r1, r6}
   1551c:	str	r5, [sp, #12]
   15520:	str	r4, [sp, #16]
   15524:	str	r2, [sp, #20]
   15528:	str	r7, [sp, #24]
   1552c:	mov	r0, r8
   15530:	mov	r1, #1
   15534:	mov	r2, ip
   15538:	bl	110c4 <__fprintf_chk@plt>
   1553c:	sub	sp, fp, #24
   15540:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15544:	push	{r4, sl, fp, lr}
   15548:	add	fp, sp, #8
   1554c:	sub	sp, sp, #8
   15550:	ldr	ip, [fp, #8]
   15554:	mov	lr, #0
   15558:	ldr	r4, [ip, lr, lsl #2]
   1555c:	add	lr, lr, #1
   15560:	cmp	r4, #0
   15564:	bne	15558 <__assert_fail@plt+0x4404>
   15568:	sub	r4, lr, #1
   1556c:	str	ip, [sp]
   15570:	str	r4, [sp, #4]
   15574:	bl	15210 <__assert_fail@plt+0x40bc>
   15578:	sub	sp, fp, #8
   1557c:	pop	{r4, sl, fp, pc}
   15580:	push	{fp, lr}
   15584:	mov	fp, sp
   15588:	sub	sp, sp, #48	; 0x30
   1558c:	ldr	ip, [fp, #8]
   15590:	ldr	lr, [ip]
   15594:	cmp	lr, #0
   15598:	str	lr, [sp, #8]
   1559c:	beq	15638 <__assert_fail@plt+0x44e4>
   155a0:	ldr	lr, [ip, #4]
   155a4:	cmp	lr, #0
   155a8:	str	lr, [sp, #12]
   155ac:	beq	15640 <__assert_fail@plt+0x44ec>
   155b0:	ldr	lr, [ip, #8]
   155b4:	cmp	lr, #0
   155b8:	str	lr, [sp, #16]
   155bc:	beq	15648 <__assert_fail@plt+0x44f4>
   155c0:	ldr	lr, [ip, #12]
   155c4:	cmp	lr, #0
   155c8:	str	lr, [sp, #20]
   155cc:	beq	15650 <__assert_fail@plt+0x44fc>
   155d0:	ldr	lr, [ip, #16]
   155d4:	cmp	lr, #0
   155d8:	str	lr, [sp, #24]
   155dc:	beq	15658 <__assert_fail@plt+0x4504>
   155e0:	ldr	lr, [ip, #20]
   155e4:	cmp	lr, #0
   155e8:	str	lr, [sp, #28]
   155ec:	beq	15660 <__assert_fail@plt+0x450c>
   155f0:	ldr	lr, [ip, #24]
   155f4:	cmp	lr, #0
   155f8:	str	lr, [sp, #32]
   155fc:	beq	15668 <__assert_fail@plt+0x4514>
   15600:	ldr	lr, [ip, #28]
   15604:	cmp	lr, #0
   15608:	str	lr, [sp, #36]	; 0x24
   1560c:	beq	15670 <__assert_fail@plt+0x451c>
   15610:	ldr	lr, [ip, #32]
   15614:	cmp	lr, #0
   15618:	str	lr, [sp, #40]	; 0x28
   1561c:	beq	15678 <__assert_fail@plt+0x4524>
   15620:	ldr	lr, [ip, #36]	; 0x24
   15624:	mov	ip, #10
   15628:	cmp	lr, #0
   1562c:	str	lr, [sp, #44]	; 0x2c
   15630:	movweq	ip, #9
   15634:	b	1567c <__assert_fail@plt+0x4528>
   15638:	mov	ip, #0
   1563c:	b	1567c <__assert_fail@plt+0x4528>
   15640:	mov	ip, #1
   15644:	b	1567c <__assert_fail@plt+0x4528>
   15648:	mov	ip, #2
   1564c:	b	1567c <__assert_fail@plt+0x4528>
   15650:	mov	ip, #3
   15654:	b	1567c <__assert_fail@plt+0x4528>
   15658:	mov	ip, #4
   1565c:	b	1567c <__assert_fail@plt+0x4528>
   15660:	mov	ip, #5
   15664:	b	1567c <__assert_fail@plt+0x4528>
   15668:	mov	ip, #6
   1566c:	b	1567c <__assert_fail@plt+0x4528>
   15670:	mov	ip, #7
   15674:	b	1567c <__assert_fail@plt+0x4528>
   15678:	mov	ip, #8
   1567c:	add	lr, sp, #8
   15680:	str	ip, [sp, #4]
   15684:	str	lr, [sp]
   15688:	bl	15210 <__assert_fail@plt+0x40bc>
   1568c:	mov	sp, fp
   15690:	pop	{fp, pc}
   15694:	push	{fp, lr}
   15698:	mov	fp, sp
   1569c:	sub	sp, sp, #56	; 0x38
   156a0:	add	ip, fp, #8
   156a4:	str	ip, [sp, #12]
   156a8:	ldr	lr, [fp, #8]
   156ac:	cmp	lr, #0
   156b0:	str	lr, [sp, #16]
   156b4:	beq	15750 <__assert_fail@plt+0x45fc>
   156b8:	ldr	lr, [ip, #4]
   156bc:	cmp	lr, #0
   156c0:	str	lr, [sp, #20]
   156c4:	beq	15758 <__assert_fail@plt+0x4604>
   156c8:	ldr	lr, [ip, #8]
   156cc:	cmp	lr, #0
   156d0:	str	lr, [sp, #24]
   156d4:	beq	15760 <__assert_fail@plt+0x460c>
   156d8:	ldr	lr, [ip, #12]
   156dc:	cmp	lr, #0
   156e0:	str	lr, [sp, #28]
   156e4:	beq	15768 <__assert_fail@plt+0x4614>
   156e8:	ldr	lr, [ip, #16]
   156ec:	cmp	lr, #0
   156f0:	str	lr, [sp, #32]
   156f4:	beq	15770 <__assert_fail@plt+0x461c>
   156f8:	ldr	lr, [ip, #20]
   156fc:	cmp	lr, #0
   15700:	str	lr, [sp, #36]	; 0x24
   15704:	beq	15778 <__assert_fail@plt+0x4624>
   15708:	ldr	lr, [ip, #24]
   1570c:	cmp	lr, #0
   15710:	str	lr, [sp, #40]	; 0x28
   15714:	beq	15780 <__assert_fail@plt+0x462c>
   15718:	ldr	lr, [ip, #28]
   1571c:	cmp	lr, #0
   15720:	str	lr, [sp, #44]	; 0x2c
   15724:	beq	15788 <__assert_fail@plt+0x4634>
   15728:	ldr	lr, [ip, #32]
   1572c:	cmp	lr, #0
   15730:	str	lr, [sp, #48]	; 0x30
   15734:	beq	15790 <__assert_fail@plt+0x463c>
   15738:	ldr	lr, [ip, #36]	; 0x24
   1573c:	mov	ip, #10
   15740:	cmp	lr, #0
   15744:	str	lr, [sp, #52]	; 0x34
   15748:	movweq	ip, #9
   1574c:	b	15794 <__assert_fail@plt+0x4640>
   15750:	mov	ip, #0
   15754:	b	15794 <__assert_fail@plt+0x4640>
   15758:	mov	ip, #1
   1575c:	b	15794 <__assert_fail@plt+0x4640>
   15760:	mov	ip, #2
   15764:	b	15794 <__assert_fail@plt+0x4640>
   15768:	mov	ip, #3
   1576c:	b	15794 <__assert_fail@plt+0x4640>
   15770:	mov	ip, #4
   15774:	b	15794 <__assert_fail@plt+0x4640>
   15778:	mov	ip, #5
   1577c:	b	15794 <__assert_fail@plt+0x4640>
   15780:	mov	ip, #6
   15784:	b	15794 <__assert_fail@plt+0x4640>
   15788:	mov	ip, #7
   1578c:	b	15794 <__assert_fail@plt+0x4640>
   15790:	mov	ip, #8
   15794:	add	lr, sp, #16
   15798:	str	ip, [sp, #4]
   1579c:	str	lr, [sp]
   157a0:	bl	15210 <__assert_fail@plt+0x40bc>
   157a4:	mov	sp, fp
   157a8:	pop	{fp, pc}
   157ac:	push	{fp, lr}
   157b0:	mov	fp, sp
   157b4:	movw	r0, #37220	; 0x9164
   157b8:	movt	r0, #2
   157bc:	ldr	r1, [r0]
   157c0:	movw	r0, #31031	; 0x7937
   157c4:	movt	r0, #1
   157c8:	bl	10ecc <fputs_unlocked@plt>
   157cc:	movw	r1, #32519	; 0x7f07
   157d0:	mov	r0, #0
   157d4:	mov	r2, #5
   157d8:	movt	r1, #1
   157dc:	bl	10f5c <dcgettext@plt>
   157e0:	movw	r2, #32539	; 0x7f1b
   157e4:	mov	r1, r0
   157e8:	mov	r0, #1
   157ec:	movt	r2, #1
   157f0:	bl	110ac <__printf_chk@plt>
   157f4:	movw	r1, #32561	; 0x7f31
   157f8:	mov	r0, #0
   157fc:	mov	r2, #5
   15800:	movt	r1, #1
   15804:	bl	10f5c <dcgettext@plt>
   15808:	movw	r2, #30436	; 0x76e4
   1580c:	movw	r3, #30840	; 0x7878
   15810:	mov	r1, r0
   15814:	mov	r0, #1
   15818:	movt	r2, #1
   1581c:	movt	r3, #1
   15820:	bl	110ac <__printf_chk@plt>
   15824:	movw	r1, #32581	; 0x7f45
   15828:	mov	r0, #0
   1582c:	mov	r2, #5
   15830:	movt	r1, #1
   15834:	bl	10f5c <dcgettext@plt>
   15838:	movw	r2, #32620	; 0x7f6c
   1583c:	mov	r1, r0
   15840:	mov	r0, #1
   15844:	movt	r2, #1
   15848:	pop	{fp, lr}
   1584c:	b	110ac <__printf_chk@plt>
   15850:	push	{r4, r5, r6, sl, fp, lr}
   15854:	add	fp, sp, #16
   15858:	mov	r4, r2
   1585c:	mov	r5, r1
   15860:	mov	r6, r0
   15864:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   15868:	cmp	r0, #0
   1586c:	popne	{r4, r5, r6, sl, fp, pc}
   15870:	cmp	r6, #0
   15874:	beq	15888 <__assert_fail@plt+0x4734>
   15878:	cmp	r5, #0
   1587c:	cmpne	r4, #0
   15880:	bne	15888 <__assert_fail@plt+0x4734>
   15884:	pop	{r4, r5, r6, sl, fp, pc}
   15888:	bl	15e04 <__assert_fail@plt+0x4cb0>
   1588c:	push	{r4, r5, r6, sl, fp, lr}
   15890:	add	fp, sp, #16
   15894:	mov	r4, r2
   15898:	mov	r5, r1
   1589c:	mov	r6, r0
   158a0:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   158a4:	cmp	r0, #0
   158a8:	popne	{r4, r5, r6, sl, fp, pc}
   158ac:	cmp	r6, #0
   158b0:	beq	158c4 <__assert_fail@plt+0x4770>
   158b4:	cmp	r5, #0
   158b8:	cmpne	r4, #0
   158bc:	bne	158c4 <__assert_fail@plt+0x4770>
   158c0:	pop	{r4, r5, r6, sl, fp, pc}
   158c4:	bl	15e04 <__assert_fail@plt+0x4cb0>
   158c8:	push	{fp, lr}
   158cc:	mov	fp, sp
   158d0:	bl	16b3c <__assert_fail@plt+0x59e8>
   158d4:	cmp	r0, #0
   158d8:	popne	{fp, pc}
   158dc:	bl	15e04 <__assert_fail@plt+0x4cb0>
   158e0:	push	{fp, lr}
   158e4:	mov	fp, sp
   158e8:	bl	16b3c <__assert_fail@plt+0x59e8>
   158ec:	cmp	r0, #0
   158f0:	popne	{fp, pc}
   158f4:	bl	15e04 <__assert_fail@plt+0x4cb0>
   158f8:	push	{fp, lr}
   158fc:	mov	fp, sp
   15900:	bl	16b3c <__assert_fail@plt+0x59e8>
   15904:	cmp	r0, #0
   15908:	popne	{fp, pc}
   1590c:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15910:	push	{r4, r5, fp, lr}
   15914:	add	fp, sp, #8
   15918:	mov	r4, r1
   1591c:	mov	r5, r0
   15920:	bl	16b6c <__assert_fail@plt+0x5a18>
   15924:	cmp	r0, #0
   15928:	popne	{r4, r5, fp, pc}
   1592c:	cmp	r5, #0
   15930:	beq	15940 <__assert_fail@plt+0x47ec>
   15934:	cmp	r4, #0
   15938:	bne	15940 <__assert_fail@plt+0x47ec>
   1593c:	pop	{r4, r5, fp, pc}
   15940:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15944:	push	{fp, lr}
   15948:	mov	fp, sp
   1594c:	cmp	r1, #0
   15950:	orreq	r1, r1, #1
   15954:	bl	16b6c <__assert_fail@plt+0x5a18>
   15958:	cmp	r0, #0
   1595c:	popne	{fp, pc}
   15960:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15964:	push	{fp, lr}
   15968:	mov	fp, sp
   1596c:	clz	r3, r2
   15970:	lsr	ip, r3, #5
   15974:	clz	r3, r1
   15978:	lsr	r3, r3, #5
   1597c:	orrs	r3, r3, ip
   15980:	movwne	r1, #1
   15984:	movwne	r2, #1
   15988:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   1598c:	cmp	r0, #0
   15990:	popne	{fp, pc}
   15994:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15998:	push	{fp, lr}
   1599c:	mov	fp, sp
   159a0:	mov	r2, r1
   159a4:	mov	r1, r0
   159a8:	mov	r0, #0
   159ac:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   159b0:	cmp	r0, #0
   159b4:	popne	{fp, pc}
   159b8:	bl	15e04 <__assert_fail@plt+0x4cb0>
   159bc:	push	{fp, lr}
   159c0:	mov	fp, sp
   159c4:	mov	r2, r1
   159c8:	mov	r1, r0
   159cc:	clz	r0, r2
   159d0:	clz	r3, r1
   159d4:	lsr	r0, r0, #5
   159d8:	lsr	r3, r3, #5
   159dc:	orrs	r0, r3, r0
   159e0:	mov	r0, #0
   159e4:	movwne	r1, #1
   159e8:	movwne	r2, #1
   159ec:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   159f0:	cmp	r0, #0
   159f4:	popne	{fp, pc}
   159f8:	bl	15e04 <__assert_fail@plt+0x4cb0>
   159fc:	push	{r4, r5, r6, sl, fp, lr}
   15a00:	add	fp, sp, #16
   15a04:	ldr	r5, [r1]
   15a08:	mov	r4, r1
   15a0c:	mov	r6, r0
   15a10:	cmp	r0, #0
   15a14:	beq	15a2c <__assert_fail@plt+0x48d8>
   15a18:	mov	r0, #1
   15a1c:	add	r0, r0, r5, lsr #1
   15a20:	adds	r5, r5, r0
   15a24:	bcc	15a34 <__assert_fail@plt+0x48e0>
   15a28:	b	15a70 <__assert_fail@plt+0x491c>
   15a2c:	cmp	r5, #0
   15a30:	movweq	r5, #64	; 0x40
   15a34:	mov	r0, r6
   15a38:	mov	r1, r5
   15a3c:	mov	r2, #1
   15a40:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   15a44:	cmp	r5, #0
   15a48:	mov	r1, r5
   15a4c:	movwne	r1, #1
   15a50:	cmp	r0, #0
   15a54:	bne	15a68 <__assert_fail@plt+0x4914>
   15a58:	clz	r2, r6
   15a5c:	lsr	r2, r2, #5
   15a60:	orrs	r1, r2, r1
   15a64:	bne	15a70 <__assert_fail@plt+0x491c>
   15a68:	str	r5, [r4]
   15a6c:	pop	{r4, r5, r6, sl, fp, pc}
   15a70:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15a74:	push	{r4, r5, r6, r7, fp, lr}
   15a78:	add	fp, sp, #16
   15a7c:	ldr	r5, [r1]
   15a80:	mov	r6, r2
   15a84:	mov	r4, r1
   15a88:	mov	r7, r0
   15a8c:	cmp	r0, #0
   15a90:	beq	15aa8 <__assert_fail@plt+0x4954>
   15a94:	mov	r0, #1
   15a98:	add	r0, r0, r5, lsr #1
   15a9c:	adds	r5, r5, r0
   15aa0:	bcc	15ac0 <__assert_fail@plt+0x496c>
   15aa4:	b	15af4 <__assert_fail@plt+0x49a0>
   15aa8:	cmp	r5, #0
   15aac:	bne	15ac0 <__assert_fail@plt+0x496c>
   15ab0:	mov	r0, #64	; 0x40
   15ab4:	cmp	r6, #64	; 0x40
   15ab8:	udiv	r5, r0, r6
   15abc:	addhi	r5, r5, #1
   15ac0:	mov	r0, r7
   15ac4:	mov	r1, r5
   15ac8:	mov	r2, r6
   15acc:	bl	16ce0 <__assert_fail@plt+0x5b8c>
   15ad0:	cmp	r0, #0
   15ad4:	bne	15aec <__assert_fail@plt+0x4998>
   15ad8:	cmp	r7, #0
   15adc:	beq	15af4 <__assert_fail@plt+0x49a0>
   15ae0:	cmp	r6, #0
   15ae4:	cmpne	r5, #0
   15ae8:	bne	15af4 <__assert_fail@plt+0x49a0>
   15aec:	str	r5, [r4]
   15af0:	pop	{r4, r5, r6, r7, fp, pc}
   15af4:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15af8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15afc:	add	fp, sp, #24
   15b00:	mov	r8, r1
   15b04:	ldr	r1, [r1]
   15b08:	mov	r5, r0
   15b0c:	add	r0, r1, r1, asr #1
   15b10:	cmp	r0, r1
   15b14:	mvnvs	r0, #-2147483648	; 0x80000000
   15b18:	cmp	r0, r3
   15b1c:	mov	r7, r0
   15b20:	movgt	r7, r3
   15b24:	cmn	r3, #1
   15b28:	movle	r7, r0
   15b2c:	ldr	r0, [fp, #8]
   15b30:	cmn	r0, #1
   15b34:	ble	15b5c <__assert_fail@plt+0x4a08>
   15b38:	cmp	r0, #0
   15b3c:	beq	15bb0 <__assert_fail@plt+0x4a5c>
   15b40:	cmn	r7, #1
   15b44:	ble	15b84 <__assert_fail@plt+0x4a30>
   15b48:	mvn	r4, #-2147483648	; 0x80000000
   15b4c:	udiv	r6, r4, r0
   15b50:	cmp	r6, r7
   15b54:	bge	15bb0 <__assert_fail@plt+0x4a5c>
   15b58:	b	15bc0 <__assert_fail@plt+0x4a6c>
   15b5c:	cmn	r7, #1
   15b60:	ble	15ba0 <__assert_fail@plt+0x4a4c>
   15b64:	cmn	r0, #1
   15b68:	beq	15bb0 <__assert_fail@plt+0x4a5c>
   15b6c:	mov	r6, #-2147483648	; 0x80000000
   15b70:	mvn	r4, #-2147483648	; 0x80000000
   15b74:	sdiv	r6, r6, r0
   15b78:	cmp	r6, r7
   15b7c:	bge	15bb0 <__assert_fail@plt+0x4a5c>
   15b80:	b	15bc0 <__assert_fail@plt+0x4a6c>
   15b84:	beq	15bb0 <__assert_fail@plt+0x4a5c>
   15b88:	mov	r6, #-2147483648	; 0x80000000
   15b8c:	mvn	r4, #-2147483648	; 0x80000000
   15b90:	sdiv	r6, r6, r7
   15b94:	cmp	r6, r0
   15b98:	bge	15bb0 <__assert_fail@plt+0x4a5c>
   15b9c:	b	15bc0 <__assert_fail@plt+0x4a6c>
   15ba0:	mvn	r4, #-2147483648	; 0x80000000
   15ba4:	sdiv	r6, r4, r0
   15ba8:	cmp	r7, r6
   15bac:	blt	15bc0 <__assert_fail@plt+0x4a6c>
   15bb0:	mul	r6, r7, r0
   15bb4:	mov	r4, #64	; 0x40
   15bb8:	cmp	r6, #63	; 0x3f
   15bbc:	bgt	15bc8 <__assert_fail@plt+0x4a74>
   15bc0:	sdiv	r7, r4, r0
   15bc4:	mul	r6, r7, r0
   15bc8:	cmp	r5, #0
   15bcc:	moveq	r4, #0
   15bd0:	streq	r4, [r8]
   15bd4:	sub	r4, r7, r1
   15bd8:	cmp	r4, r2
   15bdc:	bge	15c88 <__assert_fail@plt+0x4b34>
   15be0:	add	r7, r1, r2
   15be4:	mov	r6, #0
   15be8:	mov	r2, #0
   15bec:	cmp	r7, r3
   15bf0:	movwgt	r6, #1
   15bf4:	cmn	r3, #1
   15bf8:	movwgt	r2, #1
   15bfc:	cmp	r7, r1
   15c00:	bvs	15cbc <__assert_fail@plt+0x4b68>
   15c04:	ands	r1, r2, r6
   15c08:	bne	15cbc <__assert_fail@plt+0x4b68>
   15c0c:	cmn	r0, #1
   15c10:	ble	15c38 <__assert_fail@plt+0x4ae4>
   15c14:	cmp	r0, #0
   15c18:	beq	15c84 <__assert_fail@plt+0x4b30>
   15c1c:	cmn	r7, #1
   15c20:	ble	15c5c <__assert_fail@plt+0x4b08>
   15c24:	mvn	r1, #-2147483648	; 0x80000000
   15c28:	udiv	r1, r1, r0
   15c2c:	cmp	r1, r7
   15c30:	bge	15c84 <__assert_fail@plt+0x4b30>
   15c34:	b	15cbc <__assert_fail@plt+0x4b68>
   15c38:	cmn	r7, #1
   15c3c:	ble	15c74 <__assert_fail@plt+0x4b20>
   15c40:	cmn	r0, #1
   15c44:	beq	15c84 <__assert_fail@plt+0x4b30>
   15c48:	mov	r1, #-2147483648	; 0x80000000
   15c4c:	sdiv	r1, r1, r0
   15c50:	cmp	r1, r7
   15c54:	bge	15c84 <__assert_fail@plt+0x4b30>
   15c58:	b	15cbc <__assert_fail@plt+0x4b68>
   15c5c:	beq	15c84 <__assert_fail@plt+0x4b30>
   15c60:	mov	r1, #-2147483648	; 0x80000000
   15c64:	sdiv	r1, r1, r7
   15c68:	cmp	r1, r0
   15c6c:	bge	15c84 <__assert_fail@plt+0x4b30>
   15c70:	b	15cbc <__assert_fail@plt+0x4b68>
   15c74:	mvn	r1, #-2147483648	; 0x80000000
   15c78:	sdiv	r1, r1, r0
   15c7c:	cmp	r7, r1
   15c80:	blt	15cbc <__assert_fail@plt+0x4b68>
   15c84:	mul	r6, r7, r0
   15c88:	mov	r0, r5
   15c8c:	mov	r1, r6
   15c90:	bl	16b6c <__assert_fail@plt+0x5a18>
   15c94:	cmp	r6, #0
   15c98:	movwne	r6, #1
   15c9c:	cmp	r0, #0
   15ca0:	bne	15cb4 <__assert_fail@plt+0x4b60>
   15ca4:	clz	r1, r5
   15ca8:	lsr	r1, r1, #5
   15cac:	orrs	r1, r1, r6
   15cb0:	bne	15cbc <__assert_fail@plt+0x4b68>
   15cb4:	str	r7, [r8]
   15cb8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cbc:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15cc0:	push	{fp, lr}
   15cc4:	mov	fp, sp
   15cc8:	mov	r1, #1
   15ccc:	bl	16ae8 <__assert_fail@plt+0x5994>
   15cd0:	cmp	r0, #0
   15cd4:	popne	{fp, pc}
   15cd8:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15cdc:	push	{fp, lr}
   15ce0:	mov	fp, sp
   15ce4:	bl	16ae8 <__assert_fail@plt+0x5994>
   15ce8:	cmp	r0, #0
   15cec:	popne	{fp, pc}
   15cf0:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15cf4:	push	{fp, lr}
   15cf8:	mov	fp, sp
   15cfc:	mov	r1, #1
   15d00:	bl	16ae8 <__assert_fail@plt+0x5994>
   15d04:	cmp	r0, #0
   15d08:	popne	{fp, pc}
   15d0c:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15d10:	push	{fp, lr}
   15d14:	mov	fp, sp
   15d18:	bl	16ae8 <__assert_fail@plt+0x5994>
   15d1c:	cmp	r0, #0
   15d20:	popne	{fp, pc}
   15d24:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15d28:	push	{r4, r5, fp, lr}
   15d2c:	add	fp, sp, #8
   15d30:	mov	r5, r0
   15d34:	mov	r0, r1
   15d38:	mov	r4, r1
   15d3c:	bl	16b3c <__assert_fail@plt+0x59e8>
   15d40:	cmp	r0, #0
   15d44:	beq	15d58 <__assert_fail@plt+0x4c04>
   15d48:	mov	r1, r5
   15d4c:	mov	r2, r4
   15d50:	pop	{r4, r5, fp, lr}
   15d54:	b	10f2c <memcpy@plt>
   15d58:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15d5c:	push	{r4, r5, fp, lr}
   15d60:	add	fp, sp, #8
   15d64:	mov	r5, r0
   15d68:	mov	r0, r1
   15d6c:	mov	r4, r1
   15d70:	bl	16b3c <__assert_fail@plt+0x59e8>
   15d74:	cmp	r0, #0
   15d78:	beq	15d8c <__assert_fail@plt+0x4c38>
   15d7c:	mov	r1, r5
   15d80:	mov	r2, r4
   15d84:	pop	{r4, r5, fp, lr}
   15d88:	b	10f2c <memcpy@plt>
   15d8c:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15d90:	push	{r4, r5, fp, lr}
   15d94:	add	fp, sp, #8
   15d98:	mov	r5, r0
   15d9c:	add	r0, r1, #1
   15da0:	mov	r4, r1
   15da4:	bl	16b3c <__assert_fail@plt+0x59e8>
   15da8:	cmp	r0, #0
   15dac:	beq	15dc8 <__assert_fail@plt+0x4c74>
   15db0:	mov	r1, #0
   15db4:	mov	r2, r4
   15db8:	strb	r1, [r0, r4]
   15dbc:	mov	r1, r5
   15dc0:	pop	{r4, r5, fp, lr}
   15dc4:	b	10f2c <memcpy@plt>
   15dc8:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15dcc:	push	{r4, r5, fp, lr}
   15dd0:	add	fp, sp, #8
   15dd4:	mov	r4, r0
   15dd8:	bl	11070 <strlen@plt>
   15ddc:	add	r5, r0, #1
   15de0:	mov	r0, r5
   15de4:	bl	16b3c <__assert_fail@plt+0x59e8>
   15de8:	cmp	r0, #0
   15dec:	beq	15e00 <__assert_fail@plt+0x4cac>
   15df0:	mov	r1, r4
   15df4:	mov	r2, r5
   15df8:	pop	{r4, r5, fp, lr}
   15dfc:	b	10f2c <memcpy@plt>
   15e00:	bl	15e04 <__assert_fail@plt+0x4cb0>
   15e04:	push	{fp, lr}
   15e08:	mov	fp, sp
   15e0c:	movw	r0, #37120	; 0x9100
   15e10:	movw	r1, #32696	; 0x7fb8
   15e14:	mov	r2, #5
   15e18:	movt	r0, #2
   15e1c:	movt	r1, #1
   15e20:	ldr	r4, [r0]
   15e24:	mov	r0, #0
   15e28:	bl	10f5c <dcgettext@plt>
   15e2c:	movw	r2, #31622	; 0x7b86
   15e30:	mov	r3, r0
   15e34:	mov	r0, r4
   15e38:	mov	r1, #0
   15e3c:	movt	r2, #1
   15e40:	bl	10fd4 <error@plt>
   15e44:	bl	1113c <abort@plt>
   15e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e4c:	add	fp, sp, #28
   15e50:	sub	sp, sp, #44	; 0x2c
   15e54:	cmp	r2, #37	; 0x25
   15e58:	bcs	16ac8 <__assert_fail@plt+0x5974>
   15e5c:	ldr	sl, [fp, #8]
   15e60:	mov	r6, r2
   15e64:	mov	r7, r1
   15e68:	mov	r4, r0
   15e6c:	str	r3, [sp, #36]	; 0x24
   15e70:	bl	11088 <__errno_location@plt>
   15e74:	mov	r5, r0
   15e78:	mov	r0, #0
   15e7c:	str	r0, [r5]
   15e80:	bl	1104c <__ctype_b_loc@plt>
   15e84:	ldr	r1, [r0]
   15e88:	mov	r2, r4
   15e8c:	ldrb	r0, [r2], #1
   15e90:	add	r3, r1, r0, lsl #1
   15e94:	ldrb	r3, [r3, #1]
   15e98:	tst	r3, #32
   15e9c:	bne	15e8c <__assert_fail@plt+0x4d38>
   15ea0:	cmp	r7, #0
   15ea4:	sub	r9, fp, #32
   15ea8:	mov	r8, #4
   15eac:	movne	r9, r7
   15eb0:	cmp	r0, #45	; 0x2d
   15eb4:	beq	16abc <__assert_fail@plt+0x5968>
   15eb8:	mov	r0, r4
   15ebc:	mov	r1, r9
   15ec0:	mov	r2, r6
   15ec4:	mov	r3, #0
   15ec8:	bl	10f38 <__strtoull_internal@plt>
   15ecc:	mov	r7, r1
   15ed0:	ldr	r1, [r9]
   15ed4:	cmp	r1, r4
   15ed8:	beq	15f04 <__assert_fail@plt+0x4db0>
   15edc:	mov	r6, r0
   15ee0:	ldr	r0, [r5]
   15ee4:	cmp	r0, #0
   15ee8:	beq	15f40 <__assert_fail@plt+0x4dec>
   15eec:	cmp	r0, #34	; 0x22
   15ef0:	bne	16abc <__assert_fail@plt+0x5968>
   15ef4:	mov	r8, #1
   15ef8:	cmp	sl, #0
   15efc:	bne	15f4c <__assert_fail@plt+0x4df8>
   15f00:	b	16ab4 <__assert_fail@plt+0x5960>
   15f04:	cmp	sl, #0
   15f08:	beq	16abc <__assert_fail@plt+0x5968>
   15f0c:	mov	r5, r1
   15f10:	ldrb	r1, [r4]
   15f14:	cmp	r1, #0
   15f18:	beq	16abc <__assert_fail@plt+0x5968>
   15f1c:	mov	r0, sl
   15f20:	bl	1107c <strchr@plt>
   15f24:	cmp	r0, #0
   15f28:	beq	16abc <__assert_fail@plt+0x5968>
   15f2c:	mov	r1, r5
   15f30:	mov	r8, #0
   15f34:	mov	r6, #1
   15f38:	mov	r7, #0
   15f3c:	b	15f4c <__assert_fail@plt+0x4df8>
   15f40:	mov	r8, r0
   15f44:	cmp	sl, #0
   15f48:	beq	16ab4 <__assert_fail@plt+0x5960>
   15f4c:	ldrb	r4, [r1]
   15f50:	cmp	r4, #0
   15f54:	beq	16ab4 <__assert_fail@plt+0x5960>
   15f58:	str	r1, [sp, #32]
   15f5c:	mov	r0, sl
   15f60:	mov	r1, r4
   15f64:	bl	1107c <strchr@plt>
   15f68:	cmp	r0, #0
   15f6c:	beq	16234 <__assert_fail@plt+0x50e0>
   15f70:	sub	r0, r4, #69	; 0x45
   15f74:	mov	r1, #1
   15f78:	mov	r3, #0
   15f7c:	mov	r5, #1024	; 0x400
   15f80:	cmp	r0, #47	; 0x2f
   15f84:	str	r1, [sp, #28]
   15f88:	bhi	1608c <__assert_fail@plt+0x4f38>
   15f8c:	add	r1, pc, #0
   15f90:	ldr	pc, [r1, r0, lsl #2]
   15f94:	andeq	r6, r1, r4, asr r0
   15f98:	andeq	r6, r1, ip, lsl #1
   15f9c:	andeq	r6, r1, r4, asr r0
   15fa0:	andeq	r6, r1, ip, lsl #1
   15fa4:	andeq	r6, r1, ip, lsl #1
   15fa8:	andeq	r6, r1, ip, lsl #1
   15fac:	andeq	r6, r1, r4, asr r0
   15fb0:	andeq	r6, r1, ip, lsl #1
   15fb4:	andeq	r6, r1, r4, asr r0
   15fb8:	andeq	r6, r1, ip, lsl #1
   15fbc:	andeq	r6, r1, ip, lsl #1
   15fc0:	andeq	r6, r1, r4, asr r0
   15fc4:	andeq	r6, r1, ip, lsl #1
   15fc8:	andeq	r6, r1, ip, lsl #1
   15fcc:	andeq	r6, r1, ip, lsl #1
   15fd0:	andeq	r6, r1, r4, asr r0
   15fd4:	andeq	r6, r1, ip, lsl #1
   15fd8:	andeq	r6, r1, ip, lsl #1
   15fdc:	andeq	r6, r1, ip, lsl #1
   15fe0:	andeq	r6, r1, ip, lsl #1
   15fe4:	andeq	r6, r1, r4, asr r0
   15fe8:	andeq	r6, r1, r4, asr r0
   15fec:	andeq	r6, r1, ip, lsl #1
   15ff0:	andeq	r6, r1, ip, lsl #1
   15ff4:	andeq	r6, r1, ip, lsl #1
   15ff8:	andeq	r6, r1, ip, lsl #1
   15ffc:	andeq	r6, r1, ip, lsl #1
   16000:	andeq	r6, r1, ip, lsl #1
   16004:	andeq	r6, r1, ip, lsl #1
   16008:	andeq	r6, r1, ip, lsl #1
   1600c:	andeq	r6, r1, ip, lsl #1
   16010:	andeq	r6, r1, ip, lsl #1
   16014:	andeq	r6, r1, ip, lsl #1
   16018:	andeq	r6, r1, ip, lsl #1
   1601c:	andeq	r6, r1, r4, asr r0
   16020:	andeq	r6, r1, ip, lsl #1
   16024:	andeq	r6, r1, ip, lsl #1
   16028:	andeq	r6, r1, ip, lsl #1
   1602c:	andeq	r6, r1, r4, asr r0
   16030:	andeq	r6, r1, ip, lsl #1
   16034:	andeq	r6, r1, r4, asr r0
   16038:	andeq	r6, r1, ip, lsl #1
   1603c:	andeq	r6, r1, ip, lsl #1
   16040:	andeq	r6, r1, ip, lsl #1
   16044:	andeq	r6, r1, ip, lsl #1
   16048:	andeq	r6, r1, ip, lsl #1
   1604c:	andeq	r6, r1, ip, lsl #1
   16050:	andeq	r6, r1, r4, asr r0
   16054:	mov	r0, sl
   16058:	mov	r1, #48	; 0x30
   1605c:	bl	1107c <strchr@plt>
   16060:	cmp	r0, #0
   16064:	beq	16088 <__assert_fail@plt+0x4f34>
   16068:	ldr	r1, [sp, #32]
   1606c:	ldrb	r0, [r1, #1]
   16070:	cmp	r0, #66	; 0x42
   16074:	cmpne	r0, #68	; 0x44
   16078:	bne	16240 <__assert_fail@plt+0x50ec>
   1607c:	mov	r5, #1000	; 0x3e8
   16080:	mov	r0, #2
   16084:	str	r0, [sp, #28]
   16088:	mov	r3, #0
   1608c:	sub	r0, r4, #66	; 0x42
   16090:	cmp	r0, #53	; 0x35
   16094:	bhi	16234 <__assert_fail@plt+0x50e0>
   16098:	add	r1, pc, #0
   1609c:	ldr	pc, [r1, r0, lsl #2]
   160a0:			; <UNDEFINED> instruction: 0x000165bc
   160a4:	andeq	r6, r1, r4, lsr r2
   160a8:	andeq	r6, r1, r4, lsr r2
   160ac:	andeq	r6, r1, r4, ror #11
   160b0:	andeq	r6, r1, r4, lsr r2
   160b4:	andeq	r6, r1, r8, ror r1
   160b8:	andeq	r6, r1, r4, lsr r2
   160bc:	andeq	r6, r1, r4, lsr r2
   160c0:	andeq	r6, r1, r4, lsr r2
   160c4:	andeq	r6, r1, r4, ror #4
   160c8:	andeq	r6, r1, r4, lsr r2
   160cc:	andeq	r6, r1, ip, lsr #5
   160d0:	andeq	r6, r1, r4, lsr r2
   160d4:	andeq	r6, r1, r4, lsr r2
   160d8:	andeq	r6, r1, ip, lsr r7
   160dc:	andeq	r6, r1, r4, lsr r2
   160e0:	andeq	r6, r1, r4, lsr r2
   160e4:	andeq	r6, r1, r4, lsr r2
   160e8:	andeq	r6, r1, r8, lsr r3
   160ec:	andeq	r6, r1, r4, lsr r2
   160f0:	andeq	r6, r1, r4, lsr r2
   160f4:	andeq	r6, r1, r4, lsr r2
   160f8:	andeq	r6, r1, r4, lsr r2
   160fc:	andeq	r6, r1, r4, ror #16
   16100:	andeq	r6, r1, r0, lsr #8
   16104:	andeq	r6, r1, r4, lsr r2
   16108:	andeq	r6, r1, r4, lsr r2
   1610c:	andeq	r6, r1, r4, lsr r2
   16110:	andeq	r6, r1, r4, lsr r2
   16114:	andeq	r6, r1, r4, lsr r2
   16118:	andeq	r6, r1, r4, lsr r2
   1611c:	andeq	r6, r1, r4, lsr r2
   16120:	andeq	r6, r1, ip, lsr sl
   16124:	muleq	r1, r4, sl
   16128:	andeq	r6, r1, r4, lsr r2
   1612c:	andeq	r6, r1, r4, lsr r2
   16130:	andeq	r6, r1, r4, lsr r2
   16134:	andeq	r6, r1, r8, ror r1
   16138:	andeq	r6, r1, r4, lsr r2
   1613c:	andeq	r6, r1, r4, lsr r2
   16140:	andeq	r6, r1, r4, lsr r2
   16144:	andeq	r6, r1, r4, ror #4
   16148:	andeq	r6, r1, r4, lsr r2
   1614c:	andeq	r6, r1, ip, lsr #5
   16150:	andeq	r6, r1, r4, lsr r2
   16154:	andeq	r6, r1, r4, lsr r2
   16158:	andeq	r6, r1, r4, lsr r2
   1615c:	andeq	r6, r1, r4, lsr r2
   16160:	andeq	r6, r1, r4, lsr r2
   16164:	andeq	r6, r1, r4, lsr r2
   16168:	andeq	r6, r1, r8, lsr r3
   1616c:	andeq	r6, r1, r4, lsr r2
   16170:	andeq	r6, r1, r4, lsr r2
   16174:	andeq	r6, r1, r0, ror sl
   16178:	mvn	r0, #0
   1617c:	mvn	r1, #0
   16180:	mov	r2, r5
   16184:	mov	sl, r3
   16188:	bl	16e28 <__assert_fail@plt+0x5cd4>
   1618c:	subs	r3, r0, r6
   16190:	umull	r4, r2, r6, r5
   16194:	mov	lr, #0
   16198:	str	r1, [sp, #20]
   1619c:	sbcs	r3, r1, r7
   161a0:	movwcc	lr, #1
   161a4:	mla	ip, r6, sl, r2
   161a8:	mov	r2, r1
   161ac:	mov	r2, #0
   161b0:	cmp	lr, #0
   161b4:	mla	r7, r7, r5, ip
   161b8:	mvnne	r4, #0
   161bc:	mvnne	r7, #0
   161c0:	subs	r6, r0, r4
   161c4:	sbcs	r6, r1, r7
   161c8:	umull	r3, r6, r4, r5
   161cc:	movwcc	r2, #1
   161d0:	cmp	r2, #0
   161d4:	mvnne	r3, #0
   161d8:	cmp	r2, #0
   161dc:	str	r6, [sp, #16]
   161e0:	umull	r6, ip, r3, r5
   161e4:	mla	r1, r3, sl, ip
   161e8:	ldr	ip, [sp, #16]
   161ec:	str	r1, [sp, #12]
   161f0:	mla	r4, r4, sl, ip
   161f4:	mla	r4, r7, r5, r4
   161f8:	mvnne	r4, #0
   161fc:	subs	r0, r0, r3
   16200:	ldr	r0, [sp, #20]
   16204:	ldr	r7, [sp, #12]
   16208:	sbcs	r0, r0, r4
   1620c:	mov	r0, #0
   16210:	mla	r7, r4, r5, r7
   16214:	movwcc	r0, #1
   16218:	cmp	r0, #0
   1621c:	mov	r1, r0
   16220:	orr	r0, lr, r2
   16224:	mvnne	r7, #0
   16228:	mvnne	r6, #0
   1622c:	orr	r3, r0, r1
   16230:	b	16a94 <__assert_fail@plt+0x5940>
   16234:	ldr	r0, [sp, #36]	; 0x24
   16238:	orr	r8, r8, #2
   1623c:	b	16ab8 <__assert_fail@plt+0x5964>
   16240:	cmp	r0, #105	; 0x69
   16244:	mov	r3, #0
   16248:	bne	1608c <__assert_fail@plt+0x4f38>
   1624c:	ldrb	r0, [r1, #2]
   16250:	mov	r1, #1
   16254:	cmp	r0, #66	; 0x42
   16258:	movweq	r1, #3
   1625c:	str	r1, [sp, #28]
   16260:	b	1608c <__assert_fail@plt+0x4f38>
   16264:	mvn	r0, #0
   16268:	mvn	r1, #0
   1626c:	mov	r2, r5
   16270:	mov	r4, r3
   16274:	bl	16e28 <__assert_fail@plt+0x5cd4>
   16278:	subs	r0, r0, r6
   1627c:	mov	r2, #0
   16280:	sbcs	r0, r1, r7
   16284:	umull	r0, r1, r6, r5
   16288:	movwcc	r2, #1
   1628c:	cmp	r2, #0
   16290:	mla	r1, r6, r4, r1
   16294:	mov	r3, r2
   16298:	mvnne	r0, #0
   1629c:	mla	r7, r7, r5, r1
   162a0:	mvnne	r7, #0
   162a4:	mov	r6, r0
   162a8:	b	16a94 <__assert_fail@plt+0x5940>
   162ac:	mvn	r0, #0
   162b0:	mvn	r1, #0
   162b4:	mov	r2, r5
   162b8:	str	r3, [sp, #24]
   162bc:	bl	16e28 <__assert_fail@plt+0x5cd4>
   162c0:	subs	r3, r0, r6
   162c4:	mov	ip, r0
   162c8:	umull	r4, r0, r6, r5
   162cc:	mov	sl, #0
   162d0:	sbcs	r3, r1, r7
   162d4:	mov	r3, #0
   162d8:	movwcc	r3, #1
   162dc:	cmp	r3, #0
   162e0:	str	r0, [sp, #20]
   162e4:	ldr	r0, [sp, #24]
   162e8:	mvnne	r4, #0
   162ec:	cmp	r3, #0
   162f0:	umull	lr, r2, r4, r5
   162f4:	mla	r2, r4, r0, r2
   162f8:	str	r2, [sp, #16]
   162fc:	ldr	r2, [sp, #20]
   16300:	mla	r6, r6, r0, r2
   16304:	ldr	r0, [sp, #16]
   16308:	mla	r6, r7, r5, r6
   1630c:	mvnne	r6, #0
   16310:	mla	r7, r6, r5, r0
   16314:	subs	r0, ip, r4
   16318:	sbcs	r0, r1, r6
   1631c:	movwcc	sl, #1
   16320:	cmp	sl, #0
   16324:	orr	r3, r3, sl
   16328:	mvnne	lr, #0
   1632c:	mvnne	r7, #0
   16330:	mov	r6, lr
   16334:	b	16a94 <__assert_fail@plt+0x5940>
   16338:	mvn	r0, #0
   1633c:	mvn	r1, #0
   16340:	mov	r2, r5
   16344:	mov	sl, r3
   16348:	bl	16e28 <__assert_fail@plt+0x5cd4>
   1634c:	subs	r3, r0, r6
   16350:	mov	ip, r1
   16354:	umull	r2, lr, r6, r5
   16358:	str	r0, [sp, #20]
   1635c:	sbcs	r3, r1, r7
   16360:	mov	r1, #0
   16364:	str	ip, [sp, #16]
   16368:	movwcc	r1, #1
   1636c:	mla	r6, r6, sl, lr
   16370:	mov	lr, #0
   16374:	cmp	r1, #0
   16378:	mla	r7, r7, r5, r6
   1637c:	mvnne	r2, #0
   16380:	cmp	r1, #0
   16384:	umull	r3, r4, r2, r5
   16388:	mvnne	r7, #0
   1638c:	mla	r4, r2, sl, r4
   16390:	subs	r2, r0, r2
   16394:	sbcs	r2, ip, r7
   16398:	mla	r4, r7, r5, r4
   1639c:	mov	r2, #0
   163a0:	movwcc	lr, #1
   163a4:	cmp	lr, #0
   163a8:	mvnne	r3, #0
   163ac:	mvnne	r4, #0
   163b0:	subs	r7, r0, r3
   163b4:	mov	r0, r5
   163b8:	sbcs	r7, ip, r4
   163bc:	umull	r5, r7, r3, r5
   163c0:	movwcc	r2, #1
   163c4:	cmp	r2, #0
   163c8:	mla	r3, r3, sl, r7
   163cc:	mvnne	r5, #0
   163d0:	cmp	r2, #0
   163d4:	mla	r3, r4, r0, r3
   163d8:	umull	r6, ip, r5, r0
   163dc:	mvnne	r3, #0
   163e0:	mla	ip, r5, sl, ip
   163e4:	mla	r7, r3, r0, ip
   163e8:	ldr	r0, [sp, #20]
   163ec:	subs	r0, r0, r5
   163f0:	ldr	r0, [sp, #16]
   163f4:	sbcs	r0, r0, r3
   163f8:	mov	r0, #0
   163fc:	movwcc	r0, #1
   16400:	cmp	r0, #0
   16404:	mov	r3, r0
   16408:	orr	r0, r1, lr
   1640c:	orr	r0, r0, r2
   16410:	mvnne	r7, #0
   16414:	mvnne	r6, #0
   16418:	orr	r3, r0, r3
   1641c:	b	16a94 <__assert_fail@plt+0x5940>
   16420:	mvn	r0, #0
   16424:	mvn	r1, #0
   16428:	mov	r2, r5
   1642c:	mov	r4, r3
   16430:	str	r3, [sp, #24]
   16434:	bl	16e28 <__assert_fail@plt+0x5cd4>
   16438:	umull	r3, r2, r6, r5
   1643c:	mla	r2, r6, r4, r2
   16440:	subs	r6, r0, r6
   16444:	sbcs	r6, r1, r7
   16448:	mov	r6, #0
   1644c:	mla	ip, r7, r5, r2
   16450:	ldr	r2, [sp, #24]
   16454:	movwcc	r6, #1
   16458:	cmp	r6, #0
   1645c:	str	r6, [sp, #20]
   16460:	mov	r6, #0
   16464:	mvnne	r3, #0
   16468:	mvnne	ip, #0
   1646c:	subs	r4, r0, r3
   16470:	umull	r7, lr, r3, r5
   16474:	sbcs	r4, r1, ip
   16478:	movwcc	r6, #1
   1647c:	mla	r3, r3, r2, lr
   16480:	cmp	r6, #0
   16484:	str	r6, [sp, #16]
   16488:	mvnne	r7, #0
   1648c:	cmp	r6, #0
   16490:	umull	sl, r4, r7, r5
   16494:	mla	r4, r7, r2, r4
   16498:	mla	r2, ip, r5, r3
   1649c:	mvnne	r2, #0
   164a0:	subs	r3, r0, r7
   164a4:	mov	ip, #0
   164a8:	mla	r6, r2, r5, r4
   164ac:	sbcs	r2, r1, r2
   164b0:	mov	r4, r0
   164b4:	mov	r0, #0
   164b8:	movwcc	r0, #1
   164bc:	mov	r3, r4
   164c0:	cmp	r0, #0
   164c4:	str	r0, [sp, #12]
   164c8:	mov	r0, r1
   164cc:	str	r3, [sp, #4]
   164d0:	mvnne	sl, #0
   164d4:	mvnne	r6, #0
   164d8:	str	r0, [sp, #8]
   164dc:	subs	r2, r4, sl
   164e0:	ldr	r4, [sp, #24]
   164e4:	sbcs	r2, r1, r6
   164e8:	umull	r7, r2, sl, r5
   164ec:	movwcc	ip, #1
   164f0:	cmp	ip, #0
   164f4:	mvnne	r7, #0
   164f8:	mla	r2, sl, r4, r2
   164fc:	cmp	ip, #0
   16500:	mov	sl, #0
   16504:	umull	r1, lr, r7, r5
   16508:	mla	r2, r6, r5, r2
   1650c:	mvnne	r2, #0
   16510:	subs	r6, r3, r7
   16514:	mla	lr, r7, r4, lr
   16518:	mla	lr, r2, r5, lr
   1651c:	sbcs	r2, r0, r2
   16520:	mov	r2, #0
   16524:	movwcc	sl, #1
   16528:	cmp	sl, #0
   1652c:	mvnne	r1, #0
   16530:	mvnne	lr, #0
   16534:	subs	r6, r3, r1
   16538:	ldr	r3, [sp, #24]
   1653c:	sbcs	r6, r0, lr
   16540:	umull	r0, r7, r1, r5
   16544:	movwcc	r2, #1
   16548:	cmp	r2, #0
   1654c:	mvnne	r0, #0
   16550:	mla	r1, r1, r3, r7
   16554:	cmp	r2, #0
   16558:	umull	r6, r4, r0, r5
   1655c:	mla	r1, lr, r5, r1
   16560:	mvnne	r1, #0
   16564:	mla	r4, r0, r3, r4
   16568:	ldr	r3, [sp, #4]
   1656c:	mla	r7, r1, r5, r4
   16570:	ldr	r5, [sp, #16]
   16574:	subs	r0, r3, r0
   16578:	ldr	r0, [sp, #8]
   1657c:	sbcs	r0, r0, r1
   16580:	mov	r0, #0
   16584:	movwcc	r0, #1
   16588:	cmp	r0, #0
   1658c:	mov	r1, r0
   16590:	ldr	r0, [sp, #20]
   16594:	mvnne	r7, #0
   16598:	mvnne	r6, #0
   1659c:	orr	r0, r0, r5
   165a0:	ldr	r5, [sp, #12]
   165a4:	orr	r0, r0, r5
   165a8:	orr	r0, r0, ip
   165ac:	orr	r0, r0, sl
   165b0:	orr	r0, r0, r2
   165b4:	orr	r0, r0, r1
   165b8:	b	16a34 <__assert_fail@plt+0x58e0>
   165bc:	mov	r1, #0
   165c0:	lsl	r2, r7, #10
   165c4:	lsl	r0, r6, #10
   165c8:	lsr	r3, r7, #22
   165cc:	cmp	r1, r7, lsr #22
   165d0:	orr	r2, r2, r6, lsr #22
   165d4:	mvnne	r0, #0
   165d8:	movwne	r3, #1
   165dc:	cmp	r1, r7, lsr #22
   165e0:	b	16a60 <__assert_fail@plt+0x590c>
   165e4:	mvn	r0, #0
   165e8:	mvn	r1, #0
   165ec:	mov	r2, r5
   165f0:	mov	sl, r3
   165f4:	bl	16e28 <__assert_fail@plt+0x5cd4>
   165f8:	subs	r2, r0, r6
   165fc:	mov	ip, r0
   16600:	mov	r0, #0
   16604:	sbcs	r2, r1, r7
   16608:	umull	r4, r2, r6, r5
   1660c:	movwcc	r0, #1
   16610:	cmp	r0, #0
   16614:	mla	r2, r6, sl, r2
   16618:	str	r0, [sp, #20]
   1661c:	mvnne	r4, #0
   16620:	cmp	r0, #0
   16624:	mla	r2, r7, r5, r2
   16628:	mov	r0, #0
   1662c:	umull	lr, r3, r4, r5
   16630:	mvnne	r2, #0
   16634:	mla	r3, r4, sl, r3
   16638:	mla	r6, r2, r5, r3
   1663c:	subs	r3, ip, r4
   16640:	mov	r3, r1
   16644:	sbcs	r2, r1, r2
   16648:	str	r3, [sp, #8]
   1664c:	movwcc	r0, #1
   16650:	cmp	r0, #0
   16654:	str	r0, [sp, #16]
   16658:	mov	r0, ip
   1665c:	mvnne	lr, #0
   16660:	mvnne	r6, #0
   16664:	str	r0, [sp, #12]
   16668:	subs	r2, ip, lr
   1666c:	umull	r7, r4, lr, r5
   16670:	sbcs	r2, r1, r6
   16674:	mov	r2, #0
   16678:	movwcc	r2, #1
   1667c:	mla	r4, lr, sl, r4
   16680:	cmp	r2, #0
   16684:	mla	r6, r6, r5, r4
   16688:	mov	r4, #0
   1668c:	mvnne	r7, #0
   16690:	cmp	r2, #0
   16694:	umull	r1, ip, r7, r5
   16698:	mvnne	r6, #0
   1669c:	mla	ip, r7, sl, ip
   166a0:	subs	r7, r0, r7
   166a4:	sbcs	r7, r3, r6
   166a8:	mla	lr, r6, r5, ip
   166ac:	mov	ip, #0
   166b0:	movwcc	ip, #1
   166b4:	cmp	ip, #0
   166b8:	mvnne	r1, #0
   166bc:	mvnne	lr, #0
   166c0:	subs	r7, r0, r1
   166c4:	sbcs	r7, r3, lr
   166c8:	umull	r0, r7, r1, r5
   166cc:	movwcc	r4, #1
   166d0:	cmp	r4, #0
   166d4:	mla	r1, r1, sl, r7
   166d8:	mvnne	r0, #0
   166dc:	cmp	r4, #0
   166e0:	mla	r1, lr, r5, r1
   166e4:	umull	r6, r3, r0, r5
   166e8:	mvnne	r1, #0
   166ec:	mla	r3, r0, sl, r3
   166f0:	mla	r7, r1, r5, r3
   166f4:	ldr	r3, [sp, #12]
   166f8:	subs	r0, r3, r0
   166fc:	ldr	r0, [sp, #8]
   16700:	ldr	r3, [sp, #16]
   16704:	sbcs	r0, r0, r1
   16708:	mov	r0, #0
   1670c:	movwcc	r0, #1
   16710:	cmp	r0, #0
   16714:	mov	r1, r0
   16718:	ldr	r0, [sp, #20]
   1671c:	mvnne	r7, #0
   16720:	mvnne	r6, #0
   16724:	orr	r0, r0, r3
   16728:	orr	r0, r0, r2
   1672c:	orr	r0, r0, ip
   16730:	orr	r0, r0, r4
   16734:	orr	r3, r0, r1
   16738:	b	16a94 <__assert_fail@plt+0x5940>
   1673c:	mvn	r0, #0
   16740:	mvn	r1, #0
   16744:	mov	r2, r5
   16748:	mov	sl, r3
   1674c:	bl	16e28 <__assert_fail@plt+0x5cd4>
   16750:	umull	r3, r2, r6, r5
   16754:	mov	lr, r1
   16758:	mov	r1, r0
   1675c:	mla	r2, r6, sl, r2
   16760:	subs	r6, r0, r6
   16764:	mov	r0, #0
   16768:	sbcs	r6, lr, r7
   1676c:	mla	r2, r7, r5, r2
   16770:	movwcc	r0, #1
   16774:	cmp	r0, #0
   16778:	str	r0, [sp, #20]
   1677c:	mov	r0, r1
   16780:	mvnne	r3, #0
   16784:	mvnne	r2, #0
   16788:	str	r0, [sp, #16]
   1678c:	subs	r4, r1, r3
   16790:	umull	r7, ip, r3, r5
   16794:	sbcs	r4, lr, r2
   16798:	mov	r4, #0
   1679c:	movwcc	r4, #1
   167a0:	mla	r3, r3, sl, ip
   167a4:	mov	ip, #0
   167a8:	cmp	r4, #0
   167ac:	mla	r2, r2, r5, r3
   167b0:	mvnne	r7, #0
   167b4:	cmp	r4, #0
   167b8:	umull	r1, r6, r7, r5
   167bc:	mvnne	r2, #0
   167c0:	mla	r6, r7, sl, r6
   167c4:	mla	r3, r2, r5, r6
   167c8:	subs	r6, r0, r7
   167cc:	sbcs	r2, lr, r2
   167d0:	mov	r2, #0
   167d4:	movwcc	ip, #1
   167d8:	cmp	ip, #0
   167dc:	mvnne	r1, #0
   167e0:	mvnne	r3, #0
   167e4:	subs	r6, r0, r1
   167e8:	sbcs	r6, lr, r3
   167ec:	umull	r0, r6, r1, r5
   167f0:	movwcc	r2, #1
   167f4:	cmp	r2, #0
   167f8:	mvnne	r0, #0
   167fc:	cmp	r2, #0
   16800:	str	r6, [sp, #12]
   16804:	umull	r6, r7, r0, r5
   16808:	mla	r7, r0, sl, r7
   1680c:	str	r7, [sp, #8]
   16810:	ldr	r7, [sp, #12]
   16814:	mla	r1, r1, sl, r7
   16818:	mla	r1, r3, r5, r1
   1681c:	ldr	r3, [sp, #8]
   16820:	mvnne	r1, #0
   16824:	mla	r7, r1, r5, r3
   16828:	ldr	r3, [sp, #16]
   1682c:	subs	r0, r3, r0
   16830:	sbcs	r0, lr, r1
   16834:	mov	r0, #0
   16838:	movwcc	r0, #1
   1683c:	cmp	r0, #0
   16840:	mov	r1, r0
   16844:	ldr	r0, [sp, #20]
   16848:	mvnne	r7, #0
   1684c:	mvnne	r6, #0
   16850:	orr	r0, r0, r4
   16854:	orr	r0, r0, ip
   16858:	orr	r0, r0, r2
   1685c:	orr	r3, r0, r1
   16860:	b	16a94 <__assert_fail@plt+0x5940>
   16864:	mvn	r0, #0
   16868:	mvn	r1, #0
   1686c:	mov	r2, r5
   16870:	mov	sl, r3
   16874:	bl	16e28 <__assert_fail@plt+0x5cd4>
   16878:	mov	lr, r0
   1687c:	subs	r0, r0, r6
   16880:	mov	r2, #0
   16884:	mov	ip, r1
   16888:	str	sl, [sp, #24]
   1688c:	sbcs	r0, r1, r7
   16890:	umull	r3, r1, r6, r5
   16894:	str	lr, [sp, #4]
   16898:	movwcc	r2, #1
   1689c:	cmp	r2, #0
   168a0:	mla	r6, r6, sl, r1
   168a4:	mov	r1, #0
   168a8:	str	r2, [sp, #20]
   168ac:	mvnne	r3, #0
   168b0:	cmp	r2, #0
   168b4:	mla	r7, r7, r5, r6
   168b8:	mov	r2, #0
   168bc:	umull	r0, r4, r3, r5
   168c0:	mvnne	r7, #0
   168c4:	mla	r4, r3, sl, r4
   168c8:	subs	r3, lr, r3
   168cc:	sbcs	r3, ip, r7
   168d0:	mla	r4, r7, r5, r4
   168d4:	movwcc	r1, #1
   168d8:	cmp	r1, #0
   168dc:	str	r1, [sp, #16]
   168e0:	mvnne	r0, #0
   168e4:	mvnne	r4, #0
   168e8:	subs	r3, lr, r0
   168ec:	sbcs	r3, ip, r4
   168f0:	umull	r6, r3, r0, r5
   168f4:	movwcc	r2, #1
   168f8:	cmp	r2, #0
   168fc:	mla	r0, r0, sl, r3
   16900:	str	r2, [sp, #12]
   16904:	mvnne	r6, #0
   16908:	cmp	r2, #0
   1690c:	mla	r0, r4, r5, r0
   16910:	ldr	r4, [sp, #24]
   16914:	umull	r1, r7, r6, r5
   16918:	mvnne	r0, #0
   1691c:	subs	r3, lr, r6
   16920:	mov	r3, ip
   16924:	str	r3, [sp]
   16928:	mla	r7, r6, sl, r7
   1692c:	mla	r7, r0, r5, r7
   16930:	sbcs	r0, ip, r0
   16934:	mov	r0, #0
   16938:	movwcc	r0, #1
   1693c:	cmp	r0, #0
   16940:	str	r0, [sp, #8]
   16944:	mvnne	r1, #0
   16948:	mvnne	r7, #0
   1694c:	subs	r0, lr, r1
   16950:	sbcs	r0, ip, r7
   16954:	mov	ip, #0
   16958:	umull	r6, r0, r1, r5
   1695c:	movwcc	ip, #1
   16960:	cmp	ip, #0
   16964:	mla	r1, r1, r4, r0
   16968:	mov	r0, lr
   1696c:	mvnne	r6, #0
   16970:	cmp	ip, #0
   16974:	mla	r1, r7, r5, r1
   16978:	umull	r2, sl, r6, r5
   1697c:	mvnne	r1, #0
   16980:	mla	sl, r6, r4, sl
   16984:	subs	r6, lr, r6
   16988:	mov	lr, #0
   1698c:	mla	r7, r1, r5, sl
   16990:	sbcs	r1, r3, r1
   16994:	ldr	r1, [sp, #24]
   16998:	movwcc	lr, #1
   1699c:	cmp	lr, #0
   169a0:	mvnne	r2, #0
   169a4:	mvnne	r7, #0
   169a8:	subs	r6, r0, r2
   169ac:	umull	r0, sl, r2, r5
   169b0:	sbcs	r6, r3, r7
   169b4:	mov	r3, #0
   169b8:	movwcc	r3, #1
   169bc:	mla	r2, r2, r1, sl
   169c0:	cmp	r3, #0
   169c4:	mla	r2, r7, r5, r2
   169c8:	mvnne	r0, #0
   169cc:	cmp	r3, #0
   169d0:	umull	r6, r4, r0, r5
   169d4:	mvnne	r2, #0
   169d8:	mla	r4, r0, r1, r4
   169dc:	ldr	r1, [sp, #4]
   169e0:	mla	r7, r2, r5, r4
   169e4:	ldr	r5, [sp, #16]
   169e8:	subs	r0, r1, r0
   169ec:	ldr	r0, [sp]
   169f0:	sbcs	r0, r0, r2
   169f4:	mov	r0, #0
   169f8:	movwcc	r0, #1
   169fc:	cmp	r0, #0
   16a00:	mov	r2, r0
   16a04:	ldr	r0, [sp, #20]
   16a08:	mvnne	r7, #0
   16a0c:	mvnne	r6, #0
   16a10:	orr	r0, r0, r5
   16a14:	ldr	r5, [sp, #12]
   16a18:	orr	r0, r0, r5
   16a1c:	ldr	r5, [sp, #8]
   16a20:	orr	r0, r0, r5
   16a24:	orr	r0, r0, ip
   16a28:	orr	r0, r0, lr
   16a2c:	orr	r0, r0, r3
   16a30:	orr	r0, r0, r2
   16a34:	and	r3, r0, #1
   16a38:	b	16a94 <__assert_fail@plt+0x5940>
   16a3c:	mov	r1, #0
   16a40:	lsl	r2, r7, #9
   16a44:	lsl	r0, r6, #9
   16a48:	lsr	r3, r7, #23
   16a4c:	cmp	r1, r7, lsr #23
   16a50:	orr	r2, r2, r6, lsr #23
   16a54:	mvnne	r0, #0
   16a58:	movwne	r3, #1
   16a5c:	cmp	r1, r7, lsr #23
   16a60:	mvnne	r2, #0
   16a64:	mov	r6, r0
   16a68:	mov	r7, r2
   16a6c:	b	16a94 <__assert_fail@plt+0x5940>
   16a70:	lsl	r1, r7, #1
   16a74:	cmp	r7, #0
   16a78:	lsl	r0, r6, #1
   16a7c:	lsr	r3, r7, #31
   16a80:	orr	r1, r1, r6, lsr #31
   16a84:	mvnmi	r0, #0
   16a88:	mvnmi	r1, #0
   16a8c:	mov	r6, r0
   16a90:	mov	r7, r1
   16a94:	ldr	r1, [sp, #32]
   16a98:	ldr	r2, [sp, #28]
   16a9c:	orr	r8, r3, r8
   16aa0:	add	r0, r1, r2
   16aa4:	str	r0, [r9]
   16aa8:	ldrb	r0, [r1, r2]
   16aac:	cmp	r0, #0
   16ab0:	orrne	r8, r8, #2
   16ab4:	ldr	r0, [sp, #36]	; 0x24
   16ab8:	strd	r6, [r0]
   16abc:	mov	r0, r8
   16ac0:	sub	sp, fp, #28
   16ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ac8:	movw	r0, #32713	; 0x7fc9
   16acc:	movw	r1, #32751	; 0x7fef
   16ad0:	movw	r3, #32767	; 0x7fff
   16ad4:	mov	r2, #85	; 0x55
   16ad8:	movt	r0, #1
   16adc:	movt	r1, #1
   16ae0:	movt	r3, #1
   16ae4:	bl	11154 <__assert_fail@plt>
   16ae8:	clz	r2, r1
   16aec:	clz	r3, r0
   16af0:	lsr	r2, r2, #5
   16af4:	lsr	r3, r3, #5
   16af8:	orrs	r2, r3, r2
   16afc:	movwne	r1, #1
   16b00:	movwne	r0, #1
   16b04:	cmp	r1, #0
   16b08:	beq	16b38 <__assert_fail@plt+0x59e4>
   16b0c:	mvn	r2, #-2147483648	; 0x80000000
   16b10:	udiv	r2, r2, r1
   16b14:	cmp	r2, r0
   16b18:	bcs	16b38 <__assert_fail@plt+0x59e4>
   16b1c:	push	{fp, lr}
   16b20:	mov	fp, sp
   16b24:	bl	11088 <__errno_location@plt>
   16b28:	mov	r1, #12
   16b2c:	str	r1, [r0]
   16b30:	mov	r0, #0
   16b34:	pop	{fp, pc}
   16b38:	b	10ec0 <calloc@plt>
   16b3c:	cmp	r0, #0
   16b40:	movweq	r0, #1
   16b44:	cmn	r0, #1
   16b48:	ble	16b50 <__assert_fail@plt+0x59fc>
   16b4c:	b	10ff8 <malloc@plt>
   16b50:	push	{fp, lr}
   16b54:	mov	fp, sp
   16b58:	bl	11088 <__errno_location@plt>
   16b5c:	mov	r1, #12
   16b60:	str	r1, [r0]
   16b64:	mov	r0, #0
   16b68:	pop	{fp, pc}
   16b6c:	push	{fp, lr}
   16b70:	mov	fp, sp
   16b74:	cmp	r0, #0
   16b78:	beq	16b94 <__assert_fail@plt+0x5a40>
   16b7c:	cmp	r1, #0
   16b80:	beq	16ba0 <__assert_fail@plt+0x5a4c>
   16b84:	cmn	r1, #1
   16b88:	ble	16bac <__assert_fail@plt+0x5a58>
   16b8c:	pop	{fp, lr}
   16b90:	b	10f74 <realloc@plt>
   16b94:	mov	r0, r1
   16b98:	pop	{fp, lr}
   16b9c:	b	16b3c <__assert_fail@plt+0x59e8>
   16ba0:	bl	12eb0 <__assert_fail@plt+0x1d5c>
   16ba4:	mov	r0, #0
   16ba8:	pop	{fp, pc}
   16bac:	bl	11088 <__errno_location@plt>
   16bb0:	mov	r1, #12
   16bb4:	str	r1, [r0]
   16bb8:	mov	r0, #0
   16bbc:	pop	{fp, pc}
   16bc0:	push	{r4, r5, r6, sl, fp, lr}
   16bc4:	add	fp, sp, #16
   16bc8:	mov	r4, r0
   16bcc:	bl	10fbc <__fpending@plt>
   16bd0:	ldr	r6, [r4]
   16bd4:	mov	r5, r0
   16bd8:	mov	r0, r4
   16bdc:	bl	12db8 <__assert_fail@plt+0x1c64>
   16be0:	tst	r6, #32
   16be4:	bne	16c1c <__assert_fail@plt+0x5ac8>
   16be8:	cmp	r0, #0
   16bec:	mov	r4, r0
   16bf0:	mvnne	r4, #0
   16bf4:	cmp	r5, #0
   16bf8:	bne	16c28 <__assert_fail@plt+0x5ad4>
   16bfc:	cmp	r0, #0
   16c00:	beq	16c28 <__assert_fail@plt+0x5ad4>
   16c04:	bl	11088 <__errno_location@plt>
   16c08:	ldr	r0, [r0]
   16c0c:	subs	r4, r0, #9
   16c10:	mvnne	r4, #0
   16c14:	mov	r0, r4
   16c18:	pop	{r4, r5, r6, sl, fp, pc}
   16c1c:	mvn	r4, #0
   16c20:	cmp	r0, #0
   16c24:	beq	16c30 <__assert_fail@plt+0x5adc>
   16c28:	mov	r0, r4
   16c2c:	pop	{r4, r5, r6, sl, fp, pc}
   16c30:	bl	11088 <__errno_location@plt>
   16c34:	mov	r1, #0
   16c38:	str	r1, [r0]
   16c3c:	mov	r0, r4
   16c40:	pop	{r4, r5, r6, sl, fp, pc}
   16c44:	push	{fp, lr}
   16c48:	mov	fp, sp
   16c4c:	mov	r0, #14
   16c50:	bl	11118 <nl_langinfo@plt>
   16c54:	movw	r1, #31032	; 0x7938
   16c58:	cmp	r0, #0
   16c5c:	movt	r1, #1
   16c60:	movne	r1, r0
   16c64:	movw	r0, #32846	; 0x804e
   16c68:	ldrb	r2, [r1]
   16c6c:	movt	r0, #1
   16c70:	cmp	r2, #0
   16c74:	movne	r0, r1
   16c78:	pop	{fp, pc}
   16c7c:	push	{r4, r5, r6, r7, fp, lr}
   16c80:	add	fp, sp, #16
   16c84:	sub	sp, sp, #8
   16c88:	cmp	r0, #0
   16c8c:	add	r5, sp, #4
   16c90:	mov	r7, r2
   16c94:	mov	r4, r1
   16c98:	movne	r5, r0
   16c9c:	mov	r0, r5
   16ca0:	bl	10fc8 <mbrtowc@plt>
   16ca4:	mov	r6, r0
   16ca8:	cmp	r7, #0
   16cac:	beq	16cd4 <__assert_fail@plt+0x5b80>
   16cb0:	cmn	r6, #2
   16cb4:	bcc	16cd4 <__assert_fail@plt+0x5b80>
   16cb8:	mov	r0, #0
   16cbc:	bl	16d1c <__assert_fail@plt+0x5bc8>
   16cc0:	cmp	r0, #0
   16cc4:	bne	16cd4 <__assert_fail@plt+0x5b80>
   16cc8:	ldrb	r0, [r4]
   16ccc:	mov	r6, #1
   16cd0:	str	r0, [r5]
   16cd4:	mov	r0, r6
   16cd8:	sub	sp, fp, #16
   16cdc:	pop	{r4, r5, r6, r7, fp, pc}
   16ce0:	cmp	r2, #0
   16ce4:	beq	16d14 <__assert_fail@plt+0x5bc0>
   16ce8:	mvn	r3, #0
   16cec:	udiv	r3, r3, r2
   16cf0:	cmp	r3, r1
   16cf4:	bcs	16d14 <__assert_fail@plt+0x5bc0>
   16cf8:	push	{fp, lr}
   16cfc:	mov	fp, sp
   16d00:	bl	11088 <__errno_location@plt>
   16d04:	mov	r1, #12
   16d08:	str	r1, [r0]
   16d0c:	mov	r0, #0
   16d10:	pop	{fp, pc}
   16d14:	mul	r1, r2, r1
   16d18:	b	16b6c <__assert_fail@plt+0x5a18>
   16d1c:	push	{r4, sl, fp, lr}
   16d20:	add	fp, sp, #8
   16d24:	sub	sp, sp, #264	; 0x108
   16d28:	add	r1, sp, #7
   16d2c:	movw	r2, #257	; 0x101
   16d30:	bl	16d88 <__assert_fail@plt+0x5c34>
   16d34:	mov	r4, #0
   16d38:	cmp	r0, #0
   16d3c:	bne	16d7c <__assert_fail@plt+0x5c28>
   16d40:	movw	r1, #32852	; 0x8054
   16d44:	add	r0, sp, #7
   16d48:	mov	r2, #2
   16d4c:	movt	r1, #1
   16d50:	bl	11064 <bcmp@plt>
   16d54:	cmp	r0, #0
   16d58:	beq	16d7c <__assert_fail@plt+0x5c28>
   16d5c:	movw	r1, #32854	; 0x8056
   16d60:	add	r0, sp, #7
   16d64:	mov	r2, #6
   16d68:	movt	r1, #1
   16d6c:	bl	11064 <bcmp@plt>
   16d70:	cmp	r0, #0
   16d74:	mov	r4, r0
   16d78:	movwne	r4, #1
   16d7c:	mov	r0, r4
   16d80:	sub	sp, fp, #8
   16d84:	pop	{r4, sl, fp, pc}
   16d88:	push	{r4, r5, r6, r7, fp, lr}
   16d8c:	add	fp, sp, #16
   16d90:	mov	r4, r1
   16d94:	mov	r1, #0
   16d98:	mov	r6, r2
   16d9c:	bl	11100 <setlocale@plt>
   16da0:	cmp	r0, #0
   16da4:	beq	16dd4 <__assert_fail@plt+0x5c80>
   16da8:	mov	r7, r0
   16dac:	bl	11070 <strlen@plt>
   16db0:	cmp	r0, r6
   16db4:	bcs	16df0 <__assert_fail@plt+0x5c9c>
   16db8:	add	r2, r0, #1
   16dbc:	mov	r0, r4
   16dc0:	mov	r1, r7
   16dc4:	bl	10f2c <memcpy@plt>
   16dc8:	mov	r5, #0
   16dcc:	mov	r0, r5
   16dd0:	pop	{r4, r5, r6, r7, fp, pc}
   16dd4:	mov	r5, #22
   16dd8:	cmp	r6, #0
   16ddc:	beq	16e18 <__assert_fail@plt+0x5cc4>
   16de0:	mov	r0, #0
   16de4:	strb	r0, [r4]
   16de8:	mov	r0, r5
   16dec:	pop	{r4, r5, r6, r7, fp, pc}
   16df0:	mov	r5, #34	; 0x22
   16df4:	cmp	r6, #0
   16df8:	beq	16e18 <__assert_fail@plt+0x5cc4>
   16dfc:	sub	r6, r6, #1
   16e00:	mov	r0, r4
   16e04:	mov	r1, r7
   16e08:	mov	r2, r6
   16e0c:	bl	10f2c <memcpy@plt>
   16e10:	mov	r0, #0
   16e14:	strb	r0, [r4, r6]
   16e18:	mov	r0, r5
   16e1c:	pop	{r4, r5, r6, r7, fp, pc}
   16e20:	mov	r1, #0
   16e24:	b	11100 <setlocale@plt>
   16e28:	cmp	r3, #0
   16e2c:	cmpeq	r2, #0
   16e30:	bne	16e48 <__assert_fail@plt+0x5cf4>
   16e34:	cmp	r1, #0
   16e38:	cmpeq	r0, #0
   16e3c:	mvnne	r1, #0
   16e40:	mvnne	r0, #0
   16e44:	b	16e64 <__assert_fail@plt+0x5d10>
   16e48:	sub	sp, sp, #8
   16e4c:	push	{sp, lr}
   16e50:	bl	16e74 <__assert_fail@plt+0x5d20>
   16e54:	ldr	lr, [sp, #4]
   16e58:	add	sp, sp, #8
   16e5c:	pop	{r2, r3}
   16e60:	bx	lr
   16e64:	push	{r1, lr}
   16e68:	mov	r0, #8
   16e6c:	bl	10ed8 <raise@plt>
   16e70:	pop	{r1, pc}
   16e74:	cmp	r1, r3
   16e78:	cmpeq	r0, r2
   16e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e80:	mov	r4, r0
   16e84:	movcc	r0, #0
   16e88:	mov	r5, r1
   16e8c:	ldr	lr, [sp, #36]	; 0x24
   16e90:	movcc	r1, r0
   16e94:	bcc	16f90 <__assert_fail@plt+0x5e3c>
   16e98:	cmp	r3, #0
   16e9c:	clzeq	ip, r2
   16ea0:	clzne	ip, r3
   16ea4:	addeq	ip, ip, #32
   16ea8:	cmp	r5, #0
   16eac:	clzeq	r1, r4
   16eb0:	addeq	r1, r1, #32
   16eb4:	clzne	r1, r5
   16eb8:	sub	ip, ip, r1
   16ebc:	sub	sl, ip, #32
   16ec0:	lsl	r9, r3, ip
   16ec4:	rsb	fp, ip, #32
   16ec8:	orr	r9, r9, r2, lsl sl
   16ecc:	orr	r9, r9, r2, lsr fp
   16ed0:	lsl	r8, r2, ip
   16ed4:	cmp	r5, r9
   16ed8:	cmpeq	r4, r8
   16edc:	movcc	r0, #0
   16ee0:	movcc	r1, r0
   16ee4:	bcc	16f00 <__assert_fail@plt+0x5dac>
   16ee8:	mov	r0, #1
   16eec:	subs	r4, r4, r8
   16ef0:	lsl	r1, r0, sl
   16ef4:	orr	r1, r1, r0, lsr fp
   16ef8:	lsl	r0, r0, ip
   16efc:	sbc	r5, r5, r9
   16f00:	cmp	ip, #0
   16f04:	beq	16f90 <__assert_fail@plt+0x5e3c>
   16f08:	lsr	r6, r8, #1
   16f0c:	orr	r6, r6, r9, lsl #31
   16f10:	lsr	r7, r9, #1
   16f14:	mov	r2, ip
   16f18:	b	16f3c <__assert_fail@plt+0x5de8>
   16f1c:	subs	r3, r4, r6
   16f20:	sbc	r8, r5, r7
   16f24:	adds	r3, r3, r3
   16f28:	adc	r8, r8, r8
   16f2c:	adds	r4, r3, #1
   16f30:	adc	r5, r8, #0
   16f34:	subs	r2, r2, #1
   16f38:	beq	16f58 <__assert_fail@plt+0x5e04>
   16f3c:	cmp	r5, r7
   16f40:	cmpeq	r4, r6
   16f44:	bcs	16f1c <__assert_fail@plt+0x5dc8>
   16f48:	adds	r4, r4, r4
   16f4c:	adc	r5, r5, r5
   16f50:	subs	r2, r2, #1
   16f54:	bne	16f3c <__assert_fail@plt+0x5de8>
   16f58:	lsr	r3, r4, ip
   16f5c:	orr	r3, r3, r5, lsl fp
   16f60:	lsr	r2, r5, ip
   16f64:	orr	r3, r3, r5, lsr sl
   16f68:	adds	r0, r0, r4
   16f6c:	mov	r4, r3
   16f70:	lsl	r3, r2, ip
   16f74:	orr	r3, r3, r4, lsl sl
   16f78:	lsl	ip, r4, ip
   16f7c:	orr	r3, r3, r4, lsr fp
   16f80:	adc	r1, r1, r5
   16f84:	subs	r0, r0, ip
   16f88:	mov	r5, r2
   16f8c:	sbc	r1, r1, r3
   16f90:	cmp	lr, #0
   16f94:	strdne	r4, [lr]
   16f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fa0:	mov	r7, r0
   16fa4:	ldr	r6, [pc, #72]	; 16ff4 <__assert_fail@plt+0x5ea0>
   16fa8:	ldr	r5, [pc, #72]	; 16ff8 <__assert_fail@plt+0x5ea4>
   16fac:	add	r6, pc, r6
   16fb0:	add	r5, pc, r5
   16fb4:	sub	r6, r6, r5
   16fb8:	mov	r8, r1
   16fbc:	mov	r9, r2
   16fc0:	bl	10ea0 <calloc@plt-0x20>
   16fc4:	asrs	r6, r6, #2
   16fc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fcc:	mov	r4, #0
   16fd0:	add	r4, r4, #1
   16fd4:	ldr	r3, [r5], #4
   16fd8:	mov	r2, r9
   16fdc:	mov	r1, r8
   16fe0:	mov	r0, r7
   16fe4:	blx	r3
   16fe8:	cmp	r6, r4
   16fec:	bne	16fd0 <__assert_fail@plt+0x5e7c>
   16ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ff4:	andeq	r1, r1, r8, asr pc
   16ff8:	andeq	r1, r1, r0, asr pc
   16ffc:	bx	lr
   17000:	ldr	r3, [pc, #12]	; 17014 <__assert_fail@plt+0x5ec0>
   17004:	mov	r1, #0
   17008:	add	r3, pc, r3
   1700c:	ldr	r2, [r3]
   17010:	b	11094 <__cxa_atexit@plt>
   17014:	andeq	r2, r1, r4, ror #1

Disassembly of section .fini:

00017018 <.fini>:
   17018:	push	{r3, lr}
   1701c:	pop	{r3, pc}
