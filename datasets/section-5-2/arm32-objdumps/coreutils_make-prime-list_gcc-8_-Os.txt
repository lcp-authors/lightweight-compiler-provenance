
../repos/coreutils/src/make-prime-list:     file format elf32-littlearm


Disassembly of section .init:

00010564 <.init>:
   10564:	push	{r3, lr}
   10568:	bl	10988 <abort@plt+0x338>
   1056c:	pop	{r3, pc}

Disassembly of section .plt:

00010570 <raise@plt-0x14>:
   10570:	push	{lr}		; (str lr, [sp, #-4]!)
   10574:	ldr	lr, [pc, #4]	; 10580 <raise@plt-0x4>
   10578:	add	lr, pc, lr
   1057c:	ldr	pc, [lr, #8]!
   10580:	andeq	r0, r1, r0, lsl #21

00010584 <raise@plt>:
   10584:	add	ip, pc, #0, 12
   10588:	add	ip, ip, #16, 20	; 0x10000
   1058c:	ldr	pc, [ip, #2688]!	; 0xa80

00010590 <free@plt>:
   10590:	add	ip, pc, #0, 12
   10594:	add	ip, ip, #16, 20	; 0x10000
   10598:	ldr	pc, [ip, #2680]!	; 0xa78

0001059c <ferror@plt>:
   1059c:	add	ip, pc, #0, 12
   105a0:	add	ip, ip, #16, 20	; 0x10000
   105a4:	ldr	pc, [ip, #2672]!	; 0xa70

000105a8 <puts@plt>:
   105a8:	add	ip, pc, #0, 12
   105ac:	add	ip, ip, #16, 20	; 0x10000
   105b0:	ldr	pc, [ip, #2664]!	; 0xa68

000105b4 <malloc@plt>:
   105b4:	add	ip, pc, #0, 12
   105b8:	add	ip, ip, #16, 20	; 0x10000
   105bc:	ldr	pc, [ip, #2656]!	; 0xa60

000105c0 <__libc_start_main@plt>:
   105c0:	add	ip, pc, #0, 12
   105c4:	add	ip, ip, #16, 20	; 0x10000
   105c8:	ldr	pc, [ip, #2648]!	; 0xa58

000105cc <strerror@plt>:
   105cc:	add	ip, pc, #0, 12
   105d0:	add	ip, ip, #16, 20	; 0x10000
   105d4:	ldr	pc, [ip, #2640]!	; 0xa50

000105d8 <__gmon_start__@plt>:
   105d8:	add	ip, pc, #0, 12
   105dc:	add	ip, ip, #16, 20	; 0x10000
   105e0:	ldr	pc, [ip, #2632]!	; 0xa48

000105e4 <exit@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2624]!	; 0xa40

000105f0 <__errno_location@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2616]!	; 0xa38

000105fc <memset@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2608]!	; 0xa30

00010608 <putchar@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2600]!	; 0xa28

00010614 <__printf_chk@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2592]!	; 0xa20

00010620 <__fprintf_chk@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2584]!	; 0xa18

0001062c <fclose@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2576]!	; 0xa10

00010638 <atoi@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2568]!	; 0xa08

00010644 <fputs@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2560]!	; 0xa00

00010650 <abort@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2552]!	; 0x9f8

Disassembly of section .text:

0001065c <.text>:
   1065c:	cmp	r0, #2
   10660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10664:	sub	sp, sp, #20
   10668:	beq	1068c <abort@plt+0x3c>
   1066c:	ldr	r0, [pc, #684]	; 10920 <abort@plt+0x2d0>
   10670:	ldr	r2, [pc, #684]	; 10924 <abort@plt+0x2d4>
   10674:	ldr	r3, [r1]
   10678:	mov	r1, #1
   1067c:	ldr	r0, [r0]
   10680:	bl	10620 <__fprintf_chk@plt>
   10684:	mov	r0, #1
   10688:	b	106a0 <abort@plt+0x50>
   1068c:	ldr	r0, [r1, #4]
   10690:	bl	10638 <atoi@plt>
   10694:	cmp	r0, #2
   10698:	bgt	106a8 <abort@plt+0x58>
   1069c:	mov	r0, #0
   106a0:	add	sp, sp, #20
   106a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   106a8:	tst	r0, #1
   106ac:	mov	r6, #0
   106b0:	subeq	r0, r0, #1
   106b4:	mov	r7, r6
   106b8:	sub	r0, r0, #1
   106bc:	asr	r4, r0, #1
   106c0:	mov	r0, r4
   106c4:	bl	10b10 <abort@plt+0x4c0>
   106c8:	mov	r2, r4
   106cc:	mov	r1, #1
   106d0:	mov	sl, r0
   106d4:	bl	105fc <memset@plt>
   106d8:	mov	r0, #24
   106dc:	mul	r0, r0, r4
   106e0:	bl	10b10 <abort@plt+0x4c0>
   106e4:	mov	r9, r0
   106e8:	mov	r8, r0
   106ec:	cmp	r7, r4
   106f0:	bcc	107b8 <abort@plt+0x168>
   106f4:	ldr	r8, [pc, #556]	; 10928 <abort@plt+0x2d8>
   106f8:	mov	r4, r9
   106fc:	mov	r5, #0
   10700:	ldr	fp, [pc, #548]	; 1092c <abort@plt+0x2dc>
   10704:	ldr	r0, [pc, #548]	; 10930 <abort@plt+0x2e0>
   10708:	bl	105a8 <puts@plt>
   1070c:	mov	r2, #64	; 0x40
   10710:	ldr	r1, [pc, #540]	; 10934 <abort@plt+0x2e4>
   10714:	mov	r0, #1
   10718:	bl	10614 <__printf_chk@plt>
   1071c:	mov	r2, #2
   10720:	cmp	r5, r6
   10724:	bne	10890 <abort@plt+0x240>
   10728:	ldr	r0, [pc, #520]	; 10938 <abort@plt+0x2e8>
   1072c:	str	r2, [sp]
   10730:	bl	105a8 <puts@plt>
   10734:	ldr	r2, [sp]
   10738:	add	r2, r2, #2
   1073c:	mov	r3, r9
   10740:	ldr	r1, [r3]
   10744:	mov	r0, r3
   10748:	mul	r1, r1, r1
   1074c:	cmp	r2, r1
   10750:	bcs	108f8 <abort@plt+0x2a8>
   10754:	ldr	r4, [pc, #480]	; 1093c <abort@plt+0x2ec>
   10758:	mov	r0, #1
   1075c:	ldr	r1, [pc, #476]	; 10940 <abort@plt+0x2f0>
   10760:	bl	10614 <__printf_chk@plt>
   10764:	mov	r0, sl
   10768:	bl	10590 <free@plt>
   1076c:	mov	r0, r9
   10770:	bl	10590 <free@plt>
   10774:	ldr	r0, [r4]
   10778:	bl	1059c <ferror@plt>
   1077c:	mov	r5, r0
   10780:	ldr	r0, [r4]
   10784:	bl	1062c <fclose@plt>
   10788:	cmn	r5, r0
   1078c:	beq	1069c <abort@plt+0x4c>
   10790:	ldr	r3, [pc, #392]	; 10920 <abort@plt+0x2d0>
   10794:	ldr	r4, [r3]
   10798:	bl	105f0 <__errno_location@plt>
   1079c:	ldr	r0, [r0]
   107a0:	bl	105cc <strerror@plt>
   107a4:	mov	r3, r0
   107a8:	ldr	r2, [pc, #404]	; 10944 <abort@plt+0x2f4>
   107ac:	mov	r1, #1
   107b0:	mov	r0, r4
   107b4:	b	10680 <abort@plt+0x30>
   107b8:	lsl	r5, r7, #1
   107bc:	ldr	r3, [pc, #388]	; 10948 <abort@plt+0x2f8>
   107c0:	add	r6, r6, #1
   107c4:	add	r5, r5, #3
   107c8:	ubfx	r2, r5, #1, #3
   107cc:	str	r5, [r8]
   107d0:	lsl	r2, r2, #2
   107d4:	lsr	r2, r3, r2
   107d8:	mov	r3, #0
   107dc:	umull	r0, r1, r2, r2
   107e0:	adds	ip, r2, r2
   107e4:	mul	fp, r2, r3
   107e8:	adc	lr, r3, r3
   107ec:	strd	r0, [sp]
   107f0:	ldr	r0, [sp, #4]
   107f4:	add	r1, r0, fp, lsl #1
   107f8:	str	r1, [sp, #4]
   107fc:	ldm	sp, {r1, fp}
   10800:	umull	r0, r1, r1, r5
   10804:	mla	r1, r5, fp, r1
   10808:	subs	ip, ip, r0
   1080c:	str	ip, [sp, #8]
   10810:	sbc	r1, lr, r1
   10814:	str	r1, [sp, #12]
   10818:	ldrd	r0, [sp, #8]
   1081c:	cmp	r3, r1
   10820:	cmpeq	r2, r0
   10824:	bne	10878 <abort@plt+0x228>
   10828:	mvn	r0, #0
   1082c:	mvn	r1, #0
   10830:	strd	r2, [r8, #8]
   10834:	mov	r3, #0
   10838:	mov	r2, r5
   1083c:	bl	10b40 <abort@plt+0x4f0>
   10840:	mul	r3, r5, r5
   10844:	strd	r0, [r8, #16]
   10848:	sub	r3, r3, #3
   1084c:	lsr	r3, r3, #1
   10850:	cmp	r3, r4
   10854:	bcc	10880 <abort@plt+0x230>
   10858:	add	r7, r7, #1
   1085c:	cmp	r4, r7
   10860:	beq	10870 <abort@plt+0x220>
   10864:	ldrb	r3, [sl, r7]
   10868:	cmp	r3, #0
   1086c:	beq	10858 <abort@plt+0x208>
   10870:	add	r8, r8, #24
   10874:	b	106ec <abort@plt+0x9c>
   10878:	ldrd	r2, [sp, #8]
   1087c:	b	107dc <abort@plt+0x18c>
   10880:	mov	r2, #0
   10884:	strb	r2, [sl, r3]
   10888:	add	r3, r3, r5
   1088c:	b	10850 <abort@plt+0x200>
   10890:	add	r3, r5, #8
   10894:	ldr	r7, [r4]
   10898:	cmp	r3, r6
   1089c:	bcs	108b4 <abort@plt+0x264>
   108a0:	ldr	r3, [r4, #192]	; 0xc0
   108a4:	sub	r3, r3, r7
   108a8:	cmp	r3, #255	; 0xff
   108ac:	bls	108b8 <abort@plt+0x268>
   108b0:	bl	10650 <abort@plt>
   108b4:	mov	r3, #255	; 0xff
   108b8:	sub	r2, r7, r2
   108bc:	mov	r1, r8
   108c0:	mov	r0, #1
   108c4:	add	r5, r5, #1
   108c8:	bl	10614 <__printf_chk@plt>
   108cc:	mov	r3, #64	; 0x40
   108d0:	mov	r2, #0
   108d4:	ldrd	r0, [r4, #8]
   108d8:	bl	10a3c <abort@plt+0x3ec>
   108dc:	mov	r2, r7
   108e0:	mov	r1, fp
   108e4:	mov	r0, #1
   108e8:	add	r4, r4, #24
   108ec:	bl	10614 <__printf_chk@plt>
   108f0:	mov	r2, r7
   108f4:	b	10720 <abort@plt+0xd0>
   108f8:	ldr	r4, [r0, #8]
   108fc:	add	r3, r3, #24
   10900:	ldr	r1, [r0, #12]
   10904:	umull	r4, r5, r4, r2
   10908:	mla	r5, r2, r1, r5
   1090c:	ldrd	r0, [r3, #-8]
   10910:	cmp	r5, r1
   10914:	cmpeq	r4, r0
   10918:	bhi	10740 <abort@plt+0xf0>
   1091c:	b	10738 <abort@plt+0xe8>
   10920:	andeq	r1, r2, r0, rrx
   10924:	andeq	r0, r1, r4, ror #26
   10928:	ldrdeq	r0, [r1], -ip
   1092c:	andeq	r0, r1, ip, ror #27
   10930:	muleq	r1, ip, sp
   10934:	andeq	r0, r1, r1, asr #27
   10938:	andeq	r0, r1, r5, lsl #28
   1093c:	andeq	r1, r2, r4, rrx
   10940:	andeq	r0, r1, r2, lsr lr
   10944:	andeq	r0, r1, r1, lsr #28
   10948:			; <UNDEFINED> instruction: 0xf5397db1
   1094c:	mov	fp, #0
   10950:	mov	lr, #0
   10954:	pop	{r1}		; (ldr r1, [sp], #4)
   10958:	mov	r2, sp
   1095c:	push	{r2}		; (str r2, [sp, #-4]!)
   10960:	push	{r0}		; (str r0, [sp, #-4]!)
   10964:	ldr	ip, [pc, #16]	; 1097c <abort@plt+0x32c>
   10968:	push	{ip}		; (str ip, [sp, #-4]!)
   1096c:	ldr	r0, [pc, #12]	; 10980 <abort@plt+0x330>
   10970:	ldr	r3, [pc, #12]	; 10984 <abort@plt+0x334>
   10974:	bl	105c0 <__libc_start_main@plt>
   10978:	bl	10650 <abort@plt>
   1097c:	andeq	r0, r1, r4, lsl sp
   10980:	andeq	r0, r1, ip, asr r6
   10984:			; <UNDEFINED> instruction: 0x00010cb4
   10988:	ldr	r3, [pc, #20]	; 109a4 <abort@plt+0x354>
   1098c:	ldr	r2, [pc, #20]	; 109a8 <abort@plt+0x358>
   10990:	add	r3, pc, r3
   10994:	ldr	r2, [r3, r2]
   10998:	cmp	r2, #0
   1099c:	bxeq	lr
   109a0:	b	105d8 <__gmon_start__@plt>
   109a4:	andeq	r0, r1, r8, ror #12
   109a8:	andeq	r0, r0, r4, asr r0
   109ac:	ldr	r0, [pc, #24]	; 109cc <abort@plt+0x37c>
   109b0:	ldr	r3, [pc, #24]	; 109d0 <abort@plt+0x380>
   109b4:	cmp	r3, r0
   109b8:	bxeq	lr
   109bc:	ldr	r3, [pc, #16]	; 109d4 <abort@plt+0x384>
   109c0:	cmp	r3, #0
   109c4:	bxeq	lr
   109c8:	bx	r3
   109cc:	andeq	r1, r2, r0, rrx
   109d0:	andeq	r1, r2, r0, rrx
   109d4:	andeq	r0, r0, r0
   109d8:	ldr	r0, [pc, #36]	; 10a04 <abort@plt+0x3b4>
   109dc:	ldr	r1, [pc, #36]	; 10a08 <abort@plt+0x3b8>
   109e0:	sub	r1, r1, r0
   109e4:	asr	r1, r1, #2
   109e8:	add	r1, r1, r1, lsr #31
   109ec:	asrs	r1, r1, #1
   109f0:	bxeq	lr
   109f4:	ldr	r3, [pc, #16]	; 10a0c <abort@plt+0x3bc>
   109f8:	cmp	r3, #0
   109fc:	bxeq	lr
   10a00:	bx	r3
   10a04:	andeq	r1, r2, r0, rrx
   10a08:	andeq	r1, r2, r0, rrx
   10a0c:	andeq	r0, r0, r0
   10a10:	push	{r4, lr}
   10a14:	ldr	r4, [pc, #24]	; 10a34 <abort@plt+0x3e4>
   10a18:	ldrb	r3, [r4]
   10a1c:	cmp	r3, #0
   10a20:	popne	{r4, pc}
   10a24:	bl	109ac <abort@plt+0x35c>
   10a28:	mov	r3, #1
   10a2c:	strb	r3, [r4]
   10a30:	pop	{r4, pc}
   10a34:	andeq	r1, r2, r8, rrx
   10a38:	b	109d8 <abort@plt+0x388>
   10a3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a40:	mov	r4, r3
   10a44:	mov	r3, #0
   10a48:	bic	r5, r0, #-268435456	; 0xf0000000
   10a4c:	cmp	r3, r1
   10a50:	cmpeq	r5, r0
   10a54:	mov	r8, r2
   10a58:	beq	10ac8 <abort@plt+0x478>
   10a5c:	lsr	r6, r1, #24
   10a60:	mov	r7, #0
   10a64:	lsr	r9, r0, #28
   10a68:	orrs	r3, r6, r7
   10a6c:	lsr	sl, r1, #28
   10a70:	orr	r9, r9, r1, lsl #4
   10a74:	beq	10a80 <abort@plt+0x430>
   10a78:	mov	r0, #40	; 0x28
   10a7c:	bl	10608 <putchar@plt>
   10a80:	mov	r3, r4
   10a84:	add	r2, r8, #1
   10a88:	mov	r0, r9
   10a8c:	mov	r1, sl
   10a90:	bl	10a3c <abort@plt+0x3ec>
   10a94:	orrs	r3, r6, r7
   10a98:	beq	10ab0 <abort@plt+0x460>
   10a9c:	ldr	r3, [pc, #88]	; 10afc <abort@plt+0x4ac>
   10aa0:	add	r2, r8, #3
   10aa4:	mov	r0, #1
   10aa8:	ldr	r1, [pc, #80]	; 10b00 <abort@plt+0x4b0>
   10aac:	bl	10614 <__printf_chk@plt>
   10ab0:	mov	r2, #28
   10ab4:	ldr	r1, [pc, #72]	; 10b04 <abort@plt+0x4b4>
   10ab8:	mov	r0, #1
   10abc:	bl	10614 <__printf_chk@plt>
   10ac0:	mov	r2, #7
   10ac4:	b	10ae8 <abort@plt+0x498>
   10ac8:	cmp	r2, #0
   10acc:	beq	10ac0 <abort@plt+0x470>
   10ad0:	ldr	r1, [pc, #48]	; 10b08 <abort@plt+0x4b8>
   10ad4:	mov	r0, #1
   10ad8:	bl	10614 <__printf_chk@plt>
   10adc:	sub	r2, r4, #1
   10ae0:	and	r2, r2, #3
   10ae4:	add	r2, r2, #1
   10ae8:	mov	r3, r5
   10aec:	ldr	r1, [pc, #24]	; 10b0c <abort@plt+0x4bc>
   10af0:	mov	r0, #1
   10af4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10af8:	b	10614 <__printf_chk@plt>
   10afc:	andeq	r0, r1, r4, lsl #28
   10b00:	andeq	r0, r1, r4, lsr #26
   10b04:	andeq	r0, r1, sl, lsr #26
   10b08:	andeq	r0, r1, r4, lsr sp
   10b0c:	andeq	r0, r1, r1, asr #26
   10b10:	push	{r4, lr}
   10b14:	bl	105b4 <malloc@plt>
   10b18:	cmp	r0, #0
   10b1c:	popne	{r4, pc}
   10b20:	ldr	r3, [pc, #16]	; 10b38 <abort@plt+0x4e8>
   10b24:	ldr	r0, [pc, #16]	; 10b3c <abort@plt+0x4ec>
   10b28:	ldr	r1, [r3]
   10b2c:	bl	10644 <fputs@plt>
   10b30:	mov	r0, #1
   10b34:	bl	105e4 <exit@plt>
   10b38:	andeq	r1, r2, r0, rrx
   10b3c:	andeq	r0, r1, r9, asr #26
   10b40:	cmp	r3, #0
   10b44:	cmpeq	r2, #0
   10b48:	bne	10b60 <abort@plt+0x510>
   10b4c:	cmp	r1, #0
   10b50:	cmpeq	r0, #0
   10b54:	mvnne	r1, #0
   10b58:	mvnne	r0, #0
   10b5c:	b	10b7c <abort@plt+0x52c>
   10b60:	sub	sp, sp, #8
   10b64:	push	{sp, lr}
   10b68:	bl	10b8c <abort@plt+0x53c>
   10b6c:	ldr	lr, [sp, #4]
   10b70:	add	sp, sp, #8
   10b74:	pop	{r2, r3}
   10b78:	bx	lr
   10b7c:	push	{r1, lr}
   10b80:	mov	r0, #8
   10b84:	bl	10584 <raise@plt>
   10b88:	pop	{r1, pc}
   10b8c:	cmp	r1, r3
   10b90:	cmpeq	r0, r2
   10b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b98:	mov	r4, r0
   10b9c:	movcc	r0, #0
   10ba0:	mov	r5, r1
   10ba4:	ldr	lr, [sp, #36]	; 0x24
   10ba8:	movcc	r1, r0
   10bac:	bcc	10ca8 <abort@plt+0x658>
   10bb0:	cmp	r3, #0
   10bb4:	clzeq	ip, r2
   10bb8:	clzne	ip, r3
   10bbc:	addeq	ip, ip, #32
   10bc0:	cmp	r5, #0
   10bc4:	clzeq	r1, r4
   10bc8:	addeq	r1, r1, #32
   10bcc:	clzne	r1, r5
   10bd0:	sub	ip, ip, r1
   10bd4:	sub	sl, ip, #32
   10bd8:	lsl	r9, r3, ip
   10bdc:	rsb	fp, ip, #32
   10be0:	orr	r9, r9, r2, lsl sl
   10be4:	orr	r9, r9, r2, lsr fp
   10be8:	lsl	r8, r2, ip
   10bec:	cmp	r5, r9
   10bf0:	cmpeq	r4, r8
   10bf4:	movcc	r0, #0
   10bf8:	movcc	r1, r0
   10bfc:	bcc	10c18 <abort@plt+0x5c8>
   10c00:	mov	r0, #1
   10c04:	subs	r4, r4, r8
   10c08:	lsl	r1, r0, sl
   10c0c:	orr	r1, r1, r0, lsr fp
   10c10:	lsl	r0, r0, ip
   10c14:	sbc	r5, r5, r9
   10c18:	cmp	ip, #0
   10c1c:	beq	10ca8 <abort@plt+0x658>
   10c20:	lsr	r6, r8, #1
   10c24:	orr	r6, r6, r9, lsl #31
   10c28:	lsr	r7, r9, #1
   10c2c:	mov	r2, ip
   10c30:	b	10c54 <abort@plt+0x604>
   10c34:	subs	r3, r4, r6
   10c38:	sbc	r8, r5, r7
   10c3c:	adds	r3, r3, r3
   10c40:	adc	r8, r8, r8
   10c44:	adds	r4, r3, #1
   10c48:	adc	r5, r8, #0
   10c4c:	subs	r2, r2, #1
   10c50:	beq	10c70 <abort@plt+0x620>
   10c54:	cmp	r5, r7
   10c58:	cmpeq	r4, r6
   10c5c:	bcs	10c34 <abort@plt+0x5e4>
   10c60:	adds	r4, r4, r4
   10c64:	adc	r5, r5, r5
   10c68:	subs	r2, r2, #1
   10c6c:	bne	10c54 <abort@plt+0x604>
   10c70:	lsr	r3, r4, ip
   10c74:	orr	r3, r3, r5, lsl fp
   10c78:	lsr	r2, r5, ip
   10c7c:	orr	r3, r3, r5, lsr sl
   10c80:	adds	r0, r0, r4
   10c84:	mov	r4, r3
   10c88:	lsl	r3, r2, ip
   10c8c:	orr	r3, r3, r4, lsl sl
   10c90:	lsl	ip, r4, ip
   10c94:	orr	r3, r3, r4, lsr fp
   10c98:	adc	r1, r1, r5
   10c9c:	subs	r0, r0, ip
   10ca0:	mov	r5, r2
   10ca4:	sbc	r1, r1, r3
   10ca8:	cmp	lr, #0
   10cac:	strdne	r4, [lr]
   10cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10cb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10cb8:	mov	r7, r0
   10cbc:	ldr	r6, [pc, #72]	; 10d0c <abort@plt+0x6bc>
   10cc0:	ldr	r5, [pc, #72]	; 10d10 <abort@plt+0x6c0>
   10cc4:	add	r6, pc, r6
   10cc8:	add	r5, pc, r5
   10ccc:	sub	r6, r6, r5
   10cd0:	mov	r8, r1
   10cd4:	mov	r9, r2
   10cd8:	bl	10564 <raise@plt-0x20>
   10cdc:	asrs	r6, r6, #2
   10ce0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ce4:	mov	r4, #0
   10ce8:	add	r4, r4, #1
   10cec:	ldr	r3, [r5], #4
   10cf0:	mov	r2, r9
   10cf4:	mov	r1, r8
   10cf8:	mov	r0, r7
   10cfc:	blx	r3
   10d00:	cmp	r6, r4
   10d04:	bne	10ce8 <abort@plt+0x698>
   10d08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10d0c:	andeq	r0, r1, r8, asr #4
   10d10:	andeq	r0, r1, r0, asr #4
   10d14:	bx	lr

Disassembly of section .fini:

00010d18 <.fini>:
   10d18:	push	{r3, lr}
   10d1c:	pop	{r3, pc}
