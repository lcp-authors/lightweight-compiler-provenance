
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

00012424 <.init>:
   12424:	push	{r3, lr}
   12428:	bl	1254c <_start@@Base+0x3c>
   1242c:	pop	{r3, pc}

Disassembly of section .plt:

00012430 <raise@plt-0x14>:
   12430:	push	{lr}		; (str lr, [sp, #-4]!)
   12434:	ldr	lr, [pc, #4]	; 12440 <raise@plt-0x4>
   12438:	add	lr, pc, lr
   1243c:	ldr	pc, [lr, #8]!
   12440:	andeq	r5, r2, r0, asr #23

00012444 <raise@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #151552	; 0x25000
   1244c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012450 <free@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #151552	; 0x25000
   12458:	ldr	pc, [ip, #3000]!	; 0xbb8

0001245c <memcpy@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #151552	; 0x25000
   12464:	ldr	pc, [ip, #2992]!	; 0xbb0

00012468 <memcmp@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #151552	; 0x25000
   12470:	ldr	pc, [ip, #2984]!	; 0xba8

00012474 <realloc@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #151552	; 0x25000
   1247c:	ldr	pc, [ip, #2976]!	; 0xba0

00012480 <fwrite@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #151552	; 0x25000
   12488:	ldr	pc, [ip, #2968]!	; 0xb98

0001248c <malloc@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #151552	; 0x25000
   12494:	ldr	pc, [ip, #2960]!	; 0xb90

00012498 <__libc_start_main@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #151552	; 0x25000
   124a0:	ldr	pc, [ip, #2952]!	; 0xb88

000124a4 <__gmon_start__@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #151552	; 0x25000
   124ac:	ldr	pc, [ip, #2944]!	; 0xb80

000124b0 <strlen@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #151552	; 0x25000
   124b8:	ldr	pc, [ip, #2936]!	; 0xb78

000124bc <fprintf@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #151552	; 0x25000
   124c4:	ldr	pc, [ip, #2928]!	; 0xb70

000124c8 <posix_memalign@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #151552	; 0x25000
   124d0:	ldr	pc, [ip, #2920]!	; 0xb68

000124d4 <memset@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #151552	; 0x25000
   124dc:	ldr	pc, [ip, #2912]!	; 0xb60

000124e0 <strtod@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #151552	; 0x25000
   124e8:	ldr	pc, [ip, #2904]!	; 0xb58

000124ec <memchr@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #151552	; 0x25000
   124f4:	ldr	pc, [ip, #2896]!	; 0xb50

000124f8 <abort@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #151552	; 0x25000
   12500:	ldr	pc, [ip, #2888]!	; 0xb48

00012504 <__assert_fail@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #151552	; 0x25000
   1250c:	ldr	pc, [ip, #2880]!	; 0xb40

Disassembly of section .text:

00012510 <_start@@Base>:
   12510:	mov	fp, #0
   12514:	mov	lr, #0
   12518:	pop	{r1}		; (ldr r1, [sp], #4)
   1251c:	mov	r2, sp
   12520:	push	{r2}		; (str r2, [sp, #-4]!)
   12524:	push	{r0}		; (str r0, [sp, #-4]!)
   12528:	ldr	ip, [pc, #16]	; 12540 <_start@@Base+0x30>
   1252c:	push	{ip}		; (str ip, [sp, #-4]!)
   12530:	ldr	r0, [pc, #12]	; 12544 <_start@@Base+0x34>
   12534:	ldr	r3, [pc, #12]	; 12548 <_start@@Base+0x38>
   12538:	bl	12498 <__libc_start_main@plt>
   1253c:	bl	124f8 <abort@plt>
   12540:	andeq	r5, r2, r0, ror #28
   12544:	andeq	r6, r1, r0, ror #4
   12548:	andeq	r5, r2, r0, lsl #28
   1254c:	ldr	r3, [pc, #20]	; 12568 <_start@@Base+0x58>
   12550:	ldr	r2, [pc, #20]	; 1256c <_start@@Base+0x5c>
   12554:	add	r3, pc, r3
   12558:	ldr	r2, [r3, r2]
   1255c:	cmp	r2, #0
   12560:	bxeq	lr
   12564:	b	124a4 <__gmon_start__@plt>
   12568:	andeq	r5, r2, r4, lsr #21
   1256c:	andeq	r0, r0, ip, asr r0
   12570:	ldr	r3, [pc, #28]	; 12594 <_start@@Base+0x84>
   12574:	ldr	r0, [pc, #28]	; 12598 <_start@@Base+0x88>
   12578:	sub	r3, r3, r0
   1257c:	cmp	r3, #6
   12580:	bxls	lr
   12584:	ldr	r3, [pc, #16]	; 1259c <_start@@Base+0x8c>
   12588:	cmp	r3, #0
   1258c:	bxeq	lr
   12590:	bx	r3
   12594:	andeq	r8, r3, r3, ror #1
   12598:	andeq	r8, r3, r0, ror #1
   1259c:	andeq	r0, r0, r0
   125a0:	ldr	r1, [pc, #36]	; 125cc <_start@@Base+0xbc>
   125a4:	ldr	r0, [pc, #36]	; 125d0 <_start@@Base+0xc0>
   125a8:	sub	r1, r1, r0
   125ac:	asr	r1, r1, #2
   125b0:	add	r1, r1, r1, lsr #31
   125b4:	asrs	r1, r1, #1
   125b8:	bxeq	lr
   125bc:	ldr	r3, [pc, #16]	; 125d4 <_start@@Base+0xc4>
   125c0:	cmp	r3, #0
   125c4:	bxeq	lr
   125c8:	bx	r3
   125cc:	andeq	r8, r3, r0, ror #1
   125d0:	andeq	r8, r3, r0, ror #1
   125d4:	andeq	r0, r0, r0
   125d8:	push	{r4, lr}
   125dc:	ldr	r4, [pc, #24]	; 125fc <_start@@Base+0xec>
   125e0:	ldrb	r3, [r4]
   125e4:	cmp	r3, #0
   125e8:	popne	{r4, pc}
   125ec:	bl	12570 <_start@@Base+0x60>
   125f0:	mov	r3, #1
   125f4:	strb	r3, [r4]
   125f8:	pop	{r4, pc}
   125fc:	andeq	r8, r3, r0, ror #1
   12600:	ldr	r0, [pc, #40]	; 12630 <_start@@Base+0x120>
   12604:	ldr	r3, [r0]
   12608:	cmp	r3, #0
   1260c:	bne	12614 <_start@@Base+0x104>
   12610:	b	125a0 <_start@@Base+0x90>
   12614:	ldr	r3, [pc, #24]	; 12634 <_start@@Base+0x124>
   12618:	cmp	r3, #0
   1261c:	beq	12610 <_start@@Base+0x100>
   12620:	push	{r4, lr}
   12624:	blx	r3
   12628:	pop	{r4, lr}
   1262c:	b	125a0 <_start@@Base+0x90>
   12630:	andeq	r7, r3, r4, lsl pc
   12634:	andeq	r0, r0, r0
   12638:	push	{fp, lr}
   1263c:	add	fp, sp, #4
   12640:	sub	sp, sp, #16
   12644:	str	r0, [fp, #-8]
   12648:	str	r1, [fp, #-12]
   1264c:	str	r2, [fp, #-16]
   12650:	ldr	r2, [fp, #-16]
   12654:	ldr	r3, [fp, #-12]
   12658:	sub	r3, r2, r3
   1265c:	cmp	r3, #1
   12660:	ble	126ac <_start@@Base+0x19c>
   12664:	ldr	r3, [fp, #-12]
   12668:	ldrb	r3, [r3]
   1266c:	cmp	r3, #32
   12670:	bls	1267c <_start@@Base+0x16c>
   12674:	ldr	r3, [fp, #-12]
   12678:	b	126c0 <_start@@Base+0x1b0>
   1267c:	ldr	r3, [fp, #-12]
   12680:	ldrb	r3, [r3]
   12684:	cmp	r3, #32
   12688:	bne	126ac <_start@@Base+0x19c>
   1268c:	ldr	r3, [fp, #-12]
   12690:	add	r3, r3, #1
   12694:	ldrb	r3, [r3]
   12698:	cmp	r3, #32
   1269c:	bls	126ac <_start@@Base+0x19c>
   126a0:	ldr	r3, [fp, #-12]
   126a4:	add	r3, r3, #1
   126a8:	b	126c0 <_start@@Base+0x1b0>
   126ac:	ldr	r2, [fp, #-16]
   126b0:	ldr	r1, [fp, #-12]
   126b4:	ldr	r0, [fp, #-8]
   126b8:	bl	22458 <flatcc_json_parser_space_ext@@Base>
   126bc:	mov	r3, r0
   126c0:	mov	r0, r3
   126c4:	sub	sp, fp, #4
   126c8:	pop	{fp, pc}
   126cc:	push	{fp, lr}
   126d0:	add	fp, sp, #4
   126d4:	sub	sp, sp, #16
   126d8:	str	r0, [fp, #-8]
   126dc:	str	r1, [fp, #-12]
   126e0:	str	r2, [fp, #-16]
   126e4:	ldr	r2, [fp, #-12]
   126e8:	ldr	r3, [fp, #-16]
   126ec:	cmp	r2, r3
   126f0:	beq	12704 <_start@@Base+0x1f4>
   126f4:	ldr	r3, [fp, #-12]
   126f8:	ldrb	r3, [r3]
   126fc:	cmp	r3, #34	; 0x22
   12700:	beq	12720 <_start@@Base+0x210>
   12704:	mov	r3, #16
   12708:	ldr	r2, [fp, #-16]
   1270c:	ldr	r1, [fp, #-12]
   12710:	ldr	r0, [fp, #-8]
   12714:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12718:	mov	r3, r0
   1271c:	b	12730 <_start@@Base+0x220>
   12720:	ldr	r3, [fp, #-12]
   12724:	add	r3, r3, #1
   12728:	str	r3, [fp, #-12]
   1272c:	ldr	r3, [fp, #-12]
   12730:	mov	r0, r3
   12734:	sub	sp, fp, #4
   12738:	pop	{fp, pc}
   1273c:	push	{fp, lr}
   12740:	add	fp, sp, #4
   12744:	sub	sp, sp, #16
   12748:	str	r0, [fp, #-8]
   1274c:	str	r1, [fp, #-12]
   12750:	str	r2, [fp, #-16]
   12754:	ldr	r2, [fp, #-12]
   12758:	ldr	r3, [fp, #-16]
   1275c:	cmp	r2, r3
   12760:	beq	12774 <_start@@Base+0x264>
   12764:	ldr	r3, [fp, #-12]
   12768:	ldrb	r3, [r3]
   1276c:	cmp	r3, #34	; 0x22
   12770:	beq	12790 <_start@@Base+0x280>
   12774:	mov	r3, #20
   12778:	ldr	r2, [fp, #-16]
   1277c:	ldr	r1, [fp, #-12]
   12780:	ldr	r0, [fp, #-8]
   12784:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12788:	mov	r3, r0
   1278c:	b	127a0 <_start@@Base+0x290>
   12790:	ldr	r3, [fp, #-12]
   12794:	add	r3, r3, #1
   12798:	str	r3, [fp, #-12]
   1279c:	ldr	r3, [fp, #-12]
   127a0:	mov	r0, r3
   127a4:	sub	sp, fp, #4
   127a8:	pop	{fp, pc}
   127ac:	push	{fp, lr}
   127b0:	add	fp, sp, #4
   127b4:	sub	sp, sp, #16
   127b8:	str	r0, [fp, #-8]
   127bc:	str	r1, [fp, #-12]
   127c0:	str	r2, [fp, #-16]
   127c4:	ldr	r2, [fp, #-12]
   127c8:	ldr	r3, [fp, #-16]
   127cc:	cmp	r2, r3
   127d0:	bne	127dc <_start@@Base+0x2cc>
   127d4:	ldr	r3, [fp, #-12]
   127d8:	b	12844 <_start@@Base+0x334>
   127dc:	ldr	r3, [fp, #-12]
   127e0:	ldrb	r3, [r3]
   127e4:	cmp	r3, #34	; 0x22
   127e8:	bne	12808 <_start@@Base+0x2f8>
   127ec:	ldr	r3, [fp, #-12]
   127f0:	add	r3, r3, #1
   127f4:	str	r3, [fp, #-12]
   127f8:	ldr	r3, [fp, #-8]
   127fc:	mov	r2, #0
   12800:	str	r2, [r3, #12]
   12804:	b	12840 <_start@@Base+0x330>
   12808:	ldr	r3, [fp, #-12]
   1280c:	ldrb	r3, [r3]
   12810:	cmp	r3, #46	; 0x2e
   12814:	bne	12834 <_start@@Base+0x324>
   12818:	mov	r3, #5
   1281c:	ldr	r2, [fp, #-16]
   12820:	ldr	r1, [fp, #-12]
   12824:	ldr	r0, [fp, #-8]
   12828:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1282c:	mov	r3, r0
   12830:	b	12844 <_start@@Base+0x334>
   12834:	ldr	r3, [fp, #-8]
   12838:	mov	r2, #1
   1283c:	str	r2, [r3, #12]
   12840:	ldr	r3, [fp, #-12]
   12844:	mov	r0, r3
   12848:	sub	sp, fp, #4
   1284c:	pop	{fp, pc}
   12850:	push	{r4, r5, r6, r7, r8, r9, fp}
   12854:	add	fp, sp, #24
   12858:	sub	sp, sp, #60	; 0x3c
   1285c:	str	r0, [fp, #-48]	; 0xffffffd0
   12860:	str	r1, [fp, #-52]	; 0xffffffcc
   12864:	mov	r2, #0
   12868:	mov	r3, #0
   1286c:	strd	r2, [fp, #-36]	; 0xffffffdc
   12870:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12874:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12878:	sub	r3, r2, r3
   1287c:	str	r3, [fp, #-40]	; 0xffffffd8
   12880:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12884:	cmp	r3, #8
   12888:	bls	12894 <_start@@Base+0x384>
   1288c:	mov	r3, #8
   12890:	str	r3, [fp, #-40]	; 0xffffffd8
   12894:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12898:	cmp	r3, #8
   1289c:	addls	pc, pc, r3, lsl #2
   128a0:	b	12a78 <_start@@Base+0x568>
   128a4:	b	12a78 <_start@@Base+0x568>
   128a8:	b	12a38 <_start@@Base+0x528>
   128ac:	b	129f8 <_start@@Base+0x4e8>
   128b0:	b	129b8 <_start@@Base+0x4a8>
   128b4:	b	12978 <_start@@Base+0x468>
   128b8:	b	1294c <_start@@Base+0x43c>
   128bc:	b	1291c <_start@@Base+0x40c>
   128c0:	b	128ec <_start@@Base+0x3dc>
   128c4:	b	128c8 <_start@@Base+0x3b8>
   128c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   128cc:	add	r3, r3, #7
   128d0:	ldrb	r3, [r3]
   128d4:	uxtb	r0, r3
   128d8:	mov	r1, #0
   128dc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   128e0:	orr	r2, r2, r0
   128e4:	orr	r3, r3, r1
   128e8:	strd	r2, [fp, #-36]	; 0xffffffdc
   128ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   128f0:	add	r3, r3, #6
   128f4:	ldrb	r3, [r3]
   128f8:	uxtb	r2, r3
   128fc:	mov	r3, #0
   12900:	lsl	r5, r3, #8
   12904:	orr	r5, r5, r2, lsr #24
   12908:	lsl	r4, r2, #8
   1290c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12910:	orr	r2, r2, r4
   12914:	orr	r3, r3, r5
   12918:	strd	r2, [fp, #-36]	; 0xffffffdc
   1291c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12920:	add	r3, r3, #5
   12924:	ldrb	r3, [r3]
   12928:	uxtb	r2, r3
   1292c:	mov	r3, #0
   12930:	lsl	r7, r3, #16
   12934:	orr	r7, r7, r2, lsr #16
   12938:	lsl	r6, r2, #16
   1293c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12940:	orr	r2, r2, r6
   12944:	orr	r3, r3, r7
   12948:	strd	r2, [fp, #-36]	; 0xffffffdc
   1294c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12950:	add	r3, r3, #4
   12954:	ldrb	r3, [r3]
   12958:	uxtb	r2, r3
   1295c:	mov	r3, #0
   12960:	lsr	r9, r2, #8
   12964:	lsl	r8, r2, #24
   12968:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1296c:	orr	r2, r2, r8
   12970:	orr	r3, r3, r9
   12974:	strd	r2, [fp, #-36]	; 0xffffffdc
   12978:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1297c:	add	r3, r3, #3
   12980:	ldrb	r3, [r3]
   12984:	uxtb	r2, r3
   12988:	mov	r3, #0
   1298c:	mov	r3, r2
   12990:	str	r3, [fp, #-56]	; 0xffffffc8
   12994:	mov	r3, #0
   12998:	str	r3, [fp, #-60]	; 0xffffffc4
   1299c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   129a0:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   129a4:	orr	r0, r0, r2
   129a8:	orr	r1, r1, r3
   129ac:	mov	r2, r0
   129b0:	mov	r3, r1
   129b4:	strd	r2, [fp, #-36]	; 0xffffffdc
   129b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   129bc:	add	r3, r3, #2
   129c0:	ldrb	r3, [r3]
   129c4:	uxtb	r2, r3
   129c8:	mov	r3, #0
   129cc:	lsl	r3, r2, #8
   129d0:	str	r3, [fp, #-64]	; 0xffffffc0
   129d4:	mov	r3, #0
   129d8:	str	r3, [fp, #-68]	; 0xffffffbc
   129dc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   129e0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   129e4:	orr	r0, r0, r2
   129e8:	orr	r1, r1, r3
   129ec:	mov	r2, r0
   129f0:	mov	r3, r1
   129f4:	strd	r2, [fp, #-36]	; 0xffffffdc
   129f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   129fc:	add	r3, r3, #1
   12a00:	ldrb	r3, [r3]
   12a04:	uxtb	r2, r3
   12a08:	mov	r3, #0
   12a0c:	lsl	r3, r2, #16
   12a10:	str	r3, [fp, #-72]	; 0xffffffb8
   12a14:	mov	r3, #0
   12a18:	str	r3, [fp, #-76]	; 0xffffffb4
   12a1c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12a20:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12a24:	orr	r0, r0, r2
   12a28:	orr	r1, r1, r3
   12a2c:	mov	r2, r0
   12a30:	mov	r3, r1
   12a34:	strd	r2, [fp, #-36]	; 0xffffffdc
   12a38:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12a3c:	ldrb	r3, [r3]
   12a40:	uxtb	r2, r3
   12a44:	mov	r3, #0
   12a48:	lsl	r3, r2, #24
   12a4c:	str	r3, [fp, #-80]	; 0xffffffb0
   12a50:	mov	r3, #0
   12a54:	str	r3, [fp, #-84]	; 0xffffffac
   12a58:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12a5c:	ldrd	r0, [fp, #-84]	; 0xffffffac
   12a60:	orr	r0, r0, r2
   12a64:	orr	r1, r1, r3
   12a68:	mov	r2, r0
   12a6c:	mov	r3, r1
   12a70:	strd	r2, [fp, #-36]	; 0xffffffdc
   12a74:	nop			; (mov r0, r0)
   12a78:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12a7c:	mov	r0, r2
   12a80:	mov	r1, r3
   12a84:	sub	sp, fp, #24
   12a88:	pop	{r4, r5, r6, r7, r8, r9, fp}
   12a8c:	bx	lr
   12a90:	push	{fp, lr}
   12a94:	add	fp, sp, #4
   12a98:	sub	sp, sp, #16
   12a9c:	str	r0, [fp, #-16]
   12aa0:	str	r1, [fp, #-20]	; 0xffffffec
   12aa4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12aa8:	ldr	r3, [fp, #-16]
   12aac:	sub	r3, r2, r3
   12ab0:	str	r3, [fp, #-8]
   12ab4:	ldr	r1, [fp, #-20]	; 0xffffffec
   12ab8:	ldr	r0, [fp, #-16]
   12abc:	bl	12850 <_start@@Base+0x340>
   12ac0:	mov	r2, r0
   12ac4:	mov	r3, r1
   12ac8:	mov	r0, r2
   12acc:	mov	r1, r3
   12ad0:	sub	sp, fp, #4
   12ad4:	pop	{fp, pc}
   12ad8:	push	{fp, lr}
   12adc:	add	fp, sp, #4
   12ae0:	sub	sp, sp, #24
   12ae4:	str	r0, [fp, #-16]
   12ae8:	str	r1, [fp, #-20]	; 0xffffffec
   12aec:	str	r2, [fp, #-24]	; 0xffffffe8
   12af0:	mov	r3, #0
   12af4:	strb	r3, [fp, #-5]
   12af8:	ldr	r3, [fp, #-16]
   12afc:	ldr	r3, [r3, #12]
   12b00:	cmp	r3, #0
   12b04:	beq	12c2c <_start@@Base+0x71c>
   12b08:	b	12ba0 <_start@@Base+0x690>
   12b0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b10:	ldrb	r3, [r3]
   12b14:	strb	r3, [fp, #-6]
   12b18:	ldrb	r3, [fp, #-6]
   12b1c:	strb	r3, [fp, #-5]
   12b20:	ldrb	r3, [fp, #-6]
   12b24:	cmp	r3, #95	; 0x5f
   12b28:	beq	12b5c <_start@@Base+0x64c>
   12b2c:	ldrb	r3, [fp, #-6]
   12b30:	cmp	r3, #46	; 0x2e
   12b34:	beq	12b5c <_start@@Base+0x64c>
   12b38:	ldrsb	r3, [fp, #-6]
   12b3c:	cmp	r3, #0
   12b40:	blt	12b5c <_start@@Base+0x64c>
   12b44:	ldrb	r3, [fp, #-6]
   12b48:	cmp	r3, #47	; 0x2f
   12b4c:	bls	12b6c <_start@@Base+0x65c>
   12b50:	ldrb	r3, [fp, #-6]
   12b54:	cmp	r3, #57	; 0x39
   12b58:	bhi	12b6c <_start@@Base+0x65c>
   12b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b60:	add	r3, r3, #1
   12b64:	str	r3, [fp, #-20]	; 0xffffffec
   12b68:	b	12ba0 <_start@@Base+0x690>
   12b6c:	ldrb	r3, [fp, #-6]
   12b70:	orr	r3, r3, #32
   12b74:	strb	r3, [fp, #-6]
   12b78:	ldrb	r3, [fp, #-6]
   12b7c:	cmp	r3, #96	; 0x60
   12b80:	bls	12bc4 <_start@@Base+0x6b4>
   12b84:	ldrb	r3, [fp, #-6]
   12b88:	cmp	r3, #122	; 0x7a
   12b8c:	bhi	12bc4 <_start@@Base+0x6b4>
   12b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b94:	add	r3, r3, #1
   12b98:	str	r3, [fp, #-20]	; 0xffffffec
   12b9c:	nop			; (mov r0, r0)
   12ba0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ba4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ba8:	cmp	r2, r3
   12bac:	beq	12bc8 <_start@@Base+0x6b8>
   12bb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bb4:	ldrb	r3, [r3]
   12bb8:	cmp	r3, #32
   12bbc:	bhi	12b0c <_start@@Base+0x5fc>
   12bc0:	b	12bc8 <_start@@Base+0x6b8>
   12bc4:	nop			; (mov r0, r0)
   12bc8:	ldrb	r3, [fp, #-5]
   12bcc:	cmp	r3, #46	; 0x2e
   12bd0:	bne	12c9c <_start@@Base+0x78c>
   12bd4:	mov	r3, #5
   12bd8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12bdc:	ldr	r1, [fp, #-20]	; 0xffffffec
   12be0:	ldr	r0, [fp, #-16]
   12be4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12be8:	mov	r3, r0
   12bec:	b	12ca0 <_start@@Base+0x790>
   12bf0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12bf4:	ldrb	r3, [r3]
   12bf8:	cmp	r3, #92	; 0x5c
   12bfc:	bne	12c20 <_start@@Base+0x710>
   12c00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12c04:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c08:	sub	r3, r2, r3
   12c0c:	cmp	r3, #1
   12c10:	ble	12c50 <_start@@Base+0x740>
   12c14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c18:	add	r3, r3, #1
   12c1c:	str	r3, [fp, #-20]	; 0xffffffec
   12c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c24:	add	r3, r3, #1
   12c28:	str	r3, [fp, #-20]	; 0xffffffec
   12c2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c34:	cmp	r2, r3
   12c38:	beq	12c54 <_start@@Base+0x744>
   12c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c40:	ldrb	r3, [r3]
   12c44:	cmp	r3, #34	; 0x22
   12c48:	bne	12bf0 <_start@@Base+0x6e0>
   12c4c:	b	12c54 <_start@@Base+0x744>
   12c50:	nop			; (mov r0, r0)
   12c54:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c5c:	cmp	r2, r3
   12c60:	beq	12c74 <_start@@Base+0x764>
   12c64:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c68:	ldrb	r3, [r3]
   12c6c:	cmp	r3, #34	; 0x22
   12c70:	beq	12c90 <_start@@Base+0x780>
   12c74:	mov	r3, #20
   12c78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12c7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12c80:	ldr	r0, [fp, #-16]
   12c84:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12c88:	mov	r3, r0
   12c8c:	b	12ca0 <_start@@Base+0x790>
   12c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c94:	add	r3, r3, #1
   12c98:	str	r3, [fp, #-20]	; 0xffffffec
   12c9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ca0:	mov	r0, r3
   12ca4:	sub	sp, fp, #4
   12ca8:	pop	{fp, pc}
   12cac:	push	{fp, lr}
   12cb0:	add	fp, sp, #4
   12cb4:	sub	sp, sp, #16
   12cb8:	str	r0, [fp, #-8]
   12cbc:	str	r1, [fp, #-12]
   12cc0:	str	r2, [fp, #-16]
   12cc4:	ldr	r2, [fp, #-16]
   12cc8:	ldr	r1, [fp, #-12]
   12ccc:	ldr	r0, [fp, #-8]
   12cd0:	bl	127ac <_start@@Base+0x29c>
   12cd4:	str	r0, [fp, #-12]
   12cd8:	ldr	r3, [fp, #-8]
   12cdc:	ldr	r3, [r3, #12]
   12ce0:	cmp	r3, #0
   12ce4:	bne	12cfc <_start@@Base+0x7ec>
   12ce8:	ldr	r2, [fp, #-16]
   12cec:	ldr	r1, [fp, #-12]
   12cf0:	ldr	r0, [fp, #-8]
   12cf4:	bl	12638 <_start@@Base+0x128>
   12cf8:	str	r0, [fp, #-12]
   12cfc:	ldr	r3, [fp, #-12]
   12d00:	mov	r0, r3
   12d04:	sub	sp, fp, #4
   12d08:	pop	{fp, pc}
   12d0c:	push	{fp, lr}
   12d10:	add	fp, sp, #4
   12d14:	sub	sp, sp, #16
   12d18:	str	r0, [fp, #-8]
   12d1c:	str	r1, [fp, #-12]
   12d20:	str	r2, [fp, #-16]
   12d24:	str	r3, [fp, #-20]	; 0xffffffec
   12d28:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d2c:	cmp	r3, #0
   12d30:	beq	12d50 <_start@@Base+0x840>
   12d34:	mov	r3, #8
   12d38:	ldr	r2, [fp, #-16]
   12d3c:	ldr	r1, [fp, #-12]
   12d40:	ldr	r0, [fp, #-8]
   12d44:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12d48:	mov	r3, r0
   12d4c:	b	12d60 <_start@@Base+0x850>
   12d50:	ldr	r1, [fp, #12]
   12d54:	ldrd	r2, [fp, #4]
   12d58:	strd	r2, [r1]
   12d5c:	ldr	r3, [fp, #-12]
   12d60:	mov	r0, r3
   12d64:	sub	sp, fp, #4
   12d68:	pop	{fp, pc}
   12d6c:	push	{fp, lr}
   12d70:	add	fp, sp, #4
   12d74:	sub	sp, sp, #16
   12d78:	str	r0, [fp, #-8]
   12d7c:	str	r1, [fp, #-12]
   12d80:	str	r2, [fp, #-16]
   12d84:	str	r3, [fp, #-20]	; 0xffffffec
   12d88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d8c:	cmp	r3, #0
   12d90:	beq	12db0 <_start@@Base+0x8a0>
   12d94:	mov	r3, #8
   12d98:	ldr	r2, [fp, #-16]
   12d9c:	ldr	r1, [fp, #-12]
   12da0:	ldr	r0, [fp, #-8]
   12da4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12da8:	mov	r3, r0
   12dac:	b	12ddc <_start@@Base+0x8cc>
   12db0:	ldr	r2, [fp, #4]
   12db4:	ldr	r3, [fp, #8]
   12db8:	orr	r3, r2, r3
   12dbc:	cmp	r3, #0
   12dc0:	movne	r3, #1
   12dc4:	moveq	r3, #0
   12dc8:	uxtb	r3, r3
   12dcc:	mov	r2, r3
   12dd0:	ldr	r3, [fp, #12]
   12dd4:	strb	r2, [r3]
   12dd8:	ldr	r3, [fp, #-12]
   12ddc:	mov	r0, r3
   12de0:	sub	sp, fp, #4
   12de4:	pop	{fp, pc}
   12de8:	push	{fp, lr}
   12dec:	add	fp, sp, #4
   12df0:	sub	sp, sp, #16
   12df4:	str	r0, [fp, #-8]
   12df8:	str	r1, [fp, #-12]
   12dfc:	str	r2, [fp, #-16]
   12e00:	str	r3, [fp, #-20]	; 0xffffffec
   12e04:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e08:	cmp	r3, #0
   12e0c:	beq	12e2c <_start@@Base+0x91c>
   12e10:	mov	r3, #8
   12e14:	ldr	r2, [fp, #-16]
   12e18:	ldr	r1, [fp, #-12]
   12e1c:	ldr	r0, [fp, #-8]
   12e20:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12e24:	mov	r3, r0
   12e28:	b	12e70 <_start@@Base+0x960>
   12e2c:	ldrd	r2, [fp, #4]
   12e30:	mvn	r0, #0
   12e34:	mov	r1, #0
   12e38:	cmp	r3, r1
   12e3c:	cmpeq	r2, r0
   12e40:	bls	12e60 <_start@@Base+0x950>
   12e44:	mov	r3, #7
   12e48:	ldr	r2, [fp, #-16]
   12e4c:	ldr	r1, [fp, #-12]
   12e50:	ldr	r0, [fp, #-8]
   12e54:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12e58:	mov	r3, r0
   12e5c:	b	12e70 <_start@@Base+0x960>
   12e60:	ldr	r2, [fp, #4]
   12e64:	ldr	r3, [fp, #12]
   12e68:	str	r2, [r3]
   12e6c:	ldr	r3, [fp, #-12]
   12e70:	mov	r0, r3
   12e74:	sub	sp, fp, #4
   12e78:	pop	{fp, pc}
   12e7c:	push	{fp, lr}
   12e80:	add	fp, sp, #4
   12e84:	sub	sp, sp, #16
   12e88:	str	r0, [fp, #-8]
   12e8c:	str	r1, [fp, #-12]
   12e90:	str	r2, [fp, #-16]
   12e94:	str	r3, [fp, #-20]	; 0xffffffec
   12e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e9c:	cmp	r3, #0
   12ea0:	beq	12ec0 <_start@@Base+0x9b0>
   12ea4:	mov	r3, #8
   12ea8:	ldr	r2, [fp, #-16]
   12eac:	ldr	r1, [fp, #-12]
   12eb0:	ldr	r0, [fp, #-8]
   12eb4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12eb8:	mov	r3, r0
   12ebc:	b	12f04 <_start@@Base+0x9f4>
   12ec0:	ldrd	r2, [fp, #4]
   12ec4:	ldr	r0, [pc, #68]	; 12f10 <_start@@Base+0xa00>
   12ec8:	mov	r1, #0
   12ecc:	cmp	r3, r1
   12ed0:	cmpeq	r2, r0
   12ed4:	bls	12ef4 <_start@@Base+0x9e4>
   12ed8:	mov	r3, #7
   12edc:	ldr	r2, [fp, #-16]
   12ee0:	ldr	r1, [fp, #-12]
   12ee4:	ldr	r0, [fp, #-8]
   12ee8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12eec:	mov	r3, r0
   12ef0:	b	12f04 <_start@@Base+0x9f4>
   12ef4:	ldrh	r2, [fp, #4]
   12ef8:	ldr	r3, [fp, #12]
   12efc:	strh	r2, [r3]
   12f00:	ldr	r3, [fp, #-12]
   12f04:	mov	r0, r3
   12f08:	sub	sp, fp, #4
   12f0c:	pop	{fp, pc}
   12f10:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   12f14:	push	{fp, lr}
   12f18:	add	fp, sp, #4
   12f1c:	sub	sp, sp, #16
   12f20:	str	r0, [fp, #-8]
   12f24:	str	r1, [fp, #-12]
   12f28:	str	r2, [fp, #-16]
   12f2c:	str	r3, [fp, #-20]	; 0xffffffec
   12f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f34:	cmp	r3, #0
   12f38:	beq	12f58 <_start@@Base+0xa48>
   12f3c:	mov	r3, #8
   12f40:	ldr	r2, [fp, #-16]
   12f44:	ldr	r1, [fp, #-12]
   12f48:	ldr	r0, [fp, #-8]
   12f4c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12f50:	mov	r3, r0
   12f54:	b	12f94 <_start@@Base+0xa84>
   12f58:	ldrd	r2, [fp, #4]
   12f5c:	cmp	r3, #0
   12f60:	cmpeq	r2, #255	; 0xff
   12f64:	bls	12f84 <_start@@Base+0xa74>
   12f68:	mov	r3, #7
   12f6c:	ldr	r2, [fp, #-16]
   12f70:	ldr	r1, [fp, #-12]
   12f74:	ldr	r0, [fp, #-8]
   12f78:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12f7c:	mov	r3, r0
   12f80:	b	12f94 <_start@@Base+0xa84>
   12f84:	ldrb	r2, [fp, #4]
   12f88:	ldr	r3, [fp, #12]
   12f8c:	strb	r2, [r3]
   12f90:	ldr	r3, [fp, #-12]
   12f94:	mov	r0, r3
   12f98:	sub	sp, fp, #4
   12f9c:	pop	{fp, pc}
   12fa0:	push	{fp, lr}
   12fa4:	add	fp, sp, #4
   12fa8:	sub	sp, sp, #16
   12fac:	str	r0, [fp, #-8]
   12fb0:	str	r1, [fp, #-12]
   12fb4:	str	r2, [fp, #-16]
   12fb8:	str	r3, [fp, #-20]	; 0xffffffec
   12fbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fc0:	cmp	r3, #0
   12fc4:	beq	1300c <_start@@Base+0xafc>
   12fc8:	ldrd	r2, [fp, #4]
   12fcc:	cmp	r3, #-2147483648	; 0x80000000
   12fd0:	cmpeq	r2, #0
   12fd4:	bls	12ff4 <_start@@Base+0xae4>
   12fd8:	mov	r3, #8
   12fdc:	ldr	r2, [fp, #-16]
   12fe0:	ldr	r1, [fp, #-12]
   12fe4:	ldr	r0, [fp, #-8]
   12fe8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   12fec:	mov	r3, r0
   12ff0:	b	13048 <_start@@Base+0xb38>
   12ff4:	ldrd	r2, [fp, #4]
   12ff8:	rsbs	r2, r2, #0
   12ffc:	rsc	r3, r3, #0
   13000:	ldr	r1, [fp, #12]
   13004:	strd	r2, [r1]
   13008:	b	13044 <_start@@Base+0xb34>
   1300c:	ldrd	r2, [fp, #4]
   13010:	cmp	r2, #0
   13014:	sbcs	r3, r3, #0
   13018:	bge	13038 <_start@@Base+0xb28>
   1301c:	mov	r3, #7
   13020:	ldr	r2, [fp, #-16]
   13024:	ldr	r1, [fp, #-12]
   13028:	ldr	r0, [fp, #-8]
   1302c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13030:	mov	r3, r0
   13034:	b	13048 <_start@@Base+0xb38>
   13038:	ldrd	r2, [fp, #4]
   1303c:	ldr	r1, [fp, #12]
   13040:	strd	r2, [r1]
   13044:	ldr	r3, [fp, #-12]
   13048:	mov	r0, r3
   1304c:	sub	sp, fp, #4
   13050:	pop	{fp, pc}
   13054:	push	{fp, lr}
   13058:	add	fp, sp, #4
   1305c:	sub	sp, sp, #16
   13060:	str	r0, [fp, #-8]
   13064:	str	r1, [fp, #-12]
   13068:	str	r2, [fp, #-16]
   1306c:	str	r3, [fp, #-20]	; 0xffffffec
   13070:	ldr	r3, [fp, #-20]	; 0xffffffec
   13074:	cmp	r3, #0
   13078:	beq	130c0 <_start@@Base+0xbb0>
   1307c:	ldrd	r2, [fp, #4]
   13080:	cmp	r3, #0
   13084:	cmpeq	r2, #-2147483648	; 0x80000000
   13088:	bls	130a8 <_start@@Base+0xb98>
   1308c:	mov	r3, #8
   13090:	ldr	r2, [fp, #-16]
   13094:	ldr	r1, [fp, #-12]
   13098:	ldr	r0, [fp, #-8]
   1309c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   130a0:	mov	r3, r0
   130a4:	b	13104 <_start@@Base+0xbf4>
   130a8:	ldr	r3, [fp, #4]
   130ac:	rsb	r3, r3, #0
   130b0:	mov	r2, r3
   130b4:	ldr	r3, [fp, #12]
   130b8:	str	r2, [r3]
   130bc:	b	13100 <_start@@Base+0xbf0>
   130c0:	ldrd	r2, [fp, #4]
   130c4:	mvn	r0, #-2147483648	; 0x80000000
   130c8:	mov	r1, #0
   130cc:	cmp	r3, r1
   130d0:	cmpeq	r2, r0
   130d4:	bls	130f4 <_start@@Base+0xbe4>
   130d8:	mov	r3, #7
   130dc:	ldr	r2, [fp, #-16]
   130e0:	ldr	r1, [fp, #-12]
   130e4:	ldr	r0, [fp, #-8]
   130e8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   130ec:	mov	r3, r0
   130f0:	b	13104 <_start@@Base+0xbf4>
   130f4:	ldr	r2, [fp, #4]
   130f8:	ldr	r3, [fp, #12]
   130fc:	str	r2, [r3]
   13100:	ldr	r3, [fp, #-12]
   13104:	mov	r0, r3
   13108:	sub	sp, fp, #4
   1310c:	pop	{fp, pc}
   13110:	push	{fp, lr}
   13114:	add	fp, sp, #4
   13118:	sub	sp, sp, #16
   1311c:	str	r0, [fp, #-8]
   13120:	str	r1, [fp, #-12]
   13124:	str	r2, [fp, #-16]
   13128:	str	r3, [fp, #-20]	; 0xffffffec
   1312c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13130:	cmp	r3, #0
   13134:	beq	13180 <_start@@Base+0xc70>
   13138:	ldrd	r2, [fp, #4]
   1313c:	cmp	r3, #0
   13140:	cmpeq	r2, #32768	; 0x8000
   13144:	bls	13164 <_start@@Base+0xc54>
   13148:	mov	r3, #8
   1314c:	ldr	r2, [fp, #-16]
   13150:	ldr	r1, [fp, #-12]
   13154:	ldr	r0, [fp, #-8]
   13158:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1315c:	mov	r3, r0
   13160:	b	131c4 <_start@@Base+0xcb4>
   13164:	ldrh	r3, [fp, #4]
   13168:	rsb	r3, r3, #0
   1316c:	uxth	r3, r3
   13170:	sxth	r2, r3
   13174:	ldr	r3, [fp, #12]
   13178:	strh	r2, [r3]
   1317c:	b	131c0 <_start@@Base+0xcb0>
   13180:	ldrd	r2, [fp, #4]
   13184:	ldr	r0, [pc, #68]	; 131d0 <_start@@Base+0xcc0>
   13188:	mov	r1, #0
   1318c:	cmp	r3, r1
   13190:	cmpeq	r2, r0
   13194:	bls	131b4 <_start@@Base+0xca4>
   13198:	mov	r3, #7
   1319c:	ldr	r2, [fp, #-16]
   131a0:	ldr	r1, [fp, #-12]
   131a4:	ldr	r0, [fp, #-8]
   131a8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   131ac:	mov	r3, r0
   131b0:	b	131c4 <_start@@Base+0xcb4>
   131b4:	ldrsh	r2, [fp, #4]
   131b8:	ldr	r3, [fp, #12]
   131bc:	strh	r2, [r3]
   131c0:	ldr	r3, [fp, #-12]
   131c4:	mov	r0, r3
   131c8:	sub	sp, fp, #4
   131cc:	pop	{fp, pc}
   131d0:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   131d4:	push	{fp, lr}
   131d8:	add	fp, sp, #4
   131dc:	sub	sp, sp, #16
   131e0:	str	r0, [fp, #-8]
   131e4:	str	r1, [fp, #-12]
   131e8:	str	r2, [fp, #-16]
   131ec:	str	r3, [fp, #-20]	; 0xffffffec
   131f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   131f4:	cmp	r3, #0
   131f8:	beq	13244 <_start@@Base+0xd34>
   131fc:	ldrd	r2, [fp, #4]
   13200:	cmp	r3, #0
   13204:	cmpeq	r2, #128	; 0x80
   13208:	bls	13228 <_start@@Base+0xd18>
   1320c:	mov	r3, #8
   13210:	ldr	r2, [fp, #-16]
   13214:	ldr	r1, [fp, #-12]
   13218:	ldr	r0, [fp, #-8]
   1321c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13220:	mov	r3, r0
   13224:	b	13280 <_start@@Base+0xd70>
   13228:	ldrb	r3, [fp, #4]
   1322c:	rsb	r3, r3, #0
   13230:	uxtb	r3, r3
   13234:	sxtb	r2, r3
   13238:	ldr	r3, [fp, #12]
   1323c:	strb	r2, [r3]
   13240:	b	1327c <_start@@Base+0xd6c>
   13244:	ldrd	r2, [fp, #4]
   13248:	cmp	r3, #0
   1324c:	cmpeq	r2, #127	; 0x7f
   13250:	bls	13270 <_start@@Base+0xd60>
   13254:	mov	r3, #7
   13258:	ldr	r2, [fp, #-16]
   1325c:	ldr	r1, [fp, #-12]
   13260:	ldr	r0, [fp, #-8]
   13264:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13268:	mov	r3, r0
   1326c:	b	13280 <_start@@Base+0xd70>
   13270:	ldrsb	r2, [fp, #4]
   13274:	ldr	r3, [fp, #12]
   13278:	strb	r2, [r3]
   1327c:	ldr	r3, [fp, #-12]
   13280:	mov	r0, r3
   13284:	sub	sp, fp, #4
   13288:	pop	{fp, pc}
   1328c:	push	{fp, lr}
   13290:	add	fp, sp, #4
   13294:	sub	sp, sp, #16
   13298:	str	r0, [fp, #-8]
   1329c:	str	r1, [fp, #-12]
   132a0:	str	r2, [fp, #-16]
   132a4:	str	r3, [fp, #-20]	; 0xffffffec
   132a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132ac:	cmp	r3, #0
   132b0:	beq	132c8 <_start@@Base+0xdb8>
   132b4:	ldrd	r0, [fp, #4]
   132b8:	bl	25d64 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
   132bc:	mov	r3, r0
   132c0:	eor	r2, r3, #-2147483648	; 0x80000000
   132c4:	b	132d4 <_start@@Base+0xdc4>
   132c8:	ldrd	r0, [fp, #4]
   132cc:	bl	25d64 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
   132d0:	mov	r2, r0
   132d4:	ldr	r3, [fp, #12]
   132d8:	str	r2, [r3]
   132dc:	ldr	r3, [fp, #-12]
   132e0:	mov	r0, r3
   132e4:	sub	sp, fp, #4
   132e8:	pop	{fp, pc}
   132ec:	push	{fp, lr}
   132f0:	add	fp, sp, #4
   132f4:	sub	sp, sp, #16
   132f8:	str	r0, [fp, #-8]
   132fc:	str	r1, [fp, #-12]
   13300:	str	r2, [fp, #-16]
   13304:	str	r3, [fp, #-20]	; 0xffffffec
   13308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1330c:	cmp	r3, #0
   13310:	beq	1332c <_start@@Base+0xe1c>
   13314:	ldrd	r0, [fp, #4]
   13318:	bl	25b2c <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   1331c:	mov	r2, r0
   13320:	mov	r3, r1
   13324:	eor	r3, r3, #-2147483648	; 0x80000000
   13328:	b	1333c <_start@@Base+0xe2c>
   1332c:	ldrd	r0, [fp, #4]
   13330:	bl	25b2c <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   13334:	mov	r2, r0
   13338:	mov	r3, r1
   1333c:	ldr	r1, [fp, #12]
   13340:	strd	r2, [r1]
   13344:	ldr	r3, [fp, #-12]
   13348:	mov	r0, r3
   1334c:	sub	sp, fp, #4
   13350:	pop	{fp, pc}
   13354:	push	{fp, lr}
   13358:	add	fp, sp, #4
   1335c:	sub	sp, sp, #56	; 0x38
   13360:	str	r0, [fp, #-32]	; 0xffffffe0
   13364:	str	r1, [fp, #-36]	; 0xffffffdc
   13368:	str	r2, [fp, #-40]	; 0xffffffd8
   1336c:	str	r3, [fp, #-44]	; 0xffffffd4
   13370:	mov	r2, #0
   13374:	mov	r3, #0
   13378:	strd	r2, [fp, #-20]	; 0xffffffec
   1337c:	mov	r3, #0
   13380:	str	r3, [fp, #-24]	; 0xffffffe8
   13384:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13388:	str	r3, [fp, #-8]
   1338c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13390:	mov	r2, #0
   13394:	str	r2, [r3]
   13398:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1339c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   133a0:	cmp	r2, r3
   133a4:	bne	133b0 <_start@@Base+0xea0>
   133a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   133ac:	b	13418 <_start@@Base+0xf08>
   133b0:	sub	r2, fp, #24
   133b4:	sub	r3, fp, #20
   133b8:	str	r3, [sp]
   133bc:	mov	r3, r2
   133c0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   133c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   133c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   133cc:	bl	23f80 <flatcc_json_parser_integer@@Base>
   133d0:	str	r0, [fp, #-36]	; 0xffffffdc
   133d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   133d8:	ldr	r3, [fp, #-8]
   133dc:	cmp	r2, r3
   133e0:	beq	13414 <_start@@Base+0xf04>
   133e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133e8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   133ec:	ldr	r1, [fp, #-44]	; 0xffffffd4
   133f0:	str	r1, [sp, #8]
   133f4:	strd	r2, [sp]
   133f8:	mov	r3, r0
   133fc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13400:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13404:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13408:	bl	12de8 <_start@@Base+0x8d8>
   1340c:	mov	r3, r0
   13410:	b	13418 <_start@@Base+0xf08>
   13414:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13418:	mov	r0, r3
   1341c:	sub	sp, fp, #4
   13420:	pop	{fp, pc}
   13424:	push	{fp, lr}
   13428:	add	fp, sp, #4
   1342c:	sub	sp, sp, #56	; 0x38
   13430:	str	r0, [fp, #-32]	; 0xffffffe0
   13434:	str	r1, [fp, #-36]	; 0xffffffdc
   13438:	str	r2, [fp, #-40]	; 0xffffffd8
   1343c:	str	r3, [fp, #-44]	; 0xffffffd4
   13440:	mov	r2, #0
   13444:	mov	r3, #0
   13448:	strd	r2, [fp, #-20]	; 0xffffffec
   1344c:	mov	r3, #0
   13450:	str	r3, [fp, #-24]	; 0xffffffe8
   13454:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13458:	str	r3, [fp, #-8]
   1345c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13460:	mov	r2, #0
   13464:	strb	r2, [r3]
   13468:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1346c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13470:	cmp	r2, r3
   13474:	bne	13480 <_start@@Base+0xf70>
   13478:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1347c:	b	134e8 <_start@@Base+0xfd8>
   13480:	sub	r2, fp, #24
   13484:	sub	r3, fp, #20
   13488:	str	r3, [sp]
   1348c:	mov	r3, r2
   13490:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13494:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13498:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1349c:	bl	23f80 <flatcc_json_parser_integer@@Base>
   134a0:	str	r0, [fp, #-36]	; 0xffffffdc
   134a4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   134a8:	ldr	r3, [fp, #-8]
   134ac:	cmp	r2, r3
   134b0:	beq	134e4 <_start@@Base+0xfd4>
   134b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   134b8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   134bc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   134c0:	str	r1, [sp, #8]
   134c4:	strd	r2, [sp]
   134c8:	mov	r3, r0
   134cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   134d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   134d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   134d8:	bl	12f14 <_start@@Base+0xa04>
   134dc:	mov	r3, r0
   134e0:	b	134e8 <_start@@Base+0xfd8>
   134e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   134e8:	mov	r0, r3
   134ec:	sub	sp, fp, #4
   134f0:	pop	{fp, pc}
   134f4:	push	{fp, lr}
   134f8:	add	fp, sp, #4
   134fc:	sub	sp, sp, #56	; 0x38
   13500:	str	r0, [fp, #-32]	; 0xffffffe0
   13504:	str	r1, [fp, #-36]	; 0xffffffdc
   13508:	str	r2, [fp, #-40]	; 0xffffffd8
   1350c:	str	r3, [fp, #-44]	; 0xffffffd4
   13510:	mov	r2, #0
   13514:	mov	r3, #0
   13518:	strd	r2, [fp, #-20]	; 0xffffffec
   1351c:	mov	r3, #0
   13520:	str	r3, [fp, #-24]	; 0xffffffe8
   13524:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13528:	str	r3, [fp, #-8]
   1352c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13530:	mov	r2, #0
   13534:	mov	r3, #0
   13538:	strd	r2, [r1]
   1353c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13540:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13544:	cmp	r2, r3
   13548:	bne	13554 <_start@@Base+0x1044>
   1354c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13550:	b	135bc <_start@@Base+0x10ac>
   13554:	sub	r2, fp, #24
   13558:	sub	r3, fp, #20
   1355c:	str	r3, [sp]
   13560:	mov	r3, r2
   13564:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13568:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1356c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13570:	bl	23f80 <flatcc_json_parser_integer@@Base>
   13574:	str	r0, [fp, #-36]	; 0xffffffdc
   13578:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1357c:	ldr	r3, [fp, #-8]
   13580:	cmp	r2, r3
   13584:	beq	135b8 <_start@@Base+0x10a8>
   13588:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1358c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13590:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13594:	str	r1, [sp, #8]
   13598:	strd	r2, [sp]
   1359c:	mov	r3, r0
   135a0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   135a4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   135a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   135ac:	bl	12fa0 <_start@@Base+0xa90>
   135b0:	mov	r3, r0
   135b4:	b	135bc <_start@@Base+0x10ac>
   135b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   135bc:	mov	r0, r3
   135c0:	sub	sp, fp, #4
   135c4:	pop	{fp, pc}
   135c8:	push	{r4, fp, lr}
   135cc:	add	fp, sp, #8
   135d0:	sub	sp, sp, #76	; 0x4c
   135d4:	str	r0, [fp, #-56]	; 0xffffffc8
   135d8:	str	r1, [fp, #-60]	; 0xffffffc4
   135dc:	str	r2, [fp, #-64]	; 0xffffffc0
   135e0:	str	r3, [fp, #-68]	; 0xffffffbc
   135e4:	mov	r2, #0
   135e8:	mov	r3, #0
   135ec:	strd	r2, [fp, #-36]	; 0xffffffdc
   135f0:	mov	r3, #0
   135f4:	str	r3, [fp, #-20]	; 0xffffffec
   135f8:	ldr	r1, [fp, #4]
   135fc:	mov	r2, #0
   13600:	mov	r3, #0
   13604:	strd	r2, [r1]
   13608:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1360c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13610:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13614:	bl	12cac <_start@@Base+0x79c>
   13618:	str	r0, [fp, #-60]	; 0xffffffc4
   1361c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13620:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13624:	cmp	r2, r3
   13628:	bne	13634 <_start@@Base+0x1124>
   1362c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13630:	b	13794 <_start@@Base+0x1284>
   13634:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13638:	str	r3, [fp, #-16]
   1363c:	ldr	r3, [fp, #-16]
   13640:	ldr	r4, [r3]
   13644:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13648:	str	r3, [fp, #-24]	; 0xffffffe8
   1364c:	sub	r2, fp, #48	; 0x30
   13650:	sub	r3, fp, #52	; 0x34
   13654:	str	r3, [sp, #4]
   13658:	sub	r3, fp, #44	; 0x2c
   1365c:	str	r3, [sp]
   13660:	mov	r3, r2
   13664:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13668:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1366c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13670:	blx	r4
   13674:	str	r0, [fp, #-60]	; 0xffffffc4
   13678:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1367c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13680:	cmp	r2, r3
   13684:	bne	13690 <_start@@Base+0x1180>
   13688:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1368c:	b	13794 <_start@@Base+0x1284>
   13690:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13698:	cmp	r2, r3
   1369c:	bne	136bc <_start@@Base+0x11ac>
   136a0:	ldr	r3, [fp, #-16]
   136a4:	add	r3, r3, #4
   136a8:	str	r3, [fp, #-16]
   136ac:	ldr	r3, [fp, #-16]
   136b0:	ldr	r3, [r3]
   136b4:	cmp	r3, #0
   136b8:	bne	1363c <_start@@Base+0x112c>
   136bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   136c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   136c4:	cmp	r2, r3
   136c8:	bne	136e8 <_start@@Base+0x11d8>
   136cc:	mov	r3, #23
   136d0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   136d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   136d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   136dc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   136e0:	mov	r3, r0
   136e4:	b	13794 <_start@@Base+0x1284>
   136e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   136ec:	add	r2, r3, #1
   136f0:	str	r2, [fp, #-20]	; 0xffffffec
   136f4:	cmp	r3, #0
   136f8:	beq	13728 <_start@@Base+0x1218>
   136fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13700:	ldr	r3, [r3, #12]
   13704:	cmp	r3, #0
   13708:	beq	13728 <_start@@Base+0x1218>
   1370c:	mov	r3, #14
   13710:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13714:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13718:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1371c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13720:	mov	r3, r0
   13724:	b	13794 <_start@@Base+0x1284>
   13728:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1372c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13730:	sub	r1, fp, #36	; 0x24
   13734:	str	r1, [sp, #8]
   13738:	strd	r2, [sp]
   1373c:	mov	r3, r0
   13740:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13744:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13748:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1374c:	bl	12d0c <_start@@Base+0x7fc>
   13750:	mov	r2, r0
   13754:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13758:	cmp	r2, r3
   1375c:	bne	13768 <_start@@Base+0x1258>
   13760:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13764:	b	13794 <_start@@Base+0x1284>
   13768:	ldr	r3, [fp, #4]
   1376c:	ldrd	r0, [r3]
   13770:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13774:	adds	r2, r2, r0
   13778:	adc	r3, r3, r1
   1377c:	ldr	r1, [fp, #4]
   13780:	strd	r2, [r1]
   13784:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13788:	cmp	r3, #0
   1378c:	bne	13634 <_start@@Base+0x1124>
   13790:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13794:	mov	r0, r3
   13798:	sub	sp, fp, #8
   1379c:	pop	{r4, fp, pc}
   137a0:	push	{r4, fp, lr}
   137a4:	add	fp, sp, #8
   137a8:	sub	sp, sp, #68	; 0x44
   137ac:	str	r0, [fp, #-48]	; 0xffffffd0
   137b0:	str	r1, [fp, #-52]	; 0xffffffcc
   137b4:	str	r2, [fp, #-56]	; 0xffffffc8
   137b8:	str	r3, [fp, #-60]	; 0xffffffc4
   137bc:	mov	r3, #0
   137c0:	str	r3, [fp, #-28]	; 0xffffffe4
   137c4:	mov	r3, #0
   137c8:	str	r3, [fp, #-20]	; 0xffffffec
   137cc:	ldr	r3, [fp, #4]
   137d0:	mov	r2, #0
   137d4:	str	r2, [r3]
   137d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   137dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   137e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   137e4:	bl	12cac <_start@@Base+0x79c>
   137e8:	str	r0, [fp, #-52]	; 0xffffffcc
   137ec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   137f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137f4:	cmp	r2, r3
   137f8:	bne	13804 <_start@@Base+0x12f4>
   137fc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13800:	b	13960 <_start@@Base+0x1450>
   13804:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13808:	str	r3, [fp, #-16]
   1380c:	ldr	r3, [fp, #-16]
   13810:	ldr	r4, [r3]
   13814:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13818:	str	r3, [fp, #-24]	; 0xffffffe8
   1381c:	sub	r2, fp, #40	; 0x28
   13820:	sub	r3, fp, #44	; 0x2c
   13824:	str	r3, [sp, #4]
   13828:	sub	r3, fp, #36	; 0x24
   1382c:	str	r3, [sp]
   13830:	mov	r3, r2
   13834:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13838:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1383c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13840:	blx	r4
   13844:	str	r0, [fp, #-52]	; 0xffffffcc
   13848:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1384c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13850:	cmp	r2, r3
   13854:	bne	13860 <_start@@Base+0x1350>
   13858:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1385c:	b	13960 <_start@@Base+0x1450>
   13860:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13864:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13868:	cmp	r2, r3
   1386c:	bne	1388c <_start@@Base+0x137c>
   13870:	ldr	r3, [fp, #-16]
   13874:	add	r3, r3, #4
   13878:	str	r3, [fp, #-16]
   1387c:	ldr	r3, [fp, #-16]
   13880:	ldr	r3, [r3]
   13884:	cmp	r3, #0
   13888:	bne	1380c <_start@@Base+0x12fc>
   1388c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13890:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13894:	cmp	r2, r3
   13898:	bne	138b8 <_start@@Base+0x13a8>
   1389c:	mov	r3, #23
   138a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   138a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   138ac:	bl	222fc <flatcc_json_parser_set_error@@Base>
   138b0:	mov	r3, r0
   138b4:	b	13960 <_start@@Base+0x1450>
   138b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138bc:	add	r2, r3, #1
   138c0:	str	r2, [fp, #-20]	; 0xffffffec
   138c4:	cmp	r3, #0
   138c8:	beq	138f8 <_start@@Base+0x13e8>
   138cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138d0:	ldr	r3, [r3, #12]
   138d4:	cmp	r3, #0
   138d8:	beq	138f8 <_start@@Base+0x13e8>
   138dc:	mov	r3, #14
   138e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   138e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   138ec:	bl	222fc <flatcc_json_parser_set_error@@Base>
   138f0:	mov	r3, r0
   138f4:	b	13960 <_start@@Base+0x1450>
   138f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   138fc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13900:	sub	r1, fp, #28
   13904:	str	r1, [sp, #8]
   13908:	strd	r2, [sp]
   1390c:	mov	r3, r0
   13910:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13914:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13918:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1391c:	bl	12de8 <_start@@Base+0x8d8>
   13920:	mov	r2, r0
   13924:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13928:	cmp	r2, r3
   1392c:	bne	13938 <_start@@Base+0x1428>
   13930:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13934:	b	13960 <_start@@Base+0x1450>
   13938:	ldr	r3, [fp, #4]
   1393c:	ldr	r2, [r3]
   13940:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13944:	add	r2, r2, r3
   13948:	ldr	r3, [fp, #4]
   1394c:	str	r2, [r3]
   13950:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13954:	cmp	r3, #0
   13958:	bne	13804 <_start@@Base+0x12f4>
   1395c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13960:	mov	r0, r3
   13964:	sub	sp, fp, #8
   13968:	pop	{r4, fp, pc}
   1396c:	push	{r4, fp, lr}
   13970:	add	fp, sp, #8
   13974:	sub	sp, sp, #68	; 0x44
   13978:	str	r0, [fp, #-48]	; 0xffffffd0
   1397c:	str	r1, [fp, #-52]	; 0xffffffcc
   13980:	str	r2, [fp, #-56]	; 0xffffffc8
   13984:	str	r3, [fp, #-60]	; 0xffffffc4
   13988:	mov	r3, #0
   1398c:	strh	r3, [fp, #-26]	; 0xffffffe6
   13990:	mov	r3, #0
   13994:	str	r3, [fp, #-20]	; 0xffffffec
   13998:	ldr	r3, [fp, #4]
   1399c:	mov	r2, #0
   139a0:	strh	r2, [r3]
   139a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   139a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   139ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   139b0:	bl	12cac <_start@@Base+0x79c>
   139b4:	str	r0, [fp, #-52]	; 0xffffffcc
   139b8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   139bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139c0:	cmp	r2, r3
   139c4:	bne	139d0 <_start@@Base+0x14c0>
   139c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   139cc:	b	13b30 <_start@@Base+0x1620>
   139d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139d4:	str	r3, [fp, #-16]
   139d8:	ldr	r3, [fp, #-16]
   139dc:	ldr	r4, [r3]
   139e0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   139e4:	str	r3, [fp, #-24]	; 0xffffffe8
   139e8:	sub	r2, fp, #40	; 0x28
   139ec:	sub	r3, fp, #44	; 0x2c
   139f0:	str	r3, [sp, #4]
   139f4:	sub	r3, fp, #36	; 0x24
   139f8:	str	r3, [sp]
   139fc:	mov	r3, r2
   13a00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a04:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13a08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13a0c:	blx	r4
   13a10:	str	r0, [fp, #-52]	; 0xffffffcc
   13a14:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a1c:	cmp	r2, r3
   13a20:	bne	13a2c <_start@@Base+0x151c>
   13a24:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13a28:	b	13b30 <_start@@Base+0x1620>
   13a2c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13a30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a34:	cmp	r2, r3
   13a38:	bne	13a58 <_start@@Base+0x1548>
   13a3c:	ldr	r3, [fp, #-16]
   13a40:	add	r3, r3, #4
   13a44:	str	r3, [fp, #-16]
   13a48:	ldr	r3, [fp, #-16]
   13a4c:	ldr	r3, [r3]
   13a50:	cmp	r3, #0
   13a54:	bne	139d8 <_start@@Base+0x14c8>
   13a58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13a5c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13a60:	cmp	r2, r3
   13a64:	bne	13a84 <_start@@Base+0x1574>
   13a68:	mov	r3, #23
   13a6c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a70:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13a74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13a78:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13a7c:	mov	r3, r0
   13a80:	b	13b30 <_start@@Base+0x1620>
   13a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a88:	add	r2, r3, #1
   13a8c:	str	r2, [fp, #-20]	; 0xffffffec
   13a90:	cmp	r3, #0
   13a94:	beq	13ac4 <_start@@Base+0x15b4>
   13a98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a9c:	ldr	r3, [r3, #12]
   13aa0:	cmp	r3, #0
   13aa4:	beq	13ac4 <_start@@Base+0x15b4>
   13aa8:	mov	r3, #14
   13aac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13ab0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13ab4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ab8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13abc:	mov	r3, r0
   13ac0:	b	13b30 <_start@@Base+0x1620>
   13ac4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13ac8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13acc:	sub	r1, fp, #26
   13ad0:	str	r1, [sp, #8]
   13ad4:	strd	r2, [sp]
   13ad8:	mov	r3, r0
   13adc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13ae0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13ae4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ae8:	bl	12e7c <_start@@Base+0x96c>
   13aec:	mov	r2, r0
   13af0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13af4:	cmp	r2, r3
   13af8:	bne	13b04 <_start@@Base+0x15f4>
   13afc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b00:	b	13b30 <_start@@Base+0x1620>
   13b04:	ldr	r3, [fp, #4]
   13b08:	ldrh	r2, [r3]
   13b0c:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   13b10:	add	r3, r2, r3
   13b14:	uxth	r2, r3
   13b18:	ldr	r3, [fp, #4]
   13b1c:	strh	r2, [r3]
   13b20:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13b24:	cmp	r3, #0
   13b28:	bne	139d0 <_start@@Base+0x14c0>
   13b2c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13b30:	mov	r0, r3
   13b34:	sub	sp, fp, #8
   13b38:	pop	{r4, fp, pc}
   13b3c:	push	{r4, fp, lr}
   13b40:	add	fp, sp, #8
   13b44:	sub	sp, sp, #68	; 0x44
   13b48:	str	r0, [fp, #-48]	; 0xffffffd0
   13b4c:	str	r1, [fp, #-52]	; 0xffffffcc
   13b50:	str	r2, [fp, #-56]	; 0xffffffc8
   13b54:	str	r3, [fp, #-60]	; 0xffffffc4
   13b58:	mov	r3, #0
   13b5c:	strb	r3, [fp, #-25]	; 0xffffffe7
   13b60:	mov	r3, #0
   13b64:	str	r3, [fp, #-20]	; 0xffffffec
   13b68:	ldr	r3, [fp, #4]
   13b6c:	mov	r2, #0
   13b70:	strb	r2, [r3]
   13b74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b78:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13b7c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13b80:	bl	12cac <_start@@Base+0x79c>
   13b84:	str	r0, [fp, #-52]	; 0xffffffcc
   13b88:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13b8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b90:	cmp	r2, r3
   13b94:	bne	13ba0 <_start@@Base+0x1690>
   13b98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13b9c:	b	13d00 <_start@@Base+0x17f0>
   13ba0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ba4:	str	r3, [fp, #-16]
   13ba8:	ldr	r3, [fp, #-16]
   13bac:	ldr	r4, [r3]
   13bb0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13bb4:	str	r3, [fp, #-24]	; 0xffffffe8
   13bb8:	sub	r2, fp, #40	; 0x28
   13bbc:	sub	r3, fp, #44	; 0x2c
   13bc0:	str	r3, [sp, #4]
   13bc4:	sub	r3, fp, #36	; 0x24
   13bc8:	str	r3, [sp]
   13bcc:	mov	r3, r2
   13bd0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13bd4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13bd8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13bdc:	blx	r4
   13be0:	str	r0, [fp, #-52]	; 0xffffffcc
   13be4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13be8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13bec:	cmp	r2, r3
   13bf0:	bne	13bfc <_start@@Base+0x16ec>
   13bf4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13bf8:	b	13d00 <_start@@Base+0x17f0>
   13bfc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13c00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c04:	cmp	r2, r3
   13c08:	bne	13c28 <_start@@Base+0x1718>
   13c0c:	ldr	r3, [fp, #-16]
   13c10:	add	r3, r3, #4
   13c14:	str	r3, [fp, #-16]
   13c18:	ldr	r3, [fp, #-16]
   13c1c:	ldr	r3, [r3]
   13c20:	cmp	r3, #0
   13c24:	bne	13ba8 <_start@@Base+0x1698>
   13c28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13c2c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13c30:	cmp	r2, r3
   13c34:	bne	13c54 <_start@@Base+0x1744>
   13c38:	mov	r3, #23
   13c3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c40:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c44:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13c48:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13c4c:	mov	r3, r0
   13c50:	b	13d00 <_start@@Base+0x17f0>
   13c54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c58:	add	r2, r3, #1
   13c5c:	str	r2, [fp, #-20]	; 0xffffffec
   13c60:	cmp	r3, #0
   13c64:	beq	13c94 <_start@@Base+0x1784>
   13c68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c6c:	ldr	r3, [r3, #12]
   13c70:	cmp	r3, #0
   13c74:	beq	13c94 <_start@@Base+0x1784>
   13c78:	mov	r3, #14
   13c7c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13c80:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13c88:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13c8c:	mov	r3, r0
   13c90:	b	13d00 <_start@@Base+0x17f0>
   13c94:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13c98:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13c9c:	sub	r1, fp, #25
   13ca0:	str	r1, [sp, #8]
   13ca4:	strd	r2, [sp]
   13ca8:	mov	r3, r0
   13cac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13cb0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13cb4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13cb8:	bl	12f14 <_start@@Base+0xa04>
   13cbc:	mov	r2, r0
   13cc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13cc4:	cmp	r2, r3
   13cc8:	bne	13cd4 <_start@@Base+0x17c4>
   13ccc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13cd0:	b	13d00 <_start@@Base+0x17f0>
   13cd4:	ldr	r3, [fp, #4]
   13cd8:	ldrb	r2, [r3]
   13cdc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13ce0:	add	r3, r2, r3
   13ce4:	uxtb	r2, r3
   13ce8:	ldr	r3, [fp, #4]
   13cec:	strb	r2, [r3]
   13cf0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13cf4:	cmp	r3, #0
   13cf8:	bne	13ba0 <_start@@Base+0x1690>
   13cfc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13d00:	mov	r0, r3
   13d04:	sub	sp, fp, #8
   13d08:	pop	{r4, fp, pc}
   13d0c:	push	{r4, fp, lr}
   13d10:	add	fp, sp, #8
   13d14:	sub	sp, sp, #76	; 0x4c
   13d18:	str	r0, [fp, #-56]	; 0xffffffc8
   13d1c:	str	r1, [fp, #-60]	; 0xffffffc4
   13d20:	str	r2, [fp, #-64]	; 0xffffffc0
   13d24:	str	r3, [fp, #-68]	; 0xffffffbc
   13d28:	mov	r2, #0
   13d2c:	mov	r3, #0
   13d30:	strd	r2, [fp, #-36]	; 0xffffffdc
   13d34:	mov	r3, #0
   13d38:	str	r3, [fp, #-20]	; 0xffffffec
   13d3c:	ldr	r1, [fp, #4]
   13d40:	mov	r2, #0
   13d44:	mov	r3, #0
   13d48:	strd	r2, [r1]
   13d4c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13d50:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13d54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d58:	bl	12cac <_start@@Base+0x79c>
   13d5c:	str	r0, [fp, #-60]	; 0xffffffc4
   13d60:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13d64:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13d68:	cmp	r2, r3
   13d6c:	bne	13d78 <_start@@Base+0x1868>
   13d70:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13d74:	b	13ed8 <_start@@Base+0x19c8>
   13d78:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13d7c:	str	r3, [fp, #-16]
   13d80:	ldr	r3, [fp, #-16]
   13d84:	ldr	r4, [r3]
   13d88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13d8c:	str	r3, [fp, #-24]	; 0xffffffe8
   13d90:	sub	r2, fp, #48	; 0x30
   13d94:	sub	r3, fp, #52	; 0x34
   13d98:	str	r3, [sp, #4]
   13d9c:	sub	r3, fp, #44	; 0x2c
   13da0:	str	r3, [sp]
   13da4:	mov	r3, r2
   13da8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13dac:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13db0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13db4:	blx	r4
   13db8:	str	r0, [fp, #-60]	; 0xffffffc4
   13dbc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13dc0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13dc4:	cmp	r2, r3
   13dc8:	bne	13dd4 <_start@@Base+0x18c4>
   13dcc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13dd0:	b	13ed8 <_start@@Base+0x19c8>
   13dd4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13dd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ddc:	cmp	r2, r3
   13de0:	bne	13e00 <_start@@Base+0x18f0>
   13de4:	ldr	r3, [fp, #-16]
   13de8:	add	r3, r3, #4
   13dec:	str	r3, [fp, #-16]
   13df0:	ldr	r3, [fp, #-16]
   13df4:	ldr	r3, [r3]
   13df8:	cmp	r3, #0
   13dfc:	bne	13d80 <_start@@Base+0x1870>
   13e00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13e04:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13e08:	cmp	r2, r3
   13e0c:	bne	13e2c <_start@@Base+0x191c>
   13e10:	mov	r3, #23
   13e14:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13e18:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e20:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13e24:	mov	r3, r0
   13e28:	b	13ed8 <_start@@Base+0x19c8>
   13e2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e30:	add	r2, r3, #1
   13e34:	str	r2, [fp, #-20]	; 0xffffffec
   13e38:	cmp	r3, #0
   13e3c:	beq	13e6c <_start@@Base+0x195c>
   13e40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e44:	ldr	r3, [r3, #12]
   13e48:	cmp	r3, #0
   13e4c:	beq	13e6c <_start@@Base+0x195c>
   13e50:	mov	r3, #14
   13e54:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13e58:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e60:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13e64:	mov	r3, r0
   13e68:	b	13ed8 <_start@@Base+0x19c8>
   13e6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e70:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13e74:	sub	r1, fp, #36	; 0x24
   13e78:	str	r1, [sp, #8]
   13e7c:	strd	r2, [sp]
   13e80:	mov	r3, r0
   13e84:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13e88:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e8c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e90:	bl	12fa0 <_start@@Base+0xa90>
   13e94:	mov	r2, r0
   13e98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13e9c:	cmp	r2, r3
   13ea0:	bne	13eac <_start@@Base+0x199c>
   13ea4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13ea8:	b	13ed8 <_start@@Base+0x19c8>
   13eac:	ldr	r3, [fp, #4]
   13eb0:	ldrd	r0, [r3]
   13eb4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13eb8:	adds	r2, r2, r0
   13ebc:	adc	r3, r3, r1
   13ec0:	ldr	r1, [fp, #4]
   13ec4:	strd	r2, [r1]
   13ec8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13ecc:	cmp	r3, #0
   13ed0:	bne	13d78 <_start@@Base+0x1868>
   13ed4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ed8:	mov	r0, r3
   13edc:	sub	sp, fp, #8
   13ee0:	pop	{r4, fp, pc}
   13ee4:	push	{r4, fp, lr}
   13ee8:	add	fp, sp, #8
   13eec:	sub	sp, sp, #68	; 0x44
   13ef0:	str	r0, [fp, #-48]	; 0xffffffd0
   13ef4:	str	r1, [fp, #-52]	; 0xffffffcc
   13ef8:	str	r2, [fp, #-56]	; 0xffffffc8
   13efc:	str	r3, [fp, #-60]	; 0xffffffc4
   13f00:	mov	r3, #0
   13f04:	str	r3, [fp, #-28]	; 0xffffffe4
   13f08:	mov	r3, #0
   13f0c:	str	r3, [fp, #-20]	; 0xffffffec
   13f10:	ldr	r3, [fp, #4]
   13f14:	mov	r2, #0
   13f18:	str	r2, [r3]
   13f1c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f20:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13f24:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13f28:	bl	12cac <_start@@Base+0x79c>
   13f2c:	str	r0, [fp, #-52]	; 0xffffffcc
   13f30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13f34:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f38:	cmp	r2, r3
   13f3c:	bne	13f48 <_start@@Base+0x1a38>
   13f40:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13f44:	b	140a4 <_start@@Base+0x1b94>
   13f48:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13f4c:	str	r3, [fp, #-16]
   13f50:	ldr	r3, [fp, #-16]
   13f54:	ldr	r4, [r3]
   13f58:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13f5c:	str	r3, [fp, #-24]	; 0xffffffe8
   13f60:	sub	r2, fp, #40	; 0x28
   13f64:	sub	r3, fp, #44	; 0x2c
   13f68:	str	r3, [sp, #4]
   13f6c:	sub	r3, fp, #36	; 0x24
   13f70:	str	r3, [sp]
   13f74:	mov	r3, r2
   13f78:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f7c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13f80:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13f84:	blx	r4
   13f88:	str	r0, [fp, #-52]	; 0xffffffcc
   13f8c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13f90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f94:	cmp	r2, r3
   13f98:	bne	13fa4 <_start@@Base+0x1a94>
   13f9c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13fa0:	b	140a4 <_start@@Base+0x1b94>
   13fa4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13fa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13fac:	cmp	r2, r3
   13fb0:	bne	13fd0 <_start@@Base+0x1ac0>
   13fb4:	ldr	r3, [fp, #-16]
   13fb8:	add	r3, r3, #4
   13fbc:	str	r3, [fp, #-16]
   13fc0:	ldr	r3, [fp, #-16]
   13fc4:	ldr	r3, [r3]
   13fc8:	cmp	r3, #0
   13fcc:	bne	13f50 <_start@@Base+0x1a40>
   13fd0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13fd4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13fd8:	cmp	r2, r3
   13fdc:	bne	13ffc <_start@@Base+0x1aec>
   13fe0:	mov	r3, #23
   13fe4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13fe8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13fec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13ff0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   13ff4:	mov	r3, r0
   13ff8:	b	140a4 <_start@@Base+0x1b94>
   13ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14000:	add	r2, r3, #1
   14004:	str	r2, [fp, #-20]	; 0xffffffec
   14008:	cmp	r3, #0
   1400c:	beq	1403c <_start@@Base+0x1b2c>
   14010:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14014:	ldr	r3, [r3, #12]
   14018:	cmp	r3, #0
   1401c:	beq	1403c <_start@@Base+0x1b2c>
   14020:	mov	r3, #14
   14024:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14028:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1402c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14030:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14034:	mov	r3, r0
   14038:	b	140a4 <_start@@Base+0x1b94>
   1403c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14040:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14044:	sub	r1, fp, #28
   14048:	str	r1, [sp, #8]
   1404c:	strd	r2, [sp]
   14050:	mov	r3, r0
   14054:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14058:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1405c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14060:	bl	13054 <_start@@Base+0xb44>
   14064:	mov	r2, r0
   14068:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1406c:	cmp	r2, r3
   14070:	bne	1407c <_start@@Base+0x1b6c>
   14074:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14078:	b	140a4 <_start@@Base+0x1b94>
   1407c:	ldr	r3, [fp, #4]
   14080:	ldr	r2, [r3]
   14084:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14088:	add	r2, r2, r3
   1408c:	ldr	r3, [fp, #4]
   14090:	str	r2, [r3]
   14094:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14098:	cmp	r3, #0
   1409c:	bne	13f48 <_start@@Base+0x1a38>
   140a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   140a4:	mov	r0, r3
   140a8:	sub	sp, fp, #8
   140ac:	pop	{r4, fp, pc}
   140b0:	push	{r4, fp, lr}
   140b4:	add	fp, sp, #8
   140b8:	sub	sp, sp, #68	; 0x44
   140bc:	str	r0, [fp, #-48]	; 0xffffffd0
   140c0:	str	r1, [fp, #-52]	; 0xffffffcc
   140c4:	str	r2, [fp, #-56]	; 0xffffffc8
   140c8:	str	r3, [fp, #-60]	; 0xffffffc4
   140cc:	mov	r3, #0
   140d0:	strh	r3, [fp, #-26]	; 0xffffffe6
   140d4:	mov	r3, #0
   140d8:	str	r3, [fp, #-20]	; 0xffffffec
   140dc:	ldr	r3, [fp, #4]
   140e0:	mov	r2, #0
   140e4:	strh	r2, [r3]
   140e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   140ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   140f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   140f4:	bl	12cac <_start@@Base+0x79c>
   140f8:	str	r0, [fp, #-52]	; 0xffffffcc
   140fc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14100:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14104:	cmp	r2, r3
   14108:	bne	14114 <_start@@Base+0x1c04>
   1410c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14110:	b	14280 <_start@@Base+0x1d70>
   14114:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14118:	str	r3, [fp, #-16]
   1411c:	ldr	r3, [fp, #-16]
   14120:	ldr	r4, [r3]
   14124:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14128:	str	r3, [fp, #-24]	; 0xffffffe8
   1412c:	sub	r2, fp, #40	; 0x28
   14130:	sub	r3, fp, #44	; 0x2c
   14134:	str	r3, [sp, #4]
   14138:	sub	r3, fp, #36	; 0x24
   1413c:	str	r3, [sp]
   14140:	mov	r3, r2
   14144:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14148:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1414c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14150:	blx	r4
   14154:	str	r0, [fp, #-52]	; 0xffffffcc
   14158:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1415c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14160:	cmp	r2, r3
   14164:	bne	14170 <_start@@Base+0x1c60>
   14168:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1416c:	b	14280 <_start@@Base+0x1d70>
   14170:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14174:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14178:	cmp	r2, r3
   1417c:	bne	1419c <_start@@Base+0x1c8c>
   14180:	ldr	r3, [fp, #-16]
   14184:	add	r3, r3, #4
   14188:	str	r3, [fp, #-16]
   1418c:	ldr	r3, [fp, #-16]
   14190:	ldr	r3, [r3]
   14194:	cmp	r3, #0
   14198:	bne	1411c <_start@@Base+0x1c0c>
   1419c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   141a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   141a4:	cmp	r2, r3
   141a8:	bne	141c8 <_start@@Base+0x1cb8>
   141ac:	mov	r3, #23
   141b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   141b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   141b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   141bc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   141c0:	mov	r3, r0
   141c4:	b	14280 <_start@@Base+0x1d70>
   141c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141cc:	add	r2, r3, #1
   141d0:	str	r2, [fp, #-20]	; 0xffffffec
   141d4:	cmp	r3, #0
   141d8:	beq	14208 <_start@@Base+0x1cf8>
   141dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   141e0:	ldr	r3, [r3, #12]
   141e4:	cmp	r3, #0
   141e8:	beq	14208 <_start@@Base+0x1cf8>
   141ec:	mov	r3, #14
   141f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   141f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   141f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   141fc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14200:	mov	r3, r0
   14204:	b	14280 <_start@@Base+0x1d70>
   14208:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1420c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14210:	sub	r1, fp, #26
   14214:	str	r1, [sp, #8]
   14218:	strd	r2, [sp]
   1421c:	mov	r3, r0
   14220:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14224:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14228:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1422c:	bl	13110 <_start@@Base+0xc00>
   14230:	mov	r2, r0
   14234:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14238:	cmp	r2, r3
   1423c:	bne	14248 <_start@@Base+0x1d38>
   14240:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14244:	b	14280 <_start@@Base+0x1d70>
   14248:	ldr	r3, [fp, #4]
   1424c:	ldrsh	r3, [r3]
   14250:	uxth	r2, r3
   14254:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   14258:	uxth	r3, r3
   1425c:	add	r3, r2, r3
   14260:	uxth	r3, r3
   14264:	sxth	r2, r3
   14268:	ldr	r3, [fp, #4]
   1426c:	strh	r2, [r3]
   14270:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14274:	cmp	r3, #0
   14278:	bne	14114 <_start@@Base+0x1c04>
   1427c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14280:	mov	r0, r3
   14284:	sub	sp, fp, #8
   14288:	pop	{r4, fp, pc}
   1428c:	push	{r4, fp, lr}
   14290:	add	fp, sp, #8
   14294:	sub	sp, sp, #68	; 0x44
   14298:	str	r0, [fp, #-48]	; 0xffffffd0
   1429c:	str	r1, [fp, #-52]	; 0xffffffcc
   142a0:	str	r2, [fp, #-56]	; 0xffffffc8
   142a4:	str	r3, [fp, #-60]	; 0xffffffc4
   142a8:	mov	r3, #0
   142ac:	strb	r3, [fp, #-25]	; 0xffffffe7
   142b0:	mov	r3, #0
   142b4:	str	r3, [fp, #-20]	; 0xffffffec
   142b8:	ldr	r3, [fp, #4]
   142bc:	mov	r2, #0
   142c0:	strb	r2, [r3]
   142c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   142c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   142cc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   142d0:	bl	12cac <_start@@Base+0x79c>
   142d4:	str	r0, [fp, #-52]	; 0xffffffcc
   142d8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   142dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   142e0:	cmp	r2, r3
   142e4:	bne	142f0 <_start@@Base+0x1de0>
   142e8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   142ec:	b	1445c <_start@@Base+0x1f4c>
   142f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   142f4:	str	r3, [fp, #-16]
   142f8:	ldr	r3, [fp, #-16]
   142fc:	ldr	r4, [r3]
   14300:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14304:	str	r3, [fp, #-24]	; 0xffffffe8
   14308:	sub	r2, fp, #40	; 0x28
   1430c:	sub	r3, fp, #44	; 0x2c
   14310:	str	r3, [sp, #4]
   14314:	sub	r3, fp, #36	; 0x24
   14318:	str	r3, [sp]
   1431c:	mov	r3, r2
   14320:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14324:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14328:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1432c:	blx	r4
   14330:	str	r0, [fp, #-52]	; 0xffffffcc
   14334:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14338:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1433c:	cmp	r2, r3
   14340:	bne	1434c <_start@@Base+0x1e3c>
   14344:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14348:	b	1445c <_start@@Base+0x1f4c>
   1434c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14350:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14354:	cmp	r2, r3
   14358:	bne	14378 <_start@@Base+0x1e68>
   1435c:	ldr	r3, [fp, #-16]
   14360:	add	r3, r3, #4
   14364:	str	r3, [fp, #-16]
   14368:	ldr	r3, [fp, #-16]
   1436c:	ldr	r3, [r3]
   14370:	cmp	r3, #0
   14374:	bne	142f8 <_start@@Base+0x1de8>
   14378:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1437c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14380:	cmp	r2, r3
   14384:	bne	143a4 <_start@@Base+0x1e94>
   14388:	mov	r3, #23
   1438c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14390:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14394:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14398:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1439c:	mov	r3, r0
   143a0:	b	1445c <_start@@Base+0x1f4c>
   143a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143a8:	add	r2, r3, #1
   143ac:	str	r2, [fp, #-20]	; 0xffffffec
   143b0:	cmp	r3, #0
   143b4:	beq	143e4 <_start@@Base+0x1ed4>
   143b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   143bc:	ldr	r3, [r3, #12]
   143c0:	cmp	r3, #0
   143c4:	beq	143e4 <_start@@Base+0x1ed4>
   143c8:	mov	r3, #14
   143cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   143d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   143d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   143d8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   143dc:	mov	r3, r0
   143e0:	b	1445c <_start@@Base+0x1f4c>
   143e4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   143e8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   143ec:	sub	r1, fp, #25
   143f0:	str	r1, [sp, #8]
   143f4:	strd	r2, [sp]
   143f8:	mov	r3, r0
   143fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14400:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14404:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14408:	bl	131d4 <_start@@Base+0xcc4>
   1440c:	mov	r2, r0
   14410:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14414:	cmp	r2, r3
   14418:	bne	14424 <_start@@Base+0x1f14>
   1441c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14420:	b	1445c <_start@@Base+0x1f4c>
   14424:	ldr	r3, [fp, #4]
   14428:	ldrsb	r3, [r3]
   1442c:	uxtb	r2, r3
   14430:	ldrsb	r3, [fp, #-25]	; 0xffffffe7
   14434:	uxtb	r3, r3
   14438:	add	r3, r2, r3
   1443c:	uxtb	r3, r3
   14440:	sxtb	r2, r3
   14444:	ldr	r3, [fp, #4]
   14448:	strb	r2, [r3]
   1444c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14450:	cmp	r3, #0
   14454:	bne	142f0 <_start@@Base+0x1de0>
   14458:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1445c:	mov	r0, r3
   14460:	sub	sp, fp, #8
   14464:	pop	{r4, fp, pc}
   14468:	push	{r4, fp, lr}
   1446c:	add	fp, sp, #8
   14470:	sub	sp, sp, #68	; 0x44
   14474:	str	r0, [fp, #-48]	; 0xffffffd0
   14478:	str	r1, [fp, #-52]	; 0xffffffcc
   1447c:	str	r2, [fp, #-56]	; 0xffffffc8
   14480:	str	r3, [fp, #-60]	; 0xffffffc4
   14484:	mov	r3, #0
   14488:	strb	r3, [fp, #-25]	; 0xffffffe7
   1448c:	mov	r3, #0
   14490:	str	r3, [fp, #-20]	; 0xffffffec
   14494:	ldr	r3, [fp, #4]
   14498:	mov	r2, #0
   1449c:	strb	r2, [r3]
   144a0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   144a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   144a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   144ac:	bl	12cac <_start@@Base+0x79c>
   144b0:	str	r0, [fp, #-52]	; 0xffffffcc
   144b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   144b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   144bc:	cmp	r2, r3
   144c0:	bne	144cc <_start@@Base+0x1fbc>
   144c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   144c8:	b	1462c <_start@@Base+0x211c>
   144cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   144d0:	str	r3, [fp, #-16]
   144d4:	ldr	r3, [fp, #-16]
   144d8:	ldr	r4, [r3]
   144dc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   144e0:	str	r3, [fp, #-24]	; 0xffffffe8
   144e4:	sub	r2, fp, #40	; 0x28
   144e8:	sub	r3, fp, #44	; 0x2c
   144ec:	str	r3, [sp, #4]
   144f0:	sub	r3, fp, #36	; 0x24
   144f4:	str	r3, [sp]
   144f8:	mov	r3, r2
   144fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14500:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14504:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14508:	blx	r4
   1450c:	str	r0, [fp, #-52]	; 0xffffffcc
   14510:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14514:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14518:	cmp	r2, r3
   1451c:	bne	14528 <_start@@Base+0x2018>
   14520:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14524:	b	1462c <_start@@Base+0x211c>
   14528:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1452c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14530:	cmp	r2, r3
   14534:	bne	14554 <_start@@Base+0x2044>
   14538:	ldr	r3, [fp, #-16]
   1453c:	add	r3, r3, #4
   14540:	str	r3, [fp, #-16]
   14544:	ldr	r3, [fp, #-16]
   14548:	ldr	r3, [r3]
   1454c:	cmp	r3, #0
   14550:	bne	144d4 <_start@@Base+0x1fc4>
   14554:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14558:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1455c:	cmp	r2, r3
   14560:	bne	14580 <_start@@Base+0x2070>
   14564:	mov	r3, #23
   14568:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1456c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14570:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14574:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14578:	mov	r3, r0
   1457c:	b	1462c <_start@@Base+0x211c>
   14580:	ldr	r3, [fp, #-20]	; 0xffffffec
   14584:	add	r2, r3, #1
   14588:	str	r2, [fp, #-20]	; 0xffffffec
   1458c:	cmp	r3, #0
   14590:	beq	145c0 <_start@@Base+0x20b0>
   14594:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14598:	ldr	r3, [r3, #12]
   1459c:	cmp	r3, #0
   145a0:	beq	145c0 <_start@@Base+0x20b0>
   145a4:	mov	r3, #14
   145a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145ac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   145b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145b4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   145b8:	mov	r3, r0
   145bc:	b	1462c <_start@@Base+0x211c>
   145c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   145c4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   145c8:	sub	r1, fp, #25
   145cc:	str	r1, [sp, #8]
   145d0:	strd	r2, [sp]
   145d4:	mov	r3, r0
   145d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145dc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   145e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145e4:	bl	12d6c <_start@@Base+0x85c>
   145e8:	mov	r2, r0
   145ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   145f0:	cmp	r2, r3
   145f4:	bne	14600 <_start@@Base+0x20f0>
   145f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   145fc:	b	1462c <_start@@Base+0x211c>
   14600:	ldr	r3, [fp, #4]
   14604:	ldrb	r2, [r3]
   14608:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1460c:	add	r3, r2, r3
   14610:	uxtb	r2, r3
   14614:	ldr	r3, [fp, #4]
   14618:	strb	r2, [r3]
   1461c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14620:	cmp	r3, #0
   14624:	bne	144cc <_start@@Base+0x1fbc>
   14628:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1462c:	mov	r0, r3
   14630:	sub	sp, fp, #8
   14634:	pop	{r4, fp, pc}
   14638:	push	{r4, fp, lr}
   1463c:	add	fp, sp, #8
   14640:	sub	sp, sp, #68	; 0x44
   14644:	str	r0, [fp, #-48]	; 0xffffffd0
   14648:	str	r1, [fp, #-52]	; 0xffffffcc
   1464c:	str	r2, [fp, #-56]	; 0xffffffc8
   14650:	str	r3, [fp, #-60]	; 0xffffffc4
   14654:	mov	r3, #0
   14658:	str	r3, [fp, #-28]	; 0xffffffe4
   1465c:	mov	r3, #0
   14660:	str	r3, [fp, #-20]	; 0xffffffec
   14664:	ldr	r3, [fp, #4]
   14668:	mov	r2, #0
   1466c:	str	r2, [r3]
   14670:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14674:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14678:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1467c:	bl	12cac <_start@@Base+0x79c>
   14680:	str	r0, [fp, #-52]	; 0xffffffcc
   14684:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14688:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1468c:	cmp	r2, r3
   14690:	bne	1469c <_start@@Base+0x218c>
   14694:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14698:	b	147f8 <_start@@Base+0x22e8>
   1469c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   146a0:	str	r3, [fp, #-16]
   146a4:	ldr	r3, [fp, #-16]
   146a8:	ldr	r4, [r3]
   146ac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   146b0:	str	r3, [fp, #-24]	; 0xffffffe8
   146b4:	sub	r2, fp, #40	; 0x28
   146b8:	sub	r3, fp, #44	; 0x2c
   146bc:	str	r3, [sp, #4]
   146c0:	sub	r3, fp, #36	; 0x24
   146c4:	str	r3, [sp]
   146c8:	mov	r3, r2
   146cc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   146d0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   146d4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   146d8:	blx	r4
   146dc:	str	r0, [fp, #-52]	; 0xffffffcc
   146e0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   146e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   146e8:	cmp	r2, r3
   146ec:	bne	146f8 <_start@@Base+0x21e8>
   146f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   146f4:	b	147f8 <_start@@Base+0x22e8>
   146f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   146fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14700:	cmp	r2, r3
   14704:	bne	14724 <_start@@Base+0x2214>
   14708:	ldr	r3, [fp, #-16]
   1470c:	add	r3, r3, #4
   14710:	str	r3, [fp, #-16]
   14714:	ldr	r3, [fp, #-16]
   14718:	ldr	r3, [r3]
   1471c:	cmp	r3, #0
   14720:	bne	146a4 <_start@@Base+0x2194>
   14724:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14728:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1472c:	cmp	r2, r3
   14730:	bne	14750 <_start@@Base+0x2240>
   14734:	mov	r3, #23
   14738:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1473c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14740:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14744:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14748:	mov	r3, r0
   1474c:	b	147f8 <_start@@Base+0x22e8>
   14750:	ldr	r3, [fp, #-20]	; 0xffffffec
   14754:	add	r2, r3, #1
   14758:	str	r2, [fp, #-20]	; 0xffffffec
   1475c:	cmp	r3, #0
   14760:	beq	14790 <_start@@Base+0x2280>
   14764:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14768:	ldr	r3, [r3, #12]
   1476c:	cmp	r3, #0
   14770:	beq	14790 <_start@@Base+0x2280>
   14774:	mov	r3, #14
   14778:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1477c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14780:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14784:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14788:	mov	r3, r0
   1478c:	b	147f8 <_start@@Base+0x22e8>
   14790:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14794:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   14798:	sub	r1, fp, #28
   1479c:	str	r1, [sp, #8]
   147a0:	strd	r2, [sp]
   147a4:	mov	r3, r0
   147a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   147ac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   147b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   147b4:	bl	1328c <_start@@Base+0xd7c>
   147b8:	mov	r2, r0
   147bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   147c0:	cmp	r2, r3
   147c4:	bne	147d0 <_start@@Base+0x22c0>
   147c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   147cc:	b	147f8 <_start@@Base+0x22e8>
   147d0:	ldr	r3, [fp, #4]
   147d4:	vldr	s14, [r3]
   147d8:	vldr	s15, [fp, #-28]	; 0xffffffe4
   147dc:	vadd.f32	s15, s14, s15
   147e0:	ldr	r3, [fp, #4]
   147e4:	vstr	s15, [r3]
   147e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   147ec:	cmp	r3, #0
   147f0:	bne	1469c <_start@@Base+0x218c>
   147f4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   147f8:	mov	r0, r3
   147fc:	sub	sp, fp, #8
   14800:	pop	{r4, fp, pc}
   14804:	push	{r4, fp, lr}
   14808:	add	fp, sp, #8
   1480c:	sub	sp, sp, #76	; 0x4c
   14810:	str	r0, [fp, #-56]	; 0xffffffc8
   14814:	str	r1, [fp, #-60]	; 0xffffffc4
   14818:	str	r2, [fp, #-64]	; 0xffffffc0
   1481c:	str	r3, [fp, #-68]	; 0xffffffbc
   14820:	mov	r2, #0
   14824:	mov	r3, #0
   14828:	strd	r2, [fp, #-36]	; 0xffffffdc
   1482c:	mov	r3, #0
   14830:	str	r3, [fp, #-20]	; 0xffffffec
   14834:	ldr	r1, [fp, #4]
   14838:	mov	r2, #0
   1483c:	mov	r3, #0
   14840:	strd	r2, [r1]
   14844:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14848:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1484c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14850:	bl	12cac <_start@@Base+0x79c>
   14854:	str	r0, [fp, #-60]	; 0xffffffc4
   14858:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1485c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14860:	cmp	r2, r3
   14864:	bne	14870 <_start@@Base+0x2360>
   14868:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1486c:	b	149cc <_start@@Base+0x24bc>
   14870:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14874:	str	r3, [fp, #-16]
   14878:	ldr	r3, [fp, #-16]
   1487c:	ldr	r4, [r3]
   14880:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14884:	str	r3, [fp, #-24]	; 0xffffffe8
   14888:	sub	r2, fp, #48	; 0x30
   1488c:	sub	r3, fp, #52	; 0x34
   14890:	str	r3, [sp, #4]
   14894:	sub	r3, fp, #44	; 0x2c
   14898:	str	r3, [sp]
   1489c:	mov	r3, r2
   148a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   148a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   148a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   148ac:	blx	r4
   148b0:	str	r0, [fp, #-60]	; 0xffffffc4
   148b4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   148b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   148bc:	cmp	r2, r3
   148c0:	bne	148cc <_start@@Base+0x23bc>
   148c4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   148c8:	b	149cc <_start@@Base+0x24bc>
   148cc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   148d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   148d4:	cmp	r2, r3
   148d8:	bne	148f8 <_start@@Base+0x23e8>
   148dc:	ldr	r3, [fp, #-16]
   148e0:	add	r3, r3, #4
   148e4:	str	r3, [fp, #-16]
   148e8:	ldr	r3, [fp, #-16]
   148ec:	ldr	r3, [r3]
   148f0:	cmp	r3, #0
   148f4:	bne	14878 <_start@@Base+0x2368>
   148f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   148fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14900:	cmp	r2, r3
   14904:	bne	14924 <_start@@Base+0x2414>
   14908:	mov	r3, #23
   1490c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14910:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14914:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14918:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1491c:	mov	r3, r0
   14920:	b	149cc <_start@@Base+0x24bc>
   14924:	ldr	r3, [fp, #-20]	; 0xffffffec
   14928:	add	r2, r3, #1
   1492c:	str	r2, [fp, #-20]	; 0xffffffec
   14930:	cmp	r3, #0
   14934:	beq	14964 <_start@@Base+0x2454>
   14938:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1493c:	ldr	r3, [r3, #12]
   14940:	cmp	r3, #0
   14944:	beq	14964 <_start@@Base+0x2454>
   14948:	mov	r3, #14
   1494c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14950:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14954:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14958:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1495c:	mov	r3, r0
   14960:	b	149cc <_start@@Base+0x24bc>
   14964:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14968:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1496c:	sub	r1, fp, #36	; 0x24
   14970:	str	r1, [sp, #8]
   14974:	strd	r2, [sp]
   14978:	mov	r3, r0
   1497c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14980:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14984:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14988:	bl	132ec <_start@@Base+0xddc>
   1498c:	mov	r2, r0
   14990:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14994:	cmp	r2, r3
   14998:	bne	149a4 <_start@@Base+0x2494>
   1499c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   149a0:	b	149cc <_start@@Base+0x24bc>
   149a4:	ldr	r3, [fp, #4]
   149a8:	vldr	d6, [r3]
   149ac:	vldr	d7, [fp, #-36]	; 0xffffffdc
   149b0:	vadd.f64	d7, d6, d7
   149b4:	ldr	r3, [fp, #4]
   149b8:	vstr	d7, [r3]
   149bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   149c0:	cmp	r3, #0
   149c4:	bne	14870 <_start@@Base+0x2360>
   149c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   149cc:	mov	r0, r3
   149d0:	sub	sp, fp, #8
   149d4:	pop	{r4, fp, pc}

000149d8 <test@@Base>:
   149d8:	push	{r4, r5, r6, r8, r9, fp, lr}
   149dc:	add	fp, sp, #24
   149e0:	sub	sp, sp, #516	; 0x204
   149e4:	str	r0, [fp, #-120]	; 0xffffff88
   149e8:	str	r1, [fp, #-124]	; 0xffffff84
   149ec:	str	r2, [fp, #-128]	; 0xffffff80
   149f0:	str	r3, [fp, #-132]	; 0xffffff7c
   149f4:	ldr	r6, [pc, #3860]	; 15910 <test@@Base+0xf38>
   149f8:	add	r6, pc, r6
   149fc:	mov	r3, #0
   14a00:	str	r3, [fp, #-36]	; 0xffffffdc
   14a04:	sub	r3, fp, #112	; 0x70
   14a08:	str	r3, [fp, #-40]	; 0xffffffd8
   14a0c:	mov	r2, #44	; 0x2c
   14a10:	mov	r1, #0
   14a14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a18:	bl	124d4 <memset@plt>
   14a1c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14a20:	mov	r3, #1
   14a24:	str	r3, [r2, #16]
   14a28:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14a2c:	ldr	r3, [fp, #-124]	; 0xffffff84
   14a30:	str	r3, [r2, #4]
   14a34:	mov	r3, #0
   14a38:	mov	r2, #0
   14a3c:	ldr	r1, [pc, #3792]	; 15914 <test@@Base+0xf3c>
   14a40:	add	r1, pc, r1
   14a44:	ldr	r0, [fp, #-120]	; 0xffffff88
   14a48:	bl	18510 <flatcc_builder_start_buffer@@Base>
   14a4c:	ldr	r2, [fp, #-128]	; 0xffffff80
   14a50:	ldr	r1, [fp, #-124]	; 0xffffff84
   14a54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a58:	bl	12638 <_start@@Base+0x128>
   14a5c:	str	r0, [fp, #-124]	; 0xffffff84
   14a60:	ldr	r2, [fp, #-124]	; 0xffffff84
   14a64:	ldr	r3, [fp, #-128]	; 0xffffff80
   14a68:	cmp	r2, r3
   14a6c:	bne	14a94 <test@@Base+0xbc>
   14a70:	ldr	r3, [pc, #3840]	; 15978 <test@@Base+0xfa0>
   14a74:	ldr	r3, [r6, r3]
   14a78:	ldr	r3, [r3]
   14a7c:	mov	r2, #13
   14a80:	mov	r1, #1
   14a84:	ldr	r0, [pc, #3724]	; 15918 <test@@Base+0xf40>
   14a88:	add	r0, pc, r0
   14a8c:	bl	12480 <fwrite@plt>
   14a90:	b	161a4 <test@@Base+0x17cc>
   14a94:	ldr	r2, [fp, #-128]	; 0xffffff80
   14a98:	ldr	r3, [fp, #-124]	; 0xffffff84
   14a9c:	cmp	r2, r3
   14aa0:	bls	14ae8 <test@@Base+0x110>
   14aa4:	ldr	r3, [fp, #-124]	; 0xffffff84
   14aa8:	ldrb	r3, [r3]
   14aac:	cmp	r3, #123	; 0x7b
   14ab0:	bne	14ae8 <test@@Base+0x110>
   14ab4:	ldr	r3, [fp, #-124]	; 0xffffff84
   14ab8:	add	r3, r3, #1
   14abc:	str	r3, [fp, #-124]	; 0xffffff84
   14ac0:	ldr	r2, [fp, #-128]	; 0xffffff80
   14ac4:	ldr	r1, [fp, #-124]	; 0xffffff84
   14ac8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14acc:	bl	12638 <_start@@Base+0x128>
   14ad0:	str	r0, [fp, #-124]	; 0xffffff84
   14ad4:	ldr	r2, [fp, #-124]	; 0xffffff84
   14ad8:	ldr	r3, [fp, #-128]	; 0xffffff80
   14adc:	cmp	r2, r3
   14ae0:	beq	14b24 <test@@Base+0x14c>
   14ae4:	b	14b48 <test@@Base+0x170>
   14ae8:	ldr	r3, [pc, #3720]	; 15978 <test@@Base+0xfa0>
   14aec:	ldr	r3, [r6, r3]
   14af0:	ldr	r3, [r3]
   14af4:	mov	r2, #123	; 0x7b
   14af8:	ldr	r1, [pc, #3612]	; 1591c <test@@Base+0xf44>
   14afc:	add	r1, pc, r1
   14b00:	mov	r0, r3
   14b04:	bl	124bc <fprintf@plt>
   14b08:	mov	r3, #17
   14b0c:	ldr	r2, [fp, #-128]	; 0xffffff80
   14b10:	ldr	r1, [fp, #-124]	; 0xffffff84
   14b14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b18:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14b1c:	str	r0, [fp, #-124]	; 0xffffff84
   14b20:	b	161a4 <test@@Base+0x17cc>
   14b24:	ldr	r3, [pc, #3660]	; 15978 <test@@Base+0xfa0>
   14b28:	ldr	r3, [r6, r3]
   14b2c:	ldr	r3, [r3]
   14b30:	mov	r2, #13
   14b34:	mov	r1, #1
   14b38:	ldr	r0, [pc, #3552]	; 15920 <test@@Base+0xf48>
   14b3c:	add	r0, pc, r0
   14b40:	bl	12480 <fwrite@plt>
   14b44:	b	161a4 <test@@Base+0x17cc>
   14b48:	mov	r1, #11
   14b4c:	ldr	r0, [fp, #-120]	; 0xffffff88
   14b50:	bl	19554 <flatcc_builder_start_table@@Base>
   14b54:	ldr	r2, [fp, #-128]	; 0xffffff80
   14b58:	ldr	r1, [fp, #-124]	; 0xffffff84
   14b5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b60:	bl	127ac <_start@@Base+0x29c>
   14b64:	str	r0, [fp, #-124]	; 0xffffff84
   14b68:	ldr	r1, [fp, #-128]	; 0xffffff80
   14b6c:	ldr	r0, [fp, #-124]	; 0xffffff84
   14b70:	bl	12a90 <_start@@Base+0x580>
   14b74:	strd	r0, [fp, #-52]	; 0xffffffcc
   14b78:	ldr	r2, [fp, #-128]	; 0xffffff80
   14b7c:	ldr	r3, [fp, #-124]	; 0xffffff84
   14b80:	sub	r3, r2, r3
   14b84:	cmp	r3, #8
   14b88:	ble	14b98 <test@@Base+0x1c0>
   14b8c:	ldr	r3, [fp, #-124]	; 0xffffff84
   14b90:	add	r3, r3, #8
   14b94:	b	14b9c <test@@Base+0x1c4>
   14b98:	ldr	r3, [fp, #-128]	; 0xffffff80
   14b9c:	str	r3, [fp, #-56]	; 0xffffffc8
   14ba0:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   14ba4:	ldr	r2, [pc, #3448]	; 15924 <test@@Base+0xf4c>
   14ba8:	mvn	r3, #0
   14bac:	and	r4, r0, r2
   14bb0:	and	r5, r1, r3
   14bb4:	mov	r3, #115	; 0x73
   14bb8:	uxtb	r2, r3
   14bbc:	mov	r3, #0
   14bc0:	lsl	r3, r2, #24
   14bc4:	str	r3, [fp, #-176]	; 0xffffff50
   14bc8:	mov	r3, #0
   14bcc:	str	r3, [fp, #-180]	; 0xffffff4c
   14bd0:	mov	r3, #101	; 0x65
   14bd4:	uxtb	r2, r3
   14bd8:	mov	r3, #0
   14bdc:	lsl	r3, r2, #16
   14be0:	str	r3, [fp, #-184]	; 0xffffff48
   14be4:	mov	r3, #0
   14be8:	str	r3, [fp, #-188]	; 0xffffff44
   14bec:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   14bf0:	ldrd	r2, [fp, #-188]	; 0xffffff44
   14bf4:	orr	r0, r0, r2
   14bf8:	orr	r1, r1, r3
   14bfc:	mov	r3, #99	; 0x63
   14c00:	uxtb	r2, r3
   14c04:	mov	r3, #0
   14c08:	lsl	r3, r2, #8
   14c0c:	str	r3, [fp, #-192]	; 0xffffff40
   14c10:	mov	r3, #0
   14c14:	str	r3, [fp, #-196]	; 0xffffff3c
   14c18:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   14c1c:	orr	r2, r2, r0
   14c20:	orr	r3, r3, r1
   14c24:	mov	r0, r2
   14c28:	mov	r1, r3
   14c2c:	mov	r3, #111	; 0x6f
   14c30:	uxtb	r2, r3
   14c34:	mov	r3, #0
   14c38:	mov	r3, r2
   14c3c:	str	r3, [fp, #-200]	; 0xffffff38
   14c40:	mov	r3, #0
   14c44:	str	r3, [fp, #-204]	; 0xffffff34
   14c48:	ldrd	r2, [fp, #-204]	; 0xffffff34
   14c4c:	orr	r2, r2, r0
   14c50:	orr	r3, r3, r1
   14c54:	mov	r0, r2
   14c58:	mov	r1, r3
   14c5c:	mov	r3, #110	; 0x6e
   14c60:	uxtb	r2, r3
   14c64:	mov	r3, #0
   14c68:	lsr	ip, r2, #8
   14c6c:	str	ip, [fp, #-208]	; 0xffffff30
   14c70:	lsl	r3, r2, #24
   14c74:	str	r3, [fp, #-212]	; 0xffffff2c
   14c78:	ldrd	r2, [fp, #-212]	; 0xffffff2c
   14c7c:	orr	r2, r2, r0
   14c80:	orr	r3, r3, r1
   14c84:	mov	r0, r2
   14c88:	mov	r1, r3
   14c8c:	mov	r3, #100	; 0x64
   14c90:	uxtb	r2, r3
   14c94:	mov	r3, #0
   14c98:	lsl	r9, r3, #16
   14c9c:	orr	r9, r9, r2, lsr #16
   14ca0:	lsl	r8, r2, #16
   14ca4:	orr	r2, r0, r8
   14ca8:	orr	r3, r1, r9
   14cac:	cmp	r5, r3
   14cb0:	cmpeq	r4, r2
   14cb4:	bcs	14f48 <test@@Base+0x570>
   14cb8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   14cbc:	mov	r2, #-16777216	; 0xff000000
   14cc0:	mvn	r3, #0
   14cc4:	and	r4, r0, r2
   14cc8:	and	r5, r1, r3
   14ccc:	mov	r3, #102	; 0x66
   14cd0:	uxtb	r2, r3
   14cd4:	mov	r3, #0
   14cd8:	lsl	r3, r2, #24
   14cdc:	str	r3, [fp, #-496]	; 0xfffffe10
   14ce0:	mov	r3, #0
   14ce4:	str	r3, [fp, #-500]	; 0xfffffe0c
   14ce8:	mov	r3, #105	; 0x69
   14cec:	uxtb	r2, r3
   14cf0:	mov	r3, #0
   14cf4:	lsl	r3, r2, #16
   14cf8:	str	r3, [fp, #-504]	; 0xfffffe08
   14cfc:	mov	r3, #0
   14d00:	str	r3, [fp, #-508]	; 0xfffffe04
   14d04:	sub	r3, fp, #500	; 0x1f4
   14d08:	ldrd	r0, [r3]
   14d0c:	sub	r3, fp, #508	; 0x1fc
   14d10:	ldrd	r2, [r3]
   14d14:	orr	r0, r0, r2
   14d18:	orr	r1, r1, r3
   14d1c:	mov	r3, #114	; 0x72
   14d20:	uxtb	r2, r3
   14d24:	mov	r3, #0
   14d28:	lsl	r3, r2, #8
   14d2c:	str	r3, [fp, #-512]	; 0xfffffe00
   14d30:	mov	r3, #0
   14d34:	str	r3, [fp, #-516]	; 0xfffffdfc
   14d38:	sub	r3, fp, #516	; 0x204
   14d3c:	ldrd	r2, [r3]
   14d40:	orr	r2, r2, r0
   14d44:	orr	r3, r3, r1
   14d48:	mov	r0, r2
   14d4c:	mov	r1, r3
   14d50:	mov	r3, #115	; 0x73
   14d54:	uxtb	r2, r3
   14d58:	mov	r3, #0
   14d5c:	mov	r3, r2
   14d60:	str	r3, [fp, #-520]	; 0xfffffdf8
   14d64:	mov	r3, #0
   14d68:	str	r3, [fp, #-524]	; 0xfffffdf4
   14d6c:	sub	r3, fp, #524	; 0x20c
   14d70:	ldrd	r2, [r3]
   14d74:	orr	r2, r2, r0
   14d78:	orr	r3, r3, r1
   14d7c:	mov	r0, r2
   14d80:	mov	r1, r3
   14d84:	mov	r3, #116	; 0x74
   14d88:	uxtb	r2, r3
   14d8c:	mov	r3, #0
   14d90:	lsr	ip, r2, #8
   14d94:	str	ip, [fp, #-528]	; 0xfffffdf0
   14d98:	lsl	r3, r2, #24
   14d9c:	str	r3, [fp, #-532]	; 0xfffffdec
   14da0:	sub	r3, fp, #532	; 0x214
   14da4:	ldrd	r2, [r3]
   14da8:	orr	r2, r2, r0
   14dac:	orr	r3, r3, r1
   14db0:	cmp	r5, r3
   14db4:	cmpeq	r4, r2
   14db8:	beq	14dd8 <test@@Base+0x400>
   14dbc:	mov	r3, #13
   14dc0:	ldr	r2, [fp, #-128]	; 0xffffff80
   14dc4:	ldr	r1, [fp, #-124]	; 0xffffff84
   14dc8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14dcc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14dd0:	str	r0, [fp, #-124]	; 0xffffff84
   14dd4:	b	161a4 <test@@Base+0x17cc>
   14dd8:	ldr	r3, [fp, #-124]	; 0xffffff84
   14ddc:	add	r3, r3, #5
   14de0:	ldr	r2, [fp, #-128]	; 0xffffff80
   14de4:	mov	r1, r3
   14de8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14dec:	bl	12ad8 <_start@@Base+0x5c8>
   14df0:	str	r0, [fp, #-124]	; 0xffffff84
   14df4:	ldr	r2, [fp, #-128]	; 0xffffff80
   14df8:	ldr	r1, [fp, #-124]	; 0xffffff84
   14dfc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14e00:	bl	12638 <_start@@Base+0x128>
   14e04:	str	r0, [fp, #-124]	; 0xffffff84
   14e08:	ldr	r2, [fp, #-124]	; 0xffffff84
   14e0c:	ldr	r3, [fp, #-128]	; 0xffffff80
   14e10:	cmp	r2, r3
   14e14:	bne	14e3c <test@@Base+0x464>
   14e18:	ldr	r3, [pc, #2904]	; 15978 <test@@Base+0xfa0>
   14e1c:	ldr	r3, [r6, r3]
   14e20:	ldr	r3, [r3]
   14e24:	mov	r2, #13
   14e28:	mov	r1, #1
   14e2c:	ldr	r0, [pc, #2804]	; 15928 <test@@Base+0xf50>
   14e30:	add	r0, pc, r0
   14e34:	bl	12480 <fwrite@plt>
   14e38:	b	161a4 <test@@Base+0x17cc>
   14e3c:	ldr	r2, [fp, #-128]	; 0xffffff80
   14e40:	ldr	r3, [fp, #-124]	; 0xffffff84
   14e44:	cmp	r2, r3
   14e48:	bls	14e90 <test@@Base+0x4b8>
   14e4c:	ldr	r3, [fp, #-124]	; 0xffffff84
   14e50:	ldrb	r3, [r3]
   14e54:	cmp	r3, #58	; 0x3a
   14e58:	bne	14e90 <test@@Base+0x4b8>
   14e5c:	ldr	r3, [fp, #-124]	; 0xffffff84
   14e60:	add	r3, r3, #1
   14e64:	str	r3, [fp, #-124]	; 0xffffff84
   14e68:	ldr	r2, [fp, #-128]	; 0xffffff80
   14e6c:	ldr	r1, [fp, #-124]	; 0xffffff84
   14e70:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14e74:	bl	12638 <_start@@Base+0x128>
   14e78:	str	r0, [fp, #-124]	; 0xffffff84
   14e7c:	ldr	r2, [fp, #-124]	; 0xffffff84
   14e80:	ldr	r3, [fp, #-128]	; 0xffffff80
   14e84:	cmp	r2, r3
   14e88:	beq	14ecc <test@@Base+0x4f4>
   14e8c:	b	14ef0 <test@@Base+0x518>
   14e90:	ldr	r3, [pc, #2784]	; 15978 <test@@Base+0xfa0>
   14e94:	ldr	r3, [r6, r3]
   14e98:	ldr	r3, [r3]
   14e9c:	mov	r2, #58	; 0x3a
   14ea0:	ldr	r1, [pc, #2692]	; 1592c <test@@Base+0xf54>
   14ea4:	add	r1, pc, r1
   14ea8:	mov	r0, r3
   14eac:	bl	124bc <fprintf@plt>
   14eb0:	mov	r3, #17
   14eb4:	ldr	r2, [fp, #-128]	; 0xffffff80
   14eb8:	ldr	r1, [fp, #-124]	; 0xffffff84
   14ebc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14ec0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   14ec4:	str	r0, [fp, #-124]	; 0xffffff84
   14ec8:	b	161a4 <test@@Base+0x17cc>
   14ecc:	ldr	r3, [pc, #2724]	; 15978 <test@@Base+0xfa0>
   14ed0:	ldr	r3, [r6, r3]
   14ed4:	ldr	r3, [r3]
   14ed8:	mov	r2, #13
   14edc:	mov	r1, #1
   14ee0:	ldr	r0, [pc, #2632]	; 15930 <test@@Base+0xf58>
   14ee4:	add	r0, pc, r0
   14ee8:	bl	12480 <fwrite@plt>
   14eec:	b	161a4 <test@@Base+0x17cc>
   14ef0:	mov	r3, #1
   14ef4:	mov	r2, #1
   14ef8:	mov	r1, #0
   14efc:	ldr	r0, [fp, #-120]	; 0xffffff88
   14f00:	bl	1ba48 <flatcc_builder_table_add@@Base>
   14f04:	str	r0, [fp, #-60]	; 0xffffffc4
   14f08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14f0c:	cmp	r3, #0
   14f10:	beq	16160 <test@@Base+0x1788>
   14f14:	ldr	r3, [fp, #-124]	; 0xffffff84
   14f18:	str	r3, [fp, #-56]	; 0xffffffc8
   14f1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14f20:	ldr	r2, [fp, #-128]	; 0xffffff80
   14f24:	ldr	r1, [fp, #-124]	; 0xffffff84
   14f28:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14f2c:	bl	13424 <_start@@Base+0xf14>
   14f30:	str	r0, [fp, #-124]	; 0xffffff84
   14f34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14f38:	ldr	r3, [fp, #-124]	; 0xffffff84
   14f3c:	cmp	r2, r3
   14f40:	bne	15fd4 <test@@Base+0x15fc>
   14f44:	b	161a4 <test@@Base+0x17cc>
   14f48:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   14f4c:	mov	r2, #0
   14f50:	mvn	r3, #0
   14f54:	and	r4, r0, r2
   14f58:	and	r5, r1, r3
   14f5c:	mov	r3, #122	; 0x7a
   14f60:	uxtb	r2, r3
   14f64:	mov	r3, #0
   14f68:	lsl	r3, r2, #24
   14f6c:	str	r3, [fp, #-216]	; 0xffffff28
   14f70:	mov	r3, #0
   14f74:	str	r3, [fp, #-220]	; 0xffffff24
   14f78:	mov	r3, #117	; 0x75
   14f7c:	uxtb	r2, r3
   14f80:	mov	r3, #0
   14f84:	lsl	r3, r2, #16
   14f88:	str	r3, [fp, #-224]	; 0xffffff20
   14f8c:	mov	r3, #0
   14f90:	str	r3, [fp, #-228]	; 0xffffff1c
   14f94:	ldrd	r0, [fp, #-220]	; 0xffffff24
   14f98:	ldrd	r2, [fp, #-228]	; 0xffffff1c
   14f9c:	orr	r0, r0, r2
   14fa0:	orr	r1, r1, r3
   14fa4:	mov	r3, #108	; 0x6c
   14fa8:	uxtb	r2, r3
   14fac:	mov	r3, #0
   14fb0:	lsl	r3, r2, #8
   14fb4:	str	r3, [fp, #-232]	; 0xffffff18
   14fb8:	mov	r3, #0
   14fbc:	str	r3, [fp, #-236]	; 0xffffff14
   14fc0:	ldrd	r2, [fp, #-236]	; 0xffffff14
   14fc4:	orr	r2, r2, r0
   14fc8:	orr	r3, r3, r1
   14fcc:	mov	r0, r2
   14fd0:	mov	r1, r3
   14fd4:	mov	r3, #117	; 0x75
   14fd8:	uxtb	r2, r3
   14fdc:	mov	r3, #0
   14fe0:	mov	r3, r2
   14fe4:	str	r3, [fp, #-240]	; 0xffffff10
   14fe8:	mov	r3, #0
   14fec:	str	r3, [fp, #-244]	; 0xffffff0c
   14ff0:	ldrd	r2, [fp, #-244]	; 0xffffff0c
   14ff4:	orr	r2, r2, r0
   14ff8:	orr	r3, r3, r1
   14ffc:	cmp	r5, r3
   15000:	cmpeq	r4, r2
   15004:	bcs	15c34 <test@@Base+0x125c>
   15008:	mov	r3, #115	; 0x73
   1500c:	uxtb	r2, r3
   15010:	mov	r3, #0
   15014:	lsl	r3, r2, #24
   15018:	str	r3, [fp, #-248]	; 0xffffff08
   1501c:	mov	r3, #0
   15020:	str	r3, [fp, #-252]	; 0xffffff04
   15024:	mov	r3, #101	; 0x65
   15028:	uxtb	r2, r3
   1502c:	mov	r3, #0
   15030:	lsl	r3, r2, #16
   15034:	str	r3, [fp, #-256]	; 0xffffff00
   15038:	mov	r3, #0
   1503c:	str	r3, [fp, #-260]	; 0xfffffefc
   15040:	ldrd	r0, [fp, #-252]	; 0xffffff04
   15044:	sub	r3, fp, #260	; 0x104
   15048:	ldrd	r2, [r3]
   1504c:	orr	r0, r0, r2
   15050:	orr	r1, r1, r3
   15054:	mov	r3, #99	; 0x63
   15058:	uxtb	r2, r3
   1505c:	mov	r3, #0
   15060:	lsl	r3, r2, #8
   15064:	str	r3, [fp, #-264]	; 0xfffffef8
   15068:	mov	r3, #0
   1506c:	str	r3, [fp, #-268]	; 0xfffffef4
   15070:	sub	r3, fp, #268	; 0x10c
   15074:	ldrd	r2, [r3]
   15078:	orr	r2, r2, r0
   1507c:	orr	r3, r3, r1
   15080:	mov	r0, r2
   15084:	mov	r1, r3
   15088:	mov	r3, #111	; 0x6f
   1508c:	uxtb	r2, r3
   15090:	mov	r3, #0
   15094:	mov	r3, r2
   15098:	str	r3, [fp, #-272]	; 0xfffffef0
   1509c:	mov	r3, #0
   150a0:	str	r3, [fp, #-276]	; 0xfffffeec
   150a4:	sub	r3, fp, #276	; 0x114
   150a8:	ldrd	r2, [r3]
   150ac:	orr	r2, r2, r0
   150b0:	orr	r3, r3, r1
   150b4:	mov	r0, r2
   150b8:	mov	r1, r3
   150bc:	mov	r3, #110	; 0x6e
   150c0:	uxtb	r2, r3
   150c4:	mov	r3, #0
   150c8:	lsr	ip, r2, #8
   150cc:	str	ip, [fp, #-280]	; 0xfffffee8
   150d0:	lsl	r3, r2, #24
   150d4:	str	r3, [fp, #-284]	; 0xfffffee4
   150d8:	sub	r3, fp, #284	; 0x11c
   150dc:	ldrd	r2, [r3]
   150e0:	orr	r2, r2, r0
   150e4:	orr	r3, r3, r1
   150e8:	mov	r0, r2
   150ec:	mov	r1, r3
   150f0:	mov	r3, #100	; 0x64
   150f4:	uxtb	r2, r3
   150f8:	mov	r3, #0
   150fc:	lsl	ip, r3, #16
   15100:	str	ip, [fp, #-136]	; 0xffffff78
   15104:	ldr	ip, [fp, #-136]	; 0xffffff78
   15108:	orr	ip, ip, r2, lsr #16
   1510c:	str	ip, [fp, #-136]	; 0xffffff78
   15110:	lsl	r3, r2, #16
   15114:	str	r3, [fp, #-140]	; 0xffffff74
   15118:	ldrd	r2, [fp, #-140]	; 0xffffff74
   1511c:	orr	r2, r2, r0
   15120:	orr	r3, r3, r1
   15124:	mov	r0, r2
   15128:	mov	r1, r3
   1512c:	mov	r3, #115	; 0x73
   15130:	uxtb	r2, r3
   15134:	mov	r3, #0
   15138:	lsl	ip, r3, #8
   1513c:	str	ip, [fp, #-144]	; 0xffffff70
   15140:	ldr	ip, [fp, #-144]	; 0xffffff70
   15144:	orr	ip, ip, r2, lsr #24
   15148:	str	ip, [fp, #-144]	; 0xffffff70
   1514c:	lsl	r3, r2, #8
   15150:	str	r3, [fp, #-148]	; 0xffffff6c
   15154:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   15158:	orr	r2, r2, r0
   1515c:	orr	r3, r3, r1
   15160:	mov	r0, r2
   15164:	mov	r1, r3
   15168:	mov	r3, #32
   1516c:	uxtb	r2, r3
   15170:	mov	r3, #0
   15174:	orr	r0, r0, r2
   15178:	orr	r1, r1, r3
   1517c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   15180:	cmp	r1, r3
   15184:	cmpeq	r0, r2
   15188:	bls	15458 <test@@Base+0xa80>
   1518c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15190:	ldr	r2, [pc, #1932]	; 15924 <test@@Base+0xf4c>
   15194:	mvn	r3, #0
   15198:	and	r4, r0, r2
   1519c:	and	r5, r1, r3
   151a0:	mov	r3, #115	; 0x73
   151a4:	uxtb	r2, r3
   151a8:	mov	r3, #0
   151ac:	lsl	r3, r2, #24
   151b0:	str	r3, [fp, #-424]	; 0xfffffe58
   151b4:	mov	r3, #0
   151b8:	str	r3, [fp, #-428]	; 0xfffffe54
   151bc:	mov	r3, #101	; 0x65
   151c0:	uxtb	r2, r3
   151c4:	mov	r3, #0
   151c8:	lsl	r3, r2, #16
   151cc:	str	r3, [fp, #-432]	; 0xfffffe50
   151d0:	mov	r3, #0
   151d4:	str	r3, [fp, #-436]	; 0xfffffe4c
   151d8:	sub	r3, fp, #428	; 0x1ac
   151dc:	ldrd	r0, [r3]
   151e0:	sub	r3, fp, #436	; 0x1b4
   151e4:	ldrd	r2, [r3]
   151e8:	orr	r0, r0, r2
   151ec:	orr	r1, r1, r3
   151f0:	mov	r3, #99	; 0x63
   151f4:	uxtb	r2, r3
   151f8:	mov	r3, #0
   151fc:	lsl	r3, r2, #8
   15200:	str	r3, [fp, #-440]	; 0xfffffe48
   15204:	mov	r3, #0
   15208:	str	r3, [fp, #-444]	; 0xfffffe44
   1520c:	sub	r3, fp, #444	; 0x1bc
   15210:	ldrd	r2, [r3]
   15214:	orr	r2, r2, r0
   15218:	orr	r3, r3, r1
   1521c:	mov	r0, r2
   15220:	mov	r1, r3
   15224:	mov	r3, #111	; 0x6f
   15228:	uxtb	r2, r3
   1522c:	mov	r3, #0
   15230:	mov	r3, r2
   15234:	str	r3, [fp, #-448]	; 0xfffffe40
   15238:	mov	r3, #0
   1523c:	str	r3, [fp, #-452]	; 0xfffffe3c
   15240:	sub	r3, fp, #452	; 0x1c4
   15244:	ldrd	r2, [r3]
   15248:	orr	r2, r2, r0
   1524c:	orr	r3, r3, r1
   15250:	mov	r0, r2
   15254:	mov	r1, r3
   15258:	mov	r3, #110	; 0x6e
   1525c:	uxtb	r2, r3
   15260:	mov	r3, #0
   15264:	lsr	ip, r2, #8
   15268:	str	ip, [fp, #-456]	; 0xfffffe38
   1526c:	lsl	r3, r2, #24
   15270:	str	r3, [fp, #-460]	; 0xfffffe34
   15274:	sub	r3, fp, #460	; 0x1cc
   15278:	ldrd	r2, [r3]
   1527c:	orr	r2, r2, r0
   15280:	orr	r3, r3, r1
   15284:	mov	r0, r2
   15288:	mov	r1, r3
   1528c:	mov	r3, #100	; 0x64
   15290:	uxtb	r2, r3
   15294:	mov	r3, #0
   15298:	lsl	ip, r3, #16
   1529c:	str	ip, [fp, #-168]	; 0xffffff58
   152a0:	ldr	ip, [fp, #-168]	; 0xffffff58
   152a4:	orr	ip, ip, r2, lsr #16
   152a8:	str	ip, [fp, #-168]	; 0xffffff58
   152ac:	lsl	r3, r2, #16
   152b0:	str	r3, [fp, #-172]	; 0xffffff54
   152b4:	ldrd	r2, [fp, #-172]	; 0xffffff54
   152b8:	orr	r2, r2, r0
   152bc:	orr	r3, r3, r1
   152c0:	cmp	r5, r3
   152c4:	cmpeq	r4, r2
   152c8:	beq	152e8 <test@@Base+0x910>
   152cc:	mov	r3, #13
   152d0:	ldr	r2, [fp, #-128]	; 0xffffff80
   152d4:	ldr	r1, [fp, #-124]	; 0xffffff84
   152d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   152dc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   152e0:	str	r0, [fp, #-124]	; 0xffffff84
   152e4:	b	161a4 <test@@Base+0x17cc>
   152e8:	ldr	r3, [fp, #-124]	; 0xffffff84
   152ec:	add	r3, r3, #6
   152f0:	ldr	r2, [fp, #-128]	; 0xffffff80
   152f4:	mov	r1, r3
   152f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   152fc:	bl	12ad8 <_start@@Base+0x5c8>
   15300:	str	r0, [fp, #-124]	; 0xffffff84
   15304:	ldr	r2, [fp, #-128]	; 0xffffff80
   15308:	ldr	r1, [fp, #-124]	; 0xffffff84
   1530c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15310:	bl	12638 <_start@@Base+0x128>
   15314:	str	r0, [fp, #-124]	; 0xffffff84
   15318:	ldr	r2, [fp, #-124]	; 0xffffff84
   1531c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15320:	cmp	r2, r3
   15324:	bne	1534c <test@@Base+0x974>
   15328:	ldr	r3, [pc, #1608]	; 15978 <test@@Base+0xfa0>
   1532c:	ldr	r3, [r6, r3]
   15330:	ldr	r3, [r3]
   15334:	mov	r2, #13
   15338:	mov	r1, #1
   1533c:	ldr	r0, [pc, #1520]	; 15934 <test@@Base+0xf5c>
   15340:	add	r0, pc, r0
   15344:	bl	12480 <fwrite@plt>
   15348:	b	161a4 <test@@Base+0x17cc>
   1534c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15350:	ldr	r3, [fp, #-124]	; 0xffffff84
   15354:	cmp	r2, r3
   15358:	bls	153a0 <test@@Base+0x9c8>
   1535c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15360:	ldrb	r3, [r3]
   15364:	cmp	r3, #58	; 0x3a
   15368:	bne	153a0 <test@@Base+0x9c8>
   1536c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15370:	add	r3, r3, #1
   15374:	str	r3, [fp, #-124]	; 0xffffff84
   15378:	ldr	r2, [fp, #-128]	; 0xffffff80
   1537c:	ldr	r1, [fp, #-124]	; 0xffffff84
   15380:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15384:	bl	12638 <_start@@Base+0x128>
   15388:	str	r0, [fp, #-124]	; 0xffffff84
   1538c:	ldr	r2, [fp, #-124]	; 0xffffff84
   15390:	ldr	r3, [fp, #-128]	; 0xffffff80
   15394:	cmp	r2, r3
   15398:	beq	153dc <test@@Base+0xa04>
   1539c:	b	15400 <test@@Base+0xa28>
   153a0:	ldr	r3, [pc, #1488]	; 15978 <test@@Base+0xfa0>
   153a4:	ldr	r3, [r6, r3]
   153a8:	ldr	r3, [r3]
   153ac:	mov	r2, #58	; 0x3a
   153b0:	ldr	r1, [pc, #1408]	; 15938 <test@@Base+0xf60>
   153b4:	add	r1, pc, r1
   153b8:	mov	r0, r3
   153bc:	bl	124bc <fprintf@plt>
   153c0:	mov	r3, #17
   153c4:	ldr	r2, [fp, #-128]	; 0xffffff80
   153c8:	ldr	r1, [fp, #-124]	; 0xffffff84
   153cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   153d0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   153d4:	str	r0, [fp, #-124]	; 0xffffff84
   153d8:	b	161a4 <test@@Base+0x17cc>
   153dc:	ldr	r3, [pc, #1428]	; 15978 <test@@Base+0xfa0>
   153e0:	ldr	r3, [r6, r3]
   153e4:	ldr	r3, [r3]
   153e8:	mov	r2, #13
   153ec:	mov	r1, #1
   153f0:	ldr	r0, [pc, #1348]	; 1593c <test@@Base+0xf64>
   153f4:	add	r0, pc, r0
   153f8:	bl	12480 <fwrite@plt>
   153fc:	b	161a4 <test@@Base+0x17cc>
   15400:	mov	r3, #8
   15404:	mov	r2, #8
   15408:	mov	r1, #1
   1540c:	ldr	r0, [fp, #-120]	; 0xffffff88
   15410:	bl	1ba48 <flatcc_builder_table_add@@Base>
   15414:	str	r0, [fp, #-60]	; 0xffffffc4
   15418:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1541c:	cmp	r3, #0
   15420:	beq	16168 <test@@Base+0x1790>
   15424:	ldr	r3, [fp, #-124]	; 0xffffff84
   15428:	str	r3, [fp, #-56]	; 0xffffffc8
   1542c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15430:	ldr	r2, [fp, #-128]	; 0xffffff80
   15434:	ldr	r1, [fp, #-124]	; 0xffffff84
   15438:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1543c:	bl	237d4 <flatcc_json_parser_double@@Base>
   15440:	str	r0, [fp, #-124]	; 0xffffff84
   15444:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15448:	ldr	r3, [fp, #-124]	; 0xffffff84
   1544c:	cmp	r2, r3
   15450:	bne	15fd4 <test@@Base+0x15fc>
   15454:	b	161a4 <test@@Base+0x17cc>
   15458:	mov	r3, #115	; 0x73
   1545c:	uxtb	r2, r3
   15460:	mov	r3, #0
   15464:	lsl	r3, r2, #24
   15468:	str	r3, [fp, #-288]	; 0xfffffee0
   1546c:	mov	r3, #0
   15470:	str	r3, [fp, #-292]	; 0xfffffedc
   15474:	mov	r3, #101	; 0x65
   15478:	uxtb	r2, r3
   1547c:	mov	r3, #0
   15480:	lsl	r3, r2, #16
   15484:	str	r3, [fp, #-296]	; 0xfffffed8
   15488:	mov	r3, #0
   1548c:	str	r3, [fp, #-300]	; 0xfffffed4
   15490:	sub	r3, fp, #292	; 0x124
   15494:	ldrd	r0, [r3]
   15498:	sub	r3, fp, #300	; 0x12c
   1549c:	ldrd	r2, [r3]
   154a0:	orr	r0, r0, r2
   154a4:	orr	r1, r1, r3
   154a8:	mov	r3, #99	; 0x63
   154ac:	uxtb	r2, r3
   154b0:	mov	r3, #0
   154b4:	lsl	r3, r2, #8
   154b8:	str	r3, [fp, #-304]	; 0xfffffed0
   154bc:	mov	r3, #0
   154c0:	str	r3, [fp, #-308]	; 0xfffffecc
   154c4:	sub	r3, fp, #308	; 0x134
   154c8:	ldrd	r2, [r3]
   154cc:	orr	r2, r2, r0
   154d0:	orr	r3, r3, r1
   154d4:	mov	r0, r2
   154d8:	mov	r1, r3
   154dc:	mov	r3, #111	; 0x6f
   154e0:	uxtb	r2, r3
   154e4:	mov	r3, #0
   154e8:	mov	r3, r2
   154ec:	str	r3, [fp, #-312]	; 0xfffffec8
   154f0:	mov	r3, #0
   154f4:	str	r3, [fp, #-316]	; 0xfffffec4
   154f8:	sub	r3, fp, #316	; 0x13c
   154fc:	ldrd	r2, [r3]
   15500:	orr	r2, r2, r0
   15504:	orr	r3, r3, r1
   15508:	mov	r0, r2
   1550c:	mov	r1, r3
   15510:	mov	r3, #110	; 0x6e
   15514:	uxtb	r2, r3
   15518:	mov	r3, #0
   1551c:	lsr	ip, r2, #8
   15520:	str	ip, [fp, #-320]	; 0xfffffec0
   15524:	lsl	r3, r2, #24
   15528:	str	r3, [fp, #-324]	; 0xfffffebc
   1552c:	sub	r3, fp, #324	; 0x144
   15530:	ldrd	r2, [r3]
   15534:	orr	r2, r2, r0
   15538:	orr	r3, r3, r1
   1553c:	mov	r0, r2
   15540:	mov	r1, r3
   15544:	mov	r3, #100	; 0x64
   15548:	uxtb	r2, r3
   1554c:	mov	r3, #0
   15550:	lsl	ip, r3, #16
   15554:	str	ip, [fp, #-152]	; 0xffffff68
   15558:	ldr	ip, [fp, #-152]	; 0xffffff68
   1555c:	orr	ip, ip, r2, lsr #16
   15560:	str	ip, [fp, #-152]	; 0xffffff68
   15564:	lsl	r3, r2, #16
   15568:	str	r3, [fp, #-156]	; 0xffffff64
   1556c:	ldrd	r2, [fp, #-156]	; 0xffffff64
   15570:	orr	r2, r2, r0
   15574:	orr	r3, r3, r1
   15578:	mov	r0, r2
   1557c:	mov	r1, r3
   15580:	mov	r3, #115	; 0x73
   15584:	uxtb	r2, r3
   15588:	mov	r3, #0
   1558c:	lsl	ip, r3, #8
   15590:	str	ip, [fp, #-160]	; 0xffffff60
   15594:	ldr	ip, [fp, #-160]	; 0xffffff60
   15598:	orr	ip, ip, r2, lsr #24
   1559c:	str	ip, [fp, #-160]	; 0xffffff60
   155a0:	lsl	r3, r2, #8
   155a4:	str	r3, [fp, #-164]	; 0xffffff5c
   155a8:	ldrd	r2, [fp, #-164]	; 0xffffff5c
   155ac:	orr	r2, r2, r0
   155b0:	orr	r3, r3, r1
   155b4:	mov	r0, r2
   155b8:	mov	r1, r3
   155bc:	mov	r3, #32
   155c0:	uxtb	r2, r3
   155c4:	mov	r3, #0
   155c8:	orr	r0, r0, r2
   155cc:	orr	r1, r1, r3
   155d0:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   155d4:	cmp	r1, r3
   155d8:	cmpeq	r0, r2
   155dc:	beq	155fc <test@@Base+0xc24>
   155e0:	mov	r3, #13
   155e4:	ldr	r2, [fp, #-128]	; 0xffffff80
   155e8:	ldr	r1, [fp, #-124]	; 0xffffff84
   155ec:	ldr	r0, [fp, #-40]	; 0xffffffd8
   155f0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   155f4:	str	r0, [fp, #-124]	; 0xffffff84
   155f8:	b	161a4 <test@@Base+0x17cc>
   155fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15600:	str	r3, [fp, #-124]	; 0xffffff84
   15604:	ldr	r1, [fp, #-128]	; 0xffffff80
   15608:	ldr	r0, [fp, #-124]	; 0xffffff84
   1560c:	bl	12a90 <_start@@Base+0x580>
   15610:	strd	r0, [fp, #-52]	; 0xffffffcc
   15614:	ldr	r2, [fp, #-128]	; 0xffffff80
   15618:	ldr	r3, [fp, #-124]	; 0xffffff84
   1561c:	sub	r3, r2, r3
   15620:	cmp	r3, #8
   15624:	ble	15634 <test@@Base+0xc5c>
   15628:	ldr	r3, [fp, #-124]	; 0xffffff84
   1562c:	add	r3, r3, #8
   15630:	b	15638 <test@@Base+0xc60>
   15634:	ldr	r3, [fp, #-128]	; 0xffffff80
   15638:	str	r3, [fp, #-56]	; 0xffffffc8
   1563c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15640:	mov	r2, #0
   15644:	mvn	r3, #0
   15648:	and	r4, r0, r2
   1564c:	and	r5, r1, r3
   15650:	mov	r3, #108	; 0x6c
   15654:	uxtb	r2, r3
   15658:	mov	r3, #0
   1565c:	lsl	r3, r2, #24
   15660:	str	r3, [fp, #-328]	; 0xfffffeb8
   15664:	mov	r3, #0
   15668:	str	r3, [fp, #-332]	; 0xfffffeb4
   1566c:	mov	r3, #101	; 0x65
   15670:	uxtb	r2, r3
   15674:	mov	r3, #0
   15678:	lsl	r3, r2, #16
   1567c:	str	r3, [fp, #-336]	; 0xfffffeb0
   15680:	mov	r3, #0
   15684:	str	r3, [fp, #-340]	; 0xfffffeac
   15688:	sub	r3, fp, #332	; 0x14c
   1568c:	ldrd	r0, [r3]
   15690:	sub	r3, fp, #340	; 0x154
   15694:	ldrd	r2, [r3]
   15698:	orr	r0, r0, r2
   1569c:	orr	r1, r1, r3
   156a0:	mov	r3, #102	; 0x66
   156a4:	uxtb	r2, r3
   156a8:	mov	r3, #0
   156ac:	lsl	r3, r2, #8
   156b0:	str	r3, [fp, #-344]	; 0xfffffea8
   156b4:	mov	r3, #0
   156b8:	str	r3, [fp, #-348]	; 0xfffffea4
   156bc:	sub	r3, fp, #348	; 0x15c
   156c0:	ldrd	r2, [r3]
   156c4:	orr	r2, r2, r0
   156c8:	orr	r3, r3, r1
   156cc:	mov	r0, r2
   156d0:	mov	r1, r3
   156d4:	mov	r3, #116	; 0x74
   156d8:	uxtb	r2, r3
   156dc:	mov	r3, #0
   156e0:	mov	r3, r2
   156e4:	str	r3, [fp, #-352]	; 0xfffffea0
   156e8:	mov	r3, #0
   156ec:	str	r3, [fp, #-356]	; 0xfffffe9c
   156f0:	sub	r3, fp, #356	; 0x164
   156f4:	ldrd	r2, [r3]
   156f8:	orr	r2, r2, r0
   156fc:	orr	r3, r3, r1
   15700:	cmp	r5, r3
   15704:	cmpeq	r4, r2
   15708:	bcs	159d8 <test@@Base+0x1000>
   1570c:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15710:	mov	r2, #0
   15714:	mvn	r3, #0
   15718:	and	r4, r0, r2
   1571c:	and	r5, r1, r3
   15720:	mov	r3, #108	; 0x6c
   15724:	uxtb	r2, r3
   15728:	mov	r3, #0
   1572c:	lsl	r3, r2, #24
   15730:	str	r3, [fp, #-360]	; 0xfffffe98
   15734:	mov	r3, #0
   15738:	str	r3, [fp, #-364]	; 0xfffffe94
   1573c:	mov	r3, #101	; 0x65
   15740:	uxtb	r2, r3
   15744:	mov	r3, #0
   15748:	lsl	r3, r2, #16
   1574c:	str	r3, [fp, #-368]	; 0xfffffe90
   15750:	mov	r3, #0
   15754:	str	r3, [fp, #-372]	; 0xfffffe8c
   15758:	sub	r3, fp, #364	; 0x16c
   1575c:	ldrd	r0, [r3]
   15760:	sub	r3, fp, #372	; 0x174
   15764:	ldrd	r2, [r3]
   15768:	orr	r0, r0, r2
   1576c:	orr	r1, r1, r3
   15770:	mov	r3, #97	; 0x61
   15774:	uxtb	r2, r3
   15778:	mov	r3, #0
   1577c:	lsl	r3, r2, #8
   15780:	str	r3, [fp, #-376]	; 0xfffffe88
   15784:	mov	r3, #0
   15788:	str	r3, [fp, #-380]	; 0xfffffe84
   1578c:	sub	r3, fp, #380	; 0x17c
   15790:	ldrd	r2, [r3]
   15794:	orr	r2, r2, r0
   15798:	orr	r3, r3, r1
   1579c:	mov	r0, r2
   157a0:	mov	r1, r3
   157a4:	mov	r3, #100	; 0x64
   157a8:	uxtb	r2, r3
   157ac:	mov	r3, #0
   157b0:	mov	r3, r2
   157b4:	str	r3, [fp, #-384]	; 0xfffffe80
   157b8:	mov	r3, #0
   157bc:	str	r3, [fp, #-388]	; 0xfffffe7c
   157c0:	sub	r3, fp, #388	; 0x184
   157c4:	ldrd	r2, [r3]
   157c8:	orr	r2, r2, r0
   157cc:	orr	r3, r3, r1
   157d0:	cmp	r5, r3
   157d4:	cmpeq	r4, r2
   157d8:	beq	157f8 <test@@Base+0xe20>
   157dc:	mov	r3, #13
   157e0:	ldr	r2, [fp, #-128]	; 0xffffff80
   157e4:	ldr	r1, [fp, #-124]	; 0xffffff84
   157e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   157ec:	bl	222fc <flatcc_json_parser_set_error@@Base>
   157f0:	str	r0, [fp, #-124]	; 0xffffff84
   157f4:	b	161a4 <test@@Base+0x17cc>
   157f8:	ldr	r3, [fp, #-124]	; 0xffffff84
   157fc:	add	r3, r3, #4
   15800:	ldr	r2, [fp, #-128]	; 0xffffff80
   15804:	mov	r1, r3
   15808:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1580c:	bl	12ad8 <_start@@Base+0x5c8>
   15810:	str	r0, [fp, #-124]	; 0xffffff84
   15814:	ldr	r2, [fp, #-128]	; 0xffffff80
   15818:	ldr	r1, [fp, #-124]	; 0xffffff84
   1581c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15820:	bl	12638 <_start@@Base+0x128>
   15824:	str	r0, [fp, #-124]	; 0xffffff84
   15828:	ldr	r2, [fp, #-124]	; 0xffffff84
   1582c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15830:	cmp	r2, r3
   15834:	bne	1585c <test@@Base+0xe84>
   15838:	ldr	r3, [pc, #312]	; 15978 <test@@Base+0xfa0>
   1583c:	ldr	r3, [r6, r3]
   15840:	ldr	r3, [r3]
   15844:	mov	r2, #13
   15848:	mov	r1, #1
   1584c:	ldr	r0, [pc, #236]	; 15940 <test@@Base+0xf68>
   15850:	add	r0, pc, r0
   15854:	bl	12480 <fwrite@plt>
   15858:	b	161a4 <test@@Base+0x17cc>
   1585c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15860:	ldr	r3, [fp, #-124]	; 0xffffff84
   15864:	cmp	r2, r3
   15868:	bls	158b0 <test@@Base+0xed8>
   1586c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15870:	ldrb	r3, [r3]
   15874:	cmp	r3, #58	; 0x3a
   15878:	bne	158b0 <test@@Base+0xed8>
   1587c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15880:	add	r3, r3, #1
   15884:	str	r3, [fp, #-124]	; 0xffffff84
   15888:	ldr	r2, [fp, #-128]	; 0xffffff80
   1588c:	ldr	r1, [fp, #-124]	; 0xffffff84
   15890:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15894:	bl	12638 <_start@@Base+0x128>
   15898:	str	r0, [fp, #-124]	; 0xffffff84
   1589c:	ldr	r2, [fp, #-124]	; 0xffffff84
   158a0:	ldr	r3, [fp, #-128]	; 0xffffff80
   158a4:	cmp	r2, r3
   158a8:	beq	158ec <test@@Base+0xf14>
   158ac:	b	15980 <test@@Base+0xfa8>
   158b0:	ldr	r3, [pc, #192]	; 15978 <test@@Base+0xfa0>
   158b4:	ldr	r3, [r6, r3]
   158b8:	ldr	r3, [r3]
   158bc:	mov	r2, #58	; 0x3a
   158c0:	ldr	r1, [pc, #124]	; 15944 <test@@Base+0xf6c>
   158c4:	add	r1, pc, r1
   158c8:	mov	r0, r3
   158cc:	bl	124bc <fprintf@plt>
   158d0:	mov	r3, #17
   158d4:	ldr	r2, [fp, #-128]	; 0xffffff80
   158d8:	ldr	r1, [fp, #-124]	; 0xffffff84
   158dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   158e0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   158e4:	str	r0, [fp, #-124]	; 0xffffff84
   158e8:	b	161a4 <test@@Base+0x17cc>
   158ec:	ldr	r3, [pc, #132]	; 15978 <test@@Base+0xfa0>
   158f0:	ldr	r3, [r6, r3]
   158f4:	ldr	r3, [r3]
   158f8:	mov	r2, #13
   158fc:	mov	r1, #1
   15900:	ldr	r0, [pc, #64]	; 15948 <test@@Base+0xf70>
   15904:	add	r0, pc, r0
   15908:	bl	12480 <fwrite@plt>
   1590c:	b	161a4 <test@@Base+0x17cc>
   15910:	andeq	r3, r2, r0, lsl #12
   15914:			; <UNDEFINED> instruction: 0x000116b8
   15918:	andeq	r1, r1, r8, ror r6
   1591c:	andeq	r1, r1, r4, lsl r6
   15920:	andeq	r1, r1, r4, asr #11
   15924:			; <UNDEFINED> instruction: 0xffff0000
   15928:	ldrdeq	r1, [r1], -r0
   1592c:	andeq	r1, r1, ip, ror #4
   15930:	andeq	r1, r1, ip, lsl r2
   15934:	andeq	r0, r1, r0, asr #27
   15938:	andeq	r0, r1, ip, asr sp
   1593c:	andeq	r0, r1, ip, lsl #26
   15940:			; <UNDEFINED> instruction: 0x000108b0
   15944:	andeq	r0, r1, ip, asr #16
   15948:	strdeq	r0, [r1], -ip
   1594c:	andeq	r0, r1, r4, ror #11
   15950:	andeq	r0, r1, r0, lsl #11
   15954:	andeq	r0, r1, r0, lsr r5
   15958:	andeq	r0, r1, r8, lsl #7
   1595c:	andeq	r0, r1, r4, lsr #6
   15960:	ldrdeq	r0, [r1], -r4
   15964:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   15968:	andeq	r0, r1, ip, lsl #1
   1596c:	strdeq	pc, [r0], -ip
   15970:	ldrdeq	pc, [r0], -r4
   15974:	andeq	pc, r0, ip, lsr pc	; <UNPREDICTABLE>
   15978:	andeq	r0, r0, r8, asr r0
   1597c:	andeq	pc, r0, r8, lsl pc	; <UNPREDICTABLE>
   15980:	mov	r3, #8
   15984:	mov	r2, #8
   15988:	mov	r1, #3
   1598c:	ldr	r0, [fp, #-120]	; 0xffffff88
   15990:	bl	1ba48 <flatcc_builder_table_add@@Base>
   15994:	str	r0, [fp, #-60]	; 0xffffffc4
   15998:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1599c:	cmp	r3, #0
   159a0:	beq	16170 <test@@Base+0x1798>
   159a4:	ldr	r3, [fp, #-124]	; 0xffffff84
   159a8:	str	r3, [fp, #-56]	; 0xffffffc8
   159ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   159b0:	ldr	r2, [fp, #-128]	; 0xffffff80
   159b4:	ldr	r1, [fp, #-124]	; 0xffffff84
   159b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   159bc:	bl	134f4 <_start@@Base+0xfe4>
   159c0:	str	r0, [fp, #-124]	; 0xffffff84
   159c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   159c8:	ldr	r3, [fp, #-124]	; 0xffffff84
   159cc:	cmp	r2, r3
   159d0:	bne	15fd4 <test@@Base+0x15fc>
   159d4:	b	161a4 <test@@Base+0x17cc>
   159d8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   159dc:	mov	r2, #0
   159e0:	mvn	r3, #0
   159e4:	and	r4, r0, r2
   159e8:	and	r5, r1, r3
   159ec:	mov	r3, #108	; 0x6c
   159f0:	uxtb	r2, r3
   159f4:	mov	r3, #0
   159f8:	lsl	r3, r2, #24
   159fc:	str	r3, [fp, #-392]	; 0xfffffe78
   15a00:	mov	r3, #0
   15a04:	str	r3, [fp, #-396]	; 0xfffffe74
   15a08:	mov	r3, #101	; 0x65
   15a0c:	uxtb	r2, r3
   15a10:	mov	r3, #0
   15a14:	lsl	r3, r2, #16
   15a18:	str	r3, [fp, #-400]	; 0xfffffe70
   15a1c:	mov	r3, #0
   15a20:	str	r3, [fp, #-404]	; 0xfffffe6c
   15a24:	sub	r3, fp, #396	; 0x18c
   15a28:	ldrd	r0, [r3]
   15a2c:	sub	r3, fp, #404	; 0x194
   15a30:	ldrd	r2, [r3]
   15a34:	orr	r0, r0, r2
   15a38:	orr	r1, r1, r3
   15a3c:	mov	r3, #102	; 0x66
   15a40:	uxtb	r2, r3
   15a44:	mov	r3, #0
   15a48:	lsl	r3, r2, #8
   15a4c:	str	r3, [fp, #-408]	; 0xfffffe68
   15a50:	mov	r3, #0
   15a54:	str	r3, [fp, #-412]	; 0xfffffe64
   15a58:	sub	r3, fp, #412	; 0x19c
   15a5c:	ldrd	r2, [r3]
   15a60:	orr	r2, r2, r0
   15a64:	orr	r3, r3, r1
   15a68:	mov	r0, r2
   15a6c:	mov	r1, r3
   15a70:	mov	r3, #116	; 0x74
   15a74:	uxtb	r2, r3
   15a78:	mov	r3, #0
   15a7c:	mov	r3, r2
   15a80:	str	r3, [fp, #-416]	; 0xfffffe60
   15a84:	mov	r3, #0
   15a88:	str	r3, [fp, #-420]	; 0xfffffe5c
   15a8c:	sub	r3, fp, #420	; 0x1a4
   15a90:	ldrd	r2, [r3]
   15a94:	orr	r2, r2, r0
   15a98:	orr	r3, r3, r1
   15a9c:	cmp	r5, r3
   15aa0:	cmpeq	r4, r2
   15aa4:	beq	15ac4 <test@@Base+0x10ec>
   15aa8:	mov	r3, #13
   15aac:	ldr	r2, [fp, #-128]	; 0xffffff80
   15ab0:	ldr	r1, [fp, #-124]	; 0xffffff84
   15ab4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ab8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   15abc:	str	r0, [fp, #-124]	; 0xffffff84
   15ac0:	b	161a4 <test@@Base+0x17cc>
   15ac4:	ldr	r3, [fp, #-124]	; 0xffffff84
   15ac8:	add	r3, r3, #4
   15acc:	ldr	r2, [fp, #-128]	; 0xffffff80
   15ad0:	mov	r1, r3
   15ad4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15ad8:	bl	12ad8 <_start@@Base+0x5c8>
   15adc:	str	r0, [fp, #-124]	; 0xffffff84
   15ae0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15ae4:	ldr	r1, [fp, #-124]	; 0xffffff84
   15ae8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15aec:	bl	12638 <_start@@Base+0x128>
   15af0:	str	r0, [fp, #-124]	; 0xffffff84
   15af4:	ldr	r2, [fp, #-124]	; 0xffffff84
   15af8:	ldr	r3, [fp, #-128]	; 0xffffff80
   15afc:	cmp	r2, r3
   15b00:	bne	15b28 <test@@Base+0x1150>
   15b04:	ldr	r3, [pc, #-404]	; 15978 <test@@Base+0xfa0>
   15b08:	ldr	r3, [r6, r3]
   15b0c:	ldr	r3, [r3]
   15b10:	mov	r2, #13
   15b14:	mov	r1, #1
   15b18:	ldr	r0, [pc, #-468]	; 1594c <test@@Base+0xf74>
   15b1c:	add	r0, pc, r0
   15b20:	bl	12480 <fwrite@plt>
   15b24:	b	161a4 <test@@Base+0x17cc>
   15b28:	ldr	r2, [fp, #-128]	; 0xffffff80
   15b2c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15b30:	cmp	r2, r3
   15b34:	bls	15b7c <test@@Base+0x11a4>
   15b38:	ldr	r3, [fp, #-124]	; 0xffffff84
   15b3c:	ldrb	r3, [r3]
   15b40:	cmp	r3, #58	; 0x3a
   15b44:	bne	15b7c <test@@Base+0x11a4>
   15b48:	ldr	r3, [fp, #-124]	; 0xffffff84
   15b4c:	add	r3, r3, #1
   15b50:	str	r3, [fp, #-124]	; 0xffffff84
   15b54:	ldr	r2, [fp, #-128]	; 0xffffff80
   15b58:	ldr	r1, [fp, #-124]	; 0xffffff84
   15b5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15b60:	bl	12638 <_start@@Base+0x128>
   15b64:	str	r0, [fp, #-124]	; 0xffffff84
   15b68:	ldr	r2, [fp, #-124]	; 0xffffff84
   15b6c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15b70:	cmp	r2, r3
   15b74:	beq	15bb8 <test@@Base+0x11e0>
   15b78:	b	15bdc <test@@Base+0x1204>
   15b7c:	ldr	r3, [pc, #-524]	; 15978 <test@@Base+0xfa0>
   15b80:	ldr	r3, [r6, r3]
   15b84:	ldr	r3, [r3]
   15b88:	mov	r2, #58	; 0x3a
   15b8c:	ldr	r1, [pc, #-580]	; 15950 <test@@Base+0xf78>
   15b90:	add	r1, pc, r1
   15b94:	mov	r0, r3
   15b98:	bl	124bc <fprintf@plt>
   15b9c:	mov	r3, #17
   15ba0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15ba4:	ldr	r1, [fp, #-124]	; 0xffffff84
   15ba8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15bac:	bl	222fc <flatcc_json_parser_set_error@@Base>
   15bb0:	str	r0, [fp, #-124]	; 0xffffff84
   15bb4:	b	161a4 <test@@Base+0x17cc>
   15bb8:	ldr	r3, [pc, #-584]	; 15978 <test@@Base+0xfa0>
   15bbc:	ldr	r3, [r6, r3]
   15bc0:	ldr	r3, [r3]
   15bc4:	mov	r2, #13
   15bc8:	mov	r1, #1
   15bcc:	ldr	r0, [pc, #-640]	; 15954 <test@@Base+0xf7c>
   15bd0:	add	r0, pc, r0
   15bd4:	bl	12480 <fwrite@plt>
   15bd8:	b	161a4 <test@@Base+0x17cc>
   15bdc:	mov	r3, #4
   15be0:	mov	r2, #4
   15be4:	mov	r1, #2
   15be8:	ldr	r0, [fp, #-120]	; 0xffffff88
   15bec:	bl	1ba48 <flatcc_builder_table_add@@Base>
   15bf0:	str	r0, [fp, #-60]	; 0xffffffc4
   15bf4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15bf8:	cmp	r3, #0
   15bfc:	beq	16178 <test@@Base+0x17a0>
   15c00:	ldr	r3, [fp, #-124]	; 0xffffff84
   15c04:	str	r3, [fp, #-56]	; 0xffffffc8
   15c08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15c0c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15c10:	ldr	r1, [fp, #-124]	; 0xffffff84
   15c14:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15c18:	bl	13354 <_start@@Base+0xe44>
   15c1c:	str	r0, [fp, #-124]	; 0xffffff84
   15c20:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15c24:	ldr	r3, [fp, #-124]	; 0xffffff84
   15c28:	cmp	r2, r3
   15c2c:	bne	15fd4 <test@@Base+0x15fc>
   15c30:	b	161a4 <test@@Base+0x17cc>
   15c34:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   15c38:	mov	r2, #0
   15c3c:	mvn	r3, #0
   15c40:	and	r4, r0, r2
   15c44:	and	r5, r1, r3
   15c48:	mov	r3, #122	; 0x7a
   15c4c:	uxtb	r2, r3
   15c50:	mov	r3, #0
   15c54:	lsl	r3, r2, #24
   15c58:	str	r3, [fp, #-464]	; 0xfffffe30
   15c5c:	mov	r3, #0
   15c60:	str	r3, [fp, #-468]	; 0xfffffe2c
   15c64:	mov	r3, #117	; 0x75
   15c68:	uxtb	r2, r3
   15c6c:	mov	r3, #0
   15c70:	lsl	r3, r2, #16
   15c74:	str	r3, [fp, #-472]	; 0xfffffe28
   15c78:	mov	r3, #0
   15c7c:	str	r3, [fp, #-476]	; 0xfffffe24
   15c80:	sub	r3, fp, #468	; 0x1d4
   15c84:	ldrd	r0, [r3]
   15c88:	sub	r3, fp, #476	; 0x1dc
   15c8c:	ldrd	r2, [r3]
   15c90:	orr	r0, r0, r2
   15c94:	orr	r1, r1, r3
   15c98:	mov	r3, #108	; 0x6c
   15c9c:	uxtb	r2, r3
   15ca0:	mov	r3, #0
   15ca4:	lsl	r3, r2, #8
   15ca8:	str	r3, [fp, #-480]	; 0xfffffe20
   15cac:	mov	r3, #0
   15cb0:	str	r3, [fp, #-484]	; 0xfffffe1c
   15cb4:	sub	r3, fp, #484	; 0x1e4
   15cb8:	ldrd	r2, [r3]
   15cbc:	orr	r2, r2, r0
   15cc0:	orr	r3, r3, r1
   15cc4:	mov	r0, r2
   15cc8:	mov	r1, r3
   15ccc:	mov	r3, #117	; 0x75
   15cd0:	uxtb	r2, r3
   15cd4:	mov	r3, #0
   15cd8:	mov	r3, r2
   15cdc:	str	r3, [fp, #-488]	; 0xfffffe18
   15ce0:	mov	r3, #0
   15ce4:	str	r3, [fp, #-492]	; 0xfffffe14
   15ce8:	sub	r3, fp, #492	; 0x1ec
   15cec:	ldrd	r2, [r3]
   15cf0:	orr	r2, r2, r0
   15cf4:	orr	r3, r3, r1
   15cf8:	cmp	r5, r3
   15cfc:	cmpeq	r4, r2
   15d00:	beq	15d20 <test@@Base+0x1348>
   15d04:	mov	r3, #13
   15d08:	ldr	r2, [fp, #-128]	; 0xffffff80
   15d0c:	ldr	r1, [fp, #-124]	; 0xffffff84
   15d10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15d14:	bl	222fc <flatcc_json_parser_set_error@@Base>
   15d18:	str	r0, [fp, #-124]	; 0xffffff84
   15d1c:	b	161a4 <test@@Base+0x17cc>
   15d20:	ldr	r3, [fp, #-124]	; 0xffffff84
   15d24:	add	r3, r3, #4
   15d28:	ldr	r2, [fp, #-128]	; 0xffffff80
   15d2c:	mov	r1, r3
   15d30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15d34:	bl	12ad8 <_start@@Base+0x5c8>
   15d38:	str	r0, [fp, #-124]	; 0xffffff84
   15d3c:	ldr	r2, [fp, #-128]	; 0xffffff80
   15d40:	ldr	r1, [fp, #-124]	; 0xffffff84
   15d44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15d48:	bl	12638 <_start@@Base+0x128>
   15d4c:	str	r0, [fp, #-124]	; 0xffffff84
   15d50:	ldr	r2, [fp, #-124]	; 0xffffff84
   15d54:	ldr	r3, [fp, #-128]	; 0xffffff80
   15d58:	cmp	r2, r3
   15d5c:	bne	15d84 <test@@Base+0x13ac>
   15d60:	ldr	r3, [pc, #-1008]	; 15978 <test@@Base+0xfa0>
   15d64:	ldr	r3, [r6, r3]
   15d68:	ldr	r3, [r3]
   15d6c:	mov	r2, #13
   15d70:	mov	r1, #1
   15d74:	ldr	r0, [pc, #-1060]	; 15958 <test@@Base+0xf80>
   15d78:	add	r0, pc, r0
   15d7c:	bl	12480 <fwrite@plt>
   15d80:	b	161a4 <test@@Base+0x17cc>
   15d84:	ldr	r2, [fp, #-128]	; 0xffffff80
   15d88:	ldr	r3, [fp, #-124]	; 0xffffff84
   15d8c:	cmp	r2, r3
   15d90:	bls	15dd8 <test@@Base+0x1400>
   15d94:	ldr	r3, [fp, #-124]	; 0xffffff84
   15d98:	ldrb	r3, [r3]
   15d9c:	cmp	r3, #58	; 0x3a
   15da0:	bne	15dd8 <test@@Base+0x1400>
   15da4:	ldr	r3, [fp, #-124]	; 0xffffff84
   15da8:	add	r3, r3, #1
   15dac:	str	r3, [fp, #-124]	; 0xffffff84
   15db0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15db4:	ldr	r1, [fp, #-124]	; 0xffffff84
   15db8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15dbc:	bl	12638 <_start@@Base+0x128>
   15dc0:	str	r0, [fp, #-124]	; 0xffffff84
   15dc4:	ldr	r2, [fp, #-124]	; 0xffffff84
   15dc8:	ldr	r3, [fp, #-128]	; 0xffffff80
   15dcc:	cmp	r2, r3
   15dd0:	beq	15e14 <test@@Base+0x143c>
   15dd4:	b	15e38 <test@@Base+0x1460>
   15dd8:	ldr	r3, [pc, #-1128]	; 15978 <test@@Base+0xfa0>
   15ddc:	ldr	r3, [r6, r3]
   15de0:	ldr	r3, [r3]
   15de4:	mov	r2, #58	; 0x3a
   15de8:	ldr	r1, [pc, #-1172]	; 1595c <test@@Base+0xf84>
   15dec:	add	r1, pc, r1
   15df0:	mov	r0, r3
   15df4:	bl	124bc <fprintf@plt>
   15df8:	mov	r3, #17
   15dfc:	ldr	r2, [fp, #-128]	; 0xffffff80
   15e00:	ldr	r1, [fp, #-124]	; 0xffffff84
   15e04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15e08:	bl	222fc <flatcc_json_parser_set_error@@Base>
   15e0c:	str	r0, [fp, #-124]	; 0xffffff84
   15e10:	b	161a4 <test@@Base+0x17cc>
   15e14:	ldr	r3, [pc, #-1188]	; 15978 <test@@Base+0xfa0>
   15e18:	ldr	r3, [r6, r3]
   15e1c:	ldr	r3, [r3]
   15e20:	mov	r2, #13
   15e24:	mov	r1, #1
   15e28:	ldr	r0, [pc, #-1232]	; 15960 <test@@Base+0xf88>
   15e2c:	add	r0, pc, r0
   15e30:	bl	12480 <fwrite@plt>
   15e34:	b	161a4 <test@@Base+0x17cc>
   15e38:	ldr	r2, [fp, #-128]	; 0xffffff80
   15e3c:	ldr	r1, [fp, #-124]	; 0xffffff84
   15e40:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15e44:	bl	126cc <_start@@Base+0x1bc>
   15e48:	str	r0, [fp, #-124]	; 0xffffff84
   15e4c:	ldr	r3, [fp, #-124]	; 0xffffff84
   15e50:	str	r3, [fp, #-56]	; 0xffffffc8
   15e54:	ldr	r2, [fp, #-128]	; 0xffffff80
   15e58:	ldr	r1, [fp, #-124]	; 0xffffff84
   15e5c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15e60:	bl	22370 <flatcc_json_parser_string_part@@Base>
   15e64:	str	r0, [fp, #-124]	; 0xffffff84
   15e68:	ldr	r2, [fp, #-124]	; 0xffffff84
   15e6c:	ldr	r3, [fp, #-128]	; 0xffffff80
   15e70:	cmp	r2, r3
   15e74:	beq	16180 <test@@Base+0x17a8>
   15e78:	ldr	r3, [fp, #-124]	; 0xffffff84
   15e7c:	ldrb	r3, [r3]
   15e80:	cmp	r3, #34	; 0x22
   15e84:	bne	15eac <test@@Base+0x14d4>
   15e88:	ldr	r2, [fp, #-124]	; 0xffffff84
   15e8c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15e90:	sub	r3, r2, r3
   15e94:	mov	r2, r3
   15e98:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15e9c:	ldr	r0, [fp, #-120]	; 0xffffff88
   15ea0:	bl	1b6e0 <flatcc_builder_create_string@@Base>
   15ea4:	str	r0, [fp, #-32]	; 0xffffffe0
   15ea8:	b	15f8c <test@@Base+0x15b4>
   15eac:	ldr	r0, [fp, #-120]	; 0xffffff88
   15eb0:	bl	1946c <flatcc_builder_start_string@@Base>
   15eb4:	ldr	r2, [fp, #-124]	; 0xffffff84
   15eb8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15ebc:	sub	r3, r2, r3
   15ec0:	mov	r1, r3
   15ec4:	ldr	r0, [fp, #-120]	; 0xffffff88
   15ec8:	bl	18de4 <flatcc_builder_extend_string@@Base>
   15ecc:	str	r0, [fp, #-64]	; 0xffffffc0
   15ed0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15ed4:	cmp	r3, #0
   15ed8:	beq	16188 <test@@Base+0x17b0>
   15edc:	ldr	r2, [fp, #-124]	; 0xffffff84
   15ee0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15ee4:	sub	r3, r2, r3
   15ee8:	mov	r2, r3
   15eec:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15ef0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15ef4:	bl	1245c <memcpy@plt>
   15ef8:	sub	r3, fp, #116	; 0x74
   15efc:	ldr	r2, [fp, #-128]	; 0xffffff80
   15f00:	ldr	r1, [fp, #-124]	; 0xffffff84
   15f04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15f08:	bl	225ec <flatcc_json_parser_string_escape@@Base>
   15f0c:	str	r0, [fp, #-124]	; 0xffffff84
   15f10:	sub	r1, fp, #116	; 0x74
   15f14:	add	r1, r1, #1
   15f18:	ldrb	r3, [fp, #-116]	; 0xffffff8c
   15f1c:	mov	r2, r3
   15f20:	ldr	r0, [fp, #-120]	; 0xffffff88
   15f24:	bl	18e7c <flatcc_builder_append_string@@Base>
   15f28:	ldr	r3, [fp, #-124]	; 0xffffff84
   15f2c:	str	r3, [fp, #-56]	; 0xffffffc8
   15f30:	ldr	r2, [fp, #-128]	; 0xffffff80
   15f34:	ldr	r1, [fp, #-124]	; 0xffffff84
   15f38:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15f3c:	bl	22370 <flatcc_json_parser_string_part@@Base>
   15f40:	str	r0, [fp, #-124]	; 0xffffff84
   15f44:	ldr	r2, [fp, #-124]	; 0xffffff84
   15f48:	ldr	r3, [fp, #-128]	; 0xffffff80
   15f4c:	cmp	r2, r3
   15f50:	beq	16190 <test@@Base+0x17b8>
   15f54:	ldr	r2, [fp, #-124]	; 0xffffff84
   15f58:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15f5c:	sub	r3, r2, r3
   15f60:	mov	r2, r3
   15f64:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15f68:	ldr	r0, [fp, #-120]	; 0xffffff88
   15f6c:	bl	18e7c <flatcc_builder_append_string@@Base>
   15f70:	ldr	r3, [fp, #-124]	; 0xffffff84
   15f74:	ldrb	r3, [r3]
   15f78:	cmp	r3, #34	; 0x22
   15f7c:	bne	15ef8 <test@@Base+0x1520>
   15f80:	ldr	r0, [fp, #-120]	; 0xffffff88
   15f84:	bl	1b908 <flatcc_builder_end_string@@Base>
   15f88:	str	r0, [fp, #-32]	; 0xffffffe0
   15f8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f90:	cmp	r3, #0
   15f94:	beq	16198 <test@@Base+0x17c0>
   15f98:	mov	r1, #10
   15f9c:	ldr	r0, [fp, #-120]	; 0xffffff88
   15fa0:	bl	1bca4 <flatcc_builder_table_add_offset@@Base>
   15fa4:	str	r0, [fp, #-68]	; 0xffffffbc
   15fa8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15fac:	cmp	r3, #0
   15fb0:	beq	161a0 <test@@Base+0x17c8>
   15fb4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15fb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15fbc:	str	r3, [r2]
   15fc0:	ldr	r2, [fp, #-128]	; 0xffffff80
   15fc4:	ldr	r1, [fp, #-124]	; 0xffffff84
   15fc8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15fcc:	bl	1273c <_start@@Base+0x22c>
   15fd0:	str	r0, [fp, #-124]	; 0xffffff84
   15fd4:	ldr	r2, [fp, #-128]	; 0xffffff80
   15fd8:	ldr	r1, [fp, #-124]	; 0xffffff84
   15fdc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   15fe0:	bl	12638 <_start@@Base+0x128>
   15fe4:	str	r0, [fp, #-124]	; 0xffffff84
   15fe8:	ldr	r2, [fp, #-124]	; 0xffffff84
   15fec:	ldr	r3, [fp, #-128]	; 0xffffff80
   15ff0:	cmp	r2, r3
   15ff4:	bne	1601c <test@@Base+0x1644>
   15ff8:	ldr	r3, [pc, #-1672]	; 15978 <test@@Base+0xfa0>
   15ffc:	ldr	r3, [r6, r3]
   16000:	ldr	r3, [r3]
   16004:	mov	r2, #13
   16008:	mov	r1, #1
   1600c:	ldr	r0, [pc, #-1712]	; 15964 <test@@Base+0xf8c>
   16010:	add	r0, pc, r0
   16014:	bl	12480 <fwrite@plt>
   16018:	b	161a4 <test@@Base+0x17cc>
   1601c:	ldr	r3, [fp, #-124]	; 0xffffff84
   16020:	ldrb	r3, [r3]
   16024:	cmp	r3, #44	; 0x2c
   16028:	bne	16094 <test@@Base+0x16bc>
   1602c:	ldr	r3, [fp, #-124]	; 0xffffff84
   16030:	add	r3, r3, #1
   16034:	str	r3, [fp, #-124]	; 0xffffff84
   16038:	ldr	r2, [fp, #-128]	; 0xffffff80
   1603c:	ldr	r1, [fp, #-124]	; 0xffffff84
   16040:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16044:	bl	12638 <_start@@Base+0x128>
   16048:	str	r0, [fp, #-124]	; 0xffffff84
   1604c:	ldr	r2, [fp, #-124]	; 0xffffff84
   16050:	ldr	r3, [fp, #-128]	; 0xffffff80
   16054:	cmp	r2, r3
   16058:	bne	16080 <test@@Base+0x16a8>
   1605c:	ldr	r3, [pc, #-1772]	; 15978 <test@@Base+0xfa0>
   16060:	ldr	r3, [r6, r3]
   16064:	ldr	r3, [r3]
   16068:	mov	r2, #13
   1606c:	mov	r1, #1
   16070:	ldr	r0, [pc, #-1808]	; 15968 <test@@Base+0xf90>
   16074:	add	r0, pc, r0
   16078:	bl	12480 <fwrite@plt>
   1607c:	b	161a4 <test@@Base+0x17cc>
   16080:	ldr	r3, [fp, #-124]	; 0xffffff84
   16084:	ldrb	r3, [r3]
   16088:	cmp	r3, #125	; 0x7d
   1608c:	beq	16094 <test@@Base+0x16bc>
   16090:	b	14b54 <test@@Base+0x17c>
   16094:	ldr	r2, [fp, #-128]	; 0xffffff80
   16098:	ldr	r3, [fp, #-124]	; 0xffffff84
   1609c:	cmp	r2, r3
   160a0:	bls	16100 <test@@Base+0x1728>
   160a4:	ldr	r3, [fp, #-124]	; 0xffffff84
   160a8:	ldrb	r3, [r3]
   160ac:	cmp	r3, #125	; 0x7d
   160b0:	bne	16100 <test@@Base+0x1728>
   160b4:	ldr	r3, [fp, #-124]	; 0xffffff84
   160b8:	add	r3, r3, #1
   160bc:	str	r3, [fp, #-124]	; 0xffffff84
   160c0:	ldr	r0, [fp, #-120]	; 0xffffff88
   160c4:	bl	1a0b8 <flatcc_builder_end_table@@Base>
   160c8:	str	r0, [fp, #-36]	; 0xffffffdc
   160cc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   160d0:	ldr	r0, [fp, #-120]	; 0xffffff88
   160d4:	bl	18668 <flatcc_builder_end_buffer@@Base>
   160d8:	ldr	r2, [fp, #-128]	; 0xffffff80
   160dc:	ldr	r1, [fp, #-124]	; 0xffffff84
   160e0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   160e4:	bl	12638 <_start@@Base+0x128>
   160e8:	str	r0, [fp, #-124]	; 0xffffff84
   160ec:	ldr	r2, [fp, #-124]	; 0xffffff84
   160f0:	ldr	r3, [fp, #-128]	; 0xffffff80
   160f4:	cmp	r2, r3
   160f8:	bne	1613c <test@@Base+0x1764>
   160fc:	b	161a4 <test@@Base+0x17cc>
   16100:	ldr	r3, [pc, #-1936]	; 15978 <test@@Base+0xfa0>
   16104:	ldr	r3, [r6, r3]
   16108:	ldr	r3, [r3]
   1610c:	mov	r2, #125	; 0x7d
   16110:	ldr	r1, [pc, #-1964]	; 1596c <test@@Base+0xf94>
   16114:	add	r1, pc, r1
   16118:	mov	r0, r3
   1611c:	bl	124bc <fprintf@plt>
   16120:	mov	r3, #17
   16124:	ldr	r2, [fp, #-128]	; 0xffffff80
   16128:	ldr	r1, [fp, #-124]	; 0xffffff84
   1612c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16130:	bl	222fc <flatcc_json_parser_set_error@@Base>
   16134:	str	r0, [fp, #-124]	; 0xffffff84
   16138:	b	161a4 <test@@Base+0x17cc>
   1613c:	ldr	r3, [pc, #-1996]	; 15978 <test@@Base+0xfa0>
   16140:	ldr	r3, [r6, r3]
   16144:	ldr	r3, [r3]
   16148:	mov	r2, #26
   1614c:	mov	r1, #1
   16150:	ldr	r0, [pc, #-2024]	; 15970 <test@@Base+0xf98>
   16154:	add	r0, pc, r0
   16158:	bl	12480 <fwrite@plt>
   1615c:	b	161a4 <test@@Base+0x17cc>
   16160:	nop			; (mov r0, r0)
   16164:	b	161a4 <test@@Base+0x17cc>
   16168:	nop			; (mov r0, r0)
   1616c:	b	161a4 <test@@Base+0x17cc>
   16170:	nop			; (mov r0, r0)
   16174:	b	161a4 <test@@Base+0x17cc>
   16178:	nop			; (mov r0, r0)
   1617c:	b	161a4 <test@@Base+0x17cc>
   16180:	nop			; (mov r0, r0)
   16184:	b	161a4 <test@@Base+0x17cc>
   16188:	nop			; (mov r0, r0)
   1618c:	b	161a4 <test@@Base+0x17cc>
   16190:	nop			; (mov r0, r0)
   16194:	b	161a4 <test@@Base+0x17cc>
   16198:	nop			; (mov r0, r0)
   1619c:	b	161a4 <test@@Base+0x17cc>
   161a0:	nop			; (mov r0, r0)
   161a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161a8:	ldr	r3, [r3, #24]
   161ac:	cmp	r3, #0
   161b0:	beq	16220 <test@@Base+0x1848>
   161b4:	ldr	r3, [pc, #-2116]	; 15978 <test@@Base+0xfa0>
   161b8:	ldr	r3, [r6, r3]
   161bc:	ldr	r4, [r3]
   161c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161c4:	ldr	r5, [r3, #16]
   161c8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161cc:	ldr	r3, [r3, #36]	; 0x24
   161d0:	mov	r2, r3
   161d4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161d8:	ldr	r3, [r3, #4]
   161dc:	sub	r3, r2, r3
   161e0:	add	r6, r3, #1
   161e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   161e8:	ldr	r3, [r3, #24]
   161ec:	mov	r0, r3
   161f0:	bl	22004 <flatcc_json_parser_error_string@@Base>
   161f4:	mov	r3, r0
   161f8:	str	r3, [sp]
   161fc:	mov	r3, r6
   16200:	mov	r2, r5
   16204:	ldr	r1, [pc, #-2200]	; 15974 <test@@Base+0xf9c>
   16208:	add	r1, pc, r1
   1620c:	mov	r0, r4
   16210:	bl	124bc <fprintf@plt>
   16214:	ldr	r0, [fp, #-120]	; 0xffffff88
   16218:	bl	17274 <flatcc_builder_reset@@Base>
   1621c:	b	16240 <test@@Base+0x1868>
   16220:	ldr	r3, [pc, #-2224]	; 15978 <test@@Base+0xfa0>
   16224:	ldr	r3, [r6, r3]
   16228:	ldr	r3, [r3]
   1622c:	mov	r2, #15
   16230:	mov	r1, #1
   16234:	ldr	r0, [pc, #-2240]	; 1597c <test@@Base+0xfa4>
   16238:	add	r0, pc, r0
   1623c:	bl	12480 <fwrite@plt>
   16240:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16244:	ldr	r2, [r3, #24]
   16248:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1624c:	str	r2, [r3]
   16250:	ldr	r3, [fp, #-124]	; 0xffffff84
   16254:	mov	r0, r3
   16258:	sub	sp, fp, #24
   1625c:	pop	{r4, r5, r6, r8, r9, fp, pc}

00016260 <main@@Base>:
   16260:	push	{r4, fp, lr}
   16264:	add	fp, sp, #8
   16268:	sub	sp, sp, #244	; 0xf4
   1626c:	ldr	r4, [pc, #84]	; 162c8 <main@@Base+0x68>
   16270:	add	r4, pc, r4
   16274:	mvn	r3, #0
   16278:	str	r3, [fp, #-16]
   1627c:	sub	r3, fp, #248	; 0xf8
   16280:	mov	r0, r3
   16284:	bl	16ff0 <flatcc_builder_init@@Base>
   16288:	ldr	r3, [pc, #60]	; 162cc <main@@Base+0x6c>
   1628c:	ldr	r3, [r4, r3]
   16290:	add	r2, r3, #644	; 0x284
   16294:	add	r2, r2, #1
   16298:	sub	r3, fp, #16
   1629c:	sub	r0, fp, #248	; 0xf8
   162a0:	ldr	r1, [pc, #36]	; 162cc <main@@Base+0x6c>
   162a4:	ldr	r1, [r4, r1]
   162a8:	bl	149d8 <test@@Base>
   162ac:	sub	r3, fp, #248	; 0xf8
   162b0:	mov	r0, r3
   162b4:	bl	172a4 <flatcc_builder_clear@@Base>
   162b8:	ldr	r3, [fp, #-16]
   162bc:	mov	r0, r3
   162c0:	sub	sp, fp, #8
   162c4:	pop	{r4, fp, pc}
   162c8:	andeq	r1, r2, r8, lsl #27
   162cc:	andeq	r0, r0, r0, asr r0
   162d0:	push	{fp, lr}
   162d4:	add	fp, sp, #4
   162d8:	sub	sp, sp, #16
   162dc:	str	r0, [fp, #-16]
   162e0:	str	r1, [fp, #-20]	; 0xffffffec
   162e4:	mov	r3, #0
   162e8:	str	r3, [fp, #-12]
   162ec:	ldr	r3, [fp, #-16]
   162f0:	cmp	r3, #3
   162f4:	bhi	16300 <main@@Base+0xa0>
   162f8:	mov	r3, #4
   162fc:	str	r3, [fp, #-16]
   16300:	sub	r3, fp, #12
   16304:	ldr	r2, [fp, #-20]	; 0xffffffec
   16308:	ldr	r1, [fp, #-16]
   1630c:	mov	r0, r3
   16310:	bl	124c8 <posix_memalign@plt>
   16314:	str	r0, [fp, #-8]
   16318:	ldr	r3, [fp, #-8]
   1631c:	cmp	r3, #0
   16320:	beq	16344 <main@@Base+0xe4>
   16324:	ldr	r3, [fp, #-12]
   16328:	cmp	r3, #0
   1632c:	beq	16344 <main@@Base+0xe4>
   16330:	ldr	r3, [fp, #-12]
   16334:	mov	r0, r3
   16338:	bl	12450 <free@plt>
   1633c:	mov	r3, #0
   16340:	str	r3, [fp, #-12]
   16344:	ldr	r3, [fp, #-12]
   16348:	mov	r0, r3
   1634c:	sub	sp, fp, #4
   16350:	pop	{fp, pc}
   16354:	push	{fp}		; (str fp, [sp, #-4]!)
   16358:	add	fp, sp, #0
   1635c:	sub	sp, sp, #12
   16360:	str	r0, [fp, #-8]
   16364:	ldr	r3, [fp, #-8]
   16368:	mov	r0, r3
   1636c:	add	sp, fp, #0
   16370:	pop	{fp}		; (ldr fp, [sp], #4)
   16374:	bx	lr
   16378:	push	{fp}		; (str fp, [sp, #-4]!)
   1637c:	add	fp, sp, #0
   16380:	sub	sp, sp, #12
   16384:	mov	r3, r0
   16388:	strb	r3, [fp, #-5]
   1638c:	ldrb	r3, [fp, #-5]
   16390:	mov	r0, r3
   16394:	add	sp, fp, #0
   16398:	pop	{fp}		; (ldr fp, [sp], #4)
   1639c:	bx	lr
   163a0:	push	{fp}		; (str fp, [sp, #-4]!)
   163a4:	add	fp, sp, #0
   163a8:	sub	sp, sp, #12
   163ac:	str	r0, [fp, #-8]
   163b0:	ldr	r3, [fp, #-8]
   163b4:	mov	r0, r3
   163b8:	add	sp, fp, #0
   163bc:	pop	{fp}		; (ldr fp, [sp], #4)
   163c0:	bx	lr
   163c4:	push	{fp}		; (str fp, [sp, #-4]!)
   163c8:	add	fp, sp, #0
   163cc:	sub	sp, sp, #12
   163d0:	str	r0, [fp, #-8]
   163d4:	str	r1, [fp, #-12]
   163d8:	ldr	r3, [fp, #-8]
   163dc:	ldr	r2, [r3]
   163e0:	ldr	r3, [fp, #-8]
   163e4:	ldr	r3, [r3, #4]
   163e8:	cmp	r2, r3
   163ec:	bne	16418 <main@@Base+0x1b8>
   163f0:	ldr	r3, [fp, #-12]
   163f4:	cmp	r3, #0
   163f8:	beq	1640c <main@@Base+0x1ac>
   163fc:	ldr	r3, [fp, #-8]
   16400:	ldr	r2, [r3, #24]
   16404:	ldr	r3, [fp, #-12]
   16408:	str	r2, [r3]
   1640c:	ldr	r3, [fp, #-8]
   16410:	ldr	r3, [r3, #8]
   16414:	b	16434 <main@@Base+0x1d4>
   16418:	ldr	r3, [fp, #-12]
   1641c:	cmp	r3, #0
   16420:	beq	16430 <main@@Base+0x1d0>
   16424:	ldr	r3, [fp, #-12]
   16428:	mov	r2, #0
   1642c:	str	r2, [r3]
   16430:	mov	r3, #0
   16434:	mov	r0, r3
   16438:	add	sp, fp, #0
   1643c:	pop	{fp}		; (ldr fp, [sp], #4)
   16440:	bx	lr
   16444:	push	{fp, lr}
   16448:	add	fp, sp, #4
   1644c:	sub	sp, sp, #16
   16450:	str	r0, [fp, #-16]
   16454:	str	r1, [fp, #-20]	; 0xffffffec
   16458:	ldr	r2, [fp, #-20]	; 0xffffffec
   1645c:	mov	r1, #0
   16460:	ldr	r0, [fp, #-16]
   16464:	bl	124ec <memchr@plt>
   16468:	str	r0, [fp, #-8]
   1646c:	ldr	r3, [fp, #-8]
   16470:	cmp	r3, #0
   16474:	beq	16488 <main@@Base+0x228>
   16478:	ldr	r2, [fp, #-8]
   1647c:	ldr	r3, [fp, #-16]
   16480:	sub	r3, r2, r3
   16484:	b	1648c <main@@Base+0x22c>
   16488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1648c:	mov	r0, r3
   16490:	sub	sp, fp, #4
   16494:	pop	{fp, pc}

00016498 <flatcc_builder_default_alloc@@Base>:
   16498:	push	{fp, lr}
   1649c:	add	fp, sp, #4
   164a0:	sub	sp, sp, #24
   164a4:	str	r0, [fp, #-16]
   164a8:	str	r1, [fp, #-20]	; 0xffffffec
   164ac:	str	r2, [fp, #-24]	; 0xffffffe8
   164b0:	str	r3, [fp, #-28]	; 0xffffffe4
   164b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164b8:	cmp	r3, #0
   164bc:	bne	16500 <flatcc_builder_default_alloc@@Base+0x68>
   164c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164c4:	ldr	r3, [r3]
   164c8:	cmp	r3, #0
   164cc:	beq	164f8 <flatcc_builder_default_alloc@@Base+0x60>
   164d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164d4:	ldr	r3, [r3]
   164d8:	mov	r0, r3
   164dc:	bl	12450 <free@plt>
   164e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   164e4:	mov	r2, #0
   164e8:	str	r2, [r3]
   164ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   164f0:	mov	r2, #0
   164f4:	str	r2, [r3, #4]
   164f8:	mov	r3, #0
   164fc:	b	16654 <flatcc_builder_default_alloc@@Base+0x1bc>
   16500:	ldr	r3, [fp, #4]
   16504:	sub	r3, r3, #1
   16508:	cmp	r3, #6
   1650c:	addls	pc, pc, r3, lsl #2
   16510:	b	16560 <flatcc_builder_default_alloc@@Base+0xc8>
   16514:	b	16530 <flatcc_builder_default_alloc@@Base+0x98>
   16518:	b	16560 <flatcc_builder_default_alloc@@Base+0xc8>
   1651c:	b	16560 <flatcc_builder_default_alloc@@Base+0xc8>
   16520:	b	16548 <flatcc_builder_default_alloc@@Base+0xb0>
   16524:	b	1653c <flatcc_builder_default_alloc@@Base+0xa4>
   16528:	b	16560 <flatcc_builder_default_alloc@@Base+0xc8>
   1652c:	b	16554 <flatcc_builder_default_alloc@@Base+0xbc>
   16530:	mov	r3, #256	; 0x100
   16534:	str	r3, [fp, #-8]
   16538:	b	1656c <flatcc_builder_default_alloc@@Base+0xd4>
   1653c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16540:	str	r3, [fp, #-8]
   16544:	b	1656c <flatcc_builder_default_alloc@@Base+0xd4>
   16548:	mov	r3, #288	; 0x120
   1654c:	str	r3, [fp, #-8]
   16550:	b	1656c <flatcc_builder_default_alloc@@Base+0xd4>
   16554:	mov	r3, #64	; 0x40
   16558:	str	r3, [fp, #-8]
   1655c:	b	1656c <flatcc_builder_default_alloc@@Base+0xd4>
   16560:	mov	r3, #32
   16564:	str	r3, [fp, #-8]
   16568:	nop			; (mov r0, r0)
   1656c:	b	1657c <flatcc_builder_default_alloc@@Base+0xe4>
   16570:	ldr	r3, [fp, #-8]
   16574:	lsl	r3, r3, #1
   16578:	str	r3, [fp, #-8]
   1657c:	ldr	r2, [fp, #-8]
   16580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16584:	cmp	r2, r3
   16588:	bcc	16570 <flatcc_builder_default_alloc@@Base+0xd8>
   1658c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16590:	ldr	r2, [r3, #4]
   16594:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16598:	cmp	r2, r3
   1659c:	bcc	165c0 <flatcc_builder_default_alloc@@Base+0x128>
   165a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165a4:	ldr	r3, [r3, #4]
   165a8:	lsr	r2, r3, #1
   165ac:	ldr	r3, [fp, #-8]
   165b0:	cmp	r2, r3
   165b4:	bcc	165c0 <flatcc_builder_default_alloc@@Base+0x128>
   165b8:	mov	r3, #0
   165bc:	b	16654 <flatcc_builder_default_alloc@@Base+0x1bc>
   165c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165c4:	ldr	r3, [r3]
   165c8:	ldr	r1, [fp, #-8]
   165cc:	mov	r0, r3
   165d0:	bl	12474 <realloc@plt>
   165d4:	str	r0, [fp, #-12]
   165d8:	ldr	r3, [fp, #-12]
   165dc:	cmp	r3, #0
   165e0:	bne	165ec <flatcc_builder_default_alloc@@Base+0x154>
   165e4:	mvn	r3, #0
   165e8:	b	16654 <flatcc_builder_default_alloc@@Base+0x1bc>
   165ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   165f0:	cmp	r3, #0
   165f4:	beq	16638 <flatcc_builder_default_alloc@@Base+0x1a0>
   165f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   165fc:	ldr	r2, [r3, #4]
   16600:	ldr	r3, [fp, #-8]
   16604:	cmp	r2, r3
   16608:	bcs	16638 <flatcc_builder_default_alloc@@Base+0x1a0>
   1660c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16610:	ldr	r3, [r3, #4]
   16614:	ldr	r2, [fp, #-12]
   16618:	add	r0, r2, r3
   1661c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16620:	ldr	r3, [r3, #4]
   16624:	ldr	r2, [fp, #-8]
   16628:	sub	r3, r2, r3
   1662c:	mov	r2, r3
   16630:	mov	r1, #0
   16634:	bl	124d4 <memset@plt>
   16638:	ldr	r3, [fp, #-20]	; 0xffffffec
   1663c:	ldr	r2, [fp, #-12]
   16640:	str	r2, [r3]
   16644:	ldr	r3, [fp, #-20]	; 0xffffffec
   16648:	ldr	r2, [fp, #-8]
   1664c:	str	r2, [r3, #4]
   16650:	mov	r3, #0
   16654:	mov	r0, r3
   16658:	sub	sp, fp, #4
   1665c:	pop	{fp, pc}
   16660:	push	{fp}		; (str fp, [sp, #-4]!)
   16664:	add	fp, sp, #0
   16668:	sub	sp, sp, #20
   1666c:	str	r0, [fp, #-16]
   16670:	str	r1, [fp, #-20]	; 0xffffffec
   16674:	ldr	r3, [fp, #-16]
   16678:	add	r3, r3, #52	; 0x34
   1667c:	add	r3, r3, #8
   16680:	str	r3, [fp, #-8]
   16684:	ldr	r3, [fp, #-16]
   16688:	ldr	r2, [r3, #60]	; 0x3c
   1668c:	ldr	r3, [fp, #-16]
   16690:	ldr	r3, [r3, #28]
   16694:	add	r2, r2, r3
   16698:	ldr	r3, [fp, #-16]
   1669c:	str	r2, [r3, #16]
   166a0:	ldr	r3, [fp, #-8]
   166a4:	ldr	r2, [r3, #4]
   166a8:	ldr	r3, [fp, #-16]
   166ac:	ldr	r3, [r3, #28]
   166b0:	sub	r2, r2, r3
   166b4:	ldr	r3, [fp, #-16]
   166b8:	str	r2, [r3, #24]
   166bc:	ldr	r3, [fp, #-16]
   166c0:	ldr	r2, [r3, #24]
   166c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   166c8:	cmp	r2, r3
   166cc:	bls	166dc <flatcc_builder_default_alloc@@Base+0x244>
   166d0:	ldr	r3, [fp, #-16]
   166d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   166d8:	str	r2, [r3, #24]
   166dc:	ldr	r3, [fp, #-16]
   166e0:	ldr	r3, [r3, #32]
   166e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   166e8:	str	r2, [r3, #4]
   166ec:	nop			; (mov r0, r0)
   166f0:	add	sp, fp, #0
   166f4:	pop	{fp}		; (ldr fp, [sp], #4)
   166f8:	bx	lr
   166fc:	push	{r4, fp, lr}
   16700:	add	fp, sp, #8
   16704:	sub	sp, sp, #36	; 0x24
   16708:	str	r0, [fp, #-24]	; 0xffffffe8
   1670c:	str	r1, [fp, #-28]	; 0xffffffe4
   16710:	str	r2, [fp, #-32]	; 0xffffffe0
   16714:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16718:	add	r3, r3, #52	; 0x34
   1671c:	add	r3, r3, #8
   16720:	str	r3, [fp, #-16]
   16724:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16728:	ldr	r4, [r3, #48]	; 0x30
   1672c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16730:	ldr	r0, [r3, #40]	; 0x28
   16734:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16738:	ldr	r2, [r3, #28]
   1673c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16740:	add	r2, r2, r3
   16744:	mov	r3, #1
   16748:	str	r3, [sp]
   1674c:	mov	r3, #1
   16750:	ldr	r1, [fp, #-16]
   16754:	blx	r4
   16758:	mov	r3, r0
   1675c:	cmp	r3, #0
   16760:	beq	1676c <flatcc_builder_default_alloc@@Base+0x2d4>
   16764:	mvn	r3, #0
   16768:	b	1677c <flatcc_builder_default_alloc@@Base+0x2e4>
   1676c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   16770:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16774:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   16778:	mov	r3, #0
   1677c:	mov	r0, r3
   16780:	sub	sp, fp, #8
   16784:	pop	{r4, fp, pc}
   16788:	push	{fp, lr}
   1678c:	add	fp, sp, #4
   16790:	sub	sp, sp, #16
   16794:	str	r0, [fp, #-16]
   16798:	str	r1, [fp, #-20]	; 0xffffffec
   1679c:	ldr	r3, [fp, #-16]
   167a0:	ldr	r3, [r3, #20]
   167a4:	str	r3, [fp, #-8]
   167a8:	ldr	r3, [fp, #-16]
   167ac:	ldr	r2, [r3, #20]
   167b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   167b4:	add	r2, r2, r3
   167b8:	ldr	r3, [fp, #-16]
   167bc:	str	r2, [r3, #20]
   167c0:	ldr	r3, [fp, #-16]
   167c4:	ldr	r2, [r3, #20]
   167c8:	ldr	r3, [fp, #-16]
   167cc:	ldr	r3, [r3, #24]
   167d0:	cmp	r2, r3
   167d4:	bcc	16808 <flatcc_builder_default_alloc@@Base+0x370>
   167d8:	ldr	r3, [fp, #-16]
   167dc:	ldr	r3, [r3, #20]
   167e0:	add	r3, r3, #1
   167e4:	mvn	r2, #3
   167e8:	mov	r1, r3
   167ec:	ldr	r0, [fp, #-16]
   167f0:	bl	166fc <flatcc_builder_default_alloc@@Base+0x264>
   167f4:	mov	r3, r0
   167f8:	cmp	r3, #0
   167fc:	beq	16808 <flatcc_builder_default_alloc@@Base+0x370>
   16800:	mov	r3, #0
   16804:	b	16818 <flatcc_builder_default_alloc@@Base+0x380>
   16808:	ldr	r3, [fp, #-16]
   1680c:	ldr	r2, [r3, #16]
   16810:	ldr	r3, [fp, #-8]
   16814:	add	r3, r2, r3
   16818:	mov	r0, r3
   1681c:	sub	sp, fp, #4
   16820:	pop	{fp, pc}
   16824:	push	{fp, lr}
   16828:	add	fp, sp, #4
   1682c:	sub	sp, sp, #8
   16830:	str	r0, [fp, #-8]
   16834:	str	r1, [fp, #-12]
   16838:	ldr	r3, [fp, #-8]
   1683c:	ldr	r2, [r3, #20]
   16840:	ldr	r3, [fp, #-12]
   16844:	sub	r2, r2, r3
   16848:	ldr	r3, [fp, #-8]
   1684c:	str	r2, [r3, #20]
   16850:	ldr	r3, [fp, #-8]
   16854:	ldr	r2, [r3, #16]
   16858:	ldr	r3, [fp, #-8]
   1685c:	ldr	r3, [r3, #20]
   16860:	add	r3, r2, r3
   16864:	ldr	r2, [fp, #-12]
   16868:	mov	r1, #0
   1686c:	mov	r0, r3
   16870:	bl	124d4 <memset@plt>
   16874:	nop			; (mov r0, r0)
   16878:	sub	sp, fp, #4
   1687c:	pop	{fp, pc}
   16880:	push	{fp, lr}
   16884:	add	fp, sp, #4
   16888:	sub	sp, sp, #24
   1688c:	str	r0, [fp, #-16]
   16890:	str	r1, [fp, #-20]	; 0xffffffec
   16894:	str	r2, [fp, #-24]	; 0xffffffe8
   16898:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1689c:	ldr	r0, [fp, #-16]
   168a0:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   168a4:	str	r0, [fp, #-8]
   168a8:	ldr	r3, [fp, #-8]
   168ac:	cmp	r3, #0
   168b0:	bne	168bc <flatcc_builder_default_alloc@@Base+0x424>
   168b4:	mov	r3, #0
   168b8:	b	168d0 <flatcc_builder_default_alloc@@Base+0x438>
   168bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   168c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   168c4:	ldr	r0, [fp, #-8]
   168c8:	bl	1245c <memcpy@plt>
   168cc:	ldr	r3, [fp, #-8]
   168d0:	mov	r0, r3
   168d4:	sub	sp, fp, #4
   168d8:	pop	{fp, pc}
   168dc:	push	{fp, lr}
   168e0:	add	fp, sp, #4
   168e4:	sub	sp, sp, #24
   168e8:	str	r0, [fp, #-16]
   168ec:	str	r1, [fp, #-20]	; 0xffffffec
   168f0:	strh	r2, [fp, #-22]	; 0xffffffea
   168f4:	strh	r3, [fp, #-24]	; 0xffffffe8
   168f8:	ldr	r3, [fp, #-16]
   168fc:	ldr	r2, [r3, #20]
   16900:	ldrh	r3, [fp, #-22]	; 0xffffffea
   16904:	add	r3, r2, r3
   16908:	sub	r3, r3, #1
   1690c:	ldrh	r2, [fp, #-22]	; 0xffffffea
   16910:	rsb	r2, r2, #0
   16914:	and	r3, r3, r2
   16918:	str	r3, [fp, #-8]
   1691c:	ldr	r2, [fp, #-8]
   16920:	ldr	r3, [fp, #-20]	; 0xffffffec
   16924:	add	r2, r2, r3
   16928:	ldr	r3, [fp, #-16]
   1692c:	str	r2, [r3, #20]
   16930:	ldr	r3, [fp, #-16]
   16934:	ldr	r2, [r3, #20]
   16938:	ldr	r3, [fp, #-16]
   1693c:	ldr	r3, [r3, #24]
   16940:	cmp	r2, r3
   16944:	bcc	16978 <flatcc_builder_default_alloc@@Base+0x4e0>
   16948:	ldr	r3, [fp, #-16]
   1694c:	ldr	r3, [r3, #20]
   16950:	add	r3, r3, #1
   16954:	ldr	r2, [pc, #136]	; 169e4 <flatcc_builder_default_alloc@@Base+0x54c>
   16958:	mov	r1, r3
   1695c:	ldr	r0, [fp, #-16]
   16960:	bl	166fc <flatcc_builder_default_alloc@@Base+0x264>
   16964:	mov	r3, r0
   16968:	cmp	r3, #0
   1696c:	beq	16978 <flatcc_builder_default_alloc@@Base+0x4e0>
   16970:	mov	r3, #0
   16974:	b	169d8 <flatcc_builder_default_alloc@@Base+0x540>
   16978:	ldr	r3, [fp, #-16]
   1697c:	ldr	r2, [r3, #4]
   16980:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   16984:	lsl	r3, r3, #1
   16988:	add	r3, r2, r3
   1698c:	ldr	r2, [fp, #-8]
   16990:	uxth	r2, r2
   16994:	add	r2, r2, #4
   16998:	uxth	r2, r2
   1699c:	strh	r2, [r3]
   169a0:	ldr	r3, [fp, #-16]
   169a4:	ldrh	r3, [r3, #8]
   169a8:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   169ac:	cmp	r2, r3
   169b0:	bcc	169c8 <flatcc_builder_default_alloc@@Base+0x530>
   169b4:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   169b8:	add	r3, r3, #1
   169bc:	uxth	r2, r3
   169c0:	ldr	r3, [fp, #-16]
   169c4:	strh	r2, [r3, #8]
   169c8:	ldr	r3, [fp, #-16]
   169cc:	ldr	r2, [r3, #16]
   169d0:	ldr	r3, [fp, #-8]
   169d4:	add	r3, r2, r3
   169d8:	mov	r0, r3
   169dc:	sub	sp, fp, #4
   169e0:	pop	{fp, pc}
   169e4:	strdeq	pc, [r0], -ip
   169e8:	push	{fp, lr}
   169ec:	add	fp, sp, #4
   169f0:	sub	sp, sp, #16
   169f4:	str	r0, [fp, #-16]
   169f8:	mov	r3, r1
   169fc:	strh	r3, [fp, #-18]	; 0xffffffee
   16a00:	ldr	r3, [fp, #-16]
   16a04:	ldr	r3, [r3, #20]
   16a08:	add	r3, r3, #3
   16a0c:	bic	r3, r3, #3
   16a10:	str	r3, [fp, #-8]
   16a14:	ldr	r3, [fp, #-8]
   16a18:	add	r2, r3, #4
   16a1c:	ldr	r3, [fp, #-16]
   16a20:	str	r2, [r3, #20]
   16a24:	ldr	r3, [fp, #-16]
   16a28:	ldr	r2, [r3, #20]
   16a2c:	ldr	r3, [fp, #-16]
   16a30:	ldr	r3, [r3, #24]
   16a34:	cmp	r2, r3
   16a38:	bls	16a68 <flatcc_builder_default_alloc@@Base+0x5d0>
   16a3c:	ldr	r3, [fp, #-16]
   16a40:	ldr	r3, [r3, #20]
   16a44:	ldr	r2, [pc, #168]	; 16af4 <flatcc_builder_default_alloc@@Base+0x65c>
   16a48:	mov	r1, r3
   16a4c:	ldr	r0, [fp, #-16]
   16a50:	bl	166fc <flatcc_builder_default_alloc@@Base+0x264>
   16a54:	mov	r3, r0
   16a58:	cmp	r3, #0
   16a5c:	beq	16a68 <flatcc_builder_default_alloc@@Base+0x5d0>
   16a60:	mov	r3, #0
   16a64:	b	16ae8 <flatcc_builder_default_alloc@@Base+0x650>
   16a68:	ldr	r3, [fp, #-16]
   16a6c:	ldr	r2, [r3, #4]
   16a70:	ldrh	r3, [fp, #-18]	; 0xffffffee
   16a74:	lsl	r3, r3, #1
   16a78:	add	r3, r2, r3
   16a7c:	ldr	r2, [fp, #-8]
   16a80:	uxth	r2, r2
   16a84:	add	r2, r2, #4
   16a88:	uxth	r2, r2
   16a8c:	strh	r2, [r3]
   16a90:	ldr	r3, [fp, #-16]
   16a94:	ldrh	r3, [r3, #8]
   16a98:	ldrh	r2, [fp, #-18]	; 0xffffffee
   16a9c:	cmp	r2, r3
   16aa0:	bcc	16ab8 <flatcc_builder_default_alloc@@Base+0x620>
   16aa4:	ldrh	r3, [fp, #-18]	; 0xffffffee
   16aa8:	add	r3, r3, #1
   16aac:	uxth	r2, r3
   16ab0:	ldr	r3, [fp, #-16]
   16ab4:	strh	r2, [r3, #8]
   16ab8:	ldr	r3, [fp, #-16]
   16abc:	ldr	r3, [r3]
   16ac0:	add	r1, r3, #2
   16ac4:	ldr	r2, [fp, #-16]
   16ac8:	str	r1, [r2]
   16acc:	ldr	r2, [fp, #-8]
   16ad0:	uxth	r2, r2
   16ad4:	strh	r2, [r3]
   16ad8:	ldr	r3, [fp, #-16]
   16adc:	ldr	r2, [r3, #16]
   16ae0:	ldr	r3, [fp, #-8]
   16ae4:	add	r3, r2, r3
   16ae8:	mov	r0, r3
   16aec:	sub	sp, fp, #4
   16af0:	pop	{fp, pc}
   16af4:	strdeq	pc, [r0], -ip
   16af8:	push	{r4, fp, lr}
   16afc:	add	fp, sp, #8
   16b00:	sub	sp, sp, #36	; 0x24
   16b04:	str	r0, [fp, #-24]	; 0xffffffe8
   16b08:	str	r1, [fp, #-28]	; 0xffffffe4
   16b0c:	str	r2, [fp, #-32]	; 0xffffffe0
   16b10:	str	r3, [fp, #-36]	; 0xffffffdc
   16b14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b18:	add	r2, r3, #52	; 0x34
   16b1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b20:	lsl	r3, r3, #3
   16b24:	add	r3, r2, r3
   16b28:	str	r3, [fp, #-16]
   16b2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16b30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16b34:	add	r2, r2, r3
   16b38:	ldr	r3, [fp, #-16]
   16b3c:	ldr	r3, [r3, #4]
   16b40:	cmp	r2, r3
   16b44:	bls	16ba4 <flatcc_builder_default_alloc@@Base+0x70c>
   16b48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b4c:	ldr	r4, [r3, #48]	; 0x30
   16b50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b54:	ldr	r0, [r3, #40]	; 0x28
   16b58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16b5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16b60:	add	r2, r2, r3
   16b64:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b68:	str	r3, [sp]
   16b6c:	ldr	r3, [fp, #4]
   16b70:	ldr	r1, [fp, #-16]
   16b74:	blx	r4
   16b78:	mov	r3, r0
   16b7c:	cmp	r3, #0
   16b80:	beq	16ba4 <flatcc_builder_default_alloc@@Base+0x70c>
   16b84:	ldr	r3, [pc, #56]	; 16bc4 <flatcc_builder_default_alloc@@Base+0x72c>
   16b88:	add	r3, pc, r3
   16b8c:	mov	r2, #308	; 0x134
   16b90:	ldr	r1, [pc, #48]	; 16bc8 <flatcc_builder_default_alloc@@Base+0x730>
   16b94:	add	r1, pc, r1
   16b98:	ldr	r0, [pc, #44]	; 16bcc <flatcc_builder_default_alloc@@Base+0x734>
   16b9c:	add	r0, pc, r0
   16ba0:	bl	12504 <__assert_fail@plt>
   16ba4:	ldr	r3, [fp, #-16]
   16ba8:	ldr	r3, [r3]
   16bac:	mov	r2, r3
   16bb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16bb4:	add	r3, r2, r3
   16bb8:	mov	r0, r3
   16bbc:	sub	sp, fp, #8
   16bc0:	pop	{r4, fp, pc}
   16bc4:	andeq	pc, r0, r0, lsl ip	; <UNPREDICTABLE>
   16bc8:	ldrdeq	pc, [r0], -r0
   16bcc:	andeq	pc, r0, r8, lsr #16
   16bd0:	push	{fp, lr}
   16bd4:	add	fp, sp, #4
   16bd8:	sub	sp, sp, #24
   16bdc:	str	r0, [fp, #-16]
   16be0:	str	r1, [fp, #-20]	; 0xffffffec
   16be4:	ldr	r3, [fp, #-16]
   16be8:	ldr	r3, [r3, #32]
   16bec:	ldr	r2, [r3, #16]
   16bf0:	ldr	r3, [fp, #-16]
   16bf4:	ldr	r3, [r3, #32]
   16bf8:	ldrh	r3, [r3, #28]
   16bfc:	lsl	r3, r3, #1
   16c00:	add	r3, r2, r3
   16c04:	str	r3, [fp, #-8]
   16c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c0c:	add	r3, r3, #2
   16c10:	lsl	r3, r3, #1
   16c14:	str	r3, [fp, #-12]
   16c18:	mov	r3, #1
   16c1c:	str	r3, [sp]
   16c20:	ldr	r3, [fp, #-12]
   16c24:	ldr	r2, [fp, #-8]
   16c28:	mov	r1, #0
   16c2c:	ldr	r0, [fp, #-16]
   16c30:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   16c34:	mov	r2, r0
   16c38:	ldr	r3, [fp, #-16]
   16c3c:	str	r2, [r3, #4]
   16c40:	ldr	r3, [fp, #-16]
   16c44:	ldr	r3, [r3, #4]
   16c48:	cmp	r3, #0
   16c4c:	bne	16c58 <flatcc_builder_default_alloc@@Base+0x7c0>
   16c50:	mvn	r3, #0
   16c54:	b	16cd0 <flatcc_builder_default_alloc@@Base+0x838>
   16c58:	ldr	r3, [fp, #-16]
   16c5c:	ldr	r3, [r3, #4]
   16c60:	add	r2, r3, #4
   16c64:	ldr	r3, [fp, #-16]
   16c68:	str	r2, [r3, #4]
   16c6c:	ldr	r3, [fp, #-16]
   16c70:	ldr	r3, [r3, #32]
   16c74:	ldr	r3, [r3, #20]
   16c78:	str	r3, [fp, #-8]
   16c7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c80:	lsl	r3, r3, #1
   16c84:	add	r3, r3, #1
   16c88:	str	r3, [fp, #-12]
   16c8c:	mov	r3, #0
   16c90:	str	r3, [sp]
   16c94:	ldr	r3, [fp, #-12]
   16c98:	ldr	r2, [fp, #-8]
   16c9c:	mov	r1, #3
   16ca0:	ldr	r0, [fp, #-16]
   16ca4:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   16ca8:	mov	r2, r0
   16cac:	ldr	r3, [fp, #-16]
   16cb0:	str	r2, [r3]
   16cb4:	ldr	r3, [fp, #-16]
   16cb8:	ldr	r3, [r3]
   16cbc:	cmp	r3, #0
   16cc0:	bne	16ccc <flatcc_builder_default_alloc@@Base+0x834>
   16cc4:	mvn	r3, #0
   16cc8:	b	16cd0 <flatcc_builder_default_alloc@@Base+0x838>
   16ccc:	mov	r3, #0
   16cd0:	mov	r0, r3
   16cd4:	sub	sp, fp, #4
   16cd8:	pop	{fp, pc}
   16cdc:	push	{r4, fp, lr}
   16ce0:	add	fp, sp, #8
   16ce4:	sub	sp, sp, #36	; 0x24
   16ce8:	str	r0, [fp, #-32]	; 0xffffffe0
   16cec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16cf0:	add	r3, r3, #52	; 0x34
   16cf4:	add	r3, r3, #40	; 0x28
   16cf8:	str	r3, [fp, #-24]	; 0xffffffe8
   16cfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d00:	ldr	r3, [r3, #124]	; 0x7c
   16d04:	cmp	r3, #0
   16d08:	beq	16d2c <flatcc_builder_default_alloc@@Base+0x894>
   16d0c:	ldr	r3, [pc, #280]	; 16e2c <flatcc_builder_default_alloc@@Base+0x994>
   16d10:	add	r3, pc, r3
   16d14:	ldr	r2, [pc, #276]	; 16e30 <flatcc_builder_default_alloc@@Base+0x998>
   16d18:	ldr	r1, [pc, #276]	; 16e34 <flatcc_builder_default_alloc@@Base+0x99c>
   16d1c:	add	r1, pc, r1
   16d20:	ldr	r0, [pc, #272]	; 16e38 <flatcc_builder_default_alloc@@Base+0x9a0>
   16d24:	add	r0, pc, r0
   16d28:	bl	12504 <__assert_fail@plt>
   16d2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d30:	ldr	r2, [r3, #124]	; 0x7c
   16d34:	mov	r3, #0
   16d38:	str	r3, [sp]
   16d3c:	mov	r3, #16
   16d40:	mov	r1, #6
   16d44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16d48:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   16d4c:	mov	r3, r0
   16d50:	cmp	r3, #0
   16d54:	bne	16d60 <flatcc_builder_default_alloc@@Base+0x8c8>
   16d58:	mvn	r3, #0
   16d5c:	b	16e20 <flatcc_builder_default_alloc@@Base+0x988>
   16d60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d64:	mov	r2, #16
   16d68:	str	r2, [r3, #124]	; 0x7c
   16d6c:	mov	r3, #256	; 0x100
   16d70:	str	r3, [fp, #-16]
   16d74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d78:	ldr	r4, [r3, #48]	; 0x30
   16d7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16d80:	ldr	r0, [r3, #40]	; 0x28
   16d84:	mov	r3, #5
   16d88:	str	r3, [sp]
   16d8c:	mov	r3, #1
   16d90:	ldr	r2, [fp, #-16]
   16d94:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16d98:	blx	r4
   16d9c:	mov	r3, r0
   16da0:	cmp	r3, #0
   16da4:	beq	16dbc <flatcc_builder_default_alloc@@Base+0x924>
   16da8:	mvn	r3, #0
   16dac:	b	16e20 <flatcc_builder_default_alloc@@Base+0x988>
   16db0:	ldr	r3, [fp, #-16]
   16db4:	lsl	r3, r3, #1
   16db8:	str	r3, [fp, #-16]
   16dbc:	ldr	r3, [fp, #-16]
   16dc0:	lsl	r2, r3, #1
   16dc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16dc8:	ldr	r3, [r3, #4]
   16dcc:	cmp	r2, r3
   16dd0:	bls	16db0 <flatcc_builder_default_alloc@@Base+0x918>
   16dd4:	ldr	r3, [fp, #-16]
   16dd8:	lsr	r3, r3, #2
   16ddc:	str	r3, [fp, #-16]
   16de0:	mov	r3, #0
   16de4:	str	r3, [fp, #-20]	; 0xffffffec
   16de8:	b	16df8 <flatcc_builder_default_alloc@@Base+0x960>
   16dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   16df0:	add	r3, r3, #1
   16df4:	str	r3, [fp, #-20]	; 0xffffffec
   16df8:	mov	r2, #1
   16dfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16e00:	lsl	r2, r2, r3
   16e04:	ldr	r3, [fp, #-16]
   16e08:	cmp	r2, r3
   16e0c:	bcc	16dec <flatcc_builder_default_alloc@@Base+0x954>
   16e10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e14:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e18:	str	r2, [r3, #116]	; 0x74
   16e1c:	mov	r3, #0
   16e20:	mov	r0, r3
   16e24:	sub	sp, fp, #8
   16e28:	pop	{r4, fp, pc}
   16e2c:	andeq	pc, r0, ip, ror sl	; <UNPREDICTABLE>
   16e30:	andeq	r0, r0, r6, asr r1
   16e34:	andeq	pc, r0, r8, asr #12
   16e38:	andeq	pc, r0, r4, lsr #13
   16e3c:	push	{fp, lr}
   16e40:	add	fp, sp, #4
   16e44:	sub	sp, sp, #16
   16e48:	str	r0, [fp, #-16]
   16e4c:	str	r1, [fp, #-20]	; 0xffffffec
   16e50:	ldr	r3, [fp, #-16]
   16e54:	ldr	r3, [r3, #116]	; 0x74
   16e58:	cmp	r3, #0
   16e5c:	bne	16e7c <flatcc_builder_default_alloc@@Base+0x9e4>
   16e60:	ldr	r0, [fp, #-16]
   16e64:	bl	16cdc <flatcc_builder_default_alloc@@Base+0x844>
   16e68:	mov	r3, r0
   16e6c:	cmp	r3, #0
   16e70:	beq	16e7c <flatcc_builder_default_alloc@@Base+0x9e4>
   16e74:	mov	r3, #0
   16e78:	b	16ea8 <flatcc_builder_default_alloc@@Base+0xa10>
   16e7c:	ldr	r3, [fp, #-16]
   16e80:	ldr	r3, [r3, #92]	; 0x5c
   16e84:	str	r3, [fp, #-8]
   16e88:	ldr	r3, [fp, #-16]
   16e8c:	ldr	r3, [r3, #116]	; 0x74
   16e90:	rsb	r3, r3, #32
   16e94:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e98:	lsr	r3, r2, r3
   16e9c:	lsl	r3, r3, #2
   16ea0:	ldr	r2, [fp, #-8]
   16ea4:	add	r3, r2, r3
   16ea8:	mov	r0, r3
   16eac:	sub	sp, fp, #4
   16eb0:	pop	{fp, pc}

00016eb4 <flatcc_builder_flush_vtable_cache@@Base>:
   16eb4:	push	{fp, lr}
   16eb8:	add	fp, sp, #4
   16ebc:	sub	sp, sp, #16
   16ec0:	str	r0, [fp, #-16]
   16ec4:	ldr	r3, [fp, #-16]
   16ec8:	add	r3, r3, #52	; 0x34
   16ecc:	add	r3, r3, #40	; 0x28
   16ed0:	str	r3, [fp, #-8]
   16ed4:	ldr	r3, [fp, #-16]
   16ed8:	ldr	r3, [r3, #116]	; 0x74
   16edc:	cmp	r3, #0
   16ee0:	beq	16f1c <flatcc_builder_flush_vtable_cache@@Base+0x68>
   16ee4:	ldr	r3, [fp, #-8]
   16ee8:	ldr	r0, [r3]
   16eec:	ldr	r3, [fp, #-8]
   16ef0:	ldr	r3, [r3, #4]
   16ef4:	mov	r2, r3
   16ef8:	mov	r1, #0
   16efc:	bl	124d4 <memset@plt>
   16f00:	ldr	r3, [fp, #-16]
   16f04:	mov	r2, #16
   16f08:	str	r2, [r3, #124]	; 0x7c
   16f0c:	ldr	r3, [fp, #-16]
   16f10:	mov	r2, #0
   16f14:	str	r2, [r3, #120]	; 0x78
   16f18:	b	16f20 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   16f1c:	nop			; (mov r0, r0)
   16f20:	sub	sp, fp, #4
   16f24:	pop	{fp, pc}

00016f28 <flatcc_builder_custom_init@@Base>:
   16f28:	push	{r4, fp, lr}
   16f2c:	add	fp, sp, #8
   16f30:	sub	sp, sp, #20
   16f34:	str	r0, [fp, #-16]
   16f38:	str	r1, [fp, #-20]	; 0xffffffec
   16f3c:	str	r2, [fp, #-24]	; 0xffffffe8
   16f40:	str	r3, [fp, #-28]	; 0xffffffe4
   16f44:	ldr	r4, [pc, #152]	; 16fe4 <flatcc_builder_custom_init@@Base+0xbc>
   16f48:	add	r4, pc, r4
   16f4c:	mov	r2, #232	; 0xe8
   16f50:	mov	r1, #0
   16f54:	ldr	r0, [fp, #-16]
   16f58:	bl	124d4 <memset@plt>
   16f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f60:	cmp	r3, #0
   16f64:	bne	16f8c <flatcc_builder_custom_init@@Base+0x64>
   16f68:	ldr	r3, [fp, #-16]
   16f6c:	mov	r2, #1
   16f70:	str	r2, [r3, #184]	; 0xb8
   16f74:	ldr	r3, [pc, #108]	; 16fe8 <flatcc_builder_custom_init@@Base+0xc0>
   16f78:	ldr	r3, [r4, r3]
   16f7c:	str	r3, [fp, #-20]	; 0xffffffec
   16f80:	ldr	r3, [fp, #-16]
   16f84:	add	r3, r3, #188	; 0xbc
   16f88:	str	r3, [fp, #-24]	; 0xffffffe8
   16f8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f90:	cmp	r3, #0
   16f94:	bne	16fa4 <flatcc_builder_custom_init@@Base+0x7c>
   16f98:	ldr	r3, [pc, #76]	; 16fec <flatcc_builder_custom_init@@Base+0xc4>
   16f9c:	ldr	r3, [r4, r3]
   16fa0:	str	r3, [fp, #-28]	; 0xffffffe4
   16fa4:	ldr	r3, [fp, #-16]
   16fa8:	ldr	r2, [fp, #4]
   16fac:	str	r2, [r3, #40]	; 0x28
   16fb0:	ldr	r3, [fp, #-16]
   16fb4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16fb8:	str	r2, [r3, #48]	; 0x30
   16fbc:	ldr	r3, [fp, #-16]
   16fc0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16fc4:	str	r2, [r3, #36]	; 0x24
   16fc8:	ldr	r3, [fp, #-16]
   16fcc:	ldr	r2, [fp, #-20]	; 0xffffffec
   16fd0:	str	r2, [r3, #44]	; 0x2c
   16fd4:	mov	r3, #0
   16fd8:	mov	r0, r3
   16fdc:	sub	sp, fp, #8
   16fe0:	pop	{r4, fp, pc}
   16fe4:	strheq	r1, [r2], -r0
   16fe8:	andeq	r0, r0, r4, rrx
   16fec:	andeq	r0, r0, r0, rrx

00016ff0 <flatcc_builder_init@@Base>:
   16ff0:	push	{fp, lr}
   16ff4:	add	fp, sp, #4
   16ff8:	sub	sp, sp, #16
   16ffc:	str	r0, [fp, #-8]
   17000:	mov	r3, #0
   17004:	str	r3, [sp]
   17008:	mov	r3, #0
   1700c:	mov	r2, #0
   17010:	mov	r1, #0
   17014:	ldr	r0, [fp, #-8]
   17018:	bl	16f28 <flatcc_builder_custom_init@@Base>
   1701c:	mov	r3, r0
   17020:	mov	r0, r3
   17024:	sub	sp, fp, #4
   17028:	pop	{fp, pc}

0001702c <flatcc_builder_custom_reset@@Base>:
   1702c:	push	{r4, fp, lr}
   17030:	add	fp, sp, #8
   17034:	sub	sp, sp, #36	; 0x24
   17038:	str	r0, [fp, #-24]	; 0xffffffe8
   1703c:	str	r1, [fp, #-28]	; 0xffffffe4
   17040:	str	r2, [fp, #-32]	; 0xffffffe0
   17044:	mov	r3, #0
   17048:	str	r3, [fp, #-16]
   1704c:	b	17128 <flatcc_builder_custom_reset@@Base+0xfc>
   17050:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17054:	add	r2, r3, #52	; 0x34
   17058:	ldr	r3, [fp, #-16]
   1705c:	lsl	r3, r3, #3
   17060:	add	r3, r2, r3
   17064:	str	r3, [fp, #-20]	; 0xffffffec
   17068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1706c:	ldr	r3, [r3]
   17070:	cmp	r3, #0
   17074:	beq	170ec <flatcc_builder_custom_reset@@Base+0xc0>
   17078:	ldr	r3, [fp, #-16]
   1707c:	cmp	r3, #5
   17080:	beq	170cc <flatcc_builder_custom_reset@@Base+0xa0>
   17084:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17088:	cmp	r3, #0
   1708c:	beq	170cc <flatcc_builder_custom_reset@@Base+0xa0>
   17090:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17094:	ldr	r4, [r3, #48]	; 0x30
   17098:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1709c:	ldr	r0, [r3, #40]	; 0x28
   170a0:	ldr	r3, [fp, #-16]
   170a4:	str	r3, [sp]
   170a8:	mov	r3, #1
   170ac:	mov	r2, #1
   170b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   170b4:	blx	r4
   170b8:	mov	r3, r0
   170bc:	cmp	r3, #0
   170c0:	beq	170cc <flatcc_builder_custom_reset@@Base+0xa0>
   170c4:	mvn	r3, #0
   170c8:	b	17258 <flatcc_builder_custom_reset@@Base+0x22c>
   170cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   170d0:	ldr	r0, [r3]
   170d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   170d8:	ldr	r3, [r3, #4]
   170dc:	mov	r2, r3
   170e0:	mov	r1, #0
   170e4:	bl	124d4 <memset@plt>
   170e8:	b	1711c <flatcc_builder_custom_reset@@Base+0xf0>
   170ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   170f0:	ldr	r3, [r3, #4]
   170f4:	cmp	r3, #0
   170f8:	beq	1711c <flatcc_builder_custom_reset@@Base+0xf0>
   170fc:	ldr	r3, [pc, #352]	; 17264 <flatcc_builder_custom_reset@@Base+0x238>
   17100:	add	r3, pc, r3
   17104:	ldr	r2, [pc, #348]	; 17268 <flatcc_builder_custom_reset@@Base+0x23c>
   17108:	ldr	r1, [pc, #348]	; 1726c <flatcc_builder_custom_reset@@Base+0x240>
   1710c:	add	r1, pc, r1
   17110:	ldr	r0, [pc, #344]	; 17270 <flatcc_builder_custom_reset@@Base+0x244>
   17114:	add	r0, pc, r0
   17118:	bl	12504 <__assert_fail@plt>
   1711c:	ldr	r3, [fp, #-16]
   17120:	add	r3, r3, #1
   17124:	str	r3, [fp, #-16]
   17128:	ldr	r3, [fp, #-16]
   1712c:	cmp	r3, #7
   17130:	ble	17050 <flatcc_builder_custom_reset@@Base+0x24>
   17134:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17138:	mov	r2, #0
   1713c:	str	r2, [r3, #120]	; 0x78
   17140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17144:	ldr	r3, [r3, #124]	; 0x7c
   17148:	cmp	r3, #0
   1714c:	beq	1715c <flatcc_builder_custom_reset@@Base+0x130>
   17150:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17154:	mov	r2, #16
   17158:	str	r2, [r3, #124]	; 0x7c
   1715c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17160:	mov	r2, #0
   17164:	strh	r2, [r3, #128]	; 0x80
   17168:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1716c:	mov	r2, #0
   17170:	str	r2, [r3, #136]	; 0x88
   17174:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17178:	mov	r2, #0
   1717c:	str	r2, [r3, #140]	; 0x8c
   17180:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17184:	mov	r2, #0
   17188:	str	r2, [r3, #156]	; 0x9c
   1718c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17190:	mov	r2, #0
   17194:	str	r2, [r3, #160]	; 0xa0
   17198:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1719c:	mov	r2, #0
   171a0:	str	r2, [r3, #20]
   171a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171a8:	mov	r2, #0
   171ac:	str	r2, [r3, #24]
   171b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171b4:	mov	r2, #0
   171b8:	str	r2, [r3, #148]	; 0x94
   171bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171c0:	mov	r2, #0
   171c4:	str	r2, [r3, #152]	; 0x98
   171c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171cc:	ldr	r2, [r3, #60]	; 0x3c
   171d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171d4:	str	r2, [r3, #16]
   171d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171dc:	ldr	r2, [r3, #76]	; 0x4c
   171e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171e4:	str	r2, [r3]
   171e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171ec:	ldr	r2, [r3, #52]	; 0x34
   171f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171f4:	str	r2, [r3, #4]
   171f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171fc:	mov	r2, #0
   17200:	str	r2, [r3, #32]
   17204:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17208:	cmp	r3, #0
   1720c:	beq	17234 <flatcc_builder_custom_reset@@Base+0x208>
   17210:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17214:	mov	r2, #0
   17218:	str	r2, [r3, #172]	; 0xac
   1721c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17220:	mov	r2, #0
   17224:	str	r2, [r3, #176]	; 0xb0
   17228:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1722c:	mov	r2, #0
   17230:	str	r2, [r3, #180]	; 0xb4
   17234:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17238:	ldr	r3, [r3, #184]	; 0xb8
   1723c:	cmp	r3, #0
   17240:	beq	17254 <flatcc_builder_custom_reset@@Base+0x228>
   17244:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17248:	add	r3, r3, #188	; 0xbc
   1724c:	mov	r0, r3
   17250:	bl	1cb50 <flatcc_emitter_reset@@Base>
   17254:	mov	r3, #0
   17258:	mov	r0, r3
   1725c:	sub	sp, fp, #8
   17260:	pop	{r4, fp, pc}
   17264:	andeq	pc, r0, r8, lsr #13
   17268:			; <UNDEFINED> instruction: 0x000001b2
   1726c:	andeq	pc, r0, r8, asr r2	; <UNPREDICTABLE>
   17270:	andeq	pc, r0, r4, asr #5

00017274 <flatcc_builder_reset@@Base>:
   17274:	push	{fp, lr}
   17278:	add	fp, sp, #4
   1727c:	sub	sp, sp, #8
   17280:	str	r0, [fp, #-8]
   17284:	mov	r2, #0
   17288:	mov	r1, #0
   1728c:	ldr	r0, [fp, #-8]
   17290:	bl	1702c <flatcc_builder_custom_reset@@Base>
   17294:	mov	r3, r0
   17298:	mov	r0, r3
   1729c:	sub	sp, fp, #4
   172a0:	pop	{fp, pc}

000172a4 <flatcc_builder_clear@@Base>:
   172a4:	push	{r4, fp, lr}
   172a8:	add	fp, sp, #8
   172ac:	sub	sp, sp, #28
   172b0:	str	r0, [fp, #-24]	; 0xffffffe8
   172b4:	mov	r3, #0
   172b8:	str	r3, [fp, #-16]
   172bc:	b	1730c <flatcc_builder_clear@@Base+0x68>
   172c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172c4:	add	r2, r3, #52	; 0x34
   172c8:	ldr	r3, [fp, #-16]
   172cc:	lsl	r3, r3, #3
   172d0:	add	r3, r2, r3
   172d4:	str	r3, [fp, #-20]	; 0xffffffec
   172d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172dc:	ldr	r4, [r3, #48]	; 0x30
   172e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172e4:	ldr	r0, [r3, #40]	; 0x28
   172e8:	ldr	r3, [fp, #-16]
   172ec:	str	r3, [sp]
   172f0:	mov	r3, #0
   172f4:	mov	r2, #0
   172f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   172fc:	blx	r4
   17300:	ldr	r3, [fp, #-16]
   17304:	add	r3, r3, #1
   17308:	str	r3, [fp, #-16]
   1730c:	ldr	r3, [fp, #-16]
   17310:	cmp	r3, #7
   17314:	ble	172c0 <flatcc_builder_clear@@Base+0x1c>
   17318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1731c:	ldr	r3, [r3, #184]	; 0xb8
   17320:	cmp	r3, #0
   17324:	beq	17338 <flatcc_builder_clear@@Base+0x94>
   17328:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1732c:	add	r3, r3, #188	; 0xbc
   17330:	mov	r0, r3
   17334:	bl	1ccdc <flatcc_emitter_clear@@Base>
   17338:	mov	r2, #232	; 0xe8
   1733c:	mov	r1, #0
   17340:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17344:	bl	124d4 <memset@plt>
   17348:	nop			; (mov r0, r0)
   1734c:	sub	sp, fp, #8
   17350:	pop	{r4, fp, pc}
   17354:	push	{fp}		; (str fp, [sp, #-4]!)
   17358:	add	fp, sp, #0
   1735c:	sub	sp, sp, #12
   17360:	str	r0, [fp, #-8]
   17364:	mov	r3, r1
   17368:	strh	r3, [fp, #-10]
   1736c:	ldr	r3, [fp, #-8]
   17370:	ldrh	r3, [r3, #128]	; 0x80
   17374:	ldrh	r2, [fp, #-10]
   17378:	cmp	r2, r3
   1737c:	bls	1738c <flatcc_builder_clear@@Base+0xe8>
   17380:	ldr	r3, [fp, #-8]
   17384:	ldrh	r2, [fp, #-10]
   17388:	strh	r2, [r3, #128]	; 0x80
   1738c:	nop			; (mov r0, r0)
   17390:	add	sp, fp, #0
   17394:	pop	{fp}		; (ldr fp, [sp], #4)
   17398:	bx	lr
   1739c:	push	{fp}		; (str fp, [sp, #-4]!)
   173a0:	add	fp, sp, #0
   173a4:	sub	sp, sp, #12
   173a8:	str	r0, [fp, #-8]
   173ac:	mov	r3, r1
   173b0:	strh	r3, [fp, #-10]
   173b4:	ldr	r3, [fp, #-8]
   173b8:	ldrh	r3, [r3]
   173bc:	ldrh	r2, [fp, #-10]
   173c0:	cmp	r2, r3
   173c4:	bls	173d4 <flatcc_builder_clear@@Base+0x130>
   173c8:	ldr	r3, [fp, #-8]
   173cc:	ldrh	r2, [fp, #-10]
   173d0:	strh	r2, [r3]
   173d4:	nop			; (mov r0, r0)
   173d8:	add	sp, fp, #0
   173dc:	pop	{fp}		; (ldr fp, [sp], #4)
   173e0:	bx	lr

000173e4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   173e4:	push	{fp, lr}
   173e8:	add	fp, sp, #4
   173ec:	sub	sp, sp, #24
   173f0:	str	r0, [fp, #-16]
   173f4:	str	r1, [fp, #-20]	; 0xffffffec
   173f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   173fc:	add	r3, r3, #3
   17400:	bic	r3, r3, #3
   17404:	add	r3, r3, #4
   17408:	str	r3, [fp, #-20]	; 0xffffffec
   1740c:	ldr	r3, [fp, #-16]
   17410:	ldr	r2, [r3, #228]	; 0xe4
   17414:	mov	r3, #0
   17418:	str	r3, [sp]
   1741c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17420:	mov	r1, #7
   17424:	ldr	r0, [fp, #-16]
   17428:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   1742c:	str	r0, [fp, #-8]
   17430:	ldr	r3, [fp, #-8]
   17434:	cmp	r3, #0
   17438:	bne	17444 <flatcc_builder_enter_user_frame_ptr@@Base+0x60>
   1743c:	mov	r3, #0
   17440:	b	1749c <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   17444:	ldr	r2, [fp, #-20]	; 0xffffffec
   17448:	mov	r1, #0
   1744c:	ldr	r0, [fp, #-8]
   17450:	bl	124d4 <memset@plt>
   17454:	ldr	r3, [fp, #-8]
   17458:	add	r2, r3, #4
   1745c:	str	r2, [fp, #-8]
   17460:	ldr	r2, [fp, #-16]
   17464:	ldr	r2, [r2, #224]	; 0xe0
   17468:	str	r2, [r3]
   1746c:	ldr	r3, [fp, #-16]
   17470:	ldr	r3, [r3, #228]	; 0xe4
   17474:	add	r2, r3, #4
   17478:	ldr	r3, [fp, #-16]
   1747c:	str	r2, [r3, #224]	; 0xe0
   17480:	ldr	r3, [fp, #-16]
   17484:	ldr	r2, [r3, #228]	; 0xe4
   17488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1748c:	add	r2, r2, r3
   17490:	ldr	r3, [fp, #-16]
   17494:	str	r2, [r3, #228]	; 0xe4
   17498:	ldr	r3, [fp, #-8]
   1749c:	mov	r0, r3
   174a0:	sub	sp, fp, #4
   174a4:	pop	{fp, pc}

000174a8 <flatcc_builder_enter_user_frame@@Base>:
   174a8:	push	{fp, lr}
   174ac:	add	fp, sp, #4
   174b0:	sub	sp, sp, #24
   174b4:	str	r0, [fp, #-16]
   174b8:	str	r1, [fp, #-20]	; 0xffffffec
   174bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   174c0:	add	r3, r3, #3
   174c4:	bic	r3, r3, #3
   174c8:	add	r3, r3, #4
   174cc:	str	r3, [fp, #-20]	; 0xffffffec
   174d0:	ldr	r3, [fp, #-16]
   174d4:	ldr	r2, [r3, #228]	; 0xe4
   174d8:	mov	r3, #0
   174dc:	str	r3, [sp]
   174e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174e4:	mov	r1, #7
   174e8:	ldr	r0, [fp, #-16]
   174ec:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   174f0:	str	r0, [fp, #-8]
   174f4:	ldr	r3, [fp, #-8]
   174f8:	cmp	r3, #0
   174fc:	bne	17508 <flatcc_builder_enter_user_frame@@Base+0x60>
   17500:	mov	r3, #0
   17504:	b	17564 <flatcc_builder_enter_user_frame@@Base+0xbc>
   17508:	ldr	r2, [fp, #-20]	; 0xffffffec
   1750c:	mov	r1, #0
   17510:	ldr	r0, [fp, #-8]
   17514:	bl	124d4 <memset@plt>
   17518:	ldr	r3, [fp, #-8]
   1751c:	add	r2, r3, #4
   17520:	str	r2, [fp, #-8]
   17524:	ldr	r2, [fp, #-16]
   17528:	ldr	r2, [r2, #224]	; 0xe0
   1752c:	str	r2, [r3]
   17530:	ldr	r3, [fp, #-16]
   17534:	ldr	r3, [r3, #228]	; 0xe4
   17538:	add	r2, r3, #4
   1753c:	ldr	r3, [fp, #-16]
   17540:	str	r2, [r3, #224]	; 0xe0
   17544:	ldr	r3, [fp, #-16]
   17548:	ldr	r2, [r3, #228]	; 0xe4
   1754c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17550:	add	r2, r2, r3
   17554:	ldr	r3, [fp, #-16]
   17558:	str	r2, [r3, #228]	; 0xe4
   1755c:	ldr	r3, [fp, #-16]
   17560:	ldr	r3, [r3, #224]	; 0xe0
   17564:	mov	r0, r3
   17568:	sub	sp, fp, #4
   1756c:	pop	{fp, pc}

00017570 <flatcc_builder_exit_user_frame@@Base>:
   17570:	push	{fp, lr}
   17574:	add	fp, sp, #4
   17578:	sub	sp, sp, #16
   1757c:	str	r0, [fp, #-16]
   17580:	ldr	r3, [fp, #-16]
   17584:	ldr	r3, [r3, #224]	; 0xe0
   17588:	cmp	r3, #0
   1758c:	bne	175b0 <flatcc_builder_exit_user_frame@@Base+0x40>
   17590:	ldr	r3, [pc, #104]	; 17600 <flatcc_builder_exit_user_frame@@Base+0x90>
   17594:	add	r3, pc, r3
   17598:	ldr	r2, [pc, #100]	; 17604 <flatcc_builder_exit_user_frame@@Base+0x94>
   1759c:	ldr	r1, [pc, #100]	; 17608 <flatcc_builder_exit_user_frame@@Base+0x98>
   175a0:	add	r1, pc, r1
   175a4:	ldr	r0, [pc, #96]	; 1760c <flatcc_builder_exit_user_frame@@Base+0x9c>
   175a8:	add	r0, pc, r0
   175ac:	bl	12504 <__assert_fail@plt>
   175b0:	ldr	r3, [fp, #-16]
   175b4:	ldr	r2, [r3, #108]	; 0x6c
   175b8:	ldr	r3, [fp, #-16]
   175bc:	ldr	r3, [r3, #224]	; 0xe0
   175c0:	add	r3, r2, r3
   175c4:	str	r3, [fp, #-8]
   175c8:	ldr	r3, [fp, #-16]
   175cc:	ldr	r3, [r3, #224]	; 0xe0
   175d0:	sub	r2, r3, #4
   175d4:	ldr	r3, [fp, #-16]
   175d8:	str	r2, [r3, #228]	; 0xe4
   175dc:	ldr	r3, [fp, #-8]
   175e0:	ldr	r2, [r3, #-4]
   175e4:	ldr	r3, [fp, #-16]
   175e8:	str	r2, [r3, #224]	; 0xe0
   175ec:	ldr	r3, [fp, #-16]
   175f0:	ldr	r3, [r3, #224]	; 0xe0
   175f4:	mov	r0, r3
   175f8:	sub	sp, fp, #4
   175fc:	pop	{fp, pc}
   17600:	andeq	pc, r0, r0, lsr r2	; <UNPREDICTABLE>
   17604:	andeq	r0, r0, lr, lsl r2
   17608:	andeq	lr, r0, r4, asr #27
   1760c:	andeq	lr, r0, r4, asr #28

00017610 <flatcc_builder_exit_user_frame_at@@Base>:
   17610:	push	{fp, lr}
   17614:	add	fp, sp, #4
   17618:	sub	sp, sp, #8
   1761c:	str	r0, [fp, #-8]
   17620:	str	r1, [fp, #-12]
   17624:	ldr	r3, [fp, #-8]
   17628:	ldr	r2, [r3, #224]	; 0xe0
   1762c:	ldr	r3, [fp, #-12]
   17630:	cmp	r2, r3
   17634:	bcs	17658 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   17638:	ldr	r3, [pc, #60]	; 1767c <flatcc_builder_exit_user_frame_at@@Base+0x6c>
   1763c:	add	r3, pc, r3
   17640:	ldr	r2, [pc, #56]	; 17680 <flatcc_builder_exit_user_frame_at@@Base+0x70>
   17644:	ldr	r1, [pc, #56]	; 17684 <flatcc_builder_exit_user_frame_at@@Base+0x74>
   17648:	add	r1, pc, r1
   1764c:	ldr	r0, [pc, #52]	; 17688 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   17650:	add	r0, pc, r0
   17654:	bl	12504 <__assert_fail@plt>
   17658:	ldr	r3, [fp, #-8]
   1765c:	ldr	r2, [fp, #-12]
   17660:	str	r2, [r3, #224]	; 0xe0
   17664:	ldr	r0, [fp, #-8]
   17668:	bl	17570 <flatcc_builder_exit_user_frame@@Base>
   1766c:	mov	r3, r0
   17670:	mov	r0, r3
   17674:	sub	sp, fp, #4
   17678:	pop	{fp, pc}
   1767c:	andeq	pc, r0, r8, lsr #3
   17680:	andeq	r0, r0, r7, lsr #4
   17684:	andeq	lr, r0, ip, lsl sp
   17688:			; <UNDEFINED> instruction: 0x0000edb8

0001768c <flatcc_builder_get_current_user_frame@@Base>:
   1768c:	push	{fp}		; (str fp, [sp, #-4]!)
   17690:	add	fp, sp, #0
   17694:	sub	sp, sp, #12
   17698:	str	r0, [fp, #-8]
   1769c:	ldr	r3, [fp, #-8]
   176a0:	ldr	r3, [r3, #224]	; 0xe0
   176a4:	mov	r0, r3
   176a8:	add	sp, fp, #0
   176ac:	pop	{fp}		; (ldr fp, [sp], #4)
   176b0:	bx	lr

000176b4 <flatcc_builder_get_user_frame_ptr@@Base>:
   176b4:	push	{fp}		; (str fp, [sp, #-4]!)
   176b8:	add	fp, sp, #0
   176bc:	sub	sp, sp, #12
   176c0:	str	r0, [fp, #-8]
   176c4:	str	r1, [fp, #-12]
   176c8:	ldr	r3, [fp, #-8]
   176cc:	ldr	r2, [r3, #108]	; 0x6c
   176d0:	ldr	r3, [fp, #-12]
   176d4:	add	r3, r2, r3
   176d8:	mov	r0, r3
   176dc:	add	sp, fp, #0
   176e0:	pop	{fp}		; (ldr fp, [sp], #4)
   176e4:	bx	lr
   176e8:	push	{fp, lr}
   176ec:	add	fp, sp, #4
   176f0:	sub	sp, sp, #16
   176f4:	str	r0, [fp, #-8]
   176f8:	mov	r3, r1
   176fc:	strh	r3, [fp, #-10]
   17700:	ldr	r3, [fp, #-8]
   17704:	ldr	r3, [r3, #156]	; 0x9c
   17708:	add	r2, r3, #1
   1770c:	ldr	r3, [fp, #-8]
   17710:	str	r2, [r3, #156]	; 0x9c
   17714:	ldr	r3, [fp, #-8]
   17718:	ldr	r2, [r3, #156]	; 0x9c
   1771c:	ldr	r3, [fp, #-8]
   17720:	ldr	r3, [r3, #160]	; 0xa0
   17724:	cmp	r2, r3
   17728:	ble	17818 <flatcc_builder_get_user_frame_ptr@@Base+0x164>
   1772c:	ldr	r3, [fp, #-8]
   17730:	ldr	r3, [r3, #176]	; 0xb0
   17734:	cmp	r3, #0
   17738:	ble	1775c <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   1773c:	ldr	r3, [fp, #-8]
   17740:	ldr	r2, [r3, #156]	; 0x9c
   17744:	ldr	r3, [fp, #-8]
   17748:	ldr	r3, [r3, #176]	; 0xb0
   1774c:	cmp	r2, r3
   17750:	ble	1775c <flatcc_builder_get_user_frame_ptr@@Base+0xa8>
   17754:	mvn	r3, #0
   17758:	b	178b8 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   1775c:	ldr	r3, [fp, #-8]
   17760:	ldr	r3, [r3, #156]	; 0x9c
   17764:	sub	r3, r3, #1
   17768:	mov	r2, r3
   1776c:	mov	r3, r2
   17770:	lsl	r3, r3, #3
   17774:	add	r3, r3, r2
   17778:	lsl	r3, r3, #2
   1777c:	mov	r2, r3
   17780:	mov	r3, #0
   17784:	str	r3, [sp]
   17788:	mov	r3, #36	; 0x24
   1778c:	mov	r1, #4
   17790:	ldr	r0, [fp, #-8]
   17794:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   17798:	mov	r2, r0
   1779c:	ldr	r3, [fp, #-8]
   177a0:	str	r2, [r3, #32]
   177a4:	ldr	r3, [fp, #-8]
   177a8:	ldr	r3, [r3, #32]
   177ac:	cmp	r3, #0
   177b0:	bne	177bc <flatcc_builder_get_user_frame_ptr@@Base+0x108>
   177b4:	mvn	r3, #0
   177b8:	b	178b8 <flatcc_builder_get_user_frame_ptr@@Base+0x204>
   177bc:	ldr	r3, [fp, #-8]
   177c0:	ldr	r3, [r3, #88]	; 0x58
   177c4:	ldr	r2, [pc, #248]	; 178c4 <flatcc_builder_get_user_frame_ptr@@Base+0x210>
   177c8:	umull	r2, r3, r2, r3
   177cc:	lsr	r3, r3, #3
   177d0:	mov	r2, r3
   177d4:	ldr	r3, [fp, #-8]
   177d8:	str	r2, [r3, #160]	; 0xa0
   177dc:	ldr	r3, [fp, #-8]
   177e0:	ldr	r3, [r3, #176]	; 0xb0
   177e4:	cmp	r3, #0
   177e8:	ble	1782c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   177ec:	ldr	r3, [fp, #-8]
   177f0:	ldr	r2, [r3, #176]	; 0xb0
   177f4:	ldr	r3, [fp, #-8]
   177f8:	ldr	r3, [r3, #160]	; 0xa0
   177fc:	cmp	r2, r3
   17800:	bge	1782c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   17804:	ldr	r3, [fp, #-8]
   17808:	ldr	r2, [r3, #176]	; 0xb0
   1780c:	ldr	r3, [fp, #-8]
   17810:	str	r2, [r3, #160]	; 0xa0
   17814:	b	1782c <flatcc_builder_get_user_frame_ptr@@Base+0x178>
   17818:	ldr	r3, [fp, #-8]
   1781c:	ldr	r3, [r3, #32]
   17820:	add	r2, r3, #36	; 0x24
   17824:	ldr	r3, [fp, #-8]
   17828:	str	r2, [r3, #32]
   1782c:	ldr	r3, [fp, #-8]
   17830:	ldr	r3, [r3, #32]
   17834:	ldr	r2, [fp, #-8]
   17838:	ldr	r2, [r2, #20]
   1783c:	str	r2, [r3, #8]
   17840:	ldr	r3, [fp, #-8]
   17844:	ldr	r3, [r3, #32]
   17848:	ldr	r2, [fp, #-8]
   1784c:	ldrh	r2, [r2, #130]	; 0x82
   17850:	strh	r2, [r3, #12]
   17854:	ldr	r3, [fp, #-8]
   17858:	ldrh	r2, [fp, #-10]
   1785c:	strh	r2, [r3, #130]	; 0x82
   17860:	ldr	r3, [fp, #-8]
   17864:	ldr	r3, [r3, #32]
   17868:	ldr	r2, [fp, #-8]
   1786c:	ldr	r2, [r2, #28]
   17870:	str	r2, [r3]
   17874:	ldr	r3, [fp, #-8]
   17878:	ldr	r3, [r3, #32]
   1787c:	mvn	r2, #3
   17880:	str	r2, [r3, #4]
   17884:	ldr	r3, [fp, #-8]
   17888:	ldr	r2, [r3, #28]
   1788c:	ldr	r3, [fp, #-8]
   17890:	ldr	r3, [r3, #20]
   17894:	add	r3, r2, r3
   17898:	add	r3, r3, #7
   1789c:	bic	r2, r3, #7
   178a0:	ldr	r3, [fp, #-8]
   178a4:	str	r2, [r3, #28]
   178a8:	ldr	r3, [fp, #-8]
   178ac:	mov	r2, #0
   178b0:	str	r2, [r3, #20]
   178b4:	mov	r3, #0
   178b8:	mov	r0, r3
   178bc:	sub	sp, fp, #4
   178c0:	pop	{fp, pc}
   178c4:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   178c8:	push	{fp, lr}
   178cc:	add	fp, sp, #4
   178d0:	sub	sp, sp, #8
   178d4:	str	r0, [fp, #-8]
   178d8:	ldr	r3, [fp, #-8]
   178dc:	ldr	r0, [r3, #16]
   178e0:	ldr	r3, [fp, #-8]
   178e4:	ldr	r3, [r3, #20]
   178e8:	mov	r2, r3
   178ec:	mov	r1, #0
   178f0:	bl	124d4 <memset@plt>
   178f4:	ldr	r3, [fp, #-8]
   178f8:	ldr	r3, [r3, #32]
   178fc:	ldr	r2, [r3, #8]
   17900:	ldr	r3, [fp, #-8]
   17904:	str	r2, [r3, #20]
   17908:	ldr	r3, [fp, #-8]
   1790c:	ldr	r3, [r3, #32]
   17910:	ldr	r2, [r3]
   17914:	ldr	r3, [fp, #-8]
   17918:	str	r2, [r3, #28]
   1791c:	ldr	r3, [fp, #-8]
   17920:	ldr	r3, [r3, #32]
   17924:	ldr	r3, [r3, #4]
   17928:	mov	r1, r3
   1792c:	ldr	r0, [fp, #-8]
   17930:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   17934:	ldr	r3, [fp, #-8]
   17938:	ldrh	r3, [r3, #130]	; 0x82
   1793c:	mov	r1, r3
   17940:	ldr	r0, [fp, #-8]
   17944:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   17948:	ldr	r3, [fp, #-8]
   1794c:	ldr	r3, [r3, #32]
   17950:	ldrh	r2, [r3, #12]
   17954:	ldr	r3, [fp, #-8]
   17958:	strh	r2, [r3, #130]	; 0x82
   1795c:	ldr	r3, [fp, #-8]
   17960:	ldr	r3, [r3, #32]
   17964:	sub	r2, r3, #36	; 0x24
   17968:	ldr	r3, [fp, #-8]
   1796c:	str	r2, [r3, #32]
   17970:	ldr	r3, [fp, #-8]
   17974:	ldr	r3, [r3, #156]	; 0x9c
   17978:	sub	r2, r3, #1
   1797c:	ldr	r3, [fp, #-8]
   17980:	str	r2, [r3, #156]	; 0x9c
   17984:	nop			; (mov r0, r0)
   17988:	sub	sp, fp, #4
   1798c:	pop	{fp, pc}
   17990:	push	{fp}		; (str fp, [sp, #-4]!)
   17994:	add	fp, sp, #0
   17998:	sub	sp, sp, #20
   1799c:	str	r0, [fp, #-8]
   179a0:	str	r1, [fp, #-12]
   179a4:	mov	r3, r2
   179a8:	strh	r3, [fp, #-14]
   179ac:	ldr	r3, [fp, #-8]
   179b0:	ldr	r3, [r3, #136]	; 0x88
   179b4:	mov	r2, r3
   179b8:	ldr	r3, [fp, #-12]
   179bc:	sub	r3, r2, r3
   179c0:	ldrh	r2, [fp, #-14]
   179c4:	sub	r2, r2, #1
   179c8:	and	r3, r3, r2
   179cc:	mov	r0, r3
   179d0:	add	sp, fp, #0
   179d4:	pop	{fp}		; (ldr fp, [sp], #4)
   179d8:	bx	lr
   179dc:	push	{fp}		; (str fp, [sp, #-4]!)
   179e0:	add	fp, sp, #0
   179e4:	sub	sp, sp, #12
   179e8:	str	r0, [fp, #-8]
   179ec:	mov	r3, r1
   179f0:	strh	r3, [fp, #-10]
   179f4:	ldr	r3, [fp, #-8]
   179f8:	ldr	r2, [r3, #140]	; 0x8c
   179fc:	ldrh	r3, [fp, #-10]
   17a00:	sub	r3, r3, #1
   17a04:	and	r3, r3, r2
   17a08:	mov	r0, r3
   17a0c:	add	sp, fp, #0
   17a10:	pop	{fp}		; (ldr fp, [sp], #4)
   17a14:	bx	lr
   17a18:	push	{r4, fp, lr}
   17a1c:	add	fp, sp, #8
   17a20:	sub	sp, sp, #28
   17a24:	str	r0, [fp, #-24]	; 0xffffffe8
   17a28:	str	r1, [fp, #-28]	; 0xffffffe4
   17a2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a30:	ldr	r3, [r3, #136]	; 0x88
   17a34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17a38:	ldr	r2, [r2]
   17a3c:	sub	r3, r3, r2
   17a40:	str	r3, [fp, #-16]
   17a44:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a48:	ldr	r2, [r3, #136]	; 0x88
   17a4c:	ldr	r3, [fp, #-16]
   17a50:	cmp	r2, r3
   17a54:	bgt	17a78 <flatcc_builder_get_user_frame_ptr@@Base+0x3c4>
   17a58:	ldr	r3, [pc, #152]	; 17af8 <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   17a5c:	add	r3, pc, r3
   17a60:	ldr	r2, [pc, #148]	; 17afc <flatcc_builder_get_user_frame_ptr@@Base+0x448>
   17a64:	ldr	r1, [pc, #148]	; 17b00 <flatcc_builder_get_user_frame_ptr@@Base+0x44c>
   17a68:	add	r1, pc, r1
   17a6c:	ldr	r0, [pc, #144]	; 17b04 <flatcc_builder_get_user_frame_ptr@@Base+0x450>
   17a70:	add	r0, pc, r0
   17a74:	bl	12504 <__assert_fail@plt>
   17a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a7c:	ldr	r4, [r3, #44]	; 0x2c
   17a80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a84:	ldr	r0, [r3, #36]	; 0x24
   17a88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a8c:	add	r1, r3, #8
   17a90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a94:	ldr	r2, [r3, #4]
   17a98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17a9c:	ldr	r3, [r3]
   17aa0:	str	r3, [sp]
   17aa4:	ldr	r3, [fp, #-16]
   17aa8:	blx	r4
   17aac:	mov	r3, r0
   17ab0:	cmp	r3, #0
   17ab4:	beq	17ad8 <flatcc_builder_get_user_frame_ptr@@Base+0x424>
   17ab8:	ldr	r3, [pc, #72]	; 17b08 <flatcc_builder_get_user_frame_ptr@@Base+0x454>
   17abc:	add	r3, pc, r3
   17ac0:	ldr	r2, [pc, #68]	; 17b0c <flatcc_builder_get_user_frame_ptr@@Base+0x458>
   17ac4:	ldr	r1, [pc, #68]	; 17b10 <flatcc_builder_get_user_frame_ptr@@Base+0x45c>
   17ac8:	add	r1, pc, r1
   17acc:	ldr	r0, [pc, #64]	; 17b14 <flatcc_builder_get_user_frame_ptr@@Base+0x460>
   17ad0:	add	r0, pc, r0
   17ad4:	bl	12504 <__assert_fail@plt>
   17ad8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17adc:	ldr	r2, [fp, #-16]
   17ae0:	str	r2, [r3, #136]	; 0x88
   17ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ae8:	ldr	r3, [r3, #136]	; 0x88
   17aec:	mov	r0, r3
   17af0:	sub	sp, fp, #8
   17af4:	pop	{r4, fp, pc}
   17af8:	andeq	lr, r0, r8, asr #27
   17afc:	andeq	r0, r0, r7, lsl #5
   17b00:	strdeq	lr, [r0], -ip
   17b04:	andeq	lr, r0, r4, asr r9
   17b08:	andeq	lr, r0, r8, ror #26
   17b0c:	andeq	r0, r0, fp, lsl #5
   17b10:	muleq	r0, ip, r8
   17b14:	strdeq	lr, [r0], -r4
   17b18:	push	{r4, fp, lr}
   17b1c:	add	fp, sp, #8
   17b20:	sub	sp, sp, #28
   17b24:	str	r0, [fp, #-24]	; 0xffffffe8
   17b28:	str	r1, [fp, #-28]	; 0xffffffe4
   17b2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b30:	ldr	r3, [r3, #140]	; 0x8c
   17b34:	str	r3, [fp, #-16]
   17b38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17b3c:	ldr	r3, [r3]
   17b40:	mov	r2, r3
   17b44:	ldr	r3, [fp, #-16]
   17b48:	add	r2, r2, r3
   17b4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b50:	str	r2, [r3, #140]	; 0x8c
   17b54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b58:	ldr	r2, [r3, #140]	; 0x8c
   17b5c:	ldr	r3, [fp, #-16]
   17b60:	cmp	r2, r3
   17b64:	bge	17b88 <flatcc_builder_get_user_frame_ptr@@Base+0x4d4>
   17b68:	ldr	r3, [pc, #140]	; 17bfc <flatcc_builder_get_user_frame_ptr@@Base+0x548>
   17b6c:	add	r3, pc, r3
   17b70:	ldr	r2, [pc, #136]	; 17c00 <flatcc_builder_get_user_frame_ptr@@Base+0x54c>
   17b74:	ldr	r1, [pc, #136]	; 17c04 <flatcc_builder_get_user_frame_ptr@@Base+0x550>
   17b78:	add	r1, pc, r1
   17b7c:	ldr	r0, [pc, #132]	; 17c08 <flatcc_builder_get_user_frame_ptr@@Base+0x554>
   17b80:	add	r0, pc, r0
   17b84:	bl	12504 <__assert_fail@plt>
   17b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b8c:	ldr	r4, [r3, #44]	; 0x2c
   17b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b94:	ldr	r0, [r3, #36]	; 0x24
   17b98:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17b9c:	add	r1, r3, #8
   17ba0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ba4:	ldr	r2, [r3, #4]
   17ba8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17bac:	ldr	r3, [r3]
   17bb0:	str	r3, [sp]
   17bb4:	ldr	r3, [fp, #-16]
   17bb8:	blx	r4
   17bbc:	mov	r3, r0
   17bc0:	cmp	r3, #0
   17bc4:	beq	17be8 <flatcc_builder_get_user_frame_ptr@@Base+0x534>
   17bc8:	ldr	r3, [pc, #60]	; 17c0c <flatcc_builder_get_user_frame_ptr@@Base+0x558>
   17bcc:	add	r3, pc, r3
   17bd0:	ldr	r2, [pc, #56]	; 17c10 <flatcc_builder_get_user_frame_ptr@@Base+0x55c>
   17bd4:	ldr	r1, [pc, #56]	; 17c14 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   17bd8:	add	r1, pc, r1
   17bdc:	ldr	r0, [pc, #52]	; 17c18 <flatcc_builder_get_user_frame_ptr@@Base+0x564>
   17be0:	add	r0, pc, r0
   17be4:	bl	12504 <__assert_fail@plt>
   17be8:	ldr	r3, [fp, #-16]
   17bec:	add	r3, r3, #1
   17bf0:	mov	r0, r3
   17bf4:	sub	sp, fp, #8
   17bf8:	pop	{r4, fp, pc}
   17bfc:	andeq	lr, r0, ip, lsr #25
   17c00:	andeq	r0, r0, r1, lsr #5
   17c04:	andeq	lr, r0, ip, ror #15
   17c08:	andeq	lr, r0, r4, asr #16
   17c0c:	andeq	lr, r0, ip, asr #24
   17c10:	andeq	r0, r0, r5, lsr #5
   17c14:	andeq	lr, r0, ip, lsl #15
   17c18:	andeq	lr, r0, r4, ror #15
   17c1c:	push	{r4, fp, lr}
   17c20:	add	fp, sp, #8
   17c24:	sub	sp, sp, #100	; 0x64
   17c28:	str	r0, [fp, #-96]	; 0xffffffa0
   17c2c:	str	r1, [fp, #-100]	; 0xffffff9c
   17c30:	str	r3, [fp, #-108]	; 0xffffff94
   17c34:	strh	r2, [fp, #-102]	; 0xffffff9a
   17c38:	ldr	r4, [pc, #320]	; 17d80 <flatcc_builder_get_user_frame_ptr@@Base+0x6cc>
   17c3c:	add	r4, pc, r4
   17c40:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   17c44:	cmp	r3, #0
   17c48:	bne	17c70 <flatcc_builder_get_user_frame_ptr@@Base+0x5bc>
   17c4c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17c50:	ldrh	r3, [r3, #132]	; 0x84
   17c54:	cmp	r3, #0
   17c58:	beq	17c68 <flatcc_builder_get_user_frame_ptr@@Base+0x5b4>
   17c5c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17c60:	ldrh	r3, [r3, #132]	; 0x84
   17c64:	b	17c74 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   17c68:	mov	r3, #1
   17c6c:	b	17c74 <flatcc_builder_get_user_frame_ptr@@Base+0x5c0>
   17c70:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   17c74:	strh	r3, [fp, #-102]	; 0xffffff9a
   17c78:	mov	r1, #4
   17c7c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17c80:	bl	1739c <flatcc_builder_clear@@Base+0xf8>
   17c84:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   17c88:	mov	r1, r3
   17c8c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   17c90:	bl	1739c <flatcc_builder_clear@@Base+0xf8>
   17c94:	ldr	r3, [fp, #-108]	; 0xffffff94
   17c98:	cmp	r3, #0
   17c9c:	bne	17d70 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   17ca0:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   17ca4:	mov	r1, r3
   17ca8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17cac:	bl	179dc <flatcc_builder_get_user_frame_ptr@@Base+0x328>
   17cb0:	str	r0, [fp, #-16]
   17cb4:	ldr	r3, [fp, #-16]
   17cb8:	cmp	r3, #0
   17cbc:	beq	17d70 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   17cc0:	mov	r3, #0
   17cc4:	str	r3, [fp, #-88]	; 0xffffffa8
   17cc8:	mov	r3, #0
   17ccc:	str	r3, [fp, #-84]	; 0xffffffac
   17cd0:	ldr	r3, [fp, #-16]
   17cd4:	cmp	r3, #0
   17cd8:	beq	17d34 <flatcc_builder_get_user_frame_ptr@@Base+0x680>
   17cdc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   17ce0:	ldr	r3, [fp, #-16]
   17ce4:	add	r3, r2, r3
   17ce8:	str	r3, [fp, #-88]	; 0xffffffa8
   17cec:	ldr	r3, [fp, #-84]	; 0xffffffac
   17cf0:	add	r3, r3, #1
   17cf4:	lsl	r3, r3, #3
   17cf8:	sub	r2, fp, #12
   17cfc:	add	r3, r2, r3
   17d00:	ldr	r2, [pc, #124]	; 17d84 <flatcc_builder_get_user_frame_ptr@@Base+0x6d0>
   17d04:	ldr	r2, [r4, r2]
   17d08:	str	r2, [r3, #-76]	; 0xffffffb4
   17d0c:	ldr	r3, [fp, #-84]	; 0xffffffac
   17d10:	add	r3, r3, #1
   17d14:	lsl	r3, r3, #3
   17d18:	sub	r2, fp, #12
   17d1c:	add	r3, r2, r3
   17d20:	ldr	r2, [fp, #-16]
   17d24:	str	r2, [r3, #-72]	; 0xffffffb8
   17d28:	ldr	r3, [fp, #-84]	; 0xffffffac
   17d2c:	add	r3, r3, #1
   17d30:	str	r3, [fp, #-84]	; 0xffffffac
   17d34:	sub	r3, fp, #88	; 0x58
   17d38:	mov	r1, r3
   17d3c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17d40:	bl	17b18 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   17d44:	mov	r3, r0
   17d48:	cmp	r3, #0
   17d4c:	bne	17d70 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   17d50:	ldr	r3, [pc, #48]	; 17d88 <flatcc_builder_get_user_frame_ptr@@Base+0x6d4>
   17d54:	add	r3, pc, r3
   17d58:	ldr	r2, [pc, #44]	; 17d8c <flatcc_builder_get_user_frame_ptr@@Base+0x6d8>
   17d5c:	ldr	r1, [pc, #44]	; 17d90 <flatcc_builder_get_user_frame_ptr@@Base+0x6dc>
   17d60:	add	r1, pc, r1
   17d64:	ldr	r0, [pc, #40]	; 17d94 <flatcc_builder_get_user_frame_ptr@@Base+0x6e0>
   17d68:	add	r0, pc, r0
   17d6c:	bl	12504 <__assert_fail@plt>
   17d70:	mov	r3, #0
   17d74:	mov	r0, r3
   17d78:	sub	sp, fp, #8
   17d7c:	pop	{r4, fp, pc}
   17d80:			; <UNDEFINED> instruction: 0x000203bc
   17d84:	andeq	r0, r0, r4, asr r0
   17d88:			; <UNDEFINED> instruction: 0x0000eab4
   17d8c:			; <UNDEFINED> instruction: 0x000002be
   17d90:	andeq	lr, r0, r4, lsl #12
   17d94:	andeq	lr, r0, ip, asr r6

00017d98 <flatcc_builder_embed_buffer@@Base>:
   17d98:	push	{r4, fp, lr}
   17d9c:	add	fp, sp, #8
   17da0:	sub	sp, sp, #108	; 0x6c
   17da4:	str	r0, [fp, #-104]	; 0xffffff98
   17da8:	str	r2, [fp, #-112]	; 0xffffff90
   17dac:	str	r3, [fp, #-116]	; 0xffffff8c
   17db0:	strh	r1, [fp, #-106]	; 0xffffff96
   17db4:	ldr	r4, [pc, #492]	; 17fa8 <flatcc_builder_embed_buffer@@Base+0x210>
   17db8:	add	r4, pc, r4
   17dbc:	ldr	r3, [fp, #8]
   17dc0:	and	r3, r3, #2
   17dc4:	str	r3, [fp, #-16]
   17dc8:	ldr	r3, [fp, #-104]	; 0xffffff98
   17dcc:	ldr	r3, [r3, #152]	; 0x98
   17dd0:	cmp	r3, #0
   17dd4:	movne	r3, #1
   17dd8:	moveq	r3, #0
   17ddc:	uxtb	r3, r3
   17de0:	ldrh	r2, [fp, #-106]	; 0xffffff96
   17de4:	add	r1, fp, #4
   17de8:	ldr	r0, [fp, #-104]	; 0xffffff98
   17dec:	bl	17c1c <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   17df0:	mov	r3, r0
   17df4:	cmp	r3, #0
   17df8:	beq	17e04 <flatcc_builder_embed_buffer@@Base+0x6c>
   17dfc:	mov	r3, #0
   17e00:	b	17f9c <flatcc_builder_embed_buffer@@Base+0x204>
   17e04:	ldr	r3, [fp, #-16]
   17e08:	cmp	r3, #0
   17e0c:	beq	17e18 <flatcc_builder_embed_buffer@@Base+0x80>
   17e10:	mov	r2, #4
   17e14:	b	17e1c <flatcc_builder_embed_buffer@@Base+0x84>
   17e18:	mov	r2, #0
   17e1c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17e20:	add	r3, r2, r3
   17e24:	ldrh	r2, [fp, #4]
   17e28:	mov	r1, r3
   17e2c:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e30:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   17e34:	str	r0, [fp, #-20]	; 0xffffffec
   17e38:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17e3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e40:	add	r3, r2, r3
   17e44:	mov	r0, r3
   17e48:	bl	16354 <main@@Base+0xf4>
   17e4c:	mov	r3, r0
   17e50:	str	r3, [fp, #-24]	; 0xffffffe8
   17e54:	mov	r3, #0
   17e58:	str	r3, [fp, #-96]	; 0xffffffa0
   17e5c:	mov	r3, #0
   17e60:	str	r3, [fp, #-92]	; 0xffffffa4
   17e64:	ldr	r3, [fp, #-104]	; 0xffffff98
   17e68:	ldr	r3, [r3, #152]	; 0x98
   17e6c:	cmp	r3, #0
   17e70:	beq	17ec4 <flatcc_builder_embed_buffer@@Base+0x12c>
   17e74:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17e78:	add	r3, r3, #4
   17e7c:	str	r3, [fp, #-96]	; 0xffffffa0
   17e80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17e84:	add	r3, r3, #1
   17e88:	lsl	r3, r3, #3
   17e8c:	sub	r2, fp, #12
   17e90:	add	r3, r2, r3
   17e94:	sub	r2, fp, #24
   17e98:	str	r2, [r3, #-84]	; 0xffffffac
   17e9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ea0:	add	r3, r3, #1
   17ea4:	lsl	r3, r3, #3
   17ea8:	sub	r2, fp, #12
   17eac:	add	r3, r2, r3
   17eb0:	mov	r2, #4
   17eb4:	str	r2, [r3, #-80]	; 0xffffffb0
   17eb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ebc:	add	r3, r3, #1
   17ec0:	str	r3, [fp, #-92]	; 0xffffffa4
   17ec4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17ec8:	cmp	r3, #0
   17ecc:	beq	17f24 <flatcc_builder_embed_buffer@@Base+0x18c>
   17ed0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17ed4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17ed8:	add	r3, r2, r3
   17edc:	str	r3, [fp, #-96]	; 0xffffffa0
   17ee0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ee4:	add	r3, r3, #1
   17ee8:	lsl	r3, r3, #3
   17eec:	sub	r2, fp, #12
   17ef0:	add	r3, r2, r3
   17ef4:	ldr	r2, [fp, #-112]	; 0xffffff90
   17ef8:	str	r2, [r3, #-84]	; 0xffffffac
   17efc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f00:	add	r3, r3, #1
   17f04:	lsl	r3, r3, #3
   17f08:	sub	r2, fp, #12
   17f0c:	add	r3, r2, r3
   17f10:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17f14:	str	r2, [r3, #-80]	; 0xffffffb0
   17f18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f1c:	add	r3, r3, #1
   17f20:	str	r3, [fp, #-92]	; 0xffffffa4
   17f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f28:	cmp	r3, #0
   17f2c:	beq	17f88 <flatcc_builder_embed_buffer@@Base+0x1f0>
   17f30:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f38:	add	r3, r2, r3
   17f3c:	str	r3, [fp, #-96]	; 0xffffffa0
   17f40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f44:	add	r3, r3, #1
   17f48:	lsl	r3, r3, #3
   17f4c:	sub	r2, fp, #12
   17f50:	add	r3, r2, r3
   17f54:	ldr	r2, [pc, #80]	; 17fac <flatcc_builder_embed_buffer@@Base+0x214>
   17f58:	ldr	r2, [r4, r2]
   17f5c:	str	r2, [r3, #-84]	; 0xffffffac
   17f60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f64:	add	r3, r3, #1
   17f68:	lsl	r3, r3, #3
   17f6c:	sub	r2, fp, #12
   17f70:	add	r3, r2, r3
   17f74:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f78:	str	r2, [r3, #-80]	; 0xffffffb0
   17f7c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17f80:	add	r3, r3, #1
   17f84:	str	r3, [fp, #-92]	; 0xffffffa4
   17f88:	sub	r3, fp, #96	; 0x60
   17f8c:	mov	r1, r3
   17f90:	ldr	r0, [fp, #-104]	; 0xffffff98
   17f94:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   17f98:	mov	r3, r0
   17f9c:	mov	r0, r3
   17fa0:	sub	sp, fp, #8
   17fa4:	pop	{r4, fp, pc}
   17fa8:	andeq	r0, r2, r0, asr #4
   17fac:	andeq	r0, r0, r4, asr r0

00017fb0 <flatcc_builder_create_buffer@@Base>:
   17fb0:	push	{r4, fp, lr}
   17fb4:	add	fp, sp, #8
   17fb8:	sub	sp, sp, #132	; 0x84
   17fbc:	str	r0, [fp, #-128]	; 0xffffff80
   17fc0:	str	r1, [fp, #-132]	; 0xffffff7c
   17fc4:	str	r3, [fp, #-140]	; 0xffffff74
   17fc8:	strh	r2, [fp, #-134]	; 0xffffff7a
   17fcc:	ldr	r4, [pc, #932]	; 18378 <flatcc_builder_create_buffer@@Base+0x3c8>
   17fd0:	add	r4, pc, r4
   17fd4:	mov	r3, #0
   17fd8:	str	r3, [fp, #-16]
   17fdc:	mov	r3, #0
   17fe0:	str	r3, [fp, #-120]	; 0xffffff88
   17fe4:	ldr	r3, [fp, #8]
   17fe8:	and	r3, r3, #1
   17fec:	cmp	r3, #0
   17ff0:	movne	r3, #1
   17ff4:	moveq	r3, #0
   17ff8:	uxtb	r3, r3
   17ffc:	str	r3, [fp, #-20]	; 0xffffffec
   18000:	ldr	r3, [fp, #8]
   18004:	and	r3, r3, #2
   18008:	cmp	r3, #0
   1800c:	movne	r3, #1
   18010:	moveq	r3, #0
   18014:	uxtb	r3, r3
   18018:	str	r3, [fp, #-24]	; 0xffffffe8
   1801c:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   18020:	ldr	r3, [fp, #-20]	; 0xffffffec
   18024:	add	r1, fp, #4
   18028:	ldr	r0, [fp, #-128]	; 0xffffff80
   1802c:	bl	17c1c <flatcc_builder_get_user_frame_ptr@@Base+0x568>
   18030:	mov	r3, r0
   18034:	cmp	r3, #0
   18038:	beq	18044 <flatcc_builder_create_buffer@@Base+0x94>
   1803c:	mov	r3, #0
   18040:	b	1836c <flatcc_builder_create_buffer@@Base+0x3bc>
   18044:	ldrh	r3, [fp, #4]
   18048:	mov	r1, r3
   1804c:	ldr	r0, [fp, #-128]	; 0xffffff80
   18050:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   18054:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18058:	cmp	r3, #0
   1805c:	beq	18094 <flatcc_builder_create_buffer@@Base+0xe4>
   18060:	ldr	r3, [fp, #-132]	; 0xffffff7c
   18064:	ldr	r3, [r3]
   18068:	str	r3, [fp, #-120]	; 0xffffff88
   1806c:	ldr	r3, [fp, #-120]	; 0xffffff88
   18070:	mov	r0, r3
   18074:	bl	163a0 <main@@Base+0x140>
   18078:	mov	r3, r0
   1807c:	str	r3, [fp, #-120]	; 0xffffff88
   18080:	ldr	r3, [fp, #-120]	; 0xffffff88
   18084:	mov	r0, r3
   18088:	bl	16354 <main@@Base+0xf4>
   1808c:	mov	r3, r0
   18090:	str	r3, [fp, #-120]	; 0xffffff88
   18094:	ldr	r3, [fp, #-120]	; 0xffffff88
   18098:	cmp	r3, #0
   1809c:	beq	180a8 <flatcc_builder_create_buffer@@Base+0xf8>
   180a0:	mov	r3, #4
   180a4:	b	180ac <flatcc_builder_create_buffer@@Base+0xfc>
   180a8:	mov	r3, #0
   180ac:	str	r3, [fp, #-16]
   180b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   180b4:	cmp	r3, #0
   180b8:	beq	180c4 <flatcc_builder_create_buffer@@Base+0x114>
   180bc:	mov	r2, #4
   180c0:	b	180c8 <flatcc_builder_create_buffer@@Base+0x118>
   180c4:	mov	r2, #0
   180c8:	ldr	r3, [fp, #-16]
   180cc:	add	r3, r2, r3
   180d0:	add	r3, r3, #4
   180d4:	ldrh	r2, [fp, #4]
   180d8:	mov	r1, r3
   180dc:	ldr	r0, [fp, #-128]	; 0xffffff80
   180e0:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   180e4:	str	r0, [fp, #-28]	; 0xffffffe4
   180e8:	mov	r3, #0
   180ec:	str	r3, [fp, #-116]	; 0xffffff8c
   180f0:	mov	r3, #0
   180f4:	str	r3, [fp, #-112]	; 0xffffff90
   180f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   180fc:	cmp	r3, #0
   18100:	bne	18110 <flatcc_builder_create_buffer@@Base+0x160>
   18104:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18108:	cmp	r3, #0
   1810c:	beq	18160 <flatcc_builder_create_buffer@@Base+0x1b0>
   18110:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18114:	add	r3, r3, #4
   18118:	str	r3, [fp, #-116]	; 0xffffff8c
   1811c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18120:	add	r3, r3, #1
   18124:	lsl	r3, r3, #3
   18128:	sub	r2, fp, #12
   1812c:	add	r3, r2, r3
   18130:	sub	r2, fp, #44	; 0x2c
   18134:	str	r2, [r3, #-104]	; 0xffffff98
   18138:	ldr	r3, [fp, #-112]	; 0xffffff90
   1813c:	add	r3, r3, #1
   18140:	lsl	r3, r3, #3
   18144:	sub	r2, fp, #12
   18148:	add	r3, r2, r3
   1814c:	mov	r2, #4
   18150:	str	r2, [r3, #-100]	; 0xffffff9c
   18154:	ldr	r3, [fp, #-112]	; 0xffffff90
   18158:	add	r3, r3, #1
   1815c:	str	r3, [fp, #-112]	; 0xffffff90
   18160:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18164:	add	r3, r3, #4
   18168:	str	r3, [fp, #-116]	; 0xffffff8c
   1816c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18170:	add	r3, r3, #1
   18174:	lsl	r3, r3, #3
   18178:	sub	r2, fp, #12
   1817c:	add	r3, r2, r3
   18180:	sub	r2, fp, #40	; 0x28
   18184:	str	r2, [r3, #-104]	; 0xffffff98
   18188:	ldr	r3, [fp, #-112]	; 0xffffff90
   1818c:	add	r3, r3, #1
   18190:	lsl	r3, r3, #3
   18194:	sub	r2, fp, #12
   18198:	add	r3, r2, r3
   1819c:	mov	r2, #4
   181a0:	str	r2, [r3, #-100]	; 0xffffff9c
   181a4:	ldr	r3, [fp, #-112]	; 0xffffff90
   181a8:	add	r3, r3, #1
   181ac:	str	r3, [fp, #-112]	; 0xffffff90
   181b0:	ldr	r3, [fp, #-16]
   181b4:	cmp	r3, #0
   181b8:	beq	18210 <flatcc_builder_create_buffer@@Base+0x260>
   181bc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   181c0:	ldr	r3, [fp, #-16]
   181c4:	add	r3, r2, r3
   181c8:	str	r3, [fp, #-116]	; 0xffffff8c
   181cc:	ldr	r3, [fp, #-112]	; 0xffffff90
   181d0:	add	r3, r3, #1
   181d4:	lsl	r3, r3, #3
   181d8:	sub	r2, fp, #12
   181dc:	add	r3, r2, r3
   181e0:	sub	r2, fp, #120	; 0x78
   181e4:	str	r2, [r3, #-104]	; 0xffffff98
   181e8:	ldr	r3, [fp, #-112]	; 0xffffff90
   181ec:	add	r3, r3, #1
   181f0:	lsl	r3, r3, #3
   181f4:	sub	r2, fp, #12
   181f8:	add	r3, r2, r3
   181fc:	ldr	r2, [fp, #-16]
   18200:	str	r2, [r3, #-100]	; 0xffffff9c
   18204:	ldr	r3, [fp, #-112]	; 0xffffff90
   18208:	add	r3, r3, #1
   1820c:	str	r3, [fp, #-112]	; 0xffffff90
   18210:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18214:	cmp	r3, #0
   18218:	beq	18274 <flatcc_builder_create_buffer@@Base+0x2c4>
   1821c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18220:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18224:	add	r3, r2, r3
   18228:	str	r3, [fp, #-116]	; 0xffffff8c
   1822c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18230:	add	r3, r3, #1
   18234:	lsl	r3, r3, #3
   18238:	sub	r2, fp, #12
   1823c:	add	r3, r2, r3
   18240:	ldr	r2, [pc, #308]	; 1837c <flatcc_builder_create_buffer@@Base+0x3cc>
   18244:	ldr	r2, [r4, r2]
   18248:	str	r2, [r3, #-104]	; 0xffffff98
   1824c:	ldr	r3, [fp, #-112]	; 0xffffff90
   18250:	add	r3, r3, #1
   18254:	lsl	r3, r3, #3
   18258:	sub	r2, fp, #12
   1825c:	add	r3, r2, r3
   18260:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18264:	str	r2, [r3, #-100]	; 0xffffff9c
   18268:	ldr	r3, [fp, #-112]	; 0xffffff90
   1826c:	add	r3, r3, #1
   18270:	str	r3, [fp, #-112]	; 0xffffff90
   18274:	ldr	r3, [fp, #-128]	; 0xffffff80
   18278:	ldr	r3, [r3, #136]	; 0x88
   1827c:	mov	r2, r3
   18280:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18284:	sub	r2, r2, r3
   18288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1828c:	cmp	r3, #0
   18290:	bne	182a0 <flatcc_builder_create_buffer@@Base+0x2f0>
   18294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18298:	cmp	r3, #0
   1829c:	beq	182a8 <flatcc_builder_create_buffer@@Base+0x2f8>
   182a0:	mov	r3, #4
   182a4:	b	182ac <flatcc_builder_create_buffer@@Base+0x2fc>
   182a8:	mov	r3, #0
   182ac:	add	r3, r2, r3
   182b0:	str	r3, [fp, #-32]	; 0xffffffe0
   182b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   182b8:	cmp	r3, #0
   182bc:	beq	182e8 <flatcc_builder_create_buffer@@Base+0x338>
   182c0:	ldr	r3, [fp, #-128]	; 0xffffff80
   182c4:	ldr	r3, [r3, #144]	; 0x90
   182c8:	mov	r2, r3
   182cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182d0:	sub	r3, r2, r3
   182d4:	mov	r0, r3
   182d8:	bl	16354 <main@@Base+0xf4>
   182dc:	mov	r3, r0
   182e0:	str	r3, [fp, #-44]	; 0xffffffd4
   182e4:	b	1830c <flatcc_builder_create_buffer@@Base+0x35c>
   182e8:	ldr	r3, [fp, #-128]	; 0xffffff80
   182ec:	ldr	r3, [r3, #140]	; 0x8c
   182f0:	mov	r2, r3
   182f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   182f8:	sub	r3, r2, r3
   182fc:	mov	r0, r3
   18300:	bl	16354 <main@@Base+0xf4>
   18304:	mov	r3, r0
   18308:	str	r3, [fp, #-44]	; 0xffffffd4
   1830c:	ldr	r2, [fp, #-140]	; 0xffffff74
   18310:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18314:	sub	r3, r2, r3
   18318:	mov	r0, r3
   1831c:	bl	16354 <main@@Base+0xf4>
   18320:	mov	r3, r0
   18324:	str	r3, [fp, #-40]	; 0xffffffd8
   18328:	sub	r3, fp, #116	; 0x74
   1832c:	mov	r1, r3
   18330:	ldr	r0, [fp, #-128]	; 0xffffff80
   18334:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   18338:	str	r0, [fp, #-36]	; 0xffffffdc
   1833c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18340:	cmp	r3, #0
   18344:	bne	18368 <flatcc_builder_create_buffer@@Base+0x3b8>
   18348:	ldr	r3, [pc, #48]	; 18380 <flatcc_builder_create_buffer@@Base+0x3d0>
   1834c:	add	r3, pc, r3
   18350:	mov	r2, #772	; 0x304
   18354:	ldr	r1, [pc, #40]	; 18384 <flatcc_builder_create_buffer@@Base+0x3d4>
   18358:	add	r1, pc, r1
   1835c:	ldr	r0, [pc, #36]	; 18388 <flatcc_builder_create_buffer@@Base+0x3d8>
   18360:	add	r0, pc, r0
   18364:	bl	12504 <__assert_fail@plt>
   18368:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1836c:	mov	r0, r3
   18370:	sub	sp, fp, #8
   18374:	pop	{r4, fp, pc}
   18378:	andeq	r0, r2, r8, lsr #32
   1837c:	andeq	r0, r0, r4, asr r0
   18380:	andeq	lr, r0, r4, ror #9
   18384:	andeq	lr, r0, ip
   18388:	andeq	lr, r0, r4, rrx

0001838c <flatcc_builder_create_struct@@Base>:
   1838c:	push	{r4, fp, lr}
   18390:	add	fp, sp, #8
   18394:	sub	sp, sp, #100	; 0x64
   18398:	str	r0, [fp, #-96]	; 0xffffffa0
   1839c:	str	r1, [fp, #-100]	; 0xffffff9c
   183a0:	str	r2, [fp, #-104]	; 0xffffff98
   183a4:	strh	r3, [fp, #-106]	; 0xffffff96
   183a8:	ldr	r4, [pc, #328]	; 184f8 <flatcc_builder_create_struct@@Base+0x16c>
   183ac:	add	r4, pc, r4
   183b0:	ldrh	r3, [fp, #-106]	; 0xffffff96
   183b4:	cmp	r3, #0
   183b8:	bne	183dc <flatcc_builder_create_struct@@Base+0x50>
   183bc:	ldr	r3, [pc, #312]	; 184fc <flatcc_builder_create_struct@@Base+0x170>
   183c0:	add	r3, pc, r3
   183c4:	ldr	r2, [pc, #308]	; 18500 <flatcc_builder_create_struct@@Base+0x174>
   183c8:	ldr	r1, [pc, #308]	; 18504 <flatcc_builder_create_struct@@Base+0x178>
   183cc:	add	r1, pc, r1
   183d0:	ldr	r0, [pc, #304]	; 18508 <flatcc_builder_create_struct@@Base+0x17c>
   183d4:	add	r0, pc, r0
   183d8:	bl	12504 <__assert_fail@plt>
   183dc:	ldrh	r3, [fp, #-106]	; 0xffffff96
   183e0:	mov	r1, r3
   183e4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   183e8:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   183ec:	ldrh	r3, [fp, #-106]	; 0xffffff96
   183f0:	mov	r2, r3
   183f4:	ldr	r1, [fp, #-104]	; 0xffffff98
   183f8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   183fc:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   18400:	str	r0, [fp, #-16]
   18404:	mov	r3, #0
   18408:	str	r3, [fp, #-88]	; 0xffffffa8
   1840c:	mov	r3, #0
   18410:	str	r3, [fp, #-84]	; 0xffffffac
   18414:	ldr	r3, [fp, #-104]	; 0xffffff98
   18418:	cmp	r3, #0
   1841c:	beq	18474 <flatcc_builder_create_struct@@Base+0xe8>
   18420:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18424:	ldr	r3, [fp, #-104]	; 0xffffff98
   18428:	add	r3, r2, r3
   1842c:	str	r3, [fp, #-88]	; 0xffffffa8
   18430:	ldr	r3, [fp, #-84]	; 0xffffffac
   18434:	add	r3, r3, #1
   18438:	lsl	r3, r3, #3
   1843c:	sub	r2, fp, #12
   18440:	add	r3, r2, r3
   18444:	ldr	r2, [fp, #-100]	; 0xffffff9c
   18448:	str	r2, [r3, #-76]	; 0xffffffb4
   1844c:	ldr	r3, [fp, #-84]	; 0xffffffac
   18450:	add	r3, r3, #1
   18454:	lsl	r3, r3, #3
   18458:	sub	r2, fp, #12
   1845c:	add	r3, r2, r3
   18460:	ldr	r2, [fp, #-104]	; 0xffffff98
   18464:	str	r2, [r3, #-72]	; 0xffffffb8
   18468:	ldr	r3, [fp, #-84]	; 0xffffffac
   1846c:	add	r3, r3, #1
   18470:	str	r3, [fp, #-84]	; 0xffffffac
   18474:	ldr	r3, [fp, #-16]
   18478:	cmp	r3, #0
   1847c:	beq	184d8 <flatcc_builder_create_struct@@Base+0x14c>
   18480:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18484:	ldr	r3, [fp, #-16]
   18488:	add	r3, r2, r3
   1848c:	str	r3, [fp, #-88]	; 0xffffffa8
   18490:	ldr	r3, [fp, #-84]	; 0xffffffac
   18494:	add	r3, r3, #1
   18498:	lsl	r3, r3, #3
   1849c:	sub	r2, fp, #12
   184a0:	add	r3, r2, r3
   184a4:	ldr	r2, [pc, #96]	; 1850c <flatcc_builder_create_struct@@Base+0x180>
   184a8:	ldr	r2, [r4, r2]
   184ac:	str	r2, [r3, #-76]	; 0xffffffb4
   184b0:	ldr	r3, [fp, #-84]	; 0xffffffac
   184b4:	add	r3, r3, #1
   184b8:	lsl	r3, r3, #3
   184bc:	sub	r2, fp, #12
   184c0:	add	r3, r2, r3
   184c4:	ldr	r2, [fp, #-16]
   184c8:	str	r2, [r3, #-72]	; 0xffffffb8
   184cc:	ldr	r3, [fp, #-84]	; 0xffffffac
   184d0:	add	r3, r3, #1
   184d4:	str	r3, [fp, #-84]	; 0xffffffac
   184d8:	sub	r3, fp, #88	; 0x58
   184dc:	mov	r1, r3
   184e0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   184e4:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   184e8:	mov	r3, r0
   184ec:	mov	r0, r3
   184f0:	sub	sp, fp, #8
   184f4:	pop	{r4, fp, pc}
   184f8:	andeq	pc, r1, ip, asr #24
   184fc:	muleq	r0, r0, r4
   18500:	andeq	r0, r0, pc, lsl #6
   18504:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   18508:	andeq	lr, r0, r4, asr r0
   1850c:	andeq	r0, r0, r4, asr r0

00018510 <flatcc_builder_start_buffer@@Base>:
   18510:	push	{r4, fp, lr}
   18514:	add	fp, sp, #8
   18518:	sub	sp, sp, #20
   1851c:	str	r0, [fp, #-16]
   18520:	str	r1, [fp, #-20]	; 0xffffffec
   18524:	str	r3, [fp, #-28]	; 0xffffffe4
   18528:	strh	r2, [fp, #-22]	; 0xffffffea
   1852c:	ldr	r4, [pc, #300]	; 18660 <flatcc_builder_start_buffer@@Base+0x150>
   18530:	add	r4, pc, r4
   18534:	ldr	r3, [fp, #-16]
   18538:	ldrh	r3, [r3, #128]	; 0x80
   1853c:	mov	r1, r3
   18540:	ldr	r0, [fp, #-16]
   18544:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18548:	mov	r3, r0
   1854c:	cmp	r3, #0
   18550:	beq	1855c <flatcc_builder_start_buffer@@Base+0x4c>
   18554:	mvn	r3, #0
   18558:	b	18654 <flatcc_builder_start_buffer@@Base+0x144>
   1855c:	ldr	r3, [fp, #-16]
   18560:	mov	r2, #1
   18564:	strh	r2, [r3, #128]	; 0x80
   18568:	ldr	r3, [fp, #-16]
   1856c:	ldr	r3, [r3, #32]
   18570:	ldr	r2, [fp, #-16]
   18574:	ldrh	r2, [r2, #132]	; 0x84
   18578:	strh	r2, [r3, #34]	; 0x22
   1857c:	ldr	r3, [fp, #-16]
   18580:	ldrh	r2, [fp, #-22]	; 0xffffffea
   18584:	strh	r2, [r3, #132]	; 0x84
   18588:	ldr	r3, [fp, #-16]
   1858c:	ldr	r3, [r3, #32]
   18590:	ldr	r2, [fp, #-16]
   18594:	ldrh	r2, [r2, #164]	; 0xa4
   18598:	strh	r2, [r3, #32]
   1859c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   185a0:	uxth	r2, r3
   185a4:	ldr	r3, [fp, #-16]
   185a8:	strh	r2, [r3, #164]	; 0xa4
   185ac:	ldr	r3, [fp, #-16]
   185b0:	ldr	r3, [r3, #32]
   185b4:	ldr	r2, [fp, #-16]
   185b8:	ldr	r2, [r2, #144]	; 0x90
   185bc:	str	r2, [r3, #20]
   185c0:	ldr	r3, [fp, #-16]
   185c4:	ldr	r3, [r3, #32]
   185c8:	ldr	r2, [fp, #-16]
   185cc:	ldr	r2, [r2, #152]	; 0x98
   185d0:	str	r2, [r3, #28]
   185d4:	ldr	r3, [fp, #-16]
   185d8:	ldr	r2, [r3, #136]	; 0x88
   185dc:	ldr	r3, [fp, #-16]
   185e0:	str	r2, [r3, #144]	; 0x90
   185e4:	ldr	r3, [fp, #-16]
   185e8:	ldr	r3, [r3, #148]	; 0x94
   185ec:	add	r1, r3, #1
   185f0:	ldr	r2, [fp, #-16]
   185f4:	str	r1, [r2, #148]	; 0x94
   185f8:	ldr	r2, [fp, #-16]
   185fc:	str	r3, [r2, #152]	; 0x98
   18600:	ldr	r3, [fp, #-16]
   18604:	ldr	r3, [r3, #32]
   18608:	ldr	r2, [fp, #-16]
   1860c:	ldr	r2, [r2, #168]	; 0xa8
   18610:	str	r2, [r3, #16]
   18614:	ldr	r3, [fp, #-16]
   18618:	add	r2, r3, #168	; 0xa8
   1861c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18620:	cmp	r3, #0
   18624:	beq	18630 <flatcc_builder_start_buffer@@Base+0x120>
   18628:	ldr	r3, [fp, #-20]	; 0xffffffec
   1862c:	b	18638 <flatcc_builder_start_buffer@@Base+0x128>
   18630:	ldr	r3, [pc, #44]	; 18664 <flatcc_builder_start_buffer@@Base+0x154>
   18634:	ldr	r3, [r4, r3]
   18638:	ldr	r3, [r3]
   1863c:	str	r3, [r2]
   18640:	ldr	r3, [fp, #-16]
   18644:	ldr	r3, [r3, #32]
   18648:	mov	r2, #1
   1864c:	strh	r2, [r3, #14]
   18650:	mov	r3, #0
   18654:	mov	r0, r3
   18658:	sub	sp, fp, #8
   1865c:	pop	{r4, fp, pc}
   18660:	andeq	pc, r1, r8, asr #21
   18664:	andeq	r0, r0, r4, asr r0

00018668 <flatcc_builder_end_buffer@@Base>:
   18668:	push	{fp, lr}
   1866c:	add	fp, sp, #4
   18670:	sub	sp, sp, #24
   18674:	str	r0, [fp, #-16]
   18678:	str	r1, [fp, #-20]	; 0xffffffec
   1867c:	ldr	r3, [fp, #-16]
   18680:	ldrh	r3, [r3, #164]	; 0xa4
   18684:	and	r3, r3, #2
   18688:	str	r3, [fp, #-8]
   1868c:	ldr	r3, [fp, #-16]
   18690:	ldr	r3, [r3, #152]	; 0x98
   18694:	cmp	r3, #0
   18698:	movne	r3, #1
   1869c:	moveq	r3, #0
   186a0:	uxtb	r3, r3
   186a4:	mov	r2, r3
   186a8:	ldr	r3, [fp, #-8]
   186ac:	orr	r3, r3, r2
   186b0:	str	r3, [fp, #-8]
   186b4:	ldr	r3, [fp, #-16]
   186b8:	ldr	r3, [r3, #32]
   186bc:	ldrh	r3, [r3, #14]
   186c0:	cmp	r3, #1
   186c4:	beq	186e8 <flatcc_builder_end_buffer@@Base+0x80>
   186c8:	ldr	r3, [pc, #224]	; 187b0 <flatcc_builder_end_buffer@@Base+0x148>
   186cc:	add	r3, pc, r3
   186d0:	ldr	r2, [pc, #220]	; 187b4 <flatcc_builder_end_buffer@@Base+0x14c>
   186d4:	ldr	r1, [pc, #220]	; 187b8 <flatcc_builder_end_buffer@@Base+0x150>
   186d8:	add	r1, pc, r1
   186dc:	ldr	r0, [pc, #216]	; 187bc <flatcc_builder_end_buffer@@Base+0x154>
   186e0:	add	r0, pc, r0
   186e4:	bl	12504 <__assert_fail@plt>
   186e8:	ldr	r3, [fp, #-16]
   186ec:	ldrh	r3, [r3, #132]	; 0x84
   186f0:	mov	r1, r3
   186f4:	ldr	r0, [fp, #-16]
   186f8:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   186fc:	ldr	r3, [fp, #-16]
   18700:	add	r1, r3, #168	; 0xa8
   18704:	ldr	r3, [fp, #-16]
   18708:	ldrh	r0, [r3, #132]	; 0x84
   1870c:	ldr	r3, [fp, #-16]
   18710:	ldrh	r3, [r3, #128]	; 0x80
   18714:	ldr	r2, [fp, #-8]
   18718:	str	r2, [sp, #4]
   1871c:	str	r3, [sp]
   18720:	ldr	r3, [fp, #-20]	; 0xffffffec
   18724:	mov	r2, r0
   18728:	ldr	r0, [fp, #-16]
   1872c:	bl	17fb0 <flatcc_builder_create_buffer@@Base>
   18730:	str	r0, [fp, #-12]
   18734:	ldr	r3, [fp, #-12]
   18738:	cmp	r3, #0
   1873c:	bne	18748 <flatcc_builder_end_buffer@@Base+0xe0>
   18740:	mov	r3, #0
   18744:	b	187a4 <flatcc_builder_end_buffer@@Base+0x13c>
   18748:	ldr	r3, [fp, #-16]
   1874c:	ldr	r3, [r3, #32]
   18750:	ldr	r2, [r3, #20]
   18754:	ldr	r3, [fp, #-16]
   18758:	str	r2, [r3, #144]	; 0x90
   1875c:	ldr	r3, [fp, #-16]
   18760:	ldr	r3, [r3, #32]
   18764:	ldr	r2, [r3, #28]
   18768:	ldr	r3, [fp, #-16]
   1876c:	str	r2, [r3, #152]	; 0x98
   18770:	ldr	r3, [fp, #-16]
   18774:	ldr	r3, [r3, #32]
   18778:	ldr	r2, [r3, #16]
   1877c:	ldr	r3, [fp, #-16]
   18780:	str	r2, [r3, #168]	; 0xa8
   18784:	ldr	r3, [fp, #-16]
   18788:	ldr	r3, [r3, #32]
   1878c:	ldrh	r2, [r3, #32]
   18790:	ldr	r3, [fp, #-16]
   18794:	strh	r2, [r3, #164]	; 0xa4
   18798:	ldr	r0, [fp, #-16]
   1879c:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   187a0:	ldr	r3, [fp, #-12]
   187a4:	mov	r0, r3
   187a8:	sub	sp, fp, #4
   187ac:	pop	{fp, pc}
   187b0:	andeq	lr, r0, r4, lsr #3
   187b4:	andeq	r0, r0, r6, asr #6
   187b8:	andeq	sp, r0, ip, lsl #25
   187bc:	andeq	sp, r0, r4, asr sp

000187c0 <flatcc_builder_start_struct@@Base>:
   187c0:	push	{fp, lr}
   187c4:	add	fp, sp, #4
   187c8:	sub	sp, sp, #16
   187cc:	str	r0, [fp, #-8]
   187d0:	str	r1, [fp, #-12]
   187d4:	mov	r3, r2
   187d8:	strh	r3, [fp, #-14]
   187dc:	ldrh	r3, [fp, #-14]
   187e0:	mov	r1, r3
   187e4:	ldr	r0, [fp, #-8]
   187e8:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   187ec:	mov	r3, r0
   187f0:	cmp	r3, #0
   187f4:	beq	18800 <flatcc_builder_start_struct@@Base+0x40>
   187f8:	mov	r3, #0
   187fc:	b	1882c <flatcc_builder_start_struct@@Base+0x6c>
   18800:	ldr	r3, [fp, #-8]
   18804:	ldr	r3, [r3, #32]
   18808:	mov	r2, #2
   1880c:	strh	r2, [r3, #14]
   18810:	mvn	r1, #3
   18814:	ldr	r0, [fp, #-8]
   18818:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   1881c:	ldr	r1, [fp, #-12]
   18820:	ldr	r0, [fp, #-8]
   18824:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   18828:	mov	r3, r0
   1882c:	mov	r0, r3
   18830:	sub	sp, fp, #4
   18834:	pop	{fp, pc}

00018838 <flatcc_builder_struct_edit@@Base>:
   18838:	push	{fp}		; (str fp, [sp, #-4]!)
   1883c:	add	fp, sp, #0
   18840:	sub	sp, sp, #12
   18844:	str	r0, [fp, #-8]
   18848:	ldr	r3, [fp, #-8]
   1884c:	ldr	r3, [r3, #16]
   18850:	mov	r0, r3
   18854:	add	sp, fp, #0
   18858:	pop	{fp}		; (ldr fp, [sp], #4)
   1885c:	bx	lr

00018860 <flatcc_builder_end_struct@@Base>:
   18860:	push	{fp, lr}
   18864:	add	fp, sp, #4
   18868:	sub	sp, sp, #16
   1886c:	str	r0, [fp, #-16]
   18870:	ldr	r3, [fp, #-16]
   18874:	ldr	r3, [r3, #32]
   18878:	ldrh	r3, [r3, #14]
   1887c:	cmp	r3, #2
   18880:	beq	188a4 <flatcc_builder_end_struct@@Base+0x44>
   18884:	ldr	r3, [pc, #104]	; 188f4 <flatcc_builder_end_struct@@Base+0x94>
   18888:	add	r3, pc, r3
   1888c:	mov	r2, #872	; 0x368
   18890:	ldr	r1, [pc, #96]	; 188f8 <flatcc_builder_end_struct@@Base+0x98>
   18894:	add	r1, pc, r1
   18898:	ldr	r0, [pc, #92]	; 188fc <flatcc_builder_end_struct@@Base+0x9c>
   1889c:	add	r0, pc, r0
   188a0:	bl	12504 <__assert_fail@plt>
   188a4:	ldr	r3, [fp, #-16]
   188a8:	ldr	r1, [r3, #16]
   188ac:	ldr	r3, [fp, #-16]
   188b0:	ldr	r2, [r3, #20]
   188b4:	ldr	r3, [fp, #-16]
   188b8:	ldrh	r3, [r3, #130]	; 0x82
   188bc:	ldr	r0, [fp, #-16]
   188c0:	bl	1838c <flatcc_builder_create_struct@@Base>
   188c4:	str	r0, [fp, #-8]
   188c8:	ldr	r3, [fp, #-8]
   188cc:	cmp	r3, #0
   188d0:	bne	188dc <flatcc_builder_end_struct@@Base+0x7c>
   188d4:	mov	r3, #0
   188d8:	b	188e8 <flatcc_builder_end_struct@@Base+0x88>
   188dc:	ldr	r0, [fp, #-16]
   188e0:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   188e4:	ldr	r3, [fp, #-8]
   188e8:	mov	r0, r3
   188ec:	sub	sp, fp, #4
   188f0:	pop	{fp, pc}
   188f4:	andeq	lr, r0, r4
   188f8:	ldrdeq	sp, [r0], -r0
   188fc:	andeq	sp, r0, r4, asr #23
   18900:	push	{fp, lr}
   18904:	add	fp, sp, #4
   18908:	sub	sp, sp, #24
   1890c:	str	r0, [fp, #-16]
   18910:	str	r1, [fp, #-20]	; 0xffffffec
   18914:	str	r2, [fp, #-24]	; 0xffffffe8
   18918:	ldr	r3, [fp, #-16]
   1891c:	ldr	r3, [r3, #32]
   18920:	ldr	r3, [r3, #20]
   18924:	str	r3, [fp, #-8]
   18928:	ldr	r2, [fp, #-8]
   1892c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18930:	add	r3, r2, r3
   18934:	str	r3, [fp, #-12]
   18938:	ldr	r2, [fp, #-8]
   1893c:	ldr	r3, [fp, #-12]
   18940:	cmp	r2, r3
   18944:	bhi	18958 <flatcc_builder_end_struct@@Base+0xf8>
   18948:	ldr	r2, [fp, #-12]
   1894c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18950:	cmp	r2, r3
   18954:	bls	189a0 <flatcc_builder_end_struct@@Base+0x140>
   18958:	ldr	r2, [fp, #-8]
   1895c:	ldr	r3, [fp, #-12]
   18960:	cmp	r2, r3
   18964:	bhi	18978 <flatcc_builder_end_struct@@Base+0x118>
   18968:	ldr	r2, [fp, #-12]
   1896c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18970:	cmp	r2, r3
   18974:	bls	18998 <flatcc_builder_end_struct@@Base+0x138>
   18978:	ldr	r3, [pc, #64]	; 189c0 <flatcc_builder_end_struct@@Base+0x160>
   1897c:	add	r3, pc, r3
   18980:	mov	r2, #892	; 0x37c
   18984:	ldr	r1, [pc, #56]	; 189c4 <flatcc_builder_end_struct@@Base+0x164>
   18988:	add	r1, pc, r1
   1898c:	ldr	r0, [pc, #52]	; 189c8 <flatcc_builder_end_struct@@Base+0x168>
   18990:	add	r0, pc, r0
   18994:	bl	12504 <__assert_fail@plt>
   18998:	mvn	r3, #0
   1899c:	b	189b4 <flatcc_builder_end_struct@@Base+0x154>
   189a0:	ldr	r3, [fp, #-16]
   189a4:	ldr	r3, [r3, #32]
   189a8:	ldr	r2, [fp, #-12]
   189ac:	str	r2, [r3, #20]
   189b0:	mov	r3, #0
   189b4:	mov	r0, r3
   189b8:	sub	sp, fp, #4
   189bc:	pop	{fp, pc}
   189c0:	andeq	sp, r0, ip, lsr #30
   189c4:	ldrdeq	sp, [r0], -ip
   189c8:	strdeq	sp, [r0], -ip

000189cc <flatcc_builder_extend_vector@@Base>:
   189cc:	push	{fp, lr}
   189d0:	add	fp, sp, #4
   189d4:	sub	sp, sp, #8
   189d8:	str	r0, [fp, #-8]
   189dc:	str	r1, [fp, #-12]
   189e0:	ldr	r3, [fp, #-8]
   189e4:	ldr	r3, [r3, #32]
   189e8:	ldr	r3, [r3, #24]
   189ec:	mov	r2, r3
   189f0:	ldr	r1, [fp, #-12]
   189f4:	ldr	r0, [fp, #-8]
   189f8:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   189fc:	mov	r3, r0
   18a00:	cmp	r3, #0
   18a04:	beq	18a10 <flatcc_builder_extend_vector@@Base+0x44>
   18a08:	mov	r3, #0
   18a0c:	b	18a34 <flatcc_builder_extend_vector@@Base+0x68>
   18a10:	ldr	r3, [fp, #-8]
   18a14:	ldr	r3, [r3, #32]
   18a18:	ldr	r3, [r3, #16]
   18a1c:	ldr	r2, [fp, #-12]
   18a20:	mul	r3, r2, r3
   18a24:	mov	r1, r3
   18a28:	ldr	r0, [fp, #-8]
   18a2c:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   18a30:	mov	r3, r0
   18a34:	mov	r0, r3
   18a38:	sub	sp, fp, #4
   18a3c:	pop	{fp, pc}

00018a40 <flatcc_builder_vector_push@@Base>:
   18a40:	push	{fp, lr}
   18a44:	add	fp, sp, #4
   18a48:	sub	sp, sp, #8
   18a4c:	str	r0, [fp, #-8]
   18a50:	str	r1, [fp, #-12]
   18a54:	ldr	r3, [fp, #-8]
   18a58:	ldr	r3, [r3, #32]
   18a5c:	ldrh	r3, [r3, #14]
   18a60:	cmp	r3, #4
   18a64:	beq	18a88 <flatcc_builder_vector_push@@Base+0x48>
   18a68:	ldr	r3, [pc, #200]	; 18b38 <flatcc_builder_vector_push@@Base+0xf8>
   18a6c:	add	r3, pc, r3
   18a70:	ldr	r2, [pc, #196]	; 18b3c <flatcc_builder_vector_push@@Base+0xfc>
   18a74:	ldr	r1, [pc, #196]	; 18b40 <flatcc_builder_vector_push@@Base+0x100>
   18a78:	add	r1, pc, r1
   18a7c:	ldr	r0, [pc, #192]	; 18b44 <flatcc_builder_vector_push@@Base+0x104>
   18a80:	add	r0, pc, r0
   18a84:	bl	12504 <__assert_fail@plt>
   18a88:	ldr	r3, [fp, #-8]
   18a8c:	ldr	r3, [r3, #32]
   18a90:	ldr	r2, [r3, #20]
   18a94:	ldr	r3, [fp, #-8]
   18a98:	ldr	r3, [r3, #32]
   18a9c:	ldr	r3, [r3, #24]
   18aa0:	cmp	r2, r3
   18aa4:	bls	18af0 <flatcc_builder_vector_push@@Base+0xb0>
   18aa8:	ldr	r3, [fp, #-8]
   18aac:	ldr	r3, [r3, #32]
   18ab0:	ldr	r2, [r3, #20]
   18ab4:	ldr	r3, [fp, #-8]
   18ab8:	ldr	r3, [r3, #32]
   18abc:	ldr	r3, [r3, #24]
   18ac0:	cmp	r2, r3
   18ac4:	bls	18ae8 <flatcc_builder_vector_push@@Base+0xa8>
   18ac8:	ldr	r3, [pc, #120]	; 18b48 <flatcc_builder_vector_push@@Base+0x108>
   18acc:	add	r3, pc, r3
   18ad0:	mov	r2, #908	; 0x38c
   18ad4:	ldr	r1, [pc, #112]	; 18b4c <flatcc_builder_vector_push@@Base+0x10c>
   18ad8:	add	r1, pc, r1
   18adc:	ldr	r0, [pc, #108]	; 18b50 <flatcc_builder_vector_push@@Base+0x110>
   18ae0:	add	r0, pc, r0
   18ae4:	bl	12504 <__assert_fail@plt>
   18ae8:	mov	r3, #0
   18aec:	b	18b2c <flatcc_builder_vector_push@@Base+0xec>
   18af0:	ldr	r3, [fp, #-8]
   18af4:	ldr	r3, [r3, #32]
   18af8:	ldr	r2, [fp, #-8]
   18afc:	ldr	r2, [r2, #32]
   18b00:	ldr	r2, [r2, #20]
   18b04:	add	r2, r2, #1
   18b08:	str	r2, [r3, #20]
   18b0c:	ldr	r3, [fp, #-8]
   18b10:	ldr	r3, [r3, #32]
   18b14:	ldr	r3, [r3, #16]
   18b18:	mov	r2, r3
   18b1c:	ldr	r1, [fp, #-12]
   18b20:	ldr	r0, [fp, #-8]
   18b24:	bl	16880 <flatcc_builder_default_alloc@@Base+0x3e8>
   18b28:	mov	r3, r0
   18b2c:	mov	r0, r3
   18b30:	sub	sp, fp, #4
   18b34:	pop	{fp, pc}
   18b38:	andeq	sp, r0, r0, asr lr
   18b3c:	andeq	r0, r0, fp, lsl #7
   18b40:	andeq	sp, r0, ip, ror #17
   18b44:	andeq	sp, r0, r8, lsr #20
   18b48:	strdeq	sp, [r0], -r0
   18b4c:	andeq	sp, r0, ip, lsl #17
   18b50:	strdeq	sp, [r0], -r4

00018b54 <flatcc_builder_append_vector@@Base>:
   18b54:	push	{fp, lr}
   18b58:	add	fp, sp, #4
   18b5c:	sub	sp, sp, #16
   18b60:	str	r0, [fp, #-8]
   18b64:	str	r1, [fp, #-12]
   18b68:	str	r2, [fp, #-16]
   18b6c:	ldr	r3, [fp, #-8]
   18b70:	ldr	r3, [r3, #32]
   18b74:	ldrh	r3, [r3, #14]
   18b78:	cmp	r3, #4
   18b7c:	beq	18ba0 <flatcc_builder_append_vector@@Base+0x4c>
   18b80:	ldr	r3, [pc, #124]	; 18c04 <flatcc_builder_append_vector@@Base+0xb0>
   18b84:	add	r3, pc, r3
   18b88:	ldr	r2, [pc, #120]	; 18c08 <flatcc_builder_append_vector@@Base+0xb4>
   18b8c:	ldr	r1, [pc, #120]	; 18c0c <flatcc_builder_append_vector@@Base+0xb8>
   18b90:	add	r1, pc, r1
   18b94:	ldr	r0, [pc, #116]	; 18c10 <flatcc_builder_append_vector@@Base+0xbc>
   18b98:	add	r0, pc, r0
   18b9c:	bl	12504 <__assert_fail@plt>
   18ba0:	ldr	r3, [fp, #-8]
   18ba4:	ldr	r3, [r3, #32]
   18ba8:	ldr	r3, [r3, #24]
   18bac:	mov	r2, r3
   18bb0:	ldr	r1, [fp, #-16]
   18bb4:	ldr	r0, [fp, #-8]
   18bb8:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   18bbc:	mov	r3, r0
   18bc0:	cmp	r3, #0
   18bc4:	beq	18bd0 <flatcc_builder_append_vector@@Base+0x7c>
   18bc8:	mov	r3, #0
   18bcc:	b	18bf8 <flatcc_builder_append_vector@@Base+0xa4>
   18bd0:	ldr	r3, [fp, #-8]
   18bd4:	ldr	r3, [r3, #32]
   18bd8:	ldr	r3, [r3, #16]
   18bdc:	ldr	r2, [fp, #-16]
   18be0:	mul	r3, r2, r3
   18be4:	mov	r2, r3
   18be8:	ldr	r1, [fp, #-12]
   18bec:	ldr	r0, [fp, #-8]
   18bf0:	bl	16880 <flatcc_builder_default_alloc@@Base+0x3e8>
   18bf4:	mov	r3, r0
   18bf8:	mov	r0, r3
   18bfc:	sub	sp, fp, #4
   18c00:	pop	{fp, pc}
   18c04:	andeq	sp, r0, r4, asr sp
   18c08:	muleq	r0, r3, r3
   18c0c:	ldrdeq	sp, [r0], -r4
   18c10:	andeq	sp, r0, r0, lsl r9

00018c14 <flatcc_builder_extend_offset_vector@@Base>:
   18c14:	push	{fp, lr}
   18c18:	add	fp, sp, #4
   18c1c:	sub	sp, sp, #8
   18c20:	str	r0, [fp, #-8]
   18c24:	str	r1, [fp, #-12]
   18c28:	mvn	r2, #-1073741824	; 0xc0000000
   18c2c:	ldr	r1, [fp, #-12]
   18c30:	ldr	r0, [fp, #-8]
   18c34:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   18c38:	mov	r3, r0
   18c3c:	cmp	r3, #0
   18c40:	beq	18c4c <flatcc_builder_extend_offset_vector@@Base+0x38>
   18c44:	mov	r3, #0
   18c48:	b	18c64 <flatcc_builder_extend_offset_vector@@Base+0x50>
   18c4c:	ldr	r3, [fp, #-12]
   18c50:	lsl	r3, r3, #2
   18c54:	mov	r1, r3
   18c58:	ldr	r0, [fp, #-8]
   18c5c:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   18c60:	mov	r3, r0
   18c64:	mov	r0, r3
   18c68:	sub	sp, fp, #4
   18c6c:	pop	{fp, pc}

00018c70 <flatcc_builder_offset_vector_push@@Base>:
   18c70:	push	{fp, lr}
   18c74:	add	fp, sp, #4
   18c78:	sub	sp, sp, #16
   18c7c:	str	r0, [fp, #-16]
   18c80:	str	r1, [fp, #-20]	; 0xffffffec
   18c84:	ldr	r3, [fp, #-16]
   18c88:	ldr	r3, [r3, #32]
   18c8c:	ldrh	r3, [r3, #14]
   18c90:	cmp	r3, #5
   18c94:	beq	18cb8 <flatcc_builder_offset_vector_push@@Base+0x48>
   18c98:	ldr	r3, [pc, #144]	; 18d30 <flatcc_builder_offset_vector_push@@Base+0xc0>
   18c9c:	add	r3, pc, r3
   18ca0:	ldr	r2, [pc, #140]	; 18d34 <flatcc_builder_offset_vector_push@@Base+0xc4>
   18ca4:	ldr	r1, [pc, #140]	; 18d38 <flatcc_builder_offset_vector_push@@Base+0xc8>
   18ca8:	add	r1, pc, r1
   18cac:	ldr	r0, [pc, #136]	; 18d3c <flatcc_builder_offset_vector_push@@Base+0xcc>
   18cb0:	add	r0, pc, r0
   18cb4:	bl	12504 <__assert_fail@plt>
   18cb8:	ldr	r3, [fp, #-16]
   18cbc:	ldr	r3, [r3, #32]
   18cc0:	ldr	r3, [r3, #20]
   18cc4:	cmn	r3, #-1073741823	; 0xc0000001
   18cc8:	bne	18cd4 <flatcc_builder_offset_vector_push@@Base+0x64>
   18ccc:	mov	r3, #0
   18cd0:	b	18d24 <flatcc_builder_offset_vector_push@@Base+0xb4>
   18cd4:	ldr	r3, [fp, #-16]
   18cd8:	ldr	r3, [r3, #32]
   18cdc:	ldr	r2, [fp, #-16]
   18ce0:	ldr	r2, [r2, #32]
   18ce4:	ldr	r2, [r2, #20]
   18ce8:	add	r2, r2, #1
   18cec:	str	r2, [r3, #20]
   18cf0:	mov	r1, #4
   18cf4:	ldr	r0, [fp, #-16]
   18cf8:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   18cfc:	str	r0, [fp, #-8]
   18d00:	ldr	r3, [fp, #-8]
   18d04:	cmp	r3, #0
   18d08:	bne	18d14 <flatcc_builder_offset_vector_push@@Base+0xa4>
   18d0c:	mov	r3, #0
   18d10:	b	18d24 <flatcc_builder_offset_vector_push@@Base+0xb4>
   18d14:	ldr	r3, [fp, #-8]
   18d18:	ldr	r2, [fp, #-20]	; 0xffffffec
   18d1c:	str	r2, [r3]
   18d20:	ldr	r3, [fp, #-8]
   18d24:	mov	r0, r3
   18d28:	sub	sp, fp, #4
   18d2c:	pop	{fp, pc}
   18d30:	andeq	sp, r0, ip, asr ip
   18d34:	andeq	r0, r0, r6, lsr #7
   18d38:			; <UNDEFINED> instruction: 0x0000d6bc
   18d3c:	andeq	sp, r0, r4, ror #16

00018d40 <flatcc_builder_append_offset_vector@@Base>:
   18d40:	push	{fp, lr}
   18d44:	add	fp, sp, #4
   18d48:	sub	sp, sp, #16
   18d4c:	str	r0, [fp, #-8]
   18d50:	str	r1, [fp, #-12]
   18d54:	str	r2, [fp, #-16]
   18d58:	ldr	r3, [fp, #-8]
   18d5c:	ldr	r3, [r3, #32]
   18d60:	ldrh	r3, [r3, #14]
   18d64:	cmp	r3, #5
   18d68:	beq	18d8c <flatcc_builder_append_offset_vector@@Base+0x4c>
   18d6c:	ldr	r3, [pc, #100]	; 18dd8 <flatcc_builder_append_offset_vector@@Base+0x98>
   18d70:	add	r3, pc, r3
   18d74:	mov	r2, #948	; 0x3b4
   18d78:	ldr	r1, [pc, #92]	; 18ddc <flatcc_builder_append_offset_vector@@Base+0x9c>
   18d7c:	add	r1, pc, r1
   18d80:	ldr	r0, [pc, #88]	; 18de0 <flatcc_builder_append_offset_vector@@Base+0xa0>
   18d84:	add	r0, pc, r0
   18d88:	bl	12504 <__assert_fail@plt>
   18d8c:	mvn	r2, #-1073741824	; 0xc0000000
   18d90:	ldr	r1, [fp, #-16]
   18d94:	ldr	r0, [fp, #-8]
   18d98:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   18d9c:	mov	r3, r0
   18da0:	cmp	r3, #0
   18da4:	beq	18db0 <flatcc_builder_append_offset_vector@@Base+0x70>
   18da8:	mov	r3, #0
   18dac:	b	18dcc <flatcc_builder_append_offset_vector@@Base+0x8c>
   18db0:	ldr	r3, [fp, #-16]
   18db4:	lsl	r3, r3, #2
   18db8:	mov	r2, r3
   18dbc:	ldr	r1, [fp, #-12]
   18dc0:	ldr	r0, [fp, #-8]
   18dc4:	bl	16880 <flatcc_builder_default_alloc@@Base+0x3e8>
   18dc8:	mov	r3, r0
   18dcc:	mov	r0, r3
   18dd0:	sub	sp, fp, #4
   18dd4:	pop	{fp, pc}
   18dd8:	andeq	sp, r0, ip, lsr #23
   18ddc:	andeq	sp, r0, r8, ror #11
   18de0:	muleq	r0, r0, r7

00018de4 <flatcc_builder_extend_string@@Base>:
   18de4:	push	{fp, lr}
   18de8:	add	fp, sp, #4
   18dec:	sub	sp, sp, #8
   18df0:	str	r0, [fp, #-8]
   18df4:	str	r1, [fp, #-12]
   18df8:	ldr	r3, [fp, #-8]
   18dfc:	ldr	r3, [r3, #32]
   18e00:	ldrh	r3, [r3, #14]
   18e04:	cmp	r3, #6
   18e08:	beq	18e2c <flatcc_builder_extend_string@@Base+0x48>
   18e0c:	ldr	r3, [pc, #88]	; 18e6c <flatcc_builder_extend_string@@Base+0x88>
   18e10:	add	r3, pc, r3
   18e14:	ldr	r2, [pc, #84]	; 18e70 <flatcc_builder_extend_string@@Base+0x8c>
   18e18:	ldr	r1, [pc, #84]	; 18e74 <flatcc_builder_extend_string@@Base+0x90>
   18e1c:	add	r1, pc, r1
   18e20:	ldr	r0, [pc, #80]	; 18e78 <flatcc_builder_extend_string@@Base+0x94>
   18e24:	add	r0, pc, r0
   18e28:	bl	12504 <__assert_fail@plt>
   18e2c:	mvn	r2, #0
   18e30:	ldr	r1, [fp, #-12]
   18e34:	ldr	r0, [fp, #-8]
   18e38:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   18e3c:	mov	r3, r0
   18e40:	cmp	r3, #0
   18e44:	beq	18e50 <flatcc_builder_extend_string@@Base+0x6c>
   18e48:	mov	r3, #0
   18e4c:	b	18e60 <flatcc_builder_extend_string@@Base+0x7c>
   18e50:	ldr	r1, [fp, #-12]
   18e54:	ldr	r0, [fp, #-8]
   18e58:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   18e5c:	mov	r3, r0
   18e60:	mov	r0, r3
   18e64:	sub	sp, fp, #4
   18e68:	pop	{fp, pc}
   18e6c:	andeq	sp, r0, r0, lsr fp
   18e70:			; <UNDEFINED> instruction: 0x000003bd
   18e74:	andeq	sp, r0, r8, asr #10
   18e78:	andeq	sp, r0, r4, lsr #14

00018e7c <flatcc_builder_append_string@@Base>:
   18e7c:	push	{fp, lr}
   18e80:	add	fp, sp, #4
   18e84:	sub	sp, sp, #16
   18e88:	str	r0, [fp, #-8]
   18e8c:	str	r1, [fp, #-12]
   18e90:	str	r2, [fp, #-16]
   18e94:	ldr	r3, [fp, #-8]
   18e98:	ldr	r3, [r3, #32]
   18e9c:	ldrh	r3, [r3, #14]
   18ea0:	cmp	r3, #6
   18ea4:	beq	18ec8 <flatcc_builder_append_string@@Base+0x4c>
   18ea8:	ldr	r3, [pc, #92]	; 18f0c <flatcc_builder_append_string@@Base+0x90>
   18eac:	add	r3, pc, r3
   18eb0:	ldr	r2, [pc, #88]	; 18f10 <flatcc_builder_append_string@@Base+0x94>
   18eb4:	ldr	r1, [pc, #88]	; 18f14 <flatcc_builder_append_string@@Base+0x98>
   18eb8:	add	r1, pc, r1
   18ebc:	ldr	r0, [pc, #84]	; 18f18 <flatcc_builder_append_string@@Base+0x9c>
   18ec0:	add	r0, pc, r0
   18ec4:	bl	12504 <__assert_fail@plt>
   18ec8:	mvn	r2, #0
   18ecc:	ldr	r1, [fp, #-16]
   18ed0:	ldr	r0, [fp, #-8]
   18ed4:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   18ed8:	mov	r3, r0
   18edc:	cmp	r3, #0
   18ee0:	beq	18eec <flatcc_builder_append_string@@Base+0x70>
   18ee4:	mov	r3, #0
   18ee8:	b	18f00 <flatcc_builder_append_string@@Base+0x84>
   18eec:	ldr	r2, [fp, #-16]
   18ef0:	ldr	r1, [fp, #-12]
   18ef4:	ldr	r0, [fp, #-8]
   18ef8:	bl	16880 <flatcc_builder_default_alloc@@Base+0x3e8>
   18efc:	mov	r3, r0
   18f00:	mov	r0, r3
   18f04:	sub	sp, fp, #4
   18f08:	pop	{fp, pc}
   18f0c:			; <UNDEFINED> instruction: 0x0000dab4
   18f10:	andeq	r0, r0, r6, asr #7
   18f14:	andeq	sp, r0, ip, lsr #9
   18f18:	andeq	sp, r0, r8, lsl #13

00018f1c <flatcc_builder_append_string_str@@Base>:
   18f1c:	push	{fp, lr}
   18f20:	add	fp, sp, #4
   18f24:	sub	sp, sp, #8
   18f28:	str	r0, [fp, #-8]
   18f2c:	str	r1, [fp, #-12]
   18f30:	ldr	r0, [fp, #-12]
   18f34:	bl	124b0 <strlen@plt>
   18f38:	mov	r3, r0
   18f3c:	mov	r2, r3
   18f40:	ldr	r1, [fp, #-12]
   18f44:	ldr	r0, [fp, #-8]
   18f48:	bl	18e7c <flatcc_builder_append_string@@Base>
   18f4c:	mov	r3, r0
   18f50:	mov	r0, r3
   18f54:	sub	sp, fp, #4
   18f58:	pop	{fp, pc}

00018f5c <flatcc_builder_append_string_strn@@Base>:
   18f5c:	push	{fp, lr}
   18f60:	add	fp, sp, #4
   18f64:	sub	sp, sp, #16
   18f68:	str	r0, [fp, #-8]
   18f6c:	str	r1, [fp, #-12]
   18f70:	str	r2, [fp, #-16]
   18f74:	ldr	r1, [fp, #-16]
   18f78:	ldr	r0, [fp, #-12]
   18f7c:	bl	16444 <main@@Base+0x1e4>
   18f80:	mov	r3, r0
   18f84:	mov	r2, r3
   18f88:	ldr	r1, [fp, #-12]
   18f8c:	ldr	r0, [fp, #-8]
   18f90:	bl	18e7c <flatcc_builder_append_string@@Base>
   18f94:	mov	r3, r0
   18f98:	mov	r0, r3
   18f9c:	sub	sp, fp, #4
   18fa0:	pop	{fp, pc}

00018fa4 <flatcc_builder_truncate_vector@@Base>:
   18fa4:	push	{fp, lr}
   18fa8:	add	fp, sp, #4
   18fac:	sub	sp, sp, #8
   18fb0:	str	r0, [fp, #-8]
   18fb4:	str	r1, [fp, #-12]
   18fb8:	ldr	r3, [fp, #-8]
   18fbc:	ldr	r3, [r3, #32]
   18fc0:	ldrh	r3, [r3, #14]
   18fc4:	cmp	r3, #4
   18fc8:	beq	18fec <flatcc_builder_truncate_vector@@Base+0x48>
   18fcc:	ldr	r3, [pc, #192]	; 19094 <flatcc_builder_truncate_vector@@Base+0xf0>
   18fd0:	add	r3, pc, r3
   18fd4:	ldr	r2, [pc, #188]	; 19098 <flatcc_builder_truncate_vector@@Base+0xf4>
   18fd8:	ldr	r1, [pc, #188]	; 1909c <flatcc_builder_truncate_vector@@Base+0xf8>
   18fdc:	add	r1, pc, r1
   18fe0:	ldr	r0, [pc, #184]	; 190a0 <flatcc_builder_truncate_vector@@Base+0xfc>
   18fe4:	add	r0, pc, r0
   18fe8:	bl	12504 <__assert_fail@plt>
   18fec:	ldr	r3, [fp, #-8]
   18ff0:	ldr	r3, [r3, #32]
   18ff4:	ldr	r2, [r3, #20]
   18ff8:	ldr	r3, [fp, #-12]
   18ffc:	cmp	r2, r3
   19000:	bcs	19044 <flatcc_builder_truncate_vector@@Base+0xa0>
   19004:	ldr	r3, [fp, #-8]
   19008:	ldr	r3, [r3, #32]
   1900c:	ldr	r2, [r3, #20]
   19010:	ldr	r3, [fp, #-12]
   19014:	cmp	r2, r3
   19018:	bcs	1903c <flatcc_builder_truncate_vector@@Base+0x98>
   1901c:	ldr	r3, [pc, #128]	; 190a4 <flatcc_builder_truncate_vector@@Base+0x100>
   19020:	add	r3, pc, r3
   19024:	ldr	r2, [pc, #124]	; 190a8 <flatcc_builder_truncate_vector@@Base+0x104>
   19028:	ldr	r1, [pc, #124]	; 190ac <flatcc_builder_truncate_vector@@Base+0x108>
   1902c:	add	r1, pc, r1
   19030:	ldr	r0, [pc, #120]	; 190b0 <flatcc_builder_truncate_vector@@Base+0x10c>
   19034:	add	r0, pc, r0
   19038:	bl	12504 <__assert_fail@plt>
   1903c:	mvn	r3, #0
   19040:	b	19088 <flatcc_builder_truncate_vector@@Base+0xe4>
   19044:	ldr	r3, [fp, #-8]
   19048:	ldr	r3, [r3, #32]
   1904c:	ldr	r2, [fp, #-8]
   19050:	ldr	r2, [r2, #32]
   19054:	ldr	r1, [r2, #20]
   19058:	ldr	r2, [fp, #-12]
   1905c:	sub	r2, r1, r2
   19060:	str	r2, [r3, #20]
   19064:	ldr	r3, [fp, #-8]
   19068:	ldr	r3, [r3, #32]
   1906c:	ldr	r3, [r3, #16]
   19070:	ldr	r2, [fp, #-12]
   19074:	mul	r3, r2, r3
   19078:	mov	r1, r3
   1907c:	ldr	r0, [fp, #-8]
   19080:	bl	16824 <flatcc_builder_default_alloc@@Base+0x38c>
   19084:	mov	r3, #0
   19088:	mov	r0, r3
   1908c:	sub	sp, fp, #4
   19090:	pop	{fp, pc}
   19094:			; <UNDEFINED> instruction: 0x0000d9b0
   19098:	ldrdeq	r0, [r0], -r9
   1909c:	andeq	sp, r0, r8, lsl #7
   190a0:	andeq	sp, r0, r4, asr #9
   190a4:	andeq	sp, r0, r0, ror #18
   190a8:	ldrdeq	r0, [r0], -sl
   190ac:	andeq	sp, r0, r8, lsr r3
   190b0:	andeq	sp, r0, r0, asr #10

000190b4 <flatcc_builder_truncate_offset_vector@@Base>:
   190b4:	push	{fp, lr}
   190b8:	add	fp, sp, #4
   190bc:	sub	sp, sp, #8
   190c0:	str	r0, [fp, #-8]
   190c4:	str	r1, [fp, #-12]
   190c8:	ldr	r3, [fp, #-8]
   190cc:	ldr	r3, [r3, #32]
   190d0:	ldrh	r3, [r3, #14]
   190d4:	cmp	r3, #5
   190d8:	beq	190fc <flatcc_builder_truncate_offset_vector@@Base+0x48>
   190dc:	ldr	r3, [pc, #192]	; 191a4 <flatcc_builder_truncate_offset_vector@@Base+0xf0>
   190e0:	add	r3, pc, r3
   190e4:	ldr	r2, [pc, #188]	; 191a8 <flatcc_builder_truncate_offset_vector@@Base+0xf4>
   190e8:	ldr	r1, [pc, #188]	; 191ac <flatcc_builder_truncate_offset_vector@@Base+0xf8>
   190ec:	add	r1, pc, r1
   190f0:	ldr	r0, [pc, #184]	; 191b0 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   190f4:	add	r0, pc, r0
   190f8:	bl	12504 <__assert_fail@plt>
   190fc:	ldr	r3, [fp, #-8]
   19100:	ldr	r3, [r3, #32]
   19104:	ldr	r2, [r3, #20]
   19108:	ldr	r3, [fp, #-12]
   1910c:	cmp	r2, r3
   19110:	bcs	19154 <flatcc_builder_truncate_offset_vector@@Base+0xa0>
   19114:	ldr	r3, [fp, #-8]
   19118:	ldr	r3, [r3, #32]
   1911c:	ldr	r2, [r3, #20]
   19120:	ldr	r3, [fp, #-12]
   19124:	cmp	r2, r3
   19128:	bcs	1914c <flatcc_builder_truncate_offset_vector@@Base+0x98>
   1912c:	ldr	r3, [pc, #128]	; 191b4 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   19130:	add	r3, pc, r3
   19134:	ldr	r2, [pc, #124]	; 191b8 <flatcc_builder_truncate_offset_vector@@Base+0x104>
   19138:	ldr	r1, [pc, #124]	; 191bc <flatcc_builder_truncate_offset_vector@@Base+0x108>
   1913c:	add	r1, pc, r1
   19140:	ldr	r0, [pc, #120]	; 191c0 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   19144:	add	r0, pc, r0
   19148:	bl	12504 <__assert_fail@plt>
   1914c:	mvn	r3, #0
   19150:	b	19198 <flatcc_builder_truncate_offset_vector@@Base+0xe4>
   19154:	ldr	r3, [fp, #-8]
   19158:	ldr	r3, [r3, #32]
   1915c:	ldr	r2, [fp, #-8]
   19160:	ldr	r2, [r2, #32]
   19164:	ldr	r1, [r2, #20]
   19168:	ldr	r2, [fp, #-12]
   1916c:	sub	r2, r1, r2
   19170:	str	r2, [r3, #20]
   19174:	ldr	r3, [fp, #-8]
   19178:	ldr	r3, [r3, #32]
   1917c:	ldr	r3, [r3, #16]
   19180:	ldr	r2, [fp, #-12]
   19184:	mul	r3, r2, r3
   19188:	mov	r1, r3
   1918c:	ldr	r0, [fp, #-8]
   19190:	bl	16824 <flatcc_builder_default_alloc@@Base+0x38c>
   19194:	mov	r3, #0
   19198:	mov	r0, r3
   1919c:	sub	sp, fp, #4
   191a0:	pop	{fp, pc}
   191a4:	andeq	sp, r0, r0, asr #17
   191a8:	andeq	r0, r0, r2, ror #7
   191ac:	andeq	sp, r0, r8, ror r2
   191b0:	andeq	sp, r0, r0, lsr #8
   191b4:	andeq	sp, r0, r0, ror r8
   191b8:	andeq	r0, r0, r3, ror #7
   191bc:	andeq	sp, r0, r8, lsr #4
   191c0:	andeq	sp, r0, r4, asr r4

000191c4 <flatcc_builder_truncate_string@@Base>:
   191c4:	push	{fp, lr}
   191c8:	add	fp, sp, #4
   191cc:	sub	sp, sp, #8
   191d0:	str	r0, [fp, #-8]
   191d4:	str	r1, [fp, #-12]
   191d8:	ldr	r3, [fp, #-8]
   191dc:	ldr	r3, [r3, #32]
   191e0:	ldrh	r3, [r3, #14]
   191e4:	cmp	r3, #6
   191e8:	beq	1920c <flatcc_builder_truncate_string@@Base+0x48>
   191ec:	ldr	r3, [pc, #172]	; 192a0 <flatcc_builder_truncate_string@@Base+0xdc>
   191f0:	add	r3, pc, r3
   191f4:	ldr	r2, [pc, #168]	; 192a4 <flatcc_builder_truncate_string@@Base+0xe0>
   191f8:	ldr	r1, [pc, #168]	; 192a8 <flatcc_builder_truncate_string@@Base+0xe4>
   191fc:	add	r1, pc, r1
   19200:	ldr	r0, [pc, #164]	; 192ac <flatcc_builder_truncate_string@@Base+0xe8>
   19204:	add	r0, pc, r0
   19208:	bl	12504 <__assert_fail@plt>
   1920c:	ldr	r3, [fp, #-8]
   19210:	ldr	r3, [r3, #32]
   19214:	ldr	r2, [r3, #20]
   19218:	ldr	r3, [fp, #-12]
   1921c:	cmp	r2, r3
   19220:	bcs	19264 <flatcc_builder_truncate_string@@Base+0xa0>
   19224:	ldr	r3, [fp, #-8]
   19228:	ldr	r3, [r3, #32]
   1922c:	ldr	r2, [r3, #20]
   19230:	ldr	r3, [fp, #-12]
   19234:	cmp	r2, r3
   19238:	bcs	1925c <flatcc_builder_truncate_string@@Base+0x98>
   1923c:	ldr	r3, [pc, #108]	; 192b0 <flatcc_builder_truncate_string@@Base+0xec>
   19240:	add	r3, pc, r3
   19244:	mov	r2, #1004	; 0x3ec
   19248:	ldr	r1, [pc, #100]	; 192b4 <flatcc_builder_truncate_string@@Base+0xf0>
   1924c:	add	r1, pc, r1
   19250:	ldr	r0, [pc, #96]	; 192b8 <flatcc_builder_truncate_string@@Base+0xf4>
   19254:	add	r0, pc, r0
   19258:	bl	12504 <__assert_fail@plt>
   1925c:	mvn	r3, #0
   19260:	b	19294 <flatcc_builder_truncate_string@@Base+0xd0>
   19264:	ldr	r3, [fp, #-8]
   19268:	ldr	r3, [r3, #32]
   1926c:	ldr	r2, [fp, #-8]
   19270:	ldr	r2, [r2, #32]
   19274:	ldr	r1, [r2, #20]
   19278:	ldr	r2, [fp, #-12]
   1927c:	sub	r2, r1, r2
   19280:	str	r2, [r3, #20]
   19284:	ldr	r1, [fp, #-12]
   19288:	ldr	r0, [fp, #-8]
   1928c:	bl	16824 <flatcc_builder_default_alloc@@Base+0x38c>
   19290:	mov	r3, #0
   19294:	mov	r0, r3
   19298:	sub	sp, fp, #4
   1929c:	pop	{fp, pc}
   192a0:	ldrdeq	sp, [r0], -r8
   192a4:	andeq	r0, r0, fp, ror #7
   192a8:	andeq	sp, r0, r8, ror #2
   192ac:	andeq	sp, r0, r4, asr #6
   192b0:	andeq	sp, r0, r8, lsl #15
   192b4:	andeq	sp, r0, r8, lsl r1
   192b8:	andeq	sp, r0, r0, lsl #7

000192bc <flatcc_builder_start_vector@@Base>:
   192bc:	push	{fp, lr}
   192c0:	add	fp, sp, #4
   192c4:	sub	sp, sp, #16
   192c8:	str	r0, [fp, #-8]
   192cc:	str	r1, [fp, #-12]
   192d0:	str	r3, [fp, #-20]	; 0xffffffec
   192d4:	strh	r2, [fp, #-14]
   192d8:	sub	r3, fp, #14
   192dc:	mov	r1, #4
   192e0:	mov	r0, r3
   192e4:	bl	1739c <flatcc_builder_clear@@Base+0xf8>
   192e8:	ldrh	r3, [fp, #-14]
   192ec:	mov	r1, r3
   192f0:	ldr	r0, [fp, #-8]
   192f4:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   192f8:	mov	r3, r0
   192fc:	cmp	r3, #0
   19300:	beq	1930c <flatcc_builder_start_vector@@Base+0x50>
   19304:	mvn	r3, #0
   19308:	b	1935c <flatcc_builder_start_vector@@Base+0xa0>
   1930c:	ldr	r3, [fp, #-8]
   19310:	ldr	r3, [r3, #32]
   19314:	ldr	r2, [fp, #-12]
   19318:	str	r2, [r3, #16]
   1931c:	ldr	r3, [fp, #-8]
   19320:	ldr	r3, [r3, #32]
   19324:	mov	r2, #0
   19328:	str	r2, [r3, #20]
   1932c:	ldr	r3, [fp, #-8]
   19330:	ldr	r3, [r3, #32]
   19334:	ldr	r2, [fp, #-20]	; 0xffffffec
   19338:	str	r2, [r3, #24]
   1933c:	ldr	r3, [fp, #-8]
   19340:	ldr	r3, [r3, #32]
   19344:	mov	r2, #4
   19348:	strh	r2, [r3, #14]
   1934c:	mvn	r1, #3
   19350:	ldr	r0, [fp, #-8]
   19354:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   19358:	mov	r3, #0
   1935c:	mov	r0, r3
   19360:	sub	sp, fp, #4
   19364:	pop	{fp, pc}

00019368 <flatcc_builder_start_offset_vector@@Base>:
   19368:	push	{fp, lr}
   1936c:	add	fp, sp, #4
   19370:	sub	sp, sp, #8
   19374:	str	r0, [fp, #-8]
   19378:	mov	r1, #4
   1937c:	ldr	r0, [fp, #-8]
   19380:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19384:	mov	r3, r0
   19388:	cmp	r3, #0
   1938c:	beq	19398 <flatcc_builder_start_offset_vector@@Base+0x30>
   19390:	mvn	r3, #0
   19394:	b	193d8 <flatcc_builder_start_offset_vector@@Base+0x70>
   19398:	ldr	r3, [fp, #-8]
   1939c:	ldr	r3, [r3, #32]
   193a0:	mov	r2, #4
   193a4:	str	r2, [r3, #16]
   193a8:	ldr	r3, [fp, #-8]
   193ac:	ldr	r3, [r3, #32]
   193b0:	mov	r2, #0
   193b4:	str	r2, [r3, #20]
   193b8:	ldr	r3, [fp, #-8]
   193bc:	ldr	r3, [r3, #32]
   193c0:	mov	r2, #5
   193c4:	strh	r2, [r3, #14]
   193c8:	mvn	r1, #3
   193cc:	ldr	r0, [fp, #-8]
   193d0:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   193d4:	mov	r3, #0
   193d8:	mov	r0, r3
   193dc:	sub	sp, fp, #4
   193e0:	pop	{fp, pc}

000193e4 <flatcc_builder_create_offset_vector@@Base>:
   193e4:	push	{fp, lr}
   193e8:	add	fp, sp, #4
   193ec:	sub	sp, sp, #24
   193f0:	str	r0, [fp, #-16]
   193f4:	str	r1, [fp, #-20]	; 0xffffffec
   193f8:	str	r2, [fp, #-24]	; 0xffffffe8
   193fc:	ldr	r0, [fp, #-16]
   19400:	bl	19368 <flatcc_builder_start_offset_vector@@Base>
   19404:	mov	r3, r0
   19408:	cmp	r3, #0
   1940c:	beq	19418 <flatcc_builder_create_offset_vector@@Base+0x34>
   19410:	mov	r3, #0
   19414:	b	19460 <flatcc_builder_create_offset_vector@@Base+0x7c>
   19418:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1941c:	ldr	r0, [fp, #-16]
   19420:	bl	18c14 <flatcc_builder_extend_offset_vector@@Base>
   19424:	str	r0, [fp, #-8]
   19428:	ldr	r3, [fp, #-8]
   1942c:	cmp	r3, #0
   19430:	bne	1943c <flatcc_builder_create_offset_vector@@Base+0x58>
   19434:	mov	r3, #0
   19438:	b	19460 <flatcc_builder_create_offset_vector@@Base+0x7c>
   1943c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19440:	lsl	r3, r3, #2
   19444:	mov	r2, r3
   19448:	ldr	r1, [fp, #-20]	; 0xffffffec
   1944c:	ldr	r0, [fp, #-8]
   19450:	bl	1245c <memcpy@plt>
   19454:	ldr	r0, [fp, #-16]
   19458:	bl	1a9bc <flatcc_builder_end_offset_vector@@Base>
   1945c:	mov	r3, r0
   19460:	mov	r0, r3
   19464:	sub	sp, fp, #4
   19468:	pop	{fp, pc}

0001946c <flatcc_builder_start_string@@Base>:
   1946c:	push	{fp, lr}
   19470:	add	fp, sp, #4
   19474:	sub	sp, sp, #8
   19478:	str	r0, [fp, #-8]
   1947c:	mov	r1, #1
   19480:	ldr	r0, [fp, #-8]
   19484:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19488:	mov	r3, r0
   1948c:	cmp	r3, #0
   19490:	beq	1949c <flatcc_builder_start_string@@Base+0x30>
   19494:	mvn	r3, #0
   19498:	b	194dc <flatcc_builder_start_string@@Base+0x70>
   1949c:	ldr	r3, [fp, #-8]
   194a0:	ldr	r3, [r3, #32]
   194a4:	mov	r2, #1
   194a8:	str	r2, [r3, #16]
   194ac:	ldr	r3, [fp, #-8]
   194b0:	ldr	r3, [r3, #32]
   194b4:	mov	r2, #0
   194b8:	str	r2, [r3, #20]
   194bc:	ldr	r3, [fp, #-8]
   194c0:	ldr	r3, [r3, #32]
   194c4:	mov	r2, #6
   194c8:	strh	r2, [r3, #14]
   194cc:	mvn	r1, #3
   194d0:	ldr	r0, [fp, #-8]
   194d4:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   194d8:	mov	r3, #0
   194dc:	mov	r0, r3
   194e0:	sub	sp, fp, #4
   194e4:	pop	{fp, pc}

000194e8 <flatcc_builder_reserve_table@@Base>:
   194e8:	push	{fp, lr}
   194ec:	add	fp, sp, #4
   194f0:	sub	sp, sp, #8
   194f4:	str	r0, [fp, #-8]
   194f8:	str	r1, [fp, #-12]
   194fc:	ldr	r3, [fp, #-12]
   19500:	cmp	r3, #0
   19504:	bge	19528 <flatcc_builder_reserve_table@@Base+0x40>
   19508:	ldr	r3, [pc, #52]	; 19544 <flatcc_builder_reserve_table@@Base+0x5c>
   1950c:	add	r3, pc, r3
   19510:	ldr	r2, [pc, #48]	; 19548 <flatcc_builder_reserve_table@@Base+0x60>
   19514:	ldr	r1, [pc, #48]	; 1954c <flatcc_builder_reserve_table@@Base+0x64>
   19518:	add	r1, pc, r1
   1951c:	ldr	r0, [pc, #44]	; 19550 <flatcc_builder_reserve_table@@Base+0x68>
   19520:	add	r0, pc, r0
   19524:	bl	12504 <__assert_fail@plt>
   19528:	ldr	r1, [fp, #-12]
   1952c:	ldr	r0, [fp, #-8]
   19530:	bl	16bd0 <flatcc_builder_default_alloc@@Base+0x738>
   19534:	mov	r3, r0
   19538:	mov	r0, r3
   1953c:	sub	sp, fp, #4
   19540:	pop	{fp, pc}
   19544:	ldrdeq	sp, [r0], -ip
   19548:	andeq	r0, r0, r9, lsr #8
   1954c:	andeq	ip, r0, ip, asr #28
   19550:	ldrdeq	sp, [r0], -r8

00019554 <flatcc_builder_start_table@@Base>:
   19554:	push	{fp, lr}
   19558:	add	fp, sp, #4
   1955c:	sub	sp, sp, #8
   19560:	str	r0, [fp, #-8]
   19564:	str	r1, [fp, #-12]
   19568:	mov	r1, #4
   1956c:	ldr	r0, [fp, #-8]
   19570:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   19574:	mov	r3, r0
   19578:	cmp	r3, #0
   1957c:	beq	19588 <flatcc_builder_start_table@@Base+0x34>
   19580:	mvn	r3, #0
   19584:	b	1965c <flatcc_builder_start_table@@Base+0x108>
   19588:	ldr	r3, [fp, #-8]
   1958c:	ldr	r3, [r3, #32]
   19590:	ldr	r2, [fp, #-8]
   19594:	ldr	r2, [r2, #4]
   19598:	mov	r1, r2
   1959c:	ldr	r2, [fp, #-8]
   195a0:	ldr	r2, [r2, #52]	; 0x34
   195a4:	sub	r2, r1, r2
   195a8:	str	r2, [r3, #16]
   195ac:	ldr	r3, [fp, #-8]
   195b0:	ldr	r3, [r3, #32]
   195b4:	ldr	r2, [fp, #-8]
   195b8:	ldr	r2, [r2]
   195bc:	mov	r1, r2
   195c0:	ldr	r2, [fp, #-8]
   195c4:	ldr	r2, [r2, #76]	; 0x4c
   195c8:	sub	r2, r1, r2
   195cc:	str	r2, [r3, #20]
   195d0:	ldr	r3, [fp, #-8]
   195d4:	ldr	r3, [r3, #32]
   195d8:	ldr	r2, [fp, #-8]
   195dc:	ldr	r2, [r2, #12]
   195e0:	str	r2, [r3, #24]
   195e4:	ldr	r3, [fp, #-8]
   195e8:	ldr	r3, [r3, #32]
   195ec:	ldr	r2, [fp, #-8]
   195f0:	ldrh	r2, [r2, #8]
   195f4:	strh	r2, [r3, #28]
   195f8:	ldr	r3, [fp, #-8]
   195fc:	mov	r2, #0
   19600:	str	r2, [r3, #12]
   19604:	ldr	r3, [fp, #-8]
   19608:	ldr	r2, [pc, #88]	; 19668 <flatcc_builder_start_table@@Base+0x114>
   1960c:	str	r2, [r3, #12]
   19610:	ldr	r3, [fp, #-8]
   19614:	mov	r2, #0
   19618:	strh	r2, [r3, #8]
   1961c:	ldr	r3, [fp, #-8]
   19620:	ldr	r3, [r3, #32]
   19624:	mov	r2, #3
   19628:	strh	r2, [r3, #14]
   1962c:	ldr	r1, [fp, #-12]
   19630:	ldr	r0, [fp, #-8]
   19634:	bl	16bd0 <flatcc_builder_default_alloc@@Base+0x738>
   19638:	mov	r3, r0
   1963c:	cmp	r3, #0
   19640:	beq	1964c <flatcc_builder_start_table@@Base+0xf8>
   19644:	mvn	r3, #0
   19648:	b	1965c <flatcc_builder_start_table@@Base+0x108>
   1964c:	ldr	r1, [pc, #24]	; 1966c <flatcc_builder_start_table@@Base+0x118>
   19650:	ldr	r0, [fp, #-8]
   19654:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   19658:	mov	r3, #0
   1965c:	mov	r0, r3
   19660:	sub	sp, fp, #4
   19664:	pop	{fp, pc}
   19668:	svccs	0x00693b52
   1966c:	strdeq	pc, [r0], -ip

00019670 <flatcc_builder_create_vtable@@Base>:
   19670:	push	{fp, lr}
   19674:	add	fp, sp, #4
   19678:	sub	sp, sp, #96	; 0x60
   1967c:	str	r0, [fp, #-88]	; 0xffffffa8
   19680:	str	r1, [fp, #-92]	; 0xffffffa4
   19684:	mov	r3, r2
   19688:	strh	r3, [fp, #-94]	; 0xffffffa2
   1968c:	mov	r3, #0
   19690:	str	r3, [fp, #-80]	; 0xffffffb0
   19694:	mov	r3, #0
   19698:	str	r3, [fp, #-76]	; 0xffffffb4
   1969c:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   196a0:	cmp	r3, #0
   196a4:	beq	196fc <flatcc_builder_create_vtable@@Base+0x8c>
   196a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   196ac:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   196b0:	add	r3, r2, r3
   196b4:	str	r3, [fp, #-80]	; 0xffffffb0
   196b8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   196bc:	add	r3, r3, #1
   196c0:	lsl	r3, r3, #3
   196c4:	sub	r2, fp, #4
   196c8:	add	r3, r2, r3
   196cc:	ldr	r2, [fp, #-92]	; 0xffffffa4
   196d0:	str	r2, [r3, #-76]	; 0xffffffb4
   196d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   196d8:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   196dc:	add	r3, r3, #1
   196e0:	lsl	r3, r3, #3
   196e4:	sub	r1, fp, #4
   196e8:	add	r3, r1, r3
   196ec:	str	r2, [r3, #-72]	; 0xffffffb8
   196f0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   196f4:	add	r3, r3, #1
   196f8:	str	r3, [fp, #-76]	; 0xffffffb4
   196fc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19700:	ldr	r3, [r3, #152]	; 0x98
   19704:	cmp	r3, #0
   19708:	bne	19744 <flatcc_builder_create_vtable@@Base+0xd4>
   1970c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19710:	ldr	r3, [r3, #180]	; 0xb4
   19714:	cmp	r3, #0
   19718:	bne	19744 <flatcc_builder_create_vtable@@Base+0xd4>
   1971c:	sub	r3, fp, #80	; 0x50
   19720:	mov	r1, r3
   19724:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19728:	bl	17b18 <flatcc_builder_get_user_frame_ptr@@Base+0x464>
   1972c:	str	r0, [fp, #-8]
   19730:	ldr	r3, [fp, #-8]
   19734:	cmp	r3, #0
   19738:	bne	19778 <flatcc_builder_create_vtable@@Base+0x108>
   1973c:	mov	r3, #0
   19740:	b	1977c <flatcc_builder_create_vtable@@Base+0x10c>
   19744:	sub	r3, fp, #80	; 0x50
   19748:	mov	r1, r3
   1974c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19750:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   19754:	str	r0, [fp, #-8]
   19758:	ldr	r3, [fp, #-8]
   1975c:	cmp	r3, #0
   19760:	bne	1976c <flatcc_builder_create_vtable@@Base+0xfc>
   19764:	mov	r3, #0
   19768:	b	1977c <flatcc_builder_create_vtable@@Base+0x10c>
   1976c:	ldr	r3, [fp, #-8]
   19770:	add	r3, r3, #1
   19774:	str	r3, [fp, #-8]
   19778:	ldr	r3, [fp, #-8]
   1977c:	mov	r0, r3
   19780:	sub	sp, fp, #4
   19784:	pop	{fp, pc}

00019788 <flatcc_builder_create_cached_vtable@@Base>:
   19788:	push	{fp, lr}
   1978c:	add	fp, sp, #4
   19790:	sub	sp, sp, #48	; 0x30
   19794:	str	r0, [fp, #-32]	; 0xffffffe0
   19798:	str	r1, [fp, #-36]	; 0xffffffdc
   1979c:	str	r3, [fp, #-44]	; 0xffffffd4
   197a0:	strh	r2, [fp, #-38]	; 0xffffffda
   197a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   197a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   197ac:	bl	16e3c <flatcc_builder_default_alloc@@Base+0x9a4>
   197b0:	str	r0, [fp, #-20]	; 0xffffffec
   197b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   197b8:	cmp	r3, #0
   197bc:	bne	197c8 <flatcc_builder_create_cached_vtable@@Base+0x40>
   197c0:	mov	r3, #0
   197c4:	b	19a8c <flatcc_builder_create_cached_vtable@@Base+0x304>
   197c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   197cc:	str	r3, [fp, #-12]
   197d0:	ldr	r3, [fp, #-12]
   197d4:	ldr	r3, [r3]
   197d8:	str	r3, [fp, #-16]
   197dc:	mov	r3, #0
   197e0:	str	r3, [fp, #-8]
   197e4:	b	198e8 <flatcc_builder_create_cached_vtable@@Base+0x160>
   197e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   197ec:	ldr	r2, [r3, #100]	; 0x64
   197f0:	ldr	r3, [fp, #-16]
   197f4:	add	r3, r2, r3
   197f8:	str	r3, [fp, #-24]	; 0xffffffe8
   197fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19800:	ldr	r2, [r3, #68]	; 0x44
   19804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19808:	ldr	r3, [r3, #8]
   1980c:	add	r3, r2, r3
   19810:	str	r3, [fp, #-28]	; 0xffffffe4
   19814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19818:	ldrh	r3, [r3]
   1981c:	ldrh	r2, [fp, #-38]	; 0xffffffda
   19820:	cmp	r2, r3
   19824:	bne	19848 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   19828:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1982c:	mov	r2, r3
   19830:	ldr	r1, [fp, #-28]	; 0xffffffe4
   19834:	ldr	r0, [fp, #-36]	; 0xffffffdc
   19838:	bl	12468 <memcmp@plt>
   1983c:	mov	r3, r0
   19840:	cmp	r3, #0
   19844:	beq	19864 <flatcc_builder_create_cached_vtable@@Base+0xdc>
   19848:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1984c:	add	r3, r3, #12
   19850:	str	r3, [fp, #-12]
   19854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19858:	ldr	r3, [r3, #12]
   1985c:	str	r3, [fp, #-16]
   19860:	b	198e8 <flatcc_builder_create_cached_vtable@@Base+0x160>
   19864:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19868:	ldr	r2, [r3, #4]
   1986c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19870:	ldr	r3, [r3, #152]	; 0x98
   19874:	cmp	r2, r3
   19878:	beq	198a0 <flatcc_builder_create_cached_vtable@@Base+0x118>
   1987c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19880:	str	r3, [fp, #-8]
   19884:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19888:	add	r3, r3, #12
   1988c:	str	r3, [fp, #-12]
   19890:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19894:	ldr	r3, [r3, #12]
   19898:	str	r3, [fp, #-16]
   1989c:	b	198e8 <flatcc_builder_create_cached_vtable@@Base+0x160>
   198a0:	ldr	r2, [fp, #-12]
   198a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   198a8:	cmp	r2, r3
   198ac:	beq	198dc <flatcc_builder_create_cached_vtable@@Base+0x154>
   198b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   198b4:	ldr	r2, [r3, #12]
   198b8:	ldr	r3, [fp, #-12]
   198bc:	str	r2, [r3]
   198c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   198c4:	ldr	r2, [r3]
   198c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   198cc:	str	r2, [r3, #12]
   198d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   198d4:	ldr	r2, [fp, #-16]
   198d8:	str	r2, [r3]
   198dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   198e0:	ldr	r3, [r3]
   198e4:	b	19a8c <flatcc_builder_create_cached_vtable@@Base+0x304>
   198e8:	ldr	r3, [fp, #-16]
   198ec:	cmp	r3, #0
   198f0:	bne	197e8 <flatcc_builder_create_cached_vtable@@Base+0x60>
   198f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   198f8:	ldr	r2, [r3, #124]	; 0x7c
   198fc:	mov	r3, #0
   19900:	str	r3, [sp]
   19904:	mov	r3, #16
   19908:	mov	r1, #6
   1990c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19910:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   19914:	str	r0, [fp, #-24]	; 0xffffffe8
   19918:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1991c:	cmp	r3, #0
   19920:	bne	1992c <flatcc_builder_create_cached_vtable@@Base+0x1a4>
   19924:	mov	r3, #0
   19928:	b	19a8c <flatcc_builder_create_cached_vtable@@Base+0x304>
   1992c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19930:	ldr	r3, [r3, #124]	; 0x7c
   19934:	str	r3, [fp, #-16]
   19938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1993c:	ldr	r3, [r3, #124]	; 0x7c
   19940:	add	r2, r3, #16
   19944:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19948:	str	r2, [r3, #124]	; 0x7c
   1994c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19950:	ldr	r2, [r3, #152]	; 0x98
   19954:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19958:	str	r2, [r3, #4]
   1995c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19960:	ldr	r2, [r3]
   19964:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19968:	str	r2, [r3, #12]
   1996c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19970:	ldr	r2, [fp, #-16]
   19974:	str	r2, [r3]
   19978:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1997c:	mov	r2, r3
   19980:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19984:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19988:	bl	19670 <flatcc_builder_create_vtable@@Base>
   1998c:	mov	r2, r0
   19990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19994:	str	r2, [r3]
   19998:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1999c:	ldr	r3, [r3]
   199a0:	cmp	r3, #0
   199a4:	bne	199b0 <flatcc_builder_create_cached_vtable@@Base+0x228>
   199a8:	mov	r3, #0
   199ac:	b	19a8c <flatcc_builder_create_cached_vtable@@Base+0x304>
   199b0:	ldr	r3, [fp, #-8]
   199b4:	cmp	r3, #0
   199b8:	beq	199d0 <flatcc_builder_create_cached_vtable@@Base+0x248>
   199bc:	ldr	r3, [fp, #-8]
   199c0:	ldr	r2, [r3, #8]
   199c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   199c8:	str	r2, [r3, #8]
   199cc:	b	19a84 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   199d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199d4:	ldr	r3, [r3, #172]	; 0xac
   199d8:	cmp	r3, #0
   199dc:	beq	19a0c <flatcc_builder_create_cached_vtable@@Base+0x284>
   199e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199e4:	ldr	r2, [r3, #172]	; 0xac
   199e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   199ec:	ldr	r1, [r3, #120]	; 0x78
   199f0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   199f4:	add	r3, r1, r3
   199f8:	cmp	r2, r3
   199fc:	bcs	19a0c <flatcc_builder_create_cached_vtable@@Base+0x284>
   19a00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a04:	bl	16eb4 <flatcc_builder_flush_vtable_cache@@Base>
   19a08:	b	19a84 <flatcc_builder_create_cached_vtable@@Base+0x2fc>
   19a0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a10:	ldr	r2, [r3, #120]	; 0x78
   19a14:	ldrh	r1, [fp, #-38]	; 0xffffffda
   19a18:	mov	r3, #0
   19a1c:	str	r3, [sp]
   19a20:	mov	r3, r1
   19a24:	mov	r1, #2
   19a28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a2c:	bl	16af8 <flatcc_builder_default_alloc@@Base+0x660>
   19a30:	str	r0, [fp, #-28]	; 0xffffffe4
   19a34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19a38:	cmp	r3, #0
   19a3c:	bne	19a48 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
   19a40:	mvn	r3, #0
   19a44:	b	19a8c <flatcc_builder_create_cached_vtable@@Base+0x304>
   19a48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a4c:	ldr	r2, [r3, #120]	; 0x78
   19a50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a54:	str	r2, [r3, #8]
   19a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a5c:	ldr	r2, [r3, #120]	; 0x78
   19a60:	ldrh	r3, [fp, #-38]	; 0xffffffda
   19a64:	add	r2, r2, r3
   19a68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19a6c:	str	r2, [r3, #120]	; 0x78
   19a70:	ldrh	r3, [fp, #-38]	; 0xffffffda
   19a74:	mov	r2, r3
   19a78:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19a7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   19a80:	bl	1245c <memcpy@plt>
   19a84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19a88:	ldr	r3, [r3]
   19a8c:	mov	r0, r3
   19a90:	sub	sp, fp, #4
   19a94:	pop	{fp, pc}

00019a98 <flatcc_builder_create_table@@Base>:
   19a98:	push	{r4, fp, lr}
   19a9c:	add	fp, sp, #8
   19aa0:	sub	sp, sp, #124	; 0x7c
   19aa4:	str	r0, [fp, #-120]	; 0xffffff88
   19aa8:	str	r1, [fp, #-124]	; 0xffffff84
   19aac:	str	r2, [fp, #-128]	; 0xffffff80
   19ab0:	strh	r3, [fp, #-130]	; 0xffffff7e
   19ab4:	ldr	r4, [pc, #728]	; 19d94 <flatcc_builder_create_table@@Base+0x2fc>
   19ab8:	add	r4, pc, r4
   19abc:	ldr	r3, [fp, #8]
   19ac0:	cmp	r3, #0
   19ac4:	bge	19ae8 <flatcc_builder_create_table@@Base+0x50>
   19ac8:	ldr	r3, [pc, #712]	; 19d98 <flatcc_builder_create_table@@Base+0x300>
   19acc:	add	r3, pc, r3
   19ad0:	ldr	r2, [pc, #708]	; 19d9c <flatcc_builder_create_table@@Base+0x304>
   19ad4:	ldr	r1, [pc, #708]	; 19da0 <flatcc_builder_create_table@@Base+0x308>
   19ad8:	add	r1, pc, r1
   19adc:	ldr	r0, [pc, #704]	; 19da4 <flatcc_builder_create_table@@Base+0x30c>
   19ae0:	add	r0, pc, r0
   19ae4:	bl	12504 <__assert_fail@plt>
   19ae8:	ldr	r3, [fp, #12]
   19aec:	and	r3, r3, #1
   19af0:	cmp	r3, #0
   19af4:	bne	19b18 <flatcc_builder_create_table@@Base+0x80>
   19af8:	ldr	r3, [pc, #680]	; 19da8 <flatcc_builder_create_table@@Base+0x310>
   19afc:	add	r3, pc, r3
   19b00:	ldr	r2, [pc, #676]	; 19dac <flatcc_builder_create_table@@Base+0x314>
   19b04:	ldr	r1, [pc, #676]	; 19db0 <flatcc_builder_create_table@@Base+0x318>
   19b08:	add	r1, pc, r1
   19b0c:	ldr	r0, [pc, #672]	; 19db4 <flatcc_builder_create_table@@Base+0x31c>
   19b10:	add	r0, pc, r0
   19b14:	bl	12504 <__assert_fail@plt>
   19b18:	sub	r3, fp, #130	; 0x82
   19b1c:	mov	r1, #4
   19b20:	mov	r0, r3
   19b24:	bl	1739c <flatcc_builder_clear@@Base+0xf8>
   19b28:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   19b2c:	mov	r1, r3
   19b30:	ldr	r0, [fp, #-120]	; 0xffffff88
   19b34:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   19b38:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   19b3c:	mov	r2, r3
   19b40:	ldr	r1, [fp, #-128]	; 0xffffff80
   19b44:	ldr	r0, [fp, #-120]	; 0xffffff88
   19b48:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   19b4c:	str	r0, [fp, #-20]	; 0xffffffec
   19b50:	ldr	r3, [fp, #-120]	; 0xffffff88
   19b54:	ldr	r3, [r3, #136]	; 0x88
   19b58:	mov	r1, r3
   19b5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b60:	ldr	r3, [fp, #-128]	; 0xffffff80
   19b64:	add	r3, r2, r3
   19b68:	sub	r3, r1, r3
   19b6c:	sub	r3, r3, #4
   19b70:	str	r3, [fp, #-24]	; 0xffffffe8
   19b74:	ldr	r3, [fp, #12]
   19b78:	sub	r3, r3, #1
   19b7c:	str	r3, [fp, #-28]	; 0xffffffe4
   19b80:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19b84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19b88:	sub	r3, r2, r3
   19b8c:	str	r3, [fp, #-32]	; 0xffffffe0
   19b90:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19b94:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19b98:	sub	r2, r2, r3
   19b9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19ba0:	cmp	r2, r3
   19ba4:	beq	19bb0 <flatcc_builder_create_table@@Base+0x118>
   19ba8:	mvn	r3, #0
   19bac:	b	19d88 <flatcc_builder_create_table@@Base+0x2f0>
   19bb0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19bb4:	bl	16354 <main@@Base+0xf4>
   19bb8:	mov	r3, r0
   19bbc:	str	r3, [fp, #-44]	; 0xffffffd4
   19bc0:	mov	r3, #0
   19bc4:	str	r3, [fp, #-16]
   19bc8:	b	19c40 <flatcc_builder_create_table@@Base+0x1a8>
   19bcc:	ldr	r3, [fp, #-16]
   19bd0:	lsl	r3, r3, #1
   19bd4:	ldr	r2, [fp, #4]
   19bd8:	add	r3, r2, r3
   19bdc:	ldrh	r3, [r3]
   19be0:	mov	r2, r3
   19be4:	ldr	r3, [fp, #-124]	; 0xffffff84
   19be8:	add	r3, r2, r3
   19bec:	str	r3, [fp, #-36]	; 0xffffffdc
   19bf0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19bf4:	ldr	r2, [r3]
   19bf8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19bfc:	sub	r3, r2, r3
   19c00:	ldr	r2, [fp, #-16]
   19c04:	lsl	r2, r2, #1
   19c08:	ldr	r1, [fp, #4]
   19c0c:	add	r2, r1, r2
   19c10:	ldrh	r2, [r2]
   19c14:	sub	r3, r3, r2
   19c18:	sub	r3, r3, #4
   19c1c:	str	r3, [fp, #-40]	; 0xffffffd8
   19c20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19c24:	bl	16354 <main@@Base+0xf4>
   19c28:	mov	r2, r0
   19c2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   19c30:	str	r2, [r3]
   19c34:	ldr	r3, [fp, #-16]
   19c38:	add	r3, r3, #1
   19c3c:	str	r3, [fp, #-16]
   19c40:	ldr	r2, [fp, #-16]
   19c44:	ldr	r3, [fp, #8]
   19c48:	cmp	r2, r3
   19c4c:	blt	19bcc <flatcc_builder_create_table@@Base+0x134>
   19c50:	mov	r3, #0
   19c54:	str	r3, [fp, #-116]	; 0xffffff8c
   19c58:	mov	r3, #0
   19c5c:	str	r3, [fp, #-112]	; 0xffffff90
   19c60:	ldr	r3, [fp, #-116]	; 0xffffff8c
   19c64:	add	r3, r3, #4
   19c68:	str	r3, [fp, #-116]	; 0xffffff8c
   19c6c:	ldr	r3, [fp, #-112]	; 0xffffff90
   19c70:	add	r3, r3, #1
   19c74:	lsl	r3, r3, #3
   19c78:	sub	r2, fp, #12
   19c7c:	add	r3, r2, r3
   19c80:	sub	r2, fp, #44	; 0x2c
   19c84:	str	r2, [r3, #-104]	; 0xffffff98
   19c88:	ldr	r3, [fp, #-112]	; 0xffffff90
   19c8c:	add	r3, r3, #1
   19c90:	lsl	r3, r3, #3
   19c94:	sub	r2, fp, #12
   19c98:	add	r3, r2, r3
   19c9c:	mov	r2, #4
   19ca0:	str	r2, [r3, #-100]	; 0xffffff9c
   19ca4:	ldr	r3, [fp, #-112]	; 0xffffff90
   19ca8:	add	r3, r3, #1
   19cac:	str	r3, [fp, #-112]	; 0xffffff90
   19cb0:	ldr	r3, [fp, #-128]	; 0xffffff80
   19cb4:	cmp	r3, #0
   19cb8:	beq	19d10 <flatcc_builder_create_table@@Base+0x278>
   19cbc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19cc0:	ldr	r3, [fp, #-128]	; 0xffffff80
   19cc4:	add	r3, r2, r3
   19cc8:	str	r3, [fp, #-116]	; 0xffffff8c
   19ccc:	ldr	r3, [fp, #-112]	; 0xffffff90
   19cd0:	add	r3, r3, #1
   19cd4:	lsl	r3, r3, #3
   19cd8:	sub	r2, fp, #12
   19cdc:	add	r3, r2, r3
   19ce0:	ldr	r2, [fp, #-124]	; 0xffffff84
   19ce4:	str	r2, [r3, #-104]	; 0xffffff98
   19ce8:	ldr	r3, [fp, #-112]	; 0xffffff90
   19cec:	add	r3, r3, #1
   19cf0:	lsl	r3, r3, #3
   19cf4:	sub	r2, fp, #12
   19cf8:	add	r3, r2, r3
   19cfc:	ldr	r2, [fp, #-128]	; 0xffffff80
   19d00:	str	r2, [r3, #-100]	; 0xffffff9c
   19d04:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d08:	add	r3, r3, #1
   19d0c:	str	r3, [fp, #-112]	; 0xffffff90
   19d10:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d14:	cmp	r3, #0
   19d18:	beq	19d74 <flatcc_builder_create_table@@Base+0x2dc>
   19d1c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   19d20:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d24:	add	r3, r2, r3
   19d28:	str	r3, [fp, #-116]	; 0xffffff8c
   19d2c:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d30:	add	r3, r3, #1
   19d34:	lsl	r3, r3, #3
   19d38:	sub	r2, fp, #12
   19d3c:	add	r3, r2, r3
   19d40:	ldr	r2, [pc, #112]	; 19db8 <flatcc_builder_create_table@@Base+0x320>
   19d44:	ldr	r2, [r4, r2]
   19d48:	str	r2, [r3, #-104]	; 0xffffff98
   19d4c:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d50:	add	r3, r3, #1
   19d54:	lsl	r3, r3, #3
   19d58:	sub	r2, fp, #12
   19d5c:	add	r3, r2, r3
   19d60:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d64:	str	r2, [r3, #-100]	; 0xffffff9c
   19d68:	ldr	r3, [fp, #-112]	; 0xffffff90
   19d6c:	add	r3, r3, #1
   19d70:	str	r3, [fp, #-112]	; 0xffffff90
   19d74:	sub	r3, fp, #116	; 0x74
   19d78:	mov	r1, r3
   19d7c:	ldr	r0, [fp, #-120]	; 0xffffff88
   19d80:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   19d84:	mov	r3, r0
   19d88:	mov	r0, r3
   19d8c:	sub	sp, fp, #8
   19d90:	pop	{r4, fp, pc}
   19d94:	andeq	lr, r1, r0, asr #10
   19d98:	andeq	ip, r0, ip, lsr pc
   19d9c:	ldrdeq	r0, [r0], -r5
   19da0:	andeq	ip, r0, ip, lsl #17
   19da4:	andeq	ip, r0, r4, lsr #22
   19da8:	andeq	ip, r0, ip, lsl #30
   19dac:	ldrdeq	r0, [r0], -fp
   19db0:	andeq	ip, r0, ip, asr r8
   19db4:	andeq	ip, r0, r8, lsl #22
   19db8:	andeq	r0, r0, r4, asr r0

00019dbc <flatcc_builder_check_required_field@@Base>:
   19dbc:	push	{fp, lr}
   19dc0:	add	fp, sp, #4
   19dc4:	sub	sp, sp, #8
   19dc8:	str	r0, [fp, #-8]
   19dcc:	mov	r3, r1
   19dd0:	strh	r3, [fp, #-10]
   19dd4:	ldr	r3, [fp, #-8]
   19dd8:	ldr	r3, [r3, #32]
   19ddc:	ldrh	r3, [r3, #14]
   19de0:	cmp	r3, #3
   19de4:	beq	19e08 <flatcc_builder_check_required_field@@Base+0x4c>
   19de8:	ldr	r3, [pc, #100]	; 19e54 <flatcc_builder_check_required_field@@Base+0x98>
   19dec:	add	r3, pc, r3
   19df0:	ldr	r2, [pc, #96]	; 19e58 <flatcc_builder_check_required_field@@Base+0x9c>
   19df4:	ldr	r1, [pc, #96]	; 19e5c <flatcc_builder_check_required_field@@Base+0xa0>
   19df8:	add	r1, pc, r1
   19dfc:	ldr	r0, [pc, #92]	; 19e60 <flatcc_builder_check_required_field@@Base+0xa4>
   19e00:	add	r0, pc, r0
   19e04:	bl	12504 <__assert_fail@plt>
   19e08:	ldr	r3, [fp, #-8]
   19e0c:	ldrh	r3, [r3, #8]
   19e10:	ldrh	r2, [fp, #-10]
   19e14:	cmp	r2, r3
   19e18:	bcs	19e44 <flatcc_builder_check_required_field@@Base+0x88>
   19e1c:	ldr	r3, [fp, #-8]
   19e20:	ldr	r2, [r3, #4]
   19e24:	ldrh	r3, [fp, #-10]
   19e28:	lsl	r3, r3, #1
   19e2c:	add	r3, r2, r3
   19e30:	ldrh	r3, [r3]
   19e34:	cmp	r3, #0
   19e38:	beq	19e44 <flatcc_builder_check_required_field@@Base+0x88>
   19e3c:	mov	r3, #1
   19e40:	b	19e48 <flatcc_builder_check_required_field@@Base+0x8c>
   19e44:	mov	r3, #0
   19e48:	mov	r0, r3
   19e4c:	sub	sp, fp, #4
   19e50:	pop	{fp, pc}
   19e54:	andeq	ip, r0, r8, lsr ip
   19e58:	strdeq	r0, [r0], -r8
   19e5c:	andeq	ip, r0, ip, ror #10
   19e60:	andeq	ip, r0, r4, lsr #16

00019e64 <flatcc_builder_check_union_field@@Base>:
   19e64:	push	{fp, lr}
   19e68:	add	fp, sp, #4
   19e6c:	sub	sp, sp, #8
   19e70:	str	r0, [fp, #-8]
   19e74:	mov	r3, r1
   19e78:	strh	r3, [fp, #-10]
   19e7c:	ldr	r3, [fp, #-8]
   19e80:	ldr	r3, [r3, #32]
   19e84:	ldrh	r3, [r3, #14]
   19e88:	cmp	r3, #3
   19e8c:	beq	19eb0 <flatcc_builder_check_union_field@@Base+0x4c>
   19e90:	ldr	r3, [pc, #292]	; 19fbc <flatcc_builder_check_union_field@@Base+0x158>
   19e94:	add	r3, pc, r3
   19e98:	ldr	r2, [pc, #288]	; 19fc0 <flatcc_builder_check_union_field@@Base+0x15c>
   19e9c:	ldr	r1, [pc, #288]	; 19fc4 <flatcc_builder_check_union_field@@Base+0x160>
   19ea0:	add	r1, pc, r1
   19ea4:	ldr	r0, [pc, #284]	; 19fc8 <flatcc_builder_check_union_field@@Base+0x164>
   19ea8:	add	r0, pc, r0
   19eac:	bl	12504 <__assert_fail@plt>
   19eb0:	ldrh	r3, [fp, #-10]
   19eb4:	cmp	r3, #0
   19eb8:	beq	19ed0 <flatcc_builder_check_union_field@@Base+0x6c>
   19ebc:	ldr	r3, [fp, #-8]
   19ec0:	ldrh	r3, [r3, #8]
   19ec4:	ldrh	r2, [fp, #-10]
   19ec8:	cmp	r2, r3
   19ecc:	bcc	19ed8 <flatcc_builder_check_union_field@@Base+0x74>
   19ed0:	mov	r3, #0
   19ed4:	b	19fb0 <flatcc_builder_check_union_field@@Base+0x14c>
   19ed8:	ldr	r3, [fp, #-8]
   19edc:	ldr	r2, [r3, #4]
   19ee0:	ldrh	r3, [fp, #-10]
   19ee4:	sub	r3, r3, #-2147483647	; 0x80000001
   19ee8:	lsl	r3, r3, #1
   19eec:	add	r3, r2, r3
   19ef0:	ldrh	r3, [r3]
   19ef4:	cmp	r3, #0
   19ef8:	bne	19f28 <flatcc_builder_check_union_field@@Base+0xc4>
   19efc:	ldr	r3, [fp, #-8]
   19f00:	ldr	r2, [r3, #4]
   19f04:	ldrh	r3, [fp, #-10]
   19f08:	lsl	r3, r3, #1
   19f0c:	add	r3, r2, r3
   19f10:	ldrh	r3, [r3]
   19f14:	cmp	r3, #0
   19f18:	moveq	r3, #1
   19f1c:	movne	r3, #0
   19f20:	uxtb	r3, r3
   19f24:	b	19fb0 <flatcc_builder_check_union_field@@Base+0x14c>
   19f28:	ldr	r3, [fp, #-8]
   19f2c:	ldr	r3, [r3, #16]
   19f30:	ldr	r2, [fp, #-8]
   19f34:	ldr	r1, [r2, #4]
   19f38:	ldrh	r2, [fp, #-10]
   19f3c:	sub	r2, r2, #-2147483647	; 0x80000001
   19f40:	lsl	r2, r2, #1
   19f44:	add	r2, r1, r2
   19f48:	ldrh	r2, [r2]
   19f4c:	add	r3, r3, r2
   19f50:	ldrb	r3, [r3]
   19f54:	cmp	r3, #0
   19f58:	beq	19f88 <flatcc_builder_check_union_field@@Base+0x124>
   19f5c:	ldr	r3, [fp, #-8]
   19f60:	ldr	r2, [r3, #4]
   19f64:	ldrh	r3, [fp, #-10]
   19f68:	lsl	r3, r3, #1
   19f6c:	add	r3, r2, r3
   19f70:	ldrh	r3, [r3]
   19f74:	cmp	r3, #0
   19f78:	movne	r3, #1
   19f7c:	moveq	r3, #0
   19f80:	uxtb	r3, r3
   19f84:	b	19fb0 <flatcc_builder_check_union_field@@Base+0x14c>
   19f88:	ldr	r3, [fp, #-8]
   19f8c:	ldr	r2, [r3, #4]
   19f90:	ldrh	r3, [fp, #-10]
   19f94:	lsl	r3, r3, #1
   19f98:	add	r3, r2, r3
   19f9c:	ldrh	r3, [r3]
   19fa0:	cmp	r3, #0
   19fa4:	moveq	r3, #1
   19fa8:	movne	r3, #0
   19fac:	uxtb	r3, r3
   19fb0:	mov	r0, r3
   19fb4:	sub	sp, fp, #4
   19fb8:	pop	{fp, pc}
   19fbc:			; <UNDEFINED> instruction: 0x0000cbb4
   19fc0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19fc4:	andeq	ip, r0, r4, asr #9
   19fc8:	andeq	ip, r0, ip, ror r7

00019fcc <flatcc_builder_check_required@@Base>:
   19fcc:	push	{fp, lr}
   19fd0:	add	fp, sp, #4
   19fd4:	sub	sp, sp, #24
   19fd8:	str	r0, [fp, #-16]
   19fdc:	str	r1, [fp, #-20]	; 0xffffffec
   19fe0:	str	r2, [fp, #-24]	; 0xffffffe8
   19fe4:	ldr	r3, [fp, #-16]
   19fe8:	ldr	r3, [r3, #32]
   19fec:	ldrh	r3, [r3, #14]
   19ff0:	cmp	r3, #3
   19ff4:	beq	1a018 <flatcc_builder_check_required@@Base+0x4c>
   19ff8:	ldr	r3, [pc, #168]	; 1a0a8 <flatcc_builder_check_required@@Base+0xdc>
   19ffc:	add	r3, pc, r3
   1a000:	ldr	r2, [pc, #164]	; 1a0ac <flatcc_builder_check_required@@Base+0xe0>
   1a004:	ldr	r1, [pc, #164]	; 1a0b0 <flatcc_builder_check_required@@Base+0xe4>
   1a008:	add	r1, pc, r1
   1a00c:	ldr	r0, [pc, #160]	; 1a0b4 <flatcc_builder_check_required@@Base+0xe8>
   1a010:	add	r0, pc, r0
   1a014:	bl	12504 <__assert_fail@plt>
   1a018:	ldr	r3, [fp, #-16]
   1a01c:	ldrh	r3, [r3, #8]
   1a020:	mov	r2, r3
   1a024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a028:	cmp	r2, r3
   1a02c:	bge	1a038 <flatcc_builder_check_required@@Base+0x6c>
   1a030:	mov	r3, #0
   1a034:	b	1a09c <flatcc_builder_check_required@@Base+0xd0>
   1a038:	mov	r3, #0
   1a03c:	str	r3, [fp, #-8]
   1a040:	b	1a088 <flatcc_builder_check_required@@Base+0xbc>
   1a044:	ldr	r3, [fp, #-16]
   1a048:	ldr	r2, [r3, #4]
   1a04c:	ldr	r3, [fp, #-8]
   1a050:	lsl	r3, r3, #1
   1a054:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a058:	add	r3, r1, r3
   1a05c:	ldrh	r3, [r3]
   1a060:	lsl	r3, r3, #1
   1a064:	add	r3, r2, r3
   1a068:	ldrh	r3, [r3]
   1a06c:	cmp	r3, #0
   1a070:	bne	1a07c <flatcc_builder_check_required@@Base+0xb0>
   1a074:	mov	r3, #0
   1a078:	b	1a09c <flatcc_builder_check_required@@Base+0xd0>
   1a07c:	ldr	r3, [fp, #-8]
   1a080:	add	r3, r3, #1
   1a084:	str	r3, [fp, #-8]
   1a088:	ldr	r2, [fp, #-8]
   1a08c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a090:	cmp	r2, r3
   1a094:	blt	1a044 <flatcc_builder_check_required@@Base+0x78>
   1a098:	mov	r3, #1
   1a09c:	mov	r0, r3
   1a0a0:	sub	sp, fp, #4
   1a0a4:	pop	{fp, pc}
   1a0a8:	andeq	ip, r0, r0, ror sl
   1a0ac:	andeq	r0, r0, r1, lsl r5
   1a0b0:	andeq	ip, r0, ip, asr r3
   1a0b4:	andeq	ip, r0, r4, lsl r6

0001a0b8 <flatcc_builder_end_table@@Base>:
   1a0b8:	push	{fp, lr}
   1a0bc:	add	fp, sp, #4
   1a0c0:	sub	sp, sp, #48	; 0x30
   1a0c4:	str	r0, [fp, #-32]	; 0xffffffe0
   1a0c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a0cc:	ldr	r3, [r3, #32]
   1a0d0:	ldrh	r3, [r3, #14]
   1a0d4:	cmp	r3, #3
   1a0d8:	beq	1a0fc <flatcc_builder_end_table@@Base+0x44>
   1a0dc:	ldr	r3, [pc, #508]	; 1a2e0 <flatcc_builder_end_table@@Base+0x228>
   1a0e0:	add	r3, pc, r3
   1a0e4:	ldr	r2, [pc, #504]	; 1a2e4 <flatcc_builder_end_table@@Base+0x22c>
   1a0e8:	ldr	r1, [pc, #504]	; 1a2e8 <flatcc_builder_end_table@@Base+0x230>
   1a0ec:	add	r1, pc, r1
   1a0f0:	ldr	r0, [pc, #500]	; 1a2ec <flatcc_builder_end_table@@Base+0x234>
   1a0f4:	add	r0, pc, r0
   1a0f8:	bl	12504 <__assert_fail@plt>
   1a0fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a100:	ldr	r3, [r3, #4]
   1a104:	sub	r3, r3, #4
   1a108:	str	r3, [fp, #-8]
   1a10c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a110:	ldrh	r3, [r3, #8]
   1a114:	add	r3, r3, #2
   1a118:	uxth	r3, r3
   1a11c:	lsl	r3, r3, #1
   1a120:	strh	r3, [fp, #-10]
   1a124:	ldr	r3, [fp, #-8]
   1a128:	ldrh	r2, [fp, #-10]
   1a12c:	strh	r2, [r3]
   1a130:	ldr	r3, [fp, #-8]
   1a134:	add	r3, r3, #2
   1a138:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a13c:	ldr	r2, [r2, #20]
   1a140:	uxth	r2, r2
   1a144:	add	r2, r2, #4
   1a148:	uxth	r2, r2
   1a14c:	strh	r2, [r3]
   1a150:	ldr	r3, [fp, #-8]
   1a154:	ldrh	r3, [r3]
   1a158:	mov	r2, r3
   1a15c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a160:	ldr	r3, [r3, #12]
   1a164:	eor	r3, r3, r2
   1a168:	ldr	r2, [pc, #384]	; 1a2f0 <flatcc_builder_end_table@@Base+0x238>
   1a16c:	mul	r3, r2, r3
   1a170:	ldr	r2, [fp, #-8]
   1a174:	add	r2, r2, #2
   1a178:	ldrh	r2, [r2]
   1a17c:	eor	r3, r3, r2
   1a180:	ldr	r2, [pc, #360]	; 1a2f0 <flatcc_builder_end_table@@Base+0x238>
   1a184:	mul	r2, r2, r3
   1a188:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a18c:	str	r2, [r3, #12]
   1a190:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a194:	ldr	r3, [r3, #12]
   1a198:	ldrh	r2, [fp, #-10]
   1a19c:	ldr	r1, [fp, #-8]
   1a1a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a1a4:	bl	19788 <flatcc_builder_create_cached_vtable@@Base>
   1a1a8:	str	r0, [fp, #-16]
   1a1ac:	ldr	r3, [fp, #-16]
   1a1b0:	cmp	r3, #0
   1a1b4:	bne	1a1c0 <flatcc_builder_end_table@@Base+0x108>
   1a1b8:	mov	r3, #0
   1a1bc:	b	1a2d4 <flatcc_builder_end_table@@Base+0x21c>
   1a1c0:	ldrh	r3, [fp, #-10]
   1a1c4:	mov	r2, r3
   1a1c8:	mov	r1, #0
   1a1cc:	ldr	r0, [fp, #-8]
   1a1d0:	bl	124d4 <memset@plt>
   1a1d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1d8:	ldr	r2, [r3, #76]	; 0x4c
   1a1dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1e0:	ldr	r3, [r3, #32]
   1a1e4:	ldr	r3, [r3, #20]
   1a1e8:	add	r3, r2, r3
   1a1ec:	str	r3, [fp, #-20]	; 0xffffffec
   1a1f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a1f4:	ldr	r3, [r3]
   1a1f8:	mov	r2, r3
   1a1fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a200:	sub	r3, r2, r3
   1a204:	asr	r3, r3, #1
   1a208:	str	r3, [fp, #-24]	; 0xffffffe8
   1a20c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a210:	ldr	r1, [r3, #16]
   1a214:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a218:	ldr	r2, [r3, #20]
   1a21c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a220:	ldrh	r0, [r3, #130]	; 0x82
   1a224:	ldr	r3, [fp, #-16]
   1a228:	str	r3, [sp, #8]
   1a22c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a230:	str	r3, [sp, #4]
   1a234:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a238:	str	r3, [sp]
   1a23c:	mov	r3, r0
   1a240:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a244:	bl	19a98 <flatcc_builder_create_table@@Base>
   1a248:	str	r0, [fp, #-28]	; 0xffffffe4
   1a24c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a250:	cmp	r3, #0
   1a254:	bne	1a260 <flatcc_builder_end_table@@Base+0x1a8>
   1a258:	mov	r3, #0
   1a25c:	b	1a2d4 <flatcc_builder_end_table@@Base+0x21c>
   1a260:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a264:	ldr	r3, [r3, #32]
   1a268:	ldr	r2, [r3, #24]
   1a26c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a270:	str	r2, [r3, #12]
   1a274:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a278:	ldr	r3, [r3, #32]
   1a27c:	ldrh	r2, [r3, #28]
   1a280:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a284:	strh	r2, [r3, #8]
   1a288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a28c:	ldr	r2, [r3, #52]	; 0x34
   1a290:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a294:	ldr	r3, [r3, #32]
   1a298:	ldr	r3, [r3, #16]
   1a29c:	add	r2, r2, r3
   1a2a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a2a4:	str	r2, [r3, #4]
   1a2a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a2ac:	ldr	r2, [r3, #76]	; 0x4c
   1a2b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a2b4:	ldr	r3, [r3, #32]
   1a2b8:	ldr	r3, [r3, #20]
   1a2bc:	add	r2, r2, r3
   1a2c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1a2c4:	str	r2, [r3]
   1a2c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a2cc:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1a2d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a2d4:	mov	r0, r3
   1a2d8:	sub	sp, fp, #4
   1a2dc:	pop	{fp, pc}
   1a2e0:	andeq	ip, r0, ip, lsr #19
   1a2e4:	andeq	r0, r0, r5, lsr #10
   1a2e8:	andeq	ip, r0, r8, ror r2
   1a2ec:	andeq	ip, r0, r0, lsr r5
   1a2f0:			; <UNDEFINED> instruction: 0x9e3779b1

0001a2f4 <flatcc_builder_create_vector@@Base>:
   1a2f4:	push	{r4, fp, lr}
   1a2f8:	add	fp, sp, #8
   1a2fc:	sub	sp, sp, #108	; 0x6c
   1a300:	str	r0, [fp, #-104]	; 0xffffff98
   1a304:	str	r1, [fp, #-108]	; 0xffffff94
   1a308:	str	r2, [fp, #-112]	; 0xffffff90
   1a30c:	str	r3, [fp, #-116]	; 0xffffff8c
   1a310:	ldr	r4, [pc, #484]	; 1a4fc <flatcc_builder_create_vector@@Base+0x208>
   1a314:	add	r4, pc, r4
   1a318:	ldr	r2, [fp, #-112]	; 0xffffff90
   1a31c:	ldr	r3, [fp, #8]
   1a320:	cmp	r2, r3
   1a324:	bls	1a360 <flatcc_builder_create_vector@@Base+0x6c>
   1a328:	ldr	r2, [fp, #-112]	; 0xffffff90
   1a32c:	ldr	r3, [fp, #8]
   1a330:	cmp	r2, r3
   1a334:	bls	1a358 <flatcc_builder_create_vector@@Base+0x64>
   1a338:	ldr	r3, [pc, #448]	; 1a500 <flatcc_builder_create_vector@@Base+0x20c>
   1a33c:	add	r3, pc, r3
   1a340:	ldr	r2, [pc, #444]	; 1a504 <flatcc_builder_create_vector@@Base+0x210>
   1a344:	ldr	r1, [pc, #444]	; 1a508 <flatcc_builder_create_vector@@Base+0x214>
   1a348:	add	r1, pc, r1
   1a34c:	ldr	r0, [pc, #440]	; 1a50c <flatcc_builder_create_vector@@Base+0x218>
   1a350:	add	r0, pc, r0
   1a354:	bl	12504 <__assert_fail@plt>
   1a358:	mov	r3, #0
   1a35c:	b	1a4f0 <flatcc_builder_create_vector@@Base+0x1fc>
   1a360:	mov	r1, #4
   1a364:	add	r3, fp, #4
   1a368:	mov	r0, r3
   1a36c:	bl	1739c <flatcc_builder_clear@@Base+0xf8>
   1a370:	ldrh	r3, [fp, #4]
   1a374:	mov	r1, r3
   1a378:	ldr	r0, [fp, #-104]	; 0xffffff98
   1a37c:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   1a380:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a384:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a388:	mul	r3, r2, r3
   1a38c:	str	r3, [fp, #-16]
   1a390:	ldr	r0, [fp, #-112]	; 0xffffff90
   1a394:	bl	16354 <main@@Base+0xf4>
   1a398:	mov	r3, r0
   1a39c:	str	r3, [fp, #-24]	; 0xffffffe8
   1a3a0:	ldrh	r3, [fp, #4]
   1a3a4:	mov	r2, r3
   1a3a8:	ldr	r1, [fp, #-16]
   1a3ac:	ldr	r0, [fp, #-104]	; 0xffffff98
   1a3b0:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1a3b4:	str	r0, [fp, #-20]	; 0xffffffec
   1a3b8:	mov	r3, #0
   1a3bc:	str	r3, [fp, #-96]	; 0xffffffa0
   1a3c0:	mov	r3, #0
   1a3c4:	str	r3, [fp, #-92]	; 0xffffffa4
   1a3c8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1a3cc:	add	r3, r3, #4
   1a3d0:	str	r3, [fp, #-96]	; 0xffffffa0
   1a3d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a3d8:	add	r3, r3, #1
   1a3dc:	lsl	r3, r3, #3
   1a3e0:	sub	r2, fp, #12
   1a3e4:	add	r3, r2, r3
   1a3e8:	sub	r2, fp, #24
   1a3ec:	str	r2, [r3, #-84]	; 0xffffffac
   1a3f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a3f4:	add	r3, r3, #1
   1a3f8:	lsl	r3, r3, #3
   1a3fc:	sub	r2, fp, #12
   1a400:	add	r3, r2, r3
   1a404:	mov	r2, #4
   1a408:	str	r2, [r3, #-80]	; 0xffffffb0
   1a40c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a410:	add	r3, r3, #1
   1a414:	str	r3, [fp, #-92]	; 0xffffffa4
   1a418:	ldr	r3, [fp, #-16]
   1a41c:	cmp	r3, #0
   1a420:	beq	1a478 <flatcc_builder_create_vector@@Base+0x184>
   1a424:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a428:	ldr	r3, [fp, #-16]
   1a42c:	add	r3, r2, r3
   1a430:	str	r3, [fp, #-96]	; 0xffffffa0
   1a434:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a438:	add	r3, r3, #1
   1a43c:	lsl	r3, r3, #3
   1a440:	sub	r2, fp, #12
   1a444:	add	r3, r2, r3
   1a448:	ldr	r2, [fp, #-108]	; 0xffffff94
   1a44c:	str	r2, [r3, #-84]	; 0xffffffac
   1a450:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a454:	add	r3, r3, #1
   1a458:	lsl	r3, r3, #3
   1a45c:	sub	r2, fp, #12
   1a460:	add	r3, r2, r3
   1a464:	ldr	r2, [fp, #-16]
   1a468:	str	r2, [r3, #-80]	; 0xffffffb0
   1a46c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a470:	add	r3, r3, #1
   1a474:	str	r3, [fp, #-92]	; 0xffffffa4
   1a478:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a47c:	cmp	r3, #0
   1a480:	beq	1a4dc <flatcc_builder_create_vector@@Base+0x1e8>
   1a484:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a48c:	add	r3, r2, r3
   1a490:	str	r3, [fp, #-96]	; 0xffffffa0
   1a494:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a498:	add	r3, r3, #1
   1a49c:	lsl	r3, r3, #3
   1a4a0:	sub	r2, fp, #12
   1a4a4:	add	r3, r2, r3
   1a4a8:	ldr	r2, [pc, #96]	; 1a510 <flatcc_builder_create_vector@@Base+0x21c>
   1a4ac:	ldr	r2, [r4, r2]
   1a4b0:	str	r2, [r3, #-84]	; 0xffffffac
   1a4b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a4b8:	add	r3, r3, #1
   1a4bc:	lsl	r3, r3, #3
   1a4c0:	sub	r2, fp, #12
   1a4c4:	add	r3, r2, r3
   1a4c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a4cc:	str	r2, [r3, #-80]	; 0xffffffb0
   1a4d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a4d4:	add	r3, r3, #1
   1a4d8:	str	r3, [fp, #-92]	; 0xffffffa4
   1a4dc:	sub	r3, fp, #96	; 0x60
   1a4e0:	mov	r1, r3
   1a4e4:	ldr	r0, [fp, #-104]	; 0xffffff98
   1a4e8:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   1a4ec:	mov	r3, r0
   1a4f0:	mov	r0, r3
   1a4f4:	sub	sp, fp, #8
   1a4f8:	pop	{r4, fp, pc}
   1a4fc:	andeq	sp, r1, r4, ror #25
   1a500:	andeq	ip, r0, ip, ror #14
   1a504:	andeq	r0, r0, r5, asr r5
   1a508:	andeq	ip, r0, ip, lsl r0
   1a50c:	andeq	ip, r0, r0, lsl #6
   1a510:	andeq	r0, r0, r4, asr r0

0001a514 <flatcc_builder_end_vector@@Base>:
   1a514:	push	{fp, lr}
   1a518:	add	fp, sp, #4
   1a51c:	sub	sp, sp, #24
   1a520:	str	r0, [fp, #-16]
   1a524:	ldr	r3, [fp, #-16]
   1a528:	ldr	r3, [r3, #32]
   1a52c:	ldrh	r3, [r3, #14]
   1a530:	cmp	r3, #4
   1a534:	beq	1a558 <flatcc_builder_end_vector@@Base+0x44>
   1a538:	ldr	r3, [pc, #148]	; 1a5d4 <flatcc_builder_end_vector@@Base+0xc0>
   1a53c:	add	r3, pc, r3
   1a540:	ldr	r2, [pc, #144]	; 1a5d8 <flatcc_builder_end_vector@@Base+0xc4>
   1a544:	ldr	r1, [pc, #144]	; 1a5dc <flatcc_builder_end_vector@@Base+0xc8>
   1a548:	add	r1, pc, r1
   1a54c:	ldr	r0, [pc, #140]	; 1a5e0 <flatcc_builder_end_vector@@Base+0xcc>
   1a550:	add	r0, pc, r0
   1a554:	bl	12504 <__assert_fail@plt>
   1a558:	ldr	r3, [fp, #-16]
   1a55c:	ldr	r1, [r3, #16]
   1a560:	ldr	r3, [fp, #-16]
   1a564:	ldr	r3, [r3, #32]
   1a568:	ldr	r0, [r3, #20]
   1a56c:	ldr	r3, [fp, #-16]
   1a570:	ldr	r3, [r3, #32]
   1a574:	ldr	ip, [r3, #16]
   1a578:	ldr	r3, [fp, #-16]
   1a57c:	ldrh	r3, [r3, #130]	; 0x82
   1a580:	ldr	r2, [fp, #-16]
   1a584:	ldr	r2, [r2, #32]
   1a588:	ldr	r2, [r2, #24]
   1a58c:	str	r2, [sp, #4]
   1a590:	str	r3, [sp]
   1a594:	mov	r3, ip
   1a598:	mov	r2, r0
   1a59c:	ldr	r0, [fp, #-16]
   1a5a0:	bl	1a2f4 <flatcc_builder_create_vector@@Base>
   1a5a4:	str	r0, [fp, #-8]
   1a5a8:	ldr	r3, [fp, #-8]
   1a5ac:	cmp	r3, #0
   1a5b0:	bne	1a5bc <flatcc_builder_end_vector@@Base+0xa8>
   1a5b4:	mov	r3, #0
   1a5b8:	b	1a5c8 <flatcc_builder_end_vector@@Base+0xb4>
   1a5bc:	ldr	r0, [fp, #-16]
   1a5c0:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1a5c4:	ldr	r3, [fp, #-8]
   1a5c8:	mov	r0, r3
   1a5cc:	sub	sp, fp, #4
   1a5d0:	pop	{fp, pc}
   1a5d4:	andeq	ip, r0, ip, lsl #11
   1a5d8:	andeq	r0, r0, r8, ror r5
   1a5dc:	andeq	fp, r0, ip, lsl lr
   1a5e0:	andeq	fp, r0, r8, asr pc

0001a5e4 <flatcc_builder_vector_count@@Base>:
   1a5e4:	push	{fp}		; (str fp, [sp, #-4]!)
   1a5e8:	add	fp, sp, #0
   1a5ec:	sub	sp, sp, #12
   1a5f0:	str	r0, [fp, #-8]
   1a5f4:	ldr	r3, [fp, #-8]
   1a5f8:	ldr	r3, [r3, #32]
   1a5fc:	ldr	r3, [r3, #20]
   1a600:	mov	r0, r3
   1a604:	add	sp, fp, #0
   1a608:	pop	{fp}		; (ldr fp, [sp], #4)
   1a60c:	bx	lr

0001a610 <flatcc_builder_vector_edit@@Base>:
   1a610:	push	{fp}		; (str fp, [sp, #-4]!)
   1a614:	add	fp, sp, #0
   1a618:	sub	sp, sp, #12
   1a61c:	str	r0, [fp, #-8]
   1a620:	ldr	r3, [fp, #-8]
   1a624:	ldr	r3, [r3, #16]
   1a628:	mov	r0, r3
   1a62c:	add	sp, fp, #0
   1a630:	pop	{fp}		; (ldr fp, [sp], #4)
   1a634:	bx	lr
   1a638:	push	{r4, fp, lr}
   1a63c:	add	fp, sp, #8
   1a640:	sub	sp, sp, #116	; 0x74
   1a644:	str	r0, [fp, #-112]	; 0xffffff90
   1a648:	str	r1, [fp, #-116]	; 0xffffff8c
   1a64c:	str	r2, [fp, #-120]	; 0xffffff88
   1a650:	str	r3, [fp, #-124]	; 0xffffff84
   1a654:	ldr	r4, [pc, #748]	; 1a948 <flatcc_builder_vector_edit@@Base+0x338>
   1a658:	add	r4, pc, r4
   1a65c:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a660:	cmn	r3, #-1073741823	; 0xc0000001
   1a664:	bls	1a670 <flatcc_builder_vector_edit@@Base+0x60>
   1a668:	mov	r3, #0
   1a66c:	b	1a93c <flatcc_builder_vector_edit@@Base+0x32c>
   1a670:	mov	r1, #4
   1a674:	ldr	r0, [fp, #-112]	; 0xffffff90
   1a678:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   1a67c:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a680:	lsl	r3, r3, #2
   1a684:	str	r3, [fp, #-20]	; 0xffffffec
   1a688:	ldr	r0, [fp, #-120]	; 0xffffff88
   1a68c:	bl	16354 <main@@Base+0xf4>
   1a690:	mov	r3, r0
   1a694:	str	r3, [fp, #-36]	; 0xffffffdc
   1a698:	mov	r2, #4
   1a69c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a6a0:	ldr	r0, [fp, #-112]	; 0xffffff90
   1a6a4:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1a6a8:	str	r0, [fp, #-24]	; 0xffffffe8
   1a6ac:	mov	r3, #0
   1a6b0:	str	r3, [fp, #-108]	; 0xffffff94
   1a6b4:	mov	r3, #0
   1a6b8:	str	r3, [fp, #-104]	; 0xffffff98
   1a6bc:	ldr	r3, [fp, #-108]	; 0xffffff94
   1a6c0:	add	r3, r3, #4
   1a6c4:	str	r3, [fp, #-108]	; 0xffffff94
   1a6c8:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a6cc:	add	r3, r3, #1
   1a6d0:	lsl	r3, r3, #3
   1a6d4:	sub	r2, fp, #12
   1a6d8:	add	r3, r2, r3
   1a6dc:	sub	r2, fp, #36	; 0x24
   1a6e0:	str	r2, [r3, #-96]	; 0xffffffa0
   1a6e4:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a6e8:	add	r3, r3, #1
   1a6ec:	lsl	r3, r3, #3
   1a6f0:	sub	r2, fp, #12
   1a6f4:	add	r3, r2, r3
   1a6f8:	mov	r2, #4
   1a6fc:	str	r2, [r3, #-92]	; 0xffffffa4
   1a700:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a704:	add	r3, r3, #1
   1a708:	str	r3, [fp, #-104]	; 0xffffff98
   1a70c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a710:	cmp	r3, #0
   1a714:	beq	1a76c <flatcc_builder_vector_edit@@Base+0x15c>
   1a718:	ldr	r2, [fp, #-108]	; 0xffffff94
   1a71c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a720:	add	r3, r2, r3
   1a724:	str	r3, [fp, #-108]	; 0xffffff94
   1a728:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a72c:	add	r3, r3, #1
   1a730:	lsl	r3, r3, #3
   1a734:	sub	r2, fp, #12
   1a738:	add	r3, r2, r3
   1a73c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a740:	str	r2, [r3, #-96]	; 0xffffffa0
   1a744:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a748:	add	r3, r3, #1
   1a74c:	lsl	r3, r3, #3
   1a750:	sub	r2, fp, #12
   1a754:	add	r3, r2, r3
   1a758:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a75c:	str	r2, [r3, #-92]	; 0xffffffa4
   1a760:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a764:	add	r3, r3, #1
   1a768:	str	r3, [fp, #-104]	; 0xffffff98
   1a76c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a770:	cmp	r3, #0
   1a774:	beq	1a7d0 <flatcc_builder_vector_edit@@Base+0x1c0>
   1a778:	ldr	r2, [fp, #-108]	; 0xffffff94
   1a77c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a780:	add	r3, r2, r3
   1a784:	str	r3, [fp, #-108]	; 0xffffff94
   1a788:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a78c:	add	r3, r3, #1
   1a790:	lsl	r3, r3, #3
   1a794:	sub	r2, fp, #12
   1a798:	add	r3, r2, r3
   1a79c:	ldr	r2, [pc, #424]	; 1a94c <flatcc_builder_vector_edit@@Base+0x33c>
   1a7a0:	ldr	r2, [r4, r2]
   1a7a4:	str	r2, [r3, #-96]	; 0xffffffa0
   1a7a8:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a7ac:	add	r3, r3, #1
   1a7b0:	lsl	r3, r3, #3
   1a7b4:	sub	r2, fp, #12
   1a7b8:	add	r3, r2, r3
   1a7bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a7c0:	str	r2, [r3, #-92]	; 0xffffffa4
   1a7c4:	ldr	r3, [fp, #-104]	; 0xffffff98
   1a7c8:	add	r3, r3, #1
   1a7cc:	str	r3, [fp, #-104]	; 0xffffff98
   1a7d0:	ldr	r3, [fp, #-112]	; 0xffffff90
   1a7d4:	ldr	r3, [r3, #136]	; 0x88
   1a7d8:	mov	r2, r3
   1a7dc:	ldr	r3, [fp, #-108]	; 0xffffff94
   1a7e0:	sub	r3, r2, r3
   1a7e4:	str	r3, [fp, #-28]	; 0xffffffe4
   1a7e8:	mov	r3, #0
   1a7ec:	str	r3, [fp, #-16]
   1a7f0:	b	1a918 <flatcc_builder_vector_edit@@Base+0x308>
   1a7f4:	ldr	r3, [fp, #-16]
   1a7f8:	lsl	r3, r3, #2
   1a7fc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a800:	add	r3, r2, r3
   1a804:	ldr	r3, [r3]
   1a808:	cmp	r3, #0
   1a80c:	beq	1a8a8 <flatcc_builder_vector_edit@@Base+0x298>
   1a810:	ldr	r3, [fp, #-16]
   1a814:	lsl	r3, r3, #2
   1a818:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a81c:	add	r3, r2, r3
   1a820:	ldr	r3, [r3]
   1a824:	mov	r2, r3
   1a828:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a82c:	sub	r2, r2, r3
   1a830:	ldr	r3, [fp, #-16]
   1a834:	lsl	r3, r3, #2
   1a838:	sub	r3, r2, r3
   1a83c:	sub	r3, r3, #4
   1a840:	str	r3, [fp, #-32]	; 0xffffffe0
   1a844:	ldr	r3, [fp, #-16]
   1a848:	lsl	r3, r3, #2
   1a84c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1a850:	add	r4, r2, r3
   1a854:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a858:	bl	16354 <main@@Base+0xf4>
   1a85c:	mov	r3, r0
   1a860:	str	r3, [r4]
   1a864:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a868:	cmp	r3, #0
   1a86c:	beq	1a90c <flatcc_builder_vector_edit@@Base+0x2fc>
   1a870:	ldr	r2, [fp, #-124]	; 0xffffff84
   1a874:	ldr	r3, [fp, #-16]
   1a878:	add	r3, r2, r3
   1a87c:	ldrb	r3, [r3]
   1a880:	cmp	r3, #0
   1a884:	bne	1a90c <flatcc_builder_vector_edit@@Base+0x2fc>
   1a888:	ldr	r3, [pc, #192]	; 1a950 <flatcc_builder_vector_edit@@Base+0x340>
   1a88c:	add	r3, pc, r3
   1a890:	ldr	r2, [pc, #188]	; 1a954 <flatcc_builder_vector_edit@@Base+0x344>
   1a894:	ldr	r1, [pc, #188]	; 1a958 <flatcc_builder_vector_edit@@Base+0x348>
   1a898:	add	r1, pc, r1
   1a89c:	ldr	r0, [pc, #184]	; 1a95c <flatcc_builder_vector_edit@@Base+0x34c>
   1a8a0:	add	r0, pc, r0
   1a8a4:	bl	12504 <__assert_fail@plt>
   1a8a8:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a8ac:	cmp	r3, #0
   1a8b0:	beq	1a8ec <flatcc_builder_vector_edit@@Base+0x2dc>
   1a8b4:	ldr	r2, [fp, #-124]	; 0xffffff84
   1a8b8:	ldr	r3, [fp, #-16]
   1a8bc:	add	r3, r2, r3
   1a8c0:	ldrb	r3, [r3]
   1a8c4:	cmp	r3, #0
   1a8c8:	beq	1a90c <flatcc_builder_vector_edit@@Base+0x2fc>
   1a8cc:	ldr	r3, [pc, #140]	; 1a960 <flatcc_builder_vector_edit@@Base+0x350>
   1a8d0:	add	r3, pc, r3
   1a8d4:	ldr	r2, [pc, #136]	; 1a964 <flatcc_builder_vector_edit@@Base+0x354>
   1a8d8:	ldr	r1, [pc, #136]	; 1a968 <flatcc_builder_vector_edit@@Base+0x358>
   1a8dc:	add	r1, pc, r1
   1a8e0:	ldr	r0, [pc, #132]	; 1a96c <flatcc_builder_vector_edit@@Base+0x35c>
   1a8e4:	add	r0, pc, r0
   1a8e8:	bl	12504 <__assert_fail@plt>
   1a8ec:	ldr	r3, [pc, #124]	; 1a970 <flatcc_builder_vector_edit@@Base+0x360>
   1a8f0:	add	r3, pc, r3
   1a8f4:	ldr	r2, [pc, #120]	; 1a974 <flatcc_builder_vector_edit@@Base+0x364>
   1a8f8:	ldr	r1, [pc, #120]	; 1a978 <flatcc_builder_vector_edit@@Base+0x368>
   1a8fc:	add	r1, pc, r1
   1a900:	ldr	r0, [pc, #116]	; 1a97c <flatcc_builder_vector_edit@@Base+0x36c>
   1a904:	add	r0, pc, r0
   1a908:	bl	12504 <__assert_fail@plt>
   1a90c:	ldr	r3, [fp, #-16]
   1a910:	add	r3, r3, #1
   1a914:	str	r3, [fp, #-16]
   1a918:	ldr	r2, [fp, #-16]
   1a91c:	ldr	r3, [fp, #-120]	; 0xffffff88
   1a920:	cmp	r2, r3
   1a924:	bcc	1a7f4 <flatcc_builder_vector_edit@@Base+0x1e4>
   1a928:	sub	r3, fp, #108	; 0x6c
   1a92c:	mov	r1, r3
   1a930:	ldr	r0, [fp, #-112]	; 0xffffff90
   1a934:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   1a938:	mov	r3, r0
   1a93c:	mov	r0, r3
   1a940:	sub	sp, fp, #8
   1a944:	pop	{r4, fp, pc}
   1a948:	andeq	sp, r1, r0, lsr #19
   1a94c:	andeq	r0, r0, r4, asr r0
   1a950:	andeq	ip, r0, r8, asr r2
   1a954:			; <UNDEFINED> instruction: 0x000005b1
   1a958:	andeq	fp, r0, ip, asr #21
   1a95c:	andeq	fp, r0, r4, asr #27
   1a960:	andeq	ip, r0, r4, lsl r2
   1a964:			; <UNDEFINED> instruction: 0x000005b5
   1a968:	andeq	fp, r0, r8, lsl #21
   1a96c:	muleq	r0, r0, sp
   1a970:	strdeq	ip, [r0], -r4
   1a974:			; <UNDEFINED> instruction: 0x000005b7
   1a978:	andeq	fp, r0, r8, ror #20
   1a97c:	andeq	fp, r0, r0, asr #21

0001a980 <flatcc_builder_create_offset_vector_direct@@Base>:
   1a980:	push	{fp, lr}
   1a984:	add	fp, sp, #4
   1a988:	sub	sp, sp, #16
   1a98c:	str	r0, [fp, #-8]
   1a990:	str	r1, [fp, #-12]
   1a994:	str	r2, [fp, #-16]
   1a998:	mov	r3, #0
   1a99c:	ldr	r2, [fp, #-16]
   1a9a0:	ldr	r1, [fp, #-12]
   1a9a4:	ldr	r0, [fp, #-8]
   1a9a8:	bl	1a638 <flatcc_builder_vector_edit@@Base+0x28>
   1a9ac:	mov	r3, r0
   1a9b0:	mov	r0, r3
   1a9b4:	sub	sp, fp, #4
   1a9b8:	pop	{fp, pc}

0001a9bc <flatcc_builder_end_offset_vector@@Base>:
   1a9bc:	push	{fp, lr}
   1a9c0:	add	fp, sp, #4
   1a9c4:	sub	sp, sp, #16
   1a9c8:	str	r0, [fp, #-16]
   1a9cc:	ldr	r3, [fp, #-16]
   1a9d0:	ldr	r3, [r3, #32]
   1a9d4:	ldrh	r3, [r3, #14]
   1a9d8:	cmp	r3, #5
   1a9dc:	beq	1aa00 <flatcc_builder_end_offset_vector@@Base+0x44>
   1a9e0:	ldr	r3, [pc, #104]	; 1aa50 <flatcc_builder_end_offset_vector@@Base+0x94>
   1a9e4:	add	r3, pc, r3
   1a9e8:	ldr	r2, [pc, #100]	; 1aa54 <flatcc_builder_end_offset_vector@@Base+0x98>
   1a9ec:	ldr	r1, [pc, #100]	; 1aa58 <flatcc_builder_end_offset_vector@@Base+0x9c>
   1a9f0:	add	r1, pc, r1
   1a9f4:	ldr	r0, [pc, #96]	; 1aa5c <flatcc_builder_end_offset_vector@@Base+0xa0>
   1a9f8:	add	r0, pc, r0
   1a9fc:	bl	12504 <__assert_fail@plt>
   1aa00:	ldr	r3, [fp, #-16]
   1aa04:	ldr	r1, [r3, #16]
   1aa08:	ldr	r3, [fp, #-16]
   1aa0c:	ldr	r3, [r3, #32]
   1aa10:	ldr	r3, [r3, #20]
   1aa14:	mov	r2, r3
   1aa18:	ldr	r0, [fp, #-16]
   1aa1c:	bl	1a980 <flatcc_builder_create_offset_vector_direct@@Base>
   1aa20:	str	r0, [fp, #-8]
   1aa24:	ldr	r3, [fp, #-8]
   1aa28:	cmp	r3, #0
   1aa2c:	bne	1aa38 <flatcc_builder_end_offset_vector@@Base+0x7c>
   1aa30:	mov	r3, #0
   1aa34:	b	1aa44 <flatcc_builder_end_offset_vector@@Base+0x88>
   1aa38:	ldr	r0, [fp, #-16]
   1aa3c:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1aa40:	ldr	r3, [fp, #-8]
   1aa44:	mov	r0, r3
   1aa48:	sub	sp, fp, #4
   1aa4c:	pop	{fp, pc}
   1aa50:	andeq	ip, r0, r0, lsr #2
   1aa54:	andeq	r0, r0, r8, asr #11
   1aa58:	andeq	fp, r0, r4, ror r9
   1aa5c:	andeq	fp, r0, ip, lsl fp

0001aa60 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   1aa60:	push	{fp, lr}
   1aa64:	add	fp, sp, #4
   1aa68:	sub	sp, sp, #16
   1aa6c:	str	r0, [fp, #-16]
   1aa70:	str	r1, [fp, #-20]	; 0xffffffec
   1aa74:	ldr	r3, [fp, #-16]
   1aa78:	ldr	r3, [r3, #32]
   1aa7c:	ldrh	r3, [r3, #14]
   1aa80:	cmp	r3, #5
   1aa84:	beq	1aaa8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x48>
   1aa88:	ldr	r3, [pc, #104]	; 1aaf8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
   1aa8c:	add	r3, pc, r3
   1aa90:	ldr	r2, [pc, #100]	; 1aafc <flatcc_builder_end_offset_vector_for_unions@@Base+0x9c>
   1aa94:	ldr	r1, [pc, #100]	; 1ab00 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa0>
   1aa98:	add	r1, pc, r1
   1aa9c:	ldr	r0, [pc, #96]	; 1ab04 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   1aaa0:	add	r0, pc, r0
   1aaa4:	bl	12504 <__assert_fail@plt>
   1aaa8:	ldr	r3, [fp, #-16]
   1aaac:	ldr	r1, [r3, #16]
   1aab0:	ldr	r3, [fp, #-16]
   1aab4:	ldr	r3, [r3, #32]
   1aab8:	ldr	r2, [r3, #20]
   1aabc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aac0:	ldr	r0, [fp, #-16]
   1aac4:	bl	1a638 <flatcc_builder_vector_edit@@Base+0x28>
   1aac8:	str	r0, [fp, #-8]
   1aacc:	ldr	r3, [fp, #-8]
   1aad0:	cmp	r3, #0
   1aad4:	bne	1aae0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x80>
   1aad8:	mov	r3, #0
   1aadc:	b	1aaec <flatcc_builder_end_offset_vector_for_unions@@Base+0x8c>
   1aae0:	ldr	r0, [fp, #-16]
   1aae4:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1aae8:	ldr	r3, [fp, #-8]
   1aaec:	mov	r0, r3
   1aaf0:	sub	sp, fp, #4
   1aaf4:	pop	{fp, pc}
   1aaf8:	muleq	r0, ip, r0
   1aafc:	ldrdeq	r0, [r0], -r5
   1ab00:	andeq	fp, r0, ip, asr #17
   1ab04:	andeq	fp, r0, r4, ror sl

0001ab08 <flatcc_builder_offset_vector_edit@@Base>:
   1ab08:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab0c:	add	fp, sp, #0
   1ab10:	sub	sp, sp, #12
   1ab14:	str	r0, [fp, #-8]
   1ab18:	ldr	r3, [fp, #-8]
   1ab1c:	ldr	r3, [r3, #16]
   1ab20:	mov	r0, r3
   1ab24:	add	sp, fp, #0
   1ab28:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab2c:	bx	lr

0001ab30 <flatcc_builder_offset_vector_count@@Base>:
   1ab30:	push	{fp}		; (str fp, [sp, #-4]!)
   1ab34:	add	fp, sp, #0
   1ab38:	sub	sp, sp, #12
   1ab3c:	str	r0, [fp, #-8]
   1ab40:	ldr	r3, [fp, #-8]
   1ab44:	ldr	r3, [r3, #32]
   1ab48:	ldr	r3, [r3, #20]
   1ab4c:	mov	r0, r3
   1ab50:	add	sp, fp, #0
   1ab54:	pop	{fp}		; (ldr fp, [sp], #4)
   1ab58:	bx	lr

0001ab5c <flatcc_builder_table_add_union@@Base>:
   1ab5c:	push	{fp, lr}
   1ab60:	add	fp, sp, #4
   1ab64:	sub	sp, sp, #24
   1ab68:	str	r0, [fp, #-16]
   1ab6c:	str	r1, [fp, #-20]	; 0xffffffec
   1ab70:	sub	r1, fp, #28
   1ab74:	stm	r1, {r2, r3}
   1ab78:	ldr	r3, [fp, #-16]
   1ab7c:	ldr	r3, [r3, #32]
   1ab80:	ldrh	r3, [r3, #14]
   1ab84:	cmp	r3, #3
   1ab88:	beq	1abac <flatcc_builder_table_add_union@@Base+0x50>
   1ab8c:	ldr	r3, [pc, #352]	; 1acf4 <flatcc_builder_table_add_union@@Base+0x198>
   1ab90:	add	r3, pc, r3
   1ab94:	ldr	r2, [pc, #348]	; 1acf8 <flatcc_builder_table_add_union@@Base+0x19c>
   1ab98:	ldr	r1, [pc, #348]	; 1acfc <flatcc_builder_table_add_union@@Base+0x1a0>
   1ab9c:	add	r1, pc, r1
   1aba0:	ldr	r0, [pc, #344]	; 1ad00 <flatcc_builder_table_add_union@@Base+0x1a4>
   1aba4:	add	r0, pc, r0
   1aba8:	bl	12504 <__assert_fail@plt>
   1abac:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1abb0:	cmp	r3, #0
   1abb4:	bne	1ac04 <flatcc_builder_table_add_union@@Base+0xa8>
   1abb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1abbc:	cmp	r3, #0
   1abc0:	beq	1ac04 <flatcc_builder_table_add_union@@Base+0xa8>
   1abc4:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1abc8:	cmp	r3, #0
   1abcc:	bne	1abfc <flatcc_builder_table_add_union@@Base+0xa0>
   1abd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1abd4:	cmp	r3, #0
   1abd8:	beq	1abfc <flatcc_builder_table_add_union@@Base+0xa0>
   1abdc:	ldr	r3, [pc, #288]	; 1ad04 <flatcc_builder_table_add_union@@Base+0x1a8>
   1abe0:	add	r3, pc, r3
   1abe4:	ldr	r2, [pc, #284]	; 1ad08 <flatcc_builder_table_add_union@@Base+0x1ac>
   1abe8:	ldr	r1, [pc, #284]	; 1ad0c <flatcc_builder_table_add_union@@Base+0x1b0>
   1abec:	add	r1, pc, r1
   1abf0:	ldr	r0, [pc, #280]	; 1ad10 <flatcc_builder_table_add_union@@Base+0x1b4>
   1abf4:	add	r0, pc, r0
   1abf8:	bl	12504 <__assert_fail@plt>
   1abfc:	mvn	r3, #0
   1ac00:	b	1ace8 <flatcc_builder_table_add_union@@Base+0x18c>
   1ac04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ac08:	cmp	r3, #0
   1ac0c:	beq	1ac6c <flatcc_builder_table_add_union@@Base+0x110>
   1ac10:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ac14:	ldr	r0, [fp, #-16]
   1ac18:	bl	1bca4 <flatcc_builder_table_add_offset@@Base>
   1ac1c:	str	r0, [fp, #-8]
   1ac20:	ldr	r3, [fp, #-8]
   1ac24:	cmp	r3, #0
   1ac28:	bne	1ac60 <flatcc_builder_table_add_union@@Base+0x104>
   1ac2c:	ldr	r3, [fp, #-8]
   1ac30:	cmp	r3, #0
   1ac34:	bne	1ac58 <flatcc_builder_table_add_union@@Base+0xfc>
   1ac38:	ldr	r3, [pc, #212]	; 1ad14 <flatcc_builder_table_add_union@@Base+0x1b8>
   1ac3c:	add	r3, pc, r3
   1ac40:	ldr	r2, [pc, #208]	; 1ad18 <flatcc_builder_table_add_union@@Base+0x1bc>
   1ac44:	ldr	r1, [pc, #208]	; 1ad1c <flatcc_builder_table_add_union@@Base+0x1c0>
   1ac48:	add	r1, pc, r1
   1ac4c:	ldr	r0, [pc, #204]	; 1ad20 <flatcc_builder_table_add_union@@Base+0x1c4>
   1ac50:	add	r0, pc, r0
   1ac54:	bl	12504 <__assert_fail@plt>
   1ac58:	mvn	r3, #0
   1ac5c:	b	1ace8 <flatcc_builder_table_add_union@@Base+0x18c>
   1ac60:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ac64:	ldr	r3, [fp, #-8]
   1ac68:	str	r2, [r3]
   1ac6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac70:	sub	r1, r3, #1
   1ac74:	mov	r3, #1
   1ac78:	mov	r2, #1
   1ac7c:	ldr	r0, [fp, #-16]
   1ac80:	bl	1ba48 <flatcc_builder_table_add@@Base>
   1ac84:	str	r0, [fp, #-12]
   1ac88:	ldr	r3, [fp, #-12]
   1ac8c:	cmp	r3, #0
   1ac90:	bne	1acc8 <flatcc_builder_table_add_union@@Base+0x16c>
   1ac94:	ldr	r3, [fp, #-12]
   1ac98:	cmp	r3, #0
   1ac9c:	bne	1acc0 <flatcc_builder_table_add_union@@Base+0x164>
   1aca0:	ldr	r3, [pc, #124]	; 1ad24 <flatcc_builder_table_add_union@@Base+0x1c8>
   1aca4:	add	r3, pc, r3
   1aca8:	ldr	r2, [pc, #120]	; 1ad28 <flatcc_builder_table_add_union@@Base+0x1cc>
   1acac:	ldr	r1, [pc, #120]	; 1ad2c <flatcc_builder_table_add_union@@Base+0x1d0>
   1acb0:	add	r1, pc, r1
   1acb4:	ldr	r0, [pc, #116]	; 1ad30 <flatcc_builder_table_add_union@@Base+0x1d4>
   1acb8:	add	r0, pc, r0
   1acbc:	bl	12504 <__assert_fail@plt>
   1acc0:	mvn	r3, #0
   1acc4:	b	1ace8 <flatcc_builder_table_add_union@@Base+0x18c>
   1acc8:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   1accc:	mov	r0, r3
   1acd0:	bl	16378 <main@@Base+0x118>
   1acd4:	mov	r3, r0
   1acd8:	mov	r2, r3
   1acdc:	ldr	r3, [fp, #-12]
   1ace0:	strb	r2, [r3]
   1ace4:	mov	r3, #0
   1ace8:	mov	r0, r3
   1acec:	sub	sp, fp, #4
   1acf0:	pop	{fp, pc}
   1acf4:	andeq	fp, r0, r4, asr #31
   1acf8:	andeq	r0, r0, lr, ror #11
   1acfc:	andeq	fp, r0, r8, asr #15
   1ad00:	andeq	fp, r0, r0, lsl #21
   1ad04:	andeq	fp, r0, r4, ror pc
   1ad08:	andeq	r0, r0, pc, ror #11
   1ad0c:	andeq	fp, r0, r8, ror r7
   1ad10:	muleq	r0, r0, sl
   1ad14:	andeq	fp, r0, r8, lsl pc
   1ad18:	strdeq	r0, [r0], -r2
   1ad1c:	andeq	fp, r0, ip, lsl r7
   1ad20:	andeq	fp, r0, r8, asr sl
   1ad24:			; <UNDEFINED> instruction: 0x0000beb0
   1ad28:	strdeq	r0, [r0], -r6
   1ad2c:			; <UNDEFINED> instruction: 0x0000b6b4
   1ad30:	strdeq	fp, [r0], -ip

0001ad34 <flatcc_builder_table_add_union_vector@@Base>:
   1ad34:	push	{fp, lr}
   1ad38:	add	fp, sp, #4
   1ad3c:	sub	sp, sp, #24
   1ad40:	str	r0, [fp, #-16]
   1ad44:	str	r1, [fp, #-20]	; 0xffffffec
   1ad48:	sub	r1, fp, #28
   1ad4c:	stm	r1, {r2, r3}
   1ad50:	ldr	r3, [fp, #-16]
   1ad54:	ldr	r3, [r3, #32]
   1ad58:	ldrh	r3, [r3, #14]
   1ad5c:	cmp	r3, #3
   1ad60:	beq	1ad84 <flatcc_builder_table_add_union_vector@@Base+0x50>
   1ad64:	ldr	r3, [pc, #396]	; 1aef8 <flatcc_builder_table_add_union_vector@@Base+0x1c4>
   1ad68:	add	r3, pc, r3
   1ad6c:	mov	r2, #1536	; 0x600
   1ad70:	ldr	r1, [pc, #388]	; 1aefc <flatcc_builder_table_add_union_vector@@Base+0x1c8>
   1ad74:	add	r1, pc, r1
   1ad78:	ldr	r0, [pc, #384]	; 1af00 <flatcc_builder_table_add_union_vector@@Base+0x1cc>
   1ad7c:	add	r0, pc, r0
   1ad80:	bl	12504 <__assert_fail@plt>
   1ad84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ad88:	cmp	r3, #0
   1ad8c:	moveq	r3, #1
   1ad90:	movne	r3, #0
   1ad94:	uxtb	r2, r3
   1ad98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ad9c:	cmp	r3, #0
   1ada0:	moveq	r3, #1
   1ada4:	movne	r3, #0
   1ada8:	uxtb	r3, r3
   1adac:	eor	r3, r3, r2
   1adb0:	uxtb	r3, r3
   1adb4:	cmp	r3, #0
   1adb8:	beq	1ae1c <flatcc_builder_table_add_union_vector@@Base+0xe8>
   1adbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1adc0:	cmp	r3, #0
   1adc4:	movne	r3, #1
   1adc8:	moveq	r3, #0
   1adcc:	uxtb	r2, r3
   1add0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1add4:	cmp	r3, #0
   1add8:	moveq	r3, #1
   1addc:	movne	r3, #0
   1ade0:	uxtb	r3, r3
   1ade4:	eor	r3, r3, r2
   1ade8:	uxtb	r3, r3
   1adec:	cmp	r3, #0
   1adf0:	bne	1ae14 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   1adf4:	ldr	r3, [pc, #264]	; 1af04 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   1adf8:	add	r3, pc, r3
   1adfc:	ldr	r2, [pc, #260]	; 1af08 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   1ae00:	ldr	r1, [pc, #260]	; 1af0c <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   1ae04:	add	r1, pc, r1
   1ae08:	ldr	r0, [pc, #256]	; 1af10 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   1ae0c:	add	r0, pc, r0
   1ae10:	bl	12504 <__assert_fail@plt>
   1ae14:	mvn	r3, #0
   1ae18:	b	1aeec <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1ae1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ae20:	cmp	r3, #0
   1ae24:	beq	1aee8 <flatcc_builder_table_add_union_vector@@Base+0x1b4>
   1ae28:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae2c:	sub	r3, r3, #1
   1ae30:	mov	r1, r3
   1ae34:	ldr	r0, [fp, #-16]
   1ae38:	bl	1bca4 <flatcc_builder_table_add_offset@@Base>
   1ae3c:	str	r0, [fp, #-8]
   1ae40:	ldr	r3, [fp, #-8]
   1ae44:	cmp	r3, #0
   1ae48:	bne	1ae80 <flatcc_builder_table_add_union_vector@@Base+0x14c>
   1ae4c:	ldr	r3, [fp, #-8]
   1ae50:	cmp	r3, #0
   1ae54:	bne	1ae78 <flatcc_builder_table_add_union_vector@@Base+0x144>
   1ae58:	ldr	r3, [pc, #180]	; 1af14 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   1ae5c:	add	r3, pc, r3
   1ae60:	ldr	r2, [pc, #176]	; 1af18 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   1ae64:	ldr	r1, [pc, #176]	; 1af1c <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   1ae68:	add	r1, pc, r1
   1ae6c:	ldr	r0, [pc, #172]	; 1af20 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   1ae70:	add	r0, pc, r0
   1ae74:	bl	12504 <__assert_fail@plt>
   1ae78:	mvn	r3, #0
   1ae7c:	b	1aeec <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1ae80:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1ae84:	ldr	r3, [fp, #-8]
   1ae88:	str	r2, [r3]
   1ae8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ae90:	ldr	r0, [fp, #-16]
   1ae94:	bl	1bca4 <flatcc_builder_table_add_offset@@Base>
   1ae98:	str	r0, [fp, #-8]
   1ae9c:	ldr	r3, [fp, #-8]
   1aea0:	cmp	r3, #0
   1aea4:	bne	1aedc <flatcc_builder_table_add_union_vector@@Base+0x1a8>
   1aea8:	ldr	r3, [fp, #-8]
   1aeac:	cmp	r3, #0
   1aeb0:	bne	1aed4 <flatcc_builder_table_add_union_vector@@Base+0x1a0>
   1aeb4:	ldr	r3, [pc, #104]	; 1af24 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   1aeb8:	add	r3, pc, r3
   1aebc:	ldr	r2, [pc, #100]	; 1af28 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   1aec0:	ldr	r1, [pc, #100]	; 1af2c <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   1aec4:	add	r1, pc, r1
   1aec8:	ldr	r0, [pc, #96]	; 1af30 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   1aecc:	add	r0, pc, r0
   1aed0:	bl	12504 <__assert_fail@plt>
   1aed4:	mvn	r3, #0
   1aed8:	b	1aeec <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   1aedc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1aee0:	ldr	r3, [fp, #-8]
   1aee4:	str	r2, [r3]
   1aee8:	mov	r3, #0
   1aeec:	mov	r0, r3
   1aef0:	sub	sp, fp, #4
   1aef4:	pop	{fp, pc}
   1aef8:	andeq	fp, r0, ip, lsl #28
   1aefc:	strdeq	fp, [r0], -r0
   1af00:	andeq	fp, r0, r8, lsr #17
   1af04:	andeq	fp, r0, ip, ror sp
   1af08:	andeq	r0, r0, r1, lsl #12
   1af0c:	andeq	fp, r0, r0, ror #10
   1af10:			; <UNDEFINED> instruction: 0x0000b8b4
   1af14:	andeq	fp, r0, r8, lsl sp
   1af18:	andeq	r0, r0, r4, lsl #12
   1af1c:	strdeq	fp, [r0], -ip
   1af20:	andeq	fp, r0, r8, lsr r8
   1af24:			; <UNDEFINED> instruction: 0x0000bcbc
   1af28:	andeq	r0, r0, r8, lsl #12
   1af2c:	andeq	fp, r0, r0, lsr #9
   1af30:	ldrdeq	fp, [r0], -ip

0001af34 <flatcc_builder_create_union_vector@@Base>:
   1af34:	push	{fp, lr}
   1af38:	add	fp, sp, #4
   1af3c:	sub	sp, sp, #48	; 0x30
   1af40:	str	r0, [fp, #-32]	; 0xffffffe0
   1af44:	str	r1, [fp, #-36]	; 0xffffffdc
   1af48:	str	r2, [fp, #-40]	; 0xffffffd8
   1af4c:	str	r3, [fp, #-44]	; 0xffffffd4
   1af50:	mov	r3, #0
   1af54:	str	r3, [fp, #-24]	; 0xffffffe8
   1af58:	mov	r3, #0
   1af5c:	str	r3, [fp, #-20]	; 0xffffffec
   1af60:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1af64:	bl	19368 <flatcc_builder_start_offset_vector@@Base>
   1af68:	mov	r3, r0
   1af6c:	cmp	r3, #0
   1af70:	beq	1af8c <flatcc_builder_create_union_vector@@Base+0x58>
   1af74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1af78:	mov	r2, r3
   1af7c:	sub	r3, fp, #24
   1af80:	ldm	r3, {r0, r1}
   1af84:	stm	r2, {r0, r1}
   1af88:	b	1b0a8 <flatcc_builder_create_union_vector@@Base+0x174>
   1af8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1af90:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1af94:	bl	18c14 <flatcc_builder_extend_offset_vector@@Base>
   1af98:	mov	r3, r0
   1af9c:	cmp	r3, #0
   1afa0:	bne	1afbc <flatcc_builder_create_union_vector@@Base+0x88>
   1afa4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1afa8:	mov	r2, r3
   1afac:	sub	r3, fp, #24
   1afb0:	ldm	r3, {r0, r1}
   1afb4:	stm	r2, {r0, r1}
   1afb8:	b	1b0a8 <flatcc_builder_create_union_vector@@Base+0x174>
   1afbc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1afc0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1afc4:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   1afc8:	str	r0, [fp, #-12]
   1afcc:	ldr	r3, [fp, #-12]
   1afd0:	cmp	r3, #0
   1afd4:	bne	1aff0 <flatcc_builder_create_union_vector@@Base+0xbc>
   1afd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1afdc:	mov	r2, r3
   1afe0:	sub	r3, fp, #24
   1afe4:	ldm	r3, {r0, r1}
   1afe8:	stm	r2, {r0, r1}
   1afec:	b	1b0a8 <flatcc_builder_create_union_vector@@Base+0x174>
   1aff0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1aff4:	bl	1ab08 <flatcc_builder_offset_vector_edit@@Base>
   1aff8:	str	r0, [fp, #-16]
   1affc:	mov	r3, #0
   1b000:	str	r3, [fp, #-8]
   1b004:	b	1b060 <flatcc_builder_create_union_vector@@Base+0x12c>
   1b008:	ldr	r2, [fp, #-12]
   1b00c:	ldr	r3, [fp, #-8]
   1b010:	add	r3, r2, r3
   1b014:	ldr	r2, [fp, #-8]
   1b018:	lsl	r2, r2, #3
   1b01c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1b020:	add	r2, r1, r2
   1b024:	ldrb	r2, [r2]
   1b028:	strb	r2, [r3]
   1b02c:	ldr	r3, [fp, #-8]
   1b030:	lsl	r3, r3, #2
   1b034:	ldr	r2, [fp, #-16]
   1b038:	add	r3, r2, r3
   1b03c:	ldr	r2, [fp, #-8]
   1b040:	lsl	r2, r2, #3
   1b044:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1b048:	add	r2, r1, r2
   1b04c:	ldr	r2, [r2, #4]
   1b050:	str	r2, [r3]
   1b054:	ldr	r3, [fp, #-8]
   1b058:	add	r3, r3, #1
   1b05c:	str	r3, [fp, #-8]
   1b060:	ldr	r2, [fp, #-8]
   1b064:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b068:	cmp	r2, r3
   1b06c:	bcc	1b008 <flatcc_builder_create_union_vector@@Base+0xd4>
   1b070:	sub	r0, fp, #24
   1b074:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b078:	str	r3, [sp]
   1b07c:	ldr	r3, [fp, #-16]
   1b080:	ldr	r2, [fp, #-12]
   1b084:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b088:	bl	1b0b4 <flatcc_builder_create_union_vector_direct@@Base>
   1b08c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1b090:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1b094:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1b098:	mov	r2, r3
   1b09c:	sub	r3, fp, #24
   1b0a0:	ldm	r3, {r0, r1}
   1b0a4:	stm	r2, {r0, r1}
   1b0a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b0ac:	sub	sp, fp, #4
   1b0b0:	pop	{fp, pc}

0001b0b4 <flatcc_builder_create_union_vector_direct@@Base>:
   1b0b4:	push	{fp, lr}
   1b0b8:	add	fp, sp, #4
   1b0bc:	sub	sp, sp, #32
   1b0c0:	str	r0, [fp, #-16]
   1b0c4:	str	r1, [fp, #-20]	; 0xffffffec
   1b0c8:	str	r2, [fp, #-24]	; 0xffffffe8
   1b0cc:	str	r3, [fp, #-28]	; 0xffffffe4
   1b0d0:	mov	r3, #0
   1b0d4:	str	r3, [fp, #-12]
   1b0d8:	mov	r3, #0
   1b0dc:	str	r3, [fp, #-8]
   1b0e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b0e4:	ldr	r2, [fp, #4]
   1b0e8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1b0ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b0f0:	bl	1a638 <flatcc_builder_vector_edit@@Base+0x28>
   1b0f4:	mov	r3, r0
   1b0f8:	str	r3, [fp, #-8]
   1b0fc:	ldr	r3, [fp, #-8]
   1b100:	cmp	r3, #0
   1b104:	bne	1b120 <flatcc_builder_create_union_vector_direct@@Base+0x6c>
   1b108:	ldr	r3, [fp, #-16]
   1b10c:	mov	r2, r3
   1b110:	sub	r3, fp, #12
   1b114:	ldm	r3, {r0, r1}
   1b118:	stm	r2, {r0, r1}
   1b11c:	b	1b184 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   1b120:	mvn	r3, #0
   1b124:	str	r3, [sp, #4]
   1b128:	mov	r3, #1
   1b12c:	str	r3, [sp]
   1b130:	mov	r3, #1
   1b134:	ldr	r2, [fp, #4]
   1b138:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b13c:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b140:	bl	1a2f4 <flatcc_builder_create_vector@@Base>
   1b144:	mov	r3, r0
   1b148:	str	r3, [fp, #-12]
   1b14c:	ldr	r3, [fp, #-12]
   1b150:	cmp	r3, #0
   1b154:	bne	1b170 <flatcc_builder_create_union_vector_direct@@Base+0xbc>
   1b158:	ldr	r3, [fp, #-16]
   1b15c:	mov	r2, r3
   1b160:	sub	r3, fp, #12
   1b164:	ldm	r3, {r0, r1}
   1b168:	stm	r2, {r0, r1}
   1b16c:	b	1b184 <flatcc_builder_create_union_vector_direct@@Base+0xd0>
   1b170:	ldr	r3, [fp, #-16]
   1b174:	mov	r2, r3
   1b178:	sub	r3, fp, #12
   1b17c:	ldm	r3, {r0, r1}
   1b180:	stm	r2, {r0, r1}
   1b184:	ldr	r0, [fp, #-16]
   1b188:	sub	sp, fp, #4
   1b18c:	pop	{fp, pc}

0001b190 <flatcc_builder_start_union_vector@@Base>:
   1b190:	push	{fp, lr}
   1b194:	add	fp, sp, #4
   1b198:	sub	sp, sp, #8
   1b19c:	str	r0, [fp, #-8]
   1b1a0:	mov	r1, #4
   1b1a4:	ldr	r0, [fp, #-8]
   1b1a8:	bl	176e8 <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   1b1ac:	mov	r3, r0
   1b1b0:	cmp	r3, #0
   1b1b4:	beq	1b1c0 <flatcc_builder_start_union_vector@@Base+0x30>
   1b1b8:	mvn	r3, #0
   1b1bc:	b	1b200 <flatcc_builder_start_union_vector@@Base+0x70>
   1b1c0:	ldr	r3, [fp, #-8]
   1b1c4:	ldr	r3, [r3, #32]
   1b1c8:	mov	r2, #8
   1b1cc:	str	r2, [r3, #16]
   1b1d0:	ldr	r3, [fp, #-8]
   1b1d4:	ldr	r3, [r3, #32]
   1b1d8:	mov	r2, #0
   1b1dc:	str	r2, [r3, #20]
   1b1e0:	ldr	r3, [fp, #-8]
   1b1e4:	ldr	r3, [r3, #32]
   1b1e8:	mov	r2, #7
   1b1ec:	strh	r2, [r3, #14]
   1b1f0:	mvn	r1, #3
   1b1f4:	ldr	r0, [fp, #-8]
   1b1f8:	bl	16660 <flatcc_builder_default_alloc@@Base+0x1c8>
   1b1fc:	mov	r3, #0
   1b200:	mov	r0, r3
   1b204:	sub	sp, fp, #4
   1b208:	pop	{fp, pc}

0001b20c <flatcc_builder_end_union_vector@@Base>:
   1b20c:	push	{fp, lr}
   1b210:	add	fp, sp, #4
   1b214:	sub	sp, sp, #48	; 0x30
   1b218:	str	r0, [fp, #-40]	; 0xffffffd8
   1b21c:	str	r1, [fp, #-44]	; 0xffffffd4
   1b220:	mov	r3, #0
   1b224:	str	r3, [fp, #-32]	; 0xffffffe0
   1b228:	mov	r3, #0
   1b22c:	str	r3, [fp, #-28]	; 0xffffffe4
   1b230:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1b234:	ldr	r3, [r3, #32]
   1b238:	ldrh	r3, [r3, #14]
   1b23c:	cmp	r3, #7
   1b240:	beq	1b264 <flatcc_builder_end_union_vector@@Base+0x58>
   1b244:	ldr	r3, [pc, #320]	; 1b38c <flatcc_builder_end_union_vector@@Base+0x180>
   1b248:	add	r3, pc, r3
   1b24c:	ldr	r2, [pc, #316]	; 1b390 <flatcc_builder_end_union_vector@@Base+0x184>
   1b250:	ldr	r1, [pc, #316]	; 1b394 <flatcc_builder_end_union_vector@@Base+0x188>
   1b254:	add	r1, pc, r1
   1b258:	ldr	r0, [pc, #312]	; 1b398 <flatcc_builder_end_union_vector@@Base+0x18c>
   1b25c:	add	r0, pc, r0
   1b260:	bl	12504 <__assert_fail@plt>
   1b264:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b268:	bl	1b3c4 <flatcc_builder_union_vector_count@@Base>
   1b26c:	str	r0, [fp, #-12]
   1b270:	ldr	r2, [fp, #-12]
   1b274:	mov	r3, r2
   1b278:	lsl	r3, r3, #2
   1b27c:	add	r3, r3, r2
   1b280:	mov	r1, r3
   1b284:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b288:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   1b28c:	str	r0, [fp, #-16]
   1b290:	ldr	r3, [fp, #-16]
   1b294:	cmp	r3, #0
   1b298:	bne	1b2b4 <flatcc_builder_end_union_vector@@Base+0xa8>
   1b29c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b2a0:	mov	r2, r3
   1b2a4:	sub	r3, fp, #32
   1b2a8:	ldm	r3, {r0, r1}
   1b2ac:	stm	r2, {r0, r1}
   1b2b0:	b	1b380 <flatcc_builder_end_union_vector@@Base+0x174>
   1b2b4:	ldr	r3, [fp, #-12]
   1b2b8:	lsl	r3, r3, #2
   1b2bc:	ldr	r2, [fp, #-16]
   1b2c0:	add	r3, r2, r3
   1b2c4:	str	r3, [fp, #-20]	; 0xffffffec
   1b2c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b2cc:	bl	1b39c <flatcc_builder_union_vector_edit@@Base>
   1b2d0:	str	r0, [fp, #-24]	; 0xffffffe8
   1b2d4:	mov	r3, #0
   1b2d8:	str	r3, [fp, #-8]
   1b2dc:	b	1b338 <flatcc_builder_end_union_vector@@Base+0x12c>
   1b2e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b2e4:	ldr	r3, [fp, #-8]
   1b2e8:	add	r3, r2, r3
   1b2ec:	ldr	r2, [fp, #-8]
   1b2f0:	lsl	r2, r2, #3
   1b2f4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b2f8:	add	r2, r1, r2
   1b2fc:	ldrb	r2, [r2]
   1b300:	strb	r2, [r3]
   1b304:	ldr	r3, [fp, #-8]
   1b308:	lsl	r3, r3, #2
   1b30c:	ldr	r2, [fp, #-16]
   1b310:	add	r3, r2, r3
   1b314:	ldr	r2, [fp, #-8]
   1b318:	lsl	r2, r2, #3
   1b31c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b320:	add	r2, r1, r2
   1b324:	ldr	r2, [r2, #4]
   1b328:	str	r2, [r3]
   1b32c:	ldr	r3, [fp, #-8]
   1b330:	add	r3, r3, #1
   1b334:	str	r3, [fp, #-8]
   1b338:	ldr	r2, [fp, #-8]
   1b33c:	ldr	r3, [fp, #-12]
   1b340:	cmp	r2, r3
   1b344:	bcc	1b2e0 <flatcc_builder_end_union_vector@@Base+0xd4>
   1b348:	sub	r0, fp, #32
   1b34c:	ldr	r3, [fp, #-12]
   1b350:	str	r3, [sp]
   1b354:	ldr	r3, [fp, #-16]
   1b358:	ldr	r2, [fp, #-20]	; 0xffffffec
   1b35c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1b360:	bl	1b0b4 <flatcc_builder_create_union_vector_direct@@Base>
   1b364:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1b368:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1b36c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1b370:	mov	r2, r3
   1b374:	sub	r3, fp, #32
   1b378:	ldm	r3, {r0, r1}
   1b37c:	stm	r2, {r0, r1}
   1b380:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b384:	sub	sp, fp, #4
   1b388:	pop	{fp, pc}
   1b38c:	andeq	fp, r0, r4, asr r9
   1b390:	andeq	r0, r0, r1, asr r6
   1b394:	andeq	fp, r0, r0, lsl r1
   1b398:	andeq	fp, r0, ip, lsl #9

0001b39c <flatcc_builder_union_vector_edit@@Base>:
   1b39c:	push	{fp}		; (str fp, [sp, #-4]!)
   1b3a0:	add	fp, sp, #0
   1b3a4:	sub	sp, sp, #12
   1b3a8:	str	r0, [fp, #-8]
   1b3ac:	ldr	r3, [fp, #-8]
   1b3b0:	ldr	r3, [r3, #16]
   1b3b4:	mov	r0, r3
   1b3b8:	add	sp, fp, #0
   1b3bc:	pop	{fp}		; (ldr fp, [sp], #4)
   1b3c0:	bx	lr

0001b3c4 <flatcc_builder_union_vector_count@@Base>:
   1b3c4:	push	{fp}		; (str fp, [sp, #-4]!)
   1b3c8:	add	fp, sp, #0
   1b3cc:	sub	sp, sp, #12
   1b3d0:	str	r0, [fp, #-8]
   1b3d4:	ldr	r3, [fp, #-8]
   1b3d8:	ldr	r3, [r3, #32]
   1b3dc:	ldr	r3, [r3, #20]
   1b3e0:	mov	r0, r3
   1b3e4:	add	sp, fp, #0
   1b3e8:	pop	{fp}		; (ldr fp, [sp], #4)
   1b3ec:	bx	lr

0001b3f0 <flatcc_builder_extend_union_vector@@Base>:
   1b3f0:	push	{fp, lr}
   1b3f4:	add	fp, sp, #4
   1b3f8:	sub	sp, sp, #8
   1b3fc:	str	r0, [fp, #-8]
   1b400:	str	r1, [fp, #-12]
   1b404:	mvn	r2, #-536870912	; 0xe0000000
   1b408:	ldr	r1, [fp, #-12]
   1b40c:	ldr	r0, [fp, #-8]
   1b410:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   1b414:	mov	r3, r0
   1b418:	cmp	r3, #0
   1b41c:	beq	1b428 <flatcc_builder_extend_union_vector@@Base+0x38>
   1b420:	mov	r3, #0
   1b424:	b	1b440 <flatcc_builder_extend_union_vector@@Base+0x50>
   1b428:	ldr	r3, [fp, #-12]
   1b42c:	lsl	r3, r3, #3
   1b430:	mov	r1, r3
   1b434:	ldr	r0, [fp, #-8]
   1b438:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   1b43c:	mov	r3, r0
   1b440:	mov	r0, r3
   1b444:	sub	sp, fp, #4
   1b448:	pop	{fp, pc}

0001b44c <flatcc_builder_truncate_union_vector@@Base>:
   1b44c:	push	{fp, lr}
   1b450:	add	fp, sp, #4
   1b454:	sub	sp, sp, #8
   1b458:	str	r0, [fp, #-8]
   1b45c:	str	r1, [fp, #-12]
   1b460:	ldr	r3, [fp, #-8]
   1b464:	ldr	r3, [r3, #32]
   1b468:	ldrh	r3, [r3, #14]
   1b46c:	cmp	r3, #7
   1b470:	beq	1b494 <flatcc_builder_truncate_union_vector@@Base+0x48>
   1b474:	ldr	r3, [pc, #192]	; 1b53c <flatcc_builder_truncate_union_vector@@Base+0xf0>
   1b478:	add	r3, pc, r3
   1b47c:	ldr	r2, [pc, #188]	; 1b540 <flatcc_builder_truncate_union_vector@@Base+0xf4>
   1b480:	ldr	r1, [pc, #188]	; 1b544 <flatcc_builder_truncate_union_vector@@Base+0xf8>
   1b484:	add	r1, pc, r1
   1b488:	ldr	r0, [pc, #184]	; 1b548 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   1b48c:	add	r0, pc, r0
   1b490:	bl	12504 <__assert_fail@plt>
   1b494:	ldr	r3, [fp, #-8]
   1b498:	ldr	r3, [r3, #32]
   1b49c:	ldr	r2, [r3, #20]
   1b4a0:	ldr	r3, [fp, #-12]
   1b4a4:	cmp	r2, r3
   1b4a8:	bcs	1b4ec <flatcc_builder_truncate_union_vector@@Base+0xa0>
   1b4ac:	ldr	r3, [fp, #-8]
   1b4b0:	ldr	r3, [r3, #32]
   1b4b4:	ldr	r2, [r3, #20]
   1b4b8:	ldr	r3, [fp, #-12]
   1b4bc:	cmp	r2, r3
   1b4c0:	bcs	1b4e4 <flatcc_builder_truncate_union_vector@@Base+0x98>
   1b4c4:	ldr	r3, [pc, #128]	; 1b54c <flatcc_builder_truncate_union_vector@@Base+0x100>
   1b4c8:	add	r3, pc, r3
   1b4cc:	ldr	r2, [pc, #124]	; 1b550 <flatcc_builder_truncate_union_vector@@Base+0x104>
   1b4d0:	ldr	r1, [pc, #124]	; 1b554 <flatcc_builder_truncate_union_vector@@Base+0x108>
   1b4d4:	add	r1, pc, r1
   1b4d8:	ldr	r0, [pc, #120]	; 1b558 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   1b4dc:	add	r0, pc, r0
   1b4e0:	bl	12504 <__assert_fail@plt>
   1b4e4:	mvn	r3, #0
   1b4e8:	b	1b530 <flatcc_builder_truncate_union_vector@@Base+0xe4>
   1b4ec:	ldr	r3, [fp, #-8]
   1b4f0:	ldr	r3, [r3, #32]
   1b4f4:	ldr	r2, [fp, #-8]
   1b4f8:	ldr	r2, [r2, #32]
   1b4fc:	ldr	r1, [r2, #20]
   1b500:	ldr	r2, [fp, #-12]
   1b504:	sub	r2, r1, r2
   1b508:	str	r2, [r3, #20]
   1b50c:	ldr	r3, [fp, #-8]
   1b510:	ldr	r3, [r3, #32]
   1b514:	ldr	r3, [r3, #16]
   1b518:	ldr	r2, [fp, #-12]
   1b51c:	mul	r3, r2, r3
   1b520:	mov	r1, r3
   1b524:	ldr	r0, [fp, #-8]
   1b528:	bl	16824 <flatcc_builder_default_alloc@@Base+0x38c>
   1b52c:	mov	r3, #0
   1b530:	mov	r0, r3
   1b534:	sub	sp, fp, #4
   1b538:	pop	{fp, pc}
   1b53c:	andeq	fp, r0, r4, asr #14
   1b540:	andeq	r0, r0, r1, lsl #13
   1b544:	andeq	sl, r0, r0, ror #29
   1b548:	andeq	fp, r0, ip, asr r2
   1b54c:	strdeq	fp, [r0], -r4
   1b550:	andeq	r0, r0, r2, lsl #13
   1b554:	muleq	r0, r0, lr
   1b558:	strheq	fp, [r0], -ip

0001b55c <flatcc_builder_union_vector_push@@Base>:
   1b55c:	push	{fp, lr}
   1b560:	add	fp, sp, #4
   1b564:	sub	sp, sp, #24
   1b568:	str	r0, [fp, #-16]
   1b56c:	sub	r3, fp, #24
   1b570:	stm	r3, {r1, r2}
   1b574:	ldr	r3, [fp, #-16]
   1b578:	ldr	r3, [r3, #32]
   1b57c:	ldrh	r3, [r3, #14]
   1b580:	cmp	r3, #7
   1b584:	beq	1b5a8 <flatcc_builder_union_vector_push@@Base+0x4c>
   1b588:	ldr	r3, [pc, #152]	; 1b628 <flatcc_builder_union_vector_push@@Base+0xcc>
   1b58c:	add	r3, pc, r3
   1b590:	ldr	r2, [pc, #148]	; 1b62c <flatcc_builder_union_vector_push@@Base+0xd0>
   1b594:	ldr	r1, [pc, #148]	; 1b630 <flatcc_builder_union_vector_push@@Base+0xd4>
   1b598:	add	r1, pc, r1
   1b59c:	ldr	r0, [pc, #144]	; 1b634 <flatcc_builder_union_vector_push@@Base+0xd8>
   1b5a0:	add	r0, pc, r0
   1b5a4:	bl	12504 <__assert_fail@plt>
   1b5a8:	ldr	r3, [fp, #-16]
   1b5ac:	ldr	r3, [r3, #32]
   1b5b0:	ldr	r3, [r3, #20]
   1b5b4:	cmn	r3, #-536870911	; 0xe0000001
   1b5b8:	bne	1b5c4 <flatcc_builder_union_vector_push@@Base+0x68>
   1b5bc:	mov	r3, #0
   1b5c0:	b	1b61c <flatcc_builder_union_vector_push@@Base+0xc0>
   1b5c4:	ldr	r3, [fp, #-16]
   1b5c8:	ldr	r3, [r3, #32]
   1b5cc:	ldr	r2, [fp, #-16]
   1b5d0:	ldr	r2, [r2, #32]
   1b5d4:	ldr	r2, [r2, #20]
   1b5d8:	add	r2, r2, #1
   1b5dc:	str	r2, [r3, #20]
   1b5e0:	mov	r1, #8
   1b5e4:	ldr	r0, [fp, #-16]
   1b5e8:	bl	16788 <flatcc_builder_default_alloc@@Base+0x2f0>
   1b5ec:	str	r0, [fp, #-8]
   1b5f0:	ldr	r3, [fp, #-8]
   1b5f4:	cmp	r3, #0
   1b5f8:	bne	1b604 <flatcc_builder_union_vector_push@@Base+0xa8>
   1b5fc:	mov	r3, #0
   1b600:	b	1b61c <flatcc_builder_union_vector_push@@Base+0xc0>
   1b604:	ldr	r3, [fp, #-8]
   1b608:	mov	r2, r3
   1b60c:	sub	r3, fp, #24
   1b610:	ldm	r3, {r0, r1}
   1b614:	stm	r2, {r0, r1}
   1b618:	ldr	r3, [fp, #-8]
   1b61c:	mov	r0, r3
   1b620:	sub	sp, fp, #4
   1b624:	pop	{fp, pc}
   1b628:	andeq	fp, r0, r8, asr r6
   1b62c:	andeq	r0, r0, sp, lsl #13
   1b630:	andeq	sl, r0, ip, asr #27
   1b634:	andeq	fp, r0, r8, asr #2

0001b638 <flatcc_builder_append_union_vector@@Base>:
   1b638:	push	{fp, lr}
   1b63c:	add	fp, sp, #4
   1b640:	sub	sp, sp, #16
   1b644:	str	r0, [fp, #-8]
   1b648:	str	r1, [fp, #-12]
   1b64c:	str	r2, [fp, #-16]
   1b650:	ldr	r3, [fp, #-8]
   1b654:	ldr	r3, [r3, #32]
   1b658:	ldrh	r3, [r3, #14]
   1b65c:	cmp	r3, #7
   1b660:	beq	1b684 <flatcc_builder_append_union_vector@@Base+0x4c>
   1b664:	ldr	r3, [pc, #100]	; 1b6d0 <flatcc_builder_append_union_vector@@Base+0x98>
   1b668:	add	r3, pc, r3
   1b66c:	ldr	r2, [pc, #96]	; 1b6d4 <flatcc_builder_append_union_vector@@Base+0x9c>
   1b670:	ldr	r1, [pc, #96]	; 1b6d8 <flatcc_builder_append_union_vector@@Base+0xa0>
   1b674:	add	r1, pc, r1
   1b678:	ldr	r0, [pc, #92]	; 1b6dc <flatcc_builder_append_union_vector@@Base+0xa4>
   1b67c:	add	r0, pc, r0
   1b680:	bl	12504 <__assert_fail@plt>
   1b684:	mvn	r2, #-536870912	; 0xe0000000
   1b688:	ldr	r1, [fp, #-16]
   1b68c:	ldr	r0, [fp, #-8]
   1b690:	bl	18900 <flatcc_builder_end_struct@@Base+0xa0>
   1b694:	mov	r3, r0
   1b698:	cmp	r3, #0
   1b69c:	beq	1b6a8 <flatcc_builder_append_union_vector@@Base+0x70>
   1b6a0:	mov	r3, #0
   1b6a4:	b	1b6c4 <flatcc_builder_append_union_vector@@Base+0x8c>
   1b6a8:	ldr	r3, [fp, #-16]
   1b6ac:	lsl	r3, r3, #3
   1b6b0:	mov	r2, r3
   1b6b4:	ldr	r1, [fp, #-12]
   1b6b8:	ldr	r0, [fp, #-8]
   1b6bc:	bl	16880 <flatcc_builder_default_alloc@@Base+0x3e8>
   1b6c0:	mov	r3, r0
   1b6c4:	mov	r0, r3
   1b6c8:	sub	sp, fp, #4
   1b6cc:	pop	{fp, pc}
   1b6d0:	andeq	fp, r0, r0, lsr #11
   1b6d4:	muleq	r0, ip, r6
   1b6d8:	strdeq	sl, [r0], -r0
   1b6dc:	andeq	fp, r0, ip, rrx

0001b6e0 <flatcc_builder_create_string@@Base>:
   1b6e0:	push	{r4, fp, lr}
   1b6e4:	add	fp, sp, #8
   1b6e8:	sub	sp, sp, #100	; 0x64
   1b6ec:	str	r0, [fp, #-96]	; 0xffffffa0
   1b6f0:	str	r1, [fp, #-100]	; 0xffffff9c
   1b6f4:	str	r2, [fp, #-104]	; 0xffffff98
   1b6f8:	ldr	r4, [pc, #376]	; 1b878 <flatcc_builder_create_string@@Base+0x198>
   1b6fc:	add	r4, pc, r4
   1b700:	ldr	r0, [fp, #-104]	; 0xffffff98
   1b704:	bl	16354 <main@@Base+0xf4>
   1b708:	mov	r3, r0
   1b70c:	str	r3, [fp, #-20]	; 0xffffffec
   1b710:	ldr	r3, [fp, #-104]	; 0xffffff98
   1b714:	add	r3, r3, #1
   1b718:	mov	r2, #4
   1b71c:	mov	r1, r3
   1b720:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b724:	bl	17990 <flatcc_builder_get_user_frame_ptr@@Base+0x2dc>
   1b728:	mov	r3, r0
   1b72c:	add	r3, r3, #1
   1b730:	str	r3, [fp, #-16]
   1b734:	mov	r3, #0
   1b738:	str	r3, [fp, #-92]	; 0xffffffa4
   1b73c:	mov	r3, #0
   1b740:	str	r3, [fp, #-88]	; 0xffffffa8
   1b744:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1b748:	add	r3, r3, #4
   1b74c:	str	r3, [fp, #-92]	; 0xffffffa4
   1b750:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b754:	add	r3, r3, #1
   1b758:	lsl	r3, r3, #3
   1b75c:	sub	r2, fp, #12
   1b760:	add	r3, r2, r3
   1b764:	sub	r2, fp, #20
   1b768:	str	r2, [r3, #-80]	; 0xffffffb0
   1b76c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b770:	add	r3, r3, #1
   1b774:	lsl	r3, r3, #3
   1b778:	sub	r2, fp, #12
   1b77c:	add	r3, r2, r3
   1b780:	mov	r2, #4
   1b784:	str	r2, [r3, #-76]	; 0xffffffb4
   1b788:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b78c:	add	r3, r3, #1
   1b790:	str	r3, [fp, #-88]	; 0xffffffa8
   1b794:	ldr	r3, [fp, #-104]	; 0xffffff98
   1b798:	cmp	r3, #0
   1b79c:	beq	1b7f4 <flatcc_builder_create_string@@Base+0x114>
   1b7a0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1b7a4:	ldr	r3, [fp, #-104]	; 0xffffff98
   1b7a8:	add	r3, r2, r3
   1b7ac:	str	r3, [fp, #-92]	; 0xffffffa4
   1b7b0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b7b4:	add	r3, r3, #1
   1b7b8:	lsl	r3, r3, #3
   1b7bc:	sub	r2, fp, #12
   1b7c0:	add	r3, r2, r3
   1b7c4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1b7c8:	str	r2, [r3, #-80]	; 0xffffffb0
   1b7cc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b7d0:	add	r3, r3, #1
   1b7d4:	lsl	r3, r3, #3
   1b7d8:	sub	r2, fp, #12
   1b7dc:	add	r3, r2, r3
   1b7e0:	ldr	r2, [fp, #-104]	; 0xffffff98
   1b7e4:	str	r2, [r3, #-76]	; 0xffffffb4
   1b7e8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b7ec:	add	r3, r3, #1
   1b7f0:	str	r3, [fp, #-88]	; 0xffffffa8
   1b7f4:	ldr	r3, [fp, #-16]
   1b7f8:	cmp	r3, #0
   1b7fc:	beq	1b858 <flatcc_builder_create_string@@Base+0x178>
   1b800:	ldr	r2, [fp, #-92]	; 0xffffffa4
   1b804:	ldr	r3, [fp, #-16]
   1b808:	add	r3, r2, r3
   1b80c:	str	r3, [fp, #-92]	; 0xffffffa4
   1b810:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b814:	add	r3, r3, #1
   1b818:	lsl	r3, r3, #3
   1b81c:	sub	r2, fp, #12
   1b820:	add	r3, r2, r3
   1b824:	ldr	r2, [pc, #80]	; 1b87c <flatcc_builder_create_string@@Base+0x19c>
   1b828:	ldr	r2, [r4, r2]
   1b82c:	str	r2, [r3, #-80]	; 0xffffffb0
   1b830:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b834:	add	r3, r3, #1
   1b838:	lsl	r3, r3, #3
   1b83c:	sub	r2, fp, #12
   1b840:	add	r3, r2, r3
   1b844:	ldr	r2, [fp, #-16]
   1b848:	str	r2, [r3, #-76]	; 0xffffffb4
   1b84c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   1b850:	add	r3, r3, #1
   1b854:	str	r3, [fp, #-88]	; 0xffffffa8
   1b858:	sub	r3, fp, #92	; 0x5c
   1b85c:	mov	r1, r3
   1b860:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1b864:	bl	17a18 <flatcc_builder_get_user_frame_ptr@@Base+0x364>
   1b868:	mov	r3, r0
   1b86c:	mov	r0, r3
   1b870:	sub	sp, fp, #8
   1b874:	pop	{r4, fp, pc}
   1b878:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b87c:	andeq	r0, r0, r4, asr r0

0001b880 <flatcc_builder_create_string_str@@Base>:
   1b880:	push	{fp, lr}
   1b884:	add	fp, sp, #4
   1b888:	sub	sp, sp, #8
   1b88c:	str	r0, [fp, #-8]
   1b890:	str	r1, [fp, #-12]
   1b894:	ldr	r0, [fp, #-12]
   1b898:	bl	124b0 <strlen@plt>
   1b89c:	mov	r3, r0
   1b8a0:	mov	r2, r3
   1b8a4:	ldr	r1, [fp, #-12]
   1b8a8:	ldr	r0, [fp, #-8]
   1b8ac:	bl	1b6e0 <flatcc_builder_create_string@@Base>
   1b8b0:	mov	r3, r0
   1b8b4:	mov	r0, r3
   1b8b8:	sub	sp, fp, #4
   1b8bc:	pop	{fp, pc}

0001b8c0 <flatcc_builder_create_string_strn@@Base>:
   1b8c0:	push	{fp, lr}
   1b8c4:	add	fp, sp, #4
   1b8c8:	sub	sp, sp, #16
   1b8cc:	str	r0, [fp, #-8]
   1b8d0:	str	r1, [fp, #-12]
   1b8d4:	str	r2, [fp, #-16]
   1b8d8:	ldr	r1, [fp, #-16]
   1b8dc:	ldr	r0, [fp, #-12]
   1b8e0:	bl	16444 <main@@Base+0x1e4>
   1b8e4:	mov	r3, r0
   1b8e8:	mov	r2, r3
   1b8ec:	ldr	r1, [fp, #-12]
   1b8f0:	ldr	r0, [fp, #-8]
   1b8f4:	bl	1b6e0 <flatcc_builder_create_string@@Base>
   1b8f8:	mov	r3, r0
   1b8fc:	mov	r0, r3
   1b900:	sub	sp, fp, #4
   1b904:	pop	{fp, pc}

0001b908 <flatcc_builder_end_string@@Base>:
   1b908:	push	{fp, lr}
   1b90c:	add	fp, sp, #4
   1b910:	sub	sp, sp, #16
   1b914:	str	r0, [fp, #-16]
   1b918:	ldr	r3, [fp, #-16]
   1b91c:	ldr	r3, [r3, #32]
   1b920:	ldrh	r3, [r3, #14]
   1b924:	cmp	r3, #6
   1b928:	beq	1b94c <flatcc_builder_end_string@@Base+0x44>
   1b92c:	ldr	r3, [pc, #160]	; 1b9d4 <flatcc_builder_end_string@@Base+0xcc>
   1b930:	add	r3, pc, r3
   1b934:	ldr	r2, [pc, #156]	; 1b9d8 <flatcc_builder_end_string@@Base+0xd0>
   1b938:	ldr	r1, [pc, #156]	; 1b9dc <flatcc_builder_end_string@@Base+0xd4>
   1b93c:	add	r1, pc, r1
   1b940:	ldr	r0, [pc, #152]	; 1b9e0 <flatcc_builder_end_string@@Base+0xd8>
   1b944:	add	r0, pc, r0
   1b948:	bl	12504 <__assert_fail@plt>
   1b94c:	ldr	r3, [fp, #-16]
   1b950:	ldr	r3, [r3, #32]
   1b954:	ldr	r2, [r3, #20]
   1b958:	ldr	r3, [fp, #-16]
   1b95c:	ldr	r3, [r3, #20]
   1b960:	cmp	r2, r3
   1b964:	beq	1b988 <flatcc_builder_end_string@@Base+0x80>
   1b968:	ldr	r3, [pc, #116]	; 1b9e4 <flatcc_builder_end_string@@Base+0xdc>
   1b96c:	add	r3, pc, r3
   1b970:	ldr	r2, [pc, #112]	; 1b9e8 <flatcc_builder_end_string@@Base+0xe0>
   1b974:	ldr	r1, [pc, #112]	; 1b9ec <flatcc_builder_end_string@@Base+0xe4>
   1b978:	add	r1, pc, r1
   1b97c:	ldr	r0, [pc, #108]	; 1b9f0 <flatcc_builder_end_string@@Base+0xe8>
   1b980:	add	r0, pc, r0
   1b984:	bl	12504 <__assert_fail@plt>
   1b988:	ldr	r3, [fp, #-16]
   1b98c:	ldr	r1, [r3, #16]
   1b990:	ldr	r3, [fp, #-16]
   1b994:	ldr	r3, [r3, #20]
   1b998:	mov	r2, r3
   1b99c:	ldr	r0, [fp, #-16]
   1b9a0:	bl	1b6e0 <flatcc_builder_create_string@@Base>
   1b9a4:	str	r0, [fp, #-8]
   1b9a8:	ldr	r3, [fp, #-8]
   1b9ac:	cmp	r3, #0
   1b9b0:	bne	1b9bc <flatcc_builder_end_string@@Base+0xb4>
   1b9b4:	mov	r3, #0
   1b9b8:	b	1b9c8 <flatcc_builder_end_string@@Base+0xc0>
   1b9bc:	ldr	r0, [fp, #-16]
   1b9c0:	bl	178c8 <flatcc_builder_get_user_frame_ptr@@Base+0x214>
   1b9c4:	ldr	r3, [fp, #-8]
   1b9c8:	mov	r0, r3
   1b9cc:	sub	sp, fp, #4
   1b9d0:	pop	{fp, pc}
   1b9d4:	strdeq	fp, [r0], -ip
   1b9d8:	andeq	r0, r0, r4, asr #13
   1b9dc:	andeq	sl, r0, r8, lsr #20
   1b9e0:	andeq	sl, r0, r4, lsl #24
   1b9e4:	andeq	fp, r0, r0, asr #5
   1b9e8:	andeq	r0, r0, r5, asr #13
   1b9ec:	andeq	sl, r0, ip, ror #19
   1b9f0:	muleq	r0, ip, sp

0001b9f4 <flatcc_builder_string_edit@@Base>:
   1b9f4:	push	{fp}		; (str fp, [sp, #-4]!)
   1b9f8:	add	fp, sp, #0
   1b9fc:	sub	sp, sp, #12
   1ba00:	str	r0, [fp, #-8]
   1ba04:	ldr	r3, [fp, #-8]
   1ba08:	ldr	r3, [r3, #16]
   1ba0c:	mov	r0, r3
   1ba10:	add	sp, fp, #0
   1ba14:	pop	{fp}		; (ldr fp, [sp], #4)
   1ba18:	bx	lr

0001ba1c <flatcc_builder_string_len@@Base>:
   1ba1c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ba20:	add	fp, sp, #0
   1ba24:	sub	sp, sp, #12
   1ba28:	str	r0, [fp, #-8]
   1ba2c:	ldr	r3, [fp, #-8]
   1ba30:	ldr	r3, [r3, #32]
   1ba34:	ldr	r3, [r3, #20]
   1ba38:	mov	r0, r3
   1ba3c:	add	sp, fp, #0
   1ba40:	pop	{fp}		; (ldr fp, [sp], #4)
   1ba44:	bx	lr

0001ba48 <flatcc_builder_table_add@@Base>:
   1ba48:	push	{fp, lr}
   1ba4c:	add	fp, sp, #4
   1ba50:	sub	sp, sp, #16
   1ba54:	str	r0, [fp, #-8]
   1ba58:	str	r1, [fp, #-12]
   1ba5c:	str	r2, [fp, #-16]
   1ba60:	strh	r3, [fp, #-18]	; 0xffffffee
   1ba64:	ldr	r3, [fp, #-8]
   1ba68:	ldr	r3, [r3, #32]
   1ba6c:	ldrh	r3, [r3, #14]
   1ba70:	cmp	r3, #3
   1ba74:	beq	1ba98 <flatcc_builder_table_add@@Base+0x50>
   1ba78:	ldr	r3, [pc, #268]	; 1bb8c <flatcc_builder_table_add@@Base+0x144>
   1ba7c:	add	r3, pc, r3
   1ba80:	ldr	r2, [pc, #264]	; 1bb90 <flatcc_builder_table_add@@Base+0x148>
   1ba84:	ldr	r1, [pc, #264]	; 1bb94 <flatcc_builder_table_add@@Base+0x14c>
   1ba88:	add	r1, pc, r1
   1ba8c:	ldr	r0, [pc, #260]	; 1bb98 <flatcc_builder_table_add@@Base+0x150>
   1ba90:	add	r0, pc, r0
   1ba94:	bl	12504 <__assert_fail@plt>
   1ba98:	ldr	r3, [fp, #-12]
   1ba9c:	cmp	r3, #0
   1baa0:	blt	1bab4 <flatcc_builder_table_add@@Base+0x6c>
   1baa4:	ldr	r3, [fp, #-12]
   1baa8:	ldr	r2, [pc, #236]	; 1bb9c <flatcc_builder_table_add@@Base+0x154>
   1baac:	cmp	r3, r2
   1bab0:	ble	1bad4 <flatcc_builder_table_add@@Base+0x8c>
   1bab4:	ldr	r3, [pc, #228]	; 1bba0 <flatcc_builder_table_add@@Base+0x158>
   1bab8:	add	r3, pc, r3
   1babc:	ldr	r2, [pc, #224]	; 1bba4 <flatcc_builder_table_add@@Base+0x15c>
   1bac0:	ldr	r1, [pc, #224]	; 1bba8 <flatcc_builder_table_add@@Base+0x160>
   1bac4:	add	r1, pc, r1
   1bac8:	ldr	r0, [pc, #220]	; 1bbac <flatcc_builder_table_add@@Base+0x164>
   1bacc:	add	r0, pc, r0
   1bad0:	bl	12504 <__assert_fail@plt>
   1bad4:	ldr	r3, [fp, #-8]
   1bad8:	ldrh	r3, [r3, #130]	; 0x82
   1badc:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1bae0:	cmp	r2, r3
   1bae4:	bls	1baf4 <flatcc_builder_table_add@@Base+0xac>
   1bae8:	ldr	r3, [fp, #-8]
   1baec:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1baf0:	strh	r2, [r3, #130]	; 0x82
   1baf4:	ldr	r3, [fp, #-8]
   1baf8:	ldr	r2, [r3, #4]
   1bafc:	ldr	r3, [fp, #-12]
   1bb00:	lsl	r3, r3, #1
   1bb04:	add	r3, r2, r3
   1bb08:	ldrh	r3, [r3]
   1bb0c:	cmp	r3, #0
   1bb10:	beq	1bb34 <flatcc_builder_table_add@@Base+0xec>
   1bb14:	ldr	r3, [pc, #148]	; 1bbb0 <flatcc_builder_table_add@@Base+0x168>
   1bb18:	add	r3, pc, r3
   1bb1c:	ldr	r2, [pc, #144]	; 1bbb4 <flatcc_builder_table_add@@Base+0x16c>
   1bb20:	ldr	r1, [pc, #144]	; 1bbb8 <flatcc_builder_table_add@@Base+0x170>
   1bb24:	add	r1, pc, r1
   1bb28:	ldr	r0, [pc, #140]	; 1bbbc <flatcc_builder_table_add@@Base+0x174>
   1bb2c:	add	r0, pc, r0
   1bb30:	bl	12504 <__assert_fail@plt>
   1bb34:	ldr	r3, [fp, #-8]
   1bb38:	ldr	r2, [r3, #12]
   1bb3c:	ldr	r3, [fp, #-12]
   1bb40:	eor	r3, r3, r2
   1bb44:	ldr	r2, [pc, #116]	; 1bbc0 <flatcc_builder_table_add@@Base+0x178>
   1bb48:	mul	r2, r2, r3
   1bb4c:	ldr	r3, [fp, #-16]
   1bb50:	eor	r3, r3, r2
   1bb54:	ldr	r2, [pc, #100]	; 1bbc0 <flatcc_builder_table_add@@Base+0x178>
   1bb58:	mul	r2, r2, r3
   1bb5c:	ldr	r3, [fp, #-8]
   1bb60:	str	r2, [r3, #12]
   1bb64:	ldr	r3, [fp, #-12]
   1bb68:	uxth	r3, r3
   1bb6c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1bb70:	ldr	r1, [fp, #-16]
   1bb74:	ldr	r0, [fp, #-8]
   1bb78:	bl	168dc <flatcc_builder_default_alloc@@Base+0x444>
   1bb7c:	mov	r3, r0
   1bb80:	mov	r0, r3
   1bb84:	sub	sp, fp, #4
   1bb88:	pop	{fp, pc}
   1bb8c:	andeq	fp, r0, ip, asr #3
   1bb90:	andeq	r0, r0, sp, ror #13
   1bb94:	ldrdeq	sl, [r0], -ip
   1bb98:	muleq	r0, r4, fp
   1bb9c:	strdeq	r7, [r0], -ip
   1bba0:	muleq	r0, r0, r1
   1bba4:	andeq	r0, r0, lr, ror #13
   1bba8:	andeq	sl, r0, r0, lsr #17
   1bbac:	andeq	sl, r0, r4, ror ip
   1bbb0:	andeq	fp, r0, r0, lsr r1
   1bbb4:	strdeq	r0, [r0], -r8
   1bbb8:	andeq	sl, r0, r0, asr #16
   1bbbc:	muleq	r0, r8, r8
   1bbc0:			; <UNDEFINED> instruction: 0x9e3779b1

0001bbc4 <flatcc_builder_table_edit@@Base>:
   1bbc4:	push	{fp, lr}
   1bbc8:	add	fp, sp, #4
   1bbcc:	sub	sp, sp, #8
   1bbd0:	str	r0, [fp, #-8]
   1bbd4:	str	r1, [fp, #-12]
   1bbd8:	ldr	r3, [fp, #-8]
   1bbdc:	ldr	r3, [r3, #32]
   1bbe0:	ldrh	r3, [r3, #14]
   1bbe4:	cmp	r3, #3
   1bbe8:	beq	1bc0c <flatcc_builder_table_edit@@Base+0x48>
   1bbec:	ldr	r3, [pc, #64]	; 1bc34 <flatcc_builder_table_edit@@Base+0x70>
   1bbf0:	add	r3, pc, r3
   1bbf4:	ldr	r2, [pc, #60]	; 1bc38 <flatcc_builder_table_edit@@Base+0x74>
   1bbf8:	ldr	r1, [pc, #60]	; 1bc3c <flatcc_builder_table_edit@@Base+0x78>
   1bbfc:	add	r1, pc, r1
   1bc00:	ldr	r0, [pc, #56]	; 1bc40 <flatcc_builder_table_edit@@Base+0x7c>
   1bc04:	add	r0, pc, r0
   1bc08:	bl	12504 <__assert_fail@plt>
   1bc0c:	ldr	r3, [fp, #-8]
   1bc10:	ldr	r2, [r3, #16]
   1bc14:	ldr	r3, [fp, #-8]
   1bc18:	ldr	r1, [r3, #20]
   1bc1c:	ldr	r3, [fp, #-12]
   1bc20:	sub	r3, r1, r3
   1bc24:	add	r3, r2, r3
   1bc28:	mov	r0, r3
   1bc2c:	sub	sp, fp, #4
   1bc30:	pop	{fp, pc}
   1bc34:	andeq	fp, r0, r4, ror r0
   1bc38:	andeq	r0, r0, r2, lsl #14
   1bc3c:	andeq	sl, r0, r8, ror #14
   1bc40:	andeq	sl, r0, r0, lsr #20

0001bc44 <flatcc_builder_table_add_copy@@Base>:
   1bc44:	push	{fp, lr}
   1bc48:	add	fp, sp, #4
   1bc4c:	sub	sp, sp, #24
   1bc50:	str	r0, [fp, #-16]
   1bc54:	str	r1, [fp, #-20]	; 0xffffffec
   1bc58:	str	r2, [fp, #-24]	; 0xffffffe8
   1bc5c:	str	r3, [fp, #-28]	; 0xffffffe4
   1bc60:	ldrh	r3, [fp, #4]
   1bc64:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bc68:	ldr	r1, [fp, #-20]	; 0xffffffec
   1bc6c:	ldr	r0, [fp, #-16]
   1bc70:	bl	1ba48 <flatcc_builder_table_add@@Base>
   1bc74:	str	r0, [fp, #-8]
   1bc78:	ldr	r3, [fp, #-8]
   1bc7c:	cmp	r3, #0
   1bc80:	beq	1bc94 <flatcc_builder_table_add_copy@@Base+0x50>
   1bc84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1bc88:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1bc8c:	ldr	r0, [fp, #-8]
   1bc90:	bl	1245c <memcpy@plt>
   1bc94:	ldr	r3, [fp, #-8]
   1bc98:	mov	r0, r3
   1bc9c:	sub	sp, fp, #4
   1bca0:	pop	{fp, pc}

0001bca4 <flatcc_builder_table_add_offset@@Base>:
   1bca4:	push	{fp, lr}
   1bca8:	add	fp, sp, #4
   1bcac:	sub	sp, sp, #8
   1bcb0:	str	r0, [fp, #-8]
   1bcb4:	str	r1, [fp, #-12]
   1bcb8:	ldr	r3, [fp, #-8]
   1bcbc:	ldr	r3, [r3, #32]
   1bcc0:	ldrh	r3, [r3, #14]
   1bcc4:	cmp	r3, #3
   1bcc8:	beq	1bcec <flatcc_builder_table_add_offset@@Base+0x48>
   1bccc:	ldr	r3, [pc, #228]	; 1bdb8 <flatcc_builder_table_add_offset@@Base+0x114>
   1bcd0:	add	r3, pc, r3
   1bcd4:	ldr	r2, [pc, #224]	; 1bdbc <flatcc_builder_table_add_offset@@Base+0x118>
   1bcd8:	ldr	r1, [pc, #224]	; 1bdc0 <flatcc_builder_table_add_offset@@Base+0x11c>
   1bcdc:	add	r1, pc, r1
   1bce0:	ldr	r0, [pc, #220]	; 1bdc4 <flatcc_builder_table_add_offset@@Base+0x120>
   1bce4:	add	r0, pc, r0
   1bce8:	bl	12504 <__assert_fail@plt>
   1bcec:	ldr	r3, [fp, #-12]
   1bcf0:	cmp	r3, #0
   1bcf4:	blt	1bd08 <flatcc_builder_table_add_offset@@Base+0x64>
   1bcf8:	ldr	r3, [fp, #-12]
   1bcfc:	ldr	r2, [pc, #196]	; 1bdc8 <flatcc_builder_table_add_offset@@Base+0x124>
   1bd00:	cmp	r3, r2
   1bd04:	ble	1bd28 <flatcc_builder_table_add_offset@@Base+0x84>
   1bd08:	ldr	r3, [pc, #188]	; 1bdcc <flatcc_builder_table_add_offset@@Base+0x128>
   1bd0c:	add	r3, pc, r3
   1bd10:	ldr	r2, [pc, #184]	; 1bdd0 <flatcc_builder_table_add_offset@@Base+0x12c>
   1bd14:	ldr	r1, [pc, #184]	; 1bdd4 <flatcc_builder_table_add_offset@@Base+0x130>
   1bd18:	add	r1, pc, r1
   1bd1c:	ldr	r0, [pc, #180]	; 1bdd8 <flatcc_builder_table_add_offset@@Base+0x134>
   1bd20:	add	r0, pc, r0
   1bd24:	bl	12504 <__assert_fail@plt>
   1bd28:	ldr	r3, [fp, #-8]
   1bd2c:	ldr	r2, [r3, #4]
   1bd30:	ldr	r3, [fp, #-12]
   1bd34:	lsl	r3, r3, #1
   1bd38:	add	r3, r2, r3
   1bd3c:	ldrh	r3, [r3]
   1bd40:	cmp	r3, #0
   1bd44:	beq	1bd68 <flatcc_builder_table_add_offset@@Base+0xc4>
   1bd48:	ldr	r3, [pc, #140]	; 1bddc <flatcc_builder_table_add_offset@@Base+0x138>
   1bd4c:	add	r3, pc, r3
   1bd50:	ldr	r2, [pc, #136]	; 1bde0 <flatcc_builder_table_add_offset@@Base+0x13c>
   1bd54:	ldr	r1, [pc, #136]	; 1bde4 <flatcc_builder_table_add_offset@@Base+0x140>
   1bd58:	add	r1, pc, r1
   1bd5c:	ldr	r0, [pc, #132]	; 1bde8 <flatcc_builder_table_add_offset@@Base+0x144>
   1bd60:	add	r0, pc, r0
   1bd64:	bl	12504 <__assert_fail@plt>
   1bd68:	ldr	r3, [fp, #-8]
   1bd6c:	ldr	r2, [r3, #12]
   1bd70:	ldr	r3, [fp, #-12]
   1bd74:	eor	r3, r3, r2
   1bd78:	ldr	r2, [pc, #108]	; 1bdec <flatcc_builder_table_add_offset@@Base+0x148>
   1bd7c:	mul	r3, r2, r3
   1bd80:	eor	r3, r3, #4
   1bd84:	ldr	r2, [pc, #96]	; 1bdec <flatcc_builder_table_add_offset@@Base+0x148>
   1bd88:	mul	r2, r2, r3
   1bd8c:	ldr	r3, [fp, #-8]
   1bd90:	str	r2, [r3, #12]
   1bd94:	ldr	r3, [fp, #-12]
   1bd98:	uxth	r3, r3
   1bd9c:	mov	r1, r3
   1bda0:	ldr	r0, [fp, #-8]
   1bda4:	bl	169e8 <flatcc_builder_default_alloc@@Base+0x550>
   1bda8:	mov	r3, r0
   1bdac:	mov	r0, r3
   1bdb0:	sub	sp, fp, #4
   1bdb4:	pop	{fp, pc}
   1bdb8:			; <UNDEFINED> instruction: 0x0000afb0
   1bdbc:	andeq	r0, r0, r3, lsl r7
   1bdc0:	andeq	sl, r0, r8, lsl #13
   1bdc4:	andeq	sl, r0, r0, asr #18
   1bdc8:	strdeq	r7, [r0], -ip
   1bdcc:	andeq	sl, r0, r4, ror pc
   1bdd0:	andeq	r0, r0, r4, lsl r7
   1bdd4:	andeq	sl, r0, ip, asr #12
   1bdd8:	andeq	sl, r0, r0, lsr #20
   1bddc:	andeq	sl, r0, r4, lsr pc
   1bde0:	andeq	r0, r0, fp, lsl r7
   1bde4:	andeq	sl, r0, ip, lsl #12
   1bde8:	andeq	sl, r0, r4, ror #12
   1bdec:			; <UNDEFINED> instruction: 0x9e3779b1

0001bdf0 <flatcc_builder_push_buffer_alignment@@Base>:
   1bdf0:	push	{fp}		; (str fp, [sp, #-4]!)
   1bdf4:	add	fp, sp, #0
   1bdf8:	sub	sp, sp, #20
   1bdfc:	str	r0, [fp, #-16]
   1be00:	ldr	r3, [fp, #-16]
   1be04:	ldrh	r3, [r3, #128]	; 0x80
   1be08:	strh	r3, [fp, #-6]
   1be0c:	ldr	r3, [fp, #-16]
   1be10:	mov	r2, #4
   1be14:	strh	r2, [r3, #128]	; 0x80
   1be18:	ldrh	r3, [fp, #-6]
   1be1c:	mov	r0, r3
   1be20:	add	sp, fp, #0
   1be24:	pop	{fp}		; (ldr fp, [sp], #4)
   1be28:	bx	lr

0001be2c <flatcc_builder_pop_buffer_alignment@@Base>:
   1be2c:	push	{fp, lr}
   1be30:	add	fp, sp, #4
   1be34:	sub	sp, sp, #8
   1be38:	str	r0, [fp, #-8]
   1be3c:	mov	r3, r1
   1be40:	strh	r3, [fp, #-10]
   1be44:	ldrh	r3, [fp, #-10]
   1be48:	mov	r1, r3
   1be4c:	ldr	r0, [fp, #-8]
   1be50:	bl	17354 <flatcc_builder_clear@@Base+0xb0>
   1be54:	nop			; (mov r0, r0)
   1be58:	sub	sp, fp, #4
   1be5c:	pop	{fp, pc}

0001be60 <flatcc_builder_get_buffer_alignment@@Base>:
   1be60:	push	{fp}		; (str fp, [sp, #-4]!)
   1be64:	add	fp, sp, #0
   1be68:	sub	sp, sp, #12
   1be6c:	str	r0, [fp, #-8]
   1be70:	ldr	r3, [fp, #-8]
   1be74:	ldrh	r3, [r3, #128]	; 0x80
   1be78:	mov	r0, r3
   1be7c:	add	sp, fp, #0
   1be80:	pop	{fp}		; (ldr fp, [sp], #4)
   1be84:	bx	lr

0001be88 <flatcc_builder_set_vtable_clustering@@Base>:
   1be88:	push	{fp}		; (str fp, [sp, #-4]!)
   1be8c:	add	fp, sp, #0
   1be90:	sub	sp, sp, #12
   1be94:	str	r0, [fp, #-8]
   1be98:	str	r1, [fp, #-12]
   1be9c:	ldr	r3, [fp, #-12]
   1bea0:	cmp	r3, #0
   1bea4:	moveq	r3, #1
   1bea8:	movne	r3, #0
   1beac:	uxtb	r3, r3
   1beb0:	mov	r2, r3
   1beb4:	ldr	r3, [fp, #-8]
   1beb8:	str	r2, [r3, #180]	; 0xb4
   1bebc:	nop			; (mov r0, r0)
   1bec0:	add	sp, fp, #0
   1bec4:	pop	{fp}		; (ldr fp, [sp], #4)
   1bec8:	bx	lr

0001becc <flatcc_builder_set_block_align@@Base>:
   1becc:	push	{fp}		; (str fp, [sp, #-4]!)
   1bed0:	add	fp, sp, #0
   1bed4:	sub	sp, sp, #12
   1bed8:	str	r0, [fp, #-8]
   1bedc:	mov	r3, r1
   1bee0:	strh	r3, [fp, #-10]
   1bee4:	ldr	r3, [fp, #-8]
   1bee8:	ldrh	r2, [fp, #-10]
   1beec:	strh	r2, [r3, #132]	; 0x84
   1bef0:	nop			; (mov r0, r0)
   1bef4:	add	sp, fp, #0
   1bef8:	pop	{fp}		; (ldr fp, [sp], #4)
   1befc:	bx	lr

0001bf00 <flatcc_builder_get_level@@Base>:
   1bf00:	push	{fp}		; (str fp, [sp, #-4]!)
   1bf04:	add	fp, sp, #0
   1bf08:	sub	sp, sp, #12
   1bf0c:	str	r0, [fp, #-8]
   1bf10:	ldr	r3, [fp, #-8]
   1bf14:	ldr	r3, [r3, #156]	; 0x9c
   1bf18:	mov	r0, r3
   1bf1c:	add	sp, fp, #0
   1bf20:	pop	{fp}		; (ldr fp, [sp], #4)
   1bf24:	bx	lr

0001bf28 <flatcc_builder_set_max_level@@Base>:
   1bf28:	push	{fp}		; (str fp, [sp, #-4]!)
   1bf2c:	add	fp, sp, #0
   1bf30:	sub	sp, sp, #12
   1bf34:	str	r0, [fp, #-8]
   1bf38:	str	r1, [fp, #-12]
   1bf3c:	ldr	r3, [fp, #-8]
   1bf40:	ldr	r2, [fp, #-12]
   1bf44:	str	r2, [r3, #176]	; 0xb0
   1bf48:	ldr	r3, [fp, #-8]
   1bf4c:	ldr	r2, [r3, #160]	; 0xa0
   1bf50:	ldr	r3, [fp, #-8]
   1bf54:	ldr	r3, [r3, #176]	; 0xb0
   1bf58:	cmp	r2, r3
   1bf5c:	bge	1bf70 <flatcc_builder_set_max_level@@Base+0x48>
   1bf60:	ldr	r3, [fp, #-8]
   1bf64:	ldr	r2, [r3, #176]	; 0xb0
   1bf68:	ldr	r3, [fp, #-8]
   1bf6c:	str	r2, [r3, #160]	; 0xa0
   1bf70:	nop			; (mov r0, r0)
   1bf74:	add	sp, fp, #0
   1bf78:	pop	{fp}		; (ldr fp, [sp], #4)
   1bf7c:	bx	lr

0001bf80 <flatcc_builder_get_buffer_size@@Base>:
   1bf80:	push	{fp}		; (str fp, [sp, #-4]!)
   1bf84:	add	fp, sp, #0
   1bf88:	sub	sp, sp, #12
   1bf8c:	str	r0, [fp, #-8]
   1bf90:	ldr	r3, [fp, #-8]
   1bf94:	ldr	r2, [r3, #140]	; 0x8c
   1bf98:	ldr	r3, [fp, #-8]
   1bf9c:	ldr	r3, [r3, #136]	; 0x88
   1bfa0:	sub	r3, r2, r3
   1bfa4:	mov	r0, r3
   1bfa8:	add	sp, fp, #0
   1bfac:	pop	{fp}		; (ldr fp, [sp], #4)
   1bfb0:	bx	lr

0001bfb4 <flatcc_builder_get_buffer_start@@Base>:
   1bfb4:	push	{fp}		; (str fp, [sp, #-4]!)
   1bfb8:	add	fp, sp, #0
   1bfbc:	sub	sp, sp, #12
   1bfc0:	str	r0, [fp, #-8]
   1bfc4:	ldr	r3, [fp, #-8]
   1bfc8:	ldr	r3, [r3, #136]	; 0x88
   1bfcc:	mov	r0, r3
   1bfd0:	add	sp, fp, #0
   1bfd4:	pop	{fp}		; (ldr fp, [sp], #4)
   1bfd8:	bx	lr

0001bfdc <flatcc_builder_get_buffer_end@@Base>:
   1bfdc:	push	{fp}		; (str fp, [sp, #-4]!)
   1bfe0:	add	fp, sp, #0
   1bfe4:	sub	sp, sp, #12
   1bfe8:	str	r0, [fp, #-8]
   1bfec:	ldr	r3, [fp, #-8]
   1bff0:	ldr	r3, [r3, #140]	; 0x8c
   1bff4:	mov	r0, r3
   1bff8:	add	sp, fp, #0
   1bffc:	pop	{fp}		; (ldr fp, [sp], #4)
   1c000:	bx	lr

0001c004 <flatcc_builder_set_vtable_cache_limit@@Base>:
   1c004:	push	{fp}		; (str fp, [sp, #-4]!)
   1c008:	add	fp, sp, #0
   1c00c:	sub	sp, sp, #12
   1c010:	str	r0, [fp, #-8]
   1c014:	str	r1, [fp, #-12]
   1c018:	ldr	r3, [fp, #-8]
   1c01c:	ldr	r2, [fp, #-12]
   1c020:	str	r2, [r3, #172]	; 0xac
   1c024:	nop			; (mov r0, r0)
   1c028:	add	sp, fp, #0
   1c02c:	pop	{fp}		; (ldr fp, [sp], #4)
   1c030:	bx	lr

0001c034 <flatcc_builder_set_identifier@@Base>:
   1c034:	push	{fp}		; (str fp, [sp, #-4]!)
   1c038:	add	fp, sp, #0
   1c03c:	sub	sp, sp, #12
   1c040:	str	r0, [fp, #-8]
   1c044:	str	r1, [fp, #-12]
   1c048:	ldr	r1, [pc, #60]	; 1c08c <flatcc_builder_set_identifier@@Base+0x58>
   1c04c:	add	r1, pc, r1
   1c050:	ldr	r3, [fp, #-8]
   1c054:	add	r2, r3, #168	; 0xa8
   1c058:	ldr	r3, [fp, #-12]
   1c05c:	cmp	r3, #0
   1c060:	beq	1c06c <flatcc_builder_set_identifier@@Base+0x38>
   1c064:	ldr	r3, [fp, #-12]
   1c068:	b	1c074 <flatcc_builder_set_identifier@@Base+0x40>
   1c06c:	ldr	r3, [pc, #28]	; 1c090 <flatcc_builder_set_identifier@@Base+0x5c>
   1c070:	ldr	r3, [r1, r3]
   1c074:	ldr	r3, [r3]
   1c078:	str	r3, [r2]
   1c07c:	nop			; (mov r0, r0)
   1c080:	add	sp, fp, #0
   1c084:	pop	{fp}		; (ldr fp, [sp], #4)
   1c088:	bx	lr
   1c08c:	andeq	fp, r1, ip, lsr #31
   1c090:	andeq	r0, r0, r4, asr r0

0001c094 <flatcc_builder_get_type@@Base>:
   1c094:	push	{fp}		; (str fp, [sp, #-4]!)
   1c098:	add	fp, sp, #0
   1c09c:	sub	sp, sp, #12
   1c0a0:	str	r0, [fp, #-8]
   1c0a4:	ldr	r3, [fp, #-8]
   1c0a8:	ldr	r3, [r3, #32]
   1c0ac:	cmp	r3, #0
   1c0b0:	beq	1c0c4 <flatcc_builder_get_type@@Base+0x30>
   1c0b4:	ldr	r3, [fp, #-8]
   1c0b8:	ldr	r3, [r3, #32]
   1c0bc:	ldrh	r3, [r3, #14]
   1c0c0:	b	1c0c8 <flatcc_builder_get_type@@Base+0x34>
   1c0c4:	mov	r3, #0
   1c0c8:	mov	r0, r3
   1c0cc:	add	sp, fp, #0
   1c0d0:	pop	{fp}		; (ldr fp, [sp], #4)
   1c0d4:	bx	lr

0001c0d8 <flatcc_builder_get_type_at@@Base>:
   1c0d8:	push	{fp}		; (str fp, [sp, #-4]!)
   1c0dc:	add	fp, sp, #0
   1c0e0:	sub	sp, sp, #12
   1c0e4:	str	r0, [fp, #-8]
   1c0e8:	str	r1, [fp, #-12]
   1c0ec:	ldr	r3, [fp, #-12]
   1c0f0:	cmp	r3, #0
   1c0f4:	ble	1c10c <flatcc_builder_get_type_at@@Base+0x34>
   1c0f8:	ldr	r3, [fp, #-8]
   1c0fc:	ldr	r2, [r3, #156]	; 0x9c
   1c100:	ldr	r3, [fp, #-12]
   1c104:	cmp	r2, r3
   1c108:	bge	1c114 <flatcc_builder_get_type_at@@Base+0x3c>
   1c10c:	mov	r3, #0
   1c110:	b	1c148 <flatcc_builder_get_type_at@@Base+0x70>
   1c114:	ldr	r3, [fp, #-8]
   1c118:	ldr	r2, [r3, #32]
   1c11c:	ldr	r3, [fp, #-8]
   1c120:	ldr	r3, [r3, #156]	; 0x9c
   1c124:	ldr	r1, [fp, #-12]
   1c128:	sub	r3, r1, r3
   1c12c:	mov	r1, r3
   1c130:	mov	r3, r1
   1c134:	lsl	r3, r3, #3
   1c138:	add	r3, r3, r1
   1c13c:	lsl	r3, r3, #2
   1c140:	add	r3, r2, r3
   1c144:	ldrh	r3, [r3, #14]
   1c148:	mov	r0, r3
   1c14c:	add	sp, fp, #0
   1c150:	pop	{fp}		; (ldr fp, [sp], #4)
   1c154:	bx	lr

0001c158 <flatcc_builder_get_direct_buffer@@Base>:
   1c158:	push	{fp, lr}
   1c15c:	add	fp, sp, #4
   1c160:	sub	sp, sp, #8
   1c164:	str	r0, [fp, #-8]
   1c168:	str	r1, [fp, #-12]
   1c16c:	ldr	r3, [fp, #-8]
   1c170:	ldr	r3, [r3, #184]	; 0xb8
   1c174:	cmp	r3, #0
   1c178:	beq	1c198 <flatcc_builder_get_direct_buffer@@Base+0x40>
   1c17c:	ldr	r3, [fp, #-8]
   1c180:	add	r3, r3, #188	; 0xbc
   1c184:	ldr	r1, [fp, #-12]
   1c188:	mov	r0, r3
   1c18c:	bl	163c4 <main@@Base+0x164>
   1c190:	mov	r3, r0
   1c194:	b	1c1b4 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   1c198:	ldr	r3, [fp, #-12]
   1c19c:	cmp	r3, #0
   1c1a0:	beq	1c1b0 <flatcc_builder_get_direct_buffer@@Base+0x58>
   1c1a4:	ldr	r3, [fp, #-12]
   1c1a8:	mov	r2, #0
   1c1ac:	str	r2, [r3]
   1c1b0:	mov	r3, #0
   1c1b4:	mov	r0, r3
   1c1b8:	sub	sp, fp, #4
   1c1bc:	pop	{fp, pc}

0001c1c0 <flatcc_builder_copy_buffer@@Base>:
   1c1c0:	push	{fp, lr}
   1c1c4:	add	fp, sp, #4
   1c1c8:	sub	sp, sp, #16
   1c1cc:	str	r0, [fp, #-8]
   1c1d0:	str	r1, [fp, #-12]
   1c1d4:	str	r2, [fp, #-16]
   1c1d8:	ldr	r3, [fp, #-8]
   1c1dc:	ldr	r3, [r3, #184]	; 0xb8
   1c1e0:	cmp	r3, #0
   1c1e4:	bne	1c1f0 <flatcc_builder_copy_buffer@@Base+0x30>
   1c1e8:	mov	r3, #0
   1c1ec:	b	1c23c <flatcc_builder_copy_buffer@@Base+0x7c>
   1c1f0:	ldr	r3, [fp, #-8]
   1c1f4:	add	r3, r3, #188	; 0xbc
   1c1f8:	ldr	r2, [fp, #-16]
   1c1fc:	ldr	r1, [fp, #-12]
   1c200:	mov	r0, r3
   1c204:	bl	1cf88 <flatcc_emitter_copy_buffer@@Base>
   1c208:	str	r0, [fp, #-12]
   1c20c:	ldr	r3, [fp, #-12]
   1c210:	cmp	r3, #0
   1c214:	bne	1c238 <flatcc_builder_copy_buffer@@Base+0x78>
   1c218:	ldr	r3, [pc, #40]	; 1c248 <flatcc_builder_copy_buffer@@Base+0x88>
   1c21c:	add	r3, pc, r3
   1c220:	ldr	r2, [pc, #36]	; 1c24c <flatcc_builder_copy_buffer@@Base+0x8c>
   1c224:	ldr	r1, [pc, #36]	; 1c250 <flatcc_builder_copy_buffer@@Base+0x90>
   1c228:	add	r1, pc, r1
   1c22c:	ldr	r0, [pc, #32]	; 1c254 <flatcc_builder_copy_buffer@@Base+0x94>
   1c230:	add	r0, pc, r0
   1c234:	bl	12504 <__assert_fail@plt>
   1c238:	ldr	r3, [fp, #-12]
   1c23c:	mov	r0, r3
   1c240:	sub	sp, fp, #4
   1c244:	pop	{fp, pc}
   1c248:	andeq	sl, r0, r4, lsl #21
   1c24c:	andeq	r0, r0, r6, lsl #15
   1c250:	andeq	sl, r0, ip, lsr r1
   1c254:	andeq	sl, r0, r4, asr r5

0001c258 <flatcc_builder_finalize_buffer@@Base>:
   1c258:	push	{fp, lr}
   1c25c:	add	fp, sp, #4
   1c260:	sub	sp, sp, #16
   1c264:	str	r0, [fp, #-16]
   1c268:	str	r1, [fp, #-20]	; 0xffffffec
   1c26c:	ldr	r0, [fp, #-16]
   1c270:	bl	1bf80 <flatcc_builder_get_buffer_size@@Base>
   1c274:	str	r0, [fp, #-8]
   1c278:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c27c:	cmp	r3, #0
   1c280:	beq	1c290 <flatcc_builder_finalize_buffer@@Base+0x38>
   1c284:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c288:	ldr	r2, [fp, #-8]
   1c28c:	str	r2, [r3]
   1c290:	ldr	r0, [fp, #-8]
   1c294:	bl	1248c <malloc@plt>
   1c298:	mov	r3, r0
   1c29c:	str	r3, [fp, #-12]
   1c2a0:	ldr	r3, [fp, #-12]
   1c2a4:	cmp	r3, #0
   1c2a8:	bne	1c2cc <flatcc_builder_finalize_buffer@@Base+0x74>
   1c2ac:	ldr	r3, [pc, #136]	; 1c33c <flatcc_builder_finalize_buffer@@Base+0xe4>
   1c2b0:	add	r3, pc, r3
   1c2b4:	ldr	r2, [pc, #132]	; 1c340 <flatcc_builder_finalize_buffer@@Base+0xe8>
   1c2b8:	ldr	r1, [pc, #132]	; 1c344 <flatcc_builder_finalize_buffer@@Base+0xec>
   1c2bc:	add	r1, pc, r1
   1c2c0:	ldr	r0, [pc, #128]	; 1c348 <flatcc_builder_finalize_buffer@@Base+0xf0>
   1c2c4:	add	r0, pc, r0
   1c2c8:	bl	12504 <__assert_fail@plt>
   1c2cc:	ldr	r2, [fp, #-8]
   1c2d0:	ldr	r1, [fp, #-12]
   1c2d4:	ldr	r0, [fp, #-16]
   1c2d8:	bl	1c1c0 <flatcc_builder_copy_buffer@@Base>
   1c2dc:	mov	r3, r0
   1c2e0:	cmp	r3, #0
   1c2e4:	bne	1c308 <flatcc_builder_finalize_buffer@@Base+0xb0>
   1c2e8:	ldr	r3, [pc, #92]	; 1c34c <flatcc_builder_finalize_buffer@@Base+0xf4>
   1c2ec:	add	r3, pc, r3
   1c2f0:	ldr	r2, [pc, #88]	; 1c350 <flatcc_builder_finalize_buffer@@Base+0xf8>
   1c2f4:	ldr	r1, [pc, #88]	; 1c354 <flatcc_builder_finalize_buffer@@Base+0xfc>
   1c2f8:	add	r1, pc, r1
   1c2fc:	ldr	r0, [pc, #84]	; 1c358 <flatcc_builder_finalize_buffer@@Base+0x100>
   1c300:	add	r0, pc, r0
   1c304:	bl	12504 <__assert_fail@plt>
   1c308:	ldr	r3, [fp, #-12]
   1c30c:	cmp	r3, #0
   1c310:	bne	1c32c <flatcc_builder_finalize_buffer@@Base+0xd4>
   1c314:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c318:	cmp	r3, #0
   1c31c:	beq	1c32c <flatcc_builder_finalize_buffer@@Base+0xd4>
   1c320:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c324:	mov	r2, #0
   1c328:	str	r2, [r3]
   1c32c:	ldr	r3, [fp, #-12]
   1c330:	mov	r0, r3
   1c334:	sub	sp, fp, #4
   1c338:	pop	{fp, pc}
   1c33c:	andeq	sl, r0, ip, lsl #20
   1c340:	muleq	r0, r8, r7
   1c344:	andeq	sl, r0, r8, lsr #1
   1c348:	andeq	sl, r0, r0, lsl #2
   1c34c:	ldrdeq	sl, [r0], -r0
   1c350:	muleq	r0, ip, r7
   1c354:	andeq	sl, r0, ip, rrx
   1c358:	andeq	sl, r0, r4, asr #1

0001c35c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1c35c:	push	{fp, lr}
   1c360:	add	fp, sp, #4
   1c364:	sub	sp, sp, #24
   1c368:	str	r0, [fp, #-24]	; 0xffffffe8
   1c36c:	str	r1, [fp, #-28]	; 0xffffffe4
   1c370:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c374:	bl	1bf80 <flatcc_builder_get_buffer_size@@Base>
   1c378:	str	r0, [fp, #-12]
   1c37c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c380:	cmp	r3, #0
   1c384:	beq	1c394 <flatcc_builder_finalize_aligned_buffer@@Base+0x38>
   1c388:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c38c:	ldr	r2, [fp, #-12]
   1c390:	str	r2, [r3]
   1c394:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c398:	bl	1be60 <flatcc_builder_get_buffer_alignment@@Base>
   1c39c:	mov	r3, r0
   1c3a0:	str	r3, [fp, #-16]
   1c3a4:	ldr	r2, [fp, #-12]
   1c3a8:	ldr	r3, [fp, #-16]
   1c3ac:	add	r3, r2, r3
   1c3b0:	sub	r2, r3, #1
   1c3b4:	ldr	r3, [fp, #-16]
   1c3b8:	rsb	r3, r3, #0
   1c3bc:	and	r3, r3, r2
   1c3c0:	str	r3, [fp, #-12]
   1c3c4:	ldr	r1, [fp, #-12]
   1c3c8:	ldr	r0, [fp, #-16]
   1c3cc:	bl	162d0 <main@@Base+0x70>
   1c3d0:	str	r0, [fp, #-8]
   1c3d4:	ldr	r3, [fp, #-8]
   1c3d8:	cmp	r3, #0
   1c3dc:	beq	1c410 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   1c3e0:	ldr	r2, [fp, #-12]
   1c3e4:	ldr	r1, [fp, #-8]
   1c3e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c3ec:	bl	1c1c0 <flatcc_builder_copy_buffer@@Base>
   1c3f0:	mov	r3, r0
   1c3f4:	cmp	r3, #0
   1c3f8:	bne	1c414 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1c3fc:	ldr	r0, [fp, #-8]
   1c400:	bl	12450 <free@plt>
   1c404:	mov	r3, #0
   1c408:	str	r3, [fp, #-8]
   1c40c:	b	1c414 <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   1c410:	nop			; (mov r0, r0)
   1c414:	ldr	r3, [fp, #-8]
   1c418:	cmp	r3, #0
   1c41c:	bne	1c438 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   1c420:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c424:	cmp	r3, #0
   1c428:	beq	1c438 <flatcc_builder_finalize_aligned_buffer@@Base+0xdc>
   1c42c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c430:	mov	r2, #0
   1c434:	str	r2, [r3]
   1c438:	ldr	r3, [fp, #-8]
   1c43c:	mov	r0, r3
   1c440:	sub	sp, fp, #4
   1c444:	pop	{fp, pc}

0001c448 <flatcc_builder_aligned_alloc@@Base>:
   1c448:	push	{fp, lr}
   1c44c:	add	fp, sp, #4
   1c450:	sub	sp, sp, #8
   1c454:	str	r0, [fp, #-8]
   1c458:	str	r1, [fp, #-12]
   1c45c:	ldr	r1, [fp, #-12]
   1c460:	ldr	r0, [fp, #-8]
   1c464:	bl	162d0 <main@@Base+0x70>
   1c468:	mov	r3, r0
   1c46c:	mov	r0, r3
   1c470:	sub	sp, fp, #4
   1c474:	pop	{fp, pc}

0001c478 <flatcc_builder_aligned_free@@Base>:
   1c478:	push	{fp, lr}
   1c47c:	add	fp, sp, #4
   1c480:	sub	sp, sp, #8
   1c484:	str	r0, [fp, #-8]
   1c488:	ldr	r0, [fp, #-8]
   1c48c:	bl	12450 <free@plt>
   1c490:	nop			; (mov r0, r0)
   1c494:	sub	sp, fp, #4
   1c498:	pop	{fp, pc}

0001c49c <flatcc_builder_get_emit_context@@Base>:
   1c49c:	push	{fp}		; (str fp, [sp, #-4]!)
   1c4a0:	add	fp, sp, #0
   1c4a4:	sub	sp, sp, #12
   1c4a8:	str	r0, [fp, #-8]
   1c4ac:	ldr	r3, [fp, #-8]
   1c4b0:	ldr	r3, [r3, #36]	; 0x24
   1c4b4:	mov	r0, r3
   1c4b8:	add	sp, fp, #0
   1c4bc:	pop	{fp}		; (ldr fp, [sp], #4)
   1c4c0:	bx	lr
   1c4c4:	push	{fp, lr}
   1c4c8:	add	fp, sp, #4
   1c4cc:	sub	sp, sp, #16
   1c4d0:	str	r0, [fp, #-16]
   1c4d4:	mov	r3, #0
   1c4d8:	str	r3, [fp, #-8]
   1c4dc:	ldr	r3, [fp, #-16]
   1c4e0:	ldr	r3, [r3]
   1c4e4:	cmp	r3, #0
   1c4e8:	beq	1c540 <flatcc_builder_get_emit_context@@Base+0xa4>
   1c4ec:	ldr	r3, [fp, #-16]
   1c4f0:	ldr	r3, [r3]
   1c4f4:	ldr	r2, [r3, #2948]	; 0xb84
   1c4f8:	ldr	r3, [fp, #-16]
   1c4fc:	ldr	r3, [r3, #4]
   1c500:	cmp	r2, r3
   1c504:	beq	1c540 <flatcc_builder_get_emit_context@@Base+0xa4>
   1c508:	ldr	r3, [fp, #-16]
   1c50c:	ldr	r3, [r3]
   1c510:	ldr	r3, [r3, #2948]	; 0xb84
   1c514:	ldr	r2, [fp, #-16]
   1c518:	ldr	r2, [r2]
   1c51c:	ldr	r2, [r2, #2952]	; 0xb88
   1c520:	sub	r2, r2, #2944	; 0xb80
   1c524:	str	r2, [r3, #2952]	; 0xb88
   1c528:	ldr	r3, [fp, #-16]
   1c52c:	ldr	r3, [r3]
   1c530:	ldr	r2, [r3, #2948]	; 0xb84
   1c534:	ldr	r3, [fp, #-16]
   1c538:	str	r2, [r3]
   1c53c:	b	1c668 <flatcc_builder_get_emit_context@@Base+0x1cc>
   1c540:	ldr	r0, [pc, #368]	; 1c6b8 <flatcc_builder_get_emit_context@@Base+0x21c>
   1c544:	bl	1248c <malloc@plt>
   1c548:	mov	r3, r0
   1c54c:	str	r3, [fp, #-8]
   1c550:	ldr	r3, [fp, #-8]
   1c554:	cmp	r3, #0
   1c558:	bne	1c564 <flatcc_builder_get_emit_context@@Base+0xc8>
   1c55c:	mvn	r3, #0
   1c560:	b	1c6ac <flatcc_builder_get_emit_context@@Base+0x210>
   1c564:	ldr	r3, [fp, #-16]
   1c568:	ldr	r3, [r3, #28]
   1c56c:	add	r2, r3, #2944	; 0xb80
   1c570:	ldr	r3, [fp, #-16]
   1c574:	str	r2, [r3, #28]
   1c578:	ldr	r3, [fp, #-16]
   1c57c:	ldr	r3, [r3]
   1c580:	cmp	r3, #0
   1c584:	beq	1c5d8 <flatcc_builder_get_emit_context@@Base+0x13c>
   1c588:	ldr	r3, [fp, #-16]
   1c58c:	ldr	r2, [r3, #4]
   1c590:	ldr	r3, [fp, #-8]
   1c594:	str	r2, [r3, #2948]	; 0xb84
   1c598:	ldr	r3, [fp, #-16]
   1c59c:	ldr	r2, [r3]
   1c5a0:	ldr	r3, [fp, #-8]
   1c5a4:	str	r2, [r3, #2944]	; 0xb80
   1c5a8:	ldr	r3, [fp, #-16]
   1c5ac:	ldr	r3, [r3]
   1c5b0:	ldr	r2, [fp, #-8]
   1c5b4:	str	r2, [r3, #2948]	; 0xb84
   1c5b8:	ldr	r3, [fp, #-16]
   1c5bc:	ldr	r3, [r3, #4]
   1c5c0:	ldr	r2, [fp, #-8]
   1c5c4:	str	r2, [r3, #2944]	; 0xb80
   1c5c8:	ldr	r3, [fp, #-16]
   1c5cc:	ldr	r2, [fp, #-8]
   1c5d0:	str	r2, [r3]
   1c5d4:	b	1c668 <flatcc_builder_get_emit_context@@Base+0x1cc>
   1c5d8:	ldr	r3, [fp, #-16]
   1c5dc:	ldr	r2, [fp, #-8]
   1c5e0:	str	r2, [r3]
   1c5e4:	ldr	r3, [fp, #-16]
   1c5e8:	ldr	r2, [fp, #-8]
   1c5ec:	str	r2, [r3, #4]
   1c5f0:	ldr	r3, [fp, #-8]
   1c5f4:	ldr	r2, [fp, #-8]
   1c5f8:	str	r2, [r3, #2944]	; 0xb80
   1c5fc:	ldr	r3, [fp, #-8]
   1c600:	ldr	r2, [fp, #-8]
   1c604:	str	r2, [r3, #2948]	; 0xb84
   1c608:	ldr	r3, [fp, #-16]
   1c60c:	ldr	r3, [r3]
   1c610:	add	r2, r3, #1472	; 0x5c0
   1c614:	ldr	r3, [fp, #-16]
   1c618:	str	r2, [r3, #8]
   1c61c:	ldr	r3, [fp, #-16]
   1c620:	ldr	r2, [r3, #8]
   1c624:	ldr	r3, [fp, #-16]
   1c628:	str	r2, [r3, #16]
   1c62c:	ldr	r3, [fp, #-16]
   1c630:	mov	r2, #1472	; 0x5c0
   1c634:	str	r2, [r3, #12]
   1c638:	ldr	r3, [fp, #-16]
   1c63c:	ldr	r3, [r3, #12]
   1c640:	rsb	r2, r3, #2944	; 0xb80
   1c644:	ldr	r3, [fp, #-16]
   1c648:	str	r2, [r3, #20]
   1c64c:	ldr	r3, [fp, #-16]
   1c650:	ldr	r3, [r3, #12]
   1c654:	rsb	r2, r3, #0
   1c658:	ldr	r3, [fp, #-8]
   1c65c:	str	r2, [r3, #2952]	; 0xb88
   1c660:	mov	r3, #0
   1c664:	b	1c6ac <flatcc_builder_get_emit_context@@Base+0x210>
   1c668:	ldr	r3, [fp, #-16]
   1c66c:	ldr	r3, [r3]
   1c670:	add	r2, r3, #2944	; 0xb80
   1c674:	ldr	r3, [fp, #-16]
   1c678:	str	r2, [r3, #8]
   1c67c:	ldr	r3, [fp, #-16]
   1c680:	mov	r2, #2944	; 0xb80
   1c684:	str	r2, [r3, #12]
   1c688:	ldr	r3, [fp, #-16]
   1c68c:	ldr	r3, [r3]
   1c690:	ldr	r2, [fp, #-16]
   1c694:	ldr	r2, [r2]
   1c698:	ldr	r2, [r2, #2944]	; 0xb80
   1c69c:	ldr	r2, [r2, #2952]	; 0xb88
   1c6a0:	sub	r2, r2, #2944	; 0xb80
   1c6a4:	str	r2, [r3, #2952]	; 0xb88
   1c6a8:	mov	r3, #0
   1c6ac:	mov	r0, r3
   1c6b0:	sub	sp, fp, #4
   1c6b4:	pop	{fp, pc}
   1c6b8:	andeq	r0, r0, ip, lsl #23
   1c6bc:	push	{fp, lr}
   1c6c0:	add	fp, sp, #4
   1c6c4:	sub	sp, sp, #16
   1c6c8:	str	r0, [fp, #-16]
   1c6cc:	mov	r3, #0
   1c6d0:	str	r3, [fp, #-8]
   1c6d4:	ldr	r3, [fp, #-16]
   1c6d8:	ldr	r3, [r3, #4]
   1c6dc:	cmp	r3, #0
   1c6e0:	beq	1c718 <flatcc_builder_get_emit_context@@Base+0x27c>
   1c6e4:	ldr	r3, [fp, #-16]
   1c6e8:	ldr	r3, [r3, #4]
   1c6ec:	ldr	r2, [r3, #2944]	; 0xb80
   1c6f0:	ldr	r3, [fp, #-16]
   1c6f4:	ldr	r3, [r3]
   1c6f8:	cmp	r2, r3
   1c6fc:	beq	1c718 <flatcc_builder_get_emit_context@@Base+0x27c>
   1c700:	ldr	r3, [fp, #-16]
   1c704:	ldr	r3, [r3, #4]
   1c708:	ldr	r2, [r3, #2944]	; 0xb80
   1c70c:	ldr	r3, [fp, #-16]
   1c710:	str	r2, [r3, #4]
   1c714:	b	1c840 <flatcc_builder_get_emit_context@@Base+0x3a4>
   1c718:	ldr	r0, [pc, #368]	; 1c890 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1c71c:	bl	1248c <malloc@plt>
   1c720:	mov	r3, r0
   1c724:	str	r3, [fp, #-8]
   1c728:	ldr	r3, [fp, #-8]
   1c72c:	cmp	r3, #0
   1c730:	bne	1c73c <flatcc_builder_get_emit_context@@Base+0x2a0>
   1c734:	mvn	r3, #0
   1c738:	b	1c884 <flatcc_builder_get_emit_context@@Base+0x3e8>
   1c73c:	ldr	r3, [fp, #-16]
   1c740:	ldr	r3, [r3, #28]
   1c744:	add	r2, r3, #2944	; 0xb80
   1c748:	ldr	r3, [fp, #-16]
   1c74c:	str	r2, [r3, #28]
   1c750:	ldr	r3, [fp, #-16]
   1c754:	ldr	r3, [r3, #4]
   1c758:	cmp	r3, #0
   1c75c:	beq	1c7b0 <flatcc_builder_get_emit_context@@Base+0x314>
   1c760:	ldr	r3, [fp, #-16]
   1c764:	ldr	r2, [r3, #4]
   1c768:	ldr	r3, [fp, #-8]
   1c76c:	str	r2, [r3, #2948]	; 0xb84
   1c770:	ldr	r3, [fp, #-16]
   1c774:	ldr	r2, [r3]
   1c778:	ldr	r3, [fp, #-8]
   1c77c:	str	r2, [r3, #2944]	; 0xb80
   1c780:	ldr	r3, [fp, #-16]
   1c784:	ldr	r3, [r3]
   1c788:	ldr	r2, [fp, #-8]
   1c78c:	str	r2, [r3, #2948]	; 0xb84
   1c790:	ldr	r3, [fp, #-16]
   1c794:	ldr	r3, [r3, #4]
   1c798:	ldr	r2, [fp, #-8]
   1c79c:	str	r2, [r3, #2944]	; 0xb80
   1c7a0:	ldr	r3, [fp, #-16]
   1c7a4:	ldr	r2, [fp, #-8]
   1c7a8:	str	r2, [r3, #4]
   1c7ac:	b	1c840 <flatcc_builder_get_emit_context@@Base+0x3a4>
   1c7b0:	ldr	r3, [fp, #-16]
   1c7b4:	ldr	r2, [fp, #-8]
   1c7b8:	str	r2, [r3]
   1c7bc:	ldr	r3, [fp, #-16]
   1c7c0:	ldr	r2, [fp, #-8]
   1c7c4:	str	r2, [r3, #4]
   1c7c8:	ldr	r3, [fp, #-8]
   1c7cc:	ldr	r2, [fp, #-8]
   1c7d0:	str	r2, [r3, #2944]	; 0xb80
   1c7d4:	ldr	r3, [fp, #-8]
   1c7d8:	ldr	r2, [fp, #-8]
   1c7dc:	str	r2, [r3, #2948]	; 0xb84
   1c7e0:	ldr	r3, [fp, #-16]
   1c7e4:	ldr	r3, [r3]
   1c7e8:	add	r2, r3, #1472	; 0x5c0
   1c7ec:	ldr	r3, [fp, #-16]
   1c7f0:	str	r2, [r3, #8]
   1c7f4:	ldr	r3, [fp, #-16]
   1c7f8:	ldr	r2, [r3, #8]
   1c7fc:	ldr	r3, [fp, #-16]
   1c800:	str	r2, [r3, #16]
   1c804:	ldr	r3, [fp, #-16]
   1c808:	mov	r2, #1472	; 0x5c0
   1c80c:	str	r2, [r3, #12]
   1c810:	ldr	r3, [fp, #-16]
   1c814:	ldr	r3, [r3, #12]
   1c818:	rsb	r2, r3, #2944	; 0xb80
   1c81c:	ldr	r3, [fp, #-16]
   1c820:	str	r2, [r3, #20]
   1c824:	ldr	r3, [fp, #-16]
   1c828:	ldr	r3, [r3, #12]
   1c82c:	rsb	r2, r3, #0
   1c830:	ldr	r3, [fp, #-8]
   1c834:	str	r2, [r3, #2952]	; 0xb88
   1c838:	mov	r3, #0
   1c83c:	b	1c884 <flatcc_builder_get_emit_context@@Base+0x3e8>
   1c840:	ldr	r3, [fp, #-16]
   1c844:	ldr	r3, [r3, #4]
   1c848:	mov	r2, r3
   1c84c:	ldr	r3, [fp, #-16]
   1c850:	str	r2, [r3, #16]
   1c854:	ldr	r3, [fp, #-16]
   1c858:	mov	r2, #2944	; 0xb80
   1c85c:	str	r2, [r3, #20]
   1c860:	ldr	r3, [fp, #-16]
   1c864:	ldr	r3, [r3, #4]
   1c868:	ldr	r2, [fp, #-16]
   1c86c:	ldr	r2, [r2, #4]
   1c870:	ldr	r2, [r2, #2948]	; 0xb84
   1c874:	ldr	r2, [r2, #2952]	; 0xb88
   1c878:	add	r2, r2, #2944	; 0xb80
   1c87c:	str	r2, [r3, #2952]	; 0xb88
   1c880:	mov	r3, #0
   1c884:	mov	r0, r3
   1c888:	sub	sp, fp, #4
   1c88c:	pop	{fp, pc}
   1c890:	andeq	r0, r0, ip, lsl #23
   1c894:	push	{fp, lr}
   1c898:	add	fp, sp, #4
   1c89c:	sub	sp, sp, #24
   1c8a0:	str	r0, [fp, #-16]
   1c8a4:	str	r1, [fp, #-20]	; 0xffffffec
   1c8a8:	str	r2, [fp, #-24]	; 0xffffffe8
   1c8ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c8b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c8b4:	add	r3, r2, r3
   1c8b8:	str	r3, [fp, #-20]	; 0xffffffec
   1c8bc:	b	1c980 <flatcc_builder_get_emit_context@@Base+0x4e4>
   1c8c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c8c4:	str	r3, [fp, #-8]
   1c8c8:	ldr	r3, [fp, #-16]
   1c8cc:	ldr	r2, [r3, #12]
   1c8d0:	ldr	r3, [fp, #-8]
   1c8d4:	cmp	r2, r3
   1c8d8:	bcs	1c910 <flatcc_builder_get_emit_context@@Base+0x474>
   1c8dc:	ldr	r3, [fp, #-16]
   1c8e0:	ldr	r3, [r3, #12]
   1c8e4:	str	r3, [fp, #-8]
   1c8e8:	ldr	r3, [fp, #-8]
   1c8ec:	cmp	r3, #0
   1c8f0:	bne	1c910 <flatcc_builder_get_emit_context@@Base+0x474>
   1c8f4:	ldr	r0, [fp, #-16]
   1c8f8:	bl	1c4c4 <flatcc_builder_get_emit_context@@Base+0x28>
   1c8fc:	mov	r3, r0
   1c900:	cmp	r3, #0
   1c904:	beq	1c980 <flatcc_builder_get_emit_context@@Base+0x4e4>
   1c908:	mvn	r3, #0
   1c90c:	b	1c990 <flatcc_builder_get_emit_context@@Base+0x4f4>
   1c910:	ldr	r3, [fp, #-16]
   1c914:	ldr	r2, [r3, #8]
   1c918:	ldr	r3, [fp, #-8]
   1c91c:	rsb	r3, r3, #0
   1c920:	add	r2, r2, r3
   1c924:	ldr	r3, [fp, #-16]
   1c928:	str	r2, [r3, #8]
   1c92c:	ldr	r3, [fp, #-16]
   1c930:	ldr	r2, [r3, #12]
   1c934:	ldr	r3, [fp, #-8]
   1c938:	sub	r2, r2, r3
   1c93c:	ldr	r3, [fp, #-16]
   1c940:	str	r2, [r3, #12]
   1c944:	ldr	r3, [fp, #-8]
   1c948:	rsb	r3, r3, #0
   1c94c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1c950:	add	r3, r2, r3
   1c954:	str	r3, [fp, #-20]	; 0xffffffec
   1c958:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1c95c:	ldr	r3, [fp, #-8]
   1c960:	sub	r3, r2, r3
   1c964:	str	r3, [fp, #-24]	; 0xffffffe8
   1c968:	ldr	r3, [fp, #-16]
   1c96c:	ldr	r3, [r3, #8]
   1c970:	ldr	r2, [fp, #-8]
   1c974:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c978:	mov	r0, r3
   1c97c:	bl	1245c <memcpy@plt>
   1c980:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c984:	cmp	r3, #0
   1c988:	bne	1c8c0 <flatcc_builder_get_emit_context@@Base+0x424>
   1c98c:	mov	r3, #0
   1c990:	mov	r0, r3
   1c994:	sub	sp, fp, #4
   1c998:	pop	{fp, pc}
   1c99c:	push	{fp, lr}
   1c9a0:	add	fp, sp, #4
   1c9a4:	sub	sp, sp, #24
   1c9a8:	str	r0, [fp, #-16]
   1c9ac:	str	r1, [fp, #-20]	; 0xffffffec
   1c9b0:	str	r2, [fp, #-24]	; 0xffffffe8
   1c9b4:	b	1ca70 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1c9b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c9bc:	str	r3, [fp, #-8]
   1c9c0:	ldr	r3, [fp, #-16]
   1c9c4:	ldr	r2, [r3, #20]
   1c9c8:	ldr	r3, [fp, #-8]
   1c9cc:	cmp	r2, r3
   1c9d0:	bcs	1ca08 <flatcc_builder_get_emit_context@@Base+0x56c>
   1c9d4:	ldr	r3, [fp, #-16]
   1c9d8:	ldr	r3, [r3, #20]
   1c9dc:	str	r3, [fp, #-8]
   1c9e0:	ldr	r3, [fp, #-8]
   1c9e4:	cmp	r3, #0
   1c9e8:	bne	1ca08 <flatcc_builder_get_emit_context@@Base+0x56c>
   1c9ec:	ldr	r0, [fp, #-16]
   1c9f0:	bl	1c6bc <flatcc_builder_get_emit_context@@Base+0x220>
   1c9f4:	mov	r3, r0
   1c9f8:	cmp	r3, #0
   1c9fc:	beq	1ca70 <flatcc_builder_get_emit_context@@Base+0x5d4>
   1ca00:	mvn	r3, #0
   1ca04:	b	1ca80 <flatcc_builder_get_emit_context@@Base+0x5e4>
   1ca08:	ldr	r3, [fp, #-16]
   1ca0c:	ldr	r3, [r3, #16]
   1ca10:	ldr	r2, [fp, #-8]
   1ca14:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ca18:	mov	r0, r3
   1ca1c:	bl	1245c <memcpy@plt>
   1ca20:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ca24:	ldr	r3, [fp, #-8]
   1ca28:	sub	r3, r2, r3
   1ca2c:	str	r3, [fp, #-24]	; 0xffffffe8
   1ca30:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ca34:	ldr	r3, [fp, #-8]
   1ca38:	add	r3, r2, r3
   1ca3c:	str	r3, [fp, #-20]	; 0xffffffec
   1ca40:	ldr	r3, [fp, #-16]
   1ca44:	ldr	r2, [r3, #16]
   1ca48:	ldr	r3, [fp, #-8]
   1ca4c:	add	r2, r2, r3
   1ca50:	ldr	r3, [fp, #-16]
   1ca54:	str	r2, [r3, #16]
   1ca58:	ldr	r3, [fp, #-16]
   1ca5c:	ldr	r2, [r3, #20]
   1ca60:	ldr	r3, [fp, #-8]
   1ca64:	sub	r2, r2, r3
   1ca68:	ldr	r3, [fp, #-16]
   1ca6c:	str	r2, [r3, #20]
   1ca70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ca74:	cmp	r3, #0
   1ca78:	bne	1c9b8 <flatcc_builder_get_emit_context@@Base+0x51c>
   1ca7c:	mov	r3, #0
   1ca80:	mov	r0, r3
   1ca84:	sub	sp, fp, #4
   1ca88:	pop	{fp, pc}

0001ca8c <flatcc_emitter_recycle_page@@Base>:
   1ca8c:	push	{fp}		; (str fp, [sp, #-4]!)
   1ca90:	add	fp, sp, #0
   1ca94:	sub	sp, sp, #12
   1ca98:	str	r0, [fp, #-8]
   1ca9c:	str	r1, [fp, #-12]
   1caa0:	ldr	r3, [fp, #-8]
   1caa4:	ldr	r2, [r3]
   1caa8:	ldr	r3, [fp, #-12]
   1caac:	cmp	r2, r3
   1cab0:	beq	1cac8 <flatcc_emitter_recycle_page@@Base+0x3c>
   1cab4:	ldr	r3, [fp, #-8]
   1cab8:	ldr	r2, [r3, #4]
   1cabc:	ldr	r3, [fp, #-12]
   1cac0:	cmp	r2, r3
   1cac4:	bne	1cad0 <flatcc_emitter_recycle_page@@Base+0x44>
   1cac8:	mvn	r3, #0
   1cacc:	b	1cb40 <flatcc_emitter_recycle_page@@Base+0xb4>
   1cad0:	ldr	r3, [fp, #-12]
   1cad4:	ldr	r3, [r3, #2944]	; 0xb80
   1cad8:	ldr	r2, [fp, #-12]
   1cadc:	ldr	r2, [r2, #2948]	; 0xb84
   1cae0:	str	r2, [r3, #2948]	; 0xb84
   1cae4:	ldr	r3, [fp, #-12]
   1cae8:	ldr	r3, [r3, #2948]	; 0xb84
   1caec:	ldr	r2, [fp, #-12]
   1caf0:	ldr	r2, [r2, #2944]	; 0xb80
   1caf4:	str	r2, [r3, #2944]	; 0xb80
   1caf8:	ldr	r3, [fp, #-8]
   1cafc:	ldr	r3, [r3]
   1cb00:	ldr	r2, [r3, #2948]	; 0xb84
   1cb04:	ldr	r3, [fp, #-12]
   1cb08:	str	r2, [r3, #2948]	; 0xb84
   1cb0c:	ldr	r3, [fp, #-8]
   1cb10:	ldr	r2, [r3]
   1cb14:	ldr	r3, [fp, #-12]
   1cb18:	str	r2, [r3, #2944]	; 0xb80
   1cb1c:	ldr	r3, [fp, #-12]
   1cb20:	ldr	r3, [r3, #2948]	; 0xb84
   1cb24:	ldr	r2, [fp, #-12]
   1cb28:	str	r2, [r3, #2944]	; 0xb80
   1cb2c:	ldr	r3, [fp, #-12]
   1cb30:	ldr	r3, [r3, #2944]	; 0xb80
   1cb34:	ldr	r2, [fp, #-12]
   1cb38:	str	r2, [r3, #2948]	; 0xb84
   1cb3c:	mov	r3, #0
   1cb40:	mov	r0, r3
   1cb44:	add	sp, fp, #0
   1cb48:	pop	{fp}		; (ldr fp, [sp], #4)
   1cb4c:	bx	lr

0001cb50 <flatcc_emitter_reset@@Base>:
   1cb50:	push	{fp, lr}
   1cb54:	add	fp, sp, #4
   1cb58:	sub	sp, sp, #16
   1cb5c:	str	r0, [fp, #-16]
   1cb60:	ldr	r3, [fp, #-16]
   1cb64:	ldr	r3, [r3]
   1cb68:	str	r3, [fp, #-8]
   1cb6c:	ldr	r3, [fp, #-16]
   1cb70:	ldr	r3, [r3]
   1cb74:	cmp	r3, #0
   1cb78:	beq	1ccd0 <flatcc_emitter_reset@@Base+0x180>
   1cb7c:	ldr	r3, [fp, #-16]
   1cb80:	ldr	r2, [r3]
   1cb84:	ldr	r3, [fp, #-16]
   1cb88:	str	r2, [r3, #4]
   1cb8c:	ldr	r3, [fp, #-16]
   1cb90:	ldr	r3, [r3]
   1cb94:	add	r2, r3, #1472	; 0x5c0
   1cb98:	ldr	r3, [fp, #-16]
   1cb9c:	str	r2, [r3, #8]
   1cba0:	ldr	r3, [fp, #-16]
   1cba4:	ldr	r2, [r3, #8]
   1cba8:	ldr	r3, [fp, #-16]
   1cbac:	str	r2, [r3, #16]
   1cbb0:	ldr	r3, [fp, #-16]
   1cbb4:	mov	r2, #1472	; 0x5c0
   1cbb8:	str	r2, [r3, #12]
   1cbbc:	ldr	r3, [fp, #-16]
   1cbc0:	mov	r2, #1472	; 0x5c0
   1cbc4:	str	r2, [r3, #20]
   1cbc8:	ldr	r3, [fp, #-16]
   1cbcc:	ldr	r3, [r3]
   1cbd0:	ldr	r2, [fp, #-16]
   1cbd4:	ldr	r2, [r2, #12]
   1cbd8:	rsb	r2, r2, #0
   1cbdc:	str	r2, [r3, #2952]	; 0xb88
   1cbe0:	ldr	r3, [fp, #-16]
   1cbe4:	ldr	r3, [r3, #32]
   1cbe8:	cmp	r3, #0
   1cbec:	bne	1cc00 <flatcc_emitter_reset@@Base+0xb0>
   1cbf0:	ldr	r3, [fp, #-16]
   1cbf4:	ldr	r2, [r3, #24]
   1cbf8:	ldr	r3, [fp, #-16]
   1cbfc:	str	r2, [r3, #32]
   1cc00:	ldr	r3, [fp, #-16]
   1cc04:	ldr	r2, [r3, #32]
   1cc08:	mov	r3, r2
   1cc0c:	lsl	r3, r3, #1
   1cc10:	add	r3, r3, r2
   1cc14:	lsr	r2, r3, #2
   1cc18:	ldr	r3, [fp, #-16]
   1cc1c:	ldr	r3, [r3, #24]
   1cc20:	lsr	r3, r3, #2
   1cc24:	add	r2, r2, r3
   1cc28:	ldr	r3, [fp, #-16]
   1cc2c:	str	r2, [r3, #32]
   1cc30:	ldr	r3, [fp, #-16]
   1cc34:	mov	r2, #0
   1cc38:	str	r2, [r3, #24]
   1cc3c:	b	1cc94 <flatcc_emitter_reset@@Base+0x144>
   1cc40:	ldr	r3, [fp, #-16]
   1cc44:	ldr	r3, [r3, #4]
   1cc48:	ldr	r3, [r3, #2944]	; 0xb80
   1cc4c:	str	r3, [fp, #-8]
   1cc50:	ldr	r3, [fp, #-16]
   1cc54:	ldr	r3, [r3, #4]
   1cc58:	ldr	r2, [fp, #-8]
   1cc5c:	ldr	r2, [r2, #2944]	; 0xb80
   1cc60:	str	r2, [r3, #2944]	; 0xb80
   1cc64:	ldr	r3, [fp, #-8]
   1cc68:	ldr	r3, [r3, #2944]	; 0xb80
   1cc6c:	ldr	r2, [fp, #-16]
   1cc70:	ldr	r2, [r2, #4]
   1cc74:	str	r2, [r3, #2948]	; 0xb84
   1cc78:	ldr	r0, [fp, #-8]
   1cc7c:	bl	12450 <free@plt>
   1cc80:	ldr	r3, [fp, #-16]
   1cc84:	ldr	r3, [r3, #28]
   1cc88:	sub	r2, r3, #2944	; 0xb80
   1cc8c:	ldr	r3, [fp, #-16]
   1cc90:	str	r2, [r3, #28]
   1cc94:	ldr	r3, [fp, #-16]
   1cc98:	ldr	r3, [r3, #32]
   1cc9c:	lsl	r2, r3, #1
   1cca0:	ldr	r3, [fp, #-16]
   1cca4:	ldr	r3, [r3, #28]
   1cca8:	cmp	r2, r3
   1ccac:	bcs	1ccd4 <flatcc_emitter_reset@@Base+0x184>
   1ccb0:	ldr	r3, [fp, #-16]
   1ccb4:	ldr	r3, [r3, #4]
   1ccb8:	ldr	r2, [r3, #2944]	; 0xb80
   1ccbc:	ldr	r3, [fp, #-16]
   1ccc0:	ldr	r3, [r3]
   1ccc4:	cmp	r2, r3
   1ccc8:	bne	1cc40 <flatcc_emitter_reset@@Base+0xf0>
   1cccc:	b	1ccd4 <flatcc_emitter_reset@@Base+0x184>
   1ccd0:	nop			; (mov r0, r0)
   1ccd4:	sub	sp, fp, #4
   1ccd8:	pop	{fp, pc}

0001ccdc <flatcc_emitter_clear@@Base>:
   1ccdc:	push	{fp, lr}
   1cce0:	add	fp, sp, #4
   1cce4:	sub	sp, sp, #16
   1cce8:	str	r0, [fp, #-16]
   1ccec:	ldr	r3, [fp, #-16]
   1ccf0:	ldr	r3, [r3]
   1ccf4:	str	r3, [fp, #-8]
   1ccf8:	ldr	r3, [fp, #-8]
   1ccfc:	cmp	r3, #0
   1cd00:	beq	1cd60 <flatcc_emitter_clear@@Base+0x84>
   1cd04:	ldr	r3, [fp, #-8]
   1cd08:	ldr	r3, [r3, #2948]	; 0xb84
   1cd0c:	mov	r2, #0
   1cd10:	str	r2, [r3, #2944]	; 0xb80
   1cd14:	b	1cd34 <flatcc_emitter_clear@@Base+0x58>
   1cd18:	ldr	r3, [fp, #-8]
   1cd1c:	ldr	r3, [r3, #2944]	; 0xb80
   1cd20:	str	r3, [fp, #-8]
   1cd24:	ldr	r3, [fp, #-8]
   1cd28:	ldr	r3, [r3, #2948]	; 0xb84
   1cd2c:	mov	r0, r3
   1cd30:	bl	12450 <free@plt>
   1cd34:	ldr	r3, [fp, #-8]
   1cd38:	ldr	r3, [r3, #2944]	; 0xb80
   1cd3c:	cmp	r3, #0
   1cd40:	bne	1cd18 <flatcc_emitter_clear@@Base+0x3c>
   1cd44:	ldr	r0, [fp, #-8]
   1cd48:	bl	12450 <free@plt>
   1cd4c:	mov	r2, #36	; 0x24
   1cd50:	mov	r1, #0
   1cd54:	ldr	r0, [fp, #-16]
   1cd58:	bl	124d4 <memset@plt>
   1cd5c:	b	1cd64 <flatcc_emitter_clear@@Base+0x88>
   1cd60:	nop			; (mov r0, r0)
   1cd64:	sub	sp, fp, #4
   1cd68:	pop	{fp, pc}

0001cd6c <flatcc_emitter@@Base>:
   1cd6c:	push	{fp, lr}
   1cd70:	add	fp, sp, #4
   1cd74:	sub	sp, sp, #24
   1cd78:	str	r0, [fp, #-16]
   1cd7c:	str	r1, [fp, #-20]	; 0xffffffec
   1cd80:	str	r2, [fp, #-24]	; 0xffffffe8
   1cd84:	str	r3, [fp, #-28]	; 0xffffffe4
   1cd88:	ldr	r3, [fp, #-16]
   1cd8c:	str	r3, [fp, #-12]
   1cd90:	ldr	r3, [fp, #-12]
   1cd94:	ldr	r2, [r3, #24]
   1cd98:	ldr	r3, [fp, #4]
   1cd9c:	add	r2, r2, r3
   1cda0:	ldr	r3, [fp, #-12]
   1cda4:	str	r2, [r3, #24]
   1cda8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1cdac:	cmp	r3, #0
   1cdb0:	bge	1ce78 <flatcc_emitter@@Base+0x10c>
   1cdb4:	ldr	r3, [fp, #-12]
   1cdb8:	ldr	r2, [r3, #12]
   1cdbc:	ldr	r3, [fp, #4]
   1cdc0:	cmp	r2, r3
   1cdc4:	bcc	1ce0c <flatcc_emitter@@Base+0xa0>
   1cdc8:	ldr	r3, [fp, #-12]
   1cdcc:	ldr	r2, [r3, #8]
   1cdd0:	ldr	r3, [fp, #4]
   1cdd4:	rsb	r3, r3, #0
   1cdd8:	add	r2, r2, r3
   1cddc:	ldr	r3, [fp, #-12]
   1cde0:	str	r2, [r3, #8]
   1cde4:	ldr	r3, [fp, #-12]
   1cde8:	ldr	r2, [r3, #12]
   1cdec:	ldr	r3, [fp, #4]
   1cdf0:	sub	r2, r2, r3
   1cdf4:	ldr	r3, [fp, #-12]
   1cdf8:	str	r2, [r3, #12]
   1cdfc:	ldr	r3, [fp, #-12]
   1ce00:	ldr	r3, [r3, #8]
   1ce04:	str	r3, [fp, #-8]
   1ce08:	b	1cf24 <flatcc_emitter@@Base+0x1b8>
   1ce0c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ce10:	lsl	r3, r3, #3
   1ce14:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ce18:	add	r3, r2, r3
   1ce1c:	str	r3, [fp, #-20]	; 0xffffffec
   1ce20:	b	1ce60 <flatcc_emitter@@Base+0xf4>
   1ce24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ce28:	sub	r3, r3, #8
   1ce2c:	str	r3, [fp, #-20]	; 0xffffffec
   1ce30:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ce34:	ldr	r1, [r3]
   1ce38:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ce3c:	ldr	r3, [r3, #4]
   1ce40:	mov	r2, r3
   1ce44:	ldr	r0, [fp, #-12]
   1ce48:	bl	1c894 <flatcc_builder_get_emit_context@@Base+0x3f8>
   1ce4c:	mov	r3, r0
   1ce50:	cmp	r3, #0
   1ce54:	beq	1ce60 <flatcc_emitter@@Base+0xf4>
   1ce58:	mvn	r3, #0
   1ce5c:	b	1cf7c <flatcc_emitter@@Base+0x210>
   1ce60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ce64:	sub	r2, r3, #1
   1ce68:	str	r2, [fp, #-24]	; 0xffffffe8
   1ce6c:	cmp	r3, #0
   1ce70:	bne	1ce24 <flatcc_emitter@@Base+0xb8>
   1ce74:	b	1cf1c <flatcc_emitter@@Base+0x1b0>
   1ce78:	ldr	r3, [fp, #-12]
   1ce7c:	ldr	r2, [r3, #20]
   1ce80:	ldr	r3, [fp, #4]
   1ce84:	cmp	r2, r3
   1ce88:	bcc	1cf08 <flatcc_emitter@@Base+0x19c>
   1ce8c:	ldr	r3, [fp, #-12]
   1ce90:	ldr	r3, [r3, #16]
   1ce94:	str	r3, [fp, #-8]
   1ce98:	ldr	r3, [fp, #-12]
   1ce9c:	ldr	r2, [r3, #16]
   1cea0:	ldr	r3, [fp, #4]
   1cea4:	add	r2, r2, r3
   1cea8:	ldr	r3, [fp, #-12]
   1ceac:	str	r2, [r3, #16]
   1ceb0:	ldr	r3, [fp, #-12]
   1ceb4:	ldr	r2, [r3, #20]
   1ceb8:	ldr	r3, [fp, #4]
   1cebc:	sub	r2, r2, r3
   1cec0:	ldr	r3, [fp, #-12]
   1cec4:	str	r2, [r3, #20]
   1cec8:	b	1cf24 <flatcc_emitter@@Base+0x1b8>
   1cecc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ced0:	ldr	r1, [r3]
   1ced4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ced8:	ldr	r3, [r3, #4]
   1cedc:	mov	r2, r3
   1cee0:	ldr	r0, [fp, #-12]
   1cee4:	bl	1c99c <flatcc_builder_get_emit_context@@Base+0x500>
   1cee8:	mov	r3, r0
   1ceec:	cmp	r3, #0
   1cef0:	beq	1cefc <flatcc_emitter@@Base+0x190>
   1cef4:	mvn	r3, #0
   1cef8:	b	1cf7c <flatcc_emitter@@Base+0x210>
   1cefc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf00:	add	r3, r3, #8
   1cf04:	str	r3, [fp, #-20]	; 0xffffffec
   1cf08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cf0c:	sub	r2, r3, #1
   1cf10:	str	r2, [fp, #-24]	; 0xffffffe8
   1cf14:	cmp	r3, #0
   1cf18:	bne	1cecc <flatcc_emitter@@Base+0x160>
   1cf1c:	mov	r3, #0
   1cf20:	b	1cf7c <flatcc_emitter@@Base+0x210>
   1cf24:	b	1cf64 <flatcc_emitter@@Base+0x1f8>
   1cf28:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf2c:	ldr	r1, [r3]
   1cf30:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf34:	ldr	r3, [r3, #4]
   1cf38:	mov	r2, r3
   1cf3c:	ldr	r0, [fp, #-8]
   1cf40:	bl	1245c <memcpy@plt>
   1cf44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf48:	ldr	r3, [r3, #4]
   1cf4c:	ldr	r2, [fp, #-8]
   1cf50:	add	r3, r2, r3
   1cf54:	str	r3, [fp, #-8]
   1cf58:	ldr	r3, [fp, #-20]	; 0xffffffec
   1cf5c:	add	r3, r3, #8
   1cf60:	str	r3, [fp, #-20]	; 0xffffffec
   1cf64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cf68:	sub	r2, r3, #1
   1cf6c:	str	r2, [fp, #-24]	; 0xffffffe8
   1cf70:	cmp	r3, #0
   1cf74:	bne	1cf28 <flatcc_emitter@@Base+0x1bc>
   1cf78:	mov	r3, #0
   1cf7c:	mov	r0, r3
   1cf80:	sub	sp, fp, #4
   1cf84:	pop	{fp, pc}

0001cf88 <flatcc_emitter_copy_buffer@@Base>:
   1cf88:	push	{fp, lr}
   1cf8c:	add	fp, sp, #4
   1cf90:	sub	sp, sp, #24
   1cf94:	str	r0, [fp, #-16]
   1cf98:	str	r1, [fp, #-20]	; 0xffffffec
   1cf9c:	str	r2, [fp, #-24]	; 0xffffffe8
   1cfa0:	ldr	r3, [fp, #-16]
   1cfa4:	ldr	r2, [r3, #24]
   1cfa8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1cfac:	cmp	r2, r3
   1cfb0:	bls	1cfbc <flatcc_emitter_copy_buffer@@Base+0x34>
   1cfb4:	mov	r3, #0
   1cfb8:	b	1d0bc <flatcc_emitter_copy_buffer@@Base+0x134>
   1cfbc:	ldr	r3, [fp, #-16]
   1cfc0:	ldr	r3, [r3]
   1cfc4:	cmp	r3, #0
   1cfc8:	bne	1cfd4 <flatcc_emitter_copy_buffer@@Base+0x4c>
   1cfcc:	mov	r3, #0
   1cfd0:	b	1d0bc <flatcc_emitter_copy_buffer@@Base+0x134>
   1cfd4:	ldr	r3, [fp, #-16]
   1cfd8:	ldr	r2, [r3]
   1cfdc:	ldr	r3, [fp, #-16]
   1cfe0:	ldr	r3, [r3, #4]
   1cfe4:	cmp	r2, r3
   1cfe8:	bne	1d010 <flatcc_emitter_copy_buffer@@Base+0x88>
   1cfec:	ldr	r3, [fp, #-16]
   1cff0:	ldr	r1, [r3, #8]
   1cff4:	ldr	r3, [fp, #-16]
   1cff8:	ldr	r3, [r3, #24]
   1cffc:	mov	r2, r3
   1d000:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d004:	bl	1245c <memcpy@plt>
   1d008:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d00c:	b	1d0bc <flatcc_emitter_copy_buffer@@Base+0x134>
   1d010:	ldr	r3, [fp, #-16]
   1d014:	ldr	r3, [r3, #12]
   1d018:	rsb	r3, r3, #2944	; 0xb80
   1d01c:	str	r3, [fp, #-12]
   1d020:	ldr	r3, [fp, #-16]
   1d024:	ldr	r3, [r3, #8]
   1d028:	ldr	r2, [fp, #-12]
   1d02c:	mov	r1, r3
   1d030:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d034:	bl	1245c <memcpy@plt>
   1d038:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d03c:	ldr	r3, [fp, #-12]
   1d040:	add	r3, r2, r3
   1d044:	str	r3, [fp, #-20]	; 0xffffffec
   1d048:	ldr	r3, [fp, #-16]
   1d04c:	ldr	r3, [r3]
   1d050:	ldr	r3, [r3, #2944]	; 0xb80
   1d054:	str	r3, [fp, #-8]
   1d058:	b	1d088 <flatcc_emitter_copy_buffer@@Base+0x100>
   1d05c:	ldr	r3, [fp, #-8]
   1d060:	mov	r2, #2944	; 0xb80
   1d064:	mov	r1, r3
   1d068:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d06c:	bl	1245c <memcpy@plt>
   1d070:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d074:	add	r3, r3, #2944	; 0xb80
   1d078:	str	r3, [fp, #-20]	; 0xffffffec
   1d07c:	ldr	r3, [fp, #-8]
   1d080:	ldr	r3, [r3, #2944]	; 0xb80
   1d084:	str	r3, [fp, #-8]
   1d088:	ldr	r3, [fp, #-16]
   1d08c:	ldr	r2, [r3, #4]
   1d090:	ldr	r3, [fp, #-8]
   1d094:	cmp	r2, r3
   1d098:	bne	1d05c <flatcc_emitter_copy_buffer@@Base+0xd4>
   1d09c:	ldr	r1, [fp, #-8]
   1d0a0:	ldr	r3, [fp, #-16]
   1d0a4:	ldr	r3, [r3, #20]
   1d0a8:	rsb	r3, r3, #2944	; 0xb80
   1d0ac:	mov	r2, r3
   1d0b0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1d0b4:	bl	1245c <memcpy@plt>
   1d0b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d0bc:	mov	r0, r3
   1d0c0:	sub	sp, fp, #4
   1d0c4:	pop	{fp, pc}
   1d0c8:	push	{fp}		; (str fp, [sp, #-4]!)
   1d0cc:	add	fp, sp, #0
   1d0d0:	sub	sp, sp, #12
   1d0d4:	mov	r3, r0
   1d0d8:	strb	r3, [fp, #-5]
   1d0dc:	ldrb	r3, [fp, #-5]
   1d0e0:	mov	r0, r3
   1d0e4:	add	sp, fp, #0
   1d0e8:	pop	{fp}		; (ldr fp, [sp], #4)
   1d0ec:	bx	lr
   1d0f0:	push	{fp, lr}
   1d0f4:	add	fp, sp, #4
   1d0f8:	sub	sp, sp, #8
   1d0fc:	str	r0, [fp, #-8]
   1d100:	mov	r3, r1
   1d104:	strb	r3, [fp, #-9]
   1d108:	ldrb	r3, [fp, #-9]
   1d10c:	mov	r0, r3
   1d110:	bl	1d0c8 <flatcc_emitter_copy_buffer@@Base+0x140>
   1d114:	mov	r3, r0
   1d118:	mov	r2, r3
   1d11c:	ldr	r3, [fp, #-8]
   1d120:	strb	r2, [r3]
   1d124:	nop			; (mov r0, r0)
   1d128:	sub	sp, fp, #4
   1d12c:	pop	{fp, pc}
   1d130:	push	{fp, lr}
   1d134:	add	fp, sp, #4
   1d138:	sub	sp, sp, #16
   1d13c:	str	r0, [fp, #-8]
   1d140:	str	r1, [fp, #-12]
   1d144:	str	r2, [fp, #-16]
   1d148:	str	r3, [fp, #-20]	; 0xffffffec
   1d14c:	mov	r2, #44	; 0x2c
   1d150:	mov	r1, #0
   1d154:	ldr	r0, [fp, #-8]
   1d158:	bl	124d4 <memset@plt>
   1d15c:	ldr	r3, [fp, #-8]
   1d160:	ldr	r2, [fp, #-12]
   1d164:	str	r2, [r3]
   1d168:	ldr	r3, [fp, #-8]
   1d16c:	ldr	r2, [fp, #-16]
   1d170:	str	r2, [r3, #4]
   1d174:	ldr	r3, [fp, #-8]
   1d178:	mov	r2, #1
   1d17c:	str	r2, [r3, #16]
   1d180:	ldr	r3, [fp, #-8]
   1d184:	ldr	r2, [fp, #4]
   1d188:	str	r2, [r3, #8]
   1d18c:	ldr	r3, [fp, #-8]
   1d190:	ldr	r2, [fp, #-16]
   1d194:	str	r2, [r3, #28]
   1d198:	ldr	r3, [fp, #-8]
   1d19c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d1a0:	str	r2, [r3, #32]
   1d1a4:	ldr	r3, [fp, #-8]
   1d1a8:	ldr	r2, [fp, #-16]
   1d1ac:	str	r2, [r3, #36]	; 0x24
   1d1b0:	nop			; (mov r0, r0)
   1d1b4:	sub	sp, fp, #4
   1d1b8:	pop	{fp, pc}
   1d1bc:	push	{fp, lr}
   1d1c0:	add	fp, sp, #4
   1d1c4:	sub	sp, sp, #16
   1d1c8:	str	r0, [fp, #-8]
   1d1cc:	str	r1, [fp, #-12]
   1d1d0:	str	r2, [fp, #-16]
   1d1d4:	ldr	r2, [fp, #-16]
   1d1d8:	ldr	r3, [fp, #-12]
   1d1dc:	sub	r3, r2, r3
   1d1e0:	cmp	r3, #1
   1d1e4:	ble	1d230 <flatcc_emitter_copy_buffer@@Base+0x2a8>
   1d1e8:	ldr	r3, [fp, #-12]
   1d1ec:	ldrb	r3, [r3]
   1d1f0:	cmp	r3, #32
   1d1f4:	bls	1d200 <flatcc_emitter_copy_buffer@@Base+0x278>
   1d1f8:	ldr	r3, [fp, #-12]
   1d1fc:	b	1d244 <flatcc_emitter_copy_buffer@@Base+0x2bc>
   1d200:	ldr	r3, [fp, #-12]
   1d204:	ldrb	r3, [r3]
   1d208:	cmp	r3, #32
   1d20c:	bne	1d230 <flatcc_emitter_copy_buffer@@Base+0x2a8>
   1d210:	ldr	r3, [fp, #-12]
   1d214:	add	r3, r3, #1
   1d218:	ldrb	r3, [r3]
   1d21c:	cmp	r3, #32
   1d220:	bls	1d230 <flatcc_emitter_copy_buffer@@Base+0x2a8>
   1d224:	ldr	r3, [fp, #-12]
   1d228:	add	r3, r3, #1
   1d22c:	b	1d244 <flatcc_emitter_copy_buffer@@Base+0x2bc>
   1d230:	ldr	r2, [fp, #-16]
   1d234:	ldr	r1, [fp, #-12]
   1d238:	ldr	r0, [fp, #-8]
   1d23c:	bl	22458 <flatcc_json_parser_space_ext@@Base>
   1d240:	mov	r3, r0
   1d244:	mov	r0, r3
   1d248:	sub	sp, fp, #4
   1d24c:	pop	{fp, pc}
   1d250:	push	{fp, lr}
   1d254:	add	fp, sp, #4
   1d258:	sub	sp, sp, #16
   1d25c:	str	r0, [fp, #-8]
   1d260:	str	r1, [fp, #-12]
   1d264:	str	r2, [fp, #-16]
   1d268:	ldr	r2, [fp, #-12]
   1d26c:	ldr	r3, [fp, #-16]
   1d270:	cmp	r2, r3
   1d274:	beq	1d288 <flatcc_emitter_copy_buffer@@Base+0x300>
   1d278:	ldr	r3, [fp, #-12]
   1d27c:	ldrb	r3, [r3]
   1d280:	cmp	r3, #34	; 0x22
   1d284:	beq	1d2a4 <flatcc_emitter_copy_buffer@@Base+0x31c>
   1d288:	mov	r3, #16
   1d28c:	ldr	r2, [fp, #-16]
   1d290:	ldr	r1, [fp, #-12]
   1d294:	ldr	r0, [fp, #-8]
   1d298:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d29c:	mov	r3, r0
   1d2a0:	b	1d2b4 <flatcc_emitter_copy_buffer@@Base+0x32c>
   1d2a4:	ldr	r3, [fp, #-12]
   1d2a8:	add	r3, r3, #1
   1d2ac:	str	r3, [fp, #-12]
   1d2b0:	ldr	r3, [fp, #-12]
   1d2b4:	mov	r0, r3
   1d2b8:	sub	sp, fp, #4
   1d2bc:	pop	{fp, pc}
   1d2c0:	push	{fp, lr}
   1d2c4:	add	fp, sp, #4
   1d2c8:	sub	sp, sp, #16
   1d2cc:	str	r0, [fp, #-8]
   1d2d0:	str	r1, [fp, #-12]
   1d2d4:	str	r2, [fp, #-16]
   1d2d8:	ldr	r2, [fp, #-12]
   1d2dc:	ldr	r3, [fp, #-16]
   1d2e0:	cmp	r2, r3
   1d2e4:	beq	1d2f8 <flatcc_emitter_copy_buffer@@Base+0x370>
   1d2e8:	ldr	r3, [fp, #-12]
   1d2ec:	ldrb	r3, [r3]
   1d2f0:	cmp	r3, #34	; 0x22
   1d2f4:	beq	1d314 <flatcc_emitter_copy_buffer@@Base+0x38c>
   1d2f8:	mov	r3, #20
   1d2fc:	ldr	r2, [fp, #-16]
   1d300:	ldr	r1, [fp, #-12]
   1d304:	ldr	r0, [fp, #-8]
   1d308:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d30c:	mov	r3, r0
   1d310:	b	1d324 <flatcc_emitter_copy_buffer@@Base+0x39c>
   1d314:	ldr	r3, [fp, #-12]
   1d318:	add	r3, r3, #1
   1d31c:	str	r3, [fp, #-12]
   1d320:	ldr	r3, [fp, #-12]
   1d324:	mov	r0, r3
   1d328:	sub	sp, fp, #4
   1d32c:	pop	{fp, pc}
   1d330:	push	{fp, lr}
   1d334:	add	fp, sp, #4
   1d338:	sub	sp, sp, #16
   1d33c:	str	r0, [fp, #-8]
   1d340:	str	r1, [fp, #-12]
   1d344:	str	r2, [fp, #-16]
   1d348:	ldr	r2, [fp, #-12]
   1d34c:	ldr	r3, [fp, #-16]
   1d350:	cmp	r2, r3
   1d354:	bne	1d360 <flatcc_emitter_copy_buffer@@Base+0x3d8>
   1d358:	ldr	r3, [fp, #-12]
   1d35c:	b	1d3c8 <flatcc_emitter_copy_buffer@@Base+0x440>
   1d360:	ldr	r3, [fp, #-12]
   1d364:	ldrb	r3, [r3]
   1d368:	cmp	r3, #34	; 0x22
   1d36c:	bne	1d38c <flatcc_emitter_copy_buffer@@Base+0x404>
   1d370:	ldr	r3, [fp, #-12]
   1d374:	add	r3, r3, #1
   1d378:	str	r3, [fp, #-12]
   1d37c:	ldr	r3, [fp, #-8]
   1d380:	mov	r2, #0
   1d384:	str	r2, [r3, #12]
   1d388:	b	1d3c4 <flatcc_emitter_copy_buffer@@Base+0x43c>
   1d38c:	ldr	r3, [fp, #-12]
   1d390:	ldrb	r3, [r3]
   1d394:	cmp	r3, #46	; 0x2e
   1d398:	bne	1d3b8 <flatcc_emitter_copy_buffer@@Base+0x430>
   1d39c:	mov	r3, #5
   1d3a0:	ldr	r2, [fp, #-16]
   1d3a4:	ldr	r1, [fp, #-12]
   1d3a8:	ldr	r0, [fp, #-8]
   1d3ac:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d3b0:	mov	r3, r0
   1d3b4:	b	1d3c8 <flatcc_emitter_copy_buffer@@Base+0x440>
   1d3b8:	ldr	r3, [fp, #-8]
   1d3bc:	mov	r2, #1
   1d3c0:	str	r2, [r3, #12]
   1d3c4:	ldr	r3, [fp, #-12]
   1d3c8:	mov	r0, r3
   1d3cc:	sub	sp, fp, #4
   1d3d0:	pop	{fp, pc}
   1d3d4:	push	{fp, lr}
   1d3d8:	add	fp, sp, #4
   1d3dc:	sub	sp, sp, #24
   1d3e0:	str	r0, [fp, #-16]
   1d3e4:	str	r1, [fp, #-20]	; 0xffffffec
   1d3e8:	str	r2, [fp, #-24]	; 0xffffffe8
   1d3ec:	mov	r3, #0
   1d3f0:	strb	r3, [fp, #-5]
   1d3f4:	ldr	r3, [fp, #-16]
   1d3f8:	ldr	r3, [r3, #12]
   1d3fc:	cmp	r3, #0
   1d400:	beq	1d528 <flatcc_emitter_copy_buffer@@Base+0x5a0>
   1d404:	b	1d49c <flatcc_emitter_copy_buffer@@Base+0x514>
   1d408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d40c:	ldrb	r3, [r3]
   1d410:	strb	r3, [fp, #-6]
   1d414:	ldrb	r3, [fp, #-6]
   1d418:	strb	r3, [fp, #-5]
   1d41c:	ldrb	r3, [fp, #-6]
   1d420:	cmp	r3, #95	; 0x5f
   1d424:	beq	1d458 <flatcc_emitter_copy_buffer@@Base+0x4d0>
   1d428:	ldrb	r3, [fp, #-6]
   1d42c:	cmp	r3, #46	; 0x2e
   1d430:	beq	1d458 <flatcc_emitter_copy_buffer@@Base+0x4d0>
   1d434:	ldrsb	r3, [fp, #-6]
   1d438:	cmp	r3, #0
   1d43c:	blt	1d458 <flatcc_emitter_copy_buffer@@Base+0x4d0>
   1d440:	ldrb	r3, [fp, #-6]
   1d444:	cmp	r3, #47	; 0x2f
   1d448:	bls	1d468 <flatcc_emitter_copy_buffer@@Base+0x4e0>
   1d44c:	ldrb	r3, [fp, #-6]
   1d450:	cmp	r3, #57	; 0x39
   1d454:	bhi	1d468 <flatcc_emitter_copy_buffer@@Base+0x4e0>
   1d458:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d45c:	add	r3, r3, #1
   1d460:	str	r3, [fp, #-20]	; 0xffffffec
   1d464:	b	1d49c <flatcc_emitter_copy_buffer@@Base+0x514>
   1d468:	ldrb	r3, [fp, #-6]
   1d46c:	orr	r3, r3, #32
   1d470:	strb	r3, [fp, #-6]
   1d474:	ldrb	r3, [fp, #-6]
   1d478:	cmp	r3, #96	; 0x60
   1d47c:	bls	1d4c0 <flatcc_emitter_copy_buffer@@Base+0x538>
   1d480:	ldrb	r3, [fp, #-6]
   1d484:	cmp	r3, #122	; 0x7a
   1d488:	bhi	1d4c0 <flatcc_emitter_copy_buffer@@Base+0x538>
   1d48c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d490:	add	r3, r3, #1
   1d494:	str	r3, [fp, #-20]	; 0xffffffec
   1d498:	nop			; (mov r0, r0)
   1d49c:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d4a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d4a4:	cmp	r2, r3
   1d4a8:	beq	1d4c4 <flatcc_emitter_copy_buffer@@Base+0x53c>
   1d4ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d4b0:	ldrb	r3, [r3]
   1d4b4:	cmp	r3, #32
   1d4b8:	bhi	1d408 <flatcc_emitter_copy_buffer@@Base+0x480>
   1d4bc:	b	1d4c4 <flatcc_emitter_copy_buffer@@Base+0x53c>
   1d4c0:	nop			; (mov r0, r0)
   1d4c4:	ldrb	r3, [fp, #-5]
   1d4c8:	cmp	r3, #46	; 0x2e
   1d4cc:	bne	1d598 <flatcc_emitter_copy_buffer@@Base+0x610>
   1d4d0:	mov	r3, #5
   1d4d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d4d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d4dc:	ldr	r0, [fp, #-16]
   1d4e0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d4e4:	mov	r3, r0
   1d4e8:	b	1d59c <flatcc_emitter_copy_buffer@@Base+0x614>
   1d4ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d4f0:	ldrb	r3, [r3]
   1d4f4:	cmp	r3, #92	; 0x5c
   1d4f8:	bne	1d51c <flatcc_emitter_copy_buffer@@Base+0x594>
   1d4fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d500:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d504:	sub	r3, r2, r3
   1d508:	cmp	r3, #1
   1d50c:	ble	1d54c <flatcc_emitter_copy_buffer@@Base+0x5c4>
   1d510:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d514:	add	r3, r3, #1
   1d518:	str	r3, [fp, #-20]	; 0xffffffec
   1d51c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d520:	add	r3, r3, #1
   1d524:	str	r3, [fp, #-20]	; 0xffffffec
   1d528:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d52c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d530:	cmp	r2, r3
   1d534:	beq	1d550 <flatcc_emitter_copy_buffer@@Base+0x5c8>
   1d538:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d53c:	ldrb	r3, [r3]
   1d540:	cmp	r3, #34	; 0x22
   1d544:	bne	1d4ec <flatcc_emitter_copy_buffer@@Base+0x564>
   1d548:	b	1d550 <flatcc_emitter_copy_buffer@@Base+0x5c8>
   1d54c:	nop			; (mov r0, r0)
   1d550:	ldr	r2, [fp, #-20]	; 0xffffffec
   1d554:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d558:	cmp	r2, r3
   1d55c:	beq	1d570 <flatcc_emitter_copy_buffer@@Base+0x5e8>
   1d560:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d564:	ldrb	r3, [r3]
   1d568:	cmp	r3, #34	; 0x22
   1d56c:	beq	1d58c <flatcc_emitter_copy_buffer@@Base+0x604>
   1d570:	mov	r3, #20
   1d574:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d578:	ldr	r1, [fp, #-20]	; 0xffffffec
   1d57c:	ldr	r0, [fp, #-16]
   1d580:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d584:	mov	r3, r0
   1d588:	b	1d59c <flatcc_emitter_copy_buffer@@Base+0x614>
   1d58c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d590:	add	r3, r3, #1
   1d594:	str	r3, [fp, #-20]	; 0xffffffec
   1d598:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d59c:	mov	r0, r3
   1d5a0:	sub	sp, fp, #4
   1d5a4:	pop	{fp, pc}
   1d5a8:	push	{fp, lr}
   1d5ac:	add	fp, sp, #4
   1d5b0:	sub	sp, sp, #16
   1d5b4:	str	r0, [fp, #-8]
   1d5b8:	str	r1, [fp, #-12]
   1d5bc:	str	r2, [fp, #-16]
   1d5c0:	ldr	r2, [fp, #-16]
   1d5c4:	ldr	r1, [fp, #-12]
   1d5c8:	ldr	r0, [fp, #-8]
   1d5cc:	bl	1d330 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   1d5d0:	str	r0, [fp, #-12]
   1d5d4:	ldr	r3, [fp, #-8]
   1d5d8:	ldr	r3, [r3, #12]
   1d5dc:	cmp	r3, #0
   1d5e0:	bne	1d5f8 <flatcc_emitter_copy_buffer@@Base+0x670>
   1d5e4:	ldr	r2, [fp, #-16]
   1d5e8:	ldr	r1, [fp, #-12]
   1d5ec:	ldr	r0, [fp, #-8]
   1d5f0:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d5f4:	str	r0, [fp, #-12]
   1d5f8:	ldr	r3, [fp, #-12]
   1d5fc:	mov	r0, r3
   1d600:	sub	sp, fp, #4
   1d604:	pop	{fp, pc}
   1d608:	push	{fp, lr}
   1d60c:	add	fp, sp, #4
   1d610:	sub	sp, sp, #16
   1d614:	str	r0, [fp, #-8]
   1d618:	str	r1, [fp, #-12]
   1d61c:	str	r2, [fp, #-16]
   1d620:	str	r3, [fp, #-20]	; 0xffffffec
   1d624:	ldr	r2, [fp, #-16]
   1d628:	ldr	r1, [fp, #-12]
   1d62c:	ldr	r0, [fp, #-8]
   1d630:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d634:	str	r0, [fp, #-12]
   1d638:	ldr	r2, [fp, #-12]
   1d63c:	ldr	r3, [fp, #-16]
   1d640:	cmp	r2, r3
   1d644:	bne	1d65c <flatcc_emitter_copy_buffer@@Base+0x6d4>
   1d648:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d64c:	mov	r2, #0
   1d650:	str	r2, [r3]
   1d654:	ldr	r3, [fp, #-12]
   1d658:	b	1d764 <flatcc_emitter_copy_buffer@@Base+0x7dc>
   1d65c:	ldr	r3, [fp, #-12]
   1d660:	ldrb	r3, [r3]
   1d664:	cmp	r3, #44	; 0x2c
   1d668:	beq	1d6c4 <flatcc_emitter_copy_buffer@@Base+0x73c>
   1d66c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d670:	mov	r2, #0
   1d674:	str	r2, [r3]
   1d678:	ldr	r3, [fp, #-12]
   1d67c:	ldrb	r3, [r3]
   1d680:	cmp	r3, #125	; 0x7d
   1d684:	beq	1d6a4 <flatcc_emitter_copy_buffer@@Base+0x71c>
   1d688:	mov	r3, #10
   1d68c:	ldr	r2, [fp, #-16]
   1d690:	ldr	r1, [fp, #-12]
   1d694:	ldr	r0, [fp, #-8]
   1d698:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d69c:	mov	r3, r0
   1d6a0:	b	1d764 <flatcc_emitter_copy_buffer@@Base+0x7dc>
   1d6a4:	ldr	r3, [fp, #-12]
   1d6a8:	add	r3, r3, #1
   1d6ac:	ldr	r2, [fp, #-16]
   1d6b0:	mov	r1, r3
   1d6b4:	ldr	r0, [fp, #-8]
   1d6b8:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d6bc:	mov	r3, r0
   1d6c0:	b	1d764 <flatcc_emitter_copy_buffer@@Base+0x7dc>
   1d6c4:	ldr	r3, [fp, #-12]
   1d6c8:	add	r3, r3, #1
   1d6cc:	ldr	r2, [fp, #-16]
   1d6d0:	mov	r1, r3
   1d6d4:	ldr	r0, [fp, #-8]
   1d6d8:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d6dc:	str	r0, [fp, #-12]
   1d6e0:	ldr	r2, [fp, #-12]
   1d6e4:	ldr	r3, [fp, #-16]
   1d6e8:	cmp	r2, r3
   1d6ec:	bne	1d718 <flatcc_emitter_copy_buffer@@Base+0x790>
   1d6f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d6f4:	mov	r2, #0
   1d6f8:	str	r2, [r3]
   1d6fc:	mov	r3, #10
   1d700:	ldr	r2, [fp, #-16]
   1d704:	ldr	r1, [fp, #-12]
   1d708:	ldr	r0, [fp, #-8]
   1d70c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d710:	mov	r3, r0
   1d714:	b	1d764 <flatcc_emitter_copy_buffer@@Base+0x7dc>
   1d718:	ldr	r3, [fp, #-12]
   1d71c:	ldrb	r3, [r3]
   1d720:	cmp	r3, #125	; 0x7d
   1d724:	bne	1d754 <flatcc_emitter_copy_buffer@@Base+0x7cc>
   1d728:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d72c:	mov	r2, #0
   1d730:	str	r2, [r3]
   1d734:	ldr	r3, [fp, #-12]
   1d738:	add	r3, r3, #1
   1d73c:	ldr	r2, [fp, #-16]
   1d740:	mov	r1, r3
   1d744:	ldr	r0, [fp, #-8]
   1d748:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d74c:	mov	r3, r0
   1d750:	b	1d764 <flatcc_emitter_copy_buffer@@Base+0x7dc>
   1d754:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d758:	mov	r2, #1
   1d75c:	str	r2, [r3]
   1d760:	ldr	r3, [fp, #-12]
   1d764:	mov	r0, r3
   1d768:	sub	sp, fp, #4
   1d76c:	pop	{fp, pc}
   1d770:	push	{fp, lr}
   1d774:	add	fp, sp, #4
   1d778:	sub	sp, sp, #16
   1d77c:	str	r0, [fp, #-8]
   1d780:	str	r1, [fp, #-12]
   1d784:	str	r2, [fp, #-16]
   1d788:	str	r3, [fp, #-20]	; 0xffffffec
   1d78c:	ldr	r2, [fp, #-12]
   1d790:	ldr	r3, [fp, #-16]
   1d794:	cmp	r2, r3
   1d798:	beq	1d7ac <flatcc_emitter_copy_buffer@@Base+0x824>
   1d79c:	ldr	r3, [fp, #-12]
   1d7a0:	ldrb	r3, [r3]
   1d7a4:	cmp	r3, #91	; 0x5b
   1d7a8:	beq	1d7d4 <flatcc_emitter_copy_buffer@@Base+0x84c>
   1d7ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d7b0:	mov	r2, #0
   1d7b4:	str	r2, [r3]
   1d7b8:	mov	r3, #22
   1d7bc:	ldr	r2, [fp, #-16]
   1d7c0:	ldr	r1, [fp, #-12]
   1d7c4:	ldr	r0, [fp, #-8]
   1d7c8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d7cc:	mov	r3, r0
   1d7d0:	b	1d84c <flatcc_emitter_copy_buffer@@Base+0x8c4>
   1d7d4:	ldr	r3, [fp, #-12]
   1d7d8:	add	r3, r3, #1
   1d7dc:	ldr	r2, [fp, #-16]
   1d7e0:	mov	r1, r3
   1d7e4:	ldr	r0, [fp, #-8]
   1d7e8:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d7ec:	str	r0, [fp, #-12]
   1d7f0:	ldr	r2, [fp, #-12]
   1d7f4:	ldr	r3, [fp, #-16]
   1d7f8:	cmp	r2, r3
   1d7fc:	beq	1d83c <flatcc_emitter_copy_buffer@@Base+0x8b4>
   1d800:	ldr	r3, [fp, #-12]
   1d804:	ldrb	r3, [r3]
   1d808:	cmp	r3, #93	; 0x5d
   1d80c:	bne	1d83c <flatcc_emitter_copy_buffer@@Base+0x8b4>
   1d810:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d814:	mov	r2, #0
   1d818:	str	r2, [r3]
   1d81c:	ldr	r3, [fp, #-12]
   1d820:	add	r3, r3, #1
   1d824:	ldr	r2, [fp, #-16]
   1d828:	mov	r1, r3
   1d82c:	ldr	r0, [fp, #-8]
   1d830:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d834:	mov	r3, r0
   1d838:	b	1d84c <flatcc_emitter_copy_buffer@@Base+0x8c4>
   1d83c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d840:	mov	r2, #1
   1d844:	str	r2, [r3]
   1d848:	ldr	r3, [fp, #-12]
   1d84c:	mov	r0, r3
   1d850:	sub	sp, fp, #4
   1d854:	pop	{fp, pc}
   1d858:	push	{fp, lr}
   1d85c:	add	fp, sp, #4
   1d860:	sub	sp, sp, #16
   1d864:	str	r0, [fp, #-8]
   1d868:	str	r1, [fp, #-12]
   1d86c:	str	r2, [fp, #-16]
   1d870:	str	r3, [fp, #-20]	; 0xffffffec
   1d874:	ldr	r2, [fp, #-16]
   1d878:	ldr	r1, [fp, #-12]
   1d87c:	ldr	r0, [fp, #-8]
   1d880:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d884:	str	r0, [fp, #-12]
   1d888:	ldr	r2, [fp, #-12]
   1d88c:	ldr	r3, [fp, #-16]
   1d890:	cmp	r2, r3
   1d894:	bne	1d8ac <flatcc_emitter_copy_buffer@@Base+0x924>
   1d898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d89c:	mov	r2, #0
   1d8a0:	str	r2, [r3]
   1d8a4:	ldr	r3, [fp, #-12]
   1d8a8:	b	1d9b4 <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1d8ac:	ldr	r3, [fp, #-12]
   1d8b0:	ldrb	r3, [r3]
   1d8b4:	cmp	r3, #44	; 0x2c
   1d8b8:	beq	1d914 <flatcc_emitter_copy_buffer@@Base+0x98c>
   1d8bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d8c0:	mov	r2, #0
   1d8c4:	str	r2, [r3]
   1d8c8:	ldr	r3, [fp, #-12]
   1d8cc:	ldrb	r3, [r3]
   1d8d0:	cmp	r3, #93	; 0x5d
   1d8d4:	beq	1d8f4 <flatcc_emitter_copy_buffer@@Base+0x96c>
   1d8d8:	mov	r3, #9
   1d8dc:	ldr	r2, [fp, #-16]
   1d8e0:	ldr	r1, [fp, #-12]
   1d8e4:	ldr	r0, [fp, #-8]
   1d8e8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d8ec:	mov	r3, r0
   1d8f0:	b	1d9b4 <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1d8f4:	ldr	r3, [fp, #-12]
   1d8f8:	add	r3, r3, #1
   1d8fc:	ldr	r2, [fp, #-16]
   1d900:	mov	r1, r3
   1d904:	ldr	r0, [fp, #-8]
   1d908:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d90c:	mov	r3, r0
   1d910:	b	1d9b4 <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1d914:	ldr	r3, [fp, #-12]
   1d918:	add	r3, r3, #1
   1d91c:	ldr	r2, [fp, #-16]
   1d920:	mov	r1, r3
   1d924:	ldr	r0, [fp, #-8]
   1d928:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d92c:	str	r0, [fp, #-12]
   1d930:	ldr	r2, [fp, #-12]
   1d934:	ldr	r3, [fp, #-16]
   1d938:	cmp	r2, r3
   1d93c:	bne	1d968 <flatcc_emitter_copy_buffer@@Base+0x9e0>
   1d940:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d944:	mov	r2, #0
   1d948:	str	r2, [r3]
   1d94c:	mov	r3, #9
   1d950:	ldr	r2, [fp, #-16]
   1d954:	ldr	r1, [fp, #-12]
   1d958:	ldr	r0, [fp, #-8]
   1d95c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d960:	mov	r3, r0
   1d964:	b	1d9b4 <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1d968:	ldr	r3, [fp, #-12]
   1d96c:	ldrb	r3, [r3]
   1d970:	cmp	r3, #93	; 0x5d
   1d974:	bne	1d9a4 <flatcc_emitter_copy_buffer@@Base+0xa1c>
   1d978:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d97c:	mov	r2, #0
   1d980:	str	r2, [r3]
   1d984:	ldr	r3, [fp, #-12]
   1d988:	add	r3, r3, #1
   1d98c:	ldr	r2, [fp, #-16]
   1d990:	mov	r1, r3
   1d994:	ldr	r0, [fp, #-8]
   1d998:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   1d99c:	mov	r3, r0
   1d9a0:	b	1d9b4 <flatcc_emitter_copy_buffer@@Base+0xa2c>
   1d9a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d9a8:	mov	r2, #1
   1d9ac:	str	r2, [r3]
   1d9b0:	ldr	r3, [fp, #-12]
   1d9b4:	mov	r0, r3
   1d9b8:	sub	sp, fp, #4
   1d9bc:	pop	{fp, pc}
   1d9c0:	push	{fp, lr}
   1d9c4:	add	fp, sp, #4
   1d9c8:	sub	sp, sp, #16
   1d9cc:	str	r0, [fp, #-8]
   1d9d0:	str	r1, [fp, #-12]
   1d9d4:	str	r2, [fp, #-16]
   1d9d8:	str	r3, [fp, #-20]	; 0xffffffec
   1d9dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d9e0:	cmp	r3, #0
   1d9e4:	beq	1da04 <flatcc_emitter_copy_buffer@@Base+0xa7c>
   1d9e8:	mov	r3, #8
   1d9ec:	ldr	r2, [fp, #-16]
   1d9f0:	ldr	r1, [fp, #-12]
   1d9f4:	ldr	r0, [fp, #-8]
   1d9f8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1d9fc:	mov	r3, r0
   1da00:	b	1da14 <flatcc_emitter_copy_buffer@@Base+0xa8c>
   1da04:	ldr	r1, [fp, #12]
   1da08:	ldrd	r2, [fp, #4]
   1da0c:	strd	r2, [r1]
   1da10:	ldr	r3, [fp, #-12]
   1da14:	mov	r0, r3
   1da18:	sub	sp, fp, #4
   1da1c:	pop	{fp, pc}
   1da20:	push	{fp, lr}
   1da24:	add	fp, sp, #4
   1da28:	sub	sp, sp, #16
   1da2c:	str	r0, [fp, #-8]
   1da30:	str	r1, [fp, #-12]
   1da34:	str	r2, [fp, #-16]
   1da38:	str	r3, [fp, #-20]	; 0xffffffec
   1da3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1da40:	cmp	r3, #0
   1da44:	beq	1da64 <flatcc_emitter_copy_buffer@@Base+0xadc>
   1da48:	mov	r3, #8
   1da4c:	ldr	r2, [fp, #-16]
   1da50:	ldr	r1, [fp, #-12]
   1da54:	ldr	r0, [fp, #-8]
   1da58:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1da5c:	mov	r3, r0
   1da60:	b	1da90 <flatcc_emitter_copy_buffer@@Base+0xb08>
   1da64:	ldr	r2, [fp, #4]
   1da68:	ldr	r3, [fp, #8]
   1da6c:	orr	r3, r2, r3
   1da70:	cmp	r3, #0
   1da74:	movne	r3, #1
   1da78:	moveq	r3, #0
   1da7c:	uxtb	r3, r3
   1da80:	mov	r2, r3
   1da84:	ldr	r3, [fp, #12]
   1da88:	strb	r2, [r3]
   1da8c:	ldr	r3, [fp, #-12]
   1da90:	mov	r0, r3
   1da94:	sub	sp, fp, #4
   1da98:	pop	{fp, pc}
   1da9c:	push	{fp, lr}
   1daa0:	add	fp, sp, #4
   1daa4:	sub	sp, sp, #16
   1daa8:	str	r0, [fp, #-8]
   1daac:	str	r1, [fp, #-12]
   1dab0:	str	r2, [fp, #-16]
   1dab4:	str	r3, [fp, #-20]	; 0xffffffec
   1dab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dabc:	cmp	r3, #0
   1dac0:	beq	1dae0 <flatcc_emitter_copy_buffer@@Base+0xb58>
   1dac4:	mov	r3, #8
   1dac8:	ldr	r2, [fp, #-16]
   1dacc:	ldr	r1, [fp, #-12]
   1dad0:	ldr	r0, [fp, #-8]
   1dad4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dad8:	mov	r3, r0
   1dadc:	b	1db24 <flatcc_emitter_copy_buffer@@Base+0xb9c>
   1dae0:	ldrd	r2, [fp, #4]
   1dae4:	mvn	r0, #0
   1dae8:	mov	r1, #0
   1daec:	cmp	r3, r1
   1daf0:	cmpeq	r2, r0
   1daf4:	bls	1db14 <flatcc_emitter_copy_buffer@@Base+0xb8c>
   1daf8:	mov	r3, #7
   1dafc:	ldr	r2, [fp, #-16]
   1db00:	ldr	r1, [fp, #-12]
   1db04:	ldr	r0, [fp, #-8]
   1db08:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1db0c:	mov	r3, r0
   1db10:	b	1db24 <flatcc_emitter_copy_buffer@@Base+0xb9c>
   1db14:	ldr	r2, [fp, #4]
   1db18:	ldr	r3, [fp, #12]
   1db1c:	str	r2, [r3]
   1db20:	ldr	r3, [fp, #-12]
   1db24:	mov	r0, r3
   1db28:	sub	sp, fp, #4
   1db2c:	pop	{fp, pc}
   1db30:	push	{fp, lr}
   1db34:	add	fp, sp, #4
   1db38:	sub	sp, sp, #16
   1db3c:	str	r0, [fp, #-8]
   1db40:	str	r1, [fp, #-12]
   1db44:	str	r2, [fp, #-16]
   1db48:	str	r3, [fp, #-20]	; 0xffffffec
   1db4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1db50:	cmp	r3, #0
   1db54:	beq	1db74 <flatcc_emitter_copy_buffer@@Base+0xbec>
   1db58:	mov	r3, #8
   1db5c:	ldr	r2, [fp, #-16]
   1db60:	ldr	r1, [fp, #-12]
   1db64:	ldr	r0, [fp, #-8]
   1db68:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1db6c:	mov	r3, r0
   1db70:	b	1dbb8 <flatcc_emitter_copy_buffer@@Base+0xc30>
   1db74:	ldrd	r2, [fp, #4]
   1db78:	ldr	r0, [pc, #68]	; 1dbc4 <flatcc_emitter_copy_buffer@@Base+0xc3c>
   1db7c:	mov	r1, #0
   1db80:	cmp	r3, r1
   1db84:	cmpeq	r2, r0
   1db88:	bls	1dba8 <flatcc_emitter_copy_buffer@@Base+0xc20>
   1db8c:	mov	r3, #7
   1db90:	ldr	r2, [fp, #-16]
   1db94:	ldr	r1, [fp, #-12]
   1db98:	ldr	r0, [fp, #-8]
   1db9c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dba0:	mov	r3, r0
   1dba4:	b	1dbb8 <flatcc_emitter_copy_buffer@@Base+0xc30>
   1dba8:	ldrh	r2, [fp, #4]
   1dbac:	ldr	r3, [fp, #12]
   1dbb0:	strh	r2, [r3]
   1dbb4:	ldr	r3, [fp, #-12]
   1dbb8:	mov	r0, r3
   1dbbc:	sub	sp, fp, #4
   1dbc0:	pop	{fp, pc}
   1dbc4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1dbc8:	push	{fp, lr}
   1dbcc:	add	fp, sp, #4
   1dbd0:	sub	sp, sp, #16
   1dbd4:	str	r0, [fp, #-8]
   1dbd8:	str	r1, [fp, #-12]
   1dbdc:	str	r2, [fp, #-16]
   1dbe0:	str	r3, [fp, #-20]	; 0xffffffec
   1dbe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dbe8:	cmp	r3, #0
   1dbec:	beq	1dc0c <flatcc_emitter_copy_buffer@@Base+0xc84>
   1dbf0:	mov	r3, #8
   1dbf4:	ldr	r2, [fp, #-16]
   1dbf8:	ldr	r1, [fp, #-12]
   1dbfc:	ldr	r0, [fp, #-8]
   1dc00:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dc04:	mov	r3, r0
   1dc08:	b	1dc48 <flatcc_emitter_copy_buffer@@Base+0xcc0>
   1dc0c:	ldrd	r2, [fp, #4]
   1dc10:	cmp	r3, #0
   1dc14:	cmpeq	r2, #255	; 0xff
   1dc18:	bls	1dc38 <flatcc_emitter_copy_buffer@@Base+0xcb0>
   1dc1c:	mov	r3, #7
   1dc20:	ldr	r2, [fp, #-16]
   1dc24:	ldr	r1, [fp, #-12]
   1dc28:	ldr	r0, [fp, #-8]
   1dc2c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dc30:	mov	r3, r0
   1dc34:	b	1dc48 <flatcc_emitter_copy_buffer@@Base+0xcc0>
   1dc38:	ldrb	r2, [fp, #4]
   1dc3c:	ldr	r3, [fp, #12]
   1dc40:	strb	r2, [r3]
   1dc44:	ldr	r3, [fp, #-12]
   1dc48:	mov	r0, r3
   1dc4c:	sub	sp, fp, #4
   1dc50:	pop	{fp, pc}
   1dc54:	push	{fp, lr}
   1dc58:	add	fp, sp, #4
   1dc5c:	sub	sp, sp, #16
   1dc60:	str	r0, [fp, #-8]
   1dc64:	str	r1, [fp, #-12]
   1dc68:	str	r2, [fp, #-16]
   1dc6c:	str	r3, [fp, #-20]	; 0xffffffec
   1dc70:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc74:	cmp	r3, #0
   1dc78:	beq	1dcc0 <flatcc_emitter_copy_buffer@@Base+0xd38>
   1dc7c:	ldrd	r2, [fp, #4]
   1dc80:	cmp	r3, #-2147483648	; 0x80000000
   1dc84:	cmpeq	r2, #0
   1dc88:	bls	1dca8 <flatcc_emitter_copy_buffer@@Base+0xd20>
   1dc8c:	mov	r3, #8
   1dc90:	ldr	r2, [fp, #-16]
   1dc94:	ldr	r1, [fp, #-12]
   1dc98:	ldr	r0, [fp, #-8]
   1dc9c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dca0:	mov	r3, r0
   1dca4:	b	1dcfc <flatcc_emitter_copy_buffer@@Base+0xd74>
   1dca8:	ldrd	r2, [fp, #4]
   1dcac:	rsbs	r2, r2, #0
   1dcb0:	rsc	r3, r3, #0
   1dcb4:	ldr	r1, [fp, #12]
   1dcb8:	strd	r2, [r1]
   1dcbc:	b	1dcf8 <flatcc_emitter_copy_buffer@@Base+0xd70>
   1dcc0:	ldrd	r2, [fp, #4]
   1dcc4:	cmp	r2, #0
   1dcc8:	sbcs	r3, r3, #0
   1dccc:	bge	1dcec <flatcc_emitter_copy_buffer@@Base+0xd64>
   1dcd0:	mov	r3, #7
   1dcd4:	ldr	r2, [fp, #-16]
   1dcd8:	ldr	r1, [fp, #-12]
   1dcdc:	ldr	r0, [fp, #-8]
   1dce0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dce4:	mov	r3, r0
   1dce8:	b	1dcfc <flatcc_emitter_copy_buffer@@Base+0xd74>
   1dcec:	ldrd	r2, [fp, #4]
   1dcf0:	ldr	r1, [fp, #12]
   1dcf4:	strd	r2, [r1]
   1dcf8:	ldr	r3, [fp, #-12]
   1dcfc:	mov	r0, r3
   1dd00:	sub	sp, fp, #4
   1dd04:	pop	{fp, pc}
   1dd08:	push	{fp, lr}
   1dd0c:	add	fp, sp, #4
   1dd10:	sub	sp, sp, #16
   1dd14:	str	r0, [fp, #-8]
   1dd18:	str	r1, [fp, #-12]
   1dd1c:	str	r2, [fp, #-16]
   1dd20:	str	r3, [fp, #-20]	; 0xffffffec
   1dd24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dd28:	cmp	r3, #0
   1dd2c:	beq	1dd74 <flatcc_emitter_copy_buffer@@Base+0xdec>
   1dd30:	ldrd	r2, [fp, #4]
   1dd34:	cmp	r3, #0
   1dd38:	cmpeq	r2, #-2147483648	; 0x80000000
   1dd3c:	bls	1dd5c <flatcc_emitter_copy_buffer@@Base+0xdd4>
   1dd40:	mov	r3, #8
   1dd44:	ldr	r2, [fp, #-16]
   1dd48:	ldr	r1, [fp, #-12]
   1dd4c:	ldr	r0, [fp, #-8]
   1dd50:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dd54:	mov	r3, r0
   1dd58:	b	1ddb8 <flatcc_emitter_copy_buffer@@Base+0xe30>
   1dd5c:	ldr	r3, [fp, #4]
   1dd60:	rsb	r3, r3, #0
   1dd64:	mov	r2, r3
   1dd68:	ldr	r3, [fp, #12]
   1dd6c:	str	r2, [r3]
   1dd70:	b	1ddb4 <flatcc_emitter_copy_buffer@@Base+0xe2c>
   1dd74:	ldrd	r2, [fp, #4]
   1dd78:	mvn	r0, #-2147483648	; 0x80000000
   1dd7c:	mov	r1, #0
   1dd80:	cmp	r3, r1
   1dd84:	cmpeq	r2, r0
   1dd88:	bls	1dda8 <flatcc_emitter_copy_buffer@@Base+0xe20>
   1dd8c:	mov	r3, #7
   1dd90:	ldr	r2, [fp, #-16]
   1dd94:	ldr	r1, [fp, #-12]
   1dd98:	ldr	r0, [fp, #-8]
   1dd9c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1dda0:	mov	r3, r0
   1dda4:	b	1ddb8 <flatcc_emitter_copy_buffer@@Base+0xe30>
   1dda8:	ldr	r2, [fp, #4]
   1ddac:	ldr	r3, [fp, #12]
   1ddb0:	str	r2, [r3]
   1ddb4:	ldr	r3, [fp, #-12]
   1ddb8:	mov	r0, r3
   1ddbc:	sub	sp, fp, #4
   1ddc0:	pop	{fp, pc}
   1ddc4:	push	{fp, lr}
   1ddc8:	add	fp, sp, #4
   1ddcc:	sub	sp, sp, #16
   1ddd0:	str	r0, [fp, #-8]
   1ddd4:	str	r1, [fp, #-12]
   1ddd8:	str	r2, [fp, #-16]
   1dddc:	str	r3, [fp, #-20]	; 0xffffffec
   1dde0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dde4:	cmp	r3, #0
   1dde8:	beq	1de34 <flatcc_emitter_copy_buffer@@Base+0xeac>
   1ddec:	ldrd	r2, [fp, #4]
   1ddf0:	cmp	r3, #0
   1ddf4:	cmpeq	r2, #32768	; 0x8000
   1ddf8:	bls	1de18 <flatcc_emitter_copy_buffer@@Base+0xe90>
   1ddfc:	mov	r3, #8
   1de00:	ldr	r2, [fp, #-16]
   1de04:	ldr	r1, [fp, #-12]
   1de08:	ldr	r0, [fp, #-8]
   1de0c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1de10:	mov	r3, r0
   1de14:	b	1de78 <flatcc_emitter_copy_buffer@@Base+0xef0>
   1de18:	ldrh	r3, [fp, #4]
   1de1c:	rsb	r3, r3, #0
   1de20:	uxth	r3, r3
   1de24:	sxth	r2, r3
   1de28:	ldr	r3, [fp, #12]
   1de2c:	strh	r2, [r3]
   1de30:	b	1de74 <flatcc_emitter_copy_buffer@@Base+0xeec>
   1de34:	ldrd	r2, [fp, #4]
   1de38:	ldr	r0, [pc, #68]	; 1de84 <flatcc_emitter_copy_buffer@@Base+0xefc>
   1de3c:	mov	r1, #0
   1de40:	cmp	r3, r1
   1de44:	cmpeq	r2, r0
   1de48:	bls	1de68 <flatcc_emitter_copy_buffer@@Base+0xee0>
   1de4c:	mov	r3, #7
   1de50:	ldr	r2, [fp, #-16]
   1de54:	ldr	r1, [fp, #-12]
   1de58:	ldr	r0, [fp, #-8]
   1de5c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1de60:	mov	r3, r0
   1de64:	b	1de78 <flatcc_emitter_copy_buffer@@Base+0xef0>
   1de68:	ldrsh	r2, [fp, #4]
   1de6c:	ldr	r3, [fp, #12]
   1de70:	strh	r2, [r3]
   1de74:	ldr	r3, [fp, #-12]
   1de78:	mov	r0, r3
   1de7c:	sub	sp, fp, #4
   1de80:	pop	{fp, pc}
   1de84:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1de88:	push	{fp, lr}
   1de8c:	add	fp, sp, #4
   1de90:	sub	sp, sp, #16
   1de94:	str	r0, [fp, #-8]
   1de98:	str	r1, [fp, #-12]
   1de9c:	str	r2, [fp, #-16]
   1dea0:	str	r3, [fp, #-20]	; 0xffffffec
   1dea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dea8:	cmp	r3, #0
   1deac:	beq	1def8 <flatcc_emitter_copy_buffer@@Base+0xf70>
   1deb0:	ldrd	r2, [fp, #4]
   1deb4:	cmp	r3, #0
   1deb8:	cmpeq	r2, #128	; 0x80
   1debc:	bls	1dedc <flatcc_emitter_copy_buffer@@Base+0xf54>
   1dec0:	mov	r3, #8
   1dec4:	ldr	r2, [fp, #-16]
   1dec8:	ldr	r1, [fp, #-12]
   1decc:	ldr	r0, [fp, #-8]
   1ded0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1ded4:	mov	r3, r0
   1ded8:	b	1df34 <flatcc_emitter_copy_buffer@@Base+0xfac>
   1dedc:	ldrb	r3, [fp, #4]
   1dee0:	rsb	r3, r3, #0
   1dee4:	uxtb	r3, r3
   1dee8:	sxtb	r2, r3
   1deec:	ldr	r3, [fp, #12]
   1def0:	strb	r2, [r3]
   1def4:	b	1df30 <flatcc_emitter_copy_buffer@@Base+0xfa8>
   1def8:	ldrd	r2, [fp, #4]
   1defc:	cmp	r3, #0
   1df00:	cmpeq	r2, #127	; 0x7f
   1df04:	bls	1df24 <flatcc_emitter_copy_buffer@@Base+0xf9c>
   1df08:	mov	r3, #7
   1df0c:	ldr	r2, [fp, #-16]
   1df10:	ldr	r1, [fp, #-12]
   1df14:	ldr	r0, [fp, #-8]
   1df18:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1df1c:	mov	r3, r0
   1df20:	b	1df34 <flatcc_emitter_copy_buffer@@Base+0xfac>
   1df24:	ldrsb	r2, [fp, #4]
   1df28:	ldr	r3, [fp, #12]
   1df2c:	strb	r2, [r3]
   1df30:	ldr	r3, [fp, #-12]
   1df34:	mov	r0, r3
   1df38:	sub	sp, fp, #4
   1df3c:	pop	{fp, pc}
   1df40:	push	{fp, lr}
   1df44:	add	fp, sp, #4
   1df48:	sub	sp, sp, #16
   1df4c:	str	r0, [fp, #-8]
   1df50:	str	r1, [fp, #-12]
   1df54:	str	r2, [fp, #-16]
   1df58:	str	r3, [fp, #-20]	; 0xffffffec
   1df5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1df60:	cmp	r3, #0
   1df64:	beq	1df7c <flatcc_emitter_copy_buffer@@Base+0xff4>
   1df68:	ldrd	r0, [fp, #4]
   1df6c:	bl	25d64 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
   1df70:	mov	r3, r0
   1df74:	eor	r2, r3, #-2147483648	; 0x80000000
   1df78:	b	1df88 <flatcc_emitter_copy_buffer@@Base+0x1000>
   1df7c:	ldrd	r0, [fp, #4]
   1df80:	bl	25d64 <flatcc_json_parser_struct_as_root@@Base+0x8e0>
   1df84:	mov	r2, r0
   1df88:	ldr	r3, [fp, #12]
   1df8c:	str	r2, [r3]
   1df90:	ldr	r3, [fp, #-12]
   1df94:	mov	r0, r3
   1df98:	sub	sp, fp, #4
   1df9c:	pop	{fp, pc}
   1dfa0:	push	{fp, lr}
   1dfa4:	add	fp, sp, #4
   1dfa8:	sub	sp, sp, #16
   1dfac:	str	r0, [fp, #-8]
   1dfb0:	str	r1, [fp, #-12]
   1dfb4:	str	r2, [fp, #-16]
   1dfb8:	str	r3, [fp, #-20]	; 0xffffffec
   1dfbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dfc0:	cmp	r3, #0
   1dfc4:	beq	1dfe0 <flatcc_emitter_copy_buffer@@Base+0x1058>
   1dfc8:	ldrd	r0, [fp, #4]
   1dfcc:	bl	25b2c <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   1dfd0:	mov	r2, r0
   1dfd4:	mov	r3, r1
   1dfd8:	eor	r3, r3, #-2147483648	; 0x80000000
   1dfdc:	b	1dff0 <flatcc_emitter_copy_buffer@@Base+0x1068>
   1dfe0:	ldrd	r0, [fp, #4]
   1dfe4:	bl	25b2c <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   1dfe8:	mov	r2, r0
   1dfec:	mov	r3, r1
   1dff0:	ldr	r1, [fp, #12]
   1dff4:	strd	r2, [r1]
   1dff8:	ldr	r3, [fp, #-12]
   1dffc:	mov	r0, r3
   1e000:	sub	sp, fp, #4
   1e004:	pop	{fp, pc}
   1e008:	push	{fp, lr}
   1e00c:	add	fp, sp, #4
   1e010:	sub	sp, sp, #56	; 0x38
   1e014:	str	r0, [fp, #-32]	; 0xffffffe0
   1e018:	str	r1, [fp, #-36]	; 0xffffffdc
   1e01c:	str	r2, [fp, #-40]	; 0xffffffd8
   1e020:	str	r3, [fp, #-44]	; 0xffffffd4
   1e024:	mov	r2, #0
   1e028:	mov	r3, #0
   1e02c:	strd	r2, [fp, #-20]	; 0xffffffec
   1e030:	mov	r3, #0
   1e034:	str	r3, [fp, #-24]	; 0xffffffe8
   1e038:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e03c:	str	r3, [fp, #-8]
   1e040:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e044:	mov	r2, #0
   1e048:	strb	r2, [r3]
   1e04c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e050:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1e054:	cmp	r2, r3
   1e058:	bne	1e064 <flatcc_emitter_copy_buffer@@Base+0x10dc>
   1e05c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e060:	b	1e0cc <flatcc_emitter_copy_buffer@@Base+0x1144>
   1e064:	sub	r2, fp, #24
   1e068:	sub	r3, fp, #20
   1e06c:	str	r3, [sp]
   1e070:	mov	r3, r2
   1e074:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1e078:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1e07c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e080:	bl	23f80 <flatcc_json_parser_integer@@Base>
   1e084:	str	r0, [fp, #-36]	; 0xffffffdc
   1e088:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1e08c:	ldr	r3, [fp, #-8]
   1e090:	cmp	r2, r3
   1e094:	beq	1e0c8 <flatcc_emitter_copy_buffer@@Base+0x1140>
   1e098:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1e09c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1e0a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1e0a4:	str	r1, [sp, #8]
   1e0a8:	strd	r2, [sp]
   1e0ac:	mov	r3, r0
   1e0b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1e0b4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1e0b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e0bc:	bl	1dbc8 <flatcc_emitter_copy_buffer@@Base+0xc40>
   1e0c0:	mov	r3, r0
   1e0c4:	b	1e0cc <flatcc_emitter_copy_buffer@@Base+0x1144>
   1e0c8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1e0cc:	mov	r0, r3
   1e0d0:	sub	sp, fp, #4
   1e0d4:	pop	{fp, pc}
   1e0d8:	push	{r4, fp, lr}
   1e0dc:	add	fp, sp, #8
   1e0e0:	sub	sp, sp, #76	; 0x4c
   1e0e4:	str	r0, [fp, #-56]	; 0xffffffc8
   1e0e8:	str	r1, [fp, #-60]	; 0xffffffc4
   1e0ec:	str	r2, [fp, #-64]	; 0xffffffc0
   1e0f0:	str	r3, [fp, #-68]	; 0xffffffbc
   1e0f4:	mov	r2, #0
   1e0f8:	mov	r3, #0
   1e0fc:	strd	r2, [fp, #-36]	; 0xffffffdc
   1e100:	mov	r3, #0
   1e104:	str	r3, [fp, #-20]	; 0xffffffec
   1e108:	ldr	r1, [fp, #4]
   1e10c:	mov	r2, #0
   1e110:	mov	r3, #0
   1e114:	strd	r2, [r1]
   1e118:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e11c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e120:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e124:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1e128:	str	r0, [fp, #-60]	; 0xffffffc4
   1e12c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1e130:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e134:	cmp	r2, r3
   1e138:	bne	1e144 <flatcc_emitter_copy_buffer@@Base+0x11bc>
   1e13c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e140:	b	1e2a4 <flatcc_emitter_copy_buffer@@Base+0x131c>
   1e144:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1e148:	str	r3, [fp, #-16]
   1e14c:	ldr	r3, [fp, #-16]
   1e150:	ldr	r4, [r3]
   1e154:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e158:	str	r3, [fp, #-24]	; 0xffffffe8
   1e15c:	sub	r2, fp, #48	; 0x30
   1e160:	sub	r3, fp, #52	; 0x34
   1e164:	str	r3, [sp, #4]
   1e168:	sub	r3, fp, #44	; 0x2c
   1e16c:	str	r3, [sp]
   1e170:	mov	r3, r2
   1e174:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e178:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e17c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e180:	blx	r4
   1e184:	str	r0, [fp, #-60]	; 0xffffffc4
   1e188:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1e18c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e190:	cmp	r2, r3
   1e194:	bne	1e1a0 <flatcc_emitter_copy_buffer@@Base+0x1218>
   1e198:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e19c:	b	1e2a4 <flatcc_emitter_copy_buffer@@Base+0x131c>
   1e1a0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1e1a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e1a8:	cmp	r2, r3
   1e1ac:	bne	1e1cc <flatcc_emitter_copy_buffer@@Base+0x1244>
   1e1b0:	ldr	r3, [fp, #-16]
   1e1b4:	add	r3, r3, #4
   1e1b8:	str	r3, [fp, #-16]
   1e1bc:	ldr	r3, [fp, #-16]
   1e1c0:	ldr	r3, [r3]
   1e1c4:	cmp	r3, #0
   1e1c8:	bne	1e14c <flatcc_emitter_copy_buffer@@Base+0x11c4>
   1e1cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e1d0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e1d4:	cmp	r2, r3
   1e1d8:	bne	1e1f8 <flatcc_emitter_copy_buffer@@Base+0x1270>
   1e1dc:	mov	r3, #23
   1e1e0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e1e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e1e8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e1ec:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e1f0:	mov	r3, r0
   1e1f4:	b	1e2a4 <flatcc_emitter_copy_buffer@@Base+0x131c>
   1e1f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e1fc:	add	r2, r3, #1
   1e200:	str	r2, [fp, #-20]	; 0xffffffec
   1e204:	cmp	r3, #0
   1e208:	beq	1e238 <flatcc_emitter_copy_buffer@@Base+0x12b0>
   1e20c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e210:	ldr	r3, [r3, #12]
   1e214:	cmp	r3, #0
   1e218:	beq	1e238 <flatcc_emitter_copy_buffer@@Base+0x12b0>
   1e21c:	mov	r3, #14
   1e220:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e224:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e228:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e22c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e230:	mov	r3, r0
   1e234:	b	1e2a4 <flatcc_emitter_copy_buffer@@Base+0x131c>
   1e238:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e23c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1e240:	sub	r1, fp, #36	; 0x24
   1e244:	str	r1, [sp, #8]
   1e248:	strd	r2, [sp]
   1e24c:	mov	r3, r0
   1e250:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e254:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e258:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e25c:	bl	1d9c0 <flatcc_emitter_copy_buffer@@Base+0xa38>
   1e260:	mov	r2, r0
   1e264:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e268:	cmp	r2, r3
   1e26c:	bne	1e278 <flatcc_emitter_copy_buffer@@Base+0x12f0>
   1e270:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e274:	b	1e2a4 <flatcc_emitter_copy_buffer@@Base+0x131c>
   1e278:	ldr	r3, [fp, #4]
   1e27c:	ldrd	r0, [r3]
   1e280:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1e284:	adds	r2, r2, r0
   1e288:	adc	r3, r3, r1
   1e28c:	ldr	r1, [fp, #4]
   1e290:	strd	r2, [r1]
   1e294:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e298:	cmp	r3, #0
   1e29c:	bne	1e144 <flatcc_emitter_copy_buffer@@Base+0x11bc>
   1e2a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e2a4:	mov	r0, r3
   1e2a8:	sub	sp, fp, #8
   1e2ac:	pop	{r4, fp, pc}
   1e2b0:	push	{r4, fp, lr}
   1e2b4:	add	fp, sp, #8
   1e2b8:	sub	sp, sp, #68	; 0x44
   1e2bc:	str	r0, [fp, #-48]	; 0xffffffd0
   1e2c0:	str	r1, [fp, #-52]	; 0xffffffcc
   1e2c4:	str	r2, [fp, #-56]	; 0xffffffc8
   1e2c8:	str	r3, [fp, #-60]	; 0xffffffc4
   1e2cc:	mov	r3, #0
   1e2d0:	str	r3, [fp, #-28]	; 0xffffffe4
   1e2d4:	mov	r3, #0
   1e2d8:	str	r3, [fp, #-20]	; 0xffffffec
   1e2dc:	ldr	r3, [fp, #4]
   1e2e0:	mov	r2, #0
   1e2e4:	str	r2, [r3]
   1e2e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e2ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e2f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e2f4:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1e2f8:	str	r0, [fp, #-52]	; 0xffffffcc
   1e2fc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e300:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e304:	cmp	r2, r3
   1e308:	bne	1e314 <flatcc_emitter_copy_buffer@@Base+0x138c>
   1e30c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e310:	b	1e470 <flatcc_emitter_copy_buffer@@Base+0x14e8>
   1e314:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e318:	str	r3, [fp, #-16]
   1e31c:	ldr	r3, [fp, #-16]
   1e320:	ldr	r4, [r3]
   1e324:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e328:	str	r3, [fp, #-24]	; 0xffffffe8
   1e32c:	sub	r2, fp, #40	; 0x28
   1e330:	sub	r3, fp, #44	; 0x2c
   1e334:	str	r3, [sp, #4]
   1e338:	sub	r3, fp, #36	; 0x24
   1e33c:	str	r3, [sp]
   1e340:	mov	r3, r2
   1e344:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e348:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e34c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e350:	blx	r4
   1e354:	str	r0, [fp, #-52]	; 0xffffffcc
   1e358:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e35c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e360:	cmp	r2, r3
   1e364:	bne	1e370 <flatcc_emitter_copy_buffer@@Base+0x13e8>
   1e368:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e36c:	b	1e470 <flatcc_emitter_copy_buffer@@Base+0x14e8>
   1e370:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e374:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e378:	cmp	r2, r3
   1e37c:	bne	1e39c <flatcc_emitter_copy_buffer@@Base+0x1414>
   1e380:	ldr	r3, [fp, #-16]
   1e384:	add	r3, r3, #4
   1e388:	str	r3, [fp, #-16]
   1e38c:	ldr	r3, [fp, #-16]
   1e390:	ldr	r3, [r3]
   1e394:	cmp	r3, #0
   1e398:	bne	1e31c <flatcc_emitter_copy_buffer@@Base+0x1394>
   1e39c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e3a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e3a4:	cmp	r2, r3
   1e3a8:	bne	1e3c8 <flatcc_emitter_copy_buffer@@Base+0x1440>
   1e3ac:	mov	r3, #23
   1e3b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e3b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e3b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e3bc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e3c0:	mov	r3, r0
   1e3c4:	b	1e470 <flatcc_emitter_copy_buffer@@Base+0x14e8>
   1e3c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e3cc:	add	r2, r3, #1
   1e3d0:	str	r2, [fp, #-20]	; 0xffffffec
   1e3d4:	cmp	r3, #0
   1e3d8:	beq	1e408 <flatcc_emitter_copy_buffer@@Base+0x1480>
   1e3dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e3e0:	ldr	r3, [r3, #12]
   1e3e4:	cmp	r3, #0
   1e3e8:	beq	1e408 <flatcc_emitter_copy_buffer@@Base+0x1480>
   1e3ec:	mov	r3, #14
   1e3f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e3f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e3f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e3fc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e400:	mov	r3, r0
   1e404:	b	1e470 <flatcc_emitter_copy_buffer@@Base+0x14e8>
   1e408:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e40c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1e410:	sub	r1, fp, #28
   1e414:	str	r1, [sp, #8]
   1e418:	strd	r2, [sp]
   1e41c:	mov	r3, r0
   1e420:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e424:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e428:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e42c:	bl	1da9c <flatcc_emitter_copy_buffer@@Base+0xb14>
   1e430:	mov	r2, r0
   1e434:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e438:	cmp	r2, r3
   1e43c:	bne	1e448 <flatcc_emitter_copy_buffer@@Base+0x14c0>
   1e440:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e444:	b	1e470 <flatcc_emitter_copy_buffer@@Base+0x14e8>
   1e448:	ldr	r3, [fp, #4]
   1e44c:	ldr	r2, [r3]
   1e450:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1e454:	add	r2, r2, r3
   1e458:	ldr	r3, [fp, #4]
   1e45c:	str	r2, [r3]
   1e460:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e464:	cmp	r3, #0
   1e468:	bne	1e314 <flatcc_emitter_copy_buffer@@Base+0x138c>
   1e46c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e470:	mov	r0, r3
   1e474:	sub	sp, fp, #8
   1e478:	pop	{r4, fp, pc}
   1e47c:	push	{r4, fp, lr}
   1e480:	add	fp, sp, #8
   1e484:	sub	sp, sp, #68	; 0x44
   1e488:	str	r0, [fp, #-48]	; 0xffffffd0
   1e48c:	str	r1, [fp, #-52]	; 0xffffffcc
   1e490:	str	r2, [fp, #-56]	; 0xffffffc8
   1e494:	str	r3, [fp, #-60]	; 0xffffffc4
   1e498:	mov	r3, #0
   1e49c:	strh	r3, [fp, #-26]	; 0xffffffe6
   1e4a0:	mov	r3, #0
   1e4a4:	str	r3, [fp, #-20]	; 0xffffffec
   1e4a8:	ldr	r3, [fp, #4]
   1e4ac:	mov	r2, #0
   1e4b0:	strh	r2, [r3]
   1e4b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e4b8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e4bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e4c0:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1e4c4:	str	r0, [fp, #-52]	; 0xffffffcc
   1e4c8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e4cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e4d0:	cmp	r2, r3
   1e4d4:	bne	1e4e0 <flatcc_emitter_copy_buffer@@Base+0x1558>
   1e4d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e4dc:	b	1e640 <flatcc_emitter_copy_buffer@@Base+0x16b8>
   1e4e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e4e4:	str	r3, [fp, #-16]
   1e4e8:	ldr	r3, [fp, #-16]
   1e4ec:	ldr	r4, [r3]
   1e4f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e4f4:	str	r3, [fp, #-24]	; 0xffffffe8
   1e4f8:	sub	r2, fp, #40	; 0x28
   1e4fc:	sub	r3, fp, #44	; 0x2c
   1e500:	str	r3, [sp, #4]
   1e504:	sub	r3, fp, #36	; 0x24
   1e508:	str	r3, [sp]
   1e50c:	mov	r3, r2
   1e510:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e514:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e518:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e51c:	blx	r4
   1e520:	str	r0, [fp, #-52]	; 0xffffffcc
   1e524:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e528:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e52c:	cmp	r2, r3
   1e530:	bne	1e53c <flatcc_emitter_copy_buffer@@Base+0x15b4>
   1e534:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e538:	b	1e640 <flatcc_emitter_copy_buffer@@Base+0x16b8>
   1e53c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e540:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e544:	cmp	r2, r3
   1e548:	bne	1e568 <flatcc_emitter_copy_buffer@@Base+0x15e0>
   1e54c:	ldr	r3, [fp, #-16]
   1e550:	add	r3, r3, #4
   1e554:	str	r3, [fp, #-16]
   1e558:	ldr	r3, [fp, #-16]
   1e55c:	ldr	r3, [r3]
   1e560:	cmp	r3, #0
   1e564:	bne	1e4e8 <flatcc_emitter_copy_buffer@@Base+0x1560>
   1e568:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e56c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e570:	cmp	r2, r3
   1e574:	bne	1e594 <flatcc_emitter_copy_buffer@@Base+0x160c>
   1e578:	mov	r3, #23
   1e57c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e580:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e584:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e588:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e58c:	mov	r3, r0
   1e590:	b	1e640 <flatcc_emitter_copy_buffer@@Base+0x16b8>
   1e594:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e598:	add	r2, r3, #1
   1e59c:	str	r2, [fp, #-20]	; 0xffffffec
   1e5a0:	cmp	r3, #0
   1e5a4:	beq	1e5d4 <flatcc_emitter_copy_buffer@@Base+0x164c>
   1e5a8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e5ac:	ldr	r3, [r3, #12]
   1e5b0:	cmp	r3, #0
   1e5b4:	beq	1e5d4 <flatcc_emitter_copy_buffer@@Base+0x164c>
   1e5b8:	mov	r3, #14
   1e5bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e5c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e5c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e5c8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e5cc:	mov	r3, r0
   1e5d0:	b	1e640 <flatcc_emitter_copy_buffer@@Base+0x16b8>
   1e5d4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e5d8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1e5dc:	sub	r1, fp, #26
   1e5e0:	str	r1, [sp, #8]
   1e5e4:	strd	r2, [sp]
   1e5e8:	mov	r3, r0
   1e5ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e5f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e5f4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e5f8:	bl	1db30 <flatcc_emitter_copy_buffer@@Base+0xba8>
   1e5fc:	mov	r2, r0
   1e600:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e604:	cmp	r2, r3
   1e608:	bne	1e614 <flatcc_emitter_copy_buffer@@Base+0x168c>
   1e60c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e610:	b	1e640 <flatcc_emitter_copy_buffer@@Base+0x16b8>
   1e614:	ldr	r3, [fp, #4]
   1e618:	ldrh	r2, [r3]
   1e61c:	ldrh	r3, [fp, #-26]	; 0xffffffe6
   1e620:	add	r3, r2, r3
   1e624:	uxth	r2, r3
   1e628:	ldr	r3, [fp, #4]
   1e62c:	strh	r2, [r3]
   1e630:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e634:	cmp	r3, #0
   1e638:	bne	1e4e0 <flatcc_emitter_copy_buffer@@Base+0x1558>
   1e63c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e640:	mov	r0, r3
   1e644:	sub	sp, fp, #8
   1e648:	pop	{r4, fp, pc}
   1e64c:	push	{r4, fp, lr}
   1e650:	add	fp, sp, #8
   1e654:	sub	sp, sp, #68	; 0x44
   1e658:	str	r0, [fp, #-48]	; 0xffffffd0
   1e65c:	str	r1, [fp, #-52]	; 0xffffffcc
   1e660:	str	r2, [fp, #-56]	; 0xffffffc8
   1e664:	str	r3, [fp, #-60]	; 0xffffffc4
   1e668:	mov	r3, #0
   1e66c:	strb	r3, [fp, #-25]	; 0xffffffe7
   1e670:	mov	r3, #0
   1e674:	str	r3, [fp, #-20]	; 0xffffffec
   1e678:	ldr	r3, [fp, #4]
   1e67c:	mov	r2, #0
   1e680:	strb	r2, [r3]
   1e684:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e688:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e68c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e690:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1e694:	str	r0, [fp, #-52]	; 0xffffffcc
   1e698:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e69c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e6a0:	cmp	r2, r3
   1e6a4:	bne	1e6b0 <flatcc_emitter_copy_buffer@@Base+0x1728>
   1e6a8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e6ac:	b	1e810 <flatcc_emitter_copy_buffer@@Base+0x1888>
   1e6b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e6b4:	str	r3, [fp, #-16]
   1e6b8:	ldr	r3, [fp, #-16]
   1e6bc:	ldr	r4, [r3]
   1e6c0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e6c4:	str	r3, [fp, #-24]	; 0xffffffe8
   1e6c8:	sub	r2, fp, #40	; 0x28
   1e6cc:	sub	r3, fp, #44	; 0x2c
   1e6d0:	str	r3, [sp, #4]
   1e6d4:	sub	r3, fp, #36	; 0x24
   1e6d8:	str	r3, [sp]
   1e6dc:	mov	r3, r2
   1e6e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e6e4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e6e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e6ec:	blx	r4
   1e6f0:	str	r0, [fp, #-52]	; 0xffffffcc
   1e6f4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e6f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e6fc:	cmp	r2, r3
   1e700:	bne	1e70c <flatcc_emitter_copy_buffer@@Base+0x1784>
   1e704:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e708:	b	1e810 <flatcc_emitter_copy_buffer@@Base+0x1888>
   1e70c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1e710:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e714:	cmp	r2, r3
   1e718:	bne	1e738 <flatcc_emitter_copy_buffer@@Base+0x17b0>
   1e71c:	ldr	r3, [fp, #-16]
   1e720:	add	r3, r3, #4
   1e724:	str	r3, [fp, #-16]
   1e728:	ldr	r3, [fp, #-16]
   1e72c:	ldr	r3, [r3]
   1e730:	cmp	r3, #0
   1e734:	bne	1e6b8 <flatcc_emitter_copy_buffer@@Base+0x1730>
   1e738:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e73c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e740:	cmp	r2, r3
   1e744:	bne	1e764 <flatcc_emitter_copy_buffer@@Base+0x17dc>
   1e748:	mov	r3, #23
   1e74c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e750:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e754:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e758:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e75c:	mov	r3, r0
   1e760:	b	1e810 <flatcc_emitter_copy_buffer@@Base+0x1888>
   1e764:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e768:	add	r2, r3, #1
   1e76c:	str	r2, [fp, #-20]	; 0xffffffec
   1e770:	cmp	r3, #0
   1e774:	beq	1e7a4 <flatcc_emitter_copy_buffer@@Base+0x181c>
   1e778:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1e77c:	ldr	r3, [r3, #12]
   1e780:	cmp	r3, #0
   1e784:	beq	1e7a4 <flatcc_emitter_copy_buffer@@Base+0x181c>
   1e788:	mov	r3, #14
   1e78c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e790:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e794:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e798:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e79c:	mov	r3, r0
   1e7a0:	b	1e810 <flatcc_emitter_copy_buffer@@Base+0x1888>
   1e7a4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1e7a8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1e7ac:	sub	r1, fp, #25
   1e7b0:	str	r1, [sp, #8]
   1e7b4:	strd	r2, [sp]
   1e7b8:	mov	r3, r0
   1e7bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e7c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e7c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e7c8:	bl	1dbc8 <flatcc_emitter_copy_buffer@@Base+0xc40>
   1e7cc:	mov	r2, r0
   1e7d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e7d4:	cmp	r2, r3
   1e7d8:	bne	1e7e4 <flatcc_emitter_copy_buffer@@Base+0x185c>
   1e7dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e7e0:	b	1e810 <flatcc_emitter_copy_buffer@@Base+0x1888>
   1e7e4:	ldr	r3, [fp, #4]
   1e7e8:	ldrb	r2, [r3]
   1e7ec:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1e7f0:	add	r3, r2, r3
   1e7f4:	uxtb	r2, r3
   1e7f8:	ldr	r3, [fp, #4]
   1e7fc:	strb	r2, [r3]
   1e800:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1e804:	cmp	r3, #0
   1e808:	bne	1e6b0 <flatcc_emitter_copy_buffer@@Base+0x1728>
   1e80c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e810:	mov	r0, r3
   1e814:	sub	sp, fp, #8
   1e818:	pop	{r4, fp, pc}
   1e81c:	push	{r4, fp, lr}
   1e820:	add	fp, sp, #8
   1e824:	sub	sp, sp, #76	; 0x4c
   1e828:	str	r0, [fp, #-56]	; 0xffffffc8
   1e82c:	str	r1, [fp, #-60]	; 0xffffffc4
   1e830:	str	r2, [fp, #-64]	; 0xffffffc0
   1e834:	str	r3, [fp, #-68]	; 0xffffffbc
   1e838:	mov	r2, #0
   1e83c:	mov	r3, #0
   1e840:	strd	r2, [fp, #-36]	; 0xffffffdc
   1e844:	mov	r3, #0
   1e848:	str	r3, [fp, #-20]	; 0xffffffec
   1e84c:	ldr	r1, [fp, #4]
   1e850:	mov	r2, #0
   1e854:	mov	r3, #0
   1e858:	strd	r2, [r1]
   1e85c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e860:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e864:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e868:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1e86c:	str	r0, [fp, #-60]	; 0xffffffc4
   1e870:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1e874:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e878:	cmp	r2, r3
   1e87c:	bne	1e888 <flatcc_emitter_copy_buffer@@Base+0x1900>
   1e880:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e884:	b	1e9e8 <flatcc_emitter_copy_buffer@@Base+0x1a60>
   1e888:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1e88c:	str	r3, [fp, #-16]
   1e890:	ldr	r3, [fp, #-16]
   1e894:	ldr	r4, [r3]
   1e898:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e89c:	str	r3, [fp, #-24]	; 0xffffffe8
   1e8a0:	sub	r2, fp, #48	; 0x30
   1e8a4:	sub	r3, fp, #52	; 0x34
   1e8a8:	str	r3, [sp, #4]
   1e8ac:	sub	r3, fp, #44	; 0x2c
   1e8b0:	str	r3, [sp]
   1e8b4:	mov	r3, r2
   1e8b8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e8bc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1e8c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e8c4:	blx	r4
   1e8c8:	str	r0, [fp, #-60]	; 0xffffffc4
   1e8cc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1e8d0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e8d4:	cmp	r2, r3
   1e8d8:	bne	1e8e4 <flatcc_emitter_copy_buffer@@Base+0x195c>
   1e8dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e8e0:	b	1e9e8 <flatcc_emitter_copy_buffer@@Base+0x1a60>
   1e8e4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1e8e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1e8ec:	cmp	r2, r3
   1e8f0:	bne	1e910 <flatcc_emitter_copy_buffer@@Base+0x1988>
   1e8f4:	ldr	r3, [fp, #-16]
   1e8f8:	add	r3, r3, #4
   1e8fc:	str	r3, [fp, #-16]
   1e900:	ldr	r3, [fp, #-16]
   1e904:	ldr	r3, [r3]
   1e908:	cmp	r3, #0
   1e90c:	bne	1e890 <flatcc_emitter_copy_buffer@@Base+0x1908>
   1e910:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1e914:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e918:	cmp	r2, r3
   1e91c:	bne	1e93c <flatcc_emitter_copy_buffer@@Base+0x19b4>
   1e920:	mov	r3, #23
   1e924:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e928:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e92c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e930:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e934:	mov	r3, r0
   1e938:	b	1e9e8 <flatcc_emitter_copy_buffer@@Base+0x1a60>
   1e93c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1e940:	add	r2, r3, #1
   1e944:	str	r2, [fp, #-20]	; 0xffffffec
   1e948:	cmp	r3, #0
   1e94c:	beq	1e97c <flatcc_emitter_copy_buffer@@Base+0x19f4>
   1e950:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1e954:	ldr	r3, [r3, #12]
   1e958:	cmp	r3, #0
   1e95c:	beq	1e97c <flatcc_emitter_copy_buffer@@Base+0x19f4>
   1e960:	mov	r3, #14
   1e964:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e968:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e96c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e970:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1e974:	mov	r3, r0
   1e978:	b	1e9e8 <flatcc_emitter_copy_buffer@@Base+0x1a60>
   1e97c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e980:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1e984:	sub	r1, fp, #36	; 0x24
   1e988:	str	r1, [sp, #8]
   1e98c:	strd	r2, [sp]
   1e990:	mov	r3, r0
   1e994:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e998:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1e99c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e9a0:	bl	1dc54 <flatcc_emitter_copy_buffer@@Base+0xccc>
   1e9a4:	mov	r2, r0
   1e9a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e9ac:	cmp	r2, r3
   1e9b0:	bne	1e9bc <flatcc_emitter_copy_buffer@@Base+0x1a34>
   1e9b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1e9b8:	b	1e9e8 <flatcc_emitter_copy_buffer@@Base+0x1a60>
   1e9bc:	ldr	r3, [fp, #4]
   1e9c0:	ldrd	r0, [r3]
   1e9c4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1e9c8:	adds	r2, r2, r0
   1e9cc:	adc	r3, r3, r1
   1e9d0:	ldr	r1, [fp, #4]
   1e9d4:	strd	r2, [r1]
   1e9d8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e9dc:	cmp	r3, #0
   1e9e0:	bne	1e888 <flatcc_emitter_copy_buffer@@Base+0x1900>
   1e9e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1e9e8:	mov	r0, r3
   1e9ec:	sub	sp, fp, #8
   1e9f0:	pop	{r4, fp, pc}
   1e9f4:	push	{r4, fp, lr}
   1e9f8:	add	fp, sp, #8
   1e9fc:	sub	sp, sp, #68	; 0x44
   1ea00:	str	r0, [fp, #-48]	; 0xffffffd0
   1ea04:	str	r1, [fp, #-52]	; 0xffffffcc
   1ea08:	str	r2, [fp, #-56]	; 0xffffffc8
   1ea0c:	str	r3, [fp, #-60]	; 0xffffffc4
   1ea10:	mov	r3, #0
   1ea14:	str	r3, [fp, #-28]	; 0xffffffe4
   1ea18:	mov	r3, #0
   1ea1c:	str	r3, [fp, #-20]	; 0xffffffec
   1ea20:	ldr	r3, [fp, #4]
   1ea24:	mov	r2, #0
   1ea28:	str	r2, [r3]
   1ea2c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ea30:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ea34:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ea38:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1ea3c:	str	r0, [fp, #-52]	; 0xffffffcc
   1ea40:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ea44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ea48:	cmp	r2, r3
   1ea4c:	bne	1ea58 <flatcc_emitter_copy_buffer@@Base+0x1ad0>
   1ea50:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ea54:	b	1ebb4 <flatcc_emitter_copy_buffer@@Base+0x1c2c>
   1ea58:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ea5c:	str	r3, [fp, #-16]
   1ea60:	ldr	r3, [fp, #-16]
   1ea64:	ldr	r4, [r3]
   1ea68:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ea6c:	str	r3, [fp, #-24]	; 0xffffffe8
   1ea70:	sub	r2, fp, #40	; 0x28
   1ea74:	sub	r3, fp, #44	; 0x2c
   1ea78:	str	r3, [sp, #4]
   1ea7c:	sub	r3, fp, #36	; 0x24
   1ea80:	str	r3, [sp]
   1ea84:	mov	r3, r2
   1ea88:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ea8c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ea90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ea94:	blx	r4
   1ea98:	str	r0, [fp, #-52]	; 0xffffffcc
   1ea9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1eaa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1eaa4:	cmp	r2, r3
   1eaa8:	bne	1eab4 <flatcc_emitter_copy_buffer@@Base+0x1b2c>
   1eaac:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1eab0:	b	1ebb4 <flatcc_emitter_copy_buffer@@Base+0x1c2c>
   1eab4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1eab8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1eabc:	cmp	r2, r3
   1eac0:	bne	1eae0 <flatcc_emitter_copy_buffer@@Base+0x1b58>
   1eac4:	ldr	r3, [fp, #-16]
   1eac8:	add	r3, r3, #4
   1eacc:	str	r3, [fp, #-16]
   1ead0:	ldr	r3, [fp, #-16]
   1ead4:	ldr	r3, [r3]
   1ead8:	cmp	r3, #0
   1eadc:	bne	1ea60 <flatcc_emitter_copy_buffer@@Base+0x1ad8>
   1eae0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1eae4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1eae8:	cmp	r2, r3
   1eaec:	bne	1eb0c <flatcc_emitter_copy_buffer@@Base+0x1b84>
   1eaf0:	mov	r3, #23
   1eaf4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1eaf8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eafc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eb00:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1eb04:	mov	r3, r0
   1eb08:	b	1ebb4 <flatcc_emitter_copy_buffer@@Base+0x1c2c>
   1eb0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1eb10:	add	r2, r3, #1
   1eb14:	str	r2, [fp, #-20]	; 0xffffffec
   1eb18:	cmp	r3, #0
   1eb1c:	beq	1eb4c <flatcc_emitter_copy_buffer@@Base+0x1bc4>
   1eb20:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1eb24:	ldr	r3, [r3, #12]
   1eb28:	cmp	r3, #0
   1eb2c:	beq	1eb4c <flatcc_emitter_copy_buffer@@Base+0x1bc4>
   1eb30:	mov	r3, #14
   1eb34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1eb38:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eb3c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eb40:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1eb44:	mov	r3, r0
   1eb48:	b	1ebb4 <flatcc_emitter_copy_buffer@@Base+0x1c2c>
   1eb4c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1eb50:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1eb54:	sub	r1, fp, #28
   1eb58:	str	r1, [sp, #8]
   1eb5c:	strd	r2, [sp]
   1eb60:	mov	r3, r0
   1eb64:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1eb68:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eb6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eb70:	bl	1dd08 <flatcc_emitter_copy_buffer@@Base+0xd80>
   1eb74:	mov	r2, r0
   1eb78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1eb7c:	cmp	r2, r3
   1eb80:	bne	1eb8c <flatcc_emitter_copy_buffer@@Base+0x1c04>
   1eb84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1eb88:	b	1ebb4 <flatcc_emitter_copy_buffer@@Base+0x1c2c>
   1eb8c:	ldr	r3, [fp, #4]
   1eb90:	ldr	r2, [r3]
   1eb94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1eb98:	add	r2, r2, r3
   1eb9c:	ldr	r3, [fp, #4]
   1eba0:	str	r2, [r3]
   1eba4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1eba8:	cmp	r3, #0
   1ebac:	bne	1ea58 <flatcc_emitter_copy_buffer@@Base+0x1ad0>
   1ebb0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ebb4:	mov	r0, r3
   1ebb8:	sub	sp, fp, #8
   1ebbc:	pop	{r4, fp, pc}
   1ebc0:	push	{r4, fp, lr}
   1ebc4:	add	fp, sp, #8
   1ebc8:	sub	sp, sp, #68	; 0x44
   1ebcc:	str	r0, [fp, #-48]	; 0xffffffd0
   1ebd0:	str	r1, [fp, #-52]	; 0xffffffcc
   1ebd4:	str	r2, [fp, #-56]	; 0xffffffc8
   1ebd8:	str	r3, [fp, #-60]	; 0xffffffc4
   1ebdc:	mov	r3, #0
   1ebe0:	strh	r3, [fp, #-26]	; 0xffffffe6
   1ebe4:	mov	r3, #0
   1ebe8:	str	r3, [fp, #-20]	; 0xffffffec
   1ebec:	ldr	r3, [fp, #4]
   1ebf0:	mov	r2, #0
   1ebf4:	strh	r2, [r3]
   1ebf8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ebfc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ec00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ec04:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1ec08:	str	r0, [fp, #-52]	; 0xffffffcc
   1ec0c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ec10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ec14:	cmp	r2, r3
   1ec18:	bne	1ec24 <flatcc_emitter_copy_buffer@@Base+0x1c9c>
   1ec1c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ec20:	b	1ed90 <flatcc_emitter_copy_buffer@@Base+0x1e08>
   1ec24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ec28:	str	r3, [fp, #-16]
   1ec2c:	ldr	r3, [fp, #-16]
   1ec30:	ldr	r4, [r3]
   1ec34:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ec38:	str	r3, [fp, #-24]	; 0xffffffe8
   1ec3c:	sub	r2, fp, #40	; 0x28
   1ec40:	sub	r3, fp, #44	; 0x2c
   1ec44:	str	r3, [sp, #4]
   1ec48:	sub	r3, fp, #36	; 0x24
   1ec4c:	str	r3, [sp]
   1ec50:	mov	r3, r2
   1ec54:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ec58:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ec5c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ec60:	blx	r4
   1ec64:	str	r0, [fp, #-52]	; 0xffffffcc
   1ec68:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ec6c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ec70:	cmp	r2, r3
   1ec74:	bne	1ec80 <flatcc_emitter_copy_buffer@@Base+0x1cf8>
   1ec78:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ec7c:	b	1ed90 <flatcc_emitter_copy_buffer@@Base+0x1e08>
   1ec80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ec84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ec88:	cmp	r2, r3
   1ec8c:	bne	1ecac <flatcc_emitter_copy_buffer@@Base+0x1d24>
   1ec90:	ldr	r3, [fp, #-16]
   1ec94:	add	r3, r3, #4
   1ec98:	str	r3, [fp, #-16]
   1ec9c:	ldr	r3, [fp, #-16]
   1eca0:	ldr	r3, [r3]
   1eca4:	cmp	r3, #0
   1eca8:	bne	1ec2c <flatcc_emitter_copy_buffer@@Base+0x1ca4>
   1ecac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ecb0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ecb4:	cmp	r2, r3
   1ecb8:	bne	1ecd8 <flatcc_emitter_copy_buffer@@Base+0x1d50>
   1ecbc:	mov	r3, #23
   1ecc0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ecc4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ecc8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eccc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1ecd0:	mov	r3, r0
   1ecd4:	b	1ed90 <flatcc_emitter_copy_buffer@@Base+0x1e08>
   1ecd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ecdc:	add	r2, r3, #1
   1ece0:	str	r2, [fp, #-20]	; 0xffffffec
   1ece4:	cmp	r3, #0
   1ece8:	beq	1ed18 <flatcc_emitter_copy_buffer@@Base+0x1d90>
   1ecec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1ecf0:	ldr	r3, [r3, #12]
   1ecf4:	cmp	r3, #0
   1ecf8:	beq	1ed18 <flatcc_emitter_copy_buffer@@Base+0x1d90>
   1ecfc:	mov	r3, #14
   1ed00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ed04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ed08:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ed0c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1ed10:	mov	r3, r0
   1ed14:	b	1ed90 <flatcc_emitter_copy_buffer@@Base+0x1e08>
   1ed18:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1ed1c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1ed20:	sub	r1, fp, #26
   1ed24:	str	r1, [sp, #8]
   1ed28:	strd	r2, [sp]
   1ed2c:	mov	r3, r0
   1ed30:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ed34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ed38:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ed3c:	bl	1ddc4 <flatcc_emitter_copy_buffer@@Base+0xe3c>
   1ed40:	mov	r2, r0
   1ed44:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ed48:	cmp	r2, r3
   1ed4c:	bne	1ed58 <flatcc_emitter_copy_buffer@@Base+0x1dd0>
   1ed50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ed54:	b	1ed90 <flatcc_emitter_copy_buffer@@Base+0x1e08>
   1ed58:	ldr	r3, [fp, #4]
   1ed5c:	ldrsh	r3, [r3]
   1ed60:	uxth	r2, r3
   1ed64:	ldrsh	r3, [fp, #-26]	; 0xffffffe6
   1ed68:	uxth	r3, r3
   1ed6c:	add	r3, r2, r3
   1ed70:	uxth	r3, r3
   1ed74:	sxth	r2, r3
   1ed78:	ldr	r3, [fp, #4]
   1ed7c:	strh	r2, [r3]
   1ed80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ed84:	cmp	r3, #0
   1ed88:	bne	1ec24 <flatcc_emitter_copy_buffer@@Base+0x1c9c>
   1ed8c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ed90:	mov	r0, r3
   1ed94:	sub	sp, fp, #8
   1ed98:	pop	{r4, fp, pc}
   1ed9c:	push	{r4, fp, lr}
   1eda0:	add	fp, sp, #8
   1eda4:	sub	sp, sp, #68	; 0x44
   1eda8:	str	r0, [fp, #-48]	; 0xffffffd0
   1edac:	str	r1, [fp, #-52]	; 0xffffffcc
   1edb0:	str	r2, [fp, #-56]	; 0xffffffc8
   1edb4:	str	r3, [fp, #-60]	; 0xffffffc4
   1edb8:	mov	r3, #0
   1edbc:	strb	r3, [fp, #-25]	; 0xffffffe7
   1edc0:	mov	r3, #0
   1edc4:	str	r3, [fp, #-20]	; 0xffffffec
   1edc8:	ldr	r3, [fp, #4]
   1edcc:	mov	r2, #0
   1edd0:	strb	r2, [r3]
   1edd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1edd8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eddc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ede0:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1ede4:	str	r0, [fp, #-52]	; 0xffffffcc
   1ede8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1edec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1edf0:	cmp	r2, r3
   1edf4:	bne	1ee00 <flatcc_emitter_copy_buffer@@Base+0x1e78>
   1edf8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1edfc:	b	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1fe4>
   1ee00:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1ee04:	str	r3, [fp, #-16]
   1ee08:	ldr	r3, [fp, #-16]
   1ee0c:	ldr	r4, [r3]
   1ee10:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ee14:	str	r3, [fp, #-24]	; 0xffffffe8
   1ee18:	sub	r2, fp, #40	; 0x28
   1ee1c:	sub	r3, fp, #44	; 0x2c
   1ee20:	str	r3, [sp, #4]
   1ee24:	sub	r3, fp, #36	; 0x24
   1ee28:	str	r3, [sp]
   1ee2c:	mov	r3, r2
   1ee30:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ee34:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ee38:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ee3c:	blx	r4
   1ee40:	str	r0, [fp, #-52]	; 0xffffffcc
   1ee44:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ee48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ee4c:	cmp	r2, r3
   1ee50:	bne	1ee5c <flatcc_emitter_copy_buffer@@Base+0x1ed4>
   1ee54:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ee58:	b	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1fe4>
   1ee5c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1ee60:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ee64:	cmp	r2, r3
   1ee68:	bne	1ee88 <flatcc_emitter_copy_buffer@@Base+0x1f00>
   1ee6c:	ldr	r3, [fp, #-16]
   1ee70:	add	r3, r3, #4
   1ee74:	str	r3, [fp, #-16]
   1ee78:	ldr	r3, [fp, #-16]
   1ee7c:	ldr	r3, [r3]
   1ee80:	cmp	r3, #0
   1ee84:	bne	1ee08 <flatcc_emitter_copy_buffer@@Base+0x1e80>
   1ee88:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ee8c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ee90:	cmp	r2, r3
   1ee94:	bne	1eeb4 <flatcc_emitter_copy_buffer@@Base+0x1f2c>
   1ee98:	mov	r3, #23
   1ee9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1eea0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eea4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eea8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1eeac:	mov	r3, r0
   1eeb0:	b	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1fe4>
   1eeb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1eeb8:	add	r2, r3, #1
   1eebc:	str	r2, [fp, #-20]	; 0xffffffec
   1eec0:	cmp	r3, #0
   1eec4:	beq	1eef4 <flatcc_emitter_copy_buffer@@Base+0x1f6c>
   1eec8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1eecc:	ldr	r3, [r3, #12]
   1eed0:	cmp	r3, #0
   1eed4:	beq	1eef4 <flatcc_emitter_copy_buffer@@Base+0x1f6c>
   1eed8:	mov	r3, #14
   1eedc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1eee0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1eee4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1eee8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1eeec:	mov	r3, r0
   1eef0:	b	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1fe4>
   1eef4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1eef8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1eefc:	sub	r1, fp, #25
   1ef00:	str	r1, [sp, #8]
   1ef04:	strd	r2, [sp]
   1ef08:	mov	r3, r0
   1ef0c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1ef10:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ef14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ef18:	bl	1de88 <flatcc_emitter_copy_buffer@@Base+0xf00>
   1ef1c:	mov	r2, r0
   1ef20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ef24:	cmp	r2, r3
   1ef28:	bne	1ef34 <flatcc_emitter_copy_buffer@@Base+0x1fac>
   1ef2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1ef30:	b	1ef6c <flatcc_emitter_copy_buffer@@Base+0x1fe4>
   1ef34:	ldr	r3, [fp, #4]
   1ef38:	ldrsb	r3, [r3]
   1ef3c:	uxtb	r2, r3
   1ef40:	ldrsb	r3, [fp, #-25]	; 0xffffffe7
   1ef44:	uxtb	r3, r3
   1ef48:	add	r3, r2, r3
   1ef4c:	uxtb	r3, r3
   1ef50:	sxtb	r2, r3
   1ef54:	ldr	r3, [fp, #4]
   1ef58:	strb	r2, [r3]
   1ef5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ef60:	cmp	r3, #0
   1ef64:	bne	1ee00 <flatcc_emitter_copy_buffer@@Base+0x1e78>
   1ef68:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ef6c:	mov	r0, r3
   1ef70:	sub	sp, fp, #8
   1ef74:	pop	{r4, fp, pc}
   1ef78:	push	{r4, fp, lr}
   1ef7c:	add	fp, sp, #8
   1ef80:	sub	sp, sp, #68	; 0x44
   1ef84:	str	r0, [fp, #-48]	; 0xffffffd0
   1ef88:	str	r1, [fp, #-52]	; 0xffffffcc
   1ef8c:	str	r2, [fp, #-56]	; 0xffffffc8
   1ef90:	str	r3, [fp, #-60]	; 0xffffffc4
   1ef94:	mov	r3, #0
   1ef98:	strb	r3, [fp, #-25]	; 0xffffffe7
   1ef9c:	mov	r3, #0
   1efa0:	str	r3, [fp, #-20]	; 0xffffffec
   1efa4:	ldr	r3, [fp, #4]
   1efa8:	mov	r2, #0
   1efac:	strb	r2, [r3]
   1efb0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1efb4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1efb8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1efbc:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1efc0:	str	r0, [fp, #-52]	; 0xffffffcc
   1efc4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1efc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1efcc:	cmp	r2, r3
   1efd0:	bne	1efdc <flatcc_emitter_copy_buffer@@Base+0x2054>
   1efd4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1efd8:	b	1f13c <flatcc_emitter_copy_buffer@@Base+0x21b4>
   1efdc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1efe0:	str	r3, [fp, #-16]
   1efe4:	ldr	r3, [fp, #-16]
   1efe8:	ldr	r4, [r3]
   1efec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1eff0:	str	r3, [fp, #-24]	; 0xffffffe8
   1eff4:	sub	r2, fp, #40	; 0x28
   1eff8:	sub	r3, fp, #44	; 0x2c
   1effc:	str	r3, [sp, #4]
   1f000:	sub	r3, fp, #36	; 0x24
   1f004:	str	r3, [sp]
   1f008:	mov	r3, r2
   1f00c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f010:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f014:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f018:	blx	r4
   1f01c:	str	r0, [fp, #-52]	; 0xffffffcc
   1f020:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f024:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f028:	cmp	r2, r3
   1f02c:	bne	1f038 <flatcc_emitter_copy_buffer@@Base+0x20b0>
   1f030:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f034:	b	1f13c <flatcc_emitter_copy_buffer@@Base+0x21b4>
   1f038:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f03c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f040:	cmp	r2, r3
   1f044:	bne	1f064 <flatcc_emitter_copy_buffer@@Base+0x20dc>
   1f048:	ldr	r3, [fp, #-16]
   1f04c:	add	r3, r3, #4
   1f050:	str	r3, [fp, #-16]
   1f054:	ldr	r3, [fp, #-16]
   1f058:	ldr	r3, [r3]
   1f05c:	cmp	r3, #0
   1f060:	bne	1efe4 <flatcc_emitter_copy_buffer@@Base+0x205c>
   1f064:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f068:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f06c:	cmp	r2, r3
   1f070:	bne	1f090 <flatcc_emitter_copy_buffer@@Base+0x2108>
   1f074:	mov	r3, #23
   1f078:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f07c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f080:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f084:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1f088:	mov	r3, r0
   1f08c:	b	1f13c <flatcc_emitter_copy_buffer@@Base+0x21b4>
   1f090:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f094:	add	r2, r3, #1
   1f098:	str	r2, [fp, #-20]	; 0xffffffec
   1f09c:	cmp	r3, #0
   1f0a0:	beq	1f0d0 <flatcc_emitter_copy_buffer@@Base+0x2148>
   1f0a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f0a8:	ldr	r3, [r3, #12]
   1f0ac:	cmp	r3, #0
   1f0b0:	beq	1f0d0 <flatcc_emitter_copy_buffer@@Base+0x2148>
   1f0b4:	mov	r3, #14
   1f0b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f0bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f0c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f0c4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1f0c8:	mov	r3, r0
   1f0cc:	b	1f13c <flatcc_emitter_copy_buffer@@Base+0x21b4>
   1f0d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f0d4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f0d8:	sub	r1, fp, #25
   1f0dc:	str	r1, [sp, #8]
   1f0e0:	strd	r2, [sp]
   1f0e4:	mov	r3, r0
   1f0e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f0ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f0f0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f0f4:	bl	1da20 <flatcc_emitter_copy_buffer@@Base+0xa98>
   1f0f8:	mov	r2, r0
   1f0fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f100:	cmp	r2, r3
   1f104:	bne	1f110 <flatcc_emitter_copy_buffer@@Base+0x2188>
   1f108:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f10c:	b	1f13c <flatcc_emitter_copy_buffer@@Base+0x21b4>
   1f110:	ldr	r3, [fp, #4]
   1f114:	ldrb	r2, [r3]
   1f118:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1f11c:	add	r3, r2, r3
   1f120:	uxtb	r2, r3
   1f124:	ldr	r3, [fp, #4]
   1f128:	strb	r2, [r3]
   1f12c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f130:	cmp	r3, #0
   1f134:	bne	1efdc <flatcc_emitter_copy_buffer@@Base+0x2054>
   1f138:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f13c:	mov	r0, r3
   1f140:	sub	sp, fp, #8
   1f144:	pop	{r4, fp, pc}
   1f148:	push	{r4, fp, lr}
   1f14c:	add	fp, sp, #8
   1f150:	sub	sp, sp, #68	; 0x44
   1f154:	str	r0, [fp, #-48]	; 0xffffffd0
   1f158:	str	r1, [fp, #-52]	; 0xffffffcc
   1f15c:	str	r2, [fp, #-56]	; 0xffffffc8
   1f160:	str	r3, [fp, #-60]	; 0xffffffc4
   1f164:	mov	r3, #0
   1f168:	str	r3, [fp, #-28]	; 0xffffffe4
   1f16c:	mov	r3, #0
   1f170:	str	r3, [fp, #-20]	; 0xffffffec
   1f174:	ldr	r3, [fp, #4]
   1f178:	mov	r2, #0
   1f17c:	str	r2, [r3]
   1f180:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f184:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f188:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f18c:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1f190:	str	r0, [fp, #-52]	; 0xffffffcc
   1f194:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f198:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f19c:	cmp	r2, r3
   1f1a0:	bne	1f1ac <flatcc_emitter_copy_buffer@@Base+0x2224>
   1f1a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f1a8:	b	1f308 <flatcc_emitter_copy_buffer@@Base+0x2380>
   1f1ac:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f1b0:	str	r3, [fp, #-16]
   1f1b4:	ldr	r3, [fp, #-16]
   1f1b8:	ldr	r4, [r3]
   1f1bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f1c0:	str	r3, [fp, #-24]	; 0xffffffe8
   1f1c4:	sub	r2, fp, #40	; 0x28
   1f1c8:	sub	r3, fp, #44	; 0x2c
   1f1cc:	str	r3, [sp, #4]
   1f1d0:	sub	r3, fp, #36	; 0x24
   1f1d4:	str	r3, [sp]
   1f1d8:	mov	r3, r2
   1f1dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f1e0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f1e4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f1e8:	blx	r4
   1f1ec:	str	r0, [fp, #-52]	; 0xffffffcc
   1f1f0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f1f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f1f8:	cmp	r2, r3
   1f1fc:	bne	1f208 <flatcc_emitter_copy_buffer@@Base+0x2280>
   1f200:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f204:	b	1f308 <flatcc_emitter_copy_buffer@@Base+0x2380>
   1f208:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f20c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f210:	cmp	r2, r3
   1f214:	bne	1f234 <flatcc_emitter_copy_buffer@@Base+0x22ac>
   1f218:	ldr	r3, [fp, #-16]
   1f21c:	add	r3, r3, #4
   1f220:	str	r3, [fp, #-16]
   1f224:	ldr	r3, [fp, #-16]
   1f228:	ldr	r3, [r3]
   1f22c:	cmp	r3, #0
   1f230:	bne	1f1b4 <flatcc_emitter_copy_buffer@@Base+0x222c>
   1f234:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f238:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f23c:	cmp	r2, r3
   1f240:	bne	1f260 <flatcc_emitter_copy_buffer@@Base+0x22d8>
   1f244:	mov	r3, #23
   1f248:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f24c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f250:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f254:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1f258:	mov	r3, r0
   1f25c:	b	1f308 <flatcc_emitter_copy_buffer@@Base+0x2380>
   1f260:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f264:	add	r2, r3, #1
   1f268:	str	r2, [fp, #-20]	; 0xffffffec
   1f26c:	cmp	r3, #0
   1f270:	beq	1f2a0 <flatcc_emitter_copy_buffer@@Base+0x2318>
   1f274:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f278:	ldr	r3, [r3, #12]
   1f27c:	cmp	r3, #0
   1f280:	beq	1f2a0 <flatcc_emitter_copy_buffer@@Base+0x2318>
   1f284:	mov	r3, #14
   1f288:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f28c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f290:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f294:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1f298:	mov	r3, r0
   1f29c:	b	1f308 <flatcc_emitter_copy_buffer@@Base+0x2380>
   1f2a0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f2a4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1f2a8:	sub	r1, fp, #28
   1f2ac:	str	r1, [sp, #8]
   1f2b0:	strd	r2, [sp]
   1f2b4:	mov	r3, r0
   1f2b8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f2bc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1f2c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f2c4:	bl	1df40 <flatcc_emitter_copy_buffer@@Base+0xfb8>
   1f2c8:	mov	r2, r0
   1f2cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f2d0:	cmp	r2, r3
   1f2d4:	bne	1f2e0 <flatcc_emitter_copy_buffer@@Base+0x2358>
   1f2d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f2dc:	b	1f308 <flatcc_emitter_copy_buffer@@Base+0x2380>
   1f2e0:	ldr	r3, [fp, #4]
   1f2e4:	vldr	s14, [r3]
   1f2e8:	vldr	s15, [fp, #-28]	; 0xffffffe4
   1f2ec:	vadd.f32	s15, s14, s15
   1f2f0:	ldr	r3, [fp, #4]
   1f2f4:	vstr	s15, [r3]
   1f2f8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1f2fc:	cmp	r3, #0
   1f300:	bne	1f1ac <flatcc_emitter_copy_buffer@@Base+0x2224>
   1f304:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f308:	mov	r0, r3
   1f30c:	sub	sp, fp, #8
   1f310:	pop	{r4, fp, pc}
   1f314:	push	{r4, fp, lr}
   1f318:	add	fp, sp, #8
   1f31c:	sub	sp, sp, #76	; 0x4c
   1f320:	str	r0, [fp, #-56]	; 0xffffffc8
   1f324:	str	r1, [fp, #-60]	; 0xffffffc4
   1f328:	str	r2, [fp, #-64]	; 0xffffffc0
   1f32c:	str	r3, [fp, #-68]	; 0xffffffbc
   1f330:	mov	r2, #0
   1f334:	mov	r3, #0
   1f338:	strd	r2, [fp, #-36]	; 0xffffffdc
   1f33c:	mov	r3, #0
   1f340:	str	r3, [fp, #-20]	; 0xffffffec
   1f344:	ldr	r1, [fp, #4]
   1f348:	mov	r2, #0
   1f34c:	mov	r3, #0
   1f350:	strd	r2, [r1]
   1f354:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f358:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f35c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f360:	bl	1d5a8 <flatcc_emitter_copy_buffer@@Base+0x620>
   1f364:	str	r0, [fp, #-60]	; 0xffffffc4
   1f368:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1f36c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1f370:	cmp	r2, r3
   1f374:	bne	1f380 <flatcc_emitter_copy_buffer@@Base+0x23f8>
   1f378:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f37c:	b	1f4dc <flatcc_emitter_copy_buffer@@Base+0x2554>
   1f380:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1f384:	str	r3, [fp, #-16]
   1f388:	ldr	r3, [fp, #-16]
   1f38c:	ldr	r4, [r3]
   1f390:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f394:	str	r3, [fp, #-24]	; 0xffffffe8
   1f398:	sub	r2, fp, #48	; 0x30
   1f39c:	sub	r3, fp, #52	; 0x34
   1f3a0:	str	r3, [sp, #4]
   1f3a4:	sub	r3, fp, #44	; 0x2c
   1f3a8:	str	r3, [sp]
   1f3ac:	mov	r3, r2
   1f3b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f3b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1f3b8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f3bc:	blx	r4
   1f3c0:	str	r0, [fp, #-60]	; 0xffffffc4
   1f3c4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1f3c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1f3cc:	cmp	r2, r3
   1f3d0:	bne	1f3dc <flatcc_emitter_copy_buffer@@Base+0x2454>
   1f3d4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f3d8:	b	1f4dc <flatcc_emitter_copy_buffer@@Base+0x2554>
   1f3dc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1f3e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f3e4:	cmp	r2, r3
   1f3e8:	bne	1f408 <flatcc_emitter_copy_buffer@@Base+0x2480>
   1f3ec:	ldr	r3, [fp, #-16]
   1f3f0:	add	r3, r3, #4
   1f3f4:	str	r3, [fp, #-16]
   1f3f8:	ldr	r3, [fp, #-16]
   1f3fc:	ldr	r3, [r3]
   1f400:	cmp	r3, #0
   1f404:	bne	1f388 <flatcc_emitter_copy_buffer@@Base+0x2400>
   1f408:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1f40c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f410:	cmp	r2, r3
   1f414:	bne	1f434 <flatcc_emitter_copy_buffer@@Base+0x24ac>
   1f418:	mov	r3, #23
   1f41c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f420:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f424:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f428:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1f42c:	mov	r3, r0
   1f430:	b	1f4dc <flatcc_emitter_copy_buffer@@Base+0x2554>
   1f434:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f438:	add	r2, r3, #1
   1f43c:	str	r2, [fp, #-20]	; 0xffffffec
   1f440:	cmp	r3, #0
   1f444:	beq	1f474 <flatcc_emitter_copy_buffer@@Base+0x24ec>
   1f448:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f44c:	ldr	r3, [r3, #12]
   1f450:	cmp	r3, #0
   1f454:	beq	1f474 <flatcc_emitter_copy_buffer@@Base+0x24ec>
   1f458:	mov	r3, #14
   1f45c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f460:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f464:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f468:	bl	222fc <flatcc_json_parser_set_error@@Base>
   1f46c:	mov	r3, r0
   1f470:	b	1f4dc <flatcc_emitter_copy_buffer@@Base+0x2554>
   1f474:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1f478:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1f47c:	sub	r1, fp, #36	; 0x24
   1f480:	str	r1, [sp, #8]
   1f484:	strd	r2, [sp]
   1f488:	mov	r3, r0
   1f48c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f490:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1f494:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f498:	bl	1dfa0 <flatcc_emitter_copy_buffer@@Base+0x1018>
   1f49c:	mov	r2, r0
   1f4a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1f4a4:	cmp	r2, r3
   1f4a8:	bne	1f4b4 <flatcc_emitter_copy_buffer@@Base+0x252c>
   1f4ac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1f4b0:	b	1f4dc <flatcc_emitter_copy_buffer@@Base+0x2554>
   1f4b4:	ldr	r3, [fp, #4]
   1f4b8:	vldr	d6, [r3]
   1f4bc:	vldr	d7, [fp, #-36]	; 0xffffffdc
   1f4c0:	vadd.f64	d7, d6, d7
   1f4c4:	ldr	r3, [fp, #4]
   1f4c8:	vstr	d7, [r3]
   1f4cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f4d0:	cmp	r3, #0
   1f4d4:	bne	1f380 <flatcc_emitter_copy_buffer@@Base+0x23f8>
   1f4d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f4dc:	mov	r0, r3
   1f4e0:	sub	sp, fp, #8
   1f4e4:	pop	{r4, fp, pc}
   1f4e8:	push	{fp}		; (str fp, [sp, #-4]!)
   1f4ec:	add	fp, sp, #0
   1f4f0:	sub	sp, sp, #20
   1f4f4:	vstr	d0, [fp, #-20]	; 0xffffffec
   1f4f8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1f4fc:	strd	r2, [fp, #-12]
   1f500:	ldrd	r2, [fp, #-12]
   1f504:	mov	r0, r2
   1f508:	mov	r1, r3
   1f50c:	add	sp, fp, #0
   1f510:	pop	{fp}		; (ldr fp, [sp], #4)
   1f514:	bx	lr
   1f518:	push	{fp}		; (str fp, [sp, #-4]!)
   1f51c:	add	fp, sp, #0
   1f520:	sub	sp, sp, #20
   1f524:	strd	r0, [fp, #-20]	; 0xffffffec
   1f528:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1f52c:	strd	r2, [fp, #-12]
   1f530:	ldrd	r2, [fp, #-12]
   1f534:	vmov	d7, r2, r3
   1f538:	vmov.f64	d0, d7
   1f53c:	add	sp, fp, #0
   1f540:	pop	{fp}		; (ldr fp, [sp], #4)
   1f544:	bx	lr
   1f548:	push	{fp}		; (str fp, [sp, #-4]!)
   1f54c:	add	fp, sp, #0
   1f550:	sub	sp, sp, #20
   1f554:	vstr	d0, [fp, #-20]	; 0xffffffec
   1f558:	vldr	d7, [fp, #-20]	; 0xffffffec
   1f55c:	vcvt.s32.f64	s15, d7
   1f560:	vmov	r3, s15
   1f564:	str	r3, [fp, #-8]
   1f568:	vldr	d7, [fp, #-20]	; 0xffffffec
   1f56c:	vcmpe.f64	d7, #0.0
   1f570:	vmrs	APSR_nzcv, fpscr
   1f574:	bpl	1f580 <flatcc_emitter_copy_buffer@@Base+0x25f8>
   1f578:	ldr	r3, [fp, #-8]
   1f57c:	b	1f5b0 <flatcc_emitter_copy_buffer@@Base+0x2628>
   1f580:	ldr	r3, [fp, #-8]
   1f584:	vmov	s15, r3
   1f588:	vcvt.f64.s32	d7, s15
   1f58c:	vldr	d6, [fp, #-20]	; 0xffffffec
   1f590:	vsub.f64	d7, d6, d7
   1f594:	vcmp.f64	d7, #0.0
   1f598:	vmrs	APSR_nzcv, fpscr
   1f59c:	beq	1f5ac <flatcc_emitter_copy_buffer@@Base+0x2624>
   1f5a0:	ldr	r3, [fp, #-8]
   1f5a4:	add	r3, r3, #1
   1f5a8:	b	1f5b0 <flatcc_emitter_copy_buffer@@Base+0x2628>
   1f5ac:	ldr	r3, [fp, #-8]
   1f5b0:	mov	r0, r3
   1f5b4:	add	sp, fp, #0
   1f5b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1f5bc:	bx	lr
   1f5c0:	push	{fp, lr}
   1f5c4:	add	fp, sp, #4
   1f5c8:	sub	sp, sp, #16
   1f5cc:	str	r0, [fp, #-16]
   1f5d0:	str	r1, [fp, #-20]	; 0xffffffec
   1f5d4:	ldr	r3, [fp, #-16]
   1f5d8:	add	r3, r3, #63	; 0x3f
   1f5dc:	vmov	s15, r3
   1f5e0:	vcvt.f64.s32	d7, s15
   1f5e4:	vldr	d6, [pc, #164]	; 1f690 <flatcc_emitter_copy_buffer@@Base+0x2708>
   1f5e8:	vmul.f64	d7, d7, d6
   1f5ec:	vmov.f64	d0, d7
   1f5f0:	bl	1f548 <flatcc_emitter_copy_buffer@@Base+0x25c0>
   1f5f4:	str	r0, [fp, #-8]
   1f5f8:	ldr	r3, [fp, #-8]
   1f5fc:	add	r3, r3, #344	; 0x158
   1f600:	add	r3, r3, #3
   1f604:	add	r2, r3, #7
   1f608:	cmp	r3, #0
   1f60c:	movlt	r3, r2
   1f610:	movge	r3, r3
   1f614:	asr	r3, r3, #3
   1f618:	add	r3, r3, #1
   1f61c:	str	r3, [fp, #-12]
   1f620:	ldr	r2, [pc, #112]	; 1f698 <flatcc_emitter_copy_buffer@@Base+0x2710>
   1f624:	add	r2, pc, r2
   1f628:	ldr	r3, [fp, #-12]
   1f62c:	lsl	r3, r3, #4
   1f630:	add	r3, r2, r3
   1f634:	ldrd	r2, [r3]
   1f638:	ldr	r1, [fp, #-20]	; 0xffffffec
   1f63c:	strd	r2, [r1]
   1f640:	ldr	r2, [pc, #84]	; 1f69c <flatcc_emitter_copy_buffer@@Base+0x2714>
   1f644:	add	r2, pc, r2
   1f648:	ldr	r3, [fp, #-12]
   1f64c:	lsl	r3, r3, #4
   1f650:	add	r3, r2, r3
   1f654:	add	r3, r3, #8
   1f658:	ldrsh	r3, [r3]
   1f65c:	mov	r2, r3
   1f660:	ldr	r3, [fp, #-20]	; 0xffffffec
   1f664:	str	r2, [r3, #8]
   1f668:	ldr	r2, [pc, #48]	; 1f6a0 <flatcc_emitter_copy_buffer@@Base+0x2718>
   1f66c:	add	r2, pc, r2
   1f670:	ldr	r3, [fp, #-12]
   1f674:	lsl	r3, r3, #4
   1f678:	add	r3, r2, r3
   1f67c:	add	r3, r3, #10
   1f680:	ldrsh	r3, [r3]
   1f684:	mov	r0, r3
   1f688:	sub	sp, fp, #4
   1f68c:	pop	{fp, pc}
   1f690:			; <UNDEFINED> instruction: 0x509f79fe
   1f694:	svccc	0x00d34413
   1f698:	andeq	r7, r0, r4, asr #13
   1f69c:	andeq	r7, r0, r4, lsr #13
   1f6a0:	andeq	r7, r0, ip, ror r6
   1f6a4:	sub	sp, sp, #8
   1f6a8:	push	{fp, lr}
   1f6ac:	add	fp, sp, #4
   1f6b0:	sub	sp, sp, #24
   1f6b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1f6b8:	add	r1, fp, #4
   1f6bc:	stm	r1, {r2, r3}
   1f6c0:	ldrd	r0, [fp, #4]
   1f6c4:	ldrd	r2, [fp, #20]
   1f6c8:	subs	r2, r0, r2
   1f6cc:	sbc	r3, r1, r3
   1f6d0:	strd	r2, [fp, #-20]	; 0xffffffec
   1f6d4:	ldr	r3, [fp, #12]
   1f6d8:	str	r3, [fp, #-12]
   1f6dc:	ldr	r2, [fp, #12]
   1f6e0:	ldr	r3, [fp, #28]
   1f6e4:	cmp	r2, r3
   1f6e8:	bne	1f700 <flatcc_emitter_copy_buffer@@Base+0x2778>
   1f6ec:	ldrd	r0, [fp, #4]
   1f6f0:	ldrd	r2, [fp, #20]
   1f6f4:	cmp	r1, r3
   1f6f8:	cmpeq	r0, r2
   1f6fc:	bcs	1f720 <flatcc_emitter_copy_buffer@@Base+0x2798>
   1f700:	ldr	r3, [pc, #64]	; 1f748 <flatcc_emitter_copy_buffer@@Base+0x27c0>
   1f704:	add	r3, pc, r3
   1f708:	mov	r2, #239	; 0xef
   1f70c:	ldr	r1, [pc, #56]	; 1f74c <flatcc_emitter_copy_buffer@@Base+0x27c4>
   1f710:	add	r1, pc, r1
   1f714:	ldr	r0, [pc, #52]	; 1f750 <flatcc_emitter_copy_buffer@@Base+0x27c8>
   1f718:	add	r0, pc, r0
   1f71c:	bl	12504 <__assert_fail@plt>
   1f720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1f724:	mov	ip, r3
   1f728:	sub	r3, fp, #20
   1f72c:	ldm	r3, {r0, r1, r2, r3}
   1f730:	stm	ip, {r0, r1, r2, r3}
   1f734:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1f738:	sub	sp, fp, #4
   1f73c:	pop	{fp, lr}
   1f740:	add	sp, sp, #8
   1f744:	bx	lr
   1f748:	andeq	r8, r0, ip, asr #2
   1f74c:	andeq	r7, r0, r8, asr #22
   1f750:			; <UNDEFINED> instruction: 0x00007bb0
   1f754:	sub	sp, sp, #8
   1f758:	push	{r4, r5, r6, r7, r8, r9, fp}
   1f75c:	add	fp, sp, #24
   1f760:	sub	sp, sp, #124	; 0x7c
   1f764:	str	r0, [fp, #-120]	; 0xffffff88
   1f768:	add	r1, fp, #4
   1f76c:	stm	r1, {r2, r3}
   1f770:	ldrd	r2, [fp, #4]
   1f774:	mov	r4, r3
   1f778:	mov	r5, #0
   1f77c:	strd	r4, [fp, #-36]	; 0xffffffdc
   1f780:	ldrd	r2, [fp, #4]
   1f784:	mvn	r0, #0
   1f788:	mov	r1, #0
   1f78c:	and	r2, r2, r0
   1f790:	and	r3, r3, r1
   1f794:	strd	r2, [fp, #-44]	; 0xffffffd4
   1f798:	ldrd	r2, [fp, #20]
   1f79c:	mov	r3, r3
   1f7a0:	str	r3, [fp, #-148]	; 0xffffff6c
   1f7a4:	mov	r3, #0
   1f7a8:	str	r3, [fp, #-144]	; 0xffffff70
   1f7ac:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   1f7b0:	strd	r2, [fp, #-52]	; 0xffffffcc
   1f7b4:	ldrd	r2, [fp, #20]
   1f7b8:	mvn	r0, #0
   1f7bc:	mov	r1, #0
   1f7c0:	and	r2, r2, r0
   1f7c4:	and	r3, r3, r1
   1f7c8:	strd	r2, [fp, #-60]	; 0xffffffc4
   1f7cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1f7d0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f7d4:	mul	r2, r2, r3
   1f7d8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f7dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f7e0:	mul	r3, r1, r3
   1f7e4:	add	r1, r2, r3
   1f7e8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1f7ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f7f0:	umull	r2, r3, r2, r3
   1f7f4:	add	r1, r1, r3
   1f7f8:	mov	r3, r1
   1f7fc:	strd	r2, [fp, #-68]	; 0xffffffbc
   1f800:	strd	r2, [fp, #-68]	; 0xffffffbc
   1f804:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f808:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1f80c:	mul	r2, r2, r3
   1f810:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1f814:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1f818:	mul	r3, r1, r3
   1f81c:	add	r1, r2, r3
   1f820:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1f824:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1f828:	umull	r2, r3, r2, r3
   1f82c:	add	r1, r1, r3
   1f830:	mov	r3, r1
   1f834:	strd	r2, [fp, #-76]	; 0xffffffb4
   1f838:	strd	r2, [fp, #-76]	; 0xffffffb4
   1f83c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1f840:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1f844:	mul	r2, r2, r3
   1f848:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f84c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1f850:	mul	r3, r1, r3
   1f854:	add	r1, r2, r3
   1f858:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1f85c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f860:	umull	r2, r3, r2, r3
   1f864:	add	r1, r1, r3
   1f868:	mov	r3, r1
   1f86c:	strd	r2, [fp, #-84]	; 0xffffffac
   1f870:	strd	r2, [fp, #-84]	; 0xffffffac
   1f874:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1f878:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1f87c:	mul	r2, r2, r3
   1f880:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1f884:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1f888:	mul	r3, r1, r3
   1f88c:	add	r1, r2, r3
   1f890:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1f894:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1f898:	umull	r2, r3, r2, r3
   1f89c:	add	r1, r1, r3
   1f8a0:	mov	r3, r1
   1f8a4:	strd	r2, [fp, #-92]	; 0xffffffa4
   1f8a8:	strd	r2, [fp, #-92]	; 0xffffffa4
   1f8ac:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   1f8b0:	mov	r3, r3
   1f8b4:	str	r3, [fp, #-132]	; 0xffffff7c
   1f8b8:	mov	r3, #0
   1f8bc:	str	r3, [fp, #-128]	; 0xffffff80
   1f8c0:	ldrd	r2, [fp, #-84]	; 0xffffffac
   1f8c4:	mvn	r0, #0
   1f8c8:	mov	r1, #0
   1f8cc:	and	r2, r2, r0
   1f8d0:	and	r3, r3, r1
   1f8d4:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1f8d8:	adds	r0, r0, r2
   1f8dc:	adc	r1, r1, r3
   1f8e0:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1f8e4:	mvn	r4, #0
   1f8e8:	mov	r5, #0
   1f8ec:	and	r2, r2, r4
   1f8f0:	and	r3, r3, r5
   1f8f4:	adds	r2, r2, r0
   1f8f8:	adc	r3, r3, r1
   1f8fc:	strd	r2, [fp, #-100]	; 0xffffff9c
   1f900:	ldrd	r2, [fp, #-100]	; 0xffffff9c
   1f904:	adds	r2, r2, #-2147483648	; 0x80000000
   1f908:	adc	r3, r3, #0
   1f90c:	strd	r2, [fp, #-100]	; 0xffffff9c
   1f910:	ldrd	r2, [fp, #-84]	; 0xffffffac
   1f914:	mov	r3, r3
   1f918:	str	r3, [fp, #-140]	; 0xffffff74
   1f91c:	mov	r3, #0
   1f920:	str	r3, [fp, #-136]	; 0xffffff78
   1f924:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   1f928:	ldrd	r0, [fp, #-140]	; 0xffffff74
   1f92c:	adds	r0, r0, r2
   1f930:	adc	r1, r1, r3
   1f934:	mov	r2, r0
   1f938:	mov	r3, r1
   1f93c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1f940:	mov	r8, r1
   1f944:	mov	r9, #0
   1f948:	adds	r2, r2, r8
   1f94c:	adc	r3, r3, r9
   1f950:	ldrd	r0, [fp, #-100]	; 0xffffff9c
   1f954:	mov	r6, r1
   1f958:	mov	r7, #0
   1f95c:	adds	r2, r2, r6
   1f960:	adc	r3, r3, r7
   1f964:	strd	r2, [fp, #-116]	; 0xffffff8c
   1f968:	ldr	r2, [fp, #12]
   1f96c:	ldr	r3, [fp, #28]
   1f970:	add	r3, r2, r3
   1f974:	add	r3, r3, #64	; 0x40
   1f978:	str	r3, [fp, #-108]	; 0xffffff94
   1f97c:	ldr	r3, [fp, #-120]	; 0xffffff88
   1f980:	mov	ip, r3
   1f984:	sub	r3, fp, #116	; 0x74
   1f988:	ldm	r3, {r0, r1, r2, r3}
   1f98c:	stm	ip, {r0, r1, r2, r3}
   1f990:	ldr	r0, [fp, #-120]	; 0xffffff88
   1f994:	sub	sp, fp, #24
   1f998:	pop	{r4, r5, r6, r7, r8, r9, fp}
   1f99c:	add	sp, sp, #8
   1f9a0:	bx	lr
   1f9a4:	sub	sp, sp, #8
   1f9a8:	push	{r4, r5, fp, lr}
   1f9ac:	add	fp, sp, #12
   1f9b0:	sub	sp, sp, #8
   1f9b4:	str	r0, [fp, #-16]
   1f9b8:	add	r1, fp, #4
   1f9bc:	stm	r1, {r2, r3}
   1f9c0:	ldrd	r2, [fp, #4]
   1f9c4:	orrs	r3, r2, r3
   1f9c8:	bne	1fa0c <flatcc_emitter_copy_buffer@@Base+0x2a84>
   1f9cc:	ldr	r3, [pc, #172]	; 1fa80 <flatcc_emitter_copy_buffer@@Base+0x2af8>
   1f9d0:	add	r3, pc, r3
   1f9d4:	mov	r2, #260	; 0x104
   1f9d8:	ldr	r1, [pc, #164]	; 1fa84 <flatcc_emitter_copy_buffer@@Base+0x2afc>
   1f9dc:	add	r1, pc, r1
   1f9e0:	ldr	r0, [pc, #160]	; 1fa88 <flatcc_emitter_copy_buffer@@Base+0x2b00>
   1f9e4:	add	r0, pc, r0
   1f9e8:	bl	12504 <__assert_fail@plt>
   1f9ec:	ldrd	r2, [fp, #4]
   1f9f0:	lsl	r5, r3, #10
   1f9f4:	orr	r5, r5, r2, lsr #22
   1f9f8:	lsl	r4, r2, #10
   1f9fc:	strd	r4, [fp, #4]
   1fa00:	ldr	r3, [fp, #12]
   1fa04:	sub	r3, r3, #10
   1fa08:	str	r3, [fp, #12]
   1fa0c:	ldrd	r2, [fp, #4]
   1fa10:	mov	r0, #0
   1fa14:	ldr	r1, [pc, #112]	; 1fa8c <flatcc_emitter_copy_buffer@@Base+0x2b04>
   1fa18:	and	r2, r2, r0
   1fa1c:	and	r3, r3, r1
   1fa20:	orrs	r3, r2, r3
   1fa24:	beq	1f9ec <flatcc_emitter_copy_buffer@@Base+0x2a64>
   1fa28:	b	1fa48 <flatcc_emitter_copy_buffer@@Base+0x2ac0>
   1fa2c:	ldrd	r2, [fp, #4]
   1fa30:	adds	r2, r2, r2
   1fa34:	adc	r3, r3, r3
   1fa38:	strd	r2, [fp, #4]
   1fa3c:	ldr	r3, [fp, #12]
   1fa40:	sub	r3, r3, #1
   1fa44:	str	r3, [fp, #12]
   1fa48:	ldrd	r2, [fp, #4]
   1fa4c:	cmp	r2, #0
   1fa50:	sbcs	r3, r3, #0
   1fa54:	bge	1fa2c <flatcc_emitter_copy_buffer@@Base+0x2aa4>
   1fa58:	ldr	r3, [fp, #-16]
   1fa5c:	mov	ip, r3
   1fa60:	add	r3, fp, #4
   1fa64:	ldm	r3, {r0, r1, r2, r3}
   1fa68:	stm	ip, {r0, r1, r2, r3}
   1fa6c:	ldr	r0, [fp, #-16]
   1fa70:	sub	sp, fp, #12
   1fa74:	pop	{r4, r5, fp, lr}
   1fa78:	add	sp, sp, #8
   1fa7c:	bx	lr
   1fa80:	muleq	r0, r4, lr
   1fa84:	andeq	r7, r0, ip, ror r8
   1fa88:	andeq	r7, r0, r0, lsl #18
   1fa8c:			; <UNDEFINED> instruction: 0xffc00000
   1fa90:	push	{r4, r5, fp, lr}
   1fa94:	add	fp, sp, #12
   1fa98:	sub	sp, sp, #40	; 0x28
   1fa9c:	str	r0, [fp, #-40]	; 0xffffffd8
   1faa0:	vstr	d0, [fp, #-52]	; 0xffffffcc
   1faa4:	vldr	d0, [fp, #-52]	; 0xffffffcc
   1faa8:	bl	1f4e8 <flatcc_emitter_copy_buffer@@Base+0x2560>
   1faac:	strd	r0, [fp, #-20]	; 0xffffffec
   1fab0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1fab4:	mov	r0, #0
   1fab8:	ldr	r1, [pc, #148]	; 1fb54 <flatcc_emitter_copy_buffer@@Base+0x2bcc>
   1fabc:	and	r2, r2, r0
   1fac0:	and	r3, r3, r1
   1fac4:	orrs	r3, r2, r3
   1fac8:	bne	1faf0 <flatcc_emitter_copy_buffer@@Base+0x2b68>
   1facc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1fad0:	mvn	r0, #0
   1fad4:	ldr	r1, [pc, #124]	; 1fb58 <flatcc_emitter_copy_buffer@@Base+0x2bd0>
   1fad8:	and	r2, r2, r0
   1fadc:	and	r3, r3, r1
   1fae0:	strd	r2, [fp, #-36]	; 0xffffffdc
   1fae4:	ldr	r3, [pc, #112]	; 1fb5c <flatcc_emitter_copy_buffer@@Base+0x2bd4>
   1fae8:	str	r3, [fp, #-28]	; 0xffffffe4
   1faec:	b	1fb34 <flatcc_emitter_copy_buffer@@Base+0x2bac>
   1faf0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1faf4:	mvn	r0, #0
   1faf8:	ldr	r1, [pc, #88]	; 1fb58 <flatcc_emitter_copy_buffer@@Base+0x2bd0>
   1fafc:	and	r2, r2, r0
   1fb00:	and	r3, r3, r1
   1fb04:	adds	r2, r2, #0
   1fb08:	adc	r3, r3, #1048576	; 0x100000
   1fb0c:	strd	r2, [fp, #-36]	; 0xffffffdc
   1fb10:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1fb14:	lsr	r4, r3, #20
   1fb18:	mov	r5, #0
   1fb1c:	mov	r3, r4
   1fb20:	lsl	r3, r3, #21
   1fb24:	lsr	r3, r3, #21
   1fb28:	sub	r3, r3, #1072	; 0x430
   1fb2c:	sub	r3, r3, #3
   1fb30:	str	r3, [fp, #-28]	; 0xffffffe4
   1fb34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1fb38:	mov	ip, r3
   1fb3c:	sub	r3, fp, #36	; 0x24
   1fb40:	ldm	r3, {r0, r1, r2, r3}
   1fb44:	stm	ip, {r0, r1, r2, r3}
   1fb48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1fb4c:	sub	sp, fp, #12
   1fb50:	pop	{r4, r5, fp, pc}
   1fb54:	svcvc	0x00f00000	; IMB
   1fb58:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1fb5c:			; <UNDEFINED> instruction: 0xfffffbce
   1fb60:	push	{r4, r5, r6, r7, fp, lr}
   1fb64:	add	fp, sp, #20
   1fb68:	sub	sp, sp, #72	; 0x48
   1fb6c:	sub	ip, fp, #92	; 0x5c
   1fb70:	stm	ip, {r0, r1, r2, r3}
   1fb74:	mov	r2, #0
   1fb78:	mov	r3, #1048576	; 0x100000
   1fb7c:	strd	r2, [fp, #-36]	; 0xffffffdc
   1fb80:	mvn	r2, #0
   1fb84:	ldr	r3, [pc, #372]	; 1fd00 <flatcc_emitter_copy_buffer@@Base+0x2d78>
   1fb88:	strd	r2, [fp, #-44]	; 0xffffffd4
   1fb8c:	ldr	r3, [pc, #368]	; 1fd04 <flatcc_emitter_copy_buffer@@Base+0x2d7c>
   1fb90:	str	r3, [fp, #-48]	; 0xffffffd0
   1fb94:	ldr	r3, [pc, #364]	; 1fd08 <flatcc_emitter_copy_buffer@@Base+0x2d80>
   1fb98:	str	r3, [fp, #-52]	; 0xffffffcc
   1fb9c:	mov	r3, #52	; 0x34
   1fba0:	str	r3, [fp, #-56]	; 0xffffffc8
   1fba4:	sub	ip, fp, #76	; 0x4c
   1fba8:	sub	r3, fp, #92	; 0x5c
   1fbac:	ldm	r3, {r0, r1, r2, r3}
   1fbb0:	stm	ip, {r0, r1, r2, r3}
   1fbb4:	b	1fbd4 <flatcc_emitter_copy_buffer@@Base+0x2c4c>
   1fbb8:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1fbbc:	lsrs	r3, r3, #1
   1fbc0:	rrx	r2, r2
   1fbc4:	strd	r2, [fp, #-76]	; 0xffffffb4
   1fbc8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1fbcc:	add	r3, r3, #1
   1fbd0:	str	r3, [fp, #-68]	; 0xffffffbc
   1fbd4:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1fbd8:	ldrd	r6, [fp, #-36]	; 0xffffffdc
   1fbdc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1fbe0:	adds	r2, r2, r6
   1fbe4:	adc	r3, r3, r7
   1fbe8:	cmp	r1, r3
   1fbec:	cmpeq	r0, r2
   1fbf0:	bhi	1fbb8 <flatcc_emitter_copy_buffer@@Base+0x2c30>
   1fbf4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fbf8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fbfc:	cmp	r2, r3
   1fc00:	bge	1fc28 <flatcc_emitter_copy_buffer@@Base+0x2ca0>
   1fc04:	vldr	d7, [pc, #236]	; 1fcf8 <flatcc_emitter_copy_buffer@@Base+0x2d70>
   1fc08:	b	1fce8 <flatcc_emitter_copy_buffer@@Base+0x2d60>
   1fc0c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   1fc10:	adds	r2, r2, r2
   1fc14:	adc	r3, r3, r3
   1fc18:	strd	r2, [fp, #-76]	; 0xffffffb4
   1fc1c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1fc20:	sub	r3, r3, #1
   1fc24:	str	r3, [fp, #-68]	; 0xffffffbc
   1fc28:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fc2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fc30:	cmp	r2, r3
   1fc34:	ble	1fc50 <flatcc_emitter_copy_buffer@@Base+0x2cc8>
   1fc38:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1fc3c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1fc40:	and	r2, r2, r0
   1fc44:	and	r3, r3, r1
   1fc48:	orrs	r3, r2, r3
   1fc4c:	beq	1fc0c <flatcc_emitter_copy_buffer@@Base+0x2c84>
   1fc50:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fc54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1fc58:	cmp	r2, r3
   1fc5c:	bne	1fc88 <flatcc_emitter_copy_buffer@@Base+0x2d00>
   1fc60:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1fc64:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1fc68:	and	r2, r2, r0
   1fc6c:	and	r3, r3, r1
   1fc70:	orrs	r3, r2, r3
   1fc74:	bne	1fc88 <flatcc_emitter_copy_buffer@@Base+0x2d00>
   1fc78:	mov	r2, #0
   1fc7c:	mov	r3, #0
   1fc80:	strd	r2, [fp, #-28]	; 0xffffffe4
   1fc84:	b	1fca0 <flatcc_emitter_copy_buffer@@Base+0x2d18>
   1fc88:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1fc8c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1fc90:	add	r3, r2, r3
   1fc94:	mov	r2, r3
   1fc98:	asr	r3, r2, #31
   1fc9c:	strd	r2, [fp, #-28]	; 0xffffffe4
   1fca0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   1fca4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1fca8:	and	r6, r0, r2
   1fcac:	and	r7, r1, r3
   1fcb0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1fcb4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1fcb8:	sub	ip, r1, #32
   1fcbc:	rsb	r0, r1, #32
   1fcc0:	lsl	r5, r3, r1
   1fcc4:	orr	r5, r5, r2, lsl ip
   1fcc8:	orr	r5, r5, r2, lsr r0
   1fccc:	lsl	r4, r2, r1
   1fcd0:	orr	r2, r6, r4
   1fcd4:	orr	r3, r7, r5
   1fcd8:	mov	r0, r2
   1fcdc:	mov	r1, r3
   1fce0:	bl	1f518 <flatcc_emitter_copy_buffer@@Base+0x2590>
   1fce4:	vmov.f64	d7, d0
   1fce8:	vmov.f64	d0, d7
   1fcec:	sub	sp, fp, #20
   1fcf0:	pop	{r4, r5, r6, r7, fp, pc}
   1fcf4:	nop			; (mov r0, r0)
	...
   1fd00:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1fd04:			; <UNDEFINED> instruction: 0xfffffbce
   1fd08:	andeq	r0, r0, r3, lsr r4
   1fd0c:	push	{fp}		; (str fp, [sp, #-4]!)
   1fd10:	add	fp, sp, #0
   1fd14:	sub	sp, sp, #28
   1fd18:	str	r0, [fp, #-16]
   1fd1c:	str	r1, [fp, #-20]	; 0xffffffec
   1fd20:	str	r2, [fp, #-24]	; 0xffffffe8
   1fd24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1fd28:	add	r2, r3, #1
   1fd2c:	mov	r3, r2
   1fd30:	lsl	r3, r3, #4
   1fd34:	add	r3, r3, r2
   1fd38:	lsl	r3, r3, #3
   1fd3c:	add	r3, r3, r2
   1fd40:	lsl	r2, r3, #3
   1fd44:	add	r3, r3, r2
   1fd48:	asr	r3, r3, #12
   1fd4c:	add	r3, r3, #1
   1fd50:	str	r3, [fp, #-8]
   1fd54:	ldr	r3, [pc, #76]	; 1fda8 <flatcc_emitter_copy_buffer@@Base+0x2e20>
   1fd58:	add	r3, pc, r3
   1fd5c:	ldr	r2, [fp, #-8]
   1fd60:	ldr	r2, [r3, r2, lsl #2]
   1fd64:	ldr	r3, [fp, #-16]
   1fd68:	cmp	r2, r3
   1fd6c:	bls	1fd7c <flatcc_emitter_copy_buffer@@Base+0x2df4>
   1fd70:	ldr	r3, [fp, #-8]
   1fd74:	sub	r3, r3, #1
   1fd78:	str	r3, [fp, #-8]
   1fd7c:	ldr	r3, [pc, #40]	; 1fdac <flatcc_emitter_copy_buffer@@Base+0x2e24>
   1fd80:	add	r3, pc, r3
   1fd84:	ldr	r2, [fp, #-8]
   1fd88:	ldr	r2, [r3, r2, lsl #2]
   1fd8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fd90:	str	r2, [r3]
   1fd94:	ldr	r3, [fp, #-8]
   1fd98:	mov	r0, r3
   1fd9c:	add	sp, fp, #0
   1fda0:	pop	{fp}		; (ldr fp, [sp], #4)
   1fda4:	bx	lr
   1fda8:	muleq	r0, r8, r5
   1fdac:	andeq	r7, r0, r0, ror r5
   1fdb0:	push	{fp, lr}
   1fdb4:	add	fp, sp, #4
   1fdb8:	sub	sp, sp, #24
   1fdbc:	str	r0, [fp, #-24]	; 0xffffffe8
   1fdc0:	str	r1, [fp, #-28]	; 0xffffffe4
   1fdc4:	mov	r3, #348	; 0x15c
   1fdc8:	str	r3, [fp, #-8]
   1fdcc:	mov	r3, #8
   1fdd0:	str	r3, [fp, #-12]
   1fdd4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fdd8:	cmn	r3, #348	; 0x15c
   1fddc:	bge	1fe00 <flatcc_emitter_copy_buffer@@Base+0x2e78>
   1fde0:	ldr	r3, [pc, #332]	; 1ff34 <flatcc_emitter_copy_buffer@@Base+0x2fac>
   1fde4:	add	r3, pc, r3
   1fde8:	mov	r2, #80	; 0x50
   1fdec:	ldr	r1, [pc, #324]	; 1ff38 <flatcc_emitter_copy_buffer@@Base+0x2fb0>
   1fdf0:	add	r1, pc, r1
   1fdf4:	ldr	r0, [pc, #320]	; 1ff3c <flatcc_emitter_copy_buffer@@Base+0x2fb4>
   1fdf8:	add	r0, pc, r0
   1fdfc:	bl	12504 <__assert_fail@plt>
   1fe00:	ldr	r3, [fp, #-12]
   1fe04:	add	r2, r3, #340	; 0x154
   1fe08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fe0c:	cmp	r2, r3
   1fe10:	bgt	1fe34 <flatcc_emitter_copy_buffer@@Base+0x2eac>
   1fe14:	ldr	r3, [pc, #292]	; 1ff40 <flatcc_emitter_copy_buffer@@Base+0x2fb8>
   1fe18:	add	r3, pc, r3
   1fe1c:	mov	r2, #81	; 0x51
   1fe20:	ldr	r1, [pc, #284]	; 1ff44 <flatcc_emitter_copy_buffer@@Base+0x2fbc>
   1fe24:	add	r1, pc, r1
   1fe28:	ldr	r0, [pc, #280]	; 1ff48 <flatcc_emitter_copy_buffer@@Base+0x2fc0>
   1fe2c:	add	r0, pc, r0
   1fe30:	bl	12504 <__assert_fail@plt>
   1fe34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1fe38:	ldr	r3, [fp, #-8]
   1fe3c:	add	r3, r2, r3
   1fe40:	ldr	r1, [fp, #-12]
   1fe44:	mov	r0, r3
   1fe48:	bl	255a8 <flatcc_json_parser_struct_as_root@@Base+0x124>
   1fe4c:	mov	r3, r0
   1fe50:	str	r3, [fp, #-16]
   1fe54:	ldr	r2, [pc, #240]	; 1ff4c <flatcc_emitter_copy_buffer@@Base+0x2fc4>
   1fe58:	add	r2, pc, r2
   1fe5c:	ldr	r3, [fp, #-16]
   1fe60:	lsl	r3, r3, #4
   1fe64:	add	r3, r2, r3
   1fe68:	add	r3, r3, #10
   1fe6c:	ldrsh	r3, [r3]
   1fe70:	str	r3, [fp, #-20]	; 0xffffffec
   1fe74:	ldr	r2, [pc, #212]	; 1ff50 <flatcc_emitter_copy_buffer@@Base+0x2fc8>
   1fe78:	add	r2, pc, r2
   1fe7c:	ldr	r3, [fp, #-16]
   1fe80:	lsl	r3, r3, #4
   1fe84:	add	r3, r2, r3
   1fe88:	ldrd	r2, [r3]
   1fe8c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1fe90:	strd	r2, [r1]
   1fe94:	ldr	r2, [pc, #184]	; 1ff54 <flatcc_emitter_copy_buffer@@Base+0x2fcc>
   1fe98:	add	r2, pc, r2
   1fe9c:	ldr	r3, [fp, #-16]
   1fea0:	lsl	r3, r3, #4
   1fea4:	add	r3, r2, r3
   1fea8:	add	r3, r3, #8
   1feac:	ldrsh	r3, [r3]
   1feb0:	mov	r2, r3
   1feb4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1feb8:	str	r2, [r3, #8]
   1febc:	ldr	r2, [fp, #-20]	; 0xffffffec
   1fec0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fec4:	cmp	r2, r3
   1fec8:	ble	1feec <flatcc_emitter_copy_buffer@@Base+0x2f64>
   1fecc:	ldr	r3, [pc, #132]	; 1ff58 <flatcc_emitter_copy_buffer@@Base+0x2fd0>
   1fed0:	add	r3, pc, r3
   1fed4:	mov	r2, #88	; 0x58
   1fed8:	ldr	r1, [pc, #124]	; 1ff5c <flatcc_emitter_copy_buffer@@Base+0x2fd4>
   1fedc:	add	r1, pc, r1
   1fee0:	ldr	r0, [pc, #120]	; 1ff60 <flatcc_emitter_copy_buffer@@Base+0x2fd8>
   1fee4:	add	r0, pc, r0
   1fee8:	bl	12504 <__assert_fail@plt>
   1feec:	ldr	r2, [fp, #-20]	; 0xffffffec
   1fef0:	ldr	r3, [fp, #-12]
   1fef4:	add	r2, r2, r3
   1fef8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1fefc:	cmp	r2, r3
   1ff00:	bgt	1ff24 <flatcc_emitter_copy_buffer@@Base+0x2f9c>
   1ff04:	ldr	r3, [pc, #88]	; 1ff64 <flatcc_emitter_copy_buffer@@Base+0x2fdc>
   1ff08:	add	r3, pc, r3
   1ff0c:	mov	r2, #89	; 0x59
   1ff10:	ldr	r1, [pc, #80]	; 1ff68 <flatcc_emitter_copy_buffer@@Base+0x2fe0>
   1ff14:	add	r1, pc, r1
   1ff18:	ldr	r0, [pc, #76]	; 1ff6c <flatcc_emitter_copy_buffer@@Base+0x2fe4>
   1ff1c:	add	r0, pc, r0
   1ff20:	bl	12504 <__assert_fail@plt>
   1ff24:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ff28:	mov	r0, r3
   1ff2c:	sub	sp, fp, #4
   1ff30:	pop	{fp, pc}
   1ff34:	muleq	r0, r8, sl
   1ff38:	andeq	r7, r0, ip, lsr #10
   1ff3c:	muleq	r0, r4, r5
   1ff40:	andeq	r7, r0, r4, ror #20
   1ff44:	strdeq	r7, [r0], -r8
   1ff48:	andeq	r7, r0, r0, lsl #11
   1ff4c:	muleq	r0, r0, lr
   1ff50:	andeq	r6, r0, r0, ror lr
   1ff54:	andeq	r6, r0, r0, asr lr
   1ff58:	andeq	r7, r0, ip, lsr #19
   1ff5c:	andeq	r7, r0, r0, asr #8
   1ff60:	strdeq	r7, [r0], -r4
   1ff64:	andeq	r7, r0, r4, ror r9
   1ff68:	andeq	r7, r0, r8, lsl #8
   1ff6c:	andeq	r7, r0, ip, asr #9

0001ff70 <grisu3_diy_fp_encode_double@@Base>:
   1ff70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ff74:	add	fp, sp, #28
   1ff78:	sub	sp, sp, #184	; 0xb8
   1ff7c:	strd	r0, [fp, #-156]	; 0xffffff64
   1ff80:	str	r2, [fp, #-160]	; 0xffffff60
   1ff84:	str	r3, [fp, #-164]	; 0xffffff5c
   1ff88:	mov	r3, #3
   1ff8c:	str	r3, [fp, #-40]	; 0xffffffd8
   1ff90:	mov	r2, #1
   1ff94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1ff98:	lsl	r3, r2, r3
   1ff9c:	str	r3, [fp, #-44]	; 0xffffffd4
   1ffa0:	ldr	r3, [pc, #1264]	; 20498 <grisu3_diy_fp_encode_double@@Base+0x528>
   1ffa4:	str	r3, [fp, #-48]	; 0xffffffd0
   1ffa8:	mov	r2, #0
   1ffac:	mov	r3, #1048576	; 0x100000
   1ffb0:	strd	r2, [fp, #-60]	; 0xffffffc4
   1ffb4:	mov	r3, #64	; 0x40
   1ffb8:	str	r3, [fp, #-64]	; 0xffffffc0
   1ffbc:	mov	r3, #19
   1ffc0:	str	r3, [fp, #-68]	; 0xffffffbc
   1ffc4:	ldr	r3, [fp, #4]
   1ffc8:	cmp	r3, #0
   1ffcc:	beq	1ffe4 <grisu3_diy_fp_encode_double@@Base+0x74>
   1ffd0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1ffd4:	lsr	r2, r3, #31
   1ffd8:	add	r3, r2, r3
   1ffdc:	asr	r3, r3, #1
   1ffe0:	b	1ffe8 <grisu3_diy_fp_encode_double@@Base+0x78>
   1ffe4:	mov	r3, #0
   1ffe8:	str	r3, [fp, #-32]	; 0xffffffe0
   1ffec:	ldr	r2, [fp, #-160]	; 0xffffff60
   1fff0:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1fff4:	sub	r3, r2, r3
   1fff8:	str	r3, [fp, #-72]	; 0xffffffb8
   1fffc:	ldrd	r2, [fp, #-156]	; 0xffffff64
   20000:	strd	r2, [fp, #-116]	; 0xffffff8c
   20004:	mov	r3, #0
   20008:	str	r3, [fp, #-108]	; 0xffffff94
   2000c:	sub	ip, fp, #116	; 0x74
   20010:	mov	r2, sp
   20014:	sub	r3, fp, #108	; 0x6c
   20018:	ldm	r3, {r0, r1}
   2001c:	stm	r2, {r0, r1}
   20020:	sub	r3, fp, #116	; 0x74
   20024:	ldm	r3, {r2, r3}
   20028:	mov	r0, ip
   2002c:	bl	1f9a4 <flatcc_emitter_copy_buffer@@Base+0x2a1c>
   20030:	ldr	r3, [fp, #-108]	; 0xffffff94
   20034:	rsb	r3, r3, #0
   20038:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2003c:	lsl	r3, r2, r3
   20040:	str	r3, [fp, #-32]	; 0xffffffe0
   20044:	sub	r3, fp, #132	; 0x84
   20048:	mov	r1, r3
   2004c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   20050:	bl	1fdb0 <flatcc_emitter_copy_buffer@@Base+0x2e28>
   20054:	str	r0, [fp, #-76]	; 0xffffffb4
   20058:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2005c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   20060:	cmp	r2, r3
   20064:	beq	20144 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   20068:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2006c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   20070:	sub	r3, r2, r3
   20074:	sub	r3, r3, #1
   20078:	str	r3, [fp, #-80]	; 0xffffffb0
   2007c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20080:	cmp	r3, #0
   20084:	blt	20094 <grisu3_diy_fp_encode_double@@Base+0x124>
   20088:	ldr	r3, [fp, #-80]	; 0xffffffb0
   2008c:	cmp	r3, #6
   20090:	ble	200b4 <grisu3_diy_fp_encode_double@@Base+0x144>
   20094:	ldr	r3, [pc, #1024]	; 2049c <grisu3_diy_fp_encode_double@@Base+0x52c>
   20098:	add	r3, pc, r3
   2009c:	mov	r2, #185	; 0xb9
   200a0:	ldr	r1, [pc, #1016]	; 204a0 <grisu3_diy_fp_encode_double@@Base+0x530>
   200a4:	add	r1, pc, r1
   200a8:	ldr	r0, [pc, #1012]	; 204a4 <grisu3_diy_fp_encode_double@@Base+0x534>
   200ac:	add	r0, pc, r0
   200b0:	bl	12504 <__assert_fail@plt>
   200b4:	sub	lr, fp, #180	; 0xb4
   200b8:	ldr	r2, [pc, #1000]	; 204a8 <grisu3_diy_fp_encode_double@@Base+0x538>
   200bc:	add	r2, pc, r2
   200c0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   200c4:	add	ip, sp, #8
   200c8:	lsl	r3, r3, #4
   200cc:	add	r3, r2, r3
   200d0:	ldm	r3, {r0, r1, r2, r3}
   200d4:	stm	ip, {r0, r1, r2, r3}
   200d8:	mov	r2, sp
   200dc:	sub	r3, fp, #108	; 0x6c
   200e0:	ldm	r3, {r0, r1}
   200e4:	stm	r2, {r0, r1}
   200e8:	sub	r3, fp, #116	; 0x74
   200ec:	ldm	r3, {r2, r3}
   200f0:	mov	r0, lr
   200f4:	bl	1f754 <flatcc_emitter_copy_buffer@@Base+0x27cc>
   200f8:	sub	ip, fp, #116	; 0x74
   200fc:	sub	r3, fp, #180	; 0xb4
   20100:	ldm	r3, {r0, r1, r2, r3}
   20104:	stm	ip, {r0, r1, r2, r3}
   20108:	ldr	r3, [fp, #-164]	; 0xffffff5c
   2010c:	add	r2, r3, #1
   20110:	ldr	r3, [fp, #-80]	; 0xffffffb0
   20114:	add	r2, r2, r3
   20118:	ldr	r3, [fp, #-68]	; 0xffffffbc
   2011c:	cmp	r2, r3
   20120:	ble	20144 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   20124:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20128:	lsr	r2, r3, #31
   2012c:	add	r3, r2, r3
   20130:	asr	r3, r3, #1
   20134:	mov	r2, r3
   20138:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2013c:	add	r3, r3, r2
   20140:	str	r3, [fp, #-32]	; 0xffffffe0
   20144:	sub	lr, fp, #180	; 0xb4
   20148:	add	ip, sp, #8
   2014c:	sub	r3, fp, #132	; 0x84
   20150:	ldm	r3, {r0, r1, r2, r3}
   20154:	stm	ip, {r0, r1, r2, r3}
   20158:	mov	r2, sp
   2015c:	sub	r3, fp, #108	; 0x6c
   20160:	ldm	r3, {r0, r1}
   20164:	stm	r2, {r0, r1}
   20168:	sub	r3, fp, #116	; 0x74
   2016c:	ldm	r3, {r2, r3}
   20170:	mov	r0, lr
   20174:	bl	1f754 <flatcc_emitter_copy_buffer@@Base+0x27cc>
   20178:	sub	ip, fp, #116	; 0x74
   2017c:	sub	r3, fp, #180	; 0xb4
   20180:	ldm	r3, {r0, r1, r2, r3}
   20184:	stm	ip, {r0, r1, r2, r3}
   20188:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2018c:	cmp	r3, #0
   20190:	movne	r3, #1
   20194:	moveq	r3, #0
   20198:	uxtb	r3, r3
   2019c:	mov	r2, r3
   201a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   201a4:	add	r3, r2, r3
   201a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   201ac:	add	r3, r2, r3
   201b0:	str	r3, [fp, #-32]	; 0xffffffe0
   201b4:	ldr	r3, [fp, #-108]	; 0xffffff94
   201b8:	str	r3, [fp, #-84]	; 0xffffffac
   201bc:	sub	ip, fp, #180	; 0xb4
   201c0:	mov	r2, sp
   201c4:	sub	r3, fp, #108	; 0x6c
   201c8:	ldm	r3, {r0, r1}
   201cc:	stm	r2, {r0, r1}
   201d0:	sub	r3, fp, #116	; 0x74
   201d4:	ldm	r3, {r2, r3}
   201d8:	mov	r0, ip
   201dc:	bl	1f9a4 <flatcc_emitter_copy_buffer@@Base+0x2a1c>
   201e0:	sub	ip, fp, #116	; 0x74
   201e4:	sub	r3, fp, #180	; 0xb4
   201e8:	ldm	r3, {r0, r1, r2, r3}
   201ec:	stm	ip, {r0, r1, r2, r3}
   201f0:	ldr	r3, [fp, #-108]	; 0xffffff94
   201f4:	ldr	r2, [fp, #-84]	; 0xffffffac
   201f8:	sub	r3, r2, r3
   201fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   20200:	lsl	r3, r2, r3
   20204:	str	r3, [fp, #-32]	; 0xffffffe0
   20208:	ldr	r2, [fp, #-108]	; 0xffffff94
   2020c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20210:	add	r3, r2, r3
   20214:	str	r3, [fp, #-88]	; 0xffffffa8
   20218:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2021c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20220:	add	r2, r2, r3
   20224:	ldr	r3, [fp, #-88]	; 0xffffffa8
   20228:	cmp	r2, r3
   2022c:	ble	20258 <grisu3_diy_fp_encode_double@@Base+0x2e8>
   20230:	ldr	r2, [fp, #-88]	; 0xffffffa8
   20234:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20238:	cmp	r2, r3
   2023c:	ble	20250 <grisu3_diy_fp_encode_double@@Base+0x2e0>
   20240:	ldr	r2, [fp, #-88]	; 0xffffffa8
   20244:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20248:	sub	r3, r2, r3
   2024c:	b	2025c <grisu3_diy_fp_encode_double@@Base+0x2ec>
   20250:	mov	r3, #0
   20254:	b	2025c <grisu3_diy_fp_encode_double@@Base+0x2ec>
   20258:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2025c:	str	r3, [fp, #-88]	; 0xffffffa8
   20260:	ldr	r2, [fp, #-64]	; 0xffffffc0
   20264:	ldr	r3, [fp, #-88]	; 0xffffffa8
   20268:	sub	r3, r2, r3
   2026c:	str	r3, [fp, #-36]	; 0xffffffdc
   20270:	ldr	r2, [fp, #-36]	; 0xffffffdc
   20274:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20278:	add	r2, r2, r3
   2027c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20280:	cmp	r2, r3
   20284:	blt	20304 <grisu3_diy_fp_encode_double@@Base+0x394>
   20288:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2028c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20290:	add	r2, r2, r3
   20294:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20298:	sub	r3, r2, r3
   2029c:	sub	r3, r3, #1
   202a0:	str	r3, [fp, #-92]	; 0xffffffa4
   202a4:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   202a8:	ldr	r1, [fp, #-92]	; 0xffffffa4
   202ac:	rsb	ip, r1, #32
   202b0:	sub	r0, r1, #32
   202b4:	lsr	r8, r2, r1
   202b8:	orr	r8, r8, r3, lsl ip
   202bc:	orr	r8, r8, r3, lsr r0
   202c0:	lsr	r9, r3, r1
   202c4:	strd	r8, [fp, #-116]	; 0xffffff8c
   202c8:	ldr	r2, [fp, #-108]	; 0xffffff94
   202cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   202d0:	add	r3, r2, r3
   202d4:	str	r3, [fp, #-108]	; 0xffffff94
   202d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   202dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   202e0:	asr	r3, r2, r3
   202e4:	add	r2, r3, #1
   202e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   202ec:	add	r3, r2, r3
   202f0:	str	r3, [fp, #-32]	; 0xffffffe0
   202f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   202f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   202fc:	sub	r3, r2, r3
   20300:	str	r3, [fp, #-36]	; 0xffffffdc
   20304:	ldrd	r2, [fp, #-116]	; 0xffffff8c
   20308:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2030c:	rsb	ip, r1, #32
   20310:	sub	r0, r1, #32
   20314:	lsr	r6, r2, r1
   20318:	orr	r6, r6, r3, lsl ip
   2031c:	orr	r6, r6, r3, lsr r0
   20320:	lsr	r7, r3, r1
   20324:	strd	r6, [fp, #-148]	; 0xffffff6c
   20328:	ldr	r2, [fp, #-108]	; 0xffffff94
   2032c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20330:	add	r3, r2, r3
   20334:	str	r3, [fp, #-140]	; 0xffffff74
   20338:	ldrd	r6, [fp, #-116]	; 0xffffff8c
   2033c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20340:	sub	r1, r3, #1
   20344:	mov	r2, #1
   20348:	mov	r3, #0
   2034c:	sub	ip, r1, #32
   20350:	rsb	r0, r1, #32
   20354:	lsl	r5, r3, r1
   20358:	orr	r5, r5, r2, lsl ip
   2035c:	orr	r5, r5, r2, lsr r0
   20360:	lsl	r4, r2, r1
   20364:	and	r2, r6, r4
   20368:	and	r3, r7, r5
   2036c:	mov	r1, r2
   20370:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20374:	mov	r2, r3
   20378:	asr	r3, r2, #31
   2037c:	mov	r3, r2
   20380:	mul	r3, r3, r1
   20384:	str	r3, [fp, #-96]	; 0xffffffa0
   20388:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2038c:	mov	r2, r3
   20390:	asr	r3, r2, #31
   20394:	ldr	r1, [fp, #-36]	; 0xffffffdc
   20398:	sub	r1, r1, #1
   2039c:	sub	ip, r1, #32
   203a0:	rsb	r0, r1, #32
   203a4:	lsl	lr, r3, r1
   203a8:	str	lr, [fp, #-184]	; 0xffffff48
   203ac:	ldr	lr, [fp, #-184]	; 0xffffff48
   203b0:	orr	ip, lr, r2, lsl ip
   203b4:	str	ip, [fp, #-184]	; 0xffffff48
   203b8:	ldr	ip, [fp, #-184]	; 0xffffff48
   203bc:	orr	r0, ip, r2, lsr r0
   203c0:	str	r0, [fp, #-184]	; 0xffffff48
   203c4:	lsl	r3, r2, r1
   203c8:	str	r3, [fp, #-188]	; 0xffffff44
   203cc:	ldr	r3, [fp, #-188]	; 0xffffff44
   203d0:	str	r3, [fp, #-100]	; 0xffffff9c
   203d4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   203d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   203dc:	add	r2, r2, r3
   203e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   203e4:	cmp	r2, r3
   203e8:	bgt	20438 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   203ec:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   203f0:	adds	r2, r2, #1
   203f4:	adc	r3, r3, #0
   203f8:	strd	r2, [fp, #-148]	; 0xffffff6c
   203fc:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   20400:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   20404:	adds	r2, r2, r2
   20408:	adc	r3, r3, r3
   2040c:	and	r2, r2, r0
   20410:	and	r3, r3, r1
   20414:	orrs	r3, r2, r3
   20418:	beq	20438 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2041c:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   20420:	lsrs	r3, r3, #1
   20424:	rrx	r2, r2
   20428:	strd	r2, [fp, #-148]	; 0xffffff6c
   2042c:	ldr	r3, [fp, #-140]	; 0xffffff74
   20430:	add	r3, r3, #1
   20434:	str	r3, [fp, #-140]	; 0xffffff74
   20438:	sub	r3, fp, #148	; 0x94
   2043c:	ldm	r3, {r0, r1, r2, r3}
   20440:	bl	1fb60 <flatcc_emitter_copy_buffer@@Base+0x2bd8>
   20444:	vmov.f64	d7, d0
   20448:	ldr	r3, [fp, #8]
   2044c:	vstr	d7, [r3]
   20450:	ldr	r2, [fp, #-100]	; 0xffffff9c
   20454:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20458:	sub	r2, r2, r3
   2045c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   20460:	cmp	r2, r3
   20464:	bge	20480 <grisu3_diy_fp_encode_double@@Base+0x510>
   20468:	ldr	r2, [fp, #-100]	; 0xffffff9c
   2046c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20470:	add	r2, r2, r3
   20474:	ldr	r3, [fp, #-96]	; 0xffffffa0
   20478:	cmp	r2, r3
   2047c:	bgt	20488 <grisu3_diy_fp_encode_double@@Base+0x518>
   20480:	mov	r3, #1
   20484:	b	2048c <grisu3_diy_fp_encode_double@@Base+0x51c>
   20488:	mov	r3, #0
   2048c:	mov	r0, r3
   20490:	sub	sp, fp, #28
   20494:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20498:			; <UNDEFINED> instruction: 0xfffffbce
   2049c:	andeq	r7, r0, r4, lsl #16
   204a0:	andeq	r7, r0, r8, ror r2
   204a4:	andeq	r7, r0, r8, asr r3
   204a8:	andeq	r7, r1, ip, lsr #31
   204ac:	push	{fp, lr}
   204b0:	add	fp, sp, #4
   204b4:	sub	sp, sp, #48	; 0x30
   204b8:	str	r0, [fp, #-32]	; 0xffffffe0
   204bc:	str	r1, [fp, #-36]	; 0xffffffdc
   204c0:	str	r2, [fp, #-40]	; 0xffffffd8
   204c4:	ldr	r3, [pc, #1556]	; 20ae0 <grisu3_diy_fp_encode_double@@Base+0xb70>
   204c8:	str	r3, [fp, #-16]
   204cc:	ldr	r3, [pc, #1552]	; 20ae4 <grisu3_diy_fp_encode_double@@Base+0xb74>
   204d0:	str	r3, [fp, #-20]	; 0xffffffec
   204d4:	ldrd	r2, [fp, #4]
   204d8:	orrs	r3, r2, r3
   204dc:	beq	204f0 <grisu3_diy_fp_encode_double@@Base+0x580>
   204e0:	ldr	r2, [fp, #12]
   204e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   204e8:	cmp	r2, r3
   204ec:	bge	20504 <grisu3_diy_fp_encode_double@@Base+0x594>
   204f0:	ldr	r1, [fp, #24]
   204f4:	mov	r2, #0
   204f8:	mov	r3, #0
   204fc:	strd	r2, [r1]
   20500:	b	20af4 <grisu3_diy_fp_encode_double@@Base+0xb84>
   20504:	ldr	r3, [fp, #12]
   20508:	sub	r2, r3, #1
   2050c:	ldr	r3, [fp, #-16]
   20510:	cmp	r2, r3
   20514:	ble	20534 <grisu3_diy_fp_encode_double@@Base+0x5c4>
   20518:	mov	r0, #0
   2051c:	ldr	r1, [pc, #1476]	; 20ae8 <grisu3_diy_fp_encode_double@@Base+0xb78>
   20520:	bl	1f518 <flatcc_emitter_copy_buffer@@Base+0x2590>
   20524:	vmov.f64	d7, d0
   20528:	ldr	r3, [fp, #24]
   2052c:	vstr	d7, [r3]
   20530:	b	20af4 <grisu3_diy_fp_encode_double@@Base+0xb84>
   20534:	ldrd	r2, [fp, #4]
   20538:	mvn	r0, #0
   2053c:	ldr	r1, [pc, #1448]	; 20aec <grisu3_diy_fp_encode_double@@Base+0xb7c>
   20540:	cmp	r3, r1
   20544:	cmpeq	r2, r0
   20548:	bhi	209c8 <grisu3_diy_fp_encode_double@@Base+0xa58>
   2054c:	ldr	r3, [fp, #12]
   20550:	cmp	r3, #0
   20554:	blt	209c8 <grisu3_diy_fp_encode_double@@Base+0xa58>
   20558:	ldr	r3, [fp, #12]
   2055c:	cmp	r3, #22
   20560:	bgt	209c8 <grisu3_diy_fp_encode_double@@Base+0xa58>
   20564:	ldrd	r0, [fp, #4]
   20568:	bl	25b2c <flatcc_json_parser_struct_as_root@@Base+0x6a8>
   2056c:	mov	r2, r0
   20570:	mov	r3, r1
   20574:	strd	r2, [fp, #-12]
   20578:	ldr	r2, [fp, #12]
   2057c:	ldr	r3, [fp, #16]
   20580:	sub	r3, r2, r3
   20584:	add	r3, r3, #22
   20588:	cmp	r3, #44	; 0x2c
   2058c:	addls	pc, pc, r3, lsl #2
   20590:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20594:	b	20648 <grisu3_diy_fp_encode_double@@Base+0x6d8>
   20598:	b	2065c <grisu3_diy_fp_encode_double@@Base+0x6ec>
   2059c:	b	20670 <grisu3_diy_fp_encode_double@@Base+0x700>
   205a0:	b	20684 <grisu3_diy_fp_encode_double@@Base+0x714>
   205a4:	b	20698 <grisu3_diy_fp_encode_double@@Base+0x728>
   205a8:	b	206ac <grisu3_diy_fp_encode_double@@Base+0x73c>
   205ac:	b	206c0 <grisu3_diy_fp_encode_double@@Base+0x750>
   205b0:	b	206d4 <grisu3_diy_fp_encode_double@@Base+0x764>
   205b4:	b	206e8 <grisu3_diy_fp_encode_double@@Base+0x778>
   205b8:	b	206fc <grisu3_diy_fp_encode_double@@Base+0x78c>
   205bc:	b	20710 <grisu3_diy_fp_encode_double@@Base+0x7a0>
   205c0:	b	20724 <grisu3_diy_fp_encode_double@@Base+0x7b4>
   205c4:	b	20738 <grisu3_diy_fp_encode_double@@Base+0x7c8>
   205c8:	b	2074c <grisu3_diy_fp_encode_double@@Base+0x7dc>
   205cc:	b	20760 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   205d0:	b	20774 <grisu3_diy_fp_encode_double@@Base+0x804>
   205d4:	b	20788 <grisu3_diy_fp_encode_double@@Base+0x818>
   205d8:	b	2079c <grisu3_diy_fp_encode_double@@Base+0x82c>
   205dc:	b	207b0 <grisu3_diy_fp_encode_double@@Base+0x840>
   205e0:	b	207c4 <grisu3_diy_fp_encode_double@@Base+0x854>
   205e4:	b	207d8 <grisu3_diy_fp_encode_double@@Base+0x868>
   205e8:	b	207ec <grisu3_diy_fp_encode_double@@Base+0x87c>
   205ec:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   205f0:	b	20800 <grisu3_diy_fp_encode_double@@Base+0x890>
   205f4:	b	20814 <grisu3_diy_fp_encode_double@@Base+0x8a4>
   205f8:	b	20828 <grisu3_diy_fp_encode_double@@Base+0x8b8>
   205fc:	b	2083c <grisu3_diy_fp_encode_double@@Base+0x8cc>
   20600:	b	20850 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   20604:	b	20864 <grisu3_diy_fp_encode_double@@Base+0x8f4>
   20608:	b	20878 <grisu3_diy_fp_encode_double@@Base+0x908>
   2060c:	b	2088c <grisu3_diy_fp_encode_double@@Base+0x91c>
   20610:	b	208a0 <grisu3_diy_fp_encode_double@@Base+0x930>
   20614:	b	208b4 <grisu3_diy_fp_encode_double@@Base+0x944>
   20618:	b	208c8 <grisu3_diy_fp_encode_double@@Base+0x958>
   2061c:	b	208dc <grisu3_diy_fp_encode_double@@Base+0x96c>
   20620:	b	208f0 <grisu3_diy_fp_encode_double@@Base+0x980>
   20624:	b	20904 <grisu3_diy_fp_encode_double@@Base+0x994>
   20628:	b	20918 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   2062c:	b	2092c <grisu3_diy_fp_encode_double@@Base+0x9bc>
   20630:	b	20940 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   20634:	b	20954 <grisu3_diy_fp_encode_double@@Base+0x9e4>
   20638:	b	20968 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   2063c:	b	2097c <grisu3_diy_fp_encode_double@@Base+0xa0c>
   20640:	b	20990 <grisu3_diy_fp_encode_double@@Base+0xa20>
   20644:	b	209a4 <grisu3_diy_fp_encode_double@@Base+0xa34>
   20648:	vldr	d6, [fp, #-12]
   2064c:	vldr	d5, [pc, #988]	; 20a30 <grisu3_diy_fp_encode_double@@Base+0xac0>
   20650:	vdiv.f64	d7, d6, d5
   20654:	vstr	d7, [fp, #-12]
   20658:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2065c:	vldr	d6, [fp, #-12]
   20660:	vldr	d5, [pc, #976]	; 20a38 <grisu3_diy_fp_encode_double@@Base+0xac8>
   20664:	vdiv.f64	d7, d6, d5
   20668:	vstr	d7, [fp, #-12]
   2066c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20670:	vldr	d6, [fp, #-12]
   20674:	vldr	d5, [pc, #964]	; 20a40 <grisu3_diy_fp_encode_double@@Base+0xad0>
   20678:	vdiv.f64	d7, d6, d5
   2067c:	vstr	d7, [fp, #-12]
   20680:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20684:	vldr	d6, [fp, #-12]
   20688:	vldr	d5, [pc, #952]	; 20a48 <grisu3_diy_fp_encode_double@@Base+0xad8>
   2068c:	vdiv.f64	d7, d6, d5
   20690:	vstr	d7, [fp, #-12]
   20694:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20698:	vldr	d6, [fp, #-12]
   2069c:	vldr	d5, [pc, #940]	; 20a50 <grisu3_diy_fp_encode_double@@Base+0xae0>
   206a0:	vdiv.f64	d7, d6, d5
   206a4:	vstr	d7, [fp, #-12]
   206a8:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   206ac:	vldr	d6, [fp, #-12]
   206b0:	vldr	d5, [pc, #928]	; 20a58 <grisu3_diy_fp_encode_double@@Base+0xae8>
   206b4:	vdiv.f64	d7, d6, d5
   206b8:	vstr	d7, [fp, #-12]
   206bc:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   206c0:	vldr	d6, [fp, #-12]
   206c4:	vldr	d5, [pc, #916]	; 20a60 <grisu3_diy_fp_encode_double@@Base+0xaf0>
   206c8:	vdiv.f64	d7, d6, d5
   206cc:	vstr	d7, [fp, #-12]
   206d0:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   206d4:	vldr	d6, [fp, #-12]
   206d8:	vldr	d5, [pc, #904]	; 20a68 <grisu3_diy_fp_encode_double@@Base+0xaf8>
   206dc:	vdiv.f64	d7, d6, d5
   206e0:	vstr	d7, [fp, #-12]
   206e4:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   206e8:	vldr	d6, [fp, #-12]
   206ec:	vldr	d5, [pc, #892]	; 20a70 <grisu3_diy_fp_encode_double@@Base+0xb00>
   206f0:	vdiv.f64	d7, d6, d5
   206f4:	vstr	d7, [fp, #-12]
   206f8:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   206fc:	vldr	d6, [fp, #-12]
   20700:	vldr	d5, [pc, #880]	; 20a78 <grisu3_diy_fp_encode_double@@Base+0xb08>
   20704:	vdiv.f64	d7, d6, d5
   20708:	vstr	d7, [fp, #-12]
   2070c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20710:	vldr	d6, [fp, #-12]
   20714:	vldr	d5, [pc, #868]	; 20a80 <grisu3_diy_fp_encode_double@@Base+0xb10>
   20718:	vdiv.f64	d7, d6, d5
   2071c:	vstr	d7, [fp, #-12]
   20720:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20724:	vldr	d6, [fp, #-12]
   20728:	vldr	d5, [pc, #856]	; 20a88 <grisu3_diy_fp_encode_double@@Base+0xb18>
   2072c:	vdiv.f64	d7, d6, d5
   20730:	vstr	d7, [fp, #-12]
   20734:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20738:	vldr	d6, [fp, #-12]
   2073c:	vldr	d5, [pc, #844]	; 20a90 <grisu3_diy_fp_encode_double@@Base+0xb20>
   20740:	vdiv.f64	d7, d6, d5
   20744:	vstr	d7, [fp, #-12]
   20748:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2074c:	vldr	d6, [fp, #-12]
   20750:	vldr	d5, [pc, #832]	; 20a98 <grisu3_diy_fp_encode_double@@Base+0xb28>
   20754:	vdiv.f64	d7, d6, d5
   20758:	vstr	d7, [fp, #-12]
   2075c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20760:	vldr	d6, [fp, #-12]
   20764:	vldr	d5, [pc, #820]	; 20aa0 <grisu3_diy_fp_encode_double@@Base+0xb30>
   20768:	vdiv.f64	d7, d6, d5
   2076c:	vstr	d7, [fp, #-12]
   20770:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20774:	vldr	d6, [fp, #-12]
   20778:	vldr	d5, [pc, #808]	; 20aa8 <grisu3_diy_fp_encode_double@@Base+0xb38>
   2077c:	vdiv.f64	d7, d6, d5
   20780:	vstr	d7, [fp, #-12]
   20784:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20788:	vldr	d6, [fp, #-12]
   2078c:	vldr	d5, [pc, #796]	; 20ab0 <grisu3_diy_fp_encode_double@@Base+0xb40>
   20790:	vdiv.f64	d7, d6, d5
   20794:	vstr	d7, [fp, #-12]
   20798:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2079c:	vldr	d6, [fp, #-12]
   207a0:	vldr	d5, [pc, #784]	; 20ab8 <grisu3_diy_fp_encode_double@@Base+0xb48>
   207a4:	vdiv.f64	d7, d6, d5
   207a8:	vstr	d7, [fp, #-12]
   207ac:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   207b0:	vldr	d6, [fp, #-12]
   207b4:	vldr	d5, [pc, #772]	; 20ac0 <grisu3_diy_fp_encode_double@@Base+0xb50>
   207b8:	vdiv.f64	d7, d6, d5
   207bc:	vstr	d7, [fp, #-12]
   207c0:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   207c4:	vldr	d6, [fp, #-12]
   207c8:	vldr	d5, [pc, #760]	; 20ac8 <grisu3_diy_fp_encode_double@@Base+0xb58>
   207cc:	vdiv.f64	d7, d6, d5
   207d0:	vstr	d7, [fp, #-12]
   207d4:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   207d8:	vldr	d6, [fp, #-12]
   207dc:	vldr	d5, [pc, #748]	; 20ad0 <grisu3_diy_fp_encode_double@@Base+0xb60>
   207e0:	vdiv.f64	d7, d6, d5
   207e4:	vstr	d7, [fp, #-12]
   207e8:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   207ec:	vldr	d6, [fp, #-12]
   207f0:	vldr	d5, [pc, #736]	; 20ad8 <grisu3_diy_fp_encode_double@@Base+0xb68>
   207f4:	vdiv.f64	d7, d6, d5
   207f8:	vstr	d7, [fp, #-12]
   207fc:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20800:	vldr	d7, [fp, #-12]
   20804:	vldr	d6, [pc, #716]	; 20ad8 <grisu3_diy_fp_encode_double@@Base+0xb68>
   20808:	vmul.f64	d7, d7, d6
   2080c:	vstr	d7, [fp, #-12]
   20810:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20814:	vldr	d7, [fp, #-12]
   20818:	vldr	d6, [pc, #688]	; 20ad0 <grisu3_diy_fp_encode_double@@Base+0xb60>
   2081c:	vmul.f64	d7, d7, d6
   20820:	vstr	d7, [fp, #-12]
   20824:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20828:	vldr	d7, [fp, #-12]
   2082c:	vldr	d6, [pc, #660]	; 20ac8 <grisu3_diy_fp_encode_double@@Base+0xb58>
   20830:	vmul.f64	d7, d7, d6
   20834:	vstr	d7, [fp, #-12]
   20838:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2083c:	vldr	d7, [fp, #-12]
   20840:	vldr	d6, [pc, #632]	; 20ac0 <grisu3_diy_fp_encode_double@@Base+0xb50>
   20844:	vmul.f64	d7, d7, d6
   20848:	vstr	d7, [fp, #-12]
   2084c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20850:	vldr	d7, [fp, #-12]
   20854:	vldr	d6, [pc, #604]	; 20ab8 <grisu3_diy_fp_encode_double@@Base+0xb48>
   20858:	vmul.f64	d7, d7, d6
   2085c:	vstr	d7, [fp, #-12]
   20860:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20864:	vldr	d7, [fp, #-12]
   20868:	vldr	d6, [pc, #576]	; 20ab0 <grisu3_diy_fp_encode_double@@Base+0xb40>
   2086c:	vmul.f64	d7, d7, d6
   20870:	vstr	d7, [fp, #-12]
   20874:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20878:	vldr	d7, [fp, #-12]
   2087c:	vldr	d6, [pc, #548]	; 20aa8 <grisu3_diy_fp_encode_double@@Base+0xb38>
   20880:	vmul.f64	d7, d7, d6
   20884:	vstr	d7, [fp, #-12]
   20888:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2088c:	vldr	d7, [fp, #-12]
   20890:	vldr	d6, [pc, #520]	; 20aa0 <grisu3_diy_fp_encode_double@@Base+0xb30>
   20894:	vmul.f64	d7, d7, d6
   20898:	vstr	d7, [fp, #-12]
   2089c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   208a0:	vldr	d7, [fp, #-12]
   208a4:	vldr	d6, [pc, #492]	; 20a98 <grisu3_diy_fp_encode_double@@Base+0xb28>
   208a8:	vmul.f64	d7, d7, d6
   208ac:	vstr	d7, [fp, #-12]
   208b0:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   208b4:	vldr	d7, [fp, #-12]
   208b8:	vldr	d6, [pc, #464]	; 20a90 <grisu3_diy_fp_encode_double@@Base+0xb20>
   208bc:	vmul.f64	d7, d7, d6
   208c0:	vstr	d7, [fp, #-12]
   208c4:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   208c8:	vldr	d7, [fp, #-12]
   208cc:	vldr	d6, [pc, #436]	; 20a88 <grisu3_diy_fp_encode_double@@Base+0xb18>
   208d0:	vmul.f64	d7, d7, d6
   208d4:	vstr	d7, [fp, #-12]
   208d8:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   208dc:	vldr	d7, [fp, #-12]
   208e0:	vldr	d6, [pc, #408]	; 20a80 <grisu3_diy_fp_encode_double@@Base+0xb10>
   208e4:	vmul.f64	d7, d7, d6
   208e8:	vstr	d7, [fp, #-12]
   208ec:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   208f0:	vldr	d7, [fp, #-12]
   208f4:	vldr	d6, [pc, #380]	; 20a78 <grisu3_diy_fp_encode_double@@Base+0xb08>
   208f8:	vmul.f64	d7, d7, d6
   208fc:	vstr	d7, [fp, #-12]
   20900:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20904:	vldr	d7, [fp, #-12]
   20908:	vldr	d6, [pc, #352]	; 20a70 <grisu3_diy_fp_encode_double@@Base+0xb00>
   2090c:	vmul.f64	d7, d7, d6
   20910:	vstr	d7, [fp, #-12]
   20914:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20918:	vldr	d7, [fp, #-12]
   2091c:	vldr	d6, [pc, #324]	; 20a68 <grisu3_diy_fp_encode_double@@Base+0xaf8>
   20920:	vmul.f64	d7, d7, d6
   20924:	vstr	d7, [fp, #-12]
   20928:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2092c:	vldr	d7, [fp, #-12]
   20930:	vldr	d6, [pc, #296]	; 20a60 <grisu3_diy_fp_encode_double@@Base+0xaf0>
   20934:	vmul.f64	d7, d7, d6
   20938:	vstr	d7, [fp, #-12]
   2093c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20940:	vldr	d7, [fp, #-12]
   20944:	vldr	d6, [pc, #268]	; 20a58 <grisu3_diy_fp_encode_double@@Base+0xae8>
   20948:	vmul.f64	d7, d7, d6
   2094c:	vstr	d7, [fp, #-12]
   20950:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20954:	vldr	d7, [fp, #-12]
   20958:	vldr	d6, [pc, #240]	; 20a50 <grisu3_diy_fp_encode_double@@Base+0xae0>
   2095c:	vmul.f64	d7, d7, d6
   20960:	vstr	d7, [fp, #-12]
   20964:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20968:	vldr	d7, [fp, #-12]
   2096c:	vldr	d6, [pc, #212]	; 20a48 <grisu3_diy_fp_encode_double@@Base+0xad8>
   20970:	vmul.f64	d7, d7, d6
   20974:	vstr	d7, [fp, #-12]
   20978:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   2097c:	vldr	d7, [fp, #-12]
   20980:	vldr	d6, [pc, #184]	; 20a40 <grisu3_diy_fp_encode_double@@Base+0xad0>
   20984:	vmul.f64	d7, d7, d6
   20988:	vstr	d7, [fp, #-12]
   2098c:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   20990:	vldr	d7, [fp, #-12]
   20994:	vldr	d6, [pc, #156]	; 20a38 <grisu3_diy_fp_encode_double@@Base+0xac8>
   20998:	vmul.f64	d7, d7, d6
   2099c:	vstr	d7, [fp, #-12]
   209a0:	b	209b8 <grisu3_diy_fp_encode_double@@Base+0xa48>
   209a4:	vldr	d7, [fp, #-12]
   209a8:	vldr	d6, [pc, #128]	; 20a30 <grisu3_diy_fp_encode_double@@Base+0xac0>
   209ac:	vmul.f64	d7, d7, d6
   209b0:	vstr	d7, [fp, #-12]
   209b4:	nop			; (mov r0, r0)
   209b8:	ldr	r1, [fp, #24]
   209bc:	ldrd	r2, [fp, #-12]
   209c0:	strd	r2, [r1]
   209c4:	b	20af4 <grisu3_diy_fp_encode_double@@Base+0xb84>
   209c8:	ldr	r3, [fp, #24]
   209cc:	str	r3, [sp, #4]
   209d0:	ldr	r3, [fp, #20]
   209d4:	str	r3, [sp]
   209d8:	ldr	r3, [fp, #16]
   209dc:	ldr	r2, [fp, #12]
   209e0:	ldrd	r0, [fp, #4]
   209e4:	bl	1ff70 <grisu3_diy_fp_encode_double@@Base>
   209e8:	mov	r3, r0
   209ec:	cmp	r3, #0
   209f0:	bne	20af0 <grisu3_diy_fp_encode_double@@Base+0xb80>
   209f4:	sub	r3, fp, #24
   209f8:	mov	r1, r3
   209fc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   20a00:	bl	124e0 <strtod@plt>
   20a04:	vmov.f64	d7, d0
   20a08:	ldr	r3, [fp, #24]
   20a0c:	vstr	d7, [r3]
   20a10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   20a14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20a18:	cmp	r2, r3
   20a1c:	bcs	20a28 <grisu3_diy_fp_encode_double@@Base+0xab8>
   20a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20a24:	b	20b18 <grisu3_diy_fp_encode_double@@Base+0xba8>
   20a28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20a2c:	b	20b18 <grisu3_diy_fp_encode_double@@Base+0xba8>
   20a30:			; <UNDEFINED> instruction: 0x064dd592
   20a34:	strmi	pc, [r0], #207	; 0xcf
   20a38:	usatle	lr, #2, r0, asr #30
   20a3c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   20a40:	ldmvc	r5!, {r6, sl, fp, pc}
   20a44:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   20a48:	addsvs	r3, r1, r0, lsl #26
   20a4c:	mvnmi	r5, #228, 16	; 0xe40000
   20a50:	strbvs	ip, [lr, -r0, lsl #16]
   20a54:			; <UNDEFINED> instruction: 0x43abc16d
   20a58:	ldrbhi	sl, [r8]
   20a5c:	cmnmi	r6, #1459617792	; 0x57000000
   20a60:	strbcc	r8, [r0, r0]!
   20a64:	movtmi	ip, #4985	; 0x1379
   20a68:	ldrtcs	r0, [r4], -r0
   20a6c:	movwmi	r6, #52213	; 0xcbf5
   20a70:	cdpne	0, 9, cr0, cr0, cr0, {0}
   20a74:	sbcsmi	fp, r6, #196, 24	; 0xc400
   20a78:	strb	r0, [r0, #-0]
   20a7c:	adcmi	r3, r2, #156	; 0x9c
   20a80:	andge	r0, r0, #0
   20a84:	rsbmi	r1, sp, #148, 20	; 0x94000
   20a88:	stmda	r0, {}	; <UNPREDICTABLE>
   20a8c:	eorsmi	r4, r7, #7733248	; 0x760000
   20a90:	andcs	r0, r0, r0
   20a94:	andmi	sl, r2, #95	; 0x5f
   20a98:	andeq	r0, r0, r0
   20a9c:	bicmi	ip, sp, r5, ror #26
   20aa0:	andeq	r0, r0, r0
   20aa4:	orrsmi	sp, r7, r4, lsl #15
   20aa8:	andeq	r0, r0, r0
   20aac:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   20ab0:	andeq	r0, r0, r0
   20ab4:	smlawbmi	lr, r0, r4, r8
   20ab8:	andeq	r0, r0, r0
   20abc:	rscsmi	r6, r8, r0, lsl #20
   20ac0:	andeq	r0, r0, r0
   20ac4:	sbcmi	r8, r3, r0, lsl #16
   20ac8:	andeq	r0, r0, r0
   20acc:	addmi	r4, pc, r0
   20ad0:	andeq	r0, r0, r0
   20ad4:	subsmi	r0, r9, r0
   20ad8:	andeq	r0, r0, r0
   20adc:	eormi	r0, r4, r0
   20ae0:	andeq	r0, r0, r5, lsr r1
   20ae4:			; <UNDEFINED> instruction: 0xfffffebc
   20ae8:	svcvc	0x00f00000	; IMB
   20aec:			; <UNDEFINED> instruction: 0x001fffff
   20af0:	nop			; (mov r0, r0)
   20af4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   20af8:	cmp	r3, #0
   20afc:	beq	20b14 <grisu3_diy_fp_encode_double@@Base+0xba4>
   20b00:	ldr	r3, [fp, #24]
   20b04:	vldr	d7, [r3]
   20b08:	vneg.f64	d7, d7
   20b0c:	ldr	r3, [fp, #24]
   20b10:	vstr	d7, [r3]
   20b14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   20b18:	mov	r0, r3
   20b1c:	sub	sp, fp, #4
   20b20:	pop	{fp, pc}
   20b24:	push	{fp}		; (str fp, [sp, #-4]!)
   20b28:	add	fp, sp, #0
   20b2c:	sub	sp, sp, #20
   20b30:	str	r0, [fp, #-8]
   20b34:	str	r1, [fp, #-12]
   20b38:	str	r2, [fp, #-16]
   20b3c:	str	r3, [fp, #-20]	; 0xffffffec
   20b40:	ldr	r1, [fp, #-20]	; 0xffffffec
   20b44:	mov	r2, #0
   20b48:	mov	r3, #0
   20b4c:	strd	r2, [r1]
   20b50:	ldr	r3, [fp, #-8]
   20b54:	mov	r0, r3
   20b58:	add	sp, fp, #0
   20b5c:	pop	{fp}		; (ldr fp, [sp], #4)
   20b60:	bx	lr
   20b64:	push	{fp, lr}
   20b68:	add	fp, sp, #4
   20b6c:	sub	sp, sp, #88	; 0x58
   20b70:	str	r0, [fp, #-56]	; 0xffffffc8
   20b74:	str	r1, [fp, #-60]	; 0xffffffc4
   20b78:	str	r2, [fp, #-64]	; 0xffffffc0
   20b7c:	mov	r3, #0
   20b80:	str	r3, [fp, #-12]
   20b84:	mov	r3, #0
   20b88:	str	r3, [fp, #-16]
   20b8c:	mov	r2, #0
   20b90:	mov	r3, #0
   20b94:	strd	r2, [fp, #-28]	; 0xffffffe4
   20b98:	mov	r3, #0
   20b9c:	str	r3, [fp, #-32]	; 0xffffffe0
   20ba0:	mov	r3, #0
   20ba4:	str	r3, [fp, #-36]	; 0xffffffdc
   20ba8:	mov	r3, #0
   20bac:	str	r3, [fp, #-40]	; 0xffffffd8
   20bb0:	mov	r3, #0
   20bb4:	str	r3, [fp, #-44]	; 0xffffffd4
   20bb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20bbc:	mov	r2, #0
   20bc0:	mov	r3, #0
   20bc4:	strd	r2, [r1]
   20bc8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   20bcc:	add	r3, r3, #1
   20bd0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20bd4:	add	r3, r2, r3
   20bd8:	str	r3, [fp, #-8]
   20bdc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   20be0:	cmp	r3, #1000	; 0x3e8
   20be4:	ble	20bf8 <grisu3_diy_fp_encode_double@@Base+0xc88>
   20be8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20bec:	add	r3, r3, #1000	; 0x3e8
   20bf0:	add	r3, r3, #1
   20bf4:	str	r3, [fp, #-8]
   20bf8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20bfc:	ldr	r3, [fp, #-8]
   20c00:	cmp	r2, r3
   20c04:	bne	20c10 <grisu3_diy_fp_encode_double@@Base+0xca0>
   20c08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c0c:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20c10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c14:	str	r3, [fp, #-48]	; 0xffffffd0
   20c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c1c:	ldrb	r3, [r3]
   20c20:	cmp	r3, #45	; 0x2d
   20c24:	bne	20c54 <grisu3_diy_fp_encode_double@@Base+0xce4>
   20c28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c2c:	add	r3, r3, #1
   20c30:	str	r3, [fp, #-56]	; 0xffffffc8
   20c34:	mov	r3, #1
   20c38:	str	r3, [fp, #-12]
   20c3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20c40:	ldr	r3, [fp, #-8]
   20c44:	cmp	r2, r3
   20c48:	bne	20c54 <grisu3_diy_fp_encode_double@@Base+0xce4>
   20c4c:	mov	r3, #0
   20c50:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20c54:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c58:	ldrb	r3, [r3]
   20c5c:	cmp	r3, #48	; 0x30
   20c60:	bne	20d00 <grisu3_diy_fp_encode_double@@Base+0xd90>
   20c64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c68:	add	r3, r3, #1
   20c6c:	str	r3, [fp, #-56]	; 0xffffffc8
   20c70:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20c74:	ldr	r3, [fp, #-8]
   20c78:	cmp	r2, r3
   20c7c:	beq	20cdc <grisu3_diy_fp_encode_double@@Base+0xd6c>
   20c80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20c84:	ldrb	r3, [r3]
   20c88:	orr	r3, r3, #32
   20c8c:	uxtb	r3, r3
   20c90:	cmp	r3, #120	; 0x78
   20c94:	bne	20cdc <grisu3_diy_fp_encode_double@@Base+0xd6c>
   20c98:	ldr	r3, [fp, #-64]	; 0xffffffc0
   20c9c:	ldr	r2, [fp, #-12]
   20ca0:	ldr	r1, [fp, #-8]
   20ca4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   20ca8:	bl	20b24 <grisu3_diy_fp_encode_double@@Base+0xbb4>
   20cac:	str	r0, [fp, #-52]	; 0xffffffcc
   20cb0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   20cb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20cb8:	cmp	r2, r3
   20cbc:	bne	20cc8 <grisu3_diy_fp_encode_double@@Base+0xd58>
   20cc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20cc4:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20cc8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20ccc:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20cd0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20cd4:	add	r3, r3, #1
   20cd8:	str	r3, [fp, #-56]	; 0xffffffc8
   20cdc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20ce0:	ldr	r3, [fp, #-8]
   20ce4:	cmp	r2, r3
   20ce8:	beq	20d5c <grisu3_diy_fp_encode_double@@Base+0xdec>
   20cec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20cf0:	ldrb	r3, [r3]
   20cf4:	cmp	r3, #48	; 0x30
   20cf8:	beq	20cd0 <grisu3_diy_fp_encode_double@@Base+0xd60>
   20cfc:	b	20d5c <grisu3_diy_fp_encode_double@@Base+0xdec>
   20d00:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20d04:	ldrb	r3, [r3]
   20d08:	cmp	r3, #48	; 0x30
   20d0c:	bls	20d20 <grisu3_diy_fp_encode_double@@Base+0xdb0>
   20d10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20d14:	ldrb	r3, [r3]
   20d18:	cmp	r3, #57	; 0x39
   20d1c:	bls	20d3c <grisu3_diy_fp_encode_double@@Base+0xdcc>
   20d20:	ldr	r3, [fp, #-12]
   20d24:	cmp	r3, #0
   20d28:	bne	20d34 <grisu3_diy_fp_encode_double@@Base+0xdc4>
   20d2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   20d30:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20d34:	mov	r3, #0
   20d38:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20d3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20d40:	add	r2, r3, #1
   20d44:	str	r2, [fp, #-56]	; 0xffffffc8
   20d48:	ldrb	r3, [r3]
   20d4c:	sub	r3, r3, #48	; 0x30
   20d50:	mov	r2, r3
   20d54:	asr	r3, r2, #31
   20d58:	strd	r2, [fp, #-28]	; 0xffffffe4
   20d5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20d60:	str	r3, [fp, #-52]	; 0xffffffcc
   20d64:	b	20e18 <grisu3_diy_fp_encode_double@@Base+0xea8>
   20d68:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   20d6c:	add	r1, pc, #948	; 0x3b4
   20d70:	ldrd	r0, [r1]
   20d74:	cmp	r3, r1
   20d78:	cmpeq	r2, r0
   20d7c:	bls	20dbc <grisu3_diy_fp_encode_double@@Base+0xe4c>
   20d80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20d84:	ldrb	r3, [r3]
   20d88:	cmp	r3, #52	; 0x34
   20d8c:	movhi	r3, #1
   20d90:	movls	r3, #0
   20d94:	uxtb	r3, r3
   20d98:	uxtb	r2, r3
   20d9c:	mov	r3, #0
   20da0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   20da4:	adds	r2, r2, r0
   20da8:	adc	r3, r3, r1
   20dac:	strd	r2, [fp, #-28]	; 0xffffffe4
   20db0:	mov	r3, #1
   20db4:	str	r3, [fp, #-44]	; 0xffffffd4
   20db8:	b	20e48 <grisu3_diy_fp_encode_double@@Base+0xed8>
   20dbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20dc0:	mov	r2, #10
   20dc4:	mul	r2, r2, r3
   20dc8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20dcc:	mov	r1, #0
   20dd0:	mul	r3, r1, r3
   20dd4:	add	r1, r2, r3
   20dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20ddc:	mov	r2, #10
   20de0:	umull	r2, r3, r3, r2
   20de4:	add	r1, r1, r3
   20de8:	mov	r3, r1
   20dec:	ldr	r1, [fp, #-56]	; 0xffffffc8
   20df0:	add	r0, r1, #1
   20df4:	str	r0, [fp, #-56]	; 0xffffffc8
   20df8:	ldrb	r1, [r1]
   20dfc:	uxtb	r0, r1
   20e00:	mov	r1, #0
   20e04:	adds	r2, r2, r0
   20e08:	adc	r3, r3, r1
   20e0c:	subs	r2, r2, #48	; 0x30
   20e10:	sbc	r3, r3, #0
   20e14:	strd	r2, [fp, #-28]	; 0xffffffe4
   20e18:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20e1c:	ldr	r3, [fp, #-8]
   20e20:	cmp	r2, r3
   20e24:	beq	20e48 <grisu3_diy_fp_encode_double@@Base+0xed8>
   20e28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20e2c:	ldrb	r3, [r3]
   20e30:	cmp	r3, #47	; 0x2f
   20e34:	bls	20e48 <grisu3_diy_fp_encode_double@@Base+0xed8>
   20e38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20e3c:	ldrb	r3, [r3]
   20e40:	cmp	r3, #57	; 0x39
   20e44:	bls	20d68 <grisu3_diy_fp_encode_double@@Base+0xdf8>
   20e48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20e4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20e50:	sub	r3, r2, r3
   20e54:	str	r3, [fp, #-40]	; 0xffffffd8
   20e58:	b	20e74 <grisu3_diy_fp_encode_double@@Base+0xf04>
   20e5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20e60:	add	r3, r3, #1
   20e64:	str	r3, [fp, #-32]	; 0xffffffe0
   20e68:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20e6c:	add	r3, r3, #1
   20e70:	str	r3, [fp, #-56]	; 0xffffffc8
   20e74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20e78:	ldr	r3, [fp, #-8]
   20e7c:	cmp	r2, r3
   20e80:	beq	20e94 <grisu3_diy_fp_encode_double@@Base+0xf24>
   20e84:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20e88:	ldrb	r3, [r3]
   20e8c:	cmp	r3, #48	; 0x30
   20e90:	beq	20e5c <grisu3_diy_fp_encode_double@@Base+0xeec>
   20e94:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20e98:	ldr	r3, [fp, #-8]
   20e9c:	cmp	r2, r3
   20ea0:	beq	20f30 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   20ea4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20ea8:	ldrb	r3, [r3]
   20eac:	cmp	r3, #48	; 0x30
   20eb0:	bls	20f30 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   20eb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20eb8:	ldrb	r3, [r3]
   20ebc:	cmp	r3, #57	; 0x39
   20ec0:	bhi	20f30 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   20ec4:	mov	r3, #1
   20ec8:	str	r3, [fp, #-44]	; 0xffffffd4
   20ecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20ed0:	add	r3, r3, #1
   20ed4:	str	r3, [fp, #-32]	; 0xffffffe0
   20ed8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20edc:	add	r3, r3, #1
   20ee0:	str	r3, [fp, #-56]	; 0xffffffc8
   20ee4:	b	20f00 <grisu3_diy_fp_encode_double@@Base+0xf90>
   20ee8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   20eec:	add	r3, r3, #1
   20ef0:	str	r3, [fp, #-32]	; 0xffffffe0
   20ef4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20ef8:	add	r3, r3, #1
   20efc:	str	r3, [fp, #-56]	; 0xffffffc8
   20f00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20f04:	ldr	r3, [fp, #-8]
   20f08:	cmp	r2, r3
   20f0c:	beq	20f30 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   20f10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f14:	ldrb	r3, [r3]
   20f18:	cmp	r3, #47	; 0x2f
   20f1c:	bls	20f30 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   20f20:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f24:	ldrb	r3, [r3]
   20f28:	cmp	r3, #57	; 0x39
   20f2c:	bls	20ee8 <grisu3_diy_fp_encode_double@@Base+0xf78>
   20f30:	ldr	r2, [fp, #-56]	; 0xffffffc8
   20f34:	ldr	r3, [fp, #-8]
   20f38:	cmp	r2, r3
   20f3c:	beq	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   20f40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f44:	ldrb	r3, [r3]
   20f48:	cmp	r3, #46	; 0x2e
   20f4c:	bne	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   20f50:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f54:	add	r3, r3, #1
   20f58:	str	r3, [fp, #-56]	; 0xffffffc8
   20f5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f60:	str	r3, [fp, #-52]	; 0xffffffcc
   20f64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f68:	ldrb	r3, [r3]
   20f6c:	cmp	r3, #47	; 0x2f
   20f70:	bls	20f84 <grisu3_diy_fp_encode_double@@Base+0x1014>
   20f74:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20f78:	ldrb	r3, [r3]
   20f7c:	cmp	r3, #57	; 0x39
   20f80:	bls	21054 <grisu3_diy_fp_encode_double@@Base+0x10e4>
   20f84:	mov	r3, #0
   20f88:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   20f8c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   20f90:	add	r1, pc, #400	; 0x190
   20f94:	ldrd	r0, [r1]
   20f98:	cmp	r3, r1
   20f9c:	cmpeq	r2, r0
   20fa0:	bls	20fec <grisu3_diy_fp_encode_double@@Base+0x107c>
   20fa4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   20fa8:	cmp	r3, #0
   20fac:	bne	21088 <grisu3_diy_fp_encode_double@@Base+0x1118>
   20fb0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   20fb4:	ldrb	r3, [r3]
   20fb8:	cmp	r3, #52	; 0x34
   20fbc:	movhi	r3, #1
   20fc0:	movls	r3, #0
   20fc4:	uxtb	r3, r3
   20fc8:	uxtb	r2, r3
   20fcc:	mov	r3, #0
   20fd0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   20fd4:	adds	r2, r2, r0
   20fd8:	adc	r3, r3, r1
   20fdc:	strd	r2, [fp, #-28]	; 0xffffffe4
   20fe0:	mov	r3, #1
   20fe4:	str	r3, [fp, #-44]	; 0xffffffd4
   20fe8:	b	21088 <grisu3_diy_fp_encode_double@@Base+0x1118>
   20fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   20ff0:	mov	r2, #10
   20ff4:	mul	r2, r2, r3
   20ff8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   20ffc:	mov	r1, #0
   21000:	mul	r3, r1, r3
   21004:	add	r1, r2, r3
   21008:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2100c:	mov	r2, #10
   21010:	umull	r2, r3, r3, r2
   21014:	add	r1, r1, r3
   21018:	mov	r3, r1
   2101c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   21020:	add	r0, r1, #1
   21024:	str	r0, [fp, #-56]	; 0xffffffc8
   21028:	ldrb	r1, [r1]
   2102c:	uxtb	r0, r1
   21030:	mov	r1, #0
   21034:	adds	r2, r2, r0
   21038:	adc	r3, r3, r1
   2103c:	subs	r2, r2, #48	; 0x30
   21040:	sbc	r3, r3, #0
   21044:	strd	r2, [fp, #-28]	; 0xffffffe4
   21048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2104c:	sub	r3, r3, #1
   21050:	str	r3, [fp, #-32]	; 0xffffffe0
   21054:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21058:	ldr	r3, [fp, #-8]
   2105c:	cmp	r2, r3
   21060:	beq	2108c <grisu3_diy_fp_encode_double@@Base+0x111c>
   21064:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21068:	ldrb	r3, [r3]
   2106c:	cmp	r3, #47	; 0x2f
   21070:	bls	2108c <grisu3_diy_fp_encode_double@@Base+0x111c>
   21074:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21078:	ldrb	r3, [r3]
   2107c:	cmp	r3, #57	; 0x39
   21080:	bls	20f8c <grisu3_diy_fp_encode_double@@Base+0x101c>
   21084:	b	2108c <grisu3_diy_fp_encode_double@@Base+0x111c>
   21088:	nop			; (mov r0, r0)
   2108c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21090:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21094:	sub	r3, r2, r3
   21098:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2109c:	add	r3, r2, r3
   210a0:	str	r3, [fp, #-40]	; 0xffffffd8
   210a4:	b	210c0 <grisu3_diy_fp_encode_double@@Base+0x1150>
   210a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   210ac:	add	r3, r3, #1
   210b0:	str	r3, [fp, #-32]	; 0xffffffe0
   210b4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   210b8:	add	r3, r3, #1
   210bc:	str	r3, [fp, #-56]	; 0xffffffc8
   210c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   210c4:	ldr	r3, [fp, #-8]
   210c8:	cmp	r2, r3
   210cc:	beq	210e0 <grisu3_diy_fp_encode_double@@Base+0x1170>
   210d0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   210d4:	ldrb	r3, [r3]
   210d8:	cmp	r3, #48	; 0x30
   210dc:	beq	210a8 <grisu3_diy_fp_encode_double@@Base+0x1138>
   210e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   210e4:	ldr	r3, [fp, #-8]
   210e8:	cmp	r2, r3
   210ec:	beq	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   210f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   210f4:	ldrb	r3, [r3]
   210f8:	cmp	r3, #48	; 0x30
   210fc:	bls	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   21100:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21104:	ldrb	r3, [r3]
   21108:	cmp	r3, #57	; 0x39
   2110c:	bhi	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   21110:	mov	r3, #1
   21114:	str	r3, [fp, #-44]	; 0xffffffd4
   21118:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2111c:	add	r3, r3, #1
   21120:	str	r3, [fp, #-56]	; 0xffffffc8
   21124:	b	2113c <grisu3_diy_fp_encode_double@@Base+0x11cc>
   21128:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2112c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   21130:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21134:	add	r3, r3, #1
   21138:	str	r3, [fp, #-56]	; 0xffffffc8
   2113c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21140:	ldr	r3, [fp, #-8]
   21144:	cmp	r2, r3
   21148:	beq	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   2114c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21150:	ldrb	r3, [r3]
   21154:	cmp	r3, #47	; 0x2f
   21158:	bls	2116c <grisu3_diy_fp_encode_double@@Base+0x11fc>
   2115c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21160:	ldrb	r3, [r3]
   21164:	cmp	r3, #57	; 0x39
   21168:	bls	21130 <grisu3_diy_fp_encode_double@@Base+0x11c0>
   2116c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   21170:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21174:	add	r3, r2, r3
   21178:	str	r3, [fp, #-32]	; 0xffffffe0
   2117c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21180:	ldr	r3, [fp, #-8]
   21184:	cmp	r2, r3
   21188:	beq	212f4 <grisu3_diy_fp_encode_double@@Base+0x1384>
   2118c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21190:	ldrb	r3, [r3]
   21194:	orr	r3, r3, #32
   21198:	uxtb	r3, r3
   2119c:	cmp	r3, #101	; 0x65
   211a0:	bne	212f4 <grisu3_diy_fp_encode_double@@Base+0x1384>
   211a4:	ldr	r2, [fp, #-8]
   211a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   211ac:	sub	r3, r2, r3
   211b0:	cmp	r3, #1
   211b4:	bgt	211c0 <grisu3_diy_fp_encode_double@@Base+0x1250>
   211b8:	mov	r3, #0
   211bc:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   211c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   211c4:	add	r3, r3, #1
   211c8:	str	r3, [fp, #-56]	; 0xffffffc8
   211cc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   211d0:	ldrb	r3, [r3]
   211d4:	cmp	r3, #43	; 0x2b
   211d8:	bne	21200 <grisu3_diy_fp_encode_double@@Base+0x1290>
   211dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   211e0:	add	r3, r3, #1
   211e4:	str	r3, [fp, #-56]	; 0xffffffc8
   211e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   211ec:	ldr	r3, [fp, #-8]
   211f0:	cmp	r2, r3
   211f4:	bne	2123c <grisu3_diy_fp_encode_double@@Base+0x12cc>
   211f8:	mov	r3, #0
   211fc:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   21200:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21204:	ldrb	r3, [r3]
   21208:	cmp	r3, #45	; 0x2d
   2120c:	bne	2123c <grisu3_diy_fp_encode_double@@Base+0x12cc>
   21210:	mov	r3, #1
   21214:	str	r3, [fp, #-16]
   21218:	ldr	r3, [fp, #-56]	; 0xffffffc8
   2121c:	add	r3, r3, #1
   21220:	str	r3, [fp, #-56]	; 0xffffffc8
   21224:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21228:	ldr	r3, [fp, #-8]
   2122c:	cmp	r2, r3
   21230:	bne	2123c <grisu3_diy_fp_encode_double@@Base+0x12cc>
   21234:	mov	r3, #0
   21238:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   2123c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21240:	ldrb	r3, [r3]
   21244:	cmp	r3, #47	; 0x2f
   21248:	bls	2125c <grisu3_diy_fp_encode_double@@Base+0x12ec>
   2124c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21250:	ldrb	r3, [r3]
   21254:	cmp	r3, #57	; 0x39
   21258:	bls	21264 <grisu3_diy_fp_encode_double@@Base+0x12f4>
   2125c:	mov	r3, #0
   21260:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   21264:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21268:	add	r2, r3, #1
   2126c:	str	r2, [fp, #-56]	; 0xffffffc8
   21270:	ldrb	r3, [r3]
   21274:	sub	r3, r3, #48	; 0x30
   21278:	str	r3, [fp, #-36]	; 0xffffffdc
   2127c:	b	212c4 <grisu3_diy_fp_encode_double@@Base+0x1354>
   21280:	ldr	r3, [fp, #-36]	; 0xffffffdc
   21284:	cmp	r3, #32768	; 0x8000
   21288:	bge	212b8 <grisu3_diy_fp_encode_double@@Base+0x1348>
   2128c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   21290:	mov	r3, r2
   21294:	lsl	r3, r3, #2
   21298:	add	r3, r3, r2
   2129c:	lsl	r3, r3, #1
   212a0:	mov	r2, r3
   212a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   212a8:	ldrb	r3, [r3]
   212ac:	add	r3, r2, r3
   212b0:	sub	r3, r3, #48	; 0x30
   212b4:	str	r3, [fp, #-36]	; 0xffffffdc
   212b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   212bc:	add	r3, r3, #1
   212c0:	str	r3, [fp, #-56]	; 0xffffffc8
   212c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   212c8:	ldr	r3, [fp, #-8]
   212cc:	cmp	r2, r3
   212d0:	beq	212f4 <grisu3_diy_fp_encode_double@@Base+0x1384>
   212d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   212d8:	ldrb	r3, [r3]
   212dc:	cmp	r3, #47	; 0x2f
   212e0:	bls	212f4 <grisu3_diy_fp_encode_double@@Base+0x1384>
   212e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   212e8:	ldrb	r3, [r3]
   212ec:	cmp	r3, #57	; 0x39
   212f0:	bls	21280 <grisu3_diy_fp_encode_double@@Base+0x1310>
   212f4:	ldr	r3, [fp, #-16]
   212f8:	cmp	r3, #0
   212fc:	beq	2130c <grisu3_diy_fp_encode_double@@Base+0x139c>
   21300:	ldr	r3, [fp, #-36]	; 0xffffffdc
   21304:	rsb	r3, r3, #0
   21308:	b	21310 <grisu3_diy_fp_encode_double@@Base+0x13a0>
   2130c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   21310:	ldr	r2, [fp, #-32]	; 0xffffffe0
   21314:	add	r3, r2, r3
   21318:	str	r3, [fp, #-32]	; 0xffffffe0
   2131c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21320:	ldr	r3, [fp, #-8]
   21324:	cmp	r2, r3
   21328:	bne	21334 <grisu3_diy_fp_encode_double@@Base+0x13c4>
   2132c:	mov	r3, #0
   21330:	b	21370 <grisu3_diy_fp_encode_double@@Base+0x1400>
   21334:	ldr	r3, [fp, #-64]	; 0xffffffc0
   21338:	str	r3, [sp, #20]
   2133c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   21340:	str	r3, [sp, #16]
   21344:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21348:	str	r3, [sp, #12]
   2134c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21350:	str	r3, [sp, #8]
   21354:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   21358:	strd	r2, [sp]
   2135c:	ldr	r2, [fp, #-12]
   21360:	ldr	r1, [fp, #-56]	; 0xffffffc8
   21364:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21368:	bl	204ac <grisu3_diy_fp_encode_double@@Base+0x53c>
   2136c:	mov	r3, r0
   21370:	mov	r0, r3
   21374:	sub	sp, fp, #4
   21378:	pop	{fp, pc}
   2137c:	push	{fp, lr}
   21380:	add	fp, sp, #4
   21384:	sub	sp, sp, #16
   21388:	str	r0, [fp, #-8]
   2138c:	str	r1, [fp, #-12]
   21390:	str	r2, [fp, #-16]
   21394:	ldr	r2, [fp, #-16]
   21398:	ldr	r1, [fp, #-12]
   2139c:	ldr	r0, [fp, #-8]
   213a0:	bl	20b64 <grisu3_diy_fp_encode_double@@Base+0xbf4>
   213a4:	mov	r3, r0
   213a8:	mov	r0, r3
   213ac:	sub	sp, fp, #4
   213b0:	pop	{fp, pc}
   213b4:	push	{fp, lr}
   213b8:	add	fp, sp, #4
   213bc:	sub	sp, sp, #40	; 0x28
   213c0:	str	r0, [fp, #-32]	; 0xffffffe0
   213c4:	str	r1, [fp, #-36]	; 0xffffffdc
   213c8:	str	r2, [fp, #-40]	; 0xffffffd8
   213cc:	ldr	r3, [pc, #180]	; 21488 <grisu3_diy_fp_encode_double@@Base+0x1518>
   213d0:	str	r3, [fp, #-24]	; 0xffffffe8
   213d4:	sub	r3, fp, #20
   213d8:	mov	r2, r3
   213dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   213e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   213e4:	bl	2137c <grisu3_diy_fp_encode_double@@Base+0x140c>
   213e8:	str	r0, [fp, #-8]
   213ec:	vldr	d7, [fp, #-20]	; 0xffffffec
   213f0:	vcvt.f32.f64	s15, d7
   213f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   213f8:	vstr	s15, [r3]
   213fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21400:	vldr	s15, [r3]
   21404:	vabs.f32	s15, s15
   21408:	vldr	s14, [pc, #116]	; 21484 <grisu3_diy_fp_encode_double@@Base+0x1514>
   2140c:	vcmp.f32	s15, s14
   21410:	vmrs	APSR_nzcv, fpscr
   21414:	movle	r3, #1
   21418:	movgt	r3, #0
   2141c:	uxtb	r3, r3
   21420:	eor	r3, r3, #1
   21424:	uxtb	r3, r3
   21428:	cmp	r3, #0
   2142c:	beq	21438 <grisu3_diy_fp_encode_double@@Base+0x14c8>
   21430:	mov	r3, #1
   21434:	b	2143c <grisu3_diy_fp_encode_double@@Base+0x14cc>
   21438:	mov	r3, #0
   2143c:	cmp	r3, #0
   21440:	beq	21474 <grisu3_diy_fp_encode_double@@Base+0x1504>
   21444:	vldr	d7, [fp, #-20]	; 0xffffffec
   21448:	vcmpe.f64	d7, #0.0
   2144c:	vmrs	APSR_nzcv, fpscr
   21450:	bpl	21460 <grisu3_diy_fp_encode_double@@Base+0x14f0>
   21454:	vldr	s15, [fp, #-24]	; 0xffffffe8
   21458:	vneg.f32	s15, s15
   2145c:	b	21464 <grisu3_diy_fp_encode_double@@Base+0x14f4>
   21460:	vldr	s15, [fp, #-24]	; 0xffffffe8
   21464:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21468:	vstr	s15, [r3]
   2146c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21470:	b	21478 <grisu3_diy_fp_encode_double@@Base+0x1508>
   21474:	ldr	r3, [fp, #-8]
   21478:	mov	r0, r3
   2147c:	sub	sp, fp, #4
   21480:	pop	{fp, pc}
   21484:	svcvc	0x007fffff
   21488:	svcvc	0x00800000
   2148c:	push	{fp}		; (str fp, [sp, #-4]!)
   21490:	add	fp, sp, #0
   21494:	sub	sp, sp, #12
   21498:	str	r0, [fp, #-8]
   2149c:	ldr	r3, [fp, #-8]
   214a0:	cmp	r3, #5
   214a4:	addls	pc, pc, r3, lsl #2
   214a8:	b	2150c <grisu3_diy_fp_encode_double@@Base+0x159c>
   214ac:	b	214c4 <grisu3_diy_fp_encode_double@@Base+0x1554>
   214b0:	b	214e8 <grisu3_diy_fp_encode_double@@Base+0x1578>
   214b4:	b	214d0 <grisu3_diy_fp_encode_double@@Base+0x1560>
   214b8:	b	214dc <grisu3_diy_fp_encode_double@@Base+0x156c>
   214bc:	b	214f4 <grisu3_diy_fp_encode_double@@Base+0x1584>
   214c0:	b	21500 <grisu3_diy_fp_encode_double@@Base+0x1590>
   214c4:	ldr	r3, [pc, #88]	; 21524 <grisu3_diy_fp_encode_double@@Base+0x15b4>
   214c8:	add	r3, pc, r3
   214cc:	b	21514 <grisu3_diy_fp_encode_double@@Base+0x15a4>
   214d0:	ldr	r3, [pc, #80]	; 21528 <grisu3_diy_fp_encode_double@@Base+0x15b8>
   214d4:	add	r3, pc, r3
   214d8:	b	21514 <grisu3_diy_fp_encode_double@@Base+0x15a4>
   214dc:	ldr	r3, [pc, #72]	; 2152c <grisu3_diy_fp_encode_double@@Base+0x15bc>
   214e0:	add	r3, pc, r3
   214e4:	b	21514 <grisu3_diy_fp_encode_double@@Base+0x15a4>
   214e8:	ldr	r3, [pc, #64]	; 21530 <grisu3_diy_fp_encode_double@@Base+0x15c0>
   214ec:	add	r3, pc, r3
   214f0:	b	21514 <grisu3_diy_fp_encode_double@@Base+0x15a4>
   214f4:	ldr	r3, [pc, #56]	; 21534 <grisu3_diy_fp_encode_double@@Base+0x15c4>
   214f8:	add	r3, pc, r3
   214fc:	b	21514 <grisu3_diy_fp_encode_double@@Base+0x15a4>
   21500:	ldr	r3, [pc, #48]	; 21538 <grisu3_diy_fp_encode_double@@Base+0x15c8>
   21504:	add	r3, pc, r3
   21508:	b	21514 <grisu3_diy_fp_encode_double@@Base+0x15a4>
   2150c:	ldr	r3, [pc, #40]	; 2153c <grisu3_diy_fp_encode_double@@Base+0x15cc>
   21510:	add	r3, pc, r3
   21514:	mov	r0, r3
   21518:	add	sp, fp, #0
   2151c:	pop	{fp}		; (ldr fp, [sp], #4)
   21520:	bx	lr
   21524:	andeq	r5, r0, r8, asr pc
   21528:	andeq	r5, r0, r0, asr pc
   2152c:	andeq	r5, r0, r8, asr pc
   21530:	andeq	r5, r0, ip, asr pc
   21534:	andeq	r5, r0, r4, ror #30
   21538:	andeq	r5, r0, ip, ror #30
   2153c:	andeq	r5, r0, r8, ror pc
   21540:	push	{fp}		; (str fp, [sp, #-4]!)
   21544:	add	fp, sp, #0
   21548:	sub	sp, sp, #28
   2154c:	str	r0, [fp, #-24]	; 0xffffffe8
   21550:	str	r1, [fp, #-28]	; 0xffffffe4
   21554:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21558:	ldr	r3, [pc, #156]	; 215fc <grisu3_diy_fp_encode_double@@Base+0x168c>
   2155c:	umull	r1, r3, r3, r2
   21560:	lsr	r1, r3, #1
   21564:	mov	r3, r1
   21568:	lsl	r3, r3, #1
   2156c:	add	r3, r3, r1
   21570:	sub	r3, r2, r3
   21574:	str	r3, [fp, #-12]
   21578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2157c:	lsl	r3, r3, #2
   21580:	ldr	r2, [pc, #116]	; 215fc <grisu3_diy_fp_encode_double@@Base+0x168c>
   21584:	umull	r2, r3, r2, r3
   21588:	lsr	r3, r3, #1
   2158c:	add	r3, r3, #3
   21590:	bic	r3, r3, #3
   21594:	str	r3, [fp, #-8]
   21598:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2159c:	and	r3, r3, #128	; 0x80
   215a0:	str	r3, [fp, #-16]
   215a4:	ldr	r3, [fp, #-16]
   215a8:	cmp	r3, #0
   215ac:	bne	215e8 <grisu3_diy_fp_encode_double@@Base+0x1678>
   215b0:	ldr	r3, [fp, #-12]
   215b4:	cmp	r3, #1
   215b8:	beq	215d8 <grisu3_diy_fp_encode_double@@Base+0x1668>
   215bc:	cmp	r3, #2
   215c0:	beq	215c8 <grisu3_diy_fp_encode_double@@Base+0x1658>
   215c4:	b	215e8 <grisu3_diy_fp_encode_double@@Base+0x1678>
   215c8:	ldr	r3, [fp, #-8]
   215cc:	sub	r3, r3, #1
   215d0:	str	r3, [fp, #-8]
   215d4:	b	215e8 <grisu3_diy_fp_encode_double@@Base+0x1678>
   215d8:	ldr	r3, [fp, #-8]
   215dc:	sub	r3, r3, #2
   215e0:	str	r3, [fp, #-8]
   215e4:	nop			; (mov r0, r0)
   215e8:	ldr	r3, [fp, #-8]
   215ec:	mov	r0, r3
   215f0:	add	sp, fp, #0
   215f4:	pop	{fp}		; (ldr fp, [sp], #4)
   215f8:	bx	lr
   215fc:	bge	feacc0b0 <__bss_end__@@Base+0xfea93fcc>
   21600:	push	{fp}		; (str fp, [sp, #-4]!)
   21604:	add	fp, sp, #0
   21608:	sub	sp, sp, #20
   2160c:	str	r0, [fp, #-16]
   21610:	ldr	r3, [fp, #-16]
   21614:	and	r3, r3, #3
   21618:	str	r3, [fp, #-8]
   2161c:	ldr	r3, [fp, #-16]
   21620:	lsr	r2, r3, #2
   21624:	mov	r3, r2
   21628:	lsl	r3, r3, #1
   2162c:	add	r3, r3, r2
   21630:	str	r3, [fp, #-12]
   21634:	ldr	r3, [fp, #-8]
   21638:	cmp	r3, #2
   2163c:	beq	21654 <grisu3_diy_fp_encode_double@@Base+0x16e4>
   21640:	cmp	r3, #3
   21644:	bne	21660 <grisu3_diy_fp_encode_double@@Base+0x16f0>
   21648:	ldr	r3, [fp, #-12]
   2164c:	add	r3, r3, #2
   21650:	b	21664 <grisu3_diy_fp_encode_double@@Base+0x16f4>
   21654:	ldr	r3, [fp, #-12]
   21658:	add	r3, r3, #1
   2165c:	b	21664 <grisu3_diy_fp_encode_double@@Base+0x16f4>
   21660:	ldr	r3, [fp, #-12]
   21664:	mov	r0, r3
   21668:	add	sp, fp, #0
   2166c:	pop	{fp}		; (ldr fp, [sp], #4)
   21670:	bx	lr
   21674:	push	{fp}		; (str fp, [sp, #-4]!)
   21678:	add	fp, sp, #0
   2167c:	sub	sp, sp, #52	; 0x34
   21680:	str	r0, [fp, #-40]	; 0xffffffd8
   21684:	str	r1, [fp, #-44]	; 0xffffffd4
   21688:	str	r2, [fp, #-48]	; 0xffffffd0
   2168c:	str	r3, [fp, #-52]	; 0xffffffcc
   21690:	ldr	r3, [pc, #920]	; 21a30 <grisu3_diy_fp_encode_double@@Base+0x1ac0>
   21694:	add	r3, pc, r3
   21698:	str	r3, [fp, #-20]	; 0xffffffec
   2169c:	ldr	r3, [pc, #912]	; 21a34 <grisu3_diy_fp_encode_double@@Base+0x1ac4>
   216a0:	add	r3, pc, r3
   216a4:	str	r3, [fp, #-24]	; 0xffffffe8
   216a8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   216ac:	str	r3, [fp, #-28]	; 0xffffffe4
   216b0:	ldr	r3, [fp, #4]
   216b4:	and	r3, r3, #128	; 0x80
   216b8:	str	r3, [fp, #-32]	; 0xffffffe0
   216bc:	mov	r3, #0
   216c0:	str	r3, [fp, #-12]
   216c4:	mov	r3, #3
   216c8:	str	r3, [fp, #-16]
   216cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   216d0:	cmp	r3, #0
   216d4:	bne	216e4 <grisu3_diy_fp_encode_double@@Base+0x1774>
   216d8:	mov	r3, #2
   216dc:	str	r3, [fp, #-16]
   216e0:	b	219d4 <grisu3_diy_fp_encode_double@@Base+0x1a64>
   216e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   216e8:	ldr	r3, [r3]
   216ec:	str	r3, [fp, #-12]
   216f0:	ldr	r3, [fp, #4]
   216f4:	bic	r3, r3, #224	; 0xe0
   216f8:	str	r3, [fp, #4]
   216fc:	ldr	r3, [fp, #4]
   21700:	cmp	r3, #0
   21704:	beq	21714 <grisu3_diy_fp_encode_double@@Base+0x17a4>
   21708:	cmp	r3, #1
   2170c:	beq	21720 <grisu3_diy_fp_encode_double@@Base+0x17b0>
   21710:	b	219d4 <grisu3_diy_fp_encode_double@@Base+0x1a64>
   21714:	ldr	r3, [fp, #-20]	; 0xffffffec
   21718:	str	r3, [fp, #-8]
   2171c:	b	2172c <grisu3_diy_fp_encode_double@@Base+0x17bc>
   21720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21724:	str	r3, [fp, #-8]
   21728:	nop			; (mov r0, r0)
   2172c:	mov	r3, #0
   21730:	str	r3, [fp, #-16]
   21734:	b	21838 <grisu3_diy_fp_encode_double@@Base+0x18c8>
   21738:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2173c:	ldrb	r3, [r3]
   21740:	lsr	r3, r3, #2
   21744:	uxtb	r3, r3
   21748:	mov	r2, r3
   2174c:	ldr	r3, [fp, #-8]
   21750:	add	r3, r3, r2
   21754:	ldrb	r2, [r3]
   21758:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2175c:	strb	r2, [r3]
   21760:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21764:	add	r3, r3, #1
   21768:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2176c:	ldrb	r2, [r2]
   21770:	lsl	r2, r2, #4
   21774:	and	r2, r2, #48	; 0x30
   21778:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2177c:	add	r1, r1, #1
   21780:	ldrb	r1, [r1]
   21784:	lsr	r1, r1, #4
   21788:	uxtb	r1, r1
   2178c:	orr	r2, r2, r1
   21790:	mov	r1, r2
   21794:	ldr	r2, [fp, #-8]
   21798:	add	r2, r2, r1
   2179c:	ldrb	r2, [r2]
   217a0:	strb	r2, [r3]
   217a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   217a8:	add	r3, r3, #2
   217ac:	ldr	r2, [fp, #-44]	; 0xffffffd4
   217b0:	add	r2, r2, #1
   217b4:	ldrb	r2, [r2]
   217b8:	lsl	r2, r2, #2
   217bc:	and	r2, r2, #60	; 0x3c
   217c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   217c4:	add	r1, r1, #2
   217c8:	ldrb	r1, [r1]
   217cc:	lsr	r1, r1, #6
   217d0:	uxtb	r1, r1
   217d4:	orr	r2, r2, r1
   217d8:	mov	r1, r2
   217dc:	ldr	r2, [fp, #-8]
   217e0:	add	r2, r2, r1
   217e4:	ldrb	r2, [r2]
   217e8:	strb	r2, [r3]
   217ec:	ldr	r3, [fp, #-40]	; 0xffffffd8
   217f0:	add	r3, r3, #3
   217f4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   217f8:	add	r2, r2, #2
   217fc:	ldrb	r2, [r2]
   21800:	and	r2, r2, #63	; 0x3f
   21804:	ldr	r1, [fp, #-8]
   21808:	add	r2, r1, r2
   2180c:	ldrb	r2, [r2]
   21810:	strb	r2, [r3]
   21814:	ldr	r3, [fp, #-12]
   21818:	sub	r3, r3, #3
   2181c:	str	r3, [fp, #-12]
   21820:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21824:	add	r3, r3, #4
   21828:	str	r3, [fp, #-40]	; 0xffffffd8
   2182c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   21830:	add	r3, r3, #3
   21834:	str	r3, [fp, #-44]	; 0xffffffd4
   21838:	ldr	r3, [fp, #-12]
   2183c:	cmp	r3, #2
   21840:	bhi	21738 <grisu3_diy_fp_encode_double@@Base+0x17c8>
   21844:	ldr	r3, [fp, #-12]
   21848:	cmp	r3, #1
   2184c:	beq	21920 <grisu3_diy_fp_encode_double@@Base+0x19b0>
   21850:	cmp	r3, #2
   21854:	bne	219b4 <grisu3_diy_fp_encode_double@@Base+0x1a44>
   21858:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2185c:	ldrb	r3, [r3]
   21860:	lsr	r3, r3, #2
   21864:	uxtb	r3, r3
   21868:	mov	r2, r3
   2186c:	ldr	r3, [fp, #-8]
   21870:	add	r3, r3, r2
   21874:	ldrb	r2, [r3]
   21878:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2187c:	strb	r2, [r3]
   21880:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21884:	add	r3, r3, #1
   21888:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2188c:	ldrb	r2, [r2]
   21890:	lsl	r2, r2, #4
   21894:	and	r2, r2, #48	; 0x30
   21898:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2189c:	add	r1, r1, #1
   218a0:	ldrb	r1, [r1]
   218a4:	lsr	r1, r1, #4
   218a8:	uxtb	r1, r1
   218ac:	orr	r2, r2, r1
   218b0:	mov	r1, r2
   218b4:	ldr	r2, [fp, #-8]
   218b8:	add	r2, r2, r1
   218bc:	ldrb	r2, [r2]
   218c0:	strb	r2, [r3]
   218c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   218c8:	add	r3, r3, #2
   218cc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   218d0:	add	r2, r2, #1
   218d4:	ldrb	r2, [r2]
   218d8:	lsl	r2, r2, #2
   218dc:	and	r2, r2, #60	; 0x3c
   218e0:	ldr	r1, [fp, #-8]
   218e4:	add	r2, r1, r2
   218e8:	ldrb	r2, [r2]
   218ec:	strb	r2, [r3]
   218f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   218f4:	add	r3, r3, #3
   218f8:	str	r3, [fp, #-40]	; 0xffffffd8
   218fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21900:	cmp	r3, #0
   21904:	beq	219c0 <grisu3_diy_fp_encode_double@@Base+0x1a50>
   21908:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2190c:	add	r2, r3, #1
   21910:	str	r2, [fp, #-40]	; 0xffffffd8
   21914:	mov	r2, #61	; 0x3d
   21918:	strb	r2, [r3]
   2191c:	b	219c0 <grisu3_diy_fp_encode_double@@Base+0x1a50>
   21920:	ldr	r3, [fp, #-44]	; 0xffffffd4
   21924:	ldrb	r3, [r3]
   21928:	lsr	r3, r3, #2
   2192c:	uxtb	r3, r3
   21930:	mov	r2, r3
   21934:	ldr	r3, [fp, #-8]
   21938:	add	r3, r3, r2
   2193c:	ldrb	r2, [r3]
   21940:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21944:	strb	r2, [r3]
   21948:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2194c:	add	r3, r3, #1
   21950:	ldr	r2, [fp, #-44]	; 0xffffffd4
   21954:	ldrb	r2, [r2]
   21958:	lsl	r2, r2, #4
   2195c:	and	r2, r2, #48	; 0x30
   21960:	ldr	r1, [fp, #-8]
   21964:	add	r2, r1, r2
   21968:	ldrb	r2, [r2]
   2196c:	strb	r2, [r3]
   21970:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21974:	add	r3, r3, #2
   21978:	str	r3, [fp, #-40]	; 0xffffffd8
   2197c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21980:	cmp	r3, #0
   21984:	beq	219c8 <grisu3_diy_fp_encode_double@@Base+0x1a58>
   21988:	ldr	r3, [fp, #-40]	; 0xffffffd8
   2198c:	add	r2, r3, #1
   21990:	str	r2, [fp, #-40]	; 0xffffffd8
   21994:	mov	r2, #61	; 0x3d
   21998:	strb	r2, [r3]
   2199c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   219a0:	add	r2, r3, #1
   219a4:	str	r2, [fp, #-40]	; 0xffffffd8
   219a8:	mov	r2, #61	; 0x3d
   219ac:	strb	r2, [r3]
   219b0:	b	219c8 <grisu3_diy_fp_encode_double@@Base+0x1a58>
   219b4:	mov	r3, #0
   219b8:	str	r3, [fp, #-32]	; 0xffffffe0
   219bc:	b	219cc <grisu3_diy_fp_encode_double@@Base+0x1a5c>
   219c0:	nop			; (mov r0, r0)
   219c4:	b	219cc <grisu3_diy_fp_encode_double@@Base+0x1a5c>
   219c8:	nop			; (mov r0, r0)
   219cc:	mov	r3, #0
   219d0:	str	r3, [fp, #-12]
   219d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   219d8:	cmp	r3, #0
   219dc:	beq	219f8 <grisu3_diy_fp_encode_double@@Base+0x1a88>
   219e0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   219e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   219e8:	sub	r3, r2, r3
   219ec:	mov	r2, r3
   219f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   219f4:	str	r2, [r3]
   219f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   219fc:	cmp	r3, #0
   21a00:	beq	21a1c <grisu3_diy_fp_encode_double@@Base+0x1aac>
   21a04:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21a08:	ldr	r2, [r3]
   21a0c:	ldr	r3, [fp, #-12]
   21a10:	sub	r2, r2, r3
   21a14:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21a18:	str	r2, [r3]
   21a1c:	ldr	r3, [fp, #-16]
   21a20:	mov	r0, r3
   21a24:	add	sp, fp, #0
   21a28:	pop	{fp}		; (ldr fp, [sp], #4)
   21a2c:	bx	lr
   21a30:	andeq	r5, r0, r4, lsl #28
   21a34:	andeq	r5, r0, ip, lsr lr
   21a38:	push	{fp}		; (str fp, [sp, #-4]!)
   21a3c:	add	fp, sp, #0
   21a40:	sub	sp, sp, #60	; 0x3c
   21a44:	str	r0, [fp, #-48]	; 0xffffffd0
   21a48:	str	r1, [fp, #-52]	; 0xffffffcc
   21a4c:	str	r2, [fp, #-56]	; 0xffffffc8
   21a50:	str	r3, [fp, #-60]	; 0xffffffc4
   21a54:	mov	r3, #0
   21a58:	str	r3, [fp, #-8]
   21a5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21a60:	str	r3, [fp, #-36]	; 0xffffffdc
   21a64:	mvn	r3, #0
   21a68:	str	r3, [fp, #-20]	; 0xffffffec
   21a6c:	mvn	r3, #0
   21a70:	str	r3, [fp, #-24]	; 0xffffffe8
   21a74:	ldr	r3, [pc, #1376]	; 21fdc <grisu3_diy_fp_encode_double@@Base+0x206c>
   21a78:	add	r3, pc, r3
   21a7c:	str	r3, [fp, #-32]	; 0xffffffe0
   21a80:	ldr	r3, [fp, #4]
   21a84:	and	r3, r3, #32
   21a88:	str	r3, [fp, #-40]	; 0xffffffd8
   21a8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21a90:	cmp	r3, #0
   21a94:	beq	21aa4 <grisu3_diy_fp_encode_double@@Base+0x1b34>
   21a98:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21a9c:	ldr	r3, [r3]
   21aa0:	str	r3, [fp, #-24]	; 0xffffffe8
   21aa4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21aa8:	str	r3, [fp, #-28]	; 0xffffffe4
   21aac:	ldr	r3, [fp, #4]
   21ab0:	bic	r3, r3, #224	; 0xe0
   21ab4:	str	r3, [fp, #4]
   21ab8:	ldr	r3, [fp, #4]
   21abc:	cmp	r3, #0
   21ac0:	beq	21ad0 <grisu3_diy_fp_encode_double@@Base+0x1b60>
   21ac4:	cmp	r3, #1
   21ac8:	beq	21af8 <grisu3_diy_fp_encode_double@@Base+0x1b88>
   21acc:	b	21b20 <grisu3_diy_fp_encode_double@@Base+0x1bb0>
   21ad0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21ad4:	cmp	r3, #0
   21ad8:	beq	21ae8 <grisu3_diy_fp_encode_double@@Base+0x1b78>
   21adc:	ldr	r3, [pc, #1276]	; 21fe0 <grisu3_diy_fp_encode_double@@Base+0x2070>
   21ae0:	add	r3, pc, r3
   21ae4:	b	21af0 <grisu3_diy_fp_encode_double@@Base+0x1b80>
   21ae8:	ldr	r3, [pc, #1268]	; 21fe4 <grisu3_diy_fp_encode_double@@Base+0x2074>
   21aec:	add	r3, pc, r3
   21af0:	str	r3, [fp, #-32]	; 0xffffffe0
   21af4:	b	21b2c <grisu3_diy_fp_encode_double@@Base+0x1bbc>
   21af8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   21afc:	cmp	r3, #0
   21b00:	beq	21b10 <grisu3_diy_fp_encode_double@@Base+0x1ba0>
   21b04:	ldr	r3, [pc, #1244]	; 21fe8 <grisu3_diy_fp_encode_double@@Base+0x2078>
   21b08:	add	r3, pc, r3
   21b0c:	b	21b18 <grisu3_diy_fp_encode_double@@Base+0x1ba8>
   21b10:	ldr	r3, [pc, #1236]	; 21fec <grisu3_diy_fp_encode_double@@Base+0x207c>
   21b14:	add	r3, pc, r3
   21b18:	str	r3, [fp, #-32]	; 0xffffffe0
   21b1c:	b	21b2c <grisu3_diy_fp_encode_double@@Base+0x1bbc>
   21b20:	mov	r3, #3
   21b24:	str	r3, [fp, #-8]
   21b28:	b	21e14 <grisu3_diy_fp_encode_double@@Base+0x1ea4>
   21b2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21b30:	cmp	r3, #0
   21b34:	beq	21e08 <grisu3_diy_fp_encode_double@@Base+0x1e98>
   21b38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21b3c:	ldr	r3, [r3]
   21b40:	cmp	r3, #0
   21b44:	beq	21e08 <grisu3_diy_fp_encode_double@@Base+0x1e98>
   21b48:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21b4c:	ldr	r3, [r3]
   21b50:	str	r3, [fp, #-20]	; 0xffffffec
   21b54:	b	21e08 <grisu3_diy_fp_encode_double@@Base+0x1e98>
   21b58:	mov	r3, #0
   21b5c:	str	r3, [fp, #-12]
   21b60:	b	21d28 <grisu3_diy_fp_encode_double@@Base+0x1db8>
   21b64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21b68:	ldr	r3, [fp, #-12]
   21b6c:	cmp	r2, r3
   21b70:	bne	21b90 <grisu3_diy_fp_encode_double@@Base+0x1c20>
   21b74:	ldr	r3, [fp, #-12]
   21b78:	str	r3, [fp, #-16]
   21b7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21b80:	ldr	r3, [fp, #-12]
   21b84:	sub	r3, r2, r3
   21b88:	str	r3, [fp, #-24]	; 0xffffffe8
   21b8c:	b	21e64 <grisu3_diy_fp_encode_double@@Base+0x1ef4>
   21b90:	ldr	r2, [fp, #-52]	; 0xffffffcc
   21b94:	ldr	r3, [fp, #-12]
   21b98:	add	r3, r2, r3
   21b9c:	ldrb	r3, [r3]
   21ba0:	mov	r2, r3
   21ba4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21ba8:	add	r3, r3, r2
   21bac:	ldrb	r1, [r3]
   21bb0:	sub	r2, fp, #44	; 0x2c
   21bb4:	ldr	r3, [fp, #-12]
   21bb8:	add	r3, r2, r3
   21bbc:	mov	r2, r1
   21bc0:	strb	r2, [r3]
   21bc4:	sub	r2, fp, #44	; 0x2c
   21bc8:	ldr	r3, [fp, #-12]
   21bcc:	add	r3, r2, r3
   21bd0:	ldrb	r2, [r3]
   21bd4:	ldr	r3, [pc, #1044]	; 21ff0 <grisu3_diy_fp_encode_double@@Base+0x2080>
   21bd8:	add	r3, pc, r3
   21bdc:	ldrb	r3, [r3]
   21be0:	cmp	r2, r3
   21be4:	bcc	21d1c <grisu3_diy_fp_encode_double@@Base+0x1dac>
   21be8:	sub	r2, fp, #44	; 0x2c
   21bec:	ldr	r3, [fp, #-12]
   21bf0:	add	r3, r2, r3
   21bf4:	ldrb	r2, [r3]
   21bf8:	ldr	r3, [pc, #1012]	; 21ff4 <grisu3_diy_fp_encode_double@@Base+0x2084>
   21bfc:	add	r3, pc, r3
   21c00:	ldrb	r3, [r3]
   21c04:	cmp	r2, r3
   21c08:	bne	21c34 <grisu3_diy_fp_encode_double@@Base+0x1cc4>
   21c0c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21c10:	add	r3, r3, #1
   21c14:	str	r3, [fp, #-52]	; 0xffffffcc
   21c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21c1c:	sub	r3, r3, #1
   21c20:	str	r3, [fp, #-24]	; 0xffffffe8
   21c24:	ldr	r3, [fp, #-12]
   21c28:	sub	r3, r3, #1
   21c2c:	str	r3, [fp, #-12]
   21c30:	b	21d1c <grisu3_diy_fp_encode_double@@Base+0x1dac>
   21c34:	ldr	r3, [fp, #-12]
   21c38:	str	r3, [fp, #-16]
   21c3c:	sub	r2, fp, #44	; 0x2c
   21c40:	ldr	r3, [fp, #-12]
   21c44:	add	r3, r2, r3
   21c48:	ldrb	r2, [r3]
   21c4c:	ldr	r3, [pc, #932]	; 21ff8 <grisu3_diy_fp_encode_double@@Base+0x2088>
   21c50:	add	r3, pc, r3
   21c54:	ldrb	r3, [r3]
   21c58:	cmp	r2, r3
   21c5c:	bne	21d08 <grisu3_diy_fp_encode_double@@Base+0x1d98>
   21c60:	ldr	r3, [fp, #-12]
   21c64:	add	r3, r3, #1
   21c68:	str	r3, [fp, #-12]
   21c6c:	b	21ce4 <grisu3_diy_fp_encode_double@@Base+0x1d74>
   21c70:	ldr	r2, [fp, #-52]	; 0xffffffcc
   21c74:	ldr	r3, [fp, #-12]
   21c78:	add	r3, r2, r3
   21c7c:	ldrb	r3, [r3]
   21c80:	mov	r2, r3
   21c84:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21c88:	add	r3, r3, r2
   21c8c:	ldrb	r2, [r3]
   21c90:	ldr	r3, [pc, #868]	; 21ffc <grisu3_diy_fp_encode_double@@Base+0x208c>
   21c94:	add	r3, pc, r3
   21c98:	ldrb	r3, [r3]
   21c9c:	cmp	r2, r3
   21ca0:	beq	21cd8 <grisu3_diy_fp_encode_double@@Base+0x1d68>
   21ca4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   21ca8:	ldr	r3, [fp, #-12]
   21cac:	add	r3, r2, r3
   21cb0:	ldrb	r3, [r3]
   21cb4:	mov	r2, r3
   21cb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   21cbc:	add	r3, r3, r2
   21cc0:	ldrb	r2, [r3]
   21cc4:	ldr	r3, [pc, #820]	; 22000 <grisu3_diy_fp_encode_double@@Base+0x2090>
   21cc8:	add	r3, pc, r3
   21ccc:	ldrb	r3, [r3]
   21cd0:	cmp	r2, r3
   21cd4:	bne	21d04 <grisu3_diy_fp_encode_double@@Base+0x1d94>
   21cd8:	ldr	r3, [fp, #-12]
   21cdc:	add	r3, r3, #1
   21ce0:	str	r3, [fp, #-12]
   21ce4:	ldr	r2, [fp, #-12]
   21ce8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21cec:	cmp	r2, r3
   21cf0:	bcs	21d08 <grisu3_diy_fp_encode_double@@Base+0x1d98>
   21cf4:	ldr	r3, [fp, #-12]
   21cf8:	cmp	r3, #7
   21cfc:	bls	21c70 <grisu3_diy_fp_encode_double@@Base+0x1d00>
   21d00:	b	21d08 <grisu3_diy_fp_encode_double@@Base+0x1d98>
   21d04:	nop			; (mov r0, r0)
   21d08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   21d0c:	ldr	r3, [fp, #-12]
   21d10:	sub	r3, r2, r3
   21d14:	str	r3, [fp, #-24]	; 0xffffffe8
   21d18:	b	21e64 <grisu3_diy_fp_encode_double@@Base+0x1ef4>
   21d1c:	ldr	r3, [fp, #-12]
   21d20:	add	r3, r3, #1
   21d24:	str	r3, [fp, #-12]
   21d28:	ldr	r3, [fp, #-12]
   21d2c:	cmp	r3, #3
   21d30:	bls	21b64 <grisu3_diy_fp_encode_double@@Base+0x1bf4>
   21d34:	ldr	r3, [fp, #-20]	; 0xffffffec
   21d38:	cmp	r3, #2
   21d3c:	bls	21fac <grisu3_diy_fp_encode_double@@Base+0x203c>
   21d40:	ldrb	r3, [fp, #-44]	; 0xffffffd4
   21d44:	lsl	r3, r3, #2
   21d48:	sxtb	r2, r3
   21d4c:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   21d50:	lsr	r3, r3, #4
   21d54:	uxtb	r3, r3
   21d58:	sxtb	r3, r3
   21d5c:	orr	r3, r2, r3
   21d60:	sxtb	r3, r3
   21d64:	uxtb	r2, r3
   21d68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21d6c:	strb	r2, [r3]
   21d70:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21d74:	add	r3, r3, #1
   21d78:	ldrb	r2, [fp, #-43]	; 0xffffffd5
   21d7c:	lsl	r2, r2, #4
   21d80:	sxtb	r1, r2
   21d84:	ldrb	r2, [fp, #-42]	; 0xffffffd6
   21d88:	lsr	r2, r2, #2
   21d8c:	uxtb	r2, r2
   21d90:	sxtb	r2, r2
   21d94:	orr	r2, r1, r2
   21d98:	sxtb	r2, r2
   21d9c:	uxtb	r2, r2
   21da0:	strb	r2, [r3]
   21da4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21da8:	add	r3, r3, #2
   21dac:	ldrb	r2, [fp, #-42]	; 0xffffffd6
   21db0:	lsl	r2, r2, #6
   21db4:	sxtb	r1, r2
   21db8:	ldrb	r2, [fp, #-41]	; 0xffffffd7
   21dbc:	sxtb	r2, r2
   21dc0:	orr	r2, r1, r2
   21dc4:	sxtb	r2, r2
   21dc8:	uxtb	r2, r2
   21dcc:	strb	r2, [r3]
   21dd0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21dd4:	add	r3, r3, #3
   21dd8:	str	r3, [fp, #-48]	; 0xffffffd0
   21ddc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   21de0:	add	r3, r3, #4
   21de4:	str	r3, [fp, #-52]	; 0xffffffcc
   21de8:	ldr	r3, [fp, #-20]	; 0xffffffec
   21dec:	sub	r3, r3, #3
   21df0:	str	r3, [fp, #-20]	; 0xffffffec
   21df4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21df8:	sub	r3, r3, #4
   21dfc:	str	r3, [fp, #-24]	; 0xffffffe8
   21e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21e04:	str	r3, [fp, #-28]	; 0xffffffe4
   21e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   21e0c:	cmp	r3, #0
   21e10:	bne	21b58 <grisu3_diy_fp_encode_double@@Base+0x1be8>
   21e14:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21e18:	cmp	r3, #0
   21e1c:	beq	21e38 <grisu3_diy_fp_encode_double@@Base+0x1ec8>
   21e20:	ldr	r2, [fp, #-48]	; 0xffffffd0
   21e24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   21e28:	sub	r3, r2, r3
   21e2c:	mov	r2, r3
   21e30:	ldr	r3, [fp, #-56]	; 0xffffffc8
   21e34:	str	r2, [r3]
   21e38:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21e3c:	cmp	r3, #0
   21e40:	beq	21e5c <grisu3_diy_fp_encode_double@@Base+0x1eec>
   21e44:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21e48:	ldr	r2, [r3]
   21e4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   21e50:	sub	r2, r2, r3
   21e54:	ldr	r3, [fp, #-60]	; 0xffffffc4
   21e58:	str	r2, [r3]
   21e5c:	ldr	r3, [fp, #-8]
   21e60:	b	21fcc <grisu3_diy_fp_encode_double@@Base+0x205c>
   21e64:	ldr	r3, [fp, #-16]
   21e68:	cmp	r3, #2
   21e6c:	beq	21e84 <grisu3_diy_fp_encode_double@@Base+0x1f14>
   21e70:	cmp	r3, #3
   21e74:	beq	21ee4 <grisu3_diy_fp_encode_double@@Base+0x1f74>
   21e78:	cmp	r3, #0
   21e7c:	beq	21f84 <grisu3_diy_fp_encode_double@@Base+0x2014>
   21e80:	b	21f78 <grisu3_diy_fp_encode_double@@Base+0x2008>
   21e84:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   21e88:	lsl	r3, r3, #4
   21e8c:	uxtb	r3, r3
   21e90:	cmp	r3, #0
   21e94:	bne	21f94 <grisu3_diy_fp_encode_double@@Base+0x2024>
   21e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   21e9c:	cmp	r3, #0
   21ea0:	beq	21fb4 <grisu3_diy_fp_encode_double@@Base+0x2044>
   21ea4:	ldrb	r3, [fp, #-44]	; 0xffffffd4
   21ea8:	lsl	r3, r3, #2
   21eac:	sxtb	r2, r3
   21eb0:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   21eb4:	lsr	r3, r3, #4
   21eb8:	uxtb	r3, r3
   21ebc:	sxtb	r3, r3
   21ec0:	orr	r3, r2, r3
   21ec4:	sxtb	r3, r3
   21ec8:	uxtb	r2, r3
   21ecc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21ed0:	strb	r2, [r3]
   21ed4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21ed8:	add	r3, r3, #1
   21edc:	str	r3, [fp, #-48]	; 0xffffffd0
   21ee0:	b	21f88 <grisu3_diy_fp_encode_double@@Base+0x2018>
   21ee4:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   21ee8:	lsl	r3, r3, #6
   21eec:	uxtb	r3, r3
   21ef0:	cmp	r3, #0
   21ef4:	bne	21f9c <grisu3_diy_fp_encode_double@@Base+0x202c>
   21ef8:	ldr	r3, [fp, #-20]	; 0xffffffec
   21efc:	cmp	r3, #1
   21f00:	bls	21fbc <grisu3_diy_fp_encode_double@@Base+0x204c>
   21f04:	ldrb	r3, [fp, #-44]	; 0xffffffd4
   21f08:	lsl	r3, r3, #2
   21f0c:	sxtb	r2, r3
   21f10:	ldrb	r3, [fp, #-43]	; 0xffffffd5
   21f14:	lsr	r3, r3, #4
   21f18:	uxtb	r3, r3
   21f1c:	sxtb	r3, r3
   21f20:	orr	r3, r2, r3
   21f24:	sxtb	r3, r3
   21f28:	uxtb	r2, r3
   21f2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21f30:	strb	r2, [r3]
   21f34:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21f38:	add	r3, r3, #1
   21f3c:	ldrb	r2, [fp, #-43]	; 0xffffffd5
   21f40:	lsl	r2, r2, #4
   21f44:	sxtb	r1, r2
   21f48:	ldrb	r2, [fp, #-42]	; 0xffffffd6
   21f4c:	lsr	r2, r2, #2
   21f50:	uxtb	r2, r2
   21f54:	sxtb	r2, r2
   21f58:	orr	r2, r1, r2
   21f5c:	sxtb	r2, r2
   21f60:	uxtb	r2, r2
   21f64:	strb	r2, [r3]
   21f68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   21f6c:	add	r3, r3, #2
   21f70:	str	r3, [fp, #-48]	; 0xffffffd0
   21f74:	b	21f88 <grisu3_diy_fp_encode_double@@Base+0x2018>
   21f78:	mov	r3, #4
   21f7c:	str	r3, [fp, #-8]
   21f80:	b	21e14 <grisu3_diy_fp_encode_double@@Base+0x1ea4>
   21f84:	nop			; (mov r0, r0)
   21f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   21f8c:	str	r3, [fp, #-28]	; 0xffffffe4
   21f90:	b	21e14 <grisu3_diy_fp_encode_double@@Base+0x1ea4>
   21f94:	nop			; (mov r0, r0)
   21f98:	b	21fa0 <grisu3_diy_fp_encode_double@@Base+0x2030>
   21f9c:	nop			; (mov r0, r0)
   21fa0:	mov	r3, #5
   21fa4:	str	r3, [fp, #-8]
   21fa8:	b	21e14 <grisu3_diy_fp_encode_double@@Base+0x1ea4>
   21fac:	nop			; (mov r0, r0)
   21fb0:	b	21fc0 <grisu3_diy_fp_encode_double@@Base+0x2050>
   21fb4:	nop			; (mov r0, r0)
   21fb8:	b	21fc0 <grisu3_diy_fp_encode_double@@Base+0x2050>
   21fbc:	nop			; (mov r0, r0)
   21fc0:	mov	r3, #1
   21fc4:	str	r3, [fp, #-8]
   21fc8:	b	21e14 <grisu3_diy_fp_encode_double@@Base+0x1ea4>
   21fcc:	mov	r0, r3
   21fd0:	add	sp, fp, #0
   21fd4:	pop	{fp}		; (ldr fp, [sp], #4)
   21fd8:	bx	lr
   21fdc:	andeq	r5, r0, r0, asr #28
   21fe0:	ldrdeq	r5, [r0], -r8
   21fe4:	andeq	r5, r0, ip, asr #27
   21fe8:			; <UNDEFINED> instruction: 0x00005fb0
   21fec:	andeq	r6, r0, r4, lsr #1
   21ff0:	andeq	r6, r0, r0, ror #1
   21ff4:	strheq	r6, [r0], -sp
   21ff8:	andeq	r6, r0, sl, rrx
   21ffc:	andeq	r6, r0, r6, lsr #32
   22000:	strdeq	r5, [r0], -r1

00022004 <flatcc_json_parser_error_string@@Base>:
   22004:	push	{fp}		; (str fp, [sp, #-4]!)
   22008:	add	fp, sp, #0
   2200c:	sub	sp, sp, #12
   22010:	str	r0, [fp, #-8]
   22014:	ldr	r3, [fp, #-8]
   22018:	cmp	r3, #34	; 0x22
   2201c:	addls	pc, pc, r3, lsl #2
   22020:	b	22254 <flatcc_json_parser_error_string@@Base+0x250>
   22024:	b	220b0 <flatcc_json_parser_error_string@@Base+0xac>
   22028:	b	220bc <flatcc_json_parser_error_string@@Base+0xb8>
   2202c:	b	220c8 <flatcc_json_parser_error_string@@Base+0xc4>
   22030:	b	220d4 <flatcc_json_parser_error_string@@Base+0xd0>
   22034:	b	220e0 <flatcc_json_parser_error_string@@Base+0xdc>
   22038:	b	220ec <flatcc_json_parser_error_string@@Base+0xe8>
   2203c:	b	220f8 <flatcc_json_parser_error_string@@Base+0xf4>
   22040:	b	22104 <flatcc_json_parser_error_string@@Base+0x100>
   22044:	b	22110 <flatcc_json_parser_error_string@@Base+0x10c>
   22048:	b	2211c <flatcc_json_parser_error_string@@Base+0x118>
   2204c:	b	22128 <flatcc_json_parser_error_string@@Base+0x124>
   22050:	b	22134 <flatcc_json_parser_error_string@@Base+0x130>
   22054:	b	22140 <flatcc_json_parser_error_string@@Base+0x13c>
   22058:	b	2214c <flatcc_json_parser_error_string@@Base+0x148>
   2205c:	b	22158 <flatcc_json_parser_error_string@@Base+0x154>
   22060:	b	22164 <flatcc_json_parser_error_string@@Base+0x160>
   22064:	b	22170 <flatcc_json_parser_error_string@@Base+0x16c>
   22068:	b	2217c <flatcc_json_parser_error_string@@Base+0x178>
   2206c:	b	22188 <flatcc_json_parser_error_string@@Base+0x184>
   22070:	b	22194 <flatcc_json_parser_error_string@@Base+0x190>
   22074:	b	221a0 <flatcc_json_parser_error_string@@Base+0x19c>
   22078:	b	221ac <flatcc_json_parser_error_string@@Base+0x1a8>
   2207c:	b	221b8 <flatcc_json_parser_error_string@@Base+0x1b4>
   22080:	b	221c4 <flatcc_json_parser_error_string@@Base+0x1c0>
   22084:	b	221d0 <flatcc_json_parser_error_string@@Base+0x1cc>
   22088:	b	221dc <flatcc_json_parser_error_string@@Base+0x1d8>
   2208c:	b	221e8 <flatcc_json_parser_error_string@@Base+0x1e4>
   22090:	b	221f4 <flatcc_json_parser_error_string@@Base+0x1f0>
   22094:	b	22200 <flatcc_json_parser_error_string@@Base+0x1fc>
   22098:	b	2220c <flatcc_json_parser_error_string@@Base+0x208>
   2209c:	b	22218 <flatcc_json_parser_error_string@@Base+0x214>
   220a0:	b	22224 <flatcc_json_parser_error_string@@Base+0x220>
   220a4:	b	22230 <flatcc_json_parser_error_string@@Base+0x22c>
   220a8:	b	2223c <flatcc_json_parser_error_string@@Base+0x238>
   220ac:	b	22248 <flatcc_json_parser_error_string@@Base+0x244>
   220b0:	ldr	r3, [pc, #436]	; 2226c <flatcc_json_parser_error_string@@Base+0x268>
   220b4:	add	r3, pc, r3
   220b8:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   220bc:	ldr	r3, [pc, #428]	; 22270 <flatcc_json_parser_error_string@@Base+0x26c>
   220c0:	add	r3, pc, r3
   220c4:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   220c8:	ldr	r3, [pc, #420]	; 22274 <flatcc_json_parser_error_string@@Base+0x270>
   220cc:	add	r3, pc, r3
   220d0:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   220d4:	ldr	r3, [pc, #412]	; 22278 <flatcc_json_parser_error_string@@Base+0x274>
   220d8:	add	r3, pc, r3
   220dc:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   220e0:	ldr	r3, [pc, #404]	; 2227c <flatcc_json_parser_error_string@@Base+0x278>
   220e4:	add	r3, pc, r3
   220e8:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   220ec:	ldr	r3, [pc, #396]	; 22280 <flatcc_json_parser_error_string@@Base+0x27c>
   220f0:	add	r3, pc, r3
   220f4:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   220f8:	ldr	r3, [pc, #388]	; 22284 <flatcc_json_parser_error_string@@Base+0x280>
   220fc:	add	r3, pc, r3
   22100:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22104:	ldr	r3, [pc, #380]	; 22288 <flatcc_json_parser_error_string@@Base+0x284>
   22108:	add	r3, pc, r3
   2210c:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22110:	ldr	r3, [pc, #372]	; 2228c <flatcc_json_parser_error_string@@Base+0x288>
   22114:	add	r3, pc, r3
   22118:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   2211c:	ldr	r3, [pc, #364]	; 22290 <flatcc_json_parser_error_string@@Base+0x28c>
   22120:	add	r3, pc, r3
   22124:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22128:	ldr	r3, [pc, #356]	; 22294 <flatcc_json_parser_error_string@@Base+0x290>
   2212c:	add	r3, pc, r3
   22130:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22134:	ldr	r3, [pc, #348]	; 22298 <flatcc_json_parser_error_string@@Base+0x294>
   22138:	add	r3, pc, r3
   2213c:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22140:	ldr	r3, [pc, #340]	; 2229c <flatcc_json_parser_error_string@@Base+0x298>
   22144:	add	r3, pc, r3
   22148:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   2214c:	ldr	r3, [pc, #332]	; 222a0 <flatcc_json_parser_error_string@@Base+0x29c>
   22150:	add	r3, pc, r3
   22154:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22158:	ldr	r3, [pc, #324]	; 222a4 <flatcc_json_parser_error_string@@Base+0x2a0>
   2215c:	add	r3, pc, r3
   22160:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22164:	ldr	r3, [pc, #316]	; 222a8 <flatcc_json_parser_error_string@@Base+0x2a4>
   22168:	add	r3, pc, r3
   2216c:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22170:	ldr	r3, [pc, #308]	; 222ac <flatcc_json_parser_error_string@@Base+0x2a8>
   22174:	add	r3, pc, r3
   22178:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   2217c:	ldr	r3, [pc, #300]	; 222b0 <flatcc_json_parser_error_string@@Base+0x2ac>
   22180:	add	r3, pc, r3
   22184:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22188:	ldr	r3, [pc, #292]	; 222b4 <flatcc_json_parser_error_string@@Base+0x2b0>
   2218c:	add	r3, pc, r3
   22190:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22194:	ldr	r3, [pc, #284]	; 222b8 <flatcc_json_parser_error_string@@Base+0x2b4>
   22198:	add	r3, pc, r3
   2219c:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221a0:	ldr	r3, [pc, #276]	; 222bc <flatcc_json_parser_error_string@@Base+0x2b8>
   221a4:	add	r3, pc, r3
   221a8:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221ac:	ldr	r3, [pc, #268]	; 222c0 <flatcc_json_parser_error_string@@Base+0x2bc>
   221b0:	add	r3, pc, r3
   221b4:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221b8:	ldr	r3, [pc, #260]	; 222c4 <flatcc_json_parser_error_string@@Base+0x2c0>
   221bc:	add	r3, pc, r3
   221c0:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221c4:	ldr	r3, [pc, #252]	; 222c8 <flatcc_json_parser_error_string@@Base+0x2c4>
   221c8:	add	r3, pc, r3
   221cc:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221d0:	ldr	r3, [pc, #244]	; 222cc <flatcc_json_parser_error_string@@Base+0x2c8>
   221d4:	add	r3, pc, r3
   221d8:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221dc:	ldr	r3, [pc, #236]	; 222d0 <flatcc_json_parser_error_string@@Base+0x2cc>
   221e0:	add	r3, pc, r3
   221e4:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221e8:	ldr	r3, [pc, #228]	; 222d4 <flatcc_json_parser_error_string@@Base+0x2d0>
   221ec:	add	r3, pc, r3
   221f0:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   221f4:	ldr	r3, [pc, #220]	; 222d8 <flatcc_json_parser_error_string@@Base+0x2d4>
   221f8:	add	r3, pc, r3
   221fc:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22200:	ldr	r3, [pc, #212]	; 222dc <flatcc_json_parser_error_string@@Base+0x2d8>
   22204:	add	r3, pc, r3
   22208:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   2220c:	ldr	r3, [pc, #204]	; 222e0 <flatcc_json_parser_error_string@@Base+0x2dc>
   22210:	add	r3, pc, r3
   22214:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22218:	ldr	r3, [pc, #196]	; 222e4 <flatcc_json_parser_error_string@@Base+0x2e0>
   2221c:	add	r3, pc, r3
   22220:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22224:	ldr	r3, [pc, #188]	; 222e8 <flatcc_json_parser_error_string@@Base+0x2e4>
   22228:	add	r3, pc, r3
   2222c:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22230:	ldr	r3, [pc, #180]	; 222ec <flatcc_json_parser_error_string@@Base+0x2e8>
   22234:	add	r3, pc, r3
   22238:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   2223c:	ldr	r3, [pc, #172]	; 222f0 <flatcc_json_parser_error_string@@Base+0x2ec>
   22240:	add	r3, pc, r3
   22244:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22248:	ldr	r3, [pc, #164]	; 222f4 <flatcc_json_parser_error_string@@Base+0x2f0>
   2224c:	add	r3, pc, r3
   22250:	b	2225c <flatcc_json_parser_error_string@@Base+0x258>
   22254:	ldr	r3, [pc, #156]	; 222f8 <flatcc_json_parser_error_string@@Base+0x2f4>
   22258:	add	r3, pc, r3
   2225c:	mov	r0, r3
   22260:	add	sp, fp, #0
   22264:	pop	{fp}		; (ldr fp, [sp], #4)
   22268:	bx	lr
   2226c:	andeq	r5, r0, ip, ror #6
   22270:	andeq	r5, r0, r0, ror #8
   22274:	andeq	r5, r0, r8, asr r4
   22278:	andeq	r5, r0, ip, asr r4
   2227c:	andeq	r5, r0, r0, ror #8
   22280:	andeq	r5, r0, r4, ror #8
   22284:	andeq	r5, r0, r0, ror r4
   22288:	andeq	r5, r0, r4, ror r4
   2228c:	andeq	r5, r0, r4, ror r4
   22290:	andeq	r5, r0, r4, ror r4
   22294:	andeq	r5, r0, ip, ror r4
   22298:	andeq	r5, r0, r4, lsl #9
   2229c:	andeq	r5, r0, r8, lsl #9
   222a0:	muleq	r0, r0, r4
   222a4:	muleq	r0, r4, r4
   222a8:	andeq	r5, r0, r4, lsr #9
   222ac:	andeq	r5, r0, ip, lsr #9
   222b0:			; <UNDEFINED> instruction: 0x000054b0
   222b4:			; <UNDEFINED> instruction: 0x000054b8
   222b8:			; <UNDEFINED> instruction: 0x000054bc
   222bc:	andeq	r5, r0, r0, asr #9
   222c0:	andeq	r5, r0, r8, asr #9
   222c4:	andeq	r5, r0, ip, asr #9
   222c8:	ldrdeq	r5, [r0], -r0
   222cc:	andeq	r5, r0, r8, ror #9
   222d0:	strdeq	r5, [r0], -r0
   222d4:	andeq	r5, r0, r4, lsl #10
   222d8:	andeq	r5, r0, r8, lsl r5
   222dc:	andeq	r5, r0, r8, lsr #10
   222e0:	andeq	r5, r0, r8, lsr r5
   222e4:	andeq	r5, r0, r4, asr #10
   222e8:	andeq	r5, r0, r8, asr r5
   222ec:	andeq	r5, r0, r4, ror #10
   222f0:	andeq	r5, r0, r4, ror r5
   222f4:	andeq	r5, r0, r8, ror r5
   222f8:	andeq	r5, r0, ip, ror r5

000222fc <flatcc_json_parser_set_error@@Base>:
   222fc:	push	{fp}		; (str fp, [sp, #-4]!)
   22300:	add	fp, sp, #0
   22304:	sub	sp, sp, #20
   22308:	str	r0, [fp, #-8]
   2230c:	str	r1, [fp, #-12]
   22310:	str	r2, [fp, #-16]
   22314:	str	r3, [fp, #-20]	; 0xffffffec
   22318:	ldr	r3, [fp, #-8]
   2231c:	ldr	r3, [r3, #24]
   22320:	cmp	r3, #0
   22324:	bne	2235c <flatcc_json_parser_set_error@@Base+0x60>
   22328:	ldr	r3, [fp, #-8]
   2232c:	ldr	r2, [fp, #-20]	; 0xffffffec
   22330:	str	r2, [r3, #24]
   22334:	ldr	r3, [fp, #-12]
   22338:	ldr	r2, [fp, #-8]
   2233c:	ldr	r2, [r2, #4]
   22340:	sub	r3, r3, r2
   22344:	add	r2, r3, #1
   22348:	ldr	r3, [fp, #-8]
   2234c:	str	r2, [r3, #20]
   22350:	ldr	r3, [fp, #-8]
   22354:	ldr	r2, [fp, #-12]
   22358:	str	r2, [r3, #36]	; 0x24
   2235c:	ldr	r3, [fp, #-16]
   22360:	mov	r0, r3
   22364:	add	sp, fp, #0
   22368:	pop	{fp}		; (ldr fp, [sp], #4)
   2236c:	bx	lr

00022370 <flatcc_json_parser_string_part@@Base>:
   22370:	push	{fp, lr}
   22374:	add	fp, sp, #4
   22378:	sub	sp, sp, #16
   2237c:	str	r0, [fp, #-8]
   22380:	str	r1, [fp, #-12]
   22384:	str	r2, [fp, #-16]
   22388:	b	22398 <flatcc_json_parser_string_part@@Base+0x28>
   2238c:	ldr	r3, [fp, #-12]
   22390:	add	r3, r3, #1
   22394:	str	r3, [fp, #-12]
   22398:	ldr	r2, [fp, #-12]
   2239c:	ldr	r3, [fp, #-16]
   223a0:	cmp	r2, r3
   223a4:	beq	223d8 <flatcc_json_parser_string_part@@Base+0x68>
   223a8:	ldr	r3, [fp, #-12]
   223ac:	ldrb	r3, [r3]
   223b0:	cmp	r3, #34	; 0x22
   223b4:	beq	223d8 <flatcc_json_parser_string_part@@Base+0x68>
   223b8:	ldr	r3, [fp, #-12]
   223bc:	ldrb	r3, [r3]
   223c0:	cmp	r3, #31
   223c4:	bls	223d8 <flatcc_json_parser_string_part@@Base+0x68>
   223c8:	ldr	r3, [fp, #-12]
   223cc:	ldrb	r3, [r3]
   223d0:	cmp	r3, #92	; 0x5c
   223d4:	bne	2238c <flatcc_json_parser_string_part@@Base+0x1c>
   223d8:	ldr	r2, [fp, #-12]
   223dc:	ldr	r3, [fp, #-16]
   223e0:	cmp	r2, r3
   223e4:	bne	22404 <flatcc_json_parser_string_part@@Base+0x94>
   223e8:	mov	r3, #20
   223ec:	ldr	r2, [fp, #-16]
   223f0:	ldr	r1, [fp, #-12]
   223f4:	ldr	r0, [fp, #-8]
   223f8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   223fc:	mov	r3, r0
   22400:	b	2244c <flatcc_json_parser_string_part@@Base+0xdc>
   22404:	ldr	r3, [fp, #-12]
   22408:	ldrb	r3, [r3]
   2240c:	cmp	r3, #34	; 0x22
   22410:	bne	2241c <flatcc_json_parser_string_part@@Base+0xac>
   22414:	ldr	r3, [fp, #-12]
   22418:	b	2244c <flatcc_json_parser_string_part@@Base+0xdc>
   2241c:	ldr	r3, [fp, #-12]
   22420:	ldrb	r3, [r3]
   22424:	cmp	r3, #31
   22428:	bhi	22448 <flatcc_json_parser_string_part@@Base+0xd8>
   2242c:	mov	r3, #17
   22430:	ldr	r2, [fp, #-16]
   22434:	ldr	r1, [fp, #-12]
   22438:	ldr	r0, [fp, #-8]
   2243c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22440:	mov	r3, r0
   22444:	b	2244c <flatcc_json_parser_string_part@@Base+0xdc>
   22448:	ldr	r3, [fp, #-12]
   2244c:	mov	r0, r3
   22450:	sub	sp, fp, #4
   22454:	pop	{fp, pc}

00022458 <flatcc_json_parser_space_ext@@Base>:
   22458:	push	{fp, lr}
   2245c:	add	fp, sp, #4
   22460:	sub	sp, sp, #16
   22464:	str	r0, [fp, #-8]
   22468:	str	r1, [fp, #-12]
   2246c:	str	r2, [fp, #-16]
   22470:	b	22480 <flatcc_json_parser_space_ext@@Base+0x28>
   22474:	ldr	r3, [fp, #-12]
   22478:	add	r3, r3, #1
   2247c:	str	r3, [fp, #-12]
   22480:	ldr	r2, [fp, #-12]
   22484:	ldr	r3, [fp, #-16]
   22488:	cmp	r2, r3
   2248c:	beq	225bc <flatcc_json_parser_space_ext@@Base+0x164>
   22490:	ldr	r3, [fp, #-12]
   22494:	ldrb	r3, [r3]
   22498:	cmp	r3, #32
   2249c:	beq	22474 <flatcc_json_parser_space_ext@@Base+0x1c>
   224a0:	b	225bc <flatcc_json_parser_space_ext@@Base+0x164>
   224a4:	ldr	r3, [fp, #-12]
   224a8:	ldrb	r3, [r3]
   224ac:	sub	r3, r3, #9
   224b0:	cmp	r3, #23
   224b4:	addls	pc, pc, r3, lsl #2
   224b8:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224bc:	b	22590 <flatcc_json_parser_space_ext@@Base+0x138>
   224c0:	b	22560 <flatcc_json_parser_space_ext@@Base+0x108>
   224c4:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224c8:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224cc:	b	2251c <flatcc_json_parser_space_ext@@Base+0xc4>
   224d0:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224d4:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224d8:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224dc:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224e0:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224e4:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224e8:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224ec:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224f0:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224f4:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224f8:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   224fc:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   22500:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   22504:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   22508:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   2250c:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   22510:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   22514:	b	225a0 <flatcc_json_parser_space_ext@@Base+0x148>
   22518:	b	22470 <flatcc_json_parser_space_ext@@Base+0x18>
   2251c:	ldr	r2, [fp, #-16]
   22520:	ldr	r3, [fp, #-12]
   22524:	sub	r3, r2, r3
   22528:	cmp	r3, #1
   2252c:	ble	2254c <flatcc_json_parser_space_ext@@Base+0xf4>
   22530:	ldr	r3, [fp, #-12]
   22534:	add	r3, r3, #1
   22538:	ldrb	r3, [r3]
   2253c:	cmp	r3, #10
   22540:	bne	2254c <flatcc_json_parser_space_ext@@Base+0xf4>
   22544:	mov	r3, #1
   22548:	b	22550 <flatcc_json_parser_space_ext@@Base+0xf8>
   2254c:	mov	r3, #0
   22550:	mov	r2, r3
   22554:	ldr	r3, [fp, #-12]
   22558:	add	r3, r3, r2
   2255c:	str	r3, [fp, #-12]
   22560:	ldr	r3, [fp, #-8]
   22564:	ldr	r3, [r3, #16]
   22568:	add	r2, r3, #1
   2256c:	ldr	r3, [fp, #-8]
   22570:	str	r2, [r3, #16]
   22574:	ldr	r3, [fp, #-12]
   22578:	add	r3, r3, #1
   2257c:	str	r3, [fp, #-12]
   22580:	ldr	r3, [fp, #-8]
   22584:	ldr	r2, [fp, #-12]
   22588:	str	r2, [r3, #4]
   2258c:	b	225bc <flatcc_json_parser_space_ext@@Base+0x164>
   22590:	ldr	r3, [fp, #-12]
   22594:	add	r3, r3, #1
   22598:	str	r3, [fp, #-12]
   2259c:	b	225bc <flatcc_json_parser_space_ext@@Base+0x164>
   225a0:	mov	r3, #5
   225a4:	ldr	r2, [fp, #-16]
   225a8:	ldr	r1, [fp, #-12]
   225ac:	ldr	r0, [fp, #-8]
   225b0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   225b4:	mov	r3, r0
   225b8:	b	225e0 <flatcc_json_parser_space_ext@@Base+0x188>
   225bc:	ldr	r2, [fp, #-12]
   225c0:	ldr	r3, [fp, #-16]
   225c4:	cmp	r2, r3
   225c8:	beq	225dc <flatcc_json_parser_space_ext@@Base+0x184>
   225cc:	ldr	r3, [fp, #-12]
   225d0:	ldrb	r3, [r3]
   225d4:	cmp	r3, #32
   225d8:	bls	224a4 <flatcc_json_parser_space_ext@@Base+0x4c>
   225dc:	ldr	r3, [fp, #-12]
   225e0:	mov	r0, r3
   225e4:	sub	sp, fp, #4
   225e8:	pop	{fp, pc}

000225ec <flatcc_json_parser_string_escape@@Base>:
   225ec:	push	{fp, lr}
   225f0:	add	fp, sp, #4
   225f4:	sub	sp, sp, #24
   225f8:	str	r0, [fp, #-16]
   225fc:	str	r1, [fp, #-20]	; 0xffffffec
   22600:	str	r2, [fp, #-24]	; 0xffffffe8
   22604:	str	r3, [fp, #-28]	; 0xffffffe4
   22608:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2260c:	ldr	r3, [fp, #-20]	; 0xffffffec
   22610:	sub	r3, r2, r3
   22614:	cmp	r3, #1
   22618:	ble	2262c <flatcc_json_parser_string_escape@@Base+0x40>
   2261c:	ldr	r3, [fp, #-20]	; 0xffffffec
   22620:	ldrb	r3, [r3]
   22624:	cmp	r3, #92	; 0x5c
   22628:	beq	22654 <flatcc_json_parser_string_escape@@Base+0x68>
   2262c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22630:	mov	r2, #0
   22634:	strb	r2, [r3]
   22638:	mov	r3, #18
   2263c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22640:	ldr	r1, [fp, #-20]	; 0xffffffec
   22644:	ldr	r0, [fp, #-16]
   22648:	bl	222fc <flatcc_json_parser_set_error@@Base>
   2264c:	mov	r3, r0
   22650:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22654:	ldr	r3, [fp, #-20]	; 0xffffffec
   22658:	add	r3, r3, #1
   2265c:	ldrb	r3, [r3]
   22660:	sub	r3, r3, #34	; 0x22
   22664:	cmp	r3, #86	; 0x56
   22668:	addls	pc, pc, r3, lsl #2
   2266c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22670:	b	22f0c <flatcc_json_parser_string_escape@@Base+0x920>
   22674:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22678:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2267c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22680:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22684:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22688:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2268c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22690:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22694:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22698:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2269c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226a0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226a4:	b	22f5c <flatcc_json_parser_string_escape@@Base+0x970>
   226a8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226ac:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226b0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226b4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226b8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226bc:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226c0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226c4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226c8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226cc:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226d0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226d4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226d8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226dc:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226e0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226e4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226e8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226ec:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226f0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226f4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226f8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   226fc:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22700:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22704:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22708:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2270c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22710:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22714:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22718:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2271c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22720:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22724:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22728:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2272c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22730:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22734:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22738:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2273c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22740:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22744:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22748:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2274c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22750:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22754:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22758:	b	22f34 <flatcc_json_parser_string_escape@@Base+0x948>
   2275c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22760:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22764:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22768:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2276c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22770:	b	22ebc <flatcc_json_parser_string_escape@@Base+0x8d0>
   22774:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22778:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2277c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22780:	b	22ee4 <flatcc_json_parser_string_escape@@Base+0x8f8>
   22784:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22788:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2278c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22790:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22794:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   22798:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   2279c:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227a0:	b	22e6c <flatcc_json_parser_string_escape@@Base+0x880>
   227a4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227a8:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227ac:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227b0:	b	22e94 <flatcc_json_parser_string_escape@@Base+0x8a8>
   227b4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227b8:	b	22e44 <flatcc_json_parser_string_escape@@Base+0x858>
   227bc:	b	229a8 <flatcc_json_parser_string_escape@@Base+0x3bc>
   227c0:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227c4:	b	22f84 <flatcc_json_parser_string_escape@@Base+0x998>
   227c8:	b	227cc <flatcc_json_parser_string_escape@@Base+0x1e0>
   227cc:	mov	r3, #0
   227d0:	strb	r3, [fp, #-5]
   227d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   227d8:	mov	r2, #1
   227dc:	strb	r2, [r3]
   227e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   227e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   227e8:	sub	r3, r2, r3
   227ec:	cmp	r3, #3
   227f0:	bgt	2281c <flatcc_json_parser_string_escape@@Base+0x230>
   227f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   227f8:	mov	r2, #0
   227fc:	strb	r2, [r3]
   22800:	mov	r3, #18
   22804:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22808:	ldr	r1, [fp, #-20]	; 0xffffffec
   2280c:	ldr	r0, [fp, #-16]
   22810:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22814:	mov	r3, r0
   22818:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   2281c:	ldr	r3, [fp, #-20]	; 0xffffffec
   22820:	ldrb	r3, [r3, #2]
   22824:	strb	r3, [fp, #-9]
   22828:	ldrb	r3, [fp, #-9]
   2282c:	cmp	r3, #47	; 0x2f
   22830:	bls	22864 <flatcc_json_parser_string_escape@@Base+0x278>
   22834:	ldrb	r3, [fp, #-9]
   22838:	cmp	r3, #57	; 0x39
   2283c:	bhi	22864 <flatcc_json_parser_string_escape@@Base+0x278>
   22840:	ldrb	r3, [fp, #-9]
   22844:	sub	r3, r3, #48	; 0x30
   22848:	lsl	r3, r3, #4
   2284c:	sxtb	r2, r3
   22850:	ldrsb	r3, [fp, #-5]
   22854:	orr	r3, r2, r3
   22858:	sxtb	r3, r3
   2285c:	strb	r3, [fp, #-5]
   22860:	b	228d4 <flatcc_json_parser_string_escape@@Base+0x2e8>
   22864:	ldrb	r3, [fp, #-9]
   22868:	orr	r3, r3, #32
   2286c:	strb	r3, [fp, #-9]
   22870:	ldrb	r3, [fp, #-9]
   22874:	cmp	r3, #96	; 0x60
   22878:	bls	228ac <flatcc_json_parser_string_escape@@Base+0x2c0>
   2287c:	ldrb	r3, [fp, #-9]
   22880:	cmp	r3, #102	; 0x66
   22884:	bhi	228ac <flatcc_json_parser_string_escape@@Base+0x2c0>
   22888:	ldrb	r3, [fp, #-9]
   2288c:	sub	r3, r3, #87	; 0x57
   22890:	lsl	r3, r3, #4
   22894:	sxtb	r2, r3
   22898:	ldrsb	r3, [fp, #-5]
   2289c:	orr	r3, r2, r3
   228a0:	sxtb	r3, r3
   228a4:	strb	r3, [fp, #-5]
   228a8:	b	228d4 <flatcc_json_parser_string_escape@@Base+0x2e8>
   228ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   228b0:	mov	r2, #0
   228b4:	strb	r2, [r3]
   228b8:	mov	r3, #18
   228bc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   228c0:	ldr	r1, [fp, #-20]	; 0xffffffec
   228c4:	ldr	r0, [fp, #-16]
   228c8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   228cc:	mov	r3, r0
   228d0:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   228d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   228d8:	ldrb	r3, [r3, #3]
   228dc:	strb	r3, [fp, #-9]
   228e0:	ldrb	r3, [fp, #-9]
   228e4:	cmp	r3, #47	; 0x2f
   228e8:	bls	2291c <flatcc_json_parser_string_escape@@Base+0x330>
   228ec:	ldrb	r3, [fp, #-9]
   228f0:	cmp	r3, #57	; 0x39
   228f4:	bhi	2291c <flatcc_json_parser_string_escape@@Base+0x330>
   228f8:	ldrb	r3, [fp, #-9]
   228fc:	sub	r3, r3, #48	; 0x30
   22900:	uxtb	r3, r3
   22904:	sxtb	r2, r3
   22908:	ldrsb	r3, [fp, #-5]
   2290c:	orr	r3, r2, r3
   22910:	sxtb	r3, r3
   22914:	strb	r3, [fp, #-5]
   22918:	b	2298c <flatcc_json_parser_string_escape@@Base+0x3a0>
   2291c:	ldrb	r3, [fp, #-9]
   22920:	orr	r3, r3, #32
   22924:	strb	r3, [fp, #-9]
   22928:	ldrb	r3, [fp, #-9]
   2292c:	cmp	r3, #96	; 0x60
   22930:	bls	22964 <flatcc_json_parser_string_escape@@Base+0x378>
   22934:	ldrb	r3, [fp, #-9]
   22938:	cmp	r3, #102	; 0x66
   2293c:	bhi	22964 <flatcc_json_parser_string_escape@@Base+0x378>
   22940:	ldrb	r3, [fp, #-9]
   22944:	sub	r3, r3, #87	; 0x57
   22948:	uxtb	r3, r3
   2294c:	sxtb	r2, r3
   22950:	ldrsb	r3, [fp, #-5]
   22954:	orr	r3, r2, r3
   22958:	sxtb	r3, r3
   2295c:	strb	r3, [fp, #-5]
   22960:	b	2298c <flatcc_json_parser_string_escape@@Base+0x3a0>
   22964:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22968:	mov	r2, #0
   2296c:	strb	r2, [r3]
   22970:	mov	r3, #18
   22974:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22978:	ldr	r1, [fp, #-20]	; 0xffffffec
   2297c:	ldr	r0, [fp, #-16]
   22980:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22984:	mov	r3, r0
   22988:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   2298c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22990:	add	r3, r3, #1
   22994:	ldrb	r2, [fp, #-5]
   22998:	strb	r2, [r3]
   2299c:	ldr	r3, [fp, #-20]	; 0xffffffec
   229a0:	add	r3, r3, #4
   229a4:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   229a8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   229ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   229b0:	sub	r3, r2, r3
   229b4:	cmp	r3, #5
   229b8:	bgt	229e4 <flatcc_json_parser_string_escape@@Base+0x3f8>
   229bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   229c0:	mov	r2, #0
   229c4:	strb	r2, [r3]
   229c8:	mov	r3, #18
   229cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   229d0:	ldr	r1, [fp, #-20]	; 0xffffffec
   229d4:	ldr	r0, [fp, #-16]
   229d8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   229dc:	mov	r3, r0
   229e0:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   229e4:	mov	r3, #0
   229e8:	strh	r3, [fp, #-8]
   229ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   229f0:	ldrb	r3, [r3, #2]
   229f4:	strb	r3, [fp, #-9]
   229f8:	ldrb	r3, [fp, #-9]
   229fc:	cmp	r3, #47	; 0x2f
   22a00:	bls	22a30 <flatcc_json_parser_string_escape@@Base+0x444>
   22a04:	ldrb	r3, [fp, #-9]
   22a08:	cmp	r3, #57	; 0x39
   22a0c:	bhi	22a30 <flatcc_json_parser_string_escape@@Base+0x444>
   22a10:	ldrb	r3, [fp, #-9]
   22a14:	uxth	r3, r3
   22a18:	sub	r3, r3, #48	; 0x30
   22a1c:	strh	r3, [fp, #-12]
   22a20:	ldrh	r3, [fp, #-12]
   22a24:	lsl	r3, r3, #12
   22a28:	strh	r3, [fp, #-8]
   22a2c:	b	22aac <flatcc_json_parser_string_escape@@Base+0x4c0>
   22a30:	ldrb	r3, [fp, #-9]
   22a34:	orr	r3, r3, #32
   22a38:	strb	r3, [fp, #-9]
   22a3c:	ldrb	r3, [fp, #-9]
   22a40:	cmp	r3, #96	; 0x60
   22a44:	bls	22a84 <flatcc_json_parser_string_escape@@Base+0x498>
   22a48:	ldrb	r3, [fp, #-9]
   22a4c:	cmp	r3, #102	; 0x66
   22a50:	bhi	22a84 <flatcc_json_parser_string_escape@@Base+0x498>
   22a54:	ldrb	r3, [fp, #-9]
   22a58:	uxth	r3, r3
   22a5c:	sub	r3, r3, #87	; 0x57
   22a60:	strh	r3, [fp, #-12]
   22a64:	ldrh	r3, [fp, #-12]
   22a68:	lsl	r3, r3, #12
   22a6c:	sxth	r2, r3
   22a70:	ldrsh	r3, [fp, #-8]
   22a74:	orr	r3, r2, r3
   22a78:	sxth	r3, r3
   22a7c:	strh	r3, [fp, #-8]
   22a80:	b	22aac <flatcc_json_parser_string_escape@@Base+0x4c0>
   22a84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22a88:	mov	r2, #0
   22a8c:	strb	r2, [r3]
   22a90:	mov	r3, #18
   22a94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22a98:	ldr	r1, [fp, #-20]	; 0xffffffec
   22a9c:	ldr	r0, [fp, #-16]
   22aa0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22aa4:	mov	r3, r0
   22aa8:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   22ab0:	ldrb	r3, [r3, #3]
   22ab4:	strb	r3, [fp, #-9]
   22ab8:	ldrb	r3, [fp, #-9]
   22abc:	cmp	r3, #47	; 0x2f
   22ac0:	bls	22b00 <flatcc_json_parser_string_escape@@Base+0x514>
   22ac4:	ldrb	r3, [fp, #-9]
   22ac8:	cmp	r3, #57	; 0x39
   22acc:	bhi	22b00 <flatcc_json_parser_string_escape@@Base+0x514>
   22ad0:	ldrb	r3, [fp, #-9]
   22ad4:	uxth	r3, r3
   22ad8:	sub	r3, r3, #48	; 0x30
   22adc:	strh	r3, [fp, #-12]
   22ae0:	ldrh	r3, [fp, #-12]
   22ae4:	lsl	r3, r3, #8
   22ae8:	sxth	r2, r3
   22aec:	ldrsh	r3, [fp, #-8]
   22af0:	orr	r3, r2, r3
   22af4:	sxth	r3, r3
   22af8:	strh	r3, [fp, #-8]
   22afc:	b	22b7c <flatcc_json_parser_string_escape@@Base+0x590>
   22b00:	ldrb	r3, [fp, #-9]
   22b04:	orr	r3, r3, #32
   22b08:	strb	r3, [fp, #-9]
   22b0c:	ldrb	r3, [fp, #-9]
   22b10:	cmp	r3, #96	; 0x60
   22b14:	bls	22b54 <flatcc_json_parser_string_escape@@Base+0x568>
   22b18:	ldrb	r3, [fp, #-9]
   22b1c:	cmp	r3, #102	; 0x66
   22b20:	bhi	22b54 <flatcc_json_parser_string_escape@@Base+0x568>
   22b24:	ldrb	r3, [fp, #-9]
   22b28:	uxth	r3, r3
   22b2c:	sub	r3, r3, #87	; 0x57
   22b30:	strh	r3, [fp, #-12]
   22b34:	ldrh	r3, [fp, #-12]
   22b38:	lsl	r3, r3, #8
   22b3c:	sxth	r2, r3
   22b40:	ldrsh	r3, [fp, #-8]
   22b44:	orr	r3, r2, r3
   22b48:	sxth	r3, r3
   22b4c:	strh	r3, [fp, #-8]
   22b50:	b	22b7c <flatcc_json_parser_string_escape@@Base+0x590>
   22b54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22b58:	mov	r2, #0
   22b5c:	strb	r2, [r3]
   22b60:	mov	r3, #18
   22b64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22b68:	ldr	r1, [fp, #-20]	; 0xffffffec
   22b6c:	ldr	r0, [fp, #-16]
   22b70:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22b74:	mov	r3, r0
   22b78:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   22b80:	ldrb	r3, [r3, #4]
   22b84:	strb	r3, [fp, #-9]
   22b88:	ldrb	r3, [fp, #-9]
   22b8c:	cmp	r3, #47	; 0x2f
   22b90:	bls	22bd0 <flatcc_json_parser_string_escape@@Base+0x5e4>
   22b94:	ldrb	r3, [fp, #-9]
   22b98:	cmp	r3, #57	; 0x39
   22b9c:	bhi	22bd0 <flatcc_json_parser_string_escape@@Base+0x5e4>
   22ba0:	ldrb	r3, [fp, #-9]
   22ba4:	uxth	r3, r3
   22ba8:	sub	r3, r3, #48	; 0x30
   22bac:	strh	r3, [fp, #-12]
   22bb0:	ldrh	r3, [fp, #-12]
   22bb4:	lsl	r3, r3, #4
   22bb8:	sxth	r2, r3
   22bbc:	ldrsh	r3, [fp, #-8]
   22bc0:	orr	r3, r2, r3
   22bc4:	sxth	r3, r3
   22bc8:	strh	r3, [fp, #-8]
   22bcc:	b	22c4c <flatcc_json_parser_string_escape@@Base+0x660>
   22bd0:	ldrb	r3, [fp, #-9]
   22bd4:	orr	r3, r3, #32
   22bd8:	strb	r3, [fp, #-9]
   22bdc:	ldrb	r3, [fp, #-9]
   22be0:	cmp	r3, #96	; 0x60
   22be4:	bls	22c24 <flatcc_json_parser_string_escape@@Base+0x638>
   22be8:	ldrb	r3, [fp, #-9]
   22bec:	cmp	r3, #102	; 0x66
   22bf0:	bhi	22c24 <flatcc_json_parser_string_escape@@Base+0x638>
   22bf4:	ldrb	r3, [fp, #-9]
   22bf8:	uxth	r3, r3
   22bfc:	sub	r3, r3, #87	; 0x57
   22c00:	strh	r3, [fp, #-12]
   22c04:	ldrh	r3, [fp, #-12]
   22c08:	lsl	r3, r3, #4
   22c0c:	sxth	r2, r3
   22c10:	ldrsh	r3, [fp, #-8]
   22c14:	orr	r3, r2, r3
   22c18:	sxth	r3, r3
   22c1c:	strh	r3, [fp, #-8]
   22c20:	b	22c4c <flatcc_json_parser_string_escape@@Base+0x660>
   22c24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22c28:	mov	r2, #0
   22c2c:	strb	r2, [r3]
   22c30:	mov	r3, #18
   22c34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22c38:	ldr	r1, [fp, #-20]	; 0xffffffec
   22c3c:	ldr	r0, [fp, #-16]
   22c40:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22c44:	mov	r3, r0
   22c48:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22c4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   22c50:	ldrb	r3, [r3, #5]
   22c54:	strb	r3, [fp, #-9]
   22c58:	ldrb	r3, [fp, #-9]
   22c5c:	cmp	r3, #47	; 0x2f
   22c60:	bls	22c94 <flatcc_json_parser_string_escape@@Base+0x6a8>
   22c64:	ldrb	r3, [fp, #-9]
   22c68:	cmp	r3, #57	; 0x39
   22c6c:	bhi	22c94 <flatcc_json_parser_string_escape@@Base+0x6a8>
   22c70:	ldrb	r3, [fp, #-9]
   22c74:	uxth	r3, r3
   22c78:	sub	r3, r3, #48	; 0x30
   22c7c:	strh	r3, [fp, #-12]
   22c80:	ldrh	r2, [fp, #-8]
   22c84:	ldrh	r3, [fp, #-12]
   22c88:	orr	r3, r2, r3
   22c8c:	strh	r3, [fp, #-8]
   22c90:	b	22d04 <flatcc_json_parser_string_escape@@Base+0x718>
   22c94:	ldrb	r3, [fp, #-9]
   22c98:	orr	r3, r3, #32
   22c9c:	strb	r3, [fp, #-9]
   22ca0:	ldrb	r3, [fp, #-9]
   22ca4:	cmp	r3, #96	; 0x60
   22ca8:	bls	22cdc <flatcc_json_parser_string_escape@@Base+0x6f0>
   22cac:	ldrb	r3, [fp, #-9]
   22cb0:	cmp	r3, #102	; 0x66
   22cb4:	bhi	22cdc <flatcc_json_parser_string_escape@@Base+0x6f0>
   22cb8:	ldrb	r3, [fp, #-9]
   22cbc:	uxth	r3, r3
   22cc0:	sub	r3, r3, #87	; 0x57
   22cc4:	strh	r3, [fp, #-12]
   22cc8:	ldrh	r2, [fp, #-8]
   22ccc:	ldrh	r3, [fp, #-12]
   22cd0:	orr	r3, r2, r3
   22cd4:	strh	r3, [fp, #-8]
   22cd8:	b	22d04 <flatcc_json_parser_string_escape@@Base+0x718>
   22cdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ce0:	mov	r2, #0
   22ce4:	strb	r2, [r3]
   22ce8:	mov	r3, #18
   22cec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22cf0:	ldr	r1, [fp, #-20]	; 0xffffffec
   22cf4:	ldr	r0, [fp, #-16]
   22cf8:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22cfc:	mov	r3, r0
   22d00:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22d04:	ldrh	r3, [fp, #-8]
   22d08:	cmp	r3, #127	; 0x7f
   22d0c:	bhi	22d34 <flatcc_json_parser_string_escape@@Base+0x748>
   22d10:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d14:	mov	r2, #1
   22d18:	strb	r2, [r3]
   22d1c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d20:	add	r3, r3, #1
   22d24:	ldrh	r2, [fp, #-8]
   22d28:	uxtb	r2, r2
   22d2c:	strb	r2, [r3]
   22d30:	b	22e38 <flatcc_json_parser_string_escape@@Base+0x84c>
   22d34:	ldrh	r3, [fp, #-8]
   22d38:	cmp	r3, #2048	; 0x800
   22d3c:	bcs	22da4 <flatcc_json_parser_string_escape@@Base+0x7b8>
   22d40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d44:	mov	r2, #2
   22d48:	strb	r2, [r3]
   22d4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d50:	add	r2, r3, #1
   22d54:	ldrh	r3, [fp, #-8]
   22d58:	lsr	r3, r3, #6
   22d5c:	uxth	r3, r3
   22d60:	uxtb	r3, r3
   22d64:	mvn	r3, r3, lsl #26
   22d68:	mvn	r3, r3, lsr #26
   22d6c:	uxtb	r3, r3
   22d70:	strb	r3, [r2]
   22d74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22d78:	add	r2, r3, #2
   22d7c:	ldrh	r3, [fp, #-8]
   22d80:	sxtb	r3, r3
   22d84:	and	r3, r3, #63	; 0x3f
   22d88:	sxtb	r3, r3
   22d8c:	mvn	r3, r3, lsl #25
   22d90:	mvn	r3, r3, lsr #25
   22d94:	sxtb	r3, r3
   22d98:	uxtb	r3, r3
   22d9c:	strb	r3, [r2]
   22da0:	b	22e38 <flatcc_json_parser_string_escape@@Base+0x84c>
   22da4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22da8:	mov	r2, #3
   22dac:	strb	r2, [r3]
   22db0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22db4:	add	r2, r3, #1
   22db8:	ldrh	r3, [fp, #-8]
   22dbc:	lsr	r3, r3, #12
   22dc0:	uxth	r3, r3
   22dc4:	uxtb	r3, r3
   22dc8:	mvn	r3, r3, lsl #27
   22dcc:	mvn	r3, r3, lsr #27
   22dd0:	uxtb	r3, r3
   22dd4:	strb	r3, [r2]
   22dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ddc:	add	r2, r3, #2
   22de0:	ldrh	r3, [fp, #-8]
   22de4:	lsr	r3, r3, #6
   22de8:	uxth	r3, r3
   22dec:	sxtb	r3, r3
   22df0:	and	r3, r3, #63	; 0x3f
   22df4:	sxtb	r3, r3
   22df8:	mvn	r3, r3, lsl #25
   22dfc:	mvn	r3, r3, lsr #25
   22e00:	sxtb	r3, r3
   22e04:	uxtb	r3, r3
   22e08:	strb	r3, [r2]
   22e0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22e10:	add	r2, r3, #3
   22e14:	ldrh	r3, [fp, #-8]
   22e18:	sxtb	r3, r3
   22e1c:	and	r3, r3, #63	; 0x3f
   22e20:	sxtb	r3, r3
   22e24:	mvn	r3, r3, lsl #25
   22e28:	mvn	r3, r3, lsr #25
   22e2c:	sxtb	r3, r3
   22e30:	uxtb	r3, r3
   22e34:	strb	r3, [r2]
   22e38:	ldr	r3, [fp, #-20]	; 0xffffffec
   22e3c:	add	r3, r3, #6
   22e40:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22e44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22e48:	mov	r2, #1
   22e4c:	strb	r2, [r3]
   22e50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22e54:	add	r3, r3, #1
   22e58:	mov	r2, #9
   22e5c:	strb	r2, [r3]
   22e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   22e64:	add	r3, r3, #2
   22e68:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22e6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22e70:	mov	r2, #1
   22e74:	strb	r2, [r3]
   22e78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22e7c:	add	r3, r3, #1
   22e80:	mov	r2, #10
   22e84:	strb	r2, [r3]
   22e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   22e8c:	add	r3, r3, #2
   22e90:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22e94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22e98:	mov	r2, #1
   22e9c:	strb	r2, [r3]
   22ea0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ea4:	add	r3, r3, #1
   22ea8:	mov	r2, #13
   22eac:	strb	r2, [r3]
   22eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   22eb4:	add	r3, r3, #2
   22eb8:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22ebc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ec0:	mov	r2, #1
   22ec4:	strb	r2, [r3]
   22ec8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ecc:	add	r3, r3, #1
   22ed0:	mov	r2, #8
   22ed4:	strb	r2, [r3]
   22ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
   22edc:	add	r3, r3, #2
   22ee0:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22ee4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ee8:	mov	r2, #1
   22eec:	strb	r2, [r3]
   22ef0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22ef4:	add	r3, r3, #1
   22ef8:	mov	r2, #12
   22efc:	strb	r2, [r3]
   22f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   22f04:	add	r3, r3, #2
   22f08:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22f0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f10:	mov	r2, #1
   22f14:	strb	r2, [r3]
   22f18:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f1c:	add	r3, r3, #1
   22f20:	mov	r2, #34	; 0x22
   22f24:	strb	r2, [r3]
   22f28:	ldr	r3, [fp, #-20]	; 0xffffffec
   22f2c:	add	r3, r3, #2
   22f30:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22f34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f38:	mov	r2, #1
   22f3c:	strb	r2, [r3]
   22f40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f44:	add	r3, r3, #1
   22f48:	mov	r2, #92	; 0x5c
   22f4c:	strb	r2, [r3]
   22f50:	ldr	r3, [fp, #-20]	; 0xffffffec
   22f54:	add	r3, r3, #2
   22f58:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22f5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f60:	mov	r2, #1
   22f64:	strb	r2, [r3]
   22f68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f6c:	add	r3, r3, #1
   22f70:	mov	r2, #47	; 0x2f
   22f74:	strb	r2, [r3]
   22f78:	ldr	r3, [fp, #-20]	; 0xffffffec
   22f7c:	add	r3, r3, #2
   22f80:	b	22fa8 <flatcc_json_parser_string_escape@@Base+0x9bc>
   22f84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   22f88:	mov	r2, #0
   22f8c:	strb	r2, [r3]
   22f90:	mov	r3, #18
   22f94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   22f98:	ldr	r1, [fp, #-20]	; 0xffffffec
   22f9c:	ldr	r0, [fp, #-16]
   22fa0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   22fa4:	mov	r3, r0
   22fa8:	mov	r0, r3
   22fac:	sub	sp, fp, #4
   22fb0:	pop	{fp, pc}

00022fb4 <flatcc_json_parser_skip_constant@@Base>:
   22fb4:	push	{fp, lr}
   22fb8:	add	fp, sp, #4
   22fbc:	sub	sp, sp, #24
   22fc0:	str	r0, [fp, #-16]
   22fc4:	str	r1, [fp, #-20]	; 0xffffffec
   22fc8:	str	r2, [fp, #-24]	; 0xffffffe8
   22fcc:	b	23090 <flatcc_json_parser_skip_constant@@Base+0xdc>
   22fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   22fd4:	ldrb	r3, [r3]
   22fd8:	strb	r3, [fp, #-5]
   22fdc:	ldrsb	r3, [fp, #-5]
   22fe0:	cmp	r3, #0
   22fe4:	blt	23018 <flatcc_json_parser_skip_constant@@Base+0x64>
   22fe8:	ldrb	r3, [fp, #-5]
   22fec:	cmp	r3, #95	; 0x5f
   22ff0:	beq	23018 <flatcc_json_parser_skip_constant@@Base+0x64>
   22ff4:	ldrb	r3, [fp, #-5]
   22ff8:	cmp	r3, #47	; 0x2f
   22ffc:	bls	2300c <flatcc_json_parser_skip_constant@@Base+0x58>
   23000:	ldrb	r3, [fp, #-5]
   23004:	cmp	r3, #57	; 0x39
   23008:	bls	23018 <flatcc_json_parser_skip_constant@@Base+0x64>
   2300c:	ldrb	r3, [fp, #-5]
   23010:	cmp	r3, #46	; 0x2e
   23014:	bne	23028 <flatcc_json_parser_skip_constant@@Base+0x74>
   23018:	ldr	r3, [fp, #-20]	; 0xffffffec
   2301c:	add	r3, r3, #1
   23020:	str	r3, [fp, #-20]	; 0xffffffec
   23024:	b	23090 <flatcc_json_parser_skip_constant@@Base+0xdc>
   23028:	ldrb	r3, [fp, #-5]
   2302c:	orr	r3, r3, #32
   23030:	strb	r3, [fp, #-5]
   23034:	ldrb	r3, [fp, #-5]
   23038:	cmp	r3, #96	; 0x60
   2303c:	bls	2305c <flatcc_json_parser_skip_constant@@Base+0xa8>
   23040:	ldrb	r3, [fp, #-5]
   23044:	cmp	r3, #122	; 0x7a
   23048:	bhi	2305c <flatcc_json_parser_skip_constant@@Base+0xa8>
   2304c:	ldr	r3, [fp, #-20]	; 0xffffffec
   23050:	add	r3, r3, #1
   23054:	str	r3, [fp, #-20]	; 0xffffffec
   23058:	b	23090 <flatcc_json_parser_skip_constant@@Base+0xdc>
   2305c:	ldr	r3, [fp, #-20]	; 0xffffffec
   23060:	str	r3, [fp, #-12]
   23064:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23068:	ldr	r1, [fp, #-12]
   2306c:	ldr	r0, [fp, #-16]
   23070:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23074:	str	r0, [fp, #-20]	; 0xffffffec
   23078:	ldr	r2, [fp, #-20]	; 0xffffffec
   2307c:	ldr	r3, [fp, #-12]
   23080:	cmp	r2, r3
   23084:	bne	23090 <flatcc_json_parser_skip_constant@@Base+0xdc>
   23088:	ldr	r3, [fp, #-20]	; 0xffffffec
   2308c:	b	230a4 <flatcc_json_parser_skip_constant@@Base+0xf0>
   23090:	ldr	r2, [fp, #-20]	; 0xffffffec
   23094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23098:	cmp	r2, r3
   2309c:	bne	22fd0 <flatcc_json_parser_skip_constant@@Base+0x1c>
   230a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   230a4:	mov	r0, r3
   230a8:	sub	sp, fp, #4
   230ac:	pop	{fp, pc}

000230b0 <flatcc_json_parser_match_constant@@Base>:
   230b0:	push	{fp, lr}
   230b4:	add	fp, sp, #4
   230b8:	sub	sp, sp, #32
   230bc:	str	r0, [fp, #-24]	; 0xffffffe8
   230c0:	str	r1, [fp, #-28]	; 0xffffffe4
   230c4:	str	r2, [fp, #-32]	; 0xffffffe0
   230c8:	str	r3, [fp, #-36]	; 0xffffffdc
   230cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   230d0:	str	r3, [fp, #-8]
   230d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   230d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   230dc:	add	r3, r2, r3
   230e0:	str	r3, [fp, #-12]
   230e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   230e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   230ec:	sub	r2, r2, r3
   230f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   230f4:	cmp	r2, r3
   230f8:	bgt	23110 <flatcc_json_parser_match_constant@@Base+0x60>
   230fc:	ldr	r3, [fp, #4]
   23100:	mov	r2, #0
   23104:	str	r2, [r3]
   23108:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2310c:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   23110:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23114:	ldr	r3, [r3, #12]
   23118:	cmp	r3, #0
   2311c:	beq	23224 <flatcc_json_parser_match_constant@@Base+0x174>
   23120:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23124:	ldr	r1, [fp, #-12]
   23128:	ldr	r0, [fp, #-24]	; 0xffffffe8
   2312c:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23130:	str	r0, [fp, #-28]	; 0xffffffe4
   23134:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23138:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2313c:	cmp	r2, r3
   23140:	bne	23158 <flatcc_json_parser_match_constant@@Base+0xa8>
   23144:	ldr	r3, [fp, #4]
   23148:	mov	r2, #0
   2314c:	str	r2, [r3]
   23150:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23154:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   23158:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2315c:	ldr	r3, [fp, #-12]
   23160:	cmp	r2, r3
   23164:	beq	231d8 <flatcc_json_parser_match_constant@@Base+0x128>
   23168:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2316c:	ldrb	r3, [r3]
   23170:	strb	r3, [fp, #-13]
   23174:	ldrb	r3, [fp, #-13]
   23178:	cmp	r3, #95	; 0x5f
   2317c:	beq	2318c <flatcc_json_parser_match_constant@@Base+0xdc>
   23180:	ldrsb	r3, [fp, #-13]
   23184:	cmp	r3, #0
   23188:	bge	231a0 <flatcc_json_parser_match_constant@@Base+0xf0>
   2318c:	ldr	r3, [fp, #4]
   23190:	mov	r2, #1
   23194:	str	r2, [r3]
   23198:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2319c:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   231a0:	ldrb	r3, [fp, #-13]
   231a4:	orr	r3, r3, #32
   231a8:	strb	r3, [fp, #-13]
   231ac:	ldrb	r3, [fp, #-13]
   231b0:	cmp	r3, #96	; 0x60
   231b4:	bls	231d8 <flatcc_json_parser_match_constant@@Base+0x128>
   231b8:	ldrb	r3, [fp, #-13]
   231bc:	cmp	r3, #122	; 0x7a
   231c0:	bhi	231d8 <flatcc_json_parser_match_constant@@Base+0x128>
   231c4:	ldr	r3, [fp, #4]
   231c8:	mov	r2, #1
   231cc:	str	r2, [r3]
   231d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   231d4:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   231d8:	ldr	r3, [fp, #4]
   231dc:	mov	r2, #0
   231e0:	str	r2, [r3]
   231e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   231e8:	ldrb	r3, [r3]
   231ec:	cmp	r3, #44	; 0x2c
   231f0:	beq	23214 <flatcc_json_parser_match_constant@@Base+0x164>
   231f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   231f8:	ldrb	r3, [r3]
   231fc:	cmp	r3, #125	; 0x7d
   23200:	beq	23214 <flatcc_json_parser_match_constant@@Base+0x164>
   23204:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23208:	ldrb	r3, [r3]
   2320c:	cmp	r3, #93	; 0x5d
   23210:	bne	2321c <flatcc_json_parser_match_constant@@Base+0x16c>
   23214:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23218:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   2321c:	ldr	r3, [fp, #-8]
   23220:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   23224:	ldr	r3, [fp, #-12]
   23228:	str	r3, [fp, #-28]	; 0xffffffe4
   2322c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23230:	ldrb	r3, [r3]
   23234:	cmp	r3, #32
   23238:	bne	232c0 <flatcc_json_parser_match_constant@@Base+0x210>
   2323c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23240:	add	r3, r3, #1
   23244:	str	r3, [fp, #-28]	; 0xffffffe4
   23248:	b	23258 <flatcc_json_parser_match_constant@@Base+0x1a8>
   2324c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23250:	add	r3, r3, #1
   23254:	str	r3, [fp, #-28]	; 0xffffffe4
   23258:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2325c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23260:	cmp	r2, r3
   23264:	beq	23278 <flatcc_json_parser_match_constant@@Base+0x1c8>
   23268:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2326c:	ldrb	r3, [r3]
   23270:	cmp	r3, #32
   23274:	beq	2324c <flatcc_json_parser_match_constant@@Base+0x19c>
   23278:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2327c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   23280:	cmp	r2, r3
   23284:	bne	2329c <flatcc_json_parser_match_constant@@Base+0x1ec>
   23288:	ldr	r3, [fp, #4]
   2328c:	mov	r2, #0
   23290:	str	r2, [r3]
   23294:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23298:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   2329c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   232a0:	ldrb	r3, [r3]
   232a4:	cmp	r3, #34	; 0x22
   232a8:	beq	232c0 <flatcc_json_parser_match_constant@@Base+0x210>
   232ac:	ldr	r3, [fp, #4]
   232b0:	mov	r2, #1
   232b4:	str	r2, [r3]
   232b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   232bc:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   232c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   232c4:	ldrb	r3, [r3]
   232c8:	cmp	r3, #34	; 0x22
   232cc:	beq	23300 <flatcc_json_parser_match_constant@@Base+0x250>
   232d0:	cmp	r3, #92	; 0x5c
   232d4:	bne	23330 <flatcc_json_parser_match_constant@@Base+0x280>
   232d8:	ldr	r3, [fp, #4]
   232dc:	mov	r2, #0
   232e0:	str	r2, [r3]
   232e4:	mov	r3, #18
   232e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   232ec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   232f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   232f4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   232f8:	mov	r3, r0
   232fc:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   23300:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23304:	add	r3, r3, #1
   23308:	mov	r2, #0
   2330c:	mov	r1, r3
   23310:	ldr	r0, [fp, #-24]	; 0xffffffe8
   23314:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23318:	str	r0, [fp, #-28]	; 0xffffffe4
   2331c:	ldr	r3, [fp, #4]
   23320:	mov	r2, #0
   23324:	str	r2, [r3]
   23328:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2332c:	b	23340 <flatcc_json_parser_match_constant@@Base+0x290>
   23330:	ldr	r3, [fp, #4]
   23334:	mov	r2, #0
   23338:	str	r2, [r3]
   2333c:	ldr	r3, [fp, #-8]
   23340:	mov	r0, r3
   23344:	sub	sp, fp, #4
   23348:	pop	{fp, pc}

0002334c <flatcc_json_parser_unmatched_symbol@@Base>:
   2334c:	push	{fp, lr}
   23350:	add	fp, sp, #4
   23354:	sub	sp, sp, #16
   23358:	str	r0, [fp, #-8]
   2335c:	str	r1, [fp, #-12]
   23360:	str	r2, [fp, #-16]
   23364:	ldr	r3, [fp, #-8]
   23368:	ldr	r3, [r3, #8]
   2336c:	and	r3, r3, #1
   23370:	cmp	r3, #0
   23374:	beq	23414 <flatcc_json_parser_unmatched_symbol@@Base+0xc8>
   23378:	ldr	r2, [fp, #-16]
   2337c:	ldr	r1, [fp, #-12]
   23380:	ldr	r0, [fp, #-8]
   23384:	bl	1d3d4 <flatcc_emitter_copy_buffer@@Base+0x44c>
   23388:	str	r0, [fp, #-12]
   2338c:	ldr	r2, [fp, #-16]
   23390:	ldr	r1, [fp, #-12]
   23394:	ldr	r0, [fp, #-8]
   23398:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   2339c:	str	r0, [fp, #-12]
   233a0:	ldr	r2, [fp, #-12]
   233a4:	ldr	r3, [fp, #-16]
   233a8:	cmp	r2, r3
   233ac:	beq	233f8 <flatcc_json_parser_unmatched_symbol@@Base+0xac>
   233b0:	ldr	r3, [fp, #-12]
   233b4:	ldrb	r3, [r3]
   233b8:	cmp	r3, #58	; 0x3a
   233bc:	bne	233f8 <flatcc_json_parser_unmatched_symbol@@Base+0xac>
   233c0:	ldr	r3, [fp, #-12]
   233c4:	add	r3, r3, #1
   233c8:	str	r3, [fp, #-12]
   233cc:	ldr	r2, [fp, #-16]
   233d0:	ldr	r1, [fp, #-12]
   233d4:	ldr	r0, [fp, #-8]
   233d8:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   233dc:	str	r0, [fp, #-12]
   233e0:	ldr	r2, [fp, #-16]
   233e4:	ldr	r1, [fp, #-12]
   233e8:	ldr	r0, [fp, #-8]
   233ec:	bl	23b10 <flatcc_json_parser_generic_json@@Base>
   233f0:	mov	r3, r0
   233f4:	b	2342c <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
   233f8:	mov	r3, #4
   233fc:	ldr	r2, [fp, #-16]
   23400:	ldr	r1, [fp, #-12]
   23404:	ldr	r0, [fp, #-8]
   23408:	bl	222fc <flatcc_json_parser_set_error@@Base>
   2340c:	mov	r3, r0
   23410:	b	2342c <flatcc_json_parser_unmatched_symbol@@Base+0xe0>
   23414:	mov	r3, #13
   23418:	ldr	r2, [fp, #-16]
   2341c:	ldr	r1, [fp, #-12]
   23420:	ldr	r0, [fp, #-8]
   23424:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23428:	mov	r3, r0
   2342c:	mov	r0, r3
   23430:	sub	sp, fp, #4
   23434:	pop	{fp, pc}
   23438:	push	{fp, lr}
   2343c:	add	fp, sp, #4
   23440:	sub	sp, sp, #16
   23444:	str	r0, [fp, #-8]
   23448:	str	r1, [fp, #-12]
   2344c:	str	r2, [fp, #-16]
   23450:	ldr	r2, [fp, #-12]
   23454:	ldr	r3, [fp, #-16]
   23458:	cmp	r2, r3
   2345c:	bne	23468 <flatcc_json_parser_unmatched_symbol@@Base+0x11c>
   23460:	ldr	r3, [fp, #-12]
   23464:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   23468:	ldr	r3, [fp, #-12]
   2346c:	ldrb	r3, [r3]
   23470:	cmp	r3, #45	; 0x2d
   23474:	bne	234b0 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   23478:	ldr	r3, [fp, #-12]
   2347c:	add	r3, r3, #1
   23480:	str	r3, [fp, #-12]
   23484:	ldr	r2, [fp, #-12]
   23488:	ldr	r3, [fp, #-16]
   2348c:	cmp	r2, r3
   23490:	bne	234b0 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   23494:	mov	r3, #6
   23498:	ldr	r2, [fp, #-16]
   2349c:	ldr	r1, [fp, #-12]
   234a0:	ldr	r0, [fp, #-8]
   234a4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   234a8:	mov	r3, r0
   234ac:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   234b0:	ldr	r3, [fp, #-12]
   234b4:	ldrb	r3, [r3]
   234b8:	cmp	r3, #48	; 0x30
   234bc:	bne	234d0 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   234c0:	ldr	r3, [fp, #-12]
   234c4:	add	r3, r3, #1
   234c8:	str	r3, [fp, #-12]
   234cc:	b	23558 <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   234d0:	ldr	r3, [fp, #-12]
   234d4:	ldrb	r3, [r3]
   234d8:	cmp	r3, #48	; 0x30
   234dc:	bls	234f0 <flatcc_json_parser_unmatched_symbol@@Base+0x1a4>
   234e0:	ldr	r3, [fp, #-12]
   234e4:	ldrb	r3, [r3]
   234e8:	cmp	r3, #57	; 0x39
   234ec:	bls	2350c <flatcc_json_parser_unmatched_symbol@@Base+0x1c0>
   234f0:	mov	r3, #6
   234f4:	ldr	r2, [fp, #-16]
   234f8:	ldr	r1, [fp, #-12]
   234fc:	ldr	r0, [fp, #-8]
   23500:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23504:	mov	r3, r0
   23508:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   2350c:	ldr	r3, [fp, #-12]
   23510:	add	r3, r3, #1
   23514:	str	r3, [fp, #-12]
   23518:	b	23528 <flatcc_json_parser_unmatched_symbol@@Base+0x1dc>
   2351c:	ldr	r3, [fp, #-12]
   23520:	add	r3, r3, #1
   23524:	str	r3, [fp, #-12]
   23528:	ldr	r2, [fp, #-12]
   2352c:	ldr	r3, [fp, #-16]
   23530:	cmp	r2, r3
   23534:	beq	23558 <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   23538:	ldr	r3, [fp, #-12]
   2353c:	ldrb	r3, [r3]
   23540:	cmp	r3, #47	; 0x2f
   23544:	bls	23558 <flatcc_json_parser_unmatched_symbol@@Base+0x20c>
   23548:	ldr	r3, [fp, #-12]
   2354c:	ldrb	r3, [r3]
   23550:	cmp	r3, #57	; 0x39
   23554:	bls	2351c <flatcc_json_parser_unmatched_symbol@@Base+0x1d0>
   23558:	ldr	r2, [fp, #-12]
   2355c:	ldr	r3, [fp, #-16]
   23560:	cmp	r2, r3
   23564:	beq	2360c <flatcc_json_parser_unmatched_symbol@@Base+0x2c0>
   23568:	ldr	r3, [fp, #-12]
   2356c:	ldrb	r3, [r3]
   23570:	cmp	r3, #46	; 0x2e
   23574:	bne	2360c <flatcc_json_parser_unmatched_symbol@@Base+0x2c0>
   23578:	ldr	r3, [fp, #-12]
   2357c:	add	r3, r3, #1
   23580:	str	r3, [fp, #-12]
   23584:	ldr	r3, [fp, #-12]
   23588:	ldrb	r3, [r3]
   2358c:	cmp	r3, #47	; 0x2f
   23590:	bls	235a4 <flatcc_json_parser_unmatched_symbol@@Base+0x258>
   23594:	ldr	r3, [fp, #-12]
   23598:	ldrb	r3, [r3]
   2359c:	cmp	r3, #57	; 0x39
   235a0:	bls	235c0 <flatcc_json_parser_unmatched_symbol@@Base+0x274>
   235a4:	mov	r3, #6
   235a8:	ldr	r2, [fp, #-16]
   235ac:	ldr	r1, [fp, #-12]
   235b0:	ldr	r0, [fp, #-8]
   235b4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   235b8:	mov	r3, r0
   235bc:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   235c0:	ldr	r3, [fp, #-12]
   235c4:	add	r3, r3, #1
   235c8:	str	r3, [fp, #-12]
   235cc:	b	235dc <flatcc_json_parser_unmatched_symbol@@Base+0x290>
   235d0:	ldr	r3, [fp, #-12]
   235d4:	add	r3, r3, #1
   235d8:	str	r3, [fp, #-12]
   235dc:	ldr	r2, [fp, #-12]
   235e0:	ldr	r3, [fp, #-16]
   235e4:	cmp	r2, r3
   235e8:	beq	2360c <flatcc_json_parser_unmatched_symbol@@Base+0x2c0>
   235ec:	ldr	r3, [fp, #-12]
   235f0:	ldrb	r3, [r3]
   235f4:	cmp	r3, #47	; 0x2f
   235f8:	bls	2360c <flatcc_json_parser_unmatched_symbol@@Base+0x2c0>
   235fc:	ldr	r3, [fp, #-12]
   23600:	ldrb	r3, [r3]
   23604:	cmp	r3, #57	; 0x39
   23608:	bls	235d0 <flatcc_json_parser_unmatched_symbol@@Base+0x284>
   2360c:	ldr	r2, [fp, #-12]
   23610:	ldr	r3, [fp, #-16]
   23614:	cmp	r2, r3
   23618:	beq	23738 <flatcc_json_parser_unmatched_symbol@@Base+0x3ec>
   2361c:	ldr	r3, [fp, #-12]
   23620:	ldrb	r3, [r3]
   23624:	cmp	r3, #101	; 0x65
   23628:	beq	2363c <flatcc_json_parser_unmatched_symbol@@Base+0x2f0>
   2362c:	ldr	r3, [fp, #-12]
   23630:	ldrb	r3, [r3]
   23634:	cmp	r3, #69	; 0x45
   23638:	bne	23738 <flatcc_json_parser_unmatched_symbol@@Base+0x3ec>
   2363c:	ldr	r3, [fp, #-12]
   23640:	add	r3, r3, #1
   23644:	str	r3, [fp, #-12]
   23648:	ldr	r2, [fp, #-12]
   2364c:	ldr	r3, [fp, #-16]
   23650:	cmp	r2, r3
   23654:	bne	23674 <flatcc_json_parser_unmatched_symbol@@Base+0x328>
   23658:	mov	r3, #6
   2365c:	ldr	r2, [fp, #-16]
   23660:	ldr	r1, [fp, #-12]
   23664:	ldr	r0, [fp, #-8]
   23668:	bl	222fc <flatcc_json_parser_set_error@@Base>
   2366c:	mov	r3, r0
   23670:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   23674:	ldr	r3, [fp, #-12]
   23678:	ldrb	r3, [r3]
   2367c:	cmp	r3, #43	; 0x2b
   23680:	beq	23694 <flatcc_json_parser_unmatched_symbol@@Base+0x348>
   23684:	ldr	r3, [fp, #-12]
   23688:	ldrb	r3, [r3]
   2368c:	cmp	r3, #45	; 0x2d
   23690:	bne	236a0 <flatcc_json_parser_unmatched_symbol@@Base+0x354>
   23694:	ldr	r3, [fp, #-12]
   23698:	add	r3, r3, #1
   2369c:	str	r3, [fp, #-12]
   236a0:	ldr	r2, [fp, #-12]
   236a4:	ldr	r3, [fp, #-16]
   236a8:	cmp	r2, r3
   236ac:	beq	236d0 <flatcc_json_parser_unmatched_symbol@@Base+0x384>
   236b0:	ldr	r3, [fp, #-12]
   236b4:	ldrb	r3, [r3]
   236b8:	cmp	r3, #47	; 0x2f
   236bc:	bls	236d0 <flatcc_json_parser_unmatched_symbol@@Base+0x384>
   236c0:	ldr	r3, [fp, #-12]
   236c4:	ldrb	r3, [r3]
   236c8:	cmp	r3, #57	; 0x39
   236cc:	bls	236ec <flatcc_json_parser_unmatched_symbol@@Base+0x3a0>
   236d0:	mov	r3, #6
   236d4:	ldr	r2, [fp, #-16]
   236d8:	ldr	r1, [fp, #-12]
   236dc:	ldr	r0, [fp, #-8]
   236e0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   236e4:	mov	r3, r0
   236e8:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   236ec:	ldr	r3, [fp, #-12]
   236f0:	add	r3, r3, #1
   236f4:	str	r3, [fp, #-12]
   236f8:	b	23708 <flatcc_json_parser_unmatched_symbol@@Base+0x3bc>
   236fc:	ldr	r3, [fp, #-12]
   23700:	add	r3, r3, #1
   23704:	str	r3, [fp, #-12]
   23708:	ldr	r2, [fp, #-12]
   2370c:	ldr	r3, [fp, #-16]
   23710:	cmp	r2, r3
   23714:	beq	23738 <flatcc_json_parser_unmatched_symbol@@Base+0x3ec>
   23718:	ldr	r3, [fp, #-12]
   2371c:	ldrb	r3, [r3]
   23720:	cmp	r3, #47	; 0x2f
   23724:	bls	23738 <flatcc_json_parser_unmatched_symbol@@Base+0x3ec>
   23728:	ldr	r3, [fp, #-12]
   2372c:	ldrb	r3, [r3]
   23730:	cmp	r3, #57	; 0x39
   23734:	bls	236fc <flatcc_json_parser_unmatched_symbol@@Base+0x3b0>
   23738:	ldr	r2, [fp, #-12]
   2373c:	ldr	r3, [fp, #-16]
   23740:	cmp	r2, r3
   23744:	beq	237b0 <flatcc_json_parser_unmatched_symbol@@Base+0x464>
   23748:	ldr	r3, [fp, #-12]
   2374c:	ldrb	r3, [r3]
   23750:	cmp	r3, #32
   23754:	beq	237a8 <flatcc_json_parser_unmatched_symbol@@Base+0x45c>
   23758:	cmp	r3, #32
   2375c:	bgt	2377c <flatcc_json_parser_unmatched_symbol@@Base+0x430>
   23760:	cmp	r3, #9
   23764:	blt	237b0 <flatcc_json_parser_unmatched_symbol@@Base+0x464>
   23768:	cmp	r3, #11
   2376c:	ble	237a8 <flatcc_json_parser_unmatched_symbol@@Base+0x45c>
   23770:	cmp	r3, #13
   23774:	beq	237a8 <flatcc_json_parser_unmatched_symbol@@Base+0x45c>
   23778:	b	237b0 <flatcc_json_parser_unmatched_symbol@@Base+0x464>
   2377c:	cmp	r3, #58	; 0x3a
   23780:	beq	237a8 <flatcc_json_parser_unmatched_symbol@@Base+0x45c>
   23784:	cmp	r3, #58	; 0x3a
   23788:	bgt	23798 <flatcc_json_parser_unmatched_symbol@@Base+0x44c>
   2378c:	cmp	r3, #44	; 0x2c
   23790:	beq	237a8 <flatcc_json_parser_unmatched_symbol@@Base+0x45c>
   23794:	b	237b0 <flatcc_json_parser_unmatched_symbol@@Base+0x464>
   23798:	cmp	r3, #93	; 0x5d
   2379c:	beq	237a8 <flatcc_json_parser_unmatched_symbol@@Base+0x45c>
   237a0:	cmp	r3, #125	; 0x7d
   237a4:	bne	237b0 <flatcc_json_parser_unmatched_symbol@@Base+0x464>
   237a8:	ldr	r3, [fp, #-12]
   237ac:	b	237c8 <flatcc_json_parser_unmatched_symbol@@Base+0x47c>
   237b0:	mov	r3, #6
   237b4:	ldr	r2, [fp, #-16]
   237b8:	ldr	r1, [fp, #-12]
   237bc:	ldr	r0, [fp, #-8]
   237c0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   237c4:	mov	r3, r0
   237c8:	mov	r0, r3
   237cc:	sub	sp, fp, #4
   237d0:	pop	{fp, pc}

000237d4 <flatcc_json_parser_double@@Base>:
   237d4:	push	{fp, lr}
   237d8:	add	fp, sp, #4
   237dc:	sub	sp, sp, #24
   237e0:	str	r0, [fp, #-16]
   237e4:	str	r1, [fp, #-20]	; 0xffffffec
   237e8:	str	r2, [fp, #-24]	; 0xffffffe8
   237ec:	str	r3, [fp, #-28]	; 0xffffffe4
   237f0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   237f4:	mov	r2, #0
   237f8:	mov	r3, #0
   237fc:	strd	r2, [r1]
   23800:	ldr	r2, [fp, #-20]	; 0xffffffec
   23804:	ldr	r3, [fp, #-24]	; 0xffffffe8
   23808:	cmp	r2, r3
   2380c:	bne	23818 <flatcc_json_parser_double@@Base+0x44>
   23810:	ldr	r3, [fp, #-20]	; 0xffffffec
   23814:	b	23960 <flatcc_json_parser_double@@Base+0x18c>
   23818:	ldr	r3, [fp, #-20]	; 0xffffffec
   2381c:	str	r3, [fp, #-8]
   23820:	ldr	r3, [fp, #-20]	; 0xffffffec
   23824:	ldrb	r3, [r3]
   23828:	cmp	r3, #45	; 0x2d
   2382c:	bne	2383c <flatcc_json_parser_double@@Base+0x68>
   23830:	ldr	r3, [fp, #-8]
   23834:	add	r3, r3, #1
   23838:	str	r3, [fp, #-8]
   2383c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23840:	ldr	r3, [fp, #-8]
   23844:	sub	r3, r2, r3
   23848:	cmp	r3, #1
   2384c:	ble	238a0 <flatcc_json_parser_double@@Base+0xcc>
   23850:	ldr	r3, [fp, #-8]
   23854:	ldrb	r3, [r3]
   23858:	cmp	r3, #46	; 0x2e
   2385c:	beq	23884 <flatcc_json_parser_double@@Base+0xb0>
   23860:	ldr	r3, [fp, #-8]
   23864:	ldrb	r3, [r3]
   23868:	cmp	r3, #48	; 0x30
   2386c:	bne	238a0 <flatcc_json_parser_double@@Base+0xcc>
   23870:	ldr	r3, [fp, #-8]
   23874:	add	r3, r3, #1
   23878:	ldrb	r3, [r3]
   2387c:	cmp	r3, #48	; 0x30
   23880:	bne	238a0 <flatcc_json_parser_double@@Base+0xcc>
   23884:	mov	r3, #6
   23888:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2388c:	ldr	r1, [fp, #-20]	; 0xffffffec
   23890:	ldr	r0, [fp, #-16]
   23894:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23898:	mov	r3, r0
   2389c:	b	23960 <flatcc_json_parser_double@@Base+0x18c>
   238a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   238a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   238a8:	sub	r3, r2, r3
   238ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   238b0:	mov	r1, r3
   238b4:	ldr	r0, [fp, #-20]	; 0xffffffec
   238b8:	bl	2137c <grisu3_diy_fp_encode_double@@Base+0x140c>
   238bc:	str	r0, [fp, #-12]
   238c0:	ldr	r3, [fp, #-12]
   238c4:	cmp	r3, #0
   238c8:	beq	238dc <flatcc_json_parser_double@@Base+0x108>
   238cc:	ldr	r2, [fp, #-12]
   238d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   238d4:	cmp	r2, r3
   238d8:	bne	2395c <flatcc_json_parser_double@@Base+0x188>
   238dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   238e0:	vldr	d7, [r3]
   238e4:	vabs.f64	d7, d7
   238e8:	vldr	d6, [pc, #128]	; 23970 <flatcc_json_parser_double@@Base+0x19c>
   238ec:	vcmp.f64	d7, d6
   238f0:	vmrs	APSR_nzcv, fpscr
   238f4:	movle	r3, #1
   238f8:	movgt	r3, #0
   238fc:	uxtb	r3, r3
   23900:	eor	r3, r3, #1
   23904:	uxtb	r3, r3
   23908:	cmp	r3, #0
   2390c:	beq	23918 <flatcc_json_parser_double@@Base+0x144>
   23910:	mov	r3, #1
   23914:	b	2391c <flatcc_json_parser_double@@Base+0x148>
   23918:	mov	r3, #0
   2391c:	cmp	r3, #0
   23920:	beq	23940 <flatcc_json_parser_double@@Base+0x16c>
   23924:	mov	r3, #7
   23928:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2392c:	ldr	r1, [fp, #-20]	; 0xffffffec
   23930:	ldr	r0, [fp, #-16]
   23934:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23938:	mov	r3, r0
   2393c:	b	23960 <flatcc_json_parser_double@@Base+0x18c>
   23940:	mov	r3, #6
   23944:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23948:	ldr	r1, [fp, #-20]	; 0xffffffec
   2394c:	ldr	r0, [fp, #-16]
   23950:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23954:	mov	r3, r0
   23958:	b	23960 <flatcc_json_parser_double@@Base+0x18c>
   2395c:	ldr	r3, [fp, #-12]
   23960:	mov	r0, r3
   23964:	sub	sp, fp, #4
   23968:	pop	{fp, pc}
   2396c:	nop			; (mov r0, r0)
   23970:			; <UNDEFINED> instruction: 0xffffffff
   23974:	svcvc	0x00efffff

00023978 <flatcc_json_parser_float@@Base>:
   23978:	push	{fp, lr}
   2397c:	add	fp, sp, #4
   23980:	sub	sp, sp, #24
   23984:	str	r0, [fp, #-16]
   23988:	str	r1, [fp, #-20]	; 0xffffffec
   2398c:	str	r2, [fp, #-24]	; 0xffffffe8
   23990:	str	r3, [fp, #-28]	; 0xffffffe4
   23994:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23998:	mov	r2, #0
   2399c:	str	r2, [r3]
   239a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   239a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   239a8:	cmp	r2, r3
   239ac:	bne	239b8 <flatcc_json_parser_float@@Base+0x40>
   239b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   239b4:	b	23b00 <flatcc_json_parser_float@@Base+0x188>
   239b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   239bc:	str	r3, [fp, #-8]
   239c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   239c4:	ldrb	r3, [r3]
   239c8:	cmp	r3, #45	; 0x2d
   239cc:	bne	239dc <flatcc_json_parser_float@@Base+0x64>
   239d0:	ldr	r3, [fp, #-8]
   239d4:	add	r3, r3, #1
   239d8:	str	r3, [fp, #-8]
   239dc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   239e0:	ldr	r3, [fp, #-8]
   239e4:	sub	r3, r2, r3
   239e8:	cmp	r3, #1
   239ec:	ble	23a40 <flatcc_json_parser_float@@Base+0xc8>
   239f0:	ldr	r3, [fp, #-8]
   239f4:	ldrb	r3, [r3]
   239f8:	cmp	r3, #46	; 0x2e
   239fc:	beq	23a24 <flatcc_json_parser_float@@Base+0xac>
   23a00:	ldr	r3, [fp, #-8]
   23a04:	ldrb	r3, [r3]
   23a08:	cmp	r3, #48	; 0x30
   23a0c:	bne	23a40 <flatcc_json_parser_float@@Base+0xc8>
   23a10:	ldr	r3, [fp, #-8]
   23a14:	add	r3, r3, #1
   23a18:	ldrb	r3, [r3]
   23a1c:	cmp	r3, #48	; 0x30
   23a20:	bne	23a40 <flatcc_json_parser_float@@Base+0xc8>
   23a24:	mov	r3, #6
   23a28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23a2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   23a30:	ldr	r0, [fp, #-16]
   23a34:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23a38:	mov	r3, r0
   23a3c:	b	23b00 <flatcc_json_parser_float@@Base+0x188>
   23a40:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   23a48:	sub	r3, r2, r3
   23a4c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   23a50:	mov	r1, r3
   23a54:	ldr	r0, [fp, #-20]	; 0xffffffec
   23a58:	bl	213b4 <grisu3_diy_fp_encode_double@@Base+0x1444>
   23a5c:	str	r0, [fp, #-12]
   23a60:	ldr	r3, [fp, #-12]
   23a64:	cmp	r3, #0
   23a68:	beq	23a7c <flatcc_json_parser_float@@Base+0x104>
   23a6c:	ldr	r2, [fp, #-12]
   23a70:	ldr	r3, [fp, #-20]	; 0xffffffec
   23a74:	cmp	r2, r3
   23a78:	bne	23afc <flatcc_json_parser_float@@Base+0x184>
   23a7c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   23a80:	vldr	s15, [r3]
   23a84:	vabs.f32	s15, s15
   23a88:	vldr	s14, [pc, #124]	; 23b0c <flatcc_json_parser_float@@Base+0x194>
   23a8c:	vcmp.f32	s15, s14
   23a90:	vmrs	APSR_nzcv, fpscr
   23a94:	movle	r3, #1
   23a98:	movgt	r3, #0
   23a9c:	uxtb	r3, r3
   23aa0:	eor	r3, r3, #1
   23aa4:	uxtb	r3, r3
   23aa8:	cmp	r3, #0
   23aac:	beq	23ab8 <flatcc_json_parser_float@@Base+0x140>
   23ab0:	mov	r3, #1
   23ab4:	b	23abc <flatcc_json_parser_float@@Base+0x144>
   23ab8:	mov	r3, #0
   23abc:	cmp	r3, #0
   23ac0:	beq	23ae0 <flatcc_json_parser_float@@Base+0x168>
   23ac4:	mov	r3, #7
   23ac8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23acc:	ldr	r1, [fp, #-20]	; 0xffffffec
   23ad0:	ldr	r0, [fp, #-16]
   23ad4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23ad8:	mov	r3, r0
   23adc:	b	23b00 <flatcc_json_parser_float@@Base+0x188>
   23ae0:	mov	r3, #6
   23ae4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   23ae8:	ldr	r1, [fp, #-20]	; 0xffffffec
   23aec:	ldr	r0, [fp, #-16]
   23af0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23af4:	mov	r3, r0
   23af8:	b	23b00 <flatcc_json_parser_float@@Base+0x188>
   23afc:	ldr	r3, [fp, #-12]
   23b00:	mov	r0, r3
   23b04:	sub	sp, fp, #4
   23b08:	pop	{fp, pc}
   23b0c:	svcvc	0x007fffff

00023b10 <flatcc_json_parser_generic_json@@Base>:
   23b10:	push	{fp, lr}
   23b14:	add	fp, sp, #4
   23b18:	sub	sp, sp, #552	; 0x228
   23b1c:	str	r0, [fp, #-544]	; 0xfffffde0
   23b20:	str	r1, [fp, #-548]	; 0xfffffddc
   23b24:	str	r2, [fp, #-552]	; 0xfffffdd8
   23b28:	mov	r3, #0
   23b2c:	str	r3, [fp, #-536]	; 0xfffffde8
   23b30:	sub	r3, fp, #528	; 0x210
   23b34:	str	r3, [fp, #-8]
   23b38:	ldr	r3, [fp, #-8]
   23b3c:	add	r3, r3, #512	; 0x200
   23b40:	str	r3, [fp, #-12]
   23b44:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23b48:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23b4c:	cmp	r2, r3
   23b50:	bne	23b5c <flatcc_json_parser_generic_json@@Base+0x4c>
   23b54:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23b58:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23b5c:	sub	r3, fp, #528	; 0x210
   23b60:	ldr	r2, [fp, #-8]
   23b64:	cmp	r2, r3
   23b68:	beq	23c30 <flatcc_json_parser_generic_json@@Base+0x120>
   23b6c:	ldr	r3, [fp, #-8]
   23b70:	sub	r3, r3, #1
   23b74:	ldrb	r3, [r3]
   23b78:	cmp	r3, #125	; 0x7d
   23b7c:	bne	23c30 <flatcc_json_parser_generic_json@@Base+0x120>
   23b80:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23b84:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23b88:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23b8c:	bl	1d330 <flatcc_emitter_copy_buffer@@Base+0x3a8>
   23b90:	str	r0, [fp, #-548]	; 0xfffffddc
   23b94:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23b98:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23b9c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23ba0:	bl	1d3d4 <flatcc_emitter_copy_buffer@@Base+0x44c>
   23ba4:	str	r0, [fp, #-548]	; 0xfffffddc
   23ba8:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23bac:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23bb0:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23bb4:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23bb8:	str	r0, [fp, #-548]	; 0xfffffddc
   23bbc:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23bc0:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23bc4:	cmp	r2, r3
   23bc8:	bne	23be8 <flatcc_json_parser_generic_json@@Base+0xd8>
   23bcc:	mov	r3, #10
   23bd0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23bd4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23bd8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23bdc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23be0:	mov	r3, r0
   23be4:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23be8:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23bec:	ldrb	r3, [r3]
   23bf0:	cmp	r3, #58	; 0x3a
   23bf4:	beq	23c14 <flatcc_json_parser_generic_json@@Base+0x104>
   23bf8:	mov	r3, #4
   23bfc:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23c00:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23c04:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23c08:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23c0c:	mov	r3, r0
   23c10:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23c14:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23c18:	add	r3, r3, #1
   23c1c:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23c20:	mov	r1, r3
   23c24:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23c28:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23c2c:	str	r0, [fp, #-548]	; 0xfffffddc
   23c30:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23c34:	ldrb	r3, [r3]
   23c38:	cmp	r3, #57	; 0x39
   23c3c:	bgt	23c5c <flatcc_json_parser_generic_json@@Base+0x14c>
   23c40:	cmp	r3, #48	; 0x30
   23c44:	bge	23d14 <flatcc_json_parser_generic_json@@Base+0x204>
   23c48:	cmp	r3, #34	; 0x22
   23c4c:	beq	23c70 <flatcc_json_parser_generic_json@@Base+0x160>
   23c50:	cmp	r3, #45	; 0x2d
   23c54:	beq	23d14 <flatcc_json_parser_generic_json@@Base+0x204>
   23c58:	b	23e2c <flatcc_json_parser_generic_json@@Base+0x31c>
   23c5c:	cmp	r3, #91	; 0x5b
   23c60:	beq	23d2c <flatcc_json_parser_generic_json@@Base+0x21c>
   23c64:	cmp	r3, #123	; 0x7b
   23c68:	beq	23dac <flatcc_json_parser_generic_json@@Base+0x29c>
   23c6c:	b	23e2c <flatcc_json_parser_generic_json@@Base+0x31c>
   23c70:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23c74:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23c78:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23c7c:	bl	1d250 <flatcc_emitter_copy_buffer@@Base+0x2c8>
   23c80:	str	r0, [fp, #-548]	; 0xfffffddc
   23c84:	b	23cd4 <flatcc_json_parser_generic_json@@Base+0x1c4>
   23c88:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23c8c:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23c90:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23c94:	bl	22370 <flatcc_json_parser_string_part@@Base>
   23c98:	str	r0, [fp, #-548]	; 0xfffffddc
   23c9c:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23ca0:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23ca4:	cmp	r2, r3
   23ca8:	beq	23cbc <flatcc_json_parser_generic_json@@Base+0x1ac>
   23cac:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23cb0:	ldrb	r3, [r3]
   23cb4:	cmp	r3, #34	; 0x22
   23cb8:	beq	23cf8 <flatcc_json_parser_generic_json@@Base+0x1e8>
   23cbc:	sub	r3, fp, #532	; 0x214
   23cc0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23cc4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23cc8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23ccc:	bl	225ec <flatcc_json_parser_string_escape@@Base>
   23cd0:	str	r0, [fp, #-548]	; 0xfffffddc
   23cd4:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23cd8:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23cdc:	cmp	r2, r3
   23ce0:	beq	23cfc <flatcc_json_parser_generic_json@@Base+0x1ec>
   23ce4:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23ce8:	ldrb	r3, [r3]
   23cec:	cmp	r3, #34	; 0x22
   23cf0:	bne	23c88 <flatcc_json_parser_generic_json@@Base+0x178>
   23cf4:	b	23cfc <flatcc_json_parser_generic_json@@Base+0x1ec>
   23cf8:	nop			; (mov r0, r0)
   23cfc:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23d00:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23d04:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23d08:	bl	1d2c0 <flatcc_emitter_copy_buffer@@Base+0x338>
   23d0c:	str	r0, [fp, #-548]	; 0xfffffddc
   23d10:	b	23e88 <flatcc_json_parser_generic_json@@Base+0x378>
   23d14:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23d18:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23d1c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23d20:	bl	23438 <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   23d24:	str	r0, [fp, #-548]	; 0xfffffddc
   23d28:	b	23e88 <flatcc_json_parser_generic_json@@Base+0x378>
   23d2c:	ldr	r2, [fp, #-8]
   23d30:	ldr	r3, [fp, #-12]
   23d34:	cmp	r2, r3
   23d38:	bne	23d58 <flatcc_json_parser_generic_json@@Base+0x248>
   23d3c:	mov	r3, #2
   23d40:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23d44:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23d48:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23d4c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23d50:	mov	r3, r0
   23d54:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23d58:	ldr	r3, [fp, #-8]
   23d5c:	add	r2, r3, #1
   23d60:	str	r2, [fp, #-8]
   23d64:	mov	r2, #93	; 0x5d
   23d68:	strb	r2, [r3]
   23d6c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23d70:	add	r3, r3, #1
   23d74:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23d78:	mov	r1, r3
   23d7c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23d80:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23d84:	str	r0, [fp, #-548]	; 0xfffffddc
   23d88:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23d8c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23d90:	cmp	r2, r3
   23d94:	beq	23b44 <flatcc_json_parser_generic_json@@Base+0x34>
   23d98:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23d9c:	ldrb	r3, [r3]
   23da0:	cmp	r3, #93	; 0x5d
   23da4:	beq	23e74 <flatcc_json_parser_generic_json@@Base+0x364>
   23da8:	b	23b44 <flatcc_json_parser_generic_json@@Base+0x34>
   23dac:	ldr	r2, [fp, #-8]
   23db0:	ldr	r3, [fp, #-12]
   23db4:	cmp	r2, r3
   23db8:	bne	23dd8 <flatcc_json_parser_generic_json@@Base+0x2c8>
   23dbc:	mov	r3, #2
   23dc0:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23dc4:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23dc8:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23dcc:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23dd0:	mov	r3, r0
   23dd4:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23dd8:	ldr	r3, [fp, #-8]
   23ddc:	add	r2, r3, #1
   23de0:	str	r2, [fp, #-8]
   23de4:	mov	r2, #125	; 0x7d
   23de8:	strb	r2, [r3]
   23dec:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23df0:	add	r3, r3, #1
   23df4:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23df8:	mov	r1, r3
   23dfc:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23e00:	bl	1d1bc <flatcc_emitter_copy_buffer@@Base+0x234>
   23e04:	str	r0, [fp, #-548]	; 0xfffffddc
   23e08:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23e0c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23e10:	cmp	r2, r3
   23e14:	beq	23b44 <flatcc_json_parser_generic_json@@Base+0x34>
   23e18:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23e1c:	ldrb	r3, [r3]
   23e20:	cmp	r3, #125	; 0x7d
   23e24:	beq	23e7c <flatcc_json_parser_generic_json@@Base+0x36c>
   23e28:	b	23b44 <flatcc_json_parser_generic_json@@Base+0x34>
   23e2c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23e30:	str	r3, [fp, #-16]
   23e34:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23e38:	ldr	r1, [fp, #-16]
   23e3c:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23e40:	bl	22fb4 <flatcc_json_parser_skip_constant@@Base>
   23e44:	str	r0, [fp, #-548]	; 0xfffffddc
   23e48:	ldr	r2, [fp, #-16]
   23e4c:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23e50:	cmp	r2, r3
   23e54:	bne	23e84 <flatcc_json_parser_generic_json@@Base+0x374>
   23e58:	mov	r3, #5
   23e5c:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23e60:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23e64:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23e68:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23e6c:	mov	r3, r0
   23e70:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23e74:	nop			; (mov r0, r0)
   23e78:	b	23ef8 <flatcc_json_parser_generic_json@@Base+0x3e8>
   23e7c:	nop			; (mov r0, r0)
   23e80:	b	23ef8 <flatcc_json_parser_generic_json@@Base+0x3e8>
   23e84:	nop			; (mov r0, r0)
   23e88:	b	23ef8 <flatcc_json_parser_generic_json@@Base+0x3e8>
   23e8c:	ldr	r3, [fp, #-8]
   23e90:	sub	r3, r3, #1
   23e94:	str	r3, [fp, #-8]
   23e98:	ldr	r3, [fp, #-8]
   23e9c:	ldrb	r3, [r3]
   23ea0:	cmp	r3, #93	; 0x5d
   23ea4:	bne	23ec4 <flatcc_json_parser_generic_json@@Base+0x3b4>
   23ea8:	sub	r3, fp, #536	; 0x218
   23eac:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23eb0:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23eb4:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23eb8:	bl	1d858 <flatcc_emitter_copy_buffer@@Base+0x8d0>
   23ebc:	str	r0, [fp, #-548]	; 0xfffffddc
   23ec0:	b	23edc <flatcc_json_parser_generic_json@@Base+0x3cc>
   23ec4:	sub	r3, fp, #536	; 0x218
   23ec8:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23ecc:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23ed0:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23ed4:	bl	1d608 <flatcc_emitter_copy_buffer@@Base+0x680>
   23ed8:	str	r0, [fp, #-548]	; 0xfffffddc
   23edc:	ldr	r3, [fp, #-536]	; 0xfffffde8
   23ee0:	cmp	r3, #0
   23ee4:	beq	23ef8 <flatcc_json_parser_generic_json@@Base+0x3e8>
   23ee8:	ldr	r3, [fp, #-8]
   23eec:	add	r3, r3, #1
   23ef0:	str	r3, [fp, #-8]
   23ef4:	b	23b44 <flatcc_json_parser_generic_json@@Base+0x34>
   23ef8:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23efc:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23f00:	cmp	r2, r3
   23f04:	beq	23f18 <flatcc_json_parser_generic_json@@Base+0x408>
   23f08:	sub	r3, fp, #528	; 0x210
   23f0c:	ldr	r2, [fp, #-8]
   23f10:	cmp	r2, r3
   23f14:	bne	23e8c <flatcc_json_parser_generic_json@@Base+0x37c>
   23f18:	ldr	r2, [fp, #-548]	; 0xfffffddc
   23f1c:	ldr	r3, [fp, #-552]	; 0xfffffdd8
   23f20:	cmp	r2, r3
   23f24:	bne	23f70 <flatcc_json_parser_generic_json@@Base+0x460>
   23f28:	sub	r3, fp, #528	; 0x210
   23f2c:	ldr	r2, [fp, #-8]
   23f30:	cmp	r2, r3
   23f34:	beq	23f70 <flatcc_json_parser_generic_json@@Base+0x460>
   23f38:	ldr	r3, [fp, #-8]
   23f3c:	sub	r3, r3, #1
   23f40:	ldrb	r3, [r3]
   23f44:	cmp	r3, #93	; 0x5d
   23f48:	bne	23f54 <flatcc_json_parser_generic_json@@Base+0x444>
   23f4c:	mov	r3, #9
   23f50:	b	23f58 <flatcc_json_parser_generic_json@@Base+0x448>
   23f54:	mov	r3, #10
   23f58:	ldr	r2, [fp, #-552]	; 0xfffffdd8
   23f5c:	ldr	r1, [fp, #-548]	; 0xfffffddc
   23f60:	ldr	r0, [fp, #-544]	; 0xfffffde0
   23f64:	bl	222fc <flatcc_json_parser_set_error@@Base>
   23f68:	mov	r3, r0
   23f6c:	b	23f74 <flatcc_json_parser_generic_json@@Base+0x464>
   23f70:	ldr	r3, [fp, #-548]	; 0xfffffddc
   23f74:	mov	r0, r3
   23f78:	sub	sp, fp, #4
   23f7c:	pop	{fp, pc}

00023f80 <flatcc_json_parser_integer@@Base>:
   23f80:	push	{fp, lr}
   23f84:	add	fp, sp, #4
   23f88:	sub	sp, sp, #40	; 0x28
   23f8c:	str	r0, [fp, #-32]	; 0xffffffe0
   23f90:	str	r1, [fp, #-36]	; 0xffffffdc
   23f94:	str	r2, [fp, #-40]	; 0xffffffd8
   23f98:	str	r3, [fp, #-44]	; 0xffffffd4
   23f9c:	mov	r2, #0
   23fa0:	mov	r3, #0
   23fa4:	strd	r2, [fp, #-12]
   23fa8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   23fac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   23fb0:	cmp	r2, r3
   23fb4:	bne	23fc0 <flatcc_json_parser_integer@@Base+0x40>
   23fb8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23fbc:	b	24168 <flatcc_json_parser_integer@@Base+0x1e8>
   23fc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23fc4:	str	r3, [fp, #-16]
   23fc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23fcc:	ldrb	r3, [r3]
   23fd0:	cmp	r3, #45	; 0x2d
   23fd4:	moveq	r3, #1
   23fd8:	movne	r3, #0
   23fdc:	uxtb	r3, r3
   23fe0:	mov	r2, r3
   23fe4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   23fe8:	str	r2, [r3]
   23fec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   23ff0:	ldr	r3, [r3]
   23ff4:	mov	r2, r3
   23ff8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   23ffc:	add	r3, r3, r2
   24000:	str	r3, [fp, #-36]	; 0xffffffdc
   24004:	b	240b4 <flatcc_json_parser_integer@@Base+0x134>
   24008:	ldrd	r2, [fp, #-12]
   2400c:	strd	r2, [fp, #-28]	; 0xffffffe4
   24010:	ldr	r3, [fp, #-8]
   24014:	mov	r2, #10
   24018:	mul	r2, r2, r3
   2401c:	ldr	r3, [fp, #-12]
   24020:	mov	r1, #0
   24024:	mul	r3, r1, r3
   24028:	add	r1, r2, r3
   2402c:	ldr	r3, [fp, #-12]
   24030:	mov	r2, #10
   24034:	umull	r2, r3, r3, r2
   24038:	add	r1, r1, r3
   2403c:	mov	r3, r1
   24040:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24044:	ldrb	r1, [r1]
   24048:	uxtb	r0, r1
   2404c:	mov	r1, #0
   24050:	adds	r2, r2, r0
   24054:	adc	r3, r3, r1
   24058:	subs	r2, r2, #48	; 0x30
   2405c:	sbc	r3, r3, #0
   24060:	strd	r2, [fp, #-12]
   24064:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   24068:	ldrd	r2, [fp, #-12]
   2406c:	cmp	r1, r3
   24070:	cmpeq	r0, r2
   24074:	bls	240a8 <flatcc_json_parser_integer@@Base+0x128>
   24078:	ldr	r3, [fp, #-44]	; 0xffffffd4
   2407c:	cmp	r3, #0
   24080:	beq	2408c <flatcc_json_parser_integer@@Base+0x10c>
   24084:	mov	r3, #8
   24088:	b	24090 <flatcc_json_parser_integer@@Base+0x110>
   2408c:	mov	r3, #7
   24090:	ldr	r2, [fp, #-40]	; 0xffffffd8
   24094:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24098:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2409c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   240a0:	mov	r3, r0
   240a4:	b	24168 <flatcc_json_parser_integer@@Base+0x1e8>
   240a8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   240ac:	add	r3, r3, #1
   240b0:	str	r3, [fp, #-36]	; 0xffffffdc
   240b4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   240b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   240bc:	cmp	r2, r3
   240c0:	beq	240e4 <flatcc_json_parser_integer@@Base+0x164>
   240c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   240c8:	ldrb	r3, [r3]
   240cc:	cmp	r3, #47	; 0x2f
   240d0:	bls	240e4 <flatcc_json_parser_integer@@Base+0x164>
   240d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   240d8:	ldrb	r3, [r3]
   240dc:	cmp	r3, #57	; 0x39
   240e0:	bls	24008 <flatcc_json_parser_integer@@Base+0x88>
   240e4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   240e8:	ldr	r3, [fp, #-16]
   240ec:	cmp	r2, r3
   240f0:	bne	240fc <flatcc_json_parser_integer@@Base+0x17c>
   240f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   240f8:	b	24168 <flatcc_json_parser_integer@@Base+0x1e8>
   240fc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   24100:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24104:	cmp	r2, r3
   24108:	beq	24158 <flatcc_json_parser_integer@@Base+0x1d8>
   2410c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24110:	ldrb	r3, [r3]
   24114:	cmp	r3, #101	; 0x65
   24118:	beq	2413c <flatcc_json_parser_integer@@Base+0x1bc>
   2411c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24120:	ldrb	r3, [r3]
   24124:	cmp	r3, #69	; 0x45
   24128:	beq	2413c <flatcc_json_parser_integer@@Base+0x1bc>
   2412c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24130:	ldrb	r3, [r3]
   24134:	cmp	r3, #46	; 0x2e
   24138:	bne	24158 <flatcc_json_parser_integer@@Base+0x1d8>
   2413c:	mov	r3, #12
   24140:	ldr	r2, [fp, #-40]	; 0xffffffd8
   24144:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24148:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2414c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24150:	mov	r3, r0
   24154:	b	24168 <flatcc_json_parser_integer@@Base+0x1e8>
   24158:	ldr	r1, [fp, #4]
   2415c:	ldrd	r2, [fp, #-12]
   24160:	strd	r2, [r1]
   24164:	ldr	r3, [fp, #-36]	; 0xffffffdc
   24168:	mov	r0, r3
   2416c:	sub	sp, fp, #4
   24170:	pop	{fp, pc}

00024174 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   24174:	push	{fp, lr}
   24178:	add	fp, sp, #4
   2417c:	sub	sp, sp, #56	; 0x38
   24180:	str	r0, [fp, #-40]	; 0xffffffd8
   24184:	str	r1, [fp, #-44]	; 0xffffffd4
   24188:	str	r2, [fp, #-48]	; 0xffffffd0
   2418c:	str	r3, [fp, #-52]	; 0xffffffcc
   24190:	ldr	r3, [fp, #4]
   24194:	cmp	r3, #0
   24198:	movne	r3, #1
   2419c:	moveq	r3, #0
   241a0:	uxtb	r3, r3
   241a4:	str	r3, [fp, #-8]
   241a8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   241ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   241b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   241b4:	bl	1d250 <flatcc_emitter_copy_buffer@@Base+0x2c8>
   241b8:	str	r0, [fp, #-44]	; 0xffffffd4
   241bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   241c0:	str	r3, [fp, #-12]
   241c4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   241c8:	ldr	r1, [fp, #-12]
   241cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   241d0:	bl	22370 <flatcc_json_parser_string_part@@Base>
   241d4:	str	r0, [fp, #-44]	; 0xffffffd4
   241d8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   241dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   241e0:	cmp	r2, r3
   241e4:	beq	243a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   241e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   241ec:	ldrb	r3, [r3]
   241f0:	cmp	r3, #34	; 0x22
   241f4:	bne	243a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   241f8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   241fc:	ldr	r3, [fp, #-12]
   24200:	sub	r3, r2, r3
   24204:	mov	r0, r3
   24208:	bl	21600 <grisu3_diy_fp_encode_double@@Base+0x1690>
   2420c:	str	r0, [fp, #-16]
   24210:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24214:	ldr	r0, [r3]
   24218:	mvn	r3, #0
   2421c:	mov	r2, #1
   24220:	mov	r1, #1
   24224:	bl	192bc <flatcc_builder_start_vector@@Base>
   24228:	mov	r3, r0
   2422c:	cmp	r3, #0
   24230:	bne	24360 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   24234:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24238:	ldr	r3, [r3]
   2423c:	ldr	r1, [fp, #-16]
   24240:	mov	r0, r3
   24244:	bl	189cc <flatcc_builder_extend_vector@@Base>
   24248:	str	r0, [fp, #-20]	; 0xffffffec
   2424c:	ldr	r3, [fp, #-20]	; 0xffffffec
   24250:	cmp	r3, #0
   24254:	beq	24368 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f4>
   24258:	ldr	r2, [fp, #-44]	; 0xffffffd4
   2425c:	ldr	r3, [fp, #-12]
   24260:	sub	r3, r2, r3
   24264:	str	r3, [fp, #-32]	; 0xffffffe0
   24268:	ldr	r3, [fp, #-16]
   2426c:	str	r3, [fp, #-28]	; 0xffffffe4
   24270:	sub	r1, fp, #32
   24274:	sub	r2, fp, #28
   24278:	ldr	r3, [fp, #-8]
   2427c:	str	r3, [sp]
   24280:	mov	r3, r1
   24284:	ldr	r1, [fp, #-12]
   24288:	ldr	r0, [fp, #-20]	; 0xffffffec
   2428c:	bl	21a38 <grisu3_diy_fp_encode_double@@Base+0x1ac8>
   24290:	str	r0, [fp, #-24]	; 0xffffffe8
   24294:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24298:	cmp	r3, #0
   2429c:	beq	242b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   242a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   242a4:	ldr	r2, [fp, #-12]
   242a8:	add	r3, r2, r3
   242ac:	str	r3, [fp, #-44]	; 0xffffffd4
   242b0:	b	243a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   242b4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   242b8:	ldr	r3, [fp, #-12]
   242bc:	sub	r3, r2, r3
   242c0:	mov	r2, r3
   242c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   242c8:	cmp	r2, r3
   242cc:	beq	242e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x170>
   242d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   242d4:	ldr	r2, [fp, #-12]
   242d8:	add	r3, r2, r3
   242dc:	str	r3, [fp, #-44]	; 0xffffffd4
   242e0:	b	243a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   242e4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   242e8:	ldr	r3, [fp, #-16]
   242ec:	cmp	r2, r3
   242f0:	bcs	2431c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a8>
   242f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   242f8:	ldr	r0, [r3]
   242fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   24300:	ldr	r2, [fp, #-16]
   24304:	sub	r3, r2, r3
   24308:	mov	r1, r3
   2430c:	bl	18fa4 <flatcc_builder_truncate_vector@@Base>
   24310:	mov	r3, r0
   24314:	cmp	r3, #0
   24318:	bne	24370 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1fc>
   2431c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24320:	ldr	r3, [r3]
   24324:	mov	r0, r3
   24328:	bl	1a514 <flatcc_builder_end_vector@@Base>
   2432c:	mov	r2, r0
   24330:	ldr	r3, [fp, #-52]	; 0xffffffcc
   24334:	str	r2, [r3]
   24338:	ldr	r3, [fp, #-52]	; 0xffffffcc
   2433c:	ldr	r3, [r3]
   24340:	cmp	r3, #0
   24344:	beq	24378 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   24348:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2434c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24350:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24354:	bl	1d2c0 <flatcc_emitter_copy_buffer@@Base+0x338>
   24358:	mov	r3, r0
   2435c:	b	243dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   24360:	nop			; (mov r0, r0)
   24364:	b	2437c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x208>
   24368:	nop			; (mov r0, r0)
   2436c:	b	2437c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x208>
   24370:	nop			; (mov r0, r0)
   24374:	b	2437c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x208>
   24378:	nop			; (mov r0, r0)
   2437c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   24380:	mov	r2, #0
   24384:	str	r2, [r3]
   24388:	mov	r3, #33	; 0x21
   2438c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24390:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24398:	bl	222fc <flatcc_json_parser_set_error@@Base>
   2439c:	mov	r3, r0
   243a0:	b	243dc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   243a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   243a8:	mov	r2, #0
   243ac:	str	r2, [r3]
   243b0:	ldr	r3, [fp, #4]
   243b4:	cmp	r3, #0
   243b8:	beq	243c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x250>
   243bc:	mov	r3, #32
   243c0:	b	243c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   243c4:	mov	r3, #31
   243c8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   243cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   243d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   243d4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   243d8:	mov	r3, r0
   243dc:	mov	r0, r3
   243e0:	sub	sp, fp, #4
   243e4:	pop	{fp, pc}

000243e8 <flatcc_json_parser_build_string@@Base>:
   243e8:	push	{fp, lr}
   243ec:	add	fp, sp, #4
   243f0:	sub	sp, sp, #24
   243f4:	str	r0, [fp, #-16]
   243f8:	str	r1, [fp, #-20]	; 0xffffffec
   243fc:	str	r2, [fp, #-24]	; 0xffffffe8
   24400:	str	r3, [fp, #-28]	; 0xffffffe4
   24404:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24408:	ldr	r1, [fp, #-20]	; 0xffffffec
   2440c:	ldr	r0, [fp, #-16]
   24410:	bl	1d250 <flatcc_emitter_copy_buffer@@Base+0x2c8>
   24414:	str	r0, [fp, #-20]	; 0xffffffec
   24418:	ldr	r3, [fp, #-20]	; 0xffffffec
   2441c:	str	r3, [fp, #-8]
   24420:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24424:	ldr	r1, [fp, #-8]
   24428:	ldr	r0, [fp, #-16]
   2442c:	bl	22370 <flatcc_json_parser_string_part@@Base>
   24430:	str	r0, [fp, #-20]	; 0xffffffec
   24434:	ldr	r2, [fp, #-20]	; 0xffffffec
   24438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   2443c:	cmp	r2, r3
   24440:	beq	24484 <flatcc_json_parser_build_string@@Base+0x9c>
   24444:	ldr	r3, [fp, #-20]	; 0xffffffec
   24448:	ldrb	r3, [r3]
   2444c:	cmp	r3, #34	; 0x22
   24450:	bne	24484 <flatcc_json_parser_build_string@@Base+0x9c>
   24454:	ldr	r3, [fp, #-16]
   24458:	ldr	r0, [r3]
   2445c:	ldr	r2, [fp, #-20]	; 0xffffffec
   24460:	ldr	r3, [fp, #-8]
   24464:	sub	r3, r2, r3
   24468:	mov	r2, r3
   2446c:	ldr	r1, [fp, #-8]
   24470:	bl	1b6e0 <flatcc_builder_create_string@@Base>
   24474:	mov	r2, r0
   24478:	ldr	r3, [fp, #-28]	; 0xffffffe4
   2447c:	str	r2, [r3]
   24480:	b	245a4 <flatcc_json_parser_build_string@@Base+0x1bc>
   24484:	ldr	r3, [fp, #-16]
   24488:	ldr	r3, [r3]
   2448c:	mov	r0, r3
   24490:	bl	1946c <flatcc_builder_start_string@@Base>
   24494:	mov	r3, r0
   24498:	cmp	r3, #0
   2449c:	bne	245c8 <flatcc_json_parser_build_string@@Base+0x1e0>
   244a0:	ldr	r3, [fp, #-16]
   244a4:	ldr	r0, [r3]
   244a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   244ac:	ldr	r3, [fp, #-8]
   244b0:	sub	r3, r2, r3
   244b4:	mov	r2, r3
   244b8:	ldr	r1, [fp, #-8]
   244bc:	bl	18e7c <flatcc_builder_append_string@@Base>
   244c0:	mov	r3, r0
   244c4:	cmp	r3, #0
   244c8:	beq	245c8 <flatcc_json_parser_build_string@@Base+0x1e0>
   244cc:	b	24568 <flatcc_json_parser_build_string@@Base+0x180>
   244d0:	sub	r3, fp, #12
   244d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   244d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   244dc:	ldr	r0, [fp, #-16]
   244e0:	bl	225ec <flatcc_json_parser_string_escape@@Base>
   244e4:	str	r0, [fp, #-20]	; 0xffffffec
   244e8:	ldr	r3, [fp, #-16]
   244ec:	ldr	r0, [r3]
   244f0:	sub	r3, fp, #12
   244f4:	add	r3, r3, #1
   244f8:	ldrb	r2, [fp, #-12]
   244fc:	mov	r1, r3
   24500:	bl	18e7c <flatcc_builder_append_string@@Base>
   24504:	mov	r3, r0
   24508:	cmp	r3, #0
   2450c:	beq	245bc <flatcc_json_parser_build_string@@Base+0x1d4>
   24510:	ldr	r3, [fp, #-20]	; 0xffffffec
   24514:	str	r3, [fp, #-8]
   24518:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2451c:	ldr	r1, [fp, #-8]
   24520:	ldr	r0, [fp, #-16]
   24524:	bl	22370 <flatcc_json_parser_string_part@@Base>
   24528:	str	r0, [fp, #-20]	; 0xffffffec
   2452c:	ldr	r2, [fp, #-20]	; 0xffffffec
   24530:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24534:	cmp	r2, r3
   24538:	beq	24568 <flatcc_json_parser_build_string@@Base+0x180>
   2453c:	ldr	r3, [fp, #-16]
   24540:	ldr	r0, [r3]
   24544:	ldr	r2, [fp, #-20]	; 0xffffffec
   24548:	ldr	r3, [fp, #-8]
   2454c:	sub	r3, r2, r3
   24550:	mov	r2, r3
   24554:	ldr	r1, [fp, #-8]
   24558:	bl	18e7c <flatcc_builder_append_string@@Base>
   2455c:	mov	r3, r0
   24560:	cmp	r3, #0
   24564:	beq	245c4 <flatcc_json_parser_build_string@@Base+0x1dc>
   24568:	ldr	r2, [fp, #-20]	; 0xffffffec
   2456c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24570:	cmp	r2, r3
   24574:	beq	24588 <flatcc_json_parser_build_string@@Base+0x1a0>
   24578:	ldr	r3, [fp, #-20]	; 0xffffffec
   2457c:	ldrb	r3, [r3]
   24580:	cmp	r3, #34	; 0x22
   24584:	bne	244d0 <flatcc_json_parser_build_string@@Base+0xe8>
   24588:	ldr	r3, [fp, #-16]
   2458c:	ldr	r3, [r3]
   24590:	mov	r0, r3
   24594:	bl	1b908 <flatcc_builder_end_string@@Base>
   24598:	mov	r2, r0
   2459c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   245a0:	str	r2, [r3]
   245a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   245a8:	ldr	r1, [fp, #-20]	; 0xffffffec
   245ac:	ldr	r0, [fp, #-16]
   245b0:	bl	1d2c0 <flatcc_emitter_copy_buffer@@Base+0x338>
   245b4:	mov	r3, r0
   245b8:	b	245d8 <flatcc_json_parser_build_string@@Base+0x1f0>
   245bc:	nop			; (mov r0, r0)
   245c0:	b	245c8 <flatcc_json_parser_build_string@@Base+0x1e0>
   245c4:	nop			; (mov r0, r0)
   245c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   245cc:	mov	r2, #0
   245d0:	str	r2, [r3]
   245d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   245d8:	mov	r0, r3
   245dc:	sub	sp, fp, #4
   245e0:	pop	{fp, pc}

000245e4 <flatcc_json_parser_prepare_unions@@Base>:
   245e4:	push	{fp, lr}
   245e8:	add	fp, sp, #4
   245ec:	sub	sp, sp, #24
   245f0:	str	r0, [fp, #-16]
   245f4:	str	r1, [fp, #-20]	; 0xffffffec
   245f8:	str	r2, [fp, #-24]	; 0xffffffe8
   245fc:	str	r3, [fp, #-28]	; 0xffffffe4
   24600:	ldr	r3, [fp, #-16]
   24604:	ldr	r0, [r3]
   24608:	ldr	r2, [fp, #-28]	; 0xffffffe4
   2460c:	mov	r3, r2
   24610:	lsl	r3, r3, #1
   24614:	add	r3, r3, r2
   24618:	lsl	r3, r3, #3
   2461c:	add	r3, r3, #8
   24620:	mov	r1, r3
   24624:	bl	174a8 <flatcc_builder_enter_user_frame@@Base>
   24628:	mov	r2, r0
   2462c:	ldr	r3, [fp, #4]
   24630:	str	r2, [r3]
   24634:	ldr	r3, [fp, #4]
   24638:	ldr	r3, [r3]
   2463c:	cmp	r3, #0
   24640:	bne	24660 <flatcc_json_parser_prepare_unions@@Base+0x7c>
   24644:	mov	r3, #33	; 0x21
   24648:	ldr	r2, [fp, #-24]	; 0xffffffe8
   2464c:	ldr	r1, [fp, #-20]	; 0xffffffec
   24650:	ldr	r0, [fp, #-16]
   24654:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24658:	mov	r3, r0
   2465c:	b	24690 <flatcc_json_parser_prepare_unions@@Base+0xac>
   24660:	ldr	r3, [fp, #-16]
   24664:	ldr	r2, [r3]
   24668:	ldr	r3, [fp, #4]
   2466c:	ldr	r3, [r3]
   24670:	mov	r1, r3
   24674:	mov	r0, r2
   24678:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2467c:	str	r0, [fp, #-8]
   24680:	ldr	r3, [fp, #-8]
   24684:	ldr	r2, [fp, #-28]	; 0xffffffe4
   24688:	str	r2, [r3]
   2468c:	ldr	r3, [fp, #-20]	; 0xffffffec
   24690:	mov	r0, r3
   24694:	sub	sp, fp, #4
   24698:	pop	{fp, pc}

0002469c <flatcc_json_parser_finalize_unions@@Base>:
   2469c:	push	{fp, lr}
   246a0:	add	fp, sp, #4
   246a4:	sub	sp, sp, #24
   246a8:	str	r0, [fp, #-16]
   246ac:	str	r1, [fp, #-20]	; 0xffffffec
   246b0:	str	r2, [fp, #-24]	; 0xffffffe8
   246b4:	str	r3, [fp, #-28]	; 0xffffffe4
   246b8:	ldr	r3, [fp, #-16]
   246bc:	ldr	r3, [r3]
   246c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   246c4:	mov	r0, r3
   246c8:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   246cc:	str	r0, [fp, #-8]
   246d0:	ldr	r3, [fp, #-8]
   246d4:	ldr	r3, [r3, #4]
   246d8:	cmp	r3, #0
   246dc:	beq	246f8 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   246e0:	mov	r3, #27
   246e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   246e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   246ec:	ldr	r0, [fp, #-16]
   246f0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   246f4:	str	r0, [fp, #-20]	; 0xffffffec
   246f8:	ldr	r3, [fp, #-16]
   246fc:	ldr	r3, [r3]
   24700:	ldr	r1, [fp, #-28]	; 0xffffffe4
   24704:	mov	r0, r3
   24708:	bl	17610 <flatcc_builder_exit_user_frame_at@@Base>
   2470c:	ldr	r3, [fp, #-20]	; 0xffffffec
   24710:	mov	r0, r3
   24714:	sub	sp, fp, #4
   24718:	pop	{fp, pc}

0002471c <flatcc_json_parser_union@@Base>:
   2471c:	push	{r4, fp, lr}
   24720:	add	fp, sp, #8
   24724:	sub	sp, sp, #44	; 0x2c
   24728:	str	r0, [fp, #-32]	; 0xffffffe0
   2472c:	str	r1, [fp, #-36]	; 0xffffffdc
   24730:	str	r2, [fp, #-40]	; 0xffffffd8
   24734:	str	r3, [fp, #-44]	; 0xffffffd4
   24738:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2473c:	ldr	r3, [r3]
   24740:	ldr	r1, [fp, #8]
   24744:	mov	r0, r3
   24748:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2474c:	str	r0, [fp, #-16]
   24750:	ldr	r2, [fp, #-44]	; 0xffffffd4
   24754:	mov	r3, r2
   24758:	lsl	r3, r3, #1
   2475c:	add	r3, r3, r2
   24760:	lsl	r3, r3, #3
   24764:	add	r3, r3, #8
   24768:	ldr	r2, [fp, #-16]
   2476c:	add	r3, r2, r3
   24770:	str	r3, [fp, #-20]	; 0xffffffec
   24774:	ldr	r3, [fp, #-20]	; 0xffffffec
   24778:	ldr	r3, [r3]
   2477c:	cmp	r3, #0
   24780:	beq	247a0 <flatcc_json_parser_union@@Base+0x84>
   24784:	mov	r3, #28
   24788:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2478c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24790:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24794:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24798:	mov	r3, r0
   2479c:	b	248e0 <flatcc_json_parser_union@@Base+0x1c4>
   247a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   247a4:	ldrb	r3, [r3, #12]
   247a8:	cmp	r3, #0
   247ac:	bne	24810 <flatcc_json_parser_union@@Base+0xf4>
   247b0:	ldr	r3, [fp, #-16]
   247b4:	ldr	r3, [r3, #4]
   247b8:	add	r2, r3, #1
   247bc:	ldr	r3, [fp, #-16]
   247c0:	str	r2, [r3, #4]
   247c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   247c8:	ldr	r2, [r3, #16]
   247cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   247d0:	str	r2, [r3, #8]
   247d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   247d8:	ldr	r2, [r3, #4]
   247dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   247e0:	str	r2, [r3, #4]
   247e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   247e8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   247ec:	str	r2, [r3]
   247f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   247f4:	ldr	r3, [r3]
   247f8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   247fc:	mov	r1, r3
   24800:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24804:	bl	23b10 <flatcc_json_parser_generic_json@@Base>
   24808:	str	r0, [fp, #-36]	; 0xffffffdc
   2480c:	b	248dc <flatcc_json_parser_union@@Base+0x1c0>
   24810:	ldr	r3, [fp, #-20]	; 0xffffffec
   24814:	ldrb	r3, [r3, #13]
   24818:	strb	r3, [fp, #-28]	; 0xffffffe4
   2481c:	ldr	r3, [fp, #-20]	; 0xffffffec
   24820:	ldrb	r3, [r3, #13]
   24824:	cmp	r3, #0
   24828:	bne	24848 <flatcc_json_parser_union@@Base+0x12c>
   2482c:	mov	r3, #25
   24830:	ldr	r2, [fp, #-40]	; 0xffffffd8
   24834:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24838:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2483c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24840:	mov	r3, r0
   24844:	b	248e0 <flatcc_json_parser_union@@Base+0x1c4>
   24848:	ldr	r3, [fp, #-16]
   2484c:	ldr	r3, [r3, #4]
   24850:	sub	r2, r3, #1
   24854:	ldr	r3, [fp, #-16]
   24858:	str	r2, [r3, #4]
   2485c:	ldr	r3, [fp, #-20]	; 0xffffffec
   24860:	ldrb	r2, [r3, #13]
   24864:	sub	r3, fp, #28
   24868:	add	r3, r3, #4
   2486c:	str	r3, [sp]
   24870:	ldr	r4, [fp, #12]
   24874:	mov	r3, r2
   24878:	ldr	r2, [fp, #-40]	; 0xffffffd8
   2487c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   24880:	ldr	r0, [fp, #-32]	; 0xffffffe0
   24884:	blx	r4
   24888:	str	r0, [fp, #-36]	; 0xffffffdc
   2488c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   24890:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24894:	cmp	r2, r3
   24898:	beq	248dc <flatcc_json_parser_union@@Base+0x1c0>
   2489c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   248a0:	ldr	r0, [r3]
   248a4:	ldrh	r1, [fp, #4]
   248a8:	sub	r3, fp, #28
   248ac:	ldm	r3, {r2, r3}
   248b0:	bl	1ab5c <flatcc_builder_table_add_union@@Base>
   248b4:	mov	r3, r0
   248b8:	cmp	r3, #0
   248bc:	beq	248dc <flatcc_json_parser_union@@Base+0x1c0>
   248c0:	mov	r3, #28
   248c4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   248c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   248cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   248d0:	bl	222fc <flatcc_json_parser_set_error@@Base>
   248d4:	mov	r3, r0
   248d8:	b	248e0 <flatcc_json_parser_union@@Base+0x1c4>
   248dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   248e0:	mov	r0, r3
   248e4:	sub	sp, fp, #8
   248e8:	pop	{r4, fp, pc}

000248ec <flatcc_json_parser_union_type@@Base>:
   248ec:	push	{r4, fp, lr}
   248f0:	add	fp, sp, #8
   248f4:	sub	sp, sp, #60	; 0x3c
   248f8:	str	r0, [fp, #-48]	; 0xffffffd0
   248fc:	str	r1, [fp, #-52]	; 0xffffffcc
   24900:	str	r2, [fp, #-56]	; 0xffffffc8
   24904:	str	r3, [fp, #-60]	; 0xffffffc4
   24908:	ldr	r3, [fp, #-48]	; 0xffffffd0
   2490c:	ldr	r3, [r3]
   24910:	ldr	r1, [fp, #8]
   24914:	mov	r0, r3
   24918:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   2491c:	str	r0, [fp, #-16]
   24920:	ldr	r3, [fp, #-16]
   24924:	add	r1, r3, #8
   24928:	ldr	r2, [fp, #-60]	; 0xffffffc4
   2492c:	mov	r3, r2
   24930:	lsl	r3, r3, #1
   24934:	add	r3, r3, r2
   24938:	lsl	r3, r3, #3
   2493c:	add	r3, r1, r3
   24940:	str	r3, [fp, #-20]	; 0xffffffec
   24944:	ldr	r3, [fp, #-20]	; 0xffffffec
   24948:	ldrb	r3, [r3, #12]
   2494c:	cmp	r3, #0
   24950:	beq	24970 <flatcc_json_parser_union_type@@Base+0x84>
   24954:	mov	r3, #28
   24958:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2495c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   24960:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24964:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24968:	mov	r3, r0
   2496c:	b	24b44 <flatcc_json_parser_union_type@@Base+0x258>
   24970:	ldr	r3, [fp, #-20]	; 0xffffffec
   24974:	mov	r2, #1
   24978:	strb	r2, [r3, #12]
   2497c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   24980:	str	r3, [fp, #-24]	; 0xffffffe8
   24984:	ldr	r3, [fp, #-20]	; 0xffffffec
   24988:	add	r3, r3, #13
   2498c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   24990:	ldr	r1, [fp, #-24]	; 0xffffffe8
   24994:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24998:	bl	1e008 <flatcc_emitter_copy_buffer@@Base+0x1080>
   2499c:	str	r0, [fp, #-52]	; 0xffffffcc
   249a0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   249a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   249a8:	cmp	r2, r3
   249ac:	bne	249d4 <flatcc_json_parser_union_type@@Base+0xe8>
   249b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   249b4:	add	r3, r3, #13
   249b8:	str	r3, [sp]
   249bc:	ldr	r3, [fp, #12]
   249c0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   249c4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   249c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   249cc:	bl	1e64c <flatcc_emitter_copy_buffer@@Base+0x16c4>
   249d0:	str	r0, [fp, #-52]	; 0xffffffcc
   249d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   249d8:	ldr	r3, [r3]
   249dc:	cmp	r3, #0
   249e0:	bne	24a18 <flatcc_json_parser_union_type@@Base+0x12c>
   249e4:	ldr	r3, [fp, #-16]
   249e8:	ldr	r3, [r3, #4]
   249ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   249f0:	ldrb	r2, [r2, #13]
   249f4:	cmp	r2, #0
   249f8:	movne	r2, #1
   249fc:	moveq	r2, #0
   24a00:	uxtb	r2, r2
   24a04:	add	r2, r3, r2
   24a08:	ldr	r3, [fp, #-16]
   24a0c:	str	r2, [r3, #4]
   24a10:	ldr	r3, [fp, #-52]	; 0xffffffcc
   24a14:	b	24b44 <flatcc_json_parser_union_type@@Base+0x258>
   24a18:	ldr	r3, [fp, #-16]
   24a1c:	ldr	r3, [r3, #4]
   24a20:	cmp	r3, #0
   24a24:	bne	24a48 <flatcc_json_parser_union_type@@Base+0x15c>
   24a28:	ldr	r3, [pc, #288]	; 24b50 <flatcc_json_parser_union_type@@Base+0x264>
   24a2c:	add	r3, pc, r3
   24a30:	ldr	r2, [pc, #284]	; 24b54 <flatcc_json_parser_union_type@@Base+0x268>
   24a34:	ldr	r1, [pc, #284]	; 24b58 <flatcc_json_parser_union_type@@Base+0x26c>
   24a38:	add	r1, pc, r1
   24a3c:	ldr	r0, [pc, #280]	; 24b5c <flatcc_json_parser_union_type@@Base+0x270>
   24a40:	add	r0, pc, r0
   24a44:	bl	12504 <__assert_fail@plt>
   24a48:	ldr	r3, [fp, #-16]
   24a4c:	ldr	r3, [r3, #4]
   24a50:	sub	r2, r3, #1
   24a54:	ldr	r3, [fp, #-16]
   24a58:	str	r2, [r3, #4]
   24a5c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24a60:	ldr	r3, [r3, #16]
   24a64:	str	r3, [fp, #-28]	; 0xffffffe4
   24a68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24a6c:	ldr	r3, [r3, #4]
   24a70:	str	r3, [fp, #-32]	; 0xffffffe0
   24a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   24a78:	ldr	r2, [r3, #8]
   24a7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24a80:	str	r2, [r3, #16]
   24a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   24a88:	ldr	r2, [r3, #4]
   24a8c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24a90:	str	r2, [r3, #4]
   24a94:	ldr	r3, [fp, #-20]	; 0xffffffec
   24a98:	ldrb	r3, [r3, #13]
   24a9c:	strb	r3, [fp, #-40]	; 0xffffffd8
   24aa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   24aa4:	ldr	r1, [r3]
   24aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   24aac:	ldrb	r2, [r3, #13]
   24ab0:	sub	r3, fp, #40	; 0x28
   24ab4:	add	r3, r3, #4
   24ab8:	str	r3, [sp]
   24abc:	ldr	r4, [fp, #16]
   24ac0:	mov	r3, r2
   24ac4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   24ac8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24acc:	blx	r4
   24ad0:	mov	r2, r0
   24ad4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   24ad8:	cmp	r2, r3
   24adc:	bne	24ae8 <flatcc_json_parser_union_type@@Base+0x1fc>
   24ae0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   24ae4:	b	24b44 <flatcc_json_parser_union_type@@Base+0x258>
   24ae8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24aec:	ldr	r0, [r3]
   24af0:	ldrh	r1, [fp, #4]
   24af4:	sub	r3, fp, #40	; 0x28
   24af8:	ldm	r3, {r2, r3}
   24afc:	bl	1ab5c <flatcc_builder_table_add_union@@Base>
   24b00:	mov	r3, r0
   24b04:	cmp	r3, #0
   24b08:	beq	24b28 <flatcc_json_parser_union_type@@Base+0x23c>
   24b0c:	mov	r3, #28
   24b10:	ldr	r2, [fp, #-56]	; 0xffffffc8
   24b14:	ldr	r1, [fp, #-52]	; 0xffffffcc
   24b18:	ldr	r0, [fp, #-48]	; 0xffffffd0
   24b1c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24b20:	mov	r3, r0
   24b24:	b	24b44 <flatcc_json_parser_union_type@@Base+0x258>
   24b28:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24b2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   24b30:	str	r2, [r3, #16]
   24b34:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24b38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   24b3c:	str	r2, [r3, #4]
   24b40:	ldr	r3, [fp, #-52]	; 0xffffffcc
   24b44:	mov	r0, r3
   24b48:	sub	sp, fp, #8
   24b4c:	pop	{r4, fp, pc}
   24b50:	muleq	r0, r0, r2
   24b54:	andeq	r0, r0, r5, asr #7
   24b58:	andeq	r2, r0, r4, lsr #27
   24b5c:	andeq	r2, r0, r0, lsl #28
   24b60:	push	{r4, fp, lr}
   24b64:	add	fp, sp, #8
   24b68:	sub	sp, sp, #52	; 0x34
   24b6c:	str	r0, [fp, #-40]	; 0xffffffd8
   24b70:	str	r1, [fp, #-44]	; 0xffffffd4
   24b74:	str	r2, [fp, #-48]	; 0xffffffd0
   24b78:	str	r3, [fp, #-52]	; 0xffffffcc
   24b7c:	mov	r3, #0
   24b80:	str	r3, [fp, #-28]	; 0xffffffe4
   24b84:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24b88:	ldr	r3, [r3]
   24b8c:	mov	r0, r3
   24b90:	bl	19368 <flatcc_builder_start_offset_vector@@Base>
   24b94:	mov	r3, r0
   24b98:	cmp	r3, #0
   24b9c:	bne	24d5c <flatcc_json_parser_union_type@@Base+0x470>
   24ba0:	sub	r3, fp, #32
   24ba4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24ba8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24bac:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24bb0:	bl	1d770 <flatcc_emitter_copy_buffer@@Base+0x7e8>
   24bb4:	str	r0, [fp, #-44]	; 0xffffffd4
   24bb8:	mov	r3, #0
   24bbc:	str	r3, [fp, #-16]
   24bc0:	b	24ca8 <flatcc_json_parser_union_type@@Base+0x3bc>
   24bc4:	ldr	r2, [fp, #-16]
   24bc8:	ldr	r3, [fp, #4]
   24bcc:	cmp	r2, r3
   24bd0:	bne	24bf0 <flatcc_json_parser_union_type@@Base+0x304>
   24bd4:	mov	r3, #30
   24bd8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24bdc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24be0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24be4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24be8:	mov	r3, r0
   24bec:	b	24d90 <flatcc_json_parser_union_type@@Base+0x4a4>
   24bf0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24bf4:	ldr	r3, [r3]
   24bf8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   24bfc:	mov	r0, r3
   24c00:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   24c04:	str	r0, [fp, #-20]	; 0xffffffec
   24c08:	ldr	r2, [fp, #-20]	; 0xffffffec
   24c0c:	ldr	r3, [fp, #-16]
   24c10:	add	r3, r2, r3
   24c14:	ldrb	r2, [r3]
   24c18:	sub	r3, fp, #28
   24c1c:	str	r3, [sp]
   24c20:	ldr	r4, [fp, #12]
   24c24:	mov	r3, r2
   24c28:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24c2c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24c30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24c34:	blx	r4
   24c38:	str	r0, [fp, #-44]	; 0xffffffd4
   24c3c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   24c40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   24c44:	cmp	r2, r3
   24c48:	bne	24c54 <flatcc_json_parser_union_type@@Base+0x368>
   24c4c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   24c50:	b	24d90 <flatcc_json_parser_union_type@@Base+0x4a4>
   24c54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24c58:	ldr	r3, [r3]
   24c5c:	mov	r1, #1
   24c60:	mov	r0, r3
   24c64:	bl	18c14 <flatcc_builder_extend_offset_vector@@Base>
   24c68:	str	r0, [fp, #-24]	; 0xffffffe8
   24c6c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24c70:	cmp	r3, #0
   24c74:	beq	24d64 <flatcc_json_parser_union_type@@Base+0x478>
   24c78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   24c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24c80:	str	r2, [r3]
   24c84:	sub	r3, fp, #32
   24c88:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24c8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24c90:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24c94:	bl	1d858 <flatcc_emitter_copy_buffer@@Base+0x8d0>
   24c98:	str	r0, [fp, #-44]	; 0xffffffd4
   24c9c:	ldr	r3, [fp, #-16]
   24ca0:	add	r3, r3, #1
   24ca4:	str	r3, [fp, #-16]
   24ca8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   24cac:	cmp	r3, #0
   24cb0:	bne	24bc4 <flatcc_json_parser_union_type@@Base+0x2d8>
   24cb4:	ldr	r2, [fp, #-16]
   24cb8:	ldr	r3, [fp, #4]
   24cbc:	cmp	r2, r3
   24cc0:	beq	24ce0 <flatcc_json_parser_union_type@@Base+0x3f4>
   24cc4:	mov	r3, #30
   24cc8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24ccc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24cd0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24cd4:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24cd8:	mov	r3, r0
   24cdc:	b	24d90 <flatcc_json_parser_union_type@@Base+0x4a4>
   24ce0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24ce4:	ldr	r3, [r3]
   24ce8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   24cec:	mov	r0, r3
   24cf0:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   24cf4:	str	r0, [fp, #-20]	; 0xffffffec
   24cf8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24cfc:	ldr	r3, [r3]
   24d00:	ldr	r1, [fp, #-20]	; 0xffffffec
   24d04:	mov	r0, r3
   24d08:	bl	1aa60 <flatcc_builder_end_offset_vector_for_unions@@Base>
   24d0c:	mov	r3, r0
   24d10:	str	r3, [fp, #-28]	; 0xffffffe4
   24d14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   24d18:	cmp	r3, #0
   24d1c:	beq	24d6c <flatcc_json_parser_union_type@@Base+0x480>
   24d20:	ldr	r3, [fp, #-40]	; 0xffffffd8
   24d24:	ldr	r3, [r3]
   24d28:	ldrh	r2, [fp, #8]
   24d2c:	mov	r1, r2
   24d30:	mov	r0, r3
   24d34:	bl	1bca4 <flatcc_builder_table_add_offset@@Base>
   24d38:	str	r0, [fp, #-24]	; 0xffffffe8
   24d3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24d40:	cmp	r3, #0
   24d44:	beq	24d74 <flatcc_json_parser_union_type@@Base+0x488>
   24d48:	ldr	r2, [fp, #-28]	; 0xffffffe4
   24d4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   24d50:	str	r2, [r3]
   24d54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   24d58:	b	24d90 <flatcc_json_parser_union_type@@Base+0x4a4>
   24d5c:	nop			; (mov r0, r0)
   24d60:	b	24d78 <flatcc_json_parser_union_type@@Base+0x48c>
   24d64:	nop			; (mov r0, r0)
   24d68:	b	24d78 <flatcc_json_parser_union_type@@Base+0x48c>
   24d6c:	nop			; (mov r0, r0)
   24d70:	b	24d78 <flatcc_json_parser_union_type@@Base+0x48c>
   24d74:	nop			; (mov r0, r0)
   24d78:	mov	r3, #33	; 0x21
   24d7c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   24d80:	ldr	r1, [fp, #-44]	; 0xffffffd4
   24d84:	ldr	r0, [fp, #-40]	; 0xffffffd8
   24d88:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24d8c:	mov	r3, r0
   24d90:	mov	r0, r3
   24d94:	sub	sp, fp, #8
   24d98:	pop	{r4, fp, pc}

00024d9c <flatcc_json_parser_union_vector@@Base>:
   24d9c:	push	{fp, lr}
   24da0:	add	fp, sp, #4
   24da4:	sub	sp, sp, #40	; 0x28
   24da8:	str	r0, [fp, #-16]
   24dac:	str	r1, [fp, #-20]	; 0xffffffec
   24db0:	str	r2, [fp, #-24]	; 0xffffffe8
   24db4:	str	r3, [fp, #-28]	; 0xffffffe4
   24db8:	ldr	r3, [fp, #-16]
   24dbc:	ldr	r3, [r3]
   24dc0:	ldr	r1, [fp, #8]
   24dc4:	mov	r0, r3
   24dc8:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   24dcc:	str	r0, [fp, #-8]
   24dd0:	ldr	r3, [fp, #-8]
   24dd4:	add	r1, r3, #8
   24dd8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   24ddc:	mov	r3, r2
   24de0:	lsl	r3, r3, #1
   24de4:	add	r3, r3, r2
   24de8:	lsl	r3, r3, #3
   24dec:	add	r3, r1, r3
   24df0:	str	r3, [fp, #-12]
   24df4:	ldr	r3, [fp, #-12]
   24df8:	ldr	r3, [r3]
   24dfc:	cmp	r3, #0
   24e00:	beq	24e20 <flatcc_json_parser_union_vector@@Base+0x84>
   24e04:	mov	r3, #28
   24e08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24e0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   24e10:	ldr	r0, [fp, #-16]
   24e14:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24e18:	mov	r3, r0
   24e1c:	b	24ee4 <flatcc_json_parser_union_vector@@Base+0x148>
   24e20:	ldr	r3, [fp, #-12]
   24e24:	ldrb	r3, [r3, #12]
   24e28:	cmp	r3, #0
   24e2c:	bne	24e90 <flatcc_json_parser_union_vector@@Base+0xf4>
   24e30:	ldr	r3, [fp, #-8]
   24e34:	ldr	r3, [r3, #4]
   24e38:	add	r2, r3, #1
   24e3c:	ldr	r3, [fp, #-8]
   24e40:	str	r2, [r3, #4]
   24e44:	ldr	r3, [fp, #-16]
   24e48:	ldr	r2, [r3, #16]
   24e4c:	ldr	r3, [fp, #-12]
   24e50:	str	r2, [r3, #8]
   24e54:	ldr	r3, [fp, #-16]
   24e58:	ldr	r2, [r3, #4]
   24e5c:	ldr	r3, [fp, #-12]
   24e60:	str	r2, [r3, #4]
   24e64:	ldr	r3, [fp, #-12]
   24e68:	ldr	r2, [fp, #-20]	; 0xffffffec
   24e6c:	str	r2, [r3]
   24e70:	ldr	r3, [fp, #-12]
   24e74:	ldr	r3, [r3]
   24e78:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24e7c:	mov	r1, r3
   24e80:	ldr	r0, [fp, #-16]
   24e84:	bl	23b10 <flatcc_json_parser_generic_json@@Base>
   24e88:	str	r0, [fp, #-20]	; 0xffffffec
   24e8c:	b	24ee0 <flatcc_json_parser_union_vector@@Base+0x144>
   24e90:	ldr	r3, [fp, #-8]
   24e94:	ldr	r3, [r3, #4]
   24e98:	sub	r2, r3, #1
   24e9c:	ldr	r3, [fp, #-8]
   24ea0:	str	r2, [r3, #4]
   24ea4:	ldr	r3, [fp, #-12]
   24ea8:	ldr	r1, [r3, #20]
   24eac:	ldr	r3, [fp, #-12]
   24eb0:	ldr	r3, [r3, #16]
   24eb4:	ldr	r2, [fp, #12]
   24eb8:	str	r2, [sp, #8]
   24ebc:	ldrh	r2, [fp, #4]
   24ec0:	str	r2, [sp, #4]
   24ec4:	str	r3, [sp]
   24ec8:	mov	r3, r1
   24ecc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   24ed0:	ldr	r1, [fp, #-20]	; 0xffffffec
   24ed4:	ldr	r0, [fp, #-16]
   24ed8:	bl	24b60 <flatcc_json_parser_union_type@@Base+0x274>
   24edc:	str	r0, [fp, #-20]	; 0xffffffec
   24ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   24ee4:	mov	r0, r3
   24ee8:	sub	sp, fp, #4
   24eec:	pop	{fp, pc}

00024ef0 <flatcc_json_parser_union_type_vector@@Base>:
   24ef0:	push	{fp, lr}
   24ef4:	add	fp, sp, #4
   24ef8:	sub	sp, sp, #88	; 0x58
   24efc:	str	r0, [fp, #-64]	; 0xffffffc0
   24f00:	str	r1, [fp, #-68]	; 0xffffffbc
   24f04:	str	r2, [fp, #-72]	; 0xffffffb8
   24f08:	str	r3, [fp, #-76]	; 0xffffffb4
   24f0c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24f10:	ldr	r3, [r3]
   24f14:	ldr	r1, [fp, #8]
   24f18:	mov	r0, r3
   24f1c:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   24f20:	str	r0, [fp, #-8]
   24f24:	ldr	r3, [fp, #-8]
   24f28:	add	r1, r3, #8
   24f2c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   24f30:	mov	r3, r2
   24f34:	lsl	r3, r3, #1
   24f38:	add	r3, r3, r2
   24f3c:	lsl	r3, r3, #3
   24f40:	add	r3, r1, r3
   24f44:	str	r3, [fp, #-12]
   24f48:	ldr	r3, [fp, #-12]
   24f4c:	ldrb	r3, [r3, #12]
   24f50:	cmp	r3, #0
   24f54:	beq	24f74 <flatcc_json_parser_union_type_vector@@Base+0x84>
   24f58:	mov	r3, #28
   24f5c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   24f60:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24f64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24f68:	bl	222fc <flatcc_json_parser_set_error@@Base>
   24f6c:	mov	r3, r0
   24f70:	b	25344 <flatcc_json_parser_union_type_vector@@Base+0x454>
   24f74:	ldr	r3, [fp, #-12]
   24f78:	mov	r2, #1
   24f7c:	strb	r2, [r3, #12]
   24f80:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24f84:	ldr	r0, [r3]
   24f88:	mvn	r3, #0
   24f8c:	mov	r2, #1
   24f90:	mov	r1, #1
   24f94:	bl	192bc <flatcc_builder_start_vector@@Base>
   24f98:	mov	r3, r0
   24f9c:	cmp	r3, #0
   24fa0:	bne	25310 <flatcc_json_parser_union_type_vector@@Base+0x420>
   24fa4:	sub	r3, fp, #56	; 0x38
   24fa8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   24fac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24fb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24fb4:	bl	1d770 <flatcc_emitter_copy_buffer@@Base+0x7e8>
   24fb8:	str	r0, [fp, #-68]	; 0xffffffbc
   24fbc:	b	250d8 <flatcc_json_parser_union_type_vector@@Base+0x1e8>
   24fc0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   24fc4:	ldr	r3, [r3]
   24fc8:	mov	r1, #1
   24fcc:	mov	r0, r3
   24fd0:	bl	189cc <flatcc_builder_extend_vector@@Base>
   24fd4:	str	r0, [fp, #-16]
   24fd8:	ldr	r3, [fp, #-16]
   24fdc:	cmp	r3, #0
   24fe0:	beq	25318 <flatcc_json_parser_union_type_vector@@Base+0x428>
   24fe4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   24fe8:	str	r3, [fp, #-20]	; 0xffffffec
   24fec:	sub	r3, fp, #57	; 0x39
   24ff0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   24ff4:	ldr	r1, [fp, #-20]	; 0xffffffec
   24ff8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   24ffc:	bl	1e008 <flatcc_emitter_copy_buffer@@Base+0x1080>
   25000:	str	r0, [fp, #-68]	; 0xffffffbc
   25004:	ldr	r2, [fp, #-20]	; 0xffffffec
   25008:	ldr	r3, [fp, #-68]	; 0xffffffbc
   2500c:	cmp	r2, r3
   25010:	bne	2505c <flatcc_json_parser_union_type_vector@@Base+0x16c>
   25014:	ldr	r3, [fp, #-68]	; 0xffffffbc
   25018:	str	r3, [fp, #-20]	; 0xffffffec
   2501c:	sub	r3, fp, #57	; 0x39
   25020:	str	r3, [sp]
   25024:	ldr	r3, [fp, #12]
   25028:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2502c:	ldr	r1, [fp, #-20]	; 0xffffffec
   25030:	ldr	r0, [fp, #-64]	; 0xffffffc0
   25034:	bl	1e64c <flatcc_emitter_copy_buffer@@Base+0x16c4>
   25038:	str	r0, [fp, #-68]	; 0xffffffbc
   2503c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25040:	ldr	r3, [fp, #-20]	; 0xffffffec
   25044:	cmp	r2, r3
   25048:	beq	2532c <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2504c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   25050:	ldr	r3, [fp, #-72]	; 0xffffffb8
   25054:	cmp	r2, r3
   25058:	beq	2532c <flatcc_json_parser_union_type_vector@@Base+0x43c>
   2505c:	ldrb	r2, [fp, #-57]	; 0xffffffc7
   25060:	ldr	r3, [fp, #20]
   25064:	mov	r0, r2
   25068:	blx	r3
   2506c:	mov	r3, r0
   25070:	cmp	r3, #0
   25074:	bne	250b0 <flatcc_json_parser_union_type_vector@@Base+0x1c0>
   25078:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2507c:	ldr	r3, [r3, #8]
   25080:	and	r3, r3, #1
   25084:	cmp	r3, #0
   25088:	bne	250a8 <flatcc_json_parser_union_type_vector@@Base+0x1b8>
   2508c:	mov	r3, #15
   25090:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25094:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25098:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2509c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   250a0:	mov	r3, r0
   250a4:	b	25344 <flatcc_json_parser_union_type_vector@@Base+0x454>
   250a8:	mov	r3, #0
   250ac:	strb	r3, [fp, #-57]	; 0xffffffc7
   250b0:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   250b4:	mov	r1, r3
   250b8:	ldr	r0, [fp, #-16]
   250bc:	bl	1d0f0 <flatcc_emitter_copy_buffer@@Base+0x168>
   250c0:	sub	r3, fp, #56	; 0x38
   250c4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   250c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   250cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   250d0:	bl	1d858 <flatcc_emitter_copy_buffer@@Base+0x8d0>
   250d4:	str	r0, [fp, #-68]	; 0xffffffbc
   250d8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   250dc:	cmp	r3, #0
   250e0:	bne	24fc0 <flatcc_json_parser_union_type_vector@@Base+0xd0>
   250e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   250e8:	ldr	r3, [r3]
   250ec:	mov	r0, r3
   250f0:	bl	1a5e4 <flatcc_builder_vector_count@@Base>
   250f4:	str	r0, [fp, #-24]	; 0xffffffe8
   250f8:	ldr	r3, [fp, #-12]
   250fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   25100:	str	r2, [r3, #16]
   25104:	ldr	r3, [fp, #-24]	; 0xffffffe8
   25108:	str	r3, [fp, #-28]	; 0xffffffe4
   2510c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25110:	ldr	r3, [r3]
   25114:	ldr	r1, [fp, #-28]	; 0xffffffe4
   25118:	mov	r0, r3
   2511c:	bl	174a8 <flatcc_builder_enter_user_frame@@Base>
   25120:	str	r0, [fp, #-32]	; 0xffffffe0
   25124:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25128:	ldr	r3, [r3]
   2512c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25130:	mov	r0, r3
   25134:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   25138:	str	r0, [fp, #-36]	; 0xffffffdc
   2513c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25140:	ldr	r3, [r3]
   25144:	mov	r0, r3
   25148:	bl	1a610 <flatcc_builder_vector_edit@@Base>
   2514c:	mov	r3, r0
   25150:	ldr	r2, [fp, #-28]	; 0xffffffe4
   25154:	mov	r1, r3
   25158:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2515c:	bl	1245c <memcpy@plt>
   25160:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25164:	ldr	r3, [r3]
   25168:	mov	r0, r3
   2516c:	bl	1a514 <flatcc_builder_end_vector@@Base>
   25170:	str	r0, [fp, #-40]	; 0xffffffd8
   25174:	ldr	r3, [fp, #-40]	; 0xffffffd8
   25178:	cmp	r3, #0
   2517c:	beq	25320 <flatcc_json_parser_union_type_vector@@Base+0x430>
   25180:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25184:	ldr	r2, [r3]
   25188:	ldrh	r3, [fp, #4]
   2518c:	sub	r3, r3, #1
   25190:	mov	r1, r3
   25194:	mov	r0, r2
   25198:	bl	1bca4 <flatcc_builder_table_add_offset@@Base>
   2519c:	str	r0, [fp, #-44]	; 0xffffffd4
   251a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   251a4:	cmp	r3, #0
   251a8:	beq	25328 <flatcc_json_parser_union_type_vector@@Base+0x438>
   251ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   251b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   251b4:	str	r2, [r3]
   251b8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   251bc:	ldr	r3, [r3]
   251c0:	ldr	r1, [fp, #8]
   251c4:	mov	r0, r3
   251c8:	bl	176b4 <flatcc_builder_get_user_frame_ptr@@Base>
   251cc:	str	r0, [fp, #-8]
   251d0:	ldr	r3, [fp, #-8]
   251d4:	add	r1, r3, #8
   251d8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   251dc:	mov	r3, r2
   251e0:	lsl	r3, r3, #1
   251e4:	add	r3, r3, r2
   251e8:	lsl	r3, r3, #3
   251ec:	add	r3, r1, r3
   251f0:	str	r3, [fp, #-12]
   251f4:	ldr	r3, [fp, #-12]
   251f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   251fc:	str	r2, [r3, #20]
   25200:	ldr	r3, [fp, #-12]
   25204:	ldr	r3, [r3]
   25208:	cmp	r3, #0
   2520c:	bne	2522c <flatcc_json_parser_union_type_vector@@Base+0x33c>
   25210:	ldr	r3, [fp, #-8]
   25214:	ldr	r3, [r3, #4]
   25218:	add	r2, r3, #1
   2521c:	ldr	r3, [fp, #-8]
   25220:	str	r2, [r3, #4]
   25224:	ldr	r3, [fp, #-68]	; 0xffffffbc
   25228:	b	25344 <flatcc_json_parser_union_type_vector@@Base+0x454>
   2522c:	ldr	r3, [fp, #-8]
   25230:	ldr	r3, [r3, #4]
   25234:	cmp	r3, #0
   25238:	bne	2525c <flatcc_json_parser_union_type_vector@@Base+0x36c>
   2523c:	ldr	r3, [pc, #268]	; 25350 <flatcc_json_parser_union_type_vector@@Base+0x460>
   25240:	add	r3, pc, r3
   25244:	ldr	r2, [pc, #264]	; 25354 <flatcc_json_parser_union_type_vector@@Base+0x464>
   25248:	ldr	r1, [pc, #264]	; 25358 <flatcc_json_parser_union_type_vector@@Base+0x468>
   2524c:	add	r1, pc, r1
   25250:	ldr	r0, [pc, #260]	; 2535c <flatcc_json_parser_union_type_vector@@Base+0x46c>
   25254:	add	r0, pc, r0
   25258:	bl	12504 <__assert_fail@plt>
   2525c:	ldr	r3, [fp, #-8]
   25260:	ldr	r3, [r3, #4]
   25264:	sub	r2, r3, #1
   25268:	ldr	r3, [fp, #-8]
   2526c:	str	r2, [r3, #4]
   25270:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25274:	ldr	r3, [r3, #16]
   25278:	str	r3, [fp, #-48]	; 0xffffffd0
   2527c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25280:	ldr	r3, [r3, #4]
   25284:	str	r3, [fp, #-52]	; 0xffffffcc
   25288:	ldr	r3, [fp, #-12]
   2528c:	ldr	r2, [r3, #8]
   25290:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25294:	str	r2, [r3, #16]
   25298:	ldr	r3, [fp, #-12]
   2529c:	ldr	r2, [r3, #4]
   252a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   252a4:	str	r2, [r3, #4]
   252a8:	ldr	r3, [fp, #-12]
   252ac:	ldr	r1, [r3]
   252b0:	ldr	r3, [fp, #16]
   252b4:	str	r3, [sp, #8]
   252b8:	ldrh	r3, [fp, #4]
   252bc:	str	r3, [sp, #4]
   252c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   252c4:	str	r3, [sp]
   252c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   252cc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   252d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   252d4:	bl	24b60 <flatcc_json_parser_union_type@@Base+0x274>
   252d8:	mov	r2, r0
   252dc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   252e0:	cmp	r2, r3
   252e4:	bne	252f0 <flatcc_json_parser_union_type_vector@@Base+0x400>
   252e8:	ldr	r3, [fp, #-72]	; 0xffffffb8
   252ec:	b	25344 <flatcc_json_parser_union_type_vector@@Base+0x454>
   252f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   252f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   252f8:	str	r2, [r3, #16]
   252fc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25300:	ldr	r2, [fp, #-52]	; 0xffffffcc
   25304:	str	r2, [r3, #4]
   25308:	ldr	r3, [fp, #-68]	; 0xffffffbc
   2530c:	b	25344 <flatcc_json_parser_union_type_vector@@Base+0x454>
   25310:	nop			; (mov r0, r0)
   25314:	b	2532c <flatcc_json_parser_union_type_vector@@Base+0x43c>
   25318:	nop			; (mov r0, r0)
   2531c:	b	2532c <flatcc_json_parser_union_type_vector@@Base+0x43c>
   25320:	nop			; (mov r0, r0)
   25324:	b	2532c <flatcc_json_parser_union_type_vector@@Base+0x43c>
   25328:	nop			; (mov r0, r0)
   2532c:	mov	r3, #33	; 0x21
   25330:	ldr	r2, [fp, #-72]	; 0xffffffb8
   25334:	ldr	r1, [fp, #-68]	; 0xffffffbc
   25338:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2533c:	bl	222fc <flatcc_json_parser_set_error@@Base>
   25340:	mov	r3, r0
   25344:	mov	r0, r3
   25348:	sub	sp, fp, #4
   2534c:	pop	{fp, pc}
   25350:	muleq	r0, ip, sl
   25354:	andeq	r0, r0, r2, ror #8
   25358:	muleq	r0, r0, r5
   2535c:	andeq	r2, r0, ip, ror #11

00025360 <flatcc_json_parser_table_as_root@@Base>:
   25360:	push	{r4, fp, lr}
   25364:	add	fp, sp, #8
   25368:	sub	sp, sp, #84	; 0x54
   2536c:	str	r0, [fp, #-72]	; 0xffffffb8
   25370:	str	r1, [fp, #-76]	; 0xffffffb4
   25374:	str	r2, [fp, #-80]	; 0xffffffb0
   25378:	str	r3, [fp, #-84]	; 0xffffffac
   2537c:	ldr	r3, [fp, #4]
   25380:	and	r3, r3, #4
   25384:	cmp	r3, #0
   25388:	beq	25394 <flatcc_json_parser_table_as_root@@Base+0x34>
   2538c:	mov	r3, #2
   25390:	b	25398 <flatcc_json_parser_table_as_root@@Base+0x38>
   25394:	mov	r3, #0
   25398:	str	r3, [fp, #-16]
   2539c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   253a0:	cmp	r3, #0
   253a4:	bne	253b0 <flatcc_json_parser_table_as_root@@Base+0x50>
   253a8:	sub	r3, fp, #60	; 0x3c
   253ac:	b	253b4 <flatcc_json_parser_table_as_root@@Base+0x54>
   253b0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   253b4:	str	r3, [fp, #-76]	; 0xffffffb4
   253b8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   253bc:	ldr	r3, [fp, #-84]	; 0xffffffac
   253c0:	add	r2, r2, r3
   253c4:	ldr	r3, [fp, #4]
   253c8:	str	r3, [sp]
   253cc:	mov	r3, r2
   253d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   253d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   253d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   253dc:	bl	1d130 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   253e0:	ldr	r3, [fp, #-16]
   253e4:	mov	r2, #0
   253e8:	ldr	r1, [fp, #8]
   253ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   253f0:	bl	18510 <flatcc_builder_start_buffer@@Base>
   253f4:	mov	r3, r0
   253f8:	cmp	r3, #0
   253fc:	beq	25408 <flatcc_json_parser_table_as_root@@Base+0xa8>
   25400:	mvn	r3, #0
   25404:	b	25478 <flatcc_json_parser_table_as_root@@Base+0x118>
   25408:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2540c:	ldr	r3, [fp, #-84]	; 0xffffffac
   25410:	add	r2, r2, r3
   25414:	sub	r3, fp, #64	; 0x40
   25418:	ldr	r4, [fp, #12]
   2541c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   25420:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25424:	blx	r4
   25428:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2542c:	ldr	r3, [r3, #24]
   25430:	cmp	r3, #0
   25434:	beq	25444 <flatcc_json_parser_table_as_root@@Base+0xe4>
   25438:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2543c:	ldr	r3, [r3, #24]
   25440:	b	25478 <flatcc_json_parser_table_as_root@@Base+0x118>
   25444:	ldr	r3, [fp, #-64]	; 0xffffffc0
   25448:	mov	r1, r3
   2544c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25450:	bl	18668 <flatcc_builder_end_buffer@@Base>
   25454:	mov	r3, r0
   25458:	cmp	r3, #0
   2545c:	bne	25468 <flatcc_json_parser_table_as_root@@Base+0x108>
   25460:	mvn	r3, #0
   25464:	b	25478 <flatcc_json_parser_table_as_root@@Base+0x118>
   25468:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2546c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   25470:	str	r2, [r3, #40]	; 0x28
   25474:	mov	r3, #0
   25478:	mov	r0, r3
   2547c:	sub	sp, fp, #8
   25480:	pop	{r4, fp, pc}

00025484 <flatcc_json_parser_struct_as_root@@Base>:
   25484:	push	{r4, fp, lr}
   25488:	add	fp, sp, #8
   2548c:	sub	sp, sp, #84	; 0x54
   25490:	str	r0, [fp, #-72]	; 0xffffffb8
   25494:	str	r1, [fp, #-76]	; 0xffffffb4
   25498:	str	r2, [fp, #-80]	; 0xffffffb0
   2549c:	str	r3, [fp, #-84]	; 0xffffffac
   254a0:	ldr	r3, [fp, #4]
   254a4:	and	r3, r3, #4
   254a8:	cmp	r3, #0
   254ac:	beq	254b8 <flatcc_json_parser_struct_as_root@@Base+0x34>
   254b0:	mov	r3, #2
   254b4:	b	254bc <flatcc_json_parser_struct_as_root@@Base+0x38>
   254b8:	mov	r3, #0
   254bc:	str	r3, [fp, #-16]
   254c0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   254c4:	cmp	r3, #0
   254c8:	bne	254d4 <flatcc_json_parser_struct_as_root@@Base+0x50>
   254cc:	sub	r3, fp, #60	; 0x3c
   254d0:	b	254d8 <flatcc_json_parser_struct_as_root@@Base+0x54>
   254d4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   254d8:	str	r3, [fp, #-76]	; 0xffffffb4
   254dc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   254e0:	ldr	r3, [fp, #-84]	; 0xffffffac
   254e4:	add	r2, r2, r3
   254e8:	ldr	r3, [fp, #4]
   254ec:	str	r3, [sp]
   254f0:	mov	r3, r2
   254f4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   254f8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   254fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25500:	bl	1d130 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   25504:	ldr	r3, [fp, #-16]
   25508:	mov	r2, #0
   2550c:	ldr	r1, [fp, #8]
   25510:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25514:	bl	18510 <flatcc_builder_start_buffer@@Base>
   25518:	mov	r3, r0
   2551c:	cmp	r3, #0
   25520:	beq	2552c <flatcc_json_parser_struct_as_root@@Base+0xa8>
   25524:	mvn	r3, #0
   25528:	b	2559c <flatcc_json_parser_struct_as_root@@Base+0x118>
   2552c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   25530:	ldr	r3, [fp, #-84]	; 0xffffffac
   25534:	add	r2, r2, r3
   25538:	sub	r3, fp, #64	; 0x40
   2553c:	ldr	r4, [fp, #12]
   25540:	ldr	r1, [fp, #-80]	; 0xffffffb0
   25544:	ldr	r0, [fp, #-76]	; 0xffffffb4
   25548:	blx	r4
   2554c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   25550:	ldr	r3, [r3, #24]
   25554:	cmp	r3, #0
   25558:	beq	25568 <flatcc_json_parser_struct_as_root@@Base+0xe4>
   2555c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   25560:	ldr	r3, [r3, #24]
   25564:	b	2559c <flatcc_json_parser_struct_as_root@@Base+0x118>
   25568:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2556c:	mov	r1, r3
   25570:	ldr	r0, [fp, #-72]	; 0xffffffb8
   25574:	bl	18668 <flatcc_builder_end_buffer@@Base>
   25578:	mov	r3, r0
   2557c:	cmp	r3, #0
   25580:	bne	2558c <flatcc_json_parser_struct_as_root@@Base+0x108>
   25584:	mvn	r3, #0
   25588:	b	2559c <flatcc_json_parser_struct_as_root@@Base+0x118>
   2558c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   25590:	ldr	r2, [fp, #-80]	; 0xffffffb0
   25594:	str	r2, [r3, #40]	; 0x28
   25598:	mov	r3, #0
   2559c:	mov	r0, r3
   255a0:	sub	sp, fp, #8
   255a4:	pop	{r4, fp, pc}
   255a8:	cmp	r1, #0
   255ac:	beq	257b8 <flatcc_json_parser_struct_as_root@@Base+0x334>
   255b0:	eor	ip, r0, r1
   255b4:	rsbmi	r1, r1, #0
   255b8:	subs	r2, r1, #1
   255bc:	beq	25784 <flatcc_json_parser_struct_as_root@@Base+0x300>
   255c0:	movs	r3, r0
   255c4:	rsbmi	r3, r0, #0
   255c8:	cmp	r3, r1
   255cc:	bls	25790 <flatcc_json_parser_struct_as_root@@Base+0x30c>
   255d0:	tst	r1, r2
   255d4:	beq	257a0 <flatcc_json_parser_struct_as_root@@Base+0x31c>
   255d8:	clz	r2, r3
   255dc:	clz	r0, r1
   255e0:	sub	r2, r0, r2
   255e4:	rsbs	r2, r2, #31
   255e8:	addne	r2, r2, r2, lsl #1
   255ec:	mov	r0, #0
   255f0:	addne	pc, pc, r2, lsl #2
   255f4:	nop			; (mov r0, r0)
   255f8:	cmp	r3, r1, lsl #31
   255fc:	adc	r0, r0, r0
   25600:	subcs	r3, r3, r1, lsl #31
   25604:	cmp	r3, r1, lsl #30
   25608:	adc	r0, r0, r0
   2560c:	subcs	r3, r3, r1, lsl #30
   25610:	cmp	r3, r1, lsl #29
   25614:	adc	r0, r0, r0
   25618:	subcs	r3, r3, r1, lsl #29
   2561c:	cmp	r3, r1, lsl #28
   25620:	adc	r0, r0, r0
   25624:	subcs	r3, r3, r1, lsl #28
   25628:	cmp	r3, r1, lsl #27
   2562c:	adc	r0, r0, r0
   25630:	subcs	r3, r3, r1, lsl #27
   25634:	cmp	r3, r1, lsl #26
   25638:	adc	r0, r0, r0
   2563c:	subcs	r3, r3, r1, lsl #26
   25640:	cmp	r3, r1, lsl #25
   25644:	adc	r0, r0, r0
   25648:	subcs	r3, r3, r1, lsl #25
   2564c:	cmp	r3, r1, lsl #24
   25650:	adc	r0, r0, r0
   25654:	subcs	r3, r3, r1, lsl #24
   25658:	cmp	r3, r1, lsl #23
   2565c:	adc	r0, r0, r0
   25660:	subcs	r3, r3, r1, lsl #23
   25664:	cmp	r3, r1, lsl #22
   25668:	adc	r0, r0, r0
   2566c:	subcs	r3, r3, r1, lsl #22
   25670:	cmp	r3, r1, lsl #21
   25674:	adc	r0, r0, r0
   25678:	subcs	r3, r3, r1, lsl #21
   2567c:	cmp	r3, r1, lsl #20
   25680:	adc	r0, r0, r0
   25684:	subcs	r3, r3, r1, lsl #20
   25688:	cmp	r3, r1, lsl #19
   2568c:	adc	r0, r0, r0
   25690:	subcs	r3, r3, r1, lsl #19
   25694:	cmp	r3, r1, lsl #18
   25698:	adc	r0, r0, r0
   2569c:	subcs	r3, r3, r1, lsl #18
   256a0:	cmp	r3, r1, lsl #17
   256a4:	adc	r0, r0, r0
   256a8:	subcs	r3, r3, r1, lsl #17
   256ac:	cmp	r3, r1, lsl #16
   256b0:	adc	r0, r0, r0
   256b4:	subcs	r3, r3, r1, lsl #16
   256b8:	cmp	r3, r1, lsl #15
   256bc:	adc	r0, r0, r0
   256c0:	subcs	r3, r3, r1, lsl #15
   256c4:	cmp	r3, r1, lsl #14
   256c8:	adc	r0, r0, r0
   256cc:	subcs	r3, r3, r1, lsl #14
   256d0:	cmp	r3, r1, lsl #13
   256d4:	adc	r0, r0, r0
   256d8:	subcs	r3, r3, r1, lsl #13
   256dc:	cmp	r3, r1, lsl #12
   256e0:	adc	r0, r0, r0
   256e4:	subcs	r3, r3, r1, lsl #12
   256e8:	cmp	r3, r1, lsl #11
   256ec:	adc	r0, r0, r0
   256f0:	subcs	r3, r3, r1, lsl #11
   256f4:	cmp	r3, r1, lsl #10
   256f8:	adc	r0, r0, r0
   256fc:	subcs	r3, r3, r1, lsl #10
   25700:	cmp	r3, r1, lsl #9
   25704:	adc	r0, r0, r0
   25708:	subcs	r3, r3, r1, lsl #9
   2570c:	cmp	r3, r1, lsl #8
   25710:	adc	r0, r0, r0
   25714:	subcs	r3, r3, r1, lsl #8
   25718:	cmp	r3, r1, lsl #7
   2571c:	adc	r0, r0, r0
   25720:	subcs	r3, r3, r1, lsl #7
   25724:	cmp	r3, r1, lsl #6
   25728:	adc	r0, r0, r0
   2572c:	subcs	r3, r3, r1, lsl #6
   25730:	cmp	r3, r1, lsl #5
   25734:	adc	r0, r0, r0
   25738:	subcs	r3, r3, r1, lsl #5
   2573c:	cmp	r3, r1, lsl #4
   25740:	adc	r0, r0, r0
   25744:	subcs	r3, r3, r1, lsl #4
   25748:	cmp	r3, r1, lsl #3
   2574c:	adc	r0, r0, r0
   25750:	subcs	r3, r3, r1, lsl #3
   25754:	cmp	r3, r1, lsl #2
   25758:	adc	r0, r0, r0
   2575c:	subcs	r3, r3, r1, lsl #2
   25760:	cmp	r3, r1, lsl #1
   25764:	adc	r0, r0, r0
   25768:	subcs	r3, r3, r1, lsl #1
   2576c:	cmp	r3, r1
   25770:	adc	r0, r0, r0
   25774:	subcs	r3, r3, r1
   25778:	cmp	ip, #0
   2577c:	rsbmi	r0, r0, #0
   25780:	bx	lr
   25784:	teq	ip, r0
   25788:	rsbmi	r0, r0, #0
   2578c:	bx	lr
   25790:	movcc	r0, #0
   25794:	asreq	r0, ip, #31
   25798:	orreq	r0, r0, #1
   2579c:	bx	lr
   257a0:	clz	r2, r1
   257a4:	rsb	r2, r2, #31
   257a8:	cmp	ip, #0
   257ac:	lsr	r0, r3, r2
   257b0:	rsbmi	r0, r0, #0
   257b4:	bx	lr
   257b8:	cmp	r0, #0
   257bc:	mvngt	r0, #-2147483648	; 0x80000000
   257c0:	movlt	r0, #-2147483648	; 0x80000000
   257c4:	b	25df0 <flatcc_json_parser_struct_as_root@@Base+0x96c>
   257c8:	cmp	r1, #0
   257cc:	beq	257b8 <flatcc_json_parser_struct_as_root@@Base+0x334>
   257d0:	push	{r0, r1, lr}
   257d4:	bl	255b0 <flatcc_json_parser_struct_as_root@@Base+0x12c>
   257d8:	pop	{r1, r2, lr}
   257dc:	mul	r3, r2, r0
   257e0:	sub	r1, r1, r3
   257e4:	bx	lr
   257e8:	eor	r1, r1, #-2147483648	; 0x80000000
   257ec:	b	257f4 <flatcc_json_parser_struct_as_root@@Base+0x370>
   257f0:	eor	r3, r3, #-2147483648	; 0x80000000
   257f4:	push	{r4, r5, lr}
   257f8:	lsl	r4, r1, #1
   257fc:	lsl	r5, r3, #1
   25800:	teq	r4, r5
   25804:	teqeq	r0, r2
   25808:	orrsne	ip, r4, r0
   2580c:	orrsne	ip, r5, r2
   25810:	mvnsne	ip, r4, asr #21
   25814:	mvnsne	ip, r5, asr #21
   25818:	beq	25a04 <flatcc_json_parser_struct_as_root@@Base+0x580>
   2581c:	lsr	r4, r4, #21
   25820:	rsbs	r5, r4, r5, lsr #21
   25824:	rsblt	r5, r5, #0
   25828:	ble	25848 <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   2582c:	add	r4, r4, r5
   25830:	eor	r2, r0, r2
   25834:	eor	r3, r1, r3
   25838:	eor	r0, r2, r0
   2583c:	eor	r1, r3, r1
   25840:	eor	r2, r0, r2
   25844:	eor	r3, r1, r3
   25848:	cmp	r5, #54	; 0x36
   2584c:	pophi	{r4, r5, pc}
   25850:	tst	r1, #-2147483648	; 0x80000000
   25854:	lsl	r1, r1, #12
   25858:	mov	ip, #1048576	; 0x100000
   2585c:	orr	r1, ip, r1, lsr #12
   25860:	beq	2586c <flatcc_json_parser_struct_as_root@@Base+0x3e8>
   25864:	rsbs	r0, r0, #0
   25868:	rsc	r1, r1, #0
   2586c:	tst	r3, #-2147483648	; 0x80000000
   25870:	lsl	r3, r3, #12
   25874:	orr	r3, ip, r3, lsr #12
   25878:	beq	25884 <flatcc_json_parser_struct_as_root@@Base+0x400>
   2587c:	rsbs	r2, r2, #0
   25880:	rsc	r3, r3, #0
   25884:	teq	r4, r5
   25888:	beq	259ec <flatcc_json_parser_struct_as_root@@Base+0x568>
   2588c:	sub	r4, r4, #1
   25890:	rsbs	lr, r5, #32
   25894:	blt	258b0 <flatcc_json_parser_struct_as_root@@Base+0x42c>
   25898:	lsl	ip, r2, lr
   2589c:	adds	r0, r0, r2, lsr r5
   258a0:	adc	r1, r1, #0
   258a4:	adds	r0, r0, r3, lsl lr
   258a8:	adcs	r1, r1, r3, asr r5
   258ac:	b	258cc <flatcc_json_parser_struct_as_root@@Base+0x448>
   258b0:	sub	r5, r5, #32
   258b4:	add	lr, lr, #32
   258b8:	cmp	r2, #1
   258bc:	lsl	ip, r3, lr
   258c0:	orrcs	ip, ip, #2
   258c4:	adds	r0, r0, r3, asr r5
   258c8:	adcs	r1, r1, r3, asr #31
   258cc:	and	r5, r1, #-2147483648	; 0x80000000
   258d0:	bpl	258e0 <flatcc_json_parser_struct_as_root@@Base+0x45c>
   258d4:	rsbs	ip, ip, #0
   258d8:	rscs	r0, r0, #0
   258dc:	rsc	r1, r1, #0
   258e0:	cmp	r1, #1048576	; 0x100000
   258e4:	bcc	25924 <flatcc_json_parser_struct_as_root@@Base+0x4a0>
   258e8:	cmp	r1, #2097152	; 0x200000
   258ec:	bcc	2590c <flatcc_json_parser_struct_as_root@@Base+0x488>
   258f0:	lsrs	r1, r1, #1
   258f4:	rrxs	r0, r0
   258f8:	rrx	ip, ip
   258fc:	add	r4, r4, #1
   25900:	lsl	r2, r4, #21
   25904:	cmn	r2, #4194304	; 0x400000
   25908:	bcs	25a64 <flatcc_json_parser_struct_as_root@@Base+0x5e0>
   2590c:	cmp	ip, #-2147483648	; 0x80000000
   25910:	lsrseq	ip, r0, #1
   25914:	adcs	r0, r0, #0
   25918:	adc	r1, r1, r4, lsl #20
   2591c:	orr	r1, r1, r5
   25920:	pop	{r4, r5, pc}
   25924:	lsls	ip, ip, #1
   25928:	adcs	r0, r0, r0
   2592c:	adc	r1, r1, r1
   25930:	tst	r1, #1048576	; 0x100000
   25934:	sub	r4, r4, #1
   25938:	bne	2590c <flatcc_json_parser_struct_as_root@@Base+0x488>
   2593c:	teq	r1, #0
   25940:	moveq	r1, r0
   25944:	moveq	r0, #0
   25948:	clz	r3, r1
   2594c:	addeq	r3, r3, #32
   25950:	sub	r3, r3, #11
   25954:	subs	r2, r3, #32
   25958:	bge	2597c <flatcc_json_parser_struct_as_root@@Base+0x4f8>
   2595c:	adds	r2, r2, #12
   25960:	ble	25978 <flatcc_json_parser_struct_as_root@@Base+0x4f4>
   25964:	add	ip, r2, #20
   25968:	rsb	r2, r2, #12
   2596c:	lsl	r0, r1, ip
   25970:	lsr	r1, r1, r2
   25974:	b	2598c <flatcc_json_parser_struct_as_root@@Base+0x508>
   25978:	add	r2, r2, #20
   2597c:	rsble	ip, r2, #32
   25980:	lsl	r1, r1, r2
   25984:	orrle	r1, r1, r0, lsr ip
   25988:	lslle	r0, r0, r2
   2598c:	subs	r4, r4, r3
   25990:	addge	r1, r1, r4, lsl #20
   25994:	orrge	r1, r1, r5
   25998:	popge	{r4, r5, pc}
   2599c:	mvn	r4, r4
   259a0:	subs	r4, r4, #31
   259a4:	bge	259e0 <flatcc_json_parser_struct_as_root@@Base+0x55c>
   259a8:	adds	r4, r4, #12
   259ac:	bgt	259c8 <flatcc_json_parser_struct_as_root@@Base+0x544>
   259b0:	add	r4, r4, #20
   259b4:	rsb	r2, r4, #32
   259b8:	lsr	r0, r0, r4
   259bc:	orr	r0, r0, r1, lsl r2
   259c0:	orr	r1, r5, r1, lsr r4
   259c4:	pop	{r4, r5, pc}
   259c8:	rsb	r4, r4, #12
   259cc:	rsb	r2, r4, #32
   259d0:	lsr	r0, r0, r2
   259d4:	orr	r0, r0, r1, lsl r4
   259d8:	mov	r1, r5
   259dc:	pop	{r4, r5, pc}
   259e0:	lsr	r0, r1, r4
   259e4:	mov	r1, r5
   259e8:	pop	{r4, r5, pc}
   259ec:	teq	r4, #0
   259f0:	eor	r3, r3, #1048576	; 0x100000
   259f4:	eoreq	r1, r1, #1048576	; 0x100000
   259f8:	addeq	r4, r4, #1
   259fc:	subne	r5, r5, #1
   25a00:	b	2588c <flatcc_json_parser_struct_as_root@@Base+0x408>
   25a04:	mvns	ip, r4, asr #21
   25a08:	mvnsne	ip, r5, asr #21
   25a0c:	beq	25a74 <flatcc_json_parser_struct_as_root@@Base+0x5f0>
   25a10:	teq	r4, r5
   25a14:	teqeq	r0, r2
   25a18:	beq	25a2c <flatcc_json_parser_struct_as_root@@Base+0x5a8>
   25a1c:	orrs	ip, r4, r0
   25a20:	moveq	r1, r3
   25a24:	moveq	r0, r2
   25a28:	pop	{r4, r5, pc}
   25a2c:	teq	r1, r3
   25a30:	movne	r1, #0
   25a34:	movne	r0, #0
   25a38:	popne	{r4, r5, pc}
   25a3c:	lsrs	ip, r4, #21
   25a40:	bne	25a54 <flatcc_json_parser_struct_as_root@@Base+0x5d0>
   25a44:	lsls	r0, r0, #1
   25a48:	adcs	r1, r1, r1
   25a4c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   25a50:	pop	{r4, r5, pc}
   25a54:	adds	r4, r4, #4194304	; 0x400000
   25a58:	addcc	r1, r1, #1048576	; 0x100000
   25a5c:	popcc	{r4, r5, pc}
   25a60:	and	r5, r1, #-2147483648	; 0x80000000
   25a64:	orr	r1, r5, #2130706432	; 0x7f000000
   25a68:	orr	r1, r1, #15728640	; 0xf00000
   25a6c:	mov	r0, #0
   25a70:	pop	{r4, r5, pc}
   25a74:	mvns	ip, r4, asr #21
   25a78:	movne	r1, r3
   25a7c:	movne	r0, r2
   25a80:	mvnseq	ip, r5, asr #21
   25a84:	movne	r3, r1
   25a88:	movne	r2, r0
   25a8c:	orrs	r4, r0, r1, lsl #12
   25a90:	orrseq	r5, r2, r3, lsl #12
   25a94:	teqeq	r1, r3
   25a98:	orrne	r1, r1, #524288	; 0x80000
   25a9c:	pop	{r4, r5, pc}
   25aa0:	teq	r0, #0
   25aa4:	moveq	r1, #0
   25aa8:	bxeq	lr
   25aac:	push	{r4, r5, lr}
   25ab0:	mov	r4, #1024	; 0x400
   25ab4:	add	r4, r4, #50	; 0x32
   25ab8:	mov	r5, #0
   25abc:	mov	r1, #0
   25ac0:	b	2593c <flatcc_json_parser_struct_as_root@@Base+0x4b8>
   25ac4:	teq	r0, #0
   25ac8:	moveq	r1, #0
   25acc:	bxeq	lr
   25ad0:	push	{r4, r5, lr}
   25ad4:	mov	r4, #1024	; 0x400
   25ad8:	add	r4, r4, #50	; 0x32
   25adc:	ands	r5, r0, #-2147483648	; 0x80000000
   25ae0:	rsbmi	r0, r0, #0
   25ae4:	mov	r1, #0
   25ae8:	b	2593c <flatcc_json_parser_struct_as_root@@Base+0x4b8>
   25aec:	lsls	r2, r0, #1
   25af0:	asr	r1, r2, #3
   25af4:	rrx	r1, r1
   25af8:	lsl	r0, r2, #28
   25afc:	andsne	r3, r2, #-16777216	; 0xff000000
   25b00:	teqne	r3, #-16777216	; 0xff000000
   25b04:	eorne	r1, r1, #939524096	; 0x38000000
   25b08:	bxne	lr
   25b0c:	teq	r2, #0
   25b10:	teqne	r3, #-16777216	; 0xff000000
   25b14:	bxeq	lr
   25b18:	push	{r4, r5, lr}
   25b1c:	mov	r4, #896	; 0x380
   25b20:	and	r5, r1, #-2147483648	; 0x80000000
   25b24:	bic	r1, r1, #-2147483648	; 0x80000000
   25b28:	b	2593c <flatcc_json_parser_struct_as_root@@Base+0x4b8>
   25b2c:	orrs	r2, r0, r1
   25b30:	bxeq	lr
   25b34:	push	{r4, r5, lr}
   25b38:	mov	r5, #0
   25b3c:	b	25b5c <flatcc_json_parser_struct_as_root@@Base+0x6d8>
   25b40:	orrs	r2, r0, r1
   25b44:	bxeq	lr
   25b48:	push	{r4, r5, lr}
   25b4c:	ands	r5, r1, #-2147483648	; 0x80000000
   25b50:	bpl	25b5c <flatcc_json_parser_struct_as_root@@Base+0x6d8>
   25b54:	rsbs	r0, r0, #0
   25b58:	rsc	r1, r1, #0
   25b5c:	mov	r4, #1024	; 0x400
   25b60:	add	r4, r4, #50	; 0x32
   25b64:	lsrs	ip, r1, #22
   25b68:	beq	258e0 <flatcc_json_parser_struct_as_root@@Base+0x45c>
   25b6c:	mov	r2, #3
   25b70:	lsrs	ip, ip, #3
   25b74:	addne	r2, r2, #3
   25b78:	lsrs	ip, ip, #3
   25b7c:	addne	r2, r2, #3
   25b80:	add	r2, r2, ip, lsr #3
   25b84:	rsb	r3, r2, #32
   25b88:	lsl	ip, r0, r3
   25b8c:	lsr	r0, r0, r2
   25b90:	orr	r0, r0, r1, lsl r3
   25b94:	lsr	r1, r1, r2
   25b98:	add	r4, r4, r2
   25b9c:	b	258e0 <flatcc_json_parser_struct_as_root@@Base+0x45c>
   25ba0:	eor	r0, r0, #-2147483648	; 0x80000000
   25ba4:	b	25bac <flatcc_json_parser_struct_as_root@@Base+0x728>
   25ba8:	eor	r1, r1, #-2147483648	; 0x80000000
   25bac:	lsls	r2, r0, #1
   25bb0:	lslsne	r3, r1, #1
   25bb4:	teqne	r2, r3
   25bb8:	mvnsne	ip, r2, asr #24
   25bbc:	mvnsne	ip, r3, asr #24
   25bc0:	beq	25cb8 <flatcc_json_parser_struct_as_root@@Base+0x834>
   25bc4:	lsr	r2, r2, #24
   25bc8:	rsbs	r3, r2, r3, lsr #24
   25bcc:	addgt	r2, r2, r3
   25bd0:	eorgt	r1, r0, r1
   25bd4:	eorgt	r0, r1, r0
   25bd8:	eorgt	r1, r0, r1
   25bdc:	rsblt	r3, r3, #0
   25be0:	cmp	r3, #25
   25be4:	bxhi	lr
   25be8:	tst	r0, #-2147483648	; 0x80000000
   25bec:	orr	r0, r0, #8388608	; 0x800000
   25bf0:	bic	r0, r0, #-16777216	; 0xff000000
   25bf4:	rsbne	r0, r0, #0
   25bf8:	tst	r1, #-2147483648	; 0x80000000
   25bfc:	orr	r1, r1, #8388608	; 0x800000
   25c00:	bic	r1, r1, #-16777216	; 0xff000000
   25c04:	rsbne	r1, r1, #0
   25c08:	teq	r2, r3
   25c0c:	beq	25ca0 <flatcc_json_parser_struct_as_root@@Base+0x81c>
   25c10:	sub	r2, r2, #1
   25c14:	adds	r0, r0, r1, asr r3
   25c18:	rsb	r3, r3, #32
   25c1c:	lsl	r1, r1, r3
   25c20:	and	r3, r0, #-2147483648	; 0x80000000
   25c24:	bpl	25c30 <flatcc_json_parser_struct_as_root@@Base+0x7ac>
   25c28:	rsbs	r1, r1, #0
   25c2c:	rsc	r0, r0, #0
   25c30:	cmp	r0, #8388608	; 0x800000
   25c34:	bcc	25c68 <flatcc_json_parser_struct_as_root@@Base+0x7e4>
   25c38:	cmp	r0, #16777216	; 0x1000000
   25c3c:	bcc	25c54 <flatcc_json_parser_struct_as_root@@Base+0x7d0>
   25c40:	lsrs	r0, r0, #1
   25c44:	rrx	r1, r1
   25c48:	add	r2, r2, #1
   25c4c:	cmp	r2, #254	; 0xfe
   25c50:	bcs	25d0c <flatcc_json_parser_struct_as_root@@Base+0x888>
   25c54:	cmp	r1, #-2147483648	; 0x80000000
   25c58:	adc	r0, r0, r2, lsl #23
   25c5c:	biceq	r0, r0, #1
   25c60:	orr	r0, r0, r3
   25c64:	bx	lr
   25c68:	lsls	r1, r1, #1
   25c6c:	adc	r0, r0, r0
   25c70:	tst	r0, #8388608	; 0x800000
   25c74:	sub	r2, r2, #1
   25c78:	bne	25c54 <flatcc_json_parser_struct_as_root@@Base+0x7d0>
   25c7c:	clz	ip, r0
   25c80:	sub	ip, ip, #8
   25c84:	subs	r2, r2, ip
   25c88:	lsl	r0, r0, ip
   25c8c:	addge	r0, r0, r2, lsl #23
   25c90:	rsblt	r2, r2, #0
   25c94:	orrge	r0, r0, r3
   25c98:	orrlt	r0, r3, r0, lsr r2
   25c9c:	bx	lr
   25ca0:	teq	r2, #0
   25ca4:	eor	r1, r1, #8388608	; 0x800000
   25ca8:	eoreq	r0, r0, #8388608	; 0x800000
   25cac:	addeq	r2, r2, #1
   25cb0:	subne	r3, r3, #1
   25cb4:	b	25c10 <flatcc_json_parser_struct_as_root@@Base+0x78c>
   25cb8:	lsl	r3, r1, #1
   25cbc:	mvns	ip, r2, asr #24
   25cc0:	mvnsne	ip, r3, asr #24
   25cc4:	beq	25d18 <flatcc_json_parser_struct_as_root@@Base+0x894>
   25cc8:	teq	r2, r3
   25ccc:	beq	25cdc <flatcc_json_parser_struct_as_root@@Base+0x858>
   25cd0:	teq	r2, #0
   25cd4:	moveq	r0, r1
   25cd8:	bx	lr
   25cdc:	teq	r0, r1
   25ce0:	movne	r0, #0
   25ce4:	bxne	lr
   25ce8:	tst	r2, #-16777216	; 0xff000000
   25cec:	bne	25cfc <flatcc_json_parser_struct_as_root@@Base+0x878>
   25cf0:	lsls	r0, r0, #1
   25cf4:	orrcs	r0, r0, #-2147483648	; 0x80000000
   25cf8:	bx	lr
   25cfc:	adds	r2, r2, #33554432	; 0x2000000
   25d00:	addcc	r0, r0, #8388608	; 0x800000
   25d04:	bxcc	lr
   25d08:	and	r3, r0, #-2147483648	; 0x80000000
   25d0c:	orr	r0, r3, #2130706432	; 0x7f000000
   25d10:	orr	r0, r0, #8388608	; 0x800000
   25d14:	bx	lr
   25d18:	mvns	r2, r2, asr #24
   25d1c:	movne	r0, r1
   25d20:	mvnseq	r3, r3, asr #24
   25d24:	movne	r1, r0
   25d28:	lsls	r2, r0, #9
   25d2c:	lslseq	r3, r1, #9
   25d30:	teqeq	r0, r1
   25d34:	orrne	r0, r0, #4194304	; 0x400000
   25d38:	bx	lr
   25d3c:	mov	r3, #0
   25d40:	b	25d4c <flatcc_json_parser_struct_as_root@@Base+0x8c8>
   25d44:	ands	r3, r0, #-2147483648	; 0x80000000
   25d48:	rsbmi	r0, r0, #0
   25d4c:	movs	ip, r0
   25d50:	bxeq	lr
   25d54:	orr	r3, r3, #1258291200	; 0x4b000000
   25d58:	mov	r1, r0
   25d5c:	mov	r0, #0
   25d60:	b	25da4 <flatcc_json_parser_struct_as_root@@Base+0x920>
   25d64:	orrs	r2, r0, r1
   25d68:	bxeq	lr
   25d6c:	mov	r3, #0
   25d70:	b	25d8c <flatcc_json_parser_struct_as_root@@Base+0x908>
   25d74:	orrs	r2, r0, r1
   25d78:	bxeq	lr
   25d7c:	ands	r3, r1, #-2147483648	; 0x80000000
   25d80:	bpl	25d8c <flatcc_json_parser_struct_as_root@@Base+0x908>
   25d84:	rsbs	r0, r0, #0
   25d88:	rsc	r1, r1, #0
   25d8c:	movs	ip, r1
   25d90:	moveq	ip, r0
   25d94:	moveq	r1, r0
   25d98:	moveq	r0, #0
   25d9c:	orr	r3, r3, #1526726656	; 0x5b000000
   25da0:	subeq	r3, r3, #268435456	; 0x10000000
   25da4:	sub	r3, r3, #8388608	; 0x800000
   25da8:	clz	r2, ip
   25dac:	subs	r2, r2, #8
   25db0:	sub	r3, r3, r2, lsl #23
   25db4:	blt	25dd4 <flatcc_json_parser_struct_as_root@@Base+0x950>
   25db8:	add	r3, r3, r1, lsl r2
   25dbc:	lsl	ip, r0, r2
   25dc0:	rsb	r2, r2, #32
   25dc4:	cmp	ip, #-2147483648	; 0x80000000
   25dc8:	adc	r0, r3, r0, lsr r2
   25dcc:	biceq	r0, r0, #1
   25dd0:	bx	lr
   25dd4:	add	r2, r2, #32
   25dd8:	lsl	ip, r1, r2
   25ddc:	rsb	r2, r2, #32
   25de0:	orrs	r0, r0, ip, lsl #1
   25de4:	adc	r0, r3, r1, lsr r2
   25de8:	biceq	r0, r0, ip, lsr #31
   25dec:	bx	lr
   25df0:	push	{r1, lr}
   25df4:	mov	r0, #8
   25df8:	bl	12444 <raise@plt>
   25dfc:	pop	{r1, pc}

00025e00 <__libc_csu_init@@Base>:
   25e00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25e04:	mov	r7, r0
   25e08:	ldr	r6, [pc, #72]	; 25e58 <__libc_csu_init@@Base+0x58>
   25e0c:	ldr	r5, [pc, #72]	; 25e5c <__libc_csu_init@@Base+0x5c>
   25e10:	add	r6, pc, r6
   25e14:	add	r5, pc, r5
   25e18:	sub	r6, r6, r5
   25e1c:	mov	r8, r1
   25e20:	mov	r9, r2
   25e24:	bl	12424 <raise@plt-0x20>
   25e28:	asrs	r6, r6, #2
   25e2c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   25e30:	mov	r4, #0
   25e34:	add	r4, r4, #1
   25e38:	ldr	r3, [r5], #4
   25e3c:	mov	r2, r9
   25e40:	mov	r1, r8
   25e44:	mov	r0, r7
   25e48:	blx	r3
   25e4c:	cmp	r6, r4
   25e50:	bne	25e34 <__libc_csu_init@@Base+0x34>
   25e54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25e58:	strdeq	r2, [r1], -r8
   25e5c:	strdeq	r2, [r1], -r0

00025e60 <__libc_csu_fini@@Base>:
   25e60:	bx	lr

Disassembly of section .fini:

00025e64 <.fini>:
   25e64:	push	{r3, lr}
   25e68:	pop	{r3, pc}
