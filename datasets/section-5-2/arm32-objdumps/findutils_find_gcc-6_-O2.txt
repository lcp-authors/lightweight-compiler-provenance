
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00011e84 <.init>:
   11e84:	push	{r3, lr}
   11e88:	bl	12c18 <__assert_fail@plt+0x624>
   11e8c:	pop	{r3, pc}

Disassembly of section .plt:

00011e90 <pthread_mutex_unlock@plt-0x14>:
   11e90:	push	{lr}		; (str lr, [sp, #-4]!)
   11e94:	ldr	lr, [pc, #4]	; 11ea0 <pthread_mutex_unlock@plt-0x4>
   11e98:	add	lr, pc, lr
   11e9c:	ldr	pc, [lr, #8]!
   11ea0:	andeq	r5, r4, r0, ror #2

00011ea4 <pthread_mutex_unlock@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #282624	; 0x45000
   11eac:	ldr	pc, [ip, #352]!	; 0x160

00011eb0 <fdopen@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #282624	; 0x45000
   11eb8:	ldr	pc, [ip, #344]!	; 0x158

00011ebc <fstatfs64@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #282624	; 0x45000
   11ec4:	ldr	pc, [ip, #336]!	; 0x150

00011ec8 <calloc@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #282624	; 0x45000
   11ed0:	ldr	pc, [ip, #328]!	; 0x148

00011ed4 <endgrent@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #282624	; 0x45000
   11edc:	ldr	pc, [ip, #320]!	; 0x140

00011ee0 <wctype@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #282624	; 0x45000
   11ee8:	ldr	pc, [ip, #312]!	; 0x138

00011eec <raise@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #282624	; 0x45000
   11ef4:	ldr	pc, [ip, #304]!	; 0x130

00011ef8 <wcrtomb@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #282624	; 0x45000
   11f00:	ldr	pc, [ip, #296]!	; 0x128

00011f04 <gmtime_r@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #282624	; 0x45000
   11f0c:	ldr	pc, [ip, #288]!	; 0x120

00011f10 <__getdelim@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #282624	; 0x45000
   11f18:	ldr	pc, [ip, #280]!	; 0x118

00011f1c <getpwnam@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #282624	; 0x45000
   11f24:	ldr	pc, [ip, #272]!	; 0x110

00011f28 <is_selinux_enabled@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #282624	; 0x45000
   11f30:	ldr	pc, [ip, #264]!	; 0x108

00011f34 <iswctype@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #282624	; 0x45000
   11f3c:	ldr	pc, [ip, #256]!	; 0x100

00011f40 <strcmp@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #282624	; 0x45000
   11f48:	ldr	pc, [ip, #248]!	; 0xf8

00011f4c <strtol@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #282624	; 0x45000
   11f54:	ldr	pc, [ip, #240]!	; 0xf0

00011f58 <getpwuid@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #282624	; 0x45000
   11f60:	ldr	pc, [ip, #232]!	; 0xe8

00011f64 <printf@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #282624	; 0x45000
   11f6c:	ldr	pc, [ip, #224]!	; 0xe0

00011f70 <pthread_mutex_destroy@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #282624	; 0x45000
   11f78:	ldr	pc, [ip, #216]!	; 0xd8

00011f7c <mktime@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #282624	; 0x45000
   11f84:	ldr	pc, [ip, #208]!	; 0xd0

00011f88 <fflush@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #282624	; 0x45000
   11f90:	ldr	pc, [ip, #200]!	; 0xc8

00011f94 <unlinkat@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #282624	; 0x45000
   11f9c:	ldr	pc, [ip, #192]!	; 0xc0

00011fa0 <wcwidth@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #282624	; 0x45000
   11fa8:	ldr	pc, [ip, #184]!	; 0xb8

00011fac <lsetfilecon@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #282624	; 0x45000
   11fb4:	ldr	pc, [ip, #176]!	; 0xb0

00011fb8 <memmove@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #282624	; 0x45000
   11fc0:	ldr	pc, [ip, #168]!	; 0xa8

00011fc4 <free@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #282624	; 0x45000
   11fcc:	ldr	pc, [ip, #160]!	; 0xa0

00011fd0 <pthread_mutex_lock@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #282624	; 0x45000
   11fd8:	ldr	pc, [ip, #152]!	; 0x98

00011fdc <faccessat@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #282624	; 0x45000
   11fe4:	ldr	pc, [ip, #144]!	; 0x90

00011fe8 <ferror@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #282624	; 0x45000
   11ff0:	ldr	pc, [ip, #136]!	; 0x88

00011ff4 <thrd_exit@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #282624	; 0x45000
   11ffc:	ldr	pc, [ip, #128]!	; 0x80

00012000 <strndup@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #282624	; 0x45000
   12008:	ldr	pc, [ip, #120]!	; 0x78

0001200c <clock_gettime@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #282624	; 0x45000
   12014:	ldr	pc, [ip, #112]!	; 0x70

00012018 <_exit@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #282624	; 0x45000
   12020:	ldr	pc, [ip, #104]!	; 0x68

00012024 <memcpy@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #282624	; 0x45000
   1202c:	ldr	pc, [ip, #96]!	; 0x60

00012030 <execvp@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #282624	; 0x45000
   12038:	ldr	pc, [ip, #88]!	; 0x58

0001203c <pthread_mutex_init@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #282624	; 0x45000
   12044:	ldr	pc, [ip, #80]!	; 0x50

00012048 <__strtoull_internal@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #282624	; 0x45000
   12050:	ldr	pc, [ip, #72]!	; 0x48

00012054 <towlower@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #282624	; 0x45000
   1205c:	ldr	pc, [ip, #64]!	; 0x40

00012060 <mbsinit@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #282624	; 0x45000
   12068:	ldr	pc, [ip, #56]!	; 0x38

0001206c <signal@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #282624	; 0x45000
   12074:	ldr	pc, [ip, #48]!	; 0x30

00012078 <time@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #282624	; 0x45000
   12080:	ldr	pc, [ip, #40]!	; 0x28

00012084 <memcmp@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #282624	; 0x45000
   1208c:	ldr	pc, [ip, #32]!

00012090 <stpcpy@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #282624	; 0x45000
   12098:	ldr	pc, [ip, #24]!

0001209c <uname@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #282624	; 0x45000
   120a4:	ldr	pc, [ip, #16]!

000120a8 <ctime@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #282624	; 0x45000
   120b0:	ldr	pc, [ip, #8]!

000120b4 <dcgettext@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #282624	; 0x45000
   120bc:	ldr	pc, [ip, #0]!

000120c0 <strdup@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #68, 20	; 0x44000
   120c8:	ldr	pc, [ip, #4088]!	; 0xff8

000120cc <sysconf@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #68, 20	; 0x44000
   120d4:	ldr	pc, [ip, #4080]!	; 0xff0

000120d8 <getrlimit64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #68, 20	; 0x44000
   120e0:	ldr	pc, [ip, #4072]!	; 0xfe8

000120e4 <realloc@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #68, 20	; 0x44000
   120ec:	ldr	pc, [ip, #4064]!	; 0xfe0

000120f0 <fgetfilecon@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #68, 20	; 0x44000
   120f8:	ldr	pc, [ip, #4056]!	; 0xfd8

000120fc <localtime_r@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #68, 20	; 0x44000
   12104:	ldr	pc, [ip, #4048]!	; 0xfd0

00012108 <textdomain@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #68, 20	; 0x44000
   12110:	ldr	pc, [ip, #4040]!	; 0xfc8

00012114 <iswcntrl@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #68, 20	; 0x44000
   1211c:	ldr	pc, [ip, #4032]!	; 0xfc0

00012120 <chdir@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #68, 20	; 0x44000
   12128:	ldr	pc, [ip, #4024]!	; 0xfb8

0001212c <__fxstatat64@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #68, 20	; 0x44000
   12134:	ldr	pc, [ip, #4016]!	; 0xfb0

00012138 <iswprint@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #68, 20	; 0x44000
   12140:	ldr	pc, [ip, #4008]!	; 0xfa8

00012144 <tzset@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #68, 20	; 0x44000
   1214c:	ldr	pc, [ip, #4000]!	; 0xfa0

00012150 <poll@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #68, 20	; 0x44000
   12158:	ldr	pc, [ip, #3992]!	; 0xf98

0001215c <__fxstat64@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #68, 20	; 0x44000
   12164:	ldr	pc, [ip, #3984]!	; 0xf90

00012168 <fwrite@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #68, 20	; 0x44000
   12170:	ldr	pc, [ip, #3976]!	; 0xf88

00012174 <strcat@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #68, 20	; 0x44000
   1217c:	ldr	pc, [ip, #3968]!	; 0xf80

00012180 <lseek64@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #68, 20	; 0x44000
   12188:	ldr	pc, [ip, #3960]!	; 0xf78

0001218c <waitpid@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #68, 20	; 0x44000
   12194:	ldr	pc, [ip, #3952]!	; 0xf70

00012198 <__ctype_get_mb_cur_max@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #68, 20	; 0x44000
   121a0:	ldr	pc, [ip, #3944]!	; 0xf68

000121a4 <hasmntopt@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #68, 20	; 0x44000
   121ac:	ldr	pc, [ip, #3936]!	; 0xf60

000121b0 <strcpy@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #68, 20	; 0x44000
   121b8:	ldr	pc, [ip, #3928]!	; 0xf58

000121bc <gettimeofday@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #68, 20	; 0x44000
   121c4:	ldr	pc, [ip, #3920]!	; 0xf50

000121c8 <__fpending@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #68, 20	; 0x44000
   121d0:	ldr	pc, [ip, #3912]!	; 0xf48

000121d4 <mbrtowc@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #68, 20	; 0x44000
   121dc:	ldr	pc, [ip, #3904]!	; 0xf40

000121e0 <strtok_r@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #68, 20	; 0x44000
   121e8:	ldr	pc, [ip, #3896]!	; 0xf38

000121ec <error@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #68, 20	; 0x44000
   121f4:	ldr	pc, [ip, #3888]!	; 0xf30

000121f8 <getmntent@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #68, 20	; 0x44000
   12200:	ldr	pc, [ip, #3880]!	; 0xf28

00012204 <opendir@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #68, 20	; 0x44000
   1220c:	ldr	pc, [ip, #3872]!	; 0xf20

00012210 <fnmatch@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #68, 20	; 0x44000
   12218:	ldr	pc, [ip, #3864]!	; 0xf18

0001221c <open64@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #68, 20	; 0x44000
   12224:	ldr	pc, [ip, #3856]!	; 0xf10

00012228 <getenv@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #68, 20	; 0x44000
   12230:	ldr	pc, [ip, #3848]!	; 0xf08

00012234 <lgetfilecon@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #68, 20	; 0x44000
   1223c:	ldr	pc, [ip, #3840]!	; 0xf00

00012240 <malloc@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #68, 20	; 0x44000
   12248:	ldr	pc, [ip, #3832]!	; 0xef8

0001224c <__libc_start_main@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #68, 20	; 0x44000
   12254:	ldr	pc, [ip, #3824]!	; 0xef0

00012258 <readlinkat@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #68, 20	; 0x44000
   12260:	ldr	pc, [ip, #3816]!	; 0xee8

00012264 <strftime@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #68, 20	; 0x44000
   1226c:	ldr	pc, [ip, #3808]!	; 0xee0

00012270 <__freading@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #68, 20	; 0x44000
   12278:	ldr	pc, [ip, #3800]!	; 0xed8

0001227c <localtime@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #68, 20	; 0x44000
   12284:	ldr	pc, [ip, #3792]!	; 0xed0

00012288 <__ctype_tolower_loc@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #68, 20	; 0x44000
   12290:	ldr	pc, [ip, #3784]!	; 0xec8

00012294 <modf@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #68, 20	; 0x44000
   1229c:	ldr	pc, [ip, #3776]!	; 0xec0

000122a0 <__ctype_toupper_loc@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #68, 20	; 0x44000
   122a8:	ldr	pc, [ip, #3768]!	; 0xeb8

000122ac <__gmon_start__@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #68, 20	; 0x44000
   122b4:	ldr	pc, [ip, #3760]!	; 0xeb0

000122b8 <__ctype_b_loc@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #68, 20	; 0x44000
   122c0:	ldr	pc, [ip, #3752]!	; 0xea8

000122c4 <getcwd@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #68, 20	; 0x44000
   122cc:	ldr	pc, [ip, #3744]!	; 0xea0

000122d0 <exit@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #68, 20	; 0x44000
   122d8:	ldr	pc, [ip, #3736]!	; 0xe98

000122dc <feof@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #68, 20	; 0x44000
   122e4:	ldr	pc, [ip, #3728]!	; 0xe90

000122e8 <getfilecon@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #68, 20	; 0x44000
   122f0:	ldr	pc, [ip, #3720]!	; 0xe88

000122f4 <strtoul@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #68, 20	; 0x44000
   122fc:	ldr	pc, [ip, #3712]!	; 0xe80

00012300 <strlen@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #68, 20	; 0x44000
   12308:	ldr	pc, [ip, #3704]!	; 0xe78

0001230c <strchr@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #68, 20	; 0x44000
   12314:	ldr	pc, [ip, #3696]!	; 0xe70

00012318 <setenv@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #68, 20	; 0x44000
   12320:	ldr	pc, [ip, #3688]!	; 0xe68

00012324 <openat64@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #68, 20	; 0x44000
   1232c:	ldr	pc, [ip, #3680]!	; 0xe60

00012330 <memrchr@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #68, 20	; 0x44000
   12338:	ldr	pc, [ip, #3672]!	; 0xe58

0001233c <fprintf@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #68, 20	; 0x44000
   12344:	ldr	pc, [ip, #3664]!	; 0xe50

00012348 <__errno_location@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #68, 20	; 0x44000
   12350:	ldr	pc, [ip, #3656]!	; 0xe48

00012354 <iswalnum@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #68, 20	; 0x44000
   1235c:	ldr	pc, [ip, #3648]!	; 0xe40

00012360 <snprintf@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #68, 20	; 0x44000
   12368:	ldr	pc, [ip, #3640]!	; 0xe38

0001236c <__cxa_atexit@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #68, 20	; 0x44000
   12374:	ldr	pc, [ip, #3632]!	; 0xe30

00012378 <memset@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #68, 20	; 0x44000
   12380:	ldr	pc, [ip, #3624]!	; 0xe28

00012384 <putchar@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #68, 20	; 0x44000
   1238c:	ldr	pc, [ip, #3616]!	; 0xe20

00012390 <strncpy@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #68, 20	; 0x44000
   12398:	ldr	pc, [ip, #3608]!	; 0xe18

0001239c <pthread_mutexattr_gettype@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #68, 20	; 0x44000
   123a4:	ldr	pc, [ip, #3600]!	; 0xe10

000123a8 <btowc@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #68, 20	; 0x44000
   123b0:	ldr	pc, [ip, #3592]!	; 0xe08

000123b4 <strtod@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #68, 20	; 0x44000
   123bc:	ldr	pc, [ip, #3584]!	; 0xe00

000123c0 <fileno@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #68, 20	; 0x44000
   123c8:	ldr	pc, [ip, #3576]!	; 0xdf8

000123cc <difftime@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #68, 20	; 0x44000
   123d4:	ldr	pc, [ip, #3568]!	; 0xdf0

000123d8 <memchr@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #68, 20	; 0x44000
   123e0:	ldr	pc, [ip, #3560]!	; 0xde8

000123e4 <setfilecon@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #68, 20	; 0x44000
   123ec:	ldr	pc, [ip, #3552]!	; 0xde0

000123f0 <access@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #68, 20	; 0x44000
   123f8:	ldr	pc, [ip, #3544]!	; 0xdd8

000123fc <fclose@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #68, 20	; 0x44000
   12404:	ldr	pc, [ip, #3536]!	; 0xdd0

00012408 <strnlen@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #68, 20	; 0x44000
   12410:	ldr	pc, [ip, #3528]!	; 0xdc8

00012414 <fseeko64@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #68, 20	; 0x44000
   1241c:	ldr	pc, [ip, #3520]!	; 0xdc0

00012420 <endmntent@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #68, 20	; 0x44000
   12428:	ldr	pc, [ip, #3512]!	; 0xdb8

0001242c <fcntl64@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #68, 20	; 0x44000
   12434:	ldr	pc, [ip, #3504]!	; 0xdb0

00012438 <rpmatch@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #68, 20	; 0x44000
   12440:	ldr	pc, [ip, #3496]!	; 0xda8

00012444 <setlocale@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #68, 20	; 0x44000
   1244c:	ldr	pc, [ip, #3488]!	; 0xda0

00012450 <fork@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #68, 20	; 0x44000
   12458:	ldr	pc, [ip, #3480]!	; 0xd98

0001245c <endpwent@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #68, 20	; 0x44000
   12464:	ldr	pc, [ip, #3472]!	; 0xd90

00012468 <strrchr@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #68, 20	; 0x44000
   12470:	ldr	pc, [ip, #3464]!	; 0xd88

00012474 <vfprintf@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #68, 20	; 0x44000
   1247c:	ldr	pc, [ip, #3456]!	; 0xd80

00012480 <nl_langinfo@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #68, 20	; 0x44000
   12488:	ldr	pc, [ip, #3448]!	; 0xd78

0001248c <fputc@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #68, 20	; 0x44000
   12494:	ldr	pc, [ip, #3440]!	; 0xd70

00012498 <sscanf@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #68, 20	; 0x44000
   124a0:	ldr	pc, [ip, #3432]!	; 0xd68

000124a4 <localeconv@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #68, 20	; 0x44000
   124ac:	ldr	pc, [ip, #3424]!	; 0xd60

000124b0 <sprintf@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #68, 20	; 0x44000
   124b8:	ldr	pc, [ip, #3416]!	; 0xd58

000124bc <readdir64@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #68, 20	; 0x44000
   124c4:	ldr	pc, [ip, #3408]!	; 0xd50

000124c8 <fdopendir@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #68, 20	; 0x44000
   124d0:	ldr	pc, [ip, #3400]!	; 0xd48

000124d4 <timegm@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #68, 20	; 0x44000
   124dc:	ldr	pc, [ip, #3392]!	; 0xd40

000124e0 <putc@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #68, 20	; 0x44000
   124e8:	ldr	pc, [ip, #3384]!	; 0xd38

000124ec <dirfd@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #68, 20	; 0x44000
   124f4:	ldr	pc, [ip, #3376]!	; 0xd30

000124f8 <fchdir@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #68, 20	; 0x44000
   12500:	ldr	pc, [ip, #3368]!	; 0xd28

00012504 <fopen64@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #68, 20	; 0x44000
   1250c:	ldr	pc, [ip, #3360]!	; 0xd20

00012510 <qsort@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #68, 20	; 0x44000
   12518:	ldr	pc, [ip, #3352]!	; 0xd18

0001251c <freecon@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #68, 20	; 0x44000
   12524:	ldr	pc, [ip, #3344]!	; 0xd10

00012528 <strpbrk@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #68, 20	; 0x44000
   12530:	ldr	pc, [ip, #3336]!	; 0xd08

00012534 <setmntent@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #68, 20	; 0x44000
   1253c:	ldr	pc, [ip, #3328]!	; 0xd00

00012540 <bindtextdomain@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #68, 20	; 0x44000
   12548:	ldr	pc, [ip, #3320]!	; 0xcf8

0001254c <getdelim@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #68, 20	; 0x44000
   12554:	ldr	pc, [ip, #3312]!	; 0xcf0

00012558 <__xstat64@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #68, 20	; 0x44000
   12560:	ldr	pc, [ip, #3304]!	; 0xce8

00012564 <isatty@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #68, 20	; 0x44000
   1256c:	ldr	pc, [ip, #3296]!	; 0xce0

00012570 <unsetenv@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #68, 20	; 0x44000
   12578:	ldr	pc, [ip, #3288]!	; 0xcd8

0001257c <towupper@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #68, 20	; 0x44000
   12584:	ldr	pc, [ip, #3280]!	; 0xcd0

00012588 <fputs@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #68, 20	; 0x44000
   12590:	ldr	pc, [ip, #3272]!	; 0xcc8

00012594 <strncmp@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #68, 20	; 0x44000
   1259c:	ldr	pc, [ip, #3264]!	; 0xcc0

000125a0 <abort@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #68, 20	; 0x44000
   125a8:	ldr	pc, [ip, #3256]!	; 0xcb8

000125ac <close@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #68, 20	; 0x44000
   125b4:	ldr	pc, [ip, #3248]!	; 0xcb0

000125b8 <__lxstat64@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #68, 20	; 0x44000
   125c0:	ldr	pc, [ip, #3240]!	; 0xca8

000125c4 <closedir@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #68, 20	; 0x44000
   125cc:	ldr	pc, [ip, #3232]!	; 0xca0

000125d0 <getgrgid@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #68, 20	; 0x44000
   125d8:	ldr	pc, [ip, #3224]!	; 0xc98

000125dc <getgrnam@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #68, 20	; 0x44000
   125e4:	ldr	pc, [ip, #3216]!	; 0xc90

000125e8 <strspn@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #68, 20	; 0x44000
   125f0:	ldr	pc, [ip, #3208]!	; 0xc88

000125f4 <__assert_fail@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #68, 20	; 0x44000
   125fc:	ldr	pc, [ip, #3200]!	; 0xc80

Disassembly of section .text:

00012600 <.text>:
   12600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12604:	mov	r4, r0
   12608:	ldr	r0, [r1]
   1260c:	ldr	r8, [pc, #1336]	; 12b4c <__assert_fail@plt+0x558>
   12610:	cmp	r0, #0
   12614:	sub	sp, sp, #236	; 0xec
   12618:	ldreq	r0, [pc, #1328]	; 12b50 <__assert_fail@plt+0x55c>
   1261c:	mov	r5, r1
   12620:	bl	295f4 <__assert_fail@plt+0x17000>
   12624:	bl	17f1c <__assert_fail@plt+0x5928>
   12628:	mov	r3, #0
   1262c:	mvn	r2, #99	; 0x63
   12630:	str	r2, [r8, #16]
   12634:	strb	r3, [r8, #40]	; 0x28
   12638:	str	r3, [r8, #28]
   1263c:	strb	r3, [r8, #32]
   12640:	bl	1fd18 <__assert_fail@plt+0xd724>
   12644:	cmp	r0, #0
   12648:	bne	12910 <__assert_fail@plt+0x31c>
   1264c:	ldr	r0, [pc, #1280]	; 12b54 <__assert_fail@plt+0x560>
   12650:	bl	18dac <__assert_fail@plt+0x67b8>
   12654:	cmp	r0, #0
   12658:	str	r0, [r8, #36]	; 0x24
   1265c:	beq	12b20 <__assert_fail@plt+0x52c>
   12660:	ldr	r6, [pc, #1264]	; 12b58 <__assert_fail@plt+0x564>
   12664:	mov	r0, r6
   12668:	bl	189d8 <__assert_fail@plt+0x63e4>
   1266c:	ldr	r1, [pc, #1256]	; 12b5c <__assert_fail@plt+0x568>
   12670:	mov	r0, #6
   12674:	bl	12444 <setlocale@plt>
   12678:	ldr	r1, [pc, #1248]	; 12b60 <__assert_fail@plt+0x56c>
   1267c:	ldr	r0, [pc, #1248]	; 12b64 <__assert_fail@plt+0x570>
   12680:	bl	12540 <bindtextdomain@plt>
   12684:	ldr	r0, [pc, #1240]	; 12b64 <__assert_fail@plt+0x570>
   12688:	bl	12108 <textdomain@plt>
   1268c:	ldr	r0, [pc, #1236]	; 12b68 <__assert_fail@plt+0x574>
   12690:	bl	402a4 <__assert_fail@plt+0x2dcb0>
   12694:	cmp	r0, #0
   12698:	bne	12af8 <__assert_fail@plt+0x504>
   1269c:	mov	r1, r5
   126a0:	mov	r0, r4
   126a4:	bl	18594 <__assert_fail@plt+0x5fa0>
   126a8:	ldr	r3, [r6, #44]	; 0x2c
   126ac:	tst	r3, #2
   126b0:	ldrne	r2, [pc, #1204]	; 12b6c <__assert_fail@plt+0x578>
   126b4:	strne	r2, [r6, #52]	; 0x34
   126b8:	tst	r3, #128	; 0x80
   126bc:	mov	r7, r0
   126c0:	bne	128ec <__assert_fail@plt+0x2f8>
   126c4:	mov	r0, r4
   126c8:	mov	r2, r7
   126cc:	mov	r1, r5
   126d0:	bl	17134 <__assert_fail@plt+0x4b40>
   126d4:	sub	r4, r4, r7
   126d8:	cmp	r4, #0
   126dc:	str	r0, [sp, #20]
   126e0:	ble	126fc <__assert_fail@plt+0x108>
   126e4:	mov	r1, #1
   126e8:	ldr	r0, [r5, r7, lsl #2]
   126ec:	bl	18510 <__assert_fail@plt+0x5f1c>
   126f0:	add	r3, r5, r7, lsl #2
   126f4:	subs	r4, r0, #0
   126f8:	beq	128c4 <__assert_fail@plt+0x2d0>
   126fc:	ldr	r4, [r6, #76]	; 0x4c
   12700:	cmp	r4, #0
   12704:	beq	129c0 <__assert_fail@plt+0x3cc>
   12708:	ldr	r1, [pc, #1120]	; 12b70 <__assert_fail@plt+0x57c>
   1270c:	mov	r0, r4
   12710:	bl	11f40 <strcmp@plt>
   12714:	subs	r5, r0, #0
   12718:	bne	12918 <__assert_fail@plt+0x324>
   1271c:	ldrb	r4, [r6, #80]	; 0x50
   12720:	mov	r2, #5
   12724:	cmp	r4, #0
   12728:	bne	12b30 <__assert_fail@plt+0x53c>
   1272c:	ldr	r1, [pc, #1088]	; 12b74 <__assert_fail@plt+0x580>
   12730:	bl	120b4 <dcgettext@plt>
   12734:	mov	r1, r0
   12738:	mov	r0, r4
   1273c:	bl	18c78 <__assert_fail@plt+0x6684>
   12740:	ldr	r3, [pc, #1072]	; 12b78 <__assert_fail@plt+0x584>
   12744:	ldr	r3, [r3]
   12748:	str	r3, [sp, #16]
   1274c:	str	r0, [sp, #12]
   12750:	ldr	r0, [sp, #16]
   12754:	bl	20de0 <__assert_fail@plt+0xe7ec>
   12758:	mov	r7, r0
   1275c:	cmp	r7, #0
   12760:	beq	12980 <__assert_fail@plt+0x38c>
   12764:	mov	sl, #1
   12768:	mov	fp, sl
   1276c:	mov	r9, #0
   12770:	add	r1, sp, #128	; 0x80
   12774:	mov	r0, r7
   12778:	bl	20e14 <__assert_fail@plt+0xe820>
   1277c:	subs	r4, r0, #0
   12780:	beq	12894 <__assert_fail@plt+0x2a0>
   12784:	ldrb	r5, [r4]
   12788:	ldr	r3, [r6, #76]	; 0x4c
   1278c:	cmp	r5, #0
   12790:	bne	127e0 <__assert_fail@plt+0x1ec>
   12794:	cmp	r3, #0
   12798:	beq	1285c <__assert_fail@plt+0x268>
   1279c:	mov	r0, r7
   127a0:	bl	20eb0 <__assert_fail@plt+0xe8bc>
   127a4:	mov	r2, #5
   127a8:	ldr	r1, [pc, #972]	; 12b7c <__assert_fail@plt+0x588>
   127ac:	mov	r4, r0
   127b0:	mov	r0, r9
   127b4:	bl	120b4 <dcgettext@plt>
   127b8:	str	r4, [sp]
   127bc:	ldr	r3, [sp, #12]
   127c0:	ldr	r2, [pc, #952]	; 12b80 <__assert_fail@plt+0x58c>
   127c4:	mov	r1, r9
   127c8:	str	r0, [sp, #4]
   127cc:	mov	r0, r5
   127d0:	bl	121ec <error@plt>
   127d4:	str	fp, [r8, #28]
   127d8:	mov	sl, r9
   127dc:	b	12770 <__assert_fail@plt+0x17c>
   127e0:	cmp	r3, #0
   127e4:	beq	12880 <__assert_fail@plt+0x28c>
   127e8:	mov	r0, r4
   127ec:	bl	12300 <strlen@plt>
   127f0:	str	r0, [r8, #20]
   127f4:	mov	r0, r4
   127f8:	bl	12ef8 <__assert_fail@plt+0x904>
   127fc:	cmp	r0, #0
   12800:	bne	12770 <__assert_fail@plt+0x17c>
   12804:	mov	sl, r0
   12808:	mov	r0, r7
   1280c:	bl	20ed0 <__assert_fail@plt+0xe8dc>
   12810:	cmp	sl, #0
   12814:	beq	12850 <__assert_fail@plt+0x25c>
   12818:	ldr	r3, [r6, #76]	; 0x4c
   1281c:	cmp	r3, #0
   12820:	beq	12844 <__assert_fail@plt+0x250>
   12824:	ldr	r0, [sp, #16]
   12828:	bl	11fe8 <ferror@plt>
   1282c:	cmp	r0, #0
   12830:	bne	12a80 <__assert_fail@plt+0x48c>
   12834:	ldr	r0, [sp, #16]
   12838:	bl	123fc <fclose@plt>
   1283c:	cmp	r0, #0
   12840:	bne	12a80 <__assert_fail@plt+0x48c>
   12844:	ldr	r0, [sp, #20]
   12848:	bl	14de8 <__assert_fail@plt+0x27f4>
   1284c:	bl	17fb0 <__assert_fail@plt+0x59bc>
   12850:	ldr	r0, [r8, #28]
   12854:	add	sp, sp, #236	; 0xec
   12858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1285c:	mov	r1, r4
   12860:	mov	r0, r9
   12864:	bl	18c78 <__assert_fail@plt+0x6684>
   12868:	ldr	r2, [pc, #788]	; 12b84 <__assert_fail@plt+0x590>
   1286c:	mov	r1, #2
   12870:	mov	r3, r0
   12874:	mov	r0, r9
   12878:	bl	121ec <error@plt>
   1287c:	b	127d4 <__assert_fail@plt+0x1e0>
   12880:	mov	r1, fp
   12884:	bl	18510 <__assert_fail@plt+0x5f1c>
   12888:	cmp	r0, #0
   1288c:	beq	127e8 <__assert_fail@plt+0x1f4>
   12890:	b	12808 <__assert_fail@plt+0x214>
   12894:	ldr	r3, [sp, #128]	; 0x80
   12898:	cmp	r3, #3
   1289c:	beq	12980 <__assert_fail@plt+0x38c>
   128a0:	cmp	r3, #4
   128a4:	beq	12984 <__assert_fail@plt+0x390>
   128a8:	cmp	r3, #2
   128ac:	beq	12808 <__assert_fail@plt+0x214>
   128b0:	ldr	r3, [pc, #720]	; 12b88 <__assert_fail@plt+0x594>
   128b4:	ldr	r2, [pc, #720]	; 12b8c <__assert_fail@plt+0x598>
   128b8:	ldr	r1, [pc, #720]	; 12b90 <__assert_fail@plt+0x59c>
   128bc:	ldr	r0, [pc, #720]	; 12b94 <__assert_fail@plt+0x5a0>
   128c0:	bl	125f4 <__assert_fail@plt>
   128c4:	ldr	r2, [r6, #76]	; 0x4c
   128c8:	cmp	r2, #0
   128cc:	str	r2, [sp, #12]
   128d0:	bne	12aa4 <__assert_fail@plt+0x4b0>
   128d4:	mov	r0, r3
   128d8:	bl	20db8 <__assert_fail@plt+0xe7c4>
   128dc:	ldr	r3, [sp, #12]
   128e0:	str	r3, [sp, #16]
   128e4:	mov	r7, r0
   128e8:	b	1275c <__assert_fail@plt+0x168>
   128ec:	ldr	r3, [pc, #676]	; 12b98 <__assert_fail@plt+0x5a4>
   128f0:	ldr	r0, [pc, #676]	; 12b9c <__assert_fail@plt+0x5a8>
   128f4:	ldr	r9, [r3]
   128f8:	bl	120a8 <ctime@plt>
   128fc:	ldr	r1, [pc, #668]	; 12ba0 <__assert_fail@plt+0x5ac>
   12900:	mov	r2, r0
   12904:	mov	r0, r9
   12908:	bl	1233c <fprintf@plt>
   1290c:	b	126c4 <__assert_fail@plt+0xd0>
   12910:	bl	1fbe0 <__assert_fail@plt+0xd5ec>
   12914:	b	1264c <__assert_fail@plt+0x58>
   12918:	mov	r1, r4
   1291c:	mov	r0, #0
   12920:	bl	18c78 <__assert_fail@plt+0x6684>
   12924:	ldr	r1, [pc, #632]	; 12ba4 <__assert_fail@plt+0x5b0>
   12928:	str	r0, [sp, #12]
   1292c:	ldr	r0, [r6, #76]	; 0x4c
   12930:	bl	12504 <fopen64@plt>
   12934:	subs	r3, r0, #0
   12938:	str	r3, [sp, #16]
   1293c:	beq	12a40 <__assert_fail@plt+0x44c>
   12940:	bl	123c0 <fileno@plt>
   12944:	subs	r7, r0, #0
   12948:	blt	12a6c <__assert_fail@plt+0x478>
   1294c:	ldrb	r3, [r6, #80]	; 0x50
   12950:	cmp	r3, #0
   12954:	beq	12970 <__assert_fail@plt+0x37c>
   12958:	mov	r1, r7
   1295c:	add	r2, sp, #24
   12960:	mov	r0, #3
   12964:	bl	1215c <__fxstat64@plt>
   12968:	subs	r1, r0, #0
   1296c:	beq	129dc <__assert_fail@plt+0x3e8>
   12970:	mov	r0, r7
   12974:	mov	r1, #1
   12978:	bl	210bc <__assert_fail@plt+0xeac8>
   1297c:	b	12750 <__assert_fail@plt+0x15c>
   12980:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   12984:	bl	12348 <__errno_location@plt>
   12988:	mov	r2, #5
   1298c:	ldr	r1, [pc, #532]	; 12ba8 <__assert_fail@plt+0x5b4>
   12990:	mov	sl, r4
   12994:	ldr	r5, [r0]
   12998:	mov	r0, r4
   1299c:	bl	120b4 <dcgettext@plt>
   129a0:	ldr	r3, [sp, #12]
   129a4:	mov	r1, r5
   129a8:	mov	r2, r0
   129ac:	mov	r0, r4
   129b0:	bl	121ec <error@plt>
   129b4:	mov	r3, #1
   129b8:	str	r3, [r8, #28]
   129bc:	b	12808 <__assert_fail@plt+0x214>
   129c0:	add	r0, sp, #232	; 0xe8
   129c4:	mov	r3, #46	; 0x2e
   129c8:	strh	r3, [r0, #-104]!	; 0xffffff98
   129cc:	bl	12ef8 <__assert_fail@plt+0x904>
   129d0:	cmp	r0, #0
   129d4:	beq	12850 <__assert_fail@plt+0x25c>
   129d8:	b	12844 <__assert_fail@plt+0x250>
   129dc:	add	r2, sp, #128	; 0x80
   129e0:	mov	r0, #3
   129e4:	bl	1215c <__fxstat64@plt>
   129e8:	subs	r9, r0, #0
   129ec:	bne	12970 <__assert_fail@plt+0x37c>
   129f0:	ldrd	r4, [sp, #120]	; 0x78
   129f4:	ldrd	r2, [sp, #224]	; 0xe0
   129f8:	cmp	r5, r3
   129fc:	cmpeq	r4, r2
   12a00:	bne	12970 <__assert_fail@plt+0x37c>
   12a04:	ldrd	r4, [sp, #24]
   12a08:	ldrd	r2, [sp, #128]	; 0x80
   12a0c:	cmp	r5, r3
   12a10:	cmpeq	r4, r2
   12a14:	bne	12970 <__assert_fail@plt+0x37c>
   12a18:	mov	r2, #5
   12a1c:	ldr	r1, [pc, #392]	; 12bac <__assert_fail@plt+0x5b8>
   12a20:	bl	120b4 <dcgettext@plt>
   12a24:	ldr	r3, [sp, #12]
   12a28:	mov	r1, r9
   12a2c:	str	r3, [sp]
   12a30:	ldr	r2, [pc, #376]	; 12bb0 <__assert_fail@plt+0x5bc>
   12a34:	mov	r3, r0
   12a38:	mov	r0, #1
   12a3c:	bl	121ec <error@plt>
   12a40:	bl	12348 <__errno_location@plt>
   12a44:	mov	r2, #5
   12a48:	ldr	r1, [pc, #356]	; 12bb4 <__assert_fail@plt+0x5c0>
   12a4c:	ldr	r4, [r0]
   12a50:	ldr	r0, [sp, #16]
   12a54:	bl	120b4 <dcgettext@plt>
   12a58:	ldr	r3, [sp, #12]
   12a5c:	mov	r1, r4
   12a60:	mov	r2, r0
   12a64:	mov	r0, #1
   12a68:	bl	121ec <error@plt>
   12a6c:	ldr	r3, [pc, #276]	; 12b88 <__assert_fail@plt+0x594>
   12a70:	ldr	r2, [pc, #320]	; 12bb8 <__assert_fail@plt+0x5c4>
   12a74:	ldr	r1, [pc, #276]	; 12b90 <__assert_fail@plt+0x59c>
   12a78:	ldr	r0, [pc, #316]	; 12bbc <__assert_fail@plt+0x5c8>
   12a7c:	bl	125f4 <__assert_fail@plt>
   12a80:	mov	r2, #5
   12a84:	ldr	r1, [pc, #308]	; 12bc0 <__assert_fail@plt+0x5cc>
   12a88:	mov	r0, #0
   12a8c:	bl	120b4 <dcgettext@plt>
   12a90:	ldr	r3, [sp, #12]
   12a94:	mov	r1, #0
   12a98:	mov	r2, r0
   12a9c:	mov	r0, #1
   12aa0:	bl	121ec <error@plt>
   12aa4:	mov	r2, #5
   12aa8:	ldr	r1, [pc, #276]	; 12bc4 <__assert_fail@plt+0x5d0>
   12aac:	bl	120b4 <dcgettext@plt>
   12ab0:	ldr	r1, [r5, r7, lsl #2]
   12ab4:	mov	r6, r0
   12ab8:	mov	r0, r4
   12abc:	bl	18c78 <__assert_fail@plt+0x6684>
   12ac0:	mov	r2, r6
   12ac4:	mov	r1, r4
   12ac8:	mov	r3, r0
   12acc:	mov	r0, r4
   12ad0:	bl	121ec <error@plt>
   12ad4:	mov	r2, #5
   12ad8:	ldr	r1, [pc, #232]	; 12bc8 <__assert_fail@plt+0x5d4>
   12adc:	mov	r0, r4
   12ae0:	bl	120b4 <dcgettext@plt>
   12ae4:	mov	r1, r4
   12ae8:	ldr	r2, [pc, #148]	; 12b84 <__assert_fail@plt+0x590>
   12aec:	mov	r3, r0
   12af0:	mov	r0, #1
   12af4:	bl	121ec <error@plt>
   12af8:	bl	12348 <__errno_location@plt>
   12afc:	ldr	r1, [pc, #200]	; 12bcc <__assert_fail@plt+0x5d8>
   12b00:	mov	r2, #5
   12b04:	ldr	r4, [r0]
   12b08:	mov	r0, #0
   12b0c:	bl	120b4 <dcgettext@plt>
   12b10:	mov	r1, r4
   12b14:	mov	r2, r0
   12b18:	mov	r0, #1
   12b1c:	bl	121ec <error@plt>
   12b20:	bl	12348 <__errno_location@plt>
   12b24:	mov	r2, #5
   12b28:	ldr	r1, [pc, #160]	; 12bd0 <__assert_fail@plt+0x5dc>
   12b2c:	b	12b04 <__assert_fail@plt+0x510>
   12b30:	ldr	r1, [pc, #156]	; 12bd4 <__assert_fail@plt+0x5e0>
   12b34:	bl	120b4 <dcgettext@plt>
   12b38:	mov	r1, r5
   12b3c:	ldr	r2, [pc, #148]	; 12bd8 <__assert_fail@plt+0x5e4>
   12b40:	mov	r3, r0
   12b44:	mov	r0, #1
   12b48:	bl	121ec <error@plt>
   12b4c:	andeq	r7, r5, r0, asr #28
   12b50:	andeq	r0, r4, ip, lsr r6
   12b54:	andeq	r0, r4, r4, asr #12
   12b58:	andeq	r7, r5, ip, ror #28
   12b5c:	andeq	r2, r4, r0, asr r0
   12b60:	andeq	r0, r4, r4, ror r6
   12b64:	andeq	r4, r4, r4, asr #11
   12b68:	andeq	r1, r2, r0, asr r1
   12b6c:	andeq	r8, r1, r4, ror #5
   12b70:	andeq	r0, r4, ip, lsl #14
   12b74:	andeq	r0, r4, r4, ror #14
   12b78:	andeq	r7, r5, r0, asr r5
   12b7c:	andeq	r0, r4, r0, asr #16
   12b80:	andeq	r0, r4, r0, ror #16
   12b84:	andeq	r4, r4, r0, ror #18
   12b88:	andeq	r0, r4, r8, ror #5
   12b8c:	andeq	r0, r0, r3, lsr #5
   12b90:	andeq	r0, r4, r0, lsl #6
   12b94:	andeq	r0, r4, r8, lsl r8
   12b98:	andeq	r7, r5, r8, asr #10
   12b9c:	andeq	r7, r5, r8, lsl #29
   12ba0:			; <UNDEFINED> instruction: 0x000406b0
   12ba4:	andeq	r6, r4, r0, lsr r1
   12ba8:	andeq	r0, r4, r8, lsl #16
   12bac:	muleq	r4, ip, r7
   12bb0:	andeq	r0, r4, r0, lsl #16
   12bb4:	andeq	r0, r4, r8, ror r7
   12bb8:	andeq	r0, r0, r2, ror #4
   12bbc:	muleq	r4, r4, r7
   12bc0:	andeq	r0, r4, ip, ror #16
   12bc4:	andeq	r0, r4, r4, asr #13
   12bc8:	ldrdeq	r0, [r4], -r8
   12bcc:	andeq	r0, r4, ip, lsl #13
   12bd0:	andeq	r0, r4, r8, asr #12
   12bd4:	andeq	r0, r4, r0, lsl r7
   12bd8:	andeq	r5, r4, r0, lsl sl
   12bdc:	mov	fp, #0
   12be0:	mov	lr, #0
   12be4:	pop	{r1}		; (ldr r1, [sp], #4)
   12be8:	mov	r2, sp
   12bec:	push	{r2}		; (str r2, [sp, #-4]!)
   12bf0:	push	{r0}		; (str r0, [sp, #-4]!)
   12bf4:	ldr	ip, [pc, #16]	; 12c0c <__assert_fail@plt+0x618>
   12bf8:	push	{ip}		; (str ip, [sp, #-4]!)
   12bfc:	ldr	r0, [pc, #12]	; 12c10 <__assert_fail@plt+0x61c>
   12c00:	ldr	r3, [pc, #12]	; 12c14 <__assert_fail@plt+0x620>
   12c04:	bl	1224c <__libc_start_main@plt>
   12c08:	bl	125a0 <abort@plt>
   12c0c:	andeq	r0, r4, r0, lsr #5
   12c10:	andeq	r2, r1, r0, lsl #12
   12c14:	andeq	r0, r4, r0, asr #4
   12c18:	ldr	r3, [pc, #20]	; 12c34 <__assert_fail@plt+0x640>
   12c1c:	ldr	r2, [pc, #20]	; 12c38 <__assert_fail@plt+0x644>
   12c20:	add	r3, pc, r3
   12c24:	ldr	r2, [r3, r2]
   12c28:	cmp	r2, #0
   12c2c:	bxeq	lr
   12c30:	b	122ac <__gmon_start__@plt>
   12c34:	ldrdeq	r4, [r4], -r8
   12c38:	andeq	r0, r0, r0, lsl #5
   12c3c:	ldr	r3, [pc, #28]	; 12c60 <__assert_fail@plt+0x66c>
   12c40:	ldr	r0, [pc, #28]	; 12c64 <__assert_fail@plt+0x670>
   12c44:	sub	r3, r3, r0
   12c48:	cmp	r3, #6
   12c4c:	bxls	lr
   12c50:	ldr	r3, [pc, #16]	; 12c68 <__assert_fail@plt+0x674>
   12c54:	cmp	r3, #0
   12c58:	bxeq	lr
   12c5c:	bx	r3
   12c60:	andeq	r7, r5, fp, lsr r5
   12c64:	andeq	r7, r5, r8, lsr r5
   12c68:	andeq	r0, r0, r0
   12c6c:	ldr	r1, [pc, #36]	; 12c98 <__assert_fail@plt+0x6a4>
   12c70:	ldr	r0, [pc, #36]	; 12c9c <__assert_fail@plt+0x6a8>
   12c74:	sub	r1, r1, r0
   12c78:	asr	r1, r1, #2
   12c7c:	add	r1, r1, r1, lsr #31
   12c80:	asrs	r1, r1, #1
   12c84:	bxeq	lr
   12c88:	ldr	r3, [pc, #16]	; 12ca0 <__assert_fail@plt+0x6ac>
   12c8c:	cmp	r3, #0
   12c90:	bxeq	lr
   12c94:	bx	r3
   12c98:	andeq	r7, r5, r8, lsr r5
   12c9c:	andeq	r7, r5, r8, lsr r5
   12ca0:	andeq	r0, r0, r0
   12ca4:	push	{r4, lr}
   12ca8:	ldr	r4, [pc, #24]	; 12cc8 <__assert_fail@plt+0x6d4>
   12cac:	ldrb	r3, [r4]
   12cb0:	cmp	r3, #0
   12cb4:	popne	{r4, pc}
   12cb8:	bl	12c3c <__assert_fail@plt+0x648>
   12cbc:	mov	r3, #1
   12cc0:	strb	r3, [r4]
   12cc4:	pop	{r4, pc}
   12cc8:	andeq	r7, r5, r8, asr r5
   12ccc:	ldr	r0, [pc, #40]	; 12cfc <__assert_fail@plt+0x708>
   12cd0:	ldr	r3, [r0]
   12cd4:	cmp	r3, #0
   12cd8:	bne	12ce0 <__assert_fail@plt+0x6ec>
   12cdc:	b	12c6c <__assert_fail@plt+0x678>
   12ce0:	ldr	r3, [pc, #24]	; 12d00 <__assert_fail@plt+0x70c>
   12ce4:	cmp	r3, #0
   12ce8:	beq	12cdc <__assert_fail@plt+0x6e8>
   12cec:	push	{r4, lr}
   12cf0:	blx	r3
   12cf4:	pop	{r4, lr}
   12cf8:	b	12c6c <__assert_fail@plt+0x678>
   12cfc:	andeq	r6, r5, r4, lsl #30
   12d00:	andeq	r0, r0, r0
   12d04:	ldr	r3, [pc, #52]	; 12d40 <__assert_fail@plt+0x74c>
   12d08:	push	{lr}		; (str lr, [sp, #-4]!)
   12d0c:	sub	sp, sp, #108	; 0x6c
   12d10:	mov	r1, sp
   12d14:	ldr	r3, [r3, #52]	; 0x34
   12d18:	blx	r3
   12d1c:	cmp	r0, #0
   12d20:	beq	12d38 <__assert_fail@plt+0x744>
   12d24:	bl	12348 <__errno_location@plt>
   12d28:	ldr	r0, [r0]
   12d2c:	sub	r0, r0, #40	; 0x28
   12d30:	clz	r0, r0
   12d34:	lsr	r0, r0, #5
   12d38:	add	sp, sp, #108	; 0x6c
   12d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d40:	andeq	r7, r5, ip, ror #28
   12d44:	push	{r4, lr}
   12d48:	ldr	r4, [pc, #88]	; 12da8 <__assert_fail@plt+0x7b4>
   12d4c:	ldr	r2, [r4]
   12d50:	tst	r2, #512	; 0x200
   12d54:	popeq	{r4, pc}
   12d58:	cmn	r0, #100	; 0x64
   12d5c:	cmpne	r0, #0
   12d60:	blt	12d94 <__assert_fail@plt+0x7a0>
   12d64:	ldr	r1, [r4, #4]
   12d68:	ldr	r2, [pc, #60]	; 12dac <__assert_fail@plt+0x7b8>
   12d6c:	cmp	r1, #0
   12d70:	str	r0, [r2, #16]
   12d74:	popge	{r4, pc}
   12d78:	cmn	r0, #100	; 0x64
   12d7c:	beq	12d8c <__assert_fail@plt+0x798>
   12d80:	bl	21120 <__assert_fail@plt+0xeb2c>
   12d84:	str	r0, [r4, #4]
   12d88:	pop	{r4, pc}
   12d8c:	str	r0, [r4, #4]
   12d90:	pop	{r4, pc}
   12d94:	ldr	r3, [pc, #20]	; 12db0 <__assert_fail@plt+0x7bc>
   12d98:	mov	r2, #107	; 0x6b
   12d9c:	ldr	r1, [pc, #16]	; 12db4 <__assert_fail@plt+0x7c0>
   12da0:	ldr	r0, [pc, #16]	; 12db8 <__assert_fail@plt+0x7c4>
   12da4:	bl	125f4 <__assert_fail@plt>
   12da8:	andeq	r7, r5, ip, lsl #5
   12dac:	andeq	r7, r5, r0, asr #28
   12db0:	andeq	r0, r4, r8, asr #5
   12db4:	andeq	r0, r4, r0, lsl #6
   12db8:	andeq	r0, r4, ip, lsl #6
   12dbc:	push	{r4, lr}
   12dc0:	ldr	r4, [pc, #24]	; 12de0 <__assert_fail@plt+0x7ec>
   12dc4:	ldr	r0, [r4, #4]
   12dc8:	cmp	r0, #0
   12dcc:	poplt	{r4, pc}
   12dd0:	bl	125ac <close@plt>
   12dd4:	mvn	r3, #0
   12dd8:	str	r3, [r4, #4]
   12ddc:	pop	{r4, pc}
   12de0:	andeq	r7, r5, ip, lsl #5
   12de4:	sub	r3, r0, #1
   12de8:	cmp	r3, #13
   12dec:	ldrls	pc, [pc, r3, lsl #2]
   12df0:	b	12e9c <__assert_fail@plt+0x8a8>
   12df4:	andeq	r2, r1, ip, lsr #28
   12df8:	andeq	r2, r1, r4, lsr lr
   12dfc:	andeq	r2, r1, ip, lsr lr
   12e00:	andeq	r2, r1, r4, asr #28
   12e04:	andeq	r2, r1, ip, asr #28
   12e08:	andeq	r2, r1, r4, asr lr
   12e0c:	andeq	r2, r1, ip, asr lr
   12e10:	andeq	r2, r1, r4, ror #28
   12e14:	andeq	r2, r1, ip, ror #28
   12e18:	andeq	r2, r1, r4, ror lr
   12e1c:	andeq	r2, r1, ip, ror lr
   12e20:	andeq	r2, r1, r4, lsl #29
   12e24:	andeq	r2, r1, ip, lsl #29
   12e28:	muleq	r1, r4, lr
   12e2c:	ldr	r0, [pc, #132]	; 12eb8 <__assert_fail@plt+0x8c4>
   12e30:	bx	lr
   12e34:	ldr	r0, [pc, #128]	; 12ebc <__assert_fail@plt+0x8c8>
   12e38:	bx	lr
   12e3c:	ldr	r0, [pc, #124]	; 12ec0 <__assert_fail@plt+0x8cc>
   12e40:	bx	lr
   12e44:	ldr	r0, [pc, #120]	; 12ec4 <__assert_fail@plt+0x8d0>
   12e48:	bx	lr
   12e4c:	ldr	r0, [pc, #116]	; 12ec8 <__assert_fail@plt+0x8d4>
   12e50:	bx	lr
   12e54:	ldr	r0, [pc, #112]	; 12ecc <__assert_fail@plt+0x8d8>
   12e58:	bx	lr
   12e5c:	ldr	r0, [pc, #108]	; 12ed0 <__assert_fail@plt+0x8dc>
   12e60:	bx	lr
   12e64:	ldr	r0, [pc, #104]	; 12ed4 <__assert_fail@plt+0x8e0>
   12e68:	bx	lr
   12e6c:	ldr	r0, [pc, #100]	; 12ed8 <__assert_fail@plt+0x8e4>
   12e70:	bx	lr
   12e74:	ldr	r0, [pc, #96]	; 12edc <__assert_fail@plt+0x8e8>
   12e78:	bx	lr
   12e7c:	ldr	r0, [pc, #92]	; 12ee0 <__assert_fail@plt+0x8ec>
   12e80:	bx	lr
   12e84:	ldr	r0, [pc, #88]	; 12ee4 <__assert_fail@plt+0x8f0>
   12e88:	bx	lr
   12e8c:	ldr	r0, [pc, #84]	; 12ee8 <__assert_fail@plt+0x8f4>
   12e90:	bx	lr
   12e94:	ldr	r0, [pc, #80]	; 12eec <__assert_fail@plt+0x8f8>
   12e98:	bx	lr
   12e9c:	mov	r2, r0
   12ea0:	push	{r4, lr}
   12ea4:	ldr	r1, [pc, #68]	; 12ef0 <__assert_fail@plt+0x8fc>
   12ea8:	ldr	r0, [pc, #68]	; 12ef4 <__assert_fail@plt+0x900>
   12eac:	bl	124b0 <sprintf@plt>
   12eb0:	ldr	r0, [pc, #60]	; 12ef4 <__assert_fail@plt+0x900>
   12eb4:	pop	{r4, pc}
   12eb8:	andeq	r0, r4, r0, lsr r3
   12ebc:	andeq	r0, r4, r8, lsr r3
   12ec0:	andeq	r0, r4, r0, asr #6
   12ec4:	andeq	r0, r4, ip, asr #6
   12ec8:	andeq	r0, r4, r4, asr r3
   12ecc:	andeq	r0, r4, ip, asr r3
   12ed0:	andeq	r0, r4, r4, ror #6
   12ed4:	andeq	r0, r4, ip, ror #6
   12ed8:	andeq	r0, r4, r4, ror r3
   12edc:	andeq	r0, r4, r0, lsl #7
   12ee0:	andeq	r0, r4, r8, lsl #7
   12ee4:	muleq	r4, r4, r3
   12ee8:	muleq	r4, ip, r3
   12eec:	andeq	r0, r4, r8, lsr #7
   12ef0:			; <UNDEFINED> instruction: 0x000403b0
   12ef4:	andeq	r7, r5, ip, asr r5
   12ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12efc:	sub	sp, sp, #164	; 0xa4
   12f00:	mov	r4, r0
   12f04:	str	r0, [sp, #36]	; 0x24
   12f08:	bl	12300 <strlen@plt>
   12f0c:	ldr	r5, [pc, #1840]	; 13644 <__assert_fail@plt+0x1050>
   12f10:	ldr	r6, [pc, #1840]	; 13648 <__assert_fail@plt+0x1054>
   12f14:	ldr	fp, [pc, #1840]	; 1364c <__assert_fail@plt+0x1058>
   12f18:	str	r0, [r5, #20]
   12f1c:	mvn	r0, #99	; 0x63
   12f20:	bl	12d44 <__assert_fail@plt+0x750>
   12f24:	ldr	r3, [r6, #48]	; 0x30
   12f28:	mov	r2, #0
   12f2c:	cmp	r3, #1
   12f30:	str	r4, [sp, #48]	; 0x30
   12f34:	str	r2, [sp, #52]	; 0x34
   12f38:	ldr	r1, [fp]
   12f3c:	beq	13594 <__assert_fail@plt+0xfa0>
   12f40:	bcc	13588 <__assert_fail@plt+0xf94>
   12f44:	cmp	r3, #2
   12f48:	orreq	r1, r1, #17
   12f4c:	streq	r1, [fp]
   12f50:	ldrb	r3, [r6, #13]
   12f54:	mov	r2, #0
   12f58:	add	r0, sp, #48	; 0x30
   12f5c:	cmp	r3, #0
   12f60:	orrne	r1, r1, #64	; 0x40
   12f64:	strne	r1, [fp]
   12f68:	bl	2f03c <__assert_fail@plt+0x1ca48>
   12f6c:	subs	sl, r0, #0
   12f70:	beq	135d4 <__assert_fail@plt+0xfe0>
   12f74:	bl	12348 <__errno_location@plt>
   12f78:	mov	r8, #-2147483648	; 0x80000000
   12f7c:	mov	r3, fp
   12f80:	mov	fp, sl
   12f84:	mov	sl, r8
   12f88:	mov	r8, r3
   12f8c:	str	r0, [sp, #16]
   12f90:	ldr	r2, [sp, #16]
   12f94:	mov	r3, #0
   12f98:	mov	r0, fp
   12f9c:	str	r3, [r2]
   12fa0:	bl	2f534 <__assert_fail@plt+0x1cf40>
   12fa4:	subs	r4, r0, #0
   12fa8:	beq	13478 <__assert_fail@plt+0xe84>
   12fac:	ldrb	r3, [r5, #32]
   12fb0:	cmp	r3, #0
   12fb4:	beq	12fc8 <__assert_fail@plt+0x9d4>
   12fb8:	ldr	r3, [r4, #48]	; 0x30
   12fbc:	cmp	sl, r3
   12fc0:	beq	12fcc <__assert_fail@plt+0x9d8>
   12fc4:	bl	17ef0 <__assert_fail@plt+0x58fc>
   12fc8:	ldr	sl, [r4, #48]	; 0x30
   12fcc:	ldr	r3, [r4, #80]	; 0x50
   12fd0:	ldr	r2, [r6, #44]	; 0x2c
   12fd4:	str	r3, [r5, #8]
   12fd8:	adds	r3, r3, #0
   12fdc:	movne	r3, #1
   12fe0:	mov	r0, #0
   12fe4:	tst	r2, #4
   12fe8:	strb	r3, [r5, #5]
   12fec:	strb	r0, [r5, #40]	; 0x28
   12ff0:	strb	r0, [r5, #4]
   12ff4:	bne	13160 <__assert_fail@plt+0xb6c>
   12ff8:	ldrh	r3, [r4, #56]	; 0x38
   12ffc:	cmp	r3, #6
   13000:	beq	13024 <__assert_fail@plt+0xa30>
   13004:	ldr	r2, [r4, #48]	; 0x30
   13008:	ldr	r1, [r8, #8]
   1300c:	clz	r3, r2
   13010:	lsr	r3, r3, #5
   13014:	cmp	r2, r1
   13018:	orrgt	r3, r3, #1
   1301c:	cmp	r3, #0
   13020:	beq	13030 <__assert_fail@plt+0xa3c>
   13024:	ldr	r3, [r8]
   13028:	tst	r3, #512	; 0x200
   1302c:	bne	131ec <__assert_fail@plt+0xbf8>
   13030:	ldr	r0, [fp, #32]
   13034:	bl	12d44 <__assert_fail@plt+0x750>
   13038:	ldrh	r1, [r4, #56]	; 0x38
   1303c:	ldrd	r2, [r4, #160]	; 0xa0
   13040:	ldr	r0, [r4, #48]	; 0x30
   13044:	cmp	r1, #7
   13048:	strd	r2, [sp, #152]	; 0x98
   1304c:	str	r0, [r8, #8]
   13050:	beq	131f4 <__assert_fail@plt+0xc00>
   13054:	cmp	r1, #4
   13058:	beq	133b4 <__assert_fail@plt+0xdc0>
   1305c:	cmp	r1, #2
   13060:	beq	133e4 <__assert_fail@plt+0xdf0>
   13064:	cmp	r1, #13
   13068:	beq	134d0 <__assert_fail@plt+0xedc>
   1306c:	cmp	r1, #10
   13070:	beq	13204 <__assert_fail@plt+0xc10>
   13074:	sub	r3, r1, #10
   13078:	cmp	r3, #1
   1307c:	bls	1322c <__assert_fail@plt+0xc38>
   13080:	add	r3, sp, #56	; 0x38
   13084:	mov	ip, #1
   13088:	mov	r0, r3
   1308c:	mov	r2, #104	; 0x68
   13090:	add	r1, r4, #64	; 0x40
   13094:	strb	ip, [r5, #4]
   13098:	strb	ip, [r5, #5]
   1309c:	bl	12024 <memcpy@plt>
   130a0:	ldr	r7, [sp, #72]	; 0x48
   130a4:	cmp	r7, #0
   130a8:	str	r7, [sp, #44]	; 0x2c
   130ac:	str	r7, [r5, #8]
   130b0:	mov	r3, r0
   130b4:	beq	1335c <__assert_fail@plt+0xd68>
   130b8:	ldr	r2, [r4, #48]	; 0x30
   130bc:	str	r2, [r5]
   130c0:	mov	r2, #0
   130c4:	ldr	r1, [r4, #28]
   130c8:	add	r0, sp, #44	; 0x2c
   130cc:	str	r2, [sp]
   130d0:	add	r2, r4, #168	; 0xa8
   130d4:	bl	183cc <__assert_fail@plt+0x5dd8>
   130d8:	cmp	r0, #0
   130dc:	beq	12f90 <__assert_fail@plt+0x99c>
   130e0:	ldr	r3, [sp, #44]	; 0x2c
   130e4:	and	r3, r3, #61440	; 0xf000
   130e8:	cmp	r3, #16384	; 0x4000
   130ec:	ldrheq	r1, [r4, #56]	; 0x38
   130f0:	bne	133ac <__assert_fail@plt+0xdb8>
   130f4:	cmp	r1, #11
   130f8:	movne	r9, #1
   130fc:	beq	1327c <__assert_fail@plt+0xc88>
   13100:	ldr	r3, [r6, #4]
   13104:	cmp	r3, #0
   13108:	blt	13118 <__assert_fail@plt+0xb24>
   1310c:	ldr	r2, [r4, #48]	; 0x30
   13110:	cmp	r3, r2
   13114:	ble	134a4 <__assert_fail@plt+0xeb0>
   13118:	mov	r7, #0
   1311c:	cmp	r1, #1
   13120:	beq	13348 <__assert_fail@plt+0xd54>
   13124:	cmp	r1, #6
   13128:	beq	133d4 <__assert_fail@plt+0xde0>
   1312c:	ldr	r2, [r4, #48]	; 0x30
   13130:	ldr	r3, [r6, #8]
   13134:	cmp	r2, r3
   13138:	movlt	r7, #1
   1313c:	ldr	r3, [r6, #44]	; 0x2c
   13140:	tst	r3, #4
   13144:	bne	132ec <__assert_fail@plt+0xcf8>
   13148:	cmp	r7, #0
   1314c:	beq	13290 <__assert_fail@plt+0xc9c>
   13150:	cmp	r1, #6
   13154:	moveq	r3, #0
   13158:	strbeq	r3, [r5, #24]
   1315c:	b	12f90 <__assert_fail@plt+0x99c>
   13160:	ldr	r3, [pc, #1256]	; 13650 <__assert_fail@plt+0x105c>
   13164:	ldr	r2, [r4, #28]
   13168:	ldr	r1, [r6, #72]	; 0x48
   1316c:	ldr	r7, [r3]
   13170:	bl	2b208 <__assert_fail@plt+0x18c14>
   13174:	str	r0, [sp, #20]
   13178:	ldrh	r0, [r4, #56]	; 0x38
   1317c:	bl	12de4 <__assert_fail@plt+0x7f0>
   13180:	ldr	r3, [r4, #48]	; 0x30
   13184:	ldr	ip, [r8, #8]
   13188:	ldr	r2, [r4, #28]
   1318c:	ldr	r1, [r6, #72]	; 0x48
   13190:	str	r3, [sp, #24]
   13194:	str	ip, [sp, #28]
   13198:	mov	r9, r0
   1319c:	mov	r0, #1
   131a0:	bl	2b208 <__assert_fail@plt+0x18c14>
   131a4:	ldr	r2, [r4, #24]
   131a8:	ldr	r1, [r6, #72]	; 0x48
   131ac:	str	r0, [sp, #32]
   131b0:	mov	r0, #2
   131b4:	bl	2b208 <__assert_fail@plt+0x18c14>
   131b8:	ldr	r3, [sp, #32]
   131bc:	ldr	ip, [sp, #28]
   131c0:	str	r3, [sp, #8]
   131c4:	ldr	r3, [sp, #24]
   131c8:	str	ip, [sp, #4]
   131cc:	str	r3, [sp]
   131d0:	ldr	r2, [sp, #20]
   131d4:	mov	r3, r9
   131d8:	ldr	r1, [pc, #1140]	; 13654 <__assert_fail@plt+0x1060>
   131dc:	str	r0, [sp, #12]
   131e0:	mov	r0, r7
   131e4:	bl	1233c <fprintf@plt>
   131e8:	b	12ff8 <__assert_fail@plt+0xa04>
   131ec:	bl	12dbc <__assert_fail@plt+0x7c8>
   131f0:	b	13030 <__assert_fail@plt+0xa3c>
   131f4:	ldr	r1, [r4, #28]
   131f8:	ldr	r0, [r4, #32]
   131fc:	bl	18c8c <__assert_fail@plt+0x6698>
   13200:	b	12f90 <__assert_fail@plt+0x99c>
   13204:	cmp	r0, #0
   13208:	beq	131f4 <__assert_fail@plt+0xc00>
   1320c:	ldr	r0, [r4, #24]
   13210:	bl	12d04 <__assert_fail@plt+0x710>
   13214:	ldr	r1, [r4, #28]
   13218:	cmp	r0, #0
   1321c:	beq	134f0 <__assert_fail@plt+0xefc>
   13220:	mov	r0, #40	; 0x28
   13224:	bl	18c8c <__assert_fail@plt+0x6698>
   13228:	b	12f90 <__assert_fail@plt+0x99c>
   1322c:	ldrb	r3, [r5, #4]
   13230:	cmp	r3, #0
   13234:	bne	1361c <__assert_fail@plt+0x1028>
   13238:	cmp	r1, #11
   1323c:	beq	1354c <__assert_fail@plt+0xf58>
   13240:	ldr	r2, [r5, #8]
   13244:	cmp	r2, #0
   13248:	bne	13630 <__assert_fail@plt+0x103c>
   1324c:	ldr	r3, [r4, #48]	; 0x30
   13250:	str	r2, [sp, #44]	; 0x2c
   13254:	str	r3, [r5]
   13258:	sub	r9, r1, #1
   1325c:	cmp	r1, #6
   13260:	cmpne	r9, #1
   13264:	movls	r9, #1
   13268:	movhi	r9, #0
   1326c:	bhi	13100 <__assert_fail@plt+0xb0c>
   13270:	cmp	r1, #11
   13274:	movne	r9, #1
   13278:	bne	13100 <__assert_fail@plt+0xb0c>
   1327c:	mov	r1, r4
   13280:	mov	r2, #1
   13284:	mov	r0, fp
   13288:	bl	2fbec <__assert_fail@plt+0x1d5f8>
   1328c:	b	12f90 <__assert_fail@plt+0x99c>
   13290:	sub	r1, r1, #10
   13294:	cmp	r1, #1
   13298:	ldr	r3, [fp, #32]
   1329c:	ldr	r2, [r4, #24]
   132a0:	movls	r1, #0
   132a4:	movhi	r1, #1
   132a8:	str	r3, [r5, #16]
   132ac:	strb	r1, [r5, #4]
   132b0:	str	r2, [r5, #12]
   132b4:	bl	15fc0 <__assert_fail@plt+0x39cc>
   132b8:	add	r1, sp, #56	; 0x38
   132bc:	mov	r2, r0
   132c0:	ldr	r0, [r4, #28]
   132c4:	bl	18b58 <__assert_fail@plt+0x6564>
   132c8:	ldrb	r3, [r5, #24]
   132cc:	cmp	r3, #0
   132d0:	beq	132e4 <__assert_fail@plt+0xcf0>
   132d4:	mov	r2, #4
   132d8:	mov	r1, r4
   132dc:	mov	r0, fp
   132e0:	bl	2fbec <__assert_fail@plt+0x1d5f8>
   132e4:	ldrh	r1, [r4, #56]	; 0x38
   132e8:	b	13150 <__assert_fail@plt+0xb5c>
   132ec:	ldr	r3, [pc, #860]	; 13650 <__assert_fail@plt+0x105c>
   132f0:	ldr	r2, [r4, #28]
   132f4:	ldr	r1, [r6, #72]	; 0x48
   132f8:	ldr	r3, [r3]
   132fc:	mov	r0, #0
   13300:	str	r3, [sp, #20]
   13304:	bl	2b208 <__assert_fail@plt+0x18c14>
   13308:	str	r0, [sp, #24]
   1330c:	ldrh	r0, [r4, #56]	; 0x38
   13310:	bl	12de4 <__assert_fail@plt+0x7f0>
   13314:	ldrb	r1, [r5, #5]
   13318:	ldrb	r3, [r5, #4]
   1331c:	ldr	r2, [sp, #24]
   13320:	str	r1, [sp, #12]
   13324:	str	r3, [sp, #8]
   13328:	ldr	r1, [pc, #808]	; 13658 <__assert_fail@plt+0x1064>
   1332c:	str	r7, [sp, #4]
   13330:	str	r9, [sp]
   13334:	mov	r3, r0
   13338:	ldr	r0, [sp, #20]
   1333c:	bl	1233c <fprintf@plt>
   13340:	ldrh	r1, [r4, #56]	; 0x38
   13344:	b	13148 <__assert_fail@plt+0xb54>
   13348:	ldrb	r3, [r6]
   1334c:	cmp	r3, #0
   13350:	bne	1312c <__assert_fail@plt+0xb38>
   13354:	mov	r7, #1
   13358:	b	1313c <__assert_fail@plt+0xb48>
   1335c:	mov	r2, #5
   13360:	ldr	r1, [pc, #756]	; 1365c <__assert_fail@plt+0x1068>
   13364:	mov	r0, r7
   13368:	bl	120b4 <dcgettext@plt>
   1336c:	ldr	r2, [r4, #28]
   13370:	ldr	r1, [r6, #72]	; 0x48
   13374:	mov	r9, r0
   13378:	mov	r0, r7
   1337c:	bl	2b208 <__assert_fail@plt+0x18c14>
   13380:	mov	r2, r9
   13384:	mov	r1, r7
   13388:	mov	r3, r0
   1338c:	mov	r0, r7
   13390:	bl	121ec <error@plt>
   13394:	ldr	r3, [sp, #44]	; 0x2c
   13398:	ldr	r2, [r4, #48]	; 0x30
   1339c:	cmp	r3, #0
   133a0:	str	r2, [r5]
   133a4:	addne	r3, sp, #56	; 0x38
   133a8:	bne	130c0 <__assert_fail@plt+0xacc>
   133ac:	ldrh	r1, [r4, #56]	; 0x38
   133b0:	b	13258 <__assert_fail@plt+0xc64>
   133b4:	ldr	r1, [r4, #28]
   133b8:	ldr	r0, [r4, #32]
   133bc:	bl	18c8c <__assert_fail@plt+0x6698>
   133c0:	ldrb	r3, [r6]
   133c4:	cmp	r3, #0
   133c8:	bne	12f90 <__assert_fail@plt+0x99c>
   133cc:	ldrh	r1, [r4, #56]	; 0x38
   133d0:	b	13074 <__assert_fail@plt+0xa80>
   133d4:	ldrb	r3, [r6]
   133d8:	cmp	r3, #0
   133dc:	bne	13354 <__assert_fail@plt+0xd60>
   133e0:	b	1312c <__assert_fail@plt+0xb38>
   133e4:	ldr	r3, [r4, #80]	; 0x50
   133e8:	mov	r2, #5
   133ec:	and	r3, r3, #61440	; 0xf000
   133f0:	cmp	r3, #40960	; 0xa000
   133f4:	beq	135a0 <__assert_fail@plt+0xfac>
   133f8:	ldr	r1, [pc, #608]	; 13660 <__assert_fail@plt+0x106c>
   133fc:	mov	r0, #0
   13400:	bl	120b4 <dcgettext@plt>
   13404:	ldr	r1, [r4, #28]
   13408:	mov	r9, r0
   1340c:	mov	r0, #0
   13410:	bl	18c78 <__assert_fail@plt+0x6684>
   13414:	ldr	r3, [r4]
   13418:	ldr	r1, [r6, #72]	; 0x48
   1341c:	ldr	r4, [r3, #40]	; 0x28
   13420:	cmp	r4, #0
   13424:	str	r0, [sp, #20]
   13428:	beq	134fc <__assert_fail@plt+0xf08>
   1342c:	ldr	r7, [r3, #28]
   13430:	mov	r3, #0
   13434:	mov	r0, #1
   13438:	ldrb	r2, [r7, r4]
   1343c:	strb	r3, [r7, r4]
   13440:	str	r2, [sp, #24]
   13444:	mov	r2, r7
   13448:	bl	2b208 <__assert_fail@plt+0x18c14>
   1344c:	ldrb	r3, [sp, #24]
   13450:	strb	r3, [r7, r4]
   13454:	mov	r1, #0
   13458:	str	r0, [sp]
   1345c:	ldr	r3, [sp, #20]
   13460:	mov	r2, r9
   13464:	mov	r0, r1
   13468:	bl	121ec <error@plt>
   1346c:	mov	r3, #1
   13470:	str	r3, [r5, #28]
   13474:	b	12f90 <__assert_fail@plt+0x99c>
   13478:	ldr	r3, [sp, #16]
   1347c:	ldr	r6, [r3]
   13480:	cmp	r6, #0
   13484:	bne	13558 <__assert_fail@plt+0xf64>
   13488:	mov	r0, fp
   1348c:	bl	2f3d4 <__assert_fail@plt+0x1cde0>
   13490:	cmp	r0, #0
   13494:	moveq	r0, #1
   13498:	bne	1350c <__assert_fail@plt+0xf18>
   1349c:	add	sp, sp, #164	; 0xa4
   134a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a4:	mov	r1, r4
   134a8:	mov	r2, #4
   134ac:	mov	r0, fp
   134b0:	bl	2fbec <__assert_fail@plt+0x1d5f8>
   134b4:	ldr	r7, [r4, #48]	; 0x30
   134b8:	ldr	r3, [r6, #4]
   134bc:	ldrh	r1, [r4, #56]	; 0x38
   134c0:	cmp	r7, r3
   134c4:	movle	r7, #0
   134c8:	movgt	r7, #1
   134cc:	b	1311c <__assert_fail@plt+0xb28>
   134d0:	ldr	r0, [r4, #24]
   134d4:	bl	12d04 <__assert_fail@plt+0x710>
   134d8:	cmp	r0, #0
   134dc:	beq	133cc <__assert_fail@plt+0xdd8>
   134e0:	ldr	r1, [r4, #28]
   134e4:	mov	r0, #40	; 0x28
   134e8:	bl	18c8c <__assert_fail@plt+0x6698>
   134ec:	b	12f90 <__assert_fail@plt+0x99c>
   134f0:	ldr	r0, [r4, #32]
   134f4:	bl	18c8c <__assert_fail@plt+0x6698>
   134f8:	b	133cc <__assert_fail@plt+0xdd8>
   134fc:	ldr	r2, [pc, #352]	; 13664 <__assert_fail@plt+0x1070>
   13500:	mov	r0, #1
   13504:	bl	2b208 <__assert_fail@plt+0x18c14>
   13508:	b	13454 <__assert_fail@plt+0xe60>
   1350c:	ldr	r3, [sp, #16]
   13510:	mov	r2, #5
   13514:	ldr	r1, [pc, #332]	; 13668 <__assert_fail@plt+0x1074>
   13518:	mov	r0, r6
   1351c:	ldr	r4, [r3]
   13520:	bl	120b4 <dcgettext@plt>
   13524:	ldr	r3, [sp, #36]	; 0x24
   13528:	mov	r1, r4
   1352c:	mov	r2, r0
   13530:	mov	r0, r6
   13534:	bl	121ec <error@plt>
   13538:	mov	r3, #1
   1353c:	mov	r0, r6
   13540:	str	r3, [r5, #28]
   13544:	add	sp, sp, #164	; 0xa4
   13548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1354c:	ldr	r3, [r5, #8]
   13550:	str	r3, [sp, #44]	; 0x2c
   13554:	b	13398 <__assert_fail@plt+0xda4>
   13558:	ldr	r1, [sp, #36]	; 0x24
   1355c:	bl	18c78 <__assert_fail@plt+0x6684>
   13560:	mov	r1, r6
   13564:	ldr	r2, [pc, #256]	; 1366c <__assert_fail@plt+0x1078>
   13568:	mov	r3, r0
   1356c:	mov	r0, r4
   13570:	bl	121ec <error@plt>
   13574:	mov	r3, #1
   13578:	mov	r0, r4
   1357c:	str	r3, [r5, #28]
   13580:	add	sp, sp, #164	; 0xa4
   13584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13588:	orr	r1, r1, #16
   1358c:	str	r1, [fp]
   13590:	b	12f50 <__assert_fail@plt+0x95c>
   13594:	orr	r1, r1, #3
   13598:	str	r1, [fp]
   1359c:	b	12f50 <__assert_fail@plt+0x95c>
   135a0:	ldr	r1, [pc, #200]	; 13670 <__assert_fail@plt+0x107c>
   135a4:	mov	r0, #0
   135a8:	bl	120b4 <dcgettext@plt>
   135ac:	ldr	r1, [r4, #28]
   135b0:	mov	r7, r0
   135b4:	mov	r0, #0
   135b8:	bl	18c78 <__assert_fail@plt+0x6684>
   135bc:	mov	r1, #0
   135c0:	mov	r2, r7
   135c4:	mov	r3, r0
   135c8:	mov	r0, r1
   135cc:	bl	121ec <error@plt>
   135d0:	b	1346c <__assert_fail@plt+0xe78>
   135d4:	bl	12348 <__errno_location@plt>
   135d8:	mov	r2, #5
   135dc:	ldr	r1, [pc, #144]	; 13674 <__assert_fail@plt+0x1080>
   135e0:	ldr	r4, [r0]
   135e4:	mov	r0, sl
   135e8:	bl	120b4 <dcgettext@plt>
   135ec:	ldr	r1, [sp, #36]	; 0x24
   135f0:	mov	r6, r0
   135f4:	mov	r0, sl
   135f8:	bl	18c78 <__assert_fail@plt+0x6684>
   135fc:	mov	r2, r6
   13600:	mov	r1, r4
   13604:	mov	r3, r0
   13608:	mov	r0, sl
   1360c:	bl	121ec <error@plt>
   13610:	mov	r0, #1
   13614:	str	r0, [r5, #28]
   13618:	b	1349c <__assert_fail@plt+0xea8>
   1361c:	ldr	r3, [pc, #84]	; 13678 <__assert_fail@plt+0x1084>
   13620:	mov	r2, #380	; 0x17c
   13624:	ldr	r1, [pc, #80]	; 1367c <__assert_fail@plt+0x1088>
   13628:	ldr	r0, [pc, #80]	; 13680 <__assert_fail@plt+0x108c>
   1362c:	bl	125f4 <__assert_fail@plt>
   13630:	ldr	r3, [pc, #64]	; 13678 <__assert_fail@plt+0x1084>
   13634:	ldr	r2, [pc, #72]	; 13684 <__assert_fail@plt+0x1090>
   13638:	ldr	r1, [pc, #60]	; 1367c <__assert_fail@plt+0x1088>
   1363c:	ldr	r0, [pc, #68]	; 13688 <__assert_fail@plt+0x1094>
   13640:	bl	125f4 <__assert_fail@plt>
   13644:	andeq	r7, r5, r0, asr #28
   13648:	andeq	r7, r5, ip, ror #28
   1364c:	andeq	r7, r5, ip, lsl #5
   13650:	andeq	r7, r5, r8, asr #10
   13654:	andeq	r0, r4, ip, asr #7
   13658:	andeq	r0, r4, ip, ror #10
   1365c:	andeq	r0, r4, r0, asr #10
   13660:			; <UNDEFINED> instruction: 0x000404b0
   13664:	andeq	r2, r4, r0, asr r0
   13668:	andeq	r0, r4, r4, lsl #12
   1366c:	andeq	r0, r4, r8, asr #11
   13670:	andeq	r0, r4, r4, lsr r4
   13674:			; <UNDEFINED> instruction: 0x000403b8
   13678:	ldrdeq	r0, [r4], -r4
   1367c:	andeq	r0, r4, r0, lsl #6
   13680:	strdeq	r0, [r4], -ip
   13684:	andeq	r0, r0, sp, ror r1
   13688:	andeq	r0, r4, r0, lsl r5
   1368c:	ldr	r3, [pc, #12]	; 136a0 <__assert_fail@plt+0x10ac>
   13690:	ldr	r3, [r3]
   13694:	str	r3, [r0]
   13698:	mov	r0, #1
   1369c:	bx	lr
   136a0:	andeq	r7, r5, ip, lsl #5
   136a4:	andeq	r0, r0, r0
   136a8:	push	{r4, r5, lr}
   136ac:	sub	sp, sp, #20
   136b0:	add	lr, sp, #16
   136b4:	stm	sp, {r2, r3}
   136b8:	stmdb	lr, {r0, r1}
   136bc:	ldr	r0, [sp, #8]
   136c0:	ldr	r4, [sp, #12]
   136c4:	cmp	r0, r2
   136c8:	cmpeq	r3, r4
   136cc:	moveq	r0, #0
   136d0:	beq	13704 <__assert_fail@plt+0x1110>
   136d4:	mov	r1, r2
   136d8:	mov	r5, r3
   136dc:	bl	123cc <difftime@plt>
   136e0:	sub	r4, r4, r5
   136e4:	vldr	d6, [pc, #36]	; 13710 <__assert_fail@plt+0x111c>
   136e8:	vmov	s15, r4
   136ec:	vcvt.f64.s32	d7, s15
   136f0:	vmla.f64	d0, d7, d6
   136f4:	vcmpe.f64	d0, #0.0
   136f8:	vmrs	APSR_nzcv, fpscr
   136fc:	mvnmi	r0, #0
   13700:	movpl	r0, #1
   13704:	add	sp, sp, #20
   13708:	pop	{r4, r5, pc}
   1370c:	nop			; (mov r0, r0)
   13710:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13714:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13718:	push	{r4, r5, lr}
   1371c:	mov	r4, r2
   13720:	sub	sp, sp, #12
   13724:	ldr	ip, [r4, #44]	; 0x2c
   13728:	stm	sp, {r0, r1}
   1372c:	cmp	ip, #1
   13730:	beq	137d4 <__assert_fail@plt+0x11e0>
   13734:	bcc	137b0 <__assert_fail@plt+0x11bc>
   13738:	cmp	ip, #2
   1373c:	bne	1379c <__assert_fail@plt+0x11a8>
   13740:	ldr	r0, [sp]
   13744:	ldr	r1, [r4, #48]	; 0x30
   13748:	mov	r5, r3
   1374c:	bl	123cc <difftime@plt>
   13750:	ldr	r3, [sp, #4]
   13754:	ldr	r2, [r4, #52]	; 0x34
   13758:	vldr	d6, [pc, #144]	; 137f0 <__assert_fail@plt+0x11fc>
   1375c:	sub	r3, r3, r2
   13760:	vmov	s15, r3
   13764:	vcvt.f64.s32	d7, s15
   13768:	vmla.f64	d0, d7, d6
   1376c:	vcmpe.f64	d0, #0.0
   13770:	vmrs	APSR_nzcv, fpscr
   13774:	movle	r0, #0
   13778:	ble	13794 <__assert_fail@plt+0x11a0>
   1377c:	vmov	s15, r5
   13780:	vcvt.f64.s32	d7, s15
   13784:	vcmpe.f64	d7, d0
   13788:	vmrs	APSR_nzcv, fpscr
   1378c:	movge	r0, #1
   13790:	movlt	r0, #0
   13794:	add	sp, sp, #12
   13798:	pop	{r4, r5, pc}
   1379c:	ldr	r3, [pc, #84]	; 137f8 <__assert_fail@plt+0x1204>
   137a0:	mov	r2, #138	; 0x8a
   137a4:	ldr	r1, [pc, #80]	; 137fc <__assert_fail@plt+0x1208>
   137a8:	ldr	r0, [pc, #80]	; 13800 <__assert_fail@plt+0x120c>
   137ac:	bl	125f4 <__assert_fail@plt>
   137b0:	add	r4, r4, #48	; 0x30
   137b4:	ldm	sp, {r0, r1}
   137b8:	ldm	r4, {r2, r3}
   137bc:	bl	136a8 <__assert_fail@plt+0x10b4>
   137c0:	cmp	r0, #0
   137c4:	movle	r0, #0
   137c8:	movgt	r0, #1
   137cc:	add	sp, sp, #12
   137d0:	pop	{r4, r5, pc}
   137d4:	add	r4, r4, #48	; 0x30
   137d8:	ldm	sp, {r0, r1}
   137dc:	ldm	r4, {r2, r3}
   137e0:	bl	136a8 <__assert_fail@plt+0x10b4>
   137e4:	lsr	r0, r0, #31
   137e8:	add	sp, sp, #12
   137ec:	pop	{r4, r5, pc}
   137f0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   137f4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   137f8:	andeq	r0, r4, r0, lsl #17
   137fc:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   13800:			; <UNDEFINED> instruction: 0x00044ab4
   13804:	push	{r4, lr}
   13808:	bl	17fb0 <__assert_fail@plt+0x59bc>
   1380c:	ldr	r3, [pc, #4]	; 13818 <__assert_fail@plt+0x1224>
   13810:	ldr	r0, [r3, #28]
   13814:	bl	122d0 <exit@plt>
   13818:	andeq	r7, r5, r0, asr #28
   1381c:	ldr	r3, [pc, #84]	; 13878 <__assert_fail@plt+0x1284>
   13820:	ldrb	r3, [r3]
   13824:	cmp	r3, #0
   13828:	beq	13858 <__assert_fail@plt+0x1264>
   1382c:	ldr	r2, [pc, #72]	; 1387c <__assert_fail@plt+0x1288>
   13830:	ldrb	r3, [r2, #4]
   13834:	cmp	r3, #0
   13838:	beq	13860 <__assert_fail@plt+0x126c>
   1383c:	cmp	r1, #0
   13840:	beq	13858 <__assert_fail@plt+0x1264>
   13844:	ldr	r3, [r1, #16]
   13848:	and	r3, r3, #61440	; 0xf000
   1384c:	cmp	r3, #16384	; 0x4000
   13850:	moveq	r3, #1
   13854:	strbeq	r3, [r2, #24]
   13858:	mov	r0, #1
   1385c:	bx	lr
   13860:	push	{r4, lr}
   13864:	ldr	r3, [pc, #20]	; 13880 <__assert_fail@plt+0x128c>
   13868:	ldr	r2, [pc, #20]	; 13884 <__assert_fail@plt+0x1290>
   1386c:	ldr	r1, [pc, #20]	; 13888 <__assert_fail@plt+0x1294>
   13870:	ldr	r0, [pc, #20]	; 1388c <__assert_fail@plt+0x1298>
   13874:	bl	125f4 <__assert_fail@plt>
   13878:	andeq	r7, r5, ip, ror #28
   1387c:	andeq	r7, r5, r0, asr #28
   13880:	muleq	r4, r0, r8
   13884:	andeq	r0, r0, r5, asr r3
   13888:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   1388c:	strdeq	r0, [r4], -r8
   13890:	push	{r4, r5, r6, lr}
   13894:	mov	r4, r2
   13898:	ldr	r2, [r2, #156]	; 0x9c
   1389c:	mov	r5, r0
   138a0:	cmp	r2, #0
   138a4:	mov	r6, r1
   138a8:	beq	138b8 <__assert_fail@plt+0x12c4>
   138ac:	bl	18b58 <__assert_fail@plt+0x6564>
   138b0:	cmp	r0, #0
   138b4:	beq	138cc <__assert_fail@plt+0x12d8>
   138b8:	ldr	r2, [r4, #160]	; 0xa0
   138bc:	mov	r1, r6
   138c0:	mov	r0, r5
   138c4:	pop	{r4, r5, r6, lr}
   138c8:	b	18b58 <__assert_fail@plt+0x6564>
   138cc:	pop	{r4, r5, r6, pc}
   138d0:	push	{r4, r5, r6, r7, r8, lr}
   138d4:	mov	r8, r0
   138d8:	ldr	r5, [pc, #104]	; 13948 <__assert_fail@plt+0x1354>
   138dc:	mov	r4, r1
   138e0:	mov	r7, r2
   138e4:	ldr	r0, [r5, #16]
   138e8:	ldr	r1, [r5, #12]
   138ec:	bl	20d8c <__assert_fail@plt+0xe798>
   138f0:	subs	r6, r0, #0
   138f4:	beq	13928 <__assert_fail@plt+0x1334>
   138f8:	cmp	r7, #0
   138fc:	ldr	r0, [r4]
   13900:	movne	r2, #16
   13904:	moveq	r2, #0
   13908:	mov	r1, r6
   1390c:	bl	12210 <fnmatch@plt>
   13910:	clz	r4, r0
   13914:	lsr	r4, r4, #5
   13918:	mov	r0, r6
   1391c:	bl	2db68 <__assert_fail@plt+0x1b574>
   13920:	mov	r0, r4
   13924:	pop	{r4, r5, r6, r7, r8, pc}
   13928:	bl	12348 <__errno_location@plt>
   1392c:	mov	r1, r8
   13930:	mov	r4, r6
   13934:	ldr	r0, [r0]
   13938:	bl	18c8c <__assert_fail@plt+0x6698>
   1393c:	mov	r3, #1
   13940:	str	r3, [r5, #28]
   13944:	b	13918 <__assert_fail@plt+0x1324>
   13948:	andeq	r7, r5, r0, asr #28
   1394c:	ldr	r3, [pc, #124]	; 139d0 <__assert_fail@plt+0x13dc>
   13950:	push	{r4, r5, r6, r7, r8, lr}
   13954:	mov	r6, r0
   13958:	ldr	r4, [pc, #116]	; 139d4 <__assert_fail@plt+0x13e0>
   1395c:	ldr	r0, [r3]
   13960:	mov	r7, r1
   13964:	bl	2db08 <__assert_fail@plt+0x1b514>
   13968:	mov	r2, #5
   1396c:	ldr	r1, [pc, #100]	; 139d8 <__assert_fail@plt+0x13e4>
   13970:	mov	r0, #0
   13974:	ldr	r5, [r4]
   13978:	bl	120b4 <dcgettext@plt>
   1397c:	mov	r3, r7
   13980:	mov	r2, r6
   13984:	mov	r1, r0
   13988:	mov	r0, r5
   1398c:	bl	1233c <fprintf@plt>
   13990:	cmp	r0, #0
   13994:	blt	139a8 <__assert_fail@plt+0x13b4>
   13998:	ldr	r0, [r4]
   1399c:	bl	2db08 <__assert_fail@plt+0x1b514>
   139a0:	pop	{r4, r5, r6, r7, r8, lr}
   139a4:	b	2d568 <__assert_fail@plt+0x1af74>
   139a8:	bl	12348 <__errno_location@plt>
   139ac:	mov	r2, #5
   139b0:	ldr	r1, [pc, #36]	; 139dc <__assert_fail@plt+0x13e8>
   139b4:	ldr	r4, [r0]
   139b8:	mov	r0, #0
   139bc:	bl	120b4 <dcgettext@plt>
   139c0:	mov	r1, r4
   139c4:	mov	r2, r0
   139c8:	mov	r0, #1
   139cc:	bl	121ec <error@plt>
   139d0:	andeq	r7, r5, r4, asr r5
   139d4:	andeq	r7, r5, r8, asr #10
   139d8:	andeq	r0, r4, r8, lsl #18
   139dc:	andeq	r0, r4, ip, lsl r9
   139e0:	push	{r4, r5, r6, lr}
   139e4:	mov	r4, r2
   139e8:	ldr	r2, [r2, #156]	; 0x9c
   139ec:	mov	r5, r0
   139f0:	cmp	r2, #0
   139f4:	mov	r6, r1
   139f8:	beq	13a08 <__assert_fail@plt+0x1414>
   139fc:	bl	18b58 <__assert_fail@plt+0x6564>
   13a00:	cmp	r0, #0
   13a04:	bne	13a1c <__assert_fail@plt+0x1428>
   13a08:	ldr	r2, [r4, #160]	; 0xa0
   13a0c:	mov	r1, r6
   13a10:	mov	r0, r5
   13a14:	pop	{r4, r5, r6, lr}
   13a18:	b	18b58 <__assert_fail@plt+0x6564>
   13a1c:	pop	{r4, r5, r6, pc}
   13a20:	add	r1, r1, #72	; 0x48
   13a24:	push	{lr}		; (str lr, [sp, #-4]!)
   13a28:	sub	sp, sp, #12
   13a2c:	ldm	r1, {r0, r1}
   13a30:	mov	r3, #60	; 0x3c
   13a34:	stm	sp, {r0, r1}
   13a38:	bl	13718 <__assert_fail@plt+0x1124>
   13a3c:	add	sp, sp, #12
   13a40:	pop	{pc}		; (ldr pc, [sp], #4)
   13a44:	push	{lr}		; (str lr, [sp, #-4]!)
   13a48:	sub	sp, sp, #12
   13a4c:	ldr	r3, [r2, #44]	; 0x2c
   13a50:	cmp	r3, #0
   13a54:	bne	13a84 <__assert_fail@plt+0x1490>
   13a58:	add	r1, r1, #72	; 0x48
   13a5c:	add	r2, r2, #48	; 0x30
   13a60:	ldm	r1, {r0, r1}
   13a64:	ldm	r2, {r2, r3}
   13a68:	stm	sp, {r0, r1}
   13a6c:	bl	136a8 <__assert_fail@plt+0x10b4>
   13a70:	cmp	r0, #0
   13a74:	movle	r0, #0
   13a78:	movgt	r0, #1
   13a7c:	add	sp, sp, #12
   13a80:	pop	{pc}		; (ldr pc, [sp], #4)
   13a84:	ldr	r3, [pc, #12]	; 13a98 <__assert_fail@plt+0x14a4>
   13a88:	mov	r2, #166	; 0xa6
   13a8c:	ldr	r1, [pc, #8]	; 13a9c <__assert_fail@plt+0x14a8>
   13a90:	ldr	r0, [pc, #8]	; 13aa0 <__assert_fail@plt+0x14ac>
   13a94:	bl	125f4 <__assert_fail@plt>
   13a98:	muleq	r4, ip, r8
   13a9c:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   13aa0:	andeq	r0, r4, ip, lsr r9
   13aa4:	add	r1, r1, #72	; 0x48
   13aa8:	push	{lr}		; (str lr, [sp, #-4]!)
   13aac:	sub	sp, sp, #12
   13ab0:	ldm	r1, {r0, r1}
   13ab4:	ldr	r3, [pc, #12]	; 13ac8 <__assert_fail@plt+0x14d4>
   13ab8:	stm	sp, {r0, r1}
   13abc:	bl	13718 <__assert_fail@plt+0x1124>
   13ac0:	add	sp, sp, #12
   13ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac8:	andeq	r5, r1, r0, lsl #3
   13acc:	mov	r0, #1
   13ad0:	bx	lr
   13ad4:	add	r1, r1, #88	; 0x58
   13ad8:	push	{lr}		; (str lr, [sp, #-4]!)
   13adc:	sub	sp, sp, #12
   13ae0:	ldm	r1, {r0, r1}
   13ae4:	mov	r3, #60	; 0x3c
   13ae8:	stm	sp, {r0, r1}
   13aec:	bl	13718 <__assert_fail@plt+0x1124>
   13af0:	add	sp, sp, #12
   13af4:	pop	{pc}		; (ldr pc, [sp], #4)
   13af8:	push	{lr}		; (str lr, [sp, #-4]!)
   13afc:	sub	sp, sp, #12
   13b00:	ldr	r3, [r2, #44]	; 0x2c
   13b04:	cmp	r3, #0
   13b08:	bne	13b38 <__assert_fail@plt+0x1544>
   13b0c:	add	r1, r1, #88	; 0x58
   13b10:	add	r2, r2, #48	; 0x30
   13b14:	ldm	r1, {r0, r1}
   13b18:	ldm	r2, {r2, r3}
   13b1c:	stm	sp, {r0, r1}
   13b20:	bl	136a8 <__assert_fail@plt+0x10b4>
   13b24:	cmp	r0, #0
   13b28:	movle	r0, #0
   13b2c:	movgt	r0, #1
   13b30:	add	sp, sp, #12
   13b34:	pop	{pc}		; (ldr pc, [sp], #4)
   13b38:	ldr	r3, [pc, #12]	; 13b4c <__assert_fail@plt+0x1558>
   13b3c:	mov	r2, #199	; 0xc7
   13b40:	ldr	r1, [pc, #8]	; 13b50 <__assert_fail@plt+0x155c>
   13b44:	ldr	r0, [pc, #8]	; 13b54 <__assert_fail@plt+0x1560>
   13b48:	bl	125f4 <__assert_fail@plt>
   13b4c:	andeq	r0, r4, r8, lsr #17
   13b50:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   13b54:	andeq	r0, r4, ip, lsr r9
   13b58:	push	{r4, r5, r6, lr}
   13b5c:	mov	r4, r2
   13b60:	ldr	r2, [r2, #156]	; 0x9c
   13b64:	mov	r5, r0
   13b68:	cmp	r2, #0
   13b6c:	mov	r6, r1
   13b70:	beq	13b78 <__assert_fail@plt+0x1584>
   13b74:	bl	18b58 <__assert_fail@plt+0x6564>
   13b78:	ldr	r2, [r4, #160]	; 0xa0
   13b7c:	mov	r1, r6
   13b80:	mov	r0, r5
   13b84:	pop	{r4, r5, r6, lr}
   13b88:	b	18b58 <__assert_fail@plt+0x6564>
   13b8c:	add	r1, r1, #88	; 0x58
   13b90:	push	{lr}		; (str lr, [sp, #-4]!)
   13b94:	sub	sp, sp, #12
   13b98:	ldm	r1, {r0, r1}
   13b9c:	ldr	r3, [pc, #12]	; 13bb0 <__assert_fail@plt+0x15bc>
   13ba0:	stm	sp, {r0, r1}
   13ba4:	bl	13718 <__assert_fail@plt+0x1124>
   13ba8:	add	sp, sp, #12
   13bac:	pop	{pc}		; (ldr pc, [sp], #4)
   13bb0:	andeq	r5, r1, r0, lsl #3
   13bb4:	push	{r4, r5, r6, r7, r8, lr}
   13bb8:	mov	r7, r0
   13bbc:	ldr	r5, [pc, #256]	; 13cc4 <__assert_fail@plt+0x16d0>
   13bc0:	mov	r4, r1
   13bc4:	ldr	r1, [pc, #252]	; 13cc8 <__assert_fail@plt+0x16d4>
   13bc8:	ldr	r6, [r5, #12]
   13bcc:	mov	r0, r6
   13bd0:	bl	11f40 <strcmp@plt>
   13bd4:	cmp	r0, #0
   13bd8:	beq	13c80 <__assert_fail@plt+0x168c>
   13bdc:	ldrb	r2, [r5, #4]
   13be0:	cmp	r2, #0
   13be4:	moveq	r4, r2
   13be8:	beq	13c00 <__assert_fail@plt+0x160c>
   13bec:	ldr	r2, [r4, #16]
   13bf0:	and	r2, r2, #61440	; 0xf000
   13bf4:	cmp	r2, #16384	; 0x4000
   13bf8:	moveq	r4, #512	; 0x200
   13bfc:	movne	r4, #0
   13c00:	mov	r1, r6
   13c04:	mov	r2, r4
   13c08:	ldr	r0, [r5, #16]
   13c0c:	bl	11f94 <unlinkat@plt>
   13c10:	cmp	r0, #0
   13c14:	beq	13c80 <__assert_fail@plt+0x168c>
   13c18:	bl	12348 <__errno_location@plt>
   13c1c:	ldr	r6, [r0]
   13c20:	mov	r8, r0
   13c24:	cmp	r6, #2
   13c28:	beq	13c88 <__assert_fail@plt+0x1694>
   13c2c:	cmp	r6, #21
   13c30:	bne	13c3c <__assert_fail@plt+0x1648>
   13c34:	cmp	r4, #0
   13c38:	beq	13ca4 <__assert_fail@plt+0x16b0>
   13c3c:	mov	r2, #5
   13c40:	ldr	r1, [pc, #132]	; 13ccc <__assert_fail@plt+0x16d8>
   13c44:	mov	r0, #0
   13c48:	bl	120b4 <dcgettext@plt>
   13c4c:	mov	r1, r7
   13c50:	mov	r4, r0
   13c54:	mov	r0, #0
   13c58:	bl	18c78 <__assert_fail@plt+0x6684>
   13c5c:	mov	r2, r4
   13c60:	mov	r1, r6
   13c64:	mov	r3, r0
   13c68:	mov	r0, #0
   13c6c:	bl	121ec <error@plt>
   13c70:	mov	r3, #1
   13c74:	mov	r0, #0
   13c78:	str	r3, [r5, #28]
   13c7c:	pop	{r4, r5, r6, r7, r8, pc}
   13c80:	mov	r0, #1
   13c84:	pop	{r4, r5, r6, r7, r8, pc}
   13c88:	ldr	r3, [pc, #64]	; 13cd0 <__assert_fail@plt+0x16dc>
   13c8c:	ldrb	r0, [r3, #14]
   13c90:	cmp	r0, #0
   13c94:	beq	13c3c <__assert_fail@plt+0x1648>
   13c98:	mov	r3, #0
   13c9c:	str	r3, [r8]
   13ca0:	pop	{r4, r5, r6, r7, r8, pc}
   13ca4:	mov	r2, #512	; 0x200
   13ca8:	ldr	r1, [r5, #12]
   13cac:	ldr	r0, [r5, #16]
   13cb0:	bl	11f94 <unlinkat@plt>
   13cb4:	cmp	r0, #0
   13cb8:	beq	13c80 <__assert_fail@plt+0x168c>
   13cbc:	ldr	r6, [r8]
   13cc0:	b	13c3c <__assert_fail@plt+0x1648>
   13cc4:	andeq	r7, r5, r0, asr #28
   13cc8:	andeq	r3, r4, r8, lsr #24
   13ccc:	andeq	r0, r4, r4, ror #18
   13cd0:	andeq	r7, r5, ip, ror #28
   13cd4:	ldr	r3, [r1, #16]
   13cd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cdc:	and	r3, r3, #61440	; 0xf000
   13ce0:	cmp	r3, #16384	; 0x4000
   13ce4:	beq	13d10 <__assert_fail@plt+0x171c>
   13ce8:	cmp	r3, #32768	; 0x8000
   13cec:	movne	r4, #0
   13cf0:	bne	13d08 <__assert_fail@plt+0x1714>
   13cf4:	ldr	r2, [r1, #48]	; 0x30
   13cf8:	ldr	r3, [r1, #52]	; 0x34
   13cfc:	orrs	r3, r2, r3
   13d00:	moveq	r4, #1
   13d04:	movne	r4, #0
   13d08:	mov	r0, r4
   13d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d10:	mov	r6, r0
   13d14:	bl	12348 <__errno_location@plt>
   13d18:	ldr	r8, [pc, #352]	; 13e80 <__assert_fail@plt+0x188c>
   13d1c:	mov	r4, #0
   13d20:	ldr	r2, [pc, #348]	; 13e84 <__assert_fail@plt+0x1890>
   13d24:	ldr	r1, [r8, #12]
   13d28:	str	r4, [r0]
   13d2c:	mov	r7, r0
   13d30:	ldr	r0, [r8, #16]
   13d34:	bl	25218 <__assert_fail@plt+0x12c24>
   13d38:	subs	r9, r0, #0
   13d3c:	blt	13e18 <__assert_fail@plt+0x1824>
   13d40:	bl	124c8 <fdopendir@plt>
   13d44:	subs	r5, r0, #0
   13d48:	strne	r4, [r7]
   13d4c:	beq	13e48 <__assert_fail@plt+0x1854>
   13d50:	bl	124bc <readdir64@plt>
   13d54:	subs	r3, r0, #0
   13d58:	beq	13e10 <__assert_fail@plt+0x181c>
   13d5c:	ldrb	r2, [r3, #19]
   13d60:	cmp	r2, #46	; 0x2e
   13d64:	bne	13d84 <__assert_fail@plt+0x1790>
   13d68:	ldrb	r2, [r3, #20]
   13d6c:	mov	r0, r5
   13d70:	cmp	r2, #0
   13d74:	beq	13d50 <__assert_fail@plt+0x175c>
   13d78:	ldrh	r3, [r3, #20]
   13d7c:	cmp	r3, #46	; 0x2e
   13d80:	beq	13d50 <__assert_fail@plt+0x175c>
   13d84:	mov	r4, #0
   13d88:	ldr	r9, [r7]
   13d8c:	cmp	r9, #0
   13d90:	bne	13dd8 <__assert_fail@plt+0x17e4>
   13d94:	mov	r0, r5
   13d98:	bl	125c4 <closedir@plt>
   13d9c:	cmp	r0, #0
   13da0:	beq	13d08 <__assert_fail@plt+0x1714>
   13da4:	mov	r1, r6
   13da8:	mov	r0, r9
   13dac:	ldr	r4, [r7]
   13db0:	bl	18c78 <__assert_fail@plt+0x6684>
   13db4:	mov	r1, r4
   13db8:	ldr	r2, [pc, #200]	; 13e88 <__assert_fail@plt+0x1894>
   13dbc:	mov	r4, r9
   13dc0:	mov	r3, r0
   13dc4:	mov	r0, r9
   13dc8:	bl	121ec <error@plt>
   13dcc:	mov	r3, #1
   13dd0:	str	r3, [r8, #28]
   13dd4:	b	13d08 <__assert_fail@plt+0x1714>
   13dd8:	mov	r1, r6
   13ddc:	mov	r0, #0
   13de0:	bl	18c78 <__assert_fail@plt+0x6684>
   13de4:	mov	r1, r9
   13de8:	ldr	r2, [pc, #152]	; 13e88 <__assert_fail@plt+0x1894>
   13dec:	mov	r4, #0
   13df0:	mov	r3, r0
   13df4:	mov	r0, #0
   13df8:	bl	121ec <error@plt>
   13dfc:	mov	r3, #1
   13e00:	mov	r0, r5
   13e04:	str	r3, [r8, #28]
   13e08:	bl	125c4 <closedir@plt>
   13e0c:	b	13d08 <__assert_fail@plt+0x1714>
   13e10:	mov	r4, #1
   13e14:	b	13d88 <__assert_fail@plt+0x1794>
   13e18:	mov	r1, r6
   13e1c:	mov	r0, r4
   13e20:	ldr	r5, [r7]
   13e24:	bl	18c78 <__assert_fail@plt+0x6684>
   13e28:	mov	r1, r5
   13e2c:	ldr	r2, [pc, #84]	; 13e88 <__assert_fail@plt+0x1894>
   13e30:	mov	r3, r0
   13e34:	mov	r0, r4
   13e38:	bl	121ec <error@plt>
   13e3c:	mov	r3, #1
   13e40:	str	r3, [r8, #28]
   13e44:	b	13d08 <__assert_fail@plt+0x1714>
   13e48:	mov	r1, r6
   13e4c:	ldr	r4, [r7]
   13e50:	bl	18c78 <__assert_fail@plt+0x6684>
   13e54:	mov	r1, r4
   13e58:	ldr	r2, [pc, #40]	; 13e88 <__assert_fail@plt+0x1894>
   13e5c:	mov	r4, r5
   13e60:	mov	r3, r0
   13e64:	mov	r0, r5
   13e68:	bl	121ec <error@plt>
   13e6c:	mov	r3, #1
   13e70:	mov	r0, r9
   13e74:	str	r3, [r8, #28]
   13e78:	bl	125ac <close@plt>
   13e7c:	b	13d08 <__assert_fail@plt+0x1714>
   13e80:	andeq	r7, r5, r0, asr #28
   13e84:	andeq	r4, sl, r0, lsl #18
   13e88:	andeq	r4, r4, r0, ror #18
   13e8c:	b	150a0 <__assert_fail@plt+0x2aac>
   13e90:	ldr	r3, [pc, #4]	; 13e9c <__assert_fail@plt+0x18a8>
   13e94:	ldr	r0, [r3, #12]
   13e98:	b	150a0 <__assert_fail@plt+0x2aac>
   13e9c:	andeq	r7, r5, r0, asr #28
   13ea0:	mov	r0, #0
   13ea4:	bx	lr
   13ea8:	ldr	ip, [pc, #68]	; 13ef4 <__assert_fail@plt+0x1900>
   13eac:	ldr	r3, [pc, #68]	; 13ef8 <__assert_fail@plt+0x1904>
   13eb0:	push	{r4, r5, r6, lr}
   13eb4:	sub	sp, sp, #16
   13eb8:	ldr	r4, [ip, #16]
   13ebc:	ldrb	r6, [r2, #32]
   13ec0:	ldr	r5, [r2, #44]	; 0x2c
   13ec4:	ldr	lr, [r3, #40]	; 0x28
   13ec8:	ldr	r2, [ip, #12]
   13ecc:	ldr	ip, [r3, #20]
   13ed0:	mov	r3, r1
   13ed4:	str	r6, [sp, #8]
   13ed8:	str	r5, [sp, #12]
   13edc:	mov	r1, r4
   13ee0:	stm	sp, {ip, lr}
   13ee4:	bl	2002c <__assert_fail@plt+0xda38>
   13ee8:	mov	r0, #1
   13eec:	add	sp, sp, #16
   13ef0:	pop	{r4, r5, r6, pc}
   13ef4:	andeq	r7, r5, r0, asr #28
   13ef8:	andeq	r7, r5, ip, ror #28
   13efc:	mov	r3, r1
   13f00:	push	{r4, lr}
   13f04:	mov	r4, r2
   13f08:	mov	r1, r0
   13f0c:	mov	r0, r3
   13f10:	bl	1abd4 <__assert_fail@plt+0x85e0>
   13f14:	ldr	r1, [r4, #40]	; 0x28
   13f18:	bl	11f40 <strcmp@plt>
   13f1c:	clz	r0, r0
   13f20:	lsr	r0, r0, #5
   13f24:	pop	{r4, pc}
   13f28:	ldr	r3, [r2, #40]	; 0x28
   13f2c:	cmp	r3, #1
   13f30:	beq	13f90 <__assert_fail@plt+0x199c>
   13f34:	bcc	13f6c <__assert_fail@plt+0x1978>
   13f38:	cmp	r3, #2
   13f3c:	bne	13f64 <__assert_fail@plt+0x1970>
   13f40:	ldr	r3, [r1, #28]
   13f44:	ldrd	r0, [r2, #48]	; 0x30
   13f48:	mov	r2, r3
   13f4c:	mov	r3, #0
   13f50:	cmp	r1, r3
   13f54:	cmpeq	r0, r2
   13f58:	moveq	r0, #1
   13f5c:	movne	r0, #0
   13f60:	bx	lr
   13f64:	mov	r0, #0
   13f68:	bx	lr
   13f6c:	ldr	r3, [r1, #28]
   13f70:	ldrd	r0, [r2, #48]	; 0x30
   13f74:	mov	r2, r3
   13f78:	mov	r3, #0
   13f7c:	cmp	r3, r1
   13f80:	cmpeq	r2, r0
   13f84:	movhi	r0, #1
   13f88:	movls	r0, #0
   13f8c:	bx	lr
   13f90:	ldr	r3, [r1, #28]
   13f94:	ldrd	r0, [r2, #48]	; 0x30
   13f98:	mov	r2, r3
   13f9c:	mov	r3, #0
   13fa0:	cmp	r3, r1
   13fa4:	cmpeq	r2, r0
   13fa8:	movcc	r0, #1
   13fac:	movcs	r0, #0
   13fb0:	bx	lr
   13fb4:	ldr	r0, [r2, #40]	; 0x28
   13fb8:	ldr	r3, [r1, #28]
   13fbc:	sub	r0, r0, r3
   13fc0:	clz	r0, r0
   13fc4:	lsr	r0, r0, #5
   13fc8:	bx	lr
   13fcc:	ldr	r3, [r1, #16]
   13fd0:	and	r3, r3, #61440	; 0xf000
   13fd4:	cmp	r3, #40960	; 0xa000
   13fd8:	beq	13fe4 <__assert_fail@plt+0x19f0>
   13fdc:	mov	r0, #0
   13fe0:	bx	lr
   13fe4:	add	r1, r2, #40	; 0x28
   13fe8:	mov	r2, #1
   13fec:	b	138d0 <__assert_fail@plt+0x12dc>
   13ff0:	push	{r4, r5, r6, lr}
   13ff4:	ldr	r5, [r2, #40]	; 0x28
   13ff8:	bl	212c4 <__assert_fail@plt+0xecd0>
   13ffc:	mov	r4, r0
   14000:	bl	213f8 <__assert_fail@plt+0xee04>
   14004:	mov	r1, r4
   14008:	mov	r2, #16
   1400c:	mov	r0, r5
   14010:	bl	12210 <fnmatch@plt>
   14014:	mov	r5, r0
   14018:	mov	r0, r4
   1401c:	bl	2db68 <__assert_fail@plt+0x1b574>
   14020:	clz	r0, r5
   14024:	lsr	r0, r0, #5
   14028:	pop	{r4, r5, r6, pc}
   1402c:	ldr	r3, [r2, #40]	; 0x28
   14030:	cmp	r3, #1
   14034:	beq	14084 <__assert_fail@plt+0x1a90>
   14038:	bcc	14068 <__assert_fail@plt+0x1a74>
   1403c:	cmp	r3, #2
   14040:	bne	14060 <__assert_fail@plt+0x1a6c>
   14044:	ldrd	r0, [r1, #96]	; 0x60
   14048:	ldrd	r2, [r2, #48]	; 0x30
   1404c:	cmp	r1, r3
   14050:	cmpeq	r0, r2
   14054:	moveq	r0, #1
   14058:	movne	r0, #0
   1405c:	bx	lr
   14060:	mov	r0, #0
   14064:	bx	lr
   14068:	ldrd	r0, [r1, #96]	; 0x60
   1406c:	ldrd	r2, [r2, #48]	; 0x30
   14070:	cmp	r1, r3
   14074:	cmpeq	r0, r2
   14078:	movhi	r0, #1
   1407c:	movls	r0, #0
   14080:	bx	lr
   14084:	ldrd	r0, [r1, #96]	; 0x60
   14088:	ldrd	r2, [r2, #48]	; 0x30
   1408c:	cmp	r1, r3
   14090:	cmpeq	r0, r2
   14094:	movcc	r0, #1
   14098:	movcs	r0, #0
   1409c:	bx	lr
   140a0:	push	{r4, lr}
   140a4:	mov	r1, r0
   140a8:	ldr	r3, [r2, #40]	; 0x28
   140ac:	mov	r2, #16
   140b0:	mov	r0, r3
   140b4:	bl	12210 <fnmatch@plt>
   140b8:	clz	r0, r0
   140bc:	lsr	r0, r0, #5
   140c0:	pop	{r4, pc}
   140c4:	ldr	r3, [r2, #40]	; 0x28
   140c8:	cmp	r3, #1
   140cc:	beq	1412c <__assert_fail@plt+0x1b38>
   140d0:	bcc	14108 <__assert_fail@plt+0x1b14>
   140d4:	cmp	r3, #2
   140d8:	bne	14100 <__assert_fail@plt+0x1b0c>
   140dc:	ldr	r3, [r1, #20]
   140e0:	ldrd	r0, [r2, #48]	; 0x30
   140e4:	mov	r2, r3
   140e8:	mov	r3, #0
   140ec:	cmp	r1, r3
   140f0:	cmpeq	r0, r2
   140f4:	moveq	r0, #1
   140f8:	movne	r0, #0
   140fc:	bx	lr
   14100:	mov	r0, #0
   14104:	bx	lr
   14108:	ldr	r3, [r1, #20]
   1410c:	ldrd	r0, [r2, #48]	; 0x30
   14110:	mov	r2, r3
   14114:	mov	r3, #0
   14118:	cmp	r3, r1
   1411c:	cmpeq	r2, r0
   14120:	movhi	r0, #1
   14124:	movls	r0, #0
   14128:	bx	lr
   1412c:	ldr	r3, [r1, #20]
   14130:	ldrd	r0, [r2, #48]	; 0x30
   14134:	mov	r2, r3
   14138:	mov	r3, #0
   1413c:	cmp	r3, r1
   14140:	cmpeq	r2, r0
   14144:	movcc	r0, #1
   14148:	movcs	r0, #0
   1414c:	bx	lr
   14150:	ldr	r3, [r1, #16]
   14154:	and	r3, r3, #61440	; 0xf000
   14158:	cmp	r3, #40960	; 0xa000
   1415c:	beq	14168 <__assert_fail@plt+0x1b74>
   14160:	mov	r0, #0
   14164:	bx	lr
   14168:	add	r1, r2, #40	; 0x28
   1416c:	mov	r2, #0
   14170:	b	138d0 <__assert_fail@plt+0x12dc>
   14174:	b	13ea8 <__assert_fail@plt+0x18b4>
   14178:	add	r1, r1, #80	; 0x50
   1417c:	push	{lr}		; (str lr, [sp, #-4]!)
   14180:	sub	sp, sp, #12
   14184:	ldm	r1, {r0, r1}
   14188:	mov	r3, #60	; 0x3c
   1418c:	stm	sp, {r0, r1}
   14190:	bl	13718 <__assert_fail@plt+0x1124>
   14194:	add	sp, sp, #12
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	add	r1, r1, #80	; 0x50
   141a0:	push	{lr}		; (str lr, [sp, #-4]!)
   141a4:	sub	sp, sp, #12
   141a8:	ldm	r1, {r0, r1}
   141ac:	ldr	r3, [pc, #12]	; 141c0 <__assert_fail@plt+0x1bcc>
   141b0:	stm	sp, {r0, r1}
   141b4:	bl	13718 <__assert_fail@plt+0x1124>
   141b8:	add	sp, sp, #12
   141bc:	pop	{pc}		; (ldr pc, [sp], #4)
   141c0:	andeq	r5, r1, r0, lsl #3
   141c4:	push	{r4, r5, r6, lr}
   141c8:	ldr	r5, [r2, #40]	; 0x28
   141cc:	bl	212c4 <__assert_fail@plt+0xecd0>
   141d0:	mov	r4, r0
   141d4:	bl	213f8 <__assert_fail@plt+0xee04>
   141d8:	mov	r1, r4
   141dc:	mov	r2, #0
   141e0:	mov	r0, r5
   141e4:	bl	12210 <fnmatch@plt>
   141e8:	mov	r5, r0
   141ec:	mov	r0, r4
   141f0:	bl	2db68 <__assert_fail@plt+0x1b574>
   141f4:	clz	r0, r5
   141f8:	lsr	r0, r0, #5
   141fc:	pop	{r4, r5, r6, pc}
   14200:	push	{r4, lr}
   14204:	ldr	r2, [r2, #160]	; 0xa0
   14208:	bl	18b58 <__assert_fail@plt+0x6564>
   1420c:	eor	r0, r0, #1
   14210:	uxtb	r0, r0
   14214:	pop	{r4, pc}
   14218:	push	{lr}		; (str lr, [sp, #-4]!)
   1421c:	sub	sp, sp, #12
   14220:	ldr	r3, [r2, #44]	; 0x2c
   14224:	cmp	r3, #0
   14228:	bne	14258 <__assert_fail@plt+0x1c64>
   1422c:	add	r1, r1, #80	; 0x50
   14230:	add	r2, r2, #48	; 0x30
   14234:	ldm	r1, {r0, r1}
   14238:	ldm	r2, {r2, r3}
   1423c:	stm	sp, {r0, r1}
   14240:	bl	136a8 <__assert_fail@plt+0x10b4>
   14244:	cmp	r0, #0
   14248:	movle	r0, #0
   1424c:	movgt	r0, #1
   14250:	add	sp, sp, #12
   14254:	pop	{pc}		; (ldr pc, [sp], #4)
   14258:	ldr	r3, [pc, #12]	; 1426c <__assert_fail@plt+0x1c78>
   1425c:	ldr	r2, [pc, #12]	; 14270 <__assert_fail@plt+0x1c7c>
   14260:	ldr	r1, [pc, #12]	; 14274 <__assert_fail@plt+0x1c80>
   14264:	ldr	r0, [pc, #12]	; 14278 <__assert_fail@plt+0x1c84>
   14268:	bl	125f4 <__assert_fail@plt>
   1426c:			; <UNDEFINED> instruction: 0x000408b4
   14270:	andeq	r0, r0, sp, ror #4
   14274:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   14278:	andeq	r0, r4, ip, lsr r9
   1427c:	push	{r4, r5, lr}
   14280:	sub	sp, sp, #12
   14284:	ldr	r3, [r2, #44]	; 0x2c
   14288:	cmp	r3, #0
   1428c:	bne	14388 <__assert_fail@plt+0x1d94>
   14290:	ldr	r3, [r2, #40]	; 0x28
   14294:	mov	lr, r1
   14298:	cmp	r3, #4
   1429c:	ldrls	pc, [pc, r3, lsl #2]
   142a0:	b	14360 <__assert_fail@plt+0x1d6c>
   142a4:	strdeq	r4, [r1], -r0
   142a8:	andeq	r4, r1, r8, lsl #6
   142ac:	andeq	r4, r1, ip, asr #6
   142b0:			; <UNDEFINED> instruction: 0x000142b8
   142b4:	andeq	r4, r1, r4, ror r3
   142b8:	ldr	r3, [lr, #84]	; 0x54
   142bc:	ldr	r1, [r1, #80]	; 0x50
   142c0:	add	ip, sp, #8
   142c4:	str	r1, [ip, #-8]!
   142c8:	add	r2, r2, #48	; 0x30
   142cc:	str	r3, [sp, #4]
   142d0:	ldm	r2, {r2, r3}
   142d4:	ldm	ip, {r0, r1}
   142d8:	bl	136a8 <__assert_fail@plt+0x10b4>
   142dc:	cmp	r0, #0
   142e0:	movle	r0, #0
   142e4:	movgt	r0, #1
   142e8:	add	sp, sp, #12
   142ec:	pop	{r4, r5, pc}
   142f0:	add	r3, r1, #72	; 0x48
   142f4:	mov	ip, sp
   142f8:	ldm	r3, {r0, r1}
   142fc:	ldr	r3, [lr, #76]	; 0x4c
   14300:	stm	sp, {r0, r1}
   14304:	b	142c8 <__assert_fail@plt+0x1cd4>
   14308:	mov	r4, r0
   1430c:	mov	r2, #5
   14310:	ldr	r1, [pc, #132]	; 1439c <__assert_fail@plt+0x1da8>
   14314:	mov	r0, #0
   14318:	bl	120b4 <dcgettext@plt>
   1431c:	mov	r1, r4
   14320:	mov	r5, r0
   14324:	mov	r0, #0
   14328:	bl	18c78 <__assert_fail@plt+0x6684>
   1432c:	mov	r1, #0
   14330:	mov	r2, r5
   14334:	mov	r3, r0
   14338:	mov	r0, r1
   1433c:	bl	121ec <error@plt>
   14340:	mov	r0, #0
   14344:	add	sp, sp, #12
   14348:	pop	{r4, r5, pc}
   1434c:	ldr	r1, [r1, #88]	; 0x58
   14350:	add	ip, sp, #8
   14354:	ldr	r3, [lr, #92]	; 0x5c
   14358:	str	r1, [ip, #-8]!
   1435c:	b	142c8 <__assert_fail@plt+0x1cd4>
   14360:	ldr	r3, [pc, #56]	; 143a0 <__assert_fail@plt+0x1dac>
   14364:	ldr	r2, [pc, #56]	; 143a4 <__assert_fail@plt+0x1db0>
   14368:	ldr	r1, [pc, #56]	; 143a8 <__assert_fail@plt+0x1db4>
   1436c:	ldr	r0, [pc, #56]	; 143ac <__assert_fail@plt+0x1db8>
   14370:	bl	125f4 <__assert_fail@plt>
   14374:	ldr	r3, [pc, #36]	; 143a0 <__assert_fail@plt+0x1dac>
   14378:	mov	r2, #636	; 0x27c
   1437c:	ldr	r1, [pc, #36]	; 143a8 <__assert_fail@plt+0x1db4>
   14380:	ldr	r0, [pc, #40]	; 143b0 <__assert_fail@plt+0x1dbc>
   14384:	bl	125f4 <__assert_fail@plt>
   14388:	ldr	r3, [pc, #16]	; 143a0 <__assert_fail@plt+0x1dac>
   1438c:	ldr	r2, [pc, #32]	; 143b4 <__assert_fail@plt+0x1dc0>
   14390:	ldr	r1, [pc, #16]	; 143a8 <__assert_fail@plt+0x1db4>
   14394:	ldr	r0, [pc, #28]	; 143b8 <__assert_fail@plt+0x1dc4>
   14398:	bl	125f4 <__assert_fail@plt>
   1439c:	andeq	r0, r4, r4, lsr #19
   143a0:	andeq	r0, r4, r0, asr #17
   143a4:	muleq	r0, fp, r2
   143a8:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   143ac:	ldrdeq	r0, [r4], -r4
   143b0:	andeq	r0, r4, r8, ror r9
   143b4:	andeq	r0, r0, r7, ror r2
   143b8:	andeq	r0, r4, ip, lsr r9
   143bc:	push	{r4, lr}
   143c0:	ldr	r0, [r1, #28]
   143c4:	bl	125d0 <getgrgid@plt>
   143c8:	clz	r0, r0
   143cc:	lsr	r0, r0, #5
   143d0:	pop	{r4, pc}
   143d4:	push	{r4, lr}
   143d8:	ldr	r0, [r1, #24]
   143dc:	bl	11f58 <getpwuid@plt>
   143e0:	clz	r0, r0
   143e4:	lsr	r0, r0, #5
   143e8:	pop	{r4, pc}
   143ec:	push	{r4, r5, r6, lr}
   143f0:	mov	r4, r0
   143f4:	ldr	r3, [r2, #132]	; 0x84
   143f8:	mov	r6, r1
   143fc:	mov	r1, r0
   14400:	ldr	r0, [r3]
   14404:	mov	r5, r2
   14408:	bl	1394c <__assert_fail@plt+0x1358>
   1440c:	cmp	r0, #0
   14410:	popeq	{r4, r5, r6, pc}
   14414:	mov	r2, r5
   14418:	mov	r1, r6
   1441c:	mov	r0, r4
   14420:	pop	{r4, r5, r6, lr}
   14424:	b	150a0 <__assert_fail@plt+0x2aac>
   14428:	push	{r4, r5, r6, lr}
   1442c:	mov	r5, r1
   14430:	ldr	r3, [r2, #132]	; 0x84
   14434:	mov	r1, r0
   14438:	mov	r4, r2
   1443c:	ldr	r0, [r3]
   14440:	bl	1394c <__assert_fail@plt+0x1358>
   14444:	cmp	r0, #0
   14448:	popeq	{r4, r5, r6, pc}
   1444c:	ldr	r3, [pc, #16]	; 14464 <__assert_fail@plt+0x1e70>
   14450:	mov	r2, r4
   14454:	mov	r1, r5
   14458:	ldr	r0, [r3, #12]
   1445c:	pop	{r4, r5, r6, lr}
   14460:	b	150a0 <__assert_fail@plt+0x2aac>
   14464:	andeq	r7, r5, r0, asr #28
   14468:	mov	r0, #1
   1446c:	bx	lr
   14470:	push	{r4, lr}
   14474:	mov	r1, r0
   14478:	ldr	r3, [r2, #40]	; 0x28
   1447c:	mov	r2, #0
   14480:	mov	r0, r3
   14484:	bl	12210 <fnmatch@plt>
   14488:	clz	r0, r0
   1448c:	lsr	r0, r0, #5
   14490:	pop	{r4, pc}
   14494:	ldr	r3, [r1, #16]
   14498:	ldr	r0, [r2, #40]	; 0x28
   1449c:	and	r1, r3, #61440	; 0xf000
   144a0:	cmp	r1, #16384	; 0x4000
   144a4:	moveq	r1, #44	; 0x2c
   144a8:	movne	r1, #40	; 0x28
   144ac:	add	r2, r2, r1
   144b0:	cmp	r0, #1
   144b4:	ldr	r2, [r2, #4]
   144b8:	beq	144fc <__assert_fail@plt+0x1f08>
   144bc:	bcc	144e8 <__assert_fail@plt+0x1ef4>
   144c0:	cmp	r0, #2
   144c4:	bne	144e0 <__assert_fail@plt+0x1eec>
   144c8:	lsl	r0, r3, #20
   144cc:	lsr	r0, r0, #20
   144d0:	sub	r0, r0, r2
   144d4:	clz	r0, r0
   144d8:	lsr	r0, r0, #5
   144dc:	bx	lr
   144e0:	push	{r4, lr}
   144e4:	bl	125a0 <abort@plt>
   144e8:	and	r0, r3, r2
   144ec:	sub	r0, r0, r2
   144f0:	clz	r0, r0
   144f4:	lsr	r0, r0, #5
   144f8:	bx	lr
   144fc:	cmp	r2, #0
   14500:	beq	144dc <__assert_fail@plt+0x1ee8>
   14504:	tst	r3, r2
   14508:	movne	r0, #1
   1450c:	moveq	r0, #0
   14510:	bx	lr
   14514:	ldr	r0, [pc, #32]	; 1453c <__assert_fail@plt+0x1f48>
   14518:	push	{r4, lr}
   1451c:	mov	r3, #0
   14520:	ldr	r1, [r0, #12]
   14524:	mov	r2, #1
   14528:	ldr	r0, [r0, #16]
   1452c:	bl	11fdc <faccessat@plt>
   14530:	clz	r0, r0
   14534:	lsr	r0, r0, #5
   14538:	pop	{r4, pc}
   1453c:	andeq	r7, r5, r0, asr #28
   14540:	ldr	r0, [pc, #32]	; 14568 <__assert_fail@plt+0x1f74>
   14544:	push	{r4, lr}
   14548:	mov	r3, #0
   1454c:	ldr	r1, [r0, #12]
   14550:	mov	r2, #4
   14554:	ldr	r0, [r0, #16]
   14558:	bl	11fdc <faccessat@plt>
   1455c:	clz	r0, r0
   14560:	lsr	r0, r0, #5
   14564:	pop	{r4, pc}
   14568:	andeq	r7, r5, r0, asr #28
   1456c:	ldr	r0, [pc, #32]	; 14594 <__assert_fail@plt+0x1fa0>
   14570:	push	{r4, lr}
   14574:	mov	r3, #0
   14578:	ldr	r1, [r0, #12]
   1457c:	mov	r2, #2
   14580:	ldr	r0, [r0, #16]
   14584:	bl	11fdc <faccessat@plt>
   14588:	clz	r0, r0
   1458c:	lsr	r0, r0, #5
   14590:	pop	{r4, pc}
   14594:	andeq	r7, r5, r0, asr #28
   14598:	push	{lr}		; (str lr, [sp, #-4]!)
   1459c:	mov	r3, r2
   145a0:	sub	sp, sp, #12
   145a4:	str	r0, [sp]
   145a8:	ldr	r1, [r3, #56]	; 0x38
   145ac:	ldrb	r2, [r2, #52]	; 0x34
   145b0:	ldr	r0, [r3, #44]	; 0x2c
   145b4:	ldr	r3, [pc, #12]	; 145c8 <__assert_fail@plt+0x1fd4>
   145b8:	bl	206ac <__assert_fail@plt+0xe0b8>
   145bc:	mov	r0, #1
   145c0:	add	sp, sp, #12
   145c4:	pop	{pc}		; (ldr pc, [sp], #4)
   145c8:	andeq	r5, r4, r0, lsl sl
   145cc:	b	14598 <__assert_fail@plt+0x1fa4>
   145d0:	push	{r4, lr}
   145d4:	ldr	r4, [r2, #44]	; 0x2c
   145d8:	mov	r1, r4
   145dc:	bl	12588 <fputs@plt>
   145e0:	mov	r1, r4
   145e4:	mov	r0, #0
   145e8:	bl	124e0 <putc@plt>
   145ec:	mov	r0, #1
   145f0:	pop	{r4, pc}
   145f4:	b	145d0 <__assert_fail@plt+0x1fdc>
   145f8:	push	{r4, r5, r6, lr}
   145fc:	sub	sp, sp, #8
   14600:	mov	r6, r2
   14604:	mov	r5, r0
   14608:	bl	12300 <strlen@plt>
   1460c:	mov	r3, #0
   14610:	mov	r1, r5
   14614:	mov	r4, r0
   14618:	mov	r2, r4
   1461c:	ldr	r0, [r6, #40]	; 0x28
   14620:	str	r3, [sp]
   14624:	bl	3dd38 <__assert_fail@plt+0x2b744>
   14628:	sub	r0, r4, r0
   1462c:	clz	r0, r0
   14630:	lsr	r0, r0, #5
   14634:	add	sp, sp, #8
   14638:	pop	{r4, r5, r6, pc}
   1463c:	push	{r4, r5, r6, r7, r8, lr}
   14640:	mov	r8, r2
   14644:	ldr	r6, [r2, #44]	; 0x2c
   14648:	ldrd	r4, [r1, #48]	; 0x30
   1464c:	mov	r2, r6
   14650:	asr	r7, r6, #31
   14654:	mov	r0, r4
   14658:	mov	r1, r5
   1465c:	mov	r3, r7
   14660:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   14664:	mov	r0, r4
   14668:	mov	r1, r5
   1466c:	mov	r5, #0
   14670:	orrs	r3, r2, r3
   14674:	mov	r3, r7
   14678:	mov	r2, r6
   1467c:	movne	r4, #1
   14680:	moveq	r4, #0
   14684:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   14688:	ldr	r3, [r8, #40]	; 0x28
   1468c:	adds	r0, r0, r4
   14690:	adc	r1, r1, r5
   14694:	cmp	r3, #1
   14698:	beq	146e0 <__assert_fail@plt+0x20ec>
   1469c:	bcc	146c8 <__assert_fail@plt+0x20d4>
   146a0:	cmp	r3, #2
   146a4:	bne	146c0 <__assert_fail@plt+0x20cc>
   146a8:	ldrd	r2, [r8, #48]	; 0x30
   146ac:	cmp	r3, r1
   146b0:	cmpeq	r2, r0
   146b4:	moveq	r0, #1
   146b8:	movne	r0, #0
   146bc:	pop	{r4, r5, r6, r7, r8, pc}
   146c0:	mov	r0, #0
   146c4:	pop	{r4, r5, r6, r7, r8, pc}
   146c8:	ldrd	r2, [r8, #48]	; 0x30
   146cc:	cmp	r1, r3
   146d0:	cmpeq	r0, r2
   146d4:	movhi	r0, #1
   146d8:	movls	r0, #0
   146dc:	pop	{r4, r5, r6, r7, r8, pc}
   146e0:	ldrd	r2, [r8, #48]	; 0x30
   146e4:	cmp	r1, r3
   146e8:	cmpeq	r0, r2
   146ec:	movcc	r0, #1
   146f0:	movcs	r0, #0
   146f4:	pop	{r4, r5, r6, r7, r8, pc}
   146f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146fc:	ldrd	r4, [r1, #96]	; 0x60
   14700:	orrs	r3, r4, r5
   14704:	beq	14720 <__assert_fail@plt+0x212c>
   14708:	ldrd	r6, [r2, #40]	; 0x28
   1470c:	cmp	r5, r7
   14710:	cmpeq	r4, r6
   14714:	beq	14720 <__assert_fail@plt+0x212c>
   14718:	mov	r0, #0
   1471c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14720:	ldr	r3, [pc, #72]	; 14770 <__assert_fail@plt+0x217c>
   14724:	mov	r5, r2
   14728:	mov	r4, r1
   1472c:	mov	r2, r1
   14730:	ldr	r1, [r3, #12]
   14734:	bl	17d44 <__assert_fail@plt+0x5750>
   14738:	cmp	r0, #0
   1473c:	bne	14718 <__assert_fail@plt+0x2124>
   14740:	ldrd	r8, [r4, #96]	; 0x60
   14744:	ldrd	r6, [r5, #40]	; 0x28
   14748:	cmp	r9, r7
   1474c:	cmpeq	r8, r6
   14750:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   14754:	ldrd	r0, [r4]
   14758:	ldrd	r2, [r5, #48]	; 0x30
   1475c:	cmp	r1, r3
   14760:	cmpeq	r0, r2
   14764:	moveq	r0, #1
   14768:	movne	r0, #0
   1476c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14770:	andeq	r7, r5, r0, asr #28
   14774:	mov	r0, #1
   14778:	bx	lr
   1477c:	ldr	r3, [pc, #192]	; 14844 <__assert_fail@plt+0x2250>
   14780:	ldrb	r0, [r3, #5]
   14784:	cmp	r0, #0
   14788:	beq	1482c <__assert_fail@plt+0x2238>
   1478c:	ldr	r0, [r3, #8]
   14790:	cmp	r0, #0
   14794:	beq	147d0 <__assert_fail@plt+0x21dc>
   14798:	ldrb	r3, [r3, #4]
   1479c:	cmp	r3, #0
   147a0:	ldrne	r0, [r1, #16]
   147a4:	and	r0, r0, #61440	; 0xf000
   147a8:	cmp	r0, #24576	; 0x6000
   147ac:	beq	14814 <__assert_fail@plt+0x2220>
   147b0:	bls	147d4 <__assert_fail@plt+0x21e0>
   147b4:	cmp	r0, #40960	; 0xa000
   147b8:	beq	147f4 <__assert_fail@plt+0x2200>
   147bc:	cmp	r0, #49152	; 0xc000
   147c0:	beq	14824 <__assert_fail@plt+0x2230>
   147c4:	cmp	r0, #32768	; 0x8000
   147c8:	beq	1481c <__assert_fail@plt+0x2228>
   147cc:	mov	r0, #0
   147d0:	bx	lr
   147d4:	cmp	r0, #8192	; 0x2000
   147d8:	beq	14804 <__assert_fail@plt+0x2210>
   147dc:	cmp	r0, #16384	; 0x4000
   147e0:	beq	1480c <__assert_fail@plt+0x2218>
   147e4:	cmp	r0, #4096	; 0x1000
   147e8:	bne	147cc <__assert_fail@plt+0x21d8>
   147ec:	mov	r3, #5
   147f0:	b	147f8 <__assert_fail@plt+0x2204>
   147f4:	mov	r3, #4
   147f8:	add	r2, r2, r3
   147fc:	ldrb	r0, [r2, #40]	; 0x28
   14800:	bx	lr
   14804:	mov	r3, #1
   14808:	b	147f8 <__assert_fail@plt+0x2204>
   1480c:	mov	r3, #2
   14810:	b	147f8 <__assert_fail@plt+0x2204>
   14814:	mov	r3, #0
   14818:	b	147f8 <__assert_fail@plt+0x2204>
   1481c:	mov	r3, #3
   14820:	b	147f8 <__assert_fail@plt+0x2204>
   14824:	mov	r3, #6
   14828:	b	147f8 <__assert_fail@plt+0x2204>
   1482c:	push	{r4, lr}
   14830:	ldr	r3, [pc, #16]	; 14848 <__assert_fail@plt+0x2254>
   14834:	ldr	r2, [pc, #16]	; 1484c <__assert_fail@plt+0x2258>
   14838:	ldr	r1, [pc, #16]	; 14850 <__assert_fail@plt+0x225c>
   1483c:	ldr	r0, [pc, #16]	; 14854 <__assert_fail@plt+0x2260>
   14840:	bl	125f4 <__assert_fail@plt>
   14844:	andeq	r7, r5, r0, asr #28
   14848:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   1484c:	ldrdeq	r0, [r0], -r1
   14850:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   14854:	andeq	r0, r4, r0, ror #19
   14858:	ldr	r3, [r2, #40]	; 0x28
   1485c:	cmp	r3, #1
   14860:	beq	148c0 <__assert_fail@plt+0x22cc>
   14864:	bcc	1489c <__assert_fail@plt+0x22a8>
   14868:	cmp	r3, #2
   1486c:	bne	14894 <__assert_fail@plt+0x22a0>
   14870:	ldr	r3, [r1, #24]
   14874:	ldrd	r0, [r2, #48]	; 0x30
   14878:	mov	r2, r3
   1487c:	mov	r3, #0
   14880:	cmp	r1, r3
   14884:	cmpeq	r0, r2
   14888:	moveq	r0, #1
   1488c:	movne	r0, #0
   14890:	bx	lr
   14894:	mov	r0, #0
   14898:	bx	lr
   1489c:	ldr	r3, [r1, #24]
   148a0:	ldrd	r0, [r2, #48]	; 0x30
   148a4:	mov	r2, r3
   148a8:	mov	r3, #0
   148ac:	cmp	r3, r1
   148b0:	cmpeq	r2, r0
   148b4:	movhi	r0, #1
   148b8:	movls	r0, #0
   148bc:	bx	lr
   148c0:	ldr	r3, [r1, #24]
   148c4:	ldrd	r0, [r2, #48]	; 0x30
   148c8:	mov	r2, r3
   148cc:	mov	r3, #0
   148d0:	cmp	r3, r1
   148d4:	cmpeq	r2, r0
   148d8:	movcc	r0, #1
   148dc:	movcs	r0, #0
   148e0:	bx	lr
   148e4:	mov	r3, r1
   148e8:	add	r1, r1, #72	; 0x48
   148ec:	push	{r4, r5, r6, r7, r8, lr}
   148f0:	sub	sp, sp, #24
   148f4:	ldm	r1, {r0, r1}
   148f8:	add	ip, sp, #8
   148fc:	add	r4, r3, #88	; 0x58
   14900:	stm	ip, {r0, r1}
   14904:	ldm	r4, {r0, r1}
   14908:	add	lr, sp, #16
   1490c:	ldr	r4, [r3, #92]	; 0x5c
   14910:	ldr	r8, [r3, #76]	; 0x4c
   14914:	stm	lr, {r0, r1}
   14918:	str	r8, [sp, #12]
   1491c:	str	r4, [sp, #20]
   14920:	mov	r5, r0
   14924:	ldr	r6, [r3, #72]	; 0x48
   14928:	mov	r7, r2
   1492c:	ldm	ip, {r0, r1}
   14930:	ldm	lr, {r2, r3}
   14934:	bl	136a8 <__assert_fail@plt+0x10b4>
   14938:	cmp	r0, #0
   1493c:	movlt	r0, #0
   14940:	blt	14974 <__assert_fail@plt+0x2380>
   14944:	subs	r4, r4, r8
   14948:	addmi	r4, r4, #998244352	; 0x3b800000
   1494c:	sub	r5, r5, r6
   14950:	addmi	r4, r4, #1753088	; 0x1ac000
   14954:	addmi	r4, r4, #2560	; 0xa00
   14958:	submi	r5, r5, #1
   1495c:	str	r5, [sp]
   14960:	str	r4, [sp, #4]
   14964:	mov	r2, r7
   14968:	ldm	sp, {r0, r1}
   1496c:	ldr	r3, [pc, #8]	; 1497c <__assert_fail@plt+0x2388>
   14970:	bl	13718 <__assert_fail@plt+0x1124>
   14974:	add	sp, sp, #24
   14978:	pop	{r4, r5, r6, r7, r8, pc}
   1497c:	andeq	r5, r1, r0, lsl #3
   14980:	ldr	r0, [r2, #40]	; 0x28
   14984:	ldr	r3, [r1, #24]
   14988:	sub	r0, r0, r3
   1498c:	clz	r0, r0
   14990:	lsr	r0, r0, #5
   14994:	bx	lr
   14998:	push	{r4, r5, r6, r7, r8, lr}
   1499c:	sub	sp, sp, #104	; 0x68
   149a0:	mov	r8, r1
   149a4:	mov	r7, r2
   149a8:	mov	r6, r0
   149ac:	bl	18398 <__assert_fail@plt+0x5da4>
   149b0:	ldr	r5, [pc, #176]	; 14a68 <__assert_fail@plt+0x2474>
   149b4:	ldr	r3, [pc, #176]	; 14a6c <__assert_fail@plt+0x2478>
   149b8:	ldr	r4, [pc, #176]	; 14a70 <__assert_fail@plt+0x247c>
   149bc:	cmp	r0, #0
   149c0:	mov	r0, sp
   149c4:	movne	r4, r3
   149c8:	bl	17d40 <__assert_fail@plt+0x574c>
   149cc:	mov	r1, sp
   149d0:	ldr	r0, [r5, #12]
   149d4:	blx	r4
   149d8:	cmp	r0, #0
   149dc:	beq	14a30 <__assert_fail@plt+0x243c>
   149e0:	bl	18398 <__assert_fail@plt+0x5da4>
   149e4:	cmp	r0, #0
   149e8:	beq	14a48 <__assert_fail@plt+0x2454>
   149ec:	bl	12348 <__errno_location@plt>
   149f0:	ldr	r4, [r0]
   149f4:	cmp	r4, #2
   149f8:	beq	14a54 <__assert_fail@plt+0x2460>
   149fc:	mov	r1, r6
   14a00:	mov	r0, #0
   14a04:	bl	18c78 <__assert_fail@plt+0x6684>
   14a08:	mov	r1, r4
   14a0c:	ldr	r2, [pc, #96]	; 14a74 <__assert_fail@plt+0x2480>
   14a10:	mov	r3, r0
   14a14:	mov	r0, #0
   14a18:	bl	121ec <error@plt>
   14a1c:	mov	r3, #1
   14a20:	mov	r0, #0
   14a24:	str	r3, [r5, #28]
   14a28:	add	sp, sp, #104	; 0x68
   14a2c:	pop	{r4, r5, r6, r7, r8, pc}
   14a30:	mov	r2, r7
   14a34:	mov	r1, sp
   14a38:	mov	r0, r6
   14a3c:	bl	1477c <__assert_fail@plt+0x2188>
   14a40:	add	sp, sp, #104	; 0x68
   14a44:	pop	{r4, r5, r6, r7, r8, pc}
   14a48:	bl	12348 <__errno_location@plt>
   14a4c:	ldr	r4, [r0]
   14a50:	b	149fc <__assert_fail@plt+0x2408>
   14a54:	mov	r2, r7
   14a58:	mov	r1, r8
   14a5c:	mov	r0, r6
   14a60:	bl	1477c <__assert_fail@plt+0x2188>
   14a64:	b	14a40 <__assert_fail@plt+0x244c>
   14a68:	andeq	r7, r5, r0, asr #28
   14a6c:	andeq	r8, r1, ip, ror r2
   14a70:	ldrdeq	r8, [r1], -ip
   14a74:	andeq	r4, r4, r0, ror #18
   14a78:	ldr	r3, [pc, #164]	; 14b24 <__assert_fail@plt+0x2530>
   14a7c:	ldr	ip, [pc, #164]	; 14b28 <__assert_fail@plt+0x2534>
   14a80:	push	{r4, r5, r6, r7, lr}
   14a84:	sub	sp, sp, #12
   14a88:	ldr	r1, [r3, #12]
   14a8c:	mov	r5, r0
   14a90:	mov	r4, r2
   14a94:	ldr	r0, [r3, #16]
   14a98:	add	r2, sp, #4
   14a9c:	ldr	r3, [ip, #64]	; 0x40
   14aa0:	blx	r3
   14aa4:	cmp	r0, #0
   14aa8:	blt	14ad8 <__assert_fail@plt+0x24e4>
   14aac:	mov	r2, #0
   14ab0:	ldr	r1, [sp, #4]
   14ab4:	ldr	r0, [r4, #40]	; 0x28
   14ab8:	bl	12210 <fnmatch@plt>
   14abc:	clz	r4, r0
   14ac0:	ldr	r0, [sp, #4]
   14ac4:	bl	1251c <freecon@plt>
   14ac8:	lsr	r4, r4, #5
   14acc:	mov	r0, r4
   14ad0:	add	sp, sp, #12
   14ad4:	pop	{r4, r5, r6, r7, pc}
   14ad8:	bl	12348 <__errno_location@plt>
   14adc:	mov	r4, #0
   14ae0:	mov	r2, #5
   14ae4:	ldr	r1, [pc, #64]	; 14b2c <__assert_fail@plt+0x2538>
   14ae8:	ldr	r6, [r0]
   14aec:	mov	r0, r4
   14af0:	bl	120b4 <dcgettext@plt>
   14af4:	mov	r1, r5
   14af8:	mov	r7, r0
   14afc:	mov	r0, r4
   14b00:	bl	18c78 <__assert_fail@plt+0x6684>
   14b04:	mov	r2, r7
   14b08:	mov	r1, r6
   14b0c:	mov	r3, r0
   14b10:	mov	r0, r4
   14b14:	bl	121ec <error@plt>
   14b18:	mov	r0, r4
   14b1c:	add	sp, sp, #12
   14b20:	pop	{r4, r5, r6, r7, pc}
   14b24:	andeq	r7, r5, r0, asr #28
   14b28:	andeq	r7, r5, ip, ror #28
   14b2c:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   14b30:	push	{r4, r5, r6, r7, r8, lr}
   14b34:	subs	r8, r1, #0
   14b38:	sub	sp, sp, #256	; 0x100
   14b3c:	mov	r5, r0
   14b40:	beq	14bc8 <__assert_fail@plt+0x25d4>
   14b44:	ldr	r7, [pc, #152]	; 14be4 <__assert_fail@plt+0x25f0>
   14b48:	mov	r6, #0
   14b4c:	mov	r4, sp
   14b50:	ldr	r1, [r8, #4]
   14b54:	cmp	r1, #0
   14b58:	beq	14bdc <__assert_fail@plt+0x25e8>
   14b5c:	mov	r0, r4
   14b60:	bl	12090 <stpcpy@plt>
   14b64:	sub	r0, r0, r4
   14b68:	subs	r0, r0, #1
   14b6c:	bmi	14ba0 <__assert_fail@plt+0x25ac>
   14b70:	ldrb	r3, [r4, r0]
   14b74:	add	r2, r4, r0
   14b78:	cmp	r3, #9
   14b7c:	cmpne	r3, #32
   14b80:	beq	14b98 <__assert_fail@plt+0x25a4>
   14b84:	b	14ba0 <__assert_fail@plt+0x25ac>
   14b88:	ldrb	r3, [r2, #-1]!
   14b8c:	cmp	r3, #9
   14b90:	cmpne	r3, #32
   14b94:	bne	14ba0 <__assert_fail@plt+0x25ac>
   14b98:	subs	r0, r0, #1
   14b9c:	bcs	14b88 <__assert_fail@plt+0x2594>
   14ba0:	add	r3, sp, #256	; 0x100
   14ba4:	add	r0, r3, r0
   14ba8:	mov	r2, r4
   14bac:	strb	r6, [r0, #-255]	; 0xffffff01
   14bb0:	mov	r1, r7
   14bb4:	mov	r0, r5
   14bb8:	bl	1233c <fprintf@plt>
   14bbc:	ldr	r8, [r8, #152]	; 0x98
   14bc0:	cmp	r8, #0
   14bc4:	bne	14b50 <__assert_fail@plt+0x255c>
   14bc8:	mov	r1, r5
   14bcc:	mov	r0, #10
   14bd0:	bl	1248c <fputc@plt>
   14bd4:	add	sp, sp, #256	; 0x100
   14bd8:	pop	{r4, r5, r6, r7, r8, pc}
   14bdc:	mov	r2, r6
   14be0:	b	14bb0 <__assert_fail@plt+0x25bc>
   14be4:	andeq	r0, r4, r8, lsl #20
   14be8:	push	{r4, r5, lr}
   14bec:	subs	r4, r1, #0
   14bf0:	sub	sp, sp, #12
   14bf4:	beq	14cd8 <__assert_fail@plt+0x26e4>
   14bf8:	ldr	r1, [r4, #156]	; 0x9c
   14bfc:	mov	r5, r0
   14c00:	bl	14d20 <__assert_fail@plt+0x272c>
   14c04:	ldrb	r2, [r4, #20]
   14c08:	ldrb	lr, [r4, #19]
   14c0c:	ldr	r1, [pc, #228]	; 14cf8 <__assert_fail@plt+0x2704>
   14c10:	ldrb	r0, [r4, #18]
   14c14:	cmp	r2, #0
   14c18:	ldr	ip, [pc, #220]	; 14cfc <__assert_fail@plt+0x2708>
   14c1c:	moveq	ip, r1
   14c20:	cmp	lr, #0
   14c24:	ldr	r3, [pc, #212]	; 14d00 <__assert_fail@plt+0x270c>
   14c28:	moveq	r3, r1
   14c2c:	cmp	r0, #0
   14c30:	ldr	r2, [pc, #204]	; 14d04 <__assert_fail@plt+0x2710>
   14c34:	str	ip, [sp]
   14c38:	moveq	r2, r1
   14c3c:	mov	r0, r5
   14c40:	ldr	r1, [pc, #192]	; 14d08 <__assert_fail@plt+0x2714>
   14c44:	bl	1233c <fprintf@plt>
   14c48:	mov	r1, r4
   14c4c:	mov	r0, r5
   14c50:	bl	15f94 <__assert_fail@plt+0x39a0>
   14c54:	vldr	s15, [r4, #28]
   14c58:	ldr	r1, [pc, #172]	; 14d0c <__assert_fail@plt+0x2718>
   14c5c:	mov	r0, r5
   14c60:	vcvt.f64.f32	d7, s15
   14c64:	vmov	r2, r3, d7
   14c68:	bl	1233c <fprintf@plt>
   14c6c:	ldr	r3, [pc, #156]	; 14d10 <__assert_fail@plt+0x271c>
   14c70:	ldr	r3, [r3, #44]	; 0x2c
   14c74:	tst	r3, #64	; 0x40
   14c78:	bne	14c90 <__assert_fail@plt+0x269c>
   14c7c:	ldr	r1, [r4, #160]	; 0xa0
   14c80:	mov	r0, r5
   14c84:	add	sp, sp, #12
   14c88:	pop	{r4, r5, lr}
   14c8c:	b	14d20 <__assert_fail@plt+0x272c>
   14c90:	ldr	r3, [r4, #164]	; 0xa4
   14c94:	ldr	r2, [r4, #168]	; 0xa8
   14c98:	ldr	r1, [pc, #116]	; 14d14 <__assert_fail@plt+0x2720>
   14c9c:	mov	r0, r5
   14ca0:	bl	1233c <fprintf@plt>
   14ca4:	ldr	r3, [r4, #164]	; 0xa4
   14ca8:	cmp	r3, #0
   14cac:	beq	14ce0 <__assert_fail@plt+0x26ec>
   14cb0:	vmov	s15, r3
   14cb4:	vldr	s13, [r4, #168]	; 0xa8
   14cb8:	ldr	r1, [pc, #88]	; 14d18 <__assert_fail@plt+0x2724>
   14cbc:	mov	r0, r5
   14cc0:	vcvt.f64.u32	d7, s15
   14cc4:	vcvt.f64.u32	d6, s13
   14cc8:	vdiv.f64	d5, d6, d7
   14ccc:	vmov	r2, r3, d5
   14cd0:	bl	1233c <fprintf@plt>
   14cd4:	b	14c7c <__assert_fail@plt+0x2688>
   14cd8:	add	sp, sp, #12
   14cdc:	pop	{r4, r5, pc}
   14ce0:	mov	r3, r5
   14ce4:	mov	r2, #4
   14ce8:	mov	r1, #1
   14cec:	ldr	r0, [pc, #40]	; 14d1c <__assert_fail@plt+0x2728>
   14cf0:	bl	12168 <fwrite@plt>
   14cf4:	b	14c7c <__assert_fail@plt+0x2688>
   14cf8:	andeq	r2, r4, r0, asr r0
   14cfc:	andeq	r0, r4, r0, lsr sl
   14d00:	andeq	r0, r4, r0, lsr #20
   14d04:	andeq	r0, r4, r0, lsl sl
   14d08:	andeq	r0, r4, r0, asr #20
   14d0c:	andeq	r0, r4, r8, asr #20
   14d10:	andeq	r7, r5, ip, ror #28
   14d14:	andeq	r0, r4, r4, ror #20
   14d18:	andeq	r0, r4, r0, lsl #21
   14d1c:	andeq	r0, r4, r8, lsl #21
   14d20:	push	{r4, r5, r6, lr}
   14d24:	subs	r4, r1, #0
   14d28:	popeq	{r4, r5, r6, pc}
   14d2c:	ldr	r3, [r4]
   14d30:	ldr	r2, [pc, #160]	; 14dd8 <__assert_fail@plt+0x27e4>
   14d34:	ldr	r1, [pc, #160]	; 14ddc <__assert_fail@plt+0x27e8>
   14d38:	mov	r5, r0
   14d3c:	cmp	r3, r1
   14d40:	cmpne	r3, r2
   14d44:	beq	14d68 <__assert_fail@plt+0x2774>
   14d48:	b	14db0 <__assert_fail@plt+0x27bc>
   14d4c:	ldr	r4, [r4, #160]	; 0xa0
   14d50:	cmp	r4, #0
   14d54:	beq	14dac <__assert_fail@plt+0x27b8>
   14d58:	ldr	r3, [r4]
   14d5c:	cmp	r3, r2
   14d60:	cmpne	r3, r1
   14d64:	bne	14db0 <__assert_fail@plt+0x27bc>
   14d68:	ldr	r3, [r4, #156]	; 0x9c
   14d6c:	cmp	r3, #0
   14d70:	beq	14d4c <__assert_fail@plt+0x2758>
   14d74:	mov	r3, r5
   14d78:	mov	r2, #3
   14d7c:	mov	r1, #1
   14d80:	ldr	r0, [pc, #88]	; 14de0 <__assert_fail@plt+0x27ec>
   14d84:	bl	12168 <fwrite@plt>
   14d88:	mov	r1, r4
   14d8c:	mov	r0, r5
   14d90:	bl	14be8 <__assert_fail@plt+0x25f4>
   14d94:	mov	r3, r5
   14d98:	mov	r2, #3
   14d9c:	mov	r1, #1
   14da0:	ldr	r0, [pc, #60]	; 14de4 <__assert_fail@plt+0x27f0>
   14da4:	pop	{r4, r5, r6, lr}
   14da8:	b	12168 <fwrite@plt>
   14dac:	pop	{r4, r5, r6, pc}
   14db0:	ldr	r3, [r4, #156]	; 0x9c
   14db4:	cmp	r3, #0
   14db8:	bne	14d74 <__assert_fail@plt+0x2780>
   14dbc:	ldr	r3, [r4, #160]	; 0xa0
   14dc0:	cmp	r3, #0
   14dc4:	bne	14d74 <__assert_fail@plt+0x2780>
   14dc8:	mov	r1, r4
   14dcc:	mov	r0, r5
   14dd0:	pop	{r4, r5, r6, lr}
   14dd4:	b	14be8 <__assert_fail@plt+0x25f4>
   14dd8:	andeq	r3, r1, r0, ror #19
   14ddc:	muleq	r1, r0, r8
   14de0:	muleq	r4, r0, sl
   14de4:	muleq	r4, r4, sl
   14de8:	ldr	r3, [pc, #68]	; 14e34 <__assert_fail@plt+0x2840>
   14dec:	ldr	r3, [r3, #44]	; 0x2c
   14df0:	tst	r3, #64	; 0x40
   14df4:	bxeq	lr
   14df8:	push	{r4, r5, r6, lr}
   14dfc:	mov	r2, #42	; 0x2a
   14e00:	ldr	r5, [pc, #48]	; 14e38 <__assert_fail@plt+0x2844>
   14e04:	mov	r4, r0
   14e08:	mov	r1, #1
   14e0c:	ldr	r3, [r5]
   14e10:	ldr	r0, [pc, #36]	; 14e3c <__assert_fail@plt+0x2848>
   14e14:	bl	12168 <fwrite@plt>
   14e18:	mov	r1, r4
   14e1c:	ldr	r0, [r5]
   14e20:	bl	14be8 <__assert_fail@plt+0x25f4>
   14e24:	ldr	r1, [r5]
   14e28:	mov	r0, #10
   14e2c:	pop	{r4, r5, r6, lr}
   14e30:	b	1248c <fputc@plt>
   14e34:	andeq	r7, r5, ip, ror #28
   14e38:	andeq	r7, r5, r8, asr #10
   14e3c:	muleq	r4, r8, sl
   14e40:	cmp	r0, #0
   14e44:	bxeq	lr
   14e48:	ldr	r2, [r0]
   14e4c:	push	{r4, lr}
   14e50:	cmp	r2, #0
   14e54:	beq	14f6c <__assert_fail@plt+0x2978>
   14e58:	ldr	r3, [r0, #172]	; 0xac
   14e5c:	cmp	r3, #0
   14e60:	beq	14f58 <__assert_fail@plt+0x2964>
   14e64:	ldr	r1, [r3, #12]
   14e68:	cmp	r1, #0
   14e6c:	cmpne	r1, r2
   14e70:	bne	14f80 <__assert_fail@plt+0x298c>
   14e74:	ldr	r4, [pc, #360]	; 14fe4 <__assert_fail@plt+0x29f0>
   14e78:	ldr	lr, [pc, #360]	; 14fe8 <__assert_fail@plt+0x29f4>
   14e7c:	mov	ip, #1
   14e80:	b	14eec <__assert_fail@plt+0x28f8>
   14e84:	tst	r1, #5
   14e88:	bne	14f30 <__assert_fail@plt+0x293c>
   14e8c:	tst	r1, #64	; 0x40
   14e90:	beq	14eb8 <__assert_fail@plt+0x28c4>
   14e94:	ldrb	r3, [r0, #16]
   14e98:	cmp	r3, #0
   14e9c:	beq	14fa8 <__assert_fail@plt+0x29b4>
   14ea0:	cmp	r2, r4
   14ea4:	cmpne	r2, lr
   14ea8:	beq	14eb8 <__assert_fail@plt+0x28c4>
   14eac:	ldrb	r3, [r0, #17]
   14eb0:	cmp	r3, #0
   14eb4:	beq	14fbc <__assert_fail@plt+0x29c8>
   14eb8:	ldr	r0, [r0, #152]	; 0x98
   14ebc:	cmp	r0, #0
   14ec0:	beq	14f54 <__assert_fail@plt+0x2960>
   14ec4:	ldr	r2, [r0]
   14ec8:	cmp	r2, #0
   14ecc:	beq	14f6c <__assert_fail@plt+0x2978>
   14ed0:	ldr	r3, [r0, #172]	; 0xac
   14ed4:	cmp	r3, #0
   14ed8:	beq	14f58 <__assert_fail@plt+0x2964>
   14edc:	ldr	r1, [r3, #12]
   14ee0:	cmp	r2, r1
   14ee4:	cmpne	r1, #0
   14ee8:	bne	14f80 <__assert_fail@plt+0x298c>
   14eec:	ldr	r3, [r3]
   14ef0:	cmp	r3, #6
   14ef4:	bhi	14eb8 <__assert_fail@plt+0x28c4>
   14ef8:	lsl	r1, ip, r3
   14efc:	tst	r1, #58	; 0x3a
   14f00:	beq	14e84 <__assert_fail@plt+0x2890>
   14f04:	ldrb	r3, [r0, #17]
   14f08:	cmp	r3, #0
   14f0c:	bne	14f94 <__assert_fail@plt+0x29a0>
   14f10:	ldrb	r3, [r0, #16]
   14f14:	cmp	r3, #0
   14f18:	beq	14eb8 <__assert_fail@plt+0x28c4>
   14f1c:	ldr	r3, [pc, #200]	; 14fec <__assert_fail@plt+0x29f8>
   14f20:	ldr	r2, [pc, #200]	; 14ff0 <__assert_fail@plt+0x29fc>
   14f24:	ldr	r1, [pc, #200]	; 14ff4 <__assert_fail@plt+0x2a00>
   14f28:	ldr	r0, [pc, #200]	; 14ff8 <__assert_fail@plt+0x2a04>
   14f2c:	bl	125f4 <__assert_fail@plt>
   14f30:	cmp	r3, #0
   14f34:	beq	14fd0 <__assert_fail@plt+0x29dc>
   14f38:	cmp	r3, #2
   14f3c:	bne	14eb8 <__assert_fail@plt+0x28c4>
   14f40:	ldr	r3, [pc, #164]	; 14fec <__assert_fail@plt+0x29f8>
   14f44:	ldr	r2, [pc, #176]	; 14ffc <__assert_fail@plt+0x2a08>
   14f48:	ldr	r1, [pc, #164]	; 14ff4 <__assert_fail@plt+0x2a00>
   14f4c:	ldr	r0, [pc, #172]	; 15000 <__assert_fail@plt+0x2a0c>
   14f50:	bl	125f4 <__assert_fail@plt>
   14f54:	pop	{r4, pc}
   14f58:	ldr	r3, [pc, #140]	; 14fec <__assert_fail@plt+0x29f8>
   14f5c:	ldr	r2, [pc, #160]	; 15004 <__assert_fail@plt+0x2a10>
   14f60:	ldr	r1, [pc, #140]	; 14ff4 <__assert_fail@plt+0x2a00>
   14f64:	ldr	r0, [pc, #156]	; 15008 <__assert_fail@plt+0x2a14>
   14f68:	bl	125f4 <__assert_fail@plt>
   14f6c:	ldr	r3, [pc, #120]	; 14fec <__assert_fail@plt+0x29f8>
   14f70:	ldr	r2, [pc, #148]	; 1500c <__assert_fail@plt+0x2a18>
   14f74:	ldr	r1, [pc, #120]	; 14ff4 <__assert_fail@plt+0x2a00>
   14f78:	ldr	r0, [pc, #144]	; 15010 <__assert_fail@plt+0x2a1c>
   14f7c:	bl	125f4 <__assert_fail@plt>
   14f80:	ldr	r3, [pc, #100]	; 14fec <__assert_fail@plt+0x29f8>
   14f84:	ldr	r2, [pc, #136]	; 15014 <__assert_fail@plt+0x2a20>
   14f88:	ldr	r1, [pc, #100]	; 14ff4 <__assert_fail@plt+0x2a00>
   14f8c:	ldr	r0, [pc, #132]	; 15018 <__assert_fail@plt+0x2a24>
   14f90:	bl	125f4 <__assert_fail@plt>
   14f94:	ldr	r3, [pc, #80]	; 14fec <__assert_fail@plt+0x29f8>
   14f98:	ldr	r2, [pc, #124]	; 1501c <__assert_fail@plt+0x2a28>
   14f9c:	ldr	r1, [pc, #80]	; 14ff4 <__assert_fail@plt+0x2a00>
   14fa0:	ldr	r0, [pc, #120]	; 15020 <__assert_fail@plt+0x2a2c>
   14fa4:	bl	125f4 <__assert_fail@plt>
   14fa8:	ldr	r3, [pc, #60]	; 14fec <__assert_fail@plt+0x29f8>
   14fac:	ldr	r2, [pc, #112]	; 15024 <__assert_fail@plt+0x2a30>
   14fb0:	ldr	r1, [pc, #60]	; 14ff4 <__assert_fail@plt+0x2a00>
   14fb4:	ldr	r0, [pc, #108]	; 15028 <__assert_fail@plt+0x2a34>
   14fb8:	bl	125f4 <__assert_fail@plt>
   14fbc:	ldr	r3, [pc, #40]	; 14fec <__assert_fail@plt+0x29f8>
   14fc0:	ldr	r2, [pc, #100]	; 1502c <__assert_fail@plt+0x2a38>
   14fc4:	ldr	r1, [pc, #40]	; 14ff4 <__assert_fail@plt+0x2a00>
   14fc8:	ldr	r0, [pc, #96]	; 15030 <__assert_fail@plt+0x2a3c>
   14fcc:	bl	125f4 <__assert_fail@plt>
   14fd0:	ldr	r3, [pc, #20]	; 14fec <__assert_fail@plt+0x29f8>
   14fd4:	ldr	r2, [pc, #88]	; 15034 <__assert_fail@plt+0x2a40>
   14fd8:	ldr	r1, [pc, #20]	; 14ff4 <__assert_fail@plt+0x2a00>
   14fdc:	ldr	r0, [pc, #84]	; 15038 <__assert_fail@plt+0x2a44>
   14fe0:	bl	125f4 <__assert_fail@plt>
   14fe4:	andeq	r3, r1, r4, lsl #16
   14fe8:	andeq	r3, r1, ip, lsl r8
   14fec:	ldrdeq	r0, [r4], -ip
   14ff0:	andeq	r0, r0, r4, asr r5
   14ff4:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   14ff8:			; <UNDEFINED> instruction: 0x00040bb0
   14ffc:	andeq	r0, r0, fp, lsr r5
   15000:	andeq	r0, r4, r4, asr #22
   15004:	andeq	r0, r0, r1, lsr #10
   15008:	ldrdeq	r0, [r4], -ip
   1500c:	andeq	r0, r0, lr, lsl r5
   15010:	andeq	r0, r4, r4, asr #21
   15014:	andeq	r0, r0, sl, lsr #10
   15018:	strdeq	r0, [r4], -r4
   1501c:	andeq	r0, r0, r3, asr r5
   15020:	muleq	r4, r8, fp
   15024:	andeq	r0, r0, pc, lsr r5
   15028:	andeq	r0, r4, r4, ror fp
   1502c:	andeq	r0, r0, r5, asr #10
   15030:	andeq	r0, r4, r4, lsl #23
   15034:	andeq	r0, r0, sl, lsr r5
   15038:	andeq	r0, r4, r0, lsr #22
   1503c:	push	{r4, r5, r6, r7, r8, lr}
   15040:	mov	r6, r0
   15044:	mov	r0, #8
   15048:	mov	r7, r1
   1504c:	mov	r8, r2
   15050:	bl	2c184 <__assert_fail@plt+0x19b90>
   15054:	mov	r4, #0
   15058:	mov	r1, r8
   1505c:	mov	r2, r4
   15060:	mov	r5, r0
   15064:	str	r0, [r6]
   15068:	mov	r0, r7
   1506c:	str	r4, [r5, #4]
   15070:	bl	25218 <__assert_fail@plt+0x12c24>
   15074:	ldr	r3, [r6]
   15078:	str	r0, [r5]
   1507c:	ldr	r0, [r3]
   15080:	cmp	r0, r4
   15084:	blt	15098 <__assert_fail@plt+0x2aa4>
   15088:	mov	r1, #1
   1508c:	bl	210bc <__assert_fail@plt+0xeac8>
   15090:	mov	r0, #1
   15094:	pop	{r4, r5, r6, r7, r8, pc}
   15098:	mov	r0, r4
   1509c:	pop	{r4, r5, r6, r7, r8, pc}
   150a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150a4:	mov	r6, r0
   150a8:	sub	sp, sp, #44	; 0x2c
   150ac:	ldr	r0, [r2]
   150b0:	mov	r5, r2
   150b4:	bl	18c54 <__assert_fail@plt+0x6660>
   150b8:	subs	r3, r0, #0
   150bc:	str	r3, [sp, #28]
   150c0:	bne	15248 <__assert_fail@plt+0x2c54>
   150c4:	ldr	r3, [pc, #680]	; 15374 <__assert_fail@plt+0x2d80>
   150c8:	ldr	r2, [r5, #144]	; 0x90
   150cc:	ldr	r3, [r3]
   150d0:	cmp	r2, r3
   150d4:	bne	15324 <__assert_fail@plt+0x2d30>
   150d8:	ldr	r3, [sp, #28]
   150dc:	mov	r9, r3
   150e0:	str	r3, [sp, #24]
   150e4:	str	r3, [sp, #36]	; 0x24
   150e8:	ldrb	r3, [r5, #40]	; 0x28
   150ec:	cmp	r3, #0
   150f0:	str	r3, [sp, #32]
   150f4:	bne	151e0 <__assert_fail@plt+0x2bec>
   150f8:	ldr	r3, [r5, #136]	; 0x88
   150fc:	cmp	r3, #0
   15100:	ble	152ec <__assert_fail@plt+0x2cf8>
   15104:	ldr	r4, [sp, #32]
   15108:	add	r7, r5, #44	; 0x2c
   1510c:	add	r8, r5, #88	; 0x58
   15110:	ldr	r3, [r5, #132]	; 0x84
   15114:	ldr	sl, [r3, r4, lsl #2]
   15118:	add	r4, r4, #1
   1511c:	mov	r0, sl
   15120:	bl	12300 <strlen@plt>
   15124:	mov	fp, r0
   15128:	mov	r0, r6
   1512c:	bl	12300 <strlen@plt>
   15130:	mov	r1, #0
   15134:	str	r1, [sp, #16]
   15138:	ldr	r1, [sp, #24]
   1513c:	mov	r3, fp
   15140:	str	r1, [sp]
   15144:	mov	r2, sl
   15148:	str	r6, [sp, #8]
   1514c:	str	r9, [sp, #4]
   15150:	mov	r1, r8
   15154:	str	r0, [sp, #12]
   15158:	mov	r0, r7
   1515c:	bl	1eed0 <__assert_fail@plt+0xc8dc>
   15160:	ldr	r3, [r5, #136]	; 0x88
   15164:	cmp	r3, r4
   15168:	bgt	15110 <__assert_fail@plt+0x2b1c>
   1516c:	mov	r1, r8
   15170:	mov	r0, r7
   15174:	bl	1f08c <__assert_fail@plt+0xca98>
   15178:	ldr	r3, [r5, #148]	; 0x94
   1517c:	tst	r3, #127	; 0x7f
   15180:	beq	151a8 <__assert_fail@plt+0x2bb4>
   15184:	ldr	r3, [sp, #28]
   15188:	cmp	r3, #0
   1518c:	bne	151c8 <__assert_fail@plt+0x2bd4>
   15190:	ldr	r3, [sp, #36]	; 0x24
   15194:	cmp	r3, #0
   15198:	bne	15310 <__assert_fail@plt+0x2d1c>
   1519c:	ldr	r0, [sp, #32]
   151a0:	add	sp, sp, #44	; 0x2c
   151a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a8:	asr	r3, r3, #8
   151ac:	tst	r3, #255	; 0xff
   151b0:	moveq	r3, #1
   151b4:	movne	r3, #0
   151b8:	str	r3, [sp, #32]
   151bc:	ldr	r3, [sp, #28]
   151c0:	cmp	r3, #0
   151c4:	beq	15190 <__assert_fail@plt+0x2b9c>
   151c8:	ldr	r0, [r5, #144]	; 0x90
   151cc:	bl	2b53c <__assert_fail@plt+0x18f48>
   151d0:	ldr	r3, [sp, #36]	; 0x24
   151d4:	cmp	r3, #0
   151d8:	bne	15234 <__assert_fail@plt+0x2c40>
   151dc:	b	1519c <__assert_fail@plt+0x2ba8>
   151e0:	mov	r0, r6
   151e4:	bl	12300 <strlen@plt>
   151e8:	ldr	r2, [sp, #24]
   151ec:	mov	r3, #0
   151f0:	str	r2, [sp]
   151f4:	str	r3, [sp, #8]
   151f8:	str	r9, [sp, #4]
   151fc:	mov	r2, r6
   15200:	add	r1, r5, #88	; 0x58
   15204:	add	r3, r0, #1
   15208:	add	r0, r5, #44	; 0x2c
   1520c:	bl	1ec24 <__assert_fail@plt+0xc630>
   15210:	ldr	r3, [r5, #116]	; 0x74
   15214:	cmp	r3, #0
   15218:	bne	152cc <__assert_fail@plt+0x2cd8>
   1521c:	ldr	r3, [sp, #36]	; 0x24
   15220:	cmp	r3, #0
   15224:	beq	1519c <__assert_fail@plt+0x2ba8>
   15228:	ldr	r3, [sp, #28]
   1522c:	cmp	r3, #0
   15230:	beq	15310 <__assert_fail@plt+0x2d1c>
   15234:	ldr	r0, [sp, #36]	; 0x24
   15238:	bl	2db68 <__assert_fail@plt+0x1b574>
   1523c:	ldr	r0, [sp, #32]
   15240:	add	sp, sp, #44	; 0x2c
   15244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15248:	ldr	r3, [r5, #116]	; 0x74
   1524c:	ldr	r4, [pc, #292]	; 15378 <__assert_fail@plt+0x2d84>
   15250:	cmp	r3, #0
   15254:	bne	152a0 <__assert_fail@plt+0x2cac>
   15258:	ldr	r7, [r4, #12]
   1525c:	mov	r1, #47	; 0x2f
   15260:	mov	r0, r7
   15264:	bl	1230c <strchr@plt>
   15268:	cmp	r0, #0
   1526c:	beq	152f8 <__assert_fail@plt+0x2d04>
   15270:	mov	r0, r7
   15274:	bl	213a0 <__assert_fail@plt+0xedac>
   15278:	ldr	r1, [r4, #16]
   1527c:	mov	r7, r0
   15280:	mov	r2, r0
   15284:	add	r0, r5, #144	; 0x90
   15288:	bl	1503c <__assert_fail@plt+0x2a48>
   1528c:	mov	r8, r0
   15290:	mov	r0, r7
   15294:	bl	2db68 <__assert_fail@plt+0x1b574>
   15298:	cmp	r8, #0
   1529c:	beq	15338 <__assert_fail@plt+0x2d44>
   152a0:	ldr	r0, [r4, #12]
   152a4:	bl	212c4 <__assert_fail@plt+0xecd0>
   152a8:	ldrb	r3, [r0]
   152ac:	str	r0, [sp, #36]	; 0x24
   152b0:	cmp	r3, #47	; 0x2f
   152b4:	beq	152dc <__assert_fail@plt+0x2ce8>
   152b8:	ldr	r3, [pc, #188]	; 1537c <__assert_fail@plt+0x2d88>
   152bc:	mov	r6, r0
   152c0:	mov	r9, #2
   152c4:	str	r3, [sp, #24]
   152c8:	b	150e8 <__assert_fail@plt+0x2af4>
   152cc:	ldr	r3, [pc, #164]	; 15378 <__assert_fail@plt+0x2d84>
   152d0:	mov	r2, #1
   152d4:	strb	r2, [r3, #32]
   152d8:	b	1521c <__assert_fail@plt+0x2c28>
   152dc:	mov	r9, #0
   152e0:	str	r9, [sp, #24]
   152e4:	ldr	r6, [sp, #36]	; 0x24
   152e8:	b	150e8 <__assert_fail@plt+0x2af4>
   152ec:	add	r8, r5, #88	; 0x58
   152f0:	add	r7, r5, #44	; 0x2c
   152f4:	b	1516c <__assert_fail@plt+0x2b78>
   152f8:	ldr	r2, [pc, #128]	; 15380 <__assert_fail@plt+0x2d8c>
   152fc:	ldr	r1, [r4, #16]
   15300:	add	r0, r5, #144	; 0x90
   15304:	bl	1503c <__assert_fail@plt+0x2a48>
   15308:	mov	r8, r0
   1530c:	b	15298 <__assert_fail@plt+0x2ca4>
   15310:	ldr	r3, [pc, #108]	; 15384 <__assert_fail@plt+0x2d90>
   15314:	mov	r2, #208	; 0xd0
   15318:	ldr	r1, [pc, #104]	; 15388 <__assert_fail@plt+0x2d94>
   1531c:	ldr	r0, [pc, #104]	; 1538c <__assert_fail@plt+0x2d98>
   15320:	bl	125f4 <__assert_fail@plt>
   15324:	ldr	r3, [pc, #88]	; 15384 <__assert_fail@plt+0x2d90>
   15328:	mov	r2, #148	; 0x94
   1532c:	ldr	r1, [pc, #84]	; 15388 <__assert_fail@plt+0x2d94>
   15330:	ldr	r0, [pc, #88]	; 15390 <__assert_fail@plt+0x2d9c>
   15334:	bl	125f4 <__assert_fail@plt>
   15338:	bl	12348 <__errno_location@plt>
   1533c:	mov	r2, #5
   15340:	ldr	r1, [pc, #76]	; 15394 <__assert_fail@plt+0x2da0>
   15344:	ldr	r4, [r0]
   15348:	mov	r0, r8
   1534c:	bl	120b4 <dcgettext@plt>
   15350:	mov	r1, r6
   15354:	mov	r5, r0
   15358:	mov	r0, r8
   1535c:	bl	18c78 <__assert_fail@plt+0x6684>
   15360:	mov	r2, r5
   15364:	mov	r1, r4
   15368:	mov	r3, r0
   1536c:	mov	r0, #1
   15370:	bl	121ec <error@plt>
   15374:	andeq	r7, r5, ip, ror #10
   15378:	andeq	r7, r5, r0, asr #28
   1537c:	ldrdeq	r0, [r4], -ip
   15380:	andeq	r3, r4, r8, lsr #24
   15384:	andeq	r0, r4, r4, asr #23
   15388:	andeq	r0, r4, r4, lsr #24
   1538c:	andeq	r0, r4, r0, asr ip
   15390:	andeq	r0, r4, ip, lsr #24
   15394:	andeq	r0, r4, r0, ror #23
   15398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1539c:	mov	sl, r3
   153a0:	ldr	r9, [pc, #1056]	; 157c8 <__assert_fail@plt+0x31d4>
   153a4:	sub	sp, sp, #28
   153a8:	mov	r5, r1
   153ac:	ldr	r3, [r9, #44]	; 0x2c
   153b0:	tst	r3, #32
   153b4:	bne	15544 <__assert_fail@plt+0x2f50>
   153b8:	ldr	r6, [pc, #1036]	; 157cc <__assert_fail@plt+0x31d8>
   153bc:	ldr	r3, [pc, #1036]	; 157d0 <__assert_fail@plt+0x31dc>
   153c0:	ldr	r0, [r3]
   153c4:	bl	2db08 <__assert_fail@plt+0x1b514>
   153c8:	ldr	r0, [r6]
   153cc:	bl	2db08 <__assert_fail@plt+0x1b514>
   153d0:	ldr	r3, [pc, #1020]	; 157d4 <__assert_fail@plt+0x31e0>
   153d4:	ldr	r2, [r3]
   153d8:	cmp	r2, #0
   153dc:	bne	1552c <__assert_fail@plt+0x2f38>
   153e0:	bl	12450 <fork@plt>
   153e4:	cmn	r0, #1
   153e8:	mov	r7, r0
   153ec:	beq	1578c <__assert_fail@plt+0x3198>
   153f0:	cmp	r0, #0
   153f4:	bne	15478 <__assert_fail@plt+0x2e84>
   153f8:	ldr	r4, [r5, #104]	; 0x68
   153fc:	cmp	r4, #0
   15400:	beq	157b4 <__assert_fail@plt+0x31c0>
   15404:	ldrb	r3, [r5, #100]	; 0x64
   15408:	cmp	r3, #0
   1540c:	bne	15610 <__assert_fail@plt+0x301c>
   15410:	mov	r0, r4
   15414:	bl	2b520 <__assert_fail@plt+0x18f2c>
   15418:	cmp	r0, #0
   1541c:	bne	156e4 <__assert_fail@plt+0x30f0>
   15420:	bl	12348 <__errno_location@plt>
   15424:	mov	r5, r0
   15428:	bl	1fd18 <__assert_fail@plt+0xd724>
   1542c:	cmp	r0, #0
   15430:	bne	156dc <__assert_fail@plt+0x30e8>
   15434:	mov	r0, sl
   15438:	bl	1f56c <__assert_fail@plt+0xcf78>
   1543c:	cmp	r0, #0
   15440:	beq	156c8 <__assert_fail@plt+0x30d4>
   15444:	mov	r1, #7
   15448:	mov	r4, r1
   1544c:	str	r1, [r5]
   15450:	ldr	r1, [sl]
   15454:	mov	r0, #0
   15458:	bl	18c78 <__assert_fail@plt+0x6684>
   1545c:	mov	r1, r4
   15460:	ldr	r2, [pc, #880]	; 157d8 <__assert_fail@plt+0x31e4>
   15464:	mov	r3, r0
   15468:	mov	r0, #0
   1546c:	bl	121ec <error@plt>
   15470:	mov	r0, #1
   15474:	bl	12018 <_exit@plt>
   15478:	add	fp, r5, #108	; 0x6c
   1547c:	mov	r8, #0
   15480:	b	15494 <__assert_fail@plt+0x2ea0>
   15484:	bl	12348 <__errno_location@plt>
   15488:	ldr	r4, [r0]
   1548c:	cmp	r4, #4
   15490:	bne	155c4 <__assert_fail@plt+0x2fd0>
   15494:	mov	r2, r8
   15498:	mov	r1, fp
   1549c:	mov	r0, r7
   154a0:	bl	1218c <waitpid@plt>
   154a4:	cmn	r0, #1
   154a8:	beq	15484 <__assert_fail@plt+0x2e90>
   154ac:	ldr	r2, [r5, #108]	; 0x6c
   154b0:	and	r3, r2, #127	; 0x7f
   154b4:	add	r3, r3, #1
   154b8:	sxtb	r3, r3
   154bc:	cmp	r3, #1
   154c0:	ble	156a0 <__assert_fail@plt+0x30ac>
   154c4:	mov	r2, #5
   154c8:	ldr	r1, [pc, #780]	; 157dc <__assert_fail@plt+0x31e8>
   154cc:	mov	r0, #0
   154d0:	bl	120b4 <dcgettext@plt>
   154d4:	ldr	r2, [sl]
   154d8:	ldr	r1, [r9, #72]	; 0x48
   154dc:	mov	r4, r0
   154e0:	mov	r0, #0
   154e4:	bl	2b208 <__assert_fail@plt+0x18c14>
   154e8:	ldr	r3, [r5, #108]	; 0x6c
   154ec:	mov	r1, #0
   154f0:	and	r3, r3, #127	; 0x7f
   154f4:	str	r3, [sp]
   154f8:	mov	r2, r4
   154fc:	mov	r3, r0
   15500:	mov	r0, r1
   15504:	bl	121ec <error@plt>
   15508:	ldrb	r3, [r5]
   1550c:	cmp	r3, #0
   15510:	beq	156bc <__assert_fail@plt+0x30c8>
   15514:	ldr	r2, [pc, #708]	; 157e0 <__assert_fail@plt+0x31ec>
   15518:	mov	r3, #1
   1551c:	mov	r0, r3
   15520:	str	r3, [r2, #28]
   15524:	add	sp, sp, #28
   15528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1552c:	mov	r2, #0
   15530:	mov	r1, r2
   15534:	mov	r0, #17
   15538:	str	r2, [r3]
   1553c:	bl	1206c <signal@plt>
   15540:	b	153e0 <__assert_fail@plt+0x2dec>
   15544:	ldr	r2, [r1, #48]	; 0x30
   15548:	ldr	r6, [pc, #636]	; 157cc <__assert_fail@plt+0x31d8>
   1554c:	subs	r2, r2, #1
   15550:	mov	r3, #0
   15554:	sbc	r3, r3, #0
   15558:	ldr	r0, [r6]
   1555c:	ldr	r1, [pc, #640]	; 157e4 <__assert_fail@plt+0x31f0>
   15560:	bl	1233c <fprintf@plt>
   15564:	ldr	r3, [r5, #48]	; 0x30
   15568:	cmp	r3, #1
   1556c:	beq	155b4 <__assert_fail@plt+0x2fc0>
   15570:	mov	r4, #0
   15574:	ldr	r8, [pc, #620]	; 157e8 <__assert_fail@plt+0x31f4>
   15578:	mov	r7, r4
   1557c:	ldr	r3, [r5, #52]	; 0x34
   15580:	mov	r0, r7
   15584:	ldr	fp, [r6]
   15588:	ldr	r1, [r3, r4, lsl #2]
   1558c:	bl	18c78 <__assert_fail@plt+0x6684>
   15590:	mov	r1, r8
   15594:	add	r4, r4, #1
   15598:	mov	r2, r0
   1559c:	mov	r0, fp
   155a0:	bl	1233c <fprintf@plt>
   155a4:	ldr	r3, [r5, #48]	; 0x30
   155a8:	sub	r3, r3, #1
   155ac:	cmp	r3, r4
   155b0:	bhi	1557c <__assert_fail@plt+0x2f88>
   155b4:	ldr	r1, [r6]
   155b8:	mov	r0, #10
   155bc:	bl	1248c <fputc@plt>
   155c0:	b	153bc <__assert_fail@plt+0x2dc8>
   155c4:	mov	r2, #5
   155c8:	ldr	r1, [pc, #540]	; 157ec <__assert_fail@plt+0x31f8>
   155cc:	mov	r0, #0
   155d0:	bl	120b4 <dcgettext@plt>
   155d4:	ldr	r1, [sl]
   155d8:	mov	r5, r0
   155dc:	mov	r0, #0
   155e0:	bl	18c78 <__assert_fail@plt+0x6684>
   155e4:	mov	r2, r5
   155e8:	mov	r1, r4
   155ec:	mov	r3, r0
   155f0:	mov	r0, #0
   155f4:	bl	121ec <error@plt>
   155f8:	ldr	r3, [pc, #480]	; 157e0 <__assert_fail@plt+0x31ec>
   155fc:	mov	r2, #1
   15600:	mov	r0, #0
   15604:	str	r2, [r3, #28]
   15608:	add	sp, sp, #28
   1560c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15610:	ldr	r2, [pc, #472]	; 157f0 <__assert_fail@plt+0x31fc>
   15614:	add	r3, sp, #12
   15618:	ldm	r2, {r0, r1, r2}
   1561c:	stmia	r3!, {r0, r1}
   15620:	mov	r0, r7
   15624:	strh	r2, [r3]
   15628:	bl	125ac <close@plt>
   1562c:	cmp	r0, #0
   15630:	blt	15704 <__assert_fail@plt+0x3110>
   15634:	mov	r1, #131072	; 0x20000
   15638:	add	r0, sp, #12
   1563c:	bl	21430 <__assert_fail@plt+0xee3c>
   15640:	cmp	r0, #0
   15644:	blt	1575c <__assert_fail@plt+0x3168>
   15648:	bl	12348 <__errno_location@plt>
   1564c:	mov	r5, r0
   15650:	mov	r0, r4
   15654:	bl	2b520 <__assert_fail@plt+0x18f2c>
   15658:	cmp	r0, #0
   1565c:	beq	15428 <__assert_fail@plt+0x2e34>
   15660:	mov	r2, #5
   15664:	ldr	r1, [pc, #392]	; 157f4 <__assert_fail@plt+0x3200>
   15668:	mov	r0, #0
   1566c:	ldr	r5, [r5]
   15670:	bl	120b4 <dcgettext@plt>
   15674:	ldr	r3, [r4]
   15678:	cmp	r3, #0
   1567c:	mov	r2, r0
   15680:	blt	156f0 <__assert_fail@plt+0x30fc>
   15684:	ldr	r3, [pc, #364]	; 157f8 <__assert_fail@plt+0x3204>
   15688:	mov	r1, r3
   1568c:	str	r1, [sp]
   15690:	mov	r0, #0
   15694:	mov	r1, r5
   15698:	bl	121ec <error@plt>
   1569c:	b	15470 <__assert_fail@plt+0x2e7c>
   156a0:	ldr	r3, [r9, #44]	; 0x2c
   156a4:	asr	r2, r2, #8
   156a8:	tst	r3, #32
   156ac:	uxtb	r4, r2
   156b0:	bne	15744 <__assert_fail@plt+0x3150>
   156b4:	cmp	r4, #0
   156b8:	bne	15508 <__assert_fail@plt+0x2f14>
   156bc:	mov	r0, #1
   156c0:	add	sp, sp, #28
   156c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c8:	mov	r1, sl
   156cc:	ldr	r0, [sl]
   156d0:	bl	12030 <execvp@plt>
   156d4:	ldr	r4, [r5]
   156d8:	b	15450 <__assert_fail@plt+0x2e5c>
   156dc:	bl	1fd34 <__assert_fail@plt+0xd740>
   156e0:	b	15434 <__assert_fail@plt+0x2e40>
   156e4:	bl	12348 <__errno_location@plt>
   156e8:	mov	r5, r0
   156ec:	b	15660 <__assert_fail@plt+0x306c>
   156f0:	ldr	r1, [r4, #4]
   156f4:	cmp	r1, #0
   156f8:	ldrne	r3, [pc, #252]	; 157fc <__assert_fail@plt+0x3208>
   156fc:	bne	1568c <__assert_fail@plt+0x3098>
   15700:	b	15684 <__assert_fail@plt+0x3090>
   15704:	bl	12348 <__errno_location@plt>
   15708:	mov	r2, #5
   1570c:	ldr	r1, [pc, #236]	; 15800 <__assert_fail@plt+0x320c>
   15710:	ldr	r6, [r0]
   15714:	mov	r5, r0
   15718:	mov	r0, r7
   1571c:	bl	120b4 <dcgettext@plt>
   15720:	mov	r1, r6
   15724:	mov	r2, r0
   15728:	mov	r0, r7
   1572c:	bl	121ec <error@plt>
   15730:	mov	r0, r4
   15734:	bl	2b520 <__assert_fail@plt+0x18f2c>
   15738:	cmp	r0, #0
   1573c:	beq	15470 <__assert_fail@plt+0x2e7c>
   15740:	b	15660 <__assert_fail@plt+0x306c>
   15744:	mov	r2, r7
   15748:	ldr	r0, [r6]
   1574c:	mov	r3, r4
   15750:	ldr	r1, [pc, #172]	; 15804 <__assert_fail@plt+0x3210>
   15754:	bl	1233c <fprintf@plt>
   15758:	b	156b4 <__assert_fail@plt+0x30c0>
   1575c:	bl	12348 <__errno_location@plt>
   15760:	add	r1, sp, #12
   15764:	ldr	r6, [r0]
   15768:	mov	r5, r0
   1576c:	mov	r0, r7
   15770:	bl	18c78 <__assert_fail@plt+0x6684>
   15774:	mov	r1, r6
   15778:	ldr	r2, [pc, #88]	; 157d8 <__assert_fail@plt+0x31e4>
   1577c:	mov	r3, r0
   15780:	mov	r0, r7
   15784:	bl	121ec <error@plt>
   15788:	b	15650 <__assert_fail@plt+0x305c>
   1578c:	bl	12348 <__errno_location@plt>
   15790:	mov	r2, #5
   15794:	ldr	r1, [pc, #108]	; 15808 <__assert_fail@plt+0x3214>
   15798:	ldr	r4, [r0]
   1579c:	mov	r0, #0
   157a0:	bl	120b4 <dcgettext@plt>
   157a4:	mov	r1, r4
   157a8:	mov	r2, r0
   157ac:	mov	r0, #1
   157b0:	bl	121ec <error@plt>
   157b4:	ldr	r3, [pc, #80]	; 1580c <__assert_fail@plt+0x3218>
   157b8:	ldr	r2, [pc, #80]	; 15810 <__assert_fail@plt+0x321c>
   157bc:	ldr	r1, [pc, #80]	; 15814 <__assert_fail@plt+0x3220>
   157c0:	ldr	r0, [pc, #80]	; 15818 <__assert_fail@plt+0x3224>
   157c4:	bl	125f4 <__assert_fail@plt>
   157c8:	andeq	r7, r5, ip, ror #28
   157cc:	andeq	r7, r5, r8, asr #10
   157d0:	andeq	r7, r5, r4, asr r5
   157d4:	muleq	r5, r8, r2
   157d8:	andeq	r4, r4, r0, ror #18
   157dc:	andeq	r0, r4, r0, lsl #26
   157e0:	andeq	r7, r5, r0, asr #28
   157e4:	andeq	r0, r4, r8, asr ip
   157e8:	andeq	r6, r4, ip, ror #3
   157ec:	andeq	r0, r4, r8, ror #25
   157f0:	andeq	r0, r4, ip, asr sp
   157f4:	andeq	r0, r4, r8, asr #25
   157f8:	andeq	r2, r4, r0, asr r0
   157fc:	andeq	r3, r4, r4, asr #1
   15800:	andeq	r0, r4, ip, lsr #25
   15804:	andeq	r0, r4, ip, lsl sp
   15808:	andeq	r0, r4, r4, lsl #25
   1580c:	ldrdeq	r0, [r4], -r4
   15810:	andeq	r0, r0, r1, asr #2
   15814:	andeq	r0, r4, r4, lsr #24
   15818:	muleq	r4, r0, ip
   1581c:	push	{r4, lr}
   15820:	subs	r4, r0, #0
   15824:	beq	15850 <__assert_fail@plt+0x325c>
   15828:	ldrb	r0, [r4, #16]
   1582c:	cmp	r0, #0
   15830:	popne	{r4, pc}
   15834:	ldr	r0, [r4, #156]	; 0x9c
   15838:	bl	1581c <__assert_fail@plt+0x3228>
   1583c:	cmp	r0, #0
   15840:	popne	{r4, pc}
   15844:	ldr	r0, [r4, #160]	; 0xa0
   15848:	bl	1581c <__assert_fail@plt+0x3228>
   1584c:	pop	{r4, pc}
   15850:	mov	r0, r4
   15854:	pop	{r4, pc}
   15858:	push	{r4, r5, r6, lr}
   1585c:	subs	r4, r0, #0
   15860:	beq	15890 <__assert_fail@plt+0x329c>
   15864:	ldr	r0, [r4, #156]	; 0x9c
   15868:	bl	15858 <__assert_fail@plt+0x3264>
   1586c:	mov	r5, r0
   15870:	ldr	r0, [r4, #160]	; 0xa0
   15874:	bl	15858 <__assert_fail@plt+0x3264>
   15878:	ldr	r4, [r4, #24]
   1587c:	cmp	r5, r0
   15880:	movcs	r0, r5
   15884:	cmp	r0, r4
   15888:	movcc	r0, r4
   1588c:	pop	{r4, r5, r6, pc}
   15890:	mov	r0, r4
   15894:	pop	{r4, r5, r6, pc}
   15898:	push	{r4, r5, r6, r7, r8, lr}
   1589c:	ldr	r4, [r0]
   158a0:	cmp	r4, #0
   158a4:	beq	158e0 <__assert_fail@plt+0x32ec>
   158a8:	ldr	r3, [r4, #8]
   158ac:	mov	r5, r0
   158b0:	mov	r6, r1
   158b4:	cmp	r3, #5
   158b8:	ldrls	pc, [pc, r3, lsl #2]
   158bc:	b	159fc <__assert_fail@plt+0x3408>
   158c0:	andeq	r5, r1, r0, ror #17
   158c4:	andeq	r5, r1, r0, lsl #18
   158c8:	andeq	r5, r1, r4, lsr #18
   158cc:	andeq	r5, r1, r4, asr #18
   158d0:	andeq	r5, r1, r8, ror #18
   158d4:	andeq	r5, r1, r0, asr #19
   158d8:	cmp	r4, #0
   158dc:	bne	1591c <__assert_fail@plt+0x3328>
   158e0:	ldr	r1, [pc, #600]	; 15b40 <__assert_fail@plt+0x354c>
   158e4:	mov	r2, #5
   158e8:	mov	r0, #0
   158ec:	bl	120b4 <dcgettext@plt>
   158f0:	mov	r1, #0
   158f4:	mov	r2, r0
   158f8:	mov	r0, #1
   158fc:	bl	121ec <error@plt>
   15900:	ldr	r2, [r4, #152]	; 0x98
   15904:	str	r2, [r0]
   15908:	cmp	r2, #0
   1590c:	beq	1591c <__assert_fail@plt+0x3328>
   15910:	ldr	r3, [r2, #12]
   15914:	cmp	r3, r6
   15918:	bgt	15a08 <__assert_fail@plt+0x3414>
   1591c:	mov	r0, r4
   15920:	pop	{r4, r5, r6, r7, r8, pc}
   15924:	ldr	r3, [r4, #152]	; 0x98
   15928:	mov	r2, r4
   1592c:	str	r3, [r0]
   15930:	mov	r1, #4
   15934:	bl	15898 <__assert_fail@plt+0x32a4>
   15938:	str	r0, [r4, #160]	; 0xa0
   1593c:	ldr	r2, [r5]
   15940:	b	15908 <__assert_fail@plt+0x3314>
   15944:	ldr	r1, [pc, #504]	; 15b44 <__assert_fail@plt+0x3550>
   15948:	mov	r2, #5
   1594c:	mov	r0, #0
   15950:	bl	120b4 <dcgettext@plt>
   15954:	ldr	r3, [r4, #4]
   15958:	mov	r1, #0
   1595c:	mov	r2, r0
   15960:	mov	r0, #1
   15964:	bl	121ec <error@plt>
   15968:	ldr	r3, [r4, #152]	; 0x98
   1596c:	cmp	r3, #0
   15970:	beq	15b34 <__assert_fail@plt+0x3540>
   15974:	ldrb	r7, [r3, #33]	; 0x21
   15978:	cmp	r7, #0
   1597c:	bne	15b34 <__assert_fail@plt+0x3540>
   15980:	ldr	r2, [r3, #8]
   15984:	str	r3, [r0]
   15988:	cmp	r2, #5
   1598c:	bne	15a38 <__assert_fail@plt+0x3444>
   15990:	ldrb	r4, [r4, #33]	; 0x21
   15994:	cmp	r4, #0
   15998:	beq	15ad8 <__assert_fail@plt+0x34e4>
   1599c:	ldr	r1, [pc, #420]	; 15b48 <__assert_fail@plt+0x3554>
   159a0:	mov	r0, r7
   159a4:	bl	120b4 <dcgettext@plt>
   159a8:	ldr	r3, [r5]
   159ac:	mov	r1, r7
   159b0:	ldr	r3, [r3, #4]
   159b4:	mov	r2, r0
   159b8:	mov	r0, #1
   159bc:	bl	121ec <error@plt>
   159c0:	cmp	r2, #0
   159c4:	mov	r7, r2
   159c8:	ldreq	r1, [pc, #376]	; 15b48 <__assert_fail@plt+0x3554>
   159cc:	moveq	r2, #5
   159d0:	beq	1594c <__assert_fail@plt+0x3358>
   159d4:	ldr	r3, [r7, #8]
   159d8:	ldrb	r4, [r4, #33]	; 0x21
   159dc:	sub	r3, r3, #2
   159e0:	cmp	r3, #1
   159e4:	bls	15ae0 <__assert_fail@plt+0x34ec>
   159e8:	cmp	r4, #0
   159ec:	bne	15a74 <__assert_fail@plt+0x3480>
   159f0:	mov	r2, #5
   159f4:	ldr	r1, [pc, #336]	; 15b4c <__assert_fail@plt+0x3558>
   159f8:	b	158e8 <__assert_fail@plt+0x32f4>
   159fc:	mov	r2, #5
   15a00:	ldr	r1, [pc, #328]	; 15b50 <__assert_fail@plt+0x355c>
   15a04:	b	158e8 <__assert_fail@plt+0x32f4>
   15a08:	ldr	r3, [r2, #8]
   15a0c:	cmp	r3, #5
   15a10:	beq	158e0 <__assert_fail@plt+0x32ec>
   15a14:	cmp	r3, #5
   15a18:	ldrls	pc, [pc, r3, lsl #2]
   15a1c:	b	15b0c <__assert_fail@plt+0x3518>
   15a20:	andeq	r5, r1, r0, ror #17
   15a24:	andeq	r5, r1, r0, ror #17
   15a28:	andeq	r5, r1, r0, ror #17
   15a2c:	muleq	r1, r8, sl
   15a30:	andeq	r5, r1, r0, ror #17
   15a34:	ldrdeq	r5, [r1], -r8
   15a38:	mov	r2, r4
   15a3c:	mov	r1, r7
   15a40:	bl	15898 <__assert_fail@plt+0x32a4>
   15a44:	ldr	r3, [r5]
   15a48:	cmp	r3, #0
   15a4c:	mov	r4, r0
   15a50:	beq	15a68 <__assert_fail@plt+0x3474>
   15a54:	ldr	r2, [r3, #8]
   15a58:	cmp	r2, #5
   15a5c:	ldreq	r2, [r3, #152]	; 0x98
   15a60:	streq	r2, [r5]
   15a64:	beq	15908 <__assert_fail@plt+0x3314>
   15a68:	mov	r2, #5
   15a6c:	ldr	r1, [pc, #224]	; 15b54 <__assert_fail@plt+0x3560>
   15a70:	b	158e8 <__assert_fail@plt+0x32f4>
   15a74:	mov	r2, #5
   15a78:	ldr	r1, [pc, #216]	; 15b58 <__assert_fail@plt+0x3564>
   15a7c:	mov	r0, #0
   15a80:	bl	120b4 <dcgettext@plt>
   15a84:	ldr	r3, [r7, #4]
   15a88:	mov	r1, #0
   15a8c:	mov	r2, r0
   15a90:	mov	r0, #1
   15a94:	bl	121ec <error@plt>
   15a98:	str	r4, [r2, #156]	; 0x9c
   15a9c:	ldr	r4, [r5]
   15aa0:	mov	r0, r5
   15aa4:	ldr	r3, [r4, #152]	; 0x98
   15aa8:	ldrsh	r1, [r4, #12]
   15aac:	str	r3, [r5]
   15ab0:	bl	15898 <__assert_fail@plt+0x32a4>
   15ab4:	str	r0, [r4, #160]	; 0xa0
   15ab8:	ldr	r2, [r5]
   15abc:	cmp	r2, #0
   15ac0:	beq	1591c <__assert_fail@plt+0x3328>
   15ac4:	ldr	r3, [r2, #12]
   15ac8:	cmp	r6, r3
   15acc:	bge	1591c <__assert_fail@plt+0x3328>
   15ad0:	ldr	r3, [r2, #8]
   15ad4:	b	15a14 <__assert_fail@plt+0x3420>
   15ad8:	ldr	r1, [pc, #124]	; 15b5c <__assert_fail@plt+0x3568>
   15adc:	b	158e8 <__assert_fail@plt+0x32f4>
   15ae0:	cmp	r4, #0
   15ae4:	bne	15a74 <__assert_fail@plt+0x3480>
   15ae8:	mov	r2, #5
   15aec:	ldr	r1, [pc, #108]	; 15b60 <__assert_fail@plt+0x356c>
   15af0:	mov	r0, r4
   15af4:	bl	120b4 <dcgettext@plt>
   15af8:	ldr	r3, [r7, #4]
   15afc:	mov	r1, r4
   15b00:	mov	r2, r0
   15b04:	mov	r0, #1
   15b08:	bl	121ec <error@plt>
   15b0c:	mov	r2, #5
   15b10:	ldr	r1, [pc, #76]	; 15b64 <__assert_fail@plt+0x3570>
   15b14:	mov	r0, #0
   15b18:	bl	120b4 <dcgettext@plt>
   15b1c:	ldr	r3, [r5]
   15b20:	mov	r1, #0
   15b24:	ldr	r3, [r3, #8]
   15b28:	mov	r2, r0
   15b2c:	mov	r0, #1
   15b30:	bl	121ec <error@plt>
   15b34:	mov	r2, #5
   15b38:	ldr	r1, [pc, #40]	; 15b68 <__assert_fail@plt+0x3574>
   15b3c:	b	1594c <__assert_fail@plt+0x3358>
   15b40:	andeq	r0, r4, r0, asr lr
   15b44:	andeq	r0, r4, r4, ror #28
   15b48:			; <UNDEFINED> instruction: 0x00040eb8
   15b4c:	andeq	r0, r4, r4, asr pc
   15b50:	andeq	r1, r4, ip, ror r0
   15b54:	andeq	r1, r4, r8, lsr #32
   15b58:	andeq	r0, r4, r0, lsr pc
   15b5c:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   15b60:	andeq	r0, r4, r4, lsl #30
   15b64:	andeq	r1, r4, r0, lsr #1
   15b68:	andeq	r0, r4, r0, lsl #31
   15b6c:	push	{lr}		; (str lr, [sp, #-4]!)
   15b70:	sub	sp, sp, #12
   15b74:	ldr	r2, [r1]
   15b78:	add	r1, sp, #8
   15b7c:	ldr	r3, [r0]
   15b80:	str	r2, [r1, #-4]!
   15b84:	mov	r0, sp
   15b88:	mov	r2, #4
   15b8c:	str	r3, [sp]
   15b90:	bl	12084 <memcmp@plt>
   15b94:	add	sp, sp, #12
   15b98:	pop	{pc}		; (ldr pc, [sp], #4)
   15b9c:	push	{r4, r5, r6, lr}
   15ba0:	mov	r5, r0
   15ba4:	mov	r0, #176	; 0xb0
   15ba8:	mov	r4, r1
   15bac:	mov	r6, r2
   15bb0:	bl	2c5b4 <__assert_fail@plt+0x19fc0>
   15bb4:	mov	r2, #3
   15bb8:	mov	r3, #0
   15bbc:	cmp	r4, #2
   15bc0:	str	r4, [r0, #12]
   15bc4:	str	r2, [r0, #8]
   15bc8:	str	r3, [r0, #24]
   15bcc:	beq	15c38 <__assert_fail@plt+0x3644>
   15bd0:	cmp	r4, r2
   15bd4:	beq	15c08 <__assert_fail@plt+0x3614>
   15bd8:	cmp	r4, #1
   15bdc:	beq	15bec <__assert_fail@plt+0x35f8>
   15be0:	str	r5, [r0, #160]	; 0xa0
   15be4:	str	r0, [r6]
   15be8:	pop	{r4, r5, r6, pc}
   15bec:	ldr	r1, [pc, #116]	; 15c68 <__assert_fail@plt+0x3674>
   15bf0:	ldr	r3, [pc, #116]	; 15c6c <__assert_fail@plt+0x3678>
   15bf4:	mov	r2, #1065353216	; 0x3f800000
   15bf8:	str	r1, [r0]
   15bfc:	str	r2, [r0, #28]
   15c00:	str	r3, [r0, #4]
   15c04:	b	15be0 <__assert_fail@plt+0x35ec>
   15c08:	vldr	s15, [r5, #28]
   15c0c:	vldr	s14, [pc, #76]	; 15c60 <__assert_fail@plt+0x366c>
   15c10:	ldr	r2, [pc, #88]	; 15c70 <__assert_fail@plt+0x367c>
   15c14:	ldr	r3, [pc, #88]	; 15c74 <__assert_fail@plt+0x3680>
   15c18:	vcmpe.f32	s15, s14
   15c1c:	str	r2, [r0]
   15c20:	str	r3, [r0, #4]
   15c24:	vmrs	APSR_nzcv, fpscr
   15c28:	vmovgt.f32	s15, s14
   15c2c:	ble	15c4c <__assert_fail@plt+0x3658>
   15c30:	vstr	s15, [r0, #28]
   15c34:	b	15be0 <__assert_fail@plt+0x35ec>
   15c38:	vldr	s15, [r5, #28]
   15c3c:	vldr	s14, [pc, #28]	; 15c60 <__assert_fail@plt+0x366c>
   15c40:	ldr	r2, [pc, #48]	; 15c78 <__assert_fail@plt+0x3684>
   15c44:	ldr	r3, [pc, #48]	; 15c7c <__assert_fail@plt+0x3688>
   15c48:	b	15c18 <__assert_fail@plt+0x3624>
   15c4c:	vldr	s14, [pc, #16]	; 15c64 <__assert_fail@plt+0x3670>
   15c50:	vcmp.f32	s15, s14
   15c54:	vmrs	APSR_nzcv, fpscr
   15c58:	vmovmi.f32	s15, s14
   15c5c:	b	15c30 <__assert_fail@plt+0x363c>
   15c60:	svccc	0x00800000
   15c64:	andeq	r0, r0, r0
   15c68:	andeq	r3, r1, r8, asr fp
   15c6c:	andeq	r1, r4, r8, asr #1
   15c70:	muleq	r1, r0, r8
   15c74:	ldrdeq	r1, [r4], -r0
   15c78:	andeq	r3, r1, r0, ror #19
   15c7c:	andeq	r1, r4, ip, asr #1
   15c80:	cmp	r1, #0
   15c84:	push	{r4, r5, r6, lr}
   15c88:	mov	r4, r0
   15c8c:	beq	15c9c <__assert_fail@plt+0x36a8>
   15c90:	ldr	r3, [r0, #8]
   15c94:	cmp	r3, #3
   15c98:	bne	15ce4 <__assert_fail@plt+0x36f0>
   15c9c:	mov	r5, #0
   15ca0:	ldr	r0, [r4, #156]	; 0x9c
   15ca4:	cmp	r0, #0
   15ca8:	beq	15cc0 <__assert_fail@plt+0x36cc>
   15cac:	ldr	r3, [r0, #8]
   15cb0:	cmp	r3, #3
   15cb4:	bne	15cd0 <__assert_fail@plt+0x36dc>
   15cb8:	mov	r1, r5
   15cbc:	bl	15c80 <__assert_fail@plt+0x368c>
   15cc0:	ldr	r4, [r4, #160]	; 0xa0
   15cc4:	cmp	r4, #0
   15cc8:	bne	15ca0 <__assert_fail@plt+0x36ac>
   15ccc:	pop	{r4, r5, r6, pc}
   15cd0:	ldr	r3, [pc, #32]	; 15cf8 <__assert_fail@plt+0x3704>
   15cd4:	ldr	r2, [pc, #32]	; 15cfc <__assert_fail@plt+0x3708>
   15cd8:	ldr	r1, [pc, #32]	; 15d00 <__assert_fail@plt+0x370c>
   15cdc:	ldr	r0, [pc, #32]	; 15d04 <__assert_fail@plt+0x3710>
   15ce0:	bl	125f4 <__assert_fail@plt>
   15ce4:	ldr	r3, [pc, #12]	; 15cf8 <__assert_fail@plt+0x3704>
   15ce8:	ldr	r2, [pc, #24]	; 15d08 <__assert_fail@plt+0x3714>
   15cec:	ldr	r1, [pc, #12]	; 15d00 <__assert_fail@plt+0x370c>
   15cf0:	ldr	r0, [pc, #20]	; 15d0c <__assert_fail@plt+0x3718>
   15cf4:	bl	125f4 <__assert_fail@plt>
   15cf8:	andeq	r0, r4, r8, ror #26
   15cfc:	ldrdeq	r0, [r0], -r3
   15d00:	ldrdeq	r1, [r4], -r4
   15d04:	strdeq	r1, [r4], -r0
   15d08:	andeq	r0, r0, lr, asr #9
   15d0c:	ldrdeq	r1, [r4], -ip
   15d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d14:	subs	r6, r0, #0
   15d18:	sub	sp, sp, #12
   15d1c:	beq	15df0 <__assert_fail@plt+0x37fc>
   15d20:	ldr	r0, [r6, #160]	; 0xa0
   15d24:	bl	15d10 <__assert_fail@plt+0x371c>
   15d28:	ldr	r0, [r6, #156]	; 0x9c
   15d2c:	bl	15d10 <__assert_fail@plt+0x371c>
   15d30:	ldrb	r3, [r6, #18]
   15d34:	cmp	r3, #0
   15d38:	movne	r9, #3
   15d3c:	beq	15df8 <__assert_fail@plt+0x3804>
   15d40:	ldr	r3, [r6]
   15d44:	ldr	r1, [pc, #400]	; 15edc <__assert_fail@plt+0x38e8>
   15d48:	ldr	r2, [pc, #400]	; 15ee0 <__assert_fail@plt+0x38ec>
   15d4c:	cmp	r3, r2
   15d50:	cmpne	r3, r1
   15d54:	beq	15e2c <__assert_fail@plt+0x3838>
   15d58:	ldr	r2, [pc, #388]	; 15ee4 <__assert_fail@plt+0x38f0>
   15d5c:	cmp	r3, r2
   15d60:	ldreq	r3, [r6, #24]
   15d64:	beq	15de4 <__assert_fail@plt+0x37f0>
   15d68:	ldr	sl, [pc, #376]	; 15ee8 <__assert_fail@plt+0x38f4>
   15d6c:	ldr	r2, [sl]
   15d70:	cmp	r2, #0
   15d74:	beq	15e50 <__assert_fail@plt+0x385c>
   15d78:	ldr	r8, [pc, #364]	; 15eec <__assert_fail@plt+0x38f8>
   15d7c:	add	r7, sp, #8
   15d80:	mov	r5, #0
   15d84:	mov	sl, #59	; 0x3b
   15d88:	str	r3, [r7, #-8]!
   15d8c:	add	r4, sl, r5
   15d90:	mov	r0, r7
   15d94:	lsr	r4, r4, #1
   15d98:	add	fp, r8, r4, lsl #3
   15d9c:	mov	r1, fp
   15da0:	bl	15b6c <__assert_fail@plt+0x3578>
   15da4:	cmp	r0, #0
   15da8:	blt	15e1c <__assert_fail@plt+0x3828>
   15dac:	beq	15e40 <__assert_fail@plt+0x384c>
   15db0:	add	r5, r4, #1
   15db4:	cmp	r5, sl
   15db8:	bcc	15d8c <__assert_fail@plt+0x3798>
   15dbc:	mov	r2, #5
   15dc0:	ldr	r1, [pc, #296]	; 15ef0 <__assert_fail@plt+0x38fc>
   15dc4:	mov	r0, #0
   15dc8:	bl	120b4 <dcgettext@plt>
   15dcc:	mov	r1, #0
   15dd0:	ldr	r3, [r6, #4]
   15dd4:	mov	r2, r0
   15dd8:	mov	r0, r1
   15ddc:	bl	121ec <error@plt>
   15de0:	mov	r3, #10
   15de4:	cmp	r9, r3
   15de8:	movcc	r9, r3
   15dec:	str	r9, [r6, #24]
   15df0:	add	sp, sp, #12
   15df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df8:	ldrb	r3, [r6, #20]
   15dfc:	cmp	r3, #0
   15e00:	movne	r9, #1
   15e04:	bne	15d40 <__assert_fail@plt+0x374c>
   15e08:	ldrb	r9, [r6, #19]
   15e0c:	cmp	r9, #0
   15e10:	movne	r9, #2
   15e14:	moveq	r9, #0
   15e18:	b	15d40 <__assert_fail@plt+0x374c>
   15e1c:	cmp	r4, r5
   15e20:	mov	sl, r4
   15e24:	bhi	15d8c <__assert_fail@plt+0x3798>
   15e28:	b	15dbc <__assert_fail@plt+0x37c8>
   15e2c:	ldrb	r9, [r6, #40]	; 0x28
   15e30:	cmp	r9, #0
   15e34:	moveq	r9, #8
   15e38:	movne	r9, #7
   15e3c:	b	15dec <__assert_fail@plt+0x37f8>
   15e40:	cmp	fp, #0
   15e44:	beq	15dbc <__assert_fail@plt+0x37c8>
   15e48:	ldr	r3, [fp, #4]
   15e4c:	b	15de4 <__assert_fail@plt+0x37f0>
   15e50:	ldr	r3, [pc, #156]	; 15ef4 <__assert_fail@plt+0x3900>
   15e54:	mov	r2, #8
   15e58:	mov	r1, #59	; 0x3b
   15e5c:	ldr	r0, [pc, #136]	; 15eec <__assert_fail@plt+0x38f8>
   15e60:	bl	12510 <qsort@plt>
   15e64:	ldr	r8, [pc, #128]	; 15eec <__assert_fail@plt+0x38f8>
   15e68:	mov	r4, r8
   15e6c:	add	r7, r8, #464	; 0x1d0
   15e70:	add	r5, r4, #8
   15e74:	mov	r0, r5
   15e78:	mov	r1, r4
   15e7c:	bl	15b6c <__assert_fail@plt+0x3578>
   15e80:	cmp	r0, #0
   15e84:	blt	15eb8 <__assert_fail@plt+0x38c4>
   15e88:	mov	r0, r4
   15e8c:	mov	r1, r5
   15e90:	bl	15b6c <__assert_fail@plt+0x3578>
   15e94:	cmp	r0, #0
   15e98:	bgt	15ec8 <__assert_fail@plt+0x38d4>
   15e9c:	cmp	r7, r5
   15ea0:	mov	r4, r5
   15ea4:	bne	15e70 <__assert_fail@plt+0x387c>
   15ea8:	mov	r3, #1
   15eac:	str	r3, [sl]
   15eb0:	ldr	r3, [r6]
   15eb4:	b	15d7c <__assert_fail@plt+0x3788>
   15eb8:	ldr	r2, [pc, #56]	; 15ef8 <__assert_fail@plt+0x3904>
   15ebc:	mov	r1, #0
   15ec0:	mov	r0, #1
   15ec4:	bl	121ec <error@plt>
   15ec8:	ldr	r3, [pc, #44]	; 15efc <__assert_fail@plt+0x3908>
   15ecc:	ldr	r2, [pc, #44]	; 15f00 <__assert_fail@plt+0x390c>
   15ed0:	ldr	r1, [pc, #44]	; 15f04 <__assert_fail@plt+0x3910>
   15ed4:	ldr	r0, [pc, #44]	; 15f08 <__assert_fail@plt+0x3914>
   15ed8:	bl	125f4 <__assert_fail@plt>
   15edc:	andeq	r3, r1, ip, lsl #29
   15ee0:	muleq	r1, r0, lr
   15ee4:	andeq	sl, r1, r4, ror #1
   15ee8:	andeq	r7, r5, r0, ror r5
   15eec:	muleq	r5, ip, r2
   15ef0:	andeq	r1, r4, ip, lsl r1
   15ef4:	andeq	r5, r1, ip, ror #22
   15ef8:	andeq	r1, r4, ip, lsl #3
   15efc:	andeq	r0, r4, ip, ror sp
   15f00:	strdeq	r0, [r0], -r5
   15f04:	ldrdeq	r1, [r4], -r4
   15f08:	andeq	r1, r4, r0, lsl r1
   15f0c:	push	{r4, r5, r6, r7, r8, lr}
   15f10:	cmp	r1, #0
   15f14:	ldr	r5, [pc, #112]	; 15f8c <__assert_fail@plt+0x3998>
   15f18:	movne	r6, #16
   15f1c:	moveq	r6, #0
   15f20:	ldr	r3, [r5, #4]
   15f24:	cmp	r3, #0
   15f28:	beq	15f74 <__assert_fail@plt+0x3980>
   15f2c:	mov	r7, r0
   15f30:	mov	r4, #0
   15f34:	b	15f44 <__assert_fail@plt+0x3950>
   15f38:	ldr	r3, [r5, #4]
   15f3c:	cmp	r3, r4
   15f40:	bls	15f6c <__assert_fail@plt+0x3978>
   15f44:	ldr	r3, [r5, #8]
   15f48:	mov	r2, r6
   15f4c:	mov	r0, r7
   15f50:	ldr	r1, [r3, r4, lsl #2]
   15f54:	bl	12210 <fnmatch@plt>
   15f58:	add	r4, r4, #1
   15f5c:	cmp	r0, #0
   15f60:	bne	15f38 <__assert_fail@plt+0x3944>
   15f64:	mov	r0, #1
   15f68:	pop	{r4, r5, r6, r7, r8, pc}
   15f6c:	mov	r0, #0
   15f70:	pop	{r4, r5, r6, r7, r8, pc}
   15f74:	mov	r2, r6
   15f78:	ldr	r1, [pc, #16]	; 15f90 <__assert_fail@plt+0x399c>
   15f7c:	bl	12210 <fnmatch@plt>
   15f80:	clz	r0, r0
   15f84:	lsr	r0, r0, #5
   15f88:	pop	{r4, r5, r6, r7, r8, pc}
   15f8c:	andeq	r7, r5, r0, ror r5
   15f90:	andeq	r3, r4, r8, lsr #24
   15f94:	mov	r2, r1
   15f98:	mov	r1, r0
   15f9c:	ldr	r3, [r2, #36]	; 0x24
   15fa0:	cmp	r3, #0
   15fa4:	beq	15fb4 <__assert_fail@plt+0x39c0>
   15fa8:	ldr	r2, [r2, #4]
   15fac:	ldr	r1, [pc, #8]	; 15fbc <__assert_fail@plt+0x39c8>
   15fb0:	b	1233c <fprintf@plt>
   15fb4:	ldr	r0, [r2, #4]
   15fb8:	b	12588 <fputs@plt>
   15fbc:			; <UNDEFINED> instruction: 0x000411b0
   15fc0:	ldr	r3, [pc, #4]	; 15fcc <__assert_fail@plt+0x39d8>
   15fc4:	ldr	r0, [r3, #12]
   15fc8:	bx	lr
   15fcc:	andeq	r7, r5, r0, ror r5
   15fd0:	push	{r4, lr}
   15fd4:	subs	r4, r0, #0
   15fd8:	beq	16194 <__assert_fail@plt+0x3ba0>
   15fdc:	ldr	r0, [r4, #160]	; 0xa0
   15fe0:	cmp	r0, #0
   15fe4:	beq	15fec <__assert_fail@plt+0x39f8>
   15fe8:	bl	15fd0 <__assert_fail@plt+0x39dc>
   15fec:	ldr	r0, [r4, #156]	; 0x9c
   15ff0:	cmp	r0, #0
   15ff4:	beq	15ffc <__assert_fail@plt+0x3a08>
   15ff8:	bl	15fd0 <__assert_fail@plt+0x39dc>
   15ffc:	ldr	r3, [r4, #8]
   16000:	cmp	r3, #5
   16004:	beq	16180 <__assert_fail@plt+0x3b8c>
   16008:	cmp	r3, #4
   1600c:	beq	1616c <__assert_fail@plt+0x3b78>
   16010:	cmp	r3, #3
   16014:	ldrls	pc, [pc, r3, lsl #2]
   16018:	b	16114 <__assert_fail@plt+0x3b20>
   1601c:	muleq	r1, r4, r0
   16020:	strheq	r6, [r1], -r4
   16024:	andeq	r6, r1, r0, ror #1
   16028:	andeq	r6, r1, ip, lsr #32
   1602c:	ldr	r3, [r4]
   16030:	ldr	r2, [pc, #496]	; 16228 <__assert_fail@plt+0x3c34>
   16034:	cmp	r3, r2
   16038:	beq	1613c <__assert_fail@plt+0x3b48>
   1603c:	ldr	r2, [pc, #488]	; 1622c <__assert_fail@plt+0x3c38>
   16040:	cmp	r3, r2
   16044:	beq	16164 <__assert_fail@plt+0x3b70>
   16048:	ldr	r2, [pc, #480]	; 16230 <__assert_fail@plt+0x3c3c>
   1604c:	cmp	r3, r2
   16050:	bne	1620c <__assert_fail@plt+0x3c18>
   16054:	ldr	r3, [r4, #160]	; 0xa0
   16058:	cmp	r3, #0
   1605c:	vldrne	s15, [r3, #28]
   16060:	ldr	r3, [r4, #156]	; 0x9c
   16064:	vldreq	s15, [pc, #436]	; 16220 <__assert_fail@plt+0x3c2c>
   16068:	cmp	r3, #0
   1606c:	vldrne	s0, [r3, #28]
   16070:	vldreq	s0, [pc, #424]	; 16220 <__assert_fail@plt+0x3c2c>
   16074:	vadd.f32	s0, s0, s15
   16078:	vldr	s15, [pc, #416]	; 16220 <__assert_fail@plt+0x3c2c>
   1607c:	vcmpe.f32	s0, s15
   16080:	vmrs	APSR_nzcv, fpscr
   16084:	vmovgt.f32	s0, s15
   16088:	ble	16128 <__assert_fail@plt+0x3b34>
   1608c:	vstr	s0, [r4, #28]
   16090:	pop	{r4, pc}
   16094:	ldr	r3, [r4, #160]	; 0xa0
   16098:	cmp	r3, #0
   1609c:	bne	161d0 <__assert_fail@plt+0x3bdc>
   160a0:	ldr	r3, [r4, #156]	; 0x9c
   160a4:	cmp	r3, #0
   160a8:	bne	161f8 <__assert_fail@plt+0x3c04>
   160ac:	vldr	s0, [r4, #28]
   160b0:	pop	{r4, pc}
   160b4:	ldr	r3, [r4, #160]	; 0xa0
   160b8:	cmp	r3, #0
   160bc:	bne	161e4 <__assert_fail@plt+0x3bf0>
   160c0:	ldr	r3, [r4, #156]	; 0x9c
   160c4:	cmp	r3, #0
   160c8:	beq	160ac <__assert_fail@plt+0x3ab8>
   160cc:	ldr	r3, [pc, #352]	; 16234 <__assert_fail@plt+0x3c40>
   160d0:	ldr	r2, [pc, #352]	; 16238 <__assert_fail@plt+0x3c44>
   160d4:	ldr	r1, [pc, #352]	; 1623c <__assert_fail@plt+0x3c48>
   160d8:	ldr	r0, [pc, #352]	; 16240 <__assert_fail@plt+0x3c4c>
   160dc:	bl	125f4 <__assert_fail@plt>
   160e0:	ldr	r3, [pc, #348]	; 16244 <__assert_fail@plt+0x3c50>
   160e4:	ldr	r2, [r4]
   160e8:	cmp	r2, r3
   160ec:	bne	161bc <__assert_fail@plt+0x3bc8>
   160f0:	ldr	r3, [r4, #156]	; 0x9c
   160f4:	cmp	r3, #0
   160f8:	bne	161a8 <__assert_fail@plt+0x3bb4>
   160fc:	ldr	r3, [r4, #160]	; 0xa0
   16100:	vldr	s0, [pc, #280]	; 16220 <__assert_fail@plt+0x3c2c>
   16104:	vldr	s15, [r3, #28]
   16108:	vsub.f32	s0, s0, s15
   1610c:	vstr	s0, [r4, #28]
   16110:	pop	{r4, pc}
   16114:	ldr	r3, [pc, #280]	; 16234 <__assert_fail@plt+0x3c40>
   16118:	mov	r2, #1216	; 0x4c0
   1611c:	ldr	r1, [pc, #280]	; 1623c <__assert_fail@plt+0x3c48>
   16120:	ldr	r0, [pc, #288]	; 16248 <__assert_fail@plt+0x3c54>
   16124:	bl	125f4 <__assert_fail@plt>
   16128:	vldr	s15, [pc, #244]	; 16224 <__assert_fail@plt+0x3c30>
   1612c:	vcmp.f32	s0, s15
   16130:	vmrs	APSR_nzcv, fpscr
   16134:	vmovmi.f32	s0, s15
   16138:	b	1608c <__assert_fail@plt+0x3a98>
   1613c:	ldr	r3, [r4, #160]	; 0xa0
   16140:	cmp	r3, #0
   16144:	vldrne	s0, [r3, #28]
   16148:	ldr	r3, [r4, #156]	; 0x9c
   1614c:	vldreq	s0, [pc, #204]	; 16220 <__assert_fail@plt+0x3c2c>
   16150:	cmp	r3, #0
   16154:	vldrne	s15, [r3, #28]
   16158:	vldreq	s15, [pc, #192]	; 16220 <__assert_fail@plt+0x3c2c>
   1615c:	vmul.f32	s0, s0, s15
   16160:	b	16078 <__assert_fail@plt+0x3a84>
   16164:	vldr	s0, [pc, #180]	; 16220 <__assert_fail@plt+0x3c2c>
   16168:	b	1608c <__assert_fail@plt+0x3a98>
   1616c:	ldr	r3, [pc, #192]	; 16234 <__assert_fail@plt+0x3c40>
   16170:	ldr	r2, [pc, #212]	; 1624c <__assert_fail@plt+0x3c58>
   16174:	ldr	r1, [pc, #192]	; 1623c <__assert_fail@plt+0x3c48>
   16178:	ldr	r0, [pc, #208]	; 16250 <__assert_fail@plt+0x3c5c>
   1617c:	bl	125f4 <__assert_fail@plt>
   16180:	ldr	r3, [pc, #172]	; 16234 <__assert_fail@plt+0x3c40>
   16184:	ldr	r2, [pc, #200]	; 16254 <__assert_fail@plt+0x3c60>
   16188:	ldr	r1, [pc, #172]	; 1623c <__assert_fail@plt+0x3c48>
   1618c:	ldr	r0, [pc, #196]	; 16258 <__assert_fail@plt+0x3c64>
   16190:	bl	125f4 <__assert_fail@plt>
   16194:	ldr	r3, [pc, #152]	; 16234 <__assert_fail@plt+0x3c40>
   16198:	ldr	r2, [pc, #188]	; 1625c <__assert_fail@plt+0x3c68>
   1619c:	ldr	r1, [pc, #152]	; 1623c <__assert_fail@plt+0x3c48>
   161a0:	ldr	r0, [pc, #184]	; 16260 <__assert_fail@plt+0x3c6c>
   161a4:	bl	125f4 <__assert_fail@plt>
   161a8:	ldr	r3, [pc, #132]	; 16234 <__assert_fail@plt+0x3c40>
   161ac:	ldr	r2, [pc, #176]	; 16264 <__assert_fail@plt+0x3c70>
   161b0:	ldr	r1, [pc, #132]	; 1623c <__assert_fail@plt+0x3c48>
   161b4:	ldr	r0, [pc, #132]	; 16240 <__assert_fail@plt+0x3c4c>
   161b8:	bl	125f4 <__assert_fail@plt>
   161bc:	ldr	r3, [pc, #112]	; 16234 <__assert_fail@plt+0x3c40>
   161c0:	ldr	r2, [pc, #160]	; 16268 <__assert_fail@plt+0x3c74>
   161c4:	ldr	r1, [pc, #112]	; 1623c <__assert_fail@plt+0x3c48>
   161c8:	ldr	r0, [pc, #156]	; 1626c <__assert_fail@plt+0x3c78>
   161cc:	bl	125f4 <__assert_fail@plt>
   161d0:	ldr	r3, [pc, #92]	; 16234 <__assert_fail@plt+0x3c40>
   161d4:	ldr	r2, [pc, #148]	; 16270 <__assert_fail@plt+0x3c7c>
   161d8:	ldr	r1, [pc, #92]	; 1623c <__assert_fail@plt+0x3c48>
   161dc:	ldr	r0, [pc, #144]	; 16274 <__assert_fail@plt+0x3c80>
   161e0:	bl	125f4 <__assert_fail@plt>
   161e4:	ldr	r3, [pc, #72]	; 16234 <__assert_fail@plt+0x3c40>
   161e8:	ldr	r2, [pc, #136]	; 16278 <__assert_fail@plt+0x3c84>
   161ec:	ldr	r1, [pc, #72]	; 1623c <__assert_fail@plt+0x3c48>
   161f0:	ldr	r0, [pc, #124]	; 16274 <__assert_fail@plt+0x3c80>
   161f4:	bl	125f4 <__assert_fail@plt>
   161f8:	ldr	r3, [pc, #52]	; 16234 <__assert_fail@plt+0x3c40>
   161fc:	ldr	r2, [pc, #120]	; 1627c <__assert_fail@plt+0x3c88>
   16200:	ldr	r1, [pc, #52]	; 1623c <__assert_fail@plt+0x3c48>
   16204:	ldr	r0, [pc, #52]	; 16240 <__assert_fail@plt+0x3c4c>
   16208:	bl	125f4 <__assert_fail@plt>
   1620c:	ldr	r3, [pc, #32]	; 16234 <__assert_fail@plt+0x3c40>
   16210:	ldr	r2, [pc, #104]	; 16280 <__assert_fail@plt+0x3c8c>
   16214:	ldr	r1, [pc, #32]	; 1623c <__assert_fail@plt+0x3c48>
   16218:	ldr	r0, [pc, #40]	; 16248 <__assert_fail@plt+0x3c54>
   1621c:	bl	125f4 <__assert_fail@plt>
   16220:	svccc	0x00800000
   16224:	andeq	r0, r0, r0
   16228:	muleq	r1, r0, r8
   1622c:	andeq	r3, r1, r8, asr fp
   16230:	andeq	r3, r1, r0, ror #19
   16234:	andeq	r0, r4, ip, lsl #27
   16238:	muleq	r0, r7, r4
   1623c:	ldrdeq	r1, [r4], -r4
   16240:	andeq	r1, r4, r0, lsl r2
   16244:	andeq	r4, r1, r0, lsl #4
   16248:			; <UNDEFINED> instruction: 0x00044ab4
   1624c:	andeq	r0, r0, ip, lsl #9
   16250:	andeq	r1, r4, r0, ror #3
   16254:	andeq	r0, r0, fp, lsl #9
   16258:	andeq	r1, r4, r4, asr #3
   1625c:	andeq	r0, r0, r4, lsl #9
   16260:			; <UNDEFINED> instruction: 0x000411b8
   16264:	muleq	r0, sp, r4
   16268:	muleq	r0, ip, r4
   1626c:	andeq	r1, r4, r8, lsr #4
   16270:	muleq	r0, r1, r4
   16274:	strdeq	r1, [r4], -r8
   16278:	muleq	r0, r6, r4
   1627c:	muleq	r0, r2, r4
   16280:			; <UNDEFINED> instruction: 0x000004b4
   16284:	ldr	r3, [r0]
   16288:	push	{r4, r5, r6, lr}
   1628c:	cmp	r3, #0
   16290:	beq	16314 <__assert_fail@plt+0x3d20>
   16294:	cmp	r3, #2
   16298:	beq	16328 <__assert_fail@plt+0x3d34>
   1629c:	mov	r4, r0
   162a0:	mov	r0, #176	; 0xb0
   162a4:	bl	2c5b4 <__assert_fail@plt+0x19fc0>
   162a8:	ldr	r3, [pc, #140]	; 1633c <__assert_fail@plt+0x3d48>
   162ac:	ldr	ip, [pc, #140]	; 16340 <__assert_fail@plt+0x3d4c>
   162b0:	mov	lr, #1065353216	; 0x3f800000
   162b4:	ldr	r2, [r3, #16]
   162b8:	mov	r1, #10
   162bc:	cmp	r2, #0
   162c0:	ldrne	r2, [r3, #20]
   162c4:	streq	r0, [r3, #16]
   162c8:	streq	r0, [r3, #20]
   162cc:	strne	r0, [r3, #20]
   162d0:	ldr	r3, [pc, #108]	; 16344 <__assert_fail@plt+0x3d50>
   162d4:	strne	r0, [r2, #152]	; 0x98
   162d8:	mov	r2, #1
   162dc:	ldrb	r5, [r3, #15]
   162e0:	mov	r3, #0
   162e4:	str	r4, [r0, #172]	; 0xac
   162e8:	strb	r5, [r0, #32]
   162ec:	str	lr, [r0, #28]
   162f0:	str	ip, [r0, #36]	; 0x24
   162f4:	str	r3, [r0, #8]
   162f8:	str	r3, [r0, #12]
   162fc:	str	r3, [r0, #168]	; 0xa8
   16300:	str	r3, [r0, #164]	; 0xa4
   16304:	strb	r2, [r0, #18]
   16308:	strb	r2, [r0, #19]
   1630c:	str	r1, [r0, #24]
   16310:	pop	{r4, r5, r6, pc}
   16314:	ldr	r3, [pc, #44]	; 16348 <__assert_fail@plt+0x3d54>
   16318:	ldr	r2, [pc, #44]	; 1634c <__assert_fail@plt+0x3d58>
   1631c:	ldr	r1, [pc, #44]	; 16350 <__assert_fail@plt+0x3d5c>
   16320:	ldr	r0, [pc, #44]	; 16354 <__assert_fail@plt+0x3d60>
   16324:	bl	125f4 <__assert_fail@plt>
   16328:	ldr	r3, [pc, #24]	; 16348 <__assert_fail@plt+0x3d54>
   1632c:	ldr	r2, [pc, #36]	; 16358 <__assert_fail@plt+0x3d64>
   16330:	ldr	r1, [pc, #24]	; 16350 <__assert_fail@plt+0x3d5c>
   16334:	ldr	r0, [pc, #32]	; 1635c <__assert_fail@plt+0x3d68>
   16338:	bl	125f4 <__assert_fail@plt>
   1633c:	andeq	r7, r5, r0, ror r5
   16340:	andeq	r1, r4, r8, lsl #5
   16344:	andeq	r7, r5, ip, ror #28
   16348:	andeq	r0, r4, r4, lsr #27
   1634c:	andeq	r0, r0, sp, asr #11
   16350:	ldrdeq	r1, [r4], -r4
   16354:	andeq	r1, r4, r4, asr #4
   16358:	andeq	r0, r0, lr, asr #11
   1635c:	andeq	r1, r4, r0, ror #4
   16360:	push	{r4, lr}
   16364:	bl	16284 <__assert_fail@plt+0x3c90>
   16368:	cmp	r0, #0
   1636c:	movne	r3, #0
   16370:	strne	r3, [r0, #36]	; 0x24
   16374:	pop	{r4, pc}
   16378:	push	{r4, r5, r6, lr}
   1637c:	mov	r5, r0
   16380:	ldr	r4, [pc, #204]	; 16454 <__assert_fail@plt+0x3e60>
   16384:	mov	r6, r1
   16388:	ldr	r0, [r4, #24]
   1638c:	cmp	r0, #0
   16390:	beq	1642c <__assert_fail@plt+0x3e38>
   16394:	ldr	r3, [r4, #20]
   16398:	cmp	r3, #0
   1639c:	beq	163b8 <__assert_fail@plt+0x3dc4>
   163a0:	ldr	r3, [r3, #8]
   163a4:	cmp	r3, #1
   163a8:	beq	163ec <__assert_fail@plt+0x3df8>
   163ac:	bcc	163cc <__assert_fail@plt+0x3dd8>
   163b0:	cmp	r3, #5
   163b4:	beq	163ec <__assert_fail@plt+0x3df8>
   163b8:	mov	r0, r5
   163bc:	bl	16284 <__assert_fail@plt+0x3c90>
   163c0:	str	r6, [r0, #36]	; 0x24
   163c4:	str	r5, [r0, #172]	; 0xac
   163c8:	pop	{r4, r5, r6, pc}
   163cc:	mov	r2, #5
   163d0:	ldr	r1, [pc, #128]	; 16458 <__assert_fail@plt+0x3e64>
   163d4:	mov	r0, #0
   163d8:	bl	120b4 <dcgettext@plt>
   163dc:	mov	r1, #0
   163e0:	mov	r2, r0
   163e4:	mov	r0, #1
   163e8:	bl	121ec <error@plt>
   163ec:	bl	16284 <__assert_fail@plt+0x3c90>
   163f0:	ldr	r1, [pc, #100]	; 1645c <__assert_fail@plt+0x3e68>
   163f4:	mov	r2, #3
   163f8:	ldr	ip, [pc, #96]	; 16460 <__assert_fail@plt+0x3e6c>
   163fc:	mov	r3, #0
   16400:	str	ip, [r0]
   16404:	stmib	r0, {r1, r2}
   16408:	str	r2, [r0, #12]
   1640c:	strb	r3, [r0, #18]
   16410:	strb	r3, [r0, #19]
   16414:	strb	r3, [r0, #20]
   16418:	str	r3, [r0, #36]	; 0x24
   1641c:	str	r3, [r0, #40]	; 0x28
   16420:	strb	r3, [r0, #16]
   16424:	strb	r3, [r0, #17]
   16428:	b	163b8 <__assert_fail@plt+0x3dc4>
   1642c:	ldr	r0, [pc, #48]	; 16464 <__assert_fail@plt+0x3e70>
   16430:	bl	1e994 <__assert_fail@plt+0xc3a0>
   16434:	cmp	r0, #0
   16438:	str	r0, [r4, #24]
   1643c:	bne	16394 <__assert_fail@plt+0x3da0>
   16440:	ldr	r3, [pc, #32]	; 16468 <__assert_fail@plt+0x3e74>
   16444:	ldr	r2, [pc, #32]	; 1646c <__assert_fail@plt+0x3e78>
   16448:	ldr	r1, [pc, #32]	; 16470 <__assert_fail@plt+0x3e7c>
   1644c:	ldr	r0, [pc, #32]	; 16474 <__assert_fail@plt+0x3e80>
   16450:	bl	125f4 <__assert_fail@plt>
   16454:	andeq	r7, r5, r0, ror r5
   16458:	andeq	r1, r4, r0, asr #5
   1645c:	ldrdeq	r1, [r4], -r0
   16460:	muleq	r1, r0, r8
   16464:	andeq	r1, r4, r8, lsr #5
   16468:			; <UNDEFINED> instruction: 0x00040db4
   1646c:	strdeq	r0, [r0], -r8
   16470:	ldrdeq	r1, [r4], -r4
   16474:	andeq	r1, r4, ip, lsr #5
   16478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1647c:	subs	r8, r1, #0
   16480:	sub	sp, sp, #20
   16484:	beq	1671c <__assert_fail@plt+0x4128>
   16488:	ldr	r9, [pc, #844]	; 167dc <__assert_fail@plt+0x41e8>
   1648c:	ldr	r7, [pc, #844]	; 167e0 <__assert_fail@plt+0x41ec>
   16490:	mov	r4, r0
   16494:	mov	r5, r2
   16498:	cmp	r5, #0
   1649c:	movgt	r6, #0
   164a0:	movgt	fp, #4
   164a4:	movgt	sl, #1
   164a8:	ble	164cc <__assert_fail@plt+0x3ed8>
   164ac:	add	r6, r6, #1
   164b0:	mov	r3, r4
   164b4:	mov	r2, fp
   164b8:	mov	r1, sl
   164bc:	mov	r0, r7
   164c0:	bl	12168 <fwrite@plt>
   164c4:	cmp	r6, r5
   164c8:	bne	164ac <__assert_fail@plt+0x3eb8>
   164cc:	mov	r3, r4
   164d0:	mov	r2, #6
   164d4:	mov	r1, #1
   164d8:	ldr	r0, [pc, #772]	; 167e4 <__assert_fail@plt+0x41f0>
   164dc:	bl	12168 <fwrite@plt>
   164e0:	mov	r1, r8
   164e4:	mov	r0, r4
   164e8:	bl	15f94 <__assert_fail@plt+0x39a0>
   164ec:	ldrsh	r1, [r8, #8]
   164f0:	cmp	r1, #0
   164f4:	beq	167a8 <__assert_fail@plt+0x41b4>
   164f8:	mov	r3, #1
   164fc:	mov	r2, r3
   16500:	b	1650c <__assert_fail@plt+0x3f18>
   16504:	lsl	r2, r3, #3
   16508:	ldrsh	r2, [r2, r9]
   1650c:	cmn	r2, #1
   16510:	cmpne	r1, r2
   16514:	mov	r2, r3
   16518:	add	r3, r3, #1
   1651c:	bne	16504 <__assert_fail@plt+0x3f10>
   16520:	ldr	r3, [pc, #704]	; 167e8 <__assert_fail@plt+0x41f4>
   16524:	add	r2, r3, r2, lsl #3
   16528:	ldr	r2, [r2, #100]	; 0x64
   1652c:	ldrsh	r0, [r8, #12]
   16530:	cmp	r0, #0
   16534:	beq	167a0 <__assert_fail@plt+0x41ac>
   16538:	mov	r3, #1
   1653c:	mov	r1, r3
   16540:	b	16550 <__assert_fail@plt+0x3f5c>
   16544:	ldr	ip, [pc, #672]	; 167ec <__assert_fail@plt+0x41f8>
   16548:	lsl	r1, r3, #3
   1654c:	ldrsh	r1, [r1, ip]
   16550:	cmn	r1, #1
   16554:	cmpne	r1, r0
   16558:	mov	r1, r3
   1655c:	add	r3, r3, #1
   16560:	bne	16544 <__assert_fail@plt+0x3f50>
   16564:	ldr	r3, [pc, #636]	; 167e8 <__assert_fail@plt+0x41f4>
   16568:	add	r1, r3, r1, lsl #3
   1656c:	ldr	r3, [r1, #156]	; 0x9c
   16570:	ldr	r1, [pc, #632]	; 167f0 <__assert_fail@plt+0x41fc>
   16574:	mov	r0, r4
   16578:	bl	1233c <fprintf@plt>
   1657c:	ldr	r1, [r8, #24]
   16580:	mov	r3, #0
   16584:	ldr	r2, [pc, #616]	; 167f4 <__assert_fail@plt+0x4200>
   16588:	lsl	r0, r3, #3
   1658c:	ldr	r2, [r2, r3, lsl #3]
   16590:	add	r3, r3, #1
   16594:	cmp	r2, r1
   16598:	beq	16738 <__assert_fail@plt+0x4144>
   1659c:	cmp	r3, #11
   165a0:	bne	16584 <__assert_fail@plt+0x3f90>
   165a4:	ldr	r2, [pc, #588]	; 167f8 <__assert_fail@plt+0x4204>
   165a8:	vldr	s14, [r8, #28]
   165ac:	ldrb	r0, [r8, #16]
   165b0:	ldr	r1, [pc, #580]	; 167fc <__assert_fail@plt+0x4208>
   165b4:	ldr	r3, [pc, #580]	; 16800 <__assert_fail@plt+0x420c>
   165b8:	vcvt.f64.f32	d7, s14
   165bc:	cmp	r0, #0
   165c0:	movne	r3, r1
   165c4:	str	r3, [sp, #8]
   165c8:	ldr	r1, [pc, #564]	; 16804 <__assert_fail@plt+0x4210>
   165cc:	mov	r0, r4
   165d0:	vstr	d7, [sp]
   165d4:	bl	1233c <fprintf@plt>
   165d8:	ldrh	r3, [r8, #18]
   165dc:	cmp	r3, #0
   165e0:	bne	165f0 <__assert_fail@plt+0x3ffc>
   165e4:	ldrb	r3, [r8, #20]
   165e8:	cmp	r3, #0
   165ec:	beq	16648 <__assert_fail@plt+0x4054>
   165f0:	mov	r3, r4
   165f4:	mov	r2, #6
   165f8:	mov	r1, #1
   165fc:	ldr	r0, [pc, #516]	; 16808 <__assert_fail@plt+0x4214>
   16600:	bl	12168 <fwrite@plt>
   16604:	ldrb	r3, [r8, #18]
   16608:	cmp	r3, #0
   1660c:	bne	16748 <__assert_fail@plt+0x4154>
   16610:	ldrb	r3, [r8, #20]
   16614:	cmp	r3, #0
   16618:	beq	16724 <__assert_fail@plt+0x4130>
   1661c:	ldr	r2, [pc, #472]	; 167fc <__assert_fail@plt+0x4208>
   16620:	ldr	r1, [pc, #484]	; 1680c <__assert_fail@plt+0x4218>
   16624:	mov	r0, r4
   16628:	bl	1233c <fprintf@plt>
   1662c:	ldrb	r3, [r8, #19]
   16630:	cmp	r3, #0
   16634:	beq	16648 <__assert_fail@plt+0x4054>
   16638:	ldr	r2, [pc, #464]	; 16810 <__assert_fail@plt+0x421c>
   1663c:	ldr	r1, [pc, #464]	; 16814 <__assert_fail@plt+0x4220>
   16640:	mov	r0, r4
   16644:	bl	1233c <fprintf@plt>
   16648:	mov	r1, r4
   1664c:	mov	r0, #10
   16650:	bl	1248c <fputc@plt>
   16654:	cmp	r5, #0
   16658:	movgt	r6, #0
   1665c:	movgt	fp, #4
   16660:	movgt	sl, #1
   16664:	ble	16688 <__assert_fail@plt+0x4094>
   16668:	add	r6, r6, #1
   1666c:	mov	r3, r4
   16670:	mov	r2, fp
   16674:	mov	r1, sl
   16678:	mov	r0, r7
   1667c:	bl	12168 <fwrite@plt>
   16680:	cmp	r6, r5
   16684:	bne	16668 <__assert_fail@plt+0x4074>
   16688:	ldr	r3, [r8, #156]	; 0x9c
   1668c:	cmp	r3, #0
   16690:	beq	1677c <__assert_fail@plt+0x4188>
   16694:	mov	r2, #6
   16698:	mov	r1, #1
   1669c:	mov	r3, r4
   166a0:	ldr	r0, [pc, #368]	; 16818 <__assert_fail@plt+0x4224>
   166a4:	bl	12168 <fwrite@plt>
   166a8:	add	r2, r5, #1
   166ac:	ldr	r1, [r8, #156]	; 0x9c
   166b0:	mov	r0, r4
   166b4:	bl	16478 <__assert_fail@plt+0x3e84>
   166b8:	cmp	r5, #0
   166bc:	movgt	r6, #0
   166c0:	movgt	fp, #4
   166c4:	movgt	sl, #1
   166c8:	ble	166ec <__assert_fail@plt+0x40f8>
   166cc:	add	r6, r6, #1
   166d0:	mov	r3, r4
   166d4:	mov	r2, fp
   166d8:	mov	r1, sl
   166dc:	mov	r0, r7
   166e0:	bl	12168 <fwrite@plt>
   166e4:	cmp	r6, r5
   166e8:	bne	166cc <__assert_fail@plt+0x40d8>
   166ec:	ldr	r3, [r8, #160]	; 0xa0
   166f0:	cmp	r3, #0
   166f4:	beq	167b0 <__assert_fail@plt+0x41bc>
   166f8:	mov	r3, r4
   166fc:	mov	r2, #7
   16700:	mov	r1, #1
   16704:	ldr	r0, [pc, #272]	; 1681c <__assert_fail@plt+0x4228>
   16708:	bl	12168 <fwrite@plt>
   1670c:	ldr	r8, [r8, #160]	; 0xa0
   16710:	add	r5, r5, #1
   16714:	cmp	r8, #0
   16718:	bne	16498 <__assert_fail@plt+0x3ea4>
   1671c:	add	sp, sp, #20
   16720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16724:	ldrb	r3, [r8, #19]
   16728:	cmp	r3, #0
   1672c:	beq	16648 <__assert_fail@plt+0x4054>
   16730:	ldr	r2, [pc, #196]	; 167fc <__assert_fail@plt+0x4208>
   16734:	b	1663c <__assert_fail@plt+0x4048>
   16738:	ldr	r3, [pc, #224]	; 16820 <__assert_fail@plt+0x422c>
   1673c:	add	r0, r3, r0
   16740:	ldr	r2, [r0, #476]	; 0x1dc
   16744:	b	165a8 <__assert_fail@plt+0x3fb4>
   16748:	mov	r3, r4
   1674c:	mov	r2, #4
   16750:	mov	r1, #1
   16754:	ldr	r0, [pc, #200]	; 16824 <__assert_fail@plt+0x4230>
   16758:	bl	12168 <fwrite@plt>
   1675c:	ldrb	r3, [r8, #20]
   16760:	cmp	r3, #0
   16764:	ldrne	r2, [pc, #164]	; 16810 <__assert_fail@plt+0x421c>
   16768:	bne	16620 <__assert_fail@plt+0x402c>
   1676c:	ldrb	r3, [r8, #19]
   16770:	cmp	r3, #0
   16774:	beq	16648 <__assert_fail@plt+0x4054>
   16778:	b	16638 <__assert_fail@plt+0x4044>
   1677c:	ldr	r3, [r8, #160]	; 0xa0
   16780:	cmp	r3, #0
   16784:	mov	r3, r4
   16788:	beq	167cc <__assert_fail@plt+0x41d8>
   1678c:	mov	r2, #9
   16790:	mov	r1, #1
   16794:	ldr	r0, [pc, #140]	; 16828 <__assert_fail@plt+0x4234>
   16798:	bl	12168 <fwrite@plt>
   1679c:	b	166b8 <__assert_fail@plt+0x40c4>
   167a0:	ldr	r3, [pc, #132]	; 1682c <__assert_fail@plt+0x4238>
   167a4:	b	16570 <__assert_fail@plt+0x3f7c>
   167a8:	ldr	r2, [pc, #124]	; 1682c <__assert_fail@plt+0x4238>
   167ac:	b	1652c <__assert_fail@plt+0x3f38>
   167b0:	ldr	r0, [pc, #120]	; 16830 <__assert_fail@plt+0x423c>
   167b4:	mov	r3, r4
   167b8:	mov	r2, #10
   167bc:	mov	r1, #1
   167c0:	add	sp, sp, #20
   167c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167c8:	b	12168 <fwrite@plt>
   167cc:	mov	r2, #13
   167d0:	mov	r1, #1
   167d4:	ldr	r0, [pc, #88]	; 16834 <__assert_fail@plt+0x4240>
   167d8:	b	167c0 <__assert_fail@plt+0x41cc>
   167dc:	andeq	r0, r4, r8, asr #27
   167e0:	andeq	r1, r4, r4, lsl #6
   167e4:	strdeq	r1, [r4], -ip
   167e8:	andeq	r0, r4, r8, ror #26
   167ec:	andeq	r0, r4, r0, lsl #28
   167f0:	andeq	r1, r4, ip, lsl #6
   167f4:	andeq	r7, r5, r4, ror r4
   167f8:	strdeq	r1, [r4], -r0
   167fc:	andeq	r2, r4, r0, asr r0
   16800:	strdeq	r1, [r4], -r8
   16804:	andeq	r1, r4, r0, lsr #6
   16808:	andeq	r1, r4, r0, asr r3
   1680c:	andeq	r1, r4, r8, asr r3
   16810:	andeq	r1, r4, r8, asr #1
   16814:	andeq	r1, r4, r0, ror #6
   16818:	andeq	r1, r4, r8, ror r3
   1681c:	andeq	r1, r4, ip, lsl #7
   16820:	muleq	r5, ip, r2
   16824:	andeq	r0, r4, r8, lsl #10
   16828:	andeq	r1, r4, r0, lsl #7
   1682c:	andeq	r1, r4, ip, ror #5
   16830:	muleq	r4, r4, r3
   16834:	andeq	r1, r4, r8, ror #6
   16838:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1683c:	ldr	r3, [r0]
   16840:	cmp	r3, #0
   16844:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16848:	ldr	r8, [pc, #352]	; 169b0 <__assert_fail@plt+0x43bc>
   1684c:	mov	r7, r1
   16850:	mov	r6, r0
   16854:	ldr	r2, [r8, #44]	; 0x2c
   16858:	tst	r2, #8
   1685c:	bne	16984 <__assert_fail@plt+0x4390>
   16860:	mov	r5, #0
   16864:	mov	r0, r3
   16868:	bl	15fd0 <__assert_fail@plt+0x39dc>
   1686c:	mov	r4, r5
   16870:	mov	fp, r5
   16874:	ldr	r9, [r6]
   16878:	b	16894 <__assert_fail@plt+0x42a0>
   1687c:	ldr	r2, [r3, #156]	; 0x9c
   16880:	cmp	r2, #0
   16884:	moveq	r5, r9
   16888:	str	r2, [r9, #156]	; 0x9c
   1688c:	str	r9, [r3, #156]	; 0x9c
   16890:	mov	r9, sl
   16894:	cmp	r9, #0
   16898:	beq	16930 <__assert_fail@plt+0x433c>
   1689c:	ldr	sl, [r9, #156]	; 0x9c
   168a0:	cmp	r4, #0
   168a4:	str	sl, [r6]
   168a8:	str	fp, [r9, #156]	; 0x9c
   168ac:	beq	16904 <__assert_fail@plt+0x4310>
   168b0:	ldr	r0, [r9, #160]	; 0xa0
   168b4:	mov	r3, r4
   168b8:	ldr	r1, [r0, #24]
   168bc:	ldr	r2, [r3, #160]	; 0xa0
   168c0:	ldr	lr, [r3, #12]
   168c4:	ldr	ip, [r2, #24]
   168c8:	cmp	ip, r1
   168cc:	bne	1691c <__assert_fail@plt+0x4328>
   168d0:	vldr	s14, [r2, #28]
   168d4:	vldr	s15, [r0, #28]
   168d8:	vcmp.f32	s14, s15
   168dc:	vmrs	APSR_nzcv, fpscr
   168e0:	beq	1687c <__assert_fail@plt+0x4288>
   168e4:	cmp	lr, #2
   168e8:	vcmpe.f32	s14, s15
   168ec:	bne	16924 <__assert_fail@plt+0x4330>
   168f0:	vmrs	APSR_nzcv, fpscr
   168f4:	bmi	1687c <__assert_fail@plt+0x4288>
   168f8:	ldr	r3, [r3, #156]	; 0x9c
   168fc:	cmp	r3, #0
   16900:	bne	168bc <__assert_fail@plt+0x42c8>
   16904:	cmp	r5, #0
   16908:	moveq	r5, r9
   1690c:	str	r4, [r9, #156]	; 0x9c
   16910:	movne	r4, r9
   16914:	moveq	r4, r5
   16918:	b	16890 <__assert_fail@plt+0x429c>
   1691c:	bcc	168f8 <__assert_fail@plt+0x4304>
   16920:	b	1687c <__assert_fail@plt+0x4288>
   16924:	vmrs	APSR_nzcv, fpscr
   16928:	bmi	168f8 <__assert_fail@plt+0x4304>
   1692c:	b	1687c <__assert_fail@plt+0x4288>
   16930:	ldr	r3, [r8, #44]	; 0x2c
   16934:	tst	r3, #8
   16938:	beq	16960 <__assert_fail@plt+0x436c>
   1693c:	ldr	r8, [pc, #112]	; 169b4 <__assert_fail@plt+0x43c0>
   16940:	ldr	r2, [pc, #112]	; 169b8 <__assert_fail@plt+0x43c4>
   16944:	ldr	r1, [pc, #112]	; 169bc <__assert_fail@plt+0x43c8>
   16948:	ldr	r0, [r8]
   1694c:	bl	1233c <fprintf@plt>
   16950:	ldr	r0, [r8]
   16954:	mov	r2, #2
   16958:	mov	r1, r4
   1695c:	bl	16478 <__assert_fail@plt+0x3e84>
   16960:	mov	r0, r4
   16964:	bl	15fd0 <__assert_fail@plt+0x39dc>
   16968:	ldr	r2, [r7]
   1696c:	mov	r3, #0
   16970:	str	r2, [r5, #156]	; 0x9c
   16974:	str	r4, [r7]
   16978:	str	r3, [r6, #4]
   1697c:	str	r3, [r6]
   16980:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16984:	ldr	r4, [pc, #40]	; 169b4 <__assert_fail@plt+0x43c0>
   16988:	ldr	r2, [pc, #48]	; 169c0 <__assert_fail@plt+0x43cc>
   1698c:	ldr	r1, [pc, #40]	; 169bc <__assert_fail@plt+0x43c8>
   16990:	ldr	r0, [r4]
   16994:	bl	1233c <fprintf@plt>
   16998:	ldr	r0, [r4]
   1699c:	mov	r2, #2
   169a0:	ldr	r1, [r6]
   169a4:	bl	16478 <__assert_fail@plt+0x3e84>
   169a8:	ldr	r3, [r6]
   169ac:	b	16860 <__assert_fail@plt+0x426c>
   169b0:	andeq	r7, r5, ip, ror #28
   169b4:	andeq	r7, r5, r8, asr #10
   169b8:	andeq	r1, r4, r4, asr #7
   169bc:			; <UNDEFINED> instruction: 0x000413bc
   169c0:	andeq	r1, r4, r0, lsr #7
   169c4:	push	{r4, r5, r6, r7, r8, lr}
   169c8:	mov	r5, r3
   169cc:	ldr	r6, [pc, #76]	; 16a20 <__assert_fail@plt+0x442c>
   169d0:	ldr	r3, [pc, #76]	; 16a24 <__assert_fail@plt+0x4430>
   169d4:	mov	r7, r2
   169d8:	mov	r4, r0
   169dc:	mov	r0, r1
   169e0:	mov	r1, r5
   169e4:	str	r3, [r6, #28]
   169e8:	bl	16838 <__assert_fail@plt+0x4244>
   169ec:	mov	r0, r7
   169f0:	ldr	r3, [r6, #28]
   169f4:	mov	r1, r5
   169f8:	blx	r3
   169fc:	add	r7, r4, #88	; 0x58
   16a00:	mov	r0, r4
   16a04:	ldr	r3, [r6, #28]
   16a08:	mov	r1, r5
   16a0c:	add	r4, r4, #8
   16a10:	blx	r3
   16a14:	cmp	r4, r7
   16a18:	bne	16a00 <__assert_fail@plt+0x440c>
   16a1c:	pop	{r4, r5, r6, r7, r8, pc}
   16a20:	andeq	r7, r5, r0, ror r5
   16a24:	andeq	r6, r1, r8, lsr r8
   16a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a2c:	sub	sp, sp, #108	; 0x6c
   16a30:	mov	r2, #0
   16a34:	subs	r5, r0, #0
   16a38:	str	r2, [sp]
   16a3c:	str	r2, [sp, #4]
   16a40:	str	r2, [sp, #8]
   16a44:	str	r2, [sp, #12]
   16a48:	beq	16d60 <__assert_fail@plt+0x476c>
   16a4c:	ldr	r4, [r5]
   16a50:	cmp	r4, r2
   16a54:	beq	16d70 <__assert_fail@plt+0x477c>
   16a58:	add	r3, sp, #16
   16a5c:	add	r1, sp, #104	; 0x68
   16a60:	str	r2, [r3, #4]
   16a64:	str	r2, [r3], #8
   16a68:	cmp	r3, r1
   16a6c:	bne	16a60 <__assert_fail@plt+0x446c>
   16a70:	ldr	r0, [r4, #156]	; 0x9c
   16a74:	cmp	r0, #0
   16a78:	beq	16d78 <__assert_fail@plt+0x4784>
   16a7c:	mov	r2, r4
   16a80:	b	16a8c <__assert_fail@plt+0x4498>
   16a84:	mov	r2, r0
   16a88:	mov	r0, r3
   16a8c:	ldr	r3, [r0, #156]	; 0x9c
   16a90:	ldr	r1, [r2, #12]
   16a94:	cmp	r3, #0
   16a98:	bne	16a84 <__assert_fail@plt+0x4490>
   16a9c:	add	r2, r2, #156	; 0x9c
   16aa0:	ldr	r3, [r0, #8]
   16aa4:	ldr	r8, [pc, #952]	; 16e64 <__assert_fail@plt+0x4870>
   16aa8:	cmp	r3, #3
   16aac:	beq	16ca4 <__assert_fail@plt+0x46b0>
   16ab0:	bl	15b9c <__assert_fail@plt+0x35a8>
   16ab4:	ldr	r3, [r8, #44]	; 0x2c
   16ab8:	tst	r3, #9
   16abc:	bne	16cb0 <__assert_fail@plt+0x46bc>
   16ac0:	ldr	r4, [r5]
   16ac4:	cmp	r4, #0
   16ac8:	beq	16ce4 <__assert_fail@plt+0x46f0>
   16acc:	ldr	r3, [r4, #8]
   16ad0:	ldr	r9, [pc, #912]	; 16e68 <__assert_fail@plt+0x4874>
   16ad4:	cmp	r3, #3
   16ad8:	ldr	fp, [pc, #908]	; 16e6c <__assert_fail@plt+0x4878>
   16adc:	ldreq	r7, [r4, #12]
   16ae0:	movne	r7, #0
   16ae4:	mov	r6, #0
   16ae8:	ldr	r3, [r4, #8]
   16aec:	cmp	r3, #3
   16af0:	beq	16cec <__assert_fail@plt+0x46f8>
   16af4:	ldr	sl, [r4, #160]	; 0xa0
   16af8:	ldr	r3, [sl, #8]
   16afc:	cmp	r3, #3
   16b00:	ldrls	pc, [pc, r3, lsl #2]
   16b04:	b	16d10 <__assert_fail@plt+0x471c>
   16b08:	muleq	r1, ip, fp
   16b0c:	muleq	r1, ip, fp
   16b10:	andeq	r6, r1, r4, ror #22
   16b14:	andeq	r6, r1, r8, lsl fp
   16b18:	add	r0, r4, #160	; 0xa0
   16b1c:	bl	16a28 <__assert_fail@plt+0x4434>
   16b20:	strb	r0, [sl, #16]
   16b24:	ldr	sl, [r4, #160]	; 0xa0
   16b28:	ldrb	r3, [sl, #16]
   16b2c:	cmp	r3, #0
   16b30:	bne	16b80 <__assert_fail@plt+0x458c>
   16b34:	add	r5, r4, #156	; 0x9c
   16b38:	ldr	r4, [r5]
   16b3c:	cmp	r4, #0
   16b40:	bne	16ae8 <__assert_fail@plt+0x44f4>
   16b44:	mov	r3, r5
   16b48:	add	r0, sp, #16
   16b4c:	mov	r2, sp
   16b50:	add	r1, sp, #8
   16b54:	bl	169c4 <__assert_fail@plt+0x43d0>
   16b58:	mov	r0, r6
   16b5c:	add	sp, sp, #108	; 0x6c
   16b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b64:	add	r0, sl, #160	; 0xa0
   16b68:	bl	16a28 <__assert_fail@plt+0x4434>
   16b6c:	strb	r0, [sl, #16]
   16b70:	ldr	sl, [r4, #160]	; 0xa0
   16b74:	ldrb	r3, [sl, #16]
   16b78:	cmp	r3, #0
   16b7c:	beq	16b34 <__assert_fail@plt+0x4540>
   16b80:	mov	r3, r5
   16b84:	mov	r2, sp
   16b88:	add	r1, sp, #8
   16b8c:	add	r0, sp, #16
   16b90:	bl	169c4 <__assert_fail@plt+0x43d0>
   16b94:	mov	r6, #1
   16b98:	b	16b34 <__assert_fail@plt+0x4540>
   16b9c:	cmp	r7, #1
   16ba0:	beq	16b28 <__assert_fail@plt+0x4534>
   16ba4:	ldrb	r3, [sl, #16]
   16ba8:	cmp	r3, #0
   16bac:	bne	16b80 <__assert_fail@plt+0x458c>
   16bb0:	ldr	r2, [pc, #696]	; 16e70 <__assert_fail@plt+0x487c>
   16bb4:	ldr	r3, [sl]
   16bb8:	ldr	r1, [pc, #692]	; 16e74 <__assert_fail@plt+0x4880>
   16bbc:	cmp	r3, r2
   16bc0:	cmpne	r3, fp
   16bc4:	moveq	r2, #1
   16bc8:	movne	r2, #0
   16bcc:	cmp	r3, r1
   16bd0:	orreq	r2, r2, #1
   16bd4:	ldr	r1, [pc, #668]	; 16e78 <__assert_fail@plt+0x4884>
   16bd8:	cmp	r3, r1
   16bdc:	orreq	r2, r2, #1
   16be0:	cmp	r2, #0
   16be4:	bne	16d30 <__assert_fail@plt+0x473c>
   16be8:	ldr	r1, [pc, #652]	; 16e7c <__assert_fail@plt+0x4888>
   16bec:	ldr	r0, [pc, #652]	; 16e80 <__assert_fail@plt+0x488c>
   16bf0:	ldrh	r2, [r8, #68]	; 0x44
   16bf4:	cmp	r3, r0
   16bf8:	cmpne	r3, r1
   16bfc:	moveq	r1, #1
   16c00:	movne	r1, #0
   16c04:	ldr	ip, [pc, #632]	; 16e84 <__assert_fail@plt+0x4890>
   16c08:	cmp	r2, #0
   16c0c:	orreq	r1, r1, #1
   16c10:	ldr	r0, [pc, #624]	; 16e88 <__assert_fail@plt+0x4894>
   16c14:	cmp	r3, ip
   16c18:	orreq	r1, r1, #1
   16c1c:	cmp	r3, r0
   16c20:	orreq	r1, r1, #1
   16c24:	cmp	r1, #0
   16c28:	bne	16c38 <__assert_fail@plt+0x4644>
   16c2c:	ldr	r1, [sl, #24]
   16c30:	cmp	r1, #0
   16c34:	beq	16d30 <__assert_fail@plt+0x473c>
   16c38:	ldr	r1, [pc, #588]	; 16e8c <__assert_fail@plt+0x4898>
   16c3c:	cmp	r3, r1
   16c40:	beq	16e34 <__assert_fail@plt+0x4840>
   16c44:	cmp	r2, #1
   16c48:	bls	16b34 <__assert_fail@plt+0x4540>
   16c4c:	ldr	r3, [sl, #24]
   16c50:	sub	r1, r3, #1
   16c54:	cmp	r1, #1
   16c58:	bls	16e24 <__assert_fail@plt+0x4830>
   16c5c:	cmp	r2, #2
   16c60:	beq	16b34 <__assert_fail@plt+0x4540>
   16c64:	ldr	r1, [r8, #44]	; 0x2c
   16c68:	tst	r1, #8
   16c6c:	bne	16d88 <__assert_fail@plt+0x4794>
   16c70:	ldr	r1, [r4, #156]	; 0x9c
   16c74:	add	r2, sp, #104	; 0x68
   16c78:	str	r1, [r5]
   16c7c:	add	r1, sp, #16
   16c80:	add	r2, r2, r3, lsl #3
   16c84:	ldr	r1, [r1, r3, lsl #3]
   16c88:	str	r1, [r4, #156]	; 0x9c
   16c8c:	add	r1, sp, #16
   16c90:	str	r4, [r1, r3, lsl #3]
   16c94:	ldr	r3, [r2, #-84]	; 0xffffffac
   16c98:	cmp	r3, #0
   16c9c:	streq	r4, [r2, #-84]	; 0xffffffac
   16ca0:	b	16b38 <__assert_fail@plt+0x4544>
   16ca4:	ldr	r3, [r8, #44]	; 0x2c
   16ca8:	tst	r3, #9
   16cac:	beq	16acc <__assert_fail@plt+0x44d8>
   16cb0:	ldr	r4, [pc, #472]	; 16e90 <__assert_fail@plt+0x489c>
   16cb4:	mov	r2, #22
   16cb8:	mov	r1, #1
   16cbc:	ldr	r3, [r4]
   16cc0:	ldr	r0, [pc, #460]	; 16e94 <__assert_fail@plt+0x48a0>
   16cc4:	bl	12168 <fwrite@plt>
   16cc8:	ldr	r0, [r4]
   16ccc:	mov	r2, #0
   16cd0:	ldr	r1, [r5]
   16cd4:	bl	16478 <__assert_fail@plt+0x3e84>
   16cd8:	ldr	r4, [r5]
   16cdc:	cmp	r4, #0
   16ce0:	bne	16acc <__assert_fail@plt+0x44d8>
   16ce4:	mov	r6, r4
   16ce8:	b	16b44 <__assert_fail@plt+0x4550>
   16cec:	ldr	r3, [r4, #12]
   16cf0:	cmp	r3, r7
   16cf4:	beq	16af4 <__assert_fail@plt+0x4500>
   16cf8:	mov	r0, r4
   16cfc:	mov	r2, r5
   16d00:	mov	r1, r7
   16d04:	bl	15b9c <__assert_fail@plt+0x35a8>
   16d08:	mov	r4, r0
   16d0c:	b	16af4 <__assert_fail@plt+0x4500>
   16d10:	mov	r2, #5
   16d14:	ldr	r1, [pc, #380]	; 16e98 <__assert_fail@plt+0x48a4>
   16d18:	mov	r0, #0
   16d1c:	bl	120b4 <dcgettext@plt>
   16d20:	mov	r1, #0
   16d24:	mov	r2, r0
   16d28:	mov	r0, #1
   16d2c:	bl	121ec <error@plt>
   16d30:	ldr	r3, [r8, #44]	; 0x2c
   16d34:	tst	r3, #8
   16d38:	bne	16dec <__assert_fail@plt+0x47f8>
   16d3c:	ldr	r3, [r4, #156]	; 0x9c
   16d40:	str	r3, [r5]
   16d44:	ldr	r2, [sp, #12]
   16d48:	ldr	r3, [sp, #8]
   16d4c:	cmp	r2, #0
   16d50:	str	r3, [r4, #156]	; 0x9c
   16d54:	str	r4, [sp, #8]
   16d58:	streq	r4, [sp, #12]
   16d5c:	b	16b38 <__assert_fail@plt+0x4544>
   16d60:	mov	r6, r5
   16d64:	mov	r0, r6
   16d68:	add	sp, sp, #108	; 0x6c
   16d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d70:	mov	r6, r4
   16d74:	b	16b58 <__assert_fail@plt+0x4564>
   16d78:	mov	r2, r5
   16d7c:	mov	r0, r4
   16d80:	mov	r1, #3
   16d84:	b	16aa0 <__assert_fail@plt+0x44ac>
   16d88:	ldr	sl, [pc, #256]	; 16e90 <__assert_fail@plt+0x489c>
   16d8c:	ldr	r1, [pc, #264]	; 16e9c <__assert_fail@plt+0x48a8>
   16d90:	ldr	r0, [sl]
   16d94:	bl	1233c <fprintf@plt>
   16d98:	ldr	r0, [sl]
   16d9c:	ldr	r1, [r4, #160]	; 0xa0
   16da0:	bl	15f94 <__assert_fail@plt+0x39a0>
   16da4:	ldr	r2, [r4, #160]	; 0xa0
   16da8:	ldr	r0, [sl]
   16dac:	mov	r3, #0
   16db0:	ldr	ip, [r2, #24]
   16db4:	ldr	r2, [pc, #228]	; 16ea0 <__assert_fail@plt+0x48ac>
   16db8:	lsl	r1, r3, #3
   16dbc:	ldr	r2, [r2, r3, lsl #3]
   16dc0:	cmp	ip, r2
   16dc4:	beq	16e58 <__assert_fail@plt+0x4864>
   16dc8:	add	r3, r3, #1
   16dcc:	cmp	r3, #11
   16dd0:	bne	16db4 <__assert_fail@plt+0x47c0>
   16dd4:	ldr	r2, [pc, #200]	; 16ea4 <__assert_fail@plt+0x48b0>
   16dd8:	ldr	r1, [pc, #200]	; 16ea8 <__assert_fail@plt+0x48b4>
   16ddc:	bl	1233c <fprintf@plt>
   16de0:	ldr	r3, [r4, #160]	; 0xa0
   16de4:	ldr	r3, [r3, #24]
   16de8:	b	16c70 <__assert_fail@plt+0x467c>
   16dec:	ldr	sl, [pc, #156]	; 16e90 <__assert_fail@plt+0x489c>
   16df0:	ldrh	r2, [r8, #68]	; 0x44
   16df4:	ldr	r1, [pc, #176]	; 16eac <__assert_fail@plt+0x48b8>
   16df8:	ldr	r0, [sl]
   16dfc:	bl	1233c <fprintf@plt>
   16e00:	ldr	r0, [sl]
   16e04:	ldr	r1, [r4, #160]	; 0xa0
   16e08:	bl	15f94 <__assert_fail@plt+0x39a0>
   16e0c:	ldr	r3, [sl]
   16e10:	mov	r2, #16
   16e14:	mov	r1, #1
   16e18:	ldr	r0, [pc, #144]	; 16eb0 <__assert_fail@plt+0x48bc>
   16e1c:	bl	12168 <fwrite@plt>
   16e20:	b	16d3c <__assert_fail@plt+0x4748>
   16e24:	ldrb	r1, [sl, #18]
   16e28:	cmp	r1, #0
   16e2c:	beq	16c64 <__assert_fail@plt+0x4670>
   16e30:	b	16c5c <__assert_fail@plt+0x4668>
   16e34:	ldr	r3, [r4, #156]	; 0x9c
   16e38:	str	r3, [r5]
   16e3c:	ldr	r2, [sp, #4]
   16e40:	ldr	r3, [sp]
   16e44:	cmp	r2, #0
   16e48:	str	r3, [r4, #156]	; 0x9c
   16e4c:	str	r4, [sp]
   16e50:	streq	r4, [sp, #4]
   16e54:	b	16b38 <__assert_fail@plt+0x4544>
   16e58:	add	r1, r9, r1
   16e5c:	ldr	r2, [r1, #476]	; 0x1dc
   16e60:	b	16dd8 <__assert_fail@plt+0x47e4>
   16e64:	andeq	r7, r5, ip, ror #28
   16e68:	muleq	r5, ip, r2
   16e6c:	andeq	r4, r1, r4, asr #3
   16e70:	andeq	r4, r1, r0, ror r4
   16e74:	strdeq	r3, [r1], -r0
   16e78:	andeq	r4, r1, r0, lsr #1
   16e7c:	muleq	r1, r0, r8
   16e80:	andeq	r4, r1, r0, lsl #4
   16e84:	andeq	r3, r1, r8, asr fp
   16e88:	andeq	r3, r1, r0, ror #19
   16e8c:	strdeq	r4, [r1], -r8
   16e90:	andeq	r7, r5, r8, asr #10
   16e94:	andeq	r1, r4, r0, ror #7
   16e98:	andeq	r1, r4, ip, ror r0
   16e9c:	andeq	r1, r4, r0, lsr r4
   16ea0:	andeq	r7, r5, r4, ror r4
   16ea4:	strdeq	r1, [r4], -r0
   16ea8:	andeq	r1, r4, r0, asr r4
   16eac:	strdeq	r1, [r4], -r8
   16eb0:	andeq	r1, r4, ip, lsl r4
   16eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb8:	vpush	{d8}
   16ebc:	subs	r4, r0, #0
   16ec0:	sub	sp, sp, #12
   16ec4:	beq	16f90 <__assert_fail@plt+0x499c>
   16ec8:	ldr	r5, [pc, #548]	; 170f4 <__assert_fail@plt+0x4b00>
   16ecc:	ldr	r1, [r4, #8]
   16ed0:	ldr	r6, [pc, #544]	; 170f8 <__assert_fail@plt+0x4b04>
   16ed4:	ldr	r3, [r5, #44]	; 0x2c
   16ed8:	ldr	r8, [pc, #540]	; 170fc <__assert_fail@plt+0x4b08>
   16edc:	ldr	r7, [pc, #540]	; 17100 <__assert_fail@plt+0x4b0c>
   16ee0:	and	r3, r3, #8
   16ee4:	cmp	r1, #3
   16ee8:	movne	r2, r7
   16eec:	beq	16f40 <__assert_fail@plt+0x494c>
   16ef0:	cmp	r3, #0
   16ef4:	beq	16f14 <__assert_fail@plt+0x4920>
   16ef8:	mov	r1, r8
   16efc:	ldr	r0, [r6]
   16f00:	bl	1233c <fprintf@plt>
   16f04:	mov	r2, #0
   16f08:	mov	r1, r4
   16f0c:	ldr	r0, [r6]
   16f10:	bl	16478 <__assert_fail@plt+0x3e84>
   16f14:	ldr	r2, [r4, #156]	; 0x9c
   16f18:	mov	r0, r2
   16f1c:	bl	16eb4 <__assert_fail@plt+0x48c0>
   16f20:	cmp	r0, #0
   16f24:	beq	16f80 <__assert_fail@plt+0x498c>
   16f28:	ldr	r1, [r4, #8]
   16f2c:	ldr	r3, [r5, #44]	; 0x2c
   16f30:	cmp	r1, #3
   16f34:	and	r3, r3, #8
   16f38:	movne	r2, r7
   16f3c:	bne	16ef0 <__assert_fail@plt+0x48fc>
   16f40:	ldr	r2, [r4, #156]	; 0x9c
   16f44:	cmp	r2, #0
   16f48:	beq	16fe4 <__assert_fail@plt+0x49f0>
   16f4c:	ldr	sl, [r4, #160]	; 0xa0
   16f50:	cmp	sl, #0
   16f54:	beq	16fe4 <__assert_fail@plt+0x49f0>
   16f58:	ldr	r9, [r2, #160]	; 0xa0
   16f5c:	cmp	r9, #0
   16f60:	ldreq	r2, [pc, #412]	; 17104 <__assert_fail@plt+0x4b10>
   16f64:	beq	16ef0 <__assert_fail@plt+0x48fc>
   16f68:	mov	r0, r9
   16f6c:	bl	1581c <__assert_fail@plt+0x3228>
   16f70:	cmp	r0, #0
   16f74:	beq	16fa0 <__assert_fail@plt+0x49ac>
   16f78:	ldr	r2, [pc, #392]	; 17108 <__assert_fail@plt+0x4b14>
   16f7c:	b	16ef0 <__assert_fail@plt+0x48fc>
   16f80:	ldr	r0, [r4, #160]	; 0xa0
   16f84:	bl	16eb4 <__assert_fail@plt+0x48c0>
   16f88:	cmp	r0, #0
   16f8c:	bne	16f28 <__assert_fail@plt+0x4934>
   16f90:	mov	r0, #0
   16f94:	add	sp, sp, #12
   16f98:	vpop	{d8}
   16f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fa0:	mov	r0, sl
   16fa4:	bl	1581c <__assert_fail@plt+0x3228>
   16fa8:	cmp	r0, #0
   16fac:	ldrne	r2, [pc, #344]	; 1710c <__assert_fail@plt+0x4b18>
   16fb0:	bne	16ef0 <__assert_fail@plt+0x48fc>
   16fb4:	mov	r0, r9
   16fb8:	bl	15858 <__assert_fail@plt+0x3264>
   16fbc:	mov	fp, r0
   16fc0:	mov	r0, sl
   16fc4:	bl	15858 <__assert_fail@plt+0x3264>
   16fc8:	cmp	fp, r0
   16fcc:	blt	16fec <__assert_fail@plt+0x49f8>
   16fd0:	beq	1703c <__assert_fail@plt+0x4a48>
   16fd4:	cmp	r3, #0
   16fd8:	bne	16ff4 <__assert_fail@plt+0x4a00>
   16fdc:	ldr	r1, [r4, #8]
   16fe0:	b	17024 <__assert_fail@plt+0x4a30>
   16fe4:	ldr	r2, [pc, #292]	; 17110 <__assert_fail@plt+0x4b1c>
   16fe8:	b	16ef0 <__assert_fail@plt+0x48fc>
   16fec:	ldr	r2, [pc, #288]	; 17114 <__assert_fail@plt+0x4b20>
   16ff0:	b	16ef0 <__assert_fail@plt+0x48fc>
   16ff4:	ldr	r3, [r6]
   16ff8:	mov	r2, #24
   16ffc:	mov	r1, #1
   17000:	ldr	r0, [pc, #272]	; 17118 <__assert_fail@plt+0x4b24>
   17004:	bl	12168 <fwrite@plt>
   17008:	mov	r1, r4
   1700c:	mov	r2, #0
   17010:	ldr	r0, [r6]
   17014:	bl	16478 <__assert_fail@plt+0x3e84>
   17018:	ldr	r3, [r5, #44]	; 0x2c
   1701c:	ldr	r1, [r4, #8]
   17020:	and	r3, r3, #8
   17024:	ldr	r2, [r4, #156]	; 0x9c
   17028:	ldr	ip, [r4, #160]	; 0xa0
   1702c:	ldr	r0, [r2, #160]	; 0xa0
   17030:	str	ip, [r2, #160]	; 0xa0
   17034:	str	r0, [r4, #160]	; 0xa0
   17038:	b	16ee4 <__assert_fail@plt+0x48f0>
   1703c:	cmp	r3, #0
   17040:	vldr	s17, [r9, #28]
   17044:	vldr	s16, [sl, #28]
   17048:	bne	17078 <__assert_fail@plt+0x4a84>
   1704c:	ldr	r0, [r4]
   17050:	ldr	ip, [pc, #196]	; 1711c <__assert_fail@plt+0x4b28>
   17054:	cmp	r0, ip
   17058:	beq	170d0 <__assert_fail@plt+0x4adc>
   1705c:	ldr	ip, [pc, #188]	; 17120 <__assert_fail@plt+0x4b2c>
   17060:	cmp	r0, ip
   17064:	bne	16f18 <__assert_fail@plt+0x4924>
   17068:	vcmpe.f32	s17, s16
   1706c:	vmrs	APSR_nzcv, fpscr
   17070:	bmi	17024 <__assert_fail@plt+0x4a30>
   17074:	b	16f18 <__assert_fail@plt+0x4924>
   17078:	vcvt.f64.f32	d7, s16
   1707c:	vcvt.f64.f32	d6, s17
   17080:	ldr	r1, [pc, #156]	; 17124 <__assert_fail@plt+0x4b30>
   17084:	ldr	r0, [r6]
   17088:	vstr	d7, [sp]
   1708c:	vmov	r2, r3, d6
   17090:	bl	1233c <fprintf@plt>
   17094:	ldr	r2, [r4]
   17098:	ldr	r1, [pc, #124]	; 1711c <__assert_fail@plt+0x4b28>
   1709c:	ldr	r3, [r5, #44]	; 0x2c
   170a0:	cmp	r2, r1
   170a4:	and	r3, r3, #8
   170a8:	beq	170e0 <__assert_fail@plt+0x4aec>
   170ac:	ldr	r1, [pc, #108]	; 17120 <__assert_fail@plt+0x4b2c>
   170b0:	cmp	r2, r1
   170b4:	ldrne	r2, [pc, #108]	; 17128 <__assert_fail@plt+0x4b34>
   170b8:	bne	16ef0 <__assert_fail@plt+0x48fc>
   170bc:	vcmpe.f32	s17, s16
   170c0:	vmrs	APSR_nzcv, fpscr
   170c4:	bmi	16fd4 <__assert_fail@plt+0x49e0>
   170c8:	ldr	r2, [pc, #92]	; 1712c <__assert_fail@plt+0x4b38>
   170cc:	b	16ef0 <__assert_fail@plt+0x48fc>
   170d0:	vcmpe.f32	s17, s16
   170d4:	vmrs	APSR_nzcv, fpscr
   170d8:	bgt	17024 <__assert_fail@plt+0x4a30>
   170dc:	b	16f18 <__assert_fail@plt+0x4924>
   170e0:	vcmpe.f32	s17, s16
   170e4:	vmrs	APSR_nzcv, fpscr
   170e8:	bgt	16fd4 <__assert_fail@plt+0x49e0>
   170ec:	ldr	r2, [pc, #60]	; 17130 <__assert_fail@plt+0x4b3c>
   170f0:	b	16ef0 <__assert_fail@plt+0x48fc>
   170f4:	andeq	r7, r5, ip, ror #28
   170f8:	andeq	r7, r5, r8, asr #10
   170fc:	andeq	r1, r4, r8, lsr #11
   17100:	andeq	r1, r4, r0, ror #8
   17104:	ldrdeq	r1, [r4], -ip
   17108:			; <UNDEFINED> instruction: 0x000414bc
   1710c:	muleq	r4, ip, r4
   17110:	strdeq	r1, [r4], -ip
   17114:	andeq	r1, r4, ip, lsl #9
   17118:	andeq	r1, r4, ip, lsl #11
   1711c:	andeq	r3, r1, r0, ror #19
   17120:	muleq	r1, r0, r8
   17124:	andeq	r1, r4, r0, ror r5
   17128:	andeq	r1, r4, r8, ror r4
   1712c:	andeq	r1, r4, r0, asr #10
   17130:	andeq	r1, r4, r4, lsl r5
   17134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17138:	sub	sp, sp, #36	; 0x24
   1713c:	ldr	r6, [pc, #1448]	; 176ec <__assert_fail@plt+0x50f8>
   17140:	mov	r4, r1
   17144:	cmp	r2, r0
   17148:	add	r1, r1, r2, lsl #2
   1714c:	mov	r3, #0
   17150:	str	r2, [sp, #28]
   17154:	str	r0, [sp, #20]
   17158:	str	r1, [r6, #8]
   1715c:	str	r3, [r6, #16]
   17160:	movlt	r5, #1
   17164:	blt	17190 <__assert_fail@plt+0x4b9c>
   17168:	b	171a4 <__assert_fail@plt+0x4bb0>
   1716c:	ldr	r2, [sp, #28]
   17170:	ldr	r3, [r6, #4]
   17174:	ldr	r1, [sp, #20]
   17178:	add	r2, r2, #1
   1717c:	add	r3, r3, #1
   17180:	cmp	r1, r2
   17184:	str	r2, [sp, #28]
   17188:	str	r3, [r6, #4]
   1718c:	ble	171a4 <__assert_fail@plt+0x4bb0>
   17190:	ldr	r0, [r4, r2, lsl #2]
   17194:	mov	r1, r5
   17198:	bl	18510 <__assert_fail@plt+0x5f1c>
   1719c:	cmp	r0, #0
   171a0:	beq	1716c <__assert_fail@plt+0x4b78>
   171a4:	ldr	r5, [pc, #1348]	; 176f0 <__assert_fail@plt+0x50fc>
   171a8:	mov	r0, r5
   171ac:	bl	1e994 <__assert_fail@plt+0xc3a0>
   171b0:	mov	r7, r0
   171b4:	ldr	r0, [pc, #1336]	; 176f4 <__assert_fail@plt+0x5100>
   171b8:	bl	1e994 <__assert_fail@plt+0xc3a0>
   171bc:	str	r0, [sp, #16]
   171c0:	ldr	r0, [pc, #1328]	; 176f8 <__assert_fail@plt+0x5104>
   171c4:	bl	1e994 <__assert_fail@plt+0xc3a0>
   171c8:	cmp	r7, #0
   171cc:	str	r0, [sp, #12]
   171d0:	beq	17698 <__assert_fail@plt+0x50a4>
   171d4:	ldr	r3, [sp, #16]
   171d8:	cmp	r3, #0
   171dc:	beq	17684 <__assert_fail@plt+0x5090>
   171e0:	ldr	r3, [sp, #12]
   171e4:	cmp	r3, #0
   171e8:	beq	176d8 <__assert_fail@plt+0x50e4>
   171ec:	add	r2, sp, #20
   171f0:	mov	r1, r4
   171f4:	mov	r0, r7
   171f8:	bl	1cdf8 <__assert_fail@plt+0xa804>
   171fc:	ldr	r3, [r6, #16]
   17200:	ldr	r2, [r6, #20]
   17204:	mov	r1, #1
   17208:	mov	r0, r4
   1720c:	str	r5, [r2, #4]
   17210:	strb	r1, [r3, #33]	; 0x21
   17214:	ldr	r1, [sp, #20]
   17218:	bl	1e97c <__assert_fail@plt+0xc388>
   1721c:	ldr	r0, [r6, #20]
   17220:	bl	14e40 <__assert_fail@plt+0x284c>
   17224:	ldr	r3, [sp, #28]
   17228:	ldr	r1, [sp, #20]
   1722c:	cmp	r3, r1
   17230:	bge	17328 <__assert_fail@plt+0x4d34>
   17234:	ldr	r9, [pc, #1216]	; 176fc <__assert_fail@plt+0x5108>
   17238:	mov	r8, #0
   1723c:	b	17278 <__assert_fail@plt+0x4c84>
   17240:	ldr	r3, [sp, #28]
   17244:	ldr	r0, [r6, #20]
   17248:	cmp	r3, fp
   1724c:	str	r7, [r0, #4]
   17250:	ldrne	r3, [r4, fp, lsl #2]
   17254:	streq	r8, [r0, #36]	; 0x24
   17258:	strne	r3, [r0, #36]	; 0x24
   1725c:	bl	14e40 <__assert_fail@plt+0x284c>
   17260:	ldr	r0, [r6, #16]
   17264:	bl	14e40 <__assert_fail@plt+0x284c>
   17268:	ldr	r3, [sp, #28]
   1726c:	ldr	r1, [sp, #20]
   17270:	cmp	r3, r1
   17274:	bge	17328 <__assert_fail@plt+0x4d34>
   17278:	ldr	r0, [r4, r3, lsl #2]
   1727c:	mov	r1, #0
   17280:	strb	r8, [r9, #40]	; 0x28
   17284:	bl	18510 <__assert_fail@plt+0x5f1c>
   17288:	subs	r5, r0, #0
   1728c:	beq	175f8 <__assert_fail@plt+0x5004>
   17290:	ldr	r3, [sp, #28]
   17294:	ldr	r7, [r4, r3, lsl #2]
   17298:	mov	r0, r7
   1729c:	bl	1e994 <__assert_fail@plt+0xc3a0>
   172a0:	subs	r5, r0, #0
   172a4:	beq	1763c <__assert_fail@plt+0x5048>
   172a8:	ldr	r3, [r5]
   172ac:	ldr	fp, [sp, #28]
   172b0:	cmp	r3, #4
   172b4:	addne	fp, fp, #1
   172b8:	strne	fp, [sp, #28]
   172bc:	ldr	r3, [r5, #8]
   172c0:	add	r2, sp, #28
   172c4:	mov	r1, r4
   172c8:	mov	r0, r5
   172cc:	blx	r3
   172d0:	subs	sl, r0, #0
   172d4:	bne	17240 <__assert_fail@plt+0x4c4c>
   172d8:	ldr	r1, [sp, #28]
   172dc:	ldr	r6, [r4, r1, lsl #2]
   172e0:	cmp	r6, #0
   172e4:	beq	176b8 <__assert_fail@plt+0x50c4>
   172e8:	ldr	r2, [r5]
   172ec:	cmp	r2, #4
   172f0:	cmpeq	r1, fp
   172f4:	moveq	r5, #1
   172f8:	movne	r5, #0
   172fc:	mov	r2, #5
   17300:	beq	17554 <__assert_fail@plt+0x4f60>
   17304:	ldr	r1, [pc, #1012]	; 17700 <__assert_fail@plt+0x510c>
   17308:	bl	120b4 <dcgettext@plt>
   1730c:	ldr	r3, [sp, #28]
   17310:	str	r7, [sp]
   17314:	mov	r1, r5
   17318:	ldr	r3, [r4, r3, lsl #2]
   1731c:	mov	r2, r0
   17320:	mov	r0, #1
   17324:	bl	121ec <error@plt>
   17328:	ldr	r3, [r6, #16]
   1732c:	ldr	r2, [r6, #20]
   17330:	mov	r0, r4
   17334:	bl	1e990 <__assert_fail@plt+0xc39c>
   17338:	ldr	r2, [r6, #16]
   1733c:	ldr	r3, [r2, #152]	; 0x98
   17340:	cmp	r3, #0
   17344:	beq	174b4 <__assert_fail@plt+0x4ec0>
   17348:	mov	r0, r3
   1734c:	bl	184d0 <__assert_fail@plt+0x5edc>
   17350:	cmp	r0, #0
   17354:	bne	17408 <__assert_fail@plt+0x4e14>
   17358:	ldr	r3, [r6, #16]
   1735c:	str	r3, [sp, #24]
   17360:	ldr	r3, [r3, #152]	; 0x98
   17364:	mov	r0, r3
   17368:	str	r3, [r6, #16]
   1736c:	bl	14e40 <__assert_fail@plt+0x284c>
   17370:	ldr	r0, [sp, #24]
   17374:	bl	2db68 <__assert_fail@plt+0x1b574>
   17378:	ldr	r5, [pc, #900]	; 17704 <__assert_fail@plt+0x5110>
   1737c:	ldr	r3, [r5, #44]	; 0x2c
   17380:	tst	r3, #9
   17384:	bne	17470 <__assert_fail@plt+0x4e7c>
   17388:	ldr	r0, [r6, #16]
   1738c:	bl	1e860 <__assert_fail@plt+0xc26c>
   17390:	ldr	r0, [r6, #16]
   17394:	bl	14e40 <__assert_fail@plt+0x284c>
   17398:	ldr	r3, [r6, #16]
   1739c:	add	r0, sp, #32
   173a0:	mov	r2, #0
   173a4:	str	r3, [r0, #-8]!
   173a8:	mov	r1, r2
   173ac:	bl	15898 <__assert_fail@plt+0x32a4>
   173b0:	str	r0, [r6, #12]
   173b4:	bl	15fd0 <__assert_fail@plt+0x39dc>
   173b8:	ldr	r4, [sp, #24]
   173bc:	cmp	r4, #0
   173c0:	beq	174f8 <__assert_fail@plt+0x4f04>
   173c4:	ldr	r3, [pc, #828]	; 17708 <__assert_fail@plt+0x5114>
   173c8:	ldr	r2, [r4]
   173cc:	cmp	r2, r3
   173d0:	beq	176ac <__assert_fail@plt+0x50b8>
   173d4:	ldr	r4, [r4, #4]
   173d8:	mov	r2, #5
   173dc:	cmp	r4, #0
   173e0:	beq	17498 <__assert_fail@plt+0x4ea4>
   173e4:	ldr	r1, [pc, #800]	; 1770c <__assert_fail@plt+0x5118>
   173e8:	mov	r0, #0
   173ec:	bl	120b4 <dcgettext@plt>
   173f0:	ldr	r3, [sp, #24]
   173f4:	mov	r1, #0
   173f8:	ldr	r3, [r3, #4]
   173fc:	mov	r2, r0
   17400:	mov	r0, #1
   17404:	bl	121ec <error@plt>
   17408:	add	r2, sp, #20
   1740c:	mov	r1, r4
   17410:	ldr	r0, [sp, #16]
   17414:	bl	1cbe8 <__assert_fail@plt+0xa5f4>
   17418:	ldr	r0, [r6, #20]
   1741c:	ldr	r3, [pc, #720]	; 176f4 <__assert_fail@plt+0x5100>
   17420:	mov	r5, #1
   17424:	str	r3, [r0, #4]
   17428:	strb	r5, [r0, #33]	; 0x21
   1742c:	bl	14e40 <__assert_fail@plt+0x284c>
   17430:	mov	r1, r4
   17434:	add	r2, sp, #20
   17438:	ldr	r0, [sp, #12]
   1743c:	bl	1c0cc <__assert_fail@plt+0x9ad8>
   17440:	ldr	r3, [r6, #20]
   17444:	ldr	r2, [pc, #708]	; 17710 <__assert_fail@plt+0x511c>
   17448:	mov	r0, r3
   1744c:	strb	r5, [r3, #33]	; 0x21
   17450:	ldr	r5, [pc, #684]	; 17704 <__assert_fail@plt+0x5110>
   17454:	str	r2, [r3, #4]
   17458:	bl	14e40 <__assert_fail@plt+0x284c>
   1745c:	ldr	r0, [r6, #16]
   17460:	bl	14e40 <__assert_fail@plt+0x284c>
   17464:	ldr	r3, [r5, #44]	; 0x2c
   17468:	tst	r3, #9
   1746c:	beq	17388 <__assert_fail@plt+0x4d94>
   17470:	ldr	r4, [pc, #668]	; 17714 <__assert_fail@plt+0x5120>
   17474:	mov	r2, #16
   17478:	mov	r1, #1
   1747c:	ldr	r3, [r4]
   17480:	ldr	r0, [pc, #656]	; 17718 <__assert_fail@plt+0x5124>
   17484:	bl	12168 <fwrite@plt>
   17488:	ldr	r0, [r4]
   1748c:	ldr	r1, [r6, #16]
   17490:	bl	14b30 <__assert_fail@plt+0x253c>
   17494:	b	17388 <__assert_fail@plt+0x4d94>
   17498:	ldr	r1, [pc, #636]	; 1771c <__assert_fail@plt+0x5128>
   1749c:	mov	r0, #0
   174a0:	bl	120b4 <dcgettext@plt>
   174a4:	mov	r1, #0
   174a8:	mov	r2, r0
   174ac:	mov	r0, #1
   174b0:	bl	121ec <error@plt>
   174b4:	mov	r0, r2
   174b8:	str	r3, [r6, #20]
   174bc:	str	r3, [r6, #16]
   174c0:	str	r2, [sp, #24]
   174c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   174c8:	add	r2, sp, #20
   174cc:	mov	r1, r4
   174d0:	ldr	r0, [sp, #12]
   174d4:	bl	1c0cc <__assert_fail@plt+0x9ad8>
   174d8:	ldr	r3, [r6, #20]
   174dc:	ldr	r2, [pc, #556]	; 17710 <__assert_fail@plt+0x511c>
   174e0:	mov	r0, r3
   174e4:	str	r2, [r3, #4]
   174e8:	bl	14e40 <__assert_fail@plt+0x284c>
   174ec:	ldr	r0, [r6, #16]
   174f0:	bl	14e40 <__assert_fail@plt+0x284c>
   174f4:	b	17378 <__assert_fail@plt+0x4d84>
   174f8:	ldr	r3, [r5, #44]	; 0x2c
   174fc:	tst	r3, #9
   17500:	bne	175cc <__assert_fail@plt+0x4fd8>
   17504:	ldr	r0, [r6, #12]
   17508:	bl	15d10 <__assert_fail@plt+0x371c>
   1750c:	ldr	r0, [pc, #524]	; 17720 <__assert_fail@plt+0x512c>
   17510:	bl	16a28 <__assert_fail@plt+0x4434>
   17514:	ldr	r4, [r6, #12]
   17518:	mov	r1, #1
   1751c:	mov	r0, r4
   17520:	bl	15c80 <__assert_fail@plt+0x368c>
   17524:	mov	r0, r4
   17528:	bl	16eb4 <__assert_fail@plt+0x48c0>
   1752c:	ldr	r4, [r6, #12]
   17530:	mov	r1, #1
   17534:	mov	r0, r4
   17538:	bl	15c80 <__assert_fail@plt+0x368c>
   1753c:	ldr	r3, [r5, #44]	; 0x2c
   17540:	tst	r3, #9
   17544:	bne	17570 <__assert_fail@plt+0x4f7c>
   17548:	mov	r0, r4
   1754c:	add	sp, sp, #36	; 0x24
   17550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17554:	ldr	r1, [pc, #456]	; 17724 <__assert_fail@plt+0x5130>
   17558:	bl	120b4 <dcgettext@plt>
   1755c:	mov	r3, r7
   17560:	mov	r1, sl
   17564:	mov	r2, r0
   17568:	mov	r0, #1
   1756c:	bl	121ec <error@plt>
   17570:	ldr	r4, [pc, #412]	; 17714 <__assert_fail@plt+0x5120>
   17574:	mov	r2, #21
   17578:	mov	r1, #1
   1757c:	ldr	r3, [r4]
   17580:	ldr	r0, [pc, #416]	; 17728 <__assert_fail@plt+0x5134>
   17584:	bl	12168 <fwrite@plt>
   17588:	ldr	r0, [r4]
   1758c:	mov	r2, #0
   17590:	ldr	r1, [r6, #12]
   17594:	bl	16478 <__assert_fail@plt+0x3e84>
   17598:	ldr	r3, [r4]
   1759c:	mov	r2, #24
   175a0:	mov	r1, #1
   175a4:	ldr	r0, [pc, #384]	; 1772c <__assert_fail@plt+0x5138>
   175a8:	bl	12168 <fwrite@plt>
   175ac:	ldr	r0, [r4]
   175b0:	ldr	r1, [r6, #12]
   175b4:	bl	14be8 <__assert_fail@plt+0x25f4>
   175b8:	ldr	r1, [r4]
   175bc:	mov	r0, #10
   175c0:	bl	1248c <fputc@plt>
   175c4:	ldr	r4, [r6, #12]
   175c8:	b	17548 <__assert_fail@plt+0x4f54>
   175cc:	ldr	r7, [pc, #320]	; 17714 <__assert_fail@plt+0x5120>
   175d0:	mov	r2, #11
   175d4:	mov	r1, #1
   175d8:	ldr	r3, [r7]
   175dc:	ldr	r0, [pc, #332]	; 17730 <__assert_fail@plt+0x513c>
   175e0:	bl	12168 <fwrite@plt>
   175e4:	mov	r2, r4
   175e8:	ldr	r0, [r7]
   175ec:	ldr	r1, [r6, #12]
   175f0:	bl	16478 <__assert_fail@plt+0x3e84>
   175f4:	b	17504 <__assert_fail@plt+0x4f10>
   175f8:	mov	r2, #5
   175fc:	ldr	r1, [pc, #304]	; 17734 <__assert_fail@plt+0x5140>
   17600:	bl	120b4 <dcgettext@plt>
   17604:	ldr	r3, [sp, #28]
   17608:	mov	r1, r5
   1760c:	ldr	r3, [r4, r3, lsl #2]
   17610:	mov	r2, r0
   17614:	mov	r0, r5
   17618:	bl	121ec <error@plt>
   1761c:	ldr	r3, [sp, #28]
   17620:	mov	r1, r5
   17624:	ldr	r0, [r4, r3, lsl #2]
   17628:	bl	123f0 <access@plt>
   1762c:	subs	r4, r0, #0
   17630:	beq	1765c <__assert_fail@plt+0x5068>
   17634:	mov	r0, #1
   17638:	bl	122d0 <exit@plt>
   1763c:	mov	r2, #5
   17640:	ldr	r1, [pc, #240]	; 17738 <__assert_fail@plt+0x5144>
   17644:	bl	120b4 <dcgettext@plt>
   17648:	mov	r3, r7
   1764c:	mov	r1, r5
   17650:	mov	r2, r0
   17654:	mov	r0, #1
   17658:	bl	121ec <error@plt>
   1765c:	mov	r2, #5
   17660:	ldr	r1, [pc, #212]	; 1773c <__assert_fail@plt+0x5148>
   17664:	bl	120b4 <dcgettext@plt>
   17668:	ldr	r3, [r6, #20]
   1766c:	mov	r1, r4
   17670:	ldr	r3, [r3, #4]
   17674:	mov	r2, r0
   17678:	mov	r0, r4
   1767c:	bl	121ec <error@plt>
   17680:	b	17634 <__assert_fail@plt+0x5040>
   17684:	ldr	r3, [pc, #180]	; 17740 <__assert_fail@plt+0x514c>
   17688:	ldr	r2, [pc, #180]	; 17744 <__assert_fail@plt+0x5150>
   1768c:	ldr	r1, [pc, #180]	; 17748 <__assert_fail@plt+0x5154>
   17690:	ldr	r0, [pc, #180]	; 1774c <__assert_fail@plt+0x5158>
   17694:	bl	125f4 <__assert_fail@plt>
   17698:	ldr	r3, [pc, #160]	; 17740 <__assert_fail@plt+0x514c>
   1769c:	ldr	r2, [pc, #172]	; 17750 <__assert_fail@plt+0x515c>
   176a0:	ldr	r1, [pc, #160]	; 17748 <__assert_fail@plt+0x5154>
   176a4:	ldr	r0, [pc, #168]	; 17754 <__assert_fail@plt+0x5160>
   176a8:	bl	125f4 <__assert_fail@plt>
   176ac:	mov	r2, #5
   176b0:	ldr	r1, [pc, #160]	; 17758 <__assert_fail@plt+0x5164>
   176b4:	b	1749c <__assert_fail@plt+0x4ea8>
   176b8:	mov	r2, #5
   176bc:	ldr	r1, [pc, #152]	; 1775c <__assert_fail@plt+0x5168>
   176c0:	bl	120b4 <dcgettext@plt>
   176c4:	mov	r3, r7
   176c8:	mov	r1, r6
   176cc:	mov	r2, r0
   176d0:	mov	r0, #1
   176d4:	bl	121ec <error@plt>
   176d8:	ldr	r3, [pc, #96]	; 17740 <__assert_fail@plt+0x514c>
   176dc:	ldr	r2, [pc, #124]	; 17760 <__assert_fail@plt+0x516c>
   176e0:	ldr	r1, [pc, #96]	; 17748 <__assert_fail@plt+0x5154>
   176e4:	ldr	r0, [pc, #120]	; 17764 <__assert_fail@plt+0x5170>
   176e8:	bl	125f4 <__assert_fail@plt>
   176ec:	andeq	r7, r5, r0, ror r5
   176f0:	andeq	r1, r4, ip, asr #11
   176f4:	andeq	r2, r4, r4, lsr #11
   176f8:	ldrdeq	r1, [r4], -r0
   176fc:	andeq	r7, r5, r0, asr #28
   17700:	muleq	r4, r8, r6
   17704:	andeq	r7, r5, ip, ror #28
   17708:	andeq	r3, r1, ip, asr #21
   1770c:	strdeq	r1, [r4], -r0
   17710:	ldrdeq	r1, [r4], -r4
   17714:	andeq	r7, r5, r8, asr #10
   17718:	ldrdeq	r1, [r4], -ip
   1771c:	andeq	r1, r4, r0, lsl r7
   17720:	andeq	r7, r5, ip, ror r5
   17724:	andeq	r1, r4, r0, lsl #13
   17728:	andeq	r1, r4, r8, lsr r7
   1772c:	andeq	r1, r4, r0, asr r7
   17730:	andeq	r1, r4, ip, lsr #14
   17734:	andeq	r1, r4, r4, lsl r6
   17738:	andeq	r1, r4, r8, ror #12
   1773c:	andeq	r1, r4, r8, lsr r6
   17740:	andeq	r0, r4, r8, lsr lr
   17744:	strdeq	r0, [r0], -r7
   17748:	ldrdeq	r1, [r4], -r4
   1774c:	andeq	r1, r4, ip, ror #11
   17750:	strdeq	r0, [r0], -r6
   17754:	ldrdeq	r1, [r4], -r8
   17758:	andeq	r0, r4, r8, ror #30
   1775c:			; <UNDEFINED> instruction: 0x000416b8
   17760:	strdeq	r0, [r0], -r8
   17764:	andeq	r1, r4, r0, lsl #12
   17768:	push	{r4, r5, r6, lr}
   1776c:	mov	r4, r0
   17770:	mov	r5, r1
   17774:	ldr	r3, [r4, #156]	; 0x9c
   17778:	mov	r1, r5
   1777c:	subs	r0, r3, #0
   17780:	beq	17788 <__assert_fail@plt+0x5194>
   17784:	bl	17768 <__assert_fail@plt+0x5174>
   17788:	mov	r0, r4
   1778c:	blx	r5
   17790:	ldr	r4, [r4, #160]	; 0xa0
   17794:	cmp	r4, #0
   17798:	bne	17774 <__assert_fail@plt+0x5180>
   1779c:	pop	{r4, r5, r6, pc}
   177a0:	ldr	r3, [pc, #60]	; 177e4 <__assert_fail@plt+0x51f0>
   177a4:	ldr	r2, [r0]
   177a8:	ldr	r1, [pc, #56]	; 177e8 <__assert_fail@plt+0x51f4>
   177ac:	ldr	ip, [pc, #56]	; 177ec <__assert_fail@plt+0x51f8>
   177b0:	cmp	r2, r1
   177b4:	cmpne	r2, r3
   177b8:	moveq	r3, #1
   177bc:	movne	r3, #0
   177c0:	ldr	r1, [pc, #40]	; 177f0 <__assert_fail@plt+0x51fc>
   177c4:	cmp	r2, ip
   177c8:	orreq	r3, r3, #1
   177cc:	cmp	r2, r1
   177d0:	orreq	r3, r3, #1
   177d4:	cmp	r3, #0
   177d8:	movne	r3, #0
   177dc:	strne	r3, [r0, #44]	; 0x2c
   177e0:	bx	lr
   177e4:	andeq	sl, r1, r4, ror #1
   177e8:	andeq	r4, r1, ip, asr #11
   177ec:	andeq	r3, r1, r8, lsr #29
   177f0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   177f4:	subs	ip, r2, #0
   177f8:	push	{r4, r5, r6, lr}
   177fc:	mov	r5, r0
   17800:	mov	r6, r1
   17804:	beq	17850 <__assert_fail@plt+0x525c>
   17808:	ldr	r4, [pc, #120]	; 17888 <__assert_fail@plt+0x5294>
   1780c:	ldrb	r0, [r4, #40]	; 0x28
   17810:	cmp	r0, #0
   17814:	bne	17844 <__assert_fail@plt+0x5250>
   17818:	ldr	r1, [pc, #108]	; 1788c <__assert_fail@plt+0x5298>
   1781c:	mov	r2, r3
   17820:	ldr	r1, [r1, #72]	; 0x48
   17824:	bl	2b208 <__assert_fail@plt+0x18c14>
   17828:	mov	r1, r6
   1782c:	ldr	r2, [pc, #92]	; 17890 <__assert_fail@plt+0x529c>
   17830:	mov	r3, r0
   17834:	mov	r0, r5
   17838:	bl	121ec <error@plt>
   1783c:	mov	r3, #1
   17840:	str	r3, [r4, #28]
   17844:	mov	r3, #1
   17848:	strb	r3, [r4, #40]	; 0x28
   1784c:	pop	{r4, r5, r6, pc}
   17850:	ldr	r1, [pc, #52]	; 1788c <__assert_fail@plt+0x5298>
   17854:	mov	r2, r3
   17858:	mov	r0, ip
   1785c:	ldr	r1, [r1, #72]	; 0x48
   17860:	bl	2b208 <__assert_fail@plt+0x18c14>
   17864:	ldr	r2, [pc, #36]	; 17890 <__assert_fail@plt+0x529c>
   17868:	mov	r1, r6
   1786c:	mov	r3, r0
   17870:	mov	r0, r5
   17874:	bl	121ec <error@plt>
   17878:	ldr	r3, [pc, #8]	; 17888 <__assert_fail@plt+0x5294>
   1787c:	mov	r2, #1
   17880:	str	r2, [r3, #28]
   17884:	pop	{r4, r5, r6, pc}
   17888:	andeq	r7, r5, r0, asr #28
   1788c:	andeq	r7, r5, ip, ror #28
   17890:	andeq	r4, r4, r0, ror #18
   17894:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17898:	subs	r4, r0, #0
   1789c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   178a0:	ldr	r5, [pc, #188]	; 17964 <__assert_fail@plt+0x5370>
   178a4:	ldrb	r3, [r5, #32]
   178a8:	cmp	r3, #0
   178ac:	beq	17950 <__assert_fail@plt+0x535c>
   178b0:	ldr	r7, [pc, #176]	; 17968 <__assert_fail@plt+0x5374>
   178b4:	ldr	r6, [pc, #176]	; 1796c <__assert_fail@plt+0x5378>
   178b8:	ldr	r9, [pc, #176]	; 17970 <__assert_fail@plt+0x537c>
   178bc:	ldr	r8, [pc, #176]	; 17974 <__assert_fail@plt+0x5380>
   178c0:	mov	sl, #0
   178c4:	b	178e0 <__assert_fail@plt+0x52ec>
   178c8:	ldr	r4, [r4, #160]	; 0xa0
   178cc:	cmp	r4, #0
   178d0:	beq	1794c <__assert_fail@plt+0x5358>
   178d4:	ldrb	r3, [r5, #32]
   178d8:	cmp	r3, #0
   178dc:	beq	17950 <__assert_fail@plt+0x535c>
   178e0:	ldr	r0, [r4, #156]	; 0x9c
   178e4:	bl	17894 <__assert_fail@plt+0x52a0>
   178e8:	ldr	r3, [r4]
   178ec:	cmp	r3, r6
   178f0:	cmpne	r3, r7
   178f4:	bne	178c8 <__assert_fail@plt+0x52d4>
   178f8:	ldrb	r3, [r4, #40]	; 0x28
   178fc:	cmp	r3, #0
   17900:	beq	178c8 <__assert_fail@plt+0x52d4>
   17904:	ldr	r3, [r4, #116]	; 0x74
   17908:	cmp	r3, #0
   1790c:	beq	178c8 <__assert_fail@plt+0x52d4>
   17910:	add	r2, r4, #40	; 0x28
   17914:	mov	r1, r9
   17918:	ldr	r0, [r4, #144]	; 0x90
   1791c:	bl	1f5ec <__assert_fail@plt+0xcff8>
   17920:	ldr	r0, [r4, #144]	; 0x90
   17924:	ldr	r3, [r8]
   17928:	cmp	r0, r3
   1792c:	beq	178c8 <__assert_fail@plt+0x52d4>
   17930:	bl	2b53c <__assert_fail@plt+0x18f48>
   17934:	ldr	r0, [r4, #144]	; 0x90
   17938:	bl	2db68 <__assert_fail@plt+0x1b574>
   1793c:	str	sl, [r4, #144]	; 0x90
   17940:	ldr	r4, [r4, #160]	; 0xa0
   17944:	cmp	r4, #0
   17948:	bne	178d4 <__assert_fail@plt+0x52e0>
   1794c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17950:	ldr	r3, [pc, #32]	; 17978 <__assert_fail@plt+0x5384>
   17954:	mov	r2, #396	; 0x18c
   17958:	ldr	r1, [pc, #28]	; 1797c <__assert_fail@plt+0x5388>
   1795c:	ldr	r0, [pc, #28]	; 17980 <__assert_fail@plt+0x538c>
   17960:	bl	125f4 <__assert_fail@plt>
   17964:	andeq	r7, r5, r0, asr #28
   17968:	andeq	r4, r1, r8, lsr #8
   1796c:	muleq	r1, r0, lr
   17970:	andeq	r7, r1, r4, lsl #19
   17974:	andeq	r7, r5, ip, ror #10
   17978:	andeq	r1, r4, r8, asr #16
   1797c:	andeq	r1, r4, r4, lsr #18
   17980:	andeq	r1, r4, ip, lsr #18
   17984:	add	r1, r0, #48	; 0x30
   17988:	push	{r4, lr}
   1798c:	add	r0, r0, #4
   17990:	bl	1f08c <__assert_fail@plt+0xca98>
   17994:	mov	r0, #0
   17998:	pop	{r4, pc}
   1799c:	push	{r4, r5, r6, lr}
   179a0:	subs	r4, r0, #0
   179a4:	popeq	{r4, r5, r6, pc}
   179a8:	ldr	r5, [pc, #84]	; 17a04 <__assert_fail@plt+0x5410>
   179ac:	b	179bc <__assert_fail@plt+0x53c8>
   179b0:	ldr	r4, [r4, #160]	; 0xa0
   179b4:	cmp	r4, #0
   179b8:	beq	17a00 <__assert_fail@plt+0x540c>
   179bc:	ldr	r0, [r4, #156]	; 0x9c
   179c0:	bl	1799c <__assert_fail@plt+0x53a8>
   179c4:	ldr	r3, [r4]
   179c8:	cmp	r3, r5
   179cc:	bne	179b0 <__assert_fail@plt+0x53bc>
   179d0:	ldrb	r3, [r4, #40]	; 0x28
   179d4:	cmp	r3, #0
   179d8:	beq	179b0 <__assert_fail@plt+0x53bc>
   179dc:	ldr	r3, [r4, #116]	; 0x74
   179e0:	cmp	r3, #0
   179e4:	beq	179b0 <__assert_fail@plt+0x53bc>
   179e8:	add	r1, r4, #88	; 0x58
   179ec:	add	r0, r4, #44	; 0x2c
   179f0:	bl	1f08c <__assert_fail@plt+0xca98>
   179f4:	ldr	r4, [r4, #160]	; 0xa0
   179f8:	cmp	r4, #0
   179fc:	bne	179bc <__assert_fail@plt+0x53c8>
   17a00:	pop	{r4, r5, r6, pc}
   17a04:	andeq	r3, r1, ip, lsl #29
   17a08:	ldr	r3, [pc, #88]	; 17a68 <__assert_fail@plt+0x5474>
   17a0c:	push	{r4, r5, lr}
   17a10:	mov	r4, r0
   17a14:	ldr	r3, [r3, #44]	; 0x2c
   17a18:	sub	sp, sp, #12
   17a1c:	tst	r3, #2
   17a20:	mov	r5, r1
   17a24:	bne	17a50 <__assert_fail@plt+0x545c>
   17a28:	ldr	r2, [pc, #60]	; 17a6c <__assert_fail@plt+0x5478>
   17a2c:	mov	r0, #256	; 0x100
   17a30:	mov	r3, r5
   17a34:	ldr	r1, [r2, #16]
   17a38:	str	r0, [sp]
   17a3c:	mov	r2, r4
   17a40:	mov	r0, #3
   17a44:	bl	1212c <__fxstatat64@plt>
   17a48:	add	sp, sp, #12
   17a4c:	pop	{r4, r5, pc}
   17a50:	ldr	r3, [pc, #24]	; 17a70 <__assert_fail@plt+0x547c>
   17a54:	mov	r2, r0
   17a58:	ldr	r1, [pc, #20]	; 17a74 <__assert_fail@plt+0x5480>
   17a5c:	ldr	r0, [r3]
   17a60:	bl	1233c <fprintf@plt>
   17a64:	b	17a28 <__assert_fail@plt+0x5434>
   17a68:	andeq	r7, r5, ip, ror #28
   17a6c:	andeq	r7, r5, r0, asr #28
   17a70:	andeq	r7, r5, r8, asr #10
   17a74:	andeq	r1, r4, r8, asr #18
   17a78:	push	{r4, r5, r6, lr}
   17a7c:	mov	r4, r1
   17a80:	mov	r1, r2
   17a84:	mov	r5, r0
   17a88:	bl	16378 <__assert_fail@plt+0x3d84>
   17a8c:	ldr	ip, [r5, #4]
   17a90:	mov	r2, #0
   17a94:	mov	r1, #1
   17a98:	stm	r0, {r4, ip}
   17a9c:	str	r1, [r0, #8]
   17aa0:	str	r2, [r0, #40]	; 0x28
   17aa4:	str	r2, [r0, #12]
   17aa8:	pop	{r4, r5, r6, pc}
   17aac:	push	{r4, r5, r6, lr}
   17ab0:	ldr	r4, [r0, #12]
   17ab4:	cmp	r4, #0
   17ab8:	beq	17ae4 <__assert_fail@plt+0x54f0>
   17abc:	mov	r5, r0
   17ac0:	bl	16378 <__assert_fail@plt+0x3d84>
   17ac4:	ldr	ip, [r5, #4]
   17ac8:	mov	r2, #0
   17acc:	mov	r1, #1
   17ad0:	stm	r0, {r4, ip}
   17ad4:	str	r1, [r0, #8]
   17ad8:	str	r2, [r0, #40]	; 0x28
   17adc:	str	r2, [r0, #12]
   17ae0:	pop	{r4, r5, r6, pc}
   17ae4:	ldr	r3, [pc, #12]	; 17af8 <__assert_fail@plt+0x5504>
   17ae8:	mov	r2, #123	; 0x7b
   17aec:	ldr	r1, [pc, #8]	; 17afc <__assert_fail@plt+0x5508>
   17af0:	ldr	r0, [pc, #8]	; 17b00 <__assert_fail@plt+0x550c>
   17af4:	bl	125f4 <__assert_fail@plt>
   17af8:	andeq	r1, r4, r8, ror #16
   17afc:	andeq	r1, r4, r4, lsr #18
   17b00:	andeq	r1, r4, r4, lsl #19
   17b04:	mov	r1, #0
   17b08:	b	17aac <__assert_fail@plt+0x54b8>
   17b0c:	push	{r7, fp, lr}
   17b10:	subs	r7, r0, #0
   17b14:	sub	sp, sp, #12
   17b18:	beq	17b50 <__assert_fail@plt+0x555c>
   17b1c:	ldr	r3, [pc, #460]	; 17cf0 <__assert_fail@plt+0x56fc>
   17b20:	mov	r2, #5
   17b24:	ldr	r1, [pc, #456]	; 17cf4 <__assert_fail@plt+0x5700>
   17b28:	mov	r0, #0
   17b2c:	ldr	r4, [r3]
   17b30:	bl	120b4 <dcgettext@plt>
   17b34:	ldr	r3, [pc, #444]	; 17cf8 <__assert_fail@plt+0x5704>
   17b38:	ldr	r2, [r3]
   17b3c:	mov	r1, r0
   17b40:	mov	r0, r4
   17b44:	bl	1233c <fprintf@plt>
   17b48:	mov	r0, r7
   17b4c:	bl	122d0 <exit@plt>
   17b50:	ldr	r6, [pc, #420]	; 17cfc <__assert_fail@plt+0x5708>
   17b54:	mov	r2, #5
   17b58:	ldr	r1, [pc, #416]	; 17d00 <__assert_fail@plt+0x570c>
   17b5c:	ldr	r3, [r6]
   17b60:	ldr	fp, [pc, #400]	; 17cf8 <__assert_fail@plt+0x5704>
   17b64:	str	r3, [sp, #4]
   17b68:	bl	120b4 <dcgettext@plt>
   17b6c:	ldr	r3, [sp, #4]
   17b70:	ldr	r2, [fp]
   17b74:	mov	r5, r7
   17b78:	mov	r4, #1
   17b7c:	ldr	r9, [pc, #384]	; 17d04 <__assert_fail@plt+0x5710>
   17b80:	ldr	r8, [pc, #384]	; 17d08 <__assert_fail@plt+0x5714>
   17b84:	ldr	sl, [pc, #384]	; 17d0c <__assert_fail@plt+0x5718>
   17b88:	mov	r1, r0
   17b8c:	mov	r0, r3
   17b90:	bl	1233c <fprintf@plt>
   17b94:	mov	r2, #5
   17b98:	ldr	r1, [pc, #368]	; 17d10 <__assert_fail@plt+0x571c>
   17b9c:	mov	r0, r7
   17ba0:	bl	120b4 <dcgettext@plt>
   17ba4:	ldr	r1, [r6]
   17ba8:	bl	12588 <fputs@plt>
   17bac:	mov	r2, #5
   17bb0:	ldr	r1, [pc, #348]	; 17d14 <__assert_fail@plt+0x5720>
   17bb4:	mov	r0, r7
   17bb8:	bl	120b4 <dcgettext@plt>
   17bbc:	ldr	r1, [r6]
   17bc0:	bl	12588 <fputs@plt>
   17bc4:	mov	r2, #5
   17bc8:	ldr	r1, [pc, #328]	; 17d18 <__assert_fail@plt+0x5724>
   17bcc:	mov	r0, r7
   17bd0:	bl	120b4 <dcgettext@plt>
   17bd4:	ldr	r1, [r6]
   17bd8:	bl	12588 <fputs@plt>
   17bdc:	mov	r2, #5
   17be0:	ldr	r1, [pc, #308]	; 17d1c <__assert_fail@plt+0x5728>
   17be4:	mov	r0, r7
   17be8:	bl	120b4 <dcgettext@plt>
   17bec:	ldr	r1, [r6]
   17bf0:	bl	12588 <fputs@plt>
   17bf4:	mov	r2, #5
   17bf8:	ldr	r1, [pc, #288]	; 17d20 <__assert_fail@plt+0x572c>
   17bfc:	mov	r0, r7
   17c00:	bl	120b4 <dcgettext@plt>
   17c04:	ldr	r1, [r6]
   17c08:	bl	12588 <fputs@plt>
   17c0c:	mov	r2, #5
   17c10:	ldr	r1, [pc, #268]	; 17d24 <__assert_fail@plt+0x5730>
   17c14:	mov	r0, r7
   17c18:	bl	120b4 <dcgettext@plt>
   17c1c:	ldr	r1, [r6]
   17c20:	bl	12588 <fputs@plt>
   17c24:	mov	r2, #5
   17c28:	ldr	r1, [pc, #248]	; 17d28 <__assert_fail@plt+0x5734>
   17c2c:	mov	r0, r7
   17c30:	bl	120b4 <dcgettext@plt>
   17c34:	ldr	r1, [r6]
   17c38:	bl	12588 <fputs@plt>
   17c3c:	mov	r2, #5
   17c40:	ldr	r1, [pc, #228]	; 17d2c <__assert_fail@plt+0x5738>
   17c44:	mov	r0, r7
   17c48:	bl	120b4 <dcgettext@plt>
   17c4c:	ldr	r1, [r6]
   17c50:	bl	12588 <fputs@plt>
   17c54:	mov	r2, #5
   17c58:	ldr	r1, [pc, #208]	; 17d30 <__assert_fail@plt+0x573c>
   17c5c:	mov	r0, r7
   17c60:	bl	120b4 <dcgettext@plt>
   17c64:	ldr	r1, [r6]
   17c68:	bl	12588 <fputs@plt>
   17c6c:	mov	r2, #5
   17c70:	ldr	r1, [pc, #188]	; 17d34 <__assert_fail@plt+0x5740>
   17c74:	mov	r0, r7
   17c78:	bl	120b4 <dcgettext@plt>
   17c7c:	ldr	r1, [r6]
   17c80:	bl	12588 <fputs@plt>
   17c84:	b	17c90 <__assert_fail@plt+0x569c>
   17c88:	add	r4, r4, #1
   17c8c:	add	r5, r5, #12
   17c90:	cmp	r4, #1
   17c94:	ldr	r3, [r9, r5]
   17c98:	ldr	r0, [r6]
   17c9c:	beq	17ce0 <__assert_fail@plt+0x56ec>
   17ca0:	mov	r2, sl
   17ca4:	mov	r1, r8
   17ca8:	bl	1233c <fprintf@plt>
   17cac:	cmp	r4, #9
   17cb0:	bne	17c88 <__assert_fail@plt+0x5694>
   17cb4:	mov	r2, #5
   17cb8:	ldr	r1, [pc, #120]	; 17d38 <__assert_fail@plt+0x5744>
   17cbc:	mov	r0, #0
   17cc0:	bl	120b4 <dcgettext@plt>
   17cc4:	ldr	r1, [r6]
   17cc8:	bl	12588 <fputs@plt>
   17ccc:	ldr	r1, [fp]
   17cd0:	ldr	r0, [r6]
   17cd4:	bl	20d28 <__assert_fail@plt+0xe734>
   17cd8:	mov	r0, #0
   17cdc:	bl	122d0 <exit@plt>
   17ce0:	ldr	r2, [pc, #84]	; 17d3c <__assert_fail@plt+0x5748>
   17ce4:	mov	r1, r8
   17ce8:	bl	1233c <fprintf@plt>
   17cec:	b	17c88 <__assert_fail@plt+0x5694>
   17cf0:	andeq	r7, r5, r8, asr #10
   17cf4:	andeq	r1, r4, r0, lsr #19
   17cf8:	andeq	r7, r5, r4, lsl #26
   17cfc:	andeq	r7, r5, r4, asr r5
   17d00:	andeq	r1, r4, r8, asr #19
   17d04:	andeq	r1, r4, r8, ror r8
   17d08:	strdeq	r2, [r4], -r0
   17d0c:	andeq	r2, r4, r0, ror r0
   17d10:	andeq	r1, r4, r4, lsl sl
   17d14:	andeq	r1, r4, r0, lsr #21
   17d18:	andeq	r1, r4, r0, ror fp
   17d1c:	andeq	r1, r4, r8, asr #23
   17d20:	muleq	r4, r8, ip
   17d24:			; <UNDEFINED> instruction: 0x00041eb8
   17d28:			; <UNDEFINED> instruction: 0x00041fb8
   17d2c:	ldrdeq	r1, [r4], -r0
   17d30:	andeq	r2, r4, ip
   17d34:	andeq	r2, r4, r4, asr r0
   17d38:	andeq	r2, r4, r4, ror r0
   17d3c:	andeq	r2, r4, r0, asr r0
   17d40:	bx	lr
   17d44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17d48:	ldr	r4, [pc, #228]	; 17e34 <__assert_fail@plt+0x5840>
   17d4c:	ldrb	ip, [r4, #4]
   17d50:	cmp	ip, #0
   17d54:	ldrne	r6, [r2, #16]
   17d58:	beq	17d74 <__assert_fail@plt+0x5780>
   17d5c:	mov	r3, #1
   17d60:	str	r6, [r4, #8]
   17d64:	strb	r3, [r4, #4]
   17d68:	strb	r3, [r4, #5]
   17d6c:	mov	r0, #0
   17d70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d74:	ldr	r8, [pc, #188]	; 17e38 <__assert_fail@plt+0x5844>
   17d78:	mov	r7, r1
   17d7c:	mov	r6, r0
   17d80:	mov	r1, r2
   17d84:	mov	r0, r7
   17d88:	ldr	r3, [r8, #52]	; 0x34
   17d8c:	mov	r5, r2
   17d90:	blx	r3
   17d94:	cmp	r0, #0
   17d98:	beq	17dd0 <__assert_fail@plt+0x57dc>
   17d9c:	ldrb	r3, [r8, #14]
   17da0:	cmp	r3, #0
   17da4:	beq	17e28 <__assert_fail@plt+0x5834>
   17da8:	bl	12348 <__errno_location@plt>
   17dac:	ldr	r1, [r0]
   17db0:	cmp	r1, #2
   17db4:	beq	17e20 <__assert_fail@plt+0x582c>
   17db8:	mov	r3, r6
   17dbc:	mov	r2, #1
   17dc0:	mov	r0, #0
   17dc4:	bl	177f4 <__assert_fail@plt+0x5200>
   17dc8:	mvn	r0, #0
   17dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17dd0:	ldr	r6, [r5, #16]
   17dd4:	cmp	r6, #0
   17dd8:	bne	17d5c <__assert_fail@plt+0x5768>
   17ddc:	mov	r2, #5
   17de0:	ldr	r1, [pc, #84]	; 17e3c <__assert_fail@plt+0x5848>
   17de4:	bl	120b4 <dcgettext@plt>
   17de8:	mov	r2, r7
   17dec:	ldr	r1, [r8, #72]	; 0x48
   17df0:	mov	r9, r0
   17df4:	mov	r0, r6
   17df8:	bl	2b208 <__assert_fail@plt+0x18c14>
   17dfc:	mov	r1, r6
   17e00:	mov	r2, r9
   17e04:	mov	r3, r0
   17e08:	mov	r0, r6
   17e0c:	bl	121ec <error@plt>
   17e10:	mov	r3, #1
   17e14:	ldr	r6, [r5, #16]
   17e18:	str	r3, [r4, #28]
   17e1c:	b	17d5c <__assert_fail@plt+0x5768>
   17e20:	mvn	r0, #0
   17e24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e28:	bl	12348 <__errno_location@plt>
   17e2c:	ldr	r1, [r0]
   17e30:	b	17db8 <__assert_fail@plt+0x57c4>
   17e34:	andeq	r7, r5, r0, asr #28
   17e38:	andeq	r7, r5, ip, ror #28
   17e3c:	andeq	r0, r4, r0, asr #10
   17e40:	push	{lr}		; (str lr, [sp, #-4]!)
   17e44:	vpush	{d8}
   17e48:	sub	sp, sp, #396	; 0x18c
   17e4c:	mov	r0, sp
   17e50:	bl	1209c <uname@plt>
   17e54:	subs	r1, r0, #0
   17e58:	bne	17eb0 <__assert_fail@plt+0x58bc>
   17e5c:	add	r0, sp, #130	; 0x82
   17e60:	bl	123b4 <strtod@plt>
   17e64:	mov	r1, sp
   17e68:	ldr	r0, [pc, #120]	; 17ee8 <__assert_fail@plt+0x58f4>
   17e6c:	vcvt.f32.f64	s16, d0
   17e70:	bl	11f40 <strcmp@plt>
   17e74:	cmp	r0, #0
   17e78:	beq	17ec0 <__assert_fail@plt+0x58cc>
   17e7c:	mov	r1, sp
   17e80:	ldr	r0, [pc, #100]	; 17eec <__assert_fail@plt+0x58f8>
   17e84:	bl	11f40 <strcmp@plt>
   17e88:	cmp	r0, #0
   17e8c:	bne	17eb0 <__assert_fail@plt+0x58bc>
   17e90:	vldr	s15, [pc, #72]	; 17ee0 <__assert_fail@plt+0x58ec>
   17e94:	vcmpe.f32	s16, s15
   17e98:	vmrs	APSR_nzcv, fpscr
   17e9c:	movge	r0, #1
   17ea0:	movlt	r0, #0
   17ea4:	add	sp, sp, #396	; 0x18c
   17ea8:	vpop	{d8}
   17eac:	pop	{pc}		; (ldr pc, [sp], #4)
   17eb0:	mov	r0, #1
   17eb4:	add	sp, sp, #396	; 0x18c
   17eb8:	vpop	{d8}
   17ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ec0:	vldr	s15, [pc, #28]	; 17ee4 <__assert_fail@plt+0x58f0>
   17ec4:	vcmpe.f32	s16, s15
   17ec8:	vmrs	APSR_nzcv, fpscr
   17ecc:	movge	r0, #1
   17ed0:	movlt	r0, #0
   17ed4:	add	sp, sp, #396	; 0x18c
   17ed8:	vpop	{d8}
   17edc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee0:	submi	r6, r6, r6, ror #12
   17ee4:	andmi	ip, ip, sp, asr #25
   17ee8:	strheq	r2, [r4], -r8
   17eec:	andeq	r2, r4, r0, asr #1
   17ef0:	push	{r4, lr}
   17ef4:	ldr	r4, [pc, #28]	; 17f18 <__assert_fail@plt+0x5924>
   17ef8:	ldrb	r3, [r4, #32]
   17efc:	cmp	r3, #0
   17f00:	popeq	{r4, pc}
   17f04:	bl	15fc0 <__assert_fail@plt+0x39cc>
   17f08:	bl	17894 <__assert_fail@plt+0x52a0>
   17f0c:	mov	r3, #0
   17f10:	strb	r3, [r4, #32]
   17f14:	pop	{r4, pc}
   17f18:	andeq	r7, r5, r0, asr #28
   17f1c:	push	{r4, r5, lr}
   17f20:	mov	r0, #8
   17f24:	sub	sp, sp, #12
   17f28:	bl	2c184 <__assert_fail@plt+0x19b90>
   17f2c:	ldr	r4, [pc, #108]	; 17fa0 <__assert_fail@plt+0x59ac>
   17f30:	str	r0, [r4]
   17f34:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   17f38:	cmp	r0, #0
   17f3c:	bne	17f48 <__assert_fail@plt+0x5954>
   17f40:	add	sp, sp, #12
   17f44:	pop	{r4, r5, pc}
   17f48:	bl	12348 <__errno_location@plt>
   17f4c:	mov	r2, #5
   17f50:	ldr	r1, [pc, #76]	; 17fa4 <__assert_fail@plt+0x59b0>
   17f54:	ldr	r5, [r0]
   17f58:	mov	r0, #0
   17f5c:	bl	120b4 <dcgettext@plt>
   17f60:	ldr	r3, [r4]
   17f64:	ldr	r1, [r3]
   17f68:	cmp	r1, #0
   17f6c:	mov	r2, r0
   17f70:	blt	17f8c <__assert_fail@plt+0x5998>
   17f74:	ldr	r3, [pc, #44]	; 17fa8 <__assert_fail@plt+0x59b4>
   17f78:	mov	r1, r3
   17f7c:	str	r1, [sp]
   17f80:	mov	r0, #1
   17f84:	mov	r1, r5
   17f88:	bl	121ec <error@plt>
   17f8c:	ldr	r1, [r3, #4]
   17f90:	cmp	r1, #0
   17f94:	ldrne	r3, [pc, #16]	; 17fac <__assert_fail@plt+0x59b8>
   17f98:	bne	17f7c <__assert_fail@plt+0x5988>
   17f9c:	b	17f74 <__assert_fail@plt+0x5980>
   17fa0:	andeq	r7, r5, ip, ror #10
   17fa4:	andeq	r2, r4, r8, asr #1
   17fa8:	andeq	r2, r4, r0, asr r0
   17fac:	andeq	r3, r4, r4, asr #1
   17fb0:	push	{r4, r5, lr}
   17fb4:	sub	sp, sp, #12
   17fb8:	bl	15fc0 <__assert_fail@plt+0x39cc>
   17fbc:	subs	r5, r0, #0
   17fc0:	beq	18054 <__assert_fail@plt+0x5a60>
   17fc4:	ldr	r4, [pc, #292]	; 180f0 <__assert_fail@plt+0x5afc>
   17fc8:	ldr	r1, [pc, #292]	; 180f4 <__assert_fail@plt+0x5b00>
   17fcc:	bl	17768 <__assert_fail@plt+0x5174>
   17fd0:	ldrb	r3, [r4, #32]
   17fd4:	cmp	r3, #0
   17fd8:	bne	18040 <__assert_fail@plt+0x5a4c>
   17fdc:	ldr	r0, [r4, #36]	; 0x24
   17fe0:	bl	18e4c <__assert_fail@plt+0x6858>
   17fe4:	mov	r0, r5
   17fe8:	ldr	r1, [pc, #264]	; 180f8 <__assert_fail@plt+0x5b04>
   17fec:	bl	17768 <__assert_fail@plt+0x5174>
   17ff0:	ldr	r4, [pc, #260]	; 180fc <__assert_fail@plt+0x5b08>
   17ff4:	ldr	r0, [r4]
   17ff8:	bl	2b520 <__assert_fail@plt+0x18f2c>
   17ffc:	subs	r5, r0, #0
   18000:	bne	18090 <__assert_fail@plt+0x5a9c>
   18004:	ldr	r0, [r4]
   18008:	bl	2b53c <__assert_fail@plt+0x18f48>
   1800c:	ldr	r0, [r4]
   18010:	bl	2db68 <__assert_fail@plt+0x1b574>
   18014:	str	r5, [r4]
   18018:	bl	1fd18 <__assert_fail@plt+0xd724>
   1801c:	cmp	r0, #0
   18020:	bne	18064 <__assert_fail@plt+0x5a70>
   18024:	ldr	r3, [pc, #212]	; 18100 <__assert_fail@plt+0x5b0c>
   18028:	ldr	r0, [r3]
   1802c:	bl	2db08 <__assert_fail@plt+0x1b514>
   18030:	cmn	r0, #1
   18034:	beq	18070 <__assert_fail@plt+0x5a7c>
   18038:	add	sp, sp, #12
   1803c:	pop	{r4, r5, pc}
   18040:	bl	15fc0 <__assert_fail@plt+0x39cc>
   18044:	bl	17894 <__assert_fail@plt+0x52a0>
   18048:	mov	r3, #0
   1804c:	strb	r3, [r4, #32]
   18050:	b	17fdc <__assert_fail@plt+0x59e8>
   18054:	ldr	r3, [pc, #148]	; 180f0 <__assert_fail@plt+0x5afc>
   18058:	ldr	r0, [r3, #36]	; 0x24
   1805c:	bl	18e4c <__assert_fail@plt+0x6858>
   18060:	b	17ff0 <__assert_fail@plt+0x59fc>
   18064:	bl	1fd34 <__assert_fail@plt+0xd740>
   18068:	bl	1fcf4 <__assert_fail@plt+0xd700>
   1806c:	b	18024 <__assert_fail@plt+0x5a30>
   18070:	bl	12348 <__errno_location@plt>
   18074:	mov	r2, #0
   18078:	ldr	r3, [pc, #132]	; 18104 <__assert_fail@plt+0x5b10>
   1807c:	ldr	r1, [r0]
   18080:	mov	r0, r2
   18084:	add	sp, sp, #12
   18088:	pop	{r4, r5, lr}
   1808c:	b	177f4 <__assert_fail@plt+0x5200>
   18090:	bl	12348 <__errno_location@plt>
   18094:	mov	r2, #5
   18098:	ldr	r1, [pc, #104]	; 18108 <__assert_fail@plt+0x5b14>
   1809c:	ldr	r5, [r0]
   180a0:	mov	r0, #0
   180a4:	bl	120b4 <dcgettext@plt>
   180a8:	ldr	r3, [r4]
   180ac:	ldr	r1, [r3]
   180b0:	cmp	r1, #0
   180b4:	mov	r2, r0
   180b8:	blt	180dc <__assert_fail@plt+0x5ae8>
   180bc:	ldr	r3, [pc, #72]	; 1810c <__assert_fail@plt+0x5b18>
   180c0:	mov	r1, r3
   180c4:	str	r1, [sp]
   180c8:	mov	r0, #0
   180cc:	mov	r1, r5
   180d0:	bl	121ec <error@plt>
   180d4:	mov	r0, #1
   180d8:	bl	12018 <_exit@plt>
   180dc:	ldr	r1, [r3, #4]
   180e0:	cmp	r1, #0
   180e4:	ldrne	r3, [pc, #36]	; 18110 <__assert_fail@plt+0x5b1c>
   180e8:	bne	180c4 <__assert_fail@plt+0x5ad0>
   180ec:	b	180bc <__assert_fail@plt+0x5ac8>
   180f0:	andeq	r7, r5, r0, asr #28
   180f4:	muleq	r1, ip, r9
   180f8:	andeq	r7, r1, r0, lsr #15
   180fc:	andeq	r7, r5, ip, ror #10
   18100:	andeq	r7, r5, r4, asr r5
   18104:	andeq	r2, r4, r8, lsr #2
   18108:	strdeq	r2, [r4], -r8
   1810c:	andeq	r2, r4, r0, asr r0
   18110:	andeq	r3, r4, r4, asr #1
   18114:	ldr	r3, [pc, #172]	; 181c8 <__assert_fail@plt+0x5bd4>
   18118:	push	{r4, r5, r6, lr}
   1811c:	mov	r5, r1
   18120:	ldr	r1, [r3, #16]
   18124:	sub	sp, sp, #8
   18128:	cmn	r1, #100	; 0x64
   1812c:	cmpne	r1, #0
   18130:	blt	181b4 <__assert_fail@plt+0x5bc0>
   18134:	ldr	r3, [r3]
   18138:	mov	r4, r0
   1813c:	cmp	r3, #0
   18140:	beq	1816c <__assert_fail@plt+0x5b78>
   18144:	mov	r0, #256	; 0x100
   18148:	str	r0, [sp]
   1814c:	mov	r3, r5
   18150:	mov	r2, r4
   18154:	mov	r0, #3
   18158:	bl	1212c <__fxstatat64@plt>
   1815c:	mov	r6, r0
   18160:	mov	r0, r6
   18164:	add	sp, sp, #8
   18168:	pop	{r4, r5, r6, pc}
   1816c:	str	r3, [sp]
   18170:	mov	r2, r0
   18174:	mov	r3, r5
   18178:	mov	r0, #3
   1817c:	bl	1212c <__fxstatat64@plt>
   18180:	subs	r6, r0, #0
   18184:	beq	18160 <__assert_fail@plt+0x5b6c>
   18188:	bl	12348 <__errno_location@plt>
   1818c:	ldr	r3, [r0]
   18190:	cmp	r3, #2
   18194:	beq	181a0 <__assert_fail@plt+0x5bac>
   18198:	cmp	r3, #20
   1819c:	bne	18160 <__assert_fail@plt+0x5b6c>
   181a0:	mov	r1, r5
   181a4:	mov	r0, r4
   181a8:	add	sp, sp, #8
   181ac:	pop	{r4, r5, r6, lr}
   181b0:	b	17a08 <__assert_fail@plt+0x5414>
   181b4:	ldr	r3, [pc, #16]	; 181cc <__assert_fail@plt+0x5bd8>
   181b8:	ldr	r2, [pc, #16]	; 181d0 <__assert_fail@plt+0x5bdc>
   181bc:	ldr	r1, [pc, #16]	; 181d4 <__assert_fail@plt+0x5be0>
   181c0:	ldr	r0, [pc, #16]	; 181d8 <__assert_fail@plt+0x5be4>
   181c4:	bl	125f4 <__assert_fail@plt>
   181c8:	andeq	r7, r5, r0, asr #28
   181cc:	andeq	r1, r4, r4, ror #17
   181d0:	andeq	r0, r0, sp, asr r2
   181d4:	andeq	r1, r4, r4, lsr #18
   181d8:	andeq	r2, r4, r8, lsr r1
   181dc:	ldr	r3, [pc, #136]	; 1826c <__assert_fail@plt+0x5c78>
   181e0:	push	{r4, r5, r6, lr}
   181e4:	mov	r5, r1
   181e8:	ldr	r1, [r3, #16]
   181ec:	sub	sp, sp, #8
   181f0:	cmn	r1, #100	; 0x64
   181f4:	cmpne	r1, #0
   181f8:	blt	18258 <__assert_fail@plt+0x5c64>
   181fc:	mov	r3, #0
   18200:	str	r3, [sp]
   18204:	mov	r2, r0
   18208:	mov	r4, r0
   1820c:	mov	r3, r5
   18210:	mov	r0, #3
   18214:	bl	1212c <__fxstatat64@plt>
   18218:	subs	r6, r0, #0
   1821c:	bne	1822c <__assert_fail@plt+0x5c38>
   18220:	mov	r0, r6
   18224:	add	sp, sp, #8
   18228:	pop	{r4, r5, r6, pc}
   1822c:	bl	12348 <__errno_location@plt>
   18230:	ldr	r3, [r0]
   18234:	cmp	r3, #2
   18238:	beq	18244 <__assert_fail@plt+0x5c50>
   1823c:	cmp	r3, #20
   18240:	bne	18220 <__assert_fail@plt+0x5c2c>
   18244:	mov	r1, r5
   18248:	mov	r0, r4
   1824c:	add	sp, sp, #8
   18250:	pop	{r4, r5, r6, lr}
   18254:	b	17a08 <__assert_fail@plt+0x5414>
   18258:	ldr	r3, [pc, #16]	; 18270 <__assert_fail@plt+0x5c7c>
   1825c:	mov	r2, #636	; 0x27c
   18260:	ldr	r1, [pc, #12]	; 18274 <__assert_fail@plt+0x5c80>
   18264:	ldr	r0, [pc, #12]	; 18278 <__assert_fail@plt+0x5c84>
   18268:	bl	125f4 <__assert_fail@plt>
   1826c:	andeq	r7, r5, r0, asr #28
   18270:	strdeq	r1, [r4], -r4
   18274:	andeq	r1, r4, r4, lsr #18
   18278:	andeq	r2, r4, r8, lsr r1
   1827c:	ldr	ip, [pc, #76]	; 182d0 <__assert_fail@plt+0x5cdc>
   18280:	push	{lr}		; (str lr, [sp, #-4]!)
   18284:	sub	sp, sp, #12
   18288:	ldr	ip, [ip, #16]
   1828c:	cmn	ip, #100	; 0x64
   18290:	cmpne	ip, #0
   18294:	blt	182bc <__assert_fail@plt+0x5cc8>
   18298:	mov	lr, #256	; 0x100
   1829c:	mov	r3, r1
   182a0:	mov	r2, r0
   182a4:	mov	r1, ip
   182a8:	str	lr, [sp]
   182ac:	mov	r0, #3
   182b0:	bl	1212c <__fxstatat64@plt>
   182b4:	add	sp, sp, #12
   182b8:	pop	{pc}		; (ldr pc, [sp], #4)
   182bc:	ldr	r3, [pc, #16]	; 182d4 <__assert_fail@plt+0x5ce0>
   182c0:	ldr	r2, [pc, #16]	; 182d8 <__assert_fail@plt+0x5ce4>
   182c4:	ldr	r1, [pc, #16]	; 182dc <__assert_fail@plt+0x5ce8>
   182c8:	ldr	r0, [pc, #16]	; 182e0 <__assert_fail@plt+0x5cec>
   182cc:	bl	125f4 <__assert_fail@plt>
   182d0:	andeq	r7, r5, r0, asr #28
   182d4:	andeq	r1, r4, r4, lsl #18
   182d8:	andeq	r0, r0, sp, lsl #5
   182dc:	andeq	r1, r4, r4, lsr #18
   182e0:	andeq	r2, r4, r0, asr r1
   182e4:	ldr	r3, [pc, #140]	; 18378 <__assert_fail@plt+0x5d84>
   182e8:	push	{r4, r5, r6, r7, r8, lr}
   182ec:	mov	r2, r0
   182f0:	ldrd	r4, [r3]
   182f4:	ldr	ip, [pc, #128]	; 1837c <__assert_fail@plt+0x5d88>
   182f8:	mov	r6, r0
   182fc:	adds	r4, r4, #1
   18300:	adc	r5, r5, #0
   18304:	mov	r7, r1
   18308:	ldr	r0, [ip]
   1830c:	ldr	r1, [pc, #108]	; 18380 <__assert_fail@plt+0x5d8c>
   18310:	strd	r4, [r3]
   18314:	bl	1233c <fprintf@plt>
   18318:	ldr	r3, [pc, #100]	; 18384 <__assert_fail@plt+0x5d90>
   1831c:	ldr	r3, [r3, #48]	; 0x30
   18320:	cmp	r3, #1
   18324:	beq	18368 <__assert_fail@plt+0x5d74>
   18328:	bcc	18358 <__assert_fail@plt+0x5d64>
   1832c:	cmp	r3, #2
   18330:	bne	18344 <__assert_fail@plt+0x5d50>
   18334:	mov	r1, r7
   18338:	mov	r0, r6
   1833c:	pop	{r4, r5, r6, r7, r8, lr}
   18340:	b	18114 <__assert_fail@plt+0x5b20>
   18344:	ldr	r3, [pc, #60]	; 18388 <__assert_fail@plt+0x5d94>
   18348:	ldr	r2, [pc, #60]	; 1838c <__assert_fail@plt+0x5d98>
   1834c:	ldr	r1, [pc, #60]	; 18390 <__assert_fail@plt+0x5d9c>
   18350:	ldr	r0, [pc, #60]	; 18394 <__assert_fail@plt+0x5da0>
   18354:	bl	125f4 <__assert_fail@plt>
   18358:	mov	r1, r7
   1835c:	mov	r0, r6
   18360:	pop	{r4, r5, r6, r7, r8, lr}
   18364:	b	1827c <__assert_fail@plt+0x5c88>
   18368:	mov	r1, r7
   1836c:	mov	r0, r6
   18370:	pop	{r4, r5, r6, r7, r8, lr}
   18374:	b	181dc <__assert_fail@plt+0x5be8>
   18378:	muleq	r5, r0, r5
   1837c:	andeq	r7, r5, r8, asr #10
   18380:	andeq	r2, r4, r8, lsl #3
   18384:	andeq	r7, r5, ip, ror #28
   18388:	andeq	r1, r4, r4, lsl r9
   1838c:	andeq	r0, r0, r5, lsr #5
   18390:	andeq	r1, r4, r4, lsr #18
   18394:			; <UNDEFINED> instruction: 0x00044ab4
   18398:	ldr	r3, [pc, #36]	; 183c4 <__assert_fail@plt+0x5dd0>
   1839c:	ldr	r0, [r3, #48]	; 0x30
   183a0:	cmp	r0, #1
   183a4:	bxeq	lr
   183a8:	cmp	r0, #2
   183ac:	movne	r0, #0
   183b0:	ldreq	r3, [pc, #16]	; 183c8 <__assert_fail@plt+0x5dd4>
   183b4:	ldreq	r0, [r3]
   183b8:	clzeq	r0, r0
   183bc:	lsreq	r0, r0, #5
   183c0:	bx	lr
   183c4:	andeq	r7, r5, ip, ror #28
   183c8:	andeq	r7, r5, r0, asr #28
   183cc:	push	{r4, r5, r6, lr}
   183d0:	mov	r4, r0
   183d4:	mov	r5, r3
   183d8:	ldr	lr, [r4]
   183dc:	mov	r0, r1
   183e0:	cmp	lr, #0
   183e4:	ldrb	ip, [sp, #16]
   183e8:	beq	18410 <__assert_fail@plt+0x5e1c>
   183ec:	and	r3, lr, #61440	; 0xf000
   183f0:	cmp	r3, #40960	; 0xa000
   183f4:	beq	18464 <__assert_fail@plt+0x5e70>
   183f8:	ldr	r3, [pc, #200]	; 184c8 <__assert_fail@plt+0x5ed4>
   183fc:	mov	r0, #1
   18400:	str	lr, [r3, #8]
   18404:	str	lr, [r5, #16]
   18408:	strb	r0, [r3, #5]
   1840c:	pop	{r4, r5, r6, pc}
   18410:	cmp	ip, #0
   18414:	beq	18430 <__assert_fail@plt+0x5e3c>
   18418:	ldr	r3, [pc, #168]	; 184c8 <__assert_fail@plt+0x5ed4>
   1841c:	mov	r0, ip
   18420:	strb	lr, [r3, #4]
   18424:	strb	lr, [r3, #5]
   18428:	str	lr, [r3, #8]
   1842c:	pop	{r4, r5, r6, pc}
   18430:	mov	r1, r2
   18434:	mov	r2, r3
   18438:	bl	17d44 <__assert_fail@plt+0x5750>
   1843c:	cmp	r0, #0
   18440:	bne	184a0 <__assert_fail@plt+0x5eac>
   18444:	ldr	r3, [pc, #124]	; 184c8 <__assert_fail@plt+0x5ed4>
   18448:	ldr	r1, [r5, #16]
   1844c:	mov	r2, #1
   18450:	str	r1, [r4]
   18454:	mov	r0, r2
   18458:	str	r1, [r3, #8]
   1845c:	strb	r2, [r3, #5]
   18460:	pop	{r4, r5, r6, pc}
   18464:	ldr	r3, [pc, #96]	; 184cc <__assert_fail@plt+0x5ed8>
   18468:	ldr	r3, [r3, #48]	; 0x30
   1846c:	cmp	r3, #1
   18470:	beq	1848c <__assert_fail@plt+0x5e98>
   18474:	cmp	r3, #2
   18478:	ldr	r3, [pc, #72]	; 184c8 <__assert_fail@plt+0x5ed4>
   1847c:	bne	183fc <__assert_fail@plt+0x5e08>
   18480:	ldr	r1, [r3]
   18484:	cmp	r1, #0
   18488:	bne	183fc <__assert_fail@plt+0x5e08>
   1848c:	mov	r1, r2
   18490:	mov	r2, r5
   18494:	bl	17d44 <__assert_fail@plt+0x5750>
   18498:	cmp	r0, #0
   1849c:	beq	184a8 <__assert_fail@plt+0x5eb4>
   184a0:	mov	r0, #0
   184a4:	pop	{r4, r5, r6, pc}
   184a8:	ldr	r3, [pc, #24]	; 184c8 <__assert_fail@plt+0x5ed4>
   184ac:	ldr	r1, [r5, #16]
   184b0:	mov	r2, #1
   184b4:	str	r1, [r3, #8]
   184b8:	mov	r0, r2
   184bc:	str	r1, [r4]
   184c0:	strb	r2, [r3, #5]
   184c4:	pop	{r4, r5, r6, pc}
   184c8:	andeq	r7, r5, r0, asr #28
   184cc:	andeq	r7, r5, ip, ror #28
   184d0:	subs	r3, r0, #0
   184d4:	beq	18500 <__assert_fail@plt+0x5f0c>
   184d8:	ldrb	r0, [r3, #17]
   184dc:	cmp	r0, #0
   184e0:	beq	184f4 <__assert_fail@plt+0x5f00>
   184e4:	b	18508 <__assert_fail@plt+0x5f14>
   184e8:	ldrb	r2, [r3, #17]
   184ec:	cmp	r2, #0
   184f0:	bxne	lr
   184f4:	ldr	r3, [r3, #152]	; 0x98
   184f8:	cmp	r3, #0
   184fc:	bne	184e8 <__assert_fail@plt+0x5ef4>
   18500:	mov	r0, #1
   18504:	bx	lr
   18508:	mov	r0, #0
   1850c:	bx	lr
   18510:	ldrb	r3, [r0]
   18514:	sub	r3, r3, #33	; 0x21
   18518:	cmp	r3, #12
   1851c:	ldrls	pc, [pc, r3, lsl #2]
   18520:	b	18574 <__assert_fail@plt+0x5f80>
   18524:	andeq	r8, r1, ip, ror r5
   18528:	andeq	r8, r1, r4, ror r5
   1852c:	andeq	r8, r1, r4, ror r5
   18530:	andeq	r8, r1, r4, ror r5
   18534:	andeq	r8, r1, r4, ror r5
   18538:	andeq	r8, r1, r4, ror r5
   1853c:	andeq	r8, r1, r4, ror r5
   18540:	andeq	r8, r1, ip, ror r5
   18544:	andeq	r8, r1, r8, ror #10
   18548:	andeq	r8, r1, r4, ror r5
   1854c:	andeq	r8, r1, r4, ror r5
   18550:	andeq	r8, r1, r8, ror #10
   18554:	andeq	r8, r1, r8, asr r5
   18558:	ldrb	r0, [r0, #1]
   1855c:	adds	r0, r0, #0
   18560:	movne	r0, #1
   18564:	bx	lr
   18568:	ldrb	r3, [r0, #1]
   1856c:	cmp	r3, #0
   18570:	beq	1858c <__assert_fail@plt+0x5f98>
   18574:	mov	r0, #0
   18578:	bx	lr
   1857c:	ldrb	r0, [r0, #1]
   18580:	clz	r0, r0
   18584:	lsr	r0, r0, #5
   18588:	bx	lr
   1858c:	eor	r0, r1, #1
   18590:	bx	lr
   18594:	cmp	r0, #1
   18598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1859c:	sub	sp, sp, #28
   185a0:	ble	1888c <__assert_fail@plt+0x6298>
   185a4:	mov	sl, #1
   185a8:	str	r1, [sp, #4]
   185ac:	str	r0, [sp, #8]
   185b0:	ldr	r3, [sp, #4]
   185b4:	ldr	r0, [pc, #964]	; 18980 <__assert_fail@plt+0x638c>
   185b8:	lsl	r6, sl, #2
   185bc:	ldr	r5, [r3, sl, lsl #2]
   185c0:	mov	r1, r5
   185c4:	bl	11f40 <strcmp@plt>
   185c8:	cmp	r0, #0
   185cc:	beq	1874c <__assert_fail@plt+0x6158>
   185d0:	mov	r1, r5
   185d4:	ldr	r0, [pc, #936]	; 18984 <__assert_fail@plt+0x6390>
   185d8:	bl	11f40 <strcmp@plt>
   185dc:	cmp	r0, #0
   185e0:	beq	18758 <__assert_fail@plt+0x6164>
   185e4:	mov	r1, r5
   185e8:	ldr	r0, [pc, #920]	; 18988 <__assert_fail@plt+0x6394>
   185ec:	bl	11f40 <strcmp@plt>
   185f0:	cmp	r0, #0
   185f4:	beq	187f4 <__assert_fail@plt+0x6200>
   185f8:	mov	r1, r5
   185fc:	ldr	r0, [pc, #904]	; 1898c <__assert_fail@plt+0x6398>
   18600:	bl	11f40 <strcmp@plt>
   18604:	cmp	r0, #0
   18608:	beq	1887c <__assert_fail@plt+0x6288>
   1860c:	mov	r1, r5
   18610:	ldr	r0, [pc, #888]	; 18990 <__assert_fail@plt+0x639c>
   18614:	bl	11f40 <strcmp@plt>
   18618:	subs	r4, r0, #0
   1861c:	bne	18764 <__assert_fail@plt+0x6170>
   18620:	ldr	r3, [sp, #8]
   18624:	add	sl, sl, #1
   18628:	cmp	r3, sl
   1862c:	ble	188e8 <__assert_fail@plt+0x62f4>
   18630:	ldr	r3, [sp, #4]
   18634:	add	r2, sp, #20
   18638:	add	r6, r3, r6
   1863c:	add	r1, sp, #16
   18640:	ldr	r3, [r6, #4]
   18644:	str	r4, [sp, #20]
   18648:	str	r3, [sp]
   1864c:	mov	r0, r3
   18650:	mov	r3, #44	; 0x2c
   18654:	strh	r3, [sp, #16]
   18658:	bl	121e0 <strtok_r@plt>
   1865c:	subs	r6, r0, #0
   18660:	beq	18858 <__assert_fail@plt+0x6264>
   18664:	ldr	r7, [pc, #808]	; 18994 <__assert_fail@plt+0x63a0>
   18668:	ldr	r5, [pc, #808]	; 18998 <__assert_fail@plt+0x63a4>
   1866c:	ldr	r8, [pc, #808]	; 1899c <__assert_fail@plt+0x63a8>
   18670:	str	sl, [sp, #12]
   18674:	ldr	r9, [pc, #792]	; 18994 <__assert_fail@plt+0x63a0>
   18678:	mov	fp, r7
   1867c:	mov	r0, r8
   18680:	mov	sl, #0
   18684:	b	1868c <__assert_fail@plt+0x6098>
   18688:	ldr	r0, [fp, #-12]
   1868c:	mov	r1, r6
   18690:	bl	11f40 <strcmp@plt>
   18694:	cmp	r0, #0
   18698:	beq	1872c <__assert_fail@plt+0x6138>
   1869c:	add	sl, sl, #1
   186a0:	cmp	sl, #9
   186a4:	add	fp, fp, #12
   186a8:	bne	18688 <__assert_fail@plt+0x6094>
   186ac:	mov	r2, #5
   186b0:	ldr	r1, [pc, #744]	; 189a0 <__assert_fail@plt+0x63ac>
   186b4:	mov	r0, r4
   186b8:	bl	120b4 <dcgettext@plt>
   186bc:	ldr	r2, [sp]
   186c0:	ldr	r1, [r5, #72]	; 0x48
   186c4:	mov	r6, r0
   186c8:	mov	r0, r4
   186cc:	bl	2b208 <__assert_fail@plt+0x18c14>
   186d0:	mov	r2, r6
   186d4:	mov	r1, r4
   186d8:	mov	r3, r0
   186dc:	mov	r0, #0
   186e0:	bl	121ec <error@plt>
   186e4:	add	r2, sp, #20
   186e8:	add	r1, sp, #16
   186ec:	mov	r0, r4
   186f0:	bl	121e0 <strtok_r@plt>
   186f4:	subs	r6, r0, #0
   186f8:	bne	18674 <__assert_fail@plt+0x6080>
   186fc:	ldr	r3, [r5, #44]	; 0x2c
   18700:	mov	r7, r9
   18704:	tst	r3, #16
   18708:	ldr	sl, [sp, #12]
   1870c:	bne	18894 <__assert_fail@plt+0x62a0>
   18710:	ldr	r3, [sp, #8]
   18714:	add	sl, sl, #1
   18718:	cmp	r3, sl
   1871c:	bgt	185b0 <__assert_fail@plt+0x5fbc>
   18720:	mov	r0, sl
   18724:	add	sp, sp, #28
   18728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1872c:	add	r3, sl, sl, lsl #1
   18730:	ldr	r1, [pc, #620]	; 189a4 <__assert_fail@plt+0x63b0>
   18734:	ldr	r2, [r5, #44]	; 0x2c
   18738:	add	r3, r1, r3, lsl #2
   1873c:	ldr	r3, [r3, #52]	; 0x34
   18740:	orr	r3, r2, r3
   18744:	str	r3, [r5, #44]	; 0x2c
   18748:	b	186e4 <__assert_fail@plt+0x60f0>
   1874c:	mov	r0, #2
   18750:	bl	1e8e8 <__assert_fail@plt+0xc2f4>
   18754:	b	18710 <__assert_fail@plt+0x611c>
   18758:	mov	r0, #1
   1875c:	bl	1e8e8 <__assert_fail@plt+0xc2f4>
   18760:	b	18710 <__assert_fail@plt+0x611c>
   18764:	mov	r2, #2
   18768:	mov	r1, r5
   1876c:	ldr	r0, [pc, #564]	; 189a8 <__assert_fail@plt+0x63b4>
   18770:	bl	12594 <strncmp@plt>
   18774:	subs	r8, r0, #0
   18778:	bne	18720 <__assert_fail@plt+0x612c>
   1877c:	ldrb	r7, [r5, #2]
   18780:	add	r5, r5, #2
   18784:	cmp	r7, #0
   18788:	beq	18974 <__assert_fail@plt+0x6380>
   1878c:	bl	122b8 <__ctype_b_loc@plt>
   18790:	lsl	r7, r7, #1
   18794:	ldr	r3, [r0]
   18798:	ldrh	r3, [r3, r7]
   1879c:	ands	r6, r3, #2048	; 0x800
   187a0:	beq	18954 <__assert_fail@plt+0x6360>
   187a4:	bl	12348 <__errno_location@plt>
   187a8:	mov	r2, #10
   187ac:	add	r1, sp, #20
   187b0:	ldr	r9, [r0]
   187b4:	mov	r6, r0
   187b8:	str	r8, [r0]
   187bc:	mov	r0, r5
   187c0:	bl	122f4 <strtoul@plt>
   187c4:	ldr	r3, [sp, #20]
   187c8:	cmp	r0, #0
   187cc:	bne	187fc <__assert_fail@plt+0x6208>
   187d0:	cmp	r5, r3
   187d4:	beq	18954 <__assert_fail@plt+0x6360>
   187d8:	ldrb	r3, [r3]
   187dc:	cmp	r3, #0
   187e0:	bne	18930 <__assert_fail@plt+0x633c>
   187e4:	ldr	r5, [pc, #428]	; 18998 <__assert_fail@plt+0x63a4>
   187e8:	strh	r0, [r5, #68]	; 0x44
   187ec:	str	r9, [r6]
   187f0:	b	18710 <__assert_fail@plt+0x611c>
   187f4:	bl	1e8e8 <__assert_fail@plt+0xc2f4>
   187f8:	b	18710 <__assert_fail@plt+0x611c>
   187fc:	ldrb	r3, [r3]
   18800:	cmp	r3, #0
   18804:	bne	18930 <__assert_fail@plt+0x633c>
   18808:	cmn	r0, #1
   1880c:	bne	18848 <__assert_fail@plt+0x6254>
   18810:	mov	r4, r5
   18814:	ldr	r5, [r6]
   18818:	mov	r7, r0
   1881c:	cmp	r5, #0
   18820:	bne	1890c <__assert_fail@plt+0x6318>
   18824:	mov	r2, #5
   18828:	ldr	r1, [pc, #380]	; 189ac <__assert_fail@plt+0x63b8>
   1882c:	mov	r0, #0
   18830:	bl	120b4 <dcgettext@plt>
   18834:	mov	r3, r7
   18838:	mov	r1, #0
   1883c:	mov	r2, r0
   18840:	mov	r0, #1
   18844:	bl	121ec <error@plt>
   18848:	cmp	r0, #65536	; 0x10000
   1884c:	bcc	187e4 <__assert_fail@plt+0x61f0>
   18850:	mov	r7, r0
   18854:	b	18824 <__assert_fail@plt+0x6230>
   18858:	mov	r2, #5
   1885c:	ldr	r1, [pc, #332]	; 189b0 <__assert_fail@plt+0x63bc>
   18860:	bl	120b4 <dcgettext@plt>
   18864:	mov	r1, r6
   18868:	mov	r2, r0
   1886c:	mov	r0, r6
   18870:	bl	121ec <error@plt>
   18874:	mov	r0, #1
   18878:	bl	17b0c <__assert_fail@plt+0x5518>
   1887c:	add	sl, sl, #1
   18880:	mov	r0, sl
   18884:	add	sp, sp, #28
   18888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1888c:	mov	sl, #1
   18890:	b	18720 <__assert_fail@plt+0x612c>
   18894:	ldr	r4, [pc, #280]	; 189b4 <__assert_fail@plt+0x63c0>
   18898:	mov	r2, #5
   1889c:	ldr	r1, [pc, #276]	; 189b8 <__assert_fail@plt+0x63c4>
   188a0:	bl	120b4 <dcgettext@plt>
   188a4:	ldr	r1, [r4]
   188a8:	bl	12588 <fputs@plt>
   188ac:	ldr	r6, [pc, #264]	; 189bc <__assert_fail@plt+0x63c8>
   188b0:	ldr	r3, [pc, #264]	; 189c0 <__assert_fail@plt+0x63cc>
   188b4:	ldr	r2, [pc, #224]	; 1899c <__assert_fail@plt+0x63a8>
   188b8:	ldr	r5, [pc, #260]	; 189c4 <__assert_fail@plt+0x63d0>
   188bc:	b	188c8 <__assert_fail@plt+0x62d4>
   188c0:	ldr	r2, [r7, #-12]
   188c4:	ldr	r3, [r7, #-4]
   188c8:	add	r7, r7, #12
   188cc:	mov	r1, r5
   188d0:	ldr	r0, [r4]
   188d4:	bl	1233c <fprintf@plt>
   188d8:	cmp	r7, r6
   188dc:	bne	188c0 <__assert_fail@plt+0x62cc>
   188e0:	mov	r0, #0
   188e4:	bl	122d0 <exit@plt>
   188e8:	mov	r2, #5
   188ec:	ldr	r1, [pc, #212]	; 189c8 <__assert_fail@plt+0x63d4>
   188f0:	bl	120b4 <dcgettext@plt>
   188f4:	mov	r1, r4
   188f8:	mov	r2, r0
   188fc:	mov	r0, r4
   18900:	bl	121ec <error@plt>
   18904:	mov	r0, #1
   18908:	bl	17b0c <__assert_fail@plt+0x5518>
   1890c:	mov	r2, #5
   18910:	ldr	r1, [pc, #180]	; 189cc <__assert_fail@plt+0x63d8>
   18914:	mov	r0, #0
   18918:	bl	120b4 <dcgettext@plt>
   1891c:	mov	r3, r4
   18920:	mov	r1, r5
   18924:	mov	r2, r0
   18928:	mov	r0, #1
   1892c:	bl	121ec <error@plt>
   18930:	mov	r2, #5
   18934:	ldr	r1, [pc, #144]	; 189cc <__assert_fail@plt+0x63d8>
   18938:	mov	r0, #0
   1893c:	bl	120b4 <dcgettext@plt>
   18940:	mov	r3, r5
   18944:	mov	r1, #0
   18948:	mov	r2, r0
   1894c:	mov	r0, #1
   18950:	bl	121ec <error@plt>
   18954:	ldr	r1, [pc, #116]	; 189d0 <__assert_fail@plt+0x63dc>
   18958:	mov	r2, #5
   1895c:	mov	r0, #0
   18960:	bl	120b4 <dcgettext@plt>
   18964:	mov	r1, #0
   18968:	mov	r2, r0
   1896c:	mov	r0, #1
   18970:	bl	121ec <error@plt>
   18974:	mov	r2, #5
   18978:	ldr	r1, [pc, #84]	; 189d4 <__assert_fail@plt+0x63e0>
   1897c:	b	18960 <__assert_fail@plt+0x636c>
   18980:	andeq	r2, r4, ip, ror #3
   18984:	strdeq	r2, [r4], -r0
   18988:	strdeq	r2, [r4], -r4
   1898c:	strdeq	r2, [r4], -r8
   18990:	strdeq	r2, [r4], -ip
   18994:	andeq	r1, r4, r4, lsl #17
   18998:	andeq	r7, r5, ip, ror #28
   1899c:	muleq	r4, ip, r1
   189a0:	andeq	r2, r4, r8, lsr r3
   189a4:	andeq	r1, r4, r8, asr #16
   189a8:	andeq	r2, r4, r4, lsr r2
   189ac:	ldrdeq	r2, [r4], -r0
   189b0:	andeq	r2, r4, ip, asr r3
   189b4:	andeq	r7, r5, r4, asr r5
   189b8:	andeq	r2, r4, r4, asr r0
   189bc:	strdeq	r1, [r4], -r0
   189c0:	andeq	r2, r4, r4, lsr #3
   189c4:	andeq	r2, r4, r8, lsr #4
   189c8:	andeq	r2, r4, r0, lsl #4
   189cc:			; <UNDEFINED> instruction: 0x000422b0
   189d0:	andeq	r2, r4, r8, ror r2
   189d4:	andeq	r2, r4, r8, lsr r2
   189d8:	push	{r4, r5, r6, lr}
   189dc:	mov	r4, r0
   189e0:	sub	sp, sp, #8
   189e4:	ldr	r0, [pc, #336]	; 18b3c <__assert_fail@plt+0x6548>
   189e8:	bl	12228 <getenv@plt>
   189ec:	mov	r5, #0
   189f0:	cmp	r0, #0
   189f4:	movne	r3, #1
   189f8:	strbne	r3, [r4, #17]
   189fc:	strbeq	r0, [r4, #17]
   18a00:	bl	17e40 <__assert_fail@plt+0x584c>
   18a04:	str	r5, [r4, #60]	; 0x3c
   18a08:	strb	r0, [r4, #56]	; 0x38
   18a0c:	mov	r0, r5
   18a10:	bl	12564 <isatty@plt>
   18a14:	mov	r2, #1
   18a18:	strb	r2, [r4]
   18a1c:	cmp	r0, #0
   18a20:	movne	r3, #1
   18a24:	strbne	r3, [r4, #16]
   18a28:	ldrb	r3, [r4, #17]
   18a2c:	strbne	r5, [r4, #15]
   18a30:	strbeq	r0, [r4, #16]
   18a34:	strbeq	r0, [r4, #15]
   18a38:	cmp	r3, #0
   18a3c:	movne	r3, #0
   18a40:	strbne	r3, [r4, #16]
   18a44:	mov	r5, #0
   18a48:	mvn	r3, #0
   18a4c:	strb	r5, [r4, #1]
   18a50:	mov	r1, r5
   18a54:	str	r3, [r4, #8]
   18a58:	str	r3, [r4, #4]
   18a5c:	mov	r0, sp
   18a60:	bl	121bc <gettimeofday@plt>
   18a64:	cmp	r0, r5
   18a68:	bne	18af8 <__assert_fail@plt+0x6504>
   18a6c:	ldr	r3, [sp, #4]
   18a70:	mov	r5, #1000	; 0x3e8
   18a74:	ldr	r0, [sp]
   18a78:	mul	r5, r5, r3
   18a7c:	ldrb	r3, [r4, #17]
   18a80:	sub	r2, r0, #86016	; 0x15000
   18a84:	sub	r2, r2, #384	; 0x180
   18a88:	cmp	r3, #0
   18a8c:	mov	r3, #0
   18a90:	strb	r3, [r4, #36]	; 0x24
   18a94:	strb	r3, [r4, #13]
   18a98:	strb	r3, [r4, #14]
   18a9c:	movne	r3, #512	; 0x200
   18aa0:	moveq	r3, #1024	; 0x400
   18aa4:	str	r3, [r4, #40]	; 0x28
   18aa8:	mov	r6, #0
   18aac:	mov	r3, #2
   18ab0:	str	r0, [r4, #20]
   18ab4:	str	r5, [r4, #24]
   18ab8:	str	r5, [r4, #32]
   18abc:	str	r2, [r4, #28]
   18ac0:	str	r6, [r4, #44]	; 0x2c
   18ac4:	strh	r3, [r4, #68]	; 0x44
   18ac8:	ldr	r0, [pc, #112]	; 18b40 <__assert_fail@plt+0x654c>
   18acc:	bl	12228 <getenv@plt>
   18ad0:	subs	r5, r0, #0
   18ad4:	bne	18b1c <__assert_fail@plt+0x6528>
   18ad8:	strb	r5, [r4, #12]
   18adc:	bl	1e8e8 <__assert_fail@plt+0xc2f4>
   18ae0:	mov	r3, #8
   18ae4:	str	r5, [r4, #76]	; 0x4c
   18ae8:	strb	r5, [r4, #80]	; 0x50
   18aec:	str	r3, [r4, #72]	; 0x48
   18af0:	add	sp, sp, #8
   18af4:	pop	{r4, r5, r6, pc}
   18af8:	mov	r0, r5
   18afc:	bl	12078 <time@plt>
   18b00:	cmn	r0, #1
   18b04:	bne	18a7c <__assert_fail@plt+0x6488>
   18b08:	ldr	r3, [pc, #52]	; 18b44 <__assert_fail@plt+0x6550>
   18b0c:	ldr	r2, [pc, #52]	; 18b48 <__assert_fail@plt+0x6554>
   18b10:	ldr	r1, [pc, #52]	; 18b4c <__assert_fail@plt+0x6558>
   18b14:	ldr	r0, [pc, #52]	; 18b50 <__assert_fail@plt+0x655c>
   18b18:	bl	125f4 <__assert_fail@plt>
   18b1c:	mov	r2, #5
   18b20:	ldr	r1, [pc, #44]	; 18b54 <__assert_fail@plt+0x6560>
   18b24:	mov	r0, r6
   18b28:	bl	120b4 <dcgettext@plt>
   18b2c:	mov	r1, r6
   18b30:	mov	r2, r0
   18b34:	mov	r0, #1
   18b38:	bl	121ec <error@plt>
   18b3c:	andeq	r2, r4, r0, lsl #7
   18b40:	andeq	r2, r4, r0, lsr #7
   18b44:	andeq	r1, r4, r0, lsr #18
   18b48:	ldrdeq	r0, [r0], -r2
   18b4c:	andeq	r1, r4, r4, lsr #18
   18b50:	muleq	r4, r0, r3
   18b54:			; <UNDEFINED> instruction: 0x000423b0
   18b58:	push	{r4, r5, r6, lr}
   18b5c:	mov	r4, r2
   18b60:	ldrh	r2, [r2, #18]
   18b64:	ldr	r3, [r4, #164]	; 0xa4
   18b68:	mov	r6, r0
   18b6c:	add	r3, r3, #1
   18b70:	cmp	r2, #0
   18b74:	mov	r5, r1
   18b78:	str	r3, [r4, #164]	; 0xa4
   18b7c:	bne	18bb8 <__assert_fail@plt+0x65c4>
   18b80:	ldrb	r3, [r4, #20]
   18b84:	cmp	r3, #0
   18b88:	bne	18bb8 <__assert_fail@plt+0x65c4>
   18b8c:	mov	r1, r5
   18b90:	mov	r0, r6
   18b94:	ldr	r3, [r4]
   18b98:	mov	r2, r4
   18b9c:	blx	r3
   18ba0:	cmp	r0, #0
   18ba4:	beq	18bf8 <__assert_fail@plt+0x6604>
   18ba8:	ldr	r3, [r4, #168]	; 0xa8
   18bac:	add	r3, r3, #1
   18bb0:	str	r3, [r4, #168]	; 0xa8
   18bb4:	pop	{r4, r5, r6, pc}
   18bb8:	ldrb	r3, [r4, #18]
   18bbc:	cmp	r3, #0
   18bc0:	bne	18c00 <__assert_fail@plt+0x660c>
   18bc4:	ldrb	r3, [r4, #19]
   18bc8:	cmp	r3, #0
   18bcc:	beq	18c14 <__assert_fail@plt+0x6620>
   18bd0:	ldr	r3, [pc, #120]	; 18c50 <__assert_fail@plt+0x665c>
   18bd4:	ldrb	r2, [r3, #5]
   18bd8:	cmp	r2, #0
   18bdc:	bne	18c14 <__assert_fail@plt+0x6620>
   18be0:	ldr	r1, [r3, #12]
   18be4:	mov	r2, r5
   18be8:	mov	r0, r6
   18bec:	bl	17d44 <__assert_fail@plt+0x5750>
   18bf0:	cmp	r0, #0
   18bf4:	beq	18b8c <__assert_fail@plt+0x6598>
   18bf8:	mov	r0, #0
   18bfc:	pop	{r4, r5, r6, pc}
   18c00:	ldr	r3, [pc, #72]	; 18c50 <__assert_fail@plt+0x665c>
   18c04:	ldrb	r2, [r3, #4]
   18c08:	cmp	r2, #0
   18c0c:	beq	18be0 <__assert_fail@plt+0x65ec>
   18c10:	b	18bc4 <__assert_fail@plt+0x65d0>
   18c14:	ldrb	r3, [r4, #20]
   18c18:	cmp	r3, #0
   18c1c:	beq	18b8c <__assert_fail@plt+0x6598>
   18c20:	ldrd	r2, [r5, #96]	; 0x60
   18c24:	orrs	r3, r2, r3
   18c28:	ldr	r3, [pc, #32]	; 18c50 <__assert_fail@plt+0x665c>
   18c2c:	beq	18be0 <__assert_fail@plt+0x65ec>
   18c30:	ldrb	r2, [r3, #5]
   18c34:	cmp	r2, #0
   18c38:	beq	18be0 <__assert_fail@plt+0x65ec>
   18c3c:	ldr	r2, [r5, #16]
   18c40:	and	r2, r2, #61440	; 0xf000
   18c44:	cmp	r2, #16384	; 0x4000
   18c48:	bne	18b8c <__assert_fail@plt+0x6598>
   18c4c:	b	18be0 <__assert_fail@plt+0x65ec>
   18c50:	andeq	r7, r5, r0, asr #28
   18c54:	ldr	r2, [pc, #20]	; 18c70 <__assert_fail@plt+0x667c>
   18c58:	ldr	r3, [pc, #20]	; 18c74 <__assert_fail@plt+0x6680>
   18c5c:	cmp	r3, r0
   18c60:	cmpne	r2, r0
   18c64:	moveq	r0, #1
   18c68:	movne	r0, #0
   18c6c:	bx	lr
   18c70:	andeq	r4, r1, r8, lsr #8
   18c74:	muleq	r1, r0, lr
   18c78:	ldr	r3, [pc, #8]	; 18c88 <__assert_fail@plt+0x6694>
   18c7c:	mov	r2, r1
   18c80:	ldr	r1, [r3, #72]	; 0x48
   18c84:	b	2b208 <__assert_fail@plt+0x18c14>
   18c88:	andeq	r7, r5, ip, ror #28
   18c8c:	mov	r3, r1
   18c90:	mov	r2, #1
   18c94:	mov	r1, r0
   18c98:	mov	r0, #0
   18c9c:	b	177f4 <__assert_fail@plt+0x5200>
   18ca0:	mov	r2, #1
   18ca4:	mov	r3, r1
   18ca8:	push	{r4, lr}
   18cac:	mov	r1, r0
   18cb0:	mov	r0, r2
   18cb4:	bl	177f4 <__assert_fail@plt+0x5200>
   18cb8:	bl	125a0 <abort@plt>
   18cbc:	mov	r2, #0
   18cc0:	mov	r3, r1
   18cc4:	mov	r1, r0
   18cc8:	mov	r0, r2
   18ccc:	b	177f4 <__assert_fail@plt+0x5200>
   18cd0:	push	{r4, lr}
   18cd4:	mov	ip, #0
   18cd8:	ldr	lr, [pc, #24]	; 18cf8 <__assert_fail@plt+0x6704>
   18cdc:	mov	r3, r1
   18ce0:	mov	r2, ip
   18ce4:	mov	r1, r0
   18ce8:	mov	r0, #1
   18cec:	strb	ip, [lr, #40]	; 0x28
   18cf0:	bl	177f4 <__assert_fail@plt+0x5200>
   18cf4:	bl	125a0 <abort@plt>
   18cf8:	andeq	r7, r5, r0, asr #28
   18cfc:	ldrd	r2, [r1, #8]
   18d00:	push	{r4, r5}
   18d04:	ldrd	r4, [r0, #8]
   18d08:	cmp	r5, r3
   18d0c:	cmpeq	r4, r2
   18d10:	movne	r0, #0
   18d14:	beq	18d20 <__assert_fail@plt+0x672c>
   18d18:	pop	{r4, r5}
   18d1c:	bx	lr
   18d20:	ldrd	r4, [r0]
   18d24:	ldrd	r2, [r1]
   18d28:	cmp	r5, r3
   18d2c:	cmpeq	r4, r2
   18d30:	moveq	r0, #1
   18d34:	movne	r0, #0
   18d38:	pop	{r4, r5}
   18d3c:	bx	lr
   18d40:	push	{r4, r5, r6, lr}
   18d44:	mov	r2, r1
   18d48:	ldrd	r4, [r0]
   18d4c:	ldrd	r0, [r0, #8]
   18d50:	mov	r3, #0
   18d54:	eor	r0, r0, r4
   18d58:	eor	r1, r1, r5
   18d5c:	bl	40080 <__assert_fail@plt+0x2da8c>
   18d60:	mov	r0, r2
   18d64:	pop	{r4, r5, r6, pc}
   18d68:	push	{r4, lr}
   18d6c:	mov	r4, r0
   18d70:	ldr	r0, [r0, #20]
   18d74:	cmp	r0, #0
   18d78:	beq	18d88 <__assert_fail@plt+0x6794>
   18d7c:	bl	123fc <fclose@plt>
   18d80:	cmp	r0, #0
   18d84:	bne	18d9c <__assert_fail@plt+0x67a8>
   18d88:	ldr	r0, [r4, #16]
   18d8c:	bl	2db68 <__assert_fail@plt+0x1b574>
   18d90:	mov	r0, r4
   18d94:	pop	{r4, lr}
   18d98:	b	2db68 <__assert_fail@plt+0x1b574>
   18d9c:	bl	12348 <__errno_location@plt>
   18da0:	ldr	r1, [r4, #16]
   18da4:	ldr	r0, [r0]
   18da8:	bl	18cd0 <__assert_fail@plt+0x66dc>
   18dac:	push	{r4, r5, lr}
   18db0:	mov	r5, r0
   18db4:	sub	sp, sp, #12
   18db8:	mov	r0, #8
   18dbc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   18dc0:	subs	r4, r0, #0
   18dc4:	beq	18e0c <__assert_fail@plt+0x6818>
   18dc8:	mov	r0, r5
   18dcc:	bl	120c0 <strdup@plt>
   18dd0:	cmp	r0, #0
   18dd4:	mov	r5, r0
   18dd8:	str	r0, [r4]
   18ddc:	beq	18e18 <__assert_fail@plt+0x6824>
   18de0:	ldr	r2, [pc, #88]	; 18e40 <__assert_fail@plt+0x684c>
   18de4:	ldr	r3, [pc, #88]	; 18e44 <__assert_fail@plt+0x6850>
   18de8:	str	r2, [sp]
   18dec:	mov	r1, #0
   18df0:	ldr	r2, [pc, #80]	; 18e48 <__assert_fail@plt+0x6854>
   18df4:	mov	r0, #11
   18df8:	bl	21ec0 <__assert_fail@plt+0xf8cc>
   18dfc:	cmp	r0, #0
   18e00:	mov	r5, r0
   18e04:	str	r0, [r4, #4]
   18e08:	beq	18e28 <__assert_fail@plt+0x6834>
   18e0c:	mov	r0, r4
   18e10:	add	sp, sp, #12
   18e14:	pop	{r4, r5, pc}
   18e18:	mov	r0, r4
   18e1c:	bl	2db68 <__assert_fail@plt+0x1b574>
   18e20:	mov	r0, r5
   18e24:	b	18e10 <__assert_fail@plt+0x681c>
   18e28:	ldr	r0, [r4]
   18e2c:	bl	2db68 <__assert_fail@plt+0x1b574>
   18e30:	mov	r0, r4
   18e34:	bl	2db68 <__assert_fail@plt+0x1b574>
   18e38:	mov	r0, r5
   18e3c:	b	18e10 <__assert_fail@plt+0x681c>
   18e40:	andeq	r8, r1, r8, ror #26
   18e44:	strdeq	r8, [r1], -ip
   18e48:	andeq	r8, r1, r0, asr #26
   18e4c:	push	{r4, lr}
   18e50:	mov	r4, r0
   18e54:	ldr	r0, [r0]
   18e58:	bl	2db68 <__assert_fail@plt+0x1b574>
   18e5c:	ldr	r0, [r4, #4]
   18e60:	pop	{r4, lr}
   18e64:	b	220bc <__assert_fail@plt+0xfac8>
   18e68:	push	{r4, r5, r6, r7, r8, lr}
   18e6c:	mov	r8, r0
   18e70:	sub	sp, sp, #104	; 0x68
   18e74:	mov	r0, #24
   18e78:	mov	r6, r1
   18e7c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   18e80:	subs	r5, r0, #0
   18e84:	beq	18f58 <__assert_fail@plt+0x6964>
   18e88:	mov	r0, r6
   18e8c:	bl	120c0 <strdup@plt>
   18e90:	cmp	r0, #0
   18e94:	mov	r4, r0
   18e98:	str	r0, [r5, #16]
   18e9c:	beq	18f60 <__assert_fail@plt+0x696c>
   18ea0:	mov	r0, r6
   18ea4:	ldr	r1, [r8]
   18ea8:	bl	215b8 <__assert_fail@plt+0xefc4>
   18eac:	cmp	r0, #0
   18eb0:	mov	r4, r0
   18eb4:	str	r0, [r5, #20]
   18eb8:	beq	18f6c <__assert_fail@plt+0x6978>
   18ebc:	bl	123c0 <fileno@plt>
   18ec0:	subs	r4, r0, #0
   18ec4:	blt	18f94 <__assert_fail@plt+0x69a0>
   18ec8:	mov	r1, #1
   18ecc:	bl	210bc <__assert_fail@plt+0xeac8>
   18ed0:	mov	r1, r4
   18ed4:	mov	r2, sp
   18ed8:	mov	r0, #3
   18edc:	bl	1215c <__fxstat64@plt>
   18ee0:	cmp	r0, #0
   18ee4:	blt	18f24 <__assert_fail@plt+0x6930>
   18ee8:	ldrd	r6, [sp]
   18eec:	ldrd	r2, [sp, #96]	; 0x60
   18ef0:	mov	r1, r5
   18ef4:	strd	r6, [r5]
   18ef8:	strd	r2, [r5, #8]
   18efc:	ldr	r0, [r8, #4]
   18f00:	bl	21c20 <__assert_fail@plt+0xf62c>
   18f04:	subs	r4, r0, #0
   18f08:	beq	18f3c <__assert_fail@plt+0x6948>
   18f0c:	mov	r0, r5
   18f10:	bl	18d68 <__assert_fail@plt+0x6774>
   18f14:	ldr	r4, [r4, #20]
   18f18:	mov	r0, r4
   18f1c:	add	sp, sp, #104	; 0x68
   18f20:	pop	{r4, r5, r6, r7, r8, pc}
   18f24:	mov	r0, r5
   18f28:	bl	18d68 <__assert_fail@plt+0x6774>
   18f2c:	mov	r4, #0
   18f30:	mov	r0, r4
   18f34:	add	sp, sp, #104	; 0x68
   18f38:	pop	{r4, r5, r6, r7, r8, pc}
   18f3c:	ldr	r0, [r8, #4]
   18f40:	mov	r1, r5
   18f44:	bl	224b4 <__assert_fail@plt+0xfec0>
   18f48:	subs	r4, r0, #0
   18f4c:	beq	18f78 <__assert_fail@plt+0x6984>
   18f50:	ldr	r4, [r5, #20]
   18f54:	b	18f18 <__assert_fail@plt+0x6924>
   18f58:	mov	r4, r5
   18f5c:	b	18f18 <__assert_fail@plt+0x6924>
   18f60:	mov	r0, r5
   18f64:	bl	2db68 <__assert_fail@plt+0x1b574>
   18f68:	b	18f18 <__assert_fail@plt+0x6924>
   18f6c:	mov	r0, r5
   18f70:	bl	18d68 <__assert_fail@plt+0x6774>
   18f74:	b	18f18 <__assert_fail@plt+0x6924>
   18f78:	bl	12348 <__errno_location@plt>
   18f7c:	mov	r6, r0
   18f80:	mov	r0, r5
   18f84:	ldr	r5, [r6]
   18f88:	bl	18d68 <__assert_fail@plt+0x6774>
   18f8c:	str	r5, [r6]
   18f90:	b	18f18 <__assert_fail@plt+0x6924>
   18f94:	ldr	r3, [pc, #12]	; 18fa8 <__assert_fail@plt+0x69b4>
   18f98:	mov	r2, #166	; 0xa6
   18f9c:	ldr	r1, [pc, #8]	; 18fac <__assert_fail@plt+0x69b8>
   18fa0:	ldr	r0, [pc, #8]	; 18fb0 <__assert_fail@plt+0x69bc>
   18fa4:	bl	125f4 <__assert_fail@plt>
   18fa8:	ldrdeq	r2, [r4], -r0
   18fac:	andeq	r2, r4, r0, ror #11
   18fb0:	muleq	r4, r4, r7
   18fb4:	andeq	r0, r0, r0
   18fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fbc:	sub	sp, sp, #148	; 0x94
   18fc0:	add	r5, sp, #48	; 0x30
   18fc4:	cmp	r2, #43	; 0x2b
   18fc8:	stm	r5, {r0, r1}
   18fcc:	beq	190bc <__assert_fail@plt+0x6ac8>
   18fd0:	sub	r3, r2, #64	; 0x40
   18fd4:	mov	r4, r2
   18fd8:	mov	r1, #37	; 0x25
   18fdc:	mov	r2, #0
   18fe0:	cmp	r3, #24
   18fe4:	strb	r4, [sp, #57]	; 0x39
   18fe8:	strb	r1, [sp, #56]	; 0x38
   18fec:	strb	r2, [sp, #58]	; 0x3a
   18ff0:	bls	192e0 <__assert_fail@plt+0x6cec>
   18ff4:	mov	r3, #0
   18ff8:	str	r3, [sp, #20]
   18ffc:	strb	r3, [sp, #68]	; 0x44
   19000:	str	r3, [sp, #24]
   19004:	cmp	r4, #64	; 0x40
   19008:	bne	190f8 <__assert_fail@plt+0x6b04>
   1900c:	ldr	r0, [sp, #48]	; 0x30
   19010:	cmp	r0, #0
   19014:	asr	r1, r0, #31
   19018:	blt	193e4 <__assert_fail@plt+0x6df0>
   1901c:	ldr	r5, [pc, #1148]	; 194a0 <__assert_fail@plt+0x6eac>
   19020:	mov	r6, #1
   19024:	mov	r7, #0
   19028:	add	r2, r5, #1
   1902c:	strd	r6, [sp, #8]
   19030:	strd	r6, [sp]
   19034:	mov	r3, #0
   19038:	bl	225f8 <__assert_fail@plt+0x10004>
   1903c:	cmp	r0, r5
   19040:	mov	r4, r0
   19044:	bls	19464 <__assert_fail@plt+0x6e70>
   19048:	ldr	r3, [pc, #1108]	; 194a4 <__assert_fail@plt+0x6eb0>
   1904c:	cmp	r0, r3
   19050:	bcs	19450 <__assert_fail@plt+0x6e5c>
   19054:	ldr	r3, [sp, #48]	; 0x30
   19058:	cmp	r3, #0
   1905c:	movlt	r3, #45	; 0x2d
   19060:	strblt	r3, [r0, #-1]
   19064:	ldr	r3, [sp, #20]
   19068:	sublt	r4, r0, #1
   1906c:	cmp	r3, #0
   19070:	beq	190b0 <__assert_fail@plt+0x6abc>
   19074:	mov	r0, r4
   19078:	bl	12300 <strlen@plt>
   1907c:	sub	r5, r4, r5
   19080:	ldr	r3, [pc, #1056]	; 194a8 <__assert_fail@plt+0x6eb4>
   19084:	add	r5, r5, r0
   19088:	cmp	r5, r3
   1908c:	bhi	1948c <__assert_fail@plt+0x6e98>
   19090:	add	r0, sp, #68	; 0x44
   19094:	sub	r5, r3, r5
   19098:	bl	12300 <strlen@plt>
   1909c:	cmp	r5, r0
   190a0:	bls	193f0 <__assert_fail@plt+0x6dfc>
   190a4:	add	r1, sp, #68	; 0x44
   190a8:	mov	r0, r4
   190ac:	bl	12174 <strcat@plt>
   190b0:	mov	r0, r4
   190b4:	add	sp, sp, #148	; 0x94
   190b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190bc:	ldr	r2, [pc, #1000]	; 194ac <__assert_fail@plt+0x6eb8>
   190c0:	add	ip, sp, #56	; 0x38
   190c4:	ldr	r3, [sp, #52]	; 0x34
   190c8:	ldm	r2, {r0, r1, r2}
   190cc:	stm	ip, {r0, r1, r2}
   190d0:	mov	r1, #32
   190d4:	ldr	r2, [pc, #980]	; 194b0 <__assert_fail@plt+0x6ebc>
   190d8:	add	r0, sp, #68	; 0x44
   190dc:	bl	12360 <snprintf@plt>
   190e0:	cmp	r0, #31
   190e4:	mov	r3, r0
   190e8:	movle	r3, #1
   190ec:	str	r0, [sp, #24]
   190f0:	strle	r3, [sp, #20]
   190f4:	bgt	19314 <__assert_fail@plt+0x6d20>
   190f8:	mov	r0, r5
   190fc:	bl	1227c <localtime@plt>
   19100:	subs	r5, r0, #0
   19104:	beq	1900c <__assert_fail@plt+0x6a18>
   19108:	add	r0, sp, #56	; 0x38
   1910c:	bl	12300 <strlen@plt>
   19110:	ldr	r6, [pc, #924]	; 194b4 <__assert_fail@plt+0x6ec0>
   19114:	add	r0, r0, #2
   19118:	bl	2c184 <__assert_fail@plt+0x19b90>
   1911c:	mov	r3, #95	; 0x5f
   19120:	mov	r4, r0
   19124:	mov	r9, r0
   19128:	strb	r3, [r4], #1
   1912c:	add	r0, sp, #56	; 0x38
   19130:	bl	12300 <strlen@plt>
   19134:	add	r1, sp, #56	; 0x38
   19138:	add	r2, r0, #1
   1913c:	mov	r0, r4
   19140:	bl	12024 <memcpy@plt>
   19144:	mov	lr, r5
   19148:	add	ip, sp, #100	; 0x64
   1914c:	ldm	lr!, {r0, r1, r2, r3}
   19150:	stmia	ip!, {r0, r1, r2, r3}
   19154:	ldm	lr!, {r0, r1, r2, r3}
   19158:	ldr	r4, [sp, #100]	; 0x64
   1915c:	cmp	r4, #10
   19160:	subgt	r4, r4, #11
   19164:	addle	r4, r4, #11
   19168:	stmia	ip!, {r0, r1, r2, r3}
   1916c:	ldm	lr, {r0, r1, r2}
   19170:	str	r4, [sp, #100]	; 0x64
   19174:	ldr	r4, [r6]
   19178:	stm	ip, {r0, r1, r2}
   1917c:	cmp	r4, #0
   19180:	beq	19434 <__assert_fail@plt+0x6e40>
   19184:	ldr	sl, [pc, #812]	; 194b8 <__assert_fail@plt+0x6ec4>
   19188:	mov	r7, #1
   1918c:	b	191a8 <__assert_fail@plt+0x6bb4>
   19190:	mov	r0, r4
   19194:	mov	r2, r7
   19198:	mov	r1, sl
   1919c:	bl	2c28c <__assert_fail@plt+0x19c98>
   191a0:	mov	r4, r0
   191a4:	str	r0, [r6]
   191a8:	mov	r3, r5
   191ac:	mov	r2, r9
   191b0:	ldr	r1, [r6, #4]
   191b4:	mov	r0, r4
   191b8:	bl	12264 <strftime@plt>
   191bc:	cmp	r0, #0
   191c0:	beq	19190 <__assert_fail@plt+0x6b9c>
   191c4:	ldr	r3, [r6, #4]
   191c8:	cmp	r0, r3
   191cc:	bcs	19190 <__assert_fail@plt+0x6b9c>
   191d0:	ldr	r3, [sp, #24]
   191d4:	mov	r8, r0
   191d8:	add	r3, r3, #1
   191dc:	add	r3, r3, r0
   191e0:	mov	r1, r3
   191e4:	mov	r0, r4
   191e8:	str	r3, [sp, #44]	; 0x2c
   191ec:	mov	r4, r3
   191f0:	bl	2c1c0 <__assert_fail@plt+0x19bcc>
   191f4:	mov	r3, r4
   191f8:	stm	r6, {r0, r3}
   191fc:	mov	r0, r4
   19200:	bl	2c184 <__assert_fail@plt+0x19b90>
   19204:	add	r3, sp, #100	; 0x64
   19208:	mov	r2, r9
   1920c:	ldr	r1, [r6, #4]
   19210:	mov	r5, r0
   19214:	str	r0, [sp, #28]
   19218:	bl	12264 <strftime@plt>
   1921c:	ldr	r3, [r6]
   19220:	str	r3, [sp, #40]	; 0x28
   19224:	ldrb	r4, [r3]
   19228:	cmp	r4, #0
   1922c:	beq	193b4 <__assert_fail@plt+0x6dc0>
   19230:	mov	r2, r5
   19234:	ldrb	r5, [r5]
   19238:	cmp	r5, #0
   1923c:	beq	193b4 <__assert_fail@plt+0x6dc0>
   19240:	mov	fp, #0
   19244:	mov	r7, fp
   19248:	str	fp, [sp, #16]
   1924c:	str	r9, [sp, #32]
   19250:	str	r8, [sp, #36]	; 0x24
   19254:	mov	r9, fp
   19258:	mov	sl, r7
   1925c:	mov	fp, r3
   19260:	mov	r8, r2
   19264:	b	19298 <__assert_fail@plt+0x6ca4>
   19268:	ldr	r3, [sp, #16]
   1926c:	sub	r0, r7, r3
   19270:	cmp	r0, r9
   19274:	bne	193dc <__assert_fail@plt+0x6de8>
   19278:	add	r9, r9, #1
   1927c:	ldrb	r4, [fp, #1]!
   19280:	add	r7, r7, #1
   19284:	cmp	r4, #0
   19288:	beq	19328 <__assert_fail@plt+0x6d34>
   1928c:	ldrb	r5, [r8, #1]!
   19290:	cmp	r5, #0
   19294:	beq	193dc <__assert_fail@plt+0x6de8>
   19298:	cmp	r5, r4
   1929c:	beq	1927c <__assert_fail@plt+0x6c88>
   192a0:	bl	122b8 <__ctype_b_loc@plt>
   192a4:	lsl	r4, r4, #1
   192a8:	ldr	r0, [r0]
   192ac:	ldrh	ip, [r0, r4]
   192b0:	tst	ip, #2048	; 0x800
   192b4:	beq	193dc <__assert_fail@plt+0x6de8>
   192b8:	lsl	r5, r5, #1
   192bc:	ldrh	r0, [r0, r5]
   192c0:	tst	r0, #2048	; 0x800
   192c4:	beq	193dc <__assert_fail@plt+0x6de8>
   192c8:	cmp	sl, #0
   192cc:	bne	19268 <__assert_fail@plt+0x6c74>
   192d0:	mov	r9, #1
   192d4:	mov	sl, r9
   192d8:	str	r7, [sp, #16]
   192dc:	b	1927c <__assert_fail@plt+0x6c88>
   192e0:	mov	r6, #1
   192e4:	ldr	r2, [pc, #464]	; 194bc <__assert_fail@plt+0x6ec8>
   192e8:	ands	r3, r2, r6, lsl r3
   192ec:	beq	18ff4 <__assert_fail@plt+0x6a00>
   192f0:	ldr	r3, [sp, #52]	; 0x34
   192f4:	ldr	r2, [pc, #436]	; 194b0 <__assert_fail@plt+0x6ebc>
   192f8:	mov	r1, #32
   192fc:	add	r0, sp, #68	; 0x44
   19300:	bl	12360 <snprintf@plt>
   19304:	cmp	r0, #31
   19308:	str	r0, [sp, #24]
   1930c:	strle	r6, [sp, #20]
   19310:	ble	19004 <__assert_fail@plt+0x6a10>
   19314:	ldr	r3, [pc, #420]	; 194c0 <__assert_fail@plt+0x6ecc>
   19318:	ldr	r2, [pc, #420]	; 194c4 <__assert_fail@plt+0x6ed0>
   1931c:	ldr	r1, [pc, #420]	; 194c8 <__assert_fail@plt+0x6ed4>
   19320:	ldr	r0, [pc, #420]	; 194cc <__assert_fail@plt+0x6ed8>
   19324:	bl	125f4 <__assert_fail@plt>
   19328:	ldr	r3, [sp, #28]
   1932c:	mov	fp, r9
   19330:	ldr	r8, [sp, #36]	; 0x24
   19334:	ldrb	r2, [r3, r7]
   19338:	ldr	r9, [sp, #32]
   1933c:	cmp	r2, #0
   19340:	cmpeq	fp, #2
   19344:	bne	193b4 <__assert_fail@plt+0x6dc0>
   19348:	bl	122b8 <__ctype_b_loc@plt>
   1934c:	ldr	r3, [sp, #16]
   19350:	add	fp, r3, #2
   19354:	ldr	r3, [sp, #40]	; 0x28
   19358:	add	r4, r3, fp
   1935c:	ldrb	r3, [r3, fp]
   19360:	lsl	r3, r3, #1
   19364:	ldr	r2, [r0]
   19368:	ldrh	r3, [r2, r3]
   1936c:	tst	r3, #2048	; 0x800
   19370:	bne	193b4 <__assert_fail@plt+0x6dc0>
   19374:	ldr	r3, [sp, #24]
   19378:	add	r2, r8, #1
   1937c:	sub	r2, r2, fp
   19380:	ldr	r1, [sp, #44]	; 0x2c
   19384:	add	fp, r3, fp
   19388:	add	r3, r2, fp
   1938c:	cmp	r1, r3
   19390:	bne	19478 <__assert_fail@plt+0x6e84>
   19394:	ldr	r3, [sp, #40]	; 0x28
   19398:	mov	r1, r4
   1939c:	add	r0, r3, fp
   193a0:	bl	11fb8 <memmove@plt>
   193a4:	ldr	r2, [sp, #24]
   193a8:	mov	r0, r4
   193ac:	add	r1, sp, #68	; 0x44
   193b0:	bl	12024 <memcpy@plt>
   193b4:	mov	r0, r9
   193b8:	bl	2db68 <__assert_fail@plt+0x1b574>
   193bc:	ldr	r0, [sp, #28]
   193c0:	bl	2db68 <__assert_fail@plt+0x1b574>
   193c4:	ldr	r4, [r6]
   193c8:	adds	r4, r4, #1
   193cc:	beq	1900c <__assert_fail@plt+0x6a18>
   193d0:	mov	r0, r4
   193d4:	add	sp, sp, #148	; 0x94
   193d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193dc:	ldr	r9, [sp, #32]
   193e0:	b	193b4 <__assert_fail@plt+0x6dc0>
   193e4:	rsbs	r0, r0, #0
   193e8:	rsc	r1, r1, #0
   193ec:	b	1901c <__assert_fail@plt+0x6a28>
   193f0:	mov	r1, #0
   193f4:	add	r3, sp, #68	; 0x44
   193f8:	mov	r0, r1
   193fc:	str	r3, [sp, #4]
   19400:	ldr	r2, [pc, #200]	; 194d0 <__assert_fail@plt+0x6edc>
   19404:	ldr	r3, [sp, #24]
   19408:	str	r5, [sp]
   1940c:	bl	121ec <error@plt>
   19410:	add	r0, sp, #68	; 0x44
   19414:	bl	12300 <strlen@plt>
   19418:	cmp	r5, r0
   1941c:	bhi	190a4 <__assert_fail@plt+0x6ab0>
   19420:	ldr	r3, [pc, #152]	; 194c0 <__assert_fail@plt+0x6ecc>
   19424:	mov	r2, #720	; 0x2d0
   19428:	ldr	r1, [pc, #152]	; 194c8 <__assert_fail@plt+0x6ed4>
   1942c:	ldr	r0, [pc, #160]	; 194d4 <__assert_fail@plt+0x6ee0>
   19430:	bl	125f4 <__assert_fail@plt>
   19434:	mov	r3, #1
   19438:	mov	r0, r3
   1943c:	str	r3, [r6, #4]
   19440:	bl	2c184 <__assert_fail@plt+0x19b90>
   19444:	mov	r4, r0
   19448:	str	r0, [r6]
   1944c:	b	19184 <__assert_fail@plt+0x6b90>
   19450:	ldr	r3, [pc, #104]	; 194c0 <__assert_fail@plt+0x6ecc>
   19454:	ldr	r2, [pc, #124]	; 194d8 <__assert_fail@plt+0x6ee4>
   19458:	ldr	r1, [pc, #104]	; 194c8 <__assert_fail@plt+0x6ed4>
   1945c:	ldr	r0, [pc, #120]	; 194dc <__assert_fail@plt+0x6ee8>
   19460:	bl	125f4 <__assert_fail@plt>
   19464:	ldr	r3, [pc, #84]	; 194c0 <__assert_fail@plt+0x6ecc>
   19468:	ldr	r2, [pc, #112]	; 194e0 <__assert_fail@plt+0x6eec>
   1946c:	ldr	r1, [pc, #84]	; 194c8 <__assert_fail@plt+0x6ed4>
   19470:	ldr	r0, [pc, #108]	; 194e4 <__assert_fail@plt+0x6ef0>
   19474:	bl	125f4 <__assert_fail@plt>
   19478:	ldr	r3, [pc, #104]	; 194e8 <__assert_fail@plt+0x6ef4>
   1947c:	ldr	r2, [pc, #104]	; 194ec <__assert_fail@plt+0x6ef8>
   19480:	ldr	r1, [pc, #64]	; 194c8 <__assert_fail@plt+0x6ed4>
   19484:	ldr	r0, [pc, #100]	; 194f0 <__assert_fail@plt+0x6efc>
   19488:	bl	125f4 <__assert_fail@plt>
   1948c:	ldr	r3, [pc, #44]	; 194c0 <__assert_fail@plt+0x6ecc>
   19490:	ldr	r2, [pc, #92]	; 194f4 <__assert_fail@plt+0x6f00>
   19494:	ldr	r1, [pc, #44]	; 194c8 <__assert_fail@plt+0x6ed4>
   19498:	ldr	r0, [pc, #88]	; 194f8 <__assert_fail@plt+0x6f04>
   1949c:	bl	125f4 <__assert_fail@plt>
   194a0:	andeq	r7, r5, r0, lsr #11
   194a4:			; <UNDEFINED> instruction: 0x000578b7
   194a8:	andeq	r0, r0, r6, lsl r3
   194ac:	andeq	r2, r4, r4, lsl #15
   194b0:	andeq	r2, r4, r0, lsr #13
   194b4:	muleq	r5, r8, r5
   194b8:	muleq	r5, ip, r5
   194bc:	tsteq	r8, r1
   194c0:	andeq	r2, r4, ip, ror #11
   194c4:	muleq	r0, r9, r2
   194c8:	andeq	r2, r4, r8, lsr #13
   194cc:			; <UNDEFINED> instruction: 0x000426b0
   194d0:	andeq	r2, r4, r8, lsr r7
   194d4:	andeq	r2, r4, r8, ror #14
   194d8:			; <UNDEFINED> instruction: 0x000002ba
   194dc:	andeq	r2, r4, r8, lsl #14
   194e0:			; <UNDEFINED> instruction: 0x000002b9
   194e4:	andeq	r2, r4, r0, lsl #14
   194e8:	strdeq	r2, [r4], -r8
   194ec:	andeq	r0, r0, r5, lsr #4
   194f0:	andeq	r2, r4, ip, asr #13
   194f4:	andeq	r0, r0, r7, asr #5
   194f8:	andeq	r2, r4, r4, lsr #14
   194fc:	push	{r4, r5, lr}
   19500:	sub	sp, sp, #44	; 0x2c
   19504:	add	r4, sp, #32
   19508:	stm	r4, {r0, r1}
   1950c:	mov	r0, r4
   19510:	bl	1227c <localtime@plt>
   19514:	cmp	r0, #0
   19518:	beq	195d8 <__assert_fail@plt+0x6fe4>
   1951c:	ldr	r3, [r0, #24]
   19520:	cmp	r3, #0
   19524:	blt	195e8 <__assert_fail@plt+0x6ff4>
   19528:	cmp	r3, #6
   1952c:	bgt	19688 <__assert_fail@plt+0x7094>
   19530:	ldr	ip, [r0, #16]
   19534:	cmp	ip, #0
   19538:	blt	19674 <__assert_fail@plt+0x7080>
   1953c:	cmp	ip, #11
   19540:	bgt	19660 <__assert_fail@plt+0x706c>
   19544:	ldr	lr, [r0, #8]
   19548:	cmp	lr, #0
   1954c:	blt	1964c <__assert_fail@plt+0x7058>
   19550:	cmp	lr, #23
   19554:	bgt	19638 <__assert_fail@plt+0x7044>
   19558:	ldr	r4, [r0, #4]
   1955c:	cmp	r4, #59	; 0x3b
   19560:	bgt	19624 <__assert_fail@plt+0x7030>
   19564:	ldr	r5, [r0]
   19568:	cmp	r5, #61	; 0x3d
   1956c:	bgt	19610 <__assert_fail@plt+0x701c>
   19570:	ldr	r2, [r0, #20]
   19574:	ldr	r1, [pc, #288]	; 1969c <__assert_fail@plt+0x70a8>
   19578:	add	r2, r2, #1888	; 0x760
   1957c:	add	r3, r1, r3, lsl #2
   19580:	add	r1, r1, ip, lsl #2
   19584:	ldr	ip, [sp, #36]	; 0x24
   19588:	add	r2, r2, #12
   1958c:	str	r2, [sp, #24]
   19590:	str	r5, [sp, #16]
   19594:	ldr	r2, [r1, #72]	; 0x48
   19598:	str	r4, [sp, #12]
   1959c:	str	lr, [sp, #8]
   195a0:	str	ip, [sp, #20]
   195a4:	ldr	r0, [r0, #12]
   195a8:	ldr	r3, [r3, #44]	; 0x2c
   195ac:	str	r0, [sp, #4]
   195b0:	str	r2, [sp]
   195b4:	mov	r1, #1024	; 0x400
   195b8:	ldr	r2, [pc, #224]	; 196a0 <__assert_fail@plt+0x70ac>
   195bc:	ldr	r0, [pc, #224]	; 196a4 <__assert_fail@plt+0x70b0>
   195c0:	bl	12360 <snprintf@plt>
   195c4:	cmp	r0, #1024	; 0x400
   195c8:	ldrlt	r0, [pc, #212]	; 196a4 <__assert_fail@plt+0x70b0>
   195cc:	bge	195fc <__assert_fail@plt+0x7008>
   195d0:	add	sp, sp, #44	; 0x2c
   195d4:	pop	{r4, r5, pc}
   195d8:	mov	r2, #64	; 0x40
   195dc:	ldm	r4, {r0, r1}
   195e0:	bl	18fb8 <__assert_fail@plt+0x69c4>
   195e4:	b	195d0 <__assert_fail@plt+0x6fdc>
   195e8:	ldr	r3, [pc, #184]	; 196a8 <__assert_fail@plt+0x70b4>
   195ec:	ldr	r2, [pc, #184]	; 196ac <__assert_fail@plt+0x70b8>
   195f0:	ldr	r1, [pc, #184]	; 196b0 <__assert_fail@plt+0x70bc>
   195f4:	ldr	r0, [pc, #184]	; 196b4 <__assert_fail@plt+0x70c0>
   195f8:	bl	125f4 <__assert_fail@plt>
   195fc:	ldr	r3, [pc, #164]	; 196a8 <__assert_fail@plt+0x70b4>
   19600:	ldr	r2, [pc, #176]	; 196b8 <__assert_fail@plt+0x70c4>
   19604:	ldr	r1, [pc, #164]	; 196b0 <__assert_fail@plt+0x70bc>
   19608:	ldr	r0, [pc, #172]	; 196bc <__assert_fail@plt+0x70c8>
   1960c:	bl	125f4 <__assert_fail@plt>
   19610:	ldr	r3, [pc, #144]	; 196a8 <__assert_fail@plt+0x70b4>
   19614:	mov	r2, #756	; 0x2f4
   19618:	ldr	r1, [pc, #144]	; 196b0 <__assert_fail@plt+0x70bc>
   1961c:	ldr	r0, [pc, #156]	; 196c0 <__assert_fail@plt+0x70cc>
   19620:	bl	125f4 <__assert_fail@plt>
   19624:	ldr	r3, [pc, #124]	; 196a8 <__assert_fail@plt+0x70b4>
   19628:	ldr	r2, [pc, #148]	; 196c4 <__assert_fail@plt+0x70d0>
   1962c:	ldr	r1, [pc, #124]	; 196b0 <__assert_fail@plt+0x70bc>
   19630:	ldr	r0, [pc, #144]	; 196c8 <__assert_fail@plt+0x70d4>
   19634:	bl	125f4 <__assert_fail@plt>
   19638:	ldr	r3, [pc, #104]	; 196a8 <__assert_fail@plt+0x70b4>
   1963c:	ldr	r2, [pc, #136]	; 196cc <__assert_fail@plt+0x70d8>
   19640:	ldr	r1, [pc, #104]	; 196b0 <__assert_fail@plt+0x70bc>
   19644:	ldr	r0, [pc, #132]	; 196d0 <__assert_fail@plt+0x70dc>
   19648:	bl	125f4 <__assert_fail@plt>
   1964c:	ldr	r3, [pc, #84]	; 196a8 <__assert_fail@plt+0x70b4>
   19650:	ldr	r2, [pc, #124]	; 196d4 <__assert_fail@plt+0x70e0>
   19654:	ldr	r1, [pc, #84]	; 196b0 <__assert_fail@plt+0x70bc>
   19658:	ldr	r0, [pc, #120]	; 196d8 <__assert_fail@plt+0x70e4>
   1965c:	bl	125f4 <__assert_fail@plt>
   19660:	ldr	r3, [pc, #64]	; 196a8 <__assert_fail@plt+0x70b4>
   19664:	mov	r2, #752	; 0x2f0
   19668:	ldr	r1, [pc, #64]	; 196b0 <__assert_fail@plt+0x70bc>
   1966c:	ldr	r0, [pc, #104]	; 196dc <__assert_fail@plt+0x70e8>
   19670:	bl	125f4 <__assert_fail@plt>
   19674:	ldr	r3, [pc, #44]	; 196a8 <__assert_fail@plt+0x70b4>
   19678:	ldr	r2, [pc, #96]	; 196e0 <__assert_fail@plt+0x70ec>
   1967c:	ldr	r1, [pc, #44]	; 196b0 <__assert_fail@plt+0x70bc>
   19680:	ldr	r0, [pc, #92]	; 196e4 <__assert_fail@plt+0x70f0>
   19684:	bl	125f4 <__assert_fail@plt>
   19688:	ldr	r3, [pc, #24]	; 196a8 <__assert_fail@plt+0x70b4>
   1968c:	ldr	r2, [pc, #84]	; 196e8 <__assert_fail@plt+0x70f4>
   19690:	ldr	r1, [pc, #24]	; 196b0 <__assert_fail@plt+0x70bc>
   19694:	ldr	r0, [pc, #80]	; 196ec <__assert_fail@plt+0x70f8>
   19698:	bl	125f4 <__assert_fail@plt>
   1969c:	andeq	r2, r4, ip, ror #11
   196a0:	andeq	r2, r4, r0, lsr r8
   196a4:			; <UNDEFINED> instruction: 0x000578b8
   196a8:	andeq	r2, r4, r8, lsl #12
   196ac:	andeq	r0, r0, sp, ror #5
   196b0:	andeq	r2, r4, r8, lsr #13
   196b4:	muleq	r4, r0, r7
   196b8:	andeq	r0, r0, r2, lsl #6
   196bc:	andeq	r2, r4, r8, asr r8
   196c0:	andeq	r2, r4, ip, lsl r8
   196c4:	strdeq	r0, [r0], -r3
   196c8:	andeq	r2, r4, r8, lsl #16
   196cc:	strdeq	r0, [r0], -r2
   196d0:	strdeq	r2, [r4], -r4
   196d4:	strdeq	r0, [r0], -r1
   196d8:	andeq	r2, r4, r0, ror #15
   196dc:	andeq	r2, r4, ip, asr #15
   196e0:	andeq	r0, r0, pc, ror #5
   196e4:			; <UNDEFINED> instruction: 0x000427b8
   196e8:	andeq	r0, r0, lr, ror #5
   196ec:	andeq	r2, r4, r4, lsr #15
   196f0:	push	{r1, r2, r3}
   196f4:	push	{r4, lr}
   196f8:	sub	sp, sp, #12
   196fc:	add	r3, sp, #24
   19700:	mov	r4, r0
   19704:	mov	r2, r3
   19708:	ldr	r0, [r0, #4]
   1970c:	ldr	r1, [sp, #20]
   19710:	str	r3, [sp, #4]
   19714:	bl	12474 <vfprintf@plt>
   19718:	cmp	r0, #0
   1971c:	blt	19730 <__assert_fail@plt+0x713c>
   19720:	add	sp, sp, #12
   19724:	pop	{r4, lr}
   19728:	add	sp, sp, #12
   1972c:	bx	lr
   19730:	bl	12348 <__errno_location@plt>
   19734:	ldr	r1, [r4, #8]
   19738:	ldr	r0, [r0]
   1973c:	bl	18cbc <__assert_fail@plt+0x66c8>
   19740:	add	sp, sp, #12
   19744:	pop	{r4, lr}
   19748:	add	sp, sp, #12
   1974c:	bx	lr
   19750:	cmp	r0, #32768	; 0x8000
   19754:	beq	197a0 <__assert_fail@plt+0x71ac>
   19758:	cmp	r0, #16384	; 0x4000
   1975c:	beq	197a8 <__assert_fail@plt+0x71b4>
   19760:	cmp	r0, #40960	; 0xa000
   19764:	beq	197b0 <__assert_fail@plt+0x71bc>
   19768:	cmp	r0, #49152	; 0xc000
   1976c:	beq	19798 <__assert_fail@plt+0x71a4>
   19770:	cmp	r0, #24576	; 0x6000
   19774:	beq	197b8 <__assert_fail@plt+0x71c4>
   19778:	cmp	r0, #8192	; 0x2000
   1977c:	beq	197c0 <__assert_fail@plt+0x71cc>
   19780:	ldr	r3, [pc, #64]	; 197c8 <__assert_fail@plt+0x71d4>
   19784:	ldr	r2, [pc, #64]	; 197cc <__assert_fail@plt+0x71d8>
   19788:	cmp	r0, #4096	; 0x1000
   1978c:	moveq	r0, r3
   19790:	movne	r0, r2
   19794:	bx	lr
   19798:	ldr	r0, [pc, #48]	; 197d0 <__assert_fail@plt+0x71dc>
   1979c:	bx	lr
   197a0:	ldr	r0, [pc, #44]	; 197d4 <__assert_fail@plt+0x71e0>
   197a4:	bx	lr
   197a8:	ldr	r0, [pc, #40]	; 197d8 <__assert_fail@plt+0x71e4>
   197ac:	bx	lr
   197b0:	ldr	r0, [pc, #36]	; 197dc <__assert_fail@plt+0x71e8>
   197b4:	bx	lr
   197b8:	ldr	r0, [pc, #32]	; 197e0 <__assert_fail@plt+0x71ec>
   197bc:	bx	lr
   197c0:	ldr	r0, [pc, #28]	; 197e4 <__assert_fail@plt+0x71f0>
   197c4:	bx	lr
   197c8:	andeq	r1, r4, r0, asr #3
   197cc:	andeq	r2, r4, ip, ror #16
   197d0:	andeq	r3, r4, r4, lsl #26
   197d4:	andeq	r4, r4, r8, lsl #20
   197d8:	andeq	r5, r4, r4, lsr #28
   197dc:	andeq	r0, r4, r4, asr ip
   197e0:	andeq	r5, r4, r4, lsr pc
   197e4:	andeq	r0, r4, r8, lsl #6
   197e8:	push	{r4, lr}
   197ec:	sub	sp, sp, #8
   197f0:	mov	r3, r1
   197f4:	str	r2, [sp]
   197f8:	ldr	ip, [r0, #16]
   197fc:	ldrb	r2, [r0, #12]
   19800:	mov	r4, r0
   19804:	mov	r1, ip
   19808:	ldr	r0, [r0, #4]
   1980c:	bl	206ac <__assert_fail@plt+0xe0b8>
   19810:	cmp	r0, #0
   19814:	blt	19820 <__assert_fail@plt+0x722c>
   19818:	add	sp, sp, #8
   1981c:	pop	{r4, pc}
   19820:	bl	12348 <__errno_location@plt>
   19824:	ldr	r1, [r4, #8]
   19828:	ldr	r0, [r0]
   1982c:	add	sp, sp, #8
   19830:	pop	{r4, lr}
   19834:	b	18cbc <__assert_fail@plt+0x66c8>
   19838:	push	{r4, lr}
   1983c:	mov	r4, r0
   19840:	bl	12348 <__errno_location@plt>
   19844:	ldr	r1, [r4]
   19848:	pop	{r4, lr}
   1984c:	ldr	r0, [r0]
   19850:	b	18cbc <__assert_fail@plt+0x66c8>
   19854:	push	{r4, r5, r6, r7, r8, lr}
   19858:	vpush	{d8}
   1985c:	mov	r4, r1
   19860:	ldr	r1, [r1]
   19864:	mov	r5, r0
   19868:	cmp	r1, #1
   1986c:	sub	sp, sp, #696	; 0x2b8
   19870:	beq	19b48 <__assert_fail@plt+0x7554>
   19874:	bcc	19b1c <__assert_fail@plt+0x7528>
   19878:	cmp	r1, #2
   1987c:	bne	19b10 <__assert_fail@plt+0x751c>
   19880:	mov	r6, r2
   19884:	ldrb	r2, [r4, #4]
   19888:	cmp	r2, #121	; 0x79
   1988c:	ldrls	pc, [pc, r2, lsl #2]
   19890:	b	19b10 <__assert_fail@plt+0x751c>
   19894:	ldrdeq	r9, [r1], -r4
   19898:	andeq	r9, r1, r0, lsl fp
   1989c:	andeq	r9, r1, r0, lsl fp
   198a0:	andeq	r9, r1, r0, lsl fp
   198a4:	andeq	r9, r1, r0, lsl fp
   198a8:	andeq	r9, r1, r0, lsl fp
   198ac:	andeq	r9, r1, r0, lsl fp
   198b0:	andeq	r9, r1, r0, lsl fp
   198b4:	andeq	r9, r1, r0, lsl fp
   198b8:	andeq	r9, r1, r0, lsl fp
   198bc:	andeq	r9, r1, r0, lsl fp
   198c0:	andeq	r9, r1, r0, lsl fp
   198c4:	andeq	r9, r1, r0, lsl fp
   198c8:	andeq	r9, r1, r0, lsl fp
   198cc:	andeq	r9, r1, r0, lsl fp
   198d0:	andeq	r9, r1, r0, lsl fp
   198d4:	andeq	r9, r1, r0, lsl fp
   198d8:	andeq	r9, r1, r0, lsl fp
   198dc:	andeq	r9, r1, r0, lsl fp
   198e0:	andeq	r9, r1, r0, lsl fp
   198e4:	andeq	r9, r1, r0, lsl fp
   198e8:	andeq	r9, r1, r0, lsl fp
   198ec:	andeq	r9, r1, r0, lsl fp
   198f0:	andeq	r9, r1, r0, lsl fp
   198f4:	andeq	r9, r1, r0, lsl fp
   198f8:	andeq	r9, r1, r0, lsl fp
   198fc:	andeq	r9, r1, r0, lsl fp
   19900:	andeq	r9, r1, r0, lsl fp
   19904:	andeq	r9, r1, r0, lsl fp
   19908:	andeq	r9, r1, r0, lsl fp
   1990c:	andeq	r9, r1, r0, lsl fp
   19910:	andeq	r9, r1, r0, lsl fp
   19914:	andeq	r9, r1, r0, lsl fp
   19918:	andeq	r9, r1, r0, lsl fp
   1991c:	andeq	r9, r1, r0, lsl fp
   19920:	andeq	r9, r1, r0, lsl fp
   19924:	andeq	r9, r1, r0, lsl fp
   19928:	andeq	r9, r1, ip, lsl fp
   1992c:	andeq	r9, r1, r0, lsl fp
   19930:	andeq	r9, r1, r0, lsl fp
   19934:	andeq	r9, r1, r0, lsl fp
   19938:	andeq	r9, r1, r0, lsl fp
   1993c:	andeq	r9, r1, r0, lsl fp
   19940:	andeq	r9, r1, r0, lsl fp
   19944:	andeq	r9, r1, r0, lsl fp
   19948:	andeq	r9, r1, r0, lsl fp
   1994c:	andeq	r9, r1, r0, lsl fp
   19950:	andeq	r9, r1, r0, lsl fp
   19954:	andeq	r9, r1, r0, lsl fp
   19958:	andeq	r9, r1, r0, lsl fp
   1995c:	andeq	r9, r1, r0, lsl fp
   19960:	andeq	r9, r1, r0, lsl fp
   19964:	andeq	r9, r1, r0, lsl fp
   19968:	andeq	r9, r1, r0, lsl fp
   1996c:	andeq	r9, r1, r0, lsl fp
   19970:	andeq	r9, r1, r0, lsl fp
   19974:	andeq	r9, r1, r0, lsl fp
   19978:	andeq	r9, r1, r0, lsl fp
   1997c:	andeq	r9, r1, r0, lsl fp
   19980:	andeq	r9, r1, r0, lsl fp
   19984:	andeq	r9, r1, r0, lsl fp
   19988:	andeq	r9, r1, r0, lsl fp
   1998c:	andeq	r9, r1, r0, lsl fp
   19990:	andeq	r9, r1, r0, lsl fp
   19994:	andeq	r9, r1, r0, lsl fp
   19998:	andeq	r9, r1, r0, lsl fp
   1999c:	andeq	r9, r1, r0, lsl fp
   199a0:	andeq	r9, r1, r0, lsl fp
   199a4:	strdeq	r9, [r1], -r8
   199a8:	andeq	r9, r1, r0, lsl fp
   199ac:	andeq	r9, r1, r0, lsl #28
   199b0:	andeq	r9, r1, r8, ror #23
   199b4:	andeq	r9, r1, r0, ror #25
   199b8:	andeq	r9, r1, r0, lsl fp
   199bc:	andeq	r9, r1, r0, lsl fp
   199c0:	andeq	r9, r1, r0, lsl fp
   199c4:	andeq	r9, r1, r0, lsl fp
   199c8:	andeq	r9, r1, r8, lsr #26
   199cc:	andeq	r9, r1, r0, lsl fp
   199d0:	andeq	r9, r1, r0, lsl fp
   199d4:	andeq	r9, r1, r0, asr sp
   199d8:	andeq	r9, r1, r0, lsl fp
   199dc:	andeq	r9, r1, r0, lsl fp
   199e0:	muleq	r1, r0, sp
   199e4:	andeq	r9, r1, r0, lsl fp
   199e8:	muleq	r1, r4, fp
   199ec:	andeq	r9, r1, r0, lsl fp
   199f0:	andeq	r9, r1, r0, lsl fp
   199f4:	andeq	r9, r1, r0, lsl fp
   199f8:	andeq	r9, r1, ip, ror sl
   199fc:	andeq	r9, r1, ip, asr #30
   19a00:	andeq	r9, r1, r0, lsl fp
   19a04:	andeq	r9, r1, r0, lsl fp
   19a08:	andeq	r9, r1, r0, lsl fp
   19a0c:	andeq	r9, r1, r0, lsl fp
   19a10:	andeq	r9, r1, r0, lsl fp
   19a14:	andeq	r9, r1, r0, lsl fp
   19a18:	andeq	r9, r1, ip, lsl #31
   19a1c:	andeq	r9, r1, r4, lsl #27
   19a20:	strdeq	r9, [r1], -r0
   19a24:	andeq	r9, r1, ip, lsl ip
   19a28:	andeq	r9, r1, r0, lsl fp
   19a2c:	andeq	r9, r1, r0, lsr ip
   19a30:	ldrdeq	r9, [r1], -r0
   19a34:	andeq	r9, r1, r4, lsr #28
   19a38:	andeq	r9, r1, ip, asr #29
   19a3c:	andeq	r9, r1, r0, lsl fp
   19a40:	ldrdeq	r9, [r1], -r4
   19a44:	strdeq	r9, [r1], -r4
   19a48:	andeq	r9, r1, r4, lsr #30
   19a4c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   19a50:	andeq	r9, r1, r0, lsl fp
   19a54:	andeq	r9, r1, ip, lsr pc
   19a58:	andeq	r9, r1, r0, lsl fp
   19a5c:	andeq	r9, r1, r0, lsl fp
   19a60:	andeq	r9, r1, r8, asr ip
   19a64:	andeq	r9, r1, r8, ror ip
   19a68:	andeq	r9, r1, r4, lsl #25
   19a6c:	andeq	r9, r1, r0, lsl fp
   19a70:	andeq	r9, r1, r0, lsl fp
   19a74:	andeq	r9, r1, r0, lsl fp
   19a78:	andeq	r9, r1, r0, asr #25
   19a7c:	ldr	r0, [r3, #16]
   19a80:	and	r0, r0, #61440	; 0xf000
   19a84:	cmp	r0, #40960	; 0xa000
   19a88:	bne	19cc8 <__assert_fail@plt+0x76d4>
   19a8c:	ldr	r3, [pc, #1572]	; 1a0b8 <__assert_fail@plt+0x7ac4>
   19a90:	mov	r2, #0
   19a94:	str	r2, [sp]
   19a98:	mov	r0, #3
   19a9c:	ldr	r2, [r3, #12]
   19aa0:	ldr	r1, [r3, #16]
   19aa4:	add	r3, sp, #40	; 0x28
   19aa8:	bl	1212c <__fxstatat64@plt>
   19aac:	cmp	r0, #0
   19ab0:	beq	1a064 <__assert_fail@plt+0x7a70>
   19ab4:	bl	12348 <__errno_location@plt>
   19ab8:	ldr	r1, [r4, #8]
   19abc:	ldr	r3, [r0]
   19ac0:	mov	r7, r0
   19ac4:	cmp	r3, #20
   19ac8:	cmpne	r3, #2
   19acc:	mov	r0, r5
   19ad0:	moveq	r8, #1
   19ad4:	movne	r8, #0
   19ad8:	beq	1a058 <__assert_fail@plt+0x7a64>
   19adc:	cmp	r3, #40	; 0x28
   19ae0:	beq	1a06c <__assert_fail@plt+0x7a78>
   19ae4:	ldr	r2, [pc, #1488]	; 1a0bc <__assert_fail@plt+0x7ac8>
   19ae8:	bl	196f0 <__assert_fail@plt+0x70fc>
   19aec:	mov	r1, r6
   19af0:	mov	r0, r8
   19af4:	ldr	r4, [r7]
   19af8:	bl	18c78 <__assert_fail@plt+0x6684>
   19afc:	mov	r1, r4
   19b00:	ldr	r2, [pc, #1464]	; 1a0c0 <__assert_fail@plt+0x7acc>
   19b04:	mov	r3, r0
   19b08:	mov	r0, r8
   19b0c:	bl	121ec <error@plt>
   19b10:	add	sp, sp, #696	; 0x2b8
   19b14:	vpop	{d8}
   19b18:	pop	{r4, r5, r6, r7, r8, pc}
   19b1c:	ldr	r6, [r4, #12]
   19b20:	ldr	r0, [r4, #8]
   19b24:	mov	r2, r6
   19b28:	ldr	r3, [r5, #4]
   19b2c:	mov	r1, #1
   19b30:	bl	12168 <fwrite@plt>
   19b34:	cmp	r6, r0
   19b38:	bls	19b10 <__assert_fail@plt+0x751c>
   19b3c:	add	r0, r5, #8
   19b40:	bl	19838 <__assert_fail@plt+0x7244>
   19b44:	b	19b10 <__assert_fail@plt+0x751c>
   19b48:	ldr	r6, [r4, #12]
   19b4c:	ldr	r0, [r4, #8]
   19b50:	mov	r2, r6
   19b54:	ldr	r3, [r5, #4]
   19b58:	bl	12168 <fwrite@plt>
   19b5c:	cmp	r6, r0
   19b60:	bhi	19b88 <__assert_fail@plt+0x7594>
   19b64:	ldr	r0, [r5, #4]
   19b68:	bl	2db08 <__assert_fail@plt+0x1b514>
   19b6c:	cmp	r0, #0
   19b70:	beq	19b10 <__assert_fail@plt+0x751c>
   19b74:	bl	12348 <__errno_location@plt>
   19b78:	ldr	r1, [r5, #8]
   19b7c:	ldr	r0, [r0]
   19b80:	bl	18cbc <__assert_fail@plt+0x66c8>
   19b84:	b	19b10 <__assert_fail@plt+0x751c>
   19b88:	add	r0, r5, #8
   19b8c:	bl	19838 <__assert_fail@plt+0x7244>
   19b90:	b	19b64 <__assert_fail@plt+0x7570>
   19b94:	ldr	r0, [r3, #24]
   19b98:	mov	r3, #0
   19b9c:	mov	r6, #1
   19ba0:	mov	r7, #0
   19ba4:	mov	r1, r3
   19ba8:	ldr	r4, [r4, #8]
   19bac:	strd	r6, [sp, #8]
   19bb0:	strd	r6, [sp]
   19bb4:	add	r2, sp, #40	; 0x28
   19bb8:	bl	225f8 <__assert_fail@plt+0x10004>
   19bbc:	mov	r1, r4
   19bc0:	mov	r2, r0
   19bc4:	mov	r0, r5
   19bc8:	bl	196f0 <__assert_fail@plt+0x70fc>
   19bcc:	b	19b10 <__assert_fail@plt+0x751c>
   19bd0:	ldr	r0, [r3, #28]
   19bd4:	str	r3, [sp, #20]
   19bd8:	bl	125d0 <getgrgid@plt>
   19bdc:	ldr	r3, [sp, #20]
   19be0:	subs	r2, r0, #0
   19be4:	bne	19c9c <__assert_fail@plt+0x76a8>
   19be8:	ldr	r0, [r3, #28]
   19bec:	b	19b98 <__assert_fail@plt+0x75a4>
   19bf0:	add	r3, r3, #88	; 0x58
   19bf4:	add	r2, sp, #32
   19bf8:	ldm	r3, {r0, r1}
   19bfc:	ldr	r4, [r4, #8]
   19c00:	stm	r2, {r0, r1}
   19c04:	bl	194fc <__assert_fail@plt+0x6f08>
   19c08:	mov	r1, r4
   19c0c:	mov	r2, r0
   19c10:	mov	r0, r5
   19c14:	bl	196f0 <__assert_fail@plt+0x70fc>
   19c18:	b	19b10 <__assert_fail@plt+0x751c>
   19c1c:	ldr	r3, [pc, #1172]	; 1a0b8 <__assert_fail@plt+0x7ac4>
   19c20:	ldr	r1, [r4, #8]
   19c24:	ldr	r2, [r3]
   19c28:	bl	196f0 <__assert_fail@plt+0x70fc>
   19c2c:	b	19b10 <__assert_fail@plt+0x751c>
   19c30:	mov	r0, r6
   19c34:	bl	212c4 <__assert_fail@plt+0xecd0>
   19c38:	ldr	r1, [r4, #8]
   19c3c:	mov	r6, r0
   19c40:	mov	r2, r0
   19c44:	mov	r0, r5
   19c48:	bl	197e8 <__assert_fail@plt+0x71f4>
   19c4c:	mov	r0, r6
   19c50:	bl	2db68 <__assert_fail@plt+0x1b574>
   19c54:	b	19b10 <__assert_fail@plt+0x751c>
   19c58:	ldrd	r0, [r3, #48]	; 0x30
   19c5c:	mov	r2, #1
   19c60:	mov	r3, #0
   19c64:	ldr	r4, [r4, #8]
   19c68:	strd	r2, [sp, #8]
   19c6c:	strd	r2, [sp]
   19c70:	mov	r3, #0
   19c74:	b	19bb4 <__assert_fail@plt+0x75c0>
   19c78:	add	r3, r3, #80	; 0x50
   19c7c:	add	r2, sp, #40	; 0x28
   19c80:	b	19bf8 <__assert_fail@plt+0x7604>
   19c84:	ldr	r0, [r3, #24]
   19c88:	str	r3, [sp, #20]
   19c8c:	bl	11f58 <getpwuid@plt>
   19c90:	ldr	r3, [sp, #20]
   19c94:	subs	r2, r0, #0
   19c98:	beq	19b94 <__assert_fail@plt+0x75a0>
   19c9c:	ldr	r1, [r4, #8]
   19ca0:	ldr	r3, [r4, #12]
   19ca4:	mov	ip, #115	; 0x73
   19ca8:	mov	r0, r5
   19cac:	strb	ip, [r1, r3]
   19cb0:	ldr	r2, [r2]
   19cb4:	ldr	r1, [r4, #8]
   19cb8:	bl	196f0 <__assert_fail@plt+0x70fc>
   19cbc:	b	19b10 <__assert_fail@plt+0x751c>
   19cc0:	ldr	r0, [r3, #16]
   19cc4:	and	r0, r0, #61440	; 0xf000
   19cc8:	bl	19750 <__assert_fail@plt+0x715c>
   19ccc:	ldr	r1, [r4, #8]
   19cd0:	mov	r2, r0
   19cd4:	mov	r0, r5
   19cd8:	bl	196f0 <__assert_fail@plt+0x70fc>
   19cdc:	b	19b10 <__assert_fail@plt+0x751c>
   19ce0:	ldr	r8, [pc, #976]	; 1a0b8 <__assert_fail@plt+0x7ac4>
   19ce4:	ldr	r0, [r8, #20]
   19ce8:	add	r0, r0, #1
   19cec:	bl	2c184 <__assert_fail@plt+0x19b90>
   19cf0:	ldr	r8, [r8, #20]
   19cf4:	mov	r1, r6
   19cf8:	mov	r2, r8
   19cfc:	mov	r7, r0
   19d00:	bl	12024 <memcpy@plt>
   19d04:	mov	r3, #0
   19d08:	mov	r0, r5
   19d0c:	ldr	r1, [r4, #8]
   19d10:	mov	r2, r7
   19d14:	strb	r3, [r7, r8]
   19d18:	bl	196f0 <__assert_fail@plt+0x70fc>
   19d1c:	mov	r0, r7
   19d20:	bl	2db68 <__assert_fail@plt+0x1b574>
   19d24:	b	19b10 <__assert_fail@plt+0x751c>
   19d28:	mov	r0, r3
   19d2c:	add	r1, sp, #40	; 0x28
   19d30:	bl	215b0 <__assert_fail@plt+0xefbc>
   19d34:	mov	r3, #0
   19d38:	add	r2, sp, #40	; 0x28
   19d3c:	ldr	r1, [r4, #8]
   19d40:	mov	r0, r5
   19d44:	strb	r3, [sp, #50]	; 0x32
   19d48:	bl	196f0 <__assert_fail@plt+0x70fc>
   19d4c:	b	19b10 <__assert_fail@plt+0x751c>
   19d50:	ldr	r3, [pc, #864]	; 1a0b8 <__assert_fail@plt+0x7ac4>
   19d54:	ldr	r2, [r3]
   19d58:	cmp	r2, #0
   19d5c:	ble	1a024 <__assert_fail@plt+0x7a30>
   19d60:	ldr	r3, [r3, #20]
   19d64:	add	r2, r6, r3
   19d68:	ldrb	r3, [r6, r3]
   19d6c:	cmp	r3, #47	; 0x2f
   19d70:	addeq	r2, r2, #1
   19d74:	ldr	r1, [r4, #8]
   19d78:	mov	r0, r5
   19d7c:	bl	197e8 <__assert_fail@plt+0x71f4>
   19d80:	b	19b10 <__assert_fail@plt+0x751c>
   19d84:	ldrd	r0, [r3, #64]	; 0x40
   19d88:	mov	r2, #512	; 0x200
   19d8c:	b	19c60 <__assert_fail@plt+0x766c>
   19d90:	ldrd	r6, [r3, #48]	; 0x30
   19d94:	ldr	r4, [r4, #8]
   19d98:	orrs	r2, r6, r7
   19d9c:	bne	19fa0 <__assert_fail@plt+0x79ac>
   19da0:	ldrd	r2, [r3, #64]	; 0x40
   19da4:	orrs	r1, r2, r3
   19da8:	beq	1a01c <__assert_fail@plt+0x7a28>
   19dac:	vldr	d7, [pc, #740]	; 1a098 <__assert_fail@plt+0x7aa4>
   19db0:	vldr	d6, [pc, #744]	; 1a0a0 <__assert_fail@plt+0x7aac>
   19db4:	cmp	r2, #0
   19db8:	sbcs	r3, r3, #0
   19dbc:	vmovge.f64	d7, d6
   19dc0:	mov	r1, r4
   19dc4:	mov	r0, r5
   19dc8:	vmov	r2, r3, d7
   19dcc:	bl	196f0 <__assert_fail@plt+0x70fc>
   19dd0:	b	19b10 <__assert_fail@plt+0x751c>
   19dd4:	mov	r2, #5
   19dd8:	ldr	r1, [pc, #740]	; 1a0c4 <__assert_fail@plt+0x7ad0>
   19ddc:	mov	r0, #0
   19de0:	bl	120b4 <dcgettext@plt>
   19de4:	ldr	r3, [pc, #732]	; 1a0c8 <__assert_fail@plt+0x7ad4>
   19de8:	mov	r1, #0
   19dec:	mov	r2, r0
   19df0:	mov	r0, #1
   19df4:	bl	121ec <error@plt>
   19df8:	ldrd	r0, [r3]
   19dfc:	b	19c5c <__assert_fail@plt+0x7668>
   19e00:	mov	r1, r6
   19e04:	mov	r0, r3
   19e08:	ldr	r4, [r4, #8]
   19e0c:	bl	1abd4 <__assert_fail@plt+0x85e0>
   19e10:	mov	r1, r4
   19e14:	mov	r2, r0
   19e18:	mov	r0, r5
   19e1c:	bl	197e8 <__assert_fail@plt+0x71f4>
   19e20:	b	19b10 <__assert_fail@plt+0x751c>
   19e24:	mov	r0, r6
   19e28:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   19e2c:	mov	r6, r0
   19e30:	bl	12300 <strlen@plt>
   19e34:	sub	r0, r0, #1
   19e38:	adds	r2, r6, r0
   19e3c:	bcs	19e8c <__assert_fail@plt+0x7898>
   19e40:	ldrb	r3, [r6, r0]
   19e44:	cmp	r3, #47	; 0x2f
   19e48:	bne	19e74 <__assert_fail@plt+0x7880>
   19e4c:	sub	r3, r2, #1
   19e50:	sub	r0, r6, #1
   19e54:	b	19e68 <__assert_fail@plt+0x7874>
   19e58:	ldrb	r1, [r2]
   19e5c:	sub	r3, r3, #1
   19e60:	cmp	r1, #47	; 0x2f
   19e64:	bne	19e74 <__assert_fail@plt+0x7880>
   19e68:	cmp	r3, r0
   19e6c:	mov	r2, r3
   19e70:	bne	19e58 <__assert_fail@plt+0x7864>
   19e74:	cmp	r6, r2
   19e78:	bcs	19e8c <__assert_fail@plt+0x7898>
   19e7c:	ldrb	r3, [r2, #1]
   19e80:	cmp	r3, #47	; 0x2f
   19e84:	moveq	r3, #0
   19e88:	strbeq	r3, [r2, #1]
   19e8c:	mov	r1, #47	; 0x2f
   19e90:	mov	r0, r6
   19e94:	bl	12468 <strrchr@plt>
   19e98:	subs	r3, r0, #0
   19e9c:	movne	r2, #0
   19ea0:	moveq	r0, r5
   19ea4:	movne	r0, r5
   19ea8:	strbne	r2, [r3]
   19eac:	ldreq	r1, [r4, #8]
   19eb0:	ldreq	r2, [pc, #532]	; 1a0cc <__assert_fail@plt+0x7ad8>
   19eb4:	ldrne	r1, [r4, #8]
   19eb8:	movne	r2, r6
   19ebc:	bl	197e8 <__assert_fail@plt+0x71f4>
   19ec0:	mov	r0, r6
   19ec4:	bl	2db68 <__assert_fail@plt+0x1b574>
   19ec8:	b	19b10 <__assert_fail@plt+0x751c>
   19ecc:	ldrd	r0, [r3, #96]	; 0x60
   19ed0:	b	19c5c <__assert_fail@plt+0x7668>
   19ed4:	mov	r6, #1024	; 0x400
   19ed8:	mov	r7, #0
   19edc:	ldrd	r0, [r3, #64]	; 0x40
   19ee0:	ldr	r4, [r4, #8]
   19ee4:	mov	r2, #512	; 0x200
   19ee8:	mov	r3, #0
   19eec:	strd	r6, [sp, #8]
   19ef0:	b	19c6c <__assert_fail@plt+0x7678>
   19ef4:	ldr	r3, [r3, #16]
   19ef8:	and	r3, r3, #61440	; 0xf000
   19efc:	cmp	r3, #40960	; 0xa000
   19f00:	beq	1a02c <__assert_fail@plt+0x7a38>
   19f04:	ldr	r1, [r4, #8]
   19f08:	mov	r0, r5
   19f0c:	ldr	r2, [pc, #444]	; 1a0d0 <__assert_fail@plt+0x7adc>
   19f10:	bl	197e8 <__assert_fail@plt+0x71f4>
   19f14:	mov	r7, #0
   19f18:	mov	r0, r7
   19f1c:	bl	2db68 <__assert_fail@plt+0x1b574>
   19f20:	b	19b10 <__assert_fail@plt+0x751c>
   19f24:	ldr	r2, [r3, #16]
   19f28:	ldr	r1, [r4, #8]
   19f2c:	lsl	r2, r2, #20
   19f30:	lsr	r2, r2, #20
   19f34:	bl	196f0 <__assert_fail@plt+0x70fc>
   19f38:	b	19b10 <__assert_fail@plt+0x751c>
   19f3c:	mov	r2, r6
   19f40:	ldr	r1, [r4, #8]
   19f44:	bl	197e8 <__assert_fail@plt+0x71f4>
   19f48:	b	19b10 <__assert_fail@plt+0x751c>
   19f4c:	ldr	r7, [pc, #356]	; 1a0b8 <__assert_fail@plt+0x7ac4>
   19f50:	ldr	r3, [pc, #380]	; 1a0d4 <__assert_fail@plt+0x7ae0>
   19f54:	add	r2, sp, #40	; 0x28
   19f58:	ldr	r1, [r7, #12]
   19f5c:	ldr	r0, [r7, #16]
   19f60:	ldr	r3, [r3, #64]	; 0x40
   19f64:	blx	r3
   19f68:	ldr	r1, [r4, #8]
   19f6c:	cmp	r0, #0
   19f70:	mov	r0, r5
   19f74:	blt	19fcc <__assert_fail@plt+0x79d8>
   19f78:	ldr	r2, [sp, #40]	; 0x28
   19f7c:	bl	196f0 <__assert_fail@plt+0x70fc>
   19f80:	ldr	r0, [sp, #40]	; 0x28
   19f84:	bl	1251c <freecon@plt>
   19f88:	b	19b10 <__assert_fail@plt+0x751c>
   19f8c:	add	r3, r3, #72	; 0x48
   19f90:	add	r2, sp, #24
   19f94:	b	19bf8 <__assert_fail@plt+0x7604>
   19f98:	ldr	r0, [r3, #20]
   19f9c:	b	19b98 <__assert_fail@plt+0x75a4>
   19fa0:	ldrd	r0, [r3, #64]	; 0x40
   19fa4:	bl	3ff4c <__assert_fail@plt+0x2d958>
   19fa8:	vldr	d8, [pc, #248]	; 1a0a8 <__assert_fail@plt+0x7ab4>
   19fac:	vmov	d7, r0, r1
   19fb0:	mov	r0, r6
   19fb4:	mov	r1, r7
   19fb8:	vmul.f64	d8, d7, d8
   19fbc:	bl	3ff4c <__assert_fail@plt+0x2d958>
   19fc0:	vmov	d6, r0, r1
   19fc4:	vdiv.f64	d7, d8, d6
   19fc8:	b	19dc0 <__assert_fail@plt+0x77cc>
   19fcc:	ldr	r2, [pc, #252]	; 1a0d0 <__assert_fail@plt+0x7adc>
   19fd0:	bl	196f0 <__assert_fail@plt+0x70fc>
   19fd4:	bl	12348 <__errno_location@plt>
   19fd8:	mov	r2, #5
   19fdc:	ldr	r1, [pc, #244]	; 1a0d8 <__assert_fail@plt+0x7ae4>
   19fe0:	ldr	r4, [r0]
   19fe4:	mov	r0, #0
   19fe8:	bl	120b4 <dcgettext@plt>
   19fec:	mov	r1, r6
   19ff0:	mov	r5, r0
   19ff4:	mov	r0, #0
   19ff8:	bl	18c78 <__assert_fail@plt+0x6684>
   19ffc:	mov	r2, r5
   1a000:	mov	r1, r4
   1a004:	mov	r3, r0
   1a008:	mov	r0, #0
   1a00c:	bl	121ec <error@plt>
   1a010:	mov	r3, #1
   1a014:	str	r3, [r7, #28]
   1a018:	b	19b10 <__assert_fail@plt+0x751c>
   1a01c:	vldr	d7, [pc, #140]	; 1a0b0 <__assert_fail@plt+0x7abc>
   1a020:	b	19dc0 <__assert_fail@plt+0x77cc>
   1a024:	ldr	r2, [pc, #164]	; 1a0d0 <__assert_fail@plt+0x7adc>
   1a028:	b	19d74 <__assert_fail@plt+0x7780>
   1a02c:	ldr	r8, [pc, #132]	; 1a0b8 <__assert_fail@plt+0x7ac4>
   1a030:	ldr	r1, [r8, #12]
   1a034:	ldr	r0, [r8, #16]
   1a038:	bl	20d8c <__assert_fail@plt+0xe798>
   1a03c:	subs	r7, r0, #0
   1a040:	beq	1a078 <__assert_fail@plt+0x7a84>
   1a044:	ldr	r1, [r4, #8]
   1a048:	mov	r0, r5
   1a04c:	mov	r2, r7
   1a050:	bl	197e8 <__assert_fail@plt+0x71f4>
   1a054:	b	19f18 <__assert_fail@plt+0x7924>
   1a058:	ldr	r2, [pc, #124]	; 1a0dc <__assert_fail@plt+0x7ae8>
   1a05c:	bl	196f0 <__assert_fail@plt+0x70fc>
   1a060:	b	19b10 <__assert_fail@plt+0x751c>
   1a064:	ldr	r0, [sp, #56]	; 0x38
   1a068:	b	19cc4 <__assert_fail@plt+0x76d0>
   1a06c:	ldr	r2, [pc, #108]	; 1a0e0 <__assert_fail@plt+0x7aec>
   1a070:	bl	196f0 <__assert_fail@plt+0x70fc>
   1a074:	b	19b10 <__assert_fail@plt+0x751c>
   1a078:	bl	12348 <__errno_location@plt>
   1a07c:	mov	r1, r6
   1a080:	ldr	r0, [r0]
   1a084:	bl	18c8c <__assert_fail@plt+0x6698>
   1a088:	mov	r3, #1
   1a08c:	str	r3, [r8, #28]
   1a090:	b	19f04 <__assert_fail@plt+0x7910>
   1a094:	nop			; (mov r0, r0)
   1a098:	andeq	r0, r0, r0
   1a09c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a0a0:	andeq	r0, r0, r0
   1a0a4:	svcvc	0x00f00000	; IMB
   1a0a8:	andeq	r0, r0, r0
   1a0ac:	addmi	r0, r0, r0
   1a0b0:	andeq	r0, r0, r0
   1a0b4:	svccc	0x00f00000	; IMB
   1a0b8:	andeq	r7, r5, r0, asr #28
   1a0bc:	andeq	r3, r4, ip, lsr #28
   1a0c0:	andeq	r4, r4, r0, ror #18
   1a0c4:	andeq	r2, r4, r0, ror r8
   1a0c8:	muleq	r4, r4, r8
   1a0cc:	andeq	r3, r4, r8, lsr #24
   1a0d0:	andeq	r2, r4, r0, asr r0
   1a0d4:	andeq	r7, r5, ip, ror #28
   1a0d8:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   1a0dc:	andeq	r2, r4, r8, asr #13
   1a0e0:	andeq	r5, r4, r8, lsr #16
   1a0e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0e8:	sub	sp, sp, #20
   1a0ec:	ldr	r4, [r2, #40]	; 0x28
   1a0f0:	cmp	r4, #0
   1a0f4:	beq	1a1cc <__assert_fail@plt+0x7bd8>
   1a0f8:	ldr	sl, [pc, #340]	; 1a254 <__assert_fail@plt+0x7c60>
   1a0fc:	add	r5, r2, #40	; 0x28
   1a100:	mov	r6, r1
   1a104:	mov	r7, r0
   1a108:	add	r8, sp, #8
   1a10c:	mvn	r9, #0
   1a110:	add	r3, r1, #72	; 0x48
   1a114:	str	r3, [sp, #4]
   1a118:	ldr	r3, [r4]
   1a11c:	cmp	r3, #2
   1a120:	bne	1a234 <__assert_fail@plt+0x7c40>
   1a124:	ldrb	r2, [r4, #5]
   1a128:	cmp	r2, #0
   1a12c:	beq	1a234 <__assert_fail@plt+0x7c40>
   1a130:	ldrb	r3, [r4, #4]
   1a134:	sub	r3, r3, #65	; 0x41
   1a138:	cmp	r3, #19
   1a13c:	ldrls	pc, [pc, r3, lsl #2]
   1a140:	b	1a220 <__assert_fail@plt+0x7c2c>
   1a144:	andeq	sl, r1, ip, lsl #4
   1a148:	andeq	sl, r1, r8, ror #3
   1a14c:	ldrdeq	sl, [r1], -r8
   1a150:	andeq	sl, r1, r0, lsr #4
   1a154:	andeq	sl, r1, r0, lsr #4
   1a158:	andeq	sl, r1, r0, lsr #4
   1a15c:	andeq	sl, r1, r0, lsr #4
   1a160:	andeq	sl, r1, r0, lsr #4
   1a164:	andeq	sl, r1, r0, lsr #4
   1a168:	andeq	sl, r1, r0, lsr #4
   1a16c:	andeq	sl, r1, r0, lsr #4
   1a170:	andeq	sl, r1, r0, lsr #4
   1a174:	andeq	sl, r1, r0, lsr #4
   1a178:	andeq	sl, r1, r0, lsr #4
   1a17c:	andeq	sl, r1, r0, lsr #4
   1a180:	andeq	sl, r1, r0, lsr #4
   1a184:	andeq	sl, r1, r0, lsr #4
   1a188:	andeq	sl, r1, r0, lsr #4
   1a18c:	andeq	sl, r1, r0, lsr #4
   1a190:	muleq	r1, r4, r1
   1a194:	ldr	r3, [r6, #84]	; 0x54
   1a198:	ldr	r1, [r6, #80]	; 0x50
   1a19c:	str	r1, [sp, #8]
   1a1a0:	str	r3, [sp, #12]
   1a1a4:	ldm	r8, {r0, r1}
   1a1a8:	ldr	fp, [r4, #8]
   1a1ac:	bl	18fb8 <__assert_fail@plt+0x69c4>
   1a1b0:	mov	r1, fp
   1a1b4:	mov	r2, r0
   1a1b8:	mov	r0, r5
   1a1bc:	bl	196f0 <__assert_fail@plt+0x70fc>
   1a1c0:	ldr	r4, [r4, #16]
   1a1c4:	cmp	r4, #0
   1a1c8:	bne	1a118 <__assert_fail@plt+0x7b24>
   1a1cc:	mov	r0, #1
   1a1d0:	add	sp, sp, #20
   1a1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1d8:	ldr	r1, [r6, #88]	; 0x58
   1a1dc:	ldr	r3, [r6, #92]	; 0x5c
   1a1e0:	str	r1, [sp, #8]
   1a1e4:	b	1a1a0 <__assert_fail@plt+0x7bac>
   1a1e8:	cmp	r2, #64	; 0x40
   1a1ec:	str	r9, [sp, #8]
   1a1f0:	str	r9, [sp, #12]
   1a1f4:	beq	1a24c <__assert_fail@plt+0x7c58>
   1a1f8:	mov	r2, sl
   1a1fc:	ldr	r1, [r4, #8]
   1a200:	mov	r0, r5
   1a204:	bl	196f0 <__assert_fail@plt+0x70fc>
   1a208:	b	1a1c0 <__assert_fail@plt+0x7bcc>
   1a20c:	ldr	r3, [sp, #4]
   1a210:	ldm	r3, {r0, r1}
   1a214:	ldr	r3, [r6, #76]	; 0x4c
   1a218:	stm	r8, {r0, r1}
   1a21c:	b	1a1a0 <__assert_fail@plt+0x7bac>
   1a220:	ldr	r3, [pc, #48]	; 1a258 <__assert_fail@plt+0x7c64>
   1a224:	ldr	r2, [pc, #48]	; 1a25c <__assert_fail@plt+0x7c68>
   1a228:	ldr	r1, [pc, #48]	; 1a260 <__assert_fail@plt+0x7c6c>
   1a22c:	ldr	r0, [pc, #48]	; 1a264 <__assert_fail@plt+0x7c70>
   1a230:	bl	125f4 <__assert_fail@plt>
   1a234:	mov	r3, r6
   1a238:	mov	r2, r7
   1a23c:	mov	r1, r4
   1a240:	mov	r0, r5
   1a244:	bl	19854 <__assert_fail@plt+0x7260>
   1a248:	b	1a1c0 <__assert_fail@plt+0x7bcc>
   1a24c:	mov	r3, r9
   1a250:	b	1a1a0 <__assert_fail@plt+0x7bac>
   1a254:	andeq	r2, r4, r0, asr r0
   1a258:	andeq	r2, r4, r4, ror #12
   1a25c:	andeq	r0, r0, r8, lsl r5
   1a260:	andeq	r2, r4, r8, lsr #13
   1a264:			; <UNDEFINED> instruction: 0x00044ab4
   1a268:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a26c:	ldrb	r4, [sp, #40]	; 0x28
   1a270:	ldrb	r9, [sp, #44]	; 0x2c
   1a274:	cmp	r4, #123	; 0x7b
   1a278:	beq	1a5c4 <__assert_fail@plt+0x7fd0>
   1a27c:	cmp	r4, #91	; 0x5b
   1a280:	beq	1a5b0 <__assert_fail@plt+0x7fbc>
   1a284:	cmp	r4, #40	; 0x28
   1a288:	beq	1a5d8 <__assert_fail@plt+0x7fe4>
   1a28c:	mov	r8, r0
   1a290:	mov	r0, #20
   1a294:	mov	r6, r2
   1a298:	mov	fp, r3
   1a29c:	mov	sl, r1
   1a2a0:	bl	2c184 <__assert_fail@plt+0x19b90>
   1a2a4:	mov	r3, #0
   1a2a8:	mov	r5, r0
   1a2ac:	str	r0, [r8]
   1a2b0:	add	r0, r6, #2
   1a2b4:	str	r3, [r5, #16]
   1a2b8:	str	fp, [r5]
   1a2bc:	strb	r4, [r5, #4]
   1a2c0:	strb	r9, [r5, #5]
   1a2c4:	str	r6, [r5, #12]
   1a2c8:	bl	2c184 <__assert_fail@plt+0x19b90>
   1a2cc:	mov	r1, sl
   1a2d0:	mov	r2, r6
   1a2d4:	mov	r7, r0
   1a2d8:	str	r0, [r5, #8]
   1a2dc:	bl	12390 <strncpy@plt>
   1a2e0:	cmp	fp, #1
   1a2e4:	add	r3, r7, r6
   1a2e8:	bls	1a478 <__assert_fail@plt+0x7e84>
   1a2ec:	cmp	fp, #2
   1a2f0:	bne	1a5ec <__assert_fail@plt+0x7ff8>
   1a2f4:	sub	r4, r4, #37	; 0x25
   1a2f8:	cmp	r4, #84	; 0x54
   1a2fc:	ldrls	pc, [pc, r4, lsl #2]
   1a300:	b	1a464 <__assert_fail@plt+0x7e70>
   1a304:	andeq	sl, r1, r8, asr r4
   1a308:	andeq	sl, r1, r4, ror #8
   1a30c:	andeq	sl, r1, r4, ror #8
   1a310:	andeq	sl, r1, r4, ror #8
   1a314:	andeq	sl, r1, r4, ror #8
   1a318:	andeq	sl, r1, r4, ror #8
   1a31c:	andeq	sl, r1, r4, ror #8
   1a320:	andeq	sl, r1, r4, ror #8
   1a324:	andeq	sl, r1, r4, ror #8
   1a328:	andeq	sl, r1, r4, ror #8
   1a32c:	andeq	sl, r1, r4, ror #8
   1a330:	andeq	sl, r1, r4, ror #8
   1a334:	andeq	sl, r1, r4, ror #8
   1a338:	andeq	sl, r1, r4, ror #8
   1a33c:	andeq	sl, r1, r4, ror #8
   1a340:	andeq	sl, r1, r4, ror #8
   1a344:	andeq	sl, r1, r4, ror #8
   1a348:	andeq	sl, r1, r4, ror #8
   1a34c:	andeq	sl, r1, r4, ror #8
   1a350:	andeq	sl, r1, r4, ror #8
   1a354:	andeq	sl, r1, r4, ror #8
   1a358:	andeq	sl, r1, r4, ror #8
   1a35c:	andeq	sl, r1, r4, ror #8
   1a360:	andeq	sl, r1, r4, ror #8
   1a364:	andeq	sl, r1, r4, ror #8
   1a368:	andeq	sl, r1, r4, ror #8
   1a36c:	andeq	sl, r1, r4, ror #8
   1a370:	andeq	sl, r1, r4, ror #8
   1a374:	andeq	sl, r1, r8, lsr #9
   1a378:	andeq	sl, r1, r8, lsr #9
   1a37c:	andeq	sl, r1, r8, lsr #9
   1a380:	andeq	sl, r1, r8, lsr #9
   1a384:	andeq	sl, r1, r4, ror #8
   1a388:	andeq	sl, r1, r8, lsr #9
   1a38c:	andeq	sl, r1, r8, lsr #9
   1a390:	muleq	r1, r8, r4
   1a394:	andeq	sl, r1, r4, ror #8
   1a398:	andeq	sl, r1, r4, ror #8
   1a39c:	andeq	sl, r1, r4, ror #8
   1a3a0:	andeq	sl, r1, r4, ror #8
   1a3a4:	andeq	sl, r1, r8, lsr #9
   1a3a8:	andeq	sl, r1, r4, ror #8
   1a3ac:	andeq	sl, r1, r4, ror #8
   1a3b0:	muleq	r1, r8, r4
   1a3b4:	andeq	sl, r1, r4, ror #8
   1a3b8:	andeq	sl, r1, r4, ror #8
   1a3bc:	andeq	sl, r1, r4, lsr #11
   1a3c0:	andeq	sl, r1, r8, lsr #9
   1a3c4:	andeq	sl, r1, r8, lsr #9
   1a3c8:	andeq	sl, r1, r4, ror #8
   1a3cc:	andeq	sl, r1, r4, ror #8
   1a3d0:	andeq	sl, r1, r4, ror #8
   1a3d4:	andeq	sl, r1, r4, lsr #10
   1a3d8:	andeq	sl, r1, r4, asr #10
   1a3dc:	andeq	sl, r1, r4, ror #8
   1a3e0:	andeq	sl, r1, r4, ror #8
   1a3e4:	andeq	sl, r1, r4, ror #8
   1a3e8:	andeq	sl, r1, r4, ror #8
   1a3ec:	andeq	sl, r1, r4, ror #8
   1a3f0:	andeq	sl, r1, r4, ror #8
   1a3f4:	andeq	sl, r1, r8, lsr #9
   1a3f8:	andeq	sl, r1, r8, lsr #9
   1a3fc:	andeq	sl, r1, r8, lsr #9
   1a400:	andeq	sl, r1, r8, asr r5
   1a404:	andeq	sl, r1, r4, ror #8
   1a408:	muleq	r1, r8, r4
   1a40c:	andeq	sl, r1, r8, lsr #9
   1a410:	muleq	r1, r8, r4
   1a414:	andeq	sl, r1, r8, ror #10
   1a418:	andeq	sl, r1, r4, ror #8
   1a41c:	andeq	sl, r1, r8, lsr #9
   1a420:	andeq	sl, r1, r4, lsl #10
   1a424:	andeq	sl, r1, r4, ror #9
   1a428:	andeq	sl, r1, r8, lsr #9
   1a42c:	andeq	sl, r1, r4, ror #8
   1a430:	muleq	r1, r8, r4
   1a434:	andeq	sl, r1, r4, ror #8
   1a438:	andeq	sl, r1, r4, ror #8
   1a43c:	andeq	sl, r1, r8, lsr #9
   1a440:	andeq	sl, r1, r8, lsr #9
   1a444:	andeq	sl, r1, r8, lsr #9
   1a448:	andeq	sl, r1, r4, ror #8
   1a44c:	andeq	sl, r1, r4, ror #8
   1a450:	andeq	sl, r1, r4, ror #8
   1a454:	andeq	sl, r1, r4, lsl #11
   1a458:	add	r3, r3, #1
   1a45c:	mov	r2, #37	; 0x25
   1a460:	strb	r2, [r7, r6]
   1a464:	mov	r2, #0
   1a468:	strb	r2, [r3]
   1a46c:	ldr	r0, [r8]
   1a470:	add	r0, r0, #16
   1a474:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a478:	cmp	r4, #0
   1a47c:	bne	1a600 <__assert_fail@plt+0x800c>
   1a480:	cmp	r9, #0
   1a484:	bne	1a614 <__assert_fail@plt+0x8020>
   1a488:	ldr	r0, [r8]
   1a48c:	strb	r9, [r7, r6]
   1a490:	add	r0, r0, #16
   1a494:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a498:	mov	r2, #115	; 0x73
   1a49c:	add	r3, r3, #1
   1a4a0:	strb	r2, [r7, r6]
   1a4a4:	b	1a464 <__assert_fail@plt+0x7e70>
   1a4a8:	mov	r1, #1
   1a4ac:	mov	r2, #115	; 0x73
   1a4b0:	ldr	r0, [sp, #48]	; 0x30
   1a4b4:	strb	r2, [r7, r6]
   1a4b8:	add	r3, r3, r1
   1a4bc:	mov	r2, #3
   1a4c0:	strb	r1, [r0, #18]
   1a4c4:	ldr	r1, [sp, #48]	; 0x30
   1a4c8:	ldr	r0, [r1, #24]
   1a4cc:	mov	r1, #0
   1a4d0:	cmp	r2, r0
   1a4d4:	strb	r1, [r3]
   1a4d8:	ldrhi	r3, [sp, #48]	; 0x30
   1a4dc:	strhi	r2, [r3, #24]
   1a4e0:	b	1a46c <__assert_fail@plt+0x7e78>
   1a4e4:	mov	r0, #111	; 0x6f
   1a4e8:	strb	r0, [r7, r6]
   1a4ec:	ldr	r0, [sp, #48]	; 0x30
   1a4f0:	mov	r1, #1
   1a4f4:	add	r3, r3, #1
   1a4f8:	mov	r2, #3
   1a4fc:	strb	r1, [r0, #18]
   1a500:	b	1a4c4 <__assert_fail@plt+0x7ed0>
   1a504:	ldr	r0, [sp, #48]	; 0x30
   1a508:	mov	r1, #1
   1a50c:	mov	r2, #115	; 0x73
   1a510:	strb	r2, [r7, r6]
   1a514:	add	r3, r3, r1
   1a518:	strb	r1, [r0, #18]
   1a51c:	mov	r2, #4
   1a520:	b	1a4c4 <__assert_fail@plt+0x7ed0>
   1a524:	ldr	r0, [sp, #48]	; 0x30
   1a528:	mov	r1, #1
   1a52c:	mov	r2, #115	; 0x73
   1a530:	strb	r2, [r7, r6]
   1a534:	add	r3, r3, r1
   1a538:	strb	r1, [r0, #18]
   1a53c:	mov	r2, #2
   1a540:	b	1a4c4 <__assert_fail@plt+0x7ed0>
   1a544:	mov	r2, #115	; 0x73
   1a548:	strb	r2, [r7, r6]
   1a54c:	add	r3, r3, #1
   1a550:	mov	r2, #5
   1a554:	b	1a4c4 <__assert_fail@plt+0x7ed0>
   1a558:	mov	r2, #100	; 0x64
   1a55c:	add	r3, r3, #1
   1a560:	strb	r2, [r7, r6]
   1a564:	b	1a464 <__assert_fail@plt+0x7e70>
   1a568:	ldr	r0, [sp, #48]	; 0x30
   1a56c:	mov	r2, #1
   1a570:	mov	r1, #115	; 0x73
   1a574:	add	r3, r3, r2
   1a578:	strb	r2, [r0, #20]
   1a57c:	strb	r1, [r7, r6]
   1a580:	b	1a4c4 <__assert_fail@plt+0x7ed0>
   1a584:	ldr	r0, [sp, #48]	; 0x30
   1a588:	mov	r1, #1
   1a58c:	mov	r2, #115	; 0x73
   1a590:	strb	r2, [r7, r6]
   1a594:	add	r3, r3, r1
   1a598:	strb	r1, [r0, #19]
   1a59c:	mov	r2, #2
   1a5a0:	b	1a4c4 <__assert_fail@plt+0x7ed0>
   1a5a4:	mov	r1, #1
   1a5a8:	mov	r2, #103	; 0x67
   1a5ac:	b	1a4b0 <__assert_fail@plt+0x7ebc>
   1a5b0:	ldr	r3, [pc, #112]	; 1a628 <__assert_fail@plt+0x8034>
   1a5b4:	mov	r2, #79	; 0x4f
   1a5b8:	ldr	r1, [pc, #108]	; 1a62c <__assert_fail@plt+0x8038>
   1a5bc:	ldr	r0, [pc, #108]	; 1a630 <__assert_fail@plt+0x803c>
   1a5c0:	bl	125f4 <__assert_fail@plt>
   1a5c4:	ldr	r3, [pc, #92]	; 1a628 <__assert_fail@plt+0x8034>
   1a5c8:	mov	r2, #78	; 0x4e
   1a5cc:	ldr	r1, [pc, #88]	; 1a62c <__assert_fail@plt+0x8038>
   1a5d0:	ldr	r0, [pc, #92]	; 1a634 <__assert_fail@plt+0x8040>
   1a5d4:	bl	125f4 <__assert_fail@plt>
   1a5d8:	ldr	r3, [pc, #72]	; 1a628 <__assert_fail@plt+0x8034>
   1a5dc:	mov	r2, #80	; 0x50
   1a5e0:	ldr	r1, [pc, #68]	; 1a62c <__assert_fail@plt+0x8038>
   1a5e4:	ldr	r0, [pc, #76]	; 1a638 <__assert_fail@plt+0x8044>
   1a5e8:	bl	125f4 <__assert_fail@plt>
   1a5ec:	ldr	r3, [pc, #52]	; 1a628 <__assert_fail@plt+0x8034>
   1a5f0:	mov	r2, #105	; 0x69
   1a5f4:	ldr	r1, [pc, #48]	; 1a62c <__assert_fail@plt+0x8038>
   1a5f8:	ldr	r0, [pc, #60]	; 1a63c <__assert_fail@plt+0x8048>
   1a5fc:	bl	125f4 <__assert_fail@plt>
   1a600:	ldr	r3, [pc, #32]	; 1a628 <__assert_fail@plt+0x8034>
   1a604:	mov	r2, #97	; 0x61
   1a608:	ldr	r1, [pc, #28]	; 1a62c <__assert_fail@plt+0x8038>
   1a60c:	ldr	r0, [pc, #44]	; 1a640 <__assert_fail@plt+0x804c>
   1a610:	bl	125f4 <__assert_fail@plt>
   1a614:	ldr	r3, [pc, #12]	; 1a628 <__assert_fail@plt+0x8034>
   1a618:	mov	r2, #98	; 0x62
   1a61c:	ldr	r1, [pc, #8]	; 1a62c <__assert_fail@plt+0x8038>
   1a620:	ldr	r0, [pc, #28]	; 1a644 <__assert_fail@plt+0x8050>
   1a624:	bl	125f4 <__assert_fail@plt>
   1a628:	andeq	r2, r4, r4, ror r6
   1a62c:	andeq	r2, r4, r8, lsr #13
   1a630:	andeq	r2, r4, ip, lsr #17
   1a634:	muleq	r4, r8, r8
   1a638:	andeq	r2, r4, r0, asr #17
   1a63c:	andeq	r2, r4, r0, lsl #18
   1a640:	ldrdeq	r2, [r4], -r4
   1a644:	andeq	r2, r4, r8, ror #17
   1a648:	mov	r3, r1
   1a64c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a650:	mov	r4, r0
   1a654:	ldr	r1, [pc, #1180]	; 1aaf8 <__assert_fail@plt+0x8504>
   1a658:	mov	r0, r3
   1a65c:	sub	sp, sp, #20
   1a660:	mov	r8, r2
   1a664:	bl	17a78 <__assert_fail@plt+0x5484>
   1a668:	mov	ip, r4
   1a66c:	mov	r4, #1
   1a670:	mov	sl, r0
   1a674:	add	lr, r0, #40	; 0x28
   1a678:	ldm	ip!, {r0, r1, r2, r3}
   1a67c:	strb	r4, [sl, #17]
   1a680:	strb	r4, [sl, #16]
   1a684:	stmia	lr!, {r0, r1, r2, r3}
   1a688:	mov	r3, #0
   1a68c:	ldr	r2, [ip]
   1a690:	str	r2, [lr]
   1a694:	strb	r3, [sl, #19]
   1a698:	strb	r3, [sl, #18]
   1a69c:	str	r3, [sl, #24]
   1a6a0:	str	r3, [sl, #40]	; 0x28
   1a6a4:	ldrb	r3, [r8]
   1a6a8:	cmp	r3, #0
   1a6ac:	beq	1a860 <__assert_fail@plt+0x826c>
   1a6b0:	add	r9, sl, #40	; 0x28
   1a6b4:	ldr	r7, [pc, #1088]	; 1aafc <__assert_fail@plt+0x8508>
   1a6b8:	mov	r4, r8
   1a6bc:	b	1a6dc <__assert_fail@plt+0x80e8>
   1a6c0:	cmp	r3, #37	; 0x25
   1a6c4:	beq	1a758 <__assert_fail@plt+0x8164>
   1a6c8:	mov	r5, r4
   1a6cc:	add	r4, r4, #1
   1a6d0:	ldrb	r3, [r5, #1]
   1a6d4:	cmp	r3, #0
   1a6d8:	beq	1a858 <__assert_fail@plt+0x8264>
   1a6dc:	cmp	r3, #92	; 0x5c
   1a6e0:	bne	1a6c0 <__assert_fail@plt+0x80cc>
   1a6e4:	ldrb	r6, [r4, #1]
   1a6e8:	cmp	r6, #99	; 0x63
   1a6ec:	beq	1aa48 <__assert_fail@plt+0x8454>
   1a6f0:	cmp	r6, #0
   1a6f4:	beq	1a8ec <__assert_fail@plt+0x82f8>
   1a6f8:	sub	r3, r6, #48	; 0x30
   1a6fc:	uxtb	r2, r3
   1a700:	cmp	r2, #7
   1a704:	bhi	1a86c <__assert_fail@plt+0x8278>
   1a708:	uxtb	r3, r3
   1a70c:	mov	r5, #0
   1a710:	cmp	r3, #7
   1a714:	mov	r2, r5
   1a718:	add	ip, r4, #1
   1a71c:	add	r3, r5, #1
   1a720:	bhi	1a750 <__assert_fail@plt+0x815c>
   1a724:	add	r2, r6, r2, lsl #3
   1a728:	cmp	r3, #3
   1a72c:	sub	r2, r2, #48	; 0x30
   1a730:	beq	1a8ac <__assert_fail@plt+0x82b8>
   1a734:	ldrb	r6, [ip, #1]!
   1a738:	mov	r5, r3
   1a73c:	sub	r3, r6, #48	; 0x30
   1a740:	uxtb	r3, r3
   1a744:	cmp	r3, #7
   1a748:	add	r3, r5, #1
   1a74c:	bls	1a724 <__assert_fail@plt+0x8130>
   1a750:	add	r5, r4, r5
   1a754:	b	1a8b4 <__assert_fail@plt+0x82c0>
   1a758:	ldrb	r6, [r4, #1]
   1a75c:	cmp	r6, #0
   1a760:	beq	1aad4 <__assert_fail@plt+0x84e0>
   1a764:	cmp	r6, #37	; 0x25
   1a768:	beq	1a918 <__assert_fail@plt+0x8324>
   1a76c:	add	fp, r4, #1
   1a770:	mov	r5, #0
   1a774:	b	1a790 <__assert_fail@plt+0x819c>
   1a778:	mov	r1, r6
   1a77c:	mov	r0, r7
   1a780:	bl	1230c <strchr@plt>
   1a784:	cmp	r0, #0
   1a788:	beq	1a79c <__assert_fail@plt+0x81a8>
   1a78c:	ldrb	r6, [fp, #1]!
   1a790:	cmp	r6, #0
   1a794:	add	r5, r5, #1
   1a798:	bne	1a778 <__assert_fail@plt+0x8184>
   1a79c:	bl	122b8 <__ctype_b_loc@plt>
   1a7a0:	add	r2, r4, r5
   1a7a4:	ldr	r1, [r0]
   1a7a8:	b	1a7b4 <__assert_fail@plt+0x81c0>
   1a7ac:	ldrb	r6, [r2, #1]!
   1a7b0:	add	r5, r5, #1
   1a7b4:	lsl	r3, r6, #1
   1a7b8:	ldrh	r3, [r1, r3]
   1a7bc:	tst	r3, #2048	; 0x800
   1a7c0:	bne	1a7ac <__assert_fail@plt+0x81b8>
   1a7c4:	cmp	r6, #46	; 0x2e
   1a7c8:	addne	r5, r4, r5
   1a7cc:	beq	1a960 <__assert_fail@plt+0x836c>
   1a7d0:	mov	r1, r6
   1a7d4:	ldr	r0, [pc, #804]	; 1ab00 <__assert_fail@plt+0x850c>
   1a7d8:	bl	1230c <strchr@plt>
   1a7dc:	mov	r4, r6
   1a7e0:	cmp	r0, #0
   1a7e4:	beq	1a9c4 <__assert_fail@plt+0x83d0>
   1a7e8:	cmp	r6, #0
   1a7ec:	bne	1a92c <__assert_fail@plt+0x8338>
   1a7f0:	ldr	r3, [pc, #780]	; 1ab04 <__assert_fail@plt+0x8510>
   1a7f4:	cmp	r3, #0
   1a7f8:	bne	1aaa8 <__assert_fail@plt+0x84b4>
   1a7fc:	mov	r2, #5
   1a800:	ldr	r1, [pc, #768]	; 1ab08 <__assert_fail@plt+0x8514>
   1a804:	mov	r0, #0
   1a808:	bl	120b4 <dcgettext@plt>
   1a80c:	mov	r4, r5
   1a810:	mov	r1, #0
   1a814:	ldrb	r3, [r4], #1
   1a818:	mov	r2, r0
   1a81c:	mov	r0, r1
   1a820:	bl	121ec <error@plt>
   1a824:	mov	r3, #0
   1a828:	mov	r0, r9
   1a82c:	str	sl, [sp, #8]
   1a830:	sub	r2, r4, r8
   1a834:	mov	r1, r8
   1a838:	str	r3, [sp, #4]
   1a83c:	str	r3, [sp]
   1a840:	bl	1a268 <__assert_fail@plt+0x7c74>
   1a844:	mov	r9, r0
   1a848:	ldrb	r3, [r5, #1]
   1a84c:	mov	r8, r4
   1a850:	cmp	r3, #0
   1a854:	bne	1a6dc <__assert_fail@plt+0x80e8>
   1a858:	cmp	r8, r4
   1a85c:	bcc	1aa24 <__assert_fail@plt+0x8430>
   1a860:	mov	r0, #1
   1a864:	add	sp, sp, #20
   1a868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a86c:	sub	r6, r6, #92	; 0x5c
   1a870:	uxtb	r6, r6
   1a874:	cmp	r6, #26
   1a878:	bls	1a9a0 <__assert_fail@plt+0x83ac>
   1a87c:	mov	r2, #5
   1a880:	ldr	r1, [pc, #644]	; 1ab0c <__assert_fail@plt+0x8518>
   1a884:	mov	r0, #0
   1a888:	bl	120b4 <dcgettext@plt>
   1a88c:	mov	r5, r4
   1a890:	mov	r1, #0
   1a894:	ldrb	r3, [r5, #1]!
   1a898:	add	r4, r4, #2
   1a89c:	mov	r2, r0
   1a8a0:	mov	r0, r1
   1a8a4:	bl	121ec <error@plt>
   1a8a8:	b	1a6d0 <__assert_fail@plt+0x80dc>
   1a8ac:	mov	r5, ip
   1a8b0:	add	ip, r4, #4
   1a8b4:	strb	r2, [r4]
   1a8b8:	sub	r2, r4, r8
   1a8bc:	mov	r3, #0
   1a8c0:	mov	r1, r8
   1a8c4:	mov	r0, r9
   1a8c8:	add	r2, r2, #1
   1a8cc:	str	sl, [sp, #8]
   1a8d0:	str	r3, [sp, #4]
   1a8d4:	str	r3, [sp]
   1a8d8:	mov	r8, ip
   1a8dc:	bl	1a268 <__assert_fail@plt+0x7c74>
   1a8e0:	add	r4, r5, #1
   1a8e4:	mov	r9, r0
   1a8e8:	b	1a6d0 <__assert_fail@plt+0x80dc>
   1a8ec:	mov	r2, #5
   1a8f0:	ldr	r1, [pc, #536]	; 1ab10 <__assert_fail@plt+0x851c>
   1a8f4:	mov	r0, r6
   1a8f8:	bl	120b4 <dcgettext@plt>
   1a8fc:	mov	r1, r6
   1a900:	mov	r5, r4
   1a904:	mov	r2, r0
   1a908:	mov	r0, r6
   1a90c:	bl	121ec <error@plt>
   1a910:	add	ip, r4, #1
   1a914:	b	1a8b8 <__assert_fail@plt+0x82c4>
   1a918:	ldr	r2, [pc, #500]	; 1ab14 <__assert_fail@plt+0x8520>
   1a91c:	add	r5, r4, #1
   1a920:	cmp	r2, #0
   1a924:	moveq	r4, r3
   1a928:	beq	1aa94 <__assert_fail@plt+0x84a0>
   1a92c:	mov	fp, r5
   1a930:	mov	r3, #0
   1a934:	stmib	sp, {r3, sl}
   1a938:	sub	r2, r5, r8
   1a93c:	mov	r0, r9
   1a940:	str	r6, [sp]
   1a944:	mov	r1, r8
   1a948:	mov	r3, #2
   1a94c:	bl	1a268 <__assert_fail@plt+0x7c74>
   1a950:	add	r4, fp, #1
   1a954:	mov	r5, fp
   1a958:	mov	r9, r0
   1a95c:	b	1a848 <__assert_fail@plt+0x8254>
   1a960:	add	r3, r5, #1
   1a964:	add	r2, r4, r3
   1a968:	ldrb	r6, [r4, r3]
   1a96c:	lsl	r3, r6, #1
   1a970:	ldrh	r3, [r1, r3]
   1a974:	tst	r3, #2048	; 0x800
   1a978:	beq	1aacc <__assert_fail@plt+0x84d8>
   1a97c:	add	r5, r5, #2
   1a980:	add	r4, r4, r5
   1a984:	mov	r5, r4
   1a988:	ldrb	r6, [r4], #1
   1a98c:	lsl	r3, r6, #1
   1a990:	ldrh	r3, [r1, r3]
   1a994:	tst	r3, #2048	; 0x800
   1a998:	bne	1a984 <__assert_fail@plt+0x8390>
   1a99c:	b	1a7d0 <__assert_fail@plt+0x81dc>
   1a9a0:	ldr	r3, [pc, #368]	; 1ab18 <__assert_fail@plt+0x8524>
   1a9a4:	add	r6, r3, r6
   1a9a8:	ldrb	r3, [r6, #152]	; 0x98
   1a9ac:	cmp	r3, #0
   1a9b0:	beq	1a87c <__assert_fail@plt+0x8288>
   1a9b4:	mov	ip, r4
   1a9b8:	add	r5, r4, #1
   1a9bc:	strb	r3, [ip], #2
   1a9c0:	b	1a8b8 <__assert_fail@plt+0x82c4>
   1a9c4:	mov	r1, r6
   1a9c8:	ldr	r0, [pc, #332]	; 1ab1c <__assert_fail@plt+0x8528>
   1a9cc:	bl	1230c <strchr@plt>
   1a9d0:	cmp	r0, #0
   1a9d4:	beq	1aa94 <__assert_fail@plt+0x84a0>
   1a9d8:	ldrb	r3, [r5, #1]
   1a9dc:	add	r4, r5, #1
   1a9e0:	mov	fp, r4
   1a9e4:	cmp	r3, #0
   1a9e8:	bne	1a934 <__assert_fail@plt+0x8340>
   1a9ec:	mov	r1, r6
   1a9f0:	ldr	r0, [pc, #296]	; 1ab20 <__assert_fail@plt+0x852c>
   1a9f4:	bl	1230c <strchr@plt>
   1a9f8:	subs	r6, r0, #0
   1a9fc:	bne	1aaa8 <__assert_fail@plt+0x84b4>
   1aa00:	mov	r2, #5
   1aa04:	ldr	r1, [pc, #280]	; 1ab24 <__assert_fail@plt+0x8530>
   1aa08:	bl	120b4 <dcgettext@plt>
   1aa0c:	ldrb	r3, [r5]
   1aa10:	mov	r1, r6
   1aa14:	mov	r2, r0
   1aa18:	mov	r0, r6
   1aa1c:	bl	121ec <error@plt>
   1aa20:	b	1a824 <__assert_fail@plt+0x8230>
   1aa24:	stmib	sp, {r3, sl}
   1aa28:	str	r3, [sp]
   1aa2c:	sub	r2, r4, r8
   1aa30:	mov	r1, r8
   1aa34:	mov	r0, r9
   1aa38:	bl	1a268 <__assert_fail@plt+0x7c74>
   1aa3c:	mov	r0, #1
   1aa40:	add	sp, sp, #20
   1aa44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa48:	mov	r3, #0
   1aa4c:	str	r3, [sp, #4]
   1aa50:	str	r3, [sp]
   1aa54:	str	sl, [sp, #8]
   1aa58:	mov	r3, #1
   1aa5c:	sub	r2, r4, r8
   1aa60:	mov	r1, r8
   1aa64:	mov	r0, r9
   1aa68:	bl	1a268 <__assert_fail@plt+0x7c74>
   1aa6c:	ldrb	r3, [sl, #18]
   1aa70:	cmp	r3, #0
   1aa74:	beq	1a860 <__assert_fail@plt+0x826c>
   1aa78:	ldr	r3, [sl, #24]
   1aa7c:	mov	r0, #1
   1aa80:	cmp	r3, #2
   1aa84:	movls	r3, #3
   1aa88:	strls	r3, [sl, #24]
   1aa8c:	add	sp, sp, #20
   1aa90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa94:	mov	r1, r4
   1aa98:	ldr	r0, [pc, #128]	; 1ab20 <__assert_fail@plt+0x852c>
   1aa9c:	bl	1230c <strchr@plt>
   1aaa0:	cmp	r0, #0
   1aaa4:	beq	1a7fc <__assert_fail@plt+0x8208>
   1aaa8:	mov	r2, #5
   1aaac:	ldr	r1, [pc, #116]	; 1ab28 <__assert_fail@plt+0x8534>
   1aab0:	mov	r0, #0
   1aab4:	bl	120b4 <dcgettext@plt>
   1aab8:	ldrb	r3, [r5]
   1aabc:	mov	r1, #0
   1aac0:	mov	r2, r0
   1aac4:	mov	r0, #1
   1aac8:	bl	121ec <error@plt>
   1aacc:	mov	r5, r2
   1aad0:	b	1a7d0 <__assert_fail@plt+0x81dc>
   1aad4:	mov	r2, #5
   1aad8:	ldr	r1, [pc, #76]	; 1ab2c <__assert_fail@plt+0x8538>
   1aadc:	mov	r0, r6
   1aae0:	bl	120b4 <dcgettext@plt>
   1aae4:	mov	r3, r4
   1aae8:	mov	r1, r6
   1aaec:	mov	r2, r0
   1aaf0:	mov	r0, #1
   1aaf4:	bl	121ec <error@plt>
   1aaf8:	andeq	sl, r1, r4, ror #1
   1aafc:	andeq	r2, r4, r8, lsl #19
   1ab00:	andeq	r2, r4, r8, ror #18
   1ab04:	muleq	r4, fp, r9
   1ab08:	andeq	r2, r4, r8, lsr #20
   1ab0c:	andeq	r2, r4, r4, asr #18
   1ab10:	andeq	r2, r4, r4, lsl r9
   1ab14:	andeq	r2, r4, r3, lsl #19
   1ab18:	andeq	r2, r4, ip, ror #11
   1ab1c:	muleq	r4, r0, r9
   1ab20:	muleq	r4, r8, r9
   1ab24:	ldrdeq	r2, [r4], -ip
   1ab28:	muleq	r4, ip, r9
   1ab2c:	andeq	r2, r4, r0, ror r8
   1ab30:	push	{r4, r5, r6, lr}
   1ab34:	mov	r6, r0
   1ab38:	ldr	r5, [pc, #64]	; 1ab80 <__assert_fail@plt+0x858c>
   1ab3c:	ldr	r0, [r5]
   1ab40:	cmp	r0, #0
   1ab44:	beq	1ab6c <__assert_fail@plt+0x8578>
   1ab48:	ldrb	r3, [r5, #4]
   1ab4c:	eor	r3, r3, #1
   1ab50:	tst	r6, r3
   1ab54:	popeq	{r4, r5, r6, pc}
   1ab58:	ldr	r4, [r0, #28]
   1ab5c:	bl	2ff60 <__assert_fail@plt+0x1d96c>
   1ab60:	subs	r0, r4, #0
   1ab64:	bne	1ab58 <__assert_fail@plt+0x8564>
   1ab68:	str	r0, [r5]
   1ab6c:	mov	r0, r6
   1ab70:	bl	2ffa0 <__assert_fail@plt+0x1d9ac>
   1ab74:	strb	r6, [r5, #4]
   1ab78:	str	r0, [r5]
   1ab7c:	pop	{r4, r5, r6, pc}
   1ab80:			; <UNDEFINED> instruction: 0x00057cb8
   1ab84:	push	{r4, r5, lr}
   1ab88:	sub	sp, sp, #108	; 0x6c
   1ab8c:	mov	r4, r0
   1ab90:	mov	r0, sp
   1ab94:	mov	r5, r1
   1ab98:	bl	17d40 <__assert_fail@plt+0x574c>
   1ab9c:	ldr	r3, [pc, #44]	; 1abd0 <__assert_fail@plt+0x85dc>
   1aba0:	mov	r1, sp
   1aba4:	ldr	r0, [r4]
   1aba8:	ldr	r3, [r3, #52]	; 0x34
   1abac:	blx	r3
   1abb0:	cmp	r0, #0
   1abb4:	bne	1abc8 <__assert_fail@plt+0x85d4>
   1abb8:	ldrd	r2, [sp]
   1abbc:	strd	r2, [r5]
   1abc0:	add	sp, sp, #108	; 0x6c
   1abc4:	pop	{r4, r5, pc}
   1abc8:	mvn	r0, #0
   1abcc:	b	1abc0 <__assert_fail@plt+0x85cc>
   1abd0:	andeq	r7, r5, ip, ror #28
   1abd4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1abd8:	mov	r5, r0
   1abdc:	ldr	r4, [pc, #268]	; 1acf0 <__assert_fail@plt+0x86fc>
   1abe0:	ldr	r0, [r4, #8]
   1abe4:	cmp	r0, #0
   1abe8:	beq	1ac10 <__assert_fail@plt+0x861c>
   1abec:	ldrb	r3, [r4, #12]
   1abf0:	cmp	r3, #0
   1abf4:	beq	1ac0c <__assert_fail@plt+0x8618>
   1abf8:	ldrd	r6, [r5]
   1abfc:	ldrd	r2, [r4, #16]
   1ac00:	cmp	r7, r3
   1ac04:	cmpeq	r6, r2
   1ac08:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac0c:	bl	2db68 <__assert_fail@plt+0x1b574>
   1ac10:	ldrd	r2, [r5]
   1ac14:	mov	r0, #1
   1ac18:	strd	r2, [r4, #16]
   1ac1c:	bl	1ab30 <__assert_fail@plt+0x853c>
   1ac20:	subs	r8, r0, #0
   1ac24:	beq	1acd4 <__assert_fail@plt+0x86e0>
   1ac28:	ldr	r6, [pc, #196]	; 1acf4 <__assert_fail@plt+0x8700>
   1ac2c:	mov	r7, #0
   1ac30:	mvn	sl, #0
   1ac34:	mvn	fp, #0
   1ac38:	mov	r1, r6
   1ac3c:	ldr	r0, [r8, #12]
   1ac40:	bl	11f40 <strcmp@plt>
   1ac44:	cmp	r0, #0
   1ac48:	beq	1ac6c <__assert_fail@plt+0x8678>
   1ac4c:	ldrd	r0, [r8, #16]
   1ac50:	cmp	r1, fp
   1ac54:	cmpeq	r0, sl
   1ac58:	beq	1ac98 <__assert_fail@plt+0x86a4>
   1ac5c:	ldrd	r2, [r5]
   1ac60:	cmp	r3, r1
   1ac64:	cmpeq	r2, r0
   1ac68:	moveq	r7, r8
   1ac6c:	ldr	r8, [r8, #28]
   1ac70:	cmp	r8, #0
   1ac74:	bne	1ac38 <__assert_fail@plt+0x8644>
   1ac78:	cmp	r7, #0
   1ac7c:	beq	1acb4 <__assert_fail@plt+0x86c0>
   1ac80:	ldr	r0, [r7, #12]
   1ac84:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   1ac88:	mov	r3, #1
   1ac8c:	strb	r3, [r4, #12]
   1ac90:	str	r0, [r4, #8]
   1ac94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac98:	add	r1, r8, #16
   1ac9c:	add	r0, r8, #4
   1aca0:	bl	1ab84 <__assert_fail@plt+0x8590>
   1aca4:	cmp	r0, #0
   1aca8:	bne	1ac6c <__assert_fail@plt+0x8678>
   1acac:	ldrd	r0, [r8, #16]
   1acb0:	b	1ac5c <__assert_fail@plt+0x8668>
   1acb4:	mov	r2, #5
   1acb8:	ldr	r1, [pc, #56]	; 1acf8 <__assert_fail@plt+0x8704>
   1acbc:	mov	r0, r7
   1acc0:	strb	r7, [r4, #12]
   1acc4:	bl	120b4 <dcgettext@plt>
   1acc8:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   1accc:	str	r0, [r4, #8]
   1acd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1acd4:	mov	r2, #5
   1acd8:	ldr	r1, [pc, #28]	; 1acfc <__assert_fail@plt+0x8708>
   1acdc:	bl	120b4 <dcgettext@plt>
   1ace0:	mov	r1, r8
   1ace4:	mov	r2, r0
   1ace8:	mov	r0, #1
   1acec:	bl	121ec <error@plt>
   1acf0:			; <UNDEFINED> instruction: 0x00057cb8
   1acf4:	andeq	r2, r4, ip, asr #21
   1acf8:	strdeq	r1, [r4], -r0
   1acfc:	andeq	r2, r4, r4, lsr #21
   1ad00:	push	{r4, r5, r6, lr}
   1ad04:	mov	r1, r0
   1ad08:	mov	r5, r0
   1ad0c:	ldr	r0, [pc, #72]	; 1ad5c <__assert_fail@plt+0x8768>
   1ad10:	bl	11f40 <strcmp@plt>
   1ad14:	cmp	r0, #0
   1ad18:	bne	1ad24 <__assert_fail@plt+0x8730>
   1ad1c:	mov	r0, #1
   1ad20:	pop	{r4, r5, r6, pc}
   1ad24:	mov	r0, #0
   1ad28:	bl	1ab30 <__assert_fail@plt+0x853c>
   1ad2c:	subs	r4, r0, #0
   1ad30:	beq	1ad1c <__assert_fail@plt+0x8728>
   1ad34:	ldr	r1, [r4, #12]
   1ad38:	mov	r0, r5
   1ad3c:	bl	11f40 <strcmp@plt>
   1ad40:	cmp	r0, #0
   1ad44:	beq	1ad1c <__assert_fail@plt+0x8728>
   1ad48:	ldr	r4, [r4, #28]
   1ad4c:	cmp	r4, #0
   1ad50:	bne	1ad34 <__assert_fail@plt+0x8740>
   1ad54:	mov	r0, r4
   1ad58:	pop	{r4, r5, r6, pc}
   1ad5c:	ldrdeq	r2, [r4], -r4
   1ad60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad64:	mov	r9, #0
   1ad68:	sub	sp, sp, #12
   1ad6c:	mov	r7, r0
   1ad70:	mov	r0, r9
   1ad74:	str	r9, [sp, #4]
   1ad78:	bl	2ffa0 <__assert_fail@plt+0x1d9ac>
   1ad7c:	subs	r8, r0, #0
   1ad80:	beq	1ae3c <__assert_fail@plt+0x8848>
   1ad84:	mov	sl, r9
   1ad88:	mov	r4, r8
   1ad8c:	b	1ada8 <__assert_fail@plt+0x87b4>
   1ad90:	add	r5, fp, r5
   1ad94:	mov	sl, r6
   1ad98:	strd	r2, [r5, #-8]
   1ad9c:	ldr	r4, [r4, #28]
   1ada0:	cmp	r4, #0
   1ada4:	beq	1ae04 <__assert_fail@plt+0x8810>
   1ada8:	add	r6, sl, #1
   1adac:	add	r2, sp, #4
   1adb0:	lsl	r5, r6, #3
   1adb4:	mov	r1, r5
   1adb8:	mov	r0, r9
   1adbc:	bl	1f7a8 <__assert_fail@plt+0xd1b4>
   1adc0:	subs	fp, r0, #0
   1adc4:	beq	1ae2c <__assert_fail@plt+0x8838>
   1adc8:	ldrd	r2, [r4, #16]
   1adcc:	mvn	r1, #0
   1add0:	mvn	r0, #0
   1add4:	cmp	r3, r1
   1add8:	cmpeq	r2, r0
   1addc:	mov	r9, fp
   1ade0:	bne	1ad90 <__assert_fail@plt+0x879c>
   1ade4:	add	r1, r4, #16
   1ade8:	add	r0, r4, #4
   1adec:	bl	1ab84 <__assert_fail@plt+0x8590>
   1adf0:	cmp	r0, #0
   1adf4:	movne	r9, fp
   1adf8:	bne	1ad9c <__assert_fail@plt+0x87a8>
   1adfc:	ldrd	r2, [r4, #16]
   1ae00:	b	1ad90 <__assert_fail@plt+0x879c>
   1ae04:	mov	r0, r8
   1ae08:	ldr	r4, [r0, #28]
   1ae0c:	bl	2ff60 <__assert_fail@plt+0x1d96c>
   1ae10:	subs	r0, r4, #0
   1ae14:	bne	1ae08 <__assert_fail@plt+0x8814>
   1ae18:	cmp	fp, #0
   1ae1c:	strne	sl, [r7]
   1ae20:	mov	r0, r9
   1ae24:	add	sp, sp, #12
   1ae28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae2c:	mov	r0, r9
   1ae30:	bl	2db68 <__assert_fail@plt+0x1b574>
   1ae34:	mov	r9, #0
   1ae38:	b	1ad9c <__assert_fail@plt+0x87a8>
   1ae3c:	mov	r9, r8
   1ae40:	b	1ae20 <__assert_fail@plt+0x882c>
   1ae44:	andeq	r0, r0, r0
   1ae48:	subs	r0, r1, #0
   1ae4c:	bxeq	lr
   1ae50:	ldr	r3, [r2]
   1ae54:	ldr	r1, [r0, r3, lsl #2]
   1ae58:	cmp	r1, #0
   1ae5c:	addne	r3, r3, #1
   1ae60:	ldrne	ip, [pc, #16]	; 1ae78 <__assert_fail@plt+0x8884>
   1ae64:	strne	r3, [r2]
   1ae68:	movne	r0, #1
   1ae6c:	strne	r1, [ip, #76]	; 0x4c
   1ae70:	moveq	r0, r1
   1ae74:	bx	lr
   1ae78:	andeq	r7, r5, ip, ror #28
   1ae7c:	b	2b728 <__assert_fail@plt+0x19134>
   1ae80:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae84:	sub	sp, sp, #12
   1ae88:	ldr	r0, [pc, #188]	; 1af4c <__assert_fail@plt+0x8958>
   1ae8c:	bl	1fdec <__assert_fail@plt+0xd7f8>
   1ae90:	ldr	r4, [pc, #184]	; 1af50 <__assert_fail@plt+0x895c>
   1ae94:	mov	r2, #5
   1ae98:	ldr	r1, [pc, #180]	; 1af54 <__assert_fail@plt+0x8960>
   1ae9c:	mov	r0, #0
   1aea0:	bl	120b4 <dcgettext@plt>
   1aea4:	bl	11f64 <printf@plt>
   1aea8:	ldr	r0, [pc, #168]	; 1af58 <__assert_fail@plt+0x8964>
   1aeac:	bl	11f64 <printf@plt>
   1aeb0:	ldrb	r1, [r4, #56]	; 0x38
   1aeb4:	ldr	r2, [pc, #160]	; 1af5c <__assert_fail@plt+0x8968>
   1aeb8:	ldr	r3, [pc, #160]	; 1af60 <__assert_fail@plt+0x896c>
   1aebc:	cmp	r1, #0
   1aec0:	movne	r1, r2
   1aec4:	moveq	r1, r3
   1aec8:	ldr	r0, [pc, #148]	; 1af64 <__assert_fail@plt+0x8970>
   1aecc:	bl	11f64 <printf@plt>
   1aed0:	ldr	r0, [pc, #144]	; 1af68 <__assert_fail@plt+0x8974>
   1aed4:	bl	11f64 <printf@plt>
   1aed8:	bl	11f28 <is_selinux_enabled@plt>
   1aedc:	cmp	r0, #0
   1aee0:	ble	1aeec <__assert_fail@plt+0x88f8>
   1aee4:	ldr	r0, [pc, #128]	; 1af6c <__assert_fail@plt+0x8978>
   1aee8:	bl	11f64 <printf@plt>
   1aeec:	add	r0, sp, #8
   1aef0:	mov	r3, #0
   1aef4:	str	r3, [r0, #-4]!
   1aef8:	bl	1368c <__assert_fail@plt+0x1098>
   1aefc:	cmp	r0, #0
   1af00:	bne	1af20 <__assert_fail@plt+0x892c>
   1af04:	ldrh	r1, [r4, #68]	; 0x44
   1af08:	ldr	r0, [pc, #96]	; 1af70 <__assert_fail@plt+0x897c>
   1af0c:	bl	11f64 <printf@plt>
   1af10:	mov	r0, #10
   1af14:	bl	12384 <putchar@plt>
   1af18:	mov	r0, #0
   1af1c:	bl	122d0 <exit@plt>
   1af20:	ldr	r0, [pc, #76]	; 1af74 <__assert_fail@plt+0x8980>
   1af24:	bl	11f64 <printf@plt>
   1af28:	ldr	r3, [sp, #4]
   1af2c:	tst	r3, #512	; 0x200
   1af30:	bne	1af40 <__assert_fail@plt+0x894c>
   1af34:	ldr	r0, [pc, #60]	; 1af78 <__assert_fail@plt+0x8984>
   1af38:	bl	11f64 <printf@plt>
   1af3c:	b	1af04 <__assert_fail@plt+0x8910>
   1af40:	ldr	r0, [pc, #52]	; 1af7c <__assert_fail@plt+0x8988>
   1af44:	bl	11f64 <printf@plt>
   1af48:	b	1af34 <__assert_fail@plt+0x8940>
   1af4c:	andeq	r0, r4, ip, lsr r6
   1af50:	andeq	r7, r5, ip, ror #28
   1af54:	strheq	r3, [r4], -r4
   1af58:	andeq	r3, r4, r8, asr #1
   1af5c:	andeq	r3, r4, r0, lsr #1
   1af60:	andeq	r3, r4, r8, lsr #1
   1af64:	ldrdeq	r3, [r4], -r0
   1af68:	andeq	r3, r4, r0, ror #1
   1af6c:	strdeq	r3, [r4], -r4
   1af70:	andeq	r3, r4, r4, lsl r1
   1af74:	andeq	r3, r4, r0, lsl #2
   1af78:	andeq	r3, r4, r0, lsr #2
   1af7c:	andeq	r3, r4, r8, lsl #2
   1af80:	push	{r4, lr}
   1af84:	mov	r0, #0
   1af88:	bl	17b0c <__assert_fail@plt+0x5518>
   1af8c:	push	{r4, lr}
   1af90:	bl	17b04 <__assert_fail@plt+0x5510>
   1af94:	mov	r3, #0
   1af98:	mov	r2, #1065353216	; 0x3f800000
   1af9c:	strb	r3, [r0, #19]
   1afa0:	strb	r3, [r0, #18]
   1afa4:	str	r2, [r0, #28]
   1afa8:	mov	r0, #1
   1afac:	pop	{r4, pc}
   1afb0:	push	{r4, lr}
   1afb4:	bl	17b04 <__assert_fail@plt+0x5510>
   1afb8:	mov	r2, #0
   1afbc:	mov	r1, #1065353216	; 0x3f800000
   1afc0:	mov	r3, r0
   1afc4:	mov	r0, #1
   1afc8:	strb	r2, [r3, #19]
   1afcc:	str	r1, [r3, #28]
   1afd0:	strb	r2, [r3, #18]
   1afd4:	strb	r2, [r3, #17]
   1afd8:	strb	r0, [r3, #16]
   1afdc:	pop	{r4, pc}
   1afe0:	push	{r4, lr}
   1afe4:	bl	17b04 <__assert_fail@plt+0x5510>
   1afe8:	ldr	r2, [pc, #36]	; 1b014 <__assert_fail@plt+0x8a20>
   1afec:	ldrb	r2, [r2]
   1aff0:	cmp	r2, #0
   1aff4:	mov	r3, r0
   1aff8:	strbeq	r2, [r0, #19]
   1affc:	strbeq	r2, [r0, #18]
   1b000:	mov	r0, #1
   1b004:	mov	r2, #0
   1b008:	strb	r0, [r3, #16]
   1b00c:	strb	r2, [r3, #17]
   1b010:	pop	{r4, pc}
   1b014:	andeq	r7, r5, ip, ror #28
   1b018:	push	{r4, lr}
   1b01c:	bl	17b04 <__assert_fail@plt+0x5510>
   1b020:	ldr	r3, [pc, #8]	; 1b030 <__assert_fail@plt+0x8a3c>
   1b024:	str	r3, [r0, #28]
   1b028:	mov	r0, #1
   1b02c:	pop	{r4, pc}
   1b030:	bcc	fe0df9f4 <stdout@@GLIBC_2.4+0xfe0884a0>
   1b034:	push	{r4, lr}
   1b038:	bl	17b04 <__assert_fail@plt+0x5510>
   1b03c:	ldr	r2, [pc, #44]	; 1b070 <__assert_fail@plt+0x8a7c>
   1b040:	mov	r3, #0
   1b044:	ldr	r1, [r0]
   1b048:	strb	r3, [r0, #19]
   1b04c:	cmp	r1, r2
   1b050:	strb	r3, [r0, #18]
   1b054:	strb	r3, [r0, #17]
   1b058:	strb	r3, [r0, #16]
   1b05c:	ldreq	r3, [pc, #16]	; 1b074 <__assert_fail@plt+0x8a80>
   1b060:	ldrne	r3, [pc, #16]	; 1b078 <__assert_fail@plt+0x8a84>
   1b064:	str	r3, [r0, #28]
   1b068:	mov	r0, #1
   1b06c:	pop	{r4, pc}
   1b070:	andeq	r4, r1, r4, lsl r5
   1b074:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b078:	svccc	0x00666666
   1b07c:	push	{r4, lr}
   1b080:	bl	17b04 <__assert_fail@plt+0x5510>
   1b084:	ldr	r3, [pc, #8]	; 1b094 <__assert_fail@plt+0x8aa0>
   1b088:	str	r3, [r0, #28]
   1b08c:	mov	r0, #1
   1b090:	pop	{r4, pc}
   1b094:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b098:	push	{r4, lr}
   1b09c:	bl	17b04 <__assert_fail@plt+0x5510>
   1b0a0:	ldr	r1, [pc, #40]	; 1b0d0 <__assert_fail@plt+0x8adc>
   1b0a4:	mov	r2, #0
   1b0a8:	mov	ip, #1065353216	; 0x3f800000
   1b0ac:	strb	r2, [r1]
   1b0b0:	mov	r3, r0
   1b0b4:	mov	r0, #1
   1b0b8:	str	ip, [r3, #28]
   1b0bc:	strb	r0, [r3, #17]
   1b0c0:	strb	r0, [r3, #16]
   1b0c4:	strb	r2, [r3, #19]
   1b0c8:	strb	r2, [r3, #18]
   1b0cc:	pop	{r4, pc}
   1b0d0:	andeq	r7, r5, ip, ror #28
   1b0d4:	push	{r4, r5, r6, r7, r8, lr}
   1b0d8:	sub	sp, sp, #8
   1b0dc:	ldr	r5, [pc, #780]	; 1b3f0 <__assert_fail@plt+0x8dfc>
   1b0e0:	ldr	ip, [pc, #780]	; 1b3f4 <__assert_fail@plt+0x8e00>
   1b0e4:	cmp	r3, r5
   1b0e8:	ldr	r6, [pc, #776]	; 1b3f8 <__assert_fail@plt+0x8e04>
   1b0ec:	moveq	r6, ip
   1b0f0:	subs	r4, r0, #0
   1b0f4:	beq	1b298 <__assert_fail@plt+0x8ca4>
   1b0f8:	ldr	ip, [r1]
   1b0fc:	ldr	r4, [r4, ip, lsl #2]
   1b100:	cmp	r4, #0
   1b104:	beq	1b298 <__assert_fail@plt+0x8ca4>
   1b108:	add	ip, ip, #1
   1b10c:	str	ip, [r1]
   1b110:	ldrb	r8, [r4]
   1b114:	mov	r0, r2
   1b118:	mov	r7, r3
   1b11c:	cmp	r8, #0
   1b120:	beq	1b3b0 <__assert_fail@plt+0x8dbc>
   1b124:	mov	r1, r3
   1b128:	mov	r2, r4
   1b12c:	bl	17a78 <__assert_fail@plt+0x5484>
   1b130:	mov	r3, #0
   1b134:	cmp	r7, r5
   1b138:	str	r3, [r0, #28]
   1b13c:	beq	1b360 <__assert_fail@plt+0x8d6c>
   1b140:	mov	r2, #0
   1b144:	mov	r3, #1
   1b148:	strb	r2, [r0, #18]
   1b14c:	strb	r3, [r0, #19]
   1b150:	ldrb	r5, [r4]
   1b154:	mov	r7, r4
   1b158:	cmp	r5, #0
   1b15c:	beq	1b374 <__assert_fail@plt+0x8d80>
   1b160:	vldr	s7, [pc, #620]	; 1b3d4 <__assert_fail@plt+0x8de0>
   1b164:	vldr	s8, [pc, #620]	; 1b3d8 <__assert_fail@plt+0x8de4>
   1b168:	vldr	s9, [pc, #620]	; 1b3dc <__assert_fail@plt+0x8de8>
   1b16c:	vldr	s10, [pc, #620]	; 1b3e0 <__assert_fail@plt+0x8dec>
   1b170:	vldr	s11, [pc, #620]	; 1b3e4 <__assert_fail@plt+0x8df0>
   1b174:	vldr	s12, [pc, #620]	; 1b3e8 <__assert_fail@plt+0x8df4>
   1b178:	vldr	s13, [pc, #620]	; 1b3ec <__assert_fail@plt+0x8df8>
   1b17c:	mov	r8, #2
   1b180:	mov	lr, #3
   1b184:	mov	ip, #4
   1b188:	mov	r1, #5
   1b18c:	mov	r2, #6
   1b190:	sub	r3, r5, #68	; 0x44
   1b194:	cmp	r3, #47	; 0x2f
   1b198:	ldrls	pc, [pc, r3, lsl #2]
   1b19c:	b	1b318 <__assert_fail@plt+0x8d24>
   1b1a0:			; <UNDEFINED> instruction: 0x0001b2bc
   1b1a4:	andeq	fp, r1, r8, lsl r3
   1b1a8:	andeq	fp, r1, r8, lsl r3
   1b1ac:	andeq	fp, r1, r8, lsl r3
   1b1b0:	andeq	fp, r1, r8, lsl r3
   1b1b4:	andeq	fp, r1, r8, lsl r3
   1b1b8:	andeq	fp, r1, r8, lsl r3
   1b1bc:	andeq	fp, r1, r8, lsl r3
   1b1c0:	andeq	fp, r1, r8, lsl r3
   1b1c4:	andeq	fp, r1, r8, lsl r3
   1b1c8:	andeq	fp, r1, r8, lsl r3
   1b1cc:	andeq	fp, r1, r8, lsl r3
   1b1d0:	andeq	fp, r1, r8, lsl r3
   1b1d4:	andeq	fp, r1, r8, lsl r3
   1b1d8:	andeq	fp, r1, r8, lsl r3
   1b1dc:	andeq	fp, r1, r8, lsl r3
   1b1e0:	andeq	fp, r1, r8, lsl r3
   1b1e4:	andeq	fp, r1, r8, lsl r3
   1b1e8:	andeq	fp, r1, r8, lsl r3
   1b1ec:	andeq	fp, r1, r8, lsl r3
   1b1f0:	andeq	fp, r1, r8, lsl r3
   1b1f4:	andeq	fp, r1, r8, lsl r3
   1b1f8:	andeq	fp, r1, r8, lsl r3
   1b1fc:	andeq	fp, r1, r8, lsl r3
   1b200:	andeq	fp, r1, r8, lsl r3
   1b204:	andeq	fp, r1, r8, lsl r3
   1b208:	andeq	fp, r1, r8, lsl r3
   1b20c:	andeq	fp, r1, r8, lsl r3
   1b210:	andeq	fp, r1, r8, lsl r3
   1b214:	andeq	fp, r1, r8, lsl r3
   1b218:			; <UNDEFINED> instruction: 0x0001b2b0
   1b21c:	andeq	fp, r1, r0, ror #4
   1b220:	andeq	fp, r1, ip, lsl #6
   1b224:	andeq	fp, r1, r8, lsl r3
   1b228:	andeq	fp, r1, r0, lsl #6
   1b22c:	andeq	fp, r1, r8, lsl r3
   1b230:	andeq	fp, r1, r8, lsl r3
   1b234:	andeq	fp, r1, r8, lsl r3
   1b238:	andeq	fp, r1, r8, lsl r3
   1b23c:	andeq	fp, r1, r8, lsl r3
   1b240:	strdeq	fp, [r1], -r4
   1b244:	andeq	fp, r1, r8, lsl r3
   1b248:	andeq	fp, r1, r8, lsl r3
   1b24c:	andeq	fp, r1, r8, lsl r3
   1b250:	andeq	fp, r1, r8, ror #5
   1b254:	andeq	fp, r1, r8, lsl r3
   1b258:	andeq	fp, r1, r8, lsl r3
   1b25c:	andeq	fp, r1, r4, lsr #5
   1b260:	vmov.f32	s14, s13
   1b264:	mov	r3, #1
   1b268:	add	r3, r0, r3
   1b26c:	ldrb	r5, [r3, #40]	; 0x28
   1b270:	cmp	r5, #0
   1b274:	bne	1b37c <__assert_fail@plt+0x8d88>
   1b278:	vldr	s15, [r0, #28]
   1b27c:	mov	r4, #1
   1b280:	vadd.f32	s15, s15, s14
   1b284:	vstr	s15, [r0, #28]
   1b288:	strb	r4, [r3, #40]	; 0x28
   1b28c:	ldrb	r3, [r7, #1]
   1b290:	cmp	r3, #0
   1b294:	bne	1b324 <__assert_fail@plt+0x8d30>
   1b298:	mov	r0, r4
   1b29c:	add	sp, sp, #8
   1b2a0:	pop	{r4, r5, r6, r7, r8, pc}
   1b2a4:	vmov.f32	s14, s11
   1b2a8:	mov	r3, r2
   1b2ac:	b	1b268 <__assert_fail@plt+0x8c74>
   1b2b0:	vmov.f32	s14, s12
   1b2b4:	mov	r3, #0
   1b2b8:	b	1b268 <__assert_fail@plt+0x8c74>
   1b2bc:	ldr	r1, [pc, #312]	; 1b3fc <__assert_fail@plt+0x8e08>
   1b2c0:	mov	r2, #5
   1b2c4:	mov	r0, #0
   1b2c8:	bl	120b4 <dcgettext@plt>
   1b2cc:	ldrb	r2, [r7]
   1b2d0:	mov	r3, r6
   1b2d4:	mov	r1, #0
   1b2d8:	str	r2, [sp]
   1b2dc:	mov	r2, r0
   1b2e0:	mov	r0, #1
   1b2e4:	bl	121ec <error@plt>
   1b2e8:	vmov.f32	s14, s10
   1b2ec:	mov	r3, r1
   1b2f0:	b	1b268 <__assert_fail@plt+0x8c74>
   1b2f4:	vmov.f32	s14, s9
   1b2f8:	mov	r3, ip
   1b2fc:	b	1b268 <__assert_fail@plt+0x8c74>
   1b300:	vmov.f32	s14, s8
   1b304:	mov	r3, lr
   1b308:	b	1b268 <__assert_fail@plt+0x8c74>
   1b30c:	vmov.f32	s14, s7
   1b310:	mov	r3, r8
   1b314:	b	1b268 <__assert_fail@plt+0x8c74>
   1b318:	mov	r2, #5
   1b31c:	ldr	r1, [pc, #220]	; 1b400 <__assert_fail@plt+0x8e0c>
   1b320:	b	1b2c4 <__assert_fail@plt+0x8cd0>
   1b324:	cmp	r3, #44	; 0x2c
   1b328:	bne	1b3a4 <__assert_fail@plt+0x8db0>
   1b32c:	ldrb	r5, [r7, #2]
   1b330:	add	r7, r7, #2
   1b334:	cmp	r5, #0
   1b338:	bne	1b190 <__assert_fail@plt+0x8b9c>
   1b33c:	ldr	r1, [pc, #192]	; 1b404 <__assert_fail@plt+0x8e10>
   1b340:	mov	r2, #5
   1b344:	mov	r0, r5
   1b348:	bl	120b4 <dcgettext@plt>
   1b34c:	mov	r3, r6
   1b350:	mov	r1, r5
   1b354:	mov	r2, r0
   1b358:	mov	r0, r4
   1b35c:	bl	121ec <error@plt>
   1b360:	mov	r2, #1
   1b364:	mov	r3, #0
   1b368:	strb	r2, [r0, #18]
   1b36c:	strb	r3, [r0, #19]
   1b370:	b	1b150 <__assert_fail@plt+0x8b5c>
   1b374:	mov	r4, #1
   1b378:	b	1b298 <__assert_fail@plt+0x8ca4>
   1b37c:	mov	r2, #5
   1b380:	ldr	r1, [pc, #128]	; 1b408 <__assert_fail@plt+0x8e14>
   1b384:	mov	r0, #0
   1b388:	bl	120b4 <dcgettext@plt>
   1b38c:	ldrb	r3, [r7]
   1b390:	mov	r1, #0
   1b394:	str	r6, [sp]
   1b398:	mov	r2, r0
   1b39c:	mov	r0, #1
   1b3a0:	bl	121ec <error@plt>
   1b3a4:	mov	r2, #5
   1b3a8:	ldr	r1, [pc, #92]	; 1b40c <__assert_fail@plt+0x8e18>
   1b3ac:	b	1b344 <__assert_fail@plt+0x8d50>
   1b3b0:	mov	r2, #5
   1b3b4:	ldr	r1, [pc, #84]	; 1b410 <__assert_fail@plt+0x8e1c>
   1b3b8:	mov	r0, r8
   1b3bc:	bl	120b4 <dcgettext@plt>
   1b3c0:	mov	r3, r6
   1b3c4:	mov	r1, r8
   1b3c8:	mov	r2, r0
   1b3cc:	mov	r0, #1
   1b3d0:	bl	121ec <error@plt>
   1b3d4:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1b3d8:	svccc	0x00600000
   1b3dc:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1b3e0:	usatcc	r7, #29, lr, asr #16
   1b3e4:			; <UNDEFINED> instruction: 0x378560fd
   1b3e8:	bcc	1a4d6a0 <stdout@@GLIBC_2.4+0x19f614c>
   1b3ec:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1b3f0:	muleq	r1, r8, r9
   1b3f4:	andeq	r3, r4, r4, lsr #2
   1b3f8:	andeq	r3, r4, ip, lsr #2
   1b3fc:	andeq	r3, r4, r8, ror #2
   1b400:	ldrdeq	r3, [r4], -r0
   1b404:	andeq	r3, r4, r8, asr r2
   1b408:	andeq	r3, r4, ip, ror #3
   1b40c:	andeq	r3, r4, r4, lsr #4
   1b410:	andeq	r3, r4, r4, lsr r1
   1b414:	mov	r3, r1
   1b418:	mov	ip, r2
   1b41c:	mov	r1, ip
   1b420:	mov	r2, r0
   1b424:	mov	r0, r3
   1b428:	ldr	r3, [pc]	; 1b430 <__assert_fail@plt+0x8e3c>
   1b42c:	b	1b0d4 <__assert_fail@plt+0x8ae0>
   1b430:	muleq	r1, r8, r9
   1b434:	mov	r3, r1
   1b438:	mov	ip, r2
   1b43c:	mov	r1, ip
   1b440:	mov	r2, r0
   1b444:	mov	r0, r3
   1b448:	ldr	r3, [pc]	; 1b450 <__assert_fail@plt+0x8e5c>
   1b44c:	b	1b0d4 <__assert_fail@plt+0x8ae0>
   1b450:	andeq	r4, r1, ip, ror r7
   1b454:	cmp	r1, #0
   1b458:	beq	1b4c8 <__assert_fail@plt+0x8ed4>
   1b45c:	ldr	r3, [r2]
   1b460:	push	{r4, r5, r6, lr}
   1b464:	ldr	r4, [r1, r3, lsl #2]
   1b468:	cmp	r4, #0
   1b46c:	beq	1b4d0 <__assert_fail@plt+0x8edc>
   1b470:	add	r3, r3, #1
   1b474:	str	r3, [r2]
   1b478:	mov	r6, r0
   1b47c:	mov	r0, r4
   1b480:	bl	11f1c <getpwnam@plt>
   1b484:	mov	r5, r0
   1b488:	bl	1245c <endpwent@plt>
   1b48c:	cmp	r5, #0
   1b490:	beq	1b4d8 <__assert_fail@plt+0x8ee4>
   1b494:	ldr	r5, [r5, #8]
   1b498:	mov	r1, r4
   1b49c:	mov	r0, r6
   1b4a0:	bl	17aac <__assert_fail@plt+0x54b8>
   1b4a4:	vldr	s14, [pc, #200]	; 1b574 <__assert_fail@plt+0x8f80>
   1b4a8:	vldr	s15, [pc, #200]	; 1b578 <__assert_fail@plt+0x8f84>
   1b4ac:	cmp	r5, #100	; 0x64
   1b4b0:	vmovcs.f32	s15, s14
   1b4b4:	mov	r3, r0
   1b4b8:	str	r5, [r0, #40]	; 0x28
   1b4bc:	mov	r0, #1
   1b4c0:	vstr	s15, [r3, #28]
   1b4c4:	pop	{r4, r5, r6, pc}
   1b4c8:	mov	r0, r1
   1b4cc:	bx	lr
   1b4d0:	mov	r0, r4
   1b4d4:	pop	{r4, r5, r6, pc}
   1b4d8:	ldr	r1, [pc, #156]	; 1b57c <__assert_fail@plt+0x8f88>
   1b4dc:	mov	r0, r4
   1b4e0:	bl	125e8 <strspn@plt>
   1b4e4:	cmp	r0, #0
   1b4e8:	beq	1b510 <__assert_fail@plt+0x8f1c>
   1b4ec:	ldrb	r3, [r4, r0]
   1b4f0:	cmp	r3, #0
   1b4f4:	bne	1b510 <__assert_fail@plt+0x8f1c>
   1b4f8:	ldr	r3, [pc, #128]	; 1b580 <__assert_fail@plt+0x8f8c>
   1b4fc:	mov	r0, r4
   1b500:	ldr	r1, [r3, #72]	; 0x48
   1b504:	bl	20b84 <__assert_fail@plt+0xe590>
   1b508:	mov	r5, r0
   1b50c:	b	1b498 <__assert_fail@plt+0x8ea4>
   1b510:	ldrb	r5, [r4]
   1b514:	mov	r2, #5
   1b518:	cmp	r5, #0
   1b51c:	beq	1b558 <__assert_fail@plt+0x8f64>
   1b520:	ldr	r1, [pc, #92]	; 1b584 <__assert_fail@plt+0x8f90>
   1b524:	mov	r0, #0
   1b528:	bl	120b4 <dcgettext@plt>
   1b52c:	ldr	r3, [pc, #76]	; 1b580 <__assert_fail@plt+0x8f8c>
   1b530:	mov	r2, r4
   1b534:	ldr	r1, [r3, #72]	; 0x48
   1b538:	mov	r5, r0
   1b53c:	mov	r0, #0
   1b540:	bl	2b208 <__assert_fail@plt+0x18c14>
   1b544:	mov	r2, r5
   1b548:	mov	r1, #0
   1b54c:	mov	r3, r0
   1b550:	mov	r0, #1
   1b554:	bl	121ec <error@plt>
   1b558:	ldr	r1, [pc, #40]	; 1b588 <__assert_fail@plt+0x8f94>
   1b55c:	mov	r0, r5
   1b560:	bl	120b4 <dcgettext@plt>
   1b564:	mov	r1, r5
   1b568:	mov	r2, r0
   1b56c:	mov	r0, #1
   1b570:	bl	121ec <error@plt>
   1b574:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b578:	svccc	0x007d70a4
   1b57c:	andeq	r3, r4, r8, lsr #5
   1b580:	andeq	r7, r5, ip, ror #28
   1b584:			; <UNDEFINED> instruction: 0x000432b4
   1b588:	ldrdeq	r3, [r4], -r8
   1b58c:	push	{r4, lr}
   1b590:	mov	r1, #0
   1b594:	bl	17aac <__assert_fail@plt+0x54b8>
   1b598:	ldr	r3, [pc, #8]	; 1b5a8 <__assert_fail@plt+0x8fb4>
   1b59c:	str	r3, [r0, #28]
   1b5a0:	mov	r0, #1
   1b5a4:	pop	{r4, pc}
   1b5a8:	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
   1b5ac:	push	{r4, r5, r6, r7, r8, lr}
   1b5b0:	vpush	{d8}
   1b5b4:	mov	r4, r0
   1b5b8:	mov	r6, r1
   1b5bc:	vmov.f64	d8, d0
   1b5c0:	ldrb	ip, [r0]
   1b5c4:	sub	sp, sp, #24
   1b5c8:	mov	r7, r2
   1b5cc:	cmp	ip, #43	; 0x2b
   1b5d0:	stm	sp, {r2, r3}
   1b5d4:	mov	r5, r3
   1b5d8:	beq	1b6d0 <__assert_fail@plt+0x90dc>
   1b5dc:	cmp	ip, #45	; 0x2d
   1b5e0:	beq	1b618 <__assert_fail@plt+0x9024>
   1b5e4:	mov	r3, #2
   1b5e8:	str	r3, [r1, #4]
   1b5ec:	ldr	r3, [pc, #284]	; 1b710 <__assert_fail@plt+0x911c>
   1b5f0:	add	r2, sp, #8
   1b5f4:	mov	r1, #0
   1b5f8:	mov	r0, r4
   1b5fc:	bl	2c70c <__assert_fail@plt+0x1a118>
   1b600:	subs	r8, r0, #0
   1b604:	bne	1b628 <__assert_fail@plt+0x9034>
   1b608:	mov	r0, r8
   1b60c:	add	sp, sp, #24
   1b610:	vpop	{d8}
   1b614:	pop	{r4, r5, r6, r7, r8, pc}
   1b618:	mov	r3, #0
   1b61c:	add	r4, r0, #1
   1b620:	str	r3, [r1, #4]
   1b624:	b	1b5ec <__assert_fail@plt+0x8ff8>
   1b628:	vldr	d0, [sp, #8]
   1b62c:	add	r0, sp, #16
   1b630:	vmul.f64	d0, d8, d0
   1b634:	bl	12294 <modf@plt>
   1b638:	vldr	d7, [pc, #200]	; 1b708 <__assert_fail@plt+0x9114>
   1b63c:	vmul.f64	d0, d0, d7
   1b640:	vcmpe.f64	d0, d7
   1b644:	vmrs	APSR_nzcv, fpscr
   1b648:	bpl	1b6e0 <__assert_fail@plt+0x90ec>
   1b64c:	vmov	s15, r7
   1b650:	vcvt.f64.s32	d6, s15
   1b654:	vldr	d7, [sp, #16]
   1b658:	vcmpe.f64	d7, #0.0
   1b65c:	vsub.f64	d6, d6, d7
   1b660:	vmrs	APSR_nzcv, fpscr
   1b664:	movmi	r2, #1
   1b668:	movpl	r2, #0
   1b66c:	vcvt.s32.f64	s15, d6
   1b670:	vmov	r3, s15
   1b674:	vstr	s15, [r6, #8]
   1b678:	cmp	r3, r7
   1b67c:	movle	r7, #0
   1b680:	movgt	r7, #1
   1b684:	cmp	r7, r2
   1b688:	bne	1b6f4 <__assert_fail@plt+0x9100>
   1b68c:	vmov	s15, r5
   1b690:	mov	r0, r8
   1b694:	vcvt.f64.s32	d7, s15
   1b698:	vcmpe.f64	d0, d7
   1b69c:	vsub.f64	d7, d7, d0
   1b6a0:	vmrs	APSR_nzcv, fpscr
   1b6a4:	ldrgt	r2, [pc, #104]	; 1b714 <__assert_fail@plt+0x9120>
   1b6a8:	vcvt.s32.f64	s14, d7
   1b6ac:	subgt	r3, r3, #1
   1b6b0:	strgt	r3, [r6, #8]
   1b6b4:	vmovgt	r1, s14
   1b6b8:	vstrle	s14, [r6, #12]
   1b6bc:	addgt	r2, r1, r2
   1b6c0:	strgt	r2, [r6, #12]
   1b6c4:	add	sp, sp, #24
   1b6c8:	vpop	{d8}
   1b6cc:	pop	{r4, r5, r6, r7, r8, pc}
   1b6d0:	mov	r3, #1
   1b6d4:	add	r4, r0, r3
   1b6d8:	str	r3, [r1, #4]
   1b6dc:	b	1b5ec <__assert_fail@plt+0x8ff8>
   1b6e0:	ldr	r3, [pc, #48]	; 1b718 <__assert_fail@plt+0x9124>
   1b6e4:	ldr	r2, [pc, #48]	; 1b71c <__assert_fail@plt+0x9128>
   1b6e8:	ldr	r1, [pc, #48]	; 1b720 <__assert_fail@plt+0x912c>
   1b6ec:	ldr	r0, [pc, #48]	; 1b724 <__assert_fail@plt+0x9130>
   1b6f0:	bl	125f4 <__assert_fail@plt>
   1b6f4:	mov	r3, r4
   1b6f8:	ldr	r2, [sp, #56]	; 0x38
   1b6fc:	mov	r1, #0
   1b700:	mov	r0, #1
   1b704:	bl	121ec <error@plt>
   1b708:	andeq	r0, r0, r0
   1b70c:	bicmi	ip, sp, r5, ror #26
   1b710:			; <UNDEFINED> instruction: 0x000123b4
   1b714:	blcc	fe6cdf1c <stdout@@GLIBC_2.4+0xfe6769c8>
   1b718:	ldrdeq	r2, [r4], -r8
   1b71c:	andeq	r0, r0, sp, asr #24
   1b720:	andeq	r3, r4, r4, lsl #6
   1b724:	andeq	r3, r4, r0, lsl r3
   1b728:	cmp	r0, #0
   1b72c:	bxeq	lr
   1b730:	cmp	r2, #0
   1b734:	push	{lr}		; (str lr, [sp, #-4]!)
   1b738:	sub	sp, sp, #20
   1b73c:	beq	1b760 <__assert_fail@plt+0x916c>
   1b740:	ldrb	ip, [r0]
   1b744:	cmp	ip, #43	; 0x2b
   1b748:	beq	1b794 <__assert_fail@plt+0x91a0>
   1b74c:	cmp	ip, #45	; 0x2d
   1b750:	bne	1b788 <__assert_fail@plt+0x9194>
   1b754:	mov	r3, #1
   1b758:	add	r0, r0, r3
   1b75c:	str	r3, [r2]
   1b760:	ldr	r2, [pc, #60]	; 1b7a4 <__assert_fail@plt+0x91b0>
   1b764:	mov	r3, r1
   1b768:	str	r2, [sp]
   1b76c:	add	r1, sp, #12
   1b770:	mov	r2, #10
   1b774:	bl	2cd48 <__assert_fail@plt+0x1a754>
   1b778:	clz	r0, r0
   1b77c:	lsr	r0, r0, #5
   1b780:	add	sp, sp, #20
   1b784:	pop	{pc}		; (ldr pc, [sp], #4)
   1b788:	mov	r3, #2
   1b78c:	str	r3, [r2]
   1b790:	b	1b760 <__assert_fail@plt+0x916c>
   1b794:	mov	r3, #0
   1b798:	add	r0, r0, #1
   1b79c:	str	r3, [r2]
   1b7a0:	b	1b760 <__assert_fail@plt+0x916c>
   1b7a4:	andeq	r2, r4, r0, asr r0
   1b7a8:	push	{r4, r5, r6, lr}
   1b7ac:	subs	r4, r0, #0
   1b7b0:	sub	sp, sp, #16
   1b7b4:	beq	1b820 <__assert_fail@plt+0x922c>
   1b7b8:	ldr	r3, [r1]
   1b7bc:	ldr	r4, [r4, r3, lsl #2]
   1b7c0:	cmp	r4, #0
   1b7c4:	beq	1b820 <__assert_fail@plt+0x922c>
   1b7c8:	add	r3, r3, #1
   1b7cc:	str	r3, [r1]
   1b7d0:	mov	r0, r4
   1b7d4:	mov	r6, r2
   1b7d8:	add	r1, sp, #8
   1b7dc:	add	r2, sp, #4
   1b7e0:	bl	1b728 <__assert_fail@plt+0x9134>
   1b7e4:	cmp	r0, #0
   1b7e8:	moveq	r4, r0
   1b7ec:	beq	1b820 <__assert_fail@plt+0x922c>
   1b7f0:	mov	r1, r4
   1b7f4:	mov	r0, r6
   1b7f8:	bl	17aac <__assert_fail@plt+0x54b8>
   1b7fc:	ldr	r3, [pc, #172]	; 1b8b0 <__assert_fail@plt+0x92bc>
   1b800:	ldr	r2, [sp, #4]
   1b804:	mov	r4, r0
   1b808:	ldrd	r0, [sp, #8]
   1b80c:	str	r2, [r4, #40]	; 0x28
   1b810:	ldr	r3, [r3, #44]	; 0x2c
   1b814:	strd	r0, [r4, #48]	; 0x30
   1b818:	tst	r3, #1
   1b81c:	bne	1b82c <__assert_fail@plt+0x9238>
   1b820:	mov	r0, r4
   1b824:	add	sp, sp, #16
   1b828:	pop	{r4, r5, r6, pc}
   1b82c:	ldr	r5, [pc, #128]	; 1b8b4 <__assert_fail@plt+0x92c0>
   1b830:	ldr	r1, [pc, #128]	; 1b8b8 <__assert_fail@plt+0x92c4>
   1b834:	ldr	r2, [r4, #4]
   1b838:	ldr	r0, [r5]
   1b83c:	bl	1233c <fprintf@plt>
   1b840:	ldr	r1, [sp, #4]
   1b844:	ldr	r0, [r5]
   1b848:	cmp	r1, #0
   1b84c:	beq	1b878 <__assert_fail@plt+0x9284>
   1b850:	cmp	r1, #1
   1b854:	beq	1b8a4 <__assert_fail@plt+0x92b0>
   1b858:	ldr	lr, [pc, #92]	; 1b8bc <__assert_fail@plt+0x92c8>
   1b85c:	ldr	ip, [pc, #92]	; 1b8c0 <__assert_fail@plt+0x92cc>
   1b860:	cmp	r1, #2
   1b864:	ldr	r2, [pc, #88]	; 1b8c4 <__assert_fail@plt+0x92d0>
   1b868:	ldr	r3, [pc, #88]	; 1b8c8 <__assert_fail@plt+0x92d4>
   1b86c:	moveq	r2, lr
   1b870:	moveq	r3, ip
   1b874:	b	1b880 <__assert_fail@plt+0x928c>
   1b878:	ldr	r2, [pc, #76]	; 1b8cc <__assert_fail@plt+0x92d8>
   1b87c:	ldr	r3, [pc, #76]	; 1b8d0 <__assert_fail@plt+0x92dc>
   1b880:	ldr	r1, [pc, #76]	; 1b8d4 <__assert_fail@plt+0x92e0>
   1b884:	bl	1233c <fprintf@plt>
   1b888:	ldr	r0, [r5]
   1b88c:	ldrd	r2, [r4, #48]	; 0x30
   1b890:	ldr	r1, [pc, #64]	; 1b8d8 <__assert_fail@plt+0x92e4>
   1b894:	bl	1233c <fprintf@plt>
   1b898:	mov	r0, r4
   1b89c:	add	sp, sp, #16
   1b8a0:	pop	{r4, r5, r6, pc}
   1b8a4:	ldr	r2, [pc, #48]	; 1b8dc <__assert_fail@plt+0x92e8>
   1b8a8:	ldr	r3, [pc, #48]	; 1b8e0 <__assert_fail@plt+0x92ec>
   1b8ac:	b	1b880 <__assert_fail@plt+0x928c>
   1b8b0:	andeq	r7, r5, ip, ror #28
   1b8b4:	andeq	r7, r5, r8, asr #10
   1b8b8:	andeq	r3, r4, r8, asr #6
   1b8bc:	andeq	r3, r4, r0, asr #6
   1b8c0:	andeq	r3, r4, r4, asr #6
   1b8c4:	andeq	r3, r4, ip, lsr #28
   1b8c8:	andeq	r3, r4, ip, lsr #6
   1b8cc:	andeq	r3, r4, r0, lsr r3
   1b8d0:	andeq	r3, r4, r4, lsr r3
   1b8d4:	andeq	r3, r4, r8, asr r3
   1b8d8:	andeq	r3, r4, r0, ror r3
   1b8dc:	andeq	r3, r4, r8, lsr r3
   1b8e0:	andeq	r3, r4, ip, lsr r3
   1b8e4:	mov	r3, r1
   1b8e8:	push	{r4, lr}
   1b8ec:	mov	r4, r2
   1b8f0:	mov	r1, r4
   1b8f4:	mov	r2, r0
   1b8f8:	mov	r0, r3
   1b8fc:	bl	1b7a8 <__assert_fail@plt+0x91b4>
   1b900:	subs	r3, r0, #0
   1b904:	beq	1b92c <__assert_fail@plt+0x9338>
   1b908:	ldrd	r0, [r3, #48]	; 0x30
   1b90c:	vldr	s14, [pc, #44]	; 1b940 <__assert_fail@plt+0x934c>
   1b910:	vldr	s15, [pc, #44]	; 1b944 <__assert_fail@plt+0x9350>
   1b914:	cmp	r1, #0
   1b918:	cmpeq	r0, #100	; 0x64
   1b91c:	mov	r0, #1
   1b920:	vmovcs.f32	s15, s14
   1b924:	vstr	s15, [r3, #28]
   1b928:	pop	{r4, pc}
   1b92c:	ldr	r2, [r4]
   1b930:	mov	r0, r3
   1b934:	sub	r3, r2, #1
   1b938:	str	r3, [r4]
   1b93c:	pop	{r4, pc}
   1b940:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b944:	svccc	0x007d70a4
   1b948:	b	1b8e4 <__assert_fail@plt+0x92f0>
   1b94c:	mov	r3, r1
   1b950:	push	{r4, lr}
   1b954:	mov	r4, r2
   1b958:	mov	r1, r4
   1b95c:	mov	r2, r0
   1b960:	mov	r0, r3
   1b964:	bl	1b7a8 <__assert_fail@plt+0x91b4>
   1b968:	subs	r3, r0, #0
   1b96c:	beq	1b9ac <__assert_fail@plt+0x93b8>
   1b970:	ldrd	r0, [r3, #48]	; 0x30
   1b974:	cmp	r1, #0
   1b978:	cmpeq	r0, #1
   1b97c:	beq	1b99c <__assert_fail@plt+0x93a8>
   1b980:	cmp	r1, #0
   1b984:	cmpeq	r0, #2
   1b988:	mov	r0, #1
   1b98c:	ldreq	r2, [pc, #44]	; 1b9c0 <__assert_fail@plt+0x93cc>
   1b990:	ldrne	r2, [pc, #44]	; 1b9c4 <__assert_fail@plt+0x93d0>
   1b994:	str	r2, [r3, #28]
   1b998:	pop	{r4, pc}
   1b99c:	ldr	r2, [pc, #36]	; 1b9c8 <__assert_fail@plt+0x93d4>
   1b9a0:	mov	r0, #1
   1b9a4:	str	r2, [r3, #28]
   1b9a8:	pop	{r4, pc}
   1b9ac:	ldr	r2, [r4]
   1b9b0:	mov	r0, r3
   1b9b4:	sub	r3, r2, #1
   1b9b8:	str	r3, [r4]
   1b9bc:	pop	{r4, pc}
   1b9c0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b9c4:	bcc	fe0e0388 <stdout@@GLIBC_2.4+0xfe088e34>
   1b9c8:	svccc	0x007d70a4
   1b9cc:	mov	r3, r1
   1b9d0:	push	{r4, lr}
   1b9d4:	mov	r4, r2
   1b9d8:	mov	r1, r4
   1b9dc:	mov	r2, r0
   1b9e0:	mov	r0, r3
   1b9e4:	bl	1b7a8 <__assert_fail@plt+0x91b4>
   1b9e8:	subs	r3, r0, #0
   1b9ec:	beq	1ba10 <__assert_fail@plt+0x941c>
   1b9f0:	ldr	r1, [pc, #44]	; 1ba24 <__assert_fail@plt+0x9430>
   1b9f4:	mov	r2, #0
   1b9f8:	mov	r0, #1
   1b9fc:	strb	r0, [r3, #20]
   1ba00:	str	r1, [r3, #28]
   1ba04:	strb	r2, [r3, #18]
   1ba08:	strb	r2, [r3, #19]
   1ba0c:	pop	{r4, pc}
   1ba10:	ldr	r2, [r4]
   1ba14:	mov	r0, r3
   1ba18:	sub	r3, r2, #1
   1ba1c:	str	r3, [r4]
   1ba20:	pop	{r4, pc}
   1ba24:	strcc	r3, [r6, #1981]	; 0x7bd
   1ba28:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ba2c:	subs	r6, r1, #0
   1ba30:	sub	sp, sp, #28
   1ba34:	beq	1bc30 <__assert_fail@plt+0x963c>
   1ba38:	ldr	r3, [r2]
   1ba3c:	ldr	r4, [r6, r3, lsl #2]
   1ba40:	cmp	r4, #0
   1ba44:	beq	1bcf0 <__assert_fail@plt+0x96fc>
   1ba48:	mov	r8, r0
   1ba4c:	mov	r0, r4
   1ba50:	mov	r7, r2
   1ba54:	bl	12300 <strlen@plt>
   1ba58:	subs	r5, r0, #0
   1ba5c:	beq	1bd28 <__assert_fail@plt+0x9734>
   1ba60:	sub	r5, r5, #1
   1ba64:	ldrb	r9, [r4, r5]
   1ba68:	sub	r3, r9, #48	; 0x30
   1ba6c:	cmp	r3, #71	; 0x47
   1ba70:	ldrls	pc, [pc, r3, lsl #2]
   1ba74:	b	1bc9c <__assert_fail@plt+0x96a8>
   1ba78:	muleq	r1, r8, fp
   1ba7c:	muleq	r1, r8, fp
   1ba80:	muleq	r1, r8, fp
   1ba84:	muleq	r1, r8, fp
   1ba88:	muleq	r1, r8, fp
   1ba8c:	muleq	r1, r8, fp
   1ba90:	muleq	r1, r8, fp
   1ba94:	muleq	r1, r8, fp
   1ba98:	muleq	r1, r8, fp
   1ba9c:	muleq	r1, r8, fp
   1baa0:	muleq	r1, ip, ip
   1baa4:	muleq	r1, ip, ip
   1baa8:	muleq	r1, ip, ip
   1baac:	muleq	r1, ip, ip
   1bab0:	muleq	r1, ip, ip
   1bab4:	muleq	r1, ip, ip
   1bab8:	muleq	r1, ip, ip
   1babc:	muleq	r1, ip, ip
   1bac0:	muleq	r1, ip, ip
   1bac4:	muleq	r1, ip, ip
   1bac8:	muleq	r1, ip, ip
   1bacc:	muleq	r1, ip, ip
   1bad0:	muleq	r1, ip, ip
   1bad4:	andeq	fp, r1, ip, lsr ip
   1bad8:	muleq	r1, ip, ip
   1badc:	muleq	r1, ip, ip
   1bae0:	muleq	r1, ip, ip
   1bae4:	muleq	r1, ip, ip
   1bae8:	muleq	r1, ip, ip
   1baec:	andeq	fp, r1, ip, lsl #25
   1baf0:	muleq	r1, ip, ip
   1baf4:	muleq	r1, ip, ip
   1baf8:	muleq	r1, ip, ip
   1bafc:	muleq	r1, ip, ip
   1bb00:	muleq	r1, ip, ip
   1bb04:	muleq	r1, ip, ip
   1bb08:	muleq	r1, ip, ip
   1bb0c:	muleq	r1, ip, ip
   1bb10:	muleq	r1, ip, ip
   1bb14:	muleq	r1, ip, ip
   1bb18:	muleq	r1, ip, ip
   1bb1c:	muleq	r1, ip, ip
   1bb20:	muleq	r1, ip, ip
   1bb24:	muleq	r1, ip, ip
   1bb28:	muleq	r1, ip, ip
   1bb2c:	muleq	r1, ip, ip
   1bb30:	muleq	r1, ip, ip
   1bb34:	muleq	r1, ip, ip
   1bb38:	muleq	r1, ip, ip
   1bb3c:	muleq	r1, ip, ip
   1bb40:	andeq	fp, r1, ip, asr #24
   1bb44:	andeq	fp, r1, ip, asr ip
   1bb48:	muleq	r1, ip, ip
   1bb4c:	muleq	r1, ip, ip
   1bb50:	muleq	r1, ip, ip
   1bb54:	muleq	r1, ip, ip
   1bb58:	muleq	r1, ip, ip
   1bb5c:	muleq	r1, ip, ip
   1bb60:	muleq	r1, ip, ip
   1bb64:	andeq	fp, r1, ip, ror #24
   1bb68:	muleq	r1, ip, ip
   1bb6c:	muleq	r1, ip, ip
   1bb70:	muleq	r1, ip, ip
   1bb74:	muleq	r1, ip, ip
   1bb78:	muleq	r1, ip, ip
   1bb7c:	muleq	r1, ip, ip
   1bb80:	muleq	r1, ip, ip
   1bb84:	muleq	r1, ip, ip
   1bb88:	muleq	r1, ip, ip
   1bb8c:	muleq	r1, ip, ip
   1bb90:	muleq	r1, ip, ip
   1bb94:	andeq	fp, r1, ip, ror ip
   1bb98:	mov	r5, #512	; 0x200
   1bb9c:	mov	r9, #0
   1bba0:	add	r2, sp, #12
   1bba4:	add	r1, sp, #16
   1bba8:	mov	r0, r4
   1bbac:	bl	1b728 <__assert_fail@plt+0x9134>
   1bbb0:	subs	r6, r0, #0
   1bbb4:	beq	1bcf8 <__assert_fail@plt+0x9704>
   1bbb8:	mov	r1, r4
   1bbbc:	mov	r0, r8
   1bbc0:	bl	17aac <__assert_fail@plt+0x54b8>
   1bbc4:	ldr	r2, [sp, #12]
   1bbc8:	mov	r1, #1
   1bbcc:	ldr	ip, [sp, #16]
   1bbd0:	ldr	r3, [sp, #20]
   1bbd4:	cmp	r2, #0
   1bbd8:	strb	r1, [r0, #18]
   1bbdc:	mov	r1, #0
   1bbe0:	str	r5, [r0, #44]	; 0x2c
   1bbe4:	strb	r1, [r0, #19]
   1bbe8:	str	r2, [r0, #40]	; 0x28
   1bbec:	str	ip, [r0, #48]	; 0x30
   1bbf0:	str	r3, [r0, #52]	; 0x34
   1bbf4:	bne	1bcc8 <__assert_fail@plt+0x96d4>
   1bbf8:	mul	r1, r5, r3
   1bbfc:	vldr	s15, [pc, #320]	; 1bd44 <__assert_fail@plt+0x9750>
   1bc00:	asr	r3, r5, #31
   1bc04:	umull	r4, r5, r5, ip
   1bc08:	vldr	s14, [pc, #312]	; 1bd48 <__assert_fail@plt+0x9754>
   1bc0c:	mla	r3, ip, r3, r1
   1bc10:	add	r5, r3, r5
   1bc14:	cmp	r5, #0
   1bc18:	cmpeq	r4, #20480	; 0x5000
   1bc1c:	vmovls.f32	s15, s14
   1bc20:	vstr	s15, [r0, #28]
   1bc24:	ldr	r3, [r7]
   1bc28:	add	r3, r3, #1
   1bc2c:	str	r3, [r7]
   1bc30:	mov	r0, r6
   1bc34:	add	sp, sp, #28
   1bc38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bc3c:	mov	r3, #0
   1bc40:	strb	r3, [r4, r5]
   1bc44:	mov	r5, #1073741824	; 0x40000000
   1bc48:	b	1bba0 <__assert_fail@plt+0x95ac>
   1bc4c:	mov	r3, #0
   1bc50:	strb	r3, [r4, r5]
   1bc54:	mov	r5, #512	; 0x200
   1bc58:	b	1bba0 <__assert_fail@plt+0x95ac>
   1bc5c:	mov	r3, #0
   1bc60:	strb	r3, [r4, r5]
   1bc64:	mov	r5, #1
   1bc68:	b	1bba0 <__assert_fail@plt+0x95ac>
   1bc6c:	mov	r3, #0
   1bc70:	strb	r3, [r4, r5]
   1bc74:	mov	r5, #1024	; 0x400
   1bc78:	b	1bba0 <__assert_fail@plt+0x95ac>
   1bc7c:	mov	r3, #0
   1bc80:	strb	r3, [r4, r5]
   1bc84:	mov	r5, #2
   1bc88:	b	1bba0 <__assert_fail@plt+0x95ac>
   1bc8c:	mov	r3, #0
   1bc90:	strb	r3, [r4, r5]
   1bc94:	mov	r5, #1048576	; 0x100000
   1bc98:	b	1bba0 <__assert_fail@plt+0x95ac>
   1bc9c:	mov	r2, #5
   1bca0:	ldr	r1, [pc, #164]	; 1bd4c <__assert_fail@plt+0x9758>
   1bca4:	mov	r0, #0
   1bca8:	bl	120b4 <dcgettext@plt>
   1bcac:	ldr	r3, [r7]
   1bcb0:	mov	r1, #0
   1bcb4:	ldr	r3, [r6, r3, lsl #2]
   1bcb8:	ldrb	r3, [r3, r5]
   1bcbc:	mov	r2, r0
   1bcc0:	mov	r0, #1
   1bcc4:	bl	121ec <error@plt>
   1bcc8:	cmp	r2, #1
   1bccc:	ldrne	r3, [pc, #124]	; 1bd50 <__assert_fail@plt+0x975c>
   1bcd0:	strne	r3, [r0, #28]
   1bcd4:	bne	1bc24 <__assert_fail@plt+0x9630>
   1bcd8:	mul	r1, r5, r3
   1bcdc:	vldr	s15, [pc, #100]	; 1bd48 <__assert_fail@plt+0x9754>
   1bce0:	asr	r3, r5, #31
   1bce4:	vldr	s14, [pc, #88]	; 1bd44 <__assert_fail@plt+0x9750>
   1bce8:	umull	r4, r5, r5, ip
   1bcec:	b	1bc0c <__assert_fail@plt+0x9618>
   1bcf0:	mov	r6, r4
   1bcf4:	b	1bc30 <__assert_fail@plt+0x963c>
   1bcf8:	mov	r2, #5
   1bcfc:	ldr	r1, [pc, #80]	; 1bd54 <__assert_fail@plt+0x9760>
   1bd00:	strb	r9, [sp, #8]
   1bd04:	strb	r6, [sp, #9]
   1bd08:	bl	120b4 <dcgettext@plt>
   1bd0c:	add	r2, sp, #8
   1bd10:	str	r2, [sp]
   1bd14:	mov	r3, r4
   1bd18:	mov	r1, r6
   1bd1c:	mov	r2, r0
   1bd20:	mov	r0, #1
   1bd24:	bl	121ec <error@plt>
   1bd28:	mov	r2, #5
   1bd2c:	ldr	r1, [pc, #36]	; 1bd58 <__assert_fail@plt+0x9764>
   1bd30:	bl	120b4 <dcgettext@plt>
   1bd34:	mov	r1, r5
   1bd38:	mov	r2, r0
   1bd3c:	mov	r0, #1
   1bd40:	bl	121ec <error@plt>
   1bd44:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bd48:	svccc	0x00666666
   1bd4c:	muleq	r4, r8, r3
   1bd50:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bd54:			; <UNDEFINED> instruction: 0x000433b0
   1bd58:	andeq	r3, r4, r8, ror r3
   1bd5c:	cmp	r0, #0
   1bd60:	beq	1bdb8 <__assert_fail@plt+0x97c4>
   1bd64:	ldr	ip, [r1]
   1bd68:	push	{r4, lr}
   1bd6c:	ldr	r4, [r0, ip, lsl #2]
   1bd70:	cmp	r4, #0
   1bd74:	beq	1bda8 <__assert_fail@plt+0x97b4>
   1bd78:	ldr	lr, [pc, #88]	; 1bdd8 <__assert_fail@plt+0x97e4>
   1bd7c:	add	ip, ip, #1
   1bd80:	str	ip, [r1]
   1bd84:	mov	r0, r4
   1bd88:	str	r4, [r3]
   1bd8c:	mov	r1, r2
   1bd90:	ldr	r3, [lr, #52]	; 0x34
   1bd94:	blx	r3
   1bd98:	cmp	r0, #0
   1bd9c:	bne	1bdc8 <__assert_fail@plt+0x97d4>
   1bda0:	mov	r0, #1
   1bda4:	pop	{r4, pc}
   1bda8:	mov	r2, #0
   1bdac:	mov	r0, r2
   1bdb0:	str	r2, [r3]
   1bdb4:	pop	{r4, pc}
   1bdb8:	mov	r2, #0
   1bdbc:	mov	r0, r2
   1bdc0:	str	r2, [r3]
   1bdc4:	bx	lr
   1bdc8:	bl	12348 <__errno_location@plt>
   1bdcc:	mov	r1, r4
   1bdd0:	ldr	r0, [r0]
   1bdd4:	bl	18ca0 <__assert_fail@plt+0x66ac>
   1bdd8:	andeq	r7, r5, ip, ror #28
   1bddc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bde0:	sub	sp, sp, #220	; 0xdc
   1bde4:	mov	r4, r1
   1bde8:	mov	r6, r2
   1bdec:	mov	r5, r0
   1bdf0:	add	r0, sp, #8
   1bdf4:	bl	17d40 <__assert_fail@plt+0x574c>
   1bdf8:	mov	r0, r4
   1bdfc:	mov	r1, r6
   1be00:	add	r2, sp, #8
   1be04:	add	r3, sp, #4
   1be08:	bl	1bd5c <__assert_fail@plt+0x9768>
   1be0c:	subs	r4, r0, #0
   1be10:	bne	1be20 <__assert_fail@plt+0x982c>
   1be14:	mov	r0, r4
   1be18:	add	sp, sp, #220	; 0xdc
   1be1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1be20:	ldr	r7, [pc, #324]	; 1bf6c <__assert_fail@plt+0x9978>
   1be24:	add	r0, sp, #112	; 0x70
   1be28:	bl	17d40 <__assert_fail@plt+0x574c>
   1be2c:	ldr	r3, [r7, #48]	; 0x30
   1be30:	cmp	r3, #0
   1be34:	beq	1bf1c <__assert_fail@plt+0x9928>
   1be38:	mov	r1, #0
   1be3c:	ldr	r0, [sp, #4]
   1be40:	bl	1fc3c <__assert_fail@plt+0xd648>
   1be44:	subs	r6, r0, #0
   1be48:	blt	1bed8 <__assert_fail@plt+0x98e4>
   1be4c:	add	r2, sp, #112	; 0x70
   1be50:	mov	r1, r6
   1be54:	mov	r0, #3
   1be58:	bl	1215c <__fxstat64@plt>
   1be5c:	cmp	r0, #0
   1be60:	bne	1bf5c <__assert_fail@plt+0x9968>
   1be64:	ldr	r3, [r7, #52]	; 0x34
   1be68:	add	r1, sp, #8
   1be6c:	ldr	r0, [sp, #4]
   1be70:	blx	r3
   1be74:	cmp	r0, #0
   1be78:	bne	1bf5c <__assert_fail@plt+0x9968>
   1be7c:	ldr	r3, [r7, #48]	; 0x30
   1be80:	cmp	r3, #0
   1be84:	bne	1bf48 <__assert_fail@plt+0x9954>
   1be88:	ldrb	r3, [r7, #56]	; 0x38
   1be8c:	cmp	r3, #0
   1be90:	bne	1bf48 <__assert_fail@plt+0x9954>
   1be94:	ldr	r3, [sp, #24]
   1be98:	and	r3, r3, #61440	; 0xf000
   1be9c:	cmp	r3, #40960	; 0xa000
   1bea0:	beq	1becc <__assert_fail@plt+0x98d8>
   1bea4:	ldrd	r0, [sp, #8]
   1bea8:	ldrd	r2, [sp, #112]	; 0x70
   1beac:	cmp	r1, r3
   1beb0:	cmpeq	r0, r2
   1beb4:	bne	1becc <__assert_fail@plt+0x98d8>
   1beb8:	ldrd	r0, [sp, #104]	; 0x68
   1bebc:	ldrd	r2, [sp, #208]	; 0xd0
   1bec0:	cmp	r1, r3
   1bec4:	cmpeq	r0, r2
   1bec8:	beq	1bed8 <__assert_fail@plt+0x98e4>
   1becc:	mov	r0, r6
   1bed0:	bl	125ac <close@plt>
   1bed4:	mvn	r6, #0
   1bed8:	ldr	r1, [sp, #4]
   1bedc:	mov	r0, r5
   1bee0:	bl	17aac <__assert_fail@plt+0x54b8>
   1bee4:	ldrd	r2, [sp, #104]	; 0x68
   1bee8:	ldrd	r8, [sp, #8]
   1beec:	ldr	r1, [pc, #124]	; 1bf70 <__assert_fail@plt+0x997c>
   1bef0:	mov	ip, #0
   1bef4:	strd	r2, [r0, #40]	; 0x28
   1bef8:	mov	r3, #1
   1befc:	str	r6, [r0, #56]	; 0x38
   1bf00:	strd	r8, [r0, #48]	; 0x30
   1bf04:	strb	ip, [r0, #19]
   1bf08:	strb	r3, [r0, #18]
   1bf0c:	str	r1, [r0, #28]
   1bf10:	mov	r0, r4
   1bf14:	add	sp, sp, #220	; 0xdc
   1bf18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bf1c:	ldrb	r1, [r7, #56]	; 0x38
   1bf20:	cmp	r1, #0
   1bf24:	bne	1bf40 <__assert_fail@plt+0x994c>
   1bf28:	ldr	r3, [sp, #24]
   1bf2c:	and	r3, r3, #61440	; 0xf000
   1bf30:	cmp	r3, #40960	; 0xa000
   1bf34:	bne	1be3c <__assert_fail@plt+0x9848>
   1bf38:	mvn	r6, #1
   1bf3c:	b	1bed8 <__assert_fail@plt+0x98e4>
   1bf40:	mov	r1, #32768	; 0x8000
   1bf44:	b	1be3c <__assert_fail@plt+0x9848>
   1bf48:	add	r1, sp, #112	; 0x70
   1bf4c:	add	r0, sp, #8
   1bf50:	mov	r2, #104	; 0x68
   1bf54:	bl	12024 <memcpy@plt>
   1bf58:	b	1bed8 <__assert_fail@plt+0x98e4>
   1bf5c:	bl	12348 <__errno_location@plt>
   1bf60:	ldr	r1, [sp, #4]
   1bf64:	ldr	r0, [r0]
   1bf68:	bl	18ca0 <__assert_fail@plt+0x66ac>
   1bf6c:	andeq	r7, r5, ip, ror #28
   1bf70:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bf74:	mov	r3, #0
   1bf78:	push	{r4, r5, r6, lr}
   1bf7c:	mov	r5, r0
   1bf80:	str	r3, [r1]
   1bf84:	mov	r0, r3
   1bf88:	mov	r4, r1
   1bf8c:	bl	2aed4 <__assert_fail@plt+0x188e0>
   1bf90:	ldr	r1, [pc, #176]	; 1c048 <__assert_fail@plt+0x9a54>
   1bf94:	str	r0, [r4, #16]
   1bf98:	mov	r0, r5
   1bf9c:	bl	11f40 <strcmp@plt>
   1bfa0:	cmp	r0, #0
   1bfa4:	beq	1c028 <__assert_fail@plt+0x9a34>
   1bfa8:	ldr	r1, [pc, #156]	; 1c04c <__assert_fail@plt+0x9a58>
   1bfac:	mov	r0, r5
   1bfb0:	bl	11f40 <strcmp@plt>
   1bfb4:	cmp	r0, #0
   1bfb8:	beq	1c004 <__assert_fail@plt+0x9a10>
   1bfbc:	ldr	r3, [pc, #140]	; 1c050 <__assert_fail@plt+0x9a5c>
   1bfc0:	mov	r1, r5
   1bfc4:	ldr	r0, [r3, #36]	; 0x24
   1bfc8:	bl	18e68 <__assert_fail@plt+0x6874>
   1bfcc:	mov	r3, r0
   1bfd0:	cmp	r0, #0
   1bfd4:	stmib	r4, {r3, r5}
   1bfd8:	beq	1c038 <__assert_fail@plt+0x9a44>
   1bfdc:	mov	r0, r3
   1bfe0:	bl	123c0 <fileno@plt>
   1bfe4:	cmn	r0, #1
   1bfe8:	moveq	r0, #0
   1bfec:	beq	1bffc <__assert_fail@plt+0x9a08>
   1bff0:	bl	12564 <isatty@plt>
   1bff4:	adds	r0, r0, #0
   1bff8:	movne	r0, #1
   1bffc:	strb	r0, [r4, #12]
   1c000:	pop	{r4, r5, r6, pc}
   1c004:	ldr	r3, [pc, #72]	; 1c054 <__assert_fail@plt+0x9a60>
   1c008:	ldr	r1, [pc, #72]	; 1c058 <__assert_fail@plt+0x9a64>
   1c00c:	mov	r2, #5
   1c010:	ldr	r3, [r3]
   1c014:	str	r3, [r4, #4]
   1c018:	bl	120b4 <dcgettext@plt>
   1c01c:	ldr	r3, [r4, #4]
   1c020:	str	r0, [r4, #8]
   1c024:	b	1bfdc <__assert_fail@plt+0x99e8>
   1c028:	ldr	r3, [pc, #44]	; 1c05c <__assert_fail@plt+0x9a68>
   1c02c:	mov	r2, #5
   1c030:	ldr	r1, [pc, #40]	; 1c060 <__assert_fail@plt+0x9a6c>
   1c034:	b	1c010 <__assert_fail@plt+0x9a1c>
   1c038:	bl	12348 <__errno_location@plt>
   1c03c:	mov	r1, r5
   1c040:	ldr	r0, [r0]
   1c044:	bl	18cd0 <__assert_fail@plt+0x66dc>
   1c048:	ldrdeq	r3, [r4], -r4
   1c04c:	strdeq	r3, [r4], -r0
   1c050:	andeq	r7, r5, r0, asr #28
   1c054:	andeq	r7, r5, r4, asr r5
   1c058:	andeq	r2, r4, r8, lsr #2
   1c05c:	andeq	r7, r5, r8, asr #10
   1c060:	andeq	r3, r4, r0, ror #7
   1c064:	cmp	r1, #0
   1c068:	push	{r4, r5, r6, r7, lr}
   1c06c:	moveq	r0, r1
   1c070:	sub	sp, sp, #28
   1c074:	ldr	r7, [r2]
   1c078:	beq	1c0c0 <__assert_fail@plt+0x9acc>
   1c07c:	ldr	r4, [r1, r7, lsl #2]
   1c080:	cmp	r4, #0
   1c084:	moveq	r0, r4
   1c088:	beq	1c0c0 <__assert_fail@plt+0x9acc>
   1c08c:	add	r3, r7, #1
   1c090:	str	r3, [r2]
   1c094:	mov	r6, r0
   1c098:	add	r1, sp, #4
   1c09c:	ldr	r0, [pc, #36]	; 1c0c8 <__assert_fail@plt+0x9ad4>
   1c0a0:	mov	r5, r2
   1c0a4:	bl	1bf74 <__assert_fail@plt+0x9980>
   1c0a8:	mov	r2, r4
   1c0ac:	mov	r1, r6
   1c0b0:	add	r0, sp, #4
   1c0b4:	bl	1a648 <__assert_fail@plt+0x8054>
   1c0b8:	cmp	r0, #0
   1c0bc:	streq	r7, [r5]
   1c0c0:	add	sp, sp, #28
   1c0c4:	pop	{r4, r5, r6, r7, pc}
   1c0c8:	strdeq	r3, [r4], -r0
   1c0cc:	push	{r4, lr}
   1c0d0:	bl	17b04 <__assert_fail@plt+0x5510>
   1c0d4:	mov	r4, #1
   1c0d8:	mov	r3, #0
   1c0dc:	strb	r4, [r0, #17]
   1c0e0:	strb	r4, [r0, #16]
   1c0e4:	strb	r3, [r0, #19]
   1c0e8:	strb	r3, [r0, #18]
   1c0ec:	add	r1, r0, #40	; 0x28
   1c0f0:	ldr	r0, [pc, #8]	; 1c100 <__assert_fail@plt+0x9b0c>
   1c0f4:	bl	1bf74 <__assert_fail@plt+0x9980>
   1c0f8:	mov	r0, r4
   1c0fc:	pop	{r4, pc}
   1c100:	strdeq	r3, [r4], -r0
   1c104:	push	{r4, r5, r6, lr}
   1c108:	mov	r5, r1
   1c10c:	bl	17aac <__assert_fail@plt+0x54b8>
   1c110:	cmp	r5, #0
   1c114:	mov	r4, r0
   1c118:	addne	r1, r4, #40	; 0x28
   1c11c:	movne	r0, r5
   1c120:	ldreq	r0, [pc, #40]	; 1c150 <__assert_fail@plt+0x9b5c>
   1c124:	addeq	r1, r4, #40	; 0x28
   1c128:	bl	1bf74 <__assert_fail@plt+0x9980>
   1c12c:	mov	r0, #1
   1c130:	mov	r3, #0
   1c134:	mov	r2, #1065353216	; 0x3f800000
   1c138:	strb	r0, [r4, #17]
   1c13c:	str	r2, [r4, #28]
   1c140:	strb	r0, [r4, #16]
   1c144:	strb	r3, [r4, #19]
   1c148:	strb	r3, [r4, #18]
   1c14c:	pop	{r4, r5, r6, pc}
   1c150:	strdeq	r3, [r4], -r0
   1c154:	mov	r1, #0
   1c158:	b	1c104 <__assert_fail@plt+0x9b10>
   1c15c:	cmp	r1, #0
   1c160:	beq	1c19c <__assert_fail@plt+0x9ba8>
   1c164:	ldr	r3, [r2]
   1c168:	ldr	r1, [r1, r3, lsl #2]
   1c16c:	cmp	r1, #0
   1c170:	beq	1c19c <__assert_fail@plt+0x9ba8>
   1c174:	add	r3, r3, #1
   1c178:	str	r3, [r2]
   1c17c:	push	{r4, lr}
   1c180:	mov	r4, r2
   1c184:	bl	1c104 <__assert_fail@plt+0x9b10>
   1c188:	cmp	r0, #0
   1c18c:	ldreq	r3, [r4]
   1c190:	subeq	r3, r3, #1
   1c194:	streq	r3, [r4]
   1c198:	pop	{r4, pc}
   1c19c:	mov	r0, r1
   1c1a0:	bx	lr
   1c1a4:	cmp	r1, #0
   1c1a8:	beq	1c1f4 <__assert_fail@plt+0x9c00>
   1c1ac:	ldr	r3, [r2]
   1c1b0:	push	{r4, r5, r6, lr}
   1c1b4:	ldr	r4, [r1, r3, lsl #2]
   1c1b8:	cmp	r4, #0
   1c1bc:	beq	1c1fc <__assert_fail@plt+0x9c08>
   1c1c0:	add	r3, r3, #1
   1c1c4:	str	r3, [r2]
   1c1c8:	bl	17b04 <__assert_fail@plt+0x5510>
   1c1cc:	mov	r5, r0
   1c1d0:	add	r1, r0, #40	; 0x28
   1c1d4:	mov	r0, r4
   1c1d8:	bl	1bf74 <__assert_fail@plt+0x9980>
   1c1dc:	mov	r0, #1
   1c1e0:	mov	r3, #1065353216	; 0x3f800000
   1c1e4:	strb	r0, [r5, #17]
   1c1e8:	strb	r0, [r5, #16]
   1c1ec:	str	r3, [r5, #28]
   1c1f0:	pop	{r4, r5, r6, pc}
   1c1f4:	mov	r0, r1
   1c1f8:	bx	lr
   1c1fc:	mov	r0, r4
   1c200:	pop	{r4, r5, r6, pc}
   1c204:	cmp	r1, #0
   1c208:	push	{r4, r5, r6, r7, lr}
   1c20c:	mov	r5, r2
   1c210:	sub	sp, sp, #28
   1c214:	ldr	r4, [r2]
   1c218:	beq	1c274 <__assert_fail@plt+0x9c80>
   1c21c:	mov	r7, r0
   1c220:	ldr	r0, [r1, r4, lsl #2]
   1c224:	lsl	r3, r4, #2
   1c228:	cmp	r0, #0
   1c22c:	beq	1c274 <__assert_fail@plt+0x9c80>
   1c230:	add	r1, r1, r3
   1c234:	add	r3, r4, #1
   1c238:	ldr	r6, [r1, #4]
   1c23c:	str	r3, [r2]
   1c240:	cmp	r6, #0
   1c244:	beq	1c274 <__assert_fail@plt+0x9c80>
   1c248:	add	r4, r4, #2
   1c24c:	str	r4, [r2]
   1c250:	add	r1, sp, #4
   1c254:	bl	1bf74 <__assert_fail@plt+0x9980>
   1c258:	add	r0, sp, #4
   1c25c:	mov	r2, r6
   1c260:	mov	r1, r7
   1c264:	ldr	r4, [r5]
   1c268:	bl	1a648 <__assert_fail@plt+0x8054>
   1c26c:	cmp	r0, #0
   1c270:	bne	1c27c <__assert_fail@plt+0x9c88>
   1c274:	mov	r0, #0
   1c278:	str	r4, [r5]
   1c27c:	add	sp, sp, #28
   1c280:	pop	{r4, r5, r6, r7, pc}
   1c284:	cmp	r1, #0
   1c288:	beq	1c2e4 <__assert_fail@plt+0x9cf0>
   1c28c:	ldr	r3, [r2]
   1c290:	push	{r4, r5, r6, lr}
   1c294:	ldr	r4, [r1, r3, lsl #2]
   1c298:	cmp	r4, #0
   1c29c:	beq	1c2ec <__assert_fail@plt+0x9cf8>
   1c2a0:	add	r3, r3, #1
   1c2a4:	str	r3, [r2]
   1c2a8:	mov	r1, r4
   1c2ac:	bl	17aac <__assert_fail@plt+0x54b8>
   1c2b0:	mov	r5, r0
   1c2b4:	add	r1, r0, #40	; 0x28
   1c2b8:	mov	r0, r4
   1c2bc:	bl	1bf74 <__assert_fail@plt+0x9980>
   1c2c0:	mov	r0, #1
   1c2c4:	mov	r3, #0
   1c2c8:	mov	r2, #1065353216	; 0x3f800000
   1c2cc:	strb	r0, [r5, #17]
   1c2d0:	str	r2, [r5, #28]
   1c2d4:	strb	r0, [r5, #16]
   1c2d8:	strb	r3, [r5, #19]
   1c2dc:	strb	r3, [r5, #18]
   1c2e0:	pop	{r4, r5, r6, pc}
   1c2e4:	mov	r0, r1
   1c2e8:	bx	lr
   1c2ec:	mov	r0, r4
   1c2f0:	pop	{r4, r5, r6, pc}
   1c2f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2f8:	subs	r4, r1, #0
   1c2fc:	sub	sp, sp, #20
   1c300:	beq	1c40c <__assert_fail@plt+0x9e18>
   1c304:	ldr	r3, [r2]
   1c308:	ldr	r4, [r4, r3, lsl #2]
   1c30c:	cmp	r4, #0
   1c310:	beq	1c40c <__assert_fail@plt+0x9e18>
   1c314:	add	r3, r3, #1
   1c318:	str	r3, [r2]
   1c31c:	ldrb	r3, [r4]
   1c320:	cmp	r3, #45	; 0x2d
   1c324:	beq	1c418 <__assert_fail@plt+0x9e24>
   1c328:	cmp	r3, #47	; 0x2f
   1c32c:	beq	1c428 <__assert_fail@plt+0x9e34>
   1c330:	ldr	fp, [pc, #364]	; 1c4a4 <__assert_fail@plt+0x9eb0>
   1c334:	mov	r3, #0
   1c338:	mov	r7, #2
   1c33c:	mov	r8, r0
   1c340:	add	r0, r4, r3
   1c344:	bl	24c80 <__assert_fail@plt+0x1268c>
   1c348:	subs	r9, r0, #0
   1c34c:	beq	1c468 <__assert_fail@plt+0x9e74>
   1c350:	ldrb	r3, [r4]
   1c354:	cmp	r3, #43	; 0x2b
   1c358:	bne	1c36c <__assert_fail@plt+0x9d78>
   1c35c:	ldrb	r3, [r4, #1]
   1c360:	sub	r3, r3, #48	; 0x30
   1c364:	cmp	r3, #7
   1c368:	bls	1c468 <__assert_fail@plt+0x9e74>
   1c36c:	mov	r5, #0
   1c370:	mov	r2, r5
   1c374:	mov	r1, r5
   1c378:	mov	r3, r9
   1c37c:	str	r5, [sp]
   1c380:	mov	r0, r5
   1c384:	bl	25070 <__assert_fail@plt+0x12a7c>
   1c388:	mov	r3, r9
   1c38c:	mov	r2, r5
   1c390:	mov	r1, #1
   1c394:	str	r5, [sp]
   1c398:	mov	sl, r0
   1c39c:	mov	r0, r5
   1c3a0:	str	sl, [sp, #8]
   1c3a4:	bl	25070 <__assert_fail@plt+0x12a7c>
   1c3a8:	mov	r6, r0
   1c3ac:	mov	r0, r9
   1c3b0:	str	r6, [sp, #12]
   1c3b4:	bl	2db68 <__assert_fail@plt+0x1b574>
   1c3b8:	ldrb	r3, [r4]
   1c3bc:	cmp	r6, r5
   1c3c0:	cmpeq	sl, r5
   1c3c4:	moveq	r6, #1
   1c3c8:	movne	r6, #0
   1c3cc:	cmp	r3, #47	; 0x2f
   1c3d0:	movne	r6, #0
   1c3d4:	andeq	r6, r6, #1
   1c3d8:	cmp	r6, r5
   1c3dc:	bne	1c438 <__assert_fail@plt+0x9e44>
   1c3e0:	mov	r1, r4
   1c3e4:	mov	r0, r8
   1c3e8:	bl	17aac <__assert_fail@plt+0x54b8>
   1c3ec:	add	r2, sp, #8
   1c3f0:	mov	r4, #1
   1c3f4:	mov	r3, r0
   1c3f8:	str	fp, [r0, #28]
   1c3fc:	ldm	r2!, {r0, r1}
   1c400:	str	r7, [r3, #40]	; 0x28
   1c404:	str	r0, [r3, #44]	; 0x2c
   1c408:	str	r1, [r3, #48]	; 0x30
   1c40c:	mov	r0, r4
   1c410:	add	sp, sp, #20
   1c414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c418:	mov	r3, #1
   1c41c:	mov	r7, #0
   1c420:	ldr	fp, [pc, #128]	; 1c4a8 <__assert_fail@plt+0x9eb4>
   1c424:	b	1c33c <__assert_fail@plt+0x9d48>
   1c428:	mov	r3, #1
   1c42c:	ldr	fp, [pc, #120]	; 1c4ac <__assert_fail@plt+0x9eb8>
   1c430:	mov	r7, r3
   1c434:	b	1c33c <__assert_fail@plt+0x9d48>
   1c438:	mov	r2, #5
   1c43c:	ldr	r1, [pc, #108]	; 1c4b0 <__assert_fail@plt+0x9ebc>
   1c440:	mov	r0, r5
   1c444:	bl	120b4 <dcgettext@plt>
   1c448:	mov	r3, r4
   1c44c:	mov	r1, r5
   1c450:	ldr	fp, [pc, #92]	; 1c4b4 <__assert_fail@plt+0x9ec0>
   1c454:	mov	r7, r5
   1c458:	mov	r2, r0
   1c45c:	mov	r0, r5
   1c460:	bl	121ec <error@plt>
   1c464:	b	1c3e0 <__assert_fail@plt+0x9dec>
   1c468:	mov	r2, #5
   1c46c:	ldr	r1, [pc, #68]	; 1c4b8 <__assert_fail@plt+0x9ec4>
   1c470:	mov	r0, #0
   1c474:	bl	120b4 <dcgettext@plt>
   1c478:	ldr	r3, [pc, #60]	; 1c4bc <__assert_fail@plt+0x9ec8>
   1c47c:	mov	r2, r4
   1c480:	ldr	r1, [r3, #72]	; 0x48
   1c484:	mov	r5, r0
   1c488:	mov	r0, #0
   1c48c:	bl	2b208 <__assert_fail@plt+0x18c14>
   1c490:	mov	r2, r5
   1c494:	mov	r1, #0
   1c498:	mov	r3, r0
   1c49c:	mov	r0, #1
   1c4a0:	bl	121ec <error@plt>
   1c4a4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c4a8:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c4ac:			; <UNDEFINED> instruction: 0x3e99999a
   1c4b0:	andeq	r3, r4, ip, lsl #8
   1c4b4:	svccc	0x007fa440
   1c4b8:	strdeq	r3, [r4], -ip
   1c4bc:	andeq	r7, r5, ip, ror #28
   1c4c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4c4:	subs	r7, r2, #0
   1c4c8:	sub	sp, sp, #76	; 0x4c
   1c4cc:	beq	1c710 <__assert_fail@plt+0xa11c>
   1c4d0:	ldr	r2, [r3]
   1c4d4:	ldr	r2, [r7, r2, lsl #2]
   1c4d8:	cmp	r2, #0
   1c4dc:	beq	1c818 <__assert_fail@plt+0xa224>
   1c4e0:	str	r3, [sp, #36]	; 0x24
   1c4e4:	ldr	r3, [r1, #12]
   1c4e8:	ldr	r2, [pc, #1416]	; 1ca78 <__assert_fail@plt+0xa484>
   1c4ec:	mov	r9, r0
   1c4f0:	mov	r0, r1
   1c4f4:	mov	r1, r3
   1c4f8:	mov	r4, r3
   1c4fc:	str	r3, [sp, #40]	; 0x28
   1c500:	bl	17a78 <__assert_fail@plt+0x5484>
   1c504:	ldr	r2, [pc, #1392]	; 1ca7c <__assert_fail@plt+0xa488>
   1c508:	ldr	r3, [pc, #1392]	; 1ca80 <__assert_fail@plt+0xa48c>
   1c50c:	mov	r1, #1
   1c510:	cmp	r4, r2
   1c514:	cmpne	r4, r3
   1c518:	movne	r2, #1
   1c51c:	moveq	r2, #0
   1c520:	str	r2, [sp, #24]
   1c524:	mov	r2, #0
   1c528:	strb	r2, [r0, #18]
   1c52c:	strb	r2, [r0, #19]
   1c530:	strb	r1, [r0, #17]
   1c534:	strb	r1, [r0, #16]
   1c538:	str	r2, [r0, #144]	; 0x90
   1c53c:	str	r0, [sp, #28]
   1c540:	ldreq	r2, [pc, #1340]	; 1ca84 <__assert_fail@plt+0xa490>
   1c544:	ldreq	r0, [sp, #28]
   1c548:	strbne	r2, [r0, #140]	; 0x8c
   1c54c:	strbeq	r1, [r2, #80]	; 0x50
   1c550:	strbeq	r1, [r0, #140]	; 0x8c
   1c554:	ldr	r2, [sp, #40]	; 0x28
   1c558:	ldr	r1, [pc, #1320]	; 1ca88 <__assert_fail@plt+0xa494>
   1c55c:	cmp	r2, r1
   1c560:	cmpne	r2, r3
   1c564:	moveq	r3, #1
   1c568:	movne	r3, #0
   1c56c:	str	r3, [sp, #20]
   1c570:	beq	1c894 <__assert_fail@plt+0xa2a0>
   1c574:	ldr	r3, [pc, #1296]	; 1ca8c <__assert_fail@plt+0xa498>
   1c578:	ldr	r3, [r3]
   1c57c:	cmp	r3, #0
   1c580:	ldrne	r2, [sp, #28]
   1c584:	strne	r3, [r2, #144]	; 0x90
   1c588:	beq	1ca34 <__assert_fail@plt+0xa440>
   1c58c:	ldr	r3, [sp, #28]
   1c590:	mov	r9, #0
   1c594:	strb	r9, [r3, #40]	; 0x28
   1c598:	ldr	r3, [sp, #36]	; 0x24
   1c59c:	ldr	r3, [r3]
   1c5a0:	str	r3, [sp, #32]
   1c5a4:	ldr	sl, [r7, r3, lsl #2]
   1c5a8:	lsl	r8, r3, #2
   1c5ac:	cmp	sl, r9
   1c5b0:	add	r4, r7, r8
   1c5b4:	moveq	r5, r3
   1c5b8:	beq	1c700 <__assert_fail@plt+0xa10c>
   1c5bc:	sub	r8, r8, r4
   1c5c0:	add	r8, r8, #4
   1c5c4:	mov	r6, r9
   1c5c8:	mov	r0, r9
   1c5cc:	str	r4, [sp, #44]	; 0x2c
   1c5d0:	mov	fp, r4
   1c5d4:	ldr	r5, [sp, #32]
   1c5d8:	b	1c658 <__assert_fail@plt+0xa064>
   1c5dc:	ldr	r3, [sp, #24]
   1c5e0:	cmp	r1, #43	; 0x2b
   1c5e4:	movne	r3, #0
   1c5e8:	andeq	r3, r3, #1
   1c5ec:	cmp	r3, #0
   1c5f0:	beq	1c60c <__assert_fail@plt+0xa018>
   1c5f4:	ldrb	r1, [sl, #1]
   1c5f8:	cmp	r1, #0
   1c5fc:	movne	r0, #0
   1c600:	andeq	r0, r0, #1
   1c604:	cmp	r0, #0
   1c608:	bne	1c9b8 <__assert_fail@plt+0xa3c4>
   1c60c:	ldr	r1, [pc, #1148]	; 1ca90 <__assert_fail@plt+0xa49c>
   1c610:	mov	r0, sl
   1c614:	bl	23e8c <__assert_fail@plt+0x11898>
   1c618:	cmp	r0, #0
   1c61c:	beq	1c6f8 <__assert_fail@plt+0xa104>
   1c620:	cmp	r5, #0
   1c624:	add	r6, r6, #1
   1c628:	bne	1c638 <__assert_fail@plt+0xa044>
   1c62c:	ldr	r3, [sp, #20]
   1c630:	cmp	r3, #0
   1c634:	bne	1c9c8 <__assert_fail@plt+0xa3d4>
   1c638:	mov	r9, sl
   1c63c:	mov	r0, #1
   1c640:	ldr	sl, [fp, #4]!
   1c644:	add	r4, r4, r8
   1c648:	cmp	sl, #0
   1c64c:	add	r4, r7, r4
   1c650:	add	r5, r5, #1
   1c654:	beq	1c700 <__assert_fail@plt+0xa10c>
   1c658:	ldrb	r1, [sl]
   1c65c:	cmp	r1, #59	; 0x3b
   1c660:	bne	1c5dc <__assert_fail@plt+0x9fe8>
   1c664:	ldrb	r1, [sl, #1]
   1c668:	cmp	r1, #0
   1c66c:	bne	1c60c <__assert_fail@plt+0xa018>
   1c670:	ldr	r3, [sp, #32]
   1c674:	cmp	r3, r5
   1c678:	beq	1c700 <__assert_fail@plt+0xa10c>
   1c67c:	ldr	r3, [r4]
   1c680:	cmp	r3, #0
   1c684:	beq	1c700 <__assert_fail@plt+0xa10c>
   1c688:	ldr	r3, [sp, #28]
   1c68c:	ldrb	r3, [r3, #40]	; 0x28
   1c690:	cmp	r3, #0
   1c694:	beq	1c71c <__assert_fail@plt+0xa128>
   1c698:	ldr	r2, [sp, #40]	; 0x28
   1c69c:	ldr	r1, [pc, #996]	; 1ca88 <__assert_fail@plt+0xa494>
   1c6a0:	ldr	r3, [pc, #1004]	; 1ca94 <__assert_fail@plt+0xa4a0>
   1c6a4:	cmp	r2, r1
   1c6a8:	ldr	r7, [pc, #1000]	; 1ca98 <__assert_fail@plt+0xa4a4>
   1c6ac:	moveq	r7, r3
   1c6b0:	cmp	r6, #1
   1c6b4:	bgt	1ca54 <__assert_fail@plt+0xa460>
   1c6b8:	mov	r0, r9
   1c6bc:	bl	12300 <strlen@plt>
   1c6c0:	cmp	r0, #2
   1c6c4:	beq	1c71c <__assert_fail@plt+0xa128>
   1c6c8:	mov	r3, r7
   1c6cc:	add	r0, sp, #52	; 0x34
   1c6d0:	ldr	r2, [pc, #964]	; 1ca9c <__assert_fail@plt+0xa4a8>
   1c6d4:	mov	r1, #19
   1c6d8:	bl	12360 <snprintf@plt>
   1c6dc:	cmp	r0, #19
   1c6e0:	bls	1c94c <__assert_fail@plt+0xa358>
   1c6e4:	ldr	r3, [pc, #948]	; 1caa0 <__assert_fail@plt+0xa4ac>
   1c6e8:	ldr	r2, [pc, #948]	; 1caa4 <__assert_fail@plt+0xa4b0>
   1c6ec:	ldr	r1, [pc, #948]	; 1caa8 <__assert_fail@plt+0xa4b4>
   1c6f0:	ldr	r0, [pc, #948]	; 1caac <__assert_fail@plt+0xa4b8>
   1c6f4:	bl	125f4 <__assert_fail@plt>
   1c6f8:	mov	r0, #0
   1c6fc:	b	1c640 <__assert_fail@plt+0xa04c>
   1c700:	ldr	r3, [sp, #36]	; 0x24
   1c704:	ldr	r0, [sp, #28]
   1c708:	str	r5, [r3]
   1c70c:	bl	2db68 <__assert_fail@plt+0x1b574>
   1c710:	mov	r0, #0
   1c714:	add	sp, sp, #76	; 0x4c
   1c718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c71c:	ldr	r6, [sp, #28]
   1c720:	mov	r1, #2048	; 0x800
   1c724:	add	r7, r6, #44	; 0x2c
   1c728:	mov	r0, r7
   1c72c:	bl	1f3d8 <__assert_fail@plt+0xcde4>
   1c730:	add	r9, r6, #40	; 0x28
   1c734:	sub	r0, r0, #1
   1c738:	cmp	r0, #1
   1c73c:	bls	1ca48 <__assert_fail@plt+0xa454>
   1c740:	mov	r0, r7
   1c744:	bl	1f4a4 <__assert_fail@plt+0xceb0>
   1c748:	ldr	r1, [sp, #28]
   1c74c:	ldr	r2, [pc, #860]	; 1cab0 <__assert_fail@plt+0xa4bc>
   1c750:	ldrb	r3, [r1, #40]	; 0x28
   1c754:	str	r2, [r1, #76]	; 0x4c
   1c758:	cmp	r3, #0
   1c75c:	beq	1c824 <__assert_fail@plt+0xa230>
   1c760:	ldr	sl, [sp, #32]
   1c764:	mov	r6, #0
   1c768:	sub	r3, r5, sl
   1c76c:	sub	r3, r3, #1
   1c770:	add	r8, r1, #88	; 0x58
   1c774:	mov	r2, r9
   1c778:	str	r3, [r1, #72]	; 0x48
   1c77c:	str	r6, [r1, #132]	; 0x84
   1c780:	str	r6, [r1, #68]	; 0x44
   1c784:	str	r6, [r1, #64]	; 0x40
   1c788:	str	r6, [r1, #80]	; 0x50
   1c78c:	str	r6, [r1, #84]	; 0x54
   1c790:	mov	r0, r7
   1c794:	mov	r1, r8
   1c798:	sub	r9, r5, #1
   1c79c:	bl	1f4c4 <__assert_fail@plt+0xced0>
   1c7a0:	cmp	sl, r9
   1c7a4:	bge	1c7f8 <__assert_fail@plt+0xa204>
   1c7a8:	str	r5, [sp, #20]
   1c7ac:	ldr	fp, [sp, #44]	; 0x2c
   1c7b0:	ldr	r5, [sp, #32]
   1c7b4:	mov	sl, #1
   1c7b8:	str	r4, [sp, #24]
   1c7bc:	ldr	r4, [fp], #4
   1c7c0:	add	r5, r5, #1
   1c7c4:	mov	r0, r4
   1c7c8:	bl	12300 <strlen@plt>
   1c7cc:	mov	r2, r4
   1c7d0:	stmib	sp, {r6, sl}
   1c7d4:	str	r6, [sp]
   1c7d8:	mov	r1, r8
   1c7dc:	add	r3, r0, #1
   1c7e0:	mov	r0, r7
   1c7e4:	bl	1ec24 <__assert_fail@plt+0xc630>
   1c7e8:	cmp	r9, r5
   1c7ec:	bne	1c7bc <__assert_fail@plt+0xa1c8>
   1c7f0:	ldr	r5, [sp, #20]
   1c7f4:	ldr	r4, [sp, #24]
   1c7f8:	ldr	r3, [r4]
   1c7fc:	mov	r0, #1
   1c800:	cmp	r3, #0
   1c804:	ldr	r3, [sp, #36]	; 0x24
   1c808:	addne	r5, r5, #1
   1c80c:	str	r5, [r3]
   1c810:	add	sp, sp, #76	; 0x4c
   1c814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c818:	mov	r0, r2
   1c81c:	add	sp, sp, #76	; 0x4c
   1c820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c824:	ldr	r6, [sp, #28]
   1c828:	ldr	r2, [sp, #32]
   1c82c:	sub	r0, r5, r2
   1c830:	ldr	r2, [pc, #600]	; 1ca90 <__assert_fail@plt+0xa49c>
   1c834:	str	r3, [r6, #80]	; 0x50
   1c838:	str	r3, [r6, #84]	; 0x54
   1c83c:	mov	r3, #2
   1c840:	str	r0, [r6, #136]	; 0x88
   1c844:	str	r2, [r6, #68]	; 0x44
   1c848:	str	r3, [r6, #64]	; 0x40
   1c84c:	lsl	r0, r0, #2
   1c850:	bl	2c184 <__assert_fail@plt+0x19b90>
   1c854:	add	r1, r6, #88	; 0x58
   1c858:	mov	r2, r9
   1c85c:	str	r0, [r6, #132]	; 0x84
   1c860:	mov	r0, r7
   1c864:	bl	1f4c4 <__assert_fail@plt+0xced0>
   1c868:	ldr	r1, [r6, #136]	; 0x88
   1c86c:	cmp	r1, #0
   1c870:	ble	1c7f8 <__assert_fail@plt+0xa204>
   1c874:	ldr	r3, [r6, #132]	; 0x84
   1c878:	ldr	r2, [sp, #44]	; 0x2c
   1c87c:	add	r1, r3, r1, lsl #2
   1c880:	ldr	r0, [r2], #4
   1c884:	str	r0, [r3], #4
   1c888:	cmp	r3, r1
   1c88c:	bne	1c880 <__assert_fail@plt+0xa28c>
   1c890:	b	1c7f8 <__assert_fail@plt+0xa204>
   1c894:	ldr	r2, [sp, #28]
   1c898:	ldr	r3, [pc, #484]	; 1ca84 <__assert_fail@plt+0xa490>
   1c89c:	mov	r5, #0
   1c8a0:	str	r5, [r2, #144]	; 0x90
   1c8a4:	ldr	r0, [pc, #520]	; 1cab4 <__assert_fail@plt+0xa4c0>
   1c8a8:	strb	r5, [r3, #14]
   1c8ac:	bl	12228 <getenv@plt>
   1c8b0:	subs	r4, r0, #0
   1c8b4:	beq	1c58c <__assert_fail@plt+0x9f98>
   1c8b8:	add	r6, sp, #52	; 0x34
   1c8bc:	add	r3, sp, #48	; 0x30
   1c8c0:	str	r6, [sp]
   1c8c4:	mov	r2, #1
   1c8c8:	ldr	r1, [pc, #488]	; 1cab8 <__assert_fail@plt+0xa4c4>
   1c8cc:	bl	20c90 <__assert_fail@plt+0xe69c>
   1c8d0:	ldr	r8, [pc, #480]	; 1cab8 <__assert_fail@plt+0xa4c4>
   1c8d4:	b	1c900 <__assert_fail@plt+0xa30c>
   1c8d8:	cmp	r3, #47	; 0x2f
   1c8dc:	bne	1c9e8 <__assert_fail@plt+0xa3f4>
   1c8e0:	str	r6, [sp]
   1c8e4:	add	r3, sp, #48	; 0x30
   1c8e8:	mov	r2, r5
   1c8ec:	mov	r1, r8
   1c8f0:	mov	r0, r4
   1c8f4:	bl	20c90 <__assert_fail@plt+0xe69c>
   1c8f8:	cmp	r0, #0
   1c8fc:	beq	1c58c <__assert_fail@plt+0x9f98>
   1c900:	ldr	r1, [sp, #52]	; 0x34
   1c904:	cmp	r1, #0
   1c908:	beq	1c928 <__assert_fail@plt+0xa334>
   1c90c:	ldr	r3, [sp, #48]	; 0x30
   1c910:	cmp	r1, #1
   1c914:	add	r0, r4, r3
   1c918:	ldrb	r3, [r4, r3]
   1c91c:	bne	1c8d8 <__assert_fail@plt+0xa2e4>
   1c920:	cmp	r3, #46	; 0x2e
   1c924:	bne	1c8d8 <__assert_fail@plt+0xa2e4>
   1c928:	mov	r2, #5
   1c92c:	ldr	r1, [pc, #392]	; 1cabc <__assert_fail@plt+0xa4c8>
   1c930:	mov	r0, #0
   1c934:	bl	120b4 <dcgettext@plt>
   1c938:	mov	r3, r9
   1c93c:	mov	r1, #0
   1c940:	mov	r2, r0
   1c944:	mov	r0, #1
   1c948:	bl	121ec <error@plt>
   1c94c:	mov	r2, #5
   1c950:	ldr	r1, [pc, #360]	; 1cac0 <__assert_fail@plt+0xa4cc>
   1c954:	mov	r0, #0
   1c958:	bl	120b4 <dcgettext@plt>
   1c95c:	ldr	r4, [pc, #288]	; 1ca84 <__assert_fail@plt+0xa490>
   1c960:	add	r2, sp, #52	; 0x34
   1c964:	ldr	r1, [r4, #72]	; 0x48
   1c968:	mov	r5, r0
   1c96c:	mov	r0, #0
   1c970:	bl	2b208 <__assert_fail@plt+0x18c14>
   1c974:	ldr	r1, [r4, #72]	; 0x48
   1c978:	ldr	r2, [pc, #272]	; 1ca90 <__assert_fail@plt+0xa49c>
   1c97c:	mov	r6, r0
   1c980:	mov	r0, #1
   1c984:	bl	2b208 <__assert_fail@plt+0x18c14>
   1c988:	mov	r2, r9
   1c98c:	ldr	r1, [r4, #72]	; 0x48
   1c990:	mov	r7, r0
   1c994:	mov	r0, #2
   1c998:	bl	2b208 <__assert_fail@plt+0x18c14>
   1c99c:	str	r7, [sp]
   1c9a0:	mov	r3, r6
   1c9a4:	mov	r2, r5
   1c9a8:	mov	r1, #0
   1c9ac:	str	r0, [sp, #4]
   1c9b0:	mov	r0, #1
   1c9b4:	bl	121ec <error@plt>
   1c9b8:	ldr	r2, [sp, #28]
   1c9bc:	mov	r3, #1
   1c9c0:	strb	r3, [r2, #40]	; 0x28
   1c9c4:	b	1c670 <__assert_fail@plt+0xa07c>
   1c9c8:	ldr	r1, [pc, #244]	; 1cac4 <__assert_fail@plt+0xa4d0>
   1c9cc:	mov	r2, #5
   1c9d0:	mov	r0, #0
   1c9d4:	bl	120b4 <dcgettext@plt>
   1c9d8:	mov	r1, #0
   1c9dc:	mov	r2, r0
   1c9e0:	mov	r0, #1
   1c9e4:	bl	121ec <error@plt>
   1c9e8:	bl	12000 <strndup@plt>
   1c9ec:	ldr	r1, [pc, #212]	; 1cac8 <__assert_fail@plt+0xa4d4>
   1c9f0:	mov	r2, #5
   1c9f4:	mov	r5, r0
   1c9f8:	mov	r0, #0
   1c9fc:	bl	120b4 <dcgettext@plt>
   1ca00:	cmp	r5, #0
   1ca04:	movne	r1, r5
   1ca08:	ldreq	r1, [sp, #48]	; 0x30
   1ca0c:	mov	r6, r0
   1ca10:	addeq	r1, r4, r1
   1ca14:	mov	r0, #0
   1ca18:	bl	18c78 <__assert_fail@plt+0x6684>
   1ca1c:	str	r9, [sp]
   1ca20:	mov	r2, r6
   1ca24:	mov	r1, #0
   1ca28:	mov	r3, r0
   1ca2c:	mov	r0, #1
   1ca30:	bl	121ec <error@plt>
   1ca34:	ldr	r3, [pc, #100]	; 1caa0 <__assert_fail@plt+0xa4ac>
   1ca38:	ldr	r2, [pc, #140]	; 1cacc <__assert_fail@plt+0xa4d8>
   1ca3c:	ldr	r1, [pc, #100]	; 1caa8 <__assert_fail@plt+0xa4b4>
   1ca40:	ldr	r0, [pc, #136]	; 1cad0 <__assert_fail@plt+0xa4dc>
   1ca44:	bl	125f4 <__assert_fail@plt>
   1ca48:	mov	r2, #5
   1ca4c:	ldr	r1, [pc, #128]	; 1cad4 <__assert_fail@plt+0xa4e0>
   1ca50:	b	1c9d0 <__assert_fail@plt+0xa3dc>
   1ca54:	mov	r2, #5
   1ca58:	ldr	r1, [pc, #120]	; 1cad8 <__assert_fail@plt+0xa4e4>
   1ca5c:	mov	r0, #0
   1ca60:	bl	120b4 <dcgettext@plt>
   1ca64:	mov	r3, r7
   1ca68:	mov	r1, #0
   1ca6c:	mov	r2, r0
   1ca70:	mov	r0, #1
   1ca74:	bl	121ec <error@plt>
   1ca78:	strdeq	r3, [r4], -r0
   1ca7c:	andeq	r4, r1, ip, ror #7
   1ca80:	andeq	r4, r1, r8, lsr #8
   1ca84:	andeq	r7, r5, ip, ror #28
   1ca88:	muleq	r1, r0, lr
   1ca8c:	andeq	r7, r5, ip, ror #10
   1ca90:	andeq	r3, r4, r0, asr #13
   1ca94:	andeq	r4, r4, r0, ror r0
   1ca98:	andeq	r2, r4, r0, asr r0
   1ca9c:	andeq	r3, r4, r0, ror r7
   1caa0:	strdeq	r2, [r4], -r0
   1caa4:	andeq	r0, r0, r6, asr #23
   1caa8:	andeq	r3, r4, r4, lsl #6
   1caac:	andeq	r3, r4, r4, lsl #15
   1cab0:	muleq	r1, r8, r3
   1cab4:	andeq	r3, r4, r4, lsr #13
   1cab8:	andeq	r0, r4, r0, lsl #25
   1cabc:	andeq	r3, r4, r8, lsl #10
   1cac0:	muleq	r4, ip, r7
   1cac4:	andeq	r3, r4, r4, asr #13
   1cac8:	andeq	r3, r4, r4, lsl #12
   1cacc:	andeq	r0, r0, r9, ror fp
   1cad0:	andeq	r3, r4, ip, lsr #13
   1cad4:	ldrdeq	r3, [r4], -r8
   1cad8:	andeq	r3, r4, r8, lsr r7
   1cadc:	mov	r3, r2
   1cae0:	mov	r2, r1
   1cae4:	mov	r1, r0
   1cae8:	ldr	r0, [pc]	; 1caf0 <__assert_fail@plt+0xa4fc>
   1caec:	b	1c4c0 <__assert_fail@plt+0x9ecc>
   1caf0:	strdeq	r0, [r4], -r8
   1caf4:	mov	r3, r2
   1caf8:	mov	r2, r1
   1cafc:	mov	r1, r0
   1cb00:	ldr	r0, [pc]	; 1cb08 <__assert_fail@plt+0xa514>
   1cb04:	b	1c4c0 <__assert_fail@plt+0x9ecc>
   1cb08:	andeq	r3, r4, r4, lsl #16
   1cb0c:	mov	r3, r2
   1cb10:	mov	r2, r1
   1cb14:	mov	r1, r0
   1cb18:	ldr	r0, [pc]	; 1cb20 <__assert_fail@plt+0xa52c>
   1cb1c:	b	1c4c0 <__assert_fail@plt+0x9ecc>
   1cb20:	andeq	r3, r4, r8, lsl #16
   1cb24:	mov	r3, r2
   1cb28:	mov	r2, r1
   1cb2c:	mov	r1, r0
   1cb30:	ldr	r0, [pc]	; 1cb38 <__assert_fail@plt+0xa544>
   1cb34:	b	1c4c0 <__assert_fail@plt+0x9ecc>
   1cb38:	andeq	r3, r4, r4, lsl r8
   1cb3c:	push	{r4, lr}
   1cb40:	bl	16360 <__assert_fail@plt+0x3d6c>
   1cb44:	ldr	ip, [pc, #36]	; 1cb70 <__assert_fail@plt+0xa57c>
   1cb48:	mov	r3, #0
   1cb4c:	mov	r1, #3
   1cb50:	mov	r2, #2
   1cb54:	str	ip, [r0]
   1cb58:	str	r1, [r0, #8]
   1cb5c:	str	r2, [r0, #12]
   1cb60:	strb	r3, [r0, #19]
   1cb64:	strb	r3, [r0, #18]
   1cb68:	mov	r0, #1
   1cb6c:	pop	{r4, pc}
   1cb70:	andeq	r3, r1, r0, ror #19
   1cb74:	push	{r4, lr}
   1cb78:	bl	16360 <__assert_fail@plt+0x3d6c>
   1cb7c:	ldr	r1, [pc, #32]	; 1cba4 <__assert_fail@plt+0xa5b0>
   1cb80:	mov	r2, #3
   1cb84:	mov	r3, #0
   1cb88:	str	r1, [r0]
   1cb8c:	str	r2, [r0, #8]
   1cb90:	str	r2, [r0, #12]
   1cb94:	strb	r3, [r0, #19]
   1cb98:	strb	r3, [r0, #18]
   1cb9c:	mov	r0, #1
   1cba0:	pop	{r4, pc}
   1cba4:	muleq	r1, r0, r8
   1cba8:	push	{r4, lr}
   1cbac:	bl	16360 <__assert_fail@plt+0x3d6c>
   1cbb0:	ldr	lr, [pc, #44]	; 1cbe4 <__assert_fail@plt+0xa5f0>
   1cbb4:	mov	r2, #0
   1cbb8:	mov	r1, #1065353216	; 0x3f800000
   1cbbc:	mov	ip, #3
   1cbc0:	mov	r3, r0
   1cbc4:	mov	r0, #1
   1cbc8:	str	lr, [r3]
   1cbcc:	str	ip, [r3, #8]
   1cbd0:	str	r1, [r3, #28]
   1cbd4:	str	r0, [r3, #12]
   1cbd8:	strb	r2, [r3, #19]
   1cbdc:	strb	r2, [r3, #18]
   1cbe0:	pop	{r4, pc}
   1cbe4:	andeq	r3, r1, r8, asr fp
   1cbe8:	push	{r4, lr}
   1cbec:	bl	16360 <__assert_fail@plt+0x3d6c>
   1cbf0:	ldr	r1, [pc, #32]	; 1cc18 <__assert_fail@plt+0xa624>
   1cbf4:	mov	r3, #0
   1cbf8:	mov	r2, #5
   1cbfc:	str	r1, [r0]
   1cc00:	str	r2, [r0, #8]
   1cc04:	str	r3, [r0, #12]
   1cc08:	strb	r3, [r0, #19]
   1cc0c:	strb	r3, [r0, #18]
   1cc10:	mov	r0, #1
   1cc14:	pop	{r4, pc}
   1cc18:	andeq	r3, r1, ip, asr #21
   1cc1c:	cmp	r1, #0
   1cc20:	ldr	r3, [r2]
   1cc24:	beq	1cca0 <__assert_fail@plt+0xa6ac>
   1cc28:	push	{r4, r5, r6, r7, r8, lr}
   1cc2c:	sub	sp, sp, #8
   1cc30:	ldr	r4, [r1, r3, lsl #2]
   1cc34:	cmp	r4, #0
   1cc38:	beq	1cca8 <__assert_fail@plt+0xa6b4>
   1cc3c:	add	r3, r3, #1
   1cc40:	str	r3, [r2]
   1cc44:	mov	r6, r0
   1cc48:	mov	r0, r4
   1cc4c:	bl	125dc <getgrnam@plt>
   1cc50:	mov	r5, r0
   1cc54:	bl	11ed4 <endgrent@plt>
   1cc58:	cmp	r5, #0
   1cc5c:	beq	1ccb4 <__assert_fail@plt+0xa6c0>
   1cc60:	ldr	r5, [r5, #8]
   1cc64:	mov	r1, r4
   1cc68:	mov	r0, r6
   1cc6c:	bl	17aac <__assert_fail@plt+0x54b8>
   1cc70:	vldr	s14, [pc, #296]	; 1cda0 <__assert_fail@plt+0xa7ac>
   1cc74:	vldr	s15, [pc, #296]	; 1cda4 <__assert_fail@plt+0xa7b0>
   1cc78:	mov	r3, r0
   1cc7c:	ldrd	r0, [r0, #48]	; 0x30
   1cc80:	str	r5, [r3, #40]	; 0x28
   1cc84:	cmp	r1, #0
   1cc88:	cmpeq	r0, #100	; 0x64
   1cc8c:	mov	r0, #1
   1cc90:	vmovcs.f32	s15, s14
   1cc94:	vstr	s15, [r3, #28]
   1cc98:	add	sp, sp, #8
   1cc9c:	pop	{r4, r5, r6, r7, r8, pc}
   1cca0:	mov	r0, r1
   1cca4:	bx	lr
   1cca8:	mov	r0, r4
   1ccac:	add	sp, sp, #8
   1ccb0:	pop	{r4, r5, r6, r7, r8, pc}
   1ccb4:	ldr	r1, [pc, #236]	; 1cda8 <__assert_fail@plt+0xa7b4>
   1ccb8:	mov	r0, r4
   1ccbc:	bl	125e8 <strspn@plt>
   1ccc0:	subs	r7, r0, #0
   1ccc4:	beq	1ccf0 <__assert_fail@plt+0xa6fc>
   1ccc8:	ldrb	r3, [r4, r7]
   1cccc:	add	r7, r4, r7
   1ccd0:	cmp	r3, #0
   1ccd4:	bne	1cd4c <__assert_fail@plt+0xa758>
   1ccd8:	ldr	r3, [pc, #204]	; 1cdac <__assert_fail@plt+0xa7b8>
   1ccdc:	mov	r0, r4
   1cce0:	ldr	r1, [r3, #72]	; 0x48
   1cce4:	bl	20b84 <__assert_fail@plt+0xe590>
   1cce8:	mov	r5, r0
   1ccec:	b	1cc64 <__assert_fail@plt+0xa670>
   1ccf0:	ldrb	r5, [r4]
   1ccf4:	mov	r2, #5
   1ccf8:	cmp	r5, #0
   1ccfc:	beq	1cd34 <__assert_fail@plt+0xa740>
   1cd00:	ldr	r1, [pc, #168]	; 1cdb0 <__assert_fail@plt+0xa7bc>
   1cd04:	bl	120b4 <dcgettext@plt>
   1cd08:	ldr	r3, [pc, #156]	; 1cdac <__assert_fail@plt+0xa7b8>
   1cd0c:	mov	r2, r4
   1cd10:	ldr	r1, [r3, #72]	; 0x48
   1cd14:	mov	r5, r0
   1cd18:	mov	r0, r7
   1cd1c:	bl	2b208 <__assert_fail@plt+0x18c14>
   1cd20:	mov	r2, r5
   1cd24:	mov	r1, r7
   1cd28:	mov	r3, r0
   1cd2c:	mov	r0, #1
   1cd30:	bl	121ec <error@plt>
   1cd34:	ldr	r1, [pc, #120]	; 1cdb4 <__assert_fail@plt+0xa7c0>
   1cd38:	bl	120b4 <dcgettext@plt>
   1cd3c:	mov	r1, r5
   1cd40:	mov	r2, r0
   1cd44:	mov	r0, #1
   1cd48:	bl	121ec <error@plt>
   1cd4c:	mov	r2, #5
   1cd50:	ldr	r1, [pc, #96]	; 1cdb8 <__assert_fail@plt+0xa7c4>
   1cd54:	mov	r0, r5
   1cd58:	bl	120b4 <dcgettext@plt>
   1cd5c:	ldr	r6, [pc, #72]	; 1cdac <__assert_fail@plt+0xa7b8>
   1cd60:	mov	r2, r4
   1cd64:	ldr	r1, [r6, #72]	; 0x48
   1cd68:	mov	r8, r0
   1cd6c:	mov	r0, r5
   1cd70:	bl	2b208 <__assert_fail@plt+0x18c14>
   1cd74:	mov	r2, r7
   1cd78:	ldr	r1, [r6, #72]	; 0x48
   1cd7c:	mov	r4, r0
   1cd80:	mov	r0, #1
   1cd84:	bl	2b208 <__assert_fail@plt+0x18c14>
   1cd88:	mov	r3, r4
   1cd8c:	mov	r2, r8
   1cd90:	mov	r1, r5
   1cd94:	str	r0, [sp]
   1cd98:	mov	r0, #1
   1cd9c:	bl	121ec <error@plt>
   1cda0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cda4:	svccc	0x007d70a4
   1cda8:	andeq	r3, r4, r8, lsr #5
   1cdac:	andeq	r7, r5, ip, ror #28
   1cdb0:	muleq	r4, ip, r8
   1cdb4:	andeq	r3, r4, r4, asr #17
   1cdb8:	andeq	r3, r4, ip, lsl r8
   1cdbc:	push	{r4, lr}
   1cdc0:	mov	r1, #0
   1cdc4:	bl	16378 <__assert_fail@plt+0x3d84>
   1cdc8:	ldr	ip, [pc, #36]	; 1cdf4 <__assert_fail@plt+0xa800>
   1cdcc:	mov	r3, #0
   1cdd0:	mov	r1, #2
   1cdd4:	mov	r2, #4
   1cdd8:	str	ip, [r0]
   1cddc:	str	r1, [r0, #8]
   1cde0:	str	r2, [r0, #12]
   1cde4:	strb	r3, [r0, #19]
   1cde8:	strb	r3, [r0, #18]
   1cdec:	mov	r0, #1
   1cdf0:	pop	{r4, pc}
   1cdf4:	andeq	r4, r1, r0, lsl #4
   1cdf8:	push	{r4, lr}
   1cdfc:	mov	r1, #0
   1ce00:	bl	16378 <__assert_fail@plt+0x3d84>
   1ce04:	ldr	r1, [pc, #32]	; 1ce2c <__assert_fail@plt+0xa838>
   1ce08:	mov	r3, #0
   1ce0c:	mov	r2, #4
   1ce10:	str	r1, [r0]
   1ce14:	str	r2, [r0, #8]
   1ce18:	str	r3, [r0, #12]
   1ce1c:	strb	r3, [r0, #19]
   1ce20:	strb	r3, [r0, #18]
   1ce24:	mov	r0, #1
   1ce28:	pop	{r4, pc}
   1ce2c:	andeq	r4, r1, r8, ror #8
   1ce30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce34:	subs	r6, r1, #0
   1ce38:	sub	sp, sp, #124	; 0x7c
   1ce3c:	beq	1ce6c <__assert_fail@plt+0xa878>
   1ce40:	ldr	r7, [r2]
   1ce44:	ldr	r4, [r6, r7, lsl #2]
   1ce48:	lsl	r9, r7, #2
   1ce4c:	cmp	r4, #0
   1ce50:	beq	1ce70 <__assert_fail@plt+0xa87c>
   1ce54:	mov	r8, r0
   1ce58:	mov	r0, r4
   1ce5c:	mov	r5, r2
   1ce60:	bl	12300 <strlen@plt>
   1ce64:	cmp	r0, #8
   1ce68:	beq	1ce7c <__assert_fail@plt+0xa888>
   1ce6c:	mov	r4, #0
   1ce70:	mov	r0, r4
   1ce74:	add	sp, sp, #124	; 0x7c
   1ce78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce7c:	ldr	r3, [pc, #1012]	; 1d278 <__assert_fail@plt+0xac84>
   1ce80:	mov	r2, #6
   1ce84:	ldm	r3, {r0, r1}
   1ce88:	str	r0, [sp, #8]
   1ce8c:	strh	r1, [sp, #12]
   1ce90:	ldr	r0, [pc, #996]	; 1d27c <__assert_fail@plt+0xac88>
   1ce94:	mov	r1, r4
   1ce98:	bl	12594 <strncmp@plt>
   1ce9c:	subs	r3, r0, #0
   1cea0:	bne	1d194 <__assert_fail@plt+0xaba0>
   1cea4:	ldrb	sl, [r4, #6]
   1cea8:	ldrb	fp, [r4, #7]
   1ceac:	cmp	fp, #66	; 0x42
   1ceb0:	cmpne	sl, #66	; 0x42
   1ceb4:	moveq	r4, #1
   1ceb8:	movne	r4, #0
   1cebc:	beq	1d048 <__assert_fail@plt+0xaa54>
   1cec0:	cmp	sl, #116	; 0x74
   1cec4:	beq	1ce70 <__assert_fail@plt+0xa87c>
   1cec8:	add	r0, sp, #8
   1cecc:	mov	r1, sl
   1ced0:	bl	1230c <strchr@plt>
   1ced4:	cmp	r0, #0
   1ced8:	beq	1ce70 <__assert_fail@plt+0xa87c>
   1cedc:	mov	r1, fp
   1cee0:	add	r0, sp, #8
   1cee4:	bl	1230c <strchr@plt>
   1cee8:	cmp	r0, #0
   1ceec:	beq	1ce70 <__assert_fail@plt+0xa87c>
   1cef0:	add	r9, r6, r9
   1cef4:	add	r7, r7, #1
   1cef8:	ldr	r4, [r9, #4]
   1cefc:	cmp	r4, #0
   1cf00:	beq	1d1a8 <__assert_fail@plt+0xabb4>
   1cf04:	mov	r1, r4
   1cf08:	str	r7, [r5]
   1cf0c:	mov	r0, r8
   1cf10:	bl	17aac <__assert_fail@plt+0x54b8>
   1cf14:	cmp	sl, #97	; 0x61
   1cf18:	mov	r4, r0
   1cf1c:	beq	1d0ec <__assert_fail@plt+0xaaf8>
   1cf20:	bls	1d08c <__assert_fail@plt+0xaa98>
   1cf24:	cmp	sl, #99	; 0x63
   1cf28:	beq	1d078 <__assert_fail@plt+0xaa84>
   1cf2c:	cmp	sl, #109	; 0x6d
   1cf30:	moveq	r2, #3
   1cf34:	streq	r2, [r0, #40]	; 0x28
   1cf38:	bne	1d09c <__assert_fail@plt+0xaaa8>
   1cf3c:	cmp	fp, #116	; 0x74
   1cf40:	beq	1d0c4 <__assert_fail@plt+0xaad0>
   1cf44:	add	r0, sp, #16
   1cf48:	bl	17d40 <__assert_fail@plt+0x574c>
   1cf4c:	ldr	r7, [pc, #812]	; 1d280 <__assert_fail@plt+0xac8c>
   1cf50:	ldr	r0, [r5]
   1cf54:	add	r1, sp, #16
   1cf58:	ldr	r2, [r7, #52]	; 0x34
   1cf5c:	ldr	r0, [r6, r0, lsl #2]
   1cf60:	blx	r2
   1cf64:	subs	r8, r0, #0
   1cf68:	bne	1d24c <__assert_fail@plt+0xac58>
   1cf6c:	cmp	fp, #97	; 0x61
   1cf70:	beq	1d168 <__assert_fail@plt+0xab74>
   1cf74:	bls	1d0f8 <__assert_fail@plt+0xab04>
   1cf78:	cmp	fp, #99	; 0x63
   1cf7c:	beq	1d140 <__assert_fail@plt+0xab4c>
   1cf80:	cmp	fp, #109	; 0x6d
   1cf84:	bne	1d154 <__assert_fail@plt+0xab60>
   1cf88:	ldr	r1, [sp, #96]	; 0x60
   1cf8c:	ldr	r3, [sp, #100]	; 0x64
   1cf90:	str	r1, [r4, #48]	; 0x30
   1cf94:	str	r3, [r4, #52]	; 0x34
   1cf98:	ldr	r3, [r7, #28]
   1cf9c:	ldr	r2, [pc, #736]	; 1d284 <__assert_fail@plt+0xac90>
   1cfa0:	sub	r3, r3, r1
   1cfa4:	vldr	s14, [pc, #692]	; 1d260 <__assert_fail@plt+0xac6c>
   1cfa8:	smull	r1, r2, r2, r3
   1cfac:	add	r2, r2, r3
   1cfb0:	asr	r3, r3, #31
   1cfb4:	rsb	r3, r3, r2, asr #16
   1cfb8:	mov	r2, #0
   1cfbc:	vmov	s15, r3
   1cfc0:	str	r2, [r4, #44]	; 0x2c
   1cfc4:	vcvt.f32.s32	s15, s15
   1cfc8:	vcmpe.f32	s15, s14
   1cfcc:	vmrs	APSR_nzcv, fpscr
   1cfd0:	bmi	1d084 <__assert_fail@plt+0xaa90>
   1cfd4:	vldr	s14, [pc, #648]	; 1d264 <__assert_fail@plt+0xac70>
   1cfd8:	vcmpe.f32	s15, s14
   1cfdc:	vmrs	APSR_nzcv, fpscr
   1cfe0:	bmi	1d17c <__assert_fail@plt+0xab88>
   1cfe4:	vldr	s12, [pc, #636]	; 1d268 <__assert_fail@plt+0xac74>
   1cfe8:	vldr	s14, [pc, #636]	; 1d26c <__assert_fail@plt+0xac78>
   1cfec:	vldr	s13, [pc, #636]	; 1d270 <__assert_fail@plt+0xac7c>
   1cff0:	vcmpe.f32	s15, s12
   1cff4:	vmrs	APSR_nzcv, fpscr
   1cff8:	vmovle.f32	s15, s13
   1cffc:	vmovgt.f32	s15, s14
   1d000:	ldr	r3, [r5]
   1d004:	ldr	r2, [r4]
   1d008:	add	r3, r3, #1
   1d00c:	cmp	r2, #0
   1d010:	vstr	s15, [r4, #28]
   1d014:	str	r3, [r5]
   1d018:	beq	1d1e8 <__assert_fail@plt+0xabf4>
   1d01c:	ldr	r3, [pc, #612]	; 1d288 <__assert_fail@plt+0xac94>
   1d020:	cmp	r2, r3
   1d024:	bne	1d238 <__assert_fail@plt+0xac44>
   1d028:	ldrb	r4, [r4, #18]
   1d02c:	cmp	r4, #0
   1d030:	bne	1ce70 <__assert_fail@plt+0xa87c>
   1d034:	ldr	r3, [pc, #592]	; 1d28c <__assert_fail@plt+0xac98>
   1d038:	ldr	r2, [pc, #592]	; 1d290 <__assert_fail@plt+0xac9c>
   1d03c:	ldr	r1, [pc, #592]	; 1d294 <__assert_fail@plt+0xaca0>
   1d040:	ldr	r0, [pc, #592]	; 1d298 <__assert_fail@plt+0xaca4>
   1d044:	bl	125f4 <__assert_fail@plt>
   1d048:	mov	r2, #5
   1d04c:	ldr	r1, [pc, #584]	; 1d29c <__assert_fail@plt+0xaca8>
   1d050:	str	r3, [sp, #4]
   1d054:	bl	120b4 <dcgettext@plt>
   1d058:	ldr	r3, [sp, #4]
   1d05c:	mov	r1, r3
   1d060:	mov	r2, r0
   1d064:	mov	r0, r3
   1d068:	bl	121ec <error@plt>
   1d06c:	ldr	r3, [sp, #4]
   1d070:	mov	r4, r3
   1d074:	b	1ce70 <__assert_fail@plt+0xa87c>
   1d078:	mov	r2, #2
   1d07c:	str	r2, [r0, #40]	; 0x28
   1d080:	b	1cf3c <__assert_fail@plt+0xa948>
   1d084:	vldr	s15, [pc, #488]	; 1d274 <__assert_fail@plt+0xac80>
   1d088:	b	1d000 <__assert_fail@plt+0xaa0c>
   1d08c:	cmp	sl, #66	; 0x42
   1d090:	moveq	r2, #1
   1d094:	streq	r2, [r0, #40]	; 0x28
   1d098:	beq	1cf3c <__assert_fail@plt+0xa948>
   1d09c:	mov	r1, sl
   1d0a0:	add	r0, sp, #8
   1d0a4:	bl	1230c <strchr@plt>
   1d0a8:	ldr	r3, [pc, #476]	; 1d28c <__assert_fail@plt+0xac98>
   1d0ac:	cmp	r0, #0
   1d0b0:	beq	1d184 <__assert_fail@plt+0xab90>
   1d0b4:	ldr	r2, [pc, #484]	; 1d2a0 <__assert_fail@plt+0xacac>
   1d0b8:	ldr	r1, [pc, #468]	; 1d294 <__assert_fail@plt+0xaca0>
   1d0bc:	ldr	r0, [pc, #480]	; 1d2a4 <__assert_fail@plt+0xacb0>
   1d0c0:	bl	125f4 <__assert_fail@plt>
   1d0c4:	ldr	r3, [r5]
   1d0c8:	ldr	r2, [pc, #472]	; 1d2a8 <__assert_fail@plt+0xacb4>
   1d0cc:	add	r0, r4, #48	; 0x30
   1d0d0:	ldr	r1, [r6, r3, lsl #2]
   1d0d4:	bl	295a0 <__assert_fail@plt+0x16fac>
   1d0d8:	subs	r7, r0, #0
   1d0dc:	beq	1d1fc <__assert_fail@plt+0xac08>
   1d0e0:	ldr	r1, [r4, #48]	; 0x30
   1d0e4:	ldr	r7, [pc, #404]	; 1d280 <__assert_fail@plt+0xac8c>
   1d0e8:	b	1cf98 <__assert_fail@plt+0xa9a4>
   1d0ec:	mov	r2, #0
   1d0f0:	str	r2, [r0, #40]	; 0x28
   1d0f4:	b	1cf3c <__assert_fail@plt+0xa948>
   1d0f8:	cmp	fp, #66	; 0x42
   1d0fc:	bne	1d154 <__assert_fail@plt+0xab60>
   1d100:	mvn	r3, #0
   1d104:	str	r3, [r4, #48]	; 0x30
   1d108:	str	r3, [r4, #52]	; 0x34
   1d10c:	mov	r2, #5
   1d110:	ldr	r1, [pc, #404]	; 1d2ac <__assert_fail@plt+0xacb8>
   1d114:	bl	120b4 <dcgettext@plt>
   1d118:	ldr	r3, [r5]
   1d11c:	ldr	r1, [r6, r3, lsl #2]
   1d120:	mov	r4, r0
   1d124:	mov	r0, r8
   1d128:	bl	18c78 <__assert_fail@plt+0x6684>
   1d12c:	mov	r2, r4
   1d130:	mov	r1, r8
   1d134:	mov	r3, r0
   1d138:	mov	r0, #1
   1d13c:	bl	121ec <error@plt>
   1d140:	ldr	r1, [sp, #104]	; 0x68
   1d144:	ldr	r3, [sp, #108]	; 0x6c
   1d148:	str	r1, [r4, #48]	; 0x30
   1d14c:	str	r3, [r4, #52]	; 0x34
   1d150:	b	1cf98 <__assert_fail@plt+0xa9a4>
   1d154:	ldr	r3, [pc, #340]	; 1d2b0 <__assert_fail@plt+0xacbc>
   1d158:	ldr	r2, [pc, #340]	; 1d2b4 <__assert_fail@plt+0xacc0>
   1d15c:	ldr	r1, [pc, #304]	; 1d294 <__assert_fail@plt+0xaca0>
   1d160:	ldr	r0, [pc, #316]	; 1d2a4 <__assert_fail@plt+0xacb0>
   1d164:	bl	125f4 <__assert_fail@plt>
   1d168:	ldr	r1, [sp, #88]	; 0x58
   1d16c:	ldr	r3, [sp, #92]	; 0x5c
   1d170:	str	r1, [r4, #48]	; 0x30
   1d174:	str	r3, [r4, #52]	; 0x34
   1d178:	b	1cf98 <__assert_fail@plt+0xa9a4>
   1d17c:	vldr	s15, [pc, #232]	; 1d26c <__assert_fail@plt+0xac78>
   1d180:	b	1d000 <__assert_fail@plt+0xaa0c>
   1d184:	ldr	r2, [pc, #300]	; 1d2b8 <__assert_fail@plt+0xacc4>
   1d188:	ldr	r1, [pc, #260]	; 1d294 <__assert_fail@plt+0xaca0>
   1d18c:	ldr	r0, [pc, #296]	; 1d2bc <__assert_fail@plt+0xacc8>
   1d190:	bl	125f4 <__assert_fail@plt>
   1d194:	ldr	r3, [pc, #240]	; 1d28c <__assert_fail@plt+0xac98>
   1d198:	ldr	r2, [pc, #288]	; 1d2c0 <__assert_fail@plt+0xaccc>
   1d19c:	ldr	r1, [pc, #240]	; 1d294 <__assert_fail@plt+0xaca0>
   1d1a0:	ldr	r0, [pc, #284]	; 1d2c4 <__assert_fail@plt+0xacd0>
   1d1a4:	bl	125f4 <__assert_fail@plt>
   1d1a8:	mov	r2, #5
   1d1ac:	ldr	r1, [pc, #276]	; 1d2c8 <__assert_fail@plt+0xacd4>
   1d1b0:	mov	r0, r4
   1d1b4:	bl	120b4 <dcgettext@plt>
   1d1b8:	ldr	r3, [pc, #192]	; 1d280 <__assert_fail@plt+0xac8c>
   1d1bc:	ldr	r2, [r5]
   1d1c0:	ldr	r1, [r3, #72]	; 0x48
   1d1c4:	ldr	r2, [r6, r2, lsl #2]
   1d1c8:	mov	r7, r0
   1d1cc:	mov	r0, r4
   1d1d0:	bl	2b208 <__assert_fail@plt+0x18c14>
   1d1d4:	mov	r2, r7
   1d1d8:	mov	r1, r4
   1d1dc:	mov	r3, r0
   1d1e0:	mov	r0, #1
   1d1e4:	bl	121ec <error@plt>
   1d1e8:	ldr	r3, [pc, #156]	; 1d28c <__assert_fail@plt+0xac98>
   1d1ec:	ldr	r2, [pc, #216]	; 1d2cc <__assert_fail@plt+0xacd8>
   1d1f0:	ldr	r1, [pc, #156]	; 1d294 <__assert_fail@plt+0xaca0>
   1d1f4:	ldr	r0, [pc, #212]	; 1d2d0 <__assert_fail@plt+0xacdc>
   1d1f8:	bl	125f4 <__assert_fail@plt>
   1d1fc:	mov	r2, #5
   1d200:	ldr	r1, [pc, #204]	; 1d2d4 <__assert_fail@plt+0xace0>
   1d204:	bl	120b4 <dcgettext@plt>
   1d208:	ldr	r3, [pc, #112]	; 1d280 <__assert_fail@plt+0xac8c>
   1d20c:	ldr	r2, [r5]
   1d210:	ldr	r1, [r3, #72]	; 0x48
   1d214:	ldr	r2, [r6, r2, lsl #2]
   1d218:	mov	r4, r0
   1d21c:	mov	r0, r7
   1d220:	bl	2b208 <__assert_fail@plt+0x18c14>
   1d224:	mov	r2, r4
   1d228:	mov	r1, r7
   1d22c:	mov	r3, r0
   1d230:	mov	r0, #1
   1d234:	bl	121ec <error@plt>
   1d238:	ldr	r3, [pc, #76]	; 1d28c <__assert_fail@plt+0xac98>
   1d23c:	mov	r2, #1648	; 0x670
   1d240:	ldr	r1, [pc, #76]	; 1d294 <__assert_fail@plt+0xaca0>
   1d244:	ldr	r0, [pc, #140]	; 1d2d8 <__assert_fail@plt+0xace4>
   1d248:	bl	125f4 <__assert_fail@plt>
   1d24c:	bl	12348 <__errno_location@plt>
   1d250:	ldr	r3, [r5]
   1d254:	ldr	r1, [r6, r3, lsl #2]
   1d258:	ldr	r0, [r0]
   1d25c:	bl	18ca0 <__assert_fail@plt+0x66ac>
   1d260:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d264:	svccc	0x00800000
   1d268:	sbcmi	r0, r8, #0
   1d26c:			; <UNDEFINED> instruction: 0x3e99999a
   1d270:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d274:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d278:	andeq	r3, r4, r4, ror #20
   1d27c:	strdeq	r3, [r4], -ip
   1d280:	andeq	r7, r5, ip, ror #28
   1d284:	eorgt	r4, lr, #29360128	; 0x1c00000
   1d288:	andeq	r4, r1, ip, ror r2
   1d28c:	andeq	r2, r4, r0, lsl #22
   1d290:	andeq	r0, r0, r1, ror r6
   1d294:	andeq	r3, r4, r4, lsl #6
   1d298:	andeq	r3, r4, r0, asr sl
   1d29c:	andeq	r3, r4, r0, lsr r9
   1d2a0:	andeq	r0, r0, ip, asr #12
   1d2a4:			; <UNDEFINED> instruction: 0x00044ab4
   1d2a8:	andeq	r7, r5, r0, lsl #29
   1d2ac:	andeq	r3, r4, ip, ror #19
   1d2b0:	andeq	r2, r4, r0, lsl fp
   1d2b4:	strdeq	r0, [r0], -r2
   1d2b8:	andeq	r0, r0, fp, asr #12
   1d2bc:	muleq	r4, r8, r9
   1d2c0:	andeq	r0, r0, r3, lsl r6
   1d2c4:	andeq	r3, r4, r4, lsl #18
   1d2c8:	andeq	r3, r4, r8, ror r9
   1d2cc:	andeq	r0, r0, pc, ror #12
   1d2d0:	andeq	r3, r4, r0, lsl sl
   1d2d4:			; <UNDEFINED> instruction: 0x000439b0
   1d2d8:	andeq	r3, r4, ip, lsr #20
   1d2dc:	ldr	r2, [r1]
   1d2e0:	push	{r4, r5, r6, r7, lr}
   1d2e4:	cmp	r2, #2
   1d2e8:	sub	sp, sp, #12
   1d2ec:	mov	r4, r1
   1d2f0:	beq	1d360 <__assert_fail@plt+0xad6c>
   1d2f4:	cmp	r2, #1
   1d2f8:	beq	1d388 <__assert_fail@plt+0xad94>
   1d2fc:	cmp	r2, #0
   1d300:	mov	r5, r0
   1d304:	bne	1d36c <__assert_fail@plt+0xad78>
   1d308:	ldr	r7, [pc, #128]	; 1d390 <__assert_fail@plt+0xad9c>
   1d30c:	ldr	r3, [r7]
   1d310:	cmp	r3, #0
   1d314:	beq	1d360 <__assert_fail@plt+0xad6c>
   1d318:	ldr	r3, [pc, #116]	; 1d394 <__assert_fail@plt+0xada0>
   1d31c:	ldrb	r6, [r3, #17]
   1d320:	cmp	r6, #0
   1d324:	bne	1d360 <__assert_fail@plt+0xad6c>
   1d328:	ldrb	r3, [r3, #16]
   1d32c:	cmp	r3, #0
   1d330:	beq	1d360 <__assert_fail@plt+0xad6c>
   1d334:	mov	r2, #5
   1d338:	ldr	r1, [pc, #88]	; 1d398 <__assert_fail@plt+0xada4>
   1d33c:	mov	r0, r6
   1d340:	bl	120b4 <dcgettext@plt>
   1d344:	ldr	r3, [r7]
   1d348:	mov	r1, r6
   1d34c:	stm	sp, {r3, r5}
   1d350:	mov	r3, r5
   1d354:	mov	r2, r0
   1d358:	mov	r0, r6
   1d35c:	bl	121ec <error@plt>
   1d360:	mov	r0, r4
   1d364:	add	sp, sp, #12
   1d368:	pop	{r4, r5, r6, r7, pc}
   1d36c:	ldr	r3, [pc, #28]	; 1d390 <__assert_fail@plt+0xad9c>
   1d370:	ldr	r2, [r3]
   1d374:	cmp	r2, #0
   1d378:	streq	r0, [r3]
   1d37c:	mov	r0, r4
   1d380:	add	sp, sp, #12
   1d384:	pop	{r4, r5, r6, r7, pc}
   1d388:	mov	r4, #0
   1d38c:	b	1d360 <__assert_fail@plt+0xad6c>
   1d390:	ldrdeq	r7, [r5], -r0
   1d394:	andeq	r7, r5, ip, ror #28
   1d398:	andeq	r3, r4, ip, ror #20
   1d39c:	push	{r4, r5, r6, r7, r8, lr}
   1d3a0:	mov	r7, r3
   1d3a4:	mov	r5, r0
   1d3a8:	mov	r4, r1
   1d3ac:	mov	r6, r2
   1d3b0:	bl	12348 <__errno_location@plt>
   1d3b4:	ldr	r3, [r0]
   1d3b8:	cmp	r3, #2
   1d3bc:	beq	1d3d0 <__assert_fail@plt+0xaddc>
   1d3c0:	cmp	r3, #20
   1d3c4:	beq	1d3d0 <__assert_fail@plt+0xaddc>
   1d3c8:	mov	r0, r7
   1d3cc:	pop	{r4, r5, r6, r7, r8, pc}
   1d3d0:	ldr	r3, [pc, #52]	; 1d40c <__assert_fail@plt+0xae18>
   1d3d4:	ldr	r3, [r3, #44]	; 0x2c
   1d3d8:	tst	r3, #2
   1d3dc:	bne	1d3f4 <__assert_fail@plt+0xae00>
   1d3e0:	mov	r2, r6
   1d3e4:	mov	r1, r4
   1d3e8:	mov	r0, r5
   1d3ec:	pop	{r4, r5, r6, r7, r8, lr}
   1d3f0:	b	2b728 <__assert_fail@plt+0x19134>
   1d3f4:	ldr	r3, [pc, #20]	; 1d410 <__assert_fail@plt+0xae1c>
   1d3f8:	mov	r2, r4
   1d3fc:	ldr	r1, [pc, #16]	; 1d414 <__assert_fail@plt+0xae20>
   1d400:	ldr	r0, [r3]
   1d404:	bl	1233c <fprintf@plt>
   1d408:	b	1d3e0 <__assert_fail@plt+0xadec>
   1d40c:	andeq	r7, r5, ip, ror #28
   1d410:	andeq	r7, r5, r8, asr #10
   1d414:	andeq	r3, r4, r4, ror #22
   1d418:	push	{r4, r5, r6, lr}
   1d41c:	mov	r4, r0
   1d420:	mov	r5, r1
   1d424:	mov	r6, r2
   1d428:	bl	2b560 <__assert_fail@plt+0x18f6c>
   1d42c:	subs	r3, r0, #0
   1d430:	popeq	{r4, r5, r6, pc}
   1d434:	mov	r2, r6
   1d438:	mov	r1, r5
   1d43c:	mov	r0, r4
   1d440:	pop	{r4, r5, r6, lr}
   1d444:	b	1d39c <__assert_fail@plt+0xada8>
   1d448:	push	{r4, r5, r6, lr}
   1d44c:	ldr	lr, [pc, #60]	; 1d490 <__assert_fail@plt+0xae9c>
   1d450:	ldr	r4, [lr]
   1d454:	cmp	r4, #0
   1d458:	bne	1d488 <__assert_fail@plt+0xae94>
   1d45c:	mov	r5, r1
   1d460:	mov	r6, r2
   1d464:	mov	r4, r0
   1d468:	bl	2b560 <__assert_fail@plt+0x18f6c>
   1d46c:	subs	r3, r0, #0
   1d470:	popeq	{r4, r5, r6, pc}
   1d474:	mov	r2, r6
   1d478:	mov	r1, r5
   1d47c:	mov	r0, r4
   1d480:	pop	{r4, r5, r6, lr}
   1d484:	b	1d39c <__assert_fail@plt+0xada8>
   1d488:	pop	{r4, r5, r6, lr}
   1d48c:	b	2b728 <__assert_fail@plt+0x19134>
   1d490:	andeq	r7, r5, r0, asr #28
   1d494:	ldr	ip, [pc, #104]	; 1d504 <__assert_fail@plt+0xaf10>
   1d498:	push	{r4, lr}
   1d49c:	ldr	r0, [ip, #4]
   1d4a0:	cmp	r0, #0
   1d4a4:	beq	1d4c8 <__assert_fail@plt+0xaed4>
   1d4a8:	bl	17b04 <__assert_fail@plt+0x5510>
   1d4ac:	mov	r3, #0
   1d4b0:	mov	r2, #1065353216	; 0x3f800000
   1d4b4:	strb	r3, [r0, #19]
   1d4b8:	strb	r3, [r0, #18]
   1d4bc:	str	r2, [r0, #28]
   1d4c0:	mov	r0, #1
   1d4c4:	pop	{r4, pc}
   1d4c8:	ldr	lr, [pc, #56]	; 1d508 <__assert_fail@plt+0xaf14>
   1d4cc:	ldr	r1, [pc, #56]	; 1d50c <__assert_fail@plt+0xaf18>
   1d4d0:	mov	r3, lr
   1d4d4:	mov	r2, r0
   1d4d8:	b	1d4e0 <__assert_fail@plt+0xaeec>
   1d4dc:	ldr	r1, [r3, #20]
   1d4e0:	cmp	r1, #0
   1d4e4:	add	r2, r2, #1
   1d4e8:	beq	1d4a8 <__assert_fail@plt+0xaeb4>
   1d4ec:	ldr	r1, [r3, #16]!
   1d4f0:	cmp	r1, #1
   1d4f4:	bne	1d4dc <__assert_fail@plt+0xaee8>
   1d4f8:	add	r0, lr, r2, lsl #4
   1d4fc:	str	r0, [ip, #4]
   1d500:	b	1d4a8 <__assert_fail@plt+0xaeb4>
   1d504:	ldrdeq	r7, [r5], -r0
   1d508:	andeq	r2, r4, r0, lsr #22
   1d50c:			; <UNDEFINED> instruction: 0x00043bb4
   1d510:	ldr	r3, [pc, #8]	; 1d520 <__assert_fail@plt+0xaf2c>
   1d514:	mov	r2, #1
   1d518:	strb	r2, [r3, #16]
   1d51c:	b	1d494 <__assert_fail@plt+0xaea0>
   1d520:	andeq	r7, r5, ip, ror #28
   1d524:	ldr	r3, [pc, #8]	; 1d534 <__assert_fail@plt+0xaf40>
   1d528:	mov	r2, #0
   1d52c:	strb	r2, [r3, #16]
   1d530:	b	1d494 <__assert_fail@plt+0xaea0>
   1d534:	andeq	r7, r5, ip, ror #28
   1d538:	ldr	r3, [pc, #8]	; 1d548 <__assert_fail@plt+0xaf54>
   1d53c:	mov	r2, #0
   1d540:	strb	r2, [r3, #14]
   1d544:	b	1d494 <__assert_fail@plt+0xaea0>
   1d548:	andeq	r7, r5, ip, ror #28
   1d54c:	ldr	r3, [pc, #8]	; 1d55c <__assert_fail@plt+0xaf68>
   1d550:	mov	r2, #1
   1d554:	strb	r2, [r3, #12]
   1d558:	b	1d494 <__assert_fail@plt+0xaea0>
   1d55c:	andeq	r7, r5, ip, ror #28
   1d560:	ldr	r3, [pc, #8]	; 1d570 <__assert_fail@plt+0xaf7c>
   1d564:	mov	r2, #1
   1d568:	strb	r2, [r3, #13]
   1d56c:	b	1d494 <__assert_fail@plt+0xaea0>
   1d570:	andeq	r7, r5, ip, ror #28
   1d574:	ldr	r3, [pc, #8]	; 1d584 <__assert_fail@plt+0xaf90>
   1d578:	mov	r2, #1
   1d57c:	strb	r2, [r3, #14]
   1d580:	b	1d494 <__assert_fail@plt+0xaea0>
   1d584:	andeq	r7, r5, ip, ror #28
   1d588:	ldr	r3, [pc, #16]	; 1d5a0 <__assert_fail@plt+0xafac>
   1d58c:	mov	r1, #0
   1d590:	mov	r2, #1
   1d594:	strb	r1, [r3]
   1d598:	strb	r2, [r3, #1]
   1d59c:	b	1d494 <__assert_fail@plt+0xaea0>
   1d5a0:	andeq	r7, r5, ip, ror #28
   1d5a4:	push	{r4, r5, r6, lr}
   1d5a8:	ldr	r4, [pc, #76]	; 1d5fc <__assert_fail@plt+0xb008>
   1d5ac:	ldrb	r5, [r4, #17]
   1d5b0:	cmp	r5, #0
   1d5b4:	bne	1d5e4 <__assert_fail@plt+0xaff0>
   1d5b8:	ldrb	r3, [r4, #16]
   1d5bc:	cmp	r3, #0
   1d5c0:	beq	1d5e4 <__assert_fail@plt+0xaff0>
   1d5c4:	mov	r2, #5
   1d5c8:	ldr	r1, [pc, #48]	; 1d600 <__assert_fail@plt+0xb00c>
   1d5cc:	mov	r0, r5
   1d5d0:	bl	120b4 <dcgettext@plt>
   1d5d4:	mov	r1, r5
   1d5d8:	mov	r2, r0
   1d5dc:	mov	r0, r5
   1d5e0:	bl	121ec <error@plt>
   1d5e4:	mov	r2, #0
   1d5e8:	mov	r3, #1
   1d5ec:	strb	r2, [r4]
   1d5f0:	strb	r3, [r4, #1]
   1d5f4:	pop	{r4, r5, r6, lr}
   1d5f8:	b	1d494 <__assert_fail@plt+0xaea0>
   1d5fc:	andeq	r7, r5, ip, ror #28
   1d600:			; <UNDEFINED> instruction: 0x00043bb8
   1d604:	subs	r0, r1, #0
   1d608:	bxeq	lr
   1d60c:	ldr	r3, [r2]
   1d610:	ldr	r0, [r0, r3, lsl #2]
   1d614:	cmp	r0, #0
   1d618:	bxeq	lr
   1d61c:	add	r3, r3, #1
   1d620:	push	{r4, lr}
   1d624:	str	r3, [r2]
   1d628:	bl	20968 <__assert_fail@plt+0xe374>
   1d62c:	ldr	r3, [pc, #8]	; 1d63c <__assert_fail@plt+0xb048>
   1d630:	pop	{r4, lr}
   1d634:	str	r0, [r3, #60]	; 0x3c
   1d638:	b	1d494 <__assert_fail@plt+0xaea0>
   1d63c:	andeq	r7, r5, ip, ror #28
   1d640:	ldr	r3, [pc, #44]	; 1d674 <__assert_fail@plt+0xb080>
   1d644:	mov	r2, #1
   1d648:	ldr	r0, [pc, #40]	; 1d678 <__assert_fail@plt+0xb084>
   1d64c:	ldr	ip, [r3, #44]	; 0x2c
   1d650:	ldr	r1, [pc, #36]	; 1d67c <__assert_fail@plt+0xb088>
   1d654:	tst	ip, #2
   1d658:	strb	r2, [r3, #12]
   1d65c:	str	r2, [r3, #48]	; 0x30
   1d660:	ldrne	r2, [pc, #24]	; 1d680 <__assert_fail@plt+0xb08c>
   1d664:	str	r0, [r3, #52]	; 0x34
   1d668:	str	r1, [r3, #64]	; 0x40
   1d66c:	strne	r2, [r3, #52]	; 0x34
   1d670:	b	1d494 <__assert_fail@plt+0xaea0>
   1d674:	andeq	r7, r5, ip, ror #28
   1d678:	ldrdeq	r8, [r1], -ip
   1d67c:	andeq	sp, r1, r8, lsl r4
   1d680:	andeq	r8, r1, r4, ror #5
   1d684:	push	{r4, lr}
   1d688:	ldr	r4, [pc, #128]	; 1d710 <__assert_fail@plt+0xb11c>
   1d68c:	ldrb	r2, [r4, #8]
   1d690:	cmp	r2, #0
   1d694:	beq	1d6a0 <__assert_fail@plt+0xb0ac>
   1d698:	mov	r0, #1
   1d69c:	pop	{r4, pc}
   1d6a0:	ldr	r1, [pc, #108]	; 1d714 <__assert_fail@plt+0xb120>
   1d6a4:	mov	r0, r1
   1d6a8:	bl	12210 <fnmatch@plt>
   1d6ac:	subs	r2, r0, #0
   1d6b0:	bne	1d6f0 <__assert_fail@plt+0xb0fc>
   1d6b4:	ldr	r1, [pc, #88]	; 1d714 <__assert_fail@plt+0xb120>
   1d6b8:	ldr	r0, [pc, #88]	; 1d718 <__assert_fail@plt+0xb124>
   1d6bc:	bl	12210 <fnmatch@plt>
   1d6c0:	cmp	r0, #0
   1d6c4:	beq	1d6f0 <__assert_fail@plt+0xb0fc>
   1d6c8:	mov	r2, #16
   1d6cc:	ldr	r1, [pc, #64]	; 1d714 <__assert_fail@plt+0xb120>
   1d6d0:	ldr	r0, [pc, #64]	; 1d718 <__assert_fail@plt+0xb124>
   1d6d4:	bl	12210 <fnmatch@plt>
   1d6d8:	cmp	r0, #0
   1d6dc:	bne	1d6f0 <__assert_fail@plt+0xb0fc>
   1d6e0:	mov	r3, #1
   1d6e4:	strb	r3, [r4, #8]
   1d6e8:	mov	r0, #1
   1d6ec:	pop	{r4, pc}
   1d6f0:	mov	r2, #5
   1d6f4:	ldr	r1, [pc, #32]	; 1d71c <__assert_fail@plt+0xb128>
   1d6f8:	mov	r0, #0
   1d6fc:	bl	120b4 <dcgettext@plt>
   1d700:	mov	r1, #0
   1d704:	mov	r2, r0
   1d708:	mov	r0, #1
   1d70c:	bl	121ec <error@plt>
   1d710:	ldrdeq	r7, [r5], -r0
   1d714:	andeq	r3, r4, ip, lsr #24
   1d718:	andeq	r3, r4, r8, ror #24
   1d71c:	andeq	r3, r4, r0, lsr ip
   1d720:	push	{r4, r5, r6, lr}
   1d724:	mov	r4, r1
   1d728:	ldr	r1, [pc, #76]	; 1d77c <__assert_fail@plt+0xb188>
   1d72c:	mov	r5, r0
   1d730:	bl	12528 <strpbrk@plt>
   1d734:	cmp	r0, #0
   1d738:	beq	1d744 <__assert_fail@plt+0xb150>
   1d73c:	vldr	s0, [pc, #48]	; 1d774 <__assert_fail@plt+0xb180>
   1d740:	pop	{r4, r5, r6, pc}
   1d744:	cmp	r4, #0
   1d748:	beq	1d76c <__assert_fail@plt+0xb178>
   1d74c:	mov	r0, r5
   1d750:	mov	r1, #46	; 0x2e
   1d754:	bl	1230c <strchr@plt>
   1d758:	vldr	s15, [pc, #20]	; 1d774 <__assert_fail@plt+0xb180>
   1d75c:	vldr	s0, [pc, #20]	; 1d778 <__assert_fail@plt+0xb184>
   1d760:	cmp	r0, #0
   1d764:	vmovne.f32	s0, s15
   1d768:	pop	{r4, r5, r6, pc}
   1d76c:	vldr	s0, [pc, #4]	; 1d778 <__assert_fail@plt+0xb184>
   1d770:	pop	{r4, r5, r6, pc}
   1d774:	svccc	0x004ccccd
   1d778:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d77c:	andeq	r3, r4, ip, ror #24
   1d780:	push	{r4, r5, r6, r7, lr}
   1d784:	mov	r4, r1
   1d788:	sub	sp, sp, #12
   1d78c:	mov	r7, r0
   1d790:	mov	r5, r2
   1d794:	mov	r6, r3
   1d798:	bl	1d684 <__assert_fail@plt+0xb090>
   1d79c:	cmp	r4, #0
   1d7a0:	beq	1d808 <__assert_fail@plt+0xb214>
   1d7a4:	ldr	r3, [r5]
   1d7a8:	ldr	r4, [r4, r3, lsl #2]
   1d7ac:	cmp	r4, #0
   1d7b0:	beq	1d808 <__assert_fail@plt+0xb214>
   1d7b4:	add	r3, r3, #1
   1d7b8:	str	r3, [r5]
   1d7bc:	mov	r2, r4
   1d7c0:	ldr	r1, [sp, #32]
   1d7c4:	mov	r0, r7
   1d7c8:	bl	17a78 <__assert_fail@plt+0x5484>
   1d7cc:	mov	r1, #0
   1d7d0:	mov	r5, r0
   1d7d4:	str	r4, [r0, #40]	; 0x28
   1d7d8:	strb	r1, [r0, #19]
   1d7dc:	strb	r1, [r0, #18]
   1d7e0:	mov	r0, r4
   1d7e4:	bl	1d720 <__assert_fail@plt+0xb12c>
   1d7e8:	ldr	r3, [pc, #156]	; 1d88c <__assert_fail@plt+0xb298>
   1d7ec:	ldrb	r3, [r3, #17]
   1d7f0:	cmp	r3, #0
   1d7f4:	vstr	s0, [r5, #28]
   1d7f8:	beq	1d814 <__assert_fail@plt+0xb220>
   1d7fc:	mov	r0, #1
   1d800:	add	sp, sp, #12
   1d804:	pop	{r4, r5, r6, r7, pc}
   1d808:	mov	r0, r4
   1d80c:	add	sp, sp, #12
   1d810:	pop	{r4, r5, r6, r7, pc}
   1d814:	mov	r1, #47	; 0x2f
   1d818:	mov	r0, r4
   1d81c:	bl	12468 <strrchr@plt>
   1d820:	cmp	r0, #0
   1d824:	beq	1d7fc <__assert_fail@plt+0xb208>
   1d828:	ldrb	r3, [r0, #1]
   1d82c:	cmp	r3, #0
   1d830:	bne	1d7fc <__assert_fail@plt+0xb208>
   1d834:	ldr	r3, [sp, #32]
   1d838:	ldr	r1, [pc, #80]	; 1d890 <__assert_fail@plt+0xb29c>
   1d83c:	mov	r0, r4
   1d840:	sub	r1, r3, r1
   1d844:	clz	r1, r1
   1d848:	lsr	r1, r1, #5
   1d84c:	bl	15f0c <__assert_fail@plt+0x3918>
   1d850:	subs	r7, r0, #0
   1d854:	bne	1d7fc <__assert_fail@plt+0xb208>
   1d858:	mov	r2, #5
   1d85c:	ldr	r1, [pc, #48]	; 1d894 <__assert_fail@plt+0xb2a0>
   1d860:	bl	120b4 <dcgettext@plt>
   1d864:	mov	r3, r6
   1d868:	str	r4, [sp]
   1d86c:	mov	r1, r7
   1d870:	mov	r2, r0
   1d874:	mov	r0, r7
   1d878:	bl	121ec <error@plt>
   1d87c:	ldr	r3, [pc, #20]	; 1d898 <__assert_fail@plt+0xb2a4>
   1d880:	mov	r0, #1
   1d884:	str	r3, [r5, #28]
   1d888:	b	1d800 <__assert_fail@plt+0xb20c>
   1d88c:	andeq	r7, r5, ip, ror #28
   1d890:	andeq	r4, r1, r0, lsr #1
   1d894:	andeq	r3, r4, r0, ror ip
   1d898:	eorcc	ip, fp, #30464	; 0x7700
   1d89c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d8a0:	sub	sp, sp, #12
   1d8a4:	ldr	ip, [pc, #16]	; 1d8bc <__assert_fail@plt+0xb2c8>
   1d8a8:	ldr	r3, [pc, #16]	; 1d8c0 <__assert_fail@plt+0xb2cc>
   1d8ac:	str	ip, [sp]
   1d8b0:	bl	1d780 <__assert_fail@plt+0xb18c>
   1d8b4:	add	sp, sp, #12
   1d8b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8bc:	andeq	r4, r1, r0, ror r4
   1d8c0:			; <UNDEFINED> instruction: 0x00043cb0
   1d8c4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d8c8:	sub	sp, sp, #12
   1d8cc:	ldr	ip, [pc, #16]	; 1d8e4 <__assert_fail@plt+0xb2f0>
   1d8d0:	ldr	r3, [pc, #16]	; 1d8e8 <__assert_fail@plt+0xb2f4>
   1d8d4:	str	ip, [sp]
   1d8d8:	bl	1d780 <__assert_fail@plt+0xb18c>
   1d8dc:	add	sp, sp, #12
   1d8e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8e4:	andeq	r4, r1, r0, ror r4
   1d8e8:			; <UNDEFINED> instruction: 0x00043cbc
   1d8ec:	push	{lr}		; (str lr, [sp, #-4]!)
   1d8f0:	sub	sp, sp, #12
   1d8f4:	ldr	ip, [pc, #16]	; 1d90c <__assert_fail@plt+0xb318>
   1d8f8:	ldr	r3, [pc, #16]	; 1d910 <__assert_fail@plt+0xb31c>
   1d8fc:	str	ip, [sp]
   1d900:	bl	1d780 <__assert_fail@plt+0xb18c>
   1d904:	add	sp, sp, #12
   1d908:	pop	{pc}		; (ldr pc, [sp], #4)
   1d90c:	andeq	r4, r1, r0, lsr #1
   1d910:	andeq	r3, r4, r4, asr #25
   1d914:	push	{lr}		; (str lr, [sp, #-4]!)
   1d918:	sub	sp, sp, #12
   1d91c:	ldr	ip, [pc, #16]	; 1d934 <__assert_fail@plt+0xb340>
   1d920:	ldr	r3, [pc, #16]	; 1d938 <__assert_fail@plt+0xb344>
   1d924:	str	ip, [sp]
   1d928:	bl	1d780 <__assert_fail@plt+0xb18c>
   1d92c:	add	sp, sp, #12
   1d930:	pop	{pc}		; (ldr pc, [sp], #4)
   1d934:	andeq	r4, r1, r0, lsr #1
   1d938:	ldrdeq	r3, [r4], -r0
   1d93c:	push	{r4, r5, r6, lr}
   1d940:	mov	r4, r1
   1d944:	mov	r6, r0
   1d948:	mov	r5, r2
   1d94c:	bl	1d684 <__assert_fail@plt+0xb090>
   1d950:	cmp	r4, #0
   1d954:	beq	1d9a4 <__assert_fail@plt+0xb3b0>
   1d958:	ldr	r3, [r5]
   1d95c:	ldr	r4, [r4, r3, lsl #2]
   1d960:	cmp	r4, #0
   1d964:	beq	1d9a4 <__assert_fail@plt+0xb3b0>
   1d968:	add	r3, r3, #1
   1d96c:	str	r3, [r5]
   1d970:	mov	r1, r4
   1d974:	mov	r0, r6
   1d978:	bl	17aac <__assert_fail@plt+0x54b8>
   1d97c:	mov	r1, #0
   1d980:	mov	r5, r0
   1d984:	str	r4, [r0, #40]	; 0x28
   1d988:	mov	r0, r4
   1d98c:	bl	1d720 <__assert_fail@plt+0xb12c>
   1d990:	vldr	s15, [pc, #20]	; 1d9ac <__assert_fail@plt+0xb3b8>
   1d994:	mov	r0, #1
   1d998:	vmul.f32	s0, s0, s15
   1d99c:	vstr	s0, [r5, #28]
   1d9a0:	pop	{r4, r5, r6, pc}
   1d9a4:	mov	r0, r4
   1d9a8:	pop	{r4, r5, r6, pc}
   1d9ac:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d9b0:	cmp	r1, #0
   1d9b4:	beq	1da04 <__assert_fail@plt+0xb410>
   1d9b8:	ldr	r3, [r2]
   1d9bc:	push	{r4, r5, r6, lr}
   1d9c0:	ldr	r4, [r1, r3, lsl #2]
   1d9c4:	cmp	r4, #0
   1d9c8:	beq	1da0c <__assert_fail@plt+0xb418>
   1d9cc:	add	r3, r3, #1
   1d9d0:	str	r3, [r2]
   1d9d4:	mov	r1, r4
   1d9d8:	bl	17aac <__assert_fail@plt+0x54b8>
   1d9dc:	mov	r1, #0
   1d9e0:	mov	r5, r0
   1d9e4:	str	r4, [r0, #40]	; 0x28
   1d9e8:	mov	r0, r4
   1d9ec:	bl	1d720 <__assert_fail@plt+0xb12c>
   1d9f0:	vldr	s15, [pc, #28]	; 1da14 <__assert_fail@plt+0xb420>
   1d9f4:	mov	r0, #1
   1d9f8:	vmul.f32	s0, s0, s15
   1d9fc:	vstr	s0, [r5, #28]
   1da00:	pop	{r4, r5, r6, pc}
   1da04:	mov	r0, r1
   1da08:	bx	lr
   1da0c:	mov	r0, r4
   1da10:	pop	{r4, r5, r6, pc}
   1da14:	stclcc	12, cr12, [ip, #820]	; 0x334
   1da18:	cmp	r0, #0
   1da1c:	bxeq	lr
   1da20:	ldr	ip, [r1]
   1da24:	push	{r4, r5, r6, r7, r8, lr}
   1da28:	sub	sp, sp, #8
   1da2c:	ldr	r4, [r0, ip, lsl #2]
   1da30:	cmp	r4, #0
   1da34:	beq	1dad8 <__assert_fail@plt+0xb4e4>
   1da38:	add	ip, ip, #1
   1da3c:	str	ip, [r1]
   1da40:	mov	r0, r2
   1da44:	ldr	r1, [pc, #192]	; 1db0c <__assert_fail@plt+0xb518>
   1da48:	mov	r2, r4
   1da4c:	mov	r6, r3
   1da50:	bl	17a78 <__assert_fail@plt+0x5484>
   1da54:	mov	r7, #0
   1da58:	mov	r8, r0
   1da5c:	strb	r7, [r0, #19]
   1da60:	strb	r7, [r0, #18]
   1da64:	mov	r0, #32
   1da68:	bl	2c184 <__assert_fail@plt+0x19b90>
   1da6c:	mov	r3, #100	; 0x64
   1da70:	mov	r5, r0
   1da74:	str	r0, [r8, #40]	; 0x28
   1da78:	str	r3, [r5, #4]
   1da7c:	mov	r0, r3
   1da80:	bl	2c184 <__assert_fail@plt+0x19b90>
   1da84:	str	r7, [r5, #16]
   1da88:	str	r0, [r5]
   1da8c:	mov	r0, r6
   1da90:	bl	3d4c4 <__assert_fail@plt+0x2aed0>
   1da94:	str	r6, [r5, #12]
   1da98:	str	r7, [r5, #20]
   1da9c:	mov	r0, r4
   1daa0:	bl	12300 <strlen@plt>
   1daa4:	mov	r2, r5
   1daa8:	mov	r1, r0
   1daac:	mov	r0, r4
   1dab0:	bl	3d454 <__assert_fail@plt+0x2ae60>
   1dab4:	subs	r5, r0, #0
   1dab8:	bne	1dae4 <__assert_fail@plt+0xb4f0>
   1dabc:	mov	r0, r4
   1dac0:	mov	r1, #1
   1dac4:	bl	1d720 <__assert_fail@plt+0xb12c>
   1dac8:	mov	r0, #1
   1dacc:	vstr	s0, [r8, #28]
   1dad0:	add	sp, sp, #8
   1dad4:	pop	{r4, r5, r6, r7, r8, pc}
   1dad8:	mov	r0, r4
   1dadc:	add	sp, sp, #8
   1dae0:	pop	{r4, r5, r6, r7, r8, pc}
   1dae4:	mov	r2, #5
   1dae8:	ldr	r1, [pc, #32]	; 1db10 <__assert_fail@plt+0xb51c>
   1daec:	mov	r0, r7
   1daf0:	bl	120b4 <dcgettext@plt>
   1daf4:	str	r5, [sp]
   1daf8:	mov	r3, r4
   1dafc:	mov	r1, r7
   1db00:	mov	r2, r0
   1db04:	mov	r0, #1
   1db08:	bl	121ec <error@plt>
   1db0c:	strdeq	r4, [r1], -r8
   1db10:	ldrdeq	r3, [r4], -r8
   1db14:	ldr	r3, [pc, #32]	; 1db3c <__assert_fail@plt+0xb548>
   1db18:	push	{lr}		; (str lr, [sp, #-4]!)
   1db1c:	mov	ip, r1
   1db20:	mov	lr, r2
   1db24:	mov	r1, lr
   1db28:	mov	r2, r0
   1db2c:	ldr	r3, [r3, #60]	; 0x3c
   1db30:	mov	r0, ip
   1db34:	pop	{lr}		; (ldr lr, [sp], #4)
   1db38:	b	1da18 <__assert_fail@plt+0xb424>
   1db3c:	andeq	r7, r5, ip, ror #28
   1db40:	ldr	r3, [pc, #24]	; 1db60 <__assert_fail@plt+0xb56c>
   1db44:	mov	ip, r1
   1db48:	mov	r1, r2
   1db4c:	ldr	r3, [r3, #60]	; 0x3c
   1db50:	mov	r2, r0
   1db54:	orr	r3, r3, #4194304	; 0x400000
   1db58:	mov	r0, ip
   1db5c:	b	1da18 <__assert_fail@plt+0xb424>
   1db60:	andeq	r7, r5, ip, ror #28
   1db64:	cmp	r0, #0
   1db68:	ldr	r3, [r1]
   1db6c:	bxeq	lr
   1db70:	push	{r4, r5, r6, r7, lr}
   1db74:	lsl	lr, r3, #2
   1db78:	ldr	r5, [r0, r3, lsl #2]
   1db7c:	sub	sp, sp, #12
   1db80:	cmp	r5, #0
   1db84:	beq	1dbec <__assert_fail@plt+0xb5f8>
   1db88:	mov	ip, r1
   1db8c:	add	r0, r0, lr
   1db90:	add	r3, r3, #1
   1db94:	ldr	r7, [r0, #-4]
   1db98:	ldr	r1, [pc, #148]	; 1dc34 <__assert_fail@plt+0xb640>
   1db9c:	str	r3, [ip]
   1dba0:	mov	r0, r5
   1dba4:	mov	r4, r2
   1dba8:	bl	125e8 <strspn@plt>
   1dbac:	cmp	r0, #0
   1dbb0:	ldrle	r6, [pc, #128]	; 1dc38 <__assert_fail@plt+0xb644>
   1dbb4:	ble	1dbf8 <__assert_fail@plt+0xb604>
   1dbb8:	ldrb	r3, [r5, r0]
   1dbbc:	ldr	r6, [pc, #116]	; 1dc38 <__assert_fail@plt+0xb644>
   1dbc0:	cmp	r3, #0
   1dbc4:	bne	1dbf8 <__assert_fail@plt+0xb604>
   1dbc8:	mov	r0, r5
   1dbcc:	ldr	r1, [r6, #72]	; 0x48
   1dbd0:	bl	20b84 <__assert_fail@plt+0xe590>
   1dbd4:	cmp	r0, #0
   1dbd8:	str	r0, [r4]
   1dbdc:	blt	1dbf8 <__assert_fail@plt+0xb604>
   1dbe0:	add	sp, sp, #12
   1dbe4:	pop	{r4, r5, r6, r7, lr}
   1dbe8:	b	1d494 <__assert_fail@plt+0xaea0>
   1dbec:	mov	r0, r5
   1dbf0:	add	sp, sp, #12
   1dbf4:	pop	{r4, r5, r6, r7, pc}
   1dbf8:	mov	r2, #5
   1dbfc:	ldr	r1, [pc, #56]	; 1dc3c <__assert_fail@plt+0xb648>
   1dc00:	mov	r0, #0
   1dc04:	bl	120b4 <dcgettext@plt>
   1dc08:	mov	r2, r5
   1dc0c:	ldr	r1, [r6, #72]	; 0x48
   1dc10:	mov	r4, r0
   1dc14:	mov	r0, #0
   1dc18:	bl	2b208 <__assert_fail@plt+0x18c14>
   1dc1c:	mov	r2, r4
   1dc20:	mov	r3, r7
   1dc24:	mov	r1, #0
   1dc28:	str	r0, [sp]
   1dc2c:	mov	r0, #1
   1dc30:	bl	121ec <error@plt>
   1dc34:	andeq	r3, r4, r8, lsr #5
   1dc38:	andeq	r7, r5, ip, ror #28
   1dc3c:	andeq	r3, r4, r8, lsl #26
   1dc40:	mov	r0, r1
   1dc44:	mov	r1, r2
   1dc48:	ldr	r2, [pc]	; 1dc50 <__assert_fail@plt+0xb65c>
   1dc4c:	b	1db64 <__assert_fail@plt+0xb570>
   1dc50:	andeq	r7, r5, r4, ror lr
   1dc54:	mov	r0, r1
   1dc58:	mov	r1, r2
   1dc5c:	ldr	r2, [pc]	; 1dc64 <__assert_fail@plt+0xb670>
   1dc60:	b	1db64 <__assert_fail@plt+0xb570>
   1dc64:	andeq	r7, r5, r0, ror lr
   1dc68:	push	{r4, r5, r6, lr}
   1dc6c:	subs	r5, r1, #0
   1dc70:	beq	1dcdc <__assert_fail@plt+0xb6e8>
   1dc74:	ldr	r3, [r2]
   1dc78:	ldr	r3, [r5, r3, lsl #2]
   1dc7c:	cmp	r3, #0
   1dc80:	beq	1dcd4 <__assert_fail@plt+0xb6e0>
   1dc84:	mov	r4, r2
   1dc88:	mov	r6, r0
   1dc8c:	bl	11f28 <is_selinux_enabled@plt>
   1dc90:	cmp	r0, #0
   1dc94:	ble	1dce4 <__assert_fail@plt+0xb6f0>
   1dc98:	mov	r0, r6
   1dc9c:	mov	r1, #0
   1dca0:	bl	17aac <__assert_fail@plt+0x54b8>
   1dca4:	ldr	r3, [r4]
   1dca8:	ldr	r2, [pc, #84]	; 1dd04 <__assert_fail@plt+0xb710>
   1dcac:	mov	r1, #0
   1dcb0:	ldr	r3, [r5, r3, lsl #2]
   1dcb4:	str	r3, [r0, #40]	; 0x28
   1dcb8:	ldr	r3, [r4]
   1dcbc:	strb	r1, [r0, #18]
   1dcc0:	add	r3, r3, #1
   1dcc4:	str	r2, [r0, #28]
   1dcc8:	str	r3, [r4]
   1dccc:	mov	r0, #1
   1dcd0:	pop	{r4, r5, r6, pc}
   1dcd4:	mov	r0, r3
   1dcd8:	pop	{r4, r5, r6, pc}
   1dcdc:	mov	r0, r5
   1dce0:	pop	{r4, r5, r6, pc}
   1dce4:	mov	r2, #5
   1dce8:	ldr	r1, [pc, #24]	; 1dd08 <__assert_fail@plt+0xb714>
   1dcec:	mov	r0, #0
   1dcf0:	bl	120b4 <dcgettext@plt>
   1dcf4:	mov	r1, #0
   1dcf8:	mov	r2, r0
   1dcfc:	mov	r0, #1
   1dd00:	bl	121ec <error@plt>
   1dd04:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dd08:	andeq	r3, r4, r8, asr #26
   1dd0c:	ldr	r3, [pc, #160]	; 1ddb4 <__assert_fail@plt+0xb7c0>
   1dd10:	push	{r4, r5, r6, r7, r8, lr}
   1dd14:	sub	sp, sp, #8
   1dd18:	ldrb	r4, [r3, #17]
   1dd1c:	cmp	r4, #0
   1dd20:	bne	1dda8 <__assert_fail@plt+0xb7b4>
   1dd24:	ldrb	r3, [r3, #16]
   1dd28:	cmp	r3, #0
   1dd2c:	beq	1dda8 <__assert_fail@plt+0xb7b4>
   1dd30:	mov	r5, r1
   1dd34:	mov	r6, r0
   1dd38:	mov	r1, #47	; 0x2f
   1dd3c:	mov	r0, r2
   1dd40:	bl	1230c <strchr@plt>
   1dd44:	cmp	r0, #0
   1dd48:	beq	1dda8 <__assert_fail@plt+0xb7b4>
   1dd4c:	mov	r2, #5
   1dd50:	ldr	r1, [pc, #96]	; 1ddb8 <__assert_fail@plt+0xb7c4>
   1dd54:	mov	r0, r4
   1dd58:	bl	120b4 <dcgettext@plt>
   1dd5c:	mov	r1, r6
   1dd60:	mov	r7, r0
   1dd64:	mov	r0, r4
   1dd68:	bl	18c78 <__assert_fail@plt+0x6684>
   1dd6c:	ldr	r1, [pc, #72]	; 1ddbc <__assert_fail@plt+0xb7c8>
   1dd70:	mov	r6, r0
   1dd74:	mov	r0, #1
   1dd78:	bl	18c78 <__assert_fail@plt+0x6684>
   1dd7c:	mov	r1, r5
   1dd80:	mov	r8, r0
   1dd84:	mov	r0, #2
   1dd88:	bl	18c78 <__assert_fail@plt+0x6684>
   1dd8c:	str	r8, [sp]
   1dd90:	mov	r3, r6
   1dd94:	mov	r2, r7
   1dd98:	mov	r1, r4
   1dd9c:	str	r0, [sp, #4]
   1dda0:	mov	r0, r4
   1dda4:	bl	121ec <error@plt>
   1dda8:	mov	r0, #1
   1ddac:	add	sp, sp, #8
   1ddb0:	pop	{r4, r5, r6, r7, r8, pc}
   1ddb4:	andeq	r7, r5, ip, ror #28
   1ddb8:	andeq	r3, r4, ip, ror sp
   1ddbc:	andeq	r6, r4, r0, lsr #4
   1ddc0:	push	{r4, r5, r6, r7, r8, lr}
   1ddc4:	subs	r5, r1, #0
   1ddc8:	ldr	r6, [r2]
   1ddcc:	beq	1de10 <__assert_fail@plt+0xb81c>
   1ddd0:	ldr	r7, [r5, r6, lsl #2]
   1ddd4:	cmp	r7, #0
   1ddd8:	moveq	r5, r7
   1dddc:	beq	1de10 <__assert_fail@plt+0xb81c>
   1dde0:	add	r3, r6, #1
   1dde4:	str	r3, [r2]
   1dde8:	mov	r4, r2
   1ddec:	mov	r8, r0
   1ddf0:	bl	1d684 <__assert_fail@plt+0xb090>
   1ddf4:	mov	r2, r7
   1ddf8:	ldr	r1, [pc, #72]	; 1de48 <__assert_fail@plt+0xb854>
   1ddfc:	ldr	r0, [pc, #72]	; 1de4c <__assert_fail@plt+0xb858>
   1de00:	bl	1dd0c <__assert_fail@plt+0xb718>
   1de04:	subs	r5, r0, #0
   1de08:	streq	r6, [r4]
   1de0c:	bne	1de18 <__assert_fail@plt+0xb824>
   1de10:	mov	r0, r5
   1de14:	pop	{r4, r5, r6, r7, r8, pc}
   1de18:	mov	r1, r7
   1de1c:	mov	r0, r8
   1de20:	bl	17aac <__assert_fail@plt+0x54b8>
   1de24:	mov	r1, #0
   1de28:	mov	r4, r0
   1de2c:	str	r7, [r0, #40]	; 0x28
   1de30:	mov	r0, r7
   1de34:	strb	r1, [r4, #19]
   1de38:	strb	r1, [r4, #18]
   1de3c:	bl	1d720 <__assert_fail@plt+0xb12c>
   1de40:	vstr	s0, [r4, #28]
   1de44:	b	1de10 <__assert_fail@plt+0xb81c>
   1de48:	andeq	r3, r4, r0, lsr lr
   1de4c:	andeq	r3, r4, ip, lsr lr
   1de50:	push	{r4, r5, r6, lr}
   1de54:	mov	r4, r1
   1de58:	mov	r6, r0
   1de5c:	mov	r5, r2
   1de60:	bl	1d684 <__assert_fail@plt+0xb090>
   1de64:	cmp	r4, #0
   1de68:	beq	1de9c <__assert_fail@plt+0xb8a8>
   1de6c:	ldr	r3, [r5]
   1de70:	ldr	r4, [r4, r3, lsl #2]
   1de74:	cmp	r4, #0
   1de78:	beq	1de9c <__assert_fail@plt+0xb8a8>
   1de7c:	add	r3, r3, #1
   1de80:	str	r3, [r5]
   1de84:	mov	r2, r4
   1de88:	ldr	r1, [pc, #76]	; 1dedc <__assert_fail@plt+0xb8e8>
   1de8c:	ldr	r0, [pc, #76]	; 1dee0 <__assert_fail@plt+0xb8ec>
   1de90:	bl	1dd0c <__assert_fail@plt+0xb718>
   1de94:	subs	r5, r0, #0
   1de98:	bne	1dea8 <__assert_fail@plt+0xb8b4>
   1de9c:	mov	r5, #0
   1dea0:	mov	r0, r5
   1dea4:	pop	{r4, r5, r6, pc}
   1dea8:	mov	r1, r4
   1deac:	mov	r0, r6
   1deb0:	bl	17aac <__assert_fail@plt+0x54b8>
   1deb4:	mov	r1, #0
   1deb8:	mov	r6, r0
   1debc:	str	r4, [r0, #40]	; 0x28
   1dec0:	mov	r0, r4
   1dec4:	strb	r1, [r6, #19]
   1dec8:	strb	r1, [r6, #18]
   1decc:	bl	1d720 <__assert_fail@plt+0xb12c>
   1ded0:	mov	r0, r5
   1ded4:	vstr	s0, [r6, #28]
   1ded8:	pop	{r4, r5, r6, pc}
   1dedc:	andeq	r3, r4, r4, asr #28
   1dee0:	andeq	r3, r4, r0, asr lr
   1dee4:	push	{r4, lr}
   1dee8:	ldr	r4, [pc, #140]	; 1df7c <__assert_fail@plt+0xb988>
   1deec:	ldrb	r3, [r4, #36]	; 0x24
   1def0:	cmp	r3, #0
   1def4:	beq	1df00 <__assert_fail@plt+0xb90c>
   1def8:	mov	r0, #1
   1defc:	pop	{r4, pc}
   1df00:	ldr	r2, [r4, #28]
   1df04:	add	r0, r4, #28
   1df08:	add	r2, r2, #86016	; 0x15000
   1df0c:	add	r2, r2, #384	; 0x180
   1df10:	str	r3, [r4, #32]
   1df14:	str	r2, [r4, #28]
   1df18:	bl	1227c <localtime@plt>
   1df1c:	ldr	r1, [r4, #28]
   1df20:	cmp	r0, #0
   1df24:	beq	1df58 <__assert_fail@plt+0xb964>
   1df28:	ldm	r0, {r3, ip}
   1df2c:	ldr	r2, [r0, #8]
   1df30:	mov	r0, #3600	; 0xe10
   1df34:	rsb	ip, ip, ip, lsl #4
   1df38:	add	ip, r3, ip, lsl #2
   1df3c:	mla	r3, r0, r2, ip
   1df40:	sub	r3, r1, r3
   1df44:	mov	r2, #1
   1df48:	str	r3, [r4, #28]
   1df4c:	strb	r2, [r4, #36]	; 0x24
   1df50:	mov	r0, #1
   1df54:	pop	{r4, pc}
   1df58:	ldr	r3, [pc, #32]	; 1df80 <__assert_fail@plt+0xb98c>
   1df5c:	asr	r2, r1, #31
   1df60:	ldr	r0, [pc, #28]	; 1df84 <__assert_fail@plt+0xb990>
   1df64:	smull	ip, r3, r3, r1
   1df68:	add	r3, r3, r1
   1df6c:	rsb	r3, r2, r3, asr #16
   1df70:	mul	r3, r0, r3
   1df74:	sub	r3, r1, r3
   1df78:	b	1df40 <__assert_fail@plt+0xb94c>
   1df7c:	andeq	r7, r5, ip, ror #28
   1df80:	eorgt	r4, lr, #29360128	; 0x1c00000
   1df84:	andeq	r5, r1, r0, lsl #3
   1df88:	push	{r4, lr}
   1df8c:	bl	17b04 <__assert_fail@plt+0x5510>
   1df90:	mov	r4, r0
   1df94:	add	r1, r0, #40	; 0x28
   1df98:	ldr	r0, [pc, #24]	; 1dfb8 <__assert_fail@plt+0xb9c4>
   1df9c:	bl	1bf74 <__assert_fail@plt+0x9980>
   1dfa0:	mov	r0, #1
   1dfa4:	mov	r3, #1065353216	; 0x3f800000
   1dfa8:	strb	r0, [r4, #17]
   1dfac:	strb	r0, [r4, #16]
   1dfb0:	str	r3, [r4, #28]
   1dfb4:	pop	{r4, pc}
   1dfb8:	strdeq	r3, [r4], -r0
   1dfbc:	push	{r4, r5, r6, lr}
   1dfc0:	sub	sp, sp, #112	; 0x70
   1dfc4:	mov	r4, r1
   1dfc8:	mov	r5, r2
   1dfcc:	mov	r6, r0
   1dfd0:	add	r0, sp, #8
   1dfd4:	bl	17d40 <__assert_fail@plt+0x574c>
   1dfd8:	mov	r0, r4
   1dfdc:	add	r2, sp, #8
   1dfe0:	mov	r1, r5
   1dfe4:	add	r3, sp, #4
   1dfe8:	bl	1bd5c <__assert_fail@plt+0x9768>
   1dfec:	subs	r4, r0, #0
   1dff0:	bne	1e000 <__assert_fail@plt+0xba0c>
   1dff4:	mov	r0, r4
   1dff8:	add	sp, sp, #112	; 0x70
   1dffc:	pop	{r4, r5, r6, pc}
   1e000:	ldr	r1, [sp, #4]
   1e004:	mov	r0, r6
   1e008:	bl	17aac <__assert_fail@plt+0x54b8>
   1e00c:	ldr	r3, [pc, #180]	; 1e0c8 <__assert_fail@plt+0xbad4>
   1e010:	ldr	r1, [sp, #88]	; 0x58
   1e014:	ldr	r2, [pc, #176]	; 1e0cc <__assert_fail@plt+0xbad8>
   1e018:	ldr	r3, [r3, #28]
   1e01c:	vldr	s14, [pc, #140]	; 1e0b0 <__assert_fail@plt+0xbabc>
   1e020:	sub	r3, r3, r1
   1e024:	ldr	ip, [sp, #92]	; 0x5c
   1e028:	smull	lr, r2, r2, r3
   1e02c:	add	r2, r2, r3
   1e030:	asr	r3, r3, #31
   1e034:	rsb	r3, r3, r2, asr #16
   1e038:	mov	r2, #3
   1e03c:	vmov	s15, r3
   1e040:	mov	r3, #0
   1e044:	vcvt.f32.s32	s15, s15
   1e048:	vcmpe.f32	s15, s14
   1e04c:	vmrs	APSR_nzcv, fpscr
   1e050:	str	ip, [r0, #52]	; 0x34
   1e054:	str	r1, [r0, #48]	; 0x30
   1e058:	str	r2, [r0, #40]	; 0x28
   1e05c:	str	r3, [r0, #44]	; 0x2c
   1e060:	bmi	1e0a0 <__assert_fail@plt+0xbaac>
   1e064:	vldr	s14, [pc, #72]	; 1e0b4 <__assert_fail@plt+0xbac0>
   1e068:	vcmpe.f32	s15, s14
   1e06c:	vmrs	APSR_nzcv, fpscr
   1e070:	bmi	1e0a8 <__assert_fail@plt+0xbab4>
   1e074:	vldr	s12, [pc, #60]	; 1e0b8 <__assert_fail@plt+0xbac4>
   1e078:	vldr	s14, [pc, #60]	; 1e0bc <__assert_fail@plt+0xbac8>
   1e07c:	vldr	s13, [pc, #60]	; 1e0c0 <__assert_fail@plt+0xbacc>
   1e080:	vcmpe.f32	s15, s12
   1e084:	vmrs	APSR_nzcv, fpscr
   1e088:	vmovle.f32	s15, s13
   1e08c:	vmovgt.f32	s15, s14
   1e090:	vstr	s15, [r0, #28]
   1e094:	mov	r0, r4
   1e098:	add	sp, sp, #112	; 0x70
   1e09c:	pop	{r4, r5, r6, pc}
   1e0a0:	vldr	s15, [pc, #28]	; 1e0c4 <__assert_fail@plt+0xbad0>
   1e0a4:	b	1e090 <__assert_fail@plt+0xba9c>
   1e0a8:	vldr	s15, [pc, #12]	; 1e0bc <__assert_fail@plt+0xbac8>
   1e0ac:	b	1e090 <__assert_fail@plt+0xba9c>
   1e0b0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e0b4:	svccc	0x00800000
   1e0b8:	sbcmi	r0, r8, #0
   1e0bc:			; <UNDEFINED> instruction: 0x3e99999a
   1e0c0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e0c4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e0c8:	andeq	r7, r5, ip, ror #28
   1e0cc:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e0d0:	push	{r4, r5, r6, lr}
   1e0d4:	sub	sp, sp, #112	; 0x70
   1e0d8:	mov	r4, r1
   1e0dc:	mov	r5, r2
   1e0e0:	mov	r6, r0
   1e0e4:	add	r0, sp, #8
   1e0e8:	bl	17d40 <__assert_fail@plt+0x574c>
   1e0ec:	mov	r0, r4
   1e0f0:	add	r2, sp, #8
   1e0f4:	mov	r1, r5
   1e0f8:	add	r3, sp, #4
   1e0fc:	bl	1bd5c <__assert_fail@plt+0x9768>
   1e100:	subs	r4, r0, #0
   1e104:	bne	1e114 <__assert_fail@plt+0xbb20>
   1e108:	mov	r0, r4
   1e10c:	add	sp, sp, #112	; 0x70
   1e110:	pop	{r4, r5, r6, pc}
   1e114:	ldr	r1, [sp, #4]
   1e118:	mov	r0, r6
   1e11c:	bl	17aac <__assert_fail@plt+0x54b8>
   1e120:	ldr	r3, [pc, #176]	; 1e1d8 <__assert_fail@plt+0xbbe4>
   1e124:	mov	r1, #0
   1e128:	ldr	r2, [pc, #172]	; 1e1dc <__assert_fail@plt+0xbbe8>
   1e12c:	ldr	r3, [r3, #28]
   1e130:	vldr	s14, [pc, #136]	; 1e1c0 <__assert_fail@plt+0xbbcc>
   1e134:	str	r1, [r0, #40]	; 0x28
   1e138:	ldr	ip, [sp, #88]	; 0x58
   1e13c:	sub	r3, r3, ip
   1e140:	smull	lr, r2, r2, r3
   1e144:	ldr	lr, [sp, #92]	; 0x5c
   1e148:	add	r2, r2, r3
   1e14c:	asr	r3, r3, #31
   1e150:	rsb	r3, r3, r2, asr #16
   1e154:	str	lr, [r0, #52]	; 0x34
   1e158:	vmov	s15, r3
   1e15c:	str	ip, [r0, #48]	; 0x30
   1e160:	str	r1, [r0, #44]	; 0x2c
   1e164:	vcvt.f32.s32	s15, s15
   1e168:	vcmpe.f32	s15, s14
   1e16c:	vmrs	APSR_nzcv, fpscr
   1e170:	bmi	1e1b0 <__assert_fail@plt+0xbbbc>
   1e174:	vldr	s14, [pc, #72]	; 1e1c4 <__assert_fail@plt+0xbbd0>
   1e178:	vcmpe.f32	s15, s14
   1e17c:	vmrs	APSR_nzcv, fpscr
   1e180:	bmi	1e1b8 <__assert_fail@plt+0xbbc4>
   1e184:	vldr	s12, [pc, #60]	; 1e1c8 <__assert_fail@plt+0xbbd4>
   1e188:	vldr	s14, [pc, #60]	; 1e1cc <__assert_fail@plt+0xbbd8>
   1e18c:	vldr	s13, [pc, #60]	; 1e1d0 <__assert_fail@plt+0xbbdc>
   1e190:	vcmpe.f32	s15, s12
   1e194:	vmrs	APSR_nzcv, fpscr
   1e198:	vmovle.f32	s15, s13
   1e19c:	vmovgt.f32	s15, s14
   1e1a0:	vstr	s15, [r0, #28]
   1e1a4:	mov	r0, r4
   1e1a8:	add	sp, sp, #112	; 0x70
   1e1ac:	pop	{r4, r5, r6, pc}
   1e1b0:	vldr	s15, [pc, #28]	; 1e1d4 <__assert_fail@plt+0xbbe0>
   1e1b4:	b	1e1a0 <__assert_fail@plt+0xbbac>
   1e1b8:	vldr	s15, [pc, #12]	; 1e1cc <__assert_fail@plt+0xbbd8>
   1e1bc:	b	1e1a0 <__assert_fail@plt+0xbbac>
   1e1c0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e1c4:	svccc	0x00800000
   1e1c8:	sbcmi	r0, r8, #0
   1e1cc:			; <UNDEFINED> instruction: 0x3e99999a
   1e1d0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e1d4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e1d8:	andeq	r7, r5, ip, ror #28
   1e1dc:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e1e0:	push	{r4, r5, r6, lr}
   1e1e4:	sub	sp, sp, #112	; 0x70
   1e1e8:	mov	r4, r1
   1e1ec:	mov	r5, r2
   1e1f0:	mov	r6, r0
   1e1f4:	add	r0, sp, #8
   1e1f8:	bl	17d40 <__assert_fail@plt+0x574c>
   1e1fc:	mov	r0, r4
   1e200:	add	r2, sp, #8
   1e204:	mov	r1, r5
   1e208:	add	r3, sp, #4
   1e20c:	bl	1bd5c <__assert_fail@plt+0x9768>
   1e210:	subs	r4, r0, #0
   1e214:	bne	1e224 <__assert_fail@plt+0xbc30>
   1e218:	mov	r0, r4
   1e21c:	add	sp, sp, #112	; 0x70
   1e220:	pop	{r4, r5, r6, pc}
   1e224:	ldr	r1, [sp, #4]
   1e228:	mov	r0, r6
   1e22c:	bl	17aac <__assert_fail@plt+0x54b8>
   1e230:	ldr	r3, [pc, #180]	; 1e2ec <__assert_fail@plt+0xbcf8>
   1e234:	mov	r2, #2
   1e238:	vldr	s14, [pc, #148]	; 1e2d4 <__assert_fail@plt+0xbce0>
   1e23c:	ldr	r3, [r3, #28]
   1e240:	str	r2, [r0, #40]	; 0x28
   1e244:	ldr	r1, [sp, #88]	; 0x58
   1e248:	ldr	r2, [pc, #160]	; 1e2f0 <__assert_fail@plt+0xbcfc>
   1e24c:	sub	r3, r3, r1
   1e250:	smull	ip, r2, r2, r3
   1e254:	ldr	ip, [sp, #92]	; 0x5c
   1e258:	add	r2, r2, r3
   1e25c:	asr	r3, r3, #31
   1e260:	rsb	r3, r3, r2, asr #16
   1e264:	mov	r2, #0
   1e268:	vmov	s15, r3
   1e26c:	str	ip, [r0, #52]	; 0x34
   1e270:	str	r1, [r0, #48]	; 0x30
   1e274:	str	r2, [r0, #44]	; 0x2c
   1e278:	vcvt.f32.s32	s15, s15
   1e27c:	vcmpe.f32	s15, s14
   1e280:	vmrs	APSR_nzcv, fpscr
   1e284:	bmi	1e2c4 <__assert_fail@plt+0xbcd0>
   1e288:	vldr	s14, [pc, #72]	; 1e2d8 <__assert_fail@plt+0xbce4>
   1e28c:	vcmpe.f32	s15, s14
   1e290:	vmrs	APSR_nzcv, fpscr
   1e294:	bmi	1e2cc <__assert_fail@plt+0xbcd8>
   1e298:	vldr	s12, [pc, #60]	; 1e2dc <__assert_fail@plt+0xbce8>
   1e29c:	vldr	s14, [pc, #60]	; 1e2e0 <__assert_fail@plt+0xbcec>
   1e2a0:	vldr	s13, [pc, #60]	; 1e2e4 <__assert_fail@plt+0xbcf0>
   1e2a4:	vcmpe.f32	s15, s12
   1e2a8:	vmrs	APSR_nzcv, fpscr
   1e2ac:	vmovle.f32	s15, s13
   1e2b0:	vmovgt.f32	s15, s14
   1e2b4:	vstr	s15, [r0, #28]
   1e2b8:	mov	r0, r4
   1e2bc:	add	sp, sp, #112	; 0x70
   1e2c0:	pop	{r4, r5, r6, pc}
   1e2c4:	vldr	s15, [pc, #28]	; 1e2e8 <__assert_fail@plt+0xbcf4>
   1e2c8:	b	1e2b4 <__assert_fail@plt+0xbcc0>
   1e2cc:	vldr	s15, [pc, #12]	; 1e2e0 <__assert_fail@plt+0xbcec>
   1e2d0:	b	1e2b4 <__assert_fail@plt+0xbcc0>
   1e2d4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e2d8:	svccc	0x00800000
   1e2dc:	sbcmi	r0, r8, #0
   1e2e0:			; <UNDEFINED> instruction: 0x3e99999a
   1e2e4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e2e8:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e2ec:	andeq	r7, r5, ip, ror #28
   1e2f0:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e2f4:	push	{r4, r5, r6, r7, lr}
   1e2f8:	subs	r4, r1, #0
   1e2fc:	sub	sp, sp, #36	; 0x24
   1e300:	beq	1e3d4 <__assert_fail@plt+0xbde0>
   1e304:	ldr	r3, [r2]
   1e308:	ldr	r6, [r4, r3, lsl #2]
   1e30c:	cmp	r6, #0
   1e310:	beq	1e3e8 <__assert_fail@plt+0xbdf4>
   1e314:	add	r1, sp, #8
   1e318:	ldr	ip, [pc, #288]	; 1e440 <__assert_fail@plt+0xbe4c>
   1e31c:	add	r3, r3, #1
   1e320:	mov	r7, r0
   1e324:	add	r5, sp, #16
   1e328:	mov	r0, #0
   1e32c:	str	r3, [r2]
   1e330:	str	r0, [sp, #8]
   1e334:	str	r0, [sp, #12]
   1e338:	str	ip, [sp]
   1e33c:	vldr	d0, [pc, #220]	; 1e420 <__assert_fail@plt+0xbe2c>
   1e340:	ldm	r1, {r2, r3}
   1e344:	mov	r0, r6
   1e348:	mov	r1, r5
   1e34c:	bl	1b5ac <__assert_fail@plt+0x8fb8>
   1e350:	subs	r4, r0, #0
   1e354:	beq	1e400 <__assert_fail@plt+0xbe0c>
   1e358:	mov	r1, r6
   1e35c:	mov	r0, r7
   1e360:	bl	17aac <__assert_fail@plt+0x54b8>
   1e364:	ldr	r1, [sp, #24]
   1e368:	ldr	r2, [pc, #212]	; 1e444 <__assert_fail@plt+0xbe50>
   1e36c:	vldr	s14, [pc, #180]	; 1e428 <__assert_fail@plt+0xbe34>
   1e370:	asr	r3, r1, #31
   1e374:	mov	lr, r0
   1e378:	smull	r0, r2, r2, r1
   1e37c:	add	r2, r2, r1
   1e380:	add	ip, lr, #40	; 0x28
   1e384:	rsb	r3, r3, r2, asr #16
   1e388:	vmov	s15, r3
   1e38c:	ldm	r5, {r0, r1, r2, r3}
   1e390:	vcvt.f32.s32	s15, s15
   1e394:	stm	ip, {r0, r1, r2, r3}
   1e398:	vcmpe.f32	s15, s14
   1e39c:	vmrs	APSR_nzcv, fpscr
   1e3a0:	bmi	1e3e0 <__assert_fail@plt+0xbdec>
   1e3a4:	vldr	s14, [pc, #128]	; 1e42c <__assert_fail@plt+0xbe38>
   1e3a8:	vcmpe.f32	s15, s14
   1e3ac:	vmrs	APSR_nzcv, fpscr
   1e3b0:	bmi	1e3f8 <__assert_fail@plt+0xbe04>
   1e3b4:	vldr	s12, [pc, #116]	; 1e430 <__assert_fail@plt+0xbe3c>
   1e3b8:	vldr	s14, [pc, #116]	; 1e434 <__assert_fail@plt+0xbe40>
   1e3bc:	vldr	s13, [pc, #116]	; 1e438 <__assert_fail@plt+0xbe44>
   1e3c0:	vcmpe.f32	s15, s12
   1e3c4:	vmrs	APSR_nzcv, fpscr
   1e3c8:	vmovle.f32	s15, s13
   1e3cc:	vmovgt.f32	s15, s14
   1e3d0:	vstr	s15, [lr, #28]
   1e3d4:	mov	r0, r4
   1e3d8:	add	sp, sp, #36	; 0x24
   1e3dc:	pop	{r4, r5, r6, r7, pc}
   1e3e0:	vldr	s15, [pc, #84]	; 1e43c <__assert_fail@plt+0xbe48>
   1e3e4:	b	1e3d0 <__assert_fail@plt+0xbddc>
   1e3e8:	mov	r4, r6
   1e3ec:	mov	r0, r4
   1e3f0:	add	sp, sp, #36	; 0x24
   1e3f4:	pop	{r4, r5, r6, r7, pc}
   1e3f8:	vldr	s15, [pc, #52]	; 1e434 <__assert_fail@plt+0xbe40>
   1e3fc:	b	1e3d0 <__assert_fail@plt+0xbddc>
   1e400:	mov	r2, #5
   1e404:	ldr	r1, [pc, #60]	; 1e448 <__assert_fail@plt+0xbe54>
   1e408:	bl	120b4 <dcgettext@plt>
   1e40c:	mov	r3, r6
   1e410:	mov	r1, r4
   1e414:	mov	r2, r0
   1e418:	mov	r0, #1
   1e41c:	bl	121ec <error@plt>
   1e420:	andeq	r0, r0, r0
   1e424:	rscsmi	r1, r5, r0, lsl #16
   1e428:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e42c:	svccc	0x00800000
   1e430:	sbcmi	r0, r8, #0
   1e434:			; <UNDEFINED> instruction: 0x3e99999a
   1e438:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e43c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e440:	andeq	r3, r4, r8, asr lr
   1e444:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e448:	muleq	r4, ip, lr
   1e44c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e450:	subs	sl, r1, #0
   1e454:	sub	sp, sp, #32
   1e458:	ldr	r5, [r2]
   1e45c:	beq	1e4d8 <__assert_fail@plt+0xbee4>
   1e460:	ldr	r6, [sl, r5, lsl #2]
   1e464:	cmp	r6, #0
   1e468:	moveq	sl, r6
   1e46c:	beq	1e4d8 <__assert_fail@plt+0xbee4>
   1e470:	ldr	r8, [pc, #304]	; 1e5a8 <__assert_fail@plt+0xbfb4>
   1e474:	mov	r4, r2
   1e478:	add	r1, r8, #28
   1e47c:	ldr	r2, [r8, #28]
   1e480:	mov	r7, r0
   1e484:	ldm	r1, {r0, r1}
   1e488:	mov	ip, r3
   1e48c:	add	r3, sp, #8
   1e490:	ldr	lr, [pc, #276]	; 1e5ac <__assert_fail@plt+0xbfb8>
   1e494:	add	r2, r2, #86016	; 0x15000
   1e498:	stm	r3, {r0, r1}
   1e49c:	add	r2, r2, #384	; 0x180
   1e4a0:	add	r1, r5, #1
   1e4a4:	add	r9, sp, #16
   1e4a8:	str	lr, [sp]
   1e4ac:	str	r2, [sp, #8]
   1e4b0:	str	r1, [r4]
   1e4b4:	ldm	r3, {r2, r3}
   1e4b8:	mov	r1, r9
   1e4bc:	vldr	d0, [pc, #196]	; 1e588 <__assert_fail@plt+0xbf94>
   1e4c0:	mov	r0, r6
   1e4c4:	str	ip, [sp, #16]
   1e4c8:	bl	1b5ac <__assert_fail@plt+0x8fb8>
   1e4cc:	subs	sl, r0, #0
   1e4d0:	streq	r5, [r4]
   1e4d4:	bne	1e4e4 <__assert_fail@plt+0xbef0>
   1e4d8:	mov	r0, sl
   1e4dc:	add	sp, sp, #32
   1e4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4e4:	mov	r1, r6
   1e4e8:	mov	r0, r7
   1e4ec:	bl	17aac <__assert_fail@plt+0x54b8>
   1e4f0:	ldr	r3, [sp, #24]
   1e4f4:	ldr	ip, [r8, #28]
   1e4f8:	ldr	lr, [pc, #176]	; 1e5b0 <__assert_fail@plt+0xbfbc>
   1e4fc:	sub	ip, ip, r3
   1e500:	vldr	s14, [pc, #136]	; 1e590 <__assert_fail@plt+0xbf9c>
   1e504:	smull	r3, lr, lr, ip
   1e508:	add	lr, lr, ip
   1e50c:	asr	ip, ip, #31
   1e510:	rsb	ip, ip, lr, asr #16
   1e514:	vmov	s15, ip
   1e518:	vcvt.f32.s32	s15, s15
   1e51c:	vcmpe.f32	s15, s14
   1e520:	vmrs	APSR_nzcv, fpscr
   1e524:	mov	r4, r0
   1e528:	ldm	r9, {r0, r1, r2, r3}
   1e52c:	add	lr, r4, #40	; 0x28
   1e530:	stm	lr, {r0, r1, r2, r3}
   1e534:	bmi	1e574 <__assert_fail@plt+0xbf80>
   1e538:	vldr	s14, [pc, #84]	; 1e594 <__assert_fail@plt+0xbfa0>
   1e53c:	vcmpe.f32	s15, s14
   1e540:	vmrs	APSR_nzcv, fpscr
   1e544:	bmi	1e57c <__assert_fail@plt+0xbf88>
   1e548:	vldr	s12, [pc, #72]	; 1e598 <__assert_fail@plt+0xbfa4>
   1e54c:	vldr	s14, [pc, #72]	; 1e59c <__assert_fail@plt+0xbfa8>
   1e550:	vldr	s13, [pc, #72]	; 1e5a0 <__assert_fail@plt+0xbfac>
   1e554:	vcmpe.f32	s15, s12
   1e558:	vmrs	APSR_nzcv, fpscr
   1e55c:	vmovle.f32	s15, s13
   1e560:	vmovgt.f32	s15, s14
   1e564:	mov	r0, sl
   1e568:	vstr	s15, [r4, #28]
   1e56c:	add	sp, sp, #32
   1e570:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e574:	vldr	s15, [pc, #40]	; 1e5a4 <__assert_fail@plt+0xbfb0>
   1e578:	b	1e564 <__assert_fail@plt+0xbf70>
   1e57c:	vldr	s15, [pc, #24]	; 1e59c <__assert_fail@plt+0xbfa8>
   1e580:	b	1e564 <__assert_fail@plt+0xbf70>
   1e584:	nop			; (mov r0, r0)
   1e588:	andeq	r0, r0, r0
   1e58c:	submi	r0, lr, r0
   1e590:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e594:	svccc	0x00800000
   1e598:	sbcmi	r0, r8, #0
   1e59c:			; <UNDEFINED> instruction: 0x3e99999a
   1e5a0:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e5a4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e5a8:	andeq	r7, r5, ip, ror #28
   1e5ac:			; <UNDEFINED> instruction: 0x00043ebc
   1e5b0:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e5b4:	mov	r3, #3
   1e5b8:	b	1e44c <__assert_fail@plt+0xbe58>
   1e5bc:	mov	r3, #2
   1e5c0:	b	1e44c <__assert_fail@plt+0xbe58>
   1e5c4:	mov	r3, #0
   1e5c8:	b	1e44c <__assert_fail@plt+0xbe58>
   1e5cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e5d0:	mov	r4, r1
   1e5d4:	mov	r6, r2
   1e5d8:	sub	sp, sp, #40	; 0x28
   1e5dc:	mov	sl, r0
   1e5e0:	ldr	r1, [pc, #568]	; 1e820 <__assert_fail@plt+0xc22c>
   1e5e4:	mov	r2, #5
   1e5e8:	mov	r0, #0
   1e5ec:	bl	120b4 <dcgettext@plt>
   1e5f0:	cmp	r4, #0
   1e5f4:	ldr	r9, [r6]
   1e5f8:	beq	1e668 <__assert_fail@plt+0xc074>
   1e5fc:	ldr	r5, [r4, r9, lsl #2]
   1e600:	cmp	r5, #0
   1e604:	moveq	r4, r5
   1e608:	beq	1e668 <__assert_fail@plt+0xc074>
   1e60c:	ldr	r7, [pc, #528]	; 1e824 <__assert_fail@plt+0xc230>
   1e610:	add	r2, r9, #1
   1e614:	add	r3, r7, #28
   1e618:	str	r2, [r6]
   1e61c:	ldrb	r2, [r5]
   1e620:	mov	ip, r0
   1e624:	ldm	r3, {r0, r1}
   1e628:	add	r3, sp, #16
   1e62c:	cmp	r2, #45	; 0x2d
   1e630:	stm	r3, {r0, r1}
   1e634:	mov	r2, r0
   1e638:	beq	1e674 <__assert_fail@plt+0xc080>
   1e63c:	add	r8, sp, #24
   1e640:	str	r2, [sp, #16]
   1e644:	str	ip, [sp]
   1e648:	mov	r1, r8
   1e64c:	ldm	r3, {r2, r3}
   1e650:	vldr	d0, [pc, #424]	; 1e800 <__assert_fail@plt+0xc20c>
   1e654:	mov	r0, r5
   1e658:	bl	1b5ac <__assert_fail@plt+0x8fb8>
   1e65c:	subs	r4, r0, #0
   1e660:	streq	r9, [r6]
   1e664:	bne	1e684 <__assert_fail@plt+0xc090>
   1e668:	mov	r0, r4
   1e66c:	add	sp, sp, #40	; 0x28
   1e670:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e674:	add	r2, r0, #86016	; 0x15000
   1e678:	add	r2, r2, #380	; 0x17c
   1e67c:	add	r2, r2, #3
   1e680:	b	1e63c <__assert_fail@plt+0xc048>
   1e684:	mov	r1, r5
   1e688:	mov	r0, sl
   1e68c:	bl	17aac <__assert_fail@plt+0x54b8>
   1e690:	ldr	r3, [sp, #32]
   1e694:	ldr	ip, [r7, #28]
   1e698:	ldr	lr, [pc, #392]	; 1e828 <__assert_fail@plt+0xc234>
   1e69c:	sub	ip, ip, r3
   1e6a0:	vldr	s14, [pc, #352]	; 1e808 <__assert_fail@plt+0xc214>
   1e6a4:	smull	r3, lr, lr, ip
   1e6a8:	add	lr, lr, ip
   1e6ac:	asr	ip, ip, #31
   1e6b0:	rsb	ip, ip, lr, asr #16
   1e6b4:	vmov	s15, ip
   1e6b8:	vcvt.f32.s32	s15, s15
   1e6bc:	vcmpe.f32	s15, s14
   1e6c0:	vmrs	APSR_nzcv, fpscr
   1e6c4:	mov	r5, r0
   1e6c8:	ldm	r8, {r0, r1, r2, r3}
   1e6cc:	add	lr, r5, #40	; 0x28
   1e6d0:	stm	lr, {r0, r1, r2, r3}
   1e6d4:	bmi	1e7bc <__assert_fail@plt+0xc1c8>
   1e6d8:	vldr	s14, [pc, #300]	; 1e80c <__assert_fail@plt+0xc218>
   1e6dc:	vcmpe.f32	s15, s14
   1e6e0:	vmrs	APSR_nzcv, fpscr
   1e6e4:	bmi	1e7ec <__assert_fail@plt+0xc1f8>
   1e6e8:	vldr	s12, [pc, #288]	; 1e810 <__assert_fail@plt+0xc21c>
   1e6ec:	vldr	s14, [pc, #288]	; 1e814 <__assert_fail@plt+0xc220>
   1e6f0:	vldr	s13, [pc, #288]	; 1e818 <__assert_fail@plt+0xc224>
   1e6f4:	vcmpe.f32	s15, s12
   1e6f8:	vmrs	APSR_nzcv, fpscr
   1e6fc:	vmovle.f32	s15, s13
   1e700:	vmovgt.f32	s15, s14
   1e704:	ldr	r3, [r7, #44]	; 0x2c
   1e708:	vstr	s15, [r5, #28]
   1e70c:	tst	r3, #1
   1e710:	beq	1e668 <__assert_fail@plt+0xc074>
   1e714:	ldr	r6, [pc, #272]	; 1e82c <__assert_fail@plt+0xc238>
   1e718:	ldr	r1, [pc, #272]	; 1e830 <__assert_fail@plt+0xc23c>
   1e71c:	ldr	r2, [r5, #4]
   1e720:	ldr	r0, [r6]
   1e724:	bl	1233c <fprintf@plt>
   1e728:	ldr	r1, [sp, #28]
   1e72c:	ldr	r0, [r6]
   1e730:	cmp	r1, #0
   1e734:	bne	1e7c4 <__assert_fail@plt+0xc1d0>
   1e738:	ldr	r2, [pc, #244]	; 1e834 <__assert_fail@plt+0xc240>
   1e73c:	ldr	r3, [pc, #244]	; 1e838 <__assert_fail@plt+0xc244>
   1e740:	ldr	r1, [pc, #244]	; 1e83c <__assert_fail@plt+0xc248>
   1e744:	bl	1233c <fprintf@plt>
   1e748:	add	r7, sp, #40	; 0x28
   1e74c:	ldr	r8, [r5, #48]	; 0x30
   1e750:	ldr	r9, [r6]
   1e754:	str	r8, [r7, #-28]!	; 0xffffffe4
   1e758:	mov	r0, r7
   1e75c:	bl	120a8 <ctime@plt>
   1e760:	asr	r3, r8, #31
   1e764:	mov	r2, r8
   1e768:	ldr	r1, [pc, #208]	; 1e840 <__assert_fail@plt+0xc24c>
   1e76c:	str	r0, [sp]
   1e770:	mov	r0, r9
   1e774:	bl	1233c <fprintf@plt>
   1e778:	ldr	r3, [sp, #28]
   1e77c:	cmp	r3, #2
   1e780:	bne	1e668 <__assert_fail@plt+0xc074>
   1e784:	ldr	r5, [r5, #48]	; 0x30
   1e788:	mov	r0, r7
   1e78c:	add	r5, r5, #86016	; 0x15000
   1e790:	add	r5, r5, #384	; 0x180
   1e794:	ldr	r6, [r6]
   1e798:	str	r5, [sp, #12]
   1e79c:	bl	120a8 <ctime@plt>
   1e7a0:	mov	r2, r5
   1e7a4:	asr	r3, r5, #31
   1e7a8:	ldr	r1, [pc, #148]	; 1e844 <__assert_fail@plt+0xc250>
   1e7ac:	str	r0, [sp]
   1e7b0:	mov	r0, r6
   1e7b4:	bl	1233c <fprintf@plt>
   1e7b8:	b	1e668 <__assert_fail@plt+0xc074>
   1e7bc:	vldr	s15, [pc, #88]	; 1e81c <__assert_fail@plt+0xc228>
   1e7c0:	b	1e704 <__assert_fail@plt+0xc110>
   1e7c4:	cmp	r1, #1
   1e7c8:	beq	1e7f4 <__assert_fail@plt+0xc200>
   1e7cc:	cmp	r1, #2
   1e7d0:	ldr	ip, [pc, #112]	; 1e848 <__assert_fail@plt+0xc254>
   1e7d4:	ldr	r1, [pc, #112]	; 1e84c <__assert_fail@plt+0xc258>
   1e7d8:	ldr	r2, [pc, #112]	; 1e850 <__assert_fail@plt+0xc25c>
   1e7dc:	ldr	r3, [pc, #112]	; 1e854 <__assert_fail@plt+0xc260>
   1e7e0:	moveq	r2, ip
   1e7e4:	moveq	r3, r1
   1e7e8:	b	1e740 <__assert_fail@plt+0xc14c>
   1e7ec:	vldr	s15, [pc, #32]	; 1e814 <__assert_fail@plt+0xc220>
   1e7f0:	b	1e704 <__assert_fail@plt+0xc110>
   1e7f4:	ldr	r2, [pc, #92]	; 1e858 <__assert_fail@plt+0xc264>
   1e7f8:	ldr	r3, [pc, #92]	; 1e85c <__assert_fail@plt+0xc268>
   1e7fc:	b	1e740 <__assert_fail@plt+0xc14c>
   1e800:	andeq	r0, r0, r0
   1e804:	rscsmi	r1, r5, r0, lsl #16
   1e808:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e80c:	svccc	0x00800000
   1e810:	sbcmi	r0, r8, #0
   1e814:			; <UNDEFINED> instruction: 0x3e99999a
   1e818:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e81c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e820:	andeq	r3, r4, r8, asr lr
   1e824:	andeq	r7, r5, ip, ror #28
   1e828:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e82c:	andeq	r7, r5, r8, asr #10
   1e830:	andeq	r3, r4, r8, asr #6
   1e834:	andeq	r3, r4, r0, lsr r3
   1e838:	andeq	r3, r4, r4, lsr r3
   1e83c:	andeq	r3, r4, r8, asr r3
   1e840:	andeq	r3, r4, ip, lsl pc
   1e844:	andeq	r3, r4, r8, lsl #30
   1e848:	andeq	r3, r4, r0, asr #6
   1e84c:	andeq	r3, r4, r4, lsl #30
   1e850:	andeq	r3, r4, ip, lsr #28
   1e854:	andeq	r3, r4, ip, lsr #6
   1e858:	andeq	r3, r4, r8, lsr r3
   1e85c:	andeq	r3, r4, ip, lsr r3
   1e860:	push	{r4, lr}
   1e864:	subs	r4, r0, #0
   1e868:	popeq	{r4, pc}
   1e86c:	ldr	r2, [pc, #100]	; 1e8d8 <__assert_fail@plt+0xc2e4>
   1e870:	ldr	r1, [pc, #100]	; 1e8dc <__assert_fail@plt+0xc2e8>
   1e874:	mov	r0, #0
   1e878:	ldr	r3, [r4]
   1e87c:	cmp	r3, r2
   1e880:	orreq	r0, r0, #1
   1e884:	beq	1e890 <__assert_fail@plt+0xc29c>
   1e888:	cmp	r3, r1
   1e88c:	orreq	r0, r0, #2
   1e890:	ldr	r4, [r4, #152]	; 0x98
   1e894:	cmp	r4, #0
   1e898:	bne	1e878 <__assert_fail@plt+0xc284>
   1e89c:	and	r0, r0, #3
   1e8a0:	cmp	r0, #3
   1e8a4:	popne	{r4, pc}
   1e8a8:	ldr	r3, [pc, #48]	; 1e8e0 <__assert_fail@plt+0xc2ec>
   1e8ac:	ldrb	r3, [r3, #1]
   1e8b0:	cmp	r3, #0
   1e8b4:	popne	{r4, pc}
   1e8b8:	mov	r2, #5
   1e8bc:	ldr	r1, [pc, #32]	; 1e8e4 <__assert_fail@plt+0xc2f0>
   1e8c0:	mov	r0, r4
   1e8c4:	bl	120b4 <dcgettext@plt>
   1e8c8:	mov	r1, r4
   1e8cc:	mov	r2, r0
   1e8d0:	mov	r0, #1
   1e8d4:	bl	121ec <error@plt>
   1e8d8:			; <UNDEFINED> instruction: 0x00013bb4
   1e8dc:	andeq	r3, r1, ip, lsl r8
   1e8e0:	andeq	r7, r5, ip, ror #28
   1e8e4:	andeq	r3, r4, r4, lsr #30
   1e8e8:	cmp	r0, #1
   1e8ec:	ldr	r3, [pc, #104]	; 1e95c <__assert_fail@plt+0xc368>
   1e8f0:	beq	1e944 <__assert_fail@plt+0xc350>
   1e8f4:	bcc	1e930 <__assert_fail@plt+0xc33c>
   1e8f8:	cmp	r0, #2
   1e8fc:	bne	1e918 <__assert_fail@plt+0xc324>
   1e900:	ldr	ip, [pc, #88]	; 1e960 <__assert_fail@plt+0xc36c>
   1e904:	ldr	r1, [pc, #88]	; 1e964 <__assert_fail@plt+0xc370>
   1e908:	mov	r2, #1
   1e90c:	str	ip, [r3, #52]	; 0x34
   1e910:	str	r1, [r3, #64]	; 0x40
   1e914:	strb	r2, [r3, #12]
   1e918:	ldr	r2, [r3, #44]	; 0x2c
   1e91c:	str	r0, [r3, #48]	; 0x30
   1e920:	tst	r2, #2
   1e924:	ldrne	r2, [pc, #60]	; 1e968 <__assert_fail@plt+0xc374>
   1e928:	strne	r2, [r3, #52]	; 0x34
   1e92c:	bx	lr
   1e930:	ldr	r1, [pc, #52]	; 1e96c <__assert_fail@plt+0xc378>
   1e934:	ldr	r2, [pc, #52]	; 1e970 <__assert_fail@plt+0xc37c>
   1e938:	str	r1, [r3, #52]	; 0x34
   1e93c:	str	r2, [r3, #64]	; 0x40
   1e940:	b	1e918 <__assert_fail@plt+0xc324>
   1e944:	ldr	r1, [pc, #40]	; 1e974 <__assert_fail@plt+0xc380>
   1e948:	ldr	r2, [pc, #40]	; 1e978 <__assert_fail@plt+0xc384>
   1e94c:	strb	r0, [r3, #12]
   1e950:	str	r1, [r3, #52]	; 0x34
   1e954:	str	r2, [r3, #64]	; 0x40
   1e958:	b	1e918 <__assert_fail@plt+0xc324>
   1e95c:	andeq	r7, r5, ip, ror #28
   1e960:	andeq	r8, r1, r4, lsl r1
   1e964:	andeq	sp, r1, r8, asr #8
   1e968:	andeq	r8, r1, r4, ror #5
   1e96c:	andeq	r8, r1, ip, ror r2
   1e970:	andeq	sl, r1, ip, ror lr
   1e974:	ldrdeq	r8, [r1], -ip
   1e978:	andeq	sp, r1, r8, lsl r4
   1e97c:	ldr	r3, [pc, #8]	; 1e98c <__assert_fail@plt+0xc398>
   1e980:	mov	r2, #0
   1e984:	str	r2, [r3]
   1e988:	bx	lr
   1e98c:	ldrdeq	r7, [r5], -r0
   1e990:	bx	lr
   1e994:	push	{r4, r5, r6, r7, r8, lr}
   1e998:	mov	r1, r0
   1e99c:	mov	r7, r0
   1e9a0:	mov	r2, #6
   1e9a4:	ldr	r0, [pc, #132]	; 1ea30 <__assert_fail@plt+0xc43c>
   1e9a8:	bl	12594 <strncmp@plt>
   1e9ac:	cmp	r0, #0
   1e9b0:	bne	1e9c4 <__assert_fail@plt+0xc3d0>
   1e9b4:	mov	r0, r7
   1e9b8:	bl	12300 <strlen@plt>
   1e9bc:	cmp	r0, #8
   1e9c0:	beq	1ea20 <__assert_fail@plt+0xc42c>
   1e9c4:	ldrb	r3, [r7]
   1e9c8:	ldr	r8, [pc, #100]	; 1ea34 <__assert_fail@plt+0xc440>
   1e9cc:	ldr	r0, [pc, #100]	; 1ea38 <__assert_fail@plt+0xc444>
   1e9d0:	cmp	r3, #45	; 0x2d
   1e9d4:	addeq	r6, r7, #1
   1e9d8:	movne	r6, r7
   1e9dc:	mov	r4, r8
   1e9e0:	mov	r5, #0
   1e9e4:	b	1e9f8 <__assert_fail@plt+0xc404>
   1e9e8:	ldr	r0, [r4, #4]
   1e9ec:	add	r5, r5, #1
   1e9f0:	cmp	r0, #0
   1e9f4:	beq	1ea1c <__assert_fail@plt+0xc428>
   1e9f8:	mov	r1, r6
   1e9fc:	bl	11f40 <strcmp@plt>
   1ea00:	add	r4, r4, #16
   1ea04:	cmp	r0, #0
   1ea08:	bne	1e9e8 <__assert_fail@plt+0xc3f4>
   1ea0c:	add	r1, r8, r5, lsl #4
   1ea10:	mov	r0, r7
   1ea14:	pop	{r4, r5, r6, r7, r8, lr}
   1ea18:	b	1d2dc <__assert_fail@plt+0xace8>
   1ea1c:	pop	{r4, r5, r6, r7, r8, pc}
   1ea20:	mov	r0, r7
   1ea24:	ldr	r1, [pc, #16]	; 1ea3c <__assert_fail@plt+0xc448>
   1ea28:	pop	{r4, r5, r6, r7, r8, lr}
   1ea2c:	b	1d2dc <__assert_fail@plt+0xace8>
   1ea30:	strdeq	r3, [r4], -ip
   1ea34:	andeq	r2, r4, r0, lsr #22
   1ea38:	andeq	r1, r4, r4, asr #1
   1ea3c:	muleq	r4, r0, r0
   1ea40:	push	{r4, lr}
   1ea44:	ldr	r0, [pc, #40]	; 1ea74 <__assert_fail@plt+0xc480>
   1ea48:	bl	1e994 <__assert_fail@plt+0xc3a0>
   1ea4c:	bl	17b04 <__assert_fail@plt+0x5510>
   1ea50:	mov	r3, #0
   1ea54:	mov	r2, #0
   1ea58:	strb	r3, [r0, #19]
   1ea5c:	strb	r3, [r0, #18]
   1ea60:	str	r2, [r0, #28]
   1ea64:	strb	r3, [r0, #17]
   1ea68:	strb	r3, [r0, #16]
   1ea6c:	mov	r0, #1
   1ea70:	pop	{r4, pc}
   1ea74:	ldrdeq	r3, [r4], -r0
   1ea78:	b	1ea40 <__assert_fail@plt+0xc44c>
   1ea7c:	cmp	r1, #0
   1ea80:	beq	1eb24 <__assert_fail@plt+0xc530>
   1ea84:	ldr	r3, [r2]
   1ea88:	push	{r4, r5, r6, lr}
   1ea8c:	sub	sp, sp, #104	; 0x68
   1ea90:	ldr	r4, [r1, r3, lsl #2]
   1ea94:	cmp	r4, #0
   1ea98:	moveq	r0, r4
   1ea9c:	beq	1eadc <__assert_fail@plt+0xc4e8>
   1eaa0:	ldr	r6, [pc, #212]	; 1eb7c <__assert_fail@plt+0xc588>
   1eaa4:	add	r3, r3, #1
   1eaa8:	str	r3, [r2]
   1eaac:	ldrh	r3, [r6, #68]	; 0x44
   1eab0:	mov	r5, r0
   1eab4:	cmp	r3, #1
   1eab8:	bls	1eae4 <__assert_fail@plt+0xc4f0>
   1eabc:	mov	r0, r4
   1eac0:	bl	1ad00 <__assert_fail@plt+0x870c>
   1eac4:	cmp	r0, #0
   1eac8:	bne	1eae4 <__assert_fail@plt+0xc4f0>
   1eacc:	ldr	r3, [r6, #44]	; 0x2c
   1ead0:	tst	r3, #8
   1ead4:	bne	1eb58 <__assert_fail@plt+0xc564>
   1ead8:	bl	1ea40 <__assert_fail@plt+0xc44c>
   1eadc:	add	sp, sp, #104	; 0x68
   1eae0:	pop	{r4, r5, r6, pc}
   1eae4:	mov	r0, r5
   1eae8:	mov	r1, r4
   1eaec:	bl	17aac <__assert_fail@plt+0x54b8>
   1eaf0:	mov	r2, sp
   1eaf4:	ldr	r1, [pc, #132]	; 1eb80 <__assert_fail@plt+0xc58c>
   1eaf8:	str	r4, [r0, #40]	; 0x28
   1eafc:	mov	r5, r0
   1eb00:	mov	r0, #3
   1eb04:	bl	12558 <__xstat64@plt>
   1eb08:	cmp	r0, #0
   1eb0c:	beq	1eb2c <__assert_fail@plt+0xc538>
   1eb10:	vldr	s15, [pc, #88]	; 1eb70 <__assert_fail@plt+0xc57c>
   1eb14:	mov	r0, #1
   1eb18:	vstr	s15, [r5, #28]
   1eb1c:	add	sp, sp, #104	; 0x68
   1eb20:	pop	{r4, r5, r6, pc}
   1eb24:	mov	r0, r1
   1eb28:	bx	lr
   1eb2c:	ldr	r1, [pc, #76]	; 1eb80 <__assert_fail@plt+0xc58c>
   1eb30:	mov	r0, sp
   1eb34:	bl	1abd4 <__assert_fail@plt+0x85e0>
   1eb38:	mov	r1, r0
   1eb3c:	mov	r0, r4
   1eb40:	bl	11f40 <strcmp@plt>
   1eb44:	vldr	s15, [pc, #40]	; 1eb74 <__assert_fail@plt+0xc580>
   1eb48:	vldr	s14, [pc, #40]	; 1eb78 <__assert_fail@plt+0xc584>
   1eb4c:	cmp	r0, #0
   1eb50:	vmovne.f32	s15, s14
   1eb54:	b	1eb14 <__assert_fail@plt+0xc520>
   1eb58:	ldr	r3, [pc, #36]	; 1eb84 <__assert_fail@plt+0xc590>
   1eb5c:	mov	r2, r4
   1eb60:	ldr	r1, [pc, #32]	; 1eb88 <__assert_fail@plt+0xc594>
   1eb64:	ldr	r0, [r3]
   1eb68:	bl	1233c <fprintf@plt>
   1eb6c:	b	1ead8 <__assert_fail@plt+0xc4e4>
   1eb70:	svccc	0x00800000
   1eb74:	svccc	0x00333333
   1eb78:			; <UNDEFINED> instruction: 0x3e99999a
   1eb7c:	andeq	r7, r5, ip, ror #28
   1eb80:	andeq	r6, r4, r0, lsr #4
   1eb84:	andeq	r7, r5, r8, asr #10
   1eb88:	ldrdeq	r3, [r4], -r8
   1eb8c:	mov	r0, #0
   1eb90:	bx	lr
   1eb94:	push	{r4, r5, r6, lr}
   1eb98:	sub	sp, sp, #16
   1eb9c:	mov	r4, r1
   1eba0:	mov	r6, r0
   1eba4:	bl	12228 <getenv@plt>
   1eba8:	subs	r3, r0, #0
   1ebac:	beq	1ebe8 <__assert_fail@plt+0xc5f4>
   1ebb0:	mov	r5, #0
   1ebb4:	str	r5, [sp]
   1ebb8:	add	r3, sp, #12
   1ebbc:	mov	r2, #10
   1ebc0:	add	r1, sp, #8
   1ebc4:	bl	2c7b4 <__assert_fail@plt+0x1a1c0>
   1ebc8:	cmp	r0, r5
   1ebcc:	bne	1ebf4 <__assert_fail@plt+0xc600>
   1ebd0:	ldr	r0, [sp, #12]
   1ebd4:	cmp	r0, r4
   1ebd8:	movcs	r0, #0
   1ebdc:	movcc	r0, #1
   1ebe0:	add	sp, sp, #16
   1ebe4:	pop	{r4, r5, r6, pc}
   1ebe8:	mov	r0, r3
   1ebec:	add	sp, sp, #16
   1ebf0:	pop	{r4, r5, r6, pc}
   1ebf4:	bl	12348 <__errno_location@plt>
   1ebf8:	mov	r2, #5
   1ebfc:	ldr	r1, [pc, #28]	; 1ec20 <__assert_fail@plt+0xc62c>
   1ec00:	ldr	r4, [r0]
   1ec04:	mov	r0, r5
   1ec08:	bl	120b4 <dcgettext@plt>
   1ec0c:	mov	r3, r6
   1ec10:	mov	r1, r4
   1ec14:	mov	r2, r0
   1ec18:	mov	r0, #1
   1ec1c:	bl	121ec <error@plt>
   1ec20:	andeq	r4, r4, r4, ror r2
   1ec24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ec28:	subs	r7, r2, #0
   1ec2c:	ldr	r9, [sp, #36]	; 0x24
   1ec30:	ldr	r8, [sp, #40]	; 0x28
   1ec34:	beq	1ee74 <__assert_fail@plt+0xc880>
   1ec38:	ldr	sl, [pc, #628]	; 1eeb4 <__assert_fail@plt+0xc8c0>
   1ec3c:	mov	r5, r0
   1ec40:	cmp	r7, sl
   1ec44:	mov	r4, r1
   1ec48:	mov	r6, r3
   1ec4c:	beq	1edc4 <__assert_fail@plt+0xc7d0>
   1ec50:	ldr	r1, [r1, #16]
   1ec54:	add	r3, r3, r9
   1ec58:	ldr	r2, [r0, #12]
   1ec5c:	add	r3, r3, r1
   1ec60:	cmp	r3, r2
   1ec64:	bls	1eda0 <__assert_fail@plt+0xc7ac>
   1ec68:	cmp	r8, #0
   1ec6c:	bne	1eea8 <__assert_fail@plt+0xc8b4>
   1ec70:	ldr	r2, [r4]
   1ec74:	ldr	r3, [r0, #28]
   1ec78:	cmp	r2, r3
   1ec7c:	beq	1eea8 <__assert_fail@plt+0xc8b4>
   1ec80:	ldr	r3, [r0, #24]
   1ec84:	cmp	r3, #0
   1ec88:	bne	1ee88 <__assert_fail@plt+0xc894>
   1ec8c:	ldr	r3, [r0]
   1ec90:	cmp	r3, #0
   1ec94:	beq	1ecb0 <__assert_fail@plt+0xc6bc>
   1ec98:	ldr	r3, [r0, #36]	; 0x24
   1ec9c:	cmp	r3, #0
   1eca0:	bne	1ee88 <__assert_fail@plt+0xc894>
   1eca4:	ldr	r3, [r0, #40]	; 0x28
   1eca8:	cmp	r3, #0
   1ecac:	bne	1ee88 <__assert_fail@plt+0xc894>
   1ecb0:	mov	r1, r4
   1ecb4:	mov	r0, r5
   1ecb8:	bl	1f08c <__assert_fail@plt+0xca98>
   1ecbc:	ldr	r3, [r4]
   1ecc0:	ldr	r2, [r5, #40]	; 0x28
   1ecc4:	cmp	r2, #0
   1ecc8:	beq	1ecdc <__assert_fail@plt+0xc6e8>
   1eccc:	ldr	r1, [r5, #28]
   1ecd0:	sub	r1, r3, r1
   1ecd4:	cmp	r2, r1
   1ecd8:	beq	1edb8 <__assert_fail@plt+0xc7c4>
   1ecdc:	ldr	r2, [r5, #16]
   1ece0:	cmp	r2, r3
   1ece4:	beq	1edb8 <__assert_fail@plt+0xc7c4>
   1ece8:	ldr	r3, [r4]
   1ecec:	mov	r2, #1
   1ecf0:	str	r2, [r4, #28]
   1ecf4:	ldr	r1, [r4, #8]
   1ecf8:	cmp	r1, r3
   1ecfc:	bls	1eddc <__assert_fail@plt+0xc7e8>
   1ed00:	ldr	r1, [r4, #4]
   1ed04:	cmp	r7, sl
   1ed08:	beq	1ee0c <__assert_fail@plt+0xc818>
   1ed0c:	ldr	ip, [r4, #16]
   1ed10:	ldr	r2, [r4, #12]
   1ed14:	ldr	r0, [sp, #32]
   1ed18:	add	r2, r2, ip
   1ed1c:	cmp	r0, #0
   1ed20:	add	r0, r3, #1
   1ed24:	str	r0, [r4]
   1ed28:	str	r2, [r1, r3, lsl #2]
   1ed2c:	beq	1ed4c <__assert_fail@plt+0xc758>
   1ed30:	ldr	r0, [r4, #12]
   1ed34:	ldr	r1, [sp, #32]
   1ed38:	add	r0, r0, ip
   1ed3c:	bl	121b0 <strcpy@plt>
   1ed40:	ldr	ip, [r4, #16]
   1ed44:	add	ip, r9, ip
   1ed48:	str	ip, [r4, #16]
   1ed4c:	ldr	r0, [r4, #12]
   1ed50:	mov	r1, r7
   1ed54:	add	r0, r0, ip
   1ed58:	bl	121b0 <strcpy@plt>
   1ed5c:	ldr	r3, [r4, #16]
   1ed60:	cmp	r8, #0
   1ed64:	add	r6, r6, r3
   1ed68:	str	r6, [r4, #16]
   1ed6c:	ldr	r3, [r4]
   1ed70:	bne	1ee28 <__assert_fail@plt+0xc834>
   1ed74:	ldr	r2, [r5, #40]	; 0x28
   1ed78:	cmp	r2, #0
   1ed7c:	beq	1ed90 <__assert_fail@plt+0xc79c>
   1ed80:	ldr	r1, [r5, #28]
   1ed84:	sub	r1, r3, r1
   1ed88:	cmp	r2, r1
   1ed8c:	beq	1ee34 <__assert_fail@plt+0xc840>
   1ed90:	ldr	r2, [r5, #16]
   1ed94:	cmp	r3, r2
   1ed98:	beq	1ee34 <__assert_fail@plt+0xc840>
   1ed9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eda0:	cmp	r8, #0
   1eda4:	ldr	r3, [r4]
   1eda8:	beq	1ecc0 <__assert_fail@plt+0xc6cc>
   1edac:	ldr	r2, [r0, #16]
   1edb0:	cmp	r3, r2
   1edb4:	bne	1ecf4 <__assert_fail@plt+0xc700>
   1edb8:	mov	r1, r4
   1edbc:	mov	r0, r5
   1edc0:	bl	1f08c <__assert_fail@plt+0xca98>
   1edc4:	cmp	r8, #0
   1edc8:	ldrne	r3, [r4]
   1edcc:	moveq	r2, #1
   1edd0:	ldreq	r3, [r4]
   1edd4:	streq	r2, [r4, #28]
   1edd8:	b	1ecf4 <__assert_fail@plt+0xc700>
   1eddc:	ldr	r0, [r4, #4]
   1ede0:	cmp	r0, #0
   1ede4:	beq	1ee54 <__assert_fail@plt+0xc860>
   1ede8:	lsl	r3, r1, #1
   1edec:	str	r3, [r4, #8]
   1edf0:	lsl	r1, r1, #3
   1edf4:	bl	2c1c0 <__assert_fail@plt+0x19bcc>
   1edf8:	cmp	r7, sl
   1edfc:	ldr	r3, [r4]
   1ee00:	mov	r1, r0
   1ee04:	str	r0, [r4, #4]
   1ee08:	bne	1ed0c <__assert_fail@plt+0xc718>
   1ee0c:	add	r0, r3, #1
   1ee10:	mov	r2, #0
   1ee14:	cmp	r8, #0
   1ee18:	str	r0, [r4]
   1ee1c:	str	r2, [r1, r3, lsl #2]
   1ee20:	bne	1ee48 <__assert_fail@plt+0xc854>
   1ee24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ee28:	ldr	r2, [r5, #16]
   1ee2c:	cmp	r3, r2
   1ee30:	bne	1ee4c <__assert_fail@plt+0xc858>
   1ee34:	mov	r0, r5
   1ee38:	mov	r1, r4
   1ee3c:	bl	1f08c <__assert_fail@plt+0xca98>
   1ee40:	cmp	r8, #0
   1ee44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ee48:	ldr	r6, [r4, #16]
   1ee4c:	str	r6, [r4, #20]
   1ee50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ee54:	mov	r3, #64	; 0x40
   1ee58:	str	r3, [r4, #8]
   1ee5c:	mov	r0, #256	; 0x100
   1ee60:	bl	2c184 <__assert_fail@plt+0x19b90>
   1ee64:	ldr	r3, [r4]
   1ee68:	str	r0, [r4, #4]
   1ee6c:	mov	r1, r0
   1ee70:	b	1ed04 <__assert_fail@plt+0xc710>
   1ee74:	ldr	r3, [pc, #60]	; 1eeb8 <__assert_fail@plt+0xc8c4>
   1ee78:	ldr	r2, [pc, #60]	; 1eebc <__assert_fail@plt+0xc8c8>
   1ee7c:	ldr	r1, [pc, #60]	; 1eec0 <__assert_fail@plt+0xc8cc>
   1ee80:	ldr	r0, [pc, #60]	; 1eec4 <__assert_fail@plt+0xc8d0>
   1ee84:	bl	125f4 <__assert_fail@plt>
   1ee88:	ldr	r1, [pc, #56]	; 1eec8 <__assert_fail@plt+0xc8d4>
   1ee8c:	mov	r2, #5
   1ee90:	mov	r0, #0
   1ee94:	bl	120b4 <dcgettext@plt>
   1ee98:	mov	r1, #0
   1ee9c:	mov	r2, r0
   1eea0:	mov	r0, #1
   1eea4:	bl	121ec <error@plt>
   1eea8:	mov	r2, #5
   1eeac:	ldr	r1, [pc, #24]	; 1eecc <__assert_fail@plt+0xc8d8>
   1eeb0:	b	1ee90 <__assert_fail@plt+0xc89c>
   1eeb4:	andeq	r4, r4, ip, asr #5
   1eeb8:	andeq	r4, r4, ip, lsr #4
   1eebc:	andeq	r0, r0, r5, asr r1
   1eec0:			; <UNDEFINED> instruction: 0x000442b4
   1eec4:	andeq	r4, r4, r0, asr #5
   1eec8:	andeq	r4, r4, r4, lsl r3
   1eecc:	ldrdeq	r4, [r4], -r8
   1eed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eed4:	sub	sp, sp, #36	; 0x24
   1eed8:	mov	r5, r3
   1eedc:	ldr	r3, [sp, #72]	; 0x48
   1eee0:	ldr	r4, [pc, #412]	; 1f084 <__assert_fail@plt+0xca90>
   1eee4:	str	r3, [sp, #8]
   1eee8:	ldr	r3, [sp, #76]	; 0x4c
   1eeec:	str	r1, [sp, #24]
   1eef0:	str	r3, [sp, #16]
   1eef4:	ldr	r3, [sp, #80]	; 0x50
   1eef8:	ldr	r1, [r4]
   1eefc:	str	r3, [sp, #12]
   1ef00:	ldr	r3, [sp, #84]	; 0x54
   1ef04:	mov	r9, r0
   1ef08:	str	r3, [sp, #4]
   1ef0c:	ldr	r0, [r0, #12]
   1ef10:	ldr	r3, [sp, #88]	; 0x58
   1ef14:	cmp	r1, #0
   1ef18:	str	r1, [sp, #20]
   1ef1c:	mov	r7, r2
   1ef20:	sub	r6, r0, #1
   1ef24:	str	r3, [sp, #28]
   1ef28:	beq	1f070 <__assert_fail@plt+0xca7c>
   1ef2c:	ldr	r3, [sp, #4]
   1ef30:	ldr	r2, [sp, #16]
   1ef34:	ldr	r4, [sp, #20]
   1ef38:	add	sl, r3, r2
   1ef3c:	b	1efc0 <__assert_fail@plt+0xc9cc>
   1ef40:	sub	fp, r8, r7
   1ef44:	cmp	r6, fp
   1ef48:	bls	1f044 <__assert_fail@plt+0xca50>
   1ef4c:	mov	r0, r4
   1ef50:	mov	r1, r7
   1ef54:	sub	r6, r6, fp
   1ef58:	mov	r2, fp
   1ef5c:	bl	12390 <strncpy@plt>
   1ef60:	cmp	sl, r6
   1ef64:	sub	r5, r5, fp
   1ef68:	add	r4, r4, fp
   1ef6c:	bcs	1f040 <__assert_fail@plt+0xca4c>
   1ef70:	ldr	r3, [sp, #8]
   1ef74:	sub	r6, r6, sl
   1ef78:	cmp	r3, #0
   1ef7c:	beq	1ef94 <__assert_fail@plt+0xc9a0>
   1ef80:	mov	r1, r3
   1ef84:	mov	r0, r4
   1ef88:	bl	121b0 <strcpy@plt>
   1ef8c:	ldr	r3, [sp, #16]
   1ef90:	add	r4, r4, r3
   1ef94:	mov	r0, r4
   1ef98:	ldr	r1, [sp, #12]
   1ef9c:	bl	121b0 <strcpy@plt>
   1efa0:	ldr	r3, [r9, #20]
   1efa4:	ldr	r2, [sp, #4]
   1efa8:	add	r7, r8, r3
   1efac:	sub	r5, r5, r3
   1efb0:	ldrb	r3, [r7]
   1efb4:	add	r4, r4, r2
   1efb8:	cmp	r3, #0
   1efbc:	beq	1f008 <__assert_fail@plt+0xca14>
   1efc0:	ldr	r1, [r9, #24]
   1efc4:	mov	r0, r7
   1efc8:	bl	23e8c <__assert_fail@plt+0x11898>
   1efcc:	subs	r8, r0, #0
   1efd0:	bne	1ef40 <__assert_fail@plt+0xc94c>
   1efd4:	cmp	r5, r6
   1efd8:	bcs	1f044 <__assert_fail@plt+0xca50>
   1efdc:	mov	r1, r7
   1efe0:	add	r7, r7, r5
   1efe4:	mov	r0, r4
   1efe8:	mov	r2, r5
   1efec:	bl	12390 <strncpy@plt>
   1eff0:	ldrb	r3, [r7]
   1eff4:	sub	r6, r6, r5
   1eff8:	add	r4, r4, r5
   1effc:	cmp	r3, #0
   1f000:	mov	r5, #0
   1f004:	bne	1efc0 <__assert_fail@plt+0xc9cc>
   1f008:	mov	ip, #0
   1f00c:	strb	ip, [r4], #1
   1f010:	ldr	r3, [sp, #20]
   1f014:	str	ip, [sp, #76]	; 0x4c
   1f018:	str	ip, [sp, #72]	; 0x48
   1f01c:	ldr	ip, [sp, #28]
   1f020:	mov	r2, r3
   1f024:	ldr	r1, [sp, #24]
   1f028:	mov	r0, r9
   1f02c:	sub	r3, r4, r3
   1f030:	str	ip, [sp, #80]	; 0x50
   1f034:	add	sp, sp, #36	; 0x24
   1f038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f03c:	b	1ec24 <__assert_fail@plt+0xc630>
   1f040:	mov	r7, r8
   1f044:	ldrb	r3, [r7]
   1f048:	cmp	r3, #0
   1f04c:	beq	1f008 <__assert_fail@plt+0xca14>
   1f050:	mov	r2, #5
   1f054:	ldr	r1, [pc, #44]	; 1f088 <__assert_fail@plt+0xca94>
   1f058:	mov	r0, #0
   1f05c:	bl	120b4 <dcgettext@plt>
   1f060:	mov	r1, #0
   1f064:	mov	r2, r0
   1f068:	mov	r0, #1
   1f06c:	bl	121ec <error@plt>
   1f070:	add	r0, r0, #1
   1f074:	bl	2c184 <__assert_fail@plt+0x19b90>
   1f078:	str	r0, [sp, #20]
   1f07c:	str	r0, [r4]
   1f080:	b	1ef2c <__assert_fail@plt+0xc938>
   1f084:	ldrdeq	r7, [r5], -ip
   1f088:	andeq	r4, r4, ip, lsr #6
   1f08c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f090:	sub	sp, sp, #20
   1f094:	mov	r3, #0
   1f098:	mov	r7, r1
   1f09c:	str	r3, [sp, #8]
   1f0a0:	str	r3, [sp, #4]
   1f0a4:	str	r3, [sp]
   1f0a8:	ldr	r2, [pc, #668]	; 1f34c <__assert_fail@plt+0xcd58>
   1f0ac:	mov	r9, r0
   1f0b0:	bl	1ec24 <__assert_fail@plt+0xc630>
   1f0b4:	ldr	r3, [r7]
   1f0b8:	cmp	r3, #0
   1f0bc:	beq	1f2f4 <__assert_fail@plt+0xcd00>
   1f0c0:	ldr	r2, [r7, #4]
   1f0c4:	sub	r3, r3, #-1073741823	; 0xc0000001
   1f0c8:	ldr	r6, [r2, r3, lsl #2]
   1f0cc:	lsl	r3, r3, #2
   1f0d0:	cmp	r6, #0
   1f0d4:	bne	1f338 <__assert_fail@plt+0xcd44>
   1f0d8:	add	r0, r3, #8
   1f0dc:	bl	2c184 <__assert_fail@plt+0x19b90>
   1f0e0:	ldr	r1, [r7]
   1f0e4:	mov	sl, r6
   1f0e8:	mov	r5, r1
   1f0ec:	mov	r8, r0
   1f0f0:	ldr	r0, [r9, #28]
   1f0f4:	cmp	r0, #0
   1f0f8:	beq	1f2dc <__assert_fail@plt+0xcce8>
   1f0fc:	ldr	r3, [r7, #4]
   1f100:	lsl	r4, r0, #2
   1f104:	add	lr, r3, r4
   1f108:	sub	r2, r8, #4
   1f10c:	ldr	ip, [r3], #4
   1f110:	cmp	lr, r3
   1f114:	str	ip, [r2, #4]!
   1f118:	bne	1f10c <__assert_fail@plt+0xcb18>
   1f11c:	mov	r2, r4
   1f120:	mov	r4, r0
   1f124:	add	ip, r6, r0
   1f128:	cmp	r1, ip
   1f12c:	cmphi	r5, r0
   1f130:	bls	1f168 <__assert_fail@plt+0xcb74>
   1f134:	ldr	r3, [r7, #4]
   1f138:	add	r2, r8, r0, lsl #2
   1f13c:	add	r3, r3, ip, lsl #2
   1f140:	add	r4, r4, #1
   1f144:	add	lr, r6, r4
   1f148:	ldr	ip, [r3], #4
   1f14c:	cmp	r1, lr
   1f150:	cmphi	r5, r4
   1f154:	str	ip, [r2], #4
   1f158:	bhi	1f140 <__assert_fail@plt+0xcb4c>
   1f15c:	cmp	r4, r0
   1f160:	bcc	1f324 <__assert_fail@plt+0xcd30>
   1f164:	lsl	r2, r4, #2
   1f168:	str	sl, [r8, r2]
   1f16c:	ldr	fp, [r9, #32]
   1f170:	mov	r3, r8
   1f174:	mov	r2, r4
   1f178:	ldr	r1, [r7, #24]
   1f17c:	mov	r0, r9
   1f180:	blx	fp
   1f184:	subs	fp, r0, #0
   1f188:	bne	1f254 <__assert_fail@plt+0xcc60>
   1f18c:	ldr	r2, [r9, #28]
   1f190:	add	ip, r2, #1
   1f194:	cmp	r5, ip
   1f198:	bls	1f308 <__assert_fail@plt+0xcd14>
   1f19c:	ldr	r1, [r7, #40]	; 0x28
   1f1a0:	cmp	r5, r1
   1f1a4:	movcs	r3, #0
   1f1a8:	movcc	r3, #1
   1f1ac:	cmp	r1, #0
   1f1b0:	orreq	r3, r3, #1
   1f1b4:	cmp	r3, #0
   1f1b8:	ldr	r3, [r7, #36]	; 0x24
   1f1bc:	strne	r5, [r7, #40]	; 0x28
   1f1c0:	moveq	r0, r2
   1f1c4:	ldrne	r0, [r9, #28]
   1f1c8:	cmp	r3, #0
   1f1cc:	beq	1f24c <__assert_fail@plt+0xcc58>
   1f1d0:	ldr	r1, [r7, #40]	; 0x28
   1f1d4:	cmp	r3, r1
   1f1d8:	bcs	1f24c <__assert_fail@plt+0xcc58>
   1f1dc:	sub	r3, r1, r3
   1f1e0:	lsrs	r3, r3, #1
   1f1e4:	subne	r5, r5, r3
   1f1e8:	subeq	r5, r5, #1
   1f1ec:	cmp	r2, #0
   1f1f0:	beq	1f200 <__assert_fail@plt+0xcc0c>
   1f1f4:	cmp	ip, r5
   1f1f8:	bcc	1f208 <__assert_fail@plt+0xcc14>
   1f1fc:	mov	r5, ip
   1f200:	cmp	r5, #0
   1f204:	moveq	r5, #1
   1f208:	ldr	r1, [r7]
   1f20c:	add	r3, r6, #1
   1f210:	sub	r2, r1, r0
   1f214:	cmp	r3, r2
   1f218:	bcc	1f0f4 <__assert_fail@plt+0xcb00>
   1f21c:	mov	r0, r8
   1f220:	bl	2db68 <__assert_fail@plt+0x1b574>
   1f224:	ldr	r0, [r9, #28]
   1f228:	ldr	r1, [r7, #20]
   1f22c:	mov	r2, #0
   1f230:	mvn	r3, #0
   1f234:	str	r0, [r7]
   1f238:	str	r1, [r7, #16]
   1f23c:	str	r2, [r7, #28]
   1f240:	str	r3, [r7, #32]
   1f244:	add	sp, sp, #20
   1f248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f24c:	lsr	r5, r5, #1
   1f250:	b	1f1ec <__assert_fail@plt+0xcbf8>
   1f254:	ldr	r3, [r7, #36]	; 0x24
   1f258:	ldr	r1, [r9, #28]
   1f25c:	cmp	r5, r3
   1f260:	movhi	r3, r5
   1f264:	strhi	r5, [r7, #36]	; 0x24
   1f268:	movls	r0, r1
   1f26c:	ldrhi	r0, [r9, #28]
   1f270:	cmp	r3, #0
   1f274:	beq	1f2c4 <__assert_fail@plt+0xccd0>
   1f278:	ldr	r2, [r7, #40]	; 0x28
   1f27c:	cmp	r2, r3
   1f280:	bls	1f2c4 <__assert_fail@plt+0xccd0>
   1f284:	sub	r3, r2, r3
   1f288:	lsrs	r3, r3, #1
   1f28c:	addne	r3, r5, r3
   1f290:	addeq	r3, r5, #1
   1f294:	cmp	r1, #0
   1f298:	beq	1f2ac <__assert_fail@plt+0xccb8>
   1f29c:	mov	r5, r3
   1f2a0:	add	r3, r1, #1
   1f2a4:	cmp	r3, r5
   1f2a8:	bcc	1f2b8 <__assert_fail@plt+0xccc4>
   1f2ac:	cmp	r3, #0
   1f2b0:	movne	r5, r3
   1f2b4:	moveq	r5, #1
   1f2b8:	add	r6, r6, r4
   1f2bc:	sub	r6, r6, r0
   1f2c0:	b	1f208 <__assert_fail@plt+0xcc14>
   1f2c4:	cmn	r5, #1
   1f2c8:	beq	1f2e8 <__assert_fail@plt+0xccf4>
   1f2cc:	cmp	r1, #0
   1f2d0:	add	r5, r5, #1
   1f2d4:	bne	1f2a0 <__assert_fail@plt+0xccac>
   1f2d8:	b	1f2b8 <__assert_fail@plt+0xccc4>
   1f2dc:	mov	r2, sl
   1f2e0:	mov	r4, r0
   1f2e4:	b	1f124 <__assert_fail@plt+0xcb30>
   1f2e8:	cmp	r1, #0
   1f2ec:	bne	1f2a0 <__assert_fail@plt+0xccac>
   1f2f0:	b	1f2b8 <__assert_fail@plt+0xccc4>
   1f2f4:	ldr	r3, [pc, #84]	; 1f350 <__assert_fail@plt+0xcd5c>
   1f2f8:	ldr	r2, [pc, #84]	; 1f354 <__assert_fail@plt+0xcd60>
   1f2fc:	ldr	r1, [pc, #84]	; 1f358 <__assert_fail@plt+0xcd64>
   1f300:	ldr	r0, [pc, #84]	; 1f35c <__assert_fail@plt+0xcd68>
   1f304:	bl	125f4 <__assert_fail@plt>
   1f308:	mov	r2, #5
   1f30c:	ldr	r1, [pc, #76]	; 1f360 <__assert_fail@plt+0xcd6c>
   1f310:	bl	120b4 <dcgettext@plt>
   1f314:	mov	r1, fp
   1f318:	mov	r2, r0
   1f31c:	mov	r0, #1
   1f320:	bl	121ec <error@plt>
   1f324:	ldr	r3, [pc, #56]	; 1f364 <__assert_fail@plt+0xcd70>
   1f328:	mov	r2, #242	; 0xf2
   1f32c:	ldr	r1, [pc, #36]	; 1f358 <__assert_fail@plt+0xcd64>
   1f330:	ldr	r0, [pc, #48]	; 1f368 <__assert_fail@plt+0xcd74>
   1f334:	bl	125f4 <__assert_fail@plt>
   1f338:	ldr	r3, [pc, #16]	; 1f350 <__assert_fail@plt+0xcd5c>
   1f33c:	ldr	r2, [pc, #40]	; 1f36c <__assert_fail@plt+0xcd78>
   1f340:	ldr	r1, [pc, #16]	; 1f358 <__assert_fail@plt+0xcd64>
   1f344:	ldr	r0, [pc, #36]	; 1f370 <__assert_fail@plt+0xcd7c>
   1f348:	bl	125f4 <__assert_fail@plt>
   1f34c:	andeq	r4, r4, ip, asr #5
   1f350:	andeq	r4, r4, r8, lsr r2
   1f354:	andeq	r0, r0, r5, lsl #2
   1f358:			; <UNDEFINED> instruction: 0x000442b4
   1f35c:	andeq	r4, r4, r0, asr #6
   1f360:	andeq	r4, r4, r0, lsr #7
   1f364:	andeq	r4, r4, r4, asr #4
   1f368:	andeq	r4, r4, r0, lsl #7
   1f36c:	andeq	r0, r0, r6, lsl #2
   1f370:	andeq	r4, r4, r4, asr r3
   1f374:	push	{r4, lr}
   1f378:	mov	r0, #0
   1f37c:	bl	120cc <sysconf@plt>
   1f380:	cmp	r0, #0
   1f384:	mvnle	r0, #-2147483648	; 0x80000000
   1f388:	pop	{r4, pc}
   1f38c:	ldr	r3, [pc, #64]	; 1f3d4 <__assert_fail@plt+0xcde0>
   1f390:	push	{r4, r5, r6, lr}
   1f394:	ldr	r4, [r3]
   1f398:	ldr	r3, [r4]
   1f39c:	cmp	r3, #0
   1f3a0:	beq	1f3cc <__assert_fail@plt+0xcdd8>
   1f3a4:	mov	r5, #0
   1f3a8:	mov	r0, r3
   1f3ac:	bl	12300 <strlen@plt>
   1f3b0:	ldr	r3, [r4, #4]!
   1f3b4:	cmp	r3, #0
   1f3b8:	add	r0, r0, #1
   1f3bc:	add	r5, r5, r0
   1f3c0:	bne	1f3a8 <__assert_fail@plt+0xcdb4>
   1f3c4:	mov	r0, r5
   1f3c8:	pop	{r4, r5, r6, pc}
   1f3cc:	mov	r5, r3
   1f3d0:	b	1f3c4 <__assert_fail@plt+0xcdd0>
   1f3d4:	andeq	r7, r5, ip, lsr r5
   1f3d8:	push	{r4, r5, r6, lr}
   1f3dc:	mov	r4, r0
   1f3e0:	mov	r6, r1
   1f3e4:	bl	1f38c <__assert_fail@plt+0xcd98>
   1f3e8:	mov	r3, #4096	; 0x1000
   1f3ec:	str	r3, [r4, #8]
   1f3f0:	mov	r5, r0
   1f3f4:	mov	r0, #0
   1f3f8:	bl	120cc <sysconf@plt>
   1f3fc:	mov	r2, #0
   1f400:	str	r2, [r4]
   1f404:	cmp	r0, #0
   1f408:	mvnle	r0, #-2147483648	; 0x80000000
   1f40c:	cmp	r5, r0
   1f410:	str	r0, [r4, #4]
   1f414:	bhi	1f474 <__assert_fail@plt+0xce80>
   1f418:	add	r3, r5, r6
   1f41c:	cmp	r3, r0
   1f420:	bcc	1f42c <__assert_fail@plt+0xce38>
   1f424:	mov	r0, #2
   1f428:	pop	{r4, r5, r6, pc}
   1f42c:	sub	r3, r0, r5
   1f430:	sub	r1, r3, r6
   1f434:	str	r1, [r4, #4]
   1f438:	lsr	r3, r1, #2
   1f43c:	sub	r3, r3, #2
   1f440:	cmp	r3, r2
   1f444:	str	r3, [r4, #16]
   1f448:	beq	1f47c <__assert_fail@plt+0xce88>
   1f44c:	ldr	r3, [pc, #60]	; 1f490 <__assert_fail@plt+0xce9c>
   1f450:	str	r2, [r4, #20]
   1f454:	str	r2, [r4, #24]
   1f458:	str	r2, [r4, #28]
   1f45c:	str	r2, [r4, #36]	; 0x24
   1f460:	str	r2, [r4, #40]	; 0x28
   1f464:	str	r1, [r4, #12]
   1f468:	mov	r0, r2
   1f46c:	str	r3, [r4, #32]
   1f470:	pop	{r4, r5, r6, pc}
   1f474:	mov	r0, #1
   1f478:	pop	{r4, r5, r6, pc}
   1f47c:	ldr	r3, [pc, #16]	; 1f494 <__assert_fail@plt+0xcea0>
   1f480:	ldr	r2, [pc, #16]	; 1f498 <__assert_fail@plt+0xcea4>
   1f484:	ldr	r1, [pc, #16]	; 1f49c <__assert_fail@plt+0xcea8>
   1f488:	ldr	r0, [pc, #16]	; 1f4a0 <__assert_fail@plt+0xceac>
   1f48c:	bl	125f4 <__assert_fail@plt>
   1f490:	andeq	lr, r1, ip, lsl #23
   1f494:	andeq	r4, r4, r0, asr r2
   1f498:	andeq	r0, r0, r6, lsl #4
   1f49c:			; <UNDEFINED> instruction: 0x000442b4
   1f4a0:	ldrdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1f4a4:	ldr	r3, [r0, #4]
   1f4a8:	cmp	r3, #131072	; 0x20000
   1f4ac:	bcc	1f4bc <__assert_fail@plt+0xcec8>
   1f4b0:	ldr	r3, [r0, #8]
   1f4b4:	cmp	r3, #131072	; 0x20000
   1f4b8:	movls	r3, #131072	; 0x20000
   1f4bc:	str	r3, [r0, #12]
   1f4c0:	bx	lr
   1f4c4:	ldr	r0, [r0, #12]
   1f4c8:	ldr	r3, [pc, #104]	; 1f538 <__assert_fail@plt+0xcf44>
   1f4cc:	push	{r4, r5, r6, lr}
   1f4d0:	cmp	r0, r3
   1f4d4:	mov	r5, #0
   1f4d8:	str	r5, [r1]
   1f4dc:	str	r5, [r1, #16]
   1f4e0:	str	r5, [r1, #4]
   1f4e4:	str	r5, [r1, #8]
   1f4e8:	str	r5, [r1, #36]	; 0x24
   1f4ec:	str	r5, [r1, #40]	; 0x28
   1f4f0:	bhi	1f524 <__assert_fail@plt+0xcf30>
   1f4f4:	add	r0, r0, #1
   1f4f8:	mov	r4, r1
   1f4fc:	mov	r6, r2
   1f500:	bl	2c184 <__assert_fail@plt+0x19b90>
   1f504:	mvn	r3, #0
   1f508:	str	r5, [r4, #20]
   1f50c:	str	r5, [r4, #16]
   1f510:	str	r5, [r4, #28]
   1f514:	str	r6, [r4, #24]
   1f518:	str	r3, [r4, #32]
   1f51c:	str	r0, [r4, #12]
   1f520:	pop	{r4, r5, r6, pc}
   1f524:	ldr	r3, [pc, #16]	; 1f53c <__assert_fail@plt+0xcf48>
   1f528:	mov	r2, #572	; 0x23c
   1f52c:	ldr	r1, [pc, #12]	; 1f540 <__assert_fail@plt+0xcf4c>
   1f530:	ldr	r0, [pc, #12]	; 1f544 <__assert_fail@plt+0xcf50>
   1f534:	bl	125f4 <__assert_fail@plt>
   1f538:	svcvc	0x00fff7ff
   1f53c:	andeq	r4, r4, r4, ror #4
   1f540:			; <UNDEFINED> instruction: 0x000442b4
   1f544:	andeq	r4, r4, ip, ror #7
   1f548:	ldr	ip, [r0, #28]
   1f54c:	ldr	r0, [r1, #20]
   1f550:	mov	r2, #0
   1f554:	mvn	r3, #0
   1f558:	str	ip, [r1]
   1f55c:	str	r0, [r1, #16]
   1f560:	str	r2, [r1, #28]
   1f564:	str	r3, [r1, #32]
   1f568:	bx	lr
   1f56c:	ldr	r3, [r0]
   1f570:	push	{r4, r5, r6, lr}
   1f574:	cmp	r3, #0
   1f578:	beq	1f5d8 <__assert_fail@plt+0xcfe4>
   1f57c:	mov	r4, #0
   1f580:	mov	r5, r0
   1f584:	mov	r6, r4
   1f588:	mov	r0, r3
   1f58c:	bl	12300 <strlen@plt>
   1f590:	ldr	r3, [r5, #4]!
   1f594:	add	r4, r4, #1
   1f598:	cmp	r3, #0
   1f59c:	add	r6, r6, r0
   1f5a0:	bne	1f588 <__assert_fail@plt+0xcf94>
   1f5a4:	mov	r1, r4
   1f5a8:	ldr	r0, [pc, #52]	; 1f5e4 <__assert_fail@plt+0xcff0>
   1f5ac:	bl	1eb94 <__assert_fail@plt+0xc5a0>
   1f5b0:	cmp	r0, #0
   1f5b4:	beq	1f5c0 <__assert_fail@plt+0xcfcc>
   1f5b8:	mov	r0, #1
   1f5bc:	pop	{r4, r5, r6, pc}
   1f5c0:	mov	r1, r6
   1f5c4:	ldr	r0, [pc, #28]	; 1f5e8 <__assert_fail@plt+0xcff4>
   1f5c8:	bl	1eb94 <__assert_fail@plt+0xc5a0>
   1f5cc:	adds	r0, r0, #0
   1f5d0:	movne	r0, #1
   1f5d4:	pop	{r4, r5, r6, pc}
   1f5d8:	mov	r4, r3
   1f5dc:	mov	r6, r3
   1f5e0:	b	1f5a4 <__assert_fail@plt+0xcfb0>
   1f5e4:	andeq	r4, r4, r0, lsl r4
   1f5e8:	andeq	r4, r4, r8, lsr r4
   1f5ec:	push	{r4, r5, r6, lr}
   1f5f0:	sub	sp, sp, #8
   1f5f4:	mov	r6, r0
   1f5f8:	mov	r0, sp
   1f5fc:	mov	r4, r1
   1f600:	mov	r5, r2
   1f604:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   1f608:	cmp	r0, #0
   1f60c:	bne	1f698 <__assert_fail@plt+0xd0a4>
   1f610:	mov	r0, r6
   1f614:	bl	2b520 <__assert_fail@plt+0x18f2c>
   1f618:	cmp	r0, #0
   1f61c:	bne	1f654 <__assert_fail@plt+0xd060>
   1f620:	mov	r0, r5
   1f624:	blx	r4
   1f628:	subs	r4, r0, #0
   1f62c:	blt	1f660 <__assert_fail@plt+0xd06c>
   1f630:	mov	r0, sp
   1f634:	bl	2b520 <__assert_fail@plt+0x18f2c>
   1f638:	cmp	r0, #0
   1f63c:	bne	1f654 <__assert_fail@plt+0xd060>
   1f640:	mov	r0, sp
   1f644:	bl	2b53c <__assert_fail@plt+0x18f48>
   1f648:	mov	r0, r4
   1f64c:	add	sp, sp, #8
   1f650:	pop	{r4, r5, r6, pc}
   1f654:	bl	12348 <__errno_location@plt>
   1f658:	ldr	r0, [r0]
   1f65c:	bl	251dc <__assert_fail@plt+0x12be8>
   1f660:	bl	12348 <__errno_location@plt>
   1f664:	mov	r6, r0
   1f668:	mov	r0, sp
   1f66c:	ldr	r5, [r6]
   1f670:	bl	2b520 <__assert_fail@plt+0x18f2c>
   1f674:	cmp	r0, #0
   1f678:	bne	1f654 <__assert_fail@plt+0xd060>
   1f67c:	mov	r0, sp
   1f680:	bl	2b53c <__assert_fail@plt+0x18f48>
   1f684:	cmp	r5, #0
   1f688:	mov	r0, r4
   1f68c:	strne	r5, [r6]
   1f690:	add	sp, sp, #8
   1f694:	pop	{r4, r5, r6, pc}
   1f698:	bl	12348 <__errno_location@plt>
   1f69c:	ldr	r0, [r0]
   1f6a0:	bl	251a0 <__assert_fail@plt+0x12bac>
   1f6a4:	cmn	r0, #100	; 0x64
   1f6a8:	push	{r4, r5, r6, lr}
   1f6ac:	mov	r5, r1
   1f6b0:	sub	sp, sp, #8
   1f6b4:	mov	r6, r2
   1f6b8:	beq	1f73c <__assert_fail@plt+0xd148>
   1f6bc:	mov	r4, r0
   1f6c0:	mov	r0, sp
   1f6c4:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   1f6c8:	cmp	r0, #0
   1f6cc:	bne	1f79c <__assert_fail@plt+0xd1a8>
   1f6d0:	mov	r0, r4
   1f6d4:	bl	124f8 <fchdir@plt>
   1f6d8:	cmp	r0, #0
   1f6dc:	bne	1f714 <__assert_fail@plt+0xd120>
   1f6e0:	mov	r0, r6
   1f6e4:	blx	r5
   1f6e8:	subs	r4, r0, #0
   1f6ec:	blt	1f754 <__assert_fail@plt+0xd160>
   1f6f0:	mov	r0, sp
   1f6f4:	bl	2b520 <__assert_fail@plt+0x18f2c>
   1f6f8:	cmp	r0, #0
   1f6fc:	bne	1f790 <__assert_fail@plt+0xd19c>
   1f700:	mov	r0, sp
   1f704:	bl	2b53c <__assert_fail@plt+0x18f48>
   1f708:	mov	r0, r4
   1f70c:	add	sp, sp, #8
   1f710:	pop	{r4, r5, r6, pc}
   1f714:	bl	12348 <__errno_location@plt>
   1f718:	mvn	r4, #0
   1f71c:	mov	r5, r0
   1f720:	mov	r0, sp
   1f724:	ldr	r6, [r5]
   1f728:	bl	2b53c <__assert_fail@plt+0x18f48>
   1f72c:	mov	r0, r4
   1f730:	str	r6, [r5]
   1f734:	add	sp, sp, #8
   1f738:	pop	{r4, r5, r6, pc}
   1f73c:	mov	r0, r2
   1f740:	blx	r1
   1f744:	mov	r4, r0
   1f748:	mov	r0, r4
   1f74c:	add	sp, sp, #8
   1f750:	pop	{r4, r5, r6, pc}
   1f754:	bl	12348 <__errno_location@plt>
   1f758:	mov	r6, r0
   1f75c:	mov	r0, sp
   1f760:	ldr	r5, [r6]
   1f764:	bl	2b520 <__assert_fail@plt+0x18f2c>
   1f768:	cmp	r0, #0
   1f76c:	bne	1f790 <__assert_fail@plt+0xd19c>
   1f770:	mov	r0, sp
   1f774:	bl	2b53c <__assert_fail@plt+0x18f48>
   1f778:	cmp	r5, #0
   1f77c:	beq	1f708 <__assert_fail@plt+0xd114>
   1f780:	mov	r0, r4
   1f784:	str	r5, [r6]
   1f788:	add	sp, sp, #8
   1f78c:	pop	{r4, r5, r6, pc}
   1f790:	bl	12348 <__errno_location@plt>
   1f794:	ldr	r0, [r0]
   1f798:	bl	251dc <__assert_fail@plt+0x12be8>
   1f79c:	bl	12348 <__errno_location@plt>
   1f7a0:	ldr	r0, [r0]
   1f7a4:	bl	251a0 <__assert_fail@plt+0x12bac>
   1f7a8:	push	{r4, r5, r6, r7, r8, lr}
   1f7ac:	mov	r4, r1
   1f7b0:	mov	r5, r0
   1f7b4:	mov	r7, r2
   1f7b8:	bl	12348 <__errno_location@plt>
   1f7bc:	cmp	r4, #0
   1f7c0:	ldr	r8, [r0]
   1f7c4:	beq	1f884 <__assert_fail@plt+0xd290>
   1f7c8:	ldr	r1, [r7]
   1f7cc:	mov	r6, r0
   1f7d0:	cmp	r1, #0
   1f7d4:	bne	1f82c <__assert_fail@plt+0xd238>
   1f7d8:	cmp	r4, #16
   1f7dc:	movls	r0, #16
   1f7e0:	bls	1f80c <__assert_fail@plt+0xd218>
   1f7e4:	mov	r0, #32
   1f7e8:	b	1f7fc <__assert_fail@plt+0xd208>
   1f7ec:	lsl	r3, r0, #1
   1f7f0:	cmp	r3, r0
   1f7f4:	bcc	1f850 <__assert_fail@plt+0xd25c>
   1f7f8:	mov	r0, r3
   1f7fc:	cmp	r4, r0
   1f800:	bhi	1f7ec <__assert_fail@plt+0xd1f8>
   1f804:	cmp	r1, #0
   1f808:	bne	1f85c <__assert_fail@plt+0xd268>
   1f80c:	cmp	r5, #0
   1f810:	bne	1f898 <__assert_fail@plt+0xd2a4>
   1f814:	str	r0, [r7]
   1f818:	bl	2fe38 <__assert_fail@plt+0x1d844>
   1f81c:	cmp	r0, #0
   1f820:	beq	1f87c <__assert_fail@plt+0xd288>
   1f824:	str	r8, [r6]
   1f828:	pop	{r4, r5, r6, r7, r8, pc}
   1f82c:	cmp	r4, r1
   1f830:	bls	1f848 <__assert_fail@plt+0xd254>
   1f834:	lsl	r0, r1, #1
   1f838:	cmp	r1, r0
   1f83c:	bls	1f7fc <__assert_fail@plt+0xd208>
   1f840:	mov	r0, r4
   1f844:	b	1f864 <__assert_fail@plt+0xd270>
   1f848:	mov	r0, r5
   1f84c:	b	1f81c <__assert_fail@plt+0xd228>
   1f850:	cmp	r1, #0
   1f854:	mov	r0, r4
   1f858:	beq	1f80c <__assert_fail@plt+0xd218>
   1f85c:	cmp	r1, r0
   1f860:	beq	1f848 <__assert_fail@plt+0xd254>
   1f864:	str	r0, [r7]
   1f868:	mov	r1, r0
   1f86c:	mov	r0, r5
   1f870:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   1f874:	cmp	r0, #0
   1f878:	bne	1f824 <__assert_fail@plt+0xd230>
   1f87c:	mov	r0, #0
   1f880:	pop	{r4, r5, r6, r7, r8, pc}
   1f884:	ldr	r3, [pc, #32]	; 1f8ac <__assert_fail@plt+0xd2b8>
   1f888:	mov	r2, #71	; 0x47
   1f88c:	ldr	r1, [pc, #28]	; 1f8b0 <__assert_fail@plt+0xd2bc>
   1f890:	ldr	r0, [pc, #28]	; 1f8b4 <__assert_fail@plt+0xd2c0>
   1f894:	bl	125f4 <__assert_fail@plt>
   1f898:	ldr	r3, [pc, #12]	; 1f8ac <__assert_fail@plt+0xd2b8>
   1f89c:	mov	r2, #79	; 0x4f
   1f8a0:	ldr	r1, [pc, #8]	; 1f8b0 <__assert_fail@plt+0xd2bc>
   1f8a4:	ldr	r0, [pc, #12]	; 1f8b8 <__assert_fail@plt+0xd2c4>
   1f8a8:	bl	125f4 <__assert_fail@plt>
   1f8ac:	andeq	r4, r4, r0, ror #8
   1f8b0:	andeq	r4, r4, ip, ror #8
   1f8b4:	andeq	r4, r4, r8, ror r4
   1f8b8:	andeq	r4, r4, r4, lsl #9
   1f8bc:	push	{r4, lr}
   1f8c0:	mov	r4, r0
   1f8c4:	bl	1f7a8 <__assert_fail@plt+0xd1b4>
   1f8c8:	cmp	r0, #0
   1f8cc:	popne	{r4, pc}
   1f8d0:	mov	r0, r4
   1f8d4:	bl	2db68 <__assert_fail@plt+0x1b574>
   1f8d8:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   1f8dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f8e0:	ldr	r0, [pc, #212]	; 1f9bc <__assert_fail@plt+0xd3c8>
   1f8e4:	bl	21234 <__assert_fail@plt+0xec40>
   1f8e8:	subs	r8, r0, #0
   1f8ec:	beq	1f9b4 <__assert_fail@plt+0xd3c0>
   1f8f0:	bl	12348 <__errno_location@plt>
   1f8f4:	mov	r9, #0
   1f8f8:	mov	r5, r9
   1f8fc:	mvn	r6, #0
   1f900:	mov	sl, #1
   1f904:	mov	r7, r0
   1f908:	str	r5, [r7]
   1f90c:	mov	r0, r8
   1f910:	bl	124bc <readdir64@plt>
   1f914:	mov	r1, r5
   1f918:	subs	r4, r0, #0
   1f91c:	beq	1f95c <__assert_fail@plt+0xd368>
   1f920:	ldrb	r3, [r4, #19]
   1f924:	add	r0, r4, #19
   1f928:	cmp	r3, #46	; 0x2e
   1f92c:	bne	1f948 <__assert_fail@plt+0xd354>
   1f930:	ldrb	r3, [r4, #20]
   1f934:	cmp	r3, #0
   1f938:	beq	1f908 <__assert_fail@plt+0xd314>
   1f93c:	ldrh	r3, [r4, #20]
   1f940:	cmp	r3, #46	; 0x2e
   1f944:	beq	1f908 <__assert_fail@plt+0xd314>
   1f948:	bl	20b84 <__assert_fail@plt+0xe590>
   1f94c:	mov	r9, sl
   1f950:	cmp	r6, r0
   1f954:	movlt	r6, r0
   1f958:	b	1f908 <__assert_fail@plt+0xd314>
   1f95c:	ldr	r5, [r7]
   1f960:	cmp	r5, #0
   1f964:	bne	1f980 <__assert_fail@plt+0xd38c>
   1f968:	mov	r0, r8
   1f96c:	bl	125c4 <closedir@plt>
   1f970:	cmp	r9, #0
   1f974:	beq	1f9b4 <__assert_fail@plt+0xd3c0>
   1f978:	mov	r0, r6
   1f97c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f980:	ldr	r2, [pc, #52]	; 1f9bc <__assert_fail@plt+0xd3c8>
   1f984:	mov	r1, #8
   1f988:	bl	2b208 <__assert_fail@plt+0x18c14>
   1f98c:	mov	r1, r5
   1f990:	ldr	r2, [pc, #40]	; 1f9c0 <__assert_fail@plt+0xd3cc>
   1f994:	mvn	r6, #0
   1f998:	mov	r3, r0
   1f99c:	mov	r0, r4
   1f9a0:	bl	121ec <error@plt>
   1f9a4:	mov	r0, r8
   1f9a8:	bl	125c4 <closedir@plt>
   1f9ac:	mov	r0, r6
   1f9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9b4:	mvn	r6, #0
   1f9b8:	b	1f978 <__assert_fail@plt+0xd384>
   1f9bc:			; <UNDEFINED> instruction: 0x000444b4
   1f9c0:	andeq	r4, r4, r0, ror #18
   1f9c4:	push	{r4, r5, r6, lr}
   1f9c8:	mov	r4, r1
   1f9cc:	mov	r1, #1
   1f9d0:	mov	r6, r0
   1f9d4:	bl	2d934 <__assert_fail@plt+0x1b340>
   1f9d8:	ands	r5, r0, #1
   1f9dc:	movne	r5, #0
   1f9e0:	bne	1fa1c <__assert_fail@plt+0xd428>
   1f9e4:	ldr	r1, [r4, #4]
   1f9e8:	add	r2, r4, #8
   1f9ec:	add	r1, r1, #1
   1f9f0:	ldr	r0, [r4]
   1f9f4:	lsl	r1, r1, #2
   1f9f8:	bl	1f7a8 <__assert_fail@plt+0xd1b4>
   1f9fc:	cmp	r0, #0
   1fa00:	strne	r0, [r4]
   1fa04:	ldrne	r3, [r4, #4]
   1fa08:	mvneq	r5, #0
   1fa0c:	strne	r6, [r0, r3, lsl #2]
   1fa10:	ldrne	r3, [r4, #4]
   1fa14:	addne	r3, r3, #1
   1fa18:	strne	r3, [r4, #4]
   1fa1c:	mov	r0, r5
   1fa20:	pop	{r4, r5, r6, pc}
   1fa24:	push	{r4, r5, r6, lr}
   1fa28:	mov	r4, r1
   1fa2c:	mov	r1, #1
   1fa30:	mov	r5, r0
   1fa34:	bl	2d934 <__assert_fail@plt+0x1b340>
   1fa38:	tst	r0, #1
   1fa3c:	bne	1fa98 <__assert_fail@plt+0xd4a4>
   1fa40:	ldmib	r4, {r0, r3}
   1fa44:	cmp	r3, r0
   1fa48:	bcs	1fa84 <__assert_fail@plt+0xd490>
   1fa4c:	ldr	r1, [r4]
   1fa50:	add	r2, r1, r3, lsl #2
   1fa54:	ldr	r1, [r1, r3, lsl #2]
   1fa58:	cmp	r5, r1
   1fa5c:	ble	1fa90 <__assert_fail@plt+0xd49c>
   1fa60:	add	r3, r3, #1
   1fa64:	b	1fa78 <__assert_fail@plt+0xd484>
   1fa68:	ldr	r1, [r2, #4]!
   1fa6c:	add	r3, r3, #1
   1fa70:	cmp	r5, r1
   1fa74:	ble	1fa90 <__assert_fail@plt+0xd49c>
   1fa78:	cmp	r0, r3
   1fa7c:	str	r3, [r4, #8]
   1fa80:	bne	1fa68 <__assert_fail@plt+0xd474>
   1fa84:	mvn	r0, #0
   1fa88:	str	r5, [r4, #12]
   1fa8c:	pop	{r4, r5, r6, pc}
   1fa90:	cmp	r5, r1
   1fa94:	bne	1fa84 <__assert_fail@plt+0xd490>
   1fa98:	mov	r0, #0
   1fa9c:	pop	{r4, r5, r6, pc}
   1faa0:	push	{r4, lr}
   1faa4:	mov	r0, #4
   1faa8:	sub	sp, sp, #16
   1faac:	bl	120cc <sysconf@plt>
   1fab0:	mov	r1, sp
   1fab4:	cmn	r0, #1
   1fab8:	movne	r4, r0
   1fabc:	mov	r0, #7
   1fac0:	moveq	r4, #20
   1fac4:	bl	120d8 <getrlimit64@plt>
   1fac8:	cmp	r0, #0
   1facc:	movne	r0, r4
   1fad0:	bne	1faec <__assert_fail@plt+0xd4f8>
   1fad4:	ldrd	r0, [sp]
   1fad8:	mvn	r3, #0
   1fadc:	mvn	r2, #0
   1fae0:	cmp	r1, r3
   1fae4:	cmpeq	r0, r2
   1fae8:	moveq	r0, r4
   1faec:	add	sp, sp, #16
   1faf0:	pop	{r4, pc}
   1faf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1faf8:	subs	fp, r0, #0
   1fafc:	sub	sp, sp, #524	; 0x20c
   1fb00:	ble	1fbb0 <__assert_fail@plt+0xd5bc>
   1fb04:	mov	sl, #0
   1fb08:	mov	r7, r2
   1fb0c:	mov	r8, r1
   1fb10:	mov	r5, sl
   1fb14:	mov	r6, #5
   1fb18:	str	fp, [sp, #4]
   1fb1c:	ldr	r3, [sp, #4]
   1fb20:	sub	r9, r3, sl
   1fb24:	cmp	r9, #64	; 0x40
   1fb28:	movge	r9, #64	; 0x40
   1fb2c:	cmp	r9, #0
   1fb30:	ble	1fbbc <__assert_fail@plt+0xd5c8>
   1fb34:	add	fp, sp, #8
   1fb38:	mov	r2, sl
   1fb3c:	add	r1, fp, r9, lsl #3
   1fb40:	mov	r4, fp
   1fb44:	strh	r6, [r4, #4]
   1fb48:	strh	r5, [r4, #6]
   1fb4c:	str	r2, [r4], #8
   1fb50:	cmp	r4, r1
   1fb54:	add	r2, r2, #1
   1fb58:	bne	1fb44 <__assert_fail@plt+0xd550>
   1fb5c:	mov	r2, r5
   1fb60:	mov	r1, r9
   1fb64:	add	r0, sp, #8
   1fb68:	bl	12150 <poll@plt>
   1fb6c:	cmn	r0, #1
   1fb70:	beq	1fbd4 <__assert_fail@plt+0xd5e0>
   1fb74:	ldrsh	r2, [fp, #6]
   1fb78:	mov	r1, r7
   1fb7c:	cmp	r2, #32
   1fb80:	beq	1fb94 <__assert_fail@plt+0xd5a0>
   1fb84:	ldr	r0, [fp]
   1fb88:	blx	r8
   1fb8c:	cmp	r0, #0
   1fb90:	bne	1fbb4 <__assert_fail@plt+0xd5c0>
   1fb94:	add	fp, fp, #8
   1fb98:	cmp	r4, fp
   1fb9c:	bne	1fb74 <__assert_fail@plt+0xd580>
   1fba0:	ldr	r3, [sp, #4]
   1fba4:	add	sl, sl, r9
   1fba8:	cmp	r3, sl
   1fbac:	bgt	1fb1c <__assert_fail@plt+0xd528>
   1fbb0:	mov	r0, #0
   1fbb4:	add	sp, sp, #524	; 0x20c
   1fbb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbbc:	mov	r2, r5
   1fbc0:	mov	r1, r9
   1fbc4:	add	r0, sp, #8
   1fbc8:	bl	12150 <poll@plt>
   1fbcc:	cmn	r0, #1
   1fbd0:	bne	1fba0 <__assert_fail@plt+0xd5ac>
   1fbd4:	mvn	r0, #0
   1fbd8:	add	sp, sp, #524	; 0x20c
   1fbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbe0:	push	{lr}		; (str lr, [sp, #-4]!)
   1fbe4:	sub	sp, sp, #20
   1fbe8:	bl	1f8dc <__assert_fail@plt+0xd2e8>
   1fbec:	cmp	r0, #0
   1fbf0:	blt	1fc2c <__assert_fail@plt+0xd638>
   1fbf4:	cmn	r0, #-2147483647	; 0x80000001
   1fbf8:	mov	r3, #0
   1fbfc:	add	r2, sp, #4
   1fc00:	addne	r0, r0, #1
   1fc04:	ldr	r1, [pc, #40]	; 1fc34 <__assert_fail@plt+0xd640>
   1fc08:	str	r3, [sp, #4]
   1fc0c:	str	r3, [sp, #12]
   1fc10:	str	r3, [sp, #8]
   1fc14:	bl	1faf4 <__assert_fail@plt+0xd500>
   1fc18:	ldr	r3, [pc, #24]	; 1fc38 <__assert_fail@plt+0xd644>
   1fc1c:	ldmib	sp, {r1, r2}
   1fc20:	stm	r3, {r1, r2}
   1fc24:	add	sp, sp, #20
   1fc28:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc2c:	bl	1faa0 <__assert_fail@plt+0xd4ac>
   1fc30:	b	1fbf4 <__assert_fail@plt+0xd600>
   1fc34:	andeq	pc, r1, r4, asr #19
   1fc38:	andeq	r7, r5, r0, ror #25
   1fc3c:	push	{r1, r2, r3}
   1fc40:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fc44:	sub	sp, sp, #8
   1fc48:	ldr	r6, [pc, #156]	; 1fcec <__assert_fail@plt+0xd6f8>
   1fc4c:	ldr	r4, [sp, #36]	; 0x24
   1fc50:	mov	r8, r0
   1fc54:	ldrb	r7, [r6, #8]
   1fc58:	ands	r5, r4, #64	; 0x40
   1fc5c:	addne	r3, sp, #40	; 0x28
   1fc60:	strne	r3, [sp, #4]
   1fc64:	ldrne	r5, [sp, #40]	; 0x28
   1fc68:	cmp	r7, #0
   1fc6c:	beq	1fcb4 <__assert_fail@plt+0xd6c0>
   1fc70:	orr	r1, r4, #524288	; 0x80000
   1fc74:	mov	r2, r5
   1fc78:	mov	r0, r8
   1fc7c:	bl	21430 <__assert_fail@plt+0xee3c>
   1fc80:	subs	r4, r0, #0
   1fc84:	blt	1fc94 <__assert_fail@plt+0xd6a0>
   1fc88:	ldrb	r3, [r6, #9]
   1fc8c:	cmp	r3, #0
   1fc90:	beq	1fca8 <__assert_fail@plt+0xd6b4>
   1fc94:	mov	r0, r4
   1fc98:	add	sp, sp, #8
   1fc9c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1fca0:	add	sp, sp, #12
   1fca4:	bx	lr
   1fca8:	mov	r1, #1
   1fcac:	bl	210bc <__assert_fail@plt+0xeac8>
   1fcb0:	b	1fc94 <__assert_fail@plt+0xd6a0>
   1fcb4:	mov	r1, #524288	; 0x80000
   1fcb8:	ldr	r0, [pc, #48]	; 1fcf0 <__assert_fail@plt+0xd6fc>
   1fcbc:	bl	21430 <__assert_fail@plt+0xee3c>
   1fcc0:	subs	r9, r0, #0
   1fcc4:	blt	1fcdc <__assert_fail@plt+0xd6e8>
   1fcc8:	mov	r1, #1
   1fccc:	bl	2d934 <__assert_fail@plt+0x1b340>
   1fcd0:	and	r7, r0, #1
   1fcd4:	mov	r0, r9
   1fcd8:	bl	125ac <close@plt>
   1fcdc:	mov	r3, #1
   1fce0:	strb	r7, [r6, #9]
   1fce4:	strb	r3, [r6, #8]
   1fce8:	b	1fc70 <__assert_fail@plt+0xd67c>
   1fcec:	andeq	r7, r5, r0, ror #25
   1fcf0:	andeq	r6, r4, r0, lsr #4
   1fcf4:	push	{r4, lr}
   1fcf8:	ldr	r4, [pc, #20]	; 1fd14 <__assert_fail@plt+0xd720>
   1fcfc:	ldr	r0, [r4]
   1fd00:	bl	2db68 <__assert_fail@plt+0x1b574>
   1fd04:	mov	r3, #0
   1fd08:	str	r3, [r4]
   1fd0c:	str	r3, [r4, #4]
   1fd10:	pop	{r4, pc}
   1fd14:	andeq	r7, r5, r0, ror #25
   1fd18:	push	{r4, lr}
   1fd1c:	ldr	r0, [pc, #12]	; 1fd30 <__assert_fail@plt+0xd73c>
   1fd20:	bl	12228 <getenv@plt>
   1fd24:	adds	r0, r0, #0
   1fd28:	movne	r0, #1
   1fd2c:	pop	{r4, pc}
   1fd30:	andeq	r4, r4, r4, asr #9
   1fd34:	ldr	r3, [pc, #152]	; 1fdd4 <__assert_fail@plt+0xd7e0>
   1fd38:	push	{r4, r5, r6, lr}
   1fd3c:	sub	sp, sp, #16
   1fd40:	ldr	r6, [r3]
   1fd44:	ldr	r5, [r3, #4]
   1fd48:	bl	1f8dc <__assert_fail@plt+0xd2e8>
   1fd4c:	cmp	r0, #0
   1fd50:	blt	1fdcc <__assert_fail@plt+0xd7d8>
   1fd54:	cmn	r0, #-2147483647	; 0x80000001
   1fd58:	addne	r0, r0, #1
   1fd5c:	mov	r4, #0
   1fd60:	mvn	r3, #0
   1fd64:	mov	r2, sp
   1fd68:	ldr	r1, [pc, #104]	; 1fdd8 <__assert_fail@plt+0xd7e4>
   1fd6c:	str	r5, [sp, #4]
   1fd70:	str	r6, [sp]
   1fd74:	str	r4, [sp, #8]
   1fd78:	str	r3, [sp, #12]
   1fd7c:	bl	1faf4 <__assert_fail@plt+0xd500>
   1fd80:	ldr	r5, [sp, #12]
   1fd84:	cmp	r5, r4
   1fd88:	blt	1fdc4 <__assert_fail@plt+0xd7d0>
   1fd8c:	mov	r2, #5
   1fd90:	ldr	r1, [pc, #68]	; 1fddc <__assert_fail@plt+0xd7e8>
   1fd94:	mov	r0, r4
   1fd98:	bl	120b4 <dcgettext@plt>
   1fd9c:	mov	r3, r5
   1fda0:	mov	r1, r4
   1fda4:	mov	r2, r0
   1fda8:	mov	r0, r4
   1fdac:	bl	121ec <error@plt>
   1fdb0:	ldr	r3, [pc, #40]	; 1fde0 <__assert_fail@plt+0xd7ec>
   1fdb4:	mov	r2, #396	; 0x18c
   1fdb8:	ldr	r1, [pc, #36]	; 1fde4 <__assert_fail@plt+0xd7f0>
   1fdbc:	ldr	r0, [pc, #36]	; 1fde8 <__assert_fail@plt+0xd7f4>
   1fdc0:	bl	125f4 <__assert_fail@plt>
   1fdc4:	add	sp, sp, #16
   1fdc8:	pop	{r4, r5, r6, pc}
   1fdcc:	bl	1faa0 <__assert_fail@plt+0xd4ac>
   1fdd0:	b	1fd54 <__assert_fail@plt+0xd760>
   1fdd4:	andeq	r7, r5, r0, ror #25
   1fdd8:	andeq	pc, r1, r4, lsr #20
   1fddc:	andeq	r4, r4, r0, ror #9
   1fde0:	muleq	r4, r8, r4
   1fde4:	andeq	r4, r4, r8, ror r5
   1fde8:	andeq	r4, r4, r4, lsl #11
   1fdec:	ldr	r3, [pc, #136]	; 1fe7c <__assert_fail@plt+0xd888>
   1fdf0:	push	{r4, r5, r6, r7, r8, lr}
   1fdf4:	mov	r5, r0
   1fdf8:	sub	sp, sp, #16
   1fdfc:	ldr	r0, [r3]
   1fe00:	bl	2db08 <__assert_fail@plt+0x1b514>
   1fe04:	ldr	ip, [pc, #116]	; 1fe80 <__assert_fail@plt+0xd88c>
   1fe08:	ldr	r3, [pc, #116]	; 1fe84 <__assert_fail@plt+0xd890>
   1fe0c:	mov	r2, #5
   1fe10:	ldr	r1, [pc, #112]	; 1fe88 <__assert_fail@plt+0xd894>
   1fe14:	mov	r0, #0
   1fe18:	ldr	r4, [ip]
   1fe1c:	ldr	r7, [r3]
   1fe20:	bl	120b4 <dcgettext@plt>
   1fe24:	mov	r2, #5
   1fe28:	ldr	r1, [pc, #92]	; 1fe8c <__assert_fail@plt+0xd898>
   1fe2c:	mov	r8, r0
   1fe30:	mov	r0, #0
   1fe34:	bl	120b4 <dcgettext@plt>
   1fe38:	mov	r2, #5
   1fe3c:	ldr	r1, [pc, #76]	; 1fe90 <__assert_fail@plt+0xd89c>
   1fe40:	mov	r6, r0
   1fe44:	mov	r0, #0
   1fe48:	bl	120b4 <dcgettext@plt>
   1fe4c:	mov	r2, #0
   1fe50:	str	r2, [sp, #12]
   1fe54:	str	r8, [sp]
   1fe58:	mov	r3, r7
   1fe5c:	str	r6, [sp, #4]
   1fe60:	mov	r1, r5
   1fe64:	ldr	r2, [pc, #40]	; 1fe94 <__assert_fail@plt+0xd8a0>
   1fe68:	str	r0, [sp, #8]
   1fe6c:	mov	r0, r4
   1fe70:	bl	2c0a0 <__assert_fail@plt+0x19aac>
   1fe74:	add	sp, sp, #16
   1fe78:	pop	{r4, r5, r6, r7, r8, pc}
   1fe7c:	andeq	r7, r5, r8, asr #10
   1fe80:	andeq	r7, r5, r4, asr r5
   1fe84:	andeq	r7, r5, ip, asr #9
   1fe88:	muleq	r4, r0, r5
   1fe8c:	andeq	r4, r4, r0, lsr #11
   1fe90:			; <UNDEFINED> instruction: 0x000445b0
   1fe94:	andeq	r4, r4, r0, asr #11
   1fe98:	cmp	r2, #0
   1fe9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fea0:	mov	fp, r0
   1fea4:	mov	r4, r1
   1fea8:	bne	1ffc8 <__assert_fail@plt+0xd9d4>
   1feac:	ldr	r9, [pc, #336]	; 20004 <__assert_fail@plt+0xda10>
   1feb0:	ldr	sl, [pc, #336]	; 20008 <__assert_fail@plt+0xda14>
   1feb4:	ldr	r8, [pc, #336]	; 2000c <__assert_fail@plt+0xda18>
   1feb8:	ldr	r7, [pc, #336]	; 20010 <__assert_fail@plt+0xda1c>
   1febc:	ldr	r6, [pc, #336]	; 20014 <__assert_fail@plt+0xda20>
   1fec0:	ldr	r5, [pc, #336]	; 20018 <__assert_fail@plt+0xda24>
   1fec4:	b	1fef8 <__assert_fail@plt+0xd904>
   1fec8:	cmp	r2, #32
   1fecc:	beq	1ff98 <__assert_fail@plt+0xd9a4>
   1fed0:	bls	1ff50 <__assert_fail@plt+0xd95c>
   1fed4:	cmp	r2, #34	; 0x22
   1fed8:	beq	1ffb8 <__assert_fail@plt+0xd9c4>
   1fedc:	cmp	r2, #92	; 0x5c
   1fee0:	bne	1ff28 <__assert_fail@plt+0xd934>
   1fee4:	mov	r1, r6
   1fee8:	mov	r0, r4
   1feec:	bl	1233c <fprintf@plt>
   1fef0:	cmp	r0, #0
   1fef4:	blt	1ff48 <__assert_fail@plt+0xd954>
   1fef8:	ldrb	r2, [fp], #1
   1fefc:	cmp	r2, #0
   1ff00:	beq	1ffe4 <__assert_fail@plt+0xd9f0>
   1ff04:	cmp	r2, #12
   1ff08:	beq	1ffa8 <__assert_fail@plt+0xd9b4>
   1ff0c:	bhi	1fec8 <__assert_fail@plt+0xd8d4>
   1ff10:	cmp	r2, #9
   1ff14:	beq	1ff78 <__assert_fail@plt+0xd984>
   1ff18:	cmp	r2, #10
   1ff1c:	beq	1ff68 <__assert_fail@plt+0xd974>
   1ff20:	cmp	r2, #8
   1ff24:	beq	1ff88 <__assert_fail@plt+0xd994>
   1ff28:	sub	r3, r2, #33	; 0x21
   1ff2c:	cmp	r3, #93	; 0x5d
   1ff30:	bls	1ffec <__assert_fail@plt+0xd9f8>
   1ff34:	mov	r1, sl
   1ff38:	mov	r0, r4
   1ff3c:	bl	1233c <fprintf@plt>
   1ff40:	cmp	r0, #0
   1ff44:	bge	1fef8 <__assert_fail@plt+0xd904>
   1ff48:	mov	r0, #0
   1ff4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff50:	cmp	r2, #13
   1ff54:	bne	1ff28 <__assert_fail@plt+0xd934>
   1ff58:	mov	r1, r5
   1ff5c:	mov	r0, r4
   1ff60:	bl	1233c <fprintf@plt>
   1ff64:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ff68:	ldr	r1, [pc, #172]	; 2001c <__assert_fail@plt+0xda28>
   1ff6c:	mov	r0, r4
   1ff70:	bl	1233c <fprintf@plt>
   1ff74:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ff78:	ldr	r1, [pc, #160]	; 20020 <__assert_fail@plt+0xda2c>
   1ff7c:	mov	r0, r4
   1ff80:	bl	1233c <fprintf@plt>
   1ff84:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ff88:	ldr	r1, [pc, #148]	; 20024 <__assert_fail@plt+0xda30>
   1ff8c:	mov	r0, r4
   1ff90:	bl	1233c <fprintf@plt>
   1ff94:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ff98:	mov	r1, r8
   1ff9c:	mov	r0, r4
   1ffa0:	bl	1233c <fprintf@plt>
   1ffa4:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ffa8:	mov	r1, r9
   1ffac:	mov	r0, r4
   1ffb0:	bl	1233c <fprintf@plt>
   1ffb4:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ffb8:	mov	r1, r7
   1ffbc:	mov	r0, r4
   1ffc0:	bl	1233c <fprintf@plt>
   1ffc4:	b	1fef0 <__assert_fail@plt+0xd8fc>
   1ffc8:	mov	r2, r0
   1ffcc:	mov	r0, r1
   1ffd0:	ldr	r1, [pc, #80]	; 20028 <__assert_fail@plt+0xda34>
   1ffd4:	bl	1233c <fprintf@plt>
   1ffd8:	mvn	r0, r0
   1ffdc:	lsr	r0, r0, #31
   1ffe0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffe4:	mov	r0, #1
   1ffe8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffec:	mov	r0, r2
   1fff0:	mov	r1, r4
   1fff4:	bl	124e0 <putc@plt>
   1fff8:	cmn	r0, #1
   1fffc:	bne	1fef8 <__assert_fail@plt+0xd904>
   20000:	b	1ff48 <__assert_fail@plt+0xd954>
   20004:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   20008:	andeq	r4, r4, r0, lsl #12
   2000c:	strdeq	r4, [r4], -r8
   20010:	strdeq	r4, [r4], -ip
   20014:	andeq	r4, r4, r0, ror #11
   20018:	andeq	r4, r4, ip, ror #11
   2001c:	andeq	r4, r4, r4, ror #11
   20020:	strdeq	r4, [r4], -r0
   20024:	andeq	r4, r4, r8, ror #11
   20028:	andeq	r4, r4, r0, ror #18
   2002c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20030:	add	fp, sp, #32
   20034:	mov	r6, r0
   20038:	sub	sp, sp, #956	; 0x3bc
   2003c:	ldr	r5, [pc, #1532]	; 20640 <__assert_fail@plt+0xe04c>
   20040:	str	r1, [fp, #-968]	; 0xfffffc38
   20044:	ldr	r0, [r3, #16]
   20048:	sub	r1, fp, #956	; 0x3bc
   2004c:	mov	r4, r3
   20050:	mov	r7, r2
   20054:	bl	21468 <__assert_fail@plt+0xee74>
   20058:	mov	r2, #1
   2005c:	mov	r3, #0
   20060:	ldrd	r0, [r4, #96]	; 0x60
   20064:	ldr	r8, [r5]
   20068:	strd	r2, [sp, #8]
   2006c:	strd	r2, [sp]
   20070:	sub	r2, fp, #688	; 0x2b0
   20074:	mov	r3, #0
   20078:	bl	225f8 <__assert_fail@plt+0x10004>
   2007c:	mov	r2, r8
   20080:	ldr	r1, [pc, #1468]	; 20644 <__assert_fail@plt+0xe050>
   20084:	mov	r3, r0
   20088:	ldr	r0, [fp, #16]
   2008c:	bl	1233c <fprintf@plt>
   20090:	cmp	r0, #0
   20094:	blt	203e8 <__assert_fail@plt+0xddf4>
   20098:	ldr	r3, [r5]
   2009c:	ldr	r1, [fp, #16]
   200a0:	cmp	r0, r3
   200a4:	strgt	r0, [r5]
   200a8:	mov	r0, #32
   200ac:	bl	124e0 <putc@plt>
   200b0:	ldr	r2, [fp, #8]
   200b4:	sub	r1, fp, #964	; 0x3c4
   200b8:	ldrd	r8, [r4, #64]	; 0x40
   200bc:	asr	r3, r2, #31
   200c0:	strd	r2, [r1]
   200c4:	strd	r2, [sp, #8]
   200c8:	mov	r2, #512	; 0x200
   200cc:	mov	r3, #0
   200d0:	mov	r1, r9
   200d4:	strd	r2, [sp]
   200d8:	mov	r3, #0
   200dc:	sub	r2, fp, #688	; 0x2b0
   200e0:	ldr	sl, [r5, #4]
   200e4:	cmn	r0, #1
   200e8:	mov	r0, r8
   200ec:	moveq	r9, r3
   200f0:	movne	r8, r3
   200f4:	moveq	r8, #150	; 0x96
   200f8:	movne	r9, #1
   200fc:	bl	225f8 <__assert_fail@plt+0x10004>
   20100:	mov	r2, sl
   20104:	ldr	r1, [pc, #1336]	; 20644 <__assert_fail@plt+0xe050>
   20108:	mov	r3, r0
   2010c:	ldr	r0, [fp, #16]
   20110:	bl	1233c <fprintf@plt>
   20114:	cmp	r0, #0
   20118:	blt	204d0 <__assert_fail@plt+0xdedc>
   2011c:	ldr	r3, [r5, #4]
   20120:	cmp	r0, r3
   20124:	strgt	r0, [r5, #4]
   20128:	cmp	r9, #0
   2012c:	beq	203bc <__assert_fail@plt+0xddc8>
   20130:	ldr	r1, [fp, #16]
   20134:	mov	r0, #32
   20138:	bl	124e0 <putc@plt>
   2013c:	cmn	r0, #1
   20140:	beq	204c0 <__assert_fail@plt+0xdecc>
   20144:	sub	r0, fp, #956	; 0x3bc
   20148:	ldr	r1, [fp, #16]
   2014c:	bl	12588 <fputs@plt>
   20150:	cmp	r0, #0
   20154:	blt	204c8 <__assert_fail@plt+0xded4>
   20158:	ldr	r3, [r4, #20]
   2015c:	ldr	r2, [r5, #8]
   20160:	ldr	r1, [pc, #1248]	; 20648 <__assert_fail@plt+0xe054>
   20164:	ldr	r0, [fp, #16]
   20168:	bl	1233c <fprintf@plt>
   2016c:	cmp	r0, #0
   20170:	blt	204d8 <__assert_fail@plt+0xdee4>
   20174:	ldr	r3, [r5, #8]
   20178:	ldr	r1, [fp, #16]
   2017c:	cmp	r0, r3
   20180:	strgt	r0, [r5, #8]
   20184:	mov	r0, #32
   20188:	bl	124e0 <putc@plt>
   2018c:	cmn	r0, #1
   20190:	ldr	r0, [r4, #24]
   20194:	moveq	r8, #250	; 0xfa
   20198:	bl	231d8 <__assert_fail@plt+0x10be4>
   2019c:	subs	r9, r0, #0
   201a0:	beq	20538 <__assert_fail@plt+0xdf44>
   201a4:	mov	r1, #0
   201a8:	bl	24c5c <__assert_fail@plt+0x12668>
   201ac:	ldr	r2, [r5, #12]
   201b0:	mov	r3, r9
   201b4:	ldr	r1, [pc, #1168]	; 2064c <__assert_fail@plt+0xe058>
   201b8:	cmp	r0, r2
   201bc:	movgt	r2, r0
   201c0:	strgt	r0, [r5, #12]
   201c4:	ldr	r0, [fp, #16]
   201c8:	bl	1233c <fprintf@plt>
   201cc:	cmp	r0, #0
   201d0:	mvn	r0, r0
   201d4:	movlt	r8, #400	; 0x190
   201d8:	lsr	r0, r0, #31
   201dc:	cmp	r0, #0
   201e0:	beq	203bc <__assert_fail@plt+0xddc8>
   201e4:	ldr	r0, [r4, #28]
   201e8:	bl	2337c <__assert_fail@plt+0x10d88>
   201ec:	subs	r8, r0, #0
   201f0:	beq	2037c <__assert_fail@plt+0xdd88>
   201f4:	mov	r1, #0
   201f8:	bl	24c5c <__assert_fail@plt+0x12668>
   201fc:	ldr	r2, [r5, #16]
   20200:	mov	r3, r8
   20204:	ldr	r1, [pc, #1088]	; 2064c <__assert_fail@plt+0xe058>
   20208:	cmp	r0, r2
   2020c:	movgt	r2, r0
   20210:	strgt	r0, [r5, #16]
   20214:	ldr	r0, [fp, #16]
   20218:	bl	1233c <fprintf@plt>
   2021c:	cmp	r0, #0
   20220:	blt	20408 <__assert_fail@plt+0xde14>
   20224:	ldr	r3, [r4, #16]
   20228:	and	r3, r3, #45056	; 0xb000
   2022c:	cmp	r3, #8192	; 0x2000
   20230:	beq	20418 <__assert_fail@plt+0xde24>
   20234:	ldr	r3, [fp, #8]
   20238:	cmp	r3, #0
   2023c:	movge	r2, #1
   20240:	movge	r3, #0
   20244:	subge	r1, fp, #964	; 0x3c4
   20248:	strdge	r2, [r1]
   2024c:	sub	ip, fp, #964	; 0x3c4
   20250:	mov	r2, #1
   20254:	ldrd	r8, [ip]
   20258:	mov	r3, #0
   2025c:	ldrd	r0, [r4, #48]	; 0x30
   20260:	strd	r2, [sp]
   20264:	strd	r8, [sp, #8]
   20268:	mov	r3, #0
   2026c:	sub	r2, fp, #688	; 0x2b0
   20270:	ldr	r8, [r5, #28]
   20274:	bl	225f8 <__assert_fail@plt+0x10004>
   20278:	mov	r2, r8
   2027c:	ldr	r1, [pc, #960]	; 20644 <__assert_fail@plt+0xe050>
   20280:	mov	r3, r0
   20284:	ldr	r0, [fp, #16]
   20288:	bl	1233c <fprintf@plt>
   2028c:	cmp	r0, #0
   20290:	blt	204b0 <__assert_fail@plt+0xdebc>
   20294:	ldr	r3, [r5, #28]
   20298:	cmp	r0, r3
   2029c:	strgt	r0, [r5, #28]
   202a0:	ldr	r1, [fp, #16]
   202a4:	mov	r0, #32
   202a8:	bl	124e0 <putc@plt>
   202ac:	cmn	r0, #1
   202b0:	beq	204b8 <__assert_fail@plt+0xdec4>
   202b4:	add	r0, r4, #80	; 0x50
   202b8:	bl	1227c <localtime@plt>
   202bc:	subs	sl, r0, #0
   202c0:	beq	2057c <__assert_fail@plt+0xdf88>
   202c4:	ldr	r3, [fp, #4]
   202c8:	ldr	r2, [r4, #80]	; 0x50
   202cc:	sub	r3, r3, #15532032	; 0xed0000
   202d0:	sub	r3, r3, #19968	; 0x4e00
   202d4:	cmp	r3, r2
   202d8:	ldr	r9, [pc, #880]	; 20650 <__assert_fail@plt+0xe05c>
   202dc:	ble	203f0 <__assert_fail@plt+0xddfc>
   202e0:	mov	r5, #256	; 0x100
   202e4:	sub	r8, fp, #944	; 0x3b0
   202e8:	b	20300 <__assert_fail@plt+0xdd0c>
   202ec:	lsl	r5, r5, #1
   202f0:	add	r3, r5, #14
   202f4:	bic	r3, r3, #7
   202f8:	sub	sp, sp, r3
   202fc:	add	r8, sp, #16
   20300:	mov	r3, sl
   20304:	mov	r2, r9
   20308:	mov	r1, r5
   2030c:	mov	r0, r8
   20310:	bl	12264 <strftime@plt>
   20314:	cmp	r0, #0
   20318:	beq	202ec <__assert_fail@plt+0xdcf8>
   2031c:	mov	r2, r8
   20320:	ldr	r1, [pc, #812]	; 20654 <__assert_fail@plt+0xe060>
   20324:	ldr	r0, [fp, #16]
   20328:	bl	1233c <fprintf@plt>
   2032c:	cmp	r0, #0
   20330:	blt	20410 <__assert_fail@plt+0xde1c>
   20334:	ldr	r2, [fp, #12]
   20338:	ldr	r1, [fp, #16]
   2033c:	mov	r0, r6
   20340:	bl	1fe98 <__assert_fail@plt+0xd8a4>
   20344:	cmp	r0, #0
   20348:	moveq	r8, #1200	; 0x4b0
   2034c:	beq	203bc <__assert_fail@plt+0xddc8>
   20350:	ldr	r3, [r4, #16]
   20354:	and	r3, r3, #61440	; 0xf000
   20358:	cmp	r3, #40960	; 0xa000
   2035c:	beq	204e0 <__assert_fail@plt+0xdeec>
   20360:	ldr	r1, [fp, #16]
   20364:	mov	r0, #10
   20368:	bl	124e0 <putc@plt>
   2036c:	cmn	r0, #1
   20370:	beq	20530 <__assert_fail@plt+0xdf3c>
   20374:	sub	sp, fp, #32
   20378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2037c:	ldr	r3, [r4, #28]
   20380:	ldr	r2, [r5, #16]
   20384:	ldr	r1, [pc, #716]	; 20658 <__assert_fail@plt+0xe064>
   20388:	ldr	r0, [fp, #16]
   2038c:	bl	1233c <fprintf@plt>
   20390:	ldr	r3, [r5, #16]
   20394:	cmp	r0, r3
   20398:	strgt	r0, [r5, #16]
   2039c:	cmp	r0, #0
   203a0:	blt	205dc <__assert_fail@plt+0xdfe8>
   203a4:	ldr	r1, [fp, #16]
   203a8:	mov	r0, #32
   203ac:	bl	124e0 <putc@plt>
   203b0:	cmn	r0, #1
   203b4:	bne	20224 <__assert_fail@plt+0xdc30>
   203b8:	ldr	r8, [pc, #668]	; 2065c <__assert_fail@plt+0xe068>
   203bc:	bl	12348 <__errno_location@plt>
   203c0:	mov	r2, #5
   203c4:	ldr	r1, [pc, #660]	; 20660 <__assert_fail@plt+0xe06c>
   203c8:	ldr	r4, [r0]
   203cc:	mov	r0, #0
   203d0:	bl	120b4 <dcgettext@plt>
   203d4:	mov	r3, r8
   203d8:	mov	r1, r4
   203dc:	mov	r2, r0
   203e0:	mov	r0, #1
   203e4:	bl	121ec <error@plt>
   203e8:	mov	r8, #100	; 0x64
   203ec:	b	203bc <__assert_fail@plt+0xddc8>
   203f0:	ldr	r1, [fp, #4]
   203f4:	ldr	r3, [pc, #616]	; 20664 <__assert_fail@plt+0xe070>
   203f8:	add	r1, r1, #3600	; 0xe10
   203fc:	cmp	r2, r1
   20400:	movle	r9, r3
   20404:	b	202e0 <__assert_fail@plt+0xdcec>
   20408:	mov	r8, #500	; 0x1f4
   2040c:	b	203bc <__assert_fail@plt+0xddc8>
   20410:	mov	r8, #900	; 0x384
   20414:	b	203bc <__assert_fail@plt+0xddc8>
   20418:	ldr	r1, [r4, #32]
   2041c:	ldr	r3, [r4, #36]	; 0x24
   20420:	ldr	r2, [r5, #20]
   20424:	lsl	r1, r1, #12
   20428:	bic	r3, r3, #4080	; 0xff0
   2042c:	bic	r3, r3, #15
   20430:	orr	r3, r3, r1, lsr #20
   20434:	ldr	r0, [fp, #16]
   20438:	ldr	r1, [pc, #520]	; 20648 <__assert_fail@plt+0xe054>
   2043c:	bl	1233c <fprintf@plt>
   20440:	cmp	r0, #0
   20444:	blt	205cc <__assert_fail@plt+0xdfd8>
   20448:	ldr	r3, [r5, #20]
   2044c:	ldr	r1, [pc, #532]	; 20668 <__assert_fail@plt+0xe074>
   20450:	cmp	r0, r3
   20454:	strgt	r0, [r5, #20]
   20458:	ldr	r0, [fp, #16]
   2045c:	bl	1233c <fprintf@plt>
   20460:	cmp	r0, #0
   20464:	blt	205d4 <__assert_fail@plt+0xdfe0>
   20468:	ldr	r3, [r4, #32]
   2046c:	ldr	r0, [r4, #36]	; 0x24
   20470:	ldr	r2, [r5, #24]
   20474:	lsr	r1, r3, #12
   20478:	orr	r1, r1, r0, lsl #20
   2047c:	bic	r1, r1, #255	; 0xff
   20480:	uxtb	r3, r3
   20484:	orr	r3, r1, r3
   20488:	ldr	r0, [fp, #16]
   2048c:	ldr	r1, [pc, #436]	; 20648 <__assert_fail@plt+0xe054>
   20490:	bl	1233c <fprintf@plt>
   20494:	cmp	r0, #0
   20498:	ldrlt	r8, [pc, #460]	; 2066c <__assert_fail@plt+0xe078>
   2049c:	blt	203bc <__assert_fail@plt+0xddc8>
   204a0:	ldr	r3, [r5, #24]
   204a4:	cmp	r0, r3
   204a8:	strgt	r0, [r5, #24]
   204ac:	b	202a0 <__assert_fail@plt+0xdcac>
   204b0:	mov	r8, #800	; 0x320
   204b4:	b	203bc <__assert_fail@plt+0xddc8>
   204b8:	ldr	r8, [pc, #432]	; 20670 <__assert_fail@plt+0xe07c>
   204bc:	b	203bc <__assert_fail@plt+0xddc8>
   204c0:	mov	r8, #250	; 0xfa
   204c4:	b	203bc <__assert_fail@plt+0xddc8>
   204c8:	ldr	r8, [pc, #420]	; 20674 <__assert_fail@plt+0xe080>
   204cc:	b	203bc <__assert_fail@plt+0xddc8>
   204d0:	mov	r8, #200	; 0xc8
   204d4:	b	203bc <__assert_fail@plt+0xddc8>
   204d8:	mov	r8, #300	; 0x12c
   204dc:	b	203bc <__assert_fail@plt+0xddc8>
   204e0:	mov	r1, r7
   204e4:	ldr	r0, [fp, #-968]	; 0xfffffc38
   204e8:	bl	20d8c <__assert_fail@plt+0xe798>
   204ec:	subs	r4, r0, #0
   204f0:	beq	20624 <__assert_fail@plt+0xe030>
   204f4:	ldr	r1, [fp, #16]
   204f8:	ldr	r0, [pc, #376]	; 20678 <__assert_fail@plt+0xe084>
   204fc:	bl	12588 <fputs@plt>
   20500:	cmp	r0, #0
   20504:	blt	2056c <__assert_fail@plt+0xdf78>
   20508:	ldr	r2, [fp, #12]
   2050c:	ldr	r1, [fp, #16]
   20510:	mov	r0, r4
   20514:	bl	1fe98 <__assert_fail@plt+0xd8a4>
   20518:	cmp	r0, #0
   2051c:	ldreq	r8, [pc, #344]	; 2067c <__assert_fail@plt+0xe088>
   20520:	beq	20570 <__assert_fail@plt+0xdf7c>
   20524:	mov	r0, r4
   20528:	bl	2db68 <__assert_fail@plt+0x1b574>
   2052c:	b	20360 <__assert_fail@plt+0xdd6c>
   20530:	ldr	r8, [pc, #328]	; 20680 <__assert_fail@plt+0xe08c>
   20534:	b	203bc <__assert_fail@plt+0xddc8>
   20538:	ldr	r2, [r4, #24]
   2053c:	ldr	r1, [pc, #320]	; 20684 <__assert_fail@plt+0xe090>
   20540:	ldr	r0, [fp, #16]
   20544:	bl	1233c <fprintf@plt>
   20548:	ldr	r3, [r5, #12]
   2054c:	cmp	r0, r3
   20550:	ldr	r3, [pc, #304]	; 20688 <__assert_fail@plt+0xe094>
   20554:	strgt	r0, [r5, #12]
   20558:	cmp	r0, #0
   2055c:	movle	r8, r3
   20560:	movgt	r0, #1
   20564:	movle	r0, #0
   20568:	b	201dc <__assert_fail@plt+0xdbe8>
   2056c:	ldr	r8, [pc, #280]	; 2068c <__assert_fail@plt+0xe098>
   20570:	mov	r0, r4
   20574:	bl	2db68 <__assert_fail@plt+0x1b574>
   20578:	b	203bc <__assert_fail@plt+0xddc8>
   2057c:	ldr	r0, [r4, #80]	; 0x50
   20580:	mov	r8, #1
   20584:	mov	r9, #0
   20588:	cmp	r0, #0
   2058c:	mov	r3, sl
   20590:	sub	r2, fp, #688	; 0x2b0
   20594:	strd	r8, [sp, #8]
   20598:	strd	r8, [sp]
   2059c:	asr	r1, r0, #31
   205a0:	blt	205e4 <__assert_fail@plt+0xdff0>
   205a4:	bl	225f8 <__assert_fail@plt+0x10004>
   205a8:	mov	r2, #12
   205ac:	ldr	r1, [pc, #220]	; 20690 <__assert_fail@plt+0xe09c>
   205b0:	mov	r3, r0
   205b4:	ldr	r0, [fp, #16]
   205b8:	bl	1233c <fprintf@plt>
   205bc:	cmp	r0, #0
   205c0:	bge	20334 <__assert_fail@plt+0xdd40>
   205c4:	ldr	r8, [pc, #200]	; 20694 <__assert_fail@plt+0xe0a0>
   205c8:	b	203bc <__assert_fail@plt+0xddc8>
   205cc:	mov	r8, #600	; 0x258
   205d0:	b	203bc <__assert_fail@plt+0xddc8>
   205d4:	ldr	r8, [pc, #188]	; 20698 <__assert_fail@plt+0xe0a4>
   205d8:	b	203bc <__assert_fail@plt+0xddc8>
   205dc:	ldr	r8, [pc, #184]	; 2069c <__assert_fail@plt+0xe0a8>
   205e0:	b	203bc <__assert_fail@plt+0xddc8>
   205e4:	rsbs	r0, r0, #0
   205e8:	rsc	r1, r1, #0
   205ec:	bl	225f8 <__assert_fail@plt+0x10004>
   205f0:	mov	r5, r0
   205f4:	bl	12300 <strlen@plt>
   205f8:	str	r5, [sp]
   205fc:	ldr	r3, [pc, #156]	; 206a0 <__assert_fail@plt+0xe0ac>
   20600:	ldr	r1, [pc, #156]	; 206a4 <__assert_fail@plt+0xe0b0>
   20604:	rsb	r2, r0, #12
   20608:	ldr	r0, [fp, #16]
   2060c:	bic	r2, r2, r2, asr #31
   20610:	bl	1233c <fprintf@plt>
   20614:	cmp	r0, #0
   20618:	bge	20334 <__assert_fail@plt+0xdd40>
   2061c:	mov	r8, #1000	; 0x3e8
   20620:	b	203bc <__assert_fail@plt+0xddc8>
   20624:	bl	12348 <__errno_location@plt>
   20628:	mov	r3, r6
   2062c:	ldr	r2, [pc, #116]	; 206a8 <__assert_fail@plt+0xe0b4>
   20630:	ldr	r1, [r0]
   20634:	mov	r0, r4
   20638:	bl	121ec <error@plt>
   2063c:	b	20524 <__assert_fail@plt+0xdf30>
   20640:	ldrdeq	r7, [r5], -r0
   20644:	andeq	r4, r4, r0, lsr #12
   20648:	andeq	r4, r4, ip, lsr r6
   2064c:	andeq	r4, r4, r4, lsr #12
   20650:	andeq	r4, r4, r4, lsl r6
   20654:	andeq	r4, r4, r4, asr #12
   20658:	andeq	r4, r4, r4, lsr r6
   2065c:	andeq	r0, r0, sp, lsl #4
   20660:	andeq	r4, r4, r0, ror #12
   20664:	andeq	r4, r4, r8, lsl #12
   20668:	andeq	r2, r4, r0, ror r0
   2066c:	andeq	r0, r0, sl, lsl #5
   20670:	andeq	r0, r0, r2, asr r3
   20674:	andeq	r0, r0, r3, lsl r1
   20678:	andeq	r4, r4, r8, asr r6
   2067c:	andeq	r0, r0, r6, asr #10
   20680:	andeq	r0, r0, r8, ror r5
   20684:	andeq	r4, r4, ip, lsr #12
   20688:	andeq	r0, r0, r2, asr #3
   2068c:	andeq	r0, r0, r4, lsl r5
   20690:	andeq	r4, r4, r0, asr r6
   20694:	andeq	r0, r0, ip, asr #8
   20698:	andeq	r0, r0, r1, ror r2
   2069c:	andeq	r0, r0, r6, lsr #4
   206a0:	andeq	r0, r4, ip, lsl #14
   206a4:	andeq	r4, r4, r8, asr #12
   206a8:	andeq	r4, r4, r0, ror #18
   206ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   206b0:	cmp	r2, #0
   206b4:	sub	sp, sp, #8192	; 0x2000
   206b8:	sub	sp, sp, #8
   206bc:	mov	r5, r3
   206c0:	beq	20738 <__assert_fail@plt+0xe144>
   206c4:	add	r2, sp, #8192	; 0x2000
   206c8:	add	r2, r2, #40	; 0x28
   206cc:	add	r4, sp, #8
   206d0:	str	r1, [sp]
   206d4:	mov	r7, r1
   206d8:	mov	r8, r0
   206dc:	mvn	r3, #0
   206e0:	mov	r0, r4
   206e4:	ldr	r2, [r2]
   206e8:	mov	r1, #8192	; 0x2000
   206ec:	bl	2afcc <__assert_fail@plt+0x189d8>
   206f0:	cmp	r0, #8192	; 0x2000
   206f4:	mov	r6, r0
   206f8:	bcs	20760 <__assert_fail@plt+0xe16c>
   206fc:	mov	r1, r0
   20700:	mov	r0, r4
   20704:	bl	207d8 <__assert_fail@plt+0xe1e4>
   20708:	mov	r1, r5
   2070c:	mov	ip, #0
   20710:	mov	r2, r4
   20714:	mov	r3, r0
   20718:	mov	r0, r8
   2071c:	strb	ip, [r4, r3]
   20720:	bl	1233c <fprintf@plt>
   20724:	mov	r5, r0
   20728:	mov	r0, r5
   2072c:	add	sp, sp, #8192	; 0x2000
   20730:	add	sp, sp, #8
   20734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20738:	mov	r1, r3
   2073c:	add	r3, sp, #8192	; 0x2000
   20740:	add	r3, r3, #40	; 0x28
   20744:	ldr	r2, [r3]
   20748:	bl	1233c <fprintf@plt>
   2074c:	mov	r5, r0
   20750:	mov	r0, r5
   20754:	add	sp, sp, #8192	; 0x2000
   20758:	add	sp, sp, #8
   2075c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20760:	add	sl, r0, #1
   20764:	mov	r0, sl
   20768:	bl	2c184 <__assert_fail@plt+0x19b90>
   2076c:	add	r2, sp, #8192	; 0x2000
   20770:	add	r2, r2, #40	; 0x28
   20774:	mvn	r3, #0
   20778:	mov	r1, sl
   2077c:	str	r7, [sp]
   20780:	ldr	r2, [r2]
   20784:	mov	r9, r0
   20788:	bl	2afcc <__assert_fail@plt+0x189d8>
   2078c:	mov	r1, r6
   20790:	mov	r0, r9
   20794:	bl	207d8 <__assert_fail@plt+0xe1e4>
   20798:	mov	r1, r5
   2079c:	mov	ip, #0
   207a0:	mov	r2, r9
   207a4:	mov	r3, r0
   207a8:	mov	r0, r8
   207ac:	strb	ip, [r9, r3]
   207b0:	bl	1233c <fprintf@plt>
   207b4:	cmp	r9, r4
   207b8:	mov	r5, r0
   207bc:	beq	20750 <__assert_fail@plt+0xe15c>
   207c0:	mov	r0, r9
   207c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   207c8:	mov	r0, r5
   207cc:	add	sp, sp, #8192	; 0x2000
   207d0:	add	sp, sp, #8
   207d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   207d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   207dc:	sub	sp, sp, #16
   207e0:	mov	r8, r0
   207e4:	mov	r6, r1
   207e8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   207ec:	cmp	r0, #1
   207f0:	bls	2091c <__assert_fail@plt+0xe328>
   207f4:	add	r6, r8, r6
   207f8:	cmp	r8, r6
   207fc:	bcs	2095c <__assert_fail@plt+0xe368>
   20800:	mov	r5, r8
   20804:	mov	r4, r8
   20808:	mov	r9, #0
   2080c:	mov	r7, #63	; 0x3f
   20810:	b	2083c <__assert_fail@plt+0xe248>
   20814:	cmp	r3, #37	; 0x25
   20818:	bcs	20828 <__assert_fail@plt+0xe234>
   2081c:	sub	r2, r3, #32
   20820:	cmp	r2, #3
   20824:	bhi	20864 <__assert_fail@plt+0xe270>
   20828:	strb	r3, [r5]
   2082c:	add	r4, r4, #1
   20830:	add	r5, r5, #1
   20834:	cmp	r4, r6
   20838:	bcs	20900 <__assert_fail@plt+0xe30c>
   2083c:	ldrb	r3, [r4]
   20840:	cmp	r3, #63	; 0x3f
   20844:	bls	20814 <__assert_fail@plt+0xe220>
   20848:	cmp	r3, #65	; 0x41
   2084c:	bcc	20864 <__assert_fail@plt+0xe270>
   20850:	cmp	r3, #95	; 0x5f
   20854:	bls	20828 <__assert_fail@plt+0xe234>
   20858:	sub	r2, r3, #97	; 0x61
   2085c:	cmp	r2, #29
   20860:	bls	20828 <__assert_fail@plt+0xe234>
   20864:	str	r9, [sp, #8]
   20868:	str	r9, [sp, #12]
   2086c:	add	r3, sp, #8
   20870:	sub	r2, r6, r4
   20874:	mov	r1, r4
   20878:	add	r0, sp, #4
   2087c:	bl	2fe64 <__assert_fail@plt+0x1d870>
   20880:	cmn	r0, #1
   20884:	mov	sl, r0
   20888:	beq	208ec <__assert_fail@plt+0xe2f8>
   2088c:	cmn	r0, #2
   20890:	beq	2090c <__assert_fail@plt+0xe318>
   20894:	ldr	r0, [sp, #4]
   20898:	bl	11fa0 <wcwidth@plt>
   2089c:	cmp	sl, #0
   208a0:	moveq	sl, #1
   208a4:	cmp	r0, #0
   208a8:	blt	208dc <__assert_fail@plt+0xe2e8>
   208ac:	sub	r3, r5, #1
   208b0:	add	r1, r4, sl
   208b4:	ldrb	r2, [r4], #1
   208b8:	cmp	r4, r1
   208bc:	strb	r2, [r3, #1]!
   208c0:	bne	208b4 <__assert_fail@plt+0xe2c0>
   208c4:	add	r5, r5, sl
   208c8:	add	r0, sp, #8
   208cc:	bl	12060 <mbsinit@plt>
   208d0:	cmp	r0, #0
   208d4:	beq	2086c <__assert_fail@plt+0xe278>
   208d8:	b	20834 <__assert_fail@plt+0xe240>
   208dc:	strb	r7, [r5]
   208e0:	add	r4, r4, sl
   208e4:	add	r5, r5, #1
   208e8:	b	208c8 <__assert_fail@plt+0xe2d4>
   208ec:	add	r4, r4, #1
   208f0:	cmp	r4, r6
   208f4:	strb	r7, [r5]
   208f8:	add	r5, r5, #1
   208fc:	bcc	2083c <__assert_fail@plt+0xe248>
   20900:	sub	r0, r5, r8
   20904:	add	sp, sp, #16
   20908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2090c:	strb	r7, [r5]
   20910:	mov	r4, r6
   20914:	add	r5, r5, #1
   20918:	b	20834 <__assert_fail@plt+0xe240>
   2091c:	add	r4, r8, r6
   20920:	cmp	r8, r4
   20924:	bcs	20954 <__assert_fail@plt+0xe360>
   20928:	bl	122b8 <__ctype_b_loc@plt>
   2092c:	mov	r1, #63	; 0x3f
   20930:	ldrb	r3, [r8]
   20934:	ldr	r2, [r0]
   20938:	add	r8, r8, #1
   2093c:	lsl	r3, r3, #1
   20940:	ldrh	r3, [r2, r3]
   20944:	tst	r3, #16384	; 0x4000
   20948:	strbeq	r1, [r8, #-1]
   2094c:	cmp	r4, r8
   20950:	bne	20930 <__assert_fail@plt+0xe33c>
   20954:	mov	r0, r6
   20958:	b	20904 <__assert_fail@plt+0xe310>
   2095c:	mov	r0, #0
   20960:	add	sp, sp, #16
   20964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2096c:	mov	r8, #0
   20970:	sub	sp, sp, #12
   20974:	ldr	r7, [pc, #288]	; 20a9c <__assert_fail@plt+0xe4a8>
   20978:	ldr	r5, [pc, #288]	; 20aa0 <__assert_fail@plt+0xe4ac>
   2097c:	mov	r6, r0
   20980:	mov	r4, r8
   20984:	b	2098c <__assert_fail@plt+0xe398>
   20988:	ldr	r5, [r7, #-12]
   2098c:	mov	r1, r6
   20990:	mov	r0, r5
   20994:	bl	11f40 <strcmp@plt>
   20998:	cmp	r0, #0
   2099c:	beq	20a68 <__assert_fail@plt+0xe474>
   209a0:	mov	r0, r5
   209a4:	bl	2b4b4 <__assert_fail@plt+0x18ec0>
   209a8:	bl	12300 <strlen@plt>
   209ac:	add	r4, r4, #1
   209b0:	cmp	r4, #13
   209b4:	add	r7, r7, #12
   209b8:	add	r0, r0, #2
   209bc:	add	r8, r8, r0
   209c0:	bne	20988 <__assert_fail@plt+0xe394>
   209c4:	add	r0, r8, #1
   209c8:	bl	2c184 <__assert_fail@plt+0x19b90>
   209cc:	mov	r4, #1
   209d0:	ldr	sl, [pc, #204]	; 20aa4 <__assert_fail@plt+0xe4b0>
   209d4:	ldr	r7, [pc, #204]	; 20aa8 <__assert_fail@plt+0xe4b4>
   209d8:	ldr	r8, [pc, #204]	; 20aac <__assert_fail@plt+0xe4b8>
   209dc:	mov	r9, r0
   209e0:	mov	fp, r0
   209e4:	ldr	r0, [pc, #180]	; 20aa0 <__assert_fail@plt+0xe4ac>
   209e8:	b	209f8 <__assert_fail@plt+0xe404>
   209ec:	add	r3, r4, r4, lsl #1
   209f0:	add	r4, r4, #1
   209f4:	ldr	r0, [r8, r3, lsl #2]
   209f8:	cmp	r4, #1
   209fc:	beq	20a80 <__assert_fail@plt+0xe48c>
   20a00:	ldrh	r2, [sl]
   20a04:	ldrb	r3, [sl, #2]
   20a08:	mov	r5, fp
   20a0c:	strh	r2, [fp]
   20a10:	strb	r3, [r5, #2]!
   20a14:	bl	2b4b4 <__assert_fail@plt+0x18ec0>
   20a18:	mov	r1, r7
   20a1c:	mov	r2, r0
   20a20:	mov	r0, r5
   20a24:	bl	124b0 <sprintf@plt>
   20a28:	cmp	r4, #13
   20a2c:	add	fp, r5, r0
   20a30:	bne	209ec <__assert_fail@plt+0xe3f8>
   20a34:	mov	r2, #5
   20a38:	ldr	r1, [pc, #112]	; 20ab0 <__assert_fail@plt+0xe4bc>
   20a3c:	mov	r0, #0
   20a40:	bl	120b4 <dcgettext@plt>
   20a44:	mov	r4, r0
   20a48:	mov	r0, r6
   20a4c:	bl	2b4b4 <__assert_fail@plt+0x18ec0>
   20a50:	mov	r2, r4
   20a54:	str	r9, [sp]
   20a58:	mov	r1, #0
   20a5c:	mov	r3, r0
   20a60:	mov	r0, #1
   20a64:	bl	121ec <error@plt>
   20a68:	ldr	r3, [pc, #60]	; 20aac <__assert_fail@plt+0xe4b8>
   20a6c:	add	r4, r4, r4, lsl #1
   20a70:	add	r4, r3, r4, lsl #2
   20a74:	ldr	r0, [r4, #8]
   20a78:	add	sp, sp, #12
   20a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a80:	bl	2b4b4 <__assert_fail@plt+0x18ec0>
   20a84:	mov	r1, r7
   20a88:	mov	r2, r0
   20a8c:	mov	r0, fp
   20a90:	bl	124b0 <sprintf@plt>
   20a94:	add	fp, fp, r0
   20a98:	b	209ec <__assert_fail@plt+0xe3f8>
   20a9c:	muleq	r4, r4, r6
   20aa0:	andeq	r4, r4, r4, lsr #14
   20aa4:	andeq	r2, r4, r0, ror r0
   20aa8:	andeq	r4, r4, r0, ror #18
   20aac:	andeq	r4, r4, r8, lsl #13
   20ab0:	andeq	r4, r4, r8, lsr r7
   20ab4:	cmp	r0, #12
   20ab8:	addls	r0, r0, r0, lsl #1
   20abc:	ldrls	r3, [pc, #8]	; 20acc <__assert_fail@plt+0xe4d8>
   20ac0:	ldrls	r0, [r3, r0, lsl #2]
   20ac4:	movhi	r0, #0
   20ac8:	bx	lr
   20acc:	andeq	r4, r4, r8, lsl #13
   20ad0:	cmp	r0, #12
   20ad4:	addls	r0, r0, r0, lsl #1
   20ad8:	ldrls	r3, [pc, #12]	; 20aec <__assert_fail@plt+0xe4f8>
   20adc:	addls	r0, r3, r0, lsl #2
   20ae0:	ldrls	r0, [r0, #8]
   20ae4:	mvnhi	r0, #0
   20ae8:	bx	lr
   20aec:	andeq	r4, r4, r8, lsl #13
   20af0:	cmp	r0, #12
   20af4:	addls	r0, r0, r0, lsl #1
   20af8:	ldrls	r3, [pc, #12]	; 20b0c <__assert_fail@plt+0xe518>
   20afc:	addls	r0, r3, r0, lsl #2
   20b00:	ldrls	r0, [r0, #4]
   20b04:	movhi	r0, #0
   20b08:	bx	lr
   20b0c:	andeq	r4, r4, r8, lsl #13
   20b10:	cmp	r0, #12
   20b14:	bhi	20b78 <__assert_fail@plt+0xe584>
   20b18:	ldr	r3, [pc, #96]	; 20b80 <__assert_fail@plt+0xe58c>
   20b1c:	add	r2, r0, r0, lsl #1
   20b20:	cmp	r0, #0
   20b24:	add	r2, r3, r2, lsl #2
   20b28:	push	{lr}		; (str lr, [sp, #-4]!)
   20b2c:	ldr	lr, [r2, #8]
   20b30:	beq	20b68 <__assert_fail@plt+0xe574>
   20b34:	mov	ip, #1
   20b38:	mov	r2, #0
   20b3c:	b	20b44 <__assert_fail@plt+0xe550>
   20b40:	ldr	ip, [r3, #4]
   20b44:	tst	ip, r1
   20b48:	beq	20b58 <__assert_fail@plt+0xe564>
   20b4c:	ldr	ip, [r3, #8]
   20b50:	cmp	lr, ip
   20b54:	beq	20b70 <__assert_fail@plt+0xe57c>
   20b58:	add	r2, r2, #1
   20b5c:	cmp	r0, r2
   20b60:	add	r3, r3, #12
   20b64:	bne	20b40 <__assert_fail@plt+0xe54c>
   20b68:	mvn	r0, #0
   20b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   20b70:	mov	r0, r2
   20b74:	pop	{pc}		; (ldr pc, [sp], #4)
   20b78:	mvn	r0, #0
   20b7c:	bx	lr
   20b80:	andeq	r4, r4, r8, lsl #13
   20b84:	push	{r4, r5, r6, r7, r8, lr}
   20b88:	sub	sp, sp, #16
   20b8c:	mov	r4, r0
   20b90:	mov	r7, r1
   20b94:	bl	12348 <__errno_location@plt>
   20b98:	mov	r6, #0
   20b9c:	mov	r2, #10
   20ba0:	add	r1, sp, #12
   20ba4:	str	r6, [r0]
   20ba8:	mov	r5, r0
   20bac:	mov	r0, r4
   20bb0:	bl	11f4c <strtol@plt>
   20bb4:	sub	r3, r0, #-2147483647	; 0x80000001
   20bb8:	cmn	r3, #3
   20bbc:	bls	20bd4 <__assert_fail@plt+0xe5e0>
   20bc0:	ldr	r1, [r5]
   20bc4:	ldr	r2, [pc, #184]	; 20c84 <__assert_fail@plt+0xe690>
   20bc8:	mov	r3, r4
   20bcc:	mov	r0, #1
   20bd0:	bl	121ec <error@plt>
   20bd4:	ldr	r3, [sp, #12]
   20bd8:	ldrb	r8, [r3]
   20bdc:	cmp	r8, #0
   20be0:	bne	20bf4 <__assert_fail@plt+0xe600>
   20be4:	cmp	r4, r3
   20be8:	beq	20c48 <__assert_fail@plt+0xe654>
   20bec:	add	sp, sp, #16
   20bf0:	pop	{r4, r5, r6, r7, r8, pc}
   20bf4:	mov	r2, #5
   20bf8:	ldr	r1, [pc, #136]	; 20c88 <__assert_fail@plt+0xe694>
   20bfc:	mov	r0, r6
   20c00:	ldr	r5, [r5]
   20c04:	bl	120b4 <dcgettext@plt>
   20c08:	ldr	r2, [sp, #12]
   20c0c:	mov	r1, r7
   20c10:	mov	r8, r0
   20c14:	mov	r0, r6
   20c18:	bl	2b208 <__assert_fail@plt+0x18c14>
   20c1c:	mov	r2, r4
   20c20:	mov	r1, r7
   20c24:	mov	r6, r0
   20c28:	mov	r0, #1
   20c2c:	bl	2b208 <__assert_fail@plt+0x18c14>
   20c30:	mov	r3, r6
   20c34:	mov	r2, r8
   20c38:	mov	r1, r5
   20c3c:	str	r0, [sp]
   20c40:	mov	r0, #1
   20c44:	bl	121ec <error@plt>
   20c48:	mov	r2, #5
   20c4c:	ldr	r1, [pc, #56]	; 20c8c <__assert_fail@plt+0xe698>
   20c50:	mov	r0, r8
   20c54:	ldr	r5, [r5]
   20c58:	bl	120b4 <dcgettext@plt>
   20c5c:	mov	r2, r4
   20c60:	mov	r1, r7
   20c64:	mov	r6, r0
   20c68:	mov	r0, r8
   20c6c:	bl	2b208 <__assert_fail@plt+0x18c14>
   20c70:	mov	r2, r6
   20c74:	mov	r1, r5
   20c78:	mov	r3, r0
   20c7c:	mov	r0, #1
   20c80:	b	20bd0 <__assert_fail@plt+0xe5dc>
   20c84:	andeq	r4, r4, r0, ror #18
   20c88:	ldrdeq	r4, [r4], -ip
   20c8c:	strdeq	r4, [r4], -r8
   20c90:	push	{r4, r5, r6, lr}
   20c94:	cmp	r2, #0
   20c98:	ldr	r5, [sp, #16]
   20c9c:	beq	20cd8 <__assert_fail@plt+0xe6e4>
   20ca0:	mov	r2, #0
   20ca4:	str	r2, [r3]
   20ca8:	str	r2, [r5]
   20cac:	ldr	r4, [r3]
   20cb0:	ldrb	r3, [r1]
   20cb4:	add	r4, r0, r4
   20cb8:	cmp	r3, #0
   20cbc:	beq	20d0c <__assert_fail@plt+0xe718>
   20cc0:	mov	r0, r4
   20cc4:	bl	12528 <strpbrk@plt>
   20cc8:	cmp	r0, #0
   20ccc:	beq	20d0c <__assert_fail@plt+0xe718>
   20cd0:	sub	r0, r0, r4
   20cd4:	b	20d14 <__assert_fail@plt+0xe720>
   20cd8:	ldr	r2, [r5]
   20cdc:	ldr	r4, [r3]
   20ce0:	add	r4, r4, r2
   20ce4:	str	r4, [r3]
   20ce8:	ldrb	r2, [r0, r4]
   20cec:	cmp	r2, #0
   20cf0:	beq	20d20 <__assert_fail@plt+0xe72c>
   20cf4:	add	r4, r4, #1
   20cf8:	str	r4, [r3]
   20cfc:	ldrb	r3, [r1]
   20d00:	add	r4, r0, r4
   20d04:	cmp	r3, #0
   20d08:	bne	20cc0 <__assert_fail@plt+0xe6cc>
   20d0c:	mov	r0, r4
   20d10:	bl	12300 <strlen@plt>
   20d14:	str	r0, [r5]
   20d18:	mov	r0, #1
   20d1c:	pop	{r4, r5, r6, pc}
   20d20:	mov	r0, r2
   20d24:	pop	{r4, r5, r6, pc}
   20d28:	push	{r4, r5, lr}
   20d2c:	mov	r2, #5
   20d30:	sub	sp, sp, #20
   20d34:	mov	r4, r0
   20d38:	mov	r5, r1
   20d3c:	mov	r0, #0
   20d40:	ldr	r1, [pc, #48]	; 20d78 <__assert_fail@plt+0xe784>
   20d44:	bl	120b4 <dcgettext@plt>
   20d48:	ldr	ip, [pc, #44]	; 20d7c <__assert_fail@plt+0xe788>
   20d4c:	ldr	r1, [pc, #44]	; 20d80 <__assert_fail@plt+0xe78c>
   20d50:	ldr	r2, [pc, #44]	; 20d84 <__assert_fail@plt+0xe790>
   20d54:	mov	r3, r5
   20d58:	stmib	sp, {r1, ip}
   20d5c:	str	r2, [sp]
   20d60:	ldr	r2, [pc, #32]	; 20d88 <__assert_fail@plt+0xe794>
   20d64:	mov	r1, r0
   20d68:	mov	r0, r4
   20d6c:	bl	1233c <fprintf@plt>
   20d70:	add	sp, sp, #20
   20d74:	pop	{r4, r5, pc}
   20d78:	andeq	r4, r4, r0, lsl r8
   20d7c:	andeq	r4, r4, r8, lsl #18
   20d80:	andeq	r4, r4, r0, lsr #18
   20d84:	andeq	r4, r4, r0, asr #11
   20d88:	andeq	r4, r4, r0, ror #17
   20d8c:	push	{lr}		; (str lr, [sp, #-4]!)
   20d90:	sub	sp, sp, #12
   20d94:	ldr	r2, [pc, #24]	; 20db4 <__assert_fail@plt+0xe7c0>
   20d98:	mov	r3, #0
   20d9c:	str	r2, [sp, #4]
   20da0:	str	r3, [sp]
   20da4:	mov	r2, r3
   20da8:	bl	20ef8 <__assert_fail@plt+0xe904>
   20dac:	add	sp, sp, #12
   20db0:	pop	{pc}		; (ldr pc, [sp], #4)
   20db4:	andeq	r2, r1, r8, asr r2
   20db8:	push	{r4, lr}
   20dbc:	mov	r4, r0
   20dc0:	mov	r0, #24
   20dc4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   20dc8:	cmp	r0, #0
   20dcc:	movne	r3, #0
   20dd0:	strne	r4, [r0, #16]
   20dd4:	strne	r4, [r0, #20]
   20dd8:	strne	r3, [r0]
   20ddc:	pop	{r4, pc}
   20de0:	push	{r4, lr}
   20de4:	mov	r4, r0
   20de8:	mov	r0, #24
   20dec:	bl	2fe38 <__assert_fail@plt+0x1d844>
   20df0:	cmp	r0, #0
   20df4:	popeq	{r4, pc}
   20df8:	mov	r3, #0
   20dfc:	str	r4, [r0]
   20e00:	str	r3, [r0, #8]
   20e04:	str	r3, [r0, #12]
   20e08:	str	r3, [r0, #4]
   20e0c:	str	r3, [r0, #16]
   20e10:	pop	{r4, pc}
   20e14:	ldr	r3, [r0]
   20e18:	cmp	r3, #0
   20e1c:	beq	20e64 <__assert_fail@plt+0xe870>
   20e20:	push	{r4, r5, r6, lr}
   20e24:	mov	r2, #0
   20e28:	mov	r5, r1
   20e2c:	mov	r4, r0
   20e30:	add	r1, r0, #12
   20e34:	add	r0, r0, #8
   20e38:	bl	1254c <getdelim@plt>
   20e3c:	cmp	r0, #0
   20e40:	blt	20e90 <__assert_fail@plt+0xe89c>
   20e44:	ldr	r3, [r4, #4]
   20e48:	mov	r2, #1
   20e4c:	add	r3, r3, r2
   20e50:	str	r2, [r5]
   20e54:	ldr	r2, [r4, #8]
   20e58:	str	r3, [r4, #4]
   20e5c:	mov	r0, r2
   20e60:	pop	{r4, r5, r6, pc}
   20e64:	ldr	r3, [r0, #20]
   20e68:	ldr	r2, [r3]
   20e6c:	cmp	r2, #0
   20e70:	moveq	r3, #2
   20e74:	addne	r3, r3, #4
   20e78:	movne	ip, #1
   20e7c:	strne	ip, [r1]
   20e80:	streq	r3, [r1]
   20e84:	strne	r3, [r0, #20]
   20e88:	mov	r0, r2
   20e8c:	bx	lr
   20e90:	ldr	r0, [r4]
   20e94:	bl	122dc <feof@plt>
   20e98:	mov	r2, #0
   20e9c:	cmp	r0, r2
   20ea0:	movne	r0, #2
   20ea4:	moveq	r0, #4
   20ea8:	str	r0, [r5]
   20eac:	b	20e5c <__assert_fail@plt+0xe868>
   20eb0:	ldr	r3, [r0]
   20eb4:	cmp	r3, #0
   20eb8:	ldreq	r3, [r0, #20]
   20ebc:	ldrne	r0, [r0, #4]
   20ec0:	ldreq	r0, [r0, #16]
   20ec4:	subeq	r0, r3, r0
   20ec8:	asreq	r0, r0, #2
   20ecc:	bx	lr
   20ed0:	ldr	r3, [r0]
   20ed4:	push	{r4, lr}
   20ed8:	cmp	r3, #0
   20edc:	mov	r4, r0
   20ee0:	beq	20eec <__assert_fail@plt+0xe8f8>
   20ee4:	ldr	r0, [r0, #8]
   20ee8:	bl	2db68 <__assert_fail@plt+0x1b574>
   20eec:	mov	r0, r4
   20ef0:	pop	{r4, lr}
   20ef4:	b	2db68 <__assert_fail@plt+0x1b574>
   20ef8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20efc:	sub	sp, sp, #1024	; 0x400
   20f00:	sub	sp, sp, #8
   20f04:	ldr	ip, [pc, #428]	; 210b8 <__assert_fail@plt+0xeac4>
   20f08:	ldr	r6, [sp, #1064]	; 0x428
   20f0c:	mov	r8, r0
   20f10:	cmp	r6, #0
   20f14:	moveq	r6, ip
   20f18:	subs	r7, r2, #0
   20f1c:	mov	r9, r1
   20f20:	ldr	sl, [sp, #1068]	; 0x42c
   20f24:	beq	21074 <__assert_fail@plt+0xea80>
   20f28:	mvn	r4, #-2147483648	; 0x80000000
   20f2c:	cmp	r3, r4
   20f30:	movcc	r4, r3
   20f34:	mov	r5, r7
   20f38:	mov	r1, r9
   20f3c:	mov	r3, r4
   20f40:	mov	r2, r5
   20f44:	mov	r0, r8
   20f48:	blx	sl
   20f4c:	subs	r1, r0, #0
   20f50:	mov	r0, r5
   20f54:	blt	20fc8 <__assert_fail@plt+0xe9d4>
   20f58:	cmp	r1, r4
   20f5c:	blt	21004 <__assert_fail@plt+0xea10>
   20f60:	cmp	r7, r5
   20f64:	beq	20f70 <__assert_fail@plt+0xe97c>
   20f68:	ldr	r3, [r6, #8]
   20f6c:	blx	r3
   20f70:	lsl	r3, r4, #1
   20f74:	cmn	r4, #-1073741822	; 0xc0000002
   20f78:	add	r4, r3, #1
   20f7c:	mov	r0, r4
   20f80:	bgt	21054 <__assert_fail@plt+0xea60>
   20f84:	ldr	r3, [r6]
   20f88:	blx	r3
   20f8c:	subs	r5, r0, #0
   20f90:	bne	20f38 <__assert_fail@plt+0xe944>
   20f94:	ldr	r3, [r6, #12]
   20f98:	cmp	r3, #0
   20f9c:	beq	20fa8 <__assert_fail@plt+0xe9b4>
   20fa0:	mov	r0, r4
   20fa4:	blx	r3
   20fa8:	bl	12348 <__errno_location@plt>
   20fac:	mov	r5, #0
   20fb0:	mov	r3, #12
   20fb4:	str	r3, [r0]
   20fb8:	mov	r0, r5
   20fbc:	add	sp, sp, #1024	; 0x400
   20fc0:	add	sp, sp, #8
   20fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20fc8:	cmp	r7, r5
   20fcc:	moveq	r5, #0
   20fd0:	beq	20fb8 <__assert_fail@plt+0xe9c4>
   20fd4:	bl	12348 <__errno_location@plt>
   20fd8:	ldr	r3, [r6, #8]
   20fdc:	mov	r4, r0
   20fe0:	ldr	r6, [r0]
   20fe4:	mov	r0, r5
   20fe8:	blx	r3
   20fec:	mov	r5, #0
   20ff0:	mov	r0, r5
   20ff4:	str	r6, [r4]
   20ff8:	add	sp, sp, #1024	; 0x400
   20ffc:	add	sp, sp, #8
   21000:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21004:	add	r3, sp, #8
   21008:	cmp	r5, r3
   2100c:	mov	r3, #0
   21010:	strb	r3, [r5, r1]
   21014:	add	r1, r1, #1
   21018:	beq	21080 <__assert_fail@plt+0xea8c>
   2101c:	cmp	r7, r5
   21020:	cmpne	r1, r4
   21024:	bge	20fb8 <__assert_fail@plt+0xe9c4>
   21028:	ldr	r3, [r6, #4]
   2102c:	cmp	r3, #0
   21030:	beq	20fb8 <__assert_fail@plt+0xe9c4>
   21034:	mov	r0, r5
   21038:	blx	r3
   2103c:	cmp	r0, #0
   21040:	movne	r5, r0
   21044:	mov	r0, r5
   21048:	add	sp, sp, #1024	; 0x400
   2104c:	add	sp, sp, #8
   21050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21054:	bl	12348 <__errno_location@plt>
   21058:	mov	r5, #0
   2105c:	mov	r3, #36	; 0x24
   21060:	str	r3, [r0]
   21064:	mov	r0, r5
   21068:	add	sp, sp, #1024	; 0x400
   2106c:	add	sp, sp, #8
   21070:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21074:	mov	r4, #1024	; 0x400
   21078:	add	r7, sp, #8
   2107c:	b	20f34 <__assert_fail@plt+0xe940>
   21080:	mov	r0, r1
   21084:	ldr	r3, [r6]
   21088:	str	r1, [sp, #4]
   2108c:	blx	r3
   21090:	ldr	r1, [sp, #4]
   21094:	cmp	r0, #0
   21098:	beq	210b0 <__assert_fail@plt+0xeabc>
   2109c:	mov	r2, r1
   210a0:	mov	r1, r5
   210a4:	bl	12024 <memcpy@plt>
   210a8:	mov	r5, r0
   210ac:	b	20fb8 <__assert_fail@plt+0xe9c4>
   210b0:	mov	r4, r1
   210b4:	b	20f94 <__assert_fail@plt+0xe9a0>
   210b8:	andeq	r6, r4, r4, lsl #3
   210bc:	push	{r4, r5, r6, lr}
   210c0:	mov	r2, #0
   210c4:	mov	r4, r1
   210c8:	mov	r1, #1
   210cc:	mov	r5, r0
   210d0:	bl	2d934 <__assert_fail@plt+0x1b340>
   210d4:	cmp	r0, #0
   210d8:	blt	21118 <__assert_fail@plt+0xeb24>
   210dc:	cmp	r4, #0
   210e0:	orrne	r2, r0, #1
   210e4:	biceq	r2, r0, #1
   210e8:	cmp	r2, r0
   210ec:	beq	21110 <__assert_fail@plt+0xeb1c>
   210f0:	mov	r0, r5
   210f4:	mov	r1, #2
   210f8:	bl	2d934 <__assert_fail@plt+0x1b340>
   210fc:	cmn	r0, #1
   21100:	movne	r0, #0
   21104:	moveq	r0, #1
   21108:	rsb	r0, r0, #0
   2110c:	pop	{r4, r5, r6, pc}
   21110:	mov	r0, #0
   21114:	pop	{r4, r5, r6, pc}
   21118:	mvn	r0, #0
   2111c:	pop	{r4, r5, r6, pc}
   21120:	mov	r2, #0
   21124:	ldr	r1, [pc]	; 2112c <__assert_fail@plt+0xeb38>
   21128:	b	2d934 <__assert_fail@plt+0x1b340>
   2112c:	andeq	r0, r0, r6, lsl #8
   21130:	ldr	r3, [pc, #4]	; 2113c <__assert_fail@plt+0xeb48>
   21134:	str	r0, [r3]
   21138:	bx	lr
   2113c:	andeq	r7, r5, ip, ror #25
   21140:	ldr	r3, [pc, #4]	; 2114c <__assert_fail@plt+0xeb58>
   21144:	strb	r0, [r3, #4]
   21148:	bx	lr
   2114c:	andeq	r7, r5, ip, ror #25
   21150:	ldr	r3, [pc, #192]	; 21218 <__assert_fail@plt+0xec24>
   21154:	push	{r4, r5, r6, lr}
   21158:	sub	sp, sp, #8
   2115c:	ldr	r0, [r3]
   21160:	bl	3f014 <__assert_fail@plt+0x2ca20>
   21164:	cmp	r0, #0
   21168:	beq	2118c <__assert_fail@plt+0xeb98>
   2116c:	ldr	r4, [pc, #168]	; 2121c <__assert_fail@plt+0xec28>
   21170:	ldrb	r3, [r4, #4]
   21174:	cmp	r3, #0
   21178:	beq	211a8 <__assert_fail@plt+0xebb4>
   2117c:	bl	12348 <__errno_location@plt>
   21180:	ldr	r3, [r0]
   21184:	cmp	r3, #32
   21188:	bne	211a8 <__assert_fail@plt+0xebb4>
   2118c:	ldr	r3, [pc, #140]	; 21220 <__assert_fail@plt+0xec2c>
   21190:	ldr	r0, [r3]
   21194:	bl	3f014 <__assert_fail@plt+0x2ca20>
   21198:	cmp	r0, #0
   2119c:	bne	211f0 <__assert_fail@plt+0xebfc>
   211a0:	add	sp, sp, #8
   211a4:	pop	{r4, r5, r6, pc}
   211a8:	mov	r2, #5
   211ac:	ldr	r1, [pc, #112]	; 21224 <__assert_fail@plt+0xec30>
   211b0:	mov	r0, #0
   211b4:	bl	120b4 <dcgettext@plt>
   211b8:	ldr	r4, [r4]
   211bc:	cmp	r4, #0
   211c0:	mov	r5, r0
   211c4:	beq	211fc <__assert_fail@plt+0xec08>
   211c8:	bl	12348 <__errno_location@plt>
   211cc:	ldr	r6, [r0]
   211d0:	mov	r0, r4
   211d4:	bl	2b31c <__assert_fail@plt+0x18d28>
   211d8:	mov	r1, r6
   211dc:	str	r5, [sp]
   211e0:	ldr	r2, [pc, #64]	; 21228 <__assert_fail@plt+0xec34>
   211e4:	mov	r3, r0
   211e8:	mov	r0, #0
   211ec:	bl	121ec <error@plt>
   211f0:	ldr	r3, [pc, #52]	; 2122c <__assert_fail@plt+0xec38>
   211f4:	ldr	r0, [r3]
   211f8:	bl	12018 <_exit@plt>
   211fc:	bl	12348 <__errno_location@plt>
   21200:	mov	r3, r5
   21204:	ldr	r2, [pc, #36]	; 21230 <__assert_fail@plt+0xec3c>
   21208:	ldr	r1, [r0]
   2120c:	mov	r0, r4
   21210:	bl	121ec <error@plt>
   21214:	b	211f0 <__assert_fail@plt+0xebfc>
   21218:	andeq	r7, r5, r4, asr r5
   2121c:	andeq	r7, r5, ip, ror #25
   21220:	andeq	r7, r5, r8, asr #10
   21224:	andeq	r4, r4, r0, asr r9
   21228:	andeq	r4, r4, ip, asr r9
   2122c:	strdeq	r7, [r5], -r0
   21230:	andeq	r4, r4, r0, ror #18
   21234:	push	{r4, r5, r6, r7, r8, lr}
   21238:	bl	12204 <opendir@plt>
   2123c:	subs	r4, r0, #0
   21240:	beq	21250 <__assert_fail@plt+0xec5c>
   21244:	bl	124ec <dirfd@plt>
   21248:	cmp	r0, #2
   2124c:	bls	21258 <__assert_fail@plt+0xec64>
   21250:	mov	r0, r4
   21254:	pop	{r4, r5, r6, r7, r8, pc}
   21258:	mov	r2, #3
   2125c:	ldr	r1, [pc, #92]	; 212c0 <__assert_fail@plt+0xeccc>
   21260:	bl	2d934 <__assert_fail@plt+0x1b340>
   21264:	subs	r8, r0, #0
   21268:	blt	212a0 <__assert_fail@plt+0xecac>
   2126c:	bl	124c8 <fdopendir@plt>
   21270:	mov	r6, r0
   21274:	bl	12348 <__errno_location@plt>
   21278:	cmp	r6, #0
   2127c:	mov	r5, r0
   21280:	ldr	r7, [r0]
   21284:	beq	212b4 <__assert_fail@plt+0xecc0>
   21288:	mov	r0, r4
   2128c:	mov	r4, r6
   21290:	bl	125c4 <closedir@plt>
   21294:	str	r7, [r5]
   21298:	mov	r0, r4
   2129c:	pop	{r4, r5, r6, r7, r8, pc}
   212a0:	bl	12348 <__errno_location@plt>
   212a4:	mov	r6, #0
   212a8:	mov	r5, r0
   212ac:	ldr	r7, [r0]
   212b0:	b	21288 <__assert_fail@plt+0xec94>
   212b4:	mov	r0, r8
   212b8:	bl	125ac <close@plt>
   212bc:	b	21288 <__assert_fail@plt+0xec94>
   212c0:	andeq	r0, r0, r6, lsl #8
   212c4:	push	{r4, r5, r6, lr}
   212c8:	mov	r5, r0
   212cc:	bl	3ef68 <__assert_fail@plt+0x2c974>
   212d0:	ldrb	r3, [r0]
   212d4:	cmp	r3, #0
   212d8:	bne	21308 <__assert_fail@plt+0xed14>
   212dc:	mov	r0, r5
   212e0:	bl	3efc4 <__assert_fail@plt+0x2c9d0>
   212e4:	mov	r4, r0
   212e8:	add	r0, r4, #1
   212ec:	bl	2c198 <__assert_fail@plt+0x19ba4>
   212f0:	mov	r2, r4
   212f4:	mov	r1, r5
   212f8:	bl	12024 <memcpy@plt>
   212fc:	mov	r2, #0
   21300:	strb	r2, [r0, r4]
   21304:	pop	{r4, r5, r6, pc}
   21308:	mov	r4, r0
   2130c:	bl	3efc4 <__assert_fail@plt+0x2c9d0>
   21310:	mov	r5, r4
   21314:	ldrb	r4, [r4, r0]
   21318:	cmp	r4, #47	; 0x2f
   2131c:	movne	r4, r0
   21320:	addeq	r4, r0, #1
   21324:	b	212e8 <__assert_fail@plt+0xecf4>
   21328:	push	{r4, r5, r6, lr}
   2132c:	mov	r5, r0
   21330:	ldrb	r4, [r0]
   21334:	bl	3ef68 <__assert_fail@plt+0x2c974>
   21338:	sub	r4, r4, #47	; 0x2f
   2133c:	clz	r4, r4
   21340:	lsr	r4, r4, #5
   21344:	sub	r0, r0, r5
   21348:	cmp	r0, r4
   2134c:	bls	21398 <__assert_fail@plt+0xeda4>
   21350:	sub	r3, r0, #1
   21354:	add	r2, r5, r3
   21358:	ldrb	r1, [r5, r3]
   2135c:	cmp	r1, #47	; 0x2f
   21360:	beq	2137c <__assert_fail@plt+0xed88>
   21364:	b	21398 <__assert_fail@plt+0xeda4>
   21368:	ldrb	r1, [r2, #-1]!
   2136c:	sub	r0, r3, #1
   21370:	cmp	r1, #47	; 0x2f
   21374:	bne	2138c <__assert_fail@plt+0xed98>
   21378:	mov	r3, r0
   2137c:	cmp	r4, r3
   21380:	bne	21368 <__assert_fail@plt+0xed74>
   21384:	mov	r0, r4
   21388:	pop	{r4, r5, r6, pc}
   2138c:	mov	r4, r3
   21390:	mov	r0, r4
   21394:	pop	{r4, r5, r6, pc}
   21398:	mov	r4, r0
   2139c:	b	21384 <__assert_fail@plt+0xed90>
   213a0:	push	{r4, r5, r6, lr}
   213a4:	mov	r6, r0
   213a8:	bl	21328 <__assert_fail@plt+0xed34>
   213ac:	add	r3, r0, #1
   213b0:	mov	r4, r0
   213b4:	cmp	r0, #0
   213b8:	movne	r0, r3
   213bc:	addeq	r0, r3, #1
   213c0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   213c4:	subs	r5, r0, #0
   213c8:	beq	213f0 <__assert_fail@plt+0xedfc>
   213cc:	mov	r2, r4
   213d0:	mov	r1, r6
   213d4:	bl	12024 <memcpy@plt>
   213d8:	cmp	r4, #0
   213dc:	moveq	r3, #46	; 0x2e
   213e0:	moveq	r4, #1
   213e4:	strbeq	r3, [r5]
   213e8:	mov	r3, #0
   213ec:	strb	r3, [r5, r4]
   213f0:	mov	r0, r5
   213f4:	pop	{r4, r5, r6, pc}
   213f8:	push	{r4, lr}
   213fc:	mov	r4, r0
   21400:	bl	3ef68 <__assert_fail@plt+0x2c974>
   21404:	ldrb	r3, [r0]
   21408:	cmp	r3, #0
   2140c:	movne	r4, r0
   21410:	mov	r0, r4
   21414:	bl	3efc4 <__assert_fail@plt+0x2c9d0>
   21418:	mov	r2, #0
   2141c:	ldrb	r3, [r4, r0]
   21420:	strb	r2, [r4, r0]
   21424:	subs	r0, r3, r2
   21428:	movne	r0, #1
   2142c:	pop	{r4, pc}
   21430:	push	{r1, r2, r3}
   21434:	push	{lr}		; (str lr, [sp, #-4]!)
   21438:	sub	sp, sp, #8
   2143c:	ldr	r1, [sp, #12]
   21440:	ands	r2, r1, #64	; 0x40
   21444:	addne	r3, sp, #16
   21448:	ldrne	r2, [sp, #16]
   2144c:	strne	r3, [sp, #4]
   21450:	bl	1221c <open64@plt>
   21454:	bl	2bcb8 <__assert_fail@plt+0x196c4>
   21458:	add	sp, sp, #8
   2145c:	pop	{lr}		; (ldr lr, [sp], #4)
   21460:	add	sp, sp, #12
   21464:	bx	lr
   21468:	and	r3, r0, #61440	; 0xf000
   2146c:	cmp	r3, #32768	; 0x8000
   21470:	moveq	r3, #45	; 0x2d
   21474:	beq	214c0 <__assert_fail@plt+0xeecc>
   21478:	cmp	r3, #16384	; 0x4000
   2147c:	moveq	r3, #100	; 0x64
   21480:	beq	214c0 <__assert_fail@plt+0xeecc>
   21484:	cmp	r3, #24576	; 0x6000
   21488:	moveq	r3, #98	; 0x62
   2148c:	beq	214c0 <__assert_fail@plt+0xeecc>
   21490:	cmp	r3, #8192	; 0x2000
   21494:	moveq	r3, #99	; 0x63
   21498:	beq	214c0 <__assert_fail@plt+0xeecc>
   2149c:	cmp	r3, #40960	; 0xa000
   214a0:	moveq	r3, #108	; 0x6c
   214a4:	beq	214c0 <__assert_fail@plt+0xeecc>
   214a8:	cmp	r3, #4096	; 0x1000
   214ac:	moveq	r3, #112	; 0x70
   214b0:	beq	214c0 <__assert_fail@plt+0xeecc>
   214b4:	cmp	r3, #49152	; 0xc000
   214b8:	moveq	r3, #115	; 0x73
   214bc:	movne	r3, #63	; 0x3f
   214c0:	tst	r0, #256	; 0x100
   214c4:	movne	ip, #114	; 0x72
   214c8:	moveq	ip, #45	; 0x2d
   214cc:	tst	r0, #128	; 0x80
   214d0:	movne	r2, #119	; 0x77
   214d4:	moveq	r2, #45	; 0x2d
   214d8:	tst	r0, #2048	; 0x800
   214dc:	strb	r3, [r1]
   214e0:	strb	ip, [r1, #1]
   214e4:	strb	r2, [r1, #2]
   214e8:	beq	21580 <__assert_fail@plt+0xef8c>
   214ec:	tst	r0, #64	; 0x40
   214f0:	movne	ip, #115	; 0x73
   214f4:	moveq	ip, #83	; 0x53
   214f8:	tst	r0, #32
   214fc:	movne	r2, #114	; 0x72
   21500:	moveq	r2, #45	; 0x2d
   21504:	tst	r0, #16
   21508:	movne	r3, #119	; 0x77
   2150c:	moveq	r3, #45	; 0x2d
   21510:	tst	r0, #1024	; 0x400
   21514:	strb	ip, [r1, #3]
   21518:	strb	r2, [r1, #4]
   2151c:	strb	r3, [r1, #5]
   21520:	beq	215a0 <__assert_fail@plt+0xefac>
   21524:	tst	r0, #8
   21528:	movne	ip, #115	; 0x73
   2152c:	moveq	ip, #83	; 0x53
   21530:	tst	r0, #4
   21534:	movne	r2, #114	; 0x72
   21538:	moveq	r2, #45	; 0x2d
   2153c:	tst	r0, #2
   21540:	movne	r3, #119	; 0x77
   21544:	moveq	r3, #45	; 0x2d
   21548:	tst	r0, #512	; 0x200
   2154c:	strb	ip, [r1, #6]
   21550:	strb	r2, [r1, #7]
   21554:	strb	r3, [r1, #8]
   21558:	beq	21590 <__assert_fail@plt+0xef9c>
   2155c:	tst	r0, #1
   21560:	movne	r0, #116	; 0x74
   21564:	moveq	r0, #84	; 0x54
   21568:	mov	r2, #32
   2156c:	mov	r3, #0
   21570:	strb	r0, [r1, #9]
   21574:	strb	r2, [r1, #10]
   21578:	strb	r3, [r1, #11]
   2157c:	bx	lr
   21580:	tst	r0, #64	; 0x40
   21584:	movne	ip, #120	; 0x78
   21588:	moveq	ip, #45	; 0x2d
   2158c:	b	214f8 <__assert_fail@plt+0xef04>
   21590:	tst	r0, #1
   21594:	movne	r0, #120	; 0x78
   21598:	moveq	r0, #45	; 0x2d
   2159c:	b	21568 <__assert_fail@plt+0xef74>
   215a0:	tst	r0, #8
   215a4:	movne	ip, #120	; 0x78
   215a8:	moveq	ip, #45	; 0x2d
   215ac:	b	21530 <__assert_fail@plt+0xef3c>
   215b0:	ldr	r0, [r0, #16]
   215b4:	b	21468 <__assert_fail@plt+0xee74>
   215b8:	push	{r4, r5, r6, lr}
   215bc:	mov	r5, r1
   215c0:	bl	12504 <fopen64@plt>
   215c4:	subs	r4, r0, #0
   215c8:	beq	215d8 <__assert_fail@plt+0xefe4>
   215cc:	bl	123c0 <fileno@plt>
   215d0:	cmp	r0, #2
   215d4:	bls	215e0 <__assert_fail@plt+0xefec>
   215d8:	mov	r0, r4
   215dc:	pop	{r4, r5, r6, pc}
   215e0:	bl	2bcac <__assert_fail@plt+0x196b8>
   215e4:	subs	r6, r0, #0
   215e8:	blt	21630 <__assert_fail@plt+0xf03c>
   215ec:	mov	r0, r4
   215f0:	bl	123fc <fclose@plt>
   215f4:	cmp	r0, #0
   215f8:	bne	21610 <__assert_fail@plt+0xf01c>
   215fc:	mov	r1, r5
   21600:	mov	r0, r6
   21604:	bl	11eb0 <fdopen@plt>
   21608:	subs	r4, r0, #0
   2160c:	bne	215d8 <__assert_fail@plt+0xefe4>
   21610:	bl	12348 <__errno_location@plt>
   21614:	mov	r4, #0
   21618:	mov	r5, r0
   2161c:	mov	r0, r6
   21620:	ldr	r6, [r5]
   21624:	bl	125ac <close@plt>
   21628:	str	r6, [r5]
   2162c:	b	215d8 <__assert_fail@plt+0xefe4>
   21630:	bl	12348 <__errno_location@plt>
   21634:	mov	r5, r0
   21638:	mov	r0, r4
   2163c:	ldr	r6, [r5]
   21640:	mov	r4, #0
   21644:	bl	123fc <fclose@plt>
   21648:	str	r6, [r5]
   2164c:	b	215d8 <__assert_fail@plt+0xefe4>
   21650:	cmp	r0, #10
   21654:	movcc	r0, #10
   21658:	push	{r4, r5, r6, r7, r8, lr}
   2165c:	orr	r7, r0, #1
   21660:	cmn	r7, #1
   21664:	ldrne	r8, [pc, #132]	; 216f0 <__assert_fail@plt+0xf0fc>
   21668:	beq	216e0 <__assert_fail@plt+0xf0ec>
   2166c:	cmp	r7, #9
   21670:	bls	216e8 <__assert_fail@plt+0xf0f4>
   21674:	umull	r2, r3, r8, r7
   21678:	lsr	r3, r3, #1
   2167c:	add	r3, r3, r3, lsl #1
   21680:	cmp	r7, r3
   21684:	beq	216d4 <__assert_fail@plt+0xf0e0>
   21688:	mov	r6, #16
   2168c:	mov	r5, #9
   21690:	mov	r4, #3
   21694:	b	216a8 <__assert_fail@plt+0xf0b4>
   21698:	bl	3f994 <__assert_fail@plt+0x2d3a0>
   2169c:	add	r6, r6, #8
   216a0:	cmp	r1, #0
   216a4:	beq	216d4 <__assert_fail@plt+0xf0e0>
   216a8:	add	r5, r5, r6
   216ac:	add	r4, r4, #2
   216b0:	cmp	r5, r7
   216b4:	mov	r0, r7
   216b8:	mov	r1, r4
   216bc:	bcc	21698 <__assert_fail@plt+0xf0a4>
   216c0:	mov	r1, r4
   216c4:	mov	r0, r7
   216c8:	bl	3f994 <__assert_fail@plt+0x2d3a0>
   216cc:	cmp	r1, #0
   216d0:	bne	216e0 <__assert_fail@plt+0xf0ec>
   216d4:	add	r7, r7, #2
   216d8:	cmn	r7, #1
   216dc:	bne	2166c <__assert_fail@plt+0xf078>
   216e0:	mov	r0, r7
   216e4:	pop	{r4, r5, r6, r7, r8, pc}
   216e8:	mov	r4, #3
   216ec:	b	216c0 <__assert_fail@plt+0xf0cc>
   216f0:	bge	feacc1a4 <stdout@@GLIBC_2.4+0xfea74c50>
   216f4:	push	{r4, lr}
   216f8:	ror	r0, r0, #3
   216fc:	bl	3f994 <__assert_fail@plt+0x2d3a0>
   21700:	mov	r0, r1
   21704:	pop	{r4, pc}
   21708:	sub	r0, r1, r0
   2170c:	clz	r0, r0
   21710:	lsr	r0, r0, #5
   21714:	bx	lr
   21718:	push	{r4, lr}
   2171c:	mov	r4, r0
   21720:	mov	r0, r1
   21724:	ldr	r3, [r4, #24]
   21728:	ldr	r1, [r4, #8]
   2172c:	blx	r3
   21730:	ldr	r3, [r4, #8]
   21734:	cmp	r0, r3
   21738:	bcs	21748 <__assert_fail@plt+0xf154>
   2173c:	ldr	r3, [r4]
   21740:	add	r0, r3, r0, lsl #3
   21744:	pop	{r4, pc}
   21748:	bl	125a0 <abort@plt>
   2174c:	push	{r4, r5, r6, r7, r8, lr}
   21750:	mov	r7, r2
   21754:	mov	r8, r3
   21758:	mov	r6, r0
   2175c:	mov	r5, r1
   21760:	bl	21718 <__assert_fail@plt+0xf124>
   21764:	str	r0, [r7]
   21768:	ldr	r3, [r0]
   2176c:	cmp	r3, #0
   21770:	beq	21808 <__assert_fail@plt+0xf214>
   21774:	cmp	r5, r3
   21778:	mov	r4, r0
   2177c:	beq	2179c <__assert_fail@plt+0xf1a8>
   21780:	mov	r1, r3
   21784:	mov	r0, r5
   21788:	ldr	r3, [r6, #28]
   2178c:	blx	r3
   21790:	cmp	r0, #0
   21794:	beq	217fc <__assert_fail@plt+0xf208>
   21798:	ldr	r3, [r4]
   2179c:	cmp	r8, #0
   217a0:	beq	217cc <__assert_fail@plt+0xf1d8>
   217a4:	ldr	r2, [r4, #4]
   217a8:	cmp	r2, #0
   217ac:	movne	ip, #0
   217b0:	ldmne	r2, {r0, r1}
   217b4:	streq	r2, [r4]
   217b8:	stmne	r4, {r0, r1}
   217bc:	strne	ip, [r2]
   217c0:	ldrne	r1, [r6, #36]	; 0x24
   217c4:	strne	r1, [r2, #4]
   217c8:	strne	r2, [r6, #36]	; 0x24
   217cc:	mov	r0, r3
   217d0:	pop	{r4, r5, r6, r7, r8, pc}
   217d4:	ldr	r3, [r2]
   217d8:	cmp	r5, r3
   217dc:	beq	2181c <__assert_fail@plt+0xf228>
   217e0:	mov	r1, r3
   217e4:	mov	r0, r5
   217e8:	ldr	r3, [r6, #28]
   217ec:	blx	r3
   217f0:	cmp	r0, #0
   217f4:	bne	21814 <__assert_fail@plt+0xf220>
   217f8:	ldr	r4, [r4, #4]
   217fc:	ldr	r2, [r4, #4]
   21800:	cmp	r2, #0
   21804:	bne	217d4 <__assert_fail@plt+0xf1e0>
   21808:	mov	r3, #0
   2180c:	mov	r0, r3
   21810:	pop	{r4, r5, r6, r7, r8, pc}
   21814:	ldr	r2, [r4, #4]
   21818:	ldr	r3, [r2]
   2181c:	cmp	r8, #0
   21820:	beq	217cc <__assert_fail@plt+0xf1d8>
   21824:	ldr	r0, [r2, #4]
   21828:	mov	r1, #0
   2182c:	str	r0, [r4, #4]
   21830:	str	r1, [r2]
   21834:	ldr	r1, [r6, #36]	; 0x24
   21838:	mov	r0, r3
   2183c:	str	r1, [r2, #4]
   21840:	str	r2, [r6, #36]	; 0x24
   21844:	pop	{r4, r5, r6, r7, r8, pc}
   21848:	ldr	r2, [pc, #164]	; 218f4 <__assert_fail@plt+0xf300>
   2184c:	ldr	r3, [r0]
   21850:	cmp	r3, r2
   21854:	beq	218dc <__assert_fail@plt+0xf2e8>
   21858:	vldr	s15, [r3, #8]
   2185c:	vldr	s14, [pc, #128]	; 218e4 <__assert_fail@plt+0xf2f0>
   21860:	vcmpe.f32	s15, s14
   21864:	vmrs	APSR_nzcv, fpscr
   21868:	ble	218d0 <__assert_fail@plt+0xf2dc>
   2186c:	vldr	s13, [pc, #116]	; 218e8 <__assert_fail@plt+0xf2f4>
   21870:	vcmpe.f32	s15, s13
   21874:	vmrs	APSR_nzcv, fpscr
   21878:	bpl	218d0 <__assert_fail@plt+0xf2dc>
   2187c:	vldr	s13, [pc, #104]	; 218ec <__assert_fail@plt+0xf2f8>
   21880:	vldr	s12, [r3, #12]
   21884:	vcmpe.f32	s12, s13
   21888:	vmrs	APSR_nzcv, fpscr
   2188c:	ble	218d0 <__assert_fail@plt+0xf2dc>
   21890:	vldr	s13, [r3]
   21894:	vcmpe.f32	s13, #0.0
   21898:	vmrs	APSR_nzcv, fpscr
   2189c:	blt	218d0 <__assert_fail@plt+0xf2dc>
   218a0:	vadd.f32	s14, s13, s14
   218a4:	vldr	s13, [r3, #4]
   218a8:	vcmpe.f32	s14, s13
   218ac:	vmrs	APSR_nzcv, fpscr
   218b0:	bpl	218d0 <__assert_fail@plt+0xf2dc>
   218b4:	vldr	s12, [pc, #52]	; 218f0 <__assert_fail@plt+0xf2fc>
   218b8:	vcmpe.f32	s13, s12
   218bc:	vmrs	APSR_nzcv, fpscr
   218c0:	bhi	218d0 <__assert_fail@plt+0xf2dc>
   218c4:	vcmpe.f32	s15, s14
   218c8:	vmrs	APSR_nzcv, fpscr
   218cc:	bgt	218dc <__assert_fail@plt+0xf2e8>
   218d0:	str	r2, [r0]
   218d4:	mov	r0, #0
   218d8:	bx	lr
   218dc:	mov	r0, #1
   218e0:	bx	lr
   218e4:	stclcc	12, cr12, [ip, #820]	; 0x334
   218e8:	svccc	0x00666666
   218ec:	svccc	0x008ccccd
   218f0:	svccc	0x00800000
   218f4:	andeq	r4, r4, r4, ror #18
   218f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218fc:	ldm	r1, {r6, ip}
   21900:	cmp	r6, ip
   21904:	bcs	219c0 <__assert_fail@plt+0xf3cc>
   21908:	mov	sl, r2
   2190c:	mov	r5, r0
   21910:	mov	r8, r1
   21914:	add	r6, r6, #8
   21918:	mov	r9, #0
   2191c:	ldr	fp, [r6, #-8]
   21920:	mov	r7, r6
   21924:	cmp	fp, #0
   21928:	beq	219b4 <__assert_fail@plt+0xf3c0>
   2192c:	ldr	r4, [r6, #-4]
   21930:	cmp	r4, #0
   21934:	bne	21954 <__assert_fail@plt+0xf360>
   21938:	b	219a4 <__assert_fail@plt+0xf3b0>
   2193c:	ldr	r3, [r0, #4]
   21940:	cmp	r2, #0
   21944:	str	r3, [r4, #4]
   21948:	str	r4, [r0, #4]
   2194c:	mov	r4, r2
   21950:	beq	219a0 <__assert_fail@plt+0xf3ac>
   21954:	ldr	fp, [r4]
   21958:	mov	r0, r5
   2195c:	mov	r1, fp
   21960:	bl	21718 <__assert_fail@plt+0xf124>
   21964:	ldr	r2, [r4, #4]
   21968:	ldr	r1, [r0]
   2196c:	cmp	r1, #0
   21970:	bne	2193c <__assert_fail@plt+0xf348>
   21974:	ldr	ip, [r5, #12]
   21978:	str	fp, [r0]
   2197c:	add	r3, ip, #1
   21980:	str	r3, [r5, #12]
   21984:	str	r1, [r4]
   21988:	ldr	r3, [r5, #36]	; 0x24
   2198c:	cmp	r2, #0
   21990:	str	r3, [r4, #4]
   21994:	str	r4, [r5, #36]	; 0x24
   21998:	mov	r4, r2
   2199c:	bne	21954 <__assert_fail@plt+0xf360>
   219a0:	ldr	fp, [r6, #-8]
   219a4:	cmp	sl, #0
   219a8:	str	r9, [r6, #-4]
   219ac:	beq	219c8 <__assert_fail@plt+0xf3d4>
   219b0:	ldr	ip, [r8, #4]
   219b4:	cmp	ip, r7
   219b8:	add	r6, r6, #8
   219bc:	bhi	2191c <__assert_fail@plt+0xf328>
   219c0:	mov	r0, #1
   219c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219c8:	mov	r1, fp
   219cc:	mov	r0, r5
   219d0:	bl	21718 <__assert_fail@plt+0xf124>
   219d4:	ldr	r2, [r0]
   219d8:	mov	r4, r0
   219dc:	cmp	r2, #0
   219e0:	beq	21a2c <__assert_fail@plt+0xf438>
   219e4:	ldr	r0, [r5, #36]	; 0x24
   219e8:	cmp	r0, #0
   219ec:	beq	21a40 <__assert_fail@plt+0xf44c>
   219f0:	ldr	r2, [r0, #4]
   219f4:	str	r2, [r5, #36]	; 0x24
   219f8:	ldr	r2, [r4, #4]
   219fc:	str	fp, [r0]
   21a00:	str	r2, [r0, #4]
   21a04:	str	r0, [r4, #4]
   21a08:	str	r9, [r6, #-8]
   21a0c:	ldr	r3, [r8, #12]
   21a10:	ldr	ip, [r8, #4]
   21a14:	sub	r3, r3, #1
   21a18:	cmp	ip, r7
   21a1c:	str	r3, [r8, #12]
   21a20:	add	r6, r6, #8
   21a24:	bhi	2191c <__assert_fail@plt+0xf328>
   21a28:	b	219c0 <__assert_fail@plt+0xf3cc>
   21a2c:	ldr	r2, [r5, #12]
   21a30:	str	fp, [r0]
   21a34:	add	r3, r2, #1
   21a38:	str	r3, [r5, #12]
   21a3c:	b	21a08 <__assert_fail@plt+0xf414>
   21a40:	mov	r0, #8
   21a44:	bl	2fe38 <__assert_fail@plt+0x1d844>
   21a48:	cmp	r0, #0
   21a4c:	bne	219f8 <__assert_fail@plt+0xf404>
   21a50:	mov	r0, sl
   21a54:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a58:	ldr	r0, [r0, #8]
   21a5c:	bx	lr
   21a60:	ldr	r0, [r0, #12]
   21a64:	bx	lr
   21a68:	ldr	r0, [r0, #16]
   21a6c:	bx	lr
   21a70:	ldm	r0, {r1, ip}
   21a74:	mov	r0, #0
   21a78:	cmp	r1, ip
   21a7c:	bcs	21ac4 <__assert_fail@plt+0xf4d0>
   21a80:	ldr	r3, [r1]
   21a84:	cmp	r3, #0
   21a88:	beq	21ab4 <__assert_fail@plt+0xf4c0>
   21a8c:	ldr	r3, [r1, #4]
   21a90:	mov	r2, #1
   21a94:	cmp	r3, #0
   21a98:	beq	21aac <__assert_fail@plt+0xf4b8>
   21a9c:	ldr	r3, [r3, #4]
   21aa0:	add	r2, r2, #1
   21aa4:	cmp	r3, #0
   21aa8:	bne	21a9c <__assert_fail@plt+0xf4a8>
   21aac:	cmp	r0, r2
   21ab0:	movcc	r0, r2
   21ab4:	add	r1, r1, #8
   21ab8:	cmp	r1, ip
   21abc:	bcc	21a80 <__assert_fail@plt+0xf48c>
   21ac0:	bx	lr
   21ac4:	bx	lr
   21ac8:	push	{lr}		; (str lr, [sp, #-4]!)
   21acc:	mov	r2, #0
   21ad0:	ldm	r0, {r1, lr}
   21ad4:	mov	ip, r2
   21ad8:	cmp	r1, lr
   21adc:	bcs	21b1c <__assert_fail@plt+0xf528>
   21ae0:	ldr	r3, [r1]
   21ae4:	cmp	r3, #0
   21ae8:	beq	21b10 <__assert_fail@plt+0xf51c>
   21aec:	ldr	r3, [r1, #4]
   21af0:	add	ip, ip, #1
   21af4:	cmp	r3, #0
   21af8:	add	r2, r2, #1
   21afc:	beq	21b10 <__assert_fail@plt+0xf51c>
   21b00:	ldr	r3, [r3, #4]
   21b04:	add	r2, r2, #1
   21b08:	cmp	r3, #0
   21b0c:	bne	21b00 <__assert_fail@plt+0xf50c>
   21b10:	add	r1, r1, #8
   21b14:	cmp	r1, lr
   21b18:	bcc	21ae0 <__assert_fail@plt+0xf4ec>
   21b1c:	ldr	r3, [r0, #12]
   21b20:	cmp	r3, ip
   21b24:	ldreq	r0, [r0, #16]
   21b28:	subeq	r0, r0, r2
   21b2c:	clzeq	r0, r0
   21b30:	lsreq	r0, r0, #5
   21b34:	movne	r0, #0
   21b38:	pop	{pc}		; (ldr pc, [sp], #4)
   21b3c:	push	{r4, r5, r6, r7, lr}
   21b40:	mov	r5, r1
   21b44:	ldm	r0, {ip, lr}
   21b48:	sub	sp, sp, #12
   21b4c:	ldr	r2, [r0, #16]
   21b50:	cmp	ip, lr
   21b54:	mov	r4, #0
   21b58:	ldr	r6, [r0, #8]
   21b5c:	ldr	r7, [r0, #12]
   21b60:	bcs	21ba4 <__assert_fail@plt+0xf5b0>
   21b64:	ldr	r3, [ip]
   21b68:	cmp	r3, #0
   21b6c:	beq	21b98 <__assert_fail@plt+0xf5a4>
   21b70:	ldr	r3, [ip, #4]
   21b74:	mov	r1, #1
   21b78:	cmp	r3, #0
   21b7c:	beq	21b90 <__assert_fail@plt+0xf59c>
   21b80:	ldr	r3, [r3, #4]
   21b84:	add	r1, r1, #1
   21b88:	cmp	r3, #0
   21b8c:	bne	21b80 <__assert_fail@plt+0xf58c>
   21b90:	cmp	r4, r1
   21b94:	movcc	r4, r1
   21b98:	add	ip, ip, #8
   21b9c:	cmp	ip, lr
   21ba0:	bcc	21b64 <__assert_fail@plt+0xf570>
   21ba4:	ldr	r1, [pc, #100]	; 21c10 <__assert_fail@plt+0xf61c>
   21ba8:	mov	r0, r5
   21bac:	bl	1233c <fprintf@plt>
   21bb0:	mov	r2, r6
   21bb4:	ldr	r1, [pc, #88]	; 21c14 <__assert_fail@plt+0xf620>
   21bb8:	mov	r0, r5
   21bbc:	bl	1233c <fprintf@plt>
   21bc0:	vmov	s15, r7
   21bc4:	vldr	d5, [pc, #60]	; 21c08 <__assert_fail@plt+0xf614>
   21bc8:	mov	r2, r7
   21bcc:	ldr	r1, [pc, #68]	; 21c18 <__assert_fail@plt+0xf624>
   21bd0:	vcvt.f64.u32	d6, s15
   21bd4:	vmov	s15, r6
   21bd8:	mov	r0, r5
   21bdc:	vcvt.f64.u32	d7, s15
   21be0:	vmul.f64	d6, d6, d5
   21be4:	vdiv.f64	d5, d6, d7
   21be8:	vstr	d5, [sp]
   21bec:	bl	1233c <fprintf@plt>
   21bf0:	mov	r2, r4
   21bf4:	mov	r0, r5
   21bf8:	ldr	r1, [pc, #28]	; 21c1c <__assert_fail@plt+0xf628>
   21bfc:	add	sp, sp, #12
   21c00:	pop	{r4, r5, r6, r7, lr}
   21c04:	b	1233c <fprintf@plt>
   21c08:	andeq	r0, r0, r0
   21c0c:	subsmi	r0, r9, r0
   21c10:	andeq	r4, r4, r8, ror r9
   21c14:	muleq	r4, r0, r9
   21c18:	andeq	r4, r4, r8, lsr #19
   21c1c:	andeq	r4, r4, ip, asr #19
   21c20:	push	{r4, r5, r6, lr}
   21c24:	mov	r6, r0
   21c28:	mov	r5, r1
   21c2c:	bl	21718 <__assert_fail@plt+0xf124>
   21c30:	ldr	r3, [r0]
   21c34:	cmp	r3, #0
   21c38:	movne	r4, r0
   21c3c:	bne	21c48 <__assert_fail@plt+0xf654>
   21c40:	b	21c74 <__assert_fail@plt+0xf680>
   21c44:	ldr	r3, [r4]
   21c48:	cmp	r5, r3
   21c4c:	mov	r1, r3
   21c50:	mov	r0, r5
   21c54:	beq	21c7c <__assert_fail@plt+0xf688>
   21c58:	ldr	r3, [r6, #28]
   21c5c:	blx	r3
   21c60:	cmp	r0, #0
   21c64:	bne	21c84 <__assert_fail@plt+0xf690>
   21c68:	ldr	r4, [r4, #4]
   21c6c:	cmp	r4, #0
   21c70:	bne	21c44 <__assert_fail@plt+0xf650>
   21c74:	mov	r0, #0
   21c78:	pop	{r4, r5, r6, pc}
   21c7c:	mov	r0, r5
   21c80:	pop	{r4, r5, r6, pc}
   21c84:	ldr	r0, [r4]
   21c88:	pop	{r4, r5, r6, pc}
   21c8c:	ldr	r3, [r0, #16]
   21c90:	cmp	r3, #0
   21c94:	beq	21cc8 <__assert_fail@plt+0xf6d4>
   21c98:	ldr	r3, [r0]
   21c9c:	ldr	r2, [r0, #4]
   21ca0:	cmp	r3, r2
   21ca4:	bcc	21cb8 <__assert_fail@plt+0xf6c4>
   21ca8:	b	21cd0 <__assert_fail@plt+0xf6dc>
   21cac:	add	r3, r3, #8
   21cb0:	cmp	r3, r2
   21cb4:	bcs	21cd0 <__assert_fail@plt+0xf6dc>
   21cb8:	ldr	r0, [r3]
   21cbc:	cmp	r0, #0
   21cc0:	beq	21cac <__assert_fail@plt+0xf6b8>
   21cc4:	bx	lr
   21cc8:	mov	r0, r3
   21ccc:	bx	lr
   21cd0:	push	{r4, lr}
   21cd4:	bl	125a0 <abort@plt>
   21cd8:	push	{r4, r5, r6, lr}
   21cdc:	mov	r5, r0
   21ce0:	mov	r4, r1
   21ce4:	bl	21718 <__assert_fail@plt+0xf124>
   21ce8:	mov	r2, r0
   21cec:	mov	r3, r0
   21cf0:	b	21cfc <__assert_fail@plt+0xf708>
   21cf4:	cmp	r3, #0
   21cf8:	beq	21d10 <__assert_fail@plt+0xf71c>
   21cfc:	ldm	r3, {r1, r3}
   21d00:	cmp	r4, r1
   21d04:	bne	21cf4 <__assert_fail@plt+0xf700>
   21d08:	cmp	r3, #0
   21d0c:	bne	21d38 <__assert_fail@plt+0xf744>
   21d10:	ldr	r3, [r5, #4]
   21d14:	b	21d24 <__assert_fail@plt+0xf730>
   21d18:	ldr	r0, [r2]
   21d1c:	cmp	r0, #0
   21d20:	popne	{r4, r5, r6, pc}
   21d24:	add	r2, r2, #8
   21d28:	cmp	r2, r3
   21d2c:	bcc	21d18 <__assert_fail@plt+0xf724>
   21d30:	mov	r0, #0
   21d34:	pop	{r4, r5, r6, pc}
   21d38:	ldr	r0, [r3]
   21d3c:	pop	{r4, r5, r6, pc}
   21d40:	push	{r4, r5, r6, lr}
   21d44:	ldm	r0, {r5, lr}
   21d48:	cmp	r5, lr
   21d4c:	bcs	21dd0 <__assert_fail@plt+0xf7dc>
   21d50:	add	r5, r5, #8
   21d54:	mov	ip, #0
   21d58:	ldr	r3, [r5, #-8]
   21d5c:	mov	r6, r5
   21d60:	cmp	r3, #0
   21d64:	beq	21db0 <__assert_fail@plt+0xf7bc>
   21d68:	cmp	r2, ip
   21d6c:	bls	21dbc <__assert_fail@plt+0xf7c8>
   21d70:	str	r3, [r1, ip, lsl #2]
   21d74:	ldr	r3, [r5, #-4]
   21d78:	add	r4, ip, #1
   21d7c:	cmp	r3, #0
   21d80:	add	lr, r1, ip, lsl #2
   21d84:	beq	21dc4 <__assert_fail@plt+0xf7d0>
   21d88:	mov	ip, r4
   21d8c:	cmp	r2, ip
   21d90:	beq	21dbc <__assert_fail@plt+0xf7c8>
   21d94:	ldr	r4, [r3]
   21d98:	add	ip, ip, #1
   21d9c:	str	r4, [lr, #4]!
   21da0:	ldr	r3, [r3, #4]
   21da4:	cmp	r3, #0
   21da8:	bne	21d8c <__assert_fail@plt+0xf798>
   21dac:	ldr	lr, [r0, #4]
   21db0:	cmp	lr, r6
   21db4:	add	r5, r5, #8
   21db8:	bhi	21d58 <__assert_fail@plt+0xf764>
   21dbc:	mov	r0, ip
   21dc0:	pop	{r4, r5, r6, pc}
   21dc4:	ldr	lr, [r0, #4]
   21dc8:	mov	ip, r4
   21dcc:	b	21db0 <__assert_fail@plt+0xf7bc>
   21dd0:	mov	ip, #0
   21dd4:	b	21dbc <__assert_fail@plt+0xf7c8>
   21dd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21ddc:	ldr	r3, [r0, #4]
   21de0:	ldr	r8, [r0]
   21de4:	cmp	r8, r3
   21de8:	bcs	21e4c <__assert_fail@plt+0xf858>
   21dec:	mov	r7, r2
   21df0:	mov	r6, r1
   21df4:	mov	r9, r0
   21df8:	mov	r5, #0
   21dfc:	ldr	r0, [r8]
   21e00:	cmp	r0, #0
   21e04:	beq	21e38 <__assert_fail@plt+0xf844>
   21e08:	mov	r4, r8
   21e0c:	b	21e14 <__assert_fail@plt+0xf820>
   21e10:	ldr	r0, [r4]
   21e14:	mov	r1, r7
   21e18:	blx	r6
   21e1c:	cmp	r0, #0
   21e20:	beq	21e44 <__assert_fail@plt+0xf850>
   21e24:	ldr	r4, [r4, #4]
   21e28:	add	r5, r5, #1
   21e2c:	cmp	r4, #0
   21e30:	bne	21e10 <__assert_fail@plt+0xf81c>
   21e34:	ldr	r3, [r9, #4]
   21e38:	add	r8, r8, #8
   21e3c:	cmp	r3, r8
   21e40:	bhi	21dfc <__assert_fail@plt+0xf808>
   21e44:	mov	r0, r5
   21e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21e4c:	mov	r5, #0
   21e50:	b	21e44 <__assert_fail@plt+0xf850>
   21e54:	push	{r4, r5, r6, lr}
   21e58:	mov	r4, r0
   21e5c:	ldrb	r0, [r0]
   21e60:	cmp	r0, #0
   21e64:	beq	21e94 <__assert_fail@plt+0xf8a0>
   21e68:	mov	r5, r1
   21e6c:	mov	r1, #0
   21e70:	rsb	r1, r1, r1, lsl #5
   21e74:	add	r0, r1, r0
   21e78:	mov	r1, r5
   21e7c:	bl	3f994 <__assert_fail@plt+0x2d3a0>
   21e80:	ldrb	r0, [r4, #1]!
   21e84:	cmp	r0, #0
   21e88:	bne	21e70 <__assert_fail@plt+0xf87c>
   21e8c:	mov	r0, r1
   21e90:	pop	{r4, r5, r6, pc}
   21e94:	mov	r1, r0
   21e98:	b	21e8c <__assert_fail@plt+0xf898>
   21e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   21ea0:	mov	ip, r0
   21ea4:	ldr	lr, [pc, #16]	; 21ebc <__assert_fail@plt+0xf8c8>
   21ea8:	ldm	lr!, {r0, r1, r2, r3}
   21eac:	ldr	lr, [lr]
   21eb0:	stmia	ip!, {r0, r1, r2, r3}
   21eb4:	str	lr, [ip]
   21eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   21ebc:	andeq	r4, r4, r4, ror #18
   21ec0:	push	{r4, r5, r6, r7, lr}
   21ec4:	sub	sp, sp, #12
   21ec8:	cmp	r2, #0
   21ecc:	str	r0, [sp, #4]
   21ed0:	ldr	r6, [pc, #304]	; 22008 <__assert_fail@plt+0xfa14>
   21ed4:	mov	r0, #40	; 0x28
   21ed8:	movne	r6, r2
   21edc:	cmp	r3, #0
   21ee0:	ldr	r7, [pc, #292]	; 2200c <__assert_fail@plt+0xfa18>
   21ee4:	mov	r5, r1
   21ee8:	movne	r7, r3
   21eec:	bl	2fe38 <__assert_fail@plt+0x1d844>
   21ef0:	subs	r4, r0, #0
   21ef4:	beq	21f8c <__assert_fail@plt+0xf998>
   21ef8:	cmp	r5, #0
   21efc:	beq	21fe0 <__assert_fail@plt+0xf9ec>
   21f00:	mov	r0, r4
   21f04:	str	r5, [r0, #20]!
   21f08:	bl	21848 <__assert_fail@plt+0xf254>
   21f0c:	cmp	r0, #0
   21f10:	beq	21fc8 <__assert_fail@plt+0xf9d4>
   21f14:	ldrb	r3, [r5, #16]
   21f18:	cmp	r3, #0
   21f1c:	beq	21f98 <__assert_fail@plt+0xf9a4>
   21f20:	ldr	r0, [sp, #4]
   21f24:	bl	21650 <__assert_fail@plt+0xf05c>
   21f28:	lsrs	r2, r0, #30
   21f2c:	movne	r5, #1
   21f30:	moveq	r5, #0
   21f34:	tst	r0, #536870912	; 0x20000000
   21f38:	bne	21fc0 <__assert_fail@plt+0xf9cc>
   21f3c:	cmp	r5, #0
   21f40:	bne	21fc0 <__assert_fail@plt+0xf9cc>
   21f44:	cmp	r0, #0
   21f48:	str	r0, [r4, #8]
   21f4c:	beq	21fc8 <__assert_fail@plt+0xf9d4>
   21f50:	mov	r1, #8
   21f54:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   21f58:	cmp	r0, #0
   21f5c:	str	r0, [r4]
   21f60:	beq	21fc8 <__assert_fail@plt+0xf9d4>
   21f64:	ldr	r3, [r4, #8]
   21f68:	str	r5, [r4, #12]
   21f6c:	str	r5, [r4, #16]
   21f70:	add	r0, r0, r3, lsl #3
   21f74:	ldr	r3, [sp, #32]
   21f78:	str	r6, [r4, #24]
   21f7c:	str	r7, [r4, #28]
   21f80:	str	r3, [r4, #32]
   21f84:	str	r5, [r4, #36]	; 0x24
   21f88:	str	r0, [r4, #4]
   21f8c:	mov	r0, r4
   21f90:	add	sp, sp, #12
   21f94:	pop	{r4, r5, r6, r7, pc}
   21f98:	vldr	s12, [r5, #8]
   21f9c:	vldr	s15, [sp, #4]
   21fa0:	vldr	s14, [pc, #88]	; 22000 <__assert_fail@plt+0xfa0c>
   21fa4:	vcvt.f32.u32	s13, s15
   21fa8:	vdiv.f32	s15, s13, s12
   21fac:	vcmpe.f32	s15, s14
   21fb0:	vmrs	APSR_nzcv, fpscr
   21fb4:	vcvtlt.u32.f32	s15, s15
   21fb8:	vstrlt	s15, [sp, #4]
   21fbc:	blt	21f20 <__assert_fail@plt+0xf92c>
   21fc0:	mov	r3, #0
   21fc4:	str	r3, [r4, #8]
   21fc8:	mov	r0, r4
   21fcc:	bl	2db68 <__assert_fail@plt+0x1b574>
   21fd0:	mov	r4, #0
   21fd4:	mov	r0, r4
   21fd8:	add	sp, sp, #12
   21fdc:	pop	{r4, r5, r6, r7, pc}
   21fe0:	ldr	r3, [pc, #40]	; 22010 <__assert_fail@plt+0xfa1c>
   21fe4:	mov	r0, r4
   21fe8:	str	r3, [r0, #20]!
   21fec:	bl	21848 <__assert_fail@plt+0xf254>
   21ff0:	cmp	r0, #0
   21ff4:	vldrne	s12, [pc, #8]	; 22004 <__assert_fail@plt+0xfa10>
   21ff8:	bne	21f9c <__assert_fail@plt+0xf9a8>
   21ffc:	b	21fc8 <__assert_fail@plt+0xf9d4>
   22000:	svcmi	0x00800000
   22004:	svccc	0x004ccccd
   22008:	strdeq	r1, [r2], -r4
   2200c:	andeq	r1, r2, r8, lsl #14
   22010:	andeq	r4, r4, r4, ror #18
   22014:	push	{r4, r5, r6, r7, r8, lr}
   22018:	mov	r5, r0
   2201c:	ldr	r7, [r0]
   22020:	ldr	r3, [r0, #4]
   22024:	cmp	r7, r3
   22028:	addcc	r7, r7, #8
   2202c:	movcc	r6, #0
   22030:	bcs	220ac <__assert_fail@plt+0xfab8>
   22034:	ldr	r2, [r7, #-8]
   22038:	mov	r8, r7
   2203c:	cmp	r2, #0
   22040:	beq	220a0 <__assert_fail@plt+0xfaac>
   22044:	ldr	r4, [r7, #-4]
   22048:	ldr	r2, [r5, #32]
   2204c:	cmp	r4, #0
   22050:	beq	22084 <__assert_fail@plt+0xfa90>
   22054:	cmp	r2, #0
   22058:	beq	22068 <__assert_fail@plt+0xfa74>
   2205c:	ldr	r0, [r4]
   22060:	blx	r2
   22064:	ldr	r2, [r5, #32]
   22068:	ldr	r3, [r4, #4]
   2206c:	ldr	r1, [r5, #36]	; 0x24
   22070:	str	r6, [r4]
   22074:	str	r1, [r4, #4]
   22078:	str	r4, [r5, #36]	; 0x24
   2207c:	subs	r4, r3, #0
   22080:	bne	22054 <__assert_fail@plt+0xfa60>
   22084:	cmp	r2, #0
   22088:	beq	22094 <__assert_fail@plt+0xfaa0>
   2208c:	ldr	r0, [r7, #-8]
   22090:	blx	r2
   22094:	str	r6, [r7, #-8]
   22098:	str	r6, [r7, #-4]
   2209c:	ldr	r3, [r5, #4]
   220a0:	cmp	r3, r8
   220a4:	add	r7, r7, #8
   220a8:	bhi	22034 <__assert_fail@plt+0xfa40>
   220ac:	mov	r3, #0
   220b0:	str	r3, [r5, #12]
   220b4:	str	r3, [r5, #16]
   220b8:	pop	{r4, r5, r6, r7, r8, pc}
   220bc:	ldr	r3, [r0, #32]
   220c0:	push	{r4, r5, r6, lr}
   220c4:	cmp	r3, #0
   220c8:	mov	r5, r0
   220cc:	beq	2212c <__assert_fail@plt+0xfb38>
   220d0:	ldr	r3, [r0, #16]
   220d4:	cmp	r3, #0
   220d8:	beq	2212c <__assert_fail@plt+0xfb38>
   220dc:	ldr	r6, [r0]
   220e0:	ldr	r3, [r0, #4]
   220e4:	cmp	r6, r3
   220e8:	bcs	22168 <__assert_fail@plt+0xfb74>
   220ec:	ldr	r0, [r6]
   220f0:	cmp	r0, #0
   220f4:	movne	r4, r6
   220f8:	bne	22104 <__assert_fail@plt+0xfb10>
   220fc:	b	2211c <__assert_fail@plt+0xfb28>
   22100:	ldr	r0, [r4]
   22104:	ldr	r3, [r5, #32]
   22108:	blx	r3
   2210c:	ldr	r4, [r4, #4]
   22110:	cmp	r4, #0
   22114:	bne	22100 <__assert_fail@plt+0xfb0c>
   22118:	ldr	r3, [r5, #4]
   2211c:	add	r6, r6, #8
   22120:	cmp	r3, r6
   22124:	bhi	220ec <__assert_fail@plt+0xfaf8>
   22128:	b	22130 <__assert_fail@plt+0xfb3c>
   2212c:	ldr	r3, [r5, #4]
   22130:	ldr	r6, [r5]
   22134:	cmp	r3, r6
   22138:	bls	22168 <__assert_fail@plt+0xfb74>
   2213c:	ldr	r0, [r6, #4]
   22140:	cmp	r0, #0
   22144:	beq	2215c <__assert_fail@plt+0xfb68>
   22148:	ldr	r4, [r0, #4]
   2214c:	bl	2db68 <__assert_fail@plt+0x1b574>
   22150:	subs	r0, r4, #0
   22154:	bne	22148 <__assert_fail@plt+0xfb54>
   22158:	ldr	r3, [r5, #4]
   2215c:	add	r6, r6, #8
   22160:	cmp	r3, r6
   22164:	bhi	2213c <__assert_fail@plt+0xfb48>
   22168:	ldr	r0, [r5, #36]	; 0x24
   2216c:	cmp	r0, #0
   22170:	beq	22184 <__assert_fail@plt+0xfb90>
   22174:	ldr	r4, [r0, #4]
   22178:	bl	2db68 <__assert_fail@plt+0x1b574>
   2217c:	subs	r0, r4, #0
   22180:	bne	22174 <__assert_fail@plt+0xfb80>
   22184:	ldr	r0, [r5]
   22188:	bl	2db68 <__assert_fail@plt+0x1b574>
   2218c:	mov	r0, r5
   22190:	pop	{r4, r5, r6, lr}
   22194:	b	2db68 <__assert_fail@plt+0x1b574>
   22198:	ldr	r3, [r0, #20]
   2219c:	push	{r4, r5, r6, r7, lr}
   221a0:	sub	sp, sp, #52	; 0x34
   221a4:	ldrb	r2, [r3, #16]
   221a8:	mov	r5, r0
   221ac:	str	r1, [sp, #4]
   221b0:	cmp	r2, #0
   221b4:	bne	221e0 <__assert_fail@plt+0xfbec>
   221b8:	vmov	s15, r1
   221bc:	vldr	s13, [r3, #8]
   221c0:	vldr	s14, [pc, #352]	; 22328 <__assert_fail@plt+0xfd34>
   221c4:	vcvt.f32.u32	s12, s15
   221c8:	vdiv.f32	s15, s12, s13
   221cc:	vcmpe.f32	s15, s14
   221d0:	vmrs	APSR_nzcv, fpscr
   221d4:	bge	222e4 <__assert_fail@plt+0xfcf0>
   221d8:	vcvt.u32.f32	s15, s15
   221dc:	vstr	s15, [sp, #4]
   221e0:	ldr	r0, [sp, #4]
   221e4:	bl	21650 <__assert_fail@plt+0xf05c>
   221e8:	lsrs	r3, r0, #30
   221ec:	movne	r2, #1
   221f0:	moveq	r2, #0
   221f4:	tst	r0, #536870912	; 0x20000000
   221f8:	movne	r2, #1
   221fc:	cmp	r0, #0
   22200:	movne	r4, r2
   22204:	orreq	r4, r2, #1
   22208:	cmp	r4, #0
   2220c:	mov	r6, r0
   22210:	bne	222e4 <__assert_fail@plt+0xfcf0>
   22214:	ldr	r3, [r5, #8]
   22218:	cmp	r3, r0
   2221c:	beq	222d4 <__assert_fail@plt+0xfce0>
   22220:	mov	r1, #8
   22224:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   22228:	cmp	r0, #0
   2222c:	str	r0, [sp, #8]
   22230:	beq	222e4 <__assert_fail@plt+0xfcf0>
   22234:	ldr	r1, [r5, #24]
   22238:	ldr	r7, [r5, #20]
   2223c:	ldr	lr, [r5, #28]
   22240:	ldr	ip, [r5, #32]
   22244:	add	r0, r0, r6, lsl #3
   22248:	ldr	r3, [r5, #36]	; 0x24
   2224c:	str	r0, [sp, #12]
   22250:	mov	r2, r4
   22254:	str	r1, [sp, #32]
   22258:	add	r0, sp, #8
   2225c:	mov	r1, r5
   22260:	str	r4, [sp, #20]
   22264:	str	r4, [sp, #24]
   22268:	str	r6, [sp, #16]
   2226c:	str	r7, [sp, #28]
   22270:	str	lr, [sp, #36]	; 0x24
   22274:	str	ip, [sp, #40]	; 0x28
   22278:	str	r3, [sp, #44]	; 0x2c
   2227c:	bl	218f8 <__assert_fail@plt+0xf304>
   22280:	subs	r4, r0, #0
   22284:	bne	222f4 <__assert_fail@plt+0xfd00>
   22288:	ldr	r3, [sp, #44]	; 0x2c
   2228c:	mov	r2, #1
   22290:	str	r3, [r5, #36]	; 0x24
   22294:	add	r1, sp, #8
   22298:	mov	r0, r5
   2229c:	bl	218f8 <__assert_fail@plt+0xf304>
   222a0:	cmp	r0, #0
   222a4:	beq	22324 <__assert_fail@plt+0xfd30>
   222a8:	add	r1, sp, #8
   222ac:	mov	r0, r5
   222b0:	mov	r2, r4
   222b4:	bl	218f8 <__assert_fail@plt+0xf304>
   222b8:	cmp	r0, #0
   222bc:	beq	22324 <__assert_fail@plt+0xfd30>
   222c0:	ldr	r0, [sp, #8]
   222c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   222c8:	mov	r0, r4
   222cc:	add	sp, sp, #52	; 0x34
   222d0:	pop	{r4, r5, r6, r7, pc}
   222d4:	mov	r4, #1
   222d8:	mov	r0, r4
   222dc:	add	sp, sp, #52	; 0x34
   222e0:	pop	{r4, r5, r6, r7, pc}
   222e4:	mov	r4, #0
   222e8:	mov	r0, r4
   222ec:	add	sp, sp, #52	; 0x34
   222f0:	pop	{r4, r5, r6, r7, pc}
   222f4:	ldr	r0, [r5]
   222f8:	bl	2db68 <__assert_fail@plt+0x1b574>
   222fc:	add	r0, sp, #12
   22300:	ldr	ip, [sp, #8]
   22304:	ldm	r0, {r0, r1, r2}
   22308:	ldr	r3, [sp, #44]	; 0x2c
   2230c:	str	ip, [r5]
   22310:	stmib	r5, {r0, r1, r2}
   22314:	mov	r0, r4
   22318:	str	r3, [r5, #36]	; 0x24
   2231c:	add	sp, sp, #52	; 0x34
   22320:	pop	{r4, r5, r6, r7, pc}
   22324:	bl	125a0 <abort@plt>
   22328:	svcmi	0x00800000
   2232c:	push	{r4, r5, r6, lr}
   22330:	subs	r6, r1, #0
   22334:	sub	sp, sp, #8
   22338:	beq	2246c <__assert_fail@plt+0xfe78>
   2233c:	mov	r4, r2
   22340:	mov	r3, #0
   22344:	add	r2, sp, #4
   22348:	mov	r5, r0
   2234c:	bl	2174c <__assert_fail@plt+0xf158>
   22350:	cmp	r0, #0
   22354:	beq	22370 <__assert_fail@plt+0xfd7c>
   22358:	cmp	r4, #0
   2235c:	moveq	r0, r4
   22360:	strne	r0, [r4]
   22364:	movne	r0, #0
   22368:	add	sp, sp, #8
   2236c:	pop	{r4, r5, r6, pc}
   22370:	vldr	s15, [r5, #8]
   22374:	ldr	r3, [r5, #20]
   22378:	vldr	s14, [r5, #12]
   2237c:	vcvt.f32.u32	s15, s15
   22380:	vldr	s13, [r3, #8]
   22384:	vcvt.f32.u32	s14, s14
   22388:	vmul.f32	s15, s15, s13
   2238c:	vcmpe.f32	s14, s15
   22390:	vmrs	APSR_nzcv, fpscr
   22394:	bgt	223e4 <__assert_fail@plt+0xfdf0>
   22398:	ldr	r2, [sp, #4]
   2239c:	ldr	r3, [r2]
   223a0:	cmp	r3, #0
   223a4:	beq	22470 <__assert_fail@plt+0xfe7c>
   223a8:	ldr	r3, [r5, #36]	; 0x24
   223ac:	cmp	r3, #0
   223b0:	beq	22494 <__assert_fail@plt+0xfea0>
   223b4:	ldr	r1, [r3, #4]
   223b8:	str	r1, [r5, #36]	; 0x24
   223bc:	ldr	r1, [r5, #16]
   223c0:	ldr	r0, [r2, #4]
   223c4:	add	r1, r1, #1
   223c8:	str	r0, [r3, #4]
   223cc:	str	r6, [r3]
   223d0:	mov	r0, #1
   223d4:	str	r3, [r2, #4]
   223d8:	str	r1, [r5, #16]
   223dc:	add	sp, sp, #8
   223e0:	pop	{r4, r5, r6, pc}
   223e4:	add	r0, r5, #20
   223e8:	bl	21848 <__assert_fail@plt+0xf254>
   223ec:	vldr	s15, [r5, #8]
   223f0:	ldr	r3, [r5, #20]
   223f4:	vldr	s14, [r5, #12]
   223f8:	vcvt.f32.u32	s15, s15
   223fc:	vldr	s13, [r3, #8]
   22400:	vcvt.f32.u32	s14, s14
   22404:	vmul.f32	s12, s13, s15
   22408:	vcmpe.f32	s14, s12
   2240c:	vmrs	APSR_nzcv, fpscr
   22410:	ble	22398 <__assert_fail@plt+0xfda4>
   22414:	vldr	s14, [r3, #12]
   22418:	ldrb	r2, [r3, #16]
   2241c:	vmul.f32	s15, s15, s14
   22420:	cmp	r2, #0
   22424:	vldr	s14, [pc, #132]	; 224b0 <__assert_fail@plt+0xfebc>
   22428:	vmuleq.f32	s15, s15, s13
   2242c:	vcmpe.f32	s15, s14
   22430:	vmrs	APSR_nzcv, fpscr
   22434:	bge	224a8 <__assert_fail@plt+0xfeb4>
   22438:	vcvt.u32.f32	s15, s15
   2243c:	mov	r0, r5
   22440:	vmov	r1, s15
   22444:	bl	22198 <__assert_fail@plt+0xfba4>
   22448:	cmp	r0, #0
   2244c:	beq	224a8 <__assert_fail@plt+0xfeb4>
   22450:	add	r2, sp, #4
   22454:	mov	r3, #0
   22458:	mov	r1, r6
   2245c:	mov	r0, r5
   22460:	bl	2174c <__assert_fail@plt+0xf158>
   22464:	cmp	r0, #0
   22468:	beq	22398 <__assert_fail@plt+0xfda4>
   2246c:	bl	125a0 <abort@plt>
   22470:	ldr	r1, [r5, #16]
   22474:	ldr	r3, [r5, #12]
   22478:	add	r1, r1, #1
   2247c:	add	r3, r3, #1
   22480:	str	r6, [r2]
   22484:	mov	r0, #1
   22488:	str	r1, [r5, #16]
   2248c:	str	r3, [r5, #12]
   22490:	b	22368 <__assert_fail@plt+0xfd74>
   22494:	mov	r0, #8
   22498:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2249c:	subs	r3, r0, #0
   224a0:	ldrne	r2, [sp, #4]
   224a4:	bne	223bc <__assert_fail@plt+0xfdc8>
   224a8:	mvn	r0, #0
   224ac:	b	22368 <__assert_fail@plt+0xfd74>
   224b0:	svcmi	0x00800000
   224b4:	push	{r4, lr}
   224b8:	sub	sp, sp, #8
   224bc:	add	r2, sp, #4
   224c0:	mov	r4, r1
   224c4:	bl	2232c <__assert_fail@plt+0xfd38>
   224c8:	cmn	r0, #1
   224cc:	beq	224e4 <__assert_fail@plt+0xfef0>
   224d0:	cmp	r0, #0
   224d4:	movne	r0, r4
   224d8:	ldreq	r0, [sp, #4]
   224dc:	add	sp, sp, #8
   224e0:	pop	{r4, pc}
   224e4:	mov	r0, #0
   224e8:	b	224dc <__assert_fail@plt+0xfee8>
   224ec:	push	{r4, r5, r6, lr}
   224f0:	sub	sp, sp, #8
   224f4:	mov	r3, #1
   224f8:	add	r2, sp, #4
   224fc:	mov	r4, r0
   22500:	bl	2174c <__assert_fail@plt+0xf158>
   22504:	subs	r5, r0, #0
   22508:	beq	22528 <__assert_fail@plt+0xff34>
   2250c:	ldr	r2, [sp, #4]
   22510:	ldr	r3, [r4, #16]
   22514:	ldr	r2, [r2]
   22518:	sub	r3, r3, #1
   2251c:	cmp	r2, #0
   22520:	str	r3, [r4, #16]
   22524:	beq	22534 <__assert_fail@plt+0xff40>
   22528:	mov	r0, r5
   2252c:	add	sp, sp, #8
   22530:	pop	{r4, r5, r6, pc}
   22534:	vldr	s15, [r4, #8]
   22538:	ldr	r3, [r4, #12]
   2253c:	ldr	r2, [r4, #20]
   22540:	sub	r3, r3, #1
   22544:	vcvt.f32.u32	s14, s15
   22548:	vldr	s13, [r2]
   2254c:	vmov	s15, r3
   22550:	str	r3, [r4, #12]
   22554:	vcvt.f32.u32	s15, s15
   22558:	vmul.f32	s14, s14, s13
   2255c:	vcmpe.f32	s15, s14
   22560:	vmrs	APSR_nzcv, fpscr
   22564:	bpl	22528 <__assert_fail@plt+0xff34>
   22568:	add	r0, r4, #20
   2256c:	bl	21848 <__assert_fail@plt+0xf254>
   22570:	vldr	s15, [r4, #8]
   22574:	ldr	r3, [r4, #20]
   22578:	vldr	s13, [r4, #12]
   2257c:	vcvt.f32.u32	s15, s15
   22580:	vldr	s14, [r3]
   22584:	vcvt.f32.u32	s13, s13
   22588:	vmul.f32	s14, s15, s14
   2258c:	vcmpe.f32	s13, s14
   22590:	vmrs	APSR_nzcv, fpscr
   22594:	bpl	22528 <__assert_fail@plt+0xff34>
   22598:	ldrb	r2, [r3, #16]
   2259c:	mov	r0, r4
   225a0:	cmp	r2, #0
   225a4:	vldreq	s13, [r3, #4]
   225a8:	vldrne	s14, [r3, #4]
   225ac:	vldreq	s14, [r3, #8]
   225b0:	vmuleq.f32	s15, s15, s13
   225b4:	vmul.f32	s15, s15, s14
   225b8:	vcvt.u32.f32	s15, s15
   225bc:	vmov	r1, s15
   225c0:	bl	22198 <__assert_fail@plt+0xfba4>
   225c4:	cmp	r0, #0
   225c8:	bne	22528 <__assert_fail@plt+0xff34>
   225cc:	ldr	r0, [r4, #36]	; 0x24
   225d0:	cmp	r0, #0
   225d4:	beq	225e8 <__assert_fail@plt+0xfff4>
   225d8:	ldr	r6, [r0, #4]
   225dc:	bl	2db68 <__assert_fail@plt+0x1b574>
   225e0:	subs	r0, r6, #0
   225e4:	bne	225d8 <__assert_fail@plt+0xffe4>
   225e8:	mov	r3, #0
   225ec:	str	r3, [r4, #36]	; 0x24
   225f0:	b	22528 <__assert_fail@plt+0xff34>
   225f4:	b	224ec <__assert_fail@plt+0xfef8>
   225f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225fc:	vpush	{d8-d9}
   22600:	mov	r8, r3
   22604:	ands	r3, r3, #32
   22608:	mov	r4, r2
   2260c:	sub	sp, sp, #116	; 0x74
   22610:	mov	r7, r1
   22614:	str	r3, [sp, #8]
   22618:	moveq	r3, #1000	; 0x3e8
   2261c:	movne	r3, #1024	; 0x400
   22620:	str	r2, [sp, #4]
   22624:	str	r3, [sp, #16]
   22628:	mov	r6, r0
   2262c:	bl	124a4 <localeconv@plt>
   22630:	add	r3, r4, #644	; 0x284
   22634:	str	r3, [sp, #28]
   22638:	add	r3, r3, #3
   2263c:	str	r3, [sp]
   22640:	ldr	r9, [r0]
   22644:	mov	r5, r0
   22648:	mov	r0, r9
   2264c:	bl	12300 <strlen@plt>
   22650:	ldr	fp, [r5, #4]
   22654:	ldr	r3, [pc, #1028]	; 22a60 <__assert_fail@plt+0x1046c>
   22658:	sub	r2, r0, #1
   2265c:	cmp	r2, #16
   22660:	movcc	r3, r9
   22664:	mov	r4, r0
   22668:	mov	r0, fp
   2266c:	movcs	r4, #1
   22670:	str	r3, [sp, #24]
   22674:	bl	12300 <strlen@plt>
   22678:	ldr	r3, [pc, #996]	; 22a64 <__assert_fail@plt+0x10470>
   2267c:	and	r2, r8, #3
   22680:	str	r2, [sp, #12]
   22684:	ldr	r9, [r5, #8]
   22688:	cmp	r0, #16
   2268c:	movhi	fp, r3
   22690:	ldrd	r0, [sp, #168]	; 0xa8
   22694:	ldrd	r2, [sp, #176]	; 0xb0
   22698:	str	fp, [sp, #20]
   2269c:	cmp	r3, r1
   226a0:	cmpeq	r2, r0
   226a4:	bhi	22888 <__assert_fail@plt+0x10294>
   226a8:	bl	40080 <__assert_fail@plt+0x2da8c>
   226ac:	orrs	r3, r2, r3
   226b0:	bne	226f0 <__assert_fail@plt+0x100fc>
   226b4:	ldrd	r2, [sp, #176]	; 0xb0
   226b8:	ldrd	r0, [sp, #168]	; 0xa8
   226bc:	bl	40080 <__assert_fail@plt+0x2da8c>
   226c0:	mov	r2, r0
   226c4:	mul	r0, r0, r7
   226c8:	umull	sl, fp, r2, r6
   226cc:	mla	r0, r6, r1, r0
   226d0:	mov	r3, r1
   226d4:	add	fp, r0, fp
   226d8:	mov	r1, fp
   226dc:	mov	r0, sl
   226e0:	bl	40080 <__assert_fail@plt+0x2da8c>
   226e4:	cmp	r7, r1
   226e8:	cmpeq	r6, r0
   226ec:	beq	22ce0 <__assert_fail@plt+0x106ec>
   226f0:	ldrd	r0, [sp, #168]	; 0xa8
   226f4:	bl	3ff38 <__assert_fail@plt+0x2d944>
   226f8:	vmov	d9, r0, r1
   226fc:	ldrd	r0, [sp, #176]	; 0xb0
   22700:	bl	3ff38 <__assert_fail@plt+0x2d944>
   22704:	vmov	d7, r0, r1
   22708:	mov	r0, r6
   2270c:	mov	r1, r7
   22710:	vdiv.f64	d8, d9, d7
   22714:	bl	3ff38 <__assert_fail@plt+0x2d944>
   22718:	ands	r6, r8, #16
   2271c:	vmov	d7, r0, r1
   22720:	vmul.f64	d8, d8, d7
   22724:	beq	22a70 <__assert_fail@plt+0x1047c>
   22728:	vldr	s15, [sp, #16]
   2272c:	mov	r5, #0
   22730:	vcvt.f64.s32	d6, s15
   22734:	vmov.f64	d7, d6
   22738:	vmov.f64	d5, d7
   2273c:	vmul.f64	d7, d7, d6
   22740:	add	r5, r5, #1
   22744:	vcmpe.f64	d8, d7
   22748:	vmrs	APSR_nzcv, fpscr
   2274c:	blt	22758 <__assert_fail@plt+0x10164>
   22750:	cmp	r5, #8
   22754:	bne	22738 <__assert_fail@plt+0x10144>
   22758:	ldr	sl, [sp, #12]
   2275c:	vdiv.f64	d9, d8, d5
   22760:	cmp	sl, #1
   22764:	beq	22b94 <__assert_fail@plt+0x105a0>
   22768:	vldr	d7, [pc, #736]	; 22a50 <__assert_fail@plt+0x1045c>
   2276c:	vcmpe.f64	d9, d7
   22770:	vmrs	APSR_nzcv, fpscr
   22774:	vmovpl	r2, r3, d9
   22778:	bpl	227cc <__assert_fail@plt+0x101d8>
   2277c:	vmov	r0, r1, d9
   22780:	bl	400d0 <__assert_fail@plt+0x2dadc>
   22784:	cmp	sl, #0
   22788:	mov	r6, r0
   2278c:	mov	r7, r1
   22790:	movne	r0, #0
   22794:	bne	227b0 <__assert_fail@plt+0x101bc>
   22798:	bl	3ff38 <__assert_fail@plt+0x2d944>
   2279c:	vmov	d7, r0, r1
   227a0:	vcmp.f64	d7, d9
   227a4:	vmrs	APSR_nzcv, fpscr
   227a8:	movne	r0, #1
   227ac:	moveq	r0, #0
   227b0:	adds	r2, r6, r0
   227b4:	adc	r3, r7, #0
   227b8:	mov	r0, r2
   227bc:	mov	r1, r3
   227c0:	bl	3ff38 <__assert_fail@plt+0x2d944>
   227c4:	mov	r2, r0
   227c8:	mov	r3, r1
   227cc:	ldr	r6, [sp, #4]
   227d0:	ldr	r1, [pc, #656]	; 22a68 <__assert_fail@plt+0x10474>
   227d4:	mov	r0, r6
   227d8:	bl	124b0 <sprintf@plt>
   227dc:	mov	r0, r6
   227e0:	bl	12300 <strlen@plt>
   227e4:	ldr	r3, [sp, #8]
   227e8:	add	r6, r4, #1
   227ec:	cmp	r3, #0
   227f0:	movne	r3, #1
   227f4:	moveq	r3, #2
   227f8:	add	r3, r3, r6
   227fc:	cmp	r0, r3
   22800:	mov	r7, r0
   22804:	bls	22bd4 <__assert_fail@plt+0x105e0>
   22808:	vldr	d7, [pc, #584]	; 22a58 <__assert_fail@plt+0x10464>
   2280c:	vmul.f64	d9, d9, d7
   22810:	vldr	d7, [pc, #568]	; 22a50 <__assert_fail@plt+0x1045c>
   22814:	vcmpe.f64	d9, d7
   22818:	vmrs	APSR_nzcv, fpscr
   2281c:	bpl	22858 <__assert_fail@plt+0x10264>
   22820:	vmov	r0, r1, d9
   22824:	bl	400d0 <__assert_fail@plt+0x2dadc>
   22828:	ldr	r3, [sp, #12]
   2282c:	cmp	r3, #0
   22830:	mov	r6, r0
   22834:	mov	r7, r1
   22838:	movne	r0, #0
   2283c:	beq	22e90 <__assert_fail@plt+0x1089c>
   22840:	adds	r2, r6, r0
   22844:	adc	r3, r7, #0
   22848:	mov	r0, r2
   2284c:	mov	r1, r3
   22850:	bl	3ff38 <__assert_fail@plt+0x2d944>
   22854:	vmov	d9, r0, r1
   22858:	vldr	d7, [pc, #504]	; 22a58 <__assert_fail@plt+0x10464>
   2285c:	ldr	r4, [sp, #4]
   22860:	ldr	r1, [pc, #516]	; 22a6c <__assert_fail@plt+0x10478>
   22864:	mov	r0, r4
   22868:	vdiv.f64	d6, d9, d7
   2286c:	mov	r6, #0
   22870:	vmov	r2, r3, d6
   22874:	bl	124b0 <sprintf@plt>
   22878:	mov	r0, r4
   2287c:	bl	12300 <strlen@plt>
   22880:	mov	r7, r0
   22884:	b	22ab4 <__assert_fail@plt+0x104c0>
   22888:	ldrd	r2, [sp, #168]	; 0xa8
   2288c:	orrs	r3, r2, r3
   22890:	beq	226f0 <__assert_fail@plt+0x100fc>
   22894:	ldrd	r2, [sp, #168]	; 0xa8
   22898:	ldrd	r0, [sp, #176]	; 0xb0
   2289c:	bl	40080 <__assert_fail@plt+0x2da8c>
   228a0:	orrs	r3, r2, r3
   228a4:	bne	226f0 <__assert_fail@plt+0x100fc>
   228a8:	ldrd	r2, [sp, #168]	; 0xa8
   228ac:	ldrd	r0, [sp, #176]	; 0xb0
   228b0:	bl	40080 <__assert_fail@plt+0x2da8c>
   228b4:	mov	sl, r0
   228b8:	mov	fp, r1
   228bc:	mov	r2, r0
   228c0:	mov	r3, r1
   228c4:	mov	r0, r6
   228c8:	mov	r1, r7
   228cc:	strd	sl, [sp, #40]	; 0x28
   228d0:	bl	40080 <__assert_fail@plt+0x2da8c>
   228d4:	mov	r1, #10
   228d8:	umull	sl, fp, r2, r1
   228dc:	mla	r3, r1, r3, fp
   228e0:	strd	sl, [sp, #32]
   228e4:	ldrd	sl, [sp, #40]	; 0x28
   228e8:	str	r3, [sp, #36]	; 0x24
   228ec:	ldrd	r0, [sp, #32]
   228f0:	mov	r2, sl
   228f4:	mov	r3, fp
   228f8:	bl	40080 <__assert_fail@plt+0x2da8c>
   228fc:	mov	r0, r6
   22900:	mov	r1, r7
   22904:	lsls	r6, r2, #1
   22908:	adc	r7, r3, r3
   2290c:	mov	r2, sl
   22910:	mov	r3, fp
   22914:	strd	r6, [sp, #48]	; 0x30
   22918:	bl	40080 <__assert_fail@plt+0x2da8c>
   2291c:	mov	r7, fp
   22920:	mov	r6, sl
   22924:	mov	r3, r7
   22928:	mov	r2, r6
   2292c:	strd	r6, [sp, #40]	; 0x28
   22930:	mov	sl, r0
   22934:	mov	fp, r1
   22938:	ldrd	r0, [sp, #32]
   2293c:	bl	40080 <__assert_fail@plt+0x2da8c>
   22940:	ldrd	r2, [sp, #40]	; 0x28
   22944:	mov	r7, r0
   22948:	ldrd	r0, [sp, #48]	; 0x30
   2294c:	cmp	r3, r1
   22950:	cmpeq	r2, r0
   22954:	bls	22e6c <__assert_fail@plt+0x10878>
   22958:	mov	r3, r0
   2295c:	orrs	r3, r3, r1
   22960:	movne	r3, #1
   22964:	moveq	r3, #0
   22968:	str	r3, [sp, #40]	; 0x28
   2296c:	ands	r3, r8, #16
   22970:	str	r3, [sp, #48]	; 0x30
   22974:	beq	22d3c <__assert_fail@plt+0x10748>
   22978:	ldr	r1, [sp, #16]
   2297c:	mov	r3, #0
   22980:	mov	r2, r1
   22984:	cmp	fp, r3
   22988:	cmpeq	sl, r1
   2298c:	strd	r2, [sp, #32]
   22990:	bcc	22e80 <__assert_fail@plt+0x1088c>
   22994:	mov	r5, #0
   22998:	mov	r6, r7
   2299c:	str	r9, [sp, #56]	; 0x38
   229a0:	str	r8, [sp, #60]	; 0x3c
   229a4:	mov	r7, r1
   229a8:	mov	r8, r5
   229ac:	mov	r9, r4
   229b0:	ldr	r5, [sp, #40]	; 0x28
   229b4:	b	229e0 <__assert_fail@plt+0x103ec>
   229b8:	cmn	r5, r4
   229bc:	movne	r5, #1
   229c0:	moveq	r5, #0
   229c4:	ldrd	r2, [sp, #32]
   229c8:	add	r8, r8, #1
   229cc:	cmp	r3, fp
   229d0:	cmpeq	r2, sl
   229d4:	bhi	22edc <__assert_fail@plt+0x108e8>
   229d8:	cmp	r8, #8
   229dc:	beq	22eb8 <__assert_fail@plt+0x108c4>
   229e0:	mov	r0, sl
   229e4:	mov	r1, fp
   229e8:	ldrd	r2, [sp, #32]
   229ec:	bl	40080 <__assert_fail@plt+0x2da8c>
   229f0:	mov	r1, r7
   229f4:	asr	r4, r5, #1
   229f8:	add	r2, r2, r2, lsl #2
   229fc:	add	r6, r6, r2, lsl #1
   22a00:	mov	r0, r6
   22a04:	bl	3f994 <__assert_fail@plt+0x2d3a0>
   22a08:	ldrd	r2, [sp, #32]
   22a0c:	mov	r0, sl
   22a10:	add	r4, r4, r1, lsl #1
   22a14:	mov	r1, fp
   22a18:	bl	40080 <__assert_fail@plt+0x2da8c>
   22a1c:	mov	sl, r0
   22a20:	mov	fp, r1
   22a24:	mov	r0, r6
   22a28:	mov	r1, r7
   22a2c:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   22a30:	cmp	r7, r4
   22a34:	add	r3, r5, r4
   22a38:	mov	r6, r0
   22a3c:	bhi	229b8 <__assert_fail@plt+0x103c4>
   22a40:	cmp	r7, r3
   22a44:	movcs	r5, #2
   22a48:	movcc	r5, #3
   22a4c:	b	229c4 <__assert_fail@plt+0x103d0>
   22a50:	andeq	r0, r0, r0
   22a54:	mvnsmi	r0, #0
   22a58:	andeq	r0, r0, r0
   22a5c:	eormi	r0, r4, r0
   22a60:	andeq	r3, r4, r8, lsr #24
   22a64:	andeq	r2, r4, r0, asr r0
   22a68:	andeq	r4, r4, ip, lsl #20
   22a6c:	andeq	r4, r4, r4, lsl #20
   22a70:	and	r7, r8, #3
   22a74:	cmp	r7, #1
   22a78:	beq	22a8c <__assert_fail@plt+0x10498>
   22a7c:	vldr	d7, [pc, #972]	; 22e50 <__assert_fail@plt+0x1085c>
   22a80:	vcmpe.f64	d8, d7
   22a84:	vmrs	APSR_nzcv, fpscr
   22a88:	bmi	22c9c <__assert_fail@plt+0x106a8>
   22a8c:	ldr	r4, [sp, #4]
   22a90:	vmov	r2, r3, d8
   22a94:	ldr	r1, [pc, #964]	; 22e60 <__assert_fail@plt+0x1086c>
   22a98:	mov	r0, r4
   22a9c:	bl	124b0 <sprintf@plt>
   22aa0:	mov	r0, r4
   22aa4:	bl	12300 <strlen@plt>
   22aa8:	mov	r6, #0
   22aac:	mvn	r5, #0
   22ab0:	mov	r7, r0
   22ab4:	ldr	r3, [sp]
   22ab8:	mov	r2, r7
   22abc:	sub	r4, r3, r7
   22ac0:	mov	r0, r4
   22ac4:	ldr	r1, [sp, #4]
   22ac8:	bl	11fb8 <memmove@plt>
   22acc:	sub	r7, r7, r6
   22ad0:	add	r7, r4, r7
   22ad4:	tst	r8, #4
   22ad8:	bne	22c08 <__assert_fail@plt+0x10614>
   22adc:	tst	r8, #128	; 0x80
   22ae0:	beq	22b78 <__assert_fail@plt+0x10584>
   22ae4:	cmn	r5, #1
   22ae8:	beq	22cf0 <__assert_fail@plt+0x106fc>
   22aec:	and	r3, r8, #256	; 0x100
   22af0:	orrs	r2, r5, r3
   22af4:	beq	22b78 <__assert_fail@plt+0x10584>
   22af8:	tst	r8, #64	; 0x40
   22afc:	ldrne	r1, [sp, #4]
   22b00:	addne	r2, r1, #648	; 0x288
   22b04:	strne	r2, [sp]
   22b08:	movne	r2, #32
   22b0c:	strbne	r2, [r1, #647]	; 0x287
   22b10:	cmp	r5, #0
   22b14:	beq	2301c <__assert_fail@plt+0x10a28>
   22b18:	ldr	r2, [sp, #8]
   22b1c:	ldr	r0, [sp]
   22b20:	cmp	r2, #0
   22b24:	cmpeq	r5, #1
   22b28:	ldr	r2, [sp]
   22b2c:	ldrne	r1, [pc, #816]	; 22e64 <__assert_fail@plt+0x10870>
   22b30:	moveq	r1, #107	; 0x6b
   22b34:	add	r2, r2, #1
   22b38:	ldrbne	r1, [r1, r5]
   22b3c:	cmp	r3, #0
   22b40:	streq	r2, [sp]
   22b44:	strb	r1, [r0]
   22b48:	beq	22b78 <__assert_fail@plt+0x10584>
   22b4c:	ldr	r3, [sp, #8]
   22b50:	cmp	r5, #0
   22b54:	cmpne	r3, #0
   22b58:	movne	r2, r0
   22b5c:	movne	r3, #105	; 0x69
   22b60:	strbne	r3, [r2, #1]
   22b64:	addne	r2, r2, #2
   22b68:	mov	r3, #66	; 0x42
   22b6c:	strb	r3, [r2]
   22b70:	add	r3, r2, #1
   22b74:	str	r3, [sp]
   22b78:	ldr	r2, [sp]
   22b7c:	mov	r3, #0
   22b80:	mov	r0, r4
   22b84:	strb	r3, [r2]
   22b88:	add	sp, sp, #116	; 0x74
   22b8c:	vpop	{d8-d9}
   22b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b94:	ldr	r6, [sp, #4]
   22b98:	vmov	r2, r3, d9
   22b9c:	ldr	r1, [pc, #708]	; 22e68 <__assert_fail@plt+0x10874>
   22ba0:	mov	r0, r6
   22ba4:	bl	124b0 <sprintf@plt>
   22ba8:	mov	r0, r6
   22bac:	bl	12300 <strlen@plt>
   22bb0:	ldr	r3, [sp, #8]
   22bb4:	add	r6, r4, #1
   22bb8:	cmp	r3, #0
   22bbc:	movne	r3, #1
   22bc0:	moveq	r3, #2
   22bc4:	add	r3, r3, r6
   22bc8:	cmp	r3, r0
   22bcc:	mov	r7, r0
   22bd0:	bcc	22eac <__assert_fail@plt+0x108b8>
   22bd4:	tst	r8, #8
   22bd8:	beq	22ab4 <__assert_fail@plt+0x104c0>
   22bdc:	ldr	r3, [sp, #4]
   22be0:	add	r3, r3, r7
   22be4:	ldrb	r3, [r3, #-1]
   22be8:	cmp	r3, #48	; 0x30
   22bec:	bne	22ab4 <__assert_fail@plt+0x104c0>
   22bf0:	vldr	d7, [pc, #608]	; 22e58 <__assert_fail@plt+0x10864>
   22bf4:	ldr	r3, [sp, #12]
   22bf8:	cmp	r3, #1
   22bfc:	vmul.f64	d9, d9, d7
   22c00:	beq	22858 <__assert_fail@plt+0x10264>
   22c04:	b	22810 <__assert_fail@plt+0x1021c>
   22c08:	ldr	r0, [sp, #20]
   22c0c:	bl	12300 <strlen@plt>
   22c10:	sub	r6, r7, r4
   22c14:	mov	r1, r4
   22c18:	mov	r2, r6
   22c1c:	mvn	sl, #0
   22c20:	mov	fp, r0
   22c24:	add	r0, sp, #68	; 0x44
   22c28:	bl	12024 <memcpy@plt>
   22c2c:	ldr	r4, [sp, #20]
   22c30:	b	22c38 <__assert_fail@plt+0x10644>
   22c34:	bl	12024 <memcpy@plt>
   22c38:	ldrb	r3, [r9]
   22c3c:	cmp	r3, #0
   22c40:	beq	22c54 <__assert_fail@plt+0x10660>
   22c44:	cmp	r3, #255	; 0xff
   22c48:	movne	sl, r3
   22c4c:	moveq	sl, r6
   22c50:	add	r9, r9, #1
   22c54:	cmp	sl, r6
   22c58:	movcs	sl, r6
   22c5c:	sub	r3, r7, sl
   22c60:	sub	r6, r6, sl
   22c64:	add	r2, sp, #68	; 0x44
   22c68:	add	r1, r2, r6
   22c6c:	mov	r0, r3
   22c70:	mov	r2, sl
   22c74:	sub	r7, r3, fp
   22c78:	bl	12024 <memcpy@plt>
   22c7c:	cmp	r6, #0
   22c80:	mov	r2, fp
   22c84:	mov	r1, r4
   22c88:	mov	r3, r0
   22c8c:	mov	r0, r7
   22c90:	bne	22c34 <__assert_fail@plt+0x10640>
   22c94:	mov	r4, r3
   22c98:	b	22adc <__assert_fail@plt+0x104e8>
   22c9c:	vmov	r0, r1, d8
   22ca0:	bl	400d0 <__assert_fail@plt+0x2dadc>
   22ca4:	cmp	r7, #0
   22ca8:	mov	r4, r0
   22cac:	mov	r5, r1
   22cb0:	bne	22ccc <__assert_fail@plt+0x106d8>
   22cb4:	bl	3ff38 <__assert_fail@plt+0x2d944>
   22cb8:	vmov	d7, r0, r1
   22cbc:	vcmp.f64	d7, d8
   22cc0:	vmrs	APSR_nzcv, fpscr
   22cc4:	movne	r6, #1
   22cc8:	moveq	r6, #0
   22ccc:	adds	r0, r4, r6
   22cd0:	adc	r1, r5, #0
   22cd4:	bl	3ff38 <__assert_fail@plt+0x2d944>
   22cd8:	vmov	d8, r0, r1
   22cdc:	b	22a8c <__assert_fail@plt+0x10498>
   22ce0:	mov	r3, #0
   22ce4:	str	r3, [sp, #40]	; 0x28
   22ce8:	mov	r7, r3
   22cec:	b	2296c <__assert_fail@plt+0x10378>
   22cf0:	ldrd	r2, [sp, #176]	; 0xb0
   22cf4:	cmp	r3, #0
   22cf8:	cmpeq	r2, #1
   22cfc:	bls	22f90 <__assert_fail@plt+0x1099c>
   22d00:	ldr	r1, [sp, #16]
   22d04:	ldrd	r6, [sp, #176]	; 0xb0
   22d08:	mov	r5, #1
   22d0c:	mov	r2, #1
   22d10:	mov	r3, #0
   22d14:	mul	r0, r1, r3
   22d18:	umull	r2, r3, r2, r1
   22d1c:	add	r3, r0, r3
   22d20:	cmp	r7, r3
   22d24:	cmpeq	r6, r2
   22d28:	bls	22aec <__assert_fail@plt+0x104f8>
   22d2c:	add	r5, r5, #1
   22d30:	cmp	r5, #8
   22d34:	bne	22d14 <__assert_fail@plt+0x10720>
   22d38:	b	22aec <__assert_fail@plt+0x104f8>
   22d3c:	ldr	r3, [sp]
   22d40:	mvn	r5, #0
   22d44:	str	r3, [sp, #28]
   22d48:	ldr	r3, [sp, #12]
   22d4c:	cmp	r3, #1
   22d50:	beq	22dd4 <__assert_fail@plt+0x107e0>
   22d54:	ldr	r3, [sp, #12]
   22d58:	cmp	r3, #0
   22d5c:	bne	22dfc <__assert_fail@plt+0x10808>
   22d60:	ldr	r3, [sp, #40]	; 0x28
   22d64:	add	r7, r7, r3
   22d68:	cmp	r7, #0
   22d6c:	ble	22dfc <__assert_fail@plt+0x10808>
   22d70:	ldr	r3, [sp, #48]	; 0x30
   22d74:	adds	sl, sl, #1
   22d78:	adc	fp, fp, #0
   22d7c:	cmp	r3, #0
   22d80:	beq	22dfc <__assert_fail@plt+0x10808>
   22d84:	mov	r3, #0
   22d88:	ldr	r2, [sp, #16]
   22d8c:	cmp	r3, fp
   22d90:	cmpeq	r2, sl
   22d94:	moveq	r3, #1
   22d98:	movne	r3, #0
   22d9c:	cmp	r5, #7
   22da0:	movgt	r3, #0
   22da4:	andle	r3, r3, #1
   22da8:	cmp	r3, #0
   22dac:	beq	22dfc <__assert_fail@plt+0x10808>
   22db0:	tst	r8, #8
   22db4:	add	r5, r5, #1
   22db8:	beq	22ff0 <__assert_fail@plt+0x109fc>
   22dbc:	ldr	r2, [sp, #28]
   22dc0:	mov	r3, #49	; 0x31
   22dc4:	sub	r4, r2, #1
   22dc8:	strb	r3, [r2, #-1]
   22dcc:	mov	r7, r2
   22dd0:	b	22ad4 <__assert_fail@plt+0x104e0>
   22dd4:	ldr	r1, [sp, #40]	; 0x28
   22dd8:	and	r2, sl, #1
   22ddc:	adds	r2, r2, r1
   22de0:	mov	r3, #0
   22de4:	adc	r3, r3, r1, asr #31
   22de8:	orr	r2, r2, r3
   22dec:	cmp	r2, #0
   22df0:	addne	r7, r7, #1
   22df4:	cmp	r7, #5
   22df8:	bgt	22d70 <__assert_fail@plt+0x1077c>
   22dfc:	ldr	r4, [sp, #28]
   22e00:	mov	r6, #10
   22e04:	mov	r7, #0
   22e08:	mov	r0, sl
   22e0c:	mov	r1, fp
   22e10:	mov	r2, r6
   22e14:	mov	r3, r7
   22e18:	bl	40080 <__assert_fail@plt+0x2da8c>
   22e1c:	mov	r0, sl
   22e20:	mov	r1, fp
   22e24:	mov	r3, r7
   22e28:	add	r2, r2, #48	; 0x30
   22e2c:	strb	r2, [r4, #-1]!
   22e30:	mov	r2, r6
   22e34:	bl	40080 <__assert_fail@plt+0x2da8c>
   22e38:	mov	sl, r0
   22e3c:	mov	fp, r1
   22e40:	orrs	r3, sl, fp
   22e44:	bne	22e08 <__assert_fail@plt+0x10814>
   22e48:	ldr	r7, [sp, #28]
   22e4c:	b	22ad4 <__assert_fail@plt+0x104e0>
   22e50:	andeq	r0, r0, r0
   22e54:	mvnsmi	r0, #0
   22e58:	andeq	r0, r0, r0
   22e5c:	eormi	r0, r4, r0
   22e60:	andeq	r4, r4, r4, lsl #20
   22e64:	andeq	r4, r4, r4, ror #19
   22e68:	andeq	r4, r4, ip, lsl #20
   22e6c:	movcc	r3, #3
   22e70:	strcc	r3, [sp, #40]	; 0x28
   22e74:	movcs	r3, #2
   22e78:	strcs	r3, [sp, #40]	; 0x28
   22e7c:	b	2296c <__assert_fail@plt+0x10378>
   22e80:	ldr	r3, [sp]
   22e84:	mov	r5, #0
   22e88:	str	r3, [sp, #28]
   22e8c:	b	22d48 <__assert_fail@plt+0x10754>
   22e90:	bl	3ff38 <__assert_fail@plt+0x2d944>
   22e94:	vmov	d7, r0, r1
   22e98:	vcmp.f64	d7, d9
   22e9c:	vmrs	APSR_nzcv, fpscr
   22ea0:	movne	r0, #1
   22ea4:	moveq	r0, #0
   22ea8:	b	22840 <__assert_fail@plt+0x1024c>
   22eac:	vldr	d7, [pc, #380]	; 23030 <__assert_fail@plt+0x10a3c>
   22eb0:	vmul.f64	d9, d9, d7
   22eb4:	b	22858 <__assert_fail@plt+0x10264>
   22eb8:	ldr	r3, [sp]
   22ebc:	str	r5, [sp, #40]	; 0x28
   22ec0:	mov	r4, r9
   22ec4:	mov	r5, r8
   22ec8:	mov	r7, r6
   22ecc:	ldr	r9, [sp, #56]	; 0x38
   22ed0:	ldr	r8, [sp, #60]	; 0x3c
   22ed4:	str	r3, [sp, #28]
   22ed8:	b	22d48 <__assert_fail@plt+0x10754>
   22edc:	cmp	fp, #0
   22ee0:	cmpeq	sl, #9
   22ee4:	str	r5, [sp, #40]	; 0x28
   22ee8:	mov	r4, r9
   22eec:	mov	r5, r8
   22ef0:	mov	r7, r6
   22ef4:	ldr	r9, [sp, #56]	; 0x38
   22ef8:	ldr	r8, [sp, #60]	; 0x3c
   22efc:	bhi	22fe4 <__assert_fail@plt+0x109f0>
   22f00:	ldr	r3, [sp, #12]
   22f04:	cmp	r3, #1
   22f08:	beq	22f98 <__assert_fail@plt+0x109a4>
   22f0c:	ldr	r2, [sp, #40]	; 0x28
   22f10:	ldr	r3, [sp, #12]
   22f14:	cmp	r2, #0
   22f18:	clz	r3, r3
   22f1c:	lsr	r3, r3, #5
   22f20:	moveq	r3, #0
   22f24:	cmp	r3, #0
   22f28:	beq	22f78 <__assert_fail@plt+0x10984>
   22f2c:	add	r7, r7, #1
   22f30:	cmp	r7, #10
   22f34:	beq	22fc4 <__assert_fail@plt+0x109d0>
   22f38:	add	r7, r7, #48	; 0x30
   22f3c:	uxtb	r3, r7
   22f40:	ldr	r2, [sp, #28]
   22f44:	ldr	r1, [sp, #4]
   22f48:	add	r7, r2, #2
   22f4c:	sub	r2, r7, r4
   22f50:	str	r2, [sp, #28]
   22f54:	strb	r3, [r1, #646]	; 0x286
   22f58:	mov	r0, r2
   22f5c:	mov	r3, #0
   22f60:	mov	r2, r4
   22f64:	ldr	r1, [sp, #24]
   22f68:	mov	r7, r3
   22f6c:	str	r3, [sp, #40]	; 0x28
   22f70:	bl	12024 <memcpy@plt>
   22f74:	b	22d48 <__assert_fail@plt+0x10754>
   22f78:	cmp	r7, #0
   22f7c:	bne	22f38 <__assert_fail@plt+0x10944>
   22f80:	tst	r8, #8
   22f84:	bne	22fb4 <__assert_fail@plt+0x109c0>
   22f88:	mov	r3, #48	; 0x30
   22f8c:	b	22f40 <__assert_fail@plt+0x1094c>
   22f90:	mov	r5, #0
   22f94:	b	22aec <__assert_fail@plt+0x104f8>
   22f98:	ldr	r2, [sp, #40]	; 0x28
   22f9c:	and	r3, r6, #1
   22fa0:	add	r3, r3, r2
   22fa4:	cmp	r3, #2
   22fa8:	movle	r3, #0
   22fac:	movgt	r3, #1
   22fb0:	b	22f24 <__assert_fail@plt+0x10930>
   22fb4:	ldr	r3, [sp]
   22fb8:	mov	r7, #0
   22fbc:	str	r3, [sp, #28]
   22fc0:	b	22d48 <__assert_fail@plt+0x10754>
   22fc4:	adds	sl, sl, #1
   22fc8:	adc	fp, fp, #0
   22fcc:	cmp	fp, #0
   22fd0:	mov	r3, #0
   22fd4:	cmpeq	sl, #10
   22fd8:	str	r3, [sp, #40]	; 0x28
   22fdc:	moveq	r7, r3
   22fe0:	bne	22f80 <__assert_fail@plt+0x1098c>
   22fe4:	ldr	r3, [sp]
   22fe8:	str	r3, [sp, #28]
   22fec:	b	22d48 <__assert_fail@plt+0x10754>
   22ff0:	ldr	r1, [sp, #28]
   22ff4:	mvn	r3, r4
   22ff8:	add	r3, r1, r3
   22ffc:	mov	r2, #48	; 0x30
   23000:	strb	r2, [r1, #-1]
   23004:	mov	r0, r3
   23008:	ldr	r1, [sp, #24]
   2300c:	mov	r2, r4
   23010:	str	r3, [sp, #28]
   23014:	bl	12024 <memcpy@plt>
   23018:	b	22dbc <__assert_fail@plt+0x107c8>
   2301c:	cmp	r3, #0
   23020:	ldrne	r2, [sp]
   23024:	bne	22b68 <__assert_fail@plt+0x10574>
   23028:	b	22b78 <__assert_fail@plt+0x10584>
   2302c:	nop			; (mov r0, r0)
   23030:	andeq	r0, r0, r0
   23034:	eormi	r0, r4, r0
   23038:	push	{r4, r5, r6, r7, r8, lr}
   2303c:	subs	r4, r0, #0
   23040:	sub	sp, sp, #16
   23044:	mov	r8, r1
   23048:	mov	r7, r2
   2304c:	beq	23144 <__assert_fail@plt+0x10b50>
   23050:	ldrb	r3, [r4]
   23054:	ldr	r5, [pc, #360]	; 231c4 <__assert_fail@plt+0x10bd0>
   23058:	cmp	r3, #39	; 0x27
   2305c:	addeq	r4, r4, #1
   23060:	mov	r3, #4
   23064:	add	r2, r5, #12
   23068:	add	r1, r5, #20
   2306c:	mov	r0, r4
   23070:	moveq	r6, #4
   23074:	movne	r6, #0
   23078:	bl	3eb6c <__assert_fail@plt+0x2c578>
   2307c:	cmp	r0, #0
   23080:	blt	230e0 <__assert_fail@plt+0x10aec>
   23084:	add	r5, r5, r0, lsl #2
   23088:	mov	r1, #0
   2308c:	ldr	ip, [r5, #12]
   23090:	mov	r0, #1
   23094:	mov	r2, r0
   23098:	orr	r6, r6, ip
   2309c:	mov	r3, r1
   230a0:	str	r0, [r7]
   230a4:	str	r1, [r7, #4]
   230a8:	mov	r0, #0
   230ac:	str	r6, [r8]
   230b0:	orrs	r3, r2, r3
   230b4:	bne	230d8 <__assert_fail@plt+0x10ae4>
   230b8:	ldr	r0, [pc, #264]	; 231c8 <__assert_fail@plt+0x10bd4>
   230bc:	bl	12228 <getenv@plt>
   230c0:	mov	r3, #0
   230c4:	cmp	r0, #0
   230c8:	movne	r2, #512	; 0x200
   230cc:	moveq	r2, #1024	; 0x400
   230d0:	mov	r0, #4
   230d4:	strd	r2, [r7]
   230d8:	add	sp, sp, #16
   230dc:	pop	{r4, r5, r6, r7, r8, pc}
   230e0:	ldr	r2, [pc, #228]	; 231cc <__assert_fail@plt+0x10bd8>
   230e4:	mov	r3, r7
   230e8:	str	r2, [sp]
   230ec:	add	r1, sp, #12
   230f0:	mov	r2, #0
   230f4:	mov	r0, r4
   230f8:	bl	2cd48 <__assert_fail@plt+0x1a754>
   230fc:	cmp	r0, #0
   23100:	bne	23188 <__assert_fail@plt+0x10b94>
   23104:	ldrb	r3, [r4]
   23108:	sub	r3, r3, #48	; 0x30
   2310c:	cmp	r3, #9
   23110:	bls	2313c <__assert_fail@plt+0x10b48>
   23114:	ldr	r2, [sp, #12]
   23118:	cmp	r4, r2
   2311c:	bne	2312c <__assert_fail@plt+0x10b38>
   23120:	b	23198 <__assert_fail@plt+0x10ba4>
   23124:	cmp	r2, r4
   23128:	beq	23198 <__assert_fail@plt+0x10ba4>
   2312c:	ldrb	r3, [r4, #1]!
   23130:	sub	r3, r3, #48	; 0x30
   23134:	cmp	r3, #9
   23138:	bhi	23124 <__assert_fail@plt+0x10b30>
   2313c:	ldrd	r2, [r7]
   23140:	b	230a8 <__assert_fail@plt+0x10ab4>
   23144:	ldr	r0, [pc, #132]	; 231d0 <__assert_fail@plt+0x10bdc>
   23148:	bl	12228 <getenv@plt>
   2314c:	subs	r4, r0, #0
   23150:	bne	23050 <__assert_fail@plt+0x10a5c>
   23154:	ldr	r0, [pc, #120]	; 231d4 <__assert_fail@plt+0x10be0>
   23158:	bl	12228 <getenv@plt>
   2315c:	subs	r4, r0, #0
   23160:	bne	23050 <__assert_fail@plt+0x10a5c>
   23164:	ldr	r0, [pc, #92]	; 231c8 <__assert_fail@plt+0x10bd4>
   23168:	bl	12228 <getenv@plt>
   2316c:	mov	r3, #0
   23170:	mov	r6, #0
   23174:	cmp	r0, #0
   23178:	movne	r2, #512	; 0x200
   2317c:	moveq	r2, #1024	; 0x400
   23180:	strd	r2, [r7]
   23184:	b	230a8 <__assert_fail@plt+0x10ab4>
   23188:	mov	r3, #0
   2318c:	str	r3, [r8]
   23190:	ldrd	r2, [r7]
   23194:	b	230b0 <__assert_fail@plt+0x10abc>
   23198:	ldrb	r3, [r2, #-1]
   2319c:	cmp	r3, #66	; 0x42
   231a0:	orrne	r6, r6, #128	; 0x80
   231a4:	beq	231b0 <__assert_fail@plt+0x10bbc>
   231a8:	orr	r6, r6, #32
   231ac:	b	2313c <__assert_fail@plt+0x10b48>
   231b0:	ldrb	r3, [r2, #-2]
   231b4:	orr	r6, r6, #384	; 0x180
   231b8:	cmp	r3, #105	; 0x69
   231bc:	bne	2313c <__assert_fail@plt+0x10b48>
   231c0:	b	231a8 <__assert_fail@plt+0x10bb4>
   231c4:	andeq	r4, r4, r4, ror #19
   231c8:	andeq	r2, r4, r0, lsl #7
   231cc:	andeq	r4, r4, ip, lsr #20
   231d0:	andeq	r4, r4, r4, lsl sl
   231d4:	andeq	r4, r4, r0, lsr #20
   231d8:	push	{r4, r5, r6, r7, r8, lr}
   231dc:	ldr	r6, [pc, #144]	; 23274 <__assert_fail@plt+0x10c80>
   231e0:	ldr	r4, [r6]
   231e4:	cmp	r4, #0
   231e8:	beq	23214 <__assert_fail@plt+0x10c20>
   231ec:	ldr	r3, [r4]
   231f0:	cmp	r0, r3
   231f4:	bne	23208 <__assert_fail@plt+0x10c14>
   231f8:	b	23258 <__assert_fail@plt+0x10c64>
   231fc:	ldr	r3, [r4]
   23200:	cmp	r3, r0
   23204:	beq	23258 <__assert_fail@plt+0x10c64>
   23208:	ldr	r4, [r4, #4]
   2320c:	cmp	r4, #0
   23210:	bne	231fc <__assert_fail@plt+0x10c08>
   23214:	mov	r5, r0
   23218:	bl	11f58 <getpwuid@plt>
   2321c:	cmp	r0, #0
   23220:	beq	23268 <__assert_fail@plt+0x10c74>
   23224:	ldr	r7, [r0]
   23228:	mov	r0, r7
   2322c:	bl	12300 <strlen@plt>
   23230:	add	r0, r0, #12
   23234:	bic	r0, r0, #3
   23238:	bl	2c184 <__assert_fail@plt+0x19b90>
   2323c:	mov	r1, r7
   23240:	mov	r4, r0
   23244:	str	r5, [r0], #8
   23248:	bl	121b0 <strcpy@plt>
   2324c:	ldr	r3, [r6]
   23250:	str	r4, [r6]
   23254:	str	r3, [r4, #4]
   23258:	ldrb	r0, [r4, #8]
   2325c:	cmp	r0, #0
   23260:	addne	r0, r4, #8
   23264:	pop	{r4, r5, r6, r7, r8, pc}
   23268:	mov	r0, #12
   2326c:	ldr	r7, [pc, #4]	; 23278 <__assert_fail@plt+0x10c84>
   23270:	b	23238 <__assert_fail@plt+0x10c44>
   23274:	strdeq	r7, [r5], -r4
   23278:	andeq	r2, r4, r0, asr r0
   2327c:	push	{r4, r5, r6, r7, r8, lr}
   23280:	mov	r6, r0
   23284:	ldr	r5, [pc, #236]	; 23378 <__assert_fail@plt+0x10d84>
   23288:	ldr	r4, [r5]
   2328c:	cmp	r4, #0
   23290:	beq	232d0 <__assert_fail@plt+0x10cdc>
   23294:	ldrb	r7, [r0]
   23298:	b	232a8 <__assert_fail@plt+0x10cb4>
   2329c:	ldr	r4, [r4, #4]
   232a0:	cmp	r4, #0
   232a4:	beq	232d0 <__assert_fail@plt+0x10cdc>
   232a8:	ldrb	r3, [r4, #8]
   232ac:	cmp	r3, r7
   232b0:	bne	2329c <__assert_fail@plt+0x10ca8>
   232b4:	mov	r1, r6
   232b8:	add	r0, r4, #8
   232bc:	bl	11f40 <strcmp@plt>
   232c0:	cmp	r0, #0
   232c4:	bne	2329c <__assert_fail@plt+0x10ca8>
   232c8:	mov	r0, r4
   232cc:	pop	{r4, r5, r6, r7, r8, pc}
   232d0:	ldr	r4, [r5, #4]
   232d4:	cmp	r4, #0
   232d8:	beq	2331c <__assert_fail@plt+0x10d28>
   232dc:	ldrb	r7, [r6]
   232e0:	b	232f0 <__assert_fail@plt+0x10cfc>
   232e4:	ldr	r4, [r4, #4]
   232e8:	cmp	r4, #0
   232ec:	beq	2331c <__assert_fail@plt+0x10d28>
   232f0:	ldrb	r3, [r4, #8]
   232f4:	cmp	r3, r7
   232f8:	bne	232e4 <__assert_fail@plt+0x10cf0>
   232fc:	mov	r1, r6
   23300:	add	r0, r4, #8
   23304:	bl	11f40 <strcmp@plt>
   23308:	cmp	r0, #0
   2330c:	popeq	{r4, r5, r6, r7, r8, pc}
   23310:	ldr	r4, [r4, #4]
   23314:	cmp	r4, #0
   23318:	bne	232f0 <__assert_fail@plt+0x10cfc>
   2331c:	mov	r0, r6
   23320:	bl	11f1c <getpwnam@plt>
   23324:	mov	r4, r0
   23328:	mov	r0, r6
   2332c:	bl	12300 <strlen@plt>
   23330:	add	r0, r0, #12
   23334:	bic	r0, r0, #3
   23338:	bl	2c184 <__assert_fail@plt+0x19b90>
   2333c:	mov	r1, r6
   23340:	mov	r7, r0
   23344:	add	r0, r0, #8
   23348:	bl	121b0 <strcpy@plt>
   2334c:	cmp	r4, #0
   23350:	movne	r0, r7
   23354:	ldrne	r3, [r5]
   23358:	ldrne	r2, [r4, #8]
   2335c:	ldreq	r3, [r5, #4]
   23360:	strne	r7, [r5]
   23364:	moveq	r0, r4
   23368:	streq	r7, [r5, #4]
   2336c:	stmne	r7, {r2, r3}
   23370:	streq	r3, [r7, #4]
   23374:	pop	{r4, r5, r6, r7, r8, pc}
   23378:	strdeq	r7, [r5], -r4
   2337c:	push	{r4, r5, r6, r7, r8, lr}
   23380:	ldr	r6, [pc, #144]	; 23418 <__assert_fail@plt+0x10e24>
   23384:	ldr	r4, [r6, #8]
   23388:	cmp	r4, #0
   2338c:	beq	233b8 <__assert_fail@plt+0x10dc4>
   23390:	ldr	r3, [r4]
   23394:	cmp	r0, r3
   23398:	bne	233ac <__assert_fail@plt+0x10db8>
   2339c:	b	233fc <__assert_fail@plt+0x10e08>
   233a0:	ldr	r3, [r4]
   233a4:	cmp	r3, r0
   233a8:	beq	233fc <__assert_fail@plt+0x10e08>
   233ac:	ldr	r4, [r4, #4]
   233b0:	cmp	r4, #0
   233b4:	bne	233a0 <__assert_fail@plt+0x10dac>
   233b8:	mov	r5, r0
   233bc:	bl	125d0 <getgrgid@plt>
   233c0:	cmp	r0, #0
   233c4:	beq	2340c <__assert_fail@plt+0x10e18>
   233c8:	ldr	r7, [r0]
   233cc:	mov	r0, r7
   233d0:	bl	12300 <strlen@plt>
   233d4:	add	r0, r0, #12
   233d8:	bic	r0, r0, #3
   233dc:	bl	2c184 <__assert_fail@plt+0x19b90>
   233e0:	mov	r1, r7
   233e4:	mov	r4, r0
   233e8:	str	r5, [r0], #8
   233ec:	bl	121b0 <strcpy@plt>
   233f0:	ldr	r3, [r6, #8]
   233f4:	str	r4, [r6, #8]
   233f8:	str	r3, [r4, #4]
   233fc:	ldrb	r0, [r4, #8]
   23400:	cmp	r0, #0
   23404:	addne	r0, r4, #8
   23408:	pop	{r4, r5, r6, r7, r8, pc}
   2340c:	mov	r0, #12
   23410:	ldr	r7, [pc, #4]	; 2341c <__assert_fail@plt+0x10e28>
   23414:	b	233dc <__assert_fail@plt+0x10de8>
   23418:	strdeq	r7, [r5], -r4
   2341c:	andeq	r2, r4, r0, asr r0
   23420:	push	{r4, r5, r6, r7, r8, lr}
   23424:	mov	r6, r0
   23428:	ldr	r5, [pc, #236]	; 2351c <__assert_fail@plt+0x10f28>
   2342c:	ldr	r4, [r5, #8]
   23430:	cmp	r4, #0
   23434:	beq	23474 <__assert_fail@plt+0x10e80>
   23438:	ldrb	r7, [r0]
   2343c:	b	2344c <__assert_fail@plt+0x10e58>
   23440:	ldr	r4, [r4, #4]
   23444:	cmp	r4, #0
   23448:	beq	23474 <__assert_fail@plt+0x10e80>
   2344c:	ldrb	r3, [r4, #8]
   23450:	cmp	r3, r7
   23454:	bne	23440 <__assert_fail@plt+0x10e4c>
   23458:	mov	r1, r6
   2345c:	add	r0, r4, #8
   23460:	bl	11f40 <strcmp@plt>
   23464:	cmp	r0, #0
   23468:	bne	23440 <__assert_fail@plt+0x10e4c>
   2346c:	mov	r0, r4
   23470:	pop	{r4, r5, r6, r7, r8, pc}
   23474:	ldr	r4, [r5, #12]
   23478:	cmp	r4, #0
   2347c:	beq	234c0 <__assert_fail@plt+0x10ecc>
   23480:	ldrb	r7, [r6]
   23484:	b	23494 <__assert_fail@plt+0x10ea0>
   23488:	ldr	r4, [r4, #4]
   2348c:	cmp	r4, #0
   23490:	beq	234c0 <__assert_fail@plt+0x10ecc>
   23494:	ldrb	r3, [r4, #8]
   23498:	cmp	r3, r7
   2349c:	bne	23488 <__assert_fail@plt+0x10e94>
   234a0:	mov	r1, r6
   234a4:	add	r0, r4, #8
   234a8:	bl	11f40 <strcmp@plt>
   234ac:	cmp	r0, #0
   234b0:	popeq	{r4, r5, r6, r7, r8, pc}
   234b4:	ldr	r4, [r4, #4]
   234b8:	cmp	r4, #0
   234bc:	bne	23494 <__assert_fail@plt+0x10ea0>
   234c0:	mov	r0, r6
   234c4:	bl	125dc <getgrnam@plt>
   234c8:	mov	r4, r0
   234cc:	mov	r0, r6
   234d0:	bl	12300 <strlen@plt>
   234d4:	add	r0, r0, #12
   234d8:	bic	r0, r0, #3
   234dc:	bl	2c184 <__assert_fail@plt+0x19b90>
   234e0:	mov	r1, r6
   234e4:	mov	r7, r0
   234e8:	add	r0, r0, #8
   234ec:	bl	121b0 <strcpy@plt>
   234f0:	cmp	r4, #0
   234f4:	movne	r0, r7
   234f8:	ldrne	r3, [r5, #8]
   234fc:	ldrne	r2, [r4, #8]
   23500:	ldreq	r3, [r5, #12]
   23504:	strne	r7, [r5, #8]
   23508:	moveq	r0, r4
   2350c:	streq	r7, [r5, #12]
   23510:	stmne	r7, {r2, r3}
   23514:	streq	r3, [r7, #4]
   23518:	pop	{r4, r5, r6, r7, r8, pc}
   2351c:	strdeq	r7, [r5], -r4
   23520:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   23524:	mov	r6, r2
   23528:	lsrs	r2, r6, #30
   2352c:	movne	ip, #1
   23530:	moveq	ip, #0
   23534:	lsls	r2, r6, #2
   23538:	add	fp, sp, #28
   2353c:	bmi	23548 <__assert_fail@plt+0x10f54>
   23540:	cmp	ip, #0
   23544:	beq	23554 <__assert_fail@plt+0x10f60>
   23548:	mov	r0, #0
   2354c:	sub	sp, fp, #28
   23550:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23554:	cmp	r2, #4016	; 0xfb0
   23558:	mov	r5, r0
   2355c:	mov	r4, r1
   23560:	mov	r7, r3
   23564:	bls	23638 <__assert_fail@plt+0x11044>
   23568:	mov	r0, r2
   2356c:	bl	3f3d4 <__assert_fail@plt+0x2cde0>
   23570:	cmp	r0, #0
   23574:	beq	23548 <__assert_fail@plt+0x10f54>
   23578:	cmp	r6, #2
   2357c:	mov	r3, #1
   23580:	str	r3, [r0, #4]
   23584:	movhi	r8, r4
   23588:	addhi	r2, r0, #8
   2358c:	movhi	ip, #0
   23590:	movhi	r3, #2
   23594:	bls	235e0 <__assert_fail@plt+0x10fec>
   23598:	ldrb	r1, [r8, #1]!
   2359c:	ldrb	lr, [r4, ip]
   235a0:	cmp	lr, r1
   235a4:	bne	235c0 <__assert_fail@plt+0x10fcc>
   235a8:	b	23650 <__assert_fail@plt+0x1105c>
   235ac:	ldr	lr, [r0, ip, lsl #2]
   235b0:	sub	ip, ip, lr
   235b4:	ldrb	lr, [r4, ip]
   235b8:	cmp	lr, r1
   235bc:	beq	23650 <__assert_fail@plt+0x1105c>
   235c0:	cmp	ip, #0
   235c4:	bne	235ac <__assert_fail@plt+0x10fb8>
   235c8:	mov	ip, #0
   235cc:	str	r3, [r2]
   235d0:	add	r3, r3, #1
   235d4:	cmp	r6, r3
   235d8:	add	r2, r2, #4
   235dc:	bne	23598 <__assert_fail@plt+0x10fa4>
   235e0:	mov	r2, #0
   235e4:	str	r2, [r7]
   235e8:	ldrb	r3, [r5]
   235ec:	mov	ip, r5
   235f0:	cmp	r3, #0
   235f4:	beq	23628 <__assert_fail@plt+0x11034>
   235f8:	ldrb	r1, [r4, r2]
   235fc:	cmp	r1, r3
   23600:	beq	23660 <__assert_fail@plt+0x1106c>
   23604:	cmp	r2, #0
   23608:	addeq	r5, r5, #1
   2360c:	ldrbeq	r3, [ip, #1]
   23610:	ldrne	r1, [r0, r2, lsl #2]
   23614:	addeq	ip, ip, #1
   23618:	addne	r5, r5, r1
   2361c:	subne	r2, r2, r1
   23620:	cmp	r3, #0
   23624:	bne	235f8 <__assert_fail@plt+0x11004>
   23628:	bl	3f424 <__assert_fail@plt+0x2ce30>
   2362c:	mov	r0, #1
   23630:	sub	sp, fp, #28
   23634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23638:	add	r3, r2, #29
   2363c:	bic	r3, r3, #7
   23640:	sub	sp, sp, r3
   23644:	add	r0, sp, #15
   23648:	bic	r0, r0, #15
   2364c:	b	23570 <__assert_fail@plt+0x10f7c>
   23650:	add	ip, ip, #1
   23654:	sub	r1, r3, ip
   23658:	str	r1, [r2]
   2365c:	b	235d0 <__assert_fail@plt+0x10fdc>
   23660:	add	r2, r2, #1
   23664:	cmp	r6, r2
   23668:	add	r1, ip, #1
   2366c:	ldrbne	r3, [ip, #1]
   23670:	movne	ip, r1
   23674:	bne	235f0 <__assert_fail@plt+0x10ffc>
   23678:	str	r5, [r7]
   2367c:	bl	3f424 <__assert_fail@plt+0x2ce30>
   23680:	mov	r0, #1
   23684:	b	23630 <__assert_fail@plt+0x1103c>
   23688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2368c:	add	fp, sp, #32
   23690:	sub	sp, sp, #188	; 0xbc
   23694:	str	r0, [fp, #-212]	; 0xffffff2c
   23698:	mov	r0, r1
   2369c:	mov	r4, r1
   236a0:	str	r2, [fp, #-220]	; 0xffffff24
   236a4:	bl	3f4e8 <__assert_fail@plt+0x2cef4>
   236a8:	mov	r3, #44	; 0x2c
   236ac:	str	r0, [fp, #-208]	; 0xffffff30
   236b0:	umull	r0, r1, r0, r3
   236b4:	adds	r2, r1, #0
   236b8:	movne	r2, #1
   236bc:	cmp	r0, #0
   236c0:	blt	236cc <__assert_fail@plt+0x110d8>
   236c4:	cmp	r2, #0
   236c8:	beq	236d8 <__assert_fail@plt+0x110e4>
   236cc:	mov	r0, #0
   236d0:	sub	sp, fp, #32
   236d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236d8:	ldr	r2, [fp, #-208]	; 0xffffff30
   236dc:	mul	r0, r3, r2
   236e0:	cmp	r0, #4016	; 0xfb0
   236e4:	bls	23940 <__assert_fail@plt+0x1134c>
   236e8:	bl	3f3d4 <__assert_fail@plt+0x2cde0>
   236ec:	str	r0, [fp, #-216]	; 0xffffff28
   236f0:	ldr	r3, [fp, #-216]	; 0xffffff28
   236f4:	cmp	r3, #0
   236f8:	beq	236cc <__assert_fail@plt+0x110d8>
   236fc:	ldr	r2, [fp, #-208]	; 0xffffff30
   23700:	add	r6, r3, #16
   23704:	mov	r7, #1
   23708:	add	sl, r2, r2, lsl #2
   2370c:	mov	r8, #0
   23710:	add	sl, r3, sl, lsl #3
   23714:	str	r4, [fp, #-188]	; 0xffffff44
   23718:	str	r8, [fp, #-196]	; 0xffffff3c
   2371c:	strb	r8, [fp, #-204]	; 0xffffff34
   23720:	str	r8, [fp, #-200]	; 0xffffff38
   23724:	strb	r8, [fp, #-192]	; 0xffffff40
   23728:	ldrb	r3, [fp, #-204]	; 0xffffff34
   2372c:	ldr	r4, [fp, #-188]	; 0xffffff44
   23730:	cmp	r3, #0
   23734:	bne	23b5c <__assert_fail@plt+0x11568>
   23738:	ldrb	r3, [r4]
   2373c:	ldr	r1, [pc, #1840]	; 23e74 <__assert_fail@plt+0x11880>
   23740:	and	r2, r3, #31
   23744:	lsr	r3, r3, #5
   23748:	ldr	r3, [r1, r3, lsl #2]
   2374c:	lsr	r3, r3, r2
   23750:	tst	r3, #1
   23754:	beq	23b48 <__assert_fail@plt+0x11554>
   23758:	str	r7, [fp, #-184]	; 0xffffff48
   2375c:	ldrb	r4, [r4]
   23760:	strb	r7, [fp, #-180]	; 0xffffff4c
   23764:	strb	r7, [fp, #-192]	; 0xffffff40
   23768:	cmp	r4, #0
   2376c:	str	r4, [fp, #-176]	; 0xffffff50
   23770:	bne	23bc8 <__assert_fail@plt+0x115d4>
   23774:	ldr	r3, [fp, #-208]	; 0xffffff30
   23778:	str	r7, [sl, #4]
   2377c:	cmp	r3, #2
   23780:	bls	23820 <__assert_fail@plt+0x1122c>
   23784:	ldr	r9, [fp, #-216]	; 0xffffff28
   23788:	add	r7, sl, #8
   2378c:	mov	r5, r9
   23790:	mov	r6, #2
   23794:	ldrb	r8, [r5, #48]	; 0x30
   23798:	b	237c8 <__assert_fail@plt+0x111d4>
   2379c:	ldrb	r2, [r3, #8]
   237a0:	cmp	r2, #0
   237a4:	beq	237d8 <__assert_fail@plt+0x111e4>
   237a8:	ldr	r3, [r3, #12]
   237ac:	ldr	r2, [r5, #52]	; 0x34
   237b0:	cmp	r2, r3
   237b4:	beq	237fc <__assert_fail@plt+0x11208>
   237b8:	cmp	r4, #0
   237bc:	beq	23cd4 <__assert_fail@plt+0x116e0>
   237c0:	ldr	r3, [sl, r4, lsl #2]
   237c4:	sub	r4, r4, r3
   237c8:	add	r3, r4, r4, lsl #2
   237cc:	cmp	r8, #0
   237d0:	add	r3, r9, r3, lsl #3
   237d4:	bne	2379c <__assert_fail@plt+0x111a8>
   237d8:	ldr	r2, [r5, #44]	; 0x2c
   237dc:	ldr	r1, [r3, #4]
   237e0:	cmp	r2, r1
   237e4:	bne	237b8 <__assert_fail@plt+0x111c4>
   237e8:	ldr	r1, [r3]
   237ec:	ldr	r0, [r5, #40]	; 0x28
   237f0:	bl	12084 <memcmp@plt>
   237f4:	cmp	r0, #0
   237f8:	bne	237b8 <__assert_fail@plt+0x111c4>
   237fc:	add	r4, r4, #1
   23800:	sub	r2, r6, r4
   23804:	str	r2, [r7]
   23808:	ldr	r3, [fp, #-208]	; 0xffffff30
   2380c:	add	r6, r6, #1
   23810:	cmp	r3, r6
   23814:	add	r5, r5, #40	; 0x28
   23818:	add	r7, r7, #4
   2381c:	bne	23794 <__assert_fail@plt+0x111a0>
   23820:	ldr	r1, [fp, #-212]	; 0xffffff2c
   23824:	mov	r2, #0
   23828:	str	r1, [fp, #-132]	; 0xffffff7c
   2382c:	str	r1, [fp, #-76]	; 0xffffffb4
   23830:	ldr	r1, [fp, #-220]	; 0xffffff24
   23834:	mov	r3, r2
   23838:	cmp	r3, #0
   2383c:	str	sl, [fp, #-212]	; 0xffffff2c
   23840:	str	r2, [r1]
   23844:	strb	r2, [fp, #-148]	; 0xffffff6c
   23848:	str	r2, [fp, #-144]	; 0xffffff70
   2384c:	strb	r2, [fp, #-136]	; 0xffffff78
   23850:	strb	r2, [fp, #-92]	; 0xffffffa4
   23854:	str	r2, [fp, #-88]	; 0xffffffa8
   23858:	strb	r2, [fp, #-80]	; 0xffffffb0
   2385c:	mov	r8, r2
   23860:	mov	r7, r2
   23864:	str	r2, [fp, #-140]	; 0xffffff74
   23868:	str	r2, [fp, #-84]	; 0xffffffac
   2386c:	mov	r6, #1
   23870:	ldr	r9, [pc, #1532]	; 23e74 <__assert_fail@plt+0x11880>
   23874:	ldr	sl, [fp, #-216]	; 0xffffff28
   23878:	bne	23a88 <__assert_fail@plt+0x11494>
   2387c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   23880:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   23884:	cmp	r3, #0
   23888:	bne	238bc <__assert_fail@plt+0x112c8>
   2388c:	ldrb	r3, [r5]
   23890:	and	r2, r3, #31
   23894:	lsr	r3, r3, #5
   23898:	ldr	r3, [r9, r3, lsl #2]
   2389c:	lsr	r3, r3, r2
   238a0:	tst	r3, #1
   238a4:	bne	23c0c <__assert_fail@plt+0x11618>
   238a8:	sub	r0, fp, #88	; 0x58
   238ac:	bl	12060 <mbsinit@plt>
   238b0:	cmp	r0, #0
   238b4:	beq	23e4c <__assert_fail@plt+0x11858>
   238b8:	strb	r6, [fp, #-92]	; 0xffffffa4
   238bc:	bl	12198 <__ctype_get_mb_cur_max@plt>
   238c0:	mov	r1, r0
   238c4:	mov	r0, r5
   238c8:	bl	2bc80 <__assert_fail@plt+0x1968c>
   238cc:	sub	r3, fp, #88	; 0x58
   238d0:	mov	r1, r5
   238d4:	mov	r2, r0
   238d8:	sub	r0, fp, #64	; 0x40
   238dc:	bl	2fe64 <__assert_fail@plt+0x1d870>
   238e0:	cmn	r0, #1
   238e4:	str	r0, [fp, #-72]	; 0xffffffb8
   238e8:	strbeq	r7, [fp, #-68]	; 0xffffffbc
   238ec:	streq	r6, [fp, #-72]	; 0xffffffb8
   238f0:	strbeq	r6, [fp, #-80]	; 0xffffffb0
   238f4:	beq	23970 <__assert_fail@plt+0x1137c>
   238f8:	cmn	r0, #2
   238fc:	beq	2395c <__assert_fail@plt+0x11368>
   23900:	cmp	r0, #0
   23904:	beq	23de0 <__assert_fail@plt+0x117ec>
   23908:	ldr	r4, [fp, #-64]	; 0xffffffc0
   2390c:	sub	r0, fp, #88	; 0x58
   23910:	strb	r6, [fp, #-68]	; 0xffffffbc
   23914:	bl	12060 <mbsinit@plt>
   23918:	strb	r6, [fp, #-80]	; 0xffffffb0
   2391c:	cmp	r0, #0
   23920:	strbne	r7, [fp, #-92]	; 0xffffffa4
   23924:	cmp	r4, #0
   23928:	bne	23aa0 <__assert_fail@plt+0x114ac>
   2392c:	ldr	r0, [fp, #-216]	; 0xffffff28
   23930:	bl	3f424 <__assert_fail@plt+0x2ce30>
   23934:	mov	r0, #1
   23938:	sub	sp, fp, #32
   2393c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23940:	add	r3, r0, #29
   23944:	bic	r3, r3, #7
   23948:	sub	sp, sp, r3
   2394c:	add	r3, sp, #15
   23950:	bic	r3, r3, #15
   23954:	str	r3, [fp, #-216]	; 0xffffff28
   23958:	b	236f0 <__assert_fail@plt+0x110fc>
   2395c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   23960:	bl	12300 <strlen@plt>
   23964:	strb	r7, [fp, #-68]	; 0xffffffbc
   23968:	strb	r6, [fp, #-80]	; 0xffffffb0
   2396c:	str	r0, [fp, #-72]	; 0xffffffb8
   23970:	add	r3, r8, r8, lsl #2
   23974:	add	r3, sl, r3, lsl #3
   23978:	ldr	r2, [r3, #4]
   2397c:	ldr	r4, [fp, #-72]	; 0xffffffb8
   23980:	cmp	r2, r4
   23984:	beq	23c8c <__assert_fail@plt+0x11698>
   23988:	cmp	r8, #0
   2398c:	beq	23c44 <__assert_fail@plt+0x11650>
   23990:	ldr	r3, [fp, #-212]	; 0xffffff2c
   23994:	ldr	r5, [r3, r8, lsl #2]
   23998:	cmp	r5, #0
   2399c:	sub	r8, r8, r5
   239a0:	beq	23a7c <__assert_fail@plt+0x11488>
   239a4:	ldrb	r3, [fp, #-136]	; 0xffffff78
   239a8:	cmp	r3, #0
   239ac:	bne	23acc <__assert_fail@plt+0x114d8>
   239b0:	ldr	r4, [fp, #-132]	; 0xffffff7c
   239b4:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   239b8:	cmp	r3, #0
   239bc:	bne	239f0 <__assert_fail@plt+0x113fc>
   239c0:	ldrb	r3, [r4]
   239c4:	and	r2, r3, #31
   239c8:	lsr	r3, r3, #5
   239cc:	ldr	r3, [r9, r3, lsl #2]
   239d0:	lsr	r3, r3, r2
   239d4:	tst	r3, #1
   239d8:	bne	23ae0 <__assert_fail@plt+0x114ec>
   239dc:	sub	r0, fp, #144	; 0x90
   239e0:	bl	12060 <mbsinit@plt>
   239e4:	cmp	r0, #0
   239e8:	beq	23e4c <__assert_fail@plt+0x11858>
   239ec:	strb	r6, [fp, #-148]	; 0xffffff6c
   239f0:	bl	12198 <__ctype_get_mb_cur_max@plt>
   239f4:	mov	r1, r0
   239f8:	mov	r0, r4
   239fc:	bl	2bc80 <__assert_fail@plt+0x1968c>
   23a00:	sub	r3, fp, #144	; 0x90
   23a04:	mov	r1, r4
   23a08:	mov	r2, r0
   23a0c:	sub	r0, fp, #120	; 0x78
   23a10:	bl	2fe64 <__assert_fail@plt+0x1d870>
   23a14:	cmn	r0, #1
   23a18:	str	r0, [fp, #-128]	; 0xffffff80
   23a1c:	beq	23a58 <__assert_fail@plt+0x11464>
   23a20:	cmn	r0, #2
   23a24:	beq	23afc <__assert_fail@plt+0x11508>
   23a28:	cmp	r0, #0
   23a2c:	beq	23b14 <__assert_fail@plt+0x11520>
   23a30:	ldr	r4, [fp, #-120]	; 0xffffff88
   23a34:	sub	r0, fp, #144	; 0x90
   23a38:	strb	r6, [fp, #-124]	; 0xffffff84
   23a3c:	bl	12060 <mbsinit@plt>
   23a40:	strb	r6, [fp, #-136]	; 0xffffff78
   23a44:	cmp	r0, #0
   23a48:	strbne	r7, [fp, #-148]	; 0xffffff6c
   23a4c:	cmp	r4, #0
   23a50:	bne	23a60 <__assert_fail@plt+0x1146c>
   23a54:	bl	125a0 <abort@plt>
   23a58:	str	r6, [fp, #-128]	; 0xffffff80
   23a5c:	strb	r7, [fp, #-124]	; 0xffffff84
   23a60:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23a64:	ldr	r3, [fp, #-128]	; 0xffffff80
   23a68:	subs	r5, r5, #1
   23a6c:	add	r4, r4, r3
   23a70:	strb	r7, [fp, #-136]	; 0xffffff78
   23a74:	str	r4, [fp, #-132]	; 0xffffff7c
   23a78:	bne	239b4 <__assert_fail@plt+0x113c0>
   23a7c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   23a80:	cmp	r3, #0
   23a84:	beq	2387c <__assert_fail@plt+0x11288>
   23a88:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   23a8c:	cmp	r3, #0
   23a90:	ldrne	r4, [fp, #-64]	; 0xffffffc0
   23a94:	beq	23970 <__assert_fail@plt+0x1137c>
   23a98:	cmp	r4, #0
   23a9c:	beq	2392c <__assert_fail@plt+0x11338>
   23aa0:	add	r3, r8, r8, lsl #2
   23aa4:	add	r3, sl, r3, lsl #3
   23aa8:	ldrb	r2, [r3, #8]
   23aac:	cmp	r2, #0
   23ab0:	beq	23978 <__assert_fail@plt+0x11384>
   23ab4:	ldr	r3, [r3, #12]
   23ab8:	cmp	r4, r3
   23abc:	bne	23988 <__assert_fail@plt+0x11394>
   23ac0:	ldr	r4, [fp, #-72]	; 0xffffffb8
   23ac4:	ldr	r5, [fp, #-76]	; 0xffffffb4
   23ac8:	b	23ca8 <__assert_fail@plt+0x116b4>
   23acc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   23ad0:	cmp	r3, #0
   23ad4:	ldrne	r4, [fp, #-120]	; 0xffffff88
   23ad8:	beq	23a60 <__assert_fail@plt+0x1146c>
   23adc:	b	23a4c <__assert_fail@plt+0x11458>
   23ae0:	str	r6, [fp, #-128]	; 0xffffff80
   23ae4:	ldrb	r3, [r4]
   23ae8:	strb	r6, [fp, #-124]	; 0xffffff84
   23aec:	strb	r6, [fp, #-136]	; 0xffffff78
   23af0:	str	r3, [fp, #-120]	; 0xffffff88
   23af4:	mov	r4, r3
   23af8:	b	23a4c <__assert_fail@plt+0x11458>
   23afc:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23b00:	mov	r0, r4
   23b04:	bl	12300 <strlen@plt>
   23b08:	strb	r7, [fp, #-124]	; 0xffffff84
   23b0c:	str	r0, [fp, #-128]	; 0xffffff80
   23b10:	b	23a64 <__assert_fail@plt+0x11470>
   23b14:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23b18:	str	r6, [fp, #-128]	; 0xffffff80
   23b1c:	ldrb	r3, [r4]
   23b20:	cmp	r3, #0
   23b24:	bne	23e60 <__assert_fail@plt+0x1186c>
   23b28:	ldr	r4, [fp, #-120]	; 0xffffff88
   23b2c:	cmp	r4, #0
   23b30:	beq	23a34 <__assert_fail@plt+0x11440>
   23b34:	ldr	r3, [pc, #828]	; 23e78 <__assert_fail@plt+0x11884>
   23b38:	mov	r2, #172	; 0xac
   23b3c:	ldr	r1, [pc, #824]	; 23e7c <__assert_fail@plt+0x11888>
   23b40:	ldr	r0, [pc, #824]	; 23e80 <__assert_fail@plt+0x1188c>
   23b44:	bl	125f4 <__assert_fail@plt>
   23b48:	sub	r0, fp, #200	; 0xc8
   23b4c:	bl	12060 <mbsinit@plt>
   23b50:	cmp	r0, #0
   23b54:	beq	23e4c <__assert_fail@plt+0x11858>
   23b58:	strb	r7, [fp, #-204]	; 0xffffff34
   23b5c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   23b60:	mov	r1, r0
   23b64:	mov	r0, r4
   23b68:	bl	2bc80 <__assert_fail@plt+0x1968c>
   23b6c:	sub	r3, fp, #200	; 0xc8
   23b70:	mov	r1, r4
   23b74:	mov	r2, r0
   23b78:	sub	r0, fp, #176	; 0xb0
   23b7c:	bl	2fe64 <__assert_fail@plt+0x1d870>
   23b80:	cmn	r0, #1
   23b84:	str	r0, [fp, #-184]	; 0xffffff48
   23b88:	strbeq	r8, [fp, #-180]	; 0xffffff4c
   23b8c:	streq	r7, [fp, #-184]	; 0xffffff48
   23b90:	beq	23c38 <__assert_fail@plt+0x11644>
   23b94:	cmn	r0, #2
   23b98:	beq	23c28 <__assert_fail@plt+0x11634>
   23b9c:	cmp	r0, #0
   23ba0:	beq	23cdc <__assert_fail@plt+0x116e8>
   23ba4:	ldr	r4, [fp, #-176]	; 0xffffff50
   23ba8:	sub	r0, fp, #200	; 0xc8
   23bac:	strb	r7, [fp, #-180]	; 0xffffff4c
   23bb0:	bl	12060 <mbsinit@plt>
   23bb4:	strb	r7, [fp, #-192]	; 0xffffff40
   23bb8:	cmp	r0, #0
   23bbc:	strbne	r8, [fp, #-204]	; 0xffffff34
   23bc0:	cmp	r4, #0
   23bc4:	beq	23774 <__assert_fail@plt+0x11180>
   23bc8:	mov	r9, r7
   23bcc:	ldr	r4, [fp, #-188]	; 0xffffff44
   23bd0:	sub	r3, fp, #172	; 0xac
   23bd4:	cmp	r4, r3
   23bd8:	strne	r4, [r6, #-16]
   23bdc:	ldrne	r5, [fp, #-184]	; 0xffffff48
   23be0:	beq	23da8 <__assert_fail@plt+0x117b4>
   23be4:	cmp	r9, #0
   23be8:	add	r4, r4, r5
   23bec:	ldrne	r3, [fp, #-176]	; 0xffffff50
   23bf0:	str	r5, [r6, #-12]
   23bf4:	strb	r9, [r6, #-8]
   23bf8:	strne	r3, [r6, #-4]
   23bfc:	str	r4, [fp, #-188]	; 0xffffff44
   23c00:	add	r6, r6, #40	; 0x28
   23c04:	strb	r8, [fp, #-192]	; 0xffffff40
   23c08:	b	23728 <__assert_fail@plt+0x11134>
   23c0c:	str	r6, [fp, #-72]	; 0xffffffb8
   23c10:	ldrb	r3, [r5]
   23c14:	strb	r6, [fp, #-68]	; 0xffffffbc
   23c18:	strb	r6, [fp, #-80]	; 0xffffffb0
   23c1c:	str	r3, [fp, #-64]	; 0xffffffc0
   23c20:	mov	r4, r3
   23c24:	b	23924 <__assert_fail@plt+0x11330>
   23c28:	ldr	r0, [fp, #-188]	; 0xffffff44
   23c2c:	bl	12300 <strlen@plt>
   23c30:	strb	r8, [fp, #-180]	; 0xffffff4c
   23c34:	str	r0, [fp, #-184]	; 0xffffff48
   23c38:	strb	r7, [fp, #-192]	; 0xffffff40
   23c3c:	mov	r9, r8
   23c40:	b	23bcc <__assert_fail@plt+0x115d8>
   23c44:	ldrb	r3, [fp, #-136]	; 0xffffff78
   23c48:	cmp	r3, #0
   23c4c:	beq	23d00 <__assert_fail@plt+0x1170c>
   23c50:	ldrb	r3, [fp, #-124]	; 0xffffff84
   23c54:	cmp	r3, #0
   23c58:	ldrne	r4, [fp, #-120]	; 0xffffff88
   23c5c:	bne	23d9c <__assert_fail@plt+0x117a8>
   23c60:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23c64:	ldr	r3, [fp, #-128]	; 0xffffff80
   23c68:	ldr	r5, [fp, #-76]	; 0xffffffb4
   23c6c:	add	r4, r4, r3
   23c70:	ldr	r3, [fp, #-72]	; 0xffffffb8
   23c74:	strb	r7, [fp, #-136]	; 0xffffff78
   23c78:	add	r5, r5, r3
   23c7c:	strb	r7, [fp, #-80]	; 0xffffffb0
   23c80:	str	r4, [fp, #-132]	; 0xffffff7c
   23c84:	str	r5, [fp, #-76]	; 0xffffffb4
   23c88:	b	23880 <__assert_fail@plt+0x1128c>
   23c8c:	ldr	r5, [fp, #-76]	; 0xffffffb4
   23c90:	ldr	r0, [r3]
   23c94:	mov	r1, r5
   23c98:	mov	r2, r4
   23c9c:	bl	12084 <memcmp@plt>
   23ca0:	cmp	r0, #0
   23ca4:	bne	23988 <__assert_fail@plt+0x11394>
   23ca8:	ldr	r3, [fp, #-208]	; 0xffffff30
   23cac:	add	r8, r8, #1
   23cb0:	add	r5, r5, r4
   23cb4:	cmp	r3, r8
   23cb8:	str	r5, [fp, #-76]	; 0xffffffb4
   23cbc:	strb	r7, [fp, #-80]	; 0xffffffb0
   23cc0:	bne	23880 <__assert_fail@plt+0x1128c>
   23cc4:	ldr	r2, [fp, #-220]	; 0xffffff24
   23cc8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   23ccc:	str	r3, [r2]
   23cd0:	b	2392c <__assert_fail@plt+0x11338>
   23cd4:	str	r6, [r7]
   23cd8:	b	23808 <__assert_fail@plt+0x11214>
   23cdc:	ldr	r3, [fp, #-188]	; 0xffffff44
   23ce0:	str	r7, [fp, #-184]	; 0xffffff48
   23ce4:	ldrb	r3, [r3]
   23ce8:	cmp	r3, #0
   23cec:	bne	23e60 <__assert_fail@plt+0x1186c>
   23cf0:	ldr	r4, [fp, #-176]	; 0xffffff50
   23cf4:	cmp	r4, #0
   23cf8:	beq	23ba8 <__assert_fail@plt+0x115b4>
   23cfc:	b	23b34 <__assert_fail@plt+0x11540>
   23d00:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   23d04:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23d08:	cmp	r3, #0
   23d0c:	bne	23d40 <__assert_fail@plt+0x1174c>
   23d10:	ldrb	r3, [r4]
   23d14:	and	r2, r3, #31
   23d18:	lsr	r3, r3, #5
   23d1c:	ldr	r3, [r9, r3, lsl #2]
   23d20:	lsr	r3, r3, r2
   23d24:	tst	r3, #1
   23d28:	bne	23dc4 <__assert_fail@plt+0x117d0>
   23d2c:	sub	r0, fp, #144	; 0x90
   23d30:	bl	12060 <mbsinit@plt>
   23d34:	cmp	r0, #0
   23d38:	beq	23e4c <__assert_fail@plt+0x11858>
   23d3c:	strb	r6, [fp, #-148]	; 0xffffff6c
   23d40:	bl	12198 <__ctype_get_mb_cur_max@plt>
   23d44:	mov	r1, r0
   23d48:	mov	r0, r4
   23d4c:	bl	2bc80 <__assert_fail@plt+0x1968c>
   23d50:	sub	r3, fp, #144	; 0x90
   23d54:	mov	r1, r4
   23d58:	mov	r2, r0
   23d5c:	sub	r0, fp, #120	; 0x78
   23d60:	bl	2fe64 <__assert_fail@plt+0x1d870>
   23d64:	cmn	r0, #1
   23d68:	str	r0, [fp, #-128]	; 0xffffff80
   23d6c:	beq	23e04 <__assert_fail@plt+0x11810>
   23d70:	cmn	r0, #2
   23d74:	beq	23e10 <__assert_fail@plt+0x1181c>
   23d78:	cmp	r0, #0
   23d7c:	beq	23e28 <__assert_fail@plt+0x11834>
   23d80:	ldr	r4, [fp, #-120]	; 0xffffff88
   23d84:	sub	r0, fp, #144	; 0x90
   23d88:	strb	r6, [fp, #-124]	; 0xffffff84
   23d8c:	bl	12060 <mbsinit@plt>
   23d90:	strb	r6, [fp, #-136]	; 0xffffff78
   23d94:	cmp	r0, #0
   23d98:	strbne	r7, [fp, #-148]	; 0xffffff6c
   23d9c:	cmp	r4, #0
   23da0:	beq	23a54 <__assert_fail@plt+0x11460>
   23da4:	b	23c60 <__assert_fail@plt+0x1166c>
   23da8:	ldr	r5, [fp, #-184]	; 0xffffff48
   23dac:	sub	r1, fp, #172	; 0xac
   23db0:	mov	r2, r5
   23db4:	mov	r0, r6
   23db8:	bl	12024 <memcpy@plt>
   23dbc:	str	r6, [r6, #-16]
   23dc0:	b	23be4 <__assert_fail@plt+0x115f0>
   23dc4:	str	r6, [fp, #-128]	; 0xffffff80
   23dc8:	ldrb	r3, [r4]
   23dcc:	strb	r6, [fp, #-124]	; 0xffffff84
   23dd0:	strb	r6, [fp, #-136]	; 0xffffff78
   23dd4:	str	r3, [fp, #-120]	; 0xffffff88
   23dd8:	mov	r4, r3
   23ddc:	b	23d9c <__assert_fail@plt+0x117a8>
   23de0:	ldr	r5, [fp, #-76]	; 0xffffffb4
   23de4:	str	r6, [fp, #-72]	; 0xffffffb8
   23de8:	ldrb	r3, [r5]
   23dec:	cmp	r3, #0
   23df0:	bne	23e60 <__assert_fail@plt+0x1186c>
   23df4:	ldr	r4, [fp, #-64]	; 0xffffffc0
   23df8:	cmp	r4, #0
   23dfc:	beq	2390c <__assert_fail@plt+0x11318>
   23e00:	b	23b34 <__assert_fail@plt+0x11540>
   23e04:	str	r6, [fp, #-128]	; 0xffffff80
   23e08:	strb	r7, [fp, #-124]	; 0xffffff84
   23e0c:	b	23c60 <__assert_fail@plt+0x1166c>
   23e10:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23e14:	mov	r0, r4
   23e18:	bl	12300 <strlen@plt>
   23e1c:	strb	r7, [fp, #-124]	; 0xffffff84
   23e20:	str	r0, [fp, #-128]	; 0xffffff80
   23e24:	b	23c64 <__assert_fail@plt+0x11670>
   23e28:	ldr	r4, [fp, #-132]	; 0xffffff7c
   23e2c:	str	r6, [fp, #-128]	; 0xffffff80
   23e30:	ldrb	r3, [r4]
   23e34:	cmp	r3, #0
   23e38:	bne	23e60 <__assert_fail@plt+0x1186c>
   23e3c:	ldr	r4, [fp, #-120]	; 0xffffff88
   23e40:	cmp	r4, #0
   23e44:	beq	23d84 <__assert_fail@plt+0x11790>
   23e48:	b	23b34 <__assert_fail@plt+0x11540>
   23e4c:	ldr	r3, [pc, #36]	; 23e78 <__assert_fail@plt+0x11884>
   23e50:	mov	r2, #143	; 0x8f
   23e54:	ldr	r1, [pc, #32]	; 23e7c <__assert_fail@plt+0x11888>
   23e58:	ldr	r0, [pc, #36]	; 23e84 <__assert_fail@plt+0x11890>
   23e5c:	bl	125f4 <__assert_fail@plt>
   23e60:	ldr	r3, [pc, #16]	; 23e78 <__assert_fail@plt+0x11884>
   23e64:	mov	r2, #171	; 0xab
   23e68:	ldr	r1, [pc, #12]	; 23e7c <__assert_fail@plt+0x11888>
   23e6c:	ldr	r0, [pc, #20]	; 23e88 <__assert_fail@plt+0x11894>
   23e70:	bl	125f4 <__assert_fail@plt>
   23e74:	andeq	r6, r4, r8, ror #4
   23e78:	andeq	r4, r4, r4, asr sl
   23e7c:	andeq	r4, r4, r8, ror #20
   23e80:	andeq	r4, r4, r4, lsr #21
   23e84:	andeq	r4, r4, r4, ror sl
   23e88:	andeq	r4, r4, ip, lsl #21
   23e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e90:	sub	sp, sp, #300	; 0x12c
   23e94:	mov	fp, r1
   23e98:	str	r0, [sp, #4]
   23e9c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   23ea0:	cmp	r0, #1
   23ea4:	bls	24064 <__assert_fail@plt+0x11a70>
   23ea8:	ldrb	r2, [fp]
   23eac:	ldr	r9, [pc, #3028]	; 24a88 <__assert_fail@plt+0x12494>
   23eb0:	mov	r1, #0
   23eb4:	and	r0, r2, #31
   23eb8:	lsr	r3, r2, #5
   23ebc:	str	fp, [sp, #32]
   23ec0:	ldr	r3, [r9, r3, lsl #2]
   23ec4:	str	r1, [sp, #24]
   23ec8:	strb	r1, [sp, #16]
   23ecc:	lsr	r3, r3, r0
   23ed0:	ands	r4, r3, #1
   23ed4:	str	r1, [sp, #20]
   23ed8:	strb	r1, [sp, #28]
   23edc:	beq	23fc8 <__assert_fail@plt+0x119d4>
   23ee0:	mov	r3, #1
   23ee4:	mov	r4, r2
   23ee8:	str	r3, [sp, #36]	; 0x24
   23eec:	strb	r3, [sp, #40]	; 0x28
   23ef0:	cmp	r4, #0
   23ef4:	mov	r3, #1
   23ef8:	str	r2, [sp, #44]	; 0x2c
   23efc:	strb	r3, [sp, #28]
   23f00:	beq	24058 <__assert_fail@plt+0x11a64>
   23f04:	ldr	r1, [sp, #4]
   23f08:	mov	r3, #0
   23f0c:	mov	sl, #1
   23f10:	str	fp, [sp, #88]	; 0x58
   23f14:	str	fp, [sp, #12]
   23f18:	mov	r8, r3
   23f1c:	mov	r7, r3
   23f20:	mov	r5, sl
   23f24:	mov	r4, r1
   23f28:	mov	fp, r3
   23f2c:	str	r1, [sp, #144]	; 0x90
   23f30:	strb	r3, [sp, #72]	; 0x48
   23f34:	str	r3, [sp, #76]	; 0x4c
   23f38:	strb	r3, [sp, #84]	; 0x54
   23f3c:	strb	r3, [sp, #128]	; 0x80
   23f40:	str	r3, [sp, #132]	; 0x84
   23f44:	strb	r3, [sp, #140]	; 0x8c
   23f48:	str	r3, [sp, #8]
   23f4c:	str	r3, [sp, #80]	; 0x50
   23f50:	str	r3, [sp, #136]	; 0x88
   23f54:	ldrb	r3, [sp, #128]	; 0x80
   23f58:	cmp	r3, #0
   23f5c:	bne	241c0 <__assert_fail@plt+0x11bcc>
   23f60:	ldrb	r3, [r4]
   23f64:	and	r2, r3, #31
   23f68:	lsr	r3, r3, #5
   23f6c:	ldr	r3, [r9, r3, lsl #2]
   23f70:	lsr	r3, r3, r2
   23f74:	tst	r3, #1
   23f78:	beq	241ac <__assert_fail@plt+0x11bb8>
   23f7c:	str	r5, [sp, #148]	; 0x94
   23f80:	ldrb	r4, [r4]
   23f84:	strb	r5, [sp, #152]	; 0x98
   23f88:	str	r4, [sp, #156]	; 0x9c
   23f8c:	cmp	r4, #0
   23f90:	strb	r5, [sp, #140]	; 0x8c
   23f94:	beq	24194 <__assert_fail@plt+0x11ba0>
   23f98:	cmp	fp, #9
   23f9c:	movls	r2, #0
   23fa0:	andhi	r2, sl, #1
   23fa4:	cmp	r2, #0
   23fa8:	beq	249e0 <__assert_fail@plt+0x123ec>
   23fac:	add	r3, fp, fp, lsl #2
   23fb0:	cmp	r8, r3
   23fb4:	bcs	24284 <__assert_fail@plt+0x11c90>
   23fb8:	add	r3, r8, #1
   23fbc:	mov	sl, r2
   23fc0:	ldr	r8, [sp, #8]
   23fc4:	b	243a0 <__assert_fail@plt+0x11dac>
   23fc8:	add	r0, sp, #20
   23fcc:	bl	12060 <mbsinit@plt>
   23fd0:	cmp	r0, #0
   23fd4:	beq	24a38 <__assert_fail@plt+0x12444>
   23fd8:	mov	r5, #1
   23fdc:	strb	r5, [sp, #16]
   23fe0:	bl	12198 <__ctype_get_mb_cur_max@plt>
   23fe4:	mov	r1, r0
   23fe8:	mov	r0, fp
   23fec:	bl	2bc80 <__assert_fail@plt+0x1968c>
   23ff0:	add	r3, sp, #20
   23ff4:	mov	r1, fp
   23ff8:	mov	r2, r0
   23ffc:	add	r0, sp, #44	; 0x2c
   24000:	bl	2fe64 <__assert_fail@plt+0x1d870>
   24004:	cmn	r0, #1
   24008:	str	r0, [sp, #36]	; 0x24
   2400c:	strbeq	r4, [sp, #40]	; 0x28
   24010:	streq	r5, [sp, #36]	; 0x24
   24014:	beq	24460 <__assert_fail@plt+0x11e6c>
   24018:	cmn	r0, #2
   2401c:	beq	24450 <__assert_fail@plt+0x11e5c>
   24020:	cmp	r0, #0
   24024:	beq	24980 <__assert_fail@plt+0x1238c>
   24028:	ldr	r4, [sp, #44]	; 0x2c
   2402c:	mov	r3, #1
   24030:	add	r0, sp, #20
   24034:	strb	r3, [sp, #40]	; 0x28
   24038:	bl	12060 <mbsinit@plt>
   2403c:	cmp	r0, #0
   24040:	movne	r3, #0
   24044:	strbne	r3, [sp, #16]
   24048:	mov	r3, #1
   2404c:	cmp	r4, #0
   24050:	strb	r3, [sp, #28]
   24054:	bne	23f04 <__assert_fail@plt+0x11910>
   24058:	ldr	r0, [sp, #4]
   2405c:	add	sp, sp, #300	; 0x12c
   24060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24064:	ldrb	r7, [fp]
   24068:	cmp	r7, #0
   2406c:	beq	24058 <__assert_fail@plt+0x11a64>
   24070:	ldr	r2, [sp, #4]
   24074:	add	r8, fp, #1
   24078:	ldrb	r3, [r2]
   2407c:	cmp	r3, #0
   24080:	beq	24194 <__assert_fail@plt+0x11ba0>
   24084:	mov	r5, #0
   24088:	add	r6, r2, #1
   2408c:	cmp	r7, r3
   24090:	mov	r4, r5
   24094:	mov	r9, r5
   24098:	mov	sl, fp
   2409c:	mov	lr, #1
   240a0:	add	r5, r5, #1
   240a4:	sub	r0, r6, #1
   240a8:	beq	24140 <__assert_fail@plt+0x11b4c>
   240ac:	ldrb	r3, [r6]
   240b0:	cmp	r3, #0
   240b4:	beq	24194 <__assert_fail@plt+0x11ba0>
   240b8:	add	r4, r4, #1
   240bc:	cmp	r5, #9
   240c0:	movls	r3, #0
   240c4:	andhi	r3, lr, #1
   240c8:	cmp	r3, #0
   240cc:	beq	2412c <__assert_fail@plt+0x11b38>
   240d0:	add	r2, r5, r5, lsl #2
   240d4:	cmp	r4, r2
   240d8:	bcc	241a0 <__assert_fail@plt+0x11bac>
   240dc:	cmp	sl, #0
   240e0:	str	r3, [sp, #4]
   240e4:	beq	24104 <__assert_fail@plt+0x11b10>
   240e8:	mov	r0, sl
   240ec:	sub	r1, r4, r9
   240f0:	bl	12408 <strnlen@plt>
   240f4:	ldrb	r2, [sl, r0]!
   240f8:	cmp	r2, #0
   240fc:	bne	24434 <__assert_fail@plt+0x11e40>
   24100:	mov	r9, r4
   24104:	mov	r0, fp
   24108:	bl	12300 <strlen@plt>
   2410c:	add	r3, sp, #240	; 0xf0
   24110:	mov	r1, fp
   24114:	mov	r2, r0
   24118:	mov	r0, r6
   2411c:	bl	23520 <__assert_fail@plt+0x10f2c>
   24120:	subs	lr, r0, #0
   24124:	bne	249d8 <__assert_fail@plt+0x123e4>
   24128:	mov	sl, lr
   2412c:	ldrb	r3, [r6], #1
   24130:	cmp	r7, r3
   24134:	add	r5, r5, #1
   24138:	sub	r0, r6, #1
   2413c:	bne	240ac <__assert_fail@plt+0x11ab8>
   24140:	ldrb	r3, [fp, #1]
   24144:	cmp	r3, #0
   24148:	beq	2405c <__assert_fail@plt+0x11a68>
   2414c:	ldrb	r2, [r6]
   24150:	cmp	r2, #0
   24154:	beq	24194 <__assert_fail@plt+0x11ba0>
   24158:	cmp	r2, r3
   2415c:	add	r4, r4, #2
   24160:	bne	240bc <__assert_fail@plt+0x11ac8>
   24164:	mov	ip, r6
   24168:	mov	r1, r8
   2416c:	b	2417c <__assert_fail@plt+0x11b88>
   24170:	cmp	r3, r2
   24174:	add	r4, r4, #1
   24178:	bne	240bc <__assert_fail@plt+0x11ac8>
   2417c:	ldrb	r3, [r1, #1]!
   24180:	cmp	r3, #0
   24184:	beq	2405c <__assert_fail@plt+0x11a68>
   24188:	ldrb	r2, [ip, #1]!
   2418c:	cmp	r2, #0
   24190:	bne	24170 <__assert_fail@plt+0x11b7c>
   24194:	mov	r0, #0
   24198:	add	sp, sp, #300	; 0x12c
   2419c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241a0:	mov	lr, r3
   241a4:	ldrb	r3, [r6], #1
   241a8:	b	24130 <__assert_fail@plt+0x11b3c>
   241ac:	add	r0, sp, #132	; 0x84
   241b0:	bl	12060 <mbsinit@plt>
   241b4:	cmp	r0, #0
   241b8:	beq	24a38 <__assert_fail@plt+0x12444>
   241bc:	strb	r5, [sp, #128]	; 0x80
   241c0:	bl	12198 <__ctype_get_mb_cur_max@plt>
   241c4:	mov	r1, r0
   241c8:	mov	r0, r4
   241cc:	bl	2bc80 <__assert_fail@plt+0x1968c>
   241d0:	add	r3, sp, #132	; 0x84
   241d4:	mov	r1, r4
   241d8:	mov	r2, r0
   241dc:	add	r0, sp, #156	; 0x9c
   241e0:	bl	2fe64 <__assert_fail@plt+0x1d870>
   241e4:	cmn	r0, #1
   241e8:	str	r0, [sp, #148]	; 0x94
   241ec:	strbeq	r7, [sp, #152]	; 0x98
   241f0:	streq	r5, [sp, #148]	; 0x94
   241f4:	beq	24234 <__assert_fail@plt+0x11c40>
   241f8:	cmn	r0, #2
   241fc:	beq	24224 <__assert_fail@plt+0x11c30>
   24200:	cmp	r0, #0
   24204:	beq	248d4 <__assert_fail@plt+0x122e0>
   24208:	ldr	r4, [sp, #156]	; 0x9c
   2420c:	add	r0, sp, #132	; 0x84
   24210:	strb	r5, [sp, #152]	; 0x98
   24214:	bl	12060 <mbsinit@plt>
   24218:	cmp	r0, #0
   2421c:	strbne	r7, [sp, #128]	; 0x80
   24220:	b	23f8c <__assert_fail@plt+0x11998>
   24224:	ldr	r0, [sp, #144]	; 0x90
   24228:	bl	12300 <strlen@plt>
   2422c:	strb	r7, [sp, #152]	; 0x98
   24230:	str	r0, [sp, #148]	; 0x94
   24234:	cmp	fp, #9
   24238:	movls	r3, #0
   2423c:	andhi	r3, sl, #1
   24240:	cmp	r3, #0
   24244:	strb	r5, [sp, #140]	; 0x8c
   24248:	addeq	r8, r8, #1
   2424c:	bne	24278 <__assert_fail@plt+0x11c84>
   24250:	ldr	r6, [sp, #148]	; 0x94
   24254:	ldr	r3, [sp, #36]	; 0x24
   24258:	ldr	r4, [sp, #144]	; 0x90
   2425c:	cmp	r6, r3
   24260:	beq	24478 <__assert_fail@plt+0x11e84>
   24264:	add	r4, r4, r6
   24268:	str	r4, [sp, #144]	; 0x90
   2426c:	strb	r7, [sp, #140]	; 0x8c
   24270:	add	fp, fp, #1
   24274:	b	23f54 <__assert_fail@plt+0x11960>
   24278:	add	r2, fp, fp, lsl #2
   2427c:	cmp	r8, r2
   24280:	bcc	24a60 <__assert_fail@plt+0x1246c>
   24284:	ldr	r3, [sp, #8]
   24288:	subs	r6, r8, r3
   2428c:	ldrb	r3, [sp, #84]	; 0x54
   24290:	beq	24a6c <__assert_fail@plt+0x12478>
   24294:	cmp	r3, #0
   24298:	beq	24448 <__assert_fail@plt+0x11e54>
   2429c:	ldrb	r3, [sp, #96]	; 0x60
   242a0:	cmp	r3, #0
   242a4:	ldrne	r4, [sp, #100]	; 0x64
   242a8:	bne	24364 <__assert_fail@plt+0x11d70>
   242ac:	ldr	r4, [sp, #88]	; 0x58
   242b0:	ldr	r3, [sp, #92]	; 0x5c
   242b4:	subs	r6, r6, #1
   242b8:	add	r4, r4, r3
   242bc:	strb	r7, [sp, #84]	; 0x54
   242c0:	str	r4, [sp, #88]	; 0x58
   242c4:	mov	sl, r4
   242c8:	beq	245b0 <__assert_fail@plt+0x11fbc>
   242cc:	ldrb	r3, [sp, #72]	; 0x48
   242d0:	cmp	r3, #0
   242d4:	bne	24308 <__assert_fail@plt+0x11d14>
   242d8:	ldrb	r3, [r4]
   242dc:	and	r2, r3, #31
   242e0:	lsr	r3, r3, #5
   242e4:	ldr	r3, [r9, r3, lsl #2]
   242e8:	lsr	r3, r3, r2
   242ec:	tst	r3, #1
   242f0:	bne	243d0 <__assert_fail@plt+0x11ddc>
   242f4:	add	r0, sp, #76	; 0x4c
   242f8:	bl	12060 <mbsinit@plt>
   242fc:	cmp	r0, #0
   24300:	beq	24a38 <__assert_fail@plt+0x12444>
   24304:	strb	r5, [sp, #72]	; 0x48
   24308:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2430c:	mov	r1, r0
   24310:	mov	r0, r4
   24314:	bl	2bc80 <__assert_fail@plt+0x1968c>
   24318:	add	r3, sp, #76	; 0x4c
   2431c:	mov	r1, r4
   24320:	mov	r2, r0
   24324:	add	r0, sp, #100	; 0x64
   24328:	bl	2fe64 <__assert_fail@plt+0x1d870>
   2432c:	cmn	r0, #1
   24330:	str	r0, [sp, #92]	; 0x5c
   24334:	beq	243ec <__assert_fail@plt+0x11df8>
   24338:	cmn	r0, #2
   2433c:	beq	243f8 <__assert_fail@plt+0x11e04>
   24340:	cmp	r0, #0
   24344:	beq	24410 <__assert_fail@plt+0x11e1c>
   24348:	ldr	r4, [sp, #100]	; 0x64
   2434c:	add	r0, sp, #76	; 0x4c
   24350:	strb	r5, [sp, #96]	; 0x60
   24354:	bl	12060 <mbsinit@plt>
   24358:	strb	r5, [sp, #84]	; 0x54
   2435c:	cmp	r0, #0
   24360:	strbne	r7, [sp, #72]	; 0x48
   24364:	cmp	r4, #0
   24368:	bne	242ac <__assert_fail@plt+0x11cb8>
   2436c:	ldrb	r3, [sp, #84]	; 0x54
   24370:	cmp	r3, #0
   24374:	beq	245ac <__assert_fail@plt+0x11fb8>
   24378:	add	r2, sp, #240	; 0xf0
   2437c:	ldr	r1, [sp, #12]
   24380:	ldr	r0, [sp, #4]
   24384:	bl	23688 <__assert_fail@plt+0x11094>
   24388:	subs	sl, r0, #0
   2438c:	bne	249d8 <__assert_fail@plt+0x123e4>
   24390:	ldrb	r3, [sp, #152]	; 0x98
   24394:	cmp	r3, #0
   24398:	add	r3, r8, #1
   2439c:	beq	2446c <__assert_fail@plt+0x11e78>
   243a0:	ldrb	r2, [sp, #40]	; 0x28
   243a4:	cmp	r2, #0
   243a8:	beq	2446c <__assert_fail@plt+0x11e78>
   243ac:	ldr	r1, [sp, #156]	; 0x9c
   243b0:	ldr	r2, [sp, #44]	; 0x2c
   243b4:	str	r8, [sp, #8]
   243b8:	cmp	r1, r2
   243bc:	beq	24978 <__assert_fail@plt+0x12384>
   243c0:	ldr	r4, [sp, #144]	; 0x90
   243c4:	mov	r8, r3
   243c8:	ldr	r6, [sp, #148]	; 0x94
   243cc:	b	24264 <__assert_fail@plt+0x11c70>
   243d0:	str	r5, [sp, #92]	; 0x5c
   243d4:	ldrb	r3, [r4]
   243d8:	strb	r5, [sp, #96]	; 0x60
   243dc:	strb	r5, [sp, #84]	; 0x54
   243e0:	str	r3, [sp, #100]	; 0x64
   243e4:	mov	r4, r3
   243e8:	b	24364 <__assert_fail@plt+0x11d70>
   243ec:	str	r5, [sp, #92]	; 0x5c
   243f0:	strb	r7, [sp, #96]	; 0x60
   243f4:	b	242ac <__assert_fail@plt+0x11cb8>
   243f8:	ldr	r4, [sp, #88]	; 0x58
   243fc:	mov	r0, r4
   24400:	bl	12300 <strlen@plt>
   24404:	strb	r7, [sp, #96]	; 0x60
   24408:	str	r0, [sp, #92]	; 0x5c
   2440c:	b	242b0 <__assert_fail@plt+0x11cbc>
   24410:	ldr	r4, [sp, #88]	; 0x58
   24414:	str	r5, [sp, #92]	; 0x5c
   24418:	ldrb	r3, [r4]
   2441c:	cmp	r3, #0
   24420:	bne	24a4c <__assert_fail@plt+0x12458>
   24424:	ldr	r4, [sp, #100]	; 0x64
   24428:	cmp	r4, #0
   2442c:	beq	2434c <__assert_fail@plt+0x11d58>
   24430:	b	24598 <__assert_fail@plt+0x11fa4>
   24434:	ldr	r3, [sp, #4]
   24438:	mov	r9, r4
   2443c:	mov	lr, r3
   24440:	ldrb	r3, [r6], #1
   24444:	b	24130 <__assert_fail@plt+0x11b3c>
   24448:	ldr	r4, [sp, #88]	; 0x58
   2444c:	b	242cc <__assert_fail@plt+0x11cd8>
   24450:	ldr	r0, [sp, #32]
   24454:	bl	12300 <strlen@plt>
   24458:	strb	r4, [sp, #40]	; 0x28
   2445c:	str	r0, [sp, #36]	; 0x24
   24460:	mov	r3, #1
   24464:	strb	r3, [sp, #28]
   24468:	b	23f04 <__assert_fail@plt+0x11910>
   2446c:	str	r8, [sp, #8]
   24470:	mov	r8, r3
   24474:	b	24250 <__assert_fail@plt+0x11c5c>
   24478:	mov	r2, r6
   2447c:	mov	r0, r4
   24480:	ldr	r1, [sp, #32]
   24484:	bl	12084 <memcmp@plt>
   24488:	cmp	r0, #0
   2448c:	bne	24264 <__assert_fail@plt+0x11c70>
   24490:	add	lr, sp, #128	; 0x80
   24494:	add	ip, sp, #184	; 0xb8
   24498:	ldm	lr!, {r0, r1, r2, r3}
   2449c:	stmia	ip!, {r0, r1, r2, r3}
   244a0:	ldm	lr!, {r0, r1, r2, r3}
   244a4:	strb	r7, [sp, #196]	; 0xc4
   244a8:	stmia	ip!, {r0, r1, r2, r3}
   244ac:	ldm	lr!, {r0, r1, r2, r3}
   244b0:	ldr	r4, [sp, #200]	; 0xc8
   244b4:	stmia	ip!, {r0, r1, r2, r3}
   244b8:	ldm	lr, {r0, r1}
   244bc:	ldr	r3, [sp, #204]	; 0xcc
   244c0:	add	r4, r4, r3
   244c4:	stm	ip, {r0, r1}
   244c8:	str	r4, [sp, #200]	; 0xc8
   244cc:	ldr	r3, [sp, #12]
   244d0:	strb	r7, [sp, #240]	; 0xf0
   244d4:	str	r3, [sp, #256]	; 0x100
   244d8:	ldrb	r3, [r3]
   244dc:	str	r7, [sp, #244]	; 0xf4
   244e0:	str	r7, [sp, #248]	; 0xf8
   244e4:	and	r2, r3, #31
   244e8:	lsr	r1, r3, #5
   244ec:	strb	r7, [sp, #252]	; 0xfc
   244f0:	ldr	r6, [r9, r1, lsl #2]
   244f4:	lsr	r6, r6, r2
   244f8:	ands	r6, r6, #1
   244fc:	beq	24520 <__assert_fail@plt+0x11f2c>
   24500:	mov	r4, r3
   24504:	str	r5, [sp, #260]	; 0x104
   24508:	str	r3, [sp, #268]	; 0x10c
   2450c:	strb	r5, [sp, #264]	; 0x108
   24510:	cmp	r4, #0
   24514:	strb	r5, [sp, #252]	; 0xfc
   24518:	bne	24604 <__assert_fail@plt+0x12010>
   2451c:	bl	125a0 <abort@plt>
   24520:	add	r0, sp, #244	; 0xf4
   24524:	bl	12060 <mbsinit@plt>
   24528:	cmp	r0, #0
   2452c:	beq	24a38 <__assert_fail@plt+0x12444>
   24530:	strb	r5, [sp, #240]	; 0xf0
   24534:	bl	12198 <__ctype_get_mb_cur_max@plt>
   24538:	ldr	r4, [sp, #12]
   2453c:	mov	r1, r0
   24540:	mov	r0, r4
   24544:	bl	2bc80 <__assert_fail@plt+0x1968c>
   24548:	add	r3, sp, #244	; 0xf4
   2454c:	mov	r1, r4
   24550:	mov	r2, r0
   24554:	add	r0, sp, #268	; 0x10c
   24558:	bl	2fe64 <__assert_fail@plt+0x1d870>
   2455c:	cmn	r0, #1
   24560:	str	r0, [sp, #260]	; 0x104
   24564:	beq	249ec <__assert_fail@plt+0x123f8>
   24568:	cmn	r0, #2
   2456c:	beq	249fc <__assert_fail@plt+0x12408>
   24570:	cmp	r0, #0
   24574:	bne	249a4 <__assert_fail@plt+0x123b0>
   24578:	ldr	r4, [sp, #256]	; 0x100
   2457c:	str	r5, [sp, #260]	; 0x104
   24580:	ldrb	r3, [r4]
   24584:	cmp	r3, #0
   24588:	bne	24a4c <__assert_fail@plt+0x12458>
   2458c:	ldr	r4, [sp, #268]	; 0x10c
   24590:	cmp	r4, #0
   24594:	beq	249a8 <__assert_fail@plt+0x123b4>
   24598:	ldr	r3, [pc, #1260]	; 24a8c <__assert_fail@plt+0x12498>
   2459c:	mov	r2, #172	; 0xac
   245a0:	ldr	r1, [pc, #1256]	; 24a90 <__assert_fail@plt+0x1249c>
   245a4:	ldr	r0, [pc, #1256]	; 24a94 <__assert_fail@plt+0x124a0>
   245a8:	bl	125f4 <__assert_fail@plt>
   245ac:	ldr	sl, [sp, #88]	; 0x58
   245b0:	ldrb	r3, [sp, #72]	; 0x48
   245b4:	cmp	r3, #0
   245b8:	bne	2490c <__assert_fail@plt+0x12318>
   245bc:	ldrb	r3, [sl]
   245c0:	and	r2, r3, #31
   245c4:	lsr	r3, r3, #5
   245c8:	ldr	r3, [r9, r3, lsl #2]
   245cc:	lsr	r3, r3, r2
   245d0:	tst	r3, #1
   245d4:	beq	248f8 <__assert_fail@plt+0x12304>
   245d8:	str	r5, [sp, #92]	; 0x5c
   245dc:	ldrb	r3, [sl]
   245e0:	strb	r5, [sp, #96]	; 0x60
   245e4:	strb	r5, [sp, #84]	; 0x54
   245e8:	mov	r4, r3
   245ec:	str	r3, [sp, #100]	; 0x64
   245f0:	cmp	r4, #0
   245f4:	beq	24378 <__assert_fail@plt+0x11d84>
   245f8:	ldrb	r3, [sp, #152]	; 0x98
   245fc:	mov	sl, r5
   24600:	b	24394 <__assert_fail@plt+0x11da0>
   24604:	ldr	r4, [sp, #256]	; 0x100
   24608:	ldr	r3, [sp, #260]	; 0x104
   2460c:	strb	r7, [sp, #252]	; 0xfc
   24610:	add	r4, r4, r3
   24614:	ldrb	r3, [sp, #240]	; 0xf0
   24618:	add	r8, r8, #1
   2461c:	str	r4, [sp, #256]	; 0x100
   24620:	cmp	r3, #0
   24624:	bne	247c4 <__assert_fail@plt+0x121d0>
   24628:	ldrb	r3, [r4]
   2462c:	and	r2, r3, #31
   24630:	lsr	r3, r3, #5
   24634:	ldr	r3, [r9, r3, lsl #2]
   24638:	lsr	r3, r3, r2
   2463c:	tst	r3, #1
   24640:	beq	2485c <__assert_fail@plt+0x12268>
   24644:	str	r5, [sp, #260]	; 0x104
   24648:	ldrb	r4, [r4]
   2464c:	strb	r5, [sp, #264]	; 0x108
   24650:	str	r4, [sp, #268]	; 0x10c
   24654:	cmp	r4, #0
   24658:	strb	r5, [sp, #252]	; 0xfc
   2465c:	bne	24680 <__assert_fail@plt+0x1208c>
   24660:	ldr	r0, [sp, #144]	; 0x90
   24664:	add	sp, sp, #300	; 0x12c
   24668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2466c:	ldr	r0, [sp, #256]	; 0x100
   24670:	bl	12300 <strlen@plt>
   24674:	strb	r7, [sp, #264]	; 0x108
   24678:	str	r0, [sp, #260]	; 0x104
   2467c:	strb	r5, [sp, #252]	; 0xfc
   24680:	ldrb	r3, [sp, #196]	; 0xc4
   24684:	cmp	r3, #0
   24688:	beq	246b8 <__assert_fail@plt+0x120c4>
   2468c:	ldrb	r3, [sp, #208]	; 0xd0
   24690:	cmp	r3, #0
   24694:	ldrne	r4, [sp, #212]	; 0xd4
   24698:	bne	24760 <__assert_fail@plt+0x1216c>
   2469c:	ldr	r2, [sp, #204]	; 0xcc
   246a0:	ldr	r3, [sp, #260]	; 0x104
   246a4:	cmp	r2, r3
   246a8:	beq	24844 <__assert_fail@plt+0x12250>
   246ac:	ldr	r4, [sp, #144]	; 0x90
   246b0:	ldr	r6, [sp, #148]	; 0x94
   246b4:	b	24264 <__assert_fail@plt+0x11c70>
   246b8:	ldrb	r3, [sp, #184]	; 0xb8
   246bc:	ldr	r4, [sp, #200]	; 0xc8
   246c0:	cmp	r3, #0
   246c4:	bne	246f8 <__assert_fail@plt+0x12104>
   246c8:	ldrb	r3, [r4]
   246cc:	and	r2, r3, #31
   246d0:	lsr	r3, r3, #5
   246d4:	ldr	r3, [r9, r3, lsl #2]
   246d8:	lsr	r3, r3, r2
   246dc:	tst	r3, #1
   246e0:	bne	24828 <__assert_fail@plt+0x12234>
   246e4:	add	r0, sp, #188	; 0xbc
   246e8:	bl	12060 <mbsinit@plt>
   246ec:	cmp	r0, #0
   246f0:	beq	24a38 <__assert_fail@plt+0x12444>
   246f4:	strb	r5, [sp, #184]	; 0xb8
   246f8:	bl	12198 <__ctype_get_mb_cur_max@plt>
   246fc:	mov	r1, r0
   24700:	mov	r0, r4
   24704:	bl	2bc80 <__assert_fail@plt+0x1968c>
   24708:	add	r3, sp, #188	; 0xbc
   2470c:	mov	r1, r4
   24710:	mov	r2, r0
   24714:	add	r0, sp, #212	; 0xd4
   24718:	bl	2fe64 <__assert_fail@plt+0x1d870>
   2471c:	cmn	r0, #1
   24720:	str	r0, [sp, #204]	; 0xcc
   24724:	strbeq	r7, [sp, #208]	; 0xd0
   24728:	streq	r5, [sp, #204]	; 0xcc
   2472c:	strbeq	r5, [sp, #196]	; 0xc4
   24730:	beq	2469c <__assert_fail@plt+0x120a8>
   24734:	cmn	r0, #2
   24738:	beq	24874 <__assert_fail@plt+0x12280>
   2473c:	cmp	r0, #0
   24740:	beq	248b0 <__assert_fail@plt+0x122bc>
   24744:	ldr	r4, [sp, #212]	; 0xd4
   24748:	add	r0, sp, #188	; 0xbc
   2474c:	strb	r5, [sp, #208]	; 0xd0
   24750:	bl	12060 <mbsinit@plt>
   24754:	strb	r5, [sp, #196]	; 0xc4
   24758:	cmp	r0, #0
   2475c:	strbne	r7, [sp, #184]	; 0xb8
   24760:	cmp	r4, #0
   24764:	beq	24194 <__assert_fail@plt+0x11ba0>
   24768:	ldrb	r3, [sp, #264]	; 0x108
   2476c:	cmp	r3, #0
   24770:	beq	2469c <__assert_fail@plt+0x120a8>
   24774:	ldr	r0, [sp, #268]	; 0x10c
   24778:	subs	r0, r0, r4
   2477c:	movne	r0, #1
   24780:	cmp	r0, #0
   24784:	add	r1, r8, #1
   24788:	bne	246ac <__assert_fail@plt+0x120b8>
   2478c:	ldr	r3, [sp, #200]	; 0xc8
   24790:	ldr	r2, [sp, #204]	; 0xcc
   24794:	ldr	r4, [sp, #256]	; 0x100
   24798:	add	r3, r3, r2
   2479c:	str	r3, [sp, #200]	; 0xc8
   247a0:	ldrb	r3, [sp, #240]	; 0xf0
   247a4:	ldr	r2, [sp, #260]	; 0x104
   247a8:	strb	r0, [sp, #196]	; 0xc4
   247ac:	add	r4, r4, r2
   247b0:	cmp	r3, #0
   247b4:	strb	r0, [sp, #252]	; 0xfc
   247b8:	mov	r8, r1
   247bc:	str	r4, [sp, #256]	; 0x100
   247c0:	beq	24628 <__assert_fail@plt+0x12034>
   247c4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   247c8:	mov	r1, r0
   247cc:	mov	r0, r4
   247d0:	bl	2bc80 <__assert_fail@plt+0x1968c>
   247d4:	add	r3, sp, #244	; 0xf4
   247d8:	mov	r1, r4
   247dc:	mov	r2, r0
   247e0:	add	r0, sp, #268	; 0x10c
   247e4:	bl	2fe64 <__assert_fail@plt+0x1d870>
   247e8:	cmn	r0, #1
   247ec:	str	r0, [sp, #260]	; 0x104
   247f0:	strbeq	r7, [sp, #264]	; 0x108
   247f4:	streq	r5, [sp, #260]	; 0x104
   247f8:	beq	2467c <__assert_fail@plt+0x12088>
   247fc:	cmn	r0, #2
   24800:	beq	2466c <__assert_fail@plt+0x12078>
   24804:	cmp	r0, #0
   24808:	beq	2488c <__assert_fail@plt+0x12298>
   2480c:	ldr	r4, [sp, #268]	; 0x10c
   24810:	add	r0, sp, #244	; 0xf4
   24814:	strb	r5, [sp, #264]	; 0x108
   24818:	bl	12060 <mbsinit@plt>
   2481c:	cmp	r0, #0
   24820:	strbne	r7, [sp, #240]	; 0xf0
   24824:	b	24654 <__assert_fail@plt+0x12060>
   24828:	str	r5, [sp, #204]	; 0xcc
   2482c:	ldrb	r0, [r4]
   24830:	strb	r5, [sp, #208]	; 0xd0
   24834:	strb	r5, [sp, #196]	; 0xc4
   24838:	str	r0, [sp, #212]	; 0xd4
   2483c:	mov	r4, r0
   24840:	b	24760 <__assert_fail@plt+0x1216c>
   24844:	ldr	r1, [sp, #256]	; 0x100
   24848:	ldr	r0, [sp, #200]	; 0xc8
   2484c:	bl	12084 <memcmp@plt>
   24850:	adds	r0, r0, #0
   24854:	movne	r0, #1
   24858:	b	24780 <__assert_fail@plt+0x1218c>
   2485c:	add	r0, sp, #244	; 0xf4
   24860:	bl	12060 <mbsinit@plt>
   24864:	cmp	r0, #0
   24868:	beq	24a38 <__assert_fail@plt+0x12444>
   2486c:	strb	r5, [sp, #240]	; 0xf0
   24870:	b	247c4 <__assert_fail@plt+0x121d0>
   24874:	ldr	r0, [sp, #200]	; 0xc8
   24878:	bl	12300 <strlen@plt>
   2487c:	strb	r7, [sp, #208]	; 0xd0
   24880:	strb	r5, [sp, #196]	; 0xc4
   24884:	str	r0, [sp, #204]	; 0xcc
   24888:	b	2469c <__assert_fail@plt+0x120a8>
   2488c:	ldr	r3, [sp, #256]	; 0x100
   24890:	str	r5, [sp, #260]	; 0x104
   24894:	ldrb	r3, [r3]
   24898:	cmp	r3, #0
   2489c:	bne	24a4c <__assert_fail@plt+0x12458>
   248a0:	ldr	r4, [sp, #268]	; 0x10c
   248a4:	cmp	r4, #0
   248a8:	beq	24810 <__assert_fail@plt+0x1221c>
   248ac:	b	24598 <__assert_fail@plt+0x11fa4>
   248b0:	ldr	r3, [sp, #200]	; 0xc8
   248b4:	str	r5, [sp, #204]	; 0xcc
   248b8:	ldrb	r3, [r3]
   248bc:	cmp	r3, #0
   248c0:	bne	24a4c <__assert_fail@plt+0x12458>
   248c4:	ldr	r4, [sp, #212]	; 0xd4
   248c8:	cmp	r4, #0
   248cc:	beq	24748 <__assert_fail@plt+0x12154>
   248d0:	b	24598 <__assert_fail@plt+0x11fa4>
   248d4:	ldr	r4, [sp, #144]	; 0x90
   248d8:	str	r5, [sp, #148]	; 0x94
   248dc:	ldrb	r3, [r4]
   248e0:	cmp	r3, #0
   248e4:	bne	24a4c <__assert_fail@plt+0x12458>
   248e8:	ldr	r4, [sp, #156]	; 0x9c
   248ec:	cmp	r4, #0
   248f0:	beq	2420c <__assert_fail@plt+0x11c18>
   248f4:	b	24598 <__assert_fail@plt+0x11fa4>
   248f8:	add	r0, sp, #76	; 0x4c
   248fc:	bl	12060 <mbsinit@plt>
   24900:	cmp	r0, #0
   24904:	beq	24a38 <__assert_fail@plt+0x12444>
   24908:	strb	r5, [sp, #72]	; 0x48
   2490c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   24910:	mov	r1, r0
   24914:	mov	r0, sl
   24918:	bl	2bc80 <__assert_fail@plt+0x1968c>
   2491c:	add	r3, sp, #76	; 0x4c
   24920:	mov	r1, sl
   24924:	mov	r2, r0
   24928:	add	r0, sp, #100	; 0x64
   2492c:	bl	2fe64 <__assert_fail@plt+0x1d870>
   24930:	cmn	r0, #1
   24934:	str	r0, [sp, #92]	; 0x5c
   24938:	strbeq	r7, [sp, #96]	; 0x60
   2493c:	streq	r5, [sp, #92]	; 0x5c
   24940:	strbeq	r5, [sp, #84]	; 0x54
   24944:	beq	245f8 <__assert_fail@plt+0x12004>
   24948:	cmn	r0, #2
   2494c:	beq	249c0 <__assert_fail@plt+0x123cc>
   24950:	cmp	r0, #0
   24954:	beq	24a14 <__assert_fail@plt+0x12420>
   24958:	ldr	r4, [sp, #100]	; 0x64
   2495c:	add	r0, sp, #76	; 0x4c
   24960:	strb	r5, [sp, #96]	; 0x60
   24964:	bl	12060 <mbsinit@plt>
   24968:	strb	r5, [sp, #84]	; 0x54
   2496c:	cmp	r0, #0
   24970:	strbne	r7, [sp, #72]	; 0x48
   24974:	b	245f0 <__assert_fail@plt+0x11ffc>
   24978:	mov	r8, r3
   2497c:	b	24490 <__assert_fail@plt+0x11e9c>
   24980:	ldr	r3, [sp, #32]
   24984:	str	r5, [sp, #36]	; 0x24
   24988:	ldrb	r3, [r3]
   2498c:	cmp	r3, #0
   24990:	bne	24a4c <__assert_fail@plt+0x12458>
   24994:	ldr	r4, [sp, #44]	; 0x2c
   24998:	cmp	r4, #0
   2499c:	beq	2402c <__assert_fail@plt+0x11a38>
   249a0:	b	24598 <__assert_fail@plt+0x11fa4>
   249a4:	ldr	r4, [sp, #268]	; 0x10c
   249a8:	add	r0, sp, #244	; 0xf4
   249ac:	strb	r5, [sp, #264]	; 0x108
   249b0:	bl	12060 <mbsinit@plt>
   249b4:	cmp	r0, #0
   249b8:	strbne	r7, [sp, #240]	; 0xf0
   249bc:	b	24510 <__assert_fail@plt+0x11f1c>
   249c0:	ldr	r0, [sp, #88]	; 0x58
   249c4:	bl	12300 <strlen@plt>
   249c8:	strb	r7, [sp, #96]	; 0x60
   249cc:	strb	r5, [sp, #84]	; 0x54
   249d0:	str	r0, [sp, #92]	; 0x5c
   249d4:	b	245f8 <__assert_fail@plt+0x12004>
   249d8:	ldr	r0, [sp, #240]	; 0xf0
   249dc:	b	2405c <__assert_fail@plt+0x11a68>
   249e0:	add	r3, r8, #1
   249e4:	ldr	r8, [sp, #8]
   249e8:	b	243a0 <__assert_fail@plt+0x11dac>
   249ec:	str	r5, [sp, #260]	; 0x104
   249f0:	strb	r6, [sp, #264]	; 0x108
   249f4:	ldr	r4, [sp, #256]	; 0x100
   249f8:	b	24608 <__assert_fail@plt+0x12014>
   249fc:	ldr	r4, [sp, #256]	; 0x100
   24a00:	mov	r0, r4
   24a04:	bl	12300 <strlen@plt>
   24a08:	strb	r6, [sp, #264]	; 0x108
   24a0c:	str	r0, [sp, #260]	; 0x104
   24a10:	b	24608 <__assert_fail@plt+0x12014>
   24a14:	ldr	r4, [sp, #88]	; 0x58
   24a18:	str	r5, [sp, #92]	; 0x5c
   24a1c:	ldrb	r3, [r4]
   24a20:	cmp	r3, #0
   24a24:	bne	24a4c <__assert_fail@plt+0x12458>
   24a28:	ldr	r4, [sp, #100]	; 0x64
   24a2c:	cmp	r4, #0
   24a30:	beq	2495c <__assert_fail@plt+0x12368>
   24a34:	b	24598 <__assert_fail@plt+0x11fa4>
   24a38:	ldr	r3, [pc, #76]	; 24a8c <__assert_fail@plt+0x12498>
   24a3c:	mov	r2, #143	; 0x8f
   24a40:	ldr	r1, [pc, #72]	; 24a90 <__assert_fail@plt+0x1249c>
   24a44:	ldr	r0, [pc, #76]	; 24a98 <__assert_fail@plt+0x124a4>
   24a48:	bl	125f4 <__assert_fail@plt>
   24a4c:	ldr	r3, [pc, #56]	; 24a8c <__assert_fail@plt+0x12498>
   24a50:	mov	r2, #171	; 0xab
   24a54:	ldr	r1, [pc, #52]	; 24a90 <__assert_fail@plt+0x1249c>
   24a58:	ldr	r0, [pc, #60]	; 24a9c <__assert_fail@plt+0x124a8>
   24a5c:	bl	125f4 <__assert_fail@plt>
   24a60:	add	r8, r8, #1
   24a64:	mov	sl, r3
   24a68:	b	24250 <__assert_fail@plt+0x11c5c>
   24a6c:	cmp	r3, #0
   24a70:	beq	245ac <__assert_fail@plt+0x11fb8>
   24a74:	ldrb	r3, [sp, #96]	; 0x60
   24a78:	cmp	r3, #0
   24a7c:	ldrne	r4, [sp, #100]	; 0x64
   24a80:	beq	245f8 <__assert_fail@plt+0x12004>
   24a84:	b	245f0 <__assert_fail@plt+0x11ffc>
   24a88:	andeq	r6, r4, r8, ror #4
   24a8c:	andeq	r4, r4, r4, asr sl
   24a90:	andeq	r4, r4, r8, ror #20
   24a94:	andeq	r4, r4, r4, lsr #21
   24a98:	andeq	r4, r4, r4, ror sl
   24a9c:	andeq	r4, r4, ip, lsl #21
   24aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24aa4:	sub	sp, sp, #20
   24aa8:	mov	r5, r0
   24aac:	add	r7, r0, r1
   24ab0:	mov	sl, r2
   24ab4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   24ab8:	cmp	r0, #1
   24abc:	bls	24bfc <__assert_fail@plt+0x12608>
   24ac0:	cmp	r5, r7
   24ac4:	mov	r6, #0
   24ac8:	bcs	24bc4 <__assert_fail@plt+0x125d0>
   24acc:	and	r9, sl, #2
   24ad0:	mov	fp, r6
   24ad4:	and	sl, sl, #1
   24ad8:	mvn	r8, #-2147483648	; 0x80000000
   24adc:	b	24b04 <__assert_fail@plt+0x12510>
   24ae0:	cmp	r3, #37	; 0x25
   24ae4:	bcs	24af4 <__assert_fail@plt+0x12500>
   24ae8:	sub	r3, r3, #32
   24aec:	cmp	r3, #3
   24af0:	bhi	24b2c <__assert_fail@plt+0x12538>
   24af4:	add	r5, r5, #1
   24af8:	add	r6, r6, #1
   24afc:	cmp	r7, r5
   24b00:	bls	24bc4 <__assert_fail@plt+0x125d0>
   24b04:	ldrb	r3, [r5]
   24b08:	cmp	r3, #63	; 0x3f
   24b0c:	bls	24ae0 <__assert_fail@plt+0x124ec>
   24b10:	cmp	r3, #65	; 0x41
   24b14:	bcc	24b2c <__assert_fail@plt+0x12538>
   24b18:	cmp	r3, #95	; 0x5f
   24b1c:	bls	24af4 <__assert_fail@plt+0x12500>
   24b20:	sub	r3, r3, #97	; 0x61
   24b24:	cmp	r3, #29
   24b28:	bls	24af4 <__assert_fail@plt+0x12500>
   24b2c:	str	fp, [sp, #8]
   24b30:	str	fp, [sp, #12]
   24b34:	b	24b58 <__assert_fail@plt+0x12564>
   24b38:	cmp	r0, r3
   24b3c:	bgt	24bc0 <__assert_fail@plt+0x125cc>
   24b40:	add	r6, r6, r0
   24b44:	add	r0, sp, #8
   24b48:	bl	12060 <mbsinit@plt>
   24b4c:	add	r5, r5, r4
   24b50:	cmp	r0, #0
   24b54:	bne	24afc <__assert_fail@plt+0x12508>
   24b58:	add	r3, sp, #8
   24b5c:	sub	r2, r7, r5
   24b60:	mov	r1, r5
   24b64:	add	r0, sp, #4
   24b68:	bl	2fe64 <__assert_fail@plt+0x1d870>
   24b6c:	cmn	r0, #1
   24b70:	mov	r4, r0
   24b74:	beq	24bd0 <__assert_fail@plt+0x125dc>
   24b78:	cmn	r0, #2
   24b7c:	beq	24be8 <__assert_fail@plt+0x125f4>
   24b80:	ldr	r0, [sp, #4]
   24b84:	bl	11fa0 <wcwidth@plt>
   24b88:	cmp	r4, #0
   24b8c:	moveq	r4, #1
   24b90:	sub	r3, r8, r6
   24b94:	cmp	r0, #0
   24b98:	bge	24b38 <__assert_fail@plt+0x12544>
   24b9c:	cmp	r9, #0
   24ba0:	bne	24bd8 <__assert_fail@plt+0x125e4>
   24ba4:	ldr	r0, [sp, #4]
   24ba8:	bl	12114 <iswcntrl@plt>
   24bac:	cmp	r0, #0
   24bb0:	bne	24b44 <__assert_fail@plt+0x12550>
   24bb4:	cmn	r6, #-2147483647	; 0x80000001
   24bb8:	add	r6, r6, #1
   24bbc:	bne	24b44 <__assert_fail@plt+0x12550>
   24bc0:	mvn	r6, #-2147483648	; 0x80000000
   24bc4:	mov	r0, r6
   24bc8:	add	sp, sp, #20
   24bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24bd0:	cmp	sl, #0
   24bd4:	beq	24af4 <__assert_fail@plt+0x12500>
   24bd8:	mvn	r6, #0
   24bdc:	mov	r0, r6
   24be0:	add	sp, sp, #20
   24be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24be8:	cmp	sl, #0
   24bec:	bne	24bd8 <__assert_fail@plt+0x125e4>
   24bf0:	add	r6, r6, #1
   24bf4:	mov	r5, r7
   24bf8:	b	24afc <__assert_fail@plt+0x12508>
   24bfc:	cmp	r5, r7
   24c00:	movcs	r6, #0
   24c04:	bcs	24bc4 <__assert_fail@plt+0x125d0>
   24c08:	bl	122b8 <__ctype_b_loc@plt>
   24c0c:	mov	r6, #0
   24c10:	and	r2, sl, #2
   24c14:	ldr	r1, [r0]
   24c18:	ldrb	r3, [r5], #1
   24c1c:	lsl	r3, r3, #1
   24c20:	ldrh	r3, [r1, r3]
   24c24:	tst	r3, #16384	; 0x4000
   24c28:	bne	24c3c <__assert_fail@plt+0x12648>
   24c2c:	cmp	r2, #0
   24c30:	bne	24bd8 <__assert_fail@plt+0x125e4>
   24c34:	tst	r3, #2
   24c38:	bne	24c48 <__assert_fail@plt+0x12654>
   24c3c:	cmn	r6, #-2147483647	; 0x80000001
   24c40:	beq	24bc4 <__assert_fail@plt+0x125d0>
   24c44:	add	r6, r6, #1
   24c48:	cmp	r7, r5
   24c4c:	bne	24c18 <__assert_fail@plt+0x12624>
   24c50:	mov	r0, r6
   24c54:	add	sp, sp, #20
   24c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c5c:	push	{r4, r5, r6, lr}
   24c60:	mov	r5, r1
   24c64:	mov	r4, r0
   24c68:	bl	12300 <strlen@plt>
   24c6c:	mov	r2, r5
   24c70:	mov	r1, r0
   24c74:	mov	r0, r4
   24c78:	pop	{r4, r5, r6, lr}
   24c7c:	b	24aa0 <__assert_fail@plt+0x124ac>
   24c80:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c84:	mov	r4, r0
   24c88:	ldrb	r3, [r0]
   24c8c:	sub	r2, r3, #48	; 0x30
   24c90:	cmp	r2, #7
   24c94:	bls	24d2c <__assert_fail@plt+0x12738>
   24c98:	cmp	r3, #0
   24c9c:	moveq	r0, #1
   24ca0:	beq	24cd0 <__assert_fail@plt+0x126dc>
   24ca4:	mov	r1, r4
   24ca8:	mov	r0, #1
   24cac:	and	r2, r3, #239	; 0xef
   24cb0:	cmp	r3, #43	; 0x2b
   24cb4:	cmpne	r2, #45	; 0x2d
   24cb8:	ldrb	r3, [r1, #1]!
   24cbc:	moveq	r2, #1
   24cc0:	movne	r2, #0
   24cc4:	cmp	r3, #0
   24cc8:	add	r0, r0, r2
   24ccc:	bne	24cac <__assert_fail@plt+0x126b8>
   24cd0:	mov	r1, #16
   24cd4:	ldr	r6, [pc, #816]	; 2500c <__assert_fail@plt+0x12a18>
   24cd8:	bl	2c26c <__assert_fail@plt+0x19c78>
   24cdc:	mov	r8, #3
   24ce0:	mov	ip, #0
   24ce4:	mov	r9, #1
   24ce8:	mov	sl, #2
   24cec:	mov	fp, #0
   24cf0:	ldrb	r5, [r4]
   24cf4:	mov	r1, r4
   24cf8:	add	r4, r4, #1
   24cfc:	cmp	r5, #97	; 0x61
   24d00:	beq	24f74 <__assert_fail@plt+0x12980>
   24d04:	bls	24d74 <__assert_fail@plt+0x12780>
   24d08:	cmp	r5, #111	; 0x6f
   24d0c:	beq	24f7c <__assert_fail@plt+0x12988>
   24d10:	cmp	r5, #117	; 0x75
   24d14:	beq	24d6c <__assert_fail@plt+0x12778>
   24d18:	cmp	r5, #103	; 0x67
   24d1c:	beq	24f88 <__assert_fail@plt+0x12994>
   24d20:	bl	2db68 <__assert_fail@plt+0x1b574>
   24d24:	mov	r0, #0
   24d28:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d2c:	add	r1, r0, #1
   24d30:	mov	r5, #0
   24d34:	ldr	ip, [pc, #720]	; 2500c <__assert_fail@plt+0x12a18>
   24d38:	b	24d50 <__assert_fail@plt+0x1275c>
   24d3c:	ldrb	r3, [r2], #1
   24d40:	sub	r0, r3, #48	; 0x30
   24d44:	cmp	r0, #7
   24d48:	bhi	24f94 <__assert_fail@plt+0x129a0>
   24d4c:	mov	r1, r2
   24d50:	add	r5, r3, r5, lsl #3
   24d54:	sub	r5, r5, #48	; 0x30
   24d58:	cmp	r5, ip
   24d5c:	mov	r2, r1
   24d60:	bls	24d3c <__assert_fail@plt+0x12748>
   24d64:	mov	r0, #0
   24d68:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d6c:	orr	fp, fp, #2496	; 0x9c0
   24d70:	b	24cf0 <__assert_fail@plt+0x126fc>
   24d74:	cmp	r5, #45	; 0x2d
   24d78:	beq	24d8c <__assert_fail@plt+0x12798>
   24d7c:	cmp	r5, #61	; 0x3d
   24d80:	beq	24d8c <__assert_fail@plt+0x12798>
   24d84:	cmp	r5, #43	; 0x2b
   24d88:	bne	24d20 <__assert_fail@plt+0x1272c>
   24d8c:	add	r7, ip, #1
   24d90:	add	ip, r0, ip, lsl #4
   24d94:	b	24df4 <__assert_fail@plt+0x12800>
   24d98:	cmp	r3, #111	; 0x6f
   24d9c:	beq	24f60 <__assert_fail@plt+0x1296c>
   24da0:	cmp	r3, #117	; 0x75
   24da4:	bne	24e8c <__assert_fail@plt+0x12898>
   24da8:	ldrb	r3, [r1, #2]
   24dac:	mov	r4, r8
   24db0:	add	r1, r1, #2
   24db4:	mov	r2, #448	; 0x1c0
   24db8:	cmp	fp, #0
   24dbc:	strb	r5, [ip]
   24dc0:	str	r2, [ip, #8]
   24dc4:	mov	r5, r3
   24dc8:	andne	r2, r2, fp
   24dcc:	strb	r4, [ip, #1]
   24dd0:	str	fp, [ip, #4]
   24dd4:	and	lr, r3, #239	; 0xef
   24dd8:	cmp	r3, #43	; 0x2b
   24ddc:	cmpne	lr, #45	; 0x2d
   24de0:	str	r2, [ip, #12]
   24de4:	add	r2, r7, #1
   24de8:	add	ip, ip, #16
   24dec:	bne	24fe8 <__assert_fail@plt+0x129f4>
   24df0:	mov	r7, r2
   24df4:	ldrb	r3, [r1, #1]
   24df8:	add	r2, r1, #1
   24dfc:	cmp	r3, #103	; 0x67
   24e00:	beq	24e78 <__assert_fail@plt+0x12884>
   24e04:	bhi	24d98 <__assert_fail@plt+0x127a4>
   24e08:	sub	lr, r3, #48	; 0x30
   24e0c:	cmp	lr, #7
   24e10:	addls	lr, r1, #2
   24e14:	movls	r2, #0
   24e18:	bhi	24e8c <__assert_fail@plt+0x12898>
   24e1c:	add	r2, r3, r2, lsl #3
   24e20:	sub	r2, r2, #48	; 0x30
   24e24:	cmp	r2, r6
   24e28:	mov	r1, lr
   24e2c:	bhi	24d20 <__assert_fail@plt+0x1272c>
   24e30:	ldrb	r3, [lr]
   24e34:	add	lr, lr, #1
   24e38:	sub	r4, r3, #48	; 0x30
   24e3c:	cmp	r4, #7
   24e40:	bls	24e1c <__assert_fail@plt+0x12828>
   24e44:	cmp	fp, #0
   24e48:	bne	24d20 <__assert_fail@plt+0x1272c>
   24e4c:	cmp	r3, #0
   24e50:	cmpne	r3, #44	; 0x2c
   24e54:	bne	24d20 <__assert_fail@plt+0x1272c>
   24e58:	ldr	fp, [pc, #428]	; 2500c <__assert_fail@plt+0x12a18>
   24e5c:	strb	r5, [ip]
   24e60:	str	r2, [ip, #8]
   24e64:	strb	r9, [ip, #1]
   24e68:	str	r6, [ip, #4]
   24e6c:	mov	r2, fp
   24e70:	mov	r5, r3
   24e74:	b	24dd4 <__assert_fail@plt+0x127e0>
   24e78:	ldrb	r3, [r1, #2]
   24e7c:	mov	r4, r8
   24e80:	add	r1, r1, #2
   24e84:	mov	r2, #56	; 0x38
   24e88:	b	24db8 <__assert_fail@plt+0x127c4>
   24e8c:	mov	r1, r2
   24e90:	mov	r4, r9
   24e94:	mov	r2, #0
   24e98:	sub	lr, r3, #88	; 0x58
   24e9c:	cmp	lr, #32
   24ea0:	ldrls	pc, [pc, lr, lsl #2]
   24ea4:	b	24db8 <__assert_fail@plt+0x127c4>
   24ea8:	andeq	r4, r2, ip, lsr #30
   24eac:			; <UNDEFINED> instruction: 0x00024db8
   24eb0:			; <UNDEFINED> instruction: 0x00024db8
   24eb4:			; <UNDEFINED> instruction: 0x00024db8
   24eb8:			; <UNDEFINED> instruction: 0x00024db8
   24ebc:			; <UNDEFINED> instruction: 0x00024db8
   24ec0:			; <UNDEFINED> instruction: 0x00024db8
   24ec4:			; <UNDEFINED> instruction: 0x00024db8
   24ec8:			; <UNDEFINED> instruction: 0x00024db8
   24ecc:			; <UNDEFINED> instruction: 0x00024db8
   24ed0:			; <UNDEFINED> instruction: 0x00024db8
   24ed4:			; <UNDEFINED> instruction: 0x00024db8
   24ed8:			; <UNDEFINED> instruction: 0x00024db8
   24edc:			; <UNDEFINED> instruction: 0x00024db8
   24ee0:			; <UNDEFINED> instruction: 0x00024db8
   24ee4:			; <UNDEFINED> instruction: 0x00024db8
   24ee8:			; <UNDEFINED> instruction: 0x00024db8
   24eec:			; <UNDEFINED> instruction: 0x00024db8
   24ef0:			; <UNDEFINED> instruction: 0x00024db8
   24ef4:			; <UNDEFINED> instruction: 0x00024db8
   24ef8:			; <UNDEFINED> instruction: 0x00024db8
   24efc:			; <UNDEFINED> instruction: 0x00024db8
   24f00:			; <UNDEFINED> instruction: 0x00024db8
   24f04:			; <UNDEFINED> instruction: 0x00024db8
   24f08:			; <UNDEFINED> instruction: 0x00024db8
   24f0c:			; <UNDEFINED> instruction: 0x00024db8
   24f10:	andeq	r4, r2, r8, asr pc
   24f14:	andeq	r4, r2, r0, asr pc
   24f18:	andeq	r4, r2, r8, asr #30
   24f1c:			; <UNDEFINED> instruction: 0x00024db8
   24f20:			; <UNDEFINED> instruction: 0x00024db8
   24f24:	andeq	r4, r2, r0, asr #30
   24f28:	andeq	r4, r2, r8, lsr pc
   24f2c:	mov	r4, sl
   24f30:	ldrb	r3, [r1, #1]!
   24f34:	b	24e98 <__assert_fail@plt+0x128a4>
   24f38:	orr	r2, r2, #73	; 0x49
   24f3c:	b	24f30 <__assert_fail@plt+0x1293c>
   24f40:	orr	r2, r2, #146	; 0x92
   24f44:	b	24f30 <__assert_fail@plt+0x1293c>
   24f48:	orr	r2, r2, #512	; 0x200
   24f4c:	b	24f30 <__assert_fail@plt+0x1293c>
   24f50:	orr	r2, r2, #3072	; 0xc00
   24f54:	b	24f30 <__assert_fail@plt+0x1293c>
   24f58:	orr	r2, r2, #292	; 0x124
   24f5c:	b	24f30 <__assert_fail@plt+0x1293c>
   24f60:	ldrb	r3, [r1, #2]
   24f64:	mov	r4, r8
   24f68:	add	r1, r1, #2
   24f6c:	mov	r2, #7
   24f70:	b	24db8 <__assert_fail@plt+0x127c4>
   24f74:	ldr	fp, [pc, #144]	; 2500c <__assert_fail@plt+0x12a18>
   24f78:	b	24cf0 <__assert_fail@plt+0x126fc>
   24f7c:	orr	fp, fp, #516	; 0x204
   24f80:	orr	fp, fp, #3
   24f84:	b	24cf0 <__assert_fail@plt+0x126fc>
   24f88:	orr	fp, fp, #1072	; 0x430
   24f8c:	orr	fp, fp, #8
   24f90:	b	24cf0 <__assert_fail@plt+0x126fc>
   24f94:	cmp	r3, #0
   24f98:	bne	24d64 <__assert_fail@plt+0x12770>
   24f9c:	sub	r1, r1, r4
   24fa0:	cmp	r1, #4
   24fa4:	andle	r4, r5, #3072	; 0xc00
   24fa8:	mov	r0, #32
   24fac:	mvnle	r4, r4, lsr #10
   24fb0:	ldrgt	r4, [pc, #84]	; 2500c <__assert_fail@plt+0x12a18>
   24fb4:	mvnle	r4, r4, lsl #10
   24fb8:	bl	2c184 <__assert_fail@plt+0x19b90>
   24fbc:	ldr	r2, [pc, #72]	; 2500c <__assert_fail@plt+0x12a18>
   24fc0:	mov	ip, #61	; 0x3d
   24fc4:	mov	r1, #1
   24fc8:	mov	r3, #0
   24fcc:	str	r5, [r0, #8]
   24fd0:	str	r4, [r0, #12]
   24fd4:	strb	ip, [r0]
   24fd8:	strb	r1, [r0, #1]
   24fdc:	str	r2, [r0, #4]
   24fe0:	strb	r3, [r0, #17]
   24fe4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24fe8:	cmp	r3, #44	; 0x2c
   24fec:	addeq	r4, r1, #1
   24ff0:	moveq	ip, r7
   24ff4:	beq	24cec <__assert_fail@plt+0x126f8>
   24ff8:	cmp	r3, #0
   24ffc:	bne	24d20 <__assert_fail@plt+0x1272c>
   25000:	add	r7, r0, r7, lsl #4
   25004:	strb	r3, [r7, #1]
   25008:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2500c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   25010:	push	{r4, r5, lr}
   25014:	sub	sp, sp, #108	; 0x6c
   25018:	mov	r1, r0
   2501c:	mov	r2, sp
   25020:	mov	r0, #3
   25024:	bl	12558 <__xstat64@plt>
   25028:	subs	r4, r0, #0
   2502c:	movne	r0, #0
   25030:	bne	25064 <__assert_fail@plt+0x12a70>
   25034:	mov	r0, #32
   25038:	ldr	r5, [sp, #16]
   2503c:	bl	2c184 <__assert_fail@plt+0x19b90>
   25040:	ldr	r3, [pc, #36]	; 2506c <__assert_fail@plt+0x12a78>
   25044:	mov	r1, #61	; 0x3d
   25048:	mov	r2, #1
   2504c:	str	r5, [r0, #8]
   25050:	strb	r4, [r0, #17]
   25054:	strb	r1, [r0]
   25058:	strb	r2, [r0, #1]
   2505c:	str	r3, [r0, #4]
   25060:	str	r3, [r0, #12]
   25064:	add	sp, sp, #108	; 0x6c
   25068:	pop	{r4, r5, pc}
   2506c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   25070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25074:	ldrb	r8, [r3, #1]
   25078:	ldr	r6, [pc, #284]	; 2519c <__assert_fail@plt+0x12ba8>
   2507c:	ldr	r7, [sp, #32]
   25080:	cmp	r8, #0
   25084:	and	r0, r0, r6
   25088:	beq	25194 <__assert_fail@plt+0x12ba0>
   2508c:	cmp	r1, #0
   25090:	add	r3, r3, #16
   25094:	mvn	r2, r2
   25098:	movne	r5, #3072	; 0xc00
   2509c:	moveq	r5, #0
   250a0:	mov	r4, #0
   250a4:	b	25128 <__assert_fail@plt+0x12b34>
   250a8:	cmp	r8, #3
   250ac:	bne	250e4 <__assert_fail@plt+0x12af0>
   250b0:	and	ip, ip, r0
   250b4:	tst	ip, #292	; 0x124
   250b8:	movne	r8, #292	; 0x124
   250bc:	moveq	r8, #0
   250c0:	tst	ip, #146	; 0x92
   250c4:	movne	sl, #146	; 0x92
   250c8:	moveq	sl, #0
   250cc:	tst	ip, #73	; 0x49
   250d0:	orr	sl, r8, sl
   250d4:	movne	r8, #73	; 0x49
   250d8:	moveq	r8, #0
   250dc:	orr	r8, r8, sl
   250e0:	orr	ip, r8, ip
   250e4:	ldrb	r8, [r3, #-16]
   250e8:	cmp	lr, #0
   250ec:	movne	sl, lr
   250f0:	moveq	sl, r2
   250f4:	bic	ip, ip, r9
   250f8:	cmp	r8, #45	; 0x2d
   250fc:	and	ip, ip, sl
   25100:	beq	25188 <__assert_fail@plt+0x12b94>
   25104:	cmp	r8, #61	; 0x3d
   25108:	beq	25150 <__assert_fail@plt+0x12b5c>
   2510c:	cmp	r8, #43	; 0x2b
   25110:	orreq	r4, r4, ip
   25114:	orreq	r0, r0, ip
   25118:	add	r3, r3, #16
   2511c:	ldrb	r8, [r3, #-15]
   25120:	cmp	r8, #0
   25124:	beq	2517c <__assert_fail@plt+0x12b88>
   25128:	ldr	lr, [r3, #-4]
   2512c:	cmp	r8, #2
   25130:	bic	r9, r5, lr
   25134:	ldr	ip, [r3, #-8]
   25138:	ldr	lr, [r3, #-12]
   2513c:	bne	250a8 <__assert_fail@plt+0x12ab4>
   25140:	and	r8, r0, #73	; 0x49
   25144:	orrs	r8, r8, r1
   25148:	orrne	ip, ip, #73	; 0x49
   2514c:	b	250e4 <__assert_fail@plt+0x12af0>
   25150:	add	r3, r3, #16
   25154:	cmp	lr, #0
   25158:	ldrb	r8, [r3, #-15]
   2515c:	mvnne	lr, lr
   25160:	orr	lr, lr, r9
   25164:	and	r0, r0, lr
   25168:	cmp	r8, #0
   2516c:	bic	lr, r6, lr
   25170:	orr	r0, ip, r0
   25174:	orr	r4, r4, lr
   25178:	bne	25128 <__assert_fail@plt+0x12b34>
   2517c:	cmp	r7, #0
   25180:	strne	r4, [r7]
   25184:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25188:	orr	r4, r4, ip
   2518c:	bic	r0, r0, ip
   25190:	b	25118 <__assert_fail@plt+0x12b24>
   25194:	mov	r4, r8
   25198:	b	2517c <__assert_fail@plt+0x12b88>
   2519c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   251a0:	ldr	r3, [pc, #44]	; 251d4 <__assert_fail@plt+0x12be0>
   251a4:	push	{r4, lr}
   251a8:	mov	r5, r0
   251ac:	mov	r2, #5
   251b0:	ldr	r1, [pc, #32]	; 251d8 <__assert_fail@plt+0x12be4>
   251b4:	mov	r0, #0
   251b8:	ldr	r4, [r3]
   251bc:	bl	120b4 <dcgettext@plt>
   251c0:	mov	r1, r5
   251c4:	mov	r2, r0
   251c8:	mov	r0, r4
   251cc:	bl	121ec <error@plt>
   251d0:	bl	125a0 <abort@plt>
   251d4:	strdeq	r7, [r5], -r0
   251d8:			; <UNDEFINED> instruction: 0x00044ab8
   251dc:	ldr	r3, [pc, #44]	; 25210 <__assert_fail@plt+0x12c1c>
   251e0:	push	{r4, lr}
   251e4:	mov	r5, r0
   251e8:	mov	r2, #5
   251ec:	ldr	r1, [pc, #32]	; 25214 <__assert_fail@plt+0x12c20>
   251f0:	mov	r0, #0
   251f4:	ldr	r4, [r3]
   251f8:	bl	120b4 <dcgettext@plt>
   251fc:	mov	r1, r5
   25200:	mov	r2, r0
   25204:	mov	r0, r4
   25208:	bl	121ec <error@plt>
   2520c:	bl	125a0 <abort@plt>
   25210:	strdeq	r7, [r5], -r0
   25214:	andeq	r4, r4, r4, ror #21
   25218:	push	{r2, r3}
   2521c:	push	{lr}		; (str lr, [sp, #-4]!)
   25220:	sub	sp, sp, #12
   25224:	ldr	r2, [sp, #16]
   25228:	ands	r3, r2, #64	; 0x40
   2522c:	addne	r3, sp, #20
   25230:	strne	r3, [sp, #4]
   25234:	ldrne	r3, [sp, #20]
   25238:	bl	12324 <openat64@plt>
   2523c:	bl	2bcb8 <__assert_fail@plt+0x196c4>
   25240:	add	sp, sp, #12
   25244:	pop	{lr}		; (ldr lr, [sp], #4)
   25248:	add	sp, sp, #8
   2524c:	bx	lr
   25250:	sub	sp, sp, #8
   25254:	push	{r4, r5, r6, r7, r8, lr}
   25258:	mov	r4, r0
   2525c:	ldr	r0, [r0, #156]	; 0x9c
   25260:	add	r1, sp, #24
   25264:	cmp	r0, #0
   25268:	stm	r1, {r2, r3}
   2526c:	ldrd	r6, [sp, #32]
   25270:	ldr	r5, [sp, #40]	; 0x28
   25274:	beq	25284 <__assert_fail@plt+0x12c90>
   25278:	ldr	r3, [r4, #48]	; 0x30
   2527c:	cmp	r3, #0
   25280:	beq	252f0 <__assert_fail@plt+0x12cfc>
   25284:	cmp	r5, #4
   25288:	bgt	25328 <__assert_fail@plt+0x12d34>
   2528c:	ldr	r3, [r4, #172]	; 0xac
   25290:	cmp	r5, #2
   25294:	add	r3, r3, #1
   25298:	str	r3, [r4, #172]	; 0xac
   2529c:	ble	25314 <__assert_fail@plt+0x12d20>
   252a0:	mov	r2, #100	; 0x64
   252a4:	mov	r3, #0
   252a8:	mov	r0, r6
   252ac:	mov	r1, r7
   252b0:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   252b4:	mov	r2, #100	; 0x64
   252b8:	mov	r3, #0
   252bc:	strd	r0, [r4, #72]	; 0x48
   252c0:	mov	r0, r6
   252c4:	mov	r1, r7
   252c8:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   252cc:	strd	r2, [r4, #80]	; 0x50
   252d0:	mov	r3, #0
   252d4:	mov	r2, #2
   252d8:	str	r3, [r4, #88]	; 0x58
   252dc:	str	r3, [r4, #92]	; 0x5c
   252e0:	str	r2, [r4, #28]
   252e4:	pop	{r4, r5, r6, r7, r8, lr}
   252e8:	add	sp, sp, #8
   252ec:	bx	lr
   252f0:	ldrb	r3, [r4, #153]	; 0x99
   252f4:	cmp	r3, #0
   252f8:	bne	25284 <__assert_fail@plt+0x12c90>
   252fc:	ldr	r3, [r4, #172]	; 0xac
   25300:	cmp	r5, #2
   25304:	cmple	r3, #0
   25308:	moveq	r3, #1
   2530c:	streq	r3, [r4, #172]	; 0xac
   25310:	bne	25398 <__assert_fail@plt+0x12da4>
   25314:	mov	r2, #0
   25318:	mov	r3, #0
   2531c:	strd	r6, [r4, #72]	; 0x48
   25320:	strd	r2, [r4, #80]	; 0x50
   25324:	b	252d0 <__assert_fail@plt+0x12cdc>
   25328:	add	r0, r0, #1
   2532c:	str	r0, [r4, #156]	; 0x9c
   25330:	mov	r1, r7
   25334:	mov	r0, r6
   25338:	mov	r2, #100	; 0x64
   2533c:	mov	r3, #0
   25340:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   25344:	mov	r0, r6
   25348:	mov	r1, r7
   2534c:	sub	r5, r5, #4
   25350:	strd	r2, [r4, #64]	; 0x40
   25354:	mov	r2, #100	; 0x64
   25358:	mov	r3, #0
   2535c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   25360:	mov	r2, #100	; 0x64
   25364:	mov	r3, #0
   25368:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   2536c:	mov	r0, r6
   25370:	mov	r1, r7
   25374:	strd	r2, [r4, #56]	; 0x38
   25378:	ldr	r2, [pc, #60]	; 253bc <__assert_fail@plt+0x12dc8>
   2537c:	mov	r3, #0
   25380:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   25384:	str	r5, [r4, #48]	; 0x30
   25388:	strd	r0, [r4, #40]	; 0x28
   2538c:	pop	{r4, r5, r6, r7, r8, lr}
   25390:	add	sp, sp, #8
   25394:	bx	lr
   25398:	mov	ip, r1
   2539c:	add	lr, r4, #32
   253a0:	ldm	ip!, {r0, r1, r2, r3}
   253a4:	mov	r5, #1
   253a8:	strb	r5, [r4, #180]	; 0xb4
   253ac:	stmia	lr!, {r0, r1, r2, r3}
   253b0:	ldm	ip, {r0, r1}
   253b4:	stm	lr, {r0, r1}
   253b8:	b	252e4 <__assert_fail@plt+0x12cf0>
   253bc:	andeq	r2, r0, r0, lsl r7
   253c0:	ldr	r3, [r1, #24]
   253c4:	cmp	r3, #0
   253c8:	blt	25438 <__assert_fail@plt+0x12e44>
   253cc:	push	{r4, r5, lr}
   253d0:	ldr	r2, [r0]
   253d4:	ldr	r5, [r1]
   253d8:	ldr	lr, [r1, #4]
   253dc:	ldr	r3, [r0, #4]
   253e0:	ldr	ip, [r0, #8]
   253e4:	ldr	r4, [r1, #8]
   253e8:	eor	r2, r2, r5
   253ec:	eor	r3, r3, lr
   253f0:	ldr	r5, [r1, #12]
   253f4:	ldr	lr, [r0, #12]
   253f8:	orr	r3, r2, r3
   253fc:	eor	r2, ip, r4
   25400:	ldr	ip, [r0, #16]
   25404:	ldr	r4, [r1, #16]
   25408:	orr	r3, r3, r2
   2540c:	eor	lr, lr, r5
   25410:	ldr	r2, [r0, #20]
   25414:	ldr	r0, [r1, #20]
   25418:	orr	r3, r3, lr
   2541c:	eor	r1, ip, r4
   25420:	eor	r2, r2, r0
   25424:	orr	r3, r3, r1
   25428:	orrs	r3, r3, r2
   2542c:	moveq	r0, #1
   25430:	movne	r0, #0
   25434:	pop	{r4, r5, pc}
   25438:	mov	r0, #0
   2543c:	bx	lr
   25440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25444:	ldr	r1, [sp, #80]	; 0x50
   25448:	ldr	lr, [r0, #144]	; 0x90
   2544c:	cmp	r1, #0
   25450:	ldrd	sl, [sp, #60]	; 0x3c
   25454:	ldrd	r8, [sp, #68]	; 0x44
   25458:	ldr	ip, [sp, #76]	; 0x4c
   2545c:	blt	257a8 <__assert_fail@plt+0x131b4>
   25460:	cmp	ip, #0
   25464:	blt	25914 <__assert_fail@plt+0x13320>
   25468:	cmp	lr, #0
   2546c:	blt	256fc <__assert_fail@plt+0x13108>
   25470:	mvn	r1, #-2147483648	; 0x80000000
   25474:	sub	r1, r1, ip
   25478:	cmp	lr, r1
   2547c:	movle	r1, #0
   25480:	movgt	r1, #1
   25484:	cmp	r1, #0
   25488:	beq	256fc <__assert_fail@plt+0x13108>
   2548c:	mov	r1, #1
   25490:	add	ip, lr, ip
   25494:	str	ip, [r0, #144]	; 0x90
   25498:	cmp	r8, #0
   2549c:	sbcs	ip, r9, #0
   254a0:	ldrd	r4, [r0, #136]	; 0x88
   254a4:	blt	259e8 <__assert_fail@plt+0x133f4>
   254a8:	cmp	r4, #0
   254ac:	sbcs	ip, r5, #0
   254b0:	blt	25794 <__assert_fail@plt+0x131a0>
   254b4:	mvn	r6, #0
   254b8:	subs	r6, r6, r8
   254bc:	mvn	r7, #-2147483648	; 0x80000000
   254c0:	sbc	r7, r7, r9
   254c4:	cmp	r6, r4
   254c8:	sbcs	ip, r7, r5
   254cc:	movlt	ip, #1
   254d0:	movge	ip, #0
   254d4:	cmp	ip, #0
   254d8:	beq	25794 <__assert_fail@plt+0x131a0>
   254dc:	adds	r4, r4, r8
   254e0:	adc	r5, r5, r9
   254e4:	mov	ip, #1
   254e8:	strd	r4, [r0, #136]	; 0x88
   254ec:	cmp	sl, #0
   254f0:	sbcs	lr, fp, #0
   254f4:	orr	r1, r1, ip
   254f8:	ldrd	r4, [r0, #128]	; 0x80
   254fc:	blt	259c4 <__assert_fail@plt+0x133d0>
   25500:	cmp	r4, #0
   25504:	sbcs	ip, r5, #0
   25508:	blt	25780 <__assert_fail@plt+0x1318c>
   2550c:	mvn	r6, #0
   25510:	subs	r6, r6, sl
   25514:	mvn	r7, #-2147483648	; 0x80000000
   25518:	sbc	r7, r7, fp
   2551c:	cmp	r6, r4
   25520:	sbcs	ip, r7, r5
   25524:	movlt	ip, #1
   25528:	movge	ip, #0
   2552c:	cmp	ip, #0
   25530:	beq	25780 <__assert_fail@plt+0x1318c>
   25534:	adds	r4, r4, sl
   25538:	adc	r5, r5, fp
   2553c:	mov	ip, #1
   25540:	strd	r4, [r0, #128]	; 0x80
   25544:	ldrd	r4, [sp, #52]	; 0x34
   25548:	orr	r1, r1, ip
   2554c:	cmp	r4, #0
   25550:	sbcs	lr, r5, #0
   25554:	ldrd	r4, [r0, #120]	; 0x78
   25558:	blt	2599c <__assert_fail@plt+0x133a8>
   2555c:	cmp	r4, #0
   25560:	sbcs	ip, r5, #0
   25564:	blt	25760 <__assert_fail@plt+0x1316c>
   25568:	ldrd	r8, [sp, #52]	; 0x34
   2556c:	mvn	r6, #0
   25570:	mvn	r7, #-2147483648	; 0x80000000
   25574:	subs	r8, r6, r8
   25578:	sbc	r9, r7, r9
   2557c:	cmp	r8, r4
   25580:	sbcs	ip, r9, r5
   25584:	movlt	ip, #1
   25588:	movge	ip, #0
   2558c:	cmp	ip, #0
   25590:	beq	25760 <__assert_fail@plt+0x1316c>
   25594:	ldrd	r6, [sp, #52]	; 0x34
   25598:	mov	ip, #1
   2559c:	adds	r6, r6, r4
   255a0:	adc	r7, r7, r5
   255a4:	mov	r4, r6
   255a8:	mov	r5, r7
   255ac:	strd	r4, [r0, #120]	; 0x78
   255b0:	ldrd	r4, [sp, #44]	; 0x2c
   255b4:	orr	r1, r1, ip
   255b8:	cmp	r4, #0
   255bc:	sbcs	lr, r5, #0
   255c0:	ldrd	r4, [r0, #112]	; 0x70
   255c4:	blt	25974 <__assert_fail@plt+0x13380>
   255c8:	cmp	r4, #0
   255cc:	sbcs	ip, r5, #0
   255d0:	blt	25740 <__assert_fail@plt+0x1314c>
   255d4:	ldrd	r8, [sp, #44]	; 0x2c
   255d8:	mvn	r6, #0
   255dc:	mvn	r7, #-2147483648	; 0x80000000
   255e0:	subs	r8, r6, r8
   255e4:	sbc	r9, r7, r9
   255e8:	cmp	r8, r4
   255ec:	sbcs	ip, r9, r5
   255f0:	movlt	ip, #1
   255f4:	movge	ip, #0
   255f8:	cmp	ip, #0
   255fc:	beq	25740 <__assert_fail@plt+0x1314c>
   25600:	ldrd	r6, [sp, #44]	; 0x2c
   25604:	mov	ip, #1
   25608:	adds	r6, r6, r4
   2560c:	adc	r7, r7, r5
   25610:	mov	r4, r6
   25614:	mov	r5, r7
   25618:	strd	r4, [r0, #112]	; 0x70
   2561c:	ldrd	r4, [sp, #36]	; 0x24
   25620:	orr	r1, r1, ip
   25624:	cmp	r4, #0
   25628:	sbcs	lr, r5, #0
   2562c:	ldrd	r4, [r0, #104]	; 0x68
   25630:	blt	2594c <__assert_fail@plt+0x13358>
   25634:	cmp	r4, #0
   25638:	sbcs	ip, r5, #0
   2563c:	blt	25720 <__assert_fail@plt+0x1312c>
   25640:	ldrd	r8, [sp, #36]	; 0x24
   25644:	mvn	r6, #0
   25648:	mvn	r7, #-2147483648	; 0x80000000
   2564c:	subs	r8, r6, r8
   25650:	sbc	r9, r7, r9
   25654:	cmp	r8, r4
   25658:	sbcs	ip, r9, r5
   2565c:	movlt	ip, #1
   25660:	movge	ip, #0
   25664:	cmp	ip, #0
   25668:	beq	25720 <__assert_fail@plt+0x1312c>
   2566c:	ldrd	r6, [sp, #36]	; 0x24
   25670:	mov	ip, #1
   25674:	adds	r6, r6, r4
   25678:	adc	r7, r7, r5
   2567c:	mov	r4, r6
   25680:	mov	r5, r7
   25684:	strd	r4, [r0, #104]	; 0x68
   25688:	cmp	r2, #0
   2568c:	sbcs	lr, r3, #0
   25690:	orr	r1, r1, ip
   25694:	ldrd	r4, [r0, #96]	; 0x60
   25698:	blt	25928 <__assert_fail@plt+0x13334>
   2569c:	cmp	r4, #0
   256a0:	sbcs	ip, r5, #0
   256a4:	blt	2570c <__assert_fail@plt+0x13118>
   256a8:	mvn	r6, #0
   256ac:	subs	r6, r6, r2
   256b0:	mvn	r7, #-2147483648	; 0x80000000
   256b4:	sbc	r7, r7, r3
   256b8:	cmp	r6, r4
   256bc:	sbcs	ip, r7, r5
   256c0:	movlt	ip, #1
   256c4:	movge	ip, #0
   256c8:	cmp	ip, #0
   256cc:	beq	2570c <__assert_fail@plt+0x13118>
   256d0:	adds	r2, r2, r4
   256d4:	adc	r3, r3, r5
   256d8:	mov	ip, #1
   256dc:	strd	r2, [r0, #96]	; 0x60
   256e0:	orr	r1, r1, ip
   256e4:	cmp	r1, #0
   256e8:	moveq	r3, #1
   256ec:	strbeq	r3, [r0, #153]	; 0x99
   256f0:	moveq	r0, r3
   256f4:	movne	r0, #0
   256f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256fc:	add	ip, lr, ip
   25700:	mov	r1, #0
   25704:	str	ip, [r0, #144]	; 0x90
   25708:	b	25498 <__assert_fail@plt+0x12ea4>
   2570c:	adds	r2, r2, r4
   25710:	adc	r3, r3, r5
   25714:	mov	ip, #0
   25718:	strd	r2, [r0, #96]	; 0x60
   2571c:	b	256e0 <__assert_fail@plt+0x130ec>
   25720:	ldrd	r6, [sp, #36]	; 0x24
   25724:	mov	ip, #0
   25728:	adds	r6, r6, r4
   2572c:	adc	r7, r7, r5
   25730:	mov	r4, r6
   25734:	mov	r5, r7
   25738:	strd	r4, [r0, #104]	; 0x68
   2573c:	b	25688 <__assert_fail@plt+0x13094>
   25740:	ldrd	r6, [sp, #44]	; 0x2c
   25744:	mov	ip, #0
   25748:	adds	r6, r6, r4
   2574c:	adc	r7, r7, r5
   25750:	mov	r4, r6
   25754:	mov	r5, r7
   25758:	strd	r4, [r0, #112]	; 0x70
   2575c:	b	2561c <__assert_fail@plt+0x13028>
   25760:	ldrd	r6, [sp, #52]	; 0x34
   25764:	mov	ip, #0
   25768:	adds	r6, r6, r4
   2576c:	adc	r7, r7, r5
   25770:	mov	r4, r6
   25774:	mov	r5, r7
   25778:	strd	r4, [r0, #120]	; 0x78
   2577c:	b	255b0 <__assert_fail@plt+0x12fbc>
   25780:	adds	r4, r4, sl
   25784:	adc	r5, r5, fp
   25788:	mov	ip, #0
   2578c:	strd	r4, [r0, #128]	; 0x80
   25790:	b	25544 <__assert_fail@plt+0x12f50>
   25794:	adds	r4, r4, r8
   25798:	adc	r5, r5, r9
   2579c:	mov	ip, #0
   257a0:	strd	r4, [r0, #136]	; 0x88
   257a4:	b	254ec <__assert_fail@plt+0x12ef8>
   257a8:	mvn	r1, lr
   257ac:	lsr	r1, r1, #31
   257b0:	cmp	r1, ip, lsr #31
   257b4:	beq	258e4 <__assert_fail@plt+0x132f0>
   257b8:	mov	r1, #0
   257bc:	sub	ip, lr, ip
   257c0:	str	ip, [r0, #144]	; 0x90
   257c4:	ldrd	r4, [r0, #136]	; 0x88
   257c8:	mvn	ip, r5
   257cc:	lsr	ip, ip, #31
   257d0:	cmp	ip, r9, lsr #31
   257d4:	beq	25b7c <__assert_fail@plt+0x13588>
   257d8:	subs	r4, r4, r8
   257dc:	sbc	r5, r5, r9
   257e0:	mov	ip, #0
   257e4:	strd	r4, [r0, #136]	; 0x88
   257e8:	ldrd	r4, [r0, #128]	; 0x80
   257ec:	orr	r1, r1, ip
   257f0:	mvn	ip, r5
   257f4:	lsr	ip, ip, #31
   257f8:	cmp	ip, fp, lsr #31
   257fc:	beq	25b3c <__assert_fail@plt+0x13548>
   25800:	subs	r4, r4, sl
   25804:	sbc	r5, r5, fp
   25808:	mov	ip, #0
   2580c:	strd	r4, [r0, #128]	; 0x80
   25810:	ldrd	r4, [r0, #120]	; 0x78
   25814:	orr	r1, r1, ip
   25818:	ldr	lr, [sp, #56]	; 0x38
   2581c:	mvn	ip, r5
   25820:	lsr	ip, ip, #31
   25824:	cmp	ip, lr, lsr #31
   25828:	beq	25aec <__assert_fail@plt+0x134f8>
   2582c:	ldrd	r6, [sp, #52]	; 0x34
   25830:	mov	ip, #0
   25834:	subs	r6, r4, r6
   25838:	sbc	r7, r5, r7
   2583c:	mov	r4, r6
   25840:	mov	r5, r7
   25844:	strd	r4, [r0, #120]	; 0x78
   25848:	ldrd	r4, [r0, #112]	; 0x70
   2584c:	orr	r1, r1, ip
   25850:	ldr	lr, [sp, #48]	; 0x30
   25854:	mvn	ip, r5
   25858:	lsr	ip, ip, #31
   2585c:	cmp	ip, lr, lsr #31
   25860:	beq	25a9c <__assert_fail@plt+0x134a8>
   25864:	ldrd	r6, [sp, #44]	; 0x2c
   25868:	mov	ip, #0
   2586c:	subs	r6, r4, r6
   25870:	sbc	r7, r5, r7
   25874:	mov	r4, r6
   25878:	mov	r5, r7
   2587c:	strd	r4, [r0, #112]	; 0x70
   25880:	ldrd	r4, [r0, #104]	; 0x68
   25884:	orr	r1, r1, ip
   25888:	ldr	lr, [sp, #40]	; 0x28
   2588c:	mvn	ip, r5
   25890:	lsr	ip, ip, #31
   25894:	cmp	ip, lr, lsr #31
   25898:	beq	25a4c <__assert_fail@plt+0x13458>
   2589c:	ldrd	r6, [sp, #36]	; 0x24
   258a0:	mov	ip, #0
   258a4:	subs	r6, r4, r6
   258a8:	sbc	r7, r5, r7
   258ac:	mov	r4, r6
   258b0:	mov	r5, r7
   258b4:	strd	r4, [r0, #104]	; 0x68
   258b8:	ldrd	r4, [r0, #96]	; 0x60
   258bc:	orr	r1, r1, ip
   258c0:	mvn	ip, r5
   258c4:	lsr	ip, ip, #31
   258c8:	cmp	ip, r3, lsr #31
   258cc:	beq	25a0c <__assert_fail@plt+0x13418>
   258d0:	subs	r2, r4, r2
   258d4:	sbc	r3, r5, r3
   258d8:	mov	ip, #0
   258dc:	strd	r2, [r0, #96]	; 0x60
   258e0:	b	256e0 <__assert_fail@plt+0x130ec>
   258e4:	cmp	lr, #0
   258e8:	blt	25bbc <__assert_fail@plt+0x135c8>
   258ec:	sub	r1, ip, #-2147483647	; 0x80000001
   258f0:	cmp	lr, r1
   258f4:	movle	r1, #0
   258f8:	movgt	r1, #1
   258fc:	cmp	r1, #0
   25900:	beq	257b8 <__assert_fail@plt+0x131c4>
   25904:	sub	ip, lr, ip
   25908:	str	ip, [r0, #144]	; 0x90
   2590c:	mov	r1, #1
   25910:	b	257c4 <__assert_fail@plt+0x131d0>
   25914:	rsb	r1, ip, #-2147483648	; 0x80000000
   25918:	cmp	lr, r1
   2591c:	movge	r1, #0
   25920:	movlt	r1, #1
   25924:	b	25484 <__assert_fail@plt+0x12e90>
   25928:	mov	r6, #0
   2592c:	subs	r6, r6, r2
   25930:	mov	r7, #-2147483648	; 0x80000000
   25934:	sbc	r7, r7, r3
   25938:	cmp	r4, r6
   2593c:	sbcs	ip, r5, r7
   25940:	movlt	ip, #1
   25944:	movge	ip, #0
   25948:	b	256c8 <__assert_fail@plt+0x130d4>
   2594c:	ldrd	r8, [sp, #36]	; 0x24
   25950:	mov	r6, #0
   25954:	mov	r7, #-2147483648	; 0x80000000
   25958:	subs	r8, r6, r8
   2595c:	sbc	r9, r7, r9
   25960:	cmp	r4, r8
   25964:	sbcs	ip, r5, r9
   25968:	movlt	ip, #1
   2596c:	movge	ip, #0
   25970:	b	25664 <__assert_fail@plt+0x13070>
   25974:	ldrd	r8, [sp, #44]	; 0x2c
   25978:	mov	r6, #0
   2597c:	mov	r7, #-2147483648	; 0x80000000
   25980:	subs	r8, r6, r8
   25984:	sbc	r9, r7, r9
   25988:	cmp	r4, r8
   2598c:	sbcs	ip, r5, r9
   25990:	movlt	ip, #1
   25994:	movge	ip, #0
   25998:	b	255f8 <__assert_fail@plt+0x13004>
   2599c:	ldrd	r8, [sp, #52]	; 0x34
   259a0:	mov	r6, #0
   259a4:	mov	r7, #-2147483648	; 0x80000000
   259a8:	subs	r8, r6, r8
   259ac:	sbc	r9, r7, r9
   259b0:	cmp	r4, r8
   259b4:	sbcs	ip, r5, r9
   259b8:	movlt	ip, #1
   259bc:	movge	ip, #0
   259c0:	b	2558c <__assert_fail@plt+0x12f98>
   259c4:	mov	r6, #0
   259c8:	subs	r6, r6, sl
   259cc:	mov	r7, #-2147483648	; 0x80000000
   259d0:	sbc	r7, r7, fp
   259d4:	cmp	r4, r6
   259d8:	sbcs	ip, r5, r7
   259dc:	movlt	ip, #1
   259e0:	movge	ip, #0
   259e4:	b	2552c <__assert_fail@plt+0x12f38>
   259e8:	mov	r6, #0
   259ec:	subs	r6, r6, r8
   259f0:	mov	r7, #-2147483648	; 0x80000000
   259f4:	sbc	r7, r7, r9
   259f8:	cmp	r4, r6
   259fc:	sbcs	ip, r5, r7
   25a00:	movlt	ip, #1
   25a04:	movge	ip, #0
   25a08:	b	254d4 <__assert_fail@plt+0x12ee0>
   25a0c:	cmp	r4, #0
   25a10:	sbcs	ip, r5, #0
   25a14:	blt	25c68 <__assert_fail@plt+0x13674>
   25a18:	subs	r6, r2, #1
   25a1c:	sbc	r7, r3, #-2147483648	; 0x80000000
   25a20:	cmp	r6, r4
   25a24:	sbcs	ip, r7, r5
   25a28:	movlt	ip, #1
   25a2c:	movge	ip, #0
   25a30:	cmp	ip, #0
   25a34:	beq	258d0 <__assert_fail@plt+0x132dc>
   25a38:	subs	r2, r4, r2
   25a3c:	sbc	r3, r5, r3
   25a40:	mov	ip, #1
   25a44:	strd	r2, [r0, #96]	; 0x60
   25a48:	b	256e0 <__assert_fail@plt+0x130ec>
   25a4c:	cmp	r4, #0
   25a50:	sbcs	ip, r5, #0
   25a54:	blt	25c48 <__assert_fail@plt+0x13654>
   25a58:	ldrd	r6, [sp, #36]	; 0x24
   25a5c:	subs	r6, r6, #1
   25a60:	sbc	r7, r7, #-2147483648	; 0x80000000
   25a64:	cmp	r6, r4
   25a68:	sbcs	ip, r7, r5
   25a6c:	movlt	ip, #1
   25a70:	movge	ip, #0
   25a74:	cmp	ip, #0
   25a78:	beq	2589c <__assert_fail@plt+0x132a8>
   25a7c:	ldrd	r6, [sp, #36]	; 0x24
   25a80:	mov	ip, #1
   25a84:	subs	r6, r4, r6
   25a88:	sbc	r7, r5, r7
   25a8c:	mov	r4, r6
   25a90:	mov	r5, r7
   25a94:	strd	r4, [r0, #104]	; 0x68
   25a98:	b	258b8 <__assert_fail@plt+0x132c4>
   25a9c:	cmp	r4, #0
   25aa0:	sbcs	ip, r5, #0
   25aa4:	blt	25c28 <__assert_fail@plt+0x13634>
   25aa8:	ldrd	r6, [sp, #44]	; 0x2c
   25aac:	subs	r6, r6, #1
   25ab0:	sbc	r7, r7, #-2147483648	; 0x80000000
   25ab4:	cmp	r6, r4
   25ab8:	sbcs	ip, r7, r5
   25abc:	movlt	ip, #1
   25ac0:	movge	ip, #0
   25ac4:	cmp	ip, #0
   25ac8:	beq	25864 <__assert_fail@plt+0x13270>
   25acc:	ldrd	r6, [sp, #44]	; 0x2c
   25ad0:	mov	ip, #1
   25ad4:	subs	r6, r4, r6
   25ad8:	sbc	r7, r5, r7
   25adc:	mov	r4, r6
   25ae0:	mov	r5, r7
   25ae4:	strd	r4, [r0, #112]	; 0x70
   25ae8:	b	25880 <__assert_fail@plt+0x1328c>
   25aec:	cmp	r4, #0
   25af0:	sbcs	ip, r5, #0
   25af4:	blt	25c08 <__assert_fail@plt+0x13614>
   25af8:	ldrd	r6, [sp, #52]	; 0x34
   25afc:	subs	r6, r6, #1
   25b00:	sbc	r7, r7, #-2147483648	; 0x80000000
   25b04:	cmp	r6, r4
   25b08:	sbcs	ip, r7, r5
   25b0c:	movlt	ip, #1
   25b10:	movge	ip, #0
   25b14:	cmp	ip, #0
   25b18:	beq	2582c <__assert_fail@plt+0x13238>
   25b1c:	ldrd	r6, [sp, #52]	; 0x34
   25b20:	mov	ip, #1
   25b24:	subs	r6, r4, r6
   25b28:	sbc	r7, r5, r7
   25b2c:	mov	r4, r6
   25b30:	mov	r5, r7
   25b34:	strd	r4, [r0, #120]	; 0x78
   25b38:	b	25848 <__assert_fail@plt+0x13254>
   25b3c:	cmp	r4, #0
   25b40:	sbcs	ip, r5, #0
   25b44:	blt	25bec <__assert_fail@plt+0x135f8>
   25b48:	subs	r6, sl, #1
   25b4c:	sbc	r7, fp, #-2147483648	; 0x80000000
   25b50:	cmp	r6, r4
   25b54:	sbcs	ip, r7, r5
   25b58:	movlt	ip, #1
   25b5c:	movge	ip, #0
   25b60:	cmp	ip, #0
   25b64:	beq	25800 <__assert_fail@plt+0x1320c>
   25b68:	subs	r4, r4, sl
   25b6c:	sbc	r5, r5, fp
   25b70:	mov	ip, #1
   25b74:	strd	r4, [r0, #128]	; 0x80
   25b78:	b	25810 <__assert_fail@plt+0x1321c>
   25b7c:	cmp	r4, #0
   25b80:	sbcs	ip, r5, #0
   25b84:	blt	25bd0 <__assert_fail@plt+0x135dc>
   25b88:	subs	r6, r8, #1
   25b8c:	sbc	r7, r9, #-2147483648	; 0x80000000
   25b90:	cmp	r6, r4
   25b94:	sbcs	ip, r7, r5
   25b98:	movlt	ip, #1
   25b9c:	movge	ip, #0
   25ba0:	cmp	ip, #0
   25ba4:	beq	257d8 <__assert_fail@plt+0x131e4>
   25ba8:	subs	r4, r4, r8
   25bac:	sbc	r5, r5, r9
   25bb0:	mov	ip, #1
   25bb4:	strd	r4, [r0, #136]	; 0x88
   25bb8:	b	257e8 <__assert_fail@plt+0x131f4>
   25bbc:	add	r1, lr, #-2147483648	; 0x80000000
   25bc0:	cmp	r1, ip
   25bc4:	movge	r1, #0
   25bc8:	movlt	r1, #1
   25bcc:	b	258fc <__assert_fail@plt+0x13308>
   25bd0:	adds	r6, r4, #0
   25bd4:	adc	r7, r5, #-2147483648	; 0x80000000
   25bd8:	cmp	r6, r8
   25bdc:	sbcs	ip, r7, r9
   25be0:	movlt	ip, #1
   25be4:	movge	ip, #0
   25be8:	b	25ba0 <__assert_fail@plt+0x135ac>
   25bec:	adds	r6, r4, #0
   25bf0:	adc	r7, r5, #-2147483648	; 0x80000000
   25bf4:	cmp	r6, sl
   25bf8:	sbcs	ip, r7, fp
   25bfc:	movlt	ip, #1
   25c00:	movge	ip, #0
   25c04:	b	25b60 <__assert_fail@plt+0x1356c>
   25c08:	ldrd	r8, [sp, #52]	; 0x34
   25c0c:	adds	r6, r4, #0
   25c10:	adc	r7, r5, #-2147483648	; 0x80000000
   25c14:	cmp	r6, r8
   25c18:	sbcs	ip, r7, r9
   25c1c:	movlt	ip, #1
   25c20:	movge	ip, #0
   25c24:	b	25b14 <__assert_fail@plt+0x13520>
   25c28:	ldrd	r8, [sp, #44]	; 0x2c
   25c2c:	adds	r6, r4, #0
   25c30:	adc	r7, r5, #-2147483648	; 0x80000000
   25c34:	cmp	r6, r8
   25c38:	sbcs	ip, r7, r9
   25c3c:	movlt	ip, #1
   25c40:	movge	ip, #0
   25c44:	b	25ac4 <__assert_fail@plt+0x134d0>
   25c48:	ldrd	r8, [sp, #36]	; 0x24
   25c4c:	adds	r6, r4, #0
   25c50:	adc	r7, r5, #-2147483648	; 0x80000000
   25c54:	cmp	r6, r8
   25c58:	sbcs	ip, r7, r9
   25c5c:	movlt	ip, #1
   25c60:	movge	ip, #0
   25c64:	b	25a74 <__assert_fail@plt+0x13480>
   25c68:	adds	r6, r4, #0
   25c6c:	adc	r7, r5, #-2147483648	; 0x80000000
   25c70:	cmp	r6, r2
   25c74:	sbcs	ip, r7, r3
   25c78:	movlt	ip, #1
   25c7c:	movge	ip, #0
   25c80:	b	25a30 <__assert_fail@plt+0x1343c>
   25c84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25c88:	mov	r8, r0
   25c8c:	ldr	ip, [sp, #32]
   25c90:	mov	r9, r1
   25c94:	cmp	ip, #2
   25c98:	mov	r4, r2
   25c9c:	mov	r5, r3
   25ca0:	ldrd	r6, [sp, #40]	; 0x28
   25ca4:	bgt	25d10 <__assert_fail@plt+0x1371c>
   25ca8:	cmp	r6, #0
   25cac:	sbcs	r3, r7, #0
   25cb0:	blt	25e1c <__assert_fail@plt+0x13828>
   25cb4:	cmp	r4, #0
   25cb8:	sbcs	r3, r5, #0
   25cbc:	blt	25d80 <__assert_fail@plt+0x1378c>
   25cc0:	add	r3, pc, #360	; 0x168
   25cc4:	ldrd	r2, [r3]
   25cc8:	cmp	r2, r4
   25ccc:	sbcs	r3, r3, r5
   25cd0:	bge	25db4 <__assert_fail@plt+0x137c0>
   25cd4:	mov	r1, #60	; 0x3c
   25cd8:	cmp	r9, #0
   25cdc:	umull	r2, r3, r4, r1
   25ce0:	mov	ip, #1
   25ce4:	mla	r3, r1, r5, r3
   25ce8:	beq	25dcc <__assert_fail@plt+0x137d8>
   25cec:	cmp	r2, #0
   25cf0:	sbcs	r1, r3, #0
   25cf4:	blt	25e00 <__assert_fail@plt+0x1380c>
   25cf8:	subs	r2, r2, r6
   25cfc:	sbc	r3, r3, r7
   25d00:	cmp	ip, #0
   25d04:	beq	25d58 <__assert_fail@plt+0x13764>
   25d08:	mov	r0, #0
   25d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25d10:	cmp	r6, #0
   25d14:	sbcs	r3, r7, #0
   25d18:	bge	25cb4 <__assert_fail@plt+0x136c0>
   25d1c:	mov	r2, #100	; 0x64
   25d20:	mov	r3, #0
   25d24:	mov	r0, r4
   25d28:	mov	r1, r5
   25d2c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   25d30:	mov	ip, #60	; 0x3c
   25d34:	mov	r2, #100	; 0x64
   25d38:	mov	r3, #0
   25d3c:	umull	r6, r7, r0, ip
   25d40:	mov	r0, r4
   25d44:	mla	r7, ip, r1, r7
   25d48:	mov	r1, r5
   25d4c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   25d50:	adds	r2, r2, r6
   25d54:	adc	r3, r3, r7
   25d58:	adds	r0, r2, #1440	; 0x5a0
   25d5c:	adc	r1, r3, #0
   25d60:	cmp	r1, #0
   25d64:	cmpeq	r0, #2880	; 0xb40
   25d68:	bhi	25d08 <__assert_fail@plt+0x13714>
   25d6c:	rsb	r2, r2, r2, lsl #4
   25d70:	mov	r0, #1
   25d74:	lsl	r2, r2, #2
   25d78:	str	r2, [r8]
   25d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25d80:	mvn	r3, #0
   25d84:	mvn	r2, #0
   25d88:	cmp	r5, r3
   25d8c:	cmpeq	r4, r2
   25d90:	beq	25db4 <__assert_fail@plt+0x137c0>
   25d94:	mov	r3, r5
   25d98:	mov	r2, r4
   25d9c:	mov	r0, #0
   25da0:	mov	r1, #-2147483648	; 0x80000000
   25da4:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   25da8:	cmp	r0, #60	; 0x3c
   25dac:	sbcs	r3, r1, #0
   25db0:	blt	25cd4 <__assert_fail@plt+0x136e0>
   25db4:	mov	r1, #60	; 0x3c
   25db8:	cmp	r9, #0
   25dbc:	umull	r2, r3, r4, r1
   25dc0:	mov	ip, #0
   25dc4:	mla	r3, r1, r5, r3
   25dc8:	bne	25cec <__assert_fail@plt+0x136f8>
   25dcc:	cmp	r2, #0
   25dd0:	sbcs	r1, r3, #0
   25dd4:	blt	25df4 <__assert_fail@plt+0x13800>
   25dd8:	mvn	r0, #0
   25ddc:	subs	r0, r0, r6
   25de0:	mvn	r1, #-2147483648	; 0x80000000
   25de4:	sbc	r1, r1, r7
   25de8:	cmp	r0, r2
   25dec:	sbcs	r1, r1, r3
   25df0:	blt	25d08 <__assert_fail@plt+0x13714>
   25df4:	adds	r2, r2, r6
   25df8:	adc	r3, r3, r7
   25dfc:	b	25d00 <__assert_fail@plt+0x1370c>
   25e00:	adds	r0, r2, #0
   25e04:	adc	r1, r3, #-2147483648	; 0x80000000
   25e08:	cmp	r0, r6
   25e0c:	sbcs	r1, r1, r7
   25e10:	bge	25cf8 <__assert_fail@plt+0x13704>
   25e14:	mov	r0, #0
   25e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25e1c:	mov	r3, #100	; 0x64
   25e20:	mul	r2, r3, r5
   25e24:	umull	r4, r5, r4, r3
   25e28:	add	r5, r2, r5
   25e2c:	b	25d1c <__assert_fail@plt+0x13728>
   25e30:	eorcs	r2, r2, #536870914	; 0x20000002
   25e34:	eoreq	r2, r2, #536870914	; 0x20000002
   25e38:	push	{r4, r5, r6, r7, r8, lr}
   25e3c:	mov	r7, r0
   25e40:	ldr	r5, [pc, #172]	; 25ef4 <__assert_fail@plt+0x13900>
   25e44:	ldr	r3, [pc, #172]	; 25ef8 <__assert_fail@plt+0x13904>
   25e48:	mov	r6, r1
   25e4c:	b	25e5c <__assert_fail@plt+0x13868>
   25e50:	ldr	r3, [r5, #12]!
   25e54:	cmp	r3, #0
   25e58:	beq	25e7c <__assert_fail@plt+0x13888>
   25e5c:	mov	r1, r3
   25e60:	mov	r0, r6
   25e64:	bl	11f40 <strcmp@plt>
   25e68:	mov	r4, r5
   25e6c:	cmp	r0, #0
   25e70:	bne	25e50 <__assert_fail@plt+0x1385c>
   25e74:	mov	r0, r4
   25e78:	pop	{r4, r5, r6, r7, r8, pc}
   25e7c:	ldr	r1, [r7, #188]	; 0xbc
   25e80:	add	r5, r7, #188	; 0xbc
   25e84:	cmp	r1, #0
   25e88:	bne	25ecc <__assert_fail@plt+0x138d8>
   25e8c:	ldr	r3, [pc, #104]	; 25efc <__assert_fail@plt+0x13908>
   25e90:	ldr	r1, [pc, #104]	; 25f00 <__assert_fail@plt+0x1390c>
   25e94:	b	25ea4 <__assert_fail@plt+0x138b0>
   25e98:	ldr	r1, [r4, #12]
   25e9c:	cmp	r1, #0
   25ea0:	beq	25ee8 <__assert_fail@plt+0x138f4>
   25ea4:	mov	r0, r6
   25ea8:	mov	r4, r3
   25eac:	bl	11f40 <strcmp@plt>
   25eb0:	add	r3, r4, #12
   25eb4:	cmp	r0, #0
   25eb8:	bne	25e98 <__assert_fail@plt+0x138a4>
   25ebc:	b	25e74 <__assert_fail@plt+0x13880>
   25ec0:	ldr	r1, [r5, #12]!
   25ec4:	cmp	r1, #0
   25ec8:	beq	25e8c <__assert_fail@plt+0x13898>
   25ecc:	mov	r0, r6
   25ed0:	bl	11f40 <strcmp@plt>
   25ed4:	mov	r4, r5
   25ed8:	cmp	r0, #0
   25edc:	bne	25ec0 <__assert_fail@plt+0x138cc>
   25ee0:	mov	r0, r4
   25ee4:	pop	{r4, r5, r6, r7, r8, pc}
   25ee8:	mov	r4, r1
   25eec:	mov	r0, r4
   25ef0:	pop	{r4, r5, r6, r7, r8, pc}
   25ef4:	andeq	r4, r4, r4, lsl fp
   25ef8:	andeq	r5, r4, ip, ror r5
   25efc:	andeq	r4, r4, r4, asr #22
   25f00:	andeq	r5, r4, r0, lsl #11
   25f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f08:	sub	sp, sp, #1424	; 0x590
   25f0c:	sub	sp, sp, #4
   25f10:	ldr	sl, [pc, #3608]	; 26d30 <__assert_fail@plt+0x1473c>
   25f14:	mov	r3, #0
   25f18:	add	fp, sp, #152	; 0x98
   25f1c:	mov	r8, #38	; 0x26
   25f20:	add	r9, sp, #304	; 0x130
   25f24:	mov	r7, r3
   25f28:	str	r3, [sp, #104]	; 0x68
   25f2c:	strh	r3, [sp, #152]	; 0x98
   25f30:	mvn	r3, #1
   25f34:	str	r0, [sp, #100]	; 0x64
   25f38:	str	r3, [sp, #52]	; 0x34
   25f3c:	cmn	r8, #93	; 0x5d
   25f40:	beq	25f8c <__assert_fail@plt+0x13998>
   25f44:	ldr	r3, [sp, #52]	; 0x34
   25f48:	cmn	r3, #2
   25f4c:	beq	2627c <__assert_fail@plt+0x13c88>
   25f50:	ldr	r2, [sp, #52]	; 0x34
   25f54:	cmp	r2, #0
   25f58:	ble	26320 <__assert_fail@plt+0x13d2c>
   25f5c:	ldr	r3, [pc, #3536]	; 26d34 <__assert_fail@plt+0x14740>
   25f60:	cmp	r2, r3
   25f64:	movgt	r2, #2
   25f68:	ble	2626c <__assert_fail@plt+0x13c78>
   25f6c:	add	r8, r2, r8
   25f70:	cmp	r8, #112	; 0x70
   25f74:	bhi	25f8c <__assert_fail@plt+0x13998>
   25f78:	add	r8, sl, r8
   25f7c:	add	r3, r8, #2064	; 0x810
   25f80:	ldrsb	r3, [r3, #12]
   25f84:	cmp	r2, r3
   25f88:	beq	26348 <__assert_fail@plt+0x13d54>
   25f8c:	add	r3, sl, r7
   25f90:	ldrb	lr, [r3, #2308]	; 0x904
   25f94:	cmp	lr, #0
   25f98:	beq	261a0 <__assert_fail@plt+0x13bac>
   25f9c:	add	r3, sl, lr
   25fa0:	add	r6, sp, #256	; 0x100
   25fa4:	ldrb	r3, [r3, #2424]	; 0x978
   25fa8:	sub	r8, r6, #8
   25fac:	rsb	ip, r3, #1
   25fb0:	str	r3, [sp, #108]	; 0x6c
   25fb4:	rsb	ip, ip, ip, lsl #3
   25fb8:	sub	r3, lr, #4
   25fbc:	add	ip, r9, ip, lsl #3
   25fc0:	str	r3, [sp, #120]	; 0x78
   25fc4:	mov	r7, ip
   25fc8:	ldr	r3, [ip, #8]
   25fcc:	ldrd	r4, [ip, #16]
   25fd0:	str	r3, [sp, #76]	; 0x4c
   25fd4:	ldm	r7!, {r0, r1, r2, r3}
   25fd8:	strd	r4, [sp, #56]	; 0x38
   25fdc:	mov	r5, r8
   25fe0:	str	r3, [sp, #80]	; 0x50
   25fe4:	stmia	r5!, {r0, r1, r2, r3}
   25fe8:	ldm	r7!, {r0, r1, r2, r3}
   25fec:	stmia	r5!, {r0, r1, r2, r3}
   25ff0:	ldm	r7!, {r0, r1, r2, r3}
   25ff4:	stmia	r5!, {r0, r1, r2, r3}
   25ff8:	ldm	r7, {r0, r1}
   25ffc:	ldr	r3, [ip, #24]
   26000:	ldr	r4, [sp, #120]	; 0x78
   26004:	str	r3, [sp, #92]	; 0x5c
   26008:	ldr	r3, [ip, #28]
   2600c:	stm	r5, {r0, r1}
   26010:	str	r3, [sp, #96]	; 0x60
   26014:	ldr	r3, [ip, #32]
   26018:	str	r3, [sp, #84]	; 0x54
   2601c:	ldr	r3, [ip, #36]	; 0x24
   26020:	str	r3, [sp, #88]	; 0x58
   26024:	ldrd	r2, [ip, #40]	; 0x28
   26028:	strd	r2, [sp, #64]	; 0x40
   2602c:	ldr	r3, [ip, #48]	; 0x30
   26030:	str	r3, [sp, #72]	; 0x48
   26034:	cmp	r4, #87	; 0x57
   26038:	ldrls	pc, [pc, r4, lsl #2]
   2603c:	b	28014 <__assert_fail@plt+0x15a20>
   26040:	ldrdeq	r7, [r2], -ip
   26044:	andeq	r8, r2, r4, lsl r0
   26048:	andeq	r8, r2, r4, lsl r0
   2604c:	andeq	r6, r2, r8, asr #30
   26050:	andeq	r6, r2, r0, lsr #30
   26054:	strdeq	r6, [r2], -r8
   26058:	ldrdeq	r6, [r2], -r0
   2605c:	andeq	r6, r2, r8, lsr #29
   26060:	andeq	r6, r2, r0, lsl #29
   26064:	andeq	r6, r2, r8, ror #28
   26068:	andeq	r6, r2, r0, asr lr
   2606c:	andeq	r6, r2, r8, lsr lr
   26070:	andeq	r8, r2, r4, lsl r0
   26074:	andeq	r8, r2, r4, lsl r0
   26078:	andeq	r6, r2, r4, lsl #28
   2607c:	ldrdeq	r6, [r2], -r4
   26080:	muleq	r2, ip, sp
   26084:	andeq	r8, r2, r4, lsl r0
   26088:	andeq	r7, r2, r4, lsl #14
   2608c:	ldrdeq	r7, [r2], -r4
   26090:	muleq	r2, ip, r6
   26094:	andeq	r8, r2, r4, lsl r0
   26098:	andeq	r8, r2, r4, lsl r0
   2609c:	andeq	r7, r2, ip, asr r6
   260a0:	andeq	r7, r2, r0, lsl #15
   260a4:	andeq	r7, r2, r0, ror #14
   260a8:	andeq	r7, r2, ip, asr #14
   260ac:	andeq	r7, r2, r8, lsr r7
   260b0:	andeq	r7, r2, ip, lsr #21
   260b4:	andeq	r7, r2, r8, ror #19
   260b8:	andeq	r7, r2, r4, ror r9
   260bc:	andeq	r7, r2, ip, asr r9
   260c0:	andeq	r7, r2, r4, ror sl
   260c4:	andeq	r7, r2, r4, asr sl
   260c8:	andeq	r7, r2, ip, lsl #21
   260cc:	andeq	r6, r2, r8, ror sp
   260d0:	andeq	r6, r2, r8, asr #25
   260d4:	andeq	r6, r2, ip, lsr #25
   260d8:	andeq	r6, r2, ip, ror #25
   260dc:	andeq	r6, r2, r8, ror #24
   260e0:	andeq	r6, r2, r0, lsl ip
   260e4:	strdeq	r6, [r2], -r4
   260e8:	andeq	r6, r2, r4, asr #23
   260ec:	andeq	r6, r2, r8, lsr #23
   260f0:	andeq	r6, r2, r8, ror #22
   260f4:	andeq	r8, r2, r4, lsl r0
   260f8:	andeq	r6, r2, r8, lsl #22
   260fc:			; <UNDEFINED> instruction: 0x00026ab4
   26100:	andeq	r6, r2, r0, ror #20
   26104:	andeq	r6, r2, ip, lsl #20
   26108:			; <UNDEFINED> instruction: 0x000269b4
   2610c:	andeq	r6, r2, ip, asr r9
   26110:	andeq	r6, r2, r0, lsl #18
   26114:	andeq	r6, r2, r8, lsr #17
   26118:	andeq	r6, r2, r0, asr r8
   2611c:	strdeq	r6, [r2], -r8
   26120:	andeq	r6, r2, ip, lsr #14
   26124:	muleq	r2, r0, r5
   26128:	andeq	r7, r2, r4, asr #10
   2612c:	andeq	r7, r2, ip, ror #9
   26130:	muleq	r2, r4, r4
   26134:	andeq	r7, r2, ip, lsr r4
   26138:	andeq	r7, r2, ip, ror #7
   2613c:	muleq	r2, ip, r3
   26140:	andeq	r7, r2, ip, asr #6
   26144:	andeq	r7, r2, r0, lsl #6
   26148:			; <UNDEFINED> instruction: 0x000272b4
   2614c:	andeq	r7, r2, r0, ror #4
   26150:	andeq	r7, r2, ip, lsl #4
   26154:			; <UNDEFINED> instruction: 0x000278b8
   26158:	andeq	r8, r2, r4, lsl r0
   2615c:	andeq	r7, r2, r0, ror #16
   26160:	andeq	r7, r2, r4, lsl #18
   26164:	muleq	r2, r4, r7
   26168:	andeq	r7, r2, r0, ror #2
   2616c:	andeq	r7, r2, r0, lsl r1
   26170:	andeq	r7, r2, r4, asr #1
   26174:	andeq	r7, r2, r8, ror r0
   26178:	andeq	r8, r2, r4, lsl r0
   2617c:	andeq	r8, r2, r4, lsl r0
   26180:	andeq	r8, r2, r4, lsl r0
   26184:	andeq	r7, r2, r4, asr #32
   26188:	andeq	r8, r2, r4, lsl r0
   2618c:	andeq	r7, r2, r0, lsl r0
   26190:	strdeq	r6, [r2], -r0
   26194:	andeq	r6, r2, ip, ror pc
   26198:	andeq	r7, r2, r8, asr #3
   2619c:			; <UNDEFINED> instruction: 0x000271b8
   261a0:	ldr	r3, [sp, #104]	; 0x68
   261a4:	cmp	r3, #3
   261a8:	beq	2632c <__assert_fail@plt+0x13d38>
   261ac:	add	r1, sp, #152	; 0x98
   261b0:	b	261c4 <__assert_fail@plt+0x13bd0>
   261b4:	cmp	fp, r1
   261b8:	beq	26248 <__assert_fail@plt+0x13c54>
   261bc:	ldrsh	r7, [fp, #-2]!
   261c0:	sub	r9, r9, #56	; 0x38
   261c4:	add	r7, sl, r7
   261c8:	add	r7, r7, #936	; 0x3a8
   261cc:	ldrsb	r3, [r7]
   261d0:	cmn	r3, #93	; 0x5d
   261d4:	add	r2, r3, #1
   261d8:	beq	261b4 <__assert_fail@plt+0x13bc0>
   261dc:	cmp	r2, #112	; 0x70
   261e0:	add	r3, sl, r2
   261e4:	bhi	261b4 <__assert_fail@plt+0x13bc0>
   261e8:	ldrb	r2, [r3, #2076]	; 0x81c
   261ec:	cmp	r2, #1
   261f0:	bne	261b4 <__assert_fail@plt+0x13bc0>
   261f4:	ldrb	r7, [r3, #2192]	; 0x890
   261f8:	cmp	r7, #0
   261fc:	beq	261b4 <__assert_fail@plt+0x13bc0>
   26200:	ldr	r3, [sp, #124]	; 0x7c
   26204:	add	r4, sp, #192	; 0xc0
   26208:	str	r3, [sp, #208]	; 0xd0
   2620c:	ldrd	r2, [sp, #112]	; 0x70
   26210:	add	r9, r9, #56	; 0x38
   26214:	mov	lr, r9
   26218:	strd	r2, [sp, #200]	; 0xc8
   2621c:	ldm	r4!, {r0, r1, r2, r3}
   26220:	mov	r5, #3
   26224:	mov	ip, fp
   26228:	str	r5, [sp, #104]	; 0x68
   2622c:	stmia	lr!, {r0, r1, r2, r3}
   26230:	ldm	r4!, {r0, r1, r2, r3}
   26234:	b	26398 <__assert_fail@plt+0x13da4>
   26238:	ldr	r1, [sp, #100]	; 0x64
   2623c:	mov	r2, r4
   26240:	mov	r3, r5
   26244:	strd	r2, [r1, #56]	; 0x38
   26248:	mov	r0, #1
   2624c:	add	sp, sp, #1424	; 0x590
   26250:	add	sp, sp, #4
   26254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26258:	mov	r2, #0
   2625c:	mov	r3, #0
   26260:	ldr	r1, [pc, #2768]	; 26d38 <__assert_fail@plt+0x14744>
   26264:	strd	r2, [sp, #192]	; 0xc0
   26268:	str	r1, [sp, #52]	; 0x34
   2626c:	ldr	r3, [sp, #52]	; 0x34
   26270:	add	r3, sl, r3
   26274:	ldrb	r2, [r3, #1796]	; 0x704
   26278:	b	25f6c <__assert_fail@plt+0x13978>
   2627c:	ldr	ip, [sp, #100]	; 0x64
   26280:	ldr	r0, [pc, #2740]	; 26d3c <__assert_fail@plt+0x14748>
   26284:	mov	r1, #1
   26288:	ldr	r4, [ip]
   2628c:	ldrb	r5, [r4]
   26290:	sub	r3, r5, #9
   26294:	cmp	r3, #23
   26298:	bhi	262a4 <__assert_fail@plt+0x13cb0>
   2629c:	ands	r3, r0, r1, lsl r3
   262a0:	bne	263d8 <__assert_fail@plt+0x13de4>
   262a4:	sub	r6, r5, #48	; 0x30
   262a8:	cmp	r6, #9
   262ac:	bls	263fc <__assert_fail@plt+0x13e08>
   262b0:	sub	r3, r5, #43	; 0x2b
   262b4:	tst	r3, #253	; 0xfd
   262b8:	beq	2653c <__assert_fail@plt+0x13f48>
   262bc:	cmp	r5, #65	; 0x41
   262c0:	bcc	262d8 <__assert_fail@plt+0x13ce4>
   262c4:	cmp	r5, #90	; 0x5a
   262c8:	bls	27b80 <__assert_fail@plt+0x1558c>
   262cc:	sub	r3, r5, #97	; 0x61
   262d0:	cmp	r3, #25
   262d4:	bls	27b80 <__assert_fail@plt+0x1558c>
   262d8:	cmp	r5, #40	; 0x28
   262dc:	bne	27e3c <__assert_fail@plt+0x15848>
   262e0:	ldr	r2, [ip]
   262e4:	mov	lr, #0
   262e8:	b	2630c <__assert_fail@plt+0x13d18>
   262ec:	cmp	r3, #40	; 0x28
   262f0:	addeq	lr, lr, #1
   262f4:	beq	26300 <__assert_fail@plt+0x13d0c>
   262f8:	cmp	r3, #41	; 0x29
   262fc:	subeq	lr, lr, #1
   26300:	cmp	lr, #0
   26304:	beq	2671c <__assert_fail@plt+0x14128>
   26308:	mov	r2, r4
   2630c:	add	r4, r2, #1
   26310:	str	r4, [ip]
   26314:	ldrb	r3, [r4, #-1]
   26318:	cmp	r3, #0
   2631c:	bne	262ec <__assert_fail@plt+0x13cf8>
   26320:	mov	r2, #0
   26324:	str	r2, [sp, #52]	; 0x34
   26328:	b	25f6c <__assert_fail@plt+0x13978>
   2632c:	ldr	r3, [sp, #52]	; 0x34
   26330:	cmp	r3, #0
   26334:	mvngt	r3, #1
   26338:	strgt	r3, [sp, #52]	; 0x34
   2633c:	bgt	261ac <__assert_fail@plt+0x13bb8>
   26340:	bne	261ac <__assert_fail@plt+0x13bb8>
   26344:	b	26248 <__assert_fail@plt+0x13c54>
   26348:	ldrb	r7, [r8, #2192]	; 0x890
   2634c:	cmp	r7, #0
   26350:	beq	2654c <__assert_fail@plt+0x13f58>
   26354:	ldr	r3, [sp, #104]	; 0x68
   26358:	add	r4, sp, #192	; 0xc0
   2635c:	cmp	r3, #0
   26360:	subne	r3, r3, #1
   26364:	strne	r3, [sp, #104]	; 0x68
   26368:	ldr	r3, [sp, #124]	; 0x7c
   2636c:	add	r9, r9, #56	; 0x38
   26370:	str	r3, [sp, #208]	; 0xd0
   26374:	ldrd	r2, [sp, #112]	; 0x70
   26378:	mov	lr, r9
   2637c:	mov	ip, fp
   26380:	strd	r2, [sp, #200]	; 0xc8
   26384:	ldm	r4!, {r0, r1, r2, r3}
   26388:	mvn	r5, #1
   2638c:	str	r5, [sp, #52]	; 0x34
   26390:	stmia	lr!, {r0, r1, r2, r3}
   26394:	ldm	r4!, {r0, r1, r2, r3}
   26398:	stmia	lr!, {r0, r1, r2, r3}
   2639c:	ldm	r4!, {r0, r1, r2, r3}
   263a0:	stmia	lr!, {r0, r1, r2, r3}
   263a4:	ldm	r4, {r0, r1}
   263a8:	stm	lr, {r0, r1}
   263ac:	add	fp, ip, #2
   263b0:	add	r3, sp, #190	; 0xbe
   263b4:	cmp	fp, r3
   263b8:	strh	r7, [ip, #2]
   263bc:	bcs	27b70 <__assert_fail@plt+0x1557c>
   263c0:	cmp	r7, #12
   263c4:	beq	27b78 <__assert_fail@plt+0x15584>
   263c8:	add	r3, sl, r7
   263cc:	add	r3, r3, #936	; 0x3a8
   263d0:	ldrsb	r8, [r3]
   263d4:	b	25f3c <__assert_fail@plt+0x13948>
   263d8:	add	r4, r4, #1
   263dc:	str	r4, [ip]
   263e0:	ldrb	r5, [r4]
   263e4:	sub	r3, r5, #9
   263e8:	cmp	r3, #23
   263ec:	bls	2629c <__assert_fail@plt+0x13ca8>
   263f0:	sub	r6, r5, #48	; 0x30
   263f4:	cmp	r6, #9
   263f8:	bhi	262b0 <__assert_fail@plt+0x13cbc>
   263fc:	sub	r3, r5, #43	; 0x2b
   26400:	tst	r3, #253	; 0xfd
   26404:	bne	27c4c <__assert_fail@plt+0x15658>
   26408:	mov	r2, r1
   2640c:	add	r4, r4, #1
   26410:	str	r4, [ip]
   26414:	ldrb	r5, [r4]
   26418:	sub	r3, r5, #9
   2641c:	cmp	r3, #23
   26420:	bhi	2642c <__assert_fail@plt+0x13e38>
   26424:	ands	r3, r0, r1, lsl r3
   26428:	bne	2640c <__assert_fail@plt+0x13e18>
   2642c:	sub	r6, r5, #48	; 0x30
   26430:	cmp	r6, #9
   26434:	bhi	26290 <__assert_fail@plt+0x13c9c>
   26438:	mov	r3, #0
   2643c:	mov	r1, r6
   26440:	mov	r6, r3
   26444:	mov	r3, r8
   26448:	mov	r8, r7
   2644c:	mov	r7, r4
   26450:	mov	r4, r1
   26454:	cmp	r6, #0
   26458:	blt	26698 <__assert_fail@plt+0x140a4>
   2645c:	ldr	r1, [pc, #2268]	; 26d40 <__assert_fail@plt+0x1474c>
   26460:	cmp	r6, r1
   26464:	bgt	266c0 <__assert_fail@plt+0x140cc>
   26468:	add	r6, r6, r6, lsl #2
   2646c:	cmn	r2, #1
   26470:	lsl	r0, r6, #1
   26474:	beq	266dc <__assert_fail@plt+0x140e8>
   26478:	cmp	r0, #0
   2647c:	mvnge	r1, #-2147483648	; 0x80000000
   26480:	subge	r1, r1, r4
   26484:	blt	27b68 <__assert_fail@plt+0x15574>
   26488:	cmp	r1, r0
   2648c:	movge	r1, #0
   26490:	movlt	r1, #1
   26494:	cmp	r1, #0
   26498:	bne	266c0 <__assert_fail@plt+0x140cc>
   2649c:	cmn	r2, #1
   264a0:	rsbeq	r4, r5, #48	; 0x30
   264a4:	ldrb	r5, [r7, #1]
   264a8:	add	r6, r4, r0
   264ac:	add	r1, r7, #1
   264b0:	sub	r4, r5, #48	; 0x30
   264b4:	cmp	r4, #9
   264b8:	bls	266d4 <__assert_fail@plt+0x140e0>
   264bc:	and	r5, r5, #253	; 0xfd
   264c0:	cmp	r5, #44	; 0x2c
   264c4:	mov	r4, r7
   264c8:	mov	r7, r8
   264cc:	mov	r8, r3
   264d0:	mov	r3, r6
   264d4:	bne	27b1c <__assert_fail@plt+0x15528>
   264d8:	ldrb	r0, [r1, #1]
   264dc:	sub	r0, r0, #48	; 0x30
   264e0:	cmp	r0, #9
   264e4:	bhi	27b1c <__assert_fail@plt+0x15528>
   264e8:	ldrb	ip, [r4, #3]
   264ec:	mov	r1, r0
   264f0:	add	r4, r4, #3
   264f4:	sub	r0, ip, #48	; 0x30
   264f8:	mov	lr, #8
   264fc:	add	r1, r1, r1, lsl #2
   26500:	cmp	r0, #9
   26504:	lsl	r1, r1, #1
   26508:	ldrbls	ip, [r4, #1]
   2650c:	addls	r1, r1, r0
   26510:	addls	r4, r4, #1
   26514:	subls	r0, ip, #48	; 0x30
   26518:	subs	lr, lr, #1
   2651c:	bne	264fc <__assert_fail@plt+0x13f08>
   26520:	cmn	r2, #1
   26524:	beq	28068 <__assert_fail@plt+0x15a74>
   26528:	cmp	r0, #9
   2652c:	bhi	2801c <__assert_fail@plt+0x15a28>
   26530:	ldrb	r0, [r4, #1]!
   26534:	sub	r0, r0, #48	; 0x30
   26538:	b	26528 <__assert_fail@plt+0x13f34>
   2653c:	cmp	r5, #45	; 0x2d
   26540:	mvneq	r2, #0
   26544:	movne	r2, #1
   26548:	b	2640c <__assert_fail@plt+0x13e18>
   2654c:	add	lr, r9, #56	; 0x38
   26550:	add	r6, sp, #256	; 0x100
   26554:	ldm	lr!, {r0, r1, r2, r3}
   26558:	sub	r8, r6, #8
   2655c:	mov	ip, r8
   26560:	ldr	r4, [r9, #64]	; 0x40
   26564:	stmia	ip!, {r0, r1, r2, r3}
   26568:	ldm	lr!, {r0, r1, r2, r3}
   2656c:	str	r4, [sp, #76]	; 0x4c
   26570:	ldr	r4, [r9, #68]	; 0x44
   26574:	stmia	ip!, {r0, r1, r2, r3}
   26578:	str	r4, [sp, #80]	; 0x50
   2657c:	ldrd	r4, [r9, #72]	; 0x48
   26580:	ldm	lr!, {r0, r1, r2, r3}
   26584:	strd	r4, [sp, #56]	; 0x38
   26588:	ldr	r4, [r9, #80]	; 0x50
   2658c:	str	r7, [sp, #108]	; 0x6c
   26590:	str	r4, [sp, #92]	; 0x5c
   26594:	stmia	ip!, {r0, r1, r2, r3}
   26598:	ldr	r3, [r9, #84]	; 0x54
   2659c:	ldm	lr, {r0, r1}
   265a0:	str	r3, [sp, #96]	; 0x60
   265a4:	ldr	r3, [r9, #88]	; 0x58
   265a8:	stm	ip, {r0, r1}
   265ac:	str	r3, [sp, #84]	; 0x54
   265b0:	ldr	r3, [r9, #92]	; 0x5c
   265b4:	str	r3, [sp, #88]	; 0x58
   265b8:	ldrd	r2, [r9, #96]	; 0x60
   265bc:	strd	r2, [sp, #64]	; 0x40
   265c0:	ldr	r3, [r9, #104]	; 0x68
   265c4:	str	r3, [sp, #72]	; 0x48
   265c8:	ldr	r2, [sp, #76]	; 0x4c
   265cc:	ldrsh	ip, [sp, #108]	; 0x6c
   265d0:	str	r2, [r6]
   265d4:	ldr	r2, [sp, #80]	; 0x50
   265d8:	ldrd	r0, [sp, #56]	; 0x38
   265dc:	str	r2, [r6, #4]
   265e0:	ldr	r2, [sp, #92]	; 0x5c
   265e4:	strd	r0, [r6, #8]
   265e8:	str	r2, [r6, #16]
   265ec:	ldr	r2, [sp, #96]	; 0x60
   265f0:	ldrd	r0, [sp, #64]	; 0x40
   265f4:	str	r2, [r6, #20]
   265f8:	ldr	r2, [sp, #84]	; 0x54
   265fc:	rsb	r3, ip, ip, lsl #3
   26600:	str	r2, [r6, #24]
   26604:	ldr	r2, [sp, #88]	; 0x58
   26608:	strd	r0, [r6, #32]
   2660c:	str	r2, [r6, #28]
   26610:	ldr	r2, [sp, #72]	; 0x48
   26614:	sub	r9, r9, r3, lsl #3
   26618:	str	r2, [sp, #296]	; 0x128
   2661c:	ldm	r8!, {r0, r1, r2, r3}
   26620:	add	r9, r9, #56	; 0x38
   26624:	mov	lr, r9
   26628:	add	r7, sl, r7
   2662c:	stmia	lr!, {r0, r1, r2, r3}
   26630:	sub	ip, fp, ip, lsl #1
   26634:	ldm	r8!, {r0, r1, r2, r3}
   26638:	stmia	lr!, {r0, r1, r2, r3}
   2663c:	ldm	r8!, {r0, r1, r2, r3}
   26640:	ldrsh	r4, [ip]
   26644:	stmia	lr!, {r0, r1, r2, r3}
   26648:	ldrb	r3, [r7, #2516]	; 0x9d4
   2664c:	ldm	r8, {r0, r1}
   26650:	sub	r3, r3, #28
   26654:	add	r2, sl, r3
   26658:	add	r2, r2, #2608	; 0xa30
   2665c:	stm	lr, {r0, r1}
   26660:	ldrsb	r2, [r2]
   26664:	add	r2, r2, r4
   26668:	cmp	r2, #112	; 0x70
   2666c:	bhi	26688 <__assert_fail@plt+0x14094>
   26670:	add	r2, sl, r2
   26674:	add	r1, r2, #2064	; 0x810
   26678:	ldrsb	r1, [r1, #12]
   2667c:	cmp	r1, r4
   26680:	ldrbeq	r7, [r2, #2192]	; 0x890
   26684:	beq	263ac <__assert_fail@plt+0x13db8>
   26688:	add	r3, sl, r3
   2668c:	add	r3, r3, #2624	; 0xa40
   26690:	ldrsb	r7, [r3, #12]
   26694:	b	263ac <__assert_fail@plt+0x13db8>
   26698:	cmn	r6, #1
   2669c:	beq	26468 <__assert_fail@plt+0x13e74>
   266a0:	mov	r1, r6
   266a4:	mov	r0, #-2147483648	; 0x80000000
   266a8:	str	r3, [sp, #52]	; 0x34
   266ac:	str	r2, [sp, #56]	; 0x38
   266b0:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   266b4:	ldr	r3, [sp, #52]	; 0x34
   266b8:	cmp	r0, #9
   266bc:	bgt	26724 <__assert_fail@plt+0x14130>
   266c0:	mov	r7, r8
   266c4:	mov	r8, r3
   266c8:	mov	r3, #63	; 0x3f
   266cc:	str	r3, [sp, #52]	; 0x34
   266d0:	b	2626c <__assert_fail@plt+0x13c78>
   266d4:	mov	r7, r1
   266d8:	b	26454 <__assert_fail@plt+0x13e60>
   266dc:	rsbs	r1, r5, #48	; 0x30
   266e0:	bne	26708 <__assert_fail@plt+0x14114>
   266e4:	cmp	r0, #0
   266e8:	subge	r1, r5, #-2147483599	; 0x80000031
   266ec:	bge	26488 <__assert_fail@plt+0x13e94>
   266f0:	mov	ip, #0
   266f4:	rsb	r1, r0, #-2147483648	; 0x80000000
   266f8:	cmp	r1, ip
   266fc:	movle	r1, #0
   26700:	movgt	r1, #1
   26704:	b	26494 <__assert_fail@plt+0x13ea0>
   26708:	rsb	r1, r1, #-2147483648	; 0x80000000
   2670c:	cmp	r1, r0
   26710:	movle	r1, #0
   26714:	movgt	r1, #1
   26718:	b	26494 <__assert_fail@plt+0x13ea0>
   2671c:	ldrb	r5, [r2, #1]
   26720:	b	26290 <__assert_fail@plt+0x13c9c>
   26724:	ldr	r2, [sp, #56]	; 0x38
   26728:	b	26468 <__assert_fail@plt+0x13e74>
   2672c:	mov	r2, #56	; 0x38
   26730:	mov	r1, #0
   26734:	mov	r0, r8
   26738:	bl	12378 <memset@plt>
   2673c:	ldrd	r4, [r9]
   26740:	cmp	r4, #0
   26744:	sbcs	r3, r5, #0
   26748:	blt	27d94 <__assert_fail@plt+0x157a0>
   2674c:	orrs	r3, r4, r5
   26750:	beq	26798 <__assert_fail@plt+0x141a4>
   26754:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   26758:	cmp	r2, #0
   2675c:	strd	r2, [sp, #56]	; 0x38
   26760:	sbcs	r3, r3, #0
   26764:	blt	27f70 <__assert_fail@plt+0x1597c>
   26768:	mov	r2, r4
   2676c:	mov	r3, r5
   26770:	mvn	r0, #0
   26774:	mvn	r1, #-2147483648	; 0x80000000
   26778:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   2677c:	ldrd	r2, [sp, #56]	; 0x38
   26780:	cmp	r0, r2
   26784:	sbcs	r3, r1, r3
   26788:	movlt	r3, #1
   2678c:	movge	r3, #0
   26790:	cmp	r3, #0
   26794:	bne	26248 <__assert_fail@plt+0x13c54>
   26798:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2679c:	mov	r0, #0
   267a0:	mov	r1, #0
   267a4:	ldr	r2, [r9, #-52]	; 0xffffffcc
   267a8:	strd	r0, [sp, #64]	; 0x40
   267ac:	umull	r0, r1, r3, r4
   267b0:	mul	r2, r4, r2
   267b4:	strd	r0, [sp, #56]	; 0x38
   267b8:	mla	r3, r3, r5, r2
   267bc:	ldr	r2, [sp, #60]	; 0x3c
   267c0:	mov	r0, #0
   267c4:	add	r3, r3, r2
   267c8:	mov	r1, #0
   267cc:	str	r3, [sp, #60]	; 0x3c
   267d0:	mov	r3, #0
   267d4:	str	r0, [sp, #84]	; 0x54
   267d8:	str	r1, [sp, #88]	; 0x58
   267dc:	str	r0, [sp, #92]	; 0x5c
   267e0:	str	r1, [sp, #96]	; 0x60
   267e4:	str	r0, [sp, #76]	; 0x4c
   267e8:	str	r1, [sp, #80]	; 0x50
   267ec:	mov	r7, #60	; 0x3c
   267f0:	str	r3, [sp, #72]	; 0x48
   267f4:	b	265c8 <__assert_fail@plt+0x13fd4>
   267f8:	mov	r4, #0
   267fc:	mov	r5, #0
   26800:	mov	r2, #56	; 0x38
   26804:	mov	r1, #0
   26808:	mov	r0, r8
   2680c:	strd	r4, [sp, #64]	; 0x40
   26810:	bl	12378 <memset@plt>
   26814:	mov	r3, r5
   26818:	mov	r2, r4
   2681c:	str	r4, [sp, #84]	; 0x54
   26820:	strd	r2, [sp, #56]	; 0x38
   26824:	mov	r3, #0
   26828:	str	r3, [sp, #72]	; 0x48
   2682c:	mov	r3, #1
   26830:	str	r3, [sp, #76]	; 0x4c
   26834:	mov	r3, #0
   26838:	str	r5, [sp, #88]	; 0x58
   2683c:	str	r4, [sp, #92]	; 0x5c
   26840:	str	r5, [sp, #96]	; 0x60
   26844:	mov	r7, #59	; 0x3b
   26848:	str	r3, [sp, #80]	; 0x50
   2684c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26850:	mov	r4, #0
   26854:	mov	r5, #0
   26858:	mov	r2, #56	; 0x38
   2685c:	mov	r1, #0
   26860:	mov	r0, r8
   26864:	strd	r4, [sp, #64]	; 0x40
   26868:	bl	12378 <memset@plt>
   2686c:	mov	r3, r5
   26870:	mov	r2, r4
   26874:	str	r4, [sp, #84]	; 0x54
   26878:	strd	r2, [sp, #56]	; 0x38
   2687c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   26880:	str	r5, [sp, #88]	; 0x58
   26884:	str	r3, [sp, #76]	; 0x4c
   26888:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2688c:	str	r4, [sp, #92]	; 0x5c
   26890:	str	r3, [sp, #80]	; 0x50
   26894:	mov	r3, #0
   26898:	str	r5, [sp, #96]	; 0x60
   2689c:	mov	r7, #58	; 0x3a
   268a0:	str	r3, [sp, #72]	; 0x48
   268a4:	b	265c8 <__assert_fail@plt+0x13fd4>
   268a8:	mov	r4, #0
   268ac:	mov	r5, #0
   268b0:	mov	r2, #56	; 0x38
   268b4:	mov	r1, #0
   268b8:	mov	r0, r8
   268bc:	strd	r4, [sp, #64]	; 0x40
   268c0:	bl	12378 <memset@plt>
   268c4:	mov	r3, r5
   268c8:	mov	r2, r4
   268cc:	str	r4, [sp, #84]	; 0x54
   268d0:	strd	r2, [sp, #56]	; 0x38
   268d4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   268d8:	str	r5, [sp, #88]	; 0x58
   268dc:	str	r3, [sp, #76]	; 0x4c
   268e0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   268e4:	str	r4, [sp, #92]	; 0x5c
   268e8:	str	r3, [sp, #80]	; 0x50
   268ec:	mov	r3, #0
   268f0:	str	r5, [sp, #96]	; 0x60
   268f4:	mov	r7, #57	; 0x39
   268f8:	str	r3, [sp, #72]	; 0x48
   268fc:	b	265c8 <__assert_fail@plt+0x13fd4>
   26900:	mov	r2, #56	; 0x38
   26904:	mov	r1, #0
   26908:	mov	r0, r8
   2690c:	bl	12378 <memset@plt>
   26910:	mov	r2, #1
   26914:	mov	r3, #0
   26918:	mov	r0, #0
   2691c:	mov	r1, #0
   26920:	strd	r2, [r6, #-8]
   26924:	mov	r3, r1
   26928:	mov	r2, r0
   2692c:	str	r3, [sp, #88]	; 0x58
   26930:	str	r3, [sp, #96]	; 0x60
   26934:	strd	r2, [sp, #56]	; 0x38
   26938:	str	r3, [sp, #80]	; 0x50
   2693c:	mov	r3, #0
   26940:	strd	r0, [sp, #64]	; 0x40
   26944:	str	r0, [sp, #84]	; 0x54
   26948:	str	r0, [sp, #92]	; 0x5c
   2694c:	str	r0, [sp, #76]	; 0x4c
   26950:	mov	r7, #56	; 0x38
   26954:	str	r3, [sp, #72]	; 0x48
   26958:	b	265c8 <__assert_fail@plt+0x13fd4>
   2695c:	mov	r2, #56	; 0x38
   26960:	mov	r1, #0
   26964:	mov	r0, r8
   26968:	bl	12378 <memset@plt>
   2696c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   26970:	mov	r0, #0
   26974:	mov	r1, #0
   26978:	strd	r2, [r6, #-8]
   2697c:	mov	r3, r1
   26980:	mov	r2, r0
   26984:	str	r3, [sp, #96]	; 0x60
   26988:	strd	r2, [sp, #56]	; 0x38
   2698c:	str	r3, [sp, #80]	; 0x50
   26990:	mov	r3, #0
   26994:	strd	r0, [sp, #64]	; 0x40
   26998:	str	r0, [sp, #84]	; 0x54
   2699c:	str	r1, [sp, #88]	; 0x58
   269a0:	str	r0, [sp, #92]	; 0x5c
   269a4:	str	r0, [sp, #76]	; 0x4c
   269a8:	mov	r7, #55	; 0x37
   269ac:	str	r3, [sp, #72]	; 0x48
   269b0:	b	265c8 <__assert_fail@plt+0x13fd4>
   269b4:	mov	r2, #56	; 0x38
   269b8:	mov	r1, #0
   269bc:	mov	r0, r8
   269c0:	bl	12378 <memset@plt>
   269c4:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   269c8:	mov	r0, #0
   269cc:	mov	r1, #0
   269d0:	strd	r2, [r6, #-8]
   269d4:	mov	r3, r1
   269d8:	mov	r2, r0
   269dc:	str	r3, [sp, #96]	; 0x60
   269e0:	strd	r2, [sp, #56]	; 0x38
   269e4:	str	r3, [sp, #80]	; 0x50
   269e8:	mov	r3, #0
   269ec:	strd	r0, [sp, #64]	; 0x40
   269f0:	str	r0, [sp, #84]	; 0x54
   269f4:	str	r1, [sp, #88]	; 0x58
   269f8:	str	r0, [sp, #92]	; 0x5c
   269fc:	str	r0, [sp, #76]	; 0x4c
   26a00:	mov	r7, #54	; 0x36
   26a04:	str	r3, [sp, #72]	; 0x48
   26a08:	b	265c8 <__assert_fail@plt+0x13fd4>
   26a0c:	mov	r1, #1
   26a10:	ldrd	r2, [r9]
   26a14:	str	r1, [sp, #44]	; 0x2c
   26a18:	ldr	r1, [r9, #48]	; 0x30
   26a1c:	ldr	r0, [sp, #100]	; 0x64
   26a20:	str	r1, [sp, #40]	; 0x28
   26a24:	ldrd	r4, [r9, #40]	; 0x28
   26a28:	strd	r4, [sp, #32]
   26a2c:	ldrd	r4, [r9, #32]
   26a30:	strd	r4, [sp, #24]
   26a34:	ldrd	r4, [r9, #24]
   26a38:	strd	r4, [sp, #16]
   26a3c:	ldrd	r4, [r9, #16]
   26a40:	strd	r4, [sp, #8]
   26a44:	ldrd	r4, [r9, #8]
   26a48:	strd	r4, [sp]
   26a4c:	bl	25440 <__assert_fail@plt+0x12e4c>
   26a50:	cmp	r0, #0
   26a54:	beq	26248 <__assert_fail@plt+0x13c54>
   26a58:	mov	r7, #53	; 0x35
   26a5c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26a60:	mov	r1, #1
   26a64:	ldrd	r2, [r9]
   26a68:	str	r1, [sp, #44]	; 0x2c
   26a6c:	ldr	r1, [r9, #48]	; 0x30
   26a70:	ldr	r0, [sp, #100]	; 0x64
   26a74:	str	r1, [sp, #40]	; 0x28
   26a78:	ldrd	r4, [r9, #40]	; 0x28
   26a7c:	strd	r4, [sp, #32]
   26a80:	ldrd	r4, [r9, #32]
   26a84:	strd	r4, [sp, #24]
   26a88:	ldrd	r4, [r9, #24]
   26a8c:	strd	r4, [sp, #16]
   26a90:	ldrd	r4, [r9, #16]
   26a94:	strd	r4, [sp, #8]
   26a98:	ldrd	r4, [r9, #8]
   26a9c:	strd	r4, [sp]
   26aa0:	bl	25440 <__assert_fail@plt+0x12e4c>
   26aa4:	cmp	r0, #0
   26aa8:	beq	26248 <__assert_fail@plt+0x13c54>
   26aac:	mov	r7, #52	; 0x34
   26ab0:	b	265c8 <__assert_fail@plt+0x13fd4>
   26ab4:	ldr	r1, [r9]
   26ab8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   26abc:	str	r1, [sp, #44]	; 0x2c
   26ac0:	ldr	r1, [r9, #-8]
   26ac4:	ldr	r0, [sp, #100]	; 0x64
   26ac8:	str	r1, [sp, #40]	; 0x28
   26acc:	ldrd	r4, [r9, #-16]
   26ad0:	strd	r4, [sp, #32]
   26ad4:	ldrd	r4, [r9, #-24]	; 0xffffffe8
   26ad8:	strd	r4, [sp, #24]
   26adc:	ldrd	r4, [r9, #-32]	; 0xffffffe0
   26ae0:	strd	r4, [sp, #16]
   26ae4:	ldrd	r4, [r9, #-40]	; 0xffffffd8
   26ae8:	strd	r4, [sp, #8]
   26aec:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   26af0:	strd	r4, [sp]
   26af4:	bl	25440 <__assert_fail@plt+0x12e4c>
   26af8:	cmp	r0, #0
   26afc:	beq	26248 <__assert_fail@plt+0x13c54>
   26b00:	mov	r7, #51	; 0x33
   26b04:	b	265c8 <__assert_fail@plt+0x13fd4>
   26b08:	ldr	r3, [sp, #100]	; 0x64
   26b0c:	sub	lr, r9, #112	; 0x70
   26b10:	add	ip, r3, #32
   26b14:	ldm	lr!, {r0, r1, r2, r3}
   26b18:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   26b1c:	stmia	ip!, {r0, r1, r2, r3}
   26b20:	cmp	r5, #-2147483648	; 0x80000000
   26b24:	ldm	lr, {r0, r1}
   26b28:	cmpeq	r4, #0
   26b2c:	stm	ip, {r0, r1}
   26b30:	beq	26238 <__assert_fail@plt+0x13c44>
   26b34:	ldrd	r2, [r9, #8]
   26b38:	rsbs	r0, r4, #0
   26b3c:	ldr	ip, [sp, #100]	; 0x64
   26b40:	rsc	r1, r5, #0
   26b44:	cmp	r3, #-2147483648	; 0x80000000
   26b48:	cmpeq	r2, #0
   26b4c:	strd	r0, [ip, #56]	; 0x38
   26b50:	beq	27de4 <__assert_fail@plt+0x157f0>
   26b54:	rsbs	r2, r2, #0
   26b58:	rsc	r3, r3, #0
   26b5c:	mov	r7, #50	; 0x32
   26b60:	strd	r2, [ip, #64]	; 0x40
   26b64:	b	265c8 <__assert_fail@plt+0x13fd4>
   26b68:	ldr	r4, [sp, #100]	; 0x64
   26b6c:	mov	lr, r9
   26b70:	add	ip, r4, #32
   26b74:	str	ip, [sp, #120]	; 0x78
   26b78:	mov	ip, r4
   26b7c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   26b80:	ldm	lr!, {r0, r1, r2, r3}
   26b84:	mov	r7, #48	; 0x30
   26b88:	strd	r4, [ip, #64]	; 0x40
   26b8c:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   26b90:	strd	r4, [ip, #56]	; 0x38
   26b94:	ldr	ip, [sp, #120]	; 0x78
   26b98:	stmia	ip!, {r0, r1, r2, r3}
   26b9c:	ldm	lr, {r0, r1}
   26ba0:	stm	ip, {r0, r1}
   26ba4:	b	265c8 <__assert_fail@plt+0x13fd4>
   26ba8:	ldr	ip, [sp, #100]	; 0x64
   26bac:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   26bb0:	ldrd	r0, [r9]
   26bb4:	mov	r7, #47	; 0x2f
   26bb8:	strd	r2, [ip, #64]	; 0x40
   26bbc:	strd	r0, [ip, #56]	; 0x38
   26bc0:	b	265c8 <__assert_fail@plt+0x13fd4>
   26bc4:	ldr	r4, [sp, #100]	; 0x64
   26bc8:	mov	lr, r9
   26bcc:	add	ip, r4, #32
   26bd0:	ldm	lr!, {r0, r1, r2, r3}
   26bd4:	mov	r7, #46	; 0x2e
   26bd8:	str	ip, [sp, #120]	; 0x78
   26bdc:	mov	ip, r4
   26be0:	ldrd	r4, [r9, #-168]	; 0xffffff58
   26be4:	strd	r4, [ip, #56]	; 0x38
   26be8:	ldrd	r4, [r9, #-104]	; 0xffffff98
   26bec:	strd	r4, [ip, #64]	; 0x40
   26bf0:	b	26b94 <__assert_fail@plt+0x145a0>
   26bf4:	ldr	ip, [sp, #100]	; 0x64
   26bf8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   26bfc:	ldrd	r0, [r9, #8]
   26c00:	mov	r7, #45	; 0x2d
   26c04:	strd	r2, [ip, #56]	; 0x38
   26c08:	strd	r0, [ip, #64]	; 0x40
   26c0c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26c10:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   26c14:	ldrd	r2, [r9, #-112]	; 0xffffff90
   26c18:	ldr	r1, [sp, #100]	; 0x64
   26c1c:	cmp	r5, #-2147483648	; 0x80000000
   26c20:	cmpeq	r4, #0
   26c24:	strd	r2, [r1, #56]	; 0x38
   26c28:	beq	27de4 <__assert_fail@plt+0x157f0>
   26c2c:	ldrd	r2, [r9, #8]
   26c30:	rsbs	r0, r4, #0
   26c34:	ldr	ip, [sp, #100]	; 0x64
   26c38:	rsc	r1, r5, #0
   26c3c:	cmp	r3, #-2147483648	; 0x80000000
   26c40:	cmpeq	r2, #0
   26c44:	strd	r0, [ip, #64]	; 0x40
   26c48:	beq	27cb4 <__assert_fail@plt+0x156c0>
   26c4c:	rsbs	r2, r2, #0
   26c50:	rsc	r3, r3, #0
   26c54:	ldr	r1, [r9, #16]
   26c58:	strd	r2, [ip, #40]	; 0x28
   26c5c:	str	r1, [ip, #48]	; 0x30
   26c60:	mov	r7, #44	; 0x2c
   26c64:	b	265c8 <__assert_fail@plt+0x13fd4>
   26c68:	ldrd	r2, [r9, #-104]	; 0xffffff98
   26c6c:	ldr	r1, [sp, #100]	; 0x64
   26c70:	ldrd	r4, [r9, #8]
   26c74:	strd	r2, [r1, #64]	; 0x40
   26c78:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   26c7c:	cmp	r5, #-2147483648	; 0x80000000
   26c80:	cmpeq	r4, #0
   26c84:	strd	r2, [r1, #56]	; 0x38
   26c88:	beq	27cb4 <__assert_fail@plt+0x156c0>
   26c8c:	rsbs	r0, r4, #0
   26c90:	ldr	r2, [sp, #100]	; 0x64
   26c94:	rsc	r1, r5, #0
   26c98:	ldr	r3, [r9, #16]
   26c9c:	strd	r0, [r2, #40]	; 0x28
   26ca0:	str	r3, [r2, #48]	; 0x30
   26ca4:	mov	r7, #43	; 0x2b
   26ca8:	b	265c8 <__assert_fail@plt+0x13fd4>
   26cac:	ldr	ip, [sp, #100]	; 0x64
   26cb0:	ldrd	r2, [r9, #-104]	; 0xffffff98
   26cb4:	ldrd	r0, [r9, #8]
   26cb8:	mov	r7, #41	; 0x29
   26cbc:	strd	r2, [ip, #56]	; 0x38
   26cc0:	strd	r0, [ip, #64]	; 0x40
   26cc4:	b	265c8 <__assert_fail@plt+0x13fd4>
   26cc8:	ldr	ip, [sp, #100]	; 0x64
   26ccc:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   26cd0:	ldr	r0, [r9]
   26cd4:	mov	r1, #1
   26cd8:	strd	r2, [ip, #8]
   26cdc:	str	r0, [ip, #16]
   26ce0:	strb	r1, [ip, #187]	; 0xbb
   26ce4:	mov	r7, #40	; 0x28
   26ce8:	b	265c8 <__assert_fail@plt+0x13fd4>
   26cec:	ldr	r3, [r9, #-208]	; 0xffffff30
   26cf0:	cmp	r3, #3
   26cf4:	ble	27c54 <__assert_fail@plt+0x15660>
   26cf8:	sub	lr, r9, #224	; 0xe0
   26cfc:	ldr	r4, [sp, #100]	; 0x64
   26d00:	ldm	lr!, {r0, r1, r2, r3}
   26d04:	add	ip, r4, #32
   26d08:	mov	r7, #42	; 0x2a
   26d0c:	stmia	ip!, {r0, r1, r2, r3}
   26d10:	ldm	lr, {r0, r1}
   26d14:	ldrd	r2, [r9, #8]
   26d18:	stm	ip, {r0, r1}
   26d1c:	mov	r1, r4
   26d20:	ldrd	r4, [r9, #-104]	; 0xffffff98
   26d24:	strd	r2, [r1, #64]	; 0x40
   26d28:	strd	r4, [r1, #56]	; 0x38
   26d2c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26d30:	andeq	r4, r4, r4, lsl fp
   26d34:	andeq	r0, r0, r5, lsl r1
   26d38:	andeq	r0, r0, r3, lsl #2
   26d3c:	addeq	r0, r0, pc, lsl r0
   26d40:	stcleq	12, cr12, [ip], {204}	; 0xcc
   26d44:	andeq	r5, r4, r0, lsl #12
   26d48:	strdeq	r5, [r4], -r8
   26d4c:	andeq	r5, r4, r8, ror #11
   26d50:	andeq	r5, r4, r0, ror #11
   26d54:	ldrdeq	r5, [r4], -r8
   26d58:	andeq	r5, r4, ip, asr #11
   26d5c:	andeq	r5, r4, r4, asr #11
   26d60:	andeq	r5, r4, r0, asr #11
   26d64:	andeq	r5, r4, ip, lsr #11
   26d68:			; <UNDEFINED> instruction: 0xffff9d90
   26d6c:	andeq	r5, r4, ip, ror #11
   26d70:	andeq	r0, r0, r2, lsl r1
   26d74:	andeq	r0, r0, r3, lsl r1
   26d78:	ldr	ip, [sp, #100]	; 0x64
   26d7c:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   26d80:	ldr	r0, [r9]
   26d84:	mov	r1, #1
   26d88:	strd	r2, [ip, #8]
   26d8c:	str	r0, [ip, #16]
   26d90:	strb	r1, [ip, #187]	; 0xbb
   26d94:	mov	r7, #39	; 0x27
   26d98:	b	265c8 <__assert_fail@plt+0x13fd4>
   26d9c:	ldr	lr, [sp, #100]	; 0x64
   26da0:	ldrd	r2, [r9, #-160]	; 0xffffff60
   26da4:	sub	r1, r9, #272	; 0x110
   26da8:	ldr	ip, [r9, #-56]	; 0xffffffc8
   26dac:	ldrd	r0, [r1]
   26db0:	strd	r2, [lr, #80]	; 0x50
   26db4:	ldr	r2, [r9, #-52]	; 0xffffffcc
   26db8:	ldr	r3, [r9]
   26dbc:	strd	r0, [lr, #72]	; 0x48
   26dc0:	str	ip, [lr, #88]	; 0x58
   26dc4:	str	r2, [lr, #92]	; 0x5c
   26dc8:	str	r3, [lr, #28]
   26dcc:	mov	r7, #20
   26dd0:	b	265c8 <__assert_fail@plt+0x13fd4>
   26dd4:	ldr	ip, [sp, #100]	; 0x64
   26dd8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   26ddc:	ldrd	r0, [r9, #-160]	; 0xffffff60
   26de0:	mov	r7, #19
   26de4:	strd	r2, [ip, #80]	; 0x50
   26de8:	ldr	r2, [r9]
   26dec:	mov	r3, #0
   26df0:	strd	r0, [ip, #72]	; 0x48
   26df4:	str	r2, [ip, #28]
   26df8:	str	r3, [ip, #88]	; 0x58
   26dfc:	str	r3, [ip, #92]	; 0x5c
   26e00:	b	265c8 <__assert_fail@plt+0x13fd4>
   26e04:	ldr	ip, [sp, #100]	; 0x64
   26e08:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   26e0c:	mov	r0, #0
   26e10:	mov	r1, #0
   26e14:	strd	r2, [ip, #72]	; 0x48
   26e18:	ldr	r2, [r9]
   26e1c:	mov	r3, #0
   26e20:	strd	r0, [ip, #80]	; 0x50
   26e24:	str	r2, [ip, #28]
   26e28:	str	r3, [ip, #88]	; 0x58
   26e2c:	str	r3, [ip, #92]	; 0x5c
   26e30:	mov	r7, #18
   26e34:	b	265c8 <__assert_fail@plt+0x13fd4>
   26e38:	mov	r2, #5
   26e3c:	ldr	r1, [pc, #-256]	; 26d44 <__assert_fail@plt+0x14750>
   26e40:	mov	r0, #0
   26e44:	bl	120b4 <dcgettext@plt>
   26e48:	mov	r7, #15
   26e4c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26e50:	mov	r2, #5
   26e54:	ldr	r1, [pc, #-276]	; 26d48 <__assert_fail@plt+0x14754>
   26e58:	mov	r0, #0
   26e5c:	bl	120b4 <dcgettext@plt>
   26e60:	mov	r7, #14
   26e64:	b	265c8 <__assert_fail@plt+0x13fd4>
   26e68:	mov	r2, #5
   26e6c:	ldr	r1, [pc, #-264]	; 26d6c <__assert_fail@plt+0x14778>
   26e70:	mov	r0, #0
   26e74:	bl	120b4 <dcgettext@plt>
   26e78:	mov	r7, #13
   26e7c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26e80:	ldr	r1, [sp, #100]	; 0x64
   26e84:	mov	r2, #5
   26e88:	mov	r0, #0
   26e8c:	ldr	r3, [r1, #160]	; 0xa0
   26e90:	mov	r7, #12
   26e94:	add	r3, r3, #1
   26e98:	str	r3, [r1, #160]	; 0xa0
   26e9c:	ldr	r1, [pc, #-344]	; 26d4c <__assert_fail@plt+0x14758>
   26ea0:	bl	120b4 <dcgettext@plt>
   26ea4:	b	265c8 <__assert_fail@plt+0x13fd4>
   26ea8:	ldr	r1, [sp, #100]	; 0x64
   26eac:	mov	r2, #5
   26eb0:	mov	r0, #0
   26eb4:	ldr	r3, [r1, #156]	; 0x9c
   26eb8:	mov	r7, #11
   26ebc:	add	r3, r3, #1
   26ec0:	str	r3, [r1, #156]	; 0x9c
   26ec4:	ldr	r1, [pc, #-380]	; 26d50 <__assert_fail@plt+0x1475c>
   26ec8:	bl	120b4 <dcgettext@plt>
   26ecc:	b	265c8 <__assert_fail@plt+0x13fd4>
   26ed0:	ldr	r1, [sp, #100]	; 0x64
   26ed4:	mov	r2, #5
   26ed8:	mov	r0, #0
   26edc:	ldr	r3, [r1, #176]	; 0xb0
   26ee0:	mov	r7, #10
   26ee4:	add	r3, r3, #1
   26ee8:	str	r3, [r1, #176]	; 0xb0
   26eec:	ldr	r1, [pc, #-416]	; 26d54 <__assert_fail@plt+0x14760>
   26ef0:	bl	120b4 <dcgettext@plt>
   26ef4:	b	265c8 <__assert_fail@plt+0x13fd4>
   26ef8:	ldr	r1, [sp, #100]	; 0x64
   26efc:	mov	r2, #5
   26f00:	mov	r0, #0
   26f04:	ldr	r3, [r1, #164]	; 0xa4
   26f08:	mov	r7, #9
   26f0c:	add	r3, r3, #1
   26f10:	str	r3, [r1, #164]	; 0xa4
   26f14:	ldr	r1, [pc, #-452]	; 26d58 <__assert_fail@plt+0x14764>
   26f18:	bl	120b4 <dcgettext@plt>
   26f1c:	b	265c8 <__assert_fail@plt+0x13fd4>
   26f20:	ldr	r1, [sp, #100]	; 0x64
   26f24:	mov	r2, #5
   26f28:	mov	r0, #0
   26f2c:	ldr	r3, [r1, #172]	; 0xac
   26f30:	mov	r7, #8
   26f34:	add	r3, r3, #1
   26f38:	str	r3, [r1, #172]	; 0xac
   26f3c:	ldr	r1, [pc, #-488]	; 26d5c <__assert_fail@plt+0x14768>
   26f40:	bl	120b4 <dcgettext@plt>
   26f44:	b	265c8 <__assert_fail@plt+0x13fd4>
   26f48:	ldr	r1, [sp, #100]	; 0x64
   26f4c:	mov	r0, #0
   26f50:	mov	r7, #7
   26f54:	ldr	r2, [r1, #172]	; 0xac
   26f58:	ldr	r3, [r1, #156]	; 0x9c
   26f5c:	add	r2, r2, #1
   26f60:	add	r3, r3, #1
   26f64:	str	r2, [r1, #172]	; 0xac
   26f68:	str	r3, [r1, #156]	; 0x9c
   26f6c:	mov	r2, #5
   26f70:	ldr	r1, [pc, #-536]	; 26d60 <__assert_fail@plt+0x1476c>
   26f74:	bl	120b4 <dcgettext@plt>
   26f78:	b	265c8 <__assert_fail@plt+0x13fd4>
   26f7c:	sub	r3, r9, #48	; 0x30
   26f80:	ldr	r4, [sp, #100]	; 0x64
   26f84:	ldm	r3, {r0, r1, r2, r3}
   26f88:	sub	ip, r9, #56	; 0x38
   26f8c:	stm	sp, {r0, r1, r2, r3}
   26f90:	mov	r0, r4
   26f94:	ldm	ip, {r2, r3}
   26f98:	bl	25250 <__assert_fail@plt+0x12c5c>
   26f9c:	mov	r1, #1
   26fa0:	ldrd	r2, [r9]
   26fa4:	str	r1, [sp, #44]	; 0x2c
   26fa8:	ldr	r1, [r9, #48]	; 0x30
   26fac:	mov	r0, r4
   26fb0:	str	r1, [sp, #40]	; 0x28
   26fb4:	ldrd	r4, [r9, #40]	; 0x28
   26fb8:	strd	r4, [sp, #32]
   26fbc:	ldrd	r4, [r9, #32]
   26fc0:	strd	r4, [sp, #24]
   26fc4:	ldrd	r4, [r9, #24]
   26fc8:	strd	r4, [sp, #16]
   26fcc:	ldrd	r4, [r9, #16]
   26fd0:	strd	r4, [sp, #8]
   26fd4:	ldrd	r4, [r9, #8]
   26fd8:	strd	r4, [sp]
   26fdc:	bl	25440 <__assert_fail@plt+0x12e4c>
   26fe0:	cmp	r0, #0
   26fe4:	beq	26248 <__assert_fail@plt+0x13c54>
   26fe8:	mov	r7, #89	; 0x59
   26fec:	b	265c8 <__assert_fail@plt+0x13fd4>
   26ff0:	add	r3, r9, #8
   26ff4:	mov	r7, #88	; 0x58
   26ff8:	ldm	r3, {r0, r1, r2, r3}
   26ffc:	stm	sp, {r0, r1, r2, r3}
   27000:	ldr	r0, [sp, #100]	; 0x64
   27004:	ldm	r9, {r2, r3}
   27008:	bl	25250 <__assert_fail@plt+0x12c5c>
   2700c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27010:	ldrd	r0, [r9, #8]
   27014:	mov	r3, #0
   27018:	mvn	r2, #0
   2701c:	adds	r4, r0, #-2147483648	; 0x80000000
   27020:	adc	r5, r1, #0
   27024:	cmp	r5, r3
   27028:	cmpeq	r4, r2
   2702c:	bhi	26248 <__assert_fail@plt+0x13c54>
   27030:	mov	r3, #0
   27034:	str	r0, [sp, #248]	; 0xf8
   27038:	str	r3, [sp, #252]	; 0xfc
   2703c:	mov	r7, #87	; 0x57
   27040:	b	265c8 <__assert_fail@plt+0x13fd4>
   27044:	ldrd	r0, [r9, #8]
   27048:	mov	r3, #0
   2704c:	mvn	r2, #0
   27050:	adds	r4, r0, #-2147483648	; 0x80000000
   27054:	adc	r5, r1, #0
   27058:	cmp	r5, r3
   2705c:	cmpeq	r4, r2
   27060:	bhi	26248 <__assert_fail@plt+0x13c54>
   27064:	mov	r3, #0
   27068:	str	r0, [sp, #248]	; 0xf8
   2706c:	str	r3, [sp, #252]	; 0xfc
   27070:	mov	r7, #85	; 0x55
   27074:	b	265c8 <__assert_fail@plt+0x13fd4>
   27078:	mov	r4, #0
   2707c:	mov	r5, #0
   27080:	mov	r2, #56	; 0x38
   27084:	mov	r1, #0
   27088:	mov	r0, r8
   2708c:	strd	r4, [sp, #64]	; 0x40
   27090:	bl	12378 <memset@plt>
   27094:	ldrd	r2, [r9]
   27098:	str	r4, [sp, #84]	; 0x54
   2709c:	str	r5, [sp, #88]	; 0x58
   270a0:	strd	r2, [sp, #56]	; 0x38
   270a4:	mov	r3, #0
   270a8:	str	r4, [sp, #92]	; 0x5c
   270ac:	str	r5, [sp, #96]	; 0x60
   270b0:	str	r4, [sp, #76]	; 0x4c
   270b4:	str	r5, [sp, #80]	; 0x50
   270b8:	mov	r7, #81	; 0x51
   270bc:	str	r3, [sp, #72]	; 0x48
   270c0:	b	265c8 <__assert_fail@plt+0x13fd4>
   270c4:	mov	r2, #56	; 0x38
   270c8:	mov	r1, #0
   270cc:	mov	r0, r8
   270d0:	bl	12378 <memset@plt>
   270d4:	mov	r3, #0
   270d8:	str	r3, [sp, #84]	; 0x54
   270dc:	str	r3, [sp, #88]	; 0x58
   270e0:	str	r3, [sp, #56]	; 0x38
   270e4:	str	r3, [sp, #92]	; 0x5c
   270e8:	str	r3, [sp, #60]	; 0x3c
   270ec:	str	r3, [sp, #96]	; 0x60
   270f0:	str	r3, [sp, #76]	; 0x4c
   270f4:	str	r3, [sp, #80]	; 0x50
   270f8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   270fc:	mov	r7, #80	; 0x50
   27100:	strd	r2, [sp, #64]	; 0x40
   27104:	mov	r3, #0
   27108:	str	r3, [sp, #72]	; 0x48
   2710c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27110:	mov	r4, #0
   27114:	mov	r5, #0
   27118:	mov	r2, #56	; 0x38
   2711c:	mov	r1, #0
   27120:	mov	r0, r8
   27124:	strd	r4, [sp, #64]	; 0x40
   27128:	bl	12378 <memset@plt>
   2712c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27130:	str	r4, [sp, #92]	; 0x5c
   27134:	str	r3, [sp, #84]	; 0x54
   27138:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2713c:	str	r5, [sp, #96]	; 0x60
   27140:	str	r3, [sp, #88]	; 0x58
   27144:	mov	r3, #0
   27148:	strd	r4, [sp, #56]	; 0x38
   2714c:	str	r4, [sp, #76]	; 0x4c
   27150:	str	r5, [sp, #80]	; 0x50
   27154:	mov	r7, #79	; 0x4f
   27158:	str	r3, [sp, #72]	; 0x48
   2715c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27160:	mov	r4, #0
   27164:	mov	r5, #0
   27168:	mov	r2, #56	; 0x38
   2716c:	mov	r1, #0
   27170:	mov	r0, r8
   27174:	strd	r4, [sp, #64]	; 0x40
   27178:	bl	12378 <memset@plt>
   2717c:	mov	r3, r5
   27180:	mov	r2, r4
   27184:	str	r4, [sp, #84]	; 0x54
   27188:	strd	r2, [sp, #56]	; 0x38
   2718c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27190:	str	r5, [sp, #88]	; 0x58
   27194:	str	r3, [sp, #92]	; 0x5c
   27198:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2719c:	str	r4, [sp, #76]	; 0x4c
   271a0:	str	r3, [sp, #96]	; 0x60
   271a4:	mov	r3, #0
   271a8:	str	r5, [sp, #80]	; 0x50
   271ac:	mov	r7, #78	; 0x4e
   271b0:	str	r3, [sp, #72]	; 0x48
   271b4:	b	265c8 <__assert_fail@plt+0x13fd4>
   271b8:	ldrd	r2, [r9, #8]
   271bc:	mov	r7, #91	; 0x5b
   271c0:	strd	r2, [r6, #-8]
   271c4:	b	265c8 <__assert_fail@plt+0x13fd4>
   271c8:	mvn	r2, #0
   271cc:	mvn	r3, #0
   271d0:	mov	r7, #90	; 0x5a
   271d4:	strd	r2, [r6, #-8]
   271d8:	b	265c8 <__assert_fail@plt+0x13fd4>
   271dc:	ldr	lr, [sp, #100]	; 0x64
   271e0:	ldm	r9, {r0, r1}
   271e4:	add	r3, lr, #88	; 0x58
   271e8:	mov	ip, #1
   271ec:	stm	r3, {r0, r1}
   271f0:	mov	r2, #5
   271f4:	strb	ip, [lr, #152]	; 0x98
   271f8:	ldr	r1, [pc, #-1180]	; 26d64 <__assert_fail@plt+0x14770>
   271fc:	mov	r0, #0
   27200:	bl	120b4 <dcgettext@plt>
   27204:	mov	r7, #4
   27208:	b	265c8 <__assert_fail@plt+0x13fd4>
   2720c:	mov	r2, #56	; 0x38
   27210:	mov	r1, #0
   27214:	mov	r0, r8
   27218:	bl	12378 <memset@plt>
   2721c:	ldr	r3, [r9, #-56]	; 0xffffffc8
   27220:	mov	r2, #0
   27224:	mov	r0, r3
   27228:	asr	r1, r3, #31
   2722c:	ldr	r3, [r9, #-52]	; 0xffffffcc
   27230:	str	r2, [sp, #84]	; 0x54
   27234:	str	r2, [sp, #88]	; 0x58
   27238:	str	r2, [sp, #56]	; 0x38
   2723c:	str	r2, [sp, #92]	; 0x5c
   27240:	str	r2, [sp, #60]	; 0x3c
   27244:	str	r2, [sp, #96]	; 0x60
   27248:	str	r2, [sp, #76]	; 0x4c
   2724c:	str	r2, [sp, #80]	; 0x50
   27250:	strd	r0, [sp, #64]	; 0x40
   27254:	str	r3, [sp, #72]	; 0x48
   27258:	mov	r7, #72	; 0x48
   2725c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27260:	mov	r2, #56	; 0x38
   27264:	mov	r1, #0
   27268:	mov	r0, r8
   2726c:	bl	12378 <memset@plt>
   27270:	ldr	r3, [r9, #-56]	; 0xffffffc8
   27274:	mov	r2, #0
   27278:	mov	r0, r3
   2727c:	asr	r1, r3, #31
   27280:	ldr	r3, [r9, #-52]	; 0xffffffcc
   27284:	str	r2, [sp, #84]	; 0x54
   27288:	str	r2, [sp, #88]	; 0x58
   2728c:	str	r2, [sp, #56]	; 0x38
   27290:	str	r2, [sp, #92]	; 0x5c
   27294:	str	r2, [sp, #60]	; 0x3c
   27298:	str	r2, [sp, #96]	; 0x60
   2729c:	str	r2, [sp, #76]	; 0x4c
   272a0:	str	r2, [sp, #80]	; 0x50
   272a4:	strd	r0, [sp, #64]	; 0x40
   272a8:	str	r3, [sp, #72]	; 0x48
   272ac:	mov	r7, #71	; 0x47
   272b0:	b	265c8 <__assert_fail@plt+0x13fd4>
   272b4:	mov	r2, #56	; 0x38
   272b8:	mov	r1, #0
   272bc:	mov	r0, r8
   272c0:	bl	12378 <memset@plt>
   272c4:	mov	r3, #0
   272c8:	str	r3, [sp, #84]	; 0x54
   272cc:	str	r3, [sp, #88]	; 0x58
   272d0:	str	r3, [sp, #56]	; 0x38
   272d4:	str	r3, [sp, #92]	; 0x5c
   272d8:	str	r3, [sp, #60]	; 0x3c
   272dc:	str	r3, [sp, #96]	; 0x60
   272e0:	str	r3, [sp, #76]	; 0x4c
   272e4:	str	r3, [sp, #80]	; 0x50
   272e8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   272ec:	mov	r7, #70	; 0x46
   272f0:	strd	r2, [sp, #64]	; 0x40
   272f4:	mov	r3, #0
   272f8:	str	r3, [sp, #72]	; 0x48
   272fc:	b	265c8 <__assert_fail@plt+0x13fd4>
   27300:	mov	r2, #56	; 0x38
   27304:	mov	r1, #0
   27308:	mov	r0, r8
   2730c:	bl	12378 <memset@plt>
   27310:	mov	r3, #0
   27314:	str	r3, [sp, #84]	; 0x54
   27318:	str	r3, [sp, #88]	; 0x58
   2731c:	str	r3, [sp, #56]	; 0x38
   27320:	str	r3, [sp, #92]	; 0x5c
   27324:	str	r3, [sp, #60]	; 0x3c
   27328:	str	r3, [sp, #96]	; 0x60
   2732c:	str	r3, [sp, #76]	; 0x4c
   27330:	str	r3, [sp, #80]	; 0x50
   27334:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   27338:	mov	r7, #69	; 0x45
   2733c:	strd	r2, [sp, #64]	; 0x40
   27340:	mov	r3, #0
   27344:	str	r3, [sp, #72]	; 0x48
   27348:	b	265c8 <__assert_fail@plt+0x13fd4>
   2734c:	mov	r4, #0
   27350:	mov	r5, #0
   27354:	mov	r2, #56	; 0x38
   27358:	mov	r1, #0
   2735c:	mov	r0, r8
   27360:	strd	r4, [sp, #64]	; 0x40
   27364:	bl	12378 <memset@plt>
   27368:	mov	r3, #0
   2736c:	str	r3, [sp, #72]	; 0x48
   27370:	mov	r3, #1
   27374:	str	r3, [sp, #84]	; 0x54
   27378:	mov	r3, #0
   2737c:	str	r4, [sp, #92]	; 0x5c
   27380:	str	r5, [sp, #96]	; 0x60
   27384:	strd	r4, [sp, #56]	; 0x38
   27388:	str	r4, [sp, #76]	; 0x4c
   2738c:	str	r5, [sp, #80]	; 0x50
   27390:	mov	r7, #68	; 0x44
   27394:	str	r3, [sp, #88]	; 0x58
   27398:	b	265c8 <__assert_fail@plt+0x13fd4>
   2739c:	mov	r4, #0
   273a0:	mov	r5, #0
   273a4:	mov	r2, #56	; 0x38
   273a8:	mov	r1, #0
   273ac:	mov	r0, r8
   273b0:	strd	r4, [sp, #64]	; 0x40
   273b4:	bl	12378 <memset@plt>
   273b8:	ldr	r3, [r9, #-48]	; 0xffffffd0
   273bc:	str	r4, [sp, #92]	; 0x5c
   273c0:	str	r3, [sp, #84]	; 0x54
   273c4:	ldr	r3, [r9, #-44]	; 0xffffffd4
   273c8:	str	r5, [sp, #96]	; 0x60
   273cc:	str	r3, [sp, #88]	; 0x58
   273d0:	mov	r3, #0
   273d4:	strd	r4, [sp, #56]	; 0x38
   273d8:	str	r4, [sp, #76]	; 0x4c
   273dc:	str	r5, [sp, #80]	; 0x50
   273e0:	mov	r7, #67	; 0x43
   273e4:	str	r3, [sp, #72]	; 0x48
   273e8:	b	265c8 <__assert_fail@plt+0x13fd4>
   273ec:	mov	r4, #0
   273f0:	mov	r5, #0
   273f4:	mov	r2, #56	; 0x38
   273f8:	mov	r1, #0
   273fc:	mov	r0, r8
   27400:	strd	r4, [sp, #64]	; 0x40
   27404:	bl	12378 <memset@plt>
   27408:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2740c:	str	r4, [sp, #92]	; 0x5c
   27410:	str	r3, [sp, #84]	; 0x54
   27414:	ldr	r3, [r9, #-52]	; 0xffffffcc
   27418:	str	r5, [sp, #96]	; 0x60
   2741c:	str	r3, [sp, #88]	; 0x58
   27420:	mov	r3, #0
   27424:	strd	r4, [sp, #56]	; 0x38
   27428:	str	r4, [sp, #76]	; 0x4c
   2742c:	str	r5, [sp, #80]	; 0x50
   27430:	mov	r7, #66	; 0x42
   27434:	str	r3, [sp, #72]	; 0x48
   27438:	b	265c8 <__assert_fail@plt+0x13fd4>
   2743c:	mov	r4, #0
   27440:	mov	r5, #0
   27444:	mov	r2, #56	; 0x38
   27448:	mov	r1, #0
   2744c:	mov	r0, r8
   27450:	strd	r4, [sp, #64]	; 0x40
   27454:	bl	12378 <memset@plt>
   27458:	mov	r3, r5
   2745c:	mov	r2, r4
   27460:	str	r4, [sp, #84]	; 0x54
   27464:	strd	r2, [sp, #56]	; 0x38
   27468:	mov	r3, #0
   2746c:	str	r3, [sp, #72]	; 0x48
   27470:	mov	r3, #1
   27474:	str	r3, [sp, #92]	; 0x5c
   27478:	mov	r3, #0
   2747c:	str	r5, [sp, #88]	; 0x58
   27480:	str	r4, [sp, #76]	; 0x4c
   27484:	str	r5, [sp, #80]	; 0x50
   27488:	mov	r7, #65	; 0x41
   2748c:	str	r3, [sp, #96]	; 0x60
   27490:	b	265c8 <__assert_fail@plt+0x13fd4>
   27494:	mov	r4, #0
   27498:	mov	r5, #0
   2749c:	mov	r2, #56	; 0x38
   274a0:	mov	r1, #0
   274a4:	mov	r0, r8
   274a8:	strd	r4, [sp, #64]	; 0x40
   274ac:	bl	12378 <memset@plt>
   274b0:	mov	r3, r5
   274b4:	mov	r2, r4
   274b8:	str	r4, [sp, #84]	; 0x54
   274bc:	strd	r2, [sp, #56]	; 0x38
   274c0:	ldr	r3, [r9, #-48]	; 0xffffffd0
   274c4:	str	r5, [sp, #88]	; 0x58
   274c8:	str	r3, [sp, #92]	; 0x5c
   274cc:	ldr	r3, [r9, #-44]	; 0xffffffd4
   274d0:	str	r4, [sp, #76]	; 0x4c
   274d4:	str	r3, [sp, #96]	; 0x60
   274d8:	mov	r3, #0
   274dc:	str	r5, [sp, #80]	; 0x50
   274e0:	mov	r7, #64	; 0x40
   274e4:	str	r3, [sp, #72]	; 0x48
   274e8:	b	265c8 <__assert_fail@plt+0x13fd4>
   274ec:	mov	r4, #0
   274f0:	mov	r5, #0
   274f4:	mov	r2, #56	; 0x38
   274f8:	mov	r1, #0
   274fc:	mov	r0, r8
   27500:	strd	r4, [sp, #64]	; 0x40
   27504:	bl	12378 <memset@plt>
   27508:	mov	r3, r5
   2750c:	mov	r2, r4
   27510:	str	r4, [sp, #84]	; 0x54
   27514:	strd	r2, [sp, #56]	; 0x38
   27518:	ldr	r3, [r9, #-56]	; 0xffffffc8
   2751c:	str	r5, [sp, #88]	; 0x58
   27520:	str	r3, [sp, #92]	; 0x5c
   27524:	ldr	r3, [r9, #-52]	; 0xffffffcc
   27528:	str	r4, [sp, #76]	; 0x4c
   2752c:	str	r3, [sp, #96]	; 0x60
   27530:	mov	r3, #0
   27534:	str	r5, [sp, #80]	; 0x50
   27538:	mov	r7, #63	; 0x3f
   2753c:	str	r3, [sp, #72]	; 0x48
   27540:	b	265c8 <__assert_fail@plt+0x13fd4>
   27544:	mov	r4, #0
   27548:	mov	r5, #0
   2754c:	mov	r2, #56	; 0x38
   27550:	mov	r1, #0
   27554:	mov	r0, r8
   27558:	strd	r4, [sp, #64]	; 0x40
   2755c:	bl	12378 <memset@plt>
   27560:	ldrd	r2, [r9]
   27564:	str	r4, [sp, #84]	; 0x54
   27568:	str	r5, [sp, #88]	; 0x58
   2756c:	strd	r2, [sp, #56]	; 0x38
   27570:	mov	r3, #0
   27574:	str	r4, [sp, #92]	; 0x5c
   27578:	str	r5, [sp, #96]	; 0x60
   2757c:	str	r4, [sp, #76]	; 0x4c
   27580:	str	r5, [sp, #80]	; 0x50
   27584:	mov	r7, #62	; 0x3e
   27588:	str	r3, [sp, #72]	; 0x48
   2758c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27590:	mov	r2, #56	; 0x38
   27594:	mov	r1, #0
   27598:	mov	r0, r8
   2759c:	bl	12378 <memset@plt>
   275a0:	ldrd	r4, [r9]
   275a4:	cmp	r4, #0
   275a8:	sbcs	r3, r5, #0
   275ac:	blt	27d44 <__assert_fail@plt+0x15750>
   275b0:	orrs	r3, r4, r5
   275b4:	beq	275fc <__assert_fail@plt+0x15008>
   275b8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   275bc:	cmp	r2, #0
   275c0:	strd	r2, [sp, #56]	; 0x38
   275c4:	sbcs	r3, r3, #0
   275c8:	blt	27f04 <__assert_fail@plt+0x15910>
   275cc:	mov	r2, r4
   275d0:	mov	r3, r5
   275d4:	mvn	r0, #0
   275d8:	mvn	r1, #-2147483648	; 0x80000000
   275dc:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   275e0:	ldrd	r2, [sp, #56]	; 0x38
   275e4:	cmp	r0, r2
   275e8:	sbcs	r3, r1, r3
   275ec:	movlt	r3, #1
   275f0:	movge	r3, #0
   275f4:	cmp	r3, #0
   275f8:	bne	26248 <__assert_fail@plt+0x13c54>
   275fc:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27600:	mov	r0, #0
   27604:	mov	r1, #0
   27608:	ldr	r2, [r9, #-44]	; 0xffffffd4
   2760c:	strd	r0, [sp, #64]	; 0x40
   27610:	umull	r0, r1, r3, r4
   27614:	mul	r2, r4, r2
   27618:	strd	r0, [sp, #56]	; 0x38
   2761c:	mla	r3, r3, r5, r2
   27620:	ldr	r2, [sp, #60]	; 0x3c
   27624:	mov	r0, #0
   27628:	add	r3, r3, r2
   2762c:	mov	r1, #0
   27630:	str	r3, [sp, #60]	; 0x3c
   27634:	mov	r3, #0
   27638:	str	r0, [sp, #84]	; 0x54
   2763c:	str	r1, [sp, #88]	; 0x58
   27640:	str	r0, [sp, #92]	; 0x5c
   27644:	str	r1, [sp, #96]	; 0x60
   27648:	str	r0, [sp, #76]	; 0x4c
   2764c:	str	r1, [sp, #80]	; 0x50
   27650:	mov	r7, #61	; 0x3d
   27654:	str	r3, [sp, #72]	; 0x48
   27658:	b	265c8 <__assert_fail@plt+0x13fd4>
   2765c:	ldr	lr, [sp, #100]	; 0x64
   27660:	ldrd	r4, [r9]
   27664:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27668:	ldr	r0, [lr, #176]	; 0xb0
   2766c:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   27670:	strd	r4, [sp, #8]
   27674:	ldr	ip, [r9, #-40]	; 0xffffffd8
   27678:	add	r0, r0, #1
   2767c:	str	ip, [sp]
   27680:	str	r0, [lr, #176]	; 0xb0
   27684:	add	r0, lr, #24
   27688:	bl	25c84 <__assert_fail@plt+0x13690>
   2768c:	cmp	r0, #0
   27690:	beq	26248 <__assert_fail@plt+0x13c54>
   27694:	mov	r7, #27
   27698:	b	265c8 <__assert_fail@plt+0x13fd4>
   2769c:	ldr	lr, [sp, #100]	; 0x64
   276a0:	ldrd	r2, [r9, #-160]	; 0xffffff60
   276a4:	sub	r1, r9, #272	; 0x110
   276a8:	ldr	ip, [r9, #-56]	; 0xffffffc8
   276ac:	ldrd	r0, [r1]
   276b0:	strd	r2, [lr, #80]	; 0x50
   276b4:	ldr	r2, [r9, #-52]	; 0xffffffcc
   276b8:	mov	r3, #2
   276bc:	strd	r0, [lr, #72]	; 0x48
   276c0:	str	ip, [lr, #88]	; 0x58
   276c4:	str	r2, [lr, #92]	; 0x5c
   276c8:	str	r3, [lr, #28]
   276cc:	mov	r7, #24
   276d0:	b	265c8 <__assert_fail@plt+0x13fd4>
   276d4:	ldr	ip, [sp, #100]	; 0x64
   276d8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   276dc:	ldrd	r0, [r9, #-160]	; 0xffffff60
   276e0:	mov	r7, #23
   276e4:	strd	r2, [ip, #80]	; 0x50
   276e8:	mov	r3, #0
   276ec:	mov	r2, #2
   276f0:	strd	r0, [ip, #72]	; 0x48
   276f4:	str	r3, [ip, #88]	; 0x58
   276f8:	str	r3, [ip, #92]	; 0x5c
   276fc:	str	r2, [ip, #28]
   27700:	b	265c8 <__assert_fail@plt+0x13fd4>
   27704:	ldr	ip, [sp, #100]	; 0x64
   27708:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2770c:	mov	r0, #0
   27710:	mov	r1, #0
   27714:	strd	r2, [ip, #72]	; 0x48
   27718:	mov	r3, #0
   2771c:	mov	r2, #2
   27720:	strd	r0, [ip, #80]	; 0x50
   27724:	str	r3, [ip, #88]	; 0x58
   27728:	str	r3, [ip, #92]	; 0x5c
   2772c:	str	r2, [ip, #28]
   27730:	mov	r7, #22
   27734:	b	265c8 <__assert_fail@plt+0x13fd4>
   27738:	ldr	r2, [sp, #100]	; 0x64
   2773c:	ldr	r3, [pc, #-2524]	; 26d68 <__assert_fail@plt+0x14774>
   27740:	mov	r7, #31
   27744:	str	r3, [r2, #24]
   27748:	b	265c8 <__assert_fail@plt+0x13fd4>
   2774c:	ldr	r2, [sp, #100]	; 0x64
   27750:	ldr	r3, [r9]
   27754:	mov	r7, #30
   27758:	str	r3, [r2, #24]
   2775c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27760:	ldr	r1, [sp, #100]	; 0x64
   27764:	mov	r2, #1
   27768:	mov	r7, #29
   2776c:	ldr	r3, [r1, #168]	; 0xa8
   27770:	str	r2, [r1, #20]
   27774:	add	r3, r3, r2
   27778:	str	r3, [r1, #168]	; 0xa8
   2777c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27780:	ldr	r2, [sp, #100]	; 0x64
   27784:	ldr	r3, [r9]
   27788:	mov	r7, #28
   2778c:	str	r3, [r2, #20]
   27790:	b	265c8 <__assert_fail@plt+0x13fd4>
   27794:	mov	r2, #56	; 0x38
   27798:	mov	r1, #0
   2779c:	mov	r0, r8
   277a0:	bl	12378 <memset@plt>
   277a4:	ldrd	r4, [r9]
   277a8:	cmp	r4, #0
   277ac:	sbcs	r3, r5, #0
   277b0:	blt	27cf4 <__assert_fail@plt+0x15700>
   277b4:	orrs	r3, r4, r5
   277b8:	beq	27800 <__assert_fail@plt+0x1520c>
   277bc:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   277c0:	cmp	r2, #0
   277c4:	strd	r2, [sp, #56]	; 0x38
   277c8:	sbcs	r3, r3, #0
   277cc:	blt	27dfc <__assert_fail@plt+0x15808>
   277d0:	mov	r2, r4
   277d4:	mov	r3, r5
   277d8:	mvn	r0, #0
   277dc:	mvn	r1, #-2147483648	; 0x80000000
   277e0:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   277e4:	ldrd	r2, [sp, #56]	; 0x38
   277e8:	cmp	r0, r2
   277ec:	sbcs	r3, r1, r3
   277f0:	movlt	r3, #1
   277f4:	movge	r3, #0
   277f8:	cmp	r3, #0
   277fc:	bne	26248 <__assert_fail@plt+0x13c54>
   27800:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27804:	mov	r0, #0
   27808:	mov	r1, #0
   2780c:	ldr	r2, [r9, #-44]	; 0xffffffd4
   27810:	strd	r0, [sp, #64]	; 0x40
   27814:	umull	r0, r1, r3, r4
   27818:	mul	r2, r4, r2
   2781c:	strd	r0, [sp, #56]	; 0x38
   27820:	mla	r3, r3, r5, r2
   27824:	ldr	r2, [sp, #60]	; 0x3c
   27828:	mov	r0, #0
   2782c:	add	r3, r3, r2
   27830:	mov	r1, #0
   27834:	str	r3, [sp, #60]	; 0x3c
   27838:	mov	r3, #0
   2783c:	str	r0, [sp, #84]	; 0x54
   27840:	str	r1, [sp, #88]	; 0x58
   27844:	str	r0, [sp, #92]	; 0x5c
   27848:	str	r1, [sp, #96]	; 0x60
   2784c:	str	r0, [sp, #76]	; 0x4c
   27850:	str	r1, [sp, #80]	; 0x50
   27854:	mov	r7, #77	; 0x4d
   27858:	str	r3, [sp, #72]	; 0x48
   2785c:	b	265c8 <__assert_fail@plt+0x13fd4>
   27860:	mov	r2, #56	; 0x38
   27864:	mov	r1, #0
   27868:	mov	r0, r8
   2786c:	bl	12378 <memset@plt>
   27870:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27874:	mov	r0, #0
   27878:	mov	r1, #0
   2787c:	strd	r2, [r6, #-8]
   27880:	mov	r3, r1
   27884:	mov	r2, r0
   27888:	str	r3, [sp, #96]	; 0x60
   2788c:	strd	r2, [sp, #56]	; 0x38
   27890:	str	r3, [sp, #80]	; 0x50
   27894:	mov	r3, #0
   27898:	strd	r0, [sp, #64]	; 0x40
   2789c:	str	r0, [sp, #84]	; 0x54
   278a0:	str	r1, [sp, #88]	; 0x58
   278a4:	str	r0, [sp, #92]	; 0x5c
   278a8:	str	r0, [sp, #76]	; 0x4c
   278ac:	mov	r7, #75	; 0x4b
   278b0:	str	r3, [sp, #72]	; 0x48
   278b4:	b	265c8 <__assert_fail@plt+0x13fd4>
   278b8:	mov	r2, #56	; 0x38
   278bc:	mov	r1, #0
   278c0:	mov	r0, r8
   278c4:	bl	12378 <memset@plt>
   278c8:	mov	r3, #0
   278cc:	str	r3, [sp, #84]	; 0x54
   278d0:	str	r3, [sp, #88]	; 0x58
   278d4:	str	r3, [sp, #56]	; 0x38
   278d8:	str	r3, [sp, #92]	; 0x5c
   278dc:	str	r3, [sp, #60]	; 0x3c
   278e0:	str	r3, [sp, #96]	; 0x60
   278e4:	str	r3, [sp, #76]	; 0x4c
   278e8:	str	r3, [sp, #80]	; 0x50
   278ec:	str	r3, [sp, #72]	; 0x48
   278f0:	mov	r2, #1
   278f4:	mov	r3, #0
   278f8:	mov	r7, #73	; 0x49
   278fc:	strd	r2, [sp, #64]	; 0x40
   27900:	b	265c8 <__assert_fail@plt+0x13fd4>
   27904:	mov	r4, #0
   27908:	mov	r5, #0
   2790c:	mov	r2, #56	; 0x38
   27910:	mov	r1, #0
   27914:	mov	r0, r8
   27918:	strd	r4, [sp, #64]	; 0x40
   2791c:	bl	12378 <memset@plt>
   27920:	mov	r3, r5
   27924:	mov	r2, r4
   27928:	str	r4, [sp, #84]	; 0x54
   2792c:	strd	r2, [sp, #56]	; 0x38
   27930:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27934:	str	r5, [sp, #88]	; 0x58
   27938:	str	r3, [sp, #76]	; 0x4c
   2793c:	ldr	r3, [r9, #-44]	; 0xffffffd4
   27940:	str	r4, [sp, #92]	; 0x5c
   27944:	str	r3, [sp, #80]	; 0x50
   27948:	mov	r3, #0
   2794c:	str	r5, [sp, #96]	; 0x60
   27950:	mov	r7, #76	; 0x4c
   27954:	str	r3, [sp, #72]	; 0x48
   27958:	b	265c8 <__assert_fail@plt+0x13fd4>
   2795c:	ldr	r3, [r9]
   27960:	ldr	r2, [sp, #100]	; 0x64
   27964:	add	r3, r3, #3600	; 0xe10
   27968:	mov	r7, #35	; 0x23
   2796c:	str	r3, [r2, #24]
   27970:	b	265c8 <__assert_fail@plt+0x13fd4>
   27974:	ldrd	r4, [r9]
   27978:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2797c:	ldrb	r1, [r9, #-56]	; 0xffffffc8
   27980:	strd	r4, [sp, #8]
   27984:	ldr	r0, [r9, #-40]	; 0xffffffd8
   27988:	str	r0, [sp]
   2798c:	ldr	r0, [sp, #100]	; 0x64
   27990:	add	r0, r0, #24
   27994:	bl	25c84 <__assert_fail@plt+0x13690>
   27998:	cmp	r0, #0
   2799c:	beq	26248 <__assert_fail@plt+0x13c54>
   279a0:	ldrd	r0, [r9, #-112]	; 0xffffff90
   279a4:	cmp	r0, #0
   279a8:	sbcs	r3, r1, #0
   279ac:	ldr	r3, [sp, #100]	; 0x64
   279b0:	ldr	ip, [r3, #24]
   279b4:	blt	27ccc <__assert_fail@plt+0x156d8>
   279b8:	cmp	ip, #0
   279bc:	blt	27ee8 <__assert_fail@plt+0x158f4>
   279c0:	mvn	r4, #-2147483648	; 0x80000000
   279c4:	mov	r5, #0
   279c8:	cmp	r4, r0
   279cc:	sbcs	r3, r5, r1
   279d0:	bge	27c7c <__assert_fail@plt+0x15688>
   279d4:	ldr	r3, [sp, #100]	; 0x64
   279d8:	add	ip, ip, r0
   279dc:	mov	r0, #1
   279e0:	str	ip, [r3, #24]
   279e4:	b	2624c <__assert_fail@plt+0x13c58>
   279e8:	mov	r1, #1
   279ec:	ldrd	r2, [r9]
   279f0:	str	r1, [sp, #44]	; 0x2c
   279f4:	ldr	r1, [r9, #48]	; 0x30
   279f8:	ldr	ip, [pc, #-3224]	; 26d68 <__assert_fail@plt+0x14774>
   279fc:	str	r1, [sp, #40]	; 0x28
   27a00:	ldrd	r0, [r9, #40]	; 0x28
   27a04:	strd	r0, [sp, #32]
   27a08:	ldr	r0, [sp, #100]	; 0x64
   27a0c:	ldrd	r4, [r9, #32]
   27a10:	str	ip, [r0, #24]
   27a14:	strd	r4, [sp, #24]
   27a18:	ldrd	r4, [r9, #24]
   27a1c:	strd	r4, [sp, #16]
   27a20:	ldrd	r4, [r9, #16]
   27a24:	strd	r4, [sp, #8]
   27a28:	ldrd	r4, [r9, #8]
   27a2c:	strd	r4, [sp]
   27a30:	bl	25440 <__assert_fail@plt+0x12e4c>
   27a34:	cmp	r0, #0
   27a38:	beq	26248 <__assert_fail@plt+0x13c54>
   27a3c:	mov	r2, #5
   27a40:	ldr	r1, [pc, #-3292]	; 26d6c <__assert_fail@plt+0x14778>
   27a44:	mov	r0, #0
   27a48:	bl	120b4 <dcgettext@plt>
   27a4c:	mov	r7, #33	; 0x21
   27a50:	b	265c8 <__assert_fail@plt+0x13fd4>
   27a54:	ldr	r2, [sp, #100]	; 0x64
   27a58:	mov	r0, #0
   27a5c:	mov	r1, #0
   27a60:	ldr	r3, [r9]
   27a64:	strd	r0, [r2, #8]
   27a68:	str	r3, [r2, #16]
   27a6c:	mov	r7, #37	; 0x25
   27a70:	b	265c8 <__assert_fail@plt+0x13fd4>
   27a74:	ldr	r3, [r9, #-56]	; 0xffffffc8
   27a78:	ldr	r2, [sp, #100]	; 0x64
   27a7c:	add	r3, r3, #3600	; 0xe10
   27a80:	mov	r7, #36	; 0x24
   27a84:	str	r3, [r2, #24]
   27a88:	b	265c8 <__assert_fail@plt+0x13fd4>
   27a8c:	ldr	r2, [sp, #100]	; 0x64
   27a90:	mov	r0, #0
   27a94:	mov	r1, #0
   27a98:	ldr	r3, [r9, #-56]	; 0xffffffc8
   27a9c:	strd	r0, [r2, #8]
   27aa0:	str	r3, [r2, #16]
   27aa4:	mov	r7, #38	; 0x26
   27aa8:	b	265c8 <__assert_fail@plt+0x13fd4>
   27aac:	ldr	ip, [sp, #100]	; 0x64
   27ab0:	mov	r1, #1
   27ab4:	ldr	r0, [r9, #-56]	; 0xffffffc8
   27ab8:	ldrd	r2, [r9]
   27abc:	str	r1, [sp, #44]	; 0x2c
   27ac0:	ldr	r1, [r9, #48]	; 0x30
   27ac4:	str	r0, [ip, #24]
   27ac8:	str	r1, [sp, #40]	; 0x28
   27acc:	ldrd	r4, [r9, #40]	; 0x28
   27ad0:	mov	r0, ip
   27ad4:	strd	r4, [sp, #32]
   27ad8:	ldrd	r4, [r9, #32]
   27adc:	strd	r4, [sp, #24]
   27ae0:	ldrd	r4, [r9, #24]
   27ae4:	strd	r4, [sp, #16]
   27ae8:	ldrd	r4, [r9, #16]
   27aec:	strd	r4, [sp, #8]
   27af0:	ldrd	r4, [r9, #8]
   27af4:	strd	r4, [sp]
   27af8:	bl	25440 <__assert_fail@plt+0x12e4c>
   27afc:	cmp	r0, #0
   27b00:	beq	26248 <__assert_fail@plt+0x13c54>
   27b04:	mov	r2, #5
   27b08:	ldr	r1, [pc, #-3492]	; 26d6c <__assert_fail@plt+0x14778>
   27b0c:	mov	r0, #0
   27b10:	bl	120b4 <dcgettext@plt>
   27b14:	mov	r7, #32
   27b18:	b	265c8 <__assert_fail@plt+0x13fd4>
   27b1c:	ldr	r4, [sp, #100]	; 0x64
   27b20:	ldr	lr, [pc, #-3512]	; 26d70 <__assert_fail@plt+0x1477c>
   27b24:	ldr	ip, [pc, #-3512]	; 26d74 <__assert_fail@plt+0x14780>
   27b28:	ldr	r0, [r4]
   27b2c:	cmp	r2, #0
   27b30:	sub	r0, r1, r0
   27b34:	lsr	r2, r2, #31
   27b38:	str	r0, [sp, #124]	; 0x7c
   27b3c:	str	r1, [r4]
   27b40:	mov	r0, r3
   27b44:	asr	r1, r3, #31
   27b48:	strb	r2, [sp, #192]	; 0xc0
   27b4c:	movne	r2, lr
   27b50:	moveq	r2, ip
   27b54:	str	r2, [sp, #52]	; 0x34
   27b58:	strd	r0, [sp, #112]	; 0x70
   27b5c:	movne	r2, #19
   27b60:	moveq	r2, #20
   27b64:	b	25f6c <__assert_fail@plt+0x13978>
   27b68:	mov	ip, r4
   27b6c:	b	266f4 <__assert_fail@plt+0x14100>
   27b70:	mov	r0, #2
   27b74:	b	2624c <__assert_fail@plt+0x13c58>
   27b78:	mov	r0, #0
   27b7c:	b	2624c <__assert_fail@plt+0x13c58>
   27b80:	ldr	r3, [sp, #100]	; 0x64
   27b84:	add	r4, sp, #132	; 0x84
   27b88:	add	r1, sp, #151	; 0x97
   27b8c:	ldr	r3, [r3]
   27b90:	mov	r2, r4
   27b94:	ldr	r0, [sp, #100]	; 0x64
   27b98:	add	r3, r3, #1
   27b9c:	cmp	r2, r1
   27ba0:	strbcc	r5, [r2]
   27ba4:	str	r3, [r0]
   27ba8:	ldrb	r5, [r3]
   27bac:	addcc	r2, r2, #1
   27bb0:	cmp	r5, #65	; 0x41
   27bb4:	sub	r0, r5, #97	; 0x61
   27bb8:	bcc	27bcc <__assert_fail@plt+0x155d8>
   27bbc:	cmp	r5, #90	; 0x5a
   27bc0:	bls	27b94 <__assert_fail@plt+0x155a0>
   27bc4:	cmp	r0, #25
   27bc8:	bls	27b94 <__assert_fail@plt+0x155a0>
   27bcc:	cmp	r5, #46	; 0x2e
   27bd0:	beq	27b94 <__assert_fail@plt+0x155a0>
   27bd4:	mov	r3, #0
   27bd8:	strb	r3, [r2]
   27bdc:	ldrb	r3, [sp, #132]	; 0x84
   27be0:	cmp	r3, #0
   27be4:	movne	r2, r4
   27be8:	beq	27c08 <__assert_fail@plt+0x15614>
   27bec:	sub	r1, r3, #97	; 0x61
   27bf0:	cmp	r1, #25
   27bf4:	subls	r3, r3, #32
   27bf8:	strb	r3, [r2]
   27bfc:	ldrb	r3, [r2, #1]!
   27c00:	cmp	r3, #0
   27c04:	bne	27bec <__assert_fail@plt+0x155f8>
   27c08:	ldr	r6, [pc, #1676]	; 2829c <__assert_fail@plt+0x15ca8>
   27c0c:	ldr	r5, [pc, #1676]	; 282a0 <__assert_fail@plt+0x15cac>
   27c10:	mov	r1, r6
   27c14:	b	27c24 <__assert_fail@plt+0x15630>
   27c18:	ldr	r1, [r5, #12]!
   27c1c:	cmp	r1, #0
   27c20:	beq	27e60 <__assert_fail@plt+0x1586c>
   27c24:	mov	r0, r4
   27c28:	bl	11f40 <strcmp@plt>
   27c2c:	cmp	r0, #0
   27c30:	bne	27c18 <__assert_fail@plt+0x15624>
   27c34:	ldr	r2, [r5, #8]
   27c38:	ldr	r3, [r5, #4]
   27c3c:	str	r3, [sp, #52]	; 0x34
   27c40:	asr	r3, r2, #31
   27c44:	strd	r2, [sp, #192]	; 0xc0
   27c48:	b	25f50 <__assert_fail@plt+0x1395c>
   27c4c:	mov	r2, #0
   27c50:	b	26438 <__assert_fail@plt+0x13e44>
   27c54:	ldr	r4, [sp, #100]	; 0x64
   27c58:	mov	lr, r9
   27c5c:	add	ip, r4, #32
   27c60:	str	ip, [sp, #120]	; 0x78
   27c64:	mov	ip, r4
   27c68:	ldrd	r4, [r9, #-216]	; 0xffffff28
   27c6c:	ldm	lr!, {r0, r1, r2, r3}
   27c70:	mov	r7, #42	; 0x2a
   27c74:	strd	r4, [ip, #56]	; 0x38
   27c78:	b	26be8 <__assert_fail@plt+0x145f4>
   27c7c:	subs	r2, r4, r0
   27c80:	sbc	r3, r5, r1
   27c84:	asr	r5, ip, #31
   27c88:	cmp	r2, ip
   27c8c:	sbcs	r3, r3, r5
   27c90:	movlt	r3, #1
   27c94:	movge	r3, #0
   27c98:	cmp	r3, #0
   27c9c:	bne	279d4 <__assert_fail@plt+0x153e0>
   27ca0:	ldr	r3, [sp, #100]	; 0x64
   27ca4:	add	r0, ip, r0
   27ca8:	mov	r7, #34	; 0x22
   27cac:	str	r0, [r3, #24]
   27cb0:	b	265c8 <__assert_fail@plt+0x13fd4>
   27cb4:	ldr	r1, [sp, #100]	; 0x64
   27cb8:	mov	r2, #0
   27cbc:	mov	r3, #-2147483648	; 0x80000000
   27cc0:	mov	r0, #1
   27cc4:	strd	r2, [r1, #40]	; 0x28
   27cc8:	b	2624c <__assert_fail@plt+0x13c58>
   27ccc:	mov	r2, #-2147483648	; 0x80000000
   27cd0:	subs	r2, r2, r0
   27cd4:	mvn	r3, #0
   27cd8:	sbc	r3, r3, r1
   27cdc:	asr	r5, ip, #31
   27ce0:	cmp	ip, r2
   27ce4:	sbcs	r3, r5, r3
   27ce8:	movlt	r3, #1
   27cec:	movge	r3, #0
   27cf0:	b	27c98 <__assert_fail@plt+0x156a4>
   27cf4:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27cf8:	cmp	r2, #0
   27cfc:	strd	r2, [sp, #56]	; 0x38
   27d00:	sbcs	r3, r3, #0
   27d04:	blt	27f44 <__assert_fail@plt+0x15950>
   27d08:	mvn	r3, #0
   27d0c:	mvn	r2, #0
   27d10:	cmp	r5, r3
   27d14:	cmpeq	r4, r2
   27d18:	beq	27800 <__assert_fail@plt+0x1520c>
   27d1c:	mov	r2, r4
   27d20:	mov	r3, r5
   27d24:	mov	r0, #0
   27d28:	mov	r1, #-2147483648	; 0x80000000
   27d2c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27d30:	ldrd	r2, [sp, #56]	; 0x38
   27d34:	cmp	r0, r2
   27d38:	sbcs	r3, r1, r3
   27d3c:	blt	26248 <__assert_fail@plt+0x13c54>
   27d40:	b	27800 <__assert_fail@plt+0x1520c>
   27d44:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27d48:	cmp	r2, #0
   27d4c:	strd	r2, [sp, #56]	; 0x38
   27d50:	sbcs	r3, r3, #0
   27d54:	blt	27fb0 <__assert_fail@plt+0x159bc>
   27d58:	mvn	r3, #0
   27d5c:	mvn	r2, #0
   27d60:	cmp	r5, r3
   27d64:	cmpeq	r4, r2
   27d68:	beq	275fc <__assert_fail@plt+0x15008>
   27d6c:	mov	r2, r4
   27d70:	mov	r3, r5
   27d74:	mov	r0, #0
   27d78:	mov	r1, #-2147483648	; 0x80000000
   27d7c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27d80:	ldrd	r2, [sp, #56]	; 0x38
   27d84:	cmp	r0, r2
   27d88:	sbcs	r3, r1, r3
   27d8c:	blt	26248 <__assert_fail@plt+0x13c54>
   27d90:	b	275fc <__assert_fail@plt+0x15008>
   27d94:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   27d98:	cmp	r2, #0
   27d9c:	strd	r2, [sp, #56]	; 0x38
   27da0:	sbcs	r3, r3, #0
   27da4:	blt	27fdc <__assert_fail@plt+0x159e8>
   27da8:	mvn	r3, #0
   27dac:	mvn	r2, #0
   27db0:	cmp	r5, r3
   27db4:	cmpeq	r4, r2
   27db8:	beq	26798 <__assert_fail@plt+0x141a4>
   27dbc:	mov	r2, r4
   27dc0:	mov	r3, r5
   27dc4:	mov	r0, #0
   27dc8:	mov	r1, #-2147483648	; 0x80000000
   27dcc:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27dd0:	ldrd	r2, [sp, #56]	; 0x38
   27dd4:	cmp	r0, r2
   27dd8:	sbcs	r3, r1, r3
   27ddc:	blt	26248 <__assert_fail@plt+0x13c54>
   27de0:	b	26798 <__assert_fail@plt+0x141a4>
   27de4:	ldr	r1, [sp, #100]	; 0x64
   27de8:	mov	r2, #0
   27dec:	mov	r3, #-2147483648	; 0x80000000
   27df0:	mov	r0, #1
   27df4:	strd	r2, [r1, #64]	; 0x40
   27df8:	b	2624c <__assert_fail@plt+0x13c58>
   27dfc:	ldrd	r0, [sp, #56]	; 0x38
   27e00:	mvn	r3, #0
   27e04:	mvn	r2, #0
   27e08:	cmp	r1, r3
   27e0c:	cmpeq	r0, r2
   27e10:	beq	27800 <__assert_fail@plt+0x1520c>
   27e14:	mov	r3, r1
   27e18:	mov	r2, r0
   27e1c:	mov	r1, #-2147483648	; 0x80000000
   27e20:	mov	r0, #0
   27e24:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27e28:	cmp	r0, r4
   27e2c:	sbcs	r3, r1, r5
   27e30:	movlt	r3, #1
   27e34:	movge	r3, #0
   27e38:	b	277f8 <__assert_fail@plt+0x15204>
   27e3c:	ldr	r2, [sp, #100]	; 0x64
   27e40:	add	r3, r4, #1
   27e44:	str	r3, [r2]
   27e48:	ldrb	r3, [r4]
   27e4c:	cmp	r3, #0
   27e50:	str	r3, [sp, #52]	; 0x34
   27e54:	bne	26270 <__assert_fail@plt+0x13c7c>
   27e58:	ldr	r2, [sp, #52]	; 0x34
   27e5c:	b	25f6c <__assert_fail@plt+0x13978>
   27e60:	mov	r0, r4
   27e64:	mov	r6, r1
   27e68:	bl	12300 <strlen@plt>
   27e6c:	cmp	r0, #3
   27e70:	str	r0, [sp, #52]	; 0x34
   27e74:	beq	28008 <__assert_fail@plt+0x15a14>
   27e78:	cmp	r0, #4
   27e7c:	movne	r5, r6
   27e80:	bne	27e98 <__assert_fail@plt+0x158a4>
   27e84:	ldrb	r3, [sp, #135]	; 0x87
   27e88:	sub	r3, r3, #46	; 0x2e
   27e8c:	clz	r3, r3
   27e90:	lsr	r3, r3, #5
   27e94:	mov	r5, r3
   27e98:	ldr	r6, [pc, #1028]	; 282a4 <__assert_fail@plt+0x15cb0>
   27e9c:	ldr	r3, [pc, #1028]	; 282a8 <__assert_fail@plt+0x15cb4>
   27ea0:	b	27ec4 <__assert_fail@plt+0x158d0>
   27ea4:	bl	12594 <strncmp@plt>
   27ea8:	clz	r0, r0
   27eac:	lsr	r0, r0, #5
   27eb0:	cmp	r0, #0
   27eb4:	bne	280d8 <__assert_fail@plt+0x15ae4>
   27eb8:	ldr	r3, [r6, #12]!
   27ebc:	cmp	r3, #0
   27ec0:	beq	280ac <__assert_fail@plt+0x15ab8>
   27ec4:	cmp	r5, #0
   27ec8:	mov	r1, r3
   27ecc:	mov	r0, r4
   27ed0:	mov	r2, #3
   27ed4:	bne	27ea4 <__assert_fail@plt+0x158b0>
   27ed8:	bl	11f40 <strcmp@plt>
   27edc:	clz	r0, r0
   27ee0:	lsr	r0, r0, #5
   27ee4:	b	27eb0 <__assert_fail@plt+0x158bc>
   27ee8:	adds	r2, r0, ip
   27eec:	adc	r3, r1, ip, asr #31
   27ef0:	cmp	r2, #-2147483648	; 0x80000000
   27ef4:	sbcs	r3, r3, #0
   27ef8:	movge	r3, #1
   27efc:	movlt	r3, #0
   27f00:	b	27c98 <__assert_fail@plt+0x156a4>
   27f04:	ldrd	r0, [sp, #56]	; 0x38
   27f08:	mvn	r3, #0
   27f0c:	mvn	r2, #0
   27f10:	cmp	r1, r3
   27f14:	cmpeq	r0, r2
   27f18:	beq	275fc <__assert_fail@plt+0x15008>
   27f1c:	mov	r3, r1
   27f20:	mov	r2, r0
   27f24:	mov	r1, #-2147483648	; 0x80000000
   27f28:	mov	r0, #0
   27f2c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27f30:	cmp	r0, r4
   27f34:	sbcs	r3, r1, r5
   27f38:	movlt	r3, #1
   27f3c:	movge	r3, #0
   27f40:	b	275f4 <__assert_fail@plt+0x15000>
   27f44:	mov	r2, r4
   27f48:	mov	r3, r5
   27f4c:	mvn	r0, #0
   27f50:	mvn	r1, #-2147483648	; 0x80000000
   27f54:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27f58:	ldrd	r2, [sp, #56]	; 0x38
   27f5c:	cmp	r2, r0
   27f60:	sbcs	r3, r3, r1
   27f64:	movlt	r3, #1
   27f68:	movge	r3, #0
   27f6c:	b	277f8 <__assert_fail@plt+0x15204>
   27f70:	ldrd	r0, [sp, #56]	; 0x38
   27f74:	mvn	r3, #0
   27f78:	mvn	r2, #0
   27f7c:	cmp	r1, r3
   27f80:	cmpeq	r0, r2
   27f84:	beq	26798 <__assert_fail@plt+0x141a4>
   27f88:	mov	r3, r1
   27f8c:	mov	r2, r0
   27f90:	mov	r1, #-2147483648	; 0x80000000
   27f94:	mov	r0, #0
   27f98:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27f9c:	cmp	r0, r4
   27fa0:	sbcs	r3, r1, r5
   27fa4:	movlt	r3, #1
   27fa8:	movge	r3, #0
   27fac:	b	26790 <__assert_fail@plt+0x1419c>
   27fb0:	mov	r2, r4
   27fb4:	mov	r3, r5
   27fb8:	mvn	r0, #0
   27fbc:	mvn	r1, #-2147483648	; 0x80000000
   27fc0:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27fc4:	ldrd	r2, [sp, #56]	; 0x38
   27fc8:	cmp	r2, r0
   27fcc:	sbcs	r3, r3, r1
   27fd0:	movlt	r3, #1
   27fd4:	movge	r3, #0
   27fd8:	b	275f4 <__assert_fail@plt+0x15000>
   27fdc:	mov	r2, r4
   27fe0:	mov	r3, r5
   27fe4:	mvn	r0, #0
   27fe8:	mvn	r1, #-2147483648	; 0x80000000
   27fec:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   27ff0:	ldrd	r2, [sp, #56]	; 0x38
   27ff4:	cmp	r2, r0
   27ff8:	sbcs	r3, r3, r1
   27ffc:	movlt	r3, #1
   28000:	movge	r3, #0
   28004:	b	26790 <__assert_fail@plt+0x1419c>
   28008:	mov	r3, #1
   2800c:	mov	r5, r3
   28010:	b	27e98 <__assert_fail@plt+0x158a4>
   28014:	mov	r7, lr
   28018:	b	265c8 <__assert_fail@plt+0x13fd4>
   2801c:	adds	r0, r1, #0
   28020:	movne	r0, #1
   28024:	ands	r0, r0, r2, lsr #31
   28028:	beq	281c4 <__assert_fail@plt+0x15bd0>
   2802c:	cmp	r3, #-2147483648	; 0x80000000
   28030:	beq	2809c <__assert_fail@plt+0x15aa8>
   28034:	sub	r3, r3, #1
   28038:	str	r3, [sp, #192]	; 0xc0
   2803c:	ldr	r3, [sp, #100]	; 0x64
   28040:	ldr	r2, [pc, #612]	; 282ac <__assert_fail@plt+0x15cb8>
   28044:	str	r4, [r3]
   28048:	sub	r2, r2, r1
   2804c:	mov	r3, #276	; 0x114
   28050:	str	r2, [sp, #196]	; 0xc4
   28054:	str	r3, [sp, #52]	; 0x34
   28058:	mov	r2, #21
   2805c:	b	25f6c <__assert_fail@plt+0x13978>
   28060:	ldrb	ip, [r4, #1]!
   28064:	sub	r0, ip, #48	; 0x30
   28068:	cmp	r0, #9
   2806c:	bhi	26528 <__assert_fail@plt+0x13f34>
   28070:	cmp	ip, #48	; 0x30
   28074:	beq	28060 <__assert_fail@plt+0x15a6c>
   28078:	add	r1, r1, #1
   2807c:	b	26528 <__assert_fail@plt+0x13f34>
   28080:	cmp	r5, #0
   28084:	beq	2809c <__assert_fail@plt+0x15aa8>
   28088:	mov	r1, r4
   2808c:	ldr	r0, [sp, #100]	; 0x64
   28090:	bl	25e38 <__assert_fail@plt+0x13844>
   28094:	cmp	r0, #0
   28098:	bne	280c4 <__assert_fail@plt+0x15ad0>
   2809c:	mov	r3, #63	; 0x3f
   280a0:	mov	r2, #2
   280a4:	str	r3, [sp, #52]	; 0x34
   280a8:	b	25f6c <__assert_fail@plt+0x13978>
   280ac:	mov	r5, r0
   280b0:	mov	r1, r4
   280b4:	ldr	r0, [sp, #100]	; 0x64
   280b8:	bl	25e38 <__assert_fail@plt+0x13844>
   280bc:	cmp	r0, #0
   280c0:	beq	280ec <__assert_fail@plt+0x15af8>
   280c4:	ldr	r2, [r0, #8]
   280c8:	ldr	r3, [r0, #4]
   280cc:	str	r3, [sp, #52]	; 0x34
   280d0:	asr	r3, r2, #31
   280d4:	b	27c44 <__assert_fail@plt+0x15650>
   280d8:	ldr	r2, [r6, #8]
   280dc:	ldr	r3, [r6, #4]
   280e0:	str	r3, [sp, #52]	; 0x34
   280e4:	asr	r3, r2, #31
   280e8:	b	27c44 <__assert_fail@plt+0x15650>
   280ec:	ldr	r1, [pc, #444]	; 282b0 <__assert_fail@plt+0x15cbc>
   280f0:	mov	r0, r4
   280f4:	bl	11f40 <strcmp@plt>
   280f8:	cmp	r0, #0
   280fc:	beq	26258 <__assert_fail@plt+0x13c64>
   28100:	ldr	r6, [pc, #428]	; 282b4 <__assert_fail@plt+0x15cc0>
   28104:	ldr	r2, [pc, #428]	; 282b8 <__assert_fail@plt+0x15cc4>
   28108:	mov	r3, r6
   2810c:	str	r6, [sp, #56]	; 0x38
   28110:	mov	r1, r2
   28114:	mov	r6, r5
   28118:	mov	r5, r3
   2811c:	mov	r0, r4
   28120:	bl	11f40 <strcmp@plt>
   28124:	cmp	r0, #0
   28128:	beq	281f4 <__assert_fail@plt+0x15c00>
   2812c:	ldr	r1, [r5, #12]!
   28130:	cmp	r1, #0
   28134:	bne	2811c <__assert_fail@plt+0x15b28>
   28138:	ldr	r3, [sp, #52]	; 0x34
   2813c:	mov	r2, r1
   28140:	sub	r3, r3, #1
   28144:	mov	r5, r6
   28148:	ldrb	r1, [r4, r3]
   2814c:	ldr	r6, [sp, #56]	; 0x38
   28150:	cmp	r1, #83	; 0x53
   28154:	beq	28208 <__assert_fail@plt+0x15c14>
   28158:	ldr	r6, [pc, #348]	; 282bc <__assert_fail@plt+0x15cc8>
   2815c:	ldr	r1, [pc, #348]	; 282c0 <__assert_fail@plt+0x15ccc>
   28160:	mov	r0, r4
   28164:	bl	11f40 <strcmp@plt>
   28168:	cmp	r0, #0
   2816c:	beq	280d8 <__assert_fail@plt+0x15ae4>
   28170:	ldr	r1, [r6, #12]!
   28174:	cmp	r1, #0
   28178:	bne	28160 <__assert_fail@plt+0x15b6c>
   2817c:	ldr	r3, [sp, #52]	; 0x34
   28180:	cmp	r3, #1
   28184:	ldrb	r3, [sp, #132]	; 0x84
   28188:	beq	28240 <__assert_fail@plt+0x15c4c>
   2818c:	cmp	r3, #0
   28190:	beq	2809c <__assert_fail@plt+0x15aa8>
   28194:	mov	r1, r4
   28198:	mov	r2, r4
   2819c:	mov	r0, #1
   281a0:	cmp	r3, #46	; 0x2e
   281a4:	ldrb	r3, [r2, #1]!
   281a8:	addne	r1, r1, #1
   281ac:	moveq	r5, r0
   281b0:	cmp	r3, #0
   281b4:	strb	r3, [r1]
   281b8:	beq	28080 <__assert_fail@plt+0x15a8c>
   281bc:	ldrb	r3, [r2]
   281c0:	b	281a0 <__assert_fail@plt+0x15bac>
   281c4:	str	r3, [sp, #192]	; 0xc0
   281c8:	ldr	r3, [sp, #100]	; 0x64
   281cc:	ldr	r0, [pc, #240]	; 282c4 <__assert_fail@plt+0x15cd0>
   281d0:	cmp	r2, #0
   281d4:	str	r4, [r3]
   281d8:	moveq	r3, r0
   281dc:	movne	r3, #276	; 0x114
   281e0:	str	r1, [sp, #196]	; 0xc4
   281e4:	moveq	r2, #22
   281e8:	movne	r2, #21
   281ec:	str	r3, [sp, #52]	; 0x34
   281f0:	b	25f6c <__assert_fail@plt+0x13978>
   281f4:	ldr	r2, [r5, #8]
   281f8:	ldr	r3, [r5, #4]
   281fc:	str	r3, [sp, #52]	; 0x34
   28200:	asr	r3, r2, #31
   28204:	b	27c44 <__assert_fail@plt+0x15650>
   28208:	ldr	r1, [pc, #168]	; 282b8 <__assert_fail@plt+0x15cc4>
   2820c:	strb	r2, [r4, r3]
   28210:	mov	r0, r4
   28214:	str	r3, [sp, #56]	; 0x38
   28218:	bl	11f40 <strcmp@plt>
   2821c:	ldr	r3, [sp, #56]	; 0x38
   28220:	cmp	r0, #0
   28224:	beq	280d8 <__assert_fail@plt+0x15ae4>
   28228:	ldr	r1, [r6, #12]!
   2822c:	cmp	r1, #0
   28230:	bne	28210 <__assert_fail@plt+0x15c1c>
   28234:	mov	r2, #83	; 0x53
   28238:	strb	r2, [r4, r3]
   2823c:	b	28158 <__assert_fail@plt+0x15b64>
   28240:	cmp	r3, #65	; 0x41
   28244:	beq	28284 <__assert_fail@plt+0x15c90>
   28248:	ldr	r2, [pc, #120]	; 282c8 <__assert_fail@plt+0x15cd4>
   2824c:	ldr	r1, [pc, #120]	; 282cc <__assert_fail@plt+0x15cd8>
   28250:	cmp	r2, #0
   28254:	add	r0, r1, #12
   28258:	beq	2818c <__assert_fail@plt+0x15b98>
   2825c:	ldrb	r2, [r2]
   28260:	cmp	r2, r3
   28264:	ldrne	r2, [r0, #12]
   28268:	movne	r1, r0
   2826c:	bne	28250 <__assert_fail@plt+0x15c5c>
   28270:	ldr	r2, [r1, #20]
   28274:	ldr	r3, [r1, #16]
   28278:	str	r3, [sp, #52]	; 0x34
   2827c:	asr	r3, r2, #31
   28280:	b	27c44 <__assert_fail@plt+0x15650>
   28284:	mov	r2, #3600	; 0xe10
   28288:	mov	r3, #0
   2828c:	ldr	r1, [pc, #60]	; 282d0 <__assert_fail@plt+0x15cdc>
   28290:	strd	r2, [sp, #192]	; 0xc0
   28294:	str	r1, [sp, #52]	; 0x34
   28298:	b	2626c <__assert_fail@plt+0x13c78>
   2829c:	andeq	r5, r4, r4, lsl #11
   282a0:	andeq	r4, r4, r0, lsr pc
   282a4:	andeq	r4, r4, ip, ror #30
   282a8:	andeq	r5, r4, r8, lsl #11
   282ac:	blcc	fe6daab4 <stdout@@GLIBC_2.4+0xfe683560>
   282b0:	andeq	r5, r4, r8, lsr #11
   282b4:	muleq	r4, r8, r0
   282b8:	muleq	r4, r0, r5
   282bc:	andeq	r5, r4, ip, lsl r1
   282c0:	muleq	r4, r8, r5
   282c4:	andeq	r0, r0, r5, lsl r1
   282c8:	andeq	r5, r4, r4, lsr #11
   282cc:	andeq	r4, r4, r4, lsl #27
   282d0:	andeq	r0, r0, r1, lsl r1
   282d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282d8:	sub	sp, sp, #612	; 0x264
   282dc:	subs	r4, r2, #0
   282e0:	str	r0, [sp, #12]
   282e4:	mov	r6, r1
   282e8:	mov	fp, r3
   282ec:	beq	28778 <__assert_fail@plt+0x16184>
   282f0:	ldrb	r3, [r6]
   282f4:	ldr	r9, [r4]
   282f8:	ldr	r5, [r4, #4]
   282fc:	sub	r3, r3, #9
   28300:	cmp	r3, #23
   28304:	bhi	28330 <__assert_fail@plt+0x15d3c>
   28308:	mov	r1, #1
   2830c:	ldr	r2, [pc, #3132]	; 28f50 <__assert_fail@plt+0x1695c>
   28310:	ands	r3, r2, r1, lsl r3
   28314:	beq	28330 <__assert_fail@plt+0x15d3c>
   28318:	ldrb	r3, [r6, #1]!
   2831c:	sub	r3, r3, #9
   28320:	cmp	r3, #23
   28324:	bhi	28330 <__assert_fail@plt+0x15d3c>
   28328:	ands	r3, r2, r1, lsl r3
   2832c:	bne	28318 <__assert_fail@plt+0x15d24>
   28330:	mov	r2, #56	; 0x38
   28334:	mov	r1, #0
   28338:	add	r0, sp, #224	; 0xe0
   2833c:	bl	12378 <memset@plt>
   28340:	mov	r2, #4
   28344:	ldr	r1, [pc, #3080]	; 28f54 <__assert_fail@plt+0x16960>
   28348:	mov	r0, r6
   2834c:	bl	12594 <strncmp@plt>
   28350:	cmp	r0, #0
   28354:	bne	283b4 <__assert_fail@plt+0x15dc0>
   28358:	ldrb	ip, [r6, #4]
   2835c:	add	r7, r6, #4
   28360:	cmp	ip, #0
   28364:	beq	283b4 <__assert_fail@plt+0x15dc0>
   28368:	mov	r1, r7
   2836c:	mov	r3, ip
   28370:	mov	r0, #1
   28374:	b	28394 <__assert_fail@plt+0x15da0>
   28378:	cmp	r3, #34	; 0x22
   2837c:	beq	285c0 <__assert_fail@plt+0x15fcc>
   28380:	ldrb	r3, [r2, #1]
   28384:	add	r0, r0, #1
   28388:	add	r1, r2, #1
   2838c:	cmp	r3, #0
   28390:	beq	283b4 <__assert_fail@plt+0x15dc0>
   28394:	cmp	r3, #92	; 0x5c
   28398:	mov	r2, r1
   2839c:	bne	28378 <__assert_fail@plt+0x15d84>
   283a0:	ldrb	r3, [r1, #1]
   283a4:	add	r2, r1, #1
   283a8:	cmp	r3, #92	; 0x5c
   283ac:	cmpne	r3, #34	; 0x22
   283b0:	beq	28380 <__assert_fail@plt+0x15d8c>
   283b4:	mov	r1, r4
   283b8:	add	r2, sp, #136	; 0x88
   283bc:	mov	r0, fp
   283c0:	bl	3e9ec <__assert_fail@plt+0x2c3f8>
   283c4:	cmp	r0, #0
   283c8:	beq	2876c <__assert_fail@plt+0x16178>
   283cc:	mov	sl, fp
   283d0:	mov	r3, #0
   283d4:	str	r3, [sp, #8]
   283d8:	ldr	r4, [sp, #152]	; 0x98
   283dc:	ldrb	r7, [r6]
   283e0:	add	r4, r4, #1
   283e4:	str	r5, [sp, #476]	; 0x1dc
   283e8:	str	r7, [sp]
   283ec:	asr	r5, r4, #31
   283f0:	add	r7, sp, #440	; 0x1b8
   283f4:	mov	r8, #0
   283f8:	strd	r4, [r7]
   283fc:	ldr	r5, [sp]
   28400:	ldr	r4, [pc, #2896]	; 28f58 <__assert_fail@plt+0x16964>
   28404:	cmp	r5, r8
   28408:	moveq	r6, r4
   2840c:	str	r6, [sp, #384]	; 0x180
   28410:	ldr	r4, [pc, #2884]	; 28f5c <__assert_fail@plt+0x16968>
   28414:	ldr	r6, [sp, #156]	; 0x9c
   28418:	ldr	r7, [sp, #148]	; 0x94
   2841c:	adds	r4, r4, r6
   28420:	mov	r5, #0
   28424:	adc	r5, r5, r6, asr #31
   28428:	add	r6, sp, #424	; 0x1a8
   2842c:	add	ip, sp, #224	; 0xe0
   28430:	strd	r4, [r6]
   28434:	mov	r4, r7
   28438:	asr	r5, r7, #31
   2843c:	add	r6, sp, #448	; 0x1c0
   28440:	ldm	ip!, {r0, r1, r2, r3}
   28444:	add	lr, sp, #480	; 0x1e0
   28448:	strd	r4, [r6]
   2844c:	ldr	r6, [sp, #144]	; 0x90
   28450:	add	r4, sp, #456	; 0x1c8
   28454:	stmia	lr!, {r0, r1, r2, r3}
   28458:	asr	r7, r6, #31
   2845c:	ldm	ip!, {r0, r1, r2, r3}
   28460:	strd	r6, [r4]
   28464:	ldr	r4, [sp, #140]	; 0x8c
   28468:	add	r6, sp, #464	; 0x1d0
   2846c:	ldr	r7, [sp, #136]	; 0x88
   28470:	asr	r5, r4, #31
   28474:	str	r7, [sp, #472]	; 0x1d8
   28478:	strd	r4, [r6]
   2847c:	ldr	r6, [sp, #168]	; 0xa8
   28480:	mov	r4, #2
   28484:	str	r8, [sp, #432]	; 0x1b0
   28488:	str	r6, [sp, #124]	; 0x7c
   2848c:	str	r4, [sp, #412]	; 0x19c
   28490:	stmia	lr!, {r0, r1, r2, r3}
   28494:	sub	r4, r9, #-2147483647	; 0x80000001
   28498:	ldm	ip!, {r0, r1, r2, r3}
   2849c:	ldr	r7, [pc, #2748]	; 28f60 <__assert_fail@plt+0x1696c>
   284a0:	ldr	r5, [pc, #2748]	; 28f64 <__assert_fail@plt+0x16970>
   284a4:	stmia	lr!, {r0, r1, r2, r3}
   284a8:	ldm	ip, {r0, r1}
   284ac:	strb	r8, [sp, #536]	; 0x218
   284b0:	strb	r8, [sp, #537]	; 0x219
   284b4:	str	r8, [sp, #540]	; 0x21c
   284b8:	str	r8, [sp, #544]	; 0x220
   284bc:	str	r8, [sp, #556]	; 0x22c
   284c0:	str	r8, [sp, #548]	; 0x224
   284c4:	str	r8, [sp, #552]	; 0x228
   284c8:	str	r8, [sp, #560]	; 0x230
   284cc:	strb	r8, [sp, #564]	; 0x234
   284d0:	strb	r8, [sp, #565]	; 0x235
   284d4:	strb	r8, [sp, #566]	; 0x236
   284d8:	strb	r8, [sp, #568]	; 0x238
   284dc:	strb	r8, [sp, #567]	; 0x237
   284e0:	strb	r8, [sp, #569]	; 0x239
   284e4:	strb	r8, [sp, #570]	; 0x23a
   284e8:	strb	r8, [sp, #571]	; 0x23b
   284ec:	stm	lr, {r0, r1}
   284f0:	ldr	r3, [pc, #2672]	; 28f68 <__assert_fail@plt+0x16974>
   284f4:	ldr	r2, [sp, #176]	; 0xb0
   284f8:	str	r3, [sp, #576]	; 0x240
   284fc:	str	r2, [sp, #572]	; 0x23c
   28500:	str	r6, [sp, #580]	; 0x244
   28504:	str	r8, [sp, #584]	; 0x248
   28508:	cmp	r9, #0
   2850c:	sub	r3, r4, r7
   28510:	add	r2, sp, #180	; 0xb4
   28514:	add	r1, sp, #60	; 0x3c
   28518:	mov	r0, sl
   2851c:	blt	28528 <__assert_fail@plt+0x15f34>
   28520:	cmp	r9, r7
   28524:	bgt	28564 <__assert_fail@plt+0x15f70>
   28528:	str	r3, [sp, #60]	; 0x3c
   2852c:	bl	3e9ec <__assert_fail@plt+0x2c3f8>
   28530:	sub	r7, r7, #7733248	; 0x760000
   28534:	sub	r7, r7, #42752	; 0xa700
   28538:	cmp	r0, #0
   2853c:	beq	2855c <__assert_fail@plt+0x15f68>
   28540:	ldr	r3, [sp, #220]	; 0xdc
   28544:	cmp	r3, #0
   28548:	beq	2855c <__assert_fail@plt+0x15f68>
   2854c:	ldr	r2, [sp, #212]	; 0xd4
   28550:	ldr	r1, [sp, #580]	; 0x244
   28554:	cmp	r2, r1
   28558:	bne	28788 <__assert_fail@plt+0x16194>
   2855c:	cmp	r7, r5
   28560:	bne	28508 <__assert_fail@plt+0x15f14>
   28564:	ldr	r0, [sp, #572]	; 0x23c
   28568:	cmp	r0, #0
   2856c:	beq	28590 <__assert_fail@plt+0x15f9c>
   28570:	ldr	r1, [sp, #584]	; 0x248
   28574:	cmp	r1, #0
   28578:	beq	28590 <__assert_fail@plt+0x15f9c>
   2857c:	bl	11f40 <strcmp@plt>
   28580:	cmp	r0, #0
   28584:	mvneq	r3, #0
   28588:	streq	r0, [sp, #584]	; 0x248
   2858c:	streq	r3, [sp, #580]	; 0x244
   28590:	add	r0, sp, #384	; 0x180
   28594:	bl	25f04 <__assert_fail@plt+0x13910>
   28598:	subs	r9, r0, #0
   2859c:	bne	28674 <__assert_fail@plt+0x16080>
   285a0:	ldrb	r4, [sp, #536]	; 0x218
   285a4:	cmp	r4, #0
   285a8:	beq	2869c <__assert_fail@plt+0x160a8>
   285ac:	add	r3, sp, #472	; 0x1d8
   285b0:	ldm	r3, {r0, r1}
   285b4:	ldr	r3, [sp, #12]
   285b8:	stm	r3, {r0, r1}
   285bc:	b	28678 <__assert_fail@plt+0x16084>
   285c0:	cmp	r0, #100	; 0x64
   285c4:	movle	r3, #0
   285c8:	addle	r0, sp, #284	; 0x11c
   285cc:	strle	r3, [sp, #8]
   285d0:	bgt	28754 <__assert_fail@plt+0x16160>
   285d4:	cmp	ip, #34	; 0x22
   285d8:	mov	r2, r0
   285dc:	beq	28608 <__assert_fail@plt+0x16014>
   285e0:	sub	ip, ip, #92	; 0x5c
   285e4:	clz	ip, ip
   285e8:	lsr	ip, ip, #5
   285ec:	add	r3, r7, ip
   285f0:	ldrb	r1, [r7, ip]
   285f4:	ldrb	ip, [r3, #1]
   285f8:	add	r7, r3, #1
   285fc:	strb	r1, [r2], #1
   28600:	cmp	ip, #34	; 0x22
   28604:	bne	285e0 <__assert_fail@plt+0x15fec>
   28608:	mov	r3, #0
   2860c:	strb	r3, [r2]
   28610:	bl	3e774 <__assert_fail@plt+0x2c180>
   28614:	subs	sl, r0, #0
   28618:	moveq	r4, sl
   2861c:	beq	28688 <__assert_fail@plt+0x16094>
   28620:	ldrb	r3, [r7, #1]
   28624:	add	r6, r7, #1
   28628:	sub	r3, r3, #9
   2862c:	cmp	r3, #23
   28630:	bhi	2865c <__assert_fail@plt+0x16068>
   28634:	mov	r1, #1
   28638:	ldr	r2, [pc, #2320]	; 28f50 <__assert_fail@plt+0x1695c>
   2863c:	ands	r3, r2, r1, lsl r3
   28640:	beq	2865c <__assert_fail@plt+0x16068>
   28644:	ldrb	r3, [r6, #1]!
   28648:	sub	r3, r3, #9
   2864c:	cmp	r3, #23
   28650:	bhi	2865c <__assert_fail@plt+0x16068>
   28654:	ands	r3, r2, r1, lsl r3
   28658:	bne	28644 <__assert_fail@plt+0x16050>
   2865c:	mov	r1, r4
   28660:	add	r2, sp, #136	; 0x88
   28664:	mov	r0, sl
   28668:	bl	3e9ec <__assert_fail@plt+0x2c3f8>
   2866c:	cmp	r0, #0
   28670:	bne	283d8 <__assert_fail@plt+0x15de4>
   28674:	mov	r4, #0
   28678:	cmp	sl, fp
   2867c:	beq	28688 <__assert_fail@plt+0x16094>
   28680:	mov	r0, sl
   28684:	bl	3e9c0 <__assert_fail@plt+0x2c3cc>
   28688:	ldr	r0, [sp, #8]
   2868c:	bl	2db68 <__assert_fail@plt+0x1b574>
   28690:	mov	r0, r4
   28694:	add	sp, sp, #612	; 0x264
   28698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2869c:	ldr	r7, [sp, #556]	; 0x22c
   286a0:	ldr	r6, [sp, #540]	; 0x21c
   286a4:	ldr	r5, [sp, #544]	; 0x220
   286a8:	orr	lr, r7, r6
   286ac:	ldr	r3, [sp, #552]	; 0x228
   286b0:	ldr	ip, [sp, #548]	; 0x224
   286b4:	ldr	r2, [sp, #560]	; 0x230
   286b8:	orr	lr, lr, r5
   286bc:	orr	r3, lr, r3
   286c0:	add	r2, ip, r2
   286c4:	orr	r3, r3, r2
   286c8:	cmp	r3, #1
   286cc:	bgt	28678 <__assert_fail@plt+0x16084>
   286d0:	add	r3, sp, #424	; 0x1a8
   286d4:	ldrd	r0, [r3]
   286d8:	cmp	r0, #0
   286dc:	sbcs	r3, r1, #0
   286e0:	blt	287f4 <__assert_fail@plt+0x16200>
   286e4:	ldr	r3, [sp, #432]	; 0x1b0
   286e8:	cmp	r3, #2
   286ec:	beq	28820 <__assert_fail@plt+0x1622c>
   286f0:	ldr	r2, [pc, #2164]	; 28f6c <__assert_fail@plt+0x16978>
   286f4:	mov	r3, #0
   286f8:	cmp	r2, r0
   286fc:	sbcs	r3, r3, r1
   28700:	sublt	r3, r0, #1888	; 0x760
   28704:	sublt	r3, r3, #12
   28708:	strlt	r3, [sp, #112]	; 0x70
   2870c:	blt	28678 <__assert_fail@plt+0x16084>
   28710:	sub	r3, r0, #1888	; 0x760
   28714:	sub	r3, r3, #12
   28718:	str	r3, [sp, #112]	; 0x70
   2871c:	add	r3, sp, #440	; 0x1b8
   28720:	mvn	r2, #0
   28724:	ldrd	r0, [r3]
   28728:	mov	r3, #0
   2872c:	strd	r0, [sp]
   28730:	subs	r0, r0, #-2147483647	; 0x80000001
   28734:	adc	r1, r1, #0
   28738:	cmp	r1, r3
   2873c:	cmpeq	r0, r2
   28740:	bls	287a4 <__assert_fail@plt+0x161b0>
   28744:	ldr	r3, [sp]
   28748:	sub	r8, r3, #1
   2874c:	str	r8, [sp, #108]	; 0x6c
   28750:	b	28678 <__assert_fail@plt+0x16084>
   28754:	bl	2fe38 <__assert_fail@plt+0x1d844>
   28758:	subs	r3, r0, #0
   2875c:	str	r3, [sp, #8]
   28760:	ldrbne	ip, [r6, #4]
   28764:	ldrne	r0, [sp, #8]
   28768:	bne	285d4 <__assert_fail@plt+0x15fe0>
   2876c:	mov	r4, #0
   28770:	str	r4, [sp, #8]
   28774:	b	28688 <__assert_fail@plt+0x16094>
   28778:	add	r0, sp, #52	; 0x34
   2877c:	bl	3f24c <__assert_fail@plt+0x2cc58>
   28780:	add	r4, sp, #52	; 0x34
   28784:	b	282f0 <__assert_fail@plt+0x15cfc>
   28788:	ldr	r0, [pc, #2008]	; 28f68 <__assert_fail@plt+0x16974>
   2878c:	mov	r1, #0
   28790:	str	r3, [sp, #584]	; 0x248
   28794:	str	r2, [sp, #592]	; 0x250
   28798:	str	r0, [sp, #588]	; 0x24c
   2879c:	str	r1, [sp, #596]	; 0x254
   287a0:	b	28564 <__assert_fail@plt+0x15f70>
   287a4:	add	r3, sp, #448	; 0x1c0
   287a8:	ldrd	r0, [r3]
   287ac:	ldr	r3, [sp]
   287b0:	cmp	r0, #0
   287b4:	sub	r3, r3, #1
   287b8:	str	r3, [sp, #24]
   287bc:	str	r3, [sp, #108]	; 0x6c
   287c0:	sbcs	r3, r1, #0
   287c4:	strd	r0, [sp, #16]
   287c8:	blt	288f8 <__assert_fail@plt+0x16304>
   287cc:	ldrd	r2, [sp, #16]
   287d0:	cmp	r2, #-2147483648	; 0x80000000
   287d4:	sbcs	r3, r3, #0
   287d8:	movge	r8, #1
   287dc:	movlt	r8, #0
   287e0:	cmp	r8, #0
   287e4:	beq	28874 <__assert_fail@plt+0x16280>
   287e8:	ldr	r3, [sp, #16]
   287ec:	str	r3, [sp, #104]	; 0x68
   287f0:	b	28678 <__assert_fail@plt+0x16084>
   287f4:	ldr	r2, [pc, #1908]	; 28f70 <__assert_fail@plt+0x1697c>
   287f8:	mvn	r3, #0
   287fc:	cmp	r0, r2
   28800:	sbcs	r3, r1, r3
   28804:	blt	28840 <__assert_fail@plt+0x1624c>
   28808:	rsb	r0, r0, #-16777216	; 0xff000000
   2880c:	add	r0, r0, #16711680	; 0xff0000
   28810:	add	r0, r0, #63488	; 0xf800
   28814:	add	r0, r0, #148	; 0x94
   28818:	str	r0, [sp, #112]	; 0x70
   2881c:	b	2871c <__assert_fail@plt+0x16128>
   28820:	cmp	r0, #69	; 0x45
   28824:	sbcs	r3, r1, #0
   28828:	movlt	r2, #2000	; 0x7d0
   2882c:	ldrge	r2, [pc, #1832]	; 28f5c <__assert_fail@plt+0x16968>
   28830:	mov	r3, #0
   28834:	adds	r0, r0, r2
   28838:	adc	r1, r1, r3
   2883c:	b	286f0 <__assert_fail@plt+0x160fc>
   28840:	ldr	r2, [pc, #1836]	; 28f74 <__assert_fail@plt+0x16980>
   28844:	mvn	r3, #0
   28848:	subs	r2, r2, r0
   2884c:	sbc	r3, r3, r1
   28850:	cmp	r2, #-2147483648	; 0x80000000
   28854:	sbcs	r3, r3, #0
   28858:	blt	28808 <__assert_fail@plt+0x16214>
   2885c:	rsb	r0, r0, #-16777216	; 0xff000000
   28860:	add	r0, r0, #16711680	; 0xff0000
   28864:	add	r0, r0, #63488	; 0xf800
   28868:	add	r0, r0, #148	; 0x94
   2886c:	str	r0, [sp, #112]	; 0x70
   28870:	b	28678 <__assert_fail@plt+0x16084>
   28874:	ldr	r3, [sp, #16]
   28878:	cmp	r7, #0
   2887c:	str	r3, [sp, #104]	; 0x68
   28880:	bne	288a0 <__assert_fail@plt+0x162ac>
   28884:	ldrb	r3, [sp, #537]	; 0x219
   28888:	cmp	r6, #0
   2888c:	cmpeq	r5, #0
   28890:	moveq	r5, #1
   28894:	movne	r5, #0
   28898:	tst	r5, r3
   2889c:	beq	28920 <__assert_fail@plt+0x1632c>
   288a0:	ldr	r1, [sp, #412]	; 0x19c
   288a4:	add	r3, sp, #456	; 0x1c8
   288a8:	cmp	r1, #0
   288ac:	str	r1, [sp]
   288b0:	ldrd	r2, [r3]
   288b4:	beq	28e6c <__assert_fail@plt+0x16878>
   288b8:	cmp	r1, #1
   288bc:	bne	28e2c <__assert_fail@plt+0x16838>
   288c0:	subs	r0, r2, #1
   288c4:	sbc	r1, r3, #0
   288c8:	cmp	r1, #0
   288cc:	cmpeq	r0, #10
   288d0:	addls	r3, r2, #12
   288d4:	strls	r3, [sp]
   288d8:	bls	28e3c <__assert_fail@plt+0x16848>
   288dc:	cmp	r3, #0
   288e0:	cmpeq	r2, #12
   288e4:	beq	28e60 <__assert_fail@plt+0x1686c>
   288e8:	mvn	r3, #0
   288ec:	mov	r4, r8
   288f0:	str	r3, [sp, #100]	; 0x64
   288f4:	b	28678 <__assert_fail@plt+0x16084>
   288f8:	mov	r2, #-2147483648	; 0x80000000
   288fc:	mvn	r3, #0
   28900:	subs	r0, r2, r0
   28904:	sbc	r1, r3, r1
   28908:	mov	r3, r1
   2890c:	cmp	r0, #1
   28910:	sbcs	r3, r3, #0
   28914:	movge	r8, #1
   28918:	movlt	r8, #0
   2891c:	b	287e0 <__assert_fail@plt+0x161ec>
   28920:	str	r9, [sp]
   28924:	str	r9, [sp, #36]	; 0x24
   28928:	str	r8, [sp, #92]	; 0x5c
   2892c:	str	r8, [sp, #96]	; 0x60
   28930:	str	r8, [sp, #100]	; 0x64
   28934:	str	r8, [sp, #476]	; 0x1dc
   28938:	cmp	lr, #0
   2893c:	mvnne	r3, #0
   28940:	strne	r3, [sp, #124]	; 0x7c
   28944:	cmp	ip, #0
   28948:	ldr	ip, [sp, #36]	; 0x24
   2894c:	ldrne	r3, [sp, #404]	; 0x194
   28950:	str	ip, [sp, #184]	; 0xb8
   28954:	ldr	ip, [sp]
   28958:	ldreq	r3, [sp, #124]	; 0x7c
   2895c:	str	ip, [sp, #188]	; 0xbc
   28960:	ldr	ip, [sp, #16]
   28964:	streq	r3, [sp, #32]
   28968:	str	ip, [sp, #192]	; 0xc0
   2896c:	ldr	ip, [sp, #24]
   28970:	strne	r3, [sp, #32]
   28974:	ldr	r2, [sp, #112]	; 0x70
   28978:	str	ip, [sp, #196]	; 0xc4
   2897c:	ldr	ip, [sp, #32]
   28980:	strne	r3, [sp, #124]	; 0x7c
   28984:	add	r1, sp, #92	; 0x5c
   28988:	mvn	r3, #0
   2898c:	mov	r0, sl
   28990:	str	r2, [sp, #40]	; 0x28
   28994:	str	ip, [sp, #212]	; 0xd4
   28998:	str	r2, [sp, #200]	; 0xc8
   2899c:	str	r3, [sp, #116]	; 0x74
   289a0:	str	r9, [sp, #180]	; 0xb4
   289a4:	bl	3ea70 <__assert_fail@plt+0x2c47c>
   289a8:	add	r1, sp, #92	; 0x5c
   289ac:	mov	r5, r0
   289b0:	add	r0, sp, #180	; 0xb4
   289b4:	bl	253c0 <__assert_fail@plt+0x12dcc>
   289b8:	subs	r4, r0, #0
   289bc:	bne	28b50 <__assert_fail@plt+0x1655c>
   289c0:	ldr	r3, [sp, #560]	; 0x230
   289c4:	cmp	r3, #0
   289c8:	beq	28678 <__assert_fail@plt+0x16084>
   289cc:	ldr	r5, [sp, #408]	; 0x198
   289d0:	ldr	r3, [pc, #1440]	; 28f78 <__assert_fail@plt+0x16984>
   289d4:	cmp	r5, #0
   289d8:	asr	r6, r5, #31
   289dc:	smull	r2, r3, r3, r5
   289e0:	ldr	r1, [pc, #1428]	; 28f7c <__assert_fail@plt+0x16988>
   289e4:	add	r3, r3, r5
   289e8:	add	r7, sp, #63	; 0x3f
   289ec:	rsb	r6, r6, r3, asr #11
   289f0:	mov	ip, #88	; 0x58
   289f4:	eor	r3, r6, r6, asr #31
   289f8:	add	r2, sp, #60	; 0x3c
   289fc:	sub	r3, r3, r6, asr #31
   28a00:	movge	r2, #43	; 0x2b
   28a04:	movlt	r2, #45	; 0x2d
   28a08:	mov	r0, r7
   28a0c:	strb	ip, [sp, #62]	; 0x3e
   28a10:	strb	ip, [sp, #61]	; 0x3d
   28a14:	strb	ip, [sp, #60]	; 0x3c
   28a18:	bl	124b0 <sprintf@plt>
   28a1c:	mov	r3, #3600	; 0xe10
   28a20:	mul	r6, r3, r6
   28a24:	sub	r5, r5, r6
   28a28:	cmp	r5, #0
   28a2c:	str	r0, [sp, #44]	; 0x2c
   28a30:	add	lr, r7, r0
   28a34:	eor	r0, r5, r5, asr #31
   28a38:	sub	r0, r0, r5, asr #31
   28a3c:	beq	28ad8 <__assert_fail@plt+0x164e4>
   28a40:	ldr	r3, [pc, #1336]	; 28f80 <__assert_fail@plt+0x1698c>
   28a44:	ldr	r1, [pc, #1336]	; 28f84 <__assert_fail@plt+0x16990>
   28a48:	asr	r2, r0, #31
   28a4c:	smull	ip, r3, r3, r0
   28a50:	smull	ip, r1, r1, r0
   28a54:	ldr	r5, [pc, #1324]	; 28f88 <__assert_fail@plt+0x16994>
   28a58:	add	r3, r3, r0
   28a5c:	rsb	r1, r2, r1, asr #6
   28a60:	rsb	r3, r2, r3, asr #5
   28a64:	add	r1, r1, #48	; 0x30
   28a68:	smull	r2, ip, r5, r3
   28a6c:	asr	r2, r3, #31
   28a70:	rsb	r2, r2, ip, asr #2
   28a74:	rsb	r6, r3, r3, lsl #4
   28a78:	add	r2, r2, r2, lsl #2
   28a7c:	mov	ip, #58	; 0x3a
   28a80:	sub	r2, r3, r2, lsl #1
   28a84:	subs	r3, r0, r6, lsl #2
   28a88:	ldr	r0, [sp, #44]	; 0x2c
   28a8c:	add	r2, r2, #48	; 0x30
   28a90:	strb	ip, [r7, r0]
   28a94:	add	r0, lr, #3
   28a98:	strb	r1, [lr, #1]
   28a9c:	strb	r2, [lr, #2]
   28aa0:	beq	28ad0 <__assert_fail@plt+0x164dc>
   28aa4:	smull	r2, r5, r5, r3
   28aa8:	strb	ip, [lr, #3]
   28aac:	asr	r2, r3, #31
   28ab0:	rsb	r2, r2, r5, asr #2
   28ab4:	add	r0, lr, #6
   28ab8:	add	r1, r2, r2, lsl #2
   28abc:	add	r2, r2, #48	; 0x30
   28ac0:	sub	r3, r3, r1, lsl #1
   28ac4:	add	r3, r3, #48	; 0x30
   28ac8:	strb	r3, [lr, #5]
   28acc:	strb	r2, [lr, #4]
   28ad0:	mov	r3, #0
   28ad4:	strb	r3, [r0]
   28ad8:	add	r0, sp, #60	; 0x3c
   28adc:	bl	3e774 <__assert_fail@plt+0x2c180>
   28ae0:	subs	r6, r0, #0
   28ae4:	beq	28678 <__assert_fail@plt+0x16084>
   28ae8:	ldr	r2, [sp, #36]	; 0x24
   28aec:	mvn	r3, #0
   28af0:	str	r2, [sp, #96]	; 0x60
   28af4:	ldr	r2, [sp]
   28af8:	add	r1, sp, #92	; 0x5c
   28afc:	str	r2, [sp, #100]	; 0x64
   28b00:	ldr	r2, [sp, #16]
   28b04:	str	r3, [sp, #116]	; 0x74
   28b08:	str	r2, [sp, #104]	; 0x68
   28b0c:	ldr	r2, [sp, #24]
   28b10:	str	r9, [sp, #92]	; 0x5c
   28b14:	str	r2, [sp, #108]	; 0x6c
   28b18:	ldr	r2, [sp, #40]	; 0x28
   28b1c:	str	r2, [sp, #112]	; 0x70
   28b20:	ldr	r2, [sp, #32]
   28b24:	str	r2, [sp, #124]	; 0x7c
   28b28:	bl	3ea70 <__assert_fail@plt+0x2c47c>
   28b2c:	add	r1, sp, #92	; 0x5c
   28b30:	mov	r5, r0
   28b34:	add	r0, sp, #180	; 0xb4
   28b38:	bl	253c0 <__assert_fail@plt+0x12dcc>
   28b3c:	mov	r4, r0
   28b40:	mov	r0, r6
   28b44:	bl	3e9c0 <__assert_fail@plt+0x2c3cc>
   28b48:	cmp	r4, #0
   28b4c:	beq	28678 <__assert_fail@plt+0x16084>
   28b50:	ldr	r3, [sp, #544]	; 0x220
   28b54:	cmp	r3, #0
   28b58:	beq	28cc0 <__assert_fail@plt+0x166cc>
   28b5c:	ldr	r1, [sp, #540]	; 0x21c
   28b60:	cmp	r1, #0
   28b64:	bne	28cc0 <__assert_fail@plt+0x166cc>
   28b68:	add	r3, sp, #392	; 0x188
   28b6c:	ldrd	r4, [r3]
   28b70:	cmp	r4, #1
   28b74:	sbcs	r3, r5, #0
   28b78:	blt	28f30 <__assert_fail@plt+0x1693c>
   28b7c:	ldr	ip, [sp, #116]	; 0x74
   28b80:	ldr	r0, [sp, #400]	; 0x190
   28b84:	mov	r3, r1
   28b88:	subs	r2, ip, r0
   28b8c:	movne	r2, #1
   28b90:	add	r1, pc, #944	; 0x3b0
   28b94:	ldrd	r0, [r1]
   28b98:	subs	r2, r4, r2
   28b9c:	sbc	r3, r5, r3
   28ba0:	cmp	r0, r2
   28ba4:	sbcs	r3, r1, r3
   28ba8:	blt	28fec <__assert_fail@plt+0x169f8>
   28bac:	cmp	r4, #1
   28bb0:	sbcs	r3, r5, #0
   28bb4:	blt	29560 <__assert_fail@plt+0x16f6c>
   28bb8:	ldr	r1, [sp, #116]	; 0x74
   28bbc:	ldr	ip, [sp, #400]	; 0x190
   28bc0:	cmp	r1, ip
   28bc4:	movne	r2, #1
   28bc8:	movne	r3, #0
   28bcc:	beq	2957c <__assert_fail@plt+0x16f88>
   28bd0:	subs	r4, r4, r2
   28bd4:	sbc	r5, r5, r3
   28bd8:	lsl	r2, r4, #3
   28bdc:	lsl	r0, r5, #3
   28be0:	orr	r3, r0, r4, lsr #29
   28be4:	subs	r4, r2, r4
   28be8:	sbc	r5, r3, r5
   28bec:	cmp	r4, #0
   28bf0:	sbcs	r3, r5, #0
   28bf4:	sub	ip, ip, r1
   28bf8:	ldr	r2, [pc, #908]	; 28f8c <__assert_fail@plt+0x16998>
   28bfc:	add	r3, ip, #7
   28c00:	blt	29508 <__assert_fail@plt+0x16f14>
   28c04:	smull	r1, r2, r2, r3
   28c08:	add	r2, r2, r3
   28c0c:	asr	lr, r3, #31
   28c10:	rsb	lr, lr, r2, asr #2
   28c14:	rsb	r2, lr, lr, lsl #3
   28c18:	subs	lr, r3, r2
   28c1c:	bmi	28c6c <__assert_fail@plt+0x16678>
   28c20:	mvn	r0, #0
   28c24:	subs	r0, r0, r4
   28c28:	mvn	r1, #-2147483648	; 0x80000000
   28c2c:	sbc	r1, r1, r5
   28c30:	asr	r3, lr, #31
   28c34:	cmp	r0, lr
   28c38:	sbcs	r3, r1, r3
   28c3c:	movlt	r3, #1
   28c40:	movge	r3, #0
   28c44:	cmp	r3, #0
   28c48:	bne	28fec <__assert_fail@plt+0x169f8>
   28c4c:	ldr	r3, [pc, #824]	; 28f8c <__assert_fail@plt+0x16998>
   28c50:	add	ip, ip, #7
   28c54:	smull	r2, r3, r3, ip
   28c58:	add	r3, r3, ip
   28c5c:	asr	r2, ip, #31
   28c60:	rsb	lr, r2, r3, asr #2
   28c64:	rsb	r2, lr, lr, lsl #3
   28c68:	sub	lr, ip, r2
   28c6c:	ldr	ip, [sp, #104]	; 0x68
   28c70:	adds	r2, r4, lr
   28c74:	adc	r3, r5, lr, asr #31
   28c78:	cmp	ip, #0
   28c7c:	blt	28f90 <__assert_fail@plt+0x1699c>
   28c80:	cmp	r2, #0
   28c84:	sbcs	r1, r3, #0
   28c88:	blt	2902c <__assert_fail@plt+0x16a38>
   28c8c:	mvn	r0, #-2147483648	; 0x80000000
   28c90:	sub	r0, r0, ip
   28c94:	cmp	r0, r2
   28c98:	asr	r1, r0, #31
   28c9c:	sbcs	r1, r1, r3
   28ca0:	movlt	r1, #1
   28ca4:	movge	r1, #0
   28ca8:	cmp	r1, #0
   28cac:	beq	28fc4 <__assert_fail@plt+0x169d0>
   28cb0:	add	r2, ip, r2
   28cb4:	str	r2, [sp, #104]	; 0x68
   28cb8:	mov	r4, r8
   28cbc:	b	28678 <__assert_fail@plt+0x16084>
   28cc0:	add	r3, sp, #480	; 0x1e0
   28cc4:	add	ip, sp, #496	; 0x1f0
   28cc8:	ldrd	r0, [r3]
   28ccc:	add	r3, sp, #488	; 0x1e8
   28cd0:	ldrd	r6, [ip]
   28cd4:	ldrd	r2, [r3]
   28cd8:	strd	r6, [sp, #24]
   28cdc:	strd	r2, [sp, #16]
   28ce0:	orr	r2, r2, r0
   28ce4:	orr	r3, r3, r1
   28ce8:	orr	r6, r6, r2
   28cec:	orr	r7, r7, r3
   28cf0:	mov	r2, r6
   28cf4:	mov	r3, r7
   28cf8:	orrs	r3, r2, r3
   28cfc:	beq	290ec <__assert_fail@plt+0x16af8>
   28d00:	cmp	r0, #0
   28d04:	sbcs	r3, r1, #0
   28d08:	ldr	ip, [sp, #112]	; 0x70
   28d0c:	blt	29074 <__assert_fail@plt+0x16a80>
   28d10:	cmp	ip, #0
   28d14:	blt	29058 <__assert_fail@plt+0x16a64>
   28d18:	mvn	r2, #-2147483648	; 0x80000000
   28d1c:	mov	r3, #0
   28d20:	cmp	r2, r0
   28d24:	sbcs	lr, r3, r1
   28d28:	blt	28fec <__assert_fail@plt+0x169f8>
   28d2c:	subs	r2, r2, r0
   28d30:	sbc	r3, r3, r1
   28d34:	asr	r5, ip, #31
   28d38:	cmp	r2, ip
   28d3c:	sbcs	r3, r3, r5
   28d40:	mov	r4, ip
   28d44:	movlt	r4, #1
   28d48:	movge	r4, #0
   28d4c:	cmp	r4, #0
   28d50:	bne	28fec <__assert_fail@plt+0x169f8>
   28d54:	ldrd	r2, [sp, #16]
   28d58:	cmp	r2, #0
   28d5c:	sbcs	r3, r3, #0
   28d60:	add	r3, ip, r0
   28d64:	str	r3, [sp, #40]	; 0x28
   28d68:	ldr	ip, [sp, #108]	; 0x6c
   28d6c:	blt	28f00 <__assert_fail@plt+0x1690c>
   28d70:	cmp	ip, #0
   28d74:	blt	28ee0 <__assert_fail@plt+0x168ec>
   28d78:	ldrd	r0, [sp, #16]
   28d7c:	mvn	r2, #-2147483648	; 0x80000000
   28d80:	mov	r3, #0
   28d84:	cmp	r2, r0
   28d88:	sbcs	lr, r3, r1
   28d8c:	blt	28678 <__assert_fail@plt+0x16084>
   28d90:	subs	r0, r2, r0
   28d94:	sbc	r1, r3, r1
   28d98:	mov	r2, r0
   28d9c:	mov	r3, r1
   28da0:	cmp	r2, ip
   28da4:	asr	r1, ip, #31
   28da8:	sbcs	r3, r3, r1
   28dac:	movlt	lr, #1
   28db0:	movge	lr, #0
   28db4:	cmp	lr, #0
   28db8:	bne	28678 <__assert_fail@plt+0x16084>
   28dbc:	ldrd	r2, [sp, #24]
   28dc0:	cmp	r2, #0
   28dc4:	sbcs	r3, r3, #0
   28dc8:	ldr	r3, [sp, #16]
   28dcc:	add	r5, ip, r3
   28dd0:	ldr	ip, [sp, #104]	; 0x68
   28dd4:	blt	28eb0 <__assert_fail@plt+0x168bc>
   28dd8:	cmp	ip, #0
   28ddc:	blt	28e90 <__assert_fail@plt+0x1689c>
   28de0:	ldrd	r0, [sp, #24]
   28de4:	mvn	r2, #-2147483648	; 0x80000000
   28de8:	mov	r3, #0
   28dec:	cmp	r2, r0
   28df0:	sbcs	r4, r3, r1
   28df4:	blt	28e24 <__assert_fail@plt+0x16830>
   28df8:	subs	r0, r2, r0
   28dfc:	sbc	r1, r3, r1
   28e00:	mov	r2, r0
   28e04:	mov	r3, r1
   28e08:	cmp	r2, ip
   28e0c:	asr	r1, ip, #31
   28e10:	sbcs	r3, r3, r1
   28e14:	movlt	r4, #1
   28e18:	movge	r4, #0
   28e1c:	cmp	r4, #0
   28e20:	beq	290a0 <__assert_fail@plt+0x16aac>
   28e24:	mov	r4, lr
   28e28:	b	28678 <__assert_fail@plt+0x16084>
   28e2c:	cmp	r3, #0
   28e30:	cmpeq	r2, #23
   28e34:	bhi	288e8 <__assert_fail@plt+0x162f4>
   28e38:	str	r2, [sp]
   28e3c:	ldr	r2, [sp, #464]	; 0x1d0
   28e40:	ldr	r3, [sp, #472]	; 0x1d8
   28e44:	ldr	r1, [sp]
   28e48:	str	r2, [sp, #36]	; 0x24
   28e4c:	str	r1, [sp, #100]	; 0x64
   28e50:	str	r2, [sp, #96]	; 0x60
   28e54:	str	r3, [sp, #92]	; 0x5c
   28e58:	mov	r9, r3
   28e5c:	b	28938 <__assert_fail@plt+0x16344>
   28e60:	mov	r3, #12
   28e64:	str	r3, [sp]
   28e68:	b	28e3c <__assert_fail@plt+0x16848>
   28e6c:	subs	r0, r2, #1
   28e70:	sbc	r1, r3, #0
   28e74:	cmp	r1, #0
   28e78:	cmpeq	r0, #10
   28e7c:	bls	28e38 <__assert_fail@plt+0x16844>
   28e80:	cmp	r3, #0
   28e84:	cmpeq	r2, #12
   28e88:	bne	288e8 <__assert_fail@plt+0x162f4>
   28e8c:	b	28e3c <__assert_fail@plt+0x16848>
   28e90:	ldrd	r2, [sp, #24]
   28e94:	adds	r2, r2, ip
   28e98:	adc	r3, r3, ip, asr #31
   28e9c:	cmp	r2, #-2147483648	; 0x80000000
   28ea0:	sbcs	r3, r3, #0
   28ea4:	movge	r4, #1
   28ea8:	movlt	r4, #0
   28eac:	b	28e1c <__assert_fail@plt+0x16828>
   28eb0:	ldrd	r6, [sp, #24]
   28eb4:	mov	r2, #-2147483648	; 0x80000000
   28eb8:	mvn	r3, #0
   28ebc:	subs	r6, r2, r6
   28ec0:	sbc	r7, r3, r7
   28ec4:	asr	r1, ip, #31
   28ec8:	mov	r3, r7
   28ecc:	cmp	ip, r6
   28ed0:	sbcs	r3, r1, r3
   28ed4:	movlt	r4, #1
   28ed8:	movge	r4, #0
   28edc:	b	28e1c <__assert_fail@plt+0x16828>
   28ee0:	ldrd	r2, [sp, #16]
   28ee4:	adds	r2, r2, ip
   28ee8:	adc	r3, r3, ip, asr #31
   28eec:	cmp	r2, #-2147483648	; 0x80000000
   28ef0:	sbcs	r3, r3, #0
   28ef4:	movge	lr, #1
   28ef8:	movlt	lr, #0
   28efc:	b	28db4 <__assert_fail@plt+0x167c0>
   28f00:	ldrd	r6, [sp, #16]
   28f04:	mov	r2, #-2147483648	; 0x80000000
   28f08:	mvn	r3, #0
   28f0c:	subs	r6, r2, r6
   28f10:	sbc	r7, r3, r7
   28f14:	asr	r1, ip, #31
   28f18:	mov	r3, r7
   28f1c:	cmp	ip, r6
   28f20:	sbcs	r3, r1, r3
   28f24:	movlt	lr, #1
   28f28:	movge	lr, #0
   28f2c:	b	28db4 <__assert_fail@plt+0x167c0>
   28f30:	orrs	r3, r4, r5
   28f34:	bne	28ff4 <__assert_fail@plt+0x16a00>
   28f38:	mov	r2, r4
   28f3c:	mov	r3, r5
   28f40:	b	28b90 <__assert_fail@plt+0x1659c>
   28f44:	nop			; (mov r0, r0)
   28f48:	stmdbmi	r4!, {r0, r3, r6, r9, ip, pc}
   28f4c:	subne	r2, r9, #-1845493760	; 0x92000000
   28f50:	addeq	r0, r0, pc, lsl r0
   28f54:	andeq	r5, r4, r0, lsl r6
   28f58:			; <UNDEFINED> instruction: 0x00044ab4
   28f5c:	andeq	r0, r0, ip, ror #14
   28f60:	svcvc	0x008958ff
   28f64:	mcrvc	3, 1, r6, cr5, cr15, {7}
   28f68:	andeq	r0, r0, sp, lsl #2
   28f6c:	andhi	r0, r0, fp, ror #14
   28f70:			; <UNDEFINED> instruction: 0xfffff895
   28f74:			; <UNDEFINED> instruction: 0xfffff894
   28f78:			; <UNDEFINED> instruction: 0x91a2b3c5
   28f7c:	andeq	r5, r4, r8, lsl #12
   28f80:	stmhi	r8, {r0, r3, r7, fp, pc}
   28f84:	blne	13c9660 <stdout@@GLIBC_2.4+0x137210c>
   28f88:	strbtvs	r6, [r6], -r7, ror #12
   28f8c:	subls	r2, r9, #-1828716544	; 0x93000000
   28f90:	rsb	r0, ip, #-2147483648	; 0x80000000
   28f94:	cmp	r2, r0
   28f98:	asr	r1, r0, #31
   28f9c:	sbcs	r1, r3, r1
   28fa0:	blt	28cb0 <__assert_fail@plt+0x166bc>
   28fa4:	cmp	r2, #0
   28fa8:	sbcs	r1, r3, #0
   28fac:	blt	28fc4 <__assert_fail@plt+0x169d0>
   28fb0:	adds	r0, r2, ip
   28fb4:	adc	r1, r3, ip, asr #31
   28fb8:	cmp	r0, #-2147483648	; 0x80000000
   28fbc:	sbcs	r1, r1, #0
   28fc0:	bge	28cb0 <__assert_fail@plt+0x166bc>
   28fc4:	add	r2, ip, r2
   28fc8:	mvn	r3, #0
   28fcc:	add	r1, sp, #92	; 0x5c
   28fd0:	mov	r0, sl
   28fd4:	str	r2, [sp, #104]	; 0x68
   28fd8:	str	r3, [sp, #124]	; 0x7c
   28fdc:	bl	3ea70 <__assert_fail@plt+0x2c47c>
   28fe0:	cmn	r0, #1
   28fe4:	mov	r5, r0
   28fe8:	bne	28cc0 <__assert_fail@plt+0x166cc>
   28fec:	mov	r4, r8
   28ff0:	b	28678 <__assert_fail@plt+0x16084>
   28ff4:	mvn	r3, #0
   28ff8:	mvn	r2, #0
   28ffc:	cmp	r5, r3
   29000:	cmpeq	r4, r2
   29004:	beq	28bac <__assert_fail@plt+0x165b8>
   29008:	mov	r3, r5
   2900c:	mov	r2, r4
   29010:	mov	r0, #0
   29014:	mov	r1, #-2147483648	; 0x80000000
   29018:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   2901c:	cmp	r0, #7
   29020:	sbcs	r3, r1, #0
   29024:	blt	28fec <__assert_fail@plt+0x169f8>
   29028:	b	28bac <__assert_fail@plt+0x165b8>
   2902c:	mov	r0, #-2147483648	; 0x80000000
   29030:	subs	r0, r0, r2
   29034:	mvn	r1, #0
   29038:	sbc	r1, r1, r3
   2903c:	asr	r5, ip, #31
   29040:	cmp	ip, r0
   29044:	sbcs	r1, r5, r1
   29048:	mov	r4, ip
   2904c:	movlt	r1, #1
   29050:	movge	r1, #0
   29054:	b	28ca8 <__assert_fail@plt+0x166b4>
   29058:	adds	r2, r0, ip
   2905c:	adc	r3, r1, ip, asr #31
   29060:	cmp	r2, #-2147483648	; 0x80000000
   29064:	sbcs	r3, r3, #0
   29068:	movge	r4, #1
   2906c:	movlt	r4, #0
   29070:	b	28d4c <__assert_fail@plt+0x16758>
   29074:	mov	r2, #-2147483648	; 0x80000000
   29078:	subs	r2, r2, r0
   2907c:	mvn	r3, #0
   29080:	sbc	r3, r3, r1
   29084:	asr	r5, ip, #31
   29088:	cmp	ip, r2
   2908c:	sbcs	r3, r5, r3
   29090:	mov	r4, ip
   29094:	movlt	r4, #1
   29098:	movge	r4, #0
   2909c:	b	28d4c <__assert_fail@plt+0x16758>
   290a0:	ldr	r3, [sp, #24]
   290a4:	add	r1, sp, #92	; 0x5c
   290a8:	add	ip, ip, r3
   290ac:	ldr	r3, [sp, #40]	; 0x28
   290b0:	mov	r0, sl
   290b4:	str	r3, [sp, #112]	; 0x70
   290b8:	ldr	r3, [sp]
   290bc:	str	r5, [sp, #108]	; 0x6c
   290c0:	str	r3, [sp, #100]	; 0x64
   290c4:	ldr	r3, [sp, #36]	; 0x24
   290c8:	str	ip, [sp, #104]	; 0x68
   290cc:	str	r3, [sp, #96]	; 0x60
   290d0:	ldr	r3, [sp, #32]
   290d4:	str	r9, [sp, #92]	; 0x5c
   290d8:	str	r3, [sp, #124]	; 0x7c
   290dc:	bl	3ea70 <__assert_fail@plt+0x2c47c>
   290e0:	cmn	r0, #1
   290e4:	mov	r5, r0
   290e8:	beq	28678 <__assert_fail@plt+0x16084>
   290ec:	ldr	r3, [sp, #560]	; 0x230
   290f0:	cmp	r3, #0
   290f4:	beq	29150 <__assert_fail@plt+0x16b5c>
   290f8:	ldr	r2, [sp, #128]	; 0x80
   290fc:	ldr	r1, [sp, #408]	; 0x198
   29100:	asr	r3, r2, #31
   29104:	subs	r2, r1, r2
   29108:	rsc	r3, r3, r1, asr #31
   2910c:	mvn	r1, r5
   29110:	lsr	r1, r1, #31
   29114:	cmp	r1, r3, lsr #31
   29118:	beq	294e0 <__assert_fail@plt+0x16eec>
   2911c:	asr	r1, r5, #31
   29120:	cmp	r5, r2
   29124:	sbcs	ip, r1, r3
   29128:	bge	294c4 <__assert_fail@plt+0x16ed0>
   2912c:	subs	r0, r2, r5
   29130:	sbc	r1, r3, r1
   29134:	cmp	r0, #-2147483647	; 0x80000001
   29138:	sbcs	r1, r1, #0
   2913c:	movge	r1, #1
   29140:	movlt	r1, #0
   29144:	cmp	r1, #0
   29148:	bne	28fec <__assert_fail@plt+0x169f8>
   2914c:	sub	r5, r5, r2
   29150:	ldr	r3, [sp, #528]	; 0x210
   29154:	ldr	r1, [sp, #476]	; 0x1dc
   29158:	mov	r2, r3
   2915c:	adds	r6, r2, r1
   29160:	asr	r3, r3, #31
   29164:	adc	r7, r3, r1, asr #31
   29168:	mov	r0, r6
   2916c:	mov	r1, r7
   29170:	add	r3, pc, #976	; 0x3d0
   29174:	ldrd	r2, [r3]
   29178:	strd	r6, [sp]
   2917c:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   29180:	add	r7, pc, #960	; 0x3c0
   29184:	ldrd	r6, [r7]
   29188:	adds	r0, r2, r6
   2918c:	adc	r1, r3, r7
   29190:	mov	r2, r6
   29194:	mov	r3, r7
   29198:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   2919c:	mov	r0, r2
   291a0:	mov	r1, r3
   291a4:	mov	r2, r6
   291a8:	mov	r3, r7
   291ac:	ldrd	r6, [sp]
   291b0:	strd	r0, [sp, #16]
   291b4:	subs	r0, r6, r0
   291b8:	sbc	r1, r7, r1
   291bc:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   291c0:	add	r3, sp, #504	; 0x1f8
   291c4:	ldrd	r6, [r3]
   291c8:	cmp	r6, #0
   291cc:	sbcs	r3, r7, #0
   291d0:	mov	r9, r0
   291d4:	blt	2948c <__assert_fail@plt+0x16e98>
   291d8:	add	r3, pc, #880	; 0x370
   291dc:	ldrd	r2, [r3]
   291e0:	cmp	r2, r6
   291e4:	sbcs	r3, r3, r7
   291e8:	blt	28fec <__assert_fail@plt+0x169f8>
   291ec:	mov	r1, #3600	; 0xe10
   291f0:	umull	r2, r3, r6, r1
   291f4:	mla	r3, r1, r7, r3
   291f8:	cmp	r2, #0
   291fc:	sbcs	r1, r3, #0
   29200:	blt	29400 <__assert_fail@plt+0x16e0c>
   29204:	cmp	r5, #0
   29208:	movlt	r0, r5
   2920c:	asrlt	r1, r0, #31
   29210:	blt	29244 <__assert_fail@plt+0x16c50>
   29214:	mvn	r6, #0
   29218:	subs	r6, r6, r2
   2921c:	mvn	r7, #-2147483648	; 0x80000000
   29220:	sbc	r7, r7, r3
   29224:	asr	r1, r5, #31
   29228:	cmp	r6, r5
   2922c:	sbcs	ip, r7, r1
   29230:	mov	r0, r5
   29234:	movlt	ip, #1
   29238:	movge	ip, #0
   2923c:	cmp	ip, #0
   29240:	bne	28fec <__assert_fail@plt+0x169f8>
   29244:	add	ip, sp, #512	; 0x200
   29248:	adds	r4, r0, r2
   2924c:	ldrd	r6, [ip]
   29250:	adc	r5, r1, r3
   29254:	cmp	r6, #0
   29258:	sbcs	r3, r7, #0
   2925c:	blt	293c8 <__assert_fail@plt+0x16dd4>
   29260:	add	r3, pc, #752	; 0x2f0
   29264:	ldrd	r2, [r3]
   29268:	cmp	r2, r6
   2926c:	sbcs	r3, r3, r7
   29270:	blt	28fec <__assert_fail@plt+0x169f8>
   29274:	mov	r3, #60	; 0x3c
   29278:	umull	r0, r1, r6, r3
   2927c:	mla	r1, r3, r7, r1
   29280:	cmp	r0, #0
   29284:	sbcs	r3, r1, #0
   29288:	blt	293a4 <__assert_fail@plt+0x16db0>
   2928c:	mov	r3, r5
   29290:	cmp	r4, #0
   29294:	sbcs	r3, r3, #0
   29298:	blt	292c4 <__assert_fail@plt+0x16cd0>
   2929c:	mvn	r2, #0
   292a0:	subs	r2, r2, r0
   292a4:	mvn	r3, #-2147483648	; 0x80000000
   292a8:	sbc	r3, r3, r1
   292ac:	cmp	r2, r4
   292b0:	sbcs	r3, r3, r5
   292b4:	movlt	r3, #1
   292b8:	movge	r3, #0
   292bc:	cmp	r3, #0
   292c0:	bne	28fec <__assert_fail@plt+0x169f8>
   292c4:	add	r3, sp, #520	; 0x208
   292c8:	adds	r6, r4, r0
   292cc:	ldrd	r2, [r3]
   292d0:	adc	r7, r5, r1
   292d4:	mov	r0, r6
   292d8:	cmp	r2, #0
   292dc:	sbcs	ip, r3, #0
   292e0:	mov	r1, r7
   292e4:	blt	29380 <__assert_fail@plt+0x16d8c>
   292e8:	cmp	r6, #0
   292ec:	sbcs	ip, r7, #0
   292f0:	blt	2931c <__assert_fail@plt+0x16d28>
   292f4:	mvn	r6, #0
   292f8:	subs	r6, r6, r2
   292fc:	mvn	r7, #-2147483648	; 0x80000000
   29300:	sbc	r7, r7, r3
   29304:	cmp	r6, r0
   29308:	sbcs	ip, r7, r1
   2930c:	movlt	ip, #1
   29310:	movge	ip, #0
   29314:	cmp	ip, #0
   29318:	bne	28fec <__assert_fail@plt+0x169f8>
   2931c:	adds	r2, r2, r0
   29320:	adc	r3, r3, r1
   29324:	cmp	r9, #0
   29328:	blt	29454 <__assert_fail@plt+0x16e60>
   2932c:	cmp	r2, #0
   29330:	sbcs	r1, r3, #0
   29334:	blt	2942c <__assert_fail@plt+0x16e38>
   29338:	rsb	r0, r9, #2130706432	; 0x7f000000
   2933c:	add	r0, r0, #16711680	; 0xff0000
   29340:	add	r0, r0, #65280	; 0xff00
   29344:	add	r0, r0, #255	; 0xff
   29348:	cmp	r0, r2
   2934c:	asr	r1, r0, #31
   29350:	sbcs	r1, r1, r3
   29354:	movlt	r1, #1
   29358:	movge	r1, #0
   2935c:	cmp	r1, #0
   29360:	bne	28fec <__assert_fail@plt+0x169f8>
   29364:	ldr	r3, [sp, #12]
   29368:	add	r2, r2, r9
   2936c:	mov	r4, #1
   29370:	str	r2, [r3]
   29374:	ldr	r2, [sp, #16]
   29378:	str	r2, [r3, #4]
   2937c:	b	28678 <__assert_fail@plt+0x16084>
   29380:	mov	r6, #0
   29384:	subs	r6, r6, r2
   29388:	mov	r7, #-2147483648	; 0x80000000
   2938c:	sbc	r7, r7, r3
   29390:	cmp	r0, r6
   29394:	sbcs	ip, r1, r7
   29398:	movlt	ip, #1
   2939c:	movge	ip, #0
   293a0:	b	29314 <__assert_fail@plt+0x16d20>
   293a4:	mov	r2, #0
   293a8:	subs	r2, r2, r0
   293ac:	mov	r3, #-2147483648	; 0x80000000
   293b0:	sbc	r3, r3, r1
   293b4:	cmp	r4, r2
   293b8:	sbcs	r3, r5, r3
   293bc:	movlt	r3, #1
   293c0:	movge	r3, #0
   293c4:	b	292bc <__assert_fail@plt+0x16cc8>
   293c8:	mvn	r3, #0
   293cc:	mvn	r2, #0
   293d0:	cmp	r7, r3
   293d4:	cmpeq	r6, r2
   293d8:	beq	29274 <__assert_fail@plt+0x16c80>
   293dc:	mov	r3, r7
   293e0:	mov	r2, r6
   293e4:	mov	r0, #0
   293e8:	mov	r1, #-2147483648	; 0x80000000
   293ec:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   293f0:	cmp	r0, #60	; 0x3c
   293f4:	sbcs	r3, r1, #0
   293f8:	blt	28fec <__assert_fail@plt+0x169f8>
   293fc:	b	29274 <__assert_fail@plt+0x16c80>
   29400:	mov	r6, #0
   29404:	subs	r6, r6, r2
   29408:	mov	r7, #-2147483648	; 0x80000000
   2940c:	sbc	r7, r7, r3
   29410:	asr	r1, r5, #31
   29414:	cmp	r5, r6
   29418:	sbcs	ip, r1, r7
   2941c:	mov	r0, r5
   29420:	movlt	ip, #1
   29424:	movge	ip, #0
   29428:	b	2923c <__assert_fail@plt+0x16c48>
   2942c:	mov	r0, #-2147483648	; 0x80000000
   29430:	subs	r0, r0, r2
   29434:	mvn	r1, #0
   29438:	sbc	r1, r1, r3
   2943c:	asr	r7, r9, #31
   29440:	cmp	r9, r0
   29444:	sbcs	r1, r7, r1
   29448:	movlt	r1, #1
   2944c:	movge	r1, #0
   29450:	b	2935c <__assert_fail@plt+0x16d68>
   29454:	rsb	r0, r9, #-2147483648	; 0x80000000
   29458:	cmp	r2, r0
   2945c:	asr	r1, r0, #31
   29460:	sbcs	r1, r3, r1
   29464:	blt	28fec <__assert_fail@plt+0x169f8>
   29468:	cmp	r2, #0
   2946c:	sbcs	r1, r3, #0
   29470:	blt	29364 <__assert_fail@plt+0x16d70>
   29474:	adds	r0, r2, r9
   29478:	adc	r1, r3, r9, asr #31
   2947c:	cmp	r0, #-2147483648	; 0x80000000
   29480:	sbcs	r1, r1, #0
   29484:	bge	28fec <__assert_fail@plt+0x169f8>
   29488:	b	29364 <__assert_fail@plt+0x16d70>
   2948c:	mvn	r3, #0
   29490:	mvn	r2, #0
   29494:	cmp	r7, r3
   29498:	cmpeq	r6, r2
   2949c:	beq	291ec <__assert_fail@plt+0x16bf8>
   294a0:	mov	r3, r7
   294a4:	mov	r2, r6
   294a8:	mov	r0, #0
   294ac:	mov	r1, #-2147483648	; 0x80000000
   294b0:	bl	3ffac <__assert_fail@plt+0x2d9b8>
   294b4:	cmp	r0, #3600	; 0xe10
   294b8:	sbcs	r3, r1, #0
   294bc:	blt	28fec <__assert_fail@plt+0x169f8>
   294c0:	b	291ec <__assert_fail@plt+0x16bf8>
   294c4:	subs	r0, r5, r2
   294c8:	sbc	r1, r1, r3
   294cc:	cmp	r0, #-2147483648	; 0x80000000
   294d0:	sbcs	r1, r1, #0
   294d4:	movge	r1, #1
   294d8:	movlt	r1, #0
   294dc:	b	29144 <__assert_fail@plt+0x16b50>
   294e0:	cmp	r5, #0
   294e4:	blt	29584 <__assert_fail@plt+0x16f90>
   294e8:	subs	r6, r2, #-2147483647	; 0x80000001
   294ec:	adc	r7, r3, #0
   294f0:	asr	r1, r5, #31
   294f4:	cmp	r6, r5
   294f8:	sbcs	r1, r7, r1
   294fc:	movlt	r1, #1
   29500:	movge	r1, #0
   29504:	b	29144 <__assert_fail@plt+0x16b50>
   29508:	smull	lr, r2, r2, r3
   2950c:	add	lr, r2, r3
   29510:	asr	r2, r3, #31
   29514:	rsb	r2, r2, lr, asr #2
   29518:	mov	r0, #0
   2951c:	rsb	r2, r2, r2, lsl #3
   29520:	sub	r2, r3, r2
   29524:	subs	r0, r0, r4
   29528:	mov	r1, #-2147483648	; 0x80000000
   2952c:	sbc	r1, r1, r5
   29530:	asr	r3, r2, #31
   29534:	cmp	r2, r0
   29538:	sbcs	r3, r3, r1
   2953c:	movlt	r3, #1
   29540:	movge	r3, #0
   29544:	b	28c44 <__assert_fail@plt+0x16650>
   29548:	blcc	fe6dbd50 <stdout@@GLIBC_2.4+0xfe6847fc>
   2954c:	andeq	r0, r0, r0
   29550:	mcrrcc	14, 6, r5, sp, cr15
   29554:	andeq	r1, r9, fp, lsr #20
   29558:	eorcs	r2, r2, #536870914	; 0x20000002
   2955c:	eoreq	r2, r2, #536870914	; 0x20000002
   29560:	ldr	ip, [sp, #116]	; 0x74
   29564:	ldr	r0, [sp, #400]	; 0x190
   29568:	mov	r1, ip
   2956c:	mov	r2, #0
   29570:	mov	r3, #0
   29574:	mov	ip, r0
   29578:	b	28bd0 <__assert_fail@plt+0x165dc>
   2957c:	mov	r0, ip
   29580:	b	29568 <__assert_fail@plt+0x16f74>
   29584:	add	r0, r5, #-2147483648	; 0x80000000
   29588:	cmp	r0, r2
   2958c:	asr	r1, r0, #31
   29590:	sbcs	r1, r1, r3
   29594:	movlt	r1, #1
   29598:	movge	r1, #0
   2959c:	b	29144 <__assert_fail@plt+0x16b50>
   295a0:	push	{r4, r5, r6, r7, r8, lr}
   295a4:	mov	r5, r0
   295a8:	ldr	r0, [pc, #64]	; 295f0 <__assert_fail@plt+0x16ffc>
   295ac:	mov	r6, r1
   295b0:	mov	r7, r2
   295b4:	bl	12228 <getenv@plt>
   295b8:	bl	3e774 <__assert_fail@plt+0x2c180>
   295bc:	subs	r4, r0, #0
   295c0:	moveq	r5, r4
   295c4:	beq	295e8 <__assert_fail@plt+0x16ff4>
   295c8:	mov	r0, r5
   295cc:	mov	r2, r7
   295d0:	mov	r1, r6
   295d4:	mov	r3, r4
   295d8:	bl	282d4 <__assert_fail@plt+0x15ce0>
   295dc:	mov	r5, r0
   295e0:	mov	r0, r4
   295e4:	bl	3e9c0 <__assert_fail@plt+0x2c3cc>
   295e8:	mov	r0, r5
   295ec:	pop	{r4, r5, r6, r7, r8, pc}
   295f0:	andeq	r5, r4, r8, lsl r6
   295f4:	push	{r4, r5, r6, lr}
   295f8:	subs	r4, r0, #0
   295fc:	beq	29670 <__assert_fail@plt+0x1707c>
   29600:	mov	r1, #47	; 0x2f
   29604:	bl	12468 <strrchr@plt>
   29608:	subs	r5, r0, #0
   2960c:	beq	2965c <__assert_fail@plt+0x17068>
   29610:	add	r6, r5, #1
   29614:	sub	r3, r6, r4
   29618:	cmp	r3, #6
   2961c:	ble	2965c <__assert_fail@plt+0x17068>
   29620:	mov	r2, #7
   29624:	ldr	r1, [pc, #96]	; 2968c <__assert_fail@plt+0x17098>
   29628:	sub	r0, r5, #6
   2962c:	bl	12594 <strncmp@plt>
   29630:	cmp	r0, #0
   29634:	bne	2965c <__assert_fail@plt+0x17068>
   29638:	mov	r2, #3
   2963c:	ldr	r1, [pc, #76]	; 29690 <__assert_fail@plt+0x1709c>
   29640:	mov	r0, r6
   29644:	bl	12594 <strncmp@plt>
   29648:	cmp	r0, #0
   2964c:	movne	r4, r6
   29650:	ldreq	r3, [pc, #60]	; 29694 <__assert_fail@plt+0x170a0>
   29654:	addeq	r4, r5, #4
   29658:	streq	r4, [r3]
   2965c:	ldr	r2, [pc, #52]	; 29698 <__assert_fail@plt+0x170a4>
   29660:	ldr	r3, [pc, #52]	; 2969c <__assert_fail@plt+0x170a8>
   29664:	str	r4, [r2]
   29668:	str	r4, [r3]
   2966c:	pop	{r4, r5, r6, pc}
   29670:	ldr	r3, [pc, #40]	; 296a0 <__assert_fail@plt+0x170ac>
   29674:	mov	r2, #55	; 0x37
   29678:	mov	r1, #1
   2967c:	ldr	r3, [r3]
   29680:	ldr	r0, [pc, #28]	; 296a4 <__assert_fail@plt+0x170b0>
   29684:	bl	12168 <fwrite@plt>
   29688:	bl	125a0 <abort@plt>
   2968c:	andeq	r5, r4, ip, lsr #18
   29690:	andeq	r5, r4, r4, lsr r9
   29694:	andeq	r7, r5, r8, lsr r5
   29698:	andeq	r7, r5, r4, lsl #26
   2969c:	andeq	r7, r5, r0, asr #10
   296a0:	andeq	r7, r5, r8, asr #10
   296a4:	strdeq	r5, [r4], -r4
   296a8:	push	{r4, r5, r6, lr}
   296ac:	mov	r2, #48	; 0x30
   296b0:	mov	r4, r1
   296b4:	mov	r1, #0
   296b8:	mov	r5, r0
   296bc:	bl	12378 <memset@plt>
   296c0:	cmp	r4, #10
   296c4:	beq	296d4 <__assert_fail@plt+0x170e0>
   296c8:	str	r4, [r5]
   296cc:	mov	r0, r5
   296d0:	pop	{r4, r5, r6, pc}
   296d4:	bl	125a0 <abort@plt>
   296d8:	push	{r4, r5, r6, lr}
   296dc:	mov	r4, r0
   296e0:	mov	r5, r1
   296e4:	bl	3f3a0 <__assert_fail@plt+0x2cdac>
   296e8:	ldrb	r3, [r0]
   296ec:	bic	r3, r3, #32
   296f0:	cmp	r3, #85	; 0x55
   296f4:	bne	29754 <__assert_fail@plt+0x17160>
   296f8:	ldrb	r3, [r0, #1]
   296fc:	bic	r3, r3, #32
   29700:	cmp	r3, #84	; 0x54
   29704:	bne	29790 <__assert_fail@plt+0x1719c>
   29708:	ldrb	r3, [r0, #2]
   2970c:	bic	r3, r3, #32
   29710:	cmp	r3, #70	; 0x46
   29714:	bne	29790 <__assert_fail@plt+0x1719c>
   29718:	ldrb	r3, [r0, #3]
   2971c:	cmp	r3, #45	; 0x2d
   29720:	bne	29790 <__assert_fail@plt+0x1719c>
   29724:	ldrb	r3, [r0, #4]
   29728:	cmp	r3, #56	; 0x38
   2972c:	bne	29790 <__assert_fail@plt+0x1719c>
   29730:	ldrb	r3, [r0, #5]
   29734:	cmp	r3, #0
   29738:	bne	29790 <__assert_fail@plt+0x1719c>
   2973c:	ldrb	r2, [r4]
   29740:	ldr	r3, [pc, #152]	; 297e0 <__assert_fail@plt+0x171ec>
   29744:	ldr	r0, [pc, #152]	; 297e4 <__assert_fail@plt+0x171f0>
   29748:	cmp	r2, #96	; 0x60
   2974c:	movne	r0, r3
   29750:	pop	{r4, r5, r6, pc}
   29754:	cmp	r3, #71	; 0x47
   29758:	bne	29790 <__assert_fail@plt+0x1719c>
   2975c:	ldrb	r3, [r0, #1]
   29760:	bic	r3, r3, #32
   29764:	cmp	r3, #66	; 0x42
   29768:	bne	29790 <__assert_fail@plt+0x1719c>
   2976c:	ldrb	r3, [r0, #2]
   29770:	cmp	r3, #49	; 0x31
   29774:	bne	29790 <__assert_fail@plt+0x1719c>
   29778:	ldrb	r3, [r0, #3]
   2977c:	cmp	r3, #56	; 0x38
   29780:	bne	29790 <__assert_fail@plt+0x1719c>
   29784:	ldrb	r3, [r0, #4]
   29788:	cmp	r3, #48	; 0x30
   2978c:	beq	297a4 <__assert_fail@plt+0x171b0>
   29790:	ldr	r3, [pc, #80]	; 297e8 <__assert_fail@plt+0x171f4>
   29794:	cmp	r5, #9
   29798:	ldr	r0, [pc, #76]	; 297ec <__assert_fail@plt+0x171f8>
   2979c:	movne	r0, r3
   297a0:	pop	{r4, r5, r6, pc}
   297a4:	ldrb	r3, [r0, #5]
   297a8:	cmp	r3, #51	; 0x33
   297ac:	bne	29790 <__assert_fail@plt+0x1719c>
   297b0:	ldrb	r3, [r0, #6]
   297b4:	cmp	r3, #48	; 0x30
   297b8:	bne	29790 <__assert_fail@plt+0x1719c>
   297bc:	ldrb	r3, [r0, #7]
   297c0:	cmp	r3, #0
   297c4:	bne	29790 <__assert_fail@plt+0x1719c>
   297c8:	ldrb	r2, [r4]
   297cc:	ldr	r3, [pc, #28]	; 297f0 <__assert_fail@plt+0x171fc>
   297d0:	ldr	r0, [pc, #28]	; 297f4 <__assert_fail@plt+0x17200>
   297d4:	cmp	r2, #96	; 0x60
   297d8:	movne	r0, r3
   297dc:	pop	{r4, r5, r6, pc}
   297e0:	muleq	r4, r0, r9
   297e4:	andeq	r5, r4, ip, lsl #19
   297e8:	andeq	r0, r4, ip, ror pc
   297ec:	muleq	r4, ip, r9
   297f0:	muleq	r4, r8, r9
   297f4:	muleq	r4, r4, r9
   297f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   297fc:	sub	sp, sp, #116	; 0x74
   29800:	mov	sl, r0
   29804:	str	r3, [sp, #24]
   29808:	mov	r3, #1
   2980c:	mov	r8, r1
   29810:	str	r2, [sp, #56]	; 0x38
   29814:	str	r3, [sp, #36]	; 0x24
   29818:	bl	12198 <__ctype_get_mb_cur_max@plt>
   2981c:	ldr	r3, [sp, #156]	; 0x9c
   29820:	mov	fp, r8
   29824:	mov	r2, #0
   29828:	lsr	r3, r3, #1
   2982c:	and	r3, r3, #1
   29830:	str	r2, [sp, #68]	; 0x44
   29834:	str	r3, [sp, #28]
   29838:	str	r2, [sp, #40]	; 0x28
   2983c:	str	r2, [sp, #44]	; 0x2c
   29840:	str	r2, [sp, #52]	; 0x34
   29844:	str	r2, [sp, #64]	; 0x40
   29848:	str	r2, [sp, #72]	; 0x48
   2984c:	str	sl, [sp, #32]
   29850:	str	r0, [sp, #76]	; 0x4c
   29854:	ldr	r3, [sp, #152]	; 0x98
   29858:	cmp	r3, #10
   2985c:	ldrls	pc, [pc, r3, lsl #2]
   29860:	b	2aa20 <__assert_fail@plt+0x1842c>
   29864:	muleq	r2, r0, r8
   29868:	andeq	r9, r2, r8, ror fp
   2986c:	muleq	r2, ip, fp
   29870:	andeq	r9, r2, r0, asr #23
   29874:	andeq	r9, r2, ip, ror #25
   29878:	andeq	r9, r2, r0, asr #25
   2987c:	muleq	r2, r8, ip
   29880:	ldrdeq	r9, [r2], -r4
   29884:	andeq	r9, r2, ip, ror #23
   29888:	andeq	r9, r2, ip, ror #23
   2988c:	andeq	r9, r2, ip, ror #23
   29890:	mov	r3, #0
   29894:	mov	r7, r3
   29898:	str	r3, [sp, #28]
   2989c:	ldr	r3, [sp, #44]	; 0x2c
   298a0:	mov	sl, #0
   298a4:	eor	r3, r3, #1
   298a8:	str	r3, [sp, #60]	; 0x3c
   298ac:	ldr	r3, [sp, #24]
   298b0:	cmn	r3, #1
   298b4:	beq	29e18 <__assert_fail@plt+0x17824>
   298b8:	ldr	r3, [sp, #24]
   298bc:	subs	r5, r3, sl
   298c0:	movne	r5, #1
   298c4:	cmp	r5, #0
   298c8:	beq	29e30 <__assert_fail@plt+0x1783c>
   298cc:	ldr	r3, [sp, #152]	; 0x98
   298d0:	ldr	r8, [sp, #44]	; 0x2c
   298d4:	cmp	r3, #2
   298d8:	moveq	r8, #0
   298dc:	andne	r8, r8, #1
   298e0:	ldr	r3, [sp, #52]	; 0x34
   298e4:	adds	r9, r3, #0
   298e8:	movne	r9, #1
   298ec:	ands	r6, r9, r8
   298f0:	beq	2a298 <__assert_fail@plt+0x17ca4>
   298f4:	ldr	r2, [sp, #52]	; 0x34
   298f8:	ldr	r1, [sp, #24]
   298fc:	cmp	r2, #1
   29900:	mov	r3, r2
   29904:	movls	r3, #0
   29908:	movhi	r3, #1
   2990c:	cmn	r1, #1
   29910:	movne	r3, #0
   29914:	cmp	r3, #0
   29918:	add	r4, sl, r2
   2991c:	beq	2992c <__assert_fail@plt+0x17338>
   29920:	ldr	r0, [sp, #56]	; 0x38
   29924:	bl	12300 <strlen@plt>
   29928:	str	r0, [sp, #24]
   2992c:	ldr	r3, [sp, #24]
   29930:	cmp	r3, r4
   29934:	ldr	r3, [sp, #56]	; 0x38
   29938:	add	r3, r3, sl
   2993c:	str	r3, [sp, #48]	; 0x30
   29940:	bcc	2a2a4 <__assert_fail@plt+0x17cb0>
   29944:	mov	r0, r3
   29948:	ldr	r2, [sp, #52]	; 0x34
   2994c:	ldr	r1, [sp, #64]	; 0x40
   29950:	bl	12084 <memcmp@plt>
   29954:	cmp	r0, #0
   29958:	bne	2a2a4 <__assert_fail@plt+0x17cb0>
   2995c:	ldr	r3, [sp, #28]
   29960:	cmp	r3, #0
   29964:	bne	2ab20 <__assert_fail@plt+0x1852c>
   29968:	ldr	r3, [sp, #48]	; 0x30
   2996c:	ldrb	r4, [r3]
   29970:	cmp	r4, #126	; 0x7e
   29974:	ldrls	pc, [pc, r4, lsl #2]
   29978:	b	2a238 <__assert_fail@plt+0x17c44>
   2997c:	andeq	sl, r2, ip, asr r0
   29980:	andeq	sl, r2, r8, lsr r2
   29984:	andeq	sl, r2, r8, lsr r2
   29988:	andeq	sl, r2, r8, lsr r2
   2998c:	andeq	sl, r2, r8, lsr r2
   29990:	andeq	sl, r2, r8, lsr r2
   29994:	andeq	sl, r2, r8, lsr r2
   29998:	andeq	sl, r2, r0, asr #32
   2999c:	andeq	sl, r2, r4, lsr #32
   299a0:	andeq	sl, r2, r0, lsr #4
   299a4:	andeq	r9, r2, r4, lsl #31
   299a8:	andeq	r9, r2, r8, ror #30
   299ac:	strdeq	sl, [r2], -ip
   299b0:	ldrdeq	sl, [r2], -r8
   299b4:	andeq	sl, r2, r8, lsr r2
   299b8:	andeq	sl, r2, r8, lsr r2
   299bc:	andeq	sl, r2, r8, lsr r2
   299c0:	andeq	sl, r2, r8, lsr r2
   299c4:	andeq	sl, r2, r8, lsr r2
   299c8:	andeq	sl, r2, r8, lsr r2
   299cc:	andeq	sl, r2, r8, lsr r2
   299d0:	andeq	sl, r2, r8, lsr r2
   299d4:	andeq	sl, r2, r8, lsr r2
   299d8:	andeq	sl, r2, r8, lsr r2
   299dc:	andeq	sl, r2, r8, lsr r2
   299e0:	andeq	sl, r2, r8, lsr r2
   299e4:	andeq	sl, r2, r8, lsr r2
   299e8:	andeq	sl, r2, r8, lsr r2
   299ec:	andeq	sl, r2, r8, lsr r2
   299f0:	andeq	sl, r2, r8, lsr r2
   299f4:	andeq	sl, r2, r8, lsr r2
   299f8:	andeq	sl, r2, r8, lsr r2
   299fc:	andeq	sl, r2, r8, lsl r2
   29a00:	andeq	sl, r2, ip, asr #2
   29a04:	andeq	sl, r2, ip, asr #2
   29a08:	andeq	r9, r2, ip, asr sp
   29a0c:	andeq	sl, r2, ip, asr #2
   29a10:	andeq	sl, r2, r4, ror #3
   29a14:	andeq	sl, r2, ip, asr #2
   29a18:			; <UNDEFINED> instruction: 0x0002a1b8
   29a1c:	andeq	sl, r2, ip, asr #2
   29a20:	andeq	sl, r2, ip, asr #2
   29a24:	andeq	sl, r2, ip, asr #2
   29a28:	andeq	sl, r2, r4, ror #3
   29a2c:	andeq	sl, r2, r4, ror #3
   29a30:	andeq	sl, r2, r4, ror #3
   29a34:	andeq	sl, r2, r4, ror #3
   29a38:	andeq	sl, r2, r4, ror #3
   29a3c:	andeq	sl, r2, r4, ror #3
   29a40:	andeq	sl, r2, r4, ror #3
   29a44:	andeq	sl, r2, r4, ror #3
   29a48:	andeq	sl, r2, r4, ror #3
   29a4c:	andeq	sl, r2, r4, ror #3
   29a50:	andeq	sl, r2, r4, ror #3
   29a54:	andeq	sl, r2, r4, ror #3
   29a58:	andeq	sl, r2, r4, ror #3
   29a5c:	andeq	sl, r2, r4, ror #3
   29a60:	andeq	sl, r2, r4, ror #3
   29a64:	andeq	sl, r2, r4, ror #3
   29a68:	andeq	sl, r2, ip, asr #2
   29a6c:	andeq	sl, r2, ip, asr #2
   29a70:	andeq	sl, r2, ip, asr #2
   29a74:	andeq	sl, r2, ip, asr #2
   29a78:	andeq	sl, r2, r8, lsl #3
   29a7c:	andeq	sl, r2, r8, lsr r2
   29a80:	andeq	sl, r2, r4, ror #3
   29a84:	andeq	sl, r2, r4, ror #3
   29a88:	andeq	sl, r2, r4, ror #3
   29a8c:	andeq	sl, r2, r4, ror #3
   29a90:	andeq	sl, r2, r4, ror #3
   29a94:	andeq	sl, r2, r4, ror #3
   29a98:	andeq	sl, r2, r4, ror #3
   29a9c:	andeq	sl, r2, r4, ror #3
   29aa0:	andeq	sl, r2, r4, ror #3
   29aa4:	andeq	sl, r2, r4, ror #3
   29aa8:	andeq	sl, r2, r4, ror #3
   29aac:	andeq	sl, r2, r4, ror #3
   29ab0:	andeq	sl, r2, r4, ror #3
   29ab4:	andeq	sl, r2, r4, ror #3
   29ab8:	andeq	sl, r2, r4, ror #3
   29abc:	andeq	sl, r2, r4, ror #3
   29ac0:	andeq	sl, r2, r4, ror #3
   29ac4:	andeq	sl, r2, r4, ror #3
   29ac8:	andeq	sl, r2, r4, ror #3
   29acc:	andeq	sl, r2, r4, ror #3
   29ad0:	andeq	sl, r2, r4, ror #3
   29ad4:	andeq	sl, r2, r4, ror #3
   29ad8:	andeq	sl, r2, r4, ror #3
   29adc:	andeq	sl, r2, r4, ror #3
   29ae0:	andeq	sl, r2, r4, ror #3
   29ae4:	andeq	sl, r2, r4, ror #3
   29ae8:	andeq	sl, r2, ip, asr #2
   29aec:	andeq	r9, r2, r8, lsr #29
   29af0:	andeq	sl, r2, r4, ror #3
   29af4:	andeq	sl, r2, ip, asr #2
   29af8:	andeq	sl, r2, r4, ror #3
   29afc:	andeq	sl, r2, ip, asr #2
   29b00:	andeq	sl, r2, r4, ror #3
   29b04:	andeq	sl, r2, r4, ror #3
   29b08:	andeq	sl, r2, r4, ror #3
   29b0c:	andeq	sl, r2, r4, ror #3
   29b10:	andeq	sl, r2, r4, ror #3
   29b14:	andeq	sl, r2, r4, ror #3
   29b18:	andeq	sl, r2, r4, ror #3
   29b1c:	andeq	sl, r2, r4, ror #3
   29b20:	andeq	sl, r2, r4, ror #3
   29b24:	andeq	sl, r2, r4, ror #3
   29b28:	andeq	sl, r2, r4, ror #3
   29b2c:	andeq	sl, r2, r4, ror #3
   29b30:	andeq	sl, r2, r4, ror #3
   29b34:	andeq	sl, r2, r4, ror #3
   29b38:	andeq	sl, r2, r4, ror #3
   29b3c:	andeq	sl, r2, r4, ror #3
   29b40:	andeq	sl, r2, r4, ror #3
   29b44:	andeq	sl, r2, r4, ror #3
   29b48:	andeq	sl, r2, r4, ror #3
   29b4c:	andeq	sl, r2, r4, ror #3
   29b50:	andeq	sl, r2, r4, ror #3
   29b54:	andeq	sl, r2, r4, ror #3
   29b58:	andeq	sl, r2, r4, ror #3
   29b5c:	andeq	sl, r2, r4, ror #3
   29b60:	andeq	sl, r2, r4, ror #3
   29b64:	andeq	sl, r2, r4, ror #3
   29b68:	andeq	r9, r2, ip, lsr sp
   29b6c:	andeq	sl, r2, ip, asr #2
   29b70:	andeq	r9, r2, ip, lsr sp
   29b74:	andeq	r9, r2, ip, asr sp
   29b78:	mov	r3, #1
   29b7c:	str	r3, [sp, #28]
   29b80:	str	r3, [sp, #52]	; 0x34
   29b84:	ldr	r3, [pc, #4000]	; 2ab2c <__assert_fail@plt+0x18538>
   29b88:	mov	r7, #0
   29b8c:	str	r3, [sp, #64]	; 0x40
   29b90:	mov	r3, #2
   29b94:	str	r3, [sp, #152]	; 0x98
   29b98:	b	2989c <__assert_fail@plt+0x172a8>
   29b9c:	ldr	r3, [sp, #28]
   29ba0:	cmp	r3, #0
   29ba4:	beq	29d00 <__assert_fail@plt+0x1770c>
   29ba8:	mov	r3, #1
   29bac:	str	r3, [sp, #52]	; 0x34
   29bb0:	ldr	r3, [pc, #3956]	; 2ab2c <__assert_fail@plt+0x18538>
   29bb4:	mov	r7, #0
   29bb8:	str	r3, [sp, #64]	; 0x40
   29bbc:	b	2989c <__assert_fail@plt+0x172a8>
   29bc0:	mov	r3, #1
   29bc4:	str	r3, [sp, #44]	; 0x2c
   29bc8:	str	r3, [sp, #52]	; 0x34
   29bcc:	str	r3, [sp, #28]
   29bd0:	b	29b84 <__assert_fail@plt+0x17590>
   29bd4:	mov	r3, #0
   29bd8:	str	r3, [sp, #28]
   29bdc:	mov	r3, #1
   29be0:	str	r3, [sp, #44]	; 0x2c
   29be4:	mov	r7, #0
   29be8:	b	2989c <__assert_fail@plt+0x172a8>
   29bec:	ldr	r3, [sp, #152]	; 0x98
   29bf0:	cmp	r3, #10
   29bf4:	beq	29c38 <__assert_fail@plt+0x17644>
   29bf8:	mov	r2, #5
   29bfc:	ldr	r1, [pc, #3884]	; 2ab30 <__assert_fail@plt+0x1853c>
   29c00:	mov	r0, #0
   29c04:	bl	120b4 <dcgettext@plt>
   29c08:	ldr	r2, [pc, #3872]	; 2ab30 <__assert_fail@plt+0x1853c>
   29c0c:	cmp	r0, r2
   29c10:	str	r0, [sp, #164]	; 0xa4
   29c14:	beq	2ac1c <__assert_fail@plt+0x18628>
   29c18:	mov	r2, #5
   29c1c:	ldr	r1, [pc, #3848]	; 2ab2c <__assert_fail@plt+0x18538>
   29c20:	mov	r0, #0
   29c24:	bl	120b4 <dcgettext@plt>
   29c28:	ldr	r2, [pc, #3836]	; 2ab2c <__assert_fail@plt+0x18538>
   29c2c:	cmp	r0, r2
   29c30:	str	r0, [sp, #168]	; 0xa8
   29c34:	beq	2ac0c <__assert_fail@plt+0x18618>
   29c38:	ldr	r7, [sp, #28]
   29c3c:	cmp	r7, #0
   29c40:	movne	r7, #0
   29c44:	bne	29c78 <__assert_fail@plt+0x17684>
   29c48:	ldr	r3, [sp, #164]	; 0xa4
   29c4c:	ldrb	r3, [r3]
   29c50:	cmp	r3, #0
   29c54:	beq	2ac2c <__assert_fail@plt+0x18638>
   29c58:	ldr	r2, [sp, #164]	; 0xa4
   29c5c:	ldr	r1, [sp, #32]
   29c60:	cmp	fp, r7
   29c64:	strbhi	r3, [r1, r7]
   29c68:	ldrb	r3, [r2, #1]!
   29c6c:	add	r7, r7, #1
   29c70:	cmp	r3, #0
   29c74:	bne	29c60 <__assert_fail@plt+0x1766c>
   29c78:	ldr	r0, [sp, #168]	; 0xa8
   29c7c:	bl	12300 <strlen@plt>
   29c80:	ldr	r3, [sp, #168]	; 0xa8
   29c84:	str	r3, [sp, #64]	; 0x40
   29c88:	mov	r3, #1
   29c8c:	str	r3, [sp, #44]	; 0x2c
   29c90:	str	r0, [sp, #52]	; 0x34
   29c94:	b	2989c <__assert_fail@plt+0x172a8>
   29c98:	mov	r3, #1
   29c9c:	str	r3, [sp, #44]	; 0x2c
   29ca0:	str	r3, [sp, #52]	; 0x34
   29ca4:	str	r3, [sp, #28]
   29ca8:	ldr	r3, [pc, #3716]	; 2ab34 <__assert_fail@plt+0x18540>
   29cac:	mov	r7, #0
   29cb0:	str	r3, [sp, #64]	; 0x40
   29cb4:	mov	r3, #5
   29cb8:	str	r3, [sp, #152]	; 0x98
   29cbc:	b	2989c <__assert_fail@plt+0x172a8>
   29cc0:	ldr	r3, [sp, #28]
   29cc4:	cmp	r3, #0
   29cc8:	beq	2a9c8 <__assert_fail@plt+0x183d4>
   29ccc:	ldr	r3, [sp, #28]
   29cd0:	mov	r7, #0
   29cd4:	str	r3, [sp, #44]	; 0x2c
   29cd8:	mov	r3, #1
   29cdc:	str	r3, [sp, #52]	; 0x34
   29ce0:	ldr	r3, [pc, #3660]	; 2ab34 <__assert_fail@plt+0x18540>
   29ce4:	str	r3, [sp, #64]	; 0x40
   29ce8:	b	2989c <__assert_fail@plt+0x172a8>
   29cec:	ldr	r3, [sp, #28]
   29cf0:	cmp	r3, #0
   29cf4:	mov	r3, #1
   29cf8:	streq	r3, [sp, #44]	; 0x2c
   29cfc:	bne	29b80 <__assert_fail@plt+0x1758c>
   29d00:	cmp	fp, #0
   29d04:	beq	2a9f8 <__assert_fail@plt+0x18404>
   29d08:	ldr	r3, [sp, #32]
   29d0c:	mov	r2, #39	; 0x27
   29d10:	mov	r7, #1
   29d14:	strb	r2, [r3]
   29d18:	mov	r3, #0
   29d1c:	str	r3, [sp, #28]
   29d20:	mov	r3, #1
   29d24:	str	r3, [sp, #52]	; 0x34
   29d28:	ldr	r3, [pc, #3580]	; 2ab2c <__assert_fail@plt+0x18538>
   29d2c:	str	r3, [sp, #64]	; 0x40
   29d30:	mov	r3, #2
   29d34:	str	r3, [sp, #152]	; 0x98
   29d38:	b	2989c <__assert_fail@plt+0x172a8>
   29d3c:	ldr	r3, [sp, #24]
   29d40:	cmn	r3, #1
   29d44:	beq	2a95c <__assert_fail@plt+0x18368>
   29d48:	ldr	r3, [sp, #24]
   29d4c:	subs	r3, r3, #1
   29d50:	movne	r3, #1
   29d54:	cmp	r3, #0
   29d58:	bne	29d64 <__assert_fail@plt+0x17770>
   29d5c:	cmp	sl, #0
   29d60:	beq	2a150 <__assert_fail@plt+0x17b5c>
   29d64:	ldr	r3, [sp, #152]	; 0x98
   29d68:	mov	r5, #0
   29d6c:	sub	r2, r3, #2
   29d70:	mov	r8, r5
   29d74:	clz	r2, r2
   29d78:	lsr	r2, r2, #5
   29d7c:	ldr	r3, [sp, #60]	; 0x3c
   29d80:	ldr	r1, [sp, #28]
   29d84:	orr	r3, r2, r3
   29d88:	eor	r3, r3, #1
   29d8c:	orr	r3, r1, r3
   29d90:	tst	r3, #255	; 0xff
   29d94:	bne	2a4c0 <__assert_fail@plt+0x17ecc>
   29d98:	cmp	r6, #0
   29d9c:	bne	29eec <__assert_fail@plt+0x178f8>
   29da0:	ldr	r3, [sp, #40]	; 0x28
   29da4:	eor	r8, r8, #1
   29da8:	and	r8, r8, r3
   29dac:	add	sl, sl, #1
   29db0:	uxtb	r6, r8
   29db4:	cmp	r6, #0
   29db8:	beq	29dec <__assert_fail@plt+0x177f8>
   29dbc:	cmp	fp, r7
   29dc0:	movhi	r2, #39	; 0x27
   29dc4:	ldrhi	r3, [sp, #32]
   29dc8:	strbhi	r2, [r3, r7]
   29dcc:	add	r3, r7, #1
   29dd0:	cmp	fp, r3
   29dd4:	movhi	r1, #39	; 0x27
   29dd8:	ldrhi	r2, [sp, #32]
   29ddc:	add	r7, r7, #2
   29de0:	strbhi	r1, [r2, r3]
   29de4:	mov	r3, #0
   29de8:	str	r3, [sp, #40]	; 0x28
   29dec:	cmp	r7, fp
   29df0:	ldrcc	r3, [sp, #32]
   29df4:	strbcc	r4, [r3, r7]
   29df8:	ldr	r3, [sp, #36]	; 0x24
   29dfc:	cmp	r5, #0
   29e00:	moveq	r3, #0
   29e04:	str	r3, [sp, #36]	; 0x24
   29e08:	ldr	r3, [sp, #24]
   29e0c:	add	r7, r7, #1
   29e10:	cmn	r3, #1
   29e14:	bne	298b8 <__assert_fail@plt+0x172c4>
   29e18:	ldr	r3, [sp, #56]	; 0x38
   29e1c:	ldrb	r5, [r3, sl]
   29e20:	adds	r5, r5, #0
   29e24:	movne	r5, #1
   29e28:	cmp	r5, #0
   29e2c:	bne	298cc <__assert_fail@plt+0x172d8>
   29e30:	ldr	r3, [sp, #152]	; 0x98
   29e34:	ldr	r1, [sp, #28]
   29e38:	sub	r3, r3, #2
   29e3c:	clz	r3, r3
   29e40:	lsr	r3, r3, #5
   29e44:	and	r9, r1, r3
   29e48:	cmp	r7, #0
   29e4c:	movne	r2, #0
   29e50:	andeq	r2, r9, #1
   29e54:	cmp	r2, #0
   29e58:	bne	2a834 <__assert_fail@plt+0x18240>
   29e5c:	eor	r2, r1, #1
   29e60:	ands	r3, r3, r2
   29e64:	beq	2acf0 <__assert_fail@plt+0x186fc>
   29e68:	ldr	r2, [sp, #68]	; 0x44
   29e6c:	cmp	r2, #0
   29e70:	beq	2acdc <__assert_fail@plt+0x186e8>
   29e74:	ldr	r3, [sp, #36]	; 0x24
   29e78:	cmp	r3, #0
   29e7c:	bne	2ac94 <__assert_fail@plt+0x186a0>
   29e80:	ldr	r2, [sp, #72]	; 0x48
   29e84:	clz	r3, fp
   29e88:	cmp	r2, #0
   29e8c:	lsr	r3, r3, #5
   29e90:	moveq	r3, #0
   29e94:	cmp	r3, #0
   29e98:	beq	2ac34 <__assert_fail@plt+0x18640>
   29e9c:	str	r3, [sp, #68]	; 0x44
   29ea0:	ldr	fp, [sp, #72]	; 0x48
   29ea4:	b	29854 <__assert_fail@plt+0x17260>
   29ea8:	ldr	r3, [sp, #152]	; 0x98
   29eac:	cmp	r3, #2
   29eb0:	beq	2a504 <__assert_fail@plt+0x17f10>
   29eb4:	ldr	r3, [sp, #44]	; 0x2c
   29eb8:	ldr	r2, [sp, #28]
   29ebc:	and	r2, r3, r2
   29ec0:	ands	r2, r9, r2
   29ec4:	bne	2a510 <__assert_fail@plt+0x17f1c>
   29ec8:	mov	r4, #92	; 0x5c
   29ecc:	mov	r3, r4
   29ed0:	ldr	r1, [sp, #44]	; 0x2c
   29ed4:	cmp	r1, #0
   29ed8:	moveq	r5, #0
   29edc:	moveq	r8, r1
   29ee0:	beq	29d7c <__assert_fail@plt+0x17788>
   29ee4:	mov	r4, r3
   29ee8:	mov	r5, #0
   29eec:	ldr	r3, [sp, #28]
   29ef0:	cmp	r3, #0
   29ef4:	bne	2a4f8 <__assert_fail@plt+0x17f04>
   29ef8:	ldr	r3, [sp, #40]	; 0x28
   29efc:	eor	r9, r3, #1
   29f00:	and	r9, r9, r2
   29f04:	ands	r9, r9, #255	; 0xff
   29f08:	beq	29f4c <__assert_fail@plt+0x17958>
   29f0c:	cmp	fp, r7
   29f10:	movhi	r2, #39	; 0x27
   29f14:	ldrhi	r3, [sp, #32]
   29f18:	str	r9, [sp, #40]	; 0x28
   29f1c:	strbhi	r2, [r3, r7]
   29f20:	add	r3, r7, #1
   29f24:	cmp	fp, r3
   29f28:	movhi	r1, #36	; 0x24
   29f2c:	ldrhi	r2, [sp, #32]
   29f30:	strbhi	r1, [r2, r3]
   29f34:	add	r3, r7, #2
   29f38:	cmp	fp, r3
   29f3c:	add	r7, r7, #3
   29f40:	ldrhi	r2, [sp, #32]
   29f44:	movhi	r1, #39	; 0x27
   29f48:	strbhi	r1, [r2, r3]
   29f4c:	cmp	fp, r7
   29f50:	movhi	r2, #92	; 0x5c
   29f54:	ldrhi	r3, [sp, #32]
   29f58:	add	sl, sl, #1
   29f5c:	strbhi	r2, [r3, r7]
   29f60:	add	r7, r7, #1
   29f64:	b	29dec <__assert_fail@plt+0x177f8>
   29f68:	ldr	r3, [sp, #152]	; 0x98
   29f6c:	mov	r4, #11
   29f70:	sub	r2, r3, #2
   29f74:	mov	r3, #118	; 0x76
   29f78:	clz	r2, r2
   29f7c:	lsr	r2, r2, #5
   29f80:	b	29ed0 <__assert_fail@plt+0x178dc>
   29f84:	mov	r4, #10
   29f88:	mov	r3, #110	; 0x6e
   29f8c:	ldr	r2, [sp, #152]	; 0x98
   29f90:	ldr	r1, [sp, #28]
   29f94:	sub	r2, r2, #2
   29f98:	clz	r2, r2
   29f9c:	lsr	r2, r2, #5
   29fa0:	ands	r1, r1, r2
   29fa4:	beq	29ed0 <__assert_fail@plt+0x178dc>
   29fa8:	ldr	sl, [sp, #32]
   29fac:	mov	r8, fp
   29fb0:	mov	r2, r1
   29fb4:	mov	r3, #2
   29fb8:	str	r3, [sp, #152]	; 0x98
   29fbc:	ldr	r9, [sp, #44]	; 0x2c
   29fc0:	ldr	r3, [sp, #152]	; 0x98
   29fc4:	and	r9, r9, r2
   29fc8:	tst	r9, #255	; 0xff
   29fcc:	movne	r3, #4
   29fd0:	str	r3, [sp, #152]	; 0x98
   29fd4:	ldr	r3, [sp, #156]	; 0x9c
   29fd8:	mov	ip, #0
   29fdc:	bic	r3, r3, #2
   29fe0:	str	r3, [sp, #4]
   29fe4:	ldr	r3, [sp, #168]	; 0xa8
   29fe8:	ldr	r2, [sp, #56]	; 0x38
   29fec:	str	r3, [sp, #16]
   29ff0:	ldr	r3, [sp, #164]	; 0xa4
   29ff4:	mov	r1, r8
   29ff8:	str	r3, [sp, #12]
   29ffc:	ldr	r3, [sp, #152]	; 0x98
   2a000:	mov	r0, sl
   2a004:	str	r3, [sp]
   2a008:	str	ip, [sp, #8]
   2a00c:	ldr	r3, [sp, #24]
   2a010:	bl	297f8 <__assert_fail@plt+0x17204>
   2a014:	mov	fp, r0
   2a018:	mov	r0, fp
   2a01c:	add	sp, sp, #116	; 0x74
   2a020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a024:	ldr	r3, [sp, #152]	; 0x98
   2a028:	mov	r4, #8
   2a02c:	sub	r2, r3, #2
   2a030:	mov	r3, #98	; 0x62
   2a034:	clz	r2, r2
   2a038:	lsr	r2, r2, #5
   2a03c:	b	29ed0 <__assert_fail@plt+0x178dc>
   2a040:	ldr	r3, [sp, #152]	; 0x98
   2a044:	mov	r4, #7
   2a048:	sub	r2, r3, #2
   2a04c:	mov	r3, #97	; 0x61
   2a050:	clz	r2, r2
   2a054:	lsr	r2, r2, #5
   2a058:	b	29ed0 <__assert_fail@plt+0x178dc>
   2a05c:	ldr	r3, [sp, #44]	; 0x2c
   2a060:	cmp	r3, #0
   2a064:	beq	2a848 <__assert_fail@plt+0x18254>
   2a068:	ldr	r3, [sp, #28]
   2a06c:	cmp	r3, #0
   2a070:	bne	2ab20 <__assert_fail@plt+0x1852c>
   2a074:	ldr	r3, [sp, #152]	; 0x98
   2a078:	sub	r2, r3, #2
   2a07c:	ldr	r3, [sp, #40]	; 0x28
   2a080:	clz	r2, r2
   2a084:	eor	r3, r3, #1
   2a088:	lsr	r2, r2, #5
   2a08c:	ands	r3, r2, r3
   2a090:	moveq	r1, r7
   2a094:	beq	2a0d8 <__assert_fail@plt+0x17ae4>
   2a098:	cmp	fp, r7
   2a09c:	movhi	r0, #39	; 0x27
   2a0a0:	ldrhi	r1, [sp, #32]
   2a0a4:	str	r3, [sp, #40]	; 0x28
   2a0a8:	strbhi	r0, [r1, r7]
   2a0ac:	add	r1, r7, #1
   2a0b0:	cmp	fp, r1
   2a0b4:	movhi	ip, #36	; 0x24
   2a0b8:	ldrhi	r0, [sp, #32]
   2a0bc:	strbhi	ip, [r0, r1]
   2a0c0:	add	r1, r7, #2
   2a0c4:	cmp	fp, r1
   2a0c8:	movhi	ip, #39	; 0x27
   2a0cc:	ldrhi	r0, [sp, #32]
   2a0d0:	strbhi	ip, [r0, r1]
   2a0d4:	add	r1, r7, #3
   2a0d8:	cmp	fp, r1
   2a0dc:	movhi	r0, #92	; 0x5c
   2a0e0:	ldrhi	r3, [sp, #32]
   2a0e4:	add	r7, r1, #1
   2a0e8:	strbhi	r0, [r3, r1]
   2a0ec:	cmp	r8, #0
   2a0f0:	beq	2aa34 <__assert_fail@plt+0x18440>
   2a0f4:	ldr	r0, [sp, #24]
   2a0f8:	add	r3, sl, #1
   2a0fc:	cmp	r3, r0
   2a100:	bcs	2a970 <__assert_fail@plt+0x1837c>
   2a104:	ldr	r0, [sp, #56]	; 0x38
   2a108:	ldrb	r3, [r0, r3]
   2a10c:	sub	r3, r3, #48	; 0x30
   2a110:	cmp	r3, #9
   2a114:	bhi	2a970 <__assert_fail@plt+0x1837c>
   2a118:	cmp	fp, r7
   2a11c:	movhi	r3, #48	; 0x30
   2a120:	ldrhi	r0, [sp, #32]
   2a124:	ldr	r5, [sp, #28]
   2a128:	mov	r4, #48	; 0x30
   2a12c:	strbhi	r3, [r0, r7]
   2a130:	add	r3, r1, #2
   2a134:	cmp	fp, r3
   2a138:	movhi	r0, #48	; 0x30
   2a13c:	ldrhi	ip, [sp, #32]
   2a140:	add	r7, r1, #3
   2a144:	strbhi	r0, [ip, r3]
   2a148:	b	29d7c <__assert_fail@plt+0x17788>
   2a14c:	mov	r5, #0
   2a150:	ldr	r3, [sp, #152]	; 0x98
   2a154:	sub	r2, r3, #2
   2a158:	ldr	r3, [sp, #28]
   2a15c:	clz	r2, r2
   2a160:	lsr	r2, r2, #5
   2a164:	ands	r8, r3, r2
   2a168:	beq	29d7c <__assert_fail@plt+0x17788>
   2a16c:	mov	r3, r8
   2a170:	mov	r2, r3
   2a174:	mov	r3, #2
   2a178:	ldr	sl, [sp, #32]
   2a17c:	mov	r8, fp
   2a180:	str	r3, [sp, #152]	; 0x98
   2a184:	b	29fbc <__assert_fail@plt+0x179c8>
   2a188:	ldr	r3, [sp, #152]	; 0x98
   2a18c:	cmp	r3, #2
   2a190:	beq	2a8b4 <__assert_fail@plt+0x182c0>
   2a194:	cmp	r3, #5
   2a198:	beq	2a874 <__assert_fail@plt+0x18280>
   2a19c:	mov	r5, #0
   2a1a0:	sub	r2, r3, #2
   2a1a4:	mov	r8, r5
   2a1a8:	clz	r2, r2
   2a1ac:	mov	r4, #63	; 0x3f
   2a1b0:	lsr	r2, r2, #5
   2a1b4:	b	29d7c <__assert_fail@plt+0x17788>
   2a1b8:	ldr	r3, [sp, #152]	; 0x98
   2a1bc:	cmp	r3, #2
   2a1c0:	beq	2a8d4 <__assert_fail@plt+0x182e0>
   2a1c4:	mov	r2, #0
   2a1c8:	str	r5, [sp, #68]	; 0x44
   2a1cc:	mov	r8, r2
   2a1d0:	mov	r4, #39	; 0x27
   2a1d4:	b	29d7c <__assert_fail@plt+0x17788>
   2a1d8:	mov	r4, #13
   2a1dc:	mov	r3, #114	; 0x72
   2a1e0:	b	29f8c <__assert_fail@plt+0x17998>
   2a1e4:	ldr	r3, [sp, #152]	; 0x98
   2a1e8:	mov	r8, #0
   2a1ec:	sub	r2, r3, #2
   2a1f0:	clz	r2, r2
   2a1f4:	lsr	r2, r2, #5
   2a1f8:	b	29d7c <__assert_fail@plt+0x17788>
   2a1fc:	ldr	r3, [sp, #152]	; 0x98
   2a200:	mov	r4, #12
   2a204:	sub	r2, r3, #2
   2a208:	mov	r3, #102	; 0x66
   2a20c:	clz	r2, r2
   2a210:	lsr	r2, r2, #5
   2a214:	b	29ed0 <__assert_fail@plt+0x178dc>
   2a218:	mov	r5, r6
   2a21c:	b	2a150 <__assert_fail@plt+0x17b5c>
   2a220:	ldr	r3, [sp, #152]	; 0x98
   2a224:	sub	r2, r3, #2
   2a228:	mov	r3, #116	; 0x74
   2a22c:	clz	r2, r2
   2a230:	lsr	r2, r2, #5
   2a234:	b	29ed0 <__assert_fail@plt+0x178dc>
   2a238:	ldr	r8, [sp, #76]	; 0x4c
   2a23c:	cmp	r8, #1
   2a240:	bne	2a6f0 <__assert_fail@plt+0x180fc>
   2a244:	bl	122b8 <__ctype_b_loc@plt>
   2a248:	sxth	r3, r4
   2a24c:	mov	ip, r8
   2a250:	lsl	r3, r3, #1
   2a254:	ldr	r2, [r0]
   2a258:	ldrh	r3, [r2, r3]
   2a25c:	and	r3, r3, #16384	; 0x4000
   2a260:	cmp	r3, #0
   2a264:	movne	r5, #1
   2a268:	moveq	r5, #0
   2a26c:	moveq	r3, #1
   2a270:	movne	r3, #0
   2a274:	ldr	r2, [sp, #44]	; 0x2c
   2a278:	and	r3, r3, r2
   2a27c:	ands	r8, r3, #255	; 0xff
   2a280:	bne	2a584 <__assert_fail@plt+0x17f90>
   2a284:	ldr	r3, [sp, #152]	; 0x98
   2a288:	sub	r2, r3, #2
   2a28c:	clz	r2, r2
   2a290:	lsr	r2, r2, #5
   2a294:	b	29d7c <__assert_fail@plt+0x17788>
   2a298:	ldr	r3, [sp, #56]	; 0x38
   2a29c:	add	r3, r3, sl
   2a2a0:	str	r3, [sp, #48]	; 0x30
   2a2a4:	ldr	r3, [sp, #48]	; 0x30
   2a2a8:	mov	r6, #0
   2a2ac:	ldrb	r4, [r3]
   2a2b0:	cmp	r4, #126	; 0x7e
   2a2b4:	ldrls	pc, [pc, r4, lsl #2]
   2a2b8:	b	2a238 <__assert_fail@plt+0x17c44>
   2a2bc:	andeq	sl, r2, ip, asr r0
   2a2c0:	andeq	sl, r2, r8, lsr r2
   2a2c4:	andeq	sl, r2, r8, lsr r2
   2a2c8:	andeq	sl, r2, r8, lsr r2
   2a2cc:	andeq	sl, r2, r8, lsr r2
   2a2d0:	andeq	sl, r2, r8, lsr r2
   2a2d4:	andeq	sl, r2, r8, lsr r2
   2a2d8:	andeq	sl, r2, r0, asr #32
   2a2dc:	andeq	sl, r2, r4, lsr #32
   2a2e0:			; <UNDEFINED> instruction: 0x0002a4b8
   2a2e4:	andeq	r9, r2, r4, lsl #31
   2a2e8:	andeq	r9, r2, r8, ror #30
   2a2ec:	strdeq	sl, [r2], -ip
   2a2f0:	ldrdeq	sl, [r2], -r8
   2a2f4:	andeq	sl, r2, r8, lsr r2
   2a2f8:	andeq	sl, r2, r8, lsr r2
   2a2fc:	andeq	sl, r2, r8, lsr r2
   2a300:	andeq	sl, r2, r8, lsr r2
   2a304:	andeq	sl, r2, r8, lsr r2
   2a308:	andeq	sl, r2, r8, lsr r2
   2a30c:	andeq	sl, r2, r8, lsr r2
   2a310:	andeq	sl, r2, r8, lsr r2
   2a314:	andeq	sl, r2, r8, lsr r2
   2a318:	andeq	sl, r2, r8, lsr r2
   2a31c:	andeq	sl, r2, r8, lsr r2
   2a320:	andeq	sl, r2, r8, lsr r2
   2a324:	andeq	sl, r2, r8, lsr r2
   2a328:	andeq	sl, r2, r8, lsr r2
   2a32c:	andeq	sl, r2, r8, lsr r2
   2a330:	andeq	sl, r2, r8, lsr r2
   2a334:	andeq	sl, r2, r8, lsr r2
   2a338:	andeq	sl, r2, r8, lsr r2
   2a33c:	andeq	sl, r2, r0, asr r1
   2a340:	andeq	sl, r2, ip, asr #2
   2a344:	andeq	sl, r2, ip, asr #2
   2a348:	andeq	r9, r2, ip, asr sp
   2a34c:	andeq	sl, r2, ip, asr #2
   2a350:	andeq	sl, r2, r4, ror #3
   2a354:	andeq	sl, r2, ip, asr #2
   2a358:			; <UNDEFINED> instruction: 0x0002a1b8
   2a35c:	andeq	sl, r2, ip, asr #2
   2a360:	andeq	sl, r2, ip, asr #2
   2a364:	andeq	sl, r2, ip, asr #2
   2a368:	andeq	sl, r2, r4, ror #3
   2a36c:	andeq	sl, r2, r4, ror #3
   2a370:	andeq	sl, r2, r4, ror #3
   2a374:	andeq	sl, r2, r4, ror #3
   2a378:	andeq	sl, r2, r4, ror #3
   2a37c:	andeq	sl, r2, r4, ror #3
   2a380:	andeq	sl, r2, r4, ror #3
   2a384:	andeq	sl, r2, r4, ror #3
   2a388:	andeq	sl, r2, r4, ror #3
   2a38c:	andeq	sl, r2, r4, ror #3
   2a390:	andeq	sl, r2, r4, ror #3
   2a394:	andeq	sl, r2, r4, ror #3
   2a398:	andeq	sl, r2, r4, ror #3
   2a39c:	andeq	sl, r2, r4, ror #3
   2a3a0:	andeq	sl, r2, r4, ror #3
   2a3a4:	andeq	sl, r2, r4, ror #3
   2a3a8:	andeq	sl, r2, ip, asr #2
   2a3ac:	andeq	sl, r2, ip, asr #2
   2a3b0:	andeq	sl, r2, ip, asr #2
   2a3b4:	andeq	sl, r2, ip, asr #2
   2a3b8:	andeq	sl, r2, r8, lsl #3
   2a3bc:	andeq	sl, r2, r8, lsr r2
   2a3c0:	andeq	sl, r2, r4, ror #3
   2a3c4:	andeq	sl, r2, r4, ror #3
   2a3c8:	andeq	sl, r2, r4, ror #3
   2a3cc:	andeq	sl, r2, r4, ror #3
   2a3d0:	andeq	sl, r2, r4, ror #3
   2a3d4:	andeq	sl, r2, r4, ror #3
   2a3d8:	andeq	sl, r2, r4, ror #3
   2a3dc:	andeq	sl, r2, r4, ror #3
   2a3e0:	andeq	sl, r2, r4, ror #3
   2a3e4:	andeq	sl, r2, r4, ror #3
   2a3e8:	andeq	sl, r2, r4, ror #3
   2a3ec:	andeq	sl, r2, r4, ror #3
   2a3f0:	andeq	sl, r2, r4, ror #3
   2a3f4:	andeq	sl, r2, r4, ror #3
   2a3f8:	andeq	sl, r2, r4, ror #3
   2a3fc:	andeq	sl, r2, r4, ror #3
   2a400:	andeq	sl, r2, r4, ror #3
   2a404:	andeq	sl, r2, r4, ror #3
   2a408:	andeq	sl, r2, r4, ror #3
   2a40c:	andeq	sl, r2, r4, ror #3
   2a410:	andeq	sl, r2, r4, ror #3
   2a414:	andeq	sl, r2, r4, ror #3
   2a418:	andeq	sl, r2, r4, ror #3
   2a41c:	andeq	sl, r2, r4, ror #3
   2a420:	andeq	sl, r2, r4, ror #3
   2a424:	andeq	sl, r2, r4, ror #3
   2a428:	andeq	sl, r2, ip, asr #2
   2a42c:	andeq	r9, r2, r8, lsr #29
   2a430:	andeq	sl, r2, r4, ror #3
   2a434:	andeq	sl, r2, ip, asr #2
   2a438:	andeq	sl, r2, r4, ror #3
   2a43c:	andeq	sl, r2, ip, asr #2
   2a440:	andeq	sl, r2, r4, ror #3
   2a444:	andeq	sl, r2, r4, ror #3
   2a448:	andeq	sl, r2, r4, ror #3
   2a44c:	andeq	sl, r2, r4, ror #3
   2a450:	andeq	sl, r2, r4, ror #3
   2a454:	andeq	sl, r2, r4, ror #3
   2a458:	andeq	sl, r2, r4, ror #3
   2a45c:	andeq	sl, r2, r4, ror #3
   2a460:	andeq	sl, r2, r4, ror #3
   2a464:	andeq	sl, r2, r4, ror #3
   2a468:	andeq	sl, r2, r4, ror #3
   2a46c:	andeq	sl, r2, r4, ror #3
   2a470:	andeq	sl, r2, r4, ror #3
   2a474:	andeq	sl, r2, r4, ror #3
   2a478:	andeq	sl, r2, r4, ror #3
   2a47c:	andeq	sl, r2, r4, ror #3
   2a480:	andeq	sl, r2, r4, ror #3
   2a484:	andeq	sl, r2, r4, ror #3
   2a488:	andeq	sl, r2, r4, ror #3
   2a48c:	andeq	sl, r2, r4, ror #3
   2a490:	andeq	sl, r2, r4, ror #3
   2a494:	andeq	sl, r2, r4, ror #3
   2a498:	andeq	sl, r2, r4, ror #3
   2a49c:	andeq	sl, r2, r4, ror #3
   2a4a0:	andeq	sl, r2, r4, ror #3
   2a4a4:	andeq	sl, r2, r4, ror #3
   2a4a8:	andeq	r9, r2, ip, lsr sp
   2a4ac:	andeq	sl, r2, ip, asr #2
   2a4b0:	andeq	r9, r2, ip, lsr sp
   2a4b4:	andeq	r9, r2, ip, asr sp
   2a4b8:	mov	r3, #116	; 0x74
   2a4bc:	b	29f8c <__assert_fail@plt+0x17998>
   2a4c0:	ldr	r3, [sp, #160]	; 0xa0
   2a4c4:	cmp	r3, #0
   2a4c8:	beq	29d98 <__assert_fail@plt+0x177a4>
   2a4cc:	lsr	r3, r4, #5
   2a4d0:	ldr	r0, [sp, #160]	; 0xa0
   2a4d4:	uxtb	r3, r3
   2a4d8:	and	r1, r4, #31
   2a4dc:	ldr	r0, [r0, r3, lsl #2]
   2a4e0:	lsr	r3, r0, r1
   2a4e4:	tst	r3, #1
   2a4e8:	beq	29d98 <__assert_fail@plt+0x177a4>
   2a4ec:	ldr	r3, [sp, #28]
   2a4f0:	cmp	r3, #0
   2a4f4:	beq	29ef8 <__assert_fail@plt+0x17904>
   2a4f8:	ldr	sl, [sp, #32]
   2a4fc:	mov	r8, fp
   2a500:	b	29fbc <__assert_fail@plt+0x179c8>
   2a504:	ldr	r3, [sp, #28]
   2a508:	cmp	r3, #0
   2a50c:	bne	2aa60 <__assert_fail@plt+0x1846c>
   2a510:	add	sl, sl, #1
   2a514:	ldr	r6, [sp, #40]	; 0x28
   2a518:	mov	r5, #0
   2a51c:	mov	r4, #92	; 0x5c
   2a520:	b	29db4 <__assert_fail@plt+0x177c0>
   2a524:	cmp	r9, r8
   2a528:	bne	2a798 <__assert_fail@plt+0x181a4>
   2a52c:	ldr	r0, [sp, #100]	; 0x64
   2a530:	bl	12138 <iswprint@plt>
   2a534:	add	r5, r5, r4
   2a538:	cmp	r0, #0
   2a53c:	add	r0, sp, #104	; 0x68
   2a540:	moveq	r6, #0
   2a544:	bl	12060 <mbsinit@plt>
   2a548:	cmp	r0, #0
   2a54c:	beq	2a72c <__assert_fail@plt+0x18138>
   2a550:	mov	r2, r6
   2a554:	mov	ip, r5
   2a558:	eor	r5, r2, #1
   2a55c:	ldr	r4, [sp, #80]	; 0x50
   2a560:	ldr	r6, [sp, #84]	; 0x54
   2a564:	ldr	r7, [sp, #88]	; 0x58
   2a568:	uxtb	r5, r5
   2a56c:	cmp	ip, #1
   2a570:	bls	2aa70 <__assert_fail@plt+0x1847c>
   2a574:	ldr	r3, [sp, #44]	; 0x2c
   2a578:	and	r8, r3, r5
   2a57c:	mov	r5, r2
   2a580:	uxtb	r8, r8
   2a584:	add	r2, sl, ip
   2a588:	ldr	r0, [sp, #48]	; 0x30
   2a58c:	mov	r1, #0
   2a590:	str	r5, [sp, #48]	; 0x30
   2a594:	ldr	r9, [sp, #28]
   2a598:	ldr	ip, [sp, #40]	; 0x28
   2a59c:	ldr	r3, [sp, #32]
   2a5a0:	ldr	r5, [sp, #152]	; 0x98
   2a5a4:	b	2a660 <__assert_fail@plt+0x1806c>
   2a5a8:	cmp	r9, #0
   2a5ac:	bne	2a984 <__assert_fail@plt+0x18390>
   2a5b0:	eor	r1, ip, #1
   2a5b4:	cmp	r5, #2
   2a5b8:	movne	r1, #0
   2a5bc:	andeq	r1, r1, #1
   2a5c0:	cmp	r1, #0
   2a5c4:	beq	2a5fc <__assert_fail@plt+0x18008>
   2a5c8:	cmp	fp, r7
   2a5cc:	movhi	ip, #39	; 0x27
   2a5d0:	strbhi	ip, [r3, r7]
   2a5d4:	add	ip, r7, #1
   2a5d8:	cmp	fp, ip
   2a5dc:	movhi	lr, #36	; 0x24
   2a5e0:	strbhi	lr, [r3, ip]
   2a5e4:	add	ip, r7, #2
   2a5e8:	cmp	fp, ip
   2a5ec:	movhi	lr, #39	; 0x27
   2a5f0:	strbhi	lr, [r3, ip]
   2a5f4:	add	r7, r7, #3
   2a5f8:	mov	ip, r1
   2a5fc:	cmp	fp, r7
   2a600:	movhi	r1, #92	; 0x5c
   2a604:	strbhi	r1, [r3, r7]
   2a608:	add	r1, r7, #1
   2a60c:	cmp	fp, r1
   2a610:	lsrhi	lr, r4, #6
   2a614:	addhi	lr, lr, #48	; 0x30
   2a618:	strbhi	lr, [r3, r1]
   2a61c:	add	lr, r7, #2
   2a620:	cmp	fp, lr
   2a624:	lsrhi	r1, r4, #3
   2a628:	andhi	r1, r1, #7
   2a62c:	addhi	r1, r1, #48	; 0x30
   2a630:	add	sl, sl, #1
   2a634:	strbhi	r1, [r3, lr]
   2a638:	and	r4, r4, #7
   2a63c:	cmp	r2, sl
   2a640:	add	r4, r4, #48	; 0x30
   2a644:	add	r7, r7, #3
   2a648:	bls	2a9a8 <__assert_fail@plt+0x183b4>
   2a64c:	mov	r1, r8
   2a650:	cmp	fp, r7
   2a654:	strbhi	r4, [r3, r7]
   2a658:	ldrb	r4, [r0, #1]!
   2a65c:	add	r7, r7, #1
   2a660:	cmp	r8, #0
   2a664:	bne	2a5a8 <__assert_fail@plt+0x17fb4>
   2a668:	cmp	r6, #0
   2a66c:	bne	2a6bc <__assert_fail@plt+0x180c8>
   2a670:	eor	r6, r1, #1
   2a674:	and	r6, r6, ip
   2a678:	add	sl, sl, #1
   2a67c:	cmp	r2, sl
   2a680:	uxtb	r6, r6
   2a684:	bls	2a6e4 <__assert_fail@plt+0x180f0>
   2a688:	cmp	r6, #0
   2a68c:	beq	2a650 <__assert_fail@plt+0x1805c>
   2a690:	cmp	fp, r7
   2a694:	movhi	ip, #39	; 0x27
   2a698:	strbhi	ip, [r3, r7]
   2a69c:	add	ip, r7, #1
   2a6a0:	cmp	fp, ip
   2a6a4:	movhi	lr, #39	; 0x27
   2a6a8:	strbhi	lr, [r3, ip]
   2a6ac:	add	r7, r7, #2
   2a6b0:	mov	r6, r8
   2a6b4:	mov	ip, r8
   2a6b8:	b	2a650 <__assert_fail@plt+0x1805c>
   2a6bc:	cmp	fp, r7
   2a6c0:	eor	r6, r1, #1
   2a6c4:	movhi	lr, #92	; 0x5c
   2a6c8:	and	r6, r6, ip
   2a6cc:	add	sl, sl, #1
   2a6d0:	strbhi	lr, [r3, r7]
   2a6d4:	cmp	r2, sl
   2a6d8:	add	r7, r7, #1
   2a6dc:	uxtb	r6, r6
   2a6e0:	bhi	2a688 <__assert_fail@plt+0x18094>
   2a6e4:	str	ip, [sp, #40]	; 0x28
   2a6e8:	ldr	r5, [sp, #48]	; 0x30
   2a6ec:	b	29db4 <__assert_fail@plt+0x177c0>
   2a6f0:	ldr	r3, [sp, #24]
   2a6f4:	cmn	r3, #1
   2a6f8:	mov	r3, #0
   2a6fc:	str	r3, [sp, #104]	; 0x68
   2a700:	str	r3, [sp, #108]	; 0x6c
   2a704:	beq	2aa24 <__assert_fail@plt+0x18430>
   2a708:	mov	r2, r5
   2a70c:	mov	r3, #0
   2a710:	str	r7, [sp, #88]	; 0x58
   2a714:	ldr	r7, [sp, #152]	; 0x98
   2a718:	str	r5, [sp, #92]	; 0x5c
   2a71c:	str	r6, [sp, #84]	; 0x54
   2a720:	mov	r5, r3
   2a724:	mov	r6, r2
   2a728:	str	r4, [sp, #80]	; 0x50
   2a72c:	ldr	r3, [sp, #56]	; 0x38
   2a730:	add	r9, sl, r5
   2a734:	add	r8, r3, r9
   2a738:	ldr	r3, [sp, #24]
   2a73c:	mov	r1, r8
   2a740:	sub	r2, r3, r9
   2a744:	add	r0, sp, #100	; 0x64
   2a748:	add	r3, sp, #104	; 0x68
   2a74c:	bl	2fe64 <__assert_fail@plt+0x1d870>
   2a750:	subs	r4, r0, #0
   2a754:	beq	2aafc <__assert_fail@plt+0x18508>
   2a758:	cmn	r4, #1
   2a75c:	beq	2aadc <__assert_fail@plt+0x184e8>
   2a760:	cmn	r4, #2
   2a764:	beq	2aa7c <__assert_fail@plt+0x18488>
   2a768:	ldr	r2, [sp, #28]
   2a76c:	cmp	r7, #2
   2a770:	movne	r2, #0
   2a774:	andeq	r2, r2, #1
   2a778:	cmp	r2, #0
   2a77c:	beq	2a52c <__assert_fail@plt+0x17f38>
   2a780:	cmp	r4, #1
   2a784:	beq	2a52c <__assert_fail@plt+0x17f38>
   2a788:	sub	r3, r4, #1
   2a78c:	add	r9, r3, r9
   2a790:	ldr	r3, [sp, #56]	; 0x38
   2a794:	add	r9, r3, r9
   2a798:	ldrb	r3, [r8, #1]!
   2a79c:	sub	r3, r3, #91	; 0x5b
   2a7a0:	cmp	r3, #33	; 0x21
   2a7a4:	ldrls	pc, [pc, r3, lsl #2]
   2a7a8:	b	2a524 <__assert_fail@plt+0x17f30>
   2a7ac:	andeq	sl, r2, r4, lsr r8
   2a7b0:	andeq	sl, r2, r4, lsr r8
   2a7b4:	andeq	sl, r2, r4, lsr #10
   2a7b8:	andeq	sl, r2, r4, lsr r8
   2a7bc:	andeq	sl, r2, r4, lsr #10
   2a7c0:	andeq	sl, r2, r4, lsr r8
   2a7c4:	andeq	sl, r2, r4, lsr #10
   2a7c8:	andeq	sl, r2, r4, lsr #10
   2a7cc:	andeq	sl, r2, r4, lsr #10
   2a7d0:	andeq	sl, r2, r4, lsr #10
   2a7d4:	andeq	sl, r2, r4, lsr #10
   2a7d8:	andeq	sl, r2, r4, lsr #10
   2a7dc:	andeq	sl, r2, r4, lsr #10
   2a7e0:	andeq	sl, r2, r4, lsr #10
   2a7e4:	andeq	sl, r2, r4, lsr #10
   2a7e8:	andeq	sl, r2, r4, lsr #10
   2a7ec:	andeq	sl, r2, r4, lsr #10
   2a7f0:	andeq	sl, r2, r4, lsr #10
   2a7f4:	andeq	sl, r2, r4, lsr #10
   2a7f8:	andeq	sl, r2, r4, lsr #10
   2a7fc:	andeq	sl, r2, r4, lsr #10
   2a800:	andeq	sl, r2, r4, lsr #10
   2a804:	andeq	sl, r2, r4, lsr #10
   2a808:	andeq	sl, r2, r4, lsr #10
   2a80c:	andeq	sl, r2, r4, lsr #10
   2a810:	andeq	sl, r2, r4, lsr #10
   2a814:	andeq	sl, r2, r4, lsr #10
   2a818:	andeq	sl, r2, r4, lsr #10
   2a81c:	andeq	sl, r2, r4, lsr #10
   2a820:	andeq	sl, r2, r4, lsr #10
   2a824:	andeq	sl, r2, r4, lsr #10
   2a828:	andeq	sl, r2, r4, lsr #10
   2a82c:	andeq	sl, r2, r4, lsr #10
   2a830:	andeq	sl, r2, r4, lsr r8
   2a834:	mov	r3, #2
   2a838:	ldr	sl, [sp, #32]
   2a83c:	mov	r8, fp
   2a840:	str	r3, [sp, #152]	; 0x98
   2a844:	b	29fbc <__assert_fail@plt+0x179c8>
   2a848:	ldr	r3, [sp, #156]	; 0x9c
   2a84c:	tst	r3, #1
   2a850:	bne	2a97c <__assert_fail@plt+0x18388>
   2a854:	ldr	r3, [sp, #152]	; 0x98
   2a858:	ldr	r4, [sp, #44]	; 0x2c
   2a85c:	sub	r2, r3, #2
   2a860:	mov	r5, #0
   2a864:	clz	r2, r2
   2a868:	mov	r8, r4
   2a86c:	lsr	r2, r2, #5
   2a870:	b	29d7c <__assert_fail@plt+0x17788>
   2a874:	ldr	r3, [sp, #156]	; 0x9c
   2a878:	ands	r9, r3, #4
   2a87c:	beq	2a9b4 <__assert_fail@plt+0x183c0>
   2a880:	ldr	r2, [sp, #24]
   2a884:	add	r3, sl, #2
   2a888:	cmp	r3, r2
   2a88c:	bcs	2a8a0 <__assert_fail@plt+0x182ac>
   2a890:	ldr	r2, [sp, #48]	; 0x30
   2a894:	ldrb	r4, [r2, #1]
   2a898:	cmp	r4, #63	; 0x3f
   2a89c:	beq	2ab3c <__assert_fail@plt+0x18548>
   2a8a0:	mov	r2, #0
   2a8a4:	mov	r8, r2
   2a8a8:	mov	r5, r2
   2a8ac:	mov	r4, #63	; 0x3f
   2a8b0:	b	29d7c <__assert_fail@plt+0x17788>
   2a8b4:	ldr	r3, [sp, #28]
   2a8b8:	cmp	r3, #0
   2a8bc:	bne	2abe0 <__assert_fail@plt+0x185ec>
   2a8c0:	mov	r2, r5
   2a8c4:	mov	r8, r3
   2a8c8:	mov	r5, #0
   2a8cc:	mov	r4, #63	; 0x3f
   2a8d0:	b	29d7c <__assert_fail@plt+0x17788>
   2a8d4:	ldr	r3, [sp, #28]
   2a8d8:	cmp	r3, #0
   2a8dc:	bne	2abe0 <__assert_fail@plt+0x185ec>
   2a8e0:	ldr	r2, [sp, #72]	; 0x48
   2a8e4:	adds	r3, fp, #0
   2a8e8:	movne	r3, #1
   2a8ec:	cmp	r2, #0
   2a8f0:	movne	r3, #0
   2a8f4:	cmp	r3, #0
   2a8f8:	strne	fp, [sp, #72]	; 0x48
   2a8fc:	movne	fp, #0
   2a900:	bne	2a93c <__assert_fail@plt+0x18348>
   2a904:	cmp	fp, r7
   2a908:	movhi	r2, #39	; 0x27
   2a90c:	ldrhi	r3, [sp, #32]
   2a910:	strbhi	r2, [r3, r7]
   2a914:	add	r3, r7, #1
   2a918:	cmp	fp, r3
   2a91c:	movhi	r1, #92	; 0x5c
   2a920:	ldrhi	r2, [sp, #32]
   2a924:	strbhi	r1, [r2, r3]
   2a928:	add	r3, r7, #2
   2a92c:	cmp	fp, r3
   2a930:	movhi	r1, #39	; 0x27
   2a934:	ldrhi	r2, [sp, #32]
   2a938:	strbhi	r1, [r2, r3]
   2a93c:	ldr	r3, [sp, #28]
   2a940:	add	r7, r7, #3
   2a944:	mov	r2, r5
   2a948:	mov	r8, r3
   2a94c:	str	r5, [sp, #68]	; 0x44
   2a950:	str	r3, [sp, #40]	; 0x28
   2a954:	mov	r4, #39	; 0x27
   2a958:	b	29d7c <__assert_fail@plt+0x17788>
   2a95c:	ldr	r3, [sp, #56]	; 0x38
   2a960:	ldrb	r3, [r3, #1]
   2a964:	adds	r3, r3, #0
   2a968:	movne	r3, #1
   2a96c:	b	29d54 <__assert_fail@plt+0x17760>
   2a970:	ldr	r5, [sp, #28]
   2a974:	mov	r4, #48	; 0x30
   2a978:	b	29d7c <__assert_fail@plt+0x17788>
   2a97c:	add	sl, sl, #1
   2a980:	b	298ac <__assert_fail@plt+0x172b8>
   2a984:	mov	sl, r3
   2a988:	ldr	r3, [sp, #28]
   2a98c:	mov	r8, fp
   2a990:	str	r3, [sp, #44]	; 0x2c
   2a994:	ldr	r3, [sp, #152]	; 0x98
   2a998:	sub	r2, r3, #2
   2a99c:	clz	r2, r2
   2a9a0:	lsr	r2, r2, #5
   2a9a4:	b	29fbc <__assert_fail@plt+0x179c8>
   2a9a8:	str	ip, [sp, #40]	; 0x28
   2a9ac:	ldr	r5, [sp, #48]	; 0x30
   2a9b0:	b	29dec <__assert_fail@plt+0x177f8>
   2a9b4:	mov	r2, r9
   2a9b8:	mov	r8, r9
   2a9bc:	mov	r5, #0
   2a9c0:	mov	r4, #63	; 0x3f
   2a9c4:	b	29d7c <__assert_fail@plt+0x17788>
   2a9c8:	cmp	fp, #0
   2a9cc:	beq	2aa44 <__assert_fail@plt+0x18450>
   2a9d0:	ldr	r1, [sp, #32]
   2a9d4:	mov	r3, #34	; 0x22
   2a9d8:	mov	r2, #1
   2a9dc:	strb	r3, [r1]
   2a9e0:	ldr	r3, [pc, #332]	; 2ab34 <__assert_fail@plt+0x18540>
   2a9e4:	str	r2, [sp, #52]	; 0x34
   2a9e8:	mov	r7, r2
   2a9ec:	str	r2, [sp, #44]	; 0x2c
   2a9f0:	str	r3, [sp, #64]	; 0x40
   2a9f4:	b	2989c <__assert_fail@plt+0x172a8>
   2a9f8:	ldr	r3, [pc, #300]	; 2ab2c <__assert_fail@plt+0x18538>
   2a9fc:	str	r3, [sp, #64]	; 0x40
   2aa00:	mov	r3, #0
   2aa04:	str	r3, [sp, #28]
   2aa08:	mov	r3, #1
   2aa0c:	str	r3, [sp, #52]	; 0x34
   2aa10:	mov	r7, r3
   2aa14:	mov	r3, #2
   2aa18:	str	r3, [sp, #152]	; 0x98
   2aa1c:	b	2989c <__assert_fail@plt+0x172a8>
   2aa20:	bl	125a0 <abort@plt>
   2aa24:	ldr	r0, [sp, #56]	; 0x38
   2aa28:	bl	12300 <strlen@plt>
   2aa2c:	str	r0, [sp, #24]
   2aa30:	b	2a708 <__assert_fail@plt+0x18114>
   2aa34:	mov	r5, r8
   2aa38:	mov	r4, #48	; 0x30
   2aa3c:	ldr	r8, [sp, #44]	; 0x2c
   2aa40:	b	29d7c <__assert_fail@plt+0x17788>
   2aa44:	mov	r3, #1
   2aa48:	str	r3, [sp, #52]	; 0x34
   2aa4c:	mov	r7, r3
   2aa50:	str	r3, [sp, #44]	; 0x2c
   2aa54:	ldr	r3, [pc, #216]	; 2ab34 <__assert_fail@plt+0x18540>
   2aa58:	str	r3, [sp, #64]	; 0x40
   2aa5c:	b	2989c <__assert_fail@plt+0x172a8>
   2aa60:	ldr	sl, [sp, #32]
   2aa64:	mov	r8, fp
   2aa68:	mov	r2, r3
   2aa6c:	b	29fbc <__assert_fail@plt+0x179c8>
   2aa70:	mov	r3, r5
   2aa74:	mov	r5, r2
   2aa78:	b	2a274 <__assert_fail@plt+0x17c80>
   2aa7c:	ldr	r1, [sp, #24]
   2aa80:	mov	r2, r5
   2aa84:	cmp	r1, r9
   2aa88:	mov	ip, r5
   2aa8c:	ldr	r4, [sp, #80]	; 0x50
   2aa90:	ldr	r5, [sp, #92]	; 0x5c
   2aa94:	ldr	r6, [sp, #84]	; 0x54
   2aa98:	ldr	r7, [sp, #88]	; 0x58
   2aa9c:	bls	2aad0 <__assert_fail@plt+0x184dc>
   2aaa0:	ldrb	r3, [r8]
   2aaa4:	cmp	r3, #0
   2aaa8:	bne	2aabc <__assert_fail@plt+0x184c8>
   2aaac:	b	2aad4 <__assert_fail@plt+0x184e0>
   2aab0:	ldrb	r3, [r8, #1]!
   2aab4:	cmp	r3, #0
   2aab8:	beq	2abd4 <__assert_fail@plt+0x185e0>
   2aabc:	add	r2, r2, #1
   2aac0:	add	r3, sl, r2
   2aac4:	cmp	r1, r3
   2aac8:	bhi	2aab0 <__assert_fail@plt+0x184bc>
   2aacc:	mov	ip, r2
   2aad0:	mov	r3, #0
   2aad4:	mov	r2, r3
   2aad8:	b	2a56c <__assert_fail@plt+0x17f78>
   2aadc:	mov	r3, #0
   2aae0:	mov	ip, r5
   2aae4:	ldr	r4, [sp, #80]	; 0x50
   2aae8:	ldr	r5, [sp, #92]	; 0x5c
   2aaec:	ldr	r6, [sp, #84]	; 0x54
   2aaf0:	ldr	r7, [sp, #88]	; 0x58
   2aaf4:	mov	r2, r3
   2aaf8:	b	2a56c <__assert_fail@plt+0x17f78>
   2aafc:	mov	r3, r6
   2ab00:	mov	ip, r5
   2ab04:	eor	r5, r3, #1
   2ab08:	mov	r2, r6
   2ab0c:	ldr	r4, [sp, #80]	; 0x50
   2ab10:	ldr	r6, [sp, #84]	; 0x54
   2ab14:	ldr	r7, [sp, #88]	; 0x58
   2ab18:	uxtb	r5, r5
   2ab1c:	b	2a56c <__assert_fail@plt+0x17f78>
   2ab20:	ldr	sl, [sp, #32]
   2ab24:	mov	r8, fp
   2ab28:	b	2a990 <__assert_fail@plt+0x1839c>
   2ab2c:	andeq	r0, r4, ip, ror pc
   2ab30:	andeq	r5, r4, r0, lsr #19
   2ab34:	muleq	r4, ip, r9
   2ab38:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   2ab3c:	ldr	r2, [sp, #56]	; 0x38
   2ab40:	ldrb	r1, [r2, r3]
   2ab44:	sub	r2, r1, #33	; 0x21
   2ab48:	uxtb	r2, r2
   2ab4c:	cmp	r2, #29
   2ab50:	bhi	2abf0 <__assert_fail@plt+0x185fc>
   2ab54:	ldr	r0, [pc, #-36]	; 2ab38 <__assert_fail@plt+0x18544>
   2ab58:	mov	ip, #1
   2ab5c:	ands	r2, r0, ip, lsl r2
   2ab60:	beq	2ac00 <__assert_fail@plt+0x1860c>
   2ab64:	ldr	r2, [sp, #28]
   2ab68:	cmp	r2, #0
   2ab6c:	bne	2ad00 <__assert_fail@plt+0x1870c>
   2ab70:	cmp	fp, r7
   2ab74:	ldr	r8, [sp, #28]
   2ab78:	ldrhi	r2, [sp, #32]
   2ab7c:	mov	sl, r3
   2ab80:	mov	r5, r8
   2ab84:	strbhi	r4, [r2, r7]
   2ab88:	add	r2, r7, #1
   2ab8c:	cmp	fp, r2
   2ab90:	movhi	r0, #34	; 0x22
   2ab94:	ldrhi	ip, [sp, #32]
   2ab98:	mov	r4, r1
   2ab9c:	strbhi	r0, [ip, r2]
   2aba0:	add	r2, r7, #2
   2aba4:	cmp	fp, r2
   2aba8:	movhi	r0, #34	; 0x22
   2abac:	ldrhi	ip, [sp, #32]
   2abb0:	strbhi	r0, [ip, r2]
   2abb4:	add	r2, r7, #3
   2abb8:	cmp	fp, r2
   2abbc:	movhi	r0, #63	; 0x3f
   2abc0:	ldrhi	ip, [sp, #32]
   2abc4:	add	r7, r7, #4
   2abc8:	strbhi	r0, [ip, r2]
   2abcc:	mov	r2, r8
   2abd0:	b	29d7c <__assert_fail@plt+0x17788>
   2abd4:	mov	ip, r2
   2abd8:	mov	r2, r3
   2abdc:	b	2a56c <__assert_fail@plt+0x17f78>
   2abe0:	ldr	sl, [sp, #32]
   2abe4:	mov	r8, fp
   2abe8:	ldr	r2, [sp, #28]
   2abec:	b	29fbc <__assert_fail@plt+0x179c8>
   2abf0:	mov	r2, #0
   2abf4:	mov	r8, r2
   2abf8:	mov	r5, r2
   2abfc:	b	29d7c <__assert_fail@plt+0x17788>
   2ac00:	mov	r8, r2
   2ac04:	mov	r5, #0
   2ac08:	b	29d7c <__assert_fail@plt+0x17788>
   2ac0c:	ldr	r1, [sp, #152]	; 0x98
   2ac10:	bl	296d8 <__assert_fail@plt+0x170e4>
   2ac14:	str	r0, [sp, #168]	; 0xa8
   2ac18:	b	29c38 <__assert_fail@plt+0x17644>
   2ac1c:	ldr	r1, [sp, #152]	; 0x98
   2ac20:	bl	296d8 <__assert_fail@plt+0x170e4>
   2ac24:	str	r0, [sp, #164]	; 0xa4
   2ac28:	b	29c18 <__assert_fail@plt+0x17624>
   2ac2c:	ldr	r7, [sp, #28]
   2ac30:	b	29c78 <__assert_fail@plt+0x17684>
   2ac34:	ldr	sl, [sp, #32]
   2ac38:	ldr	r2, [sp, #68]	; 0x44
   2ac3c:	mov	r8, fp
   2ac40:	mov	fp, r7
   2ac44:	ldr	r3, [sp, #64]	; 0x40
   2ac48:	cmp	r3, #0
   2ac4c:	moveq	r2, #0
   2ac50:	andne	r2, r2, #1
   2ac54:	cmp	r2, #0
   2ac58:	beq	2ac84 <__assert_fail@plt+0x18690>
   2ac5c:	mov	r2, r3
   2ac60:	ldrb	r3, [r3]
   2ac64:	cmp	r3, #0
   2ac68:	beq	2ac84 <__assert_fail@plt+0x18690>
   2ac6c:	cmp	r8, fp
   2ac70:	strbhi	r3, [sl, fp]
   2ac74:	ldrb	r3, [r2, #1]!
   2ac78:	add	fp, fp, #1
   2ac7c:	cmp	r3, #0
   2ac80:	bne	2ac6c <__assert_fail@plt+0x18678>
   2ac84:	cmp	r8, fp
   2ac88:	movhi	r3, #0
   2ac8c:	strbhi	r3, [sl, fp]
   2ac90:	b	2a018 <__assert_fail@plt+0x17a24>
   2ac94:	ldr	r3, [sp, #168]	; 0xa8
   2ac98:	ldr	sl, [sp, #32]
   2ac9c:	str	r3, [sp, #16]
   2aca0:	ldr	r3, [sp, #164]	; 0xa4
   2aca4:	mov	ip, #5
   2aca8:	str	r3, [sp, #12]
   2acac:	ldr	r3, [sp, #160]	; 0xa0
   2acb0:	ldr	r2, [sp, #56]	; 0x38
   2acb4:	str	r3, [sp, #8]
   2acb8:	ldr	r3, [sp, #156]	; 0x9c
   2acbc:	ldr	r1, [sp, #72]	; 0x48
   2acc0:	str	r3, [sp, #4]
   2acc4:	mov	r0, sl
   2acc8:	ldr	r3, [sp, #24]
   2accc:	str	ip, [sp]
   2acd0:	bl	297f8 <__assert_fail@plt+0x17204>
   2acd4:	mov	fp, r0
   2acd8:	b	2a018 <__assert_fail@plt+0x17a24>
   2acdc:	mov	r8, fp
   2ace0:	ldr	sl, [sp, #32]
   2ace4:	mov	fp, r7
   2ace8:	mov	r2, r3
   2acec:	b	2ac44 <__assert_fail@plt+0x18650>
   2acf0:	mov	r8, fp
   2acf4:	ldr	sl, [sp, #32]
   2acf8:	mov	fp, r7
   2acfc:	b	2ac44 <__assert_fail@plt+0x18650>
   2ad00:	ldr	sl, [sp, #32]
   2ad04:	mov	r8, fp
   2ad08:	b	29fd4 <__assert_fail@plt+0x179e0>
   2ad0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad10:	sub	sp, sp, #52	; 0x34
   2ad14:	mov	r4, r0
   2ad18:	mov	r5, r3
   2ad1c:	mov	sl, r1
   2ad20:	mov	fp, r2
   2ad24:	bl	12348 <__errno_location@plt>
   2ad28:	ldr	r7, [pc, #412]	; 2aecc <__assert_fail@plt+0x188d8>
   2ad2c:	cmn	r4, #-2147483647	; 0x80000001
   2ad30:	ldr	r6, [r7]
   2ad34:	mov	r8, r0
   2ad38:	movne	r0, #0
   2ad3c:	moveq	r0, #1
   2ad40:	ldr	r3, [r8]
   2ad44:	orrs	r0, r0, r4, lsr #31
   2ad48:	str	r3, [sp, #24]
   2ad4c:	bne	2aec8 <__assert_fail@plt+0x188d4>
   2ad50:	ldr	r2, [r7, #4]
   2ad54:	cmp	r4, r2
   2ad58:	blt	2adb8 <__assert_fail@plt+0x187c4>
   2ad5c:	add	r9, r7, #8
   2ad60:	cmp	r6, r9
   2ad64:	str	r2, [sp, #44]	; 0x2c
   2ad68:	beq	2ae98 <__assert_fail@plt+0x188a4>
   2ad6c:	mov	r3, #8
   2ad70:	sub	r2, r4, r2
   2ad74:	mov	r0, r6
   2ad78:	str	r3, [sp]
   2ad7c:	add	r2, r2, #1
   2ad80:	mvn	r3, #-2147483648	; 0x80000000
   2ad84:	add	r1, sp, #44	; 0x2c
   2ad88:	bl	2c310 <__assert_fail@plt+0x19d1c>
   2ad8c:	mov	r6, r0
   2ad90:	str	r0, [r7]
   2ad94:	ldr	r0, [r7, #4]
   2ad98:	ldr	r2, [sp, #44]	; 0x2c
   2ad9c:	mov	r1, #0
   2ada0:	sub	r2, r2, r0
   2ada4:	add	r0, r6, r0, lsl #3
   2ada8:	lsl	r2, r2, #3
   2adac:	bl	12378 <memset@plt>
   2adb0:	ldr	r3, [sp, #44]	; 0x2c
   2adb4:	str	r3, [r7, #4]
   2adb8:	add	r3, r6, r4, lsl #3
   2adbc:	ldr	r1, [r5, #4]
   2adc0:	ldr	r7, [r3, #4]
   2adc4:	ldr	r9, [r6, r4, lsl #3]
   2adc8:	ldr	r2, [r5, #40]	; 0x28
   2adcc:	ldr	ip, [r5, #44]	; 0x2c
   2add0:	add	r0, r5, #8
   2add4:	str	r3, [sp, #28]
   2add8:	ldr	r3, [r5]
   2addc:	orr	r1, r1, #1
   2ade0:	mov	lr, r0
   2ade4:	str	r1, [sp, #32]
   2ade8:	str	r0, [sp, #36]	; 0x24
   2adec:	str	r1, [sp, #4]
   2adf0:	str	r2, [sp, #12]
   2adf4:	str	r3, [sp]
   2adf8:	mov	r0, r7
   2adfc:	mov	r1, r9
   2ae00:	str	ip, [sp, #16]
   2ae04:	str	lr, [sp, #8]
   2ae08:	mov	r3, fp
   2ae0c:	mov	r2, sl
   2ae10:	bl	297f8 <__assert_fail@plt+0x17204>
   2ae14:	cmp	r9, r0
   2ae18:	bhi	2ae84 <__assert_fail@plt+0x18890>
   2ae1c:	ldr	r3, [pc, #172]	; 2aed0 <__assert_fail@plt+0x188dc>
   2ae20:	add	r9, r0, #1
   2ae24:	cmp	r7, r3
   2ae28:	str	r9, [r6, r4, lsl #3]
   2ae2c:	beq	2ae38 <__assert_fail@plt+0x18844>
   2ae30:	mov	r0, r7
   2ae34:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ae38:	mov	r0, r9
   2ae3c:	bl	2c1ac <__assert_fail@plt+0x19bb8>
   2ae40:	ldr	lr, [sp, #28]
   2ae44:	ldr	ip, [r5, #44]	; 0x2c
   2ae48:	ldr	r4, [r5, #40]	; 0x28
   2ae4c:	mov	r3, fp
   2ae50:	mov	r2, sl
   2ae54:	mov	r1, r9
   2ae58:	str	r0, [lr, #4]
   2ae5c:	ldr	lr, [r5]
   2ae60:	ldr	r5, [sp, #36]	; 0x24
   2ae64:	str	ip, [sp, #16]
   2ae68:	str	r5, [sp, #8]
   2ae6c:	ldr	r5, [sp, #32]
   2ae70:	str	r4, [sp, #12]
   2ae74:	str	r5, [sp, #4]
   2ae78:	str	lr, [sp]
   2ae7c:	mov	r7, r0
   2ae80:	bl	297f8 <__assert_fail@plt+0x17204>
   2ae84:	ldr	r3, [sp, #24]
   2ae88:	mov	r0, r7
   2ae8c:	str	r3, [r8]
   2ae90:	add	sp, sp, #52	; 0x34
   2ae94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae98:	mov	r3, #8
   2ae9c:	sub	r2, r4, r2
   2aea0:	str	r3, [sp]
   2aea4:	add	r1, sp, #44	; 0x2c
   2aea8:	add	r2, r2, #1
   2aeac:	mvn	r3, #-2147483648	; 0x80000000
   2aeb0:	bl	2c310 <__assert_fail@plt+0x19d1c>
   2aeb4:	mov	r6, r0
   2aeb8:	ldm	r9, {r0, r1}
   2aebc:	str	r6, [r7]
   2aec0:	stm	r6, {r0, r1}
   2aec4:	b	2ad94 <__assert_fail@plt+0x187a0>
   2aec8:	bl	125a0 <abort@plt>
   2aecc:	strdeq	r7, [r5], -r4
   2aed0:	andeq	r7, r5, r8, lsl #26
   2aed4:	push	{r4, r5, r6, lr}
   2aed8:	mov	r5, r0
   2aedc:	bl	12348 <__errno_location@plt>
   2aee0:	cmp	r5, #0
   2aee4:	mov	r1, #48	; 0x30
   2aee8:	mov	r4, r0
   2aeec:	ldr	r0, [pc, #16]	; 2af04 <__assert_fail@plt+0x18910>
   2aef0:	ldr	r6, [r4]
   2aef4:	movne	r0, r5
   2aef8:	bl	2c60c <__assert_fail@plt+0x1a018>
   2aefc:	str	r6, [r4]
   2af00:	pop	{r4, r5, r6, pc}
   2af04:	andeq	r7, r5, r8, lsl #28
   2af08:	ldr	r3, [pc, #12]	; 2af1c <__assert_fail@plt+0x18928>
   2af0c:	cmp	r0, #0
   2af10:	moveq	r0, r3
   2af14:	ldr	r0, [r0]
   2af18:	bx	lr
   2af1c:	andeq	r7, r5, r8, lsl #28
   2af20:	ldr	r3, [pc, #12]	; 2af34 <__assert_fail@plt+0x18940>
   2af24:	cmp	r0, #0
   2af28:	moveq	r0, r3
   2af2c:	str	r1, [r0]
   2af30:	bx	lr
   2af34:	andeq	r7, r5, r8, lsl #28
   2af38:	ldr	r3, [pc, #52]	; 2af74 <__assert_fail@plt+0x18980>
   2af3c:	cmp	r0, #0
   2af40:	moveq	r0, r3
   2af44:	add	r3, r0, #8
   2af48:	push	{lr}		; (str lr, [sp, #-4]!)
   2af4c:	lsr	lr, r1, #5
   2af50:	and	r1, r1, #31
   2af54:	ldr	ip, [r3, lr, lsl #2]
   2af58:	lsr	r0, ip, r1
   2af5c:	eor	r2, r2, r0
   2af60:	and	r2, r2, #1
   2af64:	and	r0, r0, #1
   2af68:	eor	r1, ip, r2, lsl r1
   2af6c:	str	r1, [r3, lr, lsl #2]
   2af70:	pop	{pc}		; (ldr pc, [sp], #4)
   2af74:	andeq	r7, r5, r8, lsl #28
   2af78:	ldr	r3, [pc, #16]	; 2af90 <__assert_fail@plt+0x1899c>
   2af7c:	cmp	r0, #0
   2af80:	movne	r3, r0
   2af84:	ldr	r0, [r3, #4]
   2af88:	str	r1, [r3, #4]
   2af8c:	bx	lr
   2af90:	andeq	r7, r5, r8, lsl #28
   2af94:	ldr	r3, [pc, #44]	; 2afc8 <__assert_fail@plt+0x189d4>
   2af98:	cmp	r0, #0
   2af9c:	moveq	r0, r3
   2afa0:	mov	ip, #10
   2afa4:	cmp	r2, #0
   2afa8:	cmpne	r1, #0
   2afac:	str	ip, [r0]
   2afb0:	beq	2afc0 <__assert_fail@plt+0x189cc>
   2afb4:	str	r1, [r0, #40]	; 0x28
   2afb8:	str	r2, [r0, #44]	; 0x2c
   2afbc:	bx	lr
   2afc0:	push	{r4, lr}
   2afc4:	bl	125a0 <abort@plt>
   2afc8:	andeq	r7, r5, r8, lsl #28
   2afcc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2afd0:	sub	sp, sp, #24
   2afd4:	ldr	ip, [pc, #108]	; 2b048 <__assert_fail@plt+0x18a54>
   2afd8:	ldr	r4, [sp, #56]	; 0x38
   2afdc:	mov	r9, r2
   2afe0:	cmp	r4, #0
   2afe4:	moveq	r4, ip
   2afe8:	mov	sl, r3
   2afec:	mov	r7, r0
   2aff0:	mov	r8, r1
   2aff4:	bl	12348 <__errno_location@plt>
   2aff8:	ldr	r3, [r4, #44]	; 0x2c
   2affc:	mov	r1, r8
   2b000:	ldr	r6, [r0]
   2b004:	str	r3, [sp, #16]
   2b008:	ldr	r2, [r4, #40]	; 0x28
   2b00c:	add	r3, r4, #8
   2b010:	str	r3, [sp, #8]
   2b014:	str	r2, [sp, #12]
   2b018:	ldr	r2, [r4, #4]
   2b01c:	mov	r5, r0
   2b020:	str	r2, [sp, #4]
   2b024:	ldr	ip, [r4]
   2b028:	mov	r3, sl
   2b02c:	mov	r2, r9
   2b030:	mov	r0, r7
   2b034:	str	ip, [sp]
   2b038:	bl	297f8 <__assert_fail@plt+0x17204>
   2b03c:	str	r6, [r5]
   2b040:	add	sp, sp, #24
   2b044:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b048:	andeq	r7, r5, r8, lsl #28
   2b04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b050:	cmp	r3, #0
   2b054:	sub	sp, sp, #44	; 0x2c
   2b058:	ldr	r4, [pc, #192]	; 2b120 <__assert_fail@plt+0x18b2c>
   2b05c:	mov	r6, r2
   2b060:	movne	r4, r3
   2b064:	mov	r9, r1
   2b068:	mov	r8, r0
   2b06c:	bl	12348 <__errno_location@plt>
   2b070:	ldr	r3, [r4, #44]	; 0x2c
   2b074:	ldr	r5, [r4, #4]
   2b078:	add	sl, r4, #8
   2b07c:	cmp	r6, #0
   2b080:	orreq	r5, r5, #1
   2b084:	mov	r1, #0
   2b088:	ldr	r2, [r0]
   2b08c:	str	r3, [sp, #16]
   2b090:	ldr	r3, [r4, #40]	; 0x28
   2b094:	stmib	sp, {r5, sl}
   2b098:	str	r3, [sp, #12]
   2b09c:	ldr	r3, [r4]
   2b0a0:	mov	r7, r0
   2b0a4:	str	r2, [sp, #28]
   2b0a8:	str	r3, [sp]
   2b0ac:	mov	r2, r8
   2b0b0:	mov	r3, r9
   2b0b4:	mov	r0, r1
   2b0b8:	bl	297f8 <__assert_fail@plt+0x17204>
   2b0bc:	add	r1, r0, #1
   2b0c0:	mov	fp, r0
   2b0c4:	mov	r0, r1
   2b0c8:	str	r1, [sp, #36]	; 0x24
   2b0cc:	bl	2c1ac <__assert_fail@plt+0x19bb8>
   2b0d0:	ldr	r3, [r4, #44]	; 0x2c
   2b0d4:	mov	r2, r8
   2b0d8:	str	r3, [sp, #16]
   2b0dc:	ldr	r3, [r4, #40]	; 0x28
   2b0e0:	str	r5, [sp, #4]
   2b0e4:	str	r3, [sp, #12]
   2b0e8:	str	sl, [sp, #8]
   2b0ec:	ldr	ip, [r4]
   2b0f0:	ldr	r1, [sp, #36]	; 0x24
   2b0f4:	mov	r3, r9
   2b0f8:	str	ip, [sp]
   2b0fc:	str	r0, [sp, #32]
   2b100:	bl	297f8 <__assert_fail@plt+0x17204>
   2b104:	ldr	r2, [sp, #28]
   2b108:	cmp	r6, #0
   2b10c:	str	r2, [r7]
   2b110:	ldr	r0, [sp, #32]
   2b114:	strne	fp, [r6]
   2b118:	add	sp, sp, #44	; 0x2c
   2b11c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b120:	andeq	r7, r5, r8, lsl #28
   2b124:	mov	r3, r2
   2b128:	mov	r2, #0
   2b12c:	b	2b04c <__assert_fail@plt+0x18a58>
   2b130:	push	{r4, r5, r6, r7, r8, lr}
   2b134:	ldr	r6, [pc, #116]	; 2b1b0 <__assert_fail@plt+0x18bbc>
   2b138:	ldr	r3, [r6, #4]
   2b13c:	ldr	r7, [r6]
   2b140:	cmp	r3, #1
   2b144:	movgt	r5, r7
   2b148:	movgt	r4, #1
   2b14c:	ble	2b16c <__assert_fail@plt+0x18b78>
   2b150:	ldr	r0, [r5, #12]
   2b154:	bl	2db68 <__assert_fail@plt+0x1b574>
   2b158:	ldr	r3, [r6, #4]
   2b15c:	add	r4, r4, #1
   2b160:	cmp	r3, r4
   2b164:	add	r5, r5, #8
   2b168:	bgt	2b150 <__assert_fail@plt+0x18b5c>
   2b16c:	ldr	r0, [r7, #4]
   2b170:	ldr	r4, [pc, #60]	; 2b1b4 <__assert_fail@plt+0x18bc0>
   2b174:	cmp	r0, r4
   2b178:	beq	2b18c <__assert_fail@plt+0x18b98>
   2b17c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2b180:	mov	r3, #256	; 0x100
   2b184:	str	r4, [r6, #12]
   2b188:	str	r3, [r6, #8]
   2b18c:	ldr	r4, [pc, #36]	; 2b1b8 <__assert_fail@plt+0x18bc4>
   2b190:	cmp	r7, r4
   2b194:	beq	2b1a4 <__assert_fail@plt+0x18bb0>
   2b198:	mov	r0, r7
   2b19c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2b1a0:	str	r4, [r6]
   2b1a4:	mov	r3, #1
   2b1a8:	str	r3, [r6, #4]
   2b1ac:	pop	{r4, r5, r6, r7, r8, pc}
   2b1b0:	strdeq	r7, [r5], -r4
   2b1b4:	andeq	r7, r5, r8, lsl #26
   2b1b8:	strdeq	r7, [r5], -ip
   2b1bc:	ldr	r3, [pc, #4]	; 2b1c8 <__assert_fail@plt+0x18bd4>
   2b1c0:	mvn	r2, #0
   2b1c4:	b	2ad0c <__assert_fail@plt+0x18718>
   2b1c8:	andeq	r7, r5, r8, lsl #28
   2b1cc:	ldr	r3, [pc]	; 2b1d4 <__assert_fail@plt+0x18be0>
   2b1d0:	b	2ad0c <__assert_fail@plt+0x18718>
   2b1d4:	andeq	r7, r5, r8, lsl #28
   2b1d8:	mov	r1, r0
   2b1dc:	ldr	r3, [pc, #8]	; 2b1ec <__assert_fail@plt+0x18bf8>
   2b1e0:	mvn	r2, #0
   2b1e4:	mov	r0, #0
   2b1e8:	b	2ad0c <__assert_fail@plt+0x18718>
   2b1ec:	andeq	r7, r5, r8, lsl #28
   2b1f0:	mov	r2, r1
   2b1f4:	ldr	r3, [pc, #8]	; 2b204 <__assert_fail@plt+0x18c10>
   2b1f8:	mov	r1, r0
   2b1fc:	mov	r0, #0
   2b200:	b	2ad0c <__assert_fail@plt+0x18718>
   2b204:	andeq	r7, r5, r8, lsl #28
   2b208:	push	{r4, r5, lr}
   2b20c:	sub	sp, sp, #52	; 0x34
   2b210:	mov	r5, r2
   2b214:	mov	r4, r0
   2b218:	mov	r0, sp
   2b21c:	bl	296a8 <__assert_fail@plt+0x170b4>
   2b220:	mov	r3, sp
   2b224:	mov	r1, r5
   2b228:	mov	r0, r4
   2b22c:	mvn	r2, #0
   2b230:	bl	2ad0c <__assert_fail@plt+0x18718>
   2b234:	add	sp, sp, #52	; 0x34
   2b238:	pop	{r4, r5, pc}
   2b23c:	push	{r4, r5, r6, lr}
   2b240:	sub	sp, sp, #48	; 0x30
   2b244:	mov	r5, r2
   2b248:	mov	r6, r3
   2b24c:	mov	r4, r0
   2b250:	mov	r0, sp
   2b254:	bl	296a8 <__assert_fail@plt+0x170b4>
   2b258:	mov	r3, sp
   2b25c:	mov	r2, r6
   2b260:	mov	r1, r5
   2b264:	mov	r0, r4
   2b268:	bl	2ad0c <__assert_fail@plt+0x18718>
   2b26c:	add	sp, sp, #48	; 0x30
   2b270:	pop	{r4, r5, r6, pc}
   2b274:	mov	r2, r1
   2b278:	mov	r1, r0
   2b27c:	mov	r0, #0
   2b280:	b	2b208 <__assert_fail@plt+0x18c14>
   2b284:	mov	r3, r2
   2b288:	mov	r2, r1
   2b28c:	mov	r1, r0
   2b290:	mov	r0, #0
   2b294:	b	2b23c <__assert_fail@plt+0x18c48>
   2b298:	push	{r4, r5, r6, r7, r8, lr}
   2b29c:	mov	r7, r0
   2b2a0:	ldr	lr, [pc, #100]	; 2b30c <__assert_fail@plt+0x18d18>
   2b2a4:	mov	r8, r1
   2b2a8:	mov	r4, r2
   2b2ac:	ldm	lr!, {r0, r1, r2, r3}
   2b2b0:	sub	sp, sp, #48	; 0x30
   2b2b4:	mov	ip, sp
   2b2b8:	lsr	r5, r4, #5
   2b2bc:	stmia	ip!, {r0, r1, r2, r3}
   2b2c0:	add	r6, sp, #8
   2b2c4:	ldm	lr!, {r0, r1, r2, r3}
   2b2c8:	and	r4, r4, #31
   2b2cc:	stmia	ip!, {r0, r1, r2, r3}
   2b2d0:	ldm	lr, {r0, r1, r2, r3}
   2b2d4:	stm	ip, {r0, r1, r2, r3}
   2b2d8:	mov	r2, r8
   2b2dc:	ldr	lr, [r6, r5, lsl #2]
   2b2e0:	mov	r1, r7
   2b2e4:	mov	r3, sp
   2b2e8:	lsr	ip, lr, r4
   2b2ec:	eor	ip, ip, #1
   2b2f0:	and	ip, ip, #1
   2b2f4:	mov	r0, #0
   2b2f8:	eor	r4, lr, ip, lsl r4
   2b2fc:	str	r4, [r6, r5, lsl #2]
   2b300:	bl	2ad0c <__assert_fail@plt+0x18718>
   2b304:	add	sp, sp, #48	; 0x30
   2b308:	pop	{r4, r5, r6, r7, r8, pc}
   2b30c:	andeq	r7, r5, r8, lsl #28
   2b310:	mov	r2, r1
   2b314:	mvn	r1, #0
   2b318:	b	2b298 <__assert_fail@plt+0x18ca4>
   2b31c:	mov	r2, #58	; 0x3a
   2b320:	mvn	r1, #0
   2b324:	b	2b298 <__assert_fail@plt+0x18ca4>
   2b328:	mov	r2, #58	; 0x3a
   2b32c:	b	2b298 <__assert_fail@plt+0x18ca4>
   2b330:	push	{r4, r5, r6, r7, lr}
   2b334:	sub	sp, sp, #100	; 0x64
   2b338:	mov	r6, r0
   2b33c:	mov	r0, sp
   2b340:	mov	r7, r2
   2b344:	bl	296a8 <__assert_fail@plt+0x170b4>
   2b348:	mov	ip, sp
   2b34c:	add	lr, sp, #48	; 0x30
   2b350:	ldm	ip!, {r0, r1, r2, r3}
   2b354:	stmia	lr!, {r0, r1, r2, r3}
   2b358:	ldm	ip!, {r0, r1, r2, r3}
   2b35c:	ldr	r5, [sp, #60]	; 0x3c
   2b360:	stmia	lr!, {r0, r1, r2, r3}
   2b364:	mvn	r4, r5
   2b368:	ldm	ip, {r0, r1, r2, r3}
   2b36c:	and	ip, r4, #67108864	; 0x4000000
   2b370:	eor	ip, ip, r5
   2b374:	str	ip, [sp, #60]	; 0x3c
   2b378:	stm	lr, {r0, r1, r2, r3}
   2b37c:	mov	r1, r7
   2b380:	mov	r0, r6
   2b384:	add	r3, sp, #48	; 0x30
   2b388:	mvn	r2, #0
   2b38c:	bl	2ad0c <__assert_fail@plt+0x18718>
   2b390:	add	sp, sp, #100	; 0x64
   2b394:	pop	{r4, r5, r6, r7, pc}
   2b398:	push	{r4, r5, r6, r7, r8, lr}
   2b39c:	mov	r5, r1
   2b3a0:	ldr	lr, [pc, #100]	; 2b40c <__assert_fail@plt+0x18e18>
   2b3a4:	mov	r4, r2
   2b3a8:	mov	r7, r0
   2b3ac:	mov	r8, r3
   2b3b0:	ldm	lr!, {r0, r1, r2, r3}
   2b3b4:	sub	sp, sp, #48	; 0x30
   2b3b8:	mov	ip, sp
   2b3bc:	mov	r6, #10
   2b3c0:	stmia	ip!, {r0, r1, r2, r3}
   2b3c4:	cmp	r4, #0
   2b3c8:	cmpne	r5, #0
   2b3cc:	ldm	lr!, {r0, r1, r2, r3}
   2b3d0:	str	r6, [sp]
   2b3d4:	stmia	ip!, {r0, r1, r2, r3}
   2b3d8:	ldm	lr, {r0, r1, r2, r3}
   2b3dc:	stm	ip, {r0, r1, r2, r3}
   2b3e0:	beq	2b408 <__assert_fail@plt+0x18e14>
   2b3e4:	mov	r3, sp
   2b3e8:	mov	r1, r8
   2b3ec:	mov	r0, r7
   2b3f0:	ldr	r2, [sp, #72]	; 0x48
   2b3f4:	str	r5, [sp, #40]	; 0x28
   2b3f8:	str	r4, [sp, #44]	; 0x2c
   2b3fc:	bl	2ad0c <__assert_fail@plt+0x18718>
   2b400:	add	sp, sp, #48	; 0x30
   2b404:	pop	{r4, r5, r6, r7, r8, pc}
   2b408:	bl	125a0 <abort@plt>
   2b40c:	andeq	r7, r5, r8, lsl #28
   2b410:	push	{lr}		; (str lr, [sp, #-4]!)
   2b414:	sub	sp, sp, #12
   2b418:	mvn	ip, #0
   2b41c:	str	ip, [sp]
   2b420:	bl	2b398 <__assert_fail@plt+0x18da4>
   2b424:	add	sp, sp, #12
   2b428:	pop	{pc}		; (ldr pc, [sp], #4)
   2b42c:	push	{lr}		; (str lr, [sp, #-4]!)
   2b430:	sub	sp, sp, #12
   2b434:	mvn	ip, #0
   2b438:	mov	r3, r2
   2b43c:	str	ip, [sp]
   2b440:	mov	r2, r1
   2b444:	mov	r1, r0
   2b448:	mov	r0, #0
   2b44c:	bl	2b398 <__assert_fail@plt+0x18da4>
   2b450:	add	sp, sp, #12
   2b454:	pop	{pc}		; (ldr pc, [sp], #4)
   2b458:	push	{lr}		; (str lr, [sp, #-4]!)
   2b45c:	sub	sp, sp, #12
   2b460:	str	r3, [sp]
   2b464:	mov	r3, r2
   2b468:	mov	r2, r1
   2b46c:	mov	r1, r0
   2b470:	mov	r0, #0
   2b474:	bl	2b398 <__assert_fail@plt+0x18da4>
   2b478:	add	sp, sp, #12
   2b47c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b480:	ldr	r3, [pc]	; 2b488 <__assert_fail@plt+0x18e94>
   2b484:	b	2ad0c <__assert_fail@plt+0x18718>
   2b488:	andeq	r7, r5, r4, lsl #10
   2b48c:	mov	r2, r1
   2b490:	ldr	r3, [pc, #8]	; 2b4a0 <__assert_fail@plt+0x18eac>
   2b494:	mov	r1, r0
   2b498:	mov	r0, #0
   2b49c:	b	2ad0c <__assert_fail@plt+0x18718>
   2b4a0:	andeq	r7, r5, r4, lsl #10
   2b4a4:	ldr	r3, [pc, #4]	; 2b4b0 <__assert_fail@plt+0x18ebc>
   2b4a8:	mvn	r2, #0
   2b4ac:	b	2ad0c <__assert_fail@plt+0x18718>
   2b4b0:	andeq	r7, r5, r4, lsl #10
   2b4b4:	mov	r1, r0
   2b4b8:	ldr	r3, [pc, #8]	; 2b4c8 <__assert_fail@plt+0x18ed4>
   2b4bc:	mvn	r2, #0
   2b4c0:	mov	r0, #0
   2b4c4:	b	2ad0c <__assert_fail@plt+0x18718>
   2b4c8:	andeq	r7, r5, r4, lsl #10
   2b4cc:	push	{r4, r5, r6, lr}
   2b4d0:	mov	r4, #0
   2b4d4:	mov	r5, r0
   2b4d8:	str	r4, [r0, #4]
   2b4dc:	mov	r1, #524288	; 0x80000
   2b4e0:	ldr	r0, [pc, #52]	; 2b51c <__assert_fail@plt+0x18f28>
   2b4e4:	bl	21430 <__assert_fail@plt+0xee3c>
   2b4e8:	cmp	r0, r4
   2b4ec:	str	r0, [r5]
   2b4f0:	blt	2b4fc <__assert_fail@plt+0x18f08>
   2b4f4:	mov	r0, r4
   2b4f8:	pop	{r4, r5, r6, pc}
   2b4fc:	mov	r1, r4
   2b500:	mov	r0, r4
   2b504:	bl	122c4 <getcwd@plt>
   2b508:	cmp	r0, r4
   2b50c:	str	r0, [r5, #4]
   2b510:	movne	r0, #0
   2b514:	mvneq	r0, #0
   2b518:	pop	{r4, r5, r6, pc}
   2b51c:	andeq	r3, r4, r8, lsr #24
   2b520:	ldr	r3, [r0]
   2b524:	cmp	r3, #0
   2b528:	blt	2b534 <__assert_fail@plt+0x18f40>
   2b52c:	mov	r0, r3
   2b530:	b	124f8 <fchdir@plt>
   2b534:	ldr	r0, [r0, #4]
   2b538:	b	2d698 <__assert_fail@plt+0x1b0a4>
   2b53c:	push	{r4, lr}
   2b540:	mov	r4, r0
   2b544:	ldr	r0, [r0]
   2b548:	cmp	r0, #0
   2b54c:	blt	2b554 <__assert_fail@plt+0x18f60>
   2b550:	bl	125ac <close@plt>
   2b554:	ldr	r0, [r4, #4]
   2b558:	pop	{r4, lr}
   2b55c:	b	2db68 <__assert_fail@plt+0x1b574>
   2b560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b564:	cmn	r0, #100	; 0x64
   2b568:	sub	sp, sp, #4032	; 0xfc0
   2b56c:	sub	sp, sp, #4
   2b570:	mov	r5, r1
   2b574:	mov	r8, r2
   2b578:	beq	2b64c <__assert_fail@plt+0x19058>
   2b57c:	ldrb	r3, [r1]
   2b580:	cmp	r3, #47	; 0x2f
   2b584:	beq	2b64c <__assert_fail@plt+0x19058>
   2b588:	mov	r4, r0
   2b58c:	mov	r2, r1
   2b590:	mov	r0, sp
   2b594:	mov	r1, r4
   2b598:	bl	3ee68 <__assert_fail@plt+0x2c874>
   2b59c:	mov	r7, sp
   2b5a0:	subs	r9, r0, #0
   2b5a4:	beq	2b5f8 <__assert_fail@plt+0x19004>
   2b5a8:	mov	r1, r8
   2b5ac:	bl	2fdf0 <__assert_fail@plt+0x1d7fc>
   2b5b0:	mov	r6, r0
   2b5b4:	bl	12348 <__errno_location@plt>
   2b5b8:	cmp	r9, r7
   2b5bc:	mov	sl, r0
   2b5c0:	ldr	fp, [r0]
   2b5c4:	beq	2b5d0 <__assert_fail@plt+0x18fdc>
   2b5c8:	mov	r0, r9
   2b5cc:	bl	2db68 <__assert_fail@plt+0x1b574>
   2b5d0:	cmn	r6, #1
   2b5d4:	beq	2b66c <__assert_fail@plt+0x19078>
   2b5d8:	mov	r0, r6
   2b5dc:	add	sp, sp, #4032	; 0xfc0
   2b5e0:	add	sp, sp, #4
   2b5e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b5e8:	ldr	r2, [pc, #308]	; 2b724 <__assert_fail@plt+0x19130>
   2b5ec:	mvn	r3, r2, lsr r3
   2b5f0:	tst	r3, #1
   2b5f4:	bne	2b678 <__assert_fail@plt+0x19084>
   2b5f8:	mov	r0, r7
   2b5fc:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   2b600:	cmp	r0, #0
   2b604:	bne	2b718 <__assert_fail@plt+0x19124>
   2b608:	cmp	r4, #0
   2b60c:	blt	2b61c <__assert_fail@plt+0x19028>
   2b610:	ldr	r3, [sp]
   2b614:	cmp	r4, r3
   2b618:	beq	2b6fc <__assert_fail@plt+0x19108>
   2b61c:	mov	r0, r4
   2b620:	bl	124f8 <fchdir@plt>
   2b624:	cmp	r0, #0
   2b628:	beq	2b68c <__assert_fail@plt+0x19098>
   2b62c:	bl	12348 <__errno_location@plt>
   2b630:	mvn	r6, #0
   2b634:	mov	r4, r0
   2b638:	mov	r0, r7
   2b63c:	ldr	r5, [r4]
   2b640:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b644:	str	r5, [r4]
   2b648:	b	2b5d8 <__assert_fail@plt+0x18fe4>
   2b64c:	mov	r1, r8
   2b650:	mov	r0, r5
   2b654:	bl	2fdf0 <__assert_fail@plt+0x1d7fc>
   2b658:	mov	r6, r0
   2b65c:	mov	r0, r6
   2b660:	add	sp, sp, #4032	; 0xfc0
   2b664:	add	sp, sp, #4
   2b668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b66c:	sub	r3, fp, #1
   2b670:	cmp	r3, #19
   2b674:	bls	2b5e8 <__assert_fail@plt+0x18ff4>
   2b678:	cmp	fp, #38	; 0x26
   2b67c:	cmpne	fp, #95	; 0x5f
   2b680:	strne	fp, [sl]
   2b684:	bne	2b5d8 <__assert_fail@plt+0x18fe4>
   2b688:	b	2b5f8 <__assert_fail@plt+0x19004>
   2b68c:	mov	r1, r8
   2b690:	mov	r0, r5
   2b694:	bl	2fdf0 <__assert_fail@plt+0x1d7fc>
   2b698:	cmn	r0, #1
   2b69c:	mov	r6, r0
   2b6a0:	beq	2b6cc <__assert_fail@plt+0x190d8>
   2b6a4:	mov	r0, r7
   2b6a8:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2b6ac:	cmp	r0, #0
   2b6b0:	bne	2b6c0 <__assert_fail@plt+0x190cc>
   2b6b4:	mov	r0, r7
   2b6b8:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b6bc:	b	2b5d8 <__assert_fail@plt+0x18fe4>
   2b6c0:	bl	12348 <__errno_location@plt>
   2b6c4:	ldr	r0, [r0]
   2b6c8:	bl	251dc <__assert_fail@plt+0x12be8>
   2b6cc:	bl	12348 <__errno_location@plt>
   2b6d0:	mov	r5, r0
   2b6d4:	mov	r0, r7
   2b6d8:	ldr	r4, [r5]
   2b6dc:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2b6e0:	cmp	r0, #0
   2b6e4:	bne	2b6c0 <__assert_fail@plt+0x190cc>
   2b6e8:	mov	r0, r7
   2b6ec:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b6f0:	cmp	r4, #0
   2b6f4:	strne	r4, [r5]
   2b6f8:	b	2b5d8 <__assert_fail@plt+0x18fe4>
   2b6fc:	mov	r0, r7
   2b700:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b704:	bl	12348 <__errno_location@plt>
   2b708:	mov	r3, #9
   2b70c:	mvn	r6, #0
   2b710:	str	r3, [r0]
   2b714:	b	2b5d8 <__assert_fail@plt+0x18fe4>
   2b718:	bl	12348 <__errno_location@plt>
   2b71c:	ldr	r0, [r0]
   2b720:	bl	251a0 <__assert_fail@plt+0x12bac>
   2b724:	andeq	r1, r8, r3
   2b728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b72c:	cmn	r0, #100	; 0x64
   2b730:	sub	sp, sp, #4032	; 0xfc0
   2b734:	sub	sp, sp, #4
   2b738:	mov	r5, r1
   2b73c:	mov	r8, r2
   2b740:	beq	2b814 <__assert_fail@plt+0x19220>
   2b744:	ldrb	r3, [r1]
   2b748:	cmp	r3, #47	; 0x2f
   2b74c:	beq	2b814 <__assert_fail@plt+0x19220>
   2b750:	mov	r4, r0
   2b754:	mov	r2, r1
   2b758:	mov	r0, sp
   2b75c:	mov	r1, r4
   2b760:	bl	3ee68 <__assert_fail@plt+0x2c874>
   2b764:	mov	r7, sp
   2b768:	subs	r9, r0, #0
   2b76c:	beq	2b7c0 <__assert_fail@plt+0x191cc>
   2b770:	mov	r1, r8
   2b774:	bl	2fe08 <__assert_fail@plt+0x1d814>
   2b778:	mov	r6, r0
   2b77c:	bl	12348 <__errno_location@plt>
   2b780:	cmp	r9, r7
   2b784:	mov	sl, r0
   2b788:	ldr	fp, [r0]
   2b78c:	beq	2b798 <__assert_fail@plt+0x191a4>
   2b790:	mov	r0, r9
   2b794:	bl	2db68 <__assert_fail@plt+0x1b574>
   2b798:	cmn	r6, #1
   2b79c:	beq	2b834 <__assert_fail@plt+0x19240>
   2b7a0:	mov	r0, r6
   2b7a4:	add	sp, sp, #4032	; 0xfc0
   2b7a8:	add	sp, sp, #4
   2b7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7b0:	ldr	r2, [pc, #308]	; 2b8ec <__assert_fail@plt+0x192f8>
   2b7b4:	mvn	r3, r2, lsr r3
   2b7b8:	tst	r3, #1
   2b7bc:	bne	2b840 <__assert_fail@plt+0x1924c>
   2b7c0:	mov	r0, r7
   2b7c4:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   2b7c8:	cmp	r0, #0
   2b7cc:	bne	2b8e0 <__assert_fail@plt+0x192ec>
   2b7d0:	cmp	r4, #0
   2b7d4:	blt	2b7e4 <__assert_fail@plt+0x191f0>
   2b7d8:	ldr	r3, [sp]
   2b7dc:	cmp	r4, r3
   2b7e0:	beq	2b8c4 <__assert_fail@plt+0x192d0>
   2b7e4:	mov	r0, r4
   2b7e8:	bl	124f8 <fchdir@plt>
   2b7ec:	cmp	r0, #0
   2b7f0:	beq	2b854 <__assert_fail@plt+0x19260>
   2b7f4:	bl	12348 <__errno_location@plt>
   2b7f8:	mvn	r6, #0
   2b7fc:	mov	r4, r0
   2b800:	mov	r0, r7
   2b804:	ldr	r5, [r4]
   2b808:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b80c:	str	r5, [r4]
   2b810:	b	2b7a0 <__assert_fail@plt+0x191ac>
   2b814:	mov	r1, r8
   2b818:	mov	r0, r5
   2b81c:	bl	2fe08 <__assert_fail@plt+0x1d814>
   2b820:	mov	r6, r0
   2b824:	mov	r0, r6
   2b828:	add	sp, sp, #4032	; 0xfc0
   2b82c:	add	sp, sp, #4
   2b830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b834:	sub	r3, fp, #1
   2b838:	cmp	r3, #19
   2b83c:	bls	2b7b0 <__assert_fail@plt+0x191bc>
   2b840:	cmp	fp, #38	; 0x26
   2b844:	cmpne	fp, #95	; 0x5f
   2b848:	strne	fp, [sl]
   2b84c:	bne	2b7a0 <__assert_fail@plt+0x191ac>
   2b850:	b	2b7c0 <__assert_fail@plt+0x191cc>
   2b854:	mov	r1, r8
   2b858:	mov	r0, r5
   2b85c:	bl	2fe08 <__assert_fail@plt+0x1d814>
   2b860:	cmn	r0, #1
   2b864:	mov	r6, r0
   2b868:	beq	2b894 <__assert_fail@plt+0x192a0>
   2b86c:	mov	r0, r7
   2b870:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2b874:	cmp	r0, #0
   2b878:	bne	2b888 <__assert_fail@plt+0x19294>
   2b87c:	mov	r0, r7
   2b880:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b884:	b	2b7a0 <__assert_fail@plt+0x191ac>
   2b888:	bl	12348 <__errno_location@plt>
   2b88c:	ldr	r0, [r0]
   2b890:	bl	251dc <__assert_fail@plt+0x12be8>
   2b894:	bl	12348 <__errno_location@plt>
   2b898:	mov	r5, r0
   2b89c:	mov	r0, r7
   2b8a0:	ldr	r4, [r5]
   2b8a4:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2b8a8:	cmp	r0, #0
   2b8ac:	bne	2b888 <__assert_fail@plt+0x19294>
   2b8b0:	mov	r0, r7
   2b8b4:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b8b8:	cmp	r4, #0
   2b8bc:	strne	r4, [r5]
   2b8c0:	b	2b7a0 <__assert_fail@plt+0x191ac>
   2b8c4:	mov	r0, r7
   2b8c8:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b8cc:	bl	12348 <__errno_location@plt>
   2b8d0:	mov	r3, #9
   2b8d4:	mvn	r6, #0
   2b8d8:	str	r3, [r0]
   2b8dc:	b	2b7a0 <__assert_fail@plt+0x191ac>
   2b8e0:	bl	12348 <__errno_location@plt>
   2b8e4:	ldr	r0, [r0]
   2b8e8:	bl	251a0 <__assert_fail@plt+0x12bac>
   2b8ec:	andeq	r1, r8, r3
   2b8f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8f4:	cmn	r0, #100	; 0x64
   2b8f8:	sub	sp, sp, #4032	; 0xfc0
   2b8fc:	sub	sp, sp, #4
   2b900:	mov	r5, r1
   2b904:	mov	r8, r2
   2b908:	beq	2b9dc <__assert_fail@plt+0x193e8>
   2b90c:	ldrb	r3, [r1]
   2b910:	cmp	r3, #47	; 0x2f
   2b914:	beq	2b9dc <__assert_fail@plt+0x193e8>
   2b918:	mov	r4, r0
   2b91c:	mov	r2, r1
   2b920:	mov	r0, sp
   2b924:	mov	r1, r4
   2b928:	bl	3ee68 <__assert_fail@plt+0x2c874>
   2b92c:	mov	r7, sp
   2b930:	subs	r9, r0, #0
   2b934:	beq	2b988 <__assert_fail@plt+0x19394>
   2b938:	mov	r1, r8
   2b93c:	bl	123e4 <setfilecon@plt>
   2b940:	mov	r6, r0
   2b944:	bl	12348 <__errno_location@plt>
   2b948:	cmp	r9, r7
   2b94c:	mov	sl, r0
   2b950:	ldr	fp, [r0]
   2b954:	beq	2b960 <__assert_fail@plt+0x1936c>
   2b958:	mov	r0, r9
   2b95c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2b960:	cmn	r6, #1
   2b964:	beq	2b9fc <__assert_fail@plt+0x19408>
   2b968:	mov	r0, r6
   2b96c:	add	sp, sp, #4032	; 0xfc0
   2b970:	add	sp, sp, #4
   2b974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b978:	ldr	r2, [pc, #308]	; 2bab4 <__assert_fail@plt+0x194c0>
   2b97c:	mvn	r3, r2, lsr r3
   2b980:	tst	r3, #1
   2b984:	bne	2ba08 <__assert_fail@plt+0x19414>
   2b988:	mov	r0, r7
   2b98c:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   2b990:	cmp	r0, #0
   2b994:	bne	2baa8 <__assert_fail@plt+0x194b4>
   2b998:	cmp	r4, #0
   2b99c:	blt	2b9ac <__assert_fail@plt+0x193b8>
   2b9a0:	ldr	r3, [sp]
   2b9a4:	cmp	r4, r3
   2b9a8:	beq	2ba8c <__assert_fail@plt+0x19498>
   2b9ac:	mov	r0, r4
   2b9b0:	bl	124f8 <fchdir@plt>
   2b9b4:	cmp	r0, #0
   2b9b8:	beq	2ba1c <__assert_fail@plt+0x19428>
   2b9bc:	bl	12348 <__errno_location@plt>
   2b9c0:	mvn	r6, #0
   2b9c4:	mov	r4, r0
   2b9c8:	mov	r0, r7
   2b9cc:	ldr	r5, [r4]
   2b9d0:	bl	2b53c <__assert_fail@plt+0x18f48>
   2b9d4:	str	r5, [r4]
   2b9d8:	b	2b968 <__assert_fail@plt+0x19374>
   2b9dc:	mov	r1, r8
   2b9e0:	mov	r0, r5
   2b9e4:	bl	123e4 <setfilecon@plt>
   2b9e8:	mov	r6, r0
   2b9ec:	mov	r0, r6
   2b9f0:	add	sp, sp, #4032	; 0xfc0
   2b9f4:	add	sp, sp, #4
   2b9f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9fc:	sub	r3, fp, #1
   2ba00:	cmp	r3, #19
   2ba04:	bls	2b978 <__assert_fail@plt+0x19384>
   2ba08:	cmp	fp, #38	; 0x26
   2ba0c:	cmpne	fp, #95	; 0x5f
   2ba10:	strne	fp, [sl]
   2ba14:	bne	2b968 <__assert_fail@plt+0x19374>
   2ba18:	b	2b988 <__assert_fail@plt+0x19394>
   2ba1c:	mov	r1, r8
   2ba20:	mov	r0, r5
   2ba24:	bl	123e4 <setfilecon@plt>
   2ba28:	cmn	r0, #1
   2ba2c:	mov	r6, r0
   2ba30:	beq	2ba5c <__assert_fail@plt+0x19468>
   2ba34:	mov	r0, r7
   2ba38:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2ba3c:	cmp	r0, #0
   2ba40:	bne	2ba50 <__assert_fail@plt+0x1945c>
   2ba44:	mov	r0, r7
   2ba48:	bl	2b53c <__assert_fail@plt+0x18f48>
   2ba4c:	b	2b968 <__assert_fail@plt+0x19374>
   2ba50:	bl	12348 <__errno_location@plt>
   2ba54:	ldr	r0, [r0]
   2ba58:	bl	251dc <__assert_fail@plt+0x12be8>
   2ba5c:	bl	12348 <__errno_location@plt>
   2ba60:	mov	r5, r0
   2ba64:	mov	r0, r7
   2ba68:	ldr	r4, [r5]
   2ba6c:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2ba70:	cmp	r0, #0
   2ba74:	bne	2ba50 <__assert_fail@plt+0x1945c>
   2ba78:	mov	r0, r7
   2ba7c:	bl	2b53c <__assert_fail@plt+0x18f48>
   2ba80:	cmp	r4, #0
   2ba84:	strne	r4, [r5]
   2ba88:	b	2b968 <__assert_fail@plt+0x19374>
   2ba8c:	mov	r0, r7
   2ba90:	bl	2b53c <__assert_fail@plt+0x18f48>
   2ba94:	bl	12348 <__errno_location@plt>
   2ba98:	mov	r3, #9
   2ba9c:	mvn	r6, #0
   2baa0:	str	r3, [r0]
   2baa4:	b	2b968 <__assert_fail@plt+0x19374>
   2baa8:	bl	12348 <__errno_location@plt>
   2baac:	ldr	r0, [r0]
   2bab0:	bl	251a0 <__assert_fail@plt+0x12bac>
   2bab4:	andeq	r1, r8, r3
   2bab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2babc:	cmn	r0, #100	; 0x64
   2bac0:	sub	sp, sp, #4032	; 0xfc0
   2bac4:	sub	sp, sp, #4
   2bac8:	mov	r5, r1
   2bacc:	mov	r8, r2
   2bad0:	beq	2bba4 <__assert_fail@plt+0x195b0>
   2bad4:	ldrb	r3, [r1]
   2bad8:	cmp	r3, #47	; 0x2f
   2badc:	beq	2bba4 <__assert_fail@plt+0x195b0>
   2bae0:	mov	r4, r0
   2bae4:	mov	r2, r1
   2bae8:	mov	r0, sp
   2baec:	mov	r1, r4
   2baf0:	bl	3ee68 <__assert_fail@plt+0x2c874>
   2baf4:	mov	r7, sp
   2baf8:	subs	r9, r0, #0
   2bafc:	beq	2bb50 <__assert_fail@plt+0x1955c>
   2bb00:	mov	r1, r8
   2bb04:	bl	11fac <lsetfilecon@plt>
   2bb08:	mov	r6, r0
   2bb0c:	bl	12348 <__errno_location@plt>
   2bb10:	cmp	r9, r7
   2bb14:	mov	sl, r0
   2bb18:	ldr	fp, [r0]
   2bb1c:	beq	2bb28 <__assert_fail@plt+0x19534>
   2bb20:	mov	r0, r9
   2bb24:	bl	2db68 <__assert_fail@plt+0x1b574>
   2bb28:	cmn	r6, #1
   2bb2c:	beq	2bbc4 <__assert_fail@plt+0x195d0>
   2bb30:	mov	r0, r6
   2bb34:	add	sp, sp, #4032	; 0xfc0
   2bb38:	add	sp, sp, #4
   2bb3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bb40:	ldr	r2, [pc, #308]	; 2bc7c <__assert_fail@plt+0x19688>
   2bb44:	mvn	r3, r2, lsr r3
   2bb48:	tst	r3, #1
   2bb4c:	bne	2bbd0 <__assert_fail@plt+0x195dc>
   2bb50:	mov	r0, r7
   2bb54:	bl	2b4cc <__assert_fail@plt+0x18ed8>
   2bb58:	cmp	r0, #0
   2bb5c:	bne	2bc70 <__assert_fail@plt+0x1967c>
   2bb60:	cmp	r4, #0
   2bb64:	blt	2bb74 <__assert_fail@plt+0x19580>
   2bb68:	ldr	r3, [sp]
   2bb6c:	cmp	r4, r3
   2bb70:	beq	2bc54 <__assert_fail@plt+0x19660>
   2bb74:	mov	r0, r4
   2bb78:	bl	124f8 <fchdir@plt>
   2bb7c:	cmp	r0, #0
   2bb80:	beq	2bbe4 <__assert_fail@plt+0x195f0>
   2bb84:	bl	12348 <__errno_location@plt>
   2bb88:	mvn	r6, #0
   2bb8c:	mov	r4, r0
   2bb90:	mov	r0, r7
   2bb94:	ldr	r5, [r4]
   2bb98:	bl	2b53c <__assert_fail@plt+0x18f48>
   2bb9c:	str	r5, [r4]
   2bba0:	b	2bb30 <__assert_fail@plt+0x1953c>
   2bba4:	mov	r1, r8
   2bba8:	mov	r0, r5
   2bbac:	bl	11fac <lsetfilecon@plt>
   2bbb0:	mov	r6, r0
   2bbb4:	mov	r0, r6
   2bbb8:	add	sp, sp, #4032	; 0xfc0
   2bbbc:	add	sp, sp, #4
   2bbc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbc4:	sub	r3, fp, #1
   2bbc8:	cmp	r3, #19
   2bbcc:	bls	2bb40 <__assert_fail@plt+0x1954c>
   2bbd0:	cmp	fp, #38	; 0x26
   2bbd4:	cmpne	fp, #95	; 0x5f
   2bbd8:	strne	fp, [sl]
   2bbdc:	bne	2bb30 <__assert_fail@plt+0x1953c>
   2bbe0:	b	2bb50 <__assert_fail@plt+0x1955c>
   2bbe4:	mov	r1, r8
   2bbe8:	mov	r0, r5
   2bbec:	bl	11fac <lsetfilecon@plt>
   2bbf0:	cmn	r0, #1
   2bbf4:	mov	r6, r0
   2bbf8:	beq	2bc24 <__assert_fail@plt+0x19630>
   2bbfc:	mov	r0, r7
   2bc00:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2bc04:	cmp	r0, #0
   2bc08:	bne	2bc18 <__assert_fail@plt+0x19624>
   2bc0c:	mov	r0, r7
   2bc10:	bl	2b53c <__assert_fail@plt+0x18f48>
   2bc14:	b	2bb30 <__assert_fail@plt+0x1953c>
   2bc18:	bl	12348 <__errno_location@plt>
   2bc1c:	ldr	r0, [r0]
   2bc20:	bl	251dc <__assert_fail@plt+0x12be8>
   2bc24:	bl	12348 <__errno_location@plt>
   2bc28:	mov	r5, r0
   2bc2c:	mov	r0, r7
   2bc30:	ldr	r4, [r5]
   2bc34:	bl	2b520 <__assert_fail@plt+0x18f2c>
   2bc38:	cmp	r0, #0
   2bc3c:	bne	2bc18 <__assert_fail@plt+0x19624>
   2bc40:	mov	r0, r7
   2bc44:	bl	2b53c <__assert_fail@plt+0x18f48>
   2bc48:	cmp	r4, #0
   2bc4c:	strne	r4, [r5]
   2bc50:	b	2bb30 <__assert_fail@plt+0x1953c>
   2bc54:	mov	r0, r7
   2bc58:	bl	2b53c <__assert_fail@plt+0x18f48>
   2bc5c:	bl	12348 <__errno_location@plt>
   2bc60:	mov	r3, #9
   2bc64:	mvn	r6, #0
   2bc68:	str	r3, [r0]
   2bc6c:	b	2bb30 <__assert_fail@plt+0x1953c>
   2bc70:	bl	12348 <__errno_location@plt>
   2bc74:	ldr	r0, [r0]
   2bc78:	bl	251a0 <__assert_fail@plt+0x12bac>
   2bc7c:	andeq	r1, r8, r3
   2bc80:	push	{r4, r5, r6, lr}
   2bc84:	mov	r2, r1
   2bc88:	mov	r4, r1
   2bc8c:	mov	r1, #0
   2bc90:	mov	r5, r0
   2bc94:	bl	123d8 <memchr@plt>
   2bc98:	cmp	r0, #0
   2bc9c:	subne	r0, r0, r5
   2bca0:	addne	r0, r0, #1
   2bca4:	moveq	r0, r4
   2bca8:	pop	{r4, r5, r6, pc}
   2bcac:	mov	r2, #3
   2bcb0:	mov	r1, #0
   2bcb4:	b	2d934 <__assert_fail@plt+0x1b340>
   2bcb8:	cmp	r0, #2
   2bcbc:	push	{r4, r5, r6, r7, r8, lr}
   2bcc0:	mov	r4, r0
   2bcc4:	bhi	2bcec <__assert_fail@plt+0x196f8>
   2bcc8:	bl	2bcac <__assert_fail@plt+0x196b8>
   2bccc:	mov	r7, r0
   2bcd0:	bl	12348 <__errno_location@plt>
   2bcd4:	mov	r5, r0
   2bcd8:	mov	r0, r4
   2bcdc:	ldr	r6, [r5]
   2bce0:	mov	r4, r7
   2bce4:	bl	125ac <close@plt>
   2bce8:	str	r6, [r5]
   2bcec:	mov	r0, r4
   2bcf0:	pop	{r4, r5, r6, r7, r8, pc}
   2bcf4:	push	{r4, r5, r6, lr}
   2bcf8:	sub	sp, sp, #32
   2bcfc:	cmp	r1, #0
   2bd00:	mov	r4, r0
   2bd04:	ldr	r5, [sp, #48]	; 0x30
   2bd08:	ldr	r6, [sp, #52]	; 0x34
   2bd0c:	beq	2bfb8 <__assert_fail@plt+0x199c4>
   2bd10:	str	r3, [sp]
   2bd14:	mov	r3, r2
   2bd18:	mov	r2, r1
   2bd1c:	ldr	r1, [pc, #684]	; 2bfd0 <__assert_fail@plt+0x199dc>
   2bd20:	bl	1233c <fprintf@plt>
   2bd24:	mov	r2, #5
   2bd28:	ldr	r1, [pc, #676]	; 2bfd4 <__assert_fail@plt+0x199e0>
   2bd2c:	mov	r0, #0
   2bd30:	bl	120b4 <dcgettext@plt>
   2bd34:	ldr	r3, [pc, #668]	; 2bfd8 <__assert_fail@plt+0x199e4>
   2bd38:	ldr	r1, [pc, #668]	; 2bfdc <__assert_fail@plt+0x199e8>
   2bd3c:	mov	r2, r0
   2bd40:	mov	r0, r4
   2bd44:	bl	1233c <fprintf@plt>
   2bd48:	mov	r1, r4
   2bd4c:	mov	r0, #10
   2bd50:	bl	1248c <fputc@plt>
   2bd54:	mov	r2, #5
   2bd58:	ldr	r1, [pc, #640]	; 2bfe0 <__assert_fail@plt+0x199ec>
   2bd5c:	mov	r0, #0
   2bd60:	bl	120b4 <dcgettext@plt>
   2bd64:	ldr	r2, [pc, #632]	; 2bfe4 <__assert_fail@plt+0x199f0>
   2bd68:	mov	r1, r0
   2bd6c:	mov	r0, r4
   2bd70:	bl	1233c <fprintf@plt>
   2bd74:	mov	r1, r4
   2bd78:	mov	r0, #10
   2bd7c:	bl	1248c <fputc@plt>
   2bd80:	cmp	r6, #9
   2bd84:	ldrls	pc, [pc, r6, lsl #2]
   2bd88:	b	2bfc4 <__assert_fail@plt+0x199d0>
   2bd8c:	andeq	fp, r2, r0, lsl #28
   2bd90:	andeq	fp, r2, r8, lsl #28
   2bd94:	andeq	fp, r2, r0, lsr lr
   2bd98:	andeq	fp, r2, r8, asr lr
   2bd9c:	andeq	fp, r2, r8, lsl #29
   2bda0:	andeq	fp, r2, r0, asr #29
   2bda4:	strdeq	fp, [r2], -r0
   2bda8:	andeq	fp, r2, r8, lsr #30
   2bdac:	andeq	fp, r2, ip, ror #30
   2bdb0:			; <UNDEFINED> instruction: 0x0002bdb4
   2bdb4:	ldr	r1, [pc, #556]	; 2bfe8 <__assert_fail@plt+0x199f4>
   2bdb8:	mov	r2, #5
   2bdbc:	mov	r0, #0
   2bdc0:	bl	120b4 <dcgettext@plt>
   2bdc4:	add	r1, r5, #24
   2bdc8:	ldm	r5, {r2, r3}
   2bdcc:	ldm	r1, {r1, ip, lr}
   2bdd0:	str	lr, [sp, #24]
   2bdd4:	ldr	r6, [r5, #20]
   2bdd8:	str	ip, [sp, #20]
   2bddc:	ldr	lr, [r5, #16]
   2bde0:	str	r1, [sp, #16]
   2bde4:	ldr	r1, [r5, #8]
   2bde8:	ldr	ip, [r5, #12]
   2bdec:	str	r6, [sp, #12]
   2bdf0:	stm	sp, {r1, ip, lr}
   2bdf4:	mov	r1, r0
   2bdf8:	mov	r0, r4
   2bdfc:	bl	1233c <fprintf@plt>
   2be00:	add	sp, sp, #32
   2be04:	pop	{r4, r5, r6, pc}
   2be08:	mov	r2, #5
   2be0c:	ldr	r1, [pc, #472]	; 2bfec <__assert_fail@plt+0x199f8>
   2be10:	mov	r0, #0
   2be14:	bl	120b4 <dcgettext@plt>
   2be18:	ldr	r2, [r5]
   2be1c:	mov	r1, r0
   2be20:	mov	r0, r4
   2be24:	add	sp, sp, #32
   2be28:	pop	{r4, r5, r6, lr}
   2be2c:	b	1233c <fprintf@plt>
   2be30:	mov	r2, #5
   2be34:	ldr	r1, [pc, #436]	; 2bff0 <__assert_fail@plt+0x199fc>
   2be38:	mov	r0, #0
   2be3c:	bl	120b4 <dcgettext@plt>
   2be40:	ldm	r5, {r2, r3}
   2be44:	mov	r1, r0
   2be48:	mov	r0, r4
   2be4c:	add	sp, sp, #32
   2be50:	pop	{r4, r5, r6, lr}
   2be54:	b	1233c <fprintf@plt>
   2be58:	mov	r2, #5
   2be5c:	ldr	r1, [pc, #400]	; 2bff4 <__assert_fail@plt+0x19a00>
   2be60:	mov	r0, #0
   2be64:	bl	120b4 <dcgettext@plt>
   2be68:	ldr	r1, [r5, #8]
   2be6c:	ldm	r5, {r2, r3}
   2be70:	str	r1, [sp, #48]	; 0x30
   2be74:	mov	r1, r0
   2be78:	mov	r0, r4
   2be7c:	add	sp, sp, #32
   2be80:	pop	{r4, r5, r6, lr}
   2be84:	b	1233c <fprintf@plt>
   2be88:	mov	r2, #5
   2be8c:	ldr	r1, [pc, #356]	; 2bff8 <__assert_fail@plt+0x19a04>
   2be90:	mov	r0, #0
   2be94:	bl	120b4 <dcgettext@plt>
   2be98:	ldr	r1, [r5, #8]
   2be9c:	ldr	ip, [r5, #12]
   2bea0:	ldm	r5, {r2, r3}
   2bea4:	str	r1, [sp, #48]	; 0x30
   2bea8:	str	ip, [sp, #52]	; 0x34
   2beac:	mov	r1, r0
   2beb0:	mov	r0, r4
   2beb4:	add	sp, sp, #32
   2beb8:	pop	{r4, r5, r6, lr}
   2bebc:	b	1233c <fprintf@plt>
   2bec0:	mov	r2, #5
   2bec4:	ldr	r1, [pc, #304]	; 2bffc <__assert_fail@plt+0x19a08>
   2bec8:	mov	r0, #0
   2becc:	bl	120b4 <dcgettext@plt>
   2bed0:	add	r1, r5, #8
   2bed4:	ldm	r5, {r2, r3}
   2bed8:	ldm	r1, {r1, ip, lr}
   2bedc:	stm	sp, {r1, ip, lr}
   2bee0:	mov	r1, r0
   2bee4:	mov	r0, r4
   2bee8:	bl	1233c <fprintf@plt>
   2beec:	b	2be00 <__assert_fail@plt+0x1980c>
   2bef0:	mov	r2, #5
   2bef4:	ldr	r1, [pc, #260]	; 2c000 <__assert_fail@plt+0x19a0c>
   2bef8:	mov	r0, #0
   2befc:	bl	120b4 <dcgettext@plt>
   2bf00:	add	r1, r5, #8
   2bf04:	ldr	r6, [r5, #20]
   2bf08:	ldm	r1, {r1, ip, lr}
   2bf0c:	ldm	r5, {r2, r3}
   2bf10:	str	r6, [sp, #12]
   2bf14:	stm	sp, {r1, ip, lr}
   2bf18:	mov	r1, r0
   2bf1c:	mov	r0, r4
   2bf20:	bl	1233c <fprintf@plt>
   2bf24:	b	2be00 <__assert_fail@plt+0x1980c>
   2bf28:	mov	r2, #5
   2bf2c:	ldr	r1, [pc, #208]	; 2c004 <__assert_fail@plt+0x19a10>
   2bf30:	mov	r0, #0
   2bf34:	bl	120b4 <dcgettext@plt>
   2bf38:	ldr	r1, [r5, #24]
   2bf3c:	ldm	r5, {r2, r3}
   2bf40:	ldr	r6, [r5, #20]
   2bf44:	ldr	lr, [r5, #16]
   2bf48:	str	r1, [sp, #16]
   2bf4c:	ldr	r1, [r5, #8]
   2bf50:	ldr	ip, [r5, #12]
   2bf54:	str	r6, [sp, #12]
   2bf58:	stm	sp, {r1, ip, lr}
   2bf5c:	mov	r1, r0
   2bf60:	mov	r0, r4
   2bf64:	bl	1233c <fprintf@plt>
   2bf68:	b	2be00 <__assert_fail@plt+0x1980c>
   2bf6c:	mov	r2, #5
   2bf70:	ldr	r1, [pc, #144]	; 2c008 <__assert_fail@plt+0x19a14>
   2bf74:	mov	r0, #0
   2bf78:	bl	120b4 <dcgettext@plt>
   2bf7c:	ldr	ip, [r5, #28]
   2bf80:	ldr	r1, [r5, #24]
   2bf84:	ldm	r5, {r2, r3}
   2bf88:	ldr	r6, [r5, #20]
   2bf8c:	str	ip, [sp, #20]
   2bf90:	ldr	lr, [r5, #16]
   2bf94:	str	r1, [sp, #16]
   2bf98:	ldr	r1, [r5, #8]
   2bf9c:	ldr	ip, [r5, #12]
   2bfa0:	str	r6, [sp, #12]
   2bfa4:	stm	sp, {r1, ip, lr}
   2bfa8:	mov	r1, r0
   2bfac:	mov	r0, r4
   2bfb0:	bl	1233c <fprintf@plt>
   2bfb4:	b	2be00 <__assert_fail@plt+0x1980c>
   2bfb8:	ldr	r1, [pc, #76]	; 2c00c <__assert_fail@plt+0x19a18>
   2bfbc:	bl	1233c <fprintf@plt>
   2bfc0:	b	2bd24 <__assert_fail@plt+0x19730>
   2bfc4:	mov	r2, #5
   2bfc8:	ldr	r1, [pc, #64]	; 2c010 <__assert_fail@plt+0x19a1c>
   2bfcc:	b	2bdbc <__assert_fail@plt+0x197c8>
   2bfd0:	andeq	r5, r4, r8, lsl #20
   2bfd4:	andeq	r5, r4, ip, lsl sl
   2bfd8:	andeq	r0, r0, r6, ror #15
   2bfdc:	ldrdeq	r5, [r4], -ip
   2bfe0:	andeq	r5, r4, r0, lsr #20
   2bfe4:	andeq	r5, r4, ip, asr #21
   2bfe8:	strdeq	r5, [r4], -ip
   2bfec:	strdeq	r5, [r4], -r0
   2bff0:	andeq	r5, r4, r0, lsl #22
   2bff4:	andeq	r5, r4, r8, lsl fp
   2bff8:	andeq	r5, r4, r4, lsr fp
   2bffc:	andeq	r5, r4, r4, asr fp
   2c000:	andeq	r5, r4, r8, ror fp
   2c004:	andeq	r5, r4, r0, lsr #23
   2c008:	andeq	r5, r4, ip, asr #23
   2c00c:	andeq	r5, r4, r4, lsl sl
   2c010:	andeq	r5, r4, r0, lsr ip
   2c014:	push	{r4, r5, lr}
   2c018:	sub	sp, sp, #12
   2c01c:	ldr	r5, [sp, #24]
   2c020:	ldr	ip, [r5]
   2c024:	cmp	ip, #0
   2c028:	beq	2c044 <__assert_fail@plt+0x19a50>
   2c02c:	mov	lr, r5
   2c030:	mov	ip, #0
   2c034:	ldr	r4, [lr, #4]!
   2c038:	add	ip, ip, #1
   2c03c:	cmp	r4, #0
   2c040:	bne	2c034 <__assert_fail@plt+0x19a40>
   2c044:	stm	sp, {r5, ip}
   2c048:	bl	2bcf4 <__assert_fail@plt+0x19700>
   2c04c:	add	sp, sp, #12
   2c050:	pop	{r4, r5, pc}
   2c054:	push	{r4, r5, lr}
   2c058:	sub	sp, sp, #52	; 0x34
   2c05c:	add	r5, sp, #4
   2c060:	ldr	r4, [sp, #64]	; 0x40
   2c064:	mov	ip, #0
   2c068:	sub	r4, r4, #4
   2c06c:	ldr	lr, [r4, #4]!
   2c070:	cmp	lr, #0
   2c074:	str	lr, [r5, #4]!
   2c078:	beq	2c088 <__assert_fail@plt+0x19a94>
   2c07c:	add	ip, ip, #1
   2c080:	cmp	ip, #10
   2c084:	bne	2c06c <__assert_fail@plt+0x19a78>
   2c088:	add	lr, sp, #8
   2c08c:	str	ip, [sp, #4]
   2c090:	str	lr, [sp]
   2c094:	bl	2bcf4 <__assert_fail@plt+0x19700>
   2c098:	add	sp, sp, #52	; 0x34
   2c09c:	pop	{r4, r5, pc}
   2c0a0:	push	{r3}		; (str r3, [sp, #-4]!)
   2c0a4:	push	{r4, lr}
   2c0a8:	sub	sp, sp, #60	; 0x3c
   2c0ac:	add	lr, sp, #56	; 0x38
   2c0b0:	add	r3, sp, #72	; 0x48
   2c0b4:	str	r3, [lr, #-44]!	; 0xffffffd4
   2c0b8:	add	r4, sp, #68	; 0x44
   2c0bc:	mov	r3, #0
   2c0c0:	ldr	ip, [r4, #4]!
   2c0c4:	cmp	ip, #0
   2c0c8:	str	ip, [lr, #4]!
   2c0cc:	beq	2c0dc <__assert_fail@plt+0x19ae8>
   2c0d0:	add	r3, r3, #1
   2c0d4:	cmp	r3, #10
   2c0d8:	bne	2c0c0 <__assert_fail@plt+0x19acc>
   2c0dc:	add	ip, sp, #16
   2c0e0:	str	r3, [sp, #4]
   2c0e4:	str	ip, [sp]
   2c0e8:	ldr	r3, [sp, #68]	; 0x44
   2c0ec:	bl	2bcf4 <__assert_fail@plt+0x19700>
   2c0f0:	add	sp, sp, #60	; 0x3c
   2c0f4:	pop	{r4, lr}
   2c0f8:	add	sp, sp, #4
   2c0fc:	bx	lr
   2c100:	ldr	r3, [pc, #92]	; 2c164 <__assert_fail@plt+0x19b70>
   2c104:	push	{r4, lr}
   2c108:	mov	r0, #10
   2c10c:	ldr	r1, [r3]
   2c110:	bl	1248c <fputc@plt>
   2c114:	mov	r2, #5
   2c118:	ldr	r1, [pc, #72]	; 2c168 <__assert_fail@plt+0x19b74>
   2c11c:	mov	r0, #0
   2c120:	bl	120b4 <dcgettext@plt>
   2c124:	ldr	r1, [pc, #64]	; 2c16c <__assert_fail@plt+0x19b78>
   2c128:	bl	11f64 <printf@plt>
   2c12c:	mov	r2, #5
   2c130:	ldr	r1, [pc, #56]	; 2c170 <__assert_fail@plt+0x19b7c>
   2c134:	mov	r0, #0
   2c138:	bl	120b4 <dcgettext@plt>
   2c13c:	ldr	r2, [pc, #48]	; 2c174 <__assert_fail@plt+0x19b80>
   2c140:	ldr	r1, [pc, #48]	; 2c178 <__assert_fail@plt+0x19b84>
   2c144:	bl	11f64 <printf@plt>
   2c148:	ldr	r1, [pc, #44]	; 2c17c <__assert_fail@plt+0x19b88>
   2c14c:	mov	r2, #5
   2c150:	mov	r0, #0
   2c154:	bl	120b4 <dcgettext@plt>
   2c158:	ldr	r1, [pc, #32]	; 2c180 <__assert_fail@plt+0x19b8c>
   2c15c:	pop	{r4, lr}
   2c160:	b	11f64 <printf@plt>
   2c164:	andeq	r7, r5, r4, asr r5
   2c168:	andeq	r5, r4, ip, ror #24
   2c16c:	andeq	r4, r4, r8, lsl #18
   2c170:	andeq	r5, r4, r0, lsl #25
   2c174:	andeq	r4, r4, r0, ror #17
   2c178:	andeq	r4, r4, r0, asr #11
   2c17c:	muleq	r4, r4, ip
   2c180:			; <UNDEFINED> instruction: 0x00045cbc
   2c184:	push	{r4, lr}
   2c188:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2c18c:	cmp	r0, #0
   2c190:	popne	{r4, pc}
   2c194:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c198:	push	{r4, lr}
   2c19c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2c1a0:	cmp	r0, #0
   2c1a4:	popne	{r4, pc}
   2c1a8:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c1ac:	push	{r4, lr}
   2c1b0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2c1b4:	cmp	r0, #0
   2c1b8:	popne	{r4, pc}
   2c1bc:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c1c0:	push	{r4, r5, r6, lr}
   2c1c4:	mov	r5, r0
   2c1c8:	mov	r4, r1
   2c1cc:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   2c1d0:	cmp	r0, #0
   2c1d4:	popne	{r4, r5, r6, pc}
   2c1d8:	adds	r4, r4, #0
   2c1dc:	movne	r4, #1
   2c1e0:	cmp	r5, #0
   2c1e4:	orreq	r4, r4, #1
   2c1e8:	cmp	r4, #0
   2c1ec:	popeq	{r4, r5, r6, pc}
   2c1f0:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c1f4:	push	{r4, lr}
   2c1f8:	cmp	r1, #0
   2c1fc:	orreq	r1, r1, #1
   2c200:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   2c204:	cmp	r0, #0
   2c208:	popne	{r4, pc}
   2c20c:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c210:	push	{r4, r5, r6, lr}
   2c214:	mov	r6, r0
   2c218:	mov	r5, r1
   2c21c:	mov	r4, r2
   2c220:	bl	30920 <__assert_fail@plt+0x1e32c>
   2c224:	cmp	r0, #0
   2c228:	popne	{r4, r5, r6, pc}
   2c22c:	cmp	r6, #0
   2c230:	beq	2c240 <__assert_fail@plt+0x19c4c>
   2c234:	cmp	r5, #0
   2c238:	cmpne	r4, #0
   2c23c:	popeq	{r4, r5, r6, pc}
   2c240:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c244:	b	2c210 <__assert_fail@plt+0x19c1c>
   2c248:	cmp	r2, #0
   2c24c:	cmpne	r1, #0
   2c250:	moveq	r2, #1
   2c254:	moveq	r1, r2
   2c258:	push	{r4, lr}
   2c25c:	bl	30920 <__assert_fail@plt+0x1e32c>
   2c260:	cmp	r0, #0
   2c264:	popne	{r4, pc}
   2c268:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c26c:	mov	r2, r1
   2c270:	mov	r1, r0
   2c274:	mov	r0, #0
   2c278:	b	2c210 <__assert_fail@plt+0x19c1c>
   2c27c:	mov	r2, r1
   2c280:	mov	r1, r0
   2c284:	mov	r0, #0
   2c288:	b	2c248 <__assert_fail@plt+0x19c54>
   2c28c:	push	{r4, r5, r6, lr}
   2c290:	subs	r6, r0, #0
   2c294:	sub	sp, sp, #8
   2c298:	mov	r5, r1
   2c29c:	ldr	r4, [r1]
   2c2a0:	beq	2c2dc <__assert_fail@plt+0x19ce8>
   2c2a4:	lsr	r1, r4, #1
   2c2a8:	add	r3, r1, #1
   2c2ac:	mvn	r3, r3
   2c2b0:	cmp	r4, r3
   2c2b4:	bhi	2c2d8 <__assert_fail@plt+0x19ce4>
   2c2b8:	add	r4, r4, #1
   2c2bc:	add	r4, r4, r1
   2c2c0:	mov	r0, r6
   2c2c4:	mov	r1, r4
   2c2c8:	bl	2c210 <__assert_fail@plt+0x19c1c>
   2c2cc:	str	r4, [r5]
   2c2d0:	add	sp, sp, #8
   2c2d4:	pop	{r4, r5, r6, pc}
   2c2d8:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c2dc:	cmp	r4, #0
   2c2e0:	bne	2c2c0 <__assert_fail@plt+0x19ccc>
   2c2e4:	mov	r1, r2
   2c2e8:	mov	r0, #64	; 0x40
   2c2ec:	str	r2, [sp, #4]
   2c2f0:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2c2f4:	ldr	r2, [sp, #4]
   2c2f8:	cmp	r0, #0
   2c2fc:	movne	r4, r0
   2c300:	addeq	r4, r0, #1
   2c304:	b	2c2c0 <__assert_fail@plt+0x19ccc>
   2c308:	mov	r2, #1
   2c30c:	b	2c28c <__assert_fail@plt+0x19c98>
   2c310:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c314:	sub	sp, sp, #12
   2c318:	ldr	r6, [r1]
   2c31c:	mov	sl, r1
   2c320:	mov	r9, r0
   2c324:	asrs	r4, r6, #1
   2c328:	mov	r5, r2
   2c32c:	mov	fp, r3
   2c330:	ldr	r7, [sp, #48]	; 0x30
   2c334:	bmi	2c4a0 <__assert_fail@plt+0x19eac>
   2c338:	mvn	r3, #-2147483648	; 0x80000000
   2c33c:	sub	r3, r3, r4
   2c340:	cmp	r6, r3
   2c344:	movle	r3, #0
   2c348:	movgt	r3, #1
   2c34c:	mvn	r8, fp
   2c350:	cmp	r3, #0
   2c354:	addeq	r4, r4, r6
   2c358:	mvnne	r4, #-2147483648	; 0x80000000
   2c35c:	lsr	r8, r8, #31
   2c360:	cmp	fp, r4
   2c364:	movge	r3, #0
   2c368:	andlt	r3, r8, #1
   2c36c:	cmp	r3, #0
   2c370:	beq	2c458 <__assert_fail@plt+0x19e64>
   2c374:	cmp	r7, #0
   2c378:	blt	2c528 <__assert_fail@plt+0x19f34>
   2c37c:	bne	2c520 <__assert_fail@plt+0x19f2c>
   2c380:	mov	r2, #64	; 0x40
   2c384:	mov	r1, r7
   2c388:	mov	r0, r2
   2c38c:	str	r2, [sp, #4]
   2c390:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c394:	ldr	r2, [sp, #4]
   2c398:	mov	r1, r7
   2c39c:	mov	r4, r0
   2c3a0:	mov	r0, r2
   2c3a4:	bl	3fbd4 <__assert_fail@plt+0x2d5e0>
   2c3a8:	ldr	r2, [sp, #4]
   2c3ac:	sub	r1, r2, r1
   2c3b0:	cmp	r9, #0
   2c3b4:	sub	r3, r4, r6
   2c3b8:	streq	r9, [sl]
   2c3bc:	cmp	r3, r5
   2c3c0:	bge	2c444 <__assert_fail@plt+0x19e50>
   2c3c4:	cmp	r5, #0
   2c3c8:	blt	2c4b4 <__assert_fail@plt+0x19ec0>
   2c3cc:	cmp	r6, #0
   2c3d0:	blt	2c3f0 <__assert_fail@plt+0x19dfc>
   2c3d4:	mvn	r3, #-2147483648	; 0x80000000
   2c3d8:	sub	r3, r3, r5
   2c3dc:	cmp	r6, r3
   2c3e0:	movle	r3, #0
   2c3e4:	movgt	r3, #1
   2c3e8:	cmp	r3, #0
   2c3ec:	bne	2c5b0 <__assert_fail@plt+0x19fbc>
   2c3f0:	add	r5, r6, r5
   2c3f4:	cmp	fp, r5
   2c3f8:	movge	r8, #0
   2c3fc:	andlt	r8, r8, #1
   2c400:	cmp	r8, #0
   2c404:	mov	r4, r5
   2c408:	bne	2c5b0 <__assert_fail@plt+0x19fbc>
   2c40c:	cmp	r7, #0
   2c410:	blt	2c4c8 <__assert_fail@plt+0x19ed4>
   2c414:	beq	2c440 <__assert_fail@plt+0x19e4c>
   2c418:	cmp	r5, #0
   2c41c:	blt	2c570 <__assert_fail@plt+0x19f7c>
   2c420:	mov	r1, r7
   2c424:	mvn	r0, #-2147483648	; 0x80000000
   2c428:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c42c:	cmp	r5, r0
   2c430:	movle	r0, #0
   2c434:	movgt	r0, #1
   2c438:	cmp	r0, #0
   2c43c:	bne	2c5b0 <__assert_fail@plt+0x19fbc>
   2c440:	mul	r1, r5, r7
   2c444:	mov	r0, r9
   2c448:	bl	2c1c0 <__assert_fail@plt+0x19bcc>
   2c44c:	str	r4, [sl]
   2c450:	add	sp, sp, #12
   2c454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c458:	cmp	r7, #0
   2c45c:	blt	2c4f4 <__assert_fail@plt+0x19f00>
   2c460:	beq	2c380 <__assert_fail@plt+0x19d8c>
   2c464:	cmp	r4, #0
   2c468:	blt	2c530 <__assert_fail@plt+0x19f3c>
   2c46c:	mov	r1, r7
   2c470:	mvn	r0, #-2147483648	; 0x80000000
   2c474:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c478:	cmp	r0, r4
   2c47c:	movge	r0, #0
   2c480:	movlt	r0, #1
   2c484:	cmp	r0, #0
   2c488:	mvnne	r2, #-2147483648	; 0x80000000
   2c48c:	bne	2c384 <__assert_fail@plt+0x19d90>
   2c490:	mul	r1, r7, r4
   2c494:	cmp	r1, #63	; 0x3f
   2c498:	bgt	2c3b0 <__assert_fail@plt+0x19dbc>
   2c49c:	b	2c380 <__assert_fail@plt+0x19d8c>
   2c4a0:	rsb	r3, r4, #-2147483648	; 0x80000000
   2c4a4:	cmp	r6, r3
   2c4a8:	movge	r3, #0
   2c4ac:	movlt	r3, #1
   2c4b0:	b	2c34c <__assert_fail@plt+0x19d58>
   2c4b4:	rsb	r3, r5, #-2147483648	; 0x80000000
   2c4b8:	cmp	r6, r3
   2c4bc:	movge	r3, #0
   2c4c0:	movlt	r3, #1
   2c4c4:	b	2c3e8 <__assert_fail@plt+0x19df4>
   2c4c8:	cmp	r5, #0
   2c4cc:	blt	2c554 <__assert_fail@plt+0x19f60>
   2c4d0:	cmn	r7, #1
   2c4d4:	beq	2c440 <__assert_fail@plt+0x19e4c>
   2c4d8:	mov	r1, r7
   2c4dc:	mov	r0, #-2147483648	; 0x80000000
   2c4e0:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c4e4:	cmp	r5, r0
   2c4e8:	movle	r0, #0
   2c4ec:	movgt	r0, #1
   2c4f0:	b	2c438 <__assert_fail@plt+0x19e44>
   2c4f4:	cmp	r4, #0
   2c4f8:	blt	2c594 <__assert_fail@plt+0x19fa0>
   2c4fc:	cmn	r7, #1
   2c500:	beq	2c490 <__assert_fail@plt+0x19e9c>
   2c504:	mov	r1, r7
   2c508:	mov	r0, #-2147483648	; 0x80000000
   2c50c:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c510:	cmp	r0, r4
   2c514:	movge	r0, #0
   2c518:	movlt	r0, #1
   2c51c:	b	2c484 <__assert_fail@plt+0x19e90>
   2c520:	mov	r4, fp
   2c524:	b	2c46c <__assert_fail@plt+0x19e78>
   2c528:	mov	r4, fp
   2c52c:	b	2c4fc <__assert_fail@plt+0x19f08>
   2c530:	cmn	r4, #1
   2c534:	beq	2c490 <__assert_fail@plt+0x19e9c>
   2c538:	mov	r1, r4
   2c53c:	mov	r0, #-2147483648	; 0x80000000
   2c540:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c544:	cmp	r7, r0
   2c548:	movle	r0, #0
   2c54c:	movgt	r0, #1
   2c550:	b	2c484 <__assert_fail@plt+0x19e90>
   2c554:	mov	r1, r7
   2c558:	mvn	r0, #-2147483648	; 0x80000000
   2c55c:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c560:	cmp	r5, r0
   2c564:	movge	r0, #0
   2c568:	movlt	r0, #1
   2c56c:	b	2c438 <__assert_fail@plt+0x19e44>
   2c570:	cmn	r5, #1
   2c574:	beq	2c440 <__assert_fail@plt+0x19e4c>
   2c578:	mov	r1, r5
   2c57c:	mov	r0, #-2147483648	; 0x80000000
   2c580:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c584:	cmp	r7, r0
   2c588:	movle	r0, #0
   2c58c:	movgt	r0, #1
   2c590:	b	2c438 <__assert_fail@plt+0x19e44>
   2c594:	mov	r1, r7
   2c598:	mvn	r0, #-2147483648	; 0x80000000
   2c59c:	bl	3f9b4 <__assert_fail@plt+0x2d3c0>
   2c5a0:	cmp	r0, r4
   2c5a4:	movle	r0, #0
   2c5a8:	movgt	r0, #1
   2c5ac:	b	2c484 <__assert_fail@plt+0x19e90>
   2c5b0:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c5b4:	push	{r4, lr}
   2c5b8:	mov	r1, #1
   2c5bc:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   2c5c0:	cmp	r0, #0
   2c5c4:	popne	{r4, pc}
   2c5c8:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c5cc:	push	{r4, lr}
   2c5d0:	mov	r1, #1
   2c5d4:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   2c5d8:	cmp	r0, #0
   2c5dc:	popne	{r4, pc}
   2c5e0:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c5e4:	push	{r4, lr}
   2c5e8:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   2c5ec:	cmp	r0, #0
   2c5f0:	popne	{r4, pc}
   2c5f4:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c5f8:	push	{r4, lr}
   2c5fc:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   2c600:	cmp	r0, #0
   2c604:	popne	{r4, pc}
   2c608:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c60c:	push	{r4, r5, r6, lr}
   2c610:	mov	r6, r0
   2c614:	mov	r0, r1
   2c618:	mov	r4, r1
   2c61c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2c620:	subs	r5, r0, #0
   2c624:	beq	2c63c <__assert_fail@plt+0x1a048>
   2c628:	mov	r2, r4
   2c62c:	mov	r1, r6
   2c630:	bl	12024 <memcpy@plt>
   2c634:	mov	r0, r5
   2c638:	pop	{r4, r5, r6, pc}
   2c63c:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c640:	push	{r4, r5, r6, lr}
   2c644:	mov	r6, r0
   2c648:	mov	r0, r1
   2c64c:	mov	r4, r1
   2c650:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2c654:	subs	r5, r0, #0
   2c658:	beq	2c670 <__assert_fail@plt+0x1a07c>
   2c65c:	mov	r2, r4
   2c660:	mov	r1, r6
   2c664:	bl	12024 <memcpy@plt>
   2c668:	mov	r0, r5
   2c66c:	pop	{r4, r5, r6, pc}
   2c670:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c674:	push	{r4, r5, r6, lr}
   2c678:	mov	r6, r0
   2c67c:	add	r0, r1, #1
   2c680:	mov	r4, r1
   2c684:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2c688:	subs	r5, r0, #0
   2c68c:	beq	2c6ac <__assert_fail@plt+0x1a0b8>
   2c690:	mov	r3, #0
   2c694:	mov	r1, r6
   2c698:	strb	r3, [r5, r4]
   2c69c:	mov	r2, r4
   2c6a0:	bl	12024 <memcpy@plt>
   2c6a4:	mov	r0, r5
   2c6a8:	pop	{r4, r5, r6, pc}
   2c6ac:	bl	2c6cc <__assert_fail@plt+0x1a0d8>
   2c6b0:	push	{r4, lr}
   2c6b4:	mov	r4, r0
   2c6b8:	bl	12300 <strlen@plt>
   2c6bc:	add	r1, r0, #1
   2c6c0:	mov	r0, r4
   2c6c4:	pop	{r4, lr}
   2c6c8:	b	2c60c <__assert_fail@plt+0x1a018>
   2c6cc:	ldr	r3, [pc, #44]	; 2c700 <__assert_fail@plt+0x1a10c>
   2c6d0:	push	{r4, lr}
   2c6d4:	mov	r2, #5
   2c6d8:	ldr	r1, [pc, #36]	; 2c704 <__assert_fail@plt+0x1a110>
   2c6dc:	mov	r0, #0
   2c6e0:	ldr	r4, [r3]
   2c6e4:	bl	120b4 <dcgettext@plt>
   2c6e8:	ldr	r2, [pc, #24]	; 2c708 <__assert_fail@plt+0x1a114>
   2c6ec:	mov	r1, #0
   2c6f0:	mov	r3, r0
   2c6f4:	mov	r0, r4
   2c6f8:	bl	121ec <error@plt>
   2c6fc:	bl	125a0 <abort@plt>
   2c700:	strdeq	r7, [r5], -r0
   2c704:	andeq	r5, r4, ip, lsl #26
   2c708:	andeq	r4, r4, r0, ror #18
   2c70c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2c710:	sub	sp, sp, #12
   2c714:	mov	r6, r0
   2c718:	mov	r9, r3
   2c71c:	mov	r5, r1
   2c720:	mov	r8, r2
   2c724:	bl	12348 <__errno_location@plt>
   2c728:	mov	r4, #0
   2c72c:	add	r1, sp, #4
   2c730:	str	r4, [r0]
   2c734:	mov	r7, r0
   2c738:	mov	r0, r6
   2c73c:	blx	r9
   2c740:	ldr	r3, [sp, #4]
   2c744:	cmp	r6, r3
   2c748:	beq	2c788 <__assert_fail@plt+0x1a194>
   2c74c:	cmp	r5, r4
   2c750:	beq	2c790 <__assert_fail@plt+0x1a19c>
   2c754:	vcmp.f64	d0, #0.0
   2c758:	vmrs	APSR_nzcv, fpscr
   2c75c:	moveq	r0, #1
   2c760:	beq	2c778 <__assert_fail@plt+0x1a184>
   2c764:	ldr	r0, [r7]
   2c768:	subs	r0, r0, #34	; 0x22
   2c76c:	movne	r0, #1
   2c770:	cmp	r5, #0
   2c774:	beq	2c77c <__assert_fail@plt+0x1a188>
   2c778:	str	r3, [r5]
   2c77c:	vstr	d0, [r8]
   2c780:	add	sp, sp, #12
   2c784:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c788:	mov	r0, r4
   2c78c:	b	2c770 <__assert_fail@plt+0x1a17c>
   2c790:	ldrb	r2, [r3]
   2c794:	cmp	r2, r4
   2c798:	movne	r0, r5
   2c79c:	bne	2c77c <__assert_fail@plt+0x1a188>
   2c7a0:	vcmp.f64	d0, #0.0
   2c7a4:	vmrs	APSR_nzcv, fpscr
   2c7a8:	bne	2c764 <__assert_fail@plt+0x1a170>
   2c7ac:	mov	r0, #1
   2c7b0:	b	2c77c <__assert_fail@plt+0x1a188>
   2c7b4:	cmp	r2, #36	; 0x24
   2c7b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c7bc:	sub	sp, sp, #12
   2c7c0:	bhi	2cd28 <__assert_fail@plt+0x1a734>
   2c7c4:	cmp	r1, #0
   2c7c8:	mov	r6, r1
   2c7cc:	mov	r9, r2
   2c7d0:	mov	r5, r0
   2c7d4:	mov	r8, r3
   2c7d8:	addeq	r6, sp, #4
   2c7dc:	bl	12348 <__errno_location@plt>
   2c7e0:	mov	r3, #0
   2c7e4:	str	r3, [r0]
   2c7e8:	mov	r7, r0
   2c7ec:	bl	122b8 <__ctype_b_loc@plt>
   2c7f0:	ldrb	r1, [r5]
   2c7f4:	mov	r2, r5
   2c7f8:	ldr	r0, [r0]
   2c7fc:	b	2c804 <__assert_fail@plt+0x1a210>
   2c800:	ldrb	r1, [r2, #1]!
   2c804:	lsl	r3, r1, #1
   2c808:	ldrh	r3, [r0, r3]
   2c80c:	ands	r4, r3, #8192	; 0x2000
   2c810:	bne	2c800 <__assert_fail@plt+0x1a20c>
   2c814:	cmp	r1, #45	; 0x2d
   2c818:	bne	2c82c <__assert_fail@plt+0x1a238>
   2c81c:	mov	r4, #4
   2c820:	mov	r0, r4
   2c824:	add	sp, sp, #12
   2c828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c82c:	mov	r2, r9
   2c830:	mov	r1, r6
   2c834:	mov	r0, r5
   2c838:	bl	122f4 <strtoul@plt>
   2c83c:	ldr	sl, [r6]
   2c840:	cmp	r5, sl
   2c844:	mov	r9, r0
   2c848:	beq	2c890 <__assert_fail@plt+0x1a29c>
   2c84c:	ldr	r4, [r7]
   2c850:	cmp	r4, #0
   2c854:	bne	2c880 <__assert_fail@plt+0x1a28c>
   2c858:	ldr	r3, [sp, #48]	; 0x30
   2c85c:	cmp	r3, #0
   2c860:	beq	2c870 <__assert_fail@plt+0x1a27c>
   2c864:	ldrb	r5, [sl]
   2c868:	cmp	r5, #0
   2c86c:	bne	2c8c0 <__assert_fail@plt+0x1a2cc>
   2c870:	mov	r0, r4
   2c874:	str	r9, [r8]
   2c878:	add	sp, sp, #12
   2c87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c880:	cmp	r4, #34	; 0x22
   2c884:	bne	2c81c <__assert_fail@plt+0x1a228>
   2c888:	mov	r4, #1
   2c88c:	b	2c858 <__assert_fail@plt+0x1a264>
   2c890:	ldr	r3, [sp, #48]	; 0x30
   2c894:	cmp	r3, #0
   2c898:	beq	2c81c <__assert_fail@plt+0x1a228>
   2c89c:	ldrb	r5, [sl]
   2c8a0:	cmp	r5, #0
   2c8a4:	beq	2c81c <__assert_fail@plt+0x1a228>
   2c8a8:	mov	r1, r5
   2c8ac:	mov	r0, r3
   2c8b0:	bl	1230c <strchr@plt>
   2c8b4:	cmp	r0, #0
   2c8b8:	movne	r9, #1
   2c8bc:	beq	2c81c <__assert_fail@plt+0x1a228>
   2c8c0:	mov	r1, r5
   2c8c4:	ldr	r0, [sp, #48]	; 0x30
   2c8c8:	bl	1230c <strchr@plt>
   2c8cc:	cmp	r0, #0
   2c8d0:	beq	2ccf8 <__assert_fail@plt+0x1a704>
   2c8d4:	sub	r3, r5, #69	; 0x45
   2c8d8:	cmp	r3, #47	; 0x2f
   2c8dc:	ldrls	pc, [pc, r3, lsl #2]
   2c8e0:	b	2c9a4 <__assert_fail@plt+0x1a3b0>
   2c8e4:	muleq	r2, r4, sl
   2c8e8:	andeq	ip, r2, r4, lsr #19
   2c8ec:	muleq	r2, r4, sl
   2c8f0:	andeq	ip, r2, r4, lsr #19
   2c8f4:	andeq	ip, r2, r4, lsr #19
   2c8f8:	andeq	ip, r2, r4, lsr #19
   2c8fc:	muleq	r2, r4, sl
   2c900:	andeq	ip, r2, r4, lsr #19
   2c904:	muleq	r2, r4, sl
   2c908:	andeq	ip, r2, r4, lsr #19
   2c90c:	andeq	ip, r2, r4, lsr #19
   2c910:	muleq	r2, r4, sl
   2c914:	andeq	ip, r2, r4, lsr #19
   2c918:	andeq	ip, r2, r4, lsr #19
   2c91c:	andeq	ip, r2, r4, lsr #19
   2c920:	muleq	r2, r4, sl
   2c924:	andeq	ip, r2, r4, lsr #19
   2c928:	andeq	ip, r2, r4, lsr #19
   2c92c:	andeq	ip, r2, r4, lsr #19
   2c930:	andeq	ip, r2, r4, lsr #19
   2c934:	muleq	r2, r4, sl
   2c938:	muleq	r2, r4, sl
   2c93c:	andeq	ip, r2, r4, lsr #19
   2c940:	andeq	ip, r2, r4, lsr #19
   2c944:	andeq	ip, r2, r4, lsr #19
   2c948:	andeq	ip, r2, r4, lsr #19
   2c94c:	andeq	ip, r2, r4, lsr #19
   2c950:	andeq	ip, r2, r4, lsr #19
   2c954:	andeq	ip, r2, r4, lsr #19
   2c958:	andeq	ip, r2, r4, lsr #19
   2c95c:	andeq	ip, r2, r4, lsr #19
   2c960:	andeq	ip, r2, r4, lsr #19
   2c964:	andeq	ip, r2, r4, lsr #19
   2c968:	andeq	ip, r2, r4, lsr #19
   2c96c:	muleq	r2, r4, sl
   2c970:	andeq	ip, r2, r4, lsr #19
   2c974:	andeq	ip, r2, r4, lsr #19
   2c978:	andeq	ip, r2, r4, lsr #19
   2c97c:	muleq	r2, r4, sl
   2c980:	andeq	ip, r2, r4, lsr #19
   2c984:	muleq	r2, r4, sl
   2c988:	andeq	ip, r2, r4, lsr #19
   2c98c:	andeq	ip, r2, r4, lsr #19
   2c990:	andeq	ip, r2, r4, lsr #19
   2c994:	andeq	ip, r2, r4, lsr #19
   2c998:	andeq	ip, r2, r4, lsr #19
   2c99c:	andeq	ip, r2, r4, lsr #19
   2c9a0:	muleq	r2, r4, sl
   2c9a4:	mov	fp, #1
   2c9a8:	mov	r7, #1024	; 0x400
   2c9ac:	sub	r5, r5, #66	; 0x42
   2c9b0:	cmp	r5, #53	; 0x35
   2c9b4:	ldrls	pc, [pc, r5, lsl #2]
   2c9b8:	b	2ccf8 <__assert_fail@plt+0x1a704>
   2c9bc:	andeq	ip, r2, r4, lsr #25
   2c9c0:	strdeq	ip, [r2], -r8
   2c9c4:	strdeq	ip, [r2], -r8
   2c9c8:	andeq	ip, r2, r4, ror #24
   2c9cc:	strdeq	ip, [r2], -r8
   2c9d0:			; <UNDEFINED> instruction: 0x0002ccb8
   2c9d4:	strdeq	ip, [r2], -r8
   2c9d8:	strdeq	ip, [r2], -r8
   2c9dc:	strdeq	ip, [r2], -r8
   2c9e0:	andeq	ip, r2, ip, asr #24
   2c9e4:	strdeq	ip, [r2], -r8
   2c9e8:	andeq	ip, r2, r0, lsr #24
   2c9ec:	strdeq	ip, [r2], -r8
   2c9f0:	strdeq	ip, [r2], -r8
   2c9f4:	andeq	ip, r2, r0, ror #23
   2c9f8:	strdeq	ip, [r2], -r8
   2c9fc:	strdeq	ip, [r2], -r8
   2ca00:	strdeq	ip, [r2], -r8
   2ca04:	andeq	ip, r2, r0, lsr #23
   2ca08:	strdeq	ip, [r2], -r8
   2ca0c:	strdeq	ip, [r2], -r8
   2ca10:	strdeq	ip, [r2], -r8
   2ca14:	strdeq	ip, [r2], -r8
   2ca18:	andeq	ip, r2, r0, ror #22
   2ca1c:	andeq	ip, r2, r0, lsr #22
   2ca20:	strdeq	ip, [r2], -r8
   2ca24:	strdeq	ip, [r2], -r8
   2ca28:	strdeq	ip, [r2], -r8
   2ca2c:	strdeq	ip, [r2], -r8
   2ca30:	strdeq	ip, [r2], -r8
   2ca34:	strdeq	ip, [r2], -r8
   2ca38:	strdeq	ip, [r2], -r8
   2ca3c:	andeq	ip, r2, r4, lsl #22
   2ca40:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2ca44:	strdeq	ip, [r2], -r8
   2ca48:	strdeq	ip, [r2], -r8
   2ca4c:	strdeq	ip, [r2], -r8
   2ca50:			; <UNDEFINED> instruction: 0x0002ccb8
   2ca54:	strdeq	ip, [r2], -r8
   2ca58:	strdeq	ip, [r2], -r8
   2ca5c:	strdeq	ip, [r2], -r8
   2ca60:	andeq	ip, r2, ip, asr #24
   2ca64:	strdeq	ip, [r2], -r8
   2ca68:	andeq	ip, r2, r0, lsr #24
   2ca6c:	strdeq	ip, [r2], -r8
   2ca70:	strdeq	ip, [r2], -r8
   2ca74:	strdeq	ip, [r2], -r8
   2ca78:	strdeq	ip, [r2], -r8
   2ca7c:	strdeq	ip, [r2], -r8
   2ca80:	strdeq	ip, [r2], -r8
   2ca84:	andeq	ip, r2, r0, lsr #23
   2ca88:	strdeq	ip, [r2], -r8
   2ca8c:	strdeq	ip, [r2], -r8
   2ca90:	ldrdeq	ip, [r2], -r0
   2ca94:	mov	r1, #48	; 0x30
   2ca98:	ldr	r0, [sp, #48]	; 0x30
   2ca9c:	bl	1230c <strchr@plt>
   2caa0:	cmp	r0, #0
   2caa4:	beq	2c9a4 <__assert_fail@plt+0x1a3b0>
   2caa8:	ldrb	r3, [sl, #1]
   2caac:	cmp	r3, #68	; 0x44
   2cab0:	beq	2cac4 <__assert_fail@plt+0x1a4d0>
   2cab4:	cmp	r3, #105	; 0x69
   2cab8:	beq	2cd04 <__assert_fail@plt+0x1a710>
   2cabc:	cmp	r3, #66	; 0x42
   2cac0:	bne	2c9a4 <__assert_fail@plt+0x1a3b0>
   2cac4:	mov	fp, #2
   2cac8:	mov	r7, #1000	; 0x3e8
   2cacc:	b	2c9ac <__assert_fail@plt+0x1a3b8>
   2cad0:	cmp	r9, #0
   2cad4:	blt	2cb14 <__assert_fail@plt+0x1a520>
   2cad8:	lsl	r9, r9, #1
   2cadc:	mov	r2, #0
   2cae0:	add	r3, sl, fp
   2cae4:	str	r3, [r6]
   2cae8:	ldrb	r3, [sl, fp]
   2caec:	orr	r4, r4, r2
   2caf0:	cmp	r3, #0
   2caf4:	orrne	r4, r4, #2
   2caf8:	b	2c870 <__assert_fail@plt+0x1a27c>
   2cafc:	mov	r2, #0
   2cb00:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cb04:	cmp	r9, #8388608	; 0x800000
   2cb08:	lslcc	r9, r9, #9
   2cb0c:	movcc	r2, #0
   2cb10:	bcc	2cae0 <__assert_fail@plt+0x1a4ec>
   2cb14:	mvn	r9, #0
   2cb18:	mov	r2, #1
   2cb1c:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cb20:	mov	r1, r7
   2cb24:	mvn	r0, #0
   2cb28:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cb2c:	mov	r2, #0
   2cb30:	mov	lr, r2
   2cb34:	mov	r3, #7
   2cb38:	mov	ip, #1
   2cb3c:	cmp	r0, r9
   2cb40:	movcs	r1, lr
   2cb44:	movcc	r1, ip
   2cb48:	mulcs	r9, r7, r9
   2cb4c:	mvncc	r9, #0
   2cb50:	subs	r3, r3, #1
   2cb54:	orr	r2, r2, r1
   2cb58:	bne	2cb3c <__assert_fail@plt+0x1a548>
   2cb5c:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cb60:	mov	r1, r7
   2cb64:	mvn	r0, #0
   2cb68:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cb6c:	mov	r2, #0
   2cb70:	mov	lr, r2
   2cb74:	mov	r3, #8
   2cb78:	mov	ip, #1
   2cb7c:	cmp	r0, r9
   2cb80:	movcs	r1, lr
   2cb84:	movcc	r1, ip
   2cb88:	mulcs	r9, r7, r9
   2cb8c:	mvncc	r9, #0
   2cb90:	subs	r3, r3, #1
   2cb94:	orr	r2, r2, r1
   2cb98:	bne	2cb7c <__assert_fail@plt+0x1a588>
   2cb9c:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cba0:	mov	r1, r7
   2cba4:	mvn	r0, #0
   2cba8:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cbac:	mov	r2, #0
   2cbb0:	mov	lr, r2
   2cbb4:	mov	r3, #4
   2cbb8:	mov	ip, #1
   2cbbc:	cmp	r0, r9
   2cbc0:	movcs	r1, lr
   2cbc4:	movcc	r1, ip
   2cbc8:	mulcs	r9, r7, r9
   2cbcc:	mvncc	r9, #0
   2cbd0:	subs	r3, r3, #1
   2cbd4:	orr	r2, r2, r1
   2cbd8:	bne	2cbbc <__assert_fail@plt+0x1a5c8>
   2cbdc:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cbe0:	mov	r1, r7
   2cbe4:	mvn	r0, #0
   2cbe8:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cbec:	mov	r2, #0
   2cbf0:	mov	lr, r2
   2cbf4:	mov	r3, #5
   2cbf8:	mov	ip, #1
   2cbfc:	cmp	r9, r0
   2cc00:	movls	r1, lr
   2cc04:	movhi	r1, ip
   2cc08:	mulls	r9, r7, r9
   2cc0c:	mvnhi	r9, #0
   2cc10:	subs	r3, r3, #1
   2cc14:	orr	r2, r2, r1
   2cc18:	bne	2cbfc <__assert_fail@plt+0x1a608>
   2cc1c:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cc20:	mov	r1, r7
   2cc24:	mvn	r0, #0
   2cc28:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cc2c:	cmp	r9, r0
   2cc30:	bhi	2cd1c <__assert_fail@plt+0x1a728>
   2cc34:	mul	r9, r7, r9
   2cc38:	cmp	r0, r9
   2cc3c:	bcc	2cd1c <__assert_fail@plt+0x1a728>
   2cc40:	mul	r9, r7, r9
   2cc44:	mov	r2, #0
   2cc48:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cc4c:	mov	r1, r7
   2cc50:	mvn	r0, #0
   2cc54:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cc58:	cmp	r9, r0
   2cc5c:	bhi	2cb14 <__assert_fail@plt+0x1a520>
   2cc60:	b	2cc40 <__assert_fail@plt+0x1a64c>
   2cc64:	mov	r1, r7
   2cc68:	mvn	r0, #0
   2cc6c:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2cc70:	mov	r2, #0
   2cc74:	mov	lr, r2
   2cc78:	mov	r3, #6
   2cc7c:	mov	ip, #1
   2cc80:	cmp	r9, r0
   2cc84:	movls	r1, lr
   2cc88:	movhi	r1, ip
   2cc8c:	mulls	r9, r7, r9
   2cc90:	mvnhi	r9, #0
   2cc94:	subs	r3, r3, #1
   2cc98:	orr	r2, r2, r1
   2cc9c:	bne	2cc80 <__assert_fail@plt+0x1a68c>
   2cca0:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cca4:	cmp	r9, #4194304	; 0x400000
   2cca8:	lslcc	r9, r9, #10
   2ccac:	movcc	r2, #0
   2ccb0:	bcc	2cae0 <__assert_fail@plt+0x1a4ec>
   2ccb4:	b	2cb14 <__assert_fail@plt+0x1a520>
   2ccb8:	mov	r1, r7
   2ccbc:	mvn	r0, #0
   2ccc0:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   2ccc4:	mov	r2, #0
   2ccc8:	mov	lr, r2
   2cccc:	mov	r3, #3
   2ccd0:	mov	ip, #1
   2ccd4:	cmp	r9, r0
   2ccd8:	movls	r1, lr
   2ccdc:	movhi	r1, ip
   2cce0:	mulls	r9, r7, r9
   2cce4:	mvnhi	r9, #0
   2cce8:	subs	r3, r3, #1
   2ccec:	orr	r2, r2, r1
   2ccf0:	bne	2ccd4 <__assert_fail@plt+0x1a6e0>
   2ccf4:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2ccf8:	str	r9, [r8]
   2ccfc:	orr	r4, r4, #2
   2cd00:	b	2c820 <__assert_fail@plt+0x1a22c>
   2cd04:	ldrb	fp, [sl, #2]
   2cd08:	mov	r7, #1024	; 0x400
   2cd0c:	cmp	fp, #66	; 0x42
   2cd10:	movne	fp, #1
   2cd14:	moveq	fp, #3
   2cd18:	b	2c9ac <__assert_fail@plt+0x1a3b8>
   2cd1c:	mov	r2, #1
   2cd20:	mvn	r9, #0
   2cd24:	b	2cae0 <__assert_fail@plt+0x1a4ec>
   2cd28:	ldr	r3, [pc, #12]	; 2cd3c <__assert_fail@plt+0x1a748>
   2cd2c:	mov	r2, #84	; 0x54
   2cd30:	ldr	r1, [pc, #8]	; 2cd40 <__assert_fail@plt+0x1a74c>
   2cd34:	ldr	r0, [pc, #8]	; 2cd44 <__assert_fail@plt+0x1a750>
   2cd38:	bl	125f4 <__assert_fail@plt>
   2cd3c:	andeq	r5, r4, r0, lsr #26
   2cd40:	andeq	r5, r4, ip, lsr #26
   2cd44:	andeq	r5, r4, r8, lsr sp
   2cd48:	cmp	r2, #36	; 0x24
   2cd4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd50:	sub	sp, sp, #36	; 0x24
   2cd54:	bhi	2d540 <__assert_fail@plt+0x1af4c>
   2cd58:	cmp	r1, #0
   2cd5c:	mov	r9, r2
   2cd60:	mov	r7, r0
   2cd64:	mov	r5, r1
   2cd68:	mov	r6, r3
   2cd6c:	addeq	r5, sp, #28
   2cd70:	bl	12348 <__errno_location@plt>
   2cd74:	mov	r3, #0
   2cd78:	str	r3, [r0]
   2cd7c:	mov	r8, r0
   2cd80:	bl	122b8 <__ctype_b_loc@plt>
   2cd84:	ldrb	r3, [r7]
   2cd88:	mov	r2, r7
   2cd8c:	ldr	r0, [r0]
   2cd90:	b	2cd98 <__assert_fail@plt+0x1a7a4>
   2cd94:	ldrb	r3, [r2, #1]!
   2cd98:	lsl	r1, r3, #1
   2cd9c:	ldrh	r4, [r0, r1]
   2cda0:	ands	r4, r4, #8192	; 0x2000
   2cda4:	bne	2cd94 <__assert_fail@plt+0x1a7a0>
   2cda8:	cmp	r3, #45	; 0x2d
   2cdac:	bne	2cdc0 <__assert_fail@plt+0x1a7cc>
   2cdb0:	mov	r4, #4
   2cdb4:	mov	r0, r4
   2cdb8:	add	sp, sp, #36	; 0x24
   2cdbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cdc0:	mov	r2, r9
   2cdc4:	mov	r3, r4
   2cdc8:	mov	r1, r5
   2cdcc:	mov	r0, r7
   2cdd0:	bl	12048 <__strtoull_internal@plt>
   2cdd4:	ldr	r9, [r5]
   2cdd8:	cmp	r7, r9
   2cddc:	mov	sl, r0
   2cde0:	mov	fp, r1
   2cde4:	beq	2ce2c <__assert_fail@plt+0x1a838>
   2cde8:	ldr	r4, [r8]
   2cdec:	cmp	r4, #0
   2cdf0:	bne	2ce1c <__assert_fail@plt+0x1a828>
   2cdf4:	ldr	r3, [sp, #72]	; 0x48
   2cdf8:	cmp	r3, #0
   2cdfc:	beq	2ce0c <__assert_fail@plt+0x1a818>
   2ce00:	ldrb	r8, [r9]
   2ce04:	cmp	r8, #0
   2ce08:	bne	2ce60 <__assert_fail@plt+0x1a86c>
   2ce0c:	mov	r0, r4
   2ce10:	strd	sl, [r6]
   2ce14:	add	sp, sp, #36	; 0x24
   2ce18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce1c:	cmp	r4, #34	; 0x22
   2ce20:	bne	2cdb0 <__assert_fail@plt+0x1a7bc>
   2ce24:	mov	r4, #1
   2ce28:	b	2cdf4 <__assert_fail@plt+0x1a800>
   2ce2c:	ldr	r3, [sp, #72]	; 0x48
   2ce30:	cmp	r3, #0
   2ce34:	beq	2cdb0 <__assert_fail@plt+0x1a7bc>
   2ce38:	ldrb	r8, [r9]
   2ce3c:	cmp	r8, #0
   2ce40:	beq	2cdb0 <__assert_fail@plt+0x1a7bc>
   2ce44:	mov	r1, r8
   2ce48:	mov	r0, r3
   2ce4c:	bl	1230c <strchr@plt>
   2ce50:	cmp	r0, #0
   2ce54:	movne	sl, #1
   2ce58:	movne	fp, #0
   2ce5c:	beq	2cdb0 <__assert_fail@plt+0x1a7bc>
   2ce60:	mov	r1, r8
   2ce64:	ldr	r0, [sp, #72]	; 0x48
   2ce68:	bl	1230c <strchr@plt>
   2ce6c:	cmp	r0, #0
   2ce70:	beq	2d4d8 <__assert_fail@plt+0x1aee4>
   2ce74:	sub	r3, r8, #69	; 0x45
   2ce78:	cmp	r3, #47	; 0x2f
   2ce7c:	ldrls	pc, [pc, r3, lsl #2]
   2ce80:	b	2cf44 <__assert_fail@plt+0x1a950>
   2ce84:	andeq	sp, r2, r8, lsr r0
   2ce88:	andeq	ip, r2, r4, asr #30
   2ce8c:	andeq	sp, r2, r8, lsr r0
   2ce90:	andeq	ip, r2, r4, asr #30
   2ce94:	andeq	ip, r2, r4, asr #30
   2ce98:	andeq	ip, r2, r4, asr #30
   2ce9c:	andeq	sp, r2, r8, lsr r0
   2cea0:	andeq	ip, r2, r4, asr #30
   2cea4:	andeq	sp, r2, r8, lsr r0
   2cea8:	andeq	ip, r2, r4, asr #30
   2ceac:	andeq	ip, r2, r4, asr #30
   2ceb0:	andeq	sp, r2, r8, lsr r0
   2ceb4:	andeq	ip, r2, r4, asr #30
   2ceb8:	andeq	ip, r2, r4, asr #30
   2cebc:	andeq	ip, r2, r4, asr #30
   2cec0:	andeq	sp, r2, r8, lsr r0
   2cec4:	andeq	ip, r2, r4, asr #30
   2cec8:	andeq	ip, r2, r4, asr #30
   2cecc:	andeq	ip, r2, r4, asr #30
   2ced0:	andeq	ip, r2, r4, asr #30
   2ced4:	andeq	sp, r2, r8, lsr r0
   2ced8:	andeq	sp, r2, r8, lsr r0
   2cedc:	andeq	ip, r2, r4, asr #30
   2cee0:	andeq	ip, r2, r4, asr #30
   2cee4:	andeq	ip, r2, r4, asr #30
   2cee8:	andeq	ip, r2, r4, asr #30
   2ceec:	andeq	ip, r2, r4, asr #30
   2cef0:	andeq	ip, r2, r4, asr #30
   2cef4:	andeq	ip, r2, r4, asr #30
   2cef8:	andeq	ip, r2, r4, asr #30
   2cefc:	andeq	ip, r2, r4, asr #30
   2cf00:	andeq	ip, r2, r4, asr #30
   2cf04:	andeq	ip, r2, r4, asr #30
   2cf08:	andeq	ip, r2, r4, asr #30
   2cf0c:	andeq	sp, r2, r8, lsr r0
   2cf10:	andeq	ip, r2, r4, asr #30
   2cf14:	andeq	ip, r2, r4, asr #30
   2cf18:	andeq	ip, r2, r4, asr #30
   2cf1c:	andeq	sp, r2, r8, lsr r0
   2cf20:	andeq	ip, r2, r4, asr #30
   2cf24:	andeq	sp, r2, r8, lsr r0
   2cf28:	andeq	ip, r2, r4, asr #30
   2cf2c:	andeq	ip, r2, r4, asr #30
   2cf30:	andeq	ip, r2, r4, asr #30
   2cf34:	andeq	ip, r2, r4, asr #30
   2cf38:	andeq	ip, r2, r4, asr #30
   2cf3c:	andeq	ip, r2, r4, asr #30
   2cf40:	andeq	sp, r2, r8, lsr r0
   2cf44:	mov	r7, #1024	; 0x400
   2cf48:	mov	r3, #1
   2cf4c:	str	r3, [sp, #16]
   2cf50:	sub	r8, r8, #66	; 0x42
   2cf54:	cmp	r8, #53	; 0x35
   2cf58:	ldrls	pc, [pc, r8, lsl #2]
   2cf5c:	b	2d4d8 <__assert_fail@plt+0x1aee4>
   2cf60:	andeq	sp, r2, r0, asr #8
   2cf64:	ldrdeq	sp, [r2], -r8
   2cf68:	ldrdeq	sp, [r2], -r8
   2cf6c:			; <UNDEFINED> instruction: 0x0002d3b8
   2cf70:	ldrdeq	sp, [r2], -r8
   2cf74:	andeq	sp, r2, ip, lsr #5
   2cf78:	ldrdeq	sp, [r2], -r8
   2cf7c:	ldrdeq	sp, [r2], -r8
   2cf80:	ldrdeq	sp, [r2], -r8
   2cf84:	andeq	sp, r2, ip, ror #4
   2cf88:	ldrdeq	sp, [r2], -r8
   2cf8c:	andeq	sp, r2, r0, ror r4
   2cf90:	ldrdeq	sp, [r2], -r8
   2cf94:	ldrdeq	sp, [r2], -r8
   2cf98:	andeq	sp, r2, r0, lsr r3
   2cf9c:	ldrdeq	sp, [r2], -r8
   2cfa0:	ldrdeq	sp, [r2], -r8
   2cfa4:	ldrdeq	sp, [r2], -r8
   2cfa8:	andeq	sp, r2, r4, ror #3
   2cfac:	ldrdeq	sp, [r2], -r8
   2cfb0:	ldrdeq	sp, [r2], -r8
   2cfb4:	ldrdeq	sp, [r2], -r8
   2cfb8:	ldrdeq	sp, [r2], -r8
   2cfbc:	andeq	sp, r2, r0, ror r1
   2cfc0:	andeq	sp, r2, r8, ror #1
   2cfc4:	ldrdeq	sp, [r2], -r8
   2cfc8:	ldrdeq	sp, [r2], -r8
   2cfcc:	ldrdeq	sp, [r2], -r8
   2cfd0:	ldrdeq	sp, [r2], -r8
   2cfd4:	ldrdeq	sp, [r2], -r8
   2cfd8:	ldrdeq	sp, [r2], -r8
   2cfdc:	ldrdeq	sp, [r2], -r8
   2cfe0:	strheq	sp, [r2], -r8
   2cfe4:	strheq	sp, [r2], -r0
   2cfe8:	ldrdeq	sp, [r2], -r8
   2cfec:	ldrdeq	sp, [r2], -r8
   2cff0:	ldrdeq	sp, [r2], -r8
   2cff4:	andeq	sp, r2, ip, lsr #5
   2cff8:	ldrdeq	sp, [r2], -r8
   2cffc:	ldrdeq	sp, [r2], -r8
   2d000:	ldrdeq	sp, [r2], -r8
   2d004:	andeq	sp, r2, ip, ror #4
   2d008:	ldrdeq	sp, [r2], -r8
   2d00c:	andeq	sp, r2, r0, ror r4
   2d010:	ldrdeq	sp, [r2], -r8
   2d014:	ldrdeq	sp, [r2], -r8
   2d018:	ldrdeq	sp, [r2], -r8
   2d01c:	ldrdeq	sp, [r2], -r8
   2d020:	ldrdeq	sp, [r2], -r8
   2d024:	ldrdeq	sp, [r2], -r8
   2d028:	andeq	sp, r2, r4, ror #3
   2d02c:	ldrdeq	sp, [r2], -r8
   2d030:	ldrdeq	sp, [r2], -r8
   2d034:	andeq	sp, r2, r8, ror r0
   2d038:	mov	r1, #48	; 0x30
   2d03c:	ldr	r0, [sp, #72]	; 0x48
   2d040:	bl	1230c <strchr@plt>
   2d044:	cmp	r0, #0
   2d048:	beq	2cf44 <__assert_fail@plt+0x1a950>
   2d04c:	ldrb	r3, [r9, #1]
   2d050:	cmp	r3, #68	; 0x44
   2d054:	beq	2d068 <__assert_fail@plt+0x1aa74>
   2d058:	cmp	r3, #105	; 0x69
   2d05c:	beq	2d504 <__assert_fail@plt+0x1af10>
   2d060:	cmp	r3, #66	; 0x42
   2d064:	bne	2cf44 <__assert_fail@plt+0x1a950>
   2d068:	mov	r3, #2
   2d06c:	str	r3, [sp, #16]
   2d070:	mov	r7, #1000	; 0x3e8
   2d074:	b	2cf50 <__assert_fail@plt+0x1a95c>
   2d078:	cmp	sl, #0
   2d07c:	sbcs	r3, fp, #0
   2d080:	blt	2d4f4 <__assert_fail@plt+0x1af00>
   2d084:	adds	sl, sl, sl
   2d088:	adc	fp, fp, fp
   2d08c:	mov	r3, #0
   2d090:	ldr	r1, [sp, #16]
   2d094:	orr	r4, r4, r3
   2d098:	add	r2, r9, r1
   2d09c:	str	r2, [r5]
   2d0a0:	ldrb	r2, [r9, r1]
   2d0a4:	cmp	r2, #0
   2d0a8:	orrne	r4, r4, #2
   2d0ac:	b	2ce0c <__assert_fail@plt+0x1a818>
   2d0b0:	mov	r3, #0
   2d0b4:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d0b8:	ldr	r3, [pc, #1172]	; 2d554 <__assert_fail@plt+0x1af60>
   2d0bc:	mvn	r2, #0
   2d0c0:	cmp	fp, r3
   2d0c4:	cmpeq	sl, r2
   2d0c8:	bhi	2d4f4 <__assert_fail@plt+0x1af00>
   2d0cc:	lsl	r3, fp, #9
   2d0d0:	orr	r3, r3, sl, lsr #23
   2d0d4:	lsl	r2, sl, #9
   2d0d8:	mov	fp, r3
   2d0dc:	mov	sl, r2
   2d0e0:	mov	r3, #0
   2d0e4:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d0e8:	mov	r2, r7
   2d0ec:	asr	r3, r7, #31
   2d0f0:	mvn	r0, #0
   2d0f4:	mvn	r1, #0
   2d0f8:	strd	r2, [sp]
   2d0fc:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d100:	mov	r3, #0
   2d104:	mov	r7, r3
   2d108:	mov	r2, #7
   2d10c:	mov	r8, #1
   2d110:	strd	r0, [sp, #8]
   2d114:	mov	r1, r6
   2d118:	mov	r6, r4
   2d11c:	mov	r4, r5
   2d120:	mov	r5, r1
   2d124:	b	2d150 <__assert_fail@plt+0x1ab5c>
   2d128:	ldrd	r0, [sp]
   2d12c:	mov	ip, r7
   2d130:	mul	lr, sl, r1
   2d134:	ldr	r1, [sp]
   2d138:	mla	lr, r0, fp, lr
   2d13c:	umull	sl, fp, sl, r1
   2d140:	add	fp, lr, fp
   2d144:	subs	r2, r2, #1
   2d148:	orr	r3, r3, ip
   2d14c:	beq	2d258 <__assert_fail@plt+0x1ac64>
   2d150:	ldrd	r0, [sp, #8]
   2d154:	cmp	r1, fp
   2d158:	cmpeq	r0, sl
   2d15c:	bcs	2d128 <__assert_fail@plt+0x1ab34>
   2d160:	mvn	sl, #0
   2d164:	mvn	fp, #0
   2d168:	mov	ip, r8
   2d16c:	b	2d144 <__assert_fail@plt+0x1ab50>
   2d170:	mov	r2, r7
   2d174:	asr	r3, r7, #31
   2d178:	mvn	r0, #0
   2d17c:	mvn	r1, #0
   2d180:	strd	r2, [sp, #8]
   2d184:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d188:	mov	r7, r9
   2d18c:	mov	r3, #0
   2d190:	ldrd	r8, [sp, #8]
   2d194:	mov	lr, r3
   2d198:	mov	r2, #8
   2d19c:	mov	ip, #1
   2d1a0:	strd	r0, [sp]
   2d1a4:	ldrd	r0, [sp]
   2d1a8:	cmp	r1, fp
   2d1ac:	cmpeq	r0, sl
   2d1b0:	movcs	r1, lr
   2d1b4:	mulcs	r0, sl, r9
   2d1b8:	movcc	r1, ip
   2d1bc:	mlacs	r0, r8, fp, r0
   2d1c0:	umullcs	sl, fp, sl, r8
   2d1c4:	mvncc	sl, #0
   2d1c8:	addcs	fp, r0, fp
   2d1cc:	mvncc	fp, #0
   2d1d0:	subs	r2, r2, #1
   2d1d4:	orr	r3, r3, r1
   2d1d8:	bne	2d1a4 <__assert_fail@plt+0x1abb0>
   2d1dc:	mov	r9, r7
   2d1e0:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d1e4:	mov	r2, r7
   2d1e8:	asr	r3, r7, #31
   2d1ec:	mvn	r0, #0
   2d1f0:	mvn	r1, #0
   2d1f4:	strd	r2, [sp]
   2d1f8:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d1fc:	mov	r3, #0
   2d200:	mov	r7, r3
   2d204:	mov	r2, #4
   2d208:	mov	r8, #1
   2d20c:	strd	r0, [sp, #8]
   2d210:	mov	r1, r6
   2d214:	mov	r6, r4
   2d218:	mov	r4, r5
   2d21c:	mov	r5, r1
   2d220:	ldrd	r0, [sp, #8]
   2d224:	cmp	r1, fp
   2d228:	cmpeq	r0, sl
   2d22c:	bcc	2d4e4 <__assert_fail@plt+0x1aef0>
   2d230:	ldrd	r0, [sp]
   2d234:	mov	ip, r7
   2d238:	mul	lr, sl, r1
   2d23c:	ldr	r1, [sp]
   2d240:	mla	lr, r0, fp, lr
   2d244:	umull	sl, fp, sl, r1
   2d248:	add	fp, lr, fp
   2d24c:	subs	r2, r2, #1
   2d250:	orr	r3, r3, ip
   2d254:	bne	2d220 <__assert_fail@plt+0x1ac2c>
   2d258:	mov	r2, r5
   2d25c:	mov	r5, r4
   2d260:	mov	r4, r6
   2d264:	mov	r6, r2
   2d268:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d26c:	mov	r2, r7
   2d270:	asr	r3, r7, #31
   2d274:	mvn	r0, #0
   2d278:	mvn	r1, #0
   2d27c:	strd	r2, [sp]
   2d280:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d284:	cmp	fp, r1
   2d288:	cmpeq	sl, r0
   2d28c:	bhi	2d4f4 <__assert_fail@plt+0x1af00>
   2d290:	ldr	r3, [sp, #4]
   2d294:	mul	r2, sl, r3
   2d298:	mov	r3, #0
   2d29c:	mla	r2, r7, fp, r2
   2d2a0:	umull	sl, fp, sl, r7
   2d2a4:	add	fp, r2, fp
   2d2a8:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d2ac:	mov	r2, r7
   2d2b0:	asr	r3, r7, #31
   2d2b4:	mvn	r0, #0
   2d2b8:	mvn	r1, #0
   2d2bc:	strd	r2, [sp]
   2d2c0:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d2c4:	mov	r3, #0
   2d2c8:	mov	r7, r3
   2d2cc:	mov	r2, #3
   2d2d0:	mov	r8, #1
   2d2d4:	str	r5, [sp, #20]
   2d2d8:	strd	r0, [sp, #8]
   2d2dc:	mov	r1, r6
   2d2e0:	mov	r6, r4
   2d2e4:	mov	r4, r1
   2d2e8:	ldrd	r0, [sp, #8]
   2d2ec:	cmp	fp, r1
   2d2f0:	cmpeq	sl, r0
   2d2f4:	bhi	2d520 <__assert_fail@plt+0x1af2c>
   2d2f8:	ldrd	r0, [sp]
   2d2fc:	mov	lr, r7
   2d300:	mul	ip, sl, r1
   2d304:	mla	ip, r0, fp, ip
   2d308:	umull	sl, fp, sl, r0
   2d30c:	add	fp, ip, fp
   2d310:	subs	r2, r2, #1
   2d314:	orr	r3, r3, lr
   2d318:	bne	2d2e8 <__assert_fail@plt+0x1acf4>
   2d31c:	mov	r2, r4
   2d320:	ldr	r5, [sp, #20]
   2d324:	mov	r4, r6
   2d328:	mov	r6, r2
   2d32c:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d330:	mov	r2, r7
   2d334:	asr	r3, r7, #31
   2d338:	mvn	r0, #0
   2d33c:	mvn	r1, #0
   2d340:	strd	r2, [sp]
   2d344:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d348:	mov	r3, #0
   2d34c:	mov	r7, r3
   2d350:	mov	r2, #5
   2d354:	mov	r8, #1
   2d358:	strd	r0, [sp, #8]
   2d35c:	mov	r1, r6
   2d360:	mov	r6, r4
   2d364:	mov	r4, r5
   2d368:	mov	r5, r1
   2d36c:	b	2d398 <__assert_fail@plt+0x1ada4>
   2d370:	ldrd	r0, [sp]
   2d374:	mov	ip, r7
   2d378:	mul	lr, sl, r1
   2d37c:	ldr	r1, [sp]
   2d380:	mla	lr, r0, fp, lr
   2d384:	umull	sl, fp, sl, r1
   2d388:	add	fp, lr, fp
   2d38c:	subs	r2, r2, #1
   2d390:	orr	r3, r3, ip
   2d394:	beq	2d258 <__assert_fail@plt+0x1ac64>
   2d398:	ldrd	r0, [sp, #8]
   2d39c:	cmp	fp, r1
   2d3a0:	cmpeq	sl, r0
   2d3a4:	bls	2d370 <__assert_fail@plt+0x1ad7c>
   2d3a8:	mvn	sl, #0
   2d3ac:	mvn	fp, #0
   2d3b0:	mov	ip, r8
   2d3b4:	b	2d38c <__assert_fail@plt+0x1ad98>
   2d3b8:	mov	r2, r7
   2d3bc:	asr	r3, r7, #31
   2d3c0:	mvn	r0, #0
   2d3c4:	mvn	r1, #0
   2d3c8:	strd	r2, [sp]
   2d3cc:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d3d0:	mov	r3, #0
   2d3d4:	mov	r7, r3
   2d3d8:	mov	r2, #6
   2d3dc:	mov	r8, #1
   2d3e0:	strd	r0, [sp, #8]
   2d3e4:	mov	r1, r6
   2d3e8:	mov	r6, r4
   2d3ec:	mov	r4, r5
   2d3f0:	mov	r5, r1
   2d3f4:	b	2d420 <__assert_fail@plt+0x1ae2c>
   2d3f8:	ldrd	r0, [sp]
   2d3fc:	mov	ip, r7
   2d400:	mul	lr, sl, r1
   2d404:	ldr	r1, [sp]
   2d408:	mla	lr, r0, fp, lr
   2d40c:	umull	sl, fp, sl, r1
   2d410:	add	fp, lr, fp
   2d414:	subs	r2, r2, #1
   2d418:	orr	r3, r3, ip
   2d41c:	beq	2d258 <__assert_fail@plt+0x1ac64>
   2d420:	ldrd	r0, [sp, #8]
   2d424:	cmp	fp, r1
   2d428:	cmpeq	sl, r0
   2d42c:	bls	2d3f8 <__assert_fail@plt+0x1ae04>
   2d430:	mvn	sl, #0
   2d434:	mvn	fp, #0
   2d438:	mov	ip, r8
   2d43c:	b	2d414 <__assert_fail@plt+0x1ae20>
   2d440:	ldr	r3, [pc, #272]	; 2d558 <__assert_fail@plt+0x1af64>
   2d444:	mvn	r2, #0
   2d448:	cmp	fp, r3
   2d44c:	cmpeq	sl, r2
   2d450:	bhi	2d4f4 <__assert_fail@plt+0x1af00>
   2d454:	lsl	r3, fp, #10
   2d458:	orr	r3, r3, sl, lsr #22
   2d45c:	lsl	r2, sl, #10
   2d460:	mov	fp, r3
   2d464:	mov	sl, r2
   2d468:	mov	r3, #0
   2d46c:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d470:	asr	r3, r7, #31
   2d474:	mov	r1, r3
   2d478:	mov	r0, r7
   2d47c:	mov	r2, r7
   2d480:	strd	r0, [sp]
   2d484:	mvn	r0, #0
   2d488:	mvn	r1, #0
   2d48c:	bl	40080 <__assert_fail@plt+0x2da8c>
   2d490:	cmp	fp, r1
   2d494:	cmpeq	sl, r0
   2d498:	bhi	2d530 <__assert_fail@plt+0x1af3c>
   2d49c:	ldr	r3, [sp, #4]
   2d4a0:	mul	ip, sl, r3
   2d4a4:	umull	r2, r3, sl, r7
   2d4a8:	mla	r7, r7, fp, ip
   2d4ac:	add	r3, r7, r3
   2d4b0:	cmp	r1, r3
   2d4b4:	cmpeq	r0, r2
   2d4b8:	bcc	2d530 <__assert_fail@plt+0x1af3c>
   2d4bc:	ldrd	r0, [sp]
   2d4c0:	mul	r3, r0, r3
   2d4c4:	umull	sl, fp, r0, r2
   2d4c8:	mla	r2, r2, r1, r3
   2d4cc:	mov	r3, #0
   2d4d0:	add	fp, r2, fp
   2d4d4:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d4d8:	strd	sl, [r6]
   2d4dc:	orr	r4, r4, #2
   2d4e0:	b	2cdb4 <__assert_fail@plt+0x1a7c0>
   2d4e4:	mvn	sl, #0
   2d4e8:	mvn	fp, #0
   2d4ec:	mov	ip, r8
   2d4f0:	b	2d24c <__assert_fail@plt+0x1ac58>
   2d4f4:	mvn	sl, #0
   2d4f8:	mvn	fp, #0
   2d4fc:	mov	r3, #1
   2d500:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d504:	ldrb	r3, [r9, #2]
   2d508:	mov	r7, #1024	; 0x400
   2d50c:	cmp	r3, #66	; 0x42
   2d510:	movne	r3, #1
   2d514:	moveq	r3, #3
   2d518:	str	r3, [sp, #16]
   2d51c:	b	2cf50 <__assert_fail@plt+0x1a95c>
   2d520:	mvn	sl, #0
   2d524:	mvn	fp, #0
   2d528:	mov	lr, r8
   2d52c:	b	2d310 <__assert_fail@plt+0x1ad1c>
   2d530:	mov	r3, #1
   2d534:	mvn	sl, #0
   2d538:	mvn	fp, #0
   2d53c:	b	2d090 <__assert_fail@plt+0x1aa9c>
   2d540:	ldr	r3, [pc, #20]	; 2d55c <__assert_fail@plt+0x1af68>
   2d544:	mov	r2, #84	; 0x54
   2d548:	ldr	r1, [pc, #16]	; 2d560 <__assert_fail@plt+0x1af6c>
   2d54c:	ldr	r0, [pc, #16]	; 2d564 <__assert_fail@plt+0x1af70>
   2d550:	bl	125f4 <__assert_fail@plt>
   2d554:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   2d558:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   2d55c:	andeq	r5, r4, r0, ror #26
   2d560:	andeq	r5, r4, ip, lsr #26
   2d564:	andeq	r5, r4, r8, lsr sp
   2d568:	push	{r4, lr}
   2d56c:	sub	sp, sp, #8
   2d570:	ldr	r3, [pc, #96]	; 2d5d8 <__assert_fail@plt+0x1afe4>
   2d574:	add	r1, sp, #8
   2d578:	mov	r4, #0
   2d57c:	ldr	r3, [r3]
   2d580:	str	r4, [r1, #-4]!
   2d584:	mov	r2, #10
   2d588:	mov	r0, sp
   2d58c:	str	r4, [sp]
   2d590:	bl	11f10 <__getdelim@plt>
   2d594:	subs	r3, r0, #0
   2d598:	ble	2d5c4 <__assert_fail@plt+0x1afd0>
   2d59c:	ldr	r0, [sp]
   2d5a0:	sub	r3, r3, #1
   2d5a4:	ldrb	r2, [r0, r3]
   2d5a8:	cmp	r2, #10
   2d5ac:	strbeq	r4, [r0, r3]
   2d5b0:	ldreq	r0, [sp]
   2d5b4:	bl	12438 <rpmatch@plt>
   2d5b8:	cmp	r0, #0
   2d5bc:	movle	r4, #0
   2d5c0:	movgt	r4, #1
   2d5c4:	ldr	r0, [sp]
   2d5c8:	bl	2db68 <__assert_fail@plt+0x1b574>
   2d5cc:	mov	r0, r4
   2d5d0:	add	sp, sp, #8
   2d5d4:	pop	{r4, pc}
   2d5d8:	andeq	r7, r5, r0, asr r5
   2d5dc:	cmp	r1, #0
   2d5e0:	cmpne	r0, #0
   2d5e4:	moveq	r1, #1
   2d5e8:	moveq	r0, r1
   2d5ec:	umull	r2, r3, r0, r1
   2d5f0:	adds	r3, r3, #0
   2d5f4:	movne	r3, #1
   2d5f8:	cmp	r2, #0
   2d5fc:	blt	2d60c <__assert_fail@plt+0x1b018>
   2d600:	cmp	r3, #0
   2d604:	bne	2d60c <__assert_fail@plt+0x1b018>
   2d608:	b	11ec8 <calloc@plt>
   2d60c:	push	{r4, lr}
   2d610:	bl	12348 <__errno_location@plt>
   2d614:	mov	r3, #12
   2d618:	str	r3, [r0]
   2d61c:	mov	r0, #0
   2d620:	pop	{r4, pc}
   2d624:	ldr	r0, [r0]
   2d628:	cmp	r0, #0
   2d62c:	bxlt	lr
   2d630:	push	{r4, lr}
   2d634:	bl	125ac <close@plt>
   2d638:	cmp	r0, #0
   2d63c:	popeq	{r4, pc}
   2d640:	ldr	r3, [pc, #12]	; 2d654 <__assert_fail@plt+0x1b060>
   2d644:	mov	r2, #64	; 0x40
   2d648:	ldr	r1, [pc, #8]	; 2d658 <__assert_fail@plt+0x1b064>
   2d64c:	ldr	r0, [pc, #8]	; 2d65c <__assert_fail@plt+0x1b068>
   2d650:	bl	125f4 <__assert_fail@plt>
   2d654:	andeq	r5, r4, ip, ror #26
   2d658:	andeq	r5, r4, r4, lsl #27
   2d65c:	muleq	r4, r4, sp
   2d660:	push	{r4, r5, r6, lr}
   2d664:	mov	r2, #18688	; 0x4900
   2d668:	mov	r4, r0
   2d66c:	ldr	r0, [r0]
   2d670:	bl	12324 <openat64@plt>
   2d674:	subs	r5, r0, #0
   2d678:	blt	2d690 <__assert_fail@plt+0x1b09c>
   2d67c:	mov	r0, r4
   2d680:	bl	2d624 <__assert_fail@plt+0x1b030>
   2d684:	str	r5, [r4]
   2d688:	mov	r0, #0
   2d68c:	pop	{r4, r5, r6, pc}
   2d690:	mvn	r0, #0
   2d694:	pop	{r4, r5, r6, pc}
   2d698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d69c:	sub	sp, sp, #20
   2d6a0:	mov	r6, r0
   2d6a4:	bl	12120 <chdir@plt>
   2d6a8:	subs	r4, r0, #0
   2d6ac:	beq	2d6c4 <__assert_fail@plt+0x1b0d0>
   2d6b0:	bl	12348 <__errno_location@plt>
   2d6b4:	ldr	r5, [r0]
   2d6b8:	str	r0, [sp, #4]
   2d6bc:	cmp	r5, #36	; 0x24
   2d6c0:	beq	2d6d0 <__assert_fail@plt+0x1b0dc>
   2d6c4:	mov	r0, r4
   2d6c8:	add	sp, sp, #20
   2d6cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d6d0:	mov	r0, r6
   2d6d4:	bl	12300 <strlen@plt>
   2d6d8:	mvn	r3, #99	; 0x63
   2d6dc:	str	r3, [sp, #12]
   2d6e0:	subs	r4, r0, #0
   2d6e4:	beq	2d8e8 <__assert_fail@plt+0x1b2f4>
   2d6e8:	cmp	r4, #4096	; 0x1000
   2d6ec:	bcc	2d8fc <__assert_fail@plt+0x1b308>
   2d6f0:	ldr	r1, [pc, #536]	; 2d910 <__assert_fail@plt+0x1b31c>
   2d6f4:	mov	r0, r6
   2d6f8:	bl	125e8 <strspn@plt>
   2d6fc:	cmp	r0, #2
   2d700:	mov	fp, r0
   2d704:	beq	2d7c8 <__assert_fail@plt+0x1b1d4>
   2d708:	cmp	r0, #0
   2d70c:	moveq	fp, r6
   2d710:	bne	2d88c <__assert_fail@plt+0x1b298>
   2d714:	ldrb	r2, [fp]
   2d718:	cmp	r2, #47	; 0x2f
   2d71c:	beq	2d8c0 <__assert_fail@plt+0x1b2cc>
   2d720:	add	r6, r6, r4
   2d724:	cmp	fp, r6
   2d728:	bhi	2d8d4 <__assert_fail@plt+0x1b2e0>
   2d72c:	ldr	r4, [pc, #480]	; 2d914 <__assert_fail@plt+0x1b320>
   2d730:	sub	r2, r6, fp
   2d734:	cmp	r2, r4
   2d738:	addle	r7, sp, #12
   2d73c:	ble	2d820 <__assert_fail@plt+0x1b22c>
   2d740:	mov	r8, #4096	; 0x1000
   2d744:	mov	r5, #47	; 0x2f
   2d748:	mov	r9, #0
   2d74c:	b	2d79c <__assert_fail@plt+0x1b1a8>
   2d750:	sub	r1, sl, fp
   2d754:	cmp	r1, r4
   2d758:	strb	r9, [sl]
   2d75c:	bgt	2d8ac <__assert_fail@plt+0x1b2b8>
   2d760:	mov	r1, fp
   2d764:	add	r0, sp, #12
   2d768:	bl	2d660 <__assert_fail@plt+0x1b06c>
   2d76c:	add	r7, sp, #12
   2d770:	strb	r5, [sl]
   2d774:	cmp	r0, #0
   2d778:	bne	2d83c <__assert_fail@plt+0x1b248>
   2d77c:	add	fp, sl, #1
   2d780:	mov	r0, fp
   2d784:	ldr	r1, [pc, #388]	; 2d910 <__assert_fail@plt+0x1b31c>
   2d788:	bl	125e8 <strspn@plt>
   2d78c:	add	fp, fp, r0
   2d790:	sub	r2, r6, fp
   2d794:	cmp	r2, r4
   2d798:	ble	2d820 <__assert_fail@plt+0x1b22c>
   2d79c:	mov	r2, r8
   2d7a0:	mov	r1, r5
   2d7a4:	mov	r0, fp
   2d7a8:	bl	12330 <memrchr@plt>
   2d7ac:	subs	sl, r0, #0
   2d7b0:	bne	2d750 <__assert_fail@plt+0x1b15c>
   2d7b4:	ldr	r2, [sp, #4]
   2d7b8:	mov	r3, #36	; 0x24
   2d7bc:	mvn	r4, #0
   2d7c0:	str	r3, [r2]
   2d7c4:	b	2d6c4 <__assert_fail@plt+0x1b0d0>
   2d7c8:	sub	r2, r4, #3
   2d7cc:	mov	r1, #47	; 0x2f
   2d7d0:	add	r0, r6, #3
   2d7d4:	bl	123d8 <memchr@plt>
   2d7d8:	subs	r8, r0, #0
   2d7dc:	beq	2d87c <__assert_fail@plt+0x1b288>
   2d7e0:	mov	r3, #0
   2d7e4:	add	r7, sp, #12
   2d7e8:	strb	r3, [r8]
   2d7ec:	mov	r0, r7
   2d7f0:	mov	r1, r6
   2d7f4:	bl	2d660 <__assert_fail@plt+0x1b06c>
   2d7f8:	mov	r3, #47	; 0x2f
   2d7fc:	strb	r3, [r8]
   2d800:	cmp	r0, #0
   2d804:	bne	2d83c <__assert_fail@plt+0x1b248>
   2d808:	add	r8, r8, #1
   2d80c:	mov	r0, r8
   2d810:	ldr	r1, [pc, #248]	; 2d910 <__assert_fail@plt+0x1b31c>
   2d814:	bl	125e8 <strspn@plt>
   2d818:	add	fp, r8, r0
   2d81c:	b	2d714 <__assert_fail@plt+0x1b120>
   2d820:	cmp	r6, fp
   2d824:	bls	2d860 <__assert_fail@plt+0x1b26c>
   2d828:	mov	r1, fp
   2d82c:	mov	r0, r7
   2d830:	bl	2d660 <__assert_fail@plt+0x1b06c>
   2d834:	cmp	r0, #0
   2d838:	beq	2d860 <__assert_fail@plt+0x1b26c>
   2d83c:	ldr	r6, [sp, #4]
   2d840:	mov	r0, r7
   2d844:	mvn	r4, #0
   2d848:	ldr	r5, [r6]
   2d84c:	bl	2d624 <__assert_fail@plt+0x1b030>
   2d850:	mov	r0, r4
   2d854:	str	r5, [r6]
   2d858:	add	sp, sp, #20
   2d85c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d860:	ldr	r0, [sp, #12]
   2d864:	bl	124f8 <fchdir@plt>
   2d868:	subs	r4, r0, #0
   2d86c:	bne	2d83c <__assert_fail@plt+0x1b248>
   2d870:	mov	r0, r7
   2d874:	bl	2d624 <__assert_fail@plt+0x1b030>
   2d878:	b	2d6c4 <__assert_fail@plt+0x1b0d0>
   2d87c:	ldr	r3, [sp, #4]
   2d880:	mvn	r4, #0
   2d884:	str	r5, [r3]
   2d888:	b	2d6c4 <__assert_fail@plt+0x1b0d0>
   2d88c:	add	r7, sp, #12
   2d890:	mov	r0, r7
   2d894:	ldr	r1, [pc, #116]	; 2d910 <__assert_fail@plt+0x1b31c>
   2d898:	bl	2d660 <__assert_fail@plt+0x1b06c>
   2d89c:	cmp	r0, #0
   2d8a0:	addeq	fp, r6, fp
   2d8a4:	beq	2d714 <__assert_fail@plt+0x1b120>
   2d8a8:	b	2d83c <__assert_fail@plt+0x1b248>
   2d8ac:	ldr	r3, [pc, #100]	; 2d918 <__assert_fail@plt+0x1b324>
   2d8b0:	mov	r2, #179	; 0xb3
   2d8b4:	ldr	r1, [pc, #96]	; 2d91c <__assert_fail@plt+0x1b328>
   2d8b8:	ldr	r0, [pc, #96]	; 2d920 <__assert_fail@plt+0x1b32c>
   2d8bc:	bl	125f4 <__assert_fail@plt>
   2d8c0:	ldr	r3, [pc, #80]	; 2d918 <__assert_fail@plt+0x1b324>
   2d8c4:	mov	r2, #162	; 0xa2
   2d8c8:	ldr	r1, [pc, #76]	; 2d91c <__assert_fail@plt+0x1b328>
   2d8cc:	ldr	r0, [pc, #80]	; 2d924 <__assert_fail@plt+0x1b330>
   2d8d0:	bl	125f4 <__assert_fail@plt>
   2d8d4:	ldr	r3, [pc, #60]	; 2d918 <__assert_fail@plt+0x1b324>
   2d8d8:	mov	r2, #163	; 0xa3
   2d8dc:	ldr	r1, [pc, #56]	; 2d91c <__assert_fail@plt+0x1b328>
   2d8e0:	ldr	r0, [pc, #64]	; 2d928 <__assert_fail@plt+0x1b334>
   2d8e4:	bl	125f4 <__assert_fail@plt>
   2d8e8:	ldr	r3, [pc, #40]	; 2d918 <__assert_fail@plt+0x1b324>
   2d8ec:	mov	r2, #126	; 0x7e
   2d8f0:	ldr	r1, [pc, #36]	; 2d91c <__assert_fail@plt+0x1b328>
   2d8f4:	ldr	r0, [pc, #48]	; 2d92c <__assert_fail@plt+0x1b338>
   2d8f8:	bl	125f4 <__assert_fail@plt>
   2d8fc:	ldr	r3, [pc, #20]	; 2d918 <__assert_fail@plt+0x1b324>
   2d900:	mov	r2, #127	; 0x7f
   2d904:	ldr	r1, [pc, #16]	; 2d91c <__assert_fail@plt+0x1b328>
   2d908:	ldr	r0, [pc, #32]	; 2d930 <__assert_fail@plt+0x1b33c>
   2d90c:	bl	125f4 <__assert_fail@plt>
   2d910:	andeq	r6, r4, r0, lsr #4
   2d914:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2d918:	andeq	r5, r4, r8, ror sp
   2d91c:	andeq	r5, r4, r4, lsl #27
   2d920:	ldrdeq	r5, [r4], -r4
   2d924:			; <UNDEFINED> instruction: 0x00045db8
   2d928:	andeq	r5, r4, r4, asr #27
   2d92c:	andeq	r5, r4, r4, lsr #27
   2d930:	andeq	r5, r4, ip, lsr #27
   2d934:	push	{r1, r2, r3}
   2d938:	push	{r4, r5, r6, r7, lr}
   2d93c:	sub	sp, sp, #8
   2d940:	add	r3, sp, #32
   2d944:	ldr	r1, [sp, #28]
   2d948:	str	r3, [sp, #4]
   2d94c:	cmp	r1, #0
   2d950:	beq	2d9e8 <__assert_fail@plt+0x1b3f4>
   2d954:	ldr	r2, [pc, #412]	; 2daf8 <__assert_fail@plt+0x1b504>
   2d958:	mov	r5, r0
   2d95c:	cmp	r1, r2
   2d960:	bne	2d9ac <__assert_fail@plt+0x1b3b8>
   2d964:	ldr	r6, [pc, #400]	; 2dafc <__assert_fail@plt+0x1b508>
   2d968:	ldr	r7, [r3]
   2d96c:	add	r2, sp, #36	; 0x24
   2d970:	ldr	r3, [r6]
   2d974:	str	r2, [sp, #4]
   2d978:	cmp	r3, #0
   2d97c:	mov	r2, r7
   2d980:	blt	2daac <__assert_fail@plt+0x1b4b8>
   2d984:	bl	1242c <fcntl64@plt>
   2d988:	subs	r4, r0, #0
   2d98c:	blt	2da30 <__assert_fail@plt+0x1b43c>
   2d990:	mov	r3, #1
   2d994:	str	r3, [r6]
   2d998:	mov	r0, r4
   2d99c:	add	sp, sp, #8
   2d9a0:	pop	{r4, r5, r6, r7, lr}
   2d9a4:	add	sp, sp, #12
   2d9a8:	bx	lr
   2d9ac:	cmp	r1, #11
   2d9b0:	beq	2d9d8 <__assert_fail@plt+0x1b3e4>
   2d9b4:	bgt	2d9f8 <__assert_fail@plt+0x1b404>
   2d9b8:	cmp	r1, #3
   2d9bc:	beq	2d9d8 <__assert_fail@plt+0x1b3e4>
   2d9c0:	ble	2daec <__assert_fail@plt+0x1b4f8>
   2d9c4:	cmp	r1, #8
   2d9c8:	beq	2da18 <__assert_fail@plt+0x1b424>
   2d9cc:	ble	2da18 <__assert_fail@plt+0x1b424>
   2d9d0:	cmp	r1, #9
   2d9d4:	bne	2da18 <__assert_fail@plt+0x1b424>
   2d9d8:	mov	r0, r5
   2d9dc:	bl	1242c <fcntl64@plt>
   2d9e0:	mov	r4, r0
   2d9e4:	b	2d998 <__assert_fail@plt+0x1b3a4>
   2d9e8:	ldr	r2, [sp, #32]
   2d9ec:	bl	1242c <fcntl64@plt>
   2d9f0:	mov	r4, r0
   2d9f4:	b	2d998 <__assert_fail@plt+0x1b3a4>
   2d9f8:	ldr	r3, [pc, #256]	; 2db00 <__assert_fail@plt+0x1b50c>
   2d9fc:	cmp	r1, r3
   2da00:	bgt	2dacc <__assert_fail@plt+0x1b4d8>
   2da04:	cmp	r1, r2
   2da08:	bge	2da18 <__assert_fail@plt+0x1b424>
   2da0c:	sub	r3, r3, #6
   2da10:	cmp	r1, r3
   2da14:	beq	2d9d8 <__assert_fail@plt+0x1b3e4>
   2da18:	ldr	r3, [sp, #4]
   2da1c:	mov	r0, r5
   2da20:	ldr	r2, [r3]
   2da24:	bl	1242c <fcntl64@plt>
   2da28:	mov	r4, r0
   2da2c:	b	2d998 <__assert_fail@plt+0x1b3a4>
   2da30:	bl	12348 <__errno_location@plt>
   2da34:	ldr	r3, [r0]
   2da38:	cmp	r3, #22
   2da3c:	bne	2d990 <__assert_fail@plt+0x1b39c>
   2da40:	mov	r2, r7
   2da44:	mov	r0, r5
   2da48:	mov	r1, #0
   2da4c:	bl	1242c <fcntl64@plt>
   2da50:	subs	r4, r0, #0
   2da54:	blt	2d998 <__assert_fail@plt+0x1b3a4>
   2da58:	mvn	r3, #0
   2da5c:	str	r3, [r6]
   2da60:	mov	r1, #1
   2da64:	mov	r0, r4
   2da68:	bl	1242c <fcntl64@plt>
   2da6c:	subs	r2, r0, #0
   2da70:	blt	2da8c <__assert_fail@plt+0x1b498>
   2da74:	orr	r2, r2, #1
   2da78:	mov	r1, #2
   2da7c:	mov	r0, r4
   2da80:	bl	1242c <fcntl64@plt>
   2da84:	cmn	r0, #1
   2da88:	bne	2d998 <__assert_fail@plt+0x1b3a4>
   2da8c:	bl	12348 <__errno_location@plt>
   2da90:	mov	r5, r0
   2da94:	mov	r0, r4
   2da98:	ldr	r6, [r5]
   2da9c:	mvn	r4, #0
   2daa0:	bl	125ac <close@plt>
   2daa4:	str	r6, [r5]
   2daa8:	b	2d998 <__assert_fail@plt+0x1b3a4>
   2daac:	mov	r1, #0
   2dab0:	bl	1242c <fcntl64@plt>
   2dab4:	subs	r4, r0, #0
   2dab8:	blt	2d998 <__assert_fail@plt+0x1b3a4>
   2dabc:	ldr	r3, [r6]
   2dac0:	cmn	r3, #1
   2dac4:	beq	2da60 <__assert_fail@plt+0x1b46c>
   2dac8:	b	2d998 <__assert_fail@plt+0x1b3a4>
   2dacc:	ldr	r3, [pc, #48]	; 2db04 <__assert_fail@plt+0x1b510>
   2dad0:	cmp	r1, r3
   2dad4:	beq	2da18 <__assert_fail@plt+0x1b424>
   2dad8:	blt	2d9d8 <__assert_fail@plt+0x1b3e4>
   2dadc:	add	r3, r3, #1
   2dae0:	cmp	r1, r3
   2dae4:	bne	2da18 <__assert_fail@plt+0x1b424>
   2dae8:	b	2d9d8 <__assert_fail@plt+0x1b3e4>
   2daec:	cmp	r1, #1
   2daf0:	bne	2da18 <__assert_fail@plt+0x1b424>
   2daf4:	b	2d9d8 <__assert_fail@plt+0x1b3e4>
   2daf8:	andeq	r0, r0, r6, lsl #8
   2dafc:	andeq	r7, r5, r8, lsr lr
   2db00:	andeq	r0, r0, r7, lsl #8
   2db04:	andeq	r0, r0, r9, lsl #8
   2db08:	push	{r4, lr}
   2db0c:	subs	r4, r0, #0
   2db10:	sub	sp, sp, #8
   2db14:	beq	2db30 <__assert_fail@plt+0x1b53c>
   2db18:	bl	12270 <__freading@plt>
   2db1c:	cmp	r0, #0
   2db20:	beq	2db30 <__assert_fail@plt+0x1b53c>
   2db24:	ldr	r3, [r4]
   2db28:	tst	r3, #256	; 0x100
   2db2c:	bne	2db40 <__assert_fail@plt+0x1b54c>
   2db30:	mov	r0, r4
   2db34:	add	sp, sp, #8
   2db38:	pop	{r4, lr}
   2db3c:	b	11f88 <fflush@plt>
   2db40:	mov	r3, #1
   2db44:	str	r3, [sp]
   2db48:	mov	r2, #0
   2db4c:	mov	r3, #0
   2db50:	mov	r0, r4
   2db54:	bl	2dbc0 <__assert_fail@plt+0x1b5cc>
   2db58:	mov	r0, r4
   2db5c:	add	sp, sp, #8
   2db60:	pop	{r4, lr}
   2db64:	b	11f88 <fflush@plt>
   2db68:	push	{r4, r5, lr}
   2db6c:	sub	sp, sp, #12
   2db70:	mov	r5, r0
   2db74:	bl	12348 <__errno_location@plt>
   2db78:	mov	r2, #0
   2db7c:	mov	r4, r0
   2db80:	ldr	r3, [r0]
   2db84:	str	r2, [r4]
   2db88:	mov	r0, r5
   2db8c:	str	r3, [sp]
   2db90:	str	r3, [sp, #4]
   2db94:	bl	11fc4 <free@plt>
   2db98:	ldr	r3, [r4]
   2db9c:	add	r2, sp, #8
   2dba0:	cmp	r3, #0
   2dba4:	moveq	r3, #4
   2dba8:	movne	r3, #0
   2dbac:	add	r3, r2, r3
   2dbb0:	ldr	r3, [r3, #-8]
   2dbb4:	str	r3, [r4]
   2dbb8:	add	sp, sp, #12
   2dbbc:	pop	{r4, r5, pc}
   2dbc0:	push	{r4, r5, r6, r7, r8, lr}
   2dbc4:	sub	sp, sp, #8
   2dbc8:	ldmib	r0, {ip, lr}
   2dbcc:	mov	r4, r0
   2dbd0:	ldr	r5, [sp, #32]
   2dbd4:	cmp	lr, ip
   2dbd8:	beq	2dbf0 <__assert_fail@plt+0x1b5fc>
   2dbdc:	str	r5, [sp, #32]
   2dbe0:	mov	r0, r4
   2dbe4:	add	sp, sp, #8
   2dbe8:	pop	{r4, r5, r6, r7, r8, lr}
   2dbec:	b	12414 <fseeko64@plt>
   2dbf0:	ldr	lr, [r0, #20]
   2dbf4:	ldr	ip, [r0, #16]
   2dbf8:	cmp	lr, ip
   2dbfc:	bne	2dbdc <__assert_fail@plt+0x1b5e8>
   2dc00:	ldr	r8, [r0, #36]	; 0x24
   2dc04:	cmp	r8, #0
   2dc08:	bne	2dbdc <__assert_fail@plt+0x1b5e8>
   2dc0c:	mov	r6, r2
   2dc10:	mov	r7, r3
   2dc14:	bl	123c0 <fileno@plt>
   2dc18:	mov	r2, r6
   2dc1c:	mov	r3, r7
   2dc20:	str	r5, [sp]
   2dc24:	bl	12180 <lseek64@plt>
   2dc28:	mvn	r3, #0
   2dc2c:	mvn	r2, #0
   2dc30:	cmp	r1, r3
   2dc34:	cmpeq	r0, r2
   2dc38:	beq	2dc58 <__assert_fail@plt+0x1b664>
   2dc3c:	ldr	r3, [r4]
   2dc40:	strd	r0, [r4, #80]	; 0x50
   2dc44:	mov	r0, r8
   2dc48:	bic	r3, r3, #16
   2dc4c:	str	r3, [r4]
   2dc50:	add	sp, sp, #8
   2dc54:	pop	{r4, r5, r6, r7, r8, pc}
   2dc58:	mvn	r0, #0
   2dc5c:	b	2dc50 <__assert_fail@plt+0x1b65c>
   2dc60:	ldrd	r2, [r1, #8]
   2dc64:	push	{r4, r5}
   2dc68:	ldrd	r4, [r0, #8]
   2dc6c:	cmp	r5, r3
   2dc70:	cmpeq	r4, r2
   2dc74:	movne	r0, #0
   2dc78:	beq	2dc84 <__assert_fail@plt+0x1b690>
   2dc7c:	pop	{r4, r5}
   2dc80:	bx	lr
   2dc84:	ldrd	r4, [r0]
   2dc88:	ldrd	r2, [r1]
   2dc8c:	cmp	r5, r3
   2dc90:	cmpeq	r4, r2
   2dc94:	moveq	r0, #1
   2dc98:	movne	r0, #0
   2dc9c:	pop	{r4, r5}
   2dca0:	bx	lr
   2dca4:	push	{r4, lr}
   2dca8:	mov	r2, r1
   2dcac:	mov	r3, #0
   2dcb0:	ldrd	r0, [r0, #8]
   2dcb4:	bl	40080 <__assert_fail@plt+0x2da8c>
   2dcb8:	mov	r0, r2
   2dcbc:	pop	{r4, pc}
   2dcc0:	push	{r4, lr}
   2dcc4:	mov	r2, r1
   2dcc8:	mov	r3, #0
   2dccc:	ldrd	r0, [r0]
   2dcd0:	bl	40080 <__assert_fail@plt+0x2da8c>
   2dcd4:	mov	r0, r2
   2dcd8:	pop	{r4, pc}
   2dcdc:	push	{r4, r5}
   2dce0:	ldrd	r2, [r1]
   2dce4:	ldrd	r4, [r0]
   2dce8:	cmp	r5, r3
   2dcec:	cmpeq	r4, r2
   2dcf0:	moveq	r0, #1
   2dcf4:	movne	r0, #0
   2dcf8:	pop	{r4, r5}
   2dcfc:	bx	lr
   2dd00:	ldr	r2, [r0]
   2dd04:	ldr	r3, [r1]
   2dd08:	ldrd	r0, [r2, #160]	; 0xa0
   2dd0c:	ldrd	r2, [r3, #160]	; 0xa0
   2dd10:	cmp	r1, r3
   2dd14:	cmpeq	r0, r2
   2dd18:	movhi	r0, #1
   2dd1c:	movls	r0, #0
   2dd20:	movcc	r3, #1
   2dd24:	movcs	r3, #0
   2dd28:	sub	r0, r0, r3
   2dd2c:	bx	lr
   2dd30:	ldr	r3, [r0, #40]	; 0x28
   2dd34:	push	{r4, r5, r6, r7, r8, lr}
   2dd38:	cmp	r3, r2
   2dd3c:	mov	r6, r0
   2dd40:	mov	r5, r2
   2dd44:	mov	r4, r1
   2dd48:	ldr	r7, [r0, #44]	; 0x2c
   2dd4c:	bcc	2ddc4 <__assert_fail@plt+0x1b7d0>
   2dd50:	ldr	r0, [r0, #8]
   2dd54:	cmp	r4, #0
   2dd58:	movne	r2, r0
   2dd5c:	beq	2dd70 <__assert_fail@plt+0x1b77c>
   2dd60:	str	r4, [r2], #4
   2dd64:	ldr	r4, [r4, #8]
   2dd68:	cmp	r4, #0
   2dd6c:	bne	2dd60 <__assert_fail@plt+0x1b76c>
   2dd70:	mov	r3, r7
   2dd74:	mov	r2, #4
   2dd78:	mov	r1, r5
   2dd7c:	bl	12510 <qsort@plt>
   2dd80:	ldr	lr, [r6, #8]
   2dd84:	subs	r3, r5, #1
   2dd88:	ldr	r0, [lr]
   2dd8c:	beq	2de08 <__assert_fail@plt+0x1b814>
   2dd90:	mov	r2, lr
   2dd94:	mov	ip, r0
   2dd98:	b	2dda0 <__assert_fail@plt+0x1b7ac>
   2dd9c:	ldr	ip, [r2, #4]!
   2dda0:	ldr	r1, [r2, #4]
   2dda4:	subs	r3, r3, #1
   2dda8:	str	r1, [ip, #8]
   2ddac:	bne	2dd9c <__assert_fail@plt+0x1b7a8>
   2ddb0:	add	r5, lr, r5, lsl #2
   2ddb4:	ldr	r2, [r5, #-4]
   2ddb8:	mov	r3, #0
   2ddbc:	str	r3, [r2, #8]
   2ddc0:	pop	{r4, r5, r6, r7, r8, pc}
   2ddc4:	add	r1, r2, #40	; 0x28
   2ddc8:	cmn	r1, #-1073741823	; 0xc0000001
   2ddcc:	str	r1, [r0, #40]	; 0x28
   2ddd0:	bhi	2ddec <__assert_fail@plt+0x1b7f8>
   2ddd4:	lsl	r1, r1, #2
   2ddd8:	ldr	r0, [r0, #8]
   2dddc:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   2dde0:	cmp	r0, #0
   2dde4:	strne	r0, [r6, #8]
   2dde8:	bne	2dd54 <__assert_fail@plt+0x1b760>
   2ddec:	ldr	r0, [r6, #8]
   2ddf0:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ddf4:	mov	r3, #0
   2ddf8:	mov	r0, r4
   2ddfc:	str	r3, [r6, #8]
   2de00:	str	r3, [r6, #40]	; 0x28
   2de04:	pop	{r4, r5, r6, r7, r8, pc}
   2de08:	mov	r2, r0
   2de0c:	b	2ddb8 <__assert_fail@plt+0x1b7c4>
   2de10:	add	r3, r2, #176	; 0xb0
   2de14:	push	{r4, r5, r6, r7, r8, lr}
   2de18:	mov	r6, r0
   2de1c:	bic	r0, r3, #7
   2de20:	mov	r5, r2
   2de24:	mov	r7, r1
   2de28:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2de2c:	subs	r4, r0, #0
   2de30:	beq	2de7c <__assert_fail@plt+0x1b888>
   2de34:	mov	r1, r7
   2de38:	mov	r2, r5
   2de3c:	add	r0, r4, #168	; 0xa8
   2de40:	bl	12024 <memcpy@plt>
   2de44:	add	r0, r4, r5
   2de48:	ldr	r1, [r6, #24]
   2de4c:	mov	r3, #0
   2de50:	mov	r2, #3
   2de54:	strb	r3, [r0, #168]	; 0xa8
   2de58:	str	r3, [r4, #32]
   2de5c:	str	r3, [r4, #12]
   2de60:	strh	r3, [r4, #58]	; 0x3a
   2de64:	str	r3, [r4, #16]
   2de68:	str	r3, [r4, #20]
   2de6c:	str	r5, [r4, #52]	; 0x34
   2de70:	str	r6, [r4, #44]	; 0x2c
   2de74:	str	r1, [r4, #28]
   2de78:	strh	r2, [r4, #60]	; 0x3c
   2de7c:	mov	r0, r4
   2de80:	pop	{r4, r5, r6, r7, r8, pc}
   2de84:	push	{r4, r5, r6, lr}
   2de88:	subs	r4, r0, #0
   2de8c:	popeq	{r4, r5, r6, pc}
   2de90:	ldr	r3, [r4, #12]
   2de94:	ldr	r5, [r4, #8]
   2de98:	subs	r0, r3, #0
   2de9c:	beq	2dea4 <__assert_fail@plt+0x1b8b0>
   2dea0:	bl	125c4 <closedir@plt>
   2dea4:	mov	r0, r4
   2dea8:	bl	2db68 <__assert_fail@plt+0x1b574>
   2deac:	subs	r4, r5, #0
   2deb0:	bne	2de90 <__assert_fail@plt+0x1b89c>
   2deb4:	pop	{r4, r5, r6, pc}
   2deb8:	push	{r4, lr}
   2debc:	mov	r4, r0
   2dec0:	b	2ded0 <__assert_fail@plt+0x1b8dc>
   2dec4:	bl	3f358 <__assert_fail@plt+0x2cd64>
   2dec8:	cmp	r0, #0
   2decc:	bge	2dee8 <__assert_fail@plt+0x1b8f4>
   2ded0:	mov	r0, r4
   2ded4:	bl	3f30c <__assert_fail@plt+0x2cd18>
   2ded8:	cmp	r0, #0
   2dedc:	mov	r0, r4
   2dee0:	beq	2dec4 <__assert_fail@plt+0x1b8d0>
   2dee4:	pop	{r4, pc}
   2dee8:	bl	125ac <close@plt>
   2deec:	b	2ded0 <__assert_fail@plt+0x1b8dc>
   2def0:	push	{r4, r5, r6, r7, lr}
   2def4:	sub	sp, sp, #100	; 0x64
   2def8:	ldr	r4, [r0, #44]	; 0x2c
   2defc:	ldr	r3, [r4, #48]	; 0x30
   2df00:	tst	r3, #512	; 0x200
   2df04:	beq	2df78 <__assert_fail@plt+0x1b984>
   2df08:	ldr	r6, [r4, #52]	; 0x34
   2df0c:	mov	r7, r1
   2df10:	cmp	r6, #0
   2df14:	mov	r5, r0
   2df18:	beq	2df44 <__assert_fail@plt+0x1b950>
   2df1c:	ldrd	r2, [r5, #64]	; 0x40
   2df20:	add	r1, sp, #96	; 0x60
   2df24:	mov	r0, r6
   2df28:	strd	r2, [r1, #-88]!	; 0xffffffa8
   2df2c:	bl	21c20 <__assert_fail@plt+0xf62c>
   2df30:	cmp	r0, #0
   2df34:	beq	2df70 <__assert_fail@plt+0x1b97c>
   2df38:	ldr	r0, [r0, #8]
   2df3c:	add	sp, sp, #100	; 0x64
   2df40:	pop	{r4, r5, r6, r7, pc}
   2df44:	ldr	r3, [pc, #168]	; 2dff4 <__assert_fail@plt+0x1ba00>
   2df48:	mov	r1, r6
   2df4c:	str	r3, [sp]
   2df50:	ldr	r2, [pc, #160]	; 2dff8 <__assert_fail@plt+0x1ba04>
   2df54:	ldr	r3, [pc, #160]	; 2dffc <__assert_fail@plt+0x1ba08>
   2df58:	mov	r0, #13
   2df5c:	bl	21ec0 <__assert_fail@plt+0xf8cc>
   2df60:	cmp	r0, #0
   2df64:	mov	r6, r0
   2df68:	str	r0, [r4, #52]	; 0x34
   2df6c:	bne	2df1c <__assert_fail@plt+0x1b928>
   2df70:	cmp	r7, #0
   2df74:	bge	2df84 <__assert_fail@plt+0x1b990>
   2df78:	mov	r0, #0
   2df7c:	add	sp, sp, #100	; 0x64
   2df80:	pop	{r4, r5, r6, r7, pc}
   2df84:	mov	r0, r7
   2df88:	add	r1, sp, #8
   2df8c:	bl	11ebc <fstatfs64@plt>
   2df90:	cmp	r0, #0
   2df94:	bne	2df78 <__assert_fail@plt+0x1b984>
   2df98:	cmp	r6, #0
   2df9c:	beq	2dfe8 <__assert_fail@plt+0x1b9f4>
   2dfa0:	mov	r0, #16
   2dfa4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2dfa8:	subs	r4, r0, #0
   2dfac:	beq	2dfe8 <__assert_fail@plt+0x1b9f4>
   2dfb0:	ldrd	r2, [r5, #64]	; 0x40
   2dfb4:	ldr	r1, [sp, #8]
   2dfb8:	mov	r0, r6
   2dfbc:	str	r1, [r4, #8]
   2dfc0:	strd	r2, [r4]
   2dfc4:	mov	r1, r4
   2dfc8:	bl	224b4 <__assert_fail@plt+0xfec0>
   2dfcc:	cmp	r0, #0
   2dfd0:	beq	2dfe0 <__assert_fail@plt+0x1b9ec>
   2dfd4:	cmp	r4, r0
   2dfd8:	beq	2dfe8 <__assert_fail@plt+0x1b9f4>
   2dfdc:	bl	125a0 <abort@plt>
   2dfe0:	mov	r0, r4
   2dfe4:	bl	2db68 <__assert_fail@plt+0x1b574>
   2dfe8:	ldr	r0, [sp, #8]
   2dfec:	add	sp, sp, #100	; 0x64
   2dff0:	pop	{r4, r5, r6, r7, pc}
   2dff4:	andeq	sp, r2, r8, ror #22
   2dff8:	andeq	sp, r2, r0, asr #25
   2dffc:	ldrdeq	sp, [r2], -ip
   2e000:	push	{r4, r5, r6, lr}
   2e004:	mov	r5, r1
   2e008:	ldr	r1, [r0, #32]
   2e00c:	cmn	r1, #100	; 0x64
   2e010:	sub	r3, r1, r5
   2e014:	clz	r3, r3
   2e018:	lsr	r3, r3, #5
   2e01c:	moveq	r3, #0
   2e020:	cmp	r3, #0
   2e024:	bne	2e07c <__assert_fail@plt+0x1ba88>
   2e028:	cmp	r2, #0
   2e02c:	mov	r4, r0
   2e030:	bne	2e064 <__assert_fail@plt+0x1ba70>
   2e034:	ldr	r3, [r0, #48]	; 0x30
   2e038:	lsr	r3, r3, #2
   2e03c:	eor	r3, r3, #1
   2e040:	cmp	r1, #0
   2e044:	movlt	r3, #0
   2e048:	andge	r3, r3, #1
   2e04c:	cmp	r3, #0
   2e050:	beq	2e05c <__assert_fail@plt+0x1ba68>
   2e054:	mov	r0, r1
   2e058:	bl	125ac <close@plt>
   2e05c:	str	r5, [r4, #32]
   2e060:	pop	{r4, r5, r6, pc}
   2e064:	add	r0, r0, #60	; 0x3c
   2e068:	bl	3f314 <__assert_fail@plt+0x2cd20>
   2e06c:	cmp	r0, #0
   2e070:	bge	2e058 <__assert_fail@plt+0x1ba64>
   2e074:	str	r5, [r4, #32]
   2e078:	pop	{r4, r5, r6, pc}
   2e07c:	bl	125a0 <abort@plt>
   2e080:	ldr	r3, [r0, #48]	; 0x30
   2e084:	push	{r4, r5, r6, lr}
   2e088:	ands	r5, r3, #4
   2e08c:	mov	r4, r0
   2e090:	movne	r5, #0
   2e094:	bne	2e0b0 <__assert_fail@plt+0x1babc>
   2e098:	tst	r3, #512	; 0x200
   2e09c:	bne	2e0c0 <__assert_fail@plt+0x1bacc>
   2e0a0:	ldr	r0, [r0, #28]
   2e0a4:	bl	124f8 <fchdir@plt>
   2e0a8:	adds	r5, r0, #0
   2e0ac:	movne	r5, #1
   2e0b0:	add	r0, r4, #60	; 0x3c
   2e0b4:	bl	2deb8 <__assert_fail@plt+0x1b8c4>
   2e0b8:	mov	r0, r5
   2e0bc:	pop	{r4, r5, r6, pc}
   2e0c0:	mov	r2, #1
   2e0c4:	mvn	r1, #99	; 0x63
   2e0c8:	bl	2e000 <__assert_fail@plt+0x1ba0c>
   2e0cc:	b	2e0b0 <__assert_fail@plt+0x1babc>
   2e0d0:	push	{r4, r5, r6, lr}
   2e0d4:	mov	r5, r0
   2e0d8:	ldr	r0, [r1]
   2e0dc:	add	r3, r0, #256	; 0x100
   2e0e0:	add	r2, r3, r2
   2e0e4:	cmp	r0, r2
   2e0e8:	bhi	2e114 <__assert_fail@plt+0x1bb20>
   2e0ec:	str	r2, [r1]
   2e0f0:	ldr	r0, [r5]
   2e0f4:	mov	r1, r2
   2e0f8:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   2e0fc:	subs	r4, r0, #0
   2e100:	movne	r3, #1
   2e104:	strne	r4, [r5]
   2e108:	beq	2e13c <__assert_fail@plt+0x1bb48>
   2e10c:	mov	r0, r3
   2e110:	pop	{r4, r5, r6, pc}
   2e114:	ldr	r0, [r5]
   2e118:	mov	r4, #0
   2e11c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2e120:	str	r4, [r5]
   2e124:	bl	12348 <__errno_location@plt>
   2e128:	mov	r2, #36	; 0x24
   2e12c:	mov	r3, r4
   2e130:	str	r2, [r0]
   2e134:	mov	r0, r3
   2e138:	pop	{r4, r5, r6, pc}
   2e13c:	ldr	r0, [r5]
   2e140:	bl	2db68 <__assert_fail@plt+0x1b574>
   2e144:	str	r4, [r5]
   2e148:	mov	r3, r4
   2e14c:	b	2e10c <__assert_fail@plt+0x1bb18>
   2e150:	push	{r4, r5, r6, lr}
   2e154:	mov	r4, r2
   2e158:	ldr	r2, [r2, #48]	; 0x30
   2e15c:	sub	sp, sp, #8
   2e160:	cmp	r2, #0
   2e164:	add	r5, r4, #64	; 0x40
   2e168:	bne	2e1c0 <__assert_fail@plt+0x1bbcc>
   2e16c:	tst	r1, #1
   2e170:	beq	2e1c0 <__assert_fail@plt+0x1bbcc>
   2e174:	mov	r2, r5
   2e178:	ldr	r1, [r4, #24]
   2e17c:	mov	r0, #3
   2e180:	bl	12558 <__xstat64@plt>
   2e184:	cmp	r0, #0
   2e188:	beq	2e1fc <__assert_fail@plt+0x1bc08>
   2e18c:	bl	12348 <__errno_location@plt>
   2e190:	ldr	r3, [r0]
   2e194:	mov	r6, r0
   2e198:	cmp	r3, #2
   2e19c:	beq	2e274 <__assert_fail@plt+0x1bc80>
   2e1a0:	str	r3, [r4, #32]
   2e1a4:	mov	r0, r5
   2e1a8:	mov	r2, #104	; 0x68
   2e1ac:	mov	r1, #0
   2e1b0:	bl	12378 <memset@plt>
   2e1b4:	mov	r0, #10
   2e1b8:	add	sp, sp, #8
   2e1bc:	pop	{r4, r5, r6, pc}
   2e1c0:	lsl	r1, r1, #30
   2e1c4:	orrs	r3, r3, r1, lsr #31
   2e1c8:	bne	2e174 <__assert_fail@plt+0x1bb80>
   2e1cc:	mov	r3, #256	; 0x100
   2e1d0:	ldr	r2, [r4, #24]
   2e1d4:	mov	r1, r0
   2e1d8:	str	r3, [sp]
   2e1dc:	mov	r0, #3
   2e1e0:	mov	r3, r5
   2e1e4:	bl	1212c <__fxstatat64@plt>
   2e1e8:	cmp	r0, #0
   2e1ec:	beq	2e1fc <__assert_fail@plt+0x1bc08>
   2e1f0:	bl	12348 <__errno_location@plt>
   2e1f4:	ldr	r3, [r0]
   2e1f8:	b	2e1a0 <__assert_fail@plt+0x1bbac>
   2e1fc:	ldr	r0, [r4, #80]	; 0x50
   2e200:	and	r0, r0, #61440	; 0xf000
   2e204:	cmp	r0, #16384	; 0x4000
   2e208:	beq	2e22c <__assert_fail@plt+0x1bc38>
   2e20c:	cmp	r0, #40960	; 0xa000
   2e210:	moveq	r0, #12
   2e214:	beq	2e1b8 <__assert_fail@plt+0x1bbc4>
   2e218:	cmp	r0, #32768	; 0x8000
   2e21c:	movne	r0, #3
   2e220:	moveq	r0, #8
   2e224:	add	sp, sp, #8
   2e228:	pop	{r4, r5, r6, pc}
   2e22c:	ldrb	r3, [r4, #168]	; 0xa8
   2e230:	cmp	r3, #46	; 0x2e
   2e234:	beq	2e240 <__assert_fail@plt+0x1bc4c>
   2e238:	mov	r0, #1
   2e23c:	b	2e1b8 <__assert_fail@plt+0x1bbc4>
   2e240:	ldrb	r3, [r4, #169]	; 0xa9
   2e244:	cmp	r3, #0
   2e248:	beq	2e260 <__assert_fail@plt+0x1bc6c>
   2e24c:	ldr	r3, [r4, #168]	; 0xa8
   2e250:	bic	r3, r3, #-16777216	; 0xff000000
   2e254:	bic	r3, r3, #255	; 0xff
   2e258:	cmp	r3, #11776	; 0x2e00
   2e25c:	bne	2e238 <__assert_fail@plt+0x1bc44>
   2e260:	ldr	r0, [r4, #48]	; 0x30
   2e264:	cmp	r0, #0
   2e268:	movne	r0, #5
   2e26c:	moveq	r0, #1
   2e270:	b	2e1b8 <__assert_fail@plt+0x1bbc4>
   2e274:	mov	r2, r5
   2e278:	ldr	r1, [r4, #24]
   2e27c:	mov	r0, #3
   2e280:	bl	125b8 <__lxstat64@plt>
   2e284:	cmp	r0, #0
   2e288:	streq	r0, [r6]
   2e28c:	moveq	r0, #13
   2e290:	beq	2e1b8 <__assert_fail@plt+0x1bbc4>
   2e294:	ldr	r3, [r6]
   2e298:	b	2e1a0 <__assert_fail@plt+0x1bbac>
   2e29c:	ldr	r3, [pc, #104]	; 2e30c <__assert_fail@plt+0x1bd18>
   2e2a0:	push	{r4, lr}
   2e2a4:	and	r3, r3, r0
   2e2a8:	cmp	r3, #0
   2e2ac:	sub	sp, sp, #8
   2e2b0:	mov	r4, r1
   2e2b4:	beq	2e2e8 <__assert_fail@plt+0x1bcf4>
   2e2b8:	ldr	r2, [pc, #80]	; 2e310 <__assert_fail@plt+0x1bd1c>
   2e2bc:	ldr	r3, [pc, #80]	; 2e314 <__assert_fail@plt+0x1bd20>
   2e2c0:	str	r2, [sp]
   2e2c4:	mov	r1, #0
   2e2c8:	ldr	r2, [pc, #72]	; 2e318 <__assert_fail@plt+0x1bd24>
   2e2cc:	mov	r0, #31
   2e2d0:	bl	21ec0 <__assert_fail@plt+0xf8cc>
   2e2d4:	str	r0, [r4]
   2e2d8:	adds	r0, r0, #0
   2e2dc:	movne	r0, #1
   2e2e0:	add	sp, sp, #8
   2e2e4:	pop	{r4, pc}
   2e2e8:	mov	r0, #32
   2e2ec:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2e2f0:	cmp	r0, #0
   2e2f4:	str	r0, [r4]
   2e2f8:	beq	2e2e0 <__assert_fail@plt+0x1bcec>
   2e2fc:	bl	3f094 <__assert_fail@plt+0x2caa0>
   2e300:	mov	r0, #1
   2e304:	add	sp, sp, #8
   2e308:	pop	{r4, pc}
   2e30c:	andeq	r0, r0, r2, lsl #2
   2e310:	andeq	sp, r2, r8, ror #22
   2e314:	andeq	sp, r2, r0, ror #24
   2e318:	andeq	sp, r2, r4, lsr #25
   2e31c:	ldr	ip, [pc, #44]	; 2e350 <__assert_fail@plt+0x1bd5c>
   2e320:	tst	r1, #16
   2e324:	ldr	r3, [pc, #40]	; 2e354 <__assert_fail@plt+0x1bd60>
   2e328:	moveq	r3, ip
   2e32c:	tst	r1, #512	; 0x200
   2e330:	mov	ip, r2
   2e334:	bne	2e344 <__assert_fail@plt+0x1bd50>
   2e338:	mov	r1, r3
   2e33c:	mov	r0, r2
   2e340:	b	21430 <__assert_fail@plt+0xee3c>
   2e344:	mov	r2, r3
   2e348:	mov	r1, ip
   2e34c:	b	25218 <__assert_fail@plt+0x12c24>
   2e350:	andeq	r4, r8, r0, lsl #18
   2e354:	andeq	ip, r8, r0, lsl #18
   2e358:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e35c:	subs	sl, r3, #0
   2e360:	sub	sp, sp, #104	; 0x68
   2e364:	mov	r5, r0
   2e368:	mov	r6, r1
   2e36c:	mov	r4, r2
   2e370:	ldr	r9, [r0, #48]	; 0x30
   2e374:	beq	2e3c8 <__assert_fail@plt+0x1bdd4>
   2e378:	ldr	r1, [pc, #432]	; 2e530 <__assert_fail@plt+0x1bf3c>
   2e37c:	mov	r0, sl
   2e380:	bl	11f40 <strcmp@plt>
   2e384:	cmp	r0, #0
   2e388:	bne	2e3c8 <__assert_fail@plt+0x1bdd4>
   2e38c:	tst	r9, #4
   2e390:	bne	2e3d0 <__assert_fail@plt+0x1bddc>
   2e394:	cmp	r4, #0
   2e398:	bge	2e51c <__assert_fail@plt+0x1bf28>
   2e39c:	tst	r9, #512	; 0x200
   2e3a0:	bne	2e4bc <__assert_fail@plt+0x1bec8>
   2e3a4:	mov	r8, #1
   2e3a8:	mov	r1, r9
   2e3ac:	mov	r2, sl
   2e3b0:	ldr	r0, [r5, #32]
   2e3b4:	bl	2e31c <__assert_fail@plt+0x1bd28>
   2e3b8:	subs	r7, r0, #0
   2e3bc:	blt	2e514 <__assert_fail@plt+0x1bf20>
   2e3c0:	ldr	r9, [r5, #48]	; 0x30
   2e3c4:	b	2e404 <__assert_fail@plt+0x1be10>
   2e3c8:	ands	r8, r9, #4
   2e3cc:	beq	2e3f8 <__assert_fail@plt+0x1be04>
   2e3d0:	mvn	r3, r4
   2e3d4:	lsr	r3, r3, #31
   2e3d8:	ands	r9, r3, r9, lsr #9
   2e3dc:	beq	2e3ec <__assert_fail@plt+0x1bdf8>
   2e3e0:	mov	r0, r4
   2e3e4:	bl	125ac <close@plt>
   2e3e8:	mov	r9, #0
   2e3ec:	mov	r0, r9
   2e3f0:	add	sp, sp, #104	; 0x68
   2e3f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e3f8:	cmp	r4, #0
   2e3fc:	movge	r7, r4
   2e400:	blt	2e3a8 <__assert_fail@plt+0x1bdb4>
   2e404:	tst	r9, #2
   2e408:	bne	2e428 <__assert_fail@plt+0x1be34>
   2e40c:	cmp	sl, #0
   2e410:	beq	2e480 <__assert_fail@plt+0x1be8c>
   2e414:	mov	r0, sl
   2e418:	ldr	r1, [pc, #272]	; 2e530 <__assert_fail@plt+0x1bf3c>
   2e41c:	bl	11f40 <strcmp@plt>
   2e420:	cmp	r0, #0
   2e424:	bne	2e480 <__assert_fail@plt+0x1be8c>
   2e428:	mov	r2, sp
   2e42c:	mov	r1, r7
   2e430:	mov	r0, #3
   2e434:	bl	1215c <__fxstat64@plt>
   2e438:	cmp	r0, #0
   2e43c:	beq	2e498 <__assert_fail@plt+0x1bea4>
   2e440:	mvn	r9, #0
   2e444:	cmp	r4, #0
   2e448:	bge	2e3ec <__assert_fail@plt+0x1bdf8>
   2e44c:	bl	12348 <__errno_location@plt>
   2e450:	mov	r4, r0
   2e454:	mov	r0, r7
   2e458:	ldr	r5, [r4]
   2e45c:	bl	125ac <close@plt>
   2e460:	str	r5, [r4]
   2e464:	b	2e3ec <__assert_fail@plt+0x1bdf8>
   2e468:	ldrd	r0, [r6, #160]	; 0xa0
   2e46c:	ldrd	r2, [sp, #96]	; 0x60
   2e470:	cmp	r1, r3
   2e474:	cmpeq	r0, r2
   2e478:	bne	2e4ac <__assert_fail@plt+0x1beb8>
   2e47c:	ldr	r9, [r5, #48]	; 0x30
   2e480:	tst	r9, #512	; 0x200
   2e484:	bne	2e4f8 <__assert_fail@plt+0x1bf04>
   2e488:	mov	r0, r7
   2e48c:	bl	124f8 <fchdir@plt>
   2e490:	mov	r9, r0
   2e494:	b	2e444 <__assert_fail@plt+0x1be50>
   2e498:	ldrd	r0, [r6, #64]	; 0x40
   2e49c:	ldrd	r2, [sp]
   2e4a0:	cmp	r1, r3
   2e4a4:	cmpeq	r0, r2
   2e4a8:	beq	2e468 <__assert_fail@plt+0x1be74>
   2e4ac:	bl	12348 <__errno_location@plt>
   2e4b0:	mov	r3, #2
   2e4b4:	str	r3, [r0]
   2e4b8:	b	2e440 <__assert_fail@plt+0x1be4c>
   2e4bc:	add	r7, r5, #60	; 0x3c
   2e4c0:	mov	r0, r7
   2e4c4:	bl	3f30c <__assert_fail@plt+0x2cd18>
   2e4c8:	subs	r8, r0, #0
   2e4cc:	bne	2e3a8 <__assert_fail@plt+0x1bdb4>
   2e4d0:	mov	r0, r7
   2e4d4:	bl	3f358 <__assert_fail@plt+0x2cd64>
   2e4d8:	ldr	r9, [r5, #48]	; 0x30
   2e4dc:	subs	r7, r0, #0
   2e4e0:	blt	2e3a4 <__assert_fail@plt+0x1bdb0>
   2e4e4:	tst	r9, #2
   2e4e8:	mov	r4, r7
   2e4ec:	mov	r8, #1
   2e4f0:	beq	2e480 <__assert_fail@plt+0x1be8c>
   2e4f4:	b	2e428 <__assert_fail@plt+0x1be34>
   2e4f8:	eor	r2, r8, #1
   2e4fc:	mov	r1, r7
   2e500:	uxtb	r2, r2
   2e504:	mov	r0, r5
   2e508:	bl	2e000 <__assert_fail@plt+0x1ba0c>
   2e50c:	mov	r9, #0
   2e510:	b	2e3ec <__assert_fail@plt+0x1bdf8>
   2e514:	mvn	r9, #0
   2e518:	b	2e3ec <__assert_fail@plt+0x1bdf8>
   2e51c:	tst	r9, #2
   2e520:	mov	r7, r4
   2e524:	mov	r8, #1
   2e528:	beq	2e414 <__assert_fail@plt+0x1be20>
   2e52c:	b	2e428 <__assert_fail@plt+0x1be34>
   2e530:	andeq	r5, r4, r8, lsl lr
   2e534:	ldr	r3, [pc, #164]	; 2e5e0 <__assert_fail@plt+0x1bfec>
   2e538:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e53c:	and	r3, r3, r0
   2e540:	cmp	r3, #0
   2e544:	mov	sl, r1
   2e548:	mov	r8, r2
   2e54c:	beq	2e5b4 <__assert_fail@plt+0x1bfc0>
   2e550:	mov	r0, #24
   2e554:	bl	2fe38 <__assert_fail@plt+0x1d844>
   2e558:	subs	r9, r0, #0
   2e55c:	beq	2e5d8 <__assert_fail@plt+0x1bfe4>
   2e560:	ldrd	r4, [r8, #160]	; 0xa0
   2e564:	ldrd	r6, [r8, #64]	; 0x40
   2e568:	str	r8, [r9, #16]
   2e56c:	strd	r4, [r9, #8]
   2e570:	ldr	r0, [sl]
   2e574:	strd	r6, [r9]
   2e578:	mov	r1, r9
   2e57c:	bl	224b4 <__assert_fail@plt+0xfec0>
   2e580:	cmp	r9, r0
   2e584:	mov	r4, r0
   2e588:	beq	2e5ac <__assert_fail@plt+0x1bfb8>
   2e58c:	mov	r0, r9
   2e590:	bl	2db68 <__assert_fail@plt+0x1b574>
   2e594:	cmp	r4, #0
   2e598:	beq	2e5d8 <__assert_fail@plt+0x1bfe4>
   2e59c:	ldr	r2, [r4, #16]
   2e5a0:	mov	r3, #2
   2e5a4:	str	r2, [r8]
   2e5a8:	strh	r3, [r8, #56]	; 0x38
   2e5ac:	mov	r0, #1
   2e5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e5b4:	ldr	r0, [r1]
   2e5b8:	add	r1, r2, #64	; 0x40
   2e5bc:	bl	3f0b8 <__assert_fail@plt+0x2cac4>
   2e5c0:	cmp	r0, #0
   2e5c4:	beq	2e5ac <__assert_fail@plt+0x1bfb8>
   2e5c8:	mov	r3, #2
   2e5cc:	str	r8, [r8]
   2e5d0:	strh	r3, [r8, #56]	; 0x38
   2e5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e5d8:	mov	r0, #0
   2e5dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e5e0:	andeq	r0, r0, r2, lsl #2
   2e5e4:	ldr	r3, [pc, #172]	; 2e698 <__assert_fail@plt+0x1c0a4>
   2e5e8:	push	{r4, r5, lr}
   2e5ec:	and	r3, r3, r0
   2e5f0:	cmp	r3, #0
   2e5f4:	sub	sp, sp, #28
   2e5f8:	bne	2e640 <__assert_fail@plt+0x1c04c>
   2e5fc:	ldr	r3, [r2, #4]
   2e600:	cmp	r3, #0
   2e604:	beq	2e638 <__assert_fail@plt+0x1c044>
   2e608:	ldr	r0, [r3, #48]	; 0x30
   2e60c:	cmp	r0, #0
   2e610:	blt	2e638 <__assert_fail@plt+0x1c044>
   2e614:	ldr	ip, [r1]
   2e618:	ldrd	r0, [ip, #16]
   2e61c:	orrs	r1, r0, r1
   2e620:	beq	2e694 <__assert_fail@plt+0x1c0a0>
   2e624:	ldrd	r4, [ip]
   2e628:	ldrd	r0, [r2, #160]	; 0xa0
   2e62c:	cmp	r5, r1
   2e630:	cmpeq	r4, r0
   2e634:	beq	2e670 <__assert_fail@plt+0x1c07c>
   2e638:	add	sp, sp, #28
   2e63c:	pop	{r4, r5, pc}
   2e640:	ldrd	r4, [r2, #64]	; 0x40
   2e644:	ldrd	r2, [r2, #160]	; 0xa0
   2e648:	ldr	r0, [r1]
   2e64c:	mov	r1, sp
   2e650:	strd	r4, [sp]
   2e654:	strd	r2, [sp, #8]
   2e658:	bl	224ec <__assert_fail@plt+0xfef8>
   2e65c:	cmp	r0, #0
   2e660:	beq	2e694 <__assert_fail@plt+0x1c0a0>
   2e664:	bl	2db68 <__assert_fail@plt+0x1b574>
   2e668:	add	sp, sp, #28
   2e66c:	pop	{r4, r5, pc}
   2e670:	ldrd	r0, [ip, #8]
   2e674:	ldrd	r4, [r2, #64]	; 0x40
   2e678:	cmp	r1, r5
   2e67c:	cmpeq	r0, r4
   2e680:	ldrdeq	r0, [r3, #64]	; 0x40
   2e684:	ldrdeq	r2, [r3, #160]	; 0xa0
   2e688:	strdeq	r0, [ip, #8]
   2e68c:	strdeq	r2, [ip]
   2e690:	b	2e638 <__assert_fail@plt+0x1c044>
   2e694:	bl	125a0 <abort@plt>
   2e698:	andeq	r0, r0, r2, lsl #2
   2e69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e6a0:	sub	sp, sp, #68	; 0x44
   2e6a4:	ldr	sl, [r0]
   2e6a8:	mov	r5, r0
   2e6ac:	str	r1, [sp, #40]	; 0x28
   2e6b0:	ldr	r3, [sl, #12]
   2e6b4:	cmp	r3, #0
   2e6b8:	str	r3, [sp, #44]	; 0x2c
   2e6bc:	beq	2ea80 <__assert_fail@plt+0x1c48c>
   2e6c0:	mov	r0, r3
   2e6c4:	bl	124ec <dirfd@plt>
   2e6c8:	cmp	r0, #0
   2e6cc:	str	r0, [sp, #60]	; 0x3c
   2e6d0:	blt	2ee5c <__assert_fail@plt+0x1c868>
   2e6d4:	ldr	r3, [r5, #44]	; 0x2c
   2e6d8:	cmp	r3, #0
   2e6dc:	beq	2eff8 <__assert_fail@plt+0x1ca04>
   2e6e0:	mvn	r3, #0
   2e6e4:	str	r3, [sp, #20]
   2e6e8:	ldr	r0, [r5, #48]	; 0x30
   2e6ec:	mov	r3, #1
   2e6f0:	str	r3, [sp, #52]	; 0x34
   2e6f4:	ldr	r3, [sl, #40]	; 0x28
   2e6f8:	ldr	r2, [sl, #28]
   2e6fc:	mov	r1, r3
   2e700:	sub	r3, r3, #1
   2e704:	str	sl, [sp, #12]
   2e708:	ldrb	r2, [r2, r3]
   2e70c:	cmp	r2, #47	; 0x2f
   2e710:	moveq	r1, r3
   2e714:	ands	r0, r0, #4
   2e718:	mov	r2, r1
   2e71c:	ldrne	r3, [r5, #24]
   2e720:	movne	r0, r2
   2e724:	str	r1, [sp, #32]
   2e728:	addne	r2, r3, r2
   2e72c:	movne	r1, #47	; 0x2f
   2e730:	strbne	r1, [r3, r0]
   2e734:	addne	r3, r2, #1
   2e738:	ldr	r2, [sp, #32]
   2e73c:	strne	r3, [sp, #28]
   2e740:	add	r2, r2, #1
   2e744:	ldr	r3, [sl, #48]	; 0x30
   2e748:	ldr	fp, [r5, #36]	; 0x24
   2e74c:	mov	r1, r2
   2e750:	str	r2, [sp, #8]
   2e754:	sub	r1, fp, r1
   2e758:	mov	r2, #0
   2e75c:	add	r3, r3, #1
   2e760:	streq	r0, [sp, #28]
   2e764:	str	r2, [sp, #48]	; 0x30
   2e768:	str	r1, [sp, #16]
   2e76c:	str	r3, [sp, #24]
   2e770:	str	r2, [sp, #36]	; 0x24
   2e774:	mov	r7, r2
   2e778:	str	r2, [sp, #4]
   2e77c:	mov	r8, r2
   2e780:	mov	sl, r2
   2e784:	b	2e804 <__assert_fail@plt+0x1c210>
   2e788:	tst	r3, #251	; 0xfb
   2e78c:	beq	2e8d8 <__assert_fail@plt+0x1c2e4>
   2e790:	lsr	r2, r2, #4
   2e794:	cmp	r3, #10
   2e798:	orrne	r2, r2, #1
   2e79c:	tst	r2, #1
   2e7a0:	beq	2eba8 <__assert_fail@plt+0x1c5b4>
   2e7a4:	sub	r3, r3, #1
   2e7a8:	mov	r2, #11
   2e7ac:	cmp	r3, #11
   2e7b0:	strh	r2, [r4, #56]	; 0x38
   2e7b4:	bhi	2efe8 <__assert_fail@plt+0x1c9f4>
   2e7b8:	ldr	r2, [pc, #2128]	; 2f010 <__assert_fail@plt+0x1ca1c>
   2e7bc:	ldr	r1, [r2, r3, lsl #2]
   2e7c0:	mov	r2, #1
   2e7c4:	mov	r3, #0
   2e7c8:	str	r1, [r4, #80]	; 0x50
   2e7cc:	strd	r2, [r4, #112]	; 0x70
   2e7d0:	ldr	r3, [sp, #4]
   2e7d4:	str	r8, [r4, #8]
   2e7d8:	cmp	r3, #0
   2e7dc:	ldr	r3, [pc, #2096]	; 2f014 <__assert_fail@plt+0x1ca20>
   2e7e0:	strne	r4, [sl, #8]
   2e7e4:	streq	r4, [sp, #4]
   2e7e8:	cmp	r7, r3
   2e7ec:	beq	2e9f0 <__assert_fail@plt+0x1c3fc>
   2e7f0:	ldr	r3, [sp, #20]
   2e7f4:	add	r7, r7, #1
   2e7f8:	cmp	r7, r3
   2e7fc:	bcs	2ee24 <__assert_fail@plt+0x1c830>
   2e800:	mov	sl, r4
   2e804:	ldr	r3, [sp, #12]
   2e808:	ldr	r4, [r3, #12]
   2e80c:	cmp	r4, #0
   2e810:	beq	2ec78 <__assert_fail@plt+0x1c684>
   2e814:	bl	12348 <__errno_location@plt>
   2e818:	mov	r9, r0
   2e81c:	mov	r0, r4
   2e820:	str	r8, [r9]
   2e824:	bl	124bc <readdir64@plt>
   2e828:	subs	fp, r0, #0
   2e82c:	beq	2ed50 <__assert_fail@plt+0x1c75c>
   2e830:	ldr	r2, [r5, #48]	; 0x30
   2e834:	tst	r2, #32
   2e838:	bne	2e848 <__assert_fail@plt+0x1c254>
   2e83c:	ldrb	r2, [fp, #19]
   2e840:	cmp	r2, #46	; 0x2e
   2e844:	beq	2ea58 <__assert_fail@plt+0x1c464>
   2e848:	add	r4, fp, #19
   2e84c:	mov	r0, r4
   2e850:	bl	12300 <strlen@plt>
   2e854:	mov	r1, r4
   2e858:	mov	r2, r0
   2e85c:	mov	r6, r0
   2e860:	mov	r0, r5
   2e864:	bl	2de10 <__assert_fail@plt+0x1b81c>
   2e868:	subs	r4, r0, #0
   2e86c:	beq	2ec28 <__assert_fail@plt+0x1c634>
   2e870:	ldr	r3, [sp, #16]
   2e874:	cmp	r3, r6
   2e878:	bls	2e910 <__assert_fail@plt+0x1c31c>
   2e87c:	ldr	r3, [sp, #8]
   2e880:	adds	r6, r3, r6
   2e884:	bcs	2e97c <__assert_fail@plt+0x1c388>
   2e888:	ldrd	r0, [fp]
   2e88c:	ldr	r2, [r5, #48]	; 0x30
   2e890:	ldr	ip, [r5]
   2e894:	tst	r2, #4
   2e898:	ldr	r3, [sp, #24]
   2e89c:	strd	r0, [r4, #160]	; 0xa0
   2e8a0:	addeq	r1, r4, #168	; 0xa8
   2e8a4:	str	r3, [r4, #48]	; 0x30
   2e8a8:	str	ip, [r4, #4]
   2e8ac:	str	r6, [r4, #40]	; 0x28
   2e8b0:	streq	r1, [r4, #24]
   2e8b4:	bne	2e9cc <__assert_fail@plt+0x1c3d8>
   2e8b8:	ldr	r1, [r5, #44]	; 0x2c
   2e8bc:	cmp	r1, #0
   2e8c0:	beq	2e8cc <__assert_fail@plt+0x1c2d8>
   2e8c4:	tst	r2, #1024	; 0x400
   2e8c8:	beq	2ea3c <__assert_fail@plt+0x1c448>
   2e8cc:	tst	r2, #8
   2e8d0:	ldrb	r3, [fp, #18]
   2e8d4:	bne	2e788 <__assert_fail@plt+0x1c194>
   2e8d8:	sub	r3, r3, #1
   2e8dc:	cmp	r3, #11
   2e8e0:	mov	r2, #11
   2e8e4:	strh	r2, [r4, #56]	; 0x38
   2e8e8:	strhi	r8, [r4, #80]	; 0x50
   2e8ec:	movhi	r2, #2
   2e8f0:	movhi	r3, #0
   2e8f4:	bhi	2e7cc <__assert_fail@plt+0x1c1d8>
   2e8f8:	ldr	r2, [pc, #1808]	; 2f010 <__assert_fail@plt+0x1ca1c>
   2e8fc:	ldr	r1, [r2, r3, lsl #2]
   2e900:	mov	r2, #2
   2e904:	mov	r3, #0
   2e908:	str	r1, [r4, #80]	; 0x50
   2e90c:	b	2e7cc <__assert_fail@plt+0x1c1d8>
   2e910:	ldr	r3, [sp, #32]
   2e914:	add	r1, r5, #36	; 0x24
   2e918:	add	r2, r3, #2
   2e91c:	ldr	r3, [r5, #24]
   2e920:	add	r2, r2, r6
   2e924:	add	r0, r5, #24
   2e928:	str	r3, [sp, #16]
   2e92c:	bl	2e0d0 <__assert_fail@plt+0x1badc>
   2e930:	cmp	r0, #0
   2e934:	beq	2ec28 <__assert_fail@plt+0x1c634>
   2e938:	ldr	r2, [r5, #24]
   2e93c:	ldr	r3, [sp, #16]
   2e940:	cmp	r3, r2
   2e944:	beq	2ea78 <__assert_fail@plt+0x1c484>
   2e948:	ldr	r1, [r5, #48]	; 0x30
   2e94c:	tst	r1, #4
   2e950:	ldrne	r3, [sp, #8]
   2e954:	addne	r3, r2, r3
   2e958:	strne	r3, [sp, #28]
   2e95c:	ldr	r3, [r5, #36]	; 0x24
   2e960:	ldr	r2, [sp, #8]
   2e964:	str	r0, [sp, #36]	; 0x24
   2e968:	sub	r3, r3, r2
   2e96c:	str	r3, [sp, #16]
   2e970:	ldr	r3, [sp, #8]
   2e974:	adds	r6, r3, r6
   2e978:	bcc	2e888 <__assert_fail@plt+0x1c294>
   2e97c:	ldr	sl, [sp, #12]
   2e980:	mov	r0, r4
   2e984:	bl	2db68 <__assert_fail@plt+0x1b574>
   2e988:	ldr	r0, [sp, #4]
   2e98c:	bl	2de84 <__assert_fail@plt+0x1b890>
   2e990:	ldr	r0, [sl, #12]
   2e994:	bl	125c4 <closedir@plt>
   2e998:	ldr	r3, [r5, #48]	; 0x30
   2e99c:	mov	r2, #0
   2e9a0:	orr	r3, r3, #8192	; 0x2000
   2e9a4:	mov	r0, #7
   2e9a8:	mov	r1, #36	; 0x24
   2e9ac:	str	r2, [sp, #4]
   2e9b0:	strh	r0, [sl, #56]	; 0x38
   2e9b4:	str	r2, [sl, #12]
   2e9b8:	ldr	r0, [sp, #4]
   2e9bc:	str	r3, [r5, #48]	; 0x30
   2e9c0:	str	r1, [r9]
   2e9c4:	add	sp, sp, #68	; 0x44
   2e9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e9cc:	ldr	r1, [r4, #28]
   2e9d0:	ldr	r2, [r4, #52]	; 0x34
   2e9d4:	str	r1, [r4, #24]
   2e9d8:	add	r2, r2, #1
   2e9dc:	add	r1, r4, #168	; 0xa8
   2e9e0:	ldr	r0, [sp, #28]
   2e9e4:	bl	11fb8 <memmove@plt>
   2e9e8:	ldr	r2, [r5, #48]	; 0x30
   2e9ec:	b	2e8b8 <__assert_fail@plt+0x1c2c4>
   2e9f0:	ldr	r3, [r5, #44]	; 0x2c
   2e9f4:	cmp	r3, #0
   2e9f8:	bne	2e7f0 <__assert_fail@plt+0x1c1fc>
   2e9fc:	ldr	r1, [sp, #60]	; 0x3c
   2ea00:	ldr	r0, [sp, #12]
   2ea04:	bl	2def0 <__assert_fail@plt+0x1b8fc>
   2ea08:	ldr	r3, [pc, #1544]	; 2f018 <__assert_fail@plt+0x1ca24>
   2ea0c:	cmp	r0, r3
   2ea10:	beq	2ea34 <__assert_fail@plt+0x1c440>
   2ea14:	ldr	r3, [pc, #1536]	; 2f01c <__assert_fail@plt+0x1ca28>
   2ea18:	cmp	r0, r3
   2ea1c:	beq	2ea34 <__assert_fail@plt+0x1c440>
   2ea20:	ldr	r3, [pc, #1528]	; 2f020 <__assert_fail@plt+0x1ca2c>
   2ea24:	cmp	r0, r3
   2ea28:	movne	r3, #1
   2ea2c:	strne	r3, [sp, #48]	; 0x30
   2ea30:	bne	2e7f0 <__assert_fail@plt+0x1c1fc>
   2ea34:	str	r8, [sp, #48]	; 0x30
   2ea38:	b	2e7f0 <__assert_fail@plt+0x1c1fc>
   2ea3c:	mov	r1, r2
   2ea40:	mov	r3, r8
   2ea44:	mov	r2, r4
   2ea48:	ldr	r0, [r5, #32]
   2ea4c:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2ea50:	strh	r0, [r4, #56]	; 0x38
   2ea54:	b	2e7d0 <__assert_fail@plt+0x1c1dc>
   2ea58:	ldrb	r2, [fp, #20]
   2ea5c:	cmp	r2, #0
   2ea60:	beq	2ea70 <__assert_fail@plt+0x1c47c>
   2ea64:	ldrh	r2, [fp, #20]
   2ea68:	cmp	r2, #46	; 0x2e
   2ea6c:	bne	2e848 <__assert_fail@plt+0x1c254>
   2ea70:	mov	r4, sl
   2ea74:	b	2e800 <__assert_fail@plt+0x1c20c>
   2ea78:	ldr	r0, [sp, #36]	; 0x24
   2ea7c:	b	2e95c <__assert_fail@plt+0x1c368>
   2ea80:	ldr	r3, [r0, #48]	; 0x30
   2ea84:	ldr	r1, [sl, #24]
   2ea88:	and	r2, r3, #516	; 0x204
   2ea8c:	cmp	r2, #512	; 0x200
   2ea90:	mvnne	r0, #99	; 0x63
   2ea94:	ldreq	r0, [r0, #32]
   2ea98:	ands	r2, r3, #16
   2ea9c:	bne	2ebb8 <__assert_fail@plt+0x1c5c4>
   2eaa0:	add	r3, sp, #60	; 0x3c
   2eaa4:	bl	3f6bc <__assert_fail@plt+0x2d0c8>
   2eaa8:	cmp	r0, #0
   2eaac:	mov	r4, r0
   2eab0:	str	r0, [sl, #12]
   2eab4:	beq	2ef10 <__assert_fail@plt+0x1c91c>
   2eab8:	ldrh	r3, [sl, #56]	; 0x38
   2eabc:	cmp	r3, #11
   2eac0:	beq	2ef38 <__assert_fail@plt+0x1c944>
   2eac4:	ldr	r0, [r5, #48]	; 0x30
   2eac8:	tst	r0, #256	; 0x100
   2eacc:	bne	2ebd8 <__assert_fail@plt+0x1c5e4>
   2ead0:	ldr	r2, [r5, #44]	; 0x2c
   2ead4:	ldr	r3, [pc, #1352]	; 2f024 <__assert_fail@plt+0x1ca30>
   2ead8:	cmp	r2, #0
   2eadc:	mvnne	r3, #0
   2eae0:	str	r3, [sp, #20]
   2eae4:	ldr	r3, [sp, #40]	; 0x28
   2eae8:	cmp	r3, #2
   2eaec:	beq	2eecc <__assert_fail@plt+0x1c8d8>
   2eaf0:	ldr	r3, [r5, #48]	; 0x30
   2eaf4:	and	r3, r3, #56	; 0x38
   2eaf8:	cmp	r3, #24
   2eafc:	beq	2ef54 <__assert_fail@plt+0x1c960>
   2eb00:	ldr	r3, [sp, #40]	; 0x28
   2eb04:	mov	r4, #1
   2eb08:	sub	r6, r3, #3
   2eb0c:	clz	r6, r6
   2eb10:	lsr	r6, r6, #5
   2eb14:	ldr	r3, [r5, #48]	; 0x30
   2eb18:	tst	r3, #512	; 0x200
   2eb1c:	bne	2eef4 <__assert_fail@plt+0x1c900>
   2eb20:	ldr	r2, [sp, #60]	; 0x3c
   2eb24:	cmp	r2, #0
   2eb28:	blt	2eb44 <__assert_fail@plt+0x1c550>
   2eb2c:	mov	r3, #0
   2eb30:	mov	r1, sl
   2eb34:	mov	r0, r5
   2eb38:	bl	2e358 <__assert_fail@plt+0x1bd64>
   2eb3c:	cmp	r0, #0
   2eb40:	beq	2e6e8 <__assert_fail@plt+0x1c0f4>
   2eb44:	tst	r4, r6
   2eb48:	beq	2eb58 <__assert_fail@plt+0x1c564>
   2eb4c:	bl	12348 <__errno_location@plt>
   2eb50:	ldr	r3, [r0]
   2eb54:	str	r3, [sl, #32]
   2eb58:	ldrh	r3, [sl, #58]	; 0x3a
   2eb5c:	ldr	r0, [sl, #12]
   2eb60:	orr	r3, r3, #1
   2eb64:	strh	r3, [sl, #58]	; 0x3a
   2eb68:	bl	125c4 <closedir@plt>
   2eb6c:	ldr	r0, [r5, #48]	; 0x30
   2eb70:	mov	r3, #0
   2eb74:	tst	r0, #512	; 0x200
   2eb78:	str	r3, [sl, #12]
   2eb7c:	beq	2eb98 <__assert_fail@plt+0x1c5a4>
   2eb80:	ldr	r3, [sp, #60]	; 0x3c
   2eb84:	cmp	r3, #0
   2eb88:	blt	2eb98 <__assert_fail@plt+0x1c5a4>
   2eb8c:	mov	r0, r3
   2eb90:	bl	125ac <close@plt>
   2eb94:	ldr	r0, [r5, #48]	; 0x30
   2eb98:	mov	r3, #0
   2eb9c:	str	r3, [sl, #12]
   2eba0:	str	r3, [sp, #52]	; 0x34
   2eba4:	b	2e6f4 <__assert_fail@plt+0x1c100>
   2eba8:	mov	r3, #11
   2ebac:	strh	r3, [r4, #56]	; 0x38
   2ebb0:	mov	r3, #9
   2ebb4:	b	2e8f8 <__assert_fail@plt+0x1c304>
   2ebb8:	tst	r3, #1
   2ebbc:	moveq	r2, #32768	; 0x8000
   2ebc0:	beq	2eaa0 <__assert_fail@plt+0x1c4ac>
   2ebc4:	ldr	r2, [sl, #48]	; 0x30
   2ebc8:	cmp	r2, #0
   2ebcc:	movne	r2, #32768	; 0x8000
   2ebd0:	moveq	r2, #0
   2ebd4:	b	2eaa0 <__assert_fail@plt+0x1c4ac>
   2ebd8:	add	r4, r5, #56	; 0x38
   2ebdc:	mov	r1, r4
   2ebe0:	mov	r2, sl
   2ebe4:	bl	2e5e4 <__assert_fail@plt+0x1bff0>
   2ebe8:	mov	r3, #0
   2ebec:	mov	r2, sl
   2ebf0:	ldr	r1, [r5, #48]	; 0x30
   2ebf4:	ldr	r0, [r5, #32]
   2ebf8:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2ebfc:	mov	r1, r4
   2ec00:	mov	r2, sl
   2ec04:	ldr	r0, [r5, #48]	; 0x30
   2ec08:	bl	2e534 <__assert_fail@plt+0x1bf40>
   2ec0c:	subs	r4, r0, #0
   2ec10:	bne	2ead0 <__assert_fail@plt+0x1c4dc>
   2ec14:	bl	12348 <__errno_location@plt>
   2ec18:	mov	r3, #12
   2ec1c:	str	r4, [sp, #4]
   2ec20:	str	r3, [r0]
   2ec24:	b	2ec6c <__assert_fail@plt+0x1c678>
   2ec28:	ldr	sl, [sp, #12]
   2ec2c:	mov	r0, r4
   2ec30:	ldr	r4, [r9]
   2ec34:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ec38:	ldr	r0, [sp, #4]
   2ec3c:	bl	2de84 <__assert_fail@plt+0x1b890>
   2ec40:	ldr	r0, [sl, #12]
   2ec44:	bl	125c4 <closedir@plt>
   2ec48:	ldr	r3, [r5, #48]	; 0x30
   2ec4c:	mov	r2, #0
   2ec50:	orr	r3, r3, #8192	; 0x2000
   2ec54:	mov	r1, #7
   2ec58:	str	r2, [sl, #12]
   2ec5c:	strh	r1, [sl, #56]	; 0x38
   2ec60:	str	r2, [sp, #4]
   2ec64:	str	r3, [r5, #48]	; 0x30
   2ec68:	str	r4, [r9]
   2ec6c:	ldr	r0, [sp, #4]
   2ec70:	add	sp, sp, #68	; 0x44
   2ec74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec78:	mov	sl, r3
   2ec7c:	ldr	r3, [sp, #36]	; 0x24
   2ec80:	cmp	r3, #0
   2ec84:	bne	2eda0 <__assert_fail@plt+0x1c7ac>
   2ec88:	ldr	r3, [r5, #48]	; 0x30
   2ec8c:	tst	r3, #4
   2ec90:	beq	2ecbc <__assert_fail@plt+0x1c6c8>
   2ec94:	ldr	r3, [r5, #36]	; 0x24
   2ec98:	ldr	r2, [sp, #8]
   2ec9c:	cmp	r7, #0
   2eca0:	cmpne	r3, r2
   2eca4:	ldreq	r3, [sp, #28]
   2eca8:	subeq	r3, r3, #1
   2ecac:	streq	r3, [sp, #28]
   2ecb0:	ldr	r2, [sp, #28]
   2ecb4:	mov	r3, #0
   2ecb8:	strb	r3, [r2]
   2ecbc:	ldr	r3, [sp, #52]	; 0x34
   2ecc0:	ldr	r2, [sp, #44]	; 0x2c
   2ecc4:	cmp	r2, #0
   2ecc8:	movne	r3, #0
   2eccc:	andeq	r3, r3, #1
   2ecd0:	cmp	r3, #0
   2ecd4:	beq	2ed0c <__assert_fail@plt+0x1c718>
   2ecd8:	ldr	r3, [sp, #40]	; 0x28
   2ecdc:	cmp	r7, #0
   2ece0:	cmpne	r3, #1
   2ece4:	bne	2ed14 <__assert_fail@plt+0x1c720>
   2ece8:	ldr	r3, [sl, #48]	; 0x30
   2ecec:	cmp	r3, #0
   2ecf0:	bne	2ee8c <__assert_fail@plt+0x1c898>
   2ecf4:	mov	r0, r5
   2ecf8:	bl	2e080 <__assert_fail@plt+0x1ba8c>
   2ecfc:	adds	r0, r0, #0
   2ed00:	movne	r0, #1
   2ed04:	cmp	r0, #0
   2ed08:	bne	2efac <__assert_fail@plt+0x1c9b8>
   2ed0c:	cmp	r7, #0
   2ed10:	beq	2eeac <__assert_fail@plt+0x1c8b8>
   2ed14:	ldr	r3, [sp, #48]	; 0x30
   2ed18:	cmp	r3, #0
   2ed1c:	bne	2ee2c <__assert_fail@plt+0x1c838>
   2ed20:	ldr	r3, [r5, #44]	; 0x2c
   2ed24:	cmp	r3, #0
   2ed28:	cmpne	r7, #1
   2ed2c:	bls	2ec6c <__assert_fail@plt+0x1c678>
   2ed30:	mov	r2, r7
   2ed34:	ldr	r1, [sp, #4]
   2ed38:	mov	r0, r5
   2ed3c:	bl	2dd30 <__assert_fail@plt+0x1b73c>
   2ed40:	str	r0, [sp, #4]
   2ed44:	ldr	r0, [sp, #4]
   2ed48:	add	sp, sp, #68	; 0x44
   2ed4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed50:	ldr	r3, [r9]
   2ed54:	ldr	sl, [sp, #12]
   2ed58:	cmp	r3, #0
   2ed5c:	beq	2ed7c <__assert_fail@plt+0x1c788>
   2ed60:	ldr	r2, [sp, #44]	; 0x2c
   2ed64:	str	r3, [sl, #32]
   2ed68:	cmp	r7, #0
   2ed6c:	cmpeq	r2, #0
   2ed70:	moveq	r2, #4
   2ed74:	movne	r2, #7
   2ed78:	strh	r2, [sl, #56]	; 0x38
   2ed7c:	ldr	r0, [sl, #12]
   2ed80:	cmp	r0, #0
   2ed84:	beq	2ec7c <__assert_fail@plt+0x1c688>
   2ed88:	bl	125c4 <closedir@plt>
   2ed8c:	mov	r3, #0
   2ed90:	str	r3, [sl, #12]
   2ed94:	ldr	r3, [sp, #36]	; 0x24
   2ed98:	cmp	r3, #0
   2ed9c:	beq	2ec88 <__assert_fail@plt+0x1c694>
   2eda0:	ldr	r1, [r5, #4]
   2eda4:	ldr	r0, [r5, #24]
   2eda8:	cmp	r1, #0
   2edac:	beq	2eddc <__assert_fail@plt+0x1c7e8>
   2edb0:	ldr	r3, [r1, #24]
   2edb4:	add	r2, r1, #168	; 0xa8
   2edb8:	cmp	r3, r2
   2edbc:	ldrne	r2, [r1, #28]
   2edc0:	str	r0, [r1, #28]
   2edc4:	subne	r3, r3, r2
   2edc8:	addne	r3, r0, r3
   2edcc:	strne	r3, [r1, #24]
   2edd0:	ldr	r1, [r1, #8]
   2edd4:	cmp	r1, #0
   2edd8:	bne	2edb0 <__assert_fail@plt+0x1c7bc>
   2eddc:	ldr	r3, [sp, #4]
   2ede0:	b	2ee10 <__assert_fail@plt+0x1c81c>
   2ede4:	ldr	r2, [r3, #24]
   2ede8:	cmp	r2, r1
   2edec:	ldrne	r1, [r3, #28]
   2edf0:	str	r0, [r3, #28]
   2edf4:	subne	r2, r2, r1
   2edf8:	addne	r2, r0, r2
   2edfc:	strne	r2, [r3, #24]
   2ee00:	ldr	r2, [r3, #8]
   2ee04:	cmp	r2, #0
   2ee08:	ldreq	r2, [r3, #4]
   2ee0c:	mov	r3, r2
   2ee10:	ldr	r2, [r3, #48]	; 0x30
   2ee14:	add	r1, r3, #168	; 0xa8
   2ee18:	cmp	r2, #0
   2ee1c:	bge	2ede4 <__assert_fail@plt+0x1c7f0>
   2ee20:	b	2ec88 <__assert_fail@plt+0x1c694>
   2ee24:	ldr	sl, [sp, #12]
   2ee28:	b	2ec7c <__assert_fail@plt+0x1c688>
   2ee2c:	ldr	r3, [pc, #500]	; 2f028 <__assert_fail@plt+0x1ca34>
   2ee30:	mov	r2, r7
   2ee34:	str	r3, [r5, #44]	; 0x2c
   2ee38:	ldr	r1, [sp, #4]
   2ee3c:	mov	r0, r5
   2ee40:	bl	2dd30 <__assert_fail@plt+0x1b73c>
   2ee44:	mov	r3, #0
   2ee48:	str	r3, [r5, #44]	; 0x2c
   2ee4c:	str	r0, [sp, #4]
   2ee50:	ldr	r0, [sp, #4]
   2ee54:	add	sp, sp, #68	; 0x44
   2ee58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee5c:	ldr	r0, [sl, #12]
   2ee60:	bl	125c4 <closedir@plt>
   2ee64:	ldr	r3, [sp, #40]	; 0x28
   2ee68:	mov	r4, #0
   2ee6c:	cmp	r3, #3
   2ee70:	str	r4, [sl, #12]
   2ee74:	beq	2ef1c <__assert_fail@plt+0x1c928>
   2ee78:	mov	r3, #0
   2ee7c:	str	r3, [sp, #4]
   2ee80:	ldr	r0, [sp, #4]
   2ee84:	add	sp, sp, #68	; 0x44
   2ee88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ee8c:	ldr	r3, [pc, #408]	; 2f02c <__assert_fail@plt+0x1ca38>
   2ee90:	mvn	r2, #0
   2ee94:	ldr	r1, [sl, #4]
   2ee98:	mov	r0, r5
   2ee9c:	bl	2e358 <__assert_fail@plt+0x1bd64>
   2eea0:	adds	r0, r0, #0
   2eea4:	movne	r0, #1
   2eea8:	b	2ed04 <__assert_fail@plt+0x1c710>
   2eeac:	ldr	r3, [sp, #40]	; 0x28
   2eeb0:	cmp	r3, #3
   2eeb4:	beq	2eedc <__assert_fail@plt+0x1c8e8>
   2eeb8:	ldr	r0, [sp, #4]
   2eebc:	bl	2de84 <__assert_fail@plt+0x1b890>
   2eec0:	mov	r3, #0
   2eec4:	str	r3, [sp, #4]
   2eec8:	b	2ec6c <__assert_fail@plt+0x1c678>
   2eecc:	mov	r3, #0
   2eed0:	str	r3, [sp, #52]	; 0x34
   2eed4:	ldr	r0, [r5, #48]	; 0x30
   2eed8:	b	2e6f4 <__assert_fail@plt+0x1c100>
   2eedc:	ldrh	r3, [sl, #56]	; 0x38
   2eee0:	cmp	r3, #4
   2eee4:	cmpne	r3, #7
   2eee8:	movne	r3, #6
   2eeec:	strhne	r3, [sl, #56]	; 0x38
   2eef0:	b	2eeb8 <__assert_fail@plt+0x1c8c4>
   2eef4:	mov	r2, #3
   2eef8:	ldr	r1, [pc, #304]	; 2f030 <__assert_fail@plt+0x1ca3c>
   2eefc:	ldr	r0, [sp, #60]	; 0x3c
   2ef00:	bl	2d934 <__assert_fail@plt+0x1b340>
   2ef04:	mov	r2, r0
   2ef08:	str	r0, [sp, #60]	; 0x3c
   2ef0c:	b	2eb24 <__assert_fail@plt+0x1c530>
   2ef10:	ldr	r3, [sp, #40]	; 0x28
   2ef14:	cmp	r3, #3
   2ef18:	bne	2ee78 <__assert_fail@plt+0x1c884>
   2ef1c:	mov	r3, #4
   2ef20:	strh	r3, [sl, #56]	; 0x38
   2ef24:	bl	12348 <__errno_location@plt>
   2ef28:	str	r4, [sp, #4]
   2ef2c:	ldr	r3, [r0]
   2ef30:	str	r3, [sl, #32]
   2ef34:	b	2ec6c <__assert_fail@plt+0x1c678>
   2ef38:	mov	r3, #0
   2ef3c:	mov	r2, sl
   2ef40:	ldr	r1, [r5, #48]	; 0x30
   2ef44:	ldr	r0, [r5, #32]
   2ef48:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2ef4c:	strh	r0, [sl, #56]	; 0x38
   2ef50:	b	2ead0 <__assert_fail@plt+0x1c4dc>
   2ef54:	ldr	r3, [sl, #84]	; 0x54
   2ef58:	cmp	r3, #2
   2ef5c:	bne	2eb00 <__assert_fail@plt+0x1c50c>
   2ef60:	ldr	r1, [sp, #60]	; 0x3c
   2ef64:	mov	r0, sl
   2ef68:	bl	2def0 <__assert_fail@plt+0x1b8fc>
   2ef6c:	ldr	r3, [pc, #164]	; 2f018 <__assert_fail@plt+0x1ca24>
   2ef70:	cmp	r0, r3
   2ef74:	beq	2eb00 <__assert_fail@plt+0x1c50c>
   2ef78:	bgt	2efcc <__assert_fail@plt+0x1c9d8>
   2ef7c:	ldr	r3, [pc, #156]	; 2f020 <__assert_fail@plt+0x1ca2c>
   2ef80:	cmp	r0, r3
   2ef84:	beq	2eb00 <__assert_fail@plt+0x1c50c>
   2ef88:	cmp	r0, #0
   2ef8c:	beq	2eb00 <__assert_fail@plt+0x1c50c>
   2ef90:	ldr	r3, [sp, #40]	; 0x28
   2ef94:	cmp	r3, #3
   2ef98:	moveq	r6, #1
   2ef9c:	movne	r6, #0
   2efa0:	bne	2eecc <__assert_fail@plt+0x1c8d8>
   2efa4:	mov	r4, #0
   2efa8:	b	2eb14 <__assert_fail@plt+0x1c520>
   2efac:	ldr	r3, [r5, #48]	; 0x30
   2efb0:	mov	r2, #7
   2efb4:	orr	r3, r3, #8192	; 0x2000
   2efb8:	strh	r2, [sl, #56]	; 0x38
   2efbc:	ldr	r0, [sp, #4]
   2efc0:	str	r3, [r5, #48]	; 0x30
   2efc4:	bl	2de84 <__assert_fail@plt+0x1b890>
   2efc8:	b	2ee78 <__assert_fail@plt+0x1c884>
   2efcc:	ldr	r3, [pc, #96]	; 2f034 <__assert_fail@plt+0x1ca40>
   2efd0:	cmp	r0, r3
   2efd4:	beq	2eb00 <__assert_fail@plt+0x1c50c>
   2efd8:	ldr	r3, [pc, #88]	; 2f038 <__assert_fail@plt+0x1ca44>
   2efdc:	cmp	r0, r3
   2efe0:	bne	2ef90 <__assert_fail@plt+0x1c99c>
   2efe4:	b	2eb00 <__assert_fail@plt+0x1c50c>
   2efe8:	str	r8, [r4, #80]	; 0x50
   2efec:	mov	r2, #1
   2eff0:	mov	r3, #0
   2eff4:	b	2e7cc <__assert_fail@plt+0x1c1d8>
   2eff8:	ldr	r3, [pc, #36]	; 2f024 <__assert_fail@plt+0x1ca30>
   2effc:	ldr	r0, [r5, #48]	; 0x30
   2f000:	str	r3, [sp, #20]
   2f004:	mov	r3, #1
   2f008:	str	r3, [sp, #52]	; 0x34
   2f00c:	b	2e6f4 <__assert_fail@plt+0x1c100>
   2f010:	andeq	r5, r4, r8, ror #27
   2f014:	andeq	r2, r0, r0, lsl r7
   2f018:	andeq	r6, r0, r9, ror #18
   2f01c:			; <UNDEFINED> instruction: 0x01021994
   2f020:			; <UNDEFINED> instruction: 0xff534d42
   2f024:	andeq	r8, r1, r0, lsr #13
   2f028:	andeq	sp, r2, r0, lsl #26
   2f02c:	andeq	r5, r4, r8, lsl lr
   2f030:	andeq	r0, r0, r6, lsl #8
   2f034:	andeq	r9, r0, r0, lsr #31
   2f038:	movtpl	r4, #24911	; 0x614f
   2f03c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f040:	bic	r5, r1, #4080	; 0xff0
   2f044:	bic	r5, r5, #15
   2f048:	cmp	r5, #0
   2f04c:	sub	sp, sp, #20
   2f050:	bne	2f388 <__assert_fail@plt+0x1cd94>
   2f054:	and	r3, r1, #516	; 0x204
   2f058:	cmp	r3, #516	; 0x204
   2f05c:	mov	r6, r1
   2f060:	beq	2f328 <__assert_fail@plt+0x1cd34>
   2f064:	ands	r5, r1, #18
   2f068:	beq	2f328 <__assert_fail@plt+0x1cd34>
   2f06c:	mov	r7, r0
   2f070:	mov	r1, #96	; 0x60
   2f074:	mov	r0, #1
   2f078:	mov	r9, r2
   2f07c:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   2f080:	subs	r5, r0, #0
   2f084:	beq	2f2d0 <__assert_fail@plt+0x1ccdc>
   2f088:	tst	r6, #2
   2f08c:	bicne	r3, r6, #512	; 0x200
   2f090:	orrne	r3, r3, #4
   2f094:	strne	r3, [r5, #48]	; 0x30
   2f098:	ldr	r3, [r7]
   2f09c:	streq	r6, [r5, #48]	; 0x30
   2f0a0:	mvn	r2, #99	; 0x63
   2f0a4:	cmp	r3, #0
   2f0a8:	str	r9, [r5, #44]	; 0x2c
   2f0ac:	str	r2, [r5, #32]
   2f0b0:	beq	2f3bc <__assert_fail@plt+0x1cdc8>
   2f0b4:	mov	r8, r7
   2f0b8:	mov	r4, #0
   2f0bc:	mov	r0, r3
   2f0c0:	bl	12300 <strlen@plt>
   2f0c4:	ldr	r3, [r8, #4]!
   2f0c8:	cmp	r4, r0
   2f0cc:	movcc	r4, r0
   2f0d0:	cmp	r3, #0
   2f0d4:	bne	2f0bc <__assert_fail@plt+0x1cac8>
   2f0d8:	add	r2, r4, #1
   2f0dc:	cmp	r2, #4096	; 0x1000
   2f0e0:	movcc	r2, #4096	; 0x1000
   2f0e4:	add	r1, r5, #36	; 0x24
   2f0e8:	add	r0, r5, #24
   2f0ec:	bl	2e0d0 <__assert_fail@plt+0x1badc>
   2f0f0:	subs	r3, r0, #0
   2f0f4:	str	r3, [sp, #4]
   2f0f8:	beq	2f310 <__assert_fail@plt+0x1cd1c>
   2f0fc:	ldr	r4, [r7]
   2f100:	cmp	r4, #0
   2f104:	beq	2f340 <__assert_fail@plt+0x1cd4c>
   2f108:	mov	r2, #0
   2f10c:	ldr	r1, [pc, #696]	; 2f3cc <__assert_fail@plt+0x1cdd8>
   2f110:	mov	r0, r5
   2f114:	bl	2de10 <__assert_fail@plt+0x1b81c>
   2f118:	subs	fp, r0, #0
   2f11c:	beq	2f308 <__assert_fail@plt+0x1cd14>
   2f120:	mvn	r3, #0
   2f124:	cmp	r9, #0
   2f128:	str	r3, [fp, #48]	; 0x30
   2f12c:	ldr	r4, [r7]
   2f130:	beq	2f144 <__assert_fail@plt+0x1cb50>
   2f134:	ldr	r3, [r5, #48]	; 0x30
   2f138:	lsr	r3, r3, #10
   2f13c:	and	r3, r3, #1
   2f140:	str	r3, [sp, #4]
   2f144:	cmp	r4, #0
   2f148:	beq	2f3c4 <__assert_fail@plt+0x1cdd0>
   2f14c:	lsr	r6, r6, #11
   2f150:	mov	r3, #0
   2f154:	eor	r6, r6, #1
   2f158:	mov	sl, r3
   2f15c:	str	r3, [sp, #12]
   2f160:	and	r3, r6, #1
   2f164:	str	r3, [sp, #8]
   2f168:	mov	r8, sl
   2f16c:	mov	r6, sl
   2f170:	b	2f1a8 <__assert_fail@plt+0x1cbb4>
   2f174:	mov	r3, #11
   2f178:	strh	r3, [r4, #56]	; 0x38
   2f17c:	mov	r2, #2
   2f180:	mov	r3, #0
   2f184:	cmp	r9, #0
   2f188:	strd	r2, [r4, #112]	; 0x70
   2f18c:	beq	2f23c <__assert_fail@plt+0x1cc48>
   2f190:	str	r6, [r4, #8]
   2f194:	mov	r6, r4
   2f198:	ldr	r4, [r7, #4]!
   2f19c:	add	r8, r8, #1
   2f1a0:	cmp	r4, #0
   2f1a4:	beq	2f268 <__assert_fail@plt+0x1cc74>
   2f1a8:	mov	r0, r4
   2f1ac:	bl	12300 <strlen@plt>
   2f1b0:	ldr	r3, [sp, #8]
   2f1b4:	cmp	r0, #2
   2f1b8:	movls	r3, #0
   2f1bc:	andhi	r3, r3, #1
   2f1c0:	cmp	r3, #0
   2f1c4:	mov	r2, r0
   2f1c8:	beq	2f1e0 <__assert_fail@plt+0x1cbec>
   2f1cc:	sub	r1, r0, #1
   2f1d0:	add	r3, r4, r1
   2f1d4:	ldrb	r1, [r4, r1]
   2f1d8:	cmp	r1, #47	; 0x2f
   2f1dc:	beq	2f2dc <__assert_fail@plt+0x1cce8>
   2f1e0:	mov	r1, r4
   2f1e4:	mov	r0, r5
   2f1e8:	bl	2de10 <__assert_fail@plt+0x1b81c>
   2f1ec:	subs	r4, r0, #0
   2f1f0:	beq	2f2f8 <__assert_fail@plt+0x1cd04>
   2f1f4:	ldr	r3, [sp, #4]
   2f1f8:	str	sl, [r4, #48]	; 0x30
   2f1fc:	cmp	r6, #0
   2f200:	moveq	r3, #0
   2f204:	andne	r3, r3, #1
   2f208:	cmp	r3, #0
   2f20c:	add	r3, r4, #168	; 0xa8
   2f210:	str	fp, [r4, #4]
   2f214:	str	r3, [r4, #24]
   2f218:	bne	2f174 <__assert_fail@plt+0x1cb80>
   2f21c:	mov	r3, sl
   2f220:	mov	r2, r4
   2f224:	ldr	r1, [r5, #48]	; 0x30
   2f228:	ldr	r0, [r5, #32]
   2f22c:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2f230:	cmp	r9, #0
   2f234:	strh	r0, [r4, #56]	; 0x38
   2f238:	bne	2f190 <__assert_fail@plt+0x1cb9c>
   2f23c:	cmp	r6, #0
   2f240:	str	r9, [r4, #8]
   2f244:	ldrne	r3, [sp, #12]
   2f248:	streq	r4, [sp, #12]
   2f24c:	strne	r4, [sp, #12]
   2f250:	strne	r4, [r3, #8]
   2f254:	moveq	r6, r4
   2f258:	ldr	r4, [r7, #4]!
   2f25c:	add	r8, r8, #1
   2f260:	cmp	r4, #0
   2f264:	bne	2f1a8 <__assert_fail@plt+0x1cbb4>
   2f268:	cmp	r9, #0
   2f26c:	cmpne	r8, #1
   2f270:	bhi	2f3a4 <__assert_fail@plt+0x1cdb0>
   2f274:	mov	r2, #0
   2f278:	ldr	r1, [pc, #332]	; 2f3cc <__assert_fail@plt+0x1cdd8>
   2f27c:	mov	r0, r5
   2f280:	bl	2de10 <__assert_fail@plt+0x1b81c>
   2f284:	cmp	r0, #0
   2f288:	str	r0, [r5]
   2f28c:	beq	2f2f8 <__assert_fail@plt+0x1cd04>
   2f290:	mov	r2, #1
   2f294:	mov	r3, #9
   2f298:	str	r6, [r0, #8]
   2f29c:	str	r2, [r0, #48]	; 0x30
   2f2a0:	strh	r3, [r0, #56]	; 0x38
   2f2a4:	add	r1, r5, #56	; 0x38
   2f2a8:	ldr	r0, [r5, #48]	; 0x30
   2f2ac:	bl	2e29c <__assert_fail@plt+0x1bca8>
   2f2b0:	cmp	r0, #0
   2f2b4:	beq	2f2f8 <__assert_fail@plt+0x1cd04>
   2f2b8:	ldr	r1, [r5, #48]	; 0x30
   2f2bc:	tst	r1, #516	; 0x204
   2f2c0:	beq	2f358 <__assert_fail@plt+0x1cd64>
   2f2c4:	mvn	r1, #0
   2f2c8:	add	r0, r5, #60	; 0x3c
   2f2cc:	bl	3f2e0 <__assert_fail@plt+0x2ccec>
   2f2d0:	mov	r0, r5
   2f2d4:	add	sp, sp, #20
   2f2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f2dc:	ldrb	r1, [r3, #-1]!
   2f2e0:	cmp	r1, #47	; 0x2f
   2f2e4:	bne	2f1e0 <__assert_fail@plt+0x1cbec>
   2f2e8:	sub	r2, r2, #1
   2f2ec:	cmp	r2, #1
   2f2f0:	bne	2f2dc <__assert_fail@plt+0x1cce8>
   2f2f4:	b	2f1e0 <__assert_fail@plt+0x1cbec>
   2f2f8:	mov	r0, r6
   2f2fc:	bl	2de84 <__assert_fail@plt+0x1b890>
   2f300:	mov	r0, fp
   2f304:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f308:	ldr	r0, [r5, #24]
   2f30c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f310:	mov	r0, r5
   2f314:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f318:	mov	r5, #0
   2f31c:	mov	r0, r5
   2f320:	add	sp, sp, #20
   2f324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f328:	bl	12348 <__errno_location@plt>
   2f32c:	mov	r3, #22
   2f330:	str	r3, [r0]
   2f334:	mov	r0, r5
   2f338:	add	sp, sp, #20
   2f33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f340:	cmp	r9, #0
   2f344:	movne	fp, r4
   2f348:	bne	2f134 <__assert_fail@plt+0x1cb40>
   2f34c:	mov	fp, r9
   2f350:	mov	r6, r9
   2f354:	b	2f274 <__assert_fail@plt+0x1cc80>
   2f358:	ldr	r2, [pc, #112]	; 2f3d0 <__assert_fail@plt+0x1cddc>
   2f35c:	ldr	r0, [r5, #32]
   2f360:	bl	2e31c <__assert_fail@plt+0x1bd28>
   2f364:	mvn	r1, #0
   2f368:	cmp	r0, #0
   2f36c:	str	r0, [r5, #28]
   2f370:	ldrlt	r3, [r5, #48]	; 0x30
   2f374:	add	r0, r5, #60	; 0x3c
   2f378:	orrlt	r3, r3, #4
   2f37c:	strlt	r3, [r5, #48]	; 0x30
   2f380:	bl	3f2e0 <__assert_fail@plt+0x2ccec>
   2f384:	b	2f2d0 <__assert_fail@plt+0x1ccdc>
   2f388:	bl	12348 <__errno_location@plt>
   2f38c:	mov	r5, #0
   2f390:	mov	r3, #22
   2f394:	str	r3, [r0]
   2f398:	mov	r0, r5
   2f39c:	add	sp, sp, #20
   2f3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f3a4:	mov	r1, r6
   2f3a8:	mov	r2, r8
   2f3ac:	mov	r0, r5
   2f3b0:	bl	2dd30 <__assert_fail@plt+0x1b73c>
   2f3b4:	mov	r6, r0
   2f3b8:	b	2f274 <__assert_fail@plt+0x1cc80>
   2f3bc:	mov	r2, #4096	; 0x1000
   2f3c0:	b	2f0e4 <__assert_fail@plt+0x1caf0>
   2f3c4:	mov	r6, r4
   2f3c8:	b	2f274 <__assert_fail@plt+0x1cc80>
   2f3cc:	andeq	r2, r4, r0, asr r0
   2f3d0:	andeq	r3, r4, r8, lsr #24
   2f3d4:	ldr	r3, [r0]
   2f3d8:	push	{r4, r5, r6, lr}
   2f3dc:	cmp	r3, #0
   2f3e0:	mov	r5, r0
   2f3e4:	beq	2f420 <__assert_fail@plt+0x1ce2c>
   2f3e8:	ldr	r2, [r3, #48]	; 0x30
   2f3ec:	cmp	r2, #0
   2f3f0:	blt	2f510 <__assert_fail@plt+0x1cf1c>
   2f3f4:	ldr	r4, [r3, #8]
   2f3f8:	mov	r0, r3
   2f3fc:	cmp	r4, #0
   2f400:	ldreq	r4, [r3, #4]
   2f404:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f408:	mov	r3, r4
   2f40c:	ldr	r2, [r4, #48]	; 0x30
   2f410:	cmp	r2, #0
   2f414:	bge	2f3f4 <__assert_fail@plt+0x1ce00>
   2f418:	mov	r0, r4
   2f41c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f420:	ldr	r0, [r5, #4]
   2f424:	cmp	r0, #0
   2f428:	beq	2f430 <__assert_fail@plt+0x1ce3c>
   2f42c:	bl	2de84 <__assert_fail@plt+0x1b890>
   2f430:	ldr	r0, [r5, #8]
   2f434:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f438:	ldr	r0, [r5, #24]
   2f43c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f440:	ldr	r3, [r5, #48]	; 0x30
   2f444:	tst	r3, #512	; 0x200
   2f448:	beq	2f4bc <__assert_fail@plt+0x1cec8>
   2f44c:	ldr	r0, [r5, #32]
   2f450:	cmp	r0, #0
   2f454:	blt	2f464 <__assert_fail@plt+0x1ce70>
   2f458:	bl	125ac <close@plt>
   2f45c:	cmp	r0, #0
   2f460:	bne	2f4fc <__assert_fail@plt+0x1cf08>
   2f464:	mov	r4, #0
   2f468:	add	r0, r5, #60	; 0x3c
   2f46c:	bl	2deb8 <__assert_fail@plt+0x1b8c4>
   2f470:	ldr	r0, [r5, #52]	; 0x34
   2f474:	cmp	r0, #0
   2f478:	beq	2f480 <__assert_fail@plt+0x1ce8c>
   2f47c:	bl	220bc <__assert_fail@plt+0xfac8>
   2f480:	ldr	r2, [r5, #48]	; 0x30
   2f484:	ldr	r3, [pc, #164]	; 2f530 <__assert_fail@plt+0x1cf3c>
   2f488:	ldr	r0, [r5, #56]	; 0x38
   2f48c:	and	r3, r3, r2
   2f490:	cmp	r3, #0
   2f494:	beq	2f508 <__assert_fail@plt+0x1cf14>
   2f498:	cmp	r0, #0
   2f49c:	beq	2f4a4 <__assert_fail@plt+0x1ceb0>
   2f4a0:	bl	220bc <__assert_fail@plt+0xfac8>
   2f4a4:	mov	r0, r5
   2f4a8:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f4ac:	cmp	r4, #0
   2f4b0:	bne	2f520 <__assert_fail@plt+0x1cf2c>
   2f4b4:	mov	r0, r4
   2f4b8:	pop	{r4, r5, r6, pc}
   2f4bc:	tst	r3, #4
   2f4c0:	bne	2f464 <__assert_fail@plt+0x1ce70>
   2f4c4:	ldr	r0, [r5, #28]
   2f4c8:	bl	124f8 <fchdir@plt>
   2f4cc:	cmp	r0, #0
   2f4d0:	beq	2f518 <__assert_fail@plt+0x1cf24>
   2f4d4:	bl	12348 <__errno_location@plt>
   2f4d8:	ldr	r4, [r0]
   2f4dc:	ldr	r0, [r5, #28]
   2f4e0:	bl	125ac <close@plt>
   2f4e4:	clz	r3, r4
   2f4e8:	lsr	r3, r3, #5
   2f4ec:	cmp	r0, #0
   2f4f0:	moveq	r3, #0
   2f4f4:	cmp	r3, #0
   2f4f8:	beq	2f468 <__assert_fail@plt+0x1ce74>
   2f4fc:	bl	12348 <__errno_location@plt>
   2f500:	ldr	r4, [r0]
   2f504:	b	2f468 <__assert_fail@plt+0x1ce74>
   2f508:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f50c:	b	2f4a4 <__assert_fail@plt+0x1ceb0>
   2f510:	mov	r4, r3
   2f514:	b	2f418 <__assert_fail@plt+0x1ce24>
   2f518:	ldr	r0, [r5, #28]
   2f51c:	b	2f458 <__assert_fail@plt+0x1ce64>
   2f520:	bl	12348 <__errno_location@plt>
   2f524:	str	r4, [r0]
   2f528:	mvn	r4, #0
   2f52c:	b	2f4b4 <__assert_fail@plt+0x1cec0>
   2f530:	andeq	r0, r0, r2, lsl #2
   2f534:	push	{r4, r5, r6, r7, r8, lr}
   2f538:	ldr	r5, [r0]
   2f53c:	cmp	r5, #0
   2f540:	beq	2f674 <__assert_fail@plt+0x1d080>
   2f544:	ldr	r1, [r0, #48]	; 0x30
   2f548:	ands	r3, r1, #8192	; 0x2000
   2f54c:	bne	2f674 <__assert_fail@plt+0x1d080>
   2f550:	ldrh	r2, [r5, #60]	; 0x3c
   2f554:	mov	r8, r0
   2f558:	mov	r0, #3
   2f55c:	cmp	r2, #1
   2f560:	strh	r0, [r5, #60]	; 0x3c
   2f564:	beq	2f8e0 <__assert_fail@plt+0x1d2ec>
   2f568:	cmp	r2, #2
   2f56c:	ldrh	r3, [r5, #56]	; 0x38
   2f570:	beq	2f680 <__assert_fail@plt+0x1d08c>
   2f574:	cmp	r3, #1
   2f578:	bne	2f5b0 <__assert_fail@plt+0x1cfbc>
   2f57c:	cmp	r2, #4
   2f580:	bne	2f694 <__assert_fail@plt+0x1d0a0>
   2f584:	b	2f6b0 <__assert_fail@plt+0x1d0bc>
   2f588:	mov	r0, r5
   2f58c:	str	r4, [r8]
   2f590:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f594:	ldr	r5, [r4, #48]	; 0x30
   2f598:	cmp	r5, #0
   2f59c:	beq	2f6f8 <__assert_fail@plt+0x1d104>
   2f5a0:	ldrh	r3, [r4, #60]	; 0x3c
   2f5a4:	mov	r5, r4
   2f5a8:	cmp	r3, #4
   2f5ac:	bne	2f7f4 <__assert_fail@plt+0x1d200>
   2f5b0:	ldr	r4, [r5, #8]
   2f5b4:	cmp	r4, #0
   2f5b8:	bne	2f588 <__assert_fail@plt+0x1cf94>
   2f5bc:	ldr	r4, [r5, #4]
   2f5c0:	ldr	r3, [r4, #12]
   2f5c4:	cmp	r3, #0
   2f5c8:	bne	2fa70 <__assert_fail@plt+0x1d47c>
   2f5cc:	str	r4, [r8]
   2f5d0:	mov	r0, r5
   2f5d4:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f5d8:	ldr	r3, [r4, #48]	; 0x30
   2f5dc:	cmn	r3, #1
   2f5e0:	beq	2f9ac <__assert_fail@plt+0x1d3b8>
   2f5e4:	ldrh	r3, [r4, #56]	; 0x38
   2f5e8:	cmp	r3, #11
   2f5ec:	beq	2f868 <__assert_fail@plt+0x1d274>
   2f5f0:	ldr	r3, [r4, #40]	; 0x28
   2f5f4:	ldr	r2, [r8, #24]
   2f5f8:	mov	r1, #0
   2f5fc:	strb	r1, [r2, r3]
   2f600:	ldr	r3, [r4, #48]	; 0x30
   2f604:	cmp	r3, r1
   2f608:	beq	2f938 <__assert_fail@plt+0x1d344>
   2f60c:	ldrh	r3, [r4, #58]	; 0x3a
   2f610:	tst	r3, #2
   2f614:	beq	2f8f8 <__assert_fail@plt+0x1d304>
   2f618:	ldr	r3, [r8, #48]	; 0x30
   2f61c:	tst	r3, #4
   2f620:	beq	2f95c <__assert_fail@plt+0x1d368>
   2f624:	ldr	r0, [r4, #36]	; 0x24
   2f628:	bl	125ac <close@plt>
   2f62c:	ldr	r3, [r8, #48]	; 0x30
   2f630:	ldrh	r2, [r4, #56]	; 0x38
   2f634:	cmp	r2, #2
   2f638:	beq	2f66c <__assert_fail@plt+0x1d078>
   2f63c:	ldr	r2, [r4, #32]
   2f640:	cmp	r2, #0
   2f644:	movne	r2, #7
   2f648:	strhne	r2, [r4, #56]	; 0x38
   2f64c:	bne	2f66c <__assert_fail@plt+0x1d078>
   2f650:	mov	r2, #6
   2f654:	mov	r0, r3
   2f658:	strh	r2, [r4, #56]	; 0x38
   2f65c:	add	r1, r8, #56	; 0x38
   2f660:	mov	r2, r4
   2f664:	bl	2e5e4 <__assert_fail@plt+0x1bff0>
   2f668:	ldr	r3, [r8, #48]	; 0x30
   2f66c:	tst	r3, #8192	; 0x2000
   2f670:	beq	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f674:	mov	r4, #0
   2f678:	mov	r0, r4
   2f67c:	pop	{r4, r5, r6, r7, r8, pc}
   2f680:	sub	r2, r3, #12
   2f684:	cmp	r2, #1
   2f688:	bls	2f978 <__assert_fail@plt+0x1d384>
   2f68c:	cmp	r3, #1
   2f690:	bne	2f5b0 <__assert_fail@plt+0x1cfbc>
   2f694:	tst	r1, #64	; 0x40
   2f698:	beq	2f86c <__assert_fail@plt+0x1d278>
   2f69c:	ldrd	r6, [r5, #64]	; 0x40
   2f6a0:	ldrd	r2, [r8, #16]
   2f6a4:	cmp	r7, r3
   2f6a8:	cmpeq	r6, r2
   2f6ac:	beq	2f86c <__assert_fail@plt+0x1d278>
   2f6b0:	ldrh	r3, [r5, #58]	; 0x3a
   2f6b4:	tst	r3, #2
   2f6b8:	bne	2fa64 <__assert_fail@plt+0x1d470>
   2f6bc:	ldr	r0, [r8, #4]
   2f6c0:	cmp	r0, #0
   2f6c4:	beq	2f6d4 <__assert_fail@plt+0x1d0e0>
   2f6c8:	bl	2de84 <__assert_fail@plt+0x1b890>
   2f6cc:	mov	r3, #0
   2f6d0:	str	r3, [r8, #4]
   2f6d4:	mov	r3, #6
   2f6d8:	strh	r3, [r5, #56]	; 0x38
   2f6dc:	mov	r2, r5
   2f6e0:	add	r1, r8, #56	; 0x38
   2f6e4:	ldr	r0, [r8, #48]	; 0x30
   2f6e8:	mov	r4, r5
   2f6ec:	bl	2e5e4 <__assert_fail@plt+0x1bff0>
   2f6f0:	mov	r0, r4
   2f6f4:	pop	{r4, r5, r6, r7, r8, pc}
   2f6f8:	mov	r0, r8
   2f6fc:	bl	2e080 <__assert_fail@plt+0x1ba8c>
   2f700:	cmp	r0, #0
   2f704:	bne	2fa50 <__assert_fail@plt+0x1d45c>
   2f708:	ldr	r2, [r8, #48]	; 0x30
   2f70c:	ldr	r3, [pc, #1228]	; 2fbe0 <__assert_fail@plt+0x1d5ec>
   2f710:	ldr	r0, [r8, #56]	; 0x38
   2f714:	and	r3, r3, r2
   2f718:	cmp	r3, #0
   2f71c:	beq	2f9cc <__assert_fail@plt+0x1d3d8>
   2f720:	cmp	r0, #0
   2f724:	beq	2f72c <__assert_fail@plt+0x1d138>
   2f728:	bl	220bc <__assert_fail@plt+0xfac8>
   2f72c:	ldr	r2, [r4, #52]	; 0x34
   2f730:	add	r6, r4, #168	; 0xa8
   2f734:	str	r2, [r4, #40]	; 0x28
   2f738:	mov	r1, r6
   2f73c:	add	r2, r2, #1
   2f740:	ldr	r0, [r8, #24]
   2f744:	bl	11fb8 <memmove@plt>
   2f748:	mov	r0, r6
   2f74c:	mov	r1, #47	; 0x2f
   2f750:	bl	12468 <strrchr@plt>
   2f754:	cmp	r0, #0
   2f758:	beq	2f788 <__assert_fail@plt+0x1d194>
   2f75c:	cmp	r6, r0
   2f760:	beq	2fa40 <__assert_fail@plt+0x1d44c>
   2f764:	add	r5, r0, #1
   2f768:	mov	r0, r5
   2f76c:	bl	12300 <strlen@plt>
   2f770:	mov	r1, r5
   2f774:	mov	r7, r0
   2f778:	add	r2, r7, #1
   2f77c:	mov	r0, r6
   2f780:	bl	11fb8 <memmove@plt>
   2f784:	str	r7, [r4, #52]	; 0x34
   2f788:	ldr	r3, [r8, #24]
   2f78c:	add	r1, r8, #56	; 0x38
   2f790:	str	r3, [r4, #28]
   2f794:	str	r3, [r4, #24]
   2f798:	ldr	r0, [r8, #48]	; 0x30
   2f79c:	bl	2e29c <__assert_fail@plt+0x1bca8>
   2f7a0:	ldrh	r3, [r4, #56]	; 0x38
   2f7a4:	cmp	r3, #11
   2f7a8:	str	r4, [r8]
   2f7ac:	beq	2f84c <__assert_fail@plt+0x1d258>
   2f7b0:	cmp	r3, #1
   2f7b4:	bne	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f7b8:	ldr	r3, [r4, #48]	; 0x30
   2f7bc:	cmp	r3, #0
   2f7c0:	ldrdeq	r2, [r4, #64]	; 0x40
   2f7c4:	strdeq	r2, [r8, #16]
   2f7c8:	mov	r2, r4
   2f7cc:	add	r1, r8, #56	; 0x38
   2f7d0:	ldr	r0, [r8, #48]	; 0x30
   2f7d4:	bl	2e534 <__assert_fail@plt+0x1bf40>
   2f7d8:	subs	r5, r0, #0
   2f7dc:	bne	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f7e0:	bl	12348 <__errno_location@plt>
   2f7e4:	mov	r3, #12
   2f7e8:	mov	r4, r5
   2f7ec:	str	r3, [r0]
   2f7f0:	b	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f7f4:	cmp	r3, #2
   2f7f8:	beq	2faa4 <__assert_fail@plt+0x1d4b0>
   2f7fc:	ldr	r3, [r4, #4]
   2f800:	mov	ip, #47	; 0x2f
   2f804:	ldr	r2, [r8, #24]
   2f808:	ldr	r0, [r3, #40]	; 0x28
   2f80c:	ldr	lr, [r3, #28]
   2f810:	sub	r3, r0, #1
   2f814:	add	r1, r4, #168	; 0xa8
   2f818:	ldrb	lr, [lr, r3]
   2f81c:	cmp	lr, ip
   2f820:	movne	r3, r0
   2f824:	add	r0, r2, r3
   2f828:	strb	ip, [r2, r3]
   2f82c:	ldr	r2, [r4, #52]	; 0x34
   2f830:	add	r0, r0, #1
   2f834:	add	r2, r2, #1
   2f838:	bl	11fb8 <memmove@plt>
   2f83c:	ldrh	r3, [r4, #56]	; 0x38
   2f840:	str	r4, [r8]
   2f844:	cmp	r3, #11
   2f848:	bne	2f7b0 <__assert_fail@plt+0x1d1bc>
   2f84c:	ldrd	r2, [r4, #112]	; 0x70
   2f850:	cmp	r3, #0
   2f854:	cmpeq	r2, #2
   2f858:	beq	2fad0 <__assert_fail@plt+0x1d4dc>
   2f85c:	cmp	r3, #0
   2f860:	cmpeq	r2, #1
   2f864:	beq	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f868:	bl	125a0 <abort@plt>
   2f86c:	ldr	r0, [r8, #4]
   2f870:	cmp	r0, #0
   2f874:	beq	2f9e8 <__assert_fail@plt+0x1d3f4>
   2f878:	tst	r1, #4096	; 0x1000
   2f87c:	bne	2f9d4 <__assert_fail@plt+0x1d3e0>
   2f880:	ldr	r3, [r5, #24]
   2f884:	mvn	r2, #0
   2f888:	mov	r1, r5
   2f88c:	mov	r0, r8
   2f890:	bl	2e358 <__assert_fail@plt+0x1bd64>
   2f894:	cmp	r0, #0
   2f898:	beq	2f94c <__assert_fail@plt+0x1d358>
   2f89c:	bl	12348 <__errno_location@plt>
   2f8a0:	ldrh	r3, [r5, #58]	; 0x3a
   2f8a4:	ldr	r4, [r8, #4]
   2f8a8:	orr	r3, r3, #1
   2f8ac:	cmp	r4, #0
   2f8b0:	ldr	r2, [r0]
   2f8b4:	strh	r3, [r5, #58]	; 0x3a
   2f8b8:	str	r2, [r5, #32]
   2f8bc:	beq	2f950 <__assert_fail@plt+0x1d35c>
   2f8c0:	mov	r3, r4
   2f8c4:	ldr	r2, [r3, #4]
   2f8c8:	ldr	r2, [r2, #24]
   2f8cc:	str	r2, [r3, #24]
   2f8d0:	ldr	r3, [r3, #8]
   2f8d4:	cmp	r3, #0
   2f8d8:	bne	2f8c4 <__assert_fail@plt+0x1d2d0>
   2f8dc:	b	2f950 <__assert_fail@plt+0x1d35c>
   2f8e0:	ldr	r0, [r8, #32]
   2f8e4:	mov	r2, r5
   2f8e8:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2f8ec:	mov	r4, r5
   2f8f0:	strh	r0, [r5, #56]	; 0x38
   2f8f4:	b	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f8f8:	tst	r3, #1
   2f8fc:	bne	2f62c <__assert_fail@plt+0x1d038>
   2f900:	ldr	r3, [pc, #732]	; 2fbe4 <__assert_fail@plt+0x1d5f0>
   2f904:	mvn	r2, #0
   2f908:	ldr	r1, [r4, #4]
   2f90c:	mov	r0, r8
   2f910:	bl	2e358 <__assert_fail@plt+0x1bd64>
   2f914:	cmp	r0, #0
   2f918:	beq	2f62c <__assert_fail@plt+0x1d038>
   2f91c:	bl	12348 <__errno_location@plt>
   2f920:	ldr	r3, [r8, #48]	; 0x30
   2f924:	orr	r3, r3, #8192	; 0x2000
   2f928:	ldr	r2, [r0]
   2f92c:	str	r2, [r4, #32]
   2f930:	str	r3, [r8, #48]	; 0x30
   2f934:	b	2f630 <__assert_fail@plt+0x1d03c>
   2f938:	mov	r0, r8
   2f93c:	bl	2e080 <__assert_fail@plt+0x1ba8c>
   2f940:	cmp	r0, #0
   2f944:	bne	2f91c <__assert_fail@plt+0x1d328>
   2f948:	b	2f62c <__assert_fail@plt+0x1d038>
   2f94c:	ldr	r4, [r8, #4]
   2f950:	mov	r3, #0
   2f954:	str	r3, [r8, #4]
   2f958:	b	2f7fc <__assert_fail@plt+0x1d208>
   2f95c:	tst	r3, #512	; 0x200
   2f960:	beq	2faf0 <__assert_fail@plt+0x1d4fc>
   2f964:	mov	r2, #1
   2f968:	ldr	r1, [r4, #36]	; 0x24
   2f96c:	mov	r0, r8
   2f970:	bl	2e000 <__assert_fail@plt+0x1ba0c>
   2f974:	b	2f624 <__assert_fail@plt+0x1d030>
   2f978:	mov	r3, #1
   2f97c:	mov	r2, r5
   2f980:	ldr	r0, [r8, #32]
   2f984:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2f988:	cmp	r0, #1
   2f98c:	mov	r3, r0
   2f990:	strh	r0, [r5, #56]	; 0x38
   2f994:	beq	2fb30 <__assert_fail@plt+0x1d53c>
   2f998:	cmp	r0, #11
   2f99c:	mov	r4, r5
   2f9a0:	str	r5, [r8]
   2f9a4:	bne	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f9a8:	b	2f84c <__assert_fail@plt+0x1d258>
   2f9ac:	mov	r0, r4
   2f9b0:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f9b4:	bl	12348 <__errno_location@plt>
   2f9b8:	mov	r3, #0
   2f9bc:	mov	r4, r3
   2f9c0:	str	r3, [r0]
   2f9c4:	str	r3, [r8]
   2f9c8:	b	2f6f0 <__assert_fail@plt+0x1d0fc>
   2f9cc:	bl	2db68 <__assert_fail@plt+0x1b574>
   2f9d0:	b	2f72c <__assert_fail@plt+0x1d138>
   2f9d4:	bic	r1, r1, #4096	; 0x1000
   2f9d8:	str	r1, [r8, #48]	; 0x30
   2f9dc:	bl	2de84 <__assert_fail@plt+0x1b890>
   2f9e0:	mov	r3, #0
   2f9e4:	str	r3, [r8, #4]
   2f9e8:	mov	r1, #3
   2f9ec:	mov	r0, r8
   2f9f0:	bl	2e69c <__assert_fail@plt+0x1c0a8>
   2f9f4:	cmp	r0, #0
   2f9f8:	mov	r4, r0
   2f9fc:	str	r0, [r8, #4]
   2fa00:	bne	2f950 <__assert_fail@plt+0x1d35c>
   2fa04:	ldr	r0, [r8, #48]	; 0x30
   2fa08:	tst	r0, #8192	; 0x2000
   2fa0c:	bne	2f674 <__assert_fail@plt+0x1d080>
   2fa10:	ldr	r3, [r5, #32]
   2fa14:	cmp	r3, #0
   2fa18:	beq	2fa2c <__assert_fail@plt+0x1d438>
   2fa1c:	ldrh	r3, [r5, #56]	; 0x38
   2fa20:	cmp	r3, #4
   2fa24:	movne	r3, #7
   2fa28:	strhne	r3, [r5, #56]	; 0x38
   2fa2c:	add	r1, r8, #56	; 0x38
   2fa30:	mov	r2, r5
   2fa34:	bl	2e5e4 <__assert_fail@plt+0x1bff0>
   2fa38:	mov	r4, r5
   2fa3c:	b	2f6f0 <__assert_fail@plt+0x1d0fc>
   2fa40:	ldrb	r3, [r4, #169]	; 0xa9
   2fa44:	cmp	r3, #0
   2fa48:	bne	2f764 <__assert_fail@plt+0x1d170>
   2fa4c:	b	2f788 <__assert_fail@plt+0x1d194>
   2fa50:	ldr	r3, [r8, #48]	; 0x30
   2fa54:	mov	r4, r5
   2fa58:	orr	r3, r3, #8192	; 0x2000
   2fa5c:	str	r3, [r8, #48]	; 0x30
   2fa60:	b	2f6f0 <__assert_fail@plt+0x1d0fc>
   2fa64:	ldr	r0, [r5, #36]	; 0x24
   2fa68:	bl	125ac <close@plt>
   2fa6c:	b	2f6bc <__assert_fail@plt+0x1d0c8>
   2fa70:	ldr	r3, [r4, #40]	; 0x28
   2fa74:	ldr	r2, [r8, #24]
   2fa78:	mov	r0, #0
   2fa7c:	str	r4, [r8]
   2fa80:	mov	r1, #3
   2fa84:	strb	r0, [r2, r3]
   2fa88:	mov	r0, r8
   2fa8c:	bl	2e69c <__assert_fail@plt+0x1c0a8>
   2fa90:	subs	r4, r0, #0
   2fa94:	beq	2fb1c <__assert_fail@plt+0x1d528>
   2fa98:	mov	r0, r5
   2fa9c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2faa0:	b	2f7fc <__assert_fail@plt+0x1d208>
   2faa4:	mov	r3, #1
   2faa8:	mov	r2, r4
   2faac:	ldr	r1, [r8, #48]	; 0x30
   2fab0:	ldr	r0, [r8, #32]
   2fab4:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2fab8:	cmp	r0, #1
   2fabc:	strh	r0, [r4, #56]	; 0x38
   2fac0:	beq	2fb48 <__assert_fail@plt+0x1d554>
   2fac4:	mov	r3, #3
   2fac8:	strh	r3, [r4, #60]	; 0x3c
   2facc:	b	2f7fc <__assert_fail@plt+0x1d208>
   2fad0:	mov	r3, #0
   2fad4:	mov	r2, r4
   2fad8:	ldr	r1, [r8, #48]	; 0x30
   2fadc:	ldr	r0, [r8, #32]
   2fae0:	bl	2e150 <__assert_fail@plt+0x1bb5c>
   2fae4:	mov	r3, r0
   2fae8:	strh	r0, [r4, #56]	; 0x38
   2faec:	b	2f7b0 <__assert_fail@plt+0x1d1bc>
   2faf0:	ldr	r0, [r4, #36]	; 0x24
   2faf4:	bl	124f8 <fchdir@plt>
   2faf8:	cmp	r0, #0
   2fafc:	beq	2f624 <__assert_fail@plt+0x1d030>
   2fb00:	bl	12348 <__errno_location@plt>
   2fb04:	ldr	r3, [r8, #48]	; 0x30
   2fb08:	orr	r3, r3, #8192	; 0x2000
   2fb0c:	ldr	r2, [r0]
   2fb10:	str	r2, [r4, #32]
   2fb14:	str	r3, [r8, #48]	; 0x30
   2fb18:	b	2f624 <__assert_fail@plt+0x1d030>
   2fb1c:	ldr	r3, [r8, #48]	; 0x30
   2fb20:	tst	r3, #8192	; 0x2000
   2fb24:	bne	2f674 <__assert_fail@plt+0x1d080>
   2fb28:	ldr	r4, [r5, #4]
   2fb2c:	b	2f5cc <__assert_fail@plt+0x1cfd8>
   2fb30:	ldr	r1, [r8, #48]	; 0x30
   2fb34:	tst	r1, #4
   2fb38:	beq	2fb7c <__assert_fail@plt+0x1d588>
   2fb3c:	str	r5, [r8]
   2fb40:	mov	r4, r5
   2fb44:	b	2f7b0 <__assert_fail@plt+0x1d1bc>
   2fb48:	ldr	r1, [r8, #48]	; 0x30
   2fb4c:	tst	r1, #4
   2fb50:	bne	2fac4 <__assert_fail@plt+0x1d4d0>
   2fb54:	ldr	r2, [pc, #140]	; 2fbe8 <__assert_fail@plt+0x1d5f4>
   2fb58:	ldr	r0, [r8, #32]
   2fb5c:	bl	2e31c <__assert_fail@plt+0x1bd28>
   2fb60:	cmp	r0, #0
   2fb64:	str	r0, [r4, #36]	; 0x24
   2fb68:	blt	2fbac <__assert_fail@plt+0x1d5b8>
   2fb6c:	ldrh	r3, [r4, #58]	; 0x3a
   2fb70:	orr	r3, r3, #2
   2fb74:	strh	r3, [r4, #58]	; 0x3a
   2fb78:	b	2fac4 <__assert_fail@plt+0x1d4d0>
   2fb7c:	ldr	r2, [pc, #100]	; 2fbe8 <__assert_fail@plt+0x1d5f4>
   2fb80:	ldr	r0, [r8, #32]
   2fb84:	bl	2e31c <__assert_fail@plt+0x1bd28>
   2fb88:	cmp	r0, #0
   2fb8c:	str	r0, [r5, #36]	; 0x24
   2fb90:	blt	2fbc4 <__assert_fail@plt+0x1d5d0>
   2fb94:	ldrh	r2, [r5, #58]	; 0x3a
   2fb98:	ldrh	r3, [r5, #56]	; 0x38
   2fb9c:	mov	r4, r5
   2fba0:	orr	r2, r2, #2
   2fba4:	strh	r2, [r5, #58]	; 0x3a
   2fba8:	b	2f7a4 <__assert_fail@plt+0x1d1b0>
   2fbac:	bl	12348 <__errno_location@plt>
   2fbb0:	mov	r2, #7
   2fbb4:	ldr	r3, [r0]
   2fbb8:	strh	r2, [r4, #56]	; 0x38
   2fbbc:	str	r3, [r4, #32]
   2fbc0:	b	2fac4 <__assert_fail@plt+0x1d4d0>
   2fbc4:	bl	12348 <__errno_location@plt>
   2fbc8:	mov	r2, #7
   2fbcc:	mov	r3, r2
   2fbd0:	ldr	r1, [r0]
   2fbd4:	strh	r2, [r5, #56]	; 0x38
   2fbd8:	str	r1, [r5, #32]
   2fbdc:	b	2fb3c <__assert_fail@plt+0x1d548>
   2fbe0:	andeq	r0, r0, r2, lsl #2
   2fbe4:	andeq	r5, r4, r8, lsl lr
   2fbe8:	andeq	r3, r4, r8, lsr #24
   2fbec:	cmp	r2, #4
   2fbf0:	bhi	2fc04 <__assert_fail@plt+0x1d610>
   2fbf4:	mov	r3, #0
   2fbf8:	strh	r2, [r1, #60]	; 0x3c
   2fbfc:	mov	r0, r3
   2fc00:	bx	lr
   2fc04:	push	{r4, lr}
   2fc08:	bl	12348 <__errno_location@plt>
   2fc0c:	mov	r2, #22
   2fc10:	mov	r3, #1
   2fc14:	str	r2, [r0]
   2fc18:	mov	r0, r3
   2fc1c:	pop	{r4, pc}
   2fc20:	push	{r4, r5, r6, r7, r8, lr}
   2fc24:	bics	r8, r1, #4096	; 0x1000
   2fc28:	bne	2fd28 <__assert_fail@plt+0x1d734>
   2fc2c:	mov	r5, r0
   2fc30:	mov	r4, r1
   2fc34:	bl	12348 <__errno_location@plt>
   2fc38:	ldr	r6, [r5]
   2fc3c:	str	r8, [r0]
   2fc40:	ldr	r3, [r5, #48]	; 0x30
   2fc44:	mov	r7, r0
   2fc48:	ands	r3, r3, #8192	; 0x2000
   2fc4c:	bne	2fd40 <__assert_fail@plt+0x1d74c>
   2fc50:	ldrh	r2, [r6, #56]	; 0x38
   2fc54:	cmp	r2, #9
   2fc58:	ldreq	r3, [r6, #8]
   2fc5c:	beq	2fccc <__assert_fail@plt+0x1d6d8>
   2fc60:	cmp	r2, #1
   2fc64:	bne	2fccc <__assert_fail@plt+0x1d6d8>
   2fc68:	ldr	r0, [r5, #4]
   2fc6c:	cmp	r0, #0
   2fc70:	beq	2fc78 <__assert_fail@plt+0x1d684>
   2fc74:	bl	2de84 <__assert_fail@plt+0x1b890>
   2fc78:	cmp	r4, #4096	; 0x1000
   2fc7c:	moveq	r8, #2
   2fc80:	ldreq	r3, [r5, #48]	; 0x30
   2fc84:	movne	r8, #1
   2fc88:	orreq	r3, r3, #4096	; 0x1000
   2fc8c:	streq	r3, [r5, #48]	; 0x30
   2fc90:	ldr	r3, [r6, #48]	; 0x30
   2fc94:	cmp	r3, #0
   2fc98:	bne	2fcb8 <__assert_fail@plt+0x1d6c4>
   2fc9c:	ldr	r3, [r6, #24]
   2fca0:	ldrb	r3, [r3]
   2fca4:	cmp	r3, #47	; 0x2f
   2fca8:	beq	2fcb8 <__assert_fail@plt+0x1d6c4>
   2fcac:	ldr	r1, [r5, #48]	; 0x30
   2fcb0:	ands	r4, r1, #4
   2fcb4:	beq	2fcd4 <__assert_fail@plt+0x1d6e0>
   2fcb8:	mov	r1, r8
   2fcbc:	mov	r0, r5
   2fcc0:	bl	2e69c <__assert_fail@plt+0x1c0a8>
   2fcc4:	mov	r3, r0
   2fcc8:	str	r0, [r5, #4]
   2fccc:	mov	r0, r3
   2fcd0:	pop	{r4, r5, r6, r7, r8, pc}
   2fcd4:	ldr	r2, [pc, #160]	; 2fd7c <__assert_fail@plt+0x1d788>
   2fcd8:	ldr	r0, [r5, #32]
   2fcdc:	bl	2e31c <__assert_fail@plt+0x1bd28>
   2fce0:	subs	r6, r0, #0
   2fce4:	strlt	r4, [r5, #4]
   2fce8:	movlt	r3, r4
   2fcec:	blt	2fccc <__assert_fail@plt+0x1d6d8>
   2fcf0:	mov	r1, r8
   2fcf4:	mov	r0, r5
   2fcf8:	bl	2e69c <__assert_fail@plt+0x1c0a8>
   2fcfc:	ldr	r3, [r5, #48]	; 0x30
   2fd00:	ands	r4, r3, #512	; 0x200
   2fd04:	str	r0, [r5, #4]
   2fd08:	beq	2fd48 <__assert_fail@plt+0x1d754>
   2fd0c:	mov	r1, r6
   2fd10:	mov	r2, #1
   2fd14:	mov	r0, r5
   2fd18:	bl	2e000 <__assert_fail@plt+0x1ba0c>
   2fd1c:	ldr	r3, [r5, #4]
   2fd20:	mov	r0, r3
   2fd24:	pop	{r4, r5, r6, r7, r8, pc}
   2fd28:	bl	12348 <__errno_location@plt>
   2fd2c:	mov	r2, #22
   2fd30:	mov	r3, #0
   2fd34:	str	r2, [r0]
   2fd38:	mov	r0, r3
   2fd3c:	pop	{r4, r5, r6, r7, r8, pc}
   2fd40:	mov	r3, r8
   2fd44:	b	2fccc <__assert_fail@plt+0x1d6d8>
   2fd48:	mov	r0, r6
   2fd4c:	bl	124f8 <fchdir@plt>
   2fd50:	cmp	r0, #0
   2fd54:	bne	2fd64 <__assert_fail@plt+0x1d770>
   2fd58:	mov	r0, r6
   2fd5c:	bl	125ac <close@plt>
   2fd60:	b	2fd1c <__assert_fail@plt+0x1d728>
   2fd64:	ldr	r5, [r7]
   2fd68:	mov	r0, r6
   2fd6c:	bl	125ac <close@plt>
   2fd70:	str	r5, [r7]
   2fd74:	mov	r3, r4
   2fd78:	b	2fccc <__assert_fail@plt+0x1d6d8>
   2fd7c:	andeq	r3, r4, r8, lsr #24
   2fd80:	push	{r4, r5, r6, r7, r8, lr}
   2fd84:	subs	r4, r0, #0
   2fd88:	beq	2fdd8 <__assert_fail@plt+0x1d7e4>
   2fd8c:	cmp	r4, #10
   2fd90:	beq	2fd9c <__assert_fail@plt+0x1d7a8>
   2fd94:	mov	r0, r4
   2fd98:	pop	{r4, r5, r6, r7, r8, pc}
   2fd9c:	ldr	r6, [r1]
   2fda0:	mov	r5, r1
   2fda4:	mov	r0, r6
   2fda8:	ldr	r1, [pc, #60]	; 2fdec <__assert_fail@plt+0x1d7f8>
   2fdac:	bl	11f40 <strcmp@plt>
   2fdb0:	subs	r7, r0, #0
   2fdb4:	bne	2fd94 <__assert_fail@plt+0x1d7a0>
   2fdb8:	mov	r0, r6
   2fdbc:	bl	1251c <freecon@plt>
   2fdc0:	str	r7, [r5]
   2fdc4:	bl	12348 <__errno_location@plt>
   2fdc8:	mov	r3, #61	; 0x3d
   2fdcc:	mvn	r4, #0
   2fdd0:	str	r3, [r0]
   2fdd4:	b	2fd94 <__assert_fail@plt+0x1d7a0>
   2fdd8:	bl	12348 <__errno_location@plt>
   2fddc:	mov	r3, #95	; 0x5f
   2fde0:	mvn	r4, #0
   2fde4:	str	r3, [r0]
   2fde8:	b	2fd94 <__assert_fail@plt+0x1d7a0>
   2fdec:	andeq	r5, r4, ip, lsl lr
   2fdf0:	push	{r4, lr}
   2fdf4:	mov	r4, r1
   2fdf8:	bl	122e8 <getfilecon@plt>
   2fdfc:	mov	r1, r4
   2fe00:	pop	{r4, lr}
   2fe04:	b	2fd80 <__assert_fail@plt+0x1d78c>
   2fe08:	push	{r4, lr}
   2fe0c:	mov	r4, r1
   2fe10:	bl	12234 <lgetfilecon@plt>
   2fe14:	mov	r1, r4
   2fe18:	pop	{r4, lr}
   2fe1c:	b	2fd80 <__assert_fail@plt+0x1d78c>
   2fe20:	push	{r4, lr}
   2fe24:	mov	r4, r1
   2fe28:	bl	120f0 <fgetfilecon@plt>
   2fe2c:	mov	r1, r4
   2fe30:	pop	{r4, lr}
   2fe34:	b	2fd80 <__assert_fail@plt+0x1d78c>
   2fe38:	cmp	r0, #0
   2fe3c:	moveq	r0, #1
   2fe40:	cmp	r0, #0
   2fe44:	blt	2fe4c <__assert_fail@plt+0x1d858>
   2fe48:	b	12240 <malloc@plt>
   2fe4c:	push	{r4, lr}
   2fe50:	bl	12348 <__errno_location@plt>
   2fe54:	mov	r3, #12
   2fe58:	str	r3, [r0]
   2fe5c:	mov	r0, #0
   2fe60:	pop	{r4, pc}
   2fe64:	push	{r4, r5, r6, r7, lr}
   2fe68:	subs	r6, r0, #0
   2fe6c:	sub	sp, sp, #12
   2fe70:	addeq	r6, sp, #4
   2fe74:	mov	r0, r6
   2fe78:	mov	r5, r2
   2fe7c:	mov	r7, r1
   2fe80:	bl	121d4 <mbrtowc@plt>
   2fe84:	cmp	r5, #0
   2fe88:	cmnne	r0, #3
   2fe8c:	mov	r4, r0
   2fe90:	bls	2feac <__assert_fail@plt+0x1d8b8>
   2fe94:	mov	r0, #0
   2fe98:	bl	3f284 <__assert_fail@plt+0x2cc90>
   2fe9c:	cmp	r0, #0
   2fea0:	moveq	r4, #1
   2fea4:	ldrbeq	r3, [r7]
   2fea8:	streq	r3, [r6]
   2feac:	mov	r0, r4
   2feb0:	add	sp, sp, #12
   2feb4:	pop	{r4, r5, r6, r7, pc}
   2feb8:	push	{r4, r5, r6, r7, r8, lr}
   2febc:	mov	r4, r0
   2fec0:	bl	12300 <strlen@plt>
   2fec4:	adds	r0, r0, #1
   2fec8:	popeq	{r4, r5, r6, r7, r8, pc}
   2fecc:	mov	r2, r4
   2fed0:	mov	r3, #0
   2fed4:	b	2feec <__assert_fail@plt+0x1d8f8>
   2fed8:	mov	r3, ip
   2fedc:	strb	r1, [r2]
   2fee0:	cmp	r0, r3
   2fee4:	add	r2, r2, #1
   2fee8:	bls	2ff5c <__assert_fail@plt+0x1d968>
   2feec:	ldrb	r1, [r4, r3]
   2fef0:	add	ip, r3, #1
   2fef4:	cmp	r1, #92	; 0x5c
   2fef8:	bne	2fed8 <__assert_fail@plt+0x1d8e4>
   2fefc:	add	lr, r3, #4
   2ff00:	cmp	r0, lr
   2ff04:	bls	2fed8 <__assert_fail@plt+0x1d8e4>
   2ff08:	ldrb	r5, [r4, ip]
   2ff0c:	add	r3, r4, r3
   2ff10:	sub	r5, r5, #48	; 0x30
   2ff14:	uxtb	r6, r5
   2ff18:	cmp	r6, #3
   2ff1c:	bhi	2fed8 <__assert_fail@plt+0x1d8e4>
   2ff20:	ldrb	r6, [r3, #2]
   2ff24:	sub	r6, r6, #48	; 0x30
   2ff28:	uxtb	r7, r6
   2ff2c:	cmp	r7, #7
   2ff30:	bhi	2fed8 <__assert_fail@plt+0x1d8e4>
   2ff34:	ldrb	r7, [r3, #3]
   2ff38:	mov	r3, lr
   2ff3c:	add	r5, r6, r5, lsl #3
   2ff40:	sub	lr, r7, #48	; 0x30
   2ff44:	uxtb	lr, lr
   2ff48:	cmp	lr, #7
   2ff4c:	add	r5, lr, r5, lsl #3
   2ff50:	strbls	r5, [r2]
   2ff54:	bls	2fee0 <__assert_fail@plt+0x1d8ec>
   2ff58:	b	2fed8 <__assert_fail@plt+0x1d8e4>
   2ff5c:	pop	{r4, r5, r6, r7, r8, pc}
   2ff60:	push	{r4, lr}
   2ff64:	mov	r4, r0
   2ff68:	ldr	r0, [r0]
   2ff6c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ff70:	ldr	r0, [r4, #4]
   2ff74:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ff78:	ldr	r0, [r4, #8]
   2ff7c:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ff80:	ldrb	r3, [r4, #24]
   2ff84:	tst	r3, #4
   2ff88:	beq	2ff94 <__assert_fail@plt+0x1d9a0>
   2ff8c:	ldr	r0, [r4, #12]
   2ff90:	bl	2db68 <__assert_fail@plt+0x1b574>
   2ff94:	mov	r0, r4
   2ff98:	pop	{r4, lr}
   2ff9c:	b	2db68 <__assert_fail@plt+0x1b574>
   2ffa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ffa4:	sub	sp, sp, #68	; 0x44
   2ffa8:	ldr	r1, [pc, #1264]	; 304a0 <__assert_fail@plt+0x1deac>
   2ffac:	ldr	r0, [pc, #1264]	; 304a4 <__assert_fail@plt+0x1deb0>
   2ffb0:	bl	12504 <fopen64@plt>
   2ffb4:	subs	r7, r0, #0
   2ffb8:	beq	30530 <__assert_fail@plt+0x1df3c>
   2ffbc:	add	sl, sp, #40	; 0x28
   2ffc0:	ldr	r9, [pc, #1248]	; 304a8 <__assert_fail@plt+0x1deb4>
   2ffc4:	mov	r5, sl
   2ffc8:	mov	r3, #0
   2ffcc:	str	r3, [sp, #44]	; 0x2c
   2ffd0:	str	r3, [sp, #48]	; 0x30
   2ffd4:	mov	r3, r7
   2ffd8:	mov	r2, #10
   2ffdc:	add	r1, sp, #48	; 0x30
   2ffe0:	add	r0, sp, #44	; 0x2c
   2ffe4:	bl	11f10 <__getdelim@plt>
   2ffe8:	cmn	r0, #1
   2ffec:	beq	3023c <__assert_fail@plt+0x1dc48>
   2fff0:	add	r3, sp, #60	; 0x3c
   2fff4:	str	r3, [sp]
   2fff8:	ldr	r0, [sp, #44]	; 0x2c
   2fffc:	add	r3, sp, #56	; 0x38
   30000:	add	r2, sp, #52	; 0x34
   30004:	mov	r1, r9
   30008:	bl	12498 <sscanf@plt>
   3000c:	sub	r0, r0, #2
   30010:	cmp	r0, #1
   30014:	bhi	2ffd4 <__assert_fail@plt+0x1d9e0>
   30018:	ldr	r3, [sp, #60]	; 0x3c
   3001c:	ldr	sl, [sp, #44]	; 0x2c
   30020:	mov	r1, #32
   30024:	add	sl, sl, r3
   30028:	mov	r0, sl
   3002c:	bl	1230c <strchr@plt>
   30030:	subs	r6, r0, #0
   30034:	beq	2ffd4 <__assert_fail@plt+0x1d9e0>
   30038:	mov	r8, #0
   3003c:	strb	r8, [r6], #1
   30040:	mov	r1, #32
   30044:	mov	r0, r6
   30048:	bl	1230c <strchr@plt>
   3004c:	cmp	r0, #0
   30050:	beq	2ffd4 <__assert_fail@plt+0x1d9e0>
   30054:	ldr	r1, [pc, #1104]	; 304ac <__assert_fail@plt+0x1deb8>
   30058:	strb	r8, [r0], #1
   3005c:	bl	3e324 <__assert_fail@plt+0x2bd30>
   30060:	cmp	r0, #0
   30064:	beq	2ffd4 <__assert_fail@plt+0x1d9e0>
   30068:	add	fp, r0, #3
   3006c:	mov	r0, fp
   30070:	mov	r1, #32
   30074:	bl	1230c <strchr@plt>
   30078:	subs	r3, r0, #0
   3007c:	beq	2ffd4 <__assert_fail@plt+0x1d9e0>
   30080:	strb	r8, [r3], #1
   30084:	mov	r1, #32
   30088:	mov	r0, r3
   3008c:	str	r3, [sp, #32]
   30090:	bl	1230c <strchr@plt>
   30094:	cmp	r0, #0
   30098:	beq	2ffd4 <__assert_fail@plt+0x1d9e0>
   3009c:	ldr	r3, [sp, #32]
   300a0:	strb	r8, [r0]
   300a4:	mov	r0, r3
   300a8:	bl	2feb8 <__assert_fail@plt+0x1d8c4>
   300ac:	mov	r0, r6
   300b0:	bl	2feb8 <__assert_fail@plt+0x1d8c4>
   300b4:	mov	r0, sl
   300b8:	bl	2feb8 <__assert_fail@plt+0x1d8c4>
   300bc:	mov	r0, fp
   300c0:	bl	2feb8 <__assert_fail@plt+0x1d8c4>
   300c4:	mov	r0, #32
   300c8:	bl	2c184 <__assert_fail@plt+0x19b90>
   300cc:	ldr	r3, [sp, #32]
   300d0:	mov	r4, r0
   300d4:	mov	r0, r3
   300d8:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   300dc:	str	r8, [sp, #12]
   300e0:	str	r8, [sp, #20]
   300e4:	str	r0, [r4]
   300e8:	mov	r0, r6
   300ec:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   300f0:	str	r0, [r4, #4]
   300f4:	mov	r0, sl
   300f8:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   300fc:	ldr	sl, [pc, #940]	; 304b0 <__assert_fail@plt+0x1debc>
   30100:	str	r0, [r4, #8]
   30104:	mov	r0, fp
   30108:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   3010c:	ldr	r3, [sp, #52]	; 0x34
   30110:	mov	fp, #0
   30114:	str	r3, [sp, #28]
   30118:	lsr	r2, r3, #24
   3011c:	lsl	r3, r3, #8
   30120:	str	r2, [sp, #12]
   30124:	str	r3, [sp, #8]
   30128:	ldrd	r2, [sp, #8]
   3012c:	str	r8, [sp, #24]
   30130:	ldr	r1, [sp, #56]	; 0x38
   30134:	and	r2, r2, sl
   30138:	and	r3, r3, fp
   3013c:	ldr	fp, [pc, #880]	; 304b4 <__assert_fail@plt+0x1dec0>
   30140:	strd	r2, [sp, #32]
   30144:	ldrd	r2, [sp, #24]
   30148:	mov	sl, #0
   3014c:	lsr	ip, r1, #20
   30150:	and	sl, sl, r2
   30154:	and	fp, fp, r3
   30158:	mov	r2, sl
   3015c:	mov	r3, fp
   30160:	ldrd	sl, [sp, #32]
   30164:	str	ip, [sp, #20]
   30168:	ldrb	ip, [r4, #24]
   3016c:	orr	sl, sl, r2
   30170:	orr	fp, fp, r3
   30174:	lsl	r3, r1, #12
   30178:	uxtb	r1, r1
   3017c:	orr	sl, sl, r1
   30180:	str	r3, [sp, #16]
   30184:	strd	sl, [sp, #32]
   30188:	add	r3, pc, #776	; 0x308
   3018c:	ldrd	r2, [r3]
   30190:	ldrd	sl, [sp, #16]
   30194:	orr	ip, ip, #4
   30198:	strb	ip, [r4, #24]
   3019c:	and	sl, sl, r2
   301a0:	and	fp, fp, r3
   301a4:	mov	r2, sl
   301a8:	mov	r3, fp
   301ac:	ldrd	sl, [sp, #32]
   301b0:	ldr	r1, [pc, #780]	; 304c4 <__assert_fail@plt+0x1ded0>
   301b4:	str	r0, [r4, #12]
   301b8:	orr	sl, sl, r2
   301bc:	orr	fp, fp, r3
   301c0:	mov	r2, sl
   301c4:	mov	r3, fp
   301c8:	mov	r6, r0
   301cc:	strd	r2, [r4, #16]
   301d0:	bl	11f40 <strcmp@plt>
   301d4:	cmp	r0, r8
   301d8:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   301dc:	ldr	r1, [pc, #740]	; 304c8 <__assert_fail@plt+0x1ded4>
   301e0:	mov	r0, r6
   301e4:	bl	11f40 <strcmp@plt>
   301e8:	cmp	r0, r8
   301ec:	bne	30278 <__assert_fail@plt+0x1dc84>
   301f0:	mov	r0, #1
   301f4:	ldrb	r3, [r4, #24]
   301f8:	ldr	r8, [r4]
   301fc:	mov	r1, #58	; 0x3a
   30200:	bic	r3, r3, #1
   30204:	orr	r3, r0, r3
   30208:	strb	r3, [r4, #24]
   3020c:	mov	r0, r8
   30210:	bl	1230c <strchr@plt>
   30214:	cmp	r0, #0
   30218:	beq	3036c <__assert_fail@plt+0x1dd78>
   3021c:	mov	r3, #1
   30220:	ldrb	r0, [r4, #24]
   30224:	bic	r0, r0, #2
   30228:	orr	r0, r0, r3, lsl #1
   3022c:	strb	r0, [r4, #24]
   30230:	str	r4, [r5]
   30234:	add	r5, r4, #28
   30238:	b	2ffd4 <__assert_fail@plt+0x1d9e0>
   3023c:	ldr	r0, [sp, #44]	; 0x2c
   30240:	bl	2db68 <__assert_fail@plt+0x1b574>
   30244:	ldr	r3, [r7]
   30248:	mov	sl, r5
   3024c:	tst	r3, #32
   30250:	bne	30444 <__assert_fail@plt+0x1de50>
   30254:	mov	r0, r7
   30258:	bl	123fc <fclose@plt>
   3025c:	cmn	r0, #1
   30260:	beq	30814 <__assert_fail@plt+0x1e220>
   30264:	mov	r3, #0
   30268:	str	r3, [sl]
   3026c:	ldr	r0, [sp, #40]	; 0x28
   30270:	add	sp, sp, #68	; 0x44
   30274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30278:	ldr	r1, [pc, #588]	; 304cc <__assert_fail@plt+0x1ded8>
   3027c:	mov	r0, r6
   30280:	bl	11f40 <strcmp@plt>
   30284:	cmp	r0, r8
   30288:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   3028c:	ldr	r1, [pc, #572]	; 304d0 <__assert_fail@plt+0x1dedc>
   30290:	mov	r0, r6
   30294:	bl	11f40 <strcmp@plt>
   30298:	cmp	r0, r8
   3029c:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   302a0:	ldr	r1, [pc, #556]	; 304d4 <__assert_fail@plt+0x1dee0>
   302a4:	mov	r0, r6
   302a8:	bl	11f40 <strcmp@plt>
   302ac:	cmp	r0, r8
   302b0:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   302b4:	ldr	r1, [pc, #540]	; 304d8 <__assert_fail@plt+0x1dee4>
   302b8:	mov	r0, r6
   302bc:	bl	11f40 <strcmp@plt>
   302c0:	cmp	r0, r8
   302c4:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   302c8:	ldr	r1, [pc, #524]	; 304dc <__assert_fail@plt+0x1dee8>
   302cc:	mov	r0, r6
   302d0:	bl	11f40 <strcmp@plt>
   302d4:	cmp	r0, r8
   302d8:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   302dc:	ldr	r1, [pc, #508]	; 304e0 <__assert_fail@plt+0x1deec>
   302e0:	mov	r0, r6
   302e4:	bl	11f40 <strcmp@plt>
   302e8:	cmp	r0, r8
   302ec:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   302f0:	ldr	r1, [pc, #492]	; 304e4 <__assert_fail@plt+0x1def0>
   302f4:	mov	r0, r6
   302f8:	bl	11f40 <strcmp@plt>
   302fc:	cmp	r0, r8
   30300:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   30304:	ldr	r1, [pc, #476]	; 304e8 <__assert_fail@plt+0x1def4>
   30308:	mov	r0, r6
   3030c:	bl	11f40 <strcmp@plt>
   30310:	cmp	r0, r8
   30314:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   30318:	ldr	r1, [pc, #460]	; 304ec <__assert_fail@plt+0x1def8>
   3031c:	mov	r0, r6
   30320:	bl	11f40 <strcmp@plt>
   30324:	cmp	r0, r8
   30328:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   3032c:	ldr	r1, [pc, #444]	; 304f0 <__assert_fail@plt+0x1defc>
   30330:	mov	r0, r6
   30334:	bl	11f40 <strcmp@plt>
   30338:	cmp	r0, r8
   3033c:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   30340:	ldr	r1, [pc, #428]	; 304f4 <__assert_fail@plt+0x1df00>
   30344:	mov	r0, r6
   30348:	bl	11f40 <strcmp@plt>
   3034c:	cmp	r0, r8
   30350:	beq	301f0 <__assert_fail@plt+0x1dbfc>
   30354:	ldr	r1, [pc, #412]	; 304f8 <__assert_fail@plt+0x1df04>
   30358:	mov	r0, r6
   3035c:	bl	11f40 <strcmp@plt>
   30360:	clz	r0, r0
   30364:	lsr	r0, r0, #5
   30368:	b	301f4 <__assert_fail@plt+0x1dc00>
   3036c:	ldrb	r3, [r8]
   30370:	cmp	r3, #47	; 0x2f
   30374:	beq	30824 <__assert_fail@plt+0x1e230>
   30378:	ldr	r1, [pc, #380]	; 304fc <__assert_fail@plt+0x1df08>
   3037c:	mov	r0, r6
   30380:	bl	11f40 <strcmp@plt>
   30384:	cmp	r0, #0
   30388:	beq	3021c <__assert_fail@plt+0x1dc28>
   3038c:	ldr	r1, [pc, #364]	; 30500 <__assert_fail@plt+0x1df0c>
   30390:	mov	r0, r6
   30394:	bl	11f40 <strcmp@plt>
   30398:	cmp	r0, #0
   3039c:	beq	3021c <__assert_fail@plt+0x1dc28>
   303a0:	ldr	r1, [pc, #348]	; 30504 <__assert_fail@plt+0x1df10>
   303a4:	mov	r0, r6
   303a8:	bl	11f40 <strcmp@plt>
   303ac:	cmp	r0, #0
   303b0:	beq	3021c <__assert_fail@plt+0x1dc28>
   303b4:	ldr	r1, [pc, #332]	; 30508 <__assert_fail@plt+0x1df14>
   303b8:	mov	r0, r6
   303bc:	bl	11f40 <strcmp@plt>
   303c0:	cmp	r0, #0
   303c4:	beq	3021c <__assert_fail@plt+0x1dc28>
   303c8:	ldr	r1, [pc, #316]	; 3050c <__assert_fail@plt+0x1df18>
   303cc:	mov	r0, r6
   303d0:	bl	11f40 <strcmp@plt>
   303d4:	cmp	r0, #0
   303d8:	beq	3021c <__assert_fail@plt+0x1dc28>
   303dc:	ldr	r1, [pc, #300]	; 30510 <__assert_fail@plt+0x1df1c>
   303e0:	mov	r0, r6
   303e4:	bl	11f40 <strcmp@plt>
   303e8:	cmp	r0, #0
   303ec:	beq	3021c <__assert_fail@plt+0x1dc28>
   303f0:	ldr	r1, [pc, #284]	; 30514 <__assert_fail@plt+0x1df20>
   303f4:	mov	r0, r6
   303f8:	bl	11f40 <strcmp@plt>
   303fc:	cmp	r0, #0
   30400:	beq	3021c <__assert_fail@plt+0x1dc28>
   30404:	ldr	r1, [pc, #268]	; 30518 <__assert_fail@plt+0x1df24>
   30408:	mov	r0, r6
   3040c:	bl	11f40 <strcmp@plt>
   30410:	cmp	r0, #0
   30414:	beq	3021c <__assert_fail@plt+0x1dc28>
   30418:	mov	r0, r6
   3041c:	ldr	r1, [pc, #248]	; 3051c <__assert_fail@plt+0x1df28>
   30420:	bl	11f40 <strcmp@plt>
   30424:	cmp	r0, #0
   30428:	beq	3021c <__assert_fail@plt+0x1dc28>
   3042c:	mov	r1, r8
   30430:	ldr	r0, [pc, #232]	; 30520 <__assert_fail@plt+0x1df2c>
   30434:	bl	11f40 <strcmp@plt>
   30438:	clz	r3, r0
   3043c:	lsr	r3, r3, #5
   30440:	b	30220 <__assert_fail@plt+0x1dc2c>
   30444:	bl	12348 <__errno_location@plt>
   30448:	mov	r5, r0
   3044c:	mov	r0, r7
   30450:	ldr	r6, [r5]
   30454:	bl	123fc <fclose@plt>
   30458:	str	r6, [r5]
   3045c:	mov	r3, #0
   30460:	str	r3, [sl]
   30464:	ldr	r0, [sp, #40]	; 0x28
   30468:	cmp	r0, r3
   3046c:	beq	30484 <__assert_fail@plt+0x1de90>
   30470:	ldr	r4, [r0, #28]
   30474:	bl	2ff60 <__assert_fail@plt+0x1d96c>
   30478:	subs	r0, r4, #0
   3047c:	str	r4, [sp, #40]	; 0x28
   30480:	bne	30470 <__assert_fail@plt+0x1de7c>
   30484:	mov	r0, #0
   30488:	str	r6, [r5]
   3048c:	add	sp, sp, #68	; 0x44
   30490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30494:	nop			; (mov r0, r0)
   30498:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   3049c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   304a0:	ldrdeq	r2, [r4], -r0
   304a4:	andeq	r5, r4, r8, lsr #28
   304a8:	andeq	r5, r4, r0, asr #28
   304ac:	andeq	r5, r4, r4, asr lr
   304b0:	andeq	pc, pc, r0, lsl #30
   304b4:			; <UNDEFINED> instruction: 0xfffff000
   304b8:	andeq	r6, r4, r0, lsr r1
   304bc:	andeq	r5, r4, ip, lsr #30
   304c0:	andeq	r5, r4, r8, lsr pc
   304c4:	andeq	r5, r4, r8, asr lr
   304c8:	andeq	r5, r4, r0, ror #28
   304cc:	andeq	r5, r4, r8, ror #28
   304d0:	andeq	r5, r4, r0, ror lr
   304d4:	andeq	r5, r4, r8, ror lr
   304d8:	andeq	r5, r4, r0, lsl #29
   304dc:	andeq	r5, r4, r8, lsl #29
   304e0:	muleq	r4, r4, lr
   304e4:	muleq	r4, ip, lr
   304e8:	andeq	r5, r4, r8, lsr #29
   304ec:			; <UNDEFINED> instruction: 0x00045eb0
   304f0:			; <UNDEFINED> instruction: 0x00045eb8
   304f4:	andeq	r2, r4, ip, asr #21
   304f8:	andeq	r5, r4, r0, asr #29
   304fc:	andeq	r5, r4, r0, ror #29
   30500:	ldrdeq	r2, [r4], -r4
   30504:	andeq	r5, r4, r8, ror #29
   30508:	strdeq	r5, [r4], -r0
   3050c:	strdeq	r5, [r4], -ip
   30510:	andeq	r5, r4, r4, lsl #30
   30514:	andeq	r5, r4, ip, lsl #30
   30518:	andeq	r5, r4, r4, lsl pc
   3051c:	andeq	r5, r4, ip, lsl pc
   30520:	andeq	r5, r4, r4, lsr #30
   30524:	andeq	r5, r4, r8, asr #29
   30528:	ldrdeq	r5, [r4], -r0
   3052c:	ldrdeq	r5, [r4], -r8
   30530:	ldr	r1, [pc, #-128]	; 304b8 <__assert_fail@plt+0x1dec4>
   30534:	ldr	r0, [pc, #-128]	; 304bc <__assert_fail@plt+0x1dec8>
   30538:	bl	12534 <setmntent@plt>
   3053c:	subs	r5, r0, #0
   30540:	beq	308bc <__assert_fail@plt+0x1e2c8>
   30544:	ldr	r8, [pc, #-140]	; 304c0 <__assert_fail@plt+0x1decc>
   30548:	ldr	r7, [pc, #-140]	; 304c4 <__assert_fail@plt+0x1ded0>
   3054c:	ldr	r9, [pc, #-140]	; 304c8 <__assert_fail@plt+0x1ded4>
   30550:	add	sl, sp, #40	; 0x28
   30554:	mov	r0, r5
   30558:	bl	121f8 <getmntent@plt>
   3055c:	subs	r6, r0, #0
   30560:	beq	30804 <__assert_fail@plt+0x1e210>
   30564:	mov	r1, r8
   30568:	bl	121a4 <hasmntopt@plt>
   3056c:	mov	fp, r0
   30570:	mov	r0, #32
   30574:	bl	2c184 <__assert_fail@plt+0x19b90>
   30578:	mov	r4, r0
   3057c:	ldr	r0, [r6]
   30580:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   30584:	str	r0, [r4]
   30588:	ldr	r0, [r6, #4]
   3058c:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   30590:	mov	r3, #0
   30594:	stmib	r4, {r0, r3}
   30598:	ldr	r0, [r6, #8]
   3059c:	bl	2c6b0 <__assert_fail@plt+0x1a0bc>
   305a0:	ldrb	r3, [r4, #24]
   305a4:	mov	r1, r7
   305a8:	orr	r3, r3, #4
   305ac:	strb	r3, [r4, #24]
   305b0:	str	r0, [r4, #12]
   305b4:	mov	r6, r0
   305b8:	bl	11f40 <strcmp@plt>
   305bc:	cmp	r0, #0
   305c0:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   305c4:	mov	r1, r9
   305c8:	mov	r0, r6
   305cc:	bl	11f40 <strcmp@plt>
   305d0:	cmp	r0, #0
   305d4:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   305d8:	ldr	r1, [pc, #-276]	; 304cc <__assert_fail@plt+0x1ded8>
   305dc:	mov	r0, r6
   305e0:	bl	11f40 <strcmp@plt>
   305e4:	cmp	r0, #0
   305e8:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   305ec:	ldr	r1, [pc, #-292]	; 304d0 <__assert_fail@plt+0x1dedc>
   305f0:	mov	r0, r6
   305f4:	bl	11f40 <strcmp@plt>
   305f8:	cmp	r0, #0
   305fc:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   30600:	ldr	r1, [pc, #-308]	; 304d4 <__assert_fail@plt+0x1dee0>
   30604:	mov	r0, r6
   30608:	bl	11f40 <strcmp@plt>
   3060c:	cmp	r0, #0
   30610:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   30614:	ldr	r1, [pc, #-324]	; 304d8 <__assert_fail@plt+0x1dee4>
   30618:	mov	r0, r6
   3061c:	bl	11f40 <strcmp@plt>
   30620:	cmp	r0, #0
   30624:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   30628:	ldr	r1, [pc, #-340]	; 304dc <__assert_fail@plt+0x1dee8>
   3062c:	mov	r0, r6
   30630:	bl	11f40 <strcmp@plt>
   30634:	cmp	r0, #0
   30638:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   3063c:	ldr	r1, [pc, #-356]	; 304e0 <__assert_fail@plt+0x1deec>
   30640:	mov	r0, r6
   30644:	bl	11f40 <strcmp@plt>
   30648:	cmp	r0, #0
   3064c:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   30650:	ldr	r1, [pc, #-372]	; 304e4 <__assert_fail@plt+0x1def0>
   30654:	mov	r0, r6
   30658:	bl	11f40 <strcmp@plt>
   3065c:	cmp	r0, #0
   30660:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   30664:	ldr	r1, [pc, #-388]	; 304e8 <__assert_fail@plt+0x1def4>
   30668:	mov	r0, r6
   3066c:	bl	11f40 <strcmp@plt>
   30670:	cmp	r0, #0
   30674:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   30678:	ldr	r1, [pc, #-404]	; 304ec <__assert_fail@plt+0x1def8>
   3067c:	mov	r0, r6
   30680:	bl	11f40 <strcmp@plt>
   30684:	cmp	r0, #0
   30688:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   3068c:	ldr	r1, [pc, #-420]	; 304f0 <__assert_fail@plt+0x1defc>
   30690:	mov	r0, r6
   30694:	bl	11f40 <strcmp@plt>
   30698:	cmp	r0, #0
   3069c:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   306a0:	ldr	r1, [pc, #-436]	; 304f4 <__assert_fail@plt+0x1df00>
   306a4:	mov	r0, r6
   306a8:	bl	11f40 <strcmp@plt>
   306ac:	cmp	r0, #0
   306b0:	beq	306d4 <__assert_fail@plt+0x1e0e0>
   306b4:	ldr	r1, [pc, #-452]	; 304f8 <__assert_fail@plt+0x1df04>
   306b8:	mov	r0, r6
   306bc:	bl	11f40 <strcmp@plt>
   306c0:	cmp	r0, #0
   306c4:	cmpeq	fp, #0
   306c8:	moveq	r0, #1
   306cc:	movne	r0, #0
   306d0:	b	306d8 <__assert_fail@plt+0x1e0e4>
   306d4:	mov	r0, #1
   306d8:	ldrb	r3, [r4, #24]
   306dc:	ldr	fp, [r4]
   306e0:	mov	r1, #58	; 0x3a
   306e4:	bic	r3, r3, #1
   306e8:	orr	r3, r0, r3
   306ec:	strb	r3, [r4, #24]
   306f0:	mov	r0, fp
   306f4:	bl	1230c <strchr@plt>
   306f8:	cmp	r0, #0
   306fc:	beq	3072c <__assert_fail@plt+0x1e138>
   30700:	mov	r1, #1
   30704:	ldrb	r0, [r4, #24]
   30708:	mvn	r2, #0
   3070c:	mvn	r3, #0
   30710:	bic	r0, r0, #2
   30714:	orr	r0, r0, r1, lsl #1
   30718:	strb	r0, [r4, #24]
   3071c:	strd	r2, [r4, #16]
   30720:	str	r4, [sl]
   30724:	add	sl, r4, #28
   30728:	b	30554 <__assert_fail@plt+0x1df60>
   3072c:	ldrb	r3, [fp]
   30730:	cmp	r3, #47	; 0x2f
   30734:	beq	30870 <__assert_fail@plt+0x1e27c>
   30738:	ldr	r1, [pc, #-580]	; 304fc <__assert_fail@plt+0x1df08>
   3073c:	mov	r0, r6
   30740:	bl	11f40 <strcmp@plt>
   30744:	cmp	r0, #0
   30748:	beq	30700 <__assert_fail@plt+0x1e10c>
   3074c:	ldr	r1, [pc, #-596]	; 30500 <__assert_fail@plt+0x1df0c>
   30750:	mov	r0, r6
   30754:	bl	11f40 <strcmp@plt>
   30758:	cmp	r0, #0
   3075c:	beq	30700 <__assert_fail@plt+0x1e10c>
   30760:	ldr	r1, [pc, #-612]	; 30504 <__assert_fail@plt+0x1df10>
   30764:	mov	r0, r6
   30768:	bl	11f40 <strcmp@plt>
   3076c:	cmp	r0, #0
   30770:	beq	30700 <__assert_fail@plt+0x1e10c>
   30774:	ldr	r1, [pc, #-628]	; 30508 <__assert_fail@plt+0x1df14>
   30778:	mov	r0, r6
   3077c:	bl	11f40 <strcmp@plt>
   30780:	cmp	r0, #0
   30784:	beq	30700 <__assert_fail@plt+0x1e10c>
   30788:	ldr	r1, [pc, #-644]	; 3050c <__assert_fail@plt+0x1df18>
   3078c:	mov	r0, r6
   30790:	bl	11f40 <strcmp@plt>
   30794:	cmp	r0, #0
   30798:	beq	30700 <__assert_fail@plt+0x1e10c>
   3079c:	ldr	r1, [pc, #-660]	; 30510 <__assert_fail@plt+0x1df1c>
   307a0:	mov	r0, r6
   307a4:	bl	11f40 <strcmp@plt>
   307a8:	cmp	r0, #0
   307ac:	beq	30700 <__assert_fail@plt+0x1e10c>
   307b0:	ldr	r1, [pc, #-676]	; 30514 <__assert_fail@plt+0x1df20>
   307b4:	mov	r0, r6
   307b8:	bl	11f40 <strcmp@plt>
   307bc:	cmp	r0, #0
   307c0:	beq	30700 <__assert_fail@plt+0x1e10c>
   307c4:	ldr	r1, [pc, #-692]	; 30518 <__assert_fail@plt+0x1df24>
   307c8:	mov	r0, r6
   307cc:	bl	11f40 <strcmp@plt>
   307d0:	cmp	r0, #0
   307d4:	beq	30700 <__assert_fail@plt+0x1e10c>
   307d8:	mov	r0, r6
   307dc:	ldr	r1, [pc, #-712]	; 3051c <__assert_fail@plt+0x1df28>
   307e0:	bl	11f40 <strcmp@plt>
   307e4:	cmp	r0, #0
   307e8:	beq	30700 <__assert_fail@plt+0x1e10c>
   307ec:	mov	r1, fp
   307f0:	ldr	r0, [pc, #-728]	; 30520 <__assert_fail@plt+0x1df2c>
   307f4:	bl	11f40 <strcmp@plt>
   307f8:	clz	r1, r0
   307fc:	lsr	r1, r1, #5
   30800:	b	30704 <__assert_fail@plt+0x1e110>
   30804:	mov	r0, r5
   30808:	bl	12420 <endmntent@plt>
   3080c:	cmp	r0, #0
   30810:	bne	30264 <__assert_fail@plt+0x1dc70>
   30814:	bl	12348 <__errno_location@plt>
   30818:	mov	r5, r0
   3081c:	ldr	r6, [r0]
   30820:	b	3045c <__assert_fail@plt+0x1de68>
   30824:	ldrb	r3, [r8, #1]
   30828:	cmp	r3, #47	; 0x2f
   3082c:	bne	30378 <__assert_fail@plt+0x1dd84>
   30830:	ldr	r1, [pc, #-788]	; 30524 <__assert_fail@plt+0x1df30>
   30834:	mov	r0, r6
   30838:	bl	11f40 <strcmp@plt>
   3083c:	cmp	r0, #0
   30840:	beq	3021c <__assert_fail@plt+0x1dc28>
   30844:	ldr	r1, [pc, #-804]	; 30528 <__assert_fail@plt+0x1df34>
   30848:	mov	r0, r6
   3084c:	bl	11f40 <strcmp@plt>
   30850:	cmp	r0, #0
   30854:	beq	3021c <__assert_fail@plt+0x1dc28>
   30858:	ldr	r1, [pc, #-820]	; 3052c <__assert_fail@plt+0x1df38>
   3085c:	mov	r0, r6
   30860:	bl	11f40 <strcmp@plt>
   30864:	cmp	r0, #0
   30868:	beq	3021c <__assert_fail@plt+0x1dc28>
   3086c:	b	30378 <__assert_fail@plt+0x1dd84>
   30870:	ldrb	r3, [fp, #1]
   30874:	cmp	r3, #47	; 0x2f
   30878:	bne	30738 <__assert_fail@plt+0x1e144>
   3087c:	ldr	r1, [pc, #-864]	; 30524 <__assert_fail@plt+0x1df30>
   30880:	mov	r0, r6
   30884:	bl	11f40 <strcmp@plt>
   30888:	cmp	r0, #0
   3088c:	beq	30700 <__assert_fail@plt+0x1e10c>
   30890:	ldr	r1, [pc, #-880]	; 30528 <__assert_fail@plt+0x1df34>
   30894:	mov	r0, r6
   30898:	bl	11f40 <strcmp@plt>
   3089c:	cmp	r0, #0
   308a0:	beq	30700 <__assert_fail@plt+0x1e10c>
   308a4:	ldr	r1, [pc, #-896]	; 3052c <__assert_fail@plt+0x1df38>
   308a8:	mov	r0, r6
   308ac:	bl	11f40 <strcmp@plt>
   308b0:	cmp	r0, #0
   308b4:	beq	30700 <__assert_fail@plt+0x1e10c>
   308b8:	b	30738 <__assert_fail@plt+0x1e144>
   308bc:	mov	r0, r5
   308c0:	b	30270 <__assert_fail@plt+0x1dc7c>
   308c4:	cmp	r0, #0
   308c8:	beq	308ec <__assert_fail@plt+0x1e2f8>
   308cc:	cmp	r1, #0
   308d0:	push	{lr}		; (str lr, [sp, #-4]!)
   308d4:	sub	sp, sp, #12
   308d8:	beq	308f4 <__assert_fail@plt+0x1e300>
   308dc:	blt	3090c <__assert_fail@plt+0x1e318>
   308e0:	add	sp, sp, #12
   308e4:	pop	{lr}		; (ldr lr, [sp], #4)
   308e8:	b	120e4 <realloc@plt>
   308ec:	mov	r0, r1
   308f0:	b	2fe38 <__assert_fail@plt+0x1d844>
   308f4:	str	r1, [sp, #4]
   308f8:	bl	2db68 <__assert_fail@plt+0x1b574>
   308fc:	ldr	r3, [sp, #4]
   30900:	mov	r0, r3
   30904:	add	sp, sp, #12
   30908:	pop	{pc}		; (ldr pc, [sp], #4)
   3090c:	bl	12348 <__errno_location@plt>
   30910:	mov	r2, #12
   30914:	mov	r3, #0
   30918:	str	r2, [r0]
   3091c:	b	30900 <__assert_fail@plt+0x1e30c>
   30920:	push	{r4, r5, r6, lr}
   30924:	subs	r4, r2, #0
   30928:	mov	r6, r0
   3092c:	mov	r5, r1
   30930:	beq	3095c <__assert_fail@plt+0x1e368>
   30934:	mov	r1, r4
   30938:	mvn	r0, #0
   3093c:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   30940:	cmp	r0, r5
   30944:	bcs	3095c <__assert_fail@plt+0x1e368>
   30948:	bl	12348 <__errno_location@plt>
   3094c:	mov	r3, #12
   30950:	str	r3, [r0]
   30954:	mov	r0, #0
   30958:	pop	{r4, r5, r6, pc}
   3095c:	mul	r1, r5, r4
   30960:	mov	r0, r6
   30964:	pop	{r4, r5, r6, lr}
   30968:	b	308c4 <__assert_fail@plt+0x1e2d0>
   3096c:	mov	ip, r0
   30970:	ldr	r3, [r1, #40]	; 0x28
   30974:	ldr	r0, [r1, #56]	; 0x38
   30978:	cmp	r0, r3
   3097c:	ble	309f0 <__assert_fail@plt+0x1e3fc>
   30980:	push	{r4, lr}
   30984:	ldr	lr, [r1, #4]
   30988:	ldrb	r0, [lr, r3]
   3098c:	strb	r0, [ip]
   30990:	ldr	r4, [r1, #80]	; 0x50
   30994:	cmp	r4, #1
   30998:	ble	309b8 <__assert_fail@plt+0x1e3c4>
   3099c:	ldr	r4, [r1, #28]
   309a0:	cmp	r3, r4
   309a4:	beq	309b8 <__assert_fail@plt+0x1e3c4>
   309a8:	ldr	r4, [r1, #8]
   309ac:	ldr	r4, [r4, r3, lsl #2]
   309b0:	cmn	r4, #1
   309b4:	beq	30a38 <__assert_fail@plt+0x1e444>
   309b8:	cmp	r0, #92	; 0x5c
   309bc:	beq	30a00 <__assert_fail@plt+0x1e40c>
   309c0:	cmp	r0, #91	; 0x5b
   309c4:	beq	30a44 <__assert_fail@plt+0x1e450>
   309c8:	cmp	r0, #93	; 0x5d
   309cc:	beq	30a28 <__assert_fail@plt+0x1e434>
   309d0:	cmp	r0, #94	; 0x5e
   309d4:	beq	30a68 <__assert_fail@plt+0x1e474>
   309d8:	cmp	r0, #45	; 0x2d
   309dc:	bne	30a18 <__assert_fail@plt+0x1e424>
   309e0:	mov	r3, #22
   309e4:	strb	r3, [ip, #4]
   309e8:	mov	r0, #1
   309ec:	pop	{r4, pc}
   309f0:	mov	r3, #2
   309f4:	strb	r3, [ip, #4]
   309f8:	mov	r0, #0
   309fc:	bx	lr
   30a00:	tst	r2, #1
   30a04:	beq	30a18 <__assert_fail@plt+0x1e424>
   30a08:	ldr	r2, [r1, #48]	; 0x30
   30a0c:	add	r3, r3, #1
   30a10:	cmp	r3, r2
   30a14:	blt	30aac <__assert_fail@plt+0x1e4b8>
   30a18:	mov	r3, #1
   30a1c:	mov	r0, r3
   30a20:	strb	r3, [ip, #4]
   30a24:	pop	{r4, pc}
   30a28:	mov	r3, #21
   30a2c:	strb	r3, [ip, #4]
   30a30:	mov	r0, #1
   30a34:	pop	{r4, pc}
   30a38:	mov	r0, #1
   30a3c:	strb	r0, [ip, #4]
   30a40:	pop	{r4, pc}
   30a44:	ldr	r1, [r1, #48]	; 0x30
   30a48:	add	r0, r3, #1
   30a4c:	cmp	r0, r1
   30a50:	blt	30a78 <__assert_fail@plt+0x1e484>
   30a54:	mov	r0, #1
   30a58:	mov	r3, #91	; 0x5b
   30a5c:	strb	r0, [ip, #4]
   30a60:	strb	r3, [ip]
   30a64:	pop	{r4, pc}
   30a68:	mov	r3, #25
   30a6c:	strb	r3, [ip, #4]
   30a70:	mov	r0, #1
   30a74:	pop	{r4, pc}
   30a78:	add	r3, lr, r3
   30a7c:	ldrb	r3, [r3, #1]
   30a80:	cmp	r3, #58	; 0x3a
   30a84:	strb	r3, [ip]
   30a88:	beq	30ac4 <__assert_fail@plt+0x1e4d0>
   30a8c:	cmp	r3, #61	; 0x3d
   30a90:	beq	30adc <__assert_fail@plt+0x1e4e8>
   30a94:	cmp	r3, #46	; 0x2e
   30a98:	bne	30a54 <__assert_fail@plt+0x1e460>
   30a9c:	mov	r3, #26
   30aa0:	strb	r3, [ip, #4]
   30aa4:	mov	r0, #2
   30aa8:	pop	{r4, pc}
   30aac:	str	r3, [r1, #40]	; 0x28
   30ab0:	ldrb	r3, [lr, r3]
   30ab4:	mov	r0, #1
   30ab8:	strb	r0, [ip, #4]
   30abc:	strb	r3, [ip]
   30ac0:	pop	{r4, pc}
   30ac4:	tst	r2, #4
   30ac8:	beq	30a54 <__assert_fail@plt+0x1e460>
   30acc:	mov	r3, #30
   30ad0:	strb	r3, [ip, #4]
   30ad4:	mov	r0, #2
   30ad8:	pop	{r4, pc}
   30adc:	mov	r3, #28
   30ae0:	strb	r3, [ip, #4]
   30ae4:	mov	r0, #2
   30ae8:	pop	{r4, pc}
   30aec:	ldrb	r3, [r1, #24]
   30af0:	cmp	r3, #17
   30af4:	bne	30b0c <__assert_fail@plt+0x1e518>
   30af8:	ldr	r3, [r1, #20]
   30afc:	cmp	r0, r3
   30b00:	ldrbeq	r3, [r1, #26]
   30b04:	orreq	r3, r3, #8
   30b08:	strbeq	r3, [r1, #26]
   30b0c:	mov	r0, #0
   30b10:	bx	lr
   30b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30b18:	sub	sp, sp, #52	; 0x34
   30b1c:	ldr	r8, [r0, #84]	; 0x54
   30b20:	str	r3, [sp, #40]	; 0x28
   30b24:	add	r3, r3, r3, lsl #1
   30b28:	ldr	fp, [r8, #24]
   30b2c:	str	r1, [sp, #24]
   30b30:	add	fp, fp, r3, lsl #2
   30b34:	ldr	r1, [fp, #4]
   30b38:	cmp	r1, #0
   30b3c:	ble	30cdc <__assert_fail@plt+0x1e6e8>
   30b40:	ldr	r3, [sp, #88]	; 0x58
   30b44:	mov	r6, r2
   30b48:	mov	r2, #1
   30b4c:	mov	sl, r0
   30b50:	add	r3, r3, r3, lsl r2
   30b54:	lsl	r2, r2, r6
   30b58:	lsl	r3, r3, #3
   30b5c:	add	r3, r3, #24
   30b60:	str	r3, [sp, #44]	; 0x2c
   30b64:	ldr	r3, [sp, #24]
   30b68:	str	r2, [sp, #16]
   30b6c:	mvn	r2, r2
   30b70:	str	r2, [sp, #20]
   30b74:	and	r2, r3, #1
   30b78:	and	r3, r3, #2
   30b7c:	mov	r7, #0
   30b80:	str	r2, [sp, #28]
   30b84:	str	r3, [sp, #12]
   30b88:	b	30ba8 <__assert_fail@plt+0x1e5b4>
   30b8c:	cmp	r3, #9
   30b90:	beq	30cf0 <__assert_fail@plt+0x1e6fc>
   30b94:	cmp	r3, #4
   30b98:	beq	30be8 <__assert_fail@plt+0x1e5f4>
   30b9c:	add	r7, r7, #1
   30ba0:	cmp	r1, r7
   30ba4:	ble	30cdc <__assert_fail@plt+0x1e6e8>
   30ba8:	ldr	r3, [fp, #8]
   30bac:	ldr	r2, [r8]
   30bb0:	ldr	r5, [r3, r7, lsl #2]
   30bb4:	add	r3, r2, r5, lsl #3
   30bb8:	ldrb	r3, [r3, #4]
   30bbc:	cmp	r3, #8
   30bc0:	bne	30b8c <__assert_fail@plt+0x1e598>
   30bc4:	ldr	r3, [sp, #28]
   30bc8:	cmp	r3, #0
   30bcc:	beq	30b9c <__assert_fail@plt+0x1e5a8>
   30bd0:	ldr	r3, [r2, r5, lsl #3]
   30bd4:	cmp	r3, r6
   30bd8:	bne	30b9c <__assert_fail@plt+0x1e5a8>
   30bdc:	mvn	r0, #0
   30be0:	add	sp, sp, #52	; 0x34
   30be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30be8:	ldr	r3, [sp, #88]	; 0x58
   30bec:	cmn	r3, #1
   30bf0:	beq	30b9c <__assert_fail@plt+0x1e5a8>
   30bf4:	add	r9, r5, r5, lsl #1
   30bf8:	ldr	r4, [sl, #116]	; 0x74
   30bfc:	ldr	r3, [sp, #44]	; 0x2c
   30c00:	str	fp, [sp, #32]
   30c04:	str	r7, [sp, #36]	; 0x24
   30c08:	lsl	r9, r9, #2
   30c0c:	add	r4, r4, r3
   30c10:	ldr	fp, [sp, #24]
   30c14:	ldr	r7, [sp, #40]	; 0x28
   30c18:	b	30c2c <__assert_fail@plt+0x1e638>
   30c1c:	add	r4, r4, #24
   30c20:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   30c24:	cmp	r3, #0
   30c28:	beq	30cc4 <__assert_fail@plt+0x1e6d0>
   30c2c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   30c30:	cmp	r5, r3
   30c34:	bne	30c1c <__assert_fail@plt+0x1e628>
   30c38:	cmp	r6, #31
   30c3c:	mov	r2, r6
   30c40:	mov	r1, fp
   30c44:	mov	r0, sl
   30c48:	bgt	30c5c <__assert_fail@plt+0x1e668>
   30c4c:	ldr	r3, [r4, #-8]
   30c50:	ldr	ip, [sp, #16]
   30c54:	tst	ip, r3
   30c58:	beq	30c1c <__assert_fail@plt+0x1e628>
   30c5c:	ldr	r3, [r8, #20]
   30c60:	add	r3, r3, r9
   30c64:	ldr	r3, [r3, #8]
   30c68:	ldr	ip, [r3]
   30c6c:	cmp	r7, ip
   30c70:	mov	r3, ip
   30c74:	beq	30d14 <__assert_fail@plt+0x1e720>
   30c78:	ldr	ip, [sp, #88]	; 0x58
   30c7c:	str	ip, [sp]
   30c80:	bl	30b14 <__assert_fail@plt+0x1e520>
   30c84:	cmn	r0, #1
   30c88:	beq	30bdc <__assert_fail@plt+0x1e5e8>
   30c8c:	cmp	r0, #0
   30c90:	bne	30ca0 <__assert_fail@plt+0x1e6ac>
   30c94:	ldr	r3, [sp, #12]
   30c98:	cmp	r3, #0
   30c9c:	bne	30d08 <__assert_fail@plt+0x1e714>
   30ca0:	cmp	r6, #31
   30ca4:	add	r4, r4, #24
   30ca8:	ldrle	r3, [r4, #-32]	; 0xffffffe0
   30cac:	ldrle	r2, [sp, #20]
   30cb0:	andle	r3, r3, r2
   30cb4:	strle	r3, [r4, #-32]	; 0xffffffe0
   30cb8:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   30cbc:	cmp	r3, #0
   30cc0:	bne	30c2c <__assert_fail@plt+0x1e638>
   30cc4:	ldr	fp, [sp, #32]
   30cc8:	ldr	r7, [sp, #36]	; 0x24
   30ccc:	ldr	r1, [fp, #4]
   30cd0:	add	r7, r7, #1
   30cd4:	cmp	r1, r7
   30cd8:	bgt	30ba8 <__assert_fail@plt+0x1e5b4>
   30cdc:	ldr	r3, [sp, #24]
   30ce0:	lsr	r0, r3, #1
   30ce4:	and	r0, r0, #1
   30ce8:	add	sp, sp, #52	; 0x34
   30cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30cf0:	ldr	r3, [sp, #12]
   30cf4:	cmp	r3, #0
   30cf8:	beq	30b9c <__assert_fail@plt+0x1e5a8>
   30cfc:	ldr	r3, [r2, r5, lsl #3]
   30d00:	cmp	r6, r3
   30d04:	bne	30b9c <__assert_fail@plt+0x1e5a8>
   30d08:	mov	r0, #0
   30d0c:	add	sp, sp, #52	; 0x34
   30d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d14:	ldr	r3, [sp, #24]
   30d18:	ands	r0, r3, #1
   30d1c:	mvnne	r0, #0
   30d20:	add	sp, sp, #52	; 0x34
   30d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d28:	add	r1, r1, r1, lsl #1
   30d2c:	ldr	ip, [r0, #116]	; 0x74
   30d30:	push	{r4, lr}
   30d34:	add	ip, ip, r1, lsl #3
   30d38:	ldr	lr, [sp, #8]
   30d3c:	ldr	r1, [ip, #8]
   30d40:	ldr	r4, [sp, #12]
   30d44:	cmp	r1, lr
   30d48:	bgt	30d98 <__assert_fail@plt+0x1e7a4>
   30d4c:	ldr	ip, [ip, #12]
   30d50:	cmp	lr, ip
   30d54:	bgt	30d8c <__assert_fail@plt+0x1e798>
   30d58:	cmp	lr, ip
   30d5c:	moveq	ip, #2
   30d60:	movne	ip, #0
   30d64:	cmp	r1, lr
   30d68:	movne	r1, ip
   30d6c:	orreq	r1, ip, #1
   30d70:	cmp	r1, #0
   30d74:	bne	30d80 <__assert_fail@plt+0x1e78c>
   30d78:	mov	r0, r1
   30d7c:	pop	{r4, pc}
   30d80:	str	r4, [sp, #8]
   30d84:	pop	{r4, lr}
   30d88:	b	30b14 <__assert_fail@plt+0x1e520>
   30d8c:	mov	r1, #1
   30d90:	mov	r0, r1
   30d94:	pop	{r4, pc}
   30d98:	mvn	r1, #0
   30d9c:	b	30d78 <__assert_fail@plt+0x1e784>
   30da0:	push	{r4, r5, r6, lr}
   30da4:	mov	r4, r0
   30da8:	mov	r6, r1
   30dac:	mov	r5, r2
   30db0:	b	30db8 <__assert_fail@plt+0x1e7c4>
   30db4:	mov	r4, r3
   30db8:	ldr	r3, [r4, #4]
   30dbc:	cmp	r3, #0
   30dc0:	bne	30db4 <__assert_fail@plt+0x1e7c0>
   30dc4:	ldr	r3, [r4, #8]
   30dc8:	cmp	r3, #0
   30dcc:	bne	30db4 <__assert_fail@plt+0x1e7c0>
   30dd0:	mov	r1, r4
   30dd4:	mov	r0, r5
   30dd8:	blx	r6
   30ddc:	cmp	r0, #0
   30de0:	popne	{r4, r5, r6, pc}
   30de4:	ldr	r2, [r4]
   30de8:	cmp	r2, #0
   30dec:	popeq	{r4, r5, r6, pc}
   30df0:	ldr	r3, [r2, #8]
   30df4:	cmp	r4, r3
   30df8:	cmpne	r3, #0
   30dfc:	moveq	r4, #1
   30e00:	movne	r4, #0
   30e04:	cmp	r4, #0
   30e08:	mov	r4, r2
   30e0c:	bne	30dd0 <__assert_fail@plt+0x1e7dc>
   30e10:	b	30db4 <__assert_fail@plt+0x1e7c0>
   30e14:	push	{r4, r5, r6, r7, r8, lr}
   30e18:	mov	r4, r0
   30e1c:	mov	r6, r1
   30e20:	mov	r5, r2
   30e24:	mov	r7, #0
   30e28:	b	30e30 <__assert_fail@plt+0x1e83c>
   30e2c:	mov	r4, r3
   30e30:	mov	r1, r4
   30e34:	mov	r0, r5
   30e38:	blx	r6
   30e3c:	cmp	r0, #0
   30e40:	popne	{r4, r5, r6, r7, r8, pc}
   30e44:	ldr	r3, [r4, #4]
   30e48:	cmp	r3, #0
   30e4c:	moveq	r2, r7
   30e50:	bne	30e2c <__assert_fail@plt+0x1e838>
   30e54:	ldr	r3, [r4, #8]
   30e58:	cmp	r3, #0
   30e5c:	cmpne	r2, r3
   30e60:	bne	30e2c <__assert_fail@plt+0x1e838>
   30e64:	ldr	r3, [r4]
   30e68:	mov	r2, r4
   30e6c:	subs	r4, r3, #0
   30e70:	popeq	{r4, r5, r6, r7, r8, pc}
   30e74:	ldr	r3, [r4, #8]
   30e78:	cmp	r3, #0
   30e7c:	cmpne	r2, r3
   30e80:	beq	30e64 <__assert_fail@plt+0x1e870>
   30e84:	b	30e2c <__assert_fail@plt+0x1e838>
   30e88:	ldr	r3, [r0, #80]	; 0x50
   30e8c:	push	{r4, r5, r6, lr}
   30e90:	cmp	r3, #1
   30e94:	mov	r4, r0
   30e98:	mov	r5, r1
   30e9c:	ble	30ee4 <__assert_fail@plt+0x1e8f0>
   30ea0:	cmn	r1, #-1073741823	; 0xc0000001
   30ea4:	bhi	30f14 <__assert_fail@plt+0x1e920>
   30ea8:	lsl	r6, r1, #2
   30eac:	mov	r1, r6
   30eb0:	ldr	r0, [r0, #8]
   30eb4:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   30eb8:	subs	r3, r0, #0
   30ebc:	beq	30f14 <__assert_fail@plt+0x1e920>
   30ec0:	ldr	r0, [r4, #12]
   30ec4:	str	r3, [r4, #8]
   30ec8:	cmp	r0, #0
   30ecc:	beq	30ee4 <__assert_fail@plt+0x1e8f0>
   30ed0:	mov	r1, r6
   30ed4:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   30ed8:	cmp	r0, #0
   30edc:	beq	30f14 <__assert_fail@plt+0x1e920>
   30ee0:	str	r0, [r4, #12]
   30ee4:	ldrb	r3, [r4, #75]	; 0x4b
   30ee8:	cmp	r3, #0
   30eec:	bne	30efc <__assert_fail@plt+0x1e908>
   30ef0:	mov	r0, #0
   30ef4:	str	r5, [r4, #36]	; 0x24
   30ef8:	pop	{r4, r5, r6, pc}
   30efc:	mov	r1, r5
   30f00:	ldr	r0, [r4, #4]
   30f04:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   30f08:	cmp	r0, #0
   30f0c:	strne	r0, [r4, #4]
   30f10:	bne	30ef0 <__assert_fail@plt+0x1e8fc>
   30f14:	mov	r0, #12
   30f18:	pop	{r4, r5, r6, pc}
   30f1c:	push	{r4, r5, r6, lr}
   30f20:	mov	r5, r1
   30f24:	ldr	r3, [r0]
   30f28:	ldr	r1, [r0, #4]
   30f2c:	mov	r4, r0
   30f30:	cmp	r3, r1
   30f34:	beq	30f50 <__assert_fail@plt+0x1e95c>
   30f38:	ldr	r3, [r0, #8]
   30f3c:	add	r2, r1, #1
   30f40:	str	r2, [r4, #4]
   30f44:	mov	r0, #1
   30f48:	str	r5, [r3, r1, lsl #2]
   30f4c:	pop	{r4, r5, r6, pc}
   30f50:	add	r1, r1, #1
   30f54:	ldr	r0, [r0, #8]
   30f58:	lsl	r3, r1, #1
   30f5c:	str	r3, [r4]
   30f60:	lsl	r1, r1, #3
   30f64:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   30f68:	subs	r3, r0, #0
   30f6c:	ldrne	r1, [r4, #4]
   30f70:	strne	r3, [r4, #8]
   30f74:	bne	30f3c <__assert_fail@plt+0x1e948>
   30f78:	mov	r0, r3
   30f7c:	pop	{r4, r5, r6, pc}
   30f80:	ldr	r3, [r1, #8]
   30f84:	push	{r4, r5, r6, r7, r8, lr}
   30f88:	mov	r5, r1
   30f8c:	mov	r4, #0
   30f90:	str	r2, [r5], #16
   30f94:	mov	r8, r0
   30f98:	str	r3, [r1, #16]
   30f9c:	lsl	r0, r3, #2
   30fa0:	str	r4, [r1, #20]
   30fa4:	mov	r7, r1
   30fa8:	mov	r6, r2
   30fac:	bl	2fe38 <__assert_fail@plt+0x1d844>
   30fb0:	cmp	r0, r4
   30fb4:	str	r0, [r7, #24]
   30fb8:	beq	31054 <__assert_fail@plt+0x1ea60>
   30fbc:	ldr	r0, [r7, #8]
   30fc0:	cmp	r0, #0
   30fc4:	bgt	30fd8 <__assert_fail@plt+0x1e9e4>
   30fc8:	b	31014 <__assert_fail@plt+0x1ea20>
   30fcc:	add	r4, r4, #1
   30fd0:	cmp	r0, r4
   30fd4:	ble	31014 <__assert_fail@plt+0x1ea20>
   30fd8:	ldr	r2, [r7, #12]
   30fdc:	ldr	r3, [r8]
   30fe0:	ldr	r1, [r2, r4, lsl #2]
   30fe4:	add	r3, r3, r1, lsl #3
   30fe8:	ldrb	r3, [r3, #4]
   30fec:	tst	r3, #8
   30ff0:	bne	30fcc <__assert_fail@plt+0x1e9d8>
   30ff4:	mov	r0, r5
   30ff8:	bl	30f1c <__assert_fail@plt+0x1e928>
   30ffc:	cmp	r0, #0
   31000:	beq	31054 <__assert_fail@plt+0x1ea60>
   31004:	ldr	r0, [r7, #8]
   31008:	add	r4, r4, #1
   3100c:	cmp	r0, r4
   31010:	bgt	30fd8 <__assert_fail@plt+0x1e9e4>
   31014:	ldr	r4, [r8, #68]	; 0x44
   31018:	ldr	r5, [r8, #32]
   3101c:	and	r6, r6, r4
   31020:	add	r6, r6, r6, lsl #1
   31024:	lsl	r4, r6, #2
   31028:	add	r6, r5, r4
   3102c:	ldr	r3, [r5, r4]
   31030:	ldr	r2, [r6, #4]
   31034:	cmp	r2, r3
   31038:	ldrgt	r2, [r6, #8]
   3103c:	ble	3105c <__assert_fail@plt+0x1ea68>
   31040:	add	r1, r3, #1
   31044:	str	r1, [r5, r4]
   31048:	mov	r0, #0
   3104c:	str	r7, [r2, r3, lsl #2]
   31050:	pop	{r4, r5, r6, r7, r8, pc}
   31054:	mov	r0, #12
   31058:	pop	{r4, r5, r6, r7, r8, pc}
   3105c:	add	r3, r3, #1
   31060:	ldr	r0, [r6, #8]
   31064:	lsl	r1, r3, #3
   31068:	lsl	r8, r3, #1
   3106c:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31070:	subs	r2, r0, #0
   31074:	beq	31054 <__assert_fail@plt+0x1ea60>
   31078:	ldr	r3, [r5, r4]
   3107c:	str	r2, [r6, #8]
   31080:	str	r8, [r6, #4]
   31084:	b	31040 <__assert_fail@plt+0x1ea4c>
   31088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3108c:	mov	r5, r0
   31090:	ldr	r9, [r0, #36]	; 0x24
   31094:	ldr	r3, [r0, #48]	; 0x30
   31098:	ldr	r4, [r0, #28]
   3109c:	cmp	r9, r3
   310a0:	movge	r9, r3
   310a4:	cmp	r9, r4
   310a8:	sub	sp, sp, #84	; 0x54
   310ac:	ble	3114c <__assert_fail@plt+0x1eb58>
   310b0:	add	r7, r0, #16
   310b4:	add	r8, sp, #8
   310b8:	mov	sl, #1
   310bc:	mvn	r6, #0
   310c0:	ldm	r7, {r0, r1}
   310c4:	ldr	ip, [r5, #64]	; 0x40
   310c8:	sub	r2, r9, r4
   310cc:	cmp	ip, #0
   310d0:	stm	r8, {r0, r1}
   310d4:	bne	31190 <__assert_fail@plt+0x1eb9c>
   310d8:	ldr	r3, [r5, #24]
   310dc:	ldr	r1, [r5]
   310e0:	add	r3, r4, r3
   310e4:	add	r1, r1, r3
   310e8:	mov	r3, r7
   310ec:	add	r0, sp, #4
   310f0:	bl	2fe64 <__assert_fail@plt+0x1d870>
   310f4:	sub	r2, r0, #1
   310f8:	cmn	r2, #3
   310fc:	mov	r3, r0
   31100:	bhi	3115c <__assert_fail@plt+0x1eb68>
   31104:	cmn	r0, #2
   31108:	ldrne	r2, [sp, #4]
   3110c:	beq	311f0 <__assert_fail@plt+0x1ebfc>
   31110:	ldr	r1, [r5, #8]
   31114:	add	r0, r4, r3
   31118:	add	ip, r4, #1
   3111c:	cmp	ip, r0
   31120:	str	r2, [r1, r4, lsl #2]
   31124:	add	r3, r1, r4, lsl #2
   31128:	bge	31218 <__assert_fail@plt+0x1ec24>
   3112c:	sub	r2, r0, #-1073741823	; 0xc0000001
   31130:	add	r2, r1, r2, lsl #2
   31134:	str	r6, [r3, #4]!
   31138:	cmp	r2, r3
   3113c:	bne	31134 <__assert_fail@plt+0x1eb40>
   31140:	mov	r4, r0
   31144:	cmp	r9, r4
   31148:	bgt	310c0 <__assert_fail@plt+0x1eacc>
   3114c:	str	r4, [r5, #28]
   31150:	str	r4, [r5, #32]
   31154:	add	sp, sp, #84	; 0x54
   31158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3115c:	ldr	r3, [r5]
   31160:	ldr	r2, [r5, #24]
   31164:	add	r3, r3, r4
   31168:	ldr	r1, [r5, #64]	; 0x40
   3116c:	ldrb	r2, [r3, r2]
   31170:	cmp	r1, #0
   31174:	mov	r3, sl
   31178:	str	r2, [sp, #4]
   3117c:	ldrbne	r2, [r1, r2]
   31180:	ldm	r8, {r0, r1}
   31184:	strne	r2, [sp, #4]
   31188:	stm	r7, {r0, r1}
   3118c:	b	31110 <__assert_fail@plt+0x1eb1c>
   31190:	ldr	r3, [r5, #80]	; 0x50
   31194:	cmp	r3, #0
   31198:	ble	311e8 <__assert_fail@plt+0x1ebf4>
   3119c:	add	r0, sp, #15
   311a0:	mov	r3, #0
   311a4:	b	311ac <__assert_fail@plt+0x1ebb8>
   311a8:	ldr	ip, [r5, #64]	; 0x40
   311ac:	ldr	r1, [r5]
   311b0:	ldr	lr, [r5, #24]
   311b4:	add	r1, r1, r4
   311b8:	add	r1, r1, r3
   311bc:	ldr	fp, [r5, #4]
   311c0:	ldrb	lr, [r1, lr]
   311c4:	add	r1, fp, r4
   311c8:	ldrb	ip, [ip, lr]
   311cc:	strb	ip, [r1, r3]
   311d0:	ldr	r1, [r5, #80]	; 0x50
   311d4:	add	r3, r3, #1
   311d8:	cmp	r1, r3
   311dc:	cmpgt	r2, r3
   311e0:	strb	ip, [r0, #1]!
   311e4:	bgt	311a8 <__assert_fail@plt+0x1ebb4>
   311e8:	add	r1, sp, #16
   311ec:	b	310e8 <__assert_fail@plt+0x1eaf4>
   311f0:	ldr	r2, [r5, #36]	; 0x24
   311f4:	ldr	r3, [r5, #48]	; 0x30
   311f8:	cmp	r2, r3
   311fc:	bge	3115c <__assert_fail@plt+0x1eb68>
   31200:	ldm	r8, {r0, r1}
   31204:	stm	r7, {r0, r1}
   31208:	str	r4, [r5, #28]
   3120c:	str	r4, [r5, #32]
   31210:	add	sp, sp, #84	; 0x54
   31214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31218:	mov	r4, ip
   3121c:	b	31144 <__assert_fail@plt+0x1eb50>
   31220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31224:	mov	r5, r0
   31228:	ldr	r7, [r0, #36]	; 0x24
   3122c:	ldr	r3, [r0, #48]	; 0x30
   31230:	ldrb	r2, [r0, #74]	; 0x4a
   31234:	cmp	r7, r3
   31238:	movge	r7, r3
   3123c:	cmp	r2, #0
   31240:	sub	sp, sp, #100	; 0x64
   31244:	ldr	r6, [r0, #28]
   31248:	bne	31258 <__assert_fail@plt+0x1ec64>
   3124c:	ldr	r3, [r0, #64]	; 0x40
   31250:	cmp	r3, #0
   31254:	beq	3138c <__assert_fail@plt+0x1ed98>
   31258:	ldr	r4, [r5, #32]
   3125c:	cmp	r6, r7
   31260:	bge	31378 <__assert_fail@plt+0x1ed84>
   31264:	sub	r3, r7, r6
   31268:	str	r3, [sp, #4]
   3126c:	add	sl, r5, #16
   31270:	add	r3, sp, #24
   31274:	str	r3, [sp]
   31278:	add	r3, sp, #20
   3127c:	str	r3, [sp, #8]
   31280:	ldm	sl, {r0, r1}
   31284:	ldr	r2, [r5, #64]	; 0x40
   31288:	ldr	r3, [sp]
   3128c:	cmp	r2, #0
   31290:	stm	r3, {r0, r1}
   31294:	bne	314d8 <__assert_fail@plt+0x1eee4>
   31298:	ldr	r3, [r5, #24]
   3129c:	ldr	r2, [r5]
   312a0:	add	r3, r4, r3
   312a4:	add	r3, r2, r3
   312a8:	str	r3, [sp, #12]
   312ac:	mov	r3, sl
   312b0:	ldr	r2, [sp, #4]
   312b4:	ldr	r0, [sp, #8]
   312b8:	ldr	r1, [sp, #12]
   312bc:	bl	2fe64 <__assert_fail@plt+0x1d870>
   312c0:	sub	r3, r0, #1
   312c4:	cmn	r3, #4
   312c8:	mov	r8, r0
   312cc:	str	r3, [sp, #4]
   312d0:	bhi	315e8 <__assert_fail@plt+0x1eff4>
   312d4:	ldr	fp, [sp, #20]
   312d8:	mov	r0, fp
   312dc:	bl	1257c <towupper@plt>
   312e0:	cmp	fp, r0
   312e4:	mov	r9, r0
   312e8:	beq	315d0 <__assert_fail@plt+0x1efdc>
   312ec:	add	r0, sp, #32
   312f0:	ldr	r2, [sp]
   312f4:	mov	r1, r9
   312f8:	bl	11ef8 <wcrtomb@plt>
   312fc:	cmp	r8, r0
   31300:	mov	fp, r0
   31304:	bne	31688 <__assert_fail@plt+0x1f094>
   31308:	ldr	r0, [r5, #4]
   3130c:	add	r1, sp, #32
   31310:	add	r0, r0, r6
   31314:	mov	r2, r8
   31318:	bl	12024 <memcpy@plt>
   3131c:	ldrb	r3, [r5, #76]	; 0x4c
   31320:	cmp	r3, #0
   31324:	bne	31660 <__assert_fail@plt+0x1f06c>
   31328:	add	r2, r8, r4
   3132c:	ldr	r3, [r5, #8]
   31330:	add	r8, r6, r8
   31334:	add	r1, r6, #1
   31338:	cmp	r1, r8
   3133c:	mov	r4, r2
   31340:	str	r9, [r3, r6, lsl #2]
   31344:	bge	31680 <__assert_fail@plt+0x1f08c>
   31348:	sub	r2, r8, #-1073741823	; 0xc0000001
   3134c:	add	r6, r3, r6, lsl #2
   31350:	add	r3, r3, r2, lsl #2
   31354:	mvn	r2, #0
   31358:	str	r2, [r6, #4]!
   3135c:	cmp	r3, r6
   31360:	bne	31358 <__assert_fail@plt+0x1ed64>
   31364:	mov	r6, r8
   31368:	b	3125c <__assert_fail@plt+0x1ec68>
   3136c:	ldr	r3, [sp]
   31370:	ldm	r3, {r0, r1}
   31374:	stm	sl, {r0, r1}
   31378:	mov	r0, #0
   3137c:	str	r6, [r5, #28]
   31380:	str	r4, [r5, #32]
   31384:	add	sp, sp, #100	; 0x64
   31388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3138c:	ldrb	r3, [r0, #76]	; 0x4c
   31390:	cmp	r3, #0
   31394:	bne	31258 <__assert_fail@plt+0x1ec64>
   31398:	cmp	r6, r7
   3139c:	bge	315c0 <__assert_fail@plt+0x1efcc>
   313a0:	add	sl, r0, #16
   313a4:	mvn	r9, #0
   313a8:	b	313d8 <__assert_fail@plt+0x1ede4>
   313ac:	mov	r0, fp
   313b0:	bl	1257c <towupper@plt>
   313b4:	bics	r3, r0, #127	; 0x7f
   313b8:	bne	31400 <__assert_fail@plt+0x1ee0c>
   313bc:	ldr	r3, [r5, #4]
   313c0:	strb	r0, [r3, r6]
   313c4:	ldr	r3, [r5, #8]
   313c8:	str	r0, [r3, r6, lsl #2]
   313cc:	add	r6, r6, #1
   313d0:	cmp	r7, r6
   313d4:	ble	315c0 <__assert_fail@plt+0x1efcc>
   313d8:	ldr	r8, [r5]
   313dc:	ldr	r4, [r5, #24]
   313e0:	add	r3, r8, r4
   313e4:	ldrb	fp, [r3, r6]
   313e8:	tst	fp, #128	; 0x80
   313ec:	bne	31400 <__assert_fail@plt+0x1ee0c>
   313f0:	mov	r0, sl
   313f4:	bl	12060 <mbsinit@plt>
   313f8:	cmp	r0, #0
   313fc:	bne	313ac <__assert_fail@plt+0x1edb8>
   31400:	ldm	sl, {r0, r1}
   31404:	add	r2, sp, #24
   31408:	sub	r3, r7, r6
   3140c:	add	r4, r4, r6
   31410:	stm	r2, {r0, r1}
   31414:	str	r3, [sp, #4]
   31418:	mov	r2, r3
   3141c:	add	r1, r8, r4
   31420:	mov	r3, sl
   31424:	add	r0, sp, #20
   31428:	bl	2fe64 <__assert_fail@plt+0x1d870>
   3142c:	add	r2, sp, #24
   31430:	str	r2, [sp]
   31434:	add	r2, sp, #20
   31438:	mov	r4, r6
   3143c:	str	r2, [sp, #8]
   31440:	sub	r3, r0, #1
   31444:	cmn	r3, #4
   31448:	mov	r8, r0
   3144c:	bhi	31554 <__assert_fail@plt+0x1ef60>
   31450:	ldr	r3, [sp, #20]
   31454:	mov	r0, r3
   31458:	str	r3, [sp, #12]
   3145c:	bl	1257c <towupper@plt>
   31460:	ldr	r3, [sp, #12]
   31464:	cmp	r3, r0
   31468:	mov	fp, r0
   3146c:	beq	31530 <__assert_fail@plt+0x1ef3c>
   31470:	mov	r1, r0
   31474:	add	r2, sp, #24
   31478:	add	r0, sp, #32
   3147c:	bl	11ef8 <wcrtomb@plt>
   31480:	cmp	r8, r0
   31484:	bne	31584 <__assert_fail@plt+0x1ef90>
   31488:	ldr	r0, [r5, #4]
   3148c:	mov	r2, r8
   31490:	add	r0, r0, r6
   31494:	add	r1, sp, #32
   31498:	bl	12024 <memcpy@plt>
   3149c:	add	r6, r6, #1
   314a0:	ldr	r2, [r5, #8]
   314a4:	sub	r3, r6, #1
   314a8:	add	r8, r3, r8
   314ac:	cmp	r6, r8
   314b0:	str	fp, [r2, r4, lsl #2]
   314b4:	add	r4, r2, r4, lsl #2
   314b8:	bge	313d0 <__assert_fail@plt+0x1eddc>
   314bc:	sub	r3, r8, #-1073741823	; 0xc0000001
   314c0:	add	r3, r2, r3, lsl #2
   314c4:	str	r9, [r4, #4]!
   314c8:	cmp	r4, r3
   314cc:	bne	314c4 <__assert_fail@plt+0x1eed0>
   314d0:	mov	r6, r8
   314d4:	b	313d0 <__assert_fail@plt+0x1eddc>
   314d8:	ldr	lr, [r5, #80]	; 0x50
   314dc:	cmp	lr, #0
   314e0:	ble	31524 <__assert_fail@plt+0x1ef30>
   314e4:	ldr	r3, [r5, #24]
   314e8:	ldr	r0, [sp, #4]
   314ec:	ldr	r1, [r5]
   314f0:	add	r3, r4, r3
   314f4:	cmp	lr, r0
   314f8:	sub	r3, r3, #1
   314fc:	movge	lr, r0
   31500:	add	r1, r1, r3
   31504:	add	r0, sp, #31
   31508:	mov	r3, #0
   3150c:	ldrb	ip, [r1, #1]!
   31510:	add	r3, r3, #1
   31514:	cmp	r3, lr
   31518:	ldrb	ip, [r2, ip]
   3151c:	strb	ip, [r0, #1]!
   31520:	blt	3150c <__assert_fail@plt+0x1ef18>
   31524:	add	r3, sp, #32
   31528:	str	r3, [sp, #12]
   3152c:	b	312ac <__assert_fail@plt+0x1ecb8>
   31530:	ldr	r3, [r5, #24]
   31534:	ldr	r1, [r5]
   31538:	ldr	r0, [r5, #4]
   3153c:	add	r3, r6, r3
   31540:	add	r1, r1, r3
   31544:	add	r0, r0, r6
   31548:	mov	r2, r8
   3154c:	bl	12024 <memcpy@plt>
   31550:	b	3149c <__assert_fail@plt+0x1eea8>
   31554:	cmn	r3, #3
   31558:	bne	3158c <__assert_fail@plt+0x1ef98>
   3155c:	ldr	r2, [r5, #36]	; 0x24
   31560:	ldr	r3, [r5, #48]	; 0x30
   31564:	cmp	r2, r3
   31568:	blt	315b4 <__assert_fail@plt+0x1efc0>
   3156c:	ldr	r3, [r5, #4]
   31570:	strb	fp, [r3, r6]
   31574:	ldr	r3, [r5, #8]
   31578:	add	r6, r6, #1
   3157c:	str	fp, [r3, r4, lsl #2]
   31580:	b	313d0 <__assert_fail@plt+0x1eddc>
   31584:	mov	r4, r6
   31588:	b	31280 <__assert_fail@plt+0x1ec8c>
   3158c:	ldr	r3, [r5, #4]
   31590:	cmn	r0, #1
   31594:	strb	fp, [r3, r6]
   31598:	ldr	r3, [r5, #8]
   3159c:	add	r6, r6, #1
   315a0:	str	fp, [r3, r4, lsl #2]
   315a4:	addeq	r3, sp, #24
   315a8:	ldmeq	r3, {r0, r1}
   315ac:	stmeq	sl, {r0, r1}
   315b0:	b	313d0 <__assert_fail@plt+0x1eddc>
   315b4:	add	r3, sp, #24
   315b8:	ldm	r3, {r0, r1}
   315bc:	stm	sl, {r0, r1}
   315c0:	str	r6, [r5, #28]
   315c4:	str	r6, [r5, #32]
   315c8:	mov	r0, #0
   315cc:	b	31384 <__assert_fail@plt+0x1ed90>
   315d0:	ldr	r0, [r5, #4]
   315d4:	ldr	r1, [sp, #12]
   315d8:	add	r0, r0, r6
   315dc:	mov	r2, r8
   315e0:	bl	12024 <memcpy@plt>
   315e4:	b	3131c <__assert_fail@plt+0x1ed28>
   315e8:	ldr	r3, [sp, #4]
   315ec:	cmn	r3, #3
   315f0:	bne	31604 <__assert_fail@plt+0x1f010>
   315f4:	ldr	r2, [r5, #36]	; 0x24
   315f8:	ldr	r3, [r5, #48]	; 0x30
   315fc:	cmp	r2, r3
   31600:	blt	3136c <__assert_fail@plt+0x1ed78>
   31604:	ldr	r3, [r5]
   31608:	ldr	r1, [r5, #24]
   3160c:	add	r3, r3, r4
   31610:	ldr	r2, [r5, #64]	; 0x40
   31614:	ldrb	r3, [r3, r1]
   31618:	cmp	r2, #0
   3161c:	mov	r1, r6
   31620:	ldrbne	r3, [r2, r3]
   31624:	ldr	r2, [r5, #4]
   31628:	strb	r3, [r2, r6]
   3162c:	ldrb	r2, [r5, #76]	; 0x4c
   31630:	cmp	r2, #0
   31634:	ldrne	r2, [r5, #12]
   31638:	strne	r4, [r2, r6, lsl #2]
   3163c:	ldr	r2, [r5, #8]
   31640:	cmn	r8, #1
   31644:	add	r4, r4, #1
   31648:	add	r6, r6, #1
   3164c:	str	r3, [r2, r1, lsl #2]
   31650:	ldreq	r3, [sp]
   31654:	ldmeq	r3, {r0, r1}
   31658:	stmeq	sl, {r0, r1}
   3165c:	b	3125c <__assert_fail@plt+0x1ec68>
   31660:	ldr	r3, [r5, #12]
   31664:	add	r2, r8, r4
   31668:	add	r3, r3, r6, lsl #2
   3166c:	str	r4, [r3], #4
   31670:	add	r4, r4, #1
   31674:	cmp	r2, r4
   31678:	bne	3166c <__assert_fail@plt+0x1f078>
   3167c:	b	3132c <__assert_fail@plt+0x1ed38>
   31680:	mov	r6, r1
   31684:	b	3125c <__assert_fail@plt+0x1ec68>
   31688:	cmn	r0, #1
   3168c:	beq	315d0 <__assert_fail@plt+0x1efdc>
   31690:	ldr	r0, [r5, #36]	; 0x24
   31694:	add	r7, fp, r6
   31698:	cmp	r7, r0
   3169c:	bhi	3136c <__assert_fail@plt+0x1ed78>
   316a0:	ldr	r3, [r5, #12]
   316a4:	cmp	r3, #0
   316a8:	beq	31784 <__assert_fail@plt+0x1f190>
   316ac:	ldrb	r3, [r5, #76]	; 0x4c
   316b0:	cmp	r3, #0
   316b4:	bne	316e0 <__assert_fail@plt+0x1f0ec>
   316b8:	cmp	r6, #0
   316bc:	ldrne	r2, [r5, #12]
   316c0:	subne	r2, r2, #4
   316c4:	beq	316d8 <__assert_fail@plt+0x1f0e4>
   316c8:	str	r3, [r2, #4]!
   316cc:	add	r3, r3, #1
   316d0:	cmp	r6, r3
   316d4:	bne	316c8 <__assert_fail@plt+0x1f0d4>
   316d8:	mov	r3, #1
   316dc:	strb	r3, [r5, #76]	; 0x4c
   316e0:	ldr	r0, [r5, #4]
   316e4:	add	r1, sp, #32
   316e8:	mov	r2, fp
   316ec:	add	r0, r0, r6
   316f0:	bl	12024 <memcpy@plt>
   316f4:	ldr	r3, [r5, #8]
   316f8:	ldr	r1, [r5, #12]
   316fc:	lsl	r2, r6, #2
   31700:	cmp	fp, #1
   31704:	str	r9, [r3, r6, lsl #2]
   31708:	add	r3, r3, r2
   3170c:	str	r4, [r1, r6, lsl #2]
   31710:	add	r2, r1, r2
   31714:	bls	31744 <__assert_fail@plt+0x1f150>
   31718:	mov	r1, #1
   3171c:	mvn	ip, #0
   31720:	cmp	r1, r8
   31724:	ldr	r0, [sp, #4]
   31728:	movcc	r0, r1
   3172c:	add	r1, r1, #1
   31730:	add	r0, r0, r4
   31734:	cmp	fp, r1
   31738:	str	r0, [r2, #4]!
   3173c:	str	ip, [r3, #4]!
   31740:	bne	31720 <__assert_fail@plt+0x1f12c>
   31744:	ldr	r2, [r5, #52]	; 0x34
   31748:	ldr	r3, [r5, #48]	; 0x30
   3174c:	cmp	r4, r2
   31750:	sub	fp, fp, r8
   31754:	ldrlt	r2, [r5, #56]	; 0x38
   31758:	add	r3, fp, r3
   3175c:	addlt	fp, r2, fp
   31760:	ldr	r2, [r5, #36]	; 0x24
   31764:	strlt	fp, [r5, #56]	; 0x38
   31768:	cmp	r3, r2
   3176c:	mov	r6, r7
   31770:	str	r3, [r5, #48]	; 0x30
   31774:	add	r4, r8, r4
   31778:	movlt	r7, r3
   3177c:	movge	r7, r2
   31780:	b	3125c <__assert_fail@plt+0x1ec68>
   31784:	lsl	r0, r0, #2
   31788:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3178c:	cmp	r0, #0
   31790:	str	r0, [r5, #12]
   31794:	moveq	r0, #12
   31798:	bne	316ac <__assert_fail@plt+0x1f0b8>
   3179c:	b	31384 <__assert_fail@plt+0x1ed90>
   317a0:	push	{r4, r5, r6, lr}
   317a4:	mov	r5, r0
   317a8:	ldr	r6, [r0, #36]	; 0x24
   317ac:	ldr	r3, [r0, #48]	; 0x30
   317b0:	ldr	r4, [r0, #28]
   317b4:	cmp	r6, r3
   317b8:	movge	r6, r3
   317bc:	cmp	r6, r4
   317c0:	ble	31804 <__assert_fail@plt+0x1f210>
   317c4:	bl	122a0 <__ctype_toupper_loc@plt>
   317c8:	ldr	r3, [r5]
   317cc:	ldr	r2, [r5, #24]
   317d0:	add	r3, r3, r4
   317d4:	ldr	r1, [r5, #64]	; 0x40
   317d8:	ldrb	r2, [r3, r2]
   317dc:	cmp	r1, #0
   317e0:	ldr	r3, [r5, #4]
   317e4:	ldrbne	r2, [r1, r2]
   317e8:	ldr	r1, [r0]
   317ec:	add	r3, r3, r4
   317f0:	add	r4, r4, #1
   317f4:	ldr	r2, [r1, r2, lsl #2]
   317f8:	cmp	r6, r4
   317fc:	strb	r2, [r3]
   31800:	bne	317c8 <__assert_fail@plt+0x1f1d4>
   31804:	str	r4, [r5, #28]
   31808:	str	r4, [r5, #32]
   3180c:	pop	{r4, r5, r6, pc}
   31810:	ldr	r3, [r0, #36]	; 0x24
   31814:	push	{r4, r5, r6, lr}
   31818:	cmn	r3, #-536870910	; 0xe0000002
   3181c:	bhi	31904 <__assert_fail@plt+0x1f310>
   31820:	ldr	r2, [r0, #48]	; 0x30
   31824:	lsl	r3, r3, #1
   31828:	cmp	r3, r2
   3182c:	movge	r3, r2
   31830:	cmp	r3, r1
   31834:	movge	r1, r3
   31838:	mov	r4, r0
   3183c:	bl	30e88 <__assert_fail@plt+0x1e894>
   31840:	subs	r5, r0, #0
   31844:	bne	318fc <__assert_fail@plt+0x1f308>
   31848:	ldr	r0, [r4, #100]	; 0x64
   3184c:	cmp	r0, #0
   31850:	beq	31870 <__assert_fail@plt+0x1f27c>
   31854:	ldr	r1, [r4, #36]	; 0x24
   31858:	add	r1, r1, #1
   3185c:	lsl	r1, r1, #2
   31860:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31864:	cmp	r0, #0
   31868:	beq	31904 <__assert_fail@plt+0x1f310>
   3186c:	str	r0, [r4, #100]	; 0x64
   31870:	ldrb	r3, [r4, #72]	; 0x48
   31874:	cmp	r3, #0
   31878:	ldr	r3, [r4, #80]	; 0x50
   3187c:	beq	31894 <__assert_fail@plt+0x1f2a0>
   31880:	cmp	r3, #1
   31884:	mov	r0, r4
   31888:	ble	31920 <__assert_fail@plt+0x1f32c>
   3188c:	pop	{r4, r5, r6, lr}
   31890:	b	31220 <__assert_fail@plt+0x1ec2c>
   31894:	cmp	r3, #1
   31898:	bgt	31910 <__assert_fail@plt+0x1f31c>
   3189c:	ldr	r1, [r4, #64]	; 0x40
   318a0:	cmp	r1, #0
   318a4:	beq	318fc <__assert_fail@plt+0x1f308>
   318a8:	ldr	lr, [r4, #36]	; 0x24
   318ac:	ldr	r2, [r4, #48]	; 0x30
   318b0:	ldr	r3, [r4, #28]
   318b4:	cmp	lr, r2
   318b8:	movge	lr, r2
   318bc:	cmp	lr, r3
   318c0:	bgt	318cc <__assert_fail@plt+0x1f2d8>
   318c4:	b	318f4 <__assert_fail@plt+0x1f300>
   318c8:	ldr	r1, [r4, #64]	; 0x40
   318cc:	ldr	r2, [r4]
   318d0:	ldr	ip, [r4, #24]
   318d4:	add	r2, r2, r3
   318d8:	ldr	r0, [r4, #4]
   318dc:	ldrb	r2, [r2, ip]
   318e0:	ldrb	r2, [r1, r2]
   318e4:	strb	r2, [r0, r3]
   318e8:	add	r3, r3, #1
   318ec:	cmp	lr, r3
   318f0:	bne	318c8 <__assert_fail@plt+0x1f2d4>
   318f4:	str	r3, [r4, #28]
   318f8:	str	r3, [r4, #32]
   318fc:	mov	r0, r5
   31900:	pop	{r4, r5, r6, pc}
   31904:	mov	r5, #12
   31908:	mov	r0, r5
   3190c:	pop	{r4, r5, r6, pc}
   31910:	mov	r0, r4
   31914:	bl	31088 <__assert_fail@plt+0x1ea94>
   31918:	mov	r0, r5
   3191c:	pop	{r4, r5, r6, pc}
   31920:	bl	317a0 <__assert_fail@plt+0x1f1ac>
   31924:	b	318fc <__assert_fail@plt+0x1f308>
   31928:	push	{r4, lr}
   3192c:	mov	r4, r0
   31930:	ldr	r0, [r0]
   31934:	bl	2db68 <__assert_fail@plt+0x1b574>
   31938:	ldr	r0, [r4, #4]
   3193c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31940:	ldr	r0, [r4, #8]
   31944:	bl	2db68 <__assert_fail@plt+0x1b574>
   31948:	ldr	r0, [r4, #12]
   3194c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31950:	mov	r0, r4
   31954:	pop	{r4, lr}
   31958:	b	2db68 <__assert_fail@plt+0x1b574>
   3195c:	ldr	r3, [pc, #36]	; 31988 <__assert_fail@plt+0x1f394>
   31960:	ldr	r2, [r0, #4]
   31964:	and	r3, r3, r2
   31968:	cmp	r3, #6
   3196c:	beq	31980 <__assert_fail@plt+0x1f38c>
   31970:	cmp	r3, #3
   31974:	bxne	lr
   31978:	ldr	r0, [r0]
   3197c:	b	2db68 <__assert_fail@plt+0x1b574>
   31980:	ldr	r0, [r0]
   31984:	b	31928 <__assert_fail@plt+0x1f334>
   31988:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   3198c:	add	r0, r1, #20
   31990:	push	{r4, lr}
   31994:	bl	3195c <__assert_fail@plt+0x1f368>
   31998:	mov	r0, #0
   3199c:	pop	{r4, pc}
   319a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   319a4:	sub	sp, sp, #12
   319a8:	ldmib	r0, {r5, ip}
   319ac:	stm	sp, {r1, r2}
   319b0:	mov	r4, r0
   319b4:	cmp	ip, r5
   319b8:	mov	r8, sp
   319bc:	ldrb	r6, [sp, #4]
   319c0:	bcs	31a80 <__assert_fail@plt+0x1f48c>
   319c4:	ldr	r7, [r0, #12]
   319c8:	ldr	r5, [r0, #20]
   319cc:	ldm	r8, {r0, r1}
   319d0:	ldr	r3, [r4]
   319d4:	cmp	r6, #5
   319d8:	add	r3, r3, ip, lsl #3
   319dc:	bic	r2, r1, #261120	; 0x3fc00
   319e0:	bic	r2, r2, #768	; 0x300
   319e4:	stm	r3, {r0, r1}
   319e8:	str	r2, [r3, #4]
   319ec:	beq	31a6c <__assert_fail@plt+0x1f478>
   319f0:	sub	r6, r6, #6
   319f4:	clz	r6, r6
   319f8:	lsr	r6, r6, #5
   319fc:	ldrb	r2, [r3, #6]
   31a00:	mvn	r1, #0
   31a04:	bic	r2, r2, #16
   31a08:	orr	r2, r2, r6, lsl #4
   31a0c:	strb	r2, [r3, #6]
   31a10:	str	r1, [r7, ip, lsl #2]
   31a14:	ldr	r3, [r4, #8]
   31a18:	mov	r2, #0
   31a1c:	add	r3, r3, r3, lsl #1
   31a20:	lsl	r3, r3, #2
   31a24:	add	r1, r5, r3
   31a28:	str	r2, [r5, r3]
   31a2c:	str	r2, [r1, #4]
   31a30:	str	r2, [r1, #8]
   31a34:	ldr	r3, [r4, #8]
   31a38:	ldr	r0, [r4, #24]
   31a3c:	add	r3, r3, r3, lsl #1
   31a40:	lsl	r3, r3, #2
   31a44:	add	r1, r0, r3
   31a48:	str	r2, [r0, r3]
   31a4c:	str	r2, [r1, #4]
   31a50:	str	r2, [r1, #8]
   31a54:	ldr	r3, [r4, #8]
   31a58:	mov	r0, r3
   31a5c:	add	r3, r3, #1
   31a60:	str	r3, [r4, #8]
   31a64:	add	sp, sp, #12
   31a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31a6c:	ldr	r6, [r4, #92]	; 0x5c
   31a70:	cmp	r6, #1
   31a74:	movle	r6, #0
   31a78:	movgt	r6, #1
   31a7c:	b	319fc <__assert_fail@plt+0x1f408>
   31a80:	ldr	r3, [pc, #200]	; 31b50 <__assert_fail@plt+0x1f55c>
   31a84:	lsl	r9, r5, #1
   31a88:	cmp	r9, r3
   31a8c:	bhi	31b48 <__assert_fail@plt+0x1f554>
   31a90:	lsl	r1, r5, #4
   31a94:	ldr	r0, [r0]
   31a98:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31a9c:	cmp	r0, #0
   31aa0:	beq	31b48 <__assert_fail@plt+0x1f554>
   31aa4:	lsl	sl, r5, #3
   31aa8:	mov	r1, sl
   31aac:	str	r0, [r4]
   31ab0:	ldr	r0, [r4, #12]
   31ab4:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31ab8:	mov	r1, sl
   31abc:	add	r5, r9, r5, lsl #2
   31ac0:	lsl	sl, r5, #2
   31ac4:	mov	r7, r0
   31ac8:	ldr	r0, [r4, #16]
   31acc:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31ad0:	mov	r1, sl
   31ad4:	mov	fp, r0
   31ad8:	ldr	r0, [r4, #20]
   31adc:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31ae0:	mov	r1, sl
   31ae4:	mov	r5, r0
   31ae8:	ldr	r0, [r4, #24]
   31aec:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31af0:	cmp	fp, #0
   31af4:	cmpne	r7, #0
   31af8:	mov	sl, r0
   31afc:	beq	31b28 <__assert_fail@plt+0x1f534>
   31b00:	cmp	r0, #0
   31b04:	cmpne	r5, #0
   31b08:	beq	31b28 <__assert_fail@plt+0x1f534>
   31b0c:	ldr	ip, [r4, #8]
   31b10:	str	r7, [r4, #12]
   31b14:	str	fp, [r4, #16]
   31b18:	str	r5, [r4, #20]
   31b1c:	str	r0, [r4, #24]
   31b20:	str	r9, [r4, #4]
   31b24:	b	319cc <__assert_fail@plt+0x1f3d8>
   31b28:	mov	r0, r7
   31b2c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31b30:	mov	r0, fp
   31b34:	bl	2db68 <__assert_fail@plt+0x1b574>
   31b38:	mov	r0, r5
   31b3c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31b40:	mov	r0, sl
   31b44:	bl	2db68 <__assert_fail@plt+0x1b574>
   31b48:	mvn	r0, #0
   31b4c:	b	31a64 <__assert_fail@plt+0x1f470>
   31b50:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   31b54:	ldr	r3, [r0]
   31b58:	push	{r4, r5, r6, r7, r8, lr}
   31b5c:	lsl	r7, r1, #3
   31b60:	add	r3, r3, r7
   31b64:	mov	r5, r1
   31b68:	mov	r6, r2
   31b6c:	ldm	r3, {r1, r2}
   31b70:	mov	r4, r0
   31b74:	bl	319a0 <__assert_fail@plt+0x1f3ac>
   31b78:	cmn	r0, #1
   31b7c:	popeq	{r4, r5, r6, r7, r8, pc}
   31b80:	ldr	lr, [r4]
   31b84:	ldr	ip, [pc, #80]	; 31bdc <__assert_fail@plt+0x1f5e8>
   31b88:	add	r1, lr, r0, lsl #3
   31b8c:	ldr	r8, [pc, #76]	; 31be0 <__assert_fail@plt+0x1f5ec>
   31b90:	ldr	r3, [r1, #4]
   31b94:	and	r2, r6, ip
   31b98:	add	r7, lr, r7
   31b9c:	bic	r3, r3, r8
   31ba0:	orr	r3, r3, r2, lsl #8
   31ba4:	str	r3, [r1, #4]
   31ba8:	ldr	lr, [r7, #4]
   31bac:	bic	r3, r3, r8
   31bb0:	and	ip, ip, lr, lsr #8
   31bb4:	orr	r2, r2, ip
   31bb8:	orr	r3, r3, r2, lsl #8
   31bbc:	str	r3, [r1, #4]
   31bc0:	lsr	r3, r3, #16
   31bc4:	uxtb	r3, r3
   31bc8:	orr	r3, r3, #4
   31bcc:	strb	r3, [r1, #6]
   31bd0:	ldr	r3, [r4, #16]
   31bd4:	str	r5, [r3, r0, lsl #2]
   31bd8:	pop	{r4, r5, r6, r7, r8, pc}
   31bdc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   31be0:	andeq	pc, r3, r0, lsl #30
   31be4:	push	{r4, lr}
   31be8:	mov	r4, r0
   31bec:	ldr	r0, [r0, #24]
   31bf0:	bl	2db68 <__assert_fail@plt+0x1b574>
   31bf4:	ldr	r0, [r4, #36]	; 0x24
   31bf8:	bl	2db68 <__assert_fail@plt+0x1b574>
   31bfc:	ldr	r3, [r4, #40]	; 0x28
   31c00:	add	r2, r4, #4
   31c04:	cmp	r3, r2
   31c08:	beq	31c1c <__assert_fail@plt+0x1f628>
   31c0c:	ldr	r0, [r3, #8]
   31c10:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c14:	ldr	r0, [r4, #40]	; 0x28
   31c18:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c1c:	ldr	r0, [r4, #12]
   31c20:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c24:	ldr	r0, [r4, #48]	; 0x30
   31c28:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c2c:	ldr	r0, [r4, #44]	; 0x2c
   31c30:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c34:	mov	r0, r4
   31c38:	pop	{r4, lr}
   31c3c:	b	2db68 <__assert_fail@plt+0x1b574>
   31c40:	push	{r4, lr}
   31c44:	mov	r4, r0
   31c48:	ldr	r0, [r0, #8]
   31c4c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c50:	ldr	r0, [r4, #12]
   31c54:	bl	2db68 <__assert_fail@plt+0x1b574>
   31c58:	ldrb	r3, [r4, #75]	; 0x4b
   31c5c:	cmp	r3, #0
   31c60:	popeq	{r4, pc}
   31c64:	ldr	r0, [r4, #4]
   31c68:	pop	{r4, lr}
   31c6c:	b	2db68 <__assert_fail@plt+0x1b574>
   31c70:	push	{r4, r5, r6, r7, r8, lr}
   31c74:	mov	r6, r0
   31c78:	ldr	r0, [r0]
   31c7c:	cmp	r0, #0
   31c80:	beq	31cb4 <__assert_fail@plt+0x1f6c0>
   31c84:	ldr	r3, [r6, #8]
   31c88:	cmp	r3, #0
   31c8c:	beq	31cb4 <__assert_fail@plt+0x1f6c0>
   31c90:	mov	r4, #0
   31c94:	b	31c9c <__assert_fail@plt+0x1f6a8>
   31c98:	ldr	r0, [r6]
   31c9c:	add	r0, r0, r4, lsl #3
   31ca0:	bl	3195c <__assert_fail@plt+0x1f368>
   31ca4:	ldr	r3, [r6, #8]
   31ca8:	add	r4, r4, #1
   31cac:	cmp	r3, r4
   31cb0:	bhi	31c98 <__assert_fail@plt+0x1f6a4>
   31cb4:	ldr	r0, [r6, #12]
   31cb8:	bl	2db68 <__assert_fail@plt+0x1b574>
   31cbc:	ldr	r3, [r6, #8]
   31cc0:	cmp	r3, #0
   31cc4:	movne	r4, #0
   31cc8:	movne	r5, r4
   31ccc:	beq	31d2c <__assert_fail@plt+0x1f738>
   31cd0:	ldr	r3, [r6, #24]
   31cd4:	add	r5, r5, #1
   31cd8:	cmp	r3, #0
   31cdc:	add	r2, r3, r4
   31ce0:	beq	31cec <__assert_fail@plt+0x1f6f8>
   31ce4:	ldr	r0, [r2, #8]
   31ce8:	bl	2db68 <__assert_fail@plt+0x1b574>
   31cec:	ldr	r3, [r6, #28]
   31cf0:	cmp	r3, #0
   31cf4:	add	r2, r3, r4
   31cf8:	beq	31d04 <__assert_fail@plt+0x1f710>
   31cfc:	ldr	r0, [r2, #8]
   31d00:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d04:	ldr	r3, [r6, #20]
   31d08:	cmp	r3, #0
   31d0c:	add	r2, r3, r4
   31d10:	beq	31d1c <__assert_fail@plt+0x1f728>
   31d14:	ldr	r0, [r2, #8]
   31d18:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d1c:	ldr	r3, [r6, #8]
   31d20:	add	r4, r4, #12
   31d24:	cmp	r3, r5
   31d28:	bhi	31cd0 <__assert_fail@plt+0x1f6dc>
   31d2c:	ldr	r0, [r6, #20]
   31d30:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d34:	ldr	r0, [r6, #24]
   31d38:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d3c:	ldr	r0, [r6, #28]
   31d40:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d44:	ldr	r0, [r6]
   31d48:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d4c:	ldr	r0, [r6, #32]
   31d50:	cmp	r0, #0
   31d54:	beq	31db4 <__assert_fail@plt+0x1f7c0>
   31d58:	mov	r7, #0
   31d5c:	mov	r8, r7
   31d60:	ldr	r3, [r0, r7]
   31d64:	add	r5, r0, r7
   31d68:	cmp	r3, #0
   31d6c:	movgt	r4, #0
   31d70:	ble	31d90 <__assert_fail@plt+0x1f79c>
   31d74:	ldr	r3, [r5, #8]
   31d78:	ldr	r0, [r3, r4, lsl #2]
   31d7c:	bl	31be4 <__assert_fail@plt+0x1f5f0>
   31d80:	ldr	r3, [r5]
   31d84:	add	r4, r4, #1
   31d88:	cmp	r3, r4
   31d8c:	bgt	31d74 <__assert_fail@plt+0x1f780>
   31d90:	ldr	r0, [r5, #8]
   31d94:	bl	2db68 <__assert_fail@plt+0x1b574>
   31d98:	ldr	r3, [r6, #68]	; 0x44
   31d9c:	add	r8, r8, #1
   31da0:	cmp	r3, r8
   31da4:	add	r7, r7, #12
   31da8:	ldrcs	r0, [r6, #32]
   31dac:	bcs	31d60 <__assert_fail@plt+0x1f76c>
   31db0:	ldr	r0, [r6, #32]
   31db4:	bl	2db68 <__assert_fail@plt+0x1b574>
   31db8:	ldr	r0, [r6, #60]	; 0x3c
   31dbc:	ldr	r3, [pc, #28]	; 31de0 <__assert_fail@plt+0x1f7ec>
   31dc0:	cmp	r0, r3
   31dc4:	beq	31dcc <__assert_fail@plt+0x1f7d8>
   31dc8:	bl	2db68 <__assert_fail@plt+0x1b574>
   31dcc:	ldr	r0, [r6, #132]	; 0x84
   31dd0:	bl	2db68 <__assert_fail@plt+0x1b574>
   31dd4:	mov	r0, r6
   31dd8:	pop	{r4, r5, r6, r7, r8, lr}
   31ddc:	b	2db68 <__assert_fail@plt+0x1b574>
   31de0:	andeq	r5, r4, r0, asr #30
   31de4:	ldr	r3, [r0, #124]	; 0x7c
   31de8:	push	{r4, r5, r6, r7, r8, lr}
   31dec:	cmp	r3, #0
   31df0:	mov	r8, r0
   31df4:	movgt	r7, #0
   31df8:	ble	31e78 <__assert_fail@plt+0x1f884>
   31dfc:	ldr	r3, [r8, #132]	; 0x84
   31e00:	ldr	r6, [r3, r7, lsl #2]
   31e04:	ldr	r3, [r6, #16]
   31e08:	cmp	r3, #0
   31e0c:	movgt	r4, #0
   31e10:	ble	31e3c <__assert_fail@plt+0x1f848>
   31e14:	ldr	r3, [r6, #20]
   31e18:	ldr	r5, [r3, r4, lsl #2]
   31e1c:	add	r4, r4, #1
   31e20:	ldr	r0, [r5, #16]
   31e24:	bl	2db68 <__assert_fail@plt+0x1b574>
   31e28:	mov	r0, r5
   31e2c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31e30:	ldr	r3, [r6, #16]
   31e34:	cmp	r3, r4
   31e38:	bgt	31e14 <__assert_fail@plt+0x1f820>
   31e3c:	ldr	r0, [r6, #20]
   31e40:	bl	2db68 <__assert_fail@plt+0x1b574>
   31e44:	ldr	r3, [r6, #8]
   31e48:	cmp	r3, #0
   31e4c:	beq	31e60 <__assert_fail@plt+0x1f86c>
   31e50:	ldr	r0, [r3, #8]
   31e54:	bl	2db68 <__assert_fail@plt+0x1b574>
   31e58:	ldr	r0, [r6, #8]
   31e5c:	bl	2db68 <__assert_fail@plt+0x1b574>
   31e60:	mov	r0, r6
   31e64:	bl	2db68 <__assert_fail@plt+0x1b574>
   31e68:	ldr	r3, [r8, #124]	; 0x7c
   31e6c:	add	r7, r7, #1
   31e70:	cmp	r3, r7
   31e74:	bgt	31dfc <__assert_fail@plt+0x1f808>
   31e78:	mov	r3, #0
   31e7c:	str	r3, [r8, #124]	; 0x7c
   31e80:	str	r3, [r8, #108]	; 0x6c
   31e84:	pop	{r4, r5, r6, r7, r8, pc}
   31e88:	push	{r4, r5, r6, lr}
   31e8c:	subs	r5, r0, #0
   31e90:	beq	31ee4 <__assert_fail@plt+0x1f8f0>
   31e94:	ldr	r3, [r5]
   31e98:	cmp	r3, #0
   31e9c:	movgt	r4, #0
   31ea0:	movgt	r6, r4
   31ea4:	ble	31edc <__assert_fail@plt+0x1f8e8>
   31ea8:	ldr	r3, [r5, #8]
   31eac:	add	r6, r6, #1
   31eb0:	add	r3, r3, r4
   31eb4:	ldr	r0, [r3, #20]
   31eb8:	bl	2db68 <__assert_fail@plt+0x1b574>
   31ebc:	ldr	r3, [r5, #8]
   31ec0:	add	r3, r3, r4
   31ec4:	add	r4, r4, #24
   31ec8:	ldr	r0, [r3, #8]
   31ecc:	bl	2db68 <__assert_fail@plt+0x1b574>
   31ed0:	ldr	r3, [r5]
   31ed4:	cmp	r3, r6
   31ed8:	bgt	31ea8 <__assert_fail@plt+0x1f8b4>
   31edc:	ldr	r0, [r5, #8]
   31ee0:	bl	2db68 <__assert_fail@plt+0x1b574>
   31ee4:	mov	r0, #0
   31ee8:	pop	{r4, r5, r6, pc}
   31eec:	ldr	r3, [r0]
   31ef0:	push	{r4, r5, r6, lr}
   31ef4:	cmp	r3, #0
   31ef8:	mov	r4, r0
   31efc:	mov	r6, r1
   31f00:	beq	31f2c <__assert_fail@plt+0x1f938>
   31f04:	ldr	r1, [r0, #4]
   31f08:	cmp	r1, #0
   31f0c:	bne	31f5c <__assert_fail@plt+0x1f968>
   31f10:	ldr	r3, [r0, #8]
   31f14:	mov	r0, #1
   31f18:	str	r6, [r3]
   31f1c:	ldr	r3, [r4, #4]
   31f20:	add	r3, r3, r0
   31f24:	str	r3, [r4, #4]
   31f28:	pop	{r4, r5, r6, pc}
   31f2c:	mov	r5, #1
   31f30:	str	r5, [r0]
   31f34:	str	r5, [r0, #4]
   31f38:	mov	r0, #4
   31f3c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   31f40:	cmp	r0, #0
   31f44:	str	r0, [r4, #8]
   31f48:	strne	r6, [r0]
   31f4c:	streq	r0, [r4, #4]
   31f50:	streq	r0, [r4]
   31f54:	movne	r0, r5
   31f58:	pop	{r4, r5, r6, pc}
   31f5c:	cmp	r3, r1
   31f60:	beq	31fe0 <__assert_fail@plt+0x1f9ec>
   31f64:	ldr	r0, [r0, #8]
   31f68:	ldr	r3, [r0]
   31f6c:	cmp	r6, r3
   31f70:	bge	31fac <__assert_fail@plt+0x1f9b8>
   31f74:	cmp	r1, #0
   31f78:	ble	31f94 <__assert_fail@plt+0x1f9a0>
   31f7c:	add	r1, r0, r1, lsl #2
   31f80:	ldr	r3, [r1, #-4]
   31f84:	str	r3, [r1], #-4
   31f88:	cmp	r0, r1
   31f8c:	bne	31f80 <__assert_fail@plt+0x1f98c>
   31f90:	mov	r1, #0
   31f94:	str	r6, [r0, r1, lsl #2]
   31f98:	ldr	r3, [r4, #4]
   31f9c:	mov	r0, #1
   31fa0:	add	r3, r3, r0
   31fa4:	str	r3, [r4, #4]
   31fa8:	pop	{r4, r5, r6, pc}
   31fac:	sub	r3, r1, #-1073741823	; 0xc0000001
   31fb0:	ldr	r2, [r0, r3, lsl #2]
   31fb4:	lsl	r3, r3, #2
   31fb8:	cmp	r6, r2
   31fbc:	bge	31f94 <__assert_fail@plt+0x1f9a0>
   31fc0:	add	r3, r3, #4
   31fc4:	add	r3, r0, r3
   31fc8:	str	r2, [r3], #-4
   31fcc:	ldr	r2, [r3, #-4]
   31fd0:	sub	r1, r1, #1
   31fd4:	cmp	r6, r2
   31fd8:	blt	31fc8 <__assert_fail@plt+0x1f9d4>
   31fdc:	b	31f94 <__assert_fail@plt+0x1f9a0>
   31fe0:	lsl	r3, r1, #1
   31fe4:	str	r3, [r0]
   31fe8:	lsl	r1, r1, #3
   31fec:	ldr	r0, [r0, #8]
   31ff0:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   31ff4:	cmp	r0, #0
   31ff8:	popeq	{r4, r5, r6, pc}
   31ffc:	ldr	r1, [r4, #4]
   32000:	str	r0, [r4, #8]
   32004:	b	31f68 <__assert_fail@plt+0x1f974>
   32008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3200c:	sub	sp, sp, #20
   32010:	ldr	r8, [pc, #680]	; 322c0 <__assert_fail@plt+0x1fccc>
   32014:	ldr	r7, [sp, #56]	; 0x38
   32018:	mov	r6, r0
   3201c:	mov	fp, r1
   32020:	mov	r9, r2
   32024:	str	r3, [sp, #12]
   32028:	ldr	sl, [r6]
   3202c:	add	r3, sl, fp, lsl #3
   32030:	ldrb	r2, [r3, #4]
   32034:	cmp	r2, #4
   32038:	beq	32228 <__assert_fail@plt+0x1fc34>
   3203c:	add	r4, fp, fp, lsl #1
   32040:	ldr	r0, [r6, #20]
   32044:	lsl	r4, r4, #2
   32048:	add	ip, r0, r4
   3204c:	ldr	r2, [ip, #4]
   32050:	cmp	r2, #0
   32054:	beq	32294 <__assert_fail@plt+0x1fca0>
   32058:	cmp	r2, #1
   3205c:	beq	321a8 <__assert_fail@plt+0x1fbb4>
   32060:	ldr	r2, [r6, #8]
   32064:	add	r9, r9, r9, lsl #1
   32068:	sub	r1, r2, #1
   3206c:	cmp	r1, #0
   32070:	add	r3, sl, r1, lsl #3
   32074:	lsl	r5, r9, #2
   32078:	ldrb	lr, [r3, #6]
   3207c:	ldr	r9, [ip, #8]
   32080:	add	r0, r0, r5
   32084:	movle	ip, #0
   32088:	movgt	ip, #1
   3208c:	ands	ip, ip, lr, lsr #2
   32090:	mov	ip, #0
   32094:	ldr	r9, [r9]
   32098:	str	ip, [r0, #4]
   3209c:	beq	32150 <__assert_fail@plt+0x1fb5c>
   320a0:	ldr	ip, [r6, #16]
   320a4:	rsb	fp, r3, r2, lsl #3
   320a8:	sub	fp, fp, #16
   320ac:	add	r2, ip, r2, lsl #2
   320b0:	b	320d4 <__assert_fail@plt+0x1fae0>
   320b4:	add	r3, sl, lr
   320b8:	sub	r1, r1, #1
   320bc:	ldrb	lr, [r3, #6]
   320c0:	cmp	r1, #0
   320c4:	movle	ip, #0
   320c8:	movgt	ip, #1
   320cc:	ands	ip, ip, lr, lsr #2
   320d0:	beq	32150 <__assert_fail@plt+0x1fb5c>
   320d4:	ldr	ip, [r2, #-4]!
   320d8:	add	lr, r3, fp
   320dc:	cmp	r9, ip
   320e0:	bne	320b4 <__assert_fail@plt+0x1fac0>
   320e4:	ldr	r3, [r3, #4]
   320e8:	and	r3, r8, r3, lsr #8
   320ec:	cmp	r7, r3
   320f0:	bne	320b4 <__assert_fail@plt+0x1fac0>
   320f4:	bl	31eec <__assert_fail@plt+0x1f8f8>
   320f8:	cmp	r0, #0
   320fc:	beq	32144 <__assert_fail@plt+0x1fb50>
   32100:	ldr	r3, [r6, #20]
   32104:	mov	r2, r7
   32108:	add	r4, r3, r4
   3210c:	mov	r0, r6
   32110:	ldr	r3, [r4, #8]
   32114:	ldr	fp, [r3, #4]
   32118:	mov	r1, fp
   3211c:	bl	31b54 <__assert_fail@plt+0x1f560>
   32120:	cmn	r0, #1
   32124:	mov	r9, r0
   32128:	beq	32144 <__assert_fail@plt+0x1fb50>
   3212c:	ldr	r0, [r6, #20]
   32130:	mov	r1, r9
   32134:	add	r0, r0, r5
   32138:	bl	31eec <__assert_fail@plt+0x1f8f8>
   3213c:	cmp	r0, #0
   32140:	bne	32028 <__assert_fail@plt+0x1fa34>
   32144:	mov	r0, #12
   32148:	add	sp, sp, #20
   3214c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32150:	mov	r2, r7
   32154:	mov	r1, r9
   32158:	mov	r0, r6
   3215c:	bl	31b54 <__assert_fail@plt+0x1f560>
   32160:	cmn	r0, #1
   32164:	mov	sl, r0
   32168:	beq	32144 <__assert_fail@plt+0x1fb50>
   3216c:	ldr	r0, [r6, #20]
   32170:	mov	r1, sl
   32174:	add	r0, r0, r5
   32178:	bl	31eec <__assert_fail@plt+0x1f8f8>
   3217c:	cmp	r0, #0
   32180:	beq	32144 <__assert_fail@plt+0x1fb50>
   32184:	str	r7, [sp]
   32188:	mov	r2, sl
   3218c:	mov	r1, r9
   32190:	ldr	r3, [sp, #12]
   32194:	mov	r0, r6
   32198:	bl	32008 <__assert_fail@plt+0x1fa14>
   3219c:	cmp	r0, #0
   321a0:	beq	32100 <__assert_fail@plt+0x1fb0c>
   321a4:	b	32148 <__assert_fail@plt+0x1fb54>
   321a8:	add	r4, r9, r9, lsl #1
   321ac:	ldr	r2, [ip, #8]
   321b0:	ldr	r1, [sp, #12]
   321b4:	cmp	fp, r9
   321b8:	lsl	r4, r4, #2
   321bc:	sub	r1, fp, r1
   321c0:	add	r0, r0, r4
   321c4:	clz	r1, r1
   321c8:	lsr	r1, r1, #5
   321cc:	moveq	r1, #0
   321d0:	ldr	fp, [r2]
   321d4:	cmp	r1, #0
   321d8:	mov	r2, #0
   321dc:	str	r2, [r0, #4]
   321e0:	bne	322a8 <__assert_fail@plt+0x1fcb4>
   321e4:	ldr	r3, [r3, #4]
   321e8:	mov	r1, fp
   321ec:	mov	r0, r6
   321f0:	and	r3, r8, r3, lsr #8
   321f4:	orr	r7, r7, r3
   321f8:	mov	r2, r7
   321fc:	bl	31b54 <__assert_fail@plt+0x1f560>
   32200:	cmn	r0, #1
   32204:	mov	r9, r0
   32208:	beq	32144 <__assert_fail@plt+0x1fb50>
   3220c:	ldr	r0, [r6, #20]
   32210:	mov	r1, r9
   32214:	add	r0, r0, r4
   32218:	bl	31eec <__assert_fail@plt+0x1f8f8>
   3221c:	cmp	r0, #0
   32220:	bne	32028 <__assert_fail@plt+0x1fa34>
   32224:	b	32144 <__assert_fail@plt+0x1fb50>
   32228:	ldr	r2, [r6, #12]
   3222c:	add	r4, r9, r9, lsl #1
   32230:	ldr	r3, [r6, #20]
   32234:	lsl	r4, r4, #2
   32238:	add	r3, r3, r4
   3223c:	lsl	sl, fp, #2
   32240:	ldr	fp, [r2, fp, lsl #2]
   32244:	mov	r1, #0
   32248:	str	r1, [r3, #4]
   3224c:	mov	r2, r7
   32250:	mov	r1, fp
   32254:	mov	r0, r6
   32258:	bl	31b54 <__assert_fail@plt+0x1f560>
   3225c:	mov	r5, r9
   32260:	cmn	r0, #1
   32264:	mov	r9, r0
   32268:	beq	32144 <__assert_fail@plt+0x1fb50>
   3226c:	ldr	r3, [r6, #12]
   32270:	ldr	r0, [r6, #20]
   32274:	mov	r1, r9
   32278:	ldr	r2, [r3, sl]
   3227c:	add	r0, r0, r4
   32280:	str	r2, [r3, r5, lsl #2]
   32284:	bl	31eec <__assert_fail@plt+0x1f8f8>
   32288:	cmp	r0, #0
   3228c:	bne	32028 <__assert_fail@plt+0x1fa34>
   32290:	b	32144 <__assert_fail@plt+0x1fb50>
   32294:	ldr	r3, [r6, #12]
   32298:	mov	r0, r2
   3229c:	ldr	r2, [r3, fp, lsl #2]
   322a0:	str	r2, [r3, r9, lsl #2]
   322a4:	b	32148 <__assert_fail@plt+0x1fb54>
   322a8:	mov	r1, fp
   322ac:	bl	31eec <__assert_fail@plt+0x1f8f8>
   322b0:	cmp	r0, #0
   322b4:	movne	r0, #0
   322b8:	bne	32148 <__assert_fail@plt+0x1fb54>
   322bc:	b	32144 <__assert_fail@plt+0x1fb50>
   322c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   322c4:	ldr	r3, [r0, #36]	; 0x24
   322c8:	push	{r4, r5, r6, lr}
   322cc:	cmp	r3, r1
   322d0:	mov	r4, r0
   322d4:	mov	r5, r1
   322d8:	ldr	r6, [r0, #104]	; 0x68
   322dc:	bgt	32330 <__assert_fail@plt+0x1fd3c>
   322e0:	ldr	r2, [r0, #48]	; 0x30
   322e4:	cmp	r3, r2
   322e8:	bge	32330 <__assert_fail@plt+0x1fd3c>
   322ec:	add	r1, r5, #1
   322f0:	mov	r0, r4
   322f4:	bl	31810 <__assert_fail@plt+0x1f21c>
   322f8:	cmp	r0, #0
   322fc:	bne	32354 <__assert_fail@plt+0x1fd60>
   32300:	cmp	r6, r5
   32304:	bge	3234c <__assert_fail@plt+0x1fd58>
   32308:	sub	r2, r5, r6
   3230c:	ldr	r0, [r4, #100]	; 0x64
   32310:	add	r6, r6, #1
   32314:	lsl	r2, r2, #2
   32318:	add	r0, r0, r6, lsl #2
   3231c:	mov	r1, #0
   32320:	bl	12378 <memset@plt>
   32324:	mov	r0, #0
   32328:	str	r5, [r4, #104]	; 0x68
   3232c:	pop	{r4, r5, r6, pc}
   32330:	ldr	r3, [r4, #28]
   32334:	cmp	r5, r3
   32338:	blt	32300 <__assert_fail@plt+0x1fd0c>
   3233c:	ldr	r2, [r4, #48]	; 0x30
   32340:	cmp	r3, r2
   32344:	bge	32300 <__assert_fail@plt+0x1fd0c>
   32348:	b	322ec <__assert_fail@plt+0x1fcf8>
   3234c:	mov	r0, #0
   32350:	pop	{r4, r5, r6, pc}
   32354:	pop	{r4, r5, r6, pc}
   32358:	push	{r4, r5, r6, r7, r8, lr}
   3235c:	subs	r4, r0, #0
   32360:	ldr	r7, [sp, #28]
   32364:	beq	32400 <__assert_fail@plt+0x1fe0c>
   32368:	ldr	ip, [r4]
   3236c:	cmp	ip, #0
   32370:	beq	32400 <__assert_fail@plt+0x1fe0c>
   32374:	sub	ip, ip, #1
   32378:	ldr	lr, [r4, #8]
   3237c:	add	r5, ip, ip, lsl #1
   32380:	lsl	r6, r2, #3
   32384:	lsl	r5, r5, #3
   32388:	add	r2, lr, r5
   3238c:	mov	r0, r3
   32390:	mov	r8, r1
   32394:	ldr	r3, [lr, r5]
   32398:	ldr	r1, [r2, #8]
   3239c:	str	ip, [r4]
   323a0:	mov	r2, r6
   323a4:	str	r3, [r8]
   323a8:	bl	12024 <memcpy@plt>
   323ac:	ldr	r3, [r4, #8]
   323b0:	mov	r2, r6
   323b4:	add	r3, r3, r5
   323b8:	ldr	r0, [sp, #24]
   323bc:	ldr	r1, [r3, #8]
   323c0:	add	r1, r1, r6
   323c4:	bl	12024 <memcpy@plt>
   323c8:	ldr	r0, [r7, #8]
   323cc:	bl	2db68 <__assert_fail@plt+0x1b574>
   323d0:	ldr	r3, [r4, #8]
   323d4:	add	r3, r3, r5
   323d8:	ldr	r0, [r3, #8]
   323dc:	bl	2db68 <__assert_fail@plt+0x1b574>
   323e0:	ldr	r3, [r4, #8]
   323e4:	add	r5, r3, r5
   323e8:	add	r3, r5, #12
   323ec:	ldr	ip, [r5, #4]
   323f0:	ldm	r3, {r0, r1, r2}
   323f4:	stm	r7, {r0, r1, r2}
   323f8:	mov	r0, ip
   323fc:	pop	{r4, r5, r6, r7, r8, pc}
   32400:	mvn	ip, #0
   32404:	b	323f8 <__assert_fail@plt+0x1fe04>
   32408:	ldr	r2, [r0, #4]
   3240c:	ldr	r3, [r1, #4]
   32410:	cmp	r2, r3
   32414:	beq	32420 <__assert_fail@plt+0x1fe2c>
   32418:	mov	r0, #0
   3241c:	bx	lr
   32420:	sub	r2, r2, #1
   32424:	cmp	r2, #0
   32428:	lsl	r3, r2, #2
   3242c:	sub	r2, r2, #1
   32430:	blt	32474 <__assert_fail@plt+0x1fe80>
   32434:	push	{lr}		; (str lr, [sp, #-4]!)
   32438:	b	32448 <__assert_fail@plt+0x1fe54>
   3243c:	cmp	r2, #0
   32440:	sub	r2, r2, #1
   32444:	blt	3246c <__assert_fail@plt+0x1fe78>
   32448:	ldr	lr, [r0, #8]
   3244c:	ldr	ip, [r1, #8]
   32450:	ldr	lr, [lr, r3]
   32454:	ldr	ip, [ip, r3]
   32458:	sub	r3, r3, #4
   3245c:	cmp	lr, ip
   32460:	beq	3243c <__assert_fail@plt+0x1fe48>
   32464:	mov	r0, #0
   32468:	pop	{pc}		; (ldr pc, [sp], #4)
   3246c:	mov	r0, #1
   32470:	pop	{pc}		; (ldr pc, [sp], #4)
   32474:	mov	r0, #1
   32478:	bx	lr
   3247c:	cmp	r0, #0
   32480:	ble	32504 <__assert_fail@plt+0x1ff10>
   32484:	push	{lr}		; (str lr, [sp, #-4]!)
   32488:	sub	ip, r0, #1
   3248c:	ldr	lr, [r1]
   32490:	mov	r0, #0
   32494:	cmp	r0, ip
   32498:	bcs	324d4 <__assert_fail@plt+0x1fee0>
   3249c:	add	r1, r0, ip
   324a0:	lsr	r1, r1, #1
   324a4:	ldr	r3, [lr, r1, lsl #2]
   324a8:	cmp	r2, r3
   324ac:	ble	324c4 <__assert_fail@plt+0x1fed0>
   324b0:	b	324e8 <__assert_fail@plt+0x1fef4>
   324b4:	ldr	ip, [lr, r3, lsl #2]
   324b8:	cmp	ip, r2
   324bc:	blt	324f0 <__assert_fail@plt+0x1fefc>
   324c0:	mov	r1, r3
   324c4:	add	r3, r0, r1
   324c8:	cmp	r0, r1
   324cc:	lsr	r3, r3, #1
   324d0:	bcc	324b4 <__assert_fail@plt+0x1fec0>
   324d4:	ldr	r3, [lr, r0, lsl #2]
   324d8:	cmp	r2, r3
   324dc:	beq	324fc <__assert_fail@plt+0x1ff08>
   324e0:	mov	r0, #0
   324e4:	pop	{pc}		; (ldr pc, [sp], #4)
   324e8:	mov	r3, r1
   324ec:	mov	r1, ip
   324f0:	add	r0, r3, #1
   324f4:	mov	ip, r1
   324f8:	b	32494 <__assert_fail@plt+0x1fea0>
   324fc:	add	r0, r0, #1
   32500:	pop	{pc}		; (ldr pc, [sp], #4)
   32504:	mov	r0, #0
   32508:	bx	lr
   3250c:	push	{r4, r5, r6, r7, r8, r9, lr}
   32510:	sub	sp, sp, #12
   32514:	mov	r5, r1
   32518:	mov	r6, r0
   3251c:	mov	r4, r2
   32520:	mov	r9, r3
   32524:	add	r8, r1, #8
   32528:	ldr	r7, [sp, #40]	; 0x28
   3252c:	b	32538 <__assert_fail@plt+0x1ff44>
   32530:	ldr	r3, [r3, #8]
   32534:	ldr	r4, [r3]
   32538:	mov	r1, r8
   3253c:	mov	r2, r4
   32540:	ldr	r0, [r5, #4]
   32544:	bl	3247c <__assert_fail@plt+0x1fe88>
   32548:	mov	r1, r4
   3254c:	cmp	r0, #0
   32550:	mov	r0, r5
   32554:	bne	32600 <__assert_fail@plt+0x2000c>
   32558:	ldr	r3, [r6]
   3255c:	add	r2, r3, r4, lsl #3
   32560:	ldrb	r2, [r2, #4]
   32564:	cmp	r2, r7
   32568:	bne	32578 <__assert_fail@plt+0x1ff84>
   3256c:	ldr	r3, [r3, r4, lsl #3]
   32570:	cmp	r9, r3
   32574:	beq	325d8 <__assert_fail@plt+0x1ffe4>
   32578:	bl	31eec <__assert_fail@plt+0x1f8f8>
   3257c:	add	r4, r4, r4, lsl #1
   32580:	lsl	r4, r4, #2
   32584:	cmp	r0, #0
   32588:	beq	325f4 <__assert_fail@plt+0x20000>
   3258c:	ldr	r3, [r6, #20]
   32590:	add	r3, r3, r4
   32594:	ldr	r2, [r3, #4]
   32598:	cmp	r2, #0
   3259c:	beq	32600 <__assert_fail@plt+0x2000c>
   325a0:	cmp	r2, #2
   325a4:	bne	32530 <__assert_fail@plt+0x1ff3c>
   325a8:	ldr	r2, [r3, #8]
   325ac:	mov	r1, r5
   325b0:	mov	r3, r9
   325b4:	ldr	r2, [r2, #4]
   325b8:	mov	r0, r6
   325bc:	str	r7, [sp]
   325c0:	bl	3250c <__assert_fail@plt+0x1ff18>
   325c4:	cmp	r0, #0
   325c8:	bne	325f8 <__assert_fail@plt+0x20004>
   325cc:	ldr	r3, [r6, #20]
   325d0:	add	r3, r3, r4
   325d4:	b	32530 <__assert_fail@plt+0x1ff3c>
   325d8:	cmp	r7, #9
   325dc:	bne	32600 <__assert_fail@plt+0x2000c>
   325e0:	mov	r1, r4
   325e4:	mov	r0, r5
   325e8:	bl	31eec <__assert_fail@plt+0x1f8f8>
   325ec:	cmp	r0, #0
   325f0:	bne	32600 <__assert_fail@plt+0x2000c>
   325f4:	mov	r0, #12
   325f8:	add	sp, sp, #12
   325fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32600:	mov	r0, #0
   32604:	add	sp, sp, #12
   32608:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3260c:	ldr	r3, [r0]
   32610:	cmp	r2, r3
   32614:	bxge	lr
   32618:	ldr	r3, [r1]
   3261c:	add	r3, r3, r2, lsl #2
   32620:	ldr	r1, [r3, #4]
   32624:	add	r2, r2, #1
   32628:	str	r1, [r3], #4
   3262c:	ldr	r1, [r0]
   32630:	cmp	r2, r1
   32634:	blt	32620 <__assert_fail@plt+0x2002c>
   32638:	bx	lr
   3263c:	ldrb	r3, [r1, #24]
   32640:	cmp	r3, #4
   32644:	beq	326b0 <__assert_fail@plt+0x200bc>
   32648:	cmp	r3, #17
   3264c:	beq	32658 <__assert_fail@plt+0x20064>
   32650:	mov	r0, #0
   32654:	bx	lr
   32658:	ldr	r3, [r1, #4]
   3265c:	cmp	r3, #0
   32660:	beq	32650 <__assert_fail@plt+0x2005c>
   32664:	ldrb	r2, [r3, #24]
   32668:	cmp	r2, #17
   3266c:	bne	32650 <__assert_fail@plt+0x2005c>
   32670:	ldr	r2, [r3, #4]
   32674:	ldr	r3, [r3, #20]
   32678:	cmp	r2, #0
   3267c:	str	r2, [r1, #4]
   32680:	strne	r1, [r2]
   32684:	ldr	r2, [r0, #132]	; 0x84
   32688:	ldr	r1, [r1, #20]
   3268c:	cmp	r3, #31
   32690:	ldr	r1, [r2, r1, lsl #2]
   32694:	str	r1, [r2, r3, lsl #2]
   32698:	ldrle	r2, [r0, #80]	; 0x50
   3269c:	movle	r1, #1
   326a0:	bicle	r3, r2, r1, lsl r3
   326a4:	strle	r3, [r0, #80]	; 0x50
   326a8:	mov	r0, #0
   326ac:	bx	lr
   326b0:	ldr	r2, [r0, #132]	; 0x84
   326b4:	cmp	r2, #0
   326b8:	beq	32650 <__assert_fail@plt+0x2005c>
   326bc:	ldr	r3, [r1, #20]
   326c0:	mov	ip, #1
   326c4:	ldr	r2, [r2, r3, lsl #2]
   326c8:	str	r2, [r1, #20]
   326cc:	ldr	r3, [r0, #80]	; 0x50
   326d0:	orr	r3, r3, ip, lsl r2
   326d4:	str	r3, [r0, #80]	; 0x50
   326d8:	mov	r0, #0
   326dc:	bx	lr
   326e0:	ldrb	r3, [r1, #24]
   326e4:	cmp	r3, #11
   326e8:	beq	32738 <__assert_fail@plt+0x20144>
   326ec:	cmp	r3, #16
   326f0:	beq	3271c <__assert_fail@plt+0x20128>
   326f4:	ldr	r3, [r1, #4]
   326f8:	mov	r0, #0
   326fc:	cmp	r3, #0
   32700:	ldrne	r2, [r1, #16]
   32704:	strne	r2, [r3, #16]
   32708:	ldr	r3, [r1, #8]
   3270c:	cmp	r3, #0
   32710:	ldrne	r2, [r1, #16]
   32714:	strne	r2, [r3, #16]
   32718:	bx	lr
   3271c:	ldmib	r1, {r2, r3}
   32720:	ldr	r0, [r3, #12]
   32724:	str	r0, [r2, #16]
   32728:	ldr	r2, [r1, #16]
   3272c:	mov	r0, #0
   32730:	str	r2, [r3, #16]
   32734:	bx	lr
   32738:	ldr	r3, [r1, #4]
   3273c:	mov	r0, #0
   32740:	str	r1, [r3, #16]
   32744:	bx	lr
   32748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3274c:	sub	sp, sp, #28
   32750:	ldr	r9, [r0, #108]	; 0x6c
   32754:	ldr	r6, [sp, #64]	; 0x40
   32758:	ldr	r7, [sp, #72]	; 0x48
   3275c:	ldr	lr, [r0, #84]	; 0x54
   32760:	mov	ip, r9
   32764:	mov	r4, #0
   32768:	str	lr, [sp, #8]
   3276c:	cmp	r4, ip
   32770:	bge	327cc <__assert_fail@plt+0x201d8>
   32774:	add	lr, r4, ip
   32778:	ldr	r5, [r0, #116]	; 0x74
   3277c:	add	lr, lr, lr, lsr #31
   32780:	asr	lr, lr, #1
   32784:	add	r8, lr, lr, lsl #1
   32788:	add	r8, r5, r8, lsl #3
   3278c:	ldr	r8, [r8, #4]
   32790:	cmp	r6, r8
   32794:	ble	327bc <__assert_fail@plt+0x201c8>
   32798:	b	32918 <__assert_fail@plt+0x20324>
   3279c:	asr	ip, ip, #1
   327a0:	mov	sl, ip
   327a4:	add	r8, ip, ip, lsl #1
   327a8:	add	r8, r5, r8, lsl #3
   327ac:	ldr	r8, [r8, #4]
   327b0:	cmp	r8, r6
   327b4:	blt	32920 <__assert_fail@plt+0x2032c>
   327b8:	mov	lr, ip
   327bc:	add	ip, r4, lr
   327c0:	cmp	r4, lr
   327c4:	add	ip, ip, ip, lsr #31
   327c8:	blt	3279c <__assert_fail@plt+0x201a8>
   327cc:	cmp	r9, r4
   327d0:	mvnle	r4, #0
   327d4:	ble	327f0 <__assert_fail@plt+0x201fc>
   327d8:	add	lr, r4, r4, lsl #1
   327dc:	ldr	ip, [r0, #116]	; 0x74
   327e0:	add	ip, ip, lr, lsl #3
   327e4:	ldr	ip, [ip, #4]
   327e8:	cmp	r6, ip
   327ec:	mvnne	r4, #0
   327f0:	mov	ip, r9
   327f4:	mov	r5, #0
   327f8:	cmp	r5, ip
   327fc:	bge	32858 <__assert_fail@plt+0x20264>
   32800:	add	lr, r5, ip
   32804:	ldr	r8, [r0, #116]	; 0x74
   32808:	add	lr, lr, lr, lsr #31
   3280c:	asr	lr, lr, #1
   32810:	add	sl, lr, lr, lsl #1
   32814:	add	sl, r8, sl, lsl #3
   32818:	ldr	sl, [sl, #4]
   3281c:	cmp	r7, sl
   32820:	ble	32848 <__assert_fail@plt+0x20254>
   32824:	b	3292c <__assert_fail@plt+0x20338>
   32828:	asr	ip, ip, #1
   3282c:	mov	fp, ip
   32830:	add	sl, ip, ip, lsl #1
   32834:	add	sl, r8, sl, lsl #3
   32838:	ldr	sl, [sl, #4]
   3283c:	cmp	sl, r7
   32840:	blt	32934 <__assert_fail@plt+0x20340>
   32844:	mov	lr, ip
   32848:	add	ip, r5, lr
   3284c:	cmp	r5, lr
   32850:	add	ip, ip, ip, lsr #31
   32854:	blt	32828 <__assert_fail@plt+0x20234>
   32858:	cmp	r9, r5
   3285c:	mvnle	r5, #0
   32860:	ble	3287c <__assert_fail@plt+0x20288>
   32864:	add	lr, r5, r5, lsl #1
   32868:	ldr	ip, [r0, #116]	; 0x74
   3286c:	add	ip, ip, lr, lsl #3
   32870:	ldr	ip, [ip, #4]
   32874:	cmp	r7, ip
   32878:	mvnne	r5, #0
   3287c:	ldr	ip, [r1]
   32880:	cmp	ip, #0
   32884:	ble	32954 <__assert_fail@plt+0x20360>
   32888:	mov	r9, r2
   3288c:	mov	r8, r0
   32890:	mov	fp, #0
   32894:	str	r3, [sp, #12]
   32898:	str	r1, [sp, #20]
   3289c:	str	r4, [sp, #16]
   328a0:	ldr	r3, [r9]
   328a4:	ldr	r2, [sp, #8]
   328a8:	ldr	lr, [r8, #116]	; 0x74
   328ac:	mov	r0, r8
   328b0:	ldr	ip, [r2]
   328b4:	ldr	r2, [r3, fp, lsl #2]
   328b8:	ldr	r3, [sp, #12]
   328bc:	mov	r1, r2
   328c0:	add	r2, r2, r2, lsl #1
   328c4:	ldr	r2, [lr, r2, lsl #3]
   328c8:	ldr	r4, [ip, r2, lsl #3]
   328cc:	ldr	r2, [sp, #16]
   328d0:	str	r6, [sp]
   328d4:	str	r2, [sp, #4]
   328d8:	mov	r2, r4
   328dc:	bl	30d28 <__assert_fail@plt+0x1e734>
   328e0:	ldr	r1, [r9]
   328e4:	mov	r2, r4
   328e8:	ldr	r3, [sp, #68]	; 0x44
   328ec:	ldr	r1, [r1, fp, lsl #2]
   328f0:	str	r5, [sp, #4]
   328f4:	str	r7, [sp]
   328f8:	mov	sl, r0
   328fc:	mov	r0, r8
   32900:	bl	30d28 <__assert_fail@plt+0x1e734>
   32904:	cmp	sl, r0
   32908:	beq	32940 <__assert_fail@plt+0x2034c>
   3290c:	mov	r0, #1
   32910:	add	sp, sp, #28
   32914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32918:	mov	sl, lr
   3291c:	mov	lr, ip
   32920:	add	r4, sl, #1
   32924:	mov	ip, lr
   32928:	b	3276c <__assert_fail@plt+0x20178>
   3292c:	mov	fp, lr
   32930:	mov	lr, ip
   32934:	add	r5, fp, #1
   32938:	mov	ip, lr
   3293c:	b	327f8 <__assert_fail@plt+0x20204>
   32940:	ldr	r3, [sp, #20]
   32944:	add	fp, fp, #1
   32948:	ldr	r3, [r3]
   3294c:	cmp	fp, r3
   32950:	blt	328a0 <__assert_fail@plt+0x202ac>
   32954:	mov	r0, #0
   32958:	b	32910 <__assert_fail@plt+0x2031c>
   3295c:	push	{r4, r5, r6, lr}
   32960:	mov	r5, r0
   32964:	ldr	r0, [r1]
   32968:	sub	sp, sp, #16
   3296c:	cmp	r0, #31
   32970:	beq	329e4 <__assert_fail@plt+0x203f0>
   32974:	lsl	ip, r0, #5
   32978:	ldr	r4, [r5]
   3297c:	add	r0, r0, #1
   32980:	add	r6, ip, #4
   32984:	str	r0, [r1]
   32988:	ldr	r1, [sp, #32]
   3298c:	add	ip, r4, ip
   32990:	mov	r5, #0
   32994:	str	r2, [ip, #8]
   32998:	str	r3, [ip, #12]
   3299c:	str	r5, [ip, #4]
   329a0:	ldm	r1, {r0, r1}
   329a4:	add	lr, ip, #24
   329a8:	cmp	r2, r5
   329ac:	stm	lr, {r0, r1}
   329b0:	ldrb	r1, [ip, #30]
   329b4:	mvn	lr, #0
   329b8:	add	r0, r4, r6
   329bc:	and	r1, r1, #243	; 0xf3
   329c0:	str	r5, [ip, #16]
   329c4:	str	r5, [ip, #20]
   329c8:	strb	r1, [ip, #30]
   329cc:	str	lr, [ip, #32]
   329d0:	strne	r0, [r2]
   329d4:	cmp	r3, #0
   329d8:	strne	r0, [r3]
   329dc:	add	sp, sp, #16
   329e0:	pop	{r4, r5, r6, pc}
   329e4:	mov	r0, #996	; 0x3e4
   329e8:	stmib	sp, {r1, r2, r3}
   329ec:	bl	2fe38 <__assert_fail@plt+0x1d844>
   329f0:	subs	r4, r0, #0
   329f4:	beq	32a18 <__assert_fail@plt+0x20424>
   329f8:	ldr	ip, [r5]
   329fc:	mov	r6, #4
   32a00:	str	ip, [r4]
   32a04:	mov	r0, #1
   32a08:	mov	ip, #0
   32a0c:	str	r4, [r5]
   32a10:	ldmib	sp, {r1, r2, r3}
   32a14:	b	32984 <__assert_fail@plt+0x20390>
   32a18:	mov	r0, r4
   32a1c:	b	329dc <__assert_fail@plt+0x203e8>
   32a20:	push	{r4, r5, r6, r7, r8, r9, lr}
   32a24:	sub	sp, sp, #20
   32a28:	mov	r4, r0
   32a2c:	ldr	r5, [r0]
   32a30:	add	r8, r1, #56	; 0x38
   32a34:	add	r6, r1, #64	; 0x40
   32a38:	add	r9, sp, #12
   32a3c:	mov	r7, #0
   32a40:	b	32a4c <__assert_fail@plt+0x20458>
   32a44:	mov	r4, r3
   32a48:	add	r9, r5, #4
   32a4c:	add	r3, r4, #20
   32a50:	str	r3, [sp]
   32a54:	mov	r2, #0
   32a58:	mov	r3, r7
   32a5c:	mov	r1, r6
   32a60:	mov	r0, r8
   32a64:	bl	3295c <__assert_fail@plt+0x20368>
   32a68:	cmp	r0, #0
   32a6c:	str	r0, [r9]
   32a70:	beq	32ad4 <__assert_fail@plt+0x204e0>
   32a74:	str	r5, [r0]
   32a78:	ldr	r5, [r9]
   32a7c:	ldrb	r3, [r5, #26]
   32a80:	orr	r3, r3, #4
   32a84:	strb	r3, [r5, #26]
   32a88:	ldr	r3, [r4, #4]
   32a8c:	cmp	r3, #0
   32a90:	bne	32a44 <__assert_fail@plt+0x20450>
   32a94:	mov	r2, r7
   32a98:	b	32ab4 <__assert_fail@plt+0x204c0>
   32a9c:	ldr	r3, [r4]
   32aa0:	mov	r2, r4
   32aa4:	cmp	r3, #0
   32aa8:	ldr	r5, [r5]
   32aac:	mov	r4, r3
   32ab0:	beq	32ad0 <__assert_fail@plt+0x204dc>
   32ab4:	ldr	r3, [r4, #8]
   32ab8:	cmp	r3, #0
   32abc:	cmpne	r2, r3
   32ac0:	beq	32a9c <__assert_fail@plt+0x204a8>
   32ac4:	mov	r4, r3
   32ac8:	add	r9, r5, #8
   32acc:	b	32a4c <__assert_fail@plt+0x20458>
   32ad0:	ldr	r0, [sp, #12]
   32ad4:	add	sp, sp, #20
   32ad8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32adc:	ldrb	r3, [r1, #28]
   32ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32ae4:	sub	sp, sp, #28
   32ae8:	ands	r9, r3, #16
   32aec:	mov	r7, r2
   32af0:	str	r0, [sp, #12]
   32af4:	ldr	r4, [r1]
   32af8:	ldr	r5, [r2, #4]
   32afc:	beq	32c44 <__assert_fail@plt+0x20650>
   32b00:	cmp	r5, #0
   32b04:	beq	32cd4 <__assert_fail@plt+0x206e0>
   32b08:	ldr	r3, [r2, #20]
   32b0c:	cmp	r3, #31
   32b10:	bgt	32c38 <__assert_fail@plt+0x20644>
   32b14:	ldr	r2, [r4, #80]	; 0x50
   32b18:	lsr	r3, r2, r3
   32b1c:	tst	r3, #1
   32b20:	beq	32c38 <__assert_fail@plt+0x20644>
   32b24:	add	r6, sp, #16
   32b28:	mov	r9, #0
   32b2c:	add	sl, r4, #56	; 0x38
   32b30:	add	r4, r4, #64	; 0x40
   32b34:	mov	r3, r9
   32b38:	mov	r2, r9
   32b3c:	mov	ip, #8
   32b40:	str	r6, [sp]
   32b44:	mov	r1, r4
   32b48:	str	r9, [r6, #4]
   32b4c:	mov	r0, sl
   32b50:	str	r9, [sp, #16]
   32b54:	strb	ip, [sp, #20]
   32b58:	bl	3295c <__assert_fail@plt+0x20368>
   32b5c:	str	r6, [sp]
   32b60:	mov	r3, r9
   32b64:	str	r9, [r6, #4]
   32b68:	mov	r2, r9
   32b6c:	mov	ip, #9
   32b70:	mov	r1, r4
   32b74:	str	r9, [sp, #16]
   32b78:	strb	ip, [sp, #20]
   32b7c:	mov	r8, r0
   32b80:	mov	r0, sl
   32b84:	bl	3295c <__assert_fail@plt+0x20368>
   32b88:	mov	r9, r0
   32b8c:	mov	r0, #0
   32b90:	str	r6, [sp]
   32b94:	mov	ip, #16
   32b98:	str	r0, [r6, #4]
   32b9c:	str	r0, [sp, #16]
   32ba0:	mov	r2, r5
   32ba4:	mov	r3, r9
   32ba8:	mov	r1, r4
   32bac:	mov	r0, sl
   32bb0:	strb	ip, [sp, #20]
   32bb4:	bl	3295c <__assert_fail@plt+0x20368>
   32bb8:	mov	fp, r0
   32bbc:	mov	r2, #0
   32bc0:	str	r6, [sp]
   32bc4:	mov	ip, #16
   32bc8:	str	r2, [r6, #4]
   32bcc:	str	r2, [sp, #16]
   32bd0:	mov	r1, r4
   32bd4:	mov	r0, sl
   32bd8:	mov	r3, fp
   32bdc:	mov	r2, r8
   32be0:	strb	ip, [sp, #20]
   32be4:	bl	3295c <__assert_fail@plt+0x20368>
   32be8:	cmp	fp, #0
   32bec:	cmpne	r0, #0
   32bf0:	mov	r5, r0
   32bf4:	beq	32cb8 <__assert_fail@plt+0x206c4>
   32bf8:	cmp	r9, #0
   32bfc:	cmpne	r8, #0
   32c00:	beq	32cb8 <__assert_fail@plt+0x206c4>
   32c04:	ldr	r3, [r7, #20]
   32c08:	str	r3, [r9, #20]
   32c0c:	str	r3, [r8, #20]
   32c10:	ldrb	r3, [r7, #26]
   32c14:	ldrb	r2, [r9, #26]
   32c18:	and	r3, r3, #8
   32c1c:	bic	r2, r2, #8
   32c20:	orr	r2, r3, r2
   32c24:	strb	r2, [r9, #26]
   32c28:	ldrb	r2, [r8, #26]
   32c2c:	bic	r2, r2, #8
   32c30:	orr	r3, r3, r2
   32c34:	strb	r3, [r8, #26]
   32c38:	mov	r0, r5
   32c3c:	add	sp, sp, #28
   32c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32c44:	add	r6, sp, #16
   32c48:	add	sl, r4, #56	; 0x38
   32c4c:	add	r4, r4, #64	; 0x40
   32c50:	mov	ip, #8
   32c54:	mov	r3, r9
   32c58:	mov	r2, r9
   32c5c:	str	r6, [sp]
   32c60:	mov	r1, r4
   32c64:	str	r9, [r6, #4]
   32c68:	mov	r0, sl
   32c6c:	str	r9, [sp, #16]
   32c70:	strb	ip, [sp, #20]
   32c74:	bl	3295c <__assert_fail@plt+0x20368>
   32c78:	str	r6, [sp]
   32c7c:	mov	ip, #9
   32c80:	str	r9, [r6, #4]
   32c84:	mov	r3, r9
   32c88:	mov	r2, r9
   32c8c:	mov	r1, r4
   32c90:	str	r9, [sp, #16]
   32c94:	strb	ip, [sp, #20]
   32c98:	mov	r8, r0
   32c9c:	mov	r0, sl
   32ca0:	bl	3295c <__assert_fail@plt+0x20368>
   32ca4:	cmp	r5, #0
   32ca8:	mov	r9, r0
   32cac:	moveq	fp, r0
   32cb0:	bne	32b8c <__assert_fail@plt+0x20598>
   32cb4:	b	32bbc <__assert_fail@plt+0x205c8>
   32cb8:	ldr	r2, [sp, #12]
   32cbc:	mov	r3, #12
   32cc0:	mov	r5, #0
   32cc4:	mov	r0, r5
   32cc8:	str	r3, [r2]
   32ccc:	add	sp, sp, #28
   32cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32cd4:	add	r6, sp, #16
   32cd8:	add	sl, r4, #56	; 0x38
   32cdc:	add	r4, r4, #64	; 0x40
   32ce0:	mov	ip, #8
   32ce4:	str	r6, [sp]
   32ce8:	mov	r1, r4
   32cec:	mov	r3, r5
   32cf0:	mov	r2, r5
   32cf4:	str	r5, [r6, #4]
   32cf8:	mov	r0, sl
   32cfc:	strb	ip, [sp, #20]
   32d00:	str	r5, [sp, #16]
   32d04:	bl	3295c <__assert_fail@plt+0x20368>
   32d08:	str	r6, [sp]
   32d0c:	mov	ip, #9
   32d10:	str	r5, [r6, #4]
   32d14:	mov	r1, r4
   32d18:	mov	r3, r5
   32d1c:	mov	r2, r5
   32d20:	str	r5, [sp, #16]
   32d24:	strb	ip, [sp, #20]
   32d28:	mov	r8, r0
   32d2c:	mov	r0, sl
   32d30:	bl	3295c <__assert_fail@plt+0x20368>
   32d34:	mov	fp, r0
   32d38:	mov	r9, r0
   32d3c:	b	32bbc <__assert_fail@plt+0x205c8>
   32d40:	ldr	r2, [r1, #4]
   32d44:	push	{r4, r5, lr}
   32d48:	mov	r3, #0
   32d4c:	sub	sp, sp, #12
   32d50:	cmp	r2, r3
   32d54:	mov	r4, r1
   32d58:	mov	r5, r0
   32d5c:	str	r3, [sp, #4]
   32d60:	beq	32d70 <__assert_fail@plt+0x2077c>
   32d64:	ldrb	r3, [r2, #24]
   32d68:	cmp	r3, #17
   32d6c:	beq	32db8 <__assert_fail@plt+0x207c4>
   32d70:	ldr	r2, [r4, #8]
   32d74:	cmp	r2, #0
   32d78:	beq	32d88 <__assert_fail@plt+0x20794>
   32d7c:	ldrb	r3, [r2, #24]
   32d80:	cmp	r3, #17
   32d84:	beq	32d94 <__assert_fail@plt+0x207a0>
   32d88:	ldr	r0, [sp, #4]
   32d8c:	add	sp, sp, #12
   32d90:	pop	{r4, r5, pc}
   32d94:	mov	r1, r5
   32d98:	add	r0, sp, #4
   32d9c:	bl	32adc <__assert_fail@plt+0x204e8>
   32da0:	cmp	r0, #0
   32da4:	str	r0, [r4, #8]
   32da8:	strne	r4, [r0]
   32dac:	ldr	r0, [sp, #4]
   32db0:	add	sp, sp, #12
   32db4:	pop	{r4, r5, pc}
   32db8:	mov	r1, r0
   32dbc:	add	r0, sp, #4
   32dc0:	bl	32adc <__assert_fail@plt+0x204e8>
   32dc4:	cmp	r0, #0
   32dc8:	str	r0, [r4, #4]
   32dcc:	strne	r4, [r0]
   32dd0:	b	32d70 <__assert_fail@plt+0x2077c>
   32dd4:	push	{r4, r5, r6, lr}
   32dd8:	mov	r4, r0
   32ddc:	ldr	r0, [r1, #4]
   32de0:	str	r0, [r4, #4]
   32de4:	ldr	r2, [r1, #4]
   32de8:	cmp	r2, #0
   32dec:	ble	32e24 <__assert_fail@plt+0x20830>
   32df0:	str	r0, [r4]
   32df4:	lsl	r0, r0, #2
   32df8:	mov	r5, r1
   32dfc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   32e00:	cmp	r0, #0
   32e04:	str	r0, [r4, #8]
   32e08:	beq	32e3c <__assert_fail@plt+0x20848>
   32e0c:	ldr	r2, [r5, #4]
   32e10:	ldr	r1, [r5, #8]
   32e14:	lsl	r2, r2, #2
   32e18:	bl	12024 <memcpy@plt>
   32e1c:	mov	r0, #0
   32e20:	pop	{r4, r5, r6, pc}
   32e24:	mov	r2, #0
   32e28:	mov	r0, r2
   32e2c:	str	r2, [r4]
   32e30:	str	r2, [r4, #4]
   32e34:	str	r2, [r4, #8]
   32e38:	pop	{r4, r5, r6, pc}
   32e3c:	str	r0, [r4, #4]
   32e40:	str	r0, [r4]
   32e44:	mov	r0, #12
   32e48:	pop	{r4, r5, r6, pc}
   32e4c:	cmp	r1, #0
   32e50:	beq	32f1c <__assert_fail@plt+0x20928>
   32e54:	ldr	r3, [r1, #4]
   32e58:	cmp	r2, #0
   32e5c:	cmpne	r3, #0
   32e60:	ble	32f14 <__assert_fail@plt+0x20920>
   32e64:	ldr	ip, [r2, #4]
   32e68:	cmp	ip, #0
   32e6c:	ble	32f34 <__assert_fail@plt+0x20940>
   32e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32e74:	mov	r8, r0
   32e78:	add	r0, r3, ip
   32e7c:	str	r0, [r8]
   32e80:	lsl	r0, r0, #2
   32e84:	mov	r5, r2
   32e88:	mov	r7, r1
   32e8c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   32e90:	cmp	r0, #0
   32e94:	str	r0, [r8, #8]
   32e98:	beq	32f90 <__assert_fail@plt+0x2099c>
   32e9c:	mov	r3, #0
   32ea0:	mov	ip, r3
   32ea4:	ldr	r9, [r7, #4]
   32ea8:	ldr	sl, [r5, #4]
   32eac:	mov	r4, r0
   32eb0:	mov	lr, #1
   32eb4:	b	32ef4 <__assert_fail@plt+0x20900>
   32eb8:	cmp	r3, sl
   32ebc:	bge	32f50 <__assert_fail@plt+0x2095c>
   32ec0:	ldr	r2, [r7, #8]
   32ec4:	ldr	r1, [r5, #8]
   32ec8:	ldr	r2, [r2, ip, lsl #2]
   32ecc:	ldr	r6, [r1, r3, lsl #2]
   32ed0:	cmp	r2, r6
   32ed4:	addgt	r3, r3, #1
   32ed8:	strgt	r6, [r4]
   32edc:	bgt	32eec <__assert_fail@plt+0x208f8>
   32ee0:	add	ip, ip, #1
   32ee4:	addeq	r3, r3, #1
   32ee8:	str	r2, [r4]
   32eec:	add	lr, lr, #1
   32ef0:	add	r4, r4, #4
   32ef4:	cmp	ip, r9
   32ef8:	sub	r6, lr, #1
   32efc:	blt	32eb8 <__assert_fail@plt+0x208c4>
   32f00:	cmp	r3, sl
   32f04:	blt	32f70 <__assert_fail@plt+0x2097c>
   32f08:	str	r6, [r8, #4]
   32f0c:	mov	r0, #0
   32f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32f14:	cmp	r3, #0
   32f18:	bgt	32f34 <__assert_fail@plt+0x20940>
   32f1c:	cmp	r2, #0
   32f20:	beq	32f38 <__assert_fail@plt+0x20944>
   32f24:	ldr	r3, [r2, #4]
   32f28:	cmp	r3, #0
   32f2c:	ble	32f38 <__assert_fail@plt+0x20944>
   32f30:	mov	r1, r2
   32f34:	b	32dd4 <__assert_fail@plt+0x207e0>
   32f38:	mov	r3, #0
   32f3c:	str	r3, [r0]
   32f40:	str	r3, [r0, #4]
   32f44:	str	r3, [r0, #8]
   32f48:	mov	r0, r3
   32f4c:	bx	lr
   32f50:	sub	r9, r9, ip
   32f54:	ldr	r1, [r7, #8]
   32f58:	add	r0, r0, r6, lsl #2
   32f5c:	add	r1, r1, ip, lsl #2
   32f60:	lsl	r2, r9, #2
   32f64:	add	r6, r6, r9
   32f68:	bl	12024 <memcpy@plt>
   32f6c:	b	32f08 <__assert_fail@plt+0x20914>
   32f70:	sub	sl, sl, r3
   32f74:	ldr	r1, [r5, #8]
   32f78:	add	r0, r0, r6, lsl #2
   32f7c:	add	r1, r1, r3, lsl #2
   32f80:	lsl	r2, sl, #2
   32f84:	bl	12024 <memcpy@plt>
   32f88:	add	r6, r6, sl
   32f8c:	b	32f08 <__assert_fail@plt+0x20914>
   32f90:	mov	r0, #12
   32f94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32f98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f9c:	sub	sp, sp, #36	; 0x24
   32fa0:	ldr	r4, [r2, #4]
   32fa4:	cmp	r4, #0
   32fa8:	streq	r4, [r0]
   32fac:	beq	3305c <__assert_fail@plt+0x20a68>
   32fb0:	add	r7, r3, r4
   32fb4:	ble	32fd0 <__assert_fail@plt+0x209dc>
   32fb8:	ldr	ip, [r2, #8]
   32fbc:	add	r4, ip, r4, lsl #2
   32fc0:	ldr	lr, [ip], #4
   32fc4:	cmp	r4, ip
   32fc8:	add	r7, r7, lr
   32fcc:	bne	32fc0 <__assert_fail@plt+0x209cc>
   32fd0:	mov	fp, r3
   32fd4:	ldr	r3, [r1, #68]	; 0x44
   32fd8:	mov	r8, r2
   32fdc:	and	r3, r3, r7
   32fe0:	ldr	r2, [r1, #32]
   32fe4:	add	r3, r3, r3, lsl #1
   32fe8:	mov	r9, r1
   32fec:	lsl	r3, r3, #2
   32ff0:	str	r0, [sp, #24]
   32ff4:	ldr	sl, [r2, r3]
   32ff8:	add	r1, r2, r3
   32ffc:	cmp	sl, #0
   33000:	ble	33068 <__assert_fail@plt+0x20a74>
   33004:	ldr	r6, [r1, #8]
   33008:	mov	r5, #0
   3300c:	sub	r6, r6, #4
   33010:	b	3301c <__assert_fail@plt+0x20a28>
   33014:	cmp	r5, sl
   33018:	beq	33068 <__assert_fail@plt+0x20a74>
   3301c:	ldr	r4, [r6, #4]!
   33020:	add	r5, r5, #1
   33024:	ldr	r3, [r4]
   33028:	cmp	r3, r7
   3302c:	bne	33014 <__assert_fail@plt+0x20a20>
   33030:	ldrb	r3, [r4, #52]	; 0x34
   33034:	and	r3, r3, #15
   33038:	cmp	fp, r3
   3303c:	bne	33014 <__assert_fail@plt+0x20a20>
   33040:	ldr	r3, [r4, #40]	; 0x28
   33044:	mov	r1, r8
   33048:	subs	r0, r3, #0
   3304c:	beq	33014 <__assert_fail@plt+0x20a20>
   33050:	bl	32408 <__assert_fail@plt+0x1fe14>
   33054:	cmp	r0, #0
   33058:	beq	33014 <__assert_fail@plt+0x20a20>
   3305c:	mov	r0, r4
   33060:	add	sp, sp, #36	; 0x24
   33064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33068:	mov	r1, #1
   3306c:	mov	r0, #56	; 0x38
   33070:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   33074:	subs	r4, r0, #0
   33078:	beq	33238 <__assert_fail@plt+0x20c44>
   3307c:	add	r3, r4, #4
   33080:	mov	r0, r3
   33084:	mov	r1, r8
   33088:	str	r3, [sp, #4]
   3308c:	bl	32dd4 <__assert_fail@plt+0x207e0>
   33090:	ldr	r3, [sp, #4]
   33094:	subs	sl, r0, #0
   33098:	bne	332b0 <__assert_fail@plt+0x20cbc>
   3309c:	ldrb	r1, [r4, #52]	; 0x34
   330a0:	ldr	ip, [r8, #4]
   330a4:	and	r2, fp, #15
   330a8:	bic	r1, r1, #15
   330ac:	orr	r2, r2, r1
   330b0:	cmp	ip, #0
   330b4:	str	r3, [r4, #40]	; 0x28
   330b8:	strb	r2, [r4, #52]	; 0x34
   330bc:	ble	33218 <__assert_fail@plt+0x20c24>
   330c0:	add	r2, r4, #12
   330c4:	str	r2, [sp, #12]
   330c8:	add	r2, r4, #8
   330cc:	str	r2, [sp, #16]
   330d0:	and	r2, fp, #4
   330d4:	str	r2, [sp, #8]
   330d8:	and	r2, fp, #2
   330dc:	and	fp, fp, #1
   330e0:	str	r7, [sp, #20]
   330e4:	ldr	r6, [pc, #464]	; 332bc <__assert_fail@plt+0x20cc8>
   330e8:	mov	r7, fp
   330ec:	mov	r5, sl
   330f0:	str	r2, [sp, #4]
   330f4:	mov	fp, r3
   330f8:	b	33144 <__assert_fail@plt+0x20b50>
   330fc:	cmp	r7, #0
   33100:	beq	331ec <__assert_fail@plt+0x20bf8>
   33104:	tst	r2, #2
   33108:	bne	331ec <__assert_fail@plt+0x20bf8>
   3310c:	tst	r2, #16
   33110:	beq	33120 <__assert_fail@plt+0x20b2c>
   33114:	ldr	r3, [sp, #4]
   33118:	cmp	r3, #0
   3311c:	beq	331ec <__assert_fail@plt+0x20bf8>
   33120:	tst	r2, #64	; 0x40
   33124:	beq	33134 <__assert_fail@plt+0x20b40>
   33128:	ldr	r3, [sp, #8]
   3312c:	cmp	r3, #0
   33130:	beq	331ec <__assert_fail@plt+0x20bf8>
   33134:	ldr	ip, [r8, #4]
   33138:	add	r5, r5, #1
   3313c:	cmp	r5, ip
   33140:	bge	33214 <__assert_fail@plt+0x20c20>
   33144:	ldr	r2, [r8, #8]
   33148:	ldr	r1, [r9]
   3314c:	ldr	r2, [r2, r5, lsl #2]
   33150:	add	r1, r1, r2, lsl #3
   33154:	ldr	r2, [r1, #4]
   33158:	ldrb	r0, [r1, #4]
   3315c:	ands	r2, r6, r2, lsr #8
   33160:	moveq	lr, #1
   33164:	movne	lr, #0
   33168:	cmp	r0, #1
   3316c:	movne	lr, #0
   33170:	andeq	lr, lr, #1
   33174:	cmp	lr, #0
   33178:	bne	33138 <__assert_fail@plt+0x20b44>
   3317c:	ldrb	r1, [r1, #6]
   33180:	ldrb	lr, [r4, #52]	; 0x34
   33184:	cmp	r0, #2
   33188:	lsr	r1, r1, #4
   3318c:	orr	r1, r1, lr, lsr #5
   33190:	and	r1, r1, #1
   33194:	bic	lr, lr, #32
   33198:	orr	r1, lr, r1, lsl #5
   3319c:	strb	r1, [r4, #52]	; 0x34
   331a0:	uxtbeq	r1, r1
   331a4:	orreq	r1, r1, #16
   331a8:	strbeq	r1, [r4, #52]	; 0x34
   331ac:	beq	331c0 <__assert_fail@plt+0x20bcc>
   331b0:	cmp	r0, #4
   331b4:	ldrbeq	r1, [r4, #52]	; 0x34
   331b8:	orreq	r1, r1, #64	; 0x40
   331bc:	strbeq	r1, [r4, #52]	; 0x34
   331c0:	cmp	r2, #0
   331c4:	beq	33138 <__assert_fail@plt+0x20b44>
   331c8:	ldr	r1, [r4, #40]	; 0x28
   331cc:	cmp	fp, r1
   331d0:	beq	3326c <__assert_fail@plt+0x20c78>
   331d4:	tst	r2, #1
   331d8:	bne	330fc <__assert_fail@plt+0x20b08>
   331dc:	tst	r2, #2
   331e0:	beq	3310c <__assert_fail@plt+0x20b18>
   331e4:	cmp	r7, #0
   331e8:	beq	3310c <__assert_fail@plt+0x20b18>
   331ec:	subs	r2, r5, sl
   331f0:	bmi	33200 <__assert_fail@plt+0x20c0c>
   331f4:	ldr	r1, [r4, #8]
   331f8:	cmp	r2, r1
   331fc:	blt	33254 <__assert_fail@plt+0x20c60>
   33200:	ldr	ip, [r8, #4]
   33204:	add	r5, r5, #1
   33208:	cmp	r5, ip
   3320c:	add	sl, sl, #1
   33210:	blt	33144 <__assert_fail@plt+0x20b50>
   33214:	ldr	r7, [sp, #20]
   33218:	mov	r2, r7
   3321c:	mov	r0, r9
   33220:	mov	r1, r4
   33224:	bl	30f80 <__assert_fail@plt+0x1e98c>
   33228:	cmp	r0, #0
   3322c:	beq	3305c <__assert_fail@plt+0x20a68>
   33230:	mov	r0, r4
   33234:	bl	31be4 <__assert_fail@plt+0x1f5f0>
   33238:	ldr	r2, [sp, #24]
   3323c:	mov	r3, #12
   33240:	mov	r4, #0
   33244:	mov	r0, r4
   33248:	str	r3, [r2]
   3324c:	add	sp, sp, #36	; 0x24
   33250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33254:	sub	r1, r1, #1
   33258:	str	r1, [r4, #8]
   3325c:	ldr	r0, [sp, #16]
   33260:	ldr	r1, [sp, #12]
   33264:	bl	3260c <__assert_fail@plt+0x20018>
   33268:	b	33200 <__assert_fail@plt+0x20c0c>
   3326c:	mov	r0, #12
   33270:	str	r2, [sp, #28]
   33274:	bl	2fe38 <__assert_fail@plt+0x1d844>
   33278:	ldr	r2, [sp, #28]
   3327c:	subs	r1, r0, #0
   33280:	beq	33230 <__assert_fail@plt+0x20c3c>
   33284:	str	r1, [r4, #40]	; 0x28
   33288:	mov	r1, r8
   3328c:	str	r2, [sp, #28]
   33290:	bl	32dd4 <__assert_fail@plt+0x207e0>
   33294:	ldr	r2, [sp, #28]
   33298:	subs	sl, r0, #0
   3329c:	bne	33230 <__assert_fail@plt+0x20c3c>
   332a0:	ldrb	r1, [r4, #52]	; 0x34
   332a4:	orr	r1, r1, #128	; 0x80
   332a8:	strb	r1, [r4, #52]	; 0x34
   332ac:	b	331d4 <__assert_fail@plt+0x20be0>
   332b0:	mov	r0, r4
   332b4:	bl	2db68 <__assert_fail@plt+0x1b574>
   332b8:	b	33238 <__assert_fail@plt+0x20c44>
   332bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   332c0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   332c4:	ldr	r6, [r2, #4]
   332c8:	cmp	r6, #0
   332cc:	streq	r6, [r0]
   332d0:	moveq	r4, r6
   332d4:	beq	33364 <__assert_fail@plt+0x20d70>
   332d8:	ble	332f4 <__assert_fail@plt+0x20d00>
   332dc:	ldr	r3, [r2, #8]
   332e0:	add	lr, r3, r6, lsl #2
   332e4:	ldr	ip, [r3], #4
   332e8:	cmp	lr, r3
   332ec:	add	r6, r6, ip
   332f0:	bne	332e4 <__assert_fail@plt+0x20cf0>
   332f4:	ldr	r3, [r1, #68]	; 0x44
   332f8:	mov	sl, r2
   332fc:	and	r3, r3, r6
   33300:	ldr	r2, [r1, #32]
   33304:	add	r3, r3, r3, lsl #1
   33308:	mov	r7, r1
   3330c:	lsl	r3, r3, #2
   33310:	mov	r8, r0
   33314:	ldr	fp, [r2, r3]
   33318:	add	r1, r2, r3
   3331c:	cmp	fp, #0
   33320:	ble	3336c <__assert_fail@plt+0x20d78>
   33324:	ldr	r9, [r1, #8]
   33328:	mov	r5, #0
   3332c:	sub	r9, r9, #4
   33330:	b	3333c <__assert_fail@plt+0x20d48>
   33334:	cmp	r5, fp
   33338:	beq	3336c <__assert_fail@plt+0x20d78>
   3333c:	ldr	r4, [r9, #4]!
   33340:	add	r5, r5, #1
   33344:	ldr	r3, [r4]
   33348:	cmp	r3, r6
   3334c:	bne	33334 <__assert_fail@plt+0x20d40>
   33350:	mov	r1, sl
   33354:	add	r0, r4, #4
   33358:	bl	32408 <__assert_fail@plt+0x1fe14>
   3335c:	cmp	r0, #0
   33360:	beq	33334 <__assert_fail@plt+0x20d40>
   33364:	mov	r0, r4
   33368:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3336c:	mov	r1, #1
   33370:	mov	r0, #56	; 0x38
   33374:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   33378:	subs	r4, r0, #0
   3337c:	beq	33488 <__assert_fail@plt+0x20e94>
   33380:	add	r5, r4, #4
   33384:	mov	r0, r5
   33388:	mov	r1, sl
   3338c:	bl	32dd4 <__assert_fail@plt+0x207e0>
   33390:	cmp	r0, #0
   33394:	bne	334ac <__assert_fail@plt+0x20eb8>
   33398:	ldr	lr, [sl, #4]
   3339c:	str	r5, [r4, #40]	; 0x28
   333a0:	cmp	lr, #0
   333a4:	ble	33468 <__assert_fail@plt+0x20e74>
   333a8:	ldr	ip, [sl, #8]
   333ac:	ldr	r5, [r7]
   333b0:	ldr	r9, [pc, #256]	; 334b8 <__assert_fail@plt+0x20ec4>
   333b4:	add	lr, ip, lr, lsl #2
   333b8:	b	33414 <__assert_fail@plt+0x20e20>
   333bc:	ldrb	r3, [r2, #6]
   333c0:	ldrb	r1, [r4, #52]	; 0x34
   333c4:	cmp	r0, #2
   333c8:	lsr	r3, r3, #4
   333cc:	orr	r3, r3, r1, lsr #5
   333d0:	and	r3, r3, #1
   333d4:	bic	r1, r1, #32
   333d8:	orr	r3, r1, r3, lsl #5
   333dc:	strb	r3, [r4, #52]	; 0x34
   333e0:	uxtbeq	r3, r3
   333e4:	orreq	r3, r3, #16
   333e8:	strbeq	r3, [r4, #52]	; 0x34
   333ec:	beq	3340c <__assert_fail@plt+0x20e18>
   333f0:	cmp	r0, #4
   333f4:	beq	3349c <__assert_fail@plt+0x20ea8>
   333f8:	cmp	r0, #12
   333fc:	beq	33454 <__assert_fail@plt+0x20e60>
   33400:	ldr	r3, [r2, #4]
   33404:	tst	r3, r9
   33408:	bne	33454 <__assert_fail@plt+0x20e60>
   3340c:	cmp	lr, ip
   33410:	beq	33468 <__assert_fail@plt+0x20e74>
   33414:	ldr	r2, [ip], #4
   33418:	add	r2, r5, r2, lsl #3
   3341c:	ldrb	r0, [r2, #4]
   33420:	cmp	r0, #1
   33424:	bne	333bc <__assert_fail@plt+0x20dc8>
   33428:	ldr	r3, [r2, #4]
   3342c:	tst	r3, r9
   33430:	beq	3340c <__assert_fail@plt+0x20e18>
   33434:	ldrb	r3, [r2, #6]
   33438:	ldrb	r2, [r4, #52]	; 0x34
   3343c:	lsr	r3, r3, #4
   33440:	orr	r3, r3, r2, lsr #5
   33444:	and	r3, r3, #1
   33448:	bic	r2, r2, #32
   3344c:	orr	r3, r2, r3, lsl #5
   33450:	strb	r3, [r4, #52]	; 0x34
   33454:	ldrb	r3, [r4, #52]	; 0x34
   33458:	cmp	lr, ip
   3345c:	orr	r3, r3, #128	; 0x80
   33460:	strb	r3, [r4, #52]	; 0x34
   33464:	bne	33414 <__assert_fail@plt+0x20e20>
   33468:	mov	r2, r6
   3346c:	mov	r0, r7
   33470:	mov	r1, r4
   33474:	bl	30f80 <__assert_fail@plt+0x1e98c>
   33478:	cmp	r0, #0
   3347c:	beq	33364 <__assert_fail@plt+0x20d70>
   33480:	mov	r0, r4
   33484:	bl	31be4 <__assert_fail@plt+0x1f5f0>
   33488:	mov	r4, #0
   3348c:	mov	r3, #12
   33490:	str	r3, [r8]
   33494:	mov	r0, r4
   33498:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3349c:	ldrb	r3, [r4, #52]	; 0x34
   334a0:	orr	r3, r3, #64	; 0x40
   334a4:	strb	r3, [r4, #52]	; 0x34
   334a8:	b	3340c <__assert_fail@plt+0x20e18>
   334ac:	mov	r0, r4
   334b0:	bl	2db68 <__assert_fail@plt+0x1b574>
   334b4:	b	33488 <__assert_fail@plt+0x20e94>
   334b8:	andeq	pc, r3, r0, lsl #30
   334bc:	push	{r4, r5, r6, r7, r8, lr}
   334c0:	subs	r7, r3, #0
   334c4:	sub	sp, sp, #16
   334c8:	movgt	r8, r0
   334cc:	movgt	r4, r1
   334d0:	movgt	r5, r2
   334d4:	movgt	r6, #0
   334d8:	bgt	33510 <__assert_fail@plt+0x20f1c>
   334dc:	b	33564 <__assert_fail@plt+0x20f70>
   334e0:	bl	332c0 <__assert_fail@plt+0x20ccc>
   334e4:	str	r0, [r4]
   334e8:	ldr	r0, [sp, #12]
   334ec:	bl	2db68 <__assert_fail@plt+0x1b574>
   334f0:	ldr	ip, [sp]
   334f4:	cmp	ip, #0
   334f8:	bne	33558 <__assert_fail@plt+0x20f64>
   334fc:	add	r6, r6, #1
   33500:	cmp	r7, r6
   33504:	add	r4, r4, #4
   33508:	add	r5, r5, #4
   3350c:	beq	33564 <__assert_fail@plt+0x20f70>
   33510:	ldr	r2, [r4]
   33514:	ldr	r3, [r5]
   33518:	cmp	r2, #0
   3351c:	add	r0, sp, #4
   33520:	add	r1, r2, #4
   33524:	streq	r3, [r4]
   33528:	beq	334fc <__assert_fail@plt+0x20f08>
   3352c:	cmp	r3, #0
   33530:	add	r2, r3, #4
   33534:	beq	334fc <__assert_fail@plt+0x20f08>
   33538:	bl	32e4c <__assert_fail@plt+0x20858>
   3353c:	add	r2, sp, #4
   33540:	mov	r1, r8
   33544:	mov	ip, r0
   33548:	cmp	ip, #0
   3354c:	mov	r0, sp
   33550:	str	ip, [sp]
   33554:	beq	334e0 <__assert_fail@plt+0x20eec>
   33558:	mov	r0, ip
   3355c:	add	sp, sp, #16
   33560:	pop	{r4, r5, r6, r7, r8, pc}
   33564:	mov	ip, #0
   33568:	mov	r0, ip
   3356c:	add	sp, sp, #16
   33570:	pop	{r4, r5, r6, r7, r8, pc}
   33574:	ldr	ip, [r1, #4]
   33578:	cmp	ip, #0
   3357c:	beq	336ac <__assert_fail@plt+0x210b8>
   33580:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33584:	ldr	lr, [r2, #4]
   33588:	cmp	lr, #0
   3358c:	beq	33688 <__assert_fail@plt+0x21094>
   33590:	ldr	r3, [r0, #4]
   33594:	mov	r9, r2
   33598:	ldr	r4, [r0]
   3359c:	add	r2, ip, lr
   335a0:	mov	r8, r1
   335a4:	add	r1, r2, r3
   335a8:	cmp	r1, r4
   335ac:	mov	r7, r0
   335b0:	bgt	336f0 <__assert_fail@plt+0x210fc>
   335b4:	ldr	r0, [r0, #8]
   335b8:	ldr	sl, [r8, #8]
   335bc:	ldr	r2, [r9, #8]
   335c0:	sub	r5, ip, #1
   335c4:	sub	r6, lr, #1
   335c8:	add	r1, r3, ip
   335cc:	ldr	r4, [r2, r6, lsl #2]
   335d0:	ldr	ip, [sl, r5, lsl #2]
   335d4:	add	r1, r1, lr
   335d8:	sub	r3, r3, #1
   335dc:	cmp	ip, r4
   335e0:	beq	335fc <__assert_fail@plt+0x21008>
   335e4:	bge	33690 <__assert_fail@plt+0x2109c>
   335e8:	subs	r6, r6, #1
   335ec:	bmi	33648 <__assert_fail@plt+0x21054>
   335f0:	ldr	r4, [r2, r6, lsl #2]
   335f4:	cmp	ip, r4
   335f8:	bne	335e4 <__assert_fail@plt+0x20ff0>
   335fc:	cmp	r3, #0
   33600:	blt	3362c <__assert_fail@plt+0x21038>
   33604:	ldr	lr, [r0, r3, lsl #2]
   33608:	add	ip, r0, r3, lsl #2
   3360c:	cmp	lr, r4
   33610:	bgt	33624 <__assert_fail@plt+0x21030>
   33614:	b	336a0 <__assert_fail@plt+0x210ac>
   33618:	ldr	lr, [ip, #-4]!
   3361c:	cmp	lr, r4
   33620:	ble	336a0 <__assert_fail@plt+0x210ac>
   33624:	subs	r3, r3, #1
   33628:	bcs	33618 <__assert_fail@plt+0x21024>
   3362c:	sub	r1, r1, #1
   33630:	str	r4, [r0, r1, lsl #2]
   33634:	subs	r5, r5, #1
   33638:	bmi	33648 <__assert_fail@plt+0x21054>
   3363c:	subs	r6, r6, #1
   33640:	ldrpl	ip, [sl, r5, lsl #2]
   33644:	bpl	335f0 <__assert_fail@plt+0x20ffc>
   33648:	ldr	lr, [r7, #4]
   3364c:	ldr	ip, [r8, #4]
   33650:	ldr	r3, [r9, #4]
   33654:	add	ip, lr, ip
   33658:	add	ip, ip, r3
   3365c:	sub	r2, ip, r1
   33660:	sub	r3, lr, #1
   33664:	cmp	r3, #0
   33668:	cmpge	r2, #0
   3366c:	add	lr, lr, r2
   33670:	sub	ip, ip, #1
   33674:	str	lr, [r7, #4]
   33678:	bgt	336c4 <__assert_fail@plt+0x210d0>
   3367c:	lsl	r2, r2, #2
   33680:	add	r1, r0, r1, lsl #2
   33684:	bl	12024 <memcpy@plt>
   33688:	mov	r0, #0
   3368c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33690:	subs	r5, r5, #1
   33694:	bmi	33648 <__assert_fail@plt+0x21054>
   33698:	ldr	ip, [sl, r5, lsl #2]
   3369c:	b	335dc <__assert_fail@plt+0x20fe8>
   336a0:	cmp	lr, r4
   336a4:	bne	3362c <__assert_fail@plt+0x21038>
   336a8:	b	33634 <__assert_fail@plt+0x21040>
   336ac:	mov	r0, ip
   336b0:	bx	lr
   336b4:	sub	r3, r3, #1
   336b8:	cmn	r3, #1
   336bc:	str	lr, [r0, r6, lsl #2]
   336c0:	beq	3367c <__assert_fail@plt+0x21088>
   336c4:	ldr	r4, [r0, ip, lsl #2]
   336c8:	ldr	lr, [r0, r3, lsl #2]
   336cc:	add	r6, r3, r2
   336d0:	cmp	r4, lr
   336d4:	mov	r5, r6
   336d8:	ble	336b4 <__assert_fail@plt+0x210c0>
   336dc:	subs	r2, r2, #1
   336e0:	sub	ip, ip, #1
   336e4:	str	r4, [r0, r6, lsl #2]
   336e8:	bne	336c4 <__assert_fail@plt+0x210d0>
   336ec:	b	33680 <__assert_fail@plt+0x2108c>
   336f0:	add	r4, r2, r4
   336f4:	ldr	r0, [r0, #8]
   336f8:	lsl	r1, r4, #2
   336fc:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   33700:	cmp	r0, #0
   33704:	beq	33720 <__assert_fail@plt+0x2112c>
   33708:	ldr	ip, [r8, #4]
   3370c:	ldr	lr, [r9, #4]
   33710:	ldr	r3, [r7, #4]
   33714:	str	r0, [r7, #8]
   33718:	str	r4, [r7]
   3371c:	b	335b8 <__assert_fail@plt+0x20fc4>
   33720:	mov	r0, #12
   33724:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3372c:	mov	r9, r1
   33730:	ldr	r7, [r0, #28]
   33734:	add	r1, r1, r1, lsl #1
   33738:	sub	sp, sp, #36	; 0x24
   3373c:	add	r7, r7, r1, lsl #2
   33740:	mov	r5, #0
   33744:	str	r5, [sp, #24]
   33748:	str	r5, [sp, #20]
   3374c:	str	r5, [sp, #28]
   33750:	ldr	r6, [r7, #4]
   33754:	str	r3, [sp, #12]
   33758:	cmp	r6, r5
   3375c:	ble	33944 <__assert_fail@plt+0x21350>
   33760:	add	r3, r7, #8
   33764:	str	r3, [sp]
   33768:	add	r3, r2, #8
   3376c:	mov	r8, r0
   33770:	str	r3, [sp, #8]
   33774:	str	r2, [sp, #4]
   33778:	b	337c4 <__assert_fail@plt+0x211d0>
   3377c:	ldr	r3, [sp, #4]
   33780:	mov	r2, fp
   33784:	ldr	r1, [sp, #8]
   33788:	ldr	r0, [r3, #4]
   3378c:	bl	3247c <__assert_fail@plt+0x1fe88>
   33790:	cmp	r0, #0
   33794:	beq	33820 <__assert_fail@plt+0x2122c>
   33798:	ldr	r2, [r8, #28]
   3379c:	ldr	r1, [sp, #12]
   337a0:	add	r2, r2, r4
   337a4:	add	r0, sp, #20
   337a8:	bl	33574 <__assert_fail@plt+0x20f80>
   337ac:	cmp	r0, #0
   337b0:	bne	3392c <__assert_fail@plt+0x21338>
   337b4:	ldr	r6, [r7, #4]
   337b8:	add	r5, r5, #1
   337bc:	cmp	r6, r5
   337c0:	ble	33880 <__assert_fail@plt+0x2128c>
   337c4:	ldr	r3, [r7, #8]
   337c8:	ldr	r4, [r3, r5, lsl #2]
   337cc:	cmp	r9, r4
   337d0:	beq	337b8 <__assert_fail@plt+0x211c4>
   337d4:	ldr	r3, [r8]
   337d8:	add	r3, r3, r4, lsl #3
   337dc:	ldrb	r3, [r3, #4]
   337e0:	tst	r3, #8
   337e4:	beq	337b8 <__assert_fail@plt+0x211c4>
   337e8:	add	r4, r4, r4, lsl #1
   337ec:	ldr	r3, [r8, #20]
   337f0:	lsl	r4, r4, #2
   337f4:	add	r3, r3, r4
   337f8:	ldr	r1, [sp]
   337fc:	ldmib	r3, {r3, sl}
   33800:	mov	r0, r6
   33804:	ldr	fp, [sl]
   33808:	cmp	r3, #1
   3380c:	mov	r2, fp
   33810:	ble	33864 <__assert_fail@plt+0x21270>
   33814:	bl	3247c <__assert_fail@plt+0x1fe88>
   33818:	cmp	r0, #0
   3381c:	beq	3377c <__assert_fail@plt+0x21188>
   33820:	ldr	sl, [sl, #4]
   33824:	cmp	sl, #0
   33828:	ble	337b8 <__assert_fail@plt+0x211c4>
   3382c:	mov	r2, sl
   33830:	ldr	r1, [sp]
   33834:	mov	r0, r6
   33838:	bl	3247c <__assert_fail@plt+0x1fe88>
   3383c:	cmp	r0, #0
   33840:	bne	337b8 <__assert_fail@plt+0x211c4>
   33844:	mov	r2, sl
   33848:	ldr	r3, [sp, #4]
   3384c:	ldr	r1, [sp, #8]
   33850:	ldr	r0, [r3, #4]
   33854:	bl	3247c <__assert_fail@plt+0x1fe88>
   33858:	cmp	r0, #0
   3385c:	beq	337b8 <__assert_fail@plt+0x211c4>
   33860:	b	33798 <__assert_fail@plt+0x211a4>
   33864:	bl	3247c <__assert_fail@plt+0x1fe88>
   33868:	cmp	r0, #0
   3386c:	moveq	r2, fp
   33870:	beq	33848 <__assert_fail@plt+0x21254>
   33874:	add	r5, r5, #1
   33878:	cmp	r6, r5
   3387c:	bgt	337c4 <__assert_fail@plt+0x211d0>
   33880:	cmp	r6, #0
   33884:	ldr	fp, [sp, #4]
   33888:	ble	33914 <__assert_fail@plt+0x21320>
   3388c:	mov	r4, #0
   33890:	add	r8, fp, #8
   33894:	add	r9, fp, #4
   33898:	b	338a4 <__assert_fail@plt+0x212b0>
   3389c:	cmp	r6, r4
   338a0:	ble	33914 <__assert_fail@plt+0x21320>
   338a4:	ldr	r3, [r7, #8]
   338a8:	add	r1, sp, #28
   338ac:	ldr	r0, [sp, #24]
   338b0:	ldr	r5, [r3, r4, lsl #2]
   338b4:	add	r4, r4, #1
   338b8:	mov	r2, r5
   338bc:	bl	3247c <__assert_fail@plt+0x1fe88>
   338c0:	mov	r2, r5
   338c4:	mov	r1, r8
   338c8:	cmp	r0, #0
   338cc:	bne	3389c <__assert_fail@plt+0x212a8>
   338d0:	ldr	r5, [fp, #4]
   338d4:	mov	r0, r5
   338d8:	bl	3247c <__assert_fail@plt+0x1fe88>
   338dc:	sub	r2, r0, #1
   338e0:	cmp	r2, r5
   338e4:	movlt	r3, #0
   338e8:	movge	r3, #1
   338ec:	orrs	r3, r3, r2, lsr #31
   338f0:	bne	3389c <__assert_fail@plt+0x212a8>
   338f4:	sub	r5, r5, #1
   338f8:	str	r5, [fp, #4]
   338fc:	mov	r1, r8
   33900:	mov	r0, r9
   33904:	bl	3260c <__assert_fail@plt+0x20018>
   33908:	ldr	r6, [r7, #4]
   3390c:	cmp	r6, r4
   33910:	bgt	338a4 <__assert_fail@plt+0x212b0>
   33914:	ldr	r0, [sp, #28]
   33918:	bl	2db68 <__assert_fail@plt+0x1b574>
   3391c:	mov	r4, #0
   33920:	mov	r0, r4
   33924:	add	sp, sp, #36	; 0x24
   33928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3392c:	mov	r4, r0
   33930:	ldr	r0, [sp, #28]
   33934:	bl	2db68 <__assert_fail@plt+0x1b574>
   33938:	mov	r0, r4
   3393c:	add	sp, sp, #36	; 0x24
   33940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33944:	mov	r0, r5
   33948:	b	33918 <__assert_fail@plt+0x21324>
   3394c:	ldrb	r2, [r1, #24]
   33950:	cmp	r2, #16
   33954:	beq	339c4 <__assert_fail@plt+0x213d0>
   33958:	push	{r4, r5, r6, lr}
   3395c:	add	r3, r1, #20
   33960:	mov	r4, r1
   33964:	mov	r5, r0
   33968:	str	r1, [r4, #12]
   3396c:	ldm	r3, {r1, r2}
   33970:	bl	319a0 <__assert_fail@plt+0x1f3ac>
   33974:	cmn	r0, #1
   33978:	str	r0, [r4, #28]
   3397c:	beq	339e0 <__assert_fail@plt+0x213ec>
   33980:	ldrb	r3, [r4, #24]
   33984:	cmp	r3, #12
   33988:	beq	33994 <__assert_fail@plt+0x213a0>
   3398c:	mov	r0, #0
   33990:	pop	{r4, r5, r6, pc}
   33994:	ldr	r1, [r5]
   33998:	ldr	r2, [r4, #20]
   3399c:	add	r1, r1, r0, lsl #3
   339a0:	mov	r0, #0
   339a4:	ldr	r3, [r1, #4]
   339a8:	lsl	r2, r2, #22
   339ac:	bic	r3, r3, #261120	; 0x3fc00
   339b0:	lsr	r2, r2, #22
   339b4:	bic	r3, r3, #768	; 0x300
   339b8:	orr	r3, r3, r2, lsl #8
   339bc:	str	r3, [r1, #4]
   339c0:	pop	{r4, r5, r6, pc}
   339c4:	ldr	r3, [r1, #4]
   339c8:	mov	r0, #0
   339cc:	ldr	r2, [r3, #12]
   339d0:	ldr	r3, [r3, #28]
   339d4:	str	r2, [r1, #12]
   339d8:	str	r3, [r1, #28]
   339dc:	bx	lr
   339e0:	mov	r0, #12
   339e4:	pop	{r4, r5, r6, pc}
   339e8:	push	{r4, r5, r6, r7, r8, lr}
   339ec:	subs	r6, r1, #0
   339f0:	beq	33ae4 <__assert_fail@plt+0x214f0>
   339f4:	ldr	r2, [r6, #4]
   339f8:	cmp	r2, #0
   339fc:	mov	ip, r2
   33a00:	beq	33ae4 <__assert_fail@plt+0x214f0>
   33a04:	ldm	r0, {r1, r3}
   33a08:	mov	r5, r0
   33a0c:	add	r4, r3, r2, lsl #1
   33a10:	cmp	r1, r4
   33a14:	blt	33b0c <__assert_fail@plt+0x21518>
   33a18:	cmp	r3, #0
   33a1c:	beq	33b4c <__assert_fail@plt+0x21558>
   33a20:	sub	r2, r2, #1
   33a24:	sub	r3, r3, #1
   33a28:	mvn	r7, r2
   33a2c:	mvn	lr, r3
   33a30:	tst	r7, lr
   33a34:	bpl	33a70 <__assert_fail@plt+0x2147c>
   33a38:	ldr	r1, [r5, #8]
   33a3c:	ldr	r0, [r6, #8]
   33a40:	ldr	ip, [r1, r3, lsl #2]
   33a44:	ldr	r0, [r0, r2, lsl #2]
   33a48:	cmp	ip, r0
   33a4c:	beq	33a20 <__assert_fail@plt+0x2142c>
   33a50:	sublt	r4, r4, #1
   33a54:	sublt	r2, r2, #1
   33a58:	subge	r3, r3, #1
   33a5c:	mvnlt	r7, r2
   33a60:	mvnge	lr, r3
   33a64:	strlt	r0, [r1, r4, lsl #2]
   33a68:	tst	r7, lr
   33a6c:	bmi	33a38 <__assert_fail@plt+0x21444>
   33a70:	cmp	r2, #0
   33a74:	blt	33a94 <__assert_fail@plt+0x214a0>
   33a78:	add	r2, r2, #1
   33a7c:	sub	r4, r4, r2
   33a80:	ldr	r0, [r5, #8]
   33a84:	lsl	r2, r2, #2
   33a88:	add	r0, r0, r4, lsl #2
   33a8c:	ldr	r1, [r6, #8]
   33a90:	bl	12024 <memcpy@plt>
   33a94:	ldr	r1, [r6, #4]
   33a98:	ldr	ip, [r5, #4]
   33a9c:	add	r1, ip, r1, lsl #1
   33aa0:	subs	r2, r1, r4
   33aa4:	sub	r1, r1, #1
   33aa8:	beq	33ae4 <__assert_fail@plt+0x214f0>
   33aac:	ldr	r0, [r5, #8]
   33ab0:	sub	r3, ip, #1
   33ab4:	add	ip, ip, r2
   33ab8:	str	ip, [r5, #4]
   33abc:	ldr	lr, [r0, r1, lsl #2]
   33ac0:	ldr	ip, [r0, r3, lsl #2]
   33ac4:	add	r6, r3, r2
   33ac8:	cmp	lr, ip
   33acc:	mov	r5, r6
   33ad0:	ble	33aec <__assert_fail@plt+0x214f8>
   33ad4:	subs	r2, r2, #1
   33ad8:	sub	r1, r1, #1
   33adc:	str	lr, [r0, r6, lsl #2]
   33ae0:	bne	33abc <__assert_fail@plt+0x214c8>
   33ae4:	mov	r0, #0
   33ae8:	pop	{r4, r5, r6, r7, r8, pc}
   33aec:	subs	r3, r3, #1
   33af0:	str	ip, [r0, r6, lsl #2]
   33af4:	bpl	33abc <__assert_fail@plt+0x214c8>
   33af8:	lsl	r2, r2, #2
   33afc:	add	r1, r0, r4, lsl #2
   33b00:	bl	12024 <memcpy@plt>
   33b04:	mov	r0, #0
   33b08:	pop	{r4, r5, r6, r7, r8, pc}
   33b0c:	add	r2, r2, r1
   33b10:	ldr	r0, [r0, #8]
   33b14:	lsl	r1, r2, #3
   33b18:	lsl	r4, r2, #1
   33b1c:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   33b20:	cmp	r0, #0
   33b24:	beq	33b68 <__assert_fail@plt+0x21574>
   33b28:	ldr	r3, [r5, #4]
   33b2c:	str	r0, [r5, #8]
   33b30:	cmp	r3, #0
   33b34:	str	r4, [r5]
   33b38:	ldreq	ip, [r6, #4]
   33b3c:	beq	33b50 <__assert_fail@plt+0x2155c>
   33b40:	ldr	r2, [r6, #4]
   33b44:	add	r4, r3, r2, lsl #1
   33b48:	b	33a20 <__assert_fail@plt+0x2142c>
   33b4c:	ldr	r0, [r0, #8]
   33b50:	str	ip, [r5, #4]
   33b54:	ldr	r2, [r6, #4]
   33b58:	ldr	r1, [r6, #8]
   33b5c:	lsl	r2, r2, #2
   33b60:	bl	12024 <memcpy@plt>
   33b64:	b	33ae4 <__assert_fail@plt+0x214f0>
   33b68:	mov	r0, #12
   33b6c:	pop	{r4, r5, r6, r7, r8, pc}
   33b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33b74:	add	r7, r2, r2, lsl #1
   33b78:	mov	r4, r2
   33b7c:	ldr	r2, [r1, #20]
   33b80:	lsl	r7, r7, #2
   33b84:	add	r2, r2, r7
   33b88:	mov	r6, r1
   33b8c:	ldr	r1, [r2, #4]
   33b90:	sub	sp, sp, #44	; 0x2c
   33b94:	add	r1, r1, #1
   33b98:	mov	r2, #0
   33b9c:	mov	sl, r0
   33ba0:	lsl	r0, r1, #2
   33ba4:	str	r3, [sp, #12]
   33ba8:	str	r1, [sp, #16]
   33bac:	str	r2, [sp, #20]
   33bb0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   33bb4:	cmp	r0, #0
   33bb8:	str	r0, [sp, #24]
   33bbc:	beq	33d98 <__assert_fail@plt+0x217a4>
   33bc0:	ldr	r8, [r6]
   33bc4:	ldr	r3, [sp, #20]
   33bc8:	lsl	r5, r4, #3
   33bcc:	add	lr, r8, r5
   33bd0:	str	r4, [r0, r3, lsl #2]
   33bd4:	ldr	r1, [r6, #24]
   33bd8:	ldr	r0, [lr, #4]
   33bdc:	ldr	r2, [pc, #452]	; 33da8 <__assert_fail@plt+0x217b4>
   33be0:	add	ip, r1, r7
   33be4:	and	r2, r2, r0
   33be8:	add	r3, r3, #1
   33bec:	cmp	r2, #0
   33bf0:	mvn	r2, #0
   33bf4:	str	r3, [sp, #20]
   33bf8:	str	r2, [ip, #4]
   33bfc:	beq	33c2c <__assert_fail@plt+0x21638>
   33c00:	ldr	r3, [r6, #20]
   33c04:	add	r3, r3, r7
   33c08:	ldr	r2, [r3, #4]
   33c0c:	cmp	r2, #0
   33c10:	beq	33cfc <__assert_fail@plt+0x21708>
   33c14:	ldr	r3, [r3, #8]
   33c18:	ldr	r3, [r3]
   33c1c:	add	r8, r8, r3, lsl #3
   33c20:	ldrb	r3, [r8, #6]
   33c24:	tst	r3, #4
   33c28:	beq	33d60 <__assert_fail@plt+0x2176c>
   33c2c:	ldrb	r3, [lr, #4]
   33c30:	tst	r3, #8
   33c34:	beq	33cf8 <__assert_fail@plt+0x21704>
   33c38:	ldr	ip, [r6, #20]
   33c3c:	add	r3, ip, r7
   33c40:	ldr	r2, [r3, #4]
   33c44:	cmp	r2, #0
   33c48:	ble	33cf8 <__assert_fail@plt+0x21704>
   33c4c:	mov	r9, #0
   33c50:	mov	r5, r9
   33c54:	mov	fp, #1
   33c58:	add	r8, sp, #28
   33c5c:	b	33cb0 <__assert_fail@plt+0x216bc>
   33c60:	cmp	r0, #0
   33c64:	beq	33d20 <__assert_fail@plt+0x2172c>
   33c68:	ldm	r3, {r0, r1, r2}
   33c6c:	stm	r8, {r0, r1, r2}
   33c70:	mov	r1, r8
   33c74:	add	r0, sp, #16
   33c78:	bl	339e8 <__assert_fail@plt+0x213f4>
   33c7c:	cmp	r0, #0
   33c80:	bne	33d38 <__assert_fail@plt+0x21744>
   33c84:	ldr	r1, [r6, #24]
   33c88:	add	r4, r1, r4
   33c8c:	ldr	r3, [r4, #4]
   33c90:	cmp	r3, #0
   33c94:	beq	33d48 <__assert_fail@plt+0x21754>
   33c98:	ldr	ip, [r6, #20]
   33c9c:	add	r3, ip, r7
   33ca0:	add	r5, r5, #1
   33ca4:	ldr	r2, [r3, #4]
   33ca8:	cmp	r2, r5
   33cac:	ble	33cd8 <__assert_fail@plt+0x216e4>
   33cb0:	ldr	r3, [r3, #8]
   33cb4:	ldr	r2, [r3, r5, lsl #2]
   33cb8:	add	r4, r2, r2, lsl #1
   33cbc:	lsl	r4, r4, #2
   33cc0:	add	r3, r1, r4
   33cc4:	ldr	r0, [r3, #4]
   33cc8:	cmn	r0, #1
   33ccc:	bne	33c60 <__assert_fail@plt+0x2166c>
   33cd0:	mov	r9, fp
   33cd4:	b	33c9c <__assert_fail@plt+0x216a8>
   33cd8:	ldr	r3, [sp, #12]
   33cdc:	eor	r3, r3, #1
   33ce0:	tst	r9, r3
   33ce4:	addne	r7, r1, r7
   33ce8:	movne	r3, #0
   33cec:	strne	r3, [r7, #4]
   33cf0:	addne	lr, sp, #16
   33cf4:	bne	33d08 <__assert_fail@plt+0x21714>
   33cf8:	add	ip, r1, r7
   33cfc:	add	lr, sp, #16
   33d00:	ldm	lr, {r0, r1, r2}
   33d04:	stm	ip, {r0, r1, r2}
   33d08:	mov	r3, #0
   33d0c:	ldm	lr, {r0, r1, r2}
   33d10:	stm	sl, {r0, r1, r2}
   33d14:	mov	r0, r3
   33d18:	add	sp, sp, #44	; 0x2c
   33d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d20:	mov	r3, #0
   33d24:	mov	r1, r6
   33d28:	mov	r0, r8
   33d2c:	bl	33b70 <__assert_fail@plt+0x2157c>
   33d30:	cmp	r0, #0
   33d34:	beq	33c70 <__assert_fail@plt+0x2167c>
   33d38:	mov	r3, r0
   33d3c:	mov	r0, r3
   33d40:	add	sp, sp, #44	; 0x2c
   33d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d48:	ldr	r0, [sp, #36]	; 0x24
   33d4c:	bl	2db68 <__assert_fail@plt+0x1b574>
   33d50:	mov	r9, fp
   33d54:	ldr	r1, [r6, #24]
   33d58:	ldr	ip, [r6, #20]
   33d5c:	b	33c9c <__assert_fail@plt+0x216a8>
   33d60:	ldr	r2, [pc, #68]	; 33dac <__assert_fail@plt+0x217b8>
   33d64:	mov	r3, r4
   33d68:	and	r0, r2, r0, lsr #8
   33d6c:	str	r0, [sp]
   33d70:	mov	r2, r4
   33d74:	mov	r1, r4
   33d78:	mov	r0, r6
   33d7c:	bl	32008 <__assert_fail@plt+0x1fa14>
   33d80:	subs	r3, r0, #0
   33d84:	bne	33d14 <__assert_fail@plt+0x21720>
   33d88:	ldr	lr, [r6]
   33d8c:	ldr	r1, [r6, #24]
   33d90:	add	lr, lr, r5
   33d94:	b	33c2c <__assert_fail@plt+0x21638>
   33d98:	mov	r3, #12
   33d9c:	mov	r0, r3
   33da0:	add	sp, sp, #44	; 0x2c
   33da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33da8:	andeq	pc, r3, r0, lsl #30
   33dac:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   33db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33db4:	mov	r8, r1
   33db8:	ldr	r1, [r1, #4]
   33dbc:	sub	sp, sp, #28
   33dc0:	mov	r6, #0
   33dc4:	mov	r7, r0
   33dc8:	lsl	r0, r1, #2
   33dcc:	mov	r5, r2
   33dd0:	mov	r4, r3
   33dd4:	str	r1, [sp, #12]
   33dd8:	str	r6, [sp, #16]
   33ddc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   33de0:	cmp	r0, r6
   33de4:	str	r0, [sp, #20]
   33de8:	beq	33ed4 <__assert_fail@plt+0x218e0>
   33dec:	ldr	r3, [r8, #4]
   33df0:	add	r9, sp, #12
   33df4:	cmp	r3, r6
   33df8:	ble	33e90 <__assert_fail@plt+0x2189c>
   33dfc:	ldr	r3, [r8, #8]
   33e00:	ldr	r1, [r7, #24]
   33e04:	ldr	r2, [r3, r6, lsl #2]
   33e08:	add	r3, r2, r2, lsl #1
   33e0c:	add	r1, r1, r3, lsl #2
   33e10:	ldr	fp, [r1, #4]
   33e14:	cmp	fp, #0
   33e18:	ble	33eb0 <__assert_fail@plt+0x218bc>
   33e1c:	ldr	ip, [r1, #8]
   33e20:	ldr	sl, [r7]
   33e24:	sub	ip, ip, #4
   33e28:	mov	r3, #0
   33e2c:	b	33e38 <__assert_fail@plt+0x21844>
   33e30:	cmp	fp, r3
   33e34:	beq	33eb0 <__assert_fail@plt+0x218bc>
   33e38:	ldr	r0, [ip, #4]!
   33e3c:	add	r3, r3, #1
   33e40:	add	lr, sl, r0, lsl #3
   33e44:	ldrb	lr, [lr, #4]
   33e48:	cmp	r4, lr
   33e4c:	bne	33e30 <__assert_fail@plt+0x2183c>
   33e50:	ldr	lr, [sl, r0, lsl #3]
   33e54:	cmp	r5, lr
   33e58:	bne	33e30 <__assert_fail@plt+0x2183c>
   33e5c:	cmn	r0, #1
   33e60:	beq	33eb0 <__assert_fail@plt+0x218bc>
   33e64:	str	r4, [sp]
   33e68:	mov	r3, r5
   33e6c:	mov	r1, r9
   33e70:	mov	r0, r7
   33e74:	bl	3250c <__assert_fail@plt+0x1ff18>
   33e78:	subs	sl, r0, #0
   33e7c:	bne	33ec0 <__assert_fail@plt+0x218cc>
   33e80:	ldr	r3, [r8, #4]
   33e84:	add	r6, r6, #1
   33e88:	cmp	r3, r6
   33e8c:	bgt	33dfc <__assert_fail@plt+0x21808>
   33e90:	ldr	r0, [r8, #8]
   33e94:	bl	2db68 <__assert_fail@plt+0x1b574>
   33e98:	ldm	r9, {r0, r1, r2}
   33e9c:	mov	sl, #0
   33ea0:	stm	r8, {r0, r1, r2}
   33ea4:	mov	r0, sl
   33ea8:	add	sp, sp, #28
   33eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33eb0:	mov	r0, r9
   33eb4:	bl	339e8 <__assert_fail@plt+0x213f4>
   33eb8:	subs	sl, r0, #0
   33ebc:	beq	33e80 <__assert_fail@plt+0x2188c>
   33ec0:	ldr	r0, [sp, #20]
   33ec4:	bl	2db68 <__assert_fail@plt+0x1b574>
   33ec8:	mov	r0, sl
   33ecc:	add	sp, sp, #28
   33ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ed4:	mov	sl, #12
   33ed8:	mov	r0, sl
   33edc:	add	sp, sp, #28
   33ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ee8:	mov	r5, #0
   33eec:	ldr	r6, [r0, #108]	; 0x6c
   33ef0:	sub	sp, sp, #44	; 0x2c
   33ef4:	mov	r4, r6
   33ef8:	cmp	r5, r4
   33efc:	bge	33f58 <__assert_fail@plt+0x21964>
   33f00:	add	lr, r5, r4
   33f04:	ldr	r7, [r0, #116]	; 0x74
   33f08:	add	lr, lr, lr, lsr #31
   33f0c:	asr	lr, lr, #1
   33f10:	add	ip, lr, lr, lsl #1
   33f14:	add	ip, r7, ip, lsl #3
   33f18:	ldr	ip, [ip, #4]
   33f1c:	cmp	r2, ip
   33f20:	ble	33f48 <__assert_fail@plt+0x21954>
   33f24:	b	34178 <__assert_fail@plt+0x21b84>
   33f28:	asr	ip, ip, #1
   33f2c:	mov	r8, ip
   33f30:	add	r4, ip, ip, lsl #1
   33f34:	add	r4, r7, r4, lsl #3
   33f38:	ldr	r4, [r4, #4]
   33f3c:	cmp	r2, r4
   33f40:	bgt	34180 <__assert_fail@plt+0x21b8c>
   33f44:	mov	lr, ip
   33f48:	add	ip, r5, lr
   33f4c:	cmp	r5, lr
   33f50:	add	ip, ip, ip, lsr #31
   33f54:	blt	33f28 <__assert_fail@plt+0x21934>
   33f58:	cmp	r6, r5
   33f5c:	ble	3416c <__assert_fail@plt+0x21b78>
   33f60:	add	ip, r5, r5, lsl #1
   33f64:	ldr	r4, [r0, #116]	; 0x74
   33f68:	lsl	ip, ip, #3
   33f6c:	add	lr, r4, ip
   33f70:	cmn	r5, #1
   33f74:	ldr	lr, [lr, #4]
   33f78:	movne	r5, #0
   33f7c:	moveq	r5, #1
   33f80:	cmp	lr, r2
   33f84:	orrne	r5, r5, #1
   33f88:	cmp	r5, #0
   33f8c:	bne	3416c <__assert_fail@plt+0x21b78>
   33f90:	ldr	fp, [r0, #84]	; 0x54
   33f94:	mov	r8, r1
   33f98:	mov	r9, r0
   33f9c:	add	r7, r1, #8
   33fa0:	str	r3, [sp, #16]
   33fa4:	add	r3, ip, #24
   33fa8:	str	r2, [sp, #8]
   33fac:	str	r3, [sp, #12]
   33fb0:	str	r5, [sp, #20]
   33fb4:	ldr	r3, [sp, #12]
   33fb8:	add	r4, r4, r3
   33fbc:	b	34008 <__assert_fail@plt+0x21a14>
   33fc0:	ldr	r3, [r9, #100]	; 0x64
   33fc4:	ldr	r2, [fp, #12]
   33fc8:	ldr	r3, [r3, r5, lsl #2]
   33fcc:	ldr	sl, [r2, sl, lsl #2]
   33fd0:	cmp	r3, #0
   33fd4:	beq	3418c <__assert_fail@plt+0x21b98>
   33fd8:	add	r1, r3, #12
   33fdc:	ldr	r0, [r3, #8]
   33fe0:	mov	r2, sl
   33fe4:	str	r3, [sp, #4]
   33fe8:	bl	3247c <__assert_fail@plt+0x1fe88>
   33fec:	ldr	r3, [sp, #4]
   33ff0:	cmp	r0, #0
   33ff4:	beq	340ec <__assert_fail@plt+0x21af8>
   33ff8:	add	r4, r4, #24
   33ffc:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   34000:	cmp	r3, #0
   34004:	beq	3416c <__assert_fail@plt+0x21b78>
   34008:	ldr	sl, [r4, #-24]	; 0xffffffe8
   3400c:	ldr	r6, [r8, #4]
   34010:	mov	r2, sl
   34014:	mov	r0, r6
   34018:	mov	r1, r7
   3401c:	bl	3247c <__assert_fail@plt+0x1fe88>
   34020:	cmp	r0, #0
   34024:	beq	33ff8 <__assert_fail@plt+0x21a04>
   34028:	ldr	r3, [sp, #8]
   3402c:	ldr	r5, [r4, #-12]
   34030:	ldr	r2, [r4, #-16]
   34034:	add	r5, r3, r5
   34038:	sub	r5, r5, r2
   3403c:	cmp	r3, r5
   34040:	bne	33fc0 <__assert_fail@plt+0x219cc>
   34044:	ldr	r2, [fp, #20]
   34048:	add	sl, sl, sl, lsl #1
   3404c:	mov	r0, r6
   34050:	add	sl, r2, sl, lsl #2
   34054:	mov	r1, r7
   34058:	ldr	r3, [sl, #8]
   3405c:	ldr	r5, [r3]
   34060:	mov	r2, r5
   34064:	bl	3247c <__assert_fail@plt+0x1fe88>
   34068:	cmp	r0, #0
   3406c:	bne	33ff8 <__assert_fail@plt+0x21a04>
   34070:	mov	r3, #1
   34074:	mov	r0, #4
   34078:	str	r3, [sp, #28]
   3407c:	str	r3, [sp, #32]
   34080:	bl	2fe38 <__assert_fail@plt+0x1d844>
   34084:	ldr	r3, [sp, #80]	; 0x50
   34088:	ldr	r2, [sp, #16]
   3408c:	add	r1, sp, #28
   34090:	cmp	r0, #0
   34094:	strne	r5, [r0]
   34098:	ldrne	ip, [sp, #20]
   3409c:	streq	r0, [sp, #32]
   340a0:	streq	r0, [sp, #28]
   340a4:	moveq	ip, #12
   340a8:	str	r0, [sp, #36]	; 0x24
   340ac:	mov	r0, fp
   340b0:	str	ip, [sp, #24]
   340b4:	bl	33db0 <__assert_fail@plt+0x217bc>
   340b8:	add	r1, sp, #28
   340bc:	mov	r4, r0
   340c0:	mov	r0, r8
   340c4:	bl	339e8 <__assert_fail@plt+0x213f4>
   340c8:	mov	r5, r0
   340cc:	ldr	r0, [sp, #36]	; 0x24
   340d0:	bl	2db68 <__assert_fail@plt+0x1b574>
   340d4:	ldr	r0, [sp, #24]
   340d8:	orr	r3, r4, r5
   340dc:	orrs	r3, r3, r0
   340e0:	bne	341e0 <__assert_fail@plt+0x21bec>
   340e4:	ldr	r4, [r9, #116]	; 0x74
   340e8:	b	33fb4 <__assert_fail@plt+0x219c0>
   340ec:	add	r1, r3, #4
   340f0:	add	r0, sp, #28
   340f4:	bl	32dd4 <__assert_fail@plt+0x207e0>
   340f8:	mov	r1, sl
   340fc:	str	r0, [sp, #24]
   34100:	add	r0, sp, #28
   34104:	bl	31eec <__assert_fail@plt+0x1f8f8>
   34108:	ldr	r3, [sp, #24]
   3410c:	eor	r0, r0, #1
   34110:	cmp	r3, #0
   34114:	orrne	r0, r0, #1
   34118:	tst	r0, #255	; 0xff
   3411c:	bne	341c0 <__assert_fail@plt+0x21bcc>
   34120:	add	r2, sp, #28
   34124:	mov	r1, fp
   34128:	add	r0, sp, #24
   3412c:	ldr	sl, [r9, #100]	; 0x64
   34130:	bl	332c0 <__assert_fail@plt+0x20ccc>
   34134:	str	r0, [sl, r5, lsl #2]
   34138:	ldr	r0, [sp, #36]	; 0x24
   3413c:	bl	2db68 <__assert_fail@plt+0x1b574>
   34140:	ldr	r3, [r9, #100]	; 0x64
   34144:	ldr	r3, [r3, r5, lsl #2]
   34148:	cmp	r3, #0
   3414c:	bne	33ff8 <__assert_fail@plt+0x21a04>
   34150:	ldr	r0, [sp, #24]
   34154:	cmp	r0, #0
   34158:	bne	34170 <__assert_fail@plt+0x21b7c>
   3415c:	add	r4, r4, #24
   34160:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   34164:	cmp	r3, #0
   34168:	bne	34008 <__assert_fail@plt+0x21a14>
   3416c:	mov	r0, #0
   34170:	add	sp, sp, #44	; 0x2c
   34174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34178:	mov	r8, lr
   3417c:	mov	lr, r4
   34180:	add	r5, r8, #1
   34184:	mov	r4, lr
   34188:	b	33ef8 <__assert_fail@plt+0x21904>
   3418c:	str	r3, [sp, #4]
   34190:	mov	r0, #4
   34194:	mov	r3, #1
   34198:	str	r3, [sp, #28]
   3419c:	str	r3, [sp, #32]
   341a0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   341a4:	cmp	r0, #0
   341a8:	str	r0, [sp, #36]	; 0x24
   341ac:	beq	341d4 <__assert_fail@plt+0x21be0>
   341b0:	ldr	r3, [sp, #4]
   341b4:	str	sl, [r0]
   341b8:	str	r3, [sp, #24]
   341bc:	b	34120 <__assert_fail@plt+0x21b2c>
   341c0:	ldr	r0, [sp, #36]	; 0x24
   341c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   341c8:	ldr	r0, [sp, #24]
   341cc:	cmp	r0, #0
   341d0:	bne	34170 <__assert_fail@plt+0x21b7c>
   341d4:	mov	r0, #12
   341d8:	add	sp, sp, #44	; 0x2c
   341dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341e0:	cmp	r0, #0
   341e4:	bne	34170 <__assert_fail@plt+0x21b7c>
   341e8:	cmp	r4, #0
   341ec:	movne	r0, r4
   341f0:	moveq	r0, r5
   341f4:	b	34170 <__assert_fail@plt+0x21b7c>
   341f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   341fc:	sub	sp, sp, #14400	; 0x3840
   34200:	sub	sp, sp, #28
   34204:	mov	r4, #0
   34208:	mov	r5, r1
   3420c:	str	r1, [sp, #8]
   34210:	str	r4, [r1, #44]	; 0x2c
   34214:	str	r4, [r1, #48]	; 0x30
   34218:	mov	r8, r0
   3421c:	mov	r1, r4
   34220:	add	r0, sp, #88	; 0x58
   34224:	mov	r2, #32
   34228:	bl	12378 <memset@plt>
   3422c:	ldr	r1, [r5, #8]
   34230:	cmp	r1, r4
   34234:	ble	34b8c <__assert_fail@plt+0x22598>
   34238:	add	r2, sp, #6208	; 0x1840
   3423c:	add	r2, r2, #24
   34240:	sub	r2, r2, #4
   34244:	str	r2, [sp, #32]
   34248:	str	r8, [sp, #28]
   3424c:	add	r2, r8, #128	; 0x80
   34250:	mov	r8, r4
   34254:	str	r4, [sp, #16]
   34258:	str	r2, [sp, #36]	; 0x24
   3425c:	ldr	r3, [sp, #8]
   34260:	ldr	r0, [sp, #16]
   34264:	ldr	r2, [r3, #12]
   34268:	ldr	r3, [sp, #28]
   3426c:	lsl	ip, r0, #2
   34270:	ldr	r2, [r2, r0, lsl #2]
   34274:	ldr	r3, [r3]
   34278:	str	ip, [sp, #12]
   3427c:	add	r0, r3, r2, lsl #3
   34280:	str	r0, [sp, #20]
   34284:	ldrb	ip, [r0, #4]
   34288:	ldr	r4, [r0, #4]
   3428c:	ldr	r0, [pc, #2548]	; 34c88 <__assert_fail@plt+0x22694>
   34290:	cmp	ip, #1
   34294:	str	ip, [sp, #4]
   34298:	and	r4, r0, r4, lsr #8
   3429c:	beq	34410 <__assert_fail@plt+0x21e1c>
   342a0:	ldr	r0, [sp, #4]
   342a4:	cmp	r0, #3
   342a8:	beq	346f0 <__assert_fail@plt+0x220fc>
   342ac:	ldr	r3, [sp, #4]
   342b0:	cmp	r3, #5
   342b4:	beq	3471c <__assert_fail@plt+0x22128>
   342b8:	ldr	r3, [sp, #4]
   342bc:	cmp	r3, #7
   342c0:	beq	349d4 <__assert_fail@plt+0x223e0>
   342c4:	ldr	r3, [sp, #16]
   342c8:	add	r3, r3, #1
   342cc:	cmp	r3, r1
   342d0:	str	r3, [sp, #16]
   342d4:	blt	3425c <__assert_fail@plt+0x21c68>
   342d8:	str	r8, [sp, #4]
   342dc:	ldr	r3, [sp, #4]
   342e0:	ldr	r8, [sp, #28]
   342e4:	cmp	r3, #0
   342e8:	ble	34b88 <__assert_fail@plt+0x22594>
   342ec:	ldr	r3, [sp, #4]
   342f0:	add	r6, sp, #2128	; 0x850
   342f4:	add	r3, r3, #1
   342f8:	add	r6, r6, #8
   342fc:	mov	r4, #0
   34300:	lsl	r0, r3, #2
   34304:	str	r3, [r6, #-2092]	; 0xfffff7d4
   34308:	str	r4, [r6, #-2088]	; 0xfffff7d8
   3430c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   34310:	cmp	r0, r4
   34314:	str	r0, [r6, #-2084]	; 0xfffff7dc
   34318:	beq	34a88 <__assert_fail@plt+0x22494>
   3431c:	add	r3, sp, #3152	; 0xc50
   34320:	add	r3, r3, #8
   34324:	mov	r1, r4
   34328:	add	r0, sp, #56	; 0x38
   3432c:	mov	r2, #32
   34330:	mov	r5, r3
   34334:	str	r4, [sp, #20]
   34338:	str	r3, [sp, #24]
   3433c:	str	r4, [r6, #-2096]	; 0xfffff7d0
   34340:	bl	12378 <memset@plt>
   34344:	add	r3, sp, #6208	; 0x1840
   34348:	add	r3, r3, #24
   3434c:	add	sl, sp, #1104	; 0x450
   34350:	mov	r9, r4
   34354:	mov	fp, r4
   34358:	add	sl, sl, #8
   3435c:	mov	r4, r5
   34360:	sub	r5, r3, #4
   34364:	add	r3, sp, #84	; 0x54
   34368:	str	r3, [sp, #12]
   3436c:	add	r3, sp, #40	; 0x28
   34370:	str	r3, [sp, #16]
   34374:	ldr	r2, [r4, #4]
   34378:	str	r9, [r6, #-2088]	; 0xfffff7d8
   3437c:	cmp	r2, #0
   34380:	movgt	r7, #0
   34384:	bgt	3439c <__assert_fail@plt+0x21da8>
   34388:	b	34810 <__assert_fail@plt+0x2221c>
   3438c:	ldr	r2, [r4, #4]
   34390:	add	r7, r7, #1
   34394:	cmp	r2, r7
   34398:	ble	34810 <__assert_fail@plt+0x2221c>
   3439c:	ldr	r1, [r4, #8]
   343a0:	ldr	r3, [r8, #12]
   343a4:	add	r0, sp, #44	; 0x2c
   343a8:	ldr	r1, [r1, r7, lsl #2]
   343ac:	ldr	r1, [r3, r1, lsl #2]
   343b0:	cmn	r1, #1
   343b4:	add	r1, r1, r1, lsl #1
   343b8:	beq	34390 <__assert_fail@plt+0x21d9c>
   343bc:	ldr	r3, [r8, #24]
   343c0:	add	r1, r3, r1, lsl #2
   343c4:	bl	339e8 <__assert_fail@plt+0x213f4>
   343c8:	cmp	r0, #0
   343cc:	str	r0, [r6, #-2096]	; 0xfffff7d0
   343d0:	beq	3438c <__assert_fail@plt+0x21d98>
   343d4:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   343d8:	bl	2db68 <__assert_fail@plt+0x1b574>
   343dc:	ldr	r5, [sp, #24]
   343e0:	ldr	r6, [sp, #4]
   343e4:	mov	r4, #0
   343e8:	ldr	r0, [r5, #8]
   343ec:	add	r4, r4, #1
   343f0:	bl	2db68 <__assert_fail@plt+0x1b574>
   343f4:	cmp	r4, r6
   343f8:	add	r5, r5, #12
   343fc:	bne	343e8 <__assert_fail@plt+0x21df4>
   34400:	mov	r0, #0
   34404:	add	sp, sp, #14400	; 0x3840
   34408:	add	sp, sp, #28
   3440c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34410:	ldrb	r3, [r3, r2, lsl #3]
   34414:	add	r2, sp, #88	; 0x58
   34418:	and	r1, r3, #31
   3441c:	asr	r3, r3, #5
   34420:	ldr	r2, [r2, r3, lsl #2]
   34424:	orr	r2, r2, ip, lsl r1
   34428:	add	r1, sp, #88	; 0x58
   3442c:	str	r2, [r1, r3, lsl #2]
   34430:	cmp	r4, #0
   34434:	beq	3451c <__assert_fail@plt+0x21f28>
   34438:	tst	r4, #32
   3443c:	bne	34784 <__assert_fail@plt+0x22190>
   34440:	tst	r4, #128	; 0x80
   34444:	bne	347b4 <__assert_fail@plt+0x221c0>
   34448:	tst	r4, #4
   3444c:	beq	344b4 <__assert_fail@plt+0x21ec0>
   34450:	ldr	r3, [sp, #4]
   34454:	cmp	r3, #1
   34458:	beq	34a74 <__assert_fail@plt+0x22480>
   3445c:	ldr	r2, [sp, #28]
   34460:	ldr	r3, [r2, #92]	; 0x5c
   34464:	cmp	r3, #1
   34468:	ble	34aa0 <__assert_fail@plt+0x224ac>
   3446c:	ldr	lr, [r2, #60]	; 0x3c
   34470:	ldr	r6, [sp, #36]	; 0x24
   34474:	add	r0, sp, #88	; 0x58
   34478:	sub	lr, lr, #4
   3447c:	add	r1, r2, #96	; 0x60
   34480:	mov	ip, #0
   34484:	ldr	r3, [lr, #4]!
   34488:	ldr	r5, [r1], #4
   3448c:	ldr	r2, [r0]
   34490:	mvn	r3, r3
   34494:	orr	r3, r3, r5
   34498:	and	r3, r3, r2
   3449c:	cmp	r6, r1
   344a0:	str	r3, [r0], #4
   344a4:	orr	ip, ip, r3
   344a8:	bne	34484 <__assert_fail@plt+0x21e90>
   344ac:	cmp	ip, #0
   344b0:	beq	34678 <__assert_fail@plt+0x22084>
   344b4:	tst	r4, #8
   344b8:	beq	3451c <__assert_fail@plt+0x21f28>
   344bc:	ldr	r3, [sp, #4]
   344c0:	cmp	r3, #1
   344c4:	beq	347c8 <__assert_fail@plt+0x221d4>
   344c8:	ldr	r2, [sp, #28]
   344cc:	ldr	r3, [r2, #92]	; 0x5c
   344d0:	cmp	r3, #1
   344d4:	ble	347dc <__assert_fail@plt+0x221e8>
   344d8:	ldr	lr, [r2, #60]	; 0x3c
   344dc:	ldr	r5, [sp, #36]	; 0x24
   344e0:	add	ip, sp, #88	; 0x58
   344e4:	sub	lr, lr, #4
   344e8:	add	r0, r2, #96	; 0x60
   344ec:	mov	r1, #0
   344f0:	ldr	r2, [r0], #4
   344f4:	ldr	r4, [lr, #4]!
   344f8:	ldr	r3, [ip]
   344fc:	and	r2, r2, r4
   34500:	bic	r3, r3, r2
   34504:	cmp	r5, r0
   34508:	str	r3, [ip], #4
   3450c:	orr	r1, r1, r3
   34510:	bne	344f0 <__assert_fail@plt+0x21efc>
   34514:	cmp	r1, #0
   34518:	beq	34678 <__assert_fail@plt+0x22084>
   3451c:	cmp	r8, #0
   34520:	movle	r6, #0
   34524:	ble	34670 <__assert_fail@plt+0x2207c>
   34528:	add	r3, sp, #3152	; 0xc50
   3452c:	add	r3, r3, #8
   34530:	ldr	ip, [sp, #32]
   34534:	mov	r7, r3
   34538:	mov	r6, #0
   3453c:	str	r3, [sp, #24]
   34540:	ldr	r3, [sp, #4]
   34544:	cmp	r3, #1
   34548:	beq	34684 <__assert_fail@plt+0x22090>
   3454c:	add	r0, sp, #88	; 0x58
   34550:	add	r9, sp, #1104	; 0x450
   34554:	add	r9, r9, #8
   34558:	add	r4, ip, #32
   3455c:	mov	r1, ip
   34560:	mov	r5, r0
   34564:	mov	lr, #0
   34568:	ldr	r2, [r1, #4]!
   3456c:	ldr	r3, [r5], #4
   34570:	cmp	r1, r4
   34574:	and	r3, r3, r2
   34578:	str	r3, [r9], #4
   3457c:	orr	lr, lr, r3
   34580:	bne	34568 <__assert_fail@plt+0x21f74>
   34584:	cmp	lr, #0
   34588:	beq	3465c <__assert_fail@plt+0x22068>
   3458c:	mov	r5, #0
   34590:	add	fp, sp, #2128	; 0x850
   34594:	mov	sl, r5
   34598:	add	fp, fp, #8
   3459c:	mov	lr, ip
   345a0:	ldr	r3, [r0]
   345a4:	ldr	r9, [lr, #4]!
   345a8:	bic	r2, r9, r3
   345ac:	cmp	r1, lr
   345b0:	bic	r3, r3, r9
   345b4:	str	r2, [fp], #4
   345b8:	orr	sl, sl, r2
   345bc:	str	r3, [r0], #4
   345c0:	orr	r5, r5, r3
   345c4:	bne	345a0 <__assert_fail@plt+0x21fac>
   345c8:	cmp	sl, #0
   345cc:	beq	34634 <__assert_fail@plt+0x22040>
   345d0:	add	sl, sp, #2128	; 0x850
   345d4:	add	sl, sl, #8
   345d8:	add	lr, sp, #14400	; 0x3840
   345dc:	ldm	sl!, {r0, r1, r2, r3}
   345e0:	add	lr, lr, #24
   345e4:	add	lr, lr, r8, lsl #5
   345e8:	sub	lr, lr, #8192	; 0x2000
   345ec:	add	r9, sp, #1104	; 0x450
   345f0:	stmia	lr!, {r0, r1, r2, r3}
   345f4:	add	r9, r9, #8
   345f8:	ldm	sl, {r0, r1, r2, r3}
   345fc:	add	ip, ip, #4
   34600:	add	fp, r8, r8, lsl #1
   34604:	stm	lr, {r0, r1, r2, r3}
   34608:	ldm	r9!, {r0, r1, r2, r3}
   3460c:	stmia	ip!, {r0, r1, r2, r3}
   34610:	ldm	r9, {r0, r1, r2, r3}
   34614:	stm	ip, {r0, r1, r2, r3}
   34618:	mov	r1, r7
   3461c:	ldr	r3, [sp, #24]
   34620:	add	r0, r3, fp, lsl #2
   34624:	bl	32dd4 <__assert_fail@plt+0x207e0>
   34628:	cmp	r0, #0
   3462c:	bne	346c4 <__assert_fail@plt+0x220d0>
   34630:	add	r8, r8, #1
   34634:	ldr	r3, [sp, #8]
   34638:	ldr	r2, [sp, #12]
   3463c:	mov	r0, r7
   34640:	ldr	r3, [r3, #12]
   34644:	ldr	r1, [r3, r2]
   34648:	bl	31eec <__assert_fail@plt+0x1f8f8>
   3464c:	cmp	r0, #0
   34650:	beq	346c4 <__assert_fail@plt+0x220d0>
   34654:	cmp	r5, #0
   34658:	beq	34670 <__assert_fail@plt+0x2207c>
   3465c:	add	r6, r6, #1
   34660:	cmp	r6, r8
   34664:	mov	ip, r4
   34668:	add	r7, r7, #12
   3466c:	blt	34540 <__assert_fail@plt+0x21f4c>
   34670:	cmp	r8, r6
   34674:	beq	34ae4 <__assert_fail@plt+0x224f0>
   34678:	ldr	r3, [sp, #8]
   3467c:	ldr	r1, [r3, #8]
   34680:	b	342c4 <__assert_fail@plt+0x21cd0>
   34684:	ldr	r3, [sp, #20]
   34688:	ldrb	r1, [r3]
   3468c:	lsl	r3, r6, #5
   34690:	and	r2, r1, #31
   34694:	asr	r1, r1, #5
   34698:	add	r3, r3, r1, lsl #2
   3469c:	add	r1, sp, #14400	; 0x3840
   346a0:	add	r1, r1, #24
   346a4:	add	r3, r1, r3
   346a8:	sub	r3, r3, #8192	; 0x2000
   346ac:	ldr	r3, [r3]
   346b0:	lsr	r2, r3, r2
   346b4:	tst	r2, #1
   346b8:	addeq	r4, ip, #32
   346bc:	beq	3465c <__assert_fail@plt+0x22068>
   346c0:	b	3454c <__assert_fail@plt+0x21f58>
   346c4:	str	r8, [sp, #4]
   346c8:	ldr	r5, [sp, #24]
   346cc:	ldr	r6, [sp, #4]
   346d0:	mov	r4, #0
   346d4:	ldr	r0, [r5, #8]
   346d8:	add	r4, r4, #1
   346dc:	bl	2db68 <__assert_fail@plt+0x1b574>
   346e0:	cmp	r4, r6
   346e4:	add	r5, r5, #12
   346e8:	bne	346d4 <__assert_fail@plt+0x220e0>
   346ec:	b	34400 <__assert_fail@plt+0x21e0c>
   346f0:	ldr	r0, [r3, r2, lsl #3]
   346f4:	add	r1, sp, #88	; 0x58
   346f8:	sub	r2, r0, #4
   346fc:	add	r0, r0, #28
   34700:	ldr	r3, [r1]
   34704:	ldr	ip, [r2, #4]!
   34708:	orr	r3, r3, ip
   3470c:	cmp	r2, r0
   34710:	str	r3, [r1], #4
   34714:	bne	34700 <__assert_fail@plt+0x2210c>
   34718:	b	34430 <__assert_fail@plt+0x21e3c>
   3471c:	ldr	r2, [sp, #28]
   34720:	ldr	r3, [r2, #92]	; 0x5c
   34724:	cmp	r3, #1
   34728:	ble	34b74 <__assert_fail@plt+0x22580>
   3472c:	ldr	r0, [r2, #60]	; 0x3c
   34730:	add	r1, sp, #88	; 0x58
   34734:	sub	r2, r0, #4
   34738:	add	r0, r0, #28
   3473c:	ldr	r3, [r1]
   34740:	ldr	ip, [r2, #4]!
   34744:	orr	r3, r3, ip
   34748:	cmp	r2, r0
   3474c:	str	r3, [r1], #4
   34750:	bne	3473c <__assert_fail@plt+0x22148>
   34754:	ldr	r3, [sp, #28]
   34758:	ldr	r3, [r3, #128]	; 0x80
   3475c:	tst	r3, #64	; 0x40
   34760:	ldreq	r2, [sp, #88]	; 0x58
   34764:	biceq	r2, r2, #1024	; 0x400
   34768:	streq	r2, [sp, #88]	; 0x58
   3476c:	tst	r3, #128	; 0x80
   34770:	beq	34430 <__assert_fail@plt+0x21e3c>
   34774:	ldr	r3, [sp, #88]	; 0x58
   34778:	bic	r3, r3, #1
   3477c:	str	r3, [sp, #88]	; 0x58
   34780:	b	34430 <__assert_fail@plt+0x21e3c>
   34784:	ldr	r5, [sp, #88]	; 0x58
   34788:	mov	r2, #32
   3478c:	mov	r1, #0
   34790:	and	r5, r5, #1024	; 0x400
   34794:	add	r0, sp, #88	; 0x58
   34798:	bl	12378 <memset@plt>
   3479c:	cmp	r5, #0
   347a0:	beq	34678 <__assert_fail@plt+0x22084>
   347a4:	mov	r3, #1024	; 0x400
   347a8:	tst	r4, #128	; 0x80
   347ac:	str	r3, [sp, #88]	; 0x58
   347b0:	beq	34448 <__assert_fail@plt+0x21e54>
   347b4:	mov	r2, #32
   347b8:	mov	r1, #0
   347bc:	add	r0, sp, #88	; 0x58
   347c0:	bl	12378 <memset@plt>
   347c4:	b	34678 <__assert_fail@plt+0x22084>
   347c8:	ldr	r3, [sp, #20]
   347cc:	ldrb	r3, [r3, #6]
   347d0:	tst	r3, #64	; 0x40
   347d4:	beq	344c8 <__assert_fail@plt+0x21ed4>
   347d8:	b	347b4 <__assert_fail@plt+0x221c0>
   347dc:	ldr	r3, [sp, #28]
   347e0:	ldr	lr, [sp, #36]	; 0x24
   347e4:	add	ip, sp, #88	; 0x58
   347e8:	add	r0, r3, #96	; 0x60
   347ec:	mov	r1, #0
   347f0:	ldr	r2, [r0], #4
   347f4:	ldr	r3, [ip]
   347f8:	cmp	lr, r0
   347fc:	bic	r3, r3, r2
   34800:	str	r3, [ip], #4
   34804:	orr	r1, r1, r3
   34808:	bne	347f0 <__assert_fail@plt+0x221fc>
   3480c:	b	34514 <__assert_fail@plt+0x21f20>
   34810:	mov	r3, r9
   34814:	add	r2, sp, #44	; 0x2c
   34818:	mov	r1, r8
   3481c:	ldr	r0, [sp, #16]
   34820:	bl	32f98 <__assert_fail@plt+0x209a4>
   34824:	ldr	r3, [sp, #12]
   34828:	cmp	r0, #0
   3482c:	str	r0, [r3, #4]!
   34830:	mov	r7, r0
   34834:	str	r3, [sp, #12]
   34838:	beq	34ad4 <__assert_fail@plt+0x224e0>
   3483c:	ldrsb	r3, [r7, #52]	; 0x34
   34840:	cmp	r3, #0
   34844:	strge	r7, [sl]
   34848:	strge	r7, [r6, fp, lsl #2]
   3484c:	blt	34a08 <__assert_fail@plt+0x22414>
   34850:	add	r7, sp, #56	; 0x38
   34854:	add	r0, r5, #32
   34858:	mov	r1, r7
   3485c:	ldr	r3, [r1]
   34860:	ldr	r2, [r5, #4]!
   34864:	orr	r3, r3, r2
   34868:	cmp	r0, r5
   3486c:	str	r3, [r1], #4
   34870:	bne	3485c <__assert_fail@plt+0x22268>
   34874:	ldr	r3, [sp, #4]
   34878:	add	fp, fp, #1
   3487c:	cmp	fp, r3
   34880:	add	r4, r4, #12
   34884:	add	sl, sl, #4
   34888:	mov	r5, r0
   3488c:	bne	34374 <__assert_fail@plt+0x21d80>
   34890:	ldr	r3, [sp, #20]
   34894:	cmp	r3, #0
   34898:	bne	34bdc <__assert_fail@plt+0x225e8>
   3489c:	mov	r1, #256	; 0x100
   348a0:	mov	r0, #4
   348a4:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   348a8:	ldr	r3, [sp, #8]
   348ac:	cmp	r0, #0
   348b0:	str	r0, [r3, #44]	; 0x2c
   348b4:	beq	343d4 <__assert_fail@plt+0x21de0>
   348b8:	add	ip, sp, #6208	; 0x1840
   348bc:	add	r9, r8, #96	; 0x60
   348c0:	mov	r5, r0
   348c4:	add	ip, ip, #24
   348c8:	add	sl, r0, #1024	; 0x400
   348cc:	ldr	r1, [r7], #4
   348d0:	cmp	r1, #0
   348d4:	movne	lr, r5
   348d8:	movne	r2, #1
   348dc:	bne	348f4 <__assert_fail@plt+0x22300>
   348e0:	b	34940 <__assert_fail@plt+0x2234c>
   348e4:	lsrs	r1, r1, #1
   348e8:	lsl	r2, r2, #1
   348ec:	add	lr, lr, #4
   348f0:	beq	34940 <__assert_fail@plt+0x2234c>
   348f4:	tst	r1, #1
   348f8:	beq	348e4 <__assert_fail@plt+0x222f0>
   348fc:	ldr	r3, [ip]
   34900:	ands	r3, r2, r3
   34904:	bne	34bd4 <__assert_fail@plt+0x225e0>
   34908:	add	r3, r3, #1
   3490c:	ldr	r4, [ip, r3, lsl #5]
   34910:	tst	r2, r4
   34914:	beq	34908 <__assert_fail@plt+0x22314>
   34918:	ldr	r4, [r9]
   3491c:	add	r3, r6, r3, lsl #2
   34920:	tst	r2, r4
   34924:	add	lr, lr, #4
   34928:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   3492c:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   34930:	lsrs	r1, r1, #1
   34934:	str	r3, [lr, #-4]
   34938:	lsl	r2, r2, #1
   3493c:	bne	348f4 <__assert_fail@plt+0x22300>
   34940:	add	r5, r5, #128	; 0x80
   34944:	cmp	sl, r5
   34948:	add	r9, r9, #4
   3494c:	add	ip, ip, #4
   34950:	bne	348cc <__assert_fail@plt+0x222d8>
   34954:	ldr	r3, [r6, #-2080]	; 0xfffff7e0
   34958:	tst	r3, #1024	; 0x400
   3495c:	beq	3499c <__assert_fail@plt+0x223a8>
   34960:	mov	r3, #0
   34964:	b	34974 <__assert_fail@plt+0x22380>
   34968:	add	r3, r3, #1
   3496c:	cmp	fp, r3
   34970:	beq	3499c <__assert_fail@plt+0x223a8>
   34974:	add	r2, sp, #6208	; 0x1840
   34978:	add	r2, r2, #24
   3497c:	ldr	r2, [r2, r3, lsl #5]
   34980:	tst	r2, #1024	; 0x400
   34984:	beq	34968 <__assert_fail@plt+0x22374>
   34988:	ldr	r2, [sp, #20]
   3498c:	ldr	r3, [r6, r3, lsl #2]
   34990:	cmp	r2, #0
   34994:	str	r3, [r0, #40]	; 0x28
   34998:	strne	r3, [r0, #1064]	; 0x428
   3499c:	ldr	r0, [r6, #-2084]	; 0xfffff7dc
   349a0:	add	r8, fp, fp, lsl #1
   349a4:	bl	2db68 <__assert_fail@plt+0x1b574>
   349a8:	ldr	r5, [sp, #24]
   349ac:	mov	r4, #0
   349b0:	lsl	r8, r8, #2
   349b4:	add	r3, r5, r4
   349b8:	add	r4, r4, #12
   349bc:	ldr	r0, [r3, #8]
   349c0:	bl	2db68 <__assert_fail@plt+0x1b574>
   349c4:	cmp	r8, r4
   349c8:	bne	349b4 <__assert_fail@plt+0x223c0>
   349cc:	mov	r0, #1
   349d0:	b	34404 <__assert_fail@plt+0x21e10>
   349d4:	ldr	r3, [sp, #28]
   349d8:	ldr	r2, [r3, #128]	; 0x80
   349dc:	mvn	r3, #0
   349e0:	tst	r2, #64	; 0x40
   349e4:	str	r3, [sp, #88]	; 0x58
   349e8:	str	r3, [sp, #92]	; 0x5c
   349ec:	str	r3, [sp, #96]	; 0x60
   349f0:	str	r3, [sp, #100]	; 0x64
   349f4:	biceq	r3, r3, #1024	; 0x400
   349f8:	streq	r3, [sp, #88]	; 0x58
   349fc:	tst	r2, #128	; 0x80
   34a00:	beq	34430 <__assert_fail@plt+0x21e3c>
   34a04:	b	34774 <__assert_fail@plt+0x22180>
   34a08:	mov	r3, #1
   34a0c:	add	r2, sp, #44	; 0x2c
   34a10:	mov	r1, r8
   34a14:	ldr	r0, [sp, #16]
   34a18:	bl	32f98 <__assert_fail@plt+0x209a4>
   34a1c:	cmp	r0, #0
   34a20:	str	r0, [sl]
   34a24:	beq	34bc4 <__assert_fail@plt+0x225d0>
   34a28:	cmp	r7, r0
   34a2c:	beq	34a44 <__assert_fail@plt+0x22450>
   34a30:	ldr	r3, [r8, #92]	; 0x5c
   34a34:	ldr	r2, [sp, #20]
   34a38:	cmp	r3, #1
   34a3c:	movgt	r2, #1
   34a40:	str	r2, [sp, #20]
   34a44:	mov	r3, #2
   34a48:	add	r2, sp, #44	; 0x2c
   34a4c:	mov	r1, r8
   34a50:	ldr	r0, [sp, #16]
   34a54:	bl	32f98 <__assert_fail@plt+0x209a4>
   34a58:	cmp	r0, #0
   34a5c:	str	r0, [r6, fp, lsl #2]
   34a60:	bne	34850 <__assert_fail@plt+0x2225c>
   34a64:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   34a68:	cmp	r3, #0
   34a6c:	beq	34850 <__assert_fail@plt+0x2225c>
   34a70:	b	343d4 <__assert_fail@plt+0x21de0>
   34a74:	ldr	r3, [sp, #20]
   34a78:	ldrb	r3, [r3, #6]
   34a7c:	tst	r3, #64	; 0x40
   34a80:	bne	3445c <__assert_fail@plt+0x21e68>
   34a84:	b	347b4 <__assert_fail@plt+0x221c0>
   34a88:	mov	r3, #12
   34a8c:	str	r3, [r6, #-2096]	; 0xfffff7d0
   34a90:	add	r3, sp, #3152	; 0xc50
   34a94:	add	r3, r3, #8
   34a98:	str	r3, [sp, #24]
   34a9c:	b	343d8 <__assert_fail@plt+0x21de4>
   34aa0:	ldr	r3, [sp, #28]
   34aa4:	ldr	lr, [sp, #36]	; 0x24
   34aa8:	add	r1, sp, #88	; 0x58
   34aac:	add	r2, r3, #96	; 0x60
   34ab0:	mov	ip, #0
   34ab4:	ldr	r3, [r2], #4
   34ab8:	ldr	r0, [r1]
   34abc:	cmp	r2, lr
   34ac0:	and	r3, r3, r0
   34ac4:	str	r3, [r1], #4
   34ac8:	orr	ip, ip, r3
   34acc:	bne	34ab4 <__assert_fail@plt+0x224c0>
   34ad0:	b	344ac <__assert_fail@plt+0x21eb8>
   34ad4:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   34ad8:	cmp	r3, #0
   34adc:	beq	3483c <__assert_fail@plt+0x22248>
   34ae0:	b	343d4 <__assert_fail@plt+0x21de0>
   34ae4:	add	r4, sp, #88	; 0x58
   34ae8:	add	ip, sp, #14400	; 0x3840
   34aec:	ldm	r4!, {r0, r1, r2, r3}
   34af0:	add	ip, ip, #24
   34af4:	add	ip, ip, r8, lsl #5
   34af8:	sub	ip, ip, #8192	; 0x2000
   34afc:	ldr	r5, [sp, #8]
   34b00:	stmia	ip!, {r0, r1, r2, r3}
   34b04:	add	r3, sp, #3152	; 0xc50
   34b08:	add	r3, r3, #8
   34b0c:	mov	r6, r3
   34b10:	str	r3, [sp, #24]
   34b14:	ldm	r4, {r0, r1, r2, r3}
   34b18:	add	lr, r8, r8, lsl #1
   34b1c:	ldr	r5, [r5, #12]
   34b20:	add	r4, r6, lr, lsl #2
   34b24:	stm	ip, {r0, r1, r2, r3}
   34b28:	mov	r3, #1
   34b2c:	ldr	r2, [sp, #12]
   34b30:	mov	r0, #4
   34b34:	ldr	r5, [r5, r2]
   34b38:	str	r3, [r6, lr, lsl #2]
   34b3c:	str	r3, [r4, #4]
   34b40:	bl	2fe38 <__assert_fail@plt+0x1d844>
   34b44:	cmp	r0, #0
   34b48:	str	r0, [r4, #8]
   34b4c:	beq	34bac <__assert_fail@plt+0x225b8>
   34b50:	mov	r1, #0
   34b54:	str	r5, [r0]
   34b58:	mov	r2, #32
   34b5c:	add	r0, sp, #88	; 0x58
   34b60:	bl	12378 <memset@plt>
   34b64:	ldr	r3, [sp, #8]
   34b68:	add	r8, r8, #1
   34b6c:	ldr	r1, [r3, #8]
   34b70:	b	342c4 <__assert_fail@plt+0x21cd0>
   34b74:	mov	r2, #32
   34b78:	mvn	r1, #0
   34b7c:	add	r0, sp, #88	; 0x58
   34b80:	bl	12378 <memset@plt>
   34b84:	b	34754 <__assert_fail@plt+0x22160>
   34b88:	bne	34400 <__assert_fail@plt+0x21e0c>
   34b8c:	mov	r1, #256	; 0x100
   34b90:	mov	r0, #4
   34b94:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   34b98:	ldr	r3, [sp, #8]
   34b9c:	str	r0, [r3, #44]	; 0x2c
   34ba0:	adds	r0, r0, #0
   34ba4:	movne	r0, #1
   34ba8:	b	34404 <__assert_fail@plt+0x21e10>
   34bac:	cmp	r8, #0
   34bb0:	str	r8, [sp, #4]
   34bb4:	str	r0, [r4, #4]
   34bb8:	str	r0, [r4]
   34bbc:	beq	34400 <__assert_fail@plt+0x21e0c>
   34bc0:	b	346c8 <__assert_fail@plt+0x220d4>
   34bc4:	ldr	r3, [r6, #-2096]	; 0xfffff7d0
   34bc8:	cmp	r3, #0
   34bcc:	beq	34a30 <__assert_fail@plt+0x2243c>
   34bd0:	b	343d4 <__assert_fail@plt+0x21de0>
   34bd4:	mov	r3, #0
   34bd8:	b	34918 <__assert_fail@plt+0x22324>
   34bdc:	mov	r1, #512	; 0x200
   34be0:	mov	r0, #4
   34be4:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   34be8:	ldr	r3, [sp, #8]
   34bec:	cmp	r0, #0
   34bf0:	str	r0, [r3, #48]	; 0x30
   34bf4:	beq	343d4 <__assert_fail@plt+0x21de0>
   34bf8:	add	r1, sp, #6208	; 0x1840
   34bfc:	mov	lr, r0
   34c00:	add	r1, r1, #24
   34c04:	add	r5, r0, #1024	; 0x400
   34c08:	ldr	ip, [r7], #4
   34c0c:	cmp	ip, #0
   34c10:	movne	r4, lr
   34c14:	movne	r2, #1
   34c18:	bne	34c30 <__assert_fail@plt+0x2263c>
   34c1c:	b	34c6c <__assert_fail@plt+0x22678>
   34c20:	lsrs	ip, ip, #1
   34c24:	lsl	r2, r2, #1
   34c28:	add	r4, r4, #4
   34c2c:	beq	34c6c <__assert_fail@plt+0x22678>
   34c30:	tst	ip, #1
   34c34:	beq	34c20 <__assert_fail@plt+0x2262c>
   34c38:	ldr	r3, [r1]
   34c3c:	ands	r3, r2, r3
   34c40:	bne	34c80 <__assert_fail@plt+0x2268c>
   34c44:	add	r3, r3, #1
   34c48:	ldr	r8, [r1, r3, lsl #5]
   34c4c:	tst	r2, r8
   34c50:	beq	34c44 <__assert_fail@plt+0x22650>
   34c54:	add	r3, r6, r3, lsl #2
   34c58:	ldr	r8, [r3, #-2048]	; 0xfffff800
   34c5c:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   34c60:	str	r8, [r4]
   34c64:	str	r3, [r4, #1024]	; 0x400
   34c68:	b	34c20 <__assert_fail@plt+0x2262c>
   34c6c:	add	lr, lr, #128	; 0x80
   34c70:	cmp	r5, lr
   34c74:	add	r1, r1, #4
   34c78:	bne	34c08 <__assert_fail@plt+0x22614>
   34c7c:	b	34954 <__assert_fail@plt+0x22360>
   34c80:	mov	r3, #0
   34c84:	b	34c54 <__assert_fail@plt+0x22660>
   34c88:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   34c8c:	cmp	r1, #0
   34c90:	push	{r4, r5, r6, lr}
   34c94:	mov	r5, r0
   34c98:	blt	34cf4 <__assert_fail@plt+0x22700>
   34c9c:	ldr	r3, [r0, #48]	; 0x30
   34ca0:	cmp	r1, r3
   34ca4:	beq	34d68 <__assert_fail@plt+0x22774>
   34ca8:	ldr	r3, [r0, #80]	; 0x50
   34cac:	cmp	r3, #1
   34cb0:	ble	34cfc <__assert_fail@plt+0x22708>
   34cb4:	ldr	r3, [r0, #8]
   34cb8:	add	r3, r3, r1, lsl #2
   34cbc:	b	34cc8 <__assert_fail@plt+0x226d4>
   34cc0:	cmn	r1, #1
   34cc4:	beq	34cf4 <__assert_fail@plt+0x22700>
   34cc8:	ldr	r4, [r3], #-4
   34ccc:	sub	r1, r1, #1
   34cd0:	cmn	r4, #1
   34cd4:	beq	34cc0 <__assert_fail@plt+0x226cc>
   34cd8:	ldrb	r3, [r5, #78]	; 0x4e
   34cdc:	cmp	r3, #0
   34ce0:	bne	34d3c <__assert_fail@plt+0x22748>
   34ce4:	cmp	r4, #10
   34ce8:	beq	34d28 <__assert_fail@plt+0x22734>
   34cec:	mov	r0, #0
   34cf0:	pop	{r4, r5, r6, pc}
   34cf4:	ldr	r0, [r5, #60]	; 0x3c
   34cf8:	pop	{r4, r5, r6, pc}
   34cfc:	ldr	r3, [r0, #4]
   34d00:	ldr	r0, [r0, #68]	; 0x44
   34d04:	ldrb	r3, [r3, r1]
   34d08:	and	r2, r3, #31
   34d0c:	asr	r1, r3, #5
   34d10:	ldr	r0, [r0, r1, lsl #2]
   34d14:	lsr	r0, r0, r2
   34d18:	ands	r0, r0, #1
   34d1c:	bne	34d60 <__assert_fail@plt+0x2276c>
   34d20:	cmp	r3, #10
   34d24:	popne	{r4, r5, r6, pc}
   34d28:	ldrb	r0, [r5, #77]	; 0x4d
   34d2c:	cmp	r0, #0
   34d30:	movne	r0, #2
   34d34:	moveq	r0, #0
   34d38:	pop	{r4, r5, r6, pc}
   34d3c:	mov	r0, r4
   34d40:	bl	12354 <iswalnum@plt>
   34d44:	sub	r3, r4, #95	; 0x5f
   34d48:	clz	r3, r3
   34d4c:	lsr	r3, r3, #5
   34d50:	cmp	r0, #0
   34d54:	orrne	r3, r3, #1
   34d58:	cmp	r3, #0
   34d5c:	beq	34ce4 <__assert_fail@plt+0x226f0>
   34d60:	mov	r0, #1
   34d64:	pop	{r4, r5, r6, pc}
   34d68:	tst	r2, #2
   34d6c:	moveq	r0, #10
   34d70:	movne	r0, #8
   34d74:	pop	{r4, r5, r6, pc}
   34d78:	ldrb	ip, [r1, #4]
   34d7c:	ldr	r3, [r0, #4]
   34d80:	push	{r4, lr}
   34d84:	sub	ip, ip, #1
   34d88:	ldrb	r3, [r3, r2]
   34d8c:	cmp	ip, #6
   34d90:	ldrls	pc, [pc, ip, lsl #2]
   34d94:	b	34dc0 <__assert_fail@plt+0x227cc>
   34d98:			; <UNDEFINED> instruction: 0x00034db4
   34d9c:	andeq	r4, r3, r0, asr #27
   34da0:	andeq	r4, r3, r4, asr lr
   34da4:	andeq	r4, r3, r0, asr #27
   34da8:	ldrdeq	r4, [r3], -r0
   34dac:	andeq	r4, r3, r0, asr #27
   34db0:	andeq	r4, r3, r8, asr #27
   34db4:	ldrb	ip, [r1]
   34db8:	cmp	ip, r3
   34dbc:	beq	34df0 <__assert_fail@plt+0x227fc>
   34dc0:	mov	r0, #0
   34dc4:	pop	{r4, pc}
   34dc8:	tst	r3, #128	; 0x80
   34dcc:	bne	34dc0 <__assert_fail@plt+0x227cc>
   34dd0:	cmp	r3, #10
   34dd4:	beq	34e90 <__assert_fail@plt+0x2289c>
   34dd8:	cmp	r3, #0
   34ddc:	bne	34df0 <__assert_fail@plt+0x227fc>
   34de0:	ldr	ip, [r0, #84]	; 0x54
   34de4:	ldr	ip, [ip, #128]	; 0x80
   34de8:	tst	ip, #128	; 0x80
   34dec:	bne	34dc0 <__assert_fail@plt+0x227cc>
   34df0:	ldr	r4, [r1, #4]
   34df4:	ldr	r3, [pc, #168]	; 34ea4 <__assert_fail@plt+0x228b0>
   34df8:	and	r3, r3, r4
   34dfc:	cmp	r3, #0
   34e00:	beq	34e74 <__assert_fail@plt+0x22880>
   34e04:	mov	r1, r2
   34e08:	ldr	r2, [r0, #88]	; 0x58
   34e0c:	bl	34c8c <__assert_fail@plt+0x22698>
   34e10:	ldr	r1, [pc, #144]	; 34ea8 <__assert_fail@plt+0x228b4>
   34e14:	and	r1, r1, r4, lsr #8
   34e18:	ands	r2, r1, #4
   34e1c:	bne	34e7c <__assert_fail@plt+0x22888>
   34e20:	tst	r1, #8
   34e24:	beq	34e30 <__assert_fail@plt+0x2283c>
   34e28:	tst	r0, #1
   34e2c:	bne	34dc0 <__assert_fail@plt+0x227cc>
   34e30:	tst	r1, #32
   34e34:	beq	34e40 <__assert_fail@plt+0x2284c>
   34e38:	ands	r3, r0, #2
   34e3c:	beq	34dc0 <__assert_fail@plt+0x227cc>
   34e40:	tst	r1, #128	; 0x80
   34e44:	beq	34e74 <__assert_fail@plt+0x22880>
   34e48:	lsr	r0, r0, #3
   34e4c:	and	r0, r0, #1
   34e50:	pop	{r4, pc}
   34e54:	ldr	ip, [r1]
   34e58:	asr	lr, r3, #5
   34e5c:	and	r3, r3, #31
   34e60:	ldr	ip, [ip, lr, lsl #2]
   34e64:	lsr	r3, ip, r3
   34e68:	ands	r3, r3, #1
   34e6c:	bne	34df0 <__assert_fail@plt+0x227fc>
   34e70:	b	34dc0 <__assert_fail@plt+0x227cc>
   34e74:	mov	r0, #1
   34e78:	pop	{r4, pc}
   34e7c:	ands	r3, r0, #1
   34e80:	beq	34dc0 <__assert_fail@plt+0x227cc>
   34e84:	tst	r1, #8
   34e88:	bne	34dc0 <__assert_fail@plt+0x227cc>
   34e8c:	b	34e30 <__assert_fail@plt+0x2283c>
   34e90:	ldr	r3, [r0, #84]	; 0x54
   34e94:	ldr	r3, [r3, #128]	; 0x80
   34e98:	ands	r3, r3, #64	; 0x40
   34e9c:	bne	34df0 <__assert_fail@plt+0x227fc>
   34ea0:	b	34dc0 <__assert_fail@plt+0x227cc>
   34ea4:	andeq	pc, r3, r0, lsl #30
   34ea8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   34eac:	push	{r4, r5, r6, r7, r8, lr}
   34eb0:	mov	r4, r1
   34eb4:	mov	r1, r2
   34eb8:	ldr	r2, [r0, #88]	; 0x58
   34ebc:	mov	r5, r0
   34ec0:	bl	34c8c <__assert_fail@plt+0x22698>
   34ec4:	ldr	lr, [r4, #8]
   34ec8:	cmp	lr, #0
   34ecc:	ble	34f6c <__assert_fail@plt+0x22978>
   34ed0:	ldr	r3, [r5, #84]	; 0x54
   34ed4:	ldr	r1, [r4, #12]
   34ed8:	ldr	r5, [pc, #168]	; 34f88 <__assert_fail@plt+0x22994>
   34edc:	ldr	r4, [r3]
   34ee0:	sub	r1, r1, #4
   34ee4:	mov	r2, #0
   34ee8:	and	r8, r0, #8
   34eec:	and	r7, r0, #2
   34ef0:	and	r6, r0, #1
   34ef4:	b	34f04 <__assert_fail@plt+0x22910>
   34ef8:	add	r2, r2, #1
   34efc:	cmp	r2, lr
   34f00:	beq	34f6c <__assert_fail@plt+0x22978>
   34f04:	ldr	r0, [r1, #4]!
   34f08:	add	r3, r4, r0, lsl #3
   34f0c:	ldrb	ip, [r3, #4]
   34f10:	ldr	r3, [r3, #4]
   34f14:	cmp	ip, #2
   34f18:	and	r3, r5, r3, lsr #8
   34f1c:	bne	34ef8 <__assert_fail@plt+0x22904>
   34f20:	cmp	r3, #0
   34f24:	popeq	{r4, r5, r6, r7, r8, pc}
   34f28:	tst	r3, #4
   34f2c:	beq	34f74 <__assert_fail@plt+0x22980>
   34f30:	cmp	r6, #0
   34f34:	beq	34ef8 <__assert_fail@plt+0x22904>
   34f38:	tst	r3, #8
   34f3c:	bne	34ef8 <__assert_fail@plt+0x22904>
   34f40:	tst	r3, #32
   34f44:	beq	34f50 <__assert_fail@plt+0x2295c>
   34f48:	cmp	r7, #0
   34f4c:	beq	34ef8 <__assert_fail@plt+0x22904>
   34f50:	tst	r3, #128	; 0x80
   34f54:	popeq	{r4, r5, r6, r7, r8, pc}
   34f58:	cmp	r8, #0
   34f5c:	popne	{r4, r5, r6, r7, r8, pc}
   34f60:	add	r2, r2, #1
   34f64:	cmp	r2, lr
   34f68:	bne	34f04 <__assert_fail@plt+0x22910>
   34f6c:	mov	r0, #0
   34f70:	pop	{r4, r5, r6, r7, r8, pc}
   34f74:	tst	r3, #8
   34f78:	beq	34f40 <__assert_fail@plt+0x2294c>
   34f7c:	cmp	r6, #0
   34f80:	beq	34f40 <__assert_fail@plt+0x2294c>
   34f84:	b	34ef8 <__assert_fail@plt+0x22904>
   34f88:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   34f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f90:	mov	r4, r0
   34f94:	ldr	r5, [r0, #24]
   34f98:	sub	sp, sp, #36	; 0x24
   34f9c:	cmp	r5, r1
   34fa0:	mov	r6, r1
   34fa4:	mov	r7, r2
   34fa8:	suble	r5, r1, r5
   34fac:	ble	35010 <__assert_fail@plt+0x22a1c>
   34fb0:	ldr	r3, [r0, #80]	; 0x50
   34fb4:	ldr	r1, [r0, #44]	; 0x2c
   34fb8:	cmp	r3, #1
   34fbc:	ldrb	r3, [r0, #75]	; 0x4b
   34fc0:	movgt	r2, #0
   34fc4:	strgt	r2, [r0, #16]
   34fc8:	strgt	r2, [r0, #20]
   34fcc:	tst	r7, #1
   34fd0:	ldr	r2, [r0, #52]	; 0x34
   34fd4:	moveq	r0, #6
   34fd8:	movne	r0, #4
   34fdc:	cmp	r3, #0
   34fe0:	mov	r3, #0
   34fe4:	str	r3, [r4, #28]
   34fe8:	str	r3, [r4, #24]
   34fec:	str	r3, [r4, #32]
   34ff0:	strb	r3, [r4, #76]	; 0x4c
   34ff4:	moveq	r5, r6
   34ff8:	ldreq	r3, [r4]
   34ffc:	movne	r5, r6
   35000:	str	r0, [r4, #60]	; 0x3c
   35004:	str	r1, [r4, #48]	; 0x30
   35008:	str	r2, [r4, #56]	; 0x38
   3500c:	streq	r3, [r4, #4]
   35010:	cmp	r5, #0
   35014:	ldreq	r3, [r4, #80]	; 0x50
   35018:	beq	350a8 <__assert_fail@plt+0x22ab4>
   3501c:	ldr	r2, [r4, #32]
   35020:	ldrb	r3, [r4, #76]	; 0x4c
   35024:	cmp	r5, r2
   35028:	bge	35178 <__assert_fail@plt+0x22b84>
   3502c:	cmp	r3, #0
   35030:	bne	3523c <__assert_fail@plt+0x22c48>
   35034:	mov	r2, r7
   35038:	sub	r1, r5, #1
   3503c:	mov	r0, r4
   35040:	bl	34c8c <__assert_fail@plt+0x22698>
   35044:	ldr	r3, [r4, #80]	; 0x50
   35048:	cmp	r3, #1
   3504c:	str	r0, [r4, #60]	; 0x3c
   35050:	ble	3506c <__assert_fail@plt+0x22a78>
   35054:	ldr	r2, [r4, #28]
   35058:	ldr	r0, [r4, #8]
   3505c:	sub	r2, r2, r5
   35060:	add	r1, r0, r5, lsl #2
   35064:	lsl	r2, r2, #2
   35068:	bl	11fb8 <memmove@plt>
   3506c:	ldrb	r3, [r4, #75]	; 0x4b
   35070:	cmp	r3, #0
   35074:	bne	3537c <__assert_fail@plt+0x22d88>
   35078:	ldr	r0, [r4, #28]
   3507c:	ldr	r1, [r4, #32]
   35080:	mov	r2, r3
   35084:	ldr	r3, [r4, #80]	; 0x50
   35088:	sub	r0, r0, r5
   3508c:	sub	r1, r1, r5
   35090:	str	r0, [r4, #28]
   35094:	str	r1, [r4, #32]
   35098:	cmp	r2, #0
   3509c:	ldreq	r2, [r4, #4]
   350a0:	addeq	r2, r2, r5
   350a4:	streq	r2, [r4, #4]
   350a8:	ldr	r2, [r4, #48]	; 0x30
   350ac:	ldr	r1, [r4, #56]	; 0x38
   350b0:	cmp	r3, #1
   350b4:	sub	r3, r2, r5
   350b8:	sub	r5, r1, r5
   350bc:	str	r6, [r4, #24]
   350c0:	str	r3, [r4, #48]	; 0x30
   350c4:	str	r5, [r4, #56]	; 0x38
   350c8:	ble	35100 <__assert_fail@plt+0x22b0c>
   350cc:	ldrb	r3, [r4, #72]	; 0x48
   350d0:	mov	r0, r4
   350d4:	cmp	r3, #0
   350d8:	bne	350f0 <__assert_fail@plt+0x22afc>
   350dc:	bl	31088 <__assert_fail@plt+0x1ea94>
   350e0:	mov	r0, #0
   350e4:	str	r0, [r4, #40]	; 0x28
   350e8:	add	sp, sp, #36	; 0x24
   350ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350f0:	bl	31220 <__assert_fail@plt+0x1ec2c>
   350f4:	cmp	r0, #0
   350f8:	beq	350e0 <__assert_fail@plt+0x22aec>
   350fc:	b	350e8 <__assert_fail@plt+0x22af4>
   35100:	ldrb	r2, [r4, #75]	; 0x4b
   35104:	cmp	r2, #0
   35108:	streq	r3, [r4, #28]
   3510c:	beq	350e0 <__assert_fail@plt+0x22aec>
   35110:	ldrb	r2, [r4, #72]	; 0x48
   35114:	cmp	r2, #0
   35118:	bne	35660 <__assert_fail@plt+0x2306c>
   3511c:	ldr	r0, [r4, #64]	; 0x40
   35120:	cmp	r0, #0
   35124:	beq	350e0 <__assert_fail@plt+0x22aec>
   35128:	ldr	r1, [r4, #36]	; 0x24
   3512c:	ldr	r2, [r4, #28]
   35130:	cmp	r3, r1
   35134:	movge	r3, r1
   35138:	cmp	r3, r2
   3513c:	bgt	3514c <__assert_fail@plt+0x22b58>
   35140:	b	3516c <__assert_fail@plt+0x22b78>
   35144:	ldr	r6, [r4, #24]
   35148:	ldr	r0, [r4, #64]	; 0x40
   3514c:	ldm	r4, {r1, ip}
   35150:	add	r1, r1, r2
   35154:	ldrb	r1, [r1, r6]
   35158:	ldrb	r1, [r0, r1]
   3515c:	strb	r1, [ip, r2]
   35160:	add	r2, r2, #1
   35164:	cmp	r3, r2
   35168:	bne	35144 <__assert_fail@plt+0x22b50>
   3516c:	str	r2, [r4, #28]
   35170:	str	r2, [r4, #32]
   35174:	b	350e0 <__assert_fail@plt+0x22aec>
   35178:	ldr	r1, [r4, #28]
   3517c:	cmp	r3, #0
   35180:	str	r1, [sp]
   35184:	bne	3559c <__assert_fail@plt+0x22fa8>
   35188:	ldr	r3, [r4, #80]	; 0x50
   3518c:	mov	r1, #0
   35190:	cmp	r3, #1
   35194:	str	r1, [r4, #28]
   35198:	ble	354bc <__assert_fail@plt+0x22ec8>
   3519c:	ldrb	r1, [r4, #73]	; 0x49
   351a0:	cmp	r1, #0
   351a4:	bne	353f0 <__assert_fail@plt+0x22dfc>
   351a8:	ldr	r8, [r4, #24]
   351ac:	add	r8, r8, r2
   351b0:	cmp	r6, r8
   351b4:	ble	35744 <__assert_fail@plt+0x23150>
   351b8:	add	r3, sp, #16
   351bc:	add	sl, r4, #16
   351c0:	add	fp, sp, #24
   351c4:	str	r5, [sp, #4]
   351c8:	mov	r9, r3
   351cc:	b	351dc <__assert_fail@plt+0x22be8>
   351d0:	add	r8, r8, r3
   351d4:	cmp	r6, r8
   351d8:	ble	355c8 <__assert_fail@plt+0x22fd4>
   351dc:	ldm	sl, {r0, r1}
   351e0:	ldr	r5, [r4, #44]	; 0x2c
   351e4:	ldr	ip, [r4]
   351e8:	sub	r5, r5, r8
   351ec:	stm	fp, {r0, r1}
   351f0:	mov	r2, r5
   351f4:	mov	r3, sl
   351f8:	add	r1, ip, r8
   351fc:	mov	r0, r9
   35200:	bl	2fe64 <__assert_fail@plt+0x1d870>
   35204:	sub	r2, r0, #1
   35208:	cmn	r2, #4
   3520c:	mov	r3, r0
   35210:	ldrls	r2, [sp, #16]
   35214:	bls	351d0 <__assert_fail@plt+0x22bdc>
   35218:	mov	r2, #0
   3521c:	cmp	r5, r2
   35220:	cmpne	r0, r2
   35224:	ldm	fp, {r0, r1}
   35228:	ldrne	r3, [r4]
   3522c:	ldrbne	r2, [r3, r8]
   35230:	mov	r3, #1
   35234:	stm	sl, {r0, r1}
   35238:	b	351d0 <__assert_fail@plt+0x22bdc>
   3523c:	ldr	sl, [r4, #28]
   35240:	ldr	r9, [r4, #12]
   35244:	mov	r3, sl
   35248:	mov	r2, #0
   3524c:	b	35260 <__assert_fail@plt+0x22c6c>
   35250:	ble	35288 <__assert_fail@plt+0x22c94>
   35254:	add	r2, r8, #1
   35258:	cmp	r2, r3
   3525c:	bge	35280 <__assert_fail@plt+0x22c8c>
   35260:	add	r1, r2, r3
   35264:	add	r1, r1, r1, lsr #31
   35268:	asr	r8, r1, #1
   3526c:	ldr	r1, [r9, r8, lsl #2]
   35270:	cmp	r5, r1
   35274:	bge	35250 <__assert_fail@plt+0x22c5c>
   35278:	mov	r3, r8
   3527c:	b	35258 <__assert_fail@plt+0x22c64>
   35280:	cmp	r5, r1
   35284:	addgt	r8, r8, #1
   35288:	sub	fp, r8, #1
   3528c:	mov	r2, r7
   35290:	mov	r1, fp
   35294:	mov	r0, r4
   35298:	bl	34c8c <__assert_fail@plt+0x22698>
   3529c:	cmp	r5, sl
   352a0:	movge	r3, #0
   352a4:	movlt	r3, #1
   352a8:	cmp	r5, r8
   352ac:	movne	r3, #0
   352b0:	cmp	r3, #0
   352b4:	str	r0, [r4, #60]	; 0x3c
   352b8:	bne	35514 <__assert_fail@plt+0x22f20>
   352bc:	ldr	r2, [r4, #44]	; 0x2c
   352c0:	ldr	r3, [r4, #52]	; 0x34
   352c4:	sub	r2, r2, r6
   352c8:	add	r2, r2, r5
   352cc:	sub	r3, r3, r6
   352d0:	add	r3, r3, r5
   352d4:	str	r2, [r4, #48]	; 0x30
   352d8:	cmp	r8, #0
   352dc:	mov	r2, #0
   352e0:	str	r3, [r4, #56]	; 0x38
   352e4:	strb	r2, [r4, #76]	; 0x4c
   352e8:	ble	35320 <__assert_fail@plt+0x22d2c>
   352ec:	sub	r3, r8, #-1073741823	; 0xc0000001
   352f0:	ldr	r2, [r9, r3, lsl #2]
   352f4:	add	r3, r9, r3, lsl #2
   352f8:	cmp	r5, r2
   352fc:	beq	35314 <__assert_fail@plt+0x22d20>
   35300:	b	35320 <__assert_fail@plt+0x22d2c>
   35304:	ldr	r2, [r3, #-4]!
   35308:	sub	fp, fp, #1
   3530c:	cmp	r5, r2
   35310:	bne	35320 <__assert_fail@plt+0x22d2c>
   35314:	cmp	fp, #0
   35318:	mov	r8, fp
   3531c:	bne	35304 <__assert_fail@plt+0x22d10>
   35320:	cmp	sl, r8
   35324:	ble	35398 <__assert_fail@plt+0x22da4>
   35328:	ldr	r1, [r4, #8]
   3532c:	lsl	r0, r8, #2
   35330:	add	r3, r1, r0
   35334:	ldr	r2, [r1, r8, lsl #2]
   35338:	cmn	r2, #1
   3533c:	rsbeq	r1, r1, #4
   35340:	beq	35354 <__assert_fail@plt+0x22d60>
   35344:	b	353a0 <__assert_fail@plt+0x22dac>
   35348:	ldr	r2, [r3, #4]!
   3534c:	cmn	r2, #1
   35350:	bne	353a0 <__assert_fail@plt+0x22dac>
   35354:	add	r8, r8, #1
   35358:	cmp	sl, r8
   3535c:	add	r0, r1, r3
   35360:	bne	35348 <__assert_fail@plt+0x22d54>
   35364:	mov	r2, #0
   35368:	str	r2, [r4, #28]
   3536c:	str	r2, [r4, #32]
   35370:	ldrb	r2, [r4, #75]	; 0x4b
   35374:	ldr	r3, [r4, #80]	; 0x50
   35378:	b	35098 <__assert_fail@plt+0x22aa4>
   3537c:	ldr	r0, [r4, #4]
   35380:	ldr	r2, [r4, #28]
   35384:	add	r1, r0, r5
   35388:	sub	r2, r2, r5
   3538c:	bl	11fb8 <memmove@plt>
   35390:	ldrb	r3, [r4, #75]	; 0x4b
   35394:	b	35078 <__assert_fail@plt+0x22a84>
   35398:	beq	35364 <__assert_fail@plt+0x22d70>
   3539c:	lsl	r0, r8, #2
   353a0:	ldr	r2, [r9, r0]
   353a4:	sub	r2, r2, r5
   353a8:	cmp	r2, #0
   353ac:	str	r2, [r4, #28]
   353b0:	beq	3536c <__assert_fail@plt+0x22d78>
   353b4:	ble	353dc <__assert_fail@plt+0x22de8>
   353b8:	ldr	r1, [r4, #8]
   353bc:	mov	r3, #0
   353c0:	sub	r1, r1, #4
   353c4:	mvn	r0, #0
   353c8:	str	r0, [r1, #4]!
   353cc:	ldr	r2, [r4, #28]
   353d0:	add	r3, r3, #1
   353d4:	cmp	r2, r3
   353d8:	bgt	353c8 <__assert_fail@plt+0x22dd4>
   353dc:	mov	r1, #255	; 0xff
   353e0:	ldr	r0, [r4, #4]
   353e4:	bl	12378 <memset@plt>
   353e8:	ldr	r2, [r4, #28]
   353ec:	b	3536c <__assert_fail@plt+0x22d78>
   353f0:	ldr	ip, [r4]
   353f4:	ldr	r8, [r4, #24]
   353f8:	sub	r3, r5, r3
   353fc:	add	r9, ip, r8
   35400:	add	r3, r9, r3
   35404:	cmp	ip, r3
   35408:	sub	r0, r5, #1
   3540c:	movcc	ip, r3
   35410:	add	r1, r9, r0
   35414:	cmp	r1, ip
   35418:	bcc	351ac <__assert_fail@plt+0x22bb8>
   3541c:	ldrb	r3, [r9, r0]
   35420:	and	r3, r3, #192	; 0xc0
   35424:	cmp	r3, #128	; 0x80
   35428:	subeq	r3, r1, #1
   3542c:	subeq	ip, ip, #1
   35430:	bne	35454 <__assert_fail@plt+0x22e60>
   35434:	cmp	ip, r3
   35438:	mov	r1, r3
   3543c:	beq	351ac <__assert_fail@plt+0x22bb8>
   35440:	ldrb	r0, [r1]
   35444:	sub	r3, r3, #1
   35448:	and	r0, r0, #192	; 0xc0
   3544c:	cmp	r0, #128	; 0x80
   35450:	beq	35434 <__assert_fail@plt+0x22e40>
   35454:	ldr	r2, [r4, #48]	; 0x30
   35458:	ldr	r3, [r4, #64]	; 0x40
   3545c:	add	r2, r9, r2
   35460:	cmp	r3, #0
   35464:	mov	r8, r1
   35468:	sub	r2, r2, r1
   3546c:	bne	356fc <__assert_fail@plt+0x23108>
   35470:	add	fp, sp, #24
   35474:	mov	r3, fp
   35478:	mov	sl, #0
   3547c:	add	r0, sp, #12
   35480:	str	sl, [sp, #24]
   35484:	str	sl, [sp, #28]
   35488:	bl	2fe64 <__assert_fail@plt+0x1d870>
   3548c:	add	r9, r9, r5
   35490:	sub	r8, r9, r8
   35494:	cmp	r0, r8
   35498:	movcc	r3, #0
   3549c:	movcs	r3, #1
   354a0:	cmn	r0, #3
   354a4:	movhi	r3, #0
   354a8:	cmp	r3, sl
   354ac:	bne	35610 <__assert_fail@plt+0x2301c>
   354b0:	ldr	r8, [r4, #24]
   354b4:	ldr	r2, [r4, #32]
   354b8:	b	351ac <__assert_fail@plt+0x22bb8>
   354bc:	ldr	r2, [r4]
   354c0:	ldr	r0, [r4, #24]
   354c4:	add	r2, r2, r5
   354c8:	add	r2, r2, r0
   354cc:	ldr	ip, [r4, #64]	; 0x40
   354d0:	ldrb	r0, [r2, #-1]
   354d4:	cmp	ip, #0
   354d8:	str	r1, [r4, #32]
   354dc:	ldrbne	r0, [ip, r0]
   354e0:	ldr	ip, [r4, #68]	; 0x44
   354e4:	and	r2, r0, #31
   354e8:	asr	r1, r0, #5
   354ec:	ldr	r1, [ip, r1, lsl #2]
   354f0:	lsr	r2, r1, r2
   354f4:	ands	r1, r2, #1
   354f8:	movne	r1, #1
   354fc:	bne	35508 <__assert_fail@plt+0x22f14>
   35500:	cmp	r0, #10
   35504:	beq	356d0 <__assert_fail@plt+0x230dc>
   35508:	ldrb	r2, [r4, #75]	; 0x4b
   3550c:	str	r1, [r4, #60]	; 0x3c
   35510:	b	35098 <__assert_fail@plt+0x22aa4>
   35514:	ldr	r3, [r9, r8, lsl #2]
   35518:	cmp	r5, r3
   3551c:	bne	352bc <__assert_fail@plt+0x22cc8>
   35520:	ldr	r0, [r4, #8]
   35524:	sub	r2, sl, r5
   35528:	lsl	r7, r5, #2
   3552c:	lsl	r2, r2, #2
   35530:	add	r1, r0, r7
   35534:	bl	11fb8 <memmove@plt>
   35538:	ldr	r0, [r4, #4]
   3553c:	ldr	r2, [r4, #28]
   35540:	add	r1, r0, r5
   35544:	sub	r2, r2, r5
   35548:	bl	11fb8 <memmove@plt>
   3554c:	ldr	r3, [r4, #28]
   35550:	ldr	r2, [r4, #32]
   35554:	sub	r3, r3, r5
   35558:	sub	r2, r2, r5
   3555c:	cmp	r3, #0
   35560:	str	r3, [r4, #28]
   35564:	str	r2, [r4, #32]
   35568:	ble	35370 <__assert_fail@plt+0x22d7c>
   3556c:	ldr	r1, [r4, #12]
   35570:	mov	r2, #0
   35574:	add	r0, r1, r7
   35578:	sub	r1, r1, #4
   3557c:	ldr	r3, [r0], #4
   35580:	add	r2, r2, #1
   35584:	sub	r3, r3, r5
   35588:	str	r3, [r1, #4]!
   3558c:	ldr	r3, [r4, #28]
   35590:	cmp	r3, r2
   35594:	bgt	3557c <__assert_fail@plt+0x22f88>
   35598:	b	35370 <__assert_fail@plt+0x22d7c>
   3559c:	ldr	r1, [r4, #44]	; 0x2c
   355a0:	ldr	r3, [r4, #52]	; 0x34
   355a4:	sub	r1, r1, r6
   355a8:	add	r1, r1, r5
   355ac:	sub	r3, r3, r6
   355b0:	add	r3, r3, r5
   355b4:	str	r1, [r4, #48]	; 0x30
   355b8:	mov	r1, #0
   355bc:	str	r3, [r4, #56]	; 0x38
   355c0:	strb	r1, [r4, #76]	; 0x4c
   355c4:	b	35188 <__assert_fail@plt+0x22b94>
   355c8:	sub	r8, r8, r6
   355cc:	cmn	r2, #1
   355d0:	ldr	r5, [sp, #4]
   355d4:	mov	r9, r2
   355d8:	str	r8, [r4, #28]
   355dc:	bne	3562c <__assert_fail@plt+0x23038>
   355e0:	ldr	r3, [sp]
   355e4:	mov	r2, r7
   355e8:	sub	r1, r3, #1
   355ec:	mov	r0, r4
   355f0:	bl	34c8c <__assert_fail@plt+0x22698>
   355f4:	str	r0, [r4, #60]	; 0x3c
   355f8:	cmp	r8, #0
   355fc:	bne	3566c <__assert_fail@plt+0x23078>
   35600:	ldrb	r2, [r4, #75]	; 0x4b
   35604:	str	r8, [r4, #32]
   35608:	ldr	r3, [r4, #80]	; 0x50
   3560c:	b	35098 <__assert_fail@plt+0x22aa4>
   35610:	ldr	r9, [sp, #12]
   35614:	sub	r8, r0, r8
   35618:	cmn	r9, #1
   3561c:	str	sl, [r4, #16]
   35620:	str	sl, [r4, #20]
   35624:	str	r8, [r4, #28]
   35628:	beq	354b0 <__assert_fail@plt+0x22ebc>
   3562c:	ldrb	r3, [r4, #78]	; 0x4e
   35630:	cmp	r3, #0
   35634:	bne	356a8 <__assert_fail@plt+0x230b4>
   35638:	cmp	r9, #10
   3563c:	movne	r3, #0
   35640:	beq	3564c <__assert_fail@plt+0x23058>
   35644:	str	r3, [r4, #60]	; 0x3c
   35648:	b	355f8 <__assert_fail@plt+0x23004>
   3564c:	ldrb	r3, [r4, #77]	; 0x4d
   35650:	cmp	r3, #0
   35654:	movne	r3, #2
   35658:	moveq	r3, #0
   3565c:	b	35644 <__assert_fail@plt+0x23050>
   35660:	mov	r0, r4
   35664:	bl	317a0 <__assert_fail@plt+0x1f1ac>
   35668:	b	350e0 <__assert_fail@plt+0x22aec>
   3566c:	ble	35694 <__assert_fail@plt+0x230a0>
   35670:	ldr	r2, [r4, #8]
   35674:	mov	r3, #0
   35678:	sub	r2, r2, #4
   3567c:	mvn	r1, #0
   35680:	str	r1, [r2, #4]!
   35684:	ldr	r8, [r4, #28]
   35688:	add	r3, r3, #1
   3568c:	cmp	r8, r3
   35690:	bgt	35680 <__assert_fail@plt+0x2308c>
   35694:	ldrb	r2, [r4, #75]	; 0x4b
   35698:	cmp	r2, #0
   3569c:	bne	356e4 <__assert_fail@plt+0x230f0>
   356a0:	ldr	r8, [r4, #28]
   356a4:	b	35604 <__assert_fail@plt+0x23010>
   356a8:	mov	r0, r9
   356ac:	bl	12354 <iswalnum@plt>
   356b0:	cmp	r9, #95	; 0x5f
   356b4:	clz	r0, r0
   356b8:	lsr	r0, r0, #5
   356bc:	moveq	r0, #0
   356c0:	cmp	r0, #0
   356c4:	moveq	r3, #1
   356c8:	bne	35638 <__assert_fail@plt+0x23044>
   356cc:	b	35644 <__assert_fail@plt+0x23050>
   356d0:	ldrb	r1, [r4, #77]	; 0x4d
   356d4:	cmp	r1, #0
   356d8:	movne	r1, #2
   356dc:	moveq	r1, #0
   356e0:	b	35508 <__assert_fail@plt+0x22f14>
   356e4:	mov	r2, r8
   356e8:	mov	r1, #255	; 0xff
   356ec:	ldr	r0, [r4, #4]
   356f0:	bl	12378 <memset@plt>
   356f4:	ldrb	r2, [r4, #75]	; 0x4b
   356f8:	b	356a0 <__assert_fail@plt+0x230ac>
   356fc:	cmp	r2, #6
   35700:	movlt	r0, r2
   35704:	movge	r0, #6
   35708:	cmp	r0, #0
   3570c:	ble	35750 <__assert_fail@plt+0x2315c>
   35710:	add	ip, sp, #16
   35714:	mov	lr, ip
   35718:	mov	sl, ip
   3571c:	sub	ip, r0, #1
   35720:	add	ip, lr, ip
   35724:	add	r0, r1, r0
   35728:	ldrb	lr, [r0, #-1]!
   3572c:	cmp	r1, r0
   35730:	ldrb	lr, [r3, lr]
   35734:	strb	lr, [ip], #-1
   35738:	bne	35728 <__assert_fail@plt+0x23134>
   3573c:	mov	r1, sl
   35740:	b	35470 <__assert_fail@plt+0x22e7c>
   35744:	sub	r8, r8, r6
   35748:	str	r8, [r4, #28]
   3574c:	b	355e0 <__assert_fail@plt+0x22fec>
   35750:	add	r3, sp, #16
   35754:	mov	sl, r3
   35758:	b	3573c <__assert_fail@plt+0x23148>
   3575c:	ldr	ip, [r1]
   35760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35764:	cmp	ip, #0
   35768:	sub	sp, sp, #20
   3576c:	ldr	r6, [r0, #84]	; 0x54
   35770:	ble	3583c <__assert_fail@plt+0x23248>
   35774:	mov	r7, r2
   35778:	str	r3, [sp, #8]
   3577c:	mov	r8, r0
   35780:	str	r1, [sp, #4]
   35784:	mov	r4, #0
   35788:	mov	r2, #24
   3578c:	mov	r9, #1
   35790:	b	3579c <__assert_fail@plt+0x231a8>
   35794:	cmp	r4, ip
   35798:	bge	3583c <__assert_fail@plt+0x23248>
   3579c:	ldr	r1, [r7]
   357a0:	ldr	r3, [r6]
   357a4:	ldr	r5, [r1, r4, lsl #2]
   357a8:	add	r4, r4, #1
   357ac:	add	r1, r3, r5, lsl #3
   357b0:	ldrb	r1, [r1, #4]
   357b4:	cmp	r1, #8
   357b8:	bne	35794 <__assert_fail@plt+0x231a0>
   357bc:	ldr	r3, [r3, r5, lsl #3]
   357c0:	cmp	r3, #31
   357c4:	bgt	35794 <__assert_fail@plt+0x231a0>
   357c8:	ldr	r1, [r6, #80]	; 0x50
   357cc:	lsr	r3, r1, r3
   357d0:	tst	r3, #1
   357d4:	beq	35794 <__assert_fail@plt+0x231a0>
   357d8:	ldr	sl, [r8, #124]	; 0x7c
   357dc:	ldr	r3, [r8, #128]	; 0x80
   357e0:	ldr	fp, [r8, #132]	; 0x84
   357e4:	cmp	r3, sl
   357e8:	beq	35850 <__assert_fail@plt+0x2325c>
   357ec:	mov	r1, r2
   357f0:	mov	r0, r9
   357f4:	str	r2, [sp, #12]
   357f8:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   357fc:	ldr	r3, [r8, #124]	; 0x7c
   35800:	ldr	r1, [r8, #132]	; 0x84
   35804:	add	ip, r3, #1
   35808:	str	r0, [fp, sl, lsl #2]
   3580c:	ldr	r3, [r1, r3, lsl #2]
   35810:	cmp	r3, #0
   35814:	beq	35848 <__assert_fail@plt+0x23254>
   35818:	ldr	r2, [sp, #8]
   3581c:	str	r5, [r3, #4]
   35820:	str	ip, [r8, #124]	; 0x7c
   35824:	str	r2, [r3]
   35828:	ldr	r3, [sp, #4]
   3582c:	ldr	r2, [sp, #12]
   35830:	ldr	ip, [r3]
   35834:	cmp	r4, ip
   35838:	blt	3579c <__assert_fail@plt+0x231a8>
   3583c:	mov	r0, #0
   35840:	add	sp, sp, #20
   35844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35848:	mov	r0, #12
   3584c:	b	35840 <__assert_fail@plt+0x2324c>
   35850:	mov	r0, fp
   35854:	lsl	r1, sl, #3
   35858:	str	r2, [sp, #12]
   3585c:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   35860:	lsl	r3, sl, #1
   35864:	ldr	r2, [sp, #12]
   35868:	subs	fp, r0, #0
   3586c:	beq	35848 <__assert_fail@plt+0x23254>
   35870:	ldr	sl, [r8, #124]	; 0x7c
   35874:	str	fp, [r8, #132]	; 0x84
   35878:	str	r3, [r8, #128]	; 0x80
   3587c:	b	357ec <__assert_fail@plt+0x231f8>
   35880:	push	{r4, r5, r6, lr}
   35884:	mov	r5, r0
   35888:	mov	r0, r1
   3588c:	mov	r4, r1
   35890:	bl	12300 <strlen@plt>
   35894:	cmp	r0, #1
   35898:	moveq	r1, #0
   3589c:	ldrbeq	r3, [r4]
   358a0:	movne	r1, #3
   358a4:	andeq	ip, r3, #31
   358a8:	asreq	r3, r3, #5
   358ac:	ldreq	r2, [r5, r3, lsl #2]
   358b0:	orreq	r2, r2, r0, lsl ip
   358b4:	mov	r0, r1
   358b8:	streq	r2, [r5, r3, lsl #2]
   358bc:	pop	{r4, r5, r6, pc}
   358c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   358c4:	mov	r6, r0
   358c8:	ldr	ip, [sp, #40]	; 0x28
   358cc:	mov	r5, r1
   358d0:	tst	ip, #4194304	; 0x400000
   358d4:	mov	sl, r2
   358d8:	mov	r7, r3
   358dc:	ldr	r9, [sp, #32]
   358e0:	beq	35900 <__assert_fail@plt+0x2330c>
   358e4:	ldr	r1, [pc, #2196]	; 36180 <__assert_fail@plt+0x23b8c>
   358e8:	ldr	r0, [sp, #36]	; 0x24
   358ec:	bl	11f40 <strcmp@plt>
   358f0:	cmp	r0, #0
   358f4:	bne	359e0 <__assert_fail@plt+0x233ec>
   358f8:	ldr	r3, [pc, #2180]	; 36184 <__assert_fail@plt+0x23b90>
   358fc:	str	r3, [sp, #36]	; 0x24
   35900:	ldr	r4, [r7]
   35904:	ldr	r3, [r9]
   35908:	cmp	r3, r4
   3590c:	beq	35a10 <__assert_fail@plt+0x2341c>
   35910:	ldr	r8, [sl]
   35914:	add	r3, r4, #1
   35918:	str	r3, [r7]
   3591c:	ldr	r0, [sp, #36]	; 0x24
   35920:	bl	11ee0 <wctype@plt>
   35924:	ldr	r1, [pc, #2140]	; 36188 <__assert_fail@plt+0x23b94>
   35928:	str	r0, [r8, r4, lsl #2]
   3592c:	ldr	r0, [sp, #36]	; 0x24
   35930:	bl	11f40 <strcmp@plt>
   35934:	subs	r4, r0, #0
   35938:	beq	35998 <__assert_fail@plt+0x233a4>
   3593c:	ldr	r1, [pc, #2120]	; 3618c <__assert_fail@plt+0x23b98>
   35940:	ldr	r0, [sp, #36]	; 0x24
   35944:	bl	11f40 <strcmp@plt>
   35948:	subs	r4, r0, #0
   3594c:	bne	35a3c <__assert_fail@plt+0x23448>
   35950:	cmp	r6, #0
   35954:	bne	35bf0 <__assert_fail@plt+0x235fc>
   35958:	bl	122b8 <__ctype_b_loc@plt>
   3595c:	mov	ip, #1
   35960:	ldr	r3, [r0]
   35964:	sub	r3, r3, #2
   35968:	ldrh	r2, [r3, #2]!
   3596c:	asr	r1, r4, #5
   35970:	and	r0, r4, #31
   35974:	tst	r2, #2
   35978:	add	r4, r4, #1
   3597c:	ldrne	r2, [r5, r1, lsl #2]
   35980:	orrne	r2, r2, ip, lsl r0
   35984:	strne	r2, [r5, r1, lsl #2]
   35988:	cmp	r4, #256	; 0x100
   3598c:	bne	35968 <__assert_fail@plt+0x23374>
   35990:	mov	r0, #0
   35994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35998:	cmp	r6, #0
   3599c:	bne	35b5c <__assert_fail@plt+0x23568>
   359a0:	bl	122b8 <__ctype_b_loc@plt>
   359a4:	mov	lr, #1
   359a8:	ldr	r3, [r0]
   359ac:	sub	r3, r3, #2
   359b0:	ldrh	r0, [r3, #2]!
   359b4:	asr	r2, r4, #5
   359b8:	and	ip, r4, #31
   359bc:	tst	r0, #8
   359c0:	add	r4, r4, #1
   359c4:	ldrne	r1, [r5, r2, lsl #2]
   359c8:	orrne	r1, r1, lr, lsl ip
   359cc:	strne	r1, [r5, r2, lsl #2]
   359d0:	cmp	r4, #256	; 0x100
   359d4:	bne	359b0 <__assert_fail@plt+0x233bc>
   359d8:	mov	r0, #0
   359dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   359e0:	ldr	r0, [sp, #36]	; 0x24
   359e4:	ldr	r1, [pc, #1956]	; 36190 <__assert_fail@plt+0x23b9c>
   359e8:	bl	11f40 <strcmp@plt>
   359ec:	ldr	r3, [pc, #1936]	; 36184 <__assert_fail@plt+0x23b90>
   359f0:	ldr	r2, [sp, #36]	; 0x24
   359f4:	ldr	r4, [r7]
   359f8:	cmp	r0, #0
   359fc:	moveq	r2, r3
   35a00:	ldr	r3, [r9]
   35a04:	str	r2, [sp, #36]	; 0x24
   35a08:	cmp	r3, r4
   35a0c:	bne	35910 <__assert_fail@plt+0x2331c>
   35a10:	lsl	r4, r4, #1
   35a14:	add	r4, r4, #1
   35a18:	ldr	r0, [sl]
   35a1c:	lsl	r1, r4, #2
   35a20:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   35a24:	subs	r8, r0, #0
   35a28:	beq	35ce8 <__assert_fail@plt+0x236f4>
   35a2c:	str	r8, [sl]
   35a30:	str	r4, [r9]
   35a34:	ldr	r4, [r7]
   35a38:	b	35914 <__assert_fail@plt+0x23320>
   35a3c:	ldr	r1, [pc, #1868]	; 36190 <__assert_fail@plt+0x23b9c>
   35a40:	ldr	r0, [sp, #36]	; 0x24
   35a44:	bl	11f40 <strcmp@plt>
   35a48:	subs	r4, r0, #0
   35a4c:	beq	35aa8 <__assert_fail@plt+0x234b4>
   35a50:	ldr	r1, [pc, #1852]	; 36194 <__assert_fail@plt+0x23ba0>
   35a54:	ldr	r0, [sp, #36]	; 0x24
   35a58:	bl	11f40 <strcmp@plt>
   35a5c:	subs	r4, r0, #0
   35a60:	bne	35af0 <__assert_fail@plt+0x234fc>
   35a64:	cmp	r6, #0
   35a68:	bne	35d48 <__assert_fail@plt+0x23754>
   35a6c:	bl	122b8 <__ctype_b_loc@plt>
   35a70:	mov	ip, #1
   35a74:	ldr	r3, [r0]
   35a78:	sub	r3, r3, #2
   35a7c:	ldrh	r2, [r3, #2]!
   35a80:	asr	r1, r4, #5
   35a84:	and	r0, r4, #31
   35a88:	tst	r2, #8192	; 0x2000
   35a8c:	add	r4, r4, #1
   35a90:	ldrne	r2, [r5, r1, lsl #2]
   35a94:	orrne	r2, r2, ip, lsl r0
   35a98:	strne	r2, [r5, r1, lsl #2]
   35a9c:	cmp	r4, #256	; 0x100
   35aa0:	bne	35a7c <__assert_fail@plt+0x23488>
   35aa4:	b	35990 <__assert_fail@plt+0x2339c>
   35aa8:	cmp	r6, #0
   35aac:	bne	35c98 <__assert_fail@plt+0x236a4>
   35ab0:	bl	122b8 <__ctype_b_loc@plt>
   35ab4:	mov	ip, #1
   35ab8:	ldr	r3, [r0]
   35abc:	sub	r3, r3, #2
   35ac0:	ldrh	r2, [r3, #2]!
   35ac4:	asr	r1, r4, #5
   35ac8:	and	r0, r4, #31
   35acc:	tst	r2, #512	; 0x200
   35ad0:	add	r4, r4, #1
   35ad4:	ldrne	r2, [r5, r1, lsl #2]
   35ad8:	orrne	r2, r2, ip, lsl r0
   35adc:	strne	r2, [r5, r1, lsl #2]
   35ae0:	cmp	r4, #256	; 0x100
   35ae4:	bne	35ac0 <__assert_fail@plt+0x234cc>
   35ae8:	mov	r0, #0
   35aec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35af0:	ldr	r1, [pc, #1676]	; 36184 <__assert_fail@plt+0x23b90>
   35af4:	ldr	r0, [sp, #36]	; 0x24
   35af8:	bl	11f40 <strcmp@plt>
   35afc:	subs	r4, r0, #0
   35b00:	beq	35bac <__assert_fail@plt+0x235b8>
   35b04:	ldr	r1, [pc, #1676]	; 36198 <__assert_fail@plt+0x23ba4>
   35b08:	ldr	r0, [sp, #36]	; 0x24
   35b0c:	bl	11f40 <strcmp@plt>
   35b10:	subs	r4, r0, #0
   35b14:	bne	35c40 <__assert_fail@plt+0x2364c>
   35b18:	cmp	r6, #0
   35b1c:	bne	35f38 <__assert_fail@plt+0x23944>
   35b20:	bl	122b8 <__ctype_b_loc@plt>
   35b24:	mov	ip, #1
   35b28:	ldr	r3, [r0]
   35b2c:	sub	r3, r3, #2
   35b30:	ldrh	r1, [r3, #2]!
   35b34:	asr	r2, r4, #5
   35b38:	and	r0, r4, #31
   35b3c:	tst	r1, #2048	; 0x800
   35b40:	add	r4, r4, #1
   35b44:	ldrne	r1, [r5, r2, lsl #2]
   35b48:	orrne	r1, r1, ip, lsl r0
   35b4c:	strne	r1, [r5, r2, lsl #2]
   35b50:	cmp	r4, #256	; 0x100
   35b54:	bne	35b30 <__assert_fail@plt+0x2353c>
   35b58:	b	35990 <__assert_fail@plt+0x2339c>
   35b5c:	bl	122b8 <__ctype_b_loc@plt>
   35b60:	mov	r4, #1
   35b64:	mov	r1, r6
   35b68:	ldr	r3, [r0]
   35b6c:	add	ip, r3, #508	; 0x1fc
   35b70:	add	ip, ip, #2
   35b74:	sub	r3, r3, #2
   35b78:	ldrh	r2, [r3, #2]!
   35b7c:	tst	r2, #8
   35b80:	beq	35b9c <__assert_fail@plt+0x235a8>
   35b84:	ldrb	r2, [r1]
   35b88:	and	lr, r2, #31
   35b8c:	asr	r2, r2, #5
   35b90:	ldr	r0, [r5, r2, lsl #2]
   35b94:	orr	r0, r0, r4, lsl lr
   35b98:	str	r0, [r5, r2, lsl #2]
   35b9c:	cmp	ip, r3
   35ba0:	add	r1, r1, #1
   35ba4:	bne	35b78 <__assert_fail@plt+0x23584>
   35ba8:	b	35990 <__assert_fail@plt+0x2339c>
   35bac:	cmp	r6, #0
   35bb0:	bne	35d98 <__assert_fail@plt+0x237a4>
   35bb4:	bl	122b8 <__ctype_b_loc@plt>
   35bb8:	mov	ip, #1
   35bbc:	ldr	r3, [r0]
   35bc0:	sub	r3, r3, #2
   35bc4:	ldrh	r2, [r3, #2]!
   35bc8:	asr	r1, r4, #5
   35bcc:	and	r0, r4, #31
   35bd0:	tst	r2, #1024	; 0x400
   35bd4:	add	r4, r4, #1
   35bd8:	ldrne	r2, [r5, r1, lsl #2]
   35bdc:	orrne	r2, r2, ip, lsl r0
   35be0:	strne	r2, [r5, r1, lsl #2]
   35be4:	cmp	r4, #256	; 0x100
   35be8:	bne	35bc4 <__assert_fail@plt+0x235d0>
   35bec:	b	35990 <__assert_fail@plt+0x2339c>
   35bf0:	bl	122b8 <__ctype_b_loc@plt>
   35bf4:	mov	r4, #1
   35bf8:	mov	r1, r6
   35bfc:	ldr	r3, [r0]
   35c00:	add	ip, r3, #508	; 0x1fc
   35c04:	add	ip, ip, #2
   35c08:	sub	r3, r3, #2
   35c0c:	ldrh	r2, [r3, #2]!
   35c10:	tst	r2, #2
   35c14:	beq	35c30 <__assert_fail@plt+0x2363c>
   35c18:	ldrb	r2, [r1]
   35c1c:	and	lr, r2, #31
   35c20:	asr	r2, r2, #5
   35c24:	ldr	r0, [r5, r2, lsl #2]
   35c28:	orr	r0, r0, r4, lsl lr
   35c2c:	str	r0, [r5, r2, lsl #2]
   35c30:	cmp	ip, r3
   35c34:	add	r1, r1, #1
   35c38:	bne	35c0c <__assert_fail@plt+0x23618>
   35c3c:	b	35990 <__assert_fail@plt+0x2339c>
   35c40:	ldr	r1, [pc, #1364]	; 3619c <__assert_fail@plt+0x23ba8>
   35c44:	ldr	r0, [sp, #36]	; 0x24
   35c48:	bl	11f40 <strcmp@plt>
   35c4c:	subs	r4, r0, #0
   35c50:	bne	35cf0 <__assert_fail@plt+0x236fc>
   35c54:	cmp	r6, #0
   35c58:	bne	35f88 <__assert_fail@plt+0x23994>
   35c5c:	bl	122b8 <__ctype_b_loc@plt>
   35c60:	mov	ip, #1
   35c64:	ldr	r3, [r0]
   35c68:	sub	r3, r3, #2
   35c6c:	ldrh	r2, [r3, #2]!
   35c70:	asr	r1, r4, #5
   35c74:	and	r0, r4, #31
   35c78:	tst	r2, #16384	; 0x4000
   35c7c:	add	r4, r4, #1
   35c80:	ldrne	r2, [r5, r1, lsl #2]
   35c84:	orrne	r2, r2, ip, lsl r0
   35c88:	strne	r2, [r5, r1, lsl #2]
   35c8c:	cmp	r4, #256	; 0x100
   35c90:	bne	35c6c <__assert_fail@plt+0x23678>
   35c94:	b	35990 <__assert_fail@plt+0x2339c>
   35c98:	bl	122b8 <__ctype_b_loc@plt>
   35c9c:	mov	r4, #1
   35ca0:	mov	r1, r6
   35ca4:	ldr	r3, [r0]
   35ca8:	add	ip, r3, #508	; 0x1fc
   35cac:	add	ip, ip, #2
   35cb0:	sub	r3, r3, #2
   35cb4:	ldrh	r2, [r3, #2]!
   35cb8:	tst	r2, #512	; 0x200
   35cbc:	beq	35cd8 <__assert_fail@plt+0x236e4>
   35cc0:	ldrb	r2, [r1]
   35cc4:	and	lr, r2, #31
   35cc8:	asr	r2, r2, #5
   35ccc:	ldr	r0, [r5, r2, lsl #2]
   35cd0:	orr	r0, r0, r4, lsl lr
   35cd4:	str	r0, [r5, r2, lsl #2]
   35cd8:	cmp	ip, r3
   35cdc:	add	r1, r1, #1
   35ce0:	bne	35cb4 <__assert_fail@plt+0x236c0>
   35ce4:	b	35990 <__assert_fail@plt+0x2339c>
   35ce8:	mov	r0, #12
   35cec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35cf0:	ldr	r1, [pc, #1160]	; 36180 <__assert_fail@plt+0x23b8c>
   35cf4:	ldr	r0, [sp, #36]	; 0x24
   35cf8:	bl	11f40 <strcmp@plt>
   35cfc:	subs	r4, r0, #0
   35d00:	bne	35de8 <__assert_fail@plt+0x237f4>
   35d04:	cmp	r6, #0
   35d08:	bne	35e40 <__assert_fail@plt+0x2384c>
   35d0c:	bl	122b8 <__ctype_b_loc@plt>
   35d10:	mov	ip, #1
   35d14:	ldr	r3, [r0]
   35d18:	sub	r3, r3, #2
   35d1c:	ldrh	r2, [r3, #2]!
   35d20:	asr	r1, r4, #5
   35d24:	and	r0, r4, #31
   35d28:	tst	r2, #256	; 0x100
   35d2c:	add	r4, r4, #1
   35d30:	ldrne	r2, [r5, r1, lsl #2]
   35d34:	orrne	r2, r2, ip, lsl r0
   35d38:	strne	r2, [r5, r1, lsl #2]
   35d3c:	cmp	r4, #256	; 0x100
   35d40:	bne	35d1c <__assert_fail@plt+0x23728>
   35d44:	b	35990 <__assert_fail@plt+0x2339c>
   35d48:	bl	122b8 <__ctype_b_loc@plt>
   35d4c:	mov	r4, #1
   35d50:	mov	r1, r6
   35d54:	ldr	r3, [r0]
   35d58:	add	ip, r3, #508	; 0x1fc
   35d5c:	add	ip, ip, #2
   35d60:	sub	r3, r3, #2
   35d64:	ldrh	r2, [r3, #2]!
   35d68:	tst	r2, #8192	; 0x2000
   35d6c:	beq	35d88 <__assert_fail@plt+0x23794>
   35d70:	ldrb	r2, [r1]
   35d74:	and	lr, r2, #31
   35d78:	asr	r2, r2, #5
   35d7c:	ldr	r0, [r5, r2, lsl #2]
   35d80:	orr	r0, r0, r4, lsl lr
   35d84:	str	r0, [r5, r2, lsl #2]
   35d88:	cmp	r3, ip
   35d8c:	add	r1, r1, #1
   35d90:	bne	35d64 <__assert_fail@plt+0x23770>
   35d94:	b	35990 <__assert_fail@plt+0x2339c>
   35d98:	bl	122b8 <__ctype_b_loc@plt>
   35d9c:	mov	r4, #1
   35da0:	mov	r1, r6
   35da4:	ldr	r3, [r0]
   35da8:	add	ip, r3, #508	; 0x1fc
   35dac:	add	ip, ip, #2
   35db0:	sub	r3, r3, #2
   35db4:	ldrh	r2, [r3, #2]!
   35db8:	tst	r2, #1024	; 0x400
   35dbc:	beq	35dd8 <__assert_fail@plt+0x237e4>
   35dc0:	ldrb	r2, [r1]
   35dc4:	and	lr, r2, #31
   35dc8:	asr	r2, r2, #5
   35dcc:	ldr	r0, [r5, r2, lsl #2]
   35dd0:	orr	r0, r0, r4, lsl lr
   35dd4:	str	r0, [r5, r2, lsl #2]
   35dd8:	cmp	ip, r3
   35ddc:	add	r1, r1, #1
   35de0:	bne	35db4 <__assert_fail@plt+0x237c0>
   35de4:	b	35990 <__assert_fail@plt+0x2339c>
   35de8:	ldr	r1, [pc, #944]	; 361a0 <__assert_fail@plt+0x23bac>
   35dec:	ldr	r0, [sp, #36]	; 0x24
   35df0:	bl	11f40 <strcmp@plt>
   35df4:	subs	r4, r0, #0
   35df8:	bne	35ee0 <__assert_fail@plt+0x238ec>
   35dfc:	cmp	r6, #0
   35e00:	bne	35e90 <__assert_fail@plt+0x2389c>
   35e04:	bl	122b8 <__ctype_b_loc@plt>
   35e08:	mov	ip, #1
   35e0c:	ldr	r3, [r0]
   35e10:	sub	r3, r3, #2
   35e14:	ldrh	r2, [r3, #2]!
   35e18:	asr	r1, r4, #5
   35e1c:	and	r0, r4, #31
   35e20:	tst	r2, #1
   35e24:	add	r4, r4, #1
   35e28:	ldrne	r2, [r5, r1, lsl #2]
   35e2c:	orrne	r2, r2, ip, lsl r0
   35e30:	strne	r2, [r5, r1, lsl #2]
   35e34:	cmp	r4, #256	; 0x100
   35e38:	bne	35e14 <__assert_fail@plt+0x23820>
   35e3c:	b	35990 <__assert_fail@plt+0x2339c>
   35e40:	bl	122b8 <__ctype_b_loc@plt>
   35e44:	mov	r1, r6
   35e48:	mov	lr, #1
   35e4c:	ldr	r3, [r0]
   35e50:	add	r0, r3, #508	; 0x1fc
   35e54:	add	r0, r0, #2
   35e58:	sub	r3, r3, #2
   35e5c:	ldrh	r2, [r3, #2]!
   35e60:	tst	r2, #256	; 0x100
   35e64:	beq	35e80 <__assert_fail@plt+0x2388c>
   35e68:	ldrb	r2, [r1]
   35e6c:	and	r4, r2, #31
   35e70:	asr	r2, r2, #5
   35e74:	ldr	ip, [r5, r2, lsl #2]
   35e78:	orr	ip, ip, lr, lsl r4
   35e7c:	str	ip, [r5, r2, lsl #2]
   35e80:	cmp	r0, r3
   35e84:	add	r1, r1, #1
   35e88:	bne	35e5c <__assert_fail@plt+0x23868>
   35e8c:	b	35990 <__assert_fail@plt+0x2339c>
   35e90:	bl	122b8 <__ctype_b_loc@plt>
   35e94:	mov	r1, r6
   35e98:	mov	lr, #1
   35e9c:	ldr	r3, [r0]
   35ea0:	add	r0, r3, #508	; 0x1fc
   35ea4:	add	r0, r0, #2
   35ea8:	sub	r3, r3, #2
   35eac:	ldrh	r2, [r3, #2]!
   35eb0:	tst	r2, #1
   35eb4:	beq	35ed0 <__assert_fail@plt+0x238dc>
   35eb8:	ldrb	r2, [r1]
   35ebc:	and	r4, r2, #31
   35ec0:	asr	r2, r2, #5
   35ec4:	ldr	ip, [r5, r2, lsl #2]
   35ec8:	orr	ip, ip, lr, lsl r4
   35ecc:	str	ip, [r5, r2, lsl #2]
   35ed0:	cmp	r0, r3
   35ed4:	add	r1, r1, #1
   35ed8:	bne	35eac <__assert_fail@plt+0x238b8>
   35edc:	b	35990 <__assert_fail@plt+0x2339c>
   35ee0:	ldr	r1, [pc, #700]	; 361a4 <__assert_fail@plt+0x23bb0>
   35ee4:	ldr	r0, [sp, #36]	; 0x24
   35ee8:	bl	11f40 <strcmp@plt>
   35eec:	subs	r4, r0, #0
   35ef0:	bne	36028 <__assert_fail@plt+0x23a34>
   35ef4:	cmp	r6, #0
   35ef8:	bne	35fd8 <__assert_fail@plt+0x239e4>
   35efc:	bl	122b8 <__ctype_b_loc@plt>
   35f00:	mov	ip, #1
   35f04:	ldr	r3, [r0]
   35f08:	sub	r3, r3, #2
   35f0c:	ldrsh	r2, [r3, #2]!
   35f10:	cmp	r2, #0
   35f14:	asrlt	r0, r4, #5
   35f18:	andlt	r1, r4, #31
   35f1c:	ldrlt	r2, [r5, r0, lsl #2]
   35f20:	add	r4, r4, #1
   35f24:	orrlt	r2, r2, ip, lsl r1
   35f28:	strlt	r2, [r5, r0, lsl #2]
   35f2c:	cmp	r4, #256	; 0x100
   35f30:	bne	35f0c <__assert_fail@plt+0x23918>
   35f34:	b	35990 <__assert_fail@plt+0x2339c>
   35f38:	bl	122b8 <__ctype_b_loc@plt>
   35f3c:	mov	r1, r6
   35f40:	mov	lr, #1
   35f44:	ldr	r3, [r0]
   35f48:	add	r2, r3, #508	; 0x1fc
   35f4c:	add	r2, r2, #2
   35f50:	sub	r3, r3, #2
   35f54:	ldrh	r0, [r3, #2]!
   35f58:	tst	r0, #2048	; 0x800
   35f5c:	beq	35f78 <__assert_fail@plt+0x23984>
   35f60:	ldrb	r0, [r1]
   35f64:	and	r4, r0, #31
   35f68:	asr	r0, r0, #5
   35f6c:	ldr	ip, [r5, r0, lsl #2]
   35f70:	orr	ip, ip, lr, lsl r4
   35f74:	str	ip, [r5, r0, lsl #2]
   35f78:	cmp	r2, r3
   35f7c:	add	r1, r1, #1
   35f80:	bne	35f54 <__assert_fail@plt+0x23960>
   35f84:	b	35990 <__assert_fail@plt+0x2339c>
   35f88:	bl	122b8 <__ctype_b_loc@plt>
   35f8c:	mov	r1, r6
   35f90:	mov	lr, #1
   35f94:	ldr	r3, [r0]
   35f98:	add	r0, r3, #508	; 0x1fc
   35f9c:	add	r0, r0, #2
   35fa0:	sub	r3, r3, #2
   35fa4:	ldrh	r2, [r3, #2]!
   35fa8:	tst	r2, #16384	; 0x4000
   35fac:	beq	35fc8 <__assert_fail@plt+0x239d4>
   35fb0:	ldrb	r2, [r1]
   35fb4:	and	r4, r2, #31
   35fb8:	asr	r2, r2, #5
   35fbc:	ldr	ip, [r5, r2, lsl #2]
   35fc0:	orr	ip, ip, lr, lsl r4
   35fc4:	str	ip, [r5, r2, lsl #2]
   35fc8:	cmp	r0, r3
   35fcc:	add	r1, r1, #1
   35fd0:	bne	35fa4 <__assert_fail@plt+0x239b0>
   35fd4:	b	35990 <__assert_fail@plt+0x2339c>
   35fd8:	bl	122b8 <__ctype_b_loc@plt>
   35fdc:	mov	r1, r6
   35fe0:	mov	lr, #1
   35fe4:	ldr	r3, [r0]
   35fe8:	add	r0, r3, #508	; 0x1fc
   35fec:	add	r0, r0, #2
   35ff0:	sub	r3, r3, #2
   35ff4:	ldrsh	r2, [r3, #2]!
   35ff8:	cmp	r2, #0
   35ffc:	bge	36018 <__assert_fail@plt+0x23a24>
   36000:	ldrb	r2, [r1]
   36004:	and	r4, r2, #31
   36008:	asr	r2, r2, #5
   3600c:	ldr	ip, [r5, r2, lsl #2]
   36010:	orr	ip, ip, lr, lsl r4
   36014:	str	ip, [r5, r2, lsl #2]
   36018:	cmp	r0, r3
   3601c:	add	r1, r1, #1
   36020:	bne	35ff4 <__assert_fail@plt+0x23a00>
   36024:	b	35990 <__assert_fail@plt+0x2339c>
   36028:	ldr	r1, [pc, #376]	; 361a8 <__assert_fail@plt+0x23bb4>
   3602c:	ldr	r0, [sp, #36]	; 0x24
   36030:	bl	11f40 <strcmp@plt>
   36034:	subs	r4, r0, #0
   36038:	bne	36080 <__assert_fail@plt+0x23a8c>
   3603c:	cmp	r6, #0
   36040:	bne	3609c <__assert_fail@plt+0x23aa8>
   36044:	bl	122b8 <__ctype_b_loc@plt>
   36048:	mov	ip, #1
   3604c:	ldr	r3, [r0]
   36050:	sub	r3, r3, #2
   36054:	ldrh	r2, [r3, #2]!
   36058:	asr	r1, r4, #5
   3605c:	and	r0, r4, #31
   36060:	tst	r2, #4
   36064:	add	r4, r4, #1
   36068:	ldrne	r2, [r5, r1, lsl #2]
   3606c:	orrne	r2, r2, ip, lsl r0
   36070:	strne	r2, [r5, r1, lsl #2]
   36074:	cmp	r4, #256	; 0x100
   36078:	bne	36054 <__assert_fail@plt+0x23a60>
   3607c:	b	35990 <__assert_fail@plt+0x2339c>
   36080:	ldr	r1, [pc, #292]	; 361ac <__assert_fail@plt+0x23bb8>
   36084:	ldr	r0, [sp, #36]	; 0x24
   36088:	bl	11f40 <strcmp@plt>
   3608c:	subs	r4, r0, #0
   36090:	beq	360ec <__assert_fail@plt+0x23af8>
   36094:	mov	r0, #4
   36098:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3609c:	bl	122b8 <__ctype_b_loc@plt>
   360a0:	mov	r1, r6
   360a4:	mov	lr, #1
   360a8:	ldr	r3, [r0]
   360ac:	add	r0, r3, #508	; 0x1fc
   360b0:	add	r0, r0, #2
   360b4:	sub	r3, r3, #2
   360b8:	ldrh	r2, [r3, #2]!
   360bc:	tst	r2, #4
   360c0:	beq	360dc <__assert_fail@plt+0x23ae8>
   360c4:	ldrb	r2, [r1]
   360c8:	and	r4, r2, #31
   360cc:	asr	r2, r2, #5
   360d0:	ldr	ip, [r5, r2, lsl #2]
   360d4:	orr	ip, ip, lr, lsl r4
   360d8:	str	ip, [r5, r2, lsl #2]
   360dc:	cmp	r3, r0
   360e0:	add	r1, r1, #1
   360e4:	bne	360b8 <__assert_fail@plt+0x23ac4>
   360e8:	b	35990 <__assert_fail@plt+0x2339c>
   360ec:	cmp	r6, #0
   360f0:	bne	36130 <__assert_fail@plt+0x23b3c>
   360f4:	bl	122b8 <__ctype_b_loc@plt>
   360f8:	mov	ip, #1
   360fc:	ldr	r3, [r0]
   36100:	sub	r3, r3, #2
   36104:	ldrh	r2, [r3, #2]!
   36108:	asr	r1, r4, #5
   3610c:	and	r0, r4, #31
   36110:	tst	r2, #4096	; 0x1000
   36114:	add	r4, r4, #1
   36118:	ldrne	r2, [r5, r1, lsl #2]
   3611c:	orrne	r2, r2, ip, lsl r0
   36120:	strne	r2, [r5, r1, lsl #2]
   36124:	cmp	r4, #256	; 0x100
   36128:	bne	36104 <__assert_fail@plt+0x23b10>
   3612c:	b	35990 <__assert_fail@plt+0x2339c>
   36130:	bl	122b8 <__ctype_b_loc@plt>
   36134:	mov	r1, r6
   36138:	mov	lr, #1
   3613c:	ldr	r3, [r0]
   36140:	add	r0, r3, #508	; 0x1fc
   36144:	add	r0, r0, #2
   36148:	sub	r3, r3, #2
   3614c:	ldrh	r2, [r3, #2]!
   36150:	tst	r2, #4096	; 0x1000
   36154:	beq	36170 <__assert_fail@plt+0x23b7c>
   36158:	ldrb	r2, [r1]
   3615c:	and	r4, r2, #31
   36160:	asr	r2, r2, #5
   36164:	ldr	ip, [r5, r2, lsl #2]
   36168:	orr	ip, ip, lr, lsl r4
   3616c:	str	ip, [r5, r2, lsl #2]
   36170:	cmp	r0, r3
   36174:	add	r1, r1, #1
   36178:	bne	3614c <__assert_fail@plt+0x23b58>
   3617c:	b	35990 <__assert_fail@plt+0x2339c>
   36180:	andeq	r6, r4, ip, lsr #2
   36184:	andeq	r6, r4, r4, lsr #2
   36188:	andeq	r6, r4, ip, lsr r1
   3618c:	andeq	r6, r4, r4, asr #2
   36190:	andeq	r6, r4, r4, lsr r1
   36194:	andeq	r6, r4, ip, asr #2
   36198:	andeq	r6, r4, r4, asr r1
   3619c:	ldrdeq	r1, [r4], -r0
   361a0:	andeq	r6, r4, ip, asr r1
   361a4:	andeq	r6, r4, r4, ror #2
   361a8:	andeq	r6, r4, ip, ror #2
   361ac:	andeq	r6, r4, r4, ror r1
   361b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   361b4:	sub	sp, sp, #44	; 0x2c
   361b8:	mov	r6, r0
   361bc:	mov	fp, r1
   361c0:	mov	r9, #0
   361c4:	mov	r1, #1
   361c8:	mov	r0, #32
   361cc:	mov	sl, r2
   361d0:	mov	r5, r3
   361d4:	str	r9, [sp, #20]
   361d8:	ldrb	r8, [sp, #80]	; 0x50
   361dc:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   361e0:	subs	r4, r0, #0
   361e4:	beq	363c0 <__assert_fail@plt+0x23dcc>
   361e8:	mov	r1, #1
   361ec:	mov	r0, #40	; 0x28
   361f0:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   361f4:	subs	r7, r0, #0
   361f8:	beq	363dc <__assert_fail@plt+0x23de8>
   361fc:	ldrb	r2, [r7, #16]
   36200:	and	r3, r8, #1
   36204:	mov	r0, fp
   36208:	bic	r2, r2, #1
   3620c:	orr	r3, r3, r2
   36210:	add	r2, sp, #20
   36214:	strb	r3, [r7, #16]
   36218:	mov	r1, r4
   3621c:	stm	sp, {r2, sl}
   36220:	add	r3, r7, #36	; 0x24
   36224:	str	r9, [sp, #8]
   36228:	add	r2, r7, #12
   3622c:	bl	358c0 <__assert_fail@plt+0x232cc>
   36230:	subs	sl, r0, #0
   36234:	bne	363f8 <__assert_fail@plt+0x23e04>
   36238:	ldrb	r3, [r5]
   3623c:	cmp	r3, #0
   36240:	movne	ip, #1
   36244:	beq	36268 <__assert_fail@plt+0x23c74>
   36248:	asr	r1, r3, #5
   3624c:	and	r0, r3, #31
   36250:	ldr	r2, [r4, r1, lsl #2]
   36254:	ldrb	r3, [r5, #1]!
   36258:	orr	r2, r2, ip, lsl r0
   3625c:	cmp	r3, #0
   36260:	str	r2, [r4, r1, lsl #2]
   36264:	bne	36248 <__assert_fail@plt+0x23c54>
   36268:	cmp	r8, #0
   3626c:	bne	36360 <__assert_fail@plt+0x23d6c>
   36270:	ldr	r3, [r6, #92]	; 0x5c
   36274:	cmp	r3, #1
   36278:	ble	362a4 <__assert_fail@plt+0x23cb0>
   3627c:	ldr	r1, [r6, #60]	; 0x3c
   36280:	sub	r3, r4, #4
   36284:	sub	r1, r1, #4
   36288:	add	ip, r4, #28
   3628c:	ldr	r2, [r3, #4]
   36290:	ldr	r0, [r1, #4]!
   36294:	and	r2, r2, r0
   36298:	str	r2, [r3, #4]!
   3629c:	cmp	ip, r3
   362a0:	bne	3628c <__assert_fail@plt+0x23c98>
   362a4:	add	r8, sp, #24
   362a8:	mov	r5, #0
   362ac:	add	sl, r6, #56	; 0x38
   362b0:	add	fp, r6, #64	; 0x40
   362b4:	str	r8, [sp]
   362b8:	mov	ip, #3
   362bc:	str	r5, [r8, #4]
   362c0:	mov	r3, r5
   362c4:	mov	r2, r5
   362c8:	mov	r0, sl
   362cc:	mov	r1, fp
   362d0:	str	r4, [sp, #24]
   362d4:	strb	ip, [sp, #28]
   362d8:	bl	3295c <__assert_fail@plt+0x20368>
   362dc:	subs	r9, r0, #0
   362e0:	beq	36380 <__assert_fail@plt+0x23d8c>
   362e4:	ldr	r3, [r6, #92]	; 0x5c
   362e8:	cmp	r3, #1
   362ec:	ble	363ac <__assert_fail@plt+0x23db8>
   362f0:	ldrb	r3, [r6, #88]	; 0x58
   362f4:	mov	ip, #6
   362f8:	str	r8, [sp]
   362fc:	orr	r3, r3, #2
   36300:	strb	r3, [r6, #88]	; 0x58
   36304:	mov	r2, r5
   36308:	mov	r3, r5
   3630c:	mov	r1, fp
   36310:	mov	r0, sl
   36314:	str	r7, [sp, #24]
   36318:	strb	ip, [sp, #28]
   3631c:	bl	3295c <__assert_fail@plt+0x20368>
   36320:	subs	r3, r0, #0
   36324:	beq	36380 <__assert_fail@plt+0x23d8c>
   36328:	add	ip, sp, #32
   3632c:	mov	r2, r9
   36330:	mov	lr, #10
   36334:	mov	r1, fp
   36338:	mov	r0, sl
   3633c:	str	ip, [sp]
   36340:	str	r5, [sp, #36]	; 0x24
   36344:	str	r5, [sp, #32]
   36348:	strb	lr, [sp, #36]	; 0x24
   3634c:	bl	3295c <__assert_fail@plt+0x20368>
   36350:	mov	r9, r0
   36354:	mov	r0, r9
   36358:	add	sp, sp, #44	; 0x2c
   3635c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36360:	sub	r3, r4, #4
   36364:	add	r1, r4, #28
   36368:	ldr	r2, [r3, #4]
   3636c:	mvn	r2, r2
   36370:	str	r2, [r3, #4]!
   36374:	cmp	r1, r3
   36378:	bne	36368 <__assert_fail@plt+0x23d74>
   3637c:	b	36270 <__assert_fail@plt+0x23c7c>
   36380:	mov	r0, r4
   36384:	bl	2db68 <__assert_fail@plt+0x1b574>
   36388:	mov	r0, r7
   3638c:	bl	31928 <__assert_fail@plt+0x1f334>
   36390:	ldr	r2, [sp, #84]	; 0x54
   36394:	mov	r9, #0
   36398:	mov	r3, #12
   3639c:	mov	r0, r9
   363a0:	str	r3, [r2]
   363a4:	add	sp, sp, #44	; 0x2c
   363a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   363ac:	mov	r0, r7
   363b0:	bl	31928 <__assert_fail@plt+0x1f334>
   363b4:	mov	r0, r9
   363b8:	add	sp, sp, #44	; 0x2c
   363bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   363c0:	ldr	r2, [sp, #84]	; 0x54
   363c4:	mov	r3, #12
   363c8:	mov	r9, r4
   363cc:	mov	r0, r9
   363d0:	str	r3, [r2]
   363d4:	add	sp, sp, #44	; 0x2c
   363d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   363dc:	mov	r0, r4
   363e0:	bl	2db68 <__assert_fail@plt+0x1b574>
   363e4:	ldr	r2, [sp, #84]	; 0x54
   363e8:	mov	r3, #12
   363ec:	mov	r9, r7
   363f0:	str	r3, [r2]
   363f4:	b	36354 <__assert_fail@plt+0x23d60>
   363f8:	mov	r0, r4
   363fc:	bl	2db68 <__assert_fail@plt+0x1b574>
   36400:	mov	r0, r7
   36404:	bl	31928 <__assert_fail@plt+0x1f334>
   36408:	ldr	r3, [sp, #84]	; 0x54
   3640c:	str	sl, [r3]
   36410:	b	36354 <__assert_fail@plt+0x23d60>
   36414:	ldr	ip, [r0]
   36418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3641c:	sub	sp, sp, #308	; 0x134
   36420:	str	ip, [sp, #12]
   36424:	ldr	ip, [ip, #92]	; 0x5c
   36428:	cmp	ip, #1
   3642c:	ldr	ip, [r1]
   36430:	ldreq	r6, [r0, #12]
   36434:	movne	r6, #0
   36438:	lsreq	r6, r6, #22
   3643c:	andeq	r6, r6, #1
   36440:	cmp	ip, #0
   36444:	ble	367c0 <__assert_fail@plt+0x241cc>
   36448:	mov	r7, r3
   3644c:	mov	r3, #0
   36450:	str	r2, [sp, #20]
   36454:	str	r1, [sp, #24]
   36458:	str	r0, [sp, #28]
   3645c:	str	r3, [sp, #8]
   36460:	mov	r5, #1
   36464:	b	364a0 <__assert_fail@plt+0x23eac>
   36468:	cmp	r4, #3
   3646c:	beq	365e0 <__assert_fail@plt+0x23fec>
   36470:	cmp	r4, #6
   36474:	beq	36660 <__assert_fail@plt+0x2406c>
   36478:	and	r3, r4, #253	; 0xfd
   3647c:	cmp	r3, #5
   36480:	beq	36804 <__assert_fail@plt+0x24210>
   36484:	cmp	r4, #2
   36488:	beq	367a0 <__assert_fail@plt+0x241ac>
   3648c:	ldr	r3, [sp, #8]
   36490:	add	r3, r3, #1
   36494:	cmp	r3, ip
   36498:	str	r3, [sp, #8]
   3649c:	bge	367c0 <__assert_fail@plt+0x241cc>
   364a0:	ldr	r3, [sp, #20]
   364a4:	ldr	r1, [sp, #8]
   364a8:	ldr	r2, [r3]
   364ac:	ldr	r3, [sp, #12]
   364b0:	ldr	r8, [r2, r1, lsl #2]
   364b4:	ldr	r3, [r3]
   364b8:	lsl	r2, r8, #3
   364bc:	str	r2, [sp, #16]
   364c0:	add	r2, r3, r2
   364c4:	ldrb	r4, [r2, #4]
   364c8:	cmp	r4, #1
   364cc:	bne	36468 <__assert_fail@plt+0x23e74>
   364d0:	ldrb	fp, [r3, r8, lsl #3]
   364d4:	cmp	r6, #0
   364d8:	strb	r4, [r7, fp]
   364dc:	beq	364f0 <__assert_fail@plt+0x23efc>
   364e0:	bl	12288 <__ctype_tolower_loc@plt>
   364e4:	ldr	r3, [r0]
   364e8:	ldr	r3, [r3, fp, lsl #2]
   364ec:	strb	r4, [r7, r3]
   364f0:	ldr	r3, [sp, #28]
   364f4:	ldr	r3, [r3, #12]
   364f8:	tst	r3, #4194304	; 0x400000
   364fc:	beq	365d4 <__assert_fail@plt+0x23fe0>
   36500:	ldr	r3, [sp, #12]
   36504:	ldr	r3, [r3, #92]	; 0x5c
   36508:	cmp	r3, #1
   3650c:	ble	365d4 <__assert_fail@plt+0x23fe0>
   36510:	ldr	r0, [sp, #12]
   36514:	add	r1, r8, #1
   36518:	ldr	r3, [r0]
   3651c:	ldrb	r2, [r3, r8, lsl #3]
   36520:	strb	r2, [sp, #48]	; 0x30
   36524:	ldr	r2, [r0, #8]
   36528:	cmp	r2, r1
   3652c:	bls	367fc <__assert_fail@plt+0x24208>
   36530:	ldr	ip, [sp, #16]
   36534:	ldr	lr, [pc, #744]	; 36824 <__assert_fail@plt+0x24230>
   36538:	add	r2, ip, #8
   3653c:	add	r3, r3, r2
   36540:	ldr	r2, [r3, #4]
   36544:	bic	r2, r2, #-16777216	; 0xff000000
   36548:	bic	r2, r2, #14614528	; 0xdf0000
   3654c:	bic	r2, r2, #65280	; 0xff00
   36550:	cmp	r2, lr
   36554:	bne	367fc <__assert_fail@plt+0x24208>
   36558:	add	r9, ip, #16
   3655c:	add	r4, sp, #49	; 0x31
   36560:	b	3658c <__assert_fail@plt+0x23f98>
   36564:	ldr	r3, [r0]
   36568:	ldr	ip, [pc, #692]	; 36824 <__assert_fail@plt+0x24230>
   3656c:	add	r3, r3, r9
   36570:	add	r9, r9, #8
   36574:	ldr	r2, [r3, #4]
   36578:	bic	r2, r2, #-16777216	; 0xff000000
   3657c:	bic	r2, r2, #14614528	; 0xdf0000
   36580:	bic	r2, r2, #65280	; 0xff00
   36584:	cmp	r2, ip
   36588:	bne	365a4 <__assert_fail@plt+0x23fb0>
   3658c:	ldrb	r3, [r3]
   36590:	add	r1, r1, #1
   36594:	strb	r3, [r4], #1
   36598:	ldr	r3, [r0, #8]
   3659c:	cmp	r1, r3
   365a0:	bcc	36564 <__assert_fail@plt+0x23f70>
   365a4:	add	r3, sp, #48	; 0x30
   365a8:	sub	r4, r4, r3
   365ac:	mov	ip, #0
   365b0:	mov	r2, r4
   365b4:	add	r3, sp, #40	; 0x28
   365b8:	add	r1, sp, #48	; 0x30
   365bc:	add	r0, sp, #36	; 0x24
   365c0:	str	ip, [sp, #40]	; 0x28
   365c4:	str	ip, [sp, #44]	; 0x2c
   365c8:	bl	2fe64 <__assert_fail@plt+0x1d870>
   365cc:	cmp	r4, r0
   365d0:	beq	367c8 <__assert_fail@plt+0x241d4>
   365d4:	ldr	r3, [sp, #24]
   365d8:	ldr	ip, [r3]
   365dc:	b	3648c <__assert_fail@plt+0x23e98>
   365e0:	mov	r8, #0
   365e4:	str	r7, [sp, #4]
   365e8:	ldr	r2, [sp, #16]
   365ec:	ldr	r9, [sp, #4]
   365f0:	lsl	sl, r8, #5
   365f4:	ldr	r2, [r3, r2]
   365f8:	mov	r4, #0
   365fc:	ldr	fp, [r2, r8]
   36600:	lsr	r3, fp, r4
   36604:	tst	r3, #1
   36608:	add	r4, r4, #1
   3660c:	beq	3662c <__assert_fail@plt+0x24038>
   36610:	cmp	r6, #0
   36614:	strb	r5, [r9]
   36618:	beq	3662c <__assert_fail@plt+0x24038>
   3661c:	bl	12288 <__ctype_tolower_loc@plt>
   36620:	ldr	r3, [r0]
   36624:	ldr	r3, [r3, sl]
   36628:	strb	r5, [r7, r3]
   3662c:	cmp	r4, #32
   36630:	add	r9, r9, #1
   36634:	add	sl, sl, #4
   36638:	bne	36600 <__assert_fail@plt+0x2400c>
   3663c:	ldr	r3, [sp, #4]
   36640:	add	r8, r8, #4
   36644:	add	r3, r3, #32
   36648:	cmp	r8, #32
   3664c:	str	r3, [sp, #4]
   36650:	beq	365d4 <__assert_fail@plt+0x23fe0>
   36654:	ldr	r3, [sp, #12]
   36658:	ldr	r3, [r3]
   3665c:	b	365e8 <__assert_fail@plt+0x23ff4>
   36660:	ldr	r3, [sp, #12]
   36664:	ldr	r8, [r2]
   36668:	ldr	r3, [r3, #92]	; 0x5c
   3666c:	cmp	r3, #1
   36670:	ble	36698 <__assert_fail@plt+0x240a4>
   36674:	ldr	r3, [r8, #36]	; 0x24
   36678:	cmp	r3, #0
   3667c:	bne	36758 <__assert_fail@plt+0x24164>
   36680:	ldrb	r3, [r8, #16]
   36684:	tst	r3, #1
   36688:	bne	36758 <__assert_fail@plt+0x24164>
   3668c:	ldr	r3, [r8, #32]
   36690:	cmp	r3, #0
   36694:	bne	36758 <__assert_fail@plt+0x24164>
   36698:	ldr	r3, [r8, #20]
   3669c:	cmp	r3, #0
   366a0:	ble	3648c <__assert_fail@plt+0x23e98>
   366a4:	ldr	sl, [sp, #12]
   366a8:	ldr	r9, [sp, #28]
   366ac:	mov	r4, #0
   366b0:	mov	r3, #0
   366b4:	str	r3, [sp, #40]	; 0x28
   366b8:	str	r3, [sp, #44]	; 0x2c
   366bc:	ldr	r3, [r8]
   366c0:	add	r2, sp, #40	; 0x28
   366c4:	add	r0, sp, #48	; 0x30
   366c8:	ldr	r1, [r3, r4, lsl #2]
   366cc:	bl	11ef8 <wcrtomb@plt>
   366d0:	lsl	r2, r4, #2
   366d4:	add	r4, r4, #1
   366d8:	cmn	r0, #1
   366dc:	beq	36708 <__assert_fail@plt+0x24114>
   366e0:	ldrb	fp, [sp, #48]	; 0x30
   366e4:	cmp	r6, #0
   366e8:	strb	r5, [r7, fp]
   366ec:	beq	36708 <__assert_fail@plt+0x24114>
   366f0:	str	r2, [sp, #4]
   366f4:	bl	12288 <__ctype_tolower_loc@plt>
   366f8:	ldr	r2, [sp, #4]
   366fc:	ldr	r3, [r0]
   36700:	ldr	r3, [r3, fp, lsl #2]
   36704:	strb	r5, [r7, r3]
   36708:	ldr	r3, [r9, #12]
   3670c:	tst	r3, #4194304	; 0x400000
   36710:	beq	36748 <__assert_fail@plt+0x24154>
   36714:	ldr	r3, [sl, #92]	; 0x5c
   36718:	cmp	r3, #1
   3671c:	ble	36748 <__assert_fail@plt+0x24154>
   36720:	ldr	r3, [r8]
   36724:	ldr	r0, [r3, r2]
   36728:	bl	12054 <towlower@plt>
   3672c:	add	r2, sp, #40	; 0x28
   36730:	mov	r1, r0
   36734:	add	r0, sp, #48	; 0x30
   36738:	bl	11ef8 <wcrtomb@plt>
   3673c:	cmn	r0, #1
   36740:	ldrbne	r3, [sp, #48]	; 0x30
   36744:	strbne	r5, [r7, r3]
   36748:	ldr	r3, [r8, #20]
   3674c:	cmp	r4, r3
   36750:	blt	366b0 <__assert_fail@plt+0x240bc>
   36754:	b	365d4 <__assert_fail@plt+0x23fe0>
   36758:	mov	r3, #0
   3675c:	strb	r3, [sp, #40]	; 0x28
   36760:	mov	r0, #0
   36764:	add	r3, sp, #48	; 0x30
   36768:	mov	r2, r5
   3676c:	add	r1, sp, #40	; 0x28
   36770:	str	r0, [sp, #48]	; 0x30
   36774:	str	r0, [sp, #52]	; 0x34
   36778:	bl	2fe64 <__assert_fail@plt+0x1d870>
   3677c:	ldrb	r3, [sp, #40]	; 0x28
   36780:	cmn	r0, #2
   36784:	strbeq	r5, [r7, r3]
   36788:	add	r3, r3, #1
   3678c:	uxtb	r3, r3
   36790:	cmp	r3, #0
   36794:	strb	r3, [sp, #40]	; 0x28
   36798:	bne	36760 <__assert_fail@plt+0x2416c>
   3679c:	b	365d4 <__assert_fail@plt+0x23fe0>
   367a0:	mov	r0, r7
   367a4:	mov	r2, #256	; 0x100
   367a8:	mov	r1, #1
   367ac:	bl	12378 <memset@plt>
   367b0:	ldr	r2, [sp, #28]
   367b4:	ldrb	r3, [r2, #28]
   367b8:	orr	r3, r3, #1
   367bc:	strb	r3, [r2, #28]
   367c0:	add	sp, sp, #308	; 0x134
   367c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   367c8:	ldr	r0, [sp, #36]	; 0x24
   367cc:	bl	12054 <towlower@plt>
   367d0:	add	r2, sp, #40	; 0x28
   367d4:	mov	r1, r0
   367d8:	add	r0, sp, #48	; 0x30
   367dc:	bl	11ef8 <wcrtomb@plt>
   367e0:	cmn	r0, #1
   367e4:	beq	365d4 <__assert_fail@plt+0x23fe0>
   367e8:	ldrb	r3, [sp, #48]	; 0x30
   367ec:	strb	r5, [r7, r3]
   367f0:	ldr	r3, [sp, #24]
   367f4:	ldr	ip, [r3]
   367f8:	b	3648c <__assert_fail@plt+0x23e98>
   367fc:	add	r4, sp, #49	; 0x31
   36800:	b	365a4 <__assert_fail@plt+0x23fb0>
   36804:	mov	r0, r7
   36808:	mov	r2, #256	; 0x100
   3680c:	mov	r1, #1
   36810:	bl	12378 <memset@plt>
   36814:	cmp	r4, #2
   36818:	beq	367b0 <__assert_fail@plt+0x241bc>
   3681c:	add	sp, sp, #308	; 0x134
   36820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36824:	eoreq	r0, r0, r1
   36828:	add	ip, r0, r2, lsl #3
   3682c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36830:	ldrb	r6, [ip, #4]
   36834:	ldr	r7, [sp, #32]
   36838:	cmp	r6, #7
   3683c:	beq	3691c <__assert_fail@plt+0x24328>
   36840:	ldr	ip, [r3, #80]	; 0x50
   36844:	cmp	ip, #1
   36848:	beq	36930 <__assert_fail@plt+0x2433c>
   3684c:	ldr	r5, [r3, #28]
   36850:	add	lr, r7, #1
   36854:	cmp	r5, lr
   36858:	ble	36930 <__assert_fail@plt+0x2433c>
   3685c:	ldr	r8, [r3, #8]
   36860:	add	ip, r8, lr, lsl #2
   36864:	ldr	lr, [r8, lr, lsl #2]
   36868:	cmn	lr, #1
   3686c:	subeq	r5, r5, r7
   36870:	moveq	r4, #1
   36874:	beq	36888 <__assert_fail@plt+0x24294>
   36878:	b	36930 <__assert_fail@plt+0x2433c>
   3687c:	ldr	lr, [ip, #4]!
   36880:	cmn	lr, #1
   36884:	bne	36894 <__assert_fail@plt+0x242a0>
   36888:	add	r4, r4, #1
   3688c:	cmp	r4, r5
   36890:	bne	3687c <__assert_fail@plt+0x24288>
   36894:	cmp	r6, #5
   36898:	beq	3693c <__assert_fail@plt+0x24348>
   3689c:	cmp	r4, #1
   368a0:	sub	r6, r6, #6
   368a4:	clz	r6, r6
   368a8:	lsr	r6, r6, #5
   368ac:	moveq	r6, #0
   368b0:	cmp	r6, #0
   368b4:	beq	36930 <__assert_fail@plt+0x2433c>
   368b8:	ldr	r9, [r0, r2, lsl #3]
   368bc:	ldr	ip, [r9, #32]
   368c0:	cmp	ip, #0
   368c4:	beq	36978 <__assert_fail@plt+0x24384>
   368c8:	ldr	r0, [r9, #20]
   368cc:	cmp	r0, #0
   368d0:	ldr	r5, [r8, r7, lsl #2]
   368d4:	ble	36908 <__assert_fail@plt+0x24314>
   368d8:	ldr	r2, [r9]
   368dc:	ldr	r3, [r2]
   368e0:	cmp	r5, r3
   368e4:	movne	r3, #0
   368e8:	bne	368fc <__assert_fail@plt+0x24308>
   368ec:	b	369c8 <__assert_fail@plt+0x243d4>
   368f0:	ldr	r1, [r2, #4]!
   368f4:	cmp	r5, r1
   368f8:	beq	369c8 <__assert_fail@plt+0x243d4>
   368fc:	add	r3, r3, #1
   36900:	cmp	r3, r0
   36904:	bne	368f0 <__assert_fail@plt+0x242fc>
   36908:	ldr	r3, [r9, #36]	; 0x24
   3690c:	cmp	r3, #0
   36910:	ble	36a0c <__assert_fail@plt+0x24418>
   36914:	mov	r6, #0
   36918:	b	369ac <__assert_fail@plt+0x243b8>
   3691c:	ldr	r2, [r3, #4]
   36920:	add	r0, r2, r7
   36924:	ldrb	r1, [r2, r7]
   36928:	cmp	r1, #193	; 0xc1
   3692c:	bhi	369d8 <__assert_fail@plt+0x243e4>
   36930:	mov	r4, #0
   36934:	mov	r0, r4
   36938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3693c:	ldr	r2, [r1]
   36940:	tst	r2, #64	; 0x40
   36944:	beq	36964 <__assert_fail@plt+0x24370>
   36948:	tst	r2, #128	; 0x80
   3694c:	beq	36934 <__assert_fail@plt+0x24340>
   36950:	ldr	r3, [r3, #4]
   36954:	ldrb	r3, [r3, r7]
   36958:	cmp	r3, #0
   3695c:	beq	36930 <__assert_fail@plt+0x2433c>
   36960:	b	36934 <__assert_fail@plt+0x24340>
   36964:	ldr	r1, [r3, #4]
   36968:	ldrb	r1, [r1, r7]
   3696c:	cmp	r1, #10
   36970:	bne	36948 <__assert_fail@plt+0x24354>
   36974:	b	36930 <__assert_fail@plt+0x2433c>
   36978:	ldr	r3, [r9, #36]	; 0x24
   3697c:	ldr	r0, [r9, #20]
   36980:	cmp	r3, #0
   36984:	bne	368cc <__assert_fail@plt+0x242d8>
   36988:	cmp	r0, #0
   3698c:	bne	368cc <__assert_fail@plt+0x242d8>
   36990:	ldrb	r3, [r9, #16]
   36994:	tst	r3, #1
   36998:	bne	36934 <__assert_fail@plt+0x24340>
   3699c:	b	36930 <__assert_fail@plt+0x2433c>
   369a0:	ldr	r3, [r9, #36]	; 0x24
   369a4:	cmp	r6, r3
   369a8:	bge	36a08 <__assert_fail@plt+0x24414>
   369ac:	ldr	r3, [r9, #12]
   369b0:	mov	r0, r5
   369b4:	ldr	r1, [r3, r6, lsl #2]
   369b8:	bl	11f34 <iswctype@plt>
   369bc:	add	r6, r6, #1
   369c0:	cmp	r0, #0
   369c4:	beq	369a0 <__assert_fail@plt+0x243ac>
   369c8:	ldrb	r3, [r9, #16]
   369cc:	tst	r3, #1
   369d0:	beq	36934 <__assert_fail@plt+0x24340>
   369d4:	b	36930 <__assert_fail@plt+0x2433c>
   369d8:	ldr	ip, [r3, #48]	; 0x30
   369dc:	add	r3, r7, #1
   369e0:	cmp	r3, ip
   369e4:	bge	36930 <__assert_fail@plt+0x2433c>
   369e8:	cmp	r1, #223	; 0xdf
   369ec:	ldrb	r3, [r0, #1]
   369f0:	bhi	36a50 <__assert_fail@plt+0x2445c>
   369f4:	eor	r3, r3, #128	; 0x80
   369f8:	cmp	r3, #63	; 0x3f
   369fc:	movls	r4, #2
   36a00:	bls	36934 <__assert_fail@plt+0x24340>
   36a04:	b	36930 <__assert_fail@plt+0x2433c>
   36a08:	ldr	ip, [r9, #32]
   36a0c:	cmp	ip, #0
   36a10:	ble	36990 <__assert_fail@plt+0x2439c>
   36a14:	ldr	r2, [r9, #4]
   36a18:	mov	r3, #0
   36a1c:	sub	r2, r2, #4
   36a20:	b	36a30 <__assert_fail@plt+0x2443c>
   36a24:	add	r3, r3, #1
   36a28:	cmp	r3, ip
   36a2c:	beq	36990 <__assert_fail@plt+0x2439c>
   36a30:	ldr	r1, [r2, #4]!
   36a34:	cmp	r5, r1
   36a38:	bcc	36a24 <__assert_fail@plt+0x24430>
   36a3c:	ldr	r1, [r9, #8]
   36a40:	ldr	r1, [r1, r3, lsl #2]
   36a44:	cmp	r5, r1
   36a48:	bhi	36a24 <__assert_fail@plt+0x24430>
   36a4c:	b	369c8 <__assert_fail@plt+0x243d4>
   36a50:	cmp	r1, #239	; 0xef
   36a54:	bhi	36aa0 <__assert_fail@plt+0x244ac>
   36a58:	cmp	r3, #159	; 0x9f
   36a5c:	cmpls	r1, #224	; 0xe0
   36a60:	movne	r4, #3
   36a64:	beq	36930 <__assert_fail@plt+0x2433c>
   36a68:	add	r3, r7, r4
   36a6c:	cmp	ip, r3
   36a70:	blt	36930 <__assert_fail@plt+0x2433c>
   36a74:	sub	r3, r7, #1
   36a78:	add	r3, r3, r4
   36a7c:	add	r2, r2, r3
   36a80:	b	36a8c <__assert_fail@plt+0x24498>
   36a84:	cmp	r2, r0
   36a88:	beq	36934 <__assert_fail@plt+0x24340>
   36a8c:	ldrb	r3, [r0, #1]!
   36a90:	eor	r3, r3, #128	; 0x80
   36a94:	cmp	r3, #63	; 0x3f
   36a98:	bls	36a84 <__assert_fail@plt+0x24490>
   36a9c:	b	36930 <__assert_fail@plt+0x2433c>
   36aa0:	cmp	r1, #247	; 0xf7
   36aa4:	bhi	36abc <__assert_fail@plt+0x244c8>
   36aa8:	cmp	r3, #143	; 0x8f
   36aac:	cmpls	r1, #240	; 0xf0
   36ab0:	movne	r4, #4
   36ab4:	bne	36a68 <__assert_fail@plt+0x24474>
   36ab8:	b	36930 <__assert_fail@plt+0x2433c>
   36abc:	cmp	r1, #251	; 0xfb
   36ac0:	bhi	36ad8 <__assert_fail@plt+0x244e4>
   36ac4:	cmp	r3, #135	; 0x87
   36ac8:	cmpls	r1, #248	; 0xf8
   36acc:	movne	r4, #5
   36ad0:	bne	36a68 <__assert_fail@plt+0x24474>
   36ad4:	b	36930 <__assert_fail@plt+0x2433c>
   36ad8:	cmp	r1, #253	; 0xfd
   36adc:	bhi	36930 <__assert_fail@plt+0x2433c>
   36ae0:	cmp	r3, #131	; 0x83
   36ae4:	cmpls	r1, #252	; 0xfc
   36ae8:	beq	36930 <__assert_fail@plt+0x2433c>
   36aec:	mov	r4, #6
   36af0:	b	36a68 <__assert_fail@plt+0x24474>
   36af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36af8:	mov	r5, r0
   36afc:	ldr	r0, [r0, #84]	; 0x54
   36b00:	sub	sp, sp, #84	; 0x54
   36b04:	mov	ip, r1
   36b08:	str	r0, [sp, #28]
   36b0c:	ldr	r0, [r0]
   36b10:	mov	r8, r2
   36b14:	str	r1, [sp, #36]	; 0x24
   36b18:	ldr	r2, [sp, #124]	; 0x7c
   36b1c:	ldr	r1, [r5, #120]	; 0x78
   36b20:	ldr	r4, [ip, #4]
   36b24:	mov	r7, #0
   36b28:	add	r2, r2, r1
   36b2c:	mov	r6, r3
   36b30:	str	r7, [sp, #48]	; 0x30
   36b34:	ldr	r3, [r0, r8, lsl #3]
   36b38:	cmp	r2, r4
   36b3c:	str	r3, [sp, #32]
   36b40:	bge	37048 <__assert_fail@plt+0x24a54>
   36b44:	ldr	r3, [sp, #36]	; 0x24
   36b48:	ldr	r4, [r3]
   36b4c:	cmp	r4, #0
   36b50:	beq	36f1c <__assert_fail@plt+0x24928>
   36b54:	ldr	r9, [r3, #8]
   36b58:	ldr	r3, [r5, #100]	; 0x64
   36b5c:	ldr	r2, [r5, #88]	; 0x58
   36b60:	str	r3, [sp, #40]	; 0x28
   36b64:	ldr	r3, [r5, #40]	; 0x28
   36b68:	str	r9, [r5, #100]	; 0x64
   36b6c:	str	r4, [r5, #40]	; 0x28
   36b70:	sub	r1, r4, #1
   36b74:	mov	r0, r5
   36b78:	str	r3, [sp, #44]	; 0x2c
   36b7c:	bl	34c8c <__assert_fail@plt+0x22698>
   36b80:	cmp	r4, r6
   36b84:	mov	r7, r0
   36b88:	beq	36f50 <__assert_fail@plt+0x2495c>
   36b8c:	ldr	r8, [r9, r4, lsl #2]
   36b90:	cmp	r8, #0
   36b94:	beq	3709c <__assert_fail@plt+0x24aa8>
   36b98:	ldrb	r3, [r8, #52]	; 0x34
   36b9c:	add	fp, sp, #56	; 0x38
   36ba0:	ands	r2, r3, #64	; 0x40
   36ba4:	streq	r2, [sp, #56]	; 0x38
   36ba8:	streq	r2, [fp, #4]
   36bac:	streq	r2, [fp, #8]
   36bb0:	bne	37028 <__assert_fail@plt+0x24a34>
   36bb4:	tst	r3, #64	; 0x40
   36bb8:	beq	36c14 <__assert_fail@plt+0x24620>
   36bbc:	ldr	r3, [sp, #60]	; 0x3c
   36bc0:	cmp	r3, #0
   36bc4:	beq	36bf0 <__assert_fail@plt+0x245fc>
   36bc8:	ldr	r3, [sp, #128]	; 0x80
   36bcc:	mov	r2, r4
   36bd0:	str	r3, [sp]
   36bd4:	mov	r1, fp
   36bd8:	ldr	r3, [sp, #32]
   36bdc:	mov	r0, r5
   36be0:	bl	33ee4 <__assert_fail@plt+0x218f0>
   36be4:	cmp	r0, #0
   36be8:	str	r0, [sp, #48]	; 0x30
   36bec:	bne	36fb8 <__assert_fail@plt+0x249c4>
   36bf0:	mov	r3, r7
   36bf4:	mov	r2, fp
   36bf8:	ldr	r1, [sp, #28]
   36bfc:	add	r0, sp, #48	; 0x30
   36c00:	bl	32f98 <__assert_fail@plt+0x209a4>
   36c04:	subs	r8, r0, #0
   36c08:	beq	370b0 <__assert_fail@plt+0x24abc>
   36c0c:	ldr	r3, [r5, #100]	; 0x64
   36c10:	str	r8, [r3, r4, lsl #2]
   36c14:	ldr	r3, [sp, #124]	; 0x7c
   36c18:	cmp	r3, r4
   36c1c:	ble	36ec8 <__assert_fail@plt+0x248d4>
   36c20:	ldr	r3, [r5, #120]	; 0x78
   36c24:	cmp	r3, #0
   36c28:	blt	36ec8 <__assert_fail@plt+0x248d4>
   36c2c:	mov	r3, #0
   36c30:	add	r4, r4, #1
   36c34:	str	r3, [sp, #24]
   36c38:	ldr	r3, [r5, #100]	; 0x64
   36c3c:	lsl	r2, r4, #2
   36c40:	str	r2, [sp, #12]
   36c44:	str	r4, [sp, #8]
   36c48:	ldr	r2, [sp, #12]
   36c4c:	ldr	r1, [r3, r2]
   36c50:	mov	r3, #0
   36c54:	str	r3, [sp, #60]	; 0x3c
   36c58:	cmp	r1, r3
   36c5c:	ldr	r3, [sp, #8]
   36c60:	sub	sl, r3, #1
   36c64:	beq	36fdc <__assert_fail@plt+0x249e8>
   36c68:	add	r1, r1, #4
   36c6c:	mov	r0, fp
   36c70:	bl	339e8 <__assert_fail@plt+0x213f4>
   36c74:	cmp	r0, #0
   36c78:	str	r0, [sp, #48]	; 0x30
   36c7c:	bne	36fb8 <__assert_fail@plt+0x249c4>
   36c80:	cmp	r8, #0
   36c84:	beq	36dfc <__assert_fail@plt+0x24808>
   36c88:	ldr	r3, [r8, #20]
   36c8c:	mov	r2, #0
   36c90:	cmp	r3, r2
   36c94:	str	r2, [sp, #52]	; 0x34
   36c98:	str	r2, [sp, #68]	; 0x44
   36c9c:	str	r2, [sp, #72]	; 0x48
   36ca0:	str	r2, [sp, #76]	; 0x4c
   36ca4:	ldr	r9, [r5, #84]	; 0x54
   36ca8:	ble	370c8 <__assert_fail@plt+0x24ad4>
   36cac:	ldr	r3, [r8, #24]
   36cb0:	mov	r4, #0
   36cb4:	ldr	r6, [r3]
   36cb8:	mov	r3, r9
   36cbc:	ldr	r0, [r3], #128	; 0x80
   36cc0:	lsl	r7, r6, #3
   36cc4:	str	r3, [sp, #16]
   36cc8:	add	r3, r0, r7
   36ccc:	b	36d28 <__assert_fail@plt+0x24734>
   36cd0:	add	r1, r0, r7
   36cd4:	mov	r2, sl
   36cd8:	mov	r0, r5
   36cdc:	bl	34d78 <__assert_fail@plt+0x22784>
   36ce0:	cmp	r0, #0
   36ce4:	beq	36d04 <__assert_fail@plt+0x24710>
   36ce8:	lsl	r7, r6, #2
   36cec:	ldr	r2, [r9, #12]
   36cf0:	mov	r0, fp
   36cf4:	ldr	r1, [r2, r7]
   36cf8:	bl	31eec <__assert_fail@plt+0x1f8f8>
   36cfc:	cmp	r0, #0
   36d00:	beq	36fa8 <__assert_fail@plt+0x249b4>
   36d04:	ldr	r3, [r8, #20]
   36d08:	add	r4, r4, #1
   36d0c:	cmp	r4, r3
   36d10:	bge	36fec <__assert_fail@plt+0x249f8>
   36d14:	ldr	r3, [r8, #24]
   36d18:	ldr	r0, [r9]
   36d1c:	ldr	r6, [r3, r4, lsl #2]
   36d20:	lsl	r7, r6, #3
   36d24:	add	r3, r0, r7
   36d28:	ldrb	r3, [r3, #6]
   36d2c:	tst	r3, #16
   36d30:	beq	36cd0 <__assert_fail@plt+0x246dc>
   36d34:	str	sl, [sp]
   36d38:	mov	r3, r5
   36d3c:	mov	r2, r6
   36d40:	ldr	r1, [sp, #16]
   36d44:	bl	36828 <__assert_fail@plt+0x24234>
   36d48:	cmp	r0, #1
   36d4c:	ble	36fcc <__assert_fail@plt+0x249d8>
   36d50:	add	r2, r0, sl
   36d54:	ldr	r3, [r5, #100]	; 0x64
   36d58:	mov	r1, r2
   36d5c:	str	r2, [sp, #20]
   36d60:	ldr	r1, [r3, r1, lsl #2]
   36d64:	ldr	r2, [r9, #12]
   36d68:	mov	r3, #0
   36d6c:	cmp	r1, #0
   36d70:	lsl	r7, r6, #2
   36d74:	ldr	r6, [r2, r6, lsl #2]
   36d78:	str	r3, [sp, #72]	; 0x48
   36d7c:	beq	36d98 <__assert_fail@plt+0x247a4>
   36d80:	add	r1, r1, #4
   36d84:	add	r0, sp, #68	; 0x44
   36d88:	bl	339e8 <__assert_fail@plt+0x213f4>
   36d8c:	cmp	r0, #0
   36d90:	str	r0, [sp, #52]	; 0x34
   36d94:	bne	36de4 <__assert_fail@plt+0x247f0>
   36d98:	mov	r1, r6
   36d9c:	add	r0, sp, #68	; 0x44
   36da0:	bl	31eec <__assert_fail@plt+0x1f8f8>
   36da4:	cmp	r0, #0
   36da8:	beq	36fa8 <__assert_fail@plt+0x249b4>
   36dac:	add	r2, sp, #68	; 0x44
   36db0:	mov	r1, r9
   36db4:	add	r0, sp, #52	; 0x34
   36db8:	ldr	r6, [r5, #100]	; 0x64
   36dbc:	bl	332c0 <__assert_fail@plt+0x20ccc>
   36dc0:	ldr	r2, [r5, #100]	; 0x64
   36dc4:	ldr	r3, [sp, #20]
   36dc8:	str	r0, [r6, r3, lsl #2]
   36dcc:	ldr	r2, [r2, r3, lsl #2]
   36dd0:	cmp	r2, #0
   36dd4:	bne	36cec <__assert_fail@plt+0x246f8>
   36dd8:	ldr	r2, [sp, #52]	; 0x34
   36ddc:	cmp	r2, #0
   36de0:	beq	36cec <__assert_fail@plt+0x246f8>
   36de4:	ldr	r0, [sp, #76]	; 0x4c
   36de8:	bl	2db68 <__assert_fail@plt+0x1b574>
   36dec:	ldr	r3, [sp, #52]	; 0x34
   36df0:	cmp	r3, #0
   36df4:	str	r3, [sp, #48]	; 0x30
   36df8:	bne	36fb8 <__assert_fail@plt+0x249c4>
   36dfc:	ldr	r3, [sp, #60]	; 0x3c
   36e00:	ldr	r4, [sp, #8]
   36e04:	cmp	r3, #0
   36e08:	beq	36e54 <__assert_fail@plt+0x24860>
   36e0c:	ldr	r3, [sp, #128]	; 0x80
   36e10:	ldr	r2, [sp, #32]
   36e14:	mov	r1, fp
   36e18:	ldr	r0, [sp, #28]
   36e1c:	bl	33db0 <__assert_fail@plt+0x217bc>
   36e20:	cmp	r0, #0
   36e24:	str	r0, [sp, #48]	; 0x30
   36e28:	bne	36fb8 <__assert_fail@plt+0x249c4>
   36e2c:	ldr	r3, [sp, #128]	; 0x80
   36e30:	ldr	r2, [sp, #8]
   36e34:	str	r3, [sp]
   36e38:	mov	r1, fp
   36e3c:	ldr	r3, [sp, #32]
   36e40:	mov	r0, r5
   36e44:	bl	33ee4 <__assert_fail@plt+0x218f0>
   36e48:	cmp	r0, #0
   36e4c:	str	r0, [sp, #48]	; 0x30
   36e50:	bne	36fb8 <__assert_fail@plt+0x249c4>
   36e54:	ldr	r2, [r5, #88]	; 0x58
   36e58:	mov	r1, sl
   36e5c:	mov	r0, r5
   36e60:	bl	34c8c <__assert_fail@plt+0x22698>
   36e64:	mov	r2, fp
   36e68:	ldr	r1, [sp, #28]
   36e6c:	mov	r3, r0
   36e70:	add	r0, sp, #48	; 0x30
   36e74:	bl	32f98 <__assert_fail@plt+0x209a4>
   36e78:	subs	r8, r0, #0
   36e7c:	beq	37000 <__assert_fail@plt+0x24a0c>
   36e80:	mov	r2, #0
   36e84:	str	r2, [sp, #24]
   36e88:	ldr	r3, [r5, #100]	; 0x64
   36e8c:	ldr	r2, [sp, #12]
   36e90:	str	r8, [r3, r2]
   36e94:	ldr	r0, [sp, #124]	; 0x7c
   36e98:	ldr	r1, [sp, #8]
   36e9c:	cmp	r0, r1
   36ea0:	ble	36ec8 <__assert_fail@plt+0x248d4>
   36ea4:	ldr	r0, [sp, #12]
   36ea8:	ldr	r2, [r5, #120]	; 0x78
   36eac:	add	r0, r0, #4
   36eb0:	str	r0, [sp, #12]
   36eb4:	ldr	r0, [sp, #24]
   36eb8:	cmp	r0, r2
   36ebc:	add	r2, r1, #1
   36ec0:	str	r2, [sp, #8]
   36ec4:	ble	36c48 <__assert_fail@plt+0x24654>
   36ec8:	ldr	r0, [sp, #64]	; 0x40
   36ecc:	bl	2db68 <__assert_fail@plt+0x1b574>
   36ed0:	ldr	r3, [r5, #100]	; 0x64
   36ed4:	ldr	r2, [sp, #124]	; 0x7c
   36ed8:	ldr	r3, [r3, r2, lsl #2]
   36edc:	cmp	r3, #0
   36ee0:	beq	370d0 <__assert_fail@plt+0x24adc>
   36ee4:	ldr	r2, [sp, #36]	; 0x24
   36ee8:	add	r1, r3, #12
   36eec:	str	r4, [r2]
   36ef0:	ldr	r2, [sp, #44]	; 0x2c
   36ef4:	str	r2, [r5, #40]	; 0x28
   36ef8:	ldr	r2, [sp, #40]	; 0x28
   36efc:	ldr	r0, [r3, #8]
   36f00:	str	r2, [r5, #100]	; 0x64
   36f04:	ldr	r2, [sp, #120]	; 0x78
   36f08:	bl	3247c <__assert_fail@plt+0x1fe88>
   36f0c:	clz	r0, r0
   36f10:	lsr	r0, r0, #5
   36f14:	add	sp, sp, #84	; 0x54
   36f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f1c:	ldr	r3, [sp, #36]	; 0x24
   36f20:	ldr	r2, [r5, #100]	; 0x64
   36f24:	sub	r1, r6, #1
   36f28:	ldr	r3, [r3, #8]
   36f2c:	str	r2, [sp, #40]	; 0x28
   36f30:	ldr	r2, [r5, #40]	; 0x28
   36f34:	str	r3, [r5, #100]	; 0x64
   36f38:	str	r2, [sp, #44]	; 0x2c
   36f3c:	str	r6, [r5, #40]	; 0x28
   36f40:	ldr	r2, [r5, #88]	; 0x58
   36f44:	mov	r0, r5
   36f48:	bl	34c8c <__assert_fail@plt+0x22698>
   36f4c:	mov	r7, r0
   36f50:	mov	r3, #1
   36f54:	mov	r0, #4
   36f58:	str	r3, [sp, #56]	; 0x38
   36f5c:	str	r3, [sp, #60]	; 0x3c
   36f60:	bl	2fe38 <__assert_fail@plt+0x1d844>
   36f64:	cmp	r0, #0
   36f68:	str	r0, [sp, #64]	; 0x40
   36f6c:	beq	370c0 <__assert_fail@plt+0x24acc>
   36f70:	add	fp, sp, #56	; 0x38
   36f74:	mov	ip, #0
   36f78:	str	r8, [r0]
   36f7c:	mov	r1, fp
   36f80:	ldr	r3, [sp, #128]	; 0x80
   36f84:	ldr	r2, [sp, #32]
   36f88:	ldr	r0, [sp, #28]
   36f8c:	str	ip, [sp, #48]	; 0x30
   36f90:	bl	33db0 <__assert_fail@plt+0x217bc>
   36f94:	cmp	r0, #0
   36f98:	str	r0, [sp, #48]	; 0x30
   36f9c:	moveq	r4, r6
   36fa0:	beq	36bbc <__assert_fail@plt+0x245c8>
   36fa4:	b	36fb8 <__assert_fail@plt+0x249c4>
   36fa8:	ldr	r0, [sp, #76]	; 0x4c
   36fac:	bl	2db68 <__assert_fail@plt+0x1b574>
   36fb0:	mov	r3, #12
   36fb4:	str	r3, [sp, #48]	; 0x30
   36fb8:	ldr	r0, [sp, #64]	; 0x40
   36fbc:	bl	2db68 <__assert_fail@plt+0x1b574>
   36fc0:	ldr	r0, [sp, #48]	; 0x30
   36fc4:	add	sp, sp, #84	; 0x54
   36fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36fcc:	cmp	r0, #0
   36fd0:	bne	36ce8 <__assert_fail@plt+0x246f4>
   36fd4:	ldr	r0, [r9]
   36fd8:	b	36cd0 <__assert_fail@plt+0x246dc>
   36fdc:	cmp	r8, #0
   36fe0:	bne	36c88 <__assert_fail@plt+0x24694>
   36fe4:	ldr	r4, [sp, #8]
   36fe8:	b	36e54 <__assert_fail@plt+0x24860>
   36fec:	ldr	r0, [sp, #76]	; 0x4c
   36ff0:	bl	2db68 <__assert_fail@plt+0x1b574>
   36ff4:	mov	r3, #0
   36ff8:	str	r3, [sp, #48]	; 0x30
   36ffc:	b	36dfc <__assert_fail@plt+0x24808>
   37000:	ldr	r3, [sp, #48]	; 0x30
   37004:	cmp	r3, #0
   37008:	bne	36fb8 <__assert_fail@plt+0x249c4>
   3700c:	ldr	r2, [sp, #24]
   37010:	ldr	r3, [r5, #100]	; 0x64
   37014:	add	r2, r2, #1
   37018:	str	r2, [sp, #24]
   3701c:	ldr	r2, [sp, #12]
   37020:	str	r8, [r3, r2]
   37024:	b	36e94 <__assert_fail@plt+0x248a0>
   37028:	mov	r0, fp
   3702c:	add	r1, r8, #4
   37030:	bl	32dd4 <__assert_fail@plt+0x207e0>
   37034:	cmp	r0, #0
   37038:	str	r0, [sp, #48]	; 0x30
   3703c:	bne	36fc4 <__assert_fail@plt+0x249d0>
   37040:	ldrb	r3, [r8, #52]	; 0x34
   37044:	b	36bb4 <__assert_fail@plt+0x245c0>
   37048:	mvn	r3, #-2147483648	; 0x80000000
   3704c:	add	r9, r2, #1
   37050:	sub	r3, r3, r4
   37054:	cmp	r9, r3
   37058:	bgt	370c0 <__assert_fail@plt+0x24acc>
   3705c:	add	sl, r4, r9
   37060:	cmn	sl, #-1073741823	; 0xc0000001
   37064:	bhi	370c0 <__assert_fail@plt+0x24acc>
   37068:	ldr	fp, [sp, #36]	; 0x24
   3706c:	lsl	r1, sl, #2
   37070:	ldr	r0, [fp, #8]
   37074:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   37078:	cmp	r0, #0
   3707c:	beq	370c0 <__assert_fail@plt+0x24acc>
   37080:	str	r0, [fp, #8]
   37084:	str	sl, [fp, #4]
   37088:	lsl	r2, r9, #2
   3708c:	mov	r1, r7
   37090:	add	r0, r0, r4, lsl #2
   37094:	bl	12378 <memset@plt>
   37098:	b	36b44 <__assert_fail@plt+0x24550>
   3709c:	add	fp, sp, #56	; 0x38
   370a0:	str	r8, [sp, #56]	; 0x38
   370a4:	str	r8, [fp, #4]
   370a8:	str	r8, [fp, #8]
   370ac:	b	36c14 <__assert_fail@plt+0x24620>
   370b0:	ldr	r3, [sp, #48]	; 0x30
   370b4:	cmp	r3, #0
   370b8:	beq	36c0c <__assert_fail@plt+0x24618>
   370bc:	b	36fb8 <__assert_fail@plt+0x249c4>
   370c0:	mov	r0, #12
   370c4:	b	36fc4 <__assert_fail@plt+0x249d0>
   370c8:	mov	r0, #0
   370cc:	b	36ff0 <__assert_fail@plt+0x249fc>
   370d0:	ldr	r3, [sp, #36]	; 0x24
   370d4:	mov	r0, #1
   370d8:	str	r4, [r3]
   370dc:	ldr	r3, [sp, #40]	; 0x28
   370e0:	str	r3, [r5, #100]	; 0x64
   370e4:	ldr	r3, [sp, #44]	; 0x2c
   370e8:	str	r3, [r5, #40]	; 0x28
   370ec:	b	36fc4 <__assert_fail@plt+0x249d0>
   370f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   370f4:	sub	sp, sp, #20
   370f8:	mov	ip, r2
   370fc:	ldr	r5, [sp, #56]	; 0x38
   37100:	ldr	r4, [r2, #4]
   37104:	mov	lr, #8
   37108:	mov	r6, r2
   3710c:	ldr	r2, [ip], #8
   37110:	mov	r7, r3
   37114:	str	r3, [sp]
   37118:	mov	r8, r1
   3711c:	mov	r3, r4
   37120:	mov	r1, ip
   37124:	stmib	sp, {r5, lr}
   37128:	mov	r4, r0
   3712c:	bl	36af4 <__assert_fail@plt+0x24500>
   37130:	subs	fp, r0, #0
   37134:	beq	37144 <__assert_fail@plt+0x24b50>
   37138:	mov	r0, fp
   3713c:	add	sp, sp, #20
   37140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37144:	ldr	r3, [r4, #108]	; 0x6c
   37148:	ldr	r1, [r4, #112]	; 0x70
   3714c:	ldr	r9, [r6, #4]
   37150:	cmp	r3, r1
   37154:	ldr	sl, [r8]
   37158:	movlt	lr, r9
   3715c:	bge	371e8 <__assert_fail@plt+0x24bf4>
   37160:	add	r2, r3, r3, lsl #1
   37164:	cmp	r3, #0
   37168:	ldr	ip, [r4, #116]	; 0x74
   3716c:	lsl	r2, r2, #3
   37170:	ble	3718c <__assert_fail@plt+0x24b98>
   37174:	sub	r0, r2, #24
   37178:	add	r0, ip, r0
   3717c:	ldr	r1, [r0, #4]
   37180:	cmp	r5, r1
   37184:	moveq	r1, #1
   37188:	strbeq	r1, [r0, #20]
   3718c:	add	r0, ip, r2
   37190:	cmp	sl, r9
   37194:	str	r7, [ip, r2]
   37198:	movne	r1, #0
   3719c:	mvneq	r1, #0
   371a0:	add	r3, r3, #1
   371a4:	mov	r2, #0
   371a8:	stmib	r0, {r5, sl}
   371ac:	str	r9, [r0, #12]
   371b0:	str	r1, [r0, #16]
   371b4:	str	r3, [r4, #108]	; 0x6c
   371b8:	strb	r2, [r0, #20]
   371bc:	ldr	r3, [r4, #120]	; 0x78
   371c0:	sub	r9, r9, sl
   371c4:	cmp	r3, r9
   371c8:	strlt	r9, [r4, #120]	; 0x78
   371cc:	ldr	r1, [r8]
   371d0:	add	r5, r5, lr
   371d4:	sub	r1, r5, r1
   371d8:	mov	r0, r4
   371dc:	add	sp, sp, #20
   371e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   371e4:	b	322c4 <__assert_fail@plt+0x1fcd0>
   371e8:	add	r1, r1, r1, lsl #1
   371ec:	ldr	r0, [r4, #116]	; 0x74
   371f0:	lsl	r1, r1, #4
   371f4:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   371f8:	cmp	r0, #0
   371fc:	beq	3723c <__assert_fail@plt+0x24c48>
   37200:	ldr	r2, [r4, #112]	; 0x70
   37204:	ldr	r3, [r4, #108]	; 0x6c
   37208:	str	r0, [r4, #116]	; 0x74
   3720c:	add	r2, r2, r2, lsl #1
   37210:	add	r3, r3, r3, lsl #1
   37214:	lsl	r2, r2, #3
   37218:	add	r0, r0, r3, lsl #3
   3721c:	mov	r1, fp
   37220:	bl	12378 <memset@plt>
   37224:	ldr	r2, [r4, #112]	; 0x70
   37228:	ldr	lr, [r6, #4]
   3722c:	ldr	r3, [r4, #108]	; 0x6c
   37230:	lsl	r2, r2, #1
   37234:	str	r2, [r4, #112]	; 0x70
   37238:	b	37160 <__assert_fail@plt+0x24b6c>
   3723c:	ldr	r0, [r4, #116]	; 0x74
   37240:	bl	2db68 <__assert_fail@plt+0x1b574>
   37244:	mov	fp, #12
   37248:	b	37138 <__assert_fail@plt+0x24b44>
   3724c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37250:	sub	sp, sp, #92	; 0x5c
   37254:	ldr	r6, [r1]
   37258:	ldr	r3, [r0, #84]	; 0x54
   3725c:	cmp	r6, #0
   37260:	str	r3, [sp, #32]
   37264:	ldr	sl, [r0, #40]	; 0x28
   37268:	ble	37790 <__assert_fail@plt+0x2519c>
   3726c:	mov	r3, #0
   37270:	str	r3, [sp, #20]
   37274:	lsl	r3, sl, #2
   37278:	str	r2, [sp, #36]	; 0x24
   3727c:	mov	fp, r0
   37280:	str	r1, [sp, #60]	; 0x3c
   37284:	str	r3, [sp, #48]	; 0x30
   37288:	b	372a0 <__assert_fail@plt+0x24cac>
   3728c:	ldr	r3, [sp, #20]
   37290:	add	r3, r3, #1
   37294:	cmp	r3, r6
   37298:	str	r3, [sp, #20]
   3729c:	bge	37790 <__assert_fail@plt+0x2519c>
   372a0:	ldr	r3, [sp, #36]	; 0x24
   372a4:	ldr	r1, [sp, #20]
   372a8:	ldr	r2, [r3]
   372ac:	ldr	r3, [sp, #32]
   372b0:	ldr	r9, [r2, r1, lsl #2]
   372b4:	ldr	r3, [r3]
   372b8:	add	r3, r3, r9, lsl #3
   372bc:	ldrb	r2, [r3, #4]
   372c0:	cmp	r2, #4
   372c4:	bne	3728c <__assert_fail@plt+0x24c98>
   372c8:	ldr	r4, [r3, #4]
   372cc:	ldr	r3, [pc, #1804]	; 379e0 <__assert_fail@plt+0x253ec>
   372d0:	tst	r4, r3
   372d4:	beq	37328 <__assert_fail@plt+0x24d34>
   372d8:	ldr	r2, [fp, #88]	; 0x58
   372dc:	mov	r1, sl
   372e0:	mov	r0, fp
   372e4:	bl	34c8c <__assert_fail@plt+0x22698>
   372e8:	ldr	r3, [pc, #1780]	; 379e4 <__assert_fail@plt+0x253f0>
   372ec:	and	r4, r3, r4, lsr #8
   372f0:	tst	r4, #4
   372f4:	beq	37588 <__assert_fail@plt+0x24f94>
   372f8:	tst	r0, #1
   372fc:	beq	3728c <__assert_fail@plt+0x24c98>
   37300:	tst	r4, #8
   37304:	bne	3728c <__assert_fail@plt+0x24c98>
   37308:	tst	r4, #32
   3730c:	beq	37318 <__assert_fail@plt+0x24d24>
   37310:	tst	r0, #2
   37314:	beq	3728c <__assert_fail@plt+0x24c98>
   37318:	tst	r4, #128	; 0x80
   3731c:	beq	37328 <__assert_fail@plt+0x24d34>
   37320:	tst	r0, #8
   37324:	beq	3728c <__assert_fail@plt+0x24c98>
   37328:	ldr	ip, [fp, #108]	; 0x6c
   3732c:	mov	r0, #0
   37330:	mov	r5, ip
   37334:	mov	r3, ip
   37338:	cmp	r0, r3
   3733c:	bge	37398 <__assert_fail@plt+0x24da4>
   37340:	add	r2, r0, r3
   37344:	ldr	lr, [fp, #116]	; 0x74
   37348:	add	r2, r2, r2, lsr #31
   3734c:	asr	r2, r2, #1
   37350:	add	r1, r2, r2, lsl #1
   37354:	add	r1, lr, r1, lsl #3
   37358:	ldr	r1, [r1, #4]
   3735c:	cmp	sl, r1
   37360:	ble	37388 <__assert_fail@plt+0x24d94>
   37364:	b	37574 <__assert_fail@plt+0x24f80>
   37368:	asr	r3, r3, #1
   3736c:	mov	r4, r3
   37370:	add	r1, r3, r3, lsl #1
   37374:	add	r1, lr, r1, lsl #3
   37378:	ldr	r1, [r1, #4]
   3737c:	cmp	sl, r1
   37380:	bgt	3757c <__assert_fail@plt+0x24f88>
   37384:	mov	r2, r3
   37388:	add	r3, r2, r0
   3738c:	cmp	r2, r0
   37390:	add	r3, r3, r3, lsr #31
   37394:	bgt	37368 <__assert_fail@plt+0x24d74>
   37398:	cmp	ip, r0
   3739c:	ble	3759c <__assert_fail@plt+0x24fa8>
   373a0:	add	r2, r0, r0, lsl #1
   373a4:	ldr	r3, [fp, #116]	; 0x74
   373a8:	cmn	r0, #1
   373ac:	add	r3, r3, r2, lsl #3
   373b0:	ldr	r2, [r3, #4]
   373b4:	sub	r2, r2, sl
   373b8:	clz	r2, r2
   373bc:	lsr	r2, r2, #5
   373c0:	moveq	r2, #0
   373c4:	cmp	r2, #0
   373c8:	beq	3759c <__assert_fail@plt+0x24fa8>
   373cc:	add	r3, r3, #24
   373d0:	b	373e0 <__assert_fail@plt+0x24dec>
   373d4:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   373d8:	cmp	r2, #0
   373dc:	beq	3759c <__assert_fail@plt+0x24fa8>
   373e0:	ldr	r2, [r3, #-24]	; 0xffffffe8
   373e4:	add	r3, r3, #24
   373e8:	cmp	r9, r2
   373ec:	bne	373d4 <__assert_fail@plt+0x24de0>
   373f0:	mov	r3, #0
   373f4:	str	r3, [sp, #72]	; 0x48
   373f8:	cmp	r5, ip
   373fc:	lsl	r3, r9, #2
   37400:	str	r3, [sp, #52]	; 0x34
   37404:	bge	37568 <__assert_fail@plt+0x24f74>
   37408:	add	r3, r9, r9, lsl #1
   3740c:	add	r4, r5, r5, lsl #1
   37410:	lsl	r3, r3, #2
   37414:	str	r3, [sp, #56]	; 0x38
   37418:	lsl	r4, r4, #3
   3741c:	ldr	r7, [sp, #32]
   37420:	b	37434 <__assert_fail@plt+0x24e40>
   37424:	add	r5, r5, #1
   37428:	cmp	r5, ip
   3742c:	add	r4, r4, #24
   37430:	bge	37568 <__assert_fail@plt+0x24f74>
   37434:	ldr	r3, [fp, #116]	; 0x74
   37438:	add	r2, r3, r4
   3743c:	ldr	r3, [r3, r4]
   37440:	cmp	r9, r3
   37444:	bne	37424 <__assert_fail@plt+0x24e30>
   37448:	ldr	r3, [r2, #4]
   3744c:	cmp	sl, r3
   37450:	bne	37424 <__assert_fail@plt+0x24e30>
   37454:	ldr	r3, [r2, #12]
   37458:	ldr	r6, [r2, #8]
   3745c:	subs	r2, r3, r6
   37460:	str	r2, [sp, #28]
   37464:	ldreq	r0, [sp, #56]	; 0x38
   37468:	ldreq	r2, [r7, #20]
   3746c:	ldrne	r2, [r7, #12]
   37470:	addeq	r2, r2, r0
   37474:	ldrne	r0, [sp, #52]	; 0x34
   37478:	ldreq	r2, [r2, #8]
   3747c:	ldreq	r1, [r7, #24]
   37480:	ldrne	r2, [r2, r0]
   37484:	ldreq	r2, [r2]
   37488:	ldrne	r1, [r7, #24]
   3748c:	add	r3, sl, r3
   37490:	add	r2, r2, r2, lsl #1
   37494:	sub	r6, r3, r6
   37498:	add	r2, r1, r2, lsl #2
   3749c:	str	r2, [sp, #24]
   374a0:	sub	r1, r6, #1
   374a4:	ldr	r2, [fp, #88]	; 0x58
   374a8:	mov	r0, fp
   374ac:	bl	34c8c <__assert_fail@plt+0x22698>
   374b0:	ldr	r8, [fp, #100]	; 0x64
   374b4:	ldr	r2, [sp, #48]	; 0x30
   374b8:	ldr	r1, [r8, r2]
   374bc:	ldr	r2, [r8, r6, lsl #2]
   374c0:	cmp	r1, #0
   374c4:	moveq	r1, #0
   374c8:	ldrne	r1, [r1, #8]
   374cc:	cmp	r2, #0
   374d0:	str	r1, [sp, #44]	; 0x2c
   374d4:	mov	r3, r0
   374d8:	beq	376fc <__assert_fail@plt+0x25108>
   374dc:	str	r0, [sp, #40]	; 0x28
   374e0:	ldr	r1, [r2, #40]	; 0x28
   374e4:	add	r0, sp, #76	; 0x4c
   374e8:	ldr	r2, [sp, #24]
   374ec:	bl	32e4c <__assert_fail@plt+0x20858>
   374f0:	ldr	r3, [sp, #40]	; 0x28
   374f4:	cmp	r0, #0
   374f8:	str	r0, [sp, #72]	; 0x48
   374fc:	bne	3777c <__assert_fail@plt+0x25188>
   37500:	add	r2, sp, #76	; 0x4c
   37504:	mov	r1, r7
   37508:	add	r0, sp, #72	; 0x48
   3750c:	ldr	r8, [fp, #100]	; 0x64
   37510:	bl	32f98 <__assert_fail@plt+0x209a4>
   37514:	str	r0, [r8, r6, lsl #2]
   37518:	ldr	r0, [sp, #84]	; 0x54
   3751c:	bl	2db68 <__assert_fail@plt+0x1b574>
   37520:	ldr	r3, [fp, #100]	; 0x64
   37524:	ldr	r2, [r3, r6, lsl #2]
   37528:	cmp	r2, #0
   3752c:	beq	37720 <__assert_fail@plt+0x2512c>
   37530:	ldr	r2, [sp, #28]
   37534:	cmp	r2, #0
   37538:	bne	37554 <__assert_fail@plt+0x24f60>
   3753c:	ldr	r2, [sp, #48]	; 0x30
   37540:	ldr	r3, [r3, r2]
   37544:	ldr	r2, [sp, #44]	; 0x2c
   37548:	ldr	r3, [r3, #8]
   3754c:	cmp	r3, r2
   37550:	bgt	37730 <__assert_fail@plt+0x2513c>
   37554:	ldr	ip, [fp, #108]	; 0x6c
   37558:	add	r5, r5, #1
   3755c:	cmp	r5, ip
   37560:	add	r4, r4, #24
   37564:	blt	37434 <__assert_fail@plt+0x24e40>
   37568:	ldr	r3, [sp, #60]	; 0x3c
   3756c:	ldr	r6, [r3]
   37570:	b	3728c <__assert_fail@plt+0x24c98>
   37574:	mov	r4, r2
   37578:	mov	r2, r3
   3757c:	add	r0, r4, #1
   37580:	mov	r3, r2
   37584:	b	37338 <__assert_fail@plt+0x24d44>
   37588:	tst	r4, #8
   3758c:	beq	37308 <__assert_fail@plt+0x24d14>
   37590:	tst	r0, #1
   37594:	beq	37308 <__assert_fail@plt+0x24d14>
   37598:	b	3728c <__assert_fail@plt+0x24c98>
   3759c:	ldr	r3, [fp, #84]	; 0x54
   375a0:	ldr	r1, [fp, #124]	; 0x7c
   375a4:	str	r3, [sp, #56]	; 0x38
   375a8:	ldr	r3, [r3]
   375ac:	cmp	r1, #0
   375b0:	ldr	r2, [r3, r9, lsl #3]
   375b4:	str	r2, [sp, #52]	; 0x34
   375b8:	ble	373f0 <__assert_fail@plt+0x24dfc>
   375bc:	ldr	r2, [fp, #4]
   375c0:	str	r9, [sp, #44]	; 0x2c
   375c4:	mov	r9, r2
   375c8:	mov	r0, #0
   375cc:	str	r0, [sp, #40]	; 0x28
   375d0:	str	sl, [sp, #28]
   375d4:	str	r5, [sp, #68]	; 0x44
   375d8:	ldr	r2, [fp, #132]	; 0x84
   375dc:	ldr	r0, [sp, #40]	; 0x28
   375e0:	ldr	r4, [r2, r0, lsl #2]
   375e4:	ldr	r2, [r4, #4]
   375e8:	ldr	r3, [r3, r2, lsl #3]
   375ec:	ldr	r2, [sp, #52]	; 0x34
   375f0:	cmp	r2, r3
   375f4:	beq	37618 <__assert_fail@plt+0x25024>
   375f8:	ldr	r3, [sp, #40]	; 0x28
   375fc:	add	r3, r3, #1
   37600:	cmp	r3, r1
   37604:	str	r3, [sp, #40]	; 0x28
   37608:	bge	3798c <__assert_fail@plt+0x25398>
   3760c:	ldr	r3, [sp, #56]	; 0x38
   37610:	ldr	r3, [r3]
   37614:	b	375d8 <__assert_fail@plt+0x24fe4>
   37618:	ldr	ip, [r4, #16]
   3761c:	ldr	r6, [r4]
   37620:	cmp	ip, #0
   37624:	ble	379d0 <__assert_fail@plt+0x253dc>
   37628:	ldr	r8, [sp, #28]
   3762c:	mov	r5, #0
   37630:	mov	r3, r6
   37634:	b	3764c <__assert_fail@plt+0x25058>
   37638:	ldr	ip, [r4, #16]
   3763c:	mov	r3, r6
   37640:	cmp	r5, ip
   37644:	mov	r8, r7
   37648:	bge	3779c <__assert_fail@plt+0x251a8>
   3764c:	ldr	r2, [r4, #20]
   37650:	ldr	sl, [r2, r5, lsl #2]
   37654:	ldr	r6, [sl, #4]
   37658:	sub	r2, r6, r3
   3765c:	cmp	r2, #0
   37660:	add	r7, r2, r8
   37664:	ble	37690 <__assert_fail@plt+0x2509c>
   37668:	ldr	r1, [fp, #28]
   3766c:	cmp	r7, r1
   37670:	bgt	376c4 <__assert_fail@plt+0x250d0>
   37674:	add	r1, r9, r3
   37678:	add	r0, r9, r8
   3767c:	str	r3, [sp, #24]
   37680:	bl	12084 <memcmp@plt>
   37684:	ldr	r3, [sp, #24]
   37688:	cmp	r0, #0
   3768c:	bne	37910 <__assert_fail@plt+0x2531c>
   37690:	ldr	r3, [sp, #28]
   37694:	mov	r2, sl
   37698:	str	r3, [sp]
   3769c:	mov	r1, r4
   376a0:	ldr	r3, [sp, #44]	; 0x2c
   376a4:	mov	r0, fp
   376a8:	bl	370f0 <__assert_fail@plt+0x24afc>
   376ac:	add	r5, r5, #1
   376b0:	ldr	r9, [fp, #4]
   376b4:	cmp	r0, #1
   376b8:	bls	37638 <__assert_fail@plt+0x25044>
   376bc:	add	sp, sp, #92	; 0x5c
   376c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   376c4:	ldr	lr, [fp, #48]	; 0x30
   376c8:	str	r2, [sp, #64]	; 0x40
   376cc:	cmp	r7, lr
   376d0:	mov	r1, r7
   376d4:	mov	r0, fp
   376d8:	bgt	379d8 <__assert_fail@plt+0x253e4>
   376dc:	str	r3, [sp, #24]
   376e0:	bl	322c4 <__assert_fail@plt+0x1fcd0>
   376e4:	cmp	r0, #0
   376e8:	bne	376bc <__assert_fail@plt+0x250c8>
   376ec:	ldr	r9, [fp, #4]
   376f0:	ldr	r2, [sp, #64]	; 0x40
   376f4:	ldr	r3, [sp, #24]
   376f8:	b	37674 <__assert_fail@plt+0x25080>
   376fc:	ldr	r2, [sp, #24]
   37700:	mov	r1, r7
   37704:	add	r0, sp, #72	; 0x48
   37708:	bl	32f98 <__assert_fail@plt+0x209a4>
   3770c:	ldr	r3, [fp, #100]	; 0x64
   37710:	str	r0, [r8, r6, lsl #2]
   37714:	ldr	r2, [r3, r6, lsl #2]
   37718:	cmp	r2, #0
   3771c:	bne	37530 <__assert_fail@plt+0x24f3c>
   37720:	ldr	r0, [sp, #72]	; 0x48
   37724:	cmp	r0, #0
   37728:	beq	37530 <__assert_fail@plt+0x24f3c>
   3772c:	b	376bc <__assert_fail@plt+0x250c8>
   37730:	ldr	r3, [sp, #24]
   37734:	mov	r0, fp
   37738:	add	r6, r3, #4
   3773c:	add	r8, r3, #8
   37740:	mov	r2, r8
   37744:	mov	r1, r6
   37748:	mov	r3, sl
   3774c:	bl	3575c <__assert_fail@plt+0x23168>
   37750:	cmp	r0, #0
   37754:	str	r0, [sp, #72]	; 0x48
   37758:	bne	376bc <__assert_fail@plt+0x250c8>
   3775c:	mov	r2, r8
   37760:	mov	r1, r6
   37764:	mov	r0, fp
   37768:	bl	3724c <__assert_fail@plt+0x24c58>
   3776c:	cmp	r0, #0
   37770:	str	r0, [sp, #72]	; 0x48
   37774:	beq	37554 <__assert_fail@plt+0x24f60>
   37778:	b	376bc <__assert_fail@plt+0x250c8>
   3777c:	ldr	r0, [sp, #84]	; 0x54
   37780:	bl	2db68 <__assert_fail@plt+0x1b574>
   37784:	ldr	r0, [sp, #72]	; 0x48
   37788:	add	sp, sp, #92	; 0x5c
   3778c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37790:	mov	r0, #0
   37794:	add	sp, sp, #92	; 0x5c
   37798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3779c:	mov	sl, r6
   377a0:	add	r6, sl, #1
   377a4:	ldr	r3, [sp, #28]
   377a8:	cmp	r3, r6
   377ac:	blt	37908 <__assert_fail@plt+0x25314>
   377b0:	ldr	sl, [sp, #52]	; 0x34
   377b4:	lsl	r8, r6, #2
   377b8:	ldr	r3, [r4]
   377bc:	sub	r3, r6, r3
   377c0:	cmp	r3, #0
   377c4:	ble	377f0 <__assert_fail@plt+0x251fc>
   377c8:	ldr	r3, [fp, #28]
   377cc:	cmp	r3, r7
   377d0:	ble	37960 <__assert_fail@plt+0x2536c>
   377d4:	add	r5, r7, #1
   377d8:	add	r3, r9, r6
   377dc:	ldrb	r2, [r9, r7]
   377e0:	ldrb	r3, [r3, #-1]
   377e4:	cmp	r2, r3
   377e8:	bne	37908 <__assert_fail@plt+0x25314>
   377ec:	mov	r7, r5
   377f0:	ldr	r3, [fp, #100]	; 0x64
   377f4:	ldr	r3, [r3, r8]
   377f8:	cmp	r3, #0
   377fc:	beq	378f4 <__assert_fail@plt+0x25300>
   37800:	ldr	ip, [r3, #8]
   37804:	cmp	ip, #0
   37808:	ble	378f4 <__assert_fail@plt+0x25300>
   3780c:	ldr	r2, [r3, #12]
   37810:	ldr	r3, [sp, #56]	; 0x38
   37814:	sub	r2, r2, #4
   37818:	ldr	r0, [r3]
   3781c:	mov	r3, #0
   37820:	b	3782c <__assert_fail@plt+0x25238>
   37824:	cmp	ip, r3
   37828:	beq	378f4 <__assert_fail@plt+0x25300>
   3782c:	ldr	r5, [r2, #4]!
   37830:	add	r3, r3, #1
   37834:	add	r1, r0, r5, lsl #3
   37838:	ldrb	r1, [r1, #4]
   3783c:	cmp	r1, #9
   37840:	bne	37824 <__assert_fail@plt+0x25230>
   37844:	ldr	r1, [r0, r5, lsl #3]
   37848:	cmp	sl, r1
   3784c:	bne	37824 <__assert_fail@plt+0x25230>
   37850:	cmn	r5, #1
   37854:	beq	378f4 <__assert_fail@plt+0x25300>
   37858:	ldr	r1, [r4, #8]
   3785c:	cmp	r1, #0
   37860:	beq	37938 <__assert_fail@plt+0x25344>
   37864:	mov	r0, #9
   37868:	ldr	r3, [r4]
   3786c:	ldr	r2, [r4, #4]
   37870:	str	r0, [sp, #8]
   37874:	stm	sp, {r5, r6}
   37878:	mov	r0, fp
   3787c:	bl	36af4 <__assert_fail@plt+0x24500>
   37880:	cmp	r0, #1
   37884:	beq	378f4 <__assert_fail@plt+0x25300>
   37888:	cmp	r0, #0
   3788c:	bne	376bc <__assert_fail@plt+0x250c8>
   37890:	ldr	r3, [r4, #16]
   37894:	ldr	r2, [r4, #12]
   37898:	cmp	r3, r2
   3789c:	beq	379a8 <__assert_fail@plt+0x253b4>
   378a0:	mov	r1, #20
   378a4:	mov	r0, #1
   378a8:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   378ac:	cmp	r0, #0
   378b0:	beq	379a0 <__assert_fail@plt+0x253ac>
   378b4:	ldr	r3, [r4, #16]
   378b8:	ldr	r2, [r4, #20]
   378bc:	add	r1, r3, #1
   378c0:	str	r0, [r2, r3, lsl #2]
   378c4:	stm	r0, {r5, r6}
   378c8:	mov	r2, r0
   378cc:	ldr	r0, [sp, #28]
   378d0:	str	r1, [r4, #16]
   378d4:	ldr	r3, [sp, #44]	; 0x2c
   378d8:	str	r0, [sp]
   378dc:	mov	r1, r4
   378e0:	mov	r0, fp
   378e4:	bl	370f0 <__assert_fail@plt+0x24afc>
   378e8:	ldr	r9, [fp, #4]
   378ec:	cmp	r0, #1
   378f0:	bhi	376bc <__assert_fail@plt+0x250c8>
   378f4:	ldr	r3, [sp, #28]
   378f8:	add	r6, r6, #1
   378fc:	cmp	r3, r6
   37900:	add	r8, r8, #4
   37904:	bge	377b8 <__assert_fail@plt+0x251c4>
   37908:	ldr	r1, [fp, #124]	; 0x7c
   3790c:	b	375f8 <__assert_fail@plt+0x25004>
   37910:	ldr	ip, [r4, #16]
   37914:	mov	r6, r3
   37918:	cmp	ip, r5
   3791c:	bgt	37908 <__assert_fail@plt+0x25314>
   37920:	cmp	r5, #0
   37924:	movle	r7, r8
   37928:	ble	377a4 <__assert_fail@plt+0x251b0>
   3792c:	mov	sl, r6
   37930:	mov	r7, r8
   37934:	b	377a0 <__assert_fail@plt+0x251ac>
   37938:	ldr	r1, [r4]
   3793c:	mov	r0, #12
   37940:	sub	r1, r6, r1
   37944:	add	r1, r1, #1
   37948:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   3794c:	cmp	r0, #0
   37950:	str	r0, [r4, #8]
   37954:	beq	379a0 <__assert_fail@plt+0x253ac>
   37958:	mov	r1, r0
   3795c:	b	37864 <__assert_fail@plt+0x25270>
   37960:	ldr	r3, [fp, #48]	; 0x30
   37964:	cmp	r3, r7
   37968:	ble	37908 <__assert_fail@plt+0x25314>
   3796c:	add	r5, r7, #1
   37970:	mov	r1, r5
   37974:	mov	r0, fp
   37978:	bl	31810 <__assert_fail@plt+0x1f21c>
   3797c:	cmp	r0, #0
   37980:	bne	376bc <__assert_fail@plt+0x250c8>
   37984:	ldr	r9, [fp, #4]
   37988:	b	377d8 <__assert_fail@plt+0x251e4>
   3798c:	ldr	sl, [sp, #28]
   37990:	ldr	r9, [sp, #44]	; 0x2c
   37994:	ldr	r5, [sp, #68]	; 0x44
   37998:	ldr	ip, [fp, #108]	; 0x6c
   3799c:	b	373f0 <__assert_fail@plt+0x24dfc>
   379a0:	mov	r0, #12
   379a4:	b	376bc <__assert_fail@plt+0x250c8>
   379a8:	lsl	r3, r3, #1
   379ac:	add	r9, r3, #1
   379b0:	ldr	r0, [r4, #20]
   379b4:	lsl	r1, r9, #2
   379b8:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   379bc:	cmp	r0, #0
   379c0:	beq	379a0 <__assert_fail@plt+0x253ac>
   379c4:	str	r0, [r4, #20]
   379c8:	str	r9, [r4, #12]
   379cc:	b	378a0 <__assert_fail@plt+0x252ac>
   379d0:	ldr	r7, [sp, #28]
   379d4:	b	377a4 <__assert_fail@plt+0x251b0>
   379d8:	mov	r6, r3
   379dc:	b	37918 <__assert_fail@plt+0x25324>
   379e0:	andeq	pc, r3, r0, lsl #30
   379e4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   379e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   379ec:	mov	r4, r1
   379f0:	ldr	r5, [r1, #40]	; 0x28
   379f4:	ldr	r3, [r1, #104]	; 0x68
   379f8:	sub	sp, sp, #16
   379fc:	cmp	r5, r3
   37a00:	mov	r8, r0
   37a04:	ldr	r7, [r1, #84]	; 0x54
   37a08:	ble	37a34 <__assert_fail@plt+0x25440>
   37a0c:	ldr	r3, [r1, #100]	; 0x64
   37a10:	mov	r6, r2
   37a14:	str	r2, [r3, r5, lsl #2]
   37a18:	str	r5, [r1, #104]	; 0x68
   37a1c:	ldr	r3, [r7, #76]	; 0x4c
   37a20:	cmp	r3, #0
   37a24:	bne	37afc <__assert_fail@plt+0x25508>
   37a28:	mov	r0, r6
   37a2c:	add	sp, sp, #16
   37a30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37a34:	ldr	r9, [r1, #100]	; 0x64
   37a38:	ldr	r3, [r9, r5, lsl #2]
   37a3c:	cmp	r3, #0
   37a40:	streq	r2, [r9, r5, lsl #2]
   37a44:	moveq	r6, r2
   37a48:	beq	37a1c <__assert_fail@plt+0x25428>
   37a4c:	cmp	r2, #0
   37a50:	ldr	r3, [r3, #40]	; 0x28
   37a54:	beq	37ac0 <__assert_fail@plt+0x254cc>
   37a58:	ldr	r9, [r2, #40]	; 0x28
   37a5c:	add	r0, sp, #4
   37a60:	mov	r2, r3
   37a64:	mov	r1, r9
   37a68:	bl	32e4c <__assert_fail@plt+0x20858>
   37a6c:	cmp	r0, #0
   37a70:	str	r0, [r8]
   37a74:	bne	37b5c <__assert_fail@plt+0x25568>
   37a78:	ldr	r1, [r4, #40]	; 0x28
   37a7c:	ldr	r2, [r4, #88]	; 0x58
   37a80:	sub	r1, r1, #1
   37a84:	mov	r0, r4
   37a88:	bl	34c8c <__assert_fail@plt+0x22698>
   37a8c:	add	r2, sp, #4
   37a90:	mov	r1, r7
   37a94:	ldr	sl, [r4, #100]	; 0x64
   37a98:	mov	r3, r0
   37a9c:	mov	r0, r8
   37aa0:	bl	32f98 <__assert_fail@plt+0x209a4>
   37aa4:	cmp	r9, #0
   37aa8:	mov	r6, r0
   37aac:	str	r0, [sl, r5, lsl #2]
   37ab0:	beq	37a1c <__assert_fail@plt+0x25428>
   37ab4:	ldr	r0, [sp, #12]
   37ab8:	bl	2db68 <__assert_fail@plt+0x1b574>
   37abc:	b	37a1c <__assert_fail@plt+0x25428>
   37ac0:	ldm	r3, {r0, r1, r2}
   37ac4:	add	r6, sp, #4
   37ac8:	stm	r6, {r0, r1, r2}
   37acc:	sub	r1, r5, #1
   37ad0:	ldr	r2, [r4, #88]	; 0x58
   37ad4:	mov	r0, r4
   37ad8:	bl	34c8c <__assert_fail@plt+0x22698>
   37adc:	mov	r2, r6
   37ae0:	mov	r1, r7
   37ae4:	mov	r3, r0
   37ae8:	mov	r0, r8
   37aec:	bl	32f98 <__assert_fail@plt+0x209a4>
   37af0:	mov	r6, r0
   37af4:	str	r0, [r9, r5, lsl #2]
   37af8:	b	37a1c <__assert_fail@plt+0x25428>
   37afc:	cmp	r6, #0
   37b00:	beq	37b5c <__assert_fail@plt+0x25568>
   37b04:	add	r7, r6, #8
   37b08:	add	r9, r6, #12
   37b0c:	mov	r1, r7
   37b10:	mov	r2, r9
   37b14:	mov	r3, r5
   37b18:	mov	r0, r4
   37b1c:	bl	3575c <__assert_fail@plt+0x23168>
   37b20:	cmp	r0, #0
   37b24:	str	r0, [r8]
   37b28:	bne	37b5c <__assert_fail@plt+0x25568>
   37b2c:	ldrb	r3, [r6, #52]	; 0x34
   37b30:	tst	r3, #64	; 0x40
   37b34:	beq	37a28 <__assert_fail@plt+0x25434>
   37b38:	mov	r2, r9
   37b3c:	mov	r1, r7
   37b40:	mov	r0, r4
   37b44:	bl	3724c <__assert_fail@plt+0x24c58>
   37b48:	cmp	r0, #0
   37b4c:	str	r0, [r8]
   37b50:	ldreq	r3, [r4, #100]	; 0x64
   37b54:	ldreq	r6, [r3, r5, lsl #2]
   37b58:	beq	37a28 <__assert_fail@plt+0x25434>
   37b5c:	mov	r6, #0
   37b60:	b	37a28 <__assert_fail@plt+0x25434>
   37b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37b68:	sub	sp, sp, #68	; 0x44
   37b6c:	mov	r4, #1
   37b70:	mov	sl, r0
   37b74:	mov	r0, #4
   37b78:	ldr	fp, [r1, #12]
   37b7c:	mov	r9, r1
   37b80:	ldr	r5, [r1, #8]
   37b84:	str	r4, [sp, #52]	; 0x34
   37b88:	str	r4, [sp, #56]	; 0x38
   37b8c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   37b90:	lsl	r3, fp, #2
   37b94:	str	r3, [sp, #16]
   37b98:	cmp	r0, #0
   37b9c:	str	r0, [sp, #60]	; 0x3c
   37ba0:	beq	37e14 <__assert_fail@plt+0x25820>
   37ba4:	add	r3, sp, #52	; 0x34
   37ba8:	str	r5, [r0]
   37bac:	mov	r2, fp
   37bb0:	mov	r1, r9
   37bb4:	mov	r0, sl
   37bb8:	bl	3984c <__assert_fail@plt+0x27258>
   37bbc:	subs	r3, r0, #0
   37bc0:	str	r3, [sp, #44]	; 0x2c
   37bc4:	bne	37de4 <__assert_fail@plt+0x257f0>
   37bc8:	cmp	fp, #0
   37bcc:	ble	37de4 <__assert_fail@plt+0x257f0>
   37bd0:	ldr	r3, [sp, #44]	; 0x2c
   37bd4:	str	r4, [sp, #40]	; 0x28
   37bd8:	str	r3, [sp, #36]	; 0x24
   37bdc:	add	r3, r9, #24
   37be0:	str	r3, [sp, #28]
   37be4:	add	r3, r9, #20
   37be8:	str	r3, [sp, #32]
   37bec:	ldr	r0, [r9]
   37bf0:	ldr	r3, [sp, #16]
   37bf4:	ldr	r3, [r0, r3]
   37bf8:	cmp	r3, #0
   37bfc:	movne	r3, #0
   37c00:	ldreq	r3, [sp, #36]	; 0x24
   37c04:	addeq	r3, r3, #1
   37c08:	str	r3, [sp, #36]	; 0x24
   37c0c:	ldr	r2, [sp, #36]	; 0x24
   37c10:	ldr	r3, [sl, #120]	; 0x78
   37c14:	cmp	r2, r3
   37c18:	bgt	37e24 <__assert_fail@plt+0x25830>
   37c1c:	mov	r2, #0
   37c20:	ldr	r3, [sl, #100]	; 0x64
   37c24:	str	r2, [sp, #56]	; 0x38
   37c28:	ldr	r2, [sp, #16]
   37c2c:	sub	fp, fp, #1
   37c30:	add	r3, r3, r2
   37c34:	ldr	r7, [r3, #-4]
   37c38:	cmp	r7, #0
   37c3c:	beq	37db4 <__assert_fail@plt+0x257c0>
   37c40:	ldr	r3, [r7, #20]
   37c44:	ldr	r8, [sl, #84]	; 0x54
   37c48:	cmp	r3, #0
   37c4c:	ble	37db4 <__assert_fail@plt+0x257c0>
   37c50:	ldr	r3, [r7, #24]
   37c54:	ldr	r1, [r8]
   37c58:	mov	r4, #0
   37c5c:	ldr	r5, [r3]
   37c60:	lsl	r6, r5, #3
   37c64:	add	r3, r1, r6
   37c68:	b	37d24 <__assert_fail@plt+0x25730>
   37c6c:	add	r1, r1, r6
   37c70:	mov	r2, fp
   37c74:	mov	r0, sl
   37c78:	bl	34d78 <__assert_fail@plt+0x22784>
   37c7c:	cmp	r0, #0
   37c80:	beq	37d00 <__assert_fail@plt+0x2570c>
   37c84:	ldr	r3, [r9]
   37c88:	ldr	r2, [sp, #16]
   37c8c:	ldr	r3, [r3, r2]
   37c90:	cmp	r3, #0
   37c94:	beq	37d00 <__assert_fail@plt+0x2570c>
   37c98:	ldr	r2, [r8, #12]
   37c9c:	add	r1, r3, #12
   37ca0:	ldr	r0, [r3, #8]
   37ca4:	ldr	r2, [r2, r5, lsl #2]
   37ca8:	bl	3247c <__assert_fail@plt+0x1fe88>
   37cac:	cmp	r0, #0
   37cb0:	beq	37d00 <__assert_fail@plt+0x2570c>
   37cb4:	ldr	r3, [sp, #40]	; 0x28
   37cb8:	ldr	r2, [r9, #20]
   37cbc:	cmp	r2, #0
   37cc0:	beq	37cec <__assert_fail@plt+0x256f8>
   37cc4:	ldr	r1, [r8, #12]
   37cc8:	add	r0, fp, r3
   37ccc:	ldr	r2, [sp, #28]
   37cd0:	ldr	r3, [r1, r5, lsl #2]
   37cd4:	stm	sp, {r0, r5, fp}
   37cd8:	mov	r0, sl
   37cdc:	ldr	r1, [sp, #32]
   37ce0:	bl	32748 <__assert_fail@plt+0x20154>
   37ce4:	cmp	r0, #0
   37ce8:	bne	37d00 <__assert_fail@plt+0x2570c>
   37cec:	mov	r1, r5
   37cf0:	add	r0, sp, #52	; 0x34
   37cf4:	bl	31eec <__assert_fail@plt+0x1f8f8>
   37cf8:	cmp	r0, #0
   37cfc:	beq	37df4 <__assert_fail@plt+0x25800>
   37d00:	ldr	r3, [r7, #20]
   37d04:	add	r4, r4, #1
   37d08:	cmp	r4, r3
   37d0c:	bge	37db4 <__assert_fail@plt+0x257c0>
   37d10:	ldr	r3, [r7, #24]
   37d14:	ldr	r1, [r8]
   37d18:	ldr	r5, [r3, r4, lsl #2]
   37d1c:	lsl	r6, r5, #3
   37d20:	add	r3, r1, r6
   37d24:	ldrb	r3, [r3, #6]
   37d28:	tst	r3, #16
   37d2c:	beq	37c6c <__assert_fail@plt+0x25678>
   37d30:	ldr	r3, [sl, #84]	; 0x54
   37d34:	mov	r2, r3
   37d38:	str	r3, [sp, #24]
   37d3c:	ldr	r0, [r2]
   37d40:	str	fp, [sp]
   37d44:	ldr	ip, [r9, #12]
   37d48:	mov	r3, sl
   37d4c:	add	r1, r2, #128	; 0x80
   37d50:	mov	r2, r5
   37d54:	str	ip, [sp, #20]
   37d58:	bl	36828 <__assert_fail@plt+0x24234>
   37d5c:	subs	r3, r0, #0
   37d60:	ble	37dec <__assert_fail@plt+0x257f8>
   37d64:	ldr	ip, [sp, #20]
   37d68:	add	r2, fp, r3
   37d6c:	cmp	ip, r2
   37d70:	blt	37cb8 <__assert_fail@plt+0x256c4>
   37d74:	ldr	r1, [r9]
   37d78:	ldr	r2, [r1, r2, lsl #2]
   37d7c:	cmp	r2, #0
   37d80:	beq	37dac <__assert_fail@plt+0x257b8>
   37d84:	str	r3, [sp, #20]
   37d88:	ldr	r3, [sp, #24]
   37d8c:	add	r1, r2, #12
   37d90:	ldr	r0, [r2, #8]
   37d94:	ldr	ip, [r3, #12]
   37d98:	ldr	r2, [ip, r5, lsl #2]
   37d9c:	bl	3247c <__assert_fail@plt+0x1fe88>
   37da0:	ldr	r3, [sp, #20]
   37da4:	cmp	r0, #0
   37da8:	bne	37cb8 <__assert_fail@plt+0x256c4>
   37dac:	ldr	r1, [r8]
   37db0:	b	37c6c <__assert_fail@plt+0x25678>
   37db4:	add	r3, sp, #52	; 0x34
   37db8:	mov	r2, fp
   37dbc:	mov	r1, r9
   37dc0:	mov	r0, sl
   37dc4:	bl	3984c <__assert_fail@plt+0x27258>
   37dc8:	cmp	r0, #0
   37dcc:	bne	37e0c <__assert_fail@plt+0x25818>
   37dd0:	ldr	r3, [sp, #16]
   37dd4:	cmp	fp, #0
   37dd8:	sub	r3, r3, #4
   37ddc:	str	r3, [sp, #16]
   37de0:	bne	37bec <__assert_fail@plt+0x255f8>
   37de4:	ldr	r4, [sp, #44]	; 0x2c
   37de8:	b	37df8 <__assert_fail@plt+0x25804>
   37dec:	beq	37dac <__assert_fail@plt+0x257b8>
   37df0:	b	37cb8 <__assert_fail@plt+0x256c4>
   37df4:	mov	r4, #12
   37df8:	ldr	r0, [sp, #60]	; 0x3c
   37dfc:	bl	2db68 <__assert_fail@plt+0x1b574>
   37e00:	mov	r0, r4
   37e04:	add	sp, sp, #68	; 0x44
   37e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e0c:	mov	r4, r0
   37e10:	b	37df8 <__assert_fail@plt+0x25804>
   37e14:	mov	r4, #12
   37e18:	mov	r0, r4
   37e1c:	add	sp, sp, #68	; 0x44
   37e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e24:	ldr	r2, [sp, #16]
   37e28:	mov	r1, #0
   37e2c:	bl	12378 <memset@plt>
   37e30:	ldr	r0, [sp, #60]	; 0x3c
   37e34:	ldr	r4, [sp, #44]	; 0x2c
   37e38:	bl	2db68 <__assert_fail@plt+0x1b574>
   37e3c:	b	37e00 <__assert_fail@plt+0x2580c>
   37e40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37e44:	mov	r7, r0
   37e48:	sub	sp, sp, #428	; 0x1ac
   37e4c:	mov	r6, r3
   37e50:	ldr	r3, [r7]
   37e54:	str	r0, [sp, #44]	; 0x2c
   37e58:	str	r1, [sp, #56]	; 0x38
   37e5c:	str	r2, [sp, #72]	; 0x48
   37e60:	mov	r1, #0
   37e64:	add	r0, sp, #148	; 0x94
   37e68:	mov	r2, #136	; 0x88
   37e6c:	mov	r8, r3
   37e70:	str	r3, [sp, #28]
   37e74:	ldr	r4, [sp, #464]	; 0x1d0
   37e78:	ldr	r5, [sp, #472]	; 0x1d8
   37e7c:	bl	12378 <memset@plt>
   37e80:	ldr	r1, [r7, #16]
   37e84:	str	r8, [sp, #232]	; 0xe8
   37e88:	cmp	r1, #0
   37e8c:	streq	r1, [sp, #60]	; 0x3c
   37e90:	beq	37ebc <__assert_fail@plt+0x258c8>
   37e94:	ldrb	r2, [r7, #28]
   37e98:	subs	r3, r6, r4
   37e9c:	movne	r3, #1
   37ea0:	ands	r3, r3, r2, lsr #3
   37ea4:	streq	r3, [sp, #60]	; 0x3c
   37ea8:	beq	37ebc <__assert_fail@plt+0x258c8>
   37eac:	tst	r2, #1
   37eb0:	moveq	r3, r1
   37eb4:	movne	r3, #0
   37eb8:	str	r3, [sp, #60]	; 0x3c
   37ebc:	ldr	r3, [sp, #44]	; 0x2c
   37ec0:	ldr	r3, [r3, #24]
   37ec4:	cmp	r3, r5
   37ec8:	subcc	r2, r5, #1
   37ecc:	subcc	r3, r2, r3
   37ed0:	ldr	r2, [sp, #44]	; 0x2c
   37ed4:	movcs	r3, #0
   37ed8:	str	r3, [sp, #96]	; 0x60
   37edc:	ldr	r2, [r2, #8]
   37ee0:	cmp	r2, #0
   37ee4:	beq	38514 <__assert_fail@plt+0x25f20>
   37ee8:	ldr	r2, [sp, #28]
   37eec:	ldr	r2, [r2, #36]	; 0x24
   37ef0:	cmp	r2, #0
   37ef4:	beq	38514 <__assert_fail@plt+0x25f20>
   37ef8:	ldr	r1, [sp, #28]
   37efc:	ldr	r1, [r1, #40]	; 0x28
   37f00:	cmp	r1, #0
   37f04:	beq	38514 <__assert_fail@plt+0x25f20>
   37f08:	ldr	r0, [sp, #28]
   37f0c:	ldr	ip, [r0, #44]	; 0x2c
   37f10:	cmp	ip, #0
   37f14:	beq	38514 <__assert_fail@plt+0x25f20>
   37f18:	ldr	r0, [r0, #48]	; 0x30
   37f1c:	cmp	r0, #0
   37f20:	beq	38514 <__assert_fail@plt+0x25f20>
   37f24:	ldr	r2, [r2, #8]
   37f28:	cmp	r2, #0
   37f2c:	bne	37f70 <__assert_fail@plt+0x2597c>
   37f30:	ldr	r2, [r1, #8]
   37f34:	cmp	r2, #0
   37f38:	bne	37f70 <__assert_fail@plt+0x2597c>
   37f3c:	ldr	r2, [ip, #8]
   37f40:	cmp	r2, #0
   37f44:	beq	37f58 <__assert_fail@plt+0x25964>
   37f48:	ldr	r2, [sp, #44]	; 0x2c
   37f4c:	ldrsb	r2, [r2, #28]
   37f50:	cmp	r2, #0
   37f54:	blt	37f70 <__assert_fail@plt+0x2597c>
   37f58:	cmp	r6, #0
   37f5c:	cmpne	r4, #0
   37f60:	movne	r4, #1
   37f64:	moveq	r4, #0
   37f68:	bne	38514 <__assert_fail@plt+0x25f20>
   37f6c:	mov	r6, r4
   37f70:	subs	r3, r5, r3
   37f74:	str	r3, [sp, #76]	; 0x4c
   37f78:	movne	r3, #1
   37f7c:	strne	r3, [sp, #40]	; 0x28
   37f80:	beq	38248 <__assert_fail@plt+0x25c54>
   37f84:	ldr	r1, [sp, #28]
   37f88:	ldr	lr, [sp, #44]	; 0x2c
   37f8c:	ldr	r7, [sp, #56]	; 0x38
   37f90:	ldr	r2, [r1, #8]
   37f94:	ldr	ip, [r1, #92]	; 0x5c
   37f98:	ldrb	r0, [r1, #88]	; 0x58
   37f9c:	ldr	r1, [lr, #20]
   37fa0:	add	r2, r2, #1
   37fa4:	ldr	r3, [lr, #12]
   37fa8:	ldr	lr, [sp, #72]	; 0x48
   37fac:	cmp	r2, ip
   37fb0:	mov	r5, r1
   37fb4:	movlt	r2, ip
   37fb8:	str	r1, [sp, #88]	; 0x58
   37fbc:	str	lr, [sp, #196]	; 0xc4
   37fc0:	add	r1, lr, #1
   37fc4:	str	lr, [sp, #192]	; 0xc0
   37fc8:	str	lr, [sp, #204]	; 0xcc
   37fcc:	str	lr, [sp, #200]	; 0xc8
   37fd0:	mov	lr, r5
   37fd4:	adds	r5, r5, #0
   37fd8:	movne	r5, #1
   37fdc:	lsr	r3, r3, #22
   37fe0:	cmp	r2, r1
   37fe4:	movlt	r1, r2
   37fe8:	and	r3, r3, #1
   37fec:	str	ip, [sp, #228]	; 0xe4
   37ff0:	lsr	r2, r0, #3
   37ff4:	lsr	ip, r0, #2
   37ff8:	and	ip, ip, #1
   37ffc:	and	r2, r2, #1
   38000:	strb	r3, [sp, #220]	; 0xdc
   38004:	add	r0, sp, #148	; 0x94
   38008:	orr	r3, r3, r5
   3800c:	strb	r3, [sp, #223]	; 0xdf
   38010:	str	r7, [sp, #148]	; 0x94
   38014:	str	lr, [sp, #212]	; 0xd4
   38018:	strb	ip, [sp, #221]	; 0xdd
   3801c:	strb	r2, [sp, #222]	; 0xde
   38020:	bl	30e88 <__assert_fail@plt+0x1e894>
   38024:	subs	r3, r0, #0
   38028:	str	r3, [sp, #48]	; 0x30
   3802c:	bne	38fd0 <__assert_fail@plt+0x269dc>
   38030:	ldr	r1, [sp, #28]
   38034:	ldrb	r2, [sp, #223]	; 0xdf
   38038:	add	r1, r1, #96	; 0x60
   3803c:	ldrb	r3, [r1, #-8]
   38040:	cmp	r2, #0
   38044:	str	r1, [sp, #216]	; 0xd8
   38048:	lsr	r3, r3, #4
   3804c:	and	r3, r3, #1
   38050:	strb	r3, [sp, #226]	; 0xe2
   38054:	bne	38070 <__assert_fail@plt+0x25a7c>
   38058:	ldr	r3, [sp, #28]
   3805c:	ldr	r2, [sp, #56]	; 0x38
   38060:	ldr	r3, [r3, #92]	; 0x5c
   38064:	str	r2, [sp, #152]	; 0x98
   38068:	cmp	r3, #1
   3806c:	ble	38f58 <__assert_fail@plt+0x26964>
   38070:	mov	r1, #0
   38074:	ldr	r3, [sp, #44]	; 0x2c
   38078:	mvn	r2, #0
   3807c:	str	r1, [sp, #176]	; 0xb0
   38080:	ldrb	r3, [r3, #28]
   38084:	str	r1, [sp, #180]	; 0xb4
   38088:	lsr	r3, r3, #7
   3808c:	strb	r3, [sp, #225]	; 0xe1
   38090:	ldr	r3, [sp, #28]
   38094:	ldr	r8, [r3, #76]	; 0x4c
   38098:	ldr	r3, [sp, #468]	; 0x1d4
   3809c:	str	r2, [sp, #240]	; 0xf0
   380a0:	str	r3, [sp, #204]	; 0xcc
   380a4:	str	r3, [sp, #200]	; 0xc8
   380a8:	lsl	r7, r8, #1
   380ac:	ldr	r3, [sp, #480]	; 0x1e0
   380b0:	cmp	r7, #0
   380b4:	str	r3, [sp, #236]	; 0xec
   380b8:	ble	380f4 <__assert_fail@plt+0x25b00>
   380bc:	ldr	r3, [pc, #4068]	; 390a8 <__assert_fail@plt+0x26ab4>
   380c0:	cmp	r7, r3
   380c4:	bgt	38a60 <__assert_fail@plt+0x2646c>
   380c8:	add	r0, r7, r8, lsl #2
   380cc:	lsl	r0, r0, #3
   380d0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   380d4:	str	r0, [sp, #264]	; 0x108
   380d8:	lsl	r0, r8, #3
   380dc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   380e0:	ldr	r3, [sp, #264]	; 0x108
   380e4:	cmp	r0, #0
   380e8:	cmpne	r3, #0
   380ec:	str	r0, [sp, #280]	; 0x118
   380f0:	beq	38a60 <__assert_fail@plt+0x2646c>
   380f4:	ldr	r3, [sp, #76]	; 0x4c
   380f8:	str	r7, [sp, #260]	; 0x104
   380fc:	cmp	r3, #1
   38100:	mov	r3, #1
   38104:	str	r7, [sp, #276]	; 0x114
   38108:	str	r3, [sp, #268]	; 0x10c
   3810c:	bls	390d4 <__assert_fail@plt+0x26ae0>
   38110:	ldr	r3, [sp, #184]	; 0xb8
   38114:	cmn	r3, #-1073741822	; 0xc0000002
   38118:	bhi	38a60 <__assert_fail@plt+0x2646c>
   3811c:	add	r3, r3, #1
   38120:	lsl	r0, r3, #2
   38124:	bl	2fe38 <__assert_fail@plt+0x1d844>
   38128:	cmp	r0, #0
   3812c:	str	r0, [sp, #248]	; 0xf8
   38130:	beq	38a98 <__assert_fail@plt+0x264a4>
   38134:	ldr	r3, [sp, #480]	; 0x1e0
   38138:	str	r6, [sp, #116]	; 0x74
   3813c:	tst	r3, #1
   38140:	moveq	r3, #6
   38144:	movne	r3, #4
   38148:	cmp	r6, r4
   3814c:	movle	r2, #1
   38150:	mvngt	r2, #0
   38154:	str	r2, [sp, #92]	; 0x5c
   38158:	str	r3, [sp, #208]	; 0xd0
   3815c:	movlt	r2, r6
   38160:	movge	r2, r4
   38164:	ldr	r3, [sp, #28]
   38168:	str	r2, [sp, #68]	; 0x44
   3816c:	movge	r2, r6
   38170:	movlt	r2, r4
   38174:	str	r2, [sp, #52]	; 0x34
   38178:	ldr	r2, [sp, #60]	; 0x3c
   3817c:	ldr	r3, [r3, #92]	; 0x5c
   38180:	cmp	r2, #0
   38184:	str	r3, [sp, #80]	; 0x50
   38188:	beq	39198 <__assert_fail@plt+0x26ba4>
   3818c:	ldr	r3, [sp, #80]	; 0x50
   38190:	cmp	r3, #1
   38194:	moveq	r3, #4
   38198:	beq	381c0 <__assert_fail@plt+0x25bcc>
   3819c:	ldr	r3, [sp, #44]	; 0x2c
   381a0:	ldr	r2, [sp, #88]	; 0x58
   381a4:	ldr	r3, [r3, #12]
   381a8:	lsr	r3, r3, #22
   381ac:	eor	r3, r3, #1
   381b0:	cmp	r2, #0
   381b4:	movne	r3, #0
   381b8:	andeq	r3, r3, #1
   381bc:	lsl	r3, r3, #2
   381c0:	cmp	r6, r4
   381c4:	orr	r3, r5, r3
   381c8:	movle	r2, #2
   381cc:	movgt	r2, #0
   381d0:	orr	r3, r3, r2
   381d4:	ldr	r2, [sp, #68]	; 0x44
   381d8:	ldr	r1, [sp, #52]	; 0x34
   381dc:	cmp	r6, r2
   381e0:	movge	r2, #0
   381e4:	movlt	r2, #1
   381e8:	cmp	r6, r1
   381ec:	orrgt	r2, r2, #1
   381f0:	cmp	r2, #0
   381f4:	str	r2, [sp, #108]	; 0x6c
   381f8:	bne	38504 <__assert_fail@plt+0x25f10>
   381fc:	sub	r3, r3, #4
   38200:	cmp	r6, r4
   38204:	str	r3, [sp, #84]	; 0x54
   38208:	add	r3, sp, #424	; 0x1a8
   3820c:	suble	r3, r3, #308	; 0x134
   38210:	movgt	r3, #0
   38214:	str	r3, [sp, #100]	; 0x64
   38218:	movle	r3, #1
   3821c:	movgt	r3, #0
   38220:	str	r3, [sp, #104]	; 0x68
   38224:	ldr	r3, [sp, #84]	; 0x54
   38228:	cmp	r3, #4
   3822c:	ldrls	pc, [pc, r3, lsl #2]
   38230:	b	38fd8 <__assert_fail@plt+0x269e4>
   38234:	andeq	r8, r3, r8, asr #29
   38238:	andeq	r8, r3, r8, asr #29
   3823c:	andeq	r8, r3, r0, ror #4
   38240:	andeq	r8, r3, ip, asr lr
   38244:	andeq	r8, r3, r8, lsl #6
   38248:	ldr	r3, [sp, #28]
   3824c:	ldr	r3, [r3, #76]	; 0x4c
   38250:	adds	r3, r3, #0
   38254:	movne	r3, #1
   38258:	str	r3, [sp, #40]	; 0x28
   3825c:	b	37f84 <__assert_fail@plt+0x25990>
   38260:	ldr	r3, [sp, #52]	; 0x34
   38264:	cmp	r3, r6
   38268:	ble	382c0 <__assert_fail@plt+0x25ccc>
   3826c:	ldr	r3, [sp, #56]	; 0x38
   38270:	ldr	r1, [sp, #60]	; 0x3c
   38274:	ldrb	r2, [r3, r6]
   38278:	add	r3, r3, r6
   3827c:	ldrb	r2, [r1, r2]
   38280:	cmp	r2, #0
   38284:	bne	38308 <__assert_fail@plt+0x25d14>
   38288:	add	r2, r6, #1
   3828c:	ldr	ip, [sp, #60]	; 0x3c
   38290:	ldr	r0, [sp, #52]	; 0x34
   38294:	b	382ac <__assert_fail@plt+0x25cb8>
   38298:	ldrb	r1, [r3, #1]!
   3829c:	add	r2, r2, #1
   382a0:	ldrb	r1, [ip, r1]
   382a4:	cmp	r1, #0
   382a8:	bne	3914c <__assert_fail@plt+0x26b58>
   382ac:	cmp	r2, r0
   382b0:	mov	r6, r2
   382b4:	bne	38298 <__assert_fail@plt+0x25ca4>
   382b8:	ldr	r3, [sp, #52]	; 0x34
   382bc:	str	r3, [sp, #116]	; 0x74
   382c0:	ldr	r3, [sp, #52]	; 0x34
   382c4:	cmp	r3, r6
   382c8:	bne	38308 <__assert_fail@plt+0x25d14>
   382cc:	ldr	r2, [sp, #72]	; 0x48
   382d0:	ldr	r1, [sp, #88]	; 0x58
   382d4:	cmp	r2, r3
   382d8:	movle	r3, #0
   382dc:	ldrgt	r2, [sp, #56]	; 0x38
   382e0:	ldrbgt	r3, [r2, r3]
   382e4:	cmp	r1, #0
   382e8:	mov	r2, r3
   382ec:	movne	r2, r1
   382f0:	ldrbne	r2, [r2, r3]
   382f4:	ldr	r3, [sp, #60]	; 0x3c
   382f8:	ldrb	r3, [r3, r2]
   382fc:	cmp	r3, #0
   38300:	beq	38504 <__assert_fail@plt+0x25f10>
   38304:	ldr	r6, [sp, #52]	; 0x34
   38308:	ldr	r2, [sp, #480]	; 0x1e0
   3830c:	mov	r1, r6
   38310:	add	r0, sp, #148	; 0x94
   38314:	bl	34f8c <__assert_fail@plt+0x22998>
   38318:	subs	r3, r0, #0
   3831c:	str	r3, [sp, #48]	; 0x30
   38320:	bne	38fd0 <__assert_fail@plt+0x269dc>
   38324:	ldr	r3, [sp, #80]	; 0x50
   38328:	cmp	r3, #1
   3832c:	beq	3834c <__assert_fail@plt+0x25d58>
   38330:	ldr	r3, [sp, #176]	; 0xb0
   38334:	cmp	r3, #0
   38338:	beq	3834c <__assert_fail@plt+0x25d58>
   3833c:	ldr	r3, [sp, #156]	; 0x9c
   38340:	ldr	r3, [r3]
   38344:	cmn	r3, #1
   38348:	beq	384d4 <__assert_fail@plt+0x25ee0>
   3834c:	ldr	r4, [sp, #232]	; 0xe8
   38350:	mov	r3, #0
   38354:	str	r3, [sp, #268]	; 0x10c
   38358:	ldr	fp, [r4, #36]	; 0x24
   3835c:	str	r3, [sp, #256]	; 0x100
   38360:	str	r3, [sp, #252]	; 0xfc
   38364:	str	r3, [sp, #124]	; 0x7c
   38368:	ldrsb	r3, [fp, #52]	; 0x34
   3836c:	ldr	r2, [sp, #188]	; 0xbc
   38370:	cmp	r3, #0
   38374:	str	r2, [sp, #12]
   38378:	blt	39068 <__assert_fail@plt+0x26a74>
   3837c:	ldr	r3, [sp, #248]	; 0xf8
   38380:	cmp	r3, #0
   38384:	beq	39114 <__assert_fail@plt+0x26b20>
   38388:	ldr	r2, [r4, #76]	; 0x4c
   3838c:	ldr	r1, [sp, #12]
   38390:	cmp	r2, #0
   38394:	str	fp, [r3, r1, lsl #2]
   38398:	bne	391a0 <__assert_fail@plt+0x26bac>
   3839c:	ldrb	r3, [fp, #52]	; 0x34
   383a0:	ldr	r2, [sp, #104]	; 0x68
   383a4:	str	r2, [sp, #16]
   383a8:	tst	r3, #16
   383ac:	bne	39164 <__assert_fail@plt+0x26b70>
   383b0:	mvn	r3, #0
   383b4:	str	r3, [sp, #20]
   383b8:	mov	r3, #0
   383bc:	str	r3, [sp, #36]	; 0x24
   383c0:	ldr	r3, [sp, #100]	; 0x64
   383c4:	ldr	r5, [sp, #188]	; 0xbc
   383c8:	str	r3, [sp, #32]
   383cc:	b	383d8 <__assert_fail@plt+0x25de4>
   383d0:	ldr	r5, [sp, #188]	; 0xbc
   383d4:	mov	fp, r4
   383d8:	ldr	r3, [sp, #204]	; 0xcc
   383dc:	cmp	r3, r5
   383e0:	ble	38594 <__assert_fail@plt+0x25fa0>
   383e4:	ldr	r3, [sp, #184]	; 0xb8
   383e8:	add	r9, r5, #1
   383ec:	cmp	r9, r3
   383f0:	bge	3894c <__assert_fail@plt+0x26358>
   383f4:	ldr	r3, [sp, #176]	; 0xb0
   383f8:	cmp	r9, r3
   383fc:	bge	389a8 <__assert_fail@plt+0x263b4>
   38400:	ldrb	r3, [fp, #52]	; 0x34
   38404:	tst	r3, #32
   38408:	bne	38784 <__assert_fail@plt+0x26190>
   3840c:	ldr	r3, [sp, #152]	; 0x98
   38410:	add	r2, r5, #1
   38414:	str	r2, [sp, #188]	; 0xbc
   38418:	ldrb	r4, [r3, r5]
   3841c:	ldr	r3, [fp, #44]	; 0x2c
   38420:	cmp	r3, #0
   38424:	beq	38978 <__assert_fail@plt+0x26384>
   38428:	ldr	r4, [r3, r4, lsl #2]
   3842c:	ldr	r3, [sp, #248]	; 0xf8
   38430:	cmp	r3, #0
   38434:	beq	3844c <__assert_fail@plt+0x25e58>
   38438:	mov	r2, r4
   3843c:	add	r1, sp, #148	; 0x94
   38440:	add	r0, sp, #124	; 0x7c
   38444:	bl	379e8 <__assert_fail@plt+0x253f4>
   38448:	mov	r4, r0
   3844c:	cmp	r4, #0
   38450:	beq	38528 <__assert_fail@plt+0x25f34>
   38454:	ldr	r2, [sp, #16]
   38458:	ldrb	r3, [r4, #52]	; 0x34
   3845c:	cmp	fp, r4
   38460:	movne	r2, #0
   38464:	andeq	r2, r2, #1
   38468:	ldr	r1, [sp, #12]
   3846c:	cmp	r2, #0
   38470:	movne	r1, r9
   38474:	tst	r3, #16
   38478:	str	r2, [sp, #16]
   3847c:	str	r1, [sp, #12]
   38480:	beq	383d0 <__assert_fail@plt+0x25ddc>
   38484:	tst	r3, #128	; 0x80
   38488:	bne	38730 <__assert_fail@plt+0x2613c>
   3848c:	ldr	r3, [sp, #188]	; 0xbc
   38490:	str	r3, [sp, #20]
   38494:	ldr	r3, [sp, #40]	; 0x28
   38498:	cmp	r3, #0
   3849c:	beq	385b4 <__assert_fail@plt+0x25fc0>
   384a0:	mov	r3, #1
   384a4:	str	r3, [sp, #36]	; 0x24
   384a8:	mov	r3, #0
   384ac:	ldr	r5, [sp, #20]
   384b0:	str	r3, [sp, #32]
   384b4:	b	383d4 <__assert_fail@plt+0x25de0>
   384b8:	mov	r0, r5
   384bc:	bl	2db68 <__assert_fail@plt+0x1b574>
   384c0:	mov	r0, #0
   384c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   384c8:	add	r0, sp, #148	; 0x94
   384cc:	bl	31de4 <__assert_fail@plt+0x1f7f0>
   384d0:	ldr	r6, [sp, #116]	; 0x74
   384d4:	ldr	r3, [sp, #92]	; 0x5c
   384d8:	ldr	r2, [sp, #68]	; 0x44
   384dc:	add	r6, r6, r3
   384e0:	ldr	r3, [sp, #52]	; 0x34
   384e4:	str	r6, [sp, #116]	; 0x74
   384e8:	cmp	r3, r6
   384ec:	movge	r3, #0
   384f0:	movlt	r3, #1
   384f4:	cmp	r2, r6
   384f8:	orrgt	r3, r3, #1
   384fc:	cmp	r3, #0
   38500:	beq	38224 <__assert_fail@plt+0x25c30>
   38504:	mov	r3, #1
   38508:	ldr	r7, [sp, #248]	; 0xf8
   3850c:	str	r3, [sp, #48]	; 0x30
   38510:	b	38a6c <__assert_fail@plt+0x26478>
   38514:	mov	r3, #1
   38518:	str	r3, [sp, #48]	; 0x30
   3851c:	ldr	r0, [sp, #48]	; 0x30
   38520:	add	sp, sp, #428	; 0x1ac
   38524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38528:	ldr	r3, [sp, #124]	; 0x7c
   3852c:	cmp	r3, #0
   38530:	bne	39190 <__assert_fail@plt+0x26b9c>
   38534:	ldr	r2, [sp, #248]	; 0xf8
   38538:	cmp	r2, #0
   3853c:	beq	38594 <__assert_fail@plt+0x25fa0>
   38540:	ldr	r3, [sp, #40]	; 0x28
   38544:	eor	r5, r3, #1
   38548:	ldr	r3, [sp, #36]	; 0x24
   3854c:	ands	r5, r5, r3
   38550:	bne	38594 <__assert_fail@plt+0x25fa0>
   38554:	ldr	r3, [sp, #188]	; 0xbc
   38558:	ldr	lr, [sp, #252]	; 0xfc
   3855c:	mov	ip, r3
   38560:	add	r2, r2, r3, lsl #2
   38564:	mov	r0, r5
   38568:	b	38580 <__assert_fail@plt+0x25f8c>
   3856c:	ldr	r1, [r2, #4]!
   38570:	add	ip, ip, #1
   38574:	cmp	r1, #0
   38578:	mov	r0, #1
   3857c:	bne	38754 <__assert_fail@plt+0x26160>
   38580:	add	r3, r3, #1
   38584:	cmp	lr, r3
   38588:	bge	3856c <__assert_fail@plt+0x25f78>
   3858c:	cmp	r0, #0
   38590:	strne	ip, [sp, #188]	; 0xbc
   38594:	ldr	r3, [sp, #32]
   38598:	cmp	r3, #0
   3859c:	beq	385b4 <__assert_fail@plt+0x25fc0>
   385a0:	ldr	r2, [sp, #32]
   385a4:	ldr	r1, [sp, #12]
   385a8:	ldr	r3, [r2]
   385ac:	add	r3, r3, r1
   385b0:	str	r3, [r2]
   385b4:	ldr	r3, [sp, #20]
   385b8:	cmn	r3, #1
   385bc:	beq	384c8 <__assert_fail@plt+0x25ed4>
   385c0:	cmn	r3, #2
   385c4:	beq	38a60 <__assert_fail@plt+0x2646c>
   385c8:	ldr	r3, [sp, #44]	; 0x2c
   385cc:	ldr	r2, [sp, #20]
   385d0:	ldrb	r3, [r3, #28]
   385d4:	str	r2, [sp, #240]	; 0xf0
   385d8:	ldr	r2, [sp, #76]	; 0x4c
   385dc:	lsr	r3, r3, #4
   385e0:	eor	r3, r3, #1
   385e4:	cmp	r2, #1
   385e8:	movls	r3, #0
   385ec:	andhi	r3, r3, #1
   385f0:	cmp	r3, #0
   385f4:	beq	38a0c <__assert_fail@plt+0x26418>
   385f8:	ldr	r3, [sp, #20]
   385fc:	ldr	r7, [sp, #248]	; 0xf8
   38600:	mov	r2, r3
   38604:	add	r0, sp, #148	; 0x94
   38608:	ldr	r1, [r7, r3, lsl #2]
   3860c:	bl	34eac <__assert_fail@plt+0x228b8>
   38610:	ldr	r3, [sp, #28]
   38614:	ldrb	r3, [r3, #88]	; 0x58
   38618:	tst	r3, #1
   3861c:	str	r0, [sp, #244]	; 0xf4
   38620:	beq	38f44 <__assert_fail@plt+0x26950>
   38624:	ldr	r3, [sp, #20]
   38628:	ldr	fp, [sp, #232]	; 0xe8
   3862c:	cmn	r3, #-1073741822	; 0xc0000002
   38630:	ldr	r9, [sp, #244]	; 0xf4
   38634:	bhi	38a9c <__assert_fail@plt+0x264a8>
   38638:	ldr	r3, [sp, #20]
   3863c:	add	r7, r3, #1
   38640:	lsl	r4, r7, #2
   38644:	mov	r0, r4
   38648:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3864c:	subs	r5, r0, #0
   38650:	beq	39280 <__assert_fail@plt+0x26c8c>
   38654:	ldr	r3, [fp, #76]	; 0x4c
   38658:	cmp	r3, #0
   3865c:	beq	38aa8 <__assert_fail@plt+0x264b4>
   38660:	mov	r0, r4
   38664:	bl	2fe38 <__assert_fail@plt+0x1d844>
   38668:	subs	r6, r0, #0
   3866c:	beq	391e0 <__assert_fail@plt+0x26bec>
   38670:	ldr	r4, [sp, #20]
   38674:	str	fp, [sp, #12]
   38678:	add	sl, sp, #300	; 0x12c
   3867c:	mov	fp, r7
   38680:	lsl	r8, fp, #2
   38684:	mov	r2, r8
   38688:	mov	r1, #0
   3868c:	mov	r0, r6
   38690:	bl	12378 <memset@plt>
   38694:	mov	r3, #0
   38698:	str	r5, [sp, #284]	; 0x11c
   3869c:	str	r6, [sp, #288]	; 0x120
   386a0:	str	r9, [sp, #292]	; 0x124
   386a4:	str	r4, [sp, #296]	; 0x128
   386a8:	add	r1, sp, #284	; 0x11c
   386ac:	str	r3, [sl]
   386b0:	str	r3, [sl, #4]
   386b4:	str	r3, [sl, #8]
   386b8:	add	r0, sp, #148	; 0x94
   386bc:	bl	37b64 <__assert_fail@plt+0x25570>
   386c0:	mov	r7, r0
   386c4:	ldr	r0, [sp, #308]	; 0x134
   386c8:	bl	2db68 <__assert_fail@plt+0x1b574>
   386cc:	cmp	r7, #0
   386d0:	bne	392b4 <__assert_fail@plt+0x26cc0>
   386d4:	ldr	r2, [r5]
   386d8:	cmp	r2, #0
   386dc:	bne	39200 <__assert_fail@plt+0x26c0c>
   386e0:	ldr	r2, [r6]
   386e4:	cmp	r2, #0
   386e8:	bne	39200 <__assert_fail@plt+0x26c0c>
   386ec:	ldr	r3, [sp, #248]	; 0xf8
   386f0:	sub	r8, r8, #4
   386f4:	add	r3, r3, r8
   386f8:	subs	r4, r4, #1
   386fc:	bcc	390b4 <__assert_fail@plt+0x26ac0>
   38700:	ldr	r1, [r3, #-4]!
   38704:	cmp	r1, #0
   38708:	beq	386f8 <__assert_fail@plt+0x26104>
   3870c:	ldrb	r2, [r1, #52]	; 0x34
   38710:	tst	r2, #16
   38714:	beq	386f8 <__assert_fail@plt+0x26104>
   38718:	mov	r2, r4
   3871c:	add	r0, sp, #148	; 0x94
   38720:	bl	34eac <__assert_fail@plt+0x228b8>
   38724:	add	fp, r4, #1
   38728:	mov	r9, r0
   3872c:	b	38680 <__assert_fail@plt+0x2608c>
   38730:	ldr	r5, [sp, #188]	; 0xbc
   38734:	mov	r1, r4
   38738:	mov	r2, r5
   3873c:	add	r0, sp, #148	; 0x94
   38740:	bl	34eac <__assert_fail@plt+0x228b8>
   38744:	cmp	r0, #0
   38748:	beq	383d4 <__assert_fail@plt+0x25de0>
   3874c:	str	r5, [sp, #20]
   38750:	b	38494 <__assert_fail@plt+0x25ea0>
   38754:	mov	r2, #0
   38758:	add	r1, sp, #148	; 0x94
   3875c:	add	r0, sp, #124	; 0x7c
   38760:	str	ip, [sp, #188]	; 0xbc
   38764:	bl	379e8 <__assert_fail@plt+0x253f4>
   38768:	ldr	r3, [sp, #124]	; 0x7c
   3876c:	cmp	r3, #0
   38770:	bne	3929c <__assert_fail@plt+0x26ca8>
   38774:	cmp	r0, #0
   38778:	bne	392ac <__assert_fail@plt+0x26cb8>
   3877c:	ldr	r2, [sp, #248]	; 0xf8
   38780:	b	38554 <__assert_fail@plt+0x25f60>
   38784:	ldr	r3, [fp, #8]
   38788:	ldr	sl, [sp, #232]	; 0xe8
   3878c:	cmp	r3, #0
   38790:	ble	3887c <__assert_fail@plt+0x26288>
   38794:	add	r2, sl, #128	; 0x80
   38798:	str	r9, [sp, #64]	; 0x40
   3879c:	mov	r4, #0
   387a0:	str	r2, [sp, #24]
   387a4:	mov	r9, r3
   387a8:	b	38810 <__assert_fail@plt+0x2621c>
   387ac:	tst	r0, #1
   387b0:	beq	38804 <__assert_fail@plt+0x26210>
   387b4:	tst	r6, #8
   387b8:	bne	38804 <__assert_fail@plt+0x26210>
   387bc:	tst	r6, #32
   387c0:	beq	387cc <__assert_fail@plt+0x261d8>
   387c4:	tst	r0, #2
   387c8:	beq	38804 <__assert_fail@plt+0x26210>
   387cc:	tst	r6, #128	; 0x80
   387d0:	beq	387dc <__assert_fail@plt+0x261e8>
   387d4:	tst	r0, #8
   387d8:	beq	38804 <__assert_fail@plt+0x26210>
   387dc:	str	r5, [sp]
   387e0:	mov	r0, r8
   387e4:	add	r3, sp, #148	; 0x94
   387e8:	mov	r2, r7
   387ec:	ldr	r1, [sp, #24]
   387f0:	bl	36828 <__assert_fail@plt+0x24234>
   387f4:	cmp	r0, #0
   387f8:	bne	38888 <__assert_fail@plt+0x26294>
   387fc:	ldr	r5, [sp, #188]	; 0xbc
   38800:	ldr	r9, [fp, #8]
   38804:	add	r4, r4, #1
   38808:	cmp	r4, r9
   3880c:	bge	38878 <__assert_fail@plt+0x26284>
   38810:	ldr	r2, [fp, #12]
   38814:	ldr	r8, [sl]
   38818:	ldr	r7, [r2, r4, lsl #2]
   3881c:	add	r2, r8, r7, lsl #3
   38820:	ldrb	r1, [r2, #6]
   38824:	tst	r1, #16
   38828:	beq	38804 <__assert_fail@plt+0x26210>
   3882c:	ldr	r6, [r2, #4]
   38830:	ldr	r3, [pc, #2164]	; 390ac <__assert_fail@plt+0x26ab8>
   38834:	tst	r6, r3
   38838:	beq	387dc <__assert_fail@plt+0x261e8>
   3883c:	ldr	r2, [sp, #236]	; 0xec
   38840:	mov	r1, r5
   38844:	add	r0, sp, #148	; 0x94
   38848:	bl	34c8c <__assert_fail@plt+0x22698>
   3884c:	ldr	r3, [pc, #2140]	; 390b0 <__assert_fail@plt+0x26abc>
   38850:	and	r6, r3, r6, lsr #8
   38854:	tst	r6, #4
   38858:	bne	387ac <__assert_fail@plt+0x261b8>
   3885c:	tst	r6, #8
   38860:	beq	387bc <__assert_fail@plt+0x261c8>
   38864:	tst	r0, #1
   38868:	beq	387bc <__assert_fail@plt+0x261c8>
   3886c:	add	r4, r4, #1
   38870:	cmp	r4, r9
   38874:	blt	38810 <__assert_fail@plt+0x2621c>
   38878:	ldr	r9, [sp, #64]	; 0x40
   3887c:	mov	r3, #0
   38880:	str	r3, [sp, #124]	; 0x7c
   38884:	b	3840c <__assert_fail@plt+0x25e18>
   38888:	ldr	r3, [sp, #268]	; 0x10c
   3888c:	ldr	r6, [sp, #188]	; 0xbc
   38890:	cmp	r3, r0
   38894:	add	r6, r0, r6
   38898:	movlt	r3, r0
   3889c:	mov	r1, r6
   388a0:	add	r0, sp, #148	; 0x94
   388a4:	str	r3, [sp, #268]	; 0x10c
   388a8:	bl	322c4 <__assert_fail@plt+0x1fcd0>
   388ac:	cmp	r0, #0
   388b0:	str	r0, [sp, #136]	; 0x88
   388b4:	bne	389f0 <__assert_fail@plt+0x263fc>
   388b8:	ldr	r3, [sl, #12]
   388bc:	ldr	r8, [sp, #248]	; 0xf8
   388c0:	ldr	r2, [sl, #24]
   388c4:	ldr	r3, [r3, r7, lsl #2]
   388c8:	ldr	r1, [r8, r6, lsl #2]
   388cc:	add	r3, r3, r3, lsl #1
   388d0:	cmp	r1, #0
   388d4:	add	r2, r2, r3, lsl #2
   388d8:	beq	389b8 <__assert_fail@plt+0x263c4>
   388dc:	ldr	r1, [r1, #40]	; 0x28
   388e0:	add	r0, sp, #284	; 0x11c
   388e4:	bl	32e4c <__assert_fail@plt+0x20858>
   388e8:	cmp	r0, #0
   388ec:	str	r0, [sp, #136]	; 0x88
   388f0:	bne	389f0 <__assert_fail@plt+0x263fc>
   388f4:	ldr	r2, [sp, #236]	; 0xec
   388f8:	sub	r1, r6, #1
   388fc:	add	r0, sp, #148	; 0x94
   38900:	bl	34c8c <__assert_fail@plt+0x22698>
   38904:	add	r2, sp, #284	; 0x11c
   38908:	mov	r1, sl
   3890c:	ldr	r7, [sp, #248]	; 0xf8
   38910:	mov	r3, r0
   38914:	add	r0, sp, #136	; 0x88
   38918:	bl	32f98 <__assert_fail@plt+0x209a4>
   3891c:	str	r0, [r7, r6, lsl #2]
   38920:	ldr	r0, [sp, #292]	; 0x124
   38924:	bl	2db68 <__assert_fail@plt+0x1b574>
   38928:	ldr	r7, [sp, #248]	; 0xf8
   3892c:	ldr	r3, [r7, r6, lsl #2]
   38930:	cmp	r3, #0
   38934:	bne	387fc <__assert_fail@plt+0x26208>
   38938:	ldr	r0, [sp, #136]	; 0x88
   3893c:	cmp	r0, #0
   38940:	beq	387fc <__assert_fail@plt+0x26208>
   38944:	ldr	r9, [sp, #64]	; 0x40
   38948:	b	389f8 <__assert_fail@plt+0x26404>
   3894c:	ldr	r2, [sp, #196]	; 0xc4
   38950:	cmp	r3, r2
   38954:	bge	383f4 <__assert_fail@plt+0x25e00>
   38958:	add	r1, r5, #2
   3895c:	add	r0, sp, #148	; 0x94
   38960:	bl	31810 <__assert_fail@plt+0x1f21c>
   38964:	cmp	r0, #0
   38968:	str	r0, [sp, #124]	; 0x7c
   3896c:	bne	38a60 <__assert_fail@plt+0x2646c>
   38970:	ldr	r5, [sp, #188]	; 0xbc
   38974:	b	38400 <__assert_fail@plt+0x25e0c>
   38978:	ldr	r5, [fp, #48]	; 0x30
   3897c:	cmp	r5, #0
   38980:	beq	390e8 <__assert_fail@plt+0x26af4>
   38984:	ldr	r1, [sp, #188]	; 0xbc
   38988:	ldr	r2, [sp, #236]	; 0xec
   3898c:	sub	r1, r1, #1
   38990:	add	r0, sp, #148	; 0x94
   38994:	bl	34c8c <__assert_fail@plt+0x22698>
   38998:	tst	r0, #1
   3899c:	addne	r4, r4, #256	; 0x100
   389a0:	ldr	r4, [r5, r4, lsl #2]
   389a4:	b	3842c <__assert_fail@plt+0x25e38>
   389a8:	ldr	r2, [sp, #196]	; 0xc4
   389ac:	cmp	r3, r2
   389b0:	bge	38400 <__assert_fail@plt+0x25e0c>
   389b4:	b	38958 <__assert_fail@plt+0x26364>
   389b8:	ldm	r2, {r0, r1, r2}
   389bc:	add	r3, sp, #284	; 0x11c
   389c0:	stm	r3, {r0, r1, r2}
   389c4:	sub	r1, r6, #1
   389c8:	ldr	r2, [sp, #236]	; 0xec
   389cc:	add	r0, sp, #148	; 0x94
   389d0:	bl	34c8c <__assert_fail@plt+0x22698>
   389d4:	add	r2, sp, #284	; 0x11c
   389d8:	mov	r1, sl
   389dc:	mov	r3, r0
   389e0:	add	r0, sp, #136	; 0x88
   389e4:	bl	32f98 <__assert_fail@plt+0x209a4>
   389e8:	str	r0, [r8, r6, lsl #2]
   389ec:	b	38928 <__assert_fail@plt+0x26334>
   389f0:	ldr	r9, [sp, #64]	; 0x40
   389f4:	ldr	r7, [sp, #248]	; 0xf8
   389f8:	cmp	r7, #0
   389fc:	str	r0, [sp, #124]	; 0x7c
   38a00:	beq	38a9c <__assert_fail@plt+0x264a8>
   38a04:	mov	r4, #0
   38a08:	b	38438 <__assert_fail@plt+0x25e44>
   38a0c:	ldr	r3, [sp, #28]
   38a10:	ldr	r7, [sp, #248]	; 0xf8
   38a14:	ldr	r4, [r3, #76]	; 0x4c
   38a18:	cmp	r4, #0
   38a1c:	beq	38b20 <__assert_fail@plt+0x2652c>
   38a20:	ldr	r3, [sp, #20]
   38a24:	add	r0, sp, #148	; 0x94
   38a28:	mov	r2, r3
   38a2c:	ldr	r1, [r7, r3, lsl #2]
   38a30:	bl	34eac <__assert_fail@plt+0x228b8>
   38a34:	str	r0, [sp, #244]	; 0xf4
   38a38:	b	38f4c <__assert_fail@plt+0x26958>
   38a3c:	tst	r0, #4
   38a40:	beq	3837c <__assert_fail@plt+0x25d88>
   38a44:	mov	r3, r0
   38a48:	ldr	r2, [fp, #40]	; 0x28
   38a4c:	mov	r1, r4
   38a50:	add	r0, sp, #124	; 0x7c
   38a54:	bl	32f98 <__assert_fail@plt+0x209a4>
   38a58:	subs	fp, r0, #0
   38a5c:	bne	3837c <__assert_fail@plt+0x25d88>
   38a60:	ldr	r7, [sp, #248]	; 0xf8
   38a64:	mov	r3, #12
   38a68:	str	r3, [sp, #48]	; 0x30
   38a6c:	mov	r0, r7
   38a70:	bl	2db68 <__assert_fail@plt+0x1b574>
   38a74:	ldr	r3, [sp, #28]
   38a78:	ldr	r3, [r3, #76]	; 0x4c
   38a7c:	cmp	r3, #0
   38a80:	bne	3908c <__assert_fail@plt+0x26a98>
   38a84:	add	r0, sp, #148	; 0x94
   38a88:	bl	31c40 <__assert_fail@plt+0x1f64c>
   38a8c:	ldr	r0, [sp, #48]	; 0x30
   38a90:	add	sp, sp, #428	; 0x1ac
   38a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38a98:	mov	r7, r0
   38a9c:	mov	r3, #12
   38aa0:	str	r3, [sp, #48]	; 0x30
   38aa4:	b	38a6c <__assert_fail@plt+0x26478>
   38aa8:	ldr	r2, [sp, #20]
   38aac:	add	r1, sp, #284	; 0x11c
   38ab0:	add	r0, sp, #148	; 0x94
   38ab4:	str	r3, [sp, #288]	; 0x120
   38ab8:	str	r2, [sp, #296]	; 0x128
   38abc:	str	r3, [sp, #300]	; 0x12c
   38ac0:	str	r3, [sp, #304]	; 0x130
   38ac4:	str	r3, [sp, #308]	; 0x134
   38ac8:	str	r5, [sp, #284]	; 0x11c
   38acc:	str	r9, [sp, #292]	; 0x124
   38ad0:	bl	37b64 <__assert_fail@plt+0x25570>
   38ad4:	mov	r8, r0
   38ad8:	ldr	r0, [sp, #308]	; 0x134
   38adc:	bl	2db68 <__assert_fail@plt+0x1b574>
   38ae0:	cmp	r8, #0
   38ae4:	bne	39234 <__assert_fail@plt+0x26c40>
   38ae8:	ldr	r3, [r5]
   38aec:	cmp	r3, #0
   38af0:	beq	384b8 <__assert_fail@plt+0x25ec4>
   38af4:	ldr	r0, [sp, #248]	; 0xf8
   38af8:	bl	2db68 <__assert_fail@plt+0x1b574>
   38afc:	ldr	r3, [sp, #20]
   38b00:	mov	r0, #0
   38b04:	str	r3, [sp, #240]	; 0xf0
   38b08:	str	r5, [sp, #248]	; 0xf8
   38b0c:	str	r9, [sp, #244]	; 0xf4
   38b10:	bl	2db68 <__assert_fail@plt+0x1b574>
   38b14:	mov	r0, #0
   38b18:	bl	2db68 <__assert_fail@plt+0x1b574>
   38b1c:	ldr	r7, [sp, #248]	; 0xf8
   38b20:	ldr	r3, [sp, #76]	; 0x4c
   38b24:	cmp	r3, #0
   38b28:	beq	38a6c <__assert_fail@plt+0x26478>
   38b2c:	cmp	r3, #1
   38b30:	bls	38b58 <__assert_fail@plt+0x26564>
   38b34:	ldr	r3, [sp, #76]	; 0x4c
   38b38:	mvn	r1, #0
   38b3c:	sub	r2, r3, #-536870911	; 0xe0000001
   38b40:	ldr	r3, [sp, #476]	; 0x1dc
   38b44:	add	r2, r3, r2, lsl #3
   38b48:	str	r1, [r3, #12]
   38b4c:	str	r1, [r3, #8]!
   38b50:	cmp	r2, r3
   38b54:	bne	38b48 <__assert_fail@plt+0x26554>
   38b58:	ldr	r3, [sp, #44]	; 0x2c
   38b5c:	ldr	r1, [sp, #476]	; 0x1dc
   38b60:	ldr	r2, [sp, #240]	; 0xf0
   38b64:	ldrb	r3, [r3, #28]
   38b68:	str	r2, [r1, #4]
   38b6c:	ldr	r2, [sp, #76]	; 0x4c
   38b70:	mov	r4, #0
   38b74:	lsr	r3, r3, #4
   38b78:	eor	r3, r3, #1
   38b7c:	cmp	r2, #1
   38b80:	moveq	r3, #0
   38b84:	andne	r3, r3, #1
   38b88:	cmp	r3, #0
   38b8c:	mov	r3, r1
   38b90:	moveq	r3, r2
   38b94:	str	r4, [r1]
   38b98:	lsleq	r3, r3, #3
   38b9c:	streq	r3, [sp, #20]
   38ba0:	beq	38d5c <__assert_fail@plt+0x26768>
   38ba4:	ldr	r2, [sp, #28]
   38ba8:	ldrb	r3, [r2, #88]	; 0x58
   38bac:	tst	r3, #1
   38bb0:	beq	39494 <__assert_fail@plt+0x26ea0>
   38bb4:	ldr	r3, [r2, #76]	; 0x4c
   38bb8:	cmp	r3, #0
   38bbc:	ble	39494 <__assert_fail@plt+0x26ea0>
   38bc0:	ldr	r1, [sp, #44]	; 0x2c
   38bc4:	mov	r2, #2
   38bc8:	mov	r3, #16
   38bcc:	ldr	r1, [r1]
   38bd0:	add	r8, sp, #296	; 0x128
   38bd4:	mov	r0, #48	; 0x30
   38bd8:	str	r1, [sp, #24]
   38bdc:	str	r4, [sp, #136]	; 0x88
   38be0:	str	r4, [sp, #144]	; 0x90
   38be4:	str	r4, [sp, #284]	; 0x11c
   38be8:	str	r2, [sp, #140]	; 0x8c
   38bec:	str	r3, [sp, #288]	; 0x120
   38bf0:	str	r8, [sp, #292]	; 0x124
   38bf4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   38bf8:	cmp	r0, #0
   38bfc:	str	r0, [sp, #144]	; 0x90
   38c00:	beq	39740 <__assert_fail@plt+0x2714c>
   38c04:	ldr	r3, [sp, #284]	; 0x11c
   38c08:	ldr	r2, [sp, #76]	; 0x4c
   38c0c:	add	r9, sp, #124	; 0x7c
   38c10:	cmp	r2, r3
   38c14:	ldr	r3, [sp, #24]
   38c18:	ldr	fp, [r3, #72]	; 0x48
   38c1c:	str	r4, [sp, #124]	; 0x7c
   38c20:	str	r4, [r9, #4]
   38c24:	str	r4, [r9, #8]
   38c28:	bhi	39738 <__assert_fail@plt+0x27144>
   38c2c:	ldr	r3, [sp, #76]	; 0x4c
   38c30:	add	sl, sp, #136	; 0x88
   38c34:	str	r3, [sp, #284]	; 0x11c
   38c38:	ldr	r5, [sp, #76]	; 0x4c
   38c3c:	ldr	r3, [sp, #292]	; 0x124
   38c40:	ldr	r1, [sp, #476]	; 0x1dc
   38c44:	mov	r0, r3
   38c48:	str	r3, [sp, #16]
   38c4c:	lsl	r3, r5, #3
   38c50:	mov	r2, r3
   38c54:	str	r3, [sp, #20]
   38c58:	bl	12024 <memcpy@plt>
   38c5c:	add	r3, sp, #424	; 0x1a8
   38c60:	mov	r2, r3
   38c64:	ldr	r3, [sp, #476]	; 0x1dc
   38c68:	str	r8, [sp, #12]
   38c6c:	mov	r8, r5
   38c70:	ldr	r4, [r3]
   38c74:	lsl	r1, r5, #4
   38c78:	str	r4, [r2, #-304]!	; 0xfffffed0
   38c7c:	str	r1, [sp, #44]	; 0x2c
   38c80:	str	r2, [sp, #40]	; 0x28
   38c84:	ldr	r3, [sp, #476]	; 0x1dc
   38c88:	ldr	r3, [r3, #4]
   38c8c:	cmp	r4, r3
   38c90:	bgt	38d18 <__assert_fail@plt+0x26724>
   38c94:	ldr	r2, [sp, #24]
   38c98:	lsl	r6, fp, #3
   38c9c:	mov	r7, fp
   38ca0:	ldr	r0, [r2]
   38ca4:	add	r1, r0, r6
   38ca8:	ldrb	r2, [r1, #4]
   38cac:	cmp	r2, #8
   38cb0:	beq	39588 <__assert_fail@plt+0x26f94>
   38cb4:	cmp	r2, #9
   38cb8:	beq	39538 <__assert_fail@plt+0x26f44>
   38cbc:	cmp	r3, r4
   38cc0:	beq	3947c <__assert_fail@plt+0x26e88>
   38cc4:	cmp	sl, #0
   38cc8:	beq	39318 <__assert_fail@plt+0x26d24>
   38ccc:	mov	r2, fp
   38cd0:	add	r1, sp, #132	; 0x84
   38cd4:	ldr	r0, [sp, #128]	; 0x80
   38cd8:	bl	3247c <__assert_fail@plt+0x1fe88>
   38cdc:	cmp	r0, #0
   38ce0:	beq	39318 <__assert_fail@plt+0x26d24>
   38ce4:	ldr	r2, [sp, #476]	; 0x1dc
   38ce8:	mov	r3, #0
   38cec:	ldr	r1, [sp, #476]	; 0x1dc
   38cf0:	ldr	r1, [r1, r3, lsl #3]
   38cf4:	add	r3, r3, #1
   38cf8:	cmp	r1, #0
   38cfc:	blt	38d0c <__assert_fail@plt+0x26718>
   38d00:	ldr	r1, [r2, #4]
   38d04:	cmn	r1, #1
   38d08:	beq	392e8 <__assert_fail@plt+0x26cf4>
   38d0c:	cmp	r8, r3
   38d10:	add	r2, r2, #8
   38d14:	bne	38cec <__assert_fail@plt+0x266f8>
   38d18:	ldr	r0, [sp, #132]	; 0x84
   38d1c:	ldr	r8, [sp, #12]
   38d20:	bl	2db68 <__assert_fail@plt+0x1b574>
   38d24:	ldr	r0, [sp, #292]	; 0x124
   38d28:	cmp	r0, r8
   38d2c:	beq	38d34 <__assert_fail@plt+0x26740>
   38d30:	bl	2db68 <__assert_fail@plt+0x1b574>
   38d34:	mov	r2, #0
   38d38:	mov	r3, #16
   38d3c:	mov	r0, sl
   38d40:	str	r8, [sp, #292]	; 0x124
   38d44:	str	r2, [sp, #284]	; 0x11c
   38d48:	str	r3, [sp, #288]	; 0x120
   38d4c:	bl	31e88 <__assert_fail@plt+0x1f894>
   38d50:	cmp	r0, #0
   38d54:	bne	392bc <__assert_fail@plt+0x26cc8>
   38d58:	ldr	r7, [sp, #248]	; 0xf8
   38d5c:	ldr	r3, [sp, #476]	; 0x1dc
   38d60:	ldr	r2, [sp, #20]
   38d64:	ldrb	r6, [sp, #224]	; 0xe0
   38d68:	ldr	r5, [sp, #176]	; 0xb0
   38d6c:	ldr	r8, [sp, #160]	; 0xa0
   38d70:	ldr	r9, [sp, #180]	; 0xb4
   38d74:	ldr	lr, [sp, #116]	; 0x74
   38d78:	add	r4, r3, r2
   38d7c:	mov	ip, r3
   38d80:	add	r1, r3, #4
   38d84:	ldr	r2, [r1, #-4]
   38d88:	cmn	r2, #1
   38d8c:	beq	38dac <__assert_fail@plt+0x267b8>
   38d90:	cmp	r6, #0
   38d94:	bne	39454 <__assert_fail@plt+0x26e60>
   38d98:	ldr	r0, [r3, #4]
   38d9c:	add	r2, lr, r2
   38da0:	add	r0, lr, r0
   38da4:	str	r2, [r1, #-4]
   38da8:	str	r0, [r3, #4]
   38dac:	add	r3, r3, #8
   38db0:	cmp	r4, r3
   38db4:	add	r1, r1, #8
   38db8:	bne	38d84 <__assert_fail@plt+0x26790>
   38dbc:	ldr	r2, [sp, #96]	; 0x60
   38dc0:	cmp	r2, #0
   38dc4:	ble	38df4 <__assert_fail@plt+0x26800>
   38dc8:	ldr	r2, [sp, #96]	; 0x60
   38dcc:	ldr	r1, [sp, #76]	; 0x4c
   38dd0:	ldr	r0, [sp, #476]	; 0x1dc
   38dd4:	add	r1, r2, r1
   38dd8:	mvn	r2, #0
   38ddc:	add	r1, r0, r1, lsl #3
   38de0:	str	r2, [r3]
   38de4:	str	r2, [r3, #4]
   38de8:	add	r3, r3, #8
   38dec:	cmp	r3, r1
   38df0:	bne	38de0 <__assert_fail@plt+0x267ec>
   38df4:	ldr	r3, [sp, #28]
   38df8:	ldr	r3, [r3, #132]	; 0x84
   38dfc:	cmp	r3, #0
   38e00:	beq	38a6c <__assert_fail@plt+0x26478>
   38e04:	mov	r2, #0
   38e08:	ldr	lr, [sp, #76]	; 0x4c
   38e0c:	b	38e4c <__assert_fail@plt+0x26858>
   38e10:	ldr	r0, [r3]
   38e14:	cmp	r2, r0
   38e18:	add	r4, r0, #1
   38e1c:	mov	r2, r1
   38e20:	beq	38e44 <__assert_fail@plt+0x26850>
   38e24:	ldr	r1, [sp, #476]	; 0x1dc
   38e28:	ldr	r0, [sp, #476]	; 0x1dc
   38e2c:	ldr	r1, [r1, r4, lsl #3]
   38e30:	str	r1, [ip, #8]
   38e34:	ldr	r1, [r3]
   38e38:	add	r1, r0, r1, lsl #3
   38e3c:	ldr	r1, [r1, #12]
   38e40:	str	r1, [ip, #12]
   38e44:	add	r3, r3, #4
   38e48:	add	ip, ip, #8
   38e4c:	add	r1, r2, #1
   38e50:	cmp	r1, lr
   38e54:	bne	38e10 <__assert_fail@plt+0x2681c>
   38e58:	b	38a6c <__assert_fail@plt+0x26478>
   38e5c:	ldr	r3, [sp, #52]	; 0x34
   38e60:	cmp	r3, r6
   38e64:	ble	382c0 <__assert_fail@plt+0x25ccc>
   38e68:	ldr	r3, [sp, #56]	; 0x38
   38e6c:	ldr	r1, [sp, #88]	; 0x58
   38e70:	ldrb	r2, [r3, r6]
   38e74:	add	r3, r3, r6
   38e78:	ldrb	r2, [r1, r2]
   38e7c:	ldr	r1, [sp, #60]	; 0x3c
   38e80:	ldrb	r2, [r1, r2]
   38e84:	cmp	r2, #0
   38e88:	bne	38308 <__assert_fail@plt+0x25d14>
   38e8c:	add	r2, r6, #1
   38e90:	ldr	ip, [sp, #60]	; 0x3c
   38e94:	ldr	lr, [sp, #88]	; 0x58
   38e98:	ldr	r0, [sp, #52]	; 0x34
   38e9c:	b	38eb8 <__assert_fail@plt+0x268c4>
   38ea0:	ldrb	r1, [r3, #1]!
   38ea4:	add	r2, r2, #1
   38ea8:	ldrb	r1, [lr, r1]
   38eac:	ldrb	r1, [ip, r1]
   38eb0:	cmp	r1, #0
   38eb4:	bne	3914c <__assert_fail@plt+0x26b58>
   38eb8:	cmp	r0, r2
   38ebc:	mov	r6, r2
   38ec0:	bne	38ea0 <__assert_fail@plt+0x268ac>
   38ec4:	b	382b8 <__assert_fail@plt+0x25cc4>
   38ec8:	ldr	r3, [sp, #68]	; 0x44
   38ecc:	cmp	r3, r6
   38ed0:	bgt	38504 <__assert_fail@plt+0x25f10>
   38ed4:	ldr	ip, [sp, #116]	; 0x74
   38ed8:	ldr	r1, [sp, #108]	; 0x6c
   38edc:	mov	r0, ip
   38ee0:	ldr	r4, [sp, #60]	; 0x3c
   38ee4:	ldr	lr, [sp, #88]	; 0x58
   38ee8:	ldr	r7, [sp, #68]	; 0x44
   38eec:	ldr	r8, [sp, #56]	; 0x38
   38ef0:	ldr	r5, [sp, #72]	; 0x48
   38ef4:	b	38f08 <__assert_fail@plt+0x26914>
   38ef8:	cmp	r7, r6
   38efc:	mov	r0, r6
   38f00:	mov	r1, #1
   38f04:	bgt	39154 <__assert_fail@plt+0x26b60>
   38f08:	cmp	r5, r6
   38f0c:	mov	r3, #0
   38f10:	ldrbgt	r3, [r8, r6]
   38f14:	cmp	lr, #0
   38f18:	sub	r6, r6, #1
   38f1c:	mov	r2, r3
   38f20:	ldrbne	r2, [lr, r3]
   38f24:	ldrb	r3, [r4, r2]
   38f28:	cmp	r3, #0
   38f2c:	beq	38ef8 <__assert_fail@plt+0x26904>
   38f30:	cmp	r1, #0
   38f34:	movne	ip, r0
   38f38:	strne	r0, [sp, #116]	; 0x74
   38f3c:	mov	r6, ip
   38f40:	b	38308 <__assert_fail@plt+0x25d14>
   38f44:	ldr	r3, [sp, #28]
   38f48:	ldr	r4, [r3, #76]	; 0x4c
   38f4c:	cmp	r4, #0
   38f50:	bne	38624 <__assert_fail@plt+0x26030>
   38f54:	b	38b20 <__assert_fail@plt+0x2652c>
   38f58:	ldr	r1, [sp, #72]	; 0x48
   38f5c:	b	38074 <__assert_fail@plt+0x25a80>
   38f60:	cmp	sl, #0
   38f64:	beq	396b4 <__assert_fail@plt+0x270c0>
   38f68:	ldr	r3, [sp, #16]
   38f6c:	str	r9, [sp, #4]
   38f70:	str	r3, [sp]
   38f74:	mov	r2, r8
   38f78:	ldr	r3, [sp, #476]	; 0x1dc
   38f7c:	ldr	r1, [sp, #40]	; 0x28
   38f80:	mov	r0, sl
   38f84:	bl	32358 <__assert_fail@plt+0x1fd64>
   38f88:	subs	fp, r0, #0
   38f8c:	bge	393c8 <__assert_fail@plt+0x26dd4>
   38f90:	ldr	r0, [sp, #132]	; 0x84
   38f94:	ldr	r8, [sp, #12]
   38f98:	bl	2db68 <__assert_fail@plt+0x1b574>
   38f9c:	ldr	r0, [sp, #292]	; 0x124
   38fa0:	cmp	r0, r8
   38fa4:	beq	38fac <__assert_fail@plt+0x269b8>
   38fa8:	bl	2db68 <__assert_fail@plt+0x1b574>
   38fac:	mov	r3, #16
   38fb0:	mov	r2, #0
   38fb4:	str	r3, [sp, #288]	; 0x120
   38fb8:	mov	r0, sl
   38fbc:	mov	r3, #1
   38fc0:	str	r8, [sp, #292]	; 0x124
   38fc4:	str	r2, [sp, #284]	; 0x11c
   38fc8:	str	r3, [sp, #48]	; 0x30
   38fcc:	bl	31e88 <__assert_fail@plt+0x1f894>
   38fd0:	ldr	r7, [sp, #248]	; 0xf8
   38fd4:	b	38a6c <__assert_fail@plt+0x26478>
   38fd8:	ldr	r1, [sp, #172]	; 0xac
   38fdc:	ldr	r4, [sp, #60]	; 0x3c
   38fe0:	ldr	r5, [sp, #92]	; 0x5c
   38fe4:	ldr	r7, [sp, #68]	; 0x44
   38fe8:	ldr	r8, [sp, #52]	; 0x34
   38fec:	b	39034 <__assert_fail@plt+0x26a40>
   38ff0:	ldr	r0, [sp, #176]	; 0xb0
   38ff4:	mov	r2, #0
   38ff8:	cmp	r3, r0
   38ffc:	ldrcc	r2, [sp, #152]	; 0x98
   39000:	ldrbcc	r2, [r2, r3]
   39004:	ldrb	r3, [r4, r2]
   39008:	cmp	r3, #0
   3900c:	bne	38308 <__assert_fail@plt+0x25d14>
   39010:	add	r6, r6, r5
   39014:	cmp	r8, r6
   39018:	movge	r3, #0
   3901c:	movlt	r3, #1
   39020:	cmp	r7, r6
   39024:	orrgt	r3, r3, #1
   39028:	cmp	r3, #0
   3902c:	str	r6, [sp, #116]	; 0x74
   39030:	bne	38504 <__assert_fail@plt+0x25f10>
   39034:	ldr	r2, [sp, #180]	; 0xb4
   39038:	sub	r3, r6, r1
   3903c:	cmp	r3, r2
   39040:	bcc	38ff0 <__assert_fail@plt+0x269fc>
   39044:	ldr	r2, [sp, #480]	; 0x1e0
   39048:	mov	r1, r6
   3904c:	add	r0, sp, #148	; 0x94
   39050:	bl	34f8c <__assert_fail@plt+0x22998>
   39054:	cmp	r0, #0
   39058:	bne	392bc <__assert_fail@plt+0x26cc8>
   3905c:	ldr	r1, [sp, #172]	; 0xac
   39060:	sub	r3, r6, r1
   39064:	b	38ff0 <__assert_fail@plt+0x269fc>
   39068:	ldr	r3, [sp, #12]
   3906c:	ldr	r2, [sp, #236]	; 0xec
   39070:	sub	r1, r3, #1
   39074:	add	r0, sp, #148	; 0x94
   39078:	bl	34c8c <__assert_fail@plt+0x22698>
   3907c:	tst	r0, #1
   39080:	beq	39124 <__assert_fail@plt+0x26b30>
   39084:	ldr	fp, [r4, #40]	; 0x28
   39088:	b	3837c <__assert_fail@plt+0x25d88>
   3908c:	add	r0, sp, #148	; 0x94
   39090:	bl	31de4 <__assert_fail@plt+0x1f7f0>
   39094:	ldr	r0, [sp, #280]	; 0x118
   39098:	bl	2db68 <__assert_fail@plt+0x1b574>
   3909c:	ldr	r0, [sp, #264]	; 0x108
   390a0:	bl	2db68 <__assert_fail@plt+0x1b574>
   390a4:	b	38a84 <__assert_fail@plt+0x26490>
   390a8:	beq	feae3b58 <stdout@@GLIBC_2.4+0xfea8c604>
   390ac:	andeq	pc, r3, r0, lsl #30
   390b0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   390b4:	mov	r0, r5
   390b8:	bl	2db68 <__assert_fail@plt+0x1b574>
   390bc:	mov	r0, r6
   390c0:	bl	2db68 <__assert_fail@plt+0x1b574>
   390c4:	add	r0, sp, #148	; 0x94
   390c8:	bl	31de4 <__assert_fail@plt+0x1f7f0>
   390cc:	ldr	r6, [sp, #116]	; 0x74
   390d0:	b	384d4 <__assert_fail@plt+0x25ee0>
   390d4:	ldr	r3, [sp, #28]
   390d8:	ldrb	r3, [r3, #88]	; 0x58
   390dc:	tst	r3, #2
   390e0:	bne	38110 <__assert_fail@plt+0x25b1c>
   390e4:	b	38134 <__assert_fail@plt+0x25b40>
   390e8:	mov	r1, fp
   390ec:	ldr	r0, [sp, #232]	; 0xe8
   390f0:	bl	341f8 <__assert_fail@plt+0x21c04>
   390f4:	cmp	r0, #0
   390f8:	bne	3841c <__assert_fail@plt+0x25e28>
   390fc:	ldr	r7, [sp, #248]	; 0xf8
   39100:	mov	r3, #12
   39104:	cmp	r7, #0
   39108:	str	r3, [sp, #124]	; 0x7c
   3910c:	bne	38a04 <__assert_fail@plt+0x26410>
   39110:	b	38a9c <__assert_fail@plt+0x264a8>
   39114:	ldr	r3, [sp, #104]	; 0x68
   39118:	str	r3, [sp, #16]
   3911c:	ldrb	r3, [fp, #52]	; 0x34
   39120:	b	383a8 <__assert_fail@plt+0x25db4>
   39124:	cmp	r0, #0
   39128:	beq	3837c <__assert_fail@plt+0x25d88>
   3912c:	and	r3, r0, #6
   39130:	cmp	r3, #6
   39134:	ldreq	fp, [r4, #48]	; 0x30
   39138:	beq	3837c <__assert_fail@plt+0x25d88>
   3913c:	tst	r0, #2
   39140:	beq	38a3c <__assert_fail@plt+0x26448>
   39144:	ldr	fp, [r4, #44]	; 0x2c
   39148:	b	3837c <__assert_fail@plt+0x25d88>
   3914c:	str	r6, [sp, #116]	; 0x74
   39150:	b	38308 <__assert_fail@plt+0x25d14>
   39154:	str	r6, [sp, #116]	; 0x74
   39158:	ldr	r7, [sp, #248]	; 0xf8
   3915c:	str	r1, [sp, #48]	; 0x30
   39160:	b	38a6c <__assert_fail@plt+0x26478>
   39164:	ldrsb	r3, [fp, #52]	; 0x34
   39168:	cmp	r3, #0
   3916c:	blt	3925c <__assert_fail@plt+0x26c68>
   39170:	ldr	r3, [sp, #40]	; 0x28
   39174:	cmp	r3, #0
   39178:	ldr	r3, [sp, #12]
   3917c:	str	r3, [sp, #20]
   39180:	movne	r3, #1
   39184:	strne	r3, [sp, #36]	; 0x24
   39188:	bne	383c0 <__assert_fail@plt+0x25dcc>
   3918c:	b	385b4 <__assert_fail@plt+0x25fc0>
   39190:	ldr	r7, [sp, #248]	; 0xf8
   39194:	b	38a9c <__assert_fail@plt+0x264a8>
   39198:	mov	r3, #8
   3919c:	b	381d4 <__assert_fail@plt+0x25be0>
   391a0:	add	r4, fp, #8
   391a4:	add	r5, fp, #12
   391a8:	mov	r1, r4
   391ac:	mov	r2, r5
   391b0:	mov	r3, #0
   391b4:	add	r0, sp, #148	; 0x94
   391b8:	bl	3575c <__assert_fail@plt+0x23168>
   391bc:	cmp	r0, #0
   391c0:	str	r0, [sp, #124]	; 0x7c
   391c4:	bne	39278 <__assert_fail@plt+0x26c84>
   391c8:	ldrb	r3, [fp, #52]	; 0x34
   391cc:	tst	r3, #64	; 0x40
   391d0:	bne	392c4 <__assert_fail@plt+0x26cd0>
   391d4:	ldr	r2, [sp, #108]	; 0x6c
   391d8:	str	r2, [sp, #16]
   391dc:	b	383a8 <__assert_fail@plt+0x25db4>
   391e0:	mov	r0, r5
   391e4:	bl	2db68 <__assert_fail@plt+0x1b574>
   391e8:	mov	r0, r6
   391ec:	bl	2db68 <__assert_fail@plt+0x1b574>
   391f0:	mov	r3, #12
   391f4:	str	r3, [sp, #48]	; 0x30
   391f8:	ldr	r7, [sp, #248]	; 0xf8
   391fc:	b	38a6c <__assert_fail@plt+0x26478>
   39200:	mov	r7, fp
   39204:	ldr	fp, [sp, #12]
   39208:	mov	r3, r7
   3920c:	mov	r2, r6
   39210:	mov	r1, r5
   39214:	mov	r0, fp
   39218:	str	r4, [sp, #20]
   3921c:	bl	334bc <__assert_fail@plt+0x20ec8>
   39220:	mov	r8, r0
   39224:	mov	r0, r6
   39228:	bl	2db68 <__assert_fail@plt+0x1b574>
   3922c:	cmp	r8, #0
   39230:	beq	38af4 <__assert_fail@plt+0x26500>
   39234:	mov	r6, #0
   39238:	mov	r0, r5
   3923c:	bl	2db68 <__assert_fail@plt+0x1b574>
   39240:	mov	r0, r6
   39244:	bl	2db68 <__assert_fail@plt+0x1b574>
   39248:	cmp	r8, #1
   3924c:	beq	384c8 <__assert_fail@plt+0x25ed4>
   39250:	str	r8, [sp, #48]	; 0x30
   39254:	ldr	r7, [sp, #248]	; 0xf8
   39258:	b	38a6c <__assert_fail@plt+0x26478>
   3925c:	ldr	r2, [sp, #12]
   39260:	mov	r1, fp
   39264:	add	r0, sp, #148	; 0x94
   39268:	bl	34eac <__assert_fail@plt+0x228b8>
   3926c:	cmp	r0, #0
   39270:	beq	383b0 <__assert_fail@plt+0x25dbc>
   39274:	b	39170 <__assert_fail@plt+0x26b7c>
   39278:	str	r0, [sp, #20]
   3927c:	b	385b4 <__assert_fail@plt+0x25fc0>
   39280:	bl	2db68 <__assert_fail@plt+0x1b574>
   39284:	mov	r0, r5
   39288:	bl	2db68 <__assert_fail@plt+0x1b574>
   3928c:	mov	r3, #12
   39290:	str	r3, [sp, #48]	; 0x30
   39294:	ldr	r7, [sp, #248]	; 0xf8
   39298:	b	38a6c <__assert_fail@plt+0x26478>
   3929c:	cmp	r0, #0
   392a0:	mov	r4, r0
   392a4:	bne	38454 <__assert_fail@plt+0x25e60>
   392a8:	b	38594 <__assert_fail@plt+0x25fa0>
   392ac:	mov	r4, r0
   392b0:	b	38454 <__assert_fail@plt+0x25e60>
   392b4:	mov	r8, r7
   392b8:	b	39238 <__assert_fail@plt+0x26c44>
   392bc:	str	r0, [sp, #48]	; 0x30
   392c0:	b	38fd0 <__assert_fail@plt+0x269dc>
   392c4:	mov	r2, r5
   392c8:	mov	r1, r4
   392cc:	add	r0, sp, #148	; 0x94
   392d0:	bl	3724c <__assert_fail@plt+0x24c58>
   392d4:	cmp	r0, #0
   392d8:	str	r0, [sp, #124]	; 0x7c
   392dc:	bne	39278 <__assert_fail@plt+0x26c84>
   392e0:	ldrb	r3, [fp, #52]	; 0x34
   392e4:	b	391d4 <__assert_fail@plt+0x26be0>
   392e8:	ldr	r3, [sp, #16]
   392ec:	str	r9, [sp, #4]
   392f0:	str	r3, [sp]
   392f4:	mov	r2, r8
   392f8:	ldr	r3, [sp, #476]	; 0x1dc
   392fc:	ldr	r1, [sp, #40]	; 0x28
   39300:	mov	r0, sl
   39304:	bl	32358 <__assert_fail@plt+0x1fd64>
   39308:	subs	fp, r0, #0
   3930c:	blt	38d18 <__assert_fail@plt+0x26724>
   39310:	mov	r7, fp
   39314:	lsl	r6, fp, #3
   39318:	ldr	r5, [sp, #232]	; 0xe8
   3931c:	ldr	r0, [r5]
   39320:	add	r1, r0, r6
   39324:	ldrb	r3, [r1, #4]
   39328:	tst	r3, #8
   3932c:	beq	393d0 <__assert_fail@plt+0x26ddc>
   39330:	ldr	ip, [sp, #120]	; 0x78
   39334:	ldr	r3, [sp, #248]	; 0xf8
   39338:	mov	r2, fp
   3933c:	add	r1, sp, #132	; 0x84
   39340:	ldr	r0, [sp, #128]	; 0x80
   39344:	ldr	r4, [r3, ip, lsl #2]
   39348:	bl	3247c <__assert_fail@plt+0x1fe88>
   3934c:	ldr	r5, [r5, #20]
   39350:	cmp	r0, #0
   39354:	beq	39714 <__assert_fail@plt+0x27120>
   39358:	add	fp, fp, fp, lsl #1
   3935c:	add	r2, r5, fp, lsl #2
   39360:	ldr	r7, [r2, #4]
   39364:	cmp	r7, #0
   39368:	ble	38f68 <__assert_fail@plt+0x26974>
   3936c:	ldr	r3, [r4, #8]
   39370:	ldr	r5, [r2, #8]
   39374:	str	r3, [sp, #32]
   39378:	sub	r5, r5, #4
   3937c:	add	r3, r4, #12
   39380:	mvn	fp, #0
   39384:	mov	r4, #0
   39388:	str	r3, [sp, #36]	; 0x24
   3938c:	ldr	r6, [r5, #4]!
   39390:	ldr	r1, [sp, #36]	; 0x24
   39394:	mov	r2, r6
   39398:	ldr	r0, [sp, #32]
   3939c:	bl	3247c <__assert_fail@plt+0x1fe88>
   393a0:	add	r4, r4, #1
   393a4:	cmp	r0, #0
   393a8:	beq	393b8 <__assert_fail@plt+0x26dc4>
   393ac:	cmn	fp, #1
   393b0:	bne	3974c <__assert_fail@plt+0x27158>
   393b4:	mov	fp, r6
   393b8:	cmp	r4, r7
   393bc:	bne	3938c <__assert_fail@plt+0x26d98>
   393c0:	cmp	fp, #0
   393c4:	blt	3980c <__assert_fail@plt+0x27218>
   393c8:	ldr	r4, [sp, #120]	; 0x78
   393cc:	b	38c84 <__assert_fail@plt+0x26690>
   393d0:	ldrb	r2, [r1, #6]
   393d4:	tst	r2, #16
   393d8:	bne	3967c <__assert_fail@plt+0x27088>
   393dc:	cmp	r3, #4
   393e0:	beq	395f4 <__assert_fail@plt+0x27000>
   393e4:	ldr	r4, [sp, #120]	; 0x78
   393e8:	mov	r2, r4
   393ec:	add	r0, sp, #148	; 0x94
   393f0:	bl	34d78 <__assert_fail@plt+0x22784>
   393f4:	cmp	r0, #0
   393f8:	beq	38f68 <__assert_fail@plt+0x26974>
   393fc:	ldr	r3, [r5, #12]
   39400:	add	r4, r4, #1
   39404:	ldr	fp, [r3, r7, lsl #2]
   39408:	cmp	sl, #0
   3940c:	str	r4, [sp, #120]	; 0x78
   39410:	beq	39448 <__assert_fail@plt+0x26e54>
   39414:	ldr	r3, [sp, #240]	; 0xf0
   39418:	cmp	r4, r3
   3941c:	bgt	38f68 <__assert_fail@plt+0x26974>
   39420:	ldr	r3, [sp, #248]	; 0xf8
   39424:	ldr	r3, [r3, r4, lsl #2]
   39428:	cmp	r3, #0
   3942c:	beq	38f68 <__assert_fail@plt+0x26974>
   39430:	mov	r2, fp
   39434:	add	r1, r3, #12
   39438:	ldr	r0, [r3, #8]
   3943c:	bl	3247c <__assert_fail@plt+0x1fe88>
   39440:	cmp	r0, #0
   39444:	beq	38f68 <__assert_fail@plt+0x26974>
   39448:	mov	r3, #0
   3944c:	str	r3, [sp, #128]	; 0x80
   39450:	b	393c0 <__assert_fail@plt+0x26dcc>
   39454:	cmp	r2, r5
   39458:	moveq	r2, r9
   3945c:	ldrne	r2, [r8, r2, lsl #2]
   39460:	str	r2, [r1, #-4]
   39464:	ldr	r0, [r3, #4]
   39468:	cmp	r5, r0
   3946c:	moveq	r0, r9
   39470:	ldrne	r0, [r8, r0, lsl #2]
   39474:	str	r0, [r3, #4]
   39478:	b	38d9c <__assert_fail@plt+0x267a8>
   3947c:	ldr	r3, [sp, #244]	; 0xf4
   39480:	cmp	fp, r3
   39484:	bne	38cc4 <__assert_fail@plt+0x266d0>
   39488:	cmp	sl, #0
   3948c:	beq	38d18 <__assert_fail@plt+0x26724>
   39490:	b	38ce4 <__assert_fail@plt+0x266f0>
   39494:	ldr	r3, [sp, #44]	; 0x2c
   39498:	add	r9, sp, #124	; 0x7c
   3949c:	mov	r1, #16
   394a0:	ldr	r3, [r3]
   394a4:	add	r8, sp, #296	; 0x128
   394a8:	mov	r0, r3
   394ac:	str	r3, [sp, #24]
   394b0:	mov	r3, #0
   394b4:	mov	sl, r3
   394b8:	mov	r2, #2
   394bc:	str	r3, [sp, #284]	; 0x11c
   394c0:	str	r1, [sp, #288]	; 0x120
   394c4:	str	r8, [sp, #292]	; 0x124
   394c8:	str	r3, [sp, #136]	; 0x88
   394cc:	ldr	fp, [r0, #72]	; 0x48
   394d0:	str	r3, [sp, #144]	; 0x90
   394d4:	str	r3, [sp, #124]	; 0x7c
   394d8:	str	r2, [sp, #140]	; 0x8c
   394dc:	str	r3, [r9, #4]
   394e0:	str	r3, [r9, #8]
   394e4:	mov	r3, #8
   394e8:	mov	r2, r8
   394ec:	ldr	r1, [sp, #76]	; 0x4c
   394f0:	add	r0, sp, #284	; 0x11c
   394f4:	bl	3f184 <__assert_fail@plt+0x2cb90>
   394f8:	cmp	r0, #0
   394fc:	bne	38c38 <__assert_fail@plt+0x26644>
   39500:	ldr	r0, [sp, #292]	; 0x124
   39504:	cmp	r0, r8
   39508:	beq	39510 <__assert_fail@plt+0x26f1c>
   3950c:	bl	2db68 <__assert_fail@plt+0x1b574>
   39510:	mov	r3, #16
   39514:	mov	r2, #0
   39518:	str	r3, [sp, #288]	; 0x120
   3951c:	mov	r0, sl
   39520:	mov	r3, #12
   39524:	str	r8, [sp, #292]	; 0x124
   39528:	str	r2, [sp, #284]	; 0x11c
   3952c:	str	r3, [sp, #48]	; 0x30
   39530:	bl	31e88 <__assert_fail@plt+0x1f894>
   39534:	b	38fd0 <__assert_fail@plt+0x269dc>
   39538:	ldr	r2, [r1]
   3953c:	add	r2, r2, #1
   39540:	cmp	r8, r2
   39544:	ble	38cbc <__assert_fail@plt+0x266c8>
   39548:	ldr	r3, [sp, #476]	; 0x1dc
   3954c:	ldr	r0, [r3, r2, lsl #3]
   39550:	add	r3, r3, r2, lsl #3
   39554:	cmp	r4, r0
   39558:	bgt	395b8 <__assert_fail@plt+0x26fc4>
   3955c:	ldrb	r1, [r1, #6]
   39560:	tst	r1, #8
   39564:	beq	39578 <__assert_fail@plt+0x26f84>
   39568:	ldr	r1, [sp, #16]
   3956c:	ldr	r2, [r1, r2, lsl #3]
   39570:	cmn	r2, #1
   39574:	bne	395dc <__assert_fail@plt+0x26fe8>
   39578:	str	r4, [r3, #4]
   3957c:	ldr	r3, [sp, #476]	; 0x1dc
   39580:	ldr	r3, [r3, #4]
   39584:	b	38cbc <__assert_fail@plt+0x266c8>
   39588:	ldr	r2, [r0, fp, lsl #3]
   3958c:	add	r2, r2, #1
   39590:	cmp	r8, r2
   39594:	ble	38cbc <__assert_fail@plt+0x266c8>
   39598:	ldr	r1, [sp, #476]	; 0x1dc
   3959c:	ldr	r3, [sp, #476]	; 0x1dc
   395a0:	add	r3, r3, r2, lsl #3
   395a4:	str	r4, [r1, r2, lsl #3]
   395a8:	mvn	r2, #0
   395ac:	str	r2, [r3, #4]
   395b0:	ldr	r3, [r1, #4]
   395b4:	b	38cbc <__assert_fail@plt+0x266c8>
   395b8:	str	r4, [r3, #4]
   395bc:	ldr	r2, [sp, #20]
   395c0:	ldr	r1, [sp, #476]	; 0x1dc
   395c4:	ldr	r0, [sp, #16]
   395c8:	bl	12024 <memcpy@plt>
   395cc:	ldr	r3, [sp, #476]	; 0x1dc
   395d0:	ldr	r4, [sp, #120]	; 0x78
   395d4:	ldr	r3, [r3, #4]
   395d8:	b	38cbc <__assert_fail@plt+0x266c8>
   395dc:	ldr	r2, [sp, #20]
   395e0:	ldr	r0, [sp, #476]	; 0x1dc
   395e4:	bl	12024 <memcpy@plt>
   395e8:	ldr	r3, [sp, #476]	; 0x1dc
   395ec:	ldr	r3, [r3, #4]
   395f0:	b	38cbc <__assert_fail@plt+0x266c8>
   395f4:	ldr	r3, [r1]
   395f8:	add	r3, r3, #1
   395fc:	cmp	r8, r3
   39600:	ble	38f60 <__assert_fail@plt+0x2696c>
   39604:	ldr	r2, [sp, #476]	; 0x1dc
   39608:	ldr	r1, [sp, #476]	; 0x1dc
   3960c:	add	r2, r2, r3, lsl #3
   39610:	cmp	sl, #0
   39614:	ldr	r0, [r1, r3, lsl #3]
   39618:	ldr	r3, [r2, #4]
   3961c:	sub	r4, r3, r0
   39620:	beq	396ac <__assert_fail@plt+0x270b8>
   39624:	cmn	r0, #1
   39628:	beq	38f68 <__assert_fail@plt+0x26974>
   3962c:	cmn	r3, #1
   39630:	beq	38f68 <__assert_fail@plt+0x26974>
   39634:	cmp	r4, #0
   39638:	beq	396b4 <__assert_fail@plt+0x270c0>
   3963c:	ldr	r6, [sp, #120]	; 0x78
   39640:	ldr	r3, [sp, #176]	; 0xb0
   39644:	ldr	r1, [sp, #152]	; 0x98
   39648:	sub	r3, r3, r6
   3964c:	cmp	r4, r3
   39650:	bgt	38f68 <__assert_fail@plt+0x26974>
   39654:	add	r0, r1, r0
   39658:	mov	r2, r4
   3965c:	add	r1, r1, r6
   39660:	bl	12084 <memcmp@plt>
   39664:	cmp	r0, #0
   39668:	bne	38f68 <__assert_fail@plt+0x26974>
   3966c:	ldr	r3, [r5, #12]
   39670:	add	r4, r6, r4
   39674:	ldr	fp, [r3, fp, lsl #2]
   39678:	b	39408 <__assert_fail@plt+0x26e14>
   3967c:	ldr	r3, [sp, #120]	; 0x78
   39680:	mov	r2, fp
   39684:	str	r3, [sp]
   39688:	add	r1, r5, #128	; 0x80
   3968c:	add	r3, sp, #148	; 0x94
   39690:	bl	36828 <__assert_fail@plt+0x24234>
   39694:	subs	r4, r0, #0
   39698:	bne	3970c <__assert_fail@plt+0x27118>
   3969c:	ldr	r1, [r5]
   396a0:	ldr	r4, [sp, #120]	; 0x78
   396a4:	add	r1, r1, r6
   396a8:	b	393e8 <__assert_fail@plt+0x26df4>
   396ac:	cmp	r4, #0
   396b0:	bne	3970c <__assert_fail@plt+0x27118>
   396b4:	mov	r1, fp
   396b8:	mov	r0, r9
   396bc:	bl	31eec <__assert_fail@plt+0x1f8f8>
   396c0:	cmp	r0, #0
   396c4:	beq	39728 <__assert_fail@plt+0x27134>
   396c8:	add	fp, fp, fp, lsl #1
   396cc:	ldr	r3, [r5, #20]
   396d0:	ldr	r1, [sp, #248]	; 0xf8
   396d4:	add	r3, r3, fp, lsl #2
   396d8:	ldr	r4, [sp, #120]	; 0x78
   396dc:	ldr	r2, [r3, #8]
   396e0:	ldr	r3, [r1, r4, lsl #2]
   396e4:	ldr	fp, [r2]
   396e8:	add	r1, r3, #12
   396ec:	mov	r2, fp
   396f0:	ldr	r0, [r3, #8]
   396f4:	bl	3247c <__assert_fail@plt+0x1fe88>
   396f8:	cmp	r0, #0
   396fc:	bne	393c0 <__assert_fail@plt+0x26dcc>
   39700:	ldr	r1, [r5]
   39704:	add	r1, r1, r6
   39708:	b	393e8 <__assert_fail@plt+0x26df4>
   3970c:	ldr	r6, [sp, #120]	; 0x78
   39710:	b	3966c <__assert_fail@plt+0x27078>
   39714:	mov	r1, fp
   39718:	mov	r0, r9
   3971c:	bl	31eec <__assert_fail@plt+0x1f8f8>
   39720:	cmp	r0, #0
   39724:	bne	39358 <__assert_fail@plt+0x26d64>
   39728:	ldr	r0, [sp, #132]	; 0x84
   3972c:	ldr	r8, [sp, #12]
   39730:	bl	2db68 <__assert_fail@plt+0x1b574>
   39734:	b	39500 <__assert_fail@plt+0x26f0c>
   39738:	add	sl, sp, #136	; 0x88
   3973c:	b	394e4 <__assert_fail@plt+0x26ef0>
   39740:	mov	r3, #12
   39744:	str	r3, [sp, #48]	; 0x30
   39748:	b	38fd0 <__assert_fail@plt+0x269dc>
   3974c:	mov	r2, fp
   39750:	add	r1, sp, #132	; 0x84
   39754:	ldr	r0, [sp, #128]	; 0x80
   39758:	bl	3247c <__assert_fail@plt+0x1fe88>
   3975c:	cmp	r0, #0
   39760:	bne	39844 <__assert_fail@plt+0x27250>
   39764:	cmp	sl, #0
   39768:	beq	393c0 <__assert_fail@plt+0x26dcc>
   3976c:	ldr	r4, [sl]
   39770:	ldr	r3, [sl, #4]
   39774:	add	r1, r4, #1
   39778:	cmp	r1, r3
   3977c:	str	r1, [sl]
   39780:	ldr	r5, [sp, #120]	; 0x78
   39784:	beq	39818 <__assert_fail@plt+0x27224>
   39788:	ldr	r3, [sl, #8]
   3978c:	add	r2, r4, r4, lsl #1
   39790:	ldr	r0, [sp, #44]	; 0x2c
   39794:	lsl	r4, r2, #3
   39798:	str	r5, [r3, r2, lsl #3]
   3979c:	add	r5, r3, r4
   397a0:	str	r6, [r5, #4]
   397a4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   397a8:	ldr	r3, [sl, #8]
   397ac:	add	r3, r3, r4
   397b0:	str	r0, [r5, #8]
   397b4:	ldr	r0, [r3, #8]
   397b8:	cmp	r0, #0
   397bc:	beq	39728 <__assert_fail@plt+0x27134>
   397c0:	ldr	r5, [sp, #20]
   397c4:	ldr	r1, [sp, #476]	; 0x1dc
   397c8:	mov	r2, r5
   397cc:	bl	12024 <memcpy@plt>
   397d0:	ldr	r3, [sl, #8]
   397d4:	mov	r2, r5
   397d8:	add	r3, r3, r4
   397dc:	ldr	r1, [sp, #16]
   397e0:	ldr	r0, [r3, #8]
   397e4:	add	r0, r0, r5
   397e8:	bl	12024 <memcpy@plt>
   397ec:	ldr	r0, [sl, #8]
   397f0:	mov	r1, r9
   397f4:	add	r0, r0, r4
   397f8:	add	r0, r0, #12
   397fc:	bl	32dd4 <__assert_fail@plt+0x207e0>
   39800:	cmp	r0, #0
   39804:	beq	393c0 <__assert_fail@plt+0x26dcc>
   39808:	b	39728 <__assert_fail@plt+0x27134>
   3980c:	cmn	fp, #2
   39810:	bne	38f68 <__assert_fail@plt+0x26974>
   39814:	b	39728 <__assert_fail@plt+0x27134>
   39818:	add	r1, r1, r1, lsl #1
   3981c:	ldr	r0, [sl, #8]
   39820:	lsl	r1, r1, #4
   39824:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   39828:	subs	r3, r0, #0
   3982c:	beq	39728 <__assert_fail@plt+0x27134>
   39830:	ldr	r2, [sl, #4]
   39834:	str	r3, [sl, #8]
   39838:	lsl	r2, r2, #1
   3983c:	str	r2, [sl, #4]
   39840:	b	3978c <__assert_fail@plt+0x27198>
   39844:	mov	fp, r6
   39848:	b	393c0 <__assert_fail@plt+0x26dcc>
   3984c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39850:	mov	fp, r2
   39854:	ldr	r2, [r0, #100]	; 0x64
   39858:	sub	sp, sp, #100	; 0x64
   3985c:	mov	ip, #0
   39860:	ldr	r2, [r2, fp, lsl #2]
   39864:	mov	r4, r3
   39868:	cmp	r2, ip
   3986c:	lsl	r3, fp, #2
   39870:	str	r3, [sp, #40]	; 0x28
   39874:	str	r0, [sp, #32]
   39878:	mov	r9, r1
   3987c:	ldr	r5, [r0, #84]	; 0x54
   39880:	str	ip, [sp, #64]	; 0x40
   39884:	ldr	r3, [r4, #4]
   39888:	beq	39cfc <__assert_fail@plt+0x27708>
   3988c:	add	r2, r2, #4
   39890:	cmp	r3, ip
   39894:	str	r2, [sp, #24]
   39898:	bne	398d8 <__assert_fail@plt+0x272e4>
   3989c:	ldr	r3, [r9]
   398a0:	mov	r2, #0
   398a4:	str	r2, [r3, fp, lsl #2]
   398a8:	ldr	r3, [sp, #24]
   398ac:	cmp	r3, #0
   398b0:	beq	39a38 <__assert_fail@plt+0x27444>
   398b4:	ldr	r3, [sp, #32]
   398b8:	ldr	r3, [r3, #100]	; 0x64
   398bc:	ldr	r3, [r3, fp, lsl #2]
   398c0:	ldrb	r3, [r3, #52]	; 0x34
   398c4:	ands	r3, r3, #64	; 0x40
   398c8:	bne	3998c <__assert_fail@plt+0x27398>
   398cc:	mov	r0, r3
   398d0:	add	sp, sp, #100	; 0x64
   398d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   398d8:	add	r0, sp, #96	; 0x60
   398dc:	mov	r2, r4
   398e0:	str	ip, [r0, #-28]!	; 0xffffffe4
   398e4:	mov	r1, r5
   398e8:	bl	332c0 <__assert_fail@plt+0x20ccc>
   398ec:	ldr	r3, [sp, #68]	; 0x44
   398f0:	cmp	r3, #0
   398f4:	mov	r6, r0
   398f8:	bne	398cc <__assert_fail@plt+0x272d8>
   398fc:	ldr	r7, [r0, #28]
   39900:	cmp	r7, #0
   39904:	addne	r6, r0, #28
   39908:	bne	39a48 <__assert_fail@plt+0x27454>
   3990c:	ldr	r0, [r4, #4]
   39910:	str	r7, [r6, #32]
   39914:	str	r0, [r6, #28]
   39918:	lsl	r0, r0, #2
   3991c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   39920:	add	r6, r6, #28
   39924:	cmp	r0, #0
   39928:	str	r0, [r6, #8]
   3992c:	beq	3997c <__assert_fail@plt+0x27388>
   39930:	ldr	r3, [r4, #4]
   39934:	str	r7, [sp, #68]	; 0x44
   39938:	cmp	r3, #0
   3993c:	bgt	39950 <__assert_fail@plt+0x2735c>
   39940:	b	39a48 <__assert_fail@plt+0x27454>
   39944:	ldr	r3, [r4, #4]
   39948:	cmp	r7, r3
   3994c:	bge	39a48 <__assert_fail@plt+0x27454>
   39950:	ldr	r3, [r4, #8]
   39954:	ldr	r1, [r5, #28]
   39958:	mov	r0, r6
   3995c:	ldr	r3, [r3, r7, lsl #2]
   39960:	add	r7, r7, #1
   39964:	add	r3, r3, r3, lsl #1
   39968:	add	r1, r1, r3, lsl #2
   3996c:	bl	339e8 <__assert_fail@plt+0x213f4>
   39970:	cmp	r0, #0
   39974:	str	r0, [sp, #68]	; 0x44
   39978:	beq	39944 <__assert_fail@plt+0x27350>
   3997c:	mov	r3, #12
   39980:	mov	r0, r3
   39984:	add	sp, sp, #100	; 0x64
   39988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3998c:	ldr	r3, [sp, #32]
   39990:	ldr	ip, [r3, #108]	; 0x6c
   39994:	mov	r3, #0
   39998:	mov	r0, r3
   3999c:	mov	r3, ip
   399a0:	cmp	r0, r3
   399a4:	bge	39a04 <__assert_fail@plt+0x27410>
   399a8:	add	r2, r0, r3
   399ac:	ldr	r1, [sp, #32]
   399b0:	add	r2, r2, r2, lsr #31
   399b4:	asr	r2, r2, #1
   399b8:	ldr	lr, [r1, #116]	; 0x74
   399bc:	add	r1, r2, r2, lsl #1
   399c0:	add	r1, lr, r1, lsl #3
   399c4:	ldr	r1, [r1, #4]
   399c8:	cmp	fp, r1
   399cc:	ble	399f4 <__assert_fail@plt+0x27400>
   399d0:	b	39a9c <__assert_fail@plt+0x274a8>
   399d4:	asr	r3, r3, #1
   399d8:	mov	r4, r3
   399dc:	add	r1, r3, r3, lsl #1
   399e0:	add	r1, lr, r1, lsl #3
   399e4:	ldr	r1, [r1, #4]
   399e8:	cmp	fp, r1
   399ec:	bgt	39aa4 <__assert_fail@plt+0x274b0>
   399f0:	mov	r2, r3
   399f4:	add	r3, r0, r2
   399f8:	cmp	r0, r2
   399fc:	add	r3, r3, r3, lsr #31
   39a00:	blt	399d4 <__assert_fail@plt+0x273e0>
   39a04:	str	r0, [sp, #44]	; 0x2c
   39a08:	ldr	r3, [sp, #44]	; 0x2c
   39a0c:	cmp	ip, r3
   39a10:	ble	39a38 <__assert_fail@plt+0x27444>
   39a14:	add	r2, r3, r3, lsl #1
   39a18:	ldr	r3, [sp, #32]
   39a1c:	lsl	r2, r2, #3
   39a20:	str	r2, [sp, #56]	; 0x38
   39a24:	ldr	r3, [r3, #116]	; 0x74
   39a28:	add	r3, r3, r2
   39a2c:	ldr	r3, [r3, #4]
   39a30:	cmp	fp, r3
   39a34:	beq	39ab0 <__assert_fail@plt+0x274bc>
   39a38:	mov	r3, #0
   39a3c:	mov	r0, r3
   39a40:	add	sp, sp, #100	; 0x64
   39a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39a48:	mov	r2, r6
   39a4c:	ldr	r1, [sp, #24]
   39a50:	mov	r0, r4
   39a54:	bl	33574 <__assert_fail@plt+0x20f80>
   39a58:	cmp	r0, #0
   39a5c:	mov	r3, r0
   39a60:	str	r0, [sp, #64]	; 0x40
   39a64:	bne	398cc <__assert_fail@plt+0x272d8>
   39a68:	ldr	r2, [r9, #20]
   39a6c:	cmp	r2, #0
   39a70:	bne	39d10 <__assert_fail@plt+0x2771c>
   39a74:	mov	r2, r4
   39a78:	mov	r1, r5
   39a7c:	add	r0, sp, #64	; 0x40
   39a80:	ldr	r4, [r9]
   39a84:	bl	332c0 <__assert_fail@plt+0x20ccc>
   39a88:	ldr	r3, [sp, #64]	; 0x40
   39a8c:	cmp	r3, #0
   39a90:	str	r0, [r4, fp, lsl #2]
   39a94:	beq	398a8 <__assert_fail@plt+0x272b4>
   39a98:	b	398cc <__assert_fail@plt+0x272d8>
   39a9c:	mov	r4, r2
   39aa0:	mov	r2, r3
   39aa4:	add	r0, r4, #1
   39aa8:	mov	r3, r2
   39aac:	b	399a0 <__assert_fail@plt+0x273ac>
   39ab0:	ldr	r3, [sp, #44]	; 0x2c
   39ab4:	cmn	r3, #1
   39ab8:	beq	39a38 <__assert_fail@plt+0x27444>
   39abc:	ldr	r3, [sp, #24]
   39ac0:	ldr	r2, [sp, #32]
   39ac4:	ldr	r0, [r3, #4]
   39ac8:	mov	r3, #0
   39acc:	cmp	r0, r3
   39ad0:	str	r3, [sp, #68]	; 0x44
   39ad4:	ldr	sl, [r2, #84]	; 0x54
   39ad8:	ble	39a38 <__assert_fail@plt+0x27444>
   39adc:	str	r3, [sp, #16]
   39ae0:	add	r3, r9, #24
   39ae4:	str	r3, [sp, #48]	; 0x30
   39ae8:	add	r3, r9, #20
   39aec:	str	r3, [sp, #52]	; 0x34
   39af0:	add	r3, fp, #1
   39af4:	str	r3, [sp, #60]	; 0x3c
   39af8:	b	39b18 <__assert_fail@plt+0x27524>
   39afc:	cmp	r3, #4
   39b00:	beq	39b54 <__assert_fail@plt+0x27560>
   39b04:	ldr	r3, [sp, #16]
   39b08:	add	r3, r3, #1
   39b0c:	cmp	r3, r0
   39b10:	str	r3, [sp, #16]
   39b14:	bge	39fcc <__assert_fail@plt+0x279d8>
   39b18:	ldr	r3, [sp, #24]
   39b1c:	ldr	ip, [sp, #16]
   39b20:	ldr	r2, [r9, #8]
   39b24:	ldr	r1, [r3, #8]
   39b28:	ldr	r3, [sl]
   39b2c:	ldr	r8, [r1, ip, lsl #2]
   39b30:	cmp	r8, r2
   39b34:	add	r3, r3, r8, lsl #3
   39b38:	ldrb	r3, [r3, #4]
   39b3c:	bne	39afc <__assert_fail@plt+0x27508>
   39b40:	ldr	r2, [r9, #12]
   39b44:	cmp	fp, r2
   39b48:	beq	39b04 <__assert_fail@plt+0x27510>
   39b4c:	cmp	r3, #4
   39b50:	bne	39b04 <__assert_fail@plt+0x27510>
   39b54:	ldr	r3, [sp, #32]
   39b58:	ldr	r2, [sp, #56]	; 0x38
   39b5c:	ldr	r6, [sp, #44]	; 0x2c
   39b60:	ldr	r4, [r3, #116]	; 0x74
   39b64:	add	r3, r8, r8, lsl #1
   39b68:	add	r4, r4, r2
   39b6c:	lsl	r3, r3, #2
   39b70:	str	r3, [sp, #36]	; 0x24
   39b74:	lsl	r3, r8, #2
   39b78:	str	r3, [sp, #28]
   39b7c:	mov	r7, r2
   39b80:	b	39b9c <__assert_fail@plt+0x275a8>
   39b84:	ldrb	r3, [r4, #20]
   39b88:	add	r6, r6, #1
   39b8c:	add	r7, r7, #24
   39b90:	cmp	r3, #0
   39b94:	add	r4, r4, #24
   39b98:	beq	39cf0 <__assert_fail@plt+0x276fc>
   39b9c:	ldr	r3, [r4]
   39ba0:	cmp	r8, r3
   39ba4:	bne	39b84 <__assert_fail@plt+0x27590>
   39ba8:	ldr	r3, [r4, #8]
   39bac:	ldr	r5, [r4, #12]
   39bb0:	sub	r5, r5, r3
   39bb4:	cmp	r5, #0
   39bb8:	add	r5, fp, r5
   39bbc:	ldreq	r3, [sl, #20]
   39bc0:	ldreq	r2, [sp, #36]	; 0x24
   39bc4:	ldrne	r2, [sp, #28]
   39bc8:	addeq	r3, r3, r2
   39bcc:	ldrne	r3, [sl, #12]
   39bd0:	ldreq	r3, [r3, #8]
   39bd4:	ldrne	r3, [r3, r2]
   39bd8:	ldr	r2, [r9, #12]
   39bdc:	ldreq	r3, [r3]
   39be0:	cmp	r5, r2
   39be4:	bgt	39b84 <__assert_fail@plt+0x27590>
   39be8:	ldr	r2, [r9]
   39bec:	ldr	r0, [r2, r5, lsl #2]
   39bf0:	cmp	r0, #0
   39bf4:	beq	39b84 <__assert_fail@plt+0x27590>
   39bf8:	mov	r2, r3
   39bfc:	add	r1, r0, #12
   39c00:	ldr	r0, [r0, #8]
   39c04:	str	r3, [sp, #20]
   39c08:	bl	3247c <__assert_fail@plt+0x1fe88>
   39c0c:	ldr	r3, [sp, #20]
   39c10:	cmp	r0, #0
   39c14:	beq	39b84 <__assert_fail@plt+0x27590>
   39c18:	stmib	sp, {r3, r5}
   39c1c:	str	fp, [sp]
   39c20:	mov	r3, r8
   39c24:	ldr	r2, [sp, #48]	; 0x30
   39c28:	ldr	r1, [sp, #52]	; 0x34
   39c2c:	ldr	r0, [sp, #32]
   39c30:	bl	32748 <__assert_fail@plt+0x20154>
   39c34:	cmp	r0, #0
   39c38:	bne	39b84 <__assert_fail@plt+0x27590>
   39c3c:	ldr	r3, [sp, #68]	; 0x44
   39c40:	cmp	r3, #0
   39c44:	beq	39f54 <__assert_fail@plt+0x27960>
   39c48:	mov	r1, r6
   39c4c:	add	r0, sp, #84	; 0x54
   39c50:	str	r8, [sp, #76]	; 0x4c
   39c54:	str	fp, [sp, #80]	; 0x50
   39c58:	bl	31eec <__assert_fail@plt+0x1f8f8>
   39c5c:	cmp	r0, #0
   39c60:	beq	39fe0 <__assert_fail@plt+0x279ec>
   39c64:	ldr	r3, [sp, #68]	; 0x44
   39c68:	ldr	r2, [sp, #40]	; 0x28
   39c6c:	add	r1, sp, #68	; 0x44
   39c70:	ldr	r0, [sp, #32]
   39c74:	ldr	r4, [r3, r2]
   39c78:	bl	37b64 <__assert_fail@plt+0x25570>
   39c7c:	cmp	r0, #0
   39c80:	bne	39f80 <__assert_fail@plt+0x2798c>
   39c84:	ldr	r1, [r9, #4]
   39c88:	cmp	r1, #0
   39c8c:	beq	39ca8 <__assert_fail@plt+0x276b4>
   39c90:	ldr	r3, [sp, #60]	; 0x3c
   39c94:	ldr	r2, [sp, #68]	; 0x44
   39c98:	mov	r0, sl
   39c9c:	bl	334bc <__assert_fail@plt+0x20ec8>
   39ca0:	cmp	r0, #0
   39ca4:	bne	39f80 <__assert_fail@plt+0x2798c>
   39ca8:	ldr	r3, [sp, #68]	; 0x44
   39cac:	ldr	r1, [sp, #40]	; 0x28
   39cb0:	ldr	r5, [sp, #88]	; 0x58
   39cb4:	mov	r2, r6
   39cb8:	str	r4, [r3, r1]
   39cbc:	mov	r0, r5
   39cc0:	add	r1, sp, #92	; 0x5c
   39cc4:	bl	3247c <__assert_fail@plt+0x1fe88>
   39cc8:	sub	r2, r0, #1
   39ccc:	cmp	r5, r2
   39cd0:	movgt	r3, #0
   39cd4:	movle	r3, #1
   39cd8:	orrs	r3, r3, r2, lsr #31
   39cdc:	beq	39fac <__assert_fail@plt+0x279b8>
   39ce0:	ldr	r3, [sp, #32]
   39ce4:	ldr	r4, [r3, #116]	; 0x74
   39ce8:	add	r4, r4, r7
   39cec:	b	39b84 <__assert_fail@plt+0x27590>
   39cf0:	ldr	r3, [sp, #24]
   39cf4:	ldr	r0, [r3, #4]
   39cf8:	b	39b04 <__assert_fail@plt+0x27510>
   39cfc:	cmp	r3, #0
   39d00:	strne	r2, [sp, #24]
   39d04:	bne	39a74 <__assert_fail@plt+0x27480>
   39d08:	str	r3, [sp, #24]
   39d0c:	b	3989c <__assert_fail@plt+0x272a8>
   39d10:	ldr	r2, [sp, #32]
   39d14:	ldr	r2, [r2, #116]	; 0x74
   39d18:	str	r2, [sp, #20]
   39d1c:	ble	39e00 <__assert_fail@plt+0x2780c>
   39d20:	mov	r8, r0
   39d24:	str	fp, [sp, #16]
   39d28:	ldr	r3, [r9, #24]
   39d2c:	ldr	r2, [sp, #20]
   39d30:	ldr	r0, [sp, #16]
   39d34:	ldr	r3, [r3, r8, lsl #2]
   39d38:	add	r3, r3, r3, lsl #1
   39d3c:	add	r2, r2, r3, lsl #3
   39d40:	ldr	r1, [r2, #8]
   39d44:	cmp	r0, r1
   39d48:	ble	39dec <__assert_fail@plt+0x277f8>
   39d4c:	ldr	r1, [r2, #4]
   39d50:	ldr	r0, [sp, #16]
   39d54:	cmp	r0, r1
   39d58:	bgt	39dec <__assert_fail@plt+0x277f8>
   39d5c:	ldr	r1, [sp, #20]
   39d60:	ldr	r2, [r2, #12]
   39d64:	ldr	r7, [r4, #4]
   39d68:	ldr	r1, [r1, r3, lsl #3]
   39d6c:	ldr	r3, [r5]
   39d70:	cmp	r0, r2
   39d74:	ldr	r6, [r3, r1, lsl #3]
   39d78:	beq	39e0c <__assert_fail@plt+0x27818>
   39d7c:	cmp	r7, #0
   39d80:	ble	39dec <__assert_fail@plt+0x277f8>
   39d84:	mov	sl, #0
   39d88:	b	39d9c <__assert_fail@plt+0x277a8>
   39d8c:	add	sl, sl, #1
   39d90:	cmp	sl, r7
   39d94:	bge	39dec <__assert_fail@plt+0x277f8>
   39d98:	ldr	r3, [r5]
   39d9c:	ldr	r2, [r4, #8]
   39da0:	ldr	r1, [r2, sl, lsl #2]
   39da4:	add	r2, r3, r1, lsl #3
   39da8:	ldrb	r2, [r2, #4]
   39dac:	sub	r2, r2, #8
   39db0:	cmp	r2, #1
   39db4:	bhi	39d8c <__assert_fail@plt+0x27798>
   39db8:	ldr	r3, [r3, r1, lsl #3]
   39dbc:	cmp	r6, r3
   39dc0:	bne	39d8c <__assert_fail@plt+0x27798>
   39dc4:	ldr	r3, [sp, #24]
   39dc8:	mov	r2, r4
   39dcc:	mov	r0, r5
   39dd0:	bl	33728 <__assert_fail@plt+0x21134>
   39dd4:	cmp	r0, #0
   39dd8:	bne	39ff4 <__assert_fail@plt+0x27a00>
   39ddc:	ldr	r7, [r4, #4]
   39de0:	add	sl, sl, #1
   39de4:	cmp	sl, r7
   39de8:	blt	39d98 <__assert_fail@plt+0x277a4>
   39dec:	ldr	r3, [r9, #20]
   39df0:	add	r8, r8, #1
   39df4:	cmp	r8, r3
   39df8:	blt	39d28 <__assert_fail@plt+0x27734>
   39dfc:	ldr	fp, [sp, #16]
   39e00:	mov	r3, #0
   39e04:	str	r3, [sp, #64]	; 0x40
   39e08:	b	39a74 <__assert_fail@plt+0x27480>
   39e0c:	cmp	r7, #0
   39e10:	ble	39dec <__assert_fail@plt+0x277f8>
   39e14:	ldr	ip, [r4, #8]
   39e18:	mvn	r2, #0
   39e1c:	mov	fp, r2
   39e20:	add	sl, ip, r7, lsl #2
   39e24:	mov	r2, ip
   39e28:	str	ip, [sp, #28]
   39e2c:	mov	ip, fp
   39e30:	b	39e50 <__assert_fail@plt+0x2785c>
   39e34:	cmp	r0, #9
   39e38:	bne	39e48 <__assert_fail@plt+0x27854>
   39e3c:	ldr	r0, [lr]
   39e40:	cmp	r6, r0
   39e44:	moveq	fp, r1
   39e48:	cmp	sl, r2
   39e4c:	beq	39e78 <__assert_fail@plt+0x27884>
   39e50:	ldr	r1, [r2], #4
   39e54:	add	lr, r3, r1, lsl #3
   39e58:	ldrb	r0, [lr, #4]
   39e5c:	cmp	r0, #8
   39e60:	bne	39e34 <__assert_fail@plt+0x27840>
   39e64:	ldr	r0, [r3, r1, lsl #3]
   39e68:	cmp	r6, r0
   39e6c:	moveq	ip, r1
   39e70:	cmp	sl, r2
   39e74:	bne	39e50 <__assert_fail@plt+0x2785c>
   39e78:	mov	r3, ip
   39e7c:	cmp	r3, #0
   39e80:	mov	r6, fp
   39e84:	ldr	ip, [sp, #28]
   39e88:	blt	39fe8 <__assert_fail@plt+0x279f4>
   39e8c:	mov	r1, r3
   39e90:	mov	r2, r4
   39e94:	ldr	r3, [sp, #24]
   39e98:	mov	r0, r5
   39e9c:	bl	33728 <__assert_fail@plt+0x21134>
   39ea0:	cmp	r0, #0
   39ea4:	bne	39ff4 <__assert_fail@plt+0x27a00>
   39ea8:	cmp	fp, #0
   39eac:	blt	39dec <__assert_fail@plt+0x277f8>
   39eb0:	ldr	r7, [r4, #4]
   39eb4:	cmp	r7, #0
   39eb8:	ble	39dec <__assert_fail@plt+0x277f8>
   39ebc:	ldr	ip, [r4, #8]
   39ec0:	mov	sl, #0
   39ec4:	str	r8, [sp, #28]
   39ec8:	mov	fp, r6
   39ecc:	b	39ee0 <__assert_fail@plt+0x278ec>
   39ed0:	add	sl, sl, #1
   39ed4:	cmp	sl, r7
   39ed8:	bge	39fc4 <__assert_fail@plt+0x279d0>
   39edc:	ldr	ip, [r4, #8]
   39ee0:	ldr	r8, [ip, sl, lsl #2]
   39ee4:	ldr	r0, [r5, #28]
   39ee8:	mov	r2, fp
   39eec:	add	r6, r8, r8, lsl #1
   39ef0:	lsl	r6, r6, #2
   39ef4:	add	r0, r0, r6
   39ef8:	add	r1, r0, #8
   39efc:	ldr	r0, [r0, #4]
   39f00:	bl	3247c <__assert_fail@plt+0x1fe88>
   39f04:	mov	r2, fp
   39f08:	cmp	r0, #0
   39f0c:	bne	39ed0 <__assert_fail@plt+0x278dc>
   39f10:	ldr	r1, [r5, #24]
   39f14:	add	r6, r1, r6
   39f18:	add	r1, r6, #8
   39f1c:	ldr	r0, [r6, #4]
   39f20:	bl	3247c <__assert_fail@plt+0x1fe88>
   39f24:	cmp	r0, #0
   39f28:	bne	39ed0 <__assert_fail@plt+0x278dc>
   39f2c:	mov	r1, r8
   39f30:	ldr	r3, [sp, #24]
   39f34:	mov	r2, r4
   39f38:	mov	r0, r5
   39f3c:	bl	33728 <__assert_fail@plt+0x21134>
   39f40:	sub	sl, sl, #1
   39f44:	cmp	r0, #0
   39f48:	bne	39ff4 <__assert_fail@plt+0x27a00>
   39f4c:	ldr	r7, [r4, #4]
   39f50:	b	39ed0 <__assert_fail@plt+0x278dc>
   39f54:	mov	ip, r9
   39f58:	add	lr, sp, #68	; 0x44
   39f5c:	ldm	ip!, {r0, r1, r2, r3}
   39f60:	stmia	lr!, {r0, r1, r2, r3}
   39f64:	ldm	ip, {r0, r1, r2}
   39f68:	stm	lr, {r0, r1, r2}
   39f6c:	mov	r1, ip
   39f70:	add	r0, sp, #84	; 0x54
   39f74:	bl	32dd4 <__assert_fail@plt+0x207e0>
   39f78:	cmp	r0, #0
   39f7c:	beq	39c48 <__assert_fail@plt+0x27654>
   39f80:	mov	r3, r0
   39f84:	ldr	r2, [sp, #68]	; 0x44
   39f88:	cmp	r2, #0
   39f8c:	beq	398cc <__assert_fail@plt+0x272d8>
   39f90:	ldr	r0, [sp, #92]	; 0x5c
   39f94:	str	r3, [sp, #16]
   39f98:	bl	2db68 <__assert_fail@plt+0x1b574>
   39f9c:	ldr	r3, [sp, #16]
   39fa0:	mov	r0, r3
   39fa4:	add	sp, sp, #100	; 0x64
   39fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39fac:	add	r0, sp, #96	; 0x60
   39fb0:	sub	r5, r5, #1
   39fb4:	str	r5, [r0, #-8]!
   39fb8:	add	r1, sp, #92	; 0x5c
   39fbc:	bl	3260c <__assert_fail@plt+0x20018>
   39fc0:	b	39ce0 <__assert_fail@plt+0x276ec>
   39fc4:	ldr	r8, [sp, #28]
   39fc8:	b	39dec <__assert_fail@plt+0x277f8>
   39fcc:	ldr	r3, [sp, #68]	; 0x44
   39fd0:	cmp	r3, #0
   39fd4:	movne	r3, #0
   39fd8:	bne	39f90 <__assert_fail@plt+0x2799c>
   39fdc:	b	39a38 <__assert_fail@plt+0x27444>
   39fe0:	mov	r3, #12
   39fe4:	b	39f84 <__assert_fail@plt+0x27990>
   39fe8:	cmp	fp, #0
   39fec:	bge	39ec0 <__assert_fail@plt+0x278cc>
   39ff0:	b	39dec <__assert_fail@plt+0x277f8>
   39ff4:	mov	r3, r0
   39ff8:	b	398cc <__assert_fail@plt+0x272d8>
   39ffc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a000:	sub	sp, sp, #8
   3a004:	ldr	r6, [r1, #40]	; 0x28
   3a008:	ldr	r3, [r1, #56]	; 0x38
   3a00c:	cmp	r3, r6
   3a010:	ble	3a284 <__assert_fail@plt+0x27c90>
   3a014:	ldr	sl, [r1, #4]
   3a018:	ldrb	r3, [r0, #6]
   3a01c:	mov	r8, r2
   3a020:	ldrb	r7, [sl, r6]
   3a024:	and	r3, r3, #159	; 0x9f
   3a028:	strb	r3, [r0, #6]
   3a02c:	strb	r7, [r0]
   3a030:	ldr	r3, [r1, #80]	; 0x50
   3a034:	mov	r5, r0
   3a038:	cmp	r3, #1
   3a03c:	mov	r4, r1
   3a040:	ble	3a298 <__assert_fail@plt+0x27ca4>
   3a044:	ldr	r2, [r1, #28]
   3a048:	cmp	r6, r2
   3a04c:	beq	3a060 <__assert_fail@plt+0x27a6c>
   3a050:	ldr	r2, [r1, #8]
   3a054:	ldr	r2, [r2, r6, lsl #2]
   3a058:	cmn	r2, #1
   3a05c:	beq	3a4f8 <__assert_fail@plt+0x27f04>
   3a060:	cmp	r7, #92	; 0x5c
   3a064:	beq	3a300 <__assert_fail@plt+0x27d0c>
   3a068:	ldr	r3, [r4, #8]
   3a06c:	mov	r2, #1
   3a070:	strb	r2, [r5, #4]
   3a074:	ldr	r9, [r3, r6, lsl #2]
   3a078:	mov	r0, r9
   3a07c:	bl	12354 <iswalnum@plt>
   3a080:	ldrb	r3, [r5, #6]
   3a084:	sub	r9, r9, #95	; 0x5f
   3a088:	clz	r9, r9
   3a08c:	lsr	r9, r9, #5
   3a090:	bic	r3, r3, #64	; 0x40
   3a094:	cmp	r0, #0
   3a098:	orrne	r9, r9, #1
   3a09c:	orr	r9, r3, r9, lsl #6
   3a0a0:	strb	r9, [r5, #6]
   3a0a4:	sub	r7, r7, #10
   3a0a8:	cmp	r7, #115	; 0x73
   3a0ac:	ldrls	pc, [pc, r7, lsl #2]
   3a0b0:	b	3a2f4 <__assert_fail@plt+0x27d00>
   3a0b4:	andeq	sl, r3, ip, lsr r5
   3a0b8:	strdeq	sl, [r3], -r4
   3a0bc:	strdeq	sl, [r3], -r4
   3a0c0:	strdeq	sl, [r3], -r4
   3a0c4:	strdeq	sl, [r3], -r4
   3a0c8:	strdeq	sl, [r3], -r4
   3a0cc:	strdeq	sl, [r3], -r4
   3a0d0:	strdeq	sl, [r3], -r4
   3a0d4:	strdeq	sl, [r3], -r4
   3a0d8:	strdeq	sl, [r3], -r4
   3a0dc:	strdeq	sl, [r3], -r4
   3a0e0:	strdeq	sl, [r3], -r4
   3a0e4:	strdeq	sl, [r3], -r4
   3a0e8:	strdeq	sl, [r3], -r4
   3a0ec:	strdeq	sl, [r3], -r4
   3a0f0:	strdeq	sl, [r3], -r4
   3a0f4:	strdeq	sl, [r3], -r4
   3a0f8:	strdeq	sl, [r3], -r4
   3a0fc:	strdeq	sl, [r3], -r4
   3a100:	strdeq	sl, [r3], -r4
   3a104:	strdeq	sl, [r3], -r4
   3a108:	strdeq	sl, [r3], -r4
   3a10c:	strdeq	sl, [r3], -r4
   3a110:	strdeq	sl, [r3], -r4
   3a114:	strdeq	sl, [r3], -r4
   3a118:	strdeq	sl, [r3], -r4
   3a11c:	andeq	sl, r3, r4, asr r5
   3a120:	strdeq	sl, [r3], -r4
   3a124:	strdeq	sl, [r3], -r4
   3a128:	strdeq	sl, [r3], -r4
   3a12c:			; <UNDEFINED> instruction: 0x0003a5b4
   3a130:	andeq	sl, r3, ip, asr #11
   3a134:	andeq	sl, r3, r4, ror #11
   3a138:	strdeq	sl, [r3], -r4
   3a13c:	strdeq	sl, [r3], -r4
   3a140:	strdeq	sl, [r3], -r4
   3a144:	andeq	sl, r3, r4, lsl r6
   3a148:	strdeq	sl, [r3], -r4
   3a14c:	strdeq	sl, [r3], -r4
   3a150:	strdeq	sl, [r3], -r4
   3a154:	strdeq	sl, [r3], -r4
   3a158:	strdeq	sl, [r3], -r4
   3a15c:	strdeq	sl, [r3], -r4
   3a160:	strdeq	sl, [r3], -r4
   3a164:	strdeq	sl, [r3], -r4
   3a168:	strdeq	sl, [r3], -r4
   3a16c:	strdeq	sl, [r3], -r4
   3a170:	strdeq	sl, [r3], -r4
   3a174:	strdeq	sl, [r3], -r4
   3a178:	strdeq	sl, [r3], -r4
   3a17c:	strdeq	sl, [r3], -r4
   3a180:	strdeq	sl, [r3], -r4
   3a184:	strdeq	sl, [r3], -r4
   3a188:	andeq	sl, r3, r4, lsr #12
   3a18c:	strdeq	sl, [r3], -r4
   3a190:	strdeq	sl, [r3], -r4
   3a194:	strdeq	sl, [r3], -r4
   3a198:	strdeq	sl, [r3], -r4
   3a19c:	strdeq	sl, [r3], -r4
   3a1a0:	strdeq	sl, [r3], -r4
   3a1a4:	strdeq	sl, [r3], -r4
   3a1a8:	strdeq	sl, [r3], -r4
   3a1ac:	strdeq	sl, [r3], -r4
   3a1b0:	strdeq	sl, [r3], -r4
   3a1b4:	strdeq	sl, [r3], -r4
   3a1b8:	strdeq	sl, [r3], -r4
   3a1bc:	strdeq	sl, [r3], -r4
   3a1c0:	strdeq	sl, [r3], -r4
   3a1c4:	strdeq	sl, [r3], -r4
   3a1c8:	strdeq	sl, [r3], -r4
   3a1cc:	strdeq	sl, [r3], -r4
   3a1d0:	strdeq	sl, [r3], -r4
   3a1d4:	strdeq	sl, [r3], -r4
   3a1d8:	strdeq	sl, [r3], -r4
   3a1dc:	strdeq	sl, [r3], -r4
   3a1e0:	strdeq	sl, [r3], -r4
   3a1e4:	strdeq	sl, [r3], -r4
   3a1e8:	strdeq	sl, [r3], -r4
   3a1ec:	strdeq	sl, [r3], -r4
   3a1f0:	strdeq	sl, [r3], -r4
   3a1f4:	strdeq	sl, [r3], -r4
   3a1f8:	andeq	sl, r3, r4, asr #12
   3a1fc:	strdeq	sl, [r3], -r4
   3a200:	strdeq	sl, [r3], -r4
   3a204:	andeq	sl, r3, r4, asr r6
   3a208:	strdeq	sl, [r3], -r4
   3a20c:	strdeq	sl, [r3], -r4
   3a210:	strdeq	sl, [r3], -r4
   3a214:	strdeq	sl, [r3], -r4
   3a218:	strdeq	sl, [r3], -r4
   3a21c:	strdeq	sl, [r3], -r4
   3a220:	strdeq	sl, [r3], -r4
   3a224:	strdeq	sl, [r3], -r4
   3a228:	strdeq	sl, [r3], -r4
   3a22c:	strdeq	sl, [r3], -r4
   3a230:	strdeq	sl, [r3], -r4
   3a234:	strdeq	sl, [r3], -r4
   3a238:	strdeq	sl, [r3], -r4
   3a23c:	strdeq	sl, [r3], -r4
   3a240:	strdeq	sl, [r3], -r4
   3a244:	strdeq	sl, [r3], -r4
   3a248:	strdeq	sl, [r3], -r4
   3a24c:	strdeq	sl, [r3], -r4
   3a250:	strdeq	sl, [r3], -r4
   3a254:	strdeq	sl, [r3], -r4
   3a258:	strdeq	sl, [r3], -r4
   3a25c:	strdeq	sl, [r3], -r4
   3a260:	strdeq	sl, [r3], -r4
   3a264:	strdeq	sl, [r3], -r4
   3a268:	strdeq	sl, [r3], -r4
   3a26c:	strdeq	sl, [r3], -r4
   3a270:	strdeq	sl, [r3], -r4
   3a274:	strdeq	sl, [r3], -r4
   3a278:	ldrdeq	sl, [r3], -ip
   3a27c:	andeq	sl, r3, ip, lsr #13
   3a280:	andeq	sl, r3, r0, lsr #10
   3a284:	mov	r3, #2
   3a288:	strb	r3, [r0, #4]
   3a28c:	mov	r0, #0
   3a290:	add	sp, sp, #8
   3a294:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a298:	cmp	r7, #92	; 0x5c
   3a29c:	beq	3a300 <__assert_fail@plt+0x27d0c>
   3a2a0:	mov	r3, #1
   3a2a4:	strb	r3, [r5, #4]
   3a2a8:	bl	122b8 <__ctype_b_loc@plt>
   3a2ac:	lsl	r1, r7, #1
   3a2b0:	ldrb	r2, [r5, #6]
   3a2b4:	bic	r2, r2, #64	; 0x40
   3a2b8:	ldr	r3, [r0]
   3a2bc:	ldrh	r3, [r3, r1]
   3a2c0:	lsr	r3, r3, #3
   3a2c4:	and	r3, r3, #1
   3a2c8:	cmp	r7, #95	; 0x5f
   3a2cc:	orreq	r3, r3, #1
   3a2d0:	orr	r3, r2, r3, lsl #6
   3a2d4:	strb	r3, [r5, #6]
   3a2d8:	b	3a0a4 <__assert_fail@plt+0x27ab0>
   3a2dc:	and	r8, r8, #4608	; 0x1200
   3a2e0:	cmp	r8, #4608	; 0x1200
   3a2e4:	moveq	r3, #23
   3a2e8:	strbeq	r3, [r5, #4]
   3a2ec:	moveq	r0, #1
   3a2f0:	beq	3a290 <__assert_fail@plt+0x27c9c>
   3a2f4:	mov	r0, #1
   3a2f8:	add	sp, sp, #8
   3a2fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a300:	ldr	r1, [r4, #48]	; 0x30
   3a304:	add	r2, r6, #1
   3a308:	cmp	r2, r1
   3a30c:	bge	3a510 <__assert_fail@plt+0x27f1c>
   3a310:	ldrb	r1, [r4, #75]	; 0x4b
   3a314:	cmp	r1, #0
   3a318:	bne	3a8cc <__assert_fail@plt+0x282d8>
   3a31c:	ldrb	r6, [sl, r2]
   3a320:	cmp	r3, #1
   3a324:	mov	r3, #1
   3a328:	strb	r6, [r5]
   3a32c:	strb	r3, [r5, #4]
   3a330:	ble	3a898 <__assert_fail@plt+0x282a4>
   3a334:	ldr	r1, [r4, #8]
   3a338:	add	r1, r1, r2, lsl #2
   3a33c:	ldr	r4, [r1]
   3a340:	mov	r0, r4
   3a344:	bl	12354 <iswalnum@plt>
   3a348:	ldrb	r3, [r5, #6]
   3a34c:	sub	r4, r4, #95	; 0x5f
   3a350:	clz	r4, r4
   3a354:	lsr	r4, r4, #5
   3a358:	bic	r3, r3, #64	; 0x40
   3a35c:	cmp	r0, #0
   3a360:	orrne	r4, r4, #1
   3a364:	orr	r4, r3, r4, lsl #6
   3a368:	strb	r4, [r5, #6]
   3a36c:	sub	r3, r6, #39	; 0x27
   3a370:	cmp	r3, #86	; 0x56
   3a374:	ldrls	pc, [pc, r3, lsl #2]
   3a378:	b	3a4f0 <__assert_fail@plt+0x27efc>
   3a37c:	ldrdeq	sl, [r3], -r4
   3a380:			; <UNDEFINED> instruction: 0x0003a6bc
   3a384:	andeq	sl, r3, r0, lsl #17
   3a388:	strdeq	sl, [r3], -r0
   3a38c:	andeq	sl, r3, r4, ror #16
   3a390:	strdeq	sl, [r3], -r0
   3a394:	strdeq	sl, [r3], -r0
   3a398:	strdeq	sl, [r3], -r0
   3a39c:	strdeq	sl, [r3], -r0
   3a3a0:	strdeq	sl, [r3], -r0
   3a3a4:	andeq	sl, r3, r4, asr #16
   3a3a8:	andeq	sl, r3, r4, asr #16
   3a3ac:	andeq	sl, r3, r4, asr #16
   3a3b0:	andeq	sl, r3, r4, asr #16
   3a3b4:	andeq	sl, r3, r4, asr #16
   3a3b8:	andeq	sl, r3, r4, asr #16
   3a3bc:	andeq	sl, r3, r4, asr #16
   3a3c0:	andeq	sl, r3, r4, asr #16
   3a3c4:	andeq	sl, r3, r4, asr #16
   3a3c8:	strdeq	sl, [r3], -r0
   3a3cc:	strdeq	sl, [r3], -r0
   3a3d0:	andeq	sl, r3, r4, lsr #16
   3a3d4:	strdeq	sl, [r3], -r0
   3a3d8:	andeq	sl, r3, r4, lsl #16
   3a3dc:	andeq	sl, r3, r8, ror #15
   3a3e0:	strdeq	sl, [r3], -r0
   3a3e4:	strdeq	sl, [r3], -r0
   3a3e8:	andeq	sl, r3, r8, asr #15
   3a3ec:	strdeq	sl, [r3], -r0
   3a3f0:	strdeq	sl, [r3], -r0
   3a3f4:	strdeq	sl, [r3], -r0
   3a3f8:	strdeq	sl, [r3], -r0
   3a3fc:	strdeq	sl, [r3], -r0
   3a400:	strdeq	sl, [r3], -r0
   3a404:	strdeq	sl, [r3], -r0
   3a408:	strdeq	sl, [r3], -r0
   3a40c:	strdeq	sl, [r3], -r0
   3a410:	strdeq	sl, [r3], -r0
   3a414:	strdeq	sl, [r3], -r0
   3a418:	strdeq	sl, [r3], -r0
   3a41c:	strdeq	sl, [r3], -r0
   3a420:	strdeq	sl, [r3], -r0
   3a424:	strdeq	sl, [r3], -r0
   3a428:	strdeq	sl, [r3], -r0
   3a42c:			; <UNDEFINED> instruction: 0x0003a7b0
   3a430:	strdeq	sl, [r3], -r0
   3a434:	strdeq	sl, [r3], -r0
   3a438:	strdeq	sl, [r3], -r0
   3a43c:	muleq	r3, r8, r7
   3a440:	strdeq	sl, [r3], -r0
   3a444:	strdeq	sl, [r3], -r0
   3a448:	strdeq	sl, [r3], -r0
   3a44c:	strdeq	sl, [r3], -r0
   3a450:	strdeq	sl, [r3], -r0
   3a454:	strdeq	sl, [r3], -r0
   3a458:	strdeq	sl, [r3], -r0
   3a45c:	strdeq	sl, [r3], -r0
   3a460:	andeq	sl, r3, r8, ror r7
   3a464:	strdeq	sl, [r3], -r0
   3a468:	andeq	sl, r3, r8, asr r7
   3a46c:	strdeq	sl, [r3], -r0
   3a470:	strdeq	sl, [r3], -r0
   3a474:	strdeq	sl, [r3], -r0
   3a478:	strdeq	sl, [r3], -r0
   3a47c:	strdeq	sl, [r3], -r0
   3a480:	strdeq	sl, [r3], -r0
   3a484:	strdeq	sl, [r3], -r0
   3a488:	strdeq	sl, [r3], -r0
   3a48c:	strdeq	sl, [r3], -r0
   3a490:	strdeq	sl, [r3], -r0
   3a494:	strdeq	sl, [r3], -r0
   3a498:	strdeq	sl, [r3], -r0
   3a49c:	strdeq	sl, [r3], -r0
   3a4a0:	strdeq	sl, [r3], -r0
   3a4a4:	strdeq	sl, [r3], -r0
   3a4a8:	strdeq	sl, [r3], -r0
   3a4ac:	andeq	sl, r3, r0, asr #14
   3a4b0:	strdeq	sl, [r3], -r0
   3a4b4:	strdeq	sl, [r3], -r0
   3a4b8:	strdeq	sl, [r3], -r0
   3a4bc:	andeq	sl, r3, r8, lsr #14
   3a4c0:	strdeq	sl, [r3], -r0
   3a4c4:	strdeq	sl, [r3], -r0
   3a4c8:	strdeq	sl, [r3], -r0
   3a4cc:	ldrdeq	sl, [r3], -r8
   3a4d0:	andeq	sl, r3, r0, lsl r7
   3a4d4:	strdeq	sl, [r3], -r4
   3a4d8:	and	r8, r8, #4608	; 0x1200
   3a4dc:	cmp	r8, #512	; 0x200
   3a4e0:	moveq	r3, #23
   3a4e4:	strbeq	r3, [r5, #4]
   3a4e8:	moveq	r0, #2
   3a4ec:	beq	3a290 <__assert_fail@plt+0x27c9c>
   3a4f0:	mov	r0, #2
   3a4f4:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a4f8:	ldrb	r3, [r0, #6]
   3a4fc:	mov	r0, #1
   3a500:	strb	r0, [r5, #4]
   3a504:	orr	r3, r3, #32
   3a508:	strb	r3, [r5, #6]
   3a50c:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a510:	mov	r3, #36	; 0x24
   3a514:	strb	r3, [r5, #4]
   3a518:	mov	r0, #1
   3a51c:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a520:	and	r8, r8, #4608	; 0x1200
   3a524:	cmp	r8, #4608	; 0x1200
   3a528:	moveq	r3, #24
   3a52c:	strbeq	r3, [r5, #4]
   3a530:	moveq	r0, #1
   3a534:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a538:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a53c:	tst	r8, #2048	; 0x800
   3a540:	beq	3a2f4 <__assert_fail@plt+0x27d00>
   3a544:	mov	r3, #10
   3a548:	strb	r3, [r5, #4]
   3a54c:	mov	r0, #1
   3a550:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a554:	tst	r8, #8
   3a558:	bne	3a59c <__assert_fail@plt+0x27fa8>
   3a55c:	ldr	r3, [r4, #48]	; 0x30
   3a560:	add	r6, r6, #1
   3a564:	cmp	r6, r3
   3a568:	beq	3a59c <__assert_fail@plt+0x27fa8>
   3a56c:	mov	r2, r8
   3a570:	str	r6, [r4, #40]	; 0x28
   3a574:	mov	r1, r4
   3a578:	mov	r0, sp
   3a57c:	bl	39ffc <__assert_fail@plt+0x27a08>
   3a580:	ldrb	r2, [sp, #4]
   3a584:	ldr	r3, [r4, #40]	; 0x28
   3a588:	sub	r2, r2, #9
   3a58c:	sub	r3, r3, #1
   3a590:	cmp	r2, #1
   3a594:	str	r3, [r4, #40]	; 0x28
   3a598:	bhi	3a2f4 <__assert_fail@plt+0x27d00>
   3a59c:	mov	r2, #12
   3a5a0:	mov	r3, #32
   3a5a4:	strb	r2, [r5, #4]
   3a5a8:	str	r3, [r5]
   3a5ac:	mov	r0, #1
   3a5b0:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a5b4:	tst	r8, #8192	; 0x2000
   3a5b8:	beq	3a2f4 <__assert_fail@plt+0x27d00>
   3a5bc:	mov	r3, #8
   3a5c0:	strb	r3, [r5, #4]
   3a5c4:	mov	r0, #1
   3a5c8:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a5cc:	tst	r8, #8192	; 0x2000
   3a5d0:	beq	3a2f4 <__assert_fail@plt+0x27d00>
   3a5d4:	mov	r3, #9
   3a5d8:	strb	r3, [r5, #4]
   3a5dc:	mov	r0, #1
   3a5e0:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a5e4:	mov	r3, #11
   3a5e8:	strb	r3, [r5, #4]
   3a5ec:	mov	r0, #1
   3a5f0:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a5f4:	ldr	r3, [pc, #864]	; 3a95c <__assert_fail@plt+0x28368>
   3a5f8:	and	r3, r3, r8
   3a5fc:	cmp	r3, #0
   3a600:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a604:	mov	r3, #18
   3a608:	strb	r3, [r5, #4]
   3a60c:	mov	r0, #1
   3a610:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a614:	mov	r3, #5
   3a618:	strb	r3, [r5, #4]
   3a61c:	mov	r0, #1
   3a620:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a624:	ldr	r3, [pc, #816]	; 3a95c <__assert_fail@plt+0x28368>
   3a628:	and	r3, r3, r8
   3a62c:	cmp	r3, #0
   3a630:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a634:	mov	r3, #19
   3a638:	strb	r3, [r5, #4]
   3a63c:	mov	r0, #1
   3a640:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a644:	mov	r3, #20
   3a648:	strb	r3, [r5, #4]
   3a64c:	mov	r0, #1
   3a650:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a654:	ldr	r3, [pc, #772]	; 3a960 <__assert_fail@plt+0x2836c>
   3a658:	cmp	r6, #0
   3a65c:	and	r3, r3, r8
   3a660:	clz	r3, r3
   3a664:	lsr	r3, r3, #5
   3a668:	moveq	r3, #0
   3a66c:	cmp	r3, #0
   3a670:	beq	3a694 <__assert_fail@plt+0x280a0>
   3a674:	add	r6, sl, r6
   3a678:	lsr	r3, r8, #11
   3a67c:	ldrb	r2, [r6, #-1]
   3a680:	eor	r3, r3, #1
   3a684:	cmp	r2, #10
   3a688:	orrne	r3, r3, #1
   3a68c:	tst	r3, #1
   3a690:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a694:	mov	r2, #12
   3a698:	mov	r3, #16
   3a69c:	strb	r2, [r5, #4]
   3a6a0:	str	r3, [r5]
   3a6a4:	mov	r0, #1
   3a6a8:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a6ac:	and	r8, r8, #33792	; 0x8400
   3a6b0:	cmp	r8, #32768	; 0x8000
   3a6b4:	bne	3a2f4 <__assert_fail@plt+0x27d00>
   3a6b8:	b	3a544 <__assert_fail@plt+0x27f50>
   3a6bc:	tst	r8, #8192	; 0x2000
   3a6c0:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a6c4:	mov	r3, #8
   3a6c8:	strb	r3, [r5, #4]
   3a6cc:	mov	r0, #2
   3a6d0:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a6d4:	tst	r8, #524288	; 0x80000
   3a6d8:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a6dc:	mov	r2, #12
   3a6e0:	mov	r3, #128	; 0x80
   3a6e4:	strb	r2, [r5, #4]
   3a6e8:	str	r3, [r5]
   3a6ec:	mov	r0, #2
   3a6f0:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a6f4:	and	r8, r8, #4608	; 0x1200
   3a6f8:	cmp	r8, #512	; 0x200
   3a6fc:	moveq	r3, #24
   3a700:	strbeq	r3, [r5, #4]
   3a704:	moveq	r0, #2
   3a708:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a70c:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a710:	tst	r8, #33792	; 0x8400
   3a714:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a718:	mov	r3, #10
   3a71c:	strb	r3, [r5, #4]
   3a720:	mov	r0, #2
   3a724:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a728:	tst	r8, #524288	; 0x80000
   3a72c:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a730:	mov	r3, #32
   3a734:	strb	r3, [r5, #4]
   3a738:	mov	r0, #2
   3a73c:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a740:	tst	r8, #524288	; 0x80000
   3a744:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a748:	mov	r3, #34	; 0x22
   3a74c:	strb	r3, [r5, #4]
   3a750:	mov	r0, #2
   3a754:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a758:	tst	r8, #524288	; 0x80000
   3a75c:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a760:	mov	r2, #12
   3a764:	mov	r3, #256	; 0x100
   3a768:	strb	r2, [r5, #4]
   3a76c:	str	r3, [r5]
   3a770:	mov	r0, #2
   3a774:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a778:	tst	r8, #524288	; 0x80000
   3a77c:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a780:	mov	r2, #12
   3a784:	mov	r3, #64	; 0x40
   3a788:	strb	r2, [r5, #4]
   3a78c:	str	r3, [r5]
   3a790:	mov	r0, #2
   3a794:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a798:	tst	r8, #524288	; 0x80000
   3a79c:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a7a0:	mov	r3, #33	; 0x21
   3a7a4:	strb	r3, [r5, #4]
   3a7a8:	mov	r0, #2
   3a7ac:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a7b0:	tst	r8, #524288	; 0x80000
   3a7b4:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a7b8:	mov	r3, #35	; 0x23
   3a7bc:	strb	r3, [r5, #4]
   3a7c0:	mov	r0, #2
   3a7c4:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a7c8:	tst	r8, #524288	; 0x80000
   3a7cc:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a7d0:	mov	r2, #12
   3a7d4:	mov	r3, #512	; 0x200
   3a7d8:	strb	r2, [r5, #4]
   3a7dc:	str	r3, [r5]
   3a7e0:	mov	r0, #2
   3a7e4:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a7e8:	ldr	r0, [pc, #364]	; 3a95c <__assert_fail@plt+0x28368>
   3a7ec:	and	r0, r0, r8
   3a7f0:	cmp	r0, #2
   3a7f4:	moveq	r3, #19
   3a7f8:	strbeq	r3, [r5, #4]
   3a7fc:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a800:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a804:	tst	r8, #524288	; 0x80000
   3a808:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a80c:	mov	r2, #12
   3a810:	mov	r3, #9
   3a814:	strb	r2, [r5, #4]
   3a818:	str	r3, [r5]
   3a81c:	mov	r0, #2
   3a820:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a824:	tst	r8, #524288	; 0x80000
   3a828:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a82c:	mov	r2, #12
   3a830:	mov	r3, #6
   3a834:	strb	r2, [r5, #4]
   3a838:	str	r3, [r5]
   3a83c:	mov	r0, #2
   3a840:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a844:	tst	r8, #16384	; 0x4000
   3a848:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a84c:	sub	r6, r6, #49	; 0x31
   3a850:	mov	r3, #4
   3a854:	str	r6, [r5]
   3a858:	strb	r3, [r5, #4]
   3a85c:	mov	r0, #2
   3a860:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a864:	ldr	r0, [pc, #240]	; 3a95c <__assert_fail@plt+0x28368>
   3a868:	and	r0, r0, r8
   3a86c:	cmp	r0, #2
   3a870:	moveq	r3, #18
   3a874:	strbeq	r3, [r5, #4]
   3a878:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a87c:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a880:	tst	r8, #8192	; 0x2000
   3a884:	bne	3a4f0 <__assert_fail@plt+0x27efc>
   3a888:	mov	r3, #9
   3a88c:	strb	r3, [r5, #4]
   3a890:	mov	r0, #2
   3a894:	b	3a290 <__assert_fail@plt+0x27c9c>
   3a898:	bl	122b8 <__ctype_b_loc@plt>
   3a89c:	lsl	r3, r6, #1
   3a8a0:	ldrb	r2, [r5, #6]
   3a8a4:	bic	r2, r2, #64	; 0x40
   3a8a8:	ldr	r1, [r0]
   3a8ac:	ldrh	r3, [r1, r3]
   3a8b0:	lsr	r3, r3, #3
   3a8b4:	and	r3, r3, #1
   3a8b8:	cmp	r6, #95	; 0x5f
   3a8bc:	orreq	r3, r3, #1
   3a8c0:	orr	r3, r2, r3, lsl #6
   3a8c4:	strb	r3, [r5, #6]
   3a8c8:	b	3a36c <__assert_fail@plt+0x27d78>
   3a8cc:	cmp	r3, #1
   3a8d0:	ble	3a904 <__assert_fail@plt+0x28310>
   3a8d4:	ldr	r0, [r4, #8]
   3a8d8:	add	r1, r0, r2, lsl #2
   3a8dc:	ldr	r0, [r0, r2, lsl #2]
   3a8e0:	cmn	r0, #1
   3a8e4:	beq	3a948 <__assert_fail@plt+0x28354>
   3a8e8:	ldr	r0, [r4, #28]
   3a8ec:	add	r6, r6, #2
   3a8f0:	cmp	r0, r6
   3a8f4:	beq	3a904 <__assert_fail@plt+0x28310>
   3a8f8:	ldr	r0, [r1, #4]
   3a8fc:	cmn	r0, #1
   3a900:	beq	3a948 <__assert_fail@plt+0x28354>
   3a904:	ldrb	r1, [r4, #76]	; 0x4c
   3a908:	cmp	r1, #0
   3a90c:	bne	3a924 <__assert_fail@plt+0x28330>
   3a910:	ldr	r1, [r4]
   3a914:	ldr	r0, [r4, #24]
   3a918:	add	r1, r1, r2
   3a91c:	ldrb	r6, [r1, r0]
   3a920:	b	3a320 <__assert_fail@plt+0x27d2c>
   3a924:	ldr	ip, [r4, #12]
   3a928:	ldr	r1, [r4]
   3a92c:	ldr	r0, [r4, #24]
   3a930:	ldr	ip, [ip, r2, lsl #2]
   3a934:	add	r1, r1, ip
   3a938:	ldrb	r6, [r1, r0]
   3a93c:	tst	r6, #128	; 0x80
   3a940:	bne	3a31c <__assert_fail@plt+0x27d28>
   3a944:	b	3a320 <__assert_fail@plt+0x27d2c>
   3a948:	ldrb	r6, [sl, r2]
   3a94c:	mov	r3, #1
   3a950:	strb	r3, [r5, #4]
   3a954:	strb	r6, [r5]
   3a958:	b	3a33c <__assert_fail@plt+0x27d48>
   3a95c:	andeq	r0, r0, r2, lsl #8
   3a960:	addeq	r0, r0, r8
   3a964:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a968:	mov	sl, r0
   3a96c:	ldr	r8, [pc, #172]	; 3aa20 <__assert_fail@plt+0x2842c>
   3a970:	mov	r4, r1
   3a974:	mov	r6, r2
   3a978:	mvn	r5, #0
   3a97c:	mov	r9, #32768	; 0x8000
   3a980:	mvn	r7, #1
   3a984:	mov	r2, r6
   3a988:	mov	r1, sl
   3a98c:	mov	r0, r4
   3a990:	bl	39ffc <__assert_fail@plt+0x27a08>
   3a994:	ldrb	r2, [r4, #4]
   3a998:	ldr	r3, [sl, #40]	; 0x28
   3a99c:	cmp	r2, #2
   3a9a0:	add	r0, r3, r0
   3a9a4:	str	r0, [sl, #40]	; 0x28
   3a9a8:	ldrb	r3, [r4]
   3a9ac:	beq	3aa14 <__assert_fail@plt+0x28420>
   3a9b0:	cmp	r3, #44	; 0x2c
   3a9b4:	cmpne	r2, #24
   3a9b8:	beq	3aa18 <__assert_fail@plt+0x28424>
   3a9bc:	cmp	r2, #1
   3a9c0:	beq	3a9cc <__assert_fail@plt+0x283d8>
   3a9c4:	mov	r5, r7
   3a9c8:	b	3a984 <__assert_fail@plt+0x28390>
   3a9cc:	sub	r1, r3, #48	; 0x30
   3a9d0:	uxtb	r2, r1
   3a9d4:	cmp	r2, #9
   3a9d8:	movhi	r2, #0
   3a9dc:	movls	r2, #1
   3a9e0:	cmn	r5, #2
   3a9e4:	moveq	r2, #0
   3a9e8:	cmp	r2, #0
   3a9ec:	beq	3a9c4 <__assert_fail@plt+0x283d0>
   3a9f0:	cmn	r5, #1
   3a9f4:	moveq	r5, r1
   3a9f8:	beq	3a984 <__assert_fail@plt+0x28390>
   3a9fc:	add	r5, r5, r5, lsl #2
   3aa00:	add	r3, r3, r5, lsl #1
   3aa04:	cmp	r3, r8
   3aa08:	suble	r5, r3, #48	; 0x30
   3aa0c:	movgt	r5, r9
   3aa10:	b	3a984 <__assert_fail@plt+0x28390>
   3aa14:	mvn	r5, #1
   3aa18:	mov	r0, r5
   3aa1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aa20:	andeq	r8, r0, r0, lsr r0
   3aa24:	ldr	ip, [r1, #80]	; 0x50
   3aa28:	push	{r4, r5, r6, r7, r8, r9, lr}
   3aa2c:	sub	sp, sp, #12
   3aa30:	cmp	ip, #1
   3aa34:	ldr	r4, [r1, #40]	; 0x28
   3aa38:	ldrb	r7, [sp, #44]	; 0x2c
   3aa3c:	beq	3aab0 <__assert_fail@plt+0x284bc>
   3aa40:	ldr	lr, [r1, #28]
   3aa44:	add	ip, r4, #1
   3aa48:	cmp	ip, lr
   3aa4c:	bge	3aab0 <__assert_fail@plt+0x284bc>
   3aa50:	ldr	r5, [r1, #8]
   3aa54:	add	r6, r5, ip, lsl #2
   3aa58:	ldr	ip, [r5, ip, lsl #2]
   3aa5c:	cmn	ip, #1
   3aa60:	subeq	lr, lr, r4
   3aa64:	moveq	r2, r6
   3aa68:	moveq	r3, #1
   3aa6c:	beq	3aa80 <__assert_fail@plt+0x2848c>
   3aa70:	b	3aab0 <__assert_fail@plt+0x284bc>
   3aa74:	ldr	ip, [r2, #4]!
   3aa78:	cmn	ip, #1
   3aa7c:	bne	3aa90 <__assert_fail@plt+0x2849c>
   3aa80:	add	r3, r3, #1
   3aa84:	cmp	r3, lr
   3aa88:	add	r5, r3, r4
   3aa8c:	bne	3aa74 <__assert_fail@plt+0x28480>
   3aa90:	ldr	ip, [r6, #-4]
   3aa94:	mov	r2, #1
   3aa98:	mov	r3, #0
   3aa9c:	stm	r0, {r2, ip}
   3aaa0:	str	r5, [r1, #40]	; 0x28
   3aaa4:	mov	r0, r3
   3aaa8:	add	sp, sp, #12
   3aaac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3aab0:	ldrb	ip, [r2, #4]
   3aab4:	add	r4, r4, r3
   3aab8:	str	r4, [r1, #40]	; 0x28
   3aabc:	and	r3, ip, #251	; 0xfb
   3aac0:	cmp	ip, #28
   3aac4:	cmpne	r3, #26
   3aac8:	beq	3ab04 <__assert_fail@plt+0x28510>
   3aacc:	cmp	ip, #22
   3aad0:	moveq	ip, r7
   3aad4:	orrne	ip, r7, #1
   3aad8:	cmp	ip, #0
   3aadc:	mov	r5, r2
   3aae0:	mov	r4, r0
   3aae4:	beq	3ab18 <__assert_fail@plt+0x28524>
   3aae8:	mov	r3, #0
   3aaec:	str	r3, [r4]
   3aaf0:	ldrb	r2, [r5]
   3aaf4:	mov	r0, r3
   3aaf8:	strb	r2, [r4, #4]
   3aafc:	add	sp, sp, #12
   3ab00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3ab04:	ldr	r5, [r1, #56]	; 0x38
   3ab08:	cmp	r4, r5
   3ab0c:	blt	3ab38 <__assert_fail@plt+0x28544>
   3ab10:	mov	r3, #7
   3ab14:	b	3aaa4 <__assert_fail@plt+0x284b0>
   3ab18:	ldr	r2, [sp, #40]	; 0x28
   3ab1c:	mov	r0, sp
   3ab20:	bl	3096c <__assert_fail@plt+0x1e378>
   3ab24:	ldrb	r3, [sp, #4]
   3ab28:	cmp	r3, #21
   3ab2c:	movne	r3, #11
   3ab30:	bne	3aaa4 <__assert_fail@plt+0x284b0>
   3ab34:	b	3aae8 <__assert_fail@plt+0x284f4>
   3ab38:	ldrb	r6, [r2]
   3ab3c:	mov	lr, #0
   3ab40:	b	3ab64 <__assert_fail@plt+0x28570>
   3ab44:	ldr	r3, [r0, #4]
   3ab48:	strb	ip, [r3, lr]
   3ab4c:	add	lr, lr, #1
   3ab50:	cmp	lr, #32
   3ab54:	beq	3ab10 <__assert_fail@plt+0x2851c>
   3ab58:	ldrb	ip, [r2, #4]
   3ab5c:	ldr	r4, [r1, #40]	; 0x28
   3ab60:	ldr	r5, [r1, #56]	; 0x38
   3ab64:	cmp	ip, #30
   3ab68:	beq	3abd4 <__assert_fail@plt+0x285e0>
   3ab6c:	ldr	ip, [r1, #4]
   3ab70:	add	r3, r4, #1
   3ab74:	str	r3, [r1, #40]	; 0x28
   3ab78:	ldrb	ip, [ip, r4]
   3ab7c:	cmp	r5, r3
   3ab80:	ble	3ab10 <__assert_fail@plt+0x2851c>
   3ab84:	cmp	r6, ip
   3ab88:	bne	3ab44 <__assert_fail@plt+0x28550>
   3ab8c:	ldr	r4, [r1, #4]
   3ab90:	ldrb	r4, [r4, r3]
   3ab94:	cmp	r4, #93	; 0x5d
   3ab98:	bne	3ab44 <__assert_fail@plt+0x28550>
   3ab9c:	add	r3, r3, #1
   3aba0:	str	r3, [r1, #40]	; 0x28
   3aba4:	ldr	r1, [r0, #4]
   3aba8:	mov	r3, #0
   3abac:	strb	r3, [r1, lr]
   3abb0:	ldrb	r2, [r2, #4]
   3abb4:	cmp	r2, #28
   3abb8:	beq	3acb4 <__assert_fail@plt+0x286c0>
   3abbc:	cmp	r2, #30
   3abc0:	beq	3aca8 <__assert_fail@plt+0x286b4>
   3abc4:	cmp	r2, #26
   3abc8:	moveq	r2, #3
   3abcc:	streq	r2, [r0]
   3abd0:	b	3aaa4 <__assert_fail@plt+0x284b0>
   3abd4:	ldrb	r3, [r1, #75]	; 0x4b
   3abd8:	cmp	r3, #0
   3abdc:	beq	3ab6c <__assert_fail@plt+0x28578>
   3abe0:	ldrb	r3, [r1, #76]	; 0x4c
   3abe4:	cmp	r3, #0
   3abe8:	beq	3ac84 <__assert_fail@plt+0x28690>
   3abec:	ldr	r8, [r1, #28]
   3abf0:	cmp	r4, r8
   3abf4:	beq	3aca0 <__assert_fail@plt+0x286ac>
   3abf8:	ldr	r3, [r1, #8]
   3abfc:	lsl	ip, r4, #2
   3ac00:	ldr	r3, [r3, r4, lsl #2]
   3ac04:	cmn	r3, #1
   3ac08:	beq	3ab6c <__assert_fail@plt+0x28578>
   3ac0c:	ldr	r7, [r1, #12]
   3ac10:	ldr	r3, [r1]
   3ac14:	ldr	r7, [r7, ip]
   3ac18:	ldr	ip, [r1, #24]
   3ac1c:	add	r3, r3, r7
   3ac20:	ldrb	ip, [r3, ip]
   3ac24:	tst	ip, #128	; 0x80
   3ac28:	bne	3ab6c <__assert_fail@plt+0x28578>
   3ac2c:	ldr	r3, [r1, #80]	; 0x50
   3ac30:	cmp	r3, #1
   3ac34:	add	r3, r4, #1
   3ac38:	beq	3ac7c <__assert_fail@plt+0x28688>
   3ac3c:	cmp	r8, r3
   3ac40:	ble	3ac7c <__assert_fail@plt+0x28688>
   3ac44:	ldr	r9, [r1, #8]
   3ac48:	add	r7, r9, r3, lsl #2
   3ac4c:	ldr	r9, [r9, r3, lsl #2]
   3ac50:	cmn	r9, #1
   3ac54:	addeq	r4, r4, #2
   3ac58:	beq	3ac70 <__assert_fail@plt+0x2867c>
   3ac5c:	b	3ac7c <__assert_fail@plt+0x28688>
   3ac60:	ldr	r9, [r7, #4]!
   3ac64:	add	r4, r4, #1
   3ac68:	cmn	r9, #1
   3ac6c:	bne	3ac7c <__assert_fail@plt+0x28688>
   3ac70:	cmp	r4, r8
   3ac74:	mov	r3, r4
   3ac78:	bne	3ac60 <__assert_fail@plt+0x2866c>
   3ac7c:	str	r3, [r1, #40]	; 0x28
   3ac80:	b	3ab7c <__assert_fail@plt+0x28588>
   3ac84:	ldr	ip, [r1]
   3ac88:	ldr	r7, [r1, #24]
   3ac8c:	add	ip, ip, r4
   3ac90:	add	r3, r4, #1
   3ac94:	str	r3, [r1, #40]	; 0x28
   3ac98:	ldrb	ip, [ip, r7]
   3ac9c:	b	3ab7c <__assert_fail@plt+0x28588>
   3aca0:	lsl	ip, r4, #2
   3aca4:	b	3ac0c <__assert_fail@plt+0x28618>
   3aca8:	mov	r2, #4
   3acac:	str	r2, [r0]
   3acb0:	b	3aaa4 <__assert_fail@plt+0x284b0>
   3acb4:	mov	r2, #2
   3acb8:	str	r2, [r0]
   3acbc:	b	3aaa4 <__assert_fail@plt+0x284b0>
   3acc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3acc4:	sub	sp, sp, #164	; 0xa4
   3acc8:	mov	r4, r1
   3accc:	str	r2, [sp, #20]
   3acd0:	ldrb	r2, [r2, #4]
   3acd4:	ldr	r1, [r1]
   3acd8:	str	r3, [sp, #28]
   3acdc:	sub	r3, r2, #1
   3ace0:	mov	sl, r0
   3ace4:	str	r1, [sp, #24]
   3ace8:	cmp	r3, #35	; 0x23
   3acec:	ldrls	pc, [pc, r3, lsl #2]
   3acf0:	b	3b918 <__assert_fail@plt+0x29324>
   3acf4:	andeq	fp, r3, r8, ror #15
   3acf8:	andeq	sl, r3, r0, lsr #27
   3acfc:	andeq	fp, r3, r8, lsl r9
   3ad00:	andeq	fp, r3, r4, ror r7
   3ad04:	andeq	fp, r3, ip, lsr #6
   3ad08:	andeq	fp, r3, r8, lsl r9
   3ad0c:	andeq	fp, r3, r8, lsl r9
   3ad10:	andeq	fp, r3, r0, ror r3
   3ad14:	andeq	fp, r3, r8, lsr #18
   3ad18:	andeq	sl, r3, r0, lsr #27
   3ad1c:	andeq	sl, r3, r0, asr #27
   3ad20:	andeq	fp, r3, r8, asr #9
   3ad24:	andeq	fp, r3, r8, lsl r9
   3ad28:	andeq	fp, r3, r8, lsl r9
   3ad2c:	andeq	fp, r3, r8, lsl r9
   3ad30:	andeq	fp, r3, r8, lsl r9
   3ad34:	andeq	fp, r3, r8, lsl r9
   3ad38:	andeq	sl, r3, r0, asr #27
   3ad3c:	andeq	sl, r3, r0, asr #27
   3ad40:	andeq	fp, r3, r4, lsr #12
   3ad44:	andeq	fp, r3, r8, lsl r9
   3ad48:	andeq	fp, r3, r8, lsl r9
   3ad4c:			; <UNDEFINED> instruction: 0x0003adb4
   3ad50:	ldrdeq	sl, [r3], -ip
   3ad54:	andeq	fp, r3, r8, lsl r9
   3ad58:	andeq	fp, r3, r8, lsl r9
   3ad5c:	andeq	fp, r3, r8, lsl r9
   3ad60:	andeq	fp, r3, r8, lsl r9
   3ad64:	andeq	fp, r3, r8, lsl r9
   3ad68:	andeq	fp, r3, r8, lsl r9
   3ad6c:	andeq	fp, r3, r8, lsl r9
   3ad70:	strdeq	fp, [r3], -r0
   3ad74:	strdeq	fp, [r3], -r0
   3ad78:	andeq	fp, r3, ip, asr r4
   3ad7c:	andeq	fp, r3, ip, asr r4
   3ad80:			; <UNDEFINED> instruction: 0x0003b4b0
   3ad84:	cmp	r0, #0
   3ad88:	beq	3ad94 <__assert_fail@plt+0x287a0>
   3ad8c:	ldr	r1, [pc, #4032]	; 3bd54 <__assert_fail@plt+0x29760>
   3ad90:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3ad94:	ldr	r2, [sp, #204]	; 0xcc
   3ad98:	mov	r3, #8
   3ad9c:	str	r3, [r2]
   3ada0:	mov	r3, #0
   3ada4:	str	r3, [sp, #32]
   3ada8:	ldr	r0, [sp, #32]
   3adac:	add	sp, sp, #164	; 0xa4
   3adb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3adb4:	ldr	r3, [sp, #28]
   3adb8:	tst	r3, #16777216	; 0x1000000
   3adbc:	bne	3b058 <__assert_fail@plt+0x28a64>
   3adc0:	ldr	r3, [sp, #28]
   3adc4:	tst	r3, #32
   3adc8:	bne	3b058 <__assert_fail@plt+0x28a64>
   3adcc:	tst	r3, #16
   3add0:	bne	3bae8 <__assert_fail@plt+0x294f4>
   3add4:	cmp	r2, #9
   3add8:	beq	3b928 <__assert_fail@plt+0x29334>
   3addc:	ldr	r1, [sp, #20]
   3ade0:	ldr	r0, [sp, #24]
   3ade4:	mov	r3, #0
   3ade8:	mov	r2, #1
   3adec:	str	r1, [sp]
   3adf0:	strb	r2, [r1, #4]
   3adf4:	mov	r2, r3
   3adf8:	add	r1, r0, #64	; 0x40
   3adfc:	add	r0, r0, #56	; 0x38
   3ae00:	bl	3295c <__assert_fail@plt+0x20368>
   3ae04:	subs	r3, r0, #0
   3ae08:	str	r3, [sp, #32]
   3ae0c:	beq	3b8d8 <__assert_fail@plt+0x292e4>
   3ae10:	ldr	r4, [sp, #20]
   3ae14:	ldr	r2, [sp, #28]
   3ae18:	mov	r1, sl
   3ae1c:	mov	r0, r4
   3ae20:	bl	39ffc <__assert_fail@plt+0x27a08>
   3ae24:	ldr	r2, [sl, #40]	; 0x28
   3ae28:	mov	fp, #0
   3ae2c:	ldrb	r3, [r4, #4]
   3ae30:	add	r2, r2, r0
   3ae34:	str	r2, [sl, #40]	; 0x28
   3ae38:	cmp	r3, #23
   3ae3c:	bhi	3ada8 <__assert_fail@plt+0x287b4>
   3ae40:	ldr	r2, [pc, #3856]	; 3bd58 <__assert_fail@plt+0x29764>
   3ae44:	sub	r6, r3, #18
   3ae48:	clz	r6, r6
   3ae4c:	mvn	r2, r2, lsr r3
   3ae50:	tst	r2, #1
   3ae54:	lsr	r6, r6, #5
   3ae58:	bne	3ada8 <__assert_fail@plt+0x287b4>
   3ae5c:	ldr	r2, [sp, #20]
   3ae60:	cmp	r3, #23
   3ae64:	ldr	r4, [sl, #40]	; 0x28
   3ae68:	ldm	r2, {r0, r1}
   3ae6c:	add	r2, sp, #96	; 0x60
   3ae70:	stm	r2, {r0, r1}
   3ae74:	beq	3b128 <__assert_fail@plt+0x28b34>
   3ae78:	cmp	r3, #19
   3ae7c:	moveq	r3, #1
   3ae80:	mvnne	r3, #0
   3ae84:	ldr	r2, [sp, #28]
   3ae88:	mov	r1, sl
   3ae8c:	ldr	r0, [sp, #20]
   3ae90:	str	r3, [sp, #16]
   3ae94:	bl	39ffc <__assert_fail@plt+0x27a08>
   3ae98:	ldr	r3, [sl, #40]	; 0x28
   3ae9c:	ldr	r2, [sp, #32]
   3aea0:	cmp	r2, #0
   3aea4:	add	r0, r3, r0
   3aea8:	str	r0, [sl, #40]	; 0x28
   3aeac:	beq	3b198 <__assert_fail@plt+0x28ba4>
   3aeb0:	cmp	r6, #0
   3aeb4:	strle	fp, [sp, #36]	; 0x24
   3aeb8:	ldrle	r5, [sp, #32]
   3aebc:	bgt	3b078 <__assert_fail@plt+0x28a84>
   3aec0:	ldrb	r3, [r5, #24]
   3aec4:	cmp	r3, #17
   3aec8:	beq	3b1b0 <__assert_fail@plt+0x28bbc>
   3aecc:	ldr	r3, [sp, #24]
   3aed0:	ldr	r2, [sp, #16]
   3aed4:	add	r4, sp, #128	; 0x80
   3aed8:	cmn	r2, #1
   3aedc:	add	r7, r3, #56	; 0x38
   3aee0:	add	r8, r3, #64	; 0x40
   3aee4:	movne	ip, #10
   3aee8:	moveq	ip, #11
   3aeec:	str	r4, [sp]
   3aef0:	mov	r0, r7
   3aef4:	str	fp, [r4, #4]
   3aef8:	mov	r1, r8
   3aefc:	mov	r3, #0
   3af00:	mov	r2, r5
   3af04:	str	fp, [sp, #128]	; 0x80
   3af08:	strb	ip, [sp, #132]	; 0x84
   3af0c:	bl	3295c <__assert_fail@plt+0x20368>
   3af10:	subs	r9, r0, #0
   3af14:	beq	3b0fc <__assert_fail@plt+0x28b08>
   3af18:	ldr	r2, [sp, #16]
   3af1c:	add	r6, r6, #2
   3af20:	cmp	r6, r2
   3af24:	bgt	3afc8 <__assert_fail@plt+0x289d4>
   3af28:	str	sl, [sp, #40]	; 0x28
   3af2c:	mov	sl, r9
   3af30:	ldr	r9, [sp, #24]
   3af34:	mov	r0, r5
   3af38:	mov	r1, r9
   3af3c:	bl	32a20 <__assert_fail@plt+0x2042c>
   3af40:	mov	ip, #16
   3af44:	str	r4, [sp]
   3af48:	mov	r2, sl
   3af4c:	str	fp, [r4, #4]
   3af50:	mov	r1, r8
   3af54:	str	fp, [r4]
   3af58:	strb	ip, [sp, #132]	; 0x84
   3af5c:	mov	r5, r0
   3af60:	mov	r3, r0
   3af64:	mov	r0, r7
   3af68:	bl	3295c <__assert_fail@plt+0x20368>
   3af6c:	cmp	r0, #0
   3af70:	cmpne	r5, #0
   3af74:	moveq	ip, #1
   3af78:	movne	ip, #0
   3af7c:	beq	3b0fc <__assert_fail@plt+0x28b08>
   3af80:	str	r4, [sp]
   3af84:	mov	r2, r0
   3af88:	str	ip, [r4, #4]
   3af8c:	str	ip, [r4]
   3af90:	mov	r3, fp
   3af94:	mov	ip, #10
   3af98:	mov	r1, r8
   3af9c:	mov	r0, r7
   3afa0:	strb	ip, [sp, #132]	; 0x84
   3afa4:	bl	3295c <__assert_fail@plt+0x20368>
   3afa8:	subs	sl, r0, #0
   3afac:	beq	3b0fc <__assert_fail@plt+0x28b08>
   3afb0:	ldr	r3, [sp, #16]
   3afb4:	add	r6, r6, #1
   3afb8:	cmp	r6, r3
   3afbc:	ble	3af34 <__assert_fail@plt+0x28940>
   3afc0:	mov	r9, sl
   3afc4:	ldr	sl, [sp, #40]	; 0x28
   3afc8:	ldr	r2, [sp, #36]	; 0x24
   3afcc:	cmp	r2, #0
   3afd0:	beq	3b2c8 <__assert_fail@plt+0x28cd4>
   3afd4:	str	r4, [sp]
   3afd8:	mov	ip, #16
   3afdc:	str	fp, [r4, #4]
   3afe0:	mov	r3, r9
   3afe4:	mov	r1, r8
   3afe8:	mov	r0, r7
   3afec:	str	fp, [r4]
   3aff0:	strb	ip, [sp, #132]	; 0x84
   3aff4:	bl	3295c <__assert_fail@plt+0x20368>
   3aff8:	ldr	r3, [sp, #204]	; 0xcc
   3affc:	ldr	r3, [r3]
   3b000:	adds	r3, r3, #0
   3b004:	movne	r3, #1
   3b008:	cmp	r0, #0
   3b00c:	movne	r3, #0
   3b010:	cmp	r3, #0
   3b014:	bne	3b108 <__assert_fail@plt+0x28b14>
   3b018:	str	r0, [sp, #32]
   3b01c:	ldr	r3, [sp, #28]
   3b020:	tst	r3, #16777216	; 0x1000000
   3b024:	ldr	r3, [sp, #20]
   3b028:	ldrb	r3, [r3, #4]
   3b02c:	beq	3ae38 <__assert_fail@plt+0x28844>
   3b030:	cmp	r3, #23
   3b034:	cmpne	r3, #11
   3b038:	bne	3ae38 <__assert_fail@plt+0x28844>
   3b03c:	ldr	r3, [sp, #32]
   3b040:	cmp	r3, #0
   3b044:	beq	3b058 <__assert_fail@plt+0x28a64>
   3b048:	mov	r0, r3
   3b04c:	mov	r2, #0
   3b050:	ldr	r1, [pc, #3324]	; 3bd54 <__assert_fail@plt+0x29760>
   3b054:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3b058:	ldr	r2, [sp, #204]	; 0xcc
   3b05c:	mov	r3, #13
   3b060:	str	r3, [r2]
   3b064:	mov	r3, #0
   3b068:	str	r3, [sp, #32]
   3b06c:	ldr	r0, [sp, #32]
   3b070:	add	sp, sp, #164	; 0xa4
   3b074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b078:	cmp	r6, #1
   3b07c:	beq	3b918 <__assert_fail@plt+0x29324>
   3b080:	ldr	r3, [sp, #24]
   3b084:	ldr	r5, [sp, #32]
   3b088:	add	r2, r3, #56	; 0x38
   3b08c:	str	sl, [sp, #40]	; 0x28
   3b090:	str	r2, [sp, #36]	; 0x24
   3b094:	add	r9, r3, #64	; 0x40
   3b098:	mov	r7, #2
   3b09c:	add	r4, sp, #128	; 0x80
   3b0a0:	mov	r8, #16
   3b0a4:	mov	sl, r5
   3b0a8:	b	3b0b8 <__assert_fail@plt+0x28ac4>
   3b0ac:	add	r7, r7, #1
   3b0b0:	cmp	r7, r6
   3b0b4:	bgt	3b300 <__assert_fail@plt+0x28d0c>
   3b0b8:	mov	r0, r5
   3b0bc:	ldr	r1, [sp, #24]
   3b0c0:	bl	32a20 <__assert_fail@plt+0x2042c>
   3b0c4:	str	r4, [sp]
   3b0c8:	mov	r2, sl
   3b0cc:	str	fp, [r4, #4]
   3b0d0:	mov	r1, r9
   3b0d4:	str	fp, [r4]
   3b0d8:	strb	r8, [sp, #132]	; 0x84
   3b0dc:	mov	r5, r0
   3b0e0:	mov	r3, r0
   3b0e4:	ldr	r0, [sp, #36]	; 0x24
   3b0e8:	bl	3295c <__assert_fail@plt+0x20368>
   3b0ec:	cmp	r0, #0
   3b0f0:	cmpne	r5, #0
   3b0f4:	mov	sl, r0
   3b0f8:	bne	3b0ac <__assert_fail@plt+0x28ab8>
   3b0fc:	ldr	r2, [sp, #204]	; 0xcc
   3b100:	mov	r3, #12
   3b104:	str	r3, [r2]
   3b108:	ldr	r3, [sp, #32]
   3b10c:	cmp	r3, #0
   3b110:	beq	3ada0 <__assert_fail@plt+0x287ac>
   3b114:	mov	r0, r3
   3b118:	mov	r2, #0
   3b11c:	ldr	r1, [pc, #3120]	; 3bd54 <__assert_fail@plt+0x29760>
   3b120:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3b124:	b	3ada0 <__assert_fail@plt+0x287ac>
   3b128:	ldr	r2, [sp, #28]
   3b12c:	ldr	r1, [sp, #20]
   3b130:	mov	r0, sl
   3b134:	bl	3a964 <__assert_fail@plt+0x28370>
   3b138:	cmn	r0, #1
   3b13c:	str	r0, [sp, #16]
   3b140:	beq	3b1c4 <__assert_fail@plt+0x28bd0>
   3b144:	ldr	r3, [sp, #16]
   3b148:	cmn	r3, #2
   3b14c:	beq	3b168 <__assert_fail@plt+0x28b74>
   3b150:	ldr	r3, [sp, #20]
   3b154:	ldrb	r3, [r3, #4]
   3b158:	cmp	r3, #24
   3b15c:	beq	3b2d0 <__assert_fail@plt+0x28cdc>
   3b160:	cmp	r3, #1
   3b164:	beq	3b298 <__assert_fail@plt+0x28ca4>
   3b168:	ldr	r3, [sp, #28]
   3b16c:	tst	r3, #2097152	; 0x200000
   3b170:	beq	3bd34 <__assert_fail@plt+0x29740>
   3b174:	add	r3, sp, #96	; 0x60
   3b178:	ldr	r2, [sp, #20]
   3b17c:	ldm	r3, {r0, r1}
   3b180:	mov	r3, #1
   3b184:	str	r4, [sl, #40]	; 0x28
   3b188:	stm	r2, {r0, r1}
   3b18c:	ldr	r0, [sp, #32]
   3b190:	strb	r3, [r2, #4]
   3b194:	b	3aff8 <__assert_fail@plt+0x28a04>
   3b198:	ldr	r3, [sp, #204]	; 0xcc
   3b19c:	ldr	r3, [r3]
   3b1a0:	cmp	r3, #0
   3b1a4:	bne	3b108 <__assert_fail@plt+0x28b14>
   3b1a8:	str	fp, [sp, #32]
   3b1ac:	b	3b01c <__assert_fail@plt+0x28a28>
   3b1b0:	ldr	r2, [r5, #20]
   3b1b4:	ldr	r1, [pc, #2976]	; 3bd5c <__assert_fail@plt+0x29768>
   3b1b8:	mov	r0, r5
   3b1bc:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3b1c0:	b	3aecc <__assert_fail@plt+0x288d8>
   3b1c4:	ldr	r3, [sp, #20]
   3b1c8:	ldrb	r3, [r3, #4]
   3b1cc:	cmp	r3, #1
   3b1d0:	bne	3b2b4 <__assert_fail@plt+0x28cc0>
   3b1d4:	ldr	r3, [sp, #20]
   3b1d8:	ldrb	r3, [r3]
   3b1dc:	cmp	r3, #44	; 0x2c
   3b1e0:	bne	3b2b4 <__assert_fail@plt+0x28cc0>
   3b1e4:	mov	r6, fp
   3b1e8:	ldr	r2, [sp, #28]
   3b1ec:	ldr	r1, [sp, #20]
   3b1f0:	mov	r0, sl
   3b1f4:	bl	3a964 <__assert_fail@plt+0x28370>
   3b1f8:	cmn	r0, #2
   3b1fc:	str	r0, [sp, #16]
   3b200:	beq	3b168 <__assert_fail@plt+0x28b74>
   3b204:	ldr	r2, [sp, #16]
   3b208:	cmn	r2, #1
   3b20c:	cmpne	r6, r2
   3b210:	bgt	3b2b4 <__assert_fail@plt+0x28cc0>
   3b214:	ldr	r3, [sp, #20]
   3b218:	ldrb	r3, [r3, #4]
   3b21c:	cmp	r3, #24
   3b220:	bne	3b2b4 <__assert_fail@plt+0x28cc0>
   3b224:	cmn	r2, #1
   3b228:	beq	3b2d8 <__assert_fail@plt+0x28ce4>
   3b22c:	ldr	r3, [sp, #16]
   3b230:	ldr	r2, [pc, #2856]	; 3bd60 <__assert_fail@plt+0x2976c>
   3b234:	cmp	r3, r2
   3b238:	movle	r3, #0
   3b23c:	movgt	r3, #1
   3b240:	cmp	r3, #0
   3b244:	bne	3b2f0 <__assert_fail@plt+0x28cfc>
   3b248:	ldr	r2, [sp, #28]
   3b24c:	mov	r1, sl
   3b250:	ldr	r0, [sp, #20]
   3b254:	bl	39ffc <__assert_fail@plt+0x27a08>
   3b258:	ldr	r3, [sl, #40]	; 0x28
   3b25c:	ldr	ip, [sp, #32]
   3b260:	cmp	ip, #0
   3b264:	add	r0, r3, r0
   3b268:	str	r0, [sl, #40]	; 0x28
   3b26c:	beq	3b198 <__assert_fail@plt+0x28ba4>
   3b270:	ldr	r3, [sp, #16]
   3b274:	orrs	r3, r3, r6
   3b278:	bne	3aeb0 <__assert_fail@plt+0x288bc>
   3b27c:	mov	r2, fp
   3b280:	ldr	r1, [pc, #2764]	; 3bd54 <__assert_fail@plt+0x29760>
   3b284:	mov	r0, ip
   3b288:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3b28c:	ldr	r3, [sp, #204]	; 0xcc
   3b290:	ldr	r3, [r3]
   3b294:	b	3b1a0 <__assert_fail@plt+0x28bac>
   3b298:	ldr	r3, [sp, #20]
   3b29c:	ldrb	r3, [r3]
   3b2a0:	cmp	r3, #44	; 0x2c
   3b2a4:	beq	3c1f8 <__assert_fail@plt+0x29c04>
   3b2a8:	ldr	r3, [sp, #28]
   3b2ac:	tst	r3, #2097152	; 0x200000
   3b2b0:	bne	3b174 <__assert_fail@plt+0x28b80>
   3b2b4:	ldr	r2, [sp, #204]	; 0xcc
   3b2b8:	mov	r3, #10
   3b2bc:	str	r3, [r2]
   3b2c0:	b	3b108 <__assert_fail@plt+0x28b14>
   3b2c4:	ldr	r9, [sp, #36]	; 0x24
   3b2c8:	str	r9, [sp, #32]
   3b2cc:	b	3b01c <__assert_fail@plt+0x28a28>
   3b2d0:	ldr	r6, [sp, #16]
   3b2d4:	b	3b22c <__assert_fail@plt+0x28c38>
   3b2d8:	add	r3, r2, #32768	; 0x8000
   3b2dc:	cmp	r6, r3
   3b2e0:	movle	r3, #0
   3b2e4:	movgt	r3, #1
   3b2e8:	cmp	r3, #0
   3b2ec:	beq	3b248 <__assert_fail@plt+0x28c54>
   3b2f0:	ldr	r2, [sp, #204]	; 0xcc
   3b2f4:	mov	r3, #15
   3b2f8:	str	r3, [r2]
   3b2fc:	b	3b108 <__assert_fail@plt+0x28b14>
   3b300:	ldr	sl, [sp, #40]	; 0x28
   3b304:	str	r0, [sp, #36]	; 0x24
   3b308:	ldr	r3, [sp, #16]
   3b30c:	cmp	r6, r3
   3b310:	beq	3b2c4 <__assert_fail@plt+0x28cd0>
   3b314:	mov	r0, r5
   3b318:	ldr	r1, [sp, #24]
   3b31c:	bl	32a20 <__assert_fail@plt+0x2042c>
   3b320:	subs	r5, r0, #0
   3b324:	bne	3aec0 <__assert_fail@plt+0x288cc>
   3b328:	b	3b0fc <__assert_fail@plt+0x28b08>
   3b32c:	ldr	r2, [sp, #20]
   3b330:	ldr	r4, [sp, #24]
   3b334:	mov	r3, #0
   3b338:	str	r2, [sp]
   3b33c:	add	r1, r4, #64	; 0x40
   3b340:	mov	r2, r3
   3b344:	add	r0, r4, #56	; 0x38
   3b348:	bl	3295c <__assert_fail@plt+0x20368>
   3b34c:	subs	r3, r0, #0
   3b350:	str	r3, [sp, #32]
   3b354:	beq	3b8d8 <__assert_fail@plt+0x292e4>
   3b358:	ldr	r3, [r4, #92]	; 0x5c
   3b35c:	cmp	r3, #1
   3b360:	ldrbgt	r3, [r4, #88]	; 0x58
   3b364:	orrgt	r3, r3, #2
   3b368:	strbgt	r3, [r4, #88]	; 0x58
   3b36c:	b	3ae10 <__assert_fail@plt+0x2881c>
   3b370:	ldr	r5, [r4, #24]
   3b374:	ldr	r6, [sp, #20]
   3b378:	ldr	r7, [sp, #28]
   3b37c:	add	r3, r5, #1
   3b380:	orr	r2, r7, #8388608	; 0x800000
   3b384:	str	r3, [r4, #24]
   3b388:	mov	r1, r0
   3b38c:	mov	r0, r6
   3b390:	bl	39ffc <__assert_fail@plt+0x27a08>
   3b394:	ldrb	r2, [r6, #4]
   3b398:	ldr	r3, [sl, #40]	; 0x28
   3b39c:	cmp	r2, #9
   3b3a0:	add	r3, r3, r0
   3b3a4:	str	r3, [sl, #40]	; 0x28
   3b3a8:	beq	3b948 <__assert_fail@plt+0x29354>
   3b3ac:	ldr	r3, [sp, #200]	; 0xc8
   3b3b0:	ldr	r2, [sp, #204]	; 0xcc
   3b3b4:	add	r3, r3, #1
   3b3b8:	str	r2, [sp, #4]
   3b3bc:	str	r3, [sp]
   3b3c0:	mov	r2, r6
   3b3c4:	mov	r3, r7
   3b3c8:	mov	r1, r4
   3b3cc:	mov	r0, sl
   3b3d0:	bl	3c3b0 <__assert_fail@plt+0x29dbc>
   3b3d4:	ldr	r2, [sp, #204]	; 0xcc
   3b3d8:	ldr	r2, [r2]
   3b3dc:	cmp	r2, #0
   3b3e0:	mov	r3, r0
   3b3e4:	bne	3ada0 <__assert_fail@plt+0x287ac>
   3b3e8:	ldr	r1, [sp, #20]
   3b3ec:	ldrb	r1, [r1, #4]
   3b3f0:	cmp	r1, #9
   3b3f4:	bne	3ad84 <__assert_fail@plt+0x28790>
   3b3f8:	cmp	r5, #8
   3b3fc:	bhi	3b414 <__assert_fail@plt+0x28e20>
   3b400:	ldr	r0, [sp, #24]
   3b404:	mov	r1, #1
   3b408:	ldr	r2, [r0, #84]	; 0x54
   3b40c:	orr	r2, r2, r1, lsl r5
   3b410:	str	r2, [r0, #84]	; 0x54
   3b414:	add	ip, sp, #128	; 0x80
   3b418:	str	ip, [sp]
   3b41c:	ldr	ip, [sp, #24]
   3b420:	mov	r0, #0
   3b424:	str	r0, [sp, #132]	; 0x84
   3b428:	mov	r2, r3
   3b42c:	mov	lr, #17
   3b430:	mov	r3, r0
   3b434:	str	r0, [sp, #128]	; 0x80
   3b438:	add	r1, ip, #64	; 0x40
   3b43c:	add	r0, ip, #56	; 0x38
   3b440:	strb	lr, [sp, #132]	; 0x84
   3b444:	bl	3295c <__assert_fail@plt+0x20368>
   3b448:	subs	r3, r0, #0
   3b44c:	str	r3, [sp, #32]
   3b450:	beq	3b8d8 <__assert_fail@plt+0x292e4>
   3b454:	str	r5, [r3, #20]
   3b458:	b	3ae10 <__assert_fail@plt+0x2881c>
   3b45c:	ldr	r3, [sp, #204]	; 0xcc
   3b460:	sub	r2, r2, #35	; 0x23
   3b464:	clz	r2, r2
   3b468:	lsr	r2, r2, #5
   3b46c:	ldr	r1, [r0, #64]	; 0x40
   3b470:	str	r2, [sp]
   3b474:	str	r3, [sp, #4]
   3b478:	ldr	r2, [pc, #2276]	; 3bd64 <__assert_fail@plt+0x29770>
   3b47c:	ldr	r3, [pc, #2276]	; 3bd68 <__assert_fail@plt+0x29774>
   3b480:	ldr	r0, [sp, #24]
   3b484:	bl	361b0 <__assert_fail@plt+0x23bbc>
   3b488:	ldr	r3, [sp, #204]	; 0xcc
   3b48c:	ldr	r3, [r3]
   3b490:	adds	r3, r3, #0
   3b494:	movne	r3, #1
   3b498:	cmp	r0, #0
   3b49c:	movne	r3, #0
   3b4a0:	cmp	r3, #0
   3b4a4:	str	r0, [sp, #32]
   3b4a8:	beq	3ae10 <__assert_fail@plt+0x2881c>
   3b4ac:	b	3ada0 <__assert_fail@plt+0x287ac>
   3b4b0:	ldr	r2, [sp, #204]	; 0xcc
   3b4b4:	mov	r3, #5
   3b4b8:	str	r3, [r2]
   3b4bc:	mov	r3, #0
   3b4c0:	str	r3, [sp, #32]
   3b4c4:	b	3ada8 <__assert_fail@plt+0x287b4>
   3b4c8:	ldr	r3, [sp, #20]
   3b4cc:	ldr	r2, [r3]
   3b4d0:	ldr	r3, [pc, #2196]	; 3bd6c <__assert_fail@plt+0x29778>
   3b4d4:	and	r3, r3, r2
   3b4d8:	cmp	r3, #0
   3b4dc:	beq	3b544 <__assert_fail@plt+0x28f50>
   3b4e0:	ldr	r3, [sp, #24]
   3b4e4:	ldrb	r3, [r3, #88]	; 0x58
   3b4e8:	ands	r4, r3, #16
   3b4ec:	bne	3b544 <__assert_fail@plt+0x28f50>
   3b4f0:	ldr	r0, [sp, #24]
   3b4f4:	orr	r3, r3, #16
   3b4f8:	ands	r2, r3, #8
   3b4fc:	mov	r1, r3
   3b500:	strb	r3, [r0, #88]	; 0x58
   3b504:	bne	3c000 <__assert_fail@plt+0x29a0c>
   3b508:	ldr	r3, [pc, #2144]	; 3bd70 <__assert_fail@plt+0x2977c>
   3b50c:	tst	r1, #4
   3b510:	str	r3, [r0, #100]	; 0x64
   3b514:	mvn	r1, #2013265921	; 0x78000001
   3b518:	mvn	r3, #-134217727	; 0xf8000001
   3b51c:	str	r2, [r0, #96]	; 0x60
   3b520:	str	r1, [r0, #104]	; 0x68
   3b524:	str	r3, [r0, #108]	; 0x6c
   3b528:	beq	3bf78 <__assert_fail@plt+0x29984>
   3b52c:	ldr	r3, [sp, #20]
   3b530:	str	r2, [r0, #112]	; 0x70
   3b534:	str	r2, [r0, #116]	; 0x74
   3b538:	str	r2, [r0, #120]	; 0x78
   3b53c:	str	r2, [r0, #124]	; 0x7c
   3b540:	ldr	r2, [r3]
   3b544:	sub	r3, r2, #256	; 0x100
   3b548:	bics	r3, r3, #256	; 0x100
   3b54c:	bne	3bb38 <__assert_fail@plt+0x29544>
   3b550:	cmp	r2, #256	; 0x100
   3b554:	beq	3ba50 <__assert_fail@plt+0x2945c>
   3b558:	ldr	r1, [sp, #24]
   3b55c:	ldr	r7, [sp, #20]
   3b560:	mov	r2, #5
   3b564:	add	r5, r1, #56	; 0x38
   3b568:	add	r6, r1, #64	; 0x40
   3b56c:	str	r7, [sp]
   3b570:	mov	r1, r6
   3b574:	str	r2, [r7]
   3b578:	mov	r0, r5
   3b57c:	mov	r2, r3
   3b580:	bl	3295c <__assert_fail@plt+0x20368>
   3b584:	mov	r3, #10
   3b588:	str	r3, [r7]
   3b58c:	mov	r4, r0
   3b590:	ldr	r2, [sp, #20]
   3b594:	mov	r3, #0
   3b598:	str	r2, [sp]
   3b59c:	mov	r1, r6
   3b5a0:	mov	r2, r3
   3b5a4:	mov	r0, r5
   3b5a8:	bl	3295c <__assert_fail@plt+0x20368>
   3b5ac:	add	r2, sp, #128	; 0x80
   3b5b0:	mov	ip, #0
   3b5b4:	str	r2, [sp]
   3b5b8:	mov	lr, #10
   3b5bc:	mov	r1, r6
   3b5c0:	mov	r2, r4
   3b5c4:	str	ip, [sp, #132]	; 0x84
   3b5c8:	str	ip, [sp, #128]	; 0x80
   3b5cc:	strb	lr, [sp, #132]	; 0x84
   3b5d0:	mov	r7, r0
   3b5d4:	mov	r3, r7
   3b5d8:	mov	r0, r5
   3b5dc:	bl	3295c <__assert_fail@plt+0x20368>
   3b5e0:	cmp	r7, #0
   3b5e4:	cmpne	r4, #0
   3b5e8:	moveq	r3, #1
   3b5ec:	movne	r3, #0
   3b5f0:	cmp	r0, #0
   3b5f4:	orreq	r3, r3, #1
   3b5f8:	cmp	r3, #0
   3b5fc:	str	r0, [sp, #32]
   3b600:	bne	3b8d8 <__assert_fail@plt+0x292e4>
   3b604:	ldr	r2, [sp, #28]
   3b608:	ldr	r0, [sp, #20]
   3b60c:	mov	r1, sl
   3b610:	bl	39ffc <__assert_fail@plt+0x27a08>
   3b614:	ldr	r3, [sl, #40]	; 0x28
   3b618:	add	r3, r3, r0
   3b61c:	str	r3, [sl, #40]	; 0x28
   3b620:	b	3ada8 <__assert_fail@plt+0x287b4>
   3b624:	mov	r3, #0
   3b628:	mov	r1, #1
   3b62c:	mov	r0, #32
   3b630:	str	r3, [sp, #68]	; 0x44
   3b634:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   3b638:	mov	r1, #1
   3b63c:	mov	r9, r0
   3b640:	mov	r0, #40	; 0x28
   3b644:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   3b648:	cmp	r0, #0
   3b64c:	cmpne	r9, #0
   3b650:	moveq	r3, #1
   3b654:	movne	r3, #0
   3b658:	mov	r6, r0
   3b65c:	str	r3, [sp, #36]	; 0x24
   3b660:	beq	3bcf8 <__assert_fail@plt+0x29704>
   3b664:	ldr	r4, [sp, #20]
   3b668:	ldr	r2, [sp, #28]
   3b66c:	mov	r1, sl
   3b670:	mov	r0, r4
   3b674:	bl	3096c <__assert_fail@plt+0x1e378>
   3b678:	ldrb	r3, [r4, #4]
   3b67c:	cmp	r3, #2
   3b680:	mov	fp, r0
   3b684:	beq	3bd18 <__assert_fail@plt+0x29724>
   3b688:	cmp	r3, #25
   3b68c:	beq	3ba8c <__assert_fail@plt+0x29498>
   3b690:	ldr	r2, [sp, #36]	; 0x24
   3b694:	str	r2, [sp, #40]	; 0x28
   3b698:	cmp	r3, #21
   3b69c:	ldr	r1, [sp, #28]
   3b6a0:	ldreq	r2, [sp, #20]
   3b6a4:	moveq	r3, #1
   3b6a8:	ldr	r4, [sp, #20]
   3b6ac:	strbeq	r3, [r2, #4]
   3b6b0:	mov	r3, #0
   3b6b4:	mov	r2, r3
   3b6b8:	str	r3, [sp, #32]
   3b6bc:	lsr	r3, r1, #16
   3b6c0:	and	r3, r3, #1
   3b6c4:	str	r2, [sp, #16]
   3b6c8:	str	r3, [sp, #52]	; 0x34
   3b6cc:	add	r2, r6, #36	; 0x24
   3b6d0:	mov	r8, r9
   3b6d4:	mov	r3, #1
   3b6d8:	mov	r9, r1
   3b6dc:	str	r2, [sp, #44]	; 0x2c
   3b6e0:	add	r2, r6, #12
   3b6e4:	str	r2, [sp, #48]	; 0x30
   3b6e8:	add	ip, sp, #96	; 0x60
   3b6ec:	str	r3, [sp, #4]
   3b6f0:	str	ip, [sp, #76]	; 0x4c
   3b6f4:	str	r9, [sp]
   3b6f8:	mov	ip, #3
   3b6fc:	mov	r3, fp
   3b700:	mov	r2, r4
   3b704:	mov	r1, sl
   3b708:	add	r0, sp, #72	; 0x48
   3b70c:	str	ip, [sp, #72]	; 0x48
   3b710:	bl	3aa24 <__assert_fail@plt+0x28430>
   3b714:	cmp	r0, #0
   3b718:	bne	3bb68 <__assert_fail@plt+0x29574>
   3b71c:	mov	r2, r9
   3b720:	mov	r1, sl
   3b724:	mov	r0, r4
   3b728:	bl	3096c <__assert_fail@plt+0x1e378>
   3b72c:	ldr	r3, [sp, #72]	; 0x48
   3b730:	sub	r2, r3, #2
   3b734:	bics	r2, r2, #2
   3b738:	mov	fp, r0
   3b73c:	beq	3b754 <__assert_fail@plt+0x29160>
   3b740:	ldrb	r2, [r4, #4]
   3b744:	cmp	r2, #2
   3b748:	beq	3bb80 <__assert_fail@plt+0x2958c>
   3b74c:	cmp	r2, #22
   3b750:	beq	3bb94 <__assert_fail@plt+0x295a0>
   3b754:	cmp	r3, #4
   3b758:	ldrls	pc, [pc, r3, lsl #2]
   3b75c:	b	3bb80 <__assert_fail@plt+0x2958c>
   3b760:	andeq	fp, r3, r0, lsr sl
   3b764:	andeq	fp, r3, r8, lsl #20
   3b768:	andeq	fp, r3, r8, ror #19
   3b76c:	andeq	fp, r3, r0, lsr #19
   3b770:	andeq	fp, r3, r0, asr r9
   3b774:	ldr	r3, [sp, #20]
   3b778:	mov	r2, #1
   3b77c:	ldr	r1, [r3]
   3b780:	ldr	r3, [sp, #24]
   3b784:	lsl	r2, r2, r1
   3b788:	ldr	r3, [r3, #84]	; 0x54
   3b78c:	ands	r3, r2, r3
   3b790:	beq	3bce4 <__assert_fail@plt+0x296f0>
   3b794:	ldr	r4, [sp, #24]
   3b798:	ldr	r0, [sp, #20]
   3b79c:	mov	r3, #0
   3b7a0:	ldr	r1, [r4, #80]	; 0x50
   3b7a4:	orr	r2, r1, r2
   3b7a8:	str	r2, [r4, #80]	; 0x50
   3b7ac:	add	r1, r4, #64	; 0x40
   3b7b0:	mov	r2, r3
   3b7b4:	str	r0, [sp]
   3b7b8:	add	r0, r4, #56	; 0x38
   3b7bc:	bl	3295c <__assert_fail@plt+0x20368>
   3b7c0:	subs	r3, r0, #0
   3b7c4:	str	r3, [sp, #32]
   3b7c8:	beq	3b8d8 <__assert_fail@plt+0x292e4>
   3b7cc:	ldrb	r2, [r4, #88]	; 0x58
   3b7d0:	ldr	r3, [r4, #76]	; 0x4c
   3b7d4:	orr	r2, r2, #2
   3b7d8:	add	r3, r3, #1
   3b7dc:	strb	r2, [r4, #88]	; 0x58
   3b7e0:	str	r3, [r4, #76]	; 0x4c
   3b7e4:	b	3ae10 <__assert_fail@plt+0x2881c>
   3b7e8:	ldr	r3, [sp, #24]
   3b7ec:	ldr	r2, [sp, #20]
   3b7f0:	add	r8, r3, #56	; 0x38
   3b7f4:	add	r7, r3, #64	; 0x40
   3b7f8:	mov	r3, #0
   3b7fc:	str	r2, [sp]
   3b800:	mov	r0, r8
   3b804:	mov	r2, r3
   3b808:	mov	r1, r7
   3b80c:	bl	3295c <__assert_fail@plt+0x20368>
   3b810:	subs	r3, r0, #0
   3b814:	str	r3, [sp, #32]
   3b818:	beq	3b8d8 <__assert_fail@plt+0x292e4>
   3b81c:	ldr	r3, [sp, #24]
   3b820:	ldr	r3, [r3, #92]	; 0x5c
   3b824:	cmp	r3, #1
   3b828:	ble	3ae10 <__assert_fail@plt+0x2881c>
   3b82c:	ldr	r6, [sp, #32]
   3b830:	mov	r5, #0
   3b834:	add	r4, sp, #128	; 0x80
   3b838:	mov	r9, #16
   3b83c:	ldr	r3, [sl, #40]	; 0x28
   3b840:	ldr	r2, [sl, #56]	; 0x38
   3b844:	cmp	r2, r3
   3b848:	ble	3bb78 <__assert_fail@plt+0x29584>
   3b84c:	ldr	r2, [sl, #28]
   3b850:	cmp	r3, r2
   3b854:	beq	3bb78 <__assert_fail@plt+0x29584>
   3b858:	ldr	r2, [sl, #8]
   3b85c:	ldr	r3, [r2, r3, lsl #2]
   3b860:	cmn	r3, #1
   3b864:	bne	3bb78 <__assert_fail@plt+0x29584>
   3b868:	ldr	fp, [sp, #20]
   3b86c:	ldr	r2, [sp, #28]
   3b870:	mov	r1, sl
   3b874:	mov	r0, fp
   3b878:	bl	39ffc <__assert_fail@plt+0x27a08>
   3b87c:	ldr	ip, [sl, #40]	; 0x28
   3b880:	mov	r3, r5
   3b884:	str	fp, [sp]
   3b888:	mov	r2, #0
   3b88c:	mov	r1, r7
   3b890:	add	r0, ip, r0
   3b894:	str	r0, [sl, #40]	; 0x28
   3b898:	mov	r0, r8
   3b89c:	bl	3295c <__assert_fail@plt+0x20368>
   3b8a0:	str	r4, [sp]
   3b8a4:	mov	r2, r6
   3b8a8:	str	r5, [r4, #4]
   3b8ac:	mov	r1, r7
   3b8b0:	str	r5, [r4]
   3b8b4:	strb	r9, [sp, #132]	; 0x84
   3b8b8:	mov	fp, r0
   3b8bc:	mov	r3, r0
   3b8c0:	mov	r0, r8
   3b8c4:	bl	3295c <__assert_fail@plt+0x20368>
   3b8c8:	cmp	r0, #0
   3b8cc:	cmpne	fp, #0
   3b8d0:	mov	r6, r0
   3b8d4:	bne	3b83c <__assert_fail@plt+0x29248>
   3b8d8:	ldr	r2, [sp, #204]	; 0xcc
   3b8dc:	mov	r3, #12
   3b8e0:	str	r3, [r2]
   3b8e4:	mov	r3, #0
   3b8e8:	str	r3, [sp, #32]
   3b8ec:	b	3ada8 <__assert_fail@plt+0x287b4>
   3b8f0:	ldr	r3, [sp, #204]	; 0xcc
   3b8f4:	sub	r2, r2, #33	; 0x21
   3b8f8:	clz	r2, r2
   3b8fc:	lsr	r2, r2, #5
   3b900:	ldr	r1, [r0, #64]	; 0x40
   3b904:	str	r2, [sp]
   3b908:	str	r3, [sp, #4]
   3b90c:	ldr	r2, [pc, #1120]	; 3bd74 <__assert_fail@plt+0x29780>
   3b910:	ldr	r3, [pc, #1120]	; 3bd78 <__assert_fail@plt+0x29784>
   3b914:	b	3b480 <__assert_fail@plt+0x28e8c>
   3b918:	ldr	r3, [sp, #32]
   3b91c:	str	r3, [sp, #36]	; 0x24
   3b920:	mov	r5, r3
   3b924:	b	3b308 <__assert_fail@plt+0x28d14>
   3b928:	ldr	r3, [sp, #28]
   3b92c:	ands	r2, r3, #131072	; 0x20000
   3b930:	bne	3addc <__assert_fail@plt+0x287e8>
   3b934:	str	r2, [sp, #32]
   3b938:	ldr	r2, [sp, #204]	; 0xcc
   3b93c:	mov	r3, #16
   3b940:	str	r3, [r2]
   3b944:	b	3ada8 <__assert_fail@plt+0x287b4>
   3b948:	mov	r3, #0
   3b94c:	b	3b3f8 <__assert_fail@plt+0x28e04>
   3b950:	ldr	r3, [sp, #76]	; 0x4c
   3b954:	add	r2, sp, #68	; 0x44
   3b958:	ldr	r0, [sl, #64]	; 0x40
   3b95c:	mov	r1, r8
   3b960:	stm	sp, {r2, r3}
   3b964:	str	r9, [sp, #8]
   3b968:	ldr	r3, [sp, #44]	; 0x2c
   3b96c:	ldr	r2, [sp, #48]	; 0x30
   3b970:	bl	358c0 <__assert_fail@plt+0x232cc>
   3b974:	ldr	r3, [sp, #204]	; 0xcc
   3b978:	cmp	r0, #0
   3b97c:	str	r0, [r3]
   3b980:	bne	3b9bc <__assert_fail@plt+0x293c8>
   3b984:	ldrb	r3, [r4, #4]
   3b988:	cmp	r3, #2
   3b98c:	beq	3bb80 <__assert_fail@plt+0x2958c>
   3b990:	cmp	r3, #21
   3b994:	beq	3c008 <__assert_fail@plt+0x29a14>
   3b998:	ldr	r3, [sp, #36]	; 0x24
   3b99c:	b	3b6e8 <__assert_fail@plt+0x290f4>
   3b9a0:	ldr	r1, [sp, #76]	; 0x4c
   3b9a4:	mov	r0, r8
   3b9a8:	bl	35880 <__assert_fail@plt+0x2328c>
   3b9ac:	ldr	r3, [sp, #204]	; 0xcc
   3b9b0:	cmp	r0, #0
   3b9b4:	str	r0, [r3]
   3b9b8:	beq	3b984 <__assert_fail@plt+0x29390>
   3b9bc:	mov	r9, r8
   3b9c0:	mov	r0, r9
   3b9c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   3b9c8:	mov	r0, r6
   3b9cc:	bl	31928 <__assert_fail@plt+0x1f334>
   3b9d0:	ldr	r3, [sp, #204]	; 0xcc
   3b9d4:	ldr	r3, [r3]
   3b9d8:	cmp	r3, #0
   3b9dc:	bne	3ada0 <__assert_fail@plt+0x287ac>
   3b9e0:	str	r3, [sp, #32]
   3b9e4:	b	3ae10 <__assert_fail@plt+0x2881c>
   3b9e8:	ldr	r1, [sp, #76]	; 0x4c
   3b9ec:	mov	r0, r8
   3b9f0:	bl	35880 <__assert_fail@plt+0x2328c>
   3b9f4:	ldr	r3, [sp, #204]	; 0xcc
   3b9f8:	cmp	r0, #0
   3b9fc:	str	r0, [r3]
   3ba00:	beq	3b984 <__assert_fail@plt+0x29390>
   3ba04:	b	3b9bc <__assert_fail@plt+0x293c8>
   3ba08:	ldr	r3, [r6, #20]
   3ba0c:	ldr	r2, [sp, #16]
   3ba10:	cmp	r3, r2
   3ba14:	beq	3bdfc <__assert_fail@plt+0x29808>
   3ba18:	ldr	r0, [r6]
   3ba1c:	ldr	r2, [sp, #76]	; 0x4c
   3ba20:	add	r1, r3, #1
   3ba24:	str	r1, [r6, #20]
   3ba28:	str	r2, [r0, r3, lsl #2]
   3ba2c:	b	3b984 <__assert_fail@plt+0x29390>
   3ba30:	ldrb	r3, [sp, #76]	; 0x4c
   3ba34:	mov	r0, #1
   3ba38:	and	r1, r3, #31
   3ba3c:	asr	r3, r3, #5
   3ba40:	ldr	r2, [r8, r3, lsl #2]
   3ba44:	orr	r2, r2, r0, lsl r1
   3ba48:	str	r2, [r8, r3, lsl #2]
   3ba4c:	b	3b984 <__assert_fail@plt+0x29390>
   3ba50:	ldr	r1, [sp, #24]
   3ba54:	ldr	r7, [sp, #20]
   3ba58:	mov	r2, #6
   3ba5c:	add	r5, r1, #56	; 0x38
   3ba60:	add	r6, r1, #64	; 0x40
   3ba64:	str	r7, [sp]
   3ba68:	mov	r1, r6
   3ba6c:	str	r2, [r7]
   3ba70:	mov	r0, r5
   3ba74:	mov	r2, r3
   3ba78:	bl	3295c <__assert_fail@plt+0x20368>
   3ba7c:	mov	r3, #9
   3ba80:	str	r3, [r7]
   3ba84:	mov	r4, r0
   3ba88:	b	3b590 <__assert_fail@plt+0x28f9c>
   3ba8c:	ldrb	r3, [r6, #16]
   3ba90:	ldr	r2, [sp, #28]
   3ba94:	ldr	r4, [sp, #20]
   3ba98:	tst	r2, #256	; 0x100
   3ba9c:	orr	r3, r3, #1
   3baa0:	strb	r3, [r6, #16]
   3baa4:	ldrne	r3, [r9]
   3baa8:	ldr	r2, [sp, #28]
   3baac:	orrne	r3, r3, #1024	; 0x400
   3bab0:	strne	r3, [r9]
   3bab4:	ldr	r3, [sl, #40]	; 0x28
   3bab8:	mov	r1, sl
   3babc:	add	r3, r3, r0
   3bac0:	str	r3, [sl, #40]	; 0x28
   3bac4:	mov	r0, r4
   3bac8:	bl	3096c <__assert_fail@plt+0x1e378>
   3bacc:	ldrb	r3, [r4, #4]
   3bad0:	cmp	r3, #2
   3bad4:	mov	fp, r0
   3bad8:	beq	3bd18 <__assert_fail@plt+0x29724>
   3badc:	mov	r2, #1
   3bae0:	str	r2, [sp, #40]	; 0x28
   3bae4:	b	3b698 <__assert_fail@plt+0x290a4>
   3bae8:	ldr	r5, [sp, #20]
   3baec:	mov	r2, r3
   3baf0:	mov	r1, sl
   3baf4:	mov	r0, r5
   3baf8:	mov	r6, r3
   3bafc:	bl	39ffc <__assert_fail@plt+0x27a08>
   3bb00:	ldr	r3, [sp, #204]	; 0xcc
   3bb04:	ldr	ip, [sl, #40]	; 0x28
   3bb08:	str	r3, [sp, #4]
   3bb0c:	ldr	r3, [sp, #200]	; 0xc8
   3bb10:	mov	r2, r5
   3bb14:	str	r3, [sp]
   3bb18:	mov	r1, r4
   3bb1c:	mov	r3, r6
   3bb20:	add	r0, ip, r0
   3bb24:	str	r0, [sl, #40]	; 0x28
   3bb28:	mov	r0, sl
   3bb2c:	bl	3acc0 <__assert_fail@plt+0x286cc>
   3bb30:	str	r0, [sp, #32]
   3bb34:	b	3ada8 <__assert_fail@plt+0x287b4>
   3bb38:	ldr	r2, [sp, #20]
   3bb3c:	ldr	r0, [sp, #24]
   3bb40:	mov	r3, #0
   3bb44:	str	r2, [sp]
   3bb48:	add	r1, r0, #64	; 0x40
   3bb4c:	mov	r2, r3
   3bb50:	add	r0, r0, #56	; 0x38
   3bb54:	bl	3295c <__assert_fail@plt+0x20368>
   3bb58:	subs	r3, r0, #0
   3bb5c:	str	r3, [sp, #32]
   3bb60:	bne	3b604 <__assert_fail@plt+0x29010>
   3bb64:	b	3b8d8 <__assert_fail@plt+0x292e4>
   3bb68:	ldr	r3, [sp, #204]	; 0xcc
   3bb6c:	mov	r9, r8
   3bb70:	str	r0, [r3]
   3bb74:	b	3b9c0 <__assert_fail@plt+0x293cc>
   3bb78:	str	r6, [sp, #32]
   3bb7c:	b	3ae10 <__assert_fail@plt+0x2881c>
   3bb80:	ldr	r2, [sp, #204]	; 0xcc
   3bb84:	mov	r3, #7
   3bb88:	mov	r9, r8
   3bb8c:	str	r3, [r2]
   3bb90:	b	3b9c0 <__assert_fail@plt+0x293cc>
   3bb94:	ldr	r3, [sl, #40]	; 0x28
   3bb98:	mov	r2, r9
   3bb9c:	add	r3, r3, r0
   3bba0:	str	r3, [sl, #40]	; 0x28
   3bba4:	add	r0, sp, #88	; 0x58
   3bba8:	mov	r1, sl
   3bbac:	bl	3096c <__assert_fail@plt+0x1e378>
   3bbb0:	ldrb	r2, [sp, #92]	; 0x5c
   3bbb4:	cmp	r2, #2
   3bbb8:	mov	r3, r0
   3bbbc:	beq	3bb80 <__assert_fail@plt+0x2958c>
   3bbc0:	cmp	r2, #21
   3bbc4:	beq	3be2c <__assert_fail@plt+0x29838>
   3bbc8:	add	r0, sp, #160	; 0xa0
   3bbcc:	mov	ip, #1
   3bbd0:	mov	r1, #3
   3bbd4:	str	r9, [sp]
   3bbd8:	add	r2, sp, #88	; 0x58
   3bbdc:	str	r1, [r0, #-80]!	; 0xffffffb0
   3bbe0:	str	ip, [sp, #4]
   3bbe4:	mov	r1, sl
   3bbe8:	add	ip, sp, #128	; 0x80
   3bbec:	str	ip, [sp, #84]	; 0x54
   3bbf0:	bl	3aa24 <__assert_fail@plt+0x28430>
   3bbf4:	cmp	r0, #0
   3bbf8:	bne	3bb68 <__assert_fail@plt+0x29574>
   3bbfc:	mov	r2, r9
   3bc00:	mov	r1, sl
   3bc04:	mov	r0, r4
   3bc08:	bl	3096c <__assert_fail@plt+0x1e378>
   3bc0c:	ldr	r2, [sp, #72]	; 0x48
   3bc10:	sub	r3, r2, #2
   3bc14:	bics	r3, r3, #2
   3bc18:	mov	fp, r0
   3bc1c:	beq	3bcd0 <__assert_fail@plt+0x296dc>
   3bc20:	ldr	r3, [sp, #80]	; 0x50
   3bc24:	cmp	r3, #2
   3bc28:	beq	3bcd0 <__assert_fail@plt+0x296dc>
   3bc2c:	cmp	r3, #4
   3bc30:	beq	3bd28 <__assert_fail@plt+0x29734>
   3bc34:	cmp	r2, #3
   3bc38:	beq	3bd7c <__assert_fail@plt+0x29788>
   3bc3c:	cmp	r3, #3
   3bc40:	beq	3bdc4 <__assert_fail@plt+0x297d0>
   3bc44:	cmp	r2, #0
   3bc48:	bne	3bdb0 <__assert_fail@plt+0x297bc>
   3bc4c:	ldrb	r5, [sp, #76]	; 0x4c
   3bc50:	cmp	r3, #0
   3bc54:	bne	3c210 <__assert_fail@plt+0x29c1c>
   3bc58:	ldrb	r7, [sp, #84]	; 0x54
   3bc5c:	cmp	r2, #0
   3bc60:	cmpne	r2, #3
   3bc64:	bne	3c208 <__assert_fail@plt+0x29c14>
   3bc68:	ldr	r2, [sp, #24]
   3bc6c:	ldr	r2, [r2, #92]	; 0x5c
   3bc70:	cmp	r2, #1
   3bc74:	ble	3be48 <__assert_fail@plt+0x29854>
   3bc78:	mov	r0, r5
   3bc7c:	bl	123a8 <btowc@plt>
   3bc80:	ldr	r3, [sp, #80]	; 0x50
   3bc84:	mov	r5, r0
   3bc88:	cmp	r3, #3
   3bc8c:	cmpne	r3, #0
   3bc90:	bne	3c200 <__assert_fail@plt+0x29c0c>
   3bc94:	ldr	r3, [sp, #24]
   3bc98:	ldr	r3, [r3, #92]	; 0x5c
   3bc9c:	cmp	r3, #1
   3bca0:	ble	3bcb0 <__assert_fail@plt+0x296bc>
   3bca4:	mov	r0, r7
   3bca8:	bl	123a8 <btowc@plt>
   3bcac:	mov	r7, r0
   3bcb0:	cmn	r5, #1
   3bcb4:	cmnne	r7, #1
   3bcb8:	bne	3be54 <__assert_fail@plt+0x29860>
   3bcbc:	mov	r9, r8
   3bcc0:	mov	r3, #3
   3bcc4:	ldr	r2, [sp, #204]	; 0xcc
   3bcc8:	str	r3, [r2]
   3bccc:	b	3b9c0 <__assert_fail@plt+0x293cc>
   3bcd0:	mov	r9, r8
   3bcd4:	mov	r8, #11
   3bcd8:	ldr	r3, [sp, #204]	; 0xcc
   3bcdc:	str	r8, [r3]
   3bce0:	b	3b9c0 <__assert_fail@plt+0x293cc>
   3bce4:	str	r3, [sp, #32]
   3bce8:	ldr	r3, [sp, #204]	; 0xcc
   3bcec:	mov	r2, #6
   3bcf0:	str	r2, [r3]
   3bcf4:	b	3ada8 <__assert_fail@plt+0x287b4>
   3bcf8:	mov	r0, r9
   3bcfc:	bl	2db68 <__assert_fail@plt+0x1b574>
   3bd00:	mov	r0, r6
   3bd04:	bl	2db68 <__assert_fail@plt+0x1b574>
   3bd08:	ldr	r2, [sp, #204]	; 0xcc
   3bd0c:	mov	r3, #12
   3bd10:	str	r3, [r2]
   3bd14:	b	3ada0 <__assert_fail@plt+0x287ac>
   3bd18:	ldr	r2, [sp, #204]	; 0xcc
   3bd1c:	mov	r3, #2
   3bd20:	str	r3, [r2]
   3bd24:	b	3b9c0 <__assert_fail@plt+0x293cc>
   3bd28:	mov	r9, r8
   3bd2c:	mov	r3, #11
   3bd30:	b	3bcc4 <__assert_fail@plt+0x296d0>
   3bd34:	ldr	r3, [sp, #20]
   3bd38:	ldrb	r3, [r3, #4]
   3bd3c:	cmp	r3, #2
   3bd40:	bne	3b2b4 <__assert_fail@plt+0x28cc0>
   3bd44:	ldr	r2, [sp, #204]	; 0xcc
   3bd48:	mov	r3, #9
   3bd4c:	str	r3, [r2]
   3bd50:	b	3b108 <__assert_fail@plt+0x28b14>
   3bd54:	andeq	r1, r3, ip, lsl #19
   3bd58:	addeq	r0, ip, r0, lsl #16
   3bd5c:	andeq	r0, r3, ip, ror #21
   3bd60:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   3bd64:	andeq	r6, r4, ip, asr #2
   3bd68:	andeq	r2, r4, r0, asr r0
   3bd6c:	andeq	r0, r0, pc, lsl #6
   3bd70:	mvnseq	r0, #0
   3bd74:	andeq	r6, r4, ip, lsr r1
   3bd78:	andeq	r6, r4, ip, ror r1
   3bd7c:	ldr	r5, [sp, #76]	; 0x4c
   3bd80:	str	r2, [sp, #60]	; 0x3c
   3bd84:	mov	r0, r5
   3bd88:	str	r3, [sp, #56]	; 0x38
   3bd8c:	bl	12300 <strlen@plt>
   3bd90:	ldr	r3, [sp, #56]	; 0x38
   3bd94:	ldr	r2, [sp, #60]	; 0x3c
   3bd98:	cmp	r0, #1
   3bd9c:	bhi	3bdf0 <__assert_fail@plt+0x297fc>
   3bda0:	cmp	r3, #3
   3bda4:	beq	3bdc4 <__assert_fail@plt+0x297d0>
   3bda8:	ldrb	r5, [r5]
   3bdac:	b	3bc50 <__assert_fail@plt+0x2965c>
   3bdb0:	cmp	r2, #3
   3bdb4:	movne	r5, #0
   3bdb8:	bne	3bc50 <__assert_fail@plt+0x2965c>
   3bdbc:	ldr	r5, [sp, #76]	; 0x4c
   3bdc0:	b	3bda8 <__assert_fail@plt+0x297b4>
   3bdc4:	ldr	r0, [sp, #84]	; 0x54
   3bdc8:	str	r2, [sp, #60]	; 0x3c
   3bdcc:	str	r3, [sp, #56]	; 0x38
   3bdd0:	bl	12300 <strlen@plt>
   3bdd4:	ldr	r3, [sp, #56]	; 0x38
   3bdd8:	ldr	r2, [sp, #60]	; 0x3c
   3bddc:	cmp	r0, #1
   3bde0:	bls	3bc44 <__assert_fail@plt+0x29650>
   3bde4:	mov	r9, r8
   3bde8:	mov	r8, #3
   3bdec:	b	3bcd8 <__assert_fail@plt+0x296e4>
   3bdf0:	mov	r9, r8
   3bdf4:	mov	r8, r2
   3bdf8:	b	3bcd8 <__assert_fail@plt+0x296e4>
   3bdfc:	ldr	r3, [sp, #16]
   3be00:	ldr	r0, [r6]
   3be04:	lsl	r3, r3, #1
   3be08:	add	r3, r3, #1
   3be0c:	str	r3, [sp, #16]
   3be10:	lsl	r1, r3, #2
   3be14:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3be18:	cmp	r0, #0
   3be1c:	beq	3bef8 <__assert_fail@plt+0x29904>
   3be20:	ldr	r3, [r6, #20]
   3be24:	str	r0, [r6]
   3be28:	b	3ba1c <__assert_fail@plt+0x29428>
   3be2c:	ldr	r3, [sl, #40]	; 0x28
   3be30:	mov	r2, #1
   3be34:	sub	r3, r3, fp
   3be38:	str	r3, [sl, #40]	; 0x28
   3be3c:	strb	r2, [r4, #4]
   3be40:	ldr	r3, [sp, #72]	; 0x48
   3be44:	b	3b754 <__assert_fail@plt+0x29160>
   3be48:	cmp	r3, #0
   3be4c:	cmpne	r3, #3
   3be50:	bne	3c200 <__assert_fail@plt+0x29c0c>
   3be54:	ldr	r3, [sp, #52]	; 0x34
   3be58:	cmp	r5, r7
   3be5c:	movls	r3, #0
   3be60:	andhi	r3, r3, #1
   3be64:	cmp	r3, #0
   3be68:	bne	3bd28 <__assert_fail@plt+0x29734>
   3be6c:	ldr	r3, [sp, #24]
   3be70:	ldr	r3, [r3, #92]	; 0x5c
   3be74:	cmp	r3, #1
   3be78:	ble	3bea8 <__assert_fail@plt+0x298b4>
   3be7c:	ldr	r2, [r6, #32]
   3be80:	ldr	r3, [sp, #32]
   3be84:	cmp	r2, r3
   3be88:	beq	3bf04 <__assert_fail@plt+0x29910>
   3be8c:	ldr	r3, [r6, #4]
   3be90:	ldr	r0, [r6, #8]
   3be94:	str	r5, [r3, r2, lsl #2]
   3be98:	ldr	r3, [r6, #32]
   3be9c:	add	r2, r3, #1
   3bea0:	str	r2, [r6, #32]
   3bea4:	str	r7, [r0, r3, lsl #2]
   3bea8:	mov	r3, #0
   3beac:	mov	ip, #1
   3beb0:	cmp	r5, r3
   3beb4:	movhi	r2, #0
   3beb8:	movls	r2, #1
   3bebc:	cmp	r7, r3
   3bec0:	movcc	r2, #0
   3bec4:	cmp	r2, #0
   3bec8:	asrne	r0, r3, #5
   3becc:	andne	r1, r3, #31
   3bed0:	ldrne	r2, [r8, r0, lsl #2]
   3bed4:	add	r3, r3, #1
   3bed8:	orrne	r2, r2, ip, lsl r1
   3bedc:	strne	r2, [r8, r0, lsl #2]
   3bee0:	cmp	r3, #256	; 0x100
   3bee4:	bne	3beb0 <__assert_fail@plt+0x298bc>
   3bee8:	ldr	r2, [sp, #204]	; 0xcc
   3beec:	mov	r3, #0
   3bef0:	str	r3, [r2]
   3bef4:	b	3b984 <__assert_fail@plt+0x29390>
   3bef8:	mov	r9, r8
   3befc:	mov	r3, #12
   3bf00:	b	3bcc4 <__assert_fail@plt+0x296d0>
   3bf04:	ldr	r3, [sp, #32]
   3bf08:	ldr	r0, [r6, #4]
   3bf0c:	lsl	r3, r3, #1
   3bf10:	add	r3, r3, #1
   3bf14:	str	r3, [sp, #32]
   3bf18:	lsl	r2, r3, #2
   3bf1c:	mov	r1, r2
   3bf20:	str	r2, [sp, #60]	; 0x3c
   3bf24:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3bf28:	ldr	r2, [sp, #60]	; 0x3c
   3bf2c:	mov	r1, r2
   3bf30:	str	r0, [sp, #56]	; 0x38
   3bf34:	ldr	r0, [r6, #8]
   3bf38:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3bf3c:	ldr	r3, [sp, #56]	; 0x38
   3bf40:	cmp	r0, #0
   3bf44:	cmpne	r3, #0
   3bf48:	ldrne	r2, [r6, #32]
   3bf4c:	strne	r3, [r6, #4]
   3bf50:	strne	r0, [r6, #8]
   3bf54:	bne	3be94 <__assert_fail@plt+0x298a0>
   3bf58:	mov	r9, r8
   3bf5c:	mov	r8, r0
   3bf60:	mov	r0, r3
   3bf64:	bl	2db68 <__assert_fail@plt+0x1b574>
   3bf68:	mov	r0, r8
   3bf6c:	bl	2db68 <__assert_fail@plt+0x1b574>
   3bf70:	mov	r3, #12
   3bf74:	b	3bcc4 <__assert_fail@plt+0x296d0>
   3bf78:	mov	r4, #128	; 0x80
   3bf7c:	mov	r5, #4
   3bf80:	bl	122b8 <__ctype_b_loc@plt>
   3bf84:	sub	r3, r4, #-2147483647	; 0x80000001
   3bf88:	mov	lr, #1
   3bf8c:	add	ip, r5, #24
   3bf90:	ldr	r2, [sp, #24]
   3bf94:	add	ip, r2, ip, lsl #2
   3bf98:	ldr	r6, [r0]
   3bf9c:	add	r6, r6, r3, lsl lr
   3bfa0:	mov	r0, r6
   3bfa4:	mov	r1, #0
   3bfa8:	ldrh	r2, [r0, #2]!
   3bfac:	add	r3, r4, r1
   3bfb0:	lsr	r2, r2, #3
   3bfb4:	cmp	r3, #95	; 0x5f
   3bfb8:	movne	r3, r2
   3bfbc:	orreq	r3, r2, #1
   3bfc0:	tst	r3, #1
   3bfc4:	ldrne	r3, [ip]
   3bfc8:	orrne	r3, r3, lr, lsl r1
   3bfcc:	add	r1, r1, #1
   3bfd0:	strne	r3, [ip]
   3bfd4:	cmp	r1, #32
   3bfd8:	bne	3bfa8 <__assert_fail@plt+0x299b4>
   3bfdc:	add	r5, r5, #1
   3bfe0:	cmp	r5, #8
   3bfe4:	add	r4, r4, #32
   3bfe8:	add	r6, r6, #64	; 0x40
   3bfec:	add	ip, ip, #4
   3bff0:	bne	3bfa0 <__assert_fail@plt+0x299ac>
   3bff4:	ldr	r3, [sp, #20]
   3bff8:	ldr	r2, [r3]
   3bffc:	b	3b544 <__assert_fail@plt+0x28f50>
   3c000:	mov	r5, r4
   3c004:	b	3bf80 <__assert_fail@plt+0x2998c>
   3c008:	ldr	r3, [sl, #40]	; 0x28
   3c00c:	ldr	r2, [sp, #40]	; 0x28
   3c010:	add	r3, r3, fp
   3c014:	cmp	r2, #0
   3c018:	mov	r9, r8
   3c01c:	str	r3, [sl, #40]	; 0x28
   3c020:	bne	3c1d8 <__assert_fail@plt+0x29be4>
   3c024:	ldr	r3, [sp, #24]
   3c028:	ldr	r0, [r3, #92]	; 0x5c
   3c02c:	cmp	r0, #1
   3c030:	ble	3c060 <__assert_fail@plt+0x29a6c>
   3c034:	ldr	r3, [sp, #24]
   3c038:	sub	r1, r9, #4
   3c03c:	add	ip, r9, #28
   3c040:	ldr	r2, [r3, #60]	; 0x3c
   3c044:	sub	r2, r2, #4
   3c048:	ldr	r3, [r1, #4]
   3c04c:	ldr	lr, [r2, #4]!
   3c050:	and	r3, r3, lr
   3c054:	str	r3, [r1, #4]!
   3c058:	cmp	ip, r1
   3c05c:	bne	3c048 <__assert_fail@plt+0x29a54>
   3c060:	ldr	r3, [r6, #20]
   3c064:	cmp	r3, #0
   3c068:	bne	3c0b0 <__assert_fail@plt+0x29abc>
   3c06c:	ldr	r3, [r6, #24]
   3c070:	cmp	r3, #0
   3c074:	bne	3c0b0 <__assert_fail@plt+0x29abc>
   3c078:	ldr	r3, [r6, #28]
   3c07c:	cmp	r3, #0
   3c080:	bne	3c0b0 <__assert_fail@plt+0x29abc>
   3c084:	ldr	r3, [r6, #32]
   3c088:	cmp	r3, #0
   3c08c:	bne	3c0b0 <__assert_fail@plt+0x29abc>
   3c090:	cmp	r0, #1
   3c094:	ble	3c188 <__assert_fail@plt+0x29b94>
   3c098:	ldr	r3, [r6, #36]	; 0x24
   3c09c:	cmp	r3, #0
   3c0a0:	bne	3c0b0 <__assert_fail@plt+0x29abc>
   3c0a4:	ldrb	r3, [r6, #16]
   3c0a8:	tst	r3, #1
   3c0ac:	beq	3c188 <__assert_fail@plt+0x29b94>
   3c0b0:	ldr	r1, [sp, #24]
   3c0b4:	mov	r3, #0
   3c0b8:	add	r4, r1, #56	; 0x38
   3c0bc:	ldrb	r2, [r1, #88]	; 0x58
   3c0c0:	add	r5, r1, #64	; 0x40
   3c0c4:	mov	ip, #6
   3c0c8:	orr	r2, r2, #2
   3c0cc:	strb	r2, [r1, #88]	; 0x58
   3c0d0:	add	r2, sp, #96	; 0x60
   3c0d4:	str	r2, [sp]
   3c0d8:	mov	r0, r4
   3c0dc:	mov	r2, r3
   3c0e0:	mov	r1, r5
   3c0e4:	str	r6, [sp, #96]	; 0x60
   3c0e8:	strb	ip, [sp, #100]	; 0x64
   3c0ec:	bl	3295c <__assert_fail@plt+0x20368>
   3c0f0:	subs	r3, r0, #0
   3c0f4:	str	r3, [sp, #32]
   3c0f8:	beq	3befc <__assert_fail@plt+0x29908>
   3c0fc:	sub	r3, r9, #4
   3c100:	add	r2, r9, #28
   3c104:	b	3c110 <__assert_fail@plt+0x29b1c>
   3c108:	cmp	r2, r3
   3c10c:	beq	3c1cc <__assert_fail@plt+0x29bd8>
   3c110:	ldr	r1, [r3, #4]!
   3c114:	cmp	r1, #0
   3c118:	beq	3c108 <__assert_fail@plt+0x29b14>
   3c11c:	mov	r3, #0
   3c120:	add	r2, sp, #96	; 0x60
   3c124:	str	r2, [sp]
   3c128:	mov	ip, #3
   3c12c:	mov	r2, r3
   3c130:	mov	r1, r5
   3c134:	mov	r0, r4
   3c138:	str	r9, [sp, #96]	; 0x60
   3c13c:	strb	ip, [sp, #100]	; 0x64
   3c140:	bl	3295c <__assert_fail@plt+0x20368>
   3c144:	subs	r2, r0, #0
   3c148:	beq	3befc <__assert_fail@plt+0x29908>
   3c14c:	add	ip, sp, #128	; 0x80
   3c150:	mov	lr, #0
   3c154:	ldr	r3, [sp, #32]
   3c158:	mov	r0, r4
   3c15c:	mov	r1, r5
   3c160:	str	ip, [sp]
   3c164:	mov	r4, #10
   3c168:	str	lr, [sp, #132]	; 0x84
   3c16c:	str	lr, [sp, #128]	; 0x80
   3c170:	strb	r4, [sp, #132]	; 0x84
   3c174:	bl	3295c <__assert_fail@plt+0x20368>
   3c178:	subs	r3, r0, #0
   3c17c:	str	r3, [sp, #32]
   3c180:	bne	3ae10 <__assert_fail@plt+0x2881c>
   3c184:	b	3befc <__assert_fail@plt+0x29908>
   3c188:	mov	r0, r6
   3c18c:	bl	31928 <__assert_fail@plt+0x1f334>
   3c190:	ldr	r0, [sp, #24]
   3c194:	mov	r3, #0
   3c198:	add	r2, sp, #96	; 0x60
   3c19c:	str	r2, [sp]
   3c1a0:	mov	ip, #3
   3c1a4:	mov	r2, r3
   3c1a8:	add	r1, r0, #64	; 0x40
   3c1ac:	add	r0, r0, #56	; 0x38
   3c1b0:	str	r9, [sp, #96]	; 0x60
   3c1b4:	strb	ip, [sp, #100]	; 0x64
   3c1b8:	bl	3295c <__assert_fail@plt+0x20368>
   3c1bc:	subs	r3, r0, #0
   3c1c0:	str	r3, [sp, #32]
   3c1c4:	bne	3ae10 <__assert_fail@plt+0x2881c>
   3c1c8:	b	3befc <__assert_fail@plt+0x29908>
   3c1cc:	mov	r0, r9
   3c1d0:	bl	2db68 <__assert_fail@plt+0x1b574>
   3c1d4:	b	3ae10 <__assert_fail@plt+0x2881c>
   3c1d8:	sub	r3, r8, #4
   3c1dc:	add	r1, r8, #28
   3c1e0:	ldr	r2, [r3, #4]
   3c1e4:	mvn	r2, r2
   3c1e8:	str	r2, [r3, #4]!
   3c1ec:	cmp	r1, r3
   3c1f0:	bne	3c1e0 <__assert_fail@plt+0x29bec>
   3c1f4:	b	3c024 <__assert_fail@plt+0x29a30>
   3c1f8:	ldr	r6, [sp, #16]
   3c1fc:	b	3b1e8 <__assert_fail@plt+0x28bf4>
   3c200:	ldr	r7, [sp, #84]	; 0x54
   3c204:	b	3bcb0 <__assert_fail@plt+0x296bc>
   3c208:	ldr	r5, [sp, #76]	; 0x4c
   3c20c:	b	3bc88 <__assert_fail@plt+0x29694>
   3c210:	cmp	r3, #3
   3c214:	movne	r7, #0
   3c218:	ldreq	r1, [sp, #84]	; 0x54
   3c21c:	ldrbeq	r7, [r1]
   3c220:	b	3bc5c <__assert_fail@plt+0x29668>
   3c224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c228:	sub	sp, sp, #28
   3c22c:	mov	sl, r3
   3c230:	ldr	r5, [sp, #68]	; 0x44
   3c234:	ldr	r6, [sp, #64]	; 0x40
   3c238:	str	r5, [sp, #4]
   3c23c:	str	r6, [sp]
   3c240:	mov	r8, r1
   3c244:	ldr	fp, [r1]
   3c248:	mov	r9, r0
   3c24c:	mov	r7, r2
   3c250:	bl	3acc0 <__assert_fail@plt+0x286cc>
   3c254:	ldr	r3, [r5]
   3c258:	adds	r3, r3, #0
   3c25c:	movne	r3, #1
   3c260:	cmp	r0, #0
   3c264:	movne	r3, #0
   3c268:	cmp	r3, #0
   3c26c:	bne	3c354 <__assert_fail@plt+0x29d60>
   3c270:	add	r3, fp, #64	; 0x40
   3c274:	mov	r4, r0
   3c278:	str	r3, [sp, #8]
   3c27c:	add	r3, fp, #56	; 0x38
   3c280:	str	r3, [sp, #12]
   3c284:	ldrb	lr, [r7, #4]
   3c288:	clz	ip, r6
   3c28c:	mov	r3, sl
   3c290:	and	fp, lr, #247	; 0xf7
   3c294:	cmp	fp, #2
   3c298:	mov	r2, r7
   3c29c:	mov	r1, r8
   3c2a0:	mov	r0, r9
   3c2a4:	lsr	ip, ip, #5
   3c2a8:	beq	3c358 <__assert_fail@plt+0x29d64>
   3c2ac:	cmp	lr, #9
   3c2b0:	orrne	ip, ip, #1
   3c2b4:	cmp	ip, #0
   3c2b8:	beq	3c358 <__assert_fail@plt+0x29d64>
   3c2bc:	str	r5, [sp, #4]
   3c2c0:	str	r6, [sp]
   3c2c4:	bl	3acc0 <__assert_fail@plt+0x286cc>
   3c2c8:	ldr	ip, [r5]
   3c2cc:	adds	ip, ip, #0
   3c2d0:	movne	ip, #1
   3c2d4:	cmp	r0, #0
   3c2d8:	movne	ip, #0
   3c2dc:	cmp	ip, #0
   3c2e0:	mov	fp, r0
   3c2e4:	bne	3c33c <__assert_fail@plt+0x29d48>
   3c2e8:	cmp	r4, #0
   3c2ec:	cmpne	r0, #0
   3c2f0:	bne	3c300 <__assert_fail@plt+0x29d0c>
   3c2f4:	cmp	r4, #0
   3c2f8:	moveq	r4, r0
   3c2fc:	b	3c284 <__assert_fail@plt+0x29c90>
   3c300:	add	r3, sp, #16
   3c304:	str	ip, [sp, #20]
   3c308:	str	r3, [sp]
   3c30c:	str	ip, [sp, #16]
   3c310:	mov	r3, r0
   3c314:	mov	ip, #16
   3c318:	mov	r2, r4
   3c31c:	ldr	r1, [sp, #8]
   3c320:	ldr	r0, [sp, #12]
   3c324:	strb	ip, [sp, #20]
   3c328:	bl	3295c <__assert_fail@plt+0x20368>
   3c32c:	cmp	r0, #0
   3c330:	beq	3c364 <__assert_fail@plt+0x29d70>
   3c334:	mov	r4, r0
   3c338:	b	3c284 <__assert_fail@plt+0x29c90>
   3c33c:	cmp	r4, #0
   3c340:	beq	3c354 <__assert_fail@plt+0x29d60>
   3c344:	mov	r0, r4
   3c348:	mov	r2, #0
   3c34c:	ldr	r1, [pc, #88]	; 3c3ac <__assert_fail@plt+0x29db8>
   3c350:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3c354:	mov	r4, #0
   3c358:	mov	r0, r4
   3c35c:	add	sp, sp, #28
   3c360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c364:	mov	r3, r0
   3c368:	mov	r2, r3
   3c36c:	mov	r0, fp
   3c370:	ldr	r1, [pc, #52]	; 3c3ac <__assert_fail@plt+0x29db8>
   3c374:	str	r3, [sp, #8]
   3c378:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3c37c:	ldr	r3, [sp, #8]
   3c380:	mov	r0, r4
   3c384:	mov	r2, r3
   3c388:	ldr	r1, [pc, #28]	; 3c3ac <__assert_fail@plt+0x29db8>
   3c38c:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3c390:	ldr	r3, [sp, #8]
   3c394:	mov	r2, #12
   3c398:	mov	r4, r3
   3c39c:	mov	r0, r4
   3c3a0:	str	r2, [r5]
   3c3a4:	add	sp, sp, #28
   3c3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c3ac:	andeq	r1, r3, ip, lsl #19
   3c3b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c3b4:	sub	sp, sp, #44	; 0x2c
   3c3b8:	ldr	r8, [r1]
   3c3bc:	ldr	fp, [sp, #84]	; 0x54
   3c3c0:	str	r1, [sp, #16]
   3c3c4:	ldr	ip, [r8, #84]	; 0x54
   3c3c8:	str	fp, [sp, #4]
   3c3cc:	str	ip, [sp, #28]
   3c3d0:	ldr	ip, [sp, #80]	; 0x50
   3c3d4:	mov	r5, r0
   3c3d8:	str	ip, [sp]
   3c3dc:	mov	r4, r2
   3c3e0:	str	r3, [sp, #8]
   3c3e4:	bl	3c224 <__assert_fail@plt+0x29c30>
   3c3e8:	ldr	r6, [fp]
   3c3ec:	adds	r6, r6, #0
   3c3f0:	movne	r6, #1
   3c3f4:	cmp	r0, #0
   3c3f8:	movne	r6, #0
   3c3fc:	cmp	r6, #0
   3c400:	bne	3c530 <__assert_fail@plt+0x29f3c>
   3c404:	ldr	r3, [sp, #8]
   3c408:	mov	r9, r0
   3c40c:	orr	r3, r3, #8388608	; 0x800000
   3c410:	str	r3, [sp, #12]
   3c414:	add	r3, r8, #64	; 0x40
   3c418:	str	r3, [sp, #20]
   3c41c:	add	r3, r8, #56	; 0x38
   3c420:	add	r7, sp, #32
   3c424:	str	r3, [sp, #24]
   3c428:	str	fp, [sp, #84]	; 0x54
   3c42c:	b	3c4bc <__assert_fail@plt+0x29ec8>
   3c430:	cmp	sl, #9
   3c434:	orrne	ip, ip, #1
   3c438:	cmp	ip, #0
   3c43c:	beq	3c510 <__assert_fail@plt+0x29f1c>
   3c440:	ldr	ip, [sp, #28]
   3c444:	ldr	sl, [r8, #84]	; 0x54
   3c448:	str	ip, [r8, #84]	; 0x54
   3c44c:	ldr	ip, [sp, #84]	; 0x54
   3c450:	str	ip, [sp, #4]
   3c454:	ldr	ip, [sp, #80]	; 0x50
   3c458:	str	ip, [sp]
   3c45c:	bl	3c224 <__assert_fail@plt+0x29c30>
   3c460:	ldr	r3, [sp, #84]	; 0x54
   3c464:	ldr	r3, [r3]
   3c468:	adds	r3, r3, #0
   3c46c:	movne	r3, #1
   3c470:	cmp	r0, #0
   3c474:	movne	r3, #0
   3c478:	cmp	r3, #0
   3c47c:	mov	r3, r0
   3c480:	bne	3c518 <__assert_fail@plt+0x29f24>
   3c484:	ldr	r2, [r8, #84]	; 0x54
   3c488:	orr	sl, r2, sl
   3c48c:	str	sl, [r8, #84]	; 0x54
   3c490:	str	r7, [sp]
   3c494:	mov	r2, r9
   3c498:	str	r6, [r7, #4]
   3c49c:	mov	ip, #10
   3c4a0:	ldr	r1, [sp, #20]
   3c4a4:	ldr	r0, [sp, #24]
   3c4a8:	str	r6, [r7]
   3c4ac:	strb	ip, [sp, #36]	; 0x24
   3c4b0:	bl	3295c <__assert_fail@plt+0x20368>
   3c4b4:	subs	r9, r0, #0
   3c4b8:	beq	3c540 <__assert_fail@plt+0x29f4c>
   3c4bc:	ldrb	r3, [r4, #4]
   3c4c0:	ldr	r2, [sp, #12]
   3c4c4:	mov	r1, r5
   3c4c8:	cmp	r3, #10
   3c4cc:	mov	r0, r4
   3c4d0:	bne	3c534 <__assert_fail@plt+0x29f40>
   3c4d4:	bl	39ffc <__assert_fail@plt+0x27a08>
   3c4d8:	ldrb	sl, [r4, #4]
   3c4dc:	ldr	lr, [r5, #40]	; 0x28
   3c4e0:	ldr	ip, [sp, #80]	; 0x50
   3c4e4:	and	fp, sl, #247	; 0xf7
   3c4e8:	cmp	fp, #2
   3c4ec:	clz	ip, ip
   3c4f0:	ldr	r3, [sp, #8]
   3c4f4:	mov	r2, r4
   3c4f8:	ldr	r1, [sp, #16]
   3c4fc:	lsr	ip, ip, #5
   3c500:	add	lr, lr, r0
   3c504:	str	lr, [r5, #40]	; 0x28
   3c508:	mov	r0, r5
   3c50c:	bne	3c430 <__assert_fail@plt+0x29e3c>
   3c510:	mov	r3, r6
   3c514:	b	3c490 <__assert_fail@plt+0x29e9c>
   3c518:	cmp	r9, #0
   3c51c:	beq	3c530 <__assert_fail@plt+0x29f3c>
   3c520:	mov	r0, r9
   3c524:	mov	r2, #0
   3c528:	ldr	r1, [pc, #40]	; 3c558 <__assert_fail@plt+0x29f64>
   3c52c:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3c530:	mov	r9, #0
   3c534:	mov	r0, r9
   3c538:	add	sp, sp, #44	; 0x2c
   3c53c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c540:	ldr	fp, [sp, #84]	; 0x54
   3c544:	mov	r3, #12
   3c548:	mov	r0, r9
   3c54c:	str	r3, [fp]
   3c550:	add	sp, sp, #44	; 0x2c
   3c554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c558:	andeq	r1, r3, ip, lsl #19
   3c55c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c560:	mov	r8, r0
   3c564:	ldrb	r0, [r0, #28]
   3c568:	ldr	ip, [r8, #4]
   3c56c:	sub	sp, sp, #148	; 0x94
   3c570:	mov	r7, r3
   3c574:	and	r0, r0, #144	; 0x90
   3c578:	mov	r3, #0
   3c57c:	cmp	ip, #159	; 0x9f
   3c580:	str	r7, [r8, #12]
   3c584:	str	r1, [sp, #12]
   3c588:	mov	r5, r2
   3c58c:	strb	r0, [r8, #28]
   3c590:	str	r3, [r8, #8]
   3c594:	str	r3, [sp, #36]	; 0x24
   3c598:	str	r3, [r8, #24]
   3c59c:	ldr	r4, [r8]
   3c5a0:	bls	3d18c <__assert_fail@plt+0x2ab98>
   3c5a4:	mov	r2, #160	; 0xa0
   3c5a8:	str	r2, [r8, #8]
   3c5ac:	mov	r1, #0
   3c5b0:	mov	r0, r4
   3c5b4:	bl	12378 <memset@plt>
   3c5b8:	ldr	r2, [pc, #3696]	; 3d430 <__assert_fail@plt+0x2ae3c>
   3c5bc:	mov	r3, #31
   3c5c0:	cmp	r5, r2
   3c5c4:	str	r3, [r4, #64]	; 0x40
   3c5c8:	bhi	3cbc8 <__assert_fail@plt+0x2a5d4>
   3c5cc:	add	r3, r5, #1
   3c5d0:	str	r3, [r4, #4]
   3c5d4:	lsl	r0, r3, #3
   3c5d8:	str	r3, [sp, #20]
   3c5dc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3c5e0:	cmp	r5, #0
   3c5e4:	str	r0, [r4]
   3c5e8:	beq	3d228 <__assert_fail@plt+0x2ac34>
   3c5ec:	mov	r1, #1
   3c5f0:	lsl	r1, r1, #1
   3c5f4:	cmp	r5, r1
   3c5f8:	bcs	3c5f0 <__assert_fail@plt+0x29ffc>
   3c5fc:	sub	sl, r1, #1
   3c600:	mov	r0, #12
   3c604:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   3c608:	str	sl, [r4, #68]	; 0x44
   3c60c:	str	r0, [r4, #32]
   3c610:	bl	12198 <__ctype_get_mb_cur_max@plt>
   3c614:	str	r0, [r4, #92]	; 0x5c
   3c618:	mov	r0, #14
   3c61c:	bl	12480 <nl_langinfo@plt>
   3c620:	ldrb	r3, [r0]
   3c624:	and	r3, r3, #223	; 0xdf
   3c628:	cmp	r3, #85	; 0x55
   3c62c:	bne	3c650 <__assert_fail@plt+0x2a05c>
   3c630:	ldrb	r3, [r0, #1]
   3c634:	and	r3, r3, #223	; 0xdf
   3c638:	cmp	r3, #84	; 0x54
   3c63c:	bne	3c650 <__assert_fail@plt+0x2a05c>
   3c640:	ldrb	r3, [r0, #2]
   3c644:	and	r3, r3, #223	; 0xdf
   3c648:	cmp	r3, #70	; 0x46
   3c64c:	beq	3ceb8 <__assert_fail@plt+0x2a8c4>
   3c650:	ldrb	r3, [r4, #88]	; 0x58
   3c654:	ldr	r2, [r4, #92]	; 0x5c
   3c658:	bic	r3, r3, #8
   3c65c:	cmp	r2, #1
   3c660:	strb	r3, [r4, #88]	; 0x58
   3c664:	ble	3c67c <__assert_fail@plt+0x2a088>
   3c668:	uxtb	r3, r3
   3c66c:	ands	r6, r3, #4
   3c670:	beq	3ce04 <__assert_fail@plt+0x2a810>
   3c674:	ldr	r3, [pc, #3512]	; 3d434 <__assert_fail@plt+0x2ae40>
   3c678:	str	r3, [r4, #60]	; 0x3c
   3c67c:	ldr	r3, [r4]
   3c680:	cmp	r3, #0
   3c684:	beq	3cbc8 <__assert_fail@plt+0x2a5d4>
   3c688:	ldr	r3, [r4, #32]
   3c68c:	cmp	r3, #0
   3c690:	beq	3cbc8 <__assert_fail@plt+0x2a5d4>
   3c694:	ldr	r2, [pc, #3484]	; 3d438 <__assert_fail@plt+0x2ae44>
   3c698:	mov	r3, #0
   3c69c:	ldr	r1, [pc, #3480]	; 3d43c <__assert_fail@plt+0x2ae48>
   3c6a0:	cmp	r2, r3
   3c6a4:	str	r3, [sp, #36]	; 0x24
   3c6a8:	mov	r3, #1
   3c6ac:	moveq	r3, r2
   3c6b0:	cmp	r1, #0
   3c6b4:	mov	r2, #1
   3c6b8:	moveq	r2, r1
   3c6bc:	orr	r3, r3, r2
   3c6c0:	ands	r3, r3, #255	; 0xff
   3c6c4:	str	r3, [sp, #24]
   3c6c8:	beq	3c6ec <__assert_fail@plt+0x2a0f8>
   3c6cc:	mov	r1, #0
   3c6d0:	add	r0, r4, #136	; 0x88
   3c6d4:	bl	1203c <pthread_mutex_init@plt>
   3c6d8:	cmp	r0, #0
   3c6dc:	bne	3cbc8 <__assert_fail@plt+0x2a5d4>
   3c6e0:	ldr	r3, [sp, #36]	; 0x24
   3c6e4:	cmp	r3, #0
   3c6e8:	bne	3cbd0 <__assert_fail@plt+0x2a5dc>
   3c6ec:	ands	r3, r7, #4194304	; 0x400000
   3c6f0:	mov	r1, #0
   3c6f4:	mov	r2, #84	; 0x54
   3c6f8:	add	r0, sp, #60	; 0x3c
   3c6fc:	moveq	fp, r1
   3c700:	movne	fp, #1
   3c704:	ldr	sl, [r8, #20]
   3c708:	str	r3, [sp, #16]
   3c70c:	bl	12378 <memset@plt>
   3c710:	ldrb	r2, [r4, #88]	; 0x58
   3c714:	ldr	ip, [sp, #12]
   3c718:	ldr	r1, [r4, #92]	; 0x5c
   3c71c:	cmp	sl, #0
   3c720:	moveq	r3, fp
   3c724:	orrne	r3, fp, #1
   3c728:	lsr	r0, r2, #2
   3c72c:	lsr	r2, r2, #3
   3c730:	and	r0, r0, #1
   3c734:	and	r2, r2, #1
   3c738:	cmp	r5, #0
   3c73c:	str	ip, [sp, #60]	; 0x3c
   3c740:	strb	fp, [sp, #132]	; 0x84
   3c744:	strb	r3, [sp, #135]	; 0x87
   3c748:	str	sl, [sp, #124]	; 0x7c
   3c74c:	str	r5, [sp, #108]	; 0x6c
   3c750:	str	r5, [sp, #104]	; 0x68
   3c754:	str	r5, [sp, #116]	; 0x74
   3c758:	str	r5, [sp, #112]	; 0x70
   3c75c:	mov	ip, r3
   3c760:	strb	r0, [sp, #133]	; 0x85
   3c764:	strb	r2, [sp, #134]	; 0x86
   3c768:	str	r1, [sp, #140]	; 0x8c
   3c76c:	beq	3c794 <__assert_fail@plt+0x2a1a0>
   3c770:	ldr	r1, [sp, #20]
   3c774:	add	r0, sp, #60	; 0x3c
   3c778:	str	r3, [sp, #28]
   3c77c:	bl	30e88 <__assert_fail@plt+0x1e894>
   3c780:	cmp	r0, #0
   3c784:	bne	3c800 <__assert_fail@plt+0x2a20c>
   3c788:	ldrb	ip, [sp, #135]	; 0x87
   3c78c:	ldr	r1, [r4, #92]	; 0x5c
   3c790:	ldr	r3, [sp, #28]
   3c794:	cmp	ip, #0
   3c798:	ldrne	r6, [sp, #64]	; 0x40
   3c79c:	ldreq	r6, [sp, #12]
   3c7a0:	ands	r2, r7, #4194304	; 0x400000
   3c7a4:	cmp	r2, #0
   3c7a8:	str	r6, [sp, #64]	; 0x40
   3c7ac:	beq	3c880 <__assert_fail@plt+0x2a28c>
   3c7b0:	cmp	r1, #1
   3c7b4:	ble	3d2a4 <__assert_fail@plt+0x2acb0>
   3c7b8:	add	r0, sp, #60	; 0x3c
   3c7bc:	bl	31220 <__assert_fail@plt+0x1ec2c>
   3c7c0:	cmp	r0, #0
   3c7c4:	bne	3c800 <__assert_fail@plt+0x2a20c>
   3c7c8:	ldr	r3, [sp, #92]	; 0x5c
   3c7cc:	cmp	r5, r3
   3c7d0:	ble	3c8b4 <__assert_fail@plt+0x2a2c0>
   3c7d4:	ldr	r3, [sp, #88]	; 0x58
   3c7d8:	ldr	r2, [r4, #92]	; 0x5c
   3c7dc:	ldr	r1, [sp, #96]	; 0x60
   3c7e0:	add	r3, r3, r2
   3c7e4:	cmp	r1, r3
   3c7e8:	bgt	3c8b4 <__assert_fail@plt+0x2a2c0>
   3c7ec:	lsl	r1, r1, #1
   3c7f0:	add	r0, sp, #60	; 0x3c
   3c7f4:	bl	30e88 <__assert_fail@plt+0x1e894>
   3c7f8:	cmp	r0, #0
   3c7fc:	beq	3c7b8 <__assert_fail@plt+0x2a1c4>
   3c800:	str	r0, [sp, #36]	; 0x24
   3c804:	ldr	r6, [r8]
   3c808:	ldr	r0, [r6, #56]	; 0x38
   3c80c:	cmp	r0, #0
   3c810:	beq	3c824 <__assert_fail@plt+0x2a230>
   3c814:	ldr	r5, [r0]
   3c818:	bl	2db68 <__assert_fail@plt+0x1b574>
   3c81c:	subs	r0, r5, #0
   3c820:	bne	3c814 <__assert_fail@plt+0x2a220>
   3c824:	mov	r5, #0
   3c828:	mov	r3, #31
   3c82c:	str	r3, [r6, #64]	; 0x40
   3c830:	ldr	r0, [r6, #16]
   3c834:	str	r5, [r6, #56]	; 0x38
   3c838:	str	r5, [r6, #52]	; 0x34
   3c83c:	bl	2db68 <__assert_fail@plt+0x1b574>
   3c840:	str	r5, [r6, #16]
   3c844:	add	r0, sp, #60	; 0x3c
   3c848:	bl	31c40 <__assert_fail@plt+0x1f64c>
   3c84c:	ldr	r3, [sp, #24]
   3c850:	cmp	r3, r5
   3c854:	beq	3c860 <__assert_fail@plt+0x2a26c>
   3c858:	add	r0, r4, #136	; 0x88
   3c85c:	bl	11f70 <pthread_mutex_destroy@plt>
   3c860:	mov	r0, r4
   3c864:	bl	31c70 <__assert_fail@plt+0x1f67c>
   3c868:	ldr	r0, [sp, #36]	; 0x24
   3c86c:	mov	r3, #0
   3c870:	str	r3, [r8]
   3c874:	str	r3, [r8, #4]
   3c878:	add	sp, sp, #148	; 0x94
   3c87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c880:	cmp	r1, #1
   3c884:	bgt	3cf5c <__assert_fail@plt+0x2a968>
   3c888:	cmp	r3, #0
   3c88c:	beq	3d29c <__assert_fail@plt+0x2aca8>
   3c890:	ldr	ip, [sp, #96]	; 0x60
   3c894:	ldr	r2, [sp, #108]	; 0x6c
   3c898:	ldr	r3, [sp, #88]	; 0x58
   3c89c:	cmp	ip, r2
   3c8a0:	movge	ip, r2
   3c8a4:	cmp	ip, r3
   3c8a8:	bgt	3cb40 <__assert_fail@plt+0x2a54c>
   3c8ac:	str	r3, [sp, #88]	; 0x58
   3c8b0:	str	r3, [sp, #92]	; 0x5c
   3c8b4:	ldr	r5, [r8]
   3c8b8:	mov	r6, #0
   3c8bc:	orr	r2, r7, #8388608	; 0x800000
   3c8c0:	str	r6, [r8, #24]
   3c8c4:	add	r1, sp, #60	; 0x3c
   3c8c8:	str	r7, [r5, #128]	; 0x80
   3c8cc:	add	r0, sp, #40	; 0x28
   3c8d0:	str	r6, [sp, #36]	; 0x24
   3c8d4:	bl	39ffc <__assert_fail@plt+0x27a08>
   3c8d8:	ldr	ip, [sp, #100]	; 0x64
   3c8dc:	add	r2, sp, #36	; 0x24
   3c8e0:	mov	r3, r7
   3c8e4:	str	r2, [sp, #4]
   3c8e8:	str	r6, [sp]
   3c8ec:	add	r2, sp, #40	; 0x28
   3c8f0:	mov	r1, r8
   3c8f4:	add	ip, ip, r0
   3c8f8:	add	r0, sp, #60	; 0x3c
   3c8fc:	str	ip, [sp, #100]	; 0x64
   3c900:	bl	3c3b0 <__assert_fail@plt+0x29dbc>
   3c904:	ldr	r3, [sp, #36]	; 0x24
   3c908:	cmp	r3, r6
   3c90c:	mov	r7, r0
   3c910:	bne	3d234 <__assert_fail@plt+0x2ac40>
   3c914:	add	fp, sp, #48	; 0x30
   3c918:	add	r9, r5, #56	; 0x38
   3c91c:	add	r5, r5, #64	; 0x40
   3c920:	str	fp, [sp]
   3c924:	mov	ip, #2
   3c928:	str	r3, [fp, #4]
   3c92c:	mov	r1, r5
   3c930:	mov	r0, r9
   3c934:	mov	r2, r3
   3c938:	str	r3, [sp, #48]	; 0x30
   3c93c:	strb	ip, [sp, #52]	; 0x34
   3c940:	bl	3295c <__assert_fail@plt+0x20368>
   3c944:	cmp	r7, #0
   3c948:	mov	r6, r0
   3c94c:	beq	3c97c <__assert_fail@plt+0x2a388>
   3c950:	mov	r3, #0
   3c954:	str	fp, [sp]
   3c958:	mov	ip, #16
   3c95c:	str	r3, [fp, #4]
   3c960:	str	r3, [sp, #48]	; 0x30
   3c964:	mov	r2, r7
   3c968:	mov	r1, r5
   3c96c:	mov	r0, r9
   3c970:	mov	r3, r6
   3c974:	strb	ip, [sp, #52]	; 0x34
   3c978:	bl	3295c <__assert_fail@plt+0x20368>
   3c97c:	cmp	r0, #0
   3c980:	cmpne	r6, #0
   3c984:	moveq	r3, #1
   3c988:	movne	r3, #0
   3c98c:	str	r3, [sp, #12]
   3c990:	moveq	r3, #12
   3c994:	streq	r3, [sp, #36]	; 0x24
   3c998:	beq	3d1b0 <__assert_fail@plt+0x2abbc>
   3c99c:	ldr	r6, [r8]
   3c9a0:	str	r0, [r4, #52]	; 0x34
   3c9a4:	ldr	r0, [r6, #4]
   3c9a8:	lsl	r0, r0, #2
   3c9ac:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3c9b0:	ldr	r3, [r6, #4]
   3c9b4:	str	r0, [r6, #12]
   3c9b8:	lsl	r0, r3, #2
   3c9bc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3c9c0:	ldr	r3, [r6, #4]
   3c9c4:	add	r3, r3, r3, lsl #1
   3c9c8:	str	r0, [r6, #16]
   3c9cc:	lsl	r0, r3, #2
   3c9d0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3c9d4:	ldr	r3, [r6, #4]
   3c9d8:	add	r3, r3, r3, lsl #1
   3c9dc:	str	r0, [r6, #20]
   3c9e0:	lsl	r0, r3, #2
   3c9e4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3c9e8:	ldr	r3, [r6, #12]
   3c9ec:	cmp	r3, #0
   3c9f0:	str	r0, [r6, #24]
   3c9f4:	beq	3ccec <__assert_fail@plt+0x2a6f8>
   3c9f8:	ldr	r3, [r6, #16]
   3c9fc:	cmp	r3, #0
   3ca00:	beq	3ccec <__assert_fail@plt+0x2a6f8>
   3ca04:	ldr	r3, [r6, #20]
   3ca08:	cmp	r3, #0
   3ca0c:	beq	3d180 <__assert_fail@plt+0x2ab8c>
   3ca10:	cmp	r0, #0
   3ca14:	beq	3ccec <__assert_fail@plt+0x2a6f8>
   3ca18:	ldr	r0, [r8, #24]
   3ca1c:	lsl	r0, r0, #2
   3ca20:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3ca24:	cmp	r0, #0
   3ca28:	str	r0, [r6, #132]	; 0x84
   3ca2c:	beq	3caa0 <__assert_fail@plt+0x2a4ac>
   3ca30:	ldr	r1, [r8, #24]
   3ca34:	cmp	r1, #0
   3ca38:	subne	r2, r0, #4
   3ca3c:	ldrne	r3, [sp, #12]
   3ca40:	beq	3ca54 <__assert_fail@plt+0x2a460>
   3ca44:	str	r3, [r2, #4]!
   3ca48:	add	r3, r3, #1
   3ca4c:	cmp	r3, r1
   3ca50:	bne	3ca44 <__assert_fail@plt+0x2a450>
   3ca54:	ldr	r1, [pc, #2532]	; 3d440 <__assert_fail@plt+0x2ae4c>
   3ca58:	mov	r2, r6
   3ca5c:	ldr	r0, [r6, #52]	; 0x34
   3ca60:	bl	30e14 <__assert_fail@plt+0x1e820>
   3ca64:	ldr	r1, [r8, #24]
   3ca68:	cmp	r1, #0
   3ca6c:	beq	3d288 <__assert_fail@plt+0x2ac94>
   3ca70:	ldr	r0, [r6, #132]	; 0x84
   3ca74:	ldr	r3, [r0]
   3ca78:	cmp	r3, #0
   3ca7c:	beq	3ca90 <__assert_fail@plt+0x2a49c>
   3ca80:	b	3caa0 <__assert_fail@plt+0x2a4ac>
   3ca84:	ldr	r2, [r0, r3, lsl #2]
   3ca88:	cmp	r2, r3
   3ca8c:	bne	3caa0 <__assert_fail@plt+0x2a4ac>
   3ca90:	add	r3, r3, #1
   3ca94:	cmp	r3, r1
   3ca98:	bcc	3ca84 <__assert_fail@plt+0x2a490>
   3ca9c:	beq	3d28c <__assert_fail@plt+0x2ac98>
   3caa0:	mov	r2, r8
   3caa4:	ldr	r1, [pc, #2456]	; 3d444 <__assert_fail@plt+0x2ae50>
   3caa8:	ldr	r0, [r6, #52]	; 0x34
   3caac:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3cab0:	subs	r3, r0, #0
   3cab4:	bne	3cbc0 <__assert_fail@plt+0x2a5cc>
   3cab8:	mov	r2, r6
   3cabc:	ldr	r1, [pc, #2436]	; 3d448 <__assert_fail@plt+0x2ae54>
   3cac0:	ldr	r0, [r6, #52]	; 0x34
   3cac4:	bl	30da0 <__assert_fail@plt+0x1e7ac>
   3cac8:	subs	r3, r0, #0
   3cacc:	bne	3cbc0 <__assert_fail@plt+0x2a5cc>
   3cad0:	mov	r2, r6
   3cad4:	ldr	r1, [pc, #2416]	; 3d44c <__assert_fail@plt+0x2ae58>
   3cad8:	ldr	r0, [r6, #52]	; 0x34
   3cadc:	str	r3, [sp, #20]
   3cae0:	bl	30e14 <__assert_fail@plt+0x1e820>
   3cae4:	ldr	r7, [r6, #52]	; 0x34
   3cae8:	ldrb	r3, [r7, #24]
   3caec:	ldr	r2, [r7, #28]
   3caf0:	sub	r3, r3, #2
   3caf4:	cmp	r3, #14
   3caf8:	ldrls	pc, [pc, r3, lsl #2]
   3cafc:	b	3cee8 <__assert_fail@plt+0x2a8f4>
   3cb00:	andeq	ip, r3, ip, ror sp
   3cb04:	andeq	ip, r3, r8, ror #29
   3cb08:	andeq	ip, r3, ip, ror #22
   3cb0c:	andeq	ip, r3, r8, ror #29
   3cb10:	andeq	ip, r3, r8, ror #29
   3cb14:	andeq	ip, r3, r8, ror #29
   3cb18:	andeq	ip, r3, ip, ror lr
   3cb1c:	andeq	ip, r3, ip, ror lr
   3cb20:	strdeq	ip, [r3], -r8
   3cb24:	strdeq	ip, [r3], -r8
   3cb28:	andeq	ip, r3, ip, ror lr
   3cb2c:	andeq	ip, r3, r8, ror #29
   3cb30:	andeq	ip, r3, r8, ror #29
   3cb34:	andeq	ip, r3, r8, ror #29
   3cb38:	andeq	ip, r3, ip, ror sp
   3cb3c:	ldr	r6, [sp, #64]	; 0x40
   3cb40:	ldr	r2, [sp, #60]	; 0x3c
   3cb44:	ldr	r0, [sp, #84]	; 0x54
   3cb48:	add	r2, r2, r3
   3cb4c:	ldr	r1, [sp, #124]	; 0x7c
   3cb50:	ldrb	r2, [r2, r0]
   3cb54:	ldrb	r2, [r1, r2]
   3cb58:	strb	r2, [r6, r3]
   3cb5c:	add	r3, r3, #1
   3cb60:	cmp	ip, r3
   3cb64:	bne	3cb3c <__assert_fail@plt+0x2a548>
   3cb68:	b	3c8ac <__assert_fail@plt+0x2a2b8>
   3cb6c:	ldr	r1, [r7, #16]
   3cb70:	ldr	r3, [r6, #12]
   3cb74:	ldr	r5, [r1, #28]
   3cb78:	str	r5, [r3, r2, lsl #2]
   3cb7c:	ldrb	r3, [r7, #24]
   3cb80:	cmp	r3, #4
   3cb84:	bne	3cd7c <__assert_fail@plt+0x2a788>
   3cb88:	ldr	r3, [r6, #20]
   3cb8c:	add	r2, r2, r2, lsl #1
   3cb90:	mov	r1, #1
   3cb94:	add	sl, r3, r2, lsl #2
   3cb98:	str	r1, [r3, r2, lsl #2]
   3cb9c:	mov	r0, #4
   3cba0:	str	r1, [sl, #4]
   3cba4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3cba8:	cmp	r0, #0
   3cbac:	str	r0, [sl, #8]
   3cbb0:	bne	3ceb0 <__assert_fail@plt+0x2a8bc>
   3cbb4:	mov	r3, #12
   3cbb8:	str	r0, [sl, #4]
   3cbbc:	str	r0, [sl]
   3cbc0:	str	r3, [sp, #36]	; 0x24
   3cbc4:	b	3c804 <__assert_fail@plt+0x2a210>
   3cbc8:	mov	r3, #12
   3cbcc:	str	r3, [sp, #36]	; 0x24
   3cbd0:	mov	r0, r4
   3cbd4:	bl	31c70 <__assert_fail@plt+0x1f67c>
   3cbd8:	mov	r3, #0
   3cbdc:	ldr	r0, [sp, #36]	; 0x24
   3cbe0:	str	r3, [r8]
   3cbe4:	str	r3, [r8, #4]
   3cbe8:	add	sp, sp, #148	; 0x94
   3cbec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cbf0:	ldrb	r3, [r8, #28]
   3cbf4:	tst	r3, #16
   3cbf8:	bne	3cc08 <__assert_fail@plt+0x2a614>
   3cbfc:	ldr	r3, [r8, #24]
   3cc00:	cmp	r3, #0
   3cc04:	bne	3d278 <__assert_fail@plt+0x2ac84>
   3cc08:	ldr	r3, [r6, #76]	; 0x4c
   3cc0c:	cmp	r3, #0
   3cc10:	beq	3cf80 <__assert_fail@plt+0x2a98c>
   3cc14:	add	r0, r0, r0, lsl #1
   3cc18:	lsl	r0, r0, #2
   3cc1c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3cc20:	cmp	r0, #0
   3cc24:	str	r0, [r6, #28]
   3cc28:	beq	3ccec <__assert_fail@plt+0x2a6f8>
   3cc2c:	ldr	r3, [r6, #8]
   3cc30:	cmp	r3, #0
   3cc34:	beq	3cf80 <__assert_fail@plt+0x2a98c>
   3cc38:	mov	r3, #0
   3cc3c:	mov	r2, r0
   3cc40:	mov	r1, r3
   3cc44:	mov	r0, r3
   3cc48:	b	3cc50 <__assert_fail@plt+0x2a65c>
   3cc4c:	ldr	r2, [r6, #28]
   3cc50:	add	ip, r2, r3
   3cc54:	str	r1, [r2, r3]
   3cc58:	str	r1, [ip, #4]
   3cc5c:	str	r1, [ip, #8]
   3cc60:	ldr	r2, [r6, #8]
   3cc64:	add	r0, r0, #1
   3cc68:	cmp	r0, r2
   3cc6c:	add	r3, r3, #12
   3cc70:	bcc	3cc4c <__assert_fail@plt+0x2a658>
   3cc74:	cmp	r2, #0
   3cc78:	beq	3cf80 <__assert_fail@plt+0x2a98c>
   3cc7c:	mov	r5, #0
   3cc80:	ldr	r3, [r6, #24]
   3cc84:	str	r4, [sp, #12]
   3cc88:	mov	sl, r5
   3cc8c:	mov	r4, r6
   3cc90:	mov	ip, r2
   3cc94:	add	r1, r3, r5
   3cc98:	ldmib	r1, {r0, r6}
   3cc9c:	cmp	r0, #0
   3cca0:	subgt	r6, r6, #4
   3cca4:	movgt	r7, #0
   3cca8:	bgt	3ccc8 <__assert_fail@plt+0x2a6d4>
   3ccac:	b	3cf6c <__assert_fail@plt+0x2a978>
   3ccb0:	ldr	r3, [r4, #24]
   3ccb4:	add	r7, r7, #1
   3ccb8:	add	r2, r3, r5
   3ccbc:	ldr	r2, [r2, #4]
   3ccc0:	cmp	r7, r2
   3ccc4:	bge	3cf68 <__assert_fail@plt+0x2a974>
   3ccc8:	ldr	r3, [r6, #4]!
   3cccc:	ldr	r0, [r4, #28]
   3ccd0:	mov	r1, sl
   3ccd4:	add	r3, r3, r3, lsl #1
   3ccd8:	add	r0, r0, r3, lsl #2
   3ccdc:	bl	30f1c <__assert_fail@plt+0x1e928>
   3cce0:	cmp	r0, #0
   3cce4:	bne	3ccb0 <__assert_fail@plt+0x2a6bc>
   3cce8:	ldr	r4, [sp, #12]
   3ccec:	mov	r3, #12
   3ccf0:	str	r3, [sp, #36]	; 0x24
   3ccf4:	b	3c804 <__assert_fail@plt+0x2a210>
   3ccf8:	ldrb	r3, [r6, #88]	; 0x58
   3ccfc:	ldr	r5, [r6, #20]
   3cd00:	add	r2, r2, r2, lsl #1
   3cd04:	orr	r3, r3, #1
   3cd08:	strb	r3, [r6, #88]	; 0x58
   3cd0c:	ldr	r3, [r7, #4]
   3cd10:	mov	r0, #8
   3cd14:	cmp	r3, #0
   3cd18:	ldrne	r3, [r3, #12]
   3cd1c:	ldreq	r3, [r7, #16]
   3cd20:	ldr	r9, [r3, #28]
   3cd24:	ldr	r3, [r7, #8]
   3cd28:	cmp	r3, #0
   3cd2c:	ldrne	r3, [r3, #12]
   3cd30:	ldreq	r3, [r7, #16]
   3cd34:	ldr	sl, [r3, #28]
   3cd38:	mov	r3, #2
   3cd3c:	str	r3, [r5, r2, lsl #2]
   3cd40:	add	r5, r5, r2, lsl r3
   3cd44:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3cd48:	cmp	r0, #0
   3cd4c:	str	r0, [r5, #8]
   3cd50:	beq	3ccec <__assert_fail@plt+0x2a6f8>
   3cd54:	cmp	r9, sl
   3cd58:	moveq	r3, #1
   3cd5c:	streq	r3, [r5, #4]
   3cd60:	streq	r9, [r0]
   3cd64:	beq	3cd7c <__assert_fail@plt+0x2a788>
   3cd68:	mov	r3, #2
   3cd6c:	str	r3, [r5, #4]
   3cd70:	stmlt	r0, {r9, sl}
   3cd74:	strge	sl, [r0]
   3cd78:	strge	r9, [r0, #4]
   3cd7c:	ldr	r3, [r7, #4]
   3cd80:	cmp	r3, #0
   3cd84:	ldreq	r2, [sp, #20]
   3cd88:	beq	3cd98 <__assert_fail@plt+0x2a7a4>
   3cd8c:	mov	r7, r3
   3cd90:	b	3cae8 <__assert_fail@plt+0x2a4f4>
   3cd94:	mov	r7, r5
   3cd98:	ldr	r3, [r7, #8]
   3cd9c:	cmp	r3, #0
   3cda0:	cmpne	r3, r2
   3cda4:	moveq	sl, #1
   3cda8:	movne	sl, #0
   3cdac:	bne	3cd8c <__assert_fail@plt+0x2a798>
   3cdb0:	ldr	r5, [r7]
   3cdb4:	mov	r2, r7
   3cdb8:	cmp	r5, #0
   3cdbc:	bne	3cd94 <__assert_fail@plt+0x2a7a0>
   3cdc0:	ldr	r9, [sp, #12]
   3cdc4:	ldr	r3, [r6, #24]
   3cdc8:	add	r7, r5, r5, lsl #1
   3cdcc:	lsl	r7, r7, #2
   3cdd0:	add	r2, r3, r7
   3cdd4:	ldr	r2, [r2, #4]
   3cdd8:	cmp	r2, #0
   3cddc:	beq	3cefc <__assert_fail@plt+0x2a908>
   3cde0:	ldr	r0, [r6, #8]
   3cde4:	add	r5, r5, #1
   3cde8:	cmp	r0, r5
   3cdec:	bne	3cdc8 <__assert_fail@plt+0x2a7d4>
   3cdf0:	cmp	r9, #0
   3cdf4:	beq	3cbf0 <__assert_fail@plt+0x2a5fc>
   3cdf8:	ldr	r9, [sp, #12]
   3cdfc:	mov	r5, #0
   3ce00:	b	3cdc8 <__assert_fail@plt+0x2a7d4>
   3ce04:	mov	r1, #1
   3ce08:	mov	r0, #32
   3ce0c:	bl	2d5dc <__assert_fail@plt+0x1afe8>
   3ce10:	cmp	r0, #0
   3ce14:	str	r0, [r4, #60]	; 0x3c
   3ce18:	beq	3cbc8 <__assert_fail@plt+0x2a5d4>
   3ce1c:	mov	fp, #1
   3ce20:	lsl	r9, r6, #3
   3ce24:	mov	sl, #0
   3ce28:	mov	r0, r9
   3ce2c:	bl	123a8 <btowc@plt>
   3ce30:	cmn	r0, #1
   3ce34:	ldrne	r2, [r4, #60]	; 0x3c
   3ce38:	ldrne	r3, [r2, r6]
   3ce3c:	orrne	r3, r3, fp, lsl sl
   3ce40:	strne	r3, [r2, r6]
   3ce44:	bics	r3, r9, #127	; 0x7f
   3ce48:	bne	3ce5c <__assert_fail@plt+0x2a868>
   3ce4c:	cmp	r0, r9
   3ce50:	ldrbne	r3, [r4, #88]	; 0x58
   3ce54:	orrne	r3, r3, #8
   3ce58:	strbne	r3, [r4, #88]	; 0x58
   3ce5c:	add	sl, sl, #1
   3ce60:	cmp	sl, #32
   3ce64:	add	r9, r9, #1
   3ce68:	bne	3ce28 <__assert_fail@plt+0x2a834>
   3ce6c:	add	r6, r6, #4
   3ce70:	cmp	r6, #32
   3ce74:	bne	3ce20 <__assert_fail@plt+0x2a82c>
   3ce78:	b	3c67c <__assert_fail@plt+0x2a088>
   3ce7c:	ldr	r1, [r7, #16]
   3ce80:	ldr	r3, [r6, #20]
   3ce84:	add	r2, r2, r2, lsl #1
   3ce88:	ldr	r5, [r1, #28]
   3ce8c:	add	r9, r3, r2, lsl #2
   3ce90:	mov	r1, #1
   3ce94:	str	r1, [r3, r2, lsl #2]
   3ce98:	mov	r0, #4
   3ce9c:	str	r1, [r9, #4]
   3cea0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3cea4:	cmp	r0, #0
   3cea8:	str	r0, [r9, #8]
   3ceac:	beq	3d2c0 <__assert_fail@plt+0x2accc>
   3ceb0:	str	r5, [r0]
   3ceb4:	b	3cd7c <__assert_fail@plt+0x2a788>
   3ceb8:	ldrb	r3, [r0, #3]
   3cebc:	ldr	r1, [pc, #1420]	; 3d450 <__assert_fail@plt+0x2ae5c>
   3cec0:	cmp	r3, #45	; 0x2d
   3cec4:	moveq	r3, #4
   3cec8:	movne	r3, #3
   3cecc:	add	r0, r0, r3
   3ced0:	bl	11f40 <strcmp@plt>
   3ced4:	cmp	r0, #0
   3ced8:	ldrbeq	r3, [r4, #88]	; 0x58
   3cedc:	orreq	r3, r3, #4
   3cee0:	strbeq	r3, [r4, #88]	; 0x58
   3cee4:	b	3c650 <__assert_fail@plt+0x2a05c>
   3cee8:	ldr	r1, [r7, #16]
   3ceec:	ldr	r3, [r6, #12]
   3cef0:	ldr	r1, [r1, #28]
   3cef4:	str	r1, [r3, r2, lsl #2]
   3cef8:	b	3cd7c <__assert_fail@plt+0x2a788>
   3cefc:	mov	r3, #1
   3cf00:	mov	r2, r5
   3cf04:	mov	r1, r6
   3cf08:	mov	r0, fp
   3cf0c:	bl	33b70 <__assert_fail@plt+0x2157c>
   3cf10:	cmp	r0, #0
   3cf14:	bne	3d174 <__assert_fail@plt+0x2ab80>
   3cf18:	ldr	r3, [r6, #24]
   3cf1c:	add	r7, r3, r7
   3cf20:	ldr	r7, [r7, #4]
   3cf24:	cmp	r7, #0
   3cf28:	bne	3cde0 <__assert_fail@plt+0x2a7ec>
   3cf2c:	ldr	r0, [sp, #56]	; 0x38
   3cf30:	bl	2db68 <__assert_fail@plt+0x1b574>
   3cf34:	ldr	r3, [r6, #8]
   3cf38:	add	r5, r5, #1
   3cf3c:	cmp	r3, r5
   3cf40:	movne	r9, sl
   3cf44:	beq	3cf50 <__assert_fail@plt+0x2a95c>
   3cf48:	ldr	r3, [r6, #24]
   3cf4c:	b	3cdc8 <__assert_fail@plt+0x2a7d4>
   3cf50:	mov	r5, r7
   3cf54:	ldr	r9, [sp, #12]
   3cf58:	b	3cf48 <__assert_fail@plt+0x2a954>
   3cf5c:	add	r0, sp, #60	; 0x3c
   3cf60:	bl	31088 <__assert_fail@plt+0x1ea94>
   3cf64:	b	3c8b4 <__assert_fail@plt+0x2a2c0>
   3cf68:	ldr	ip, [r4, #8]
   3cf6c:	add	sl, sl, #1
   3cf70:	cmp	sl, ip
   3cf74:	add	r5, r5, #12
   3cf78:	bcc	3cc94 <__assert_fail@plt+0x2a6a0>
   3cf7c:	ldr	r4, [sp, #12]
   3cf80:	ldrb	r2, [r4, #88]	; 0x58
   3cf84:	ldr	r3, [sp, #16]
   3cf88:	clz	r3, r3
   3cf8c:	lsr	r3, r3, #5
   3cf90:	mov	r1, #0
   3cf94:	ands	r3, r3, r2, lsr #2
   3cf98:	str	r1, [sp, #36]	; 0x24
   3cf9c:	beq	3cfac <__assert_fail@plt+0x2a9b8>
   3cfa0:	ldr	r2, [r8, #20]
   3cfa4:	cmp	r2, #0
   3cfa8:	beq	3d2d0 <__assert_fail@plt+0x2acdc>
   3cfac:	ldr	r3, [r4, #52]	; 0x34
   3cfb0:	ldr	r1, [r4, #24]
   3cfb4:	mov	r0, fp
   3cfb8:	ldr	r3, [r3, #12]
   3cfbc:	ldr	r3, [r3, #28]
   3cfc0:	str	r3, [r4, #72]	; 0x48
   3cfc4:	add	r3, r3, r3, lsl #1
   3cfc8:	add	r1, r1, r3, lsl #2
   3cfcc:	bl	32dd4 <__assert_fail@plt+0x207e0>
   3cfd0:	cmp	r0, #0
   3cfd4:	mov	r6, r0
   3cfd8:	str	r0, [sp, #40]	; 0x28
   3cfdc:	bne	3d104 <__assert_fail@plt+0x2ab10>
   3cfe0:	ldr	r3, [r4, #76]	; 0x4c
   3cfe4:	cmp	r3, #0
   3cfe8:	ble	3d0c4 <__assert_fail@plt+0x2aad0>
   3cfec:	ldr	r5, [sp, #52]	; 0x34
   3cff0:	cmp	r5, #0
   3cff4:	ble	3d0c4 <__assert_fail@plt+0x2aad0>
   3cff8:	mov	r7, r0
   3cffc:	b	3d00c <__assert_fail@plt+0x2aa18>
   3d000:	add	r7, r7, #1
   3d004:	cmp	r7, r5
   3d008:	bge	3d0c4 <__assert_fail@plt+0x2aad0>
   3d00c:	ldr	r2, [sp, #56]	; 0x38
   3d010:	ldr	ip, [r4]
   3d014:	ldr	r9, [r2, r7, lsl #2]
   3d018:	add	lr, ip, r9, lsl #3
   3d01c:	ldrb	r3, [lr, #4]
   3d020:	cmp	r3, #4
   3d024:	bne	3d000 <__assert_fail@plt+0x2aa0c>
   3d028:	cmp	r5, #0
   3d02c:	ble	3d16c <__assert_fail@plt+0x2ab78>
   3d030:	sub	r2, r2, #4
   3d034:	mov	r3, #0
   3d038:	b	3d048 <__assert_fail@plt+0x2aa54>
   3d03c:	add	r3, r3, #1
   3d040:	cmp	r5, r3
   3d044:	beq	3d000 <__assert_fail@plt+0x2aa0c>
   3d048:	ldr	r1, [r2, #4]!
   3d04c:	add	r0, ip, r1, lsl #3
   3d050:	ldrb	r0, [r0, #4]
   3d054:	cmp	r0, #9
   3d058:	bne	3d03c <__assert_fail@plt+0x2aa48>
   3d05c:	ldr	r0, [ip, r1, lsl #3]
   3d060:	ldr	r1, [lr]
   3d064:	cmp	r0, r1
   3d068:	bne	3d03c <__assert_fail@plt+0x2aa48>
   3d06c:	ldr	r3, [r4, #20]
   3d070:	add	r9, r9, r9, lsl #1
   3d074:	add	r1, sp, #56	; 0x38
   3d078:	add	r9, r3, r9, lsl #2
   3d07c:	mov	r0, r5
   3d080:	ldr	r3, [r9, #8]
   3d084:	ldr	r9, [r3]
   3d088:	mov	r2, r9
   3d08c:	bl	3247c <__assert_fail@plt+0x1fe88>
   3d090:	cmp	r0, #0
   3d094:	bne	3d000 <__assert_fail@plt+0x2aa0c>
   3d098:	ldr	r1, [r4, #24]
   3d09c:	add	r9, r9, r9, lsl #1
   3d0a0:	mov	r0, fp
   3d0a4:	add	r1, r1, r9, lsl #2
   3d0a8:	bl	339e8 <__assert_fail@plt+0x213f4>
   3d0ac:	cmp	r0, #0
   3d0b0:	bne	3d2b8 <__assert_fail@plt+0x2acc4>
   3d0b4:	ldr	r5, [sp, #52]	; 0x34
   3d0b8:	mov	r7, #1
   3d0bc:	cmp	r7, r5
   3d0c0:	blt	3d00c <__assert_fail@plt+0x2aa18>
   3d0c4:	mov	r3, #0
   3d0c8:	mov	r2, fp
   3d0cc:	mov	r1, r4
   3d0d0:	add	r0, sp, #40	; 0x28
   3d0d4:	bl	32f98 <__assert_fail@plt+0x209a4>
   3d0d8:	cmp	r0, #0
   3d0dc:	str	r0, [r4, #36]	; 0x24
   3d0e0:	beq	3d220 <__assert_fail@plt+0x2ac2c>
   3d0e4:	ldrsb	r3, [r0, #52]	; 0x34
   3d0e8:	cmp	r3, #0
   3d0ec:	strge	r0, [r4, #48]	; 0x30
   3d0f0:	strge	r0, [r4, #44]	; 0x2c
   3d0f4:	strge	r0, [r4, #40]	; 0x28
   3d0f8:	blt	3d1bc <__assert_fail@plt+0x2abc8>
   3d0fc:	ldr	r0, [sp, #56]	; 0x38
   3d100:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d104:	ldr	r7, [r8]
   3d108:	str	r6, [sp, #36]	; 0x24
   3d10c:	ldr	r0, [r7, #56]	; 0x38
   3d110:	cmp	r0, #0
   3d114:	beq	3d128 <__assert_fail@plt+0x2ab34>
   3d118:	ldr	r5, [r0]
   3d11c:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d120:	subs	r0, r5, #0
   3d124:	bne	3d118 <__assert_fail@plt+0x2ab24>
   3d128:	mov	r5, #0
   3d12c:	mov	r3, #31
   3d130:	str	r3, [r7, #64]	; 0x40
   3d134:	ldr	r0, [r7, #16]
   3d138:	str	r5, [r7, #56]	; 0x38
   3d13c:	str	r5, [r7, #52]	; 0x34
   3d140:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d144:	add	r0, sp, #60	; 0x3c
   3d148:	str	r5, [r7, #16]
   3d14c:	bl	31c40 <__assert_fail@plt+0x1f64c>
   3d150:	ldr	r0, [sp, #36]	; 0x24
   3d154:	cmp	r0, r5
   3d158:	beq	3c878 <__assert_fail@plt+0x2a284>
   3d15c:	ldr	r3, [sp, #24]
   3d160:	cmp	r3, #0
   3d164:	bne	3c858 <__assert_fail@plt+0x2a264>
   3d168:	b	3c860 <__assert_fail@plt+0x2a26c>
   3d16c:	bne	3d06c <__assert_fail@plt+0x2aa78>
   3d170:	b	3d000 <__assert_fail@plt+0x2aa0c>
   3d174:	mov	r3, r0
   3d178:	str	r3, [sp, #36]	; 0x24
   3d17c:	b	3c804 <__assert_fail@plt+0x2a210>
   3d180:	mov	r3, #12
   3d184:	str	r3, [sp, #36]	; 0x24
   3d188:	b	3c804 <__assert_fail@plt+0x2a210>
   3d18c:	mov	r0, r4
   3d190:	mov	r1, #160	; 0xa0
   3d194:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3d198:	subs	r4, r0, #0
   3d19c:	beq	3d2b0 <__assert_fail@plt+0x2acbc>
   3d1a0:	mov	r3, #160	; 0xa0
   3d1a4:	str	r4, [r8]
   3d1a8:	str	r3, [r8, #4]
   3d1ac:	b	3c5a4 <__assert_fail@plt+0x29fb0>
   3d1b0:	mov	r3, #0
   3d1b4:	str	r3, [r4, #52]	; 0x34
   3d1b8:	b	3c804 <__assert_fail@plt+0x2a210>
   3d1bc:	mov	r3, #1
   3d1c0:	mov	r2, fp
   3d1c4:	mov	r1, r4
   3d1c8:	add	r0, sp, #40	; 0x28
   3d1cc:	bl	32f98 <__assert_fail@plt+0x209a4>
   3d1d0:	mov	r3, #2
   3d1d4:	mov	r2, fp
   3d1d8:	mov	r1, r4
   3d1dc:	str	r0, [r4, #40]	; 0x28
   3d1e0:	add	r0, sp, #40	; 0x28
   3d1e4:	bl	32f98 <__assert_fail@plt+0x209a4>
   3d1e8:	mov	r3, #6
   3d1ec:	mov	r2, fp
   3d1f0:	mov	r1, r4
   3d1f4:	str	r0, [r4, #44]	; 0x2c
   3d1f8:	add	r0, sp, #40	; 0x28
   3d1fc:	bl	32f98 <__assert_fail@plt+0x209a4>
   3d200:	ldr	r3, [r4, #40]	; 0x28
   3d204:	cmp	r3, #0
   3d208:	str	r0, [r4, #48]	; 0x30
   3d20c:	beq	3d220 <__assert_fail@plt+0x2ac2c>
   3d210:	ldr	r3, [r4, #44]	; 0x2c
   3d214:	cmp	r0, #0
   3d218:	cmpne	r3, #0
   3d21c:	bne	3d0fc <__assert_fail@plt+0x2ab08>
   3d220:	ldr	r6, [sp, #40]	; 0x28
   3d224:	b	3d104 <__assert_fail@plt+0x2ab10>
   3d228:	mov	sl, r5
   3d22c:	mov	r1, #1
   3d230:	b	3c600 <__assert_fail@plt+0x2a00c>
   3d234:	cmp	r7, #0
   3d238:	beq	3d1b0 <__assert_fail@plt+0x2abbc>
   3d23c:	add	fp, sp, #48	; 0x30
   3d240:	add	r9, r5, #56	; 0x38
   3d244:	add	r5, r5, #64	; 0x40
   3d248:	str	fp, [sp]
   3d24c:	mov	ip, #2
   3d250:	str	r6, [fp, #4]
   3d254:	mov	r3, r6
   3d258:	mov	r2, r6
   3d25c:	mov	r1, r5
   3d260:	mov	r0, r9
   3d264:	str	r6, [sp, #48]	; 0x30
   3d268:	strb	ip, [sp, #52]	; 0x34
   3d26c:	bl	3295c <__assert_fail@plt+0x20368>
   3d270:	mov	r6, r0
   3d274:	b	3c950 <__assert_fail@plt+0x2a35c>
   3d278:	ldrb	r3, [r6, #88]	; 0x58
   3d27c:	tst	r3, #1
   3d280:	bne	3cc14 <__assert_fail@plt+0x2a620>
   3d284:	b	3cc08 <__assert_fail@plt+0x2a614>
   3d288:	ldr	r0, [r6, #132]	; 0x84
   3d28c:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d290:	mov	r3, #0
   3d294:	str	r3, [r6, #132]	; 0x84
   3d298:	b	3caa0 <__assert_fail@plt+0x2a4ac>
   3d29c:	ldr	r3, [sp, #96]	; 0x60
   3d2a0:	b	3c8ac <__assert_fail@plt+0x2a2b8>
   3d2a4:	add	r0, sp, #60	; 0x3c
   3d2a8:	bl	317a0 <__assert_fail@plt+0x1f1ac>
   3d2ac:	b	3c8b4 <__assert_fail@plt+0x2a2c0>
   3d2b0:	mov	r0, #12
   3d2b4:	b	3c878 <__assert_fail@plt+0x2a284>
   3d2b8:	mov	r6, r0
   3d2bc:	b	3d104 <__assert_fail@plt+0x2ab10>
   3d2c0:	str	r0, [r9, #4]
   3d2c4:	str	r0, [r9]
   3d2c8:	mov	r3, #12
   3d2cc:	b	3cbc0 <__assert_fail@plt+0x2a5cc>
   3d2d0:	ldr	r7, [r4, #8]
   3d2d4:	cmp	r7, #0
   3d2d8:	beq	3d400 <__assert_fail@plt+0x2ae0c>
   3d2dc:	ldr	r1, [r4]
   3d2e0:	mov	lr, r9
   3d2e4:	mov	r0, r1
   3d2e8:	mov	r5, r1
   3d2ec:	ldrb	ip, [r5, #4]
   3d2f0:	sub	ip, ip, #1
   3d2f4:	cmp	ip, #11
   3d2f8:	ldrls	pc, [pc, ip, lsl #2]
   3d2fc:	b	3d39c <__assert_fail@plt+0x2ada8>
   3d300:	andeq	sp, r3, r0, lsr r3
   3d304:	andeq	sp, r3, ip, lsr r3
   3d308:	andeq	sp, r3, ip, asr #7
   3d30c:	andeq	sp, r3, ip, lsr r3
   3d310:	andeq	sp, r3, r4, asr #7
   3d314:	andeq	ip, r3, ip, lsr #31
   3d318:	muleq	r3, ip, r3
   3d31c:	andeq	sp, r3, ip, lsr r3
   3d320:	andeq	sp, r3, ip, lsr r3
   3d324:	andeq	sp, r3, ip, lsr r3
   3d328:	andeq	sp, r3, ip, lsr r3
   3d32c:	andeq	sp, r3, r0, lsr #7
   3d330:	ldrb	ip, [r1, r2, lsl #3]
   3d334:	lsrs	ip, ip, #7
   3d338:	movne	r9, r3
   3d33c:	add	r2, r2, #1
   3d340:	cmp	r2, r7
   3d344:	add	r5, r5, #8
   3d348:	bne	3d2ec <__assert_fail@plt+0x2acf8>
   3d34c:	orr	r9, r9, lr
   3d350:	ands	r9, r9, #255	; 0xff
   3d354:	beq	3d400 <__assert_fail@plt+0x2ae0c>
   3d358:	add	r2, r1, r2, lsl #3
   3d35c:	mov	r1, #7
   3d360:	b	3d378 <__assert_fail@plt+0x2ad84>
   3d364:	cmp	r3, #5
   3d368:	strbeq	r1, [r0, #4]
   3d36c:	add	r0, r0, #8
   3d370:	cmp	r0, r2
   3d374:	beq	3d3fc <__assert_fail@plt+0x2ae08>
   3d378:	ldrb	r3, [r0, #4]
   3d37c:	cmp	r3, #1
   3d380:	bne	3d364 <__assert_fail@plt+0x2ad70>
   3d384:	ldrsb	r3, [r0]
   3d388:	cmp	r3, #0
   3d38c:	ldrblt	r3, [r0, #6]
   3d390:	biclt	r3, r3, #32
   3d394:	strblt	r3, [r0, #6]
   3d398:	b	3d36c <__assert_fail@plt+0x2ad78>
   3d39c:	bl	125a0 <abort@plt>
   3d3a0:	ldr	ip, [r1, r2, lsl #3]
   3d3a4:	cmp	ip, #32
   3d3a8:	beq	3d33c <__assert_fail@plt+0x2ad48>
   3d3ac:	bls	3d3f0 <__assert_fail@plt+0x2adfc>
   3d3b0:	cmp	ip, #64	; 0x40
   3d3b4:	beq	3d33c <__assert_fail@plt+0x2ad48>
   3d3b8:	cmp	ip, #128	; 0x80
   3d3bc:	beq	3d33c <__assert_fail@plt+0x2ad48>
   3d3c0:	b	3cfac <__assert_fail@plt+0x2a9b8>
   3d3c4:	mov	lr, r3
   3d3c8:	b	3d33c <__assert_fail@plt+0x2ad48>
   3d3cc:	ldr	ip, [r1, r2, lsl #3]
   3d3d0:	add	r6, ip, #12
   3d3d4:	add	ip, ip, #28
   3d3d8:	ldr	sl, [r6, #4]!
   3d3dc:	cmp	sl, #0
   3d3e0:	bne	3cfac <__assert_fail@plt+0x2a9b8>
   3d3e4:	cmp	r6, ip
   3d3e8:	bne	3d3d8 <__assert_fail@plt+0x2ade4>
   3d3ec:	b	3d33c <__assert_fail@plt+0x2ad48>
   3d3f0:	cmp	ip, #16
   3d3f4:	beq	3d33c <__assert_fail@plt+0x2ad48>
   3d3f8:	b	3cfac <__assert_fail@plt+0x2a9b8>
   3d3fc:	mov	r9, lr
   3d400:	ldr	r2, [r4, #76]	; 0x4c
   3d404:	ldrb	r3, [r4, #88]	; 0x58
   3d408:	cmp	r2, #0
   3d40c:	movle	r2, r9
   3d410:	orrgt	r2, r9, #1
   3d414:	and	r2, r2, #1
   3d418:	and	r3, r3, #249	; 0xf9
   3d41c:	orr	r3, r3, r2, lsl #1
   3d420:	mov	r2, #1
   3d424:	strb	r3, [r4, #88]	; 0x58
   3d428:	str	r2, [r4, #92]	; 0x5c
   3d42c:	b	3cfac <__assert_fail@plt+0x2a9b8>
   3d430:	beq	feae7edc <stdout@@GLIBC_2.4+0xfea90988>
   3d434:	andeq	r5, r4, r0, asr #30
   3d438:	muleq	r1, ip, r3
   3d43c:	strdeq	r1, [r1], -r4
   3d440:	andeq	r2, r3, ip, lsr r6
   3d444:	andeq	r2, r3, r0, asr #26
   3d448:	andeq	r3, r3, ip, asr #18
   3d44c:	andeq	r2, r3, r0, ror #13
   3d450:	andeq	r6, r4, r0, lsl #3
   3d454:	ldr	r3, [pc, #96]	; 3d4bc <__assert_fail@plt+0x2aec8>
   3d458:	push	{r4, lr}
   3d45c:	mov	lr, r2
   3d460:	ldr	r3, [r3]
   3d464:	ldrb	ip, [lr, #28]
   3d468:	mov	r2, r1
   3d46c:	mov	r1, r0
   3d470:	lsr	r0, r3, #21
   3d474:	and	r4, r0, #16
   3d478:	and	r0, ip, #239	; 0xef
   3d47c:	orr	r0, r0, r4
   3d480:	orr	r0, r0, #128	; 0x80
   3d484:	strb	r0, [lr, #28]
   3d488:	mov	r0, lr
   3d48c:	bl	3c55c <__assert_fail@plt+0x29f68>
   3d490:	subs	r3, r0, #0
   3d494:	popeq	{r4, pc}
   3d498:	ldr	r1, [pc, #32]	; 3d4c0 <__assert_fail@plt+0x2aecc>
   3d49c:	mov	r2, #5
   3d4a0:	add	r3, r1, r3, lsl #2
   3d4a4:	add	r1, r1, #32
   3d4a8:	ldr	r3, [r3, #416]	; 0x1a0
   3d4ac:	mov	r0, #0
   3d4b0:	add	r1, r1, r3
   3d4b4:	pop	{r4, lr}
   3d4b8:	b	120b4 <dcgettext@plt>
   3d4bc:	andeq	r7, r5, r0, asr #29
   3d4c0:	andeq	r5, r4, r0, asr #30
   3d4c4:	ldr	r3, [pc, #12]	; 3d4d8 <__assert_fail@plt+0x2aee4>
   3d4c8:	ldr	r2, [r3]
   3d4cc:	str	r0, [r3]
   3d4d0:	mov	r0, r2
   3d4d4:	bx	lr
   3d4d8:	andeq	r7, r5, r0, asr #29
   3d4dc:	push	{r4, r5, r6, lr}
   3d4e0:	mov	r2, #256	; 0x100
   3d4e4:	ldr	r5, [r0]
   3d4e8:	ldr	r6, [r0, #16]
   3d4ec:	mov	r4, r0
   3d4f0:	mov	r1, #0
   3d4f4:	mov	r0, r6
   3d4f8:	bl	12378 <memset@plt>
   3d4fc:	ldr	r1, [r5, #36]	; 0x24
   3d500:	mov	r3, r6
   3d504:	add	r2, r1, #12
   3d508:	mov	r0, r4
   3d50c:	add	r1, r1, #8
   3d510:	bl	36414 <__assert_fail@plt+0x23e20>
   3d514:	ldr	r0, [r5, #40]	; 0x28
   3d518:	ldr	r3, [r5, #36]	; 0x24
   3d51c:	cmp	r3, r0
   3d520:	beq	3d53c <__assert_fail@plt+0x2af48>
   3d524:	add	r2, r0, #12
   3d528:	add	r1, r0, #8
   3d52c:	mov	r3, r6
   3d530:	mov	r0, r4
   3d534:	bl	36414 <__assert_fail@plt+0x23e20>
   3d538:	ldr	r0, [r5, #36]	; 0x24
   3d53c:	ldr	r1, [r5, #44]	; 0x2c
   3d540:	cmp	r1, r0
   3d544:	beq	3d560 <__assert_fail@plt+0x2af6c>
   3d548:	add	r2, r1, #12
   3d54c:	mov	r0, r4
   3d550:	mov	r3, r6
   3d554:	add	r1, r1, #8
   3d558:	bl	36414 <__assert_fail@plt+0x23e20>
   3d55c:	ldr	r0, [r5, #36]	; 0x24
   3d560:	ldr	r1, [r5, #48]	; 0x30
   3d564:	cmp	r1, r0
   3d568:	beq	3d580 <__assert_fail@plt+0x2af8c>
   3d56c:	add	r2, r1, #12
   3d570:	mov	r3, r6
   3d574:	add	r1, r1, #8
   3d578:	mov	r0, r4
   3d57c:	bl	36414 <__assert_fail@plt+0x23e20>
   3d580:	ldrb	r3, [r4, #28]
   3d584:	mov	r0, #0
   3d588:	orr	r3, r3, #8
   3d58c:	strb	r3, [r4, #28]
   3d590:	pop	{r4, r5, r6, pc}
   3d594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d598:	cmp	r3, r2
   3d59c:	mov	r5, r3
   3d5a0:	sub	sp, sp, #52	; 0x34
   3d5a4:	movle	r3, #0
   3d5a8:	movgt	r3, #1
   3d5ac:	orrs	r3, r3, r5, lsr #31
   3d5b0:	ldrb	r3, [sp, #100]	; 0x64
   3d5b4:	ldr	ip, [sp, #88]	; 0x58
   3d5b8:	ldr	sl, [r0]
   3d5bc:	add	r8, r5, ip
   3d5c0:	ldr	r7, [sp, #96]	; 0x60
   3d5c4:	str	r3, [sp, #32]
   3d5c8:	bne	3d870 <__assert_fail@plt+0x2b27c>
   3d5cc:	cmp	r8, r2
   3d5d0:	bgt	3d868 <__assert_fail@plt+0x2b274>
   3d5d4:	cmp	ip, #0
   3d5d8:	cmpge	r5, r8
   3d5dc:	movgt	lr, #1
   3d5e0:	movle	lr, #0
   3d5e4:	bgt	3d868 <__assert_fail@plt+0x2b274>
   3d5e8:	cmp	r8, #0
   3d5ec:	blt	3d8fc <__assert_fail@plt+0x2b308>
   3d5f0:	cmp	r5, r8
   3d5f4:	movgt	lr, #0
   3d5f8:	movle	lr, #1
   3d5fc:	ands	r3, lr, ip, lsr #31
   3d600:	movne	r8, #0
   3d604:	ldr	lr, [pc, #796]	; 3d928 <__assert_fail@plt+0x2b334>
   3d608:	ldr	r4, [pc, #796]	; 3d92c <__assert_fail@plt+0x2b338>
   3d60c:	cmp	lr, #0
   3d610:	mov	ip, #1
   3d614:	moveq	ip, lr
   3d618:	cmp	r4, #0
   3d61c:	mov	lr, #1
   3d620:	moveq	lr, r4
   3d624:	str	r2, [sp, #40]	; 0x28
   3d628:	orr	r2, ip, lr
   3d62c:	ands	r3, r2, #255	; 0xff
   3d630:	str	r1, [sp, #44]	; 0x2c
   3d634:	mov	r6, r0
   3d638:	str	r3, [sp, #28]
   3d63c:	beq	3d648 <__assert_fail@plt+0x2b054>
   3d640:	add	r0, sl, #136	; 0x88
   3d644:	bl	11fd0 <pthread_mutex_lock@plt>
   3d648:	ldrb	r2, [r6, #28]
   3d64c:	cmp	r8, r5
   3d650:	lsr	fp, r2, #5
   3d654:	and	r3, fp, #3
   3d658:	str	r3, [sp, #36]	; 0x24
   3d65c:	bgt	3d710 <__assert_fail@plt+0x2b11c>
   3d660:	lsr	r1, r2, #4
   3d664:	and	r1, r1, #1
   3d668:	cmp	r7, #0
   3d66c:	orreq	r1, r1, #1
   3d670:	cmp	r1, #0
   3d674:	bne	3d904 <__assert_fail@plt+0x2b310>
   3d678:	and	r2, r2, #6
   3d67c:	cmp	r2, #4
   3d680:	ldrne	r0, [r6, #24]
   3d684:	beq	3d8cc <__assert_fail@plt+0x2b2d8>
   3d688:	add	fp, r0, #1
   3d68c:	mov	r4, fp
   3d690:	lsl	r0, fp, #3
   3d694:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3d698:	subs	r9, r0, #0
   3d69c:	beq	3d880 <__assert_fail@plt+0x2b28c>
   3d6a0:	ldr	r3, [sp, #36]	; 0x24
   3d6a4:	str	r9, [sp, #12]
   3d6a8:	str	r3, [sp, #16]
   3d6ac:	ldr	r3, [sp, #92]	; 0x5c
   3d6b0:	str	fp, [sp, #8]
   3d6b4:	str	r3, [sp, #4]
   3d6b8:	str	r8, [sp]
   3d6bc:	ldr	r2, [sp, #40]	; 0x28
   3d6c0:	ldr	r1, [sp, #44]	; 0x2c
   3d6c4:	mov	r3, r5
   3d6c8:	mov	r0, r6
   3d6cc:	bl	37e40 <__assert_fail@plt+0x2584c>
   3d6d0:	cmp	r0, #0
   3d6d4:	beq	3d734 <__assert_fail@plt+0x2b140>
   3d6d8:	cmp	r0, #1
   3d6dc:	mvneq	r5, #0
   3d6e0:	beq	3d6e8 <__assert_fail@plt+0x2b0f4>
   3d6e4:	mvn	r5, #1
   3d6e8:	mov	r0, r9
   3d6ec:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d6f0:	ldr	r3, [sp, #28]
   3d6f4:	cmp	r3, #0
   3d6f8:	beq	3d704 <__assert_fail@plt+0x2b110>
   3d6fc:	add	r0, sl, #136	; 0x88
   3d700:	bl	11ea4 <pthread_mutex_unlock@plt>
   3d704:	mov	r0, r5
   3d708:	add	sp, sp, #52	; 0x34
   3d70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d710:	ldr	r1, [r6, #16]
   3d714:	cmp	r1, #0
   3d718:	beq	3d660 <__assert_fail@plt+0x2b06c>
   3d71c:	tst	r2, #8
   3d720:	bne	3d660 <__assert_fail@plt+0x2b06c>
   3d724:	mov	r0, r6
   3d728:	bl	3d4dc <__assert_fail@plt+0x2aee8>
   3d72c:	ldrb	r2, [r6, #28]
   3d730:	b	3d660 <__assert_fail@plt+0x2b06c>
   3d734:	cmp	r7, #0
   3d738:	beq	3d7e0 <__assert_fail@plt+0x2b1ec>
   3d73c:	ldrb	r8, [r6, #28]
   3d740:	add	fp, r4, #1
   3d744:	lsr	r8, r8, #1
   3d748:	ands	r8, r8, #3
   3d74c:	beq	3d888 <__assert_fail@plt+0x2b294>
   3d750:	cmp	r8, #1
   3d754:	movne	r8, #2
   3d758:	beq	3d7fc <__assert_fail@plt+0x2b208>
   3d75c:	cmp	r4, #0
   3d760:	ble	3d918 <__assert_fail@plt+0x2b324>
   3d764:	ldmib	r7, {r1, r2}
   3d768:	mov	r3, r9
   3d76c:	add	ip, r9, r4, lsl #3
   3d770:	sub	r1, r1, #4
   3d774:	sub	r2, r2, #4
   3d778:	ldr	r0, [r3]
   3d77c:	add	r3, r3, #8
   3d780:	str	r0, [r1, #4]!
   3d784:	ldr	r0, [r3, #-4]
   3d788:	cmp	ip, r3
   3d78c:	str	r0, [r2, #4]!
   3d790:	bne	3d778 <__assert_fail@plt+0x2b184>
   3d794:	ldr	r2, [r7]
   3d798:	mov	r3, r4
   3d79c:	cmp	r2, r4
   3d7a0:	bls	3d7c8 <__assert_fail@plt+0x2b1d4>
   3d7a4:	ldmib	r7, {r0, r1}
   3d7a8:	mvn	r2, #0
   3d7ac:	str	r2, [r1, r3, lsl #2]
   3d7b0:	str	r2, [r0, r3, lsl #2]
   3d7b4:	ldr	r3, [r7]
   3d7b8:	add	r4, r4, #1
   3d7bc:	cmp	r4, r3
   3d7c0:	mov	r3, r4
   3d7c4:	bcc	3d7ac <__assert_fail@plt+0x2b1b8>
   3d7c8:	ldrb	r3, [r6, #28]
   3d7cc:	bic	r3, r3, #6
   3d7d0:	orr	r8, r3, r8, lsl #1
   3d7d4:	tst	r8, #6
   3d7d8:	strb	r8, [r6, #28]
   3d7dc:	beq	3d6e4 <__assert_fail@plt+0x2b0f0>
   3d7e0:	ldr	r3, [sp, #32]
   3d7e4:	cmp	r3, #0
   3d7e8:	ldrne	r3, [r9, #4]
   3d7ec:	subne	r5, r3, r5
   3d7f0:	bne	3d6e8 <__assert_fail@plt+0x2b0f4>
   3d7f4:	ldr	r5, [r9]
   3d7f8:	b	3d6e8 <__assert_fail@plt+0x2b0f4>
   3d7fc:	ldr	r3, [r7]
   3d800:	cmp	r3, fp
   3d804:	bcs	3d75c <__assert_fail@plt+0x2b168>
   3d808:	lsl	r2, fp, #2
   3d80c:	mov	r1, r2
   3d810:	ldr	r0, [r7, #4]
   3d814:	str	r2, [sp, #40]	; 0x28
   3d818:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3d81c:	subs	r3, r0, #0
   3d820:	str	r3, [sp, #36]	; 0x24
   3d824:	beq	3d920 <__assert_fail@plt+0x2b32c>
   3d828:	ldr	r2, [sp, #40]	; 0x28
   3d82c:	ldr	r0, [r7, #8]
   3d830:	mov	r1, r2
   3d834:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3d838:	ldr	r3, [sp, #36]	; 0x24
   3d83c:	subs	r2, r0, #0
   3d840:	strne	r3, [r7, #4]
   3d844:	strne	r2, [r7, #8]
   3d848:	strne	fp, [r7]
   3d84c:	bne	3d75c <__assert_fail@plt+0x2b168>
   3d850:	mov	r0, r3
   3d854:	str	r2, [sp, #36]	; 0x24
   3d858:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d85c:	ldr	r2, [sp, #36]	; 0x24
   3d860:	mov	r8, r2
   3d864:	b	3d7c8 <__assert_fail@plt+0x2b1d4>
   3d868:	mov	r8, r2
   3d86c:	b	3d604 <__assert_fail@plt+0x2b010>
   3d870:	mvn	r5, #0
   3d874:	mov	r0, r5
   3d878:	add	sp, sp, #52	; 0x34
   3d87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d880:	mvn	r5, #1
   3d884:	b	3d6f0 <__assert_fail@plt+0x2b0fc>
   3d888:	lsl	r8, fp, #2
   3d88c:	mov	r0, r8
   3d890:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3d894:	cmp	r0, #0
   3d898:	str	r0, [r7, #4]
   3d89c:	beq	3d920 <__assert_fail@plt+0x2b32c>
   3d8a0:	mov	r0, r8
   3d8a4:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3d8a8:	cmp	r0, #0
   3d8ac:	mov	r8, r0
   3d8b0:	str	r0, [r7, #8]
   3d8b4:	strne	fp, [r7]
   3d8b8:	movne	r8, #1
   3d8bc:	bne	3d75c <__assert_fail@plt+0x2b168>
   3d8c0:	ldr	r0, [r7, #4]
   3d8c4:	bl	2db68 <__assert_fail@plt+0x1b574>
   3d8c8:	b	3d7c8 <__assert_fail@plt+0x2b1d4>
   3d8cc:	ldr	fp, [r7]
   3d8d0:	ldr	r0, [r6, #24]
   3d8d4:	cmp	fp, r0
   3d8d8:	bhi	3d688 <__assert_fail@plt+0x2b094>
   3d8dc:	cmp	fp, #0
   3d8e0:	mov	r4, fp
   3d8e4:	bgt	3d690 <__assert_fail@plt+0x2b09c>
   3d8e8:	mov	fp, #1
   3d8ec:	mov	r7, r1
   3d8f0:	mov	r4, fp
   3d8f4:	mov	r0, #8
   3d8f8:	b	3d694 <__assert_fail@plt+0x2b0a0>
   3d8fc:	mov	r8, lr
   3d900:	b	3d604 <__assert_fail@plt+0x2b010>
   3d904:	mov	fp, #1
   3d908:	mov	r4, fp
   3d90c:	mov	r0, #8
   3d910:	mov	r7, #0
   3d914:	b	3d694 <__assert_fail@plt+0x2b0a0>
   3d918:	mov	r4, #0
   3d91c:	b	3d794 <__assert_fail@plt+0x2b1a0>
   3d920:	mov	r8, #0
   3d924:	b	3d7c8 <__assert_fail@plt+0x2b1d4>
   3d928:	strdeq	r1, [r1], -r4
   3d92c:	muleq	r1, ip, r3
   3d930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d934:	sub	sp, sp, #28
   3d938:	mov	r5, r2
   3d93c:	ldr	r6, [sp, #80]	; 0x50
   3d940:	ldr	r4, [sp, #64]	; 0x40
   3d944:	orr	r2, r2, r6
   3d948:	orrs	r2, r2, r4
   3d94c:	ldrb	fp, [sp, #84]	; 0x54
   3d950:	bmi	3d974 <__assert_fail@plt+0x2b380>
   3d954:	cmp	r4, #0
   3d958:	mov	sl, r0
   3d95c:	mov	r7, r3
   3d960:	blt	3d984 <__assert_fail@plt+0x2b390>
   3d964:	mvn	r3, #-2147483648	; 0x80000000
   3d968:	sub	r3, r3, r4
   3d96c:	cmp	r5, r3
   3d970:	ble	3d984 <__assert_fail@plt+0x2b390>
   3d974:	mvn	r4, #1
   3d978:	mov	r0, r4
   3d97c:	add	sp, sp, #28
   3d980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d984:	cmp	r4, #0
   3d988:	add	r9, r5, r4
   3d98c:	ble	3da18 <__assert_fail@plt+0x2b424>
   3d990:	cmp	r5, #0
   3d994:	str	r1, [sp, #20]
   3d998:	beq	3da10 <__assert_fail@plt+0x2b41c>
   3d99c:	mov	r0, r9
   3d9a0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3d9a4:	subs	r8, r0, #0
   3d9a8:	beq	3d974 <__assert_fail@plt+0x2b380>
   3d9ac:	ldr	r1, [sp, #20]
   3d9b0:	mov	r2, r5
   3d9b4:	bl	12024 <memcpy@plt>
   3d9b8:	mov	r1, r7
   3d9bc:	mov	r2, r4
   3d9c0:	add	r0, r8, r5
   3d9c4:	bl	12024 <memcpy@plt>
   3d9c8:	mov	r7, r8
   3d9cc:	ldr	r3, [sp, #76]	; 0x4c
   3d9d0:	mov	r2, r9
   3d9d4:	str	r3, [sp, #8]
   3d9d8:	ldr	r3, [sp, #72]	; 0x48
   3d9dc:	mov	r1, r7
   3d9e0:	str	r3, [sp]
   3d9e4:	str	fp, [sp, #12]
   3d9e8:	ldr	r3, [sp, #68]	; 0x44
   3d9ec:	str	r6, [sp, #4]
   3d9f0:	mov	r0, sl
   3d9f4:	bl	3d594 <__assert_fail@plt+0x2afa0>
   3d9f8:	mov	r4, r0
   3d9fc:	mov	r0, r8
   3da00:	bl	2db68 <__assert_fail@plt+0x1b574>
   3da04:	mov	r0, r4
   3da08:	add	sp, sp, #28
   3da0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3da10:	mov	r8, r5
   3da14:	b	3d9cc <__assert_fail@plt+0x2b3d8>
   3da18:	mov	r7, r1
   3da1c:	mov	r8, #0
   3da20:	b	3d9cc <__assert_fail@plt+0x2b3d8>
   3da24:	push	{r4, r5, r6, r7, r8, lr}
   3da28:	mov	r5, r2
   3da2c:	ldr	r3, [pc, #228]	; 3db18 <__assert_fail@plt+0x2b524>
   3da30:	mov	r2, #0
   3da34:	tst	r5, #1
   3da38:	mov	r4, r0
   3da3c:	str	r2, [r0]
   3da40:	str	r2, [r0, #4]
   3da44:	str	r2, [r0, #8]
   3da48:	mov	r0, #256	; 0x100
   3da4c:	ldr	r6, [pc, #200]	; 3db1c <__assert_fail@plt+0x2b528>
   3da50:	mov	r7, r1
   3da54:	moveq	r6, r3
   3da58:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3da5c:	cmp	r0, #0
   3da60:	str	r0, [r4, #16]
   3da64:	beq	3db10 <__assert_fail@plt+0x2b51c>
   3da68:	tst	r5, #2
   3da6c:	movne	r3, #4194304	; 0x400000
   3da70:	moveq	r3, #0
   3da74:	orr	r6, r6, r3
   3da78:	ldrb	r3, [r4, #28]
   3da7c:	tst	r5, #4
   3da80:	lsl	r5, r5, #1
   3da84:	orrne	r3, r3, #128	; 0x80
   3da88:	biceq	r3, r3, #128	; 0x80
   3da8c:	strb	r3, [r4, #28]
   3da90:	ldrb	r2, [r4, #28]
   3da94:	and	r5, r5, #16
   3da98:	mov	r3, #0
   3da9c:	bic	r2, r2, #16
   3daa0:	orr	r5, r5, r2
   3daa4:	bicne	r6, r6, #64	; 0x40
   3daa8:	strb	r5, [r4, #28]
   3daac:	str	r3, [r4, #20]
   3dab0:	mov	r0, r7
   3dab4:	orrne	r6, r6, #256	; 0x100
   3dab8:	bl	12300 <strlen@plt>
   3dabc:	mov	r3, r6
   3dac0:	mov	r1, r7
   3dac4:	mov	r2, r0
   3dac8:	mov	r0, r4
   3dacc:	bl	3c55c <__assert_fail@plt+0x29f68>
   3dad0:	cmp	r0, #16
   3dad4:	mov	r5, r0
   3dad8:	beq	3daf4 <__assert_fail@plt+0x2b500>
   3dadc:	cmp	r0, #0
   3dae0:	bne	3daf8 <__assert_fail@plt+0x2b504>
   3dae4:	mov	r0, r4
   3dae8:	bl	3d4dc <__assert_fail@plt+0x2aee8>
   3daec:	mov	r0, r5
   3daf0:	pop	{r4, r5, r6, r7, r8, pc}
   3daf4:	mov	r5, #8
   3daf8:	ldr	r0, [r4, #16]
   3dafc:	bl	2db68 <__assert_fail@plt+0x1b574>
   3db00:	mov	r3, #0
   3db04:	mov	r0, r5
   3db08:	str	r3, [r4, #16]
   3db0c:	pop	{r4, r5, r6, r7, r8, pc}
   3db10:	mov	r0, #12
   3db14:	pop	{r4, r5, r6, r7, r8, pc}
   3db18:	smlabteq	r1, r6, r2, r0
   3db1c:	strdeq	fp, [r3], -ip
   3db20:	cmp	r0, #16
   3db24:	push	{r4, r5, r6, r7, r8, lr}
   3db28:	bhi	3db90 <__assert_fail@plt+0x2b59c>
   3db2c:	ldr	r1, [pc, #96]	; 3db94 <__assert_fail@plt+0x2b5a0>
   3db30:	mov	r4, r3
   3db34:	add	r0, r1, r0, lsl #2
   3db38:	add	r1, r1, #32
   3db3c:	ldr	r3, [r0, #416]	; 0x1a0
   3db40:	mov	r6, r2
   3db44:	add	r1, r1, r3
   3db48:	mov	r2, #5
   3db4c:	mov	r0, #0
   3db50:	bl	120b4 <dcgettext@plt>
   3db54:	mov	r7, r0
   3db58:	bl	12300 <strlen@plt>
   3db5c:	cmp	r4, #0
   3db60:	add	r5, r0, #1
   3db64:	beq	3db88 <__assert_fail@plt+0x2b594>
   3db68:	cmp	r5, r4
   3db6c:	subhi	r2, r4, #1
   3db70:	movhi	r3, #0
   3db74:	strbhi	r3, [r6, r2]
   3db78:	movls	r2, r5
   3db7c:	mov	r1, r7
   3db80:	mov	r0, r6
   3db84:	bl	12024 <memcpy@plt>
   3db88:	mov	r0, r5
   3db8c:	pop	{r4, r5, r6, r7, r8, pc}
   3db90:	bl	125a0 <abort@plt>
   3db94:	andeq	r5, r4, r0, asr #30
   3db98:	push	{r4, r5, r6, lr}
   3db9c:	mov	r4, r0
   3dba0:	ldr	r5, [r0]
   3dba4:	cmp	r5, #0
   3dba8:	beq	3dbe8 <__assert_fail@plt+0x2b5f4>
   3dbac:	ldr	r2, [pc, #92]	; 3dc10 <__assert_fail@plt+0x2b61c>
   3dbb0:	ldr	r1, [pc, #92]	; 3dc14 <__assert_fail@plt+0x2b620>
   3dbb4:	cmp	r2, #0
   3dbb8:	mov	r3, #1
   3dbbc:	moveq	r3, r2
   3dbc0:	cmp	r1, #0
   3dbc4:	mov	r2, #1
   3dbc8:	moveq	r2, r1
   3dbcc:	orr	r3, r3, r2
   3dbd0:	tst	r3, #1
   3dbd4:	beq	3dbe0 <__assert_fail@plt+0x2b5ec>
   3dbd8:	add	r0, r5, #136	; 0x88
   3dbdc:	bl	11f70 <pthread_mutex_destroy@plt>
   3dbe0:	mov	r0, r5
   3dbe4:	bl	31c70 <__assert_fail@plt+0x1f67c>
   3dbe8:	mov	r5, #0
   3dbec:	ldr	r0, [r4, #16]
   3dbf0:	str	r5, [r4]
   3dbf4:	str	r5, [r4, #4]
   3dbf8:	bl	2db68 <__assert_fail@plt+0x1b574>
   3dbfc:	str	r5, [r4, #16]
   3dc00:	ldr	r0, [r4, #20]
   3dc04:	bl	2db68 <__assert_fail@plt+0x1b574>
   3dc08:	str	r5, [r4, #20]
   3dc0c:	pop	{r4, r5, r6, pc}
   3dc10:	strdeq	r1, [r1], -r4
   3dc14:	muleq	r1, ip, r3
   3dc18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dc1c:	sub	sp, sp, #36	; 0x24
   3dc20:	ldr	r4, [sp, #72]	; 0x48
   3dc24:	bics	ip, r4, #7
   3dc28:	movne	r0, #2
   3dc2c:	beq	3dc38 <__assert_fail@plt+0x2b644>
   3dc30:	add	sp, sp, #36	; 0x24
   3dc34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dc38:	ands	fp, r4, #4
   3dc3c:	mov	r8, r3
   3dc40:	str	r2, [sp, #28]
   3dc44:	mov	r7, r1
   3dc48:	mov	r5, r0
   3dc4c:	bne	3dcf0 <__assert_fail@plt+0x2b6fc>
   3dc50:	mov	r0, r1
   3dc54:	bl	12300 <strlen@plt>
   3dc58:	mov	r9, r0
   3dc5c:	ldr	r3, [pc, #204]	; 3dd30 <__assert_fail@plt+0x2b73c>
   3dc60:	ldr	r1, [pc, #204]	; 3dd34 <__assert_fail@plt+0x2b740>
   3dc64:	cmp	r3, #0
   3dc68:	mov	r6, #1
   3dc6c:	moveq	r6, r3
   3dc70:	cmp	r1, #0
   3dc74:	mov	r3, #1
   3dc78:	moveq	r3, r1
   3dc7c:	orr	r6, r6, r3
   3dc80:	ands	r6, r6, #255	; 0xff
   3dc84:	ldr	sl, [r5]
   3dc88:	beq	3dc94 <__assert_fail@plt+0x2b6a0>
   3dc8c:	add	r0, sl, #136	; 0x88
   3dc90:	bl	11fd0 <pthread_mutex_lock@plt>
   3dc94:	ldrb	r3, [r5, #28]
   3dc98:	tst	r3, #16
   3dc9c:	beq	3dcfc <__assert_fail@plt+0x2b708>
   3dca0:	mov	ip, #0
   3dca4:	str	r4, [sp, #16]
   3dca8:	str	r9, [sp, #4]
   3dcac:	str	r9, [sp]
   3dcb0:	mov	r3, fp
   3dcb4:	mov	r2, r9
   3dcb8:	mov	r1, r7
   3dcbc:	mov	r0, r5
   3dcc0:	str	ip, [sp, #12]
   3dcc4:	str	ip, [sp, #8]
   3dcc8:	bl	37e40 <__assert_fail@plt+0x2584c>
   3dccc:	mov	r4, r0
   3dcd0:	cmp	r6, #0
   3dcd4:	beq	3dce0 <__assert_fail@plt+0x2b6ec>
   3dcd8:	add	r0, sl, #136	; 0x88
   3dcdc:	bl	11ea4 <pthread_mutex_unlock@plt>
   3dce0:	adds	r0, r4, #0
   3dce4:	movne	r0, #1
   3dce8:	add	sp, sp, #36	; 0x24
   3dcec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dcf0:	ldr	fp, [r3]
   3dcf4:	ldr	r9, [r3, #4]
   3dcf8:	b	3dc5c <__assert_fail@plt+0x2b668>
   3dcfc:	ldr	r3, [sp, #28]
   3dd00:	str	r4, [sp, #16]
   3dd04:	str	r3, [sp, #8]
   3dd08:	str	r8, [sp, #12]
   3dd0c:	str	r9, [sp, #4]
   3dd10:	str	r9, [sp]
   3dd14:	mov	r3, fp
   3dd18:	mov	r2, r9
   3dd1c:	mov	r1, r7
   3dd20:	mov	r0, r5
   3dd24:	bl	37e40 <__assert_fail@plt+0x2584c>
   3dd28:	mov	r4, r0
   3dd2c:	b	3dcd0 <__assert_fail@plt+0x2b6dc>
   3dd30:	muleq	r1, ip, r3
   3dd34:	strdeq	r1, [r1], -r4
   3dd38:	push	{r4, lr}
   3dd3c:	sub	sp, sp, #16
   3dd40:	mov	lr, #1
   3dd44:	ldr	r4, [sp, #24]
   3dd48:	mov	ip, #0
   3dd4c:	str	ip, [sp]
   3dd50:	stmib	sp, {r2, r4, lr}
   3dd54:	bl	3d594 <__assert_fail@plt+0x2afa0>
   3dd58:	add	sp, sp, #16
   3dd5c:	pop	{r4, pc}
   3dd60:	push	{r4, lr}
   3dd64:	sub	sp, sp, #16
   3dd68:	mov	ip, #0
   3dd6c:	ldr	r4, [sp, #24]
   3dd70:	ldr	lr, [sp, #28]
   3dd74:	str	r2, [sp, #4]
   3dd78:	str	r4, [sp]
   3dd7c:	str	lr, [sp, #8]
   3dd80:	str	ip, [sp, #12]
   3dd84:	bl	3d594 <__assert_fail@plt+0x2afa0>
   3dd88:	add	sp, sp, #16
   3dd8c:	pop	{r4, pc}
   3dd90:	push	{r4, r5, lr}
   3dd94:	sub	sp, sp, #28
   3dd98:	ldr	lr, [sp, #40]	; 0x28
   3dd9c:	ldr	ip, [sp, #44]	; 0x2c
   3dda0:	ldr	r5, [sp, #48]	; 0x30
   3dda4:	ldr	r4, [sp, #52]	; 0x34
   3dda8:	str	lr, [sp]
   3ddac:	str	ip, [sp, #4]
   3ddb0:	mov	lr, #1
   3ddb4:	mov	ip, #0
   3ddb8:	str	r5, [sp, #12]
   3ddbc:	str	r4, [sp, #16]
   3ddc0:	str	lr, [sp, #20]
   3ddc4:	str	ip, [sp, #8]
   3ddc8:	bl	3d930 <__assert_fail@plt+0x2b33c>
   3ddcc:	add	sp, sp, #28
   3ddd0:	pop	{r4, r5, pc}
   3ddd4:	push	{r4, r5, lr}
   3ddd8:	sub	sp, sp, #28
   3dddc:	ldr	lr, [sp, #40]	; 0x28
   3dde0:	ldr	ip, [sp, #44]	; 0x2c
   3dde4:	ldr	r5, [sp, #48]	; 0x30
   3dde8:	ldr	r4, [sp, #52]	; 0x34
   3ddec:	str	lr, [sp]
   3ddf0:	ldr	lr, [sp, #56]	; 0x38
   3ddf4:	str	ip, [sp, #4]
   3ddf8:	mov	ip, #0
   3ddfc:	str	r5, [sp, #8]
   3de00:	str	r4, [sp, #12]
   3de04:	str	lr, [sp, #16]
   3de08:	str	ip, [sp, #20]
   3de0c:	bl	3d930 <__assert_fail@plt+0x2b33c>
   3de10:	add	sp, sp, #28
   3de14:	pop	{r4, r5, pc}
   3de18:	cmp	r2, #0
   3de1c:	bne	3de3c <__assert_fail@plt+0x2b848>
   3de20:	ldrb	r3, [r0, #28]
   3de24:	bic	r3, r3, #6
   3de28:	strb	r3, [r0, #28]
   3de2c:	str	r2, [r1]
   3de30:	str	r2, [r1, #8]
   3de34:	str	r2, [r1, #4]
   3de38:	bx	lr
   3de3c:	ldrb	ip, [r0, #28]
   3de40:	bic	ip, ip, #4
   3de44:	orr	ip, ip, #2
   3de48:	strb	ip, [r0, #28]
   3de4c:	stm	r1, {r2, r3}
   3de50:	ldr	r3, [sp]
   3de54:	str	r3, [r1, #8]
   3de58:	bx	lr
   3de5c:	push	{r4, r5, r6, r7, r8, r9, lr}
   3de60:	mov	r6, #1
   3de64:	mov	ip, r6
   3de68:	mov	r8, r6
   3de6c:	mov	lr, #0
   3de70:	mvn	r4, #0
   3de74:	add	r3, ip, lr
   3de78:	cmp	r3, r1
   3de7c:	add	r5, r0, r4
   3de80:	bcs	3deb0 <__assert_fail@plt+0x2b8bc>
   3de84:	ldrb	r5, [r5, ip]
   3de88:	ldrb	r7, [r0, r3]
   3de8c:	cmp	r7, r5
   3de90:	bcs	3df1c <__assert_fail@plt+0x2b928>
   3de94:	mov	lr, r3
   3de98:	mov	ip, #1
   3de9c:	sub	r6, r3, r4
   3dea0:	add	r3, ip, lr
   3dea4:	cmp	r3, r1
   3dea8:	add	r5, r0, r4
   3deac:	bcc	3de84 <__assert_fail@plt+0x2b890>
   3deb0:	mov	r8, #1
   3deb4:	mov	ip, r8
   3deb8:	mov	r9, r8
   3debc:	mov	lr, #0
   3dec0:	mvn	r5, #0
   3dec4:	str	r6, [r2]
   3dec8:	add	r3, ip, lr
   3decc:	cmp	r1, r3
   3ded0:	add	r6, r0, r5
   3ded4:	bls	3df04 <__assert_fail@plt+0x2b910>
   3ded8:	ldrb	r6, [r6, ip]
   3dedc:	ldrb	r7, [r0, r3]
   3dee0:	cmp	r7, r6
   3dee4:	bls	3df34 <__assert_fail@plt+0x2b940>
   3dee8:	mov	lr, r3
   3deec:	mov	ip, #1
   3def0:	sub	r8, r3, r5
   3def4:	add	r3, ip, lr
   3def8:	cmp	r1, r3
   3defc:	add	r6, r0, r5
   3df00:	bhi	3ded8 <__assert_fail@plt+0x2b8e4>
   3df04:	add	r0, r4, #1
   3df08:	add	r5, r5, #1
   3df0c:	cmp	r5, r0
   3df10:	strcs	r8, [r2]
   3df14:	movcs	r0, r5
   3df18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3df1c:	beq	3df4c <__assert_fail@plt+0x2b958>
   3df20:	mov	r4, lr
   3df24:	mov	r6, r8
   3df28:	add	lr, lr, #1
   3df2c:	mov	ip, #1
   3df30:	b	3de74 <__assert_fail@plt+0x2b880>
   3df34:	beq	3df60 <__assert_fail@plt+0x2b96c>
   3df38:	mov	r5, lr
   3df3c:	mov	r8, r9
   3df40:	add	lr, lr, #1
   3df44:	mov	ip, #1
   3df48:	b	3dec8 <__assert_fail@plt+0x2b8d4>
   3df4c:	cmp	ip, r6
   3df50:	addne	ip, ip, #1
   3df54:	moveq	lr, r3
   3df58:	moveq	ip, #1
   3df5c:	b	3de74 <__assert_fail@plt+0x2b880>
   3df60:	cmp	ip, r8
   3df64:	addne	ip, ip, #1
   3df68:	moveq	lr, r3
   3df6c:	moveq	ip, #1
   3df70:	b	3dec8 <__assert_fail@plt+0x2b8d4>
   3df74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3df78:	cmp	r3, #2
   3df7c:	sub	sp, sp, #1056	; 0x420
   3df80:	sub	sp, sp, #4
   3df84:	mov	r4, r3
   3df88:	mov	r5, r0
   3df8c:	mov	fp, r1
   3df90:	mov	r8, r2
   3df94:	bhi	3e2f8 <__assert_fail@plt+0x2bd04>
   3df98:	sub	r2, r4, #1
   3df9c:	mov	r9, r2
   3dfa0:	add	r6, sp, #32
   3dfa4:	mov	r3, #1
   3dfa8:	str	r3, [sp]
   3dfac:	str	r3, [sp, #28]
   3dfb0:	add	r2, sp, #1040	; 0x410
   3dfb4:	sub	r3, r6, #4
   3dfb8:	add	r2, r2, #12
   3dfbc:	str	r4, [r3, #4]!
   3dfc0:	cmp	r2, r3
   3dfc4:	bne	3dfbc <__assert_fail@plt+0x2b9c8>
   3dfc8:	cmp	r4, #0
   3dfcc:	subne	r3, r4, #1
   3dfd0:	subne	r1, r8, #1
   3dfd4:	beq	3dff0 <__assert_fail@plt+0x2b9fc>
   3dfd8:	ldrb	r2, [r1, #1]!
   3dfdc:	add	r0, sp, #1056	; 0x420
   3dfe0:	add	r2, r0, r2, lsl #2
   3dfe4:	str	r3, [r2, #-1024]	; 0xfffffc00
   3dfe8:	subs	r3, r3, #1
   3dfec:	bcs	3dfd8 <__assert_fail@plt+0x2b9e4>
   3dff0:	ldr	r7, [sp]
   3dff4:	mov	r2, r9
   3dff8:	add	r1, r8, r7
   3dffc:	mov	r0, r8
   3e000:	bl	12084 <memcmp@plt>
   3e004:	mov	r6, r9
   3e008:	subs	sl, r0, #0
   3e00c:	bne	3e190 <__assert_fail@plt+0x2bb9c>
   3e010:	sub	r2, r9, #1
   3e014:	str	r2, [sp, #4]
   3e018:	add	r2, r8, r2
   3e01c:	mov	r3, r9
   3e020:	str	r2, [sp, #16]
   3e024:	sub	r2, r4, r7
   3e028:	str	r2, [sp, #12]
   3e02c:	rsb	r2, r3, #1
   3e030:	str	r8, [sp, #8]
   3e034:	mov	r9, sl
   3e038:	sub	r6, r4, #1
   3e03c:	str	r2, [sp, #20]
   3e040:	mov	r0, fp
   3e044:	mov	r8, r3
   3e048:	b	3e068 <__assert_fail@plt+0x2ba74>
   3e04c:	ldr	r3, [sp]
   3e050:	cmp	sl, #0
   3e054:	cmpne	ip, r3
   3e058:	mov	sl, #0
   3e05c:	ldrcc	ip, [sp, #12]
   3e060:	add	r9, r9, ip
   3e064:	mov	r0, r7
   3e068:	add	r7, r9, r4
   3e06c:	sub	r2, r7, r0
   3e070:	mov	r1, #0
   3e074:	add	r0, r5, r0
   3e078:	bl	123d8 <memchr@plt>
   3e07c:	adds	r3, r7, #0
   3e080:	movne	r3, #1
   3e084:	cmp	r0, #0
   3e088:	movne	r3, #0
   3e08c:	cmp	r3, #0
   3e090:	mov	r0, r3
   3e094:	beq	3e2cc <__assert_fail@plt+0x2bcd8>
   3e098:	add	r3, r5, r7
   3e09c:	add	r2, sp, #1056	; 0x420
   3e0a0:	ldrb	r3, [r3, #-1]
   3e0a4:	add	r3, r2, r3, lsl #2
   3e0a8:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   3e0ac:	cmp	ip, #0
   3e0b0:	bne	3e04c <__assert_fail@plt+0x2ba58>
   3e0b4:	cmp	sl, r8
   3e0b8:	movcs	r3, sl
   3e0bc:	movcc	r3, r8
   3e0c0:	cmp	r3, r6
   3e0c4:	bcs	3e108 <__assert_fail@plt+0x2bb14>
   3e0c8:	ldr	r1, [sp, #8]
   3e0cc:	add	r2, r9, r3
   3e0d0:	ldrb	r0, [r1, r3]
   3e0d4:	ldrb	lr, [r5, r2]
   3e0d8:	add	r1, r1, r3
   3e0dc:	add	r2, r5, r2
   3e0e0:	cmp	lr, r0
   3e0e4:	beq	3e0fc <__assert_fail@plt+0x2bb08>
   3e0e8:	b	3e17c <__assert_fail@plt+0x2bb88>
   3e0ec:	ldrb	lr, [r1, #1]!
   3e0f0:	ldrb	r0, [r2, #1]!
   3e0f4:	cmp	lr, r0
   3e0f8:	bne	3e17c <__assert_fail@plt+0x2bb88>
   3e0fc:	add	r3, r3, #1
   3e100:	cmp	r3, r6
   3e104:	bcc	3e0ec <__assert_fail@plt+0x2baf8>
   3e108:	cmp	sl, r8
   3e10c:	ldr	r1, [sp, #4]
   3e110:	bcs	3e31c <__assert_fail@plt+0x2bd28>
   3e114:	ldr	r3, [sp, #4]
   3e118:	ldr	ip, [sp, #16]
   3e11c:	add	r2, r9, r3
   3e120:	ldrb	r3, [ip]
   3e124:	ldrb	r0, [r5, r2]
   3e128:	add	r2, r5, r2
   3e12c:	cmp	r3, r0
   3e130:	bne	3e31c <__assert_fail@plt+0x2bd28>
   3e134:	mov	r0, ip
   3e138:	sub	fp, sl, #1
   3e13c:	b	3e154 <__assert_fail@plt+0x2bb60>
   3e140:	ldrb	lr, [r0, #-1]!
   3e144:	ldrb	ip, [r2, #-1]!
   3e148:	cmp	lr, ip
   3e14c:	bne	3e160 <__assert_fail@plt+0x2bb6c>
   3e150:	mov	r1, r3
   3e154:	sub	r3, r1, #1
   3e158:	cmp	r3, fp
   3e15c:	bne	3e140 <__assert_fail@plt+0x2bb4c>
   3e160:	add	sl, sl, #1
   3e164:	cmp	sl, r1
   3e168:	bhi	3e2c8 <__assert_fail@plt+0x2bcd4>
   3e16c:	ldr	r3, [sp]
   3e170:	ldr	sl, [sp, #12]
   3e174:	add	r9, r9, r3
   3e178:	b	3e064 <__assert_fail@plt+0x2ba70>
   3e17c:	ldr	r2, [sp, #20]
   3e180:	mov	sl, ip
   3e184:	add	r9, r2, r9
   3e188:	add	r9, r3, r9
   3e18c:	b	3e064 <__assert_fail@plt+0x2ba70>
   3e190:	sub	r3, r4, r9
   3e194:	cmp	r3, r9
   3e198:	movcc	r3, r9
   3e19c:	sub	r1, r6, #1
   3e1a0:	add	r3, r3, #1
   3e1a4:	mov	r2, r9
   3e1a8:	str	r3, [sp, #8]
   3e1ac:	mov	r9, #0
   3e1b0:	add	r3, r8, r1
   3e1b4:	str	r3, [sp, #12]
   3e1b8:	sub	r6, r4, #1
   3e1bc:	add	r3, r8, r2
   3e1c0:	mov	r0, fp
   3e1c4:	mov	sl, r9
   3e1c8:	mov	fp, r8
   3e1cc:	mov	r8, r4
   3e1d0:	mov	r4, r2
   3e1d4:	str	r3, [sp]
   3e1d8:	rsb	r3, r2, #1
   3e1dc:	str	r1, [sp, #4]
   3e1e0:	str	r3, [sp, #16]
   3e1e4:	add	r7, r9, r8
   3e1e8:	sub	r2, r7, r0
   3e1ec:	mov	r1, sl
   3e1f0:	add	r0, r5, r0
   3e1f4:	bl	123d8 <memchr@plt>
   3e1f8:	cmp	r7, #0
   3e1fc:	clz	r0, r0
   3e200:	lsr	r0, r0, #5
   3e204:	moveq	r0, #0
   3e208:	cmp	r0, #0
   3e20c:	beq	3e2cc <__assert_fail@plt+0x2bcd8>
   3e210:	add	r2, r5, r7
   3e214:	add	r3, sp, #1056	; 0x420
   3e218:	ldrb	r2, [r2, #-1]
   3e21c:	add	r2, r3, r2, lsl #2
   3e220:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   3e224:	cmp	r2, #0
   3e228:	bne	3e2e0 <__assert_fail@plt+0x2bcec>
   3e22c:	cmp	r4, r6
   3e230:	bcs	3e27c <__assert_fail@plt+0x2bc88>
   3e234:	ldr	r3, [sp]
   3e238:	add	r1, r9, r4
   3e23c:	ldrb	r0, [r3]
   3e240:	ldrb	r2, [r5, r1]
   3e244:	add	r1, r5, r1
   3e248:	cmp	r0, r2
   3e24c:	movne	r2, r4
   3e250:	bne	3e2d8 <__assert_fail@plt+0x2bce4>
   3e254:	ldr	r0, [sp]
   3e258:	mov	r2, r4
   3e25c:	b	3e270 <__assert_fail@plt+0x2bc7c>
   3e260:	ldrb	ip, [r0, #1]!
   3e264:	ldrb	r3, [r1, #1]!
   3e268:	cmp	ip, r3
   3e26c:	bne	3e2d8 <__assert_fail@plt+0x2bce4>
   3e270:	add	r2, r2, #1
   3e274:	cmp	r2, r6
   3e278:	bcc	3e260 <__assert_fail@plt+0x2bc6c>
   3e27c:	ldr	r3, [sp, #4]
   3e280:	cmn	r3, #1
   3e284:	beq	3e2c8 <__assert_fail@plt+0x2bcd4>
   3e288:	ldr	r3, [sp, #4]
   3e28c:	add	r1, r9, r3
   3e290:	ldr	r3, [sp, #12]
   3e294:	ldrb	r2, [r5, r1]
   3e298:	add	r1, r5, r1
   3e29c:	ldrb	r0, [r3]
   3e2a0:	cmp	r0, r2
   3e2a4:	bne	3e2ec <__assert_fail@plt+0x2bcf8>
   3e2a8:	mov	r2, r3
   3e2ac:	b	3e2c0 <__assert_fail@plt+0x2bccc>
   3e2b0:	ldrb	r0, [r2, #-1]!
   3e2b4:	ldrb	r3, [r1, #-1]!
   3e2b8:	cmp	r0, r3
   3e2bc:	bne	3e2ec <__assert_fail@plt+0x2bcf8>
   3e2c0:	cmp	fp, r2
   3e2c4:	bne	3e2b0 <__assert_fail@plt+0x2bcbc>
   3e2c8:	add	r0, r5, r9
   3e2cc:	add	sp, sp, #1056	; 0x420
   3e2d0:	add	sp, sp, #4
   3e2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e2d8:	ldr	r3, [sp, #16]
   3e2dc:	add	r9, r3, r9
   3e2e0:	add	r9, r9, r2
   3e2e4:	mov	r0, r7
   3e2e8:	b	3e1e4 <__assert_fail@plt+0x2bbf0>
   3e2ec:	ldr	r3, [sp, #8]
   3e2f0:	add	r9, r9, r3
   3e2f4:	b	3e2e4 <__assert_fail@plt+0x2bcf0>
   3e2f8:	add	r6, sp, #32
   3e2fc:	mov	r1, r3
   3e300:	sub	r2, r6, #4
   3e304:	mov	r0, r8
   3e308:	bl	3de5c <__assert_fail@plt+0x2b868>
   3e30c:	ldr	r3, [sp, #28]
   3e310:	str	r3, [sp]
   3e314:	mov	r9, r0
   3e318:	b	3dfb0 <__assert_fail@plt+0x2b9bc>
   3e31c:	mov	r1, r8
   3e320:	b	3e160 <__assert_fail@plt+0x2bb6c>
   3e324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e328:	sub	sp, sp, #36	; 0x24
   3e32c:	ldrb	r2, [r0]
   3e330:	cmp	r2, #0
   3e334:	beq	3e6b8 <__assert_fail@plt+0x2c0c4>
   3e338:	ldrb	ip, [r1]
   3e33c:	cmp	ip, #0
   3e340:	beq	3e3e8 <__assert_fail@plt+0x2bdf4>
   3e344:	mov	r8, r0
   3e348:	add	lr, r1, #1
   3e34c:	mov	sl, #1
   3e350:	b	3e360 <__assert_fail@plt+0x2bd6c>
   3e354:	ldrb	ip, [lr], #1
   3e358:	cmp	ip, #0
   3e35c:	beq	3e388 <__assert_fail@plt+0x2bd94>
   3e360:	cmp	ip, r2
   3e364:	movne	sl, #0
   3e368:	andeq	sl, sl, #1
   3e36c:	ldrb	r2, [r8, #1]!
   3e370:	mov	r6, lr
   3e374:	cmp	r2, #0
   3e378:	bne	3e354 <__assert_fail@plt+0x2bd60>
   3e37c:	ldrb	r3, [r6]
   3e380:	cmp	r3, #0
   3e384:	bne	3e3f0 <__assert_fail@plt+0x2bdfc>
   3e388:	cmp	sl, #0
   3e38c:	bne	3e3e8 <__assert_fail@plt+0x2bdf4>
   3e390:	mov	r4, r1
   3e394:	mov	r5, r0
   3e398:	ldrb	r1, [r1]
   3e39c:	add	r0, r0, #1
   3e3a0:	bl	1230c <strchr@plt>
   3e3a4:	sub	r4, r6, r4
   3e3a8:	subs	r7, r0, #0
   3e3ac:	beq	3e3f0 <__assert_fail@plt+0x2bdfc>
   3e3b0:	cmp	r4, #1
   3e3b4:	beq	3e6b0 <__assert_fail@plt+0x2c0bc>
   3e3b8:	add	r0, r5, r4
   3e3bc:	cmp	r7, r0
   3e3c0:	subls	r1, r0, r7
   3e3c4:	movhi	r1, #1
   3e3c8:	cmp	r4, #31
   3e3cc:	sub	r6, r6, r4
   3e3d0:	mov	r8, r1
   3e3d4:	bls	3e3fc <__assert_fail@plt+0x2be08>
   3e3d8:	mov	r3, r4
   3e3dc:	mov	r2, r6
   3e3e0:	mov	r0, r7
   3e3e4:	bl	3df74 <__assert_fail@plt+0x2b980>
   3e3e8:	add	sp, sp, #36	; 0x24
   3e3ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e3f0:	mov	r0, #0
   3e3f4:	add	sp, sp, #36	; 0x24
   3e3f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e3fc:	cmp	r4, #2
   3e400:	bhi	3e688 <__assert_fail@plt+0x2c094>
   3e404:	sub	r9, r4, #1
   3e408:	mov	r3, #1
   3e40c:	str	r3, [sp, #8]
   3e410:	str	r3, [sp, #28]
   3e414:	ldr	r5, [sp, #8]
   3e418:	mov	r2, r9
   3e41c:	add	r1, r6, r5
   3e420:	mov	r0, r6
   3e424:	bl	12084 <memcmp@plt>
   3e428:	subs	fp, r0, #0
   3e42c:	bne	3e564 <__assert_fail@plt+0x2bf70>
   3e430:	sub	r3, r9, #1
   3e434:	str	r3, [sp, #4]
   3e438:	add	r3, r6, r3
   3e43c:	str	r3, [sp, #20]
   3e440:	mov	sl, fp
   3e444:	sub	r3, r4, r5
   3e448:	mov	r0, r8
   3e44c:	str	r3, [sp, #16]
   3e450:	rsb	r3, r9, #1
   3e454:	str	r3, [sp, #12]
   3e458:	add	r5, r4, sl
   3e45c:	sub	r2, r5, r0
   3e460:	mov	r1, #0
   3e464:	add	r0, r7, r0
   3e468:	bl	123d8 <memchr@plt>
   3e46c:	adds	r3, r5, #0
   3e470:	movne	r3, #1
   3e474:	cmp	r0, #0
   3e478:	movne	r3, #0
   3e47c:	cmp	r3, #0
   3e480:	mov	r0, r3
   3e484:	beq	3e3e8 <__assert_fail@plt+0x2bdf4>
   3e488:	cmp	r9, fp
   3e48c:	movcs	r3, r9
   3e490:	movcc	r3, fp
   3e494:	cmp	r4, r3
   3e498:	bls	3e4d8 <__assert_fail@plt+0x2bee4>
   3e49c:	add	r2, r3, sl
   3e4a0:	ldrb	r1, [r6, r3]
   3e4a4:	ldrb	r0, [r7, r2]
   3e4a8:	add	ip, r6, r3
   3e4ac:	add	r2, r7, r2
   3e4b0:	cmp	r0, r1
   3e4b4:	beq	3e4cc <__assert_fail@plt+0x2bed8>
   3e4b8:	b	3e550 <__assert_fail@plt+0x2bf5c>
   3e4bc:	ldrb	r0, [ip, #1]!
   3e4c0:	ldrb	r1, [r2, #1]!
   3e4c4:	cmp	r0, r1
   3e4c8:	bne	3e550 <__assert_fail@plt+0x2bf5c>
   3e4cc:	add	r3, r3, #1
   3e4d0:	cmp	r4, r3
   3e4d4:	bne	3e4bc <__assert_fail@plt+0x2bec8>
   3e4d8:	cmp	r9, fp
   3e4dc:	ldr	r1, [sp, #4]
   3e4e0:	bls	3e6a8 <__assert_fail@plt+0x2c0b4>
   3e4e4:	ldr	r3, [sp, #4]
   3e4e8:	ldr	ip, [sp, #20]
   3e4ec:	add	r2, sl, r3
   3e4f0:	ldrb	r3, [ip]
   3e4f4:	ldrb	r0, [r7, r2]
   3e4f8:	add	r2, r7, r2
   3e4fc:	cmp	r3, r0
   3e500:	bne	3e6a8 <__assert_fail@plt+0x2c0b4>
   3e504:	mov	r0, ip
   3e508:	sub	r8, fp, #1
   3e50c:	b	3e524 <__assert_fail@plt+0x2bf30>
   3e510:	ldrb	lr, [r0, #-1]!
   3e514:	ldrb	ip, [r2, #-1]!
   3e518:	cmp	lr, ip
   3e51c:	bne	3e530 <__assert_fail@plt+0x2bf3c>
   3e520:	mov	r1, r3
   3e524:	sub	r3, r1, #1
   3e528:	cmp	r3, r8
   3e52c:	bne	3e510 <__assert_fail@plt+0x2bf1c>
   3e530:	add	fp, fp, #1
   3e534:	cmp	fp, r1
   3e538:	bhi	3e6c4 <__assert_fail@plt+0x2c0d0>
   3e53c:	ldr	r3, [sp, #8]
   3e540:	ldr	fp, [sp, #16]
   3e544:	add	sl, sl, r3
   3e548:	mov	r0, r5
   3e54c:	b	3e458 <__assert_fail@plt+0x2be64>
   3e550:	ldr	r2, [sp, #12]
   3e554:	mov	fp, #0
   3e558:	add	sl, r2, sl
   3e55c:	add	sl, sl, r3
   3e560:	b	3e548 <__assert_fail@plt+0x2bf54>
   3e564:	sub	r3, r4, r9
   3e568:	cmp	r3, r9
   3e56c:	movcc	r3, r9
   3e570:	sub	r2, r9, #1
   3e574:	add	r3, r3, #1
   3e578:	str	r3, [sp, #8]
   3e57c:	mov	r0, r8
   3e580:	add	r3, r6, r2
   3e584:	mov	r5, #0
   3e588:	add	sl, r6, r9
   3e58c:	mov	r8, r2
   3e590:	str	r3, [sp, #12]
   3e594:	rsb	r3, r9, #1
   3e598:	str	r3, [sp, #4]
   3e59c:	add	fp, r4, r5
   3e5a0:	sub	r2, fp, r0
   3e5a4:	mov	r1, #0
   3e5a8:	add	r0, r7, r0
   3e5ac:	bl	123d8 <memchr@plt>
   3e5b0:	adds	r3, fp, #0
   3e5b4:	movne	r3, #1
   3e5b8:	cmp	r0, #0
   3e5bc:	movne	r3, #0
   3e5c0:	cmp	r3, #0
   3e5c4:	mov	r0, r3
   3e5c8:	beq	3e3e8 <__assert_fail@plt+0x2bdf4>
   3e5cc:	cmp	r4, r9
   3e5d0:	bls	3e618 <__assert_fail@plt+0x2c024>
   3e5d4:	add	r1, r9, r5
   3e5d8:	ldrb	r0, [sl]
   3e5dc:	ldrb	r2, [r7, r1]
   3e5e0:	add	r1, r7, r1
   3e5e4:	cmp	r0, r2
   3e5e8:	movne	r2, r9
   3e5ec:	bne	3e668 <__assert_fail@plt+0x2c074>
   3e5f0:	mov	r0, sl
   3e5f4:	mov	r2, r9
   3e5f8:	b	3e60c <__assert_fail@plt+0x2c018>
   3e5fc:	ldrb	ip, [r0, #1]!
   3e600:	ldrb	r3, [r1, #1]!
   3e604:	cmp	ip, r3
   3e608:	bne	3e668 <__assert_fail@plt+0x2c074>
   3e60c:	add	r2, r2, #1
   3e610:	cmp	r4, r2
   3e614:	bhi	3e5fc <__assert_fail@plt+0x2c008>
   3e618:	cmn	r8, #1
   3e61c:	beq	3e65c <__assert_fail@plt+0x2c068>
   3e620:	ldr	r3, [sp, #12]
   3e624:	add	r1, r5, r8
   3e628:	ldrb	r0, [r3]
   3e62c:	ldrb	r2, [r7, r1]
   3e630:	add	r1, r7, r1
   3e634:	cmp	r0, r2
   3e638:	bne	3e67c <__assert_fail@plt+0x2c088>
   3e63c:	mov	r2, r3
   3e640:	b	3e654 <__assert_fail@plt+0x2c060>
   3e644:	ldrb	r0, [r2, #-1]!
   3e648:	ldrb	r3, [r1, #-1]!
   3e64c:	cmp	r0, r3
   3e650:	bne	3e67c <__assert_fail@plt+0x2c088>
   3e654:	cmp	r6, r2
   3e658:	bne	3e644 <__assert_fail@plt+0x2c050>
   3e65c:	add	r0, r7, r5
   3e660:	add	sp, sp, #36	; 0x24
   3e664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e668:	ldr	r3, [sp, #4]
   3e66c:	add	r5, r3, r5
   3e670:	add	r5, r5, r2
   3e674:	mov	r0, fp
   3e678:	b	3e59c <__assert_fail@plt+0x2bfa8>
   3e67c:	ldr	r3, [sp, #8]
   3e680:	add	r5, r5, r3
   3e684:	b	3e674 <__assert_fail@plt+0x2c080>
   3e688:	add	r2, sp, #28
   3e68c:	mov	r1, r4
   3e690:	mov	r0, r6
   3e694:	bl	3de5c <__assert_fail@plt+0x2b868>
   3e698:	ldr	r3, [sp, #28]
   3e69c:	str	r3, [sp, #8]
   3e6a0:	mov	r9, r0
   3e6a4:	b	3e414 <__assert_fail@plt+0x2be20>
   3e6a8:	mov	r1, r9
   3e6ac:	b	3e530 <__assert_fail@plt+0x2bf3c>
   3e6b0:	mov	r0, r7
   3e6b4:	b	3e3e8 <__assert_fail@plt+0x2bdf4>
   3e6b8:	mov	r6, r1
   3e6bc:	mov	sl, #1
   3e6c0:	b	3e37c <__assert_fail@plt+0x2bd88>
   3e6c4:	add	r0, r7, sl
   3e6c8:	b	3e3e8 <__assert_fail@plt+0x2bdf4>
   3e6cc:	push	{r4, lr}
   3e6d0:	ldrb	r3, [r0, #4]
   3e6d4:	cmp	r3, #0
   3e6d8:	bne	3e6f4 <__assert_fail@plt+0x2c100>
   3e6dc:	ldr	r0, [pc, #52]	; 3e718 <__assert_fail@plt+0x2c124>
   3e6e0:	bl	12570 <unsetenv@plt>
   3e6e4:	cmp	r0, #0
   3e6e8:	beq	3e70c <__assert_fail@plt+0x2c118>
   3e6ec:	mov	r0, #0
   3e6f0:	pop	{r4, pc}
   3e6f4:	add	r1, r0, #5
   3e6f8:	mov	r2, #1
   3e6fc:	ldr	r0, [pc, #20]	; 3e718 <__assert_fail@plt+0x2c124>
   3e700:	bl	12318 <setenv@plt>
   3e704:	cmp	r0, #0
   3e708:	bne	3e6ec <__assert_fail@plt+0x2c0f8>
   3e70c:	bl	12144 <tzset@plt>
   3e710:	mov	r0, #1
   3e714:	pop	{r4, pc}
   3e718:	andeq	r5, r4, r8, lsl r6
   3e71c:	cmp	r0, #1
   3e720:	push	{r4, r5, r6, r7, r8, lr}
   3e724:	mov	r4, r0
   3e728:	moveq	r7, r0
   3e72c:	beq	3e76c <__assert_fail@plt+0x2c178>
   3e730:	bl	12348 <__errno_location@plt>
   3e734:	mov	r6, r0
   3e738:	mov	r0, r4
   3e73c:	ldr	r8, [r6]
   3e740:	bl	3e6cc <__assert_fail@plt+0x2c0d8>
   3e744:	subs	r7, r0, #0
   3e748:	ldreq	r8, [r6]
   3e74c:	cmp	r4, #0
   3e750:	beq	3e768 <__assert_fail@plt+0x2c174>
   3e754:	ldr	r5, [r4]
   3e758:	mov	r0, r4
   3e75c:	bl	2db68 <__assert_fail@plt+0x1b574>
   3e760:	subs	r4, r5, #0
   3e764:	bne	3e754 <__assert_fail@plt+0x2c160>
   3e768:	str	r8, [r6]
   3e76c:	mov	r0, r7
   3e770:	pop	{r4, r5, r6, r7, r8, pc}
   3e774:	push	{r4, r5, r6, r7, r8, lr}
   3e778:	subs	r7, r0, #0
   3e77c:	beq	3e7d8 <__assert_fail@plt+0x2c1e4>
   3e780:	bl	12300 <strlen@plt>
   3e784:	add	r5, r0, #1
   3e788:	cmp	r5, #58	; 0x3a
   3e78c:	addhi	r0, r0, #10
   3e790:	bichi	r0, r0, #3
   3e794:	movls	r0, #64	; 0x40
   3e798:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3e79c:	subs	r4, r0, #0
   3e7a0:	beq	3e7d0 <__assert_fail@plt+0x2c1dc>
   3e7a4:	mov	r3, r4
   3e7a8:	mov	r6, #0
   3e7ac:	mov	r2, #1
   3e7b0:	strb	r2, [r4, #4]
   3e7b4:	str	r6, [r4]
   3e7b8:	mov	r1, r7
   3e7bc:	strb	r6, [r3, #5]!
   3e7c0:	mov	r2, r5
   3e7c4:	mov	r0, r3
   3e7c8:	bl	12024 <memcpy@plt>
   3e7cc:	strb	r6, [r0, r5]
   3e7d0:	mov	r0, r4
   3e7d4:	pop	{r4, r5, r6, r7, r8, pc}
   3e7d8:	mov	r0, #64	; 0x40
   3e7dc:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3e7e0:	subs	r4, r0, #0
   3e7e4:	beq	3e7d0 <__assert_fail@plt+0x2c1dc>
   3e7e8:	str	r7, [r4]
   3e7ec:	strb	r7, [r4, #4]
   3e7f0:	strb	r7, [r4, #5]
   3e7f4:	mov	r0, r4
   3e7f8:	pop	{r4, r5, r6, r7, r8, pc}
   3e7fc:	push	{r4, r5, r6, r7, r8, lr}
   3e800:	ldr	r6, [r1, #40]	; 0x28
   3e804:	cmp	r6, #0
   3e808:	beq	3e8d0 <__assert_fail@plt+0x2c2dc>
   3e80c:	cmp	r1, r6
   3e810:	mov	r7, r1
   3e814:	mov	r5, r0
   3e818:	bhi	3e828 <__assert_fail@plt+0x2c234>
   3e81c:	add	r3, r1, #44	; 0x2c
   3e820:	cmp	r6, r3
   3e824:	bcc	3e8d0 <__assert_fail@plt+0x2c2dc>
   3e828:	ldrb	r3, [r6]
   3e82c:	cmp	r3, #0
   3e830:	addne	r4, r5, #5
   3e834:	beq	3e8c8 <__assert_fail@plt+0x2c2d4>
   3e838:	mov	r1, r6
   3e83c:	mov	r0, r4
   3e840:	bl	11f40 <strcmp@plt>
   3e844:	add	r2, r5, #5
   3e848:	cmp	r0, #0
   3e84c:	mov	r0, r4
   3e850:	beq	3e8bc <__assert_fail@plt+0x2c2c8>
   3e854:	ldrb	r3, [r4]
   3e858:	cmp	r3, #0
   3e85c:	bne	3e874 <__assert_fail@plt+0x2c280>
   3e860:	cmp	r4, r2
   3e864:	bne	3e8d8 <__assert_fail@plt+0x2c2e4>
   3e868:	ldrb	r3, [r5, #4]
   3e86c:	cmp	r3, #0
   3e870:	beq	3e8d8 <__assert_fail@plt+0x2c2e4>
   3e874:	bl	12300 <strlen@plt>
   3e878:	add	r0, r0, #1
   3e87c:	ldrb	r3, [r4, r0]!
   3e880:	cmp	r3, #0
   3e884:	bne	3e838 <__assert_fail@plt+0x2c244>
   3e888:	ldr	r3, [r5]
   3e88c:	cmp	r3, #0
   3e890:	addne	r4, r3, #5
   3e894:	movne	r5, r3
   3e898:	b	3e838 <__assert_fail@plt+0x2c244>
   3e89c:	mov	r0, r6
   3e8a0:	bl	3e774 <__assert_fail@plt+0x2c180>
   3e8a4:	cmp	r0, #0
   3e8a8:	str	r0, [r5]
   3e8ac:	popeq	{r4, r5, r6, r7, r8, pc}
   3e8b0:	add	r4, r0, #5
   3e8b4:	mov	r3, #0
   3e8b8:	strb	r3, [r0, #4]
   3e8bc:	str	r4, [r7, #40]	; 0x28
   3e8c0:	mov	r0, #1
   3e8c4:	pop	{r4, r5, r6, r7, r8, pc}
   3e8c8:	ldr	r4, [pc, #64]	; 3e910 <__assert_fail@plt+0x2c31c>
   3e8cc:	b	3e8bc <__assert_fail@plt+0x2c2c8>
   3e8d0:	mov	r0, #1
   3e8d4:	pop	{r4, r5, r6, r7, r8, pc}
   3e8d8:	mov	r0, r6
   3e8dc:	bl	12300 <strlen@plt>
   3e8e0:	add	r3, r5, #64	; 0x40
   3e8e4:	sub	r3, r3, r4
   3e8e8:	add	r8, r0, #1
   3e8ec:	cmp	r8, r3
   3e8f0:	bge	3e89c <__assert_fail@plt+0x2c2a8>
   3e8f4:	mov	r1, r6
   3e8f8:	mov	r2, r8
   3e8fc:	mov	r0, r4
   3e900:	bl	12024 <memcpy@plt>
   3e904:	mov	r3, #0
   3e908:	strb	r3, [r4, r8]
   3e90c:	b	3e8bc <__assert_fail@plt+0x2c2c8>
   3e910:	andeq	r2, r4, r0, asr r0
   3e914:	push	{r4, r5, r6, r7, r8, lr}
   3e918:	mov	r4, r0
   3e91c:	ldr	r0, [pc, #152]	; 3e9bc <__assert_fail@plt+0x2c3c8>
   3e920:	bl	12228 <getenv@plt>
   3e924:	ldrb	r3, [r4, #4]
   3e928:	subs	r5, r0, #0
   3e92c:	beq	3e974 <__assert_fail@plt+0x2c380>
   3e930:	cmp	r3, #0
   3e934:	beq	3e94c <__assert_fail@plt+0x2c358>
   3e938:	mov	r1, r5
   3e93c:	add	r0, r4, #5
   3e940:	bl	11f40 <strcmp@plt>
   3e944:	cmp	r0, #0
   3e948:	beq	3e97c <__assert_fail@plt+0x2c388>
   3e94c:	mov	r0, r5
   3e950:	bl	3e774 <__assert_fail@plt+0x2c180>
   3e954:	subs	r5, r0, #0
   3e958:	beq	3e96c <__assert_fail@plt+0x2c378>
   3e95c:	mov	r0, r4
   3e960:	bl	3e6cc <__assert_fail@plt+0x2c0d8>
   3e964:	cmp	r0, #0
   3e968:	beq	3e988 <__assert_fail@plt+0x2c394>
   3e96c:	mov	r0, r5
   3e970:	pop	{r4, r5, r6, r7, r8, pc}
   3e974:	cmp	r3, #0
   3e978:	bne	3e94c <__assert_fail@plt+0x2c358>
   3e97c:	mov	r5, #1
   3e980:	mov	r0, r5
   3e984:	pop	{r4, r5, r6, r7, r8, pc}
   3e988:	bl	12348 <__errno_location@plt>
   3e98c:	cmp	r5, #1
   3e990:	mov	r6, r0
   3e994:	ldr	r7, [r0]
   3e998:	beq	3e9b0 <__assert_fail@plt+0x2c3bc>
   3e99c:	ldr	r4, [r5]
   3e9a0:	mov	r0, r5
   3e9a4:	bl	2db68 <__assert_fail@plt+0x1b574>
   3e9a8:	subs	r5, r4, #0
   3e9ac:	bne	3e99c <__assert_fail@plt+0x2c3a8>
   3e9b0:	str	r7, [r6]
   3e9b4:	mov	r5, #0
   3e9b8:	b	3e96c <__assert_fail@plt+0x2c378>
   3e9bc:	andeq	r5, r4, r8, lsl r6
   3e9c0:	cmp	r0, #1
   3e9c4:	bxeq	lr
   3e9c8:	cmp	r0, #0
   3e9cc:	beq	3e9e8 <__assert_fail@plt+0x2c3f4>
   3e9d0:	push	{r4, lr}
   3e9d4:	ldr	r4, [r0]
   3e9d8:	bl	2db68 <__assert_fail@plt+0x1b574>
   3e9dc:	subs	r0, r4, #0
   3e9e0:	bne	3e9d4 <__assert_fail@plt+0x2c3e0>
   3e9e4:	pop	{r4, pc}
   3e9e8:	bx	lr
   3e9ec:	subs	ip, r0, #0
   3e9f0:	push	{r4, r5, r6, r7, r8, lr}
   3e9f4:	mov	r5, r1
   3e9f8:	beq	3ea60 <__assert_fail@plt+0x2c46c>
   3e9fc:	mov	r4, r2
   3ea00:	mov	r6, ip
   3ea04:	bl	3e914 <__assert_fail@plt+0x2c320>
   3ea08:	subs	r7, r0, #0
   3ea0c:	beq	3ea58 <__assert_fail@plt+0x2c464>
   3ea10:	mov	r0, r5
   3ea14:	mov	r1, r4
   3ea18:	bl	120fc <localtime_r@plt>
   3ea1c:	cmp	r0, #0
   3ea20:	beq	3ea50 <__assert_fail@plt+0x2c45c>
   3ea24:	mov	r0, r6
   3ea28:	mov	r1, r4
   3ea2c:	bl	3e7fc <__assert_fail@plt+0x2c208>
   3ea30:	cmp	r0, #0
   3ea34:	beq	3ea50 <__assert_fail@plt+0x2c45c>
   3ea38:	mov	r0, r7
   3ea3c:	bl	3e71c <__assert_fail@plt+0x2c128>
   3ea40:	cmp	r0, #0
   3ea44:	beq	3ea58 <__assert_fail@plt+0x2c464>
   3ea48:	mov	r0, r4
   3ea4c:	pop	{r4, r5, r6, r7, r8, pc}
   3ea50:	mov	r0, r7
   3ea54:	bl	3e71c <__assert_fail@plt+0x2c128>
   3ea58:	mov	r0, #0
   3ea5c:	pop	{r4, r5, r6, r7, r8, pc}
   3ea60:	mov	r0, r5
   3ea64:	mov	r1, r2
   3ea68:	pop	{r4, r5, r6, r7, r8, lr}
   3ea6c:	b	11f04 <gmtime_r@plt>
   3ea70:	push	{r4, r5, r6, r7, lr}
   3ea74:	subs	r7, r0, #0
   3ea78:	sub	sp, sp, #52	; 0x34
   3ea7c:	mov	r4, r1
   3ea80:	beq	3eb40 <__assert_fail@plt+0x2c54c>
   3ea84:	bl	3e914 <__assert_fail@plt+0x2c320>
   3ea88:	subs	r6, r0, #0
   3ea8c:	beq	3eb38 <__assert_fail@plt+0x2c544>
   3ea90:	ldm	r4, {r1, r2, ip}
   3ea94:	ldr	r0, [r4, #12]
   3ea98:	ldr	r3, [r4, #16]
   3ea9c:	str	r1, [sp, #4]
   3eaa0:	str	r2, [sp, #8]
   3eaa4:	ldr	r1, [r4, #20]
   3eaa8:	ldr	r2, [r4, #32]
   3eaac:	str	r0, [sp, #16]
   3eab0:	str	r3, [sp, #20]
   3eab4:	add	r0, sp, #4
   3eab8:	mvn	r3, #0
   3eabc:	str	r3, [sp, #32]
   3eac0:	str	ip, [sp, #12]
   3eac4:	str	r1, [sp, #24]
   3eac8:	str	r2, [sp, #36]	; 0x24
   3eacc:	bl	11f7c <mktime@plt>
   3ead0:	ldr	r3, [sp, #32]
   3ead4:	cmp	r3, #0
   3ead8:	mov	r5, r0
   3eadc:	blt	3eb30 <__assert_fail@plt+0x2c53c>
   3eae0:	mov	r0, r7
   3eae4:	add	r1, sp, #4
   3eae8:	bl	3e7fc <__assert_fail@plt+0x2c208>
   3eaec:	cmp	r0, #0
   3eaf0:	beq	3eb30 <__assert_fail@plt+0x2c53c>
   3eaf4:	mov	r0, r6
   3eaf8:	bl	3e71c <__assert_fail@plt+0x2c128>
   3eafc:	cmp	r0, #0
   3eb00:	beq	3eb38 <__assert_fail@plt+0x2c544>
   3eb04:	add	lr, sp, #4
   3eb08:	mov	ip, r4
   3eb0c:	ldm	lr!, {r0, r1, r2, r3}
   3eb10:	stmia	ip!, {r0, r1, r2, r3}
   3eb14:	ldm	lr!, {r0, r1, r2, r3}
   3eb18:	stmia	ip!, {r0, r1, r2, r3}
   3eb1c:	ldm	lr, {r0, r1, r2}
   3eb20:	stm	ip, {r0, r1, r2}
   3eb24:	mov	r0, r5
   3eb28:	add	sp, sp, #52	; 0x34
   3eb2c:	pop	{r4, r5, r6, r7, pc}
   3eb30:	mov	r0, r6
   3eb34:	bl	3e71c <__assert_fail@plt+0x2c128>
   3eb38:	mvn	r5, #0
   3eb3c:	b	3eb24 <__assert_fail@plt+0x2c530>
   3eb40:	mov	r0, r1
   3eb44:	bl	124d4 <timegm@plt>
   3eb48:	mov	r5, r0
   3eb4c:	mov	r0, r5
   3eb50:	add	sp, sp, #52	; 0x34
   3eb54:	pop	{r4, r5, r6, r7, pc}
   3eb58:	ldr	r3, [pc, #8]	; 3eb68 <__assert_fail@plt+0x2c574>
   3eb5c:	push	{r4, lr}
   3eb60:	ldr	r0, [r3]
   3eb64:	bl	122d0 <exit@plt>
   3eb68:	strdeq	r7, [r5], -r0
   3eb6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eb70:	mov	r5, r1
   3eb74:	sub	sp, sp, #12
   3eb78:	mov	r4, r2
   3eb7c:	str	r2, [sp]
   3eb80:	mov	r7, r3
   3eb84:	mov	sl, r0
   3eb88:	bl	12300 <strlen@plt>
   3eb8c:	ldr	fp, [r5]
   3eb90:	cmp	fp, #0
   3eb94:	beq	3ec5c <__assert_fail@plt+0x2c668>
   3eb98:	mov	r3, #0
   3eb9c:	mov	r8, r0
   3eba0:	str	r3, [sp, #4]
   3eba4:	mov	r6, r3
   3eba8:	mvn	r9, #0
   3ebac:	b	3ebd8 <__assert_fail@plt+0x2c5e4>
   3ebb0:	bl	12084 <memcmp@plt>
   3ebb4:	ldr	r3, [sp, #4]
   3ebb8:	cmp	r0, #0
   3ebbc:	movne	r3, #1
   3ebc0:	str	r3, [sp, #4]
   3ebc4:	ldr	fp, [r5, #4]!
   3ebc8:	add	r6, r6, #1
   3ebcc:	cmp	fp, #0
   3ebd0:	add	r4, r4, r7
   3ebd4:	beq	3ec34 <__assert_fail@plt+0x2c640>
   3ebd8:	mov	r2, r8
   3ebdc:	mov	r1, sl
   3ebe0:	mov	r0, fp
   3ebe4:	bl	12594 <strncmp@plt>
   3ebe8:	cmp	r0, #0
   3ebec:	mov	r0, fp
   3ebf0:	bne	3ebc4 <__assert_fail@plt+0x2c5d0>
   3ebf4:	bl	12300 <strlen@plt>
   3ebf8:	ldr	r3, [sp]
   3ebfc:	mov	r2, r7
   3ec00:	mov	r1, r4
   3ec04:	cmp	r8, r0
   3ec08:	mla	r0, r7, r9, r3
   3ec0c:	beq	3ec4c <__assert_fail@plt+0x2c658>
   3ec10:	cmn	r9, #1
   3ec14:	moveq	r9, r6
   3ec18:	beq	3ebc4 <__assert_fail@plt+0x2c5d0>
   3ec1c:	ldr	r3, [sp]
   3ec20:	cmp	r3, #0
   3ec24:	bne	3ebb0 <__assert_fail@plt+0x2c5bc>
   3ec28:	mov	r3, #1
   3ec2c:	str	r3, [sp, #4]
   3ec30:	b	3ebc4 <__assert_fail@plt+0x2c5d0>
   3ec34:	ldr	r3, [sp, #4]
   3ec38:	cmp	r3, #0
   3ec3c:	mvnne	r9, #1
   3ec40:	mov	r0, r9
   3ec44:	add	sp, sp, #12
   3ec48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ec4c:	mov	r9, r6
   3ec50:	mov	r0, r9
   3ec54:	add	sp, sp, #12
   3ec58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ec5c:	mvn	r9, #0
   3ec60:	b	3ec40 <__assert_fail@plt+0x2c64c>
   3ec64:	cmn	r2, #1
   3ec68:	push	{r4, r5, r6, lr}
   3ec6c:	mov	r2, #5
   3ec70:	sub	sp, sp, #8
   3ec74:	mov	r4, r1
   3ec78:	mov	r5, r0
   3ec7c:	ldreq	r1, [pc, #76]	; 3ecd0 <__assert_fail@plt+0x2c6dc>
   3ec80:	ldrne	r1, [pc, #76]	; 3ecd4 <__assert_fail@plt+0x2c6e0>
   3ec84:	mov	r0, #0
   3ec88:	bl	120b4 <dcgettext@plt>
   3ec8c:	mov	r2, r4
   3ec90:	mov	r1, #8
   3ec94:	mov	r6, r0
   3ec98:	mov	r0, #0
   3ec9c:	bl	2b208 <__assert_fail@plt+0x18c14>
   3eca0:	mov	r1, r5
   3eca4:	mov	r4, r0
   3eca8:	mov	r0, #1
   3ecac:	bl	2b4a4 <__assert_fail@plt+0x18eb0>
   3ecb0:	mov	r1, #0
   3ecb4:	mov	r3, r4
   3ecb8:	mov	r2, r6
   3ecbc:	str	r0, [sp]
   3ecc0:	mov	r0, r1
   3ecc4:	bl	121ec <error@plt>
   3ecc8:	add	sp, sp, #8
   3eccc:	pop	{r4, r5, r6, pc}
   3ecd0:	muleq	r4, r4, r1
   3ecd4:			; <UNDEFINED> instruction: 0x000461b0
   3ecd8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ecdc:	mov	r7, r0
   3ece0:	ldr	r9, [pc, #188]	; 3eda4 <__assert_fail@plt+0x2c7b0>
   3ece4:	mov	r4, r1
   3ece8:	mov	r8, r2
   3ecec:	ldr	r1, [pc, #180]	; 3eda8 <__assert_fail@plt+0x2c7b4>
   3ecf0:	mov	r2, #5
   3ecf4:	mov	r0, #0
   3ecf8:	bl	120b4 <dcgettext@plt>
   3ecfc:	ldr	r1, [r9]
   3ed00:	bl	12588 <fputs@plt>
   3ed04:	ldr	r5, [r7]
   3ed08:	cmp	r5, #0
   3ed0c:	beq	3ed94 <__assert_fail@plt+0x2c7a0>
   3ed10:	mov	fp, #0
   3ed14:	ldr	sl, [pc, #144]	; 3edac <__assert_fail@plt+0x2c7b8>
   3ed18:	mov	r6, fp
   3ed1c:	b	3ed54 <__assert_fail@plt+0x2c760>
   3ed20:	mov	r0, r5
   3ed24:	ldr	r5, [r9]
   3ed28:	bl	2b4b4 <__assert_fail@plt+0x18ec0>
   3ed2c:	mov	r1, sl
   3ed30:	mov	fp, r4
   3ed34:	mov	r2, r0
   3ed38:	mov	r0, r5
   3ed3c:	bl	1233c <fprintf@plt>
   3ed40:	ldr	r5, [r7, #4]!
   3ed44:	add	r6, r6, #1
   3ed48:	cmp	r5, #0
   3ed4c:	add	r4, r4, r8
   3ed50:	beq	3ed94 <__assert_fail@plt+0x2c7a0>
   3ed54:	cmp	r6, #0
   3ed58:	mov	r1, r4
   3ed5c:	mov	r2, r8
   3ed60:	mov	r0, fp
   3ed64:	beq	3ed20 <__assert_fail@plt+0x2c72c>
   3ed68:	bl	12084 <memcmp@plt>
   3ed6c:	cmp	r0, #0
   3ed70:	bne	3ed20 <__assert_fail@plt+0x2c72c>
   3ed74:	mov	r0, r5
   3ed78:	ldr	r5, [r9]
   3ed7c:	bl	2b4b4 <__assert_fail@plt+0x18ec0>
   3ed80:	ldr	r1, [pc, #40]	; 3edb0 <__assert_fail@plt+0x2c7bc>
   3ed84:	mov	r2, r0
   3ed88:	mov	r0, r5
   3ed8c:	bl	1233c <fprintf@plt>
   3ed90:	b	3ed40 <__assert_fail@plt+0x2c74c>
   3ed94:	ldr	r1, [r9]
   3ed98:	mov	r0, #10
   3ed9c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eda0:	b	124e0 <putc@plt>
   3eda4:	andeq	r7, r5, r8, asr #10
   3eda8:	ldrdeq	r6, [r4], -r0
   3edac:	andeq	r6, r4, r8, ror #3
   3edb0:	strdeq	r6, [r4], -r0
   3edb4:	push	{r4, r5, r6, r7, r8, lr}
   3edb8:	mov	r6, r1
   3edbc:	mov	r4, r2
   3edc0:	mov	r5, r3
   3edc4:	mov	r7, r0
   3edc8:	ldr	r3, [sp, #24]
   3edcc:	mov	r2, r5
   3edd0:	mov	r1, r4
   3edd4:	mov	r0, r6
   3edd8:	bl	3eb6c <__assert_fail@plt+0x2c578>
   3eddc:	cmp	r0, #0
   3ede0:	popge	{r4, r5, r6, r7, r8, pc}
   3ede4:	mov	r2, r0
   3ede8:	mov	r1, r6
   3edec:	mov	r0, r7
   3edf0:	bl	3ec64 <__assert_fail@plt+0x2c670>
   3edf4:	mov	r0, r4
   3edf8:	ldr	r2, [sp, #24]
   3edfc:	mov	r1, r5
   3ee00:	bl	3ecd8 <__assert_fail@plt+0x2c6e4>
   3ee04:	ldr	r3, [sp, #28]
   3ee08:	blx	r3
   3ee0c:	mvn	r0, #0
   3ee10:	pop	{r4, r5, r6, r7, r8, pc}
   3ee14:	push	{r4, r5, r6, r7, r8, lr}
   3ee18:	ldr	r7, [r1]
   3ee1c:	cmp	r7, #0
   3ee20:	beq	3ee60 <__assert_fail@plt+0x2c86c>
   3ee24:	mov	r6, r3
   3ee28:	mov	r8, r0
   3ee2c:	mov	r4, r2
   3ee30:	mov	r5, r1
   3ee34:	b	3ee44 <__assert_fail@plt+0x2c850>
   3ee38:	ldr	r7, [r5, #4]!
   3ee3c:	cmp	r7, #0
   3ee40:	beq	3ee60 <__assert_fail@plt+0x2c86c>
   3ee44:	mov	r1, r4
   3ee48:	mov	r2, r6
   3ee4c:	mov	r0, r8
   3ee50:	bl	12084 <memcmp@plt>
   3ee54:	add	r4, r4, r6
   3ee58:	cmp	r0, #0
   3ee5c:	bne	3ee38 <__assert_fail@plt+0x2c844>
   3ee60:	mov	r0, r7
   3ee64:	pop	{r4, r5, r6, r7, r8, pc}
   3ee68:	push	{r4, r5, r6, r7, r8, r9, lr}
   3ee6c:	mov	r4, r0
   3ee70:	ldrb	r3, [r2]
   3ee74:	sub	sp, sp, #36	; 0x24
   3ee78:	cmp	r3, #0
   3ee7c:	strbeq	r3, [r0]
   3ee80:	beq	3eed8 <__assert_fail@plt+0x2c8e4>
   3ee84:	ldr	r8, [pc, #200]	; 3ef54 <__assert_fail@plt+0x2c960>
   3ee88:	mov	r5, r2
   3ee8c:	mov	r7, r1
   3ee90:	ldr	r6, [r8]
   3ee94:	cmp	r6, #0
   3ee98:	beq	3eef4 <__assert_fail@plt+0x2c900>
   3ee9c:	cmp	r6, #0
   3eea0:	blt	3eeec <__assert_fail@plt+0x2c8f8>
   3eea4:	mov	r0, r5
   3eea8:	bl	12300 <strlen@plt>
   3eeac:	add	r0, r0, #27
   3eeb0:	cmp	r0, #4032	; 0xfc0
   3eeb4:	bhi	3eee0 <__assert_fail@plt+0x2c8ec>
   3eeb8:	mov	r2, r7
   3eebc:	ldr	r1, [pc, #148]	; 3ef58 <__assert_fail@plt+0x2c964>
   3eec0:	mov	r0, r4
   3eec4:	bl	124b0 <sprintf@plt>
   3eec8:	mov	r1, r5
   3eecc:	add	r0, r4, r0
   3eed0:	bl	121b0 <strcpy@plt>
   3eed4:	mov	r0, r4
   3eed8:	add	sp, sp, #36	; 0x24
   3eedc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3eee0:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3eee4:	subs	r4, r0, #0
   3eee8:	bne	3eeb8 <__assert_fail@plt+0x2c8c4>
   3eeec:	mov	r0, #0
   3eef0:	b	3eed8 <__assert_fail@plt+0x2c8e4>
   3eef4:	ldr	r1, [pc, #96]	; 3ef5c <__assert_fail@plt+0x2c968>
   3eef8:	ldr	r0, [pc, #96]	; 3ef60 <__assert_fail@plt+0x2c96c>
   3eefc:	bl	1221c <open64@plt>
   3ef00:	subs	r9, r0, #0
   3ef04:	blt	3ef44 <__assert_fail@plt+0x2c950>
   3ef08:	mov	r2, r9
   3ef0c:	ldr	r1, [pc, #80]	; 3ef64 <__assert_fail@plt+0x2c970>
   3ef10:	mov	r0, sp
   3ef14:	bl	124b0 <sprintf@plt>
   3ef18:	mov	r1, r6
   3ef1c:	mov	r0, sp
   3ef20:	bl	123f0 <access@plt>
   3ef24:	cmp	r0, #0
   3ef28:	moveq	r3, #1
   3ef2c:	mvnne	r3, #0
   3ef30:	mov	r0, r9
   3ef34:	str	r3, [r8]
   3ef38:	bl	125ac <close@plt>
   3ef3c:	ldr	r6, [r8]
   3ef40:	b	3ee9c <__assert_fail@plt+0x2c8a8>
   3ef44:	mvn	r3, #0
   3ef48:	mov	r0, r6
   3ef4c:	str	r3, [r8]
   3ef50:	b	3eed8 <__assert_fail@plt+0x2c8e4>
   3ef54:	andeq	r7, r5, ip, lsr lr
   3ef58:	andeq	r6, r4, r0, lsl r2
   3ef5c:	andeq	r4, r8, r0, lsl #18
   3ef60:			; <UNDEFINED> instruction: 0x000444b4
   3ef64:	strdeq	r6, [r4], -r8
   3ef68:	ldrb	r3, [r0]
   3ef6c:	cmp	r3, #47	; 0x2f
   3ef70:	bne	3ef80 <__assert_fail@plt+0x2c98c>
   3ef74:	ldrb	r3, [r0, #1]!
   3ef78:	cmp	r3, #47	; 0x2f
   3ef7c:	beq	3ef74 <__assert_fail@plt+0x2c980>
   3ef80:	cmp	r3, #0
   3ef84:	bxeq	lr
   3ef88:	mov	r2, #0
   3ef8c:	push	{lr}		; (str lr, [sp, #-4]!)
   3ef90:	mov	ip, r2
   3ef94:	mov	r1, r0
   3ef98:	mov	lr, #1
   3ef9c:	cmp	r3, #47	; 0x2f
   3efa0:	moveq	r2, lr
   3efa4:	beq	3efb4 <__assert_fail@plt+0x2c9c0>
   3efa8:	cmp	r2, #0
   3efac:	movne	r0, r1
   3efb0:	movne	r2, ip
   3efb4:	ldrb	r3, [r1, #1]!
   3efb8:	cmp	r3, #0
   3efbc:	bne	3ef9c <__assert_fail@plt+0x2c9a8>
   3efc0:	pop	{pc}		; (ldr pc, [sp], #4)
   3efc4:	push	{r4, lr}
   3efc8:	mov	r4, r0
   3efcc:	bl	12300 <strlen@plt>
   3efd0:	cmp	r0, #1
   3efd4:	popls	{r4, pc}
   3efd8:	sub	r3, r0, #1
   3efdc:	add	r2, r4, r3
   3efe0:	ldrb	r1, [r4, r3]
   3efe4:	cmp	r1, #47	; 0x2f
   3efe8:	popne	{r4, pc}
   3efec:	cmp	r3, #1
   3eff0:	beq	3f004 <__assert_fail@plt+0x2ca10>
   3eff4:	ldrb	r1, [r2, #-1]!
   3eff8:	sub	r0, r3, #1
   3effc:	cmp	r1, #47	; 0x2f
   3f000:	beq	3f00c <__assert_fail@plt+0x2ca18>
   3f004:	mov	r0, r3
   3f008:	pop	{r4, pc}
   3f00c:	mov	r3, r0
   3f010:	b	3efec <__assert_fail@plt+0x2c9f8>
   3f014:	push	{r4, r5, r6, lr}
   3f018:	mov	r4, r0
   3f01c:	bl	121c8 <__fpending@plt>
   3f020:	mov	r6, r0
   3f024:	mov	r0, r4
   3f028:	bl	11fe8 <ferror@plt>
   3f02c:	mov	r5, r0
   3f030:	mov	r0, r4
   3f034:	bl	123fc <fclose@plt>
   3f038:	cmp	r5, #0
   3f03c:	mov	r4, r0
   3f040:	bne	3f060 <__assert_fail@plt+0x2ca6c>
   3f044:	cmp	r0, #0
   3f048:	beq	3f058 <__assert_fail@plt+0x2ca64>
   3f04c:	cmp	r6, #0
   3f050:	beq	3f07c <__assert_fail@plt+0x2ca88>
   3f054:	mvn	r4, #0
   3f058:	mov	r0, r4
   3f05c:	pop	{r4, r5, r6, pc}
   3f060:	cmp	r0, #0
   3f064:	bne	3f054 <__assert_fail@plt+0x2ca60>
   3f068:	bl	12348 <__errno_location@plt>
   3f06c:	str	r4, [r0]
   3f070:	mvn	r4, #0
   3f074:	mov	r0, r4
   3f078:	pop	{r4, r5, r6, pc}
   3f07c:	bl	12348 <__errno_location@plt>
   3f080:	ldr	r4, [r0]
   3f084:	subs	r4, r4, #9
   3f088:	mvnne	r4, #0
   3f08c:	mov	r0, r4
   3f090:	pop	{r4, r5, r6, pc}
   3f094:	push	{r4, r5}
   3f098:	mov	r4, #0
   3f09c:	mov	r5, #0
   3f0a0:	ldr	r3, [pc, #12]	; 3f0b4 <__assert_fail@plt+0x2cac0>
   3f0a4:	strd	r4, [r0, #16]
   3f0a8:	str	r3, [r0, #24]
   3f0ac:	pop	{r4, r5}
   3f0b0:	bx	lr
   3f0b4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   3f0b8:	ldr	r3, [pc, #180]	; 3f174 <__assert_fail@plt+0x2cb80>
   3f0bc:	ldr	r2, [r0, #24]
   3f0c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f0c4:	cmp	r2, r3
   3f0c8:	bne	3f160 <__assert_fail@plt+0x2cb6c>
   3f0cc:	ldrd	r6, [r0, #16]
   3f0d0:	orrs	r3, r6, r7
   3f0d4:	bne	3f100 <__assert_fail@plt+0x2cb0c>
   3f0d8:	mov	r2, #1
   3f0dc:	mov	r3, #0
   3f0e0:	ldrd	r8, [r1, #96]	; 0x60
   3f0e4:	strd	r2, [r0, #16]
   3f0e8:	ldrd	r2, [r1]
   3f0ec:	mov	r1, #0
   3f0f0:	strd	r8, [r0]
   3f0f4:	strd	r2, [r0, #8]
   3f0f8:	mov	r0, r1
   3f0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f100:	ldrd	r8, [r1, #96]	; 0x60
   3f104:	ldrd	r2, [r0]
   3f108:	cmp	r9, r3
   3f10c:	cmpeq	r8, r2
   3f110:	beq	3f148 <__assert_fail@plt+0x2cb54>
   3f114:	adds	r2, r6, #1
   3f118:	adc	r3, r7, #0
   3f11c:	and	r6, r6, r2
   3f120:	and	r7, r7, r3
   3f124:	orrs	ip, r6, r7
   3f128:	strd	r2, [r0, #16]
   3f12c:	movne	r1, #0
   3f130:	bne	3f0f8 <__assert_fail@plt+0x2cb04>
   3f134:	orrs	r3, r2, r3
   3f138:	bne	3f0e8 <__assert_fail@plt+0x2caf4>
   3f13c:	mov	r1, #1
   3f140:	mov	r0, r1
   3f144:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f148:	ldrd	r4, [r1]
   3f14c:	ldrd	r2, [r0, #8]
   3f150:	cmp	r5, r3
   3f154:	cmpeq	r4, r2
   3f158:	bne	3f114 <__assert_fail@plt+0x2cb20>
   3f15c:	b	3f13c <__assert_fail@plt+0x2cb48>
   3f160:	ldr	r3, [pc, #16]	; 3f178 <__assert_fail@plt+0x2cb84>
   3f164:	mov	r2, #60	; 0x3c
   3f168:	ldr	r1, [pc, #12]	; 3f17c <__assert_fail@plt+0x2cb88>
   3f16c:	ldr	r0, [pc, #12]	; 3f180 <__assert_fail@plt+0x2cb8c>
   3f170:	bl	125f4 <__assert_fail@plt>
   3f174:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   3f178:	andeq	r6, r4, r4, lsr #4
   3f17c:	andeq	r6, r4, r0, lsr r2
   3f180:	andeq	r6, r4, r0, asr #4
   3f184:	ldr	ip, [r0, #4]
   3f188:	cmp	ip, r1
   3f18c:	bcs	3f208 <__assert_fail@plt+0x2cc14>
   3f190:	cmp	r3, #0
   3f194:	push	{r4, r5, r6, r7, r8, lr}
   3f198:	mov	r6, r3
   3f19c:	mov	r7, r2
   3f1a0:	mov	r5, r1
   3f1a4:	mov	r4, r0
   3f1a8:	bne	3f1dc <__assert_fail@plt+0x2cbe8>
   3f1ac:	ldr	r0, [r4, #8]
   3f1b0:	mul	r1, r6, r5
   3f1b4:	cmp	r0, r7
   3f1b8:	beq	3f218 <__assert_fail@plt+0x2cc24>
   3f1bc:	bl	308c4 <__assert_fail@plt+0x1e2d0>
   3f1c0:	subs	r7, r0, #0
   3f1c4:	beq	3f244 <__assert_fail@plt+0x2cc50>
   3f1c8:	mov	r3, #1
   3f1cc:	stmib	r4, {r5, r7}
   3f1d0:	str	r5, [r4]
   3f1d4:	mov	r0, r3
   3f1d8:	pop	{r4, r5, r6, r7, r8, pc}
   3f1dc:	mov	r1, r3
   3f1e0:	mvn	r0, #0
   3f1e4:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   3f1e8:	cmp	r5, r0
   3f1ec:	bls	3f1ac <__assert_fail@plt+0x2cbb8>
   3f1f0:	bl	12348 <__errno_location@plt>
   3f1f4:	mov	r3, #0
   3f1f8:	mov	r2, #12
   3f1fc:	str	r2, [r0]
   3f200:	mov	r0, r3
   3f204:	pop	{r4, r5, r6, r7, r8, pc}
   3f208:	mov	r3, #1
   3f20c:	str	r1, [r0]
   3f210:	mov	r0, r3
   3f214:	bx	lr
   3f218:	mov	r0, r1
   3f21c:	bl	2fe38 <__assert_fail@plt+0x1d844>
   3f220:	subs	r7, r0, #0
   3f224:	beq	3f244 <__assert_fail@plt+0x2cc50>
   3f228:	ldr	r1, [r4, #8]
   3f22c:	cmp	r1, #0
   3f230:	beq	3f1c8 <__assert_fail@plt+0x2cbd4>
   3f234:	ldr	r2, [r4]
   3f238:	mul	r2, r2, r6
   3f23c:	bl	12024 <memcpy@plt>
   3f240:	b	3f1c8 <__assert_fail@plt+0x2cbd4>
   3f244:	mov	r3, #0
   3f248:	b	3f1d4 <__assert_fail@plt+0x2cbe0>
   3f24c:	mov	r1, r0
   3f250:	mov	r0, #0
   3f254:	b	1200c <clock_gettime@plt>
   3f258:	push	{r4, r5, lr}
   3f25c:	sub	sp, sp, #12
   3f260:	mov	r4, r0
   3f264:	mov	r1, sp
   3f268:	mov	r0, #0
   3f26c:	bl	1200c <clock_gettime@plt>
   3f270:	ldm	sp, {r0, r1}
   3f274:	stm	r4, {r0, r1}
   3f278:	mov	r0, r4
   3f27c:	add	sp, sp, #12
   3f280:	pop	{r4, r5, pc}
   3f284:	push	{lr}		; (str lr, [sp, #-4]!)
   3f288:	sub	sp, sp, #268	; 0x10c
   3f28c:	add	r1, sp, #4
   3f290:	ldr	r2, [pc, #60]	; 3f2d4 <__assert_fail@plt+0x2cce0>
   3f294:	bl	3f710 <__assert_fail@plt+0x2d11c>
   3f298:	cmp	r0, #0
   3f29c:	movne	r0, #0
   3f2a0:	bne	3f2cc <__assert_fail@plt+0x2ccd8>
   3f2a4:	ldr	r1, [pc, #44]	; 3f2d8 <__assert_fail@plt+0x2cce4>
   3f2a8:	add	r0, sp, #4
   3f2ac:	bl	11f40 <strcmp@plt>
   3f2b0:	cmp	r0, #0
   3f2b4:	beq	3f2cc <__assert_fail@plt+0x2ccd8>
   3f2b8:	add	r0, sp, #4
   3f2bc:	ldr	r1, [pc, #24]	; 3f2dc <__assert_fail@plt+0x2cce8>
   3f2c0:	bl	11f40 <strcmp@plt>
   3f2c4:	adds	r0, r0, #0
   3f2c8:	movne	r0, #1
   3f2cc:	add	sp, sp, #268	; 0x10c
   3f2d0:	pop	{pc}		; (ldr pc, [sp], #4)
   3f2d4:	andeq	r0, r0, r1, lsl #2
   3f2d8:	andeq	r5, r4, r0, lsr #12
   3f2dc:	andeq	r6, r4, r8, asr r2
   3f2e0:	mov	r3, #0
   3f2e4:	mov	r2, #1
   3f2e8:	str	r1, [r0]
   3f2ec:	str	r1, [r0, #4]
   3f2f0:	str	r1, [r0, #8]
   3f2f4:	str	r1, [r0, #12]
   3f2f8:	str	r1, [r0, #16]
   3f2fc:	strb	r2, [r0, #28]
   3f300:	str	r3, [r0, #20]
   3f304:	str	r3, [r0, #24]
   3f308:	bx	lr
   3f30c:	ldrb	r0, [r0, #28]
   3f310:	bx	lr
   3f314:	ldrb	ip, [r0, #28]
   3f318:	ldr	r3, [r0, #20]
   3f31c:	mov	r2, r0
   3f320:	eor	ip, ip, #1
   3f324:	add	r3, ip, r3
   3f328:	and	r3, r3, #3
   3f32c:	ldr	r0, [r0, r3, lsl #2]
   3f330:	str	r1, [r2, r3, lsl #2]
   3f334:	ldr	r1, [r2, #24]
   3f338:	str	r3, [r2, #20]
   3f33c:	cmp	r3, r1
   3f340:	addeq	r3, ip, r3
   3f344:	andeq	r3, r3, #3
   3f348:	streq	r3, [r2, #24]
   3f34c:	mov	r3, #0
   3f350:	strb	r3, [r2, #28]
   3f354:	bx	lr
   3f358:	ldrb	r3, [r0, #28]
   3f35c:	cmp	r3, #0
   3f360:	bne	3f398 <__assert_fail@plt+0x2cda4>
   3f364:	ldr	r3, [r0, #20]
   3f368:	ldr	r1, [r0, #16]
   3f36c:	ldr	r2, [r0, r3, lsl #2]
   3f370:	str	r1, [r0, r3, lsl #2]
   3f374:	ldr	r1, [r0, #24]
   3f378:	cmp	r3, r1
   3f37c:	addne	r3, r3, #3
   3f380:	moveq	r3, #1
   3f384:	andne	r3, r3, #3
   3f388:	strbeq	r3, [r0, #28]
   3f38c:	strne	r3, [r0, #20]
   3f390:	mov	r0, r2
   3f394:	bx	lr
   3f398:	push	{r4, lr}
   3f39c:	bl	125a0 <abort@plt>
   3f3a0:	push	{r4, lr}
   3f3a4:	mov	r0, #14
   3f3a8:	bl	12480 <nl_langinfo@plt>
   3f3ac:	cmp	r0, #0
   3f3b0:	beq	3f3c8 <__assert_fail@plt+0x2cdd4>
   3f3b4:	ldrb	r2, [r0]
   3f3b8:	ldr	r3, [pc, #16]	; 3f3d0 <__assert_fail@plt+0x2cddc>
   3f3bc:	cmp	r2, #0
   3f3c0:	moveq	r0, r3
   3f3c4:	pop	{r4, pc}
   3f3c8:	ldr	r0, [pc]	; 3f3d0 <__assert_fail@plt+0x2cddc>
   3f3cc:	pop	{r4, pc}
   3f3d0:	andeq	r6, r4, r0, ror #4
   3f3d4:	cmn	r0, #-2147483631	; 0x80000011
   3f3d8:	bls	3f3e4 <__assert_fail@plt+0x2cdf0>
   3f3dc:	mov	r0, #0
   3f3e0:	bx	lr
   3f3e4:	push	{r4, lr}
   3f3e8:	add	r0, r0, #16
   3f3ec:	bl	12240 <malloc@plt>
   3f3f0:	cmp	r0, #0
   3f3f4:	beq	3f41c <__assert_fail@plt+0x2ce28>
   3f3f8:	cmn	r0, #9
   3f3fc:	addls	r3, r0, #8
   3f400:	bicls	r2, r3, #15
   3f404:	movhi	r2, #0
   3f408:	rsb	r3, r0, #8
   3f40c:	add	r3, r3, r2
   3f410:	add	r0, r0, r3
   3f414:	strb	r3, [r0, #-1]
   3f418:	pop	{r4, pc}
   3f41c:	mov	r0, #0
   3f420:	pop	{r4, pc}
   3f424:	tst	r0, #7
   3f428:	bne	3f440 <__assert_fail@plt+0x2ce4c>
   3f42c:	tst	r0, #8
   3f430:	bxeq	lr
   3f434:	ldrb	r3, [r0, #-1]
   3f438:	sub	r0, r0, r3
   3f43c:	b	2db68 <__assert_fail@plt+0x1b574>
   3f440:	push	{r4, lr}
   3f444:	bl	125a0 <abort@plt>
   3f448:	push	{r4, lr}
   3f44c:	mov	r4, r0
   3f450:	bl	11fa0 <wcwidth@plt>
   3f454:	cmp	r0, #0
   3f458:	popge	{r4, pc}
   3f45c:	mov	r0, r4
   3f460:	bl	12114 <iswcntrl@plt>
   3f464:	clz	r0, r0
   3f468:	lsr	r0, r0, #5
   3f46c:	pop	{r4, pc}
   3f470:	mov	r3, r1
   3f474:	push	{r4, r5, r6, lr}
   3f478:	mov	r4, r1
   3f47c:	ldr	r1, [r3], #16
   3f480:	mov	r5, r0
   3f484:	cmp	r1, r3
   3f488:	strne	r1, [r0]
   3f48c:	beq	3f4b0 <__assert_fail@plt+0x2cebc>
   3f490:	ldrb	r3, [r4, #8]
   3f494:	ldr	r2, [r4, #4]
   3f498:	cmp	r3, #0
   3f49c:	strb	r3, [r5, #8]
   3f4a0:	ldrne	r3, [r4, #12]
   3f4a4:	str	r2, [r5, #4]
   3f4a8:	strne	r3, [r5, #12]
   3f4ac:	pop	{r4, r5, r6, pc}
   3f4b0:	add	r3, r0, #16
   3f4b4:	mov	r0, r3
   3f4b8:	ldr	r2, [r4, #4]
   3f4bc:	bl	12024 <memcpy@plt>
   3f4c0:	str	r0, [r5]
   3f4c4:	b	3f490 <__assert_fail@plt+0x2ce9c>
   3f4c8:	ldr	r3, [pc, #20]	; 3f4e4 <__assert_fail@plt+0x2cef0>
   3f4cc:	lsr	r2, r0, #5
   3f4d0:	and	r0, r0, #31
   3f4d4:	ldr	r3, [r3, r2, lsl #2]
   3f4d8:	lsr	r0, r3, r0
   3f4dc:	and	r0, r0, #1
   3f4e0:	bx	lr
   3f4e4:	andeq	r6, r4, r8, ror #4
   3f4e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   3f4ec:	sub	sp, sp, #60	; 0x3c
   3f4f0:	mov	r9, r0
   3f4f4:	bl	12198 <__ctype_get_mb_cur_max@plt>
   3f4f8:	cmp	r0, #1
   3f4fc:	bls	3f664 <__assert_fail@plt+0x2d070>
   3f500:	mov	r3, #0
   3f504:	ldr	r8, [pc, #408]	; 3f6a4 <__assert_fail@plt+0x2d0b0>
   3f508:	mov	r5, r3
   3f50c:	mov	r4, r9
   3f510:	mov	r6, r3
   3f514:	mov	r7, #1
   3f518:	str	r9, [sp, #16]
   3f51c:	strb	r3, [sp]
   3f520:	str	r3, [sp, #4]
   3f524:	strb	r3, [sp, #12]
   3f528:	str	r3, [sp, #8]
   3f52c:	ldrb	r3, [sp]
   3f530:	cmp	r3, #0
   3f534:	bne	3f58c <__assert_fail@plt+0x2cf98>
   3f538:	ldrb	r3, [r4]
   3f53c:	and	r2, r3, #31
   3f540:	lsr	r3, r3, #5
   3f544:	ldr	r3, [r8, r3, lsl #2]
   3f548:	lsr	r3, r3, r2
   3f54c:	tst	r3, #1
   3f550:	beq	3f578 <__assert_fail@plt+0x2cf84>
   3f554:	str	r7, [sp, #20]
   3f558:	ldrb	r4, [r4]
   3f55c:	strb	r7, [sp, #24]
   3f560:	cmp	r4, #0
   3f564:	str	r4, [sp, #28]
   3f568:	bne	3f5ec <__assert_fail@plt+0x2cff8>
   3f56c:	mov	r0, r5
   3f570:	add	sp, sp, #60	; 0x3c
   3f574:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3f578:	add	r0, sp, #4
   3f57c:	bl	12060 <mbsinit@plt>
   3f580:	cmp	r0, #0
   3f584:	beq	3f67c <__assert_fail@plt+0x2d088>
   3f588:	strb	r7, [sp]
   3f58c:	bl	12198 <__ctype_get_mb_cur_max@plt>
   3f590:	mov	r1, r0
   3f594:	mov	r0, r4
   3f598:	bl	2bc80 <__assert_fail@plt+0x1968c>
   3f59c:	add	r3, sp, #4
   3f5a0:	mov	r1, r4
   3f5a4:	mov	r2, r0
   3f5a8:	add	r0, sp, #28
   3f5ac:	bl	2fe64 <__assert_fail@plt+0x1d870>
   3f5b0:	cmn	r0, #1
   3f5b4:	str	r0, [sp, #20]
   3f5b8:	beq	3f608 <__assert_fail@plt+0x2d014>
   3f5bc:	cmn	r0, #2
   3f5c0:	beq	3f64c <__assert_fail@plt+0x2d058>
   3f5c4:	cmp	r0, #0
   3f5c8:	beq	3f618 <__assert_fail@plt+0x2d024>
   3f5cc:	ldr	r4, [sp, #28]
   3f5d0:	add	r0, sp, #4
   3f5d4:	strb	r7, [sp, #24]
   3f5d8:	bl	12060 <mbsinit@plt>
   3f5dc:	cmp	r0, #0
   3f5e0:	strbne	r6, [sp]
   3f5e4:	cmp	r4, #0
   3f5e8:	beq	3f56c <__assert_fail@plt+0x2cf78>
   3f5ec:	ldr	r4, [sp, #16]
   3f5f0:	ldr	r3, [sp, #20]
   3f5f4:	add	r5, r5, #1
   3f5f8:	add	r4, r4, r3
   3f5fc:	strb	r6, [sp, #12]
   3f600:	str	r4, [sp, #16]
   3f604:	b	3f52c <__assert_fail@plt+0x2cf38>
   3f608:	str	r7, [sp, #20]
   3f60c:	strb	r6, [sp, #24]
   3f610:	ldr	r4, [sp, #16]
   3f614:	b	3f5f0 <__assert_fail@plt+0x2cffc>
   3f618:	ldr	r4, [sp, #16]
   3f61c:	str	r7, [sp, #20]
   3f620:	ldrb	r3, [r4]
   3f624:	cmp	r3, #0
   3f628:	bne	3f690 <__assert_fail@plt+0x2d09c>
   3f62c:	ldr	r4, [sp, #28]
   3f630:	cmp	r4, #0
   3f634:	beq	3f5d0 <__assert_fail@plt+0x2cfdc>
   3f638:	ldr	r3, [pc, #104]	; 3f6a8 <__assert_fail@plt+0x2d0b4>
   3f63c:	mov	r2, #172	; 0xac
   3f640:	ldr	r1, [pc, #100]	; 3f6ac <__assert_fail@plt+0x2d0b8>
   3f644:	ldr	r0, [pc, #100]	; 3f6b0 <__assert_fail@plt+0x2d0bc>
   3f648:	bl	125f4 <__assert_fail@plt>
   3f64c:	ldr	r4, [sp, #16]
   3f650:	mov	r0, r4
   3f654:	bl	12300 <strlen@plt>
   3f658:	strb	r6, [sp, #24]
   3f65c:	str	r0, [sp, #20]
   3f660:	b	3f5f0 <__assert_fail@plt+0x2cffc>
   3f664:	mov	r0, r9
   3f668:	bl	12300 <strlen@plt>
   3f66c:	mov	r5, r0
   3f670:	mov	r0, r5
   3f674:	add	sp, sp, #60	; 0x3c
   3f678:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3f67c:	ldr	r3, [pc, #36]	; 3f6a8 <__assert_fail@plt+0x2d0b4>
   3f680:	mov	r2, #143	; 0x8f
   3f684:	ldr	r1, [pc, #32]	; 3f6ac <__assert_fail@plt+0x2d0b8>
   3f688:	ldr	r0, [pc, #36]	; 3f6b4 <__assert_fail@plt+0x2d0c0>
   3f68c:	bl	125f4 <__assert_fail@plt>
   3f690:	ldr	r3, [pc, #16]	; 3f6a8 <__assert_fail@plt+0x2d0b4>
   3f694:	mov	r2, #171	; 0xab
   3f698:	ldr	r1, [pc, #12]	; 3f6ac <__assert_fail@plt+0x2d0b8>
   3f69c:	ldr	r0, [pc, #20]	; 3f6b8 <__assert_fail@plt+0x2d0c4>
   3f6a0:	bl	125f4 <__assert_fail@plt>
   3f6a4:	andeq	r6, r4, r8, ror #4
   3f6a8:	andeq	r6, r4, r8, lsl #5
   3f6ac:	andeq	r4, r4, r8, ror #20
   3f6b0:	andeq	r4, r4, r4, lsr #21
   3f6b4:	andeq	r4, r4, r4, ror sl
   3f6b8:	andeq	r4, r4, ip, lsl #21
   3f6bc:	orr	r2, r2, #540672	; 0x84000
   3f6c0:	push	{r4, r5, r6, lr}
   3f6c4:	orr	r2, r2, #2304	; 0x900
   3f6c8:	mov	r6, r3
   3f6cc:	bl	25218 <__assert_fail@plt+0x12c24>
   3f6d0:	subs	r5, r0, #0
   3f6d4:	blt	3f708 <__assert_fail@plt+0x2d114>
   3f6d8:	bl	124c8 <fdopendir@plt>
   3f6dc:	subs	r4, r0, #0
   3f6e0:	beq	3f6f0 <__assert_fail@plt+0x2d0fc>
   3f6e4:	str	r5, [r6]
   3f6e8:	mov	r0, r4
   3f6ec:	pop	{r4, r5, r6, pc}
   3f6f0:	bl	12348 <__errno_location@plt>
   3f6f4:	mov	r6, r0
   3f6f8:	mov	r0, r5
   3f6fc:	ldr	r5, [r6]
   3f700:	bl	125ac <close@plt>
   3f704:	b	3f6e4 <__assert_fail@plt+0x2d0f0>
   3f708:	mov	r4, #0
   3f70c:	b	3f6e8 <__assert_fail@plt+0x2d0f4>
   3f710:	push	{r4, r5, r6, lr}
   3f714:	mov	r5, r1
   3f718:	mov	r1, #0
   3f71c:	mov	r4, r2
   3f720:	bl	12444 <setlocale@plt>
   3f724:	subs	r6, r0, #0
   3f728:	beq	3f784 <__assert_fail@plt+0x2d190>
   3f72c:	bl	12300 <strlen@plt>
   3f730:	cmp	r4, r0
   3f734:	bhi	3f76c <__assert_fail@plt+0x2d178>
   3f738:	cmp	r4, #0
   3f73c:	bne	3f748 <__assert_fail@plt+0x2d154>
   3f740:	mov	r0, #34	; 0x22
   3f744:	pop	{r4, r5, r6, pc}
   3f748:	sub	r4, r4, #1
   3f74c:	mov	r1, r6
   3f750:	mov	r2, r4
   3f754:	mov	r0, r5
   3f758:	bl	12024 <memcpy@plt>
   3f75c:	mov	r3, #0
   3f760:	strb	r3, [r5, r4]
   3f764:	mov	r0, #34	; 0x22
   3f768:	pop	{r4, r5, r6, pc}
   3f76c:	add	r2, r0, #1
   3f770:	mov	r1, r6
   3f774:	mov	r0, r5
   3f778:	bl	12024 <memcpy@plt>
   3f77c:	mov	r0, #0
   3f780:	pop	{r4, r5, r6, pc}
   3f784:	cmp	r4, #0
   3f788:	beq	3f798 <__assert_fail@plt+0x2d1a4>
   3f78c:	strb	r6, [r5]
   3f790:	mov	r0, #22
   3f794:	pop	{r4, r5, r6, pc}
   3f798:	mov	r0, #22
   3f79c:	pop	{r4, r5, r6, pc}
   3f7a0:	mov	r1, #0
   3f7a4:	b	12444 <setlocale@plt>
   3f7a8:	subs	r2, r1, #1
   3f7ac:	bxeq	lr
   3f7b0:	bcc	3f988 <__assert_fail@plt+0x2d394>
   3f7b4:	cmp	r0, r1
   3f7b8:	bls	3f96c <__assert_fail@plt+0x2d378>
   3f7bc:	tst	r1, r2
   3f7c0:	beq	3f978 <__assert_fail@plt+0x2d384>
   3f7c4:	clz	r3, r0
   3f7c8:	clz	r2, r1
   3f7cc:	sub	r3, r2, r3
   3f7d0:	rsbs	r3, r3, #31
   3f7d4:	addne	r3, r3, r3, lsl #1
   3f7d8:	mov	r2, #0
   3f7dc:	addne	pc, pc, r3, lsl #2
   3f7e0:	nop			; (mov r0, r0)
   3f7e4:	cmp	r0, r1, lsl #31
   3f7e8:	adc	r2, r2, r2
   3f7ec:	subcs	r0, r0, r1, lsl #31
   3f7f0:	cmp	r0, r1, lsl #30
   3f7f4:	adc	r2, r2, r2
   3f7f8:	subcs	r0, r0, r1, lsl #30
   3f7fc:	cmp	r0, r1, lsl #29
   3f800:	adc	r2, r2, r2
   3f804:	subcs	r0, r0, r1, lsl #29
   3f808:	cmp	r0, r1, lsl #28
   3f80c:	adc	r2, r2, r2
   3f810:	subcs	r0, r0, r1, lsl #28
   3f814:	cmp	r0, r1, lsl #27
   3f818:	adc	r2, r2, r2
   3f81c:	subcs	r0, r0, r1, lsl #27
   3f820:	cmp	r0, r1, lsl #26
   3f824:	adc	r2, r2, r2
   3f828:	subcs	r0, r0, r1, lsl #26
   3f82c:	cmp	r0, r1, lsl #25
   3f830:	adc	r2, r2, r2
   3f834:	subcs	r0, r0, r1, lsl #25
   3f838:	cmp	r0, r1, lsl #24
   3f83c:	adc	r2, r2, r2
   3f840:	subcs	r0, r0, r1, lsl #24
   3f844:	cmp	r0, r1, lsl #23
   3f848:	adc	r2, r2, r2
   3f84c:	subcs	r0, r0, r1, lsl #23
   3f850:	cmp	r0, r1, lsl #22
   3f854:	adc	r2, r2, r2
   3f858:	subcs	r0, r0, r1, lsl #22
   3f85c:	cmp	r0, r1, lsl #21
   3f860:	adc	r2, r2, r2
   3f864:	subcs	r0, r0, r1, lsl #21
   3f868:	cmp	r0, r1, lsl #20
   3f86c:	adc	r2, r2, r2
   3f870:	subcs	r0, r0, r1, lsl #20
   3f874:	cmp	r0, r1, lsl #19
   3f878:	adc	r2, r2, r2
   3f87c:	subcs	r0, r0, r1, lsl #19
   3f880:	cmp	r0, r1, lsl #18
   3f884:	adc	r2, r2, r2
   3f888:	subcs	r0, r0, r1, lsl #18
   3f88c:	cmp	r0, r1, lsl #17
   3f890:	adc	r2, r2, r2
   3f894:	subcs	r0, r0, r1, lsl #17
   3f898:	cmp	r0, r1, lsl #16
   3f89c:	adc	r2, r2, r2
   3f8a0:	subcs	r0, r0, r1, lsl #16
   3f8a4:	cmp	r0, r1, lsl #15
   3f8a8:	adc	r2, r2, r2
   3f8ac:	subcs	r0, r0, r1, lsl #15
   3f8b0:	cmp	r0, r1, lsl #14
   3f8b4:	adc	r2, r2, r2
   3f8b8:	subcs	r0, r0, r1, lsl #14
   3f8bc:	cmp	r0, r1, lsl #13
   3f8c0:	adc	r2, r2, r2
   3f8c4:	subcs	r0, r0, r1, lsl #13
   3f8c8:	cmp	r0, r1, lsl #12
   3f8cc:	adc	r2, r2, r2
   3f8d0:	subcs	r0, r0, r1, lsl #12
   3f8d4:	cmp	r0, r1, lsl #11
   3f8d8:	adc	r2, r2, r2
   3f8dc:	subcs	r0, r0, r1, lsl #11
   3f8e0:	cmp	r0, r1, lsl #10
   3f8e4:	adc	r2, r2, r2
   3f8e8:	subcs	r0, r0, r1, lsl #10
   3f8ec:	cmp	r0, r1, lsl #9
   3f8f0:	adc	r2, r2, r2
   3f8f4:	subcs	r0, r0, r1, lsl #9
   3f8f8:	cmp	r0, r1, lsl #8
   3f8fc:	adc	r2, r2, r2
   3f900:	subcs	r0, r0, r1, lsl #8
   3f904:	cmp	r0, r1, lsl #7
   3f908:	adc	r2, r2, r2
   3f90c:	subcs	r0, r0, r1, lsl #7
   3f910:	cmp	r0, r1, lsl #6
   3f914:	adc	r2, r2, r2
   3f918:	subcs	r0, r0, r1, lsl #6
   3f91c:	cmp	r0, r1, lsl #5
   3f920:	adc	r2, r2, r2
   3f924:	subcs	r0, r0, r1, lsl #5
   3f928:	cmp	r0, r1, lsl #4
   3f92c:	adc	r2, r2, r2
   3f930:	subcs	r0, r0, r1, lsl #4
   3f934:	cmp	r0, r1, lsl #3
   3f938:	adc	r2, r2, r2
   3f93c:	subcs	r0, r0, r1, lsl #3
   3f940:	cmp	r0, r1, lsl #2
   3f944:	adc	r2, r2, r2
   3f948:	subcs	r0, r0, r1, lsl #2
   3f94c:	cmp	r0, r1, lsl #1
   3f950:	adc	r2, r2, r2
   3f954:	subcs	r0, r0, r1, lsl #1
   3f958:	cmp	r0, r1
   3f95c:	adc	r2, r2, r2
   3f960:	subcs	r0, r0, r1
   3f964:	mov	r0, r2
   3f968:	bx	lr
   3f96c:	moveq	r0, #1
   3f970:	movne	r0, #0
   3f974:	bx	lr
   3f978:	clz	r2, r1
   3f97c:	rsb	r2, r2, #31
   3f980:	lsr	r0, r0, r2
   3f984:	bx	lr
   3f988:	cmp	r0, #0
   3f98c:	mvnne	r0, #0
   3f990:	b	400bc <__assert_fail@plt+0x2dac8>
   3f994:	cmp	r1, #0
   3f998:	beq	3f988 <__assert_fail@plt+0x2d394>
   3f99c:	push	{r0, r1, lr}
   3f9a0:	bl	3f7a8 <__assert_fail@plt+0x2d1b4>
   3f9a4:	pop	{r1, r2, lr}
   3f9a8:	mul	r3, r2, r0
   3f9ac:	sub	r1, r1, r3
   3f9b0:	bx	lr
   3f9b4:	cmp	r1, #0
   3f9b8:	beq	3fbc4 <__assert_fail@plt+0x2d5d0>
   3f9bc:	eor	ip, r0, r1
   3f9c0:	rsbmi	r1, r1, #0
   3f9c4:	subs	r2, r1, #1
   3f9c8:	beq	3fb90 <__assert_fail@plt+0x2d59c>
   3f9cc:	movs	r3, r0
   3f9d0:	rsbmi	r3, r0, #0
   3f9d4:	cmp	r3, r1
   3f9d8:	bls	3fb9c <__assert_fail@plt+0x2d5a8>
   3f9dc:	tst	r1, r2
   3f9e0:	beq	3fbac <__assert_fail@plt+0x2d5b8>
   3f9e4:	clz	r2, r3
   3f9e8:	clz	r0, r1
   3f9ec:	sub	r2, r0, r2
   3f9f0:	rsbs	r2, r2, #31
   3f9f4:	addne	r2, r2, r2, lsl #1
   3f9f8:	mov	r0, #0
   3f9fc:	addne	pc, pc, r2, lsl #2
   3fa00:	nop			; (mov r0, r0)
   3fa04:	cmp	r3, r1, lsl #31
   3fa08:	adc	r0, r0, r0
   3fa0c:	subcs	r3, r3, r1, lsl #31
   3fa10:	cmp	r3, r1, lsl #30
   3fa14:	adc	r0, r0, r0
   3fa18:	subcs	r3, r3, r1, lsl #30
   3fa1c:	cmp	r3, r1, lsl #29
   3fa20:	adc	r0, r0, r0
   3fa24:	subcs	r3, r3, r1, lsl #29
   3fa28:	cmp	r3, r1, lsl #28
   3fa2c:	adc	r0, r0, r0
   3fa30:	subcs	r3, r3, r1, lsl #28
   3fa34:	cmp	r3, r1, lsl #27
   3fa38:	adc	r0, r0, r0
   3fa3c:	subcs	r3, r3, r1, lsl #27
   3fa40:	cmp	r3, r1, lsl #26
   3fa44:	adc	r0, r0, r0
   3fa48:	subcs	r3, r3, r1, lsl #26
   3fa4c:	cmp	r3, r1, lsl #25
   3fa50:	adc	r0, r0, r0
   3fa54:	subcs	r3, r3, r1, lsl #25
   3fa58:	cmp	r3, r1, lsl #24
   3fa5c:	adc	r0, r0, r0
   3fa60:	subcs	r3, r3, r1, lsl #24
   3fa64:	cmp	r3, r1, lsl #23
   3fa68:	adc	r0, r0, r0
   3fa6c:	subcs	r3, r3, r1, lsl #23
   3fa70:	cmp	r3, r1, lsl #22
   3fa74:	adc	r0, r0, r0
   3fa78:	subcs	r3, r3, r1, lsl #22
   3fa7c:	cmp	r3, r1, lsl #21
   3fa80:	adc	r0, r0, r0
   3fa84:	subcs	r3, r3, r1, lsl #21
   3fa88:	cmp	r3, r1, lsl #20
   3fa8c:	adc	r0, r0, r0
   3fa90:	subcs	r3, r3, r1, lsl #20
   3fa94:	cmp	r3, r1, lsl #19
   3fa98:	adc	r0, r0, r0
   3fa9c:	subcs	r3, r3, r1, lsl #19
   3faa0:	cmp	r3, r1, lsl #18
   3faa4:	adc	r0, r0, r0
   3faa8:	subcs	r3, r3, r1, lsl #18
   3faac:	cmp	r3, r1, lsl #17
   3fab0:	adc	r0, r0, r0
   3fab4:	subcs	r3, r3, r1, lsl #17
   3fab8:	cmp	r3, r1, lsl #16
   3fabc:	adc	r0, r0, r0
   3fac0:	subcs	r3, r3, r1, lsl #16
   3fac4:	cmp	r3, r1, lsl #15
   3fac8:	adc	r0, r0, r0
   3facc:	subcs	r3, r3, r1, lsl #15
   3fad0:	cmp	r3, r1, lsl #14
   3fad4:	adc	r0, r0, r0
   3fad8:	subcs	r3, r3, r1, lsl #14
   3fadc:	cmp	r3, r1, lsl #13
   3fae0:	adc	r0, r0, r0
   3fae4:	subcs	r3, r3, r1, lsl #13
   3fae8:	cmp	r3, r1, lsl #12
   3faec:	adc	r0, r0, r0
   3faf0:	subcs	r3, r3, r1, lsl #12
   3faf4:	cmp	r3, r1, lsl #11
   3faf8:	adc	r0, r0, r0
   3fafc:	subcs	r3, r3, r1, lsl #11
   3fb00:	cmp	r3, r1, lsl #10
   3fb04:	adc	r0, r0, r0
   3fb08:	subcs	r3, r3, r1, lsl #10
   3fb0c:	cmp	r3, r1, lsl #9
   3fb10:	adc	r0, r0, r0
   3fb14:	subcs	r3, r3, r1, lsl #9
   3fb18:	cmp	r3, r1, lsl #8
   3fb1c:	adc	r0, r0, r0
   3fb20:	subcs	r3, r3, r1, lsl #8
   3fb24:	cmp	r3, r1, lsl #7
   3fb28:	adc	r0, r0, r0
   3fb2c:	subcs	r3, r3, r1, lsl #7
   3fb30:	cmp	r3, r1, lsl #6
   3fb34:	adc	r0, r0, r0
   3fb38:	subcs	r3, r3, r1, lsl #6
   3fb3c:	cmp	r3, r1, lsl #5
   3fb40:	adc	r0, r0, r0
   3fb44:	subcs	r3, r3, r1, lsl #5
   3fb48:	cmp	r3, r1, lsl #4
   3fb4c:	adc	r0, r0, r0
   3fb50:	subcs	r3, r3, r1, lsl #4
   3fb54:	cmp	r3, r1, lsl #3
   3fb58:	adc	r0, r0, r0
   3fb5c:	subcs	r3, r3, r1, lsl #3
   3fb60:	cmp	r3, r1, lsl #2
   3fb64:	adc	r0, r0, r0
   3fb68:	subcs	r3, r3, r1, lsl #2
   3fb6c:	cmp	r3, r1, lsl #1
   3fb70:	adc	r0, r0, r0
   3fb74:	subcs	r3, r3, r1, lsl #1
   3fb78:	cmp	r3, r1
   3fb7c:	adc	r0, r0, r0
   3fb80:	subcs	r3, r3, r1
   3fb84:	cmp	ip, #0
   3fb88:	rsbmi	r0, r0, #0
   3fb8c:	bx	lr
   3fb90:	teq	ip, r0
   3fb94:	rsbmi	r0, r0, #0
   3fb98:	bx	lr
   3fb9c:	movcc	r0, #0
   3fba0:	asreq	r0, ip, #31
   3fba4:	orreq	r0, r0, #1
   3fba8:	bx	lr
   3fbac:	clz	r2, r1
   3fbb0:	rsb	r2, r2, #31
   3fbb4:	cmp	ip, #0
   3fbb8:	lsr	r0, r3, r2
   3fbbc:	rsbmi	r0, r0, #0
   3fbc0:	bx	lr
   3fbc4:	cmp	r0, #0
   3fbc8:	mvngt	r0, #-2147483648	; 0x80000000
   3fbcc:	movlt	r0, #-2147483648	; 0x80000000
   3fbd0:	b	400bc <__assert_fail@plt+0x2dac8>
   3fbd4:	cmp	r1, #0
   3fbd8:	beq	3fbc4 <__assert_fail@plt+0x2d5d0>
   3fbdc:	push	{r0, r1, lr}
   3fbe0:	bl	3f9bc <__assert_fail@plt+0x2d3c8>
   3fbe4:	pop	{r1, r2, lr}
   3fbe8:	mul	r3, r2, r0
   3fbec:	sub	r1, r1, r3
   3fbf0:	bx	lr
   3fbf4:	eor	r1, r1, #-2147483648	; 0x80000000
   3fbf8:	b	3fc00 <__assert_fail@plt+0x2d60c>
   3fbfc:	eor	r3, r3, #-2147483648	; 0x80000000
   3fc00:	push	{r4, r5, lr}
   3fc04:	lsl	r4, r1, #1
   3fc08:	lsl	r5, r3, #1
   3fc0c:	teq	r4, r5
   3fc10:	teqeq	r0, r2
   3fc14:	orrsne	ip, r4, r0
   3fc18:	orrsne	ip, r5, r2
   3fc1c:	mvnsne	ip, r4, asr #21
   3fc20:	mvnsne	ip, r5, asr #21
   3fc24:	beq	3fe10 <__assert_fail@plt+0x2d81c>
   3fc28:	lsr	r4, r4, #21
   3fc2c:	rsbs	r5, r4, r5, lsr #21
   3fc30:	rsblt	r5, r5, #0
   3fc34:	ble	3fc54 <__assert_fail@plt+0x2d660>
   3fc38:	add	r4, r4, r5
   3fc3c:	eor	r2, r0, r2
   3fc40:	eor	r3, r1, r3
   3fc44:	eor	r0, r2, r0
   3fc48:	eor	r1, r3, r1
   3fc4c:	eor	r2, r0, r2
   3fc50:	eor	r3, r1, r3
   3fc54:	cmp	r5, #54	; 0x36
   3fc58:	pophi	{r4, r5, pc}
   3fc5c:	tst	r1, #-2147483648	; 0x80000000
   3fc60:	lsl	r1, r1, #12
   3fc64:	mov	ip, #1048576	; 0x100000
   3fc68:	orr	r1, ip, r1, lsr #12
   3fc6c:	beq	3fc78 <__assert_fail@plt+0x2d684>
   3fc70:	rsbs	r0, r0, #0
   3fc74:	rsc	r1, r1, #0
   3fc78:	tst	r3, #-2147483648	; 0x80000000
   3fc7c:	lsl	r3, r3, #12
   3fc80:	orr	r3, ip, r3, lsr #12
   3fc84:	beq	3fc90 <__assert_fail@plt+0x2d69c>
   3fc88:	rsbs	r2, r2, #0
   3fc8c:	rsc	r3, r3, #0
   3fc90:	teq	r4, r5
   3fc94:	beq	3fdf8 <__assert_fail@plt+0x2d804>
   3fc98:	sub	r4, r4, #1
   3fc9c:	rsbs	lr, r5, #32
   3fca0:	blt	3fcbc <__assert_fail@plt+0x2d6c8>
   3fca4:	lsl	ip, r2, lr
   3fca8:	adds	r0, r0, r2, lsr r5
   3fcac:	adc	r1, r1, #0
   3fcb0:	adds	r0, r0, r3, lsl lr
   3fcb4:	adcs	r1, r1, r3, asr r5
   3fcb8:	b	3fcd8 <__assert_fail@plt+0x2d6e4>
   3fcbc:	sub	r5, r5, #32
   3fcc0:	add	lr, lr, #32
   3fcc4:	cmp	r2, #1
   3fcc8:	lsl	ip, r3, lr
   3fccc:	orrcs	ip, ip, #2
   3fcd0:	adds	r0, r0, r3, asr r5
   3fcd4:	adcs	r1, r1, r3, asr #31
   3fcd8:	and	r5, r1, #-2147483648	; 0x80000000
   3fcdc:	bpl	3fcec <__assert_fail@plt+0x2d6f8>
   3fce0:	rsbs	ip, ip, #0
   3fce4:	rscs	r0, r0, #0
   3fce8:	rsc	r1, r1, #0
   3fcec:	cmp	r1, #1048576	; 0x100000
   3fcf0:	bcc	3fd30 <__assert_fail@plt+0x2d73c>
   3fcf4:	cmp	r1, #2097152	; 0x200000
   3fcf8:	bcc	3fd18 <__assert_fail@plt+0x2d724>
   3fcfc:	lsrs	r1, r1, #1
   3fd00:	rrxs	r0, r0
   3fd04:	rrx	ip, ip
   3fd08:	add	r4, r4, #1
   3fd0c:	lsl	r2, r4, #21
   3fd10:	cmn	r2, #4194304	; 0x400000
   3fd14:	bcs	3fe70 <__assert_fail@plt+0x2d87c>
   3fd18:	cmp	ip, #-2147483648	; 0x80000000
   3fd1c:	lsrseq	ip, r0, #1
   3fd20:	adcs	r0, r0, #0
   3fd24:	adc	r1, r1, r4, lsl #20
   3fd28:	orr	r1, r1, r5
   3fd2c:	pop	{r4, r5, pc}
   3fd30:	lsls	ip, ip, #1
   3fd34:	adcs	r0, r0, r0
   3fd38:	adc	r1, r1, r1
   3fd3c:	tst	r1, #1048576	; 0x100000
   3fd40:	sub	r4, r4, #1
   3fd44:	bne	3fd18 <__assert_fail@plt+0x2d724>
   3fd48:	teq	r1, #0
   3fd4c:	moveq	r1, r0
   3fd50:	moveq	r0, #0
   3fd54:	clz	r3, r1
   3fd58:	addeq	r3, r3, #32
   3fd5c:	sub	r3, r3, #11
   3fd60:	subs	r2, r3, #32
   3fd64:	bge	3fd88 <__assert_fail@plt+0x2d794>
   3fd68:	adds	r2, r2, #12
   3fd6c:	ble	3fd84 <__assert_fail@plt+0x2d790>
   3fd70:	add	ip, r2, #20
   3fd74:	rsb	r2, r2, #12
   3fd78:	lsl	r0, r1, ip
   3fd7c:	lsr	r1, r1, r2
   3fd80:	b	3fd98 <__assert_fail@plt+0x2d7a4>
   3fd84:	add	r2, r2, #20
   3fd88:	rsble	ip, r2, #32
   3fd8c:	lsl	r1, r1, r2
   3fd90:	orrle	r1, r1, r0, lsr ip
   3fd94:	lslle	r0, r0, r2
   3fd98:	subs	r4, r4, r3
   3fd9c:	addge	r1, r1, r4, lsl #20
   3fda0:	orrge	r1, r1, r5
   3fda4:	popge	{r4, r5, pc}
   3fda8:	mvn	r4, r4
   3fdac:	subs	r4, r4, #31
   3fdb0:	bge	3fdec <__assert_fail@plt+0x2d7f8>
   3fdb4:	adds	r4, r4, #12
   3fdb8:	bgt	3fdd4 <__assert_fail@plt+0x2d7e0>
   3fdbc:	add	r4, r4, #20
   3fdc0:	rsb	r2, r4, #32
   3fdc4:	lsr	r0, r0, r4
   3fdc8:	orr	r0, r0, r1, lsl r2
   3fdcc:	orr	r1, r5, r1, lsr r4
   3fdd0:	pop	{r4, r5, pc}
   3fdd4:	rsb	r4, r4, #12
   3fdd8:	rsb	r2, r4, #32
   3fddc:	lsr	r0, r0, r2
   3fde0:	orr	r0, r0, r1, lsl r4
   3fde4:	mov	r1, r5
   3fde8:	pop	{r4, r5, pc}
   3fdec:	lsr	r0, r1, r4
   3fdf0:	mov	r1, r5
   3fdf4:	pop	{r4, r5, pc}
   3fdf8:	teq	r4, #0
   3fdfc:	eor	r3, r3, #1048576	; 0x100000
   3fe00:	eoreq	r1, r1, #1048576	; 0x100000
   3fe04:	addeq	r4, r4, #1
   3fe08:	subne	r5, r5, #1
   3fe0c:	b	3fc98 <__assert_fail@plt+0x2d6a4>
   3fe10:	mvns	ip, r4, asr #21
   3fe14:	mvnsne	ip, r5, asr #21
   3fe18:	beq	3fe80 <__assert_fail@plt+0x2d88c>
   3fe1c:	teq	r4, r5
   3fe20:	teqeq	r0, r2
   3fe24:	beq	3fe38 <__assert_fail@plt+0x2d844>
   3fe28:	orrs	ip, r4, r0
   3fe2c:	moveq	r1, r3
   3fe30:	moveq	r0, r2
   3fe34:	pop	{r4, r5, pc}
   3fe38:	teq	r1, r3
   3fe3c:	movne	r1, #0
   3fe40:	movne	r0, #0
   3fe44:	popne	{r4, r5, pc}
   3fe48:	lsrs	ip, r4, #21
   3fe4c:	bne	3fe60 <__assert_fail@plt+0x2d86c>
   3fe50:	lsls	r0, r0, #1
   3fe54:	adcs	r1, r1, r1
   3fe58:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3fe5c:	pop	{r4, r5, pc}
   3fe60:	adds	r4, r4, #4194304	; 0x400000
   3fe64:	addcc	r1, r1, #1048576	; 0x100000
   3fe68:	popcc	{r4, r5, pc}
   3fe6c:	and	r5, r1, #-2147483648	; 0x80000000
   3fe70:	orr	r1, r5, #2130706432	; 0x7f000000
   3fe74:	orr	r1, r1, #15728640	; 0xf00000
   3fe78:	mov	r0, #0
   3fe7c:	pop	{r4, r5, pc}
   3fe80:	mvns	ip, r4, asr #21
   3fe84:	movne	r1, r3
   3fe88:	movne	r0, r2
   3fe8c:	mvnseq	ip, r5, asr #21
   3fe90:	movne	r3, r1
   3fe94:	movne	r2, r0
   3fe98:	orrs	r4, r0, r1, lsl #12
   3fe9c:	orrseq	r5, r2, r3, lsl #12
   3fea0:	teqeq	r1, r3
   3fea4:	orrne	r1, r1, #524288	; 0x80000
   3fea8:	pop	{r4, r5, pc}
   3feac:	teq	r0, #0
   3feb0:	moveq	r1, #0
   3feb4:	bxeq	lr
   3feb8:	push	{r4, r5, lr}
   3febc:	mov	r4, #1024	; 0x400
   3fec0:	add	r4, r4, #50	; 0x32
   3fec4:	mov	r5, #0
   3fec8:	mov	r1, #0
   3fecc:	b	3fd48 <__assert_fail@plt+0x2d754>
   3fed0:	teq	r0, #0
   3fed4:	moveq	r1, #0
   3fed8:	bxeq	lr
   3fedc:	push	{r4, r5, lr}
   3fee0:	mov	r4, #1024	; 0x400
   3fee4:	add	r4, r4, #50	; 0x32
   3fee8:	ands	r5, r0, #-2147483648	; 0x80000000
   3feec:	rsbmi	r0, r0, #0
   3fef0:	mov	r1, #0
   3fef4:	b	3fd48 <__assert_fail@plt+0x2d754>
   3fef8:	lsls	r2, r0, #1
   3fefc:	asr	r1, r2, #3
   3ff00:	rrx	r1, r1
   3ff04:	lsl	r0, r2, #28
   3ff08:	andsne	r3, r2, #-16777216	; 0xff000000
   3ff0c:	teqne	r3, #-16777216	; 0xff000000
   3ff10:	eorne	r1, r1, #939524096	; 0x38000000
   3ff14:	bxne	lr
   3ff18:	teq	r2, #0
   3ff1c:	teqne	r3, #-16777216	; 0xff000000
   3ff20:	bxeq	lr
   3ff24:	push	{r4, r5, lr}
   3ff28:	mov	r4, #896	; 0x380
   3ff2c:	and	r5, r1, #-2147483648	; 0x80000000
   3ff30:	bic	r1, r1, #-2147483648	; 0x80000000
   3ff34:	b	3fd48 <__assert_fail@plt+0x2d754>
   3ff38:	orrs	r2, r0, r1
   3ff3c:	bxeq	lr
   3ff40:	push	{r4, r5, lr}
   3ff44:	mov	r5, #0
   3ff48:	b	3ff68 <__assert_fail@plt+0x2d974>
   3ff4c:	orrs	r2, r0, r1
   3ff50:	bxeq	lr
   3ff54:	push	{r4, r5, lr}
   3ff58:	ands	r5, r1, #-2147483648	; 0x80000000
   3ff5c:	bpl	3ff68 <__assert_fail@plt+0x2d974>
   3ff60:	rsbs	r0, r0, #0
   3ff64:	rsc	r1, r1, #0
   3ff68:	mov	r4, #1024	; 0x400
   3ff6c:	add	r4, r4, #50	; 0x32
   3ff70:	lsrs	ip, r1, #22
   3ff74:	beq	3fcec <__assert_fail@plt+0x2d6f8>
   3ff78:	mov	r2, #3
   3ff7c:	lsrs	ip, ip, #3
   3ff80:	addne	r2, r2, #3
   3ff84:	lsrs	ip, ip, #3
   3ff88:	addne	r2, r2, #3
   3ff8c:	add	r2, r2, ip, lsr #3
   3ff90:	rsb	r3, r2, #32
   3ff94:	lsl	ip, r0, r3
   3ff98:	lsr	r0, r0, r2
   3ff9c:	orr	r0, r0, r1, lsl r3
   3ffa0:	lsr	r1, r1, r2
   3ffa4:	add	r4, r4, r2
   3ffa8:	b	3fcec <__assert_fail@plt+0x2d6f8>
   3ffac:	cmp	r3, #0
   3ffb0:	cmpeq	r2, #0
   3ffb4:	bne	3ffd8 <__assert_fail@plt+0x2d9e4>
   3ffb8:	cmp	r1, #0
   3ffbc:	movlt	r1, #-2147483648	; 0x80000000
   3ffc0:	movlt	r0, #0
   3ffc4:	blt	3ffd4 <__assert_fail@plt+0x2d9e0>
   3ffc8:	cmpeq	r0, #0
   3ffcc:	mvnne	r1, #-2147483648	; 0x80000000
   3ffd0:	mvnne	r0, #0
   3ffd4:	b	400bc <__assert_fail@plt+0x2dac8>
   3ffd8:	sub	sp, sp, #8
   3ffdc:	push	{sp, lr}
   3ffe0:	cmp	r1, #0
   3ffe4:	blt	40004 <__assert_fail@plt+0x2da10>
   3ffe8:	cmp	r3, #0
   3ffec:	blt	40038 <__assert_fail@plt+0x2da44>
   3fff0:	bl	40118 <__assert_fail@plt+0x2db24>
   3fff4:	ldr	lr, [sp, #4]
   3fff8:	add	sp, sp, #8
   3fffc:	pop	{r2, r3}
   40000:	bx	lr
   40004:	rsbs	r0, r0, #0
   40008:	sbc	r1, r1, r1, lsl #1
   4000c:	cmp	r3, #0
   40010:	blt	4005c <__assert_fail@plt+0x2da68>
   40014:	bl	40118 <__assert_fail@plt+0x2db24>
   40018:	ldr	lr, [sp, #4]
   4001c:	add	sp, sp, #8
   40020:	pop	{r2, r3}
   40024:	rsbs	r0, r0, #0
   40028:	sbc	r1, r1, r1, lsl #1
   4002c:	rsbs	r2, r2, #0
   40030:	sbc	r3, r3, r3, lsl #1
   40034:	bx	lr
   40038:	rsbs	r2, r2, #0
   4003c:	sbc	r3, r3, r3, lsl #1
   40040:	bl	40118 <__assert_fail@plt+0x2db24>
   40044:	ldr	lr, [sp, #4]
   40048:	add	sp, sp, #8
   4004c:	pop	{r2, r3}
   40050:	rsbs	r0, r0, #0
   40054:	sbc	r1, r1, r1, lsl #1
   40058:	bx	lr
   4005c:	rsbs	r2, r2, #0
   40060:	sbc	r3, r3, r3, lsl #1
   40064:	bl	40118 <__assert_fail@plt+0x2db24>
   40068:	ldr	lr, [sp, #4]
   4006c:	add	sp, sp, #8
   40070:	pop	{r2, r3}
   40074:	rsbs	r2, r2, #0
   40078:	sbc	r3, r3, r3, lsl #1
   4007c:	bx	lr
   40080:	cmp	r3, #0
   40084:	cmpeq	r2, #0
   40088:	bne	400a0 <__assert_fail@plt+0x2daac>
   4008c:	cmp	r1, #0
   40090:	cmpeq	r0, #0
   40094:	mvnne	r1, #0
   40098:	mvnne	r0, #0
   4009c:	b	400bc <__assert_fail@plt+0x2dac8>
   400a0:	sub	sp, sp, #8
   400a4:	push	{sp, lr}
   400a8:	bl	40118 <__assert_fail@plt+0x2db24>
   400ac:	ldr	lr, [sp, #4]
   400b0:	add	sp, sp, #8
   400b4:	pop	{r2, r3}
   400b8:	bx	lr
   400bc:	push	{r1, lr}
   400c0:	mov	r0, #8
   400c4:	bl	11eec <raise@plt>
   400c8:	pop	{r1, pc}
   400cc:	andeq	r0, r0, r0
   400d0:	vmov	d7, r0, r1
   400d4:	vldr	d6, [pc, #44]	; 40108 <__assert_fail@plt+0x2db14>
   400d8:	vldr	d5, [pc, #48]	; 40110 <__assert_fail@plt+0x2db1c>
   400dc:	mov	r0, #0
   400e0:	vmul.f64	d6, d7, d6
   400e4:	vcvt.u32.f64	s12, d6
   400e8:	vcvt.f64.u32	d4, s12
   400ec:	vmov	r1, s12
   400f0:	vmls.f64	d7, d4, d5
   400f4:	vcvt.u32.f64	s14, d7
   400f8:	vmov	r3, s14
   400fc:	orr	r0, r0, r3
   40100:	bx	lr
   40104:	nop			; (mov r0, r0)
   40108:	andeq	r0, r0, r0
   4010c:	ldclcc	0, cr0, [r0]
   40110:	andeq	r0, r0, r0
   40114:	mvnsmi	r0, r0
   40118:	cmp	r1, r3
   4011c:	push	{r4, r5, r6, r7, r8, r9, lr}
   40120:	cmpeq	r0, r2
   40124:	mov	r4, r0
   40128:	mov	r5, r1
   4012c:	ldr	r9, [sp, #28]
   40130:	movcc	r0, #0
   40134:	movcc	r1, #0
   40138:	bcc	40230 <__assert_fail@plt+0x2dc3c>
   4013c:	cmp	r3, #0
   40140:	clzeq	ip, r2
   40144:	clzne	ip, r3
   40148:	addeq	ip, ip, #32
   4014c:	cmp	r5, #0
   40150:	clzeq	r1, r4
   40154:	addeq	r1, r1, #32
   40158:	clzne	r1, r5
   4015c:	sub	ip, ip, r1
   40160:	sub	lr, ip, #32
   40164:	lsl	r7, r3, ip
   40168:	rsb	r8, ip, #32
   4016c:	orr	r7, r7, r2, lsl lr
   40170:	orr	r7, r7, r2, lsr r8
   40174:	lsl	r6, r2, ip
   40178:	cmp	r5, r7
   4017c:	cmpeq	r4, r6
   40180:	movcc	r0, #0
   40184:	movcc	r1, #0
   40188:	bcc	401a4 <__assert_fail@plt+0x2dbb0>
   4018c:	mov	r3, #1
   40190:	subs	r4, r4, r6
   40194:	lsl	r1, r3, lr
   40198:	lsl	r0, r3, ip
   4019c:	orr	r1, r1, r3, lsr r8
   401a0:	sbc	r5, r5, r7
   401a4:	cmp	ip, #0
   401a8:	beq	40230 <__assert_fail@plt+0x2dc3c>
   401ac:	lsrs	r3, r7, #1
   401b0:	rrx	r2, r6
   401b4:	mov	r6, ip
   401b8:	b	401dc <__assert_fail@plt+0x2dbe8>
   401bc:	subs	r4, r4, r2
   401c0:	sbc	r5, r5, r3
   401c4:	adds	r4, r4, r4
   401c8:	adc	r5, r5, r5
   401cc:	adds	r4, r4, #1
   401d0:	adc	r5, r5, #0
   401d4:	subs	r6, r6, #1
   401d8:	beq	401f8 <__assert_fail@plt+0x2dc04>
   401dc:	cmp	r5, r3
   401e0:	cmpeq	r4, r2
   401e4:	bcs	401bc <__assert_fail@plt+0x2dbc8>
   401e8:	adds	r4, r4, r4
   401ec:	adc	r5, r5, r5
   401f0:	subs	r6, r6, #1
   401f4:	bne	401dc <__assert_fail@plt+0x2dbe8>
   401f8:	lsr	r6, r4, ip
   401fc:	lsr	r7, r5, ip
   40200:	orr	r6, r6, r5, lsl r8
   40204:	adds	r2, r0, r4
   40208:	orr	r6, r6, r5, lsr lr
   4020c:	adc	r3, r1, r5
   40210:	lsl	r1, r7, ip
   40214:	orr	r1, r1, r6, lsl lr
   40218:	lsl	r0, r6, ip
   4021c:	orr	r1, r1, r6, lsr r8
   40220:	subs	r0, r2, r0
   40224:	mov	r4, r6
   40228:	mov	r5, r7
   4022c:	sbc	r1, r3, r1
   40230:	cmp	r9, #0
   40234:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   40238:	strd	r4, [r9]
   4023c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   40240:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   40244:	mov	r7, r0
   40248:	ldr	r6, [pc, #72]	; 40298 <__assert_fail@plt+0x2dca4>
   4024c:	ldr	r5, [pc, #72]	; 4029c <__assert_fail@plt+0x2dca8>
   40250:	add	r6, pc, r6
   40254:	add	r5, pc, r5
   40258:	sub	r6, r6, r5
   4025c:	mov	r8, r1
   40260:	mov	r9, r2
   40264:	bl	11e84 <pthread_mutex_unlock@plt-0x20>
   40268:	asrs	r6, r6, #2
   4026c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   40270:	mov	r4, #0
   40274:	add	r4, r4, #1
   40278:	ldr	r3, [r5], #4
   4027c:	mov	r2, r9
   40280:	mov	r1, r8
   40284:	mov	r0, r7
   40288:	blx	r3
   4028c:	cmp	r6, r4
   40290:	bne	40274 <__assert_fail@plt+0x2dc80>
   40294:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   40298:	andeq	r6, r1, r8, lsr #25
   4029c:	andeq	r6, r1, r0, lsr #25
   402a0:	bx	lr
   402a4:	ldr	r3, [pc, #12]	; 402b8 <__assert_fail@plt+0x2dcc4>
   402a8:	mov	r1, #0
   402ac:	add	r3, pc, r3
   402b0:	ldr	r2, [r3]
   402b4:	b	1236c <__cxa_atexit@plt>
   402b8:	ldrdeq	r6, [r1], -r4

Disassembly of section .fini:

000402bc <.fini>:
   402bc:	push	{r3, lr}
   402c0:	pop	{r3, pc}
