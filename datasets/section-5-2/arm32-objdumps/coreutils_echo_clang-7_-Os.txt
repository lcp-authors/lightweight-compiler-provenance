
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	10e90 <__assert_fail@plt+0x48>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r4, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #20, 20	; 0x14000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #20, 20	; 0x14000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <strcmp@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #20, 20	; 0x14000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <fflush@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #20, 20	; 0x14000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <free@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #20, 20	; 0x14000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <_exit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <memcpy@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <mbsinit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <memcmp@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <dcgettext@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <realloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <textdomain@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <iswprint@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <lseek64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <__ctype_get_mb_cur_max@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <__fpending@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <ferror_unlocked@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <mbrtowc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <error@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <getenv@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <malloc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <__libc_start_main@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <__freading@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <__gmon_start__@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <__ctype_b_loc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <exit@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <strlen@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__errno_location@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #20, 20	; 0x14000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__cxa_atexit@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #20, 20	; 0x14000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <memset@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #20, 20	; 0x14000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <__printf_chk@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #20, 20	; 0x14000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <fileno@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #20, 20	; 0x14000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <__fprintf_chk@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #20, 20	; 0x14000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <fclose@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #20, 20	; 0x14000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <fseeko64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #20, 20	; 0x14000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <setlocale@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #20, 20	; 0x14000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <strrchr@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #20, 20	; 0x14000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <nl_langinfo@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #20, 20	; 0x14000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <bindtextdomain@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #20, 20	; 0x14000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <fputs@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #20, 20	; 0x14000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <strncmp@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #20, 20	; 0x14000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <abort@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #20, 20	; 0x14000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <putchar_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #20, 20	; 0x14000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <__assert_fail@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #20, 20	; 0x14000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

Disassembly of section .text:

00010e54 <.text>:
   10e54:	mov	fp, #0
   10e58:	mov	lr, #0
   10e5c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e60:	mov	r2, sp
   10e64:	push	{r2}		; (str r2, [sp, #-4]!)
   10e68:	push	{r0}		; (str r0, [sp, #-4]!)
   10e6c:	ldr	ip, [pc, #16]	; 10e84 <__assert_fail@plt+0x3c>
   10e70:	push	{ip}		; (str ip, [sp, #-4]!)
   10e74:	ldr	r0, [pc, #12]	; 10e88 <__assert_fail@plt+0x40>
   10e78:	ldr	r3, [pc, #12]	; 10e8c <__assert_fail@plt+0x44>
   10e7c:	bl	10d40 <__libc_start_main@plt>
   10e80:	bl	10e30 <abort@plt>
   10e84:	andeq	r4, r1, r4, lsl r2
   10e88:	andeq	r1, r1, r8, lsl r2
   10e8c:			; <UNDEFINED> instruction: 0x000141b4
   10e90:	ldr	r3, [pc, #20]	; 10eac <__assert_fail@plt+0x64>
   10e94:	ldr	r2, [pc, #20]	; 10eb0 <__assert_fail@plt+0x68>
   10e98:	add	r3, pc, r3
   10e9c:	ldr	r2, [r3, r2]
   10ea0:	cmp	r2, #0
   10ea4:	bxeq	lr
   10ea8:	b	10d58 <__gmon_start__@plt>
   10eac:	andeq	r4, r1, r0, ror #2
   10eb0:	strheq	r0, [r0], -ip
   10eb4:	ldr	r0, [pc, #24]	; 10ed4 <__assert_fail@plt+0x8c>
   10eb8:	ldr	r3, [pc, #24]	; 10ed8 <__assert_fail@plt+0x90>
   10ebc:	cmp	r3, r0
   10ec0:	bxeq	lr
   10ec4:	ldr	r3, [pc, #16]	; 10edc <__assert_fail@plt+0x94>
   10ec8:	cmp	r3, #0
   10ecc:	bxeq	lr
   10ed0:	bx	r3
   10ed4:	andeq	r5, r2, r0, lsl r1
   10ed8:	andeq	r5, r2, r0, lsl r1
   10edc:	andeq	r0, r0, r0
   10ee0:	ldr	r0, [pc, #36]	; 10f0c <__assert_fail@plt+0xc4>
   10ee4:	ldr	r1, [pc, #36]	; 10f10 <__assert_fail@plt+0xc8>
   10ee8:	sub	r1, r1, r0
   10eec:	asr	r1, r1, #2
   10ef0:	add	r1, r1, r1, lsr #31
   10ef4:	asrs	r1, r1, #1
   10ef8:	bxeq	lr
   10efc:	ldr	r3, [pc, #16]	; 10f14 <__assert_fail@plt+0xcc>
   10f00:	cmp	r3, #0
   10f04:	bxeq	lr
   10f08:	bx	r3
   10f0c:	andeq	r5, r2, r0, lsl r1
   10f10:	andeq	r5, r2, r0, lsl r1
   10f14:	andeq	r0, r0, r0
   10f18:	push	{r4, lr}
   10f1c:	ldr	r4, [pc, #24]	; 10f3c <__assert_fail@plt+0xf4>
   10f20:	ldrb	r3, [r4]
   10f24:	cmp	r3, #0
   10f28:	popne	{r4, pc}
   10f2c:	bl	10eb4 <__assert_fail@plt+0x6c>
   10f30:	mov	r3, #1
   10f34:	strb	r3, [r4]
   10f38:	pop	{r4, pc}
   10f3c:	andeq	r5, r2, r0, lsr #2
   10f40:	b	10ee0 <__assert_fail@plt+0x98>
   10f44:	push	{fp, lr}
   10f48:	mov	fp, sp
   10f4c:	cmp	r0, #0
   10f50:	bne	110a0 <__assert_fail@plt+0x258>
   10f54:	movw	r1, #17006	; 0x426e
   10f58:	mov	r0, #0
   10f5c:	mov	r2, #5
   10f60:	movt	r1, #1
   10f64:	bl	10cb0 <dcgettext@plt>
   10f68:	mov	r1, r0
   10f6c:	movw	r0, #20780	; 0x512c
   10f70:	movt	r0, #2
   10f74:	ldr	r2, [r0]
   10f78:	mov	r0, #1
   10f7c:	mov	r3, r2
   10f80:	bl	10dac <__printf_chk@plt>
   10f84:	movw	r1, #17069	; 0x42ad
   10f88:	mov	r0, #0
   10f8c:	mov	r2, #5
   10f90:	movt	r1, #1
   10f94:	bl	10cb0 <dcgettext@plt>
   10f98:	movw	r4, #20764	; 0x511c
   10f9c:	movt	r4, #2
   10fa0:	ldr	r1, [r4]
   10fa4:	bl	10c50 <fputs_unlocked@plt>
   10fa8:	movw	r1, #17162	; 0x430a
   10fac:	mov	r0, #0
   10fb0:	mov	r2, #5
   10fb4:	movt	r1, #1
   10fb8:	bl	10cb0 <dcgettext@plt>
   10fbc:	ldr	r1, [r4]
   10fc0:	bl	10c50 <fputs_unlocked@plt>
   10fc4:	movw	r1, #17294	; 0x438e
   10fc8:	mov	r0, #0
   10fcc:	mov	r2, #5
   10fd0:	movt	r1, #1
   10fd4:	bl	10cb0 <dcgettext@plt>
   10fd8:	ldr	r1, [r4]
   10fdc:	bl	10c50 <fputs_unlocked@plt>
   10fe0:	movw	r1, #17339	; 0x43bb
   10fe4:	mov	r0, #0
   10fe8:	mov	r2, #5
   10fec:	movt	r1, #1
   10ff0:	bl	10cb0 <dcgettext@plt>
   10ff4:	ldr	r1, [r4]
   10ff8:	bl	10c50 <fputs_unlocked@plt>
   10ffc:	movw	r1, #17393	; 0x43f1
   11000:	mov	r0, #0
   11004:	mov	r2, #5
   11008:	movt	r1, #1
   1100c:	bl	10cb0 <dcgettext@plt>
   11010:	ldr	r1, [r4]
   11014:	bl	10c50 <fputs_unlocked@plt>
   11018:	movw	r1, #17456	; 0x4430
   1101c:	mov	r0, #0
   11020:	mov	r2, #5
   11024:	movt	r1, #1
   11028:	bl	10cb0 <dcgettext@plt>
   1102c:	ldr	r1, [r4]
   11030:	bl	10c50 <fputs_unlocked@plt>
   11034:	movw	r1, #17685	; 0x4515
   11038:	mov	r0, #0
   1103c:	mov	r2, #5
   11040:	movt	r1, #1
   11044:	bl	10cb0 <dcgettext@plt>
   11048:	ldr	r1, [r4]
   1104c:	bl	10c50 <fputs_unlocked@plt>
   11050:	movw	r1, #17795	; 0x4583
   11054:	mov	r0, #0
   11058:	mov	r2, #5
   1105c:	movt	r1, #1
   11060:	bl	10cb0 <dcgettext@plt>
   11064:	movw	r2, #17986	; 0x4642
   11068:	mov	r1, r0
   1106c:	mov	r0, #1
   11070:	movt	r2, #1
   11074:	bl	10dac <__printf_chk@plt>
   11078:	movw	r1, #17991	; 0x4647
   1107c:	mov	r0, #0
   11080:	mov	r2, #5
   11084:	movt	r1, #1
   11088:	bl	10cb0 <dcgettext@plt>
   1108c:	ldr	r1, [r4]
   11090:	bl	10c50 <fputs_unlocked@plt>
   11094:	bl	110c0 <__assert_fail@plt+0x278>
   11098:	mov	r0, #0
   1109c:	bl	10d70 <exit@plt>
   110a0:	movw	r0, #16956	; 0x423c
   110a4:	movw	r1, #16979	; 0x4253
   110a8:	movw	r3, #16990	; 0x425e
   110ac:	mov	r2, #40	; 0x28
   110b0:	movt	r0, #1
   110b4:	movt	r1, #1
   110b8:	movt	r3, #1
   110bc:	bl	10e48 <__assert_fail@plt>
   110c0:	push	{r4, r5, r6, sl, fp, lr}
   110c4:	add	fp, sp, #16
   110c8:	sub	sp, sp, #56	; 0x38
   110cc:	movw	ip, #18504	; 0x4848
   110d0:	mov	r6, sp
   110d4:	movt	ip, #1
   110d8:	mov	r1, r6
   110dc:	ldm	ip!, {r0, r2, r3, r4}
   110e0:	stmia	r1!, {r0, r2, r3, r4}
   110e4:	ldm	ip!, {r0, r2, r3, r4, r5}
   110e8:	stmia	r1!, {r0, r2, r3, r4, r5}
   110ec:	ldm	ip, {r0, r2, r3, r4, r5}
   110f0:	stm	r1, {r0, r2, r3, r4, r5}
   110f4:	movw	r1, #18191	; 0x470f
   110f8:	movw	r4, #17986	; 0x4642
   110fc:	movt	r1, #1
   11100:	movt	r4, #1
   11104:	mov	r0, r4
   11108:	bl	10c5c <strcmp@plt>
   1110c:	cmp	r0, #0
   11110:	ldrne	r1, [r6, #8]!
   11114:	cmpne	r1, #0
   11118:	bne	11104 <__assert_fail@plt+0x2bc>
   1111c:	ldr	r5, [r6, #4]
   11120:	movw	r1, #18286	; 0x476e
   11124:	mov	r0, #0
   11128:	mov	r2, #5
   1112c:	movt	r1, #1
   11130:	bl	10cb0 <dcgettext@plt>
   11134:	movw	r2, #18156	; 0x46ec
   11138:	movw	r3, #18309	; 0x4785
   1113c:	mov	r1, r0
   11140:	mov	r0, #1
   11144:	movt	r2, #1
   11148:	movt	r3, #1
   1114c:	bl	10dac <__printf_chk@plt>
   11150:	cmp	r5, #0
   11154:	mov	r0, #5
   11158:	mov	r1, #0
   1115c:	moveq	r5, r4
   11160:	bl	10de8 <setlocale@plt>
   11164:	cmp	r0, #0
   11168:	beq	111a8 <__assert_fail@plt+0x360>
   1116c:	movw	r1, #18349	; 0x47ad
   11170:	mov	r2, #3
   11174:	movt	r1, #1
   11178:	bl	10e24 <strncmp@plt>
   1117c:	cmp	r0, #0
   11180:	beq	111a8 <__assert_fail@plt+0x360>
   11184:	movw	r1, #18353	; 0x47b1
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	movt	r1, #1
   11194:	bl	10cb0 <dcgettext@plt>
   11198:	movw	r1, #20764	; 0x511c
   1119c:	movt	r1, #2
   111a0:	ldr	r1, [r1]
   111a4:	bl	10c50 <fputs_unlocked@plt>
   111a8:	movw	r1, #18424	; 0x47f8
   111ac:	mov	r0, #0
   111b0:	mov	r2, #5
   111b4:	movt	r1, #1
   111b8:	bl	10cb0 <dcgettext@plt>
   111bc:	movw	r2, #18309	; 0x4785
   111c0:	mov	r1, r0
   111c4:	mov	r0, #1
   111c8:	mov	r3, r4
   111cc:	movt	r2, #1
   111d0:	bl	10dac <__printf_chk@plt>
   111d4:	movw	r1, #18451	; 0x4813
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	movt	r1, #1
   111e4:	bl	10cb0 <dcgettext@plt>
   111e8:	movw	r3, #17455	; 0x442f
   111ec:	mov	r1, r0
   111f0:	movw	r0, #18219	; 0x472b
   111f4:	cmp	r5, r4
   111f8:	mov	r2, r5
   111fc:	movt	r0, #1
   11200:	movt	r3, #1
   11204:	moveq	r3, r0
   11208:	mov	r0, #1
   1120c:	bl	10dac <__printf_chk@plt>
   11210:	sub	sp, fp, #16
   11214:	pop	{r4, r5, r6, sl, fp, pc}
   11218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1121c:	add	fp, sp, #28
   11220:	sub	sp, sp, #20
   11224:	mov	r6, r0
   11228:	movw	r0, #18096	; 0x46b0
   1122c:	mov	r4, r1
   11230:	movt	r0, #1
   11234:	bl	10d28 <getenv@plt>
   11238:	mov	sl, r0
   1123c:	cmp	r0, #0
   11240:	beq	1126c <__assert_fail@plt+0x424>
   11244:	mov	r5, #0
   11248:	cmp	r6, #2
   1124c:	blt	11270 <__assert_fail@plt+0x428>
   11250:	ldr	r0, [r4, #4]
   11254:	movw	r1, #18112	; 0x46c0
   11258:	movt	r1, #1
   1125c:	bl	10c5c <strcmp@plt>
   11260:	clz	r0, r0
   11264:	lsr	r5, r0, #5
   11268:	b	11270 <__assert_fail@plt+0x428>
   1126c:	mov	r5, #1
   11270:	ldr	r0, [r4], #4
   11274:	bl	11844 <__assert_fail@plt+0x9fc>
   11278:	movw	r1, #17455	; 0x442f
   1127c:	mov	r0, #6
   11280:	movt	r1, #1
   11284:	bl	10de8 <setlocale@plt>
   11288:	movw	r7, #18160	; 0x46f0
   1128c:	movw	r1, #18115	; 0x46c3
   11290:	movt	r7, #1
   11294:	movt	r1, #1
   11298:	mov	r0, r7
   1129c:	bl	10e0c <bindtextdomain@plt>
   112a0:	mov	r0, r7
   112a4:	bl	10cc8 <textdomain@plt>
   112a8:	movw	r0, #5980	; 0x175c
   112ac:	movt	r0, #1
   112b0:	bl	14218 <__assert_fail@plt+0x33d0>
   112b4:	cmp	r6, #2
   112b8:	bne	112f8 <__assert_fail@plt+0x4b0>
   112bc:	cmp	r5, #0
   112c0:	beq	112f8 <__assert_fail@plt+0x4b0>
   112c4:	ldr	r7, [r4]
   112c8:	movw	r1, #18139	; 0x46db
   112cc:	movt	r1, #1
   112d0:	mov	r0, r7
   112d4:	bl	10c5c <strcmp@plt>
   112d8:	cmp	r0, #0
   112dc:	beq	116a4 <__assert_fail@plt+0x85c>
   112e0:	movw	r1, #18146	; 0x46e2
   112e4:	mov	r0, r7
   112e8:	movt	r1, #1
   112ec:	bl	10c5c <strcmp@plt>
   112f0:	cmp	r0, #0
   112f4:	beq	1164c <__assert_fail@plt+0x804>
   112f8:	cmp	r6, #2
   112fc:	mov	r0, #0
   11300:	eor	r2, r5, #1
   11304:	mov	r1, #0
   11308:	movwlt	r0, #1
   1130c:	orrs	r0, r0, r2
   11310:	sub	r2, r6, #1
   11314:	bne	113dc <__assert_fail@plt+0x594>
   11318:	mov	r1, #0
   1131c:	mov	r0, #1
   11320:	mov	r9, r2
   11324:	ldr	r2, [r4]
   11328:	ldrb	r3, [r2]
   1132c:	cmp	r3, #45	; 0x2d
   11330:	bne	113e8 <__assert_fail@plt+0x5a0>
   11334:	add	r3, r2, #1
   11338:	mov	r7, #0
   1133c:	b	11344 <__assert_fail@plt+0x4fc>
   11340:	sub	r7, r7, #1
   11344:	ldrb	r6, [r3, -r7]
   11348:	cmp	r6, #100	; 0x64
   1134c:	ble	11360 <__assert_fail@plt+0x518>
   11350:	cmp	r6, #110	; 0x6e
   11354:	cmpne	r6, #101	; 0x65
   11358:	beq	11340 <__assert_fail@plt+0x4f8>
   1135c:	b	113e8 <__assert_fail@plt+0x5a0>
   11360:	cmp	r6, #69	; 0x45
   11364:	beq	11340 <__assert_fail@plt+0x4f8>
   11368:	cmp	r6, #0
   1136c:	bne	113e8 <__assert_fail@plt+0x5a0>
   11370:	cmp	r7, #0
   11374:	beq	113e8 <__assert_fail@plt+0x5a0>
   11378:	ldrb	r3, [r3]
   1137c:	cmp	r3, #0
   11380:	beq	113c0 <__assert_fail@plt+0x578>
   11384:	add	r2, r2, #2
   11388:	uxtb	r3, r3
   1138c:	cmp	r3, #69	; 0x45
   11390:	beq	113b0 <__assert_fail@plt+0x568>
   11394:	cmp	r3, #110	; 0x6e
   11398:	beq	113a8 <__assert_fail@plt+0x560>
   1139c:	cmp	r3, #101	; 0x65
   113a0:	moveq	r1, #1
   113a4:	b	113b4 <__assert_fail@plt+0x56c>
   113a8:	mov	r0, #0
   113ac:	b	113b4 <__assert_fail@plt+0x56c>
   113b0:	mov	r1, #0
   113b4:	ldrb	r3, [r2], #1
   113b8:	cmp	r3, #0
   113bc:	bne	11388 <__assert_fail@plt+0x540>
   113c0:	add	r4, r4, #4
   113c4:	sub	r2, r9, #1
   113c8:	cmp	r9, #2
   113cc:	bge	11320 <__assert_fail@plt+0x4d8>
   113d0:	and	r1, r1, #1
   113d4:	and	r0, r0, #1
   113d8:	b	113e0 <__assert_fail@plt+0x598>
   113dc:	mov	r0, #1
   113e0:	mov	r9, r2
   113e4:	b	113f0 <__assert_fail@plt+0x5a8>
   113e8:	and	r0, r0, #1
   113ec:	and	r1, r1, #1
   113f0:	str	r0, [sp, #16]
   113f4:	cmp	sl, #0
   113f8:	cmpeq	r1, #0
   113fc:	beq	115f4 <__assert_fail@plt+0x7ac>
   11400:	cmp	r9, #1
   11404:	bge	1141c <__assert_fail@plt+0x5d4>
   11408:	b	11634 <__assert_fail@plt+0x7ec>
   1140c:	mov	r0, #32
   11410:	bl	10e3c <putchar_unlocked@plt>
   11414:	sub	r9, r9, #1
   11418:	add	r4, r4, #4
   1141c:	ldr	r7, [r4]
   11420:	b	115d0 <__assert_fail@plt+0x788>
   11424:	ldrb	r5, [r7]
   11428:	cmp	r5, #0
   1142c:	beq	114b8 <__assert_fail@plt+0x670>
   11430:	add	r7, r6, #2
   11434:	cmp	r5, #96	; 0x60
   11438:	ble	114c0 <__assert_fail@plt+0x678>
   1143c:	sub	r0, r5, #97	; 0x61
   11440:	cmp	r0, #23
   11444:	bhi	1155c <__assert_fail@plt+0x714>
   11448:	add	r1, pc, #0
   1144c:	ldr	pc, [r1, r0, lsl #2]
   11450:			; <UNDEFINED> instruction: 0x000114b0
   11454:	andeq	r1, r1, r0, ror r5
   11458:	muleq	r1, r8, r6
   1145c:	andeq	r1, r1, ip, asr r5
   11460:	andeq	r1, r1, r8, ror #10
   11464:	andeq	r1, r1, r8, lsr #10
   11468:	andeq	r1, r1, ip, asr r5
   1146c:	andeq	r1, r1, ip, asr r5
   11470:	andeq	r1, r1, ip, asr r5
   11474:	andeq	r1, r1, ip, asr r5
   11478:	andeq	r1, r1, ip, asr r5
   1147c:	andeq	r1, r1, ip, asr r5
   11480:	andeq	r1, r1, ip, asr r5
   11484:	andeq	r1, r1, r8, ror r5
   11488:	andeq	r1, r1, ip, asr r5
   1148c:	andeq	r1, r1, ip, asr r5
   11490:	andeq	r1, r1, ip, asr r5
   11494:	andeq	r1, r1, r0, lsr r5
   11498:	andeq	r1, r1, ip, asr r5
   1149c:	andeq	r1, r1, r8, lsr r5
   114a0:	andeq	r1, r1, ip, asr r5
   114a4:	andeq	r1, r1, r0, lsr #10
   114a8:	andeq	r1, r1, ip, asr r5
   114ac:	andeq	r1, r1, r0, asr #10
   114b0:	mov	r5, #7
   114b4:	b	11500 <__assert_fail@plt+0x6b8>
   114b8:	mov	r5, #92	; 0x5c
   114bc:	b	11500 <__assert_fail@plt+0x6b8>
   114c0:	sub	r0, r5, #49	; 0x31
   114c4:	cmp	r0, #7
   114c8:	bcs	1150c <__assert_fail@plt+0x6c4>
   114cc:	mov	r0, r5
   114d0:	sub	r5, r0, #48	; 0x30
   114d4:	ldrb	r0, [r7]
   114d8:	and	r1, r0, #248	; 0xf8
   114dc:	cmp	r1, #48	; 0x30
   114e0:	addeq	r0, r0, r5, lsl #3
   114e4:	subeq	r5, r0, #48	; 0x30
   114e8:	ldrbeq	r0, [r7, #1]!
   114ec:	and	r1, r0, #248	; 0xf8
   114f0:	cmp	r1, #48	; 0x30
   114f4:	addeq	r0, r0, r5, lsl #3
   114f8:	addeq	r7, r7, #1
   114fc:	subeq	r5, r0, #48	; 0x30
   11500:	uxtb	r0, r5
   11504:	bl	10e3c <putchar_unlocked@plt>
   11508:	b	115d0 <__assert_fail@plt+0x788>
   1150c:	cmp	r5, #48	; 0x30
   11510:	beq	11580 <__assert_fail@plt+0x738>
   11514:	cmp	r5, #92	; 0x5c
   11518:	beq	11500 <__assert_fail@plt+0x6b8>
   1151c:	b	1155c <__assert_fail@plt+0x714>
   11520:	mov	r5, #11
   11524:	b	11500 <__assert_fail@plt+0x6b8>
   11528:	mov	r5, #12
   1152c:	b	11500 <__assert_fail@plt+0x6b8>
   11530:	mov	r5, #13
   11534:	b	11500 <__assert_fail@plt+0x6b8>
   11538:	mov	r5, #9
   1153c:	b	11500 <__assert_fail@plt+0x6b8>
   11540:	ldrb	sl, [r7]
   11544:	bl	10d64 <__ctype_b_loc@plt>
   11548:	ldr	r8, [r0]
   1154c:	add	r0, r8, sl, lsl #1
   11550:	ldrb	r0, [r0, #1]
   11554:	tst	r0, #16
   11558:	bne	1159c <__assert_fail@plt+0x754>
   1155c:	mov	r0, #92	; 0x5c
   11560:	bl	10e3c <putchar_unlocked@plt>
   11564:	b	11500 <__assert_fail@plt+0x6b8>
   11568:	mov	r5, #27
   1156c:	b	11500 <__assert_fail@plt+0x6b8>
   11570:	mov	r5, #8
   11574:	b	11500 <__assert_fail@plt+0x6b8>
   11578:	mov	r5, #10
   1157c:	b	11500 <__assert_fail@plt+0x6b8>
   11580:	ldrb	r0, [r7]
   11584:	mov	r5, #0
   11588:	and	r1, r0, #248	; 0xf8
   1158c:	cmp	r1, #48	; 0x30
   11590:	bne	11500 <__assert_fail@plt+0x6b8>
   11594:	add	r7, r6, #3
   11598:	b	114d0 <__assert_fail@plt+0x688>
   1159c:	mov	r0, sl
   115a0:	bl	116ac <__assert_fail@plt+0x864>
   115a4:	mov	r7, r6
   115a8:	mov	r5, r0
   115ac:	ldrb	r0, [r7, #3]!
   115b0:	add	r1, r8, r0, lsl #1
   115b4:	ldrb	r1, [r1, #1]
   115b8:	tst	r1, #16
   115bc:	beq	11500 <__assert_fail@plt+0x6b8>
   115c0:	bl	116ac <__assert_fail@plt+0x864>
   115c4:	add	r5, r0, r5, lsl #4
   115c8:	add	r7, r6, #4
   115cc:	b	11500 <__assert_fail@plt+0x6b8>
   115d0:	mov	r6, r7
   115d4:	ldrb	r5, [r7], #1
   115d8:	cmp	r5, #92	; 0x5c
   115dc:	beq	11424 <__assert_fail@plt+0x5dc>
   115e0:	cmp	r5, #0
   115e4:	bne	11500 <__assert_fail@plt+0x6b8>
   115e8:	cmp	r9, #2
   115ec:	bge	1140c <__assert_fail@plt+0x5c4>
   115f0:	b	11634 <__assert_fail@plt+0x7ec>
   115f4:	cmp	r9, #1
   115f8:	blt	11634 <__assert_fail@plt+0x7ec>
   115fc:	movw	r6, #20764	; 0x511c
   11600:	add	r5, r9, #1
   11604:	movt	r6, #2
   11608:	ldr	r1, [r6]
   1160c:	ldr	r0, [r4]
   11610:	bl	10c50 <fputs_unlocked@plt>
   11614:	cmp	r5, #2
   11618:	beq	11634 <__assert_fail@plt+0x7ec>
   1161c:	mov	r0, #32
   11620:	bl	10e3c <putchar_unlocked@plt>
   11624:	sub	r5, r5, #1
   11628:	add	r4, r4, #4
   1162c:	cmp	r5, #1
   11630:	bgt	11608 <__assert_fail@plt+0x7c0>
   11634:	ldr	r0, [sp, #16]
   11638:	cmp	r0, #0
   1163c:	beq	11698 <__assert_fail@plt+0x850>
   11640:	mov	r0, #10
   11644:	bl	10e3c <putchar_unlocked@plt>
   11648:	b	11698 <__assert_fail@plt+0x850>
   1164c:	movw	r0, #20680	; 0x50c8
   11650:	movw	r2, #18180	; 0x4704
   11654:	mov	r1, #0
   11658:	movw	r7, #18170	; 0x46fa
   1165c:	movt	r0, #2
   11660:	movt	r2, #1
   11664:	str	r1, [sp, #8]
   11668:	movw	r1, #17986	; 0x4642
   1166c:	movt	r7, #1
   11670:	ldr	r3, [r0]
   11674:	movw	r0, #20764	; 0x511c
   11678:	str	r2, [sp, #4]
   1167c:	movw	r2, #18156	; 0x46ec
   11680:	movt	r1, #1
   11684:	str	r7, [sp]
   11688:	movt	r0, #2
   1168c:	movt	r2, #1
   11690:	ldr	r0, [r0]
   11694:	bl	13734 <__assert_fail@plt+0x28ec>
   11698:	mov	r0, #0
   1169c:	sub	sp, fp, #28
   116a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116a4:	mov	r0, #0
   116a8:	bl	10f44 <__assert_fail@plt+0xfc>
   116ac:	sub	r2, r0, #65	; 0x41
   116b0:	mov	r1, r0
   116b4:	mov	r0, #10
   116b8:	cmp	r2, #5
   116bc:	bls	116f4 <__assert_fail@plt+0x8ac>
   116c0:	sub	r2, r1, #97	; 0x61
   116c4:	cmp	r2, #5
   116c8:	subhi	r0, r1, #48	; 0x30
   116cc:	bxhi	lr
   116d0:	add	r1, pc, #0
   116d4:	ldr	pc, [r1, r2, lsl #2]
   116d8:	strdeq	r1, [r1], -r0
   116dc:	andeq	r1, r1, r4, lsl r7
   116e0:	andeq	r1, r1, ip, lsl r7
   116e4:	andeq	r1, r1, r4, lsr #14
   116e8:	andeq	r1, r1, ip, lsr #14
   116ec:	andeq	r1, r1, r4, lsr r7
   116f0:	bx	lr
   116f4:	add	r1, pc, #0
   116f8:	ldr	pc, [r1, r2, lsl #2]
   116fc:	strdeq	r1, [r1], -r0
   11700:	andeq	r1, r1, r4, lsl r7
   11704:	andeq	r1, r1, ip, lsl r7
   11708:	andeq	r1, r1, r4, lsr #14
   1170c:	andeq	r1, r1, ip, lsr #14
   11710:	andeq	r1, r1, r4, lsr r7
   11714:	mov	r0, #11
   11718:	bx	lr
   1171c:	mov	r0, #12
   11720:	bx	lr
   11724:	mov	r0, #13
   11728:	bx	lr
   1172c:	mov	r0, #14
   11730:	bx	lr
   11734:	mov	r0, #15
   11738:	bx	lr
   1173c:	movw	r1, #20772	; 0x5124
   11740:	movt	r1, #2
   11744:	str	r0, [r1]
   11748:	bx	lr
   1174c:	movw	r1, #20776	; 0x5128
   11750:	movt	r1, #2
   11754:	strb	r0, [r1]
   11758:	bx	lr
   1175c:	push	{r4, r5, r6, sl, fp, lr}
   11760:	add	fp, sp, #16
   11764:	sub	sp, sp, #8
   11768:	movw	r0, #20764	; 0x511c
   1176c:	movt	r0, #2
   11770:	ldr	r0, [r0]
   11774:	bl	13da4 <__assert_fail@plt+0x2f5c>
   11778:	cmp	r0, #0
   1177c:	beq	117a4 <__assert_fail@plt+0x95c>
   11780:	movw	r0, #20776	; 0x5128
   11784:	movt	r0, #2
   11788:	ldrb	r0, [r0]
   1178c:	cmp	r0, #0
   11790:	beq	117c4 <__assert_fail@plt+0x97c>
   11794:	bl	10d88 <__errno_location@plt>
   11798:	ldr	r0, [r0]
   1179c:	cmp	r0, #32
   117a0:	bne	117c4 <__assert_fail@plt+0x97c>
   117a4:	movw	r0, #20760	; 0x5118
   117a8:	movt	r0, #2
   117ac:	ldr	r0, [r0]
   117b0:	bl	13da4 <__assert_fail@plt+0x2f5c>
   117b4:	cmp	r0, #0
   117b8:	subeq	sp, fp, #16
   117bc:	popeq	{r4, r5, r6, sl, fp, pc}
   117c0:	b	11834 <__assert_fail@plt+0x9ec>
   117c4:	movw	r1, #18575	; 0x488f
   117c8:	mov	r0, #0
   117cc:	mov	r2, #5
   117d0:	movt	r1, #1
   117d4:	bl	10cb0 <dcgettext@plt>
   117d8:	mov	r4, r0
   117dc:	movw	r0, #20772	; 0x5124
   117e0:	movt	r0, #2
   117e4:	ldr	r6, [r0]
   117e8:	bl	10d88 <__errno_location@plt>
   117ec:	ldr	r5, [r0]
   117f0:	cmp	r6, #0
   117f4:	bne	11810 <__assert_fail@plt+0x9c8>
   117f8:	movw	r2, #18591	; 0x489f
   117fc:	mov	r0, #0
   11800:	mov	r1, r5
   11804:	mov	r3, r4
   11808:	movt	r2, #1
   1180c:	b	11830 <__assert_fail@plt+0x9e8>
   11810:	mov	r0, r6
   11814:	bl	13008 <__assert_fail@plt+0x21c0>
   11818:	movw	r2, #18587	; 0x489b
   1181c:	mov	r3, r0
   11820:	str	r4, [sp]
   11824:	mov	r0, #0
   11828:	mov	r1, r5
   1182c:	movt	r2, #1
   11830:	bl	10d1c <error@plt>
   11834:	movw	r0, #20684	; 0x50cc
   11838:	movt	r0, #2
   1183c:	ldr	r0, [r0]
   11840:	bl	10c80 <_exit@plt>
   11844:	push	{r4, r5, fp, lr}
   11848:	add	fp, sp, #8
   1184c:	cmp	r0, #0
   11850:	beq	118e4 <__assert_fail@plt+0xa9c>
   11854:	mov	r1, #47	; 0x2f
   11858:	mov	r4, r0
   1185c:	bl	10df4 <strrchr@plt>
   11860:	cmp	r0, #0
   11864:	mov	r5, r4
   11868:	addne	r5, r0, #1
   1186c:	sub	r0, r5, r4
   11870:	cmp	r0, #7
   11874:	blt	118c8 <__assert_fail@plt+0xa80>
   11878:	movw	r1, #18650	; 0x48da
   1187c:	sub	r0, r5, #7
   11880:	mov	r2, #7
   11884:	movt	r1, #1
   11888:	bl	10e24 <strncmp@plt>
   1188c:	cmp	r0, #0
   11890:	bne	118c8 <__assert_fail@plt+0xa80>
   11894:	movw	r1, #18658	; 0x48e2
   11898:	mov	r0, r5
   1189c:	mov	r2, #3
   118a0:	movt	r1, #1
   118a4:	bl	10e24 <strncmp@plt>
   118a8:	cmp	r0, #0
   118ac:	beq	118b8 <__assert_fail@plt+0xa70>
   118b0:	mov	r4, r5
   118b4:	b	118c8 <__assert_fail@plt+0xa80>
   118b8:	movw	r0, #20752	; 0x5110
   118bc:	add	r4, r5, #3
   118c0:	movt	r0, #2
   118c4:	str	r4, [r0]
   118c8:	movw	r0, #20756	; 0x5114
   118cc:	movt	r0, #2
   118d0:	str	r4, [r0]
   118d4:	movw	r0, #20780	; 0x512c
   118d8:	movt	r0, #2
   118dc:	str	r4, [r0]
   118e0:	pop	{r4, r5, fp, pc}
   118e4:	movw	r0, #20760	; 0x5118
   118e8:	movt	r0, #2
   118ec:	ldr	r1, [r0]
   118f0:	movw	r0, #18594	; 0x48a2
   118f4:	movt	r0, #1
   118f8:	bl	10e18 <fputs@plt>
   118fc:	bl	10e30 <abort@plt>
   11900:	push	{r4, r5, r6, sl, fp, lr}
   11904:	add	fp, sp, #16
   11908:	mov	r4, r0
   1190c:	movw	r0, #20784	; 0x5130
   11910:	movt	r0, #2
   11914:	cmp	r4, #0
   11918:	moveq	r4, r0
   1191c:	bl	10d88 <__errno_location@plt>
   11920:	ldr	r6, [r0]
   11924:	mov	r5, r0
   11928:	mov	r0, r4
   1192c:	mov	r1, #48	; 0x30
   11930:	bl	13b8c <__assert_fail@plt+0x2d44>
   11934:	str	r6, [r5]
   11938:	pop	{r4, r5, r6, sl, fp, pc}
   1193c:	movw	r1, #20784	; 0x5130
   11940:	cmp	r0, #0
   11944:	movt	r1, #2
   11948:	movne	r1, r0
   1194c:	ldr	r0, [r1]
   11950:	bx	lr
   11954:	movw	r2, #20784	; 0x5130
   11958:	cmp	r0, #0
   1195c:	movt	r2, #2
   11960:	movne	r2, r0
   11964:	str	r1, [r2]
   11968:	bx	lr
   1196c:	movw	r3, #20784	; 0x5130
   11970:	cmp	r0, #0
   11974:	movt	r3, #2
   11978:	movne	r3, r0
   1197c:	ubfx	r0, r1, #5, #3
   11980:	and	r1, r1, #31
   11984:	add	r0, r3, r0, lsl #2
   11988:	ldr	r3, [r0, #8]
   1198c:	eor	r2, r2, r3, lsr r1
   11990:	and	r2, r2, #1
   11994:	eor	r2, r3, r2, lsl r1
   11998:	str	r2, [r0, #8]
   1199c:	mov	r0, #1
   119a0:	and	r0, r0, r3, lsr r1
   119a4:	bx	lr
   119a8:	movw	r2, #20784	; 0x5130
   119ac:	cmp	r0, #0
   119b0:	movt	r2, #2
   119b4:	movne	r2, r0
   119b8:	ldr	r0, [r2, #4]
   119bc:	str	r1, [r2, #4]
   119c0:	bx	lr
   119c4:	movw	r3, #20784	; 0x5130
   119c8:	cmp	r0, #0
   119cc:	movt	r3, #2
   119d0:	movne	r3, r0
   119d4:	cmp	r1, #0
   119d8:	mov	r0, #10
   119dc:	cmpne	r2, #0
   119e0:	str	r0, [r3]
   119e4:	bne	119f4 <__assert_fail@plt+0xbac>
   119e8:	push	{fp, lr}
   119ec:	mov	fp, sp
   119f0:	bl	10e30 <abort@plt>
   119f4:	str	r1, [r3, #40]	; 0x28
   119f8:	str	r2, [r3, #44]	; 0x2c
   119fc:	bx	lr
   11a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a04:	add	fp, sp, #28
   11a08:	sub	sp, sp, #20
   11a0c:	mov	r7, r0
   11a10:	ldr	r0, [fp, #8]
   11a14:	movw	r5, #20784	; 0x5130
   11a18:	mov	r8, r3
   11a1c:	mov	r9, r2
   11a20:	mov	sl, r1
   11a24:	movt	r5, #2
   11a28:	cmp	r0, #0
   11a2c:	movne	r5, r0
   11a30:	bl	10d88 <__errno_location@plt>
   11a34:	mov	r4, r0
   11a38:	ldm	r5, {r0, r1}
   11a3c:	ldr	r2, [r5, #40]	; 0x28
   11a40:	ldr	r3, [r5, #44]	; 0x2c
   11a44:	add	r5, r5, #8
   11a48:	ldr	r6, [r4]
   11a4c:	stm	sp, {r0, r1, r5}
   11a50:	str	r2, [sp, #12]
   11a54:	str	r3, [sp, #16]
   11a58:	mov	r0, r7
   11a5c:	mov	r1, sl
   11a60:	mov	r2, r9
   11a64:	mov	r3, r8
   11a68:	bl	11a78 <__assert_fail@plt+0xc30>
   11a6c:	str	r6, [r4]
   11a70:	sub	sp, fp, #28
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a7c:	add	fp, sp, #28
   11a80:	sub	sp, sp, #156	; 0x9c
   11a84:	str	r0, [fp, #-56]	; 0xffffffc8
   11a88:	ldr	r0, [fp, #12]
   11a8c:	mov	r4, r1
   11a90:	str	r3, [sp, #80]	; 0x50
   11a94:	str	r2, [fp, #-84]	; 0xffffffac
   11a98:	and	r1, r0, #4
   11a9c:	str	r1, [sp, #24]
   11aa0:	and	r1, r0, #1
   11aa4:	str	r1, [sp, #28]
   11aa8:	ubfx	r7, r0, #1, #1
   11aac:	bl	10cec <__ctype_get_mb_cur_max@plt>
   11ab0:	str	r0, [sp, #32]
   11ab4:	ldr	r0, [fp, #24]
   11ab8:	ldr	r9, [fp, #8]
   11abc:	mov	r2, #0
   11ac0:	mov	r1, #0
   11ac4:	mov	r5, #0
   11ac8:	str	r2, [sp, #52]	; 0x34
   11acc:	mov	r2, #1
   11ad0:	str	r0, [sp, #72]	; 0x48
   11ad4:	ldr	r0, [fp, #20]
   11ad8:	str	r0, [sp, #64]	; 0x40
   11adc:	mov	r0, #0
   11ae0:	str	r0, [sp, #92]	; 0x5c
   11ae4:	mov	r0, #0
   11ae8:	str	r0, [fp, #-76]	; 0xffffffb4
   11aec:	mov	r0, #0
   11af0:	cmp	r9, #10
   11af4:	str	r1, [sp, #68]	; 0x44
   11af8:	bhi	12af8 <__assert_fail@plt+0x1cb0>
   11afc:	add	r1, pc, #28
   11b00:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b04:	ldr	lr, [sp, #80]	; 0x50
   11b08:	mov	r6, r4
   11b0c:	mov	r8, #0
   11b10:	mov	r3, #1
   11b14:	mov	sl, #0
   11b18:	mov	r4, r2
   11b1c:	ldr	pc, [r1, r9, lsl #2]
   11b20:	strdeq	r1, [r1], -r0
   11b24:	andeq	r1, r1, ip, lsr #24
   11b28:	andeq	r1, r1, r0, lsl #24
   11b2c:	andeq	r1, r1, r8, ror #23
   11b30:	andeq	r1, r1, r0, lsr #24
   11b34:	andeq	r1, r1, r8, ror ip
   11b38:	andeq	r1, r1, r0, lsl ip
   11b3c:	ldrdeq	r1, [r1], -r8
   11b40:	andeq	r1, r1, ip, asr #22
   11b44:	andeq	r1, r1, ip, asr #22
   11b48:	andeq	r1, r1, r4, ror fp
   11b4c:	movw	r0, #18740	; 0x4934
   11b50:	mov	r1, r9
   11b54:	movt	r0, #1
   11b58:	bl	13260 <__assert_fail@plt+0x2418>
   11b5c:	str	r0, [sp, #64]	; 0x40
   11b60:	movw	r0, #18742	; 0x4936
   11b64:	mov	r1, r9
   11b68:	movt	r0, #1
   11b6c:	bl	13260 <__assert_fail@plt+0x2418>
   11b70:	str	r0, [sp, #72]	; 0x48
   11b74:	mov	r8, #0
   11b78:	mov	sl, r7
   11b7c:	tst	r7, #1
   11b80:	str	r5, [fp, #-48]	; 0xffffffd0
   11b84:	bne	11bc0 <__assert_fail@plt+0xd78>
   11b88:	ldr	r0, [sp, #64]	; 0x40
   11b8c:	ldrb	r0, [r0]
   11b90:	cmp	r0, #0
   11b94:	beq	11bc0 <__assert_fail@plt+0xd78>
   11b98:	ldr	r1, [sp, #64]	; 0x40
   11b9c:	mov	r8, #0
   11ba0:	add	r1, r1, #1
   11ba4:	cmp	r8, r6
   11ba8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   11bac:	strbcc	r0, [r2, r8]
   11bb0:	ldrb	r0, [r1, r8]
   11bb4:	add	r8, r8, #1
   11bb8:	cmp	r0, #0
   11bbc:	bne	11ba4 <__assert_fail@plt+0xd5c>
   11bc0:	ldr	r7, [sp, #72]	; 0x48
   11bc4:	mov	r0, r7
   11bc8:	bl	10d7c <strlen@plt>
   11bcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11bd0:	ldr	lr, [sp, #80]	; 0x50
   11bd4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11bd8:	str	r0, [fp, #-76]	; 0xffffffb4
   11bdc:	str	r7, [sp, #92]	; 0x5c
   11be0:	mov	r3, #1
   11be4:	b	11cd8 <__assert_fail@plt+0xe90>
   11be8:	mov	r0, #1
   11bec:	b	11c2c <__assert_fail@plt+0xde4>
   11bf0:	mov	r9, #0
   11bf4:	mov	r8, #0
   11bf8:	mov	r3, r0
   11bfc:	b	11cd4 <__assert_fail@plt+0xe8c>
   11c00:	tst	r7, #1
   11c04:	bne	11c2c <__assert_fail@plt+0xde4>
   11c08:	mov	r3, r0
   11c0c:	b	11c54 <__assert_fail@plt+0xe0c>
   11c10:	mov	r0, #1
   11c14:	mov	r8, #0
   11c18:	mov	r9, #5
   11c1c:	b	11c8c <__assert_fail@plt+0xe44>
   11c20:	mov	r3, #1
   11c24:	tst	r7, #1
   11c28:	beq	11c54 <__assert_fail@plt+0xe0c>
   11c2c:	mov	r1, #1
   11c30:	mov	r8, #0
   11c34:	mov	r9, #2
   11c38:	mov	r3, r0
   11c3c:	mov	sl, #1
   11c40:	str	r1, [fp, #-76]	; 0xffffffb4
   11c44:	movw	r1, #18742	; 0x4936
   11c48:	movt	r1, #1
   11c4c:	str	r1, [sp, #92]	; 0x5c
   11c50:	b	11cd8 <__assert_fail@plt+0xe90>
   11c54:	cmp	r6, #0
   11c58:	mov	r8, #1
   11c5c:	mov	r9, #2
   11c60:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11c64:	movne	r0, #39	; 0x27
   11c68:	strbne	r0, [r1]
   11c6c:	movw	r0, #18742	; 0x4936
   11c70:	movt	r0, #1
   11c74:	b	11cc8 <__assert_fail@plt+0xe80>
   11c78:	mov	r9, #5
   11c7c:	tst	r7, #1
   11c80:	beq	11ca8 <__assert_fail@plt+0xe60>
   11c84:	mov	r0, #1
   11c88:	mov	r8, #0
   11c8c:	str	r0, [fp, #-76]	; 0xffffffb4
   11c90:	movw	r0, #18738	; 0x4932
   11c94:	mov	r3, #1
   11c98:	mov	sl, #1
   11c9c:	movt	r0, #1
   11ca0:	str	r0, [sp, #92]	; 0x5c
   11ca4:	b	11cd8 <__assert_fail@plt+0xe90>
   11ca8:	cmp	r6, #0
   11cac:	mov	r8, #1
   11cb0:	mov	r3, #1
   11cb4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11cb8:	movne	r0, #34	; 0x22
   11cbc:	strbne	r0, [r1]
   11cc0:	movw	r0, #18738	; 0x4932
   11cc4:	movt	r0, #1
   11cc8:	str	r0, [sp, #92]	; 0x5c
   11ccc:	mov	r0, #1
   11cd0:	str	r0, [fp, #-76]	; 0xffffffb4
   11cd4:	mov	sl, #0
   11cd8:	ldr	r0, [fp, #16]
   11cdc:	mov	r7, #0
   11ce0:	str	r9, [fp, #-64]	; 0xffffffc0
   11ce4:	str	sl, [fp, #-72]	; 0xffffffb8
   11ce8:	str	r3, [sp, #84]	; 0x54
   11cec:	cmp	r0, #0
   11cf0:	movwne	r0, #1
   11cf4:	and	r0, r0, sl
   11cf8:	str	r0, [fp, #-88]	; 0xffffffa8
   11cfc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d00:	cmp	r0, #0
   11d04:	movwne	r0, #1
   11d08:	subs	r2, r9, #2
   11d0c:	and	r1, r0, sl
   11d10:	str	r2, [fp, #-80]	; 0xffffffb0
   11d14:	and	r1, r3, r1
   11d18:	str	r1, [sp, #44]	; 0x2c
   11d1c:	clz	r1, r2
   11d20:	lsr	r1, r1, #5
   11d24:	and	r1, r1, sl
   11d28:	str	r1, [sp, #56]	; 0x38
   11d2c:	mov	r1, r2
   11d30:	eor	r2, sl, #1
   11d34:	movwne	r1, #1
   11d38:	str	r2, [sp, #88]	; 0x58
   11d3c:	orr	r2, r1, r2
   11d40:	and	r1, r1, r3
   11d44:	and	r0, r0, r1
   11d48:	str	r2, [sp, #60]	; 0x3c
   11d4c:	str	r1, [fp, #-68]	; 0xffffffbc
   11d50:	str	r0, [fp, #-60]	; 0xffffffc4
   11d54:	eor	r0, r3, #1
   11d58:	str	r0, [sp, #48]	; 0x30
   11d5c:	cmn	lr, #1
   11d60:	beq	11d70 <__assert_fail@plt+0xf28>
   11d64:	cmp	r7, lr
   11d68:	bne	11d7c <__assert_fail@plt+0xf34>
   11d6c:	b	12928 <__assert_fail@plt+0x1ae0>
   11d70:	ldrb	r0, [ip, r7]
   11d74:	cmp	r0, #0
   11d78:	beq	12930 <__assert_fail@plt+0x1ae8>
   11d7c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d80:	mov	r9, #0
   11d84:	str	r5, [fp, #-48]	; 0xffffffd0
   11d88:	str	r6, [fp, #-52]	; 0xffffffcc
   11d8c:	cmp	r0, #0
   11d90:	beq	11dd0 <__assert_fail@plt+0xf88>
   11d94:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d98:	mov	r5, r4
   11d9c:	add	r4, r7, r0
   11da0:	cmp	r0, #2
   11da4:	bcc	11dc0 <__assert_fail@plt+0xf78>
   11da8:	cmn	lr, #1
   11dac:	bne	11dc0 <__assert_fail@plt+0xf78>
   11db0:	mov	r0, ip
   11db4:	bl	10d7c <strlen@plt>
   11db8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11dbc:	mov	lr, r0
   11dc0:	cmp	r4, lr
   11dc4:	bls	11dd8 <__assert_fail@plt+0xf90>
   11dc8:	mov	r6, #0
   11dcc:	b	11e18 <__assert_fail@plt+0xfd0>
   11dd0:	mov	r6, #0
   11dd4:	b	11e1c <__assert_fail@plt+0xfd4>
   11dd8:	ldr	r1, [sp, #92]	; 0x5c
   11ddc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11de0:	add	r0, ip, r7
   11de4:	mov	r4, lr
   11de8:	bl	10ca4 <memcmp@plt>
   11dec:	ldr	r2, [sp, #88]	; 0x58
   11df0:	cmp	r0, #0
   11df4:	mov	r1, r0
   11df8:	movwne	r1, #1
   11dfc:	orr	r1, r1, r2
   11e00:	tst	r1, #1
   11e04:	beq	129c4 <__assert_fail@plt+0x1b7c>
   11e08:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e0c:	clz	r0, r0
   11e10:	mov	lr, r4
   11e14:	lsr	r6, r0, #5
   11e18:	mov	r4, r5
   11e1c:	ldrb	r5, [ip, r7]
   11e20:	cmp	r5, #126	; 0x7e
   11e24:	bhi	121ec <__assert_fail@plt+0x13a4>
   11e28:	add	r3, pc, #16
   11e2c:	mov	sl, #1
   11e30:	mov	r2, #110	; 0x6e
   11e34:	mov	r0, #97	; 0x61
   11e38:	mov	r1, #0
   11e3c:	ldr	pc, [r3, r5, lsl #2]
   11e40:	ldrdeq	r2, [r1], -r0
   11e44:	andeq	r2, r1, ip, ror #3
   11e48:	andeq	r2, r1, ip, ror #3
   11e4c:	andeq	r2, r1, ip, ror #3
   11e50:	andeq	r2, r1, ip, ror #3
   11e54:	andeq	r2, r1, ip, ror #3
   11e58:	andeq	r2, r1, ip, ror #3
   11e5c:	muleq	r1, r0, r2
   11e60:	strheq	r2, [r1], -r0
   11e64:	andeq	r2, r1, r8, lsr #1
   11e68:	strheq	r2, [r1], -ip
   11e6c:	andeq	r2, r1, r0, asr #2
   11e70:	andeq	r2, r1, r0, lsr #1
   11e74:	strheq	r2, [r1], -r8
   11e78:	andeq	r2, r1, ip, ror #3
   11e7c:	andeq	r2, r1, ip, ror #3
   11e80:	andeq	r2, r1, ip, ror #3
   11e84:	andeq	r2, r1, ip, ror #3
   11e88:	andeq	r2, r1, ip, ror #3
   11e8c:	andeq	r2, r1, ip, ror #3
   11e90:	andeq	r2, r1, ip, ror #3
   11e94:	andeq	r2, r1, ip, ror #3
   11e98:	andeq	r2, r1, ip, ror #3
   11e9c:	andeq	r2, r1, ip, ror #3
   11ea0:	andeq	r2, r1, ip, ror #3
   11ea4:	andeq	r2, r1, ip, ror #3
   11ea8:	andeq	r2, r1, ip, ror #3
   11eac:	andeq	r2, r1, ip, ror #3
   11eb0:	andeq	r2, r1, ip, ror #3
   11eb4:	andeq	r2, r1, ip, ror #3
   11eb8:	andeq	r2, r1, ip, ror #3
   11ebc:	andeq	r2, r1, ip, ror #3
   11ec0:	andeq	r2, r1, r0, asr r2
   11ec4:	andeq	r2, r1, r4, asr r2
   11ec8:	andeq	r2, r1, r4, asr r2
   11ecc:	andeq	r2, r1, r0, asr r0
   11ed0:	andeq	r2, r1, r4, asr r2
   11ed4:	andeq	r2, r1, ip, lsr r0
   11ed8:	andeq	r2, r1, r4, asr r2
   11edc:	andeq	r2, r1, r8, asr #2
   11ee0:	andeq	r2, r1, r4, asr r2
   11ee4:	andeq	r2, r1, r4, asr r2
   11ee8:	andeq	r2, r1, r4, asr r2
   11eec:	andeq	r2, r1, ip, lsr r0
   11ef0:	andeq	r2, r1, ip, lsr r0
   11ef4:	andeq	r2, r1, ip, lsr r0
   11ef8:	andeq	r2, r1, ip, lsr r0
   11efc:	andeq	r2, r1, ip, lsr r0
   11f00:	andeq	r2, r1, ip, lsr r0
   11f04:	andeq	r2, r1, ip, lsr r0
   11f08:	andeq	r2, r1, ip, lsr r0
   11f0c:	andeq	r2, r1, ip, lsr r0
   11f10:	andeq	r2, r1, ip, lsr r0
   11f14:	andeq	r2, r1, ip, lsr r0
   11f18:	andeq	r2, r1, ip, lsr r0
   11f1c:	andeq	r2, r1, ip, lsr r0
   11f20:	andeq	r2, r1, ip, lsr r0
   11f24:	andeq	r2, r1, ip, lsr r0
   11f28:	andeq	r2, r1, ip, lsr r0
   11f2c:	andeq	r2, r1, r4, asr r2
   11f30:	andeq	r2, r1, r4, asr r2
   11f34:	andeq	r2, r1, r4, asr r2
   11f38:	andeq	r2, r1, r4, asr r2
   11f3c:	andeq	r2, r1, r4, lsl r1
   11f40:	andeq	r2, r1, ip, ror #3
   11f44:	andeq	r2, r1, ip, lsr r0
   11f48:	andeq	r2, r1, ip, lsr r0
   11f4c:	andeq	r2, r1, ip, lsr r0
   11f50:	andeq	r2, r1, ip, lsr r0
   11f54:	andeq	r2, r1, ip, lsr r0
   11f58:	andeq	r2, r1, ip, lsr r0
   11f5c:	andeq	r2, r1, ip, lsr r0
   11f60:	andeq	r2, r1, ip, lsr r0
   11f64:	andeq	r2, r1, ip, lsr r0
   11f68:	andeq	r2, r1, ip, lsr r0
   11f6c:	andeq	r2, r1, ip, lsr r0
   11f70:	andeq	r2, r1, ip, lsr r0
   11f74:	andeq	r2, r1, ip, lsr r0
   11f78:	andeq	r2, r1, ip, lsr r0
   11f7c:	andeq	r2, r1, ip, lsr r0
   11f80:	andeq	r2, r1, ip, lsr r0
   11f84:	andeq	r2, r1, ip, lsr r0
   11f88:	andeq	r2, r1, ip, lsr r0
   11f8c:	andeq	r2, r1, ip, lsr r0
   11f90:	andeq	r2, r1, ip, lsr r0
   11f94:	andeq	r2, r1, ip, lsr r0
   11f98:	andeq	r2, r1, ip, lsr r0
   11f9c:	andeq	r2, r1, ip, lsr r0
   11fa0:	andeq	r2, r1, ip, lsr r0
   11fa4:	andeq	r2, r1, ip, lsr r0
   11fa8:	andeq	r2, r1, ip, lsr r0
   11fac:	andeq	r2, r1, r4, asr r2
   11fb0:	andeq	r2, r1, ip, ror r0
   11fb4:	andeq	r2, r1, ip, lsr r0
   11fb8:	andeq	r2, r1, r4, asr r2
   11fbc:	andeq	r2, r1, ip, lsr r0
   11fc0:	andeq	r2, r1, r4, asr r2
   11fc4:	andeq	r2, r1, ip, lsr r0
   11fc8:	andeq	r2, r1, ip, lsr r0
   11fcc:	andeq	r2, r1, ip, lsr r0
   11fd0:	andeq	r2, r1, ip, lsr r0
   11fd4:	andeq	r2, r1, ip, lsr r0
   11fd8:	andeq	r2, r1, ip, lsr r0
   11fdc:	andeq	r2, r1, ip, lsr r0
   11fe0:	andeq	r2, r1, ip, lsr r0
   11fe4:	andeq	r2, r1, ip, lsr r0
   11fe8:	andeq	r2, r1, ip, lsr r0
   11fec:	andeq	r2, r1, ip, lsr r0
   11ff0:	andeq	r2, r1, ip, lsr r0
   11ff4:	andeq	r2, r1, ip, lsr r0
   11ff8:	andeq	r2, r1, ip, lsr r0
   11ffc:	andeq	r2, r1, ip, lsr r0
   12000:	andeq	r2, r1, ip, lsr r0
   12004:	andeq	r2, r1, ip, lsr r0
   12008:	andeq	r2, r1, ip, lsr r0
   1200c:	andeq	r2, r1, ip, lsr r0
   12010:	andeq	r2, r1, ip, lsr r0
   12014:	andeq	r2, r1, ip, lsr r0
   12018:	andeq	r2, r1, ip, lsr r0
   1201c:	andeq	r2, r1, ip, lsr r0
   12020:	andeq	r2, r1, ip, lsr r0
   12024:	andeq	r2, r1, ip, lsr r0
   12028:	andeq	r2, r1, ip, lsr r0
   1202c:	andeq	r2, r1, r0, rrx
   12030:	andeq	r2, r1, r4, asr r2
   12034:	andeq	r2, r1, r0, rrx
   12038:	andeq	r2, r1, r0, asr r0
   1203c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12040:	cmp	r0, #0
   12044:	beq	122a4 <__assert_fail@plt+0x145c>
   12048:	ldr	r0, [fp, #16]
   1204c:	b	122a8 <__assert_fail@plt+0x1460>
   12050:	mov	sl, #0
   12054:	cmp	r7, #0
   12058:	bne	124c0 <__assert_fail@plt+0x1678>
   1205c:	b	12250 <__assert_fail@plt+0x1408>
   12060:	mov	sl, #0
   12064:	cmn	lr, #1
   12068:	beq	1223c <__assert_fail@plt+0x13f4>
   1206c:	cmp	r7, #0
   12070:	cmpeq	lr, #1
   12074:	bne	124c0 <__assert_fail@plt+0x1678>
   12078:	b	12250 <__assert_fail@plt+0x1408>
   1207c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12080:	cmp	r0, #2
   12084:	bne	12274 <__assert_fail@plt+0x142c>
   12088:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1208c:	tst	r0, #1
   12090:	bne	129e0 <__assert_fail@plt+0x1b98>
   12094:	mov	r9, #0
   12098:	mov	r0, #92	; 0x5c
   1209c:	b	12288 <__assert_fail@plt+0x1440>
   120a0:	mov	r0, #102	; 0x66
   120a4:	b	12290 <__assert_fail@plt+0x1448>
   120a8:	mov	r2, #116	; 0x74
   120ac:	b	120bc <__assert_fail@plt+0x1274>
   120b0:	mov	r0, #98	; 0x62
   120b4:	b	12290 <__assert_fail@plt+0x1448>
   120b8:	mov	r2, #114	; 0x72
   120bc:	ldr	r0, [sp, #60]	; 0x3c
   120c0:	tst	r0, #1
   120c4:	mov	r0, r2
   120c8:	bne	12290 <__assert_fail@plt+0x1448>
   120cc:	b	129e0 <__assert_fail@plt+0x1b98>
   120d0:	ldr	r0, [sp, #84]	; 0x54
   120d4:	tst	r0, #1
   120d8:	beq	1237c <__assert_fail@plt+0x1534>
   120dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120e0:	tst	r0, #1
   120e4:	bne	12ae8 <__assert_fail@plt+0x1ca0>
   120e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   120f0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   120f4:	cmp	r0, #2
   120f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120fc:	movwne	r0, #1
   12100:	orr	r0, r0, r3
   12104:	tst	r0, #1
   12108:	beq	127fc <__assert_fail@plt+0x19b4>
   1210c:	mov	r0, r8
   12110:	b	1283c <__assert_fail@plt+0x19f4>
   12114:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12118:	mov	r9, #0
   1211c:	mov	r5, #63	; 0x3f
   12120:	cmp	r0, #5
   12124:	beq	124c8 <__assert_fail@plt+0x1680>
   12128:	cmp	r0, #2
   1212c:	bne	12588 <__assert_fail@plt+0x1740>
   12130:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12134:	tst	r0, #1
   12138:	beq	1258c <__assert_fail@plt+0x1744>
   1213c:	b	129e0 <__assert_fail@plt+0x1b98>
   12140:	mov	r0, #118	; 0x76
   12144:	b	12290 <__assert_fail@plt+0x1448>
   12148:	mov	r0, #1
   1214c:	mov	r5, #39	; 0x27
   12150:	str	r0, [sp, #52]	; 0x34
   12154:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12158:	cmp	r0, #2
   1215c:	bne	121e4 <__assert_fail@plt+0x139c>
   12160:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12164:	tst	r0, #1
   12168:	bne	129e0 <__assert_fail@plt+0x1b98>
   1216c:	ldr	r3, [sp, #68]	; 0x44
   12170:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12174:	mov	r9, #0
   12178:	clz	r1, r2
   1217c:	cmp	r3, #0
   12180:	mov	r0, r3
   12184:	movwne	r0, #1
   12188:	lsr	r1, r1, #5
   1218c:	orrs	r0, r0, r1
   12190:	moveq	r3, r2
   12194:	moveq	r2, r0
   12198:	cmp	r8, r2
   1219c:	str	r3, [sp, #68]	; 0x44
   121a0:	str	r2, [fp, #-52]	; 0xffffffcc
   121a4:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   121a8:	movcc	r0, #39	; 0x27
   121ac:	strbcc	r0, [r1, r8]
   121b0:	add	r0, r8, #1
   121b4:	cmp	r0, r2
   121b8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   121bc:	movcc	r1, #92	; 0x5c
   121c0:	strbcc	r1, [r3, r0]
   121c4:	add	r0, r8, #2
   121c8:	add	r8, r8, #3
   121cc:	cmp	r0, r2
   121d0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   121d4:	movcc	r1, #39	; 0x27
   121d8:	strbcc	r1, [r2, r0]
   121dc:	mov	r0, #0
   121e0:	str	r0, [fp, #-48]	; 0xffffffd0
   121e4:	mov	sl, #1
   121e8:	b	1203c <__assert_fail@plt+0x11f4>
   121ec:	ldr	r0, [sp, #32]
   121f0:	cmp	r0, #1
   121f4:	bne	123a0 <__assert_fail@plt+0x1558>
   121f8:	str	lr, [sp, #80]	; 0x50
   121fc:	bl	10d64 <__ctype_b_loc@plt>
   12200:	ldr	r0, [r0]
   12204:	ldr	ip, [fp, #-84]	; 0xffffffac
   12208:	mov	r1, #1
   1220c:	add	r0, r0, r5, lsl #1
   12210:	ldrb	r0, [r0, #1]
   12214:	ubfx	sl, r0, #6, #1
   12218:	ldr	r0, [sp, #48]	; 0x30
   1221c:	mov	r2, r1
   12220:	cmp	r1, #1
   12224:	orr	r0, sl, r0
   12228:	bhi	12594 <__assert_fail@plt+0x174c>
   1222c:	tst	r0, #1
   12230:	beq	12594 <__assert_fail@plt+0x174c>
   12234:	ldr	lr, [sp, #80]	; 0x50
   12238:	b	1203c <__assert_fail@plt+0x11f4>
   1223c:	cmp	r7, #0
   12240:	bne	124bc <__assert_fail@plt+0x1674>
   12244:	ldrb	r0, [ip, #1]
   12248:	cmp	r0, #0
   1224c:	bne	124bc <__assert_fail@plt+0x1674>
   12250:	mov	r1, #1
   12254:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12258:	cmp	r0, #2
   1225c:	bne	1226c <__assert_fail@plt+0x1424>
   12260:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12264:	tst	r0, #1
   12268:	bne	129e0 <__assert_fail@plt+0x1b98>
   1226c:	mov	sl, r1
   12270:	b	1203c <__assert_fail@plt+0x11f4>
   12274:	ldr	r1, [sp, #44]	; 0x2c
   12278:	mov	r9, #0
   1227c:	mov	r0, #92	; 0x5c
   12280:	cmp	r1, #0
   12284:	beq	12290 <__assert_fail@plt+0x1448>
   12288:	mov	sl, #0
   1228c:	b	127a8 <__assert_fail@plt+0x1960>
   12290:	ldr	r1, [sp, #84]	; 0x54
   12294:	mov	sl, #0
   12298:	mov	r9, #0
   1229c:	tst	r1, #1
   122a0:	bne	122dc <__assert_fail@plt+0x1494>
   122a4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   122a8:	cmp	r0, #0
   122ac:	mov	r0, r5
   122b0:	beq	122d4 <__assert_fail@plt+0x148c>
   122b4:	ldr	r1, [fp, #16]
   122b8:	ubfx	r0, r5, #5, #3
   122bc:	mov	r2, #1
   122c0:	ldr	r0, [r1, r0, lsl #2]
   122c4:	and	r1, r5, #31
   122c8:	tst	r0, r2, lsl r1
   122cc:	mov	r0, r5
   122d0:	bne	122dc <__assert_fail@plt+0x1494>
   122d4:	cmp	r6, #0
   122d8:	beq	127a8 <__assert_fail@plt+0x1960>
   122dc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   122e0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   122e4:	tst	r1, #1
   122e8:	bne	129bc <__assert_fail@plt+0x1b74>
   122ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122f0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122f4:	cmp	r1, #2
   122f8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122fc:	movwne	r1, #1
   12300:	orr	r1, r1, r5
   12304:	tst	r1, #1
   12308:	bne	1234c <__assert_fail@plt+0x1504>
   1230c:	cmp	r8, r6
   12310:	mov	r5, #1
   12314:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12318:	movcc	r1, #39	; 0x27
   1231c:	strbcc	r1, [r2, r8]
   12320:	add	r1, r8, #1
   12324:	cmp	r1, r6
   12328:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1232c:	movcc	r2, #36	; 0x24
   12330:	strbcc	r2, [r3, r1]
   12334:	add	r1, r8, #2
   12338:	add	r8, r8, #3
   1233c:	cmp	r1, r6
   12340:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12344:	movcc	r2, #39	; 0x27
   12348:	strbcc	r2, [r3, r1]
   1234c:	cmp	r8, r6
   12350:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12354:	movcc	r1, #92	; 0x5c
   12358:	strbcc	r1, [r2, r8]
   1235c:	add	r8, r8, #1
   12360:	cmp	r8, r6
   12364:	and	r4, r4, sl
   12368:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1236c:	strbcc	r0, [r1, r8]
   12370:	add	r8, r8, #1
   12374:	add	r7, r7, #1
   12378:	b	11d5c <__assert_fail@plt+0xf14>
   1237c:	ldr	r0, [sp, #28]
   12380:	mov	sl, #0
   12384:	mov	r9, #0
   12388:	mov	r5, #0
   1238c:	cmp	r0, #0
   12390:	beq	122a4 <__assert_fail@plt+0x145c>
   12394:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12398:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1239c:	b	12374 <__assert_fail@plt+0x152c>
   123a0:	mov	r0, #0
   123a4:	cmn	lr, #1
   123a8:	str	r6, [sp, #76]	; 0x4c
   123ac:	str	r4, [sp, #20]
   123b0:	str	r0, [fp, #-36]	; 0xffffffdc
   123b4:	str	r0, [fp, #-40]	; 0xffffffd8
   123b8:	bne	123cc <__assert_fail@plt+0x1584>
   123bc:	mov	r0, ip
   123c0:	bl	10d7c <strlen@plt>
   123c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   123c8:	mov	lr, r0
   123cc:	add	r0, ip, r7
   123d0:	mov	sl, #1
   123d4:	mov	r6, #0
   123d8:	sub	r4, fp, #40	; 0x28
   123dc:	str	lr, [sp, #80]	; 0x50
   123e0:	str	r0, [sp, #36]	; 0x24
   123e4:	str	r6, [sp, #40]	; 0x28
   123e8:	add	r6, r6, r7
   123ec:	sub	r0, fp, #44	; 0x2c
   123f0:	mov	r3, r4
   123f4:	add	r1, ip, r6
   123f8:	sub	r2, lr, r6
   123fc:	bl	14020 <__assert_fail@plt+0x31d8>
   12400:	cmp	r0, #0
   12404:	beq	12910 <__assert_fail@plt+0x1ac8>
   12408:	cmn	r0, #1
   1240c:	beq	128d0 <__assert_fail@plt+0x1a88>
   12410:	ldr	lr, [sp, #80]	; 0x50
   12414:	cmn	r0, #2
   12418:	beq	128d8 <__assert_fail@plt+0x1a90>
   1241c:	ldr	r2, [sp, #56]	; 0x38
   12420:	cmp	r0, #2
   12424:	mov	r1, #0
   12428:	movwcc	r1, #1
   1242c:	eor	r2, r2, #1
   12430:	orrs	r1, r2, r1
   12434:	bne	12480 <__assert_fail@plt+0x1638>
   12438:	ldr	r1, [sp, #40]	; 0x28
   1243c:	ldr	r2, [sp, #36]	; 0x24
   12440:	add	ip, r2, r1
   12444:	mov	r2, #1
   12448:	ldrb	r3, [ip, r2]
   1244c:	sub	r6, r3, #94	; 0x5e
   12450:	cmp	r6, #30
   12454:	bhi	12468 <__assert_fail@plt+0x1620>
   12458:	mov	r4, #1
   1245c:	mov	r1, #1073741829	; 0x40000005
   12460:	tst	r1, r4, lsl r6
   12464:	bne	129dc <__assert_fail@plt+0x1b94>
   12468:	sub	r3, r3, #91	; 0x5b
   1246c:	cmp	r3, #2
   12470:	bcc	129dc <__assert_fail@plt+0x1b94>
   12474:	add	r2, r2, #1
   12478:	cmp	r2, r0
   1247c:	bcc	12448 <__assert_fail@plt+0x1600>
   12480:	ldr	r6, [sp, #40]	; 0x28
   12484:	add	r6, r0, r6
   12488:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1248c:	bl	10cd4 <iswprint@plt>
   12490:	cmp	r0, #0
   12494:	sub	r4, fp, #40	; 0x28
   12498:	movwne	r0, #1
   1249c:	and	sl, sl, r0
   124a0:	mov	r0, r4
   124a4:	bl	10c98 <mbsinit@plt>
   124a8:	ldr	lr, [sp, #80]	; 0x50
   124ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   124b0:	cmp	r0, #0
   124b4:	beq	123e4 <__assert_fail@plt+0x159c>
   124b8:	b	12918 <__assert_fail@plt+0x1ad0>
   124bc:	mvn	lr, #0
   124c0:	mov	r9, #0
   124c4:	b	1203c <__assert_fail@plt+0x11f4>
   124c8:	ldr	r0, [sp, #24]
   124cc:	cmp	r0, #0
   124d0:	beq	12588 <__assert_fail@plt+0x1740>
   124d4:	add	r0, r7, #2
   124d8:	cmp	r0, lr
   124dc:	bcs	12588 <__assert_fail@plt+0x1740>
   124e0:	add	r1, ip, r7
   124e4:	ldrb	r1, [r1, #1]
   124e8:	cmp	r1, #63	; 0x3f
   124ec:	bne	12588 <__assert_fail@plt+0x1740>
   124f0:	ldrb	r5, [ip, r0]
   124f4:	sub	r1, r5, #33	; 0x21
   124f8:	cmp	r1, #29
   124fc:	bhi	12588 <__assert_fail@plt+0x1740>
   12500:	movw	r3, #20929	; 0x51c1
   12504:	mov	r2, #1
   12508:	movt	r3, #14336	; 0x3800
   1250c:	tst	r3, r2, lsl r1
   12510:	beq	12588 <__assert_fail@plt+0x1740>
   12514:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12518:	tst	r1, #1
   1251c:	bne	12af0 <__assert_fail@plt+0x1ca8>
   12520:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12524:	mov	r7, r0
   12528:	cmp	r8, r1
   1252c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12530:	movcc	r1, #63	; 0x3f
   12534:	strbcc	r1, [r2, r8]
   12538:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1253c:	add	r1, r8, #1
   12540:	cmp	r1, r2
   12544:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12548:	movcc	r2, #34	; 0x22
   1254c:	strbcc	r2, [r3, r1]
   12550:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12554:	add	r1, r8, #2
   12558:	cmp	r1, r2
   1255c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12560:	movcc	r2, #34	; 0x22
   12564:	strbcc	r2, [r3, r1]
   12568:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1256c:	add	r1, r8, #3
   12570:	add	r8, r8, #4
   12574:	cmp	r1, r2
   12578:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1257c:	movcc	r2, #63	; 0x3f
   12580:	strbcc	r2, [r3, r1]
   12584:	b	1258c <__assert_fail@plt+0x1744>
   12588:	mov	r5, #63	; 0x3f
   1258c:	mov	sl, #0
   12590:	b	1203c <__assert_fail@plt+0x11f4>
   12594:	str	r0, [sp, #40]	; 0x28
   12598:	add	r0, r2, r7
   1259c:	str	r6, [sp, #76]	; 0x4c
   125a0:	add	r1, r7, #1
   125a4:	ldr	lr, [sp, #80]	; 0x50
   125a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   125ac:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125b0:	mov	r3, #0
   125b4:	str	r0, [sp, #36]	; 0x24
   125b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125bc:	b	12650 <__assert_fail@plt+0x1808>
   125c0:	str	r0, [sp, #76]	; 0x4c
   125c4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125c8:	cmp	r9, #0
   125cc:	movwne	r9, #1
   125d0:	mvn	r7, r0
   125d4:	orr	r7, r7, r9
   125d8:	tst	r7, #1
   125dc:	bne	1262c <__assert_fail@plt+0x17e4>
   125e0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125e4:	cmp	r8, r6
   125e8:	bcs	12600 <__assert_fail@plt+0x17b8>
   125ec:	ldr	r7, [fp, #-56]	; 0xffffffc8
   125f0:	mov	r2, r4
   125f4:	mov	r4, #39	; 0x27
   125f8:	strb	r4, [r7, r8]
   125fc:	mov	r4, r2
   12600:	add	r7, r8, #1
   12604:	cmp	r7, r6
   12608:	bcs	12620 <__assert_fail@plt+0x17d8>
   1260c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12610:	mov	r2, r4
   12614:	mov	r4, #39	; 0x27
   12618:	strb	r4, [r0, r7]
   1261c:	mov	r4, r2
   12620:	add	r8, r8, #2
   12624:	mov	r0, #0
   12628:	b	12634 <__assert_fail@plt+0x17ec>
   1262c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12630:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12634:	cmp	r8, r6
   12638:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1263c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12640:	strbcc	r5, [r2, r8]
   12644:	add	r8, r8, #1
   12648:	ldrb	r5, [ip, r1]
   1264c:	add	r1, r1, #1
   12650:	ldr	r2, [sp, #40]	; 0x28
   12654:	tst	r2, #1
   12658:	beq	12694 <__assert_fail@plt+0x184c>
   1265c:	ldr	r2, [sp, #76]	; 0x4c
   12660:	str	r0, [fp, #-48]	; 0xffffffd0
   12664:	tst	r2, #1
   12668:	beq	1268c <__assert_fail@plt+0x1844>
   1266c:	cmp	r8, r6
   12670:	bcs	12688 <__assert_fail@plt+0x1840>
   12674:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12678:	mov	r2, r4
   1267c:	mov	r4, #92	; 0x5c
   12680:	strb	r4, [r6, r8]
   12684:	mov	r4, r2
   12688:	add	r8, r8, #1
   1268c:	mov	r0, #0
   12690:	b	12788 <__assert_fail@plt+0x1940>
   12694:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12698:	tst	r2, #1
   1269c:	bne	129e8 <__assert_fail@plt+0x1ba0>
   126a0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   126a4:	cmp	r7, #2
   126a8:	movwne	r3, #1
   126ac:	orr	r3, r3, r0
   126b0:	tst	r3, #1
   126b4:	bne	12710 <__assert_fail@plt+0x18c8>
   126b8:	cmp	r8, r6
   126bc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   126c0:	movcc	r3, #39	; 0x27
   126c4:	strbcc	r3, [r2, r8]
   126c8:	add	r3, r8, #1
   126cc:	cmp	r3, r6
   126d0:	bcs	126e8 <__assert_fail@plt+0x18a0>
   126d4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126d8:	mov	r7, r4
   126dc:	mov	r4, #36	; 0x24
   126e0:	strb	r4, [r2, r3]
   126e4:	mov	r4, r7
   126e8:	add	r3, r8, #2
   126ec:	cmp	r3, r6
   126f0:	bcs	12708 <__assert_fail@plt+0x18c0>
   126f4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126f8:	mov	r7, r4
   126fc:	mov	r4, #39	; 0x27
   12700:	strb	r4, [r2, r3]
   12704:	mov	r4, r7
   12708:	add	r8, r8, #3
   1270c:	mov	r0, #1
   12710:	cmp	r8, r6
   12714:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12718:	movcc	r3, #92	; 0x5c
   1271c:	strbcc	r3, [r2, r8]
   12720:	add	r3, r8, #1
   12724:	cmp	r3, r6
   12728:	bcs	12748 <__assert_fail@plt+0x1900>
   1272c:	mov	r2, r4
   12730:	and	r7, r5, #192	; 0xc0
   12734:	mov	r4, #48	; 0x30
   12738:	orr	r7, r4, r7, lsr #6
   1273c:	mov	r4, r2
   12740:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12744:	strb	r7, [r2, r3]
   12748:	add	r3, r8, #2
   1274c:	cmp	r3, r6
   12750:	bcs	12770 <__assert_fail@plt+0x1928>
   12754:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12758:	mov	r6, r4
   1275c:	lsr	r7, r5, #3
   12760:	mov	r4, #6
   12764:	bfi	r7, r4, #3, #29
   12768:	mov	r4, r6
   1276c:	strb	r7, [r2, r3]
   12770:	str	r0, [fp, #-48]	; 0xffffffd0
   12774:	ldr	r0, [sp, #76]	; 0x4c
   12778:	mov	r3, #6
   1277c:	add	r8, r8, #3
   12780:	bfi	r5, r3, #3, #29
   12784:	mov	r3, #1
   12788:	ldr	r2, [sp, #36]	; 0x24
   1278c:	and	r9, r3, #1
   12790:	cmp	r2, r1
   12794:	bhi	125c0 <__assert_fail@plt+0x1778>
   12798:	cmp	r9, #0
   1279c:	sub	r7, r1, #1
   127a0:	mov	r0, r5
   127a4:	movwne	r9, #1
   127a8:	cmp	r9, #0
   127ac:	bne	127f0 <__assert_fail@plt+0x19a8>
   127b0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127b4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127b8:	tst	r5, #1
   127bc:	beq	12360 <__assert_fail@plt+0x1518>
   127c0:	cmp	r8, r6
   127c4:	mov	r5, #0
   127c8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   127cc:	movcc	r1, #39	; 0x27
   127d0:	strbcc	r1, [r2, r8]
   127d4:	add	r1, r8, #1
   127d8:	add	r8, r8, #2
   127dc:	cmp	r1, r6
   127e0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   127e4:	movcc	r2, #39	; 0x27
   127e8:	strbcc	r2, [r3, r1]
   127ec:	b	12360 <__assert_fail@plt+0x1518>
   127f0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127f4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127f8:	b	12360 <__assert_fail@plt+0x1518>
   127fc:	cmp	r8, r1
   12800:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12804:	movcc	r0, #39	; 0x27
   12808:	strbcc	r0, [r2, r8]
   1280c:	add	r0, r8, #1
   12810:	cmp	r0, r1
   12814:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12818:	movcc	r2, #36	; 0x24
   1281c:	strbcc	r2, [r3, r0]
   12820:	add	r0, r8, #2
   12824:	cmp	r0, r1
   12828:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1282c:	movcc	r2, #39	; 0x27
   12830:	strbcc	r2, [r3, r0]
   12834:	add	r0, r8, #3
   12838:	mov	r3, #1
   1283c:	cmp	r0, r1
   12840:	add	r8, r0, #1
   12844:	str	r3, [fp, #-48]	; 0xffffffd0
   12848:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1284c:	movcc	r1, #92	; 0x5c
   12850:	strbcc	r1, [r2, r0]
   12854:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12858:	cmp	r1, #2
   1285c:	beq	128c0 <__assert_fail@plt+0x1a78>
   12860:	add	r1, r7, #1
   12864:	mov	sl, #0
   12868:	mov	r9, #1
   1286c:	mov	r5, #48	; 0x30
   12870:	cmp	r1, lr
   12874:	bcs	1203c <__assert_fail@plt+0x11f4>
   12878:	ldrb	r1, [ip, r1]
   1287c:	sub	r1, r1, #48	; 0x30
   12880:	uxtb	r1, r1
   12884:	cmp	r1, #9
   12888:	bhi	1203c <__assert_fail@plt+0x11f4>
   1288c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12890:	cmp	r8, r1
   12894:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12898:	movcc	r1, #48	; 0x30
   1289c:	strbcc	r1, [r2, r8]
   128a0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   128a4:	add	r1, r0, #2
   128a8:	add	r8, r0, #3
   128ac:	cmp	r1, r2
   128b0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   128b4:	movcc	r2, #48	; 0x30
   128b8:	strbcc	r2, [r3, r1]
   128bc:	b	1203c <__assert_fail@plt+0x11f4>
   128c0:	mov	r0, #48	; 0x30
   128c4:	mov	r9, #1
   128c8:	mov	sl, #0
   128cc:	b	122d4 <__assert_fail@plt+0x148c>
   128d0:	mov	sl, #0
   128d4:	b	12910 <__assert_fail@plt+0x1ac8>
   128d8:	mov	sl, #0
   128dc:	cmp	lr, r6
   128e0:	bls	12910 <__assert_fail@plt+0x1ac8>
   128e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   128e8:	ldr	r6, [sp, #40]	; 0x28
   128ec:	ldr	r0, [sp, #36]	; 0x24
   128f0:	ldrb	r0, [r0, r6]
   128f4:	cmp	r0, #0
   128f8:	beq	12918 <__assert_fail@plt+0x1ad0>
   128fc:	add	r6, r6, #1
   12900:	add	r0, r7, r6
   12904:	cmp	r0, lr
   12908:	bcc	128ec <__assert_fail@plt+0x1aa4>
   1290c:	b	12918 <__assert_fail@plt+0x1ad0>
   12910:	ldr	ip, [fp, #-84]	; 0xffffffac
   12914:	ldr	r6, [sp, #40]	; 0x28
   12918:	mov	r1, r6
   1291c:	ldr	r4, [sp, #20]
   12920:	ldr	r6, [sp, #76]	; 0x4c
   12924:	b	12218 <__assert_fail@plt+0x13d0>
   12928:	mov	lr, r7
   1292c:	b	12934 <__assert_fail@plt+0x1aec>
   12930:	mvn	lr, #0
   12934:	ldr	r9, [fp, #-64]	; 0xffffffc0
   12938:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1293c:	eor	r0, r9, #2
   12940:	orr	r0, r0, r8
   12944:	clz	r0, r0
   12948:	lsr	r0, r0, #5
   1294c:	tst	r1, r0
   12950:	bne	12a4c <__assert_fail@plt+0x1c04>
   12954:	mov	r0, r1
   12958:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1295c:	cmp	r9, #2
   12960:	movwne	r1, #1
   12964:	orr	r0, r0, r1
   12968:	tst	r0, #1
   1296c:	bne	12a8c <__assert_fail@plt+0x1c44>
   12970:	ldr	r0, [sp, #52]	; 0x34
   12974:	ldr	r1, [sp, #68]	; 0x44
   12978:	str	lr, [sp, #80]	; 0x50
   1297c:	eor	r0, r0, #1
   12980:	tst	r0, #1
   12984:	bne	12a8c <__assert_fail@plt+0x1c44>
   12988:	tst	r4, #1
   1298c:	bne	12a54 <__assert_fail@plt+0x1c0c>
   12990:	mov	r7, #0
   12994:	cmp	r1, #0
   12998:	beq	12a84 <__assert_fail@plt+0x1c3c>
   1299c:	ldr	r0, [sp, #84]	; 0x54
   129a0:	mov	r3, #0
   129a4:	cmp	r6, #0
   129a8:	mov	r2, #0
   129ac:	mov	r4, r1
   129b0:	str	r3, [fp, #-72]	; 0xffffffb8
   129b4:	beq	11af0 <__assert_fail@plt+0xca8>
   129b8:	b	12a8c <__assert_fail@plt+0x1c44>
   129bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129c0:	b	129e8 <__assert_fail@plt+0x1ba0>
   129c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129c8:	mov	r2, #1
   129cc:	mov	lr, r4
   129d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129d4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129d8:	b	129ec <__assert_fail@plt+0x1ba4>
   129dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   129e0:	mov	r7, #2
   129e4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129e8:	ldr	r2, [sp, #84]	; 0x54
   129ec:	mov	r0, #0
   129f0:	ldr	r1, [fp, #12]
   129f4:	tst	r2, #1
   129f8:	mov	r2, r7
   129fc:	mov	r3, lr
   12a00:	str	r0, [sp, #8]
   12a04:	ldr	r0, [sp, #64]	; 0x40
   12a08:	movwne	r2, #4
   12a0c:	cmp	r7, #2
   12a10:	movne	r2, r7
   12a14:	str	r2, [sp]
   12a18:	mov	r2, ip
   12a1c:	bic	r1, r1, #2
   12a20:	str	r0, [sp, #12]
   12a24:	ldr	r0, [sp, #72]	; 0x48
   12a28:	str	r1, [sp, #4]
   12a2c:	mov	r1, r6
   12a30:	str	r0, [sp, #16]
   12a34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12a38:	bl	11a78 <__assert_fail@plt+0xc30>
   12a3c:	mov	r8, r0
   12a40:	mov	r0, r8
   12a44:	sub	sp, fp, #28
   12a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a4c:	mov	r7, #2
   12a50:	b	129e8 <__assert_fail@plt+0x1ba0>
   12a54:	mov	r0, #5
   12a58:	ldr	r2, [fp, #-84]	; 0xffffffac
   12a5c:	ldr	r3, [sp, #80]	; 0x50
   12a60:	str	r0, [sp]
   12a64:	ldr	r0, [fp, #12]
   12a68:	str	r0, [sp, #4]
   12a6c:	ldr	r0, [fp, #16]
   12a70:	str	r0, [sp, #8]
   12a74:	ldr	r0, [sp, #64]	; 0x40
   12a78:	str	r0, [sp, #12]
   12a7c:	ldr	r0, [sp, #72]	; 0x48
   12a80:	b	12a30 <__assert_fail@plt+0x1be8>
   12a84:	mov	r0, #0
   12a88:	str	r0, [fp, #-72]	; 0xffffffb8
   12a8c:	ldr	r1, [sp, #92]	; 0x5c
   12a90:	cmp	r1, #0
   12a94:	beq	12ad4 <__assert_fail@plt+0x1c8c>
   12a98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a9c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12aa0:	tst	r0, #1
   12aa4:	bne	12ad8 <__assert_fail@plt+0x1c90>
   12aa8:	ldrb	r0, [r1]
   12aac:	cmp	r0, #0
   12ab0:	beq	12ad8 <__assert_fail@plt+0x1c90>
   12ab4:	add	r1, r1, #1
   12ab8:	cmp	r8, r6
   12abc:	strbcc	r0, [r2, r8]
   12ac0:	add	r8, r8, #1
   12ac4:	ldrb	r0, [r1], #1
   12ac8:	cmp	r0, #0
   12acc:	bne	12ab8 <__assert_fail@plt+0x1c70>
   12ad0:	b	12ad8 <__assert_fail@plt+0x1c90>
   12ad4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ad8:	cmp	r8, r6
   12adc:	movcc	r0, #0
   12ae0:	strbcc	r0, [r2, r8]
   12ae4:	b	12a40 <__assert_fail@plt+0x1bf8>
   12ae8:	mov	r2, #1
   12aec:	b	129d0 <__assert_fail@plt+0x1b88>
   12af0:	mov	r7, #5
   12af4:	b	129e4 <__assert_fail@plt+0x1b9c>
   12af8:	bl	10e30 <abort@plt>
   12afc:	mov	r3, r2
   12b00:	mov	r2, #0
   12b04:	b	12b08 <__assert_fail@plt+0x1cc0>
   12b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b0c:	add	fp, sp, #28
   12b10:	sub	sp, sp, #36	; 0x24
   12b14:	movw	r8, #20784	; 0x5130
   12b18:	cmp	r3, #0
   12b1c:	mov	r4, r2
   12b20:	str	r2, [sp, #24]
   12b24:	mov	r5, r1
   12b28:	mov	r6, r0
   12b2c:	str	r0, [sp, #20]
   12b30:	movt	r8, #2
   12b34:	movne	r8, r3
   12b38:	bl	10d88 <__errno_location@plt>
   12b3c:	str	r0, [sp, #28]
   12b40:	cmp	r4, #0
   12b44:	add	sl, r8, #8
   12b48:	ldm	r8, {r3, r9}
   12b4c:	ldr	r7, [r0]
   12b50:	ldr	r1, [r8, #40]	; 0x28
   12b54:	ldr	r2, [r8, #44]	; 0x2c
   12b58:	mov	r0, #0
   12b5c:	orreq	r9, r9, #1
   12b60:	str	r7, [sp, #32]
   12b64:	mov	r7, r5
   12b68:	stm	sp, {r3, r9, sl}
   12b6c:	str	r1, [sp, #12]
   12b70:	str	r2, [sp, #16]
   12b74:	mov	r1, #0
   12b78:	mov	r2, r6
   12b7c:	mov	r3, r5
   12b80:	bl	11a78 <__assert_fail@plt+0xc30>
   12b84:	add	r4, r0, #1
   12b88:	mov	r5, r0
   12b8c:	mov	r0, r4
   12b90:	bl	1386c <__assert_fail@plt+0x2a24>
   12b94:	mov	r6, r0
   12b98:	ldr	r0, [r8]
   12b9c:	ldr	r2, [r8, #44]	; 0x2c
   12ba0:	ldr	r1, [r8, #40]	; 0x28
   12ba4:	mov	r3, r7
   12ba8:	stm	sp, {r0, r9, sl}
   12bac:	str	r2, [sp, #16]
   12bb0:	str	r1, [sp, #12]
   12bb4:	mov	r0, r6
   12bb8:	mov	r1, r4
   12bbc:	ldr	r2, [sp, #20]
   12bc0:	bl	11a78 <__assert_fail@plt+0xc30>
   12bc4:	ldr	r0, [sp, #24]
   12bc8:	ldr	r1, [sp, #32]
   12bcc:	ldr	r2, [sp, #28]
   12bd0:	cmp	r0, #0
   12bd4:	str	r1, [r2]
   12bd8:	strne	r5, [r0]
   12bdc:	mov	r0, r6
   12be0:	sub	sp, fp, #28
   12be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12be8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bec:	add	fp, sp, #24
   12bf0:	movw	r5, #20692	; 0x50d4
   12bf4:	movw	r8, #20688	; 0x50d0
   12bf8:	movt	r5, #2
   12bfc:	movt	r8, #2
   12c00:	ldr	r0, [r5]
   12c04:	ldr	r4, [r8]
   12c08:	cmp	r0, #2
   12c0c:	blt	12c38 <__assert_fail@plt+0x1df0>
   12c10:	add	r7, r4, #12
   12c14:	mov	r6, #0
   12c18:	ldr	r0, [r7, r6, lsl #3]
   12c1c:	bl	13f1c <__assert_fail@plt+0x30d4>
   12c20:	ldr	r1, [r5]
   12c24:	add	r2, r6, #2
   12c28:	add	r0, r6, #1
   12c2c:	mov	r6, r0
   12c30:	cmp	r2, r1
   12c34:	blt	12c18 <__assert_fail@plt+0x1dd0>
   12c38:	ldr	r0, [r4, #4]
   12c3c:	movw	r7, #20832	; 0x5160
   12c40:	movt	r7, #2
   12c44:	cmp	r0, r7
   12c48:	beq	12c60 <__assert_fail@plt+0x1e18>
   12c4c:	bl	13f1c <__assert_fail@plt+0x30d4>
   12c50:	movw	r0, #20696	; 0x50d8
   12c54:	mov	r6, #256	; 0x100
   12c58:	movt	r0, #2
   12c5c:	strd	r6, [r0]
   12c60:	movw	r6, #20696	; 0x50d8
   12c64:	movt	r6, #2
   12c68:	cmp	r4, r6
   12c6c:	beq	12c7c <__assert_fail@plt+0x1e34>
   12c70:	mov	r0, r4
   12c74:	bl	13f1c <__assert_fail@plt+0x30d4>
   12c78:	str	r6, [r8]
   12c7c:	mov	r0, #1
   12c80:	str	r0, [r5]
   12c84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c88:	movw	r3, #20784	; 0x5130
   12c8c:	mvn	r2, #0
   12c90:	movt	r3, #2
   12c94:	b	12c98 <__assert_fail@plt+0x1e50>
   12c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c9c:	add	fp, sp, #28
   12ca0:	sub	sp, sp, #44	; 0x2c
   12ca4:	mov	r7, r3
   12ca8:	str	r2, [sp, #36]	; 0x24
   12cac:	str	r1, [sp, #32]
   12cb0:	mov	r5, r0
   12cb4:	bl	10d88 <__errno_location@plt>
   12cb8:	cmp	r5, #0
   12cbc:	blt	12e28 <__assert_fail@plt+0x1fe0>
   12cc0:	cmn	r5, #-2147483647	; 0x80000001
   12cc4:	beq	12e28 <__assert_fail@plt+0x1fe0>
   12cc8:	movw	r8, #20692	; 0x50d4
   12ccc:	movw	r4, #20688	; 0x50d0
   12cd0:	str	r0, [sp, #28]
   12cd4:	ldr	r0, [r0]
   12cd8:	movt	r8, #2
   12cdc:	movt	r4, #2
   12ce0:	ldr	r1, [r8]
   12ce4:	ldr	r6, [r4]
   12ce8:	str	r0, [sp, #24]
   12cec:	cmp	r1, r5
   12cf0:	ble	12cfc <__assert_fail@plt+0x1eb4>
   12cf4:	mov	sl, r6
   12cf8:	b	12d64 <__assert_fail@plt+0x1f1c>
   12cfc:	movw	r9, #20696	; 0x50d8
   12d00:	mov	r0, #8
   12d04:	add	r2, r5, #1
   12d08:	str	r1, [fp, #-32]	; 0xffffffe0
   12d0c:	mvn	r3, #-2147483648	; 0x80000000
   12d10:	movt	r9, #2
   12d14:	str	r0, [sp]
   12d18:	sub	r2, r2, r1
   12d1c:	sub	r1, fp, #32
   12d20:	subs	r0, r6, r9
   12d24:	movne	r0, r6
   12d28:	bl	1399c <__assert_fail@plt+0x2b54>
   12d2c:	cmp	r6, r9
   12d30:	mov	sl, r0
   12d34:	str	r0, [r4]
   12d38:	ldrdeq	r0, [r9]
   12d3c:	stmeq	sl, {r0, r1}
   12d40:	ldr	r1, [r8]
   12d44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d48:	add	r0, sl, r1, lsl #3
   12d4c:	sub	r1, r2, r1
   12d50:	lsl	r2, r1, #3
   12d54:	mov	r1, #0
   12d58:	bl	10da0 <memset@plt>
   12d5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d60:	str	r0, [r8]
   12d64:	mov	r9, sl
   12d68:	ldr	r6, [r9, r5, lsl #3]!
   12d6c:	ldr	r4, [r9, #4]!
   12d70:	ldm	r7, {r0, r1}
   12d74:	ldr	r2, [r7, #40]	; 0x28
   12d78:	ldr	r3, [r7, #44]	; 0x2c
   12d7c:	orr	r8, r1, #1
   12d80:	add	r1, r7, #8
   12d84:	stm	sp, {r0, r8}
   12d88:	add	r0, sp, #8
   12d8c:	str	r1, [sp, #20]
   12d90:	stm	r0, {r1, r2, r3}
   12d94:	mov	r0, r4
   12d98:	mov	r1, r6
   12d9c:	ldr	r2, [sp, #32]
   12da0:	ldr	r3, [sp, #36]	; 0x24
   12da4:	bl	11a78 <__assert_fail@plt+0xc30>
   12da8:	cmp	r6, r0
   12dac:	bhi	12e10 <__assert_fail@plt+0x1fc8>
   12db0:	add	r6, r0, #1
   12db4:	movw	r0, #20832	; 0x5160
   12db8:	movt	r0, #2
   12dbc:	str	r6, [sl, r5, lsl #3]
   12dc0:	cmp	r4, r0
   12dc4:	beq	12dd0 <__assert_fail@plt+0x1f88>
   12dc8:	mov	r0, r4
   12dcc:	bl	13f1c <__assert_fail@plt+0x30d4>
   12dd0:	mov	r0, r6
   12dd4:	bl	1386c <__assert_fail@plt+0x2a24>
   12dd8:	str	r0, [r9]
   12ddc:	mov	r4, r0
   12de0:	add	r3, sp, #8
   12de4:	ldr	r0, [r7]
   12de8:	ldr	r1, [r7, #40]	; 0x28
   12dec:	ldr	r2, [r7, #44]	; 0x2c
   12df0:	stm	sp, {r0, r8}
   12df4:	ldr	r0, [sp, #20]
   12df8:	stm	r3, {r0, r1, r2}
   12dfc:	mov	r0, r4
   12e00:	mov	r1, r6
   12e04:	ldr	r2, [sp, #32]
   12e08:	ldr	r3, [sp, #36]	; 0x24
   12e0c:	bl	11a78 <__assert_fail@plt+0xc30>
   12e10:	ldr	r0, [sp, #28]
   12e14:	ldr	r1, [sp, #24]
   12e18:	str	r1, [r0]
   12e1c:	mov	r0, r4
   12e20:	sub	sp, fp, #28
   12e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e28:	bl	10e30 <abort@plt>
   12e2c:	movw	r3, #20784	; 0x5130
   12e30:	movt	r3, #2
   12e34:	b	12c98 <__assert_fail@plt+0x1e50>
   12e38:	movw	r3, #20784	; 0x5130
   12e3c:	mov	r1, r0
   12e40:	mov	r0, #0
   12e44:	mvn	r2, #0
   12e48:	movt	r3, #2
   12e4c:	b	12c98 <__assert_fail@plt+0x1e50>
   12e50:	movw	r3, #20784	; 0x5130
   12e54:	mov	r2, r1
   12e58:	mov	r1, r0
   12e5c:	mov	r0, #0
   12e60:	movt	r3, #2
   12e64:	b	12c98 <__assert_fail@plt+0x1e50>
   12e68:	push	{fp, lr}
   12e6c:	mov	fp, sp
   12e70:	sub	sp, sp, #48	; 0x30
   12e74:	vmov.i32	q8, #0	; 0x00000000
   12e78:	mov	ip, #32
   12e7c:	mov	r3, sp
   12e80:	mov	lr, r2
   12e84:	cmp	r1, #10
   12e88:	add	r2, r3, #16
   12e8c:	vst1.64	{d16-d17}, [r3], ip
   12e90:	vst1.64	{d16-d17}, [r3]
   12e94:	vst1.64	{d16-d17}, [r2]
   12e98:	beq	12eb8 <__assert_fail@plt+0x2070>
   12e9c:	str	r1, [sp]
   12ea0:	mov	r3, sp
   12ea4:	mov	r1, lr
   12ea8:	mvn	r2, #0
   12eac:	bl	12c98 <__assert_fail@plt+0x1e50>
   12eb0:	mov	sp, fp
   12eb4:	pop	{fp, pc}
   12eb8:	bl	10e30 <abort@plt>
   12ebc:	push	{r4, sl, fp, lr}
   12ec0:	add	fp, sp, #8
   12ec4:	sub	sp, sp, #48	; 0x30
   12ec8:	mov	ip, r3
   12ecc:	mov	r3, sp
   12ed0:	vmov.i32	q8, #0	; 0x00000000
   12ed4:	mov	lr, #32
   12ed8:	cmp	r1, #10
   12edc:	add	r4, r3, #16
   12ee0:	vst1.64	{d16-d17}, [r3], lr
   12ee4:	vst1.64	{d16-d17}, [r3]
   12ee8:	vst1.64	{d16-d17}, [r4]
   12eec:	beq	12f0c <__assert_fail@plt+0x20c4>
   12ef0:	str	r1, [sp]
   12ef4:	mov	r1, r2
   12ef8:	mov	r3, sp
   12efc:	mov	r2, ip
   12f00:	bl	12c98 <__assert_fail@plt+0x1e50>
   12f04:	sub	sp, fp, #8
   12f08:	pop	{r4, sl, fp, pc}
   12f0c:	bl	10e30 <abort@plt>
   12f10:	mov	r2, r1
   12f14:	mov	r1, r0
   12f18:	mov	r0, #0
   12f1c:	b	12e68 <__assert_fail@plt+0x2020>
   12f20:	mov	r3, r2
   12f24:	mov	r2, r1
   12f28:	mov	r1, r0
   12f2c:	mov	r0, #0
   12f30:	b	12ebc <__assert_fail@plt+0x2074>
   12f34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f38:	add	fp, sp, #24
   12f3c:	sub	sp, sp, #48	; 0x30
   12f40:	movw	r8, #20784	; 0x5130
   12f44:	mov	lr, r0
   12f48:	mov	r3, sp
   12f4c:	mov	ip, r1
   12f50:	movt	r8, #2
   12f54:	mov	r1, r3
   12f58:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f5c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f60:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f64:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f68:	ubfx	r0, r2, #5, #3
   12f6c:	and	r2, r2, #31
   12f70:	mov	r4, #1
   12f74:	add	r0, r3, r0, lsl #2
   12f78:	ldr	r1, [r0, #8]
   12f7c:	bic	r4, r4, r1, lsr r2
   12f80:	eor	r1, r1, r4, lsl r2
   12f84:	mov	r2, ip
   12f88:	str	r1, [r0, #8]
   12f8c:	mov	r0, #0
   12f90:	mov	r1, lr
   12f94:	bl	12c98 <__assert_fail@plt+0x1e50>
   12f98:	sub	sp, fp, #24
   12f9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12fa4:	add	fp, sp, #24
   12fa8:	sub	sp, sp, #48	; 0x30
   12fac:	movw	lr, #20784	; 0x5130
   12fb0:	mov	ip, r0
   12fb4:	mov	r3, sp
   12fb8:	movt	lr, #2
   12fbc:	mov	r2, r3
   12fc0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12fc4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12fc8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12fcc:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12fd0:	ubfx	r0, r1, #5, #3
   12fd4:	and	r1, r1, #31
   12fd8:	mov	r7, #1
   12fdc:	add	r0, r3, r0, lsl #2
   12fe0:	ldr	r2, [r0, #8]
   12fe4:	bic	r7, r7, r2, lsr r1
   12fe8:	eor	r1, r2, r7, lsl r1
   12fec:	mvn	r2, #0
   12ff0:	str	r1, [r0, #8]
   12ff4:	mov	r0, #0
   12ff8:	mov	r1, ip
   12ffc:	bl	12c98 <__assert_fail@plt+0x1e50>
   13000:	sub	sp, fp, #24
   13004:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13008:	push	{r4, r5, r6, r7, fp, lr}
   1300c:	add	fp, sp, #16
   13010:	sub	sp, sp, #48	; 0x30
   13014:	movw	lr, #20784	; 0x5130
   13018:	mov	ip, r0
   1301c:	mov	r3, sp
   13020:	movt	lr, #2
   13024:	mov	r2, r3
   13028:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1302c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13030:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13034:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13038:	mov	r1, ip
   1303c:	mvn	r2, #0
   13040:	ldr	r0, [sp, #12]
   13044:	orr	r0, r0, #67108864	; 0x4000000
   13048:	str	r0, [sp, #12]
   1304c:	mov	r0, #0
   13050:	bl	12c98 <__assert_fail@plt+0x1e50>
   13054:	sub	sp, fp, #16
   13058:	pop	{r4, r5, r6, r7, fp, pc}
   1305c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13060:	add	fp, sp, #24
   13064:	sub	sp, sp, #48	; 0x30
   13068:	movw	r8, #20784	; 0x5130
   1306c:	mov	ip, r1
   13070:	mov	lr, r0
   13074:	mov	r3, sp
   13078:	movt	r8, #2
   1307c:	mov	r2, r3
   13080:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13084:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13088:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1308c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13090:	mov	r1, lr
   13094:	mov	r2, ip
   13098:	ldr	r0, [sp, #12]
   1309c:	orr	r0, r0, #67108864	; 0x4000000
   130a0:	str	r0, [sp, #12]
   130a4:	mov	r0, #0
   130a8:	bl	12c98 <__assert_fail@plt+0x1e50>
   130ac:	sub	sp, fp, #24
   130b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130b8:	add	fp, sp, #24
   130bc:	sub	sp, sp, #96	; 0x60
   130c0:	mov	lr, sp
   130c4:	vmov.i32	q8, #0	; 0x00000000
   130c8:	mov	ip, r2
   130cc:	cmp	r1, #10
   130d0:	add	r3, lr, #16
   130d4:	mov	r2, lr
   130d8:	vst1.64	{d16-d17}, [r3]
   130dc:	mov	r3, #28
   130e0:	vst1.64	{d16-d17}, [r2], r3
   130e4:	vst1.32	{d16-d17}, [r2]
   130e8:	beq	13128 <__assert_fail@plt+0x22e0>
   130ec:	str	r1, [sp, #48]	; 0x30
   130f0:	add	r3, sp, #48	; 0x30
   130f4:	ldm	lr!, {r2, r4, r5, r6, r7}
   130f8:	add	r1, r3, #4
   130fc:	stmia	r1!, {r2, r4, r5, r6, r7}
   13100:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13104:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13108:	mvn	r2, #0
   1310c:	ldr	r1, [sp, #60]	; 0x3c
   13110:	orr	r1, r1, #67108864	; 0x4000000
   13114:	str	r1, [sp, #60]	; 0x3c
   13118:	mov	r1, ip
   1311c:	bl	12c98 <__assert_fail@plt+0x1e50>
   13120:	sub	sp, fp, #24
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	bl	10e30 <abort@plt>
   1312c:	push	{fp, lr}
   13130:	mov	fp, sp
   13134:	sub	sp, sp, #8
   13138:	mvn	ip, #0
   1313c:	str	ip, [sp]
   13140:	bl	1314c <__assert_fail@plt+0x2304>
   13144:	mov	sp, fp
   13148:	pop	{fp, pc}
   1314c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13150:	add	fp, sp, #24
   13154:	sub	sp, sp, #48	; 0x30
   13158:	movw	ip, #20784	; 0x5130
   1315c:	mov	lr, r3
   13160:	mov	r3, sp
   13164:	cmp	r1, #0
   13168:	movt	ip, #2
   1316c:	cmpne	r2, #0
   13170:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13174:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13178:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1317c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13180:	mov	r3, #10
   13184:	str	r3, [sp]
   13188:	bne	13190 <__assert_fail@plt+0x2348>
   1318c:	bl	10e30 <abort@plt>
   13190:	ldr	ip, [fp, #8]
   13194:	str	r2, [sp, #44]	; 0x2c
   13198:	str	r1, [sp, #40]	; 0x28
   1319c:	mov	r3, sp
   131a0:	mov	r1, lr
   131a4:	mov	r2, ip
   131a8:	bl	12c98 <__assert_fail@plt+0x1e50>
   131ac:	sub	sp, fp, #24
   131b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131b4:	push	{fp, lr}
   131b8:	mov	fp, sp
   131bc:	sub	sp, sp, #8
   131c0:	mov	r3, r2
   131c4:	mov	r2, r1
   131c8:	mov	r1, r0
   131cc:	mvn	r0, #0
   131d0:	str	r0, [sp]
   131d4:	mov	r0, #0
   131d8:	bl	1314c <__assert_fail@plt+0x2304>
   131dc:	mov	sp, fp
   131e0:	pop	{fp, pc}
   131e4:	push	{fp, lr}
   131e8:	mov	fp, sp
   131ec:	sub	sp, sp, #8
   131f0:	mov	ip, r2
   131f4:	mov	r2, r1
   131f8:	mov	r1, r0
   131fc:	str	r3, [sp]
   13200:	mov	r0, #0
   13204:	mov	r3, ip
   13208:	bl	1314c <__assert_fail@plt+0x2304>
   1320c:	mov	sp, fp
   13210:	pop	{fp, pc}
   13214:	movw	r3, #20704	; 0x50e0
   13218:	movt	r3, #2
   1321c:	b	12c98 <__assert_fail@plt+0x1e50>
   13220:	movw	r3, #20704	; 0x50e0
   13224:	mov	r2, r1
   13228:	mov	r1, r0
   1322c:	mov	r0, #0
   13230:	movt	r3, #2
   13234:	b	12c98 <__assert_fail@plt+0x1e50>
   13238:	movw	r3, #20704	; 0x50e0
   1323c:	mvn	r2, #0
   13240:	movt	r3, #2
   13244:	b	12c98 <__assert_fail@plt+0x1e50>
   13248:	movw	r3, #20704	; 0x50e0
   1324c:	mov	r1, r0
   13250:	mov	r0, #0
   13254:	mvn	r2, #0
   13258:	movt	r3, #2
   1325c:	b	12c98 <__assert_fail@plt+0x1e50>
   13260:	push	{r4, r5, fp, lr}
   13264:	add	fp, sp, #8
   13268:	mov	r5, r0
   1326c:	mov	r4, r1
   13270:	mov	r0, #0
   13274:	mov	r2, #5
   13278:	mov	r1, r5
   1327c:	bl	10cb0 <dcgettext@plt>
   13280:	cmp	r0, r5
   13284:	popne	{r4, r5, fp, pc}
   13288:	bl	13fe8 <__assert_fail@plt+0x31a0>
   1328c:	ldrb	r1, [r0]
   13290:	and	r1, r1, #223	; 0xdf
   13294:	cmp	r1, #71	; 0x47
   13298:	beq	13300 <__assert_fail@plt+0x24b8>
   1329c:	cmp	r1, #85	; 0x55
   132a0:	bne	13324 <__assert_fail@plt+0x24dc>
   132a4:	ldrb	r1, [r0, #1]
   132a8:	and	r1, r1, #223	; 0xdf
   132ac:	cmp	r1, #84	; 0x54
   132b0:	bne	13324 <__assert_fail@plt+0x24dc>
   132b4:	ldrb	r1, [r0, #2]
   132b8:	and	r1, r1, #223	; 0xdf
   132bc:	cmp	r1, #70	; 0x46
   132c0:	ldrbeq	r1, [r0, #3]
   132c4:	cmpeq	r1, #45	; 0x2d
   132c8:	bne	13324 <__assert_fail@plt+0x24dc>
   132cc:	ldrb	r1, [r0, #4]
   132d0:	cmp	r1, #56	; 0x38
   132d4:	ldrbeq	r0, [r0, #5]
   132d8:	cmpeq	r0, #0
   132dc:	bne	13324 <__assert_fail@plt+0x24dc>
   132e0:	ldrb	r1, [r5]
   132e4:	movw	r2, #18744	; 0x4938
   132e8:	movw	r0, #18748	; 0x493c
   132ec:	movt	r2, #1
   132f0:	movt	r0, #1
   132f4:	cmp	r1, #96	; 0x60
   132f8:	moveq	r0, r2
   132fc:	pop	{r4, r5, fp, pc}
   13300:	ldrb	r1, [r0, #1]
   13304:	and	r1, r1, #223	; 0xdf
   13308:	cmp	r1, #66	; 0x42
   1330c:	bne	13324 <__assert_fail@plt+0x24dc>
   13310:	ldrb	r1, [r0, #2]
   13314:	cmp	r1, #49	; 0x31
   13318:	ldrbeq	r1, [r0, #3]
   1331c:	cmpeq	r1, #56	; 0x38
   13320:	beq	13340 <__assert_fail@plt+0x24f8>
   13324:	movw	r1, #18738	; 0x4932
   13328:	movw	r0, #18742	; 0x4936
   1332c:	cmp	r4, #9
   13330:	movt	r1, #1
   13334:	movt	r0, #1
   13338:	moveq	r0, r1
   1333c:	pop	{r4, r5, fp, pc}
   13340:	ldrb	r1, [r0, #4]
   13344:	cmp	r1, #48	; 0x30
   13348:	ldrbeq	r1, [r0, #5]
   1334c:	cmpeq	r1, #51	; 0x33
   13350:	bne	13324 <__assert_fail@plt+0x24dc>
   13354:	ldrb	r1, [r0, #6]
   13358:	cmp	r1, #48	; 0x30
   1335c:	ldrbeq	r0, [r0, #7]
   13360:	cmpeq	r0, #0
   13364:	bne	13324 <__assert_fail@plt+0x24dc>
   13368:	ldrb	r1, [r5]
   1336c:	movw	r2, #18752	; 0x4940
   13370:	movw	r0, #18756	; 0x4944
   13374:	movt	r2, #1
   13378:	movt	r0, #1
   1337c:	b	132f4 <__assert_fail@plt+0x24ac>
   13380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13384:	add	fp, sp, #24
   13388:	sub	sp, sp, #32
   1338c:	ldr	r6, [fp, #12]
   13390:	ldr	r7, [fp, #8]
   13394:	mov	r4, r2
   13398:	mov	r8, r0
   1339c:	cmp	r1, #0
   133a0:	beq	133c8 <__assert_fail@plt+0x2580>
   133a4:	movw	r2, #18844	; 0x499c
   133a8:	mov	r5, r1
   133ac:	str	r3, [sp, #4]
   133b0:	str	r4, [sp]
   133b4:	mov	r0, r8
   133b8:	mov	r1, #1
   133bc:	movt	r2, #1
   133c0:	mov	r3, r5
   133c4:	b	133e0 <__assert_fail@plt+0x2598>
   133c8:	movw	r2, #18856	; 0x49a8
   133cc:	str	r3, [sp]
   133d0:	mov	r0, r8
   133d4:	mov	r1, #1
   133d8:	mov	r3, r4
   133dc:	movt	r2, #1
   133e0:	bl	10dc4 <__fprintf_chk@plt>
   133e4:	movw	r1, #18863	; 0x49af
   133e8:	mov	r0, #0
   133ec:	mov	r2, #5
   133f0:	movt	r1, #1
   133f4:	bl	10cb0 <dcgettext@plt>
   133f8:	movw	r2, #19581	; 0x4c7d
   133fc:	mov	r3, r0
   13400:	movw	r0, #2022	; 0x7e6
   13404:	mov	r1, #1
   13408:	str	r0, [sp]
   1340c:	movt	r2, #1
   13410:	mov	r0, r8
   13414:	bl	10dc4 <__fprintf_chk@plt>
   13418:	movw	r4, #17454	; 0x442e
   1341c:	mov	r1, r8
   13420:	movt	r4, #1
   13424:	mov	r0, r4
   13428:	bl	10c50 <fputs_unlocked@plt>
   1342c:	movw	r1, #18867	; 0x49b3
   13430:	mov	r0, #0
   13434:	mov	r2, #5
   13438:	movt	r1, #1
   1343c:	bl	10cb0 <dcgettext@plt>
   13440:	movw	r3, #19038	; 0x4a5e
   13444:	mov	r2, r0
   13448:	mov	r0, r8
   1344c:	mov	r1, #1
   13450:	movt	r3, #1
   13454:	bl	10dc4 <__fprintf_chk@plt>
   13458:	mov	r0, r4
   1345c:	mov	r1, r8
   13460:	bl	10c50 <fputs_unlocked@plt>
   13464:	cmp	r6, #9
   13468:	bhi	134cc <__assert_fail@plt+0x2684>
   1346c:	add	r0, pc, #0
   13470:	ldr	pc, [r0, r6, lsl #2]
   13474:	andeq	r3, r1, r4, lsr #13
   13478:	muleq	r1, ip, r4
   1347c:	ldrdeq	r3, [r1], -r8
   13480:	andeq	r3, r1, r0, lsl #10
   13484:	andeq	r3, r1, r8, lsr #10
   13488:	andeq	r3, r1, r0, asr r5
   1348c:	andeq	r3, r1, r8, ror r5
   13490:			; <UNDEFINED> instruction: 0x000135b0
   13494:	andeq	r3, r1, r0, asr r6
   13498:	strdeq	r3, [r1], -r8
   1349c:	movw	r1, #19072	; 0x4a80
   134a0:	mov	r0, #0
   134a4:	mov	r2, #5
   134a8:	movt	r1, #1
   134ac:	bl	10cb0 <dcgettext@plt>
   134b0:	ldr	r3, [r7]
   134b4:	mov	r2, r0
   134b8:	mov	r0, r8
   134bc:	mov	r1, #1
   134c0:	sub	sp, fp, #24
   134c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   134c8:	b	10dc4 <__fprintf_chk@plt>
   134cc:	movw	r1, #19391	; 0x4bbf
   134d0:	movt	r1, #1
   134d4:	b	13600 <__assert_fail@plt+0x27b8>
   134d8:	movw	r1, #19088	; 0x4a90
   134dc:	mov	r0, #0
   134e0:	mov	r2, #5
   134e4:	movt	r1, #1
   134e8:	bl	10cb0 <dcgettext@plt>
   134ec:	mov	r2, r0
   134f0:	ldr	r3, [r7]
   134f4:	ldr	r0, [r7, #4]
   134f8:	str	r0, [sp]
   134fc:	b	135ec <__assert_fail@plt+0x27a4>
   13500:	movw	r1, #19111	; 0x4aa7
   13504:	mov	r0, #0
   13508:	mov	r2, #5
   1350c:	movt	r1, #1
   13510:	bl	10cb0 <dcgettext@plt>
   13514:	ldr	r3, [r7]
   13518:	mov	r2, r0
   1351c:	ldmib	r7, {r0, r1}
   13520:	stm	sp, {r0, r1}
   13524:	b	135ec <__assert_fail@plt+0x27a4>
   13528:	movw	r1, #19139	; 0x4ac3
   1352c:	mov	r0, #0
   13530:	mov	r2, #5
   13534:	movt	r1, #1
   13538:	bl	10cb0 <dcgettext@plt>
   1353c:	ldr	r3, [r7]
   13540:	mov	r2, r0
   13544:	ldmib	r7, {r0, r1, r7}
   13548:	stm	sp, {r0, r1, r7}
   1354c:	b	135ec <__assert_fail@plt+0x27a4>
   13550:	movw	r1, #19171	; 0x4ae3
   13554:	mov	r0, #0
   13558:	mov	r2, #5
   1355c:	movt	r1, #1
   13560:	bl	10cb0 <dcgettext@plt>
   13564:	ldr	r3, [r7]
   13568:	mov	r2, r0
   1356c:	ldmib	r7, {r0, r1, r6, r7}
   13570:	stm	sp, {r0, r1, r6, r7}
   13574:	b	135ec <__assert_fail@plt+0x27a4>
   13578:	movw	r1, #19207	; 0x4b07
   1357c:	mov	r0, #0
   13580:	mov	r2, #5
   13584:	movt	r1, #1
   13588:	bl	10cb0 <dcgettext@plt>
   1358c:	ldr	r3, [r7]
   13590:	mov	r2, r0
   13594:	ldmib	r7, {r0, r1, r6}
   13598:	ldr	r5, [r7, #16]
   1359c:	ldr	r7, [r7, #20]
   135a0:	stm	sp, {r0, r1, r6}
   135a4:	str	r5, [sp, #12]
   135a8:	str	r7, [sp, #16]
   135ac:	b	135ec <__assert_fail@plt+0x27a4>
   135b0:	movw	r1, #19247	; 0x4b2f
   135b4:	mov	r0, #0
   135b8:	mov	r2, #5
   135bc:	movt	r1, #1
   135c0:	bl	10cb0 <dcgettext@plt>
   135c4:	ldr	r3, [r7]
   135c8:	mov	r2, r0
   135cc:	ldmib	r7, {r0, r1, r6}
   135d0:	ldr	r5, [r7, #16]
   135d4:	ldr	r4, [r7, #20]
   135d8:	ldr	r7, [r7, #24]
   135dc:	stm	sp, {r0, r1, r6}
   135e0:	str	r5, [sp, #12]
   135e4:	str	r4, [sp, #16]
   135e8:	str	r7, [sp, #20]
   135ec:	mov	r0, r8
   135f0:	mov	r1, #1
   135f4:	b	136a0 <__assert_fail@plt+0x2858>
   135f8:	movw	r1, #19339	; 0x4b8b
   135fc:	movt	r1, #1
   13600:	mov	r0, #0
   13604:	mov	r2, #5
   13608:	bl	10cb0 <dcgettext@plt>
   1360c:	mov	ip, r0
   13610:	ldr	r3, [r7]
   13614:	ldr	r0, [r7, #4]
   13618:	ldr	r1, [r7, #8]
   1361c:	ldr	r6, [r7, #12]
   13620:	ldr	r5, [r7, #16]
   13624:	ldr	r4, [r7, #20]
   13628:	ldr	r2, [r7, #24]
   1362c:	ldr	lr, [r7, #28]
   13630:	ldr	r7, [r7, #32]
   13634:	stm	sp, {r0, r1, r6}
   13638:	str	r5, [sp, #12]
   1363c:	str	r4, [sp, #16]
   13640:	str	r2, [sp, #20]
   13644:	str	lr, [sp, #24]
   13648:	str	r7, [sp, #28]
   1364c:	b	13694 <__assert_fail@plt+0x284c>
   13650:	movw	r1, #19291	; 0x4b5b
   13654:	mov	r0, #0
   13658:	mov	r2, #5
   1365c:	movt	r1, #1
   13660:	bl	10cb0 <dcgettext@plt>
   13664:	mov	ip, r0
   13668:	ldr	r3, [r7]
   1366c:	ldmib	r7, {r0, r1, r6}
   13670:	ldr	r5, [r7, #16]
   13674:	ldr	r4, [r7, #20]
   13678:	ldr	r2, [r7, #24]
   1367c:	ldr	r7, [r7, #28]
   13680:	stm	sp, {r0, r1, r6}
   13684:	str	r5, [sp, #12]
   13688:	str	r4, [sp, #16]
   1368c:	str	r2, [sp, #20]
   13690:	str	r7, [sp, #24]
   13694:	mov	r0, r8
   13698:	mov	r1, #1
   1369c:	mov	r2, ip
   136a0:	bl	10dc4 <__fprintf_chk@plt>
   136a4:	sub	sp, fp, #24
   136a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136ac:	push	{r4, sl, fp, lr}
   136b0:	add	fp, sp, #8
   136b4:	sub	sp, sp, #8
   136b8:	ldr	ip, [fp, #8]
   136bc:	mov	lr, #0
   136c0:	ldr	r4, [ip, lr, lsl #2]
   136c4:	add	lr, lr, #1
   136c8:	cmp	r4, #0
   136cc:	bne	136c0 <__assert_fail@plt+0x2878>
   136d0:	sub	r4, lr, #1
   136d4:	str	ip, [sp]
   136d8:	str	r4, [sp, #4]
   136dc:	bl	13380 <__assert_fail@plt+0x2538>
   136e0:	sub	sp, fp, #8
   136e4:	pop	{r4, sl, fp, pc}
   136e8:	push	{r4, r5, fp, lr}
   136ec:	add	fp, sp, #8
   136f0:	sub	sp, sp, #48	; 0x30
   136f4:	ldr	r4, [fp, #8]
   136f8:	mov	ip, #0
   136fc:	add	lr, sp, #8
   13700:	ldr	r5, [r4]
   13704:	cmp	r5, #0
   13708:	str	r5, [lr, ip, lsl #2]
   1370c:	beq	13720 <__assert_fail@plt+0x28d8>
   13710:	add	ip, ip, #1
   13714:	add	r4, r4, #4
   13718:	cmp	ip, #10
   1371c:	bcc	13700 <__assert_fail@plt+0x28b8>
   13720:	str	lr, [sp]
   13724:	str	ip, [sp, #4]
   13728:	bl	13380 <__assert_fail@plt+0x2538>
   1372c:	sub	sp, fp, #8
   13730:	pop	{r4, r5, fp, pc}
   13734:	push	{fp, lr}
   13738:	mov	fp, sp
   1373c:	sub	sp, sp, #8
   13740:	add	ip, fp, #8
   13744:	str	ip, [sp, #4]
   13748:	str	ip, [sp]
   1374c:	bl	136e8 <__assert_fail@plt+0x28a0>
   13750:	mov	sp, fp
   13754:	pop	{fp, pc}
   13758:	push	{fp, lr}
   1375c:	mov	fp, sp
   13760:	movw	r0, #20764	; 0x511c
   13764:	movt	r0, #2
   13768:	ldr	r1, [r0]
   1376c:	movw	r0, #17454	; 0x442e
   13770:	movt	r0, #1
   13774:	bl	10c50 <fputs_unlocked@plt>
   13778:	movw	r1, #19451	; 0x4bfb
   1377c:	mov	r0, #0
   13780:	mov	r2, #5
   13784:	movt	r1, #1
   13788:	bl	10cb0 <dcgettext@plt>
   1378c:	movw	r2, #19471	; 0x4c0f
   13790:	mov	r1, r0
   13794:	mov	r0, #1
   13798:	movt	r2, #1
   1379c:	bl	10dac <__printf_chk@plt>
   137a0:	movw	r1, #19493	; 0x4c25
   137a4:	mov	r0, #0
   137a8:	mov	r2, #5
   137ac:	movt	r1, #1
   137b0:	bl	10cb0 <dcgettext@plt>
   137b4:	movw	r2, #18156	; 0x46ec
   137b8:	movw	r3, #18309	; 0x4785
   137bc:	mov	r1, r0
   137c0:	mov	r0, #1
   137c4:	movt	r2, #1
   137c8:	movt	r3, #1
   137cc:	bl	10dac <__printf_chk@plt>
   137d0:	movw	r1, #19513	; 0x4c39
   137d4:	mov	r0, #0
   137d8:	mov	r2, #5
   137dc:	movt	r1, #1
   137e0:	bl	10cb0 <dcgettext@plt>
   137e4:	movw	r2, #19552	; 0x4c60
   137e8:	mov	r1, r0
   137ec:	mov	r0, #1
   137f0:	movt	r2, #1
   137f4:	pop	{fp, lr}
   137f8:	b	10dac <__printf_chk@plt>
   137fc:	b	13800 <__assert_fail@plt+0x29b8>
   13800:	push	{r4, r5, r6, sl, fp, lr}
   13804:	add	fp, sp, #16
   13808:	mov	r4, r2
   1380c:	mov	r5, r1
   13810:	mov	r6, r0
   13814:	bl	14080 <__assert_fail@plt+0x3238>
   13818:	cmp	r0, #0
   1381c:	popne	{r4, r5, r6, sl, fp, pc}
   13820:	cmp	r6, #0
   13824:	beq	13838 <__assert_fail@plt+0x29f0>
   13828:	cmp	r5, #0
   1382c:	cmpne	r4, #0
   13830:	bne	13838 <__assert_fail@plt+0x29f0>
   13834:	pop	{r4, r5, r6, sl, fp, pc}
   13838:	bl	13c8c <__assert_fail@plt+0x2e44>
   1383c:	push	{fp, lr}
   13840:	mov	fp, sp
   13844:	bl	13d24 <__assert_fail@plt+0x2edc>
   13848:	cmp	r0, #0
   1384c:	popne	{fp, pc}
   13850:	bl	13c8c <__assert_fail@plt+0x2e44>
   13854:	push	{fp, lr}
   13858:	mov	fp, sp
   1385c:	bl	13d24 <__assert_fail@plt+0x2edc>
   13860:	cmp	r0, #0
   13864:	popne	{fp, pc}
   13868:	bl	13c8c <__assert_fail@plt+0x2e44>
   1386c:	push	{fp, lr}
   13870:	mov	fp, sp
   13874:	bl	13d24 <__assert_fail@plt+0x2edc>
   13878:	cmp	r0, #0
   1387c:	popne	{fp, pc}
   13880:	bl	13c8c <__assert_fail@plt+0x2e44>
   13884:	push	{r4, r5, fp, lr}
   13888:	add	fp, sp, #8
   1388c:	mov	r4, r1
   13890:	mov	r5, r0
   13894:	bl	13d54 <__assert_fail@plt+0x2f0c>
   13898:	cmp	r0, #0
   1389c:	popne	{r4, r5, fp, pc}
   138a0:	cmp	r5, #0
   138a4:	beq	138b4 <__assert_fail@plt+0x2a6c>
   138a8:	cmp	r4, #0
   138ac:	bne	138b4 <__assert_fail@plt+0x2a6c>
   138b0:	pop	{r4, r5, fp, pc}
   138b4:	bl	13c8c <__assert_fail@plt+0x2e44>
   138b8:	push	{fp, lr}
   138bc:	mov	fp, sp
   138c0:	cmp	r1, #0
   138c4:	orreq	r1, r1, #1
   138c8:	bl	13d54 <__assert_fail@plt+0x2f0c>
   138cc:	cmp	r0, #0
   138d0:	popne	{fp, pc}
   138d4:	bl	13c8c <__assert_fail@plt+0x2e44>
   138d8:	push	{fp, lr}
   138dc:	mov	fp, sp
   138e0:	clz	r3, r2
   138e4:	lsr	ip, r3, #5
   138e8:	clz	r3, r1
   138ec:	lsr	r3, r3, #5
   138f0:	orrs	r3, r3, ip
   138f4:	movwne	r1, #1
   138f8:	movwne	r2, #1
   138fc:	bl	14080 <__assert_fail@plt+0x3238>
   13900:	cmp	r0, #0
   13904:	popne	{fp, pc}
   13908:	bl	13c8c <__assert_fail@plt+0x2e44>
   1390c:	push	{fp, lr}
   13910:	mov	fp, sp
   13914:	mov	r2, r1
   13918:	mov	r1, r0
   1391c:	mov	r0, #0
   13920:	bl	14080 <__assert_fail@plt+0x3238>
   13924:	cmp	r0, #0
   13928:	popne	{fp, pc}
   1392c:	bl	13c8c <__assert_fail@plt+0x2e44>
   13930:	mov	r2, r1
   13934:	mov	r1, r0
   13938:	mov	r0, #0
   1393c:	b	138d8 <__assert_fail@plt+0x2a90>
   13940:	mov	r2, #1
   13944:	b	13948 <__assert_fail@plt+0x2b00>
   13948:	push	{r4, r5, fp, lr}
   1394c:	add	fp, sp, #8
   13950:	ldr	r5, [r1]
   13954:	mov	r4, r1
   13958:	cmp	r0, #0
   1395c:	beq	13974 <__assert_fail@plt+0x2b2c>
   13960:	mov	r1, #1
   13964:	add	r1, r1, r5, lsr #1
   13968:	adds	r5, r5, r1
   1396c:	bcc	1398c <__assert_fail@plt+0x2b44>
   13970:	bl	13c8c <__assert_fail@plt+0x2e44>
   13974:	cmp	r5, #0
   13978:	bne	1398c <__assert_fail@plt+0x2b44>
   1397c:	mov	r1, #64	; 0x40
   13980:	cmp	r2, #64	; 0x40
   13984:	udiv	r5, r1, r2
   13988:	addhi	r5, r5, #1
   1398c:	mov	r1, r5
   13990:	bl	13800 <__assert_fail@plt+0x29b8>
   13994:	str	r5, [r4]
   13998:	pop	{r4, r5, fp, pc}
   1399c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139a0:	add	fp, sp, #24
   139a4:	ldr	r6, [r1]
   139a8:	mov	r8, r1
   139ac:	ldr	r4, [fp, #8]
   139b0:	add	r1, r6, r6, asr #1
   139b4:	cmp	r1, r6
   139b8:	mvnvs	r1, #-2147483648	; 0x80000000
   139bc:	cmp	r1, r3
   139c0:	mov	r5, r1
   139c4:	movgt	r5, r3
   139c8:	cmn	r3, #1
   139cc:	movle	r5, r1
   139d0:	cmn	r4, #1
   139d4:	ble	139f4 <__assert_fail@plt+0x2bac>
   139d8:	cmp	r4, #0
   139dc:	beq	13a48 <__assert_fail@plt+0x2c00>
   139e0:	cmn	r5, #1
   139e4:	ble	13a1c <__assert_fail@plt+0x2bd4>
   139e8:	mvn	r7, #-2147483648	; 0x80000000
   139ec:	udiv	r1, r7, r4
   139f0:	b	13a10 <__assert_fail@plt+0x2bc8>
   139f4:	cmn	r5, #1
   139f8:	ble	13a38 <__assert_fail@plt+0x2bf0>
   139fc:	cmn	r4, #1
   13a00:	beq	13a48 <__assert_fail@plt+0x2c00>
   13a04:	mov	r1, #-2147483648	; 0x80000000
   13a08:	mvn	r7, #-2147483648	; 0x80000000
   13a0c:	sdiv	r1, r1, r4
   13a10:	cmp	r1, r5
   13a14:	bge	13a48 <__assert_fail@plt+0x2c00>
   13a18:	b	13a58 <__assert_fail@plt+0x2c10>
   13a1c:	beq	13a48 <__assert_fail@plt+0x2c00>
   13a20:	mov	r1, #-2147483648	; 0x80000000
   13a24:	mvn	r7, #-2147483648	; 0x80000000
   13a28:	sdiv	r1, r1, r5
   13a2c:	cmp	r1, r4
   13a30:	bge	13a48 <__assert_fail@plt+0x2c00>
   13a34:	b	13a58 <__assert_fail@plt+0x2c10>
   13a38:	mvn	r7, #-2147483648	; 0x80000000
   13a3c:	sdiv	r1, r7, r4
   13a40:	cmp	r5, r1
   13a44:	blt	13a58 <__assert_fail@plt+0x2c10>
   13a48:	mul	r1, r5, r4
   13a4c:	mov	r7, #64	; 0x40
   13a50:	cmp	r1, #63	; 0x3f
   13a54:	bgt	13a60 <__assert_fail@plt+0x2c18>
   13a58:	sdiv	r5, r7, r4
   13a5c:	mul	r1, r5, r4
   13a60:	cmp	r0, #0
   13a64:	moveq	r7, #0
   13a68:	streq	r7, [r8]
   13a6c:	sub	r7, r5, r6
   13a70:	cmp	r7, r2
   13a74:	bge	13b18 <__assert_fail@plt+0x2cd0>
   13a78:	add	r5, r6, r2
   13a7c:	mov	r2, #0
   13a80:	mov	r1, #0
   13a84:	cmp	r5, r3
   13a88:	movwgt	r2, #1
   13a8c:	cmn	r3, #1
   13a90:	movwgt	r1, #1
   13a94:	cmp	r5, r6
   13a98:	bvs	13b00 <__assert_fail@plt+0x2cb8>
   13a9c:	ands	r1, r1, r2
   13aa0:	bne	13b00 <__assert_fail@plt+0x2cb8>
   13aa4:	cmn	r4, #1
   13aa8:	ble	13ac8 <__assert_fail@plt+0x2c80>
   13aac:	cmp	r4, #0
   13ab0:	beq	13b14 <__assert_fail@plt+0x2ccc>
   13ab4:	cmn	r5, #1
   13ab8:	ble	13aec <__assert_fail@plt+0x2ca4>
   13abc:	mvn	r1, #-2147483648	; 0x80000000
   13ac0:	udiv	r1, r1, r4
   13ac4:	b	13ae0 <__assert_fail@plt+0x2c98>
   13ac8:	cmn	r5, #1
   13acc:	ble	13b04 <__assert_fail@plt+0x2cbc>
   13ad0:	cmn	r4, #1
   13ad4:	beq	13b14 <__assert_fail@plt+0x2ccc>
   13ad8:	mov	r1, #-2147483648	; 0x80000000
   13adc:	sdiv	r1, r1, r4
   13ae0:	cmp	r1, r5
   13ae4:	bge	13b14 <__assert_fail@plt+0x2ccc>
   13ae8:	b	13b00 <__assert_fail@plt+0x2cb8>
   13aec:	beq	13b14 <__assert_fail@plt+0x2ccc>
   13af0:	mov	r1, #-2147483648	; 0x80000000
   13af4:	sdiv	r1, r1, r5
   13af8:	cmp	r1, r4
   13afc:	bge	13b14 <__assert_fail@plt+0x2ccc>
   13b00:	bl	13c8c <__assert_fail@plt+0x2e44>
   13b04:	mvn	r1, #-2147483648	; 0x80000000
   13b08:	sdiv	r1, r1, r4
   13b0c:	cmp	r5, r1
   13b10:	blt	13b00 <__assert_fail@plt+0x2cb8>
   13b14:	mul	r1, r5, r4
   13b18:	bl	13884 <__assert_fail@plt+0x2a3c>
   13b1c:	str	r5, [r8]
   13b20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b24:	push	{fp, lr}
   13b28:	mov	fp, sp
   13b2c:	mov	r1, #1
   13b30:	bl	13cd0 <__assert_fail@plt+0x2e88>
   13b34:	cmp	r0, #0
   13b38:	popne	{fp, pc}
   13b3c:	bl	13c8c <__assert_fail@plt+0x2e44>
   13b40:	push	{fp, lr}
   13b44:	mov	fp, sp
   13b48:	bl	13cd0 <__assert_fail@plt+0x2e88>
   13b4c:	cmp	r0, #0
   13b50:	popne	{fp, pc}
   13b54:	bl	13c8c <__assert_fail@plt+0x2e44>
   13b58:	push	{fp, lr}
   13b5c:	mov	fp, sp
   13b60:	mov	r1, #1
   13b64:	bl	13cd0 <__assert_fail@plt+0x2e88>
   13b68:	cmp	r0, #0
   13b6c:	popne	{fp, pc}
   13b70:	bl	13c8c <__assert_fail@plt+0x2e44>
   13b74:	push	{fp, lr}
   13b78:	mov	fp, sp
   13b7c:	bl	13cd0 <__assert_fail@plt+0x2e88>
   13b80:	cmp	r0, #0
   13b84:	popne	{fp, pc}
   13b88:	bl	13c8c <__assert_fail@plt+0x2e44>
   13b8c:	push	{r4, r5, r6, sl, fp, lr}
   13b90:	add	fp, sp, #16
   13b94:	mov	r5, r0
   13b98:	mov	r0, r1
   13b9c:	mov	r4, r1
   13ba0:	bl	13d24 <__assert_fail@plt+0x2edc>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13bc4 <__assert_fail@plt+0x2d7c>
   13bac:	mov	r1, r5
   13bb0:	mov	r2, r4
   13bb4:	mov	r6, r0
   13bb8:	bl	10c8c <memcpy@plt>
   13bbc:	mov	r0, r6
   13bc0:	pop	{r4, r5, r6, sl, fp, pc}
   13bc4:	bl	13c8c <__assert_fail@plt+0x2e44>
   13bc8:	push	{r4, r5, r6, sl, fp, lr}
   13bcc:	add	fp, sp, #16
   13bd0:	mov	r5, r0
   13bd4:	mov	r0, r1
   13bd8:	mov	r4, r1
   13bdc:	bl	13d24 <__assert_fail@plt+0x2edc>
   13be0:	cmp	r0, #0
   13be4:	beq	13c00 <__assert_fail@plt+0x2db8>
   13be8:	mov	r1, r5
   13bec:	mov	r2, r4
   13bf0:	mov	r6, r0
   13bf4:	bl	10c8c <memcpy@plt>
   13bf8:	mov	r0, r6
   13bfc:	pop	{r4, r5, r6, sl, fp, pc}
   13c00:	bl	13c8c <__assert_fail@plt+0x2e44>
   13c04:	push	{r4, r5, r6, sl, fp, lr}
   13c08:	add	fp, sp, #16
   13c0c:	mov	r5, r0
   13c10:	add	r0, r1, #1
   13c14:	mov	r4, r1
   13c18:	bl	13d24 <__assert_fail@plt+0x2edc>
   13c1c:	cmp	r0, #0
   13c20:	beq	13c48 <__assert_fail@plt+0x2e00>
   13c24:	mov	r6, r0
   13c28:	mov	r0, #0
   13c2c:	mov	r1, r5
   13c30:	mov	r2, r4
   13c34:	strb	r0, [r6, r4]
   13c38:	mov	r0, r6
   13c3c:	bl	10c8c <memcpy@plt>
   13c40:	mov	r0, r6
   13c44:	pop	{r4, r5, r6, sl, fp, pc}
   13c48:	bl	13c8c <__assert_fail@plt+0x2e44>
   13c4c:	push	{r4, r5, r6, sl, fp, lr}
   13c50:	add	fp, sp, #16
   13c54:	mov	r4, r0
   13c58:	bl	10d7c <strlen@plt>
   13c5c:	add	r5, r0, #1
   13c60:	mov	r0, r5
   13c64:	bl	13d24 <__assert_fail@plt+0x2edc>
   13c68:	cmp	r0, #0
   13c6c:	beq	13c88 <__assert_fail@plt+0x2e40>
   13c70:	mov	r1, r4
   13c74:	mov	r2, r5
   13c78:	mov	r6, r0
   13c7c:	bl	10c8c <memcpy@plt>
   13c80:	mov	r0, r6
   13c84:	pop	{r4, r5, r6, sl, fp, pc}
   13c88:	bl	13c8c <__assert_fail@plt+0x2e44>
   13c8c:	push	{fp, lr}
   13c90:	mov	fp, sp
   13c94:	movw	r0, #20684	; 0x50cc
   13c98:	movw	r1, #19628	; 0x4cac
   13c9c:	mov	r2, #5
   13ca0:	movt	r0, #2
   13ca4:	movt	r1, #1
   13ca8:	ldr	r4, [r0]
   13cac:	mov	r0, #0
   13cb0:	bl	10cb0 <dcgettext@plt>
   13cb4:	movw	r2, #18591	; 0x489f
   13cb8:	mov	r3, r0
   13cbc:	mov	r0, r4
   13cc0:	mov	r1, #0
   13cc4:	movt	r2, #1
   13cc8:	bl	10d1c <error@plt>
   13ccc:	bl	10e30 <abort@plt>
   13cd0:	clz	r2, r1
   13cd4:	clz	r3, r0
   13cd8:	lsr	r2, r2, #5
   13cdc:	lsr	r3, r3, #5
   13ce0:	orrs	r2, r3, r2
   13ce4:	movwne	r1, #1
   13ce8:	movwne	r0, #1
   13cec:	cmp	r1, #0
   13cf0:	beq	13d20 <__assert_fail@plt+0x2ed8>
   13cf4:	mvn	r2, #-2147483648	; 0x80000000
   13cf8:	udiv	r2, r2, r1
   13cfc:	cmp	r2, r0
   13d00:	bcs	13d20 <__assert_fail@plt+0x2ed8>
   13d04:	push	{fp, lr}
   13d08:	mov	fp, sp
   13d0c:	bl	10d88 <__errno_location@plt>
   13d10:	mov	r1, #12
   13d14:	str	r1, [r0]
   13d18:	mov	r0, #0
   13d1c:	pop	{fp, pc}
   13d20:	b	10c44 <calloc@plt>
   13d24:	cmp	r0, #0
   13d28:	movweq	r0, #1
   13d2c:	cmn	r0, #1
   13d30:	ble	13d38 <__assert_fail@plt+0x2ef0>
   13d34:	b	10d34 <malloc@plt>
   13d38:	push	{fp, lr}
   13d3c:	mov	fp, sp
   13d40:	bl	10d88 <__errno_location@plt>
   13d44:	mov	r1, #12
   13d48:	str	r1, [r0]
   13d4c:	mov	r0, #0
   13d50:	pop	{fp, pc}
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	cmp	r0, #0
   13d60:	beq	13d7c <__assert_fail@plt+0x2f34>
   13d64:	cmp	r1, #0
   13d68:	beq	13d88 <__assert_fail@plt+0x2f40>
   13d6c:	cmn	r1, #1
   13d70:	ble	13d90 <__assert_fail@plt+0x2f48>
   13d74:	pop	{fp, lr}
   13d78:	b	10cbc <realloc@plt>
   13d7c:	mov	r0, r1
   13d80:	pop	{fp, lr}
   13d84:	b	13d24 <__assert_fail@plt+0x2edc>
   13d88:	bl	13f1c <__assert_fail@plt+0x30d4>
   13d8c:	b	13d9c <__assert_fail@plt+0x2f54>
   13d90:	bl	10d88 <__errno_location@plt>
   13d94:	mov	r1, #12
   13d98:	str	r1, [r0]
   13d9c:	mov	r0, #0
   13da0:	pop	{fp, pc}
   13da4:	push	{r4, r5, r6, sl, fp, lr}
   13da8:	add	fp, sp, #16
   13dac:	mov	r4, r0
   13db0:	bl	10cf8 <__fpending@plt>
   13db4:	mov	r5, r0
   13db8:	mov	r0, r4
   13dbc:	bl	10d04 <ferror_unlocked@plt>
   13dc0:	mov	r6, r0
   13dc4:	mov	r0, r4
   13dc8:	bl	13e24 <__assert_fail@plt+0x2fdc>
   13dcc:	cmp	r6, #0
   13dd0:	beq	13df0 <__assert_fail@plt+0x2fa8>
   13dd4:	mvn	r4, #0
   13dd8:	cmp	r0, #0
   13ddc:	bne	13e1c <__assert_fail@plt+0x2fd4>
   13de0:	bl	10d88 <__errno_location@plt>
   13de4:	mov	r1, #0
   13de8:	str	r1, [r0]
   13dec:	b	13e1c <__assert_fail@plt+0x2fd4>
   13df0:	cmp	r0, #0
   13df4:	mov	r4, r0
   13df8:	mvnne	r4, #0
   13dfc:	cmp	r5, #0
   13e00:	bne	13e1c <__assert_fail@plt+0x2fd4>
   13e04:	cmp	r0, #0
   13e08:	beq	13e1c <__assert_fail@plt+0x2fd4>
   13e0c:	bl	10d88 <__errno_location@plt>
   13e10:	ldr	r0, [r0]
   13e14:	subs	r4, r0, #9
   13e18:	mvnne	r4, #0
   13e1c:	mov	r0, r4
   13e20:	pop	{r4, r5, r6, sl, fp, pc}
   13e24:	push	{r4, r5, r6, sl, fp, lr}
   13e28:	add	fp, sp, #16
   13e2c:	sub	sp, sp, #8
   13e30:	mov	r4, r0
   13e34:	bl	10db8 <fileno@plt>
   13e38:	cmn	r0, #1
   13e3c:	ble	13eb0 <__assert_fail@plt+0x3068>
   13e40:	mov	r0, r4
   13e44:	bl	10d4c <__freading@plt>
   13e48:	cmp	r0, #0
   13e4c:	beq	13e78 <__assert_fail@plt+0x3030>
   13e50:	mov	r0, r4
   13e54:	bl	10db8 <fileno@plt>
   13e58:	mov	r1, #1
   13e5c:	mov	r2, #0
   13e60:	mov	r3, #0
   13e64:	str	r1, [sp]
   13e68:	bl	10ce0 <lseek64@plt>
   13e6c:	and	r0, r0, r1
   13e70:	cmn	r0, #1
   13e74:	beq	13eb0 <__assert_fail@plt+0x3068>
   13e78:	mov	r0, r4
   13e7c:	bl	13ec0 <__assert_fail@plt+0x3078>
   13e80:	cmp	r0, #0
   13e84:	beq	13eb0 <__assert_fail@plt+0x3068>
   13e88:	bl	10d88 <__errno_location@plt>
   13e8c:	ldr	r6, [r0]
   13e90:	mov	r5, r0
   13e94:	mov	r0, r4
   13e98:	bl	10dd0 <fclose@plt>
   13e9c:	cmp	r6, #0
   13ea0:	strne	r6, [r5]
   13ea4:	mvnne	r0, #0
   13ea8:	sub	sp, fp, #16
   13eac:	pop	{r4, r5, r6, sl, fp, pc}
   13eb0:	mov	r0, r4
   13eb4:	sub	sp, fp, #16
   13eb8:	pop	{r4, r5, r6, sl, fp, lr}
   13ebc:	b	10dd0 <fclose@plt>
   13ec0:	push	{r4, sl, fp, lr}
   13ec4:	add	fp, sp, #8
   13ec8:	sub	sp, sp, #8
   13ecc:	mov	r4, r0
   13ed0:	cmp	r0, #0
   13ed4:	beq	13ef0 <__assert_fail@plt+0x30a8>
   13ed8:	mov	r0, r4
   13edc:	bl	10d4c <__freading@plt>
   13ee0:	cmp	r0, #0
   13ee4:	ldrbne	r0, [r4, #1]
   13ee8:	tstne	r0, #1
   13eec:	bne	13f00 <__assert_fail@plt+0x30b8>
   13ef0:	mov	r0, r4
   13ef4:	sub	sp, fp, #8
   13ef8:	pop	{r4, sl, fp, lr}
   13efc:	b	10c68 <fflush@plt>
   13f00:	mov	r0, #1
   13f04:	mov	r2, #0
   13f08:	mov	r3, #0
   13f0c:	str	r0, [sp]
   13f10:	mov	r0, r4
   13f14:	bl	13f44 <__assert_fail@plt+0x30fc>
   13f18:	b	13ef0 <__assert_fail@plt+0x30a8>
   13f1c:	push	{r4, r5, r6, sl, fp, lr}
   13f20:	add	fp, sp, #16
   13f24:	mov	r4, r0
   13f28:	bl	10d88 <__errno_location@plt>
   13f2c:	ldr	r6, [r0]
   13f30:	mov	r5, r0
   13f34:	mov	r0, r4
   13f38:	bl	10c74 <free@plt>
   13f3c:	str	r6, [r5]
   13f40:	pop	{r4, r5, r6, sl, fp, pc}
   13f44:	push	{r4, r5, r6, r7, fp, lr}
   13f48:	add	fp, sp, #16
   13f4c:	sub	sp, sp, #8
   13f50:	mov	r4, r0
   13f54:	ldr	r0, [r0, #4]
   13f58:	mov	r5, r3
   13f5c:	mov	r6, r2
   13f60:	ldr	r1, [r4, #8]
   13f64:	cmp	r1, r0
   13f68:	bne	13f84 <__assert_fail@plt+0x313c>
   13f6c:	ldrd	r0, [r4, #16]
   13f70:	cmp	r1, r0
   13f74:	bne	13f84 <__assert_fail@plt+0x313c>
   13f78:	ldr	r0, [r4, #36]	; 0x24
   13f7c:	cmp	r0, #0
   13f80:	beq	13f9c <__assert_fail@plt+0x3154>
   13f84:	mov	r0, r4
   13f88:	mov	r2, r6
   13f8c:	mov	r3, r5
   13f90:	sub	sp, fp, #16
   13f94:	pop	{r4, r5, r6, r7, fp, lr}
   13f98:	b	10ddc <fseeko64@plt>
   13f9c:	ldr	r7, [fp, #8]
   13fa0:	mov	r0, r4
   13fa4:	bl	10db8 <fileno@plt>
   13fa8:	mov	r2, r6
   13fac:	mov	r3, r5
   13fb0:	str	r7, [sp]
   13fb4:	bl	10ce0 <lseek64@plt>
   13fb8:	and	r2, r0, r1
   13fbc:	cmn	r2, #1
   13fc0:	beq	13fdc <__assert_fail@plt+0x3194>
   13fc4:	strd	r0, [r4, #80]	; 0x50
   13fc8:	ldr	r0, [r4]
   13fcc:	bic	r0, r0, #16
   13fd0:	str	r0, [r4]
   13fd4:	mov	r0, #0
   13fd8:	b	13fe0 <__assert_fail@plt+0x3198>
   13fdc:	mvn	r0, #0
   13fe0:	sub	sp, fp, #16
   13fe4:	pop	{r4, r5, r6, r7, fp, pc}
   13fe8:	push	{fp, lr}
   13fec:	mov	fp, sp
   13ff0:	mov	r0, #14
   13ff4:	bl	10e00 <nl_langinfo@plt>
   13ff8:	movw	r1, #17455	; 0x442f
   13ffc:	cmp	r0, #0
   14000:	movt	r1, #1
   14004:	movne	r1, r0
   14008:	movw	r0, #19645	; 0x4cbd
   1400c:	ldrb	r2, [r1]
   14010:	movt	r0, #1
   14014:	cmp	r2, #0
   14018:	movne	r0, r1
   1401c:	pop	{fp, pc}
   14020:	push	{r4, r5, r6, r7, fp, lr}
   14024:	add	fp, sp, #16
   14028:	sub	sp, sp, #8
   1402c:	add	r5, sp, #4
   14030:	cmp	r0, #0
   14034:	mov	r7, r2
   14038:	mov	r4, r1
   1403c:	movne	r5, r0
   14040:	mov	r0, r5
   14044:	bl	10d10 <mbrtowc@plt>
   14048:	mov	r6, r0
   1404c:	cmp	r7, #0
   14050:	beq	14074 <__assert_fail@plt+0x322c>
   14054:	cmn	r6, #2
   14058:	bcc	14074 <__assert_fail@plt+0x322c>
   1405c:	mov	r0, #0
   14060:	bl	140bc <__assert_fail@plt+0x3274>
   14064:	cmp	r0, #0
   14068:	ldrbeq	r0, [r4]
   1406c:	moveq	r6, #1
   14070:	streq	r0, [r5]
   14074:	mov	r0, r6
   14078:	sub	sp, fp, #16
   1407c:	pop	{r4, r5, r6, r7, fp, pc}
   14080:	cmp	r2, #0
   14084:	beq	140b4 <__assert_fail@plt+0x326c>
   14088:	mvn	r3, #0
   1408c:	udiv	r3, r3, r2
   14090:	cmp	r3, r1
   14094:	bcs	140b4 <__assert_fail@plt+0x326c>
   14098:	push	{fp, lr}
   1409c:	mov	fp, sp
   140a0:	bl	10d88 <__errno_location@plt>
   140a4:	mov	r1, #12
   140a8:	str	r1, [r0]
   140ac:	mov	r0, #0
   140b0:	pop	{fp, pc}
   140b4:	mul	r1, r2, r1
   140b8:	b	13d54 <__assert_fail@plt+0x2f0c>
   140bc:	push	{r4, sl, fp, lr}
   140c0:	add	fp, sp, #8
   140c4:	sub	sp, sp, #264	; 0x108
   140c8:	add	r1, sp, #7
   140cc:	movw	r2, #257	; 0x101
   140d0:	bl	14120 <__assert_fail@plt+0x32d8>
   140d4:	mov	r4, #0
   140d8:	cmp	r0, #0
   140dc:	bne	14114 <__assert_fail@plt+0x32cc>
   140e0:	movw	r1, #19651	; 0x4cc3
   140e4:	add	r0, sp, #7
   140e8:	movt	r1, #1
   140ec:	bl	10c5c <strcmp@plt>
   140f0:	cmp	r0, #0
   140f4:	beq	14114 <__assert_fail@plt+0x32cc>
   140f8:	movw	r1, #19653	; 0x4cc5
   140fc:	add	r0, sp, #7
   14100:	movt	r1, #1
   14104:	bl	10c5c <strcmp@plt>
   14108:	mov	r4, r0
   1410c:	cmp	r0, #0
   14110:	movwne	r4, #1
   14114:	mov	r0, r4
   14118:	sub	sp, fp, #8
   1411c:	pop	{r4, sl, fp, pc}
   14120:	push	{r4, r5, r6, r7, fp, lr}
   14124:	add	fp, sp, #16
   14128:	mov	r4, r1
   1412c:	mov	r1, #0
   14130:	mov	r6, r2
   14134:	bl	10de8 <setlocale@plt>
   14138:	cmp	r0, #0
   1413c:	beq	14168 <__assert_fail@plt+0x3320>
   14140:	mov	r7, r0
   14144:	bl	10d7c <strlen@plt>
   14148:	cmp	r0, r6
   1414c:	bcs	1417c <__assert_fail@plt+0x3334>
   14150:	add	r2, r0, #1
   14154:	mov	r0, r4
   14158:	mov	r1, r7
   1415c:	bl	10c8c <memcpy@plt>
   14160:	mov	r5, #0
   14164:	b	141a4 <__assert_fail@plt+0x335c>
   14168:	cmp	r6, #0
   1416c:	mov	r5, #22
   14170:	movne	r0, #0
   14174:	strbne	r0, [r4]
   14178:	b	141a4 <__assert_fail@plt+0x335c>
   1417c:	mov	r5, #34	; 0x22
   14180:	cmp	r6, #0
   14184:	beq	141a4 <__assert_fail@plt+0x335c>
   14188:	sub	r6, r6, #1
   1418c:	mov	r0, r4
   14190:	mov	r1, r7
   14194:	mov	r2, r6
   14198:	bl	10c8c <memcpy@plt>
   1419c:	mov	r0, #0
   141a0:	strb	r0, [r4, r6]
   141a4:	mov	r0, r5
   141a8:	pop	{r4, r5, r6, r7, fp, pc}
   141ac:	mov	r1, #0
   141b0:	b	10de8 <setlocale@plt>
   141b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141b8:	mov	r7, r0
   141bc:	ldr	r6, [pc, #72]	; 1420c <__assert_fail@plt+0x33c4>
   141c0:	ldr	r5, [pc, #72]	; 14210 <__assert_fail@plt+0x33c8>
   141c4:	add	r6, pc, r6
   141c8:	add	r5, pc, r5
   141cc:	sub	r6, r6, r5
   141d0:	mov	r8, r1
   141d4:	mov	r9, r2
   141d8:	bl	10c24 <calloc@plt-0x20>
   141dc:	asrs	r6, r6, #2
   141e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   141e4:	mov	r4, #0
   141e8:	add	r4, r4, #1
   141ec:	ldr	r3, [r5], #4
   141f0:	mov	r2, r9
   141f4:	mov	r1, r8
   141f8:	mov	r0, r7
   141fc:	blx	r3
   14200:	cmp	r6, r4
   14204:	bne	141e8 <__assert_fail@plt+0x33a0>
   14208:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1420c:	andeq	r0, r1, r0, asr #26
   14210:	andeq	r0, r1, r8, lsr sp
   14214:	bx	lr
   14218:	ldr	r3, [pc, #12]	; 1422c <__assert_fail@plt+0x33e4>
   1421c:	mov	r1, #0
   14220:	add	r3, pc, r3
   14224:	ldr	r2, [r3]
   14228:	b	10d94 <__cxa_atexit@plt>
   1422c:	muleq	r1, ip, lr

Disassembly of section .fini:

00014230 <.fini>:
   14230:	push	{r3, lr}
   14234:	pop	{r3, pc}
