
../repos/charybdis/modules/.libs/m_help.so:     file format elf32-littlearm


Disassembly of section .init:

00000494 <_init>:
 494:	push	{r3, lr}
 498:	bl	4e4 <call_weak_fn>
 49c:	pop	{r3, pc}

Disassembly of section .plt:

000004a0 <.plt>:
 4a0:	push	{lr}		; (str lr, [sp, #-4]!)
 4a4:	ldr	lr, [pc, #4]	; 4b0 <.plt+0x10>
 4a8:	add	lr, pc, lr
 4ac:	ldr	pc, [lr, #8]!
 4b0:	.word	0x00010b50

000004b4 <__cxa_finalize@plt>:
 4b4:	add	ip, pc, #0, 12
 4b8:	add	ip, ip, #16, 20	; 0x10000
 4bc:	ldr	pc, [ip, #2896]!	; 0xb50

000004c0 <sendto_one@plt>:
 4c0:	add	ip, pc, #0, 12
 4c4:	add	ip, ip, #16, 20	; 0x10000
 4c8:	ldr	pc, [ip, #2888]!	; 0xb48

000004cc <__gmon_start__@plt>:
 4cc:	add	ip, pc, #0, 12
 4d0:	add	ip, ip, #16, 20	; 0x10000
 4d4:	ldr	pc, [ip, #2880]!	; 0xb40

000004d8 <rb_dictionary_retrieve@plt>:
 4d8:	add	ip, pc, #0, 12
 4dc:	add	ip, ip, #16, 20	; 0x10000
 4e0:	ldr	pc, [ip, #2872]!	; 0xb38

Disassembly of section .text:

000004e4 <call_weak_fn>:
 4e4:	ldr	r3, [pc, #20]	; 500 <call_weak_fn+0x1c>
 4e8:	ldr	r2, [pc, #20]	; 504 <call_weak_fn+0x20>
 4ec:	add	r3, pc, r3
 4f0:	ldr	r2, [r3, r2]
 4f4:	cmp	r2, #0
 4f8:	bxeq	lr
 4fc:	b	4cc <__gmon_start__@plt>
 500:	.word	0x00010b0c
 504:	.word	0x00000028

00000508 <deregister_tm_clones>:
 508:	ldr	r0, [pc, #44]	; 53c <deregister_tm_clones+0x34>
 50c:	ldr	r3, [pc, #44]	; 540 <deregister_tm_clones+0x38>
 510:	add	r0, pc, r0
 514:	add	r3, pc, r3
 518:	cmp	r3, r0
 51c:	ldr	r3, [pc, #32]	; 544 <deregister_tm_clones+0x3c>
 520:	add	r3, pc, r3
 524:	bxeq	lr
 528:	ldr	r2, [pc, #24]	; 548 <deregister_tm_clones+0x40>
 52c:	ldr	r3, [r3, r2]
 530:	cmp	r3, #0
 534:	bxeq	lr
 538:	bx	r3
 53c:	.word	0x00010be0
 540:	.word	0x00010bdc
 544:	.word	0x00010ad8
 548:	.word	0x00000024

0000054c <register_tm_clones>:
 54c:	ldr	r0, [pc, #56]	; 58c <register_tm_clones+0x40>
 550:	ldr	r3, [pc, #56]	; 590 <register_tm_clones+0x44>
 554:	add	r0, pc, r0
 558:	add	r3, pc, r3
 55c:	sub	r1, r3, r0
 560:	ldr	r3, [pc, #44]	; 594 <register_tm_clones+0x48>
 564:	asr	r1, r1, #2
 568:	add	r3, pc, r3
 56c:	add	r1, r1, r1, lsr #31
 570:	asrs	r1, r1, #1
 574:	bxeq	lr
 578:	ldr	r2, [pc, #24]	; 598 <register_tm_clones+0x4c>
 57c:	ldr	r3, [r3, r2]
 580:	cmp	r3, #0
 584:	bxeq	lr
 588:	bx	r3
 58c:	.word	0x00010b9c
 590:	.word	0x00010b98
 594:	.word	0x00010a90
 598:	.word	0x0000002c

0000059c <__do_global_dtors_aux>:
 59c:	ldr	r3, [pc, #76]	; 5f0 <__do_global_dtors_aux+0x54>
 5a0:	ldr	r2, [pc, #76]	; 5f4 <__do_global_dtors_aux+0x58>
 5a4:	add	r3, pc, r3
 5a8:	add	r2, pc, r2
 5ac:	ldrb	r3, [r3]
 5b0:	cmp	r3, #0
 5b4:	bxne	lr
 5b8:	ldr	r3, [pc, #56]	; 5f8 <__do_global_dtors_aux+0x5c>
 5bc:	push	{r4, lr}
 5c0:	ldr	r3, [r2, r3]
 5c4:	cmp	r3, #0
 5c8:	beq	5d8 <__do_global_dtors_aux+0x3c>
 5cc:	ldr	r3, [pc, #40]	; 5fc <__do_global_dtors_aux+0x60>
 5d0:	ldr	r0, [pc, r3]
 5d4:	bl	4b4 <__cxa_finalize@plt>
 5d8:	bl	508 <deregister_tm_clones>
 5dc:	ldr	r3, [pc, #28]	; 600 <__do_global_dtors_aux+0x64>
 5e0:	mov	r2, #1
 5e4:	add	r3, pc, r3
 5e8:	strb	r2, [r3]
 5ec:	pop	{r4, pc}
 5f0:	.word	0x00010b4c
 5f4:	.word	0x00010a50
 5f8:	.word	0x00000020
 5fc:	.word	0x00010a60
 600:	.word	0x00010b0c

00000604 <frame_dummy>:
 604:	b	54c <register_tm_clones>

00000608 <dohelp>:
 608:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 60c:	subs	r4, r2, #0
 610:	mov	r6, r0
 614:	mov	r8, r1
 618:	ldr	r5, [pc, #264]	; 728 <dohelp+0x120>
 61c:	add	r5, pc, r5
 620:	beq	694 <dohelp+0x8c>
 624:	ldrb	r3, [r4]
 628:	cmp	r3, #0
 62c:	ldreq	r4, [pc, #248]	; 72c <dohelp+0x124>
 630:	addeq	r4, pc, r4
 634:	cmp	r8, #1
 638:	ldr	r3, [pc, #240]	; 730 <dohelp+0x128>
 63c:	ldreq	r3, [pc, #240]	; 734 <dohelp+0x12c>
 640:	mov	r1, r4
 644:	add	r7, r6, #88	; 0x58
 648:	ldr	r3, [r5, r3]
 64c:	ldr	r0, [r3]
 650:	bl	4d8 <rb_dictionary_retrieve@plt>
 654:	ldr	r3, [pc, #220]	; 738 <dohelp+0x130>
 658:	cmp	r0, #0
 65c:	ldr	r9, [r5, r3]
 660:	beq	670 <dohelp+0x68>
 664:	ldr	r3, [r0, #44]	; 0x2c
 668:	tst	r8, r3
 66c:	bne	6a0 <dohelp+0x98>
 670:	ldr	r1, [pc, #196]	; 73c <dohelp+0x134>
 674:	mov	r3, r7
 678:	add	r2, r9, #88	; 0x58
 67c:	str	r4, [sp]
 680:	add	r1, pc, r1
 684:	mov	r0, r6
 688:	bl	4c0 <sendto_one@plt>
 68c:	add	sp, sp, #8
 690:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 694:	ldr	r4, [pc, #164]	; 740 <dohelp+0x138>
 698:	add	r4, pc, r4
 69c:	b	634 <dohelp+0x2c>
 6a0:	ldr	r8, [r0, #32]
 6a4:	add	r5, r9, #88	; 0x58
 6a8:	mov	r0, r6
 6ac:	mov	r2, r5
 6b0:	ldr	r1, [pc, #140]	; 744 <dohelp+0x13c>
 6b4:	ldr	sl, [pc, #140]	; 748 <dohelp+0x140>
 6b8:	ldr	r3, [r8]
 6bc:	add	r1, pc, r1
 6c0:	add	sl, pc, sl
 6c4:	ldr	r3, [r3]
 6c8:	str	r4, [sp]
 6cc:	str	r3, [sp, #4]
 6d0:	mov	r3, r7
 6d4:	bl	4c0 <sendto_one@plt>
 6d8:	ldr	r8, [r8, #8]
 6dc:	cmp	r8, #0
 6e0:	bne	6fc <dohelp+0xf4>
 6e4:	ldr	r1, [pc, #96]	; 74c <dohelp+0x144>
 6e8:	mov	r3, r7
 6ec:	add	r2, r9, #88	; 0x58
 6f0:	str	r4, [sp]
 6f4:	add	r1, pc, r1
 6f8:	b	684 <dohelp+0x7c>
 6fc:	ldr	r3, [r8]
 700:	mov	r2, r5
 704:	mov	r1, sl
 708:	mov	r0, r6
 70c:	ldr	r3, [r3]
 710:	str	r4, [sp]
 714:	str	r3, [sp, #4]
 718:	mov	r3, r7
 71c:	bl	4c0 <sendto_one@plt>
 720:	ldr	r8, [r8, #8]
 724:	b	6dc <dohelp+0xd4>
 728:	.word	0x000109dc
 72c:	.word	0x0000015c
 730:	.word	0x00000030
 734:	.word	0x0000001c
 738:	.word	0x00000034
 73c:	.word	0x00000156
 740:	.word	0x000000f4
 744:	.word	0x00000138
 748:	.word	0x00000146
 74c:	.word	0x00000124

00000750 <mo_help>:
 750:	mov	r0, r2
 754:	ldr	r2, [sp]
 758:	cmp	r3, #1
 75c:	movle	r2, #0
 760:	mov	r1, #2
 764:	ldrgt	r2, [r2, #4]
 768:	b	608 <dohelp>

0000076c <m_help>:
 76c:	mov	r0, r2
 770:	ldr	r2, [sp]
 774:	cmp	r3, #1
 778:	movle	r2, #0
 77c:	mov	r1, #1
 780:	ldrgt	r2, [r2, #4]
 784:	b	608 <dohelp>

00000788 <mo_uhelp>:
 788:	b	76c <m_help>

Disassembly of section .fini:

0000078c <_fini>:
 78c:	push	{r3, lr}
 790:	pop	{r3, pc}
