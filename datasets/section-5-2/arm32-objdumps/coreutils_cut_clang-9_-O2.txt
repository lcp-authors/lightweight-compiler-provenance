
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11194 <__assert_fail@plt+0x48>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <calloc@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <calloc@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	r7, r1, ip, asr #2

00010eb8 <calloc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <fputs_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <posix_fadvise64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <fflush@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <memmove@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <free@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <ferror@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <fwrite_unlocked@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <dcgettext@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <realloc@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <textdomain@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <iswprint@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <fwrite@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <lseek64@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__ctype_get_mb_cur_max@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fread@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <__fpending@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <mbrtowc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <error@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <malloc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <__libc_start_main@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <__freading@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <__gmon_start__@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <getopt_long@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__ctype_b_loc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <exit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <bcmp@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <strlen@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <ungetc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <__errno_location@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <__cxa_atexit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <memset@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <fgetc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__printf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <fileno@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #28]!

0001108c <__fprintf_chk@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #20]!

00011098 <memchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fclose@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <fseeko64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <__uflow@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <__overflow@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <setlocale@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <strrchr@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <nl_langinfo@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <clearerr_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <fopen64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <qsort@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <bindtextdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <strncmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <abort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <strspn@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <__assert_fail@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

Disassembly of section .text:

00011158 <.text>:
   11158:	mov	fp, #0
   1115c:	mov	lr, #0
   11160:	pop	{r1}		; (ldr r1, [sp], #4)
   11164:	mov	r2, sp
   11168:	push	{r2}		; (str r2, [sp, #-4]!)
   1116c:	push	{r0}		; (str r0, [sp, #-4]!)
   11170:	ldr	ip, [pc, #16]	; 11188 <__assert_fail@plt+0x3c>
   11174:	push	{ip}		; (str ip, [sp, #-4]!)
   11178:	ldr	r0, [pc, #12]	; 1118c <__assert_fail@plt+0x40>
   1117c:	ldr	r3, [pc, #12]	; 11190 <__assert_fail@plt+0x44>
   11180:	bl	10fd8 <__libc_start_main@plt>
   11184:	bl	11134 <abort@plt>
   11188:	muleq	r1, ip, r1
   1118c:	andeq	r1, r1, r8, lsl #11
   11190:	andeq	r6, r1, ip, lsr r1
   11194:	ldr	r3, [pc, #20]	; 111b0 <__assert_fail@plt+0x64>
   11198:	ldr	r2, [pc, #20]	; 111b4 <__assert_fail@plt+0x68>
   1119c:	add	r3, pc, r3
   111a0:	ldr	r2, [r3, r2]
   111a4:	cmp	r2, #0
   111a8:	bxeq	lr
   111ac:	b	10ff0 <__gmon_start__@plt>
   111b0:	andeq	r6, r1, ip, asr lr
   111b4:	andeq	r0, r0, ip, ror #1
   111b8:	ldr	r0, [pc, #24]	; 111d8 <__assert_fail@plt+0x8c>
   111bc:	ldr	r3, [pc, #24]	; 111dc <__assert_fail@plt+0x90>
   111c0:	cmp	r3, r0
   111c4:	bxeq	lr
   111c8:	ldr	r3, [pc, #16]	; 111e0 <__assert_fail@plt+0x94>
   111cc:	cmp	r3, #0
   111d0:	bxeq	lr
   111d4:	bx	r3
   111d8:	andeq	r8, r2, r0, asr #2
   111dc:	andeq	r8, r2, r0, asr #2
   111e0:	andeq	r0, r0, r0
   111e4:	ldr	r0, [pc, #36]	; 11210 <__assert_fail@plt+0xc4>
   111e8:	ldr	r1, [pc, #36]	; 11214 <__assert_fail@plt+0xc8>
   111ec:	sub	r1, r1, r0
   111f0:	asr	r1, r1, #2
   111f4:	add	r1, r1, r1, lsr #31
   111f8:	asrs	r1, r1, #1
   111fc:	bxeq	lr
   11200:	ldr	r3, [pc, #16]	; 11218 <__assert_fail@plt+0xcc>
   11204:	cmp	r3, #0
   11208:	bxeq	lr
   1120c:	bx	r3
   11210:	andeq	r8, r2, r0, asr #2
   11214:	andeq	r8, r2, r0, asr #2
   11218:	andeq	r0, r0, r0
   1121c:	push	{r4, lr}
   11220:	ldr	r4, [pc, #24]	; 11240 <__assert_fail@plt+0xf4>
   11224:	ldrb	r3, [r4]
   11228:	cmp	r3, #0
   1122c:	popne	{r4, pc}
   11230:	bl	111b8 <__assert_fail@plt+0x6c>
   11234:	mov	r3, #1
   11238:	strb	r3, [r4]
   1123c:	pop	{r4, pc}
   11240:	andeq	r8, r2, r4, ror #2
   11244:	b	111e4 <__assert_fail@plt+0x98>
   11248:	push	{fp, lr}
   1124c:	mov	fp, sp
   11250:	sub	sp, sp, #56	; 0x38
   11254:	mov	r4, r0
   11258:	cmp	r0, #0
   1125c:	bne	11544 <__assert_fail@plt+0x3f8>
   11260:	movw	r1, #25067	; 0x61eb
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f48 <dcgettext@plt>
   11274:	mov	r1, r0
   11278:	movw	r0, #33172	; 0x8194
   1127c:	movt	r0, #2
   11280:	ldr	r2, [r0]
   11284:	mov	r0, #1
   11288:	bl	11074 <__printf_chk@plt>
   1128c:	movw	r1, #25098	; 0x620a
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10f48 <dcgettext@plt>
   112a0:	movw	r7, #33116	; 0x815c
   112a4:	movt	r7, #2
   112a8:	ldr	r1, [r7]
   112ac:	bl	10ec4 <fputs_unlocked@plt>
   112b0:	movw	r1, #26898	; 0x6912
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10f48 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10ec4 <fputs_unlocked@plt>
   112cc:	movw	r1, #26954	; 0x694a
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10f48 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10ec4 <fputs_unlocked@plt>
   112e8:	movw	r1, #25164	; 0x624c
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10f48 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10ec4 <fputs_unlocked@plt>
   11304:	movw	r1, #25341	; 0x62fd
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10f48 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10ec4 <fputs_unlocked@plt>
   11320:	movw	r1, #25579	; 0x63eb
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10f48 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10ec4 <fputs_unlocked@plt>
   1133c:	movw	r1, #25693	; 0x645d
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10f48 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10ec4 <fputs_unlocked@plt>
   11358:	movw	r1, #25903	; 0x652f
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10f48 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10ec4 <fputs_unlocked@plt>
   11374:	movw	r1, #25966	; 0x656e
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	movt	r1, #1
   11384:	bl	10f48 <dcgettext@plt>
   11388:	ldr	r1, [r7]
   1138c:	bl	10ec4 <fputs_unlocked@plt>
   11390:	movw	r1, #26011	; 0x659b
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10f48 <dcgettext@plt>
   113a4:	ldr	r1, [r7]
   113a8:	bl	10ec4 <fputs_unlocked@plt>
   113ac:	movw	r1, #26065	; 0x65d1
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	movt	r1, #1
   113bc:	bl	10f48 <dcgettext@plt>
   113c0:	ldr	r1, [r7]
   113c4:	bl	10ec4 <fputs_unlocked@plt>
   113c8:	movw	r1, #26269	; 0x669d
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10f48 <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10ec4 <fputs_unlocked@plt>
   113e4:	movw	r0, #27656	; 0x6c08
   113e8:	mov	r2, #48	; 0x30
   113ec:	mov	r6, sp
   113f0:	movw	r5, #26531	; 0x67a3
   113f4:	movt	r0, #1
   113f8:	movt	r5, #1
   113fc:	add	r1, r0, #32
   11400:	add	r3, r0, #16
   11404:	vld1.64	{d18-d19}, [r0], r2
   11408:	vld1.64	{d16-d17}, [r1]
   1140c:	vld1.64	{d20-d21}, [r3]
   11410:	vldr	d22, [r0]
   11414:	add	r1, r6, #32
   11418:	add	r0, r6, #16
   1141c:	vst1.64	{d16-d17}, [r1]
   11420:	movw	r1, #27029	; 0x6995
   11424:	vst1.64	{d20-d21}, [r0]
   11428:	mov	r0, r6
   1142c:	movt	r1, #1
   11430:	vst1.64	{d18-d19}, [r0], r2
   11434:	vstr	d22, [r0]
   11438:	mov	r0, r5
   1143c:	bl	10ed0 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	ldrne	r1, [r6, #8]!
   11448:	cmpne	r1, #0
   1144c:	bne	11438 <__assert_fail@plt+0x2ec>
   11450:	movw	r1, #27124	; 0x69f4
   11454:	ldr	r6, [r6, #4]
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	movt	r1, #1
   11464:	bl	10f48 <dcgettext@plt>
   11468:	movw	r2, #26643	; 0x6813
   1146c:	movw	r3, #27147	; 0x6a0b
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	movt	r2, #1
   1147c:	movt	r3, #1
   11480:	bl	11074 <__printf_chk@plt>
   11484:	cmp	r6, #0
   11488:	mov	r0, #5
   1148c:	mov	r1, #0
   11490:	moveq	r6, r5
   11494:	bl	110d4 <setlocale@plt>
   11498:	cmp	r0, #0
   1149c:	beq	114d4 <__assert_fail@plt+0x388>
   114a0:	movw	r1, #27187	; 0x6a33
   114a4:	mov	r2, #3
   114a8:	movt	r1, #1
   114ac:	bl	11128 <strncmp@plt>
   114b0:	cmp	r0, #0
   114b4:	beq	114d4 <__assert_fail@plt+0x388>
   114b8:	movw	r1, #27191	; 0x6a37
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	10f48 <dcgettext@plt>
   114cc:	ldr	r1, [r7]
   114d0:	bl	10ec4 <fputs_unlocked@plt>
   114d4:	movw	r1, #27262	; 0x6a7e
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	movt	r1, #1
   114e4:	bl	10f48 <dcgettext@plt>
   114e8:	movw	r2, #27147	; 0x6a0b
   114ec:	mov	r1, r0
   114f0:	mov	r0, #1
   114f4:	mov	r3, r5
   114f8:	movt	r2, #1
   114fc:	bl	11074 <__printf_chk@plt>
   11500:	movw	r1, #27289	; 0x6a99
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	10f48 <dcgettext@plt>
   11514:	mov	r1, r0
   11518:	movw	r0, #27057	; 0x69b1
   1151c:	movw	r3, #27339	; 0x6acb
   11520:	cmp	r6, r5
   11524:	mov	r2, r6
   11528:	movt	r0, #1
   1152c:	movt	r3, #1
   11530:	moveq	r3, r0
   11534:	mov	r0, #1
   11538:	bl	11074 <__printf_chk@plt>
   1153c:	mov	r0, r4
   11540:	bl	11014 <exit@plt>
   11544:	movw	r0, #33104	; 0x8150
   11548:	movw	r1, #25028	; 0x61c4
   1154c:	mov	r2, #5
   11550:	movt	r0, #2
   11554:	movt	r1, #1
   11558:	ldr	r5, [r0]
   1155c:	mov	r0, #0
   11560:	bl	10f48 <dcgettext@plt>
   11564:	mov	r2, r0
   11568:	movw	r0, #33172	; 0x8194
   1156c:	mov	r1, #1
   11570:	movt	r0, #2
   11574:	ldr	r3, [r0]
   11578:	mov	r0, r5
   1157c:	bl	1108c <__fprintf_chk@plt>
   11580:	mov	r0, r4
   11584:	bl	11014 <exit@plt>
   11588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1158c:	add	fp, sp, #28
   11590:	sub	sp, sp, #20
   11594:	mov	r5, r0
   11598:	ldr	r0, [r1]
   1159c:	mov	r9, r1
   115a0:	bl	13274 <__assert_fail@plt+0x2128>
   115a4:	movw	r1, #27339	; 0x6acb
   115a8:	mov	r0, #6
   115ac:	movt	r1, #1
   115b0:	bl	110d4 <setlocale@plt>
   115b4:	movw	r6, #26647	; 0x6817
   115b8:	movw	r1, #26535	; 0x67a7
   115bc:	movt	r6, #1
   115c0:	movt	r1, #1
   115c4:	mov	r0, r6
   115c8:	bl	1111c <bindtextdomain@plt>
   115cc:	mov	r0, r6
   115d0:	bl	10f60 <textdomain@plt>
   115d4:	movw	r0, #11108	; 0x2b64
   115d8:	movt	r0, #1
   115dc:	bl	161a0 <__assert_fail@plt+0x5054>
   115e0:	movw	r0, #33128	; 0x8168
   115e4:	mov	r8, #0
   115e8:	movw	r7, #26559	; 0x67bf
   115ec:	movw	r3, #27480	; 0x6b58
   115f0:	mov	r4, #0
   115f4:	mov	sl, #0
   115f8:	mov	r6, #0
   115fc:	movt	r0, #2
   11600:	movt	r7, #1
   11604:	movt	r3, #1
   11608:	strb	r8, [r0]
   1160c:	movw	r0, #33129	; 0x8169
   11610:	movt	r0, #2
   11614:	strb	r8, [r0]
   11618:	movw	r0, #33130	; 0x816a
   1161c:	movt	r0, #2
   11620:	strb	r8, [r0]
   11624:	mov	r0, r5
   11628:	mov	r1, r9
   1162c:	mov	r2, r7
   11630:	str	r8, [sp]
   11634:	bl	10ffc <getopt_long@plt>
   11638:	cmp	r0, #97	; 0x61
   1163c:	ble	117d0 <__assert_fail@plt+0x684>
   11640:	sub	r1, r0, #98	; 0x62
   11644:	cmp	r1, #24
   11648:	bhi	116e4 <__assert_fail@plt+0x598>
   1164c:	movw	r7, #26559	; 0x67bf
   11650:	movw	r3, #27480	; 0x6b58
   11654:	add	r0, pc, #8
   11658:	movt	r7, #1
   1165c:	movt	r3, #1
   11660:	ldr	pc, [r0, r1, lsl #2]
   11664:	andeq	r1, r1, r8, asr #13
   11668:	andeq	r1, r1, r8, asr #13
   1166c:	andeq	r1, r1, ip, asr #14
   11670:	ldrdeq	r1, [r1], -r8
   11674:	andeq	r1, r1, ip, asr #13
   11678:	ldrdeq	r1, [r1], -r8
   1167c:	ldrdeq	r1, [r1], -r8
   11680:	ldrdeq	r1, [r1], -r8
   11684:	ldrdeq	r1, [r1], -r8
   11688:	ldrdeq	r1, [r1], -r8
   1168c:	ldrdeq	r1, [r1], -r8
   11690:	ldrdeq	r1, [r1], -r8
   11694:	andeq	r1, r1, r4, lsr #12
   11698:	ldrdeq	r1, [r1], -r8
   1169c:	ldrdeq	r1, [r1], -r8
   116a0:	ldrdeq	r1, [r1], -r8
   116a4:	ldrdeq	r1, [r1], -r8
   116a8:	andeq	r1, r1, r4, lsl #15
   116ac:	ldrdeq	r1, [r1], -r8
   116b0:	ldrdeq	r1, [r1], -r8
   116b4:	ldrdeq	r1, [r1], -r8
   116b8:	ldrdeq	r1, [r1], -r8
   116bc:	ldrdeq	r1, [r1], -r8
   116c0:	ldrdeq	r1, [r1], -r8
   116c4:	andeq	r1, r1, r8, lsr r7
   116c8:	mov	sl, #1
   116cc:	cmp	r6, #0
   116d0:	bne	119b4 <__assert_fail@plt+0x868>
   116d4:	movw	r0, #33120	; 0x8160
   116d8:	movt	r0, #2
   116dc:	ldr	r6, [r0]
   116e0:	b	11624 <__assert_fail@plt+0x4d8>
   116e4:	movw	r7, #26559	; 0x67bf
   116e8:	movw	r3, #27480	; 0x6b58
   116ec:	cmp	r0, #256	; 0x100
   116f0:	movt	r7, #1
   116f4:	movt	r3, #1
   116f8:	bne	11790 <__assert_fail@plt+0x644>
   116fc:	movw	r0, #33120	; 0x8160
   11700:	movt	r0, #2
   11704:	ldr	r2, [r0]
   11708:	ldrb	r0, [r2]
   1170c:	cmp	r0, #0
   11710:	beq	117b0 <__assert_fail@plt+0x664>
   11714:	mov	r0, r2
   11718:	mov	r7, r2
   1171c:	bl	1102c <strlen@plt>
   11720:	movw	r3, #27480	; 0x6b58
   11724:	mov	r2, r7
   11728:	movw	r7, #26559	; 0x67bf
   1172c:	movt	r3, #1
   11730:	movt	r7, #1
   11734:	b	117b4 <__assert_fail@plt+0x668>
   11738:	movw	r1, #33140	; 0x8174
   1173c:	mov	r0, #1
   11740:	movt	r1, #2
   11744:	strb	r0, [r1]
   11748:	b	11624 <__assert_fail@plt+0x4d8>
   1174c:	movw	r0, #33120	; 0x8160
   11750:	movt	r0, #2
   11754:	ldr	r1, [r0]
   11758:	ldrb	r0, [r1]
   1175c:	cmp	r0, #0
   11760:	beq	11770 <__assert_fail@plt+0x624>
   11764:	ldrb	r1, [r1, #1]
   11768:	cmp	r1, #0
   1176c:	bne	119c0 <__assert_fail@plt+0x874>
   11770:	movw	r1, #33129	; 0x8169
   11774:	mov	r4, #1
   11778:	movt	r1, #2
   1177c:	strb	r0, [r1]
   11780:	b	11624 <__assert_fail@plt+0x4d8>
   11784:	movw	r0, #33128	; 0x8168
   11788:	movt	r0, #2
   1178c:	b	117a4 <__assert_fail@plt+0x658>
   11790:	movw	r1, #257	; 0x101
   11794:	cmp	r0, r1
   11798:	bne	119d8 <__assert_fail@plt+0x88c>
   1179c:	movw	r0, #33141	; 0x8175
   117a0:	movt	r0, #2
   117a4:	mov	r1, #1
   117a8:	strb	r1, [r0]
   117ac:	b	11624 <__assert_fail@plt+0x4d8>
   117b0:	mov	r0, #1
   117b4:	movw	r1, #33136	; 0x8170
   117b8:	movt	r1, #2
   117bc:	str	r2, [r1]
   117c0:	movw	r1, #33132	; 0x816c
   117c4:	movt	r1, #2
   117c8:	str	r0, [r1]
   117cc:	b	11624 <__assert_fail@plt+0x4d8>
   117d0:	cmn	r0, #1
   117d4:	bne	11940 <__assert_fail@plt+0x7f4>
   117d8:	cmp	r6, #0
   117dc:	beq	119cc <__assert_fail@plt+0x880>
   117e0:	tst	sl, #1
   117e4:	beq	11804 <__assert_fail@plt+0x6b8>
   117e8:	tst	r4, #1
   117ec:	bne	119e0 <__assert_fail@plt+0x894>
   117f0:	movw	r0, #33128	; 0x8168
   117f4:	movt	r0, #2
   117f8:	ldrb	r0, [r0]
   117fc:	cmp	r0, #1
   11800:	beq	119ec <__assert_fail@plt+0x8a0>
   11804:	movw	r0, #33141	; 0x8175
   11808:	ands	r1, sl, #1
   1180c:	movt	r0, #2
   11810:	movwne	r1, #4
   11814:	ldrb	r0, [r0]
   11818:	bfi	r1, r0, #1, #1
   1181c:	mov	r0, r6
   11820:	bl	12348 <__assert_fail@plt+0x11fc>
   11824:	tst	r4, #1
   11828:	movweq	r1, #33129	; 0x8169
   1182c:	moveq	r0, #9
   11830:	movteq	r1, #2
   11834:	strbeq	r0, [r1]
   11838:	movw	r1, #33136	; 0x8170
   1183c:	movt	r1, #2
   11840:	ldr	r0, [r1]
   11844:	cmp	r0, #0
   11848:	bne	11878 <__assert_fail@plt+0x72c>
   1184c:	movw	r0, #33480	; 0x82c8
   11850:	movw	r2, #33132	; 0x816c
   11854:	movt	r0, #2
   11858:	movt	r2, #2
   1185c:	str	r0, [r1]
   11860:	mov	r1, #1
   11864:	str	r1, [r2]
   11868:	movw	r1, #33129	; 0x8169
   1186c:	movt	r1, #2
   11870:	ldrb	r1, [r1]
   11874:	strb	r1, [r0]
   11878:	movw	r4, #33096	; 0x8148
   1187c:	movw	r0, #6680	; 0x1a18
   11880:	movw	r7, #7196	; 0x1c1c
   11884:	tst	sl, #1
   11888:	movt	r4, #2
   1188c:	movt	r0, #1
   11890:	movt	r7, #1
   11894:	ldr	r1, [r4]
   11898:	movne	r7, r0
   1189c:	cmp	r1, r5
   118a0:	bne	118bc <__assert_fail@plt+0x770>
   118a4:	movw	r0, #27868	; 0x6cdc
   118a8:	mov	r1, r7
   118ac:	movt	r0, #1
   118b0:	bl	12234 <__assert_fail@plt+0x10e8>
   118b4:	mov	r6, r0
   118b8:	b	118ec <__assert_fail@plt+0x7a0>
   118bc:	mov	r6, #1
   118c0:	bge	118ec <__assert_fail@plt+0x7a0>
   118c4:	mov	r6, #1
   118c8:	ldr	r0, [r9, r1, lsl #2]
   118cc:	mov	r1, r7
   118d0:	bl	12234 <__assert_fail@plt+0x10e8>
   118d4:	ldr	r1, [r4]
   118d8:	and	r6, r6, r0
   118dc:	add	r1, r1, #1
   118e0:	cmp	r1, r5
   118e4:	str	r1, [r4]
   118e8:	blt	118c8 <__assert_fail@plt+0x77c>
   118ec:	movw	r0, #33130	; 0x816a
   118f0:	movt	r0, #2
   118f4:	ldrb	r0, [r0]
   118f8:	cmp	r0, #1
   118fc:	bne	11934 <__assert_fail@plt+0x7e8>
   11900:	movw	r0, #33112	; 0x8158
   11904:	movt	r0, #2
   11908:	ldr	r0, [r0]
   1190c:	bl	12c8c <__assert_fail@plt+0x1b40>
   11910:	cmn	r0, #1
   11914:	bne	11934 <__assert_fail@plt+0x7e8>
   11918:	bl	11044 <__errno_location@plt>
   1191c:	ldr	r1, [r0]
   11920:	movw	r2, #27868	; 0x6cdc
   11924:	mov	r0, #0
   11928:	mov	r6, #0
   1192c:	movt	r2, #1
   11930:	bl	10fc0 <error@plt>
   11934:	eor	r0, r6, #1
   11938:	sub	sp, fp, #28
   1193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11940:	cmn	r0, #3
   11944:	bne	119a4 <__assert_fail@plt+0x858>
   11948:	movw	r0, #33016	; 0x80f8
   1194c:	movw	r2, #26688	; 0x6840
   11950:	movw	r6, #26657	; 0x6821
   11954:	movw	r7, #26672	; 0x6830
   11958:	mov	r1, #0
   1195c:	movt	r0, #2
   11960:	movt	r2, #1
   11964:	movt	r6, #1
   11968:	movt	r7, #1
   1196c:	ldr	r3, [r0]
   11970:	movw	r0, #33116	; 0x815c
   11974:	stm	sp, {r6, r7}
   11978:	str	r2, [sp, #8]
   1197c:	movw	r2, #26643	; 0x6813
   11980:	str	r1, [sp, #12]
   11984:	movw	r1, #26531	; 0x67a3
   11988:	movt	r0, #2
   1198c:	movt	r1, #1
   11990:	movt	r2, #1
   11994:	ldr	r0, [r0]
   11998:	bl	15498 <__assert_fail@plt+0x434c>
   1199c:	mov	r0, #0
   119a0:	bl	11014 <exit@plt>
   119a4:	cmn	r0, #2
   119a8:	bne	119d8 <__assert_fail@plt+0x88c>
   119ac:	mov	r0, #0
   119b0:	bl	11248 <__assert_fail@plt+0xfc>
   119b4:	movw	r1, #26571	; 0x67cb
   119b8:	movt	r1, #1
   119bc:	b	119f4 <__assert_fail@plt+0x8a8>
   119c0:	movw	r1, #26602	; 0x67ea
   119c4:	movt	r1, #1
   119c8:	b	119f4 <__assert_fail@plt+0x8a8>
   119cc:	movw	r1, #26701	; 0x684d
   119d0:	movt	r1, #1
   119d4:	b	119f4 <__assert_fail@plt+0x8a8>
   119d8:	mov	r0, #1
   119dc:	bl	11248 <__assert_fail@plt+0xfc>
   119e0:	movw	r1, #26757	; 0x6885
   119e4:	movt	r1, #1
   119e8:	b	119f4 <__assert_fail@plt+0x8a8>
   119ec:	movw	r1, #26823	; 0x68c7
   119f0:	movt	r1, #1
   119f4:	mov	r0, #0
   119f8:	mov	r2, #5
   119fc:	bl	10f48 <dcgettext@plt>
   11a00:	mov	r2, r0
   11a04:	mov	r0, #0
   11a08:	mov	r1, #0
   11a0c:	bl	10fc0 <error@plt>
   11a10:	mov	r0, #1
   11a14:	bl	11248 <__assert_fail@plt+0xfc>
   11a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a1c:	add	fp, sp, #28
   11a20:	sub	sp, sp, #4
   11a24:	mov	r4, r0
   11a28:	movw	r0, #33484	; 0x82cc
   11a2c:	movw	r7, #33144	; 0x8178
   11a30:	movw	r6, #33140	; 0x8174
   11a34:	movw	lr, #33116	; 0x815c
   11a38:	mov	r8, #0
   11a3c:	movt	r0, #2
   11a40:	movt	r7, #2
   11a44:	movt	r6, #2
   11a48:	movt	lr, #2
   11a4c:	ldr	r0, [r0]
   11a50:	str	r0, [r7]
   11a54:	mov	sl, #0
   11a58:	mov	r9, #0
   11a5c:	ldmib	r4, {r0, r1}
   11a60:	cmp	r0, r1
   11a64:	bcs	11b64 <__assert_fail@plt+0xa18>
   11a68:	add	r1, r0, #1
   11a6c:	str	r1, [r4, #4]
   11a70:	ldrb	r5, [r0]
   11a74:	ldrb	r0, [r6]
   11a78:	mov	r1, #10
   11a7c:	cmp	r0, #0
   11a80:	movwne	r1, #0
   11a84:	cmp	r5, r1
   11a88:	beq	11b94 <__assert_fail@plt+0xa48>
   11a8c:	cmn	r5, #1
   11a90:	beq	11be0 <__assert_fail@plt+0xa94>
   11a94:	ldr	r0, [r7]
   11a98:	adds	r8, r8, #1
   11a9c:	adc	sl, sl, #0
   11aa0:	ldrd	r2, [r0, #8]
   11aa4:	subs	r1, r2, r8
   11aa8:	sbcs	r1, r3, sl
   11aac:	addcc	r0, r0, #16
   11ab0:	strcc	r0, [r7]
   11ab4:	ldr	r2, [r0]
   11ab8:	ldr	r1, [r0, #4]
   11abc:	subs	r0, r8, r2
   11ac0:	sbcs	r0, sl, r1
   11ac4:	bcc	11a5c <__assert_fail@plt+0x910>
   11ac8:	movw	r0, #33136	; 0x8170
   11acc:	movw	ip, #33480	; 0x82c8
   11ad0:	movt	r0, #2
   11ad4:	movt	ip, #2
   11ad8:	ldr	r0, [r0]
   11adc:	subs	r3, r0, ip
   11ae0:	movwne	r3, #1
   11ae4:	cmp	r0, ip
   11ae8:	orr	r3, r9, r3
   11aec:	beq	11b3c <__assert_fail@plt+0x9f0>
   11af0:	mov	ip, r3
   11af4:	eor	r3, r9, #1
   11af8:	tst	r3, #1
   11afc:	mov	r3, ip
   11b00:	bne	11b3c <__assert_fail@plt+0x9f0>
   11b04:	eor	r2, r2, r8
   11b08:	eor	r1, r1, sl
   11b0c:	mov	r3, #1
   11b10:	orrs	r1, r2, r1
   11b14:	bne	11b3c <__assert_fail@plt+0x9f0>
   11b18:	movw	r1, #33132	; 0x816c
   11b1c:	ldr	r3, [lr]
   11b20:	mov	r9, lr
   11b24:	movt	r1, #2
   11b28:	ldr	r2, [r1]
   11b2c:	mov	r1, #1
   11b30:	bl	10f3c <fwrite_unlocked@plt>
   11b34:	mov	r3, #1
   11b38:	mov	lr, r9
   11b3c:	ldr	r0, [lr]
   11b40:	ldr	r1, [r0, #20]
   11b44:	ldr	r2, [r0, #24]
   11b48:	cmp	r1, r2
   11b4c:	bcs	11b7c <__assert_fail@plt+0xa30>
   11b50:	add	r2, r1, #1
   11b54:	mov	r9, r3
   11b58:	str	r2, [r0, #20]
   11b5c:	strb	r5, [r1]
   11b60:	b	11a5c <__assert_fail@plt+0x910>
   11b64:	mov	r0, r4
   11b68:	mov	r5, lr
   11b6c:	bl	110bc <__uflow@plt>
   11b70:	mov	lr, r5
   11b74:	mov	r5, r0
   11b78:	b	11a74 <__assert_fail@plt+0x928>
   11b7c:	uxtb	r1, r5
   11b80:	mov	r5, lr
   11b84:	mov	r9, r3
   11b88:	bl	110c8 <__overflow@plt>
   11b8c:	mov	lr, r5
   11b90:	b	11a5c <__assert_fail@plt+0x910>
   11b94:	ldr	r0, [lr]
   11b98:	ldr	r1, [r0, #20]
   11b9c:	ldr	r2, [r0, #24]
   11ba0:	cmp	r1, r2
   11ba4:	bcs	11bcc <__assert_fail@plt+0xa80>
   11ba8:	add	r2, r1, #1
   11bac:	str	r2, [r0, #20]
   11bb0:	strb	r5, [r1]
   11bb4:	movw	r0, #33484	; 0x82cc
   11bb8:	mov	r8, #0
   11bbc:	movt	r0, #2
   11bc0:	ldr	r0, [r0]
   11bc4:	str	r0, [r7]
   11bc8:	b	11a54 <__assert_fail@plt+0x908>
   11bcc:	uxtb	r1, r5
   11bd0:	mov	r5, lr
   11bd4:	bl	110c8 <__overflow@plt>
   11bd8:	mov	lr, r5
   11bdc:	b	11bb4 <__assert_fail@plt+0xa68>
   11be0:	orrs	r0, r8, sl
   11be4:	beq	11c08 <__assert_fail@plt+0xabc>
   11be8:	ldr	r0, [lr]
   11bec:	ldr	r2, [r0, #20]
   11bf0:	ldr	r3, [r0, #24]
   11bf4:	cmp	r2, r3
   11bf8:	bcs	11c10 <__assert_fail@plt+0xac4>
   11bfc:	add	r3, r2, #1
   11c00:	str	r3, [r0, #20]
   11c04:	strb	r1, [r2]
   11c08:	sub	sp, fp, #28
   11c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c10:	sub	sp, fp, #28
   11c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c18:	b	110c8 <__overflow@plt>
   11c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c20:	add	fp, sp, #28
   11c24:	sub	sp, sp, #20
   11c28:	mov	r4, r0
   11c2c:	movw	r0, #33484	; 0x82cc
   11c30:	movw	r5, #33144	; 0x8178
   11c34:	movt	r0, #2
   11c38:	movt	r5, #2
   11c3c:	ldr	r0, [r0]
   11c40:	str	r0, [r5]
   11c44:	ldmib	r4, {r0, r1}
   11c48:	cmp	r0, r1
   11c4c:	bcs	121fc <__assert_fail@plt+0x10b0>
   11c50:	add	r1, r0, #1
   11c54:	str	r1, [r4, #4]
   11c58:	ldrb	r0, [r0]
   11c5c:	mov	r1, r4
   11c60:	bl	11038 <ungetc@plt>
   11c64:	ldr	r0, [r5]
   11c68:	movw	sl, #33129	; 0x8169
   11c6c:	movw	r9, #33140	; 0x8174
   11c70:	mov	ip, #0
   11c74:	mov	lr, #1
   11c78:	mov	r8, #0
   11c7c:	mov	r6, #0
   11c80:	movt	sl, #2
   11c84:	movt	r9, #2
   11c88:	ldrd	r0, [r0]
   11c8c:	subs	r0, r0, #2
   11c90:	sbcs	r0, r1, #0
   11c94:	movw	r1, #33128	; 0x8168
   11c98:	mov	r0, #0
   11c9c:	movt	r1, #2
   11ca0:	movwcc	r0, #1
   11ca4:	ldrb	r1, [r1]
   11ca8:	eor	r0, r1, r0
   11cac:	str	r0, [sp, #16]
   11cb0:	ldr	r1, [sp, #16]
   11cb4:	eor	r0, lr, #1
   11cb8:	orrs	r0, r0, ip
   11cbc:	movwne	r0, #1
   11cc0:	orr	r0, r1, r0
   11cc4:	tst	r0, #1
   11cc8:	beq	11cd8 <__assert_fail@plt+0xb8c>
   11ccc:	movw	r5, #33144	; 0x8178
   11cd0:	movt	r5, #2
   11cd4:	b	11ea8 <__assert_fail@plt+0xd5c>
   11cd8:	ldrb	r0, [r9]
   11cdc:	ldrb	r1, [sl]
   11ce0:	mov	r2, #0
   11ce4:	mvn	r3, #0
   11ce8:	cmp	r0, #0
   11cec:	mov	r0, #10
   11cf0:	str	r1, [sp]
   11cf4:	movw	r1, #33152	; 0x8180
   11cf8:	movwne	r0, #0
   11cfc:	movt	r1, #2
   11d00:	stmib	sp, {r0, r4}
   11d04:	movw	r0, #33148	; 0x817c
   11d08:	movt	r0, #2
   11d0c:	bl	12e54 <__assert_fail@plt+0x1d08>
   11d10:	movw	r5, #33144	; 0x8178
   11d14:	movw	r7, #33128	; 0x8168
   11d18:	mov	r2, r0
   11d1c:	cmp	r0, #0
   11d20:	movt	r5, #2
   11d24:	movt	r7, #2
   11d28:	bpl	11d80 <__assert_fail@plt+0xc34>
   11d2c:	b	121cc <__assert_fail@plt+0x1080>
   11d30:	add	r3, r2, #1
   11d34:	str	r3, [r0, #20]
   11d38:	strb	r1, [r2]
   11d3c:	ldrb	r0, [r9]
   11d40:	ldrb	r1, [sl]
   11d44:	mov	r2, #0
   11d48:	mvn	r3, #0
   11d4c:	cmp	r0, #0
   11d50:	mov	r0, #10
   11d54:	str	r1, [sp]
   11d58:	movw	r1, #33152	; 0x8180
   11d5c:	movwne	r0, #0
   11d60:	movt	r1, #2
   11d64:	stmib	sp, {r0, r4}
   11d68:	movw	r0, #33148	; 0x817c
   11d6c:	movt	r0, #2
   11d70:	bl	12e54 <__assert_fail@plt+0x1d08>
   11d74:	mov	r2, r0
   11d78:	cmp	r0, #0
   11d7c:	bmi	121cc <__assert_fail@plt+0x1080>
   11d80:	cmp	r2, #0
   11d84:	beq	12210 <__assert_fail@plt+0x10c4>
   11d88:	movw	r0, #33148	; 0x817c
   11d8c:	sub	r6, r2, #1
   11d90:	ldrb	r3, [sl]
   11d94:	movt	r0, #2
   11d98:	ldr	r0, [r0]
   11d9c:	ldrb	r1, [r0, r6]
   11da0:	cmp	r1, r3
   11da4:	beq	11e14 <__assert_fail@plt+0xcc8>
   11da8:	ldrb	r1, [r7]
   11dac:	cmp	r1, #0
   11db0:	bne	11d3c <__assert_fail@plt+0xbf0>
   11db4:	movw	r1, #33116	; 0x815c
   11db8:	movt	r1, #2
   11dbc:	ldr	r3, [r1]
   11dc0:	mov	r1, #1
   11dc4:	bl	10f3c <fwrite_unlocked@plt>
   11dc8:	movw	r0, #33148	; 0x817c
   11dcc:	ldrb	r1, [r9]
   11dd0:	movt	r0, #2
   11dd4:	ldr	r0, [r0]
   11dd8:	cmp	r1, #0
   11ddc:	mov	r1, #10
   11de0:	movwne	r1, #0
   11de4:	ldrb	r0, [r0, r6]
   11de8:	cmp	r1, r0
   11dec:	beq	11d3c <__assert_fail@plt+0xbf0>
   11df0:	movw	r0, #33116	; 0x815c
   11df4:	movt	r0, #2
   11df8:	ldr	r0, [r0]
   11dfc:	ldr	r2, [r0, #20]
   11e00:	ldr	r3, [r0, #24]
   11e04:	cmp	r2, r3
   11e08:	bcc	11d30 <__assert_fail@plt+0xbe4>
   11e0c:	bl	110c8 <__overflow@plt>
   11e10:	b	11d3c <__assert_fail@plt+0xbf0>
   11e14:	ldr	r1, [r5]
   11e18:	ldrd	r2, [r1]
   11e1c:	rsbs	r1, r2, #1
   11e20:	rscs	r1, r3, #0
   11e24:	bcc	11e80 <__assert_fail@plt+0xd34>
   11e28:	movw	r1, #33116	; 0x815c
   11e2c:	mov	r2, r6
   11e30:	movt	r1, #2
   11e34:	ldr	r3, [r1]
   11e38:	mov	r1, #1
   11e3c:	bl	10f3c <fwrite_unlocked@plt>
   11e40:	ldrb	r0, [r9]
   11e44:	ldrb	r1, [sl]
   11e48:	cmp	r0, #0
   11e4c:	mov	r0, #10
   11e50:	movwne	r0, #0
   11e54:	cmp	r0, r1
   11e58:	bne	11e7c <__assert_fail@plt+0xd30>
   11e5c:	ldmib	r4, {r0, r1}
   11e60:	cmp	r0, r1
   11e64:	bcs	121b8 <__assert_fail@plt+0x106c>
   11e68:	add	r1, r0, #1
   11e6c:	str	r1, [r4, #4]
   11e70:	ldrb	r0, [r0]
   11e74:	mov	r1, r4
   11e78:	bl	11038 <ungetc@plt>
   11e7c:	mov	r8, #1
   11e80:	ldr	r0, [r5]
   11e84:	mov	ip, #0
   11e88:	mov	lr, #2
   11e8c:	mov	r6, #0
   11e90:	ldrd	r2, [r0, #8]
   11e94:	rsbs	r1, r2, #1
   11e98:	rscs	r1, r3, #0
   11e9c:	addcs	r0, r0, #16
   11ea0:	movcs	ip, #0
   11ea4:	strcs	r0, [r5]
   11ea8:	ldr	r0, [r5]
   11eac:	ldrd	r0, [r0]
   11eb0:	subs	r0, lr, r0
   11eb4:	sbcs	r0, ip, r1
   11eb8:	bcs	11f24 <__assert_fail@plt+0xdd8>
   11ebc:	ldmib	r4, {r0, r1}
   11ec0:	mov	r5, r6
   11ec4:	cmp	r0, r1
   11ec8:	bcs	11f04 <__assert_fail@plt+0xdb8>
   11ecc:	add	r1, r0, #1
   11ed0:	str	r1, [r4, #4]
   11ed4:	ldrb	r6, [r0]
   11ed8:	ldrb	r0, [sl]
   11edc:	cmp	r6, r0
   11ee0:	beq	12024 <__assert_fail@plt+0xed8>
   11ee4:	ldrb	r1, [r9]
   11ee8:	cmp	r1, #0
   11eec:	mov	r1, #10
   11ef0:	movwne	r1, #0
   11ef4:	cmn	r6, #1
   11ef8:	cmpne	r6, r1
   11efc:	bne	11ebc <__assert_fail@plt+0xd70>
   11f00:	b	12024 <__assert_fail@plt+0xed8>
   11f04:	mov	r0, r4
   11f08:	mov	r6, ip
   11f0c:	mov	r7, lr
   11f10:	bl	110bc <__uflow@plt>
   11f14:	mov	ip, r6
   11f18:	mov	lr, r7
   11f1c:	mov	r6, r0
   11f20:	b	11ed8 <__assert_fail@plt+0xd8c>
   11f24:	tst	r8, #1
   11f28:	beq	11fd8 <__assert_fail@plt+0xe8c>
   11f2c:	movw	r0, #33116	; 0x815c
   11f30:	movw	r1, #33132	; 0x816c
   11f34:	mov	r5, ip
   11f38:	mov	r7, lr
   11f3c:	movt	r0, #2
   11f40:	movt	r1, #2
   11f44:	ldr	r3, [r0]
   11f48:	movw	r0, #33136	; 0x8170
   11f4c:	ldr	r2, [r1]
   11f50:	mov	r1, #1
   11f54:	movt	r0, #2
   11f58:	ldr	r0, [r0]
   11f5c:	bl	10f3c <fwrite_unlocked@plt>
   11f60:	mov	lr, r7
   11f64:	mov	ip, r5
   11f68:	b	11fd8 <__assert_fail@plt+0xe8c>
   11f6c:	movw	r0, #33116	; 0x815c
   11f70:	movt	r0, #2
   11f74:	ldr	r0, [r0]
   11f78:	ldr	r1, [r0, #20]
   11f7c:	ldr	r2, [r0, #24]
   11f80:	cmp	r1, r2
   11f84:	bcs	11fbc <__assert_fail@plt+0xe70>
   11f88:	add	r2, r1, #1
   11f8c:	mov	r6, r7
   11f90:	str	r2, [r0, #20]
   11f94:	strb	r7, [r1]
   11f98:	b	11fd8 <__assert_fail@plt+0xe8c>
   11f9c:	mov	r0, r4
   11fa0:	mov	r5, ip
   11fa4:	mov	r7, lr
   11fa8:	bl	110bc <__uflow@plt>
   11fac:	mov	lr, r7
   11fb0:	mov	ip, r5
   11fb4:	mov	r7, r0
   11fb8:	b	11ff0 <__assert_fail@plt+0xea4>
   11fbc:	uxtb	r1, r7
   11fc0:	mov	r5, ip
   11fc4:	mov	r6, lr
   11fc8:	bl	110c8 <__overflow@plt>
   11fcc:	mov	lr, r6
   11fd0:	mov	ip, r5
   11fd4:	mov	r6, r7
   11fd8:	ldmib	r4, {r0, r1}
   11fdc:	cmp	r0, r1
   11fe0:	bcs	11f9c <__assert_fail@plt+0xe50>
   11fe4:	add	r1, r0, #1
   11fe8:	str	r1, [r4, #4]
   11fec:	ldrb	r7, [r0]
   11ff0:	ldrb	r0, [sl]
   11ff4:	mov	r8, #1
   11ff8:	cmp	r7, r0
   11ffc:	beq	1201c <__assert_fail@plt+0xed0>
   12000:	ldrb	r1, [r9]
   12004:	cmp	r1, #0
   12008:	mov	r1, #10
   1200c:	movwne	r1, #0
   12010:	cmn	r7, #1
   12014:	cmpne	r7, r1
   12018:	bne	11f6c <__assert_fail@plt+0xe20>
   1201c:	mov	r5, r6
   12020:	mov	r6, r7
   12024:	ldrb	r1, [r9]
   12028:	cmp	r1, #0
   1202c:	mov	r1, #10
   12030:	movwne	r1, #0
   12034:	cmp	r6, r0
   12038:	cmpeq	r1, r0
   1203c:	beq	12080 <__assert_fail@plt+0xf34>
   12040:	cmp	r6, r0
   12044:	bne	120bc <__assert_fail@plt+0xf70>
   12048:	movw	r0, #33144	; 0x8178
   1204c:	adds	lr, lr, #1
   12050:	movt	r0, #2
   12054:	adc	ip, ip, #0
   12058:	ldr	r0, [r0]
   1205c:	ldrd	r2, [r0, #8]
   12060:	subs	r1, r2, lr
   12064:	sbcs	r1, r3, ip
   12068:	bcs	11cb0 <__assert_fail@plt+0xb64>
   1206c:	movw	r1, #33144	; 0x8178
   12070:	add	r0, r0, #16
   12074:	movt	r1, #2
   12078:	str	r0, [r1]
   1207c:	b	11cb0 <__assert_fail@plt+0xb64>
   12080:	str	lr, [sp, #12]
   12084:	mov	r7, ip
   12088:	ldmib	r4, {r0, r1}
   1208c:	cmp	r0, r1
   12090:	bcs	12178 <__assert_fail@plt+0x102c>
   12094:	add	r1, r0, #1
   12098:	str	r1, [r4, #4]
   1209c:	ldrb	r0, [r0]
   120a0:	mov	r1, r4
   120a4:	bl	11038 <ungetc@plt>
   120a8:	ldrb	r0, [sl]
   120ac:	ldr	lr, [sp, #12]
   120b0:	mov	ip, r7
   120b4:	cmp	r6, r0
   120b8:	beq	12048 <__assert_fail@plt+0xefc>
   120bc:	ldrb	r1, [r9]
   120c0:	add	r2, r6, #1
   120c4:	clz	r2, r2
   120c8:	lsr	r7, r2, #5
   120cc:	cmp	r1, #0
   120d0:	mov	r1, #10
   120d4:	movwne	r1, #0
   120d8:	cmn	r6, #1
   120dc:	cmpne	r6, r1
   120e0:	bne	11cb0 <__assert_fail@plt+0xb64>
   120e4:	tst	r8, #1
   120e8:	eoreq	r2, lr, #1
   120ec:	orrseq	r2, r2, ip
   120f0:	beq	12134 <__assert_fail@plt+0xfe8>
   120f4:	cmp	r5, r1
   120f8:	bne	12108 <__assert_fail@plt+0xfbc>
   120fc:	cmp	r6, r1
   12100:	cmpne	r1, r0
   12104:	bne	12148 <__assert_fail@plt+0xffc>
   12108:	movw	r0, #33116	; 0x815c
   1210c:	movt	r0, #2
   12110:	ldr	r0, [r0]
   12114:	ldr	r2, [r0, #20]
   12118:	ldr	r3, [r0, #24]
   1211c:	cmp	r2, r3
   12120:	bcs	121b0 <__assert_fail@plt+0x1064>
   12124:	add	r3, r2, #1
   12128:	str	r3, [r0, #20]
   1212c:	strb	r1, [r2]
   12130:	b	12148 <__assert_fail@plt+0xffc>
   12134:	movw	r2, #33128	; 0x8168
   12138:	movt	r2, #2
   1213c:	ldrb	r2, [r2]
   12140:	cmp	r2, #0
   12144:	beq	120f4 <__assert_fail@plt+0xfa8>
   12148:	movw	r1, #33144	; 0x8178
   1214c:	cmp	r7, #0
   12150:	movt	r1, #2
   12154:	bne	121f4 <__assert_fail@plt+0x10a8>
   12158:	movw	r0, #33484	; 0x82cc
   1215c:	mov	ip, #0
   12160:	mov	lr, #1
   12164:	mov	r8, #0
   12168:	movt	r0, #2
   1216c:	ldr	r0, [r0]
   12170:	str	r0, [r1]
   12174:	b	11cb0 <__assert_fail@plt+0xb64>
   12178:	mov	r0, r4
   1217c:	bl	110bc <__uflow@plt>
   12180:	cmn	r0, #1
   12184:	bne	120a0 <__assert_fail@plt+0xf54>
   12188:	ldrb	r0, [r9]
   1218c:	ldr	lr, [sp, #12]
   12190:	mov	ip, r7
   12194:	mov	r1, #10
   12198:	mvn	r6, #0
   1219c:	mov	r7, #1
   121a0:	cmp	r0, #0
   121a4:	ldrb	r0, [sl]
   121a8:	movwne	r1, #0
   121ac:	b	120e4 <__assert_fail@plt+0xf98>
   121b0:	bl	110c8 <__overflow@plt>
   121b4:	b	12148 <__assert_fail@plt+0xffc>
   121b8:	mov	r0, r4
   121bc:	bl	110bc <__uflow@plt>
   121c0:	cmn	r0, #1
   121c4:	bne	11e74 <__assert_fail@plt+0xd28>
   121c8:	b	11e80 <__assert_fail@plt+0xd34>
   121cc:	movw	r0, #33148	; 0x817c
   121d0:	movt	r0, #2
   121d4:	mov	r5, r0
   121d8:	ldr	r0, [r0]
   121dc:	bl	12d84 <__assert_fail@plt+0x1c38>
   121e0:	mov	r0, #0
   121e4:	str	r0, [r5]
   121e8:	ldrb	r0, [r4]
   121ec:	tst	r0, #48	; 0x30
   121f0:	beq	12230 <__assert_fail@plt+0x10e4>
   121f4:	sub	sp, fp, #28
   121f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121fc:	mov	r0, r4
   12200:	bl	110bc <__uflow@plt>
   12204:	cmn	r0, #1
   12208:	bne	11c5c <__assert_fail@plt+0xb10>
   1220c:	b	121f4 <__assert_fail@plt+0x10a8>
   12210:	movw	r0, #27429	; 0x6b25
   12214:	movw	r1, #27442	; 0x6b32
   12218:	movw	r3, #27452	; 0x6b3c
   1221c:	movw	r2, #315	; 0x13b
   12220:	movt	r0, #1
   12224:	movt	r1, #1
   12228:	movt	r3, #1
   1222c:	bl	1114c <__assert_fail@plt>
   12230:	bl	15c08 <__assert_fail@plt+0x4abc>
   12234:	push	{r4, r5, r6, r7, fp, lr}
   12238:	add	fp, sp, #16
   1223c:	mov	r5, r1
   12240:	movw	r1, #27868	; 0x6cdc
   12244:	mov	r4, r0
   12248:	movt	r1, #1
   1224c:	bl	10ed0 <strcmp@plt>
   12250:	cmp	r0, #0
   12254:	beq	12280 <__assert_fail@plt+0x1134>
   12258:	movw	r1, #26641	; 0x6811
   1225c:	mov	r0, r4
   12260:	movt	r1, #1
   12264:	bl	11104 <fopen64@plt>
   12268:	mov	r6, r0
   1226c:	cmp	r0, #0
   12270:	bne	1229c <__assert_fail@plt+0x1150>
   12274:	bl	11044 <__errno_location@plt>
   12278:	ldr	r5, [r0]
   1227c:	b	122f8 <__assert_fail@plt+0x11ac>
   12280:	movw	r0, #33130	; 0x816a
   12284:	mov	r1, #1
   12288:	movt	r0, #2
   1228c:	strb	r1, [r0]
   12290:	movw	r0, #33112	; 0x8158
   12294:	movt	r0, #2
   12298:	ldr	r6, [r0]
   1229c:	mov	r0, r6
   122a0:	mov	r1, #2
   122a4:	bl	12c50 <__assert_fail@plt+0x1b04>
   122a8:	mov	r0, r6
   122ac:	blx	r5
   122b0:	bl	11044 <__errno_location@plt>
   122b4:	ldr	r1, [r6]
   122b8:	mov	r7, r0
   122bc:	ldr	r0, [r0]
   122c0:	lsl	r1, r1, #26
   122c4:	and	r5, r0, r1, asr #31
   122c8:	movw	r1, #27868	; 0x6cdc
   122cc:	mov	r0, r4
   122d0:	movt	r1, #1
   122d4:	bl	10ed0 <strcmp@plt>
   122d8:	cmp	r0, #0
   122dc:	beq	1232c <__assert_fail@plt+0x11e0>
   122e0:	mov	r0, r6
   122e4:	bl	12c8c <__assert_fail@plt+0x1b40>
   122e8:	cmn	r0, #1
   122ec:	ldreq	r5, [r7]
   122f0:	cmp	r5, #0
   122f4:	beq	1233c <__assert_fail@plt+0x11f0>
   122f8:	mov	r0, #0
   122fc:	mov	r1, #3
   12300:	mov	r2, r4
   12304:	mov	r6, #0
   12308:	bl	14c1c <__assert_fail@plt+0x3ad0>
   1230c:	movw	r2, #28126	; 0x6dde
   12310:	mov	r3, r0
   12314:	mov	r0, #0
   12318:	mov	r1, r5
   1231c:	movt	r2, #1
   12320:	bl	10fc0 <error@plt>
   12324:	mov	r0, r6
   12328:	pop	{r4, r5, r6, r7, fp, pc}
   1232c:	mov	r0, r6
   12330:	bl	110f8 <clearerr_unlocked@plt>
   12334:	cmp	r5, #0
   12338:	bne	122f8 <__assert_fail@plt+0x11ac>
   1233c:	mov	r6, #1
   12340:	mov	r0, r6
   12344:	pop	{r4, r5, r6, r7, fp, pc}
   12348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1234c:	add	fp, sp, #28
   12350:	sub	sp, sp, #20
   12354:	mov	lr, r0
   12358:	ands	r0, r1, #1
   1235c:	mov	r2, #0
   12360:	str	r1, [sp]
   12364:	str	r0, [sp, #4]
   12368:	beq	123a4 <__assert_fail@plt+0x1258>
   1236c:	movw	r1, #27868	; 0x6cdc
   12370:	mov	r0, lr
   12374:	mov	r4, lr
   12378:	movt	r1, #1
   1237c:	bl	10ed0 <strcmp@plt>
   12380:	cmp	r0, #0
   12384:	clz	r0, r0
   12388:	mov	lr, r4
   1238c:	mov	r2, #0
   12390:	mov	r8, #0
   12394:	lsr	sl, r0, #5
   12398:	addeq	lr, lr, #1
   1239c:	mov	r1, sl
   123a0:	b	123b0 <__assert_fail@plt+0x1264>
   123a4:	mov	sl, #0
   123a8:	mov	r8, #0
   123ac:	mov	r1, #0
   123b0:	movw	ip, #33488	; 0x82d0
   123b4:	mov	r9, #1
   123b8:	mov	r5, r1
   123bc:	mov	r0, #0
   123c0:	mov	r6, #0
   123c4:	movt	ip, #2
   123c8:	ldrb	r7, [lr]
   123cc:	cmp	r7, #44	; 0x2c
   123d0:	beq	12540 <__assert_fail@plt+0x13f4>
   123d4:	cmp	r7, #45	; 0x2d
   123d8:	bne	1241c <__assert_fail@plt+0x12d0>
   123dc:	tst	r5, #1
   123e0:	bne	12a68 <__assert_fail@plt+0x191c>
   123e4:	orrs	r0, sl, r8
   123e8:	eoreq	r0, r1, #1
   123ec:	tsteq	r0, #1
   123f0:	beq	129dc <__assert_fail@plt+0x1890>
   123f4:	ands	r6, r1, #1
   123f8:	mov	r5, #1
   123fc:	mov	r9, sl
   12400:	mov	sl, #0
   12404:	mov	r0, #0
   12408:	add	lr, lr, #1
   1240c:	movne	r6, r8
   12410:	moveq	r9, r5
   12414:	mov	r8, #0
   12418:	b	123c8 <__assert_fail@plt+0x127c>
   1241c:	str	r5, [sp, #8]
   12420:	mov	r5, sl
   12424:	mov	sl, r8
   12428:	mov	r4, lr
   1242c:	str	r2, [sp, #16]
   12430:	str	r1, [sp, #12]
   12434:	mov	r8, r0
   12438:	bl	11008 <__ctype_b_loc@plt>
   1243c:	mov	r3, r8
   12440:	mov	r8, sl
   12444:	mov	sl, r5
   12448:	ldr	r5, [sp, #8]
   1244c:	ldr	r1, [sp, #12]
   12450:	ldr	r2, [sp, #16]
   12454:	movw	ip, #33488	; 0x82d0
   12458:	mov	lr, r4
   1245c:	cmp	r7, #0
   12460:	movt	ip, #2
   12464:	beq	12540 <__assert_fail@plt+0x13f4>
   12468:	ldr	r0, [r0]
   1246c:	add	r0, r0, r7, lsl #1
   12470:	ldrh	r0, [r0]
   12474:	ands	r0, r0, #1
   12478:	bne	12540 <__assert_fail@plt+0x13f4>
   1247c:	sub	r0, r7, #48	; 0x30
   12480:	cmp	r0, #9
   12484:	bhi	12a94 <__assert_fail@plt+0x1948>
   12488:	movw	r1, #33156	; 0x8184
   1248c:	movt	r1, #2
   12490:	ldr	r7, [r1]
   12494:	cmp	r7, #0
   12498:	mov	r1, r7
   1249c:	movwne	r1, #1
   124a0:	tst	r3, r1
   124a4:	movweq	r1, #33156	; 0x8184
   124a8:	moveq	r7, lr
   124ac:	movteq	r1, #2
   124b0:	streq	lr, [r1]
   124b4:	movw	r1, #39321	; 0x9999
   124b8:	movt	r1, #39321	; 0x9999
   124bc:	subs	r1, r1, sl
   124c0:	movw	r1, #39321	; 0x9999
   124c4:	movt	r1, #6553	; 0x1999
   124c8:	sbcs	r1, r1, r8
   124cc:	bcc	129f0 <__assert_fail@plt+0x18a4>
   124d0:	mov	r1, #10
   124d4:	add	r3, r8, r8, lsl #2
   124d8:	umull	r1, r2, sl, r1
   124dc:	add	r2, r2, r3, lsl #1
   124e0:	adds	r1, r1, r0
   124e4:	adc	r0, r2, r0, asr #31
   124e8:	subs	r2, r1, sl
   124ec:	sbcs	r2, r0, r8
   124f0:	mov	r2, #0
   124f4:	movwcc	r2, #1
   124f8:	cmp	r2, #0
   124fc:	moveq	r8, r0
   12500:	moveq	sl, r1
   12504:	cmp	r2, #0
   12508:	bne	129f0 <__assert_fail@plt+0x18a4>
   1250c:	mvn	r1, #0
   12510:	eor	r0, sl, r1
   12514:	eor	r1, r8, r1
   12518:	orrs	r0, r0, r1
   1251c:	beq	129f0 <__assert_fail@plt+0x18a4>
   12520:	ldr	r2, [sp, #16]
   12524:	ldr	r1, [sp, #12]
   12528:	eor	r0, r5, #1
   1252c:	add	lr, lr, #1
   12530:	orr	r1, r1, r0
   12534:	orr	r2, r2, r5
   12538:	mov	r0, #1
   1253c:	b	123c8 <__assert_fail@plt+0x127c>
   12540:	tst	r5, #1
   12544:	beq	125d0 <__assert_fail@plt+0x1484>
   12548:	orr	r0, r1, r2
   1254c:	mov	r1, r9
   12550:	mov	r9, #1
   12554:	movw	r4, #33484	; 0x82cc
   12558:	ands	r7, r0, #1
   1255c:	str	r1, [sp, #16]
   12560:	movt	r4, #2
   12564:	movne	r9, r1
   12568:	ldr	r1, [sp, #4]
   1256c:	movne	r7, r6
   12570:	cmp	r1, #0
   12574:	movw	r1, #33160	; 0x8188
   12578:	movt	r1, #2
   1257c:	tsteq	r0, #1
   12580:	beq	12a88 <__assert_fail@plt+0x193c>
   12584:	tst	r2, #1
   12588:	beq	12620 <__assert_fail@plt+0x14d4>
   1258c:	subs	r0, sl, r9
   12590:	sbcs	r0, r8, r7
   12594:	bcc	12ae8 <__assert_fail@plt+0x199c>
   12598:	ldr	r5, [ip]
   1259c:	ldr	r0, [r1]
   125a0:	cmp	r5, r0
   125a4:	bne	12694 <__assert_fail@plt+0x1548>
   125a8:	ldr	r0, [r4]
   125ac:	mov	r2, #16
   125b0:	mov	r5, lr
   125b4:	bl	15878 <__assert_fail@plt+0x472c>
   125b8:	movw	ip, #33488	; 0x82d0
   125bc:	mov	lr, r5
   125c0:	str	r0, [r4]
   125c4:	movt	ip, #2
   125c8:	ldr	r5, [ip]
   125cc:	b	12698 <__assert_fail@plt+0x154c>
   125d0:	movw	r4, #33484	; 0x82cc
   125d4:	movw	r1, #33160	; 0x8188
   125d8:	orrs	r0, sl, r8
   125dc:	movt	r4, #2
   125e0:	movt	r1, #2
   125e4:	beq	129dc <__assert_fail@plt+0x1890>
   125e8:	ldr	r5, [ip]
   125ec:	ldr	r0, [r1]
   125f0:	cmp	r5, r0
   125f4:	bne	12658 <__assert_fail@plt+0x150c>
   125f8:	ldr	r0, [r4]
   125fc:	mov	r2, #16
   12600:	mov	r5, lr
   12604:	bl	15878 <__assert_fail@plt+0x472c>
   12608:	movw	ip, #33488	; 0x82d0
   1260c:	mov	lr, r5
   12610:	str	r0, [r4]
   12614:	movt	ip, #2
   12618:	ldr	r5, [ip]
   1261c:	b	1265c <__assert_fail@plt+0x1510>
   12620:	ldr	r5, [ip]
   12624:	ldr	r0, [r1]
   12628:	cmp	r5, r0
   1262c:	bne	12674 <__assert_fail@plt+0x1528>
   12630:	ldr	r0, [r4]
   12634:	mov	r2, #16
   12638:	mov	r5, lr
   1263c:	bl	15878 <__assert_fail@plt+0x472c>
   12640:	movw	ip, #33488	; 0x82d0
   12644:	mov	lr, r5
   12648:	str	r0, [r4]
   1264c:	movt	ip, #2
   12650:	ldr	r5, [ip]
   12654:	b	12678 <__assert_fail@plt+0x152c>
   12658:	ldr	r0, [r4]
   1265c:	vmov.32	d16[0], sl
   12660:	add	r2, r0, r5, lsl #4
   12664:	vmov.32	d16[1], r8
   12668:	vorr	d17, d16, d16
   1266c:	vst1.64	{d16-d17}, [r2]
   12670:	b	126ac <__assert_fail@plt+0x1560>
   12674:	ldr	r0, [r4]
   12678:	mov	r2, r0
   1267c:	mvn	r3, #0
   12680:	str	r9, [r2, r5, lsl #4]!
   12684:	str	r7, [r2, #4]
   12688:	str	r3, [r2, #8]
   1268c:	str	r3, [r2, #12]
   12690:	b	126b0 <__assert_fail@plt+0x1564>
   12694:	ldr	r0, [r4]
   12698:	mov	r2, r0
   1269c:	str	r9, [r2, r5, lsl #4]!
   126a0:	stmib	r2, {r7, sl}
   126a4:	str	r8, [r2, #12]
   126a8:	ldr	r9, [sp, #16]
   126ac:	mov	r7, r6
   126b0:	add	r1, r5, #1
   126b4:	str	r1, [ip]
   126b8:	ldrb	r2, [lr]
   126bc:	cmp	r2, #0
   126c0:	beq	126e8 <__assert_fail@plt+0x159c>
   126c4:	mov	sl, #0
   126c8:	mov	r8, #0
   126cc:	mov	r1, #0
   126d0:	mov	r2, #0
   126d4:	mov	r5, #0
   126d8:	mov	r0, #0
   126dc:	mov	r6, r7
   126e0:	add	lr, lr, #1
   126e4:	b	123c8 <__assert_fail@plt+0x127c>
   126e8:	cmp	r1, #0
   126ec:	beq	12b14 <__assert_fail@plt+0x19c8>
   126f0:	movw	r3, #11048	; 0x2b28
   126f4:	mov	r2, #16
   126f8:	movt	r3, #1
   126fc:	bl	11110 <qsort@plt>
   12700:	movw	lr, #33488	; 0x82d0
   12704:	movt	lr, #2
   12708:	ldr	r8, [lr]
   1270c:	cmp	r8, #0
   12710:	beq	127c4 <__assert_fail@plt+0x1678>
   12714:	mov	r6, #0
   12718:	b	12724 <__assert_fail@plt+0x15d8>
   1271c:	cmp	r6, r8
   12720:	bcs	127c8 <__assert_fail@plt+0x167c>
   12724:	mov	sl, r6
   12728:	add	r6, r6, #1
   1272c:	cmp	r6, r8
   12730:	bcs	1271c <__assert_fail@plt+0x15d0>
   12734:	mvn	r0, #-268435455	; 0xf0000001
   12738:	sub	r9, r0, sl
   1273c:	ldr	r5, [r4]
   12740:	add	r1, r5, sl, lsl #4
   12744:	mov	r0, r5
   12748:	ldr	r7, [r0, r6, lsl #4]!
   1274c:	ldr	r2, [r1, #8]!
   12750:	ldr	r3, [r1, #4]
   12754:	ldr	r0, [r0, #4]
   12758:	subs	r7, r2, r7
   1275c:	sbcs	r0, r3, r0
   12760:	bcc	1271c <__assert_fail@plt+0x15d0>
   12764:	add	r0, r5, r6, lsl #4
   12768:	ldrd	r4, [r0, #8]
   1276c:	subs	r7, r2, r4
   12770:	sbcs	r7, r3, r5
   12774:	mov	r7, #0
   12778:	movwcc	r7, #1
   1277c:	cmp	r7, #0
   12780:	movne	r2, r4
   12784:	movne	r3, r5
   12788:	movw	r4, #33484	; 0x82cc
   1278c:	strd	r2, [r1]
   12790:	add	r2, r9, r8
   12794:	add	r1, r0, #16
   12798:	movt	r4, #2
   1279c:	lsl	r2, r2, #4
   127a0:	bl	10ef4 <memmove@plt>
   127a4:	movw	lr, #33488	; 0x82d0
   127a8:	movt	lr, #2
   127ac:	ldr	r0, [lr]
   127b0:	sub	r8, r0, #1
   127b4:	cmp	r6, r8
   127b8:	str	r8, [lr]
   127bc:	bcc	1273c <__assert_fail@plt+0x15f0>
   127c0:	b	1271c <__assert_fail@plt+0x15d0>
   127c4:	mov	r8, #0
   127c8:	ldr	r0, [sp]
   127cc:	tst	r0, #2
   127d0:	beq	12998 <__assert_fail@plt+0x184c>
   127d4:	movw	r1, #33160	; 0x8188
   127d8:	ldr	r7, [r4]
   127dc:	mov	r0, #0
   127e0:	movt	r1, #2
   127e4:	str	r0, [lr]
   127e8:	str	r0, [r4]
   127ec:	str	r0, [r1]
   127f0:	ldr	r6, [r7]
   127f4:	ldr	r5, [r7, #4]
   127f8:	subs	r1, r6, #2
   127fc:	sbcs	r1, r5, #0
   12800:	bcc	12858 <__assert_fail@plt+0x170c>
   12804:	movw	r1, #33160	; 0x8188
   12808:	mov	r0, #0
   1280c:	mov	r2, #16
   12810:	mov	r9, #0
   12814:	movt	r1, #2
   12818:	bl	15878 <__assert_fail@plt+0x472c>
   1281c:	movw	lr, #33488	; 0x82d0
   12820:	mov	r2, #1
   12824:	mov	r3, r0
   12828:	str	r0, [r4]
   1282c:	movt	lr, #2
   12830:	ldr	r1, [lr]
   12834:	str	r2, [r3, r1, lsl #4]!
   12838:	subs	r2, r6, #1
   1283c:	add	ip, r1, #1
   12840:	sbc	r6, r5, #0
   12844:	str	r9, [r3, #4]
   12848:	str	r2, [r3, #8]
   1284c:	str	r6, [r3, #12]
   12850:	str	ip, [lr]
   12854:	b	1285c <__assert_fail@plt+0x1710>
   12858:	mov	ip, #0
   1285c:	cmp	r8, #2
   12860:	str	r7, [sp, #16]
   12864:	bcc	128fc <__assert_fail@plt+0x17b0>
   12868:	add	r5, r7, #16
   1286c:	sub	r7, r8, #1
   12870:	b	12898 <__assert_fail@plt+0x174c>
   12874:	mov	r1, r0
   12878:	str	r9, [r1, ip, lsl #4]!
   1287c:	add	ip, ip, #1
   12880:	stmib	r1, {r6, sl}
   12884:	str	r4, [r1, #12]
   12888:	str	ip, [lr]
   1288c:	add	r5, r5, #16
   12890:	subs	r7, r7, #1
   12894:	beq	128fc <__assert_fail@plt+0x17b0>
   12898:	ldr	r6, [r5, #-8]
   1289c:	ldr	r4, [r5, #-4]
   128a0:	ldm	r5, {r2, r3}
   128a4:	adds	r9, r6, #1
   128a8:	adc	r6, r4, #0
   128ac:	eor	r1, r9, r2
   128b0:	eor	r4, r6, r3
   128b4:	orrs	r1, r1, r4
   128b8:	beq	1288c <__assert_fail@plt+0x1740>
   128bc:	movw	r1, #33160	; 0x8188
   128c0:	subs	sl, r2, #1
   128c4:	movt	r1, #2
   128c8:	sbc	r4, r3, #0
   128cc:	ldr	r2, [r1]
   128d0:	cmp	ip, r2
   128d4:	bne	12874 <__assert_fail@plt+0x1728>
   128d8:	mov	r2, #16
   128dc:	bl	15878 <__assert_fail@plt+0x472c>
   128e0:	movw	lr, #33488	; 0x82d0
   128e4:	movw	r1, #33484	; 0x82cc
   128e8:	movt	lr, #2
   128ec:	movt	r1, #2
   128f0:	ldr	ip, [lr]
   128f4:	str	r0, [r1]
   128f8:	b	12874 <__assert_fail@plt+0x1728>
   128fc:	ldr	r4, [sp, #16]
   12900:	mvn	r1, #0
   12904:	add	r2, r4, r8, lsl #4
   12908:	ldrd	r2, [r2, #-8]
   1290c:	eor	r7, r3, r1
   12910:	eor	r6, r2, r1
   12914:	orrs	r7, r6, r7
   12918:	beq	1297c <__assert_fail@plt+0x1830>
   1291c:	movw	r1, #33160	; 0x8188
   12920:	adds	r6, r2, #1
   12924:	movt	r1, #2
   12928:	adc	r5, r3, #0
   1292c:	ldr	r1, [r1]
   12930:	cmp	ip, r1
   12934:	bne	12960 <__assert_fail@plt+0x1814>
   12938:	movw	r1, #33160	; 0x8188
   1293c:	mov	r2, #16
   12940:	movt	r1, #2
   12944:	bl	15878 <__assert_fail@plt+0x472c>
   12948:	movw	lr, #33488	; 0x82d0
   1294c:	movw	r1, #33484	; 0x82cc
   12950:	movt	lr, #2
   12954:	movt	r1, #2
   12958:	ldr	ip, [lr]
   1295c:	str	r0, [r1]
   12960:	str	r6, [r0, ip, lsl #4]!
   12964:	mvn	r1, #0
   12968:	str	r5, [r0, #4]
   1296c:	str	r1, [r0, #8]
   12970:	str	r1, [r0, #12]
   12974:	add	r0, ip, #1
   12978:	str	r0, [lr]
   1297c:	mov	r0, r4
   12980:	bl	12d84 <__assert_fail@plt+0x1c38>
   12984:	movw	lr, #33488	; 0x82d0
   12988:	movw	r4, #33484	; 0x82cc
   1298c:	movt	lr, #2
   12990:	movt	r4, #2
   12994:	ldr	r8, [lr]
   12998:	ldr	r0, [r4]
   1299c:	add	r1, r8, #1
   129a0:	mov	r5, r4
   129a4:	mov	r4, lr
   129a8:	str	r1, [lr]
   129ac:	lsl	r1, r1, #4
   129b0:	bl	15714 <__assert_fail@plt+0x45c8>
   129b4:	ldr	r1, [r4]
   129b8:	str	r0, [r5]
   129bc:	add	r0, r0, r1, lsl #4
   129c0:	mvn	r1, #0
   129c4:	str	r1, [r0, #-16]
   129c8:	str	r1, [r0, #-12]
   129cc:	str	r1, [r0, #-8]
   129d0:	str	r1, [r0, #-4]
   129d4:	sub	sp, fp, #28
   129d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129dc:	movw	r0, #27809	; 0x6ca1
   129e0:	movw	r1, #27764	; 0x6c74
   129e4:	movt	r0, #1
   129e8:	movt	r1, #1
   129ec:	b	12a78 <__assert_fail@plt+0x192c>
   129f0:	movw	r1, #27895	; 0x6cf7
   129f4:	mov	r0, r7
   129f8:	movt	r1, #1
   129fc:	bl	11140 <strspn@plt>
   12a00:	mov	r1, r0
   12a04:	mov	r0, r7
   12a08:	bl	15b94 <__assert_fail@plt+0x4a48>
   12a0c:	ldr	r2, [sp]
   12a10:	mov	r4, r0
   12a14:	movw	r0, #27944	; 0x6d28
   12a18:	movw	r1, #27906	; 0x6d02
   12a1c:	movt	r0, #1
   12a20:	movt	r1, #1
   12a24:	tst	r2, #4
   12a28:	mov	r2, #5
   12a2c:	moveq	r1, r0
   12a30:	mov	r0, #0
   12a34:	bl	10f48 <dcgettext@plt>
   12a38:	mov	r5, r0
   12a3c:	mov	r0, r4
   12a40:	bl	14ec8 <__assert_fail@plt+0x3d7c>
   12a44:	mov	r3, r0
   12a48:	mov	r0, #0
   12a4c:	mov	r1, #0
   12a50:	mov	r2, r5
   12a54:	bl	10fc0 <error@plt>
   12a58:	mov	r0, r4
   12a5c:	bl	12d84 <__assert_fail@plt+0x1c38>
   12a60:	mov	r0, #1
   12a64:	bl	11248 <__assert_fail@plt+0xfc>
   12a68:	movw	r0, #27744	; 0x6c60
   12a6c:	movw	r1, #27712	; 0x6c40
   12a70:	movt	r0, #1
   12a74:	movt	r1, #1
   12a78:	ldr	r2, [sp]
   12a7c:	tst	r2, #4
   12a80:	moveq	r1, r0
   12a84:	b	12af0 <__assert_fail@plt+0x19a4>
   12a88:	movw	r1, #27836	; 0x6cbc
   12a8c:	movt	r1, #1
   12a90:	b	12af0 <__assert_fail@plt+0x19a4>
   12a94:	ldr	r2, [sp]
   12a98:	movw	r0, #28008	; 0x6d68
   12a9c:	movw	r1, #27973	; 0x6d45
   12aa0:	mov	r5, lr
   12aa4:	movt	r0, #1
   12aa8:	movt	r1, #1
   12aac:	tst	r2, #4
   12ab0:	mov	r2, #5
   12ab4:	moveq	r1, r0
   12ab8:	mov	r0, #0
   12abc:	bl	10f48 <dcgettext@plt>
   12ac0:	mov	r4, r0
   12ac4:	mov	r0, r5
   12ac8:	bl	14ec8 <__assert_fail@plt+0x3d7c>
   12acc:	mov	r3, r0
   12ad0:	mov	r0, #0
   12ad4:	mov	r1, #0
   12ad8:	mov	r2, r4
   12adc:	bl	10fc0 <error@plt>
   12ae0:	mov	r0, #1
   12ae4:	bl	11248 <__assert_fail@plt+0xfc>
   12ae8:	movw	r1, #27870	; 0x6cde
   12aec:	movt	r1, #1
   12af0:	mov	r0, #0
   12af4:	mov	r2, #5
   12af8:	bl	10f48 <dcgettext@plt>
   12afc:	mov	r2, r0
   12b00:	mov	r0, #0
   12b04:	mov	r1, #0
   12b08:	bl	10fc0 <error@plt>
   12b0c:	mov	r0, #1
   12b10:	bl	11248 <__assert_fail@plt+0xfc>
   12b14:	movw	r0, #28072	; 0x6da8
   12b18:	movw	r1, #28031	; 0x6d7f
   12b1c:	movt	r0, #1
   12b20:	movt	r1, #1
   12b24:	b	12a78 <__assert_fail@plt+0x192c>
   12b28:	ldr	r2, [r0]
   12b2c:	ldr	r1, [r1]
   12b30:	mov	r0, #0
   12b34:	cmp	r2, r1
   12b38:	movwgt	r0, #1
   12b3c:	mvnlt	r0, #0
   12b40:	bx	lr
   12b44:	movw	r1, #33164	; 0x818c
   12b48:	movt	r1, #2
   12b4c:	str	r0, [r1]
   12b50:	bx	lr
   12b54:	movw	r1, #33168	; 0x8190
   12b58:	movt	r1, #2
   12b5c:	strb	r0, [r1]
   12b60:	bx	lr
   12b64:	push	{r4, r5, r6, sl, fp, lr}
   12b68:	add	fp, sp, #16
   12b6c:	sub	sp, sp, #8
   12b70:	movw	r0, #33116	; 0x815c
   12b74:	movt	r0, #2
   12b78:	ldr	r0, [r0]
   12b7c:	bl	15d24 <__assert_fail@plt+0x4bd8>
   12b80:	cmp	r0, #0
   12b84:	beq	12bac <__assert_fail@plt+0x1a60>
   12b88:	movw	r0, #33168	; 0x8190
   12b8c:	movt	r0, #2
   12b90:	ldrb	r0, [r0]
   12b94:	cmp	r0, #0
   12b98:	beq	12bcc <__assert_fail@plt+0x1a80>
   12b9c:	bl	11044 <__errno_location@plt>
   12ba0:	ldr	r0, [r0]
   12ba4:	cmp	r0, #32
   12ba8:	bne	12bcc <__assert_fail@plt+0x1a80>
   12bac:	movw	r0, #33104	; 0x8150
   12bb0:	movt	r0, #2
   12bb4:	ldr	r0, [r0]
   12bb8:	bl	15d24 <__assert_fail@plt+0x4bd8>
   12bbc:	cmp	r0, #0
   12bc0:	subeq	sp, fp, #16
   12bc4:	popeq	{r4, r5, r6, sl, fp, pc}
   12bc8:	b	12c3c <__assert_fail@plt+0x1af0>
   12bcc:	movw	r1, #28110	; 0x6dce
   12bd0:	mov	r0, #0
   12bd4:	mov	r2, #5
   12bd8:	movt	r1, #1
   12bdc:	bl	10f48 <dcgettext@plt>
   12be0:	mov	r4, r0
   12be4:	movw	r0, #33164	; 0x818c
   12be8:	movt	r0, #2
   12bec:	ldr	r6, [r0]
   12bf0:	bl	11044 <__errno_location@plt>
   12bf4:	ldr	r5, [r0]
   12bf8:	cmp	r6, #0
   12bfc:	bne	12c18 <__assert_fail@plt+0x1acc>
   12c00:	movw	r2, #28126	; 0x6dde
   12c04:	mov	r0, #0
   12c08:	mov	r1, r5
   12c0c:	mov	r3, r4
   12c10:	movt	r2, #1
   12c14:	b	12c38 <__assert_fail@plt+0x1aec>
   12c18:	mov	r0, r6
   12c1c:	bl	14b40 <__assert_fail@plt+0x39f4>
   12c20:	movw	r2, #28122	; 0x6dda
   12c24:	mov	r3, r0
   12c28:	str	r4, [sp]
   12c2c:	mov	r0, #0
   12c30:	mov	r1, r5
   12c34:	movt	r2, #1
   12c38:	bl	10fc0 <error@plt>
   12c3c:	movw	r0, #33020	; 0x80fc
   12c40:	movt	r0, #2
   12c44:	ldr	r0, [r0]
   12c48:	bl	10f18 <_exit@plt>
   12c4c:	b	10edc <posix_fadvise64@plt>
   12c50:	cmp	r0, #0
   12c54:	bxeq	lr
   12c58:	push	{r4, sl, fp, lr}
   12c5c:	add	fp, sp, #8
   12c60:	sub	sp, sp, #16
   12c64:	mov	r4, r1
   12c68:	bl	11080 <fileno@plt>
   12c6c:	mov	r1, #0
   12c70:	mov	r2, #0
   12c74:	mov	r3, #0
   12c78:	str	r1, [sp]
   12c7c:	stmib	sp, {r1, r4}
   12c80:	bl	10edc <posix_fadvise64@plt>
   12c84:	sub	sp, fp, #8
   12c88:	pop	{r4, sl, fp, pc}
   12c8c:	push	{r4, r5, r6, sl, fp, lr}
   12c90:	add	fp, sp, #16
   12c94:	sub	sp, sp, #8
   12c98:	mov	r4, r0
   12c9c:	bl	11080 <fileno@plt>
   12ca0:	cmn	r0, #1
   12ca4:	ble	12d18 <__assert_fail@plt+0x1bcc>
   12ca8:	mov	r0, r4
   12cac:	bl	10fe4 <__freading@plt>
   12cb0:	cmp	r0, #0
   12cb4:	beq	12ce0 <__assert_fail@plt+0x1b94>
   12cb8:	mov	r0, r4
   12cbc:	bl	11080 <fileno@plt>
   12cc0:	mov	r1, #1
   12cc4:	mov	r2, #0
   12cc8:	mov	r3, #0
   12ccc:	str	r1, [sp]
   12cd0:	bl	10f84 <lseek64@plt>
   12cd4:	and	r0, r0, r1
   12cd8:	cmn	r0, #1
   12cdc:	beq	12d18 <__assert_fail@plt+0x1bcc>
   12ce0:	mov	r0, r4
   12ce4:	bl	12d28 <__assert_fail@plt+0x1bdc>
   12ce8:	cmp	r0, #0
   12cec:	beq	12d18 <__assert_fail@plt+0x1bcc>
   12cf0:	bl	11044 <__errno_location@plt>
   12cf4:	ldr	r6, [r0]
   12cf8:	mov	r5, r0
   12cfc:	mov	r0, r4
   12d00:	bl	110a4 <fclose@plt>
   12d04:	cmp	r6, #0
   12d08:	strne	r6, [r5]
   12d0c:	mvnne	r0, #0
   12d10:	sub	sp, fp, #16
   12d14:	pop	{r4, r5, r6, sl, fp, pc}
   12d18:	mov	r0, r4
   12d1c:	sub	sp, fp, #16
   12d20:	pop	{r4, r5, r6, sl, fp, lr}
   12d24:	b	110a4 <fclose@plt>
   12d28:	push	{r4, sl, fp, lr}
   12d2c:	add	fp, sp, #8
   12d30:	sub	sp, sp, #8
   12d34:	mov	r4, r0
   12d38:	cmp	r0, #0
   12d3c:	beq	12d74 <__assert_fail@plt+0x1c28>
   12d40:	mov	r0, r4
   12d44:	bl	10fe4 <__freading@plt>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d74 <__assert_fail@plt+0x1c28>
   12d50:	ldrb	r0, [r4, #1]
   12d54:	tst	r0, #1
   12d58:	beq	12d74 <__assert_fail@plt+0x1c28>
   12d5c:	mov	r0, #1
   12d60:	mov	r2, #0
   12d64:	mov	r3, #0
   12d68:	str	r0, [sp]
   12d6c:	mov	r0, r4
   12d70:	bl	12dac <__assert_fail@plt+0x1c60>
   12d74:	mov	r0, r4
   12d78:	sub	sp, fp, #8
   12d7c:	pop	{r4, sl, fp, lr}
   12d80:	b	10ee8 <fflush@plt>
   12d84:	push	{r4, r5, r6, sl, fp, lr}
   12d88:	add	fp, sp, #16
   12d8c:	mov	r4, r0
   12d90:	bl	11044 <__errno_location@plt>
   12d94:	ldr	r6, [r0]
   12d98:	mov	r5, r0
   12d9c:	mov	r0, r4
   12da0:	bl	10f00 <free@plt>
   12da4:	str	r6, [r5]
   12da8:	pop	{r4, r5, r6, sl, fp, pc}
   12dac:	push	{r4, r5, r6, r7, fp, lr}
   12db0:	add	fp, sp, #16
   12db4:	sub	sp, sp, #8
   12db8:	mov	r4, r0
   12dbc:	ldr	r0, [r0, #4]
   12dc0:	mov	r5, r3
   12dc4:	mov	r6, r2
   12dc8:	ldr	r1, [r4, #8]
   12dcc:	cmp	r1, r0
   12dd0:	bne	12dec <__assert_fail@plt+0x1ca0>
   12dd4:	ldrd	r0, [r4, #16]
   12dd8:	cmp	r1, r0
   12ddc:	bne	12dec <__assert_fail@plt+0x1ca0>
   12de0:	ldr	r0, [r4, #36]	; 0x24
   12de4:	cmp	r0, #0
   12de8:	beq	12e04 <__assert_fail@plt+0x1cb8>
   12dec:	mov	r0, r4
   12df0:	mov	r2, r6
   12df4:	mov	r3, r5
   12df8:	sub	sp, fp, #16
   12dfc:	pop	{r4, r5, r6, r7, fp, lr}
   12e00:	b	110b0 <fseeko64@plt>
   12e04:	ldr	r7, [fp, #8]
   12e08:	mov	r0, r4
   12e0c:	bl	11080 <fileno@plt>
   12e10:	mov	r2, r6
   12e14:	mov	r3, r5
   12e18:	str	r7, [sp]
   12e1c:	bl	10f84 <lseek64@plt>
   12e20:	and	r2, r0, r1
   12e24:	cmn	r2, #1
   12e28:	beq	12e48 <__assert_fail@plt+0x1cfc>
   12e2c:	strd	r0, [r4, #80]	; 0x50
   12e30:	ldr	r0, [r4]
   12e34:	bic	r0, r0, #16
   12e38:	str	r0, [r4]
   12e3c:	mov	r0, #0
   12e40:	sub	sp, fp, #16
   12e44:	pop	{r4, r5, r6, r7, fp, pc}
   12e48:	mvn	r0, #0
   12e4c:	sub	sp, fp, #16
   12e50:	pop	{r4, r5, r6, r7, fp, pc}
   12e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e58:	add	fp, sp, #28
   12e5c:	sub	sp, sp, #44	; 0x2c
   12e60:	ldr	r9, [r0]
   12e64:	mov	r8, r2
   12e68:	mov	r4, r1
   12e6c:	mov	r6, r0
   12e70:	str	r3, [sp, #28]
   12e74:	cmp	r9, #0
   12e78:	beq	12e8c <__assert_fail@plt+0x1d40>
   12e7c:	ldr	r7, [r4]
   12e80:	cmp	r7, r8
   12e84:	bcs	12eb4 <__assert_fail@plt+0x1d68>
   12e88:	b	13164 <__assert_fail@plt+0x2018>
   12e8c:	cmp	r3, #64	; 0x40
   12e90:	mov	r7, r3
   12e94:	movcs	r7, #64	; 0x40
   12e98:	mov	r0, r7
   12e9c:	bl	15ca0 <__assert_fail@plt+0x4b54>
   12ea0:	mov	r9, r0
   12ea4:	cmp	r0, #0
   12ea8:	beq	1316c <__assert_fail@plt+0x2020>
   12eac:	cmp	r7, r8
   12eb0:	bcc	13164 <__assert_fail@plt+0x2018>
   12eb4:	ldr	r0, [sp, #28]
   12eb8:	str	r9, [sp, #24]
   12ebc:	sub	r9, r7, r8
   12ec0:	mov	r1, r7
   12ec4:	cmp	r7, r0
   12ec8:	bcc	12edc <__assert_fail@plt+0x1d90>
   12ecc:	cmp	r9, #0
   12ed0:	bne	12edc <__assert_fail@plt+0x1d90>
   12ed4:	ldr	r9, [sp, #24]
   12ed8:	b	13164 <__assert_fail@plt+0x2018>
   12edc:	ldr	r0, [fp, #12]
   12ee0:	ldr	r1, [fp, #8]
   12ee4:	stm	sp, {r4, r6}
   12ee8:	ldr	sl, [fp, #16]
   12eec:	ldr	r6, [sp, #28]
   12ef0:	str	r8, [sp, #12]
   12ef4:	cmn	r0, #1
   12ef8:	mov	r2, r0
   12efc:	moveq	r2, r1
   12f00:	cmn	r1, #1
   12f04:	moveq	r1, r0
   12f08:	moveq	r2, r0
   12f0c:	eor	r0, r8, #-2147483648	; 0x80000000
   12f10:	str	r1, [sp, #20]
   12f14:	ldr	r1, [sp, #24]
   12f18:	str	r0, [sp, #8]
   12f1c:	str	r2, [sp, #16]
   12f20:	add	r4, r1, r8
   12f24:	b	12f34 <__assert_fail@plt+0x1de8>
   12f28:	ldr	r0, [sp, #36]	; 0x24
   12f2c:	cmp	r0, #0
   12f30:	bne	13118 <__assert_fail@plt+0x1fcc>
   12f34:	mov	r0, sl
   12f38:	sub	r1, fp, #32
   12f3c:	bl	15da8 <__assert_fail@plt+0x4c5c>
   12f40:	mov	r8, r0
   12f44:	cmp	r0, #0
   12f48:	beq	12f90 <__assert_fail@plt+0x1e44>
   12f4c:	ldr	r1, [sp, #20]
   12f50:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12f54:	mov	r5, r4
   12f58:	mov	r4, #0
   12f5c:	cmn	r1, #1
   12f60:	beq	12fdc <__assert_fail@plt+0x1e90>
   12f64:	ldr	r2, [sp, #16]
   12f68:	mov	r0, r8
   12f6c:	mov	r3, sl
   12f70:	bl	13178 <__assert_fail@plt+0x202c>
   12f74:	cmp	r0, #0
   12f78:	ldr	r2, [sp, #32]
   12f7c:	subne	r0, r0, r8
   12f80:	movne	r4, #1
   12f84:	addne	sl, r0, #1
   12f88:	strne	sl, [fp, #-32]	; 0xffffffe0
   12f8c:	b	12fe0 <__assert_fail@plt+0x1e94>
   12f90:	ldmib	sl, {r0, r1}
   12f94:	mov	r5, r4
   12f98:	cmp	r0, r1
   12f9c:	bcs	130f4 <__assert_fail@plt+0x1fa8>
   12fa0:	add	r1, r0, #1
   12fa4:	str	r1, [sl, #4]
   12fa8:	ldrb	r2, [r0]
   12fac:	ldr	r0, [sp, #16]
   12fb0:	ldr	r1, [sp, #20]
   12fb4:	mov	sl, #1
   12fb8:	str	sl, [fp, #-32]	; 0xffffffe0
   12fbc:	sub	r0, r2, r0
   12fc0:	sub	r1, r2, r1
   12fc4:	clz	r0, r0
   12fc8:	clz	r1, r1
   12fcc:	lsr	r0, r0, #5
   12fd0:	lsr	r1, r1, #5
   12fd4:	orr	r4, r1, r0
   12fd8:	b	12fe0 <__assert_fail@plt+0x1e94>
   12fdc:	ldr	r2, [sp, #32]
   12fe0:	cmp	r7, r6
   12fe4:	str	r2, [sp, #32]
   12fe8:	str	r4, [sp, #36]	; 0x24
   12fec:	addcc	r0, sl, #1
   12ff0:	cmpcc	r9, r0
   12ff4:	bcc	1300c <__assert_fail@plt+0x1ec0>
   12ff8:	ldr	sl, [fp, #16]
   12ffc:	mov	r4, r5
   13000:	cmp	r9, #2
   13004:	bcs	13094 <__assert_fail@plt+0x1f48>
   13008:	b	130d4 <__assert_fail@plt+0x1f88>
   1300c:	ldr	r9, [sp, #24]
   13010:	cmp	r7, #64	; 0x40
   13014:	lsl	r1, r7, #1
   13018:	ldr	sl, [fp, #16]
   1301c:	addcc	r1, r7, #64	; 0x40
   13020:	sub	r5, r5, r9
   13024:	sub	r2, r1, r5
   13028:	cmp	r2, r0
   1302c:	addcc	r1, r0, r5
   13030:	mov	r0, r6
   13034:	cmp	r1, r6
   13038:	mov	r6, r1
   1303c:	movhi	r6, r0
   13040:	cmp	r7, r1
   13044:	movcs	r6, r0
   13048:	ldr	r0, [sp, #12]
   1304c:	sub	r0, r6, r0
   13050:	cmn	r0, #1
   13054:	bgt	13064 <__assert_fail@plt+0x1f18>
   13058:	ldr	r6, [sp, #8]
   1305c:	cmp	r7, r6
   13060:	beq	13150 <__assert_fail@plt+0x2004>
   13064:	mov	r0, r9
   13068:	mov	r1, r6
   1306c:	bl	15cd0 <__assert_fail@plt+0x4b84>
   13070:	cmp	r0, #0
   13074:	beq	13160 <__assert_fail@plt+0x2014>
   13078:	sub	r9, r6, r5
   1307c:	mov	r7, r6
   13080:	ldr	r6, [sp, #28]
   13084:	add	r4, r0, r5
   13088:	str	r0, [sp, #24]
   1308c:	cmp	r9, #2
   13090:	bcc	130d4 <__assert_fail@plt+0x1f88>
   13094:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13098:	sub	r6, r9, #1
   1309c:	cmp	r0, r6
   130a0:	movcc	r6, r0
   130a4:	cmp	r8, #0
   130a8:	beq	130c0 <__assert_fail@plt+0x1f74>
   130ac:	mov	r0, r4
   130b0:	mov	r1, r8
   130b4:	mov	r2, r6
   130b8:	bl	10f24 <memcpy@plt>
   130bc:	b	130c8 <__assert_fail@plt+0x1f7c>
   130c0:	ldr	r0, [sp, #32]
   130c4:	strb	r0, [r4]
   130c8:	sub	r9, r9, r6
   130cc:	add	r4, r4, r6
   130d0:	ldr	r6, [sp, #28]
   130d4:	cmp	r8, #0
   130d8:	beq	12f28 <__assert_fail@plt+0x1ddc>
   130dc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   130e0:	mov	r0, sl
   130e4:	bl	15ddc <__assert_fail@plt+0x4c90>
   130e8:	cmp	r0, #0
   130ec:	beq	12f28 <__assert_fail@plt+0x1ddc>
   130f0:	b	1315c <__assert_fail@plt+0x2010>
   130f4:	mov	r0, sl
   130f8:	bl	110bc <__uflow@plt>
   130fc:	mov	r2, r0
   13100:	cmn	r0, #1
   13104:	bne	12fac <__assert_fail@plt+0x1e60>
   13108:	ldr	r0, [sp, #24]
   1310c:	cmp	r5, r0
   13110:	beq	13158 <__assert_fail@plt+0x200c>
   13114:	mov	r4, r5
   13118:	ldr	r5, [sp, #24]
   1311c:	ldr	r0, [sp, #12]
   13120:	mov	r1, #0
   13124:	add	r0, r5, r0
   13128:	strb	r1, [r4], -r0
   1312c:	ldr	r0, [sp, #4]
   13130:	cmp	r4, #0
   13134:	mvneq	r4, #0
   13138:	str	r5, [r0]
   1313c:	ldr	r0, [sp]
   13140:	str	r7, [r0]
   13144:	mov	r0, r4
   13148:	sub	sp, fp, #28
   1314c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13150:	ldr	r7, [sp, #8]
   13154:	b	13160 <__assert_fail@plt+0x2014>
   13158:	str	r5, [sp, #24]
   1315c:	ldr	r9, [sp, #24]
   13160:	ldm	sp, {r4, r6}
   13164:	str	r9, [r6]
   13168:	str	r7, [r4]
   1316c:	mvn	r0, #0
   13170:	sub	sp, fp, #28
   13174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13178:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1317c:	add	fp, sp, #24
   13180:	uxtb	ip, r2
   13184:	uxtb	r1, r1
   13188:	cmp	r1, ip
   1318c:	bne	1319c <__assert_fail@plt+0x2050>
   13190:	mov	r2, r3
   13194:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13198:	b	11098 <memchr@plt>
   1319c:	cmp	r3, #0
   131a0:	beq	131c8 <__assert_fail@plt+0x207c>
   131a4:	ands	r2, r0, #3
   131a8:	beq	131c8 <__assert_fail@plt+0x207c>
   131ac:	ldrb	r2, [r0]
   131b0:	cmp	r1, r2
   131b4:	cmpne	ip, r2
   131b8:	beq	13270 <__assert_fail@plt+0x2124>
   131bc:	subs	r3, r3, #1
   131c0:	add	r0, r0, #1
   131c4:	bne	131a4 <__assert_fail@plt+0x2058>
   131c8:	orr	r7, ip, ip, lsl #8
   131cc:	movw	r6, #32896	; 0x8080
   131d0:	rsb	r2, r0, #0
   131d4:	movt	r6, #32896	; 0x8080
   131d8:	orr	r8, r7, r7, lsl #16
   131dc:	orr	r7, r1, r1, lsl #8
   131e0:	orr	r9, r7, r7, lsl #16
   131e4:	movw	r7, #65279	; 0xfeff
   131e8:	movt	r7, #65278	; 0xfefe
   131ec:	mov	lr, r3
   131f0:	mov	r4, r2
   131f4:	cmp	r3, #4
   131f8:	bcc	1323c <__assert_fail@plt+0x20f0>
   131fc:	rsb	r2, r4, #0
   13200:	add	r0, r0, #4
   13204:	ldr	r2, [r2]
   13208:	eor	r3, r2, r8
   1320c:	eor	r2, r2, r9
   13210:	eor	r5, r3, r6
   13214:	add	r3, r3, r7
   13218:	and	r3, r3, r5
   1321c:	eor	r5, r2, r6
   13220:	add	r2, r2, r7
   13224:	and	r2, r2, r5
   13228:	orr	r5, r2, r3
   1322c:	sub	r2, r4, #4
   13230:	sub	r3, lr, #4
   13234:	tst	r5, r6
   13238:	beq	131ec <__assert_fail@plt+0x20a0>
   1323c:	mov	r0, #0
   13240:	cmp	lr, #0
   13244:	beq	13270 <__assert_fail@plt+0x2124>
   13248:	ldrb	r2, [r0, -r4]
   1324c:	cmp	r1, r2
   13250:	cmpne	ip, r2
   13254:	beq	1326c <__assert_fail@plt+0x2120>
   13258:	add	r0, r0, #1
   1325c:	cmp	lr, r0
   13260:	bne	13248 <__assert_fail@plt+0x20fc>
   13264:	mov	r0, #0
   13268:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1326c:	sub	r0, r0, r4
   13270:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13274:	push	{r4, r5, fp, lr}
   13278:	add	fp, sp, #8
   1327c:	cmp	r0, #0
   13280:	beq	13314 <__assert_fail@plt+0x21c8>
   13284:	mov	r1, #47	; 0x2f
   13288:	mov	r4, r0
   1328c:	bl	110e0 <strrchr@plt>
   13290:	cmp	r0, #0
   13294:	mov	r5, r4
   13298:	addne	r5, r0, #1
   1329c:	sub	r0, r5, r4
   132a0:	cmp	r0, #7
   132a4:	blt	132f8 <__assert_fail@plt+0x21ac>
   132a8:	movw	r1, #28185	; 0x6e19
   132ac:	sub	r0, r5, #7
   132b0:	mov	r2, #7
   132b4:	movt	r1, #1
   132b8:	bl	11128 <strncmp@plt>
   132bc:	cmp	r0, #0
   132c0:	bne	132f8 <__assert_fail@plt+0x21ac>
   132c4:	movw	r1, #28193	; 0x6e21
   132c8:	mov	r0, r5
   132cc:	mov	r2, #3
   132d0:	movt	r1, #1
   132d4:	bl	11128 <strncmp@plt>
   132d8:	cmp	r0, #0
   132dc:	beq	132e8 <__assert_fail@plt+0x219c>
   132e0:	mov	r4, r5
   132e4:	b	132f8 <__assert_fail@plt+0x21ac>
   132e8:	movw	r0, #33088	; 0x8140
   132ec:	add	r4, r5, #3
   132f0:	movt	r0, #2
   132f4:	str	r4, [r0]
   132f8:	movw	r0, #33092	; 0x8144
   132fc:	movt	r0, #2
   13300:	str	r4, [r0]
   13304:	movw	r0, #33172	; 0x8194
   13308:	movt	r0, #2
   1330c:	str	r4, [r0]
   13310:	pop	{r4, r5, fp, pc}
   13314:	movw	r0, #33104	; 0x8150
   13318:	mov	r1, #55	; 0x37
   1331c:	mov	r2, #1
   13320:	movt	r0, #2
   13324:	ldr	r3, [r0]
   13328:	movw	r0, #28129	; 0x6de1
   1332c:	movt	r0, #1
   13330:	bl	10f78 <fwrite@plt>
   13334:	bl	11134 <abort@plt>
   13338:	push	{r4, r5, r6, sl, fp, lr}
   1333c:	add	fp, sp, #16
   13340:	mov	r4, r0
   13344:	movw	r0, #33176	; 0x8198
   13348:	movt	r0, #2
   1334c:	cmp	r4, #0
   13350:	moveq	r4, r0
   13354:	bl	11044 <__errno_location@plt>
   13358:	ldr	r6, [r0]
   1335c:	mov	r5, r0
   13360:	mov	r0, r4
   13364:	mov	r1, #48	; 0x30
   13368:	bl	15b2c <__assert_fail@plt+0x49e0>
   1336c:	str	r6, [r5]
   13370:	pop	{r4, r5, r6, sl, fp, pc}
   13374:	movw	r1, #33176	; 0x8198
   13378:	cmp	r0, #0
   1337c:	movt	r1, #2
   13380:	movne	r1, r0
   13384:	ldr	r0, [r1]
   13388:	bx	lr
   1338c:	movw	r2, #33176	; 0x8198
   13390:	cmp	r0, #0
   13394:	movt	r2, #2
   13398:	movne	r2, r0
   1339c:	str	r1, [r2]
   133a0:	bx	lr
   133a4:	movw	r3, #33176	; 0x8198
   133a8:	cmp	r0, #0
   133ac:	and	r2, r2, #1
   133b0:	movt	r3, #2
   133b4:	movne	r3, r0
   133b8:	ubfx	r0, r1, #5, #3
   133bc:	and	r1, r1, #31
   133c0:	add	ip, r3, r0, lsl #2
   133c4:	mov	r0, #1
   133c8:	ldr	r3, [ip, #8]
   133cc:	and	r0, r0, r3, lsr r1
   133d0:	eor	r2, r0, r2
   133d4:	eor	r1, r3, r2, lsl r1
   133d8:	str	r1, [ip, #8]
   133dc:	bx	lr
   133e0:	movw	r2, #33176	; 0x8198
   133e4:	cmp	r0, #0
   133e8:	movt	r2, #2
   133ec:	movne	r2, r0
   133f0:	ldr	r0, [r2, #4]
   133f4:	str	r1, [r2, #4]
   133f8:	bx	lr
   133fc:	push	{fp, lr}
   13400:	mov	fp, sp
   13404:	movw	r3, #33176	; 0x8198
   13408:	cmp	r0, #0
   1340c:	movt	r3, #2
   13410:	movne	r3, r0
   13414:	cmp	r1, #0
   13418:	mov	r0, #10
   1341c:	cmpne	r2, #0
   13420:	str	r0, [r3]
   13424:	bne	1342c <__assert_fail@plt+0x22e0>
   13428:	bl	11134 <abort@plt>
   1342c:	str	r1, [r3, #40]	; 0x28
   13430:	str	r2, [r3, #44]	; 0x2c
   13434:	pop	{fp, pc}
   13438:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1343c:	add	fp, sp, #28
   13440:	sub	sp, sp, #20
   13444:	mov	r7, r0
   13448:	ldr	r0, [fp, #8]
   1344c:	movw	r5, #33176	; 0x8198
   13450:	mov	r8, r3
   13454:	mov	r9, r2
   13458:	mov	sl, r1
   1345c:	movt	r5, #2
   13460:	cmp	r0, #0
   13464:	movne	r5, r0
   13468:	bl	11044 <__errno_location@plt>
   1346c:	ldr	r2, [r5, #40]	; 0x28
   13470:	ldr	r3, [r5, #44]	; 0x2c
   13474:	mov	r4, r0
   13478:	ldm	r5, {r0, r1}
   1347c:	add	r5, r5, #8
   13480:	ldr	r6, [r4]
   13484:	stm	sp, {r0, r1, r5}
   13488:	mov	r0, r7
   1348c:	mov	r1, sl
   13490:	str	r2, [sp, #12]
   13494:	str	r3, [sp, #16]
   13498:	mov	r2, r9
   1349c:	mov	r3, r8
   134a0:	bl	134b0 <__assert_fail@plt+0x2364>
   134a4:	str	r6, [r4]
   134a8:	sub	sp, fp, #28
   134ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134b4:	add	fp, sp, #28
   134b8:	sub	sp, sp, #156	; 0x9c
   134bc:	mov	r5, r0
   134c0:	add	r0, r2, #1
   134c4:	mov	r6, r1
   134c8:	mov	sl, r3
   134cc:	str	r2, [fp, #-80]	; 0xffffffb0
   134d0:	str	r0, [sp, #72]	; 0x48
   134d4:	ldr	r0, [fp, #12]
   134d8:	and	r1, r0, #1
   134dc:	str	r1, [sp, #36]	; 0x24
   134e0:	and	r1, r0, #4
   134e4:	str	r1, [sp, #32]
   134e8:	ubfx	r9, r0, #1, #1
   134ec:	bl	10f90 <__ctype_get_mb_cur_max@plt>
   134f0:	str	r0, [sp, #40]	; 0x28
   134f4:	ldr	r0, [fp, #24]
   134f8:	ldr	r7, [fp, #8]
   134fc:	mov	r1, #0
   13500:	str	r5, [fp, #-84]	; 0xffffffac
   13504:	str	r1, [fp, #-56]	; 0xffffffc8
   13508:	mov	r1, #0
   1350c:	str	r1, [sp, #60]	; 0x3c
   13510:	mov	r1, #1
   13514:	str	r1, [fp, #-48]	; 0xffffffd0
   13518:	str	r0, [sp, #80]	; 0x50
   1351c:	ldr	r0, [fp, #20]
   13520:	str	r0, [sp, #76]	; 0x4c
   13524:	mov	r0, #0
   13528:	str	r0, [sp, #56]	; 0x38
   1352c:	mov	r0, #0
   13530:	str	r0, [fp, #-88]	; 0xffffffa8
   13534:	mov	r0, #0
   13538:	str	r0, [fp, #-72]	; 0xffffffb8
   1353c:	mov	r0, #0
   13540:	cmp	r7, #10
   13544:	bhi	144d8 <__assert_fail@plt+0x338c>
   13548:	add	r1, pc, #24
   1354c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13550:	mov	r4, r6
   13554:	mov	r8, #0
   13558:	mov	r2, #1
   1355c:	mov	r3, #0
   13560:	mov	lr, sl
   13564:	ldr	pc, [r1, r7, lsl #2]
   13568:	andeq	r3, r1, ip, lsr #12
   1356c:	andeq	r3, r1, r0, lsl #13
   13570:	andeq	r3, r1, r0, asr #12
   13574:	andeq	r3, r1, r4, lsr #12
   13578:	andeq	r3, r1, r4, ror r6
   1357c:	andeq	r3, r1, r8, lsr #13
   13580:	andeq	r3, r1, r0, asr r6
   13584:	andeq	r3, r1, ip, lsr #14
   13588:	muleq	r1, r4, r5
   1358c:	muleq	r1, r4, r5
   13590:			; <UNDEFINED> instruction: 0x000135bc
   13594:	movw	r0, #28275	; 0x6e73
   13598:	mov	r1, r7
   1359c:	movt	r0, #1
   135a0:	bl	14ee0 <__assert_fail@plt+0x3d94>
   135a4:	str	r0, [sp, #76]	; 0x4c
   135a8:	movw	r0, #28277	; 0x6e75
   135ac:	mov	r1, r7
   135b0:	movt	r0, #1
   135b4:	bl	14ee0 <__assert_fail@plt+0x3d94>
   135b8:	str	r0, [sp, #80]	; 0x50
   135bc:	mov	r8, #0
   135c0:	tst	r9, #1
   135c4:	bne	135fc <__assert_fail@plt+0x24b0>
   135c8:	ldr	r0, [sp, #76]	; 0x4c
   135cc:	ldrb	r0, [r0]
   135d0:	cmp	r0, #0
   135d4:	beq	135fc <__assert_fail@plt+0x24b0>
   135d8:	ldr	r1, [sp, #76]	; 0x4c
   135dc:	mov	r8, #0
   135e0:	add	r1, r1, #1
   135e4:	cmp	r8, r4
   135e8:	strbcc	r0, [r5, r8]
   135ec:	ldrb	r0, [r1, r8]
   135f0:	add	r8, r8, #1
   135f4:	cmp	r0, #0
   135f8:	bne	135e4 <__assert_fail@plt+0x2498>
   135fc:	ldr	r6, [sp, #80]	; 0x50
   13600:	mov	r0, r6
   13604:	bl	1102c <strlen@plt>
   13608:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1360c:	str	r0, [fp, #-72]	; 0xffffffb8
   13610:	str	r6, [fp, #-88]	; 0xffffffa8
   13614:	mov	r2, #1
   13618:	mov	r3, r9
   1361c:	mov	lr, sl
   13620:	b	1372c <__assert_fail@plt+0x25e0>
   13624:	mov	r0, #1
   13628:	b	13680 <__assert_fail@plt+0x2534>
   1362c:	mov	r7, #0
   13630:	mov	r8, #0
   13634:	mov	r2, r0
   13638:	mov	r3, #0
   1363c:	b	1372c <__assert_fail@plt+0x25e0>
   13640:	tst	r9, #1
   13644:	bne	13680 <__assert_fail@plt+0x2534>
   13648:	mov	r2, r0
   1364c:	b	136d8 <__assert_fail@plt+0x258c>
   13650:	mov	r0, #1
   13654:	mov	r8, #0
   13658:	mov	r7, #5
   1365c:	mov	r2, #1
   13660:	str	r0, [fp, #-72]	; 0xffffffb8
   13664:	movw	r0, #28273	; 0x6e71
   13668:	movt	r0, #1
   1366c:	str	r0, [fp, #-88]	; 0xffffffa8
   13670:	b	136a0 <__assert_fail@plt+0x2554>
   13674:	mov	r2, #1
   13678:	tst	r9, #1
   1367c:	beq	136d8 <__assert_fail@plt+0x258c>
   13680:	mov	r1, #1
   13684:	mov	r8, #0
   13688:	mov	r7, #2
   1368c:	mov	r2, r0
   13690:	str	r1, [fp, #-72]	; 0xffffffb8
   13694:	movw	r1, #28277	; 0x6e75
   13698:	movt	r1, #1
   1369c:	str	r1, [fp, #-88]	; 0xffffffa8
   136a0:	mov	r3, #1
   136a4:	b	1372c <__assert_fail@plt+0x25e0>
   136a8:	tst	r9, #1
   136ac:	beq	136fc <__assert_fail@plt+0x25b0>
   136b0:	mov	r0, #1
   136b4:	mov	r8, #0
   136b8:	mov	r2, #1
   136bc:	mov	r3, #1
   136c0:	mov	r7, #5
   136c4:	str	r0, [fp, #-72]	; 0xffffffb8
   136c8:	movw	r0, #28273	; 0x6e71
   136cc:	movt	r0, #1
   136d0:	str	r0, [fp, #-88]	; 0xffffffa8
   136d4:	b	1372c <__assert_fail@plt+0x25e0>
   136d8:	cmp	r4, #0
   136dc:	mov	r8, #1
   136e0:	mov	r3, #0
   136e4:	mov	r7, #2
   136e8:	movne	r0, #39	; 0x27
   136ec:	strbne	r0, [r5]
   136f0:	movw	r0, #28277	; 0x6e75
   136f4:	movt	r0, #1
   136f8:	b	13720 <__assert_fail@plt+0x25d4>
   136fc:	cmp	r4, #0
   13700:	mov	r8, #1
   13704:	mov	r2, #1
   13708:	mov	r7, #5
   1370c:	mov	r3, #0
   13710:	movne	r0, #34	; 0x22
   13714:	strbne	r0, [r5]
   13718:	movw	r0, #28273	; 0x6e71
   1371c:	movt	r0, #1
   13720:	str	r0, [fp, #-88]	; 0xffffffa8
   13724:	mov	r0, #1
   13728:	str	r0, [fp, #-72]	; 0xffffffb8
   1372c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13730:	eor	r6, r3, #1
   13734:	str	r7, [fp, #-68]	; 0xffffffbc
   13738:	str	r3, [fp, #-76]	; 0xffffffb4
   1373c:	str	r2, [sp, #84]	; 0x54
   13740:	str	r6, [sp, #92]	; 0x5c
   13744:	cmp	r0, #0
   13748:	movwne	r0, #1
   1374c:	and	r1, r0, r3
   13750:	and	r1, r2, r1
   13754:	str	r1, [sp, #48]	; 0x30
   13758:	sub	r1, r7, #2
   1375c:	clz	r1, r1
   13760:	lsr	r1, r1, #5
   13764:	and	r1, r1, r3
   13768:	str	r1, [sp, #64]	; 0x40
   1376c:	subs	r1, r7, #2
   13770:	mov	r7, #0
   13774:	movwne	r1, #1
   13778:	orr	r6, r1, r6
   1377c:	and	r1, r1, r2
   13780:	and	r0, r0, r1
   13784:	str	r6, [sp, #68]	; 0x44
   13788:	str	r0, [fp, #-60]	; 0xffffffc4
   1378c:	orr	r0, r1, r3
   13790:	ldr	r1, [fp, #16]
   13794:	eor	r0, r0, #1
   13798:	clz	r1, r1
   1379c:	lsr	r1, r1, #5
   137a0:	orr	r0, r1, r0
   137a4:	str	r0, [fp, #-64]	; 0xffffffc0
   137a8:	eor	r0, r2, #1
   137ac:	str	r0, [sp, #52]	; 0x34
   137b0:	cmn	lr, #1
   137b4:	beq	137c4 <__assert_fail@plt+0x2678>
   137b8:	cmp	r7, lr
   137bc:	bne	137d0 <__assert_fail@plt+0x2684>
   137c0:	b	14318 <__assert_fail@plt+0x31cc>
   137c4:	ldrb	r0, [ip, r7]
   137c8:	cmp	r0, #0
   137cc:	beq	14320 <__assert_fail@plt+0x31d4>
   137d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   137d4:	mov	sl, #0
   137d8:	cmp	r0, #0
   137dc:	beq	13814 <__assert_fail@plt+0x26c8>
   137e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137e4:	add	r5, r7, r0
   137e8:	cmp	r0, #2
   137ec:	bcc	13808 <__assert_fail@plt+0x26bc>
   137f0:	cmn	lr, #1
   137f4:	bne	13808 <__assert_fail@plt+0x26bc>
   137f8:	mov	r0, ip
   137fc:	bl	1102c <strlen@plt>
   13800:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13804:	mov	lr, r0
   13808:	cmp	r5, lr
   1380c:	bls	1381c <__assert_fail@plt+0x26d0>
   13810:	ldr	r5, [fp, #-84]	; 0xffffffac
   13814:	mov	r0, #0
   13818:	b	13868 <__assert_fail@plt+0x271c>
   1381c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13820:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13824:	add	r0, ip, r7
   13828:	mov	r6, r4
   1382c:	mov	r4, lr
   13830:	bl	11020 <bcmp@plt>
   13834:	ldr	r2, [sp, #92]	; 0x5c
   13838:	cmp	r0, #0
   1383c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13840:	mov	r1, r0
   13844:	movwne	r1, #1
   13848:	orr	r1, r1, r2
   1384c:	tst	r1, #1
   13850:	beq	143a8 <__assert_fail@plt+0x325c>
   13854:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13858:	clz	r0, r0
   1385c:	mov	lr, r4
   13860:	mov	r4, r6
   13864:	lsr	r0, r0, #5
   13868:	str	r0, [fp, #-52]	; 0xffffffcc
   1386c:	ldrb	r6, [ip, r7]
   13870:	cmp	r6, #126	; 0x7e
   13874:	bhi	13da4 <__assert_fail@plt+0x2c58>
   13878:	add	r3, pc, #16
   1387c:	mov	r9, #1
   13880:	mov	r2, #110	; 0x6e
   13884:	mov	r0, #97	; 0x61
   13888:	mov	r1, #0
   1388c:	ldr	pc, [r3, r6, lsl #2]
   13890:	andeq	r3, r1, r4, lsl #24
   13894:	andeq	r3, r1, r4, lsr #27
   13898:	andeq	r3, r1, r4, lsr #27
   1389c:	andeq	r3, r1, r4, lsr #27
   138a0:	andeq	r3, r1, r4, lsr #27
   138a4:	andeq	r3, r1, r4, lsr #27
   138a8:	andeq	r3, r1, r4, lsr #27
   138ac:	andeq	r3, r1, r0, lsl #29
   138b0:	andeq	r3, r1, r4, ror #23
   138b4:	ldrdeq	r3, [r1], -ip
   138b8:	strdeq	r3, [r1], -r0
   138bc:	andeq	r3, r1, ip, lsl #26
   138c0:	ldrdeq	r3, [r1], -r4
   138c4:	andeq	r3, r1, ip, ror #23
   138c8:	andeq	r3, r1, r4, lsr #27
   138cc:	andeq	r3, r1, r4, lsr #27
   138d0:	andeq	r3, r1, r4, lsr #27
   138d4:	andeq	r3, r1, r4, lsr #27
   138d8:	andeq	r3, r1, r4, lsr #27
   138dc:	andeq	r3, r1, r4, lsr #27
   138e0:	andeq	r3, r1, r4, lsr #27
   138e4:	andeq	r3, r1, r4, lsr #27
   138e8:	andeq	r3, r1, r4, lsr #27
   138ec:	andeq	r3, r1, r4, lsr #27
   138f0:	andeq	r3, r1, r4, lsr #27
   138f4:	andeq	r3, r1, r4, lsr #27
   138f8:	andeq	r3, r1, r4, lsr #27
   138fc:	andeq	r3, r1, r4, lsr #27
   13900:	andeq	r3, r1, r4, lsr #27
   13904:	andeq	r3, r1, r4, lsr #27
   13908:	andeq	r3, r1, r4, lsr #27
   1390c:	andeq	r3, r1, r4, lsr #27
   13910:	andeq	r3, r1, r8, lsl #23
   13914:	andeq	r3, r1, ip, lsl #23
   13918:	andeq	r3, r1, ip, lsl #23
   1391c:	andeq	r3, r1, r4, ror fp
   13920:	andeq	r3, r1, ip, lsl #23
   13924:	andeq	r3, r1, ip, lsl #21
   13928:	andeq	r3, r1, ip, lsl #23
   1392c:	andeq	r3, r1, r4, lsl sp
   13930:	andeq	r3, r1, ip, lsl #23
   13934:	andeq	r3, r1, ip, lsl #23
   13938:	andeq	r3, r1, ip, lsl #23
   1393c:	andeq	r3, r1, ip, lsl #21
   13940:	andeq	r3, r1, ip, lsl #21
   13944:	andeq	r3, r1, ip, lsl #21
   13948:	andeq	r3, r1, ip, lsl #21
   1394c:	andeq	r3, r1, ip, lsl #21
   13950:	andeq	r3, r1, ip, lsl #21
   13954:	andeq	r3, r1, ip, lsl #21
   13958:	andeq	r3, r1, ip, lsl #21
   1395c:	andeq	r3, r1, ip, lsl #21
   13960:	andeq	r3, r1, ip, lsl #21
   13964:	andeq	r3, r1, ip, lsl #21
   13968:	andeq	r3, r1, ip, lsl #21
   1396c:	andeq	r3, r1, ip, lsl #21
   13970:	andeq	r3, r1, ip, lsl #21
   13974:	andeq	r3, r1, ip, lsl #21
   13978:	andeq	r3, r1, ip, lsl #21
   1397c:	andeq	r3, r1, ip, lsl #23
   13980:	andeq	r3, r1, ip, lsl #23
   13984:	andeq	r3, r1, ip, lsl #23
   13988:	andeq	r3, r1, ip, lsl #23
   1398c:	ldrdeq	r3, [r1], -ip
   13990:	andeq	r3, r1, r4, lsr #27
   13994:	andeq	r3, r1, ip, lsl #21
   13998:	andeq	r3, r1, ip, lsl #21
   1399c:	andeq	r3, r1, ip, lsl #21
   139a0:	andeq	r3, r1, ip, lsl #21
   139a4:	andeq	r3, r1, ip, lsl #21
   139a8:	andeq	r3, r1, ip, lsl #21
   139ac:	andeq	r3, r1, ip, lsl #21
   139b0:	andeq	r3, r1, ip, lsl #21
   139b4:	andeq	r3, r1, ip, lsl #21
   139b8:	andeq	r3, r1, ip, lsl #21
   139bc:	andeq	r3, r1, ip, lsl #21
   139c0:	andeq	r3, r1, ip, lsl #21
   139c4:	andeq	r3, r1, ip, lsl #21
   139c8:	andeq	r3, r1, ip, lsl #21
   139cc:	andeq	r3, r1, ip, lsl #21
   139d0:	andeq	r3, r1, ip, lsl #21
   139d4:	andeq	r3, r1, ip, lsl #21
   139d8:	andeq	r3, r1, ip, lsl #21
   139dc:	andeq	r3, r1, ip, lsl #21
   139e0:	andeq	r3, r1, ip, lsl #21
   139e4:	andeq	r3, r1, ip, lsl #21
   139e8:	andeq	r3, r1, ip, lsl #21
   139ec:	andeq	r3, r1, ip, lsl #21
   139f0:	andeq	r3, r1, ip, lsl #21
   139f4:	andeq	r3, r1, ip, lsl #21
   139f8:	andeq	r3, r1, ip, lsl #21
   139fc:	andeq	r3, r1, ip, lsl #23
   13a00:			; <UNDEFINED> instruction: 0x00013bb4
   13a04:	andeq	r3, r1, ip, lsl #21
   13a08:	andeq	r3, r1, ip, lsl #23
   13a0c:	andeq	r3, r1, ip, lsl #21
   13a10:	andeq	r3, r1, ip, lsl #23
   13a14:	andeq	r3, r1, ip, lsl #21
   13a18:	andeq	r3, r1, ip, lsl #21
   13a1c:	andeq	r3, r1, ip, lsl #21
   13a20:	andeq	r3, r1, ip, lsl #21
   13a24:	andeq	r3, r1, ip, lsl #21
   13a28:	andeq	r3, r1, ip, lsl #21
   13a2c:	andeq	r3, r1, ip, lsl #21
   13a30:	andeq	r3, r1, ip, lsl #21
   13a34:	andeq	r3, r1, ip, lsl #21
   13a38:	andeq	r3, r1, ip, lsl #21
   13a3c:	andeq	r3, r1, ip, lsl #21
   13a40:	andeq	r3, r1, ip, lsl #21
   13a44:	andeq	r3, r1, ip, lsl #21
   13a48:	andeq	r3, r1, ip, lsl #21
   13a4c:	andeq	r3, r1, ip, lsl #21
   13a50:	andeq	r3, r1, ip, lsl #21
   13a54:	andeq	r3, r1, ip, lsl #21
   13a58:	andeq	r3, r1, ip, lsl #21
   13a5c:	andeq	r3, r1, ip, lsl #21
   13a60:	andeq	r3, r1, ip, lsl #21
   13a64:	andeq	r3, r1, ip, lsl #21
   13a68:	andeq	r3, r1, ip, lsl #21
   13a6c:	andeq	r3, r1, ip, lsl #21
   13a70:	andeq	r3, r1, ip, lsl #21
   13a74:	andeq	r3, r1, ip, lsl #21
   13a78:	andeq	r3, r1, ip, lsl #21
   13a7c:	andeq	r3, r1, r8, asr #22
   13a80:	andeq	r3, r1, ip, lsl #23
   13a84:	andeq	r3, r1, r8, asr #22
   13a88:	andeq	r3, r1, r4, ror fp
   13a8c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a90:	tst	r0, #1
   13a94:	bne	13ac0 <__assert_fail@plt+0x2974>
   13a98:	ldr	r1, [fp, #16]
   13a9c:	ubfx	r0, r6, #5, #3
   13aa0:	mov	r2, #1
   13aa4:	ldr	r0, [r1, r0, lsl #2]
   13aa8:	and	r1, r6, #31
   13aac:	tst	r0, r2, lsl r1
   13ab0:	beq	13ac0 <__assert_fail@plt+0x2974>
   13ab4:	mov	r0, r6
   13ab8:	mov	r1, r9
   13abc:	b	13ad4 <__assert_fail@plt+0x2988>
   13ac0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13ac4:	mov	r1, r9
   13ac8:	cmp	r0, #0
   13acc:	mov	r0, r6
   13ad0:	beq	13e14 <__assert_fail@plt+0x2cc8>
   13ad4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13ad8:	tst	r2, #1
   13adc:	bne	143e4 <__assert_fail@plt+0x3298>
   13ae0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ae4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13ae8:	subs	r2, r2, #2
   13aec:	movwne	r2, #1
   13af0:	orr	r2, r2, r3
   13af4:	tst	r2, #1
   13af8:	bne	13b34 <__assert_fail@plt+0x29e8>
   13afc:	cmp	r8, r4
   13b00:	movcc	r2, #39	; 0x27
   13b04:	strbcc	r2, [r5, r8]
   13b08:	add	r2, r8, #1
   13b0c:	cmp	r2, r4
   13b10:	movcc	r3, #36	; 0x24
   13b14:	strbcc	r3, [r5, r2]
   13b18:	add	r2, r8, #2
   13b1c:	add	r8, r8, #3
   13b20:	cmp	r2, r4
   13b24:	movcc	r3, #39	; 0x27
   13b28:	strbcc	r3, [r5, r2]
   13b2c:	mov	r2, #1
   13b30:	str	r2, [fp, #-56]	; 0xffffffc8
   13b34:	cmp	r8, r4
   13b38:	movcc	r2, #92	; 0x5c
   13b3c:	strbcc	r2, [r5, r8]
   13b40:	add	r8, r8, #1
   13b44:	b	13e58 <__assert_fail@plt+0x2d0c>
   13b48:	cmp	lr, #1
   13b4c:	beq	13b74 <__assert_fail@plt+0x2a28>
   13b50:	mov	r9, #0
   13b54:	cmn	lr, #1
   13b58:	bne	13b80 <__assert_fail@plt+0x2a34>
   13b5c:	ldrb	r0, [ip, #1]
   13b60:	cmp	r0, #0
   13b64:	beq	13b74 <__assert_fail@plt+0x2a28>
   13b68:	mvn	lr, #0
   13b6c:	mov	sl, #0
   13b70:	b	13a8c <__assert_fail@plt+0x2940>
   13b74:	mov	r9, #0
   13b78:	cmp	r7, #0
   13b7c:	beq	13b88 <__assert_fail@plt+0x2a3c>
   13b80:	mov	sl, #0
   13b84:	b	13a8c <__assert_fail@plt+0x2940>
   13b88:	mov	r1, #1
   13b8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b90:	cmp	r0, #2
   13b94:	bne	13bac <__assert_fail@plt+0x2a60>
   13b98:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13b9c:	mov	r9, r1
   13ba0:	tst	r0, #1
   13ba4:	beq	13a8c <__assert_fail@plt+0x2940>
   13ba8:	b	143e4 <__assert_fail@plt+0x3298>
   13bac:	mov	r9, r1
   13bb0:	b	13a8c <__assert_fail@plt+0x2940>
   13bb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bb8:	cmp	r0, #2
   13bbc:	bne	13df8 <__assert_fail@plt+0x2cac>
   13bc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bc4:	tst	r0, #1
   13bc8:	bne	143e4 <__assert_fail@plt+0x3298>
   13bcc:	mov	sl, #0
   13bd0:	b	13e0c <__assert_fail@plt+0x2cc0>
   13bd4:	mov	r0, #102	; 0x66
   13bd8:	b	13e80 <__assert_fail@plt+0x2d34>
   13bdc:	mov	r2, #116	; 0x74
   13be0:	b	13bf0 <__assert_fail@plt+0x2aa4>
   13be4:	mov	r0, #98	; 0x62
   13be8:	b	13e80 <__assert_fail@plt+0x2d34>
   13bec:	mov	r2, #114	; 0x72
   13bf0:	ldr	r0, [sp, #68]	; 0x44
   13bf4:	tst	r0, #1
   13bf8:	mov	r0, r2
   13bfc:	bne	13e80 <__assert_fail@plt+0x2d34>
   13c00:	b	143e4 <__assert_fail@plt+0x3298>
   13c04:	ldr	r0, [sp, #84]	; 0x54
   13c08:	tst	r0, #1
   13c0c:	beq	13e9c <__assert_fail@plt+0x2d50>
   13c10:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c14:	tst	r0, #1
   13c18:	bne	144d0 <__assert_fail@plt+0x3384>
   13c1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c20:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13c24:	subs	r0, r0, #2
   13c28:	movwne	r0, #1
   13c2c:	orr	r0, r0, r1
   13c30:	tst	r0, #1
   13c34:	bne	13c70 <__assert_fail@plt+0x2b24>
   13c38:	cmp	r8, r4
   13c3c:	movcc	r0, #39	; 0x27
   13c40:	strbcc	r0, [r5, r8]
   13c44:	add	r0, r8, #1
   13c48:	cmp	r0, r4
   13c4c:	movcc	r1, #36	; 0x24
   13c50:	strbcc	r1, [r5, r0]
   13c54:	add	r0, r8, #2
   13c58:	add	r8, r8, #3
   13c5c:	cmp	r0, r4
   13c60:	movcc	r1, #39	; 0x27
   13c64:	strbcc	r1, [r5, r0]
   13c68:	mov	r0, #1
   13c6c:	str	r0, [fp, #-56]	; 0xffffffc8
   13c70:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13c74:	cmp	r8, r4
   13c78:	mov	r9, #0
   13c7c:	mov	sl, #1
   13c80:	mov	r6, #48	; 0x30
   13c84:	movcc	r0, #92	; 0x5c
   13c88:	strbcc	r0, [r5, r8]
   13c8c:	add	r0, r8, #1
   13c90:	cmp	r1, #2
   13c94:	beq	14064 <__assert_fail@plt+0x2f18>
   13c98:	add	r1, r7, #1
   13c9c:	cmp	r1, lr
   13ca0:	bcs	14064 <__assert_fail@plt+0x2f18>
   13ca4:	ldrb	r1, [ip, r1]
   13ca8:	sub	r1, r1, #48	; 0x30
   13cac:	uxtb	r1, r1
   13cb0:	cmp	r1, #9
   13cb4:	bhi	14064 <__assert_fail@plt+0x2f18>
   13cb8:	cmp	r0, r4
   13cbc:	movcc	r1, #48	; 0x30
   13cc0:	strbcc	r1, [r5, r0]
   13cc4:	add	r0, r8, #2
   13cc8:	add	r8, r8, #3
   13ccc:	cmp	r0, r4
   13cd0:	movcc	r1, #48	; 0x30
   13cd4:	strbcc	r1, [r5, r0]
   13cd8:	b	13a8c <__assert_fail@plt+0x2940>
   13cdc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ce0:	mov	sl, #0
   13ce4:	mov	r6, #63	; 0x3f
   13ce8:	cmp	r0, #5
   13cec:	beq	1406c <__assert_fail@plt+0x2f20>
   13cf0:	cmp	r0, #2
   13cf4:	bne	14114 <__assert_fail@plt+0x2fc8>
   13cf8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cfc:	mov	r9, #0
   13d00:	tst	r0, #1
   13d04:	beq	13a8c <__assert_fail@plt+0x2940>
   13d08:	b	143e4 <__assert_fail@plt+0x3298>
   13d0c:	mov	r0, #118	; 0x76
   13d10:	b	13e80 <__assert_fail@plt+0x2d34>
   13d14:	mov	r0, #1
   13d18:	mov	r6, #39	; 0x27
   13d1c:	str	r0, [sp, #60]	; 0x3c
   13d20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d24:	cmp	r0, #2
   13d28:	bne	13eb8 <__assert_fail@plt+0x2d6c>
   13d2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d30:	tst	r0, #1
   13d34:	bne	143e4 <__assert_fail@plt+0x3298>
   13d38:	ldr	r2, [sp, #56]	; 0x38
   13d3c:	clz	r1, r4
   13d40:	mov	sl, #0
   13d44:	mov	r9, #1
   13d48:	lsr	r1, r1, #5
   13d4c:	cmp	r2, #0
   13d50:	mov	r0, r2
   13d54:	movwne	r0, #1
   13d58:	orrs	r0, r0, r1
   13d5c:	moveq	r2, r4
   13d60:	moveq	r4, r0
   13d64:	cmp	r8, r4
   13d68:	str	r2, [sp, #56]	; 0x38
   13d6c:	movcc	r0, #39	; 0x27
   13d70:	strbcc	r0, [r5, r8]
   13d74:	add	r0, r8, #1
   13d78:	cmp	r0, r4
   13d7c:	movcc	r1, #92	; 0x5c
   13d80:	strbcc	r1, [r5, r0]
   13d84:	add	r0, r8, #2
   13d88:	add	r8, r8, #3
   13d8c:	cmp	r0, r4
   13d90:	movcc	r1, #39	; 0x27
   13d94:	strbcc	r1, [r5, r0]
   13d98:	mov	r0, #0
   13d9c:	str	r0, [fp, #-56]	; 0xffffffc8
   13da0:	b	13a8c <__assert_fail@plt+0x2940>
   13da4:	ldr	r0, [sp, #40]	; 0x28
   13da8:	str	r4, [sp, #88]	; 0x58
   13dac:	cmp	r0, #1
   13db0:	bne	13ec0 <__assert_fail@plt+0x2d74>
   13db4:	str	lr, [sp, #28]
   13db8:	bl	11008 <__ctype_b_loc@plt>
   13dbc:	ldr	r0, [r0]
   13dc0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13dc4:	mov	r2, #1
   13dc8:	add	r0, r0, r6, lsl #1
   13dcc:	ldrb	r0, [r0, #1]
   13dd0:	ubfx	r9, r0, #6, #1
   13dd4:	ldr	r0, [sp, #52]	; 0x34
   13dd8:	cmp	r2, #1
   13ddc:	orr	r0, r9, r0
   13de0:	bhi	1411c <__assert_fail@plt+0x2fd0>
   13de4:	tst	r0, #1
   13de8:	beq	1411c <__assert_fail@plt+0x2fd0>
   13dec:	ldr	lr, [sp, #28]
   13df0:	ldr	r4, [sp, #88]	; 0x58
   13df4:	b	13a8c <__assert_fail@plt+0x2940>
   13df8:	ldr	r1, [sp, #48]	; 0x30
   13dfc:	mov	sl, #0
   13e00:	mov	r0, #92	; 0x5c
   13e04:	cmp	r1, #0
   13e08:	beq	13e80 <__assert_fail@plt+0x2d34>
   13e0c:	mov	r6, #92	; 0x5c
   13e10:	mov	r9, #0
   13e14:	cmp	sl, #0
   13e18:	bne	13e50 <__assert_fail@plt+0x2d04>
   13e1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e20:	tst	r0, #1
   13e24:	beq	13e50 <__assert_fail@plt+0x2d04>
   13e28:	cmp	r8, r4
   13e2c:	movcc	r0, #39	; 0x27
   13e30:	strbcc	r0, [r5, r8]
   13e34:	add	r0, r8, #1
   13e38:	add	r8, r8, #2
   13e3c:	cmp	r0, r4
   13e40:	movcc	r1, #39	; 0x27
   13e44:	strbcc	r1, [r5, r0]
   13e48:	mov	r0, #0
   13e4c:	str	r0, [fp, #-56]	; 0xffffffc8
   13e50:	mov	r1, r9
   13e54:	mov	r0, r6
   13e58:	cmp	r8, r4
   13e5c:	strbcc	r0, [r5, r8]
   13e60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e64:	add	r8, r8, #1
   13e68:	and	r0, r0, r1
   13e6c:	str	r0, [fp, #-48]	; 0xffffffd0
   13e70:	add	r7, r7, #1
   13e74:	cmn	lr, #1
   13e78:	bne	137b8 <__assert_fail@plt+0x266c>
   13e7c:	b	137c4 <__assert_fail@plt+0x2678>
   13e80:	ldr	r1, [sp, #84]	; 0x54
   13e84:	mov	sl, #0
   13e88:	mov	r9, #0
   13e8c:	tst	r1, #1
   13e90:	mov	r1, #0
   13e94:	beq	13a8c <__assert_fail@plt+0x2940>
   13e98:	b	13ad4 <__assert_fail@plt+0x2988>
   13e9c:	ldr	r0, [sp, #36]	; 0x24
   13ea0:	mov	r6, #0
   13ea4:	mov	sl, #0
   13ea8:	mov	r9, #0
   13eac:	cmp	r0, #0
   13eb0:	beq	13a8c <__assert_fail@plt+0x2940>
   13eb4:	b	13e70 <__assert_fail@plt+0x2d24>
   13eb8:	mov	r9, #1
   13ebc:	b	13a8c <__assert_fail@plt+0x2940>
   13ec0:	mov	r0, #0
   13ec4:	cmn	lr, #1
   13ec8:	sub	r4, fp, #40	; 0x28
   13ecc:	str	r0, [fp, #-36]	; 0xffffffdc
   13ed0:	str	r0, [fp, #-40]	; 0xffffffd8
   13ed4:	bne	13ee8 <__assert_fail@plt+0x2d9c>
   13ed8:	mov	r0, ip
   13edc:	bl	1102c <strlen@plt>
   13ee0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ee4:	mov	lr, r0
   13ee8:	ldr	r0, [sp, #72]	; 0x48
   13eec:	mov	r9, #1
   13ef0:	mov	r2, #0
   13ef4:	str	lr, [sp, #28]
   13ef8:	add	r0, r0, r7
   13efc:	str	r0, [sp, #20]
   13f00:	b	13f44 <__assert_fail@plt+0x2df8>
   13f04:	ldr	r5, [sp, #44]	; 0x2c
   13f08:	add	r5, r0, r5
   13f0c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f10:	bl	10f6c <iswprint@plt>
   13f14:	cmp	r0, #0
   13f18:	sub	r4, fp, #40	; 0x28
   13f1c:	movwne	r0, #1
   13f20:	and	r9, r9, r0
   13f24:	mov	r0, r4
   13f28:	bl	10f30 <mbsinit@plt>
   13f2c:	mov	r2, r5
   13f30:	ldr	lr, [sp, #28]
   13f34:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f38:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13f3c:	cmp	r0, #0
   13f40:	bne	13dd4 <__assert_fail@plt+0x2c88>
   13f44:	add	r0, r2, r7
   13f48:	str	r2, [sp, #44]	; 0x2c
   13f4c:	mov	r3, r4
   13f50:	add	r1, ip, r0
   13f54:	str	r0, [sp, #24]
   13f58:	sub	r2, lr, r0
   13f5c:	sub	r0, fp, #44	; 0x2c
   13f60:	bl	15f50 <__assert_fail@plt+0x4e04>
   13f64:	cmp	r0, #0
   13f68:	beq	1430c <__assert_fail@plt+0x31c0>
   13f6c:	cmn	r0, #1
   13f70:	beq	142c8 <__assert_fail@plt+0x317c>
   13f74:	ldr	lr, [sp, #28]
   13f78:	cmn	r0, #2
   13f7c:	beq	142d0 <__assert_fail@plt+0x3184>
   13f80:	ldr	r2, [sp, #64]	; 0x40
   13f84:	ldr	r4, [sp, #88]	; 0x58
   13f88:	ldr	ip, [sp, #84]	; 0x54
   13f8c:	cmp	r0, #2
   13f90:	mov	r1, #0
   13f94:	movwcc	r1, #1
   13f98:	eor	r2, r2, #1
   13f9c:	orrs	r1, r2, r1
   13fa0:	bne	13f04 <__assert_fail@plt+0x2db8>
   13fa4:	ldr	r1, [sp, #44]	; 0x2c
   13fa8:	ldr	r2, [sp, #20]
   13fac:	add	r1, r2, r1
   13fb0:	sub	r2, r0, #1
   13fb4:	b	13fc4 <__assert_fail@plt+0x2e78>
   13fb8:	add	r1, r1, #1
   13fbc:	subs	r2, r2, #1
   13fc0:	beq	13f04 <__assert_fail@plt+0x2db8>
   13fc4:	ldrb	r3, [r1]
   13fc8:	sub	r3, r3, #91	; 0x5b
   13fcc:	cmp	r3, #33	; 0x21
   13fd0:	bhi	13fb8 <__assert_fail@plt+0x2e6c>
   13fd4:	add	r5, pc, #0
   13fd8:	ldr	pc, [r5, r3, lsl #2]
   13fdc:	andeq	r4, r1, r0, asr #7
   13fe0:	andeq	r4, r1, r0, asr #7
   13fe4:			; <UNDEFINED> instruction: 0x00013fb8
   13fe8:	andeq	r4, r1, r0, asr #7
   13fec:			; <UNDEFINED> instruction: 0x00013fb8
   13ff0:	andeq	r4, r1, r0, asr #7
   13ff4:			; <UNDEFINED> instruction: 0x00013fb8
   13ff8:			; <UNDEFINED> instruction: 0x00013fb8
   13ffc:			; <UNDEFINED> instruction: 0x00013fb8
   14000:			; <UNDEFINED> instruction: 0x00013fb8
   14004:			; <UNDEFINED> instruction: 0x00013fb8
   14008:			; <UNDEFINED> instruction: 0x00013fb8
   1400c:			; <UNDEFINED> instruction: 0x00013fb8
   14010:			; <UNDEFINED> instruction: 0x00013fb8
   14014:			; <UNDEFINED> instruction: 0x00013fb8
   14018:			; <UNDEFINED> instruction: 0x00013fb8
   1401c:			; <UNDEFINED> instruction: 0x00013fb8
   14020:			; <UNDEFINED> instruction: 0x00013fb8
   14024:			; <UNDEFINED> instruction: 0x00013fb8
   14028:			; <UNDEFINED> instruction: 0x00013fb8
   1402c:			; <UNDEFINED> instruction: 0x00013fb8
   14030:			; <UNDEFINED> instruction: 0x00013fb8
   14034:			; <UNDEFINED> instruction: 0x00013fb8
   14038:			; <UNDEFINED> instruction: 0x00013fb8
   1403c:			; <UNDEFINED> instruction: 0x00013fb8
   14040:			; <UNDEFINED> instruction: 0x00013fb8
   14044:			; <UNDEFINED> instruction: 0x00013fb8
   14048:			; <UNDEFINED> instruction: 0x00013fb8
   1404c:			; <UNDEFINED> instruction: 0x00013fb8
   14050:			; <UNDEFINED> instruction: 0x00013fb8
   14054:			; <UNDEFINED> instruction: 0x00013fb8
   14058:			; <UNDEFINED> instruction: 0x00013fb8
   1405c:			; <UNDEFINED> instruction: 0x00013fb8
   14060:	andeq	r4, r1, r0, asr #7
   14064:	mov	r8, r0
   14068:	b	13a8c <__assert_fail@plt+0x2940>
   1406c:	ldr	r0, [sp, #32]
   14070:	cmp	r0, #0
   14074:	beq	14114 <__assert_fail@plt+0x2fc8>
   14078:	add	r0, r7, #2
   1407c:	cmp	r0, lr
   14080:	bcs	14114 <__assert_fail@plt+0x2fc8>
   14084:	add	r1, r7, ip
   14088:	ldrb	r1, [r1, #1]
   1408c:	cmp	r1, #63	; 0x3f
   14090:	bne	14114 <__assert_fail@plt+0x2fc8>
   14094:	ldrb	r9, [ip, r0]
   14098:	sub	r2, r9, #33	; 0x21
   1409c:	cmp	r2, #29
   140a0:	bhi	14114 <__assert_fail@plt+0x2fc8>
   140a4:	movw	r1, #20929	; 0x51c1
   140a8:	mov	r3, #1
   140ac:	movt	r1, #14336	; 0x3800
   140b0:	tst	r1, r3, lsl r2
   140b4:	beq	14114 <__assert_fail@plt+0x2fc8>
   140b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   140bc:	tst	r1, #1
   140c0:	bne	143e4 <__assert_fail@plt+0x3298>
   140c4:	cmp	r8, r4
   140c8:	add	r2, r8, #1
   140cc:	mov	r6, r9
   140d0:	mov	r7, r0
   140d4:	mov	r9, #0
   140d8:	movcc	r1, #63	; 0x3f
   140dc:	strbcc	r1, [r5, r8]
   140e0:	cmp	r2, r4
   140e4:	movcc	r1, #34	; 0x22
   140e8:	strbcc	r1, [r5, r2]
   140ec:	add	r2, r8, #2
   140f0:	cmp	r2, r4
   140f4:	movcc	r1, #34	; 0x22
   140f8:	strbcc	r1, [r5, r2]
   140fc:	add	r2, r8, #3
   14100:	add	r8, r8, #4
   14104:	cmp	r2, r4
   14108:	movcc	r1, #63	; 0x3f
   1410c:	strbcc	r1, [r5, r2]
   14110:	b	13a8c <__assert_fail@plt+0x2940>
   14114:	mov	r9, #0
   14118:	b	13a8c <__assert_fail@plt+0x2940>
   1411c:	ldr	lr, [sp, #28]
   14120:	ldr	r4, [fp, #-56]	; 0xffffffc8
   14124:	add	r1, r2, r7
   14128:	mov	r2, #0
   1412c:	str	r1, [sp, #44]	; 0x2c
   14130:	tst	r0, #1
   14134:	bne	14250 <__assert_fail@plt+0x3104>
   14138:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1413c:	tst	r1, #1
   14140:	bne	143e0 <__assert_fail@plt+0x3294>
   14144:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14148:	subs	r2, r1, #2
   1414c:	movwne	r2, #1
   14150:	orr	r2, r2, r4
   14154:	tst	r2, #1
   14158:	bne	1419c <__assert_fail@plt+0x3050>
   1415c:	ldr	r1, [sp, #88]	; 0x58
   14160:	add	r2, r8, #1
   14164:	mov	r4, #1
   14168:	cmp	r8, r1
   1416c:	movcc	r1, #39	; 0x27
   14170:	strbcc	r1, [r5, r8]
   14174:	ldr	r1, [sp, #88]	; 0x58
   14178:	cmp	r2, r1
   1417c:	movcc	r1, #36	; 0x24
   14180:	strbcc	r1, [r5, r2]
   14184:	ldr	r1, [sp, #88]	; 0x58
   14188:	add	r2, r8, #2
   1418c:	add	r8, r8, #3
   14190:	cmp	r2, r1
   14194:	movcc	r1, #39	; 0x27
   14198:	strbcc	r1, [r5, r2]
   1419c:	ldr	r1, [sp, #88]	; 0x58
   141a0:	add	r2, r8, #1
   141a4:	cmp	r8, r1
   141a8:	movcc	r1, #92	; 0x5c
   141ac:	strbcc	r1, [r5, r8]
   141b0:	ldr	r1, [sp, #88]	; 0x58
   141b4:	cmp	r2, r1
   141b8:	bcs	141cc <__assert_fail@plt+0x3080>
   141bc:	uxtb	r3, r6
   141c0:	mov	r1, #48	; 0x30
   141c4:	orr	r3, r1, r3, lsr #6
   141c8:	strb	r3, [r5, r2]
   141cc:	ldr	r1, [sp, #88]	; 0x58
   141d0:	add	r2, r8, #2
   141d4:	add	r8, r8, #3
   141d8:	cmp	r2, r1
   141dc:	lsrcc	r3, r6, #3
   141e0:	movcc	r1, #6
   141e4:	bficc	r3, r1, #3, #29
   141e8:	mov	r1, #6
   141ec:	bfi	r6, r1, #3, #29
   141f0:	strbcc	r3, [r5, r2]
   141f4:	mov	r2, #1
   141f8:	b	14278 <__assert_fail@plt+0x312c>
   141fc:	ldr	r1, [sp, #88]	; 0x58
   14200:	ldr	r5, [fp, #-84]	; 0xffffffac
   14204:	ldr	r4, [sp, #88]	; 0x58
   14208:	cmp	r8, r1
   1420c:	movcc	r1, #39	; 0x27
   14210:	strbcc	r1, [r5, r8]
   14214:	add	r1, r8, #1
   14218:	add	r8, r8, #2
   1421c:	cmp	r1, r4
   14220:	movcc	r4, #39	; 0x27
   14224:	strbcc	r4, [r5, r1]
   14228:	mov	r4, #0
   1422c:	ldr	r1, [sp, #88]	; 0x58
   14230:	cmp	r8, r1
   14234:	ldr	r1, [sp, #72]	; 0x48
   14238:	strbcc	r6, [r5, r8]
   1423c:	add	r8, r8, #1
   14240:	ldrb	r6, [r1, r7]
   14244:	mov	r7, r3
   14248:	tst	r0, #1
   1424c:	beq	14138 <__assert_fail@plt+0x2fec>
   14250:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14254:	tst	r1, #1
   14258:	beq	14270 <__assert_fail@plt+0x3124>
   1425c:	ldr	r1, [sp, #88]	; 0x58
   14260:	cmp	r8, r1
   14264:	movcc	r1, #92	; 0x5c
   14268:	strbcc	r1, [r5, r8]
   1426c:	add	r8, r8, #1
   14270:	mov	r1, #0
   14274:	str	r1, [fp, #-52]	; 0xffffffcc
   14278:	ldr	r1, [sp, #44]	; 0x2c
   1427c:	add	r3, r7, #1
   14280:	and	sl, r2, #1
   14284:	cmp	r1, r3
   14288:	bls	142ac <__assert_fail@plt+0x3160>
   1428c:	cmp	sl, #0
   14290:	mvn	r5, r4
   14294:	movwne	sl, #1
   14298:	orr	r5, r5, sl
   1429c:	tst	r5, #1
   142a0:	beq	141fc <__assert_fail@plt+0x30b0>
   142a4:	ldr	r5, [fp, #-84]	; 0xffffffac
   142a8:	b	1422c <__assert_fail@plt+0x30e0>
   142ac:	str	r4, [fp, #-56]	; 0xffffffc8
   142b0:	ldr	r4, [sp, #88]	; 0x58
   142b4:	cmp	sl, #0
   142b8:	movwne	sl, #1
   142bc:	cmp	sl, #0
   142c0:	beq	13e1c <__assert_fail@plt+0x2cd0>
   142c4:	b	13e50 <__assert_fail@plt+0x2d04>
   142c8:	mov	r9, #0
   142cc:	b	1430c <__assert_fail@plt+0x31c0>
   142d0:	ldr	r0, [sp, #24]
   142d4:	mov	r9, #0
   142d8:	cmp	lr, r0
   142dc:	bls	1430c <__assert_fail@plt+0x31c0>
   142e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   142e4:	ldr	r2, [sp, #44]	; 0x2c
   142e8:	add	r0, ip, r7
   142ec:	ldrb	r1, [r0, r2]
   142f0:	cmp	r1, #0
   142f4:	beq	13dd4 <__assert_fail@plt+0x2c88>
   142f8:	add	r2, r2, #1
   142fc:	add	r1, r7, r2
   14300:	cmp	r1, lr
   14304:	bcc	142ec <__assert_fail@plt+0x31a0>
   14308:	b	13dd4 <__assert_fail@plt+0x2c88>
   1430c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14310:	ldr	r2, [sp, #44]	; 0x2c
   14314:	b	13dd4 <__assert_fail@plt+0x2c88>
   14318:	mov	lr, r7
   1431c:	b	14324 <__assert_fail@plt+0x31d8>
   14320:	mvn	lr, #0
   14324:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14328:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1432c:	eor	r0, r1, #2
   14330:	orr	r0, r0, r8
   14334:	clz	r0, r0
   14338:	lsr	r0, r0, #5
   1433c:	tst	r2, r0
   14340:	bne	143e4 <__assert_fail@plt+0x3298>
   14344:	subs	r0, r1, #2
   14348:	movwne	r0, #1
   1434c:	orr	r0, r2, r0
   14350:	tst	r0, #1
   14354:	ldreq	r0, [sp, #60]	; 0x3c
   14358:	eoreq	r0, r0, #1
   1435c:	tsteq	r0, #1
   14360:	bne	14478 <__assert_fail@plt+0x332c>
   14364:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14368:	mov	sl, lr
   1436c:	tst	r0, #1
   14370:	bne	14444 <__assert_fail@plt+0x32f8>
   14374:	ldr	r6, [sp, #56]	; 0x38
   14378:	mov	r9, #0
   1437c:	cmp	r6, #0
   14380:	beq	14470 <__assert_fail@plt+0x3324>
   14384:	ldr	r0, [sp, #84]	; 0x54
   14388:	mov	r1, #0
   1438c:	mov	r7, #2
   14390:	cmp	r4, #0
   14394:	str	r1, [fp, #-48]	; 0xffffffd0
   14398:	mov	r1, #0
   1439c:	str	r1, [fp, #-76]	; 0xffffffb4
   143a0:	beq	13540 <__assert_fail@plt+0x23f4>
   143a4:	b	14478 <__assert_fail@plt+0x332c>
   143a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143ac:	ldr	r1, [fp, #12]
   143b0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   143b4:	mov	lr, r4
   143b8:	mov	r4, r6
   143bc:	b	14404 <__assert_fail@plt+0x32b8>
   143c0:	tst	ip, #1
   143c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   143c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143cc:	ldr	r1, [fp, #12]
   143d0:	mov	r0, #2
   143d4:	movwne	r0, #4
   143d8:	mov	r2, r0
   143dc:	b	14404 <__assert_fail@plt+0x32b8>
   143e0:	ldr	r4, [sp, #88]	; 0x58
   143e4:	ldr	r1, [sp, #84]	; 0x54
   143e8:	mov	r0, #2
   143ec:	tst	r1, #1
   143f0:	movwne	r0, #4
   143f4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   143f8:	ldr	r1, [fp, #12]
   143fc:	cmp	r2, #2
   14400:	moveq	r2, r0
   14404:	mov	r0, #0
   14408:	bic	r1, r1, #2
   1440c:	str	r2, [sp]
   14410:	mov	r2, ip
   14414:	mov	r3, lr
   14418:	str	r0, [sp, #8]
   1441c:	ldr	r0, [sp, #76]	; 0x4c
   14420:	str	r1, [sp, #4]
   14424:	mov	r1, r4
   14428:	str	r0, [sp, #12]
   1442c:	ldr	r0, [sp, #80]	; 0x50
   14430:	str	r0, [sp, #16]
   14434:	mov	r0, r5
   14438:	bl	134b0 <__assert_fail@plt+0x2364>
   1443c:	mov	r8, r0
   14440:	b	144c4 <__assert_fail@plt+0x3378>
   14444:	mov	r0, #5
   14448:	ldr	r1, [sp, #56]	; 0x38
   1444c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14450:	mov	r3, sl
   14454:	str	r0, [sp]
   14458:	ldr	r0, [fp, #12]
   1445c:	str	r0, [sp, #4]
   14460:	ldr	r0, [fp, #16]
   14464:	str	r0, [sp, #8]
   14468:	ldr	r0, [sp, #76]	; 0x4c
   1446c:	b	14428 <__assert_fail@plt+0x32dc>
   14470:	mov	r0, #0
   14474:	str	r0, [fp, #-76]	; 0xffffffb4
   14478:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1447c:	cmp	r1, #0
   14480:	beq	144b8 <__assert_fail@plt+0x336c>
   14484:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14488:	tst	r0, #1
   1448c:	bne	144b8 <__assert_fail@plt+0x336c>
   14490:	ldrb	r0, [r1]
   14494:	cmp	r0, #0
   14498:	beq	144b8 <__assert_fail@plt+0x336c>
   1449c:	add	r1, r1, #1
   144a0:	cmp	r8, r4
   144a4:	strbcc	r0, [r5, r8]
   144a8:	add	r8, r8, #1
   144ac:	ldrb	r0, [r1], #1
   144b0:	cmp	r0, #0
   144b4:	bne	144a0 <__assert_fail@plt+0x3354>
   144b8:	cmp	r8, r4
   144bc:	movcc	r0, #0
   144c0:	strbcc	r0, [r5, r8]
   144c4:	mov	r0, r8
   144c8:	sub	sp, fp, #28
   144cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d0:	mov	r0, #4
   144d4:	b	143f4 <__assert_fail@plt+0x32a8>
   144d8:	bl	11134 <abort@plt>
   144dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e0:	add	fp, sp, #28
   144e4:	sub	sp, sp, #28
   144e8:	movw	r5, #33176	; 0x8198
   144ec:	cmp	r2, #0
   144f0:	mov	r4, r1
   144f4:	mov	r7, r0
   144f8:	str	r0, [sp, #20]
   144fc:	movt	r5, #2
   14500:	movne	r5, r2
   14504:	bl	11044 <__errno_location@plt>
   14508:	mov	sl, r0
   1450c:	ldr	r2, [r5, #40]	; 0x28
   14510:	ldr	r3, [r5, #44]	; 0x2c
   14514:	ldm	r5, {r0, r1}
   14518:	orr	r8, r1, #1
   1451c:	add	r9, r5, #8
   14520:	mov	r1, #0
   14524:	ldr	r6, [sl]
   14528:	stm	sp, {r0, r8, r9}
   1452c:	mov	r0, #0
   14530:	str	r2, [sp, #12]
   14534:	str	r3, [sp, #16]
   14538:	mov	r2, r7
   1453c:	mov	r3, r4
   14540:	str	r6, [sp, #24]
   14544:	mov	r6, r4
   14548:	bl	134b0 <__assert_fail@plt+0x2364>
   1454c:	add	r7, r0, #1
   14550:	mov	r0, r7
   14554:	bl	156fc <__assert_fail@plt+0x45b0>
   14558:	mov	r4, r0
   1455c:	ldr	r0, [r5]
   14560:	ldr	r2, [r5, #44]	; 0x2c
   14564:	ldr	r1, [r5, #40]	; 0x28
   14568:	mov	r3, r6
   1456c:	stm	sp, {r0, r8, r9}
   14570:	str	r2, [sp, #16]
   14574:	ldr	r2, [sp, #20]
   14578:	str	r1, [sp, #12]
   1457c:	mov	r0, r4
   14580:	mov	r1, r7
   14584:	bl	134b0 <__assert_fail@plt+0x2364>
   14588:	ldr	r0, [sp, #24]
   1458c:	str	r0, [sl]
   14590:	mov	r0, r4
   14594:	sub	sp, fp, #28
   14598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1459c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a0:	add	fp, sp, #28
   145a4:	sub	sp, sp, #36	; 0x24
   145a8:	movw	r8, #33176	; 0x8198
   145ac:	cmp	r3, #0
   145b0:	mov	r4, r2
   145b4:	str	r2, [sp, #24]
   145b8:	mov	r5, r1
   145bc:	mov	r6, r0
   145c0:	str	r0, [sp, #20]
   145c4:	movt	r8, #2
   145c8:	movne	r8, r3
   145cc:	bl	11044 <__errno_location@plt>
   145d0:	str	r0, [sp, #28]
   145d4:	ldr	r1, [r8, #40]	; 0x28
   145d8:	ldr	r2, [r8, #44]	; 0x2c
   145dc:	ldr	r7, [r0]
   145e0:	cmp	r4, #0
   145e4:	add	sl, r8, #8
   145e8:	mov	r0, #0
   145ec:	ldm	r8, {r3, r9}
   145f0:	orreq	r9, r9, #1
   145f4:	stm	sp, {r3, r9, sl}
   145f8:	str	r1, [sp, #12]
   145fc:	str	r2, [sp, #16]
   14600:	mov	r1, #0
   14604:	mov	r2, r6
   14608:	mov	r3, r5
   1460c:	str	r7, [sp, #32]
   14610:	mov	r7, r5
   14614:	bl	134b0 <__assert_fail@plt+0x2364>
   14618:	add	r4, r0, #1
   1461c:	mov	r5, r0
   14620:	mov	r0, r4
   14624:	bl	156fc <__assert_fail@plt+0x45b0>
   14628:	mov	r6, r0
   1462c:	ldr	r0, [r8]
   14630:	ldr	r2, [r8, #44]	; 0x2c
   14634:	ldr	r1, [r8, #40]	; 0x28
   14638:	mov	r3, r7
   1463c:	stm	sp, {r0, r9, sl}
   14640:	str	r2, [sp, #16]
   14644:	ldr	r2, [sp, #20]
   14648:	str	r1, [sp, #12]
   1464c:	mov	r0, r6
   14650:	mov	r1, r4
   14654:	bl	134b0 <__assert_fail@plt+0x2364>
   14658:	ldr	r0, [sp, #24]
   1465c:	ldr	r1, [sp, #32]
   14660:	ldr	r2, [sp, #28]
   14664:	cmp	r0, #0
   14668:	str	r1, [r2]
   1466c:	strne	r5, [r0]
   14670:	mov	r0, r6
   14674:	sub	sp, fp, #28
   14678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1467c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14680:	add	fp, sp, #24
   14684:	movw	r5, #33028	; 0x8104
   14688:	movw	r8, #33024	; 0x8100
   1468c:	movt	r5, #2
   14690:	movt	r8, #2
   14694:	ldr	r0, [r5]
   14698:	ldr	r4, [r8]
   1469c:	cmp	r0, #2
   146a0:	blt	146cc <__assert_fail@plt+0x3580>
   146a4:	add	r7, r4, #12
   146a8:	mov	r6, #0
   146ac:	ldr	r0, [r7, r6, lsl #3]
   146b0:	bl	12d84 <__assert_fail@plt+0x1c38>
   146b4:	ldr	r1, [r5]
   146b8:	add	r2, r6, #2
   146bc:	add	r0, r6, #1
   146c0:	mov	r6, r0
   146c4:	cmp	r2, r1
   146c8:	blt	146ac <__assert_fail@plt+0x3560>
   146cc:	ldr	r0, [r4, #4]
   146d0:	movw	r9, #33224	; 0x81c8
   146d4:	movw	r7, #33032	; 0x8108
   146d8:	movt	r9, #2
   146dc:	movt	r7, #2
   146e0:	cmp	r0, r9
   146e4:	beq	146f4 <__assert_fail@plt+0x35a8>
   146e8:	bl	12d84 <__assert_fail@plt+0x1c38>
   146ec:	mov	r0, #256	; 0x100
   146f0:	stm	r7, {r0, r9}
   146f4:	cmp	r4, r7
   146f8:	beq	14708 <__assert_fail@plt+0x35bc>
   146fc:	mov	r0, r4
   14700:	bl	12d84 <__assert_fail@plt+0x1c38>
   14704:	str	r7, [r8]
   14708:	mov	r0, #1
   1470c:	str	r0, [r5]
   14710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14714:	movw	r3, #33176	; 0x8198
   14718:	mvn	r2, #0
   1471c:	movt	r3, #2
   14720:	b	14724 <__assert_fail@plt+0x35d8>
   14724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14728:	add	fp, sp, #28
   1472c:	sub	sp, sp, #44	; 0x2c
   14730:	mov	r7, r3
   14734:	str	r2, [sp, #36]	; 0x24
   14738:	str	r1, [sp, #32]
   1473c:	mov	r5, r0
   14740:	bl	11044 <__errno_location@plt>
   14744:	cmp	r5, #0
   14748:	bmi	148b8 <__assert_fail@plt+0x376c>
   1474c:	cmn	r5, #-2147483647	; 0x80000001
   14750:	beq	148b8 <__assert_fail@plt+0x376c>
   14754:	movw	r8, #33028	; 0x8104
   14758:	movw	r4, #33024	; 0x8100
   1475c:	str	r0, [sp, #28]
   14760:	ldr	r0, [r0]
   14764:	movt	r8, #2
   14768:	movt	r4, #2
   1476c:	ldr	r1, [r8]
   14770:	ldr	r6, [r4]
   14774:	str	r0, [sp, #24]
   14778:	cmp	r1, r5
   1477c:	ble	14788 <__assert_fail@plt+0x363c>
   14780:	mov	sl, r6
   14784:	b	147f4 <__assert_fail@plt+0x36a8>
   14788:	movw	r9, #33032	; 0x8108
   1478c:	mov	r0, #8
   14790:	str	r1, [fp, #-32]	; 0xffffffe0
   14794:	sub	r1, r5, r1
   14798:	mvn	r3, #-2147483648	; 0x80000000
   1479c:	movt	r9, #2
   147a0:	str	r0, [sp]
   147a4:	add	r2, r1, #1
   147a8:	sub	r1, fp, #32
   147ac:	subs	r0, r6, r9
   147b0:	movne	r0, r6
   147b4:	bl	158fc <__assert_fail@plt+0x47b0>
   147b8:	mov	sl, r0
   147bc:	cmp	r6, r9
   147c0:	str	r0, [r4]
   147c4:	bne	147d0 <__assert_fail@plt+0x3684>
   147c8:	ldrd	r0, [r9]
   147cc:	stm	sl, {r0, r1}
   147d0:	ldr	r1, [r8]
   147d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147d8:	add	r0, sl, r1, lsl #3
   147dc:	sub	r1, r2, r1
   147e0:	lsl	r2, r1, #3
   147e4:	mov	r1, #0
   147e8:	bl	1105c <memset@plt>
   147ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   147f0:	str	r0, [r8]
   147f4:	mov	r9, sl
   147f8:	ldm	r7, {r0, r1}
   147fc:	orr	r8, r1, #1
   14800:	add	r1, r7, #8
   14804:	ldr	r2, [r7, #40]	; 0x28
   14808:	ldr	r3, [r7, #44]	; 0x2c
   1480c:	ldr	r6, [r9, r5, lsl #3]!
   14810:	str	r1, [sp, #20]
   14814:	ldr	r4, [r9, #4]!
   14818:	stm	sp, {r0, r8}
   1481c:	add	r0, sp, #8
   14820:	stm	r0, {r1, r2, r3}
   14824:	ldr	r2, [sp, #32]
   14828:	ldr	r3, [sp, #36]	; 0x24
   1482c:	mov	r1, r6
   14830:	mov	r0, r4
   14834:	bl	134b0 <__assert_fail@plt+0x2364>
   14838:	cmp	r6, r0
   1483c:	bhi	148a0 <__assert_fail@plt+0x3754>
   14840:	add	r6, r0, #1
   14844:	movw	r0, #33224	; 0x81c8
   14848:	movt	r0, #2
   1484c:	str	r6, [sl, r5, lsl #3]
   14850:	cmp	r4, r0
   14854:	beq	14860 <__assert_fail@plt+0x3714>
   14858:	mov	r0, r4
   1485c:	bl	12d84 <__assert_fail@plt+0x1c38>
   14860:	mov	r0, r6
   14864:	bl	156fc <__assert_fail@plt+0x45b0>
   14868:	str	r0, [r9]
   1486c:	mov	r4, r0
   14870:	add	r3, sp, #8
   14874:	ldr	r0, [r7]
   14878:	ldr	r1, [r7, #40]	; 0x28
   1487c:	ldr	r2, [r7, #44]	; 0x2c
   14880:	stm	sp, {r0, r8}
   14884:	ldr	r0, [sp, #20]
   14888:	stm	r3, {r0, r1, r2}
   1488c:	ldr	r2, [sp, #32]
   14890:	ldr	r3, [sp, #36]	; 0x24
   14894:	mov	r0, r4
   14898:	mov	r1, r6
   1489c:	bl	134b0 <__assert_fail@plt+0x2364>
   148a0:	ldr	r0, [sp, #28]
   148a4:	ldr	r1, [sp, #24]
   148a8:	str	r1, [r0]
   148ac:	mov	r0, r4
   148b0:	sub	sp, fp, #28
   148b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b8:	bl	11134 <abort@plt>
   148bc:	movw	r3, #33176	; 0x8198
   148c0:	movt	r3, #2
   148c4:	b	14724 <__assert_fail@plt+0x35d8>
   148c8:	movw	r3, #33176	; 0x8198
   148cc:	mov	r1, r0
   148d0:	mov	r0, #0
   148d4:	mvn	r2, #0
   148d8:	movt	r3, #2
   148dc:	b	14724 <__assert_fail@plt+0x35d8>
   148e0:	movw	r3, #33176	; 0x8198
   148e4:	mov	r2, r1
   148e8:	mov	r1, r0
   148ec:	mov	r0, #0
   148f0:	movt	r3, #2
   148f4:	b	14724 <__assert_fail@plt+0x35d8>
   148f8:	push	{fp, lr}
   148fc:	mov	fp, sp
   14900:	sub	sp, sp, #48	; 0x30
   14904:	vmov.i32	q8, #0	; 0x00000000
   14908:	mov	ip, #32
   1490c:	mov	r3, sp
   14910:	mov	lr, r2
   14914:	cmp	r1, #10
   14918:	add	r2, r3, #16
   1491c:	vst1.64	{d16-d17}, [r3], ip
   14920:	vst1.64	{d16-d17}, [r2]
   14924:	vst1.64	{d16-d17}, [r3]
   14928:	beq	14948 <__assert_fail@plt+0x37fc>
   1492c:	str	r1, [sp]
   14930:	mov	r3, sp
   14934:	mov	r1, lr
   14938:	mvn	r2, #0
   1493c:	bl	14724 <__assert_fail@plt+0x35d8>
   14940:	mov	sp, fp
   14944:	pop	{fp, pc}
   14948:	bl	11134 <abort@plt>
   1494c:	push	{r4, sl, fp, lr}
   14950:	add	fp, sp, #8
   14954:	sub	sp, sp, #48	; 0x30
   14958:	vmov.i32	q8, #0	; 0x00000000
   1495c:	mov	ip, r3
   14960:	mov	r3, sp
   14964:	mov	lr, #32
   14968:	cmp	r1, #10
   1496c:	add	r4, r3, #16
   14970:	vst1.64	{d16-d17}, [r3], lr
   14974:	vst1.64	{d16-d17}, [r4]
   14978:	vst1.64	{d16-d17}, [r3]
   1497c:	beq	1499c <__assert_fail@plt+0x3850>
   14980:	str	r1, [sp]
   14984:	mov	r1, r2
   14988:	mov	r3, sp
   1498c:	mov	r2, ip
   14990:	bl	14724 <__assert_fail@plt+0x35d8>
   14994:	sub	sp, fp, #8
   14998:	pop	{r4, sl, fp, pc}
   1499c:	bl	11134 <abort@plt>
   149a0:	push	{fp, lr}
   149a4:	mov	fp, sp
   149a8:	sub	sp, sp, #48	; 0x30
   149ac:	vmov.i32	q8, #0	; 0x00000000
   149b0:	mov	r3, sp
   149b4:	mov	ip, #32
   149b8:	cmp	r0, #10
   149bc:	add	r2, r3, #16
   149c0:	vst1.64	{d16-d17}, [r3], ip
   149c4:	vst1.64	{d16-d17}, [r2]
   149c8:	vst1.64	{d16-d17}, [r3]
   149cc:	beq	149ec <__assert_fail@plt+0x38a0>
   149d0:	str	r0, [sp]
   149d4:	mov	r3, sp
   149d8:	mov	r0, #0
   149dc:	mvn	r2, #0
   149e0:	bl	14724 <__assert_fail@plt+0x35d8>
   149e4:	mov	sp, fp
   149e8:	pop	{fp, pc}
   149ec:	bl	11134 <abort@plt>
   149f0:	push	{fp, lr}
   149f4:	mov	fp, sp
   149f8:	sub	sp, sp, #48	; 0x30
   149fc:	vmov.i32	q8, #0	; 0x00000000
   14a00:	mov	r3, sp
   14a04:	mov	ip, #32
   14a08:	cmp	r0, #10
   14a0c:	add	lr, r3, #16
   14a10:	vst1.64	{d16-d17}, [r3], ip
   14a14:	vst1.64	{d16-d17}, [lr]
   14a18:	vst1.64	{d16-d17}, [r3]
   14a1c:	beq	14a38 <__assert_fail@plt+0x38ec>
   14a20:	str	r0, [sp]
   14a24:	mov	r3, sp
   14a28:	mov	r0, #0
   14a2c:	bl	14724 <__assert_fail@plt+0x35d8>
   14a30:	mov	sp, fp
   14a34:	pop	{fp, pc}
   14a38:	bl	11134 <abort@plt>
   14a3c:	push	{r4, sl, fp, lr}
   14a40:	add	fp, sp, #8
   14a44:	sub	sp, sp, #48	; 0x30
   14a48:	mov	lr, r0
   14a4c:	movw	r0, #33176	; 0x8198
   14a50:	mov	ip, r1
   14a54:	mov	r1, #32
   14a58:	mov	r4, #1
   14a5c:	movt	r0, #2
   14a60:	add	r3, r0, #16
   14a64:	vld1.64	{d16-d17}, [r0], r1
   14a68:	vld1.64	{d20-d21}, [r0]
   14a6c:	vld1.64	{d18-d19}, [r3]
   14a70:	mov	r3, sp
   14a74:	add	r0, r3, #32
   14a78:	add	r1, r3, #16
   14a7c:	vst1.64	{d20-d21}, [r0]
   14a80:	mov	r0, #28
   14a84:	vst1.64	{d18-d19}, [r1]
   14a88:	mov	r1, r3
   14a8c:	and	r0, r0, r2, lsr #3
   14a90:	and	r2, r2, #31
   14a94:	vst1.64	{d16-d17}, [r1], r0
   14a98:	ldr	r0, [r1, #8]
   14a9c:	bic	r4, r4, r0, lsr r2
   14aa0:	eor	r0, r0, r4, lsl r2
   14aa4:	mov	r2, ip
   14aa8:	str	r0, [r1, #8]
   14aac:	mov	r0, #0
   14ab0:	mov	r1, lr
   14ab4:	bl	14724 <__assert_fail@plt+0x35d8>
   14ab8:	sub	sp, fp, #8
   14abc:	pop	{r4, sl, fp, pc}
   14ac0:	push	{fp, lr}
   14ac4:	mov	fp, sp
   14ac8:	sub	sp, sp, #48	; 0x30
   14acc:	mov	ip, r0
   14ad0:	movw	r0, #33176	; 0x8198
   14ad4:	mov	r2, #32
   14ad8:	movt	r0, #2
   14adc:	add	r3, r0, #16
   14ae0:	vld1.64	{d16-d17}, [r0], r2
   14ae4:	vld1.64	{d20-d21}, [r0]
   14ae8:	vld1.64	{d18-d19}, [r3]
   14aec:	mov	r3, sp
   14af0:	add	r0, r3, #32
   14af4:	add	r2, r3, #16
   14af8:	vst1.64	{d20-d21}, [r0]
   14afc:	mov	r0, #28
   14b00:	vst1.64	{d18-d19}, [r2]
   14b04:	mov	r2, r3
   14b08:	and	r0, r0, r1, lsr #3
   14b0c:	and	r1, r1, #31
   14b10:	vst1.64	{d16-d17}, [r2], r0
   14b14:	mov	r0, #1
   14b18:	ldr	lr, [r2, #8]
   14b1c:	bic	r0, r0, lr, lsr r1
   14b20:	eor	r0, lr, r0, lsl r1
   14b24:	mov	r1, ip
   14b28:	str	r0, [r2, #8]
   14b2c:	mov	r0, #0
   14b30:	mvn	r2, #0
   14b34:	bl	14724 <__assert_fail@plt+0x35d8>
   14b38:	mov	sp, fp
   14b3c:	pop	{fp, pc}
   14b40:	push	{fp, lr}
   14b44:	mov	fp, sp
   14b48:	sub	sp, sp, #48	; 0x30
   14b4c:	mov	r1, r0
   14b50:	movw	r0, #33176	; 0x8198
   14b54:	mov	r3, #32
   14b58:	movt	r0, #2
   14b5c:	add	r2, r0, #16
   14b60:	vld1.64	{d16-d17}, [r0], r3
   14b64:	mov	r3, sp
   14b68:	vld1.64	{d18-d19}, [r2]
   14b6c:	vld1.64	{d20-d21}, [r0]
   14b70:	add	r2, r3, #16
   14b74:	add	r0, r3, #32
   14b78:	vst1.64	{d18-d19}, [r2]
   14b7c:	vst1.64	{d20-d21}, [r0]
   14b80:	mov	r0, #12
   14b84:	mov	r2, r3
   14b88:	vst1.64	{d16-d17}, [r2], r0
   14b8c:	ldr	r0, [r2]
   14b90:	orr	r0, r0, #67108864	; 0x4000000
   14b94:	str	r0, [r2]
   14b98:	mov	r0, #0
   14b9c:	mvn	r2, #0
   14ba0:	bl	14724 <__assert_fail@plt+0x35d8>
   14ba4:	mov	sp, fp
   14ba8:	pop	{fp, pc}
   14bac:	push	{fp, lr}
   14bb0:	mov	fp, sp
   14bb4:	sub	sp, sp, #48	; 0x30
   14bb8:	mov	ip, r1
   14bbc:	mov	r1, r0
   14bc0:	movw	r0, #33176	; 0x8198
   14bc4:	mov	r2, #32
   14bc8:	movt	r0, #2
   14bcc:	add	r3, r0, #16
   14bd0:	vld1.64	{d16-d17}, [r0], r2
   14bd4:	vld1.64	{d18-d19}, [r3]
   14bd8:	vld1.64	{d20-d21}, [r0]
   14bdc:	mov	r3, sp
   14be0:	add	r2, r3, #16
   14be4:	add	r0, r3, #32
   14be8:	vst1.64	{d18-d19}, [r2]
   14bec:	vst1.64	{d20-d21}, [r0]
   14bf0:	mov	r0, #12
   14bf4:	mov	r2, r3
   14bf8:	vst1.64	{d16-d17}, [r2], r0
   14bfc:	ldr	r0, [r2]
   14c00:	orr	r0, r0, #67108864	; 0x4000000
   14c04:	str	r0, [r2]
   14c08:	mov	r0, #0
   14c0c:	mov	r2, ip
   14c10:	bl	14724 <__assert_fail@plt+0x35d8>
   14c14:	mov	sp, fp
   14c18:	pop	{fp, pc}
   14c1c:	push	{r4, sl, fp, lr}
   14c20:	add	fp, sp, #8
   14c24:	sub	sp, sp, #96	; 0x60
   14c28:	vmov.i32	q8, #0	; 0x00000000
   14c2c:	mov	ip, r2
   14c30:	mov	r2, sp
   14c34:	mov	r4, #28
   14c38:	cmp	r1, #10
   14c3c:	mov	r3, r2
   14c40:	add	lr, r2, #16
   14c44:	vst1.64	{d16-d17}, [r3], r4
   14c48:	vst1.64	{d16-d17}, [lr]
   14c4c:	vst1.32	{d16-d17}, [r3]
   14c50:	beq	14ca0 <__assert_fail@plt+0x3b54>
   14c54:	vld1.64	{d16-d17}, [r2], r4
   14c58:	vld1.64	{d18-d19}, [lr]
   14c5c:	add	r3, sp, #48	; 0x30
   14c60:	vld1.32	{d20-d21}, [r2]
   14c64:	add	r2, r3, #20
   14c68:	add	r4, r3, #4
   14c6c:	vst1.32	{d18-d19}, [r2]
   14c70:	add	r2, r3, #32
   14c74:	vst1.32	{d16-d17}, [r4]
   14c78:	vst1.32	{d20-d21}, [r2]
   14c7c:	str	r1, [sp, #48]	; 0x30
   14c80:	mvn	r2, #0
   14c84:	ldr	r1, [sp, #60]	; 0x3c
   14c88:	orr	r1, r1, #67108864	; 0x4000000
   14c8c:	str	r1, [sp, #60]	; 0x3c
   14c90:	mov	r1, ip
   14c94:	bl	14724 <__assert_fail@plt+0x35d8>
   14c98:	sub	sp, fp, #8
   14c9c:	pop	{r4, sl, fp, pc}
   14ca0:	bl	11134 <abort@plt>
   14ca4:	push	{r4, r5, r6, sl, fp, lr}
   14ca8:	add	fp, sp, #16
   14cac:	sub	sp, sp, #48	; 0x30
   14cb0:	mov	ip, r3
   14cb4:	movw	r3, #33176	; 0x8198
   14cb8:	mov	r6, #32
   14cbc:	cmp	r1, #0
   14cc0:	mov	r4, sp
   14cc4:	movt	r3, #2
   14cc8:	cmpne	r2, #0
   14ccc:	add	r5, r4, #16
   14cd0:	add	lr, r3, #16
   14cd4:	vld1.64	{d16-d17}, [r3], r6
   14cd8:	vld1.64	{d18-d19}, [lr]
   14cdc:	vld1.64	{d20-d21}, [r3]
   14ce0:	mov	r3, #10
   14ce4:	vst1.64	{d16-d17}, [r4], r6
   14ce8:	vst1.64	{d18-d19}, [r5]
   14cec:	vst1.64	{d20-d21}, [r4]
   14cf0:	str	r3, [sp]
   14cf4:	bne	14cfc <__assert_fail@plt+0x3bb0>
   14cf8:	bl	11134 <abort@plt>
   14cfc:	str	r2, [sp, #44]	; 0x2c
   14d00:	str	r1, [sp, #40]	; 0x28
   14d04:	mov	r3, sp
   14d08:	mov	r1, ip
   14d0c:	mvn	r2, #0
   14d10:	bl	14724 <__assert_fail@plt+0x35d8>
   14d14:	sub	sp, fp, #16
   14d18:	pop	{r4, r5, r6, sl, fp, pc}
   14d1c:	push	{r4, r5, r6, sl, fp, lr}
   14d20:	add	fp, sp, #16
   14d24:	sub	sp, sp, #48	; 0x30
   14d28:	mov	lr, r3
   14d2c:	movw	r3, #33176	; 0x8198
   14d30:	mov	r6, #32
   14d34:	cmp	r1, #0
   14d38:	mov	r4, sp
   14d3c:	movt	r3, #2
   14d40:	cmpne	r2, #0
   14d44:	add	r5, r4, #16
   14d48:	add	ip, r3, #16
   14d4c:	vld1.64	{d16-d17}, [r3], r6
   14d50:	vld1.64	{d18-d19}, [ip]
   14d54:	vld1.64	{d20-d21}, [r3]
   14d58:	mov	r3, #10
   14d5c:	vst1.64	{d16-d17}, [r4], r6
   14d60:	vst1.64	{d18-d19}, [r5]
   14d64:	vst1.64	{d20-d21}, [r4]
   14d68:	str	r3, [sp]
   14d6c:	bne	14d74 <__assert_fail@plt+0x3c28>
   14d70:	bl	11134 <abort@plt>
   14d74:	ldr	ip, [fp, #8]
   14d78:	str	r2, [sp, #44]	; 0x2c
   14d7c:	str	r1, [sp, #40]	; 0x28
   14d80:	mov	r3, sp
   14d84:	mov	r1, lr
   14d88:	mov	r2, ip
   14d8c:	bl	14724 <__assert_fail@plt+0x35d8>
   14d90:	sub	sp, fp, #16
   14d94:	pop	{r4, r5, r6, sl, fp, pc}
   14d98:	push	{r4, sl, fp, lr}
   14d9c:	add	fp, sp, #8
   14da0:	sub	sp, sp, #48	; 0x30
   14da4:	movw	r3, #33176	; 0x8198
   14da8:	mov	lr, #32
   14dac:	mov	ip, r2
   14db0:	cmp	r0, #0
   14db4:	movt	r3, #2
   14db8:	cmpne	r1, #0
   14dbc:	add	r2, r3, #16
   14dc0:	vld1.64	{d16-d17}, [r3], lr
   14dc4:	vld1.64	{d20-d21}, [r3]
   14dc8:	vld1.64	{d18-d19}, [r2]
   14dcc:	mov	r2, sp
   14dd0:	add	r4, r2, #16
   14dd4:	vst1.64	{d16-d17}, [r2], lr
   14dd8:	vst1.64	{d20-d21}, [r2]
   14ddc:	mov	r2, #10
   14de0:	vst1.64	{d18-d19}, [r4]
   14de4:	str	r2, [sp]
   14de8:	bne	14df0 <__assert_fail@plt+0x3ca4>
   14dec:	bl	11134 <abort@plt>
   14df0:	str	r1, [sp, #44]	; 0x2c
   14df4:	str	r0, [sp, #40]	; 0x28
   14df8:	mov	r3, sp
   14dfc:	mov	r0, #0
   14e00:	mov	r1, ip
   14e04:	mvn	r2, #0
   14e08:	bl	14724 <__assert_fail@plt+0x35d8>
   14e0c:	sub	sp, fp, #8
   14e10:	pop	{r4, sl, fp, pc}
   14e14:	push	{r4, r5, fp, lr}
   14e18:	add	fp, sp, #8
   14e1c:	sub	sp, sp, #48	; 0x30
   14e20:	mov	ip, r3
   14e24:	movw	r3, #33176	; 0x8198
   14e28:	mov	r4, #32
   14e2c:	mov	lr, r2
   14e30:	cmp	r0, #0
   14e34:	movt	r3, #2
   14e38:	cmpne	r1, #0
   14e3c:	add	r2, r3, #16
   14e40:	vld1.64	{d16-d17}, [r3], r4
   14e44:	vld1.64	{d20-d21}, [r3]
   14e48:	vld1.64	{d18-d19}, [r2]
   14e4c:	mov	r2, sp
   14e50:	add	r5, r2, #16
   14e54:	vst1.64	{d16-d17}, [r2], r4
   14e58:	vst1.64	{d20-d21}, [r2]
   14e5c:	mov	r2, #10
   14e60:	vst1.64	{d18-d19}, [r5]
   14e64:	str	r2, [sp]
   14e68:	bne	14e70 <__assert_fail@plt+0x3d24>
   14e6c:	bl	11134 <abort@plt>
   14e70:	str	r1, [sp, #44]	; 0x2c
   14e74:	str	r0, [sp, #40]	; 0x28
   14e78:	mov	r3, sp
   14e7c:	mov	r0, #0
   14e80:	mov	r1, lr
   14e84:	mov	r2, ip
   14e88:	bl	14724 <__assert_fail@plt+0x35d8>
   14e8c:	sub	sp, fp, #8
   14e90:	pop	{r4, r5, fp, pc}
   14e94:	movw	r3, #33040	; 0x8110
   14e98:	movt	r3, #2
   14e9c:	b	14724 <__assert_fail@plt+0x35d8>
   14ea0:	movw	r3, #33040	; 0x8110
   14ea4:	mov	r2, r1
   14ea8:	mov	r1, r0
   14eac:	mov	r0, #0
   14eb0:	movt	r3, #2
   14eb4:	b	14724 <__assert_fail@plt+0x35d8>
   14eb8:	movw	r3, #33040	; 0x8110
   14ebc:	mvn	r2, #0
   14ec0:	movt	r3, #2
   14ec4:	b	14724 <__assert_fail@plt+0x35d8>
   14ec8:	movw	r3, #33040	; 0x8110
   14ecc:	mov	r1, r0
   14ed0:	mov	r0, #0
   14ed4:	mvn	r2, #0
   14ed8:	movt	r3, #2
   14edc:	b	14724 <__assert_fail@plt+0x35d8>
   14ee0:	push	{r4, r5, fp, lr}
   14ee4:	add	fp, sp, #8
   14ee8:	mov	r5, r0
   14eec:	mov	r4, r1
   14ef0:	mov	r0, #0
   14ef4:	mov	r2, #5
   14ef8:	mov	r1, r5
   14efc:	bl	10f48 <dcgettext@plt>
   14f00:	cmp	r0, r5
   14f04:	popne	{r4, r5, fp, pc}
   14f08:	bl	15f18 <__assert_fail@plt+0x4dcc>
   14f0c:	ldrb	r1, [r0]
   14f10:	and	r1, r1, #223	; 0xdf
   14f14:	cmp	r1, #71	; 0x47
   14f18:	beq	14f80 <__assert_fail@plt+0x3e34>
   14f1c:	cmp	r1, #85	; 0x55
   14f20:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f24:	ldrb	r1, [r0, #1]
   14f28:	and	r1, r1, #223	; 0xdf
   14f2c:	cmp	r1, #84	; 0x54
   14f30:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f34:	ldrb	r1, [r0, #2]
   14f38:	and	r1, r1, #223	; 0xdf
   14f3c:	cmp	r1, #70	; 0x46
   14f40:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f44:	ldrb	r1, [r0, #3]
   14f48:	cmp	r1, #45	; 0x2d
   14f4c:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f50:	ldrb	r1, [r0, #4]
   14f54:	cmp	r1, #56	; 0x38
   14f58:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f5c:	ldrb	r0, [r0, #5]
   14f60:	cmp	r0, #0
   14f64:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f68:	ldrb	r1, [r5]
   14f6c:	movw	r2, #28279	; 0x6e77
   14f70:	movw	r0, #28283	; 0x6e7b
   14f74:	movt	r2, #1
   14f78:	movt	r0, #1
   14f7c:	b	15008 <__assert_fail@plt+0x3ebc>
   14f80:	ldrb	r1, [r0, #1]
   14f84:	and	r1, r1, #223	; 0xdf
   14f88:	cmp	r1, #66	; 0x42
   14f8c:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f90:	ldrb	r1, [r0, #2]
   14f94:	cmp	r1, #49	; 0x31
   14f98:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14f9c:	ldrb	r1, [r0, #3]
   14fa0:	cmp	r1, #56	; 0x38
   14fa4:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14fa8:	ldrb	r1, [r0, #4]
   14fac:	cmp	r1, #48	; 0x30
   14fb0:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14fb4:	ldrb	r1, [r0, #5]
   14fb8:	cmp	r1, #51	; 0x33
   14fbc:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14fc0:	ldrb	r1, [r0, #6]
   14fc4:	cmp	r1, #48	; 0x30
   14fc8:	bne	14fd8 <__assert_fail@plt+0x3e8c>
   14fcc:	ldrb	r0, [r0, #7]
   14fd0:	cmp	r0, #0
   14fd4:	beq	14ff4 <__assert_fail@plt+0x3ea8>
   14fd8:	movw	r1, #28273	; 0x6e71
   14fdc:	movw	r0, #28277	; 0x6e75
   14fe0:	cmp	r4, #9
   14fe4:	movt	r1, #1
   14fe8:	movt	r0, #1
   14fec:	moveq	r0, r1
   14ff0:	pop	{r4, r5, fp, pc}
   14ff4:	ldrb	r1, [r5]
   14ff8:	movw	r2, #28287	; 0x6e7f
   14ffc:	movw	r0, #28291	; 0x6e83
   15000:	movt	r2, #1
   15004:	movt	r0, #1
   15008:	cmp	r1, #96	; 0x60
   1500c:	moveq	r0, r2
   15010:	pop	{r4, r5, fp, pc}
   15014:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15018:	add	fp, sp, #24
   1501c:	sub	sp, sp, #32
   15020:	ldr	r6, [fp, #12]
   15024:	ldr	r7, [fp, #8]
   15028:	mov	r4, r2
   1502c:	mov	r8, r0
   15030:	cmp	r1, #0
   15034:	beq	1505c <__assert_fail@plt+0x3f10>
   15038:	movw	r2, #28380	; 0x6edc
   1503c:	mov	r5, r1
   15040:	str	r3, [sp, #4]
   15044:	str	r4, [sp]
   15048:	mov	r0, r8
   1504c:	mov	r1, #1
   15050:	movt	r2, #1
   15054:	mov	r3, r5
   15058:	b	15074 <__assert_fail@plt+0x3f28>
   1505c:	movw	r2, #28392	; 0x6ee8
   15060:	str	r3, [sp]
   15064:	mov	r0, r8
   15068:	mov	r1, #1
   1506c:	mov	r3, r4
   15070:	movt	r2, #1
   15074:	bl	1108c <__fprintf_chk@plt>
   15078:	movw	r1, #28399	; 0x6eef
   1507c:	mov	r0, #0
   15080:	mov	r2, #5
   15084:	movt	r1, #1
   15088:	bl	10f48 <dcgettext@plt>
   1508c:	movw	r2, #29117	; 0x71bd
   15090:	mov	r3, r0
   15094:	movw	r0, #2022	; 0x7e6
   15098:	mov	r1, #1
   1509c:	movt	r2, #1
   150a0:	str	r0, [sp]
   150a4:	mov	r0, r8
   150a8:	bl	1108c <__fprintf_chk@plt>
   150ac:	movw	r4, #27338	; 0x6aca
   150b0:	mov	r1, r8
   150b4:	movt	r4, #1
   150b8:	mov	r0, r4
   150bc:	bl	10ec4 <fputs_unlocked@plt>
   150c0:	movw	r1, #28403	; 0x6ef3
   150c4:	mov	r0, #0
   150c8:	mov	r2, #5
   150cc:	movt	r1, #1
   150d0:	bl	10f48 <dcgettext@plt>
   150d4:	movw	r3, #28574	; 0x6f9e
   150d8:	mov	r2, r0
   150dc:	mov	r0, r8
   150e0:	mov	r1, #1
   150e4:	movt	r3, #1
   150e8:	bl	1108c <__fprintf_chk@plt>
   150ec:	mov	r0, r4
   150f0:	mov	r1, r8
   150f4:	bl	10ec4 <fputs_unlocked@plt>
   150f8:	cmp	r6, #9
   150fc:	bhi	15138 <__assert_fail@plt+0x3fec>
   15100:	add	r0, pc, #0
   15104:	ldr	pc, [r0, r6, lsl #2]
   15108:	andeq	r5, r1, r0, lsr r1
   1510c:	andeq	r5, r1, r4, asr #2
   15110:	andeq	r5, r1, r4, ror r1
   15114:	muleq	r1, ip, r1
   15118:	andeq	r5, r1, r4, asr #3
   1511c:	andeq	r5, r1, ip, ror #3
   15120:	andeq	r5, r1, r4, lsl r2
   15124:	andeq	r5, r1, ip, asr #4
   15128:	andeq	r5, r1, ip, ror #5
   1512c:	muleq	r1, r4, r2
   15130:	sub	sp, fp, #24
   15134:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15138:	movw	r1, #28927	; 0x70ff
   1513c:	movt	r1, #1
   15140:	b	1529c <__assert_fail@plt+0x4150>
   15144:	movw	r1, #28608	; 0x6fc0
   15148:	mov	r0, #0
   1514c:	mov	r2, #5
   15150:	movt	r1, #1
   15154:	bl	10f48 <dcgettext@plt>
   15158:	ldr	r3, [r7]
   1515c:	mov	r2, r0
   15160:	mov	r0, r8
   15164:	mov	r1, #1
   15168:	sub	sp, fp, #24
   1516c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15170:	b	1108c <__fprintf_chk@plt>
   15174:	movw	r1, #28624	; 0x6fd0
   15178:	mov	r0, #0
   1517c:	mov	r2, #5
   15180:	movt	r1, #1
   15184:	bl	10f48 <dcgettext@plt>
   15188:	mov	r2, r0
   1518c:	ldr	r3, [r7]
   15190:	ldr	r0, [r7, #4]
   15194:	str	r0, [sp]
   15198:	b	15288 <__assert_fail@plt+0x413c>
   1519c:	movw	r1, #28647	; 0x6fe7
   151a0:	mov	r0, #0
   151a4:	mov	r2, #5
   151a8:	movt	r1, #1
   151ac:	bl	10f48 <dcgettext@plt>
   151b0:	mov	r2, r0
   151b4:	ldr	r3, [r7]
   151b8:	ldmib	r7, {r0, r1}
   151bc:	stm	sp, {r0, r1}
   151c0:	b	15288 <__assert_fail@plt+0x413c>
   151c4:	movw	r1, #28675	; 0x7003
   151c8:	mov	r0, #0
   151cc:	mov	r2, #5
   151d0:	movt	r1, #1
   151d4:	bl	10f48 <dcgettext@plt>
   151d8:	ldr	r3, [r7]
   151dc:	mov	r2, r0
   151e0:	ldmib	r7, {r0, r1, r7}
   151e4:	stm	sp, {r0, r1, r7}
   151e8:	b	15288 <__assert_fail@plt+0x413c>
   151ec:	movw	r1, #28707	; 0x7023
   151f0:	mov	r0, #0
   151f4:	mov	r2, #5
   151f8:	movt	r1, #1
   151fc:	bl	10f48 <dcgettext@plt>
   15200:	ldr	r3, [r7]
   15204:	mov	r2, r0
   15208:	ldmib	r7, {r0, r1, r6, r7}
   1520c:	stm	sp, {r0, r1, r6, r7}
   15210:	b	15288 <__assert_fail@plt+0x413c>
   15214:	movw	r1, #28743	; 0x7047
   15218:	mov	r0, #0
   1521c:	mov	r2, #5
   15220:	movt	r1, #1
   15224:	bl	10f48 <dcgettext@plt>
   15228:	mov	r2, r0
   1522c:	ldr	r3, [r7]
   15230:	ldmib	r7, {r0, r1, r6}
   15234:	ldr	r5, [r7, #16]
   15238:	ldr	r7, [r7, #20]
   1523c:	stm	sp, {r0, r1, r6}
   15240:	str	r5, [sp, #12]
   15244:	str	r7, [sp, #16]
   15248:	b	15288 <__assert_fail@plt+0x413c>
   1524c:	movw	r1, #28783	; 0x706f
   15250:	mov	r0, #0
   15254:	mov	r2, #5
   15258:	movt	r1, #1
   1525c:	bl	10f48 <dcgettext@plt>
   15260:	mov	r2, r0
   15264:	ldr	r3, [r7]
   15268:	ldmib	r7, {r0, r1, r6}
   1526c:	ldr	r5, [r7, #16]
   15270:	ldr	r4, [r7, #20]
   15274:	ldr	r7, [r7, #24]
   15278:	stm	sp, {r0, r1, r6}
   1527c:	str	r5, [sp, #12]
   15280:	str	r4, [sp, #16]
   15284:	str	r7, [sp, #20]
   15288:	mov	r0, r8
   1528c:	mov	r1, #1
   15290:	b	1533c <__assert_fail@plt+0x41f0>
   15294:	movw	r1, #28875	; 0x70cb
   15298:	movt	r1, #1
   1529c:	mov	r0, #0
   152a0:	mov	r2, #5
   152a4:	bl	10f48 <dcgettext@plt>
   152a8:	mov	ip, r0
   152ac:	ldr	r3, [r7]
   152b0:	ldr	r0, [r7, #4]
   152b4:	ldr	r1, [r7, #8]
   152b8:	ldr	r6, [r7, #12]
   152bc:	ldr	r5, [r7, #16]
   152c0:	ldr	r4, [r7, #20]
   152c4:	ldr	r2, [r7, #24]
   152c8:	ldr	lr, [r7, #28]
   152cc:	ldr	r7, [r7, #32]
   152d0:	stm	sp, {r0, r1, r6}
   152d4:	str	r5, [sp, #12]
   152d8:	str	r4, [sp, #16]
   152dc:	str	r2, [sp, #20]
   152e0:	str	lr, [sp, #24]
   152e4:	str	r7, [sp, #28]
   152e8:	b	15330 <__assert_fail@plt+0x41e4>
   152ec:	movw	r1, #28827	; 0x709b
   152f0:	mov	r0, #0
   152f4:	mov	r2, #5
   152f8:	movt	r1, #1
   152fc:	bl	10f48 <dcgettext@plt>
   15300:	mov	ip, r0
   15304:	ldr	r3, [r7]
   15308:	ldmib	r7, {r0, r1, r6}
   1530c:	ldr	r5, [r7, #16]
   15310:	ldr	r4, [r7, #20]
   15314:	ldr	r2, [r7, #24]
   15318:	ldr	r7, [r7, #28]
   1531c:	stm	sp, {r0, r1, r6}
   15320:	str	r5, [sp, #12]
   15324:	str	r4, [sp, #16]
   15328:	str	r2, [sp, #20]
   1532c:	str	r7, [sp, #24]
   15330:	mov	r0, r8
   15334:	mov	r1, #1
   15338:	mov	r2, ip
   1533c:	bl	1108c <__fprintf_chk@plt>
   15340:	sub	sp, fp, #24
   15344:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15348:	push	{r4, sl, fp, lr}
   1534c:	add	fp, sp, #8
   15350:	sub	sp, sp, #8
   15354:	ldr	ip, [fp, #8]
   15358:	mov	lr, #0
   1535c:	ldr	r4, [ip, lr, lsl #2]
   15360:	add	lr, lr, #1
   15364:	cmp	r4, #0
   15368:	bne	1535c <__assert_fail@plt+0x4210>
   1536c:	sub	r4, lr, #1
   15370:	str	ip, [sp]
   15374:	str	r4, [sp, #4]
   15378:	bl	15014 <__assert_fail@plt+0x3ec8>
   1537c:	sub	sp, fp, #8
   15380:	pop	{r4, sl, fp, pc}
   15384:	push	{fp, lr}
   15388:	mov	fp, sp
   1538c:	sub	sp, sp, #48	; 0x30
   15390:	ldr	ip, [fp, #8]
   15394:	ldr	lr, [ip]
   15398:	cmp	lr, #0
   1539c:	str	lr, [sp, #8]
   153a0:	beq	1543c <__assert_fail@plt+0x42f0>
   153a4:	ldr	lr, [ip, #4]
   153a8:	cmp	lr, #0
   153ac:	str	lr, [sp, #12]
   153b0:	beq	15444 <__assert_fail@plt+0x42f8>
   153b4:	ldr	lr, [ip, #8]
   153b8:	cmp	lr, #0
   153bc:	str	lr, [sp, #16]
   153c0:	beq	1544c <__assert_fail@plt+0x4300>
   153c4:	ldr	lr, [ip, #12]
   153c8:	cmp	lr, #0
   153cc:	str	lr, [sp, #20]
   153d0:	beq	15454 <__assert_fail@plt+0x4308>
   153d4:	ldr	lr, [ip, #16]
   153d8:	cmp	lr, #0
   153dc:	str	lr, [sp, #24]
   153e0:	beq	1545c <__assert_fail@plt+0x4310>
   153e4:	ldr	lr, [ip, #20]
   153e8:	cmp	lr, #0
   153ec:	str	lr, [sp, #28]
   153f0:	beq	15464 <__assert_fail@plt+0x4318>
   153f4:	ldr	lr, [ip, #24]
   153f8:	cmp	lr, #0
   153fc:	str	lr, [sp, #32]
   15400:	beq	1546c <__assert_fail@plt+0x4320>
   15404:	ldr	lr, [ip, #28]
   15408:	cmp	lr, #0
   1540c:	str	lr, [sp, #36]	; 0x24
   15410:	beq	15474 <__assert_fail@plt+0x4328>
   15414:	ldr	lr, [ip, #32]
   15418:	cmp	lr, #0
   1541c:	str	lr, [sp, #40]	; 0x28
   15420:	beq	1547c <__assert_fail@plt+0x4330>
   15424:	ldr	lr, [ip, #36]	; 0x24
   15428:	mov	ip, #10
   1542c:	cmp	lr, #0
   15430:	str	lr, [sp, #44]	; 0x2c
   15434:	movweq	ip, #9
   15438:	b	15480 <__assert_fail@plt+0x4334>
   1543c:	mov	ip, #0
   15440:	b	15480 <__assert_fail@plt+0x4334>
   15444:	mov	ip, #1
   15448:	b	15480 <__assert_fail@plt+0x4334>
   1544c:	mov	ip, #2
   15450:	b	15480 <__assert_fail@plt+0x4334>
   15454:	mov	ip, #3
   15458:	b	15480 <__assert_fail@plt+0x4334>
   1545c:	mov	ip, #4
   15460:	b	15480 <__assert_fail@plt+0x4334>
   15464:	mov	ip, #5
   15468:	b	15480 <__assert_fail@plt+0x4334>
   1546c:	mov	ip, #6
   15470:	b	15480 <__assert_fail@plt+0x4334>
   15474:	mov	ip, #7
   15478:	b	15480 <__assert_fail@plt+0x4334>
   1547c:	mov	ip, #8
   15480:	add	lr, sp, #8
   15484:	str	ip, [sp, #4]
   15488:	str	lr, [sp]
   1548c:	bl	15014 <__assert_fail@plt+0x3ec8>
   15490:	mov	sp, fp
   15494:	pop	{fp, pc}
   15498:	push	{fp, lr}
   1549c:	mov	fp, sp
   154a0:	sub	sp, sp, #56	; 0x38
   154a4:	add	ip, fp, #8
   154a8:	str	ip, [sp, #12]
   154ac:	ldr	lr, [fp, #8]
   154b0:	cmp	lr, #0
   154b4:	str	lr, [sp, #16]
   154b8:	beq	15554 <__assert_fail@plt+0x4408>
   154bc:	ldr	lr, [ip, #4]
   154c0:	cmp	lr, #0
   154c4:	str	lr, [sp, #20]
   154c8:	beq	1555c <__assert_fail@plt+0x4410>
   154cc:	ldr	lr, [ip, #8]
   154d0:	cmp	lr, #0
   154d4:	str	lr, [sp, #24]
   154d8:	beq	15564 <__assert_fail@plt+0x4418>
   154dc:	ldr	lr, [ip, #12]
   154e0:	cmp	lr, #0
   154e4:	str	lr, [sp, #28]
   154e8:	beq	1556c <__assert_fail@plt+0x4420>
   154ec:	ldr	lr, [ip, #16]
   154f0:	cmp	lr, #0
   154f4:	str	lr, [sp, #32]
   154f8:	beq	15574 <__assert_fail@plt+0x4428>
   154fc:	ldr	lr, [ip, #20]
   15500:	cmp	lr, #0
   15504:	str	lr, [sp, #36]	; 0x24
   15508:	beq	1557c <__assert_fail@plt+0x4430>
   1550c:	ldr	lr, [ip, #24]
   15510:	cmp	lr, #0
   15514:	str	lr, [sp, #40]	; 0x28
   15518:	beq	15584 <__assert_fail@plt+0x4438>
   1551c:	ldr	lr, [ip, #28]
   15520:	cmp	lr, #0
   15524:	str	lr, [sp, #44]	; 0x2c
   15528:	beq	1558c <__assert_fail@plt+0x4440>
   1552c:	ldr	lr, [ip, #32]
   15530:	cmp	lr, #0
   15534:	str	lr, [sp, #48]	; 0x30
   15538:	beq	15594 <__assert_fail@plt+0x4448>
   1553c:	ldr	lr, [ip, #36]	; 0x24
   15540:	mov	ip, #10
   15544:	cmp	lr, #0
   15548:	str	lr, [sp, #52]	; 0x34
   1554c:	movweq	ip, #9
   15550:	b	15598 <__assert_fail@plt+0x444c>
   15554:	mov	ip, #0
   15558:	b	15598 <__assert_fail@plt+0x444c>
   1555c:	mov	ip, #1
   15560:	b	15598 <__assert_fail@plt+0x444c>
   15564:	mov	ip, #2
   15568:	b	15598 <__assert_fail@plt+0x444c>
   1556c:	mov	ip, #3
   15570:	b	15598 <__assert_fail@plt+0x444c>
   15574:	mov	ip, #4
   15578:	b	15598 <__assert_fail@plt+0x444c>
   1557c:	mov	ip, #5
   15580:	b	15598 <__assert_fail@plt+0x444c>
   15584:	mov	ip, #6
   15588:	b	15598 <__assert_fail@plt+0x444c>
   1558c:	mov	ip, #7
   15590:	b	15598 <__assert_fail@plt+0x444c>
   15594:	mov	ip, #8
   15598:	add	lr, sp, #16
   1559c:	str	ip, [sp, #4]
   155a0:	str	lr, [sp]
   155a4:	bl	15014 <__assert_fail@plt+0x3ec8>
   155a8:	mov	sp, fp
   155ac:	pop	{fp, pc}
   155b0:	push	{fp, lr}
   155b4:	mov	fp, sp
   155b8:	movw	r0, #33116	; 0x815c
   155bc:	movt	r0, #2
   155c0:	ldr	r1, [r0]
   155c4:	movw	r0, #27338	; 0x6aca
   155c8:	movt	r0, #1
   155cc:	bl	10ec4 <fputs_unlocked@plt>
   155d0:	movw	r1, #28987	; 0x713b
   155d4:	mov	r0, #0
   155d8:	mov	r2, #5
   155dc:	movt	r1, #1
   155e0:	bl	10f48 <dcgettext@plt>
   155e4:	movw	r2, #29007	; 0x714f
   155e8:	mov	r1, r0
   155ec:	mov	r0, #1
   155f0:	movt	r2, #1
   155f4:	bl	11074 <__printf_chk@plt>
   155f8:	movw	r1, #29029	; 0x7165
   155fc:	mov	r0, #0
   15600:	mov	r2, #5
   15604:	movt	r1, #1
   15608:	bl	10f48 <dcgettext@plt>
   1560c:	movw	r2, #26643	; 0x6813
   15610:	movw	r3, #27147	; 0x6a0b
   15614:	mov	r1, r0
   15618:	mov	r0, #1
   1561c:	movt	r2, #1
   15620:	movt	r3, #1
   15624:	bl	11074 <__printf_chk@plt>
   15628:	movw	r1, #29049	; 0x7179
   1562c:	mov	r0, #0
   15630:	mov	r2, #5
   15634:	movt	r1, #1
   15638:	bl	10f48 <dcgettext@plt>
   1563c:	movw	r2, #29088	; 0x71a0
   15640:	mov	r1, r0
   15644:	mov	r0, #1
   15648:	movt	r2, #1
   1564c:	pop	{fp, lr}
   15650:	b	11074 <__printf_chk@plt>
   15654:	push	{r4, r5, r6, sl, fp, lr}
   15658:	add	fp, sp, #16
   1565c:	mov	r4, r2
   15660:	mov	r5, r1
   15664:	mov	r6, r0
   15668:	bl	15fb4 <__assert_fail@plt+0x4e68>
   1566c:	cmp	r0, #0
   15670:	popne	{r4, r5, r6, sl, fp, pc}
   15674:	cmp	r6, #0
   15678:	beq	1568c <__assert_fail@plt+0x4540>
   1567c:	cmp	r5, #0
   15680:	cmpne	r4, #0
   15684:	bne	1568c <__assert_fail@plt+0x4540>
   15688:	pop	{r4, r5, r6, sl, fp, pc}
   1568c:	bl	15c08 <__assert_fail@plt+0x4abc>
   15690:	push	{r4, r5, r6, sl, fp, lr}
   15694:	add	fp, sp, #16
   15698:	mov	r4, r2
   1569c:	mov	r5, r1
   156a0:	mov	r6, r0
   156a4:	bl	15fb4 <__assert_fail@plt+0x4e68>
   156a8:	cmp	r0, #0
   156ac:	popne	{r4, r5, r6, sl, fp, pc}
   156b0:	cmp	r6, #0
   156b4:	beq	156c8 <__assert_fail@plt+0x457c>
   156b8:	cmp	r5, #0
   156bc:	cmpne	r4, #0
   156c0:	bne	156c8 <__assert_fail@plt+0x457c>
   156c4:	pop	{r4, r5, r6, sl, fp, pc}
   156c8:	bl	15c08 <__assert_fail@plt+0x4abc>
   156cc:	push	{fp, lr}
   156d0:	mov	fp, sp
   156d4:	bl	15ca0 <__assert_fail@plt+0x4b54>
   156d8:	cmp	r0, #0
   156dc:	popne	{fp, pc}
   156e0:	bl	15c08 <__assert_fail@plt+0x4abc>
   156e4:	push	{fp, lr}
   156e8:	mov	fp, sp
   156ec:	bl	15ca0 <__assert_fail@plt+0x4b54>
   156f0:	cmp	r0, #0
   156f4:	popne	{fp, pc}
   156f8:	bl	15c08 <__assert_fail@plt+0x4abc>
   156fc:	push	{fp, lr}
   15700:	mov	fp, sp
   15704:	bl	15ca0 <__assert_fail@plt+0x4b54>
   15708:	cmp	r0, #0
   1570c:	popne	{fp, pc}
   15710:	bl	15c08 <__assert_fail@plt+0x4abc>
   15714:	push	{r4, r5, fp, lr}
   15718:	add	fp, sp, #8
   1571c:	mov	r4, r1
   15720:	mov	r5, r0
   15724:	bl	15cd0 <__assert_fail@plt+0x4b84>
   15728:	cmp	r0, #0
   1572c:	popne	{r4, r5, fp, pc}
   15730:	cmp	r5, #0
   15734:	beq	15744 <__assert_fail@plt+0x45f8>
   15738:	cmp	r4, #0
   1573c:	bne	15744 <__assert_fail@plt+0x45f8>
   15740:	pop	{r4, r5, fp, pc}
   15744:	bl	15c08 <__assert_fail@plt+0x4abc>
   15748:	push	{fp, lr}
   1574c:	mov	fp, sp
   15750:	cmp	r1, #0
   15754:	orreq	r1, r1, #1
   15758:	bl	15cd0 <__assert_fail@plt+0x4b84>
   1575c:	cmp	r0, #0
   15760:	popne	{fp, pc}
   15764:	bl	15c08 <__assert_fail@plt+0x4abc>
   15768:	push	{fp, lr}
   1576c:	mov	fp, sp
   15770:	clz	r3, r2
   15774:	lsr	ip, r3, #5
   15778:	clz	r3, r1
   1577c:	lsr	r3, r3, #5
   15780:	orrs	r3, r3, ip
   15784:	movwne	r1, #1
   15788:	movwne	r2, #1
   1578c:	bl	15fb4 <__assert_fail@plt+0x4e68>
   15790:	cmp	r0, #0
   15794:	popne	{fp, pc}
   15798:	bl	15c08 <__assert_fail@plt+0x4abc>
   1579c:	push	{fp, lr}
   157a0:	mov	fp, sp
   157a4:	mov	r2, r1
   157a8:	mov	r1, r0
   157ac:	mov	r0, #0
   157b0:	bl	15fb4 <__assert_fail@plt+0x4e68>
   157b4:	cmp	r0, #0
   157b8:	popne	{fp, pc}
   157bc:	bl	15c08 <__assert_fail@plt+0x4abc>
   157c0:	push	{fp, lr}
   157c4:	mov	fp, sp
   157c8:	mov	r2, r1
   157cc:	mov	r1, r0
   157d0:	clz	r0, r2
   157d4:	clz	r3, r1
   157d8:	lsr	r0, r0, #5
   157dc:	lsr	r3, r3, #5
   157e0:	orrs	r0, r3, r0
   157e4:	mov	r0, #0
   157e8:	movwne	r1, #1
   157ec:	movwne	r2, #1
   157f0:	bl	15fb4 <__assert_fail@plt+0x4e68>
   157f4:	cmp	r0, #0
   157f8:	popne	{fp, pc}
   157fc:	bl	15c08 <__assert_fail@plt+0x4abc>
   15800:	push	{r4, r5, r6, sl, fp, lr}
   15804:	add	fp, sp, #16
   15808:	ldr	r5, [r1]
   1580c:	mov	r4, r1
   15810:	mov	r6, r0
   15814:	cmp	r0, #0
   15818:	beq	15830 <__assert_fail@plt+0x46e4>
   1581c:	mov	r0, #1
   15820:	add	r0, r0, r5, lsr #1
   15824:	adds	r5, r5, r0
   15828:	bcc	15838 <__assert_fail@plt+0x46ec>
   1582c:	b	15874 <__assert_fail@plt+0x4728>
   15830:	cmp	r5, #0
   15834:	movweq	r5, #64	; 0x40
   15838:	mov	r0, r6
   1583c:	mov	r1, r5
   15840:	mov	r2, #1
   15844:	bl	15fb4 <__assert_fail@plt+0x4e68>
   15848:	cmp	r5, #0
   1584c:	mov	r1, r5
   15850:	movwne	r1, #1
   15854:	cmp	r0, #0
   15858:	bne	1586c <__assert_fail@plt+0x4720>
   1585c:	clz	r2, r6
   15860:	lsr	r2, r2, #5
   15864:	orrs	r1, r2, r1
   15868:	bne	15874 <__assert_fail@plt+0x4728>
   1586c:	str	r5, [r4]
   15870:	pop	{r4, r5, r6, sl, fp, pc}
   15874:	bl	15c08 <__assert_fail@plt+0x4abc>
   15878:	push	{r4, r5, r6, r7, fp, lr}
   1587c:	add	fp, sp, #16
   15880:	ldr	r5, [r1]
   15884:	mov	r6, r2
   15888:	mov	r4, r1
   1588c:	mov	r7, r0
   15890:	cmp	r0, #0
   15894:	beq	158ac <__assert_fail@plt+0x4760>
   15898:	mov	r0, #1
   1589c:	add	r0, r0, r5, lsr #1
   158a0:	adds	r5, r5, r0
   158a4:	bcc	158c4 <__assert_fail@plt+0x4778>
   158a8:	b	158f8 <__assert_fail@plt+0x47ac>
   158ac:	cmp	r5, #0
   158b0:	bne	158c4 <__assert_fail@plt+0x4778>
   158b4:	mov	r0, #64	; 0x40
   158b8:	cmp	r6, #64	; 0x40
   158bc:	udiv	r5, r0, r6
   158c0:	addhi	r5, r5, #1
   158c4:	mov	r0, r7
   158c8:	mov	r1, r5
   158cc:	mov	r2, r6
   158d0:	bl	15fb4 <__assert_fail@plt+0x4e68>
   158d4:	cmp	r0, #0
   158d8:	bne	158f0 <__assert_fail@plt+0x47a4>
   158dc:	cmp	r7, #0
   158e0:	beq	158f8 <__assert_fail@plt+0x47ac>
   158e4:	cmp	r6, #0
   158e8:	cmpne	r5, #0
   158ec:	bne	158f8 <__assert_fail@plt+0x47ac>
   158f0:	str	r5, [r4]
   158f4:	pop	{r4, r5, r6, r7, fp, pc}
   158f8:	bl	15c08 <__assert_fail@plt+0x4abc>
   158fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15900:	add	fp, sp, #24
   15904:	mov	r8, r1
   15908:	ldr	r1, [r1]
   1590c:	mov	r5, r0
   15910:	add	r0, r1, r1, asr #1
   15914:	cmp	r0, r1
   15918:	mvnvs	r0, #-2147483648	; 0x80000000
   1591c:	cmp	r0, r3
   15920:	mov	r7, r0
   15924:	movgt	r7, r3
   15928:	cmn	r3, #1
   1592c:	movle	r7, r0
   15930:	ldr	r0, [fp, #8]
   15934:	cmn	r0, #1
   15938:	ble	15960 <__assert_fail@plt+0x4814>
   1593c:	cmp	r0, #0
   15940:	beq	159b4 <__assert_fail@plt+0x4868>
   15944:	cmn	r7, #1
   15948:	ble	15988 <__assert_fail@plt+0x483c>
   1594c:	mvn	r4, #-2147483648	; 0x80000000
   15950:	udiv	r6, r4, r0
   15954:	cmp	r6, r7
   15958:	bge	159b4 <__assert_fail@plt+0x4868>
   1595c:	b	159c4 <__assert_fail@plt+0x4878>
   15960:	cmn	r7, #1
   15964:	ble	159a4 <__assert_fail@plt+0x4858>
   15968:	cmn	r0, #1
   1596c:	beq	159b4 <__assert_fail@plt+0x4868>
   15970:	mov	r6, #-2147483648	; 0x80000000
   15974:	mvn	r4, #-2147483648	; 0x80000000
   15978:	sdiv	r6, r6, r0
   1597c:	cmp	r6, r7
   15980:	bge	159b4 <__assert_fail@plt+0x4868>
   15984:	b	159c4 <__assert_fail@plt+0x4878>
   15988:	beq	159b4 <__assert_fail@plt+0x4868>
   1598c:	mov	r6, #-2147483648	; 0x80000000
   15990:	mvn	r4, #-2147483648	; 0x80000000
   15994:	sdiv	r6, r6, r7
   15998:	cmp	r6, r0
   1599c:	bge	159b4 <__assert_fail@plt+0x4868>
   159a0:	b	159c4 <__assert_fail@plt+0x4878>
   159a4:	mvn	r4, #-2147483648	; 0x80000000
   159a8:	sdiv	r6, r4, r0
   159ac:	cmp	r7, r6
   159b0:	blt	159c4 <__assert_fail@plt+0x4878>
   159b4:	mul	r6, r7, r0
   159b8:	mov	r4, #64	; 0x40
   159bc:	cmp	r6, #63	; 0x3f
   159c0:	bgt	159cc <__assert_fail@plt+0x4880>
   159c4:	sdiv	r7, r4, r0
   159c8:	mul	r6, r7, r0
   159cc:	cmp	r5, #0
   159d0:	moveq	r4, #0
   159d4:	streq	r4, [r8]
   159d8:	sub	r4, r7, r1
   159dc:	cmp	r4, r2
   159e0:	bge	15a8c <__assert_fail@plt+0x4940>
   159e4:	add	r7, r1, r2
   159e8:	mov	r6, #0
   159ec:	mov	r2, #0
   159f0:	cmp	r7, r3
   159f4:	movwgt	r6, #1
   159f8:	cmn	r3, #1
   159fc:	movwgt	r2, #1
   15a00:	cmp	r7, r1
   15a04:	bvs	15ac0 <__assert_fail@plt+0x4974>
   15a08:	ands	r1, r2, r6
   15a0c:	bne	15ac0 <__assert_fail@plt+0x4974>
   15a10:	cmn	r0, #1
   15a14:	ble	15a3c <__assert_fail@plt+0x48f0>
   15a18:	cmp	r0, #0
   15a1c:	beq	15a88 <__assert_fail@plt+0x493c>
   15a20:	cmn	r7, #1
   15a24:	ble	15a60 <__assert_fail@plt+0x4914>
   15a28:	mvn	r1, #-2147483648	; 0x80000000
   15a2c:	udiv	r1, r1, r0
   15a30:	cmp	r1, r7
   15a34:	bge	15a88 <__assert_fail@plt+0x493c>
   15a38:	b	15ac0 <__assert_fail@plt+0x4974>
   15a3c:	cmn	r7, #1
   15a40:	ble	15a78 <__assert_fail@plt+0x492c>
   15a44:	cmn	r0, #1
   15a48:	beq	15a88 <__assert_fail@plt+0x493c>
   15a4c:	mov	r1, #-2147483648	; 0x80000000
   15a50:	sdiv	r1, r1, r0
   15a54:	cmp	r1, r7
   15a58:	bge	15a88 <__assert_fail@plt+0x493c>
   15a5c:	b	15ac0 <__assert_fail@plt+0x4974>
   15a60:	beq	15a88 <__assert_fail@plt+0x493c>
   15a64:	mov	r1, #-2147483648	; 0x80000000
   15a68:	sdiv	r1, r1, r7
   15a6c:	cmp	r1, r0
   15a70:	bge	15a88 <__assert_fail@plt+0x493c>
   15a74:	b	15ac0 <__assert_fail@plt+0x4974>
   15a78:	mvn	r1, #-2147483648	; 0x80000000
   15a7c:	sdiv	r1, r1, r0
   15a80:	cmp	r7, r1
   15a84:	blt	15ac0 <__assert_fail@plt+0x4974>
   15a88:	mul	r6, r7, r0
   15a8c:	mov	r0, r5
   15a90:	mov	r1, r6
   15a94:	bl	15cd0 <__assert_fail@plt+0x4b84>
   15a98:	cmp	r6, #0
   15a9c:	movwne	r6, #1
   15aa0:	cmp	r0, #0
   15aa4:	bne	15ab8 <__assert_fail@plt+0x496c>
   15aa8:	clz	r1, r5
   15aac:	lsr	r1, r1, #5
   15ab0:	orrs	r1, r1, r6
   15ab4:	bne	15ac0 <__assert_fail@plt+0x4974>
   15ab8:	str	r7, [r8]
   15abc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ac0:	bl	15c08 <__assert_fail@plt+0x4abc>
   15ac4:	push	{fp, lr}
   15ac8:	mov	fp, sp
   15acc:	mov	r1, #1
   15ad0:	bl	15c4c <__assert_fail@plt+0x4b00>
   15ad4:	cmp	r0, #0
   15ad8:	popne	{fp, pc}
   15adc:	bl	15c08 <__assert_fail@plt+0x4abc>
   15ae0:	push	{fp, lr}
   15ae4:	mov	fp, sp
   15ae8:	bl	15c4c <__assert_fail@plt+0x4b00>
   15aec:	cmp	r0, #0
   15af0:	popne	{fp, pc}
   15af4:	bl	15c08 <__assert_fail@plt+0x4abc>
   15af8:	push	{fp, lr}
   15afc:	mov	fp, sp
   15b00:	mov	r1, #1
   15b04:	bl	15c4c <__assert_fail@plt+0x4b00>
   15b08:	cmp	r0, #0
   15b0c:	popne	{fp, pc}
   15b10:	bl	15c08 <__assert_fail@plt+0x4abc>
   15b14:	push	{fp, lr}
   15b18:	mov	fp, sp
   15b1c:	bl	15c4c <__assert_fail@plt+0x4b00>
   15b20:	cmp	r0, #0
   15b24:	popne	{fp, pc}
   15b28:	bl	15c08 <__assert_fail@plt+0x4abc>
   15b2c:	push	{r4, r5, fp, lr}
   15b30:	add	fp, sp, #8
   15b34:	mov	r5, r0
   15b38:	mov	r0, r1
   15b3c:	mov	r4, r1
   15b40:	bl	15ca0 <__assert_fail@plt+0x4b54>
   15b44:	cmp	r0, #0
   15b48:	beq	15b5c <__assert_fail@plt+0x4a10>
   15b4c:	mov	r1, r5
   15b50:	mov	r2, r4
   15b54:	pop	{r4, r5, fp, lr}
   15b58:	b	10f24 <memcpy@plt>
   15b5c:	bl	15c08 <__assert_fail@plt+0x4abc>
   15b60:	push	{r4, r5, fp, lr}
   15b64:	add	fp, sp, #8
   15b68:	mov	r5, r0
   15b6c:	mov	r0, r1
   15b70:	mov	r4, r1
   15b74:	bl	15ca0 <__assert_fail@plt+0x4b54>
   15b78:	cmp	r0, #0
   15b7c:	beq	15b90 <__assert_fail@plt+0x4a44>
   15b80:	mov	r1, r5
   15b84:	mov	r2, r4
   15b88:	pop	{r4, r5, fp, lr}
   15b8c:	b	10f24 <memcpy@plt>
   15b90:	bl	15c08 <__assert_fail@plt+0x4abc>
   15b94:	push	{r4, r5, fp, lr}
   15b98:	add	fp, sp, #8
   15b9c:	mov	r5, r0
   15ba0:	add	r0, r1, #1
   15ba4:	mov	r4, r1
   15ba8:	bl	15ca0 <__assert_fail@plt+0x4b54>
   15bac:	cmp	r0, #0
   15bb0:	beq	15bcc <__assert_fail@plt+0x4a80>
   15bb4:	mov	r1, #0
   15bb8:	mov	r2, r4
   15bbc:	strb	r1, [r0, r4]
   15bc0:	mov	r1, r5
   15bc4:	pop	{r4, r5, fp, lr}
   15bc8:	b	10f24 <memcpy@plt>
   15bcc:	bl	15c08 <__assert_fail@plt+0x4abc>
   15bd0:	push	{r4, r5, fp, lr}
   15bd4:	add	fp, sp, #8
   15bd8:	mov	r4, r0
   15bdc:	bl	1102c <strlen@plt>
   15be0:	add	r5, r0, #1
   15be4:	mov	r0, r5
   15be8:	bl	15ca0 <__assert_fail@plt+0x4b54>
   15bec:	cmp	r0, #0
   15bf0:	beq	15c04 <__assert_fail@plt+0x4ab8>
   15bf4:	mov	r1, r4
   15bf8:	mov	r2, r5
   15bfc:	pop	{r4, r5, fp, lr}
   15c00:	b	10f24 <memcpy@plt>
   15c04:	bl	15c08 <__assert_fail@plt+0x4abc>
   15c08:	push	{fp, lr}
   15c0c:	mov	fp, sp
   15c10:	movw	r0, #33020	; 0x80fc
   15c14:	movw	r1, #29164	; 0x71ec
   15c18:	mov	r2, #5
   15c1c:	movt	r0, #2
   15c20:	movt	r1, #1
   15c24:	ldr	r4, [r0]
   15c28:	mov	r0, #0
   15c2c:	bl	10f48 <dcgettext@plt>
   15c30:	movw	r2, #28126	; 0x6dde
   15c34:	mov	r3, r0
   15c38:	mov	r0, r4
   15c3c:	mov	r1, #0
   15c40:	movt	r2, #1
   15c44:	bl	10fc0 <error@plt>
   15c48:	bl	11134 <abort@plt>
   15c4c:	clz	r2, r1
   15c50:	clz	r3, r0
   15c54:	lsr	r2, r2, #5
   15c58:	lsr	r3, r3, #5
   15c5c:	orrs	r2, r3, r2
   15c60:	movwne	r1, #1
   15c64:	movwne	r0, #1
   15c68:	cmp	r1, #0
   15c6c:	beq	15c9c <__assert_fail@plt+0x4b50>
   15c70:	mvn	r2, #-2147483648	; 0x80000000
   15c74:	udiv	r2, r2, r1
   15c78:	cmp	r2, r0
   15c7c:	bcs	15c9c <__assert_fail@plt+0x4b50>
   15c80:	push	{fp, lr}
   15c84:	mov	fp, sp
   15c88:	bl	11044 <__errno_location@plt>
   15c8c:	mov	r1, #12
   15c90:	str	r1, [r0]
   15c94:	mov	r0, #0
   15c98:	pop	{fp, pc}
   15c9c:	b	10eb8 <calloc@plt>
   15ca0:	cmp	r0, #0
   15ca4:	movweq	r0, #1
   15ca8:	cmn	r0, #1
   15cac:	ble	15cb4 <__assert_fail@plt+0x4b68>
   15cb0:	b	10fcc <malloc@plt>
   15cb4:	push	{fp, lr}
   15cb8:	mov	fp, sp
   15cbc:	bl	11044 <__errno_location@plt>
   15cc0:	mov	r1, #12
   15cc4:	str	r1, [r0]
   15cc8:	mov	r0, #0
   15ccc:	pop	{fp, pc}
   15cd0:	push	{fp, lr}
   15cd4:	mov	fp, sp
   15cd8:	cmp	r0, #0
   15cdc:	beq	15cf8 <__assert_fail@plt+0x4bac>
   15ce0:	cmp	r1, #0
   15ce4:	beq	15d04 <__assert_fail@plt+0x4bb8>
   15ce8:	cmn	r1, #1
   15cec:	ble	15d10 <__assert_fail@plt+0x4bc4>
   15cf0:	pop	{fp, lr}
   15cf4:	b	10f54 <realloc@plt>
   15cf8:	mov	r0, r1
   15cfc:	pop	{fp, lr}
   15d00:	b	15ca0 <__assert_fail@plt+0x4b54>
   15d04:	bl	12d84 <__assert_fail@plt+0x1c38>
   15d08:	mov	r0, #0
   15d0c:	pop	{fp, pc}
   15d10:	bl	11044 <__errno_location@plt>
   15d14:	mov	r1, #12
   15d18:	str	r1, [r0]
   15d1c:	mov	r0, #0
   15d20:	pop	{fp, pc}
   15d24:	push	{r4, r5, r6, sl, fp, lr}
   15d28:	add	fp, sp, #16
   15d2c:	mov	r4, r0
   15d30:	bl	10fa8 <__fpending@plt>
   15d34:	ldr	r6, [r4]
   15d38:	mov	r5, r0
   15d3c:	mov	r0, r4
   15d40:	bl	12c8c <__assert_fail@plt+0x1b40>
   15d44:	tst	r6, #32
   15d48:	bne	15d80 <__assert_fail@plt+0x4c34>
   15d4c:	cmp	r0, #0
   15d50:	mov	r4, r0
   15d54:	mvnne	r4, #0
   15d58:	cmp	r5, #0
   15d5c:	bne	15d8c <__assert_fail@plt+0x4c40>
   15d60:	cmp	r0, #0
   15d64:	beq	15d8c <__assert_fail@plt+0x4c40>
   15d68:	bl	11044 <__errno_location@plt>
   15d6c:	ldr	r0, [r0]
   15d70:	subs	r4, r0, #9
   15d74:	mvnne	r4, #0
   15d78:	mov	r0, r4
   15d7c:	pop	{r4, r5, r6, sl, fp, pc}
   15d80:	mvn	r4, #0
   15d84:	cmp	r0, #0
   15d88:	beq	15d94 <__assert_fail@plt+0x4c48>
   15d8c:	mov	r0, r4
   15d90:	pop	{r4, r5, r6, sl, fp, pc}
   15d94:	bl	11044 <__errno_location@plt>
   15d98:	mov	r1, #0
   15d9c:	str	r1, [r0]
   15da0:	mov	r0, r4
   15da4:	pop	{r4, r5, r6, sl, fp, pc}
   15da8:	push	{r4, r5, fp, lr}
   15dac:	add	fp, sp, #8
   15db0:	ldrd	r4, [r0, #16]
   15db4:	mov	r2, r0
   15db8:	mov	r0, #0
   15dbc:	cmp	r5, r4
   15dc0:	pophi	{r4, r5, fp, pc}
   15dc4:	ldr	r3, [r2, #4]
   15dc8:	ldr	r2, [r2, #8]
   15dcc:	subs	r2, r2, r3
   15dd0:	movne	r0, r3
   15dd4:	strne	r2, [r1]
   15dd8:	pop	{r4, r5, fp, pc}
   15ddc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15de0:	add	fp, sp, #24
   15de4:	sub	sp, sp, #8
   15de8:	sub	sp, sp, #4096	; 0x1000
   15dec:	mov	r8, #0
   15df0:	cmp	r1, #0
   15df4:	beq	15f0c <__assert_fail@plt+0x4dc0>
   15df8:	mov	r6, r1
   15dfc:	mov	r5, r0
   15e00:	bl	15ff0 <__assert_fail@plt+0x4ea4>
   15e04:	mov	r7, r0
   15e08:	add	r4, sp, #8
   15e0c:	cmp	r7, #0
   15e10:	beq	15e74 <__assert_fail@plt+0x4d28>
   15e14:	mov	r0, r5
   15e18:	mov	r1, r4
   15e1c:	bl	15da8 <__assert_fail@plt+0x4c5c>
   15e20:	cmp	r0, #0
   15e24:	ldrne	r0, [sp, #8]
   15e28:	cmpne	r0, #0
   15e2c:	beq	15e54 <__assert_fail@plt+0x4d08>
   15e30:	ldr	r1, [r5, #4]
   15e34:	cmp	r0, r6
   15e38:	movcs	r0, r6
   15e3c:	subs	r6, r6, r0
   15e40:	add	r1, r1, r0
   15e44:	str	r1, [r5, #4]
   15e48:	beq	15f0c <__assert_fail@plt+0x4dc0>
   15e4c:	subs	r7, r7, r0
   15e50:	beq	15e74 <__assert_fail@plt+0x4d28>
   15e54:	mov	r0, r5
   15e58:	bl	11068 <fgetc@plt>
   15e5c:	cmn	r0, #1
   15e60:	beq	15ef8 <__assert_fail@plt+0x4dac>
   15e64:	sub	r7, r7, #1
   15e68:	subs	r6, r6, #1
   15e6c:	bne	15e0c <__assert_fail@plt+0x4cc0>
   15e70:	b	15f0c <__assert_fail@plt+0x4dc0>
   15e74:	mov	r0, r5
   15e78:	bl	11080 <fileno@plt>
   15e7c:	cmp	r0, #0
   15e80:	bmi	15ebc <__assert_fail@plt+0x4d70>
   15e84:	mov	r4, #1
   15e88:	mov	r2, #0
   15e8c:	mov	r3, #0
   15e90:	str	r4, [sp]
   15e94:	bl	10f84 <lseek64@plt>
   15e98:	cmp	r1, #0
   15e9c:	bmi	15ebc <__assert_fail@plt+0x4d70>
   15ea0:	mov	r0, r5
   15ea4:	mov	r2, r6
   15ea8:	mov	r3, #0
   15eac:	str	r4, [sp]
   15eb0:	bl	12dac <__assert_fail@plt+0x1c60>
   15eb4:	mov	r8, r0
   15eb8:	b	15f0c <__assert_fail@plt+0x4dc0>
   15ebc:	add	r4, sp, #8
   15ec0:	cmp	r6, #4096	; 0x1000
   15ec4:	mov	r7, r6
   15ec8:	mov	r0, r4
   15ecc:	mov	r1, #1
   15ed0:	mov	r3, r5
   15ed4:	movcs	r7, #4096	; 0x1000
   15ed8:	mov	r2, r7
   15edc:	bl	10f9c <fread@plt>
   15ee0:	cmp	r0, r7
   15ee4:	subcs	r6, r6, r7
   15ee8:	bcc	15ef8 <__assert_fail@plt+0x4dac>
   15eec:	cmp	r6, #0
   15ef0:	bne	15ec0 <__assert_fail@plt+0x4d74>
   15ef4:	b	15f0c <__assert_fail@plt+0x4dc0>
   15ef8:	mov	r0, r5
   15efc:	bl	10f0c <ferror@plt>
   15f00:	cmp	r0, #0
   15f04:	mov	r8, r0
   15f08:	mvnne	r8, #0
   15f0c:	mov	r0, r8
   15f10:	sub	sp, fp, #24
   15f14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f18:	push	{fp, lr}
   15f1c:	mov	fp, sp
   15f20:	mov	r0, #14
   15f24:	bl	110ec <nl_langinfo@plt>
   15f28:	movw	r1, #27339	; 0x6acb
   15f2c:	cmp	r0, #0
   15f30:	movt	r1, #1
   15f34:	movne	r1, r0
   15f38:	movw	r0, #29181	; 0x71fd
   15f3c:	ldrb	r2, [r1]
   15f40:	movt	r0, #1
   15f44:	cmp	r2, #0
   15f48:	movne	r0, r1
   15f4c:	pop	{fp, pc}
   15f50:	push	{r4, r5, r6, r7, fp, lr}
   15f54:	add	fp, sp, #16
   15f58:	sub	sp, sp, #8
   15f5c:	cmp	r0, #0
   15f60:	add	r5, sp, #4
   15f64:	mov	r7, r2
   15f68:	mov	r4, r1
   15f6c:	movne	r5, r0
   15f70:	mov	r0, r5
   15f74:	bl	10fb4 <mbrtowc@plt>
   15f78:	mov	r6, r0
   15f7c:	cmp	r7, #0
   15f80:	beq	15fa8 <__assert_fail@plt+0x4e5c>
   15f84:	cmn	r6, #2
   15f88:	bcc	15fa8 <__assert_fail@plt+0x4e5c>
   15f8c:	mov	r0, #0
   15f90:	bl	16030 <__assert_fail@plt+0x4ee4>
   15f94:	cmp	r0, #0
   15f98:	bne	15fa8 <__assert_fail@plt+0x4e5c>
   15f9c:	ldrb	r0, [r4]
   15fa0:	mov	r6, #1
   15fa4:	str	r0, [r5]
   15fa8:	mov	r0, r6
   15fac:	sub	sp, fp, #16
   15fb0:	pop	{r4, r5, r6, r7, fp, pc}
   15fb4:	cmp	r2, #0
   15fb8:	beq	15fe8 <__assert_fail@plt+0x4e9c>
   15fbc:	mvn	r3, #0
   15fc0:	udiv	r3, r3, r2
   15fc4:	cmp	r3, r1
   15fc8:	bcs	15fe8 <__assert_fail@plt+0x4e9c>
   15fcc:	push	{fp, lr}
   15fd0:	mov	fp, sp
   15fd4:	bl	11044 <__errno_location@plt>
   15fd8:	mov	r1, #12
   15fdc:	str	r1, [r0]
   15fe0:	mov	r0, #0
   15fe4:	pop	{fp, pc}
   15fe8:	mul	r1, r2, r1
   15fec:	b	15cd0 <__assert_fail@plt+0x4b84>
   15ff0:	ldrd	r2, [r0, #16]
   15ff4:	mov	r1, #0
   15ff8:	cmp	r3, r2
   15ffc:	bhi	16028 <__assert_fail@plt+0x4edc>
   16000:	ldrb	r3, [r0, #1]
   16004:	ldmib	r0, {r1, r2}
   16008:	sub	r1, r2, r1
   1600c:	mov	r2, #0
   16010:	tst	r3, #1
   16014:	beq	16024 <__assert_fail@plt+0x4ed8>
   16018:	ldr	r2, [r0, #36]	; 0x24
   1601c:	ldr	r0, [r0, #44]	; 0x2c
   16020:	sub	r2, r0, r2
   16024:	add	r1, r1, r2
   16028:	mov	r0, r1
   1602c:	bx	lr
   16030:	push	{r4, sl, fp, lr}
   16034:	add	fp, sp, #8
   16038:	sub	sp, sp, #264	; 0x108
   1603c:	add	r1, sp, #7
   16040:	movw	r2, #257	; 0x101
   16044:	bl	1609c <__assert_fail@plt+0x4f50>
   16048:	mov	r4, #0
   1604c:	cmp	r0, #0
   16050:	bne	16090 <__assert_fail@plt+0x4f44>
   16054:	movw	r1, #29187	; 0x7203
   16058:	add	r0, sp, #7
   1605c:	mov	r2, #2
   16060:	movt	r1, #1
   16064:	bl	11020 <bcmp@plt>
   16068:	cmp	r0, #0
   1606c:	beq	16090 <__assert_fail@plt+0x4f44>
   16070:	movw	r1, #29189	; 0x7205
   16074:	add	r0, sp, #7
   16078:	mov	r2, #6
   1607c:	movt	r1, #1
   16080:	bl	11020 <bcmp@plt>
   16084:	cmp	r0, #0
   16088:	mov	r4, r0
   1608c:	movwne	r4, #1
   16090:	mov	r0, r4
   16094:	sub	sp, fp, #8
   16098:	pop	{r4, sl, fp, pc}
   1609c:	push	{r4, r5, r6, r7, fp, lr}
   160a0:	add	fp, sp, #16
   160a4:	mov	r4, r1
   160a8:	mov	r1, #0
   160ac:	mov	r6, r2
   160b0:	bl	110d4 <setlocale@plt>
   160b4:	cmp	r0, #0
   160b8:	beq	160e8 <__assert_fail@plt+0x4f9c>
   160bc:	mov	r7, r0
   160c0:	bl	1102c <strlen@plt>
   160c4:	cmp	r0, r6
   160c8:	bcs	16104 <__assert_fail@plt+0x4fb8>
   160cc:	add	r2, r0, #1
   160d0:	mov	r0, r4
   160d4:	mov	r1, r7
   160d8:	bl	10f24 <memcpy@plt>
   160dc:	mov	r5, #0
   160e0:	mov	r0, r5
   160e4:	pop	{r4, r5, r6, r7, fp, pc}
   160e8:	mov	r5, #22
   160ec:	cmp	r6, #0
   160f0:	beq	1612c <__assert_fail@plt+0x4fe0>
   160f4:	mov	r0, #0
   160f8:	strb	r0, [r4]
   160fc:	mov	r0, r5
   16100:	pop	{r4, r5, r6, r7, fp, pc}
   16104:	mov	r5, #34	; 0x22
   16108:	cmp	r6, #0
   1610c:	beq	1612c <__assert_fail@plt+0x4fe0>
   16110:	sub	r6, r6, #1
   16114:	mov	r0, r4
   16118:	mov	r1, r7
   1611c:	mov	r2, r6
   16120:	bl	10f24 <memcpy@plt>
   16124:	mov	r0, #0
   16128:	strb	r0, [r4, r6]
   1612c:	mov	r0, r5
   16130:	pop	{r4, r5, r6, r7, fp, pc}
   16134:	mov	r1, #0
   16138:	b	110d4 <setlocale@plt>
   1613c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16140:	mov	r7, r0
   16144:	ldr	r6, [pc, #72]	; 16194 <__assert_fail@plt+0x5048>
   16148:	ldr	r5, [pc, #72]	; 16198 <__assert_fail@plt+0x504c>
   1614c:	add	r6, pc, r6
   16150:	add	r5, pc, r5
   16154:	sub	r6, r6, r5
   16158:	mov	r8, r1
   1615c:	mov	r9, r2
   16160:	bl	10e98 <calloc@plt-0x20>
   16164:	asrs	r6, r6, #2
   16168:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1616c:	mov	r4, #0
   16170:	add	r4, r4, #1
   16174:	ldr	r3, [r5], #4
   16178:	mov	r2, r9
   1617c:	mov	r1, r8
   16180:	mov	r0, r7
   16184:	blx	r3
   16188:	cmp	r6, r4
   1618c:	bne	16170 <__assert_fail@plt+0x5024>
   16190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16194:			; <UNDEFINED> instruction: 0x00011db8
   16198:			; <UNDEFINED> instruction: 0x00011db0
   1619c:	bx	lr
   161a0:	ldr	r3, [pc, #12]	; 161b4 <__assert_fail@plt+0x5068>
   161a4:	mov	r1, #0
   161a8:	add	r3, pc, r3
   161ac:	ldr	r2, [r3]
   161b0:	b	11050 <__cxa_atexit@plt>
   161b4:	andeq	r1, r1, r4, asr #30

Disassembly of section .fini:

000161b8 <.fini>:
   161b8:	push	{r3, lr}
   161bc:	pop	{r3, pc}
