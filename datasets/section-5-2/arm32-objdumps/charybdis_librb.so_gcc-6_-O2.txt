
../repos/charybdis/librb/src/.libs/librb.so:     file format elf32-littlearm


Disassembly of section .init:

00004344 <_init>:
    4344:	push	{r3, lr}
    4348:	bl	4d28 <call_weak_fn>
    434c:	pop	{r3, pc}

Disassembly of section .plt:

00004350 <.plt>:
    4350:	push	{lr}		; (str lr, [sp, #-4]!)
    4354:	ldr	lr, [pc, #4]	; 4360 <.plt+0x10>
    4358:	add	lr, pc, lr
    435c:	ldr	pc, [lr, #8]!
    4360:	.word	0x00023ca0

00004364 <rb_helper_run@plt>:
    4364:	add	ip, pc, #0, 12
    4368:	add	ip, ip, #143360	; 0x23000
    436c:	ldr	pc, [ip, #3232]!	; 0xca0

00004370 <TLS_method@plt>:
    4370:	add	ip, pc, #0, 12
    4374:	add	ip, ip, #143360	; 0x23000
    4378:	ldr	pc, [ip, #3224]!	; 0xc98

0000437c <open@plt>:
    437c:	add	ip, pc, #0, 12
    4380:	add	ip, ip, #143360	; 0x23000
    4384:	ldr	pc, [ip, #3216]!	; 0xc90

00004388 <rb_init_netio@plt>:
    4388:	add	ip, pc, #0, 12
    438c:	add	ip, ip, #143360	; 0x23000
    4390:	ldr	pc, [ip, #3208]!	; 0xc88

00004394 <sigemptyset@plt>:
    4394:	add	ip, pc, #0, 12
    4398:	add	ip, ip, #143360	; 0x23000
    439c:	ldr	pc, [ip, #3200]!	; 0xc80

000043a0 <strerror@plt>:
    43a0:	add	ip, pc, #0, 12
    43a4:	add	ip, ip, #143360	; 0x23000
    43a8:	ldr	pc, [ip, #3192]!	; 0xc78

000043ac <rb_radixtree_elem_delete@plt>:
    43ac:	add	ip, pc, #0, 12
    43b0:	add	ip, ip, #143360	; 0x23000
    43b4:	ldr	pc, [ip, #3184]!	; 0xc70

000043b8 <getdtablesize@plt>:
    43b8:	add	ip, pc, #0, 12
    43bc:	add	ip, ip, #143360	; 0x23000
    43c0:	ldr	pc, [ip, #3176]!	; 0xc68

000043c4 <abort@plt>:
    43c4:	add	ip, pc, #0, 12
    43c8:	add	ip, ip, #143360	; 0x23000
    43cc:	ldr	pc, [ip, #3168]!	; 0xc60

000043d0 <connect@plt>:
    43d0:	add	ip, pc, #0, 12
    43d4:	add	ip, ip, #143360	; 0x23000
    43d8:	ldr	pc, [ip, #3160]!	; 0xc58

000043dc <rb_ignore_errno@plt>:
    43dc:	add	ip, pc, #0, 12
    43e0:	add	ip, ip, #143360	; 0x23000
    43e4:	ldr	pc, [ip, #3152]!	; 0xc50

000043e8 <rb_settimeout@plt>:
    43e8:	add	ip, pc, #0, 12
    43ec:	add	ip, ip, #143360	; 0x23000
    43f0:	ldr	pc, [ip, #3144]!	; 0xc48

000043f4 <SSL_CTX_set_cipher_list@plt>:
    43f4:	add	ip, pc, #0, 12
    43f8:	add	ip, ip, #143360	; 0x23000
    43fc:	ldr	pc, [ip, #3136]!	; 0xc40

00004400 <ERR_get_error@plt>:
    4400:	add	ip, pc, #0, 12
    4404:	add	ip, ip, #143360	; 0x23000
    4408:	ldr	pc, [ip, #3128]!	; 0xc38

0000440c <rb_radixtree_foreach_start@plt>:
    440c:	add	ip, pc, #0, 12
    4410:	add	ip, ip, #143360	; 0x23000
    4414:	ldr	pc, [ip, #3120]!	; 0xc30

00004418 <strcasestr@plt>:
    4418:	add	ip, pc, #0, 12
    441c:	add	ip, ip, #143360	; 0x23000
    4420:	ldr	pc, [ip, #3112]!	; 0xc28

00004424 <rb_connect_tcp@plt>:
    4424:	add	ip, pc, #0, 12
    4428:	add	ip, ip, #143360	; 0x23000
    442c:	ldr	pc, [ip, #3104]!	; 0xc20

00004430 <RAND_load_file@plt>:
    4430:	add	ip, pc, #0, 12
    4434:	add	ip, ip, #143360	; 0x23000
    4438:	ldr	pc, [ip, #3096]!	; 0xc18

0000443c <signalfd@plt>:
    443c:	add	ip, pc, #0, 12
    4440:	add	ip, ip, #143360	; 0x23000
    4444:	ldr	pc, [ip, #3088]!	; 0xc10

00004448 <rb_radixtree_foreach_next@plt>:
    4448:	add	ip, pc, #0, 12
    444c:	add	ip, ip, #143360	; 0x23000
    4450:	ldr	pc, [ip, #3080]!	; 0xc08

00004454 <memcmp@plt>:
    4454:	add	ip, pc, #0, 12
    4458:	add	ip, ip, #143360	; 0x23000
    445c:	ldr	pc, [ip, #3072]!	; 0xc00

00004460 <SSL_CTX_free@plt>:
    4460:	add	ip, pc, #0, 12
    4464:	add	ip, ip, #143360	; 0x23000
    4468:	ldr	pc, [ip, #3064]!	; 0xbf8

0000446c <rb_getmaxconnect@plt>:
    446c:	add	ip, pc, #0, 12
    4470:	add	ip, ip, #143360	; 0x23000
    4474:	ldr	pc, [ip, #3056]!	; 0xbf0

00004478 <sigwaitinfo@plt>:
    4478:	add	ip, pc, #0, 12
    447c:	add	ip, ip, #143360	; 0x23000
    4480:	ldr	pc, [ip, #3048]!	; 0xbe8

00004484 <__libc_current_sigrtmin@plt>:
    4484:	add	ip, pc, #0, 12
    4488:	add	ip, ip, #143360	; 0x23000
    448c:	ldr	pc, [ip, #3040]!	; 0xbe0

00004490 <__xstat@plt>:
    4490:	add	ip, pc, #0, 12
    4494:	add	ip, ip, #143360	; 0x23000
    4498:	ldr	pc, [ip, #3032]!	; 0xbd8

0000449c <rb_event_delete@plt>:
    449c:	add	ip, pc, #0, 12
    44a0:	add	ip, ip, #143360	; 0x23000
    44a4:	ldr	pc, [ip, #3024]!	; 0xbd0

000044a8 <rb_setselect@plt>:
    44a8:	add	ip, pc, #0, 12
    44ac:	add	ip, ip, #143360	; 0x23000
    44b0:	ldr	pc, [ip, #3016]!	; 0xbc8

000044b4 <rb_fd_ssl@plt>:
    44b4:	add	ip, pc, #0, 12
    44b8:	add	ip, ip, #143360	; 0x23000
    44bc:	ldr	pc, [ip, #3008]!	; 0xbc0

000044c0 <sigtimedwait@plt>:
    44c0:	add	ip, pc, #0, 12
    44c4:	add	ip, ip, #143360	; 0x23000
    44c8:	ldr	pc, [ip, #3000]!	; 0xbb8

000044cc <rb_setenv@plt>:
    44cc:	add	ip, pc, #0, 12
    44d0:	add	ip, ip, #143360	; 0x23000
    44d4:	ldr	pc, [ip, #2992]!	; 0xbb0

000044d8 <signal@plt>:
    44d8:	add	ip, pc, #0, 12
    44dc:	add	ip, ip, #143360	; 0x23000
    44e0:	ldr	pc, [ip, #2984]!	; 0xba8

000044e4 <rb_get_fd@plt>:
    44e4:	add	ip, pc, #0, 12
    44e8:	add	ip, ip, #143360	; 0x23000
    44ec:	ldr	pc, [ip, #2976]!	; 0xba0

000044f0 <epoll_create@plt>:
    44f0:	add	ip, pc, #0, 12
    44f4:	add	ip, ip, #143360	; 0x23000
    44f8:	ldr	pc, [ip, #2968]!	; 0xb98

000044fc <rb_clear_patricia@plt>:
    44fc:	add	ip, pc, #0, 12
    4500:	add	ip, ip, #143360	; 0x23000
    4504:	ldr	pc, [ip, #2960]!	; 0xb90

00004508 <__gmon_start__@plt>:
    4508:	add	ip, pc, #0, 12
    450c:	add	ip, ip, #143360	; 0x23000
    4510:	ldr	pc, [ip, #2952]!	; 0xb88

00004514 <SSL_CTX_clear_options@plt>:
    4514:	add	ip, pc, #0, 12
    4518:	add	ip, ip, #143360	; 0x23000
    451c:	ldr	pc, [ip, #2944]!	; 0xb80

00004520 <SSL_get_current_cipher@plt>:
    4520:	add	ip, pc, #0, 12
    4524:	add	ip, ip, #143360	; 0x23000
    4528:	ldr	pc, [ip, #2936]!	; 0xb78

0000452c <timer_create@plt>:
    452c:	add	ip, pc, #0, 12
    4530:	add	ip, ip, #143360	; 0x23000
    4534:	ldr	pc, [ip, #2928]!	; 0xb70

00004538 <X509_get_X509_PUBKEY@plt>:
    4538:	add	ip, pc, #0, 12
    453c:	add	ip, ip, #143360	; 0x23000
    4540:	ldr	pc, [ip, #2920]!	; 0xb68

00004544 <rb_select@plt>:
    4544:	add	ip, pc, #0, 12
    4548:	add	ip, ip, #143360	; 0x23000
    454c:	ldr	pc, [ip, #2912]!	; 0xb60

00004550 <rb_patricia_search_best@plt>:
    4550:	add	ip, pc, #0, 12
    4554:	add	ip, ip, #143360	; 0x23000
    4558:	ldr	pc, [ip, #2904]!	; 0xb58

0000455c <vsnprintf@plt>:
    455c:	add	ip, pc, #0, 12
    4560:	add	ip, ip, #143360	; 0x23000
    4564:	ldr	pc, [ip, #2896]!	; 0xb50

00004568 <socketpair@plt>:
    4568:	add	ip, pc, #0, 12
    456c:	add	ip, ip, #143360	; 0x23000
    4570:	ldr	pc, [ip, #2888]!	; 0xb48

00004574 <strncpy@plt>:
    4574:	add	ip, pc, #0, 12
    4578:	add	ip, ip, #143360	; 0x23000
    457c:	ldr	pc, [ip, #2880]!	; 0xb40

00004580 <fclose@plt>:
    4580:	add	ip, pc, #0, 12
    4584:	add	ip, ip, #143360	; 0x23000
    4588:	ldr	pc, [ip, #2872]!	; 0xb38

0000458c <recv@plt>:
    458c:	add	ip, pc, #0, 12
    4590:	add	ip, ip, #143360	; 0x23000
    4594:	ldr	pc, [ip, #2864]!	; 0xb30

00004598 <getenv@plt>:
    4598:	add	ip, pc, #0, 12
    459c:	add	ip, ip, #143360	; 0x23000
    45a0:	ldr	pc, [ip, #2856]!	; 0xb28

000045a4 <ERR_error_string_n@plt>:
    45a4:	add	ip, pc, #0, 12
    45a8:	add	ip, ip, #143360	; 0x23000
    45ac:	ldr	pc, [ip, #2848]!	; 0xb20

000045b0 <strchr@plt>:
    45b0:	add	ip, pc, #0, 12
    45b4:	add	ip, ip, #143360	; 0x23000
    45b8:	ldr	pc, [ip, #2840]!	; 0xb18

000045bc <rb_gettimeofday@plt>:
    45bc:	add	ip, pc, #0, 12
    45c0:	add	ip, ip, #143360	; 0x23000
    45c4:	ldr	pc, [ip, #2832]!	; 0xb10

000045c8 <strcasecmp@plt>:
    45c8:	add	ip, pc, #0, 12
    45cc:	add	ip, ip, #143360	; 0x23000
    45d0:	ldr	pc, [ip, #2824]!	; 0xb08

000045d4 <rb_helper_restart@plt>:
    45d4:	add	ip, pc, #0, 12
    45d8:	add	ip, ip, #143360	; 0x23000
    45dc:	ldr	pc, [ip, #2816]!	; 0xb00

000045e0 <listen@plt>:
    45e0:	add	ip, pc, #0, 12
    45e4:	add	ip, ip, #143360	; 0x23000
    45e8:	ldr	pc, [ip, #2808]!	; 0xaf8

000045ec <calloc@plt>:
    45ec:	add	ip, pc, #0, 12
    45f0:	add	ip, ip, #143360	; 0x23000
    45f4:	ldr	pc, [ip, #2800]!	; 0xaf0

000045f8 <SSL_write@plt>:
    45f8:	add	ip, pc, #0, 12
    45fc:	add	ip, ip, #143360	; 0x23000
    4600:	ldr	pc, [ip, #2792]!	; 0xae8

00004604 <rb_event_init@plt>:
    4604:	add	ip, pc, #0, 12
    4608:	add	ip, ip, #143360	; 0x23000
    460c:	ldr	pc, [ip, #2784]!	; 0xae0

00004610 <fopen@plt>:
    4610:	add	ip, pc, #0, 12
    4614:	add	ip, ip, #143360	; 0x23000
    4618:	ldr	pc, [ip, #2776]!	; 0xad8

0000461c <rb_set_nb@plt>:
    461c:	add	ip, pc, #0, 12
    4620:	add	ip, ip, #143360	; 0x23000
    4624:	ldr	pc, [ip, #2768]!	; 0xad0

00004628 <memset@plt>:
    4628:	add	ip, pc, #0, 12
    462c:	add	ip, ip, #143360	; 0x23000
    4630:	ldr	pc, [ip, #2760]!	; 0xac8

00004634 <rb_inet_pton@plt>:
    4634:	add	ip, pc, #0, 12
    4638:	add	ip, ip, #143360	; 0x23000
    463c:	ldr	pc, [ip, #2752]!	; 0xac0

00004640 <rb_radixtree_stats@plt>:
    4640:	add	ip, pc, #0, 12
    4644:	add	ip, ip, #143360	; 0x23000
    4648:	ldr	pc, [ip, #2744]!	; 0xab8

0000464c <strrchr@plt>:
    464c:	add	ip, pc, #0, 12
    4650:	add	ip, ip, #143360	; 0x23000
    4654:	ldr	pc, [ip, #2736]!	; 0xab0

00004658 <rb_write@plt>:
    4658:	add	ip, pc, #0, 12
    465c:	add	ip, ip, #143360	; 0x23000
    4660:	ldr	pc, [ip, #2728]!	; 0xaa8

00004664 <SSL_set_fd@plt>:
    4664:	add	ip, pc, #0, 12
    4668:	add	ip, ip, #143360	; 0x23000
    466c:	ldr	pc, [ip, #2720]!	; 0xaa0

00004670 <SSL_CTX_ctrl@plt>:
    4670:	add	ip, pc, #0, 12
    4674:	add	ip, ip, #143360	; 0x23000
    4678:	ldr	pc, [ip, #2712]!	; 0xa98

0000467c <rb_linebuf_parse@plt>:
    467c:	add	ip, pc, #0, 12
    4680:	add	ip, ip, #143360	; 0x23000
    4684:	ldr	pc, [ip, #2704]!	; 0xa90

00004688 <writev@plt>:
    4688:	add	ip, pc, #0, 12
    468c:	add	ip, ip, #143360	; 0x23000
    4690:	ldr	pc, [ip, #2696]!	; 0xa88

00004694 <rb_fsnprint@plt>:
    4694:	add	ip, pc, #0, 12
    4698:	add	ip, ip, #143360	; 0x23000
    469c:	ldr	pc, [ip, #2688]!	; 0xa80

000046a0 <rb_strlcpy@plt>:
    46a0:	add	ip, pc, #0, 12
    46a4:	add	ip, ip, #143360	; 0x23000
    46a8:	ldr	pc, [ip, #2680]!	; 0xa78

000046ac <rb_patricia_search_best2@plt>:
    46ac:	add	ip, pc, #0, 12
    46b0:	add	ip, ip, #143360	; 0x23000
    46b4:	ldr	pc, [ip, #2672]!	; 0xa70

000046b8 <SSL_CIPHER_get_name@plt>:
    46b8:	add	ip, pc, #0, 12
    46bc:	add	ip, ip, #143360	; 0x23000
    46c0:	ldr	pc, [ip, #2664]!	; 0xa68

000046c4 <posix_spawnattr_init@plt>:
    46c4:	add	ip, pc, #0, 12
    46c8:	add	ip, ip, #143360	; 0x23000
    46cc:	ldr	pc, [ip, #2656]!	; 0xa60

000046d0 <OpenSSL_version_num@plt>:
    46d0:	add	ip, pc, #0, 12
    46d4:	add	ip, ip, #143360	; 0x23000
    46d8:	ldr	pc, [ip, #2648]!	; 0xa58

000046dc <rb_dictionary_foreach_next@plt>:
    46dc:	add	ip, pc, #0, 12
    46e0:	add	ip, ip, #143360	; 0x23000
    46e4:	ldr	pc, [ip, #2640]!	; 0xa50

000046e8 <rb_kill@plt>:
    46e8:	add	ip, pc, #0, 12
    46ec:	add	ip, ip, #143360	; 0x23000
    46f0:	ldr	pc, [ip, #2632]!	; 0xa48

000046f4 <free@plt>:
    46f4:	add	ip, pc, #0, 12
    46f8:	add	ip, ip, #143360	; 0x23000
    46fc:	ldr	pc, [ip, #2624]!	; 0xa40

00004700 <sendmsg@plt>:
    4700:	add	ip, pc, #0, 12
    4704:	add	ip, ip, #143360	; 0x23000
    4708:	ldr	pc, [ip, #2616]!	; 0xa38

0000470c <read@plt>:
    470c:	add	ip, pc, #0, 12
    4710:	add	ip, ip, #143360	; 0x23000
    4714:	ldr	pc, [ip, #2608]!	; 0xa30

00004718 <rb_radixtree_elem_add@plt>:
    4718:	add	ip, pc, #0, 12
    471c:	add	ip, ip, #143360	; 0x23000
    4720:	ldr	pc, [ip, #2600]!	; 0xa28

00004724 <write@plt>:
    4724:	add	ip, pc, #0, 12
    4728:	add	ip, ip, #143360	; 0x23000
    472c:	ldr	pc, [ip, #2592]!	; 0xa20

00004730 <SSL_new@plt>:
    4730:	add	ip, pc, #0, 12
    4734:	add	ip, ip, #143360	; 0x23000
    4738:	ldr	pc, [ip, #2584]!	; 0xa18

0000473c <access@plt>:
    473c:	add	ip, pc, #0, 12
    4740:	add	ip, ip, #143360	; 0x23000
    4744:	ldr	pc, [ip, #2576]!	; 0xa10

00004748 <rb_lib_loop@plt>:
    4748:	add	ip, pc, #0, 12
    474c:	add	ip, ip, #143360	; 0x23000
    4750:	ldr	pc, [ip, #2568]!	; 0xa08

00004754 <timer_settime@plt>:
    4754:	add	ip, pc, #0, 12
    4758:	add	ip, ip, #143360	; 0x23000
    475c:	ldr	pc, [ip, #2560]!	; 0xa00

00004760 <gettimeofday@plt>:
    4760:	add	ip, pc, #0, 12
    4764:	add	ip, ip, #143360	; 0x23000
    4768:	ldr	pc, [ip, #2552]!	; 0x9f8

0000476c <accept@plt>:
    476c:	add	ip, pc, #0, 12
    4770:	add	ip, ip, #143360	; 0x23000
    4774:	ldr	pc, [ip, #2544]!	; 0x9f0

00004778 <SSL_read@plt>:
    4778:	add	ip, pc, #0, 12
    477c:	add	ip, ip, #143360	; 0x23000
    4780:	ldr	pc, [ip, #2536]!	; 0x9e8

00004784 <rb_read@plt>:
    4784:	add	ip, pc, #0, 12
    4788:	add	ip, ip, #143360	; 0x23000
    478c:	ldr	pc, [ip, #2528]!	; 0x9e0

00004790 <socket@plt>:
    4790:	add	ip, pc, #0, 12
    4794:	add	ip, ip, #143360	; 0x23000
    4798:	ldr	pc, [ip, #2520]!	; 0x9d8

0000479c <rb_linebuf_get@plt>:
    479c:	add	ip, pc, #0, 12
    47a0:	add	ip, ip, #143360	; 0x23000
    47a4:	ldr	pc, [ip, #2512]!	; 0x9d0

000047a8 <rb_radixtree_foreach_cur@plt>:
    47a8:	add	ip, pc, #0, 12
    47ac:	add	ip, ip, #143360	; 0x23000
    47b0:	ldr	pc, [ip, #2504]!	; 0x9c8

000047b4 <epoll_wait@plt>:
    47b4:	add	ip, pc, #0, 12
    47b8:	add	ip, ip, #143360	; 0x23000
    47bc:	ldr	pc, [ip, #2496]!	; 0x9c0

000047c0 <SSL_do_handshake@plt>:
    47c0:	add	ip, pc, #0, 12
    47c4:	add	ip, ip, #143360	; 0x23000
    47c8:	ldr	pc, [ip, #2488]!	; 0x9b8

000047cc <rb_linebuf_flush@plt>:
    47cc:	add	ip, pc, #0, 12
    47d0:	add	ip, ip, #143360	; 0x23000
    47d4:	ldr	pc, [ip, #2480]!	; 0x9b0

000047d8 <posix_spawn@plt>:
    47d8:	add	ip, pc, #0, 12
    47dc:	add	ip, ip, #143360	; 0x23000
    47e0:	ldr	pc, [ip, #2472]!	; 0x9a8

000047e4 <strlen@plt>:
    47e4:	add	ip, pc, #0, 12
    47e8:	add	ip, ip, #143360	; 0x23000
    47ec:	ldr	pc, [ip, #2464]!	; 0x9a0

000047f0 <rb_current_time@plt>:
    47f0:	add	ip, pc, #0, 12
    47f4:	add	ip, ip, #143360	; 0x23000
    47f8:	ldr	pc, [ip, #2456]!	; 0x998

000047fc <strtoul@plt>:
    47fc:	add	ip, pc, #0, 12
    4800:	add	ip, ip, #143360	; 0x23000
    4804:	ldr	pc, [ip, #2448]!	; 0x990

00004808 <memcpy@plt>:
    4808:	add	ip, pc, #0, 12
    480c:	add	ip, ip, #143360	; 0x23000
    4810:	ldr	pc, [ip, #2440]!	; 0x988

00004814 <PEM_read_X509@plt>:
    4814:	add	ip, pc, #0, 12
    4818:	add	ip, ip, #143360	; 0x23000
    481c:	ldr	pc, [ip, #2432]!	; 0x980

00004820 <posix_spawnattr_setflags@plt>:
    4820:	add	ip, pc, #0, 12
    4824:	add	ip, ip, #143360	; 0x23000
    4828:	ldr	pc, [ip, #2424]!	; 0x978

0000482c <__ctype_tolower_loc@plt>:
    482c:	add	ip, pc, #0, 12
    4830:	add	ip, ip, #143360	; 0x23000
    4834:	ldr	pc, [ip, #2416]!	; 0x970

00004838 <SSL_CTX_use_certificate_chain_file@plt>:
    4838:	add	ip, pc, #0, 12
    483c:	add	ip, ip, #143360	; 0x23000
    4840:	ldr	pc, [ip, #2408]!	; 0x968

00004844 <rb_free_rb_dlink_node@plt>:
    4844:	add	ip, pc, #0, 12
    4848:	add	ip, ip, #143360	; 0x23000
    484c:	ldr	pc, [ip, #2400]!	; 0x960

00004850 <SSL_CTX_set_options@plt>:
    4850:	add	ip, pc, #0, 12
    4854:	add	ip, ip, #143360	; 0x23000
    4858:	ldr	pc, [ip, #2392]!	; 0x958

0000485c <posix_spawnattr_destroy@plt>:
    485c:	add	ip, pc, #0, 12
    4860:	add	ip, ip, #143360	; 0x23000
    4864:	ldr	pc, [ip, #2384]!	; 0x950

00004868 <rb_close@plt>:
    4868:	add	ip, pc, #0, 12
    486c:	add	ip, ip, #143360	; 0x23000
    4870:	ldr	pc, [ip, #2376]!	; 0x948

00004874 <strtol@plt>:
    4874:	add	ip, pc, #0, 12
    4878:	add	ip, ip, #143360	; 0x23000
    487c:	ldr	pc, [ip, #2368]!	; 0x940

00004880 <sigaddset@plt>:
    4880:	add	ip, pc, #0, 12
    4884:	add	ip, ip, #143360	; 0x23000
    4888:	ldr	pc, [ip, #2360]!	; 0x938

0000488c <strcpy@plt>:
    488c:	add	ip, pc, #0, 12
    4890:	add	ip, ip, #143360	; 0x23000
    4894:	ldr	pc, [ip, #2352]!	; 0x930

00004898 <waitpid@plt>:
    4898:	add	ip, pc, #0, 12
    489c:	add	ip, ip, #143360	; 0x23000
    48a0:	ldr	pc, [ip, #2344]!	; 0x928

000048a4 <rb_run_one_event@plt>:
    48a4:	add	ip, pc, #0, 12
    48a8:	add	ip, ip, #143360	; 0x23000
    48ac:	ldr	pc, [ip, #2336]!	; 0x920

000048b0 <rb_patricia_search_exact@plt>:
    48b0:	add	ip, pc, #0, 12
    48b4:	add	ip, ip, #143360	; 0x23000
    48b8:	ldr	pc, [ip, #2328]!	; 0x918

000048bc <strncat@plt>:
    48bc:	add	ip, pc, #0, 12
    48c0:	add	ip, ip, #143360	; 0x23000
    48c4:	ldr	pc, [ip, #2320]!	; 0x910

000048c8 <rb_bh_free@plt>:
    48c8:	add	ip, pc, #0, 12
    48cc:	add	ip, ip, #143360	; 0x23000
    48d0:	ldr	pc, [ip, #2312]!	; 0x908

000048d4 <rb_init_rb_dlink_nodes@plt>:
    48d4:	add	ip, pc, #0, 12
    48d8:	add	ip, ip, #143360	; 0x23000
    48dc:	ldr	pc, [ip, #2304]!	; 0x900

000048e0 <raise@plt>:
    48e0:	add	ip, pc, #0, 12
    48e4:	add	ip, ip, #143360	; 0x23000
    48e8:	ldr	pc, [ip, #2296]!	; 0x8f8

000048ec <EVP_sha1@plt>:
    48ec:	add	ip, pc, #0, 12
    48f0:	add	ip, ip, #143360	; 0x23000
    48f4:	ldr	pc, [ip, #2288]!	; 0x8f0

000048f8 <rb_patricia_lookup@plt>:
    48f8:	add	ip, pc, #0, 12
    48fc:	add	ip, ip, #143360	; 0x23000
    4900:	ldr	pc, [ip, #2280]!	; 0x8e8

00004904 <shutdown@plt>:
    4904:	add	ip, pc, #0, 12
    4908:	add	ip, ip, #143360	; 0x23000
    490c:	ldr	pc, [ip, #2272]!	; 0x8e0

00004910 <bind@plt>:
    4910:	add	ip, pc, #0, 12
    4914:	add	ip, ip, #143360	; 0x23000
    4918:	ldr	pc, [ip, #2264]!	; 0x8d8

0000491c <rb_lib_log@plt>:
    491c:	add	ip, pc, #0, 12
    4920:	add	ip, ip, #143360	; 0x23000
    4924:	ldr	pc, [ip, #2256]!	; 0x8d0

00004928 <SSL_CTX_use_PrivateKey_file@plt>:
    4928:	add	ip, pc, #0, 12
    492c:	add	ip, ip, #143360	; 0x23000
    4930:	ldr	pc, [ip, #2248]!	; 0x8c8

00004934 <select@plt>:
    4934:	add	ip, pc, #0, 12
    4938:	add	ip, ip, #143360	; 0x23000
    493c:	ldr	pc, [ip, #2240]!	; 0x8c0

00004940 <close@plt>:
    4940:	add	ip, pc, #0, 12
    4944:	add	ip, ip, #143360	; 0x23000
    4948:	ldr	pc, [ip, #2232]!	; 0x8b8

0000494c <rb_inet_ntop@plt>:
    494c:	add	ip, pc, #0, 12
    4950:	add	ip, ip, #143360	; 0x23000
    4954:	ldr	pc, [ip, #2224]!	; 0x8b0

00004958 <rb_bh_alloc@plt>:
    4958:	add	ip, pc, #0, 12
    495c:	add	ip, ip, #143360	; 0x23000
    4960:	ldr	pc, [ip, #2216]!	; 0x8a8

00004964 <SSL_free@plt>:
    4964:	add	ip, pc, #0, 12
    4968:	add	ip, ip, #143360	; 0x23000
    496c:	ldr	pc, [ip, #2208]!	; 0x8a0

00004970 <rb_pipe@plt>:
    4970:	add	ip, pc, #0, 12
    4974:	add	ip, ip, #143360	; 0x23000
    4978:	ldr	pc, [ip, #2200]!	; 0x898

0000497c <strncasecmp@plt>:
    497c:	add	ip, pc, #0, 12
    4980:	add	ip, ip, #143360	; 0x23000
    4984:	ldr	pc, [ip, #2192]!	; 0x890

00004988 <rb_outofmemory@plt>:
    4988:	add	ip, pc, #0, 12
    498c:	add	ip, ip, #143360	; 0x23000
    4990:	ldr	pc, [ip, #2184]!	; 0x888

00004994 <rb_set_time@plt>:
    4994:	add	ip, pc, #0, 12
    4998:	add	ip, ip, #143360	; 0x23000
    499c:	ldr	pc, [ip, #2176]!	; 0x880

000049a0 <rb_dictionary_stats@plt>:
    49a0:	add	ip, pc, #0, 12
    49a4:	add	ip, ip, #143360	; 0x23000
    49a8:	ldr	pc, [ip, #2168]!	; 0x878

000049ac <malloc@plt>:
    49ac:	add	ip, pc, #0, 12
    49b0:	add	ip, ip, #143360	; 0x23000
    49b4:	ldr	pc, [ip, #2160]!	; 0x870

000049b8 <sigprocmask@plt>:
    49b8:	add	ip, pc, #0, 12
    49bc:	add	ip, ip, #143360	; 0x23000
    49c0:	ldr	pc, [ip, #2152]!	; 0x868

000049c4 <rb_event_run@plt>:
    49c4:	add	ip, pc, #0, 12
    49c8:	add	ip, ip, #143360	; 0x23000
    49cc:	ldr	pc, [ip, #2144]!	; 0x860

000049d0 <SSL_set_accept_state@plt>:
    49d0:	add	ip, pc, #0, 12
    49d4:	add	ip, ip, #143360	; 0x23000
    49d8:	ldr	pc, [ip, #2136]!	; 0x858

000049dc <rb_init_bh@plt>:
    49dc:	add	ip, pc, #0, 12
    49e0:	add	ip, ip, #143360	; 0x23000
    49e4:	ldr	pc, [ip, #2128]!	; 0x850

000049e8 <PEM_read_DHparams@plt>:
    49e8:	add	ip, pc, #0, 12
    49ec:	add	ip, ip, #143360	; 0x23000
    49f0:	ldr	pc, [ip, #2120]!	; 0x848

000049f4 <gmtime_r@plt>:
    49f4:	add	ip, pc, #0, 12
    49f8:	add	ip, ip, #143360	; 0x23000
    49fc:	ldr	pc, [ip, #2112]!	; 0x840

00004a00 <poll@plt>:
    4a00:	add	ip, pc, #0, 12
    4a04:	add	ip, ip, #143360	; 0x23000
    4a08:	ldr	pc, [ip, #2104]!	; 0x838

00004a0c <ASN1_item_digest@plt>:
    4a0c:	add	ip, pc, #0, 12
    4a10:	add	ip, ip, #143360	; 0x23000
    4a14:	ldr	pc, [ip, #2096]!	; 0x830

00004a18 <strnlen@plt>:
    4a18:	add	ip, pc, #0, 12
    4a1c:	add	ip, ip, #143360	; 0x23000
    4a20:	ldr	pc, [ip, #2088]!	; 0x828

00004a24 <SSL_get_peer_certificate@plt>:
    4a24:	add	ip, pc, #0, 12
    4a28:	add	ip, ip, #143360	; 0x23000
    4a2c:	ldr	pc, [ip, #2080]!	; 0x820

00004a30 <rb_dictionary_find@plt>:
    4a30:	add	ip, pc, #0, 12
    4a34:	add	ip, ip, #143360	; 0x23000
    4a38:	ldr	pc, [ip, #2072]!	; 0x818

00004a3c <rb_lib_init@plt>:
    4a3c:	add	ip, pc, #0, 12
    4a40:	add	ip, ip, #143360	; 0x23000
    4a44:	ldr	pc, [ip, #2064]!	; 0x810

00004a48 <SSL_get_verify_result@plt>:
    4a48:	add	ip, pc, #0, 12
    4a4c:	add	ip, ip, #143360	; 0x23000
    4a50:	ldr	pc, [ip, #2056]!	; 0x808

00004a54 <strtok_r@plt>:
    4a54:	add	ip, pc, #0, 12
    4a58:	add	ip, ip, #143360	; 0x23000
    4a5c:	ldr	pc, [ip, #2048]!	; 0x800

00004a60 <rb_lib_restart@plt>:
    4a60:	add	ip, pc, #0, 12
    4a64:	add	ip, ip, #143360	; 0x23000
    4a68:	ldr	pc, [ip, #2040]!	; 0x7f8

00004a6c <DH_free@plt>:
    4a6c:	add	ip, pc, #0, 12
    4a70:	add	ip, ip, #143360	; 0x23000
    4a74:	ldr	pc, [ip, #2032]!	; 0x7f0

00004a78 <timer_delete@plt>:
    4a78:	add	ip, pc, #0, 12
    4a7c:	add	ip, ip, #143360	; 0x23000
    4a80:	ldr	pc, [ip, #2024]!	; 0x7e8

00004a84 <rb_open@plt>:
    4a84:	add	ip, pc, #0, 12
    4a88:	add	ip, ip, #143360	; 0x23000
    4a8c:	ldr	pc, [ip, #2016]!	; 0x7e0

00004a90 <rb_get_sockerr@plt>:
    4a90:	add	ip, pc, #0, 12
    4a94:	add	ip, ip, #143360	; 0x23000
    4a98:	ldr	pc, [ip, #2008]!	; 0x7d8

00004a9c <send@plt>:
    4a9c:	add	ip, pc, #0, 12
    4aa0:	add	ip, ip, #143360	; 0x23000
    4aa4:	ldr	pc, [ip, #2000]!	; 0x7d0

00004aa8 <SSL_shutdown@plt>:
    4aa8:	add	ip, pc, #0, 12
    4aac:	add	ip, ip, #143360	; 0x23000
    4ab0:	ldr	pc, [ip, #1992]!	; 0x7c8

00004ab4 <rb_bh_create@plt>:
    4ab4:	add	ip, pc, #0, 12
    4ab8:	add	ip, ip, #143360	; 0x23000
    4abc:	ldr	pc, [ip, #1984]!	; 0x7c0

00004ac0 <dup2@plt>:
    4ac0:	add	ip, pc, #0, 12
    4ac4:	add	ip, ip, #143360	; 0x23000
    4ac8:	ldr	pc, [ip, #1976]!	; 0x7b8

00004acc <getpid@plt>:
    4acc:	add	ip, pc, #0, 12
    4ad0:	add	ip, ip, #143360	; 0x23000
    4ad4:	ldr	pc, [ip, #1968]!	; 0x7b0

00004ad8 <rb_writev@plt>:
    4ad8:	add	ip, pc, #0, 12
    4adc:	add	ip, ip, #143360	; 0x23000
    4ae0:	ldr	pc, [ip, #1960]!	; 0x7a8

00004ae4 <RAND_bytes@plt>:
    4ae4:	add	ip, pc, #0, 12
    4ae8:	add	ip, ip, #143360	; 0x23000
    4aec:	ldr	pc, [ip, #1952]!	; 0x7a0

00004af0 <rb_linebuf_newbuf@plt>:
    4af0:	add	ip, pc, #0, 12
    4af4:	add	ip, ip, #143360	; 0x23000
    4af8:	ldr	pc, [ip, #1944]!	; 0x798

00004afc <rb_fdlist_init@plt>:
    4afc:	add	ip, pc, #0, 12
    4b00:	add	ip, ip, #143360	; 0x23000
    4b04:	ldr	pc, [ip, #1936]!	; 0x790

00004b08 <rb_event_add@plt>:
    4b08:	add	ip, pc, #0, 12
    4b0c:	add	ip, ip, #143360	; 0x23000
    4b10:	ldr	pc, [ip, #1928]!	; 0x788

00004b14 <readlink@plt>:
    4b14:	add	ip, pc, #0, 12
    4b18:	add	ip, ip, #143360	; 0x23000
    4b1c:	ldr	pc, [ip, #1920]!	; 0x780

00004b20 <SSL_CTX_new@plt>:
    4b20:	add	ip, pc, #0, 12
    4b24:	add	ip, ip, #143360	; 0x23000
    4b28:	ldr	pc, [ip, #1912]!	; 0x778

00004b2c <rb_setup_fd@plt>:
    4b2c:	add	ip, pc, #0, 12
    4b30:	add	ip, ip, #143360	; 0x23000
    4b34:	ldr	pc, [ip, #1904]!	; 0x770

00004b38 <recvmsg@plt>:
    4b38:	add	ip, pc, #0, 12
    4b3c:	add	ip, ip, #143360	; 0x23000
    4b40:	ldr	pc, [ip, #1896]!	; 0x768

00004b44 <rand@plt>:
    4b44:	add	ip, pc, #0, 12
    4b48:	add	ip, ip, #143360	; 0x23000
    4b4c:	ldr	pc, [ip, #1888]!	; 0x760

00004b50 <rb_linebuf_init@plt>:
    4b50:	add	ip, pc, #0, 12
    4b54:	add	ip, ip, #143360	; 0x23000
    4b58:	ldr	pc, [ip, #1880]!	; 0x758

00004b5c <__fxstat@plt>:
    4b5c:	add	ip, pc, #0, 12
    4b60:	add	ip, ip, #143360	; 0x23000
    4b64:	ldr	pc, [ip, #1872]!	; 0x750

00004b68 <SSL_set_connect_state@plt>:
    4b68:	add	ip, pc, #0, 12
    4b6c:	add	ip, ip, #143360	; 0x23000
    4b70:	ldr	pc, [ip, #1864]!	; 0x748

00004b74 <rb_radixtree_elem_find@plt>:
    4b74:	add	ip, pc, #0, 12
    4b78:	add	ip, ip, #143360	; 0x23000
    4b7c:	ldr	pc, [ip, #1856]!	; 0x740

00004b80 <rb_make_rb_dlink_node@plt>:
    4b80:	add	ip, pc, #0, 12
    4b84:	add	ip, ip, #143360	; 0x23000
    4b88:	ldr	pc, [ip, #1848]!	; 0x738

00004b8c <rb_strlcat@plt>:
    4b8c:	add	ip, pc, #0, 12
    4b90:	add	ip, ip, #143360	; 0x23000
    4b94:	ldr	pc, [ip, #1840]!	; 0x730

00004b98 <rb_spawn_process@plt>:
    4b98:	add	ip, pc, #0, 12
    4b9c:	add	ip, ip, #143360	; 0x23000
    4ba0:	ldr	pc, [ip, #1832]!	; 0x728

00004ba4 <EVP_sha512@plt>:
    4ba4:	add	ip, pc, #0, 12
    4ba8:	add	ip, ip, #143360	; 0x23000
    4bac:	ldr	pc, [ip, #1824]!	; 0x720

00004bb0 <snprintf@plt>:
    4bb0:	add	ip, pc, #0, 12
    4bb4:	add	ip, ip, #143360	; 0x23000
    4bb8:	ldr	pc, [ip, #1816]!	; 0x718

00004bbc <RAND_status@plt>:
    4bbc:	add	ip, pc, #0, 12
    4bc0:	add	ip, ip, #143360	; 0x23000
    4bc4:	ldr	pc, [ip, #1808]!	; 0x710

00004bc8 <timerfd_create@plt>:
    4bc8:	add	ip, pc, #0, 12
    4bcc:	add	ip, ip, #143360	; 0x23000
    4bd0:	ldr	pc, [ip, #1800]!	; 0x708

00004bd4 <EVP_sha256@plt>:
    4bd4:	add	ip, pc, #0, 12
    4bd8:	add	ip, ip, #143360	; 0x23000
    4bdc:	ldr	pc, [ip, #1792]!	; 0x700

00004be0 <strcspn@plt>:
    4be0:	add	ip, pc, #0, 12
    4be4:	add	ip, ip, #143360	; 0x23000
    4be8:	ldr	pc, [ip, #1784]!	; 0x6f8

00004bec <rb_linebuf_put@plt>:
    4bec:	add	ip, pc, #0, 12
    4bf0:	add	ip, ip, #143360	; 0x23000
    4bf4:	ldr	pc, [ip, #1776]!	; 0x6f0

00004bf8 <rb_listen@plt>:
    4bf8:	add	ip, pc, #0, 12
    4bfc:	add	ip, ip, #143360	; 0x23000
    4c00:	ldr	pc, [ip, #1768]!	; 0x6e8

00004c04 <fcntl@plt>:
    4c04:	add	ip, pc, #0, 12
    4c08:	add	ip, ip, #143360	; 0x23000
    4c0c:	ldr	pc, [ip, #1760]!	; 0x6e0

00004c10 <strncmp@plt>:
    4c10:	add	ip, pc, #0, 12
    4c14:	add	ip, ip, #143360	; 0x23000
    4c18:	ldr	pc, [ip, #1752]!	; 0x6d8

00004c1c <kill@plt>:
    4c1c:	add	ip, pc, #0, 12
    4c20:	add	ip, ip, #143360	; 0x23000
    4c24:	ldr	pc, [ip, #1744]!	; 0x6d0

00004c28 <nanosleep@plt>:
    4c28:	add	ip, pc, #0, 12
    4c2c:	add	ip, ip, #143360	; 0x23000
    4c30:	ldr	pc, [ip, #1736]!	; 0x6c8

00004c34 <rb_event_next@plt>:
    4c34:	add	ip, pc, #0, 12
    4c38:	add	ip, ip, #143360	; 0x23000
    4c3c:	ldr	pc, [ip, #1728]!	; 0x6c0

00004c40 <realloc@plt>:
    4c40:	add	ip, pc, #0, 12
    4c44:	add	ip, ip, #143360	; 0x23000
    4c48:	ldr	pc, [ip, #1720]!	; 0x6b8

00004c4c <timerfd_settime@plt>:
    4c4c:	add	ip, pc, #0, 12
    4c50:	add	ip, ip, #143360	; 0x23000
    4c54:	ldr	pc, [ip, #1712]!	; 0x6b0

00004c58 <epoll_ctl@plt>:
    4c58:	add	ip, pc, #0, 12
    4c5c:	add	ip, ip, #143360	; 0x23000
    4c60:	ldr	pc, [ip, #1704]!	; 0x6a8

00004c64 <X509_free@plt>:
    4c64:	add	ip, pc, #0, 12
    4c68:	add	ip, ip, #143360	; 0x23000
    4c6c:	ldr	pc, [ip, #1696]!	; 0x6a0

00004c70 <readv@plt>:
    4c70:	add	ip, pc, #0, 12
    4c74:	add	ip, ip, #143360	; 0x23000
    4c78:	ldr	pc, [ip, #1688]!	; 0x698

00004c7c <getsockopt@plt>:
    4c7c:	add	ip, pc, #0, 12
    4c80:	add	ip, ip, #143360	; 0x23000
    4c84:	ldr	pc, [ip, #1680]!	; 0x690

00004c88 <pipe@plt>:
    4c88:	add	ip, pc, #0, 12
    4c8c:	add	ip, ip, #143360	; 0x23000
    4c90:	ldr	pc, [ip, #1672]!	; 0x688

00004c94 <OpenSSL_version@plt>:
    4c94:	add	ip, pc, #0, 12
    4c98:	add	ip, ip, #143360	; 0x23000
    4c9c:	ldr	pc, [ip, #1664]!	; 0x680

00004ca0 <setsockopt@plt>:
    4ca0:	add	ip, pc, #0, 12
    4ca4:	add	ip, ip, #143360	; 0x23000
    4ca8:	ldr	pc, [ip, #1656]!	; 0x678

00004cac <SSL_get_error@plt>:
    4cac:	add	ip, pc, #0, 12
    4cb0:	add	ip, ip, #143360	; 0x23000
    4cb4:	ldr	pc, [ip, #1648]!	; 0x670

00004cb8 <SSL_get_version@plt>:
    4cb8:	add	ip, pc, #0, 12
    4cbc:	add	ip, ip, #143360	; 0x23000
    4cc0:	ldr	pc, [ip, #1640]!	; 0x668

00004cc4 <rb_radixtree_delete@plt>:
    4cc4:	add	ip, pc, #0, 12
    4cc8:	add	ip, ip, #143360	; 0x23000
    4ccc:	ldr	pc, [ip, #1632]!	; 0x660

00004cd0 <setenv@plt>:
    4cd0:	add	ip, pc, #0, 12
    4cd4:	add	ip, ip, #143360	; 0x23000
    4cd8:	ldr	pc, [ip, #1624]!	; 0x658

00004cdc <strcmp@plt>:
    4cdc:	add	ip, pc, #0, 12
    4ce0:	add	ip, ip, #143360	; 0x23000
    4ce4:	ldr	pc, [ip, #1616]!	; 0x650

00004ce8 <__errno_location@plt>:
    4ce8:	add	ip, pc, #0, 12
    4cec:	add	ip, ip, #143360	; 0x23000
    4cf0:	ldr	pc, [ip, #1608]!	; 0x648

00004cf4 <__cxa_finalize@plt>:
    4cf4:	add	ip, pc, #0, 12
    4cf8:	add	ip, ip, #143360	; 0x23000
    4cfc:	ldr	pc, [ip, #1600]!	; 0x640

00004d00 <sprintf@plt>:
    4d00:	add	ip, pc, #0, 12
    4d04:	add	ip, ip, #143360	; 0x23000
    4d08:	ldr	pc, [ip, #1592]!	; 0x638

00004d0c <rb_bh_usage@plt>:
    4d0c:	add	ip, pc, #0, 12
    4d10:	add	ip, ip, #143360	; 0x23000
    4d14:	ldr	pc, [ip, #1584]!	; 0x630

00004d18 <SSL_CTX_set_verify@plt>:
    4d18:	add	ip, pc, #0, 12
    4d1c:	add	ip, ip, #143360	; 0x23000
    4d20:	ldr	pc, [ip, #1576]!	; 0x628

Disassembly of section .text:

00004d28 <call_weak_fn>:
    4d28:	ldr	r3, [pc, #20]	; 4d44 <call_weak_fn+0x1c>
    4d2c:	ldr	r2, [pc, #20]	; 4d48 <call_weak_fn+0x20>
    4d30:	add	r3, pc, r3
    4d34:	ldr	r2, [r3, r2]
    4d38:	cmp	r2, #0
    4d3c:	bxeq	lr
    4d40:	b	4508 <__gmon_start__@plt>
    4d44:	.word	0x000232c8
    4d48:	.word	0x0000035c

00004d4c <deregister_tm_clones>:
    4d4c:	ldr	r3, [pc, #52]	; 4d88 <deregister_tm_clones+0x3c>
    4d50:	ldr	r0, [pc, #52]	; 4d8c <deregister_tm_clones+0x40>
    4d54:	add	r3, pc, r3
    4d58:	add	r0, pc, r0
    4d5c:	add	r3, r3, #3
    4d60:	sub	r3, r3, r0
    4d64:	cmp	r3, #6
    4d68:	ldr	r3, [pc, #32]	; 4d90 <deregister_tm_clones+0x44>
    4d6c:	add	r3, pc, r3
    4d70:	bxls	lr
    4d74:	ldr	r2, [pc, #24]	; 4d94 <deregister_tm_clones+0x48>
    4d78:	ldr	r3, [r3, r2]
    4d7c:	cmp	r3, #0
    4d80:	bxeq	lr
    4d84:	bx	r3
    4d88:	.word	0x00023774
    4d8c:	.word	0x00023770
    4d90:	.word	0x0002328c
    4d94:	.word	0x0000037c

00004d98 <register_tm_clones>:
    4d98:	ldr	r1, [pc, #56]	; 4dd8 <register_tm_clones+0x40>
    4d9c:	ldr	r0, [pc, #56]	; 4ddc <register_tm_clones+0x44>
    4da0:	add	r1, pc, r1
    4da4:	add	r0, pc, r0
    4da8:	sub	r1, r1, r0
    4dac:	ldr	r3, [pc, #44]	; 4de0 <register_tm_clones+0x48>
    4db0:	asr	r1, r1, #2
    4db4:	add	r3, pc, r3
    4db8:	add	r1, r1, r1, lsr #31
    4dbc:	asrs	r1, r1, #1
    4dc0:	bxeq	lr
    4dc4:	ldr	r2, [pc, #24]	; 4de4 <register_tm_clones+0x4c>
    4dc8:	ldr	r3, [r3, r2]
    4dcc:	cmp	r3, #0
    4dd0:	bxeq	lr
    4dd4:	bx	r3
    4dd8:	.word	0x00023728
    4ddc:	.word	0x00023724
    4de0:	.word	0x00023244
    4de4:	.word	0x0000038c

00004de8 <__do_global_dtors_aux>:
    4de8:	ldr	r3, [pc, #76]	; 4e3c <__do_global_dtors_aux+0x54>
    4dec:	ldr	r2, [pc, #76]	; 4e40 <__do_global_dtors_aux+0x58>
    4df0:	add	r3, pc, r3
    4df4:	add	r2, pc, r2
    4df8:	ldrb	r3, [r3]
    4dfc:	cmp	r3, #0
    4e00:	bxne	lr
    4e04:	ldr	r3, [pc, #56]	; 4e44 <__do_global_dtors_aux+0x5c>
    4e08:	push	{r4, lr}
    4e0c:	ldr	r3, [r2, r3]
    4e10:	cmp	r3, #0
    4e14:	beq	4e24 <__do_global_dtors_aux+0x3c>
    4e18:	ldr	r3, [pc, #40]	; 4e48 <__do_global_dtors_aux+0x60>
    4e1c:	ldr	r0, [pc, r3]
    4e20:	bl	4cf4 <__cxa_finalize@plt>
    4e24:	bl	4d4c <deregister_tm_clones>
    4e28:	ldr	r3, [pc, #28]	; 4e4c <__do_global_dtors_aux+0x64>
    4e2c:	mov	r2, #1
    4e30:	add	r3, pc, r3
    4e34:	strb	r2, [r3]
    4e38:	pop	{r4, pc}
    4e3c:	.word	0x000236d8
    4e40:	.word	0x00023204
    4e44:	.word	0x0000041c
    4e48:	.word	0x00023600
    4e4c:	.word	0x00023698

00004e50 <frame_dummy>:
    4e50:	ldr	r0, [pc, #56]	; 4e90 <frame_dummy+0x40>
    4e54:	ldr	r3, [pc, #56]	; 4e94 <frame_dummy+0x44>
    4e58:	add	r0, pc, r0
    4e5c:	ldr	r2, [r0]
    4e60:	add	r3, pc, r3
    4e64:	cmp	r2, #0
    4e68:	bne	4e70 <frame_dummy+0x20>
    4e6c:	b	4d98 <register_tm_clones>
    4e70:	ldr	r2, [pc, #32]	; 4e98 <frame_dummy+0x48>
    4e74:	ldr	r3, [r3, r2]
    4e78:	cmp	r3, #0
    4e7c:	beq	4e6c <frame_dummy+0x1c>
    4e80:	push	{r4, lr}
    4e84:	blx	r3
    4e88:	pop	{r4, lr}
    4e8c:	b	4d98 <register_tm_clones>
    4e90:	.word	0x00022be0
    4e94:	.word	0x00023198
    4e98:	.word	0x00000360

00004e9c <rb_spawn_process>:
    4e9c:	push	{r4, r5, r6, r7, lr}
    4ea0:	sub	sp, sp, #356	; 0x164
    4ea4:	add	r4, sp, #16
    4ea8:	mov	r7, r0
    4eac:	mov	r0, r4
    4eb0:	mov	r6, r1
    4eb4:	ldr	r5, [pc, #116]	; 4f30 <rb_spawn_process+0x94>
    4eb8:	bl	46c4 <posix_spawnattr_init@plt>
    4ebc:	mov	r1, #64	; 0x40
    4ec0:	mov	r0, r4
    4ec4:	bl	4820 <posix_spawnattr_setflags@plt>
    4ec8:	ldr	r2, [pc, #100]	; 4f34 <rb_spawn_process+0x98>
    4ecc:	add	r5, pc, r5
    4ed0:	mov	r1, r7
    4ed4:	ldr	r0, [r5, r2]
    4ed8:	str	r6, [sp]
    4edc:	mov	r3, r4
    4ee0:	ldr	ip, [r0]
    4ee4:	mov	r2, #0
    4ee8:	str	ip, [sp, #4]
    4eec:	add	r0, sp, #12
    4ef0:	bl	47d8 <posix_spawn@plt>
    4ef4:	mov	r6, r0
    4ef8:	mov	r0, r4
    4efc:	bl	485c <posix_spawnattr_destroy@plt>
    4f00:	cmp	r6, #0
    4f04:	beq	4f20 <rb_spawn_process+0x84>
    4f08:	bl	4ce8 <__errno_location@plt>
    4f0c:	mvn	r3, #0
    4f10:	str	r6, [r0]
    4f14:	mov	r0, r3
    4f18:	add	sp, sp, #356	; 0x164
    4f1c:	pop	{r4, r5, r6, r7, pc}
    4f20:	ldr	r3, [sp, #12]
    4f24:	mov	r0, r3
    4f28:	add	sp, sp, #356	; 0x164
    4f2c:	pop	{r4, r5, r6, r7, pc}
    4f30:	.word	0x0002312c
    4f34:	.word	0x000003a4

00004f38 <rb_gettimeofday>:
    4f38:	b	4760 <gettimeofday@plt>

00004f3c <rb_sleep>:
    4f3c:	mov	r3, #1000	; 0x3e8
    4f40:	push	{lr}		; (str lr, [sp, #-4]!)
    4f44:	sub	sp, sp, #12
    4f48:	add	r2, sp, #8
    4f4c:	mul	r3, r3, r1
    4f50:	str	r0, [r2, #-8]!
    4f54:	mov	r1, #0
    4f58:	mov	r0, r2
    4f5c:	str	r3, [sp, #4]
    4f60:	bl	4c28 <nanosleep@plt>
    4f64:	add	sp, sp, #12
    4f68:	pop	{pc}		; (ldr pc, [sp], #4)

00004f6c <rb_strerror>:
    4f6c:	b	43a0 <strerror@plt>

00004f70 <rb_kill>:
    4f70:	b	4c1c <kill@plt>

00004f74 <rb_setenv>:
    4f74:	b	4cd0 <setenv@plt>

00004f78 <rb_waitpid>:
    4f78:	b	4898 <waitpid@plt>

00004f7c <rb_getpid>:
    4f7c:	b	4acc <getpid@plt>

00004f80 <rb_path_to_self>:
    4f80:	push	{r4, lr}
    4f84:	mov	r2, #4096	; 0x1000
    4f88:	ldr	r4, [pc, #32]	; 4fb0 <rb_path_to_self+0x30>
    4f8c:	ldr	r0, [pc, #32]	; 4fb4 <rb_path_to_self+0x34>
    4f90:	add	r4, pc, r4
    4f94:	mov	r1, r4
    4f98:	add	r0, pc, r0
    4f9c:	bl	4b14 <readlink@plt>
    4fa0:	cmn	r0, #1
    4fa4:	movne	r0, r4
    4fa8:	moveq	r0, #0
    4fac:	pop	{r4, pc}
    4fb0:	.word	0x0002353c
    4fb4:	.word	0x000100b8

00004fb8 <rb_init_netio_win32>:
    4fb8:	push	{r4, lr}
    4fbc:	bl	4ce8 <__errno_location@plt>
    4fc0:	mov	r3, #38	; 0x26
    4fc4:	str	r3, [r0]
    4fc8:	mvn	r0, #0
    4fcc:	pop	{r4, pc}

00004fd0 <rb_setselect_win32>:
    4fd0:	push	{r4, lr}
    4fd4:	bl	4ce8 <__errno_location@plt>
    4fd8:	mov	r3, #38	; 0x26
    4fdc:	str	r3, [r0]
    4fe0:	pop	{r4, pc}

00004fe4 <rb_select_win32>:
    4fe4:	push	{r4, lr}
    4fe8:	bl	4ce8 <__errno_location@plt>
    4fec:	mov	r3, #38	; 0x26
    4ff0:	str	r3, [r0]
    4ff4:	mvn	r0, #0
    4ff8:	pop	{r4, pc}

00004ffc <rb_setup_fd_win32>:
    4ffc:	push	{r4, lr}
    5000:	bl	4ce8 <__errno_location@plt>
    5004:	mov	r3, #38	; 0x26
    5008:	str	r3, [r0]
    500c:	mvn	r0, #0
    5010:	pop	{r4, pc}
    5014:	andeq	r0, r0, r0

00005018 <rb_des_init>:
    5018:	ldr	r3, [pc, #1660]	; 569c <rb_des_init+0x684>
    501c:	add	r3, pc, r3
    5020:	ldr	r2, [r3]
    5024:	cmp	r2, #1
    5028:	bxeq	lr
    502c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5030:	add	r7, r3, #19
    5034:	ldr	r9, [pc, #1636]	; 56a0 <rb_des_init+0x688>
    5038:	ldr	r8, [pc, #1636]	; 56a4 <rb_des_init+0x68c>
    503c:	sub	sp, sp, #84	; 0x54
    5040:	mov	r6, r7
    5044:	mov	ip, #14
    5048:	add	r9, pc, r9
    504c:	add	r8, pc, r8
    5050:	mov	r5, #0
    5054:	str	r5, [r3, #4]
    5058:	str	r5, [r3, #8]
    505c:	str	r5, [r3, #12]
    5060:	str	r5, [r3, #16]
    5064:	mov	r0, r6
    5068:	mov	r3, #0
    506c:	add	lr, r9, r5, lsl #6
    5070:	b	5078 <rb_des_init+0x60>
    5074:	ldrb	ip, [lr, r2]
    5078:	add	r3, r3, #1
    507c:	and	r2, r3, #32
    5080:	lsl	r4, r3, #27
    5084:	lsl	r1, r3, #4
    5088:	orr	r2, r2, r4, lsr #28
    508c:	and	r1, r1, #16
    5090:	cmp	r3, #64	; 0x40
    5094:	orr	r2, r2, r1
    5098:	strb	ip, [r0, #1]!
    509c:	bne	5074 <rb_des_init+0x5c>
    50a0:	add	r5, r5, #1
    50a4:	cmp	r5, #8
    50a8:	add	r6, r6, #64	; 0x40
    50ac:	ldrbne	ip, [r8, r5, lsl #6]
    50b0:	bne	5064 <rb_des_init+0x4c>
    50b4:	ldr	r9, [pc, #1516]	; 56a8 <rb_des_init+0x690>
    50b8:	mov	r8, #0
    50bc:	add	r9, pc, r9
    50c0:	mov	r5, r7
    50c4:	mov	lr, #0
    50c8:	add	r6, r7, #64	; 0x40
    50cc:	add	r4, r9, r8, lsl #12
    50d0:	ldrb	ip, [r5, #1]!
    50d4:	mov	r0, r6
    50d8:	mov	r3, #0
    50dc:	lsl	ip, ip, #4
    50e0:	sxtb	ip, ip
    50e4:	ldrb	r1, [r0, #1]!
    50e8:	orr	r2, lr, r3
    50ec:	add	r2, r4, r2
    50f0:	add	r3, r3, #1
    50f4:	orr	r1, ip, r1
    50f8:	cmp	r3, #64	; 0x40
    50fc:	strb	r1, [r2, #532]	; 0x214
    5100:	bne	50e4 <rb_des_init+0xcc>
    5104:	add	lr, lr, #64	; 0x40
    5108:	cmp	lr, #4096	; 0x1000
    510c:	bne	50d0 <rb_des_init+0xb8>
    5110:	add	r8, r8, #1
    5114:	cmp	r8, #4
    5118:	add	r7, r7, #128	; 0x80
    511c:	bne	50c0 <rb_des_init+0xa8>
    5120:	ldr	r2, [pc, #1412]	; 56ac <rb_des_init+0x694>
    5124:	ldr	r0, [pc, #1412]	; 56b0 <rb_des_init+0x698>
    5128:	add	r2, pc, r2
    512c:	add	r0, pc, r0
    5130:	add	lr, r2, #548	; 0x224
    5134:	add	ip, r2, #612	; 0x264
    5138:	sub	lr, lr, #1
    513c:	sub	ip, ip, #1
    5140:	add	r0, r0, #512	; 0x200
    5144:	mov	r3, #58	; 0x3a
    5148:	mov	r1, #0
    514c:	mvn	r5, #0
    5150:	b	5158 <rb_des_init+0x140>
    5154:	ldrb	r3, [r0, #1]!
    5158:	sub	r3, r3, #1
    515c:	strb	r5, [ip, #1]!
    5160:	uxtb	r3, r3
    5164:	add	r4, r2, r3
    5168:	strb	r3, [lr, #1]!
    516c:	strb	r1, [r4, #676]	; 0x2a4
    5170:	add	r1, r1, #1
    5174:	cmp	r1, #64	; 0x40
    5178:	bne	5154 <rb_des_init+0x13c>
    517c:	ldr	r0, [pc, #1328]	; 56b4 <rb_des_init+0x69c>
    5180:	add	r3, r2, #740	; 0x2e4
    5184:	add	r0, pc, r0
    5188:	sub	ip, r3, #1
    518c:	add	r0, r0, #576	; 0x240
    5190:	mov	r3, r2
    5194:	mov	r1, #57	; 0x39
    5198:	mov	r2, #0
    519c:	mvn	lr, #0
    51a0:	b	51a8 <rb_des_init+0x190>
    51a4:	ldrb	r1, [r0, #1]!
    51a8:	add	r1, r3, r1
    51ac:	strb	lr, [ip, #1]!
    51b0:	strb	r2, [r1, #611]	; 0x263
    51b4:	add	r2, r2, #1
    51b8:	cmp	r2, #56	; 0x38
    51bc:	bne	51a4 <rb_des_init+0x18c>
    51c0:	ldr	r2, [pc, #1264]	; 56b8 <rb_des_init+0x6a0>
    51c4:	ldr	r5, [pc, #1264]	; 56bc <rb_des_init+0x6a4>
    51c8:	add	r2, pc, r2
    51cc:	mov	r1, #14
    51d0:	add	r2, r2, #632	; 0x278
    51d4:	mov	r3, #0
    51d8:	add	r5, pc, r5
    51dc:	b	51e4 <rb_des_init+0x1cc>
    51e0:	ldrb	r1, [r2, #1]!
    51e4:	add	r1, r5, r1
    51e8:	strb	r3, [r1, #739]	; 0x2e3
    51ec:	add	r3, r3, #1
    51f0:	cmp	r3, #48	; 0x30
    51f4:	bne	51e0 <rb_des_init+0x1c8>
    51f8:	ldr	r4, [pc, #1216]	; 56c0 <rb_des_init+0x6a8>
    51fc:	ldr	r3, [pc, #1216]	; 56c4 <rb_des_init+0x6ac>
    5200:	ldr	lr, [pc, #1216]	; 56c8 <rb_des_init+0x6b0>
    5204:	add	r3, pc, r3
    5208:	add	r4, pc, r4
    520c:	add	lr, pc, lr
    5210:	mov	r6, r3
    5214:	add	r4, r4, #680	; 0x2a8
    5218:	str	r3, [sp, #60]	; 0x3c
    521c:	ldr	ip, [pc, #1192]	; 56cc <rb_des_init+0x6b4>
    5220:	ldr	r0, [pc, #1192]	; 56d0 <rb_des_init+0x6b8>
    5224:	ldr	r1, [pc, #1192]	; 56d4 <rb_des_init+0x6bc>
    5228:	ldr	r2, [pc, #1192]	; 56d8 <rb_des_init+0x6c0>
    522c:	ldr	r3, [pc, #1192]	; 56dc <rb_des_init+0x6c4>
    5230:	sub	lr, lr, #3280	; 0xcd0
    5234:	add	r5, r5, #740	; 0x2e4
    5238:	mov	r7, r4
    523c:	sub	lr, lr, #4
    5240:	add	ip, pc, ip
    5244:	add	r0, pc, r0
    5248:	add	r1, pc, r1
    524c:	add	r2, pc, r2
    5250:	add	r3, pc, r3
    5254:	str	r4, [sp, #16]
    5258:	str	lr, [sp, #68]	; 0x44
    525c:	sub	r4, r6, #3280	; 0xcd0
    5260:	sub	lr, r5, #740	; 0x2e4
    5264:	mov	r6, #0
    5268:	add	r8, r7, #7
    526c:	mov	r9, r6
    5270:	sub	r4, r4, #12
    5274:	str	lr, [sp, #52]	; 0x34
    5278:	add	ip, ip, #812	; 0x32c
    527c:	sub	lr, r5, #192	; 0xc0
    5280:	add	r0, r0, #820	; 0x334
    5284:	add	r1, r1, #828	; 0x33c
    5288:	add	r2, r2, #836	; 0x344
    528c:	add	r3, r3, #796	; 0x31c
    5290:	str	r5, [sp, #12]
    5294:	str	r6, [sp, #8]
    5298:	str	r4, [sp, #64]	; 0x40
    529c:	str	lr, [sp, #20]
    52a0:	str	ip, [sp, #32]
    52a4:	str	r0, [sp, #36]	; 0x24
    52a8:	str	r1, [sp, #40]	; 0x28
    52ac:	str	r2, [sp, #44]	; 0x2c
    52b0:	str	r3, [sp, #56]	; 0x38
    52b4:	str	r9, [sp, #48]	; 0x30
    52b8:	ldr	r3, [sp, #52]	; 0x34
    52bc:	ldr	fp, [pc, #1052]	; 56e0 <rb_des_init+0x6c8>
    52c0:	add	r3, r3, #676	; 0x2a4
    52c4:	ldr	sl, [pc, #1048]	; 56e4 <rb_des_init+0x6cc>
    52c8:	ldr	r7, [pc, #1048]	; 56e8 <rb_des_init+0x6d0>
    52cc:	str	r3, [sp, #4]
    52d0:	ldr	r5, [sp, #44]	; 0x2c
    52d4:	ldr	r3, [pc, #1040]	; 56ec <rb_des_init+0x6d4>
    52d8:	ldr	r4, [sp, #40]	; 0x28
    52dc:	ldr	lr, [sp, #36]	; 0x24
    52e0:	ldr	ip, [sp, #32]
    52e4:	mov	r0, #0
    52e8:	add	fp, pc, fp
    52ec:	add	sl, pc, sl
    52f0:	add	r7, pc, r7
    52f4:	add	r3, pc, r3
    52f8:	str	r3, [sp]
    52fc:	ldr	r3, [sp, #8]
    5300:	ldr	r2, [sp, #20]
    5304:	mov	r6, #0
    5308:	add	r1, r2, r3
    530c:	ldr	r2, [sp, #4]
    5310:	ldr	r9, [sp, #16]
    5314:	add	r2, r2, r3
    5318:	str	r6, [ip]
    531c:	mov	r3, #128	; 0x80
    5320:	str	r6, [lr]
    5324:	str	r6, [r4]
    5328:	str	r6, [r5]
    532c:	b	5334 <rb_des_init+0x31c>
    5330:	ldrb	r3, [r9, #1]!
    5334:	tst	r3, r0
    5338:	beq	53a0 <rb_des_init+0x388>
    533c:	ldrb	r3, [r2]
    5340:	ldr	r6, [sp]
    5344:	cmp	r3, #31
    5348:	add	r6, r6, r3, lsl #2
    534c:	add	r3, r7, r3, lsl #2
    5350:	ldrgt	r6, [r6, #560]	; 0x230
    5354:	ldrle	r6, [r3, #688]	; 0x2b0
    5358:	ldrgt	r3, [lr]
    535c:	ldrle	r3, [ip]
    5360:	orrgt	r3, r3, r6
    5364:	orrle	r3, r3, r6
    5368:	strle	r3, [ip]
    536c:	strgt	r3, [lr]
    5370:	ldrb	r3, [r1]
    5374:	cmp	r3, #31
    5378:	add	r6, sl, r3, lsl #2
    537c:	add	r3, fp, r3, lsl #2
    5380:	ldrle	r6, [r6, #688]	; 0x2b0
    5384:	ldrle	r3, [r4]
    5388:	ldrgt	r6, [r3, #560]	; 0x230
    538c:	ldrgt	r3, [r5]
    5390:	orrle	r3, r3, r6
    5394:	orrgt	r3, r3, r6
    5398:	strle	r3, [r4]
    539c:	strgt	r3, [r5]
    53a0:	cmp	r9, r8
    53a4:	add	r1, r1, #1
    53a8:	add	r2, r2, #1
    53ac:	bne	5330 <rb_des_init+0x318>
    53b0:	add	r0, r0, #1
    53b4:	cmp	r0, #256	; 0x100
    53b8:	add	ip, ip, #4
    53bc:	add	lr, lr, #4
    53c0:	add	r4, r4, #4
    53c4:	add	r5, r5, #4
    53c8:	bne	52fc <rb_des_init+0x2e4>
    53cc:	ldr	r3, [pc, #796]	; 56f0 <rb_des_init+0x6d8>
    53d0:	ldr	r2, [sp, #48]	; 0x30
    53d4:	add	r3, pc, r3
    53d8:	ldr	r1, [sp, #60]	; 0x3c
    53dc:	add	r3, r3, #612	; 0x264
    53e0:	ldr	r4, [pc, #780]	; 56f4 <rb_des_init+0x6dc>
    53e4:	str	r3, [sp, #28]
    53e8:	ldr	r3, [sp, #68]	; 0x44
    53ec:	sub	r7, r2, #4
    53f0:	add	r6, r1, #804	; 0x324
    53f4:	add	r4, pc, r4
    53f8:	ldr	lr, [pc, #760]	; 56f8 <rb_des_init+0x6e0>
    53fc:	str	r4, [sp]
    5400:	add	r6, r6, r7
    5404:	ldr	r4, [pc, #752]	; 56fc <rb_des_init+0x6e4>
    5408:	add	r7, r3, r7
    540c:	ldr	r3, [sp, #56]	; 0x38
    5410:	ldr	r1, [pc, #744]	; 5700 <rb_des_init+0x6e8>
    5414:	ldr	ip, [pc, #744]	; 5704 <rb_des_init+0x6ec>
    5418:	add	lr, pc, lr
    541c:	add	r4, pc, r4
    5420:	add	r5, r3, r2
    5424:	ldr	r3, [sp, #64]	; 0x40
    5428:	add	r1, pc, r1
    542c:	add	ip, pc, ip
    5430:	str	r4, [sp, #4]
    5434:	add	r4, lr, #680	; 0x2a8
    5438:	str	r4, [sp, #24]
    543c:	str	r9, [sp, #72]	; 0x48
    5440:	str	r8, [sp, #76]	; 0x4c
    5444:	mov	r0, #0
    5448:	add	lr, lr, #688	; 0x2b0
    544c:	add	r4, r3, r2
    5450:	mov	r8, r1
    5454:	mov	r9, ip
    5458:	ldr	r3, [sp, #24]
    545c:	ldr	ip, [sp, #8]
    5460:	ldr	r1, [sp, #28]
    5464:	mov	sl, #0
    5468:	add	r2, r3, #2
    546c:	add	r1, r1, ip
    5470:	mov	r3, r2
    5474:	mov	ip, #64	; 0x40
    5478:	str	sl, [r5]
    547c:	str	sl, [r4]
    5480:	b	5488 <rb_des_init+0x470>
    5484:	ldrb	ip, [r3], #1
    5488:	tst	ip, r0
    548c:	beq	54c8 <rb_des_init+0x4b0>
    5490:	ldrb	ip, [r1]
    5494:	cmp	ip, #255	; 0xff
    5498:	beq	54c8 <rb_des_init+0x4b0>
    549c:	cmp	ip, #27
    54a0:	add	sl, r8, ip, lsl #2
    54a4:	add	fp, r9, ip, lsl #2
    54a8:	ldrgt	sl, [sl, #592]	; 0x250
    54ac:	ldrle	ip, [r5]
    54b0:	ldrgt	ip, [r4]
    54b4:	ldrle	sl, [fp, #704]	; 0x2c0
    54b8:	orrgt	ip, ip, sl
    54bc:	orrle	ip, ip, sl
    54c0:	strle	ip, [r5]
    54c4:	strgt	ip, [r4]
    54c8:	cmp	lr, r3
    54cc:	add	r1, r1, #1
    54d0:	bne	5484 <rb_des_init+0x46c>
    54d4:	mov	sl, #0
    54d8:	ldr	r1, [sp, #12]
    54dc:	mov	ip, #64	; 0x40
    54e0:	str	sl, [r7, #4]!
    54e4:	str	sl, [r6, #4]!
    54e8:	b	54f0 <rb_des_init+0x4d8>
    54ec:	ldrb	ip, [r2], #1
    54f0:	tst	ip, r0
    54f4:	beq	5538 <rb_des_init+0x520>
    54f8:	ldrb	ip, [r1]
    54fc:	cmp	ip, #255	; 0xff
    5500:	beq	5538 <rb_des_init+0x520>
    5504:	ldr	sl, [sp, #4]
    5508:	cmp	ip, #23
    550c:	add	fp, sl, ip, lsl #2
    5510:	ldr	sl, [sp]
    5514:	add	sl, sl, ip, lsl #2
    5518:	ldrle	ip, [r7]
    551c:	ldrgt	ip, [r6]
    5520:	ldrle	sl, [fp, #720]	; 0x2d0
    5524:	ldrgt	sl, [sl, #624]	; 0x270
    5528:	orrle	ip, ip, sl
    552c:	orrgt	ip, ip, sl
    5530:	strle	ip, [r7]
    5534:	strgt	ip, [r6]
    5538:	cmp	r3, r2
    553c:	add	r1, r1, #1
    5540:	bne	54ec <rb_des_init+0x4d4>
    5544:	add	r0, r0, #1
    5548:	cmp	r0, #128	; 0x80
    554c:	add	r5, r5, #4
    5550:	add	r4, r4, #4
    5554:	bne	5458 <rb_des_init+0x440>
    5558:	ldr	r3, [sp, #8]
    555c:	ldr	r9, [sp, #72]	; 0x48
    5560:	add	r3, r3, #8
    5564:	str	r3, [sp, #8]
    5568:	cmp	r3, #64	; 0x40
    556c:	ldr	r3, [sp, #12]
    5570:	ldr	r8, [sp, #76]	; 0x4c
    5574:	add	r3, r3, #7
    5578:	str	r3, [sp, #12]
    557c:	ldr	r3, [sp, #32]
    5580:	add	r3, r3, #1024	; 0x400
    5584:	str	r3, [sp, #32]
    5588:	ldr	r3, [sp, #36]	; 0x24
    558c:	add	r3, r3, #1024	; 0x400
    5590:	str	r3, [sp, #36]	; 0x24
    5594:	ldr	r3, [sp, #40]	; 0x28
    5598:	add	r3, r3, #1024	; 0x400
    559c:	str	r3, [sp, #40]	; 0x28
    55a0:	ldr	r3, [sp, #44]	; 0x2c
    55a4:	add	r3, r3, #1024	; 0x400
    55a8:	str	r3, [sp, #44]	; 0x2c
    55ac:	ldr	r3, [sp, #48]	; 0x30
    55b0:	add	r3, r3, #512	; 0x200
    55b4:	str	r3, [sp, #48]	; 0x30
    55b8:	bne	52b8 <rb_des_init+0x2a0>
    55bc:	ldr	r3, [pc, #324]	; 5708 <rb_des_init+0x6f0>
    55c0:	ldr	r0, [pc, #324]	; 570c <rb_des_init+0x6f4>
    55c4:	add	r3, pc, r3
    55c8:	mov	r1, #16
    55cc:	add	r3, r3, #816	; 0x330
    55d0:	mov	r2, #0
    55d4:	add	r0, pc, r0
    55d8:	b	55e0 <rb_des_init+0x5c8>
    55dc:	ldrb	r1, [r3, #1]!
    55e0:	add	r1, r0, r1
    55e4:	strb	r2, [r1, #843]	; 0x34b
    55e8:	add	r2, r2, #1
    55ec:	cmp	r2, #32
    55f0:	bne	55dc <rb_des_init+0x5c4>
    55f4:	ldr	r5, [pc, #276]	; 5710 <rb_des_init+0x6f8>
    55f8:	ldr	lr, [pc, #276]	; 5714 <rb_des_init+0x6fc>
    55fc:	add	r5, pc, r5
    5600:	mov	r4, #0
    5604:	ldr	sl, [sp, #16]
    5608:	add	r8, r5, #876	; 0x36c
    560c:	add	lr, pc, lr
    5610:	add	r5, r5, #844	; 0x34c
    5614:	mov	r7, r4
    5618:	mov	r6, #128	; 0x80
    561c:	add	ip, r8, r4, lsl #7
    5620:	mov	r0, #0
    5624:	add	r2, r5, r4
    5628:	mov	r3, sl
    562c:	mov	r1, r6
    5630:	str	r7, [ip]
    5634:	b	563c <rb_des_init+0x624>
    5638:	ldrb	r1, [r3, #1]!
    563c:	tst	r1, r0
    5640:	beq	565c <rb_des_init+0x644>
    5644:	ldrb	fp, [r2]
    5648:	ldr	r1, [ip]
    564c:	add	fp, lr, fp, lsl #2
    5650:	ldr	fp, [fp, #688]	; 0x2b0
    5654:	orr	r1, r1, fp
    5658:	str	r1, [ip]
    565c:	cmp	r3, r9
    5660:	add	r2, r2, #1
    5664:	bne	5638 <rb_des_init+0x620>
    5668:	add	r0, r0, #1
    566c:	cmp	r0, #256	; 0x100
    5670:	add	ip, ip, #4
    5674:	bne	5624 <rb_des_init+0x60c>
    5678:	add	r4, r4, #8
    567c:	cmp	r4, #32
    5680:	bne	561c <rb_des_init+0x604>
    5684:	ldr	r3, [pc, #140]	; 5718 <rb_des_init+0x700>
    5688:	mov	r2, #1
    568c:	add	r3, pc, r3
    5690:	str	r2, [r3]
    5694:	add	sp, sp, #84	; 0x54
    5698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    569c:	.word	0x000244b0
    56a0:	.word	0x00010018
    56a4:	.word	0x00010014
    56a8:	.word	0x00024410
    56ac:	.word	0x00028394
    56b0:	.word	0x0000ff34
    56b4:	.word	0x0000fedc
    56b8:	.word	0x0000fe98
    56bc:	.word	0x000282e4
    56c0:	.word	0x0000fe58
    56c4:	.word	0x0002a2b0
    56c8:	.word	0x0002c2a0
    56cc:	.word	0x0002c26c
    56d0:	.word	0x0002e260
    56d4:	.word	0x00030254
    56d8:	.word	0x00032248
    56dc:	.word	0x0002826c
    56e0:	.word	0x0000fd78
    56e4:	.word	0x0000fd74
    56e8:	.word	0x0000fd70
    56ec:	.word	0x0000fd6c
    56f0:	.word	0x000280e8
    56f4:	.word	0x0000fc6c
    56f8:	.word	0x0000fc48
    56fc:	.word	0x0000fc44
    5700:	.word	0x0000fc38
    5704:	.word	0x0000fc34
    5708:	.word	0x0000fa9c
    570c:	.word	0x00033eb8
    5710:	.word	0x00033e90
    5714:	.word	0x0000fa54
    5718:	.word	0x00023e40

0000571c <rb_sha256_process_block>:
    571c:	ldr	r3, [r2, #32]
    5720:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5724:	add	r3, r1, r3
    5728:	sub	sp, sp, #316	; 0x13c
    572c:	str	r3, [r2, #32]
    5730:	cmp	r1, r3
    5734:	lsr	r3, r1, #2
    5738:	str	r3, [sp, #40]	; 0x28
    573c:	str	r2, [sp, #52]	; 0x34
    5740:	mov	r3, r2
    5744:	ldr	r2, [r2]
    5748:	str	r2, [sp, #28]
    574c:	ldr	r2, [r3, #4]
    5750:	str	r2, [sp, #24]
    5754:	ldr	r2, [r3, #8]
    5758:	str	r2, [sp, #20]
    575c:	ldr	r2, [r3, #12]
    5760:	str	r2, [sp, #16]
    5764:	ldr	r2, [r3, #16]
    5768:	str	r2, [sp, #12]
    576c:	ldr	r2, [r3, #20]
    5770:	str	r2, [sp, #8]
    5774:	ldr	r2, [r3, #24]
    5778:	str	r2, [sp, #32]
    577c:	ldr	r2, [r3, #28]
    5780:	str	r2, [sp, #36]	; 0x24
    5784:	movhi	r2, r3
    5788:	ldrhi	r3, [r3, #36]	; 0x24
    578c:	addhi	r3, r3, #1
    5790:	strhi	r3, [r2, #36]	; 0x24
    5794:	ldr	r3, [sp, #40]	; 0x28
    5798:	cmp	r3, #0
    579c:	beq	596c <rb_sha256_process_block+0x250>
    57a0:	ldr	r3, [pc, #528]	; 59b8 <rb_sha256_process_block+0x29c>
    57a4:	add	fp, sp, #56	; 0x38
    57a8:	add	r3, pc, r3
    57ac:	add	r3, r3, #848	; 0x350
    57b0:	sub	r2, r0, #4
    57b4:	mov	sl, fp
    57b8:	str	r3, [sp, #4]
    57bc:	add	r3, sp, #248	; 0xf8
    57c0:	str	r3, [sp, #44]	; 0x2c
    57c4:	add	r3, r2, #64	; 0x40
    57c8:	mov	ip, sl
    57cc:	mov	r1, sl
    57d0:	mov	r0, r3
    57d4:	str	r3, [sp, #48]	; 0x30
    57d8:	ldr	r3, [r2, #4]!
    57dc:	rev	r3, r3
    57e0:	cmp	r0, r2
    57e4:	str	r3, [r1], #4
    57e8:	bne	57d8 <rb_sha256_process_block+0xbc>
    57ec:	ldr	lr, [sp, #44]	; 0x2c
    57f0:	ldr	r2, [ip, #56]	; 0x38
    57f4:	mov	r4, ip
    57f8:	ldr	r1, [ip, #4]!
    57fc:	ror	r3, r2, #19
    5800:	eor	r3, r3, r2, ror #17
    5804:	eor	r3, r3, r2, lsr #10
    5808:	ldr	r0, [r4, #36]	; 0x24
    580c:	ldr	r2, [r4]
    5810:	cmp	ip, lr
    5814:	add	r0, r0, r2
    5818:	ror	r2, r1, #18
    581c:	eor	r2, r2, r1, ror #7
    5820:	add	r3, r3, r0
    5824:	eor	r2, r2, r1, lsr #3
    5828:	add	r3, r3, r2
    582c:	str	r3, [ip, #60]	; 0x3c
    5830:	bne	57f0 <rb_sha256_process_block+0xd4>
    5834:	ldr	r3, [sp, #16]
    5838:	str	lr, [sp, #44]	; 0x2c
    583c:	str	r3, [sp]
    5840:	ldr	fp, [sp, #36]	; 0x24
    5844:	ldr	r8, [sp, #32]
    5848:	ldr	r9, [sp, #8]
    584c:	ldr	lr, [sp, #12]
    5850:	ldr	r6, [sp, #20]
    5854:	ldr	r7, [sp, #24]
    5858:	ldr	r4, [sp, #28]
    585c:	ldr	r3, [pc, #344]	; 59bc <rb_sha256_process_block+0x2a0>
    5860:	mov	r5, #0
    5864:	b	5890 <rb_sha256_process_block+0x174>
    5868:	mov	fp, r8
    586c:	mov	r8, r9
    5870:	mov	r9, lr
    5874:	mov	lr, r3
    5878:	ldr	r3, [sp, #4]
    587c:	str	r6, [sp]
    5880:	mov	r6, r7
    5884:	ldr	r3, [r3, r5, lsl #2]
    5888:	mov	r7, r4
    588c:	mov	r4, r2
    5890:	ror	r0, lr, #11
    5894:	bic	r1, r8, lr
    5898:	eor	r0, r0, lr, ror #6
    589c:	and	r2, lr, r9
    58a0:	eor	r0, r0, lr, ror #25
    58a4:	eor	r2, r2, r1
    58a8:	add	r2, r0, r2
    58ac:	ldr	r0, [sl, r5, lsl #2]
    58b0:	ror	r1, r4, #13
    58b4:	add	r2, r2, r0
    58b8:	eor	ip, r6, r7
    58bc:	eor	r1, r1, r4, ror #2
    58c0:	and	ip, ip, r4
    58c4:	and	r0, r7, r6
    58c8:	add	r2, r2, fp
    58cc:	add	r2, r2, r3
    58d0:	add	r5, r5, #1
    58d4:	eor	r1, r1, r4, ror #22
    58d8:	eor	r0, r0, ip
    58dc:	ldr	r3, [sp]
    58e0:	add	r0, r1, r0
    58e4:	cmp	r5, #64	; 0x40
    58e8:	add	r3, r2, r3
    58ec:	add	r2, r2, r0
    58f0:	bne	5868 <rb_sha256_process_block+0x14c>
    58f4:	mov	ip, r2
    58f8:	ldr	r2, [sp, #40]	; 0x28
    58fc:	subs	r2, r2, #16
    5900:	str	r2, [sp, #40]	; 0x28
    5904:	ldr	r2, [sp, #28]
    5908:	add	r2, r2, ip
    590c:	str	r2, [sp, #28]
    5910:	ldr	r2, [sp, #24]
    5914:	add	r2, r2, r4
    5918:	str	r2, [sp, #24]
    591c:	ldr	r2, [sp, #20]
    5920:	add	r2, r2, r7
    5924:	str	r2, [sp, #20]
    5928:	ldr	r2, [sp, #16]
    592c:	add	r2, r2, r6
    5930:	str	r2, [sp, #16]
    5934:	ldr	r2, [sp, #12]
    5938:	add	r3, r2, r3
    593c:	str	r3, [sp, #12]
    5940:	ldr	r3, [sp, #8]
    5944:	ldr	r2, [sp, #48]	; 0x30
    5948:	add	r3, r3, lr
    594c:	str	r3, [sp, #8]
    5950:	ldr	r3, [sp, #32]
    5954:	add	r3, r3, r9
    5958:	str	r3, [sp, #32]
    595c:	ldr	r3, [sp, #36]	; 0x24
    5960:	add	r3, r3, r8
    5964:	str	r3, [sp, #36]	; 0x24
    5968:	bne	57c4 <rb_sha256_process_block+0xa8>
    596c:	ldr	r3, [sp, #52]	; 0x34
    5970:	ldr	r2, [sp, #28]
    5974:	str	r2, [r3]
    5978:	ldr	r2, [sp, #24]
    597c:	str	r2, [r3, #4]
    5980:	ldr	r2, [sp, #20]
    5984:	str	r2, [r3, #8]
    5988:	ldr	r2, [sp, #16]
    598c:	str	r2, [r3, #12]
    5990:	ldr	r2, [sp, #12]
    5994:	str	r2, [r3, #16]
    5998:	ldr	r2, [sp, #8]
    599c:	str	r2, [r3, #20]
    59a0:	ldr	r2, [sp, #32]
    59a4:	str	r2, [r3, #24]
    59a8:	ldr	r2, [sp, #36]	; 0x24
    59ac:	str	r2, [r3, #28]
    59b0:	add	sp, sp, #316	; 0x13c
    59b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59b8:	.word	0x0000f8b8
    59bc:	.word	0x428a2f98

000059c0 <rb_sha512_process_block>:
    59c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59c4:	sub	sp, sp, #892	; 0x37c
    59c8:	mov	ip, r2
    59cc:	str	r2, [sp, #244]	; 0xf4
    59d0:	ldrd	r2, [r2, #64]	; 0x40
    59d4:	mov	r5, #0
    59d8:	adds	r6, r2, r1
    59dc:	lsr	r2, r1, #3
    59e0:	adc	r7, r3, r5
    59e4:	str	r2, [sp, #212]	; 0xd4
    59e8:	ldrd	r2, [ip]
    59ec:	cmp	r5, r7
    59f0:	cmpeq	r1, r6
    59f4:	strd	r2, [sp, #184]	; 0xb8
    59f8:	ldrd	r2, [ip, #8]
    59fc:	strd	r6, [ip, #64]	; 0x40
    5a00:	strd	r2, [sp, #176]	; 0xb0
    5a04:	ldrd	r2, [ip, #16]
    5a08:	strd	r2, [sp, #168]	; 0xa8
    5a0c:	ldrd	r2, [ip, #24]
    5a10:	strd	r2, [sp, #160]	; 0xa0
    5a14:	ldrd	r2, [ip, #32]
    5a18:	strd	r2, [sp, #152]	; 0x98
    5a1c:	ldrd	r2, [ip, #40]	; 0x28
    5a20:	strd	r2, [sp, #144]	; 0x90
    5a24:	ldrd	r2, [ip, #48]	; 0x30
    5a28:	strd	r2, [sp, #192]	; 0xc0
    5a2c:	ldrd	r2, [ip, #56]	; 0x38
    5a30:	strd	r2, [sp, #200]	; 0xc8
    5a34:	bls	5a48 <rb_sha512_process_block+0x88>
    5a38:	ldrd	r2, [ip, #72]	; 0x48
    5a3c:	adds	r4, r2, #1
    5a40:	adc	r5, r3, #0
    5a44:	strd	r4, [ip, #72]	; 0x48
    5a48:	ldr	r3, [sp, #212]	; 0xd4
    5a4c:	cmp	r3, #0
    5a50:	beq	5ec0 <rb_sha512_process_block+0x500>
    5a54:	ldr	r3, [pc, #1204]	; 5f10 <rb_sha512_process_block+0x550>
    5a58:	sub	r2, r0, #8
    5a5c:	add	r3, pc, r3
    5a60:	add	r3, r3, #1104	; 0x450
    5a64:	str	r3, [sp, #208]	; 0xd0
    5a68:	add	r3, sp, #248	; 0xf8
    5a6c:	str	r3, [sp, #220]	; 0xdc
    5a70:	add	r3, sp, #760	; 0x2f8
    5a74:	str	r3, [sp, #216]	; 0xd8
    5a78:	ldr	r1, [sp, #220]	; 0xdc
    5a7c:	add	lr, r2, #128	; 0x80
    5a80:	mov	r3, r1
    5a84:	str	lr, [sp, #240]	; 0xf0
    5a88:	ldr	ip, [r2, #8]!
    5a8c:	rev	ip, ip
    5a90:	ldr	r0, [r2, #4]
    5a94:	cmp	r2, lr
    5a98:	rev	r0, r0
    5a9c:	stm	r1, {r0, ip}
    5aa0:	add	r1, r1, #8
    5aa4:	bne	5a88 <rb_sha512_process_block+0xc8>
    5aa8:	ldr	lr, [sp, #216]	; 0xd8
    5aac:	ldr	r1, [r3, #112]	; 0x70
    5ab0:	ldr	r4, [r3, #116]	; 0x74
    5ab4:	ldr	ip, [r3, #8]
    5ab8:	lsr	r5, r1, #19
    5abc:	orr	r5, r5, r4, lsl #13
    5ac0:	lsl	r6, r4, #3
    5ac4:	orr	r6, r6, r1, lsr #29
    5ac8:	str	r5, [sp, #80]	; 0x50
    5acc:	lsr	r5, r4, #19
    5ad0:	lsr	sl, r1, #6
    5ad4:	str	r6, [sp, #92]	; 0x5c
    5ad8:	lsl	r6, r1, #3
    5adc:	orr	r1, r5, r1, lsl #13
    5ae0:	str	r1, [sp, #84]	; 0x54
    5ae4:	ldrd	r0, [r3]
    5ae8:	orr	r6, r6, r4, lsr #29
    5aec:	str	r6, [sp, #88]	; 0x58
    5af0:	strd	r0, [sp]
    5af4:	orr	sl, sl, r4, lsl #26
    5af8:	ldrd	r0, [sp, #88]	; 0x58
    5afc:	lsr	fp, r4, #6
    5b00:	ldrd	r4, [sp, #80]	; 0x50
    5b04:	ldrd	r6, [r3, #72]	; 0x48
    5b08:	ldr	r2, [r3, #12]
    5b0c:	eor	r4, r4, r0
    5b10:	eor	r5, r5, r1
    5b14:	ldrd	r0, [sp]
    5b18:	lsr	r8, ip, #7
    5b1c:	eor	r4, r4, sl
    5b20:	adds	r0, r0, r6
    5b24:	adc	r1, r1, r7
    5b28:	lsr	r6, ip, #1
    5b2c:	strd	r0, [sp]
    5b30:	orr	r1, r6, r2, lsl #31
    5b34:	lsr	r6, ip, #8
    5b38:	str	r1, [sp, #96]	; 0x60
    5b3c:	orr	r1, r6, r2, lsl #24
    5b40:	lsr	r6, r2, #1
    5b44:	str	r1, [sp, #104]	; 0x68
    5b48:	orr	r1, r6, ip, lsl #31
    5b4c:	lsr	r6, r2, #8
    5b50:	str	r1, [sp, #100]	; 0x64
    5b54:	orr	r1, r6, ip, lsl #24
    5b58:	str	r1, [sp, #108]	; 0x6c
    5b5c:	ldrd	r0, [sp, #104]	; 0x68
    5b60:	ldrd	r6, [sp, #96]	; 0x60
    5b64:	orr	r8, r8, r2, lsl #25
    5b68:	eor	r5, r5, fp
    5b6c:	eor	r6, r6, r0
    5b70:	eor	r7, r7, r1
    5b74:	ldrd	r0, [sp]
    5b78:	lsr	r9, r2, #7
    5b7c:	add	r3, r3, #8
    5b80:	adds	r0, r0, r4
    5b84:	eor	r4, r6, r8
    5b88:	adc	r1, r1, r5
    5b8c:	adds	r0, r0, r4
    5b90:	eor	r5, r7, r9
    5b94:	adc	r1, r1, r5
    5b98:	cmp	r3, lr
    5b9c:	strd	r0, [r3, #120]	; 0x78
    5ba0:	bne	5aac <rb_sha512_process_block+0xec>
    5ba4:	ldr	r3, [pc, #872]	; 5f14 <rb_sha512_process_block+0x554>
    5ba8:	strd	r8, [sp, #224]	; 0xe0
    5bac:	str	r3, [sp, #112]	; 0x70
    5bb0:	ldr	r3, [pc, #864]	; 5f18 <rb_sha512_process_block+0x558>
    5bb4:	str	lr, [sp, #216]	; 0xd8
    5bb8:	str	r3, [sp, #116]	; 0x74
    5bbc:	ldrd	r2, [sp, #200]	; 0xc8
    5bc0:	ldrd	r6, [sp, #152]	; 0x98
    5bc4:	ldrd	r8, [sp, #184]	; 0xb8
    5bc8:	strd	r2, [sp, #128]	; 0x80
    5bcc:	ldrd	r2, [sp, #192]	; 0xc0
    5bd0:	mov	ip, #0
    5bd4:	strd	sl, [sp, #232]	; 0xe8
    5bd8:	strd	r2, [sp, #16]
    5bdc:	ldrd	r2, [sp, #144]	; 0x90
    5be0:	ldr	lr, [sp, #220]	; 0xdc
    5be4:	strd	r2, [sp, #24]
    5be8:	ldrd	r2, [sp, #160]	; 0xa0
    5bec:	strd	r2, [sp, #120]	; 0x78
    5bf0:	ldrd	r2, [sp, #168]	; 0xa8
    5bf4:	strd	r2, [sp, #8]
    5bf8:	ldrd	r2, [sp, #176]	; 0xb0
    5bfc:	strd	r2, [sp]
    5c00:	b	5c48 <rb_sha512_process_block+0x288>
    5c04:	ldrd	r0, [sp, #8]
    5c08:	ldr	r3, [sp, #208]	; 0xd0
    5c0c:	strd	r0, [sp, #120]	; 0x78
    5c10:	ldrd	r0, [sp, #16]
    5c14:	ldrd	r2, [r3, ip]
    5c18:	strd	r0, [sp, #128]	; 0x80
    5c1c:	ldrd	r0, [sp]
    5c20:	strd	r8, [sp]
    5c24:	mov	r8, r4
    5c28:	strd	r0, [sp, #8]
    5c2c:	ldrd	r0, [sp, #24]
    5c30:	mov	r9, r5
    5c34:	strd	r6, [sp, #24]
    5c38:	mov	r6, sl
    5c3c:	mov	r7, fp
    5c40:	strd	r0, [sp, #16]
    5c44:	strd	r2, [sp, #112]	; 0x70
    5c48:	lsr	r3, r6, #18
    5c4c:	orr	r3, r3, r7, lsl #14
    5c50:	lsr	r2, r6, #14
    5c54:	str	r3, [sp, #40]	; 0x28
    5c58:	orr	r2, r2, r7, lsl #18
    5c5c:	lsl	r3, r7, #23
    5c60:	str	r2, [sp, #32]
    5c64:	orr	r3, r3, r6, lsr #9
    5c68:	lsr	r1, r7, #14
    5c6c:	lsr	r2, r7, #18
    5c70:	str	r3, [sp, #52]	; 0x34
    5c74:	orr	r1, r1, r6, lsl #18
    5c78:	orr	r2, r2, r6, lsl #14
    5c7c:	lsl	r3, r6, #23
    5c80:	str	r2, [sp, #44]	; 0x2c
    5c84:	str	r1, [sp, #36]	; 0x24
    5c88:	orr	r3, r3, r7, lsr #9
    5c8c:	ldrd	r4, [sp, #40]	; 0x28
    5c90:	ldrd	r0, [sp, #32]
    5c94:	str	r3, [sp, #48]	; 0x30
    5c98:	ldrd	r2, [sp, #48]	; 0x30
    5c9c:	eor	r0, r0, r4
    5ca0:	eor	r1, r1, r5
    5ca4:	eor	r2, r2, r0
    5ca8:	eor	r3, r3, r1
    5cac:	ldrd	r4, [sp, #24]
    5cb0:	strd	r2, [sp, #136]	; 0x88
    5cb4:	ldrd	r2, [sp, #16]
    5cb8:	and	r4, r4, r6
    5cbc:	and	r5, r5, r7
    5cc0:	lsr	fp, r8, #28
    5cc4:	bic	r2, r2, r6
    5cc8:	bic	r3, r3, r7
    5ccc:	eor	r1, r5, r3
    5cd0:	eor	r0, r4, r2
    5cd4:	orr	r5, fp, r9, lsl #4
    5cd8:	str	r5, [sp, #56]	; 0x38
    5cdc:	mov	r4, r0
    5ce0:	mov	r5, r1
    5ce4:	ldrd	r0, [sp, #136]	; 0x88
    5ce8:	lsl	r3, r9, #30
    5cec:	ldrd	sl, [sp, #8]
    5cf0:	adds	r0, r0, r4
    5cf4:	adc	r1, r1, r5
    5cf8:	mov	r4, r0
    5cfc:	mov	r5, r1
    5d00:	orr	r3, r3, r8, lsr #2
    5d04:	strd	r4, [sp, #136]	; 0x88
    5d08:	str	r3, [sp, #68]	; 0x44
    5d0c:	ldrd	r4, [sp]
    5d10:	lsr	r3, r9, #28
    5d14:	lsl	r1, r8, #30
    5d18:	orr	r3, r3, r8, lsl #4
    5d1c:	str	r3, [sp, #60]	; 0x3c
    5d20:	mov	r0, sl
    5d24:	orr	r3, r1, r9, lsr #2
    5d28:	mov	r1, fp
    5d2c:	eor	r0, r0, r4
    5d30:	eor	r1, r1, r5
    5d34:	ldrd	r4, [lr, ip]
    5d38:	strd	r0, [sp, #8]
    5d3c:	ldrd	r0, [sp, #136]	; 0x88
    5d40:	lsl	r2, r9, #25
    5d44:	str	r3, [sp, #64]	; 0x40
    5d48:	orr	r3, r2, r8, lsr #7
    5d4c:	adds	r0, r0, r4
    5d50:	str	r3, [sp, #76]	; 0x4c
    5d54:	lsl	r3, r8, #25
    5d58:	adc	r1, r1, r5
    5d5c:	orr	r3, r3, r9, lsr #7
    5d60:	mov	r4, r0
    5d64:	mov	r5, r1
    5d68:	str	r3, [sp, #72]	; 0x48
    5d6c:	ldrd	r0, [sp, #64]	; 0x40
    5d70:	ldrd	r2, [sp, #56]	; 0x38
    5d74:	add	ip, ip, #8
    5d78:	eor	r2, r2, r0
    5d7c:	eor	r3, r3, r1
    5d80:	strd	r2, [sp, #136]	; 0x88
    5d84:	ldrd	r2, [sp, #8]
    5d88:	strd	sl, [sp, #8]
    5d8c:	and	r0, r2, r8
    5d90:	and	r1, r3, r9
    5d94:	ldrd	r2, [sp, #128]	; 0x80
    5d98:	adds	r2, r2, r4
    5d9c:	adc	r3, r3, r5
    5da0:	mov	r4, sl
    5da4:	strd	r2, [sp, #128]	; 0x80
    5da8:	ldrd	r2, [sp]
    5dac:	mov	r5, fp
    5db0:	ldrd	sl, [sp, #136]	; 0x88
    5db4:	and	r4, r4, r2
    5db8:	and	r5, r5, r3
    5dbc:	ldrd	r2, [sp, #72]	; 0x48
    5dc0:	eor	r4, r4, r0
    5dc4:	eor	r5, r5, r1
    5dc8:	eor	sl, sl, r2
    5dcc:	eor	fp, fp, r3
    5dd0:	ldrd	r0, [sp, #128]	; 0x80
    5dd4:	mov	r2, sl
    5dd8:	mov	r3, fp
    5ddc:	ldrd	sl, [sp, #112]	; 0x70
    5de0:	adds	sl, sl, r0
    5de4:	adc	fp, fp, r1
    5de8:	mov	r0, sl
    5dec:	adds	sl, r4, r2
    5df0:	mov	r1, fp
    5df4:	adc	fp, r5, r3
    5df8:	mov	r4, sl
    5dfc:	mov	r5, fp
    5e00:	ldrd	sl, [sp, #120]	; 0x78
    5e04:	adds	sl, sl, r0
    5e08:	adc	fp, fp, r1
    5e0c:	adds	r4, r4, r0
    5e10:	adc	r5, r5, r1
    5e14:	cmp	ip, #640	; 0x280
    5e18:	bne	5c04 <rb_sha512_process_block+0x244>
    5e1c:	ldrd	r0, [sp, #184]	; 0xb8
    5e20:	ldrd	r2, [sp, #144]	; 0x90
    5e24:	adds	r0, r0, r4
    5e28:	adc	r1, r1, r5
    5e2c:	ldrd	r4, [sp, #168]	; 0xa8
    5e30:	strd	r0, [sp, #184]	; 0xb8
    5e34:	ldrd	r0, [sp, #176]	; 0xb0
    5e38:	adds	r0, r0, r8
    5e3c:	adc	r1, r1, r9
    5e40:	strd	r0, [sp, #176]	; 0xb0
    5e44:	ldrd	r0, [sp]
    5e48:	adds	r0, r0, r4
    5e4c:	adc	r1, r1, r5
    5e50:	ldrd	r4, [sp, #160]	; 0xa0
    5e54:	strd	r0, [sp, #168]	; 0xa8
    5e58:	ldrd	r0, [sp, #8]
    5e5c:	adds	r0, r0, r4
    5e60:	adc	r1, r1, r5
    5e64:	strd	r0, [sp, #160]	; 0xa0
    5e68:	ldrd	r0, [sp, #152]	; 0x98
    5e6c:	adds	r0, r0, sl
    5e70:	adc	r1, r1, fp
    5e74:	adds	r2, r2, r6
    5e78:	adc	r3, r3, r7
    5e7c:	strd	r0, [sp, #152]	; 0x98
    5e80:	strd	r2, [sp, #144]	; 0x90
    5e84:	ldrd	r0, [sp, #192]	; 0xc0
    5e88:	ldrd	r2, [sp, #24]
    5e8c:	adds	r2, r2, r0
    5e90:	adc	r3, r3, r1
    5e94:	ldrd	r0, [sp, #200]	; 0xc8
    5e98:	strd	r2, [sp, #192]	; 0xc0
    5e9c:	ldrd	r2, [sp, #16]
    5ea0:	adds	r2, r2, r0
    5ea4:	adc	r3, r3, r1
    5ea8:	strd	r2, [sp, #200]	; 0xc8
    5eac:	ldr	r3, [sp, #212]	; 0xd4
    5eb0:	ldr	r2, [sp, #240]	; 0xf0
    5eb4:	subs	r3, r3, #16
    5eb8:	str	r3, [sp, #212]	; 0xd4
    5ebc:	bne	5a78 <rb_sha512_process_block+0xb8>
    5ec0:	ldr	r3, [sp, #244]	; 0xf4
    5ec4:	ldrd	r0, [sp, #184]	; 0xb8
    5ec8:	strd	r0, [r3]
    5ecc:	ldrd	r0, [sp, #176]	; 0xb0
    5ed0:	strd	r0, [r3, #8]
    5ed4:	ldrd	r0, [sp, #168]	; 0xa8
    5ed8:	strd	r0, [r3, #16]
    5edc:	ldrd	r0, [sp, #160]	; 0xa0
    5ee0:	strd	r0, [r3, #24]
    5ee4:	ldrd	r0, [sp, #152]	; 0x98
    5ee8:	strd	r0, [r3, #32]
    5eec:	ldrd	r0, [sp, #144]	; 0x90
    5ef0:	strd	r0, [r3, #40]	; 0x28
    5ef4:	ldrd	r0, [sp, #192]	; 0xc0
    5ef8:	strd	r0, [r3, #48]	; 0x30
    5efc:	mov	r1, r3
    5f00:	ldrd	r2, [sp, #200]	; 0xc8
    5f04:	strd	r2, [r1, #56]	; 0x38
    5f08:	add	sp, sp, #892	; 0x37c
    5f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f10:	.word	0x0000f604
    5f14:	.word	0xd728ae22
    5f18:	.word	0x428a2f98

00005f1c <MD5Transform>:
    5f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f20:	sub	sp, sp, #68	; 0x44
    5f24:	ldm	r0, {r7, lr}
    5f28:	ldr	r5, [r0, #8]
    5f2c:	ldr	r6, [r0, #12]
    5f30:	mov	ip, r0
    5f34:	mov	r4, r1
    5f38:	add	sl, r1, #64	; 0x40
    5f3c:	mov	r9, sp
    5f40:	ldr	r0, [r4]
    5f44:	ldr	r1, [r4, #4]
    5f48:	ldr	r2, [r4, #8]
    5f4c:	ldr	r3, [r4, #12]
    5f50:	mov	r8, r9
    5f54:	add	r4, r4, #16
    5f58:	cmp	r4, sl
    5f5c:	stmia	r8!, {r0, r1, r2, r3}
    5f60:	mov	r9, r8
    5f64:	bne	5f40 <MD5Transform+0x24>
    5f68:	ldr	r2, [sp]
    5f6c:	ldr	r3, [pc, #2240]	; 6834 <MD5Transform+0x918>
    5f70:	eor	sl, r5, r6
    5f74:	add	r3, r2, r3
    5f78:	and	sl, sl, lr
    5f7c:	add	r3, r3, r7
    5f80:	eor	sl, sl, r6
    5f84:	add	sl, sl, r3
    5f88:	ldr	r2, [sp, #4]
    5f8c:	ldr	r3, [pc, #2212]	; 6838 <MD5Transform+0x91c>
    5f90:	add	sl, lr, sl, ror #25
    5f94:	eor	r9, lr, r5
    5f98:	and	r9, r9, sl
    5f9c:	add	r3, r2, r3
    5fa0:	add	r3, r3, r6
    5fa4:	eor	r9, r9, r5
    5fa8:	add	r9, r9, r3
    5fac:	ldr	r2, [sp, #8]
    5fb0:	ldr	r3, [pc, #2180]	; 683c <MD5Transform+0x920>
    5fb4:	add	r9, sl, r9, ror #20
    5fb8:	eor	r4, lr, sl
    5fbc:	and	r4, r4, r9
    5fc0:	add	r3, r2, r3
    5fc4:	add	r3, r3, r5
    5fc8:	eor	r4, r4, lr
    5fcc:	add	r4, r4, r3
    5fd0:	ldr	r2, [sp, #12]
    5fd4:	ldr	r3, [pc, #2148]	; 6840 <MD5Transform+0x924>
    5fd8:	add	r4, r9, r4, ror #15
    5fdc:	eor	r1, sl, r9
    5fe0:	and	r1, r1, r4
    5fe4:	add	r3, r2, r3
    5fe8:	add	r3, r3, lr
    5fec:	eor	r1, r1, sl
    5ff0:	add	r1, r1, r3
    5ff4:	ldr	r0, [pc, #2120]	; 6844 <MD5Transform+0x928>
    5ff8:	ldr	r3, [sp, #16]
    5ffc:	add	r1, r4, r1, ror #10
    6000:	eor	r2, r9, r4
    6004:	add	r0, r3, r0
    6008:	and	r2, r2, r1
    600c:	add	sl, r0, sl
    6010:	eor	r3, r2, r9
    6014:	add	r3, r3, sl
    6018:	ldr	r8, [sp, #20]
    601c:	ldr	r0, [pc, #2084]	; 6848 <MD5Transform+0x92c>
    6020:	add	r3, r1, r3, ror #25
    6024:	eor	r2, r4, r1
    6028:	add	r0, r8, r0
    602c:	and	r2, r2, r3
    6030:	add	r9, r0, r9
    6034:	eor	r8, r2, r4
    6038:	add	r8, r8, r9
    603c:	ldr	r0, [sp, #24]
    6040:	ldr	fp, [pc, #2052]	; 684c <MD5Transform+0x930>
    6044:	add	r8, r3, r8, ror #20
    6048:	eor	r2, r1, r3
    604c:	add	fp, r0, fp
    6050:	and	r2, r2, r8
    6054:	add	r4, fp, r4
    6058:	eor	r0, r2, r1
    605c:	add	r0, r0, r4
    6060:	ldr	r9, [sp, #28]
    6064:	ldr	r2, [pc, #2020]	; 6850 <MD5Transform+0x934>
    6068:	add	r0, r8, r0, ror #15
    606c:	eor	r4, r3, r8
    6070:	add	r2, r9, r2
    6074:	and	r4, r4, r0
    6078:	add	r1, r2, r1
    607c:	eor	r2, r4, r3
    6080:	add	r2, r2, r1
    6084:	ldr	r9, [sp, #32]
    6088:	ldr	r4, [pc, #1988]	; 6854 <MD5Transform+0x938>
    608c:	add	r2, r0, r2, ror #10
    6090:	eor	r1, r8, r0
    6094:	add	r4, r9, r4
    6098:	and	r1, r1, r2
    609c:	add	r3, r4, r3
    60a0:	eor	fp, r1, r8
    60a4:	add	fp, fp, r3
    60a8:	ldr	r4, [sp, #36]	; 0x24
    60ac:	ldr	r1, [pc, #1956]	; 6858 <MD5Transform+0x93c>
    60b0:	add	fp, r2, fp, ror #25
    60b4:	eor	r3, r0, r2
    60b8:	add	r1, r4, r1
    60bc:	and	r3, r3, fp
    60c0:	add	r8, r1, r8
    60c4:	eor	sl, r3, r0
    60c8:	add	sl, sl, r8
    60cc:	ldr	r3, [sp, #40]	; 0x28
    60d0:	add	sl, fp, sl, ror #20
    60d4:	sub	r1, r3, #41984	; 0xa400
    60d8:	eor	r3, r2, fp
    60dc:	and	r3, r3, sl
    60e0:	sub	r1, r1, #79	; 0x4f
    60e4:	add	r0, r1, r0
    60e8:	eor	r4, r3, r2
    60ec:	add	r4, r4, r0
    60f0:	ldr	r1, [sp, #44]	; 0x2c
    60f4:	ldr	r8, [pc, #1888]	; 685c <MD5Transform+0x940>
    60f8:	add	r4, sl, r4, ror #15
    60fc:	eor	r3, fp, sl
    6100:	add	r8, r1, r8
    6104:	and	r3, r3, r4
    6108:	add	r2, r8, r2
    610c:	eor	r1, r3, fp
    6110:	add	r1, r1, r2
    6114:	ldr	r9, [sp, #48]	; 0x30
    6118:	ldr	r3, [pc, #1856]	; 6860 <MD5Transform+0x944>
    611c:	add	r1, r4, r1, ror #10
    6120:	eor	r2, sl, r4
    6124:	add	r3, r9, r3
    6128:	and	r2, r2, r1
    612c:	add	fp, r3, fp
    6130:	eor	r3, r2, sl
    6134:	add	r3, r3, fp
    6138:	ldr	r8, [sp, #52]	; 0x34
    613c:	ldr	r0, [pc, #1824]	; 6864 <MD5Transform+0x948>
    6140:	add	r3, r1, r3, ror #25
    6144:	eor	r2, r4, r1
    6148:	add	r0, r8, r0
    614c:	and	r2, r2, r3
    6150:	add	sl, r0, sl
    6154:	eor	r8, r2, r4
    6158:	add	r8, r8, sl
    615c:	ldr	fp, [pc, #1796]	; 6868 <MD5Transform+0x94c>
    6160:	ldr	sl, [sp, #56]	; 0x38
    6164:	add	r8, r3, r8, ror #20
    6168:	eor	r2, r1, r3
    616c:	add	fp, sl, fp
    6170:	and	r2, r2, r8
    6174:	add	r4, fp, r4
    6178:	eor	r0, r2, r1
    617c:	add	r0, r0, r4
    6180:	ldr	fp, [sp, #60]	; 0x3c
    6184:	ldr	r2, [pc, #1760]	; 686c <MD5Transform+0x950>
    6188:	add	r0, r8, r0, ror #15
    618c:	eor	r4, r3, r8
    6190:	add	r2, fp, r2
    6194:	and	r4, r4, r0
    6198:	add	r1, r2, r1
    619c:	eor	r2, r4, r3
    61a0:	add	r2, r2, r1
    61a4:	ldr	fp, [sp, #4]
    61a8:	add	r2, r0, r2, ror #10
    61ac:	ldr	r4, [pc, #1724]	; 6870 <MD5Transform+0x954>
    61b0:	eor	r1, r0, r2
    61b4:	add	r4, fp, r4
    61b8:	and	r1, r1, r8
    61bc:	add	r3, r4, r3
    61c0:	eor	fp, r1, r0
    61c4:	add	fp, fp, r3
    61c8:	ldr	r4, [sp, #24]
    61cc:	add	fp, r2, fp, ror #27
    61d0:	ldr	r1, [pc, #1692]	; 6874 <MD5Transform+0x958>
    61d4:	eor	r3, r2, fp
    61d8:	add	r1, r4, r1
    61dc:	and	r3, r3, r0
    61e0:	eor	r3, r3, r2
    61e4:	add	r8, r1, r8
    61e8:	add	r8, r3, r8
    61ec:	ldr	r1, [sp, #44]	; 0x2c
    61f0:	add	r8, fp, r8, ror #23
    61f4:	ldr	r4, [pc, #1660]	; 6878 <MD5Transform+0x95c>
    61f8:	eor	r3, fp, r8
    61fc:	add	r4, r1, r4
    6200:	and	r3, r3, r2
    6204:	add	r0, r4, r0
    6208:	eor	r4, r3, fp
    620c:	add	r4, r4, r0
    6210:	ldr	r1, [pc, #1636]	; 687c <MD5Transform+0x960>
    6214:	add	r4, r8, r4, ror #18
    6218:	ldr	r0, [sp]
    621c:	eor	r3, r8, r4
    6220:	add	r1, r0, r1
    6224:	and	r3, r3, fp
    6228:	eor	r3, r3, r8
    622c:	add	r2, r1, r2
    6230:	add	r2, r3, r2
    6234:	ldr	r0, [sp, #20]
    6238:	add	r2, r4, r2, ror #12
    623c:	ldr	r3, [pc, #1596]	; 6880 <MD5Transform+0x964>
    6240:	eor	r1, r4, r2
    6244:	add	r3, r0, r3
    6248:	and	r1, r1, r8
    624c:	add	fp, r3, fp
    6250:	eor	r3, r1, r4
    6254:	add	r3, r3, fp
    6258:	ldr	r1, [pc, #1572]	; 6884 <MD5Transform+0x968>
    625c:	add	r3, r2, r3, ror #27
    6260:	ldr	fp, [sp, #40]	; 0x28
    6264:	eor	r0, r2, r3
    6268:	add	r1, fp, r1
    626c:	and	r0, r0, r4
    6270:	add	r8, r1, r8
    6274:	eor	r1, r0, r2
    6278:	add	r1, r1, r8
    627c:	ldr	fp, [sp, #60]	; 0x3c
    6280:	add	r1, r3, r1, ror #23
    6284:	ldr	r0, [pc, #1532]	; 6888 <MD5Transform+0x96c>
    6288:	eor	r8, r3, r1
    628c:	add	r0, fp, r0
    6290:	and	r8, r8, r2
    6294:	add	r4, r0, r4
    6298:	eor	r0, r8, r3
    629c:	add	r0, r0, r4
    62a0:	ldr	fp, [sp, #16]
    62a4:	add	r0, r1, r0, ror #18
    62a8:	ldr	r8, [pc, #1500]	; 688c <MD5Transform+0x970>
    62ac:	eor	r4, r1, r0
    62b0:	add	r8, fp, r8
    62b4:	and	r4, r4, r3
    62b8:	eor	r4, r4, r1
    62bc:	add	r2, r8, r2
    62c0:	add	r2, r4, r2
    62c4:	ldr	fp, [sp, #36]	; 0x24
    62c8:	add	r2, r0, r2, ror #12
    62cc:	ldr	r8, [pc, #1468]	; 6890 <MD5Transform+0x974>
    62d0:	eor	r4, r0, r2
    62d4:	add	r8, fp, r8
    62d8:	and	r4, r4, r1
    62dc:	add	r3, r8, r3
    62e0:	eor	fp, r4, r0
    62e4:	add	fp, fp, r3
    62e8:	ldr	r4, [pc, #1444]	; 6894 <MD5Transform+0x978>
    62ec:	add	fp, r2, fp, ror #27
    62f0:	eor	r3, r2, fp
    62f4:	add	r4, sl, r4
    62f8:	and	r3, r3, r0
    62fc:	add	r1, r4, r1
    6300:	eor	r8, r3, r2
    6304:	add	r8, r8, r1
    6308:	ldr	r4, [pc, #1416]	; 6898 <MD5Transform+0x97c>
    630c:	add	r8, fp, r8, ror #23
    6310:	ldr	r1, [sp, #12]
    6314:	eor	r3, fp, r8
    6318:	add	r4, r1, r4
    631c:	and	r3, r3, r2
    6320:	add	r0, r4, r0
    6324:	eor	r4, r3, fp
    6328:	add	r4, r4, r0
    632c:	ldr	r1, [pc, #1384]	; 689c <MD5Transform+0x980>
    6330:	add	r4, r8, r4, ror #18
    6334:	ldr	r0, [sp, #32]
    6338:	eor	r3, r8, r4
    633c:	add	r1, r0, r1
    6340:	and	r3, r3, fp
    6344:	eor	r3, r3, r8
    6348:	add	r2, r1, r2
    634c:	add	r2, r3, r2
    6350:	ldr	r0, [sp, #52]	; 0x34
    6354:	add	r2, r4, r2, ror #12
    6358:	ldr	r3, [pc, #1344]	; 68a0 <MD5Transform+0x984>
    635c:	eor	r1, r4, r2
    6360:	add	r3, r0, r3
    6364:	and	r1, r1, r8
    6368:	add	fp, r3, fp
    636c:	eor	r3, r1, r4
    6370:	add	r3, r3, fp
    6374:	ldr	r1, [pc, #1320]	; 68a4 <MD5Transform+0x988>
    6378:	add	r3, r2, r3, ror #27
    637c:	ldr	fp, [sp, #8]
    6380:	eor	r0, r2, r3
    6384:	add	r1, fp, r1
    6388:	and	r0, r0, r4
    638c:	add	r8, r1, r8
    6390:	eor	r1, r0, r2
    6394:	add	r1, r1, r8
    6398:	ldr	fp, [sp, #28]
    639c:	add	r1, r3, r1, ror #23
    63a0:	ldr	r0, [pc, #1280]	; 68a8 <MD5Transform+0x98c>
    63a4:	eor	r8, r3, r1
    63a8:	add	r0, fp, r0
    63ac:	and	r8, r8, r2
    63b0:	add	r4, r0, r4
    63b4:	eor	r0, r8, r3
    63b8:	add	r0, r0, r4
    63bc:	ldr	r8, [pc, #1256]	; 68ac <MD5Transform+0x990>
    63c0:	add	r0, r1, r0, ror #18
    63c4:	eor	fp, r1, r0
    63c8:	add	r8, r9, r8
    63cc:	and	r4, r3, fp
    63d0:	eor	r4, r4, r1
    63d4:	add	r2, r8, r2
    63d8:	add	r2, r4, r2
    63dc:	ldr	r8, [pc, #1228]	; 68b0 <MD5Transform+0x994>
    63e0:	ldr	r4, [sp, #20]
    63e4:	add	r2, r0, r2, ror #12
    63e8:	add	r8, r4, r8
    63ec:	eor	fp, fp, r2
    63f0:	add	r3, r8, r3
    63f4:	ldr	r4, [sp, #32]
    63f8:	add	r3, fp, r3
    63fc:	ldr	fp, [pc, #1200]	; 68b4 <MD5Transform+0x998>
    6400:	add	r3, r2, r3, ror #28
    6404:	add	fp, r4, fp
    6408:	eor	r4, r0, r2
    640c:	eor	r4, r4, r3
    6410:	add	r1, fp, r1
    6414:	add	r1, r4, r1
    6418:	ldr	r8, [pc, #1176]	; 68b8 <MD5Transform+0x99c>
    641c:	ldr	r4, [sp, #44]	; 0x2c
    6420:	add	r1, r3, r1, ror #21
    6424:	add	r8, r4, r8
    6428:	eor	r4, r2, r3
    642c:	eor	r4, r4, r1
    6430:	add	r0, r8, r0
    6434:	add	r0, r4, r0
    6438:	ldr	r8, [pc, #1148]	; 68bc <MD5Transform+0x9a0>
    643c:	add	r0, r1, r0, ror #16
    6440:	add	r8, sl, r8
    6444:	eor	fp, r3, r1
    6448:	eor	fp, fp, r0
    644c:	add	r2, r8, r2
    6450:	ldr	r4, [sp, #4]
    6454:	add	r2, fp, r2
    6458:	ldr	fp, [pc, #1120]	; 68c0 <MD5Transform+0x9a4>
    645c:	add	r2, r0, r2, ror #9
    6460:	add	fp, r4, fp
    6464:	eor	r4, r1, r0
    6468:	add	r3, fp, r3
    646c:	eor	fp, r4, r2
    6470:	add	fp, fp, r3
    6474:	ldr	r4, [pc, #1096]	; 68c4 <MD5Transform+0x9a8>
    6478:	ldr	r3, [sp, #16]
    647c:	add	fp, r2, fp, ror #28
    6480:	add	r4, r3, r4
    6484:	eor	r3, r0, r2
    6488:	eor	r3, r3, fp
    648c:	add	r1, r4, r1
    6490:	add	r1, r3, r1
    6494:	ldr	r4, [pc, #1068]	; 68c8 <MD5Transform+0x9ac>
    6498:	ldr	r3, [sp, #28]
    649c:	add	r1, fp, r1, ror #21
    64a0:	add	r4, r3, r4
    64a4:	eor	r3, r2, fp
    64a8:	eor	r3, r3, r1
    64ac:	add	r0, r4, r0
    64b0:	add	r0, r3, r0
    64b4:	ldr	r8, [pc, #1040]	; 68cc <MD5Transform+0x9b0>
    64b8:	ldr	r3, [sp, #40]	; 0x28
    64bc:	add	r0, r1, r0, ror #16
    64c0:	add	r8, r3, r8
    64c4:	eor	r3, fp, r1
    64c8:	add	r2, r8, r2
    64cc:	eor	r8, r3, r0
    64d0:	add	r8, r8, r2
    64d4:	ldr	r3, [sp, #52]	; 0x34
    64d8:	ldr	r2, [pc, #1008]	; 68d0 <MD5Transform+0x9b4>
    64dc:	add	r8, r0, r8, ror #9
    64e0:	eor	r4, r1, r0
    64e4:	add	r2, r3, r2
    64e8:	add	fp, r2, fp
    64ec:	eor	r2, r4, r8
    64f0:	ldr	r3, [sp]
    64f4:	add	r2, r2, fp
    64f8:	ldr	r4, [pc, #980]	; 68d4 <MD5Transform+0x9b8>
    64fc:	add	r2, r8, r2, ror #28
    6500:	add	r4, r3, r4
    6504:	eor	r3, r0, r8
    6508:	add	r1, r4, r1
    650c:	eor	fp, r3, r2
    6510:	add	fp, fp, r1
    6514:	ldr	r3, [sp, #12]
    6518:	ldr	r4, [pc, #952]	; 68d8 <MD5Transform+0x9bc>
    651c:	add	fp, r2, fp, ror #21
    6520:	add	r4, r3, r4
    6524:	eor	r3, r8, r2
    6528:	add	r0, r4, r0
    652c:	eor	r4, r3, fp
    6530:	ldr	r1, [sp, #24]
    6534:	add	r4, r4, r0
    6538:	ldr	r3, [pc, #924]	; 68dc <MD5Transform+0x9c0>
    653c:	add	r4, fp, r4, ror #16
    6540:	add	r3, r1, r3
    6544:	eor	r1, r2, fp
    6548:	add	r8, r3, r8
    654c:	eor	r3, r1, r4
    6550:	add	r3, r3, r8
    6554:	ldr	r1, [sp, #36]	; 0x24
    6558:	ldr	r0, [pc, #896]	; 68e0 <MD5Transform+0x9c4>
    655c:	add	r3, r4, r3, ror #9
    6560:	add	r0, r1, r0
    6564:	eor	r1, fp, r4
    6568:	add	r2, r0, r2
    656c:	eor	r8, r1, r3
    6570:	add	r8, r8, r2
    6574:	ldr	r0, [pc, #872]	; 68e4 <MD5Transform+0x9c8>
    6578:	add	r8, r3, r8, ror #28
    657c:	eor	r2, r4, r3
    6580:	add	r0, r9, r0
    6584:	add	fp, r0, fp
    6588:	eor	r0, r2, r8
    658c:	add	r0, r0, fp
    6590:	ldr	r2, [sp, #60]	; 0x3c
    6594:	ldr	r1, [pc, #844]	; 68e8 <MD5Transform+0x9cc>
    6598:	add	r0, r8, r0, ror #21
    659c:	add	r1, r2, r1
    65a0:	eor	r2, r3, r8
    65a4:	add	r4, r1, r4
    65a8:	eor	r1, r2, r0
    65ac:	add	r1, r1, r4
    65b0:	ldr	r2, [sp, #8]
    65b4:	ldr	r4, [pc, #816]	; 68ec <MD5Transform+0x9d0>
    65b8:	add	r1, r0, r1, ror #16
    65bc:	add	r4, r2, r4
    65c0:	eor	r2, r8, r0
    65c4:	add	r3, r4, r3
    65c8:	eor	r4, r2, r1
    65cc:	add	r4, r4, r3
    65d0:	ldr	fp, [sp]
    65d4:	ldr	r2, [pc, #788]	; 68f0 <MD5Transform+0x9d4>
    65d8:	add	r4, r1, r4, ror #9
    65dc:	mvn	r3, r0
    65e0:	add	r2, fp, r2
    65e4:	orr	r3, r3, r4
    65e8:	add	r8, r2, r8
    65ec:	eor	r2, r3, r1
    65f0:	add	r2, r2, r8
    65f4:	ldr	fp, [pc, #760]	; 68f4 <MD5Transform+0x9d8>
    65f8:	ldr	r8, [sp, #28]
    65fc:	add	r2, r4, r2, ror #26
    6600:	mvn	r3, r1
    6604:	add	fp, r8, fp
    6608:	orr	r3, r3, r2
    660c:	eor	r3, r3, r4
    6610:	add	r0, fp, r0
    6614:	add	r0, r3, r0
    6618:	ldr	fp, [pc, #728]	; 68f8 <MD5Transform+0x9dc>
    661c:	add	r0, r2, r0, ror #22
    6620:	mvn	r8, r4
    6624:	add	fp, sl, fp
    6628:	orr	r8, r8, r0
    662c:	eor	r8, r8, r2
    6630:	add	r1, fp, r1
    6634:	add	r1, r8, r1
    6638:	ldr	sl, [sp, #20]
    663c:	ldr	r3, [pc, #696]	; 68fc <MD5Transform+0x9e0>
    6640:	add	r1, r0, r1, ror #17
    6644:	mvn	r8, r2
    6648:	add	r3, sl, r3
    664c:	orr	r8, r8, r1
    6650:	eor	r8, r8, r0
    6654:	add	r4, r3, r4
    6658:	add	r4, r8, r4
    665c:	ldr	sl, [pc, #668]	; 6900 <MD5Transform+0x9e4>
    6660:	add	r4, r1, r4, ror #11
    6664:	mvn	r3, r0
    6668:	add	sl, r9, sl
    666c:	orr	r3, r3, r4
    6670:	eor	r3, r3, r1
    6674:	add	r2, sl, r2
    6678:	add	r2, r3, r2
    667c:	ldr	fp, [pc, #640]	; 6904 <MD5Transform+0x9e8>
    6680:	ldr	r3, [sp, #12]
    6684:	add	r2, r4, r2, ror #26
    6688:	mvn	r8, r1
    668c:	add	fp, r3, fp
    6690:	orr	r8, r8, r2
    6694:	eor	r8, r8, r4
    6698:	add	r0, fp, r0
    669c:	add	r0, r8, r0
    66a0:	ldr	r9, [pc, #608]	; 6908 <MD5Transform+0x9ec>
    66a4:	ldr	r8, [sp, #40]	; 0x28
    66a8:	add	r0, r2, r0, ror #22
    66ac:	mvn	r3, r4
    66b0:	add	r9, r8, r9
    66b4:	orr	r3, r3, r0
    66b8:	eor	r3, r3, r2
    66bc:	add	r1, r9, r1
    66c0:	add	r1, r3, r1
    66c4:	ldr	r9, [sp, #4]
    66c8:	ldr	r8, [pc, #572]	; 690c <MD5Transform+0x9f0>
    66cc:	add	r1, r0, r1, ror #17
    66d0:	mvn	r3, r2
    66d4:	add	r8, r9, r8
    66d8:	orr	r3, r3, r1
    66dc:	eor	r3, r3, r0
    66e0:	add	r4, r8, r4
    66e4:	add	r4, r3, r4
    66e8:	ldr	sl, [pc, #544]	; 6910 <MD5Transform+0x9f4>
    66ec:	ldr	r3, [sp, #32]
    66f0:	add	r4, r1, r4, ror #11
    66f4:	mvn	r8, r0
    66f8:	add	sl, r3, sl
    66fc:	orr	r8, r8, r4
    6700:	eor	r8, r8, r1
    6704:	add	r2, sl, r2
    6708:	add	r2, r8, r2
    670c:	ldr	fp, [pc, #512]	; 6914 <MD5Transform+0x9f8>
    6710:	ldr	r8, [sp, #60]	; 0x3c
    6714:	add	r2, r4, r2, ror #26
    6718:	mvn	r3, r1
    671c:	add	fp, r8, fp
    6720:	orr	r3, r3, r2
    6724:	eor	r3, r3, r4
    6728:	add	r0, fp, r0
    672c:	add	r0, r3, r0
    6730:	ldr	r9, [pc, #480]	; 6918 <MD5Transform+0x9fc>
    6734:	ldr	r3, [sp, #24]
    6738:	add	r0, r2, r0, ror #22
    673c:	mvn	r8, r4
    6740:	add	r9, r3, r9
    6744:	orr	r8, r8, r0
    6748:	eor	r8, r8, r2
    674c:	add	r1, r9, r1
    6750:	add	r1, r8, r1
    6754:	ldr	sl, [pc, #448]	; 691c <MD5Transform+0xa00>
    6758:	ldr	r8, [sp, #52]	; 0x34
    675c:	add	r1, r0, r1, ror #17
    6760:	mvn	r3, r2
    6764:	add	sl, r8, sl
    6768:	orr	r3, r3, r1
    676c:	eor	r3, r3, r0
    6770:	add	r4, sl, r4
    6774:	add	r4, r3, r4
    6778:	ldr	r9, [pc, #416]	; 6920 <MD5Transform+0xa04>
    677c:	ldr	r3, [sp, #16]
    6780:	add	r4, r1, r4, ror #11
    6784:	mvn	r8, r0
    6788:	orr	r8, r8, r4
    678c:	add	r9, r3, r9
    6790:	add	r9, r9, r2
    6794:	eor	r2, r8, r1
    6798:	add	r2, r2, r9
    679c:	ldr	r8, [sp, #44]	; 0x2c
    67a0:	ldr	fp, [pc, #380]	; 6924 <MD5Transform+0xa08>
    67a4:	add	r2, r4, r2, ror #26
    67a8:	mvn	r3, r1
    67ac:	orr	r3, r3, r2
    67b0:	add	fp, r8, fp
    67b4:	add	fp, fp, r0
    67b8:	eor	r0, r3, r4
    67bc:	add	r0, r0, fp
    67c0:	ldr	r8, [sp, #8]
    67c4:	ldr	r9, [pc, #348]	; 6928 <MD5Transform+0xa0c>
    67c8:	add	r0, r2, r0, ror #22
    67cc:	mvn	r3, r4
    67d0:	orr	r3, r3, r0
    67d4:	add	r9, r8, r9
    67d8:	add	r9, r9, r1
    67dc:	eor	r1, r3, r2
    67e0:	add	r1, r1, r9
    67e4:	ldr	r8, [sp, #36]	; 0x24
    67e8:	ldr	sl, [pc, #316]	; 692c <MD5Transform+0xa10>
    67ec:	add	r1, r0, r1, ror #17
    67f0:	mvn	r3, r2
    67f4:	orr	r3, r3, r1
    67f8:	add	sl, r8, sl
    67fc:	eor	r3, r3, r0
    6800:	add	r4, sl, r4
    6804:	add	r4, r3, r4
    6808:	add	lr, lr, r1
    680c:	add	r7, r7, r2
    6810:	add	r6, r6, r0
    6814:	add	r5, r5, r1
    6818:	add	lr, lr, r4, ror #11
    681c:	str	r7, [ip]
    6820:	str	r6, [ip, #12]
    6824:	str	r5, [ip, #8]
    6828:	str	lr, [ip, #4]
    682c:	add	sp, sp, #68	; 0x44
    6830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6834:	.word	0xd76aa478
    6838:	.word	0xe8c7b756
    683c:	.word	0x242070db
    6840:	.word	0xc1bdceee
    6844:	.word	0xf57c0faf
    6848:	.word	0x4787c62a
    684c:	.word	0xa8304613
    6850:	.word	0xfd469501
    6854:	.word	0x698098d8
    6858:	.word	0x8b44f7af
    685c:	.word	0x895cd7be
    6860:	.word	0x6b901122
    6864:	.word	0xfd987193
    6868:	.word	0xa679438e
    686c:	.word	0x49b40821
    6870:	.word	0xf61e2562
    6874:	.word	0xc040b340
    6878:	.word	0x265e5a51
    687c:	.word	0xe9b6c7aa
    6880:	.word	0xd62f105d
    6884:	.word	0x02441453
    6888:	.word	0xd8a1e681
    688c:	.word	0xe7d3fbc8
    6890:	.word	0x21e1cde6
    6894:	.word	0xc33707d6
    6898:	.word	0xf4d50d87
    689c:	.word	0x455a14ed
    68a0:	.word	0xa9e3e905
    68a4:	.word	0xfcefa3f8
    68a8:	.word	0x676f02d9
    68ac:	.word	0x8d2a4c8a
    68b0:	.word	0xfffa3942
    68b4:	.word	0x8771f681
    68b8:	.word	0x6d9d6122
    68bc:	.word	0xfde5380c
    68c0:	.word	0xa4beea44
    68c4:	.word	0x4bdecfa9
    68c8:	.word	0xf6bb4b60
    68cc:	.word	0xbebfbc70
    68d0:	.word	0x289b7ec6
    68d4:	.word	0xeaa127fa
    68d8:	.word	0xd4ef3085
    68dc:	.word	0x04881d05
    68e0:	.word	0xd9d4d039
    68e4:	.word	0xe6db99e5
    68e8:	.word	0x1fa27cf8
    68ec:	.word	0xc4ac5665
    68f0:	.word	0xf4292244
    68f4:	.word	0x432aff97
    68f8:	.word	0xab9423a7
    68fc:	.word	0xfc93a039
    6900:	.word	0x655b59c3
    6904:	.word	0x8f0ccc92
    6908:	.word	0xffeff47d
    690c:	.word	0x85845dd1
    6910:	.word	0x6fa87e4f
    6914:	.word	0xfe2ce6e0
    6918:	.word	0xa3014314
    691c:	.word	0x4e0811a1
    6920:	.word	0xf7537e82
    6924:	.word	0xbd3af235
    6928:	.word	0x2ad7d2bb
    692c:	.word	0xeb86d391

00006930 <MD5Update>:
    6930:	push	{r4, r5, r6, r7, r8, lr}
    6934:	mov	r7, r2
    6938:	ldr	r5, [r0, #16]
    693c:	lsl	r2, r2, #3
    6940:	add	r3, r5, r2
    6944:	cmp	r2, r3
    6948:	str	r3, [r0, #16]
    694c:	lsr	r5, r5, #3
    6950:	ldr	r3, [r0, #20]
    6954:	and	r5, r5, #63	; 0x3f
    6958:	mov	r6, r0
    695c:	addhi	r3, r3, #1
    6960:	rsb	r4, r5, #64	; 0x40
    6964:	add	r3, r3, r7, lsr #29
    6968:	cmp	r7, r4
    696c:	mov	r8, r1
    6970:	add	r0, r5, #24
    6974:	str	r3, [r6, #20]
    6978:	movcc	r1, #0
    697c:	bcs	6994 <MD5Update+0x64>
    6980:	sub	r2, r7, r1
    6984:	add	r0, r6, r0
    6988:	add	r1, r8, r1
    698c:	pop	{r4, r5, r6, r7, r8, lr}
    6990:	b	4808 <memcpy@plt>
    6994:	mov	r2, r4
    6998:	mov	r1, r8
    699c:	add	r0, r6, r0
    69a0:	bl	4808 <memcpy@plt>
    69a4:	rsb	r5, r5, #127	; 0x7f
    69a8:	add	r1, r6, #24
    69ac:	mov	r0, r6
    69b0:	bl	5f1c <MD5Transform>
    69b4:	cmp	r7, r5
    69b8:	bls	69e4 <MD5Update+0xb4>
    69bc:	add	r1, r8, r4
    69c0:	mov	r0, r6
    69c4:	bl	5f1c <MD5Transform>
    69c8:	add	r3, r4, #127	; 0x7f
    69cc:	add	r1, r4, #64	; 0x40
    69d0:	cmp	r7, r3
    69d4:	mov	r4, r1
    69d8:	bhi	69bc <MD5Update+0x8c>
    69dc:	mov	r0, #24
    69e0:	b	6980 <MD5Update+0x50>
    69e4:	mov	r1, r4
    69e8:	b	69dc <MD5Update+0xac>

000069ec <MD5Final>:
    69ec:	add	r3, r1, #16
    69f0:	ldr	r2, [r1, #16]
    69f4:	push	{r4, r5, r6, lr}
    69f8:	mov	r4, r1
    69fc:	mov	r5, r0
    6a00:	ldm	r3, {r0, r1}
    6a04:	sub	sp, sp, #8
    6a08:	lsr	r2, r2, #3
    6a0c:	and	r2, r2, #63	; 0x3f
    6a10:	stm	sp, {r0, r1}
    6a14:	ldr	r1, [pc, #68]	; 6a60 <MD5Final+0x74>
    6a18:	cmp	r2, #55	; 0x37
    6a1c:	rsbls	r2, r2, #56	; 0x38
    6a20:	rsbhi	r2, r2, #120	; 0x78
    6a24:	mov	r0, r4
    6a28:	add	r1, pc, r1
    6a2c:	bl	6930 <MD5Update>
    6a30:	mov	r1, sp
    6a34:	mov	r0, r4
    6a38:	mov	r2, #8
    6a3c:	bl	6930 <MD5Update>
    6a40:	ldm	r4, {r0, r1, r2, r3}
    6a44:	stm	r5, {r0, r1, r2, r3}
    6a48:	mov	r0, r4
    6a4c:	mov	r2, #88	; 0x58
    6a50:	mov	r1, #0
    6a54:	add	sp, sp, #8
    6a58:	pop	{r4, r5, r6, lr}
    6a5c:	b	4628 <memset@plt>
    6a60:	.word	0x000219f8

00006a64 <rb_sha256_process_bytes>:
    6a64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    6a68:	mov	r6, r2
    6a6c:	ldr	r4, [r2, #40]	; 0x28
    6a70:	mov	r8, r0
    6a74:	cmp	r4, #0
    6a78:	mov	r5, r1
    6a7c:	bne	6b6c <rb_sha256_process_bytes+0x108>
    6a80:	cmp	r5, #63	; 0x3f
    6a84:	bls	6b60 <rb_sha256_process_bytes+0xfc>
    6a88:	tst	r8, #3
    6a8c:	beq	6b44 <rb_sha256_process_bytes+0xe0>
    6a90:	cmp	r5, #64	; 0x40
    6a94:	beq	6b18 <rb_sha256_process_bytes+0xb4>
    6a98:	add	r7, r6, #44	; 0x2c
    6a9c:	mov	sl, r5
    6aa0:	mov	r4, r8
    6aa4:	mov	r9, #64	; 0x40
    6aa8:	add	r2, r4, #64	; 0x40
    6aac:	mov	r3, r7
    6ab0:	ldr	lr, [r4]
    6ab4:	ldr	ip, [r4, #4]
    6ab8:	ldr	r0, [r4, #8]
    6abc:	ldr	r1, [r4, #12]
    6ac0:	add	r4, r4, #16
    6ac4:	cmp	r4, r2
    6ac8:	str	lr, [r3]
    6acc:	str	ip, [r3, #4]
    6ad0:	str	r0, [r3, #8]
    6ad4:	str	r1, [r3, #12]
    6ad8:	add	r3, r3, #16
    6adc:	bne	6ab0 <rb_sha256_process_bytes+0x4c>
    6ae0:	sub	sl, sl, #64	; 0x40
    6ae4:	mov	r2, r6
    6ae8:	mov	r1, r9
    6aec:	mov	r0, r7
    6af0:	bl	571c <rb_sha256_process_block>
    6af4:	cmp	sl, #64	; 0x40
    6af8:	bhi	6aa8 <rb_sha256_process_bytes+0x44>
    6afc:	sub	r3, r5, #65	; 0x41
    6b00:	bic	r2, r3, #63	; 0x3f
    6b04:	mov	r3, r2
    6b08:	sub	r5, r5, #64	; 0x40
    6b0c:	add	r2, r2, #64	; 0x40
    6b10:	sub	r5, r5, r3
    6b14:	add	r8, r8, r2
    6b18:	ldr	r4, [r6, #40]	; 0x28
    6b1c:	mov	r1, r8
    6b20:	add	r0, r4, #44	; 0x2c
    6b24:	add	r0, r6, r0
    6b28:	add	r4, r4, r5
    6b2c:	mov	r2, r5
    6b30:	bl	4808 <memcpy@plt>
    6b34:	cmp	r4, #63	; 0x3f
    6b38:	bhi	6bac <rb_sha256_process_bytes+0x148>
    6b3c:	str	r4, [r6, #40]	; 0x28
    6b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6b44:	bic	r4, r5, #63	; 0x3f
    6b48:	mov	r0, r8
    6b4c:	mov	r1, r4
    6b50:	mov	r2, r6
    6b54:	bl	571c <rb_sha256_process_block>
    6b58:	and	r5, r5, #63	; 0x3f
    6b5c:	add	r8, r8, r4
    6b60:	cmp	r5, #0
    6b64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    6b68:	b	6b18 <rb_sha256_process_bytes+0xb4>
    6b6c:	rsb	r7, r4, #128	; 0x80
    6b70:	cmp	r7, r1
    6b74:	movcs	r7, r1
    6b78:	add	r0, r4, #44	; 0x2c
    6b7c:	mov	r1, r8
    6b80:	mov	r2, r7
    6b84:	add	r0, r6, r0
    6b88:	bl	4808 <memcpy@plt>
    6b8c:	ldr	r1, [r6, #40]	; 0x28
    6b90:	add	r1, r7, r1
    6b94:	cmp	r1, #64	; 0x40
    6b98:	str	r1, [r6, #40]	; 0x28
    6b9c:	bhi	6bdc <rb_sha256_process_bytes+0x178>
    6ba0:	add	r8, r8, r7
    6ba4:	sub	r5, r5, r7
    6ba8:	b	6a80 <rb_sha256_process_bytes+0x1c>
    6bac:	add	r5, r6, #44	; 0x2c
    6bb0:	sub	r4, r4, #64	; 0x40
    6bb4:	mov	r0, r5
    6bb8:	mov	r2, r6
    6bbc:	mov	r1, #64	; 0x40
    6bc0:	bl	571c <rb_sha256_process_block>
    6bc4:	mov	r0, r5
    6bc8:	mov	r2, r4
    6bcc:	add	r1, r6, #108	; 0x6c
    6bd0:	bl	4808 <memcpy@plt>
    6bd4:	str	r4, [r6, #40]	; 0x28
    6bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6bdc:	add	r9, r6, #44	; 0x2c
    6be0:	mov	r0, r9
    6be4:	mov	r2, r6
    6be8:	bic	r1, r1, #63	; 0x3f
    6bec:	bl	571c <rb_sha256_process_block>
    6bf0:	ldr	r2, [r6, #40]	; 0x28
    6bf4:	add	r1, r4, r7
    6bf8:	bic	r1, r1, #63	; 0x3f
    6bfc:	and	r2, r2, #63	; 0x3f
    6c00:	add	r1, r1, #44	; 0x2c
    6c04:	add	r1, r6, r1
    6c08:	mov	r0, r9
    6c0c:	str	r2, [r6, #40]	; 0x28
    6c10:	bl	4808 <memcpy@plt>
    6c14:	b	6ba0 <rb_sha256_process_bytes+0x13c>

00006c18 <rb_sha256_finish_ctx>:
    6c18:	push	{r4, r5, r6, r7, r8, lr}
    6c1c:	mov	r5, r1
    6c20:	ldr	r6, [r0, #40]	; 0x28
    6c24:	ldr	r3, [r0, #32]
    6c28:	ldr	r1, [pc, #184]	; 6ce8 <rb_sha256_finish_ctx+0xd0>
    6c2c:	add	r3, r6, r3
    6c30:	cmp	r6, r3
    6c34:	str	r3, [r0, #32]
    6c38:	ldrhi	r3, [r0, #36]	; 0x24
    6c3c:	mov	r4, r0
    6c40:	addhi	r3, r3, #1
    6c44:	strhi	r3, [r0, #36]	; 0x24
    6c48:	cmp	r6, #55	; 0x37
    6c4c:	rsbhi	r7, r6, #120	; 0x78
    6c50:	rsbls	r7, r6, #56	; 0x38
    6c54:	add	r1, pc, r1
    6c58:	add	r0, r6, #44	; 0x2c
    6c5c:	add	r1, r1, #1744	; 0x6d0
    6c60:	add	r0, r4, r0
    6c64:	mov	r2, r7
    6c68:	bl	4808 <memcpy@plt>
    6c6c:	ldr	r3, [r4, #32]
    6c70:	add	r1, r7, r6
    6c74:	add	lr, r4, r1
    6c78:	lsl	ip, r3, #3
    6c7c:	lsl	r0, r3, #11
    6c80:	and	r0, r0, #16711680	; 0xff0000
    6c84:	orr	r0, r0, ip, lsr #24
    6c88:	lsr	ip, ip, #8
    6c8c:	orr	r0, r0, r3, lsl #27
    6c90:	and	ip, ip, #65280	; 0xff00
    6c94:	orr	r0, r0, ip
    6c98:	str	r0, [lr, #48]	; 0x30
    6c9c:	ldr	r2, [r4, #36]	; 0x24
    6ca0:	lsr	r3, r3, #29
    6ca4:	add	r1, r1, #8
    6ca8:	orr	r3, r3, r2, lsl #3
    6cac:	rev	r3, r3
    6cb0:	mov	r2, r4
    6cb4:	add	r0, r4, #44	; 0x2c
    6cb8:	str	r3, [lr, #44]	; 0x2c
    6cbc:	bl	571c <rb_sha256_process_block>
    6cc0:	sub	r2, r4, #4
    6cc4:	sub	r1, r5, #4
    6cc8:	add	r4, r4, #28
    6ccc:	ldr	r3, [r2, #4]!
    6cd0:	rev	r3, r3
    6cd4:	cmp	r2, r4
    6cd8:	str	r3, [r1, #4]!
    6cdc:	bne	6ccc <rb_sha256_finish_ctx+0xb4>
    6ce0:	mov	r0, r5
    6ce4:	pop	{r4, r5, r6, r7, r8, pc}
    6ce8:	.word	0x0000e40c

00006cec <rb_sha512_process_bytes>:
    6cec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    6cf0:	mov	r6, r2
    6cf4:	ldrd	r4, [r2, #80]	; 0x50
    6cf8:	mov	r9, r0
    6cfc:	mov	r8, r1
    6d00:	orrs	r3, r4, r5
    6d04:	bne	6dd4 <rb_sha512_process_bytes+0xe8>
    6d08:	cmp	r8, #127	; 0x7f
    6d0c:	bls	6dc8 <rb_sha512_process_bytes+0xdc>
    6d10:	tst	r9, #7
    6d14:	beq	6dac <rb_sha512_process_bytes+0xc0>
    6d18:	cmp	r8, #128	; 0x80
    6d1c:	beq	6d78 <rb_sha512_process_bytes+0x8c>
    6d20:	add	sl, r6, #88	; 0x58
    6d24:	mov	r5, r8
    6d28:	mov	r4, r9
    6d2c:	mov	r7, #128	; 0x80
    6d30:	mov	r1, r4
    6d34:	mov	r2, r7
    6d38:	mov	r0, sl
    6d3c:	bl	4808 <memcpy@plt>
    6d40:	sub	r5, r5, #128	; 0x80
    6d44:	mov	r2, r6
    6d48:	mov	r1, r7
    6d4c:	bl	59c0 <rb_sha512_process_block>
    6d50:	cmp	r5, #128	; 0x80
    6d54:	add	r4, r4, #128	; 0x80
    6d58:	bhi	6d30 <rb_sha512_process_bytes+0x44>
    6d5c:	sub	r3, r8, #129	; 0x81
    6d60:	bic	r2, r3, #127	; 0x7f
    6d64:	mov	r3, r2
    6d68:	sub	r8, r8, #128	; 0x80
    6d6c:	add	r2, r2, #128	; 0x80
    6d70:	sub	r8, r8, r3
    6d74:	add	r9, r9, r2
    6d78:	ldr	r4, [r6, #80]	; 0x50
    6d7c:	mov	r1, r9
    6d80:	add	r0, r4, #88	; 0x58
    6d84:	add	r0, r6, r0
    6d88:	add	r4, r4, r8
    6d8c:	mov	r2, r8
    6d90:	bl	4808 <memcpy@plt>
    6d94:	cmp	r4, #127	; 0x7f
    6d98:	bhi	6e1c <rb_sha512_process_bytes+0x130>
    6d9c:	mov	r3, #0
    6da0:	str	r4, [r6, #80]	; 0x50
    6da4:	str	r3, [r6, #84]	; 0x54
    6da8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    6dac:	bic	r4, r8, #127	; 0x7f
    6db0:	mov	r0, r9
    6db4:	mov	r1, r4
    6db8:	mov	r2, r6
    6dbc:	bl	59c0 <rb_sha512_process_block>
    6dc0:	and	r8, r8, #127	; 0x7f
    6dc4:	add	r9, r9, r4
    6dc8:	cmp	r8, #0
    6dcc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    6dd0:	b	6d78 <rb_sha512_process_bytes+0x8c>
    6dd4:	rsb	r7, r4, #256	; 0x100
    6dd8:	cmp	r7, r1
    6ddc:	movcs	r7, r1
    6de0:	add	r0, r4, #88	; 0x58
    6de4:	mov	r2, r7
    6de8:	add	r0, r6, r0
    6dec:	mov	r1, r9
    6df0:	bl	4808 <memcpy@plt>
    6df4:	ldrd	r2, [r6, #80]	; 0x50
    6df8:	adds	r2, r2, r7
    6dfc:	adc	r3, r3, #0
    6e00:	cmp	r3, #0
    6e04:	cmpeq	r2, #128	; 0x80
    6e08:	strd	r2, [r6, #80]	; 0x50
    6e0c:	bhi	6e48 <rb_sha512_process_bytes+0x15c>
    6e10:	add	r9, r9, r7
    6e14:	sub	r8, r8, r7
    6e18:	b	6d08 <rb_sha512_process_bytes+0x1c>
    6e1c:	add	r5, r6, #88	; 0x58
    6e20:	mov	r0, r5
    6e24:	mov	r2, r6
    6e28:	sub	r4, r4, #128	; 0x80
    6e2c:	mov	r1, #128	; 0x80
    6e30:	bl	59c0 <rb_sha512_process_block>
    6e34:	mov	r0, r5
    6e38:	mov	r2, r4
    6e3c:	add	r1, r6, #216	; 0xd8
    6e40:	bl	4808 <memcpy@plt>
    6e44:	b	6d9c <rb_sha512_process_bytes+0xb0>
    6e48:	add	r5, r6, #88	; 0x58
    6e4c:	bic	r1, r2, #127	; 0x7f
    6e50:	mov	r0, r5
    6e54:	mov	r2, r6
    6e58:	bl	59c0 <rb_sha512_process_block>
    6e5c:	ldrd	r2, [r6, #80]	; 0x50
    6e60:	add	r1, r7, r4
    6e64:	mov	r3, #0
    6e68:	and	r2, r2, #127	; 0x7f
    6e6c:	bic	r1, r1, #127	; 0x7f
    6e70:	add	r1, r1, #88	; 0x58
    6e74:	add	r1, r6, r1
    6e78:	mov	r0, r5
    6e7c:	strd	r2, [r6, #80]	; 0x50
    6e80:	bl	4808 <memcpy@plt>
    6e84:	b	6e10 <rb_sha512_process_bytes+0x124>

00006e88 <rb_sha512_finish_ctx>:
    6e88:	ldrd	r2, [r0, #80]	; 0x50
    6e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e90:	sub	sp, sp, #36	; 0x24
    6e94:	mov	r6, r2
    6e98:	mov	r7, r3
    6e9c:	ldrd	r2, [r0, #64]	; 0x40
    6ea0:	mov	r4, r0
    6ea4:	str	r1, [sp, #16]
    6ea8:	adds	r0, r6, r2
    6eac:	adc	r1, r7, r3
    6eb0:	mov	r2, r0
    6eb4:	mov	r3, r1
    6eb8:	cmp	r7, r1
    6ebc:	cmpeq	r6, r0
    6ec0:	strd	r6, [sp, #8]
    6ec4:	strd	r2, [r4, #64]	; 0x40
    6ec8:	bls	6edc <rb_sha512_finish_ctx+0x54>
    6ecc:	ldrd	r2, [r4, #72]	; 0x48
    6ed0:	adds	r2, r2, #1
    6ed4:	adc	r3, r3, #0
    6ed8:	strd	r2, [r4, #72]	; 0x48
    6edc:	ldrd	r2, [sp, #8]
    6ee0:	cmp	r3, #0
    6ee4:	cmpeq	r2, #111	; 0x6f
    6ee8:	bls	707c <rb_sha512_finish_ctx+0x1f4>
    6eec:	rsb	r5, r2, #240	; 0xf0
    6ef0:	str	r2, [sp, #20]
    6ef4:	ldr	r3, [sp, #20]
    6ef8:	ldr	r1, [pc, #396]	; 708c <rb_sha512_finish_ctx+0x204>
    6efc:	add	r0, r3, #88	; 0x58
    6f00:	add	r1, pc, r1
    6f04:	add	r1, r1, #1808	; 0x710
    6f08:	add	r0, r4, r0
    6f0c:	mov	r2, r5
    6f10:	bl	4808 <memcpy@plt>
    6f14:	ldr	r3, [r4, #64]	; 0x40
    6f18:	ldr	ip, [r4, #68]	; 0x44
    6f1c:	mov	r6, #0
    6f20:	lsl	r2, r3, #11
    6f24:	str	r2, [sp, #4]
    6f28:	lsl	r9, ip, #11
    6f2c:	mov	r2, #0
    6f30:	str	r2, [sp]
    6f34:	orr	r9, r9, r3, lsr #21
    6f38:	and	r7, r9, #255	; 0xff
    6f3c:	ldrd	r8, [sp]
    6f40:	strd	r6, [sp, #24]
    6f44:	mov	sl, #0
    6f48:	mov	r6, r8
    6f4c:	mov	r8, #0
    6f50:	lsl	r1, ip, #27
    6f54:	orr	r8, r8, sl
    6f58:	orr	r1, r1, r3, lsr #5
    6f5c:	orr	r8, r8, r6
    6f60:	lsl	r2, ip, #3
    6f64:	ldrd	r6, [sp, #24]
    6f68:	orr	r2, r2, r3, lsr #29
    6f6c:	lsl	r0, r3, #27
    6f70:	and	fp, r1, #65280	; 0xff00
    6f74:	lsl	r3, r3, #3
    6f78:	and	r9, r9, #16711680	; 0xff0000
    6f7c:	orr	r9, r9, fp
    6f80:	orr	r9, r9, r0
    6f84:	lsr	sl, r3, #8
    6f88:	lsr	r0, r2, #24
    6f8c:	orr	r6, r6, r8
    6f90:	orr	r8, r6, r0
    6f94:	orr	sl, sl, r2, lsl #24
    6f98:	orr	r7, r7, r9
    6f9c:	mov	r1, #0
    6fa0:	lsr	r0, r3, #24
    6fa4:	lsr	fp, r2, #8
    6fa8:	orr	r9, r7, r1
    6fac:	orr	r0, r0, r2, lsl #8
    6fb0:	mov	r3, #0
    6fb4:	and	r2, sl, #-16777216	; 0xff000000
    6fb8:	orr	r8, r8, r2
    6fbc:	orr	r9, r9, r3
    6fc0:	ldrd	r2, [sp, #8]
    6fc4:	and	r0, r0, #16711680	; 0xff0000
    6fc8:	mov	r1, #0
    6fcc:	adds	r2, r2, r5
    6fd0:	and	r6, fp, #65280	; 0xff00
    6fd4:	orr	r0, r0, r8
    6fd8:	orr	r1, r1, r9
    6fdc:	mov	r7, #0
    6fe0:	add	r3, r4, r2
    6fe4:	orr	r0, r0, r6
    6fe8:	orr	r1, r1, r7
    6fec:	add	r2, r4, r2
    6ff0:	strd	r0, [r3, #96]	; 0x60
    6ff4:	ldr	lr, [r4, #76]	; 0x4c
    6ff8:	ldr	r3, [r4, #72]	; 0x48
    6ffc:	lsr	r0, ip, #29
    7000:	lsl	fp, lr, #3
    7004:	orr	fp, fp, r3, lsr #29
    7008:	mov	r1, #0
    700c:	lsl	sl, r3, #3
    7010:	ldr	r3, [sp, #20]
    7014:	orr	sl, sl, r0
    7018:	orr	fp, fp, r1
    701c:	rev	sl, sl
    7020:	add	r1, r5, r3
    7024:	rev	r3, fp
    7028:	str	r3, [r2, #88]	; 0x58
    702c:	add	r0, r4, #88	; 0x58
    7030:	str	sl, [r2, #92]	; 0x5c
    7034:	add	r1, r1, #16
    7038:	mov	r2, r4
    703c:	bl	59c0 <rb_sha512_process_block>
    7040:	ldr	r2, [sp, #16]
    7044:	sub	r3, r4, #8
    7048:	sub	r0, r2, #8
    704c:	add	r4, r4, #56	; 0x38
    7050:	ldr	r2, [r3, #8]!
    7054:	rev	r2, r2
    7058:	ldr	r1, [r3, #4]
    705c:	cmp	r3, r4
    7060:	rev	r1, r1
    7064:	str	r1, [r0, #8]!
    7068:	str	r2, [r0, #4]
    706c:	bne	7050 <rb_sha512_finish_ctx+0x1c8>
    7070:	ldr	r0, [sp, #16]
    7074:	add	sp, sp, #36	; 0x24
    7078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    707c:	ldrd	r2, [sp, #8]
    7080:	str	r2, [sp, #20]
    7084:	rsb	r5, r2, #112	; 0x70
    7088:	b	6ef4 <rb_sha512_finish_ctx+0x6c>
    708c:	.word	0x0000e160

00007090 <rb_sha256_crypt_r>:
    7090:	ldr	ip, [pc, #3056]	; 7c88 <rb_sha256_crypt_r+0xbf8>
    7094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7098:	add	fp, sp, #32
    709c:	add	ip, pc, ip
    70a0:	sub	sp, sp, #468	; 0x1d4
    70a4:	mov	r4, r0
    70a8:	add	r0, ip, #1936	; 0x790
    70ac:	str	r2, [fp, #-464]	; 0xfffffe30
    70b0:	mov	r2, #3
    70b4:	str	r3, [fp, #-476]	; 0xfffffe24
    70b8:	mov	r5, r1
    70bc:	str	r1, [fp, #-456]	; 0xfffffe38
    70c0:	bl	4c10 <strncmp@plt>
    70c4:	ldr	r1, [pc, #3008]	; 7c8c <rb_sha256_crypt_r+0xbfc>
    70c8:	mov	r2, #7
    70cc:	add	r1, pc, r1
    70d0:	add	r1, r1, #1936	; 0x790
    70d4:	add	r1, r1, #4
    70d8:	cmp	r0, #0
    70dc:	moveq	r3, r5
    70e0:	addeq	r3, r3, #3
    70e4:	streq	r3, [fp, #-456]	; 0xfffffe38
    70e8:	ldr	r0, [fp, #-456]	; 0xfffffe38
    70ec:	bl	4c10 <strncmp@plt>
    70f0:	subs	r3, r0, #0
    70f4:	str	r3, [fp, #-480]	; 0xfffffe20
    70f8:	beq	7af4 <rb_sha256_crypt_r+0xa64>
    70fc:	ldr	r3, [pc, #2956]	; 7c90 <rb_sha256_crypt_r+0xc00>
    7100:	sub	sl, fp, #208	; 0xd0
    7104:	str	r3, [fp, #-452]	; 0xfffffe3c
    7108:	mov	r3, #0
    710c:	str	r3, [fp, #-480]	; 0xfffffe20
    7110:	ldr	r1, [pc, #2940]	; 7c94 <rb_sha256_crypt_r+0xc04>
    7114:	ldr	r0, [fp, #-456]	; 0xfffffe38
    7118:	add	r1, pc, r1
    711c:	bl	4be0 <strcspn@plt>
    7120:	cmp	r0, #16
    7124:	movcc	r3, r0
    7128:	movcs	r3, #16
    712c:	mov	r0, r4
    7130:	str	r3, [fp, #-448]	; 0xfffffe40
    7134:	bl	47e4 <strlen@plt>
    7138:	ands	r3, r4, #3
    713c:	streq	r3, [fp, #-488]	; 0xfffffe18
    7140:	mov	r9, r0
    7144:	bne	7bb0 <rb_sha256_crypt_r+0xb20>
    7148:	ldr	r3, [fp, #-456]	; 0xfffffe38
    714c:	ands	r3, r3, #3
    7150:	streq	r3, [fp, #-492]	; 0xfffffe14
    7154:	bne	7b88 <rb_sha256_crypt_r+0xaf8>
    7158:	ldr	r3, [pc, #2872]	; 7c98 <rb_sha256_crypt_r+0xc08>
    715c:	ldr	r5, [pc, #2872]	; 7c9c <rb_sha256_crypt_r+0xc0c>
    7160:	str	r3, [fp, #-372]	; 0xfffffe8c
    7164:	ldr	r3, [pc, #2868]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    7168:	ldr	r6, [pc, #2868]	; 7ca4 <rb_sha256_crypt_r+0xc14>
    716c:	str	r3, [fp, #-368]	; 0xfffffe90
    7170:	ldr	r3, [pc, #2864]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    7174:	sub	r8, fp, #380	; 0x17c
    7178:	str	r3, [fp, #-364]	; 0xfffffe94
    717c:	ldr	r3, [pc, #2856]	; 7cac <rb_sha256_crypt_r+0xc1c>
    7180:	mov	r7, #0
    7184:	str	r3, [fp, #-360]	; 0xfffffe98
    7188:	ldr	r3, [pc, #2848]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    718c:	mov	r2, r8
    7190:	str	r3, [fp, #-356]	; 0xfffffe9c
    7194:	ldr	r3, [pc, #2840]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    7198:	mov	r1, r9
    719c:	mov	r0, r4
    71a0:	str	r3, [fp, #-352]	; 0xfffffea0
    71a4:	str	r7, [fp, #-344]	; 0xfffffea8
    71a8:	str	r7, [fp, #-348]	; 0xfffffea4
    71ac:	str	r7, [fp, #-340]	; 0xfffffeac
    71b0:	str	r5, [fp, #-380]	; 0xfffffe84
    71b4:	str	r6, [fp, #-376]	; 0xfffffe88
    71b8:	bl	6a64 <rb_sha256_process_bytes>
    71bc:	mov	r2, r8
    71c0:	ldr	r1, [fp, #-448]	; 0xfffffe40
    71c4:	ldr	r0, [fp, #-456]	; 0xfffffe38
    71c8:	bl	6a64 <rb_sha256_process_bytes>
    71cc:	ldr	r3, [pc, #2756]	; 7c98 <rb_sha256_crypt_r+0xc08>
    71d0:	mov	r2, sl
    71d4:	str	r3, [fp, #-200]	; 0xffffff38
    71d8:	ldr	r3, [pc, #2752]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    71dc:	mov	r1, r9
    71e0:	str	r3, [fp, #-196]	; 0xffffff3c
    71e4:	ldr	r3, [pc, #2748]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    71e8:	mov	r0, r4
    71ec:	str	r3, [fp, #-192]	; 0xffffff40
    71f0:	ldr	r3, [pc, #2740]	; 7cac <rb_sha256_crypt_r+0xc1c>
    71f4:	str	r7, [fp, #-172]	; 0xffffff54
    71f8:	str	r3, [fp, #-188]	; 0xffffff44
    71fc:	ldr	r3, [pc, #2732]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    7200:	str	r7, [fp, #-176]	; 0xffffff50
    7204:	str	r3, [fp, #-184]	; 0xffffff48
    7208:	ldr	r3, [pc, #2724]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    720c:	str	r7, [fp, #-168]	; 0xffffff58
    7210:	str	r3, [fp, #-180]	; 0xffffff4c
    7214:	str	r5, [fp, #-208]	; 0xffffff30
    7218:	str	r6, [fp, #-204]	; 0xffffff34
    721c:	bl	6a64 <rb_sha256_process_bytes>
    7220:	mov	r2, sl
    7224:	ldr	r1, [fp, #-448]	; 0xfffffe40
    7228:	ldr	r0, [fp, #-456]	; 0xfffffe38
    722c:	bl	6a64 <rb_sha256_process_bytes>
    7230:	sub	r7, fp, #444	; 0x1bc
    7234:	mov	r2, sl
    7238:	mov	r1, r9
    723c:	mov	r0, r4
    7240:	bl	6a64 <rb_sha256_process_bytes>
    7244:	mov	r1, r7
    7248:	mov	r0, sl
    724c:	bl	6c18 <rb_sha256_finish_ctx>
    7250:	cmp	r9, #32
    7254:	bls	7bec <rb_sha256_crypt_r+0xb5c>
    7258:	mov	r6, r9
    725c:	mov	r5, #32
    7260:	sub	r6, r6, #32
    7264:	mov	r2, r8
    7268:	mov	r1, r5
    726c:	mov	r0, r7
    7270:	bl	6a64 <rb_sha256_process_bytes>
    7274:	cmp	r6, #32
    7278:	bhi	7260 <rb_sha256_crypt_r+0x1d0>
    727c:	sub	r3, r9, #33	; 0x21
    7280:	bic	r3, r3, #31
    7284:	sub	r1, r9, #32
    7288:	sub	r1, r1, r3
    728c:	mov	r2, r8
    7290:	mov	r0, r7
    7294:	bl	6a64 <rb_sha256_process_bytes>
    7298:	mov	r6, r9
    729c:	mov	r5, #32
    72a0:	tst	r6, #1
    72a4:	mov	r1, r9
    72a8:	mov	r0, r4
    72ac:	movne	r1, r5
    72b0:	movne	r0, r7
    72b4:	mov	r2, r8
    72b8:	bl	6a64 <rb_sha256_process_bytes>
    72bc:	lsrs	r6, r6, #1
    72c0:	bne	72a0 <rb_sha256_crypt_r+0x210>
    72c4:	mov	r1, r7
    72c8:	mov	r0, r8
    72cc:	bl	6c18 <rb_sha256_finish_ctx>
    72d0:	ldr	r2, [pc, #2500]	; 7c9c <rb_sha256_crypt_r+0xc0c>
    72d4:	ldr	r3, [pc, #2504]	; 7ca4 <rb_sha256_crypt_r+0xc14>
    72d8:	ldr	r1, [pc, #2488]	; 7c98 <rb_sha256_crypt_r+0xc08>
    72dc:	str	r2, [fp, #-208]	; 0xffffff30
    72e0:	str	r3, [fp, #-204]	; 0xffffff34
    72e4:	ldr	r2, [pc, #2484]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    72e8:	ldr	r3, [pc, #2488]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    72ec:	str	r1, [fp, #-200]	; 0xffffff38
    72f0:	str	r2, [fp, #-196]	; 0xffffff3c
    72f4:	ldr	r1, [pc, #2480]	; 7cac <rb_sha256_crypt_r+0xc1c>
    72f8:	ldr	r2, [pc, #2480]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    72fc:	str	r3, [fp, #-192]	; 0xffffff40
    7300:	ldr	r3, [pc, #2476]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    7304:	str	r6, [fp, #-172]	; 0xffffff54
    7308:	str	r6, [fp, #-176]	; 0xffffff50
    730c:	str	r6, [fp, #-168]	; 0xffffff58
    7310:	str	r1, [fp, #-188]	; 0xffffff44
    7314:	str	r2, [fp, #-184]	; 0xffffff48
    7318:	str	r3, [fp, #-180]	; 0xffffff4c
    731c:	add	r6, r6, #1
    7320:	mov	r2, sl
    7324:	mov	r1, r9
    7328:	mov	r0, r4
    732c:	bl	6a64 <rb_sha256_process_bytes>
    7330:	cmp	r9, r6
    7334:	bne	731c <rb_sha256_crypt_r+0x28c>
    7338:	sub	r3, fp, #412	; 0x19c
    733c:	mov	r1, r3
    7340:	mov	r0, sl
    7344:	mov	r6, r3
    7348:	str	r3, [fp, #-468]	; 0xfffffe2c
    734c:	bl	6c18 <rb_sha256_finish_ctx>
    7350:	add	r3, r9, #14
    7354:	bic	r3, r3, #7
    7358:	sub	sp, sp, r3
    735c:	add	r3, sp, #8
    7360:	cmp	r9, #31
    7364:	str	r3, [fp, #-472]	; 0xfffffe28
    7368:	bls	7c7c <rb_sha256_crypt_r+0xbec>
    736c:	add	r5, sp, #40	; 0x28
    7370:	mov	r4, r9
    7374:	mov	lr, r6
    7378:	sub	ip, r5, #32
    737c:	ldm	lr!, {r0, r1, r2, r3}
    7380:	sub	r4, r4, #32
    7384:	cmp	r4, #31
    7388:	add	r5, r5, #32
    738c:	stmia	ip!, {r0, r1, r2, r3}
    7390:	ldm	lr, {r0, r1, r2, r3}
    7394:	stm	ip, {r0, r1, r2, r3}
    7398:	bhi	7374 <rb_sha256_crypt_r+0x2e4>
    739c:	sub	r0, r9, #32
    73a0:	bic	r0, r0, #31
    73a4:	ldr	r3, [fp, #-472]	; 0xfffffe28
    73a8:	add	r0, r0, #32
    73ac:	add	r0, r3, r0
    73b0:	and	r2, r9, #31
    73b4:	ldr	r1, [fp, #-468]	; 0xfffffe2c
    73b8:	bl	4808 <memcpy@plt>
    73bc:	ldr	r0, [pc, #2264]	; 7c9c <rb_sha256_crypt_r+0xc0c>
    73c0:	ldr	r1, [pc, #2268]	; 7ca4 <rb_sha256_crypt_r+0xc14>
    73c4:	ldr	r2, [pc, #2252]	; 7c98 <rb_sha256_crypt_r+0xc08>
    73c8:	ldr	r3, [pc, #2256]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    73cc:	ldr	r5, [fp, #-448]	; 0xfffffe40
    73d0:	ldr	r6, [fp, #-456]	; 0xfffffe38
    73d4:	str	r0, [fp, #-208]	; 0xffffff30
    73d8:	str	r1, [fp, #-204]	; 0xffffff34
    73dc:	ldr	r0, [pc, #2244]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    73e0:	ldr	r1, [pc, #2244]	; 7cac <rb_sha256_crypt_r+0xc1c>
    73e4:	str	r2, [fp, #-200]	; 0xffffff38
    73e8:	str	r3, [fp, #-196]	; 0xffffff3c
    73ec:	ldr	r2, [pc, #2236]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    73f0:	ldr	r3, [pc, #2236]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    73f4:	mov	r4, #0
    73f8:	str	r0, [fp, #-192]	; 0xffffff40
    73fc:	str	r1, [fp, #-188]	; 0xffffff44
    7400:	str	r2, [fp, #-184]	; 0xffffff48
    7404:	str	r3, [fp, #-180]	; 0xffffff4c
    7408:	str	r4, [fp, #-172]	; 0xffffff54
    740c:	str	r4, [fp, #-176]	; 0xffffff50
    7410:	str	r4, [fp, #-168]	; 0xffffff58
    7414:	mov	r2, sl
    7418:	mov	r1, r5
    741c:	mov	r0, r6
    7420:	bl	6a64 <rb_sha256_process_bytes>
    7424:	ldrb	r3, [fp, #-444]	; 0xfffffe44
    7428:	add	r4, r4, #1
    742c:	add	r3, r3, #16
    7430:	cmp	r3, r4
    7434:	bhi	7414 <rb_sha256_crypt_r+0x384>
    7438:	ldr	r4, [fp, #-468]	; 0xfffffe2c
    743c:	mov	r0, sl
    7440:	mov	r1, r4
    7444:	bl	6c18 <rb_sha256_finish_ctx>
    7448:	ldr	r2, [fp, #-448]	; 0xfffffe40
    744c:	mov	r1, r4
    7450:	add	r3, r2, #14
    7454:	bic	r3, r3, #7
    7458:	sub	sp, sp, r3
    745c:	add	r3, sp, #8
    7460:	mov	r0, r3
    7464:	str	r3, [fp, #-460]	; 0xfffffe34
    7468:	mov	r6, #0
    746c:	bl	4808 <memcpy@plt>
    7470:	ldr	r5, [pc, #2104]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    7474:	str	sl, [fp, #-484]	; 0xfffffe1c
    7478:	ldr	sl, [fp, #-472]	; 0xfffffe28
    747c:	b	74d8 <rb_sha256_crypt_r+0x448>
    7480:	ldr	r2, [pc, #2096]	; 7cb8 <rb_sha256_crypt_r+0xc28>
    7484:	umull	r3, r2, r2, r6
    7488:	sub	r1, r6, r2
    748c:	add	r2, r2, r1, lsr #1
    7490:	lsr	r2, r2, #2
    7494:	rsb	r2, r2, r2, lsl #3
    7498:	cmp	r6, r2
    749c:	bne	756c <rb_sha256_crypt_r+0x4dc>
    74a0:	cmp	r4, #0
    74a4:	movne	r1, #32
    74a8:	movne	r0, r7
    74ac:	moveq	r1, r9
    74b0:	moveq	r0, sl
    74b4:	mov	r2, r8
    74b8:	bl	6a64 <rb_sha256_process_bytes>
    74bc:	mov	r1, r7
    74c0:	mov	r0, r8
    74c4:	bl	6c18 <rb_sha256_finish_ctx>
    74c8:	ldr	r3, [fp, #-452]	; 0xfffffe3c
    74cc:	add	r6, r6, #1
    74d0:	cmp	r3, r6
    74d4:	beq	7580 <rb_sha256_crypt_r+0x4f0>
    74d8:	ldr	r3, [pc, #1980]	; 7c9c <rb_sha256_crypt_r+0xc0c>
    74dc:	ldr	r2, [pc, #1980]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    74e0:	str	r3, [fp, #-380]	; 0xfffffe84
    74e4:	ldr	r3, [pc, #1976]	; 7ca4 <rb_sha256_crypt_r+0xc14>
    74e8:	ldr	r1, [pc, #1988]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    74ec:	str	r3, [fp, #-376]	; 0xfffffe88
    74f0:	ldr	r3, [pc, #1952]	; 7c98 <rb_sha256_crypt_r+0xc08>
    74f4:	ands	r4, r6, #1
    74f8:	str	r3, [fp, #-372]	; 0xfffffe8c
    74fc:	ldr	r3, [pc, #1956]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    7500:	str	r2, [fp, #-368]	; 0xfffffe90
    7504:	str	r3, [fp, #-364]	; 0xfffffe94
    7508:	mov	r2, #0
    750c:	ldr	r3, [pc, #1944]	; 7cac <rb_sha256_crypt_r+0xc1c>
    7510:	str	r1, [fp, #-352]	; 0xfffffea0
    7514:	str	r2, [fp, #-344]	; 0xfffffea8
    7518:	str	r2, [fp, #-348]	; 0xfffffea4
    751c:	str	r2, [fp, #-340]	; 0xfffffeac
    7520:	movne	r1, r9
    7524:	mov	r2, r8
    7528:	movne	r0, sl
    752c:	moveq	r1, #32
    7530:	moveq	r0, r7
    7534:	str	r3, [fp, #-360]	; 0xfffffe98
    7538:	str	r5, [fp, #-356]	; 0xfffffe9c
    753c:	bl	6a64 <rb_sha256_process_bytes>
    7540:	ldr	r2, [pc, #1908]	; 7cbc <rb_sha256_crypt_r+0xc2c>
    7544:	umull	r3, r2, r2, r6
    7548:	lsr	r2, r2, #1
    754c:	add	r2, r2, r2, lsl #1
    7550:	cmp	r6, r2
    7554:	beq	7480 <rb_sha256_crypt_r+0x3f0>
    7558:	mov	r2, r8
    755c:	ldr	r1, [fp, #-448]	; 0xfffffe40
    7560:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7564:	bl	6a64 <rb_sha256_process_bytes>
    7568:	b	7480 <rb_sha256_crypt_r+0x3f0>
    756c:	mov	r2, r8
    7570:	mov	r1, r9
    7574:	mov	r0, sl
    7578:	bl	6a64 <rb_sha256_process_bytes>
    757c:	b	74a0 <rb_sha256_crypt_r+0x410>
    7580:	ldr	r3, [fp, #-476]	; 0xfffffe24
    7584:	ldr	r4, [fp, #-464]	; 0xfffffe30
    7588:	mov	r1, #0
    758c:	bic	r5, r3, r3, asr #31
    7590:	mov	r0, r4
    7594:	mov	r2, r5
    7598:	ldr	sl, [fp, #-484]	; 0xfffffe1c
    759c:	bl	4628 <memset@plt>
    75a0:	ldr	r1, [pc, #1816]	; 7cc0 <rb_sha256_crypt_r+0xc30>
    75a4:	mov	r2, r5
    75a8:	add	r1, pc, r1
    75ac:	add	r1, r1, #1936	; 0x790
    75b0:	mov	r0, r4
    75b4:	bl	4574 <strncpy@plt>
    75b8:	mov	r0, r4
    75bc:	mov	r1, #0
    75c0:	bl	45b0 <strchr@plt>
    75c4:	subs	r4, r0, #0
    75c8:	ldreq	r3, [fp, #-464]	; 0xfffffe30
    75cc:	addeq	r4, r3, r5
    75d0:	ldr	r3, [fp, #-480]	; 0xfffffe20
    75d4:	cmp	r3, #0
    75d8:	ldr	r3, [fp, #-476]	; 0xfffffe24
    75dc:	sub	r5, r3, #3
    75e0:	bne	7b54 <rb_sha256_crypt_r+0xac4>
    75e4:	ldr	r2, [fp, #-448]	; 0xfffffe40
    75e8:	mov	r1, #0
    75ec:	mov	r0, r4
    75f0:	bl	4628 <memset@plt>
    75f4:	bic	r6, r5, r5, asr #31
    75f8:	ldr	r3, [fp, #-448]	; 0xfffffe40
    75fc:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7600:	cmp	r6, r3
    7604:	movcs	r6, r3
    7608:	mov	r2, r6
    760c:	mov	r0, r4
    7610:	bl	4574 <strncpy@plt>
    7614:	mov	r1, #0
    7618:	ldr	r0, [fp, #-464]	; 0xfffffe30
    761c:	bl	45b0 <strchr@plt>
    7620:	ldr	r3, [fp, #-448]	; 0xfffffe40
    7624:	sub	r5, r5, r6
    7628:	cmp	r0, #0
    762c:	moveq	r0, r3
    7630:	cmp	r5, #0
    7634:	ble	7bd8 <rb_sha256_crypt_r+0xb48>
    7638:	mov	r3, #36	; 0x24
    763c:	strb	r3, [r0]
    7640:	ldrb	r2, [fp, #-434]	; 0xfffffe4e
    7644:	ldrb	r1, [fp, #-444]	; 0xfffffe44
    7648:	ldrb	r3, [fp, #-424]	; 0xfffffe58
    764c:	subs	r5, r5, #1
    7650:	lsl	r2, r2, #8
    7654:	orr	r2, r2, r1, lsl #16
    7658:	add	r0, r0, #1
    765c:	orr	r2, r2, r3
    7660:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    7664:	ldr	lr, [pc, #1624]	; 7cc4 <rb_sha256_crypt_r+0xc34>
    7668:	mov	r3, r5
    766c:	add	lr, pc, lr
    7670:	and	r1, r2, #63	; 0x3f
    7674:	add	r1, lr, r1
    7678:	sub	r3, r3, #1
    767c:	ldrb	r1, [r1, #1948]	; 0x79c
    7680:	add	ip, r3, #4
    7684:	cmp	ip, r5
    7688:	cmpne	r3, #0
    768c:	strb	r1, [r0], #1
    7690:	lsr	r2, r2, #6
    7694:	bgt	7670 <rb_sha256_crypt_r+0x5e0>
    7698:	ldrb	r1, [fp, #-443]	; 0xfffffe45
    769c:	ldrb	ip, [fp, #-423]	; 0xfffffe59
    76a0:	ldrb	r2, [fp, #-433]	; 0xfffffe4f
    76a4:	cmp	r3, #0
    76a8:	lsl	r1, r1, #8
    76ac:	orr	r1, r1, ip, lsl #16
    76b0:	orr	r1, r1, r2
    76b4:	ble	7bd8 <rb_sha256_crypt_r+0xb48>
    76b8:	ldr	r4, [pc, #1544]	; 7cc8 <rb_sha256_crypt_r+0xc38>
    76bc:	mov	r2, r3
    76c0:	add	r4, pc, r4
    76c4:	and	ip, r1, #63	; 0x3f
    76c8:	add	ip, r4, ip
    76cc:	sub	r2, r2, #1
    76d0:	ldrb	ip, [ip, #1948]	; 0x79c
    76d4:	add	lr, r2, #4
    76d8:	cmp	lr, r3
    76dc:	cmpne	r2, #0
    76e0:	strb	ip, [r0], #1
    76e4:	lsr	r1, r1, #6
    76e8:	bgt	76c4 <rb_sha256_crypt_r+0x634>
    76ec:	ldrb	r1, [fp, #-422]	; 0xfffffe5a
    76f0:	ldrb	ip, [fp, #-432]	; 0xfffffe50
    76f4:	ldrb	r3, [fp, #-442]	; 0xfffffe46
    76f8:	cmp	r2, #0
    76fc:	lsl	r1, r1, #8
    7700:	orr	r1, r1, ip, lsl #16
    7704:	orr	r1, r1, r3
    7708:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    770c:	ldr	r4, [pc, #1464]	; 7ccc <rb_sha256_crypt_r+0xc3c>
    7710:	mov	r3, r2
    7714:	add	r4, pc, r4
    7718:	and	ip, r1, #63	; 0x3f
    771c:	add	ip, r4, ip
    7720:	sub	r3, r3, #1
    7724:	ldrb	ip, [ip, #1948]	; 0x79c
    7728:	add	lr, r3, #4
    772c:	cmp	lr, r2
    7730:	cmpne	r3, #0
    7734:	strb	ip, [r0], #1
    7738:	lsr	r1, r1, #6
    773c:	bgt	7718 <rb_sha256_crypt_r+0x688>
    7740:	ldrb	r1, [fp, #-431]	; 0xfffffe51
    7744:	ldrb	ip, [fp, #-441]	; 0xfffffe47
    7748:	ldrb	r2, [fp, #-421]	; 0xfffffe5b
    774c:	cmp	r3, #0
    7750:	lsl	r1, r1, #8
    7754:	orr	r1, r1, ip, lsl #16
    7758:	orr	r1, r1, r2
    775c:	ble	7bd8 <rb_sha256_crypt_r+0xb48>
    7760:	ldr	r4, [pc, #1384]	; 7cd0 <rb_sha256_crypt_r+0xc40>
    7764:	mov	r2, r3
    7768:	add	r4, pc, r4
    776c:	and	ip, r1, #63	; 0x3f
    7770:	add	ip, r4, ip
    7774:	sub	r2, r2, #1
    7778:	ldrb	ip, [ip, #1948]	; 0x79c
    777c:	add	lr, r2, #4
    7780:	cmp	lr, r3
    7784:	cmpne	r2, #0
    7788:	strb	ip, [r0], #1
    778c:	lsr	r1, r1, #6
    7790:	bgt	776c <rb_sha256_crypt_r+0x6dc>
    7794:	ldrb	r1, [fp, #-440]	; 0xfffffe48
    7798:	ldrb	ip, [fp, #-420]	; 0xfffffe5c
    779c:	ldrb	r3, [fp, #-430]	; 0xfffffe52
    77a0:	cmp	r2, #0
    77a4:	lsl	r1, r1, #8
    77a8:	orr	r1, r1, ip, lsl #16
    77ac:	orr	r1, r1, r3
    77b0:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    77b4:	ldr	r4, [pc, #1304]	; 7cd4 <rb_sha256_crypt_r+0xc44>
    77b8:	mov	r3, r2
    77bc:	add	r4, pc, r4
    77c0:	and	ip, r1, #63	; 0x3f
    77c4:	add	ip, r4, ip
    77c8:	sub	r3, r3, #1
    77cc:	ldrb	ip, [ip, #1948]	; 0x79c
    77d0:	add	lr, r3, #4
    77d4:	cmp	lr, r2
    77d8:	cmpne	r3, #0
    77dc:	strb	ip, [r0], #1
    77e0:	lsr	r1, r1, #6
    77e4:	bgt	77c0 <rb_sha256_crypt_r+0x730>
    77e8:	ldrb	r1, [fp, #-419]	; 0xfffffe5d
    77ec:	ldrb	ip, [fp, #-429]	; 0xfffffe53
    77f0:	ldrb	r2, [fp, #-439]	; 0xfffffe49
    77f4:	cmp	r3, #0
    77f8:	lsl	r1, r1, #8
    77fc:	orr	r1, r1, ip, lsl #16
    7800:	orr	r1, r1, r2
    7804:	ble	7bd8 <rb_sha256_crypt_r+0xb48>
    7808:	ldr	r4, [pc, #1224]	; 7cd8 <rb_sha256_crypt_r+0xc48>
    780c:	mov	r2, r3
    7810:	add	r4, pc, r4
    7814:	and	ip, r1, #63	; 0x3f
    7818:	add	ip, r4, ip
    781c:	sub	r2, r2, #1
    7820:	ldrb	ip, [ip, #1948]	; 0x79c
    7824:	add	lr, r2, #4
    7828:	cmp	lr, r3
    782c:	cmpne	r2, #0
    7830:	strb	ip, [r0], #1
    7834:	lsr	r1, r1, #6
    7838:	bgt	7814 <rb_sha256_crypt_r+0x784>
    783c:	ldrb	r1, [fp, #-428]	; 0xfffffe54
    7840:	ldrb	ip, [fp, #-438]	; 0xfffffe4a
    7844:	ldrb	r3, [fp, #-418]	; 0xfffffe5e
    7848:	cmp	r2, #0
    784c:	lsl	r1, r1, #8
    7850:	orr	r1, r1, ip, lsl #16
    7854:	orr	r1, r1, r3
    7858:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    785c:	ldr	r4, [pc, #1144]	; 7cdc <rb_sha256_crypt_r+0xc4c>
    7860:	mov	r3, r2
    7864:	add	r4, pc, r4
    7868:	and	ip, r1, #63	; 0x3f
    786c:	add	ip, r4, ip
    7870:	sub	r3, r3, #1
    7874:	ldrb	ip, [ip, #1948]	; 0x79c
    7878:	add	lr, r3, #4
    787c:	cmp	lr, r2
    7880:	cmpne	r3, #0
    7884:	strb	ip, [r0], #1
    7888:	lsr	r1, r1, #6
    788c:	bgt	7868 <rb_sha256_crypt_r+0x7d8>
    7890:	ldrb	r1, [fp, #-437]	; 0xfffffe4b
    7894:	ldrb	ip, [fp, #-417]	; 0xfffffe5f
    7898:	ldrb	r2, [fp, #-427]	; 0xfffffe55
    789c:	cmp	r3, #0
    78a0:	lsl	r1, r1, #8
    78a4:	orr	r1, r1, ip, lsl #16
    78a8:	orr	r1, r1, r2
    78ac:	ble	7bd8 <rb_sha256_crypt_r+0xb48>
    78b0:	ldr	r4, [pc, #1064]	; 7ce0 <rb_sha256_crypt_r+0xc50>
    78b4:	mov	r2, r3
    78b8:	add	r4, pc, r4
    78bc:	and	ip, r1, #63	; 0x3f
    78c0:	add	ip, r4, ip
    78c4:	sub	r2, r2, #1
    78c8:	ldrb	ip, [ip, #1948]	; 0x79c
    78cc:	add	lr, r2, #4
    78d0:	cmp	lr, r3
    78d4:	cmpne	r2, #0
    78d8:	strb	ip, [r0], #1
    78dc:	lsr	r1, r1, #6
    78e0:	bgt	78bc <rb_sha256_crypt_r+0x82c>
    78e4:	ldrb	r1, [fp, #-416]	; 0xfffffe60
    78e8:	ldrb	ip, [fp, #-426]	; 0xfffffe56
    78ec:	ldrb	r3, [fp, #-436]	; 0xfffffe4c
    78f0:	cmp	r2, #0
    78f4:	lsl	r1, r1, #8
    78f8:	orr	r1, r1, ip, lsl #16
    78fc:	orr	r1, r1, r3
    7900:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    7904:	ldr	r4, [pc, #984]	; 7ce4 <rb_sha256_crypt_r+0xc54>
    7908:	mov	r3, r2
    790c:	add	r4, pc, r4
    7910:	and	ip, r1, #63	; 0x3f
    7914:	add	ip, r4, ip
    7918:	sub	r3, r3, #1
    791c:	ldrb	ip, [ip, #1948]	; 0x79c
    7920:	add	lr, r3, #4
    7924:	cmp	lr, r2
    7928:	cmpne	r3, #0
    792c:	strb	ip, [r0], #1
    7930:	lsr	r1, r1, #6
    7934:	bgt	7910 <rb_sha256_crypt_r+0x880>
    7938:	ldrb	r1, [fp, #-425]	; 0xfffffe57
    793c:	ldrb	ip, [fp, #-435]	; 0xfffffe4d
    7940:	ldrb	r2, [fp, #-415]	; 0xfffffe61
    7944:	ldr	r5, [pc, #924]	; 7ce8 <rb_sha256_crypt_r+0xc58>
    7948:	lsl	r1, r1, #8
    794c:	orr	r1, r1, ip, lsl #16
    7950:	cmp	r3, #0
    7954:	rsb	r4, r3, #4
    7958:	add	r5, pc, r5
    795c:	orr	r1, r1, r2
    7960:	bgt	7970 <rb_sha256_crypt_r+0x8e0>
    7964:	b	7bd8 <rb_sha256_crypt_r+0xb48>
    7968:	mov	r0, lr
    796c:	mov	r3, r2
    7970:	and	ip, r1, #63	; 0x3f
    7974:	add	ip, r5, ip
    7978:	sub	r2, r3, #1
    797c:	ldrb	r6, [ip, #1948]	; 0x79c
    7980:	mov	lr, r0
    7984:	rsb	ip, r2, #0
    7988:	cmp	ip, r4
    798c:	cmpne	r2, #0
    7990:	movgt	ip, #1
    7994:	movle	ip, #0
    7998:	lsr	r1, r1, #6
    799c:	strb	r6, [lr], #1
    79a0:	bgt	7968 <rb_sha256_crypt_r+0x8d8>
    79a4:	cmp	r2, #0
    79a8:	ldrh	r2, [r7, #30]
    79ac:	ble	7bd8 <rb_sha256_crypt_r+0xb48>
    79b0:	and	r1, r2, #63	; 0x3f
    79b4:	add	r1, r5, r1
    79b8:	cmp	r3, #2
    79bc:	ldrb	r4, [r1, #1948]	; 0x79c
    79c0:	lsr	r1, r2, #6
    79c4:	strb	r4, [lr]
    79c8:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    79cc:	and	r1, r1, #63	; 0x3f
    79d0:	add	r1, r5, r1
    79d4:	cmp	r3, #3
    79d8:	ldrb	r1, [r1, #1948]	; 0x79c
    79dc:	lsr	r2, r2, #12
    79e0:	strb	r1, [r0, #2]
    79e4:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    79e8:	add	r5, r5, r2
    79ec:	cmp	r3, #4
    79f0:	ldrb	r3, [r5, #1948]	; 0x79c
    79f4:	strb	r3, [r0, #3]
    79f8:	beq	7bd8 <rb_sha256_crypt_r+0xb48>
    79fc:	ldr	r4, [fp, #-464]	; 0xfffffe30
    7a00:	strb	ip, [r0, #4]
    7a04:	ldr	r2, [pc, #656]	; 7c9c <rb_sha256_crypt_r+0xc0c>
    7a08:	ldr	r3, [pc, #660]	; 7ca4 <rb_sha256_crypt_r+0xc14>
    7a0c:	ldr	r0, [pc, #644]	; 7c98 <rb_sha256_crypt_r+0xc08>
    7a10:	str	r2, [fp, #-380]	; 0xfffffe84
    7a14:	str	r3, [fp, #-376]	; 0xfffffe88
    7a18:	ldr	r2, [pc, #640]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    7a1c:	ldr	r3, [pc, #644]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    7a20:	str	r0, [fp, #-372]	; 0xfffffe8c
    7a24:	ldr	r0, [pc, #640]	; 7cac <rb_sha256_crypt_r+0xc1c>
    7a28:	str	r2, [fp, #-368]	; 0xfffffe90
    7a2c:	str	r3, [fp, #-364]	; 0xfffffe94
    7a30:	ldr	r2, [pc, #632]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    7a34:	ldr	r3, [pc, #632]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    7a38:	mov	r5, #0
    7a3c:	mov	r1, r7
    7a40:	str	r0, [fp, #-360]	; 0xfffffe98
    7a44:	mov	r0, r8
    7a48:	str	r3, [fp, #-352]	; 0xfffffea0
    7a4c:	str	r2, [fp, #-356]	; 0xfffffe9c
    7a50:	str	r5, [fp, #-344]	; 0xfffffea8
    7a54:	str	r5, [fp, #-348]	; 0xfffffea4
    7a58:	str	r5, [fp, #-340]	; 0xfffffeac
    7a5c:	bl	6c18 <rb_sha256_finish_ctx>
    7a60:	mov	r1, r5
    7a64:	mov	r2, #32
    7a68:	ldr	r0, [fp, #-468]	; 0xfffffe2c
    7a6c:	bl	4628 <memset@plt>
    7a70:	mov	r2, r9
    7a74:	mov	r1, r5
    7a78:	ldr	r0, [fp, #-472]	; 0xfffffe28
    7a7c:	bl	4628 <memset@plt>
    7a80:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7a84:	mov	r1, r5
    7a88:	ldr	r0, [fp, #-460]	; 0xfffffe34
    7a8c:	bl	4628 <memset@plt>
    7a90:	mov	r1, r5
    7a94:	mov	r2, #172	; 0xac
    7a98:	mov	r0, r8
    7a9c:	bl	4628 <memset@plt>
    7aa0:	mov	r0, sl
    7aa4:	mov	r1, r5
    7aa8:	mov	r2, #172	; 0xac
    7aac:	bl	4628 <memset@plt>
    7ab0:	ldr	r3, [fp, #-488]	; 0xfffffe18
    7ab4:	cmp	r3, r5
    7ab8:	beq	7acc <rb_sha256_crypt_r+0xa3c>
    7abc:	mov	r2, r9
    7ac0:	mov	r1, r5
    7ac4:	mov	r0, r3
    7ac8:	bl	4628 <memset@plt>
    7acc:	ldr	r3, [fp, #-492]	; 0xfffffe14
    7ad0:	cmp	r3, #0
    7ad4:	beq	7ae8 <rb_sha256_crypt_r+0xa58>
    7ad8:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7adc:	mov	r0, r3
    7ae0:	mov	r1, #0
    7ae4:	bl	4628 <memset@plt>
    7ae8:	mov	r0, r4
    7aec:	sub	sp, fp, #32
    7af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7af4:	ldr	r3, [fp, #-456]	; 0xfffffe38
    7af8:	sub	sl, fp, #208	; 0xd0
    7afc:	mov	r2, #10
    7b00:	add	r0, r3, #7
    7b04:	mov	r1, sl
    7b08:	bl	47fc <strtoul@plt>
    7b0c:	ldr	r3, [fp, #-208]	; 0xffffff30
    7b10:	ldrb	r2, [r3]
    7b14:	cmp	r2, #36	; 0x24
    7b18:	ldrne	r3, [pc, #368]	; 7c90 <rb_sha256_crypt_r+0xc00>
    7b1c:	strne	r3, [fp, #-452]	; 0xfffffe3c
    7b20:	bne	7110 <rb_sha256_crypt_r+0x80>
    7b24:	ldr	r2, [pc, #448]	; 7cec <rb_sha256_crypt_r+0xc5c>
    7b28:	add	r3, r3, #1
    7b2c:	cmp	r0, r2
    7b30:	str	r3, [fp, #-456]	; 0xfffffe38
    7b34:	movcc	r3, r0
    7b38:	movcs	r3, r2
    7b3c:	cmp	r3, #1000	; 0x3e8
    7b40:	movcc	r3, #1000	; 0x3e8
    7b44:	str	r3, [fp, #-452]	; 0xfffffe3c
    7b48:	mov	r3, #1
    7b4c:	str	r3, [fp, #-480]	; 0xfffffe20
    7b50:	b	7110 <rb_sha256_crypt_r+0x80>
    7b54:	ldr	r2, [pc, #404]	; 7cf0 <rb_sha256_crypt_r+0xc60>
    7b58:	bic	r1, r5, r5, asr #31
    7b5c:	add	r2, pc, r2
    7b60:	add	r3, r2, #1936	; 0x790
    7b64:	ldr	r2, [pc, #392]	; 7cf4 <rb_sha256_crypt_r+0xc64>
    7b68:	mov	r0, r4
    7b6c:	str	r6, [sp]
    7b70:	add	r3, r3, #4
    7b74:	add	r2, pc, r2
    7b78:	bl	4bb0 <snprintf@plt>
    7b7c:	add	r4, r4, r0
    7b80:	sub	r5, r5, r0
    7b84:	b	75e4 <rb_sha256_crypt_r+0x554>
    7b88:	ldr	r2, [fp, #-448]	; 0xfffffe40
    7b8c:	ldr	r1, [fp, #-456]	; 0xfffffe38
    7b90:	add	r3, r2, #18
    7b94:	bic	r3, r3, #7
    7b98:	sub	sp, sp, r3
    7b9c:	add	r0, sp, #12
    7ba0:	bl	4808 <memcpy@plt>
    7ba4:	str	r0, [fp, #-456]	; 0xfffffe38
    7ba8:	str	r0, [fp, #-492]	; 0xfffffe14
    7bac:	b	7158 <rb_sha256_crypt_r+0xc8>
    7bb0:	add	r3, r0, #18
    7bb4:	bic	r3, r3, #7
    7bb8:	sub	sp, sp, r3
    7bbc:	mov	r1, r4
    7bc0:	add	r0, sp, #12
    7bc4:	mov	r2, r9
    7bc8:	bl	4808 <memcpy@plt>
    7bcc:	mov	r4, r0
    7bd0:	str	r0, [fp, #-488]	; 0xfffffe18
    7bd4:	b	7148 <rb_sha256_crypt_r+0xb8>
    7bd8:	bl	4ce8 <__errno_location@plt>
    7bdc:	mov	r3, #34	; 0x22
    7be0:	mov	r4, #0
    7be4:	str	r3, [r0]
    7be8:	b	7a04 <rb_sha256_crypt_r+0x974>
    7bec:	mov	r2, r8
    7bf0:	mov	r1, r9
    7bf4:	mov	r0, r7
    7bf8:	bl	6a64 <rb_sha256_process_bytes>
    7bfc:	cmp	r9, #0
    7c00:	bne	7298 <rb_sha256_crypt_r+0x208>
    7c04:	sub	r3, fp, #412	; 0x19c
    7c08:	mov	r1, r7
    7c0c:	mov	r0, r8
    7c10:	mov	r4, r3
    7c14:	str	r3, [fp, #-468]	; 0xfffffe2c
    7c18:	bl	6c18 <rb_sha256_finish_ctx>
    7c1c:	ldr	r3, [pc, #116]	; 7c98 <rb_sha256_crypt_r+0xc08>
    7c20:	mov	r1, r4
    7c24:	str	r3, [fp, #-200]	; 0xffffff38
    7c28:	ldr	r3, [pc, #112]	; 7ca0 <rb_sha256_crypt_r+0xc10>
    7c2c:	mov	r0, sl
    7c30:	str	r3, [fp, #-196]	; 0xffffff3c
    7c34:	ldr	r3, [pc, #108]	; 7ca8 <rb_sha256_crypt_r+0xc18>
    7c38:	str	r5, [fp, #-208]	; 0xffffff30
    7c3c:	str	r3, [fp, #-192]	; 0xffffff40
    7c40:	ldr	r3, [pc, #100]	; 7cac <rb_sha256_crypt_r+0xc1c>
    7c44:	str	r6, [fp, #-204]	; 0xffffff34
    7c48:	str	r3, [fp, #-188]	; 0xffffff44
    7c4c:	ldr	r3, [pc, #92]	; 7cb0 <rb_sha256_crypt_r+0xc20>
    7c50:	str	r9, [fp, #-172]	; 0xffffff54
    7c54:	str	r3, [fp, #-184]	; 0xffffff48
    7c58:	ldr	r3, [pc, #84]	; 7cb4 <rb_sha256_crypt_r+0xc24>
    7c5c:	str	r9, [fp, #-176]	; 0xffffff50
    7c60:	str	r3, [fp, #-180]	; 0xffffff4c
    7c64:	str	r9, [fp, #-168]	; 0xffffff58
    7c68:	bl	6c18 <rb_sha256_finish_ctx>
    7c6c:	add	r0, sp, #8
    7c70:	str	r0, [fp, #-472]	; 0xfffffe28
    7c74:	mov	r2, r9
    7c78:	b	73b4 <rb_sha256_crypt_r+0x324>
    7c7c:	ldr	r0, [fp, #-472]	; 0xfffffe28
    7c80:	mov	r2, r9
    7c84:	b	73b4 <rb_sha256_crypt_r+0x324>
    7c88:	.word	0x0000dfc4
    7c8c:	.word	0x0000df94
    7c90:	.word	0x00001388
    7c94:	.word	0x0000e744
    7c98:	.word	0x3c6ef372
    7c9c:	.word	0x6a09e667
    7ca0:	.word	0xa54ff53a
    7ca4:	.word	0xbb67ae85
    7ca8:	.word	0x510e527f
    7cac:	.word	0x9b05688c
    7cb0:	.word	0x1f83d9ab
    7cb4:	.word	0x5be0cd19
    7cb8:	.word	0x24924925
    7cbc:	.word	0xaaaaaaab
    7cc0:	.word	0x0000dab8
    7cc4:	.word	0x0000d9f4
    7cc8:	.word	0x0000d9a0
    7ccc:	.word	0x0000d94c
    7cd0:	.word	0x0000d8f8
    7cd4:	.word	0x0000d8a4
    7cd8:	.word	0x0000d850
    7cdc:	.word	0x0000d7fc
    7ce0:	.word	0x0000d7a8
    7ce4:	.word	0x0000d754
    7ce8:	.word	0x0000d708
    7cec:	.word	0x3b9ac9ff
    7cf0:	.word	0x0000d504
    7cf4:	.word	0x0000dcec

00007cf8 <rb_sha512_crypt_r>:
    7cf8:	ldr	ip, [pc, #1120]	; 8160 <rb_sha512_crypt_r+0x468>
    7cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d00:	add	fp, sp, #32
    7d04:	add	ip, pc, ip
    7d08:	sub	sp, sp, #876	; 0x36c
    7d0c:	mov	r6, r0
    7d10:	add	r0, ip, #2016	; 0x7e0
    7d14:	str	r2, [fp, #-880]	; 0xfffffc90
    7d18:	mov	r2, #3
    7d1c:	str	r3, [fp, #-888]	; 0xfffffc88
    7d20:	mov	r4, r1
    7d24:	str	r1, [fp, #-868]	; 0xfffffc9c
    7d28:	bl	4c10 <strncmp@plt>
    7d2c:	ldr	r1, [pc, #1072]	; 8164 <rb_sha512_crypt_r+0x46c>
    7d30:	mov	r2, #7
    7d34:	add	r1, pc, r1
    7d38:	add	r1, r1, #2016	; 0x7e0
    7d3c:	add	r1, r1, #4
    7d40:	cmp	r0, #0
    7d44:	addeq	r3, r4, #3
    7d48:	streq	r3, [fp, #-868]	; 0xfffffc9c
    7d4c:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    7d50:	bl	4c10 <strncmp@plt>
    7d54:	subs	r3, r0, #0
    7d58:	str	r3, [fp, #-892]	; 0xfffffc84
    7d5c:	beq	8cc8 <rb_sha512_crypt_r+0xfd0>
    7d60:	ldr	r3, [pc, #1024]	; 8168 <rb_sha512_crypt_r+0x470>
    7d64:	str	r3, [fp, #-864]	; 0xfffffca0
    7d68:	mov	r3, #0
    7d6c:	str	r3, [fp, #-892]	; 0xfffffc84
    7d70:	sub	r3, fp, #380	; 0x17c
    7d74:	str	r3, [fp, #-872]	; 0xfffffc98
    7d78:	ldr	r1, [pc, #1004]	; 816c <rb_sha512_crypt_r+0x474>
    7d7c:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    7d80:	add	r1, pc, r1
    7d84:	bl	4be0 <strcspn@plt>
    7d88:	cmp	r0, #16
    7d8c:	movcc	r3, r0
    7d90:	movcs	r3, #16
    7d94:	mov	r0, r6
    7d98:	str	r3, [fp, #-860]	; 0xfffffca4
    7d9c:	bl	47e4 <strlen@plt>
    7da0:	ands	r3, r6, #7
    7da4:	streq	r3, [fp, #-896]	; 0xfffffc80
    7da8:	mov	sl, r0
    7dac:	bne	8d88 <rb_sha512_crypt_r+0x1090>
    7db0:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    7db4:	ands	r3, r3, #7
    7db8:	streq	r3, [fp, #-900]	; 0xfffffc7c
    7dbc:	bne	8d60 <rb_sha512_crypt_r+0x1068>
    7dc0:	add	r9, pc, #856	; 0x358
    7dc4:	ldrd	r8, [r9]
    7dc8:	sub	r4, fp, #724	; 0x2d4
    7dcc:	sub	r5, fp, #372	; 0x174
    7dd0:	strd	r8, [r4]
    7dd4:	add	r9, pc, #844	; 0x34c
    7dd8:	ldrd	r8, [r9]
    7ddc:	mov	r2, r4
    7de0:	mov	r1, sl
    7de4:	strd	r8, [r4, #8]
    7de8:	add	r9, pc, #832	; 0x340
    7dec:	ldrd	r8, [r9]
    7df0:	mov	r0, r6
    7df4:	strd	r8, [r4, #16]
    7df8:	add	r9, pc, #824	; 0x338
    7dfc:	ldrd	r8, [r9]
    7e00:	strd	r8, [r4, #24]
    7e04:	add	r9, pc, #820	; 0x334
    7e08:	ldrd	r8, [r9]
    7e0c:	strd	r8, [r4, #32]
    7e10:	add	r9, pc, #816	; 0x330
    7e14:	ldrd	r8, [r9]
    7e18:	strd	r8, [r4, #40]	; 0x28
    7e1c:	add	r9, pc, #812	; 0x32c
    7e20:	ldrd	r8, [r9]
    7e24:	strd	r8, [r4, #48]	; 0x30
    7e28:	add	r9, pc, #808	; 0x328
    7e2c:	ldrd	r8, [r9]
    7e30:	strd	r8, [r4, #56]	; 0x38
    7e34:	mov	r8, #0
    7e38:	mov	r9, #0
    7e3c:	strd	r8, [r4, #72]	; 0x48
    7e40:	strd	r8, [r4, #64]	; 0x40
    7e44:	strd	r8, [r4, #80]	; 0x50
    7e48:	add	r9, pc, #720	; 0x2d0
    7e4c:	ldrd	r8, [r9]
    7e50:	bl	6cec <rb_sha512_process_bytes>
    7e54:	mov	r2, r4
    7e58:	ldr	r1, [fp, #-860]	; 0xfffffca4
    7e5c:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    7e60:	bl	6cec <rb_sha512_process_bytes>
    7e64:	strd	r8, [r5, #-8]
    7e68:	add	r9, pc, #696	; 0x2b8
    7e6c:	ldrd	r8, [r9]
    7e70:	ldr	r7, [fp, #-872]	; 0xfffffc98
    7e74:	mov	r1, sl
    7e78:	strd	r8, [r5]
    7e7c:	add	r9, pc, #684	; 0x2ac
    7e80:	ldrd	r8, [r9]
    7e84:	mov	r2, r7
    7e88:	mov	r0, r6
    7e8c:	strd	r8, [r5, #8]
    7e90:	add	r9, pc, #672	; 0x2a0
    7e94:	ldrd	r8, [r9]
    7e98:	strd	r8, [r5, #16]
    7e9c:	add	r9, pc, #668	; 0x29c
    7ea0:	ldrd	r8, [r9]
    7ea4:	strd	r8, [r5, #24]
    7ea8:	add	r9, pc, #664	; 0x298
    7eac:	ldrd	r8, [r9]
    7eb0:	strd	r8, [r5, #32]
    7eb4:	add	r9, pc, #660	; 0x294
    7eb8:	ldrd	r8, [r9]
    7ebc:	strd	r8, [r5, #40]	; 0x28
    7ec0:	add	r9, pc, #656	; 0x290
    7ec4:	ldrd	r8, [r9]
    7ec8:	strd	r8, [r5, #48]	; 0x30
    7ecc:	mov	r9, #0
    7ed0:	mov	r8, #0
    7ed4:	strd	r8, [r5, #64]	; 0x40
    7ed8:	strd	r8, [r5, #56]	; 0x38
    7edc:	strd	r8, [r5, #72]	; 0x48
    7ee0:	bl	6cec <rb_sha512_process_bytes>
    7ee4:	mov	r2, r7
    7ee8:	ldr	r1, [fp, #-860]	; 0xfffffca4
    7eec:	ldr	r0, [fp, #-868]	; 0xfffffc9c
    7ef0:	bl	6cec <rb_sha512_process_bytes>
    7ef4:	sub	r9, fp, #852	; 0x354
    7ef8:	mov	r2, r7
    7efc:	mov	r1, sl
    7f00:	mov	r0, r6
    7f04:	bl	6cec <rb_sha512_process_bytes>
    7f08:	mov	r1, r9
    7f0c:	mov	r0, r7
    7f10:	bl	6e88 <rb_sha512_finish_ctx>
    7f14:	cmp	sl, #64	; 0x40
    7f18:	bls	8db0 <rb_sha512_crypt_r+0x10b8>
    7f1c:	mov	r8, sl
    7f20:	mov	r7, #64	; 0x40
    7f24:	sub	r8, r8, #64	; 0x40
    7f28:	mov	r2, r4
    7f2c:	mov	r1, r7
    7f30:	mov	r0, r9
    7f34:	bl	6cec <rb_sha512_process_bytes>
    7f38:	cmp	r8, #64	; 0x40
    7f3c:	bhi	7f24 <rb_sha512_crypt_r+0x22c>
    7f40:	sub	r3, sl, #65	; 0x41
    7f44:	bic	r3, r3, #63	; 0x3f
    7f48:	sub	r1, sl, #64	; 0x40
    7f4c:	sub	r1, r1, r3
    7f50:	mov	r2, r4
    7f54:	mov	r0, r9
    7f58:	bl	6cec <rb_sha512_process_bytes>
    7f5c:	mov	r7, sl
    7f60:	mov	r8, #64	; 0x40
    7f64:	tst	r7, #1
    7f68:	mov	r1, sl
    7f6c:	mov	r0, r6
    7f70:	movne	r1, r8
    7f74:	movne	r0, r9
    7f78:	mov	r2, r4
    7f7c:	bl	6cec <rb_sha512_process_bytes>
    7f80:	lsrs	r7, r7, #1
    7f84:	bne	7f64 <rb_sha512_crypt_r+0x26c>
    7f88:	mov	r1, r9
    7f8c:	mov	r0, r4
    7f90:	bl	6e88 <rb_sha512_finish_ctx>
    7f94:	add	r1, pc, #388	; 0x184
    7f98:	ldrd	r0, [r1]
    7f9c:	add	r3, pc, #388	; 0x184
    7fa0:	ldrd	r2, [r3]
    7fa4:	ldr	r8, [fp, #-872]	; 0xfffffc98
    7fa8:	strd	r0, [r5, #-8]
    7fac:	add	r1, pc, #380	; 0x17c
    7fb0:	ldrd	r0, [r1]
    7fb4:	strd	r2, [r5]
    7fb8:	add	r3, pc, #376	; 0x178
    7fbc:	ldrd	r2, [r3]
    7fc0:	strd	r0, [r5, #8]
    7fc4:	add	r1, pc, #372	; 0x174
    7fc8:	ldrd	r0, [r1]
    7fcc:	strd	r2, [r5, #16]
    7fd0:	add	r3, pc, #368	; 0x170
    7fd4:	ldrd	r2, [r3]
    7fd8:	strd	r0, [r5, #24]
    7fdc:	add	r1, pc, #364	; 0x16c
    7fe0:	ldrd	r0, [r1]
    7fe4:	strd	r2, [r5, #32]
    7fe8:	mov	r2, #0
    7fec:	strd	r0, [r5, #40]	; 0x28
    7ff0:	add	r1, pc, #352	; 0x160
    7ff4:	ldrd	r0, [r1]
    7ff8:	mov	r3, #0
    7ffc:	strd	r0, [r5, #48]	; 0x30
    8000:	strd	r2, [r5, #64]	; 0x40
    8004:	strd	r2, [r5, #56]	; 0x38
    8008:	strd	r2, [r5, #72]	; 0x48
    800c:	add	r7, r7, #1
    8010:	mov	r2, r8
    8014:	mov	r1, sl
    8018:	mov	r0, r6
    801c:	bl	6cec <rb_sha512_process_bytes>
    8020:	cmp	sl, r7
    8024:	bne	800c <rb_sha512_crypt_r+0x314>
    8028:	sub	r8, fp, #788	; 0x314
    802c:	mov	r1, r8
    8030:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8034:	str	r8, [fp, #-884]	; 0xfffffc8c
    8038:	bl	6e88 <rb_sha512_finish_ctx>
    803c:	add	r3, sl, #14
    8040:	bic	r3, r3, #7
    8044:	sub	sp, sp, r3
    8048:	add	r3, sp, #8
    804c:	cmp	sl, #63	; 0x3f
    8050:	str	r3, [fp, #-856]	; 0xfffffca8
    8054:	bls	8e80 <rb_sha512_crypt_r+0x1188>
    8058:	add	r7, sp, #72	; 0x48
    805c:	mov	r6, sl
    8060:	mov	lr, r8
    8064:	sub	ip, r7, #64	; 0x40
    8068:	ldm	lr!, {r0, r1, r2, r3}
    806c:	sub	r6, r6, #64	; 0x40
    8070:	cmp	r6, #63	; 0x3f
    8074:	add	r7, r7, #64	; 0x40
    8078:	stmia	ip!, {r0, r1, r2, r3}
    807c:	ldm	lr!, {r0, r1, r2, r3}
    8080:	stmia	ip!, {r0, r1, r2, r3}
    8084:	ldm	lr!, {r0, r1, r2, r3}
    8088:	stmia	ip!, {r0, r1, r2, r3}
    808c:	ldm	lr, {r0, r1, r2, r3}
    8090:	stm	ip, {r0, r1, r2, r3}
    8094:	bhi	8060 <rb_sha512_crypt_r+0x368>
    8098:	sub	r0, sl, #64	; 0x40
    809c:	bic	r0, r0, #63	; 0x3f
    80a0:	ldr	r3, [fp, #-856]	; 0xfffffca8
    80a4:	add	r0, r0, #64	; 0x40
    80a8:	add	r0, r3, r0
    80ac:	and	r2, sl, #63	; 0x3f
    80b0:	ldr	r1, [fp, #-884]	; 0xfffffc8c
    80b4:	bl	4808 <memcpy@plt>
    80b8:	add	r1, pc, #104	; 0x68
    80bc:	ldrd	r0, [r1]
    80c0:	add	r3, pc, #104	; 0x68
    80c4:	ldrd	r2, [r3]
    80c8:	add	r7, pc, #80	; 0x50
    80cc:	ldrd	r6, [r7]
    80d0:	strd	r0, [r5]
    80d4:	add	r1, pc, #92	; 0x5c
    80d8:	ldrd	r0, [r1]
    80dc:	strd	r2, [r5, #8]
    80e0:	add	r3, pc, #88	; 0x58
    80e4:	ldrd	r2, [r3]
    80e8:	strd	r0, [r5, #16]
    80ec:	add	r1, pc, #84	; 0x54
    80f0:	ldrd	r0, [r1]
    80f4:	strd	r2, [r5, #24]
    80f8:	add	r3, pc, #80	; 0x50
    80fc:	ldrd	r2, [r3]
    8100:	strd	r0, [r5, #32]
    8104:	add	r1, pc, #76	; 0x4c
    8108:	ldrd	r0, [r1]
    810c:	strd	r2, [r5, #40]	; 0x28
    8110:	mov	r2, #0
    8114:	mov	r3, #0
    8118:	b	8178 <rb_sha512_crypt_r+0x480>
    811c:	nop			; (mov r0, r0)
    8120:	.word	0xf3bcc908
    8124:	.word	0x6a09e667
    8128:	.word	0x84caa73b
    812c:	.word	0xbb67ae85
    8130:	.word	0xfe94f82b
    8134:	.word	0x3c6ef372
    8138:	.word	0x5f1d36f1
    813c:	.word	0xa54ff53a
    8140:	.word	0xade682d1
    8144:	.word	0x510e527f
    8148:	.word	0x2b3e6c1f
    814c:	.word	0x9b05688c
    8150:	.word	0xfb41bd6b
    8154:	.word	0x1f83d9ab
    8158:	.word	0x137e2179
    815c:	.word	0x5be0cd19
    8160:	.word	0x0000d35c
    8164:	.word	0x0000d32c
    8168:	.word	0x00001388
    816c:	.word	0x0000dadc
    8170:	.word	0xaaaaaaab
    8174:	.word	0x24924925
    8178:	strd	r6, [r5, #-8]
    817c:	ldr	r8, [fp, #-872]	; 0xfffffc98
    8180:	ldr	r6, [fp, #-860]	; 0xfffffca4
    8184:	ldr	r7, [fp, #-868]	; 0xfffffc9c
    8188:	strd	r0, [r5, #48]	; 0x30
    818c:	strd	r2, [r5, #64]	; 0x40
    8190:	strd	r2, [r5, #56]	; 0x38
    8194:	strd	r2, [r5, #72]	; 0x48
    8198:	mov	r5, #0
    819c:	mov	r2, r8
    81a0:	mov	r1, r6
    81a4:	mov	r0, r7
    81a8:	bl	6cec <rb_sha512_process_bytes>
    81ac:	ldrb	r3, [fp, #-852]	; 0xfffffcac
    81b0:	add	r5, r5, #1
    81b4:	add	r3, r3, #16
    81b8:	cmp	r3, r5
    81bc:	bhi	819c <rb_sha512_crypt_r+0x4a4>
    81c0:	ldr	r5, [fp, #-884]	; 0xfffffc8c
    81c4:	ldr	r0, [fp, #-872]	; 0xfffffc98
    81c8:	mov	r1, r5
    81cc:	bl	6e88 <rb_sha512_finish_ctx>
    81d0:	ldr	r2, [fp, #-860]	; 0xfffffca4
    81d4:	mov	r1, r5
    81d8:	add	r3, r2, #14
    81dc:	bic	r3, r3, #7
    81e0:	sub	sp, sp, r3
    81e4:	add	r0, sp, #8
    81e8:	str	r0, [fp, #-876]	; 0xfffffc94
    81ec:	mov	r5, #0
    81f0:	bl	4808 <memcpy@plt>
    81f4:	ldr	r7, [pc, #-140]	; 8170 <rb_sha512_crypt_r+0x478>
    81f8:	ldr	r6, [pc, #-140]	; 8174 <rb_sha512_crypt_r+0x47c>
    81fc:	b	8254 <rb_sha512_crypt_r+0x55c>
    8200:	umull	r2, r3, r6, r5
    8204:	sub	r2, r5, r3
    8208:	add	r3, r3, r2, lsr #1
    820c:	lsr	r3, r3, #2
    8210:	rsb	r3, r3, r3, lsl #3
    8214:	cmp	r5, r3
    8218:	bne	830c <rb_sha512_crypt_r+0x614>
    821c:	cmp	r8, #0
    8220:	movne	r1, #64	; 0x40
    8224:	movne	r0, r9
    8228:	moveq	r1, sl
    822c:	ldreq	r0, [fp, #-856]	; 0xfffffca8
    8230:	mov	r2, r4
    8234:	bl	6cec <rb_sha512_process_bytes>
    8238:	mov	r1, r9
    823c:	mov	r0, r4
    8240:	bl	6e88 <rb_sha512_finish_ctx>
    8244:	ldr	r3, [fp, #-864]	; 0xfffffca0
    8248:	add	r5, r5, #1
    824c:	cmp	r3, r5
    8250:	beq	83b8 <rb_sha512_crypt_r+0x6c0>
    8254:	add	r3, pc, #196	; 0xc4
    8258:	ldrd	r2, [r3]
    825c:	add	r1, pc, #196	; 0xc4
    8260:	ldrd	r0, [r1]
    8264:	ands	r8, r5, #1
    8268:	strd	r2, [r4, #8]
    826c:	add	r3, pc, #188	; 0xbc
    8270:	ldrd	r2, [r3]
    8274:	strd	r0, [r4, #16]
    8278:	add	r1, pc, #184	; 0xb8
    827c:	ldrd	r0, [r1]
    8280:	strd	r2, [r4, #32]
    8284:	add	r3, pc, #180	; 0xb4
    8288:	ldrd	r2, [r3]
    828c:	strd	r0, [r4, #48]	; 0x30
    8290:	movne	r1, sl
    8294:	strd	r2, [r4, #40]	; 0x28
    8298:	add	r3, pc, #168	; 0xa8
    829c:	ldrd	r2, [r3]
    82a0:	ldrne	r0, [fp, #-856]	; 0xfffffca8
    82a4:	moveq	r1, #64	; 0x40
    82a8:	strd	r2, [r4, #56]	; 0x38
    82ac:	add	r3, pc, #156	; 0x9c
    82b0:	ldrd	r2, [r3]
    82b4:	moveq	r0, r9
    82b8:	strd	r2, [r4]
    82bc:	add	r3, pc, #148	; 0x94
    82c0:	ldrd	r2, [r3]
    82c4:	strd	r2, [r4, #24]
    82c8:	mov	r3, #0
    82cc:	mov	r2, #0
    82d0:	strd	r2, [r4, #72]	; 0x48
    82d4:	strd	r2, [r4, #64]	; 0x40
    82d8:	strd	r2, [r4, #80]	; 0x50
    82dc:	mov	r2, r4
    82e0:	bl	6cec <rb_sha512_process_bytes>
    82e4:	umull	r2, r3, r7, r5
    82e8:	lsr	r3, r3, #1
    82ec:	add	r3, r3, r3, lsl #1
    82f0:	cmp	r5, r3
    82f4:	beq	8200 <rb_sha512_crypt_r+0x508>
    82f8:	mov	r2, r4
    82fc:	ldr	r1, [fp, #-860]	; 0xfffffca4
    8300:	ldr	r0, [fp, #-876]	; 0xfffffc94
    8304:	bl	6cec <rb_sha512_process_bytes>
    8308:	b	8200 <rb_sha512_crypt_r+0x508>
    830c:	mov	r2, r4
    8310:	mov	r1, sl
    8314:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8318:	bl	6cec <rb_sha512_process_bytes>
    831c:	b	821c <rb_sha512_crypt_r+0x524>
    8320:	.word	0x84caa73b
    8324:	.word	0xbb67ae85
    8328:	.word	0xfe94f82b
    832c:	.word	0x3c6ef372
    8330:	.word	0xade682d1
    8334:	.word	0x510e527f
    8338:	.word	0xfb41bd6b
    833c:	.word	0x1f83d9ab
    8340:	.word	0x2b3e6c1f
    8344:	.word	0x9b05688c
    8348:	.word	0x137e2179
    834c:	.word	0x5be0cd19
    8350:	.word	0xf3bcc908
    8354:	.word	0x6a09e667
    8358:	.word	0x5f1d36f1
    835c:	.word	0xa54ff53a
    8360:	.word	0x0000cc84
    8364:	.word	0x0000cbbc
    8368:	.word	0x0000cb68
    836c:	.word	0x0000cb14
    8370:	.word	0x0000cac0
    8374:	.word	0x0000ca6c
    8378:	.word	0x0000ca18
    837c:	.word	0x0000c9c4
    8380:	.word	0x0000c970
    8384:	.word	0x0000c91c
    8388:	.word	0x0000c8c8
    838c:	.word	0x0000c874
    8390:	.word	0x0000c820
    8394:	.word	0x0000c7cc
    8398:	.word	0x0000c778
    839c:	.word	0x0000c724
    83a0:	.word	0x0000c6d0
    83a4:	.word	0x0000c67c
    83a8:	.word	0x0000c628
    83ac:	.word	0x0000c5d4
    83b0:	.word	0x0000c580
    83b4:	.word	0x0000c534
    83b8:	ldr	r3, [fp, #-888]	; 0xfffffc88
    83bc:	ldr	r7, [fp, #-880]	; 0xfffffc90
    83c0:	mov	r1, #0
    83c4:	bic	r6, r3, r3, asr #31
    83c8:	mov	r0, r7
    83cc:	mov	r2, r6
    83d0:	bl	4628 <memset@plt>
    83d4:	ldr	r1, [pc, #-124]	; 8360 <rb_sha512_crypt_r+0x668>
    83d8:	mov	r2, r6
    83dc:	add	r1, pc, r1
    83e0:	add	r1, r1, #2016	; 0x7e0
    83e4:	mov	r0, r7
    83e8:	bl	4574 <strncpy@plt>
    83ec:	mov	r0, r7
    83f0:	mov	r1, #0
    83f4:	bl	45b0 <strchr@plt>
    83f8:	subs	r7, r0, #0
    83fc:	ldreq	r3, [fp, #-880]	; 0xfffffc90
    8400:	addeq	r7, r3, r6
    8404:	ldr	r3, [fp, #-892]	; 0xfffffc84
    8408:	cmp	r3, #0
    840c:	ldr	r3, [fp, #-888]	; 0xfffffc88
    8410:	sub	r6, r3, #3
    8414:	bne	8d2c <rb_sha512_crypt_r+0x1034>
    8418:	ldr	r3, [fp, #-860]	; 0xfffffca4
    841c:	bic	r5, r6, r6, asr #31
    8420:	cmp	r5, r3
    8424:	movcs	r5, r3
    8428:	mov	r2, r5
    842c:	mov	r1, #0
    8430:	mov	r0, r7
    8434:	bl	4628 <memset@plt>
    8438:	mov	r2, r5
    843c:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    8440:	mov	r0, r7
    8444:	bl	4574 <strncpy@plt>
    8448:	mov	r1, #0
    844c:	ldr	r0, [fp, #-880]	; 0xfffffc90
    8450:	bl	45b0 <strchr@plt>
    8454:	sub	r6, r6, r5
    8458:	cmp	r0, #0
    845c:	ldreq	r3, [fp, #-880]	; 0xfffffc90
    8460:	ldreq	r2, [fp, #-860]	; 0xfffffca4
    8464:	addeq	r0, r3, r2
    8468:	cmp	r6, #0
    846c:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8470:	ldrb	r3, [fp, #-831]	; 0xfffffcc1
    8474:	ldrb	r1, [fp, #-852]	; 0xfffffcac
    8478:	ldrb	r2, [fp, #-810]	; 0xfffffcd6
    847c:	subs	r6, r6, #1
    8480:	lsl	r3, r3, #8
    8484:	orr	r3, r3, r1, lsl #16
    8488:	mov	r1, #36	; 0x24
    848c:	strb	r1, [r0]
    8490:	orr	r3, r3, r2
    8494:	add	r0, r0, #1
    8498:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    849c:	ldr	lr, [pc, #-320]	; 8364 <rb_sha512_crypt_r+0x66c>
    84a0:	mov	r2, r6
    84a4:	add	lr, pc, lr
    84a8:	and	r1, r3, #63	; 0x3f
    84ac:	add	r1, lr, r1
    84b0:	sub	r2, r2, #1
    84b4:	ldrb	r1, [r1, #1948]	; 0x79c
    84b8:	add	ip, r2, #4
    84bc:	cmp	ip, r6
    84c0:	cmpne	r2, #0
    84c4:	strb	r1, [r0], #1
    84c8:	lsr	r3, r3, #6
    84cc:	bgt	84a8 <rb_sha512_crypt_r+0x7b0>
    84d0:	ldrb	r1, [fp, #-809]	; 0xfffffcd7
    84d4:	ldrb	ip, [fp, #-830]	; 0xfffffcc2
    84d8:	ldrb	r3, [fp, #-851]	; 0xfffffcad
    84dc:	cmp	r2, #0
    84e0:	lsl	r1, r1, #8
    84e4:	orr	r1, r1, ip, lsl #16
    84e8:	orr	r1, r1, r3
    84ec:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    84f0:	ldr	r5, [pc, #-400]	; 8368 <rb_sha512_crypt_r+0x670>
    84f4:	mov	r3, r2
    84f8:	add	r5, pc, r5
    84fc:	and	ip, r1, #63	; 0x3f
    8500:	add	ip, r5, ip
    8504:	sub	r3, r3, #1
    8508:	ldrb	ip, [ip, #1948]	; 0x79c
    850c:	add	lr, r3, #4
    8510:	cmp	lr, r2
    8514:	cmpne	r3, #0
    8518:	strb	ip, [r0], #1
    851c:	lsr	r1, r1, #6
    8520:	bgt	84fc <rb_sha512_crypt_r+0x804>
    8524:	ldrb	r1, [fp, #-850]	; 0xfffffcae
    8528:	ldrb	ip, [fp, #-808]	; 0xfffffcd8
    852c:	ldrb	r2, [fp, #-829]	; 0xfffffcc3
    8530:	cmp	r3, #0
    8534:	lsl	r1, r1, #8
    8538:	orr	r1, r1, ip, lsl #16
    853c:	orr	r1, r1, r2
    8540:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    8544:	ldr	r5, [pc, #-480]	; 836c <rb_sha512_crypt_r+0x674>
    8548:	mov	r2, r3
    854c:	add	r5, pc, r5
    8550:	and	ip, r1, #63	; 0x3f
    8554:	add	ip, r5, ip
    8558:	sub	r2, r2, #1
    855c:	ldrb	ip, [ip, #1948]	; 0x79c
    8560:	add	lr, r2, #4
    8564:	cmp	lr, r3
    8568:	cmpne	r2, #0
    856c:	strb	ip, [r0], #1
    8570:	lsr	r1, r1, #6
    8574:	bgt	8550 <rb_sha512_crypt_r+0x858>
    8578:	ldrb	r1, [fp, #-828]	; 0xfffffcc4
    857c:	ldrb	ip, [fp, #-849]	; 0xfffffcaf
    8580:	ldrb	r3, [fp, #-807]	; 0xfffffcd9
    8584:	cmp	r2, #0
    8588:	lsl	r1, r1, #8
    858c:	orr	r1, r1, ip, lsl #16
    8590:	orr	r1, r1, r3
    8594:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8598:	ldr	r5, [pc, #-560]	; 8370 <rb_sha512_crypt_r+0x678>
    859c:	mov	r3, r2
    85a0:	add	r5, pc, r5
    85a4:	and	ip, r1, #63	; 0x3f
    85a8:	add	ip, r5, ip
    85ac:	sub	r3, r3, #1
    85b0:	ldrb	ip, [ip, #1948]	; 0x79c
    85b4:	add	lr, r3, #4
    85b8:	cmp	lr, r2
    85bc:	cmpne	r3, #0
    85c0:	strb	ip, [r0], #1
    85c4:	lsr	r1, r1, #6
    85c8:	bgt	85a4 <rb_sha512_crypt_r+0x8ac>
    85cc:	ldrb	r1, [fp, #-806]	; 0xfffffcda
    85d0:	ldrb	ip, [fp, #-827]	; 0xfffffcc5
    85d4:	ldrb	r2, [fp, #-848]	; 0xfffffcb0
    85d8:	cmp	r3, #0
    85dc:	lsl	r1, r1, #8
    85e0:	orr	r1, r1, ip, lsl #16
    85e4:	orr	r1, r1, r2
    85e8:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    85ec:	ldr	r5, [pc, #-640]	; 8374 <rb_sha512_crypt_r+0x67c>
    85f0:	mov	r2, r3
    85f4:	add	r5, pc, r5
    85f8:	and	ip, r1, #63	; 0x3f
    85fc:	add	ip, r5, ip
    8600:	sub	r2, r2, #1
    8604:	ldrb	ip, [ip, #1948]	; 0x79c
    8608:	add	lr, r2, #4
    860c:	cmp	lr, r3
    8610:	cmpne	r2, #0
    8614:	strb	ip, [r0], #1
    8618:	lsr	r1, r1, #6
    861c:	bgt	85f8 <rb_sha512_crypt_r+0x900>
    8620:	ldrb	r1, [fp, #-847]	; 0xfffffcb1
    8624:	ldrb	ip, [fp, #-805]	; 0xfffffcdb
    8628:	ldrb	r3, [fp, #-826]	; 0xfffffcc6
    862c:	cmp	r2, #0
    8630:	lsl	r1, r1, #8
    8634:	orr	r1, r1, ip, lsl #16
    8638:	orr	r1, r1, r3
    863c:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8640:	ldr	r5, [pc, #-720]	; 8378 <rb_sha512_crypt_r+0x680>
    8644:	mov	r3, r2
    8648:	add	r5, pc, r5
    864c:	and	ip, r1, #63	; 0x3f
    8650:	add	ip, r5, ip
    8654:	sub	r3, r3, #1
    8658:	ldrb	ip, [ip, #1948]	; 0x79c
    865c:	add	lr, r3, #4
    8660:	cmp	lr, r2
    8664:	cmpne	r3, #0
    8668:	strb	ip, [r0], #1
    866c:	lsr	r1, r1, #6
    8670:	bgt	864c <rb_sha512_crypt_r+0x954>
    8674:	ldrb	r1, [fp, #-825]	; 0xfffffcc7
    8678:	ldrb	ip, [fp, #-846]	; 0xfffffcb2
    867c:	ldrb	r2, [fp, #-804]	; 0xfffffcdc
    8680:	cmp	r3, #0
    8684:	lsl	r1, r1, #8
    8688:	orr	r1, r1, ip, lsl #16
    868c:	orr	r1, r1, r2
    8690:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    8694:	ldr	r5, [pc, #-800]	; 837c <rb_sha512_crypt_r+0x684>
    8698:	mov	r2, r3
    869c:	add	r5, pc, r5
    86a0:	and	ip, r1, #63	; 0x3f
    86a4:	add	ip, r5, ip
    86a8:	sub	r2, r2, #1
    86ac:	ldrb	ip, [ip, #1948]	; 0x79c
    86b0:	add	lr, r2, #4
    86b4:	cmp	lr, r3
    86b8:	cmpne	r2, #0
    86bc:	strb	ip, [r0], #1
    86c0:	lsr	r1, r1, #6
    86c4:	bgt	86a0 <rb_sha512_crypt_r+0x9a8>
    86c8:	ldrb	r1, [fp, #-803]	; 0xfffffcdd
    86cc:	ldrb	ip, [fp, #-824]	; 0xfffffcc8
    86d0:	ldrb	r3, [fp, #-845]	; 0xfffffcb3
    86d4:	cmp	r2, #0
    86d8:	lsl	r1, r1, #8
    86dc:	orr	r1, r1, ip, lsl #16
    86e0:	orr	r1, r1, r3
    86e4:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    86e8:	ldr	r5, [pc, #-880]	; 8380 <rb_sha512_crypt_r+0x688>
    86ec:	mov	r3, r2
    86f0:	add	r5, pc, r5
    86f4:	and	ip, r1, #63	; 0x3f
    86f8:	add	ip, r5, ip
    86fc:	sub	r3, r3, #1
    8700:	ldrb	ip, [ip, #1948]	; 0x79c
    8704:	add	lr, r3, #4
    8708:	cmp	lr, r2
    870c:	cmpne	r3, #0
    8710:	strb	ip, [r0], #1
    8714:	lsr	r1, r1, #6
    8718:	bgt	86f4 <rb_sha512_crypt_r+0x9fc>
    871c:	ldrb	r1, [fp, #-844]	; 0xfffffcb4
    8720:	ldrb	ip, [fp, #-802]	; 0xfffffcde
    8724:	ldrb	r2, [fp, #-823]	; 0xfffffcc9
    8728:	cmp	r3, #0
    872c:	lsl	r1, r1, #8
    8730:	orr	r1, r1, ip, lsl #16
    8734:	orr	r1, r1, r2
    8738:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    873c:	ldr	r5, [pc, #-960]	; 8384 <rb_sha512_crypt_r+0x68c>
    8740:	mov	r2, r3
    8744:	add	r5, pc, r5
    8748:	and	ip, r1, #63	; 0x3f
    874c:	add	ip, r5, ip
    8750:	sub	r2, r2, #1
    8754:	ldrb	ip, [ip, #1948]	; 0x79c
    8758:	add	lr, r2, #4
    875c:	cmp	lr, r3
    8760:	cmpne	r2, #0
    8764:	strb	ip, [r0], #1
    8768:	lsr	r1, r1, #6
    876c:	bgt	8748 <rb_sha512_crypt_r+0xa50>
    8770:	ldrb	r1, [fp, #-822]	; 0xfffffcca
    8774:	ldrb	ip, [fp, #-843]	; 0xfffffcb5
    8778:	ldrb	r3, [fp, #-801]	; 0xfffffcdf
    877c:	cmp	r2, #0
    8780:	lsl	r1, r1, #8
    8784:	orr	r1, r1, ip, lsl #16
    8788:	orr	r1, r1, r3
    878c:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8790:	ldr	r5, [pc, #-1040]	; 8388 <rb_sha512_crypt_r+0x690>
    8794:	mov	r3, r2
    8798:	add	r5, pc, r5
    879c:	and	ip, r1, #63	; 0x3f
    87a0:	add	ip, r5, ip
    87a4:	sub	r3, r3, #1
    87a8:	ldrb	ip, [ip, #1948]	; 0x79c
    87ac:	add	lr, r3, #4
    87b0:	cmp	lr, r2
    87b4:	cmpne	r3, #0
    87b8:	strb	ip, [r0], #1
    87bc:	lsr	r1, r1, #6
    87c0:	bgt	879c <rb_sha512_crypt_r+0xaa4>
    87c4:	ldrb	r1, [fp, #-800]	; 0xfffffce0
    87c8:	ldrb	ip, [fp, #-821]	; 0xfffffccb
    87cc:	ldrb	r2, [fp, #-842]	; 0xfffffcb6
    87d0:	cmp	r3, #0
    87d4:	lsl	r1, r1, #8
    87d8:	orr	r1, r1, ip, lsl #16
    87dc:	orr	r1, r1, r2
    87e0:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    87e4:	ldr	r5, [pc, #-1120]	; 838c <rb_sha512_crypt_r+0x694>
    87e8:	mov	r2, r3
    87ec:	add	r5, pc, r5
    87f0:	and	ip, r1, #63	; 0x3f
    87f4:	add	ip, r5, ip
    87f8:	sub	r2, r2, #1
    87fc:	ldrb	ip, [ip, #1948]	; 0x79c
    8800:	add	lr, r2, #4
    8804:	cmp	lr, r3
    8808:	cmpne	r2, #0
    880c:	strb	ip, [r0], #1
    8810:	lsr	r1, r1, #6
    8814:	bgt	87f0 <rb_sha512_crypt_r+0xaf8>
    8818:	ldrb	r1, [fp, #-841]	; 0xfffffcb7
    881c:	ldrb	ip, [fp, #-799]	; 0xfffffce1
    8820:	ldrb	r3, [fp, #-820]	; 0xfffffccc
    8824:	cmp	r2, #0
    8828:	lsl	r1, r1, #8
    882c:	orr	r1, r1, ip, lsl #16
    8830:	orr	r1, r1, r3
    8834:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8838:	ldr	r5, [pc, #-1200]	; 8390 <rb_sha512_crypt_r+0x698>
    883c:	mov	r3, r2
    8840:	add	r5, pc, r5
    8844:	and	ip, r1, #63	; 0x3f
    8848:	add	ip, r5, ip
    884c:	sub	r3, r3, #1
    8850:	ldrb	ip, [ip, #1948]	; 0x79c
    8854:	add	lr, r3, #4
    8858:	cmp	lr, r2
    885c:	cmpne	r3, #0
    8860:	strb	ip, [r0], #1
    8864:	lsr	r1, r1, #6
    8868:	bgt	8844 <rb_sha512_crypt_r+0xb4c>
    886c:	ldrb	r1, [fp, #-819]	; 0xfffffccd
    8870:	ldrb	ip, [fp, #-840]	; 0xfffffcb8
    8874:	ldrb	r2, [fp, #-798]	; 0xfffffce2
    8878:	cmp	r3, #0
    887c:	lsl	r1, r1, #8
    8880:	orr	r1, r1, ip, lsl #16
    8884:	orr	r1, r1, r2
    8888:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    888c:	ldr	r5, [pc, #-1280]	; 8394 <rb_sha512_crypt_r+0x69c>
    8890:	mov	r2, r3
    8894:	add	r5, pc, r5
    8898:	and	ip, r1, #63	; 0x3f
    889c:	add	ip, r5, ip
    88a0:	sub	r2, r2, #1
    88a4:	ldrb	ip, [ip, #1948]	; 0x79c
    88a8:	add	lr, r2, #4
    88ac:	cmp	lr, r3
    88b0:	cmpne	r2, #0
    88b4:	strb	ip, [r0], #1
    88b8:	lsr	r1, r1, #6
    88bc:	bgt	8898 <rb_sha512_crypt_r+0xba0>
    88c0:	ldrb	r1, [fp, #-797]	; 0xfffffce3
    88c4:	ldrb	ip, [fp, #-818]	; 0xfffffcce
    88c8:	ldrb	r3, [fp, #-839]	; 0xfffffcb9
    88cc:	cmp	r2, #0
    88d0:	lsl	r1, r1, #8
    88d4:	orr	r1, r1, ip, lsl #16
    88d8:	orr	r1, r1, r3
    88dc:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    88e0:	ldr	r5, [pc, #-1360]	; 8398 <rb_sha512_crypt_r+0x6a0>
    88e4:	mov	r3, r2
    88e8:	add	r5, pc, r5
    88ec:	and	ip, r1, #63	; 0x3f
    88f0:	add	ip, r5, ip
    88f4:	sub	r3, r3, #1
    88f8:	ldrb	ip, [ip, #1948]	; 0x79c
    88fc:	add	lr, r3, #4
    8900:	cmp	lr, r2
    8904:	cmpne	r3, #0
    8908:	strb	ip, [r0], #1
    890c:	lsr	r1, r1, #6
    8910:	bgt	88ec <rb_sha512_crypt_r+0xbf4>
    8914:	ldrb	r1, [fp, #-838]	; 0xfffffcba
    8918:	ldrb	ip, [fp, #-796]	; 0xfffffce4
    891c:	ldrb	r2, [fp, #-817]	; 0xfffffccf
    8920:	cmp	r3, #0
    8924:	lsl	r1, r1, #8
    8928:	orr	r1, r1, ip, lsl #16
    892c:	orr	r1, r1, r2
    8930:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    8934:	ldr	r5, [pc, #-1440]	; 839c <rb_sha512_crypt_r+0x6a4>
    8938:	mov	r2, r3
    893c:	add	r5, pc, r5
    8940:	and	ip, r1, #63	; 0x3f
    8944:	add	ip, r5, ip
    8948:	sub	r2, r2, #1
    894c:	ldrb	ip, [ip, #1948]	; 0x79c
    8950:	add	lr, r2, #4
    8954:	cmp	lr, r3
    8958:	cmpne	r2, #0
    895c:	strb	ip, [r0], #1
    8960:	lsr	r1, r1, #6
    8964:	bgt	8940 <rb_sha512_crypt_r+0xc48>
    8968:	ldrb	r1, [fp, #-816]	; 0xfffffcd0
    896c:	ldrb	ip, [fp, #-837]	; 0xfffffcbb
    8970:	ldrb	r3, [fp, #-795]	; 0xfffffce5
    8974:	cmp	r2, #0
    8978:	lsl	r1, r1, #8
    897c:	orr	r1, r1, ip, lsl #16
    8980:	orr	r1, r1, r3
    8984:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8988:	ldr	r5, [pc, #-1520]	; 83a0 <rb_sha512_crypt_r+0x6a8>
    898c:	mov	r3, r2
    8990:	add	r5, pc, r5
    8994:	and	ip, r1, #63	; 0x3f
    8998:	add	ip, r5, ip
    899c:	sub	r3, r3, #1
    89a0:	ldrb	ip, [ip, #1948]	; 0x79c
    89a4:	add	lr, r3, #4
    89a8:	cmp	lr, r2
    89ac:	cmpne	r3, #0
    89b0:	strb	ip, [r0], #1
    89b4:	lsr	r1, r1, #6
    89b8:	bgt	8994 <rb_sha512_crypt_r+0xc9c>
    89bc:	ldrb	r1, [fp, #-794]	; 0xfffffce6
    89c0:	ldrb	ip, [fp, #-815]	; 0xfffffcd1
    89c4:	ldrb	r2, [fp, #-836]	; 0xfffffcbc
    89c8:	cmp	r3, #0
    89cc:	lsl	r1, r1, #8
    89d0:	orr	r1, r1, ip, lsl #16
    89d4:	orr	r1, r1, r2
    89d8:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    89dc:	ldr	r5, [pc, #-1600]	; 83a4 <rb_sha512_crypt_r+0x6ac>
    89e0:	mov	r2, r3
    89e4:	add	r5, pc, r5
    89e8:	and	ip, r1, #63	; 0x3f
    89ec:	add	ip, r5, ip
    89f0:	sub	r2, r2, #1
    89f4:	ldrb	ip, [ip, #1948]	; 0x79c
    89f8:	add	lr, r2, #4
    89fc:	cmp	lr, r3
    8a00:	cmpne	r2, #0
    8a04:	strb	ip, [r0], #1
    8a08:	lsr	r1, r1, #6
    8a0c:	bgt	89e8 <rb_sha512_crypt_r+0xcf0>
    8a10:	ldrb	r1, [fp, #-835]	; 0xfffffcbd
    8a14:	ldrb	ip, [fp, #-793]	; 0xfffffce7
    8a18:	ldrb	r3, [fp, #-814]	; 0xfffffcd2
    8a1c:	cmp	r2, #0
    8a20:	lsl	r1, r1, #8
    8a24:	orr	r1, r1, ip, lsl #16
    8a28:	orr	r1, r1, r3
    8a2c:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8a30:	ldr	r5, [pc, #-1680]	; 83a8 <rb_sha512_crypt_r+0x6b0>
    8a34:	mov	r3, r2
    8a38:	add	r5, pc, r5
    8a3c:	and	ip, r1, #63	; 0x3f
    8a40:	add	ip, r5, ip
    8a44:	sub	r3, r3, #1
    8a48:	ldrb	ip, [ip, #1948]	; 0x79c
    8a4c:	add	lr, r3, #4
    8a50:	cmp	lr, r2
    8a54:	cmpne	r3, #0
    8a58:	strb	ip, [r0], #1
    8a5c:	lsr	r1, r1, #6
    8a60:	bgt	8a3c <rb_sha512_crypt_r+0xd44>
    8a64:	ldrb	r1, [fp, #-813]	; 0xfffffcd3
    8a68:	ldrb	ip, [fp, #-834]	; 0xfffffcbe
    8a6c:	ldrb	r2, [fp, #-792]	; 0xfffffce8
    8a70:	cmp	r3, #0
    8a74:	lsl	r1, r1, #8
    8a78:	orr	r1, r1, ip, lsl #16
    8a7c:	orr	r1, r1, r2
    8a80:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    8a84:	ldr	r5, [pc, #-1760]	; 83ac <rb_sha512_crypt_r+0x6b4>
    8a88:	mov	r2, r3
    8a8c:	add	r5, pc, r5
    8a90:	and	ip, r1, #63	; 0x3f
    8a94:	add	ip, r5, ip
    8a98:	sub	r2, r2, #1
    8a9c:	ldrb	ip, [ip, #1948]	; 0x79c
    8aa0:	add	lr, r2, #4
    8aa4:	cmp	lr, r3
    8aa8:	cmpne	r2, #0
    8aac:	strb	ip, [r0], #1
    8ab0:	lsr	r1, r1, #6
    8ab4:	bgt	8a90 <rb_sha512_crypt_r+0xd98>
    8ab8:	ldrb	r1, [fp, #-791]	; 0xfffffce9
    8abc:	ldrb	ip, [fp, #-812]	; 0xfffffcd4
    8ac0:	ldrb	r3, [fp, #-833]	; 0xfffffcbf
    8ac4:	cmp	r2, #0
    8ac8:	lsl	r1, r1, #8
    8acc:	orr	r1, r1, ip, lsl #16
    8ad0:	orr	r1, r1, r3
    8ad4:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8ad8:	ldr	r5, [pc, #-1840]	; 83b0 <rb_sha512_crypt_r+0x6b8>
    8adc:	mov	r3, r2
    8ae0:	add	r5, pc, r5
    8ae4:	and	ip, r1, #63	; 0x3f
    8ae8:	add	ip, r5, ip
    8aec:	sub	r3, r3, #1
    8af0:	ldrb	ip, [ip, #1948]	; 0x79c
    8af4:	add	lr, r3, #4
    8af8:	cmp	lr, r2
    8afc:	cmpne	r3, #0
    8b00:	strb	ip, [r0], #1
    8b04:	lsr	r1, r1, #6
    8b08:	bgt	8ae4 <rb_sha512_crypt_r+0xdec>
    8b0c:	ldrb	r1, [fp, #-832]	; 0xfffffcc0
    8b10:	ldrb	ip, [fp, #-790]	; 0xfffffcea
    8b14:	ldrb	r2, [fp, #-811]	; 0xfffffcd5
    8b18:	ldr	r7, [pc, #-1900]	; 83b4 <rb_sha512_crypt_r+0x6bc>
    8b1c:	lsl	r1, r1, #8
    8b20:	orr	r1, r1, ip, lsl #16
    8b24:	cmp	r3, #0
    8b28:	rsb	r5, r3, #4
    8b2c:	add	r7, pc, r7
    8b30:	orr	r1, r1, r2
    8b34:	bne	8b44 <rb_sha512_crypt_r+0xe4c>
    8b38:	b	8e6c <rb_sha512_crypt_r+0x1174>
    8b3c:	mov	r0, lr
    8b40:	mov	r3, r2
    8b44:	and	ip, r1, #63	; 0x3f
    8b48:	add	ip, r7, ip
    8b4c:	sub	r2, r3, #1
    8b50:	ldrb	r6, [ip, #1948]	; 0x79c
    8b54:	mov	lr, r0
    8b58:	rsb	ip, r2, #0
    8b5c:	cmp	ip, r5
    8b60:	cmpne	r2, #0
    8b64:	movgt	ip, #1
    8b68:	movle	ip, #0
    8b6c:	lsr	r1, r1, #6
    8b70:	strb	r6, [lr], #1
    8b74:	bgt	8b3c <rb_sha512_crypt_r+0xe44>
    8b78:	cmp	r2, #0
    8b7c:	ldrb	r2, [fp, #-789]	; 0xfffffceb
    8b80:	ble	8e6c <rb_sha512_crypt_r+0x1174>
    8b84:	and	r1, r2, #63	; 0x3f
    8b88:	add	r1, r7, r1
    8b8c:	cmp	r3, #2
    8b90:	ldrb	r1, [r1, #1948]	; 0x79c
    8b94:	lsr	r2, r2, #6
    8b98:	strb	r1, [lr]
    8b9c:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    8ba0:	add	r2, r7, r2
    8ba4:	cmp	r3, #3
    8ba8:	ldrb	r3, [r2, #1948]	; 0x79c
    8bac:	strb	r3, [r0, #2]
    8bb0:	beq	8e6c <rb_sha512_crypt_r+0x1174>
    8bb4:	ldr	r5, [fp, #-880]	; 0xfffffc90
    8bb8:	strb	ip, [r0, #3]
    8bbc:	add	r3, pc, #716	; 0x2cc
    8bc0:	ldrd	r2, [r3]
    8bc4:	add	r7, pc, #716	; 0x2cc
    8bc8:	ldrd	r6, [r7]
    8bcc:	mov	r1, r9
    8bd0:	strd	r2, [r4]
    8bd4:	add	r3, pc, #708	; 0x2c4
    8bd8:	ldrd	r2, [r3]
    8bdc:	strd	r6, [r4, #8]
    8be0:	add	r7, pc, #704	; 0x2c0
    8be4:	ldrd	r6, [r7]
    8be8:	strd	r2, [r4, #16]
    8bec:	add	r3, pc, #700	; 0x2bc
    8bf0:	ldrd	r2, [r3]
    8bf4:	strd	r6, [r4, #24]
    8bf8:	add	r7, pc, #696	; 0x2b8
    8bfc:	ldrd	r6, [r7]
    8c00:	strd	r2, [r4, #32]
    8c04:	add	r3, pc, #692	; 0x2b4
    8c08:	ldrd	r2, [r3]
    8c0c:	strd	r6, [r4, #40]	; 0x28
    8c10:	add	r7, pc, #688	; 0x2b0
    8c14:	ldrd	r6, [r7]
    8c18:	strd	r2, [r4, #48]	; 0x30
    8c1c:	mov	r3, #0
    8c20:	mov	r2, #0
    8c24:	mov	r0, r4
    8c28:	strd	r2, [r4, #72]	; 0x48
    8c2c:	strd	r2, [r4, #64]	; 0x40
    8c30:	strd	r2, [r4, #80]	; 0x50
    8c34:	strd	r6, [r4, #56]	; 0x38
    8c38:	bl	6e88 <rb_sha512_finish_ctx>
    8c3c:	mov	r2, #64	; 0x40
    8c40:	mov	r1, #0
    8c44:	ldr	r0, [fp, #-884]	; 0xfffffc8c
    8c48:	bl	4628 <memset@plt>
    8c4c:	mov	r2, sl
    8c50:	mov	r1, #0
    8c54:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8c58:	bl	4628 <memset@plt>
    8c5c:	ldr	r2, [fp, #-860]	; 0xfffffca4
    8c60:	mov	r1, #0
    8c64:	ldr	r0, [fp, #-876]	; 0xfffffc94
    8c68:	bl	4628 <memset@plt>
    8c6c:	mov	r2, #344	; 0x158
    8c70:	mov	r1, #0
    8c74:	mov	r0, r4
    8c78:	bl	4628 <memset@plt>
    8c7c:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8c80:	mov	r2, #344	; 0x158
    8c84:	mov	r1, #0
    8c88:	bl	4628 <memset@plt>
    8c8c:	ldr	r0, [fp, #-896]	; 0xfffffc80
    8c90:	cmp	r0, #0
    8c94:	beq	8ca4 <rb_sha512_crypt_r+0xfac>
    8c98:	mov	r2, sl
    8c9c:	mov	r1, #0
    8ca0:	bl	4628 <memset@plt>
    8ca4:	ldr	r0, [fp, #-900]	; 0xfffffc7c
    8ca8:	cmp	r0, #0
    8cac:	beq	8cbc <rb_sha512_crypt_r+0xfc4>
    8cb0:	ldr	r2, [fp, #-860]	; 0xfffffca4
    8cb4:	mov	r1, #0
    8cb8:	bl	4628 <memset@plt>
    8cbc:	mov	r0, r5
    8cc0:	sub	sp, fp, #32
    8cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cc8:	sub	r3, fp, #380	; 0x17c
    8ccc:	str	r3, [fp, #-872]	; 0xfffffc98
    8cd0:	mov	r1, r3
    8cd4:	ldr	r3, [fp, #-868]	; 0xfffffc9c
    8cd8:	mov	r2, #10
    8cdc:	add	r0, r3, #7
    8ce0:	bl	47fc <strtoul@plt>
    8ce4:	ldr	r3, [fp, #-380]	; 0xfffffe84
    8ce8:	ldrb	r2, [r3]
    8cec:	cmp	r2, #36	; 0x24
    8cf0:	ldrne	r3, [pc, #472]	; 8ed0 <rb_sha512_crypt_r+0x11d8>
    8cf4:	strne	r3, [fp, #-864]	; 0xfffffca0
    8cf8:	bne	7d78 <rb_sha512_crypt_r+0x80>
    8cfc:	ldr	r2, [pc, #464]	; 8ed4 <rb_sha512_crypt_r+0x11dc>
    8d00:	add	r3, r3, #1
    8d04:	cmp	r0, r2
    8d08:	str	r3, [fp, #-868]	; 0xfffffc9c
    8d0c:	movcc	r3, r0
    8d10:	movcs	r3, r2
    8d14:	cmp	r3, #1000	; 0x3e8
    8d18:	movcc	r3, #1000	; 0x3e8
    8d1c:	str	r3, [fp, #-864]	; 0xfffffca0
    8d20:	mov	r3, #1
    8d24:	str	r3, [fp, #-892]	; 0xfffffc84
    8d28:	b	7d78 <rb_sha512_crypt_r+0x80>
    8d2c:	ldr	r3, [pc, #420]	; 8ed8 <rb_sha512_crypt_r+0x11e0>
    8d30:	ldr	r2, [pc, #420]	; 8edc <rb_sha512_crypt_r+0x11e4>
    8d34:	add	r3, pc, r3
    8d38:	add	r3, r3, #2016	; 0x7e0
    8d3c:	bic	r1, r6, r6, asr #31
    8d40:	mov	r0, r7
    8d44:	str	r5, [sp]
    8d48:	add	r3, r3, #4
    8d4c:	add	r2, pc, r2
    8d50:	bl	4bb0 <snprintf@plt>
    8d54:	add	r7, r7, r0
    8d58:	sub	r6, r6, r0
    8d5c:	b	8418 <rb_sha512_crypt_r+0x720>
    8d60:	ldr	r2, [fp, #-860]	; 0xfffffca4
    8d64:	ldr	r1, [fp, #-868]	; 0xfffffc9c
    8d68:	add	r3, r2, #22
    8d6c:	bic	r3, r3, #7
    8d70:	sub	sp, sp, r3
    8d74:	add	r0, sp, #16
    8d78:	bl	4808 <memcpy@plt>
    8d7c:	str	r0, [fp, #-868]	; 0xfffffc9c
    8d80:	str	r0, [fp, #-900]	; 0xfffffc7c
    8d84:	b	7dc0 <rb_sha512_crypt_r+0xc8>
    8d88:	add	r3, r0, #22
    8d8c:	bic	r3, r3, #7
    8d90:	sub	sp, sp, r3
    8d94:	mov	r1, r6
    8d98:	add	r0, sp, #16
    8d9c:	mov	r2, sl
    8da0:	bl	4808 <memcpy@plt>
    8da4:	mov	r6, r0
    8da8:	str	r0, [fp, #-896]	; 0xfffffc80
    8dac:	b	7db0 <rb_sha512_crypt_r+0xb8>
    8db0:	mov	r2, r4
    8db4:	mov	r1, sl
    8db8:	mov	r0, r9
    8dbc:	bl	6cec <rb_sha512_process_bytes>
    8dc0:	cmp	sl, #0
    8dc4:	bne	7f5c <rb_sha512_crypt_r+0x264>
    8dc8:	mov	r1, r9
    8dcc:	sub	r6, fp, #788	; 0x314
    8dd0:	mov	r0, r4
    8dd4:	str	r6, [fp, #-884]	; 0xfffffc8c
    8dd8:	bl	6e88 <rb_sha512_finish_ctx>
    8ddc:	add	r3, pc, #172	; 0xac
    8de0:	ldrd	r2, [r3]
    8de4:	mov	r1, r6
    8de8:	ldr	r0, [fp, #-872]	; 0xfffffc98
    8dec:	strd	r2, [r5, #-8]
    8df0:	add	r3, pc, #160	; 0xa0
    8df4:	ldrd	r2, [r3]
    8df8:	strd	r2, [r5]
    8dfc:	add	r3, pc, #156	; 0x9c
    8e00:	ldrd	r2, [r3]
    8e04:	strd	r2, [r5, #8]
    8e08:	add	r3, pc, #152	; 0x98
    8e0c:	ldrd	r2, [r3]
    8e10:	strd	r2, [r5, #16]
    8e14:	add	r3, pc, #148	; 0x94
    8e18:	ldrd	r2, [r3]
    8e1c:	strd	r2, [r5, #24]
    8e20:	add	r3, pc, #144	; 0x90
    8e24:	ldrd	r2, [r3]
    8e28:	strd	r2, [r5, #32]
    8e2c:	add	r3, pc, #140	; 0x8c
    8e30:	ldrd	r2, [r3]
    8e34:	strd	r2, [r5, #40]	; 0x28
    8e38:	add	r3, pc, #136	; 0x88
    8e3c:	ldrd	r2, [r3]
    8e40:	strd	r2, [r5, #48]	; 0x30
    8e44:	mov	r2, #0
    8e48:	mov	r3, #0
    8e4c:	strd	r2, [r5, #64]	; 0x40
    8e50:	strd	r2, [r5, #56]	; 0x38
    8e54:	strd	r2, [r5, #72]	; 0x48
    8e58:	bl	6e88 <rb_sha512_finish_ctx>
    8e5c:	add	r0, sp, #8
    8e60:	str	r0, [fp, #-856]	; 0xfffffca8
    8e64:	mov	r2, sl
    8e68:	b	80b0 <rb_sha512_crypt_r+0x3b8>
    8e6c:	bl	4ce8 <__errno_location@plt>
    8e70:	mov	r3, #34	; 0x22
    8e74:	mov	r5, #0
    8e78:	str	r3, [r0]
    8e7c:	b	8bbc <rb_sha512_crypt_r+0xec4>
    8e80:	ldr	r0, [fp, #-856]	; 0xfffffca8
    8e84:	mov	r2, sl
    8e88:	b	80b0 <rb_sha512_crypt_r+0x3b8>
    8e8c:	nop			; (mov r0, r0)
    8e90:	.word	0xf3bcc908
    8e94:	.word	0x6a09e667
    8e98:	.word	0x84caa73b
    8e9c:	.word	0xbb67ae85
    8ea0:	.word	0xfe94f82b
    8ea4:	.word	0x3c6ef372
    8ea8:	.word	0x5f1d36f1
    8eac:	.word	0xa54ff53a
    8eb0:	.word	0xade682d1
    8eb4:	.word	0x510e527f
    8eb8:	.word	0x2b3e6c1f
    8ebc:	.word	0x9b05688c
    8ec0:	.word	0xfb41bd6b
    8ec4:	.word	0x1f83d9ab
    8ec8:	.word	0x137e2179
    8ecc:	.word	0x5be0cd19
    8ed0:	.word	0x00001388
    8ed4:	.word	0x3b9ac9ff
    8ed8:	.word	0x0000c32c
    8edc:	.word	0x0000cb14

00008ee0 <rb_ascii_to_bin>:
    8ee0:	cmp	r0, #122	; 0x7a
    8ee4:	bhi	8f14 <rb_ascii_to_bin+0x34>
    8ee8:	cmp	r0, #96	; 0x60
    8eec:	bhi	8f1c <rb_ascii_to_bin+0x3c>
    8ef0:	cmp	r0, #90	; 0x5a
    8ef4:	bhi	8f14 <rb_ascii_to_bin+0x34>
    8ef8:	cmp	r0, #64	; 0x40
    8efc:	bhi	8f24 <rb_ascii_to_bin+0x44>
    8f00:	sub	r0, r0, #46	; 0x2e
    8f04:	uxtb	r3, r0
    8f08:	cmp	r3, #11
    8f0c:	movhi	r0, #0
    8f10:	bx	lr
    8f14:	mov	r0, #0
    8f18:	bx	lr
    8f1c:	sub	r0, r0, #59	; 0x3b
    8f20:	bx	lr
    8f24:	sub	r0, r0, #53	; 0x35
    8f28:	bx	lr

00008f2c <rb_crypt>:
    8f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f30:	sub	sp, sp, #260	; 0x104
    8f34:	ldrb	r3, [r1]
    8f38:	str	r1, [sp, #28]
    8f3c:	mov	r4, r0
    8f40:	cmp	r3, #36	; 0x24
    8f44:	beq	9840 <rb_crypt+0x914>
    8f48:	bl	5018 <rb_des_init>
    8f4c:	add	r1, sp, #168	; 0xa8
    8f50:	mov	r2, r1
    8f54:	b	8f70 <rb_crypt+0x44>
    8f58:	ldrb	r3, [r4]
    8f5c:	lsl	r3, r3, #1
    8f60:	uxtb	r3, r3
    8f64:	cmp	r3, #0
    8f68:	addne	r4, r4, #1
    8f6c:	strb	r3, [r2], #1
    8f70:	sub	r3, r2, r1
    8f74:	cmp	r3, #8
    8f78:	bne	8f58 <rb_crypt+0x2c>
    8f7c:	bl	5018 <rb_des_init>
    8f80:	ldr	r2, [sp, #168]	; 0xa8
    8f84:	ldr	r1, [sp, #172]	; 0xac
    8f88:	rev	r2, r2
    8f8c:	rev	r1, r1
    8f90:	orrs	r3, r2, r1
    8f94:	bne	981c <rb_crypt+0x8f0>
    8f98:	lsr	r3, r2, #17
    8f9c:	and	r3, r3, #127	; 0x7f
    8fa0:	lsr	r0, r1, #25
    8fa4:	add	r9, r3, #128	; 0x80
    8fa8:	lsr	r8, r2, #25
    8fac:	add	r0, r0, #512	; 0x200
    8fb0:	ldr	r3, [pc, #3736]	; 9e50 <rb_crypt+0xf24>
    8fb4:	ldr	r7, [pc, #3736]	; 9e54 <rb_crypt+0xf28>
    8fb8:	add	r3, pc, r3
    8fbc:	add	r7, pc, r7
    8fc0:	lsl	r8, r8, #2
    8fc4:	lsl	r0, r0, #2
    8fc8:	lsr	sl, r2, #9
    8fcc:	add	r5, r3, r8
    8fd0:	add	r4, r3, r0
    8fd4:	lsl	r9, r9, #2
    8fd8:	and	sl, sl, #127	; 0x7f
    8fdc:	lsr	r6, r2, #1
    8fe0:	add	r0, r7, r0
    8fe4:	add	r8, r7, r8
    8fe8:	add	fp, r3, r9
    8fec:	add	sl, sl, #256	; 0x100
    8ff0:	and	r6, r6, #127	; 0x7f
    8ff4:	add	r9, r7, r9
    8ff8:	ldr	r5, [r5, #796]	; 0x31c
    8ffc:	ldr	r8, [r8, #-3292]	; 0xfffff324
    9000:	lsr	lr, r1, #17
    9004:	add	r6, r6, #384	; 0x180
    9008:	ldr	r4, [r4, #796]	; 0x31c
    900c:	ldr	r0, [r0, #-3292]	; 0xfffff324
    9010:	lsl	sl, sl, #2
    9014:	ldr	r9, [r9, #-3292]	; 0xfffff324
    9018:	and	lr, lr, #127	; 0x7f
    901c:	lsr	ip, r1, #9
    9020:	lsl	r6, r6, #2
    9024:	orr	r4, r5, r4
    9028:	orr	r0, r8, r0
    902c:	add	lr, lr, #640	; 0x280
    9030:	add	r8, r3, sl
    9034:	and	ip, ip, #127	; 0x7f
    9038:	lsr	r5, r1, #1
    903c:	add	sl, r7, sl
    9040:	ldr	fp, [fp, #796]	; 0x31c
    9044:	orr	r0, r0, r9
    9048:	add	ip, ip, #768	; 0x300
    904c:	add	r9, r3, r6
    9050:	and	r5, r5, #127	; 0x7f
    9054:	add	r6, r7, r6
    9058:	lsl	lr, lr, #2
    905c:	ldr	sl, [sl, #-3292]	; 0xfffff324
    9060:	add	r5, r5, #896	; 0x380
    9064:	lsl	ip, ip, #2
    9068:	ldr	r8, [r8, #796]	; 0x31c
    906c:	orr	r4, r4, fp
    9070:	ldr	fp, [r9, #796]	; 0x31c
    9074:	ldr	r9, [r6, #-3292]	; 0xfffff324
    9078:	add	r6, r3, lr
    907c:	add	lr, r7, lr
    9080:	lsl	r5, r5, #2
    9084:	orr	r0, r0, sl
    9088:	add	sl, r3, ip
    908c:	add	ip, r7, ip
    9090:	add	r3, r3, r5
    9094:	orr	r4, r4, r8
    9098:	add	r5, r7, r5
    909c:	ldr	r8, [r6, #796]	; 0x31c
    90a0:	ldr	r6, [lr, #-3292]	; 0xfffff324
    90a4:	orr	r0, r0, r9
    90a8:	orr	r4, r4, fp
    90ac:	ldr	r9, [ip, #-3292]	; 0xfffff324
    90b0:	ldr	lr, [pc, #3488]	; 9e58 <rb_crypt+0xf2c>
    90b4:	orr	fp, r4, r8
    90b8:	ldr	r8, [r3, #796]	; 0x31c
    90bc:	orr	r3, r0, r6
    90c0:	ldr	r6, [r5, #-3292]	; 0xfffff324
    90c4:	add	lr, pc, lr
    90c8:	ldr	sl, [sl, #796]	; 0x31c
    90cc:	orr	r3, r3, r9
    90d0:	sub	r5, lr, #3136	; 0xc40
    90d4:	orr	r3, r3, r6
    90d8:	orr	fp, fp, sl
    90dc:	ldr	ip, [pc, #3448]	; 9e5c <rb_crypt+0xf30>
    90e0:	sub	sl, lr, #2912	; 0xb60
    90e4:	str	r3, [sp, #20]
    90e8:	sub	r3, r5, #12
    90ec:	sub	r4, lr, #3200	; 0xc80
    90f0:	ldr	r0, [pc, #3432]	; 9e60 <rb_crypt+0xf34>
    90f4:	str	r3, [sp, #12]
    90f8:	sub	r3, sl, #12
    90fc:	add	ip, pc, ip
    9100:	sub	lr, lr, #2848	; 0xb20
    9104:	str	r3, [sp, #24]
    9108:	sub	r3, r4, #12
    910c:	add	r0, pc, r0
    9110:	add	ip, ip, #2016	; 0x7e0
    9114:	orr	fp, fp, r8
    9118:	str	r3, [sp, #8]
    911c:	ldr	r8, [pc, #3392]	; 9e64 <rb_crypt+0xf38>
    9120:	add	r3, lr, #52	; 0x34
    9124:	str	r3, [sp, #4]
    9128:	add	r3, ip, #12
    912c:	str	r3, [sp, #16]
    9130:	add	r8, pc, r8
    9134:	add	sl, sl, #52	; 0x34
    9138:	str	r2, [r0, #8]
    913c:	mov	r3, #1
    9140:	str	r1, [r0, #4]
    9144:	mov	r9, #0
    9148:	b	9158 <rb_crypt+0x22c>
    914c:	ldr	r2, [sp, #16]
    9150:	ldrb	r3, [r2, #1]!
    9154:	str	r2, [sp, #16]
    9158:	add	r9, r9, r3
    915c:	ldr	r1, [sp, #20]
    9160:	rsb	r3, r9, #28
    9164:	lsr	r2, fp, r3
    9168:	lsr	r3, r1, r3
    916c:	orr	r2, r2, fp, lsl r9
    9170:	orr	r3, r3, r1, lsl r9
    9174:	and	r4, r2, #127	; 0x7f
    9178:	and	r5, r3, #127	; 0x7f
    917c:	add	r4, r4, #384	; 0x180
    9180:	add	r5, r5, #896	; 0x380
    9184:	lsl	r4, r4, #2
    9188:	lsl	r5, r5, #2
    918c:	add	r6, r8, r4
    9190:	add	r1, r8, r5
    9194:	add	r4, r7, r4
    9198:	add	r5, r7, r5
    919c:	lsr	lr, r2, #14
    91a0:	lsr	ip, r2, #7
    91a4:	ldr	r4, [r4, #804]	; 0x324
    91a8:	lsr	r2, r2, #19
    91ac:	ldr	r5, [r5, #804]	; 0x324
    91b0:	and	r2, r2, #508	; 0x1fc
    91b4:	orr	r5, r4, r5
    91b8:	and	lr, lr, #127	; 0x7f
    91bc:	add	r4, r8, r2
    91c0:	ldr	r1, [r1, #-3284]	; 0xfffff32c
    91c4:	add	lr, lr, #128	; 0x80
    91c8:	ldr	r6, [r6, #-3284]	; 0xfffff32c
    91cc:	ldr	r4, [r4, #-3284]	; 0xfffff32c
    91d0:	orr	r6, r6, r1
    91d4:	lsl	lr, lr, #2
    91d8:	lsr	r0, r3, #21
    91dc:	and	ip, ip, #127	; 0x7f
    91e0:	add	r2, r7, r2
    91e4:	orr	r4, r6, r4
    91e8:	add	ip, ip, #256	; 0x100
    91ec:	add	r6, r8, lr
    91f0:	and	r0, r0, #127	; 0x7f
    91f4:	add	lr, r7, lr
    91f8:	lsr	r1, r3, #14
    91fc:	add	r0, r0, #512	; 0x200
    9200:	ldr	r2, [r2, #804]	; 0x324
    9204:	lsl	ip, ip, #2
    9208:	ldr	lr, [lr, #804]	; 0x324
    920c:	and	r1, r1, #127	; 0x7f
    9210:	lsr	r3, r3, #7
    9214:	lsl	r0, r0, #2
    9218:	orr	r2, r5, r2
    921c:	add	r1, r1, #640	; 0x280
    9220:	add	r5, r8, ip
    9224:	and	r3, r3, #127	; 0x7f
    9228:	add	ip, r7, ip
    922c:	ldr	r6, [r6, #-3284]	; 0xfffff32c
    9230:	orr	r2, r2, lr
    9234:	add	r3, r3, #768	; 0x300
    9238:	add	lr, r8, r0
    923c:	lsl	r1, r1, #2
    9240:	ldr	ip, [ip, #804]	; 0x324
    9244:	add	r0, r7, r0
    9248:	lsl	r3, r3, #2
    924c:	orr	r4, r4, r6
    9250:	ldr	r6, [r5, #-3284]	; 0xfffff32c
    9254:	ldr	r5, [lr, #-3284]	; 0xfffff32c
    9258:	add	lr, r8, r1
    925c:	add	r1, r7, r1
    9260:	orr	r2, r2, ip
    9264:	ldr	r0, [r0, #804]	; 0x324
    9268:	add	ip, r8, r3
    926c:	add	r3, r7, r3
    9270:	ldr	r1, [r1, #804]	; 0x324
    9274:	orr	r4, r4, r6
    9278:	ldr	r3, [r3, #804]	; 0x324
    927c:	ldr	lr, [lr, #-3284]	; 0xfffff32c
    9280:	orr	r2, r2, r0
    9284:	orr	r4, r4, r5
    9288:	ldr	r6, [ip, #-3284]	; 0xfffff32c
    928c:	orr	r2, r2, r1
    9290:	orr	r2, r2, r3
    9294:	orr	r4, r4, lr
    9298:	ldr	r3, [sp, #24]
    929c:	orr	r4, r4, r6
    92a0:	str	r4, [sl, #-4]!
    92a4:	cmp	r3, sl
    92a8:	ldr	r3, [sp, #12]
    92ac:	str	r4, [r3], #4
    92b0:	str	r3, [sp, #12]
    92b4:	ldr	r3, [sp, #8]
    92b8:	str	r2, [r3], #4
    92bc:	str	r3, [sp, #8]
    92c0:	ldr	r3, [sp, #4]
    92c4:	str	r2, [r3, #-4]!
    92c8:	str	r3, [sp, #4]
    92cc:	bne	914c <rb_crypt+0x220>
    92d0:	ldr	r5, [sp, #28]
    92d4:	ldrb	r4, [r5, #1]
    92d8:	mov	r0, r4
    92dc:	bl	8ee0 <rb_ascii_to_bin>
    92e0:	ldrb	r1, [r5]
    92e4:	ldr	r5, [pc, #2940]	; 9e68 <rb_crypt+0xf3c>
    92e8:	add	r5, pc, r5
    92ec:	mov	r2, r0
    92f0:	mov	r0, r1
    92f4:	bl	8ee0 <rb_ascii_to_bin>
    92f8:	ldr	r3, [pc, #2924]	; 9e6c <rb_crypt+0xf40>
    92fc:	ldr	ip, [r5, #16]
    9300:	add	r3, pc, r3
    9304:	cmp	r4, #0
    9308:	orr	r0, r0, r2, lsl #6
    930c:	strb	r1, [r3, #-2964]	; 0xfffff46c
    9310:	movne	r1, r4
    9314:	cmp	r0, ip
    9318:	strb	r1, [r3, #-2963]	; 0xfffff46d
    931c:	beq	9880 <rb_crypt+0x954>
    9320:	mov	r1, #0
    9324:	mov	ip, r1
    9328:	mov	r3, #1
    932c:	str	r1, [r5, #12]
    9330:	mov	lr, r1
    9334:	str	r0, [r5, #16]
    9338:	mov	r4, r3
    933c:	mov	r2, #24
    9340:	mov	r1, #8388608	; 0x800000
    9344:	mov	r5, ip
    9348:	tst	r0, r3
    934c:	orrne	r5, r5, r1
    9350:	movne	lr, r5
    9354:	movne	ip, r4
    9358:	subs	r2, r2, #1
    935c:	lsl	r3, r3, #1
    9360:	lsr	r1, r1, #1
    9364:	bne	9348 <rb_crypt+0x41c>
    9368:	cmp	ip, #0
    936c:	str	r5, [sp, #40]	; 0x28
    9370:	bne	9e28 <rb_crypt+0xefc>
    9374:	ldr	r3, [pc, #2804]	; 9e70 <rb_crypt+0xf44>
    9378:	ldr	r2, [pc, #2804]	; 9e74 <rb_crypt+0xf48>
    937c:	add	r3, pc, r3
    9380:	add	r1, r3, #4096	; 0x1000
    9384:	ldr	r0, [r3, #1844]	; 0x734
    9388:	ldr	lr, [r3, #820]	; 0x334
    938c:	ldr	r4, [r3, #2868]	; 0xb34
    9390:	add	r2, pc, r2
    9394:	ldr	ip, [r3, #3892]	; 0xf34
    9398:	orr	lr, lr, r0
    939c:	orr	lr, lr, r4
    93a0:	ldr	r4, [r1, #820]	; 0x334
    93a4:	ldr	r0, [r2, #1836]	; 0x72c
    93a8:	ldr	r7, [r2, #812]	; 0x32c
    93ac:	orr	lr, lr, ip
    93b0:	ldr	ip, [r1, #1844]	; 0x734
    93b4:	add	r3, r2, #4096	; 0x1000
    93b8:	ldr	r5, [r2, #2860]	; 0xb2c
    93bc:	orr	lr, lr, r4
    93c0:	ldr	r4, [r1, #2868]	; 0xb34
    93c4:	orr	r7, r7, r0
    93c8:	orr	lr, lr, ip
    93cc:	ldr	r0, [r2, #3884]	; 0xf2c
    93d0:	ldr	ip, [r1, #3892]	; 0xf34
    93d4:	ldr	r2, [r3, #812]	; 0x32c
    93d8:	orr	r7, r7, r5
    93dc:	orr	lr, lr, r4
    93e0:	orr	lr, lr, ip
    93e4:	orr	r7, r7, r0
    93e8:	ldr	r0, [r3, #1836]	; 0x72c
    93ec:	orr	r7, r7, r2
    93f0:	orr	r7, r7, r0
    93f4:	lsl	r0, lr, #23
    93f8:	ldr	r2, [pc, #2680]	; 9e78 <rb_crypt+0xf4c>
    93fc:	str	r0, [sp, #32]
    9400:	lsr	r0, lr, #9
    9404:	ldr	r1, [r3, #2860]	; 0xb2c
    9408:	str	r0, [sp, #16]
    940c:	lsr	r0, lr, #11
    9410:	add	r2, pc, r2
    9414:	ldr	r3, [r3, #3884]	; 0xf2c
    9418:	str	r0, [sp, #20]
    941c:	lsr	r0, lr, #13
    9420:	orr	r7, r7, r1
    9424:	str	r0, [sp, #24]
    9428:	sub	r1, r2, #3200	; 0xc80
    942c:	lsr	r0, lr, #15
    9430:	ldr	r5, [pc, #2628]	; 9e7c <rb_crypt+0xf50>
    9434:	ldr	r4, [pc, #2628]	; 9e80 <rb_crypt+0xf54>
    9438:	str	r0, [sp, #28]
    943c:	orr	r7, r7, r3
    9440:	lsl	r0, lr, #7
    9444:	add	r3, r1, #52	; 0x34
    9448:	ldr	r9, [pc, #2612]	; 9e84 <rb_crypt+0xf58>
    944c:	str	r0, [sp, #12]
    9450:	str	r3, [sp, #44]	; 0x2c
    9454:	lsl	r0, lr, #5
    9458:	sub	r3, r2, #3136	; 0xc40
    945c:	lsl	fp, lr, #3
    9460:	lsl	sl, lr, #1
    9464:	add	r5, pc, r5
    9468:	add	r4, pc, r4
    946c:	str	r0, [sp, #8]
    9470:	str	r3, [sp, #56]	; 0x38
    9474:	lsr	r0, lr, #31
    9478:	mov	r3, #25
    947c:	str	r1, [sp, #52]	; 0x34
    9480:	str	r0, [sp, #36]	; 0x24
    9484:	str	r2, [sp, #60]	; 0x3c
    9488:	str	r3, [sp, #48]	; 0x30
    948c:	ldr	r3, [sp, #52]	; 0x34
    9490:	sub	r6, r3, #12
    9494:	ldr	r3, [sp, #56]	; 0x38
    9498:	sub	r8, r3, #12
    949c:	str	r8, [sp, #4]
    94a0:	b	94f0 <rb_crypt+0x5c4>
    94a4:	lsl	r3, r0, #23
    94a8:	str	r3, [sp, #32]
    94ac:	lsr	r3, r0, #9
    94b0:	str	r3, [sp, #16]
    94b4:	lsr	r3, r0, #11
    94b8:	str	r3, [sp, #20]
    94bc:	lsr	r3, r0, #13
    94c0:	str	r3, [sp, #24]
    94c4:	lsr	r3, r0, #15
    94c8:	str	r3, [sp, #28]
    94cc:	lsl	r3, r0, #7
    94d0:	str	r3, [sp, #12]
    94d4:	mov	lr, r0
    94d8:	lsl	r3, r0, #5
    94dc:	lsl	fp, r0, #3
    94e0:	lsl	sl, r0, #1
    94e4:	str	r3, [sp, #8]
    94e8:	lsr	r3, r0, #31
    94ec:	str	r3, [sp, #36]	; 0x24
    94f0:	ldr	r3, [sp, #32]
    94f4:	ldr	r1, [sp, #20]
    94f8:	and	r0, r3, #8388608	; 0x800000
    94fc:	ldr	r3, [sp, #16]
    9500:	ldr	r8, [sp, #40]	; 0x28
    9504:	and	r2, r3, #8126464	; 0x7c0000
    9508:	ldr	r3, [sp, #12]
    950c:	orr	r2, r0, r2
    9510:	and	ip, r3, #16515072	; 0xfc0000
    9514:	ldr	r3, [sp, #8]
    9518:	and	r0, r1, #258048	; 0x3f000
    951c:	and	r3, r3, #258048	; 0x3f000
    9520:	orr	ip, ip, r3
    9524:	ldr	r3, [sp, #24]
    9528:	orr	r1, r2, r0
    952c:	and	r2, r3, #4032	; 0xfc0
    9530:	ldr	r3, [sp, #36]	; 0x24
    9534:	orr	r0, r1, r2
    9538:	orr	ip, ip, r3
    953c:	and	r3, fp, #4032	; 0xfc0
    9540:	orr	r1, ip, r3
    9544:	and	r3, sl, #62	; 0x3e
    9548:	orr	r3, r1, r3
    954c:	ldr	r1, [sp, #4]
    9550:	ldr	r2, [sp, #28]
    9554:	ldr	ip, [r1], #4
    9558:	and	r2, r2, #63	; 0x3f
    955c:	orr	r2, r0, r2
    9560:	str	r1, [sp, #4]
    9564:	ldr	r0, [r6], #4
    9568:	eor	r1, r2, r3
    956c:	and	r1, r1, r8
    9570:	eor	r2, r2, ip
    9574:	eor	r2, r2, r1
    9578:	eor	r3, r3, r0
    957c:	eor	r1, r1, r3
    9580:	and	ip, r2, r9
    9584:	add	ip, r4, ip
    9588:	add	r0, r4, r1, lsr #12
    958c:	add	ip, ip, #4608	; 0x1200
    9590:	add	r2, r4, r2, lsr #12
    9594:	add	r0, r0, #8704	; 0x2200
    9598:	and	r1, r1, r9
    959c:	add	r1, r4, r1
    95a0:	ldrb	ip, [ip, #20]
    95a4:	ldrb	r2, [r2, #532]	; 0x214
    95a8:	ldrb	r3, [r0, #20]
    95ac:	add	r1, r1, #12800	; 0x3200
    95b0:	add	ip, r5, ip, lsl #2
    95b4:	ldrb	r1, [r1, #20]
    95b8:	add	r2, r5, r2, lsl #2
    95bc:	add	r3, r5, r3, lsl #2
    95c0:	ldr	r0, [ip, #1900]	; 0x76c
    95c4:	ldr	r2, [r2, #876]	; 0x36c
    95c8:	ldr	r3, [r3, #2924]	; 0xb6c
    95cc:	add	r1, r5, r1, lsl #2
    95d0:	orr	r0, r2, r0
    95d4:	orr	r0, r0, r3
    95d8:	ldr	r1, [r1, #3948]	; 0xf6c
    95dc:	ldr	r3, [sp, #44]	; 0x2c
    95e0:	orr	r0, r0, r1
    95e4:	cmp	r6, r3
    95e8:	eor	r0, r0, r7
    95ec:	mov	r7, lr
    95f0:	bne	94a4 <rb_crypt+0x578>
    95f4:	ldr	r3, [sp, #48]	; 0x30
    95f8:	mov	r7, r0
    95fc:	subs	r3, r3, #1
    9600:	str	r3, [sp, #48]	; 0x30
    9604:	bne	948c <rb_crypt+0x560>
    9608:	uxtb	r3, r0
    960c:	add	r3, r3, #768	; 0x300
    9610:	lsr	r9, r0, #24
    9614:	lsr	r8, lr, #24
    9618:	ldr	r2, [pc, #2152]	; 9e88 <rb_crypt+0xf5c>
    961c:	add	r8, r8, #1024	; 0x400
    9620:	add	r2, pc, r2
    9624:	lsl	r7, r3, #2
    9628:	lsr	r5, r0, #16
    962c:	lsl	r9, r9, #2
    9630:	add	sl, r2, r7
    9634:	add	r3, r2, r9
    9638:	lsl	r8, r8, #2
    963c:	ldr	ip, [pc, #2120]	; 9e8c <rb_crypt+0xf60>
    9640:	uxtb	r6, lr
    9644:	lsr	r4, r0, #8
    9648:	lsr	r1, lr, #8
    964c:	lsr	r0, lr, #16
    9650:	uxtb	r5, r5
    9654:	add	lr, r2, r8
    9658:	add	ip, pc, ip
    965c:	ldr	sl, [sl, #836]	; 0x344
    9660:	ldr	r3, [r3, #836]	; 0x344
    9664:	add	r6, r6, #1792	; 0x700
    9668:	add	r5, r5, #256	; 0x100
    966c:	ldr	lr, [lr, #836]	; 0x344
    9670:	add	r7, ip, r7
    9674:	add	r9, ip, r9
    9678:	uxtb	r4, r4
    967c:	lsl	r6, r6, #2
    9680:	lsl	r5, r5, #2
    9684:	add	r8, ip, r8
    9688:	orr	r3, r3, sl
    968c:	add	r4, r4, #512	; 0x200
    9690:	uxtb	r0, r0
    9694:	add	sl, r2, r6
    9698:	ldr	r9, [r9, #828]	; 0x33c
    969c:	ldr	r7, [r7, #828]	; 0x33c
    96a0:	orr	r3, r3, lr
    96a4:	add	r0, r0, #1280	; 0x500
    96a8:	add	lr, r2, r5
    96ac:	uxtb	r1, r1
    96b0:	ldr	r8, [r8, #828]	; 0x33c
    96b4:	lsl	r4, r4, #2
    96b8:	add	r6, ip, r6
    96bc:	add	r1, r1, #1536	; 0x600
    96c0:	ldr	fp, [sl, #836]	; 0x344
    96c4:	lsl	r0, r0, #2
    96c8:	ldr	sl, [lr, #836]	; 0x344
    96cc:	orr	r7, r9, r7
    96d0:	add	lr, r2, r4
    96d4:	add	r5, ip, r5
    96d8:	ldr	r6, [r6, #828]	; 0x33c
    96dc:	lsl	r1, r1, #2
    96e0:	add	r4, ip, r4
    96e4:	orr	r7, r7, r8
    96e8:	add	r8, r2, r0
    96ec:	ldr	lr, [lr, #836]	; 0x344
    96f0:	add	r2, r2, r1
    96f4:	ldr	r5, [r5, #828]	; 0x33c
    96f8:	add	r0, ip, r0
    96fc:	orr	r3, r3, fp
    9700:	ldr	r9, [r8, #836]	; 0x344
    9704:	orr	r7, r7, r6
    9708:	ldr	r4, [r4, #828]	; 0x33c
    970c:	add	r1, ip, r1
    9710:	orr	r3, r3, sl
    9714:	ldr	ip, [r2, #836]	; 0x344
    9718:	orr	r3, r3, lr
    971c:	orr	r2, r7, r5
    9720:	ldr	lr, [r0, #828]	; 0x33c
    9724:	orr	r3, r3, r9
    9728:	ldr	r0, [r1, #828]	; 0x33c
    972c:	orr	r2, r2, r4
    9730:	orr	r3, r3, ip
    9734:	orr	r2, r2, lr
    9738:	orr	r0, r2, r0
    973c:	lsr	r1, r3, #16
    9740:	orr	r1, r1, r0, lsl #16
    9744:	ldr	r2, [pc, #1860]	; 9e90 <rb_crypt+0xf64>
    9748:	lsl	ip, r0, #18
    974c:	lsl	r3, r3, #2
    9750:	lsl	lr, r0, #12
    9754:	add	r2, pc, r2
    9758:	lsl	r7, r1, #8
    975c:	lsl	r6, r1, #14
    9760:	lsl	r5, r1, #20
    9764:	lsl	r4, r0, #6
    9768:	add	r9, r2, ip, lsr #26
    976c:	add	lr, r2, lr, lsr #26
    9770:	lsl	r8, r3, #14
    9774:	lsl	ip, r3, #20
    9778:	and	r1, r1, #63	; 0x3f
    977c:	add	r7, r2, r7, lsr #26
    9780:	add	r6, r2, r6, lsr #26
    9784:	add	r5, r2, r5, lsr #26
    9788:	add	r1, r2, r1
    978c:	add	r4, r2, r4, lsr #26
    9790:	add	r0, r2, r0, lsr #26
    9794:	and	r3, r3, #63	; 0x3f
    9798:	ldrb	lr, [lr, #1948]	; 0x79c
    979c:	add	ip, r2, ip, lsr #26
    97a0:	add	r8, r2, r8, lsr #26
    97a4:	add	r3, r2, r3
    97a8:	ldr	r2, [sp, #60]	; 0x3c
    97ac:	ldrb	r1, [r1, #1948]	; 0x79c
    97b0:	ldrb	r7, [r7, #1948]	; 0x79c
    97b4:	ldrb	r6, [r6, #1948]	; 0x79c
    97b8:	ldrb	r5, [r5, #1948]	; 0x79c
    97bc:	ldrb	r4, [r4, #1948]	; 0x79c
    97c0:	ldrb	r9, [r9, #1948]	; 0x79c
    97c4:	ldrb	r0, [r0, #1948]	; 0x79c
    97c8:	strb	lr, [r2, #-2960]	; 0xfffff470
    97cc:	mov	lr, r2
    97d0:	strb	r1, [r2, #-2955]	; 0xfffff475
    97d4:	strb	r7, [r2, #-2958]	; 0xfffff472
    97d8:	strb	r6, [r2, #-2957]	; 0xfffff473
    97dc:	strb	r5, [r2, #-2956]	; 0xfffff474
    97e0:	strb	r4, [r2, #-2961]	; 0xfffff46f
    97e4:	strb	r9, [r2, #-2959]	; 0xfffff471
    97e8:	strb	r0, [r2, #-2962]	; 0xfffff46e
    97ec:	ldrb	r2, [ip, #1948]	; 0x79c
    97f0:	ldrb	r1, [r8, #1948]	; 0x79c
    97f4:	ldrb	r3, [r3, #1948]	; 0x79c
    97f8:	sub	r0, lr, #2960	; 0xb90
    97fc:	ldrb	ip, [sp, #48]	; 0x30
    9800:	sub	r0, r0, #4
    9804:	strb	r1, [lr, #-2954]	; 0xfffff476
    9808:	strb	ip, [lr, #-2951]	; 0xfffff479
    980c:	strb	r2, [lr, #-2953]	; 0xfffff477
    9810:	strb	r3, [lr, #-2952]	; 0xfffff478
    9814:	add	sp, sp, #260	; 0x104
    9818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    981c:	ldr	r3, [pc, #1648]	; 9e94 <rb_crypt+0xf68>
    9820:	add	r3, pc, r3
    9824:	ldr	r0, [r3, #8]
    9828:	cmp	r2, r0
    982c:	bne	8f98 <rb_crypt+0x6c>
    9830:	ldr	r3, [r3, #4]
    9834:	cmp	r1, r3
    9838:	bne	8f98 <rb_crypt+0x6c>
    983c:	b	92d0 <rb_crypt+0x3a4>
    9840:	ldrb	r3, [r1, #2]
    9844:	cmp	r3, #36	; 0x24
    9848:	beq	9858 <rb_crypt+0x92c>
    984c:	ldrb	r3, [r1, #3]
    9850:	cmp	r3, #36	; 0x24
    9854:	bne	8f48 <rb_crypt+0x1c>
    9858:	ldr	r3, [sp, #28]
    985c:	ldrb	r3, [r3, #1]
    9860:	cmp	r3, #53	; 0x35
    9864:	beq	988c <rb_crypt+0x960>
    9868:	cmp	r3, #54	; 0x36
    986c:	beq	9948 <rb_crypt+0xa1c>
    9870:	cmp	r3, #49	; 0x31
    9874:	beq	98bc <rb_crypt+0x990>
    9878:	mov	r0, #0
    987c:	b	9814 <rb_crypt+0x8e8>
    9880:	ldr	r3, [r5, #12]
    9884:	str	r3, [sp, #40]	; 0x28
    9888:	b	9374 <rb_crypt+0x448>
    988c:	ldr	r0, [sp, #28]
    9890:	bl	47e4 <strlen@plt>
    9894:	add	r5, r0, #66	; 0x42
    9898:	mov	r0, r5
    989c:	bl	49ac <malloc@plt>
    98a0:	subs	r2, r0, #0
    98a4:	beq	9878 <rb_crypt+0x94c>
    98a8:	mov	r3, r5
    98ac:	ldr	r1, [sp, #28]
    98b0:	mov	r0, r4
    98b4:	bl	7090 <rb_sha256_crypt_r>
    98b8:	b	9814 <rb_crypt+0x8e8>
    98bc:	ldr	r5, [pc, #1492]	; 9e98 <rb_crypt+0xf6c>
    98c0:	ldr	r6, [sp, #28]
    98c4:	ldr	r1, [pc, #1488]	; 9e9c <rb_crypt+0xf70>
    98c8:	add	r5, pc, r5
    98cc:	mov	r2, #3
    98d0:	add	r1, pc, r1
    98d4:	mov	r0, r6
    98d8:	str	r6, [r5, #-2940]	; 0xfffff484
    98dc:	bl	4c10 <strncmp@plt>
    98e0:	cmp	r0, #0
    98e4:	bne	99a0 <rb_crypt+0xa74>
    98e8:	ldrb	r3, [r6, #3]
    98ec:	add	r8, r6, #3
    98f0:	str	r8, [r5, #-2940]	; 0xfffff484
    98f4:	cmp	r3, #36	; 0x24
    98f8:	cmpne	r3, #0
    98fc:	moveq	r3, #0
    9900:	movne	r3, #1
    9904:	str	r8, [r5, #-2936]	; 0xfffff488
    9908:	streq	r3, [sp, #4]
    990c:	beq	99b4 <rb_crypt+0xa88>
    9910:	add	r1, r6, #11
    9914:	mov	r3, r8
    9918:	ldrb	r2, [r3, #1]!
    991c:	cmp	r2, #0
    9920:	cmpne	r2, #36	; 0x24
    9924:	beq	9e38 <rb_crypt+0xf0c>
    9928:	cmp	r3, r1
    992c:	bne	9918 <rb_crypt+0x9ec>
    9930:	ldr	r2, [pc, #1384]	; 9ea0 <rb_crypt+0xf74>
    9934:	sub	r1, r3, r8
    9938:	add	r2, pc, r2
    993c:	str	r1, [sp, #4]
    9940:	str	r3, [r2, #-2936]	; 0xfffff488
    9944:	b	99b4 <rb_crypt+0xa88>
    9948:	ldr	r0, [sp, #28]
    994c:	bl	47e4 <strlen@plt>
    9950:	ldr	r5, [pc, #1356]	; 9ea4 <rb_crypt+0xf78>
    9954:	add	r5, pc, r5
    9958:	ldr	r3, [r5, #-2932]	; 0xfffff48c
    995c:	add	r6, r0, #109	; 0x6d
    9960:	cmp	r6, r3
    9964:	ble	998c <rb_crypt+0xa60>
    9968:	mov	r1, r6
    996c:	ldr	r0, [r5, #-2928]	; 0xfffff490
    9970:	bl	4c40 <realloc@plt>
    9974:	subs	r2, r0, #0
    9978:	beq	9878 <rb_crypt+0x94c>
    997c:	mov	r3, r6
    9980:	str	r2, [r5, #-2928]	; 0xfffff490
    9984:	str	r6, [r5, #-2932]	; 0xfffff48c
    9988:	b	9990 <rb_crypt+0xa64>
    998c:	ldr	r2, [r5, #-2928]	; 0xfffff490
    9990:	ldr	r1, [sp, #28]
    9994:	mov	r0, r4
    9998:	bl	7cf8 <rb_sha512_crypt_r>
    999c:	b	9814 <rb_crypt+0x8e8>
    99a0:	ldr	r3, [sp, #28]
    99a4:	str	r3, [r5, #-2936]	; 0xfffff488
    99a8:	mov	r8, r3
    99ac:	mov	r3, #0
    99b0:	str	r3, [sp, #4]
    99b4:	ldr	r3, [pc, #1260]	; 9ea8 <rb_crypt+0xf7c>
    99b8:	ldr	fp, [pc, #1260]	; 9eac <rb_crypt+0xf80>
    99bc:	ldr	sl, [pc, #1260]	; 9eb0 <rb_crypt+0xf84>
    99c0:	str	r3, [sp, #88]	; 0x58
    99c4:	str	r3, [sp, #8]
    99c8:	ldr	r3, [pc, #1252]	; 9eb4 <rb_crypt+0xf88>
    99cc:	mov	r9, #0
    99d0:	mov	r0, r4
    99d4:	str	r3, [sp, #92]	; 0x5c
    99d8:	str	fp, [sp, #80]	; 0x50
    99dc:	str	sl, [sp, #84]	; 0x54
    99e0:	str	r9, [sp, #100]	; 0x64
    99e4:	str	r9, [sp, #96]	; 0x60
    99e8:	bl	47e4 <strlen@plt>
    99ec:	add	r7, sp, #80	; 0x50
    99f0:	mov	r1, r4
    99f4:	add	r5, sp, #168	; 0xa8
    99f8:	add	r6, sp, #64	; 0x40
    99fc:	mov	r2, r0
    9a00:	mov	r0, r7
    9a04:	bl	6930 <MD5Update>
    9a08:	ldr	r1, [pc, #1192]	; 9eb8 <rb_crypt+0xf8c>
    9a0c:	mov	r0, r7
    9a10:	mov	r2, #3
    9a14:	add	r1, pc, r1
    9a18:	bl	6930 <MD5Update>
    9a1c:	mov	r1, r8
    9a20:	ldr	r2, [sp, #4]
    9a24:	mov	r0, r7
    9a28:	bl	6930 <MD5Update>
    9a2c:	ldr	r3, [sp, #8]
    9a30:	mov	r0, r4
    9a34:	str	r3, [sp, #176]	; 0xb0
    9a38:	ldr	r3, [pc, #1140]	; 9eb4 <rb_crypt+0xf88>
    9a3c:	str	fp, [sp, #168]	; 0xa8
    9a40:	str	r3, [sp, #180]	; 0xb4
    9a44:	str	r9, [sp, #188]	; 0xbc
    9a48:	str	r9, [sp, #184]	; 0xb8
    9a4c:	str	sl, [sp, #172]	; 0xac
    9a50:	bl	47e4 <strlen@plt>
    9a54:	mov	r1, r4
    9a58:	mov	r2, r0
    9a5c:	mov	r0, r5
    9a60:	bl	6930 <MD5Update>
    9a64:	mov	r1, r8
    9a68:	ldr	r2, [sp, #4]
    9a6c:	mov	r0, r5
    9a70:	bl	6930 <MD5Update>
    9a74:	mov	r0, r4
    9a78:	bl	47e4 <strlen@plt>
    9a7c:	mov	r1, r4
    9a80:	mov	r2, r0
    9a84:	mov	r0, r5
    9a88:	bl	6930 <MD5Update>
    9a8c:	mov	r1, r5
    9a90:	mov	r0, r6
    9a94:	bl	69ec <MD5Final>
    9a98:	mov	r0, r4
    9a9c:	bl	47e4 <strlen@plt>
    9aa0:	subs	r8, r0, #0
    9aa4:	ble	9acc <rb_crypt+0xba0>
    9aa8:	cmp	r8, #16
    9aac:	movlt	r2, r8
    9ab0:	movge	r2, #16
    9ab4:	mov	r1, r6
    9ab8:	sub	r8, r8, #16
    9abc:	mov	r0, r7
    9ac0:	bl	6930 <MD5Update>
    9ac4:	cmp	r8, #0
    9ac8:	bgt	9aa8 <rb_crypt+0xb7c>
    9acc:	mov	r3, #0
    9ad0:	str	r3, [sp, #64]	; 0x40
    9ad4:	mov	r0, r4
    9ad8:	str	r3, [r6, #4]
    9adc:	str	r3, [r6, #8]
    9ae0:	str	r3, [r6, #12]
    9ae4:	bl	47e4 <strlen@plt>
    9ae8:	subs	r8, r0, #0
    9aec:	movne	r9, #1
    9af0:	beq	9b14 <rb_crypt+0xbe8>
    9af4:	tst	r8, #1
    9af8:	mov	r1, r4
    9afc:	mov	r2, r9
    9b00:	movne	r1, r6
    9b04:	mov	r0, r7
    9b08:	bl	6930 <MD5Update>
    9b0c:	lsrs	r8, r8, #1
    9b10:	bne	9af4 <rb_crypt+0xbc8>
    9b14:	ldr	r9, [pc, #928]	; 9ebc <rb_crypt+0xf90>
    9b18:	ldr	r1, [pc, #928]	; 9ec0 <rb_crypt+0xf94>
    9b1c:	add	r9, pc, r9
    9b20:	sub	r8, r9, #3072	; 0xc00
    9b24:	sub	r8, r8, #12
    9b28:	mov	r2, #120	; 0x78
    9b2c:	mov	r0, r8
    9b30:	add	r1, pc, r1
    9b34:	bl	46a0 <rb_strlcpy@plt>
    9b38:	ldr	r1, [r9, #-2940]	; 0xfffff484
    9b3c:	ldr	r2, [sp, #4]
    9b40:	mov	r0, r8
    9b44:	bl	48bc <strncat@plt>
    9b48:	ldr	r1, [pc, #884]	; 9ec4 <rb_crypt+0xf98>
    9b4c:	mov	r0, r8
    9b50:	mov	r2, #120	; 0x78
    9b54:	add	r1, pc, r1
    9b58:	bl	4b8c <rb_strlcat@plt>
    9b5c:	mov	r1, r7
    9b60:	mov	r0, r6
    9b64:	bl	69ec <MD5Final>
    9b68:	mov	r8, #0
    9b6c:	ldr	fp, [pc, #824]	; 9eac <rb_crypt+0xf80>
    9b70:	ldr	sl, [pc, #824]	; 9eb0 <rb_crypt+0xf84>
    9b74:	ldr	r9, [pc, #812]	; 9ea8 <rb_crypt+0xf7c>
    9b78:	b	9bfc <rb_crypt+0xcd0>
    9b7c:	mov	r0, r4
    9b80:	bl	47e4 <strlen@plt>
    9b84:	mov	r1, r4
    9b88:	mov	r2, r0
    9b8c:	mov	r0, r5
    9b90:	bl	6930 <MD5Update>
    9b94:	ldr	r3, [pc, #812]	; 9ec8 <rb_crypt+0xf9c>
    9b98:	umull	r3, r2, r3, r8
    9b9c:	lsr	r2, r2, #1
    9ba0:	add	r2, r2, r2, lsl #1
    9ba4:	cmp	r8, r2
    9ba8:	bne	9c70 <rb_crypt+0xd44>
    9bac:	ldr	r3, [pc, #792]	; 9ecc <rb_crypt+0xfa0>
    9bb0:	umull	r3, r2, r3, r8
    9bb4:	sub	r1, r8, r2
    9bb8:	add	r2, r2, r1, lsr #1
    9bbc:	lsr	r2, r2, #2
    9bc0:	rsb	r2, r2, r2, lsl #3
    9bc4:	cmp	r8, r2
    9bc8:	bne	9c54 <rb_crypt+0xd28>
    9bcc:	cmp	r7, #0
    9bd0:	beq	9c38 <rb_crypt+0xd0c>
    9bd4:	mov	r2, #16
    9bd8:	mov	r1, r6
    9bdc:	mov	r0, r5
    9be0:	bl	6930 <MD5Update>
    9be4:	add	r8, r8, #1
    9be8:	mov	r1, r5
    9bec:	mov	r0, r6
    9bf0:	bl	69ec <MD5Final>
    9bf4:	cmp	r8, #1000	; 0x3e8
    9bf8:	beq	9c8c <rb_crypt+0xd60>
    9bfc:	ldr	r3, [pc, #688]	; 9eb4 <rb_crypt+0xf88>
    9c00:	mov	r2, #0
    9c04:	ands	r7, r8, #1
    9c08:	str	fp, [sp, #168]	; 0xa8
    9c0c:	str	sl, [sp, #172]	; 0xac
    9c10:	str	r9, [sp, #176]	; 0xb0
    9c14:	str	r3, [sp, #180]	; 0xb4
    9c18:	str	r2, [sp, #188]	; 0xbc
    9c1c:	str	r2, [sp, #184]	; 0xb8
    9c20:	bne	9b7c <rb_crypt+0xc50>
    9c24:	mov	r2, #16
    9c28:	mov	r1, r6
    9c2c:	mov	r0, r5
    9c30:	bl	6930 <MD5Update>
    9c34:	b	9b94 <rb_crypt+0xc68>
    9c38:	mov	r0, r4
    9c3c:	bl	47e4 <strlen@plt>
    9c40:	mov	r1, r4
    9c44:	mov	r2, r0
    9c48:	mov	r0, r5
    9c4c:	bl	6930 <MD5Update>
    9c50:	b	9be4 <rb_crypt+0xcb8>
    9c54:	mov	r0, r4
    9c58:	bl	47e4 <strlen@plt>
    9c5c:	mov	r1, r4
    9c60:	mov	r2, r0
    9c64:	mov	r0, r5
    9c68:	bl	6930 <MD5Update>
    9c6c:	b	9bcc <rb_crypt+0xca0>
    9c70:	ldr	r1, [pc, #600]	; 9ed0 <rb_crypt+0xfa4>
    9c74:	ldr	r2, [sp, #4]
    9c78:	add	r1, pc, r1
    9c7c:	mov	r0, r5
    9c80:	ldr	r1, [r1, #-2940]	; 0xfffff484
    9c84:	bl	6930 <MD5Update>
    9c88:	b	9bac <rb_crypt+0xc80>
    9c8c:	ldr	r2, [pc, #576]	; 9ed4 <rb_crypt+0xfa8>
    9c90:	add	r2, pc, r2
    9c94:	sub	r2, r2, #3072	; 0xc00
    9c98:	sub	r4, r2, #12
    9c9c:	mov	r0, r4
    9ca0:	bl	47e4 <strlen@plt>
    9ca4:	ldrb	r1, [sp, #70]	; 0x46
    9ca8:	ldrb	r2, [sp, #64]	; 0x40
    9cac:	ldrb	r3, [sp, #76]	; 0x4c
    9cb0:	ldr	lr, [pc, #544]	; 9ed8 <rb_crypt+0xfac>
    9cb4:	lsl	r1, r1, #8
    9cb8:	orr	r1, r1, r2, lsl #16
    9cbc:	orr	r1, r1, r3
    9cc0:	add	lr, pc, lr
    9cc4:	add	r4, r4, r0
    9cc8:	add	ip, r4, #4
    9ccc:	mov	r3, r4
    9cd0:	and	r2, r1, #63	; 0x3f
    9cd4:	add	r2, lr, r2
    9cd8:	lsr	r1, r1, #6
    9cdc:	ldrb	r2, [r2, #1948]	; 0x79c
    9ce0:	strb	r2, [r3], #1
    9ce4:	cmp	r3, ip
    9ce8:	bne	9cd0 <rb_crypt+0xda4>
    9cec:	ldrb	r1, [sp, #71]	; 0x47
    9cf0:	ldrb	ip, [sp, #65]	; 0x41
    9cf4:	ldrb	r0, [sp, #77]	; 0x4d
    9cf8:	ldr	lr, [pc, #476]	; 9edc <rb_crypt+0xfb0>
    9cfc:	lsl	r1, r1, #8
    9d00:	orr	r1, r1, ip, lsl #16
    9d04:	add	lr, pc, lr
    9d08:	orr	r1, r1, r0
    9d0c:	add	ip, r4, #8
    9d10:	and	r2, r1, #63	; 0x3f
    9d14:	add	r2, lr, r2
    9d18:	lsr	r1, r1, #6
    9d1c:	ldrb	r2, [r2, #1948]	; 0x79c
    9d20:	strb	r2, [r3], #1
    9d24:	cmp	r3, ip
    9d28:	bne	9d10 <rb_crypt+0xde4>
    9d2c:	ldrb	r1, [sp, #72]	; 0x48
    9d30:	ldrb	ip, [sp, #66]	; 0x42
    9d34:	ldrb	r0, [sp, #78]	; 0x4e
    9d38:	ldr	lr, [pc, #416]	; 9ee0 <rb_crypt+0xfb4>
    9d3c:	lsl	r1, r1, #8
    9d40:	orr	r1, r1, ip, lsl #16
    9d44:	add	lr, pc, lr
    9d48:	orr	r1, r1, r0
    9d4c:	add	ip, r4, #12
    9d50:	and	r2, r1, #63	; 0x3f
    9d54:	add	r2, lr, r2
    9d58:	lsr	r1, r1, #6
    9d5c:	ldrb	r2, [r2, #1948]	; 0x79c
    9d60:	strb	r2, [r3], #1
    9d64:	cmp	r3, ip
    9d68:	bne	9d50 <rb_crypt+0xe24>
    9d6c:	ldrb	r1, [sp, #73]	; 0x49
    9d70:	ldrb	ip, [sp, #67]	; 0x43
    9d74:	ldrb	r0, [sp, #79]	; 0x4f
    9d78:	ldr	lr, [pc, #356]	; 9ee4 <rb_crypt+0xfb8>
    9d7c:	lsl	r1, r1, #8
    9d80:	orr	r1, r1, ip, lsl #16
    9d84:	add	lr, pc, lr
    9d88:	orr	r1, r1, r0
    9d8c:	add	ip, r4, #16
    9d90:	and	r2, r1, #63	; 0x3f
    9d94:	add	r2, lr, r2
    9d98:	lsr	r1, r1, #6
    9d9c:	ldrb	r2, [r2, #1948]	; 0x79c
    9da0:	strb	r2, [r3], #1
    9da4:	cmp	r3, ip
    9da8:	bne	9d90 <rb_crypt+0xe64>
    9dac:	ldrb	r1, [sp, #74]	; 0x4a
    9db0:	ldrb	lr, [sp, #68]	; 0x44
    9db4:	ldrb	r0, [sp, #69]	; 0x45
    9db8:	ldr	ip, [pc, #296]	; 9ee8 <rb_crypt+0xfbc>
    9dbc:	lsl	r1, r1, #8
    9dc0:	orr	r1, r1, lr, lsl #16
    9dc4:	add	ip, pc, ip
    9dc8:	orr	r1, r1, r0
    9dcc:	add	lr, r4, #20
    9dd0:	and	r2, r1, #63	; 0x3f
    9dd4:	add	r2, ip, r2
    9dd8:	lsr	r1, r1, #6
    9ddc:	ldrb	r2, [r2, #1948]	; 0x79c
    9de0:	strb	r2, [r3], #1
    9de4:	cmp	r3, lr
    9de8:	bne	9dd0 <rb_crypt+0xea4>
    9dec:	ldrb	r0, [sp, #75]	; 0x4b
    9df0:	ldr	r3, [pc, #244]	; 9eec <rb_crypt+0xfc0>
    9df4:	mov	lr, #0
    9df8:	and	r1, r0, #63	; 0x3f
    9dfc:	add	r1, ip, r1
    9e00:	add	ip, ip, r0, lsr #6
    9e04:	ldrb	r0, [r1, #1948]	; 0x79c
    9e08:	ldrb	r1, [ip, #1948]	; 0x79c
    9e0c:	add	r3, pc, r3
    9e10:	sub	r3, r3, #3072	; 0xc00
    9e14:	strb	r0, [r4, #20]
    9e18:	strb	r1, [r4, #21]
    9e1c:	sub	r0, r3, #12
    9e20:	strb	lr, [r4, #22]
    9e24:	b	9814 <rb_crypt+0x8e8>
    9e28:	ldr	r3, [pc, #192]	; 9ef0 <rb_crypt+0xfc4>
    9e2c:	add	r3, pc, r3
    9e30:	str	lr, [r3, #12]
    9e34:	b	9374 <rb_crypt+0x448>
    9e38:	ldr	r2, [pc, #180]	; 9ef4 <rb_crypt+0xfc8>
    9e3c:	sub	r1, r3, r8
    9e40:	add	r2, pc, r2
    9e44:	str	r1, [sp, #4]
    9e48:	str	r3, [r2, #-2936]	; 0xfffff488
    9e4c:	b	99b4 <rb_crypt+0xa88>
    9e50:	.word	0x00024504
    9e54:	.word	0x000264f8
    9e58:	.word	0x000323c0
    9e5c:	.word	0x0000bf64
    9e60:	.word	0x000203c0
    9e64:	.word	0x0002837c
    9e68:	.word	0x000201e4
    9e6c:	.word	0x00032184
    9e70:	.word	0x0002a128
    9e74:	.word	0x0002811c
    9e78:	.word	0x00032074
    9e7c:	.word	0x00030028
    9e80:	.word	0x00020064
    9e84:	.word	0x00000fff
    9e88:	.word	0x0002de74
    9e8c:	.word	0x0002be44
    9e90:	.word	0x0000b90c
    9e94:	.word	0x0001fcac
    9e98:	.word	0x00031bbc
    9e9c:	.word	0x0000bf98
    9ea0:	.word	0x00031b4c
    9ea4:	.word	0x00031b30
    9ea8:	.word	0x98badcfe
    9eac:	.word	0x67452301
    9eb0:	.word	0xefcdab89
    9eb4:	.word	0x10325476
    9eb8:	.word	0x0000be54
    9ebc:	.word	0x00031968
    9ec0:	.word	0x0000bd38
    9ec4:	.word	0x0000bd08
    9ec8:	.word	0xaaaaaaab
    9ecc:	.word	0x24924925
    9ed0:	.word	0x0003180c
    9ed4:	.word	0x000317f4
    9ed8:	.word	0x0000b3a0
    9edc:	.word	0x0000b35c
    9ee0:	.word	0x0000b31c
    9ee4:	.word	0x0000b2dc
    9ee8:	.word	0x0000b29c
    9eec:	.word	0x00031678
    9ef0:	.word	0x0001f6a0
    9ef4:	.word	0x00031644

00009ef8 <rb_init_bh>:
    9ef8:	push	{r4, lr}
    9efc:	mov	r1, #12
    9f00:	mov	r0, #1
    9f04:	bl	45ec <calloc@plt>
    9f08:	cmp	r0, #0
    9f0c:	beq	9f20 <rb_init_bh+0x28>
    9f10:	ldr	r3, [pc, #12]	; 9f24 <rb_init_bh+0x2c>
    9f14:	add	r3, pc, r3
    9f18:	str	r0, [r3]
    9f1c:	pop	{r4, pc}
    9f20:	bl	4988 <rb_outofmemory@plt>
    9f24:	.word	0x00030a84

00009f28 <rb_bh_create>:
    9f28:	cmp	r0, #0
    9f2c:	cmpne	r1, #0
    9f30:	push	{r4, r5, r6, r7, r8, lr}
    9f34:	ble	9ff4 <rb_bh_create+0xcc>
    9f38:	cmp	r0, #11
    9f3c:	mov	r6, r0
    9f40:	bls	a018 <rb_bh_create+0xf0>
    9f44:	mov	r7, r1
    9f48:	mov	r0, #1
    9f4c:	mov	r1, #48	; 0x30
    9f50:	mov	r5, r2
    9f54:	bl	45ec <calloc@plt>
    9f58:	subs	r4, r0, #0
    9f5c:	beq	9ff0 <rb_bh_create+0xc8>
    9f60:	cmp	r5, #0
    9f64:	str	r6, [r4, #12]
    9f68:	str	r7, [r4, #16]
    9f6c:	beq	9f9c <rb_bh_create+0x74>
    9f70:	mov	r0, r5
    9f74:	bl	47e4 <strlen@plt>
    9f78:	add	r6, r0, #1
    9f7c:	mov	r0, r6
    9f80:	bl	49ac <malloc@plt>
    9f84:	subs	r7, r0, #0
    9f88:	beq	9ff0 <rb_bh_create+0xc8>
    9f8c:	mov	r2, r6
    9f90:	mov	r1, r5
    9f94:	bl	4808 <memcpy@plt>
    9f98:	str	r7, [r4, #44]	; 0x2c
    9f9c:	ldr	r3, [pc, #152]	; a03c <rb_bh_create+0x114>
    9fa0:	mov	r2, #0
    9fa4:	add	r3, pc, r3
    9fa8:	str	r2, [r4, #4]
    9fac:	ldr	r3, [r3]
    9fb0:	str	r4, [r4]
    9fb4:	ldr	r2, [r3]
    9fb8:	cmp	r2, #0
    9fbc:	str	r2, [r4, #8]
    9fc0:	strne	r4, [r2, #4]
    9fc4:	beq	9fe0 <rb_bh_create+0xb8>
    9fc8:	ldr	r2, [r3, #8]
    9fcc:	str	r4, [r3]
    9fd0:	add	r2, r2, #1
    9fd4:	mov	r0, r4
    9fd8:	str	r2, [r3, #8]
    9fdc:	pop	{r4, r5, r6, r7, r8, pc}
    9fe0:	ldr	r2, [r3, #4]
    9fe4:	cmp	r2, #0
    9fe8:	streq	r4, [r3, #4]
    9fec:	b	9fc8 <rb_bh_create+0xa0>
    9ff0:	bl	4988 <rb_outofmemory@plt>
    9ff4:	ldr	r2, [pc, #68]	; a040 <rb_bh_create+0x118>
    9ff8:	ldr	r1, [pc, #68]	; a044 <rb_bh_create+0x11c>
    9ffc:	ldr	r0, [pc, #68]	; a048 <rb_bh_create+0x120>
    a000:	mov	r3, #147	; 0x93
    a004:	add	r2, pc, r2
    a008:	add	r1, pc, r1
    a00c:	add	r0, pc, r0
    a010:	bl	491c <rb_lib_log@plt>
    a014:	bl	43c4 <abort@plt>
    a018:	ldr	r2, [pc, #44]	; a04c <rb_bh_create+0x124>
    a01c:	ldr	r1, [pc, #44]	; a050 <rb_bh_create+0x128>
    a020:	ldr	r0, [pc, #44]	; a054 <rb_bh_create+0x12c>
    a024:	mov	r3, #151	; 0x97
    a028:	add	r2, pc, r2
    a02c:	add	r1, pc, r1
    a030:	add	r0, pc, r0
    a034:	bl	491c <rb_lib_log@plt>
    a038:	bl	43c4 <abort@plt>
    a03c:	.word	0x000309f4
    a040:	.word	0x0000b868
    a044:	.word	0x0000b870
    a048:	.word	0x0000b898
    a04c:	.word	0x0000b844
    a050:	.word	0x0000b8a0
    a054:	.word	0x0000b874

0000a058 <rb_bh_alloc>:
    a058:	cmp	r0, #0
    a05c:	push	{r4, lr}
    a060:	beq	a07c <rb_bh_alloc+0x24>
    a064:	ldr	r1, [r0, #12]
    a068:	mov	r0, #1
    a06c:	bl	45ec <calloc@plt>
    a070:	cmp	r0, #0
    a074:	popne	{r4, pc}
    a078:	bl	4988 <rb_outofmemory@plt>
    a07c:	ldr	r2, [pc, #28]	; a0a0 <rb_bh_alloc+0x48>
    a080:	ldr	r1, [pc, #28]	; a0a4 <rb_bh_alloc+0x4c>
    a084:	ldr	r0, [pc, #28]	; a0a8 <rb_bh_alloc+0x50>
    a088:	mov	r3, #186	; 0xba
    a08c:	add	r2, pc, r2
    a090:	add	r1, pc, r1
    a094:	add	r0, pc, r0
    a098:	bl	491c <rb_lib_log@plt>
    a09c:	bl	43c4 <abort@plt>
    a0a0:	.word	0x0000b7e0
    a0a4:	.word	0x0000b878
    a0a8:	.word	0x0000b810

0000a0ac <rb_bh_free>:
    a0ac:	cmp	r0, #0
    a0b0:	push	{r4, lr}
    a0b4:	beq	a0d0 <rb_bh_free+0x24>
    a0b8:	cmp	r1, #0
    a0bc:	beq	a0e4 <rb_bh_free+0x38>
    a0c0:	mov	r0, r1
    a0c4:	bl	46f4 <free@plt>
    a0c8:	mov	r0, #0
    a0cc:	pop	{r4, pc}
    a0d0:	ldr	r0, [pc, #32]	; a0f8 <rb_bh_free+0x4c>
    a0d4:	add	r0, pc, r0
    a0d8:	bl	491c <rb_lib_log@plt>
    a0dc:	mov	r0, #1
    a0e0:	pop	{r4, pc}
    a0e4:	ldr	r0, [pc, #16]	; a0fc <rb_bh_free+0x50>
    a0e8:	add	r0, pc, r0
    a0ec:	bl	491c <rb_lib_log@plt>
    a0f0:	mov	r0, #1
    a0f4:	pop	{r4, pc}
    a0f8:	.word	0x0000b854
    a0fc:	.word	0x0000b860

0000a100 <rb_bh_destroy>:
    a100:	push	{r4, lr}
    a104:	subs	r4, r0, #0
    a108:	beq	a174 <rb_bh_destroy+0x74>
    a10c:	ldr	r3, [pc, #104]	; a17c <rb_bh_destroy+0x7c>
    a110:	ldr	r2, [r4, #8]
    a114:	add	r3, pc, r3
    a118:	cmp	r2, #0
    a11c:	ldr	r1, [r3]
    a120:	ldr	r3, [r4, #4]
    a124:	ldr	r0, [r4, #44]	; 0x2c
    a128:	strne	r3, [r2, #4]
    a12c:	streq	r3, [r1, #4]
    a130:	ldr	r3, [r4, #4]
    a134:	cmp	r3, #0
    a138:	strne	r2, [r3, #8]
    a13c:	ldr	r3, [r1, #8]
    a140:	streq	r2, [r1]
    a144:	mov	r2, #0
    a148:	sub	r3, r3, #1
    a14c:	cmp	r0, r2
    a150:	str	r2, [r4, #4]
    a154:	str	r2, [r4, #8]
    a158:	str	r3, [r1, #8]
    a15c:	beq	a164 <rb_bh_destroy+0x64>
    a160:	bl	46f4 <free@plt>
    a164:	mov	r0, r4
    a168:	bl	46f4 <free@plt>
    a16c:	mov	r0, #0
    a170:	pop	{r4, pc}
    a174:	mov	r0, #1
    a178:	pop	{r4, pc}
    a17c:	.word	0x00030884

0000a180 <rb_bh_usage>:
    a180:	cmp	r1, #0
    a184:	movne	ip, #0
    a188:	strne	ip, [r1]
    a18c:	cmp	r2, #0
    a190:	movne	r1, #0
    a194:	strne	r1, [r2]
    a198:	ldr	r0, [sp]
    a19c:	cmp	r3, #0
    a1a0:	movne	r2, #0
    a1a4:	strne	r2, [r3]
    a1a8:	cmp	r0, #0
    a1ac:	ldrne	r3, [pc, #8]	; a1bc <rb_bh_usage+0x3c>
    a1b0:	addne	r3, pc, r3
    a1b4:	strne	r3, [r0]
    a1b8:	bx	lr
    a1bc:	.word	0x0000b7b8

0000a1c0 <rb_bh_usage_all>:
    a1c0:	push	{r4, r5, r6, r7, lr}
    a1c4:	subs	r6, r0, #0
    a1c8:	sub	sp, sp, #12
    a1cc:	beq	a238 <rb_bh_usage_all+0x78>
    a1d0:	ldr	r3, [pc, #104]	; a240 <rb_bh_usage_all+0x80>
    a1d4:	add	r3, pc, r3
    a1d8:	ldr	r3, [r3]
    a1dc:	ldr	r4, [r3]
    a1e0:	cmp	r4, #0
    a1e4:	beq	a238 <rb_bh_usage_all+0x78>
    a1e8:	ldr	r5, [pc, #84]	; a244 <rb_bh_usage_all+0x84>
    a1ec:	mov	r7, r1
    a1f0:	add	r5, pc, r5
    a1f4:	ldr	ip, [r4]
    a1f8:	ldr	r0, [ip, #28]
    a1fc:	ldr	r3, [ip, #16]
    a200:	ldr	r2, [ip, #12]
    a204:	ldr	r1, [ip, #40]	; 0x28
    a208:	mul	r3, r3, r0
    a20c:	ldr	ip, [ip, #44]	; 0x2c
    a210:	sub	r0, r3, r1
    a214:	cmp	ip, #0
    a218:	movne	r5, ip
    a21c:	mul	r3, r2, r3
    a220:	stm	sp, {r5, r7}
    a224:	mul	r2, r2, r0
    a228:	blx	r6
    a22c:	ldr	r4, [r4, #8]
    a230:	cmp	r4, #0
    a234:	bne	a1f4 <rb_bh_usage_all+0x34>
    a238:	add	sp, sp, #12
    a23c:	pop	{r4, r5, r6, r7, pc}
    a240:	.word	0x000307c4
    a244:	.word	0x0000b788

0000a248 <rb_bh_total_usage>:
    a248:	ldr	r3, [pc, #108]	; a2bc <rb_bh_total_usage+0x74>
    a24c:	push	{r4, r5, r6, r7, lr}
    a250:	add	r3, pc, r3
    a254:	ldr	r3, [r3]
    a258:	ldr	ip, [r3]
    a25c:	cmp	ip, #0
    a260:	beq	a2b0 <rb_bh_total_usage+0x68>
    a264:	mov	r5, #0
    a268:	mov	r6, r5
    a26c:	ldr	r2, [ip]
    a270:	ldr	ip, [ip, #8]
    a274:	ldr	r7, [r2, #28]
    a278:	ldr	r3, [r2, #16]
    a27c:	ldr	lr, [r2, #40]	; 0x28
    a280:	ldr	r4, [r2, #12]
    a284:	mul	r3, r3, r7
    a288:	cmp	ip, #0
    a28c:	sub	r2, r3, lr
    a290:	mla	r6, r4, r3, r6
    a294:	mla	r5, r4, r2, r5
    a298:	bne	a26c <rb_bh_total_usage+0x24>
    a29c:	cmp	r0, #0
    a2a0:	strne	r6, [r0]
    a2a4:	cmp	r1, #0
    a2a8:	strne	r5, [r1]
    a2ac:	pop	{r4, r5, r6, r7, pc}
    a2b0:	mov	r5, ip
    a2b4:	mov	r6, ip
    a2b8:	b	a29c <rb_bh_total_usage+0x54>
    a2bc:	.word	0x00030748

0000a2c0 <inetntoa>:
    a2c0:	ldrb	r2, [r0]
    a2c4:	ldr	r3, [pc, #240]	; a3bc <inetntoa+0xfc>
    a2c8:	add	r3, pc, r3
    a2cc:	ldr	r1, [r3, r2, lsl #2]
    a2d0:	ldrb	r2, [r1]
    a2d4:	cmp	r2, #0
    a2d8:	beq	a3b0 <inetntoa+0xf0>
    a2dc:	ldr	r3, [pc, #220]	; a3c0 <inetntoa+0x100>
    a2e0:	add	r3, pc, r3
    a2e4:	strb	r2, [r3], #1
    a2e8:	ldrb	r2, [r1, #1]!
    a2ec:	cmp	r2, #0
    a2f0:	bne	a2e4 <inetntoa+0x24>
    a2f4:	mov	r2, #46	; 0x2e
    a2f8:	strb	r2, [r3]
    a2fc:	ldr	r2, [pc, #192]	; a3c4 <inetntoa+0x104>
    a300:	ldrb	r1, [r0, #1]
    a304:	add	r2, pc, r2
    a308:	add	r3, r3, #1
    a30c:	ldr	r1, [r2, r1, lsl #2]
    a310:	ldrb	r2, [r1]
    a314:	cmp	r2, #0
    a318:	beq	a32c <inetntoa+0x6c>
    a31c:	strb	r2, [r3], #1
    a320:	ldrb	r2, [r1, #1]!
    a324:	cmp	r2, #0
    a328:	bne	a31c <inetntoa+0x5c>
    a32c:	mov	r2, #46	; 0x2e
    a330:	strb	r2, [r3]
    a334:	ldr	r2, [pc, #140]	; a3c8 <inetntoa+0x108>
    a338:	ldrb	r1, [r0, #2]
    a33c:	add	r2, pc, r2
    a340:	add	r3, r3, #1
    a344:	ldr	r1, [r2, r1, lsl #2]
    a348:	ldrb	r2, [r1]
    a34c:	cmp	r2, #0
    a350:	beq	a364 <inetntoa+0xa4>
    a354:	strb	r2, [r3], #1
    a358:	ldrb	r2, [r1, #1]!
    a35c:	cmp	r2, #0
    a360:	bne	a354 <inetntoa+0x94>
    a364:	mov	r2, #46	; 0x2e
    a368:	strb	r2, [r3]
    a36c:	ldr	r2, [pc, #88]	; a3cc <inetntoa+0x10c>
    a370:	ldrb	r1, [r0, #3]
    a374:	add	r2, pc, r2
    a378:	add	r3, r3, #1
    a37c:	ldr	r1, [r2, r1, lsl #2]
    a380:	ldrb	r2, [r1]
    a384:	cmp	r2, #0
    a388:	beq	a39c <inetntoa+0xdc>
    a38c:	strb	r2, [r3], #1
    a390:	ldrb	r2, [r1, #1]!
    a394:	cmp	r2, #0
    a398:	bne	a38c <inetntoa+0xcc>
    a39c:	ldr	r0, [pc, #44]	; a3d0 <inetntoa+0x110>
    a3a0:	mov	r2, #0
    a3a4:	strb	r2, [r3]
    a3a8:	add	r0, pc, r0
    a3ac:	bx	lr
    a3b0:	ldr	r3, [pc, #28]	; a3d4 <inetntoa+0x114>
    a3b4:	add	r3, pc, r3
    a3b8:	b	a2f4 <inetntoa+0x34>
    a3bc:	.word	0x0001d774
    a3c0:	.word	0x000306bc
    a3c4:	.word	0x0001d738
    a3c8:	.word	0x0001d700
    a3cc:	.word	0x0001d6c8
    a3d0:	.word	0x000305f4
    a3d4:	.word	0x000305e8

0000a3d8 <inet_pton4>:
    a3d8:	push	{r4, r5, r6, r7, lr}
    a3dc:	mov	r3, #0
    a3e0:	sub	sp, sp, #12
    a3e4:	add	ip, sp, #8
    a3e8:	mov	r4, r3
    a3ec:	mov	r6, r3
    a3f0:	mov	r5, #10
    a3f4:	mov	r7, #1
    a3f8:	strb	r3, [ip, #-4]!
    a3fc:	ldrb	r2, [r0], #1
    a400:	cmp	r2, #0
    a404:	sub	lr, r2, #48	; 0x30
    a408:	beq	a450 <inet_pton4+0x78>
    a40c:	cmp	lr, #9
    a410:	bhi	a46c <inet_pton4+0x94>
    a414:	ldrb	r2, [ip]
    a418:	smlabb	lr, r5, r2, lr
    a41c:	cmp	lr, #255	; 0xff
    a420:	bhi	a49c <inet_pton4+0xc4>
    a424:	cmp	r3, #0
    a428:	strb	lr, [ip]
    a42c:	bne	a3fc <inet_pton4+0x24>
    a430:	add	r4, r4, #1
    a434:	cmp	r4, #4
    a438:	bgt	a49c <inet_pton4+0xc4>
    a43c:	ldrb	r2, [r0], #1
    a440:	mov	r3, r7
    a444:	cmp	r2, #0
    a448:	sub	lr, r2, #48	; 0x30
    a44c:	bne	a40c <inet_pton4+0x34>
    a450:	cmp	r4, #3
    a454:	ble	a49c <inet_pton4+0xc4>
    a458:	ldr	r3, [sp, #4]
    a45c:	mov	r0, #1
    a460:	str	r3, [r1]
    a464:	add	sp, sp, #12
    a468:	pop	{r4, r5, r6, r7, pc}
    a46c:	cmp	r2, #46	; 0x2e
    a470:	movne	r3, #0
    a474:	andeq	r3, r3, #1
    a478:	eor	r3, r3, #1
    a47c:	cmp	r4, #4
    a480:	movne	r2, r3
    a484:	orreq	r2, r3, #1
    a488:	cmp	r2, #0
    a48c:	mov	r3, r6
    a490:	strbeq	r2, [ip, #1]
    a494:	addeq	ip, ip, #1
    a498:	beq	a3fc <inet_pton4+0x24>
    a49c:	mov	r0, #0
    a4a0:	add	sp, sp, #12
    a4a4:	pop	{r4, r5, r6, r7, pc}

0000a4a8 <rb_unsupported_event>:
    a4a8:	mov	r0, #0
    a4ac:	bx	lr

0000a4b0 <rb_checktimeouts>:
    a4b0:	ldr	r3, [pc, #220]	; a594 <rb_checktimeouts+0xe4>
    a4b4:	add	r3, pc, r3
    a4b8:	ldr	r3, [r3, #16]
    a4bc:	cmp	r3, #0
    a4c0:	bxeq	lr
    a4c4:	ldr	r2, [pc, #204]	; a598 <rb_checktimeouts+0xe8>
    a4c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4cc:	sub	sp, sp, #12
    a4d0:	ldr	r7, [pc, #196]	; a59c <rb_checktimeouts+0xec>
    a4d4:	ldr	sl, [pc, #196]	; a5a0 <rb_checktimeouts+0xf0>
    a4d8:	add	r2, pc, r2
    a4dc:	ldr	r4, [r3, #8]
    a4e0:	add	r7, pc, r7
    a4e4:	add	sl, pc, sl
    a4e8:	str	r2, [sp, #4]
    a4ec:	mov	r8, #0
    a4f0:	b	a504 <rb_checktimeouts+0x54>
    a4f4:	cmp	r4, #0
    a4f8:	beq	a58c <rb_checktimeouts+0xdc>
    a4fc:	mov	r3, r4
    a500:	ldr	r4, [r4, #8]
    a504:	ldr	r6, [r3]
    a508:	ldr	r5, [r6]
    a50c:	cmp	r5, #0
    a510:	beq	a4f4 <rb_checktimeouts+0x44>
    a514:	ldrb	r3, [r5, #16]
    a518:	tst	r3, #1
    a51c:	beq	a4f4 <rb_checktimeouts+0x44>
    a520:	ldr	fp, [r6, #16]
    a524:	bl	47f0 <rb_current_time@plt>
    a528:	cmp	fp, r0
    a52c:	bge	a4f4 <rb_checktimeouts+0x44>
    a530:	ldr	r3, [r6, #12]
    a534:	ldr	r2, [r6, #8]
    a538:	cmp	r3, #0
    a53c:	ldr	fp, [r6, #20]
    a540:	ldreq	r1, [sp, #4]
    a544:	ldr	r9, [r6, #24]
    a548:	strne	r2, [r3, #4]
    a54c:	ldrne	r2, [r6, #8]
    a550:	streq	r2, [r1, #20]
    a554:	cmp	r2, #0
    a558:	strne	r3, [r2, #8]
    a55c:	streq	r3, [sl, #16]
    a560:	ldr	r3, [r7, #24]
    a564:	mov	r0, r6
    a568:	sub	r3, r3, #1
    a56c:	str	r8, [r5, #44]	; 0x2c
    a570:	str	r3, [r7, #24]
    a574:	bl	46f4 <free@plt>
    a578:	mov	r1, r9
    a57c:	mov	r0, r5
    a580:	blx	fp
    a584:	cmp	r4, #0
    a588:	bne	a4fc <rb_checktimeouts+0x4c>
    a58c:	add	sp, sp, #12
    a590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a594:	.word	0x000304e8
    a598:	.word	0x000304c4
    a59c:	.word	0x000304bc
    a5a0:	.word	0x000304b8

0000a5a4 <inet_pton6>:
    a5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5a8:	sub	sp, sp, #44	; 0x2c
    a5ac:	ldrb	r5, [r0]
    a5b0:	add	r6, sp, #24
    a5b4:	mov	r3, #0
    a5b8:	str	r3, [r6, #4]
    a5bc:	cmp	r5, #58	; 0x3a
    a5c0:	str	r3, [sp, #24]
    a5c4:	str	r3, [r6, #8]
    a5c8:	str	r3, [r6, #12]
    a5cc:	add	r3, sp, #40	; 0x28
    a5d0:	mov	r4, r0
    a5d4:	str	r1, [sp, #12]
    a5d8:	str	r6, [sp, #4]
    a5dc:	str	r3, [sp, #8]
    a5e0:	beq	a764 <inet_pton6+0x1c0>
    a5e4:	bl	482c <__ctype_tolower_loc@plt>
    a5e8:	ldr	sl, [pc, #496]	; a7e0 <inet_pton6+0x23c>
    a5ec:	mov	fp, #0
    a5f0:	str	r4, [sp, #20]
    a5f4:	mov	r9, fp
    a5f8:	str	fp, [sp, #16]
    a5fc:	add	sl, pc, sl
    a600:	ldr	r8, [pc, #476]	; a7e4 <inet_pton6+0x240>
    a604:	add	r4, r4, #1
    a608:	ldr	r7, [r0]
    a60c:	ldr	r5, [r7, r5, lsl #2]
    a610:	cmp	r5, #0
    a614:	beq	a658 <inet_pton6+0xb4>
    a618:	mov	r1, r5
    a61c:	mov	r0, sl
    a620:	bl	45b0 <strchr@plt>
    a624:	cmp	r0, #0
    a628:	beq	a6a8 <inet_pton6+0x104>
    a62c:	sub	r0, r0, sl
    a630:	orr	fp, r0, fp, lsl #4
    a634:	cmp	fp, r8
    a638:	bhi	a698 <inet_pton6+0xf4>
    a63c:	ldrb	r3, [r4]
    a640:	mov	r9, #1
    a644:	mov	r5, r3
    a648:	add	r4, r4, #1
    a64c:	ldr	r5, [r7, r5, lsl #2]
    a650:	cmp	r5, #0
    a654:	bne	a618 <inet_pton6+0x74>
    a658:	cmp	r9, #0
    a65c:	beq	a6f8 <inet_pton6+0x154>
    a660:	ldr	r3, [sp, #4]
    a664:	ldr	r1, [sp, #8]
    a668:	add	r2, r3, #2
    a66c:	cmp	r1, r2
    a670:	bcc	a698 <inet_pton6+0xf4>
    a674:	lsr	r1, fp, #8
    a678:	strb	fp, [r3, #1]
    a67c:	strb	r1, [r3]
    a680:	str	r2, [sp, #4]
    a684:	b	a6f8 <inet_pton6+0x154>
    a688:	ldr	r3, [sp, #4]
    a68c:	ldr	r2, [sp, #8]
    a690:	cmp	r3, r2
    a694:	beq	a744 <inet_pton6+0x1a0>
    a698:	mov	ip, #0
    a69c:	mov	r0, ip
    a6a0:	add	sp, sp, #44	; 0x2c
    a6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a6a8:	cmp	r5, #58	; 0x3a
    a6ac:	beq	a778 <inet_pton6+0x1d4>
    a6b0:	ldrb	r3, [r4]
    a6b4:	adds	r2, r3, #0
    a6b8:	movne	r2, #1
    a6bc:	cmp	r5, #46	; 0x2e
    a6c0:	movne	r2, #0
    a6c4:	cmp	r2, #0
    a6c8:	beq	a644 <inet_pton6+0xa0>
    a6cc:	ldr	r3, [sp, #4]
    a6d0:	add	r4, r3, #4
    a6d4:	ldr	r3, [sp, #8]
    a6d8:	cmp	r3, r4
    a6dc:	bcc	a698 <inet_pton6+0xf4>
    a6e0:	ldr	r1, [sp, #4]
    a6e4:	ldr	r0, [sp, #20]
    a6e8:	bl	a3d8 <inet_pton4>
    a6ec:	cmp	r0, #0
    a6f0:	strgt	r4, [sp, #4]
    a6f4:	ble	a698 <inet_pton6+0xf4>
    a6f8:	ldr	r3, [sp, #16]
    a6fc:	cmp	r3, #0
    a700:	beq	a688 <inet_pton6+0xe4>
    a704:	ldr	r2, [sp, #4]
    a708:	ldr	r1, [sp, #8]
    a70c:	sub	r3, r2, r3
    a710:	cmp	r2, r1
    a714:	beq	a698 <inet_pton6+0xf4>
    a718:	cmp	r3, #0
    a71c:	ble	a744 <inet_pton6+0x1a0>
    a720:	ldr	r3, [sp, #4]
    a724:	ldr	r2, [sp, #8]
    a728:	ldr	ip, [sp, #16]
    a72c:	mov	r0, #0
    a730:	ldrb	r1, [r3, #-1]
    a734:	strb	r1, [r2, #-1]!
    a738:	strb	r0, [r3, #-1]!
    a73c:	cmp	ip, r3
    a740:	bne	a730 <inet_pton6+0x18c>
    a744:	ldm	r6!, {r0, r1, r2, r3}
    a748:	mov	ip, #1
    a74c:	ldr	lr, [sp, #12]
    a750:	str	r0, [lr]
    a754:	str	r1, [lr, #4]
    a758:	str	r2, [lr, #8]
    a75c:	str	r3, [lr, #12]
    a760:	b	a69c <inet_pton6+0xf8>
    a764:	ldrb	r5, [r0, #1]
    a768:	cmp	r5, #58	; 0x3a
    a76c:	addeq	r4, r0, #1
    a770:	bne	a698 <inet_pton6+0xf4>
    a774:	b	a5e4 <inet_pton6+0x40>
    a778:	cmp	r9, #0
    a77c:	beq	a7c0 <inet_pton6+0x21c>
    a780:	ldrb	r3, [r4]
    a784:	cmp	r3, #0
    a788:	beq	a698 <inet_pton6+0xf4>
    a78c:	ldr	ip, [sp, #4]
    a790:	ldr	r1, [sp, #8]
    a794:	add	r2, ip, #2
    a798:	cmp	r1, r2
    a79c:	bcc	a698 <inet_pton6+0xf4>
    a7a0:	lsr	r1, fp, #8
    a7a4:	strb	fp, [ip, #1]
    a7a8:	strb	r1, [ip]
    a7ac:	mov	r9, r0
    a7b0:	str	r2, [sp, #4]
    a7b4:	str	r4, [sp, #20]
    a7b8:	mov	fp, #0
    a7bc:	b	a644 <inet_pton6+0xa0>
    a7c0:	ldr	r3, [sp, #16]
    a7c4:	cmp	r3, #0
    a7c8:	bne	a698 <inet_pton6+0xf4>
    a7cc:	ldr	r3, [sp, #4]
    a7d0:	str	r4, [sp, #20]
    a7d4:	str	r3, [sp, #16]
    a7d8:	ldrb	r3, [r4]
    a7dc:	b	a644 <inet_pton6+0xa0>
    a7e0:	.word	0x0000b38c
    a7e4:	.word	0x0000ffff

0000a7e8 <try_kqueue>:
    a7e8:	push	{r4, lr}
    a7ec:	bl	12430 <rb_init_netio_kqueue>
    a7f0:	ldr	r2, [pc, #136]	; a880 <try_kqueue+0x98>
    a7f4:	add	r2, pc, r2
    a7f8:	subs	r4, r0, #0
    a7fc:	bne	a878 <try_kqueue+0x90>
    a800:	ldr	r1, [pc, #124]	; a884 <try_kqueue+0x9c>
    a804:	ldr	r3, [pc, #124]	; a888 <try_kqueue+0xa0>
    a808:	ldr	r0, [pc, #124]	; a88c <try_kqueue+0xa4>
    a80c:	ldr	ip, [r2, r1]
    a810:	add	r3, pc, r3
    a814:	ldr	r1, [pc, #116]	; a890 <try_kqueue+0xa8>
    a818:	str	ip, [r3, #28]
    a81c:	ldr	ip, [r2, r0]
    a820:	ldr	r0, [pc, #108]	; a894 <try_kqueue+0xac>
    a824:	str	ip, [r3, #32]
    a828:	ldr	ip, [r2, r1]
    a82c:	ldr	r1, [pc, #100]	; a898 <try_kqueue+0xb0>
    a830:	str	ip, [r3, #36]	; 0x24
    a834:	ldr	ip, [r2, r0]
    a838:	ldr	r0, [pc, #92]	; a89c <try_kqueue+0xb4>
    a83c:	str	ip, [r3, #40]	; 0x28
    a840:	ldr	ip, [r2, r1]
    a844:	ldr	r1, [pc, #84]	; a8a0 <try_kqueue+0xb8>
    a848:	str	ip, [r3, #44]	; 0x2c
    a84c:	ldr	ip, [r2, r0]
    a850:	add	r0, r3, #56	; 0x38
    a854:	str	ip, [r3, #48]	; 0x30
    a858:	ldr	ip, [r2, r1]
    a85c:	ldr	r1, [pc, #64]	; a8a4 <try_kqueue+0xbc>
    a860:	mov	r2, #25
    a864:	add	r1, pc, r1
    a868:	str	ip, [r3, #52]	; 0x34
    a86c:	bl	46a0 <rb_strlcpy@plt>
    a870:	mov	r0, r4
    a874:	pop	{r4, pc}
    a878:	mvn	r4, #0
    a87c:	b	a870 <try_kqueue+0x88>
    a880:	.word	0x0001d804
    a884:	.word	0x000003bc
    a888:	.word	0x0003018c
    a88c:	.word	0x00000378
    a890:	.word	0x00000398
    a894:	.word	0x00000390
    a898:	.word	0x000003d4
    a89c:	.word	0x00000394
    a8a0:	.word	0x000003e4
    a8a4:	.word	0x0000b140

0000a8a8 <try_epoll>:
    a8a8:	push	{r4, lr}
    a8ac:	bl	10778 <rb_init_netio_epoll>
    a8b0:	ldr	r2, [pc, #136]	; a940 <try_epoll+0x98>
    a8b4:	add	r2, pc, r2
    a8b8:	subs	r4, r0, #0
    a8bc:	bne	a938 <try_epoll+0x90>
    a8c0:	ldr	r1, [pc, #124]	; a944 <try_epoll+0x9c>
    a8c4:	ldr	r3, [pc, #124]	; a948 <try_epoll+0xa0>
    a8c8:	ldr	r0, [pc, #124]	; a94c <try_epoll+0xa4>
    a8cc:	ldr	ip, [r2, r1]
    a8d0:	add	r3, pc, r3
    a8d4:	ldr	r1, [pc, #116]	; a950 <try_epoll+0xa8>
    a8d8:	str	ip, [r3, #28]
    a8dc:	ldr	ip, [r2, r0]
    a8e0:	ldr	r0, [pc, #108]	; a954 <try_epoll+0xac>
    a8e4:	str	ip, [r3, #32]
    a8e8:	ldr	ip, [r2, r1]
    a8ec:	ldr	r1, [pc, #100]	; a958 <try_epoll+0xb0>
    a8f0:	str	ip, [r3, #36]	; 0x24
    a8f4:	ldr	ip, [r2, r0]
    a8f8:	ldr	r0, [pc, #92]	; a95c <try_epoll+0xb4>
    a8fc:	str	ip, [r3, #40]	; 0x28
    a900:	ldr	ip, [r2, r1]
    a904:	ldr	r1, [pc, #84]	; a960 <try_epoll+0xb8>
    a908:	str	ip, [r3, #44]	; 0x2c
    a90c:	ldr	ip, [r2, r0]
    a910:	add	r0, r3, #56	; 0x38
    a914:	str	ip, [r3, #52]	; 0x34
    a918:	ldr	ip, [r2, r1]
    a91c:	ldr	r1, [pc, #64]	; a964 <try_epoll+0xbc>
    a920:	mov	r2, #25
    a924:	add	r1, pc, r1
    a928:	str	ip, [r3, #48]	; 0x30
    a92c:	bl	46a0 <rb_strlcpy@plt>
    a930:	mov	r0, r4
    a934:	pop	{r4, pc}
    a938:	mvn	r4, #0
    a93c:	b	a930 <try_epoll+0x88>
    a940:	.word	0x0001d744
    a944:	.word	0x00000368
    a948:	.word	0x000300cc
    a94c:	.word	0x000003c8
    a950:	.word	0x00000404
    a954:	.word	0x00000384
    a958:	.word	0x000003c4
    a95c:	.word	0x00000354
    a960:	.word	0x00000418
    a964:	.word	0x0000b088

0000a968 <try_ports>:
    a968:	push	{r4, lr}
    a96c:	bl	1149c <rb_init_netio_ports>
    a970:	ldr	r2, [pc, #136]	; aa00 <try_ports+0x98>
    a974:	add	r2, pc, r2
    a978:	subs	r4, r0, #0
    a97c:	bne	a9f8 <try_ports+0x90>
    a980:	ldr	r1, [pc, #124]	; aa04 <try_ports+0x9c>
    a984:	ldr	r3, [pc, #124]	; aa08 <try_ports+0xa0>
    a988:	ldr	r0, [pc, #124]	; aa0c <try_ports+0xa4>
    a98c:	ldr	ip, [r2, r1]
    a990:	add	r3, pc, r3
    a994:	ldr	r1, [pc, #116]	; aa10 <try_ports+0xa8>
    a998:	str	ip, [r3, #28]
    a99c:	ldr	ip, [r2, r0]
    a9a0:	ldr	r0, [pc, #108]	; aa14 <try_ports+0xac>
    a9a4:	str	ip, [r3, #32]
    a9a8:	ldr	ip, [r2, r1]
    a9ac:	ldr	r1, [pc, #100]	; aa18 <try_ports+0xb0>
    a9b0:	str	ip, [r3, #36]	; 0x24
    a9b4:	ldr	ip, [r2, r0]
    a9b8:	ldr	r0, [pc, #92]	; aa1c <try_ports+0xb4>
    a9bc:	str	ip, [r3, #40]	; 0x28
    a9c0:	ldr	ip, [r2, r1]
    a9c4:	ldr	r1, [pc, #84]	; aa20 <try_ports+0xb8>
    a9c8:	str	ip, [r3, #44]	; 0x2c
    a9cc:	ldr	ip, [r2, r0]
    a9d0:	add	r0, r3, #56	; 0x38
    a9d4:	str	ip, [r3, #48]	; 0x30
    a9d8:	ldr	ip, [r2, r1]
    a9dc:	ldr	r1, [pc, #64]	; aa24 <try_ports+0xbc>
    a9e0:	mov	r2, #25
    a9e4:	add	r1, pc, r1
    a9e8:	str	ip, [r3, #52]	; 0x34
    a9ec:	bl	46a0 <rb_strlcpy@plt>
    a9f0:	mov	r0, r4
    a9f4:	pop	{r4, pc}
    a9f8:	mvn	r4, #0
    a9fc:	b	a9f0 <try_ports+0x88>
    aa00:	.word	0x0001d684
    aa04:	.word	0x000003e8
    aa08:	.word	0x0003000c
    aa0c:	.word	0x00000388
    aa10:	.word	0x00000410
    aa14:	.word	0x00000350
    aa18:	.word	0x0000040c
    aa1c:	.word	0x00000364
    aa20:	.word	0x000003e0
    aa24:	.word	0x0000afd0

0000aa28 <try_devpoll>:
    aa28:	push	{r4, lr}
    aa2c:	bl	10670 <rb_init_netio_devpoll>
    aa30:	ldr	r2, [pc, #112]	; aaa8 <try_devpoll+0x80>
    aa34:	add	r2, pc, r2
    aa38:	subs	r4, r0, #0
    aa3c:	bne	aaa0 <try_devpoll+0x78>
    aa40:	ldr	r1, [pc, #100]	; aaac <try_devpoll+0x84>
    aa44:	ldr	r3, [pc, #100]	; aab0 <try_devpoll+0x88>
    aa48:	ldr	r0, [pc, #100]	; aab4 <try_devpoll+0x8c>
    aa4c:	ldr	ip, [r2, r1]
    aa50:	add	r3, pc, r3
    aa54:	ldr	r1, [pc, #92]	; aab8 <try_devpoll+0x90>
    aa58:	str	ip, [r3, #28]
    aa5c:	ldr	r0, [r2, r0]
    aa60:	ldr	ip, [pc, #84]	; aabc <try_devpoll+0x94>
    aa64:	str	r0, [r3, #32]
    aa68:	ldr	lr, [r2, r1]
    aa6c:	ldr	r1, [pc, #76]	; aac0 <try_devpoll+0x98>
    aa70:	add	ip, pc, ip
    aa74:	add	r0, r3, #56	; 0x38
    aa78:	mov	r2, #25
    aa7c:	add	r1, pc, r1
    aa80:	str	lr, [r3, #36]	; 0x24
    aa84:	str	r4, [r3, #40]	; 0x28
    aa88:	str	r4, [r3, #44]	; 0x2c
    aa8c:	str	r4, [r3, #48]	; 0x30
    aa90:	str	ip, [r3, #52]	; 0x34
    aa94:	bl	46a0 <rb_strlcpy@plt>
    aa98:	mov	r0, r4
    aa9c:	pop	{r4, pc}
    aaa0:	mvn	r4, #0
    aaa4:	b	aa98 <try_devpoll+0x70>
    aaa8:	.word	0x0001d5c4
    aaac:	.word	0x000003b0
    aab0:	.word	0x0002ff4c
    aab4:	.word	0x000003f0
    aab8:	.word	0x000003b4
    aabc:	.word	0xfffffa30
    aac0:	.word	0x0000af40

0000aac4 <try_sigio>:
    aac4:	push	{r4, lr}
    aac8:	bl	114e8 <rb_init_netio_sigio>
    aacc:	ldr	r2, [pc, #136]	; ab5c <try_sigio+0x98>
    aad0:	add	r2, pc, r2
    aad4:	subs	r4, r0, #0
    aad8:	bne	ab54 <try_sigio+0x90>
    aadc:	ldr	r1, [pc, #124]	; ab60 <try_sigio+0x9c>
    aae0:	ldr	r3, [pc, #124]	; ab64 <try_sigio+0xa0>
    aae4:	ldr	r0, [pc, #124]	; ab68 <try_sigio+0xa4>
    aae8:	ldr	ip, [r2, r1]
    aaec:	add	r3, pc, r3
    aaf0:	ldr	r1, [pc, #116]	; ab6c <try_sigio+0xa8>
    aaf4:	str	ip, [r3, #28]
    aaf8:	ldr	ip, [r2, r0]
    aafc:	ldr	r0, [pc, #108]	; ab70 <try_sigio+0xac>
    ab00:	str	ip, [r3, #32]
    ab04:	ldr	ip, [r2, r1]
    ab08:	ldr	r1, [pc, #100]	; ab74 <try_sigio+0xb0>
    ab0c:	str	ip, [r3, #36]	; 0x24
    ab10:	ldr	ip, [r2, r0]
    ab14:	ldr	r0, [pc, #92]	; ab78 <try_sigio+0xb4>
    ab18:	str	ip, [r3, #40]	; 0x28
    ab1c:	ldr	ip, [r2, r1]
    ab20:	ldr	r1, [pc, #84]	; ab7c <try_sigio+0xb8>
    ab24:	str	ip, [r3, #44]	; 0x2c
    ab28:	ldr	ip, [r2, r0]
    ab2c:	add	r0, r3, #56	; 0x38
    ab30:	str	ip, [r3, #52]	; 0x34
    ab34:	ldr	ip, [r2, r1]
    ab38:	ldr	r1, [pc, #64]	; ab80 <try_sigio+0xbc>
    ab3c:	mov	r2, #25
    ab40:	add	r1, pc, r1
    ab44:	str	ip, [r3, #48]	; 0x30
    ab48:	bl	46a0 <rb_strlcpy@plt>
    ab4c:	mov	r0, r4
    ab50:	pop	{r4, pc}
    ab54:	mvn	r4, #0
    ab58:	b	ab4c <try_sigio+0x88>
    ab5c:	.word	0x0001d528
    ab60:	.word	0x000003cc
    ab64:	.word	0x0002feb0
    ab68:	.word	0x0000036c
    ab6c:	.word	0x000003dc
    ab70:	.word	0x00000374
    ab74:	.word	0x00000358
    ab78:	.word	0x000003d8
    ab7c:	.word	0x000003f8
    ab80:	.word	0x0000ae84

0000ab84 <try_poll>:
    ab84:	push	{r4, lr}
    ab88:	bl	11044 <rb_init_netio_poll>
    ab8c:	ldr	r2, [pc, #112]	; ac04 <try_poll+0x80>
    ab90:	add	r2, pc, r2
    ab94:	subs	r4, r0, #0
    ab98:	bne	abfc <try_poll+0x78>
    ab9c:	ldr	r1, [pc, #100]	; ac08 <try_poll+0x84>
    aba0:	ldr	r3, [pc, #100]	; ac0c <try_poll+0x88>
    aba4:	ldr	r0, [pc, #100]	; ac10 <try_poll+0x8c>
    aba8:	ldr	ip, [r2, r1]
    abac:	add	r3, pc, r3
    abb0:	ldr	r1, [pc, #92]	; ac14 <try_poll+0x90>
    abb4:	str	ip, [r3, #28]
    abb8:	ldr	r0, [r2, r0]
    abbc:	ldr	ip, [pc, #84]	; ac18 <try_poll+0x94>
    abc0:	str	r0, [r3, #32]
    abc4:	ldr	lr, [r2, r1]
    abc8:	ldr	r1, [pc, #76]	; ac1c <try_poll+0x98>
    abcc:	add	ip, pc, ip
    abd0:	add	r0, r3, #56	; 0x38
    abd4:	mov	r2, #25
    abd8:	add	r1, pc, r1
    abdc:	str	lr, [r3, #36]	; 0x24
    abe0:	str	r4, [r3, #40]	; 0x28
    abe4:	str	r4, [r3, #44]	; 0x2c
    abe8:	str	r4, [r3, #48]	; 0x30
    abec:	str	ip, [r3, #52]	; 0x34
    abf0:	bl	46a0 <rb_strlcpy@plt>
    abf4:	mov	r0, r4
    abf8:	pop	{r4, pc}
    abfc:	mvn	r4, #0
    ac00:	b	abf4 <try_poll+0x70>
    ac04:	.word	0x0001d468
    ac08:	.word	0x000003ec
    ac0c:	.word	0x0002fdf0
    ac10:	.word	0x000003fc
    ac14:	.word	0x00000380
    ac18:	.word	0xfffff8d4
    ac1c:	.word	0x0000adf4

0000ac20 <try_win32>:
    ac20:	push	{r4, lr}
    ac24:	bl	4fb8 <rb_init_netio_win32>
    ac28:	ldr	r2, [pc, #112]	; aca0 <try_win32+0x80>
    ac2c:	add	r2, pc, r2
    ac30:	subs	r4, r0, #0
    ac34:	bne	ac98 <try_win32+0x78>
    ac38:	ldr	r1, [pc, #100]	; aca4 <try_win32+0x84>
    ac3c:	ldr	r3, [pc, #100]	; aca8 <try_win32+0x88>
    ac40:	ldr	r0, [pc, #100]	; acac <try_win32+0x8c>
    ac44:	ldr	ip, [r2, r1]
    ac48:	add	r3, pc, r3
    ac4c:	ldr	r1, [pc, #92]	; acb0 <try_win32+0x90>
    ac50:	str	ip, [r3, #28]
    ac54:	ldr	r0, [r2, r0]
    ac58:	ldr	ip, [pc, #84]	; acb4 <try_win32+0x94>
    ac5c:	str	r0, [r3, #32]
    ac60:	ldr	lr, [r2, r1]
    ac64:	ldr	r1, [pc, #76]	; acb8 <try_win32+0x98>
    ac68:	add	ip, pc, ip
    ac6c:	add	r0, r3, #56	; 0x38
    ac70:	mov	r2, #25
    ac74:	add	r1, pc, r1
    ac78:	str	lr, [r3, #36]	; 0x24
    ac7c:	str	r4, [r3, #40]	; 0x28
    ac80:	str	r4, [r3, #44]	; 0x2c
    ac84:	str	r4, [r3, #48]	; 0x30
    ac88:	str	ip, [r3, #52]	; 0x34
    ac8c:	bl	46a0 <rb_strlcpy@plt>
    ac90:	mov	r0, r4
    ac94:	pop	{r4, pc}
    ac98:	mvn	r4, #0
    ac9c:	b	ac90 <try_win32+0x70>
    aca0:	.word	0x0001d3cc
    aca4:	.word	0x0000039c
    aca8:	.word	0x0002fd54
    acac:	.word	0x000003a8
    acb0:	.word	0x00000370
    acb4:	.word	0xfffff838
    acb8:	.word	0x0000ad60

0000acbc <try_select>:
    acbc:	push	{r4, lr}
    acc0:	bl	120cc <rb_init_netio_select>
    acc4:	ldr	r2, [pc, #112]	; ad3c <try_select+0x80>
    acc8:	add	r2, pc, r2
    accc:	subs	r4, r0, #0
    acd0:	bne	ad34 <try_select+0x78>
    acd4:	ldr	r1, [pc, #100]	; ad40 <try_select+0x84>
    acd8:	ldr	r3, [pc, #100]	; ad44 <try_select+0x88>
    acdc:	ldr	r0, [pc, #100]	; ad48 <try_select+0x8c>
    ace0:	ldr	ip, [r2, r1]
    ace4:	add	r3, pc, r3
    ace8:	ldr	r1, [pc, #92]	; ad4c <try_select+0x90>
    acec:	str	ip, [r3, #28]
    acf0:	ldr	r0, [r2, r0]
    acf4:	ldr	ip, [pc, #84]	; ad50 <try_select+0x94>
    acf8:	str	r0, [r3, #32]
    acfc:	ldr	lr, [r2, r1]
    ad00:	ldr	r1, [pc, #76]	; ad54 <try_select+0x98>
    ad04:	add	ip, pc, ip
    ad08:	add	r0, r3, #56	; 0x38
    ad0c:	mov	r2, #25
    ad10:	add	r1, pc, r1
    ad14:	str	lr, [r3, #36]	; 0x24
    ad18:	str	r4, [r3, #40]	; 0x28
    ad1c:	str	r4, [r3, #44]	; 0x2c
    ad20:	str	r4, [r3, #48]	; 0x30
    ad24:	str	ip, [r3, #52]	; 0x34
    ad28:	bl	46a0 <rb_strlcpy@plt>
    ad2c:	mov	r0, r4
    ad30:	pop	{r4, pc}
    ad34:	mvn	r4, #0
    ad38:	b	ad2c <try_select+0x70>
    ad3c:	.word	0x0001d330
    ad40:	.word	0x00000420
    ad44:	.word	0x0002fcb8
    ad48:	.word	0x000003b8
    ad4c:	.word	0x00000400
    ad50:	.word	0xfffff79c
    ad54:	.word	0x0000accc

0000ad58 <rb_getmaxconnect>:
    ad58:	ldr	r3, [pc, #16]	; ad70 <rb_getmaxconnect+0x18>
    ad5c:	ldr	r2, [pc, #16]	; ad74 <rb_getmaxconnect+0x1c>
    ad60:	add	r3, pc, r3
    ad64:	ldr	r3, [r3, r2]
    ad68:	ldr	r0, [r3]
    ad6c:	bx	lr
    ad70:	.word	0x0001d298
    ad74:	.word	0x000003a0

0000ad78 <rb_set_buffers>:
    ad78:	push	{r4, r5, lr}
    ad7c:	sub	sp, sp, #20
    ad80:	subs	r4, r0, #0
    ad84:	str	r1, [sp, #12]
    ad88:	beq	adb4 <rb_set_buffers+0x3c>
    ad8c:	mov	r5, #4
    ad90:	ldr	r0, [r4, #12]
    ad94:	add	r3, sp, #12
    ad98:	str	r5, [sp]
    ad9c:	mov	r2, #8
    ada0:	mov	r1, #1
    ada4:	str	r3, [sp, #8]
    ada8:	bl	4ca0 <setsockopt@plt>
    adac:	cmp	r0, #0
    adb0:	beq	adc0 <rb_set_buffers+0x48>
    adb4:	mov	r0, #0
    adb8:	add	sp, sp, #20
    adbc:	pop	{r4, r5, pc}
    adc0:	ldr	r0, [r4, #12]
    adc4:	ldr	r3, [sp, #8]
    adc8:	str	r5, [sp]
    adcc:	mov	r2, #7
    add0:	mov	r1, #1
    add4:	bl	4ca0 <setsockopt@plt>
    add8:	clz	r0, r0
    addc:	lsr	r0, r0, #5
    ade0:	add	sp, sp, #20
    ade4:	pop	{r4, r5, pc}

0000ade8 <rb_settimeout>:
    ade8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    adec:	subs	r6, r0, #0
    adf0:	ldr	r8, [pc, #360]	; af60 <rb_settimeout+0x178>
    adf4:	add	r8, pc, r8
    adf8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    adfc:	cmp	r2, #0
    ae00:	mov	r9, r3
    ae04:	mov	r7, r2
    ae08:	mov	r5, r1
    ae0c:	ldr	r4, [r6, #44]	; 0x2c
    ae10:	beq	aea4 <rb_settimeout+0xbc>
    ae14:	cmp	r4, #0
    ae18:	beq	af0c <rb_settimeout+0x124>
    ae1c:	str	r6, [r4]
    ae20:	bl	47f0 <rb_current_time@plt>
    ae24:	ldr	r3, [pc, #312]	; af64 <rb_settimeout+0x17c>
    ae28:	mov	r1, #0
    ae2c:	add	r3, pc, r3
    ae30:	str	r1, [r4, #8]
    ae34:	ldr	r2, [r3, #16]
    ae38:	str	r7, [r4, #20]
    ae3c:	cmp	r2, r1
    ae40:	add	r1, r4, #4
    ae44:	str	r9, [r4, #24]
    ae48:	str	r4, [r4, #4]
    ae4c:	str	r2, [r4, #12]
    ae50:	add	r0, r0, r5
    ae54:	str	r0, [r4, #16]
    ae58:	strne	r1, [r2, #4]
    ae5c:	beq	af2c <rb_settimeout+0x144>
    ae60:	ldr	r4, [pc, #256]	; af68 <rb_settimeout+0x180>
    ae64:	add	r4, pc, r4
    ae68:	ldr	r2, [r4, #84]	; 0x54
    ae6c:	ldr	r3, [r4, #24]
    ae70:	cmp	r2, #0
    ae74:	add	r3, r3, #1
    ae78:	str	r1, [r4, #16]
    ae7c:	str	r3, [r4, #24]
    ae80:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    ae84:	ldr	r1, [pc, #224]	; af6c <rb_settimeout+0x184>
    ae88:	ldr	r0, [pc, #224]	; af70 <rb_settimeout+0x188>
    ae8c:	mov	r3, #5
    ae90:	ldr	r1, [r8, r1]
    ae94:	add	r0, pc, r0
    ae98:	bl	4b08 <rb_event_add@plt>
    ae9c:	str	r0, [r4, #84]	; 0x54
    aea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aea4:	cmp	r4, #0
    aea8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    aeac:	ldr	r3, [r4, #12]
    aeb0:	cmp	r3, #0
    aeb4:	beq	af4c <rb_settimeout+0x164>
    aeb8:	ldr	r2, [r4, #8]
    aebc:	str	r2, [r3, #4]
    aec0:	ldr	r2, [r4, #8]
    aec4:	cmp	r2, #0
    aec8:	strne	r3, [r2, #8]
    aecc:	beq	af3c <rb_settimeout+0x154>
    aed0:	ldr	r5, [pc, #156]	; af74 <rb_settimeout+0x18c>
    aed4:	mov	r0, r4
    aed8:	add	r5, pc, r5
    aedc:	ldr	r4, [r5, #24]
    aee0:	sub	r4, r4, #1
    aee4:	str	r4, [r5, #24]
    aee8:	bl	46f4 <free@plt>
    aeec:	cmp	r4, #0
    aef0:	mov	r3, #0
    aef4:	str	r3, [r6, #44]	; 0x2c
    aef8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
    aefc:	ldr	r0, [r5, #84]	; 0x54
    af00:	bl	449c <rb_event_delete@plt>
    af04:	str	r4, [r5, #84]	; 0x54
    af08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    af0c:	mov	r1, #28
    af10:	mov	r0, #1
    af14:	bl	45ec <calloc@plt>
    af18:	cmp	r0, #0
    af1c:	movne	r4, r0
    af20:	strne	r0, [r6, #44]	; 0x2c
    af24:	bne	ae1c <rb_settimeout+0x34>
    af28:	bl	4988 <rb_outofmemory@plt>
    af2c:	ldr	r2, [r3, #20]
    af30:	cmp	r2, #0
    af34:	streq	r1, [r3, #20]
    af38:	b	ae60 <rb_settimeout+0x78>
    af3c:	ldr	r2, [pc, #52]	; af78 <rb_settimeout+0x190>
    af40:	add	r2, pc, r2
    af44:	str	r3, [r2, #16]
    af48:	b	aed0 <rb_settimeout+0xe8>
    af4c:	ldr	r1, [pc, #40]	; af7c <rb_settimeout+0x194>
    af50:	ldr	r2, [r4, #8]
    af54:	add	r1, pc, r1
    af58:	str	r2, [r1, #20]
    af5c:	b	aec4 <rb_settimeout+0xdc>
    af60:	.word	0x0001d204
    af64:	.word	0x0002fb70
    af68:	.word	0x0002fb38
    af6c:	.word	0x0000034c
    af70:	.word	0x0000ab50
    af74:	.word	0x0002fac4
    af78:	.word	0x0002fa5c
    af7c:	.word	0x0002fa48

0000af80 <rb_sctp_bindx>:
    af80:	mvn	r0, #0
    af84:	bx	lr

0000af88 <rb_inet_get_proto>:
    af88:	mov	r0, #6
    af8c:	bx	lr

0000af90 <rb_connect_callback>:
    af90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    af94:	mov	r4, r0
    af98:	mov	r7, r1
    af9c:	bl	4ce8 <__errno_location@plt>
    afa0:	cmp	r4, #0
    afa4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    afa8:	ldr	r2, [r4, #48]	; 0x30
    afac:	cmp	r2, #0
    afb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    afb4:	ldr	r6, [r2, #260]	; 0x104
    afb8:	cmp	r6, #0
    afbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    afc0:	ldr	r9, [r0]
    afc4:	mov	r3, #0
    afc8:	ldr	r8, [r2, #264]	; 0x108
    afcc:	mov	r5, r0
    afd0:	str	r3, [r2, #260]	; 0x104
    afd4:	mov	r1, r3
    afd8:	mov	r2, r3
    afdc:	mov	r0, r4
    afe0:	bl	43e8 <rb_settimeout@plt>
    afe4:	str	r9, [r5]
    afe8:	mov	r2, r8
    afec:	mov	r1, r7
    aff0:	mov	r0, r4
    aff4:	mov	r3, r6
    aff8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    affc:	bx	r3

0000b000 <rb_connect_outcome>:
    b000:	push	{r4, r5, lr}
    b004:	sub	sp, sp, #20
    b008:	mov	r3, #0
    b00c:	mov	r2, #4
    b010:	subs	r4, r0, #0
    b014:	str	r3, [sp, #8]
    b018:	str	r2, [sp, #12]
    b01c:	beq	b078 <rb_connect_outcome+0x78>
    b020:	ldr	r3, [r4, #48]	; 0x30
    b024:	cmp	r3, #0
    b028:	beq	b078 <rb_connect_outcome+0x78>
    b02c:	ldr	r3, [r3, #260]	; 0x104
    b030:	cmp	r3, #0
    b034:	beq	b078 <rb_connect_outcome+0x78>
    b038:	add	r3, sp, #12
    b03c:	ldr	r0, [r4, #12]
    b040:	mov	r1, #1
    b044:	str	r3, [sp]
    b048:	add	r3, sp, #8
    b04c:	bl	4c7c <getsockopt@plt>
    b050:	cmp	r0, #0
    b054:	blt	b06c <rb_connect_outcome+0x6c>
    b058:	ldr	r5, [sp, #8]
    b05c:	cmp	r5, #0
    b060:	beq	b080 <rb_connect_outcome+0x80>
    b064:	bl	4ce8 <__errno_location@plt>
    b068:	str	r5, [r0]
    b06c:	mov	r0, r4
    b070:	mov	r1, #4
    b074:	bl	af90 <rb_connect_callback>
    b078:	add	sp, sp, #20
    b07c:	pop	{r4, r5, pc}
    b080:	mov	r1, r5
    b084:	mov	r0, r4
    b088:	bl	af90 <rb_connect_callback>
    b08c:	add	sp, sp, #20
    b090:	pop	{r4, r5, pc}

0000b094 <rb_connect_timeout>:
    b094:	mov	r1, #3
    b098:	b	af90 <rb_connect_callback>

0000b09c <rb_connect_sctp>:
    b09c:	mov	r1, #4
    b0a0:	b	af90 <rb_connect_callback>

0000b0a4 <rb_connect_sockaddr>:
    b0a4:	subs	r3, r0, #0
    b0a8:	beq	b0c8 <rb_connect_sockaddr+0x24>
    b0ac:	mov	r0, r1
    b0b0:	ldr	r1, [r3, #48]	; 0x30
    b0b4:	push	{r4, lr}
    b0b8:	add	r1, r1, #128	; 0x80
    b0bc:	bl	4808 <memcpy@plt>
    b0c0:	mov	r0, #1
    b0c4:	pop	{r4, pc}
    b0c8:	mov	r0, r3
    b0cc:	bx	lr

0000b0d0 <rb_errstr>:
    b0d0:	cmp	r0, #6
    b0d4:	bhi	b0ec <rb_errstr+0x1c>
    b0d8:	ldr	r3, [pc, #24]	; b0f8 <rb_errstr+0x28>
    b0dc:	add	r3, pc, r3
    b0e0:	add	r0, r3, r0, lsl #2
    b0e4:	ldr	r0, [r0, #1024]	; 0x400
    b0e8:	bx	lr
    b0ec:	ldr	r0, [pc, #8]	; b0fc <rb_errstr+0x2c>
    b0f0:	add	r0, pc, r0
    b0f4:	bx	lr
    b0f8:	.word	0x0001c960
    b0fc:	.word	0x0000a908

0000b100 <rb_listen>:
    b100:	push	{r4, r5, r6, lr}
    b104:	mov	r4, r0
    b108:	ldrb	r3, [r0, #17]
    b10c:	sub	sp, sp, #16
    b110:	ldr	r0, [r0, #12]
    b114:	bic	r3, r3, #127	; 0x7f
    b118:	orr	r3, r3, #20
    b11c:	strb	r3, [r4, #17]
    b120:	mov	r5, r2
    b124:	str	r1, [sp, #12]
    b128:	bl	45e0 <listen@plt>
    b12c:	adds	r5, r5, #0
    b130:	movne	r5, #1
    b134:	cmp	r0, #0
    b138:	movne	r5, #0
    b13c:	cmp	r5, #0
    b140:	mov	r6, r0
    b144:	beq	b164 <rb_listen+0x64>
    b148:	mov	r3, #4
    b14c:	ldr	r0, [r4, #12]
    b150:	mov	r2, #9
    b154:	str	r3, [sp]
    b158:	mov	r1, #6
    b15c:	add	r3, sp, #12
    b160:	bl	4ca0 <setsockopt@plt>
    b164:	mov	r0, r6
    b168:	add	sp, sp, #16
    b16c:	pop	{r4, r5, r6, pc}

0000b170 <rb_fdlist_init>:
    b170:	ldr	r3, [pc, #136]	; b200 <rb_fdlist_init+0x90>
    b174:	push	{r4, r5, r6, lr}
    b178:	add	r3, pc, r3
    b17c:	mov	r6, r2
    b180:	ldr	r3, [r3, #88]	; 0x58
    b184:	cmp	r3, #0
    b188:	ldr	r3, [pc, #116]	; b204 <rb_fdlist_init+0x94>
    b18c:	add	r3, pc, r3
    b190:	bne	b1dc <rb_fdlist_init+0x6c>
    b194:	ldr	r2, [pc, #108]	; b208 <rb_fdlist_init+0x98>
    b198:	cmp	r0, #0
    b19c:	ldr	r5, [r3, r2]
    b1a0:	str	r1, [r5]
    b1a4:	beq	b1cc <rb_fdlist_init+0x5c>
    b1a8:	cmp	r1, #3
    b1ac:	ble	b1cc <rb_fdlist_init+0x5c>
    b1b0:	mov	r4, #3
    b1b4:	mov	r0, r4
    b1b8:	bl	4940 <close@plt>
    b1bc:	ldr	r3, [r5]
    b1c0:	add	r4, r4, #1
    b1c4:	cmp	r4, r3
    b1c8:	blt	b1b4 <rb_fdlist_init+0x44>
    b1cc:	ldr	r3, [pc, #56]	; b20c <rb_fdlist_init+0x9c>
    b1d0:	mov	r2, #1
    b1d4:	add	r3, pc, r3
    b1d8:	str	r2, [r3, #88]	; 0x58
    b1dc:	ldr	r2, [pc, #44]	; b210 <rb_fdlist_init+0xa0>
    b1e0:	mov	r1, r6
    b1e4:	add	r2, pc, r2
    b1e8:	mov	r0, #68	; 0x44
    b1ec:	bl	4ab4 <rb_bh_create@plt>
    b1f0:	ldr	r3, [pc, #28]	; b214 <rb_fdlist_init+0xa4>
    b1f4:	add	r3, pc, r3
    b1f8:	str	r0, [r3, #92]	; 0x5c
    b1fc:	pop	{r4, r5, r6, pc}
    b200:	.word	0x0002f824
    b204:	.word	0x0001ce6c
    b208:	.word	0x000003a0
    b20c:	.word	0x0002f7c8
    b210:	.word	0x0000a82c
    b214:	.word	0x0002f7a8

0000b218 <rb_open>:
    b218:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b21c:	mov	r7, r1
    b220:	ldr	r1, [pc, #384]	; b3a8 <rb_open+0x190>
    b224:	subs	r5, r0, #0
    b228:	mov	r8, r2
    b22c:	add	r1, pc, r1
    b230:	blt	b34c <rb_open+0x134>
    b234:	asr	r6, r5, #12
    b238:	asr	sl, r5, #24
    b23c:	ldr	r3, [pc, #360]	; b3ac <rb_open+0x194>
    b240:	eor	r2, r6, sl
    b244:	eor	r2, r2, r5
    b248:	ldr	r9, [r1, r3]
    b24c:	lsl	r2, r2, #20
    b250:	lsr	r2, r2, #20
    b254:	ldr	r3, [r9]
    b258:	add	r2, r2, r2, lsl #1
    b25c:	ldr	r3, [r3, r2, lsl #2]
    b260:	cmp	r3, #0
    b264:	beq	b284 <rb_open+0x6c>
    b268:	ldr	r4, [r3]
    b26c:	ldr	r0, [r4, #12]
    b270:	cmp	r5, r0
    b274:	beq	b2ec <rb_open+0xd4>
    b278:	ldr	r3, [r3, #8]
    b27c:	cmp	r3, #0
    b280:	bne	b268 <rb_open+0x50>
    b284:	ldr	r3, [pc, #292]	; b3b0 <rb_open+0x198>
    b288:	add	r3, pc, r3
    b28c:	ldr	r0, [r3, #92]	; 0x5c
    b290:	bl	4958 <rb_bh_alloc@plt>
    b294:	eor	r3, r6, sl
    b298:	eor	r3, r3, r5
    b29c:	ldr	r2, [r9]
    b2a0:	lsl	r3, r3, #20
    b2a4:	mov	r1, #0
    b2a8:	lsr	r3, r3, #20
    b2ac:	add	r3, r3, r3, lsl #1
    b2b0:	lsl	r3, r3, #2
    b2b4:	mov	r4, r0
    b2b8:	str	r5, [r0, #12]
    b2bc:	str	r0, [r4]
    b2c0:	str	r1, [r0, #4]
    b2c4:	ldr	r1, [r2, r3]
    b2c8:	add	r0, r2, r3
    b2cc:	cmp	r1, #0
    b2d0:	str	r1, [r4, #8]
    b2d4:	strne	r4, [r1, #4]
    b2d8:	beq	b38c <rb_open+0x174>
    b2dc:	ldr	r1, [r0, #8]
    b2e0:	str	r4, [r2, r3]
    b2e4:	add	r3, r1, #1
    b2e8:	str	r3, [r0, #8]
    b2ec:	ldrb	r3, [r4, #16]
    b2f0:	tst	r3, #1
    b2f4:	bne	b360 <rb_open+0x148>
    b2f8:	orr	r3, r3, #1
    b2fc:	cmp	r8, #0
    b300:	strb	r3, [r4, #16]
    b304:	str	r5, [r4, #12]
    b308:	strb	r7, [r4, #17]
    b30c:	beq	b330 <rb_open+0x118>
    b310:	mov	r0, #128	; 0x80
    b314:	bl	49ac <malloc@plt>
    b318:	subs	r5, r0, #0
    b31c:	beq	b388 <rb_open+0x170>
    b320:	mov	r1, r8
    b324:	mov	r2, #128	; 0x80
    b328:	bl	46a0 <rb_strlcpy@plt>
    b32c:	str	r5, [r4, #24]
    b330:	ldr	r2, [pc, #124]	; b3b4 <rb_open+0x19c>
    b334:	mov	r0, r4
    b338:	add	r2, pc, r2
    b33c:	ldr	r3, [r2, #96]	; 0x60
    b340:	add	r3, r3, #1
    b344:	str	r3, [r2, #96]	; 0x60
    b348:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b34c:	ldr	r3, [pc, #88]	; b3ac <rb_open+0x194>
    b350:	asr	r6, r5, #12
    b354:	asr	sl, r5, #24
    b358:	ldr	r9, [r1, r3]
    b35c:	b	b284 <rb_open+0x6c>
    b360:	ldr	r2, [r4, #24]
    b364:	cmp	r2, #0
    b368:	beq	b39c <rb_open+0x184>
    b36c:	ldr	r0, [pc, #68]	; b3b8 <rb_open+0x1a0>
    b370:	mov	r1, r5
    b374:	add	r0, pc, r0
    b378:	mov	r4, #0
    b37c:	bl	491c <rb_lib_log@plt>
    b380:	mov	r0, r4
    b384:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b388:	bl	4988 <rb_outofmemory@plt>
    b38c:	ldr	r1, [r0, #4]
    b390:	cmp	r1, #0
    b394:	streq	r4, [r0, #4]
    b398:	b	b2dc <rb_open+0xc4>
    b39c:	ldr	r2, [pc, #24]	; b3bc <rb_open+0x1a4>
    b3a0:	add	r2, pc, r2
    b3a4:	b	b36c <rb_open+0x154>
    b3a8:	.word	0x0001cdcc
    b3ac:	.word	0x000003c0
    b3b0:	.word	0x0002f714
    b3b4:	.word	0x0002f664
    b3b8:	.word	0x0000a6b4
    b3bc:	.word	0x0000a680

0000b3c0 <rb_dump_fd>:
    b3c0:	ldr	r3, [pc, #140]	; b454 <rb_dump_fd+0x94>
    b3c4:	ldr	r2, [pc, #140]	; b458 <rb_dump_fd+0x98>
    b3c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b3cc:	add	r3, pc, r3
    b3d0:	ldr	r7, [pc, #132]	; b45c <rb_dump_fd+0x9c>
    b3d4:	mov	r6, r0
    b3d8:	add	r7, pc, r7
    b3dc:	ldr	r8, [r3, r2]
    b3e0:	mov	r5, r1
    b3e4:	mov	r9, #0
    b3e8:	ldr	r3, [r8]
    b3ec:	add	r2, r3, r9
    b3f0:	ldr	r2, [r2, #8]
    b3f4:	cmp	r2, #0
    b3f8:	beq	b444 <rb_dump_fd+0x84>
    b3fc:	ldr	r4, [r3, r9]
    b400:	cmp	r4, #0
    b404:	beq	b444 <rb_dump_fd+0x84>
    b408:	ldr	r3, [r4]
    b40c:	mov	r2, r5
    b410:	cmp	r3, #0
    b414:	beq	b438 <rb_dump_fd+0x78>
    b418:	ldrb	r1, [r3, #16]
    b41c:	tst	r1, #1
    b420:	beq	b438 <rb_dump_fd+0x78>
    b424:	ldr	r1, [r3, #24]
    b428:	ldr	r0, [r3, #12]
    b42c:	cmp	r1, #0
    b430:	moveq	r1, r7
    b434:	blx	r6
    b438:	ldr	r4, [r4, #8]
    b43c:	cmp	r4, #0
    b440:	bne	b408 <rb_dump_fd+0x48>
    b444:	add	r9, r9, #12
    b448:	cmp	r9, #49152	; 0xc000
    b44c:	bne	b3e8 <rb_dump_fd+0x28>
    b450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b454:	.word	0x0001cc2c
    b458:	.word	0x000003c0
    b45c:	.word	0x0000b7ec

0000b460 <rb_note>:
    b460:	push	{r4, r5, r6, lr}
    b464:	subs	r4, r0, #0
    b468:	popeq	{r4, r5, r6, pc}
    b46c:	ldr	r0, [r4, #24]
    b470:	mov	r5, r1
    b474:	cmp	r0, #0
    b478:	beq	b480 <rb_note+0x20>
    b47c:	bl	46f4 <free@plt>
    b480:	mov	r0, #128	; 0x80
    b484:	bl	49ac <malloc@plt>
    b488:	subs	r6, r0, #0
    b48c:	beq	b4a4 <rb_note+0x44>
    b490:	mov	r1, r5
    b494:	mov	r2, #128	; 0x80
    b498:	bl	46a0 <rb_strlcpy@plt>
    b49c:	str	r6, [r4, #24]
    b4a0:	pop	{r4, r5, r6, pc}
    b4a4:	bl	4988 <rb_outofmemory@plt>

0000b4a8 <rb_set_type>:
    b4a8:	strb	r1, [r0, #17]
    b4ac:	bx	lr

0000b4b0 <rb_get_type>:
    b4b0:	ldrb	r0, [r0, #17]
    b4b4:	bx	lr

0000b4b8 <rb_fd_ssl>:
    b4b8:	cmp	r0, #0
    b4bc:	ldrbne	r0, [r0, #17]
    b4c0:	lsrne	r0, r0, #5
    b4c4:	andne	r0, r0, #1
    b4c8:	bx	lr

0000b4cc <rb_get_fd>:
    b4cc:	cmp	r0, #0
    b4d0:	ldrne	r0, [r0, #12]
    b4d4:	mvneq	r0, #0
    b4d8:	bx	lr

0000b4dc <rb_get_sockerr>:
    b4dc:	push	{r4, r5, r6, lr}
    b4e0:	sub	sp, sp, #16
    b4e4:	ldrb	r3, [r0, #17]
    b4e8:	mov	r2, #0
    b4ec:	mov	r5, #4
    b4f0:	tst	r3, #4
    b4f4:	str	r2, [sp, #8]
    b4f8:	str	r5, [sp, #12]
    b4fc:	beq	b558 <rb_get_sockerr+0x7c>
    b500:	mov	r4, r0
    b504:	bl	4ce8 <__errno_location@plt>
    b508:	mov	r6, r0
    b50c:	mov	r0, r4
    b510:	ldr	r4, [r6]
    b514:	bl	44e4 <rb_get_fd@plt>
    b518:	add	r3, sp, #12
    b51c:	str	r3, [sp]
    b520:	mov	r2, r5
    b524:	add	r3, sp, #8
    b528:	mov	r1, #1
    b52c:	bl	4c7c <getsockopt@plt>
    b530:	cmp	r0, #0
    b534:	beq	b548 <rb_get_sockerr+0x6c>
    b538:	mov	r0, r4
    b53c:	str	r4, [r6]
    b540:	add	sp, sp, #16
    b544:	pop	{r4, r5, r6, pc}
    b548:	ldr	r3, [sp, #8]
    b54c:	cmp	r3, #0
    b550:	movne	r4, r3
    b554:	b	b538 <rb_get_sockerr+0x5c>
    b558:	bl	4ce8 <__errno_location@plt>
    b55c:	ldr	r4, [r0]
    b560:	mov	r0, r4
    b564:	add	sp, sp, #16
    b568:	pop	{r4, r5, r6, pc}

0000b56c <rb_bind>:
    b56c:	push	{r4, r5, r6, lr}
    b570:	sub	sp, sp, #16
    b574:	add	r3, sp, #16
    b578:	mov	r2, #1
    b57c:	mov	ip, #4
    b580:	str	r2, [r3, #-4]!
    b584:	mov	r4, r0
    b588:	mov	r6, r1
    b58c:	ldr	r0, [r0, #12]
    b590:	mov	r1, r2
    b594:	str	ip, [sp]
    b598:	mov	r2, #2
    b59c:	bl	4ca0 <setsockopt@plt>
    b5a0:	subs	r5, r0, #0
    b5a4:	bne	b5d4 <rb_bind+0x68>
    b5a8:	ldrh	r2, [r6]
    b5ac:	ldr	r0, [r4, #12]
    b5b0:	mov	r1, r6
    b5b4:	cmp	r2, #2
    b5b8:	moveq	r2, #16
    b5bc:	movne	r2, #28
    b5c0:	bl	4910 <bind@plt>
    b5c4:	mov	r5, r0
    b5c8:	mov	r0, r5
    b5cc:	add	sp, sp, #16
    b5d0:	pop	{r4, r5, r6, pc}
    b5d4:	mov	r0, r4
    b5d8:	ldr	r4, [r4, #12]
    b5dc:	bl	4a90 <rb_get_sockerr@plt>
    b5e0:	bl	43a0 <strerror@plt>
    b5e4:	mov	r1, r4
    b5e8:	mov	r2, r0
    b5ec:	ldr	r0, [pc, #16]	; b604 <rb_bind+0x98>
    b5f0:	add	r0, pc, r0
    b5f4:	bl	491c <rb_lib_log@plt>
    b5f8:	mov	r0, r5
    b5fc:	add	sp, sp, #16
    b600:	pop	{r4, r5, r6, pc}
    b604:	.word	0x0000a46c

0000b608 <rb_get_fde>:
    b608:	subs	r1, r0, #0
    b60c:	ldr	r0, [pc, #88]	; b66c <rb_get_fde+0x64>
    b610:	add	r0, pc, r0
    b614:	blt	b664 <rb_get_fde+0x5c>
    b618:	asr	r3, r1, #24
    b61c:	eor	r3, r3, r1, asr #12
    b620:	ldr	r2, [pc, #72]	; b670 <rb_get_fde+0x68>
    b624:	eor	r3, r3, r1
    b628:	ldr	r2, [r0, r2]
    b62c:	lsl	r3, r3, #20
    b630:	lsr	r3, r3, #20
    b634:	ldr	r2, [r2]
    b638:	add	r3, r3, r3, lsl #1
    b63c:	ldr	r3, [r2, r3, lsl #2]
    b640:	cmp	r3, #0
    b644:	beq	b664 <rb_get_fde+0x5c>
    b648:	ldr	r0, [r3]
    b64c:	ldr	r2, [r0, #12]
    b650:	cmp	r1, r2
    b654:	bxeq	lr
    b658:	ldr	r3, [r3, #8]
    b65c:	cmp	r3, #0
    b660:	bne	b648 <rb_get_fde+0x40>
    b664:	mov	r0, #0
    b668:	bx	lr
    b66c:	.word	0x0001c9e8
    b670:	.word	0x000003c0

0000b674 <rb_read>:
    b674:	push	{lr}		; (str lr, [sp, #-4]!)
    b678:	subs	lr, r0, #0
    b67c:	popeq	{pc}		; (ldreq pc, [sp], #4)
    b680:	ldrb	ip, [lr, #17]
    b684:	ands	r3, ip, #32
    b688:	bne	b6a8 <rb_read+0x34>
    b68c:	tst	ip, #4
    b690:	ldr	r0, [lr, #12]
    b694:	bne	b6a0 <rb_read+0x2c>
    b698:	pop	{lr}		; (ldr lr, [sp], #4)
    b69c:	b	470c <read@plt>
    b6a0:	pop	{lr}		; (ldr lr, [sp], #4)
    b6a4:	b	458c <recv@plt>
    b6a8:	pop	{lr}		; (ldr lr, [sp], #4)
    b6ac:	b	dcf4 <rb_ssl_read>

0000b6b0 <rb_write>:
    b6b0:	subs	r3, r0, #0
    b6b4:	bxeq	lr
    b6b8:	ldrb	ip, [r3, #17]
    b6bc:	tst	ip, #32
    b6c0:	bne	b6dc <rb_write+0x2c>
    b6c4:	tst	ip, #4
    b6c8:	ldr	r0, [r3, #12]
    b6cc:	bne	b6d4 <rb_write+0x24>
    b6d0:	b	4724 <write@plt>
    b6d4:	mov	r3, #16384	; 0x4000
    b6d8:	b	4a9c <send@plt>
    b6dc:	b	dd24 <rb_ssl_write>

0000b6e0 <rb_writev>:
    b6e0:	push	{r4, r5, r6, r7, lr}
    b6e4:	subs	r7, r0, #0
    b6e8:	sub	sp, sp, #36	; 0x24
    b6ec:	beq	b7ac <rb_writev+0xcc>
    b6f0:	ldrb	r3, [r7, #17]
    b6f4:	mov	r4, r1
    b6f8:	mov	r5, r2
    b6fc:	ands	ip, r3, #32
    b700:	bne	b760 <rb_writev+0x80>
    b704:	tst	r3, #4
    b708:	ldr	r0, [r7, #12]
    b70c:	bne	b724 <rb_writev+0x44>
    b710:	bl	4688 <writev@plt>
    b714:	mov	r5, r0
    b718:	mov	r0, r5
    b71c:	add	sp, sp, #36	; 0x24
    b720:	pop	{r4, r5, r6, r7, pc}
    b724:	add	r3, sp, #4
    b728:	mov	r1, r3
    b72c:	mov	r2, #16384	; 0x4000
    b730:	str	r5, [sp, #16]
    b734:	str	ip, [sp, #4]
    b738:	str	r4, [sp, #12]
    b73c:	str	ip, [sp, #8]
    b740:	str	ip, [sp, #20]
    b744:	str	ip, [sp, #24]
    b748:	str	ip, [sp, #28]
    b74c:	bl	4700 <sendmsg@plt>
    b750:	mov	r5, r0
    b754:	mov	r0, r5
    b758:	add	sp, sp, #36	; 0x24
    b75c:	pop	{r4, r5, r6, r7, pc}
    b760:	subs	r6, r2, #0
    b764:	beq	b718 <rb_writev+0x38>
    b768:	add	r4, r1, #8
    b76c:	mov	r5, #0
    b770:	b	b780 <rb_writev+0xa0>
    b774:	subs	r6, r6, #1
    b778:	add	r5, r5, r0
    b77c:	beq	b718 <rb_writev+0x38>
    b780:	ldmdb	r4, {r1, r2}
    b784:	mov	r0, r7
    b788:	bl	4658 <rb_write@plt>
    b78c:	add	r4, r4, #8
    b790:	cmp	r0, #0
    b794:	bgt	b774 <rb_writev+0x94>
    b798:	cmp	r5, #0
    b79c:	moveq	r5, r0
    b7a0:	mov	r0, r5
    b7a4:	add	sp, sp, #36	; 0x24
    b7a8:	pop	{r4, r5, r6, r7, pc}
    b7ac:	bl	4ce8 <__errno_location@plt>
    b7b0:	mov	r3, #9
    b7b4:	mvn	r5, #0
    b7b8:	str	r3, [r0]
    b7bc:	b	b718 <rb_writev+0x38>

0000b7c0 <rb_inet_ntop>:
    b7c0:	cmp	r0, #2
    b7c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7c8:	mov	r4, r1
    b7cc:	sub	sp, sp, #100	; 0x64
    b7d0:	mov	r8, r2
    b7d4:	mov	r7, r3
    b7d8:	beq	b8d8 <rb_inet_ntop+0x118>
    b7dc:	cmp	r0, #10
    b7e0:	beq	b7f0 <rb_inet_ntop+0x30>
    b7e4:	mov	r0, #0
    b7e8:	add	sp, sp, #100	; 0x64
    b7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7f0:	ldr	r3, [r1]
    b7f4:	cmp	r3, #0
    b7f8:	bne	b81c <rb_inet_ntop+0x5c>
    b7fc:	ldr	r3, [r1, #4]
    b800:	cmp	r3, #0
    b804:	bne	b81c <rb_inet_ntop+0x5c>
    b808:	ldr	r3, [r1, #8]
    b80c:	cmn	r3, #65536	; 0x10000
    b810:	beq	b90c <rb_inet_ntop+0x14c>
    b814:	cmp	r3, #0
    b818:	beq	b8fc <rb_inet_ntop+0x13c>
    b81c:	add	r9, sp, #16
    b820:	mov	r1, #0
    b824:	mov	r0, r9
    b828:	mov	r2, #32
    b82c:	bl	4628 <memset@plt>
    b830:	mov	r1, #0
    b834:	mov	r0, r4
    b838:	asr	r3, r1, #1
    b83c:	ldrb	ip, [r0, r1]!
    b840:	add	r2, sp, #96	; 0x60
    b844:	add	r3, r2, r3, lsl #2
    b848:	add	r1, r1, #2
    b84c:	ldrb	r2, [r0, #1]
    b850:	cmp	r1, #16
    b854:	orr	r2, r2, ip, lsl #8
    b858:	str	r2, [r3, #-80]	; 0xffffffb0
    b85c:	bne	b834 <rb_inet_ntop+0x74>
    b860:	mov	sl, #0
    b864:	mvn	fp, #0
    b868:	mov	lr, sl
    b86c:	mov	r2, sl
    b870:	mov	ip, fp
    b874:	mov	r5, fp
    b878:	mov	r1, r9
    b87c:	b	b898 <rb_inet_ntop+0xd8>
    b880:	cmn	ip, #1
    b884:	addne	lr, lr, #1
    b888:	beq	b930 <rb_inet_ntop+0x170>
    b88c:	add	r2, r2, #1
    b890:	cmp	r2, #8
    b894:	beq	b93c <rb_inet_ntop+0x17c>
    b898:	ldr	r3, [r1], #4
    b89c:	cmp	r3, #0
    b8a0:	beq	b880 <rb_inet_ntop+0xc0>
    b8a4:	cmn	ip, #1
    b8a8:	beq	b88c <rb_inet_ntop+0xcc>
    b8ac:	cmn	fp, #1
    b8b0:	movne	r3, #0
    b8b4:	moveq	r3, #1
    b8b8:	cmp	lr, sl
    b8bc:	orrgt	r3, r3, #1
    b8c0:	cmp	r3, #0
    b8c4:	moveq	ip, r5
    b8c8:	movne	fp, ip
    b8cc:	movne	sl, lr
    b8d0:	movne	ip, r5
    b8d4:	b	b88c <rb_inet_ntop+0xcc>
    b8d8:	cmp	r3, #15
    b8dc:	bls	b7e4 <rb_inet_ntop+0x24>
    b8e0:	mov	r0, r1
    b8e4:	bl	a2c0 <inetntoa>
    b8e8:	mov	r1, r0
    b8ec:	mov	r0, r8
    b8f0:	bl	488c <strcpy@plt>
    b8f4:	add	sp, sp, #100	; 0x64
    b8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b8fc:	ldr	r3, [r1, #12]
    b900:	rev	r3, r3
    b904:	cmp	r3, #1
    b908:	bls	b81c <rb_inet_ntop+0x5c>
    b90c:	cmp	r7, #15
    b910:	add	r0, r4, #12
    b914:	bls	b7e4 <rb_inet_ntop+0x24>
    b918:	bl	a2c0 <inetntoa>
    b91c:	mov	r1, r0
    b920:	mov	r0, r8
    b924:	bl	488c <strcpy@plt>
    b928:	add	sp, sp, #100	; 0x64
    b92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b930:	mov	ip, r2
    b934:	mov	lr, #1
    b938:	b	b88c <rb_inet_ntop+0xcc>
    b93c:	cmn	ip, #1
    b940:	beq	ba80 <rb_inet_ntop+0x2c0>
    b944:	cmn	fp, #1
    b948:	movne	r2, #0
    b94c:	moveq	r2, #1
    b950:	cmp	sl, lr
    b954:	orrlt	r2, r2, #1
    b958:	cmp	r2, #0
    b95c:	movne	sl, lr
    b960:	movne	fp, ip
    b964:	cmp	sl, #1
    b968:	movgt	r3, #1
    b96c:	movle	r3, #0
    b970:	mvnle	fp, #0
    b974:	mov	r1, r3
    b978:	ldr	r2, [pc, #400]	; bb10 <rb_inet_ntop+0x350>
    b97c:	add	r3, sp, #48	; 0x30
    b980:	str	r3, [sp, #4]
    b984:	add	r2, pc, r2
    b988:	mov	r6, r3
    b98c:	add	r3, fp, sl
    b990:	str	r4, [sp, #12]
    b994:	str	r8, [sp, #8]
    b998:	mov	r5, #0
    b99c:	mov	r8, fp
    b9a0:	str	r3, [sp]
    b9a4:	mov	fp, r7
    b9a8:	mov	r4, r1
    b9ac:	mov	r7, r2
    b9b0:	b	b9d4 <rb_inet_ntop+0x214>
    b9b4:	ldr	r3, [sp]
    b9b8:	cmp	r3, r5
    b9bc:	ble	b9e8 <rb_inet_ntop+0x228>
    b9c0:	cmp	r8, r5
    b9c4:	beq	ba94 <rb_inet_ntop+0x2d4>
    b9c8:	add	r5, r5, #1
    b9cc:	cmp	r5, #8
    b9d0:	beq	ba30 <rb_inet_ntop+0x270>
    b9d4:	cmp	r8, r5
    b9d8:	movgt	r2, #0
    b9dc:	andle	r2, r4, #1
    b9e0:	cmp	r2, #0
    b9e4:	bne	b9b4 <rb_inet_ntop+0x1f4>
    b9e8:	cmp	r5, #0
    b9ec:	beq	ba18 <rb_inet_ntop+0x258>
    b9f0:	mov	r3, #58	; 0x3a
    b9f4:	cmp	r8, #0
    b9f8:	cmpeq	r5, #6
    b9fc:	strb	r3, [r6]
    ba00:	add	r6, r6, #1
    ba04:	bne	ba18 <rb_inet_ntop+0x258>
    ba08:	cmp	sl, #6
    ba0c:	beq	bac4 <rb_inet_ntop+0x304>
    ba10:	cmp	sl, #5
    ba14:	beq	bab4 <rb_inet_ntop+0x2f4>
    ba18:	mov	r0, r6
    ba1c:	ldr	r2, [r9, r5, lsl #2]
    ba20:	mov	r1, r7
    ba24:	bl	4d00 <sprintf@plt>
    ba28:	add	r6, r6, r0
    ba2c:	b	b9c8 <rb_inet_ntop+0x208>
    ba30:	mov	r7, fp
    ba34:	mov	fp, r8
    ba38:	cmn	fp, #1
    ba3c:	ldr	r8, [sp, #8]
    ba40:	beq	ba58 <rb_inet_ntop+0x298>
    ba44:	add	sl, fp, sl
    ba48:	cmp	sl, #8
    ba4c:	moveq	r3, #58	; 0x3a
    ba50:	strbeq	r3, [r6]
    ba54:	addeq	r6, r6, #1
    ba58:	mov	r3, #0
    ba5c:	strb	r3, [r6], #1
    ba60:	ldr	r3, [sp, #4]
    ba64:	sub	r2, r6, r3
    ba68:	cmp	r7, r2
    ba6c:	bcc	b7e4 <rb_inet_ntop+0x24>
    ba70:	mov	r1, r3
    ba74:	mov	r0, r8
    ba78:	bl	4808 <memcpy@plt>
    ba7c:	b	b7e8 <rb_inet_ntop+0x28>
    ba80:	cmn	fp, #1
    ba84:	moveq	r3, #0
    ba88:	moveq	r1, r3
    ba8c:	beq	b978 <rb_inet_ntop+0x1b8>
    ba90:	b	b964 <rb_inet_ntop+0x1a4>
    ba94:	cmp	r8, #0
    ba98:	moveq	r3, #48	; 0x30
    ba9c:	strbeq	r3, [r6]
    baa0:	addeq	r6, r6, #1
    baa4:	mov	r3, #58	; 0x3a
    baa8:	strb	r3, [r6]
    baac:	add	r6, r6, #1
    bab0:	b	b9c8 <rb_inet_ntop+0x208>
    bab4:	ldr	r2, [sp, #36]	; 0x24
    bab8:	ldr	r3, [pc, #84]	; bb14 <rb_inet_ntop+0x354>
    babc:	cmp	r2, r3
    bac0:	bne	ba18 <rb_inet_ntop+0x258>
    bac4:	mov	r7, fp
    bac8:	mov	fp, r8
    bacc:	ldmib	sp, {r3, r8}
    bad0:	ldr	r4, [sp, #12]
    bad4:	sub	r2, r6, r3
    bad8:	rsb	r2, r2, #46	; 0x2e
    badc:	cmp	r2, #15
    bae0:	add	r0, r4, #12
    bae4:	bls	b7e4 <rb_inet_ntop+0x24>
    bae8:	bl	a2c0 <inetntoa>
    baec:	mov	r1, r0
    baf0:	mov	r0, r6
    baf4:	bl	488c <strcpy@plt>
    baf8:	cmp	r0, #0
    bafc:	beq	b7e4 <rb_inet_ntop+0x24>
    bb00:	mov	r0, r6
    bb04:	bl	47e4 <strlen@plt>
    bb08:	add	r6, r6, r0
    bb0c:	b	ba44 <rb_inet_ntop+0x284>
    bb10:	.word	0x0000a118
    bb14:	.word	0x0000ffff

0000bb18 <rb_inet_ntop_sock>:
    bb18:	ldrh	ip, [r0]
    bb1c:	cmp	ip, #2
    bb20:	beq	bb48 <rb_inet_ntop_sock+0x30>
    bb24:	cmp	ip, #10
    bb28:	bne	bb40 <rb_inet_ntop_sock+0x28>
    bb2c:	mov	r3, r2
    bb30:	mov	r2, r1
    bb34:	add	r1, r0, #8
    bb38:	mov	r0, ip
    bb3c:	b	494c <rb_inet_ntop@plt>
    bb40:	mov	r0, #0
    bb44:	bx	lr
    bb48:	mov	r3, r2
    bb4c:	mov	r2, r1
    bb50:	add	r1, r0, #4
    bb54:	mov	r0, ip
    bb58:	b	494c <rb_inet_ntop@plt>

0000bb5c <rb_inet_pton>:
    bb5c:	cmp	r0, #2
    bb60:	push	{r4, r5, lr}
    bb64:	mov	r4, r1
    bb68:	sub	sp, sp, #60	; 0x3c
    bb6c:	mov	r5, r2
    bb70:	beq	bbb0 <rb_inet_pton+0x54>
    bb74:	cmp	r0, #10
    bb78:	bne	bba4 <rb_inet_pton+0x48>
    bb7c:	mov	r1, r2
    bb80:	mov	r0, r4
    bb84:	bl	a3d8 <inet_pton4>
    bb88:	cmp	r0, #0
    bb8c:	bne	bbc4 <rb_inet_pton+0x68>
    bb90:	mov	r1, r5
    bb94:	mov	r0, r4
    bb98:	bl	a5a4 <inet_pton6>
    bb9c:	add	sp, sp, #60	; 0x3c
    bba0:	pop	{r4, r5, pc}
    bba4:	mvn	r0, #0
    bba8:	add	sp, sp, #60	; 0x3c
    bbac:	pop	{r4, r5, pc}
    bbb0:	mov	r1, r2
    bbb4:	mov	r0, r4
    bbb8:	bl	a3d8 <inet_pton4>
    bbbc:	add	sp, sp, #60	; 0x3c
    bbc0:	pop	{r4, r5, pc}
    bbc4:	ldr	r1, [pc, #32]	; bbec <rb_inet_pton+0x90>
    bbc8:	mov	r2, r4
    bbcc:	mov	r0, sp
    bbd0:	add	r1, pc, r1
    bbd4:	bl	4d00 <sprintf@plt>
    bbd8:	mov	r1, r5
    bbdc:	mov	r0, sp
    bbe0:	bl	a5a4 <inet_pton6>
    bbe4:	add	sp, sp, #60	; 0x3c
    bbe8:	pop	{r4, r5, pc}
    bbec:	.word	0x00009ed0

0000bbf0 <rb_inet_pton_sock>:
    bbf0:	push	{r4, r5, r6, lr}
    bbf4:	mov	r2, #128	; 0x80
    bbf8:	mov	r4, r1
    bbfc:	mov	r5, r0
    bc00:	mov	r0, r1
    bc04:	mov	r1, #0
    bc08:	bl	4628 <memset@plt>
    bc0c:	add	r2, r4, #4
    bc10:	mov	r1, r5
    bc14:	mov	r0, #2
    bc18:	bl	4634 <rb_inet_pton@plt>
    bc1c:	subs	r6, r0, #0
    bc20:	beq	bc3c <rb_inet_pton_sock+0x4c>
    bc24:	mov	r2, #2
    bc28:	mov	r3, #0
    bc2c:	strh	r2, [r4]
    bc30:	strh	r3, [r4, #2]
    bc34:	mov	r0, #1
    bc38:	pop	{r4, r5, r6, pc}
    bc3c:	mov	r1, r5
    bc40:	add	r2, r4, #8
    bc44:	mov	r0, #10
    bc48:	bl	4634 <rb_inet_pton@plt>
    bc4c:	cmp	r0, #0
    bc50:	movne	r3, #10
    bc54:	strhne	r6, [r4, #2]
    bc58:	movne	r0, #1
    bc5c:	strhne	r3, [r4]
    bc60:	pop	{r4, r5, r6, pc}

0000bc64 <rb_get_iotype>:
    bc64:	ldr	r0, [pc, #8]	; bc74 <rb_get_iotype+0x10>
    bc68:	add	r0, pc, r0
    bc6c:	add	r0, r0, #56	; 0x38
    bc70:	bx	lr
    bc74:	.word	0x0002ed34

0000bc78 <rb_io_sched_event>:
    bc78:	push	{r4, r5, r6, lr}
    bc7c:	subs	r5, r0, #0
    bc80:	beq	bcb4 <rb_io_sched_event+0x3c>
    bc84:	ldr	r4, [pc, #68]	; bcd0 <rb_io_sched_event+0x58>
    bc88:	add	r4, pc, r4
    bc8c:	ldr	r3, [r4, #52]	; 0x34
    bc90:	cmp	r3, #0
    bc94:	beq	bcb4 <rb_io_sched_event+0x3c>
    bc98:	ldr	r2, [r4, #40]	; 0x28
    bc9c:	cmp	r2, #0
    bca0:	beq	bcb4 <rb_io_sched_event+0x3c>
    bca4:	mov	r6, r1
    bca8:	blx	r3
    bcac:	cmp	r0, #0
    bcb0:	bne	bcbc <rb_io_sched_event+0x44>
    bcb4:	mov	r0, #0
    bcb8:	pop	{r4, r5, r6, pc}
    bcbc:	ldr	r3, [r4, #40]	; 0x28
    bcc0:	mov	r1, r6
    bcc4:	mov	r0, r5
    bcc8:	pop	{r4, r5, r6, lr}
    bccc:	bx	r3
    bcd0:	.word	0x0002ed14

0000bcd4 <rb_io_unsched_event>:
    bcd4:	push	{r4, r5, r6, lr}
    bcd8:	subs	r5, r0, #0
    bcdc:	popeq	{r4, r5, r6, pc}
    bce0:	ldr	r4, [pc, #52]	; bd1c <rb_io_unsched_event+0x48>
    bce4:	add	r4, pc, r4
    bce8:	ldr	r3, [r4, #52]	; 0x34
    bcec:	cmp	r3, #0
    bcf0:	popeq	{r4, r5, r6, pc}
    bcf4:	ldr	r2, [r4, #44]	; 0x2c
    bcf8:	cmp	r2, #0
    bcfc:	popeq	{r4, r5, r6, pc}
    bd00:	blx	r3
    bd04:	cmp	r0, #0
    bd08:	popeq	{r4, r5, r6, pc}
    bd0c:	ldr	r3, [r4, #44]	; 0x2c
    bd10:	mov	r0, r5
    bd14:	pop	{r4, r5, r6, lr}
    bd18:	bx	r3
    bd1c:	.word	0x0002ecb8

0000bd20 <rb_io_supports_event>:
    bd20:	ldr	r3, [pc, #16]	; bd38 <rb_io_supports_event+0x18>
    bd24:	add	r3, pc, r3
    bd28:	ldr	r0, [r3, #52]	; 0x34
    bd2c:	cmp	r0, #0
    bd30:	bxeq	lr
    bd34:	bx	r0
    bd38:	.word	0x0002ec78

0000bd3c <rb_io_init_event>:
    bd3c:	ldr	r3, [pc, #20]	; bd58 <rb_io_init_event+0x1c>
    bd40:	push	{r4, lr}
    bd44:	add	r3, pc, r3
    bd48:	ldr	r3, [r3, #48]	; 0x30
    bd4c:	blx	r3
    bd50:	pop	{r4, lr}
    bd54:	b	e5a4 <rb_event_io_register_all>
    bd58:	.word	0x0002ec58

0000bd5c <rb_init_netio>:
    bd5c:	ldr	r0, [pc, #500]	; bf58 <rb_init_netio+0x1fc>
    bd60:	push	{r4, lr}
    bd64:	add	r0, pc, r0
    bd68:	bl	4598 <getenv@plt>
    bd6c:	mov	r1, #49152	; 0xc000
    bd70:	mov	r4, r0
    bd74:	mov	r0, #1
    bd78:	bl	45ec <calloc@plt>
    bd7c:	ldr	r3, [pc, #472]	; bf5c <rb_init_netio+0x200>
    bd80:	add	r3, pc, r3
    bd84:	cmp	r0, #0
    bd88:	beq	bf24 <rb_init_netio+0x1c8>
    bd8c:	ldr	r2, [pc, #460]	; bf60 <rb_init_netio+0x204>
    bd90:	ldr	r3, [r3, r2]
    bd94:	str	r0, [r3]
    bd98:	bl	d48c <rb_init_ssl>
    bd9c:	cmp	r4, #0
    bda0:	beq	be64 <rb_init_netio+0x108>
    bda4:	ldr	r0, [pc, #440]	; bf64 <rb_init_netio+0x208>
    bda8:	mov	r1, r4
    bdac:	add	r0, pc, r0
    bdb0:	bl	4cdc <strcmp@plt>
    bdb4:	cmp	r0, #0
    bdb8:	beq	bed4 <rb_init_netio+0x178>
    bdbc:	ldr	r0, [pc, #420]	; bf68 <rb_init_netio+0x20c>
    bdc0:	mov	r1, r4
    bdc4:	add	r0, pc, r0
    bdc8:	bl	4cdc <strcmp@plt>
    bdcc:	cmp	r0, #0
    bdd0:	beq	bee4 <rb_init_netio+0x188>
    bdd4:	ldr	r0, [pc, #400]	; bf6c <rb_init_netio+0x210>
    bdd8:	mov	r1, r4
    bddc:	add	r0, pc, r0
    bde0:	bl	4cdc <strcmp@plt>
    bde4:	cmp	r0, #0
    bde8:	beq	bf14 <rb_init_netio+0x1b8>
    bdec:	ldr	r0, [pc, #380]	; bf70 <rb_init_netio+0x214>
    bdf0:	mov	r1, r4
    bdf4:	add	r0, pc, r0
    bdf8:	bl	4cdc <strcmp@plt>
    bdfc:	cmp	r0, #0
    be00:	beq	bf28 <rb_init_netio+0x1cc>
    be04:	ldr	r0, [pc, #360]	; bf74 <rb_init_netio+0x218>
    be08:	mov	r1, r4
    be0c:	add	r0, pc, r0
    be10:	bl	4cdc <strcmp@plt>
    be14:	cmp	r0, #0
    be18:	beq	bf04 <rb_init_netio+0x1a8>
    be1c:	ldr	r0, [pc, #340]	; bf78 <rb_init_netio+0x21c>
    be20:	mov	r1, r4
    be24:	add	r0, pc, r0
    be28:	bl	4cdc <strcmp@plt>
    be2c:	cmp	r0, #0
    be30:	beq	bf48 <rb_init_netio+0x1ec>
    be34:	ldr	r0, [pc, #320]	; bf7c <rb_init_netio+0x220>
    be38:	mov	r1, r4
    be3c:	add	r0, pc, r0
    be40:	bl	4cdc <strcmp@plt>
    be44:	cmp	r0, #0
    be48:	beq	bf38 <rb_init_netio+0x1dc>
    be4c:	ldr	r0, [pc, #300]	; bf80 <rb_init_netio+0x224>
    be50:	mov	r1, r4
    be54:	add	r0, pc, r0
    be58:	bl	4cdc <strcmp@plt>
    be5c:	cmp	r0, #0
    be60:	beq	bef4 <rb_init_netio+0x198>
    be64:	bl	a7e8 <try_kqueue>
    be68:	cmp	r0, #0
    be6c:	popeq	{r4, pc}
    be70:	bl	a8a8 <try_epoll>
    be74:	cmp	r0, #0
    be78:	popeq	{r4, pc}
    be7c:	bl	a968 <try_ports>
    be80:	cmp	r0, #0
    be84:	popeq	{r4, pc}
    be88:	bl	aa28 <try_devpoll>
    be8c:	cmp	r0, #0
    be90:	popeq	{r4, pc}
    be94:	bl	aac4 <try_sigio>
    be98:	cmp	r0, #0
    be9c:	popeq	{r4, pc}
    bea0:	bl	ab84 <try_poll>
    bea4:	cmp	r0, #0
    bea8:	popeq	{r4, pc}
    beac:	bl	ac20 <try_win32>
    beb0:	cmp	r0, #0
    beb4:	popeq	{r4, pc}
    beb8:	bl	acbc <try_select>
    bebc:	cmp	r0, #0
    bec0:	popeq	{r4, pc}
    bec4:	ldr	r0, [pc, #184]	; bf84 <rb_init_netio+0x228>
    bec8:	add	r0, pc, r0
    becc:	bl	491c <rb_lib_log@plt>
    bed0:	bl	43c4 <abort@plt>
    bed4:	bl	a8a8 <try_epoll>
    bed8:	cmp	r0, #0
    bedc:	bne	be4c <rb_init_netio+0xf0>
    bee0:	pop	{r4, pc}
    bee4:	bl	a7e8 <try_kqueue>
    bee8:	cmp	r0, #0
    beec:	bne	be4c <rb_init_netio+0xf0>
    bef0:	pop	{r4, pc}
    bef4:	bl	ac20 <try_win32>
    bef8:	cmp	r0, #0
    befc:	bne	be64 <rb_init_netio+0x108>
    bf00:	pop	{r4, pc}
    bf04:	bl	aa28 <try_devpoll>
    bf08:	cmp	r0, #0
    bf0c:	bne	be4c <rb_init_netio+0xf0>
    bf10:	pop	{r4, pc}
    bf14:	bl	a968 <try_ports>
    bf18:	cmp	r0, #0
    bf1c:	bne	be4c <rb_init_netio+0xf0>
    bf20:	pop	{r4, pc}
    bf24:	bl	4988 <rb_outofmemory@plt>
    bf28:	bl	ab84 <try_poll>
    bf2c:	cmp	r0, #0
    bf30:	bne	be4c <rb_init_netio+0xf0>
    bf34:	pop	{r4, pc}
    bf38:	bl	acbc <try_select>
    bf3c:	cmp	r0, #0
    bf40:	bne	be4c <rb_init_netio+0xf0>
    bf44:	pop	{r4, pc}
    bf48:	bl	aac4 <try_sigio>
    bf4c:	cmp	r0, #0
    bf50:	bne	be4c <rb_init_netio+0xf0>
    bf54:	pop	{r4, pc}
    bf58:	.word	0x00009d48
    bf5c:	.word	0x0001c278
    bf60:	.word	0x000003c0
    bf64:	.word	0x00009c00
    bf68:	.word	0x00009be0
    bf6c:	.word	0x00009bd8
    bf70:	.word	0x00009bd8
    bf74:	.word	0x00009bb0
    bf78:	.word	0x00009ba0
    bf7c:	.word	0x00009ba0
    bf80:	.word	0x00009b80
    bf84:	.word	0x00009bf8

0000bf88 <rb_setselect>:
    bf88:	ldr	ip, [pc, #20]	; bfa4 <rb_setselect+0x1c>
    bf8c:	push	{lr}		; (str lr, [sp, #-4]!)
    bf90:	add	ip, pc, ip
    bf94:	ldr	lr, [ip, #28]
    bf98:	mov	ip, lr
    bf9c:	pop	{lr}		; (ldr lr, [sp], #4)
    bfa0:	bx	ip
    bfa4:	.word	0x0002ea0c

0000bfa8 <rb_close>:
    bfa8:	push	{r4, r5, r6, r7, r8, lr}
    bfac:	subs	r4, r0, #0
    bfb0:	ldr	r6, [pc, #384]	; c138 <rb_close+0x190>
    bfb4:	add	r6, pc, r6
    bfb8:	popeq	{r4, r5, r6, r7, r8, pc}
    bfbc:	ldrb	r5, [r4, #17]
    bfc0:	ldr	r8, [r4, #12]
    bfc4:	ands	r7, r5, #16
    bfc8:	bne	c118 <rb_close+0x170>
    bfcc:	mov	r3, #0
    bfd0:	mov	r2, r3
    bfd4:	mov	r1, #3
    bfd8:	mov	r0, r4
    bfdc:	bl	44a8 <rb_setselect@plt>
    bfe0:	mov	r3, #0
    bfe4:	mov	r0, r4
    bfe8:	mov	r2, r3
    bfec:	mov	r1, r3
    bff0:	bl	43e8 <rb_settimeout@plt>
    bff4:	ldr	r0, [r4, #52]	; 0x34
    bff8:	cmp	r0, #0
    bffc:	beq	c004 <rb_close+0x5c>
    c000:	bl	46f4 <free@plt>
    c004:	ldr	r0, [r4, #48]	; 0x30
    c008:	cmp	r0, #0
    c00c:	beq	c014 <rb_close+0x6c>
    c010:	bl	46f4 <free@plt>
    c014:	ldr	r0, [r4, #24]
    c018:	cmp	r0, #0
    c01c:	beq	c024 <rb_close+0x7c>
    c020:	bl	46f4 <free@plt>
    c024:	tst	r5, #32
    c028:	bne	c050 <rb_close+0xa8>
    c02c:	ldrb	r3, [r4, #16]
    c030:	tst	r3, #1
    c034:	bne	c064 <rb_close+0xbc>
    c038:	cmp	r7, #0
    c03c:	popeq	{r4, r5, r6, r7, r8, pc}
    c040:	mov	r0, r8
    c044:	mov	r1, #2
    c048:	pop	{r4, r5, r6, r7, r8, lr}
    c04c:	b	4904 <shutdown@plt>
    c050:	mov	r0, r4
    c054:	bl	d41c <rb_ssl_shutdown>
    c058:	ldrb	r3, [r4, #16]
    c05c:	tst	r3, #1
    c060:	beq	c038 <rb_close+0x90>
    c064:	ldr	r1, [r4, #12]
    c068:	ldr	r2, [pc, #204]	; c13c <rb_close+0x194>
    c06c:	ldr	r0, [r4, #8]
    c070:	asr	r3, r1, #24
    c074:	eor	r3, r3, r1, asr #12
    c078:	eor	r3, r3, r1
    c07c:	ldr	r2, [r6, r2]
    c080:	lsl	r3, r3, #20
    c084:	cmp	r0, #0
    c088:	lsr	r3, r3, #20
    c08c:	ldr	ip, [r2]
    c090:	add	r3, r3, r3, lsl #1
    c094:	ldr	r2, [r4, #4]
    c098:	lsl	r3, r3, #2
    c09c:	strne	r2, [r0, #4]
    c0a0:	add	r1, ip, r3
    c0a4:	ldrne	r2, [r4, #4]
    c0a8:	streq	r2, [r1, #4]
    c0ac:	cmp	r2, #0
    c0b0:	strne	r0, [r2, #8]
    c0b4:	ldr	r2, [pc, #132]	; c140 <rb_close+0x198>
    c0b8:	streq	r0, [ip, r3]
    c0bc:	add	r2, pc, r2
    c0c0:	mov	r3, #0
    c0c4:	str	r3, [r4, #4]
    c0c8:	ldr	r3, [r2, #100]	; 0x64
    c0cc:	cmp	r3, #0
    c0d0:	str	r3, [r4, #8]
    c0d4:	strne	r4, [r3, #4]
    c0d8:	beq	c128 <rb_close+0x180>
    c0dc:	ldr	r2, [r1, #8]
    c0e0:	ldr	r3, [pc, #92]	; c144 <rb_close+0x19c>
    c0e4:	sub	r2, r2, #1
    c0e8:	add	r3, pc, r3
    c0ec:	str	r2, [r1, #8]
    c0f0:	ldrb	r1, [r4, #16]
    c0f4:	ldr	r2, [r3, #108]	; 0x6c
    c0f8:	cmp	r7, #0
    c0fc:	bic	r1, r1, #1
    c100:	add	r2, r2, #1
    c104:	str	r4, [r3, #100]	; 0x64
    c108:	strb	r1, [r4, #16]
    c10c:	str	r2, [r3, #108]	; 0x6c
    c110:	popeq	{r4, r5, r6, r7, r8, pc}
    c114:	b	c040 <rb_close+0x98>
    c118:	mov	r1, #0
    c11c:	mov	r0, r8
    c120:	bl	45e0 <listen@plt>
    c124:	b	bfcc <rb_close+0x24>
    c128:	ldr	r3, [r2, #104]	; 0x68
    c12c:	cmp	r3, #0
    c130:	streq	r4, [r2, #104]	; 0x68
    c134:	b	c0dc <rb_close+0x134>
    c138:	.word	0x0001c044
    c13c:	.word	0x000003c0
    c140:	.word	0x0002e8e0
    c144:	.word	0x0002e8b4

0000c148 <rb_select>:
    c148:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c14c:	ldr	r7, [pc, #160]	; c1f4 <rb_select+0xac>
    c150:	add	r7, pc, r7
    c154:	ldr	r3, [r7, #32]
    c158:	blx	r3
    c15c:	ldr	r4, [r7, #100]	; 0x64
    c160:	cmp	r4, #0
    c164:	mov	sl, r0
    c168:	beq	c1ec <rb_select+0xa4>
    c16c:	ldr	r9, [pc, #132]	; c1f8 <rb_select+0xb0>
    c170:	ldr	r5, [r4, #8]
    c174:	add	r9, pc, r9
    c178:	mov	r6, r7
    c17c:	mov	r8, #0
    c180:	b	c18c <rb_select+0x44>
    c184:	mov	r4, r5
    c188:	ldr	r5, [r5, #8]
    c18c:	ldr	fp, [r4]
    c190:	ldr	r3, [r7, #96]	; 0x60
    c194:	ldr	r0, [fp, #12]
    c198:	sub	r3, r3, #1
    c19c:	str	r3, [r7, #96]	; 0x60
    c1a0:	bl	4940 <close@plt>
    c1a4:	ldmib	r4, {r2, r3}
    c1a8:	mov	r1, fp
    c1ac:	ldr	r0, [r6, #92]	; 0x5c
    c1b0:	cmp	r3, #0
    c1b4:	strne	r2, [r3, #4]
    c1b8:	streq	r2, [r7, #104]	; 0x68
    c1bc:	ldr	r2, [r4, #4]
    c1c0:	cmp	r2, #0
    c1c4:	strne	r3, [r2, #8]
    c1c8:	streq	r3, [r9, #100]	; 0x64
    c1cc:	ldr	r3, [r6, #108]	; 0x6c
    c1d0:	str	r8, [r4, #4]
    c1d4:	str	r8, [r4, #8]
    c1d8:	sub	r3, r3, #1
    c1dc:	str	r3, [r6, #108]	; 0x6c
    c1e0:	bl	48c8 <rb_bh_free@plt>
    c1e4:	cmp	r5, #0
    c1e8:	bne	c184 <rb_select+0x3c>
    c1ec:	mov	r0, sl
    c1f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1f4:	.word	0x0002e84c
    c1f8:	.word	0x0002e828

0000c1fc <rb_setup_fd>:
    c1fc:	ldr	r3, [pc, #8]	; c20c <rb_setup_fd+0x10>
    c200:	add	r3, pc, r3
    c204:	ldr	r3, [r3, #36]	; 0x24
    c208:	bx	r3
    c20c:	.word	0x0002e79c

0000c210 <rb_set_nb>:
    c210:	subs	r3, r0, #0
    c214:	beq	c268 <rb_set_nb+0x58>
    c218:	push	{r4, lr}
    c21c:	ldr	r4, [r3, #12]
    c220:	bl	4b2c <rb_setup_fd@plt>
    c224:	cmp	r0, #0
    c228:	popne	{r4, pc}
    c22c:	mov	r2, r0
    c230:	mov	r1, #3
    c234:	mov	r0, r4
    c238:	bl	4c04 <fcntl@plt>
    c23c:	cmn	r0, #1
    c240:	beq	c260 <rb_set_nb+0x50>
    c244:	orr	r2, r0, #2048	; 0x800
    c248:	mov	r1, #4
    c24c:	mov	r0, r4
    c250:	bl	4c04 <fcntl@plt>
    c254:	adds	r0, r0, #1
    c258:	movne	r0, #1
    c25c:	pop	{r4, pc}
    c260:	mov	r0, #0
    c264:	pop	{r4, pc}
    c268:	mov	r0, #0
    c26c:	bx	lr

0000c270 <rb_accept_tryaccept>:
    c270:	ldr	r3, [pc, #440]	; c430 <rb_accept_tryaccept+0x1c0>
    c274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c278:	sub	sp, sp, #180	; 0xb4
    c27c:	add	r3, pc, r3
    c280:	ldr	fp, [pc, #428]	; c434 <rb_accept_tryaccept+0x1c4>
    c284:	str	r3, [sp, #20]
    c288:	ldr	r3, [pc, #424]	; c438 <rb_accept_tryaccept+0x1c8>
    c28c:	add	fp, pc, fp
    c290:	add	r3, pc, r3
    c294:	mov	r4, r0
    c298:	add	r5, sp, #48	; 0x30
    c29c:	add	sl, sp, #28
    c2a0:	mov	r9, #128	; 0x80
    c2a4:	mov	r8, #0
    c2a8:	str	r3, [sp, #12]
    c2ac:	add	r3, sp, #32
    c2b0:	str	r3, [sp, #16]
    c2b4:	mov	r2, #128	; 0x80
    c2b8:	mov	r1, r8
    c2bc:	mov	r0, r5
    c2c0:	bl	4628 <memset@plt>
    c2c4:	mov	r2, sl
    c2c8:	mov	r1, r5
    c2cc:	ldr	r0, [r4, #12]
    c2d0:	str	r9, [sp, #28]
    c2d4:	bl	476c <accept@plt>
    c2d8:	subs	r6, r0, #0
    c2dc:	blt	c3f8 <rb_accept_tryaccept+0x188>
    c2e0:	ldrb	r1, [r4, #17]
    c2e4:	mov	r2, fp
    c2e8:	bic	r1, r1, #127	; 0x7f
    c2ec:	orr	r1, r1, #4
    c2f0:	bl	4a84 <rb_open@plt>
    c2f4:	subs	r7, r0, #0
    c2f8:	beq	c3e0 <rb_accept_tryaccept+0x170>
    c2fc:	bl	461c <rb_set_nb@plt>
    c300:	cmp	r0, #0
    c304:	beq	c418 <rb_accept_tryaccept+0x1a8>
    c308:	ldrh	r3, [sp, #48]	; 0x30
    c30c:	cmp	r3, #10
    c310:	beq	c364 <rb_accept_tryaccept+0xf4>
    c314:	ldr	r3, [r4, #52]	; 0x34
    c318:	ldr	r6, [r3, #136]	; 0x88
    c31c:	cmp	r6, #0
    c320:	beq	c340 <rb_accept_tryaccept+0xd0>
    c324:	ldr	r3, [r3, #140]	; 0x8c
    c328:	ldr	r2, [sp, #28]
    c32c:	mov	r1, r5
    c330:	mov	r0, r7
    c334:	blx	r6
    c338:	cmp	r0, #0
    c33c:	beq	c2b4 <rb_accept_tryaccept+0x44>
    c340:	ldrb	r3, [r4, #17]
    c344:	tst	r3, #32
    c348:	beq	c3b8 <rb_accept_tryaccept+0x148>
    c34c:	mov	r1, r7
    c350:	ldr	r3, [sp, #28]
    c354:	mov	r2, r5
    c358:	mov	r0, r4
    c35c:	bl	ddf8 <rb_ssl_accept_setup>
    c360:	b	c2b4 <rb_accept_tryaccept+0x44>
    c364:	ldr	r3, [sp, #56]	; 0x38
    c368:	cmp	r3, #0
    c36c:	bne	c314 <rb_accept_tryaccept+0xa4>
    c370:	ldr	r3, [sp, #60]	; 0x3c
    c374:	cmp	r3, #0
    c378:	bne	c314 <rb_accept_tryaccept+0xa4>
    c37c:	ldr	r2, [sp, #64]	; 0x40
    c380:	cmn	r2, #65536	; 0x10000
    c384:	bne	c314 <rb_accept_tryaccept+0xa4>
    c388:	ldrh	r0, [sp, #50]	; 0x32
    c38c:	ldr	ip, [sp, #16]
    c390:	ldr	r1, [sp, #68]	; 0x44
    c394:	mov	r2, #2
    c398:	str	r3, [ip, #8]
    c39c:	str	r3, [ip, #12]
    c3a0:	strh	r0, [sp, #34]	; 0x22
    c3a4:	str	r1, [sp, #36]	; 0x24
    c3a8:	strh	r2, [sp, #32]
    c3ac:	ldm	ip, {r0, r1, r2, r3}
    c3b0:	stm	r5, {r0, r1, r2, r3}
    c3b4:	b	c314 <rb_accept_tryaccept+0xa4>
    c3b8:	ldr	r1, [r4, #52]	; 0x34
    c3bc:	ldr	r3, [sp, #28]
    c3c0:	mov	r0, r7
    c3c4:	ldr	r2, [r1, #140]	; 0x8c
    c3c8:	str	r2, [sp]
    c3cc:	mov	r2, r5
    c3d0:	ldr	r6, [r1, #132]	; 0x84
    c3d4:	mov	r1, r8
    c3d8:	blx	r6
    c3dc:	b	c2b4 <rb_accept_tryaccept+0x44>
    c3e0:	ldr	r0, [sp, #12]
    c3e4:	mov	r1, r6
    c3e8:	bl	491c <rb_lib_log@plt>
    c3ec:	mov	r0, r6
    c3f0:	bl	4940 <close@plt>
    c3f4:	b	c2b4 <rb_accept_tryaccept+0x44>
    c3f8:	ldr	r2, [pc, #60]	; c43c <rb_accept_tryaccept+0x1cc>
    c3fc:	mov	r0, r4
    c400:	mov	r3, #0
    c404:	add	r2, pc, r2
    c408:	mov	r1, #1
    c40c:	bl	44a8 <rb_setselect@plt>
    c410:	add	sp, sp, #180	; 0xb4
    c414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c418:	ldr	r0, [sp, #20]
    c41c:	ldr	r1, [r7, #12]
    c420:	bl	491c <rb_lib_log@plt>
    c424:	mov	r0, r7
    c428:	bl	4868 <rb_close@plt>
    c42c:	b	c308 <rb_accept_tryaccept+0x98>
    c430:	.word	0x000098dc
    c434:	.word	0x00009870
    c438:	.word	0x00009880
    c43c:	.word	0xfffffe64

0000c440 <rb_accept_tcp>:
    c440:	push	{r4, r5, r6, r7, r8, lr}
    c444:	subs	r4, r0, #0
    c448:	popeq	{r4, r5, r6, r7, r8, pc}
    c44c:	mov	r5, r1
    c450:	mov	r0, #1
    c454:	mov	r1, #144	; 0x90
    c458:	mov	r6, r3
    c45c:	mov	r7, r2
    c460:	bl	45ec <calloc@plt>
    c464:	cmp	r0, #0
    c468:	beq	c48c <rb_accept_tcp+0x4c>
    c46c:	str	r0, [r4, #52]	; 0x34
    c470:	str	r7, [r0, #132]	; 0x84
    c474:	str	r6, [r0, #140]	; 0x8c
    c478:	str	r5, [r0, #136]	; 0x88
    c47c:	mov	r1, #0
    c480:	mov	r0, r4
    c484:	pop	{r4, r5, r6, r7, r8, lr}
    c488:	b	c270 <rb_accept_tryaccept>
    c48c:	bl	4988 <rb_outofmemory@plt>

0000c490 <rb_socketpair>:
    c490:	ldr	ip, [pc, #332]	; c5e4 <rb_socketpair+0x154>
    c494:	push	{r4, r5, r6, r7, lr}
    c498:	add	ip, pc, ip
    c49c:	ldr	r4, [pc, #324]	; c5e8 <rb_socketpair+0x158>
    c4a0:	ldr	lr, [pc, #324]	; c5ec <rb_socketpair+0x15c>
    c4a4:	mov	r5, r3
    c4a8:	mov	r3, ip
    c4ac:	ldr	ip, [ip, r4]
    c4b0:	add	lr, pc, lr
    c4b4:	sub	sp, sp, #12
    c4b8:	ldr	lr, [lr, #96]	; 0x60
    c4bc:	ldr	ip, [ip]
    c4c0:	ldr	r4, [sp, #32]
    c4c4:	cmp	lr, ip
    c4c8:	bge	c564 <rb_socketpair+0xd4>
    c4cc:	mov	r3, sp
    c4d0:	bl	4568 <socketpair@plt>
    c4d4:	subs	r6, r0, #0
    c4d8:	bne	c554 <rb_socketpair+0xc4>
    c4dc:	ldr	r2, [sp, #36]	; 0x24
    c4e0:	mov	r1, #4
    c4e4:	ldr	r0, [sp]
    c4e8:	bl	4a84 <rb_open@plt>
    c4ec:	ldr	r2, [sp, #36]	; 0x24
    c4f0:	mov	r1, #4
    c4f4:	str	r0, [r5]
    c4f8:	ldr	r0, [sp, #4]
    c4fc:	bl	4a84 <rb_open@plt>
    c500:	str	r0, [r4]
    c504:	ldr	r2, [r5]
    c508:	mov	r3, r0
    c50c:	cmp	r2, #0
    c510:	beq	c548 <rb_socketpair+0xb8>
    c514:	cmp	r3, #0
    c518:	mov	r0, r2
    c51c:	beq	c550 <rb_socketpair+0xc0>
    c520:	bl	461c <rb_set_nb@plt>
    c524:	cmp	r0, #0
    c528:	beq	c578 <rb_socketpair+0xe8>
    c52c:	ldr	r0, [r4]
    c530:	bl	461c <rb_set_nb@plt>
    c534:	cmp	r0, #0
    c538:	beq	c5bc <rb_socketpair+0x12c>
    c53c:	mov	r0, r6
    c540:	add	sp, sp, #12
    c544:	pop	{r4, r5, r6, r7, pc}
    c548:	cmp	r0, #0
    c54c:	beq	c554 <rb_socketpair+0xc4>
    c550:	bl	4868 <rb_close@plt>
    c554:	mvn	r6, #0
    c558:	mov	r0, r6
    c55c:	add	sp, sp, #12
    c560:	pop	{r4, r5, r6, r7, pc}
    c564:	bl	4ce8 <__errno_location@plt>
    c568:	mov	r3, #23
    c56c:	mvn	r6, #0
    c570:	str	r3, [r0]
    c574:	b	c53c <rb_socketpair+0xac>
    c578:	bl	4ce8 <__errno_location@plt>
    c57c:	ldr	r7, [sp]
    c580:	mvn	r6, #0
    c584:	ldr	r0, [r0]
    c588:	bl	43a0 <strerror@plt>
    c58c:	mov	r1, r7
    c590:	mov	r2, r0
    c594:	ldr	r0, [pc, #84]	; c5f0 <rb_socketpair+0x160>
    c598:	add	r0, pc, r0
    c59c:	bl	491c <rb_lib_log@plt>
    c5a0:	ldr	r0, [r5]
    c5a4:	bl	4868 <rb_close@plt>
    c5a8:	ldr	r0, [r4]
    c5ac:	bl	4868 <rb_close@plt>
    c5b0:	mov	r0, r6
    c5b4:	add	sp, sp, #12
    c5b8:	pop	{r4, r5, r6, r7, pc}
    c5bc:	bl	4ce8 <__errno_location@plt>
    c5c0:	ldr	r7, [sp, #4]
    c5c4:	mvn	r6, #0
    c5c8:	ldr	r0, [r0]
    c5cc:	bl	43a0 <strerror@plt>
    c5d0:	mov	r1, r7
    c5d4:	mov	r2, r0
    c5d8:	ldr	r0, [pc, #20]	; c5f4 <rb_socketpair+0x164>
    c5dc:	add	r0, pc, r0
    c5e0:	b	c59c <rb_socketpair+0x10c>
    c5e4:	.word	0x0001bb60
    c5e8:	.word	0x000003a0
    c5ec:	.word	0x0002e4ec
    c5f0:	.word	0x000095ec
    c5f4:	.word	0x000095a8

0000c5f8 <rb_pipe>:
    c5f8:	ldr	r3, [pc, #284]	; c71c <rb_pipe+0x124>
    c5fc:	push	{r4, r5, r6, lr}
    c600:	add	r3, pc, r3
    c604:	ldr	lr, [pc, #276]	; c720 <rb_pipe+0x128>
    c608:	ldr	ip, [pc, #276]	; c724 <rb_pipe+0x12c>
    c60c:	mov	r4, r0
    c610:	ldr	lr, [r3, lr]
    c614:	add	ip, pc, ip
    c618:	mov	r5, r1
    c61c:	ldr	r0, [ip, #96]	; 0x60
    c620:	ldr	r1, [lr]
    c624:	sub	sp, sp, #8
    c628:	cmp	r0, r1
    c62c:	bge	c6a0 <rb_pipe+0xa8>
    c630:	mov	r0, sp
    c634:	mov	r6, r2
    c638:	bl	4c88 <pipe@plt>
    c63c:	cmn	r0, #1
    c640:	mov	r3, r0
    c644:	beq	c694 <rb_pipe+0x9c>
    c648:	mov	r2, r6
    c64c:	mov	r1, #8
    c650:	ldr	r0, [sp]
    c654:	bl	4a84 <rb_open@plt>
    c658:	mov	r2, r6
    c65c:	mov	r1, #8
    c660:	str	r0, [r4]
    c664:	ldr	r0, [sp, #4]
    c668:	bl	4a84 <rb_open@plt>
    c66c:	str	r0, [r5]
    c670:	ldr	r0, [r4]
    c674:	bl	461c <rb_set_nb@plt>
    c678:	cmp	r0, #0
    c67c:	beq	c6b4 <rb_pipe+0xbc>
    c680:	ldr	r0, [r5]
    c684:	bl	461c <rb_set_nb@plt>
    c688:	cmp	r0, #0
    c68c:	movne	r3, #0
    c690:	beq	c6f8 <rb_pipe+0x100>
    c694:	mov	r0, r3
    c698:	add	sp, sp, #8
    c69c:	pop	{r4, r5, r6, pc}
    c6a0:	bl	4ce8 <__errno_location@plt>
    c6a4:	mov	r2, #23
    c6a8:	mvn	r3, #0
    c6ac:	str	r2, [r0]
    c6b0:	b	c694 <rb_pipe+0x9c>
    c6b4:	bl	4ce8 <__errno_location@plt>
    c6b8:	ldr	r6, [sp]
    c6bc:	ldr	r0, [r0]
    c6c0:	bl	43a0 <strerror@plt>
    c6c4:	mov	r1, r6
    c6c8:	mov	r2, r0
    c6cc:	ldr	r0, [pc, #84]	; c728 <rb_pipe+0x130>
    c6d0:	add	r0, pc, r0
    c6d4:	bl	491c <rb_lib_log@plt>
    c6d8:	ldr	r0, [r4]
    c6dc:	bl	4868 <rb_close@plt>
    c6e0:	ldr	r0, [r5]
    c6e4:	bl	4868 <rb_close@plt>
    c6e8:	mvn	r3, #0
    c6ec:	mov	r0, r3
    c6f0:	add	sp, sp, #8
    c6f4:	pop	{r4, r5, r6, pc}
    c6f8:	bl	4ce8 <__errno_location@plt>
    c6fc:	ldr	r6, [sp, #4]
    c700:	ldr	r0, [r0]
    c704:	bl	43a0 <strerror@plt>
    c708:	mov	r1, r6
    c70c:	mov	r2, r0
    c710:	ldr	r0, [pc, #20]	; c72c <rb_pipe+0x134>
    c714:	add	r0, pc, r0
    c718:	b	c6d4 <rb_pipe+0xdc>
    c71c:	.word	0x0001b9f8
    c720:	.word	0x000003a0
    c724:	.word	0x0002e388
    c728:	.word	0x000094b4
    c72c:	.word	0x00009470

0000c730 <rb_socket>:
    c730:	ldr	ip, [pc, #344]	; c890 <rb_socket+0x160>
    c734:	push	{r4, r5, r6, r7, lr}
    c738:	add	ip, pc, ip
    c73c:	ldr	r4, [pc, #336]	; c894 <rb_socket+0x164>
    c740:	ldr	lr, [pc, #336]	; c898 <rb_socket+0x168>
    c744:	mov	r5, r3
    c748:	ldr	r4, [ip, r4]
    c74c:	add	lr, pc, lr
    c750:	mov	r3, ip
    c754:	ldr	ip, [lr, #96]	; 0x60
    c758:	ldr	r3, [r4]
    c75c:	sub	sp, sp, #20
    c760:	cmp	ip, r3
    c764:	bge	c810 <rb_socket+0xe0>
    c768:	mov	r7, r0
    c76c:	bl	4790 <socket@plt>
    c770:	subs	r6, r0, #0
    c774:	blt	c82c <rb_socket+0xfc>
    c778:	cmp	r7, #10
    c77c:	beq	c7b0 <rb_socket+0x80>
    c780:	mov	r2, r5
    c784:	mov	r1, #4
    c788:	mov	r0, r6
    c78c:	bl	4a84 <rb_open@plt>
    c790:	subs	r4, r0, #0
    c794:	beq	c864 <rb_socket+0x134>
    c798:	bl	461c <rb_set_nb@plt>
    c79c:	subs	r5, r0, #0
    c7a0:	beq	c834 <rb_socket+0x104>
    c7a4:	mov	r0, r4
    c7a8:	add	sp, sp, #20
    c7ac:	pop	{r4, r5, r6, r7, pc}
    c7b0:	add	r3, sp, #16
    c7b4:	mov	r1, #1
    c7b8:	mov	r2, #4
    c7bc:	str	r1, [r3, #-4]!
    c7c0:	str	r2, [sp]
    c7c4:	mov	r1, #41	; 0x29
    c7c8:	mov	r2, #26
    c7cc:	bl	4ca0 <setsockopt@plt>
    c7d0:	cmn	r0, #1
    c7d4:	bne	c780 <rb_socket+0x50>
    c7d8:	bl	4ce8 <__errno_location@plt>
    c7dc:	ldr	r5, [sp, #12]
    c7e0:	mov	r4, #0
    c7e4:	ldr	r0, [r0]
    c7e8:	bl	43a0 <strerror@plt>
    c7ec:	mov	r2, r6
    c7f0:	mov	r1, r5
    c7f4:	mov	r3, r0
    c7f8:	ldr	r0, [pc, #156]	; c89c <rb_socket+0x16c>
    c7fc:	add	r0, pc, r0
    c800:	bl	491c <rb_lib_log@plt>
    c804:	mov	r0, r6
    c808:	bl	4940 <close@plt>
    c80c:	b	c7a4 <rb_socket+0x74>
    c810:	bl	4ce8 <__errno_location@plt>
    c814:	mov	r4, #0
    c818:	mov	r3, #23
    c81c:	str	r3, [r0]
    c820:	mov	r0, r4
    c824:	add	sp, sp, #20
    c828:	pop	{r4, r5, r6, r7, pc}
    c82c:	mov	r4, #0
    c830:	b	c7a4 <rb_socket+0x74>
    c834:	bl	4ce8 <__errno_location@plt>
    c838:	ldr	r0, [r0]
    c83c:	bl	43a0 <strerror@plt>
    c840:	mov	r1, r6
    c844:	mov	r2, r0
    c848:	ldr	r0, [pc, #80]	; c8a0 <rb_socket+0x170>
    c84c:	add	r0, pc, r0
    c850:	bl	491c <rb_lib_log@plt>
    c854:	mov	r0, r4
    c858:	bl	4868 <rb_close@plt>
    c85c:	mov	r4, r5
    c860:	b	c7a4 <rb_socket+0x74>
    c864:	bl	4ce8 <__errno_location@plt>
    c868:	ldr	r0, [r0]
    c86c:	bl	43a0 <strerror@plt>
    c870:	mov	r1, r6
    c874:	mov	r2, r0
    c878:	ldr	r0, [pc, #36]	; c8a4 <rb_socket+0x174>
    c87c:	add	r0, pc, r0
    c880:	bl	491c <rb_lib_log@plt>
    c884:	mov	r0, r6
    c888:	bl	4940 <close@plt>
    c88c:	b	c7a4 <rb_socket+0x74>
    c890:	.word	0x0001b8c0
    c894:	.word	0x000003a0
    c898:	.word	0x0002e250
    c89c:	.word	0x000093b8
    c8a0:	.word	0x00009338
    c8a4:	.word	0x00009378

0000c8a8 <rb_ignore_errno>:
    c8a8:	cmp	r0, #85	; 0x55
    c8ac:	beq	c8dc <rb_ignore_errno+0x34>
    c8b0:	bgt	c8cc <rb_ignore_errno+0x24>
    c8b4:	cmp	r0, #4
    c8b8:	beq	c8dc <rb_ignore_errno+0x34>
    c8bc:	cmp	r0, #11
    c8c0:	beq	c8dc <rb_ignore_errno+0x34>
    c8c4:	mov	r0, #0
    c8c8:	bx	lr
    c8cc:	cmp	r0, #105	; 0x69
    c8d0:	beq	c8dc <rb_ignore_errno+0x34>
    c8d4:	cmp	r0, #115	; 0x73
    c8d8:	bne	c8c4 <rb_ignore_errno+0x1c>
    c8dc:	mov	r0, #1
    c8e0:	bx	lr

0000c8e4 <rb_connect_tcp>:
    c8e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c8e8:	subs	r4, r0, #0
    c8ec:	ldr	r9, [sp, #32]
    c8f0:	ldr	r8, [sp, #36]	; 0x24
    c8f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    c8f8:	mov	r5, r1
    c8fc:	mov	r0, #1
    c900:	mov	r1, #268	; 0x10c
    c904:	mov	r7, r3
    c908:	mov	r6, r2
    c90c:	bl	45ec <calloc@plt>
    c910:	cmp	r0, #0
    c914:	beq	c9f4 <rb_connect_tcp+0x110>
    c918:	str	r0, [r4, #48]	; 0x30
    c91c:	str	r7, [r0, #260]	; 0x104
    c920:	str	r9, [r0, #264]	; 0x108
    c924:	mov	r1, r5
    c928:	add	r0, r0, #128	; 0x80
    c92c:	mov	r2, #128	; 0x80
    c930:	bl	4808 <memcpy@plt>
    c934:	cmp	r6, #0
    c938:	beq	c960 <rb_connect_tcp+0x7c>
    c93c:	ldrh	r2, [r6]
    c940:	mov	r1, r6
    c944:	ldr	r0, [r4, #12]
    c948:	cmp	r2, #2
    c94c:	moveq	r2, #16
    c950:	movne	r2, #28
    c954:	bl	4910 <bind@plt>
    c958:	cmp	r0, #0
    c95c:	blt	c9f8 <rb_connect_tcp+0x114>
    c960:	ldr	r2, [pc, #160]	; ca08 <rb_connect_tcp+0x124>
    c964:	mov	r1, r8
    c968:	mov	r3, #0
    c96c:	add	r2, pc, r2
    c970:	mov	r0, r4
    c974:	bl	43e8 <rb_settimeout@plt>
    c978:	ldr	r3, [r4, #48]	; 0x30
    c97c:	ldr	r0, [r4, #12]
    c980:	add	r1, r3, #128	; 0x80
    c984:	ldrh	r2, [r3, #128]	; 0x80
    c988:	cmp	r2, #2
    c98c:	moveq	r2, #16
    c990:	movne	r2, #28
    c994:	bl	43d0 <connect@plt>
    c998:	cmp	r0, #0
    c99c:	blt	c9b0 <rb_connect_tcp+0xcc>
    c9a0:	mov	r0, r4
    c9a4:	mov	r1, #0
    c9a8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9ac:	b	af90 <rb_connect_callback>
    c9b0:	bl	4ce8 <__errno_location@plt>
    c9b4:	ldr	r0, [r0]
    c9b8:	cmp	r0, #106	; 0x6a
    c9bc:	beq	c9a0 <rb_connect_tcp+0xbc>
    c9c0:	bl	43dc <rb_ignore_errno@plt>
    c9c4:	cmp	r0, #0
    c9c8:	mov	r0, r4
    c9cc:	beq	c9e8 <rb_connect_tcp+0x104>
    c9d0:	ldr	r2, [pc, #52]	; ca0c <rb_connect_tcp+0x128>
    c9d4:	mov	r3, #0
    c9d8:	add	r2, pc, r2
    c9dc:	mov	r1, #2
    c9e0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9e4:	b	44a8 <rb_setselect@plt>
    c9e8:	mov	r1, #4
    c9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9f0:	b	af90 <rb_connect_callback>
    c9f4:	bl	4988 <rb_outofmemory@plt>
    c9f8:	mov	r0, r4
    c9fc:	mov	r1, #1
    ca00:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    ca04:	b	af90 <rb_connect_callback>
    ca08:	.word	0xffffe720
    ca0c:	.word	0xffffe620

0000ca10 <rb_recv_fd_buf>:
    ca10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca14:	add	fp, sp, #32
    ca18:	sub	sp, sp, #156	; 0x9c
    ca1c:	ldr	r7, [fp, #4]
    ca20:	mov	r4, #0
    ca24:	str	r2, [fp, #-156]	; 0xffffff64
    ca28:	lsl	ip, r7, #2
    ca2c:	add	lr, ip, #26
    ca30:	bic	lr, lr, #7
    ca34:	sub	sp, sp, lr
    ca38:	add	ip, ip, #12
    ca3c:	mov	lr, #1
    ca40:	sub	r2, fp, #160	; 0xa0
    ca44:	mov	r5, r3
    ca48:	str	r1, [fp, #-160]	; 0xffffff60
    ca4c:	str	ip, [fp, #-132]	; 0xffffff7c
    ca50:	str	r2, [fp, #-144]	; 0xffffff70
    ca54:	str	lr, [fp, #-140]	; 0xffffff74
    ca58:	str	sp, [fp, #-136]	; 0xffffff78
    ca5c:	str	r4, [fp, #-152]	; 0xffffff68
    ca60:	str	r4, [fp, #-148]	; 0xffffff6c
    ca64:	str	r4, [fp, #-128]	; 0xffffff80
    ca68:	bl	44e4 <rb_get_fd@plt>
    ca6c:	mov	r2, r4
    ca70:	sub	r1, fp, #152	; 0x98
    ca74:	bl	4b38 <recvmsg@plt>
    ca78:	subs	r3, r0, #0
    ca7c:	str	r3, [fp, #-168]	; 0xffffff58
    ca80:	ble	cb7c <rb_recv_fd_buf+0x16c>
    ca84:	ldr	r3, [fp, #-132]	; 0xffffff7c
    ca88:	cmp	r3, r4
    ca8c:	beq	cb74 <rb_recv_fd_buf+0x164>
    ca90:	ldr	r4, [fp, #-136]	; 0xffffff78
    ca94:	cmp	r4, #0
    ca98:	cmpne	r3, #11
    ca9c:	bls	cb74 <rb_recv_fd_buf+0x164>
    caa0:	ldr	r6, [r4]
    caa4:	add	r4, r4, #12
    caa8:	sub	r6, r6, #12
    caac:	lsr	r6, r6, #2
    cab0:	cmp	r6, r7
    cab4:	movge	r6, r7
    cab8:	cmp	r6, #0
    cabc:	ble	cb7c <rb_recv_fd_buf+0x16c>
    cac0:	ldr	r3, [pc, #216]	; cba0 <rb_recv_fd_buf+0x190>
    cac4:	ldr	r7, [pc, #216]	; cba4 <rb_recv_fd_buf+0x194>
    cac8:	add	r3, pc, r3
    cacc:	str	r3, [fp, #-176]	; 0xffffff50
    cad0:	ldr	r3, [pc, #208]	; cba8 <rb_recv_fd_buf+0x198>
    cad4:	add	r6, r4, r6, lsl #2
    cad8:	add	r3, pc, r3
    cadc:	str	r3, [fp, #-180]	; 0xffffff4c
    cae0:	ldr	r3, [pc, #196]	; cbac <rb_recv_fd_buf+0x19c>
    cae4:	sub	r5, r5, #4
    cae8:	add	r3, pc, r3
    caec:	str	r3, [fp, #-172]	; 0xffffff54
    caf0:	ldr	r3, [pc, #184]	; cbb0 <rb_recv_fd_buf+0x1a0>
    caf4:	sub	r9, fp, #124	; 0x7c
    caf8:	add	r3, pc, r3
    cafc:	mov	r8, #3
    cb00:	add	r7, pc, r7
    cb04:	str	r3, [fp, #-184]	; 0xffffff48
    cb08:	b	cb34 <rb_recv_fd_buf+0x124>
    cb0c:	cmp	r0, #4096	; 0x1000
    cb10:	ldr	r2, [fp, #-172]	; 0xffffff54
    cb14:	beq	cb88 <rb_recv_fd_buf+0x178>
    cb18:	cmp	r0, #32768	; 0x8000
    cb1c:	beq	cb94 <rb_recv_fd_buf+0x184>
    cb20:	mov	r0, sl
    cb24:	bl	4a84 <rb_open@plt>
    cb28:	cmp	r4, r6
    cb2c:	str	r0, [r5, #4]!
    cb30:	beq	cb7c <rb_recv_fd_buf+0x16c>
    cb34:	ldr	sl, [r4], #4
    cb38:	mov	r2, r9
    cb3c:	mov	r1, sl
    cb40:	mov	r0, r8
    cb44:	bl	4b5c <__fxstat@plt>
    cb48:	mov	r2, r7
    cb4c:	mov	r1, #64	; 0x40
    cb50:	cmp	r0, #0
    cb54:	bne	cb20 <rb_recv_fd_buf+0x110>
    cb58:	ldr	r0, [fp, #-108]	; 0xffffff94
    cb5c:	and	r0, r0, #61440	; 0xf000
    cb60:	cmp	r0, #49152	; 0xc000
    cb64:	bne	cb0c <rb_recv_fd_buf+0xfc>
    cb68:	ldr	r2, [fp, #-176]	; 0xffffff50
    cb6c:	mov	r1, #4
    cb70:	b	cb20 <rb_recv_fd_buf+0x110>
    cb74:	mov	r3, #0
    cb78:	str	r3, [r5]
    cb7c:	ldr	r0, [fp, #-168]	; 0xffffff58
    cb80:	sub	sp, fp, #32
    cb84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cb88:	ldr	r2, [fp, #-180]	; 0xffffff4c
    cb8c:	mov	r1, #8
    cb90:	b	cb20 <rb_recv_fd_buf+0x110>
    cb94:	ldr	r2, [fp, #-184]	; 0xffffff48
    cb98:	mov	r1, #2
    cb9c:	b	cb20 <rb_recv_fd_buf+0x110>
    cba0:	.word	0x00009178
    cba4:	.word	0x00009130
    cba8:	.word	0x00009178
    cbac:	.word	0x00009148
    cbb0:	.word	0x00009164

0000cbb4 <rb_send_fd_buf>:
    cbb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbb8:	add	fp, sp, #32
    cbbc:	sub	sp, sp, #52	; 0x34
    cbc0:	ldr	ip, [fp, #4]
    cbc4:	mov	r6, r2
    cbc8:	cmp	ip, #0
    cbcc:	subeq	r3, fp, #73	; 0x49
    cbd0:	moveq	r2, #1
    cbd4:	mov	r4, #0
    cbd8:	streq	r3, [fp, #-72]	; 0xffffffb8
    cbdc:	strne	r3, [fp, #-72]	; 0xffffffb8
    cbe0:	mov	lr, #48	; 0x30
    cbe4:	mov	r8, r0
    cbe8:	streq	r2, [fp, #-68]	; 0xffffffbc
    cbec:	strne	ip, [fp, #-68]	; 0xffffffbc
    cbf0:	mov	r0, #1
    cbf4:	sub	r3, fp, #72	; 0x48
    cbf8:	cmp	r6, #0
    cbfc:	strb	lr, [fp, #-73]	; 0xffffffb7
    cc00:	sub	r7, fp, #64	; 0x40
    cc04:	str	r3, [fp, #-56]	; 0xffffffc8
    cc08:	str	r0, [fp, #-52]	; 0xffffffcc
    cc0c:	str	r4, [fp, #-64]	; 0xffffffc0
    cc10:	str	r4, [fp, #-60]	; 0xffffffc4
    cc14:	str	r4, [fp, #-40]	; 0xffffffd8
    cc18:	str	r4, [fp, #-48]	; 0xffffffd0
    cc1c:	str	r4, [fp, #-44]	; 0xffffffd4
    cc20:	ble	ccb0 <rb_send_fd_buf+0xfc>
    cc24:	add	r3, r6, r0
    cc28:	str	sp, [fp, #-80]	; 0xffffffb0
    cc2c:	lsl	r3, r3, #2
    cc30:	add	ip, r3, #15
    cc34:	add	r2, r3, #8
    cc38:	bic	ip, ip, #7
    cc3c:	sub	sp, sp, ip
    cc40:	cmp	r2, #11
    cc44:	str	r2, [fp, #-44]	; 0xffffffd4
    cc48:	str	sp, [fp, #-48]	; 0xffffffd0
    cc4c:	mov	sl, sp
    cc50:	bls	cca8 <rb_send_fd_buf+0xf4>
    cc54:	mov	r5, sp
    cc58:	sub	r9, r1, #4
    cc5c:	str	r0, [sp, #4]
    cc60:	str	r0, [sp, #8]
    cc64:	str	r2, [r5], #8
    cc68:	ldr	r0, [r9, #4]!
    cc6c:	bl	44e4 <rb_get_fd@plt>
    cc70:	add	r4, r4, #1
    cc74:	cmp	r6, r4
    cc78:	str	r0, [r5, #4]!
    cc7c:	bne	cc68 <rb_send_fd_buf+0xb4>
    cc80:	ldr	r3, [sl]
    cc84:	mov	r0, r8
    cc88:	str	r3, [fp, #-44]	; 0xffffffd4
    cc8c:	bl	44e4 <rb_get_fd@plt>
    cc90:	mov	r1, r7
    cc94:	mov	r2, #16384	; 0x4000
    cc98:	bl	4700 <sendmsg@plt>
    cc9c:	ldr	sp, [fp, #-80]	; 0xffffffb0
    cca0:	sub	sp, fp, #32
    cca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cca8:	str	r4, [r4, #4]
    ccac:	udf	#0
    ccb0:	mov	r0, r8
    ccb4:	bl	44e4 <rb_get_fd@plt>
    ccb8:	mov	r1, r7
    ccbc:	mov	r2, #16384	; 0x4000
    ccc0:	bl	4700 <sendmsg@plt>
    ccc4:	sub	sp, fp, #32
    ccc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cccc <rb_ipv4_from_ipv6>:
    cccc:	push	{r4, r5, r6, lr}
    ccd0:	mov	r5, r1
    ccd4:	ldr	r1, [pc, #132]	; cd60 <rb_ipv4_from_ipv6+0x94>
    ccd8:	add	r6, r0, #8
    ccdc:	mov	r4, r0
    cce0:	mov	r2, #2
    cce4:	mov	r0, r6
    cce8:	add	r1, pc, r1
    ccec:	bl	4454 <memcmp@plt>
    ccf0:	cmp	r0, #0
    ccf4:	ldreq	r3, [r4, #10]
    ccf8:	streq	r3, [r5, #4]
    ccfc:	beq	cd40 <rb_ipv4_from_ipv6+0x74>
    cd00:	ldr	r1, [pc, #92]	; cd64 <rb_ipv4_from_ipv6+0x98>
    cd04:	mov	r0, r6
    cd08:	add	r1, pc, r1
    cd0c:	add	r1, r1, #20
    cd10:	mov	r2, #4
    cd14:	bl	4454 <memcmp@plt>
    cd18:	cmp	r0, #0
    cd1c:	bne	cd58 <rb_ipv4_from_ipv6+0x8c>
    cd20:	add	r2, r4, #20
    cd24:	add	r1, r5, #3
    cd28:	add	r4, r4, #24
    cd2c:	ldrb	r3, [r2], #1
    cd30:	mvn	r3, r3
    cd34:	cmp	r2, r4
    cd38:	strb	r3, [r1, #1]!
    cd3c:	bne	cd2c <rb_ipv4_from_ipv6+0x60>
    cd40:	mov	r2, #2
    cd44:	mov	r3, #0
    cd48:	strh	r2, [r5]
    cd4c:	strh	r3, [r5, #2]
    cd50:	mov	r0, #1
    cd54:	pop	{r4, r5, r6, pc}
    cd58:	mov	r0, #0
    cd5c:	pop	{r4, r5, r6, pc}
    cd60:	.word	0x00008f80
    cd64:	.word	0x00008c80

0000cd68 <verify_accept_all_cb>:
    cd68:	mov	r0, #1
    cd6c:	bx	lr

0000cd70 <rb_ssl_timeout_cb>:
    cd70:	ldr	ip, [r0, #52]	; 0x34
    cd74:	push	{r4, lr}
    cd78:	sub	sp, sp, #8
    cd7c:	ldr	lr, [ip, #140]	; 0x8c
    cd80:	mov	r3, #0
    cd84:	str	lr, [sp]
    cd88:	mov	r2, r3
    cd8c:	mov	r1, #3
    cd90:	ldr	r4, [ip, #132]	; 0x84
    cd94:	blx	r4
    cd98:	add	sp, sp, #8
    cd9c:	pop	{r4, pc}

0000cda0 <make_certfp>:
    cda0:	push	{r4, r5, r6, r7, lr}
    cda4:	cmp	r2, #2
    cda8:	ldr	r5, [pc, #348]	; cf0c <make_certfp+0x16c>
    cdac:	sub	sp, sp, #20
    cdb0:	mov	r4, r0
    cdb4:	mov	r6, r1
    cdb8:	add	r5, pc, r5
    cdbc:	beq	ceec <make_certfp+0x14c>
    cdc0:	bgt	cdf4 <make_certfp+0x54>
    cdc4:	cmp	r2, #0
    cdc8:	beq	cecc <make_certfp+0x12c>
    cdcc:	cmp	r2, #1
    cdd0:	bne	cea4 <make_certfp+0x104>
    cdd4:	mov	r3, #32
    cdd8:	str	r3, [sp, #12]
    cddc:	bl	4bd4 <EVP_sha256@plt>
    cde0:	ldr	r3, [pc, #296]	; cf10 <make_certfp+0x170>
    cde4:	mov	r2, r4
    cde8:	mov	r7, r0
    cdec:	ldr	r0, [r5, r3]
    cdf0:	b	ce30 <make_certfp+0x90>
    cdf4:	ldr	r3, [pc, #280]	; cf14 <make_certfp+0x174>
    cdf8:	cmp	r2, r3
    cdfc:	beq	cebc <make_certfp+0x11c>
    ce00:	add	r3, r3, #1
    ce04:	cmp	r2, r3
    ce08:	bne	cea4 <make_certfp+0x104>
    ce0c:	mov	r3, #64	; 0x40
    ce10:	str	r3, [sp, #12]
    ce14:	bl	4ba4 <EVP_sha512@plt>
    ce18:	mov	r7, r0
    ce1c:	mov	r0, r4
    ce20:	bl	4538 <X509_get_X509_PUBKEY@plt>
    ce24:	ldr	r3, [pc, #236]	; cf18 <make_certfp+0x178>
    ce28:	mov	r2, r0
    ce2c:	ldr	r0, [r5, r3]
    ce30:	add	ip, sp, #12
    ce34:	mov	r3, r6
    ce38:	mov	r1, r7
    ce3c:	str	ip, [sp]
    ce40:	bl	4a0c <ASN1_item_digest@plt>
    ce44:	cmp	r0, #1
    ce48:	movne	r5, #0
    ce4c:	bne	ce58 <make_certfp+0xb8>
    ce50:	b	ceb0 <make_certfp+0x110>
    ce54:	mov	r5, r4
    ce58:	bl	4400 <ERR_get_error@plt>
    ce5c:	subs	r4, r0, #0
    ce60:	bne	ce54 <make_certfp+0xb4>
    ce64:	ldr	r3, [pc, #176]	; cf1c <make_certfp+0x17c>
    ce68:	mov	r0, r5
    ce6c:	add	r3, pc, r3
    ce70:	mov	r1, r3
    ce74:	mov	r2, #512	; 0x200
    ce78:	mov	r5, r3
    ce7c:	bl	45a4 <ERR_error_string_n@plt>
    ce80:	ldr	r1, [pc, #152]	; cf20 <make_certfp+0x180>
    ce84:	ldr	r0, [pc, #152]	; cf24 <make_certfp+0x184>
    ce88:	mov	r2, r5
    ce8c:	add	r1, pc, r1
    ce90:	add	r0, pc, r0
    ce94:	bl	491c <rb_lib_log@plt>
    ce98:	mov	r0, r4
    ce9c:	add	sp, sp, #20
    cea0:	pop	{r4, r5, r6, r7, pc}
    cea4:	mov	r0, #0
    cea8:	add	sp, sp, #20
    ceac:	pop	{r4, r5, r6, r7, pc}
    ceb0:	ldr	r0, [sp, #12]
    ceb4:	add	sp, sp, #20
    ceb8:	pop	{r4, r5, r6, r7, pc}
    cebc:	mov	r3, #32
    cec0:	str	r3, [sp, #12]
    cec4:	bl	4bd4 <EVP_sha256@plt>
    cec8:	b	ce18 <make_certfp+0x78>
    cecc:	mov	r3, #20
    ced0:	str	r3, [sp, #12]
    ced4:	bl	48ec <EVP_sha1@plt>
    ced8:	ldr	r3, [pc, #48]	; cf10 <make_certfp+0x170>
    cedc:	mov	r2, r4
    cee0:	mov	r7, r0
    cee4:	ldr	r0, [r5, r3]
    cee8:	b	ce30 <make_certfp+0x90>
    ceec:	mov	r3, #64	; 0x40
    cef0:	str	r3, [sp, #12]
    cef4:	bl	4ba4 <EVP_sha512@plt>
    cef8:	ldr	r3, [pc, #16]	; cf10 <make_certfp+0x170>
    cefc:	mov	r2, r4
    cf00:	mov	r7, r0
    cf04:	ldr	r0, [r5, r3]
    cf08:	b	ce30 <make_certfp+0x90>
    cf0c:	.word	0x0001b240
    cf10:	.word	0x00000408
    cf14:	.word	0x00001001
    cf18:	.word	0x00000414
    cf1c:	.word	0x0002dba4
    cf20:	.word	0x00009254
    cf24:	.word	0x0000943c

0000cf28 <rb_ssl_accept_common>:
    cf28:	push	{r4, r5, r6, r7, lr}
    cf2c:	mov	r6, r0
    cf30:	sub	sp, sp, #12
    cf34:	bl	4400 <ERR_get_error@plt>
    cf38:	subs	r4, r0, #0
    cf3c:	bne	cf34 <rb_ssl_accept_common+0xc>
    cf40:	ldr	r0, [r6, #56]	; 0x38
    cf44:	bl	47c0 <SSL_do_handshake@plt>
    cf48:	mov	r5, r0
    cf4c:	mov	r1, r0
    cf50:	ldr	r0, [r6, #56]	; 0x38
    cf54:	bl	4cac <SSL_get_error@plt>
    cf58:	cmp	r5, #1
    cf5c:	mov	r7, r0
    cf60:	beq	d010 <rb_ssl_accept_common+0xe8>
    cf64:	cmn	r5, #1
    cf68:	movne	r5, #0
    cf6c:	moveq	r5, #1
    cf70:	cmp	r0, #2
    cf74:	movne	r3, #0
    cf78:	andeq	r3, r5, #1
    cf7c:	cmp	r3, #0
    cf80:	bne	cff0 <rb_ssl_accept_common+0xc8>
    cf84:	cmp	r0, #3
    cf88:	movne	r5, #0
    cf8c:	andeq	r5, r5, #1
    cf90:	cmp	r5, #0
    cf94:	bne	cfd4 <rb_ssl_accept_common+0xac>
    cf98:	bl	4ce8 <__errno_location@plt>
    cf9c:	ldr	ip, [r6, #52]	; 0x34
    cfa0:	mov	r4, #5
    cfa4:	mov	r3, r5
    cfa8:	ldr	lr, [ip, #140]	; 0x8c
    cfac:	mov	r2, r5
    cfb0:	mov	r1, #6
    cfb4:	str	r4, [r0]
    cfb8:	str	lr, [sp]
    cfbc:	str	r7, [r6, #64]	; 0x40
    cfc0:	mov	r0, r6
    cfc4:	ldr	r4, [ip, #132]	; 0x84
    cfc8:	blx	r4
    cfcc:	add	sp, sp, #12
    cfd0:	pop	{r4, r5, r6, r7, pc}
    cfd4:	ldr	r2, [pc, #160]	; d07c <rb_ssl_accept_common+0x154>
    cfd8:	mov	r0, r6
    cfdc:	add	r2, pc, r2
    cfe0:	mov	r1, #2
    cfe4:	add	sp, sp, #12
    cfe8:	pop	{r4, r5, r6, r7, lr}
    cfec:	b	44a8 <rb_setselect@plt>
    cff0:	ldr	r2, [pc, #136]	; d080 <rb_ssl_accept_common+0x158>
    cff4:	mov	r3, r4
    cff8:	mov	r0, r6
    cffc:	add	r2, pc, r2
    d000:	mov	r1, #1
    d004:	add	sp, sp, #12
    d008:	pop	{r4, r5, r6, r7, lr}
    d00c:	b	44a8 <rb_setselect@plt>
    d010:	ldr	r2, [r6, #60]	; 0x3c
    d014:	mov	r3, r4
    d018:	add	r2, r2, #1
    d01c:	str	r2, [r6, #60]	; 0x3c
    d020:	mov	r1, r4
    d024:	mov	r2, r4
    d028:	mov	r0, r6
    d02c:	bl	43e8 <rb_settimeout@plt>
    d030:	mov	r3, r4
    d034:	mov	r2, r4
    d038:	mov	r0, r6
    d03c:	mov	r1, #3
    d040:	bl	44a8 <rb_setselect@plt>
    d044:	ldr	r5, [r6, #52]	; 0x34
    d048:	mov	r1, r4
    d04c:	str	r4, [r6, #52]	; 0x34
    d050:	ldr	r2, [r5, #140]	; 0x8c
    d054:	ldr	r3, [r5, #128]	; 0x80
    d058:	mov	r0, r6
    d05c:	str	r2, [sp]
    d060:	mov	r2, r5
    d064:	ldr	r4, [r5, #132]	; 0x84
    d068:	blx	r4
    d06c:	mov	r0, r5
    d070:	add	sp, sp, #12
    d074:	pop	{r4, r5, r6, r7, lr}
    d078:	b	46f4 <free@plt>
    d07c:	.word	0xffffff44
    d080:	.word	0xffffff24

0000d084 <rb_ssl_connect_realcb>:
    d084:	ldr	r3, [r0, #48]	; 0x30
    d088:	push	{r4, lr}
    d08c:	mov	r4, r2
    d090:	ldr	ip, [r2]
    d094:	ldr	r2, [r2, #4]
    d098:	str	ip, [r3, #260]	; 0x104
    d09c:	str	r2, [r3, #264]	; 0x108
    d0a0:	bl	af90 <rb_connect_callback>
    d0a4:	mov	r0, r4
    d0a8:	pop	{r4, lr}
    d0ac:	b	46f4 <free@plt>

0000d0b0 <rb_ssl_tryconn_timeout_cb>:
    d0b0:	mov	r2, r1
    d0b4:	mov	r1, #3
    d0b8:	b	d084 <rb_ssl_connect_realcb>

0000d0bc <rb_ssl_connect_common>:
    d0bc:	push	{r4, r5, r6, r7, r8, lr}
    d0c0:	mov	r6, r0
    d0c4:	mov	r8, r1
    d0c8:	bl	4400 <ERR_get_error@plt>
    d0cc:	subs	r4, r0, #0
    d0d0:	bne	d0c8 <rb_ssl_connect_common+0xc>
    d0d4:	ldr	r0, [r6, #56]	; 0x38
    d0d8:	bl	47c0 <SSL_do_handshake@plt>
    d0dc:	mov	r5, r0
    d0e0:	mov	r1, r0
    d0e4:	ldr	r0, [r6, #56]	; 0x38
    d0e8:	bl	4cac <SSL_get_error@plt>
    d0ec:	cmp	r5, #1
    d0f0:	mov	r7, r0
    d0f4:	beq	d180 <rb_ssl_connect_common+0xc4>
    d0f8:	cmn	r5, #1
    d0fc:	movne	r3, #0
    d100:	moveq	r3, #1
    d104:	cmp	r0, #2
    d108:	cmneq	r5, #1
    d10c:	beq	d164 <rb_ssl_connect_common+0xa8>
    d110:	cmp	r0, #3
    d114:	movne	r3, #0
    d118:	andeq	r3, r3, #1
    d11c:	cmp	r3, #0
    d120:	bne	d148 <rb_ssl_connect_common+0x8c>
    d124:	bl	4ce8 <__errno_location@plt>
    d128:	mov	r3, #5
    d12c:	mov	r2, r8
    d130:	mov	r1, #6
    d134:	str	r3, [r0]
    d138:	str	r7, [r6, #64]	; 0x40
    d13c:	mov	r0, r6
    d140:	pop	{r4, r5, r6, r7, r8, lr}
    d144:	b	d084 <rb_ssl_connect_realcb>
    d148:	ldr	r2, [pc, #120]	; d1c8 <rb_ssl_connect_common+0x10c>
    d14c:	mov	r3, r8
    d150:	mov	r0, r6
    d154:	add	r2, pc, r2
    d158:	mov	r1, #2
    d15c:	pop	{r4, r5, r6, r7, r8, lr}
    d160:	b	44a8 <rb_setselect@plt>
    d164:	ldr	r2, [pc, #96]	; d1cc <rb_ssl_connect_common+0x110>
    d168:	mov	r3, r8
    d16c:	mov	r0, r6
    d170:	add	r2, pc, r2
    d174:	mov	r1, #1
    d178:	pop	{r4, r5, r6, r7, r8, lr}
    d17c:	b	44a8 <rb_setselect@plt>
    d180:	ldr	r2, [r6, #60]	; 0x3c
    d184:	mov	r3, r4
    d188:	add	r2, r2, #1
    d18c:	str	r2, [r6, #60]	; 0x3c
    d190:	mov	r1, r4
    d194:	mov	r2, r4
    d198:	mov	r0, r6
    d19c:	bl	43e8 <rb_settimeout@plt>
    d1a0:	mov	r2, r4
    d1a4:	mov	r0, r6
    d1a8:	mov	r3, r4
    d1ac:	mov	r1, #3
    d1b0:	bl	44a8 <rb_setselect@plt>
    d1b4:	mov	r2, r8
    d1b8:	mov	r1, r4
    d1bc:	mov	r0, r6
    d1c0:	pop	{r4, r5, r6, r7, r8, lr}
    d1c4:	b	d084 <rb_ssl_connect_realcb>
    d1c8:	.word	0xffffff60
    d1cc:	.word	0xffffff44

0000d1d0 <rb_ssl_read_or_write.isra.0>:
    d1d0:	push	{r4, r5, r6, r7, r8, lr}
    d1d4:	mov	r6, r0
    d1d8:	mov	r5, r1
    d1dc:	mov	r8, r2
    d1e0:	mov	r7, r3
    d1e4:	bl	4400 <ERR_get_error@plt>
    d1e8:	subs	r4, r0, #0
    d1ec:	bne	d1e4 <rb_ssl_read_or_write.isra.0+0x14>
    d1f0:	cmp	r6, #0
    d1f4:	bne	d21c <rb_ssl_read_or_write.isra.0+0x4c>
    d1f8:	mov	r1, r7
    d1fc:	ldr	r2, [sp, #28]
    d200:	ldr	r0, [r5]
    d204:	bl	4778 <SSL_read@plt>
    d208:	mov	r1, r0
    d20c:	cmp	r1, #0
    d210:	blt	d238 <rb_ssl_read_or_write.isra.0+0x68>
    d214:	mov	r0, r1
    d218:	pop	{r4, r5, r6, r7, r8, pc}
    d21c:	ldr	r1, [sp, #24]
    d220:	ldr	r2, [sp, #28]
    d224:	ldr	r0, [r5]
    d228:	bl	45f8 <SSL_write@plt>
    d22c:	mov	r1, r0
    d230:	cmp	r1, #0
    d234:	bge	d214 <rb_ssl_read_or_write.isra.0+0x44>
    d238:	ldr	r0, [r5]
    d23c:	bl	4cac <SSL_get_error@plt>
    d240:	sub	r0, r0, #2
    d244:	cmp	r0, #4
    d248:	addls	pc, pc, r0, lsl #2
    d24c:	b	d268 <rb_ssl_read_or_write.isra.0+0x98>
    d250:	b	d2d4 <rb_ssl_read_or_write.isra.0+0x104>
    d254:	b	d2c0 <rb_ssl_read_or_write.isra.0+0xf0>
    d258:	b	d268 <rb_ssl_read_or_write.isra.0+0x98>
    d25c:	b	d28c <rb_ssl_read_or_write.isra.0+0xbc>
    d260:	b	d2b8 <rb_ssl_read_or_write.isra.0+0xe8>
    d264:	mov	r4, r0
    d268:	bl	4400 <ERR_get_error@plt>
    d26c:	cmp	r0, #0
    d270:	bne	d264 <rb_ssl_read_or_write.isra.0+0x94>
    d274:	cmp	r4, #0
    d278:	str	r4, [r8]
    d27c:	bne	d2a4 <rb_ssl_read_or_write.isra.0+0xd4>
    d280:	mvn	r1, #0
    d284:	b	d214 <rb_ssl_read_or_write.isra.0+0x44>
    d288:	mov	r4, r0
    d28c:	bl	4400 <ERR_get_error@plt>
    d290:	cmp	r0, #0
    d294:	bne	d288 <rb_ssl_read_or_write.isra.0+0xb8>
    d298:	cmp	r4, #0
    d29c:	str	r4, [r8]
    d2a0:	beq	d280 <rb_ssl_read_or_write.isra.0+0xb0>
    d2a4:	bl	4ce8 <__errno_location@plt>
    d2a8:	mov	r3, #5
    d2ac:	mvn	r1, #1
    d2b0:	str	r3, [r0]
    d2b4:	b	d214 <rb_ssl_read_or_write.isra.0+0x44>
    d2b8:	mov	r1, #0
    d2bc:	b	d214 <rb_ssl_read_or_write.isra.0+0x44>
    d2c0:	bl	4ce8 <__errno_location@plt>
    d2c4:	mov	r3, #11
    d2c8:	mvn	r1, #3
    d2cc:	str	r3, [r0]
    d2d0:	b	d214 <rb_ssl_read_or_write.isra.0+0x44>
    d2d4:	bl	4ce8 <__errno_location@plt>
    d2d8:	mov	r3, #11
    d2dc:	mvn	r1, #2
    d2e0:	str	r3, [r0]
    d2e4:	b	d214 <rb_ssl_read_or_write.isra.0+0x44>

0000d2e8 <rb_ssl_init_fd>:
    d2e8:	push	{r4, r5, r6, lr}
    d2ec:	mov	r5, r0
    d2f0:	mov	r6, r1
    d2f4:	bl	4400 <ERR_get_error@plt>
    d2f8:	subs	r4, r0, #0
    d2fc:	bne	d2f4 <rb_ssl_init_fd+0xc>
    d300:	ldr	r3, [pc, #172]	; d3b4 <rb_ssl_init_fd+0xcc>
    d304:	add	r3, pc, r3
    d308:	ldr	r0, [r3, #512]	; 0x200
    d30c:	bl	4730 <SSL_new@plt>
    d310:	cmp	r0, #0
    d314:	str	r0, [r5, #56]	; 0x38
    d318:	beq	d34c <rb_ssl_init_fd+0x64>
    d31c:	cmp	r6, #0
    d320:	beq	d3a8 <rb_ssl_init_fd+0xc0>
    d324:	cmp	r6, #1
    d328:	beq	d39c <rb_ssl_init_fd+0xb4>
    d32c:	mov	r4, r0
    d330:	mov	r0, r5
    d334:	bl	44e4 <rb_get_fd@plt>
    d338:	mov	r1, r0
    d33c:	mov	r0, r4
    d340:	pop	{r4, r5, r6, lr}
    d344:	b	4664 <SSL_set_fd@plt>
    d348:	mov	r4, r0
    d34c:	bl	4400 <ERR_get_error@plt>
    d350:	cmp	r0, #0
    d354:	bne	d348 <rb_ssl_init_fd+0x60>
    d358:	ldr	r3, [pc, #88]	; d3b8 <rb_ssl_init_fd+0xd0>
    d35c:	mov	r0, r4
    d360:	add	r3, pc, r3
    d364:	mov	r1, r3
    d368:	mov	r2, #512	; 0x200
    d36c:	mov	r4, r3
    d370:	bl	45a4 <ERR_error_string_n@plt>
    d374:	ldr	r1, [pc, #64]	; d3bc <rb_ssl_init_fd+0xd4>
    d378:	ldr	r0, [pc, #64]	; d3c0 <rb_ssl_init_fd+0xd8>
    d37c:	add	r1, pc, r1
    d380:	mov	r2, r4
    d384:	add	r0, pc, r0
    d388:	add	r1, r1, #12
    d38c:	bl	491c <rb_lib_log@plt>
    d390:	mov	r0, r5
    d394:	pop	{r4, r5, r6, lr}
    d398:	b	4868 <rb_close@plt>
    d39c:	bl	4b68 <SSL_set_connect_state@plt>
    d3a0:	ldr	r4, [r5, #56]	; 0x38
    d3a4:	b	d330 <rb_ssl_init_fd+0x48>
    d3a8:	bl	49d0 <SSL_set_accept_state@plt>
    d3ac:	ldr	r4, [r5, #56]	; 0x38
    d3b0:	b	d330 <rb_ssl_init_fd+0x48>
    d3b4:	.word	0x0002d70c
    d3b8:	.word	0x0002d6b0
    d3bc:	.word	0x00008d64
    d3c0:	.word	0x00008f64

0000d3c4 <rb_ssl_tryconn>:
    d3c4:	cmp	r1, #0
    d3c8:	bne	d414 <rb_ssl_tryconn+0x50>
    d3cc:	push	{r4, r5, r6, lr}
    d3d0:	mov	r3, r2
    d3d4:	ldrb	r1, [r0, #17]
    d3d8:	mov	r5, r2
    d3dc:	ldr	r2, [pc, #52]	; d418 <rb_ssl_tryconn+0x54>
    d3e0:	orr	r1, r1, #32
    d3e4:	mov	r4, r0
    d3e8:	strb	r1, [r0, #17]
    d3ec:	add	r2, pc, r2
    d3f0:	ldr	r1, [r5, #8]
    d3f4:	bl	43e8 <rb_settimeout@plt>
    d3f8:	mov	r0, r4
    d3fc:	mov	r1, #1
    d400:	bl	d2e8 <rb_ssl_init_fd>
    d404:	mov	r1, r5
    d408:	mov	r0, r4
    d40c:	pop	{r4, r5, r6, lr}
    d410:	b	d0bc <rb_ssl_connect_common>
    d414:	b	d084 <rb_ssl_connect_realcb>
    d418:	.word	0xfffffcbc

0000d41c <rb_ssl_shutdown>:
    d41c:	push	{r4, r5, r6, lr}
    d420:	subs	r4, r0, #0
    d424:	popeq	{r4, r5, r6, pc}
    d428:	ldr	r3, [r4, #56]	; 0x38
    d42c:	cmp	r3, #0
    d430:	popeq	{r4, r5, r6, pc}
    d434:	bl	4400 <ERR_get_error@plt>
    d438:	cmp	r0, #0
    d43c:	bne	d434 <rb_ssl_shutdown+0x18>
    d440:	mov	r5, #4
    d444:	ldr	r0, [r4, #56]	; 0x38
    d448:	bl	4aa8 <SSL_shutdown@plt>
    d44c:	mov	r6, r0
    d450:	mov	r1, r0
    d454:	ldr	r0, [r4, #56]	; 0x38
    d458:	bl	4cac <SSL_get_error@plt>
    d45c:	cmp	r6, #0
    d460:	sub	r0, r0, #2
    d464:	bge	d478 <rb_ssl_shutdown+0x5c>
    d468:	cmp	r0, #1
    d46c:	bhi	d478 <rb_ssl_shutdown+0x5c>
    d470:	subs	r5, r5, #1
    d474:	bne	d444 <rb_ssl_shutdown+0x28>
    d478:	ldr	r0, [r4, #56]	; 0x38
    d47c:	bl	4964 <SSL_free@plt>
    d480:	mov	r3, #0
    d484:	str	r3, [r4, #56]	; 0x38
    d488:	pop	{r4, r5, r6, pc}

0000d48c <rb_init_ssl>:
    d48c:	ldr	r1, [pc, #28]	; d4b0 <rb_init_ssl+0x24>
    d490:	ldr	r0, [pc, #28]	; d4b4 <rb_init_ssl+0x28>
    d494:	add	r1, pc, r1
    d498:	push	{r4, lr}
    d49c:	add	r0, pc, r0
    d4a0:	add	r1, r1, #28
    d4a4:	bl	491c <rb_lib_log@plt>
    d4a8:	mov	r0, #1
    d4ac:	pop	{r4, pc}
    d4b0:	.word	0x00008c4c
    d4b4:	.word	0x00008e5c

0000d4b8 <rb_setup_ssl_server>:
    d4b8:	push	{r4, r5, r6, r7, r8, r9, lr}
    d4bc:	subs	r7, r0, #0
    d4c0:	sub	sp, sp, #12
    d4c4:	beq	d64c <rb_setup_ssl_server+0x194>
    d4c8:	cmp	r1, #0
    d4cc:	mov	r6, r1
    d4d0:	moveq	r6, r7
    d4d4:	cmp	r3, #0
    d4d8:	mov	r9, r2
    d4dc:	mov	r4, r3
    d4e0:	beq	d5c8 <rb_setup_ssl_server+0x110>
    d4e4:	bl	4400 <ERR_get_error@plt>
    d4e8:	subs	r5, r0, #0
    d4ec:	bne	d4e4 <rb_setup_ssl_server+0x2c>
    d4f0:	bl	4370 <TLS_method@plt>
    d4f4:	bl	4b20 <SSL_CTX_new@plt>
    d4f8:	subs	r8, r0, #0
    d4fc:	beq	d578 <rb_setup_ssl_server+0xc0>
    d500:	mov	r1, r7
    d504:	bl	4838 <SSL_CTX_use_certificate_chain_file@plt>
    d508:	cmp	r0, #1
    d50c:	bne	d518 <rb_setup_ssl_server+0x60>
    d510:	b	d5d8 <rb_setup_ssl_server+0x120>
    d514:	mov	r5, r4
    d518:	bl	4400 <ERR_get_error@plt>
    d51c:	subs	r4, r0, #0
    d520:	bne	d514 <rb_setup_ssl_server+0x5c>
    d524:	ldr	r3, [pc, #844]	; d878 <rb_setup_ssl_server+0x3c0>
    d528:	mov	r0, r5
    d52c:	add	r3, pc, r3
    d530:	mov	r1, r3
    d534:	mov	r2, #512	; 0x200
    d538:	mov	r5, r3
    d53c:	bl	45a4 <ERR_error_string_n@plt>
    d540:	ldr	r1, [pc, #820]	; d87c <rb_setup_ssl_server+0x3c4>
    d544:	ldr	r0, [pc, #820]	; d880 <rb_setup_ssl_server+0x3c8>
    d548:	add	r1, pc, r1
    d54c:	add	r0, pc, r0
    d550:	mov	r3, r5
    d554:	mov	r2, r7
    d558:	add	r1, r1, #440	; 0x1b8
    d55c:	bl	491c <rb_lib_log@plt>
    d560:	mov	r0, r8
    d564:	bl	4460 <SSL_CTX_free@plt>
    d568:	mov	r0, r4
    d56c:	add	sp, sp, #12
    d570:	pop	{r4, r5, r6, r7, r8, r9, pc}
    d574:	mov	r5, r4
    d578:	bl	4400 <ERR_get_error@plt>
    d57c:	subs	r4, r0, #0
    d580:	bne	d574 <rb_setup_ssl_server+0xbc>
    d584:	ldr	r3, [pc, #760]	; d884 <rb_setup_ssl_server+0x3cc>
    d588:	mov	r0, r5
    d58c:	add	r3, pc, r3
    d590:	mov	r1, r3
    d594:	mov	r2, #512	; 0x200
    d598:	mov	r5, r3
    d59c:	bl	45a4 <ERR_error_string_n@plt>
    d5a0:	ldr	r1, [pc, #736]	; d888 <rb_setup_ssl_server+0x3d0>
    d5a4:	ldr	r0, [pc, #736]	; d88c <rb_setup_ssl_server+0x3d4>
    d5a8:	add	r1, pc, r1
    d5ac:	mov	r2, r5
    d5b0:	add	r1, r1, #440	; 0x1b8
    d5b4:	add	r0, pc, r0
    d5b8:	bl	491c <rb_lib_log@plt>
    d5bc:	mov	r0, r4
    d5c0:	add	sp, sp, #12
    d5c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
    d5c8:	ldr	r4, [pc, #704]	; d890 <rb_setup_ssl_server+0x3d8>
    d5cc:	add	r4, pc, r4
    d5d0:	add	r4, r4, #40	; 0x28
    d5d4:	b	d4e4 <rb_setup_ssl_server+0x2c>
    d5d8:	mov	r2, r0
    d5dc:	mov	r1, r6
    d5e0:	mov	r0, r8
    d5e4:	bl	4928 <SSL_CTX_use_PrivateKey_file@plt>
    d5e8:	cmp	r0, #1
    d5ec:	bne	d5f8 <rb_setup_ssl_server+0x140>
    d5f0:	b	d66c <rb_setup_ssl_server+0x1b4>
    d5f4:	mov	r5, r4
    d5f8:	bl	4400 <ERR_get_error@plt>
    d5fc:	subs	r4, r0, #0
    d600:	bne	d5f4 <rb_setup_ssl_server+0x13c>
    d604:	ldr	r3, [pc, #648]	; d894 <rb_setup_ssl_server+0x3dc>
    d608:	mov	r0, r5
    d60c:	add	r3, pc, r3
    d610:	mov	r1, r3
    d614:	mov	r2, #512	; 0x200
    d618:	mov	r5, r3
    d61c:	bl	45a4 <ERR_error_string_n@plt>
    d620:	ldr	r1, [pc, #624]	; d898 <rb_setup_ssl_server+0x3e0>
    d624:	ldr	r0, [pc, #624]	; d89c <rb_setup_ssl_server+0x3e4>
    d628:	add	r1, pc, r1
    d62c:	mov	r3, r5
    d630:	mov	r2, r6
    d634:	add	r1, r1, #440	; 0x1b8
    d638:	add	r0, pc, r0
    d63c:	bl	491c <rb_lib_log@plt>
    d640:	mov	r0, r8
    d644:	bl	4460 <SSL_CTX_free@plt>
    d648:	b	d568 <rb_setup_ssl_server+0xb0>
    d64c:	ldr	r1, [pc, #588]	; d8a0 <rb_setup_ssl_server+0x3e8>
    d650:	ldr	r0, [pc, #588]	; d8a4 <rb_setup_ssl_server+0x3ec>
    d654:	add	r1, pc, r1
    d658:	add	r0, pc, r0
    d65c:	add	r1, r1, #440	; 0x1b8
    d660:	mov	r4, r7
    d664:	bl	491c <rb_lib_log@plt>
    d668:	b	d568 <rb_setup_ssl_server+0xb0>
    d66c:	cmp	r9, #0
    d670:	beq	d82c <rb_setup_ssl_server+0x374>
    d674:	ldr	r1, [pc, #556]	; d8a8 <rb_setup_ssl_server+0x3f0>
    d678:	mov	r0, r9
    d67c:	add	r1, pc, r1
    d680:	bl	4610 <fopen@plt>
    d684:	str	r5, [sp, #4]
    d688:	subs	r6, r0, #0
    d68c:	beq	d848 <rb_setup_ssl_server+0x390>
    d690:	mov	r3, r5
    d694:	mov	r2, r5
    d698:	add	r1, sp, #4
    d69c:	bl	49e8 <PEM_read_DHparams@plt>
    d6a0:	cmp	r0, #0
    d6a4:	beq	d710 <rb_setup_ssl_server+0x258>
    d6a8:	mov	r2, r5
    d6ac:	ldr	r3, [sp, #4]
    d6b0:	mov	r1, #3
    d6b4:	mov	r0, r8
    d6b8:	bl	4670 <SSL_CTX_ctrl@plt>
    d6bc:	ldr	r0, [sp, #4]
    d6c0:	bl	4a6c <DH_free@plt>
    d6c4:	mov	r0, r6
    d6c8:	bl	4580 <fclose@plt>
    d6cc:	mov	r1, r4
    d6d0:	mov	r0, r8
    d6d4:	bl	43f4 <SSL_CTX_set_cipher_list@plt>
    d6d8:	cmp	r0, #1
    d6dc:	mov	r4, r0
    d6e0:	beq	d764 <rb_setup_ssl_server+0x2ac>
    d6e4:	ldr	r1, [pc, #448]	; d8ac <rb_setup_ssl_server+0x3f4>
    d6e8:	ldr	r0, [pc, #448]	; d8b0 <rb_setup_ssl_server+0x3f8>
    d6ec:	add	r1, pc, r1
    d6f0:	add	r0, pc, r0
    d6f4:	add	r1, r1, #440	; 0x1b8
    d6f8:	bl	491c <rb_lib_log@plt>
    d6fc:	mov	r0, r8
    d700:	bl	4460 <SSL_CTX_free@plt>
    d704:	mov	r4, #0
    d708:	b	d568 <rb_setup_ssl_server+0xb0>
    d70c:	mov	r5, r0
    d710:	bl	4400 <ERR_get_error@plt>
    d714:	cmp	r0, #0
    d718:	bne	d70c <rb_setup_ssl_server+0x254>
    d71c:	ldr	r3, [pc, #400]	; d8b4 <rb_setup_ssl_server+0x3fc>
    d720:	mov	r0, r5
    d724:	add	r3, pc, r3
    d728:	mov	r1, r3
    d72c:	mov	r2, #512	; 0x200
    d730:	mov	r5, r3
    d734:	bl	45a4 <ERR_error_string_n@plt>
    d738:	ldr	r1, [pc, #376]	; d8b8 <rb_setup_ssl_server+0x400>
    d73c:	ldr	r0, [pc, #376]	; d8bc <rb_setup_ssl_server+0x404>
    d740:	add	r1, pc, r1
    d744:	mov	r3, r5
    d748:	mov	r2, r9
    d74c:	add	r1, r1, #440	; 0x1b8
    d750:	add	r0, pc, r0
    d754:	bl	491c <rb_lib_log@plt>
    d758:	mov	r0, r6
    d75c:	bl	4580 <fclose@plt>
    d760:	b	d6cc <rb_setup_ssl_server+0x214>
    d764:	mov	r3, #0
    d768:	mov	r2, r3
    d76c:	mov	r1, #44	; 0x2c
    d770:	mov	r0, r8
    d774:	bl	4670 <SSL_CTX_ctrl@plt>
    d778:	ldr	r2, [pc, #320]	; d8c0 <rb_setup_ssl_server+0x408>
    d77c:	mov	r1, #5
    d780:	add	r2, pc, r2
    d784:	mov	r0, r8
    d788:	bl	4d18 <SSL_CTX_set_verify@plt>
    d78c:	mov	r1, #2048	; 0x800
    d790:	mov	r0, r8
    d794:	bl	4514 <SSL_CTX_clear_options@plt>
    d798:	mov	r1, #67108864	; 0x4000000
    d79c:	mov	r0, r8
    d7a0:	bl	4850 <SSL_CTX_set_options@plt>
    d7a4:	mov	r1, #16384	; 0x4000
    d7a8:	mov	r0, r8
    d7ac:	bl	4850 <SSL_CTX_set_options@plt>
    d7b0:	mov	r1, #4194304	; 0x400000
    d7b4:	mov	r0, r8
    d7b8:	bl	4850 <SSL_CTX_set_options@plt>
    d7bc:	mov	r1, #0
    d7c0:	mov	r0, r8
    d7c4:	bl	4850 <SSL_CTX_set_options@plt>
    d7c8:	mov	r1, #0
    d7cc:	mov	r0, r8
    d7d0:	bl	4850 <SSL_CTX_set_options@plt>
    d7d4:	ldr	r3, [pc, #232]	; d8c4 <rb_setup_ssl_server+0x40c>
    d7d8:	mov	r2, #0
    d7dc:	add	r3, pc, r3
    d7e0:	mov	r1, #92	; 0x5c
    d7e4:	mov	r0, r8
    d7e8:	bl	4670 <SSL_CTX_ctrl@plt>
    d7ec:	ldr	r3, [pc, #212]	; d8c8 <rb_setup_ssl_server+0x410>
    d7f0:	add	r3, pc, r3
    d7f4:	ldr	r0, [r3, #512]	; 0x200
    d7f8:	cmp	r0, #0
    d7fc:	beq	d804 <rb_setup_ssl_server+0x34c>
    d800:	bl	4460 <SSL_CTX_free@plt>
    d804:	ldr	r3, [pc, #192]	; d8cc <rb_setup_ssl_server+0x414>
    d808:	ldr	r1, [pc, #192]	; d8d0 <rb_setup_ssl_server+0x418>
    d80c:	ldr	r0, [pc, #192]	; d8d4 <rb_setup_ssl_server+0x41c>
    d810:	add	r3, pc, r3
    d814:	add	r1, pc, r1
    d818:	add	r0, pc, r0
    d81c:	add	r1, r1, #440	; 0x1b8
    d820:	str	r8, [r3, #512]	; 0x200
    d824:	bl	491c <rb_lib_log@plt>
    d828:	b	d568 <rb_setup_ssl_server+0xb0>
    d82c:	ldr	r1, [pc, #164]	; d8d8 <rb_setup_ssl_server+0x420>
    d830:	ldr	r0, [pc, #164]	; d8dc <rb_setup_ssl_server+0x424>
    d834:	add	r1, pc, r1
    d838:	add	r0, pc, r0
    d83c:	add	r1, r1, #440	; 0x1b8
    d840:	bl	491c <rb_lib_log@plt>
    d844:	b	d6cc <rb_setup_ssl_server+0x214>
    d848:	bl	4ce8 <__errno_location@plt>
    d84c:	ldr	r0, [r0]
    d850:	bl	43a0 <strerror@plt>
    d854:	ldr	r1, [pc, #132]	; d8e0 <rb_setup_ssl_server+0x428>
    d858:	mov	r2, r9
    d85c:	add	r1, pc, r1
    d860:	add	r1, r1, #440	; 0x1b8
    d864:	mov	r3, r0
    d868:	ldr	r0, [pc, #116]	; d8e4 <rb_setup_ssl_server+0x42c>
    d86c:	add	r0, pc, r0
    d870:	bl	491c <rb_lib_log@plt>
    d874:	b	d6cc <rb_setup_ssl_server+0x214>
    d878:	.word	0x0002d4e4
    d87c:	.word	0x00008b98
    d880:	.word	0x00008e04
    d884:	.word	0x0002d484
    d888:	.word	0x00008b38
    d88c:	.word	0x00008d88
    d890:	.word	0x00008b14
    d894:	.word	0x0002d404
    d898:	.word	0x00008ab8
    d89c:	.word	0x00008d4c
    d8a0:	.word	0x00008a8c
    d8a4:	.word	0x00008cc0
    d8a8:	.word	0x0000935c
    d8ac:	.word	0x000089f4
    d8b0:	.word	0x00008d20
    d8b4:	.word	0x0002d2ec
    d8b8:	.word	0x000089a0
    d8bc:	.word	0x00008c9c
    d8c0:	.word	0xfffff5e0
    d8c4:	.word	0x0001ac84
    d8c8:	.word	0x0002d220
    d8cc:	.word	0x0002d200
    d8d0:	.word	0x000088cc
    d8d4:	.word	0x00008c38
    d8d8:	.word	0x000088ac
    d8dc:	.word	0x00008b78
    d8e0:	.word	0x00008884
    d8e4:	.word	0x00008b68

0000d8e8 <rb_init_prng>:
    d8e8:	push	{r4, r5, r6, lr}
    d8ec:	mov	r6, r0
    d8f0:	mov	r4, r1
    d8f4:	bl	4400 <ERR_get_error@plt>
    d8f8:	subs	r5, r0, #0
    d8fc:	bne	d8f4 <rb_init_prng+0xc>
    d900:	cmp	r4, #0
    d904:	beq	d96c <rb_init_prng+0x84>
    d908:	bl	4bbc <RAND_status@plt>
    d90c:	cmp	r0, #1
    d910:	mov	r4, r0
    d914:	bne	d920 <rb_init_prng+0x38>
    d918:	b	d994 <rb_init_prng+0xac>
    d91c:	mov	r5, r4
    d920:	bl	4400 <ERR_get_error@plt>
    d924:	subs	r4, r0, #0
    d928:	bne	d91c <rb_init_prng+0x34>
    d92c:	ldr	r3, [pc, #204]	; da00 <rb_init_prng+0x118>
    d930:	mov	r0, r5
    d934:	add	r3, pc, r3
    d938:	mov	r1, r3
    d93c:	mov	r2, #512	; 0x200
    d940:	mov	r5, r3
    d944:	bl	45a4 <ERR_error_string_n@plt>
    d948:	ldr	r1, [pc, #180]	; da04 <rb_init_prng+0x11c>
    d94c:	ldr	r0, [pc, #180]	; da08 <rb_init_prng+0x120>
    d950:	add	r1, pc, r1
    d954:	mov	r2, r5
    d958:	add	r1, r1, #460	; 0x1cc
    d95c:	add	r0, pc, r0
    d960:	bl	491c <rb_lib_log@plt>
    d964:	mov	r0, r4
    d968:	pop	{r4, r5, r6, pc}
    d96c:	mov	r0, r6
    d970:	mvn	r1, #0
    d974:	bl	4430 <RAND_load_file@plt>
    d978:	cmp	r0, #0
    d97c:	movlt	r4, r5
    d980:	blt	d9b8 <rb_init_prng+0xd0>
    d984:	bl	4bbc <RAND_status@plt>
    d988:	cmp	r0, #1
    d98c:	mov	r4, r0
    d990:	bne	d920 <rb_init_prng+0x38>
    d994:	ldr	r1, [pc, #112]	; da0c <rb_init_prng+0x124>
    d998:	ldr	r0, [pc, #112]	; da10 <rb_init_prng+0x128>
    d99c:	add	r1, pc, r1
    d9a0:	add	r0, pc, r0
    d9a4:	add	r1, r1, #460	; 0x1cc
    d9a8:	bl	491c <rb_lib_log@plt>
    d9ac:	mov	r0, r4
    d9b0:	pop	{r4, r5, r6, pc}
    d9b4:	mov	r4, r0
    d9b8:	bl	4400 <ERR_get_error@plt>
    d9bc:	cmp	r0, #0
    d9c0:	bne	d9b4 <rb_init_prng+0xcc>
    d9c4:	ldr	r3, [pc, #72]	; da14 <rb_init_prng+0x12c>
    d9c8:	mov	r0, r4
    d9cc:	add	r3, pc, r3
    d9d0:	mov	r1, r3
    d9d4:	mov	r2, #512	; 0x200
    d9d8:	mov	r4, r3
    d9dc:	bl	45a4 <ERR_error_string_n@plt>
    d9e0:	ldr	r1, [pc, #48]	; da18 <rb_init_prng+0x130>
    d9e4:	ldr	r0, [pc, #48]	; da1c <rb_init_prng+0x134>
    d9e8:	add	r1, pc, r1
    d9ec:	mov	r2, r4
    d9f0:	add	r1, r1, #460	; 0x1cc
    d9f4:	add	r0, pc, r0
    d9f8:	bl	491c <rb_lib_log@plt>
    d9fc:	b	d908 <rb_init_prng+0x20>
    da00:	.word	0x0002d0dc
    da04:	.word	0x00008790
    da08:	.word	0x00008b30
    da0c:	.word	0x00008744
    da10:	.word	0x00008b00
    da14:	.word	0x0002d044
    da18:	.word	0x000086f8
    da1c:	.word	0x00008a80

0000da20 <rb_get_random>:
    da20:	push	{r4, r5, r6, lr}
    da24:	mov	r4, r0
    da28:	mov	r6, r1
    da2c:	bl	4400 <ERR_get_error@plt>
    da30:	subs	r5, r0, #0
    da34:	bne	da2c <rb_get_random+0xc>
    da38:	mov	r1, r6
    da3c:	mov	r0, r4
    da40:	bl	4ae4 <RAND_bytes@plt>
    da44:	cmp	r0, #1
    da48:	bne	da54 <rb_get_random+0x34>
    da4c:	b	daa0 <rb_get_random+0x80>
    da50:	mov	r5, r4
    da54:	bl	4400 <ERR_get_error@plt>
    da58:	subs	r4, r0, #0
    da5c:	bne	da50 <rb_get_random+0x30>
    da60:	ldr	r3, [pc, #60]	; daa4 <rb_get_random+0x84>
    da64:	mov	r0, r5
    da68:	add	r3, pc, r3
    da6c:	mov	r1, r3
    da70:	mov	r2, #512	; 0x200
    da74:	mov	r5, r3
    da78:	bl	45a4 <ERR_error_string_n@plt>
    da7c:	ldr	r1, [pc, #36]	; daa8 <rb_get_random+0x88>
    da80:	ldr	r0, [pc, #36]	; daac <rb_get_random+0x8c>
    da84:	add	r1, pc, r1
    da88:	mov	r2, r5
    da8c:	add	r1, r1, #476	; 0x1dc
    da90:	add	r0, pc, r0
    da94:	bl	491c <rb_lib_log@plt>
    da98:	mov	r0, r4
    da9c:	pop	{r4, r5, r6, pc}
    daa0:	pop	{r4, r5, r6, pc}
    daa4:	.word	0x0002cfa8
    daa8:	.word	0x0000865c
    daac:	.word	0x00008a28

0000dab0 <rb_get_ssl_strerror>:
    dab0:	push	{r4, lr}
    dab4:	mov	r2, #512	; 0x200
    dab8:	ldr	r4, [pc, #20]	; dad4 <rb_get_ssl_strerror+0x24>
    dabc:	ldr	r0, [r0, #64]	; 0x40
    dac0:	add	r4, pc, r4
    dac4:	mov	r1, r4
    dac8:	bl	45a4 <ERR_error_string_n@plt>
    dacc:	mov	r0, r4
    dad0:	pop	{r4, pc}
    dad4:	.word	0x0002cf50

0000dad8 <rb_get_ssl_certfp>:
    dad8:	push	{r4, r5, r6, r7, r8, lr}
    dadc:	subs	r4, r0, #0
    dae0:	beq	db50 <rb_get_ssl_certfp+0x78>
    dae4:	ldr	r0, [r4, #56]	; 0x38
    dae8:	cmp	r0, #0
    daec:	beq	db50 <rb_get_ssl_certfp+0x78>
    daf0:	mov	r6, r2
    daf4:	mov	r5, r1
    daf8:	bl	4a24 <SSL_get_peer_certificate@plt>
    dafc:	subs	r7, r0, #0
    db00:	beq	db50 <rb_get_ssl_certfp+0x78>
    db04:	ldr	r0, [r4, #56]	; 0x38
    db08:	bl	4a48 <SSL_get_verify_result@plt>
    db0c:	cmp	r0, #27
    db10:	movhi	r4, #0
    db14:	bls	db28 <rb_get_ssl_certfp+0x50>
    db18:	mov	r0, r7
    db1c:	bl	4c64 <X509_free@plt>
    db20:	mov	r0, r4
    db24:	pop	{r4, r5, r6, r7, r8, pc}
    db28:	mov	r3, #1
    db2c:	ldr	r4, [pc, #40]	; db5c <rb_get_ssl_certfp+0x84>
    db30:	ands	r4, r4, r3, lsl r0
    db34:	beq	db18 <rb_get_ssl_certfp+0x40>
    db38:	mov	r2, r6
    db3c:	mov	r1, r5
    db40:	mov	r0, r7
    db44:	bl	cda0 <make_certfp>
    db48:	mov	r4, r0
    db4c:	b	db18 <rb_get_ssl_certfp+0x40>
    db50:	mov	r4, #0
    db54:	mov	r0, r4
    db58:	pop	{r4, r5, r6, r7, r8, pc}
    db5c:	.word	0x083c0001

0000db60 <rb_get_ssl_certfp_file>:
    db60:	push	{r4, r5, r6, r7, r8, lr}
    db64:	mov	r4, r1
    db68:	ldr	r1, [pc, #104]	; dbd8 <rb_get_ssl_certfp_file+0x78>
    db6c:	mov	r7, r2
    db70:	add	r1, pc, r1
    db74:	bl	4610 <fopen@plt>
    db78:	subs	r5, r0, #0
    db7c:	beq	dbd0 <rb_get_ssl_certfp_file+0x70>
    db80:	mov	r3, #0
    db84:	mov	r2, r3
    db88:	mov	r1, r3
    db8c:	bl	4814 <PEM_read_X509@plt>
    db90:	subs	r6, r0, #0
    db94:	beq	dbc0 <rb_get_ssl_certfp_file+0x60>
    db98:	mov	r1, r4
    db9c:	mov	r2, r7
    dba0:	bl	cda0 <make_certfp>
    dba4:	mov	r4, r0
    dba8:	mov	r0, r6
    dbac:	bl	4c64 <X509_free@plt>
    dbb0:	mov	r0, r5
    dbb4:	bl	4580 <fclose@plt>
    dbb8:	mov	r0, r4
    dbbc:	pop	{r4, r5, r6, r7, r8, pc}
    dbc0:	mov	r0, r5
    dbc4:	bl	4580 <fclose@plt>
    dbc8:	mov	r4, r6
    dbcc:	b	dbb8 <rb_get_ssl_certfp_file+0x58>
    dbd0:	mvn	r4, #0
    dbd4:	b	dbb8 <rb_get_ssl_certfp_file+0x58>
    dbd8:	.word	0x00008e68

0000dbdc <rb_get_ssl_info>:
    dbdc:	push	{r4, r5, r6, r7, lr}
    dbe0:	sub	sp, sp, #20
    dbe4:	mov	r5, r0
    dbe8:	mov	r6, r1
    dbec:	bl	46d0 <OpenSSL_version_num@plt>
    dbf0:	ldr	r4, [pc, #116]	; dc6c <rb_get_ssl_info+0x90>
    dbf4:	cmp	r0, r4
    dbf8:	beq	dc40 <rb_get_ssl_info+0x64>
    dbfc:	bl	46d0 <OpenSSL_version_num@plt>
    dc00:	mov	r7, r0
    dc04:	mov	r0, #0
    dc08:	bl	4c94 <OpenSSL_version@plt>
    dc0c:	ldr	r2, [pc, #92]	; dc70 <rb_get_ssl_info+0x94>
    dc10:	str	r7, [sp, #4]
    dc14:	add	r2, pc, r2
    dc18:	str	r2, [sp]
    dc1c:	ldr	r2, [pc, #80]	; dc74 <rb_get_ssl_info+0x98>
    dc20:	mov	r3, r4
    dc24:	mov	r1, r6
    dc28:	add	r2, pc, r2
    dc2c:	str	r0, [sp, #8]
    dc30:	mov	r0, r5
    dc34:	bl	4bb0 <snprintf@plt>
    dc38:	add	sp, sp, #20
    dc3c:	pop	{r4, r5, r6, r7, pc}
    dc40:	ldr	r2, [pc, #48]	; dc78 <rb_get_ssl_info+0x9c>
    dc44:	mov	r3, r0
    dc48:	add	r2, pc, r2
    dc4c:	str	r2, [sp]
    dc50:	ldr	r2, [pc, #36]	; dc7c <rb_get_ssl_info+0xa0>
    dc54:	mov	r1, r6
    dc58:	mov	r0, r5
    dc5c:	add	r2, pc, r2
    dc60:	bl	4bb0 <snprintf@plt>
    dc64:	add	sp, sp, #20
    dc68:	pop	{r4, r5, r6, r7, pc}
    dc6c:	.word	0x1010104f
    dc70:	.word	0x000088dc
    dc74:	.word	0x000088e4
    dc78:	.word	0x000088a8
    dc7c:	.word	0x00008870

0000dc80 <rb_ssl_get_cipher>:
    dc80:	push	{r4, r5, lr}
    dc84:	subs	r4, r0, #0
    dc88:	sub	sp, sp, #12
    dc8c:	beq	dce4 <rb_ssl_get_cipher+0x64>
    dc90:	ldr	r0, [r4, #56]	; 0x38
    dc94:	cmp	r0, #0
    dc98:	beq	dcdc <rb_ssl_get_cipher+0x5c>
    dc9c:	bl	4cb8 <SSL_get_version@plt>
    dca0:	mov	r5, r0
    dca4:	ldr	r0, [r4, #56]	; 0x38
    dca8:	bl	4520 <SSL_get_current_cipher@plt>
    dcac:	bl	46b8 <SSL_CIPHER_get_name@plt>
    dcb0:	ldr	r4, [pc, #52]	; dcec <rb_ssl_get_cipher+0x6c>
    dcb4:	ldr	r2, [pc, #52]	; dcf0 <rb_ssl_get_cipher+0x70>
    dcb8:	add	r4, pc, r4
    dcbc:	add	r4, r4, #516	; 0x204
    dcc0:	mov	r3, r5
    dcc4:	add	r2, pc, r2
    dcc8:	mov	r1, #512	; 0x200
    dccc:	str	r0, [sp]
    dcd0:	mov	r0, r4
    dcd4:	bl	4bb0 <snprintf@plt>
    dcd8:	mov	r0, r4
    dcdc:	add	sp, sp, #12
    dce0:	pop	{r4, r5, pc}
    dce4:	mov	r0, r4
    dce8:	b	dcdc <rb_ssl_get_cipher+0x5c>
    dcec:	.word	0x0002cd58
    dcf0:	.word	0x0000887c

0000dcf4 <rb_ssl_read>:
    dcf4:	push	{lr}		; (str lr, [sp, #-4]!)
    dcf8:	sub	sp, sp, #12
    dcfc:	mov	ip, r0
    dd00:	mov	r0, #0
    dd04:	str	r2, [sp, #4]
    dd08:	mov	r3, r1
    dd0c:	add	r2, ip, #64	; 0x40
    dd10:	add	r1, ip, #56	; 0x38
    dd14:	str	r0, [sp]
    dd18:	bl	d1d0 <rb_ssl_read_or_write.isra.0>
    dd1c:	add	sp, sp, #12
    dd20:	pop	{pc}		; (ldr pc, [sp], #4)

0000dd24 <rb_ssl_write>:
    dd24:	push	{lr}		; (str lr, [sp, #-4]!)
    dd28:	sub	sp, sp, #12
    dd2c:	mov	r3, #0
    dd30:	stm	sp, {r1, r2}
    dd34:	add	r2, r0, #64	; 0x40
    dd38:	add	r1, r0, #56	; 0x38
    dd3c:	mov	r0, #1
    dd40:	bl	d1d0 <rb_ssl_read_or_write.isra.0>
    dd44:	add	sp, sp, #12
    dd48:	pop	{pc}		; (ldr pc, [sp], #4)

0000dd4c <rb_supports_ssl>:
    dd4c:	mov	r0, #1
    dd50:	bx	lr

0000dd54 <rb_ssl_handshake_count>:
    dd54:	ldr	r0, [r0, #60]	; 0x3c
    dd58:	bx	lr

0000dd5c <rb_ssl_clear_handshake_count>:
    dd5c:	mov	r3, #0
    dd60:	str	r3, [r0, #60]	; 0x3c
    dd64:	bx	lr

0000dd68 <rb_ssl_start_accepted>:
    dd68:	push	{r4, r5, r6, r7, r8, lr}
    dd6c:	mov	r4, r0
    dd70:	ldrb	ip, [r0, #17]
    dd74:	mov	r8, r1
    dd78:	mov	r0, #1
    dd7c:	orr	ip, ip, #32
    dd80:	mov	r1, #144	; 0x90
    dd84:	strb	ip, [r4, #17]
    dd88:	mov	r6, r3
    dd8c:	mov	r7, r2
    dd90:	bl	45ec <calloc@plt>
    dd94:	subs	r3, r0, #0
    dd98:	beq	ddf0 <rb_ssl_start_accepted+0x88>
    dd9c:	mov	r5, #0
    dda0:	str	r3, [r4, #52]	; 0x34
    dda4:	str	r8, [r3, #132]	; 0x84
    dda8:	str	r7, [r3, #140]	; 0x8c
    ddac:	str	r5, [r3, #128]	; 0x80
    ddb0:	mov	r1, r5
    ddb4:	mov	r2, #128	; 0x80
    ddb8:	bl	4628 <memset@plt>
    ddbc:	ldr	r2, [pc, #48]	; ddf4 <rb_ssl_start_accepted+0x8c>
    ddc0:	mov	r3, r5
    ddc4:	mov	r1, r6
    ddc8:	mov	r0, r4
    ddcc:	add	r2, pc, r2
    ddd0:	bl	43e8 <rb_settimeout@plt>
    ddd4:	mov	r1, r5
    ddd8:	mov	r0, r4
    dddc:	bl	d2e8 <rb_ssl_init_fd>
    dde0:	mov	r1, r5
    dde4:	mov	r0, r4
    dde8:	pop	{r4, r5, r6, r7, r8, lr}
    ddec:	b	cf28 <rb_ssl_accept_common>
    ddf0:	bl	4988 <rb_outofmemory@plt>
    ddf4:	.word	0xffffef9c

0000ddf8 <rb_ssl_accept_setup>:
    ddf8:	push	{r4, r5, r6, r7, r8, lr}
    ddfc:	mov	r4, r1
    de00:	ldrb	ip, [r1, #17]
    de04:	mov	r8, r0
    de08:	mov	r1, #144	; 0x90
    de0c:	orr	ip, ip, #32
    de10:	mov	r0, #1
    de14:	strb	ip, [r4, #17]
    de18:	mov	r7, r2
    de1c:	mov	r6, r3
    de20:	bl	45ec <calloc@plt>
    de24:	subs	r5, r0, #0
    de28:	beq	de98 <rb_ssl_accept_setup+0xa0>
    de2c:	str	r5, [r4, #52]	; 0x34
    de30:	ldr	r3, [r8, #52]	; 0x34
    de34:	mov	r2, #128	; 0x80
    de38:	ldr	r1, [r3, #132]	; 0x84
    de3c:	ldr	r3, [r3, #140]	; 0x8c
    de40:	str	r1, [r5, #132]	; 0x84
    de44:	str	r3, [r5, #140]	; 0x8c
    de48:	str	r6, [r5, #128]	; 0x80
    de4c:	mov	r1, #0
    de50:	bl	4628 <memset@plt>
    de54:	mov	r2, r6
    de58:	mov	r1, r7
    de5c:	mov	r0, r5
    de60:	bl	4808 <memcpy@plt>
    de64:	ldr	r2, [pc, #48]	; de9c <rb_ssl_accept_setup+0xa4>
    de68:	mov	r0, r4
    de6c:	mov	r3, #0
    de70:	add	r2, pc, r2
    de74:	mov	r1, #10
    de78:	bl	43e8 <rb_settimeout@plt>
    de7c:	mov	r0, r4
    de80:	mov	r1, #0
    de84:	bl	d2e8 <rb_ssl_init_fd>
    de88:	mov	r0, r4
    de8c:	mov	r1, #0
    de90:	pop	{r4, r5, r6, r7, r8, lr}
    de94:	b	cf28 <rb_ssl_accept_common>
    de98:	bl	4988 <rb_outofmemory@plt>
    de9c:	.word	0xffffeef8

0000dea0 <rb_ssl_listen>:
    dea0:	push	{r4, lr}
    dea4:	mov	r4, r0
    dea8:	bl	4bf8 <rb_listen@plt>
    deac:	mov	r3, #52	; 0x34
    deb0:	strb	r3, [r4, #17]
    deb4:	pop	{r4, pc}

0000deb8 <rb_connect_tcp_ssl>:
    deb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    debc:	subs	r4, r0, #0
    dec0:	ldr	r9, [sp, #32]
    dec4:	ldr	r8, [sp, #36]	; 0x24
    dec8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    decc:	mov	r5, r1
    ded0:	mov	r0, #1
    ded4:	mov	r1, #12
    ded8:	mov	r7, r3
    dedc:	mov	r6, r2
    dee0:	bl	45ec <calloc@plt>
    dee4:	cmp	r0, #0
    dee8:	beq	df18 <rb_connect_tcp_ssl+0x60>
    deec:	ldr	r3, [pc, #40]	; df1c <rb_connect_tcp_ssl+0x64>
    def0:	stm	r0, {r7, r9}
    def4:	str	r8, [r0, #8]
    def8:	mov	r2, r6
    defc:	str	r0, [sp, #32]
    df00:	str	r8, [sp, #36]	; 0x24
    df04:	mov	r1, r5
    df08:	mov	r0, r4
    df0c:	add	r3, pc, r3
    df10:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    df14:	b	4424 <rb_connect_tcp@plt>
    df18:	bl	4988 <rb_outofmemory@plt>
    df1c:	.word	0xfffff4b0

0000df20 <rb_ssl_start_connected>:
    df20:	push	{r4, r5, r6, r7, r8, lr}
    df24:	subs	r4, r0, #0
    df28:	popeq	{r4, r5, r6, r7, r8, pc}
    df2c:	mov	r8, r1
    df30:	mov	r0, #1
    df34:	mov	r1, #12
    df38:	mov	r6, r3
    df3c:	mov	r7, r2
    df40:	bl	45ec <calloc@plt>
    df44:	subs	r5, r0, #0
    df48:	beq	dfb8 <rb_ssl_start_connected+0x98>
    df4c:	str	r7, [r5, #4]
    df50:	str	r8, [r5]
    df54:	str	r6, [r5, #8]
    df58:	mov	r1, #268	; 0x10c
    df5c:	mov	r0, #1
    df60:	bl	45ec <calloc@plt>
    df64:	cmp	r0, #0
    df68:	beq	dfb8 <rb_ssl_start_connected+0x98>
    df6c:	ldrb	r3, [r4, #17]
    df70:	ldr	r2, [pc, #68]	; dfbc <rb_ssl_start_connected+0x9c>
    df74:	str	r0, [r4, #48]	; 0x30
    df78:	orr	r3, r3, #32
    df7c:	str	r8, [r0, #260]	; 0x104
    df80:	str	r7, [r0, #264]	; 0x108
    df84:	mov	r1, r6
    df88:	strb	r3, [r4, #17]
    df8c:	mov	r0, r4
    df90:	mov	r3, r5
    df94:	add	r2, pc, r2
    df98:	bl	43e8 <rb_settimeout@plt>
    df9c:	mov	r0, r4
    dfa0:	mov	r1, #1
    dfa4:	bl	d2e8 <rb_ssl_init_fd>
    dfa8:	mov	r1, r5
    dfac:	mov	r0, r4
    dfb0:	pop	{r4, r5, r6, r7, r8, lr}
    dfb4:	b	d0bc <rb_ssl_connect_common>
    dfb8:	bl	4988 <rb_outofmemory@plt>
    dfbc:	.word	0xfffff114

0000dfc0 <rb_event_frequency.part.1>:
    dfc0:	cmp	r0, #0
    dfc4:	rsblt	r0, r0, #0
    dfc8:	push	{r4, lr}
    dfcc:	lsl	r0, r0, #1
    dfd0:	ldr	r4, [pc, #60]	; e014 <rb_event_frequency.part.1+0x54>
    dfd4:	smull	r3, r4, r4, r0
    dfd8:	sub	r4, r4, r0, asr #31
    dfdc:	bl	4b44 <rand@plt>
    dfe0:	ldr	r3, [pc, #48]	; e018 <rb_event_frequency.part.1+0x58>
    dfe4:	mov	r2, #1000	; 0x3e8
    dfe8:	smull	lr, ip, r3, r0
    dfec:	asr	r1, r0, #31
    dff0:	rsb	r1, r1, ip, asr #6
    dff4:	mul	r2, r2, r1
    dff8:	sub	r0, r0, r2
    dffc:	mul	r0, r4, r0
    e000:	smull	r2, r3, r3, r0
    e004:	asr	r0, r0, #31
    e008:	rsb	r0, r0, r3, asr #6
    e00c:	add	r0, r0, r4
    e010:	pop	{r4, pc}
    e014:	.word	0x55555556
    e018:	.word	0x10624dd3

0000e01c <rb_event_add_common>:
    e01c:	push	{r4, r5, r6, r7, r8, lr}
    e020:	mov	r8, r0
    e024:	mov	r6, r1
    e028:	mov	r0, #1
    e02c:	mov	r1, #48	; 0x30
    e030:	mov	r7, r2
    e034:	mov	r5, r3
    e038:	bl	45ec <calloc@plt>
    e03c:	subs	r4, r0, #0
    e040:	beq	e108 <rb_event_add_common+0xec>
    e044:	str	r6, [r4, #12]
    e048:	mov	r0, #33	; 0x21
    e04c:	bl	49ac <malloc@plt>
    e050:	subs	r6, r0, #0
    e054:	beq	e108 <rb_event_add_common+0xec>
    e058:	mov	r1, r8
    e05c:	mov	r2, #33	; 0x21
    e060:	bl	46a0 <rb_strlcpy@plt>
    e064:	str	r6, [r4, #20]
    e068:	str	r7, [r4, #16]
    e06c:	bl	47f0 <rb_current_time@plt>
    e070:	ldr	r1, [pc, #164]	; e11c <rb_event_add_common+0x100>
    e074:	ldr	r3, [sp, #24]
    e078:	add	r1, pc, r1
    e07c:	str	r3, [r4, #24]
    e080:	ldr	r2, [r1]
    e084:	mov	ip, #0
    e088:	cmn	r2, #1
    e08c:	movne	r3, #0
    e090:	moveq	r3, #1
    e094:	str	r5, [r4, #32]
    e098:	str	ip, [r4, #44]	; 0x2c
    e09c:	str	r4, [r4]
    e0a0:	add	r0, r0, r5
    e0a4:	cmp	r0, r2
    e0a8:	orrlt	r3, r3, #1
    e0ac:	ldr	r2, [pc, #108]	; e120 <rb_event_add_common+0x104>
    e0b0:	cmp	r3, ip
    e0b4:	add	r2, pc, r2
    e0b8:	strne	r0, [r1]
    e0bc:	ldr	r3, [r2]
    e0c0:	mov	r1, #0
    e0c4:	cmp	r3, r1
    e0c8:	str	r0, [r4, #28]
    e0cc:	str	r1, [r4, #4]
    e0d0:	str	r3, [r4, #8]
    e0d4:	strne	r4, [r3, #4]
    e0d8:	beq	e10c <rb_event_add_common+0xf0>
    e0dc:	ldr	r3, [pc, #64]	; e124 <rb_event_add_common+0x108>
    e0e0:	mov	r1, r5
    e0e4:	add	r3, pc, r3
    e0e8:	mov	r0, r4
    e0ec:	ldr	r2, [r3, #8]
    e0f0:	str	r4, [r3]
    e0f4:	add	r2, r2, #1
    e0f8:	str	r2, [r3, #8]
    e0fc:	bl	bc78 <rb_io_sched_event>
    e100:	mov	r0, r4
    e104:	pop	{r4, r5, r6, r7, r8, pc}
    e108:	bl	4988 <rb_outofmemory@plt>
    e10c:	ldr	r3, [r2, #4]
    e110:	cmp	r3, #0
    e114:	streq	r4, [r2, #4]
    e118:	b	e0dc <rb_event_add_common+0xc0>
    e11c:	.word	0x0001a404
    e120:	.word	0x0002cd60
    e124:	.word	0x0002cd30

0000e128 <rb_event_add>:
    e128:	cmp	r3, #0
    e12c:	push	{r4, r5, r6, lr}
    e130:	mov	r4, r0
    e134:	sub	sp, sp, #8
    e138:	mov	r5, r1
    e13c:	mov	r6, r2
    e140:	ble	e160 <rb_event_add+0x38>
    e144:	str	r3, [sp]
    e148:	mov	r2, r6
    e14c:	mov	r1, r5
    e150:	mov	r0, r4
    e154:	bl	e01c <rb_event_add_common>
    e158:	add	sp, sp, #8
    e15c:	pop	{r4, r5, r6, pc}
    e160:	mov	r1, r0
    e164:	ldr	r0, [pc, #16]	; e17c <rb_event_add+0x54>
    e168:	mov	r2, r3
    e16c:	add	r0, pc, r0
    e170:	bl	491c <rb_lib_log@plt>
    e174:	mov	r3, #1
    e178:	b	e144 <rb_event_add+0x1c>
    e17c:	.word	0x000083dc

0000e180 <rb_event_addonce>:
    e180:	cmp	r3, #0
    e184:	push	{r4, r5, r6, lr}
    e188:	mov	r4, r0
    e18c:	sub	sp, sp, #8
    e190:	mov	r5, r1
    e194:	mov	r6, r2
    e198:	ble	e1bc <rb_event_addonce+0x3c>
    e19c:	mov	ip, #0
    e1a0:	mov	r2, r6
    e1a4:	mov	r1, r5
    e1a8:	mov	r0, r4
    e1ac:	str	ip, [sp]
    e1b0:	bl	e01c <rb_event_add_common>
    e1b4:	add	sp, sp, #8
    e1b8:	pop	{r4, r5, r6, pc}
    e1bc:	mov	r1, r0
    e1c0:	ldr	r0, [pc, #16]	; e1d8 <rb_event_addonce+0x58>
    e1c4:	mov	r2, r3
    e1c8:	add	r0, pc, r0
    e1cc:	bl	491c <rb_lib_log@plt>
    e1d0:	mov	r3, #1
    e1d4:	b	e19c <rb_event_addonce+0x1c>
    e1d8:	.word	0x000083c4

0000e1dc <rb_event_delete>:
    e1dc:	subs	r3, r0, #0
    e1e0:	bxeq	lr
    e1e4:	mov	r2, #1
    e1e8:	str	r2, [r3, #44]	; 0x2c
    e1ec:	b	bcd4 <rb_io_unsched_event>

0000e1f0 <rb_event_find_delete>:
    e1f0:	ldr	r3, [pc, #76]	; e244 <rb_event_find_delete+0x54>
    e1f4:	add	r3, pc, r3
    e1f8:	ldr	r3, [r3]
    e1fc:	cmp	r3, #0
    e200:	bne	e214 <rb_event_find_delete+0x24>
    e204:	b	e238 <rb_event_find_delete+0x48>
    e208:	ldr	r3, [r3, #8]
    e20c:	cmp	r3, #0
    e210:	beq	e238 <rb_event_find_delete+0x48>
    e214:	ldr	r2, [r3]
    e218:	ldr	ip, [r2, #12]
    e21c:	cmp	r0, ip
    e220:	bne	e208 <rb_event_find_delete+0x18>
    e224:	ldr	ip, [r2, #16]
    e228:	cmp	r1, ip
    e22c:	bne	e208 <rb_event_find_delete+0x18>
    e230:	mov	r0, r2
    e234:	b	449c <rb_event_delete@plt>
    e238:	mov	r2, r3
    e23c:	mov	r0, r2
    e240:	b	449c <rb_event_delete@plt>
    e244:	.word	0x0002cc20

0000e248 <rb_event_addish>:
    e248:	mov	ip, r3
    e24c:	eor	r3, r3, r3, asr #31
    e250:	sub	r3, r3, ip, asr #31
    e254:	vldr	d7, [pc, #100]	; e2c0 <rb_event_addish+0x78>
    e258:	vmov	s13, r3
    e25c:	push	{r4, r5, lr}
    e260:	mov	r5, r0
    e264:	sub	sp, sp, #20
    e268:	vcvt.f64.s32	d6, s13
    e26c:	vcmpe.f64	d6, d7
    e270:	vmrs	APSR_nzcv, fpscr
    e274:	movlt	r4, r3
    e278:	blt	e28c <rb_event_addish+0x44>
    e27c:	cmp	ip, #0
    e280:	rsb	r4, r3, #0
    e284:	moveq	r3, r4
    e288:	bne	e2a0 <rb_event_addish+0x58>
    e28c:	str	r4, [sp]
    e290:	mov	r0, r5
    e294:	bl	e01c <rb_event_add_common>
    e298:	add	sp, sp, #20
    e29c:	pop	{r4, r5, pc}
    e2a0:	mov	r0, r4
    e2a4:	str	r2, [sp, #12]
    e2a8:	str	r1, [sp, #8]
    e2ac:	bl	dfc0 <rb_event_frequency.part.1>
    e2b0:	ldr	r1, [sp, #8]
    e2b4:	ldr	r2, [sp, #12]
    e2b8:	mov	r3, r0
    e2bc:	b	e28c <rb_event_addish+0x44>
    e2c0:	.word	0x00000000
    e2c4:	.word	0x40080000

0000e2c8 <rb_run_one_event>:
    e2c8:	push	{r4, r5, r6, lr}
    e2cc:	mov	r4, r0
    e2d0:	ldr	r0, [pc, #132]	; e35c <rb_run_one_event+0x94>
    e2d4:	ldr	r1, [r4, #20]
    e2d8:	add	r0, pc, r0
    e2dc:	mov	r2, #33	; 0x21
    e2e0:	add	r0, r0, #12
    e2e4:	bl	46a0 <rb_strlcpy@plt>
    e2e8:	ldr	r3, [r4, #12]
    e2ec:	ldr	r0, [r4, #16]
    e2f0:	blx	r3
    e2f4:	ldr	r3, [r4, #24]
    e2f8:	cmp	r3, #0
    e2fc:	beq	e348 <rb_run_one_event+0x80>
    e300:	bl	47f0 <rb_current_time@plt>
    e304:	mov	r5, r0
    e308:	ldr	r0, [r4, #24]
    e30c:	cmp	r0, #0
    e310:	blt	e354 <rb_run_one_event+0x8c>
    e314:	ldr	r1, [pc, #68]	; e360 <rb_run_one_event+0x98>
    e318:	add	r0, r5, r0
    e31c:	add	r1, pc, r1
    e320:	str	r0, [r4, #28]
    e324:	ldr	r2, [r1]
    e328:	cmn	r2, #1
    e32c:	movne	r3, #0
    e330:	moveq	r3, #1
    e334:	cmp	r0, r2
    e338:	orrlt	r3, r3, #1
    e33c:	cmp	r3, #0
    e340:	strne	r0, [r1]
    e344:	pop	{r4, r5, r6, pc}
    e348:	mov	r0, r4
    e34c:	pop	{r4, r5, r6, lr}
    e350:	b	449c <rb_event_delete@plt>
    e354:	bl	dfc0 <rb_event_frequency.part.1>
    e358:	b	e314 <rb_run_one_event+0x4c>
    e35c:	.word	0x0002cb3c
    e360:	.word	0x0001a160

0000e364 <rb_event_run>:
    e364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e368:	sub	sp, sp, #12
    e36c:	bl	bd20 <rb_io_supports_event>
    e370:	cmp	r0, #0
    e374:	bne	e48c <rb_event_run+0x128>
    e378:	ldr	r3, [pc, #508]	; e57c <rb_event_run+0x218>
    e37c:	ldr	r2, [pc, #508]	; e580 <rb_event_run+0x21c>
    e380:	add	r3, pc, r3
    e384:	add	r2, pc, r2
    e388:	ldr	r3, [r3]
    e38c:	mvn	r1, #0
    e390:	cmp	r3, #0
    e394:	str	r1, [r2]
    e398:	beq	e48c <rb_event_run+0x128>
    e39c:	ldr	r8, [pc, #480]	; e584 <rb_event_run+0x220>
    e3a0:	ldr	r2, [pc, #480]	; e588 <rb_event_run+0x224>
    e3a4:	ldr	r6, [pc, #480]	; e58c <rb_event_run+0x228>
    e3a8:	ldr	r7, [pc, #480]	; e590 <rb_event_run+0x22c>
    e3ac:	ldr	sl, [pc, #480]	; e594 <rb_event_run+0x230>
    e3b0:	add	r8, pc, r8
    e3b4:	add	r2, pc, r2
    e3b8:	ldr	r5, [r3, #8]
    e3bc:	add	r6, pc, r6
    e3c0:	add	r7, pc, r7
    e3c4:	str	r2, [sp]
    e3c8:	add	sl, pc, sl
    e3cc:	add	r9, r8, #12
    e3d0:	b	e440 <rb_event_run+0xdc>
    e3d4:	ldr	r3, [r4, #8]
    e3d8:	cmp	r3, #0
    e3dc:	beq	e4a4 <rb_event_run+0x140>
    e3e0:	ldr	r2, [r4, #4]
    e3e4:	str	r2, [r3, #4]
    e3e8:	ldr	r2, [r4, #4]
    e3ec:	cmp	r2, #0
    e3f0:	strne	r3, [r2, #8]
    e3f4:	beq	e494 <rb_event_run+0x130>
    e3f8:	ldr	r1, [pc, #408]	; e598 <rb_event_run+0x234>
    e3fc:	ldr	r0, [r4, #20]
    e400:	add	r1, pc, r1
    e404:	mov	r2, #0
    e408:	ldr	r3, [r1, #8]
    e40c:	cmp	r0, r2
    e410:	sub	r3, r3, #1
    e414:	str	r3, [r1, #8]
    e418:	str	r2, [r4, #4]
    e41c:	str	r2, [r4, #8]
    e420:	beq	e428 <rb_event_run+0xc4>
    e424:	bl	46f4 <free@plt>
    e428:	mov	r0, r4
    e42c:	bl	46f4 <free@plt>
    e430:	cmp	r5, #0
    e434:	beq	e48c <rb_event_run+0x128>
    e438:	mov	r3, r5
    e43c:	ldr	r5, [r5, #8]
    e440:	ldr	r4, [r3]
    e444:	ldr	r3, [r4, #44]	; 0x2c
    e448:	cmp	r3, #0
    e44c:	bne	e3d4 <rb_event_run+0x70>
    e450:	ldr	fp, [r4, #28]
    e454:	bl	47f0 <rb_current_time@plt>
    e458:	cmp	fp, r0
    e45c:	ble	e4b8 <rb_event_run+0x154>
    e460:	ldr	r2, [r6]
    e464:	ldr	r1, [r4, #28]
    e468:	cmn	r2, #1
    e46c:	movne	r3, #0
    e470:	moveq	r3, #1
    e474:	cmp	r1, r2
    e478:	orrlt	r3, r3, #1
    e47c:	cmp	r3, #0
    e480:	strne	r1, [r6]
    e484:	cmp	r5, #0
    e488:	bne	e438 <rb_event_run+0xd4>
    e48c:	add	sp, sp, #12
    e490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e494:	ldr	r2, [pc, #256]	; e59c <rb_event_run+0x238>
    e498:	add	r2, pc, r2
    e49c:	str	r3, [r2]
    e4a0:	b	e3f8 <rb_event_run+0x94>
    e4a4:	ldr	r1, [pc, #244]	; e5a0 <rb_event_run+0x23c>
    e4a8:	ldr	r2, [r4, #4]
    e4ac:	add	r1, pc, r1
    e4b0:	str	r2, [r1, #4]
    e4b4:	b	e3ec <rb_event_run+0x88>
    e4b8:	mov	r2, #33	; 0x21
    e4bc:	ldr	r1, [r4, #20]
    e4c0:	mov	r0, r9
    e4c4:	bl	46a0 <rb_strlcpy@plt>
    e4c8:	ldr	r3, [r4, #12]
    e4cc:	ldr	r0, [r4, #16]
    e4d0:	blx	r3
    e4d4:	ldr	r3, [r4, #24]
    e4d8:	cmp	r3, #0
    e4dc:	bne	e52c <rb_event_run+0x1c8>
    e4e0:	ldmib	r4, {r2, r3}
    e4e4:	ldr	r0, [r4, #20]
    e4e8:	cmp	r3, #0
    e4ec:	strne	r2, [r3, #4]
    e4f0:	ldrne	r2, [r4, #4]
    e4f4:	streq	r2, [r8, #4]
    e4f8:	cmp	r2, #0
    e4fc:	strne	r3, [r2, #8]
    e500:	ldreq	r2, [sp]
    e504:	streq	r3, [r2]
    e508:	ldr	r3, [r7, #8]
    e50c:	mov	r2, #0
    e510:	sub	r3, r3, #1
    e514:	cmp	r0, #0
    e518:	str	r3, [r7, #8]
    e51c:	str	r2, [r4, #4]
    e520:	str	r2, [r4, #8]
    e524:	bne	e424 <rb_event_run+0xc0>
    e528:	b	e428 <rb_event_run+0xc4>
    e52c:	bl	47f0 <rb_current_time@plt>
    e530:	mov	r3, r0
    e534:	ldr	r0, [r4, #24]
    e538:	cmp	r0, #0
    e53c:	blt	e56c <rb_event_run+0x208>
    e540:	ldr	r2, [sl]
    e544:	add	r0, r3, r0
    e548:	cmn	r2, #1
    e54c:	movne	r3, #0
    e550:	moveq	r3, #1
    e554:	cmp	r0, r2
    e558:	orrlt	r3, r3, #1
    e55c:	cmp	r3, #0
    e560:	str	r0, [r4, #28]
    e564:	strne	r0, [sl]
    e568:	b	e430 <rb_event_run+0xcc>
    e56c:	str	r3, [sp, #4]
    e570:	bl	dfc0 <rb_event_frequency.part.1>
    e574:	ldr	r3, [sp, #4]
    e578:	b	e540 <rb_event_run+0x1dc>
    e57c:	.word	0x0002ca94
    e580:	.word	0x0001a0f8
    e584:	.word	0x0002ca64
    e588:	.word	0x0002ca60
    e58c:	.word	0x0001a0c0
    e590:	.word	0x0002ca54
    e594:	.word	0x0001a0b4
    e598:	.word	0x0002ca14
    e59c:	.word	0x0002c97c
    e5a0:	.word	0x0002c968

0000e5a4 <rb_event_io_register_all>:
    e5a4:	push	{r4, lr}
    e5a8:	bl	bd20 <rb_io_supports_event>
    e5ac:	cmp	r0, #0
    e5b0:	popeq	{r4, pc}
    e5b4:	ldr	r3, [pc, #40]	; e5e4 <rb_event_io_register_all+0x40>
    e5b8:	ldr	r4, [pc, r3]
    e5bc:	cmp	r4, #0
    e5c0:	popeq	{r4, pc}
    e5c4:	ldr	r3, [r4]
    e5c8:	mov	r0, r3
    e5cc:	ldr	r1, [r3, #32]
    e5d0:	bl	bc78 <rb_io_sched_event>
    e5d4:	ldr	r4, [r4, #8]
    e5d8:	cmp	r4, #0
    e5dc:	bne	e5c4 <rb_event_io_register_all+0x20>
    e5e0:	pop	{r4, pc}
    e5e4:	.word	0x0002c85c

0000e5e8 <rb_event_init>:
    e5e8:	ldr	r0, [pc, #20]	; e604 <rb_event_init+0x1c>
    e5ec:	ldr	r1, [pc, #20]	; e608 <rb_event_init+0x20>
    e5f0:	add	r0, pc, r0
    e5f4:	mov	r2, #33	; 0x21
    e5f8:	add	r0, r0, #12
    e5fc:	add	r1, pc, r1
    e600:	b	46a0 <rb_strlcpy@plt>
    e604:	.word	0x0002c824
    e608:	.word	0x00007fd4

0000e60c <rb_dump_events>:
    e60c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e610:	sub	sp, sp, #524	; 0x20c
    e614:	ldr	r4, [pc, #184]	; e6d4 <rb_dump_events+0xc8>
    e618:	ldr	r2, [pc, #184]	; e6d8 <rb_dump_events+0xcc>
    e61c:	add	r6, sp, #8
    e620:	add	r4, pc, r4
    e624:	add	r3, r4, #12
    e628:	mov	r7, r0
    e62c:	mov	r8, r1
    e630:	add	r2, pc, r2
    e634:	mov	r1, #512	; 0x200
    e638:	mov	r0, r6
    e63c:	bl	4bb0 <snprintf@plt>
    e640:	mov	r1, r8
    e644:	mov	r0, r6
    e648:	blx	r7
    e64c:	ldr	r1, [pc, #136]	; e6dc <rb_dump_events+0xd0>
    e650:	mov	r2, #512	; 0x200
    e654:	add	r1, pc, r1
    e658:	mov	r0, r6
    e65c:	bl	46a0 <rb_strlcpy@plt>
    e660:	mov	r1, r8
    e664:	mov	r0, r6
    e668:	blx	r7
    e66c:	ldr	r4, [r4]
    e670:	cmp	r4, #0
    e674:	beq	e6cc <rb_dump_events+0xc0>
    e678:	ldr	sl, [pc, #96]	; e6e0 <rb_dump_events+0xd4>
    e67c:	add	sl, pc, sl
    e680:	ldr	fp, [r4]
    e684:	ldr	r9, [fp, #20]
    e688:	ldr	r5, [fp, #28]
    e68c:	bl	47f0 <rb_current_time@plt>
    e690:	ldr	r2, [fp, #24]
    e694:	mov	r3, r9
    e698:	str	r2, [sp, #4]
    e69c:	mov	r1, #512	; 0x200
    e6a0:	mov	r2, sl
    e6a4:	sub	r0, r5, r0
    e6a8:	str	r0, [sp]
    e6ac:	mov	r0, r6
    e6b0:	bl	4bb0 <snprintf@plt>
    e6b4:	mov	r1, r8
    e6b8:	mov	r0, r6
    e6bc:	blx	r7
    e6c0:	ldr	r4, [r4, #8]
    e6c4:	cmp	r4, #0
    e6c8:	bne	e680 <rb_dump_events+0x74>
    e6cc:	add	sp, sp, #524	; 0x20c
    e6d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6d4:	.word	0x0002c7f4
    e6d8:	.word	0x00007fa8
    e6dc:	.word	0x00007f9c
    e6e0:	.word	0x00007fa0

0000e6e4 <rb_set_back_events>:
    e6e4:	ldr	r3, [pc, #52]	; e720 <rb_set_back_events+0x3c>
    e6e8:	ldr	r2, [pc, r3]
    e6ec:	cmp	r2, #0
    e6f0:	bxeq	lr
    e6f4:	mov	ip, #0
    e6f8:	ldr	r1, [r2]
    e6fc:	ldr	r2, [r2, #8]
    e700:	ldr	r3, [r1, #28]
    e704:	cmp	r3, r0
    e708:	sub	r3, r3, r0
    e70c:	strgt	r3, [r1, #28]
    e710:	strle	ip, [r1, #28]
    e714:	cmp	r2, #0
    e718:	bne	e6f8 <rb_set_back_events+0x14>
    e71c:	bx	lr
    e720:	.word	0x0002c72c

0000e724 <rb_event_update>:
    e724:	push	{r4, r5, r6, lr}
    e728:	subs	r5, r0, #0
    e72c:	popeq	{r4, r5, r6, pc}
    e730:	cmp	r1, #0
    e734:	mov	r4, r1
    e738:	str	r1, [r5, #24]
    e73c:	blt	e764 <rb_event_update+0x40>
    e740:	bl	47f0 <rb_current_time@plt>
    e744:	ldr	r3, [r5, #28]
    e748:	add	r0, r0, r4
    e74c:	cmp	r0, r3
    e750:	popge	{r4, r5, r6, pc}
    e754:	bl	47f0 <rb_current_time@plt>
    e758:	add	r0, r0, r4
    e75c:	str	r0, [r5, #28]
    e760:	pop	{r4, r5, r6, pc}
    e764:	mov	r0, r1
    e768:	bl	dfc0 <rb_event_frequency.part.1>
    e76c:	mov	r4, r0
    e770:	b	e740 <rb_event_update+0x1c>

0000e774 <rb_event_next>:
    e774:	ldr	r3, [pc, #4]	; e780 <rb_event_next+0xc>
    e778:	ldr	r0, [pc, r3]
    e77c:	bx	lr
    e780:	.word	0x00019d04

0000e784 <rb_ctime>:
    e784:	push	{r4, r5, lr}
    e788:	sub	sp, sp, #84	; 0x54
    e78c:	mov	r4, r1
    e790:	str	r0, [sp, #28]
    e794:	add	r1, sp, #36	; 0x24
    e798:	add	r0, sp, #28
    e79c:	mov	r5, r2
    e7a0:	bl	49f4 <gmtime_r@plt>
    e7a4:	cmp	r4, #0
    e7a8:	beq	e824 <rb_ctime+0xa0>
    e7ac:	cmp	r0, #0
    e7b0:	beq	e838 <rb_ctime+0xb4>
    e7b4:	ldr	r3, [r0, #20]
    e7b8:	ldr	r1, [r0, #24]
    e7bc:	add	r3, r3, #1888	; 0x760
    e7c0:	add	r3, r3, #12
    e7c4:	str	r3, [sp, #20]
    e7c8:	ldr	r3, [r0]
    e7cc:	ldr	ip, [pc, #132]	; e858 <rb_ctime+0xd4>
    e7d0:	str	r3, [sp, #16]
    e7d4:	ldr	r2, [r0, #4]
    e7d8:	add	ip, pc, ip
    e7dc:	str	r2, [sp, #12]
    e7e0:	ldr	r2, [r0, #8]
    e7e4:	ldr	r3, [ip, r1, lsl #2]
    e7e8:	str	r2, [sp, #8]
    e7ec:	ldr	r2, [r0, #12]
    e7f0:	mov	r1, r5
    e7f4:	str	r2, [sp, #4]
    e7f8:	ldr	lr, [r0, #16]
    e7fc:	ldr	r2, [pc, #88]	; e85c <rb_ctime+0xd8>
    e800:	mov	r0, r4
    e804:	add	ip, ip, lr, lsl #2
    e808:	add	r2, pc, r2
    e80c:	ldr	ip, [ip, #28]
    e810:	str	ip, [sp]
    e814:	bl	4bb0 <snprintf@plt>
    e818:	mov	r0, r4
    e81c:	add	sp, sp, #84	; 0x54
    e820:	pop	{r4, r5, pc}
    e824:	ldr	r4, [pc, #52]	; e860 <rb_ctime+0xdc>
    e828:	cmp	r0, #0
    e82c:	add	r4, pc, r4
    e830:	mov	r5, #128	; 0x80
    e834:	bne	e7b4 <rb_ctime+0x30>
    e838:	ldr	r1, [pc, #36]	; e864 <rb_ctime+0xe0>
    e83c:	mov	r2, r5
    e840:	add	r1, pc, r1
    e844:	mov	r0, r4
    e848:	bl	46a0 <rb_strlcpy@plt>
    e84c:	mov	r0, r4
    e850:	add	sp, sp, #84	; 0x54
    e854:	pop	{r4, r5, pc}
    e858:	.word	0x00019680
    e85c:	.word	0x0000807c
    e860:	.word	0x0002c618
    e864:	.word	0x00008384

0000e868 <rb_date>:
    e868:	push	{r4, r5, lr}
    e86c:	sub	sp, sp, #84	; 0x54
    e870:	mov	r4, r1
    e874:	str	r0, [sp, #28]
    e878:	add	r1, sp, #36	; 0x24
    e87c:	add	r0, sp, #28
    e880:	mov	r5, r2
    e884:	bl	49f4 <gmtime_r@plt>
    e888:	cmp	r0, #0
    e88c:	beq	e904 <rb_date+0x9c>
    e890:	ldr	r2, [r0]
    e894:	ldr	r3, [r0, #24]
    e898:	str	r2, [sp, #20]
    e89c:	ldr	r2, [r0, #4]
    e8a0:	ldr	ip, [pc, #124]	; e924 <rb_date+0xbc>
    e8a4:	str	r2, [sp, #16]
    e8a8:	ldr	r2, [r0, #8]
    e8ac:	add	ip, pc, ip
    e8b0:	str	r2, [sp, #12]
    e8b4:	ldr	r1, [r0, #20]
    e8b8:	add	r3, ip, r3, lsl #2
    e8bc:	add	r1, r1, #1888	; 0x760
    e8c0:	add	r1, r1, #12
    e8c4:	str	r1, [sp, #8]
    e8c8:	ldr	r2, [r0, #12]
    e8cc:	ldr	r3, [r3, #76]	; 0x4c
    e8d0:	str	r2, [sp, #4]
    e8d4:	ldr	r0, [r0, #16]
    e8d8:	ldr	r2, [pc, #72]	; e928 <rb_date+0xc0>
    e8dc:	mov	r1, r5
    e8e0:	add	ip, ip, r0, lsl #2
    e8e4:	add	r2, pc, r2
    e8e8:	ldr	ip, [ip, #104]	; 0x68
    e8ec:	mov	r0, r4
    e8f0:	str	ip, [sp]
    e8f4:	bl	4bb0 <snprintf@plt>
    e8f8:	mov	r0, r4
    e8fc:	add	sp, sp, #84	; 0x54
    e900:	pop	{r4, r5, pc}
    e904:	ldr	r1, [pc, #32]	; e92c <rb_date+0xc4>
    e908:	mov	r2, r5
    e90c:	add	r1, pc, r1
    e910:	mov	r0, r4
    e914:	bl	46a0 <rb_strlcpy@plt>
    e918:	mov	r0, r4
    e91c:	add	sp, sp, #84	; 0x54
    e920:	pop	{r4, r5, pc}
    e924:	.word	0x000195ac
    e928:	.word	0x00007fbc
    e92c:	.word	0x000082b8

0000e930 <rb_current_time>:
    e930:	ldr	r3, [pc, #8]	; e940 <rb_current_time+0x10>
    e934:	add	r3, pc, r3
    e938:	ldr	r0, [r3, #128]	; 0x80
    e93c:	bx	lr
    e940:	.word	0x0002c510

0000e944 <rb_current_time_tv>:
    e944:	ldr	r0, [pc, #8]	; e954 <rb_current_time_tv+0x10>
    e948:	add	r0, pc, r0
    e94c:	add	r0, r0, #128	; 0x80
    e950:	bx	lr
    e954:	.word	0x0002c4fc

0000e958 <rb_lib_log>:
    e958:	push	{r0, r1, r2, r3}
    e95c:	push	{r4, r5, lr}
    e960:	sub	sp, sp, #12
    e964:	ldr	r4, [pc, #72]	; e9b4 <rb_lib_log+0x5c>
    e968:	add	r4, pc, r4
    e96c:	ldr	r3, [r4, #136]	; 0x88
    e970:	cmp	r3, #0
    e974:	beq	e9a4 <rb_lib_log+0x4c>
    e978:	add	ip, sp, #28
    e97c:	add	r5, r4, #140	; 0x8c
    e980:	mov	r3, ip
    e984:	mov	r0, r5
    e988:	ldr	r2, [sp, #24]
    e98c:	mov	r1, #512	; 0x200
    e990:	str	ip, [sp, #4]
    e994:	bl	455c <vsnprintf@plt>
    e998:	mov	r0, r5
    e99c:	ldr	r3, [r4, #136]	; 0x88
    e9a0:	blx	r3
    e9a4:	add	sp, sp, #12
    e9a8:	pop	{r4, r5, lr}
    e9ac:	add	sp, sp, #16
    e9b0:	bx	lr
    e9b4:	.word	0x0002c4dc

0000e9b8 <rb_lib_die>:
    e9b8:	push	{r0, r1, r2, r3}
    e9bc:	push	{r4, r5, lr}
    e9c0:	sub	sp, sp, #12
    e9c4:	ldr	r4, [pc, #76]	; ea18 <rb_lib_die+0x60>
    e9c8:	add	r4, pc, r4
    e9cc:	ldr	r3, [r4, #652]	; 0x28c
    e9d0:	cmp	r3, #0
    e9d4:	beq	ea14 <rb_lib_die+0x5c>
    e9d8:	add	ip, sp, #28
    e9dc:	add	r5, r4, #140	; 0x8c
    e9e0:	mov	r3, ip
    e9e4:	ldr	r2, [sp, #24]
    e9e8:	mov	r1, #512	; 0x200
    e9ec:	mov	r0, r5
    e9f0:	str	ip, [sp, #4]
    e9f4:	bl	455c <vsnprintf@plt>
    e9f8:	mov	r0, r5
    e9fc:	ldr	r3, [r4, #652]	; 0x28c
    ea00:	blx	r3
    ea04:	add	sp, sp, #12
    ea08:	pop	{r4, r5, lr}
    ea0c:	add	sp, sp, #16
    ea10:	bx	lr
    ea14:	bl	43c4 <abort@plt>
    ea18:	.word	0x0002c47c

0000ea1c <rb_lib_restart>:
    ea1c:	ldr	r4, [pc, #72]	; ea6c <rb_lib_restart+0x50>
    ea20:	push	{r0, r1, r2, r3}
    ea24:	add	r4, pc, r4
    ea28:	push	{lr}		; (str lr, [sp, #-4]!)
    ea2c:	sub	sp, sp, #12
    ea30:	ldr	r3, [r4, #656]	; 0x290
    ea34:	cmp	r3, #0
    ea38:	beq	ea68 <rb_lib_restart+0x4c>
    ea3c:	add	ip, sp, #20
    ea40:	add	r5, r4, #140	; 0x8c
    ea44:	mov	r3, ip
    ea48:	mov	r0, r5
    ea4c:	ldr	r2, [sp, #16]
    ea50:	mov	r1, #512	; 0x200
    ea54:	str	ip, [sp, #4]
    ea58:	bl	455c <vsnprintf@plt>
    ea5c:	mov	r0, r5
    ea60:	ldr	r3, [r4, #656]	; 0x290
    ea64:	blx	r3
    ea68:	bl	43c4 <abort@plt>
    ea6c:	.word	0x0002c420

0000ea70 <rb_set_time>:
    ea70:	push	{r4, lr}
    ea74:	sub	sp, sp, #8
    ea78:	mov	r0, sp
    ea7c:	mov	r1, #0
    ea80:	bl	45bc <rb_gettimeofday@plt>
    ea84:	cmn	r0, #1
    ea88:	beq	eacc <rb_set_time+0x5c>
    ea8c:	ldr	r3, [pc, #96]	; eaf4 <rb_set_time+0x84>
    ea90:	ldr	r2, [sp]
    ea94:	add	r3, pc, r3
    ea98:	mov	r4, sp
    ea9c:	ldr	r0, [r3, #128]	; 0x80
    eaa0:	cmp	r2, r0
    eaa4:	bge	eab0 <rb_set_time+0x40>
    eaa8:	sub	r0, r0, r2
    eaac:	bl	e6e4 <rb_set_back_events>
    eab0:	ldr	r3, [pc, #64]	; eaf8 <rb_set_time+0x88>
    eab4:	ldm	r4, {r0, r1}
    eab8:	add	r3, pc, r3
    eabc:	add	r3, r3, #128	; 0x80
    eac0:	stm	r3, {r0, r1}
    eac4:	add	sp, sp, #8
    eac8:	pop	{r4, pc}
    eacc:	bl	4ce8 <__errno_location@plt>
    ead0:	ldr	r0, [r0]
    ead4:	bl	43a0 <strerror@plt>
    ead8:	mov	r1, r0
    eadc:	ldr	r0, [pc, #24]	; eafc <rb_set_time+0x8c>
    eae0:	add	r0, pc, r0
    eae4:	bl	491c <rb_lib_log@plt>
    eae8:	ldr	r0, [pc, #16]	; eb00 <rb_set_time+0x90>
    eaec:	add	r0, pc, r0
    eaf0:	bl	4a60 <rb_lib_restart@plt>
    eaf4:	.word	0x0002c3b0
    eaf8:	.word	0x0002c38c
    eafc:	.word	0x00007de8
    eb00:	.word	0x00007df0

0000eb04 <rb_lib_version>:
    eb04:	push	{r4, r5, lr}
    eb08:	sub	sp, sp, #524	; 0x20c
    eb0c:	add	r5, sp, #8
    eb10:	mov	r0, r5
    eb14:	mov	r1, #512	; 0x200
    eb18:	bl	dbdc <rb_get_ssl_info>
    eb1c:	ldr	ip, [pc, #60]	; eb60 <rb_lib_version+0x5c>
    eb20:	ldr	r3, [pc, #60]	; eb64 <rb_lib_version+0x60>
    eb24:	add	ip, pc, ip
    eb28:	ldr	r4, [pc, #56]	; eb68 <rb_lib_version+0x64>
    eb2c:	ldr	r3, [ip, r3]
    eb30:	add	r4, pc, r4
    eb34:	ldr	r2, [pc, #48]	; eb6c <rb_lib_version+0x68>
    eb38:	add	r4, r4, #660	; 0x294
    eb3c:	str	r5, [sp]
    eb40:	add	r2, pc, r2
    eb44:	ldr	r3, [r3]
    eb48:	mov	r0, r4
    eb4c:	mov	r1, #640	; 0x280
    eb50:	bl	4bb0 <snprintf@plt>
    eb54:	mov	r0, r4
    eb58:	add	sp, sp, #524	; 0x20c
    eb5c:	pop	{r4, r5, pc}
    eb60:	.word	0x000194d4
    eb64:	.word	0x000003ac
    eb68:	.word	0x0002c314
    eb6c:	.word	0x00007dac

0000eb70 <rb_lib_init>:
    eb70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    eb74:	mov	r5, r3
    eb78:	mov	sl, r0
    eb7c:	mov	r9, r1
    eb80:	mov	r8, r2
    eb84:	ldr	r6, [sp, #32]
    eb88:	ldr	r4, [sp, #36]	; 0x24
    eb8c:	ldr	r7, [sp, #40]	; 0x28
    eb90:	bl	4994 <rb_set_time@plt>
    eb94:	ldr	ip, [pc, #68]	; ebe0 <rb_lib_init+0x70>
    eb98:	add	ip, pc, ip
    eb9c:	str	sl, [ip, #136]	; 0x88
    eba0:	str	r9, [ip, #656]	; 0x290
    eba4:	str	r8, [ip, #652]	; 0x28c
    eba8:	bl	4604 <rb_event_init@plt>
    ebac:	bl	49dc <rb_init_bh@plt>
    ebb0:	mov	r2, r7
    ebb4:	mov	r1, r6
    ebb8:	mov	r0, r5
    ebbc:	bl	4afc <rb_fdlist_init@plt>
    ebc0:	bl	4388 <rb_init_netio@plt>
    ebc4:	mov	r0, r4
    ebc8:	bl	48d4 <rb_init_rb_dlink_nodes@plt>
    ebcc:	bl	bd20 <rb_io_supports_event>
    ebd0:	cmp	r0, #0
    ebd4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    ebd8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    ebdc:	b	bd3c <rb_io_init_event>
    ebe0:	.word	0x0002c2ac

0000ebe4 <rb_lib_loop>:
    ebe4:	push	{r7, lr}
    ebe8:	mov	r4, r0
    ebec:	bl	4994 <rb_set_time@plt>
    ebf0:	bl	bd20 <rb_io_supports_event>
    ebf4:	cmp	r0, #0
    ebf8:	mvneq	r6, #0
    ebfc:	moveq	r7, #1000	; 0x3e8
    ec00:	beq	ec44 <rb_lib_loop+0x60>
    ec04:	mvn	r4, #0
    ec08:	mov	r0, r4
    ec0c:	bl	4544 <rb_select@plt>
    ec10:	b	ec08 <rb_lib_loop+0x24>
    ec14:	bl	4c34 <rb_event_next@plt>
    ec18:	mov	r3, r6
    ec1c:	subs	r5, r0, #0
    ec20:	ble	ec38 <rb_lib_loop+0x54>
    ec24:	bl	47f0 <rb_current_time@plt>
    ec28:	sub	r0, r5, r0
    ec2c:	cmp	r0, #0
    ec30:	movle	r3, r7
    ec34:	mulgt	r3, r7, r0
    ec38:	mov	r0, r3
    ec3c:	bl	4544 <rb_select@plt>
    ec40:	bl	49c4 <rb_event_run@plt>
    ec44:	subs	r0, r4, #0
    ec48:	beq	ec14 <rb_lib_loop+0x30>
    ec4c:	bl	4544 <rb_select@plt>
    ec50:	b	ec40 <rb_lib_loop+0x5c>

0000ec54 <rb_strtok_r>:
    ec54:	b	4a54 <strtok_r@plt>

0000ec58 <rb_base64_encode>:
    ec58:	cmn	r1, #2
    ec5c:	blt	ed78 <rb_base64_encode+0x120>
    ec60:	push	{r4, r5, r6, r7, r8, lr}
    ec64:	mov	r4, r1
    ec68:	ldr	r1, [pc, #312]	; eda8 <rb_base64_encode+0x150>
    ec6c:	add	r3, r4, #2
    ec70:	mov	r5, r0
    ec74:	smull	r2, r1, r1, r3
    ec78:	sub	r1, r1, r3, asr #31
    ec7c:	mov	r0, #1
    ec80:	add	r1, r1, r1, lsl #2
    ec84:	bl	45ec <calloc@plt>
    ec88:	cmp	r0, #0
    ec8c:	beq	eda4 <rb_base64_encode+0x14c>
    ec90:	cmp	r4, #2
    ec94:	movle	ip, r0
    ec98:	ble	ed14 <rb_base64_encode+0xbc>
    ec9c:	ldr	lr, [pc, #264]	; edac <rb_base64_encode+0x154>
    eca0:	add	r2, r5, #3
    eca4:	add	lr, pc, lr
    eca8:	add	r3, r0, #4
    ecac:	ldrb	r7, [r2, #-3]
    ecb0:	ldrb	r6, [r2, #-2]
    ecb4:	ldrb	r5, [r2, #-1]
    ecb8:	sub	r4, r4, #3
    ecbc:	lsl	ip, r7, #4
    ecc0:	lsl	r1, r6, #2
    ecc4:	and	ip, ip, #48	; 0x30
    ecc8:	and	r1, r1, #60	; 0x3c
    eccc:	add	ip, lr, ip
    ecd0:	add	r1, lr, r1
    ecd4:	and	r8, r5, #63	; 0x3f
    ecd8:	ldrb	r6, [ip, r6, lsr #4]
    ecdc:	ldrb	r7, [lr, r7, lsr #2]
    ece0:	ldrb	ip, [r1, r5, lsr #6]
    ece4:	ldrb	r1, [lr, r8]
    ece8:	cmp	r4, #2
    ecec:	strb	ip, [r3, #-2]
    ecf0:	strb	r1, [r3, #-1]
    ecf4:	strb	r7, [r3, #-4]
    ecf8:	strb	r6, [r3, #-3]
    ecfc:	mov	r1, r2
    ed00:	mov	ip, r3
    ed04:	add	r2, r2, #3
    ed08:	add	r3, r3, #4
    ed0c:	bgt	ecac <rb_base64_encode+0x54>
    ed10:	mov	r5, r1
    ed14:	cmp	r4, #0
    ed18:	beq	ed6c <rb_base64_encode+0x114>
    ed1c:	ldrb	r3, [r5]
    ed20:	ldr	r2, [pc, #136]	; edb0 <rb_base64_encode+0x158>
    ed24:	cmp	r4, #2
    ed28:	add	r2, pc, r2
    ed2c:	ldrb	r1, [r2, r3, lsr #2]
    ed30:	strb	r1, [ip]
    ed34:	bne	ed80 <rb_base64_encode+0x128>
    ed38:	ldrb	lr, [r5, #1]
    ed3c:	lsl	r3, r3, #4
    ed40:	and	r3, r3, #48	; 0x30
    ed44:	add	r3, r2, r3
    ed48:	lsl	r1, lr, #2
    ed4c:	and	r1, r1, #60	; 0x3c
    ed50:	ldrb	lr, [r3, lr, lsr #4]
    ed54:	ldrb	r2, [r2, r1]
    ed58:	mov	r3, #61	; 0x3d
    ed5c:	strb	lr, [ip, #1]
    ed60:	strb	r2, [ip, #2]
    ed64:	strb	r3, [ip, #3]
    ed68:	add	ip, ip, #4
    ed6c:	mov	r3, #0
    ed70:	strb	r3, [ip]
    ed74:	pop	{r4, r5, r6, r7, r8, pc}
    ed78:	mov	r0, #0
    ed7c:	bx	lr
    ed80:	lsl	r3, r3, #4
    ed84:	and	r3, r3, #48	; 0x30
    ed88:	mov	r1, #61	; 0x3d
    ed8c:	ldrb	r3, [r2, r3]
    ed90:	strb	r1, [ip, #2]
    ed94:	strb	r1, [ip, #3]
    ed98:	strb	r3, [ip, #1]
    ed9c:	add	ip, ip, #4
    eda0:	b	ed6c <rb_base64_encode+0x114>
    eda4:	bl	4988 <rb_outofmemory@plt>
    eda8:	.word	0x55555556
    edac:	.word	0x0000799c
    edb0:	.word	0x00007918

0000edb4 <rb_base64_decode>:
    edb4:	push	{r4, r5, r6, r7, r8, lr}
    edb8:	mov	r4, r1
    edbc:	mov	r5, r0
    edc0:	add	r1, r1, #1
    edc4:	mov	r0, #1
    edc8:	mov	r6, r2
    edcc:	bl	45ec <calloc@plt>
    edd0:	subs	r2, r0, #0
    edd4:	beq	eee8 <rb_base64_decode+0x134>
    edd8:	ldr	r0, [pc, #276]	; eef4 <rb_base64_decode+0x140>
    eddc:	mov	lr, #0
    ede0:	mov	r1, r4
    ede4:	mov	ip, lr
    ede8:	add	r0, pc, r0
    edec:	b	ee28 <rb_base64_decode+0x74>
    edf0:	cmp	r4, #3
    edf4:	beq	ee80 <rb_base64_decode+0xcc>
    edf8:	cmp	r4, #1
    edfc:	addeq	r7, lr, #1
    ee00:	ldrbeq	r4, [r2, lr]
    ee04:	lsleq	r8, r3, #4
    ee08:	lslne	r3, r3, #2
    ee0c:	orreq	r3, r4, r3, asr #4
    ee10:	strbeq	r3, [r2, lr]
    ee14:	moveq	lr, r7
    ee18:	strbne	r3, [r2, lr]
    ee1c:	strbeq	r8, [r2, r7]
    ee20:	add	ip, ip, #1
    ee24:	sub	r1, r1, #1
    ee28:	ldrb	r3, [r5], #1
    ee2c:	cmp	r3, #0
    ee30:	beq	eebc <rb_base64_decode+0x108>
    ee34:	cmp	r1, #0
    ee38:	ble	ee94 <rb_base64_decode+0xe0>
    ee3c:	cmp	r3, #61	; 0x3d
    ee40:	beq	ee9c <rb_base64_decode+0xe8>
    ee44:	add	r3, r0, r3, lsl #1
    ee48:	ldrsh	r3, [r3, #68]	; 0x44
    ee4c:	cmp	r3, #0
    ee50:	blt	ee24 <rb_base64_decode+0x70>
    ee54:	and	r4, ip, #3
    ee58:	cmp	r4, #2
    ee5c:	bne	edf0 <rb_base64_decode+0x3c>
    ee60:	ldrb	r4, [r2, lr]
    ee64:	add	r7, lr, #1
    ee68:	lsl	r8, r3, #6
    ee6c:	orr	r3, r4, r3, asr #2
    ee70:	strb	r3, [r2, lr]
    ee74:	strb	r8, [r2, r7]
    ee78:	mov	lr, r7
    ee7c:	b	ee20 <rb_base64_decode+0x6c>
    ee80:	ldrb	r4, [r2, lr]
    ee84:	orr	r3, r4, r3
    ee88:	strb	r3, [r2, lr]
    ee8c:	add	lr, lr, #1
    ee90:	b	ee20 <rb_base64_decode+0x6c>
    ee94:	cmp	r3, #61	; 0x3d
    ee98:	bne	eebc <rb_base64_decode+0x108>
    ee9c:	and	ip, ip, #3
    eea0:	cmp	ip, #2
    eea4:	beq	eeec <rb_base64_decode+0x138>
    eea8:	cmp	ip, #3
    eeac:	bne	eed0 <rb_base64_decode+0x11c>
    eeb0:	mov	r3, lr
    eeb4:	mov	r1, #0
    eeb8:	strb	r1, [r2, r3]
    eebc:	mov	r3, #0
    eec0:	mov	r0, r2
    eec4:	str	lr, [r6]
    eec8:	strb	r3, [r2, lr]
    eecc:	pop	{r4, r5, r6, r7, r8, pc}
    eed0:	cmp	ip, #1
    eed4:	bne	eebc <rb_base64_decode+0x108>
    eed8:	mov	r0, r2
    eedc:	bl	46f4 <free@plt>
    eee0:	mov	r0, #0
    eee4:	pop	{r4, r5, r6, r7, r8, pc}
    eee8:	bl	4988 <rb_outofmemory@plt>
    eeec:	add	r3, lr, #1
    eef0:	b	eeb4 <rb_base64_decode+0x100>
    eef4:	.word	0x00007858

0000eef8 <rb_outofmemory>:
    eef8:	ldr	r3, [pc, #52]	; ef34 <rb_outofmemory+0x3c>
    eefc:	push	{r4, lr}
    ef00:	add	r3, pc, r3
    ef04:	ldr	r2, [r3]
    ef08:	cmp	r2, #0
    ef0c:	beq	ef14 <rb_outofmemory+0x1c>
    ef10:	bl	43c4 <abort@plt>
    ef14:	ldr	r0, [pc, #28]	; ef38 <rb_outofmemory+0x40>
    ef18:	mov	r2, #1
    ef1c:	add	r0, pc, r0
    ef20:	str	r2, [r3]
    ef24:	bl	491c <rb_lib_log@plt>
    ef28:	ldr	r0, [pc, #12]	; ef3c <rb_outofmemory+0x44>
    ef2c:	add	r0, pc, r0
    ef30:	bl	4a60 <rb_lib_restart@plt>
    ef34:	.word	0x0002c458
    ef38:	.word	0x00007ae0
    ef3c:	.word	0x00007af4

0000ef40 <rb_linebuf_new_line>:
    ef40:	push	{r4, r5, r6, lr}
    ef44:	mov	r4, r0
    ef48:	ldr	r6, [pc, #136]	; efd8 <rb_linebuf_new_line+0x98>
    ef4c:	add	r6, pc, r6
    ef50:	ldr	r0, [r6]
    ef54:	bl	4958 <rb_bh_alloc@plt>
    ef58:	subs	r5, r0, #0
    ef5c:	beq	efc0 <rb_linebuf_new_line+0x80>
    ef60:	ldr	r3, [r6, #4]
    ef64:	add	r3, r3, #1
    ef68:	str	r3, [r6, #4]
    ef6c:	bl	4b80 <rb_make_rb_dlink_node@plt>
    ef70:	ldr	r3, [r4, #4]
    ef74:	mov	r2, #0
    ef78:	cmp	r3, r2
    ef7c:	str	r5, [r0]
    ef80:	str	r2, [r0, #8]
    ef84:	str	r3, [r0, #4]
    ef88:	strne	r0, [r3, #8]
    ef8c:	beq	efc8 <rb_linebuf_new_line+0x88>
    ef90:	ldr	ip, [r4, #8]
    ef94:	ldr	r1, [r5, #1032]	; 0x408
    ef98:	ldr	r2, [r4, #16]
    ef9c:	ldr	r3, [r4, #24]
    efa0:	add	ip, ip, #1
    efa4:	add	r1, r1, #1
    efa8:	add	r2, r2, #1
    efac:	add	r3, r3, #1
    efb0:	stmib	r4, {r0, ip}
    efb4:	str	r1, [r5, #1032]	; 0x408
    efb8:	str	r2, [r4, #16]
    efbc:	str	r3, [r4, #24]
    efc0:	mov	r0, r5
    efc4:	pop	{r4, r5, r6, pc}
    efc8:	ldr	r3, [r4]
    efcc:	cmp	r3, #0
    efd0:	streq	r0, [r4]
    efd4:	b	ef90 <rb_linebuf_new_line+0x50>
    efd8:	.word	0x0002c410

0000efdc <rb_linebuf_done_line>:
    efdc:	ldr	r3, [r2, #8]
    efe0:	push	{r4, r5, r6, lr}
    efe4:	mov	r5, r1
    efe8:	ldr	r1, [r2, #4]
    efec:	cmp	r3, #0
    eff0:	strne	r1, [r3, #4]
    eff4:	streq	r1, [r0, #4]
    eff8:	ldr	r1, [r2, #4]
    effc:	mov	r4, r0
    f000:	cmp	r1, #0
    f004:	strne	r3, [r1, #8]
    f008:	streq	r3, [r0]
    f00c:	ldr	r3, [r0, #8]
    f010:	mov	r1, #0
    f014:	sub	r3, r3, #1
    f018:	str	r1, [r2, #4]
    f01c:	str	r1, [r2, #8]
    f020:	mov	r0, r2
    f024:	str	r3, [r4, #8]
    f028:	bl	4844 <rb_free_rb_dlink_node@plt>
    f02c:	ldr	r3, [r5, #1032]	; 0x408
    f030:	ldr	ip, [r5, #1028]	; 0x404
    f034:	ldr	r0, [r4, #16]
    f038:	ldr	r1, [r4, #12]
    f03c:	ldr	r2, [r4, #24]
    f040:	sub	r3, r3, #1
    f044:	cmp	r3, #0
    f048:	sub	r0, r0, #1
    f04c:	sub	r1, r1, ip
    f050:	sub	r2, r2, #1
    f054:	str	r0, [r4, #16]
    f058:	str	r1, [r4, #12]
    f05c:	str	r2, [r4, #24]
    f060:	str	r3, [r5, #1032]	; 0x408
    f064:	popne	{r4, r5, r6, pc}
    f068:	ldr	r3, [pc, #24]	; f088 <rb_linebuf_done_line+0xac>
    f06c:	mov	r1, r5
    f070:	add	r3, pc, r3
    f074:	pop	{r4, r5, r6, lr}
    f078:	ldm	r3, {r0, r2}
    f07c:	sub	r2, r2, #1
    f080:	str	r2, [r3, #4]
    f084:	b	48c8 <rb_bh_free@plt>
    f088:	.word	0x0002c2ec

0000f08c <rb_linebuf_copy_line.isra.2>:
    f08c:	push	{r4, r5, r6, r7, r8, lr}
    f090:	mov	ip, #0
    f094:	ldrb	lr, [r1, #1025]	; 0x401
    f098:	ldr	r8, [r1, #1028]	; 0x404
    f09c:	strb	ip, [r1, #1026]	; 0x402
    f0a0:	cmp	lr, #1
    f0a4:	add	r7, r1, r8
    f0a8:	moveq	r4, ip
    f0ac:	beq	f1b0 <rb_linebuf_copy_line.isra.2+0x124>
    f0b0:	cmp	r3, ip
    f0b4:	beq	f288 <rb_linebuf_copy_line.isra.2+0x1fc>
    f0b8:	ldrb	lr, [r2]
    f0bc:	cmp	lr, #13
    f0c0:	cmpne	lr, #10
    f0c4:	addne	r5, r2, #1
    f0c8:	movne	ip, r3
    f0cc:	bne	f0e8 <rb_linebuf_copy_line.isra.2+0x5c>
    f0d0:	b	f290 <rb_linebuf_copy_line.isra.2+0x204>
    f0d4:	ldrb	r6, [r5]
    f0d8:	add	r5, lr, #1
    f0dc:	cmp	r6, #13
    f0e0:	cmpne	r6, #10
    f0e4:	beq	f23c <rb_linebuf_copy_line.isra.2+0x1b0>
    f0e8:	subs	ip, ip, #1
    f0ec:	mov	lr, r5
    f0f0:	bne	f0d4 <rb_linebuf_copy_line.isra.2+0x48>
    f0f4:	sub	r4, r3, ip
    f0f8:	cmn	r4, #1
    f0fc:	beq	f1b0 <rb_linebuf_copy_line.isra.2+0x124>
    f100:	rsb	r8, r8, #1020	; 0x3fc
    f104:	add	r8, r8, #2
    f108:	cmp	r8, r4
    f10c:	mov	r5, r1
    f110:	mov	r6, r0
    f114:	mov	r1, r2
    f118:	blt	f1b8 <rb_linebuf_copy_line.isra.2+0x12c>
    f11c:	mov	r2, r4
    f120:	mov	r0, r7
    f124:	bl	4808 <memcpy@plt>
    f128:	add	r3, r7, r4
    f12c:	mov	r1, #0
    f130:	strb	r1, [r7, r4]
    f134:	ldrb	r2, [r3, #-1]
    f138:	cmp	r2, #13
    f13c:	cmpne	r2, #10
    f140:	movne	r0, #1
    f144:	moveq	r0, #0
    f148:	bne	f264 <rb_linebuf_copy_line.isra.2+0x1d8>
    f14c:	cmp	r4, r1
    f150:	beq	f18c <rb_linebuf_copy_line.isra.2+0x100>
    f154:	cmp	r2, #13
    f158:	cmpne	r2, #10
    f15c:	movne	r2, r4
    f160:	bne	f190 <rb_linebuf_copy_line.isra.2+0x104>
    f164:	sub	r3, r3, #1
    f168:	mov	r2, r4
    f16c:	b	f180 <rb_linebuf_copy_line.isra.2+0xf4>
    f170:	ldrb	r1, [r3, #-1]!
    f174:	cmp	r1, #10
    f178:	cmpne	r1, #13
    f17c:	bne	f190 <rb_linebuf_copy_line.isra.2+0x104>
    f180:	subs	r2, r2, #1
    f184:	strb	r0, [r3]
    f188:	bne	f170 <rb_linebuf_copy_line.isra.2+0xe4>
    f18c:	mov	r2, #0
    f190:	mov	r3, #1
    f194:	strb	r3, [r5, #1025]	; 0x401
    f198:	ldr	r3, [r6]
    f19c:	add	r3, r3, r2
    f1a0:	str	r3, [r6]
    f1a4:	ldr	r3, [r5, #1028]	; 0x404
    f1a8:	add	r2, r3, r2
    f1ac:	str	r2, [r5, #1028]	; 0x404
    f1b0:	mov	r0, r4
    f1b4:	pop	{r4, r5, r6, r7, r8, pc}
    f1b8:	mov	r0, r7
    f1bc:	mov	r2, r8
    f1c0:	bl	4808 <memcpy@plt>
    f1c4:	mov	r0, #0
    f1c8:	add	r3, r5, #1020	; 0x3fc
    f1cc:	cmp	r8, #0
    f1d0:	strb	r0, [r5, #1022]	; 0x3fe
    f1d4:	add	r3, r3, #1
    f1d8:	beq	f214 <rb_linebuf_copy_line.isra.2+0x188>
    f1dc:	ldrb	r2, [r5, #1021]	; 0x3fd
    f1e0:	cmp	r2, #10
    f1e4:	cmpne	r2, #13
    f1e8:	bne	f214 <rb_linebuf_copy_line.isra.2+0x188>
    f1ec:	rsb	r1, r8, #1
    f1f0:	add	r1, r3, r1
    f1f4:	b	f208 <rb_linebuf_copy_line.isra.2+0x17c>
    f1f8:	ldrb	r2, [r3, #-1]!
    f1fc:	cmp	r2, #10
    f200:	cmpne	r2, #13
    f204:	bne	f214 <rb_linebuf_copy_line.isra.2+0x188>
    f208:	cmp	r3, r1
    f20c:	strb	r0, [r3]
    f210:	bne	f1f8 <rb_linebuf_copy_line.isra.2+0x16c>
    f214:	ldr	r2, [pc, #144]	; f2ac <rb_linebuf_copy_line.isra.2+0x220>
    f218:	mov	r3, #1
    f21c:	str	r2, [r5, #1028]	; 0x404
    f220:	strb	r3, [r5, #1025]	; 0x401
    f224:	ldr	r3, [r6]
    f228:	mov	r0, r4
    f22c:	add	r3, r3, #1020	; 0x3fc
    f230:	add	r3, r3, #2
    f234:	str	r3, [r6]
    f238:	pop	{r4, r5, r6, r7, r8, pc}
    f23c:	cmp	r6, #10
    f240:	cmpne	r6, #13
    f244:	bne	f0f4 <rb_linebuf_copy_line.isra.2+0x68>
    f248:	subs	ip, ip, #1
    f24c:	beq	f0f4 <rb_linebuf_copy_line.isra.2+0x68>
    f250:	ldrb	r5, [lr, #1]!
    f254:	cmp	r5, #13
    f258:	cmpne	r5, #10
    f25c:	beq	f248 <rb_linebuf_copy_line.isra.2+0x1bc>
    f260:	b	f0f4 <rb_linebuf_copy_line.isra.2+0x68>
    f264:	ldr	r3, [r6]
    f268:	mov	r0, r4
    f26c:	add	r3, r3, r4
    f270:	str	r3, [r6]
    f274:	ldr	r3, [r5, #1028]	; 0x404
    f278:	strb	r1, [r5, #1025]	; 0x401
    f27c:	add	r3, r3, r4
    f280:	str	r3, [r5, #1028]	; 0x404
    f284:	pop	{r4, r5, r6, r7, r8, pc}
    f288:	mov	r4, r3
    f28c:	b	f100 <rb_linebuf_copy_line.isra.2+0x74>
    f290:	cmp	lr, #10
    f294:	cmpne	lr, #13
    f298:	moveq	lr, r2
    f29c:	moveq	ip, r3
    f2a0:	beq	f248 <rb_linebuf_copy_line.isra.2+0x1bc>
    f2a4:	mov	r4, ip
    f2a8:	b	f100 <rb_linebuf_copy_line.isra.2+0x74>
    f2ac:	.word	0x000003fe

0000f2b0 <rb_linebuf_copy_raw.isra.3>:
    f2b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f2b4:	mov	ip, #1
    f2b8:	ldrb	lr, [r1, #1025]	; 0x401
    f2bc:	ldr	r7, [r1, #1028]	; 0x404
    f2c0:	strb	ip, [r1, #1026]	; 0x402
    f2c4:	cmp	lr, ip
    f2c8:	add	r6, r1, r7
    f2cc:	moveq	r4, #0
    f2d0:	beq	f388 <rb_linebuf_copy_raw.isra.3+0xd8>
    f2d4:	cmp	r3, #0
    f2d8:	beq	f418 <rb_linebuf_copy_raw.isra.3+0x168>
    f2dc:	ldrb	ip, [r2]
    f2e0:	cmp	ip, #13
    f2e4:	cmpne	ip, #10
    f2e8:	addne	r4, r2, #1
    f2ec:	movne	ip, r3
    f2f0:	bne	f30c <rb_linebuf_copy_raw.isra.3+0x5c>
    f2f4:	b	f420 <rb_linebuf_copy_raw.isra.3+0x170>
    f2f8:	ldrb	r5, [r4]
    f2fc:	add	r4, lr, #1
    f300:	cmp	r5, #13
    f304:	cmpne	r5, #10
    f308:	beq	f3cc <rb_linebuf_copy_raw.isra.3+0x11c>
    f30c:	subs	ip, ip, #1
    f310:	mov	lr, r4
    f314:	bne	f2f8 <rb_linebuf_copy_raw.isra.3+0x48>
    f318:	sub	r4, r3, ip
    f31c:	cmn	r4, #1
    f320:	beq	f388 <rb_linebuf_copy_raw.isra.3+0xd8>
    f324:	ldr	r9, [pc, #268]	; f438 <rb_linebuf_copy_raw.isra.3+0x188>
    f328:	mov	r5, r1
    f32c:	sub	r7, r9, r7
    f330:	cmp	r7, r4
    f334:	mov	r8, r0
    f338:	mov	r1, r2
    f33c:	blt	f390 <rb_linebuf_copy_raw.isra.3+0xe0>
    f340:	mov	r2, r4
    f344:	mov	r0, r6
    f348:	bl	4808 <memcpy@plt>
    f34c:	add	r3, r6, r4
    f350:	mov	r2, #0
    f354:	strb	r2, [r6, r4]
    f358:	ldrb	r3, [r3, #-1]
    f35c:	cmp	r3, #13
    f360:	cmpne	r3, #10
    f364:	bne	f3f4 <rb_linebuf_copy_raw.isra.3+0x144>
    f368:	mov	r3, #1
    f36c:	strb	r3, [r5, #1025]	; 0x401
    f370:	ldr	r3, [r8]
    f374:	add	r3, r3, r4
    f378:	str	r3, [r8]
    f37c:	ldr	r3, [r5, #1028]	; 0x404
    f380:	add	r3, r3, r4
    f384:	str	r3, [r5, #1028]	; 0x404
    f388:	mov	r0, r4
    f38c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f390:	mov	r2, r7
    f394:	mov	r0, r6
    f398:	bl	4808 <memcpy@plt>
    f39c:	mov	r2, #0
    f3a0:	mov	r3, #1
    f3a4:	str	r9, [r5, #1028]	; 0x404
    f3a8:	strb	r2, [r5, #1022]	; 0x3fe
    f3ac:	strb	r3, [r5, #1025]	; 0x401
    f3b0:	ldr	r3, [r8]
    f3b4:	mov	r4, r7
    f3b8:	add	r3, r3, #1020	; 0x3fc
    f3bc:	add	r3, r3, #2
    f3c0:	str	r3, [r8]
    f3c4:	mov	r0, r4
    f3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f3cc:	cmp	r5, #13
    f3d0:	cmpne	r5, #10
    f3d4:	bne	f318 <rb_linebuf_copy_raw.isra.3+0x68>
    f3d8:	subs	ip, ip, #1
    f3dc:	beq	f318 <rb_linebuf_copy_raw.isra.3+0x68>
    f3e0:	ldrb	r4, [lr, #1]!
    f3e4:	cmp	r4, #13
    f3e8:	cmpne	r4, #10
    f3ec:	beq	f3d8 <rb_linebuf_copy_raw.isra.3+0x128>
    f3f0:	b	f318 <rb_linebuf_copy_raw.isra.3+0x68>
    f3f4:	ldr	r3, [r8]
    f3f8:	mov	r0, r4
    f3fc:	add	r3, r3, r4
    f400:	str	r3, [r8]
    f404:	ldr	r3, [r5, #1028]	; 0x404
    f408:	strb	r2, [r5, #1025]	; 0x401
    f40c:	add	r3, r3, r4
    f410:	str	r3, [r5, #1028]	; 0x404
    f414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f418:	mov	r4, #0
    f41c:	b	f324 <rb_linebuf_copy_raw.isra.3+0x74>
    f420:	cmp	ip, #13
    f424:	cmpne	ip, #10
    f428:	bne	f418 <rb_linebuf_copy_raw.isra.3+0x168>
    f42c:	mov	lr, r2
    f430:	mov	ip, r3
    f434:	b	f3d8 <rb_linebuf_copy_raw.isra.3+0x128>
    f438:	.word	0x000003fe

0000f43c <rb_linebuf_init>:
    f43c:	ldr	r2, [pc, #32]	; f464 <rb_linebuf_init+0x28>
    f440:	mov	r1, r0
    f444:	push	{r4, lr}
    f448:	add	r2, pc, r2
    f44c:	ldr	r0, [pc, #20]	; f468 <rb_linebuf_init+0x2c>
    f450:	bl	4ab4 <rb_bh_create@plt>
    f454:	ldr	r3, [pc, #16]	; f46c <rb_linebuf_init+0x30>
    f458:	add	r3, pc, r3
    f45c:	str	r0, [r3]
    f460:	pop	{r4, pc}
    f464:	.word	0x000075e8
    f468:	.word	0x0000040c
    f46c:	.word	0x0002bf04

0000f470 <rb_linebuf_newbuf>:
    f470:	mov	r3, #0
    f474:	str	r3, [r0]
    f478:	str	r3, [r0, #4]
    f47c:	str	r3, [r0, #8]
    f480:	str	r3, [r0, #12]
    f484:	str	r3, [r0, #16]
    f488:	str	r3, [r0, #20]
    f48c:	str	r3, [r0, #24]
    f490:	bx	lr

0000f494 <rb_linebuf_donebuf>:
    f494:	ldr	r2, [r0]
    f498:	cmp	r2, #0
    f49c:	bxeq	lr
    f4a0:	push	{r4, lr}
    f4a4:	mov	r4, r0
    f4a8:	ldr	r1, [r2]
    f4ac:	mov	r0, r4
    f4b0:	bl	efdc <rb_linebuf_done_line>
    f4b4:	ldr	r2, [r4]
    f4b8:	cmp	r2, #0
    f4bc:	bne	f4a8 <rb_linebuf_donebuf+0x14>
    f4c0:	pop	{r4, pc}

0000f4c4 <rb_linebuf_parse>:
    f4c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f4c8:	mov	r7, r0
    f4cc:	ldr	r6, [r0, #4]
    f4d0:	mov	r5, r1
    f4d4:	cmp	r6, #0
    f4d8:	mov	r4, r2
    f4dc:	mov	r8, r3
    f4e0:	beq	f520 <rb_linebuf_parse+0x5c>
    f4e4:	cmp	r8, #0
    f4e8:	mov	r3, r2
    f4ec:	add	r0, r0, #12
    f4f0:	mov	r2, r1
    f4f4:	ldr	r1, [r6]
    f4f8:	beq	f58c <rb_linebuf_parse+0xc8>
    f4fc:	bl	f2b0 <rb_linebuf_copy_raw.isra.3>
    f500:	cmn	r0, #1
    f504:	beq	f580 <rb_linebuf_parse+0xbc>
    f508:	cmp	r0, r4
    f50c:	moveq	r6, #1
    f510:	beq	f584 <rb_linebuf_parse+0xc0>
    f514:	sub	r4, r4, r0
    f518:	add	r5, r5, r0
    f51c:	mov	r6, #1
    f520:	cmp	r4, #0
    f524:	ble	f584 <rb_linebuf_parse+0xc0>
    f528:	add	r9, r7, #12
    f52c:	b	f550 <rb_linebuf_parse+0x8c>
    f530:	bl	f08c <rb_linebuf_copy_line.isra.2>
    f534:	cmn	r0, #1
    f538:	sub	r4, r4, r0
    f53c:	beq	f580 <rb_linebuf_parse+0xbc>
    f540:	cmp	r4, #0
    f544:	add	r5, r5, r0
    f548:	add	r6, r6, #1
    f54c:	ble	f584 <rb_linebuf_parse+0xc0>
    f550:	mov	r0, r7
    f554:	bl	ef40 <rb_linebuf_new_line>
    f558:	cmp	r8, #0
    f55c:	mov	r3, r4
    f560:	mov	r2, r5
    f564:	mov	r1, r0
    f568:	mov	r0, r9
    f56c:	beq	f530 <rb_linebuf_parse+0x6c>
    f570:	bl	f2b0 <rb_linebuf_copy_raw.isra.3>
    f574:	cmn	r0, #1
    f578:	sub	r4, r4, r0
    f57c:	bne	f540 <rb_linebuf_parse+0x7c>
    f580:	mvn	r6, #0
    f584:	mov	r0, r6
    f588:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    f58c:	bl	f08c <rb_linebuf_copy_line.isra.2>
    f590:	b	f500 <rb_linebuf_parse+0x3c>

0000f594 <rb_linebuf_get>:
    f594:	push	{r4, r5, r6, r7, r8, lr}
    f598:	ldr	r4, [r0]
    f59c:	cmp	r4, #0
    f5a0:	beq	f654 <rb_linebuf_get+0xc0>
    f5a4:	cmp	r3, #0
    f5a8:	ldr	r5, [r4]
    f5ac:	bne	f5bc <rb_linebuf_get+0x28>
    f5b0:	ldrb	r4, [r5, #1025]	; 0x401
    f5b4:	cmp	r4, #0
    f5b8:	beq	f654 <rb_linebuf_get+0xc0>
    f5bc:	ldr	r4, [r5, #1028]	; 0x404
    f5c0:	ldrb	r3, [r5, #1026]	; 0x402
    f5c4:	cmp	r4, r2
    f5c8:	subgt	r4, r2, #1
    f5cc:	cmp	r3, #0
    f5d0:	mov	r7, r1
    f5d4:	mov	r6, r0
    f5d8:	mov	r1, r5
    f5dc:	beq	f65c <rb_linebuf_get+0xc8>
    f5e0:	ldr	r3, [sp, #24]
    f5e4:	cmp	r3, #0
    f5e8:	bne	f684 <rb_linebuf_get+0xf0>
    f5ec:	cmp	r4, #0
    f5f0:	beq	f628 <rb_linebuf_get+0x94>
    f5f4:	ldrb	r3, [r5]
    f5f8:	cmp	r3, #10
    f5fc:	cmpne	r3, #13
    f600:	bne	f6a8 <rb_linebuf_get+0x114>
    f604:	add	r3, r5, #1
    f608:	b	f61c <rb_linebuf_get+0x88>
    f60c:	ldrb	r2, [r3], #1
    f610:	cmp	r2, #10
    f614:	cmpne	r2, #13
    f618:	bne	f6a8 <rb_linebuf_get+0x114>
    f61c:	subs	r4, r4, #1
    f620:	mov	r1, r3
    f624:	bne	f60c <rb_linebuf_get+0x78>
    f628:	ldr	r4, [sp, #24]
    f62c:	mov	r8, #0
    f630:	mov	r2, r8
    f634:	mov	r0, r7
    f638:	bl	4808 <memcpy@plt>
    f63c:	mov	r3, #0
    f640:	strb	r3, [r7, r8]
    f644:	mov	r1, r5
    f648:	ldr	r2, [r6]
    f64c:	mov	r0, r6
    f650:	bl	efdc <rb_linebuf_done_line>
    f654:	mov	r0, r4
    f658:	pop	{r4, r5, r6, r7, r8, pc}
    f65c:	mov	r2, r4
    f660:	mov	r1, r5
    f664:	mov	r0, r7
    f668:	bl	4808 <memcpy@plt>
    f66c:	ldr	r3, [sp, #24]
    f670:	mov	r8, r4
    f674:	cmp	r3, #0
    f678:	moveq	r3, #0
    f67c:	strbeq	r3, [r7, r8]
    f680:	b	f644 <rb_linebuf_get+0xb0>
    f684:	mov	r2, r4
    f688:	mov	r1, r5
    f68c:	mov	r0, r7
    f690:	bl	4808 <memcpy@plt>
    f694:	mov	r1, r5
    f698:	ldr	r2, [r6]
    f69c:	mov	r0, r6
    f6a0:	bl	efdc <rb_linebuf_done_line>
    f6a4:	b	f654 <rb_linebuf_get+0xc0>
    f6a8:	sub	r3, r4, #1
    f6ac:	add	r0, r1, r3
    f6b0:	ldrb	r2, [r1, r3]
    f6b4:	cmp	r2, #10
    f6b8:	cmpne	r2, #13
    f6bc:	beq	f6d8 <rb_linebuf_get+0x144>
    f6c0:	b	f6e0 <rb_linebuf_get+0x14c>
    f6c4:	ldrb	r2, [r0, #-1]!
    f6c8:	sub	r3, r3, #1
    f6cc:	cmp	r2, #10
    f6d0:	cmpne	r2, #13
    f6d4:	bne	f6e0 <rb_linebuf_get+0x14c>
    f6d8:	subs	r4, r3, #0
    f6dc:	bne	f6c4 <rb_linebuf_get+0x130>
    f6e0:	mov	r8, r4
    f6e4:	b	f630 <rb_linebuf_get+0x9c>

0000f6e8 <rb_linebuf_attach>:
    f6e8:	push	{r4, r5, r6, r7, r8, lr}
    f6ec:	ldr	r6, [r1]
    f6f0:	cmp	r6, #0
    f6f4:	popeq	{r4, r5, r6, r7, r8, pc}
    f6f8:	mov	r4, r0
    f6fc:	mov	r7, #0
    f700:	b	f750 <rb_linebuf_attach+0x68>
    f704:	ldr	lr, [r4, #8]
    f708:	ldr	r6, [r6, #8]
    f70c:	ldr	r3, [r5, #1032]	; 0x408
    f710:	ldr	r8, [r5, #1028]	; 0x404
    f714:	ldr	ip, [r4, #16]
    f718:	ldr	r1, [r4, #12]
    f71c:	ldr	r2, [r4, #24]
    f720:	add	lr, lr, #1
    f724:	add	ip, ip, #1
    f728:	add	r1, r1, r8
    f72c:	add	r2, r2, #1
    f730:	add	r3, r3, #1
    f734:	cmp	r6, #0
    f738:	stmib	r4, {r0, lr}
    f73c:	str	ip, [r4, #16]
    f740:	str	r1, [r4, #12]
    f744:	str	r2, [r4, #24]
    f748:	str	r3, [r5, #1032]	; 0x408
    f74c:	beq	f780 <rb_linebuf_attach+0x98>
    f750:	ldr	r5, [r6]
    f754:	bl	4b80 <rb_make_rb_dlink_node@plt>
    f758:	ldr	r3, [r4, #4]
    f75c:	cmp	r3, #0
    f760:	str	r5, [r0]
    f764:	stmib	r0, {r3, r7}
    f768:	strne	r0, [r3, #8]
    f76c:	bne	f704 <rb_linebuf_attach+0x1c>
    f770:	ldr	r3, [r4]
    f774:	cmp	r3, #0
    f778:	streq	r0, [r4]
    f77c:	b	f704 <rb_linebuf_attach+0x1c>
    f780:	pop	{r4, r5, r6, r7, r8, pc}

0000f784 <rb_linebuf_put>:
    f784:	push	{r4, r5, r6, lr}
    f788:	mov	r6, r1
    f78c:	mov	r5, r0
    f790:	bl	ef40 <rb_linebuf_new_line>
    f794:	mov	r2, r6
    f798:	ldr	r1, [pc, #108]	; f80c <rb_linebuf_put+0x88>
    f79c:	mov	r4, r0
    f7a0:	bl	4694 <rb_fsnprint@plt>
    f7a4:	cmp	r0, #0
    f7a8:	ble	f7f8 <rb_linebuf_put+0x74>
    f7ac:	ldr	r3, [pc, #92]	; f810 <rb_linebuf_put+0x8c>
    f7b0:	cmp	r0, r3
    f7b4:	movcs	r0, r3
    f7b8:	add	r2, r0, #2
    f7bc:	mov	r1, r2
    f7c0:	add	ip, r0, #1
    f7c4:	mov	r3, #13
    f7c8:	strb	r3, [r4, r0]
    f7cc:	mov	lr, #10
    f7d0:	mov	r3, #1
    f7d4:	mov	r0, #0
    f7d8:	strb	lr, [r4, ip]
    f7dc:	strb	r0, [r4, r2]
    f7e0:	strb	r3, [r4, #1025]	; 0x401
    f7e4:	ldr	r3, [r5, #12]
    f7e8:	str	r1, [r4, #1028]	; 0x404
    f7ec:	add	r3, r3, r2
    f7f0:	str	r3, [r5, #12]
    f7f4:	pop	{r4, r5, r6, pc}
    f7f8:	mov	r1, #2
    f7fc:	mov	r2, r1
    f800:	mov	ip, #1
    f804:	mov	r0, #0
    f808:	b	f7c4 <rb_linebuf_put+0x40>
    f80c:	.word	0x000003ff
    f810:	.word	0x000003fe

0000f814 <rb_linebuf_flush>:
    f814:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f818:	mov	r5, r1
    f81c:	mov	r7, r0
    f820:	bl	44b4 <rb_fd_ssl@plt>
    f824:	subs	r6, r0, #0
    f828:	beq	f888 <rb_linebuf_flush+0x74>
    f82c:	ldr	r3, [r5]
    f830:	cmp	r3, #0
    f834:	beq	f9f0 <rb_linebuf_flush+0x1dc>
    f838:	ldr	r4, [r3]
    f83c:	ldrb	r3, [r4, #1025]	; 0x401
    f840:	cmp	r3, #0
    f844:	beq	f9f0 <rb_linebuf_flush+0x1dc>
    f848:	ldr	r1, [r5, #20]
    f84c:	ldr	r2, [r4, #1028]	; 0x404
    f850:	mov	r0, r7
    f854:	sub	r2, r2, r1
    f858:	add	r1, r4, r1
    f85c:	bl	4658 <rb_write@plt>
    f860:	subs	r9, r0, #0
    f864:	ble	f880 <rb_linebuf_flush+0x6c>
    f868:	ldr	r3, [r5, #20]
    f86c:	ldr	r2, [r4, #1028]	; 0x404
    f870:	add	r3, r9, r3
    f874:	cmp	r3, r2
    f878:	str	r3, [r5, #20]
    f87c:	beq	f9c4 <rb_linebuf_flush+0x1b0>
    f880:	mov	r0, r9
    f884:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f888:	ldr	r8, [pc, #380]	; fa0c <rb_linebuf_flush+0x1f8>
    f88c:	mov	r2, #8192	; 0x2000
    f890:	add	r8, pc, r8
    f894:	add	r4, r8, #8
    f898:	mov	r0, r4
    f89c:	mov	r1, r6
    f8a0:	bl	4628 <memset@plt>
    f8a4:	ldr	r2, [r5]
    f8a8:	cmp	r2, #0
    f8ac:	beq	f9f0 <rb_linebuf_flush+0x1dc>
    f8b0:	ldr	r3, [r2]
    f8b4:	ldrb	r1, [r3, #1025]	; 0x401
    f8b8:	cmp	r1, #0
    f8bc:	beq	f9f0 <rb_linebuf_flush+0x1dc>
    f8c0:	ldr	r1, [r2, #8]
    f8c4:	ldr	r0, [r5, #20]
    f8c8:	ldr	r2, [r3, #1028]	; 0x404
    f8cc:	cmp	r1, #0
    f8d0:	add	r3, r3, r0
    f8d4:	sub	r2, r2, r0
    f8d8:	str	r3, [r8, #8]
    f8dc:	str	r2, [r8, #12]
    f8e0:	beq	fa04 <rb_linebuf_flush+0x1f0>
    f8e4:	ldr	r3, [r1]
    f8e8:	ldrb	r2, [r3, #1025]	; 0x401
    f8ec:	cmp	r2, #0
    f8f0:	beq	fa04 <rb_linebuf_flush+0x1f0>
    f8f4:	ldr	r2, [r3, #1028]	; 0x404
    f8f8:	str	r3, [r8, #16]
    f8fc:	mov	r0, r4
    f900:	str	r2, [r8, #20]
    f904:	ldr	r3, [r1, #8]
    f908:	mov	r4, #2
    f90c:	b	f940 <rb_linebuf_flush+0x12c>
    f910:	ldr	r2, [r3]
    f914:	ldrb	r1, [r2, #1025]	; 0x401
    f918:	cmp	r1, #0
    f91c:	beq	f948 <rb_linebuf_flush+0x134>
    f920:	ldr	r1, [r2, #1028]	; 0x404
    f924:	add	r4, r4, #1
    f928:	cmp	r4, #1024	; 0x400
    f92c:	str	r2, [r0, #16]
    f930:	str	r1, [r0, #20]
    f934:	ldr	r3, [r3, #8]
    f938:	add	r0, r0, #8
    f93c:	beq	f948 <rb_linebuf_flush+0x134>
    f940:	cmp	r3, #0
    f944:	bne	f910 <rb_linebuf_flush+0xfc>
    f948:	ldr	r1, [pc, #192]	; fa10 <rb_linebuf_flush+0x1fc>
    f94c:	mov	r0, r7
    f950:	add	r1, pc, r1
    f954:	add	r1, r1, #8
    f958:	mov	r2, r4
    f95c:	bl	4ad8 <rb_writev@plt>
    f960:	subs	r9, r0, #0
    f964:	ble	f880 <rb_linebuf_flush+0x6c>
    f968:	ldr	fp, [r5]
    f96c:	ldr	r2, [r5, #20]
    f970:	mov	r7, r9
    f974:	mov	r8, r6
    f978:	mov	sl, #0
    f97c:	ldr	r3, [fp]
    f980:	mov	r0, r5
    f984:	mov	r1, r3
    f988:	ldr	r3, [r3, #1028]	; 0x404
    f98c:	add	r8, r8, #1
    f990:	sub	r3, r3, r2
    f994:	cmp	r3, r7
    f998:	bgt	f9e4 <rb_linebuf_flush+0x1d0>
    f99c:	ldr	r2, [r5]
    f9a0:	sub	r7, r7, r3
    f9a4:	ldr	fp, [fp, #8]
    f9a8:	bl	efdc <rb_linebuf_done_line>
    f9ac:	cmp	r4, r8
    f9b0:	mov	r2, r6
    f9b4:	str	sl, [r5, #20]
    f9b8:	bne	f97c <rb_linebuf_flush+0x168>
    f9bc:	mov	r0, r9
    f9c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9c4:	mov	r3, #0
    f9c8:	mov	r0, r5
    f9cc:	mov	r1, r4
    f9d0:	str	r3, [r5, #20]
    f9d4:	ldr	r2, [r5]
    f9d8:	bl	efdc <rb_linebuf_done_line>
    f9dc:	mov	r0, r9
    f9e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f9e4:	add	r7, r2, r7
    f9e8:	str	r7, [r5, #20]
    f9ec:	b	f880 <rb_linebuf_flush+0x6c>
    f9f0:	bl	4ce8 <__errno_location@plt>
    f9f4:	mov	r3, #11
    f9f8:	mvn	r9, #0
    f9fc:	str	r3, [r0]
    fa00:	b	f880 <rb_linebuf_flush+0x6c>
    fa04:	mov	r4, #1
    fa08:	b	f948 <rb_linebuf_flush+0x134>
    fa0c:	.word	0x0002bacc
    fa10:	.word	0x0002ba0c

0000fa14 <rb_count_rb_linebuf_memory>:
    fa14:	ldr	ip, [pc, #44]	; fa48 <rb_count_rb_linebuf_memory+0x34>
    fa18:	push	{lr}		; (str lr, [sp, #-4]!)
    fa1c:	add	ip, pc, ip
    fa20:	sub	sp, sp, #12
    fa24:	ldr	ip, [ip]
    fa28:	mov	r2, #0
    fa2c:	mov	r3, r1
    fa30:	str	r2, [sp]
    fa34:	mov	r1, r0
    fa38:	mov	r0, ip
    fa3c:	bl	4d0c <rb_bh_usage@plt>
    fa40:	add	sp, sp, #12
    fa44:	pop	{pc}		; (ldr pc, [sp], #4)
    fa48:	.word	0x0002b940

0000fa4c <rb_init_rb_dlink_nodes>:
    fa4c:	ldr	r2, [pc, #40]	; fa7c <rb_init_rb_dlink_nodes+0x30>
    fa50:	mov	r1, r0
    fa54:	push	{r4, lr}
    fa58:	add	r2, pc, r2
    fa5c:	mov	r0, #12
    fa60:	bl	4ab4 <rb_bh_create@plt>
    fa64:	ldr	r3, [pc, #20]	; fa80 <rb_init_rb_dlink_nodes+0x34>
    fa68:	add	r3, pc, r3
    fa6c:	cmp	r0, #0
    fa70:	str	r0, [r3]
    fa74:	popne	{r4, pc}
    fa78:	bl	4988 <rb_outofmemory@plt>
    fa7c:	.word	0x00006fec
    fa80:	.word	0x0002d8fc

0000fa84 <rb_make_rb_dlink_node>:
    fa84:	ldr	r3, [pc, #4]	; fa90 <rb_make_rb_dlink_node+0xc>
    fa88:	ldr	r0, [pc, r3]
    fa8c:	b	4958 <rb_bh_alloc@plt>
    fa90:	.word	0x0002d8dc

0000fa94 <rb_free_rb_dlink_node>:
    fa94:	ldr	r3, [pc, #12]	; faa8 <rb_free_rb_dlink_node+0x14>
    fa98:	mov	r1, r0
    fa9c:	add	r3, pc, r3
    faa0:	ldr	r0, [r3]
    faa4:	b	48c8 <rb_bh_free@plt>
    faa8:	.word	0x0002d8c8

0000faac <rb_string_to_array>:
    faac:	cmp	r0, #0
    fab0:	beq	fb88 <rb_string_to_array+0xdc>
    fab4:	ldrb	r3, [r0]
    fab8:	cmp	r3, #0
    fabc:	beq	fb70 <rb_string_to_array+0xc4>
    fac0:	cmp	r3, #32
    fac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fac8:	mov	r7, r1
    facc:	bne	fae8 <rb_string_to_array+0x3c>
    fad0:	ldrb	r3, [r0, #1]!
    fad4:	cmp	r3, #32
    fad8:	beq	fad0 <rb_string_to_array+0x24>
    fadc:	cmp	r3, #0
    fae0:	moveq	r2, r3
    fae4:	beq	fb68 <rb_string_to_array+0xbc>
    fae8:	mov	r8, #0
    faec:	sub	r4, r2, #1
    faf0:	mov	r6, r8
    faf4:	sub	r9, r7, #4
    faf8:	mov	r5, #32
    fafc:	cmp	r3, #58	; 0x3a
    fb00:	beq	fb5c <rb_string_to_array+0xb0>
    fb04:	mov	r1, r5
    fb08:	str	r0, [r9, #4]!
    fb0c:	bl	45b0 <strchr@plt>
    fb10:	add	r2, r8, #1
    fb14:	subs	r1, r0, #0
    fb18:	beq	fb68 <rb_string_to_array+0xbc>
    fb1c:	ldrb	ip, [r1, #1]
    fb20:	strb	r6, [r1]
    fb24:	add	lr, r1, #1
    fb28:	cmp	ip, #32
    fb2c:	bne	fb7c <rb_string_to_array+0xd0>
    fb30:	mov	r0, lr
    fb34:	ldrb	r3, [r0, #1]!
    fb38:	cmp	r3, #32
    fb3c:	beq	fb34 <rb_string_to_array+0x88>
    fb40:	cmp	r3, #0
    fb44:	beq	fb68 <rb_string_to_array+0xbc>
    fb48:	cmp	r2, r4
    fb4c:	bge	fb94 <rb_string_to_array+0xe8>
    fb50:	mov	r8, r2
    fb54:	ldrb	r3, [r0]
    fb58:	b	fafc <rb_string_to_array+0x50>
    fb5c:	add	r2, r8, #1
    fb60:	add	r0, r0, #1
    fb64:	str	r0, [r7, r8, lsl #2]
    fb68:	mov	r0, r2
    fb6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fb70:	mov	r2, r3
    fb74:	mov	r0, r2
    fb78:	bx	lr
    fb7c:	mov	r3, ip
    fb80:	mov	r0, lr
    fb84:	b	fb40 <rb_string_to_array+0x94>
    fb88:	mov	r2, r0
    fb8c:	mov	r0, r2
    fb90:	bx	lr
    fb94:	cmp	ip, #58	; 0x3a
    fb98:	addeq	lr, r1, #2
    fb9c:	str	lr, [r7, r2, lsl #2]
    fba0:	add	r2, r8, #2
    fba4:	b	fb68 <rb_string_to_array+0xbc>

0000fba8 <rb_strcasecmp>:
    fba8:	b	45c8 <strcasecmp@plt>

0000fbac <rb_strncasecmp>:
    fbac:	b	497c <strncasecmp@plt>

0000fbb0 <rb_strcasestr>:
    fbb0:	b	4418 <strcasestr@plt>

0000fbb4 <rb_strlcat>:
    fbb4:	push	{r4, r5, r6, r7, r8, lr}
    fbb8:	mov	r8, r1
    fbbc:	mov	r7, r2
    fbc0:	mov	r6, r0
    fbc4:	bl	47e4 <strlen@plt>
    fbc8:	mov	r4, r0
    fbcc:	mov	r0, r8
    fbd0:	bl	47e4 <strlen@plt>
    fbd4:	sub	r2, r7, r4
    fbd8:	add	r6, r6, r4
    fbdc:	mov	r1, r8
    fbe0:	cmp	r0, r2
    fbe4:	movcc	r5, r0
    fbe8:	subcs	r5, r2, #1
    fbec:	add	r4, r4, r0
    fbf0:	mov	r2, r5
    fbf4:	mov	r0, r6
    fbf8:	bl	4808 <memcpy@plt>
    fbfc:	mov	r2, #0
    fc00:	mov	r0, r4
    fc04:	strb	r2, [r6, r5]
    fc08:	pop	{r4, r5, r6, r7, r8, pc}

0000fc0c <rb_strlcpy>:
    fc0c:	push	{r4, r5, r6, r7, r8, lr}
    fc10:	mov	r7, r0
    fc14:	mov	r0, r1
    fc18:	mov	r4, r2
    fc1c:	mov	r6, r1
    fc20:	bl	47e4 <strlen@plt>
    fc24:	cmp	r4, #0
    fc28:	mov	r5, r0
    fc2c:	beq	fc54 <rb_strlcpy+0x48>
    fc30:	cmp	r0, r4
    fc34:	movcc	r4, r0
    fc38:	subcs	r4, r4, #1
    fc3c:	mov	r1, r6
    fc40:	mov	r2, r4
    fc44:	mov	r0, r7
    fc48:	bl	4808 <memcpy@plt>
    fc4c:	mov	r3, #0
    fc50:	strb	r3, [r7, r4]
    fc54:	mov	r0, r5
    fc58:	pop	{r4, r5, r6, r7, r8, pc}

0000fc5c <rb_strnlen>:
    fc5c:	b	4a18 <strnlen@plt>

0000fc60 <rb_snprintf_append>:
    fc60:	push	{r2, r3}
    fc64:	push	{r4, r5, r6, lr}
    fc68:	subs	r4, r1, #0
    fc6c:	sub	sp, sp, #8
    fc70:	beq	fcd8 <rb_snprintf_append+0x78>
    fc74:	mov	r5, r0
    fc78:	bl	47e4 <strlen@plt>
    fc7c:	cmp	r0, r4
    fc80:	mov	r6, r0
    fc84:	ble	fca4 <rb_snprintf_append+0x44>
    fc88:	sub	r0, r4, #1
    fc8c:	mov	r3, #0
    fc90:	strb	r3, [r5, r0]
    fc94:	add	sp, sp, #8
    fc98:	pop	{r4, r5, r6, lr}
    fc9c:	add	sp, sp, #8
    fca0:	bx	lr
    fca4:	add	ip, sp, #28
    fca8:	sub	r1, r4, r0
    fcac:	mov	r3, ip
    fcb0:	add	r0, r5, r0
    fcb4:	ldr	r2, [sp, #24]
    fcb8:	str	ip, [sp, #4]
    fcbc:	bl	455c <vsnprintf@plt>
    fcc0:	cmp	r0, #0
    fcc4:	addge	r0, r0, r6
    fcc8:	add	sp, sp, #8
    fccc:	pop	{r4, r5, r6, lr}
    fcd0:	add	sp, sp, #8
    fcd4:	bx	lr
    fcd8:	mvn	r0, #0
    fcdc:	b	fc94 <rb_snprintf_append+0x34>

0000fce0 <rb_snprintf_try_append>:
    fce0:	push	{r2, r3}
    fce4:	push	{r4, r5, r6, lr}
    fce8:	subs	r4, r1, #0
    fcec:	sub	sp, sp, #8
    fcf0:	beq	fd64 <rb_snprintf_try_append+0x84>
    fcf4:	mov	r6, r0
    fcf8:	bl	47e4 <strlen@plt>
    fcfc:	cmp	r0, r4
    fd00:	addgt	r1, r6, r4
    fd04:	movgt	r3, #0
    fd08:	mov	r5, r0
    fd0c:	strbgt	r3, [r1, #-1]
    fd10:	mvngt	r0, #0
    fd14:	bgt	fd54 <rb_snprintf_try_append+0x74>
    fd18:	add	ip, sp, #28
    fd1c:	mov	r3, ip
    fd20:	ldr	r2, [sp, #24]
    fd24:	sub	r1, r4, r5
    fd28:	add	r0, r6, r5
    fd2c:	str	ip, [sp, #4]
    fd30:	bl	455c <vsnprintf@plt>
    fd34:	cmp	r0, #0
    fd38:	blt	fd54 <rb_snprintf_try_append+0x74>
    fd3c:	add	r0, r0, r5
    fd40:	sub	r4, r4, #1
    fd44:	cmp	r0, r4
    fd48:	mvngt	r0, #0
    fd4c:	movgt	r3, #0
    fd50:	strbgt	r3, [r6, r5]
    fd54:	add	sp, sp, #8
    fd58:	pop	{r4, r5, r6, lr}
    fd5c:	add	sp, sp, #8
    fd60:	bx	lr
    fd64:	mvn	r0, #0
    fd68:	b	fd54 <rb_snprintf_try_append+0x74>

0000fd6c <rb_basename>:
    fd6c:	push	{r4, r5, r6, lr}
    fd70:	mov	r1, #47	; 0x2f
    fd74:	mov	r4, r0
    fd78:	bl	464c <strrchr@plt>
    fd7c:	cmp	r0, #0
    fd80:	addne	r4, r0, #1
    fd84:	mov	r0, r4
    fd88:	bl	47e4 <strlen@plt>
    fd8c:	add	r5, r0, #1
    fd90:	mov	r0, r5
    fd94:	bl	49ac <malloc@plt>
    fd98:	subs	r6, r0, #0
    fd9c:	beq	fdb4 <rb_basename+0x48>
    fda0:	mov	r2, r5
    fda4:	mov	r1, r4
    fda8:	bl	4808 <memcpy@plt>
    fdac:	mov	r0, r6
    fdb0:	pop	{r4, r5, r6, pc}
    fdb4:	bl	4988 <rb_outofmemory@plt>

0000fdb8 <rb_dirname>:
    fdb8:	push	{r4, r5, r6, lr}
    fdbc:	mov	r1, #47	; 0x2f
    fdc0:	mov	r5, r0
    fdc4:	bl	464c <strrchr@plt>
    fdc8:	cmp	r0, #0
    fdcc:	beq	fe34 <rb_dirname+0x7c>
    fdd0:	cmp	r5, r0
    fdd4:	bcs	fe08 <rb_dirname+0x50>
    fdd8:	ldrb	r3, [r0]
    fddc:	cmp	r3, #47	; 0x2f
    fde0:	subeq	r3, r0, #1
    fde4:	beq	fdfc <rb_dirname+0x44>
    fde8:	b	fe08 <rb_dirname+0x50>
    fdec:	ldrb	r2, [r3]
    fdf0:	sub	r3, r3, #1
    fdf4:	cmp	r2, #47	; 0x2f
    fdf8:	bne	fe08 <rb_dirname+0x50>
    fdfc:	cmp	r3, r5
    fe00:	mov	r0, r3
    fe04:	bne	fdec <rb_dirname+0x34>
    fe08:	rsb	r4, r5, #2
    fe0c:	add	r4, r0, r4
    fe10:	mov	r0, r4
    fe14:	bl	49ac <malloc@plt>
    fe18:	subs	r6, r0, #0
    fe1c:	beq	fe4c <rb_dirname+0x94>
    fe20:	mov	r2, r4
    fe24:	mov	r1, r5
    fe28:	bl	46a0 <rb_strlcpy@plt>
    fe2c:	mov	r0, r6
    fe30:	pop	{r4, r5, r6, pc}
    fe34:	mov	r0, #2
    fe38:	bl	49ac <malloc@plt>
    fe3c:	subs	r6, r0, #0
    fe40:	movne	r3, #46	; 0x2e
    fe44:	strhne	r3, [r6]
    fe48:	bne	fe2c <rb_dirname+0x74>
    fe4c:	bl	4988 <rb_outofmemory@plt>

0000fe50 <rb_fsnprint>:
    fe50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    fe54:	subs	r5, r2, #0
    fe58:	beq	ff5c <rb_fsnprint+0x10c>
    fe5c:	mov	r6, #0
    fe60:	mov	r8, r0
    fe64:	mov	r9, r1
    fe68:	mov	sl, r6
    fe6c:	mov	r4, r1
    fe70:	sub	r7, r1, #1
    fe74:	b	fee4 <rb_fsnprint+0x94>
    fe78:	sub	r4, r9, r6
    fe7c:	cmp	r3, r4
    fe80:	bhi	fef0 <rb_fsnprint+0xa0>
    fe84:	mov	r4, r3
    fe88:	ldr	r2, [r5, #4]
    fe8c:	cmp	r2, #0
    fe90:	beq	ff18 <rb_fsnprint+0xc8>
    fe94:	ldr	r3, [r5, #12]
    fe98:	cmp	r3, #0
    fe9c:	beq	ff40 <rb_fsnprint+0xf0>
    fea0:	ldr	r3, [r3]
    fea4:	mov	r1, r4
    fea8:	add	r0, r8, r6
    feac:	bl	455c <vsnprintf@plt>
    feb0:	cmp	r0, #0
    feb4:	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
    feb8:	sub	r3, r4, #1
    febc:	cmp	r3, r0
    fec0:	subcc	r6, r6, #1
    fec4:	addcc	r6, r6, r4
    fec8:	bcs	ff04 <rb_fsnprint+0xb4>
    fecc:	cmp	r6, r7
    fed0:	bcs	ff10 <rb_fsnprint+0xc0>
    fed4:	ldr	r5, [r5, #16]
    fed8:	sub	r4, r4, r0
    fedc:	cmp	r5, #0
    fee0:	beq	fef8 <rb_fsnprint+0xa8>
    fee4:	ldr	r3, [r5]
    fee8:	cmp	r3, #0
    feec:	bne	fe78 <rb_fsnprint+0x28>
    fef0:	cmp	r4, #0
    fef4:	bne	fe88 <rb_fsnprint+0x38>
    fef8:	mov	r0, r6
    fefc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff00:	mov	r0, sl
    ff04:	add	r6, r6, r0
    ff08:	cmp	r6, r7
    ff0c:	bcc	fed4 <rb_fsnprint+0x84>
    ff10:	mov	r0, r7
    ff14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff18:	ldr	r3, [r5, #8]
    ff1c:	cmp	r3, #0
    ff20:	beq	ff00 <rb_fsnprint+0xb0>
    ff24:	ldr	r2, [r5, #12]
    ff28:	mov	r1, r4
    ff2c:	add	r0, r8, r6
    ff30:	blx	r3
    ff34:	cmp	r0, #0
    ff38:	bge	feb8 <rb_fsnprint+0x68>
    ff3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff40:	mov	r1, r2
    ff44:	add	r0, r8, r6
    ff48:	mov	r2, r4
    ff4c:	bl	46a0 <rb_strlcpy@plt>
    ff50:	cmp	r0, #0
    ff54:	bge	feb8 <rb_fsnprint+0x68>
    ff58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ff5c:	mov	r0, r5
    ff60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000ff64 <rb_fsnprintf>:
    ff64:	push	{r3}		; (str r3, [sp, #-4]!)
    ff68:	mov	ip, #0
    ff6c:	push	{r4, lr}
    ff70:	sub	sp, sp, #28
    ff74:	add	r3, sp, #4
    ff78:	ldr	r4, [sp, #36]	; 0x24
    ff7c:	str	r2, [sp, #20]
    ff80:	add	lr, sp, #40	; 0x28
    ff84:	mov	r2, r3
    ff88:	str	r4, [sp, #8]
    ff8c:	str	ip, [sp, #12]
    ff90:	str	ip, [sp, #4]
    ff94:	str	sp, [sp, #16]
    ff98:	str	lr, [sp]
    ff9c:	bl	4694 <rb_fsnprint@plt>
    ffa0:	add	sp, sp, #28
    ffa4:	pop	{r4, lr}
    ffa8:	add	sp, sp, #4
    ffac:	bx	lr

0000ffb0 <rb_helper_child>:
    ffb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffb4:	mov	r9, r0
    ffb8:	ldr	r0, [pc, #520]	; 101c8 <rb_helper_child+0x218>
    ffbc:	sub	sp, sp, #28
    ffc0:	add	r0, pc, r0
    ffc4:	mov	r8, r1
    ffc8:	mov	sl, r2
    ffcc:	str	r3, [sp, #20]
    ffd0:	bl	4598 <getenv@plt>
    ffd4:	mov	r6, r0
    ffd8:	ldr	r0, [pc, #492]	; 101cc <rb_helper_child+0x21c>
    ffdc:	add	r0, pc, r0
    ffe0:	bl	4598 <getenv@plt>
    ffe4:	mov	r5, r0
    ffe8:	ldr	r0, [pc, #480]	; 101d0 <rb_helper_child+0x220>
    ffec:	add	r0, pc, r0
    fff0:	bl	4598 <getenv@plt>
    fff4:	cmp	r5, #0
    fff8:	cmpne	r6, #0
    fffc:	moveq	r4, #1
   10000:	movne	r4, #0
   10004:	cmp	r0, #0
   10008:	orreq	r4, r4, #1
   1000c:	cmp	r4, #0
   10010:	bne	101c0 <rb_helper_child+0x210>
   10014:	mov	fp, r0
   10018:	mov	r1, #84	; 0x54
   1001c:	mov	r0, #1
   10020:	bl	45ec <calloc@plt>
   10024:	subs	r7, r0, #0
   10028:	beq	101bc <rb_helper_child+0x20c>
   1002c:	mov	r0, r6
   10030:	mov	r2, #10
   10034:	mov	r1, r4
   10038:	bl	4874 <strtol@plt>
   1003c:	mov	r2, #10
   10040:	mov	r1, r4
   10044:	mov	r6, r0
   10048:	mov	r0, r5
   1004c:	bl	4874 <strtol@plt>
   10050:	mov	r2, #10
   10054:	mov	r1, r4
   10058:	mov	r5, r0
   1005c:	mov	r0, fp
   10060:	bl	4874 <strtol@plt>
   10064:	subs	fp, r0, #0
   10068:	bgt	1007c <rb_helper_child+0xcc>
   1006c:	b	1009c <rb_helper_child+0xec>
   10070:	add	r4, r4, #1
   10074:	cmp	fp, r4
   10078:	beq	1009c <rb_helper_child+0xec>
   1007c:	cmp	r6, r4
   10080:	cmpne	r5, r4
   10084:	beq	10070 <rb_helper_child+0xc0>
   10088:	mov	r0, r4
   1008c:	add	r4, r4, #1
   10090:	bl	4940 <close@plt>
   10094:	cmp	fp, r4
   10098:	bne	1007c <rb_helper_child+0xcc>
   1009c:	ldr	r0, [pc, #304]	; 101d4 <rb_helper_child+0x224>
   100a0:	mov	r1, #2
   100a4:	add	r0, pc, r0
   100a8:	bl	437c <open@plt>
   100ac:	cmp	r6, #0
   100b0:	cmpne	r5, #0
   100b4:	mov	r4, r0
   100b8:	bne	10170 <rb_helper_child+0x1c0>
   100bc:	cmp	r6, #1
   100c0:	cmpne	r5, #1
   100c4:	bne	10184 <rb_helper_child+0x1d4>
   100c8:	cmp	r6, #2
   100cc:	cmpne	r5, #2
   100d0:	bne	1019c <rb_helper_child+0x1ec>
   100d4:	cmp	r4, #2
   100d8:	bgt	101b0 <rb_helper_child+0x200>
   100dc:	ldr	r3, [sp, #76]	; 0x4c
   100e0:	ldr	r1, [sp, #20]
   100e4:	str	r3, [sp, #8]
   100e8:	ldr	r3, [sp, #72]	; 0x48
   100ec:	ldr	r2, [sp, #64]	; 0x40
   100f0:	str	r3, [sp, #4]
   100f4:	mov	r0, sl
   100f8:	mov	r3, #0
   100fc:	str	fp, [sp]
   10100:	bl	4a3c <rb_lib_init@plt>
   10104:	ldr	r0, [sp, #68]	; 0x44
   10108:	bl	4b50 <rb_linebuf_init@plt>
   1010c:	add	r0, r7, #4
   10110:	bl	4af0 <rb_linebuf_newbuf@plt>
   10114:	add	r0, r7, #32
   10118:	bl	4af0 <rb_linebuf_newbuf@plt>
   1011c:	ldr	r2, [pc, #180]	; 101d8 <rb_helper_child+0x228>
   10120:	mov	r1, #8
   10124:	add	r2, pc, r2
   10128:	mov	r0, r6
   1012c:	bl	4a84 <rb_open@plt>
   10130:	ldr	r2, [pc, #164]	; 101dc <rb_helper_child+0x22c>
   10134:	mov	r1, #8
   10138:	add	r2, pc, r2
   1013c:	str	r0, [r7, #60]	; 0x3c
   10140:	mov	r0, r5
   10144:	bl	4a84 <rb_open@plt>
   10148:	str	r0, [r7, #64]	; 0x40
   1014c:	ldr	r0, [r7, #60]	; 0x3c
   10150:	bl	461c <rb_set_nb@plt>
   10154:	ldr	r0, [r7, #64]	; 0x40
   10158:	bl	461c <rb_set_nb@plt>
   1015c:	mov	r0, r7
   10160:	str	r9, [r7, #76]	; 0x4c
   10164:	str	r8, [r7, #80]	; 0x50
   10168:	add	sp, sp, #28
   1016c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10170:	mov	r1, #0
   10174:	bl	4ac0 <dup2@plt>
   10178:	cmp	r6, #1
   1017c:	cmpne	r5, #1
   10180:	beq	100c8 <rb_helper_child+0x118>
   10184:	mov	r1, #1
   10188:	mov	r0, r4
   1018c:	bl	4ac0 <dup2@plt>
   10190:	cmp	r6, #2
   10194:	cmpne	r5, #2
   10198:	beq	100d4 <rb_helper_child+0x124>
   1019c:	mov	r1, #2
   101a0:	mov	r0, r4
   101a4:	bl	4ac0 <dup2@plt>
   101a8:	cmp	r4, #2
   101ac:	ble	100dc <rb_helper_child+0x12c>
   101b0:	mov	r0, r4
   101b4:	bl	4940 <close@plt>
   101b8:	b	100dc <rb_helper_child+0x12c>
   101bc:	bl	4988 <rb_outofmemory@plt>
   101c0:	mov	r0, #0
   101c4:	b	10168 <rb_helper_child+0x1b8>
   101c8:	.word	0x00006a98
   101cc:	.word	0x00006a80
   101d0:	.word	0x00006a74
   101d4:	.word	0x000069c4
   101d8:	.word	0x00006950
   101dc:	.word	0x00006950

000101e0 <rb_helper_start>:
   101e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101e4:	mov	r7, r1
   101e8:	sub	sp, sp, #188	; 0xbc
   101ec:	mov	r6, r0
   101f0:	mov	r1, #1
   101f4:	mov	r0, r7
   101f8:	mov	r9, r2
   101fc:	mov	r8, r3
   10200:	bl	473c <access@plt>
   10204:	cmn	r0, #1
   10208:	beq	103ec <rb_helper_start+0x20c>
   1020c:	mov	r1, #84	; 0x54
   10210:	mov	r0, #1
   10214:	bl	45ec <calloc@plt>
   10218:	subs	r4, r0, #0
   1021c:	beq	103f4 <rb_helper_start+0x214>
   10220:	ldr	r2, [pc, #464]	; 103f8 <rb_helper_start+0x218>
   10224:	add	r5, sp, #56	; 0x38
   10228:	mov	r3, r6
   1022c:	add	r2, pc, r2
   10230:	mov	r1, #128	; 0x80
   10234:	mov	r0, r5
   10238:	bl	4bb0 <snprintf@plt>
   1023c:	mov	r2, r5
   10240:	add	r1, sp, #12
   10244:	add	r0, sp, #8
   10248:	bl	4970 <rb_pipe@plt>
   1024c:	cmp	r0, #0
   10250:	blt	103d8 <rb_helper_start+0x1f8>
   10254:	ldr	r2, [pc, #416]	; 103fc <rb_helper_start+0x21c>
   10258:	mov	r3, r6
   1025c:	add	r2, pc, r2
   10260:	mov	r1, #128	; 0x80
   10264:	mov	r0, r5
   10268:	bl	4bb0 <snprintf@plt>
   1026c:	mov	r2, r5
   10270:	add	r1, sp, #20
   10274:	add	r0, sp, #16
   10278:	bl	4970 <rb_pipe@plt>
   1027c:	cmp	r0, #0
   10280:	blt	103d8 <rb_helper_start+0x1f8>
   10284:	ldr	r0, [sp, #12]
   10288:	bl	44e4 <rb_get_fd@plt>
   1028c:	ldr	fp, [pc, #364]	; 10400 <rb_helper_start+0x220>
   10290:	add	sl, sp, #24
   10294:	add	fp, pc, fp
   10298:	mov	r2, fp
   1029c:	mov	r1, #16
   102a0:	mov	r3, r0
   102a4:	mov	r0, sl
   102a8:	bl	4bb0 <snprintf@plt>
   102ac:	ldr	r0, [sp, #16]
   102b0:	bl	44e4 <rb_get_fd@plt>
   102b4:	mov	r2, fp
   102b8:	add	fp, sp, #40	; 0x28
   102bc:	mov	r1, #16
   102c0:	mov	r3, r0
   102c4:	mov	r0, fp
   102c8:	bl	4bb0 <snprintf@plt>
   102cc:	ldr	r0, [sp, #8]
   102d0:	bl	461c <rb_set_nb@plt>
   102d4:	ldr	r0, [sp, #12]
   102d8:	bl	461c <rb_set_nb@plt>
   102dc:	ldr	r0, [sp, #16]
   102e0:	bl	461c <rb_set_nb@plt>
   102e4:	ldr	r0, [sp, #20]
   102e8:	bl	461c <rb_set_nb@plt>
   102ec:	ldr	r0, [pc, #272]	; 10404 <rb_helper_start+0x224>
   102f0:	mov	r1, fp
   102f4:	mov	r2, #1
   102f8:	add	r0, pc, r0
   102fc:	bl	44cc <rb_setenv@plt>
   10300:	ldr	r0, [pc, #256]	; 10408 <rb_helper_start+0x228>
   10304:	mov	r1, sl
   10308:	mov	r2, #1
   1030c:	add	r0, pc, r0
   10310:	bl	44cc <rb_setenv@plt>
   10314:	ldr	r1, [pc, #240]	; 1040c <rb_helper_start+0x22c>
   10318:	ldr	r0, [pc, #240]	; 10410 <rb_helper_start+0x230>
   1031c:	mov	r2, #1
   10320:	add	r1, pc, r1
   10324:	add	r0, pc, r0
   10328:	bl	44cc <rb_setenv@plt>
   1032c:	ldr	r2, [pc, #224]	; 10414 <rb_helper_start+0x234>
   10330:	mov	r3, r6
   10334:	add	r2, pc, r2
   10338:	mov	r1, #128	; 0x80
   1033c:	mov	r0, r5
   10340:	bl	4bb0 <snprintf@plt>
   10344:	mov	r3, #0
   10348:	mov	r0, r7
   1034c:	mov	r1, sp
   10350:	str	r5, [sp]
   10354:	str	r3, [sp, #4]
   10358:	bl	4b98 <rb_spawn_process@plt>
   1035c:	cmn	r0, #1
   10360:	mov	r5, r0
   10364:	beq	103b8 <rb_helper_start+0x1d8>
   10368:	ldr	r0, [sp, #12]
   1036c:	bl	4868 <rb_close@plt>
   10370:	ldr	r0, [sp, #16]
   10374:	bl	4868 <rb_close@plt>
   10378:	add	r0, r4, #4
   1037c:	bl	4af0 <rb_linebuf_newbuf@plt>
   10380:	add	r0, r4, #32
   10384:	bl	4af0 <rb_linebuf_newbuf@plt>
   10388:	ldr	r2, [sp, #8]
   1038c:	ldr	r3, [sp, #20]
   10390:	mov	r1, #0
   10394:	mov	r0, r4
   10398:	str	r9, [r4, #76]	; 0x4c
   1039c:	str	r8, [r4, #80]	; 0x50
   103a0:	str	r1, [r4, #72]	; 0x48
   103a4:	str	r5, [r4, #68]	; 0x44
   103a8:	str	r2, [r4, #60]	; 0x3c
   103ac:	str	r3, [r4, #64]	; 0x40
   103b0:	add	sp, sp, #188	; 0xbc
   103b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103b8:	ldr	r0, [sp, #8]
   103bc:	bl	4868 <rb_close@plt>
   103c0:	ldr	r0, [sp, #12]
   103c4:	bl	4868 <rb_close@plt>
   103c8:	ldr	r0, [sp, #16]
   103cc:	bl	4868 <rb_close@plt>
   103d0:	ldr	r0, [sp, #20]
   103d4:	bl	4868 <rb_close@plt>
   103d8:	mov	r0, r4
   103dc:	bl	46f4 <free@plt>
   103e0:	mov	r0, #0
   103e4:	add	sp, sp, #188	; 0xbc
   103e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   103ec:	mov	r0, #0
   103f0:	b	103e4 <rb_helper_start+0x204>
   103f4:	bl	4988 <rb_outofmemory@plt>
   103f8:	.word	0x00006870
   103fc:	.word	0x00006854
   10400:	.word	0x00006608
   10404:	.word	0x00006760
   10408:	.word	0x00006750
   1040c:	.word	0x000067a4
   10410:	.word	0x0000673c
   10414:	.word	0x00006794

00010418 <rb_helper_restart>:
   10418:	ldr	r3, [r0, #80]	; 0x50
   1041c:	bx	r3

00010420 <rb_helper_write_sendq>:
   10420:	ldr	r3, [r1, #16]
   10424:	cmp	r3, #0
   10428:	bxle	lr
   1042c:	push	{r4, r5, r6, lr}
   10430:	mov	r4, r0
   10434:	mov	r6, r1
   10438:	add	r5, r1, #4
   1043c:	mov	r1, r5
   10440:	mov	r0, r4
   10444:	bl	47cc <rb_linebuf_flush@plt>
   10448:	cmp	r0, #0
   1044c:	bgt	1043c <rb_helper_write_sendq+0x1c>
   10450:	beq	10490 <rb_helper_write_sendq+0x70>
   10454:	bl	4ce8 <__errno_location@plt>
   10458:	ldr	r0, [r0]
   1045c:	bl	43dc <rb_ignore_errno@plt>
   10460:	cmp	r0, #0
   10464:	beq	10490 <rb_helper_write_sendq+0x70>
   10468:	ldr	r3, [r6, #16]
   1046c:	cmp	r3, #0
   10470:	pople	{r4, r5, r6, pc}
   10474:	ldr	r2, [pc, #32]	; 1049c <rb_helper_write_sendq+0x7c>
   10478:	mov	r3, r6
   1047c:	ldr	r0, [r6, #64]	; 0x40
   10480:	add	r2, pc, r2
   10484:	mov	r1, #2
   10488:	pop	{r4, r5, r6, lr}
   1048c:	b	44a8 <rb_setselect@plt>
   10490:	mov	r0, r6
   10494:	pop	{r4, r5, r6, lr}
   10498:	b	45d4 <rb_helper_restart@plt>
   1049c:	.word	0xffffff98

000104a0 <rb_helper_read_cb>:
   104a0:	push	{r4, r5, r6, r7, r8, lr}
   104a4:	subs	r4, r1, #0
   104a8:	popeq	{r4, r5, r6, r7, r8, pc}
   104ac:	ldr	r5, [pc, #132]	; 10538 <rb_helper_read_cb+0x98>
   104b0:	mov	r8, #32768	; 0x8000
   104b4:	add	r5, pc, r5
   104b8:	add	r7, r4, #32
   104bc:	mov	r6, #0
   104c0:	b	104d4 <rb_helper_read_cb+0x34>
   104c4:	bl	467c <rb_linebuf_parse@plt>
   104c8:	ldr	r3, [r4, #76]	; 0x4c
   104cc:	mov	r0, r4
   104d0:	blx	r3
   104d4:	mov	r2, r8
   104d8:	mov	r1, r5
   104dc:	ldr	r0, [r4, #60]	; 0x3c
   104e0:	bl	4784 <rb_read@plt>
   104e4:	mov	r3, r6
   104e8:	mov	r1, r5
   104ec:	subs	r2, r0, #0
   104f0:	mov	r0, r7
   104f4:	bgt	104c4 <rb_helper_read_cb+0x24>
   104f8:	beq	1052c <rb_helper_read_cb+0x8c>
   104fc:	bl	4ce8 <__errno_location@plt>
   10500:	ldr	r0, [r0]
   10504:	bl	43dc <rb_ignore_errno@plt>
   10508:	cmp	r0, #0
   1050c:	beq	1052c <rb_helper_read_cb+0x8c>
   10510:	ldr	r2, [pc, #36]	; 1053c <rb_helper_read_cb+0x9c>
   10514:	mov	r3, r4
   10518:	ldr	r0, [r4, #60]	; 0x3c
   1051c:	add	r2, pc, r2
   10520:	mov	r1, #1
   10524:	pop	{r4, r5, r6, r7, r8, lr}
   10528:	b	44a8 <rb_setselect@plt>
   1052c:	mov	r0, r4
   10530:	pop	{r4, r5, r6, r7, r8, lr}
   10534:	b	45d4 <rb_helper_restart@plt>
   10538:	.word	0x0002ceb4
   1053c:	.word	0xffffff7c

00010540 <rb_helper_write_queue>:
   10540:	push	{r1, r2, r3}
   10544:	add	r0, r0, #4
   10548:	push	{lr}		; (str lr, [sp, #-4]!)
   1054c:	sub	sp, sp, #24
   10550:	add	r3, sp, #4
   10554:	ldr	lr, [sp, #28]
   10558:	mov	r2, #0
   1055c:	add	ip, sp, #32
   10560:	mov	r1, r3
   10564:	str	lr, [sp, #8]
   10568:	str	r2, [sp, #12]
   1056c:	str	r2, [sp, #4]
   10570:	str	r2, [sp, #20]
   10574:	str	sp, [sp, #16]
   10578:	str	ip, [sp]
   1057c:	bl	4bec <rb_linebuf_put@plt>
   10580:	add	sp, sp, #24
   10584:	pop	{lr}		; (ldr lr, [sp], #4)
   10588:	add	sp, sp, #12
   1058c:	bx	lr

00010590 <rb_helper_write_flush>:
   10590:	mov	r1, r0
   10594:	ldr	r0, [r0, #64]	; 0x40
   10598:	b	10420 <rb_helper_write_sendq>

0001059c <rb_helper_write>:
   1059c:	push	{r1, r2, r3}
   105a0:	mov	r2, #0
   105a4:	push	{r4, lr}
   105a8:	sub	sp, sp, #28
   105ac:	add	r3, sp, #4
   105b0:	ldr	lr, [sp, #36]	; 0x24
   105b4:	add	ip, sp, #40	; 0x28
   105b8:	mov	r4, r0
   105bc:	mov	r1, r3
   105c0:	add	r0, r0, #4
   105c4:	str	lr, [sp, #8]
   105c8:	str	r2, [sp, #12]
   105cc:	str	r2, [sp, #4]
   105d0:	str	r2, [sp, #20]
   105d4:	str	ip, [sp]
   105d8:	str	sp, [sp, #16]
   105dc:	bl	4bec <rb_linebuf_put@plt>
   105e0:	mov	r0, r4
   105e4:	bl	10590 <rb_helper_write_flush>
   105e8:	add	sp, sp, #28
   105ec:	pop	{r4, lr}
   105f0:	add	sp, sp, #12
   105f4:	bx	lr

000105f8 <rb_helper_run>:
   105f8:	subs	r1, r0, #0
   105fc:	bxeq	lr
   10600:	ldr	r0, [r1, #60]	; 0x3c
   10604:	b	104a0 <rb_helper_read_cb>

00010608 <rb_helper_close>:
   10608:	push	{r4, lr}
   1060c:	subs	r4, r0, #0
   10610:	popeq	{r4, pc}
   10614:	mov	r1, #9
   10618:	ldr	r0, [r4, #68]	; 0x44
   1061c:	bl	46e8 <rb_kill@plt>
   10620:	ldr	r0, [r4, #60]	; 0x3c
   10624:	bl	4868 <rb_close@plt>
   10628:	ldr	r0, [r4, #64]	; 0x40
   1062c:	bl	4868 <rb_close@plt>
   10630:	mov	r0, r4
   10634:	pop	{r4, lr}
   10638:	b	46f4 <free@plt>

0001063c <rb_helper_read>:
   1063c:	push	{lr}		; (str lr, [sp, #-4]!)
   10640:	sub	sp, sp, #12
   10644:	mov	r3, #0
   10648:	str	r3, [sp]
   1064c:	add	r0, r0, #32
   10650:	bl	479c <rb_linebuf_get@plt>
   10654:	add	sp, sp, #12
   10658:	pop	{pc}		; (ldr pc, [sp], #4)

0001065c <rb_helper_loop>:
   1065c:	push	{r4, lr}
   10660:	mov	r4, r1
   10664:	bl	4364 <rb_helper_run@plt>
   10668:	mov	r0, r4
   1066c:	bl	4748 <rb_lib_loop@plt>

00010670 <rb_init_netio_devpoll>:
   10670:	mov	r0, #38	; 0x26
   10674:	bx	lr

00010678 <rb_setselect_devpoll>:
   10678:	push	{r4, lr}
   1067c:	bl	4ce8 <__errno_location@plt>
   10680:	mov	r3, #38	; 0x26
   10684:	str	r3, [r0]
   10688:	pop	{r4, pc}

0001068c <rb_select_devpoll>:
   1068c:	push	{r4, lr}
   10690:	bl	4ce8 <__errno_location@plt>
   10694:	mov	r3, #38	; 0x26
   10698:	str	r3, [r0]
   1069c:	mvn	r0, #0
   106a0:	pop	{r4, pc}

000106a4 <rb_setup_fd_devpoll>:
   106a4:	push	{r4, lr}
   106a8:	bl	4ce8 <__errno_location@plt>
   106ac:	mov	r3, #38	; 0x26
   106b0:	str	r3, [r0]
   106b4:	mvn	r0, #0
   106b8:	pop	{r4, pc}

000106bc <rb_read_timerfd>:
   106bc:	push	{r4, r5, r6, lr}
   106c0:	subs	r4, r1, #0
   106c4:	sub	sp, sp, #8
   106c8:	beq	10764 <rb_read_timerfd+0xa8>
   106cc:	mov	r2, #8
   106d0:	mov	r1, sp
   106d4:	mov	r5, r0
   106d8:	bl	4784 <rb_read@plt>
   106dc:	cmp	r0, #0
   106e0:	beq	10758 <rb_read_timerfd+0x9c>
   106e4:	blt	10710 <rb_read_timerfd+0x54>
   106e8:	ldr	r2, [pc, #128]	; 10770 <rb_read_timerfd+0xb4>
   106ec:	mov	r0, r5
   106f0:	mov	r3, r4
   106f4:	add	r2, pc, r2
   106f8:	mov	r1, #1
   106fc:	bl	44a8 <rb_setselect@plt>
   10700:	mov	r0, r4
   10704:	bl	48a4 <rb_run_one_event@plt>
   10708:	add	sp, sp, #8
   1070c:	pop	{r4, r5, r6, pc}
   10710:	bl	4ce8 <__errno_location@plt>
   10714:	mov	r6, r0
   10718:	ldr	r0, [r0]
   1071c:	bl	43dc <rb_ignore_errno@plt>
   10720:	cmp	r0, #0
   10724:	bne	106e8 <rb_read_timerfd+0x2c>
   10728:	mov	r0, r5
   1072c:	bl	4868 <rb_close@plt>
   10730:	ldr	r0, [r6]
   10734:	ldr	r4, [r4, #20]
   10738:	bl	43a0 <strerror@plt>
   1073c:	mov	r1, r4
   10740:	mov	r2, r0
   10744:	ldr	r0, [pc, #40]	; 10774 <rb_read_timerfd+0xb8>
   10748:	add	r0, pc, r0
   1074c:	bl	491c <rb_lib_log@plt>
   10750:	add	sp, sp, #8
   10754:	pop	{r4, r5, r6, pc}
   10758:	bl	4ce8 <__errno_location@plt>
   1075c:	mov	r6, r0
   10760:	b	10728 <rb_read_timerfd+0x6c>
   10764:	bl	4868 <rb_close@plt>
   10768:	add	sp, sp, #8
   1076c:	pop	{r4, r5, r6, pc}
   10770:	.word	0xffffffc0
   10774:	.word	0x00006390

00010778 <rb_init_netio_epoll>:
   10778:	push	{r4, r5, r6, lr}
   1077c:	mov	r1, #12
   10780:	ldr	r5, [pc, #124]	; 10804 <rb_init_netio_epoll+0x8c>
   10784:	mov	r4, #0
   10788:	add	r5, pc, r5
   1078c:	mov	r0, #1
   10790:	str	r4, [r5]
   10794:	str	r4, [r5, #4]
   10798:	bl	45ec <calloc@plt>
   1079c:	subs	r6, r0, #0
   107a0:	beq	107f8 <rb_init_netio_epoll+0x80>
   107a4:	str	r6, [r5, #8]
   107a8:	bl	43b8 <getdtablesize@plt>
   107ac:	str	r0, [r6, #8]
   107b0:	bl	44f0 <epoll_create@plt>
   107b4:	cmp	r0, #0
   107b8:	str	r0, [r6]
   107bc:	blt	107fc <rb_init_netio_epoll+0x84>
   107c0:	ldr	r2, [pc, #64]	; 10808 <rb_init_netio_epoll+0x90>
   107c4:	mov	r1, #64	; 0x40
   107c8:	add	r2, pc, r2
   107cc:	bl	4a84 <rb_open@plt>
   107d0:	ldr	r5, [r5, #8]
   107d4:	mov	r0, #1
   107d8:	ldr	r1, [r5, #8]
   107dc:	lsl	r1, r1, #4
   107e0:	bl	45ec <calloc@plt>
   107e4:	cmp	r0, #0
   107e8:	beq	107f8 <rb_init_netio_epoll+0x80>
   107ec:	str	r0, [r5, #4]
   107f0:	mov	r0, r4
   107f4:	pop	{r4, r5, r6, pc}
   107f8:	bl	4988 <rb_outofmemory@plt>
   107fc:	mvn	r0, #0
   10800:	pop	{r4, r5, r6, pc}
   10804:	.word	0x00034be0
   10808:	.word	0x00006344

0001080c <rb_setup_fd_epoll>:
   1080c:	mov	r0, #0
   10810:	bx	lr

00010814 <rb_setselect_epoll>:
   10814:	push	{lr}		; (str lr, [sp, #-4]!)
   10818:	tst	r1, #1
   1081c:	ldr	lr, [r0, #20]
   10820:	sub	sp, sp, #20
   10824:	moveq	ip, lr
   10828:	beq	10844 <rb_setselect_epoll+0x30>
   1082c:	cmp	r2, #0
   10830:	orrne	ip, lr, #1
   10834:	biceq	ip, lr, #1
   10838:	str	ip, [r0, #20]
   1083c:	str	r2, [r0, #28]
   10840:	str	r3, [r0, #32]
   10844:	tst	r1, #2
   10848:	beq	10864 <rb_setselect_epoll+0x50>
   1084c:	cmp	r2, #0
   10850:	orrne	ip, ip, #4
   10854:	biceq	ip, ip, #4
   10858:	str	ip, [r0, #20]
   1085c:	str	r2, [r0, #36]	; 0x24
   10860:	str	r3, [r0, #40]	; 0x28
   10864:	cmp	lr, #0
   10868:	bne	108b4 <rb_setselect_epoll+0xa0>
   1086c:	cmp	ip, #0
   10870:	beq	108ac <rb_setselect_epoll+0x98>
   10874:	ble	108cc <rb_setselect_epoll+0xb8>
   10878:	mov	r1, #1
   1087c:	orr	ip, ip, #-2147483648	; 0x80000000
   10880:	str	ip, [sp]
   10884:	str	r0, [sp, #8]
   10888:	ldr	r3, [pc, #108]	; 108fc <rb_setselect_epoll+0xe8>
   1088c:	ldr	r2, [r0, #12]
   10890:	add	r3, pc, r3
   10894:	ldr	r0, [r3, #8]
   10898:	mov	r3, sp
   1089c:	ldr	r0, [r0]
   108a0:	bl	4c58 <epoll_ctl@plt>
   108a4:	cmp	r0, #0
   108a8:	bne	108dc <rb_setselect_epoll+0xc8>
   108ac:	add	sp, sp, #20
   108b0:	pop	{pc}		; (ldr pc, [sp], #4)
   108b4:	cmp	ip, #0
   108b8:	ble	108cc <rb_setselect_epoll+0xb8>
   108bc:	cmp	lr, ip
   108c0:	movne	r1, #3
   108c4:	bne	1087c <rb_setselect_epoll+0x68>
   108c8:	b	108ac <rb_setselect_epoll+0x98>
   108cc:	str	ip, [sp]
   108d0:	str	r0, [sp, #8]
   108d4:	mov	r1, #2
   108d8:	b	10888 <rb_setselect_epoll+0x74>
   108dc:	bl	4ce8 <__errno_location@plt>
   108e0:	ldr	r0, [r0]
   108e4:	bl	43a0 <strerror@plt>
   108e8:	mov	r1, r0
   108ec:	ldr	r0, [pc, #12]	; 10900 <rb_setselect_epoll+0xec>
   108f0:	add	r0, pc, r0
   108f4:	bl	491c <rb_lib_log@plt>
   108f8:	bl	43c4 <abort@plt>
   108fc:	.word	0x00034ad8
   10900:	.word	0x00006234

00010904 <rb_select_epoll>:
   10904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10908:	mov	r3, r0
   1090c:	ldr	r8, [pc, #464]	; 10ae4 <rb_select_epoll+0x1e0>
   10910:	sub	sp, sp, #36	; 0x24
   10914:	add	r8, pc, r8
   10918:	ldr	r0, [r8, #8]
   1091c:	ldm	r0, {r0, r1, r2}
   10920:	bl	47b4 <epoll_wait@plt>
   10924:	mov	r9, r0
   10928:	bl	4ce8 <__errno_location@plt>
   1092c:	mov	r5, r0
   10930:	ldr	r4, [r0]
   10934:	str	r0, [sp, #8]
   10938:	bl	4994 <rb_set_time@plt>
   1093c:	cmp	r9, #0
   10940:	str	r4, [r5]
   10944:	blt	10acc <rb_select_epoll+0x1c8>
   10948:	beq	10a90 <rb_select_epoll+0x18c>
   1094c:	ldr	r3, [pc, #404]	; 10ae8 <rb_select_epoll+0x1e4>
   10950:	ldr	sl, [pc, #404]	; 10aec <rb_select_epoll+0x1e8>
   10954:	add	r3, pc, r3
   10958:	str	r3, [sp, #4]
   1095c:	ldr	r3, [pc, #396]	; 10af0 <rb_select_epoll+0x1ec>
   10960:	mov	r5, #0
   10964:	add	r3, pc, r3
   10968:	add	sl, pc, sl
   1096c:	str	r3, [sp, #12]
   10970:	mov	r7, r5
   10974:	b	109b0 <rb_select_epoll+0xac>
   10978:	ldr	r3, [r4, #36]	; 0x24
   1097c:	ldr	r1, [r4, #40]	; 0x28
   10980:	cmp	r3, #0
   10984:	str	r7, [r4, #36]	; 0x24
   10988:	str	r7, [r4, #40]	; 0x28
   1098c:	beq	10a9c <rb_select_epoll+0x198>
   10990:	mov	r0, r4
   10994:	blx	r3
   10998:	ldrb	r3, [r4, #16]
   1099c:	tst	r3, #1
   109a0:	bne	10a14 <rb_select_epoll+0x110>
   109a4:	add	r5, r5, #1
   109a8:	cmp	r9, r5
   109ac:	beq	10a90 <rb_select_epoll+0x18c>
   109b0:	ldr	r3, [r8, #8]
   109b4:	lsl	fp, r5, #4
   109b8:	ldr	r3, [r3, #4]
   109bc:	add	r2, r3, fp
   109c0:	ldr	r3, [r3, r5, lsl #4]
   109c4:	ldr	r4, [r2, #8]
   109c8:	tst	r3, #25
   109cc:	ldr	r6, [r4, #20]
   109d0:	beq	109f4 <rb_select_epoll+0xf0>
   109d4:	ldr	r3, [r4, #28]
   109d8:	ldr	r1, [r4, #32]
   109dc:	cmp	r3, #0
   109e0:	str	r7, [r4, #28]
   109e4:	str	r7, [r4, #32]
   109e8:	beq	109f4 <rb_select_epoll+0xf0>
   109ec:	mov	r0, r4
   109f0:	blx	r3
   109f4:	ldrb	r3, [r4, #16]
   109f8:	tst	r3, #1
   109fc:	beq	109a4 <rb_select_epoll+0xa0>
   10a00:	ldr	r3, [sl, #8]
   10a04:	ldr	r3, [r3, #4]
   10a08:	ldr	r3, [r3, fp]
   10a0c:	tst	r3, #28
   10a10:	bne	10978 <rb_select_epoll+0x74>
   10a14:	ldr	r1, [r4, #28]
   10a18:	ldr	r0, [r4, #36]	; 0x24
   10a1c:	adds	r3, r1, #0
   10a20:	movne	r3, #1
   10a24:	cmp	r0, #0
   10a28:	beq	10aa8 <rb_select_epoll+0x1a4>
   10a2c:	orr	r3, r3, #4
   10a30:	cmp	r6, r3
   10a34:	beq	109a4 <rb_select_epoll+0xa0>
   10a38:	mov	r1, #3
   10a3c:	orr	r2, r3, #-2147483648	; 0x80000000
   10a40:	str	r3, [r4, #20]
   10a44:	str	r2, [sp, #16]
   10a48:	str	r4, [sp, #24]
   10a4c:	ldr	r3, [sp, #4]
   10a50:	ldr	r2, [r4, #12]
   10a54:	ldr	r3, [r3, #8]
   10a58:	ldr	r0, [r3]
   10a5c:	add	r3, sp, #16
   10a60:	bl	4c58 <epoll_ctl@plt>
   10a64:	cmp	r0, #0
   10a68:	beq	109a4 <rb_select_epoll+0xa0>
   10a6c:	ldr	r3, [sp, #8]
   10a70:	add	r5, r5, #1
   10a74:	ldr	r0, [r3]
   10a78:	bl	43a0 <strerror@plt>
   10a7c:	mov	r1, r0
   10a80:	ldr	r0, [sp, #12]
   10a84:	bl	491c <rb_lib_log@plt>
   10a88:	cmp	r9, r5
   10a8c:	bne	109b0 <rb_select_epoll+0xac>
   10a90:	mov	r0, #0
   10a94:	add	sp, sp, #36	; 0x24
   10a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a9c:	ldr	r1, [r4, #28]
   10aa0:	adds	r3, r1, #0
   10aa4:	movne	r3, #1
   10aa8:	cmp	r6, r3
   10aac:	beq	109a4 <rb_select_epoll+0xa0>
   10ab0:	cmp	r1, #0
   10ab4:	streq	r1, [sp, #16]
   10ab8:	streq	r1, [r4, #20]
   10abc:	streq	r4, [sp, #24]
   10ac0:	moveq	r1, #2
   10ac4:	beq	10a4c <rb_select_epoll+0x148>
   10ac8:	b	10a38 <rb_select_epoll+0x134>
   10acc:	mov	r0, r4
   10ad0:	bl	43dc <rb_ignore_errno@plt>
   10ad4:	cmp	r0, #0
   10ad8:	moveq	r0, #5
   10adc:	beq	10a94 <rb_select_epoll+0x190>
   10ae0:	b	10a90 <rb_select_epoll+0x18c>
   10ae4:	.word	0x00034a54
   10ae8:	.word	0x00034a14
   10aec:	.word	0x00034a00
   10af0:	.word	0x000061ec

00010af4 <rb_epoll_supports_event>:
   10af4:	push	{r4, r5, r6, lr}
   10af8:	sub	sp, sp, #288	; 0x120
   10afc:	ldr	r4, [pc, #236]	; 10bf0 <rb_epoll_supports_event+0xfc>
   10b00:	add	r4, pc, r4
   10b04:	ldr	r0, [r4]
   10b08:	cmp	r0, #1
   10b0c:	beq	10b40 <rb_epoll_supports_event+0x4c>
   10b10:	cmn	r0, #1
   10b14:	moveq	r0, #0
   10b18:	beq	10b40 <rb_epoll_supports_event+0x4c>
   10b1c:	ldr	r1, [pc, #208]	; 10bf4 <rb_epoll_supports_event+0x100>
   10b20:	add	r2, sp, #72	; 0x48
   10b24:	add	r1, pc, r1
   10b28:	mov	r0, #3
   10b2c:	bl	4490 <__xstat@plt>
   10b30:	cmp	r0, #0
   10b34:	mvneq	r3, #0
   10b38:	streq	r3, [r4]
   10b3c:	bne	10b48 <rb_epoll_supports_event+0x54>
   10b40:	add	sp, sp, #288	; 0x120
   10b44:	pop	{r4, r5, r6, pc}
   10b48:	mov	r1, #0
   10b4c:	mov	r0, r1
   10b50:	bl	4bc8 <timerfd_create@plt>
   10b54:	cmp	r0, #0
   10b58:	blt	10b74 <rb_epoll_supports_event+0x80>
   10b5c:	bl	4940 <close@plt>
   10b60:	mov	r0, #1
   10b64:	str	r0, [r4]
   10b68:	str	r0, [r4, #4]
   10b6c:	add	sp, sp, #288	; 0x120
   10b70:	pop	{r4, r5, r6, pc}
   10b74:	mov	r3, #0
   10b78:	mov	ip, #26
   10b7c:	mov	r0, r3
   10b80:	add	r2, sp, #4
   10b84:	add	r1, sp, #8
   10b88:	str	r3, [sp, #16]
   10b8c:	str	ip, [sp, #12]
   10b90:	bl	452c <timer_create@plt>
   10b94:	subs	r6, r0, #0
   10b98:	beq	10bb4 <rb_epoll_supports_event+0xc0>
   10b9c:	ldr	r3, [pc, #84]	; 10bf8 <rb_epoll_supports_event+0x104>
   10ba0:	mvn	r2, #0
   10ba4:	add	r3, pc, r3
   10ba8:	mov	r0, #0
   10bac:	str	r2, [r3]
   10bb0:	b	10b40 <rb_epoll_supports_event+0x4c>
   10bb4:	add	r5, sp, #160	; 0xa0
   10bb8:	ldr	r0, [sp, #4]
   10bbc:	bl	4a78 <timer_delete@plt>
   10bc0:	mov	r0, r5
   10bc4:	bl	4394 <sigemptyset@plt>
   10bc8:	mov	r2, r6
   10bcc:	mov	r1, r5
   10bd0:	mvn	r0, #0
   10bd4:	bl	443c <signalfd@plt>
   10bd8:	cmp	r0, #0
   10bdc:	blt	10b9c <rb_epoll_supports_event+0xa8>
   10be0:	bl	4940 <close@plt>
   10be4:	mov	r0, #1
   10be8:	str	r0, [r4]
   10bec:	b	10b40 <rb_epoll_supports_event+0x4c>
   10bf0:	.word	0x00034868
   10bf4:	.word	0x00006054
   10bf8:	.word	0x000347c4

00010bfc <rb_epoll_init_event>:
   10bfc:	push	{r4, r5, r6, lr}
   10c00:	sub	sp, sp, #128	; 0x80
   10c04:	ldr	r5, [pc, #160]	; 10cac <rb_epoll_init_event+0xb0>
   10c08:	bl	10af4 <rb_epoll_supports_event>
   10c0c:	add	r5, pc, r5
   10c10:	ldr	r4, [r5, #4]
   10c14:	cmp	r4, #0
   10c18:	beq	10c24 <rb_epoll_init_event+0x28>
   10c1c:	add	sp, sp, #128	; 0x80
   10c20:	pop	{r4, r5, r6, pc}
   10c24:	mov	r0, sp
   10c28:	bl	4394 <sigemptyset@plt>
   10c2c:	bl	4484 <__libc_current_sigrtmin@plt>
   10c30:	mov	r1, r0
   10c34:	mov	r0, sp
   10c38:	bl	4880 <sigaddset@plt>
   10c3c:	mov	r2, r4
   10c40:	mov	r1, sp
   10c44:	mov	r0, r4
   10c48:	bl	49b8 <sigprocmask@plt>
   10c4c:	mov	r0, sp
   10c50:	bl	4394 <sigemptyset@plt>
   10c54:	bl	4484 <__libc_current_sigrtmin@plt>
   10c58:	mov	r1, r0
   10c5c:	mov	r0, sp
   10c60:	bl	4880 <sigaddset@plt>
   10c64:	mov	r2, r4
   10c68:	mov	r1, sp
   10c6c:	mvn	r0, #0
   10c70:	bl	443c <signalfd@plt>
   10c74:	cmn	r0, #1
   10c78:	streq	r0, [r5]
   10c7c:	beq	10c1c <rb_epoll_init_event+0x20>
   10c80:	ldr	r2, [pc, #40]	; 10cb0 <rb_epoll_init_event+0xb4>
   10c84:	mov	r1, #64	; 0x40
   10c88:	add	r2, pc, r2
   10c8c:	bl	4a84 <rb_open@plt>
   10c90:	mov	r5, r0
   10c94:	bl	461c <rb_set_nb@plt>
   10c98:	mov	r1, r4
   10c9c:	mov	r0, r5
   10ca0:	bl	10cb4 <signalfd_handler>
   10ca4:	add	sp, sp, #128	; 0x80
   10ca8:	pop	{r4, r5, r6, pc}
   10cac:	.word	0x0003475c
   10cb0:	.word	0x00005f08

00010cb4 <signalfd_handler>:
   10cb4:	ldr	r3, [pc, #216]	; 10d94 <signalfd_handler+0xe0>
   10cb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10cbc:	add	r3, pc, r3
   10cc0:	add	sl, r3, #16
   10cc4:	add	r3, r3, #2064	; 0x810
   10cc8:	mov	r6, r0
   10ccc:	mov	r2, sl
   10cd0:	mov	r0, r3
   10cd4:	mov	r1, #128	; 0x80
   10cd8:	str	r2, [r3]
   10cdc:	add	r2, r2, #128	; 0x80
   10ce0:	cmp	r2, r0
   10ce4:	str	r1, [r3, #4]
   10ce8:	add	r3, r3, #8
   10cec:	bne	10cd8 <signalfd_handler+0x24>
   10cf0:	ldr	r7, [pc, #160]	; 10d98 <signalfd_handler+0xe4>
   10cf4:	mov	r9, #16
   10cf8:	add	r7, pc, r7
   10cfc:	add	r8, r7, #2064	; 0x810
   10d00:	add	r7, r7, r9
   10d04:	mov	r0, r6
   10d08:	bl	44e4 <rb_get_fd@plt>
   10d0c:	mov	r2, r9
   10d10:	mov	r1, r8
   10d14:	bl	4c70 <readv@plt>
   10d18:	cmp	r0, #0
   10d1c:	beq	10d84 <signalfd_handler+0xd0>
   10d20:	blt	10d54 <signalfd_handler+0xa0>
   10d24:	asrs	r0, r0, #7
   10d28:	movne	r4, sl
   10d2c:	addne	r5, r7, r0, lsl #7
   10d30:	beq	10d04 <signalfd_handler+0x50>
   10d34:	ldr	r3, [r4, #48]	; 0x30
   10d38:	add	r4, r4, #128	; 0x80
   10d3c:	subs	r0, r3, #0
   10d40:	beq	10d48 <signalfd_handler+0x94>
   10d44:	bl	48a4 <rb_run_one_event@plt>
   10d48:	cmp	r5, r4
   10d4c:	bne	10d34 <signalfd_handler+0x80>
   10d50:	b	10d04 <signalfd_handler+0x50>
   10d54:	bl	4ce8 <__errno_location@plt>
   10d58:	ldr	r0, [r0]
   10d5c:	bl	43dc <rb_ignore_errno@plt>
   10d60:	cmp	r0, #0
   10d64:	beq	10d84 <signalfd_handler+0xd0>
   10d68:	ldr	r2, [pc, #44]	; 10d9c <signalfd_handler+0xe8>
   10d6c:	mov	r0, r6
   10d70:	mov	r3, #0
   10d74:	add	r2, pc, r2
   10d78:	mov	r1, #1
   10d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d80:	b	44a8 <rb_setselect@plt>
   10d84:	mov	r0, r6
   10d88:	bl	4868 <rb_close@plt>
   10d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d90:	b	10bfc <rb_epoll_init_event>
   10d94:	.word	0x000346ac
   10d98:	.word	0x00034670
   10d9c:	.word	0xffffff38

00010da0 <rb_epoll_sched_event>:
   10da0:	ldr	r3, [pc, #536]	; 10fc0 <rb_epoll_sched_event+0x220>
   10da4:	push	{r4, r5, r6, r7, r8, lr}
   10da8:	add	r3, pc, r3
   10dac:	sub	sp, sp, #80	; 0x50
   10db0:	ldr	r4, [r3, #4]
   10db4:	mov	r5, r0
   10db8:	cmp	r4, #0
   10dbc:	mov	r8, r1
   10dc0:	bne	10e64 <rb_epoll_sched_event+0xc4>
   10dc4:	add	r7, sp, #16
   10dc8:	mov	r2, #64	; 0x40
   10dcc:	mov	r1, r4
   10dd0:	mov	r0, r7
   10dd4:	bl	4628 <memset@plt>
   10dd8:	mov	r1, #4
   10ddc:	mov	r0, #1
   10de0:	bl	45ec <calloc@plt>
   10de4:	subs	r6, r0, #0
   10de8:	beq	10f90 <rb_epoll_sched_event+0x1f0>
   10dec:	str	r6, [r5, #40]	; 0x28
   10df0:	bl	4484 <__libc_current_sigrtmin@plt>
   10df4:	mov	r1, r7
   10df8:	mov	r2, r6
   10dfc:	str	r5, [sp, #16]
   10e00:	str	r0, [sp, #20]
   10e04:	mov	r0, r4
   10e08:	bl	452c <timer_create@plt>
   10e0c:	cmp	r0, #0
   10e10:	blt	10f24 <rb_epoll_sched_event+0x184>
   10e14:	ldr	r3, [r5, #24]
   10e18:	str	r4, [sp]
   10e1c:	cmp	r3, #0
   10e20:	addne	r3, sp, #8
   10e24:	str	r4, [sp, #4]
   10e28:	str	r4, [sp, #12]
   10e2c:	str	r8, [sp, #8]
   10e30:	ldmne	r3, {r0, r1}
   10e34:	mov	r3, #0
   10e38:	mov	r2, sp
   10e3c:	stmne	sp, {r0, r1}
   10e40:	ldr	r0, [r6]
   10e44:	mov	r1, r3
   10e48:	bl	4754 <timer_settime@plt>
   10e4c:	cmp	r0, #0
   10e50:	movge	r4, #1
   10e54:	blt	10f4c <rb_epoll_sched_event+0x1ac>
   10e58:	mov	r0, r4
   10e5c:	add	sp, sp, #80	; 0x50
   10e60:	pop	{r4, r5, r6, r7, r8, pc}
   10e64:	mov	r1, #0
   10e68:	mov	r0, r1
   10e6c:	bl	4bc8 <timerfd_create@plt>
   10e70:	subs	r6, r0, #0
   10e74:	blt	10f6c <rb_epoll_sched_event+0x1cc>
   10e78:	ldr	r3, [r5, #24]
   10e7c:	add	r2, sp, #16
   10e80:	cmp	r3, #0
   10e84:	mov	r3, #0
   10e88:	str	r8, [sp, #24]
   10e8c:	str	r3, [r2, #4]
   10e90:	str	r3, [sp, #16]
   10e94:	str	r3, [r2, #12]
   10e98:	addne	r3, sp, #24
   10e9c:	ldmne	r3, {r0, r1}
   10ea0:	mov	r3, #0
   10ea4:	stmne	r2, {r0, r1}
   10ea8:	mov	r1, r3
   10eac:	mov	r0, r6
   10eb0:	bl	4c4c <timerfd_settime@plt>
   10eb4:	cmp	r0, #0
   10eb8:	blt	10f94 <rb_epoll_sched_event+0x1f4>
   10ebc:	ldr	r4, [pc, #256]	; 10fc4 <rb_epoll_sched_event+0x224>
   10ec0:	ldr	r2, [pc, #256]	; 10fc8 <rb_epoll_sched_event+0x228>
   10ec4:	add	r4, pc, r4
   10ec8:	add	r4, r4, #2192	; 0x890
   10ecc:	ldr	r3, [r5, #20]
   10ed0:	mov	r0, r4
   10ed4:	add	r2, pc, r2
   10ed8:	mov	r1, #136	; 0x88
   10edc:	bl	4bb0 <snprintf@plt>
   10ee0:	mov	r2, r4
   10ee4:	mov	r1, #64	; 0x40
   10ee8:	mov	r0, r6
   10eec:	bl	4a84 <rb_open@plt>
   10ef0:	mov	r4, r0
   10ef4:	bl	461c <rb_set_nb@plt>
   10ef8:	ldr	r2, [pc, #204]	; 10fcc <rb_epoll_sched_event+0x22c>
   10efc:	str	r4, [r5, #40]	; 0x28
   10f00:	mov	r0, r4
   10f04:	mov	r3, r5
   10f08:	add	r2, pc, r2
   10f0c:	mov	r1, #1
   10f10:	bl	44a8 <rb_setselect@plt>
   10f14:	mov	r4, #1
   10f18:	mov	r0, r4
   10f1c:	add	sp, sp, #80	; 0x50
   10f20:	pop	{r4, r5, r6, r7, r8, pc}
   10f24:	bl	4ce8 <__errno_location@plt>
   10f28:	ldr	r0, [r0]
   10f2c:	bl	43a0 <strerror@plt>
   10f30:	mov	r1, r0
   10f34:	ldr	r0, [pc, #148]	; 10fd0 <rb_epoll_sched_event+0x230>
   10f38:	add	r0, pc, r0
   10f3c:	bl	491c <rb_lib_log@plt>
   10f40:	mov	r0, r4
   10f44:	add	sp, sp, #80	; 0x50
   10f48:	pop	{r4, r5, r6, r7, r8, pc}
   10f4c:	bl	4ce8 <__errno_location@plt>
   10f50:	ldr	r0, [r0]
   10f54:	bl	43a0 <strerror@plt>
   10f58:	mov	r1, r0
   10f5c:	ldr	r0, [pc, #112]	; 10fd4 <rb_epoll_sched_event+0x234>
   10f60:	add	r0, pc, r0
   10f64:	bl	491c <rb_lib_log@plt>
   10f68:	b	10e58 <rb_epoll_sched_event+0xb8>
   10f6c:	bl	4ce8 <__errno_location@plt>
   10f70:	mov	r4, #0
   10f74:	ldr	r0, [r0]
   10f78:	bl	43a0 <strerror@plt>
   10f7c:	mov	r1, r0
   10f80:	ldr	r0, [pc, #80]	; 10fd8 <rb_epoll_sched_event+0x238>
   10f84:	add	r0, pc, r0
   10f88:	bl	491c <rb_lib_log@plt>
   10f8c:	b	10e58 <rb_epoll_sched_event+0xb8>
   10f90:	bl	4988 <rb_outofmemory@plt>
   10f94:	bl	4ce8 <__errno_location@plt>
   10f98:	mov	r4, #0
   10f9c:	ldr	r0, [r0]
   10fa0:	bl	43a0 <strerror@plt>
   10fa4:	mov	r1, r0
   10fa8:	ldr	r0, [pc, #44]	; 10fdc <rb_epoll_sched_event+0x23c>
   10fac:	add	r0, pc, r0
   10fb0:	bl	491c <rb_lib_log@plt>
   10fb4:	mov	r0, r6
   10fb8:	bl	4940 <close@plt>
   10fbc:	b	10e58 <rb_epoll_sched_event+0xb8>
   10fc0:	.word	0x000345c0
   10fc4:	.word	0x000344a4
   10fc8:	.word	0x00005cf4
   10fcc:	.word	0xfffff7ac
   10fd0:	.word	0x00005c9c
   10fd4:	.word	0x00005c88
   10fd8:	.word	0x00005c18
   10fdc:	.word	0x00005c04

00010fe0 <rb_epoll_unsched_event>:
   10fe0:	ldr	r3, [pc, #80]	; 11038 <rb_epoll_unsched_event+0x58>
   10fe4:	push	{r4, lr}
   10fe8:	add	r3, pc, r3
   10fec:	mov	r4, r0
   10ff0:	ldr	r3, [r3, #4]
   10ff4:	cmp	r3, #0
   10ff8:	bne	11024 <rb_epoll_unsched_event+0x44>
   10ffc:	ldr	r3, [r0, #40]	; 0x28
   11000:	ldr	r0, [r3]
   11004:	bl	4a78 <timer_delete@plt>
   11008:	ldr	r0, [r4, #40]	; 0x28
   1100c:	cmp	r0, #0
   11010:	beq	11018 <rb_epoll_unsched_event+0x38>
   11014:	bl	46f4 <free@plt>
   11018:	mov	r3, #0
   1101c:	str	r3, [r4, #40]	; 0x28
   11020:	pop	{r4, pc}
   11024:	ldr	r0, [r0, #40]	; 0x28
   11028:	bl	4868 <rb_close@plt>
   1102c:	mov	r3, #0
   11030:	str	r3, [r4, #40]	; 0x28
   11034:	pop	{r4, pc}
   11038:	.word	0x00034380

0001103c <rb_setup_fd_poll>:
   1103c:	mov	r0, #0
   11040:	bx	lr

00011044 <rb_init_netio_poll>:
   11044:	push	{r4, r5, r6, r7, r8, lr}
   11048:	bl	446c <rb_getmaxconnect@plt>
   1104c:	lsl	r1, r0, #3
   11050:	mov	r0, #1
   11054:	bl	45ec <calloc@plt>
   11058:	cmp	r0, #0
   1105c:	beq	110b8 <rb_init_netio_poll+0x74>
   11060:	ldr	r7, [pc, #84]	; 110bc <rb_init_netio_poll+0x78>
   11064:	ldr	r6, [pc, #84]	; 110c0 <rb_init_netio_poll+0x7c>
   11068:	add	r7, pc, r7
   1106c:	mov	r4, #0
   11070:	str	r0, [r7]
   11074:	bl	446c <rb_getmaxconnect@plt>
   11078:	add	r6, pc, r6
   1107c:	mvn	r5, #0
   11080:	str	r0, [r7, #8]
   11084:	b	11094 <rb_init_netio_poll+0x50>
   11088:	ldr	r3, [r6]
   1108c:	str	r5, [r3, r4, lsl #3]
   11090:	add	r4, r4, #1
   11094:	bl	446c <rb_getmaxconnect@plt>
   11098:	cmp	r4, r0
   1109c:	blt	11088 <rb_init_netio_poll+0x44>
   110a0:	ldr	r3, [pc, #28]	; 110c4 <rb_init_netio_poll+0x80>
   110a4:	mov	r2, #0
   110a8:	add	r3, pc, r3
   110ac:	mov	r0, r2
   110b0:	str	r2, [r3, #4]
   110b4:	pop	{r4, r5, r6, r7, r8, pc}
   110b8:	bl	4988 <rb_outofmemory@plt>
   110bc:	.word	0x00034c18
   110c0:	.word	0x00034c08
   110c4:	.word	0x00034bd8

000110c8 <rb_setselect_poll>:
   110c8:	push	{r4, r5, r6, r7, r8, lr}
   110cc:	subs	r5, r0, #0
   110d0:	popeq	{r4, r5, r6, r7, r8, pc}
   110d4:	tst	r1, #1
   110d8:	beq	1114c <rb_setselect_poll+0x84>
   110dc:	cmp	r2, #0
   110e0:	str	r2, [r5, #28]
   110e4:	str	r3, [r5, #32]
   110e8:	ldr	ip, [r5, #20]
   110ec:	beq	111e0 <rb_setselect_poll+0x118>
   110f0:	tst	r1, #2
   110f4:	orr	r1, ip, #64	; 0x40
   110f8:	str	r1, [r5, #20]
   110fc:	bne	111cc <rb_setselect_poll+0x104>
   11100:	ldr	r7, [pc, #376]	; 11280 <rb_setselect_poll+0x1b8>
   11104:	ldr	r3, [r5, #12]
   11108:	add	r7, pc, r7
   1110c:	ldr	r2, [r7, #8]
   11110:	cmp	r3, r2
   11114:	bge	11204 <rb_setselect_poll+0x13c>
   11118:	ldr	r2, [r7]
   1111c:	ldr	r1, [r5, #20]
   11120:	cmp	r1, #0
   11124:	ble	11174 <rb_setselect_poll+0xac>
   11128:	ldr	r0, [pc, #340]	; 11284 <rb_setselect_poll+0x1bc>
   1112c:	add	lr, r2, r3, lsl #3
   11130:	add	r0, pc, r0
   11134:	strh	r1, [lr, #4]
   11138:	ldr	ip, [r0, #4]
   1113c:	str	r3, [r2, r3, lsl #3]
   11140:	cmp	r3, ip
   11144:	strgt	r3, [r0, #4]
   11148:	pop	{r4, r5, r6, r7, r8, pc}
   1114c:	tst	r1, #2
   11150:	beq	11100 <rb_setselect_poll+0x38>
   11154:	cmp	r2, #0
   11158:	str	r2, [r5, #36]	; 0x24
   1115c:	str	r3, [r5, #40]	; 0x28
   11160:	ldr	r1, [r5, #20]
   11164:	beq	111f8 <rb_setselect_poll+0x130>
   11168:	orr	r1, r1, #256	; 0x100
   1116c:	str	r1, [r5, #20]
   11170:	b	11100 <rb_setselect_poll+0x38>
   11174:	ldr	r0, [pc, #268]	; 11288 <rb_setselect_poll+0x1c0>
   11178:	add	r1, r2, r3, lsl #3
   1117c:	add	r0, pc, r0
   11180:	mov	ip, #0
   11184:	ldr	lr, [r0, #4]
   11188:	mvn	r0, #0
   1118c:	cmp	r3, lr
   11190:	strh	ip, [r1, #4]
   11194:	str	r0, [r2, r3, lsl #3]
   11198:	popne	{r4, r5, r6, r7, r8, pc}
   1119c:	cmp	r3, ip
   111a0:	bge	111b4 <rb_setselect_poll+0xec>
   111a4:	pop	{r4, r5, r6, r7, r8, pc}
   111a8:	ldr	r1, [r2, r3, lsl #3]
   111ac:	cmn	r1, #1
   111b0:	bne	1126c <rb_setselect_poll+0x1a4>
   111b4:	subs	r3, r3, #1
   111b8:	bcs	111a8 <rb_setselect_poll+0xe0>
   111bc:	ldr	r2, [pc, #200]	; 1128c <rb_setselect_poll+0x1c4>
   111c0:	add	r2, pc, r2
   111c4:	str	r3, [r2, #4]
   111c8:	pop	{r4, r5, r6, r7, r8, pc}
   111cc:	orr	r1, r1, #256	; 0x100
   111d0:	str	r2, [r5, #36]	; 0x24
   111d4:	str	r3, [r5, #40]	; 0x28
   111d8:	str	r1, [r5, #20]
   111dc:	b	11100 <rb_setselect_poll+0x38>
   111e0:	tst	r1, #2
   111e4:	bic	r1, ip, #64	; 0x40
   111e8:	str	r1, [r5, #20]
   111ec:	beq	11100 <rb_setselect_poll+0x38>
   111f0:	str	r2, [r5, #36]	; 0x24
   111f4:	str	r3, [r5, #40]	; 0x28
   111f8:	bic	r1, r1, #256	; 0x100
   111fc:	str	r1, [r5, #20]
   11200:	b	11100 <rb_setselect_poll+0x38>
   11204:	add	r2, r2, #1024	; 0x400
   11208:	ldr	r0, [r7]
   1120c:	lsl	r4, r2, #3
   11210:	mov	r1, r4
   11214:	str	r2, [r7, #8]
   11218:	bl	4c40 <realloc@plt>
   1121c:	subs	r6, r0, #0
   11220:	beq	1127c <rb_setselect_poll+0x1b4>
   11224:	sub	r0, r4, #8128	; 0x1fc0
   11228:	sub	r0, r0, #56	; 0x38
   1122c:	mov	r2, #8192	; 0x2000
   11230:	mov	r1, #0
   11234:	add	r0, r6, r0
   11238:	str	r6, [r7]
   1123c:	bl	4628 <memset@plt>
   11240:	sub	r3, r4, #8192	; 0x2000
   11244:	sub	r2, r4, #8
   11248:	add	r3, r6, r3
   1124c:	add	r2, r6, r2
   11250:	mvn	r1, #0
   11254:	str	r1, [r3, #8]!
   11258:	cmp	r3, r2
   1125c:	bne	11254 <rb_setselect_poll+0x18c>
   11260:	ldr	r3, [r5, #12]
   11264:	mov	r2, r6
   11268:	b	1111c <rb_setselect_poll+0x54>
   1126c:	ldr	r2, [pc, #28]	; 11290 <rb_setselect_poll+0x1c8>
   11270:	add	r2, pc, r2
   11274:	str	r3, [r2, #4]
   11278:	pop	{r4, r5, r6, r7, r8, pc}
   1127c:	bl	4988 <rb_outofmemory@plt>
   11280:	.word	0x00034b78
   11284:	.word	0x00034b50
   11288:	.word	0x00034b04
   1128c:	.word	0x00034ac0
   11290:	.word	0x00034a10

00011294 <rb_select_poll>:
   11294:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11298:	mov	r2, r0
   1129c:	ldr	r6, [pc, #432]	; 11454 <rb_select_poll+0x1c0>
   112a0:	ldr	r8, [pc, #432]	; 11458 <rb_select_poll+0x1c4>
   112a4:	add	r6, pc, r6
   112a8:	add	r8, pc, r8
   112ac:	ldm	r6, {r0, r1}
   112b0:	add	r1, r1, #1
   112b4:	bl	4a00 <poll@plt>
   112b8:	mov	r4, r0
   112bc:	bl	4994 <rb_set_time@plt>
   112c0:	cmp	r4, #0
   112c4:	blt	11414 <rb_select_poll+0x180>
   112c8:	beq	11360 <rb_select_poll+0xcc>
   112cc:	ldr	r3, [r6, #4]
   112d0:	cmp	r3, #0
   112d4:	blt	11360 <rb_select_poll+0xcc>
   112d8:	mov	r5, #0
   112dc:	ldr	sl, [pc, #376]	; 1145c <rb_select_poll+0x1c8>
   112e0:	mov	r7, r6
   112e4:	mov	r9, r5
   112e8:	ldr	r3, [r6]
   112ec:	add	r2, r3, r5, lsl #3
   112f0:	ldr	r1, [r3, r5, lsl #3]
   112f4:	ldrsh	fp, [r2, #6]
   112f8:	clz	r3, fp
   112fc:	lsr	r3, r3, #5
   11300:	orrs	r3, r3, r1, lsr #31
   11304:	bne	11350 <rb_select_poll+0xbc>
   11308:	ldr	r2, [pc, #336]	; 11460 <rb_select_poll+0x1cc>
   1130c:	asr	r3, r1, #24
   11310:	eor	r3, r3, r1, asr #12
   11314:	ldr	r2, [r8, r2]
   11318:	eor	r3, r3, r1
   1131c:	and	r3, r3, sl
   11320:	ldr	r2, [r2]
   11324:	add	r3, r3, r3, lsl #1
   11328:	ldr	r3, [r2, r3, lsl #2]
   1132c:	cmp	r3, #0
   11330:	beq	11350 <rb_select_poll+0xbc>
   11334:	ldr	r4, [r3]
   11338:	ldr	r2, [r4, #12]
   1133c:	cmp	r1, r2
   11340:	beq	11368 <rb_select_poll+0xd4>
   11344:	ldr	r3, [r3, #8]
   11348:	cmp	r3, #0
   1134c:	bne	11334 <rb_select_poll+0xa0>
   11350:	ldr	r3, [r7, #4]
   11354:	add	r5, r5, #1
   11358:	cmp	r3, r5
   1135c:	bge	112e8 <rb_select_poll+0x54>
   11360:	mov	r0, #0
   11364:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11368:	tst	fp, #89	; 0x59
   1136c:	beq	11390 <rb_select_poll+0xfc>
   11370:	ldr	r3, [r4, #28]
   11374:	ldr	r1, [r4, #32]
   11378:	cmp	r3, #0
   1137c:	str	r9, [r4, #28]
   11380:	str	r9, [r4, #32]
   11384:	beq	113f0 <rb_select_poll+0x15c>
   11388:	mov	r0, r4
   1138c:	blx	r3
   11390:	ldrb	r3, [r4, #16]
   11394:	tst	r3, #1
   11398:	beq	113c4 <rb_select_poll+0x130>
   1139c:	tst	fp, #284	; 0x11c
   113a0:	beq	113c4 <rb_select_poll+0x130>
   113a4:	ldr	r3, [r4, #36]	; 0x24
   113a8:	ldr	r1, [r4, #40]	; 0x28
   113ac:	cmp	r3, #0
   113b0:	str	r9, [r4, #36]	; 0x24
   113b4:	str	r9, [r4, #40]	; 0x28
   113b8:	beq	11430 <rb_select_poll+0x19c>
   113bc:	mov	r0, r4
   113c0:	blx	r3
   113c4:	ldr	r3, [r4, #28]
   113c8:	cmp	r3, #0
   113cc:	beq	113fc <rb_select_poll+0x168>
   113d0:	ldr	r3, [r4, #36]	; 0x24
   113d4:	cmp	r3, #0
   113d8:	beq	1143c <rb_select_poll+0x1a8>
   113dc:	ldr	r3, [r7, #4]
   113e0:	add	r5, r5, #1
   113e4:	cmp	r3, r5
   113e8:	bge	112e8 <rb_select_poll+0x54>
   113ec:	b	11360 <rb_select_poll+0xcc>
   113f0:	ldrb	r3, [r4, #16]
   113f4:	tst	r3, #1
   113f8:	bne	1139c <rb_select_poll+0x108>
   113fc:	mov	r3, r9
   11400:	mov	r2, #0
   11404:	mov	r1, #1
   11408:	mov	r0, r4
   1140c:	bl	110c8 <rb_setselect_poll>
   11410:	b	113d0 <rb_select_poll+0x13c>
   11414:	bl	4ce8 <__errno_location@plt>
   11418:	ldr	r0, [r0]
   1141c:	bl	43dc <rb_ignore_errno@plt>
   11420:	cmp	r0, #0
   11424:	beq	11360 <rb_select_poll+0xcc>
   11428:	mov	r0, #5
   1142c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11430:	ldr	r3, [r4, #28]
   11434:	cmp	r3, #0
   11438:	beq	113fc <rb_select_poll+0x168>
   1143c:	mov	r0, r4
   11440:	mov	r3, r9
   11444:	mov	r2, #0
   11448:	mov	r1, #2
   1144c:	bl	110c8 <rb_setselect_poll>
   11450:	b	11350 <rb_select_poll+0xbc>
   11454:	.word	0x000349dc
   11458:	.word	0x00016d50
   1145c:	.word	0x00000fff
   11460:	.word	0x000003c0

00011464 <rb_ports_supports_event>:
   11464:	push	{r4, lr}
   11468:	bl	4ce8 <__errno_location@plt>
   1146c:	mov	r3, #38	; 0x26
   11470:	str	r3, [r0]
   11474:	mov	r0, #0
   11478:	pop	{r4, pc}

0001147c <rb_ports_init_event>:
   1147c:	bx	lr

00011480 <rb_ports_sched_event>:
   11480:	push	{r4, lr}
   11484:	bl	4ce8 <__errno_location@plt>
   11488:	mov	r3, #38	; 0x26
   1148c:	str	r3, [r0]
   11490:	mvn	r0, #0
   11494:	pop	{r4, pc}

00011498 <rb_ports_unsched_event>:
   11498:	bx	lr

0001149c <rb_init_netio_ports>:
   1149c:	mov	r0, #38	; 0x26
   114a0:	bx	lr

000114a4 <rb_setselect_ports>:
   114a4:	push	{r4, lr}
   114a8:	bl	4ce8 <__errno_location@plt>
   114ac:	mov	r3, #38	; 0x26
   114b0:	str	r3, [r0]
   114b4:	pop	{r4, pc}

000114b8 <rb_select_ports>:
   114b8:	push	{r4, lr}
   114bc:	bl	4ce8 <__errno_location@plt>
   114c0:	mov	r3, #38	; 0x26
   114c4:	str	r3, [r0]
   114c8:	mvn	r0, #0
   114cc:	pop	{r4, pc}

000114d0 <rb_setup_fd_ports>:
   114d0:	push	{r4, lr}
   114d4:	bl	4ce8 <__errno_location@plt>
   114d8:	mov	r3, #38	; 0x26
   114dc:	str	r3, [r0]
   114e0:	mvn	r0, #0
   114e4:	pop	{r4, pc}

000114e8 <rb_init_netio_sigio>:
   114e8:	push	{r4, r5, r6, lr}
   114ec:	bl	446c <rb_getmaxconnect@plt>
   114f0:	ldr	r5, [pc, #180]	; 115ac <rb_init_netio_sigio+0xc4>
   114f4:	add	r5, pc, r5
   114f8:	lsl	r1, r0, #3
   114fc:	mov	r0, #1
   11500:	bl	45ec <calloc@plt>
   11504:	cmp	r0, #0
   11508:	beq	115a8 <rb_init_netio_sigio+0xc0>
   1150c:	ldr	r3, [pc, #156]	; 115b0 <rb_init_netio_sigio+0xc8>
   11510:	mov	r4, #0
   11514:	mvn	r6, #0
   11518:	ldr	r5, [r5, r3]
   1151c:	str	r0, [r5]
   11520:	bl	446c <rb_getmaxconnect@plt>
   11524:	str	r0, [r5, #8]
   11528:	b	11538 <rb_init_netio_sigio+0x50>
   1152c:	ldr	r3, [r5]
   11530:	str	r6, [r3, r4, lsl #3]
   11534:	add	r4, r4, #1
   11538:	bl	446c <rb_getmaxconnect@plt>
   1153c:	cmp	r4, r0
   11540:	blt	1152c <rb_init_netio_sigio+0x44>
   11544:	ldr	r4, [pc, #104]	; 115b4 <rb_init_netio_sigio+0xcc>
   11548:	mov	r3, #1
   1154c:	add	r4, pc, r4
   11550:	mov	r6, #0
   11554:	str	r3, [r4], #4
   11558:	mov	r0, r4
   1155c:	str	r6, [r5, #4]
   11560:	bl	4394 <sigemptyset@plt>
   11564:	bl	4484 <__libc_current_sigrtmin@plt>
   11568:	mov	r1, r0
   1156c:	mov	r0, r4
   11570:	bl	4880 <sigaddset@plt>
   11574:	mov	r1, #29
   11578:	mov	r0, r4
   1157c:	bl	4880 <sigaddset@plt>
   11580:	bl	4484 <__libc_current_sigrtmin@plt>
   11584:	add	r1, r0, #1
   11588:	mov	r0, r4
   1158c:	bl	4880 <sigaddset@plt>
   11590:	mov	r2, r6
   11594:	mov	r1, r4
   11598:	mov	r0, r6
   1159c:	bl	49b8 <sigprocmask@plt>
   115a0:	mov	r0, r6
   115a4:	pop	{r4, r5, r6, pc}
   115a8:	bl	4988 <rb_outofmemory@plt>
   115ac:	.word	0x00016b04
   115b0:	.word	0x000003d0
   115b4:	.word	0x00034740

000115b8 <rb_setup_fd_sigio>:
   115b8:	push	{r4, r5, r6, lr}
   115bc:	mov	r2, #0
   115c0:	ldr	r5, [r0, #12]
   115c4:	mov	r1, #3
   115c8:	mov	r0, r5
   115cc:	bl	4c04 <fcntl@plt>
   115d0:	cmn	r0, #1
   115d4:	beq	11638 <rb_setup_fd_sigio+0x80>
   115d8:	tst	r0, #8192	; 0x2000
   115dc:	mov	r4, r0
   115e0:	bne	11640 <rb_setup_fd_sigio+0x88>
   115e4:	orr	r2, r4, #10240	; 0x2800
   115e8:	mov	r1, #4
   115ec:	mov	r0, r5
   115f0:	bl	4c04 <fcntl@plt>
   115f4:	cmn	r0, #1
   115f8:	beq	11638 <rb_setup_fd_sigio+0x80>
   115fc:	bl	4484 <__libc_current_sigrtmin@plt>
   11600:	mov	r1, #10
   11604:	mov	r2, r0
   11608:	mov	r0, r5
   1160c:	bl	4c04 <fcntl@plt>
   11610:	cmn	r0, #1
   11614:	beq	11638 <rb_setup_fd_sigio+0x80>
   11618:	bl	4acc <getpid@plt>
   1161c:	mov	r1, #8
   11620:	mov	r2, r0
   11624:	mov	r0, r5
   11628:	bl	4c04 <fcntl@plt>
   1162c:	adds	r0, r0, #1
   11630:	movne	r0, #1
   11634:	pop	{r4, r5, r6, pc}
   11638:	mov	r0, #0
   1163c:	pop	{r4, r5, r6, pc}
   11640:	bic	r4, r0, #8192	; 0x2000
   11644:	mov	r2, r4
   11648:	mov	r1, #4
   1164c:	mov	r0, r5
   11650:	bl	4c04 <fcntl@plt>
   11654:	b	115e4 <rb_setup_fd_sigio+0x2c>

00011658 <rb_setselect_sigio>:
   11658:	push	{r4, r5, r6, r7, r8, lr}
   1165c:	subs	r4, r0, #0
   11660:	ldr	ip, [pc, #420]	; 1180c <rb_setselect_sigio+0x1b4>
   11664:	add	ip, pc, ip
   11668:	popeq	{r4, r5, r6, r7, r8, pc}
   1166c:	tst	r1, #1
   11670:	beq	116e0 <rb_setselect_sigio+0x88>
   11674:	cmp	r2, #0
   11678:	str	r2, [r4, #28]
   1167c:	str	r3, [r4, #32]
   11680:	ldr	lr, [r4, #20]
   11684:	beq	11760 <rb_setselect_sigio+0x108>
   11688:	tst	r1, #2
   1168c:	orr	r1, lr, #64	; 0x40
   11690:	str	r1, [r4, #20]
   11694:	bne	1174c <rb_setselect_sigio+0xf4>
   11698:	ldr	r2, [pc, #368]	; 11810 <rb_setselect_sigio+0x1b8>
   1169c:	ldr	r3, [r4, #12]
   116a0:	ldr	r5, [ip, r2]
   116a4:	ldr	r7, [r5, #8]
   116a8:	cmp	r3, r7
   116ac:	bge	11784 <rb_setselect_sigio+0x12c>
   116b0:	ldr	r2, [r5]
   116b4:	ldr	r1, [r4, #20]
   116b8:	cmp	r1, #0
   116bc:	ble	11708 <rb_setselect_sigio+0xb0>
   116c0:	ldr	ip, [r5, #4]
   116c4:	add	r0, r2, r3, lsl #3
   116c8:	cmp	ip, r3
   116cc:	strh	r1, [r0, #4]
   116d0:	str	r3, [r2, r3, lsl #3]
   116d4:	popge	{r4, r5, r6, r7, r8, pc}
   116d8:	str	r3, [r5, #4]
   116dc:	pop	{r4, r5, r6, r7, r8, pc}
   116e0:	tst	r1, #2
   116e4:	beq	11698 <rb_setselect_sigio+0x40>
   116e8:	cmp	r2, #0
   116ec:	str	r2, [r4, #36]	; 0x24
   116f0:	str	r3, [r4, #40]	; 0x28
   116f4:	ldr	r1, [r4, #20]
   116f8:	beq	11778 <rb_setselect_sigio+0x120>
   116fc:	orr	r1, r1, #256	; 0x100
   11700:	str	r1, [r4, #20]
   11704:	b	11698 <rb_setselect_sigio+0x40>
   11708:	ldr	r0, [r5, #4]
   1170c:	add	r1, r2, r3, lsl #3
   11710:	cmp	r0, r3
   11714:	mov	ip, #0
   11718:	mvn	r0, #0
   1171c:	strh	ip, [r1, #4]
   11720:	str	r0, [r2, r3, lsl #3]
   11724:	popne	{r4, r5, r6, r7, r8, pc}
   11728:	cmp	r3, ip
   1172c:	bge	11740 <rb_setselect_sigio+0xe8>
   11730:	pop	{r4, r5, r6, r7, r8, pc}
   11734:	ldr	r1, [r2, r3, lsl #3]
   11738:	cmn	r1, #1
   1173c:	bne	116d8 <rb_setselect_sigio+0x80>
   11740:	subs	r3, r3, #1
   11744:	bcc	116d8 <rb_setselect_sigio+0x80>
   11748:	b	11734 <rb_setselect_sigio+0xdc>
   1174c:	orr	r1, r1, #256	; 0x100
   11750:	str	r2, [r4, #36]	; 0x24
   11754:	str	r3, [r4, #40]	; 0x28
   11758:	str	r1, [r4, #20]
   1175c:	b	11698 <rb_setselect_sigio+0x40>
   11760:	tst	r1, #2
   11764:	bic	r1, lr, #64	; 0x40
   11768:	str	r1, [r4, #20]
   1176c:	beq	11698 <rb_setselect_sigio+0x40>
   11770:	str	r2, [r4, #36]	; 0x24
   11774:	str	r3, [r4, #40]	; 0x28
   11778:	bic	r1, r1, #256	; 0x100
   1177c:	str	r1, [r4, #20]
   11780:	b	11698 <rb_setselect_sigio+0x40>
   11784:	add	r3, r7, #1024	; 0x400
   11788:	ldr	r0, [r5]
   1178c:	lsl	r6, r3, #3
   11790:	mov	r1, r6
   11794:	str	r3, [r5, #8]
   11798:	bl	4c40 <realloc@plt>
   1179c:	subs	r3, r0, #0
   117a0:	beq	117fc <rb_setselect_sigio+0x1a4>
   117a4:	sub	r0, r6, #8128	; 0x1fc0
   117a8:	sub	r0, r0, #56	; 0x38
   117ac:	mov	r1, #0
   117b0:	add	r0, r3, r0
   117b4:	mov	r2, #8192	; 0x2000
   117b8:	str	r3, [r5]
   117bc:	bl	4628 <memset@plt>
   117c0:	ldr	r1, [r5, #8]
   117c4:	add	r7, r7, #1
   117c8:	cmp	r7, r1
   117cc:	bge	11800 <rb_setselect_sigio+0x1a8>
   117d0:	ldr	r2, [r5]
   117d4:	sub	r1, r1, #-536870911	; 0xe0000001
   117d8:	sub	r3, r6, #8192	; 0x2000
   117dc:	add	r3, r2, r3
   117e0:	add	r1, r2, r1, lsl #3
   117e4:	mvn	r0, #0
   117e8:	str	r0, [r3, #8]!
   117ec:	cmp	r1, r3
   117f0:	bne	117e8 <rb_setselect_sigio+0x190>
   117f4:	ldr	r3, [r4, #12]
   117f8:	b	116b4 <rb_setselect_sigio+0x5c>
   117fc:	bl	4988 <rb_outofmemory@plt>
   11800:	ldr	r2, [r5]
   11804:	ldr	r3, [r4, #12]
   11808:	b	116b4 <rb_setselect_sigio+0x5c>
   1180c:	.word	0x00016994
   11810:	.word	0x000003d0

00011814 <rb_sigio_supports_event>:
   11814:	push	{r4, r5, lr}
   11818:	sub	sp, sp, #76	; 0x4c
   1181c:	ldr	r5, [pc, #108]	; 11890 <rb_sigio_supports_event+0x7c>
   11820:	add	r5, pc, r5
   11824:	ldr	r0, [r5, #132]	; 0x84
   11828:	cmp	r0, #1
   1182c:	beq	11870 <rb_sigio_supports_event+0x5c>
   11830:	cmn	r0, #1
   11834:	moveq	r0, #0
   11838:	beq	11870 <rb_sigio_supports_event+0x5c>
   1183c:	mov	r4, #0
   11840:	mov	r3, #26
   11844:	mov	r0, r4
   11848:	add	r2, sp, #4
   1184c:	add	r1, sp, #8
   11850:	str	r4, [sp, #16]
   11854:	str	r3, [sp, #12]
   11858:	bl	452c <timer_create@plt>
   1185c:	cmp	r0, r4
   11860:	beq	11878 <rb_sigio_supports_event+0x64>
   11864:	mov	r0, r4
   11868:	mvn	r3, #0
   1186c:	str	r3, [r5, #132]	; 0x84
   11870:	add	sp, sp, #76	; 0x4c
   11874:	pop	{r4, r5, pc}
   11878:	ldr	r0, [sp, #4]
   1187c:	bl	4a78 <timer_delete@plt>
   11880:	mov	r0, #1
   11884:	str	r0, [r5, #132]	; 0x84
   11888:	add	sp, sp, #76	; 0x4c
   1188c:	pop	{r4, r5, pc}
   11890:	.word	0x0003446c

00011894 <rb_select_sigio>:
   11894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11898:	sub	sp, sp, #148	; 0x94
   1189c:	mov	fp, r0
   118a0:	bl	11814 <rb_sigio_supports_event>
   118a4:	ldr	r6, [pc, #1008]	; 11c9c <rb_select_sigio+0x408>
   118a8:	add	r6, pc, r6
   118ac:	adds	r3, r0, #0
   118b0:	movne	r3, #1
   118b4:	cmp	fp, #0
   118b8:	orrge	r3, r3, #1
   118bc:	cmp	r3, #0
   118c0:	beq	118f0 <rb_select_sigio+0x5c>
   118c4:	ldr	r0, [pc, #980]	; 11ca0 <rb_select_sigio+0x40c>
   118c8:	asr	r3, fp, #31
   118cc:	mov	r2, #1000	; 0x3e8
   118d0:	smull	r1, r0, r0, fp
   118d4:	ldr	r1, [pc, #968]	; 11ca4 <rb_select_sigio+0x410>
   118d8:	rsb	r3, r3, r0, asr #6
   118dc:	str	r3, [sp, #8]
   118e0:	mul	r3, r2, r3
   118e4:	sub	r3, fp, r3
   118e8:	mul	r3, r1, r3
   118ec:	str	r3, [sp, #12]
   118f0:	ldr	r5, [pc, #944]	; 11ca8 <rb_select_sigio+0x414>
   118f4:	ldr	sl, [pc, #944]	; 11cac <rb_select_sigio+0x418>
   118f8:	add	r5, pc, r5
   118fc:	ldr	r9, [pc, #940]	; 11cb0 <rb_select_sigio+0x41c>
   11900:	add	sl, pc, sl
   11904:	add	r8, r5, #4
   11908:	lsr	r7, fp, #31
   1190c:	add	r3, sp, #8
   11910:	str	r3, [sp]
   11914:	ldr	r3, [r5]
   11918:	cmp	r3, #0
   1191c:	bne	11994 <rb_select_sigio+0x100>
   11920:	ldr	r3, [r5, #132]	; 0x84
   11924:	cmp	r3, #0
   11928:	moveq	r3, r7
   1192c:	orrne	r3, r7, #1
   11930:	cmp	r3, #0
   11934:	bne	11b68 <rb_select_sigio+0x2d4>
   11938:	ldr	r2, [sp]
   1193c:	add	r1, sp, #16
   11940:	mov	r0, r8
   11944:	bl	44c0 <sigtimedwait@plt>
   11948:	mov	r4, r0
   1194c:	cmp	r4, #0
   11950:	ble	11b80 <rb_select_sigio+0x2ec>
   11954:	cmp	r4, #29
   11958:	beq	11c28 <rb_select_sigio+0x394>
   1195c:	bl	4484 <__libc_current_sigrtmin@plt>
   11960:	add	r0, r0, #1
   11964:	cmp	r4, r0
   11968:	bne	11a88 <rb_select_sigio+0x1f4>
   1196c:	ldr	r3, [sl, #132]	; 0x84
   11970:	cmp	r3, #0
   11974:	beq	11a88 <rb_select_sigio+0x1f4>
   11978:	ldr	r0, [sp, #36]	; 0x24
   1197c:	cmp	r0, #0
   11980:	beq	11914 <rb_select_sigio+0x80>
   11984:	bl	48a4 <rb_run_one_event@plt>
   11988:	ldr	r3, [r5]
   1198c:	cmp	r3, #0
   11990:	beq	11920 <rb_select_sigio+0x8c>
   11994:	bl	4484 <__libc_current_sigrtmin@plt>
   11998:	mov	r1, #1
   1199c:	bl	44d8 <signal@plt>
   119a0:	bl	4484 <__libc_current_sigrtmin@plt>
   119a4:	mov	r1, #0
   119a8:	bl	44d8 <signal@plt>
   119ac:	ldr	r2, [pc, #768]	; 11cb4 <rb_select_sigio+0x420>
   119b0:	ldr	r3, [pc, #768]	; 11cb8 <rb_select_sigio+0x424>
   119b4:	add	r2, pc, r2
   119b8:	mov	r5, #0
   119bc:	str	r5, [r2]
   119c0:	ldr	r7, [r6, r3]
   119c4:	mov	r2, fp
   119c8:	ldm	r7, {r0, r1}
   119cc:	add	r1, r1, #1
   119d0:	bl	4a00 <poll@plt>
   119d4:	mov	r4, r0
   119d8:	bl	4994 <rb_set_time@plt>
   119dc:	cmp	r4, r5
   119e0:	blt	11c5c <rb_select_sigio+0x3c8>
   119e4:	beq	11a78 <rb_select_sigio+0x1e4>
   119e8:	ldr	r3, [r7, #4]
   119ec:	cmp	r3, #0
   119f0:	blt	11a78 <rb_select_sigio+0x1e4>
   119f4:	ldr	r9, [pc, #692]	; 11cb0 <rb_select_sigio+0x41c>
   119f8:	mov	r8, r5
   119fc:	mov	fp, #2
   11a00:	ldr	r3, [r7]
   11a04:	add	r2, r3, r5, lsl #3
   11a08:	ldrsh	sl, [r2, #6]
   11a0c:	cmp	sl, #0
   11a10:	beq	11a68 <rb_select_sigio+0x1d4>
   11a14:	ldr	r1, [r3, r5, lsl #3]
   11a18:	cmp	r1, #0
   11a1c:	blt	11a68 <rb_select_sigio+0x1d4>
   11a20:	ldr	r2, [pc, #660]	; 11cbc <rb_select_sigio+0x428>
   11a24:	asr	r3, r1, #24
   11a28:	eor	r3, r3, r1, asr #12
   11a2c:	ldr	r2, [r6, r2]
   11a30:	eor	r3, r3, r1
   11a34:	and	r3, r3, r9
   11a38:	ldr	r2, [r2]
   11a3c:	add	r3, r3, r3, lsl #1
   11a40:	ldr	r3, [r2, r3, lsl #2]
   11a44:	cmp	r3, #0
   11a48:	beq	11a68 <rb_select_sigio+0x1d4>
   11a4c:	ldr	r4, [r3]
   11a50:	ldr	r2, [r4, #12]
   11a54:	cmp	r1, r2
   11a58:	beq	11ba0 <rb_select_sigio+0x30c>
   11a5c:	ldr	r3, [r3, #8]
   11a60:	cmp	r3, #0
   11a64:	bne	11a4c <rb_select_sigio+0x1b8>
   11a68:	ldr	r3, [r7, #4]
   11a6c:	add	r5, r5, #1
   11a70:	cmp	r3, r5
   11a74:	bge	11a00 <rb_select_sigio+0x16c>
   11a78:	mov	r4, #0
   11a7c:	mov	r0, r4
   11a80:	add	sp, sp, #148	; 0x94
   11a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a88:	ldr	r3, [pc, #552]	; 11cb8 <rb_select_sigio+0x424>
   11a8c:	ldr	r0, [sp, #32]
   11a90:	ldr	r1, [sp, #28]
   11a94:	ldr	r3, [r6, r3]
   11a98:	cmp	r0, #0
   11a9c:	ldr	r3, [r3]
   11aa0:	add	r3, r3, r0, lsl #3
   11aa4:	ldrh	r2, [r3, #6]
   11aa8:	orr	r2, r2, r1
   11aac:	sxth	r2, r2
   11ab0:	strh	r2, [r3, #6]
   11ab4:	blt	11914 <rb_select_sigio+0x80>
   11ab8:	ldr	r1, [pc, #508]	; 11cbc <rb_select_sigio+0x428>
   11abc:	asr	r3, r0, #24
   11ac0:	eor	r3, r3, r0, asr #12
   11ac4:	ldr	r1, [r6, r1]
   11ac8:	eor	r3, r3, r0
   11acc:	and	r3, r3, r9
   11ad0:	ldr	r1, [r1]
   11ad4:	add	r3, r3, r3, lsl #1
   11ad8:	ldr	r3, [r1, r3, lsl #2]
   11adc:	cmp	r3, #0
   11ae0:	bne	11af4 <rb_select_sigio+0x260>
   11ae4:	b	11914 <rb_select_sigio+0x80>
   11ae8:	ldr	r3, [r3, #8]
   11aec:	cmp	r3, #0
   11af0:	beq	11914 <rb_select_sigio+0x80>
   11af4:	ldr	r4, [r3]
   11af8:	ldr	r1, [r4, #12]
   11afc:	cmp	r0, r1
   11b00:	bne	11ae8 <rb_select_sigio+0x254>
   11b04:	tst	r2, #89	; 0x59
   11b08:	beq	11b38 <rb_select_sigio+0x2a4>
   11b0c:	ldr	r3, [r4, #28]
   11b10:	mov	r0, #0
   11b14:	cmp	r3, r0
   11b18:	ldr	r1, [r4, #32]
   11b1c:	str	r0, [r4, #28]
   11b20:	str	r0, [r4, #32]
   11b24:	beq	11b38 <rb_select_sigio+0x2a4>
   11b28:	mov	r0, r4
   11b2c:	str	r2, [sp, #4]
   11b30:	blx	r3
   11b34:	ldr	r2, [sp, #4]
   11b38:	tst	r2, #284	; 0x11c
   11b3c:	beq	11914 <rb_select_sigio+0x80>
   11b40:	ldr	r2, [r4, #36]	; 0x24
   11b44:	mov	r3, #0
   11b48:	cmp	r2, r3
   11b4c:	ldr	r1, [r4, #40]	; 0x28
   11b50:	str	r3, [r4, #36]	; 0x24
   11b54:	str	r3, [r4, #40]	; 0x28
   11b58:	beq	11914 <rb_select_sigio+0x80>
   11b5c:	mov	r0, r4
   11b60:	blx	r2
   11b64:	b	11914 <rb_select_sigio+0x80>
   11b68:	add	r1, sp, #16
   11b6c:	mov	r0, r8
   11b70:	bl	4478 <sigwaitinfo@plt>
   11b74:	mov	r4, r0
   11b78:	cmp	r4, #0
   11b7c:	bgt	11954 <rb_select_sigio+0xc0>
   11b80:	ldr	r3, [pc, #312]	; 11cc0 <rb_select_sigio+0x42c>
   11b84:	ldr	r4, [pc, r3]
   11b88:	cmp	r4, #0
   11b8c:	bne	11994 <rb_select_sigio+0x100>
   11b90:	bl	4994 <rb_set_time@plt>
   11b94:	mov	r0, r4
   11b98:	add	sp, sp, #148	; 0x94
   11b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba0:	tst	sl, #89	; 0x59
   11ba4:	beq	11bc8 <rb_select_sigio+0x334>
   11ba8:	ldr	r3, [r4, #28]
   11bac:	ldr	r1, [r4, #32]
   11bb0:	cmp	r3, #0
   11bb4:	str	r8, [r4, #28]
   11bb8:	str	r8, [r4, #32]
   11bbc:	beq	11c38 <rb_select_sigio+0x3a4>
   11bc0:	mov	r0, r4
   11bc4:	blx	r3
   11bc8:	ldrb	r3, [r4, #16]
   11bcc:	tst	r3, #1
   11bd0:	beq	11bfc <rb_select_sigio+0x368>
   11bd4:	tst	sl, #284	; 0x11c
   11bd8:	beq	11bfc <rb_select_sigio+0x368>
   11bdc:	ldr	r3, [r4, #36]	; 0x24
   11be0:	ldr	r1, [r4, #40]	; 0x28
   11be4:	cmp	r3, #0
   11be8:	str	r8, [r4, #36]	; 0x24
   11bec:	str	r8, [r4, #40]	; 0x28
   11bf0:	beq	11c78 <rb_select_sigio+0x3e4>
   11bf4:	mov	r0, r4
   11bf8:	blx	r3
   11bfc:	ldr	r3, [r4, #28]
   11c00:	cmp	r3, #0
   11c04:	beq	11c44 <rb_select_sigio+0x3b0>
   11c08:	ldr	r3, [r4, #36]	; 0x24
   11c0c:	cmp	r3, #0
   11c10:	beq	11c84 <rb_select_sigio+0x3f0>
   11c14:	ldr	r3, [r7, #4]
   11c18:	add	r5, r5, #1
   11c1c:	cmp	r3, r5
   11c20:	bge	11a00 <rb_select_sigio+0x16c>
   11c24:	b	11a78 <rb_select_sigio+0x1e4>
   11c28:	ldr	r0, [pc, #148]	; 11cc4 <rb_select_sigio+0x430>
   11c2c:	add	r0, pc, r0
   11c30:	bl	491c <rb_lib_log@plt>
   11c34:	b	11994 <rb_select_sigio+0x100>
   11c38:	ldrb	r3, [r4, #16]
   11c3c:	tst	r3, #1
   11c40:	bne	11bd4 <rb_select_sigio+0x340>
   11c44:	mov	r3, r8
   11c48:	mov	r2, #0
   11c4c:	mov	r1, #1
   11c50:	mov	r0, r4
   11c54:	bl	11658 <rb_setselect_sigio>
   11c58:	b	11c08 <rb_select_sigio+0x374>
   11c5c:	bl	4ce8 <__errno_location@plt>
   11c60:	ldr	r0, [r0]
   11c64:	bl	43dc <rb_ignore_errno@plt>
   11c68:	cmp	r0, #0
   11c6c:	movne	r4, #5
   11c70:	bne	11a7c <rb_select_sigio+0x1e8>
   11c74:	b	11a78 <rb_select_sigio+0x1e4>
   11c78:	ldr	r3, [r4, #28]
   11c7c:	cmp	r3, #0
   11c80:	beq	11c44 <rb_select_sigio+0x3b0>
   11c84:	mov	r0, r4
   11c88:	mov	r3, r8
   11c8c:	mov	r2, #0
   11c90:	mov	r1, fp
   11c94:	bl	11658 <rb_setselect_sigio>
   11c98:	b	11a68 <rb_select_sigio+0x1d4>
   11c9c:	.word	0x00016750
   11ca0:	.word	0x10624dd3
   11ca4:	.word	0x000f4240
   11ca8:	.word	0x00034394
   11cac:	.word	0x0003438c
   11cb0:	.word	0x00000fff
   11cb4:	.word	0x000342d8
   11cb8:	.word	0x000003d0
   11cbc:	.word	0x000003c0
   11cc0:	.word	0x00034108
   11cc4:	.word	0x00004fd0

00011cc8 <rb_sigio_init_event>:
   11cc8:	b	11814 <rb_sigio_supports_event>

00011ccc <rb_sigio_sched_event>:
   11ccc:	ldr	r3, [pc, #280]	; 11dec <rb_sigio_sched_event+0x120>
   11cd0:	add	r3, pc, r3
   11cd4:	ldr	r3, [r3, #132]	; 0x84
   11cd8:	cmp	r3, #0
   11cdc:	ble	11d94 <rb_sigio_sched_event+0xc8>
   11ce0:	push	{r4, r5, r6, r7, lr}
   11ce4:	sub	sp, sp, #84	; 0x54
   11ce8:	add	r6, sp, #16
   11cec:	mov	r2, #64	; 0x40
   11cf0:	mov	r7, r1
   11cf4:	mov	r4, r0
   11cf8:	mov	r1, #0
   11cfc:	mov	r0, r6
   11d00:	bl	4628 <memset@plt>
   11d04:	mov	r1, #4
   11d08:	mov	r0, #1
   11d0c:	bl	45ec <calloc@plt>
   11d10:	subs	r5, r0, #0
   11d14:	beq	11de8 <rb_sigio_sched_event+0x11c>
   11d18:	str	r5, [r4, #40]	; 0x28
   11d1c:	bl	4484 <__libc_current_sigrtmin@plt>
   11d20:	mov	r1, r6
   11d24:	mov	r2, r5
   11d28:	str	r4, [sp, #16]
   11d2c:	add	r3, r0, #1
   11d30:	mov	r0, #0
   11d34:	str	r3, [sp, #20]
   11d38:	bl	452c <timer_create@plt>
   11d3c:	cmp	r0, #0
   11d40:	blt	11d9c <rb_sigio_sched_event+0xd0>
   11d44:	ldr	r3, [r4, #24]
   11d48:	str	r7, [sp, #8]
   11d4c:	cmp	r3, #0
   11d50:	mov	r3, #0
   11d54:	str	r3, [sp, #4]
   11d58:	str	r3, [sp]
   11d5c:	str	r3, [sp, #12]
   11d60:	addne	r3, sp, #8
   11d64:	mov	r2, sp
   11d68:	ldmne	r3, {r0, r1}
   11d6c:	mov	r3, #0
   11d70:	stmne	sp, {r0, r1}
   11d74:	ldr	r0, [r5]
   11d78:	mov	r1, r3
   11d7c:	bl	4754 <timer_settime@plt>
   11d80:	cmp	r0, #0
   11d84:	movge	r0, #1
   11d88:	blt	11dc4 <rb_sigio_sched_event+0xf8>
   11d8c:	add	sp, sp, #84	; 0x54
   11d90:	pop	{r4, r5, r6, r7, pc}
   11d94:	mov	r0, #0
   11d98:	bx	lr
   11d9c:	bl	4ce8 <__errno_location@plt>
   11da0:	ldr	r0, [r0]
   11da4:	bl	43a0 <strerror@plt>
   11da8:	mov	r1, r0
   11dac:	ldr	r0, [pc, #60]	; 11df0 <rb_sigio_sched_event+0x124>
   11db0:	add	r0, pc, r0
   11db4:	bl	491c <rb_lib_log@plt>
   11db8:	mov	r0, #0
   11dbc:	add	sp, sp, #84	; 0x54
   11dc0:	pop	{r4, r5, r6, r7, pc}
   11dc4:	bl	4ce8 <__errno_location@plt>
   11dc8:	ldr	r0, [r0]
   11dcc:	bl	43a0 <strerror@plt>
   11dd0:	mov	r1, r0
   11dd4:	ldr	r0, [pc, #24]	; 11df4 <rb_sigio_sched_event+0x128>
   11dd8:	add	r0, pc, r0
   11ddc:	bl	491c <rb_lib_log@plt>
   11de0:	mov	r0, #0
   11de4:	b	11d8c <rb_sigio_sched_event+0xc0>
   11de8:	bl	4988 <rb_outofmemory@plt>
   11dec:	.word	0x00033fbc
   11df0:	.word	0x00004e24
   11df4:	.word	0x00004e10

00011df8 <rb_sigio_unsched_event>:
   11df8:	ldr	r3, [pc, #60]	; 11e3c <rb_sigio_unsched_event+0x44>
   11dfc:	add	r3, pc, r3
   11e00:	ldr	r3, [r3, #132]	; 0x84
   11e04:	cmp	r3, #0
   11e08:	bxle	lr
   11e0c:	ldr	r3, [r0, #40]	; 0x28
   11e10:	push	{r4, lr}
   11e14:	mov	r4, r0
   11e18:	ldr	r0, [r3]
   11e1c:	bl	4a78 <timer_delete@plt>
   11e20:	ldr	r0, [r4, #40]	; 0x28
   11e24:	cmp	r0, #0
   11e28:	beq	11e30 <rb_sigio_unsched_event+0x38>
   11e2c:	bl	46f4 <free@plt>
   11e30:	mov	r3, #0
   11e34:	str	r3, [r4, #40]	; 0x28
   11e38:	pop	{r4, pc}
   11e3c:	.word	0x00033e90

00011e40 <select_update_selectfds.isra.0>:
   11e40:	uxth	r2, r2
   11e44:	tst	r2, #1
   11e48:	push	{r4, r5, r6, lr}
   11e4c:	beq	11eec <select_update_selectfds.isra.0+0xac>
   11e50:	asr	ip, r0, #31
   11e54:	cmp	r3, #0
   11e58:	lsr	ip, ip, #27
   11e5c:	add	r3, r0, #31
   11e60:	add	lr, r0, ip
   11e64:	beq	11fdc <select_update_selectfds.isra.0+0x19c>
   11e68:	cmp	r0, #0
   11e6c:	movge	r3, r0
   11e70:	ldr	r6, [pc, #544]	; 12098 <select_update_selectfds.isra.0+0x258>
   11e74:	and	lr, lr, #31
   11e78:	add	r6, pc, r6
   11e7c:	sub	ip, lr, ip
   11e80:	asr	r3, r3, #5
   11e84:	mov	r5, #1
   11e88:	ldr	lr, [r6, r3, lsl #2]
   11e8c:	ldr	r4, [r1]
   11e90:	lsl	r5, r5, ip
   11e94:	tst	r2, #2
   11e98:	orr	lr, lr, r5
   11e9c:	orr	r2, r4, #1
   11ea0:	str	lr, [r6, r3, lsl #2]
   11ea4:	str	r2, [r1]
   11ea8:	beq	11ecc <select_update_selectfds.isra.0+0x8c>
   11eac:	ldr	ip, [pc, #488]	; 1209c <select_update_selectfds.isra.0+0x25c>
   11eb0:	orr	r2, r2, #2
   11eb4:	add	ip, pc, ip
   11eb8:	add	r3, ip, r3, lsl #2
   11ebc:	str	r2, [r1]
   11ec0:	ldr	ip, [r3, #128]	; 0x80
   11ec4:	orr	ip, ip, r5
   11ec8:	str	ip, [r3, #128]	; 0x80
   11ecc:	tst	r2, #3
   11ed0:	beq	11f3c <select_update_selectfds.isra.0+0xfc>
   11ed4:	ldr	r3, [pc, #452]	; 120a0 <select_update_selectfds.isra.0+0x260>
   11ed8:	add	r3, pc, r3
   11edc:	ldr	r2, [r3]
   11ee0:	cmp	r2, r0
   11ee4:	strlt	r0, [r3]
   11ee8:	pop	{r4, r5, r6, pc}
   11eec:	tst	r2, #2
   11ef0:	beq	11f30 <select_update_selectfds.isra.0+0xf0>
   11ef4:	cmp	r3, #0
   11ef8:	beq	12064 <select_update_selectfds.isra.0+0x224>
   11efc:	asr	r3, r0, #31
   11f00:	cmp	r0, #0
   11f04:	lsr	r3, r3, #27
   11f08:	add	r2, r0, r3
   11f0c:	and	r2, r2, #31
   11f10:	sub	r2, r2, r3
   11f14:	mov	ip, #1
   11f18:	add	r3, r0, #31
   11f1c:	movge	r3, r0
   11f20:	lsl	r5, ip, r2
   11f24:	asr	r3, r3, #5
   11f28:	ldr	r2, [r1]
   11f2c:	b	11eac <select_update_selectfds.isra.0+0x6c>
   11f30:	ldr	r2, [r1]
   11f34:	tst	r2, #3
   11f38:	bne	11ed4 <select_update_selectfds.isra.0+0x94>
   11f3c:	ldr	r3, [pc, #352]	; 120a4 <select_update_selectfds.isra.0+0x264>
   11f40:	add	r3, pc, r3
   11f44:	ldr	r3, [r3]
   11f48:	cmp	r3, r0
   11f4c:	poplt	{r4, r5, r6, pc}
   11f50:	cmp	r3, #0
   11f54:	poplt	{r4, r5, r6, pc}
   11f58:	ldr	r1, [pc, #328]	; 120a8 <select_update_selectfds.isra.0+0x268>
   11f5c:	asr	r0, r3, #5
   11f60:	add	r1, pc, r1
   11f64:	and	r2, r3, #31
   11f68:	mov	lr, #1
   11f6c:	ldr	ip, [r1, r0, lsl #2]
   11f70:	lsl	r2, lr, r2
   11f74:	tst	r2, ip
   11f78:	popne	{r4, r5, r6, pc}
   11f7c:	add	r1, r1, r0, lsl #2
   11f80:	ldr	r1, [r1, #128]	; 0x80
   11f84:	tst	r2, r1
   11f88:	popne	{r4, r5, r6, pc}
   11f8c:	ldr	r0, [pc, #280]	; 120ac <select_update_selectfds.isra.0+0x26c>
   11f90:	add	r0, pc, r0
   11f94:	b	11fb0 <select_update_selectfds.isra.0+0x170>
   11f98:	ldr	r1, [r0, r1, lsl #2]
   11f9c:	tst	r2, r1
   11fa0:	bne	12044 <select_update_selectfds.isra.0+0x204>
   11fa4:	ldr	r1, [ip, #128]	; 0x80
   11fa8:	tst	r2, r1
   11fac:	bne	12054 <select_update_selectfds.isra.0+0x214>
   11fb0:	sub	r3, r3, #1
   11fb4:	and	r2, r3, #31
   11fb8:	asr	r1, r3, #5
   11fbc:	cmn	r3, #1
   11fc0:	lsl	r2, lr, r2
   11fc4:	add	ip, r0, r1, lsl #2
   11fc8:	bne	11f98 <select_update_selectfds.isra.0+0x158>
   11fcc:	ldr	r2, [pc, #220]	; 120b0 <select_update_selectfds.isra.0+0x270>
   11fd0:	add	r2, pc, r2
   11fd4:	str	r3, [r2]
   11fd8:	pop	{r4, r5, r6, pc}
   11fdc:	cmp	r0, #0
   11fe0:	movge	r3, r0
   11fe4:	ldr	r4, [pc, #200]	; 120b4 <select_update_selectfds.isra.0+0x274>
   11fe8:	and	lr, lr, #31
   11fec:	sub	ip, lr, ip
   11ff0:	add	r4, pc, r4
   11ff4:	asr	r3, r3, #5
   11ff8:	mov	lr, #1
   11ffc:	ldr	r5, [r1]
   12000:	mvn	lr, lr, lsl ip
   12004:	ldr	ip, [r4, r3, lsl #2]
   12008:	tst	r2, #2
   1200c:	and	ip, ip, lr
   12010:	bic	r2, r5, #1
   12014:	str	ip, [r4, r3, lsl #2]
   12018:	str	r2, [r1]
   1201c:	beq	11ecc <select_update_selectfds.isra.0+0x8c>
   12020:	ldr	ip, [pc, #144]	; 120b8 <select_update_selectfds.isra.0+0x278>
   12024:	bic	r2, r2, #2
   12028:	add	ip, pc, ip
   1202c:	add	r3, ip, r3, lsl #2
   12030:	str	r2, [r1]
   12034:	ldr	r1, [r3, #128]	; 0x80
   12038:	and	lr, lr, r1
   1203c:	str	lr, [r3, #128]	; 0x80
   12040:	b	11ecc <select_update_selectfds.isra.0+0x8c>
   12044:	ldr	r2, [pc, #112]	; 120bc <select_update_selectfds.isra.0+0x27c>
   12048:	add	r2, pc, r2
   1204c:	str	r3, [r2]
   12050:	pop	{r4, r5, r6, pc}
   12054:	ldr	r2, [pc, #100]	; 120c0 <select_update_selectfds.isra.0+0x280>
   12058:	add	r2, pc, r2
   1205c:	str	r3, [r2]
   12060:	pop	{r4, r5, r6, pc}
   12064:	asr	r2, r0, #31
   12068:	cmp	r0, #0
   1206c:	lsr	r2, r2, #27
   12070:	add	lr, r0, r2
   12074:	and	lr, lr, #31
   12078:	sub	r2, lr, r2
   1207c:	add	r3, r0, #31
   12080:	mov	lr, #1
   12084:	movge	r3, r0
   12088:	mvn	lr, lr, lsl r2
   1208c:	asr	r3, r3, #5
   12090:	ldr	r2, [r1]
   12094:	b	12020 <select_update_selectfds.isra.0+0x1e0>
   12098:	.word	0x00033e9c
   1209c:	.word	0x00033e60
   120a0:	.word	0x000165a8
   120a4:	.word	0x00016540
   120a8:	.word	0x00033db4
   120ac:	.word	0x00033d84
   120b0:	.word	0x000164b0
   120b4:	.word	0x00033d24
   120b8:	.word	0x00033cec
   120bc:	.word	0x00016438
   120c0:	.word	0x00016428

000120c4 <rb_setup_fd_select>:
   120c4:	mov	r0, #0
   120c8:	bx	lr

000120cc <rb_init_netio_select>:
   120cc:	ldr	r3, [pc, #96]	; 12134 <rb_init_netio_select+0x68>
   120d0:	ldr	r2, [pc, #96]	; 12138 <rb_init_netio_select+0x6c>
   120d4:	add	r3, pc, r3
   120d8:	mov	r1, #0
   120dc:	ldr	r3, [r3, r2]
   120e0:	ldr	r2, [r3]
   120e4:	cmp	r2, #1024	; 0x400
   120e8:	movgt	r2, #1024	; 0x400
   120ec:	strgt	r2, [r3]
   120f0:	ldr	r2, [pc, #68]	; 1213c <rb_init_netio_select+0x70>
   120f4:	add	r2, pc, r2
   120f8:	sub	r3, r2, #4
   120fc:	add	r2, r2, #124	; 0x7c
   12100:	str	r1, [r3, #4]!
   12104:	cmp	r3, r2
   12108:	bne	12100 <rb_init_netio_select+0x34>
   1210c:	ldr	r2, [pc, #44]	; 12140 <rb_init_netio_select+0x74>
   12110:	mov	r1, #0
   12114:	add	r2, pc, r2
   12118:	add	r3, r2, #124	; 0x7c
   1211c:	add	r2, r2, #252	; 0xfc
   12120:	str	r1, [r3, #4]!
   12124:	cmp	r2, r3
   12128:	bne	12120 <rb_init_netio_select+0x54>
   1212c:	mov	r0, #0
   12130:	bx	lr
   12134:	.word	0x00015f24
   12138:	.word	0x000003a0
   1213c:	.word	0x00033c20
   12140:	.word	0x00033c00

00012144 <rb_setselect_select>:
   12144:	tst	r1, #1
   12148:	push	{r4, r5, r6, r7, r8, lr}
   1214c:	mov	r5, r1
   12150:	mov	r4, r0
   12154:	mov	r6, r2
   12158:	mov	r7, r3
   1215c:	bne	12188 <rb_setselect_select+0x44>
   12160:	tst	r5, #2
   12164:	popeq	{r4, r5, r6, r7, r8, pc}
   12168:	str	r6, [r4, #36]	; 0x24
   1216c:	str	r7, [r4, #40]	; 0x28
   12170:	mov	r3, r6
   12174:	add	r1, r4, #20
   12178:	ldr	r0, [r4, #12]
   1217c:	mov	r2, #2
   12180:	pop	{r4, r5, r6, r7, r8, lr}
   12184:	b	11e40 <select_update_selectfds.isra.0>
   12188:	str	r2, [r4, #28]
   1218c:	str	r3, [r4, #32]
   12190:	add	r1, r0, #20
   12194:	mov	r3, r2
   12198:	ldr	r0, [r0, #12]
   1219c:	mov	r2, #1
   121a0:	bl	11e40 <select_update_selectfds.isra.0>
   121a4:	tst	r5, #2
   121a8:	popeq	{r4, r5, r6, r7, r8, pc}
   121ac:	b	12168 <rb_setselect_select+0x24>

000121b0 <rb_select_select>:
   121b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121b4:	mov	r2, #128	; 0x80
   121b8:	ldr	r7, [pc, #592]	; 12410 <rb_select_select+0x260>
   121bc:	sub	sp, sp, #28
   121c0:	add	r7, pc, r7
   121c4:	add	r5, r7, #256	; 0x100
   121c8:	mov	r1, r7
   121cc:	add	r4, r7, #384	; 0x180
   121d0:	mov	r6, r0
   121d4:	mov	r0, r5
   121d8:	bl	4808 <memcpy@plt>
   121dc:	add	r1, r7, #128	; 0x80
   121e0:	mov	r0, r4
   121e4:	mov	r2, #128	; 0x80
   121e8:	bl	4808 <memcpy@plt>
   121ec:	ldr	r7, [pc, #544]	; 12414 <rb_select_select+0x264>
   121f0:	mov	r3, #1000	; 0x3e8
   121f4:	ldr	r8, [pc, #540]	; 12418 <rb_select_select+0x268>
   121f8:	add	r7, pc, r7
   121fc:	mul	r6, r3, r6
   12200:	add	sl, sp, #16
   12204:	mov	r9, #0
   12208:	add	r8, pc, r8
   1220c:	b	12224 <rb_select_select+0x74>
   12210:	bl	4ce8 <__errno_location@plt>
   12214:	ldr	r0, [r0]
   12218:	bl	43dc <rb_ignore_errno@plt>
   1221c:	cmp	r0, #0
   12220:	beq	12400 <rb_select_select+0x250>
   12224:	ldr	r0, [r7]
   12228:	mov	r3, #0
   1222c:	str	sl, [sp]
   12230:	add	r0, r0, #1
   12234:	mov	r2, r4
   12238:	mov	r1, r5
   1223c:	str	r9, [sp, #16]
   12240:	str	r6, [sp, #20]
   12244:	bl	4934 <select@plt>
   12248:	cmp	r0, #0
   1224c:	blt	12210 <rb_select_select+0x60>
   12250:	mov	fp, r0
   12254:	bl	4994 <rb_set_time@plt>
   12258:	cmp	fp, #0
   1225c:	beq	122ec <rb_select_select+0x13c>
   12260:	ldr	r3, [r7]
   12264:	cmp	r3, #0
   12268:	blt	122ec <rb_select_select+0x13c>
   1226c:	ldr	r3, [pc, #424]	; 1241c <rb_select_select+0x26c>
   12270:	ldr	fp, [pc, #424]	; 12420 <rb_select_select+0x270>
   12274:	ldr	r7, [pc, #424]	; 12424 <rb_select_select+0x274>
   12278:	ldr	r8, [r8, r3]
   1227c:	ldr	r9, [pc, #420]	; 12428 <rb_select_select+0x278>
   12280:	ldr	r3, [pc, #420]	; 1242c <rb_select_select+0x27c>
   12284:	mov	r5, #0
   12288:	add	fp, pc, fp
   1228c:	add	r7, pc, r7
   12290:	mov	sl, #1
   12294:	add	r3, pc, r3
   12298:	str	r3, [sp, #12]
   1229c:	asr	r3, r5, #24
   122a0:	eor	r3, r3, r5, asr #12
   122a4:	eor	r3, r3, r5
   122a8:	and	r3, r3, r9
   122ac:	ldr	r2, [r8]
   122b0:	add	r3, r3, r3, lsl #1
   122b4:	ldr	r3, [r2, r3, lsl #2]
   122b8:	cmp	r3, #0
   122bc:	beq	122dc <rb_select_select+0x12c>
   122c0:	ldr	r4, [r3]
   122c4:	ldr	r2, [r4, #12]
   122c8:	cmp	r5, r2
   122cc:	beq	122f8 <rb_select_select+0x148>
   122d0:	ldr	r3, [r3, #8]
   122d4:	cmp	r3, #0
   122d8:	bne	122c0 <rb_select_select+0x110>
   122dc:	ldr	r3, [r7]
   122e0:	add	r5, r5, #1
   122e4:	cmp	r3, r5
   122e8:	bge	1229c <rb_select_select+0xec>
   122ec:	mov	r0, #0
   122f0:	add	sp, sp, #28
   122f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122f8:	cmp	r5, #0
   122fc:	add	r6, r5, #31
   12300:	asr	r2, r5, #31
   12304:	movge	r6, r5
   12308:	lsr	r2, r2, #27
   1230c:	asr	r6, r6, #5
   12310:	add	r3, r5, r2
   12314:	lsl	r6, r6, #2
   12318:	and	r3, r3, #31
   1231c:	sub	r3, r3, r2
   12320:	add	r1, fp, r6
   12324:	lsl	r3, sl, r3
   12328:	ldr	r2, [r1, #256]	; 0x100
   1232c:	tst	r3, r2
   12330:	beq	1235c <rb_select_select+0x1ac>
   12334:	ldr	r2, [r4, #28]
   12338:	mov	r1, #0
   1233c:	cmp	r2, r1
   12340:	str	r1, [r4, #28]
   12344:	beq	1235c <rb_select_select+0x1ac>
   12348:	ldr	r1, [r4, #32]
   1234c:	mov	r0, r4
   12350:	str	r3, [sp, #8]
   12354:	blx	r2
   12358:	ldr	r3, [sp, #8]
   1235c:	ldrb	r2, [r4, #16]
   12360:	tst	r2, #1
   12364:	beq	122dc <rb_select_select+0x12c>
   12368:	ldr	r2, [sp, #12]
   1236c:	add	r6, r2, r6
   12370:	ldr	r2, [r6, #384]	; 0x180
   12374:	tst	r3, r2
   12378:	beq	1239c <rb_select_select+0x1ec>
   1237c:	ldr	r3, [r4, #36]	; 0x24
   12380:	mov	r2, #0
   12384:	cmp	r3, r2
   12388:	str	r2, [r4, #36]	; 0x24
   1238c:	beq	123dc <rb_select_select+0x22c>
   12390:	ldr	r1, [r4, #40]	; 0x28
   12394:	mov	r0, r4
   12398:	blx	r3
   1239c:	ldr	r3, [r4, #28]
   123a0:	cmp	r3, #0
   123a4:	beq	123e8 <rb_select_select+0x238>
   123a8:	ldr	r3, [r4, #36]	; 0x24
   123ac:	cmp	r3, #0
   123b0:	bne	122dc <rb_select_select+0x12c>
   123b4:	mov	r3, #0
   123b8:	mov	r2, #2
   123bc:	add	r1, r4, #20
   123c0:	ldr	r0, [r4, #12]
   123c4:	bl	11e40 <select_update_selectfds.isra.0>
   123c8:	ldr	r3, [r7]
   123cc:	add	r5, r5, #1
   123d0:	cmp	r3, r5
   123d4:	bge	1229c <rb_select_select+0xec>
   123d8:	b	122ec <rb_select_select+0x13c>
   123dc:	ldr	r3, [r4, #28]
   123e0:	cmp	r3, #0
   123e4:	bne	123b4 <rb_select_select+0x204>
   123e8:	mov	r3, #0
   123ec:	mov	r2, sl
   123f0:	add	r1, r4, #20
   123f4:	ldr	r0, [r4, #12]
   123f8:	bl	11e40 <select_update_selectfds.isra.0>
   123fc:	b	123a8 <rb_select_select+0x1f8>
   12400:	bl	4994 <rb_set_time@plt>
   12404:	mvn	r0, #0
   12408:	add	sp, sp, #28
   1240c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12410:	.word	0x00033b54
   12414:	.word	0x00016288
   12418:	.word	0x00015df0
   1241c:	.word	0x000003c0
   12420:	.word	0x00033a8c
   12424:	.word	0x000161f4
   12428:	.word	0x00000fff
   1242c:	.word	0x00033a80

00012430 <rb_init_netio_kqueue>:
   12430:	push	{r4, lr}
   12434:	bl	4ce8 <__errno_location@plt>
   12438:	mov	r3, #38	; 0x26
   1243c:	str	r3, [r0]
   12440:	mvn	r0, #0
   12444:	pop	{r4, pc}

00012448 <rb_setselect_kqueue>:
   12448:	push	{r4, lr}
   1244c:	bl	4ce8 <__errno_location@plt>
   12450:	mov	r3, #38	; 0x26
   12454:	str	r3, [r0]
   12458:	pop	{r4, pc}

0001245c <rb_select_kqueue>:
   1245c:	push	{r4, lr}
   12460:	bl	4ce8 <__errno_location@plt>
   12464:	mov	r3, #38	; 0x26
   12468:	str	r3, [r0]
   1246c:	mvn	r0, #0
   12470:	pop	{r4, pc}

00012474 <rb_setup_fd_kqueue>:
   12474:	push	{r4, lr}
   12478:	bl	4ce8 <__errno_location@plt>
   1247c:	mov	r3, #38	; 0x26
   12480:	str	r3, [r0]
   12484:	mvn	r0, #0
   12488:	pop	{r4, pc}

0001248c <rb_kqueue_init_event>:
   1248c:	bx	lr

00012490 <rb_kqueue_sched_event>:
   12490:	push	{r4, lr}
   12494:	bl	4ce8 <__errno_location@plt>
   12498:	mov	r3, #38	; 0x26
   1249c:	str	r3, [r0]
   124a0:	mvn	r0, #0
   124a4:	pop	{r4, pc}

000124a8 <rb_kqueue_unsched_event>:
   124a8:	bx	lr

000124ac <rb_kqueue_supports_event>:
   124ac:	push	{r4, lr}
   124b0:	bl	4ce8 <__errno_location@plt>
   124b4:	mov	r3, #38	; 0x26
   124b8:	str	r3, [r0]
   124bc:	mov	r0, #0
   124c0:	pop	{r4, pc}

000124c4 <rb_rawbuf_done>:
   124c4:	ldmib	r1, {r2, r3}
   124c8:	mov	ip, #0
   124cc:	cmp	r3, #0
   124d0:	strne	r2, [r3, #4]
   124d4:	streq	r2, [r0, #4]
   124d8:	ldr	r2, [r1, #4]
   124dc:	cmp	r2, #0
   124e0:	strne	r3, [r2, #8]
   124e4:	streq	r3, [r0]
   124e8:	ldr	r3, [pc, #28]	; 1250c <rb_rawbuf_done+0x48>
   124ec:	ldr	r2, [r0, #8]
   124f0:	add	r3, pc, r3
   124f4:	sub	r2, r2, #1
   124f8:	str	ip, [r1, #4]
   124fc:	str	ip, [r1, #8]
   12500:	str	r2, [r0, #8]
   12504:	ldr	r0, [r3]
   12508:	b	48c8 <rb_bh_free@plt>
   1250c:	.word	0x00033a24

00012510 <rb_rawbuf_flush_writev>:
   12510:	push	{r4, r5, r6, r7, r8, r9, lr}
   12514:	sub	sp, sp, #8192	; 0x2000
   12518:	sub	sp, sp, #4
   1251c:	mov	r4, r0
   12520:	mov	r6, r1
   12524:	mov	r0, sp
   12528:	mov	r1, #0
   1252c:	mov	r2, #8192	; 0x2000
   12530:	bl	4628 <memset@plt>
   12534:	ldr	r1, [r4]
   12538:	cmp	r1, #0
   1253c:	beq	1269c <rb_rawbuf_flush_writev+0x18c>
   12540:	mov	r7, sp
   12544:	ldr	r8, [pc, #356]	; 126b0 <rb_rawbuf_flush_writev+0x1a0>
   12548:	mov	r0, sp
   1254c:	mov	r2, #1
   12550:	b	12560 <rb_rawbuf_flush_writev+0x50>
   12554:	cmp	r2, r8
   12558:	add	r0, r0, #8
   1255c:	beq	12694 <rb_rawbuf_flush_writev+0x184>
   12560:	ldr	r3, [r1]
   12564:	mov	r5, r2
   12568:	add	ip, r3, #12
   1256c:	ldrb	lr, [r3, #1040]	; 0x410
   12570:	mov	r9, ip
   12574:	ldr	r3, [r3, #1036]	; 0x40c
   12578:	cmp	lr, #0
   1257c:	streq	r9, [r0]
   12580:	ldrne	lr, [r4, #16]
   12584:	streq	r3, [r0, #4]
   12588:	addne	ip, ip, lr
   1258c:	strne	ip, [r0]
   12590:	ldr	r1, [r1, #8]
   12594:	subne	r3, r3, lr
   12598:	strne	r3, [r0, #4]
   1259c:	cmp	r1, #0
   125a0:	add	r2, r2, #1
   125a4:	bne	12554 <rb_rawbuf_flush_writev+0x44>
   125a8:	mov	r1, r7
   125ac:	mov	r0, r6
   125b0:	mov	r2, r5
   125b4:	bl	4ad8 <rb_writev@plt>
   125b8:	subs	r8, r0, #0
   125bc:	ble	12644 <rb_rawbuf_flush_writev+0x134>
   125c0:	ldr	r3, [r4]
   125c4:	cmp	r3, #0
   125c8:	beq	12644 <rb_rawbuf_flush_writev+0x134>
   125cc:	ldr	r6, [r3, #8]
   125d0:	add	r5, r5, #1
   125d4:	ldr	r3, [r3]
   125d8:	mov	r7, r8
   125dc:	mov	r9, #1
   125e0:	b	125f4 <rb_rawbuf_flush_writev+0xe4>
   125e4:	cmp	r9, r5
   125e8:	ldr	r3, [r6]
   125ec:	ldr	r6, [r6, #8]
   125f0:	beq	12644 <rb_rawbuf_flush_writev+0x134>
   125f4:	ldrb	r2, [r3, #1040]	; 0x410
   125f8:	mov	r1, r3
   125fc:	mov	r0, r4
   12600:	cmp	r2, #0
   12604:	ldr	r2, [r3, #1036]	; 0x40c
   12608:	beq	1261c <rb_rawbuf_flush_writev+0x10c>
   1260c:	ldr	ip, [r4, #16]
   12610:	sub	ip, r2, ip
   12614:	cmp	ip, r7
   12618:	ble	12654 <rb_rawbuf_flush_writev+0x144>
   1261c:	cmp	r2, r7
   12620:	bgt	1266c <rb_rawbuf_flush_writev+0x15c>
   12624:	ldr	r3, [r4, #12]
   12628:	sub	r7, r7, r2
   1262c:	sub	r2, r3, r2
   12630:	str	r2, [r4, #12]
   12634:	bl	124c4 <rb_rawbuf_done>
   12638:	cmp	r6, #0
   1263c:	add	r9, r9, #1
   12640:	bne	125e4 <rb_rawbuf_flush_writev+0xd4>
   12644:	mov	r0, r8
   12648:	add	sp, sp, #8192	; 0x2000
   1264c:	add	sp, sp, #4
   12650:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12654:	ldr	r2, [r4, #12]
   12658:	sub	r7, r7, ip
   1265c:	sub	r3, r2, ip
   12660:	str	r3, [r4, #12]
   12664:	bl	124c4 <rb_rawbuf_done>
   12668:	b	12638 <rb_rawbuf_flush_writev+0x128>
   1266c:	mov	r2, #1
   12670:	strb	r2, [r3, #1040]	; 0x410
   12674:	ldr	r3, [r4, #12]
   12678:	str	r7, [r4, #16]
   1267c:	sub	r7, r3, r7
   12680:	mov	r0, r8
   12684:	str	r7, [r4, #12]
   12688:	add	sp, sp, #8192	; 0x2000
   1268c:	add	sp, sp, #4
   12690:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12694:	mov	r5, #1024	; 0x400
   12698:	b	125a8 <rb_rawbuf_flush_writev+0x98>
   1269c:	bl	4ce8 <__errno_location@plt>
   126a0:	mov	r3, #11
   126a4:	mvn	r8, #0
   126a8:	str	r3, [r0]
   126ac:	b	12644 <rb_rawbuf_flush_writev+0x134>
   126b0:	.word	0x00000401

000126b4 <rb_rawbuf_flush>:
   126b4:	ldr	r3, [r0]
   126b8:	push	{r4, r5, r6, lr}
   126bc:	cmp	r3, #0
   126c0:	beq	127c0 <rb_rawbuf_flush+0x10c>
   126c4:	mov	r4, r0
   126c8:	mov	r0, r1
   126cc:	mov	r6, r1
   126d0:	bl	44b4 <rb_fd_ssl@plt>
   126d4:	cmp	r0, #0
   126d8:	beq	12754 <rb_rawbuf_flush+0xa0>
   126dc:	ldr	r3, [r4]
   126e0:	mov	r0, r6
   126e4:	ldr	r5, [r3]
   126e8:	ldrb	r3, [r5, #1040]	; 0x410
   126ec:	cmp	r3, #0
   126f0:	moveq	r1, #1
   126f4:	ldrne	r2, [r4, #16]
   126f8:	moveq	ip, r3
   126fc:	strbeq	r1, [r5, #1040]	; 0x410
   12700:	ldr	r1, [r5, #1036]	; 0x40c
   12704:	movne	ip, r2
   12708:	moveq	r2, ip
   1270c:	streq	r3, [r4, #16]
   12710:	add	r3, r5, #12
   12714:	sub	r2, r1, r2
   12718:	add	r1, r3, ip
   1271c:	bl	4658 <rb_write@plt>
   12720:	subs	r6, r0, #0
   12724:	ble	1274c <rb_rawbuf_flush+0x98>
   12728:	ldr	r3, [r4, #16]
   1272c:	ldr	r2, [r5, #1036]	; 0x40c
   12730:	add	r3, r6, r3
   12734:	cmp	r3, r2
   12738:	str	r3, [r4, #16]
   1273c:	beq	12764 <rb_rawbuf_flush+0xb0>
   12740:	ldr	r3, [r4, #12]
   12744:	sub	r3, r3, r6
   12748:	str	r3, [r4, #12]
   1274c:	mov	r0, r6
   12750:	pop	{r4, r5, r6, pc}
   12754:	mov	r1, r6
   12758:	mov	r0, r4
   1275c:	pop	{r4, r5, r6, lr}
   12760:	b	12510 <rb_rawbuf_flush_writev>
   12764:	ldr	r3, [r5, #8]
   12768:	mov	r2, #0
   1276c:	str	r2, [r4, #16]
   12770:	cmp	r3, r2
   12774:	ldr	r2, [r5, #4]
   12778:	mov	r1, #0
   1277c:	strne	r2, [r3, #4]
   12780:	streq	r2, [r4, #4]
   12784:	ldr	r2, [r5, #4]
   12788:	cmp	r2, #0
   1278c:	strne	r3, [r2, #8]
   12790:	streq	r3, [r4]
   12794:	ldr	r3, [pc, #56]	; 127d4 <rb_rawbuf_flush+0x120>
   12798:	ldr	r2, [r4, #8]
   1279c:	add	r3, pc, r3
   127a0:	sub	r2, r2, #1
   127a4:	str	r1, [r5, #4]
   127a8:	str	r1, [r5, #8]
   127ac:	ldr	r0, [r3]
   127b0:	mov	r1, r5
   127b4:	str	r2, [r4, #8]
   127b8:	bl	48c8 <rb_bh_free@plt>
   127bc:	b	12740 <rb_rawbuf_flush+0x8c>
   127c0:	bl	4ce8 <__errno_location@plt>
   127c4:	mov	r3, #11
   127c8:	mvn	r6, #0
   127cc:	str	r3, [r0]
   127d0:	b	1274c <rb_rawbuf_flush+0x98>
   127d4:	.word	0x00033778

000127d8 <rb_rawbuf_append>:
   127d8:	ldr	r3, [r0, #4]
   127dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   127e0:	cmp	r3, #0
   127e4:	mov	r5, r0
   127e8:	mov	r7, r2
   127ec:	mov	r8, r1
   127f0:	beq	1280c <rb_rawbuf_append+0x34>
   127f4:	ldr	r4, [r3]
   127f8:	cmp	r4, #0
   127fc:	beq	1280c <rb_rawbuf_append+0x34>
   12800:	ldr	r3, [r4, #1036]	; 0x40c
   12804:	cmp	r3, #1024	; 0x400
   12808:	blt	128b0 <rb_rawbuf_append+0xd8>
   1280c:	cmp	r7, #0
   12810:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   12814:	ldr	sl, [pc, #236]	; 12908 <rb_rawbuf_append+0x130>
   12818:	mov	r9, #0
   1281c:	add	sl, pc, sl
   12820:	b	12878 <rb_rawbuf_append+0xa0>
   12824:	ldr	r3, [r5, #8]
   12828:	cmp	r7, #1024	; 0x400
   1282c:	movlt	r6, r7
   12830:	movge	r6, #1024	; 0x400
   12834:	add	r3, r3, #1
   12838:	mov	r2, r6
   1283c:	str	r3, [r5, #8]
   12840:	mov	r1, r8
   12844:	str	r4, [r5, #4]
   12848:	add	r0, r4, #12
   1284c:	bl	4808 <memcpy@plt>
   12850:	ldr	r2, [r4, #1036]	; 0x40c
   12854:	ldr	r3, [r5, #12]
   12858:	sub	r7, r7, r6
   1285c:	add	r2, r2, r6
   12860:	add	r3, r3, r6
   12864:	cmp	r7, #0
   12868:	str	r2, [r4, #1036]	; 0x40c
   1286c:	add	r8, r8, r6
   12870:	str	r3, [r5, #12]
   12874:	ble	128ac <rb_rawbuf_append+0xd4>
   12878:	ldr	r0, [sl]
   1287c:	bl	4958 <rb_bh_alloc@plt>
   12880:	ldr	r3, [r5, #4]
   12884:	cmp	r3, #0
   12888:	mov	r4, r0
   1288c:	str	r0, [r4]
   12890:	stmib	r0, {r3, r9}
   12894:	strne	r0, [r3, #8]
   12898:	bne	12824 <rb_rawbuf_append+0x4c>
   1289c:	ldr	r3, [r5]
   128a0:	cmp	r3, #0
   128a4:	streq	r0, [r5]
   128a8:	b	12824 <rb_rawbuf_append+0x4c>
   128ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   128b0:	ldrb	r2, [r4, #1040]	; 0x410
   128b4:	cmp	r2, #0
   128b8:	bne	1280c <rb_rawbuf_append+0x34>
   128bc:	rsb	r6, r3, #1024	; 0x400
   128c0:	cmp	r7, r6
   128c4:	movlt	r6, r7
   128c8:	add	r0, r4, #12
   128cc:	mov	r2, r6
   128d0:	add	r0, r0, r3
   128d4:	bl	4808 <memcpy@plt>
   128d8:	ldr	r2, [r4, #1036]	; 0x40c
   128dc:	ldr	r3, [r5, #12]
   128e0:	subs	r7, r7, r6
   128e4:	add	r2, r2, r6
   128e8:	add	r3, r3, r6
   128ec:	str	r2, [r4, #1036]	; 0x40c
   128f0:	str	r3, [r5, #12]
   128f4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   128f8:	cmp	r7, #0
   128fc:	add	r8, r8, r6
   12900:	bgt	12814 <rb_rawbuf_append+0x3c>
   12904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12908:	.word	0x000336f8

0001290c <rb_rawbuf_get>:
   1290c:	push	{r4, r5, r6, r7, r8, lr}
   12910:	ldr	r4, [r0]
   12914:	cmp	r4, #0
   12918:	beq	12994 <rb_rawbuf_get+0x88>
   1291c:	ldr	r7, [r4]
   12920:	mov	r6, r2
   12924:	mov	r5, r0
   12928:	ldrb	r3, [r7, #1040]	; 0x410
   1292c:	ldr	r4, [r7, #1036]	; 0x40c
   12930:	cmp	r3, #0
   12934:	addne	ip, r7, #12
   12938:	ldrne	r3, [r0, #16]
   1293c:	addeq	ip, r7, #12
   12940:	addne	ip, ip, r3
   12944:	cmp	r2, r4
   12948:	mov	r3, r1
   1294c:	movlt	r4, r2
   12950:	mov	r0, r3
   12954:	mov	r1, ip
   12958:	mov	r2, r4
   1295c:	bl	4808 <memcpy@plt>
   12960:	ldr	r3, [r7, #1036]	; 0x40c
   12964:	cmp	r3, r4
   12968:	beq	1299c <rb_rawbuf_get+0x90>
   1296c:	mov	r2, #1
   12970:	strb	r2, [r7, #1040]	; 0x410
   12974:	ldr	r1, [r5, #12]
   12978:	ldr	r2, [r5, #16]
   1297c:	sub	r3, r3, r4
   12980:	sub	r1, r1, r4
   12984:	add	r2, r2, r4
   12988:	str	r3, [r7, #1036]	; 0x40c
   1298c:	str	r1, [r5, #12]
   12990:	str	r2, [r5, #16]
   12994:	mov	r0, r4
   12998:	pop	{r4, r5, r6, r7, r8, pc}
   1299c:	mov	r3, #0
   129a0:	mov	r1, r7
   129a4:	str	r3, [r5, #16]
   129a8:	mov	r0, r5
   129ac:	bl	124c4 <rb_rawbuf_done>
   129b0:	ldr	r2, [r5, #12]
   129b4:	sub	r6, r2, r6
   129b8:	str	r6, [r5, #12]
   129bc:	b	12994 <rb_rawbuf_get+0x88>

000129c0 <rb_rawbuf_length>:
   129c0:	ldr	r0, [r0, #12]
   129c4:	bx	lr

000129c8 <rb_new_rawbuffer>:
   129c8:	push	{r4, lr}
   129cc:	mov	r1, #20
   129d0:	mov	r0, #1
   129d4:	bl	45ec <calloc@plt>
   129d8:	cmp	r0, #0
   129dc:	popne	{r4, pc}
   129e0:	bl	4988 <rb_outofmemory@plt>

000129e4 <rb_free_rawbuffer>:
   129e4:	ldr	r3, [r0]
   129e8:	push	{r4, r5, r6, lr}
   129ec:	cmp	r3, #0
   129f0:	mov	r5, r0
   129f4:	beq	12a1c <rb_free_rawbuffer+0x38>
   129f8:	ldr	r4, [r3, #8]
   129fc:	b	12a08 <rb_free_rawbuffer+0x24>
   12a00:	mov	r3, r4
   12a04:	ldr	r4, [r4, #8]
   12a08:	ldr	r1, [r3]
   12a0c:	mov	r0, r5
   12a10:	bl	124c4 <rb_rawbuf_done>
   12a14:	cmp	r4, #0
   12a18:	bne	12a00 <rb_free_rawbuffer+0x1c>
   12a1c:	mov	r0, r5
   12a20:	pop	{r4, r5, r6, lr}
   12a24:	b	46f4 <free@plt>

00012a28 <rb_init_rawbuffers>:
   12a28:	push	{r4, lr}
   12a2c:	ldr	r4, [pc, #40]	; 12a5c <rb_init_rawbuffers+0x34>
   12a30:	add	r4, pc, r4
   12a34:	ldr	r3, [r4]
   12a38:	cmp	r3, #0
   12a3c:	popne	{r4, pc}
   12a40:	ldr	r2, [pc, #24]	; 12a60 <rb_init_rawbuffers+0x38>
   12a44:	mov	r1, r0
   12a48:	add	r2, pc, r2
   12a4c:	ldr	r0, [pc, #16]	; 12a64 <rb_init_rawbuffers+0x3c>
   12a50:	bl	4ab4 <rb_bh_create@plt>
   12a54:	str	r0, [r4]
   12a58:	pop	{r4, pc}
   12a5c:	.word	0x000334e4
   12a60:	.word	0x00004228
   12a64:	.word	0x00000414

00012a68 <comp_with_mask>:
   12a68:	push	{r4, r5, r6, lr}
   12a6c:	mov	r4, r2
   12a70:	lsr	r2, r2, #3
   12a74:	mov	r6, r0
   12a78:	mov	r5, r1
   12a7c:	bl	4454 <memcmp@plt>
   12a80:	cmp	r0, #0
   12a84:	bne	12ab4 <comp_with_mask+0x4c>
   12a88:	ands	r3, r4, #7
   12a8c:	beq	12abc <comp_with_mask+0x54>
   12a90:	ldrb	r0, [r5, r4, lsr #3]
   12a94:	ldrb	r2, [r6, r4, lsr #3]
   12a98:	rsb	r3, r3, #8
   12a9c:	mov	r1, #255	; 0xff
   12aa0:	eor	r2, r2, r0
   12aa4:	ands	r3, r2, r1, lsl r3
   12aa8:	moveq	r0, #1
   12aac:	movne	r0, #0
   12ab0:	pop	{r4, r5, r6, pc}
   12ab4:	mov	r0, #0
   12ab8:	pop	{r4, r5, r6, pc}
   12abc:	mov	r0, #1
   12ac0:	pop	{r4, r5, r6, pc}

00012ac4 <New_Prefix2.constprop.1>:
   12ac4:	cmp	r0, #10
   12ac8:	push	{r4, r5, r6, lr}
   12acc:	mov	r5, r0
   12ad0:	mov	r6, r1
   12ad4:	mov	r4, r2
   12ad8:	beq	12b34 <New_Prefix2.constprop.1+0x70>
   12adc:	cmp	r0, #2
   12ae0:	bne	12b24 <New_Prefix2.constprop.1+0x60>
   12ae4:	mov	r1, #24
   12ae8:	mov	r0, #1
   12aec:	bl	45ec <calloc@plt>
   12af0:	cmp	r0, #0
   12af4:	beq	12b30 <New_Prefix2.constprop.1+0x6c>
   12af8:	ldr	r3, [r6]
   12afc:	mov	ip, r0
   12b00:	str	r3, [r0, #8]
   12b04:	cmp	r4, #0
   12b08:	movlt	r4, #128	; 0x80
   12b0c:	mov	r3, #1
   12b10:	strh	r4, [ip, #2]
   12b14:	strh	r5, [ip]
   12b18:	str	r3, [ip, #4]
   12b1c:	mov	r0, ip
   12b20:	pop	{r4, r5, r6, pc}
   12b24:	mov	ip, #0
   12b28:	mov	r0, ip
   12b2c:	pop	{r4, r5, r6, pc}
   12b30:	bl	4988 <rb_outofmemory@plt>
   12b34:	mov	r1, #24
   12b38:	mov	r0, #1
   12b3c:	bl	45ec <calloc@plt>
   12b40:	subs	ip, r0, #0
   12b44:	beq	12b30 <New_Prefix2.constprop.1+0x6c>
   12b48:	ldr	r0, [r6]
   12b4c:	ldr	r1, [r6, #4]
   12b50:	ldr	r2, [r6, #8]
   12b54:	ldr	r3, [r6, #12]
   12b58:	add	lr, ip, #8
   12b5c:	stmia	lr!, {r0, r1, r2, r3}
   12b60:	b	12b04 <New_Prefix2.constprop.1+0x40>

00012b64 <ascii2prefix>:
   12b64:	push	{r4, r5, r6, r7, r8, lr}
   12b68:	subs	r6, r1, #0
   12b6c:	sub	sp, sp, #1040	; 0x410
   12b70:	beq	12c58 <ascii2prefix+0xf4>
   12b74:	cmp	r0, #0
   12b78:	mov	r4, r0
   12b7c:	beq	12c34 <ascii2prefix+0xd0>
   12b80:	cmp	r0, #2
   12b84:	moveq	r7, #32
   12b88:	beq	12b98 <ascii2prefix+0x34>
   12b8c:	cmp	r0, #10
   12b90:	moveq	r7, #128	; 0x80
   12b94:	movne	r7, #0
   12b98:	mov	r1, #47	; 0x2f
   12b9c:	mov	r0, r6
   12ba0:	bl	45b0 <strchr@plt>
   12ba4:	subs	r5, r0, #0
   12ba8:	beq	12bf4 <ascii2prefix+0x90>
   12bac:	mov	r2, #10
   12bb0:	mov	r1, #0
   12bb4:	add	r0, r5, #1
   12bb8:	bl	4874 <strtol@plt>
   12bbc:	sub	r5, r5, r6
   12bc0:	mov	r1, r6
   12bc4:	add	r6, sp, #16
   12bc8:	mov	r2, r5
   12bcc:	mov	r8, r0
   12bd0:	mov	r0, r6
   12bd4:	bl	4808 <memcpy@plt>
   12bd8:	cmp	r7, r8
   12bdc:	cmpge	r8, #0
   12be0:	add	r3, sp, #1040	; 0x410
   12be4:	add	r3, r3, r5
   12be8:	movgt	r7, r8
   12bec:	mov	r2, #0
   12bf0:	strb	r2, [r3, #-1024]	; 0xfffffc00
   12bf4:	cmp	r4, #2
   12bf8:	beq	12c04 <ascii2prefix+0xa0>
   12bfc:	cmp	r4, #10
   12c00:	bne	12c58 <ascii2prefix+0xf4>
   12c04:	mov	r1, r6
   12c08:	mov	r2, sp
   12c0c:	mov	r0, r4
   12c10:	bl	4634 <rb_inet_pton@plt>
   12c14:	cmp	r0, #0
   12c18:	ble	12c58 <ascii2prefix+0xf4>
   12c1c:	mov	r2, r7
   12c20:	mov	r1, sp
   12c24:	mov	r0, r4
   12c28:	bl	12ac4 <New_Prefix2.constprop.1>
   12c2c:	add	sp, sp, #1040	; 0x410
   12c30:	pop	{r4, r5, r6, r7, r8, pc}
   12c34:	mov	r1, #58	; 0x3a
   12c38:	mov	r0, r6
   12c3c:	bl	45b0 <strchr@plt>
   12c40:	cmp	r0, #0
   12c44:	moveq	r4, #2
   12c48:	movne	r4, #10
   12c4c:	moveq	r7, #32
   12c50:	movne	r7, #128	; 0x80
   12c54:	b	12b98 <ascii2prefix+0x34>
   12c58:	mov	r0, #0
   12c5c:	add	sp, sp, #1040	; 0x410
   12c60:	pop	{r4, r5, r6, r7, r8, pc}

00012c64 <Ref_Prefix.part.0>:
   12c64:	add	r1, r0, #8
   12c68:	ldrh	r2, [r0, #2]
   12c6c:	ldrh	r0, [r0]
   12c70:	b	12ac4 <New_Prefix2.constprop.1>

00012c74 <rb_init_patricia>:
   12c74:	bx	lr

00012c78 <rb_new_patricia>:
   12c78:	push	{r4, lr}
   12c7c:	mov	r1, #12
   12c80:	mov	r4, r0
   12c84:	mov	r0, #1
   12c88:	bl	45ec <calloc@plt>
   12c8c:	subs	r3, r0, #0
   12c90:	beq	12cbc <rb_new_patricia+0x44>
   12c94:	ldr	ip, [pc, #36]	; 12cc0 <rb_new_patricia+0x48>
   12c98:	mov	r1, #0
   12c9c:	add	ip, pc, ip
   12ca0:	str	r4, [r3, #4]
   12ca4:	ldr	r2, [ip]
   12ca8:	str	r1, [r3]
   12cac:	add	r2, r2, #1
   12cb0:	str	r2, [ip]
   12cb4:	str	r1, [r3, #8]
   12cb8:	pop	{r4, pc}
   12cbc:	bl	4988 <rb_outofmemory@plt>
   12cc0:	.word	0x0003327c

00012cc4 <rb_clear_patricia>:
   12cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12cc8:	mov	sl, r0
   12ccc:	ldr	r4, [r0]
   12cd0:	sub	sp, sp, #520	; 0x208
   12cd4:	cmp	r4, #0
   12cd8:	beq	12d88 <rb_clear_patricia+0xc4>
   12cdc:	add	r9, sp, #4
   12ce0:	mov	r8, r1
   12ce4:	mov	r7, r9
   12ce8:	ldmib	r4, {r0, r5}
   12cec:	ldr	r6, [r4, #12]
   12cf0:	cmp	r0, #0
   12cf4:	beq	12d20 <rb_clear_patricia+0x5c>
   12cf8:	ldr	r3, [r0, #4]
   12cfc:	sub	r3, r3, #1
   12d00:	cmp	r3, #0
   12d04:	str	r3, [r0, #4]
   12d08:	ble	12d98 <rb_clear_patricia+0xd4>
   12d0c:	ldr	r0, [r4, #20]
   12d10:	cmp	r0, #0
   12d14:	cmpne	r8, #0
   12d18:	beq	12d20 <rb_clear_patricia+0x5c>
   12d1c:	blx	r8
   12d20:	mov	r0, r4
   12d24:	bl	46f4 <free@plt>
   12d28:	ldr	r3, [sl, #8]
   12d2c:	cmp	r5, #0
   12d30:	sub	r3, r3, #1
   12d34:	str	r3, [sl, #8]
   12d38:	beq	12d68 <rb_clear_patricia+0xa4>
   12d3c:	cmp	r6, #0
   12d40:	moveq	r4, r5
   12d44:	beq	12ce8 <rb_clear_patricia+0x24>
   12d48:	mov	r4, r5
   12d4c:	str	r6, [r7]
   12d50:	ldmib	r4, {r0, r5}
   12d54:	add	r7, r7, #4
   12d58:	ldr	r6, [r4, #12]
   12d5c:	cmp	r0, #0
   12d60:	bne	12cf8 <rb_clear_patricia+0x34>
   12d64:	b	12d20 <rb_clear_patricia+0x5c>
   12d68:	cmp	r6, #0
   12d6c:	movne	r4, r6
   12d70:	bne	12ce8 <rb_clear_patricia+0x24>
   12d74:	cmp	r7, r9
   12d78:	beq	12d88 <rb_clear_patricia+0xc4>
   12d7c:	ldr	r4, [r7, #-4]
   12d80:	cmp	r4, #0
   12d84:	bne	12da0 <rb_clear_patricia+0xdc>
   12d88:	mov	r0, sl
   12d8c:	add	sp, sp, #520	; 0x208
   12d90:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d94:	b	46f4 <free@plt>
   12d98:	bl	46f4 <free@plt>
   12d9c:	b	12d0c <rb_clear_patricia+0x48>
   12da0:	sub	r7, r7, #4
   12da4:	b	12ce8 <rb_clear_patricia+0x24>

00012da8 <rb_destroy_patricia>:
   12da8:	push	{r4, lr}
   12dac:	bl	44fc <rb_clear_patricia@plt>
   12db0:	ldr	r2, [pc, #16]	; 12dc8 <rb_destroy_patricia+0x20>
   12db4:	add	r2, pc, r2
   12db8:	ldr	r3, [r2]
   12dbc:	sub	r3, r3, #1
   12dc0:	str	r3, [r2]
   12dc4:	pop	{r4, pc}
   12dc8:	.word	0x00033164

00012dcc <rb_patricia_process>:
   12dcc:	push	{r4, r5, r6, r7, lr}
   12dd0:	sub	sp, sp, #524	; 0x20c
   12dd4:	ldr	r4, [r0]
   12dd8:	cmp	r4, #0
   12ddc:	beq	12e60 <rb_patricia_process+0x94>
   12de0:	add	r7, sp, #4
   12de4:	mov	r6, r1
   12de8:	mov	r5, r7
   12dec:	ldr	r3, [r4, #4]
   12df0:	subs	r0, r3, #0
   12df4:	beq	12e00 <rb_patricia_process+0x34>
   12df8:	ldr	r1, [r4, #20]
   12dfc:	blx	r6
   12e00:	ldr	r3, [r4, #8]
   12e04:	cmp	r3, #0
   12e08:	beq	12e40 <rb_patricia_process+0x74>
   12e0c:	ldr	r2, [r4, #12]
   12e10:	mov	r4, r3
   12e14:	cmp	r2, #0
   12e18:	moveq	r4, r3
   12e1c:	beq	12dec <rb_patricia_process+0x20>
   12e20:	ldr	r3, [r4, #4]
   12e24:	str	r2, [r5]
   12e28:	subs	r0, r3, #0
   12e2c:	add	r5, r5, #4
   12e30:	bne	12df8 <rb_patricia_process+0x2c>
   12e34:	ldr	r3, [r4, #8]
   12e38:	cmp	r3, #0
   12e3c:	bne	12e0c <rb_patricia_process+0x40>
   12e40:	ldr	r4, [r4, #12]
   12e44:	cmp	r4, #0
   12e48:	bne	12dec <rb_patricia_process+0x20>
   12e4c:	cmp	r5, r7
   12e50:	beq	12e60 <rb_patricia_process+0x94>
   12e54:	ldr	r4, [r5, #-4]
   12e58:	cmp	r4, #0
   12e5c:	bne	12e68 <rb_patricia_process+0x9c>
   12e60:	add	sp, sp, #524	; 0x20c
   12e64:	pop	{r4, r5, r6, r7, pc}
   12e68:	sub	r5, r5, #4
   12e6c:	b	12dec <rb_patricia_process+0x20>

00012e70 <rb_patricia_search_exact>:
   12e70:	push	{r4, lr}
   12e74:	ldr	r4, [r0]
   12e78:	cmp	r4, #0
   12e7c:	beq	12ee0 <rb_patricia_search_exact+0x70>
   12e80:	add	lr, r1, #8
   12e84:	ldrh	r2, [r1, #2]
   12e88:	mov	r1, #128	; 0x80
   12e8c:	b	12eac <rb_patricia_search_exact+0x3c>
   12e90:	ldrb	ip, [lr, r3, lsr #3]
   12e94:	ldr	r3, [r4, #8]
   12e98:	ldr	r4, [r4, #12]
   12e9c:	ands	r0, ip, r1, asr r0
   12ea0:	moveq	r4, r3
   12ea4:	cmp	r4, #0
   12ea8:	beq	12ee0 <rb_patricia_search_exact+0x70>
   12eac:	ldr	r3, [r4]
   12eb0:	cmp	r2, r3
   12eb4:	and	r0, r3, #7
   12eb8:	bhi	12e90 <rb_patricia_search_exact+0x20>
   12ebc:	bcc	12ee8 <rb_patricia_search_exact+0x78>
   12ec0:	ldr	r0, [r4, #4]
   12ec4:	cmp	r0, #0
   12ec8:	beq	12ef0 <rb_patricia_search_exact+0x80>
   12ecc:	mov	r1, lr
   12ed0:	add	r0, r0, #8
   12ed4:	bl	12a68 <comp_with_mask>
   12ed8:	cmp	r0, #0
   12edc:	moveq	r4, #0
   12ee0:	mov	r0, r4
   12ee4:	pop	{r4, pc}
   12ee8:	mov	r4, #0
   12eec:	b	12ee0 <rb_patricia_search_exact+0x70>
   12ef0:	mov	r4, r0
   12ef4:	b	12ee0 <rb_patricia_search_exact+0x70>

00012ef8 <rb_patricia_search_best2>:
   12ef8:	ldr	r3, [r0]
   12efc:	push	{r4, r5, r6, r7, r8, lr}
   12f00:	cmp	r3, #0
   12f04:	sub	sp, sp, #520	; 0x208
   12f08:	beq	12fc8 <rb_patricia_search_best2+0xd0>
   12f0c:	add	r7, r1, #8
   12f10:	ldrh	r5, [r1, #2]
   12f14:	mov	r4, #0
   12f18:	mov	r6, #128	; 0x80
   12f1c:	b	12f4c <rb_patricia_search_best2+0x54>
   12f20:	ldr	ip, [r3, #4]
   12f24:	cmp	ip, #0
   12f28:	ldrb	ip, [r7, r1, lsr #3]
   12f2c:	strne	r3, [lr, #-516]	; 0xfffffdfc
   12f30:	ldr	r1, [r3, #8]
   12f34:	addne	r4, r4, #1
   12f38:	ands	r0, ip, r6, asr r0
   12f3c:	ldr	r3, [r3, #12]
   12f40:	moveq	r3, r1
   12f44:	cmp	r3, #0
   12f48:	beq	12f80 <rb_patricia_search_best2+0x88>
   12f4c:	ldr	r1, [r3]
   12f50:	add	r0, sp, #520	; 0x208
   12f54:	cmp	r5, r1
   12f58:	add	lr, r0, r4, lsl #2
   12f5c:	and	r0, r1, #7
   12f60:	bhi	12f20 <rb_patricia_search_best2+0x28>
   12f64:	cmp	r2, #0
   12f68:	beq	12f80 <rb_patricia_search_best2+0x88>
   12f6c:	ldr	r2, [r3, #4]
   12f70:	cmp	r2, #0
   12f74:	strne	r3, [lr, #-516]	; 0xfffffdfc
   12f78:	addne	r4, r4, #1
   12f7c:	bne	12f88 <rb_patricia_search_best2+0x90>
   12f80:	cmp	r4, #0
   12f84:	beq	12fc8 <rb_patricia_search_best2+0xd0>
   12f88:	add	r5, sp, #4
   12f8c:	add	r5, r5, r4, lsl #2
   12f90:	mov	r8, #0
   12f94:	b	12fc0 <rb_patricia_search_best2+0xc8>
   12f98:	ldr	r6, [r5, #-4]!
   12f9c:	mov	r1, r7
   12fa0:	ldr	r3, [r6, #4]
   12fa4:	cmp	r3, #0
   12fa8:	addne	r0, r3, #8
   12fac:	moveq	r0, r8
   12fb0:	ldrh	r2, [r3, #2]
   12fb4:	bl	12a68 <comp_with_mask>
   12fb8:	cmp	r0, #0
   12fbc:	bne	12fcc <rb_patricia_search_best2+0xd4>
   12fc0:	subs	r4, r4, #1
   12fc4:	bcs	12f98 <rb_patricia_search_best2+0xa0>
   12fc8:	mov	r6, #0
   12fcc:	mov	r0, r6
   12fd0:	add	sp, sp, #520	; 0x208
   12fd4:	pop	{r4, r5, r6, r7, r8, pc}

00012fd8 <rb_patricia_search_best>:
   12fd8:	mov	r2, #1
   12fdc:	b	46ac <rb_patricia_search_best2@plt>

00012fe0 <rb_patricia_lookup>:
   12fe0:	ldr	r2, [r0]
   12fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fe8:	cmp	r2, #0
   12fec:	sub	sp, sp, #12
   12ff0:	mov	r6, r0
   12ff4:	mov	r8, r1
   12ff8:	beq	1333c <rb_patricia_lookup+0x35c>
   12ffc:	add	r7, r1, #8
   13000:	ldrh	r5, [r1, #2]
   13004:	mov	ip, #128	; 0x80
   13008:	b	1302c <rb_patricia_lookup+0x4c>
   1300c:	ldrb	r1, [r7, r3, lsr #3]
   13010:	and	r0, r3, #7
   13014:	ands	r1, r1, ip, asr r0
   13018:	beq	13050 <rb_patricia_lookup+0x70>
   1301c:	ldr	r1, [r2, #12]
   13020:	cmp	r1, #0
   13024:	beq	1305c <rb_patricia_lookup+0x7c>
   13028:	mov	r2, r1
   1302c:	ldr	r3, [r2]
   13030:	cmp	r5, r3
   13034:	bhi	13044 <rb_patricia_lookup+0x64>
   13038:	ldr	r1, [r2, #4]
   1303c:	cmp	r1, #0
   13040:	bne	13060 <rb_patricia_lookup+0x80>
   13044:	ldr	r1, [r6, #4]
   13048:	cmp	r3, r1
   1304c:	bcc	1300c <rb_patricia_lookup+0x2c>
   13050:	ldr	r1, [r2, #8]
   13054:	cmp	r1, #0
   13058:	bne	13028 <rb_patricia_lookup+0x48>
   1305c:	ldr	r1, [r2, #4]
   13060:	cmp	r5, r3
   13064:	movcc	r4, r5
   13068:	movcs	r4, r3
   1306c:	cmp	r4, #0
   13070:	add	r9, r1, #8
   13074:	beq	13328 <rb_patricia_lookup+0x348>
   13078:	ldrb	r3, [r1, #8]
   1307c:	ldrb	r1, [r8, #8]
   13080:	cmp	r1, r3
   13084:	eorne	r1, r1, r3
   13088:	movne	r0, #0
   1308c:	bne	130cc <rb_patricia_lookup+0xec>
   13090:	mov	r0, #8
   13094:	cmp	r0, r4
   13098:	mov	ip, r7
   1309c:	mov	r3, r9
   130a0:	bcs	130ec <rb_patricia_lookup+0x10c>
   130a4:	ldrb	r1, [ip, #1]!
   130a8:	ldrb	lr, [r3, #1]!
   130ac:	add	sl, r0, #8
   130b0:	cmp	r1, lr
   130b4:	bne	130c8 <rb_patricia_lookup+0xe8>
   130b8:	mov	r0, sl
   130bc:	cmp	r0, r4
   130c0:	bcc	130a4 <rb_patricia_lookup+0xc4>
   130c4:	b	130ec <rb_patricia_lookup+0x10c>
   130c8:	eor	r1, r1, lr
   130cc:	mov	r3, #0
   130d0:	mov	ip, #128	; 0x80
   130d4:	ands	lr, r1, ip, asr r3
   130d8:	bne	130e8 <rb_patricia_lookup+0x108>
   130dc:	add	r3, r3, #1
   130e0:	cmp	r3, #8
   130e4:	bne	130d4 <rb_patricia_lookup+0xf4>
   130e8:	add	r0, r0, r3
   130ec:	ldr	sl, [r2, #16]
   130f0:	cmp	r4, r0
   130f4:	movcs	r4, r0
   130f8:	cmp	sl, #0
   130fc:	beq	13334 <rb_patricia_lookup+0x354>
   13100:	ldr	r3, [sl]
   13104:	cmp	r4, r3
   13108:	bls	13120 <rb_patricia_lookup+0x140>
   1310c:	b	13334 <rb_patricia_lookup+0x354>
   13110:	ldr	r2, [r3]
   13114:	cmp	r4, r2
   13118:	bhi	1312c <rb_patricia_lookup+0x14c>
   1311c:	mov	sl, r3
   13120:	ldr	r3, [sl, #16]
   13124:	cmp	r3, #0
   13128:	bne	13110 <rb_patricia_lookup+0x130>
   1312c:	cmp	r5, r4
   13130:	beq	13218 <rb_patricia_lookup+0x238>
   13134:	mov	r1, #24
   13138:	mov	r0, #1
   1313c:	bl	45ec <calloc@plt>
   13140:	subs	fp, r0, #0
   13144:	beq	13324 <rb_patricia_lookup+0x344>
   13148:	ldr	r3, [r8, #4]
   1314c:	str	r5, [fp]
   13150:	cmp	r3, #0
   13154:	addne	r3, r3, #1
   13158:	strne	r3, [r8, #4]
   1315c:	beq	132d8 <rb_patricia_lookup+0x2f8>
   13160:	ldr	r1, [sl]
   13164:	ldr	r3, [r6, #8]
   13168:	str	r8, [fp, #4]
   1316c:	add	r2, r3, #1
   13170:	mov	r8, #0
   13174:	cmp	r1, r4
   13178:	str	r2, [r6, #8]
   1317c:	str	r8, [fp, #16]
   13180:	str	r8, [fp, #12]
   13184:	str	r8, [fp, #8]
   13188:	str	r8, [fp, #20]
   1318c:	beq	13298 <rb_patricia_lookup+0x2b8>
   13190:	cmp	r5, r4
   13194:	beq	1324c <rb_patricia_lookup+0x26c>
   13198:	mov	r1, #24
   1319c:	mov	r0, #1
   131a0:	str	r3, [sp, #4]
   131a4:	bl	45ec <calloc@plt>
   131a8:	cmp	r0, #0
   131ac:	beq	13324 <rb_patricia_lookup+0x344>
   131b0:	ldr	r1, [r6, #4]
   131b4:	ldr	r3, [sp, #4]
   131b8:	ldr	r2, [sl, #16]
   131bc:	add	r3, r3, #2
   131c0:	cmp	r1, r4
   131c4:	stm	r0, {r4, r8}
   131c8:	str	r3, [r6, #8]
   131cc:	str	r2, [r0, #16]
   131d0:	str	r8, [r0, #20]
   131d4:	bhi	13304 <rb_patricia_lookup+0x324>
   131d8:	str	sl, [r0, #12]
   131dc:	str	fp, [r0, #8]
   131e0:	str	r0, [fp, #16]
   131e4:	ldr	r3, [sl, #16]
   131e8:	cmp	r3, #0
   131ec:	streq	r0, [r6]
   131f0:	beq	13204 <rb_patricia_lookup+0x224>
   131f4:	ldr	r2, [r3, #12]
   131f8:	cmp	r2, sl
   131fc:	streq	r0, [r3, #12]
   13200:	strne	r0, [r3, #8]
   13204:	str	r0, [sl, #16]
   13208:	mov	sl, fp
   1320c:	mov	r0, sl
   13210:	add	sp, sp, #12
   13214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13218:	ldr	r3, [sl]
   1321c:	cmp	r5, r3
   13220:	bne	13134 <rb_patricia_lookup+0x154>
   13224:	ldr	r3, [sl, #4]
   13228:	cmp	r3, #0
   1322c:	bne	1328c <rb_patricia_lookup+0x2ac>
   13230:	ldr	r3, [r8, #4]
   13234:	cmp	r3, #0
   13238:	addne	r3, r3, #1
   1323c:	strne	r3, [r8, #4]
   13240:	beq	133a8 <rb_patricia_lookup+0x3c8>
   13244:	str	r8, [sl, #4]
   13248:	b	1328c <rb_patricia_lookup+0x2ac>
   1324c:	ldr	r3, [r6, #4]
   13250:	cmp	r5, r3
   13254:	bcc	132e8 <rb_patricia_lookup+0x308>
   13258:	str	sl, [fp, #8]
   1325c:	ldr	r3, [sl, #16]
   13260:	str	r3, [fp, #16]
   13264:	ldr	r3, [sl, #16]
   13268:	cmp	r3, #0
   1326c:	streq	fp, [r6]
   13270:	beq	13284 <rb_patricia_lookup+0x2a4>
   13274:	ldr	r2, [r3, #12]
   13278:	cmp	r2, sl
   1327c:	streq	fp, [r3, #12]
   13280:	strne	fp, [r3, #8]
   13284:	str	fp, [sl, #16]
   13288:	mov	sl, fp
   1328c:	mov	r0, sl
   13290:	add	sp, sp, #12
   13294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13298:	ldr	r3, [r6, #4]
   1329c:	str	sl, [fp, #16]
   132a0:	cmp	r4, r3
   132a4:	bcs	132c4 <rb_patricia_lookup+0x2e4>
   132a8:	ldrb	r2, [r7, r4, lsr #3]
   132ac:	and	r3, r4, #7
   132b0:	mov	r1, #128	; 0x80
   132b4:	ands	r3, r2, r1, asr r3
   132b8:	strne	fp, [sl, #12]
   132bc:	movne	sl, fp
   132c0:	bne	1328c <rb_patricia_lookup+0x2ac>
   132c4:	str	fp, [sl, #8]
   132c8:	mov	sl, fp
   132cc:	mov	r0, sl
   132d0:	add	sp, sp, #12
   132d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d8:	mov	r0, r8
   132dc:	bl	12c64 <Ref_Prefix.part.0>
   132e0:	mov	r8, r0
   132e4:	b	13160 <rb_patricia_lookup+0x180>
   132e8:	ldrb	r3, [r9, r5, lsr #3]
   132ec:	mov	r2, #128	; 0x80
   132f0:	and	r5, r5, #7
   132f4:	ands	r3, r3, r2, asr r5
   132f8:	strne	sl, [fp, #12]
   132fc:	bne	1325c <rb_patricia_lookup+0x27c>
   13300:	b	13258 <rb_patricia_lookup+0x278>
   13304:	ldrb	r2, [r7, r4, lsr #3]
   13308:	and	r3, r4, #7
   1330c:	mov	r1, #128	; 0x80
   13310:	ands	r3, r2, r1, asr r3
   13314:	strne	fp, [r0, #12]
   13318:	strne	sl, [r0, #8]
   1331c:	bne	131e0 <rb_patricia_lookup+0x200>
   13320:	b	131d8 <rb_patricia_lookup+0x1f8>
   13324:	bl	4988 <rb_outofmemory@plt>
   13328:	ldr	sl, [r2, #16]
   1332c:	cmp	sl, #0
   13330:	bne	13120 <rb_patricia_lookup+0x140>
   13334:	mov	sl, r2
   13338:	b	1312c <rb_patricia_lookup+0x14c>
   1333c:	mov	r1, #24
   13340:	mov	r0, #1
   13344:	bl	45ec <calloc@plt>
   13348:	subs	sl, r0, #0
   1334c:	beq	13324 <rb_patricia_lookup+0x344>
   13350:	ldr	r3, [r8, #4]
   13354:	ldrh	r2, [r8, #2]
   13358:	cmp	r3, #0
   1335c:	addne	r3, r3, #1
   13360:	str	r2, [sl]
   13364:	strne	r3, [r8, #4]
   13368:	beq	13398 <rb_patricia_lookup+0x3b8>
   1336c:	ldr	r2, [r6, #8]
   13370:	mov	r3, #0
   13374:	add	r2, r2, #1
   13378:	str	r8, [sl, #4]
   1337c:	str	sl, [r6]
   13380:	str	r2, [r6, #8]
   13384:	str	r3, [sl, #16]
   13388:	str	r3, [sl, #12]
   1338c:	str	r3, [sl, #8]
   13390:	str	r3, [sl, #20]
   13394:	b	1328c <rb_patricia_lookup+0x2ac>
   13398:	mov	r0, r8
   1339c:	bl	12c64 <Ref_Prefix.part.0>
   133a0:	mov	r8, r0
   133a4:	b	1336c <rb_patricia_lookup+0x38c>
   133a8:	mov	r0, r8
   133ac:	bl	12c64 <Ref_Prefix.part.0>
   133b0:	mov	r8, r0
   133b4:	b	13244 <rb_patricia_lookup+0x264>

000133b8 <rb_patricia_remove>:
   133b8:	push	{r4, r5, r6, r7, r8, lr}
   133bc:	mov	r4, r1
   133c0:	ldr	r5, [r1, #12]
   133c4:	mov	r6, r0
   133c8:	cmp	r5, #0
   133cc:	beq	1346c <rb_patricia_remove+0xb4>
   133d0:	ldr	r3, [r1, #8]
   133d4:	cmp	r3, #0
   133d8:	beq	1340c <rb_patricia_remove+0x54>
   133dc:	ldr	r0, [r1, #4]
   133e0:	cmp	r0, #0
   133e4:	beq	133fc <rb_patricia_remove+0x44>
   133e8:	ldr	r3, [r0, #4]
   133ec:	sub	r3, r3, #1
   133f0:	cmp	r3, #0
   133f4:	strgt	r3, [r0, #4]
   133f8:	ble	13464 <rb_patricia_remove+0xac>
   133fc:	mov	r3, #0
   13400:	str	r3, [r4, #4]
   13404:	str	r3, [r4, #20]
   13408:	pop	{r4, r5, r6, r7, r8, pc}
   1340c:	ldr	r0, [r4, #4]
   13410:	ldr	r7, [r4, #16]
   13414:	cmp	r0, #0
   13418:	str	r7, [r5, #16]
   1341c:	beq	13434 <rb_patricia_remove+0x7c>
   13420:	ldr	r3, [r0, #4]
   13424:	sub	r3, r3, #1
   13428:	cmp	r3, #0
   1342c:	str	r3, [r0, #4]
   13430:	ble	1351c <rb_patricia_remove+0x164>
   13434:	mov	r0, r4
   13438:	bl	46f4 <free@plt>
   1343c:	ldr	r3, [r6, #8]
   13440:	cmp	r7, #0
   13444:	sub	r3, r3, #1
   13448:	str	r3, [r6, #8]
   1344c:	beq	13524 <rb_patricia_remove+0x16c>
   13450:	ldr	r3, [r7, #12]
   13454:	cmp	r4, r3
   13458:	streq	r5, [r7, #12]
   1345c:	strne	r5, [r7, #8]
   13460:	pop	{r4, r5, r6, r7, r8, pc}
   13464:	bl	46f4 <free@plt>
   13468:	b	133fc <rb_patricia_remove+0x44>
   1346c:	ldr	r5, [r1, #8]
   13470:	cmp	r5, #0
   13474:	bne	1340c <rb_patricia_remove+0x54>
   13478:	ldr	r0, [r1, #4]
   1347c:	ldr	r5, [r1, #16]
   13480:	cmp	r0, #0
   13484:	beq	1349c <rb_patricia_remove+0xe4>
   13488:	ldr	r3, [r0, #4]
   1348c:	sub	r3, r3, #1
   13490:	cmp	r3, #0
   13494:	str	r3, [r0, #4]
   13498:	ble	1352c <rb_patricia_remove+0x174>
   1349c:	mov	r0, r4
   134a0:	bl	46f4 <free@plt>
   134a4:	ldr	r3, [r6, #8]
   134a8:	cmp	r5, #0
   134ac:	sub	r3, r3, #1
   134b0:	str	r3, [r6, #8]
   134b4:	beq	13524 <rb_patricia_remove+0x16c>
   134b8:	ldr	r3, [r5, #12]
   134bc:	cmp	r4, r3
   134c0:	movne	r2, #0
   134c4:	strne	r2, [r5, #8]
   134c8:	ldr	r2, [r5, #4]
   134cc:	moveq	r3, #0
   134d0:	streq	r3, [r5, #12]
   134d4:	ldreq	r3, [r5, #8]
   134d8:	cmp	r2, #0
   134dc:	popne	{r4, r5, r6, r7, r8, pc}
   134e0:	ldr	r2, [r5, #16]
   134e4:	cmp	r2, #0
   134e8:	streq	r3, [r6]
   134ec:	beq	13500 <rb_patricia_remove+0x148>
   134f0:	ldr	r1, [r2, #12]
   134f4:	cmp	r5, r1
   134f8:	streq	r3, [r2, #12]
   134fc:	strne	r3, [r2, #8]
   13500:	str	r2, [r3, #16]
   13504:	mov	r0, r5
   13508:	bl	46f4 <free@plt>
   1350c:	ldr	r3, [r6, #8]
   13510:	sub	r3, r3, #1
   13514:	str	r3, [r6, #8]
   13518:	pop	{r4, r5, r6, r7, r8, pc}
   1351c:	bl	46f4 <free@plt>
   13520:	b	13434 <rb_patricia_remove+0x7c>
   13524:	str	r5, [r6]
   13528:	pop	{r4, r5, r6, r7, r8, pc}
   1352c:	bl	46f4 <free@plt>
   13530:	b	1349c <rb_patricia_remove+0xe4>

00013534 <make_and_lookup_ip>:
   13534:	push	{r4, r5, r6, lr}
   13538:	mov	r5, r0
   1353c:	ldrh	r0, [r1]
   13540:	cmp	r0, #10
   13544:	addeq	r1, r1, #8
   13548:	addne	r1, r1, #4
   1354c:	bl	12ac4 <New_Prefix2.constprop.1>
   13550:	subs	r4, r0, #0
   13554:	beq	13594 <make_and_lookup_ip+0x60>
   13558:	mov	r0, r5
   1355c:	mov	r1, r4
   13560:	bl	48f8 <rb_patricia_lookup@plt>
   13564:	ldr	r3, [r4, #4]
   13568:	sub	r3, r3, #1
   1356c:	cmp	r3, #0
   13570:	strgt	r3, [r4, #4]
   13574:	mov	r5, r0
   13578:	ble	13584 <make_and_lookup_ip+0x50>
   1357c:	mov	r0, r5
   13580:	pop	{r4, r5, r6, pc}
   13584:	mov	r0, r4
   13588:	bl	46f4 <free@plt>
   1358c:	mov	r0, r5
   13590:	pop	{r4, r5, r6, pc}
   13594:	mov	r5, r4
   13598:	b	1357c <make_and_lookup_ip+0x48>

0001359c <make_and_lookup>:
   1359c:	push	{r4, r5, r6, lr}
   135a0:	mov	r5, r0
   135a4:	mov	r0, #2
   135a8:	mov	r6, r1
   135ac:	bl	12b64 <ascii2prefix>
   135b0:	subs	r4, r0, #0
   135b4:	beq	135f4 <make_and_lookup+0x58>
   135b8:	mov	r0, r5
   135bc:	mov	r1, r4
   135c0:	bl	48f8 <rb_patricia_lookup@plt>
   135c4:	ldr	r3, [r4, #4]
   135c8:	sub	r3, r3, #1
   135cc:	cmp	r3, #0
   135d0:	strgt	r3, [r4, #4]
   135d4:	mov	r5, r0
   135d8:	ble	135e4 <make_and_lookup+0x48>
   135dc:	mov	r0, r5
   135e0:	pop	{r4, r5, r6, pc}
   135e4:	mov	r0, r4
   135e8:	bl	46f4 <free@plt>
   135ec:	mov	r0, r5
   135f0:	pop	{r4, r5, r6, pc}
   135f4:	mov	r1, r6
   135f8:	mov	r0, #10
   135fc:	bl	12b64 <ascii2prefix>
   13600:	subs	r4, r0, #0
   13604:	bne	135b8 <make_and_lookup+0x1c>
   13608:	mov	r5, r4
   1360c:	b	135dc <make_and_lookup+0x40>

00013610 <rb_match_ip>:
   13610:	push	{r4, r5, r6, lr}
   13614:	mov	r5, r0
   13618:	ldrh	r0, [r1]
   1361c:	cmp	r0, #10
   13620:	addeq	r1, r1, #8
   13624:	moveq	r2, #128	; 0x80
   13628:	addne	r1, r1, #4
   1362c:	movne	r2, #32
   13630:	movne	r0, #2
   13634:	bl	12ac4 <New_Prefix2.constprop.1>
   13638:	subs	r4, r0, #0
   1363c:	beq	1367c <rb_match_ip+0x6c>
   13640:	mov	r0, r5
   13644:	mov	r1, r4
   13648:	bl	4550 <rb_patricia_search_best@plt>
   1364c:	ldr	r3, [r4, #4]
   13650:	sub	r3, r3, #1
   13654:	cmp	r3, #0
   13658:	strgt	r3, [r4, #4]
   1365c:	mov	r5, r0
   13660:	ble	1366c <rb_match_ip+0x5c>
   13664:	mov	r0, r5
   13668:	pop	{r4, r5, r6, pc}
   1366c:	mov	r0, r4
   13670:	bl	46f4 <free@plt>
   13674:	mov	r0, r5
   13678:	pop	{r4, r5, r6, pc}
   1367c:	mov	r5, r4
   13680:	b	13664 <rb_match_ip+0x54>

00013684 <rb_match_ip_exact>:
   13684:	push	{r4, r5, r6, lr}
   13688:	mov	r5, r0
   1368c:	ldrh	r0, [r1]
   13690:	cmp	r0, #10
   13694:	beq	136e0 <rb_match_ip_exact+0x5c>
   13698:	cmp	r2, #32
   1369c:	movcs	r2, #32
   136a0:	add	r1, r1, #4
   136a4:	mov	r0, #2
   136a8:	bl	12ac4 <New_Prefix2.constprop.1>
   136ac:	subs	r4, r0, #0
   136b0:	beq	13700 <rb_match_ip_exact+0x7c>
   136b4:	mov	r0, r5
   136b8:	mov	r1, r4
   136bc:	bl	48b0 <rb_patricia_search_exact@plt>
   136c0:	ldr	r3, [r4, #4]
   136c4:	sub	r3, r3, #1
   136c8:	cmp	r3, #0
   136cc:	strgt	r3, [r4, #4]
   136d0:	mov	r5, r0
   136d4:	ble	136f0 <rb_match_ip_exact+0x6c>
   136d8:	mov	r0, r5
   136dc:	pop	{r4, r5, r6, pc}
   136e0:	cmp	r2, #128	; 0x80
   136e4:	movcs	r2, #128	; 0x80
   136e8:	add	r1, r1, #8
   136ec:	b	136a8 <rb_match_ip_exact+0x24>
   136f0:	mov	r0, r4
   136f4:	bl	46f4 <free@plt>
   136f8:	mov	r0, r5
   136fc:	pop	{r4, r5, r6, pc}
   13700:	mov	r5, r4
   13704:	b	136d8 <rb_match_ip_exact+0x54>

00013708 <rb_match_string>:
   13708:	push	{r4, r5, r6, lr}
   1370c:	mov	r5, r0
   13710:	mov	r0, #2
   13714:	mov	r6, r1
   13718:	bl	12b64 <ascii2prefix>
   1371c:	subs	r4, r0, #0
   13720:	beq	13750 <rb_match_string+0x48>
   13724:	mov	r0, r5
   13728:	mov	r1, r4
   1372c:	bl	4550 <rb_patricia_search_best@plt>
   13730:	ldr	r3, [r4, #4]
   13734:	sub	r3, r3, #1
   13738:	cmp	r3, #0
   1373c:	str	r3, [r4, #4]
   13740:	mov	r5, r0
   13744:	ble	13788 <rb_match_string+0x80>
   13748:	mov	r0, r5
   1374c:	pop	{r4, r5, r6, pc}
   13750:	mov	r1, r6
   13754:	mov	r0, #10
   13758:	bl	12b64 <ascii2prefix>
   1375c:	subs	r4, r0, #0
   13760:	beq	13798 <rb_match_string+0x90>
   13764:	mov	r0, r5
   13768:	mov	r1, r4
   1376c:	bl	4550 <rb_patricia_search_best@plt>
   13770:	ldr	r3, [r4, #4]
   13774:	sub	r3, r3, #1
   13778:	cmp	r3, #0
   1377c:	strgt	r3, [r4, #4]
   13780:	mov	r5, r0
   13784:	bgt	13748 <rb_match_string+0x40>
   13788:	mov	r0, r4
   1378c:	bl	46f4 <free@plt>
   13790:	mov	r0, r5
   13794:	pop	{r4, r5, r6, pc}
   13798:	mov	r5, r4
   1379c:	b	13748 <rb_match_string+0x40>

000137a0 <rb_match_exact_string>:
   137a0:	push	{r4, r5, r6, lr}
   137a4:	mov	r5, r0
   137a8:	mov	r0, #2
   137ac:	mov	r6, r1
   137b0:	bl	12b64 <ascii2prefix>
   137b4:	subs	r4, r0, #0
   137b8:	beq	137e8 <rb_match_exact_string+0x48>
   137bc:	mov	r0, r5
   137c0:	mov	r1, r4
   137c4:	bl	48b0 <rb_patricia_search_exact@plt>
   137c8:	ldr	r3, [r4, #4]
   137cc:	sub	r3, r3, #1
   137d0:	cmp	r3, #0
   137d4:	str	r3, [r4, #4]
   137d8:	mov	r5, r0
   137dc:	ble	13820 <rb_match_exact_string+0x80>
   137e0:	mov	r0, r5
   137e4:	pop	{r4, r5, r6, pc}
   137e8:	mov	r1, r6
   137ec:	mov	r0, #10
   137f0:	bl	12b64 <ascii2prefix>
   137f4:	subs	r4, r0, #0
   137f8:	beq	13830 <rb_match_exact_string+0x90>
   137fc:	mov	r0, r5
   13800:	mov	r1, r4
   13804:	bl	48b0 <rb_patricia_search_exact@plt>
   13808:	ldr	r3, [r4, #4]
   1380c:	sub	r3, r3, #1
   13810:	cmp	r3, #0
   13814:	strgt	r3, [r4, #4]
   13818:	mov	r5, r0
   1381c:	bgt	137e0 <rb_match_exact_string+0x40>
   13820:	mov	r0, r4
   13824:	bl	46f4 <free@plt>
   13828:	mov	r0, r5
   1382c:	pop	{r4, r5, r6, pc}
   13830:	mov	r5, r4
   13834:	b	137e0 <rb_match_exact_string+0x40>

00013838 <stats_recurse>:
   13838:	push	{r4, r5, r6, r7, r8, lr}
   1383c:	mov	r5, r0
   13840:	mov	r4, r1
   13844:	mov	r6, r2
   13848:	mov	r7, #0
   1384c:	b	1387c <stats_recurse+0x44>
   13850:	ldr	r3, [r5]
   13854:	subs	r0, r3, #0
   13858:	moveq	r0, r4
   1385c:	beq	13868 <stats_recurse+0x30>
   13860:	bl	13838 <stats_recurse>
   13864:	add	r0, r4, r0
   13868:	ldr	r5, [r5, #4]
   1386c:	add	r4, r4, #1
   13870:	cmp	r5, #0
   13874:	beq	138a0 <stats_recurse+0x68>
   13878:	add	r7, r7, r0
   1387c:	ldr	r3, [r6]
   13880:	mov	r2, r6
   13884:	cmp	r3, r4
   13888:	strlt	r4, [r6]
   1388c:	cmp	r5, #0
   13890:	add	r1, r4, #1
   13894:	bne	13850 <stats_recurse+0x18>
   13898:	add	r0, r4, r7
   1389c:	pop	{r4, r5, r6, r7, r8, pc}
   138a0:	mov	r4, r0
   138a4:	add	r0, r4, r7
   138a8:	pop	{r4, r5, r6, r7, r8, pc}

000138ac <rb_dictionary_retune.isra.1>:
   138ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   138b0:	sub	sp, sp, #36	; 0x24
   138b4:	ldr	r4, [r1]
   138b8:	cmp	r4, #0
   138bc:	beq	139c4 <rb_dictionary_retune.isra.1+0x118>
   138c0:	add	r8, sp, #32
   138c4:	mov	r3, #0
   138c8:	str	r3, [r8, #-28]!	; 0xffffffe4
   138cc:	mov	r6, r2
   138d0:	mov	r5, r0
   138d4:	mov	r9, r1
   138d8:	mov	r7, r8
   138dc:	str	r3, [sp, #8]
   138e0:	ldr	r3, [r5]
   138e4:	ldr	r1, [r4, #20]
   138e8:	mov	r0, r6
   138ec:	blx	r3
   138f0:	cmp	r0, #0
   138f4:	beq	139cc <rb_dictionary_retune.isra.1+0x120>
   138f8:	blt	1394c <rb_dictionary_retune.isra.1+0xa0>
   138fc:	ldr	r3, [r4, #4]
   13900:	cmp	r3, #0
   13904:	beq	139cc <rb_dictionary_retune.isra.1+0x120>
   13908:	ldr	r1, [r3, #20]
   1390c:	mov	r0, r6
   13910:	ldr	r3, [r5]
   13914:	blx	r3
   13918:	cmp	r0, #0
   1391c:	ble	13980 <rb_dictionary_retune.isra.1+0xd4>
   13920:	ldr	r3, [r4, #4]
   13924:	ldr	r2, [r3]
   13928:	str	r2, [r4, #4]
   1392c:	ldr	r2, [r3, #4]
   13930:	str	r4, [r3]
   13934:	cmp	r2, #0
   13938:	beq	139d4 <rb_dictionary_retune.isra.1+0x128>
   1393c:	str	r3, [r7, #4]
   13940:	mov	r7, r3
   13944:	ldr	r4, [r3, #4]
   13948:	b	138e0 <rb_dictionary_retune.isra.1+0x34>
   1394c:	ldr	r2, [r4]
   13950:	cmp	r2, #0
   13954:	beq	139a8 <rb_dictionary_retune.isra.1+0xfc>
   13958:	ldr	r1, [r2, #20]
   1395c:	ldr	r3, [r5]
   13960:	mov	r0, r6
   13964:	blx	r3
   13968:	cmp	r0, #0
   1396c:	blt	13988 <rb_dictionary_retune.isra.1+0xdc>
   13970:	str	r4, [r8]
   13974:	mov	r8, r4
   13978:	ldr	r4, [r4]
   1397c:	b	138e0 <rb_dictionary_retune.isra.1+0x34>
   13980:	mov	r3, r4
   13984:	b	1393c <rb_dictionary_retune.isra.1+0x90>
   13988:	ldr	r3, [r4]
   1398c:	ldr	r2, [r3, #4]
   13990:	str	r2, [r4]
   13994:	ldr	r2, [r3]
   13998:	str	r4, [r3, #4]
   1399c:	cmp	r2, #0
   139a0:	mov	r4, r3
   139a4:	bne	13970 <rb_dictionary_retune.isra.1+0xc4>
   139a8:	str	r2, [r7, #4]
   139ac:	ldr	r3, [r4, #4]
   139b0:	ldr	r2, [sp, #8]
   139b4:	str	r3, [r8]
   139b8:	ldr	r3, [sp, #4]
   139bc:	stm	r4, {r2, r3}
   139c0:	str	r4, [r9]
   139c4:	add	sp, sp, #36	; 0x24
   139c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   139cc:	ldr	r2, [r4]
   139d0:	b	139a8 <rb_dictionary_retune.isra.1+0xfc>
   139d4:	mov	r2, r4
   139d8:	mov	r4, r3
   139dc:	b	139a8 <rb_dictionary_retune.isra.1+0xfc>

000139e0 <rb_dictionary_create>:
   139e0:	push	{r4, r5, r6, r7, r8, lr}
   139e4:	mov	r5, r0
   139e8:	mov	r6, r1
   139ec:	mov	r0, #1
   139f0:	mov	r1, #40	; 0x28
   139f4:	bl	45ec <calloc@plt>
   139f8:	subs	r4, r0, #0
   139fc:	beq	13a7c <rb_dictionary_create+0x9c>
   13a00:	str	r6, [r4]
   13a04:	mov	r0, r5
   13a08:	bl	47e4 <strlen@plt>
   13a0c:	add	r6, r0, #1
   13a10:	mov	r0, r6
   13a14:	bl	49ac <malloc@plt>
   13a18:	subs	r7, r0, #0
   13a1c:	beq	13a7c <rb_dictionary_create+0x9c>
   13a20:	mov	r2, r6
   13a24:	mov	r1, r5
   13a28:	bl	4808 <memcpy@plt>
   13a2c:	ldr	r2, [pc, #92]	; 13a90 <rb_dictionary_create+0xb0>
   13a30:	mov	r1, #0
   13a34:	add	r2, pc, r2
   13a38:	str	r1, [r4, #32]
   13a3c:	ldr	r3, [r2]
   13a40:	str	r7, [r4, #20]
   13a44:	cmp	r3, r1
   13a48:	add	r1, r4, #28
   13a4c:	str	r4, [r4, #28]
   13a50:	str	r3, [r4, #36]	; 0x24
   13a54:	strne	r1, [r3, #4]
   13a58:	beq	13a80 <rb_dictionary_create+0xa0>
   13a5c:	ldr	r3, [pc, #48]	; 13a94 <rb_dictionary_create+0xb4>
   13a60:	mov	r0, r4
   13a64:	add	r3, pc, r3
   13a68:	ldr	r2, [r3, #8]
   13a6c:	str	r1, [r3]
   13a70:	add	r2, r2, #1
   13a74:	str	r2, [r3, #8]
   13a78:	pop	{r4, r5, r6, r7, r8, pc}
   13a7c:	bl	4988 <rb_outofmemory@plt>
   13a80:	ldr	r3, [r2, #4]
   13a84:	cmp	r3, #0
   13a88:	streq	r1, [r2, #4]
   13a8c:	b	13a5c <rb_dictionary_create+0x7c>
   13a90:	.word	0x000324e8
   13a94:	.word	0x000324b8

00013a98 <rb_dictionary_set_comparator_func>:
   13a98:	str	r1, [r0]
   13a9c:	bx	lr

00013aa0 <rb_dictionary_get_comparator_func>:
   13aa0:	ldr	r0, [r0]
   13aa4:	bx	lr

00013aa8 <rb_dictionary_destroy>:
   13aa8:	push	{r4, r5, r6, r7, r8, lr}
   13aac:	mov	r8, r0
   13ab0:	ldr	r5, [r0, #8]
   13ab4:	cmp	r5, #0
   13ab8:	beq	13af8 <rb_dictionary_destroy+0x50>
   13abc:	mov	r6, r1
   13ac0:	mov	r7, r2
   13ac4:	ldr	r4, [r5, #12]
   13ac8:	b	13ad4 <rb_dictionary_destroy+0x2c>
   13acc:	mov	r5, r4
   13ad0:	ldr	r4, [r4, #12]
   13ad4:	cmp	r6, #0
   13ad8:	mov	r1, r7
   13adc:	mov	r0, r5
   13ae0:	beq	13ae8 <rb_dictionary_destroy+0x40>
   13ae4:	blx	r6
   13ae8:	mov	r0, r5
   13aec:	bl	46f4 <free@plt>
   13af0:	cmp	r4, #0
   13af4:	bne	13acc <rb_dictionary_destroy+0x24>
   13af8:	ldr	r3, [r8, #36]	; 0x24
   13afc:	cmp	r3, #0
   13b00:	beq	13b58 <rb_dictionary_destroy+0xb0>
   13b04:	ldr	r2, [r8, #32]
   13b08:	str	r2, [r3, #4]
   13b0c:	ldr	r2, [r8, #32]
   13b10:	cmp	r2, #0
   13b14:	strne	r3, [r2, #8]
   13b18:	beq	13b74 <rb_dictionary_destroy+0xcc>
   13b1c:	ldr	r1, [pc, #96]	; 13b84 <rb_dictionary_destroy+0xdc>
   13b20:	ldr	r0, [r8, #20]
   13b24:	add	r1, pc, r1
   13b28:	mov	r2, #0
   13b2c:	ldr	r3, [r1, #8]
   13b30:	cmp	r0, r2
   13b34:	sub	r3, r3, #1
   13b38:	str	r3, [r1, #8]
   13b3c:	str	r2, [r8, #32]
   13b40:	str	r2, [r8, #36]	; 0x24
   13b44:	beq	13b4c <rb_dictionary_destroy+0xa4>
   13b48:	bl	46f4 <free@plt>
   13b4c:	mov	r0, r8
   13b50:	pop	{r4, r5, r6, r7, r8, lr}
   13b54:	b	46f4 <free@plt>
   13b58:	ldr	r1, [pc, #40]	; 13b88 <rb_dictionary_destroy+0xe0>
   13b5c:	ldr	r2, [r8, #32]
   13b60:	add	r1, pc, r1
   13b64:	cmp	r2, #0
   13b68:	str	r2, [r1, #4]
   13b6c:	strne	r3, [r2, #8]
   13b70:	bne	13b1c <rb_dictionary_destroy+0x74>
   13b74:	ldr	r2, [pc, #16]	; 13b8c <rb_dictionary_destroy+0xe4>
   13b78:	add	r2, pc, r2
   13b7c:	str	r3, [r2]
   13b80:	b	13b1c <rb_dictionary_destroy+0x74>
   13b84:	.word	0x000323f8
   13b88:	.word	0x000323bc
   13b8c:	.word	0x000323a4

00013b90 <rb_dictionary_foreach>:
   13b90:	ldr	r0, [r0, #8]
   13b94:	cmp	r0, #0
   13b98:	bxeq	lr
   13b9c:	push	{r4, r5, r6, lr}
   13ba0:	mov	r6, r2
   13ba4:	ldr	r4, [r0, #12]
   13ba8:	mov	r5, r1
   13bac:	cmp	r5, #0
   13bb0:	mov	r1, r6
   13bb4:	beq	13bbc <rb_dictionary_foreach+0x2c>
   13bb8:	blx	r5
   13bbc:	cmp	r4, #0
   13bc0:	popeq	{r4, r5, r6, pc}
   13bc4:	mov	r0, r4
   13bc8:	ldr	r4, [r4, #12]
   13bcc:	b	13bac <rb_dictionary_foreach+0x1c>

00013bd0 <rb_dictionary_search>:
   13bd0:	ldr	r0, [r0, #8]
   13bd4:	cmp	r0, #0
   13bd8:	beq	13c24 <rb_dictionary_search+0x54>
   13bdc:	push	{r4, r5, r6, lr}
   13be0:	mov	r6, r2
   13be4:	mov	r5, r1
   13be8:	ldr	r4, [r0, #12]
   13bec:	b	13bf8 <rb_dictionary_search+0x28>
   13bf0:	mov	r0, r4
   13bf4:	ldr	r4, [r4, #12]
   13bf8:	cmp	r5, #0
   13bfc:	mov	r1, r6
   13c00:	beq	13c10 <rb_dictionary_search+0x40>
   13c04:	blx	r5
   13c08:	cmp	r0, #0
   13c0c:	bne	13c20 <rb_dictionary_search+0x50>
   13c10:	cmp	r4, #0
   13c14:	bne	13bf0 <rb_dictionary_search+0x20>
   13c18:	mov	r0, #0
   13c1c:	pop	{r4, r5, r6, pc}
   13c20:	pop	{r4, r5, r6, pc}
   13c24:	mov	r0, #0
   13c28:	bx	lr

00013c2c <rb_dictionary_foreach_cur>:
   13c2c:	ldr	r0, [r1]
   13c30:	cmp	r0, #0
   13c34:	ldrne	r0, [r0, #16]
   13c38:	bx	lr

00013c3c <rb_dictionary_foreach_next>:
   13c3c:	ldr	r3, [r1]
   13c40:	cmp	r3, #0
   13c44:	beq	13c60 <rb_dictionary_foreach_next+0x24>
   13c48:	ldr	r3, [r1, #4]
   13c4c:	cmp	r3, #0
   13c50:	str	r3, [r1]
   13c54:	ldrne	r3, [r3, #12]
   13c58:	strne	r3, [r1, #4]
   13c5c:	bx	lr
   13c60:	mov	r1, r0
   13c64:	ldr	r0, [pc, #4]	; 13c70 <rb_dictionary_foreach_next+0x34>
   13c68:	add	r0, pc, r0
   13c6c:	b	491c <rb_lib_log@plt>
   13c70:	.word	0x0000301c

00013c74 <rb_dictionary_foreach_start>:
   13c74:	ldr	r2, [r0, #8]
   13c78:	mov	ip, #0
   13c7c:	cmp	r2, #0
   13c80:	stm	r1, {r2, ip}
   13c84:	bxeq	lr
   13c88:	str	r2, [r1, #4]
   13c8c:	b	46dc <rb_dictionary_foreach_next@plt>

00013c90 <rb_dictionary_find>:
   13c90:	push	{r4, r5, r6, lr}
   13c94:	mov	r4, r0
   13c98:	mov	r2, r1
   13c9c:	mov	r5, r1
   13ca0:	add	r1, r0, #4
   13ca4:	bl	138ac <rb_dictionary_retune.isra.1>
   13ca8:	ldr	r3, [r4, #4]
   13cac:	cmp	r3, #0
   13cb0:	beq	13cd4 <rb_dictionary_find+0x44>
   13cb4:	ldr	r1, [r3, #20]
   13cb8:	mov	r0, r5
   13cbc:	ldr	r3, [r4]
   13cc0:	blx	r3
   13cc4:	cmp	r0, #0
   13cc8:	bne	13cd4 <rb_dictionary_find+0x44>
   13ccc:	ldr	r0, [r4, #4]
   13cd0:	pop	{r4, r5, r6, pc}
   13cd4:	mov	r0, #0
   13cd8:	pop	{r4, r5, r6, pc}

00013cdc <rb_dictionary_get_linear_index>:
   13cdc:	push	{r4, lr}
   13ce0:	mov	r4, r0
   13ce4:	bl	4a30 <rb_dictionary_find@plt>
   13ce8:	cmp	r0, #0
   13cec:	beq	13d34 <rb_dictionary_get_linear_index+0x58>
   13cf0:	ldrb	r3, [r4, #24]
   13cf4:	tst	r3, #1
   13cf8:	beq	13d2c <rb_dictionary_get_linear_index+0x50>
   13cfc:	ldr	r3, [r4, #8]
   13d00:	cmp	r3, #0
   13d04:	movne	r2, #0
   13d08:	beq	13d20 <rb_dictionary_get_linear_index+0x44>
   13d0c:	str	r2, [r3, #24]
   13d10:	ldr	r3, [r3, #12]
   13d14:	add	r2, r2, #1
   13d18:	cmp	r3, #0
   13d1c:	bne	13d0c <rb_dictionary_get_linear_index+0x30>
   13d20:	ldrb	r3, [r4, #24]
   13d24:	bic	r3, r3, #1
   13d28:	strb	r3, [r4, #24]
   13d2c:	ldr	r0, [r0, #24]
   13d30:	pop	{r4, pc}
   13d34:	mvn	r0, #0
   13d38:	pop	{r4, pc}

00013d3c <rb_dictionary_add>:
   13d3c:	push	{r4, r5, r6, r7, r8, lr}
   13d40:	mov	r4, r0
   13d44:	mov	r6, r1
   13d48:	mov	r0, #1
   13d4c:	mov	r1, #28
   13d50:	mov	r7, r2
   13d54:	bl	45ec <calloc@plt>
   13d58:	subs	r5, r0, #0
   13d5c:	beq	13e98 <rb_dictionary_add+0x15c>
   13d60:	ldrb	r1, [r4, #24]
   13d64:	ldr	r3, [r4, #16]
   13d68:	ldr	r0, [r4, #4]
   13d6c:	orr	r1, r1, #1
   13d70:	add	r3, r3, #1
   13d74:	cmp	r0, #0
   13d78:	str	r6, [r5, #20]
   13d7c:	str	r7, [r5, #16]
   13d80:	strb	r1, [r4, #24]
   13d84:	str	r3, [r4, #16]
   13d88:	beq	13e30 <rb_dictionary_add+0xf4>
   13d8c:	mov	r2, r6
   13d90:	add	r1, r4, #4
   13d94:	mov	r0, r4
   13d98:	bl	138ac <rb_dictionary_retune.isra.1>
   13d9c:	ldr	r2, [r4, #4]
   13da0:	ldr	r3, [r4]
   13da4:	ldr	r0, [r5, #20]
   13da8:	ldr	r1, [r2, #20]
   13dac:	blx	r3
   13db0:	cmp	r0, #0
   13db4:	blt	13e58 <rb_dictionary_add+0x11c>
   13db8:	beq	13e00 <rb_dictionary_add+0xc4>
   13dbc:	ldr	r3, [r4, #4]
   13dc0:	mov	r1, #0
   13dc4:	mov	r6, r5
   13dc8:	ldr	r2, [r3, #12]
   13dcc:	ldr	r0, [r3, #4]
   13dd0:	cmp	r2, r1
   13dd4:	str	r0, [r5, #4]
   13dd8:	str	r3, [r5]
   13ddc:	mov	r0, r6
   13de0:	str	r1, [r3, #4]
   13de4:	strne	r5, [r2, #8]
   13de8:	streq	r5, [r4, #12]
   13dec:	str	r2, [r5, #12]
   13df0:	str	r3, [r5, #8]
   13df4:	str	r5, [r3, #12]
   13df8:	str	r5, [r4, #4]
   13dfc:	pop	{r4, r5, r6, r7, r8, pc}
   13e00:	ldr	r3, [r4, #16]
   13e04:	ldr	r6, [r4, #4]
   13e08:	ldr	r1, [r5, #20]
   13e0c:	ldr	r2, [r5, #16]
   13e10:	sub	r3, r3, #1
   13e14:	str	r1, [r6, #20]
   13e18:	str	r2, [r6, #16]
   13e1c:	mov	r0, r5
   13e20:	str	r3, [r4, #16]
   13e24:	bl	46f4 <free@plt>
   13e28:	mov	r0, r6
   13e2c:	pop	{r4, r5, r6, r7, r8, pc}
   13e30:	mov	r6, r5
   13e34:	str	r0, [r5, #4]
   13e38:	str	r0, [r5]
   13e3c:	str	r0, [r5, #8]
   13e40:	str	r0, [r5, #12]
   13e44:	str	r5, [r4, #4]
   13e48:	str	r5, [r4, #12]
   13e4c:	str	r5, [r4, #8]
   13e50:	mov	r0, r6
   13e54:	pop	{r4, r5, r6, r7, r8, pc}
   13e58:	ldr	r3, [r4, #4]
   13e5c:	mov	r1, #0
   13e60:	mov	r6, r5
   13e64:	ldr	r2, [r3, #8]
   13e68:	ldr	r0, [r3]
   13e6c:	cmp	r2, r1
   13e70:	stm	r5, {r0, r3}
   13e74:	str	r1, [r3]
   13e78:	mov	r0, r6
   13e7c:	strne	r5, [r2, #12]
   13e80:	streq	r5, [r4, #8]
   13e84:	str	r2, [r5, #8]
   13e88:	str	r3, [r5, #12]
   13e8c:	str	r5, [r3, #8]
   13e90:	str	r5, [r4, #4]
   13e94:	pop	{r4, r5, r6, r7, r8, pc}
   13e98:	bl	4988 <rb_outofmemory@plt>

00013e9c <rb_dictionary_delete>:
   13e9c:	push	{r4, r5, r6, lr}
   13ea0:	mov	r4, r0
   13ea4:	bl	4a30 <rb_dictionary_find@plt>
   13ea8:	cmp	r0, #0
   13eac:	beq	13f90 <rb_dictionary_delete+0xf4>
   13eb0:	ldrb	r3, [r4, #24]
   13eb4:	ldr	ip, [r4, #4]
   13eb8:	ldr	r5, [r0, #16]
   13ebc:	orr	r3, r3, #1
   13ec0:	cmp	ip, #0
   13ec4:	strb	r3, [r4, #24]
   13ec8:	beq	13f68 <rb_dictionary_delete+0xcc>
   13ecc:	ldr	r3, [ip]
   13ed0:	cmp	r3, #0
   13ed4:	beq	13f74 <rb_dictionary_delete+0xd8>
   13ed8:	ldr	lr, [ip, #4]
   13edc:	cmp	lr, #0
   13ee0:	beq	13f84 <rb_dictionary_delete+0xe8>
   13ee4:	ldr	r2, [ip, #12]
   13ee8:	cmp	lr, r2
   13eec:	streq	r2, [r4, #4]
   13ef0:	movne	r1, lr
   13ef4:	streq	r3, [r2]
   13ef8:	bne	13f04 <rb_dictionary_delete+0x68>
   13efc:	b	13f28 <rb_dictionary_delete+0x8c>
   13f00:	mov	r1, r3
   13f04:	ldr	r3, [r1]
   13f08:	cmp	r3, #0
   13f0c:	cmpne	r2, r3
   13f10:	bne	13f00 <rb_dictionary_delete+0x64>
   13f14:	ldr	r3, [r2, #4]
   13f18:	str	r3, [r1]
   13f1c:	ldr	r3, [ip]
   13f20:	str	r2, [r4, #4]
   13f24:	stm	r2, {r3, lr}
   13f28:	ldr	r3, [ip, #8]
   13f2c:	ldr	r1, [r4, #8]
   13f30:	cmp	r3, #0
   13f34:	strne	r2, [r3, #12]
   13f38:	ldrne	r2, [ip, #12]
   13f3c:	cmp	ip, r1
   13f40:	streq	r2, [r4, #8]
   13f44:	cmp	r2, #0
   13f48:	strne	r3, [r2, #8]
   13f4c:	ldr	r3, [r4, #12]
   13f50:	cmp	ip, r3
   13f54:	ldreq	r3, [ip, #8]
   13f58:	streq	r3, [r4, #12]
   13f5c:	ldr	r3, [r4, #16]
   13f60:	sub	r3, r3, #1
   13f64:	str	r3, [r4, #16]
   13f68:	bl	46f4 <free@plt>
   13f6c:	mov	r0, r5
   13f70:	pop	{r4, r5, r6, pc}
   13f74:	ldr	r3, [ip, #4]
   13f78:	ldr	r2, [ip, #12]
   13f7c:	str	r3, [r4, #4]
   13f80:	b	13f28 <rb_dictionary_delete+0x8c>
   13f84:	str	r3, [r4, #4]
   13f88:	ldr	r2, [ip, #12]
   13f8c:	b	13f28 <rb_dictionary_delete+0x8c>
   13f90:	mov	r5, r0
   13f94:	b	13f6c <rb_dictionary_delete+0xd0>

00013f98 <rb_dictionary_retrieve>:
   13f98:	push	{r4, lr}
   13f9c:	bl	4a30 <rb_dictionary_find@plt>
   13fa0:	cmp	r0, #0
   13fa4:	ldrne	r0, [r0, #16]
   13fa8:	pop	{r4, pc}

00013fac <rb_dictionary_size>:
   13fac:	ldr	r0, [r0, #16]
   13fb0:	bx	lr

00013fb4 <rb_dictionary_stats>:
   13fb4:	ldr	r3, [r0, #16]
   13fb8:	push	{r4, r5, r6, r7, r8, lr}
   13fbc:	cmp	r3, #0
   13fc0:	sub	sp, sp, #288	; 0x120
   13fc4:	mov	r4, r0
   13fc8:	mov	r5, r1
   13fcc:	mov	r6, r2
   13fd0:	bne	14028 <rb_dictionary_stats+0x74>
   13fd4:	ldr	r2, [pc, #172]	; 14088 <rb_dictionary_stats+0xd4>
   13fd8:	ldr	r1, [pc, #172]	; 1408c <rb_dictionary_stats+0xd8>
   13fdc:	add	r2, pc, r2
   13fe0:	ldr	r3, [r0, #20]
   13fe4:	str	r2, [sp, #16]
   13fe8:	str	r2, [sp, #12]
   13fec:	str	r2, [sp, #8]
   13ff0:	str	r2, [sp, #4]
   13ff4:	ldr	r2, [pc, #148]	; 14090 <rb_dictionary_stats+0xdc>
   13ff8:	add	r1, pc, r1
   13ffc:	add	r4, sp, #32
   14000:	str	r1, [sp]
   14004:	mov	r0, r4
   14008:	add	r2, pc, r2
   1400c:	mov	r1, #256	; 0x100
   14010:	bl	4bb0 <snprintf@plt>
   14014:	mov	r1, r6
   14018:	mov	r0, r4
   1401c:	blx	r5
   14020:	add	sp, sp, #288	; 0x120
   14024:	pop	{r4, r5, r6, r7, r8, pc}
   14028:	add	r2, sp, #288	; 0x120
   1402c:	mov	r1, #0
   14030:	str	r1, [r2, #-260]!	; 0xfffffefc
   14034:	ldr	r0, [r0, #4]
   14038:	bl	13838 <stats_recurse>
   1403c:	ldr	r7, [r4, #16]
   14040:	ldr	r3, [sp, #28]
   14044:	mov	r1, r7
   14048:	str	r3, [sp, #16]
   1404c:	mov	r8, r0
   14050:	bl	14e30 <__udivsi3>
   14054:	ldr	r1, [pc, #56]	; 14094 <rb_dictionary_stats+0xe0>
   14058:	ldr	r2, [pc, #56]	; 14098 <rb_dictionary_stats+0xe4>
   1405c:	add	r1, pc, r1
   14060:	ldr	r3, [r4, #20]
   14064:	add	r4, sp, #32
   14068:	stm	sp, {r1, r7}
   1406c:	add	r2, pc, r2
   14070:	str	r8, [sp, #8]
   14074:	mov	r1, #256	; 0x100
   14078:	str	r0, [sp, #12]
   1407c:	mov	r0, r4
   14080:	bl	4bb0 <snprintf@plt>
   14084:	b	14014 <rb_dictionary_stats+0x60>
   14088:	.word	0x00001c90
   1408c:	.word	0x00002d04
   14090:	.word	0x00002cfc
   14094:	.word	0x00002ca0
   14098:	.word	0x00002c6c

0001409c <rb_dictionary_stats_walk>:
   1409c:	ldr	r3, [pc, #52]	; 140d8 <rb_dictionary_stats_walk+0x3c>
   140a0:	push	{r4, r5, r6, lr}
   140a4:	ldr	r4, [pc, r3]
   140a8:	cmp	r4, #0
   140ac:	popeq	{r4, r5, r6, pc}
   140b0:	mov	r6, r0
   140b4:	mov	r5, r1
   140b8:	ldr	r0, [r4]
   140bc:	mov	r2, r5
   140c0:	mov	r1, r6
   140c4:	bl	49a0 <rb_dictionary_stats@plt>
   140c8:	ldr	r4, [r4, #8]
   140cc:	cmp	r4, #0
   140d0:	bne	140b8 <rb_dictionary_stats_walk+0x1c>
   140d4:	pop	{r4, r5, r6, pc}
   140d8:	.word	0x00031e78

000140dc <stats_recurse>:
   140dc:	ldr	r3, [r2]
   140e0:	push	{r4, r5, r6, r7, r8, lr}
   140e4:	cmp	r3, r1
   140e8:	strlt	r1, [r2]
   140ec:	ldr	r3, [r0]
   140f0:	cmn	r3, #1
   140f4:	moveq	r5, r1
   140f8:	beq	14134 <stats_recurse+0x58>
   140fc:	mov	r6, r2
   14100:	mov	r4, r0
   14104:	add	r8, r1, #1
   14108:	add	r7, r0, #64	; 0x40
   1410c:	mov	r5, #0
   14110:	ldr	r3, [r4, #4]!
   14114:	mov	r2, r6
   14118:	subs	r0, r3, #0
   1411c:	mov	r1, r8
   14120:	beq	1412c <stats_recurse+0x50>
   14124:	bl	140dc <stats_recurse>
   14128:	add	r5, r5, r0
   1412c:	cmp	r7, r4
   14130:	bne	14110 <stats_recurse+0x34>
   14134:	mov	r0, r5
   14138:	pop	{r4, r5, r6, r7, r8, pc}

0001413c <rb_radixtree_create>:
   1413c:	push	{r4, r5, r6, r7, r8, lr}
   14140:	mov	r6, r0
   14144:	mov	r7, r1
   14148:	mov	r0, #1
   1414c:	mov	r1, #28
   14150:	bl	45ec <calloc@plt>
   14154:	ldr	r5, [pc, #148]	; 141f0 <rb_radixtree_create+0xb4>
   14158:	add	r5, pc, r5
   1415c:	subs	r4, r0, #0
   14160:	beq	141dc <rb_radixtree_create+0xa0>
   14164:	str	r7, [r4]
   14168:	mov	r0, r6
   1416c:	bl	47e4 <strlen@plt>
   14170:	add	r7, r0, #1
   14174:	mov	r0, r7
   14178:	bl	49ac <malloc@plt>
   1417c:	subs	r8, r0, #0
   14180:	beq	141dc <rb_radixtree_create+0xa0>
   14184:	mov	r2, r7
   14188:	mov	r1, r6
   1418c:	bl	4808 <memcpy@plt>
   14190:	ldr	r3, [pc, #92]	; 141f4 <rb_radixtree_create+0xb8>
   14194:	mov	r2, #0
   14198:	str	r2, [r4, #4]
   1419c:	str	r2, [r4, #20]
   141a0:	str	r8, [r4, #12]
   141a4:	str	r4, [r4, #16]
   141a8:	ldr	r3, [r5, r3]
   141ac:	add	r1, r4, #16
   141b0:	ldr	r2, [r3]
   141b4:	cmp	r2, #0
   141b8:	str	r2, [r4, #24]
   141bc:	strne	r1, [r2, #4]
   141c0:	beq	141e0 <rb_radixtree_create+0xa4>
   141c4:	ldr	r2, [r3, #8]
   141c8:	str	r1, [r3]
   141cc:	add	r2, r2, #1
   141d0:	mov	r0, r4
   141d4:	str	r2, [r3, #8]
   141d8:	pop	{r4, r5, r6, r7, r8, pc}
   141dc:	bl	4988 <rb_outofmemory@plt>
   141e0:	ldr	r2, [r3, #4]
   141e4:	cmp	r2, #0
   141e8:	streq	r1, [r3, #4]
   141ec:	b	141c4 <rb_radixtree_create+0x88>
   141f0:	.word	0x00013ea0
   141f4:	.word	0x000003f4

000141f8 <rb_radixtree_foreach>:
   141f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141fc:	ldr	r6, [r0, #4]
   14200:	cmp	r6, #0
   14204:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14208:	ldr	r3, [r6]
   1420c:	mov	r7, r1
   14210:	cmn	r3, #1
   14214:	beq	142bc <rb_radixtree_foreach+0xc4>
   14218:	mov	r5, #0
   1421c:	mov	r8, r2
   14220:	mov	r9, r5
   14224:	add	r4, r5, #1
   14228:	add	r0, r6, r5, lsl #2
   1422c:	b	14234 <rb_radixtree_foreach+0x3c>
   14230:	add	r4, r4, #1
   14234:	ldr	r3, [r0, #4]!
   14238:	mov	r5, r4
   1423c:	cmp	r4, #15
   14240:	cmple	r3, #0
   14244:	beq	14230 <rb_radixtree_foreach+0x38>
   14248:	cmp	r3, #0
   1424c:	beq	14280 <rb_radixtree_foreach+0x88>
   14250:	ldr	r2, [r3]
   14254:	cmn	r2, #1
   14258:	movne	r5, r9
   1425c:	beq	14268 <rb_radixtree_foreach+0x70>
   14260:	mov	r6, r3
   14264:	b	14224 <rb_radixtree_foreach+0x2c>
   14268:	cmp	r7, #0
   1426c:	beq	14280 <rb_radixtree_foreach+0x88>
   14270:	mov	r2, r8
   14274:	ldr	r1, [r3, #4]
   14278:	ldr	r0, [r3, #8]
   1427c:	blx	r7
   14280:	cmp	r4, #15
   14284:	ble	142dc <rb_radixtree_foreach+0xe4>
   14288:	ldr	r3, [r6, #68]	; 0x44
   1428c:	ldrb	r5, [r6, #72]	; 0x48
   14290:	cmp	r3, #0
   14294:	bne	142ac <rb_radixtree_foreach+0xb4>
   14298:	b	142d8 <rb_radixtree_foreach+0xe0>
   1429c:	ldrb	r5, [r3, #72]	; 0x48
   142a0:	ldr	r3, [r3, #68]	; 0x44
   142a4:	cmp	r3, #0
   142a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   142ac:	add	r5, r5, #1
   142b0:	cmp	r5, #15
   142b4:	bgt	1429c <rb_radixtree_foreach+0xa4>
   142b8:	b	14260 <rb_radixtree_foreach+0x68>
   142bc:	cmp	r1, #0
   142c0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   142c4:	ldr	r1, [r6, #4]
   142c8:	ldr	r0, [r6, #8]
   142cc:	mov	r3, r7
   142d0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   142d4:	bx	r3
   142d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142dc:	mov	r3, r6
   142e0:	b	14260 <rb_radixtree_foreach+0x68>

000142e4 <rb_radixtree_search>:
   142e4:	push	{r4, r5, r6, r7, r8, lr}
   142e8:	ldr	r6, [r0, #4]
   142ec:	cmp	r6, #0
   142f0:	beq	143dc <rb_radixtree_search+0xf8>
   142f4:	mov	r3, r1
   142f8:	ldr	r1, [r6]
   142fc:	cmn	r1, #1
   14300:	beq	143bc <rb_radixtree_search+0xd8>
   14304:	mov	r7, r2
   14308:	mov	r8, r3
   1430c:	mov	r5, #0
   14310:	add	r4, r5, #1
   14314:	add	r2, r6, r5, lsl #2
   14318:	b	14320 <rb_radixtree_search+0x3c>
   1431c:	add	r4, r4, #1
   14320:	ldr	r3, [r2, #4]!
   14324:	mov	r5, r4
   14328:	cmp	r4, #15
   1432c:	cmple	r3, #0
   14330:	moveq	r1, #1
   14334:	movne	r1, #0
   14338:	beq	1431c <rb_radixtree_search+0x38>
   1433c:	cmp	r3, #0
   14340:	beq	1437c <rb_radixtree_search+0x98>
   14344:	ldr	r2, [r3]
   14348:	cmn	r2, #1
   1434c:	movne	r5, r1
   14350:	beq	1435c <rb_radixtree_search+0x78>
   14354:	mov	r6, r3
   14358:	b	14310 <rb_radixtree_search+0x2c>
   1435c:	cmp	r8, #0
   14360:	beq	1437c <rb_radixtree_search+0x98>
   14364:	mov	r2, r7
   14368:	ldr	r1, [r3, #4]
   1436c:	ldr	r0, [r3, #8]
   14370:	blx	r8
   14374:	cmp	r0, #0
   14378:	bne	143b8 <rb_radixtree_search+0xd4>
   1437c:	cmp	r4, #15
   14380:	movle	r3, r6
   14384:	ble	14354 <rb_radixtree_search+0x70>
   14388:	ldr	r3, [r6, #68]	; 0x44
   1438c:	ldrb	r5, [r6, #72]	; 0x48
   14390:	cmp	r3, #0
   14394:	beq	14354 <rb_radixtree_search+0x70>
   14398:	add	r5, r5, #1
   1439c:	cmp	r5, #15
   143a0:	ble	14354 <rb_radixtree_search+0x70>
   143a4:	ldrb	r5, [r3, #72]	; 0x48
   143a8:	ldr	r3, [r3, #68]	; 0x44
   143ac:	cmp	r3, #0
   143b0:	bne	14398 <rb_radixtree_search+0xb4>
   143b4:	b	14354 <rb_radixtree_search+0x70>
   143b8:	pop	{r4, r5, r6, r7, r8, pc}
   143bc:	cmp	r3, #0
   143c0:	beq	143d4 <rb_radixtree_search+0xf0>
   143c4:	ldr	r1, [r6, #4]
   143c8:	ldr	r0, [r6, #8]
   143cc:	pop	{r4, r5, r6, r7, r8, lr}
   143d0:	bx	r3
   143d4:	mov	r0, r3
   143d8:	pop	{r4, r5, r6, r7, r8, pc}
   143dc:	mov	r0, r6
   143e0:	pop	{r4, r5, r6, r7, r8, pc}

000143e4 <rb_radixtree_foreach_cur>:
   143e4:	cmp	r0, #0
   143e8:	bxeq	lr
   143ec:	ldr	r0, [r1, #8]
   143f0:	cmp	r0, #0
   143f4:	ldrne	r0, [r0, #4]
   143f8:	bx	lr

000143fc <rb_radixtree_foreach_next>:
   143fc:	cmp	r0, #0
   14400:	bxeq	lr
   14404:	ldr	r3, [r1, #8]
   14408:	cmp	r3, #0
   1440c:	bxeq	lr
   14410:	push	{r4, r5, r6, lr}
   14414:	ldr	lr, [r1, #12]
   14418:	cmp	lr, #0
   1441c:	str	lr, [r1, #8]
   14420:	popeq	{r4, r5, r6, pc}
   14424:	ldr	r0, [lr, #12]
   14428:	mov	r5, r1
   1442c:	cmp	r0, #0
   14430:	ldrb	r2, [lr, #16]
   14434:	beq	144bc <rb_radixtree_foreach_next+0xc0>
   14438:	mov	ip, #0
   1443c:	add	r3, r2, #1
   14440:	add	r1, r0, r2, lsl #2
   14444:	b	1444c <rb_radixtree_foreach_next+0x50>
   14448:	add	r3, r3, #1
   1444c:	ldr	r4, [r1, #4]!
   14450:	mov	r2, r3
   14454:	cmp	r3, #15
   14458:	cmple	r4, #0
   1445c:	beq	14448 <rb_radixtree_foreach_next+0x4c>
   14460:	cmp	r4, #0
   14464:	beq	14488 <rb_radixtree_foreach_next+0x8c>
   14468:	ldr	r1, [r4]
   1446c:	cmn	r1, #1
   14470:	movne	r2, ip
   14474:	beq	14480 <rb_radixtree_foreach_next+0x84>
   14478:	mov	r0, r4
   1447c:	b	1443c <rb_radixtree_foreach_next+0x40>
   14480:	cmp	lr, r4
   14484:	bne	144c8 <rb_radixtree_foreach_next+0xcc>
   14488:	cmp	r3, #15
   1448c:	ble	144e4 <rb_radixtree_foreach_next+0xe8>
   14490:	ldr	r4, [r0, #68]	; 0x44
   14494:	ldrb	r2, [r0, #72]	; 0x48
   14498:	cmp	r4, #0
   1449c:	beq	144bc <rb_radixtree_foreach_next+0xc0>
   144a0:	add	r2, r2, #1
   144a4:	cmp	r2, #15
   144a8:	ble	14478 <rb_radixtree_foreach_next+0x7c>
   144ac:	ldrb	r2, [r4, #72]	; 0x48
   144b0:	ldr	r4, [r4, #68]	; 0x44
   144b4:	cmp	r4, #0
   144b8:	bne	144a0 <rb_radixtree_foreach_next+0xa4>
   144bc:	mov	r3, #0
   144c0:	str	r3, [r5, #12]
   144c4:	pop	{r4, r5, r6, pc}
   144c8:	ldr	r1, [lr, #8]
   144cc:	ldr	r0, [r4, #8]
   144d0:	bl	4cdc <strcmp@plt>
   144d4:	cmp	r0, #0
   144d8:	blt	144bc <rb_radixtree_foreach_next+0xc0>
   144dc:	str	r4, [r5, #12]
   144e0:	pop	{r4, r5, r6, pc}
   144e4:	mov	r4, r0
   144e8:	b	14478 <rb_radixtree_foreach_next+0x7c>

000144ec <rb_radixtree_foreach_start>:
   144ec:	cmp	r0, #0
   144f0:	bxeq	lr
   144f4:	push	{r4, lr}
   144f8:	ldr	lr, [r0, #4]
   144fc:	cmp	lr, #0
   14500:	beq	14548 <rb_radixtree_foreach_start+0x5c>
   14504:	mov	ip, lr
   14508:	ldr	r4, [ip], #64	; 0x40
   1450c:	cmn	r4, #1
   14510:	beq	14538 <rb_radixtree_foreach_start+0x4c>
   14514:	mov	r3, lr
   14518:	b	14524 <rb_radixtree_foreach_start+0x38>
   1451c:	cmp	r3, ip
   14520:	beq	1450c <rb_radixtree_foreach_start+0x20>
   14524:	ldr	r2, [r3, #4]!
   14528:	cmp	r2, #0
   1452c:	beq	1451c <rb_radixtree_foreach_start+0x30>
   14530:	mov	lr, r2
   14534:	b	14504 <rb_radixtree_foreach_start+0x18>
   14538:	str	lr, [r1, #12]
   1453c:	str	lr, [r1, #8]
   14540:	pop	{r4, lr}
   14544:	b	4448 <rb_radixtree_foreach_next@plt>
   14548:	str	lr, [r1, #12]
   1454c:	str	lr, [r1, #8]
   14550:	pop	{r4, pc}

00014554 <rb_radixtree_elem_find>:
   14554:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14558:	mov	r4, r0
   1455c:	sub	sp, sp, #256	; 0x100
   14560:	mov	r0, r1
   14564:	mov	r8, r1
   14568:	mov	r6, r2
   1456c:	bl	47e4 <strlen@plt>
   14570:	ldr	r9, [r4]
   14574:	cmp	r9, #0
   14578:	mov	r5, r0
   1457c:	beq	145e8 <rb_radixtree_elem_find+0x94>
   14580:	cmp	r0, #255	; 0xff
   14584:	ble	145c4 <rb_radixtree_elem_find+0x70>
   14588:	add	sl, r0, #1
   1458c:	mov	r0, sl
   14590:	bl	49ac <malloc@plt>
   14594:	subs	r7, r0, #0
   14598:	beq	1468c <rb_radixtree_elem_find+0x138>
   1459c:	mov	r1, r8
   145a0:	mov	r2, sl
   145a4:	bl	4808 <memcpy@plt>
   145a8:	mov	r0, r7
   145ac:	blx	r9
   145b0:	ldr	r4, [r4, #4]
   145b4:	cmp	r4, #0
   145b8:	movne	r8, r7
   145bc:	bne	145f8 <rb_radixtree_elem_find+0xa4>
   145c0:	b	14658 <rb_radixtree_elem_find+0x104>
   145c4:	mov	r1, r8
   145c8:	mov	r0, sp
   145cc:	mov	r2, #256	; 0x100
   145d0:	bl	46a0 <rb_strlcpy@plt>
   145d4:	mov	r7, sp
   145d8:	mov	r0, sp
   145dc:	ldr	r3, [r4]
   145e0:	mov	r8, r7
   145e4:	blx	r3
   145e8:	ldr	r4, [r4, #4]
   145ec:	cmp	r4, #0
   145f0:	movne	r7, #0
   145f4:	beq	14660 <rb_radixtree_elem_find+0x10c>
   145f8:	ldr	r3, [r4]
   145fc:	cmn	r3, #1
   14600:	beq	1466c <rb_radixtree_elem_find+0x118>
   14604:	mov	r1, #0
   14608:	b	14618 <rb_radixtree_elem_find+0xc4>
   1460c:	ldr	r3, [r4]
   14610:	cmn	r3, #1
   14614:	beq	1466c <rb_radixtree_elem_find+0x118>
   14618:	add	r2, r3, r3, lsr #31
   1461c:	cmp	r5, r2, asr #1
   14620:	movle	r0, r1
   14624:	ble	14640 <rb_radixtree_elem_find+0xec>
   14628:	ldrb	r0, [r8, r2, asr #1]
   1462c:	tst	r3, #1
   14630:	movne	r3, #0
   14634:	moveq	r3, #4
   14638:	asr	r0, r0, r3
   1463c:	and	r0, r0, #15
   14640:	add	r0, r4, r0, lsl #2
   14644:	ldr	r4, [r0, #4]
   14648:	cmp	r4, #0
   1464c:	bne	1460c <rb_radixtree_elem_find+0xb8>
   14650:	cmp	r7, #0
   14654:	beq	14660 <rb_radixtree_elem_find+0x10c>
   14658:	mov	r0, r7
   1465c:	bl	46f4 <free@plt>
   14660:	mov	r0, r4
   14664:	add	sp, sp, #256	; 0x100
   14668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1466c:	cmp	r6, #0
   14670:	bne	14650 <rb_radixtree_elem_find+0xfc>
   14674:	ldr	r0, [r4, #8]
   14678:	mov	r1, r8
   1467c:	bl	4cdc <strcmp@plt>
   14680:	cmp	r0, #0
   14684:	movne	r4, #0
   14688:	b	14650 <rb_radixtree_elem_find+0xfc>
   1468c:	bl	4988 <rb_outofmemory@plt>

00014690 <rb_radixtree_foreach_start_from>:
   14690:	cmp	r2, #0
   14694:	beq	146cc <rb_radixtree_foreach_start_from+0x3c>
   14698:	push	{r4, r5, r6, lr}
   1469c:	mov	r4, r1
   146a0:	mov	r3, #0
   146a4:	mov	r1, r2
   146a8:	str	r3, [r4, #8]
   146ac:	mov	r2, #1
   146b0:	mov	r5, r0
   146b4:	bl	4b74 <rb_radixtree_elem_find@plt>
   146b8:	mov	r1, r4
   146bc:	str	r0, [r4, #12]
   146c0:	mov	r0, r5
   146c4:	pop	{r4, r5, r6, lr}
   146c8:	b	4448 <rb_radixtree_foreach_next@plt>
   146cc:	b	440c <rb_radixtree_foreach_start@plt>

000146d0 <rb_radixtree_elem_add>:
   146d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d4:	sub	sp, sp, #20
   146d8:	mov	fp, r0
   146dc:	mov	r0, r1
   146e0:	mov	r4, r1
   146e4:	str	r2, [sp, #4]
   146e8:	bl	47e4 <strlen@plt>
   146ec:	add	r5, r0, #1
   146f0:	mov	r7, r0
   146f4:	mov	r0, r5
   146f8:	bl	49ac <malloc@plt>
   146fc:	subs	sl, r0, #0
   14700:	beq	14998 <rb_radixtree_elem_add+0x2c8>
   14704:	mov	r2, r5
   14708:	mov	r1, r4
   1470c:	bl	4808 <memcpy@plt>
   14710:	ldr	r3, [fp]
   14714:	cmp	r3, #0
   14718:	beq	14724 <rb_radixtree_elem_add+0x54>
   1471c:	mov	r0, sl
   14720:	blx	r3
   14724:	ldr	r3, [fp, #4]
   14728:	cmp	r3, #0
   1472c:	mov	r4, r3
   14730:	str	r3, [sp, #8]
   14734:	beq	14a08 <rb_radixtree_elem_add+0x338>
   14738:	ldr	r3, [r3]
   1473c:	cmn	r3, #1
   14740:	beq	14960 <rb_radixtree_elem_add+0x290>
   14744:	mov	r1, #0
   14748:	b	1475c <rb_radixtree_elem_add+0x8c>
   1474c:	ldr	r3, [r6]
   14750:	cmn	r3, #1
   14754:	beq	1496c <rb_radixtree_elem_add+0x29c>
   14758:	mov	r4, r6
   1475c:	add	r2, r3, r3, lsr #31
   14760:	cmp	r7, r2, asr #1
   14764:	movle	r5, r1
   14768:	ble	14784 <rb_radixtree_elem_add+0xb4>
   1476c:	ldrb	r5, [sl, r2, asr #1]
   14770:	tst	r3, #1
   14774:	moveq	r3, #4
   14778:	movne	r3, #0
   1477c:	asr	r5, r5, r3
   14780:	and	r5, r5, #15
   14784:	add	r3, r4, r5, lsl #2
   14788:	ldr	r6, [r3, #4]
   1478c:	cmp	r6, #0
   14790:	bne	1474c <rb_radixtree_elem_add+0x7c>
   14794:	mov	r6, r4
   14798:	mov	r1, r6
   1479c:	ldr	r0, [r1], #64	; 0x40
   147a0:	cmn	r0, #1
   147a4:	beq	147cc <rb_radixtree_elem_add+0xfc>
   147a8:	mov	r3, r6
   147ac:	b	147b8 <rb_radixtree_elem_add+0xe8>
   147b0:	cmp	r1, r3
   147b4:	beq	147a0 <rb_radixtree_elem_add+0xd0>
   147b8:	ldr	r2, [r3, #4]!
   147bc:	cmp	r2, #0
   147c0:	beq	147b0 <rb_radixtree_elem_add+0xe0>
   147c4:	mov	r6, r2
   147c8:	b	14798 <rb_radixtree_elem_add+0xc8>
   147cc:	ldr	r3, [r6, #8]
   147d0:	mov	ip, #1
   147d4:	mov	r9, #0
   147d8:	mov	r7, r9
   147dc:	ldrb	r1, [sl]
   147e0:	mov	r2, sl
   147e4:	mov	r8, #4
   147e8:	b	14808 <rb_radixtree_elem_add+0x138>
   147ec:	add	r7, r7, #1
   147f0:	tst	r7, #1
   147f4:	ldrb	r1, [sl, r7, asr #1]
   147f8:	asr	r9, r7, #1
   147fc:	moveq	r8, #4
   14800:	movne	r8, #0
   14804:	add	r2, sl, r9
   14808:	ldrb	r0, [r3, r9]
   1480c:	asr	r1, r1, r8
   14810:	eor	r1, r1, r0, asr r8
   14814:	tst	r1, #15
   14818:	beq	147ec <rb_radixtree_elem_add+0x11c>
   1481c:	cmp	ip, #0
   14820:	beq	14a70 <rb_radixtree_elem_add+0x3a0>
   14824:	ldr	r3, [r4]
   14828:	cmp	r7, r3
   1482c:	blt	14840 <rb_radixtree_elem_add+0x170>
   14830:	b	14954 <rb_radixtree_elem_add+0x284>
   14834:	ldr	r3, [r4]
   14838:	cmp	r3, r7
   1483c:	ble	14954 <rb_radixtree_elem_add+0x284>
   14840:	ldrb	r5, [r4, #72]	; 0x48
   14844:	ldr	r4, [r4, #68]	; 0x44
   14848:	cmp	r4, #0
   1484c:	bne	14834 <rb_radixtree_elem_add+0x164>
   14850:	mov	r1, #76	; 0x4c
   14854:	mov	r0, #1
   14858:	str	r2, [sp, #12]
   1485c:	bl	45ec <calloc@plt>
   14860:	cmp	r0, #0
   14864:	beq	14998 <rb_radixtree_elem_add+0x2c8>
   14868:	ldr	r2, [sp, #12]
   1486c:	mov	r3, r0
   14870:	add	ip, r0, #64	; 0x40
   14874:	mov	r1, #0
   14878:	str	r7, [r0]
   1487c:	str	r4, [r0, #68]	; 0x44
   14880:	strb	r5, [r0, #72]	; 0x48
   14884:	str	r1, [r3, #4]!
   14888:	cmp	ip, r3
   1488c:	bne	14884 <rb_radixtree_elem_add+0x1b4>
   14890:	cmp	r4, #0
   14894:	ldr	r3, [r6, #8]
   14898:	beq	149bc <rb_radixtree_elem_add+0x2ec>
   1489c:	ldrb	r3, [r3, r9]
   148a0:	add	r5, r4, r5, lsl #2
   148a4:	ldr	r1, [r5, #4]
   148a8:	asr	r3, r3, r8
   148ac:	and	r3, r3, #15
   148b0:	add	r3, r0, r3, lsl #2
   148b4:	str	r1, [r3, #4]
   148b8:	ldr	r1, [r5, #4]
   148bc:	ldr	r3, [r1]
   148c0:	cmn	r3, #1
   148c4:	beq	1499c <rb_radixtree_elem_add+0x2cc>
   148c8:	str	r0, [r1, #68]	; 0x44
   148cc:	ldr	r3, [r6, #8]
   148d0:	ldrb	r3, [r3, r9]
   148d4:	asr	r3, r3, r8
   148d8:	and	r3, r3, #15
   148dc:	strb	r3, [r1, #72]	; 0x48
   148e0:	mov	r4, r0
   148e4:	str	r0, [r5, #4]
   148e8:	mov	r1, #20
   148ec:	mov	r0, #1
   148f0:	ldrb	r5, [r2]
   148f4:	bl	45ec <calloc@plt>
   148f8:	asr	r5, r5, r8
   148fc:	and	r5, r5, #15
   14900:	cmp	r0, #0
   14904:	beq	14998 <rb_radixtree_elem_add+0x2c8>
   14908:	add	r3, r4, r5, lsl #2
   1490c:	mvn	r2, #0
   14910:	str	r0, [r3, #4]
   14914:	str	r2, [r0]
   14918:	ldr	r2, [r3, #4]
   1491c:	ldr	r1, [sp, #4]
   14920:	str	r1, [r2, #4]
   14924:	ldr	r2, [r3, #4]
   14928:	str	sl, [r2, #8]
   1492c:	ldr	r2, [r3, #4]
   14930:	str	r4, [r2, #12]
   14934:	ldr	r2, [r3, #4]
   14938:	strb	r5, [r2, #16]
   1493c:	ldr	r2, [fp, #8]
   14940:	ldr	r0, [r3, #4]
   14944:	add	r3, r2, #1
   14948:	str	r3, [fp, #8]
   1494c:	add	sp, sp, #20
   14950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14954:	cmp	r7, r3
   14958:	bgt	14850 <rb_radixtree_elem_add+0x180>
   1495c:	b	148e8 <rb_radixtree_elem_add+0x218>
   14960:	ldr	r6, [sp, #8]
   14964:	mov	r5, #18
   14968:	mov	r4, #0
   1496c:	ldr	r3, [r6, #8]
   14970:	mov	r1, sl
   14974:	mov	r0, r3
   14978:	str	r3, [sp, #12]
   1497c:	bl	4cdc <strcmp@plt>
   14980:	ldr	r3, [sp, #12]
   14984:	subs	r7, r0, #0
   14988:	beq	14a78 <rb_radixtree_elem_add+0x3a8>
   1498c:	adds	ip, r4, #0
   14990:	movne	ip, #1
   14994:	b	147d4 <rb_radixtree_elem_add+0x104>
   14998:	bl	4988 <rb_outofmemory@plt>
   1499c:	str	r0, [r1, #12]
   149a0:	ldr	r3, [r6, #8]
   149a4:	ldr	r1, [r5, #4]
   149a8:	ldrb	r3, [r3, r9]
   149ac:	asr	r3, r3, r8
   149b0:	and	r3, r3, #15
   149b4:	strb	r3, [r1, #16]
   149b8:	b	148e0 <rb_radixtree_elem_add+0x210>
   149bc:	ldrb	r3, [r3, r9]
   149c0:	ldr	r1, [sp, #8]
   149c4:	asr	r3, r3, r8
   149c8:	and	r3, r3, #15
   149cc:	add	r3, r0, r3, lsl #2
   149d0:	str	r1, [r3, #4]
   149d4:	ldr	r3, [r1]
   149d8:	cmn	r3, #1
   149dc:	beq	14a54 <rb_radixtree_elem_add+0x384>
   149e0:	ldr	r1, [sp, #8]
   149e4:	str	r0, [r1, #68]	; 0x44
   149e8:	ldr	r3, [r6, #8]
   149ec:	ldrb	r3, [r3, r9]
   149f0:	asr	r3, r3, r8
   149f4:	and	r3, r3, #15
   149f8:	strb	r3, [r1, #72]	; 0x48
   149fc:	str	r0, [fp, #4]
   14a00:	mov	r4, r0
   14a04:	b	148e8 <rb_radixtree_elem_add+0x218>
   14a08:	mov	r1, #20
   14a0c:	mov	r0, #1
   14a10:	bl	45ec <calloc@plt>
   14a14:	cmp	r0, #0
   14a18:	beq	14998 <rb_radixtree_elem_add+0x2c8>
   14a1c:	ldr	ip, [sp, #4]
   14a20:	ldr	r3, [fp, #8]
   14a24:	str	ip, [r0, #4]
   14a28:	ldr	ip, [sp, #8]
   14a2c:	mvn	r1, #0
   14a30:	add	r3, r3, #1
   14a34:	mov	r2, #18
   14a38:	str	r0, [fp, #4]
   14a3c:	str	sl, [r0, #8]
   14a40:	str	ip, [r0, #12]
   14a44:	str	r3, [fp, #8]
   14a48:	str	r1, [r0]
   14a4c:	strb	r2, [r0, #16]
   14a50:	b	1494c <rb_radixtree_elem_add+0x27c>
   14a54:	str	r0, [r1, #12]
   14a58:	ldr	r3, [r6, #8]
   14a5c:	ldrb	r3, [r3, r9]
   14a60:	asr	r3, r3, r8
   14a64:	and	r3, r3, #15
   14a68:	strb	r3, [r1, #16]
   14a6c:	b	149fc <rb_radixtree_elem_add+0x32c>
   14a70:	mov	r4, ip
   14a74:	b	14850 <rb_radixtree_elem_add+0x180>
   14a78:	mov	r0, sl
   14a7c:	bl	46f4 <free@plt>
   14a80:	mov	r0, r7
   14a84:	b	1494c <rb_radixtree_elem_add+0x27c>

00014a88 <rb_radixtree_add>:
   14a88:	push	{r4, lr}
   14a8c:	bl	4718 <rb_radixtree_elem_add@plt>
   14a90:	adds	r0, r0, #0
   14a94:	movne	r0, #1
   14a98:	pop	{r4, pc}

00014a9c <rb_radixtree_elem_delete>:
   14a9c:	push	{r4, r5, r6, r7, r8, lr}
   14aa0:	mov	r6, r0
   14aa4:	ldr	r0, [r1, #8]
   14aa8:	mov	r5, r1
   14aac:	cmp	r0, #0
   14ab0:	ldrb	r7, [r1, #16]
   14ab4:	ldr	r4, [r1, #12]
   14ab8:	beq	14ac0 <rb_radixtree_elem_delete+0x24>
   14abc:	bl	46f4 <free@plt>
   14ac0:	mov	r0, r5
   14ac4:	bl	46f4 <free@plt>
   14ac8:	cmp	r4, #0
   14acc:	streq	r4, [r6, #4]
   14ad0:	beq	14b80 <rb_radixtree_elem_delete+0xe4>
   14ad4:	mov	r1, #0
   14ad8:	add	r7, r4, r7, lsl #2
   14adc:	mov	r3, r1
   14ae0:	mvn	r2, #0
   14ae4:	mvn	r0, #1
   14ae8:	str	r1, [r7, #4]
   14aec:	add	r1, r4, r3, lsl #2
   14af0:	ldr	r1, [r1, #4]
   14af4:	cmp	r1, #0
   14af8:	beq	14b2c <rb_radixtree_elem_delete+0x90>
   14afc:	cmn	r2, #1
   14b00:	beq	14b98 <rb_radixtree_elem_delete+0xfc>
   14b04:	cmp	r3, #15
   14b08:	add	r3, r3, #2
   14b0c:	beq	14b80 <rb_radixtree_elem_delete+0xe4>
   14b10:	cmp	r3, #16
   14b14:	add	r2, r4, r3, lsl #2
   14b18:	beq	14b80 <rb_radixtree_elem_delete+0xe4>
   14b1c:	ldr	r2, [r2, #4]
   14b20:	cmp	r2, #0
   14b24:	bne	14b04 <rb_radixtree_elem_delete+0x68>
   14b28:	mov	r2, r0
   14b2c:	add	r3, r3, #1
   14b30:	cmp	r3, #16
   14b34:	bne	14aec <rb_radixtree_elem_delete+0x50>
   14b38:	cmp	r2, #0
   14b3c:	blt	14b80 <rb_radixtree_elem_delete+0xe4>
   14b40:	add	r2, r4, r2, lsl #2
   14b44:	ldr	r1, [r4, #68]	; 0x44
   14b48:	ldr	r3, [r2, #4]
   14b4c:	ldrb	r2, [r4, #72]	; 0x48
   14b50:	cmp	r1, #0
   14b54:	streq	r3, [r6, #4]
   14b58:	addne	r0, r1, r2, lsl #2
   14b5c:	strne	r3, [r0, #4]
   14b60:	ldr	r0, [r3]
   14b64:	cmn	r0, #1
   14b68:	streq	r1, [r3, #12]
   14b6c:	strbeq	r2, [r3, #16]
   14b70:	strne	r1, [r3, #68]	; 0x44
   14b74:	strbne	r2, [r3, #72]	; 0x48
   14b78:	mov	r0, r4
   14b7c:	bl	46f4 <free@plt>
   14b80:	ldr	r3, [r6, #8]
   14b84:	sub	r3, r3, #1
   14b88:	cmp	r3, #0
   14b8c:	str	r3, [r6, #8]
   14b90:	streq	r3, [r6, #4]
   14b94:	pop	{r4, r5, r6, r7, r8, pc}
   14b98:	mov	r2, r3
   14b9c:	b	14b2c <rb_radixtree_elem_delete+0x90>

00014ba0 <rb_radixtree_delete>:
   14ba0:	push	{r4, lr}
   14ba4:	mov	r2, #0
   14ba8:	mov	r4, r0
   14bac:	bl	4b74 <rb_radixtree_elem_find@plt>
   14bb0:	subs	r3, r0, #0
   14bb4:	beq	14bd0 <rb_radixtree_delete+0x30>
   14bb8:	mov	r0, r4
   14bbc:	mov	r1, r3
   14bc0:	ldr	r4, [r3, #4]
   14bc4:	bl	43ac <rb_radixtree_elem_delete@plt>
   14bc8:	mov	r0, r4
   14bcc:	pop	{r4, pc}
   14bd0:	mov	r4, r3
   14bd4:	b	14bc8 <rb_radixtree_delete+0x28>

00014bd8 <rb_radixtree_destroy>:
   14bd8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14bdc:	sub	sp, sp, #44	; 0x2c
   14be0:	ldr	r9, [pc, #204]	; 14cb4 <rb_radixtree_destroy+0xdc>
   14be4:	mov	r7, r1
   14be8:	mov	r1, sp
   14bec:	mov	r8, r2
   14bf0:	mov	r4, r0
   14bf4:	mov	r6, sp
   14bf8:	add	r9, pc, r9
   14bfc:	bl	440c <rb_radixtree_foreach_start@plt>
   14c00:	b	14c34 <rb_radixtree_destroy+0x5c>
   14c04:	cmp	r7, #0
   14c08:	ldr	r5, [sp, #8]
   14c0c:	beq	14c1c <rb_radixtree_destroy+0x44>
   14c10:	ldr	r1, [r5, #4]
   14c14:	ldr	r0, [r5, #8]
   14c18:	blx	r7
   14c1c:	ldr	r1, [r5, #8]
   14c20:	mov	r0, r4
   14c24:	bl	4cc4 <rb_radixtree_delete@plt>
   14c28:	mov	r1, r6
   14c2c:	mov	r0, r4
   14c30:	bl	4448 <rb_radixtree_foreach_next@plt>
   14c34:	mov	r1, r6
   14c38:	mov	r0, r4
   14c3c:	bl	47a8 <rb_radixtree_foreach_cur@plt>
   14c40:	mov	r2, r8
   14c44:	cmp	r0, #0
   14c48:	bne	14c04 <rb_radixtree_destroy+0x2c>
   14c4c:	ldr	r3, [r4, #24]
   14c50:	ldr	r2, [pc, #96]	; 14cb8 <rb_radixtree_destroy+0xe0>
   14c54:	cmp	r3, #0
   14c58:	ldr	r1, [r4, #20]
   14c5c:	ldreq	r2, [r9, r2]
   14c60:	strne	r1, [r3, #4]
   14c64:	ldrne	r2, [r9, r2]
   14c68:	ldrne	r1, [r4, #20]
   14c6c:	streq	r1, [r2, #4]
   14c70:	cmp	r1, #0
   14c74:	strne	r3, [r1, #8]
   14c78:	streq	r3, [r2]
   14c7c:	ldr	r0, [r4, #12]
   14c80:	ldr	r3, [r2, #8]
   14c84:	mov	r1, #0
   14c88:	sub	r3, r3, #1
   14c8c:	cmp	r0, #0
   14c90:	str	r3, [r2, #8]
   14c94:	str	r1, [r4, #20]
   14c98:	str	r1, [r4, #24]
   14c9c:	beq	14ca4 <rb_radixtree_destroy+0xcc>
   14ca0:	bl	46f4 <free@plt>
   14ca4:	mov	r0, r4
   14ca8:	add	sp, sp, #44	; 0x2c
   14cac:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14cb0:	b	46f4 <free@plt>
   14cb4:	.word	0x00013400
   14cb8:	.word	0x000003f4

00014cbc <rb_radixtree_retrieve>:
   14cbc:	push	{r4, lr}
   14cc0:	mov	r2, #0
   14cc4:	bl	4b74 <rb_radixtree_elem_find@plt>
   14cc8:	cmp	r0, #0
   14ccc:	ldrne	r0, [r0, #4]
   14cd0:	pop	{r4, pc}

00014cd4 <rb_radixtree_elem_get_key>:
   14cd4:	ldr	r0, [r0, #8]
   14cd8:	bx	lr

00014cdc <rb_radixtree_elem_set_data>:
   14cdc:	str	r1, [r0, #4]
   14ce0:	bx	lr

00014ce4 <rb_radixtree_elem_get_data>:
   14ce4:	ldr	r0, [r0, #4]
   14ce8:	bx	lr

00014cec <rb_radixtree_size>:
   14cec:	ldr	r0, [r0, #8]
   14cf0:	bx	lr

00014cf4 <rb_radixtree_stats>:
   14cf4:	push	{r4, r5, r6, r7, r8, lr}
   14cf8:	mov	r4, r0
   14cfc:	ldr	r0, [r0, #8]
   14d00:	mov	r3, #0
   14d04:	sub	sp, sp, #288	; 0x120
   14d08:	cmp	r0, r3
   14d0c:	mov	r5, r1
   14d10:	mov	r6, r2
   14d14:	str	r3, [sp, #28]
   14d18:	bne	14d70 <rb_radixtree_stats+0x7c>
   14d1c:	ldr	r2, [pc, #168]	; 14dcc <rb_radixtree_stats+0xd8>
   14d20:	ldr	r1, [pc, #168]	; 14dd0 <rb_radixtree_stats+0xdc>
   14d24:	add	r2, pc, r2
   14d28:	ldr	r3, [r4, #12]
   14d2c:	str	r2, [sp, #16]
   14d30:	str	r2, [sp, #12]
   14d34:	str	r2, [sp, #8]
   14d38:	str	r2, [sp, #4]
   14d3c:	ldr	r2, [pc, #144]	; 14dd4 <rb_radixtree_stats+0xe0>
   14d40:	add	r1, pc, r1
   14d44:	add	r4, sp, #32
   14d48:	str	r1, [sp]
   14d4c:	mov	r0, r4
   14d50:	add	r2, pc, r2
   14d54:	mov	r1, #256	; 0x100
   14d58:	bl	4bb0 <snprintf@plt>
   14d5c:	mov	r1, r6
   14d60:	mov	r0, r4
   14d64:	blx	r5
   14d68:	add	sp, sp, #288	; 0x120
   14d6c:	pop	{r4, r5, r6, r7, r8, pc}
   14d70:	add	r2, sp, #28
   14d74:	mov	r1, r3
   14d78:	ldr	r0, [r4, #4]
   14d7c:	bl	140dc <stats_recurse>
   14d80:	ldr	r7, [r4, #8]
   14d84:	ldr	r3, [sp, #28]
   14d88:	mov	r1, r7
   14d8c:	str	r3, [sp, #16]
   14d90:	mov	r8, r0
   14d94:	bl	14e30 <__udivsi3>
   14d98:	ldr	r1, [pc, #56]	; 14dd8 <rb_radixtree_stats+0xe4>
   14d9c:	ldr	r2, [pc, #56]	; 14ddc <rb_radixtree_stats+0xe8>
   14da0:	add	r1, pc, r1
   14da4:	ldr	r3, [r4, #12]
   14da8:	add	r4, sp, #32
   14dac:	stm	sp, {r1, r7}
   14db0:	add	r2, pc, r2
   14db4:	str	r8, [sp, #8]
   14db8:	mov	r1, #256	; 0x100
   14dbc:	str	r0, [sp, #12]
   14dc0:	mov	r0, r4
   14dc4:	bl	4bb0 <snprintf@plt>
   14dc8:	b	14d5c <rb_radixtree_stats+0x68>
   14dcc:	.word	0x00000f48
   14dd0:	.word	0x00001fe8
   14dd4:	.word	0x00001fb4
   14dd8:	.word	0x00001f88
   14ddc:	.word	0x00001f28

00014de0 <rb_radixtree_stats_walk>:
   14de0:	ldr	r3, [pc, #64]	; 14e28 <rb_radixtree_stats_walk+0x48>
   14de4:	ldr	r2, [pc, #64]	; 14e2c <rb_radixtree_stats_walk+0x4c>
   14de8:	add	r3, pc, r3
   14dec:	push	{r4, r5, r6, lr}
   14df0:	ldr	r2, [r3, r2]
   14df4:	ldr	r4, [r2]
   14df8:	cmp	r4, #0
   14dfc:	popeq	{r4, r5, r6, pc}
   14e00:	mov	r6, r0
   14e04:	mov	r5, r1
   14e08:	ldr	r0, [r4]
   14e0c:	mov	r2, r5
   14e10:	mov	r1, r6
   14e14:	bl	4640 <rb_radixtree_stats@plt>
   14e18:	ldr	r4, [r4, #8]
   14e1c:	cmp	r4, #0
   14e20:	bne	14e08 <rb_radixtree_stats_walk+0x28>
   14e24:	pop	{r4, r5, r6, pc}
   14e28:	.word	0x00013210
   14e2c:	.word	0x000003f4

00014e30 <__udivsi3>:
   14e30:	subs	r2, r1, #1
   14e34:	bxeq	lr
   14e38:	bcc	15010 <__udivsi3+0x1e0>
   14e3c:	cmp	r0, r1
   14e40:	bls	14ff4 <__udivsi3+0x1c4>
   14e44:	tst	r1, r2
   14e48:	beq	15000 <__udivsi3+0x1d0>
   14e4c:	clz	r3, r0
   14e50:	clz	r2, r1
   14e54:	sub	r3, r2, r3
   14e58:	rsbs	r3, r3, #31
   14e5c:	addne	r3, r3, r3, lsl #1
   14e60:	mov	r2, #0
   14e64:	addne	pc, pc, r3, lsl #2
   14e68:	nop			; (mov r0, r0)
   14e6c:	cmp	r0, r1, lsl #31
   14e70:	adc	r2, r2, r2
   14e74:	subcs	r0, r0, r1, lsl #31
   14e78:	cmp	r0, r1, lsl #30
   14e7c:	adc	r2, r2, r2
   14e80:	subcs	r0, r0, r1, lsl #30
   14e84:	cmp	r0, r1, lsl #29
   14e88:	adc	r2, r2, r2
   14e8c:	subcs	r0, r0, r1, lsl #29
   14e90:	cmp	r0, r1, lsl #28
   14e94:	adc	r2, r2, r2
   14e98:	subcs	r0, r0, r1, lsl #28
   14e9c:	cmp	r0, r1, lsl #27
   14ea0:	adc	r2, r2, r2
   14ea4:	subcs	r0, r0, r1, lsl #27
   14ea8:	cmp	r0, r1, lsl #26
   14eac:	adc	r2, r2, r2
   14eb0:	subcs	r0, r0, r1, lsl #26
   14eb4:	cmp	r0, r1, lsl #25
   14eb8:	adc	r2, r2, r2
   14ebc:	subcs	r0, r0, r1, lsl #25
   14ec0:	cmp	r0, r1, lsl #24
   14ec4:	adc	r2, r2, r2
   14ec8:	subcs	r0, r0, r1, lsl #24
   14ecc:	cmp	r0, r1, lsl #23
   14ed0:	adc	r2, r2, r2
   14ed4:	subcs	r0, r0, r1, lsl #23
   14ed8:	cmp	r0, r1, lsl #22
   14edc:	adc	r2, r2, r2
   14ee0:	subcs	r0, r0, r1, lsl #22
   14ee4:	cmp	r0, r1, lsl #21
   14ee8:	adc	r2, r2, r2
   14eec:	subcs	r0, r0, r1, lsl #21
   14ef0:	cmp	r0, r1, lsl #20
   14ef4:	adc	r2, r2, r2
   14ef8:	subcs	r0, r0, r1, lsl #20
   14efc:	cmp	r0, r1, lsl #19
   14f00:	adc	r2, r2, r2
   14f04:	subcs	r0, r0, r1, lsl #19
   14f08:	cmp	r0, r1, lsl #18
   14f0c:	adc	r2, r2, r2
   14f10:	subcs	r0, r0, r1, lsl #18
   14f14:	cmp	r0, r1, lsl #17
   14f18:	adc	r2, r2, r2
   14f1c:	subcs	r0, r0, r1, lsl #17
   14f20:	cmp	r0, r1, lsl #16
   14f24:	adc	r2, r2, r2
   14f28:	subcs	r0, r0, r1, lsl #16
   14f2c:	cmp	r0, r1, lsl #15
   14f30:	adc	r2, r2, r2
   14f34:	subcs	r0, r0, r1, lsl #15
   14f38:	cmp	r0, r1, lsl #14
   14f3c:	adc	r2, r2, r2
   14f40:	subcs	r0, r0, r1, lsl #14
   14f44:	cmp	r0, r1, lsl #13
   14f48:	adc	r2, r2, r2
   14f4c:	subcs	r0, r0, r1, lsl #13
   14f50:	cmp	r0, r1, lsl #12
   14f54:	adc	r2, r2, r2
   14f58:	subcs	r0, r0, r1, lsl #12
   14f5c:	cmp	r0, r1, lsl #11
   14f60:	adc	r2, r2, r2
   14f64:	subcs	r0, r0, r1, lsl #11
   14f68:	cmp	r0, r1, lsl #10
   14f6c:	adc	r2, r2, r2
   14f70:	subcs	r0, r0, r1, lsl #10
   14f74:	cmp	r0, r1, lsl #9
   14f78:	adc	r2, r2, r2
   14f7c:	subcs	r0, r0, r1, lsl #9
   14f80:	cmp	r0, r1, lsl #8
   14f84:	adc	r2, r2, r2
   14f88:	subcs	r0, r0, r1, lsl #8
   14f8c:	cmp	r0, r1, lsl #7
   14f90:	adc	r2, r2, r2
   14f94:	subcs	r0, r0, r1, lsl #7
   14f98:	cmp	r0, r1, lsl #6
   14f9c:	adc	r2, r2, r2
   14fa0:	subcs	r0, r0, r1, lsl #6
   14fa4:	cmp	r0, r1, lsl #5
   14fa8:	adc	r2, r2, r2
   14fac:	subcs	r0, r0, r1, lsl #5
   14fb0:	cmp	r0, r1, lsl #4
   14fb4:	adc	r2, r2, r2
   14fb8:	subcs	r0, r0, r1, lsl #4
   14fbc:	cmp	r0, r1, lsl #3
   14fc0:	adc	r2, r2, r2
   14fc4:	subcs	r0, r0, r1, lsl #3
   14fc8:	cmp	r0, r1, lsl #2
   14fcc:	adc	r2, r2, r2
   14fd0:	subcs	r0, r0, r1, lsl #2
   14fd4:	cmp	r0, r1, lsl #1
   14fd8:	adc	r2, r2, r2
   14fdc:	subcs	r0, r0, r1, lsl #1
   14fe0:	cmp	r0, r1
   14fe4:	adc	r2, r2, r2
   14fe8:	subcs	r0, r0, r1
   14fec:	mov	r0, r2
   14ff0:	bx	lr
   14ff4:	moveq	r0, #1
   14ff8:	movne	r0, #0
   14ffc:	bx	lr
   15000:	clz	r2, r1
   15004:	rsb	r2, r2, #31
   15008:	lsr	r0, r0, r2
   1500c:	bx	lr
   15010:	cmp	r0, #0
   15014:	mvnne	r0, #0
   15018:	b	1503c <__aeabi_idiv0>

0001501c <__aeabi_uidivmod>:
   1501c:	cmp	r1, #0
   15020:	beq	15010 <__udivsi3+0x1e0>
   15024:	push	{r0, r1, lr}
   15028:	bl	14e30 <__udivsi3>
   1502c:	pop	{r1, r2, lr}
   15030:	mul	r3, r2, r0
   15034:	sub	r1, r1, r3
   15038:	bx	lr

0001503c <__aeabi_idiv0>:
   1503c:	push	{r1, lr}
   15040:	mov	r0, #8
   15044:	bl	48e0 <raise@plt>
   15048:	pop	{r1, pc}

Disassembly of section .fini:

0001504c <_fini>:
   1504c:	push	{r3, lr}
   15050:	pop	{r3, pc}
