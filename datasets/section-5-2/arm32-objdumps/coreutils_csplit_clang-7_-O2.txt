
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011398 <.init>:
   11398:	push	{r3, lr}
   1139c:	bl	117ac <__assert_fail@plt+0x4c>
   113a0:	pop	{r3, pc}

Disassembly of section .plt:

000113a4 <pthread_mutex_unlock@plt-0x14>:
   113a4:	push	{lr}		; (str lr, [sp, #-4]!)
   113a8:	ldr	lr, [pc, #4]	; 113b4 <pthread_mutex_unlock@plt-0x4>
   113ac:	add	lr, pc, lr
   113b0:	ldr	pc, [lr, #8]!
   113b4:	andeq	fp, r2, ip, asr #24

000113b8 <pthread_mutex_unlock@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #176128	; 0x2b000
   113c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113c4 <fdopen@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #176128	; 0x2b000
   113cc:	ldr	pc, [ip, #3140]!	; 0xc44

000113d0 <calloc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #176128	; 0x2b000
   113d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113dc <fputs_unlocked@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #176128	; 0x2b000
   113e4:	ldr	pc, [ip, #3124]!	; 0xc34

000113e8 <wctype@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #176128	; 0x2b000
   113f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f4 <raise@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #176128	; 0x2b000
   113fc:	ldr	pc, [ip, #3108]!	; 0xc24

00011400 <wcrtomb@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #176128	; 0x2b000
   11408:	ldr	pc, [ip, #3100]!	; 0xc1c

0001140c <iswctype@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #176128	; 0x2b000
   11414:	ldr	pc, [ip, #3092]!	; 0xc14

00011418 <strcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #176128	; 0x2b000
   11420:	ldr	pc, [ip, #3084]!	; 0xc0c

00011424 <read@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #176128	; 0x2b000
   1142c:	ldr	pc, [ip, #3076]!	; 0xc04

00011430 <pthread_mutex_destroy@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #176128	; 0x2b000
   11438:	ldr	pc, [ip, #3068]!	; 0xbfc

0001143c <fflush@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #176128	; 0x2b000
   11444:	ldr	pc, [ip, #3060]!	; 0xbf4

00011448 <sigprocmask@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #176128	; 0x2b000
   11450:	ldr	pc, [ip, #3052]!	; 0xbec

00011454 <memmove@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #176128	; 0x2b000
   1145c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011460 <free@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #176128	; 0x2b000
   11468:	ldr	pc, [ip, #3036]!	; 0xbdc

0001146c <pthread_mutex_lock@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #176128	; 0x2b000
   11474:	ldr	pc, [ip, #3028]!	; 0xbd4

00011478 <_exit@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #176128	; 0x2b000
   11480:	ldr	pc, [ip, #3020]!	; 0xbcc

00011484 <memcpy@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #176128	; 0x2b000
   1148c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011490 <pthread_mutex_init@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #176128	; 0x2b000
   11498:	ldr	pc, [ip, #3004]!	; 0xbbc

0001149c <__strtoull_internal@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #176128	; 0x2b000
   114a4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114a8 <towlower@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #176128	; 0x2b000
   114b0:	ldr	pc, [ip, #2988]!	; 0xbac

000114b4 <mbsinit@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #176128	; 0x2b000
   114bc:	ldr	pc, [ip, #2980]!	; 0xba4

000114c0 <signal@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #176128	; 0x2b000
   114c8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114cc <fwrite_unlocked@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #176128	; 0x2b000
   114d4:	ldr	pc, [ip, #2964]!	; 0xb94

000114d8 <memcmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #176128	; 0x2b000
   114e0:	ldr	pc, [ip, #2956]!	; 0xb8c

000114e4 <dcgettext@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #176128	; 0x2b000
   114ec:	ldr	pc, [ip, #2948]!	; 0xb84

000114f0 <unlink@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #176128	; 0x2b000
   114f8:	ldr	pc, [ip, #2940]!	; 0xb7c

000114fc <dup2@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #176128	; 0x2b000
   11504:	ldr	pc, [ip, #2932]!	; 0xb74

00011508 <realloc@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #176128	; 0x2b000
   11510:	ldr	pc, [ip, #2924]!	; 0xb6c

00011514 <sigismember@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #176128	; 0x2b000
   1151c:	ldr	pc, [ip, #2916]!	; 0xb64

00011520 <textdomain@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #176128	; 0x2b000
   11528:	ldr	pc, [ip, #2908]!	; 0xb5c

0001152c <rawmemchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #176128	; 0x2b000
   11534:	ldr	pc, [ip, #2900]!	; 0xb54

00011538 <iswprint@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #176128	; 0x2b000
   11540:	ldr	pc, [ip, #2892]!	; 0xb4c

00011544 <sigaction@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #176128	; 0x2b000
   1154c:	ldr	pc, [ip, #2884]!	; 0xb44

00011550 <fwrite@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #176128	; 0x2b000
   11558:	ldr	pc, [ip, #2876]!	; 0xb3c

0001155c <lseek64@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #176128	; 0x2b000
   11564:	ldr	pc, [ip, #2868]!	; 0xb34

00011568 <__ctype_get_mb_cur_max@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #176128	; 0x2b000
   11570:	ldr	pc, [ip, #2860]!	; 0xb2c

00011574 <strcpy@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #176128	; 0x2b000
   1157c:	ldr	pc, [ip, #2852]!	; 0xb24

00011580 <__fpending@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #176128	; 0x2b000
   11588:	ldr	pc, [ip, #2844]!	; 0xb1c

0001158c <mbrtowc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #176128	; 0x2b000
   11594:	ldr	pc, [ip, #2836]!	; 0xb14

00011598 <error@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #176128	; 0x2b000
   115a0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115a4 <open64@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #176128	; 0x2b000
   115ac:	ldr	pc, [ip, #2820]!	; 0xb04

000115b0 <malloc@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #176128	; 0x2b000
   115b8:	ldr	pc, [ip, #2812]!	; 0xafc

000115bc <sigaddset@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #176128	; 0x2b000
   115c4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115c8 <__libc_start_main@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #176128	; 0x2b000
   115d0:	ldr	pc, [ip, #2796]!	; 0xaec

000115d4 <__freading@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #176128	; 0x2b000
   115dc:	ldr	pc, [ip, #2788]!	; 0xae4

000115e0 <__ctype_tolower_loc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #176128	; 0x2b000
   115e8:	ldr	pc, [ip, #2780]!	; 0xadc

000115ec <__ctype_toupper_loc@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #176128	; 0x2b000
   115f4:	ldr	pc, [ip, #2772]!	; 0xad4

000115f8 <__gmon_start__@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #176128	; 0x2b000
   11600:	ldr	pc, [ip, #2764]!	; 0xacc

00011604 <getopt_long@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #176128	; 0x2b000
   1160c:	ldr	pc, [ip, #2756]!	; 0xac4

00011610 <__ctype_b_loc@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #176128	; 0x2b000
   11618:	ldr	pc, [ip, #2748]!	; 0xabc

0001161c <exit@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #176128	; 0x2b000
   11624:	ldr	pc, [ip, #2740]!	; 0xab4

00011628 <strlen@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #176128	; 0x2b000
   11630:	ldr	pc, [ip, #2732]!	; 0xaac

00011634 <strchr@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #176128	; 0x2b000
   1163c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011640 <__errno_location@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #176128	; 0x2b000
   11648:	ldr	pc, [ip, #2716]!	; 0xa9c

0001164c <iswalnum@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #176128	; 0x2b000
   11654:	ldr	pc, [ip, #2708]!	; 0xa94

00011658 <__sprintf_chk@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #176128	; 0x2b000
   11660:	ldr	pc, [ip, #2700]!	; 0xa8c

00011664 <__cxa_atexit@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #176128	; 0x2b000
   1166c:	ldr	pc, [ip, #2692]!	; 0xa84

00011670 <memset@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #176128	; 0x2b000
   11678:	ldr	pc, [ip, #2684]!	; 0xa7c

0001167c <btowc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #176128	; 0x2b000
   11684:	ldr	pc, [ip, #2676]!	; 0xa74

00011688 <__printf_chk@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #176128	; 0x2b000
   11690:	ldr	pc, [ip, #2668]!	; 0xa6c

00011694 <fileno@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #176128	; 0x2b000
   1169c:	ldr	pc, [ip, #2660]!	; 0xa64

000116a0 <__fprintf_chk@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #176128	; 0x2b000
   116a8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116ac <fclose@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #176128	; 0x2b000
   116b4:	ldr	pc, [ip, #2644]!	; 0xa54

000116b8 <fseeko64@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #176128	; 0x2b000
   116c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116c4 <fcntl64@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #176128	; 0x2b000
   116cc:	ldr	pc, [ip, #2628]!	; 0xa44

000116d0 <setlocale@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #176128	; 0x2b000
   116d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116dc <sigemptyset@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #176128	; 0x2b000
   116e4:	ldr	pc, [ip, #2612]!	; 0xa34

000116e8 <strrchr@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #176128	; 0x2b000
   116f0:	ldr	pc, [ip, #2604]!	; 0xa2c

000116f4 <nl_langinfo@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #176128	; 0x2b000
   116fc:	ldr	pc, [ip, #2596]!	; 0xa24

00011700 <__strtoll_internal@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #176128	; 0x2b000
   11708:	ldr	pc, [ip, #2588]!	; 0xa1c

0001170c <fopen64@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #176128	; 0x2b000
   11714:	ldr	pc, [ip, #2580]!	; 0xa14

00011718 <bindtextdomain@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #176128	; 0x2b000
   11720:	ldr	pc, [ip, #2572]!	; 0xa0c

00011724 <towupper@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #176128	; 0x2b000
   1172c:	ldr	pc, [ip, #2564]!	; 0xa04

00011730 <strncmp@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #176128	; 0x2b000
   11738:	ldr	pc, [ip, #2556]!	; 0x9fc

0001173c <abort@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #176128	; 0x2b000
   11744:	ldr	pc, [ip, #2548]!	; 0x9f4

00011748 <close@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #176128	; 0x2b000
   11750:	ldr	pc, [ip, #2540]!	; 0x9ec

00011754 <__snprintf_chk@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #176128	; 0x2b000
   1175c:	ldr	pc, [ip, #2532]!	; 0x9e4

00011760 <__assert_fail@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #176128	; 0x2b000
   11768:	ldr	pc, [ip, #2524]!	; 0x9dc

Disassembly of section .text:

00011770 <.text>:
   11770:	mov	fp, #0
   11774:	mov	lr, #0
   11778:	pop	{r1}		; (ldr r1, [sp], #4)
   1177c:	mov	r2, sp
   11780:	push	{r2}		; (str r2, [sp, #-4]!)
   11784:	push	{r0}		; (str r0, [sp, #-4]!)
   11788:	ldr	ip, [pc, #16]	; 117a0 <__assert_fail@plt+0x40>
   1178c:	push	{ip}		; (str ip, [sp, #-4]!)
   11790:	ldr	r0, [pc, #12]	; 117a4 <__assert_fail@plt+0x44>
   11794:	ldr	r3, [pc, #12]	; 117a8 <__assert_fail@plt+0x48>
   11798:	bl	115c8 <__libc_start_main@plt>
   1179c:	bl	1173c <abort@plt>
   117a0:	ldrdeq	fp, [r2], -r8
   117a4:	andeq	r1, r1, ip, lsr #17
   117a8:	andeq	fp, r2, r8, ror r0
   117ac:	ldr	r3, [pc, #20]	; 117c8 <__assert_fail@plt+0x68>
   117b0:	ldr	r2, [pc, #20]	; 117cc <__assert_fail@plt+0x6c>
   117b4:	add	r3, pc, r3
   117b8:	ldr	r2, [r3, r2]
   117bc:	cmp	r2, #0
   117c0:	bxeq	lr
   117c4:	b	115f8 <__gmon_start__@plt>
   117c8:	andeq	fp, r2, r4, asr #16
   117cc:	andeq	r0, r0, r8, asr #2
   117d0:	ldr	r0, [pc, #24]	; 117f0 <__assert_fail@plt+0x90>
   117d4:	ldr	r3, [pc, #24]	; 117f4 <__assert_fail@plt+0x94>
   117d8:	cmp	r3, r0
   117dc:	bxeq	lr
   117e0:	ldr	r3, [pc, #16]	; 117f8 <__assert_fail@plt+0x98>
   117e4:	cmp	r3, #0
   117e8:	bxeq	lr
   117ec:	bx	r3
   117f0:	andeq	sp, r3, r8, lsr #3
   117f4:	andeq	sp, r3, r8, lsr #3
   117f8:	andeq	r0, r0, r0
   117fc:	ldr	r0, [pc, #36]	; 11828 <__assert_fail@plt+0xc8>
   11800:	ldr	r1, [pc, #36]	; 1182c <__assert_fail@plt+0xcc>
   11804:	sub	r1, r1, r0
   11808:	asr	r1, r1, #2
   1180c:	add	r1, r1, r1, lsr #31
   11810:	asrs	r1, r1, #1
   11814:	bxeq	lr
   11818:	ldr	r3, [pc, #16]	; 11830 <__assert_fail@plt+0xd0>
   1181c:	cmp	r3, #0
   11820:	bxeq	lr
   11824:	bx	r3
   11828:	andeq	sp, r3, r8, lsr #3
   1182c:	andeq	sp, r3, r8, lsr #3
   11830:	andeq	r0, r0, r0
   11834:	push	{r4, lr}
   11838:	ldr	r4, [pc, #24]	; 11858 <__assert_fail@plt+0xf8>
   1183c:	ldrb	r3, [r4]
   11840:	cmp	r3, #0
   11844:	popne	{r4, pc}
   11848:	bl	117d0 <__assert_fail@plt+0x70>
   1184c:	mov	r3, #1
   11850:	strb	r3, [r4]
   11854:	pop	{r4, pc}
   11858:	andeq	sp, r3, r4, asr #3
   1185c:	b	117fc <__assert_fail@plt+0x9c>
   11860:	push	{fp, lr}
   11864:	mov	fp, sp
   11868:	movw	r1, #45316	; 0xb104
   1186c:	mov	r0, #0
   11870:	mov	r2, #5
   11874:	movt	r1, #2
   11878:	bl	114e4 <dcgettext@plt>
   1187c:	movw	r2, #47263	; 0xb89f
   11880:	mov	r3, r0
   11884:	mov	r0, #0
   11888:	mov	r1, #0
   1188c:	movt	r2, #2
   11890:	bl	11598 <error@plt>
   11894:	bl	11898 <__assert_fail@plt+0x138>
   11898:	push	{fp, lr}
   1189c:	mov	fp, sp
   118a0:	bl	130ec <__assert_fail@plt+0x198c>
   118a4:	mov	r0, #1
   118a8:	bl	1161c <exit@plt>
   118ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b0:	add	fp, sp, #28
   118b4:	sub	sp, sp, #4
   118b8:	vpush	{d8-d9}
   118bc:	sub	sp, sp, #200	; 0xc8
   118c0:	str	r0, [sp, #32]
   118c4:	ldr	r0, [r1]
   118c8:	mov	r5, r1
   118cc:	bl	14350 <__assert_fail@plt+0x2bf0>
   118d0:	movw	r1, #46723	; 0xb683
   118d4:	mov	r0, #6
   118d8:	movt	r1, #2
   118dc:	bl	116d0 <setlocale@plt>
   118e0:	movw	r4, #45397	; 0xb155
   118e4:	movw	r1, #45333	; 0xb115
   118e8:	movt	r4, #2
   118ec:	movt	r1, #2
   118f0:	mov	r0, r4
   118f4:	bl	11718 <bindtextdomain@plt>
   118f8:	mov	r0, r4
   118fc:	bl	11520 <textdomain@plt>
   11900:	movw	r0, #16072	; 0x3ec8
   11904:	movt	r0, #1
   11908:	bl	2b0dc <__assert_fail@plt+0x1997c>
   1190c:	movw	r0, #53717	; 0xd1d5
   11910:	mov	r8, #1
   11914:	mov	sl, #0
   11918:	movw	r7, #53716	; 0xd1d4
   1191c:	movw	r1, #53720	; 0xd1d8
   11920:	movw	r4, #45360	; 0xb130
   11924:	movw	r6, #48080	; 0xbbd0
   11928:	movw	r9, #53696	; 0xd1c0
   1192c:	movt	r0, #3
   11930:	movt	r7, #3
   11934:	movt	r1, #3
   11938:	movt	r4, #2
   1193c:	movt	r6, #2
   11940:	movt	r9, #3
   11944:	strb	r8, [r0]
   11948:	movw	r0, #53704	; 0xd1c8
   1194c:	str	r5, [sp, #36]	; 0x24
   11950:	strb	sl, [r7]
   11954:	movt	r0, #3
   11958:	str	r5, [r0]
   1195c:	movw	r0, #53708	; 0xd1cc
   11960:	movt	r0, #3
   11964:	str	sl, [r0]
   11968:	movw	r0, #53712	; 0xd1d0
   1196c:	movt	r0, #3
   11970:	str	sl, [r0]
   11974:	movw	r0, #53718	; 0xd1d6
   11978:	movt	r0, #3
   1197c:	strb	sl, [r0]
   11980:	movw	r0, #45357	; 0xb12d
   11984:	movt	r0, #2
   11988:	str	r0, [r1]
   1198c:	b	119f0 <__assert_fail@plt+0x290>
   11990:	ldr	r8, [r9]
   11994:	mov	r0, #0
   11998:	mov	r1, r5
   1199c:	mov	r2, #5
   119a0:	bl	114e4 <dcgettext@plt>
   119a4:	mvn	r1, #-2147483648	; 0x80000000
   119a8:	mov	r5, r6
   119ac:	mov	r6, r9
   119b0:	movw	r9, #53592	; 0xd158
   119b4:	mov	r2, #0
   119b8:	mov	r3, #0
   119bc:	stm	sp, {r1, sl}
   119c0:	movw	r1, #46723	; 0xb683
   119c4:	str	r0, [sp, #12]
   119c8:	mov	r0, r8
   119cc:	str	sl, [sp, #16]
   119d0:	movt	r9, #3
   119d4:	mov	r8, #1
   119d8:	movt	r1, #2
   119dc:	str	r1, [sp, #8]
   119e0:	bl	28298 <__assert_fail@plt+0x16b38>
   119e4:	str	r0, [r9]
   119e8:	mov	r9, r6
   119ec:	mov	r6, r5
   119f0:	movw	r5, #45371	; 0xb13b
   119f4:	movt	r5, #2
   119f8:	b	11a00 <__assert_fail@plt+0x2a0>
   119fc:	strb	r8, [r7]
   11a00:	ldr	r0, [sp, #32]
   11a04:	ldr	r1, [sp, #36]	; 0x24
   11a08:	mov	r2, r4
   11a0c:	mov	r3, r6
   11a10:	str	sl, [sp]
   11a14:	bl	11604 <getopt_long@plt>
   11a18:	cmp	r0, #97	; 0x61
   11a1c:	ble	11af8 <__assert_fail@plt+0x398>
   11a20:	sub	r1, r0, #98	; 0x62
   11a24:	cmp	r1, #24
   11a28:	bhi	11aac <__assert_fail@plt+0x34c>
   11a2c:	add	r0, pc, #0
   11a30:	ldr	pc, [r0, r1, lsl #2]
   11a34:	muleq	r1, r8, sl
   11a38:	andeq	r2, r1, r0, ror #24
   11a3c:	andeq	r2, r1, r0, ror #24
   11a40:	andeq	r2, r1, r0, ror #24
   11a44:	andeq	r1, r1, r4, ror #21
   11a48:	andeq	r2, r1, r0, ror #24
   11a4c:	andeq	r2, r1, r0, ror #24
   11a50:	andeq	r2, r1, r0, ror #24
   11a54:	andeq	r2, r1, r0, ror #24
   11a58:	ldrdeq	r1, [r1], -r4
   11a5c:	andeq	r2, r1, r0, ror #24
   11a60:	andeq	r2, r1, r0, ror #24
   11a64:	muleq	r1, r0, r9
   11a68:	andeq	r2, r1, r0, ror #24
   11a6c:	andeq	r2, r1, r0, ror #24
   11a70:	strdeq	r1, [r1], -ip
   11a74:	andeq	r2, r1, r0, ror #24
   11a78:	strdeq	r1, [r1], -ip
   11a7c:	andeq	r2, r1, r0, ror #24
   11a80:	andeq	r2, r1, r0, ror #24
   11a84:	andeq	r2, r1, r0, ror #24
   11a88:	andeq	r2, r1, r0, ror #24
   11a8c:	andeq	r2, r1, r0, ror #24
   11a90:	andeq	r2, r1, r0, ror #24
   11a94:	andeq	r1, r1, r4, asr #21
   11a98:	ldr	r0, [r9]
   11a9c:	movw	r1, #53724	; 0xd1dc
   11aa0:	movt	r1, #3
   11aa4:	str	r0, [r1]
   11aa8:	b	11a00 <__assert_fail@plt+0x2a0>
   11aac:	cmp	r0, #256	; 0x100
   11ab0:	bne	12c60 <__assert_fail@plt+0x1500>
   11ab4:	movw	r0, #53718	; 0xd1d6
   11ab8:	movt	r0, #3
   11abc:	strb	r8, [r0]
   11ac0:	b	11a00 <__assert_fail@plt+0x2a0>
   11ac4:	movw	r0, #53728	; 0xd1e0
   11ac8:	movt	r0, #3
   11acc:	strb	r8, [r0]
   11ad0:	b	11a00 <__assert_fail@plt+0x2a0>
   11ad4:	movw	r0, #53717	; 0xd1d5
   11ad8:	movt	r0, #3
   11adc:	strb	sl, [r0]
   11ae0:	b	11a00 <__assert_fail@plt+0x2a0>
   11ae4:	ldr	r0, [r9]
   11ae8:	movw	r1, #53720	; 0xd1d8
   11aec:	movt	r1, #3
   11af0:	str	r0, [r1]
   11af4:	b	11a00 <__assert_fail@plt+0x2a0>
   11af8:	cmn	r0, #1
   11afc:	bne	12954 <__assert_fail@plt+0x11f4>
   11b00:	movw	r9, #53680	; 0xd1b0
   11b04:	ldr	r1, [sp, #32]
   11b08:	movt	r9, #3
   11b0c:	ldr	r0, [r9]
   11b10:	sub	r1, r1, r0
   11b14:	cmp	r1, #1
   11b18:	ble	12c14 <__assert_fail@plt+0x14b4>
   11b1c:	movw	r0, #53720	; 0xd1d8
   11b20:	movt	r0, #3
   11b24:	ldr	r0, [r0]
   11b28:	bl	11628 <strlen@plt>
   11b2c:	mov	r8, r0
   11b30:	movw	r0, #53724	; 0xd1dc
   11b34:	movt	r0, #3
   11b38:	ldr	r0, [r0]
   11b3c:	cmp	r0, #0
   11b40:	beq	11d6c <__assert_fail@plt+0x60c>
   11b44:	movw	r0, #53724	; 0xd1dc
   11b48:	mov	r5, #0
   11b4c:	mvn	r1, #34	; 0x22
   11b50:	mvn	sl, #47	; 0x2f
   11b54:	mvn	r3, #87	; 0x57
   11b58:	mov	ip, #100	; 0x64
   11b5c:	movt	r0, #3
   11b60:	ldr	lr, [r0]
   11b64:	mov	r0, lr
   11b68:	b	11b70 <__assert_fail@plt+0x410>
   11b6c:	add	r0, r0, #1
   11b70:	ldrb	r4, [r0]
   11b74:	cmp	r4, #37	; 0x25
   11b78:	beq	11b88 <__assert_fail@plt+0x428>
   11b7c:	cmp	r4, #0
   11b80:	bne	11b6c <__assert_fail@plt+0x40c>
   11b84:	b	11d38 <__assert_fail@plt+0x5d8>
   11b88:	mov	r4, r0
   11b8c:	ldrb	r6, [r4, #1]!
   11b90:	cmp	r6, #37	; 0x25
   11b94:	bne	11ba0 <__assert_fail@plt+0x440>
   11b98:	mov	r0, r4
   11b9c:	b	11b6c <__assert_fail@plt+0x40c>
   11ba0:	tst	r5, #1
   11ba4:	bne	12b10 <__assert_fail@plt+0x13b0>
   11ba8:	add	r0, r0, #2
   11bac:	mov	r5, #0
   11bb0:	b	11bb8 <__assert_fail@plt+0x458>
   11bb4:	ldrb	r6, [r0], #1
   11bb8:	uxtab	r4, r1, r6
   11bbc:	cmp	r4, #13
   11bc0:	bhi	11c18 <__assert_fail@plt+0x4b8>
   11bc4:	add	r7, pc, #0
   11bc8:	ldr	pc, [r7, r4, lsl #2]
   11bcc:	andeq	r1, r1, r4, lsl #24
   11bd0:	andeq	r1, r1, r8, lsl ip
   11bd4:	andeq	r1, r1, r8, lsl ip
   11bd8:	andeq	r1, r1, r8, lsl ip
   11bdc:	andeq	r1, r1, ip, lsl #24
   11be0:	andeq	r1, r1, r8, lsl ip
   11be4:	andeq	r1, r1, r8, lsl ip
   11be8:	andeq	r1, r1, r8, lsl ip
   11bec:	andeq	r1, r1, r8, lsl ip
   11bf0:	andeq	r1, r1, r8, lsl ip
   11bf4:			; <UNDEFINED> instruction: 0x00011bb4
   11bf8:	andeq	r1, r1, r8, lsl ip
   11bfc:	andeq	r1, r1, r8, lsl ip
   11c00:			; <UNDEFINED> instruction: 0x00011bb4
   11c04:	orr	r5, r5, #2
   11c08:	b	11bb4 <__assert_fail@plt+0x454>
   11c0c:	ldrb	r6, [r0], #1
   11c10:	orr	r5, r5, #1
   11c14:	b	11bb8 <__assert_fail@plt+0x458>
   11c18:	uxtab	r4, sl, r6
   11c1c:	cmp	r4, #9
   11c20:	bhi	11c34 <__assert_fail@plt+0x4d4>
   11c24:	ldrb	r6, [r0], #1
   11c28:	sub	r4, r6, #48	; 0x30
   11c2c:	cmp	r4, #10
   11c30:	bcc	11c24 <__assert_fail@plt+0x4c4>
   11c34:	uxtb	r4, r6
   11c38:	sub	r0, r0, #1
   11c3c:	cmp	r4, #46	; 0x2e
   11c40:	bne	11c54 <__assert_fail@plt+0x4f4>
   11c44:	ldrb	r6, [r0, #1]!
   11c48:	sub	r4, r6, #48	; 0x30
   11c4c:	cmp	r4, #10
   11c50:	bcc	11c44 <__assert_fail@plt+0x4e4>
   11c54:	uxtab	r7, r3, r6
   11c58:	uxtb	r6, r6
   11c5c:	cmp	r7, #32
   11c60:	bhi	12a7c <__assert_fail@plt+0x131c>
   11c64:	add	r2, pc, #4
   11c68:	mvn	r4, #1
   11c6c:	ldr	pc, [r2, r7, lsl #2]
   11c70:	strdeq	r1, [r1], -r4
   11c74:	muleq	r1, r0, sl
   11c78:	muleq	r1, r0, sl
   11c7c:	muleq	r1, r0, sl
   11c80:	muleq	r1, r0, sl
   11c84:	muleq	r1, r0, sl
   11c88:	muleq	r1, r0, sl
   11c8c:	muleq	r1, r0, sl
   11c90:	muleq	r1, r0, sl
   11c94:	muleq	r1, r0, sl
   11c98:	muleq	r1, r0, sl
   11c9c:	muleq	r1, r0, sl
   11ca0:	andeq	r1, r1, r0, lsl #26
   11ca4:	muleq	r1, r0, sl
   11ca8:	muleq	r1, r0, sl
   11cac:	muleq	r1, r0, sl
   11cb0:	muleq	r1, r0, sl
   11cb4:	andeq	r1, r1, r0, lsl #26
   11cb8:	muleq	r1, r0, sl
   11cbc:	muleq	r1, r0, sl
   11cc0:	muleq	r1, r0, sl
   11cc4:	muleq	r1, r0, sl
   11cc8:	muleq	r1, r0, sl
   11ccc:	strdeq	r1, [r1], -r4
   11cd0:	muleq	r1, r0, sl
   11cd4:	muleq	r1, r0, sl
   11cd8:	muleq	r1, r0, sl
   11cdc:	muleq	r1, r0, sl
   11ce0:	muleq	r1, r0, sl
   11ce4:	strdeq	r1, [r1], -ip
   11ce8:	muleq	r1, r0, sl
   11cec:	muleq	r1, r0, sl
   11cf0:	strdeq	r1, [r1], -r4
   11cf4:	mvn	r4, #2
   11cf8:	b	11d00 <__assert_fail@plt+0x5a0>
   11cfc:	strb	ip, [r0]
   11d00:	ands	r4, r4, r5
   11d04:	mov	r5, #1
   11d08:	beq	11b6c <__assert_fail@plt+0x40c>
   11d0c:	movw	r1, #47070	; 0xb7de
   11d10:	mov	r0, #0
   11d14:	mov	r2, #5
   11d18:	movt	r1, #2
   11d1c:	bl	114e4 <dcgettext@plt>
   11d20:	mov	r3, #35	; 0x23
   11d24:	tst	r4, #2
   11d28:	mov	r2, r0
   11d2c:	str	r6, [sp]
   11d30:	movweq	r3, #39	; 0x27
   11d34:	b	12b54 <__assert_fail@plt+0x13f4>
   11d38:	tst	r5, #1
   11d3c:	beq	12c68 <__assert_fail@plt+0x1508>
   11d40:	mvn	r0, #-2147483648	; 0x80000000
   11d44:	mov	r1, #0
   11d48:	mov	r2, #1
   11d4c:	mvn	r3, #0
   11d50:	str	lr, [sp]
   11d54:	str	r0, [sp, #4]
   11d58:	mov	r0, #0
   11d5c:	bl	11754 <__snprintf_chk@plt>
   11d60:	cmn	r0, #1
   11d64:	bgt	11d8c <__assert_fail@plt+0x62c>
   11d68:	b	12c10 <__assert_fail@plt+0x14b0>
   11d6c:	movw	r0, #53592	; 0xd158
   11d70:	movt	r0, #3
   11d74:	ldr	r1, [r0]
   11d78:	mov	r0, #11
   11d7c:	cmp	r1, #11
   11d80:	movwcs	r0, #53592	; 0xd158
   11d84:	movtcs	r0, #3
   11d88:	ldrcs	r0, [r0]
   11d8c:	add	r0, r8, r0
   11d90:	add	r0, r0, #1
   11d94:	cmp	r0, r8
   11d98:	bvs	12c10 <__assert_fail@plt+0x14b0>
   11d9c:	bl	27c48 <__assert_fail@plt+0x164e8>
   11da0:	movw	r1, #53732	; 0xd1e4
   11da4:	movt	r1, #3
   11da8:	str	r0, [r1]
   11dac:	ldr	r0, [r9]
   11db0:	ldr	r1, [sp, #36]	; 0x24
   11db4:	add	r5, r0, #1
   11db8:	str	r5, [r9]
   11dbc:	ldr	r6, [r1, r0, lsl #2]
   11dc0:	movw	r1, #48460	; 0xbd4c
   11dc4:	movt	r1, #2
   11dc8:	mov	r0, r6
   11dcc:	bl	11418 <strcmp@plt>
   11dd0:	cmp	r0, #0
   11dd4:	beq	11df8 <__assert_fail@plt+0x698>
   11dd8:	mov	r0, #0
   11ddc:	mov	r1, r6
   11de0:	mov	r2, #0
   11de4:	mov	r3, #0
   11de8:	bl	1404c <__assert_fail@plt+0x28ec>
   11dec:	cmp	r0, #0
   11df0:	blt	12c74 <__assert_fail@plt+0x1514>
   11df4:	ldr	r5, [r9]
   11df8:	ldr	r9, [sp, #32]
   11dfc:	cmp	r5, r9
   11e00:	bge	121c0 <__assert_fail@plt+0xa60>
   11e04:	movw	r2, #53896	; 0xd288
   11e08:	vmov.i32	q4, #0	; 0x00000000
   11e0c:	movt	r2, #3
   11e10:	ldr	r0, [sp, #36]	; 0x24
   11e14:	ldr	r7, [r0, r5, lsl #2]
   11e18:	ldrb	r4, [r7]
   11e1c:	cmp	r4, #47	; 0x2f
   11e20:	cmpne	r4, #37	; 0x25
   11e24:	bne	11f74 <__assert_fail@plt+0x814>
   11e28:	add	r9, r7, #1
   11e2c:	mov	r1, r4
   11e30:	mov	r0, r9
   11e34:	bl	116e8 <strrchr@plt>
   11e38:	cmp	r0, #0
   11e3c:	beq	129ec <__assert_fail@plt+0x128c>
   11e40:	movw	sl, #53712	; 0xd1d0
   11e44:	movw	r1, #53896	; 0xd288
   11e48:	mov	r6, r0
   11e4c:	mvn	r0, r7
   11e50:	sub	r2, r4, #37	; 0x25
   11e54:	str	r7, [sp, #24]
   11e58:	add	r0, r6, r0
   11e5c:	movt	sl, #3
   11e60:	movt	r1, #3
   11e64:	clz	r2, r2
   11e68:	str	r0, [sp, #28]
   11e6c:	ldr	r3, [sl]
   11e70:	ldr	r0, [r1]
   11e74:	lsr	r4, r2, #5
   11e78:	cmp	r3, r0
   11e7c:	movw	r0, #53708	; 0xd1cc
   11e80:	movt	r0, #3
   11e84:	bne	11eb0 <__assert_fail@plt+0x750>
   11e88:	mov	r7, r0
   11e8c:	ldr	r0, [r0]
   11e90:	mov	r2, #64	; 0x40
   11e94:	mvn	r3, #0
   11e98:	str	r2, [sp]
   11e9c:	mov	r2, #1
   11ea0:	bl	27e60 <__assert_fail@plt+0x16700>
   11ea4:	ldr	r3, [sl]
   11ea8:	str	r0, [r7]
   11eac:	b	11eb4 <__assert_fail@plt+0x754>
   11eb0:	ldr	r0, [r0]
   11eb4:	add	r2, r3, #1
   11eb8:	mov	r7, #0
   11ebc:	mov	r1, #20
   11ec0:	mov	r8, r5
   11ec4:	str	r2, [sl]
   11ec8:	add	sl, r0, r3, lsl #6
   11ecc:	mov	r0, #1
   11ed0:	strb	r7, [sl, #28]
   11ed4:	str	r7, [sl, #16]
   11ed8:	str	r5, [sl, #24]
   11edc:	strb	r4, [sl, #29]
   11ee0:	strb	r0, [sl, #30]
   11ee4:	mov	r0, sl
   11ee8:	str	r7, [sl, #36]	; 0x24
   11eec:	mov	r4, sl
   11ef0:	vst1.64	{d8-d9}, [r0], r1
   11ef4:	str	r7, [r0]
   11ef8:	mov	r0, #256	; 0x100
   11efc:	str	r7, [r4, #32]!
   11f00:	bl	27c30 <__assert_fail@plt+0x164d0>
   11f04:	str	r0, [sl, #48]	; 0x30
   11f08:	movw	r0, #54260	; 0xd3f4
   11f0c:	str	r7, [sl, #52]	; 0x34
   11f10:	movw	r1, #710	; 0x2c6
   11f14:	mov	r2, r4
   11f18:	mov	r5, #0
   11f1c:	movt	r0, #3
   11f20:	str	r1, [r0]
   11f24:	ldr	r1, [sp, #28]
   11f28:	mov	r0, r9
   11f2c:	bl	160c0 <__assert_fail@plt+0x4960>
   11f30:	cmp	r0, #0
   11f34:	bne	12a18 <__assert_fail@plt+0x12b8>
   11f38:	ldrb	r0, [r6, #1]!
   11f3c:	ldr	r9, [sp, #32]
   11f40:	cmp	r0, #0
   11f44:	beq	120d4 <__assert_fail@plt+0x974>
   11f48:	movw	r0, #46723	; 0xb683
   11f4c:	mov	r1, #0
   11f50:	mov	r2, #10
   11f54:	mov	r3, sl
   11f58:	movt	r0, #2
   11f5c:	str	r0, [sp]
   11f60:	mov	r0, r6
   11f64:	bl	282a0 <__assert_fail@plt+0x16b40>
   11f68:	cmp	r0, #0
   11f6c:	beq	120d4 <__assert_fail@plt+0x974>
   11f70:	b	12ac4 <__assert_fail@plt+0x1364>
   11f74:	movw	r1, #53712	; 0xd1d0
   11f78:	ldr	r0, [r2]
   11f7c:	movt	r1, #3
   11f80:	ldr	r7, [r1]
   11f84:	cmp	r7, r0
   11f88:	bne	11fcc <__assert_fail@plt+0x86c>
   11f8c:	movw	r0, #53708	; 0xd1cc
   11f90:	mov	r1, #64	; 0x40
   11f94:	mvn	r3, #0
   11f98:	movt	r0, #3
   11f9c:	str	r1, [sp]
   11fa0:	mov	r1, r2
   11fa4:	mov	r2, #1
   11fa8:	mov	r4, r0
   11fac:	ldr	r0, [r0]
   11fb0:	bl	27e60 <__assert_fail@plt+0x16700>
   11fb4:	movw	r1, #53712	; 0xd1d0
   11fb8:	mov	r6, r0
   11fbc:	str	r0, [r4]
   11fc0:	movt	r1, #3
   11fc4:	ldr	r7, [r1]
   11fc8:	b	11fd8 <__assert_fail@plt+0x878>
   11fcc:	movw	r0, #53708	; 0xd1cc
   11fd0:	movt	r0, #3
   11fd4:	ldr	r6, [r0]
   11fd8:	add	r0, r7, #1
   11fdc:	add	sl, r6, r7, lsl #6
   11fe0:	mov	r2, #20
   11fe4:	sub	r3, fp, #64	; 0x40
   11fe8:	str	r0, [r1]
   11fec:	mov	r1, #0
   11ff0:	mov	r0, sl
   11ff4:	strb	r1, [sl, #28]
   11ff8:	strb	r1, [sl, #30]
   11ffc:	str	r1, [sl, #16]
   12000:	str	r5, [sl, #24]
   12004:	vst1.64	{d8-d9}, [r0], r2
   12008:	mov	r2, r5
   1200c:	mov	r5, #0
   12010:	str	r1, [r0]
   12014:	ldr	r0, [sp, #36]	; 0x24
   12018:	movw	r1, #46723	; 0xb683
   1201c:	mov	r8, r2
   12020:	movt	r1, #2
   12024:	ldr	r0, [r0, r2, lsl #2]
   12028:	str	r1, [sp]
   1202c:	mov	r1, #0
   12030:	mov	r2, #10
   12034:	bl	29bb8 <__assert_fail@plt+0x18458>
   12038:	cmp	r0, #0
   1203c:	bne	12a58 <__assert_fail@plt+0x12f8>
   12040:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12044:	cmn	r1, #1
   12048:	ble	12a58 <__assert_fail@plt+0x12f8>
   1204c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12050:	orrs	r2, r0, r1
   12054:	beq	12b34 <__assert_fail@plt+0x13d4>
   12058:	movw	r2, #53888	; 0xd280
   1205c:	movt	r2, #3
   12060:	ldrd	r2, [r2]
   12064:	subs	r4, r0, r2
   12068:	sbcs	r4, r1, r3
   1206c:	bcc	12b60 <__assert_fail@plt+0x1400>
   12070:	eor	r2, r0, r2
   12074:	eor	r3, r1, r3
   12078:	orrs	r2, r2, r3
   1207c:	bne	120c0 <__assert_fail@plt+0x960>
   12080:	movw	r1, #47266	; 0xb8a2
   12084:	mov	r0, #0
   12088:	mov	r2, #5
   1208c:	movt	r1, #2
   12090:	bl	114e4 <dcgettext@plt>
   12094:	mov	r4, r0
   12098:	ldr	r0, [sp, #36]	; 0x24
   1209c:	ldr	r0, [r0, r8, lsl #2]
   120a0:	bl	15f84 <__assert_fail@plt+0x4824>
   120a4:	mov	r3, r0
   120a8:	mov	r0, #0
   120ac:	mov	r1, #0
   120b0:	mov	r2, r4
   120b4:	bl	11598 <error@plt>
   120b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   120c0:	movw	r2, #53888	; 0xd280
   120c4:	movt	r2, #3
   120c8:	strd	r0, [r2]
   120cc:	add	r2, r6, r7, lsl #6
   120d0:	strd	r0, [r2, #8]
   120d4:	movw	r2, #53896	; 0xd288
   120d8:	add	r7, r8, #1
   120dc:	cmp	r7, r9
   120e0:	movt	r2, #3
   120e4:	bge	12178 <__assert_fail@plt+0xa18>
   120e8:	ldr	r0, [sp, #36]	; 0x24
   120ec:	ldr	r6, [r0, r7, lsl #2]
   120f0:	ldrb	r0, [r6]
   120f4:	cmp	r0, #123	; 0x7b
   120f8:	bne	12188 <__assert_fail@plt+0xa28>
   120fc:	mov	r0, r6
   12100:	bl	11628 <strlen@plt>
   12104:	sub	r4, r0, #1
   12108:	mov	r1, r0
   1210c:	ldrb	r0, [r6, r4]
   12110:	cmp	r0, #125	; 0x7d
   12114:	bne	12bdc <__assert_fail@plt+0x147c>
   12118:	strb	r5, [r6, r4]
   1211c:	add	r0, r6, #1
   12120:	cmp	r1, #3
   12124:	ldrbeq	r1, [r0]
   12128:	cmpeq	r1, #42	; 0x2a
   1212c:	beq	12198 <__assert_fail@plt+0xa38>
   12130:	movw	r1, #46723	; 0xb683
   12134:	mov	r2, #10
   12138:	add	r3, sp, #40	; 0x28
   1213c:	movt	r1, #2
   12140:	str	r1, [sp]
   12144:	mov	r1, #0
   12148:	bl	29bb8 <__assert_fail@plt+0x18458>
   1214c:	cmp	r0, #0
   12150:	bne	12ae4 <__assert_fail@plt+0x1384>
   12154:	ldr	r1, [sp, #44]	; 0x2c
   12158:	cmn	r1, #1
   1215c:	ble	12ae4 <__assert_fail@plt+0x1384>
   12160:	ldr	r0, [sp, #40]	; 0x28
   12164:	movw	r2, #53896	; 0xd288
   12168:	mov	r5, r8
   1216c:	movt	r2, #3
   12170:	strd	r0, [sl, #16]
   12174:	b	121ac <__assert_fail@plt+0xa4c>
   12178:	mov	r5, r7
   1217c:	cmp	r5, r9
   12180:	blt	11e10 <__assert_fail@plt+0x6b0>
   12184:	b	121c0 <__assert_fail@plt+0xa60>
   12188:	mov	r5, r7
   1218c:	cmp	r5, r9
   12190:	blt	11e10 <__assert_fail@plt+0x6b0>
   12194:	b	121c0 <__assert_fail@plt+0xa60>
   12198:	movw	r2, #53896	; 0xd288
   1219c:	mov	r0, #1
   121a0:	mov	r5, r8
   121a4:	strb	r0, [sl, #28]
   121a8:	movt	r2, #3
   121ac:	mov	r0, #125	; 0x7d
   121b0:	add	r5, r5, #2
   121b4:	strb	r0, [r6, r4]
   121b8:	cmp	r5, r9
   121bc:	blt	11e10 <__assert_fail@plt+0x6b0>
   121c0:	movw	r8, #53736	; 0xd1e8
   121c4:	movt	r8, #3
   121c8:	mov	r0, r8
   121cc:	bl	116dc <sigemptyset@plt>
   121d0:	movw	r4, #48256	; 0xbc80
   121d4:	mov	r7, #0
   121d8:	add	r5, sp, #40	; 0x28
   121dc:	movt	r4, #2
   121e0:	ldr	r6, [r4, r7, lsl #2]
   121e4:	mov	r1, #0
   121e8:	mov	r2, r5
   121ec:	mov	r0, r6
   121f0:	bl	11544 <sigaction@plt>
   121f4:	ldr	r0, [sp, #40]	; 0x28
   121f8:	cmp	r0, #1
   121fc:	beq	1220c <__assert_fail@plt+0xaac>
   12200:	mov	r0, r8
   12204:	mov	r1, r6
   12208:	bl	115bc <sigaddset@plt>
   1220c:	add	r7, r7, #1
   12210:	cmp	r7, #11
   12214:	bne	121e0 <__assert_fail@plt+0xa80>
   12218:	movw	r0, #12264	; 0x2fe8
   1221c:	movw	r4, #53736	; 0xd1e8
   12220:	mov	r2, #128	; 0x80
   12224:	movt	r0, #1
   12228:	movt	r4, #3
   1222c:	str	r0, [sp, #40]	; 0x28
   12230:	add	r0, r5, #4
   12234:	mov	r1, r4
   12238:	bl	11484 <memcpy@plt>
   1223c:	mov	r0, #0
   12240:	mov	r1, #14
   12244:	str	r0, [sp, #172]	; 0xac
   12248:	mov	r0, r4
   1224c:	bl	11514 <sigismember@plt>
   12250:	cmp	r0, #0
   12254:	beq	12268 <__assert_fail@plt+0xb08>
   12258:	add	r1, sp, #40	; 0x28
   1225c:	mov	r0, #14
   12260:	mov	r2, #0
   12264:	bl	11544 <sigaction@plt>
   12268:	movw	r0, #53736	; 0xd1e8
   1226c:	mov	r1, #1
   12270:	movt	r0, #3
   12274:	bl	11514 <sigismember@plt>
   12278:	movw	r4, #53712	; 0xd1d0
   1227c:	cmp	r0, #0
   12280:	movt	r4, #3
   12284:	beq	12298 <__assert_fail@plt+0xb38>
   12288:	add	r1, sp, #40	; 0x28
   1228c:	mov	r0, #1
   12290:	mov	r2, #0
   12294:	bl	11544 <sigaction@plt>
   12298:	movw	r0, #53736	; 0xd1e8
   1229c:	mov	r1, #2
   122a0:	movt	r0, #3
   122a4:	bl	11514 <sigismember@plt>
   122a8:	cmp	r0, #0
   122ac:	beq	122c0 <__assert_fail@plt+0xb60>
   122b0:	add	r1, sp, #40	; 0x28
   122b4:	mov	r0, #2
   122b8:	mov	r2, #0
   122bc:	bl	11544 <sigaction@plt>
   122c0:	movw	r0, #53736	; 0xd1e8
   122c4:	mov	r1, #13
   122c8:	movt	r0, #3
   122cc:	bl	11514 <sigismember@plt>
   122d0:	cmp	r0, #0
   122d4:	beq	122e8 <__assert_fail@plt+0xb88>
   122d8:	add	r1, sp, #40	; 0x28
   122dc:	mov	r0, #13
   122e0:	mov	r2, #0
   122e4:	bl	11544 <sigaction@plt>
   122e8:	movw	r0, #53736	; 0xd1e8
   122ec:	mov	r1, #3
   122f0:	movt	r0, #3
   122f4:	bl	11514 <sigismember@plt>
   122f8:	cmp	r0, #0
   122fc:	beq	12310 <__assert_fail@plt+0xbb0>
   12300:	add	r1, sp, #40	; 0x28
   12304:	mov	r0, #3
   12308:	mov	r2, #0
   1230c:	bl	11544 <sigaction@plt>
   12310:	movw	r0, #53736	; 0xd1e8
   12314:	mov	r1, #15
   12318:	movt	r0, #3
   1231c:	bl	11514 <sigismember@plt>
   12320:	cmp	r0, #0
   12324:	beq	12338 <__assert_fail@plt+0xbd8>
   12328:	add	r1, sp, #40	; 0x28
   1232c:	mov	r0, #15
   12330:	mov	r2, #0
   12334:	bl	11544 <sigaction@plt>
   12338:	movw	r0, #53736	; 0xd1e8
   1233c:	mov	r1, #29
   12340:	movt	r0, #3
   12344:	bl	11514 <sigismember@plt>
   12348:	cmp	r0, #0
   1234c:	beq	12360 <__assert_fail@plt+0xc00>
   12350:	add	r1, sp, #40	; 0x28
   12354:	mov	r0, #29
   12358:	mov	r2, #0
   1235c:	bl	11544 <sigaction@plt>
   12360:	movw	r0, #53736	; 0xd1e8
   12364:	mov	r1, #27
   12368:	movt	r0, #3
   1236c:	bl	11514 <sigismember@plt>
   12370:	cmp	r0, #0
   12374:	beq	12388 <__assert_fail@plt+0xc28>
   12378:	add	r1, sp, #40	; 0x28
   1237c:	mov	r0, #27
   12380:	mov	r2, #0
   12384:	bl	11544 <sigaction@plt>
   12388:	movw	r0, #53736	; 0xd1e8
   1238c:	mov	r1, #26
   12390:	movt	r0, #3
   12394:	bl	11514 <sigismember@plt>
   12398:	cmp	r0, #0
   1239c:	beq	123b0 <__assert_fail@plt+0xc50>
   123a0:	add	r1, sp, #40	; 0x28
   123a4:	mov	r0, #26
   123a8:	mov	r2, #0
   123ac:	bl	11544 <sigaction@plt>
   123b0:	movw	r0, #53736	; 0xd1e8
   123b4:	mov	r1, #24
   123b8:	movt	r0, #3
   123bc:	bl	11514 <sigismember@plt>
   123c0:	cmp	r0, #0
   123c4:	beq	123d8 <__assert_fail@plt+0xc78>
   123c8:	add	r1, sp, #40	; 0x28
   123cc:	mov	r0, #24
   123d0:	mov	r2, #0
   123d4:	bl	11544 <sigaction@plt>
   123d8:	movw	r0, #53736	; 0xd1e8
   123dc:	mov	r1, #25
   123e0:	movt	r0, #3
   123e4:	bl	11514 <sigismember@plt>
   123e8:	cmp	r0, #0
   123ec:	beq	12400 <__assert_fail@plt+0xca0>
   123f0:	add	r1, sp, #40	; 0x28
   123f4:	mov	r0, #25
   123f8:	mov	r2, #0
   123fc:	bl	11544 <sigaction@plt>
   12400:	ldr	r0, [r4]
   12404:	cmp	r0, #0
   12408:	ble	12808 <__assert_fail@plt+0x10a8>
   1240c:	movw	r0, #53708	; 0xd1cc
   12410:	mov	r5, #0
   12414:	movt	r0, #3
   12418:	ldr	r0, [r0]
   1241c:	add	r1, r0, r5, lsl #6
   12420:	str	r5, [sp, #32]
   12424:	ldrb	r1, [r1, #30]
   12428:	cmp	r1, #0
   1242c:	beq	1269c <__assert_fail@plt+0xf3c>
   12430:	mov	r8, #0
   12434:	mov	r9, #0
   12438:	b	12498 <__assert_fail@plt+0xd38>
   1243c:	cmp	sl, #0
   12440:	bleq	13134 <__assert_fail@plt+0x19d4>
   12444:	ldrd	r0, [r5]
   12448:	ldr	r5, [sp, #32]
   1244c:	ldr	r9, [sp, #36]	; 0x24
   12450:	mov	r8, r4
   12454:	subs	r0, r0, #1
   12458:	sbcs	r0, r1, #0
   1245c:	ldr	r1, [sp, #28]
   12460:	ldrge	r2, [sp, #24]
   12464:	movwge	r0, #53904	; 0xd290
   12468:	movtge	r0, #3
   1246c:	stmge	r0, {r1, r2}
   12470:	movw	r0, #53718	; 0xd1d6
   12474:	movt	r0, #3
   12478:	ldrb	r0, [r0]
   1247c:	cmp	r0, #1
   12480:	bleq	1379c <__assert_fail@plt+0x203c>
   12484:	movw	r0, #53708	; 0xd1cc
   12488:	adds	r8, r8, #1
   1248c:	movt	r0, #3
   12490:	adc	r9, r9, #0
   12494:	ldr	r0, [r0]
   12498:	add	r4, r0, r5, lsl #6
   1249c:	mov	r6, r4
   124a0:	ldrb	r1, [r6, #28]!
   124a4:	cmp	r1, #0
   124a8:	bne	124bc <__assert_fail@plt+0xd5c>
   124ac:	ldrd	r2, [r4, #16]
   124b0:	subs	r1, r2, r8
   124b4:	sbcs	r1, r3, r9
   124b8:	blt	127f0 <__assert_fail@plt+0x1090>
   124bc:	ldrb	sl, [r4, #29]
   124c0:	cmp	sl, #0
   124c4:	bleq	13434 <__assert_fail@plt+0x1cd4>
   124c8:	ldr	r0, [r4, #4]
   124cc:	cmn	r0, #1
   124d0:	ble	12570 <__assert_fail@plt+0xe10>
   124d4:	movw	r0, #53904	; 0xd290
   124d8:	movt	r0, #3
   124dc:	mov	r2, r0
   124e0:	ldrd	r0, [r0]
   124e4:	adds	r0, r0, #1
   124e8:	adc	r1, r1, #0
   124ec:	strd	r0, [r2]
   124f0:	bl	13584 <__assert_fail@plt+0x1e24>
   124f4:	cmp	r0, #0
   124f8:	beq	12874 <__assert_fail@plt+0x1114>
   124fc:	add	r7, r4, #32
   12500:	ldr	r2, [r0]
   12504:	ldr	r1, [r0, #4]
   12508:	sub	r0, r2, #1
   1250c:	ldrb	r3, [r1, r0]
   12510:	cmp	r3, #10
   12514:	mov	r3, #0
   12518:	moveq	r2, r0
   1251c:	mov	r0, #0
   12520:	str	r0, [sp, #4]
   12524:	mov	r0, r7
   12528:	str	r2, [sp]
   1252c:	bl	1af98 <__assert_fail@plt+0x9838>
   12530:	cmn	r0, #1
   12534:	bne	125d4 <__assert_fail@plt+0xe74>
   12538:	bl	1379c <__assert_fail@plt+0x203c>
   1253c:	cmp	sl, #0
   12540:	bleq	13898 <__assert_fail@plt+0x2138>
   12544:	movw	r0, #53904	; 0xd290
   12548:	movt	r0, #3
   1254c:	mov	r2, r0
   12550:	ldrd	r0, [r0]
   12554:	adds	r0, r0, #1
   12558:	adc	r1, r1, #0
   1255c:	strd	r0, [r2]
   12560:	bl	13584 <__assert_fail@plt+0x1e24>
   12564:	cmp	r0, #0
   12568:	bne	12500 <__assert_fail@plt+0xda0>
   1256c:	b	12874 <__assert_fail@plt+0x1114>
   12570:	add	r7, r4, #32
   12574:	movw	r0, #53904	; 0xd290
   12578:	movt	r0, #3
   1257c:	mov	r2, r0
   12580:	ldrd	r0, [r0]
   12584:	adds	r0, r0, #1
   12588:	adc	r1, r1, #0
   1258c:	strd	r0, [r2]
   12590:	bl	13584 <__assert_fail@plt+0x1e24>
   12594:	cmp	r0, #0
   12598:	beq	128a0 <__assert_fail@plt+0x1140>
   1259c:	ldr	r2, [r0]
   125a0:	ldr	r1, [r0, #4]
   125a4:	sub	r0, r2, #1
   125a8:	ldrb	r3, [r1, r0]
   125ac:	cmp	r3, #10
   125b0:	mov	r3, #0
   125b4:	moveq	r2, r0
   125b8:	mov	r0, #0
   125bc:	str	r0, [sp, #4]
   125c0:	mov	r0, r7
   125c4:	str	r2, [sp]
   125c8:	bl	1af98 <__assert_fail@plt+0x9838>
   125cc:	cmn	r0, #1
   125d0:	beq	12574 <__assert_fail@plt+0xe14>
   125d4:	cmn	r0, #2
   125d8:	beq	1292c <__assert_fail@plt+0x11cc>
   125dc:	movw	r0, #53904	; 0xd290
   125e0:	ldrd	r2, [r4]
   125e4:	ldr	r5, [r4, #24]
   125e8:	movt	r0, #3
   125ec:	ldrd	r0, [r0]
   125f0:	adds	r6, r2, r0
   125f4:	movw	r0, #53912	; 0xd298
   125f8:	movt	r0, #3
   125fc:	adc	r3, r3, r1
   12600:	ldr	r0, [r0]
   12604:	cmp	r0, #0
   12608:	bne	1262c <__assert_fail@plt+0xecc>
   1260c:	mov	r7, r3
   12610:	bl	1393c <__assert_fail@plt+0x21dc>
   12614:	cmp	r0, #0
   12618:	beq	129b0 <__assert_fail@plt+0x1250>
   1261c:	movw	r0, #53912	; 0xd298
   12620:	mov	r3, r7
   12624:	movt	r0, #3
   12628:	ldr	r0, [r0]
   1262c:	str	r5, [sp, #20]
   12630:	str	r9, [sp, #36]	; 0x24
   12634:	ldrd	r0, [r0, #16]
   12638:	subs	r2, r6, r0
   1263c:	sbcs	r2, r3, r1
   12640:	blt	128e4 <__assert_fail@plt+0x1184>
   12644:	subs	r7, r6, r0
   12648:	str	r6, [sp, #28]
   1264c:	mov	r5, r4
   12650:	mov	r4, r8
   12654:	str	r3, [sp, #24]
   12658:	sbc	r6, r3, r1
   1265c:	subs	r0, r7, #1
   12660:	sbcs	r0, r6, #0
   12664:	blt	1243c <__assert_fail@plt+0xcdc>
   12668:	mov	r8, #0
   1266c:	mov	r9, #0
   12670:	bl	1379c <__assert_fail@plt+0x203c>
   12674:	cmp	r0, #0
   12678:	beq	128e4 <__assert_fail@plt+0x1184>
   1267c:	cmp	sl, #0
   12680:	bleq	13898 <__assert_fail@plt+0x2138>
   12684:	adds	r8, r8, #1
   12688:	adc	r9, r9, #0
   1268c:	subs	r0, r8, r7
   12690:	sbcs	r0, r9, r6
   12694:	blt	12670 <__assert_fail@plt+0xf10>
   12698:	b	1243c <__assert_fail@plt+0xcdc>
   1269c:	mov	r6, #0
   126a0:	mov	r7, #0
   126a4:	b	126c0 <__assert_fail@plt+0xf60>
   126a8:	movw	r0, #53708	; 0xd1cc
   126ac:	ldr	r7, [sp, #36]	; 0x24
   126b0:	ldr	r5, [sp, #32]
   126b4:	mov	r6, r9
   126b8:	movt	r0, #3
   126bc:	ldr	r0, [r0]
   126c0:	add	r8, r0, r5, lsl #6
   126c4:	ldrb	r1, [r8, #28]
   126c8:	cmp	r1, #0
   126cc:	bne	126e0 <__assert_fail@plt+0xf80>
   126d0:	ldrd	r2, [r8, #16]
   126d4:	subs	r1, r2, r6
   126d8:	sbcs	r1, r3, r7
   126dc:	blt	127f0 <__assert_fail@plt+0x1090>
   126e0:	adds	r9, r6, #1
   126e4:	adc	r0, r7, #0
   126e8:	str	r0, [sp, #36]	; 0x24
   126ec:	ldrd	r4, [r8, #8]
   126f0:	bl	13434 <__assert_fail@plt+0x1cd4>
   126f4:	movw	r0, #53904	; 0xd290
   126f8:	movt	r0, #3
   126fc:	ldrd	r0, [r0]
   12700:	adds	r0, r0, #1
   12704:	adc	r1, r1, #0
   12708:	bl	13584 <__assert_fail@plt+0x1e24>
   1270c:	cmp	r0, #0
   12710:	bne	12728 <__assert_fail@plt+0xfc8>
   12714:	movw	r0, #53718	; 0xd1d6
   12718:	movt	r0, #3
   1271c:	ldrb	r0, [r0]
   12720:	cmp	r0, #1
   12724:	beq	129dc <__assert_fail@plt+0x127c>
   12728:	movw	r0, #53912	; 0xd298
   1272c:	movt	r0, #3
   12730:	ldr	r0, [r0]
   12734:	cmp	r0, #0
   12738:	bne	12754 <__assert_fail@plt+0xff4>
   1273c:	bl	1393c <__assert_fail@plt+0x21dc>
   12740:	cmp	r0, #0
   12744:	beq	129b0 <__assert_fail@plt+0x1250>
   12748:	movw	r0, #53912	; 0xd298
   1274c:	movt	r0, #3
   12750:	ldr	r0, [r0]
   12754:	ldr	r2, [sp, #36]	; 0x24
   12758:	umull	sl, r1, r4, r9
   1275c:	str	r7, [sp, #24]
   12760:	str	r6, [sp, #28]
   12764:	mla	r1, r4, r2, r1
   12768:	mla	r4, r5, r9, r1
   1276c:	ldr	r5, [r0, #16]
   12770:	ldr	r7, [r0, #20]
   12774:	b	1277c <__assert_fail@plt+0x101c>
   12778:	bl	13898 <__assert_fail@plt+0x2138>
   1277c:	subs	r0, r5, sl
   12780:	sbcs	r0, r7, r4
   12784:	bge	127a0 <__assert_fail@plt+0x1040>
   12788:	adds	r5, r5, #1
   1278c:	adc	r7, r7, #0
   12790:	bl	1379c <__assert_fail@plt+0x203c>
   12794:	cmp	r0, #0
   12798:	bne	12778 <__assert_fail@plt+0x1018>
   1279c:	b	128d4 <__assert_fail@plt+0x1174>
   127a0:	bl	13134 <__assert_fail@plt+0x19d4>
   127a4:	movw	r0, #53718	; 0xd1d6
   127a8:	movt	r0, #3
   127ac:	ldrb	r0, [r0]
   127b0:	cmp	r0, #1
   127b4:	bleq	1379c <__assert_fail@plt+0x203c>
   127b8:	movw	r0, #53904	; 0xd290
   127bc:	movt	r0, #3
   127c0:	ldrd	r0, [r0]
   127c4:	adds	r0, r0, #1
   127c8:	adc	r1, r1, #0
   127cc:	bl	13584 <__assert_fail@plt+0x1e24>
   127d0:	cmp	r0, #0
   127d4:	bne	126a8 <__assert_fail@plt+0xf48>
   127d8:	movw	r0, #53718	; 0xd1d6
   127dc:	movt	r0, #3
   127e0:	ldrb	r0, [r0]
   127e4:	cmp	r0, #0
   127e8:	bne	126a8 <__assert_fail@plt+0xf48>
   127ec:	b	128d4 <__assert_fail@plt+0x1174>
   127f0:	movw	r1, #53712	; 0xd1d0
   127f4:	add	r5, r5, #1
   127f8:	movt	r1, #3
   127fc:	ldr	r1, [r1]
   12800:	cmp	r5, r1
   12804:	blt	1241c <__assert_fail@plt+0xcbc>
   12808:	bl	13434 <__assert_fail@plt+0x1cd4>
   1280c:	b	12814 <__assert_fail@plt+0x10b4>
   12810:	bl	13898 <__assert_fail@plt+0x2138>
   12814:	bl	1379c <__assert_fail@plt+0x203c>
   12818:	cmp	r0, #0
   1281c:	bne	12810 <__assert_fail@plt+0x10b0>
   12820:	bl	13134 <__assert_fail@plt+0x19d4>
   12824:	mov	r0, #0
   12828:	bl	11748 <close@plt>
   1282c:	cmp	r0, #0
   12830:	moveq	r0, #0
   12834:	subeq	sp, fp, #48	; 0x30
   12838:	vpopeq	{d8-d9}
   1283c:	addeq	sp, sp, #4
   12840:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12844:	bl	11640 <__errno_location@plt>
   12848:	ldr	r4, [r0]
   1284c:	movw	r1, #45476	; 0xb1a4
   12850:	mov	r0, #0
   12854:	mov	r2, #5
   12858:	movt	r1, #2
   1285c:	bl	114e4 <dcgettext@plt>
   12860:	mov	r2, r0
   12864:	mov	r0, #0
   12868:	mov	r1, r4
   1286c:	bl	11598 <error@plt>
   12870:	bl	11898 <__assert_fail@plt+0x138>
   12874:	ldrb	r0, [r6]
   12878:	cmp	r0, #0
   1287c:	beq	12cb4 <__assert_fail@plt+0x1554>
   12880:	cmp	sl, #0
   12884:	beq	12890 <__assert_fail@plt+0x1130>
   12888:	b	128cc <__assert_fail@plt+0x116c>
   1288c:	bl	13898 <__assert_fail@plt+0x2138>
   12890:	bl	1379c <__assert_fail@plt+0x203c>
   12894:	cmp	r0, #0
   12898:	bne	1288c <__assert_fail@plt+0x112c>
   1289c:	b	128c8 <__assert_fail@plt+0x1168>
   128a0:	ldrb	r0, [r6]
   128a4:	cmp	r0, #0
   128a8:	beq	12cb4 <__assert_fail@plt+0x1554>
   128ac:	cmp	sl, #0
   128b0:	beq	128bc <__assert_fail@plt+0x115c>
   128b4:	b	128cc <__assert_fail@plt+0x116c>
   128b8:	bl	13898 <__assert_fail@plt+0x2138>
   128bc:	bl	1379c <__assert_fail@plt+0x203c>
   128c0:	cmp	r0, #0
   128c4:	bne	128b8 <__assert_fail@plt+0x1158>
   128c8:	bl	13134 <__assert_fail@plt+0x19d4>
   128cc:	mov	r0, #0
   128d0:	bl	1161c <exit@plt>
   128d4:	ldr	r2, [sp, #28]
   128d8:	ldr	r3, [sp, #24]
   128dc:	mov	r0, r8
   128e0:	bl	13dd4 <__assert_fail@plt+0x2674>
   128e4:	movw	r1, #47663	; 0xba2f
   128e8:	mov	r0, #0
   128ec:	mov	r2, #5
   128f0:	movt	r1, #2
   128f4:	bl	114e4 <dcgettext@plt>
   128f8:	mov	r4, r0
   128fc:	movw	r0, #53704	; 0xd1c8
   12900:	ldr	r1, [sp, #20]
   12904:	movt	r0, #3
   12908:	ldr	r0, [r0]
   1290c:	ldr	r0, [r0, r1, lsl #2]
   12910:	bl	15f84 <__assert_fail@plt+0x4824>
   12914:	mov	r3, r0
   12918:	mov	r0, #0
   1291c:	mov	r1, #0
   12920:	mov	r2, r4
   12924:	bl	11598 <error@plt>
   12928:	bl	11898 <__assert_fail@plt+0x138>
   1292c:	movw	r1, #47512	; 0xb998
   12930:	mov	r0, #0
   12934:	mov	r2, #5
   12938:	movt	r1, #2
   1293c:	bl	114e4 <dcgettext@plt>
   12940:	mov	r2, r0
   12944:	mov	r0, #0
   12948:	mov	r1, #0
   1294c:	bl	11598 <error@plt>
   12950:	bl	11898 <__assert_fail@plt+0x138>
   12954:	cmn	r0, #3
   12958:	bne	12ab4 <__assert_fail@plt+0x1354>
   1295c:	movw	r0, #53596	; 0xd15c
   12960:	movw	r2, #45419	; 0xb16b
   12964:	mov	r1, #0
   12968:	movw	r7, #45407	; 0xb15f
   1296c:	movt	r0, #3
   12970:	movt	r2, #2
   12974:	str	r1, [sp, #8]
   12978:	movw	r1, #45386	; 0xb14a
   1297c:	movt	r7, #2
   12980:	ldr	r3, [r0]
   12984:	movw	r0, #53692	; 0xd1bc
   12988:	str	r2, [sp, #4]
   1298c:	movw	r2, #45393	; 0xb151
   12990:	movt	r1, #2
   12994:	str	r7, [sp]
   12998:	movt	r0, #3
   1299c:	movt	r2, #2
   129a0:	ldr	r0, [r0]
   129a4:	bl	279fc <__assert_fail@plt+0x1629c>
   129a8:	mov	r0, #0
   129ac:	bl	1161c <exit@plt>
   129b0:	bl	11640 <__errno_location@plt>
   129b4:	ldr	r4, [r0]
   129b8:	movw	r1, #47641	; 0xba19
   129bc:	mov	r0, #0
   129c0:	mov	r2, #5
   129c4:	movt	r1, #2
   129c8:	bl	114e4 <dcgettext@plt>
   129cc:	mov	r2, r0
   129d0:	mov	r0, #1
   129d4:	mov	r1, r4
   129d8:	bl	11598 <error@plt>
   129dc:	mov	r0, r8
   129e0:	mov	r2, r6
   129e4:	mov	r3, r7
   129e8:	bl	13dd4 <__assert_fail@plt+0x2674>
   129ec:	movw	r1, #47327	; 0xb8df
   129f0:	mov	r0, #0
   129f4:	mov	r2, #5
   129f8:	movt	r1, #2
   129fc:	bl	114e4 <dcgettext@plt>
   12a00:	mov	r2, r0
   12a04:	mov	r0, #1
   12a08:	mov	r1, #0
   12a0c:	mov	r3, r7
   12a10:	str	r4, [sp]
   12a14:	bl	11598 <error@plt>
   12a18:	movw	r1, #47362	; 0xb902
   12a1c:	mov	r4, r0
   12a20:	mov	r0, #0
   12a24:	mov	r2, #5
   12a28:	movt	r1, #2
   12a2c:	bl	114e4 <dcgettext@plt>
   12a30:	mov	r5, r0
   12a34:	ldr	r0, [sp, #24]
   12a38:	bl	15f84 <__assert_fail@plt+0x4824>
   12a3c:	mov	r3, r0
   12a40:	mov	r0, #0
   12a44:	mov	r1, #0
   12a48:	mov	r2, r5
   12a4c:	str	r4, [sp]
   12a50:	bl	11598 <error@plt>
   12a54:	bl	11898 <__assert_fail@plt+0x138>
   12a58:	movw	r1, #47147	; 0xb82b
   12a5c:	mov	r0, #0
   12a60:	mov	r2, #5
   12a64:	movt	r1, #2
   12a68:	bl	114e4 <dcgettext@plt>
   12a6c:	mov	r4, r0
   12a70:	ldr	r0, [sp, #36]	; 0x24
   12a74:	ldr	r0, [r0, r8, lsl #2]
   12a78:	b	12bf8 <__assert_fail@plt+0x1498>
   12a7c:	cmp	r6, #0
   12a80:	bne	12a90 <__assert_fail@plt+0x1330>
   12a84:	movw	r1, #46942	; 0xb75e
   12a88:	movt	r1, #2
   12a8c:	b	12b18 <__assert_fail@plt+0x13b8>
   12a90:	bl	11610 <__ctype_b_loc@plt>
   12a94:	ldr	r0, [r0]
   12a98:	add	r0, r0, r6, lsl #1
   12a9c:	ldrb	r0, [r0, #1]
   12aa0:	tst	r0, #64	; 0x40
   12aa4:	bne	12bb4 <__assert_fail@plt+0x1454>
   12aa8:	movw	r1, #47024	; 0xb7b0
   12aac:	movt	r1, #2
   12ab0:	b	12bbc <__assert_fail@plt+0x145c>
   12ab4:	cmn	r0, #2
   12ab8:	bne	12c60 <__assert_fail@plt+0x1500>
   12abc:	mov	r0, #0
   12ac0:	bl	12cfc <__assert_fail@plt+0x159c>
   12ac4:	movw	r1, #47397	; 0xb925
   12ac8:	mov	r0, #0
   12acc:	mov	r2, #5
   12ad0:	movt	r1, #2
   12ad4:	bl	114e4 <dcgettext@plt>
   12ad8:	mov	r4, r0
   12adc:	ldr	r0, [sp, #24]
   12ae0:	b	12bf8 <__assert_fail@plt+0x1498>
   12ae4:	movw	r1, #47470	; 0xb96e
   12ae8:	mov	r0, #0
   12aec:	mov	r2, #5
   12af0:	movt	r1, #2
   12af4:	bl	114e4 <dcgettext@plt>
   12af8:	mov	r4, r0
   12afc:	movw	r0, #53704	; 0xd1c8
   12b00:	movt	r0, #3
   12b04:	ldr	r0, [r0]
   12b08:	ldr	r0, [r0, r7, lsl #2]
   12b0c:	b	12bf8 <__assert_fail@plt+0x1498>
   12b10:	movw	r1, #46848	; 0xb700
   12b14:	movt	r1, #2
   12b18:	mov	r0, #0
   12b1c:	mov	r2, #5
   12b20:	bl	114e4 <dcgettext@plt>
   12b24:	mov	r2, r0
   12b28:	mov	r0, #1
   12b2c:	mov	r1, #0
   12b30:	bl	11598 <error@plt>
   12b34:	movw	r1, #47167	; 0xb83f
   12b38:	mov	r0, #0
   12b3c:	mov	r2, #5
   12b40:	movt	r1, #2
   12b44:	bl	114e4 <dcgettext@plt>
   12b48:	mov	r2, r0
   12b4c:	ldr	r0, [sp, #36]	; 0x24
   12b50:	ldr	r3, [r0, r8, lsl #2]
   12b54:	mov	r0, #1
   12b58:	mov	r1, #0
   12b5c:	bl	11598 <error@plt>
   12b60:	movw	r1, #47209	; 0xb869
   12b64:	mov	r0, #0
   12b68:	mov	r2, #5
   12b6c:	movt	r1, #2
   12b70:	bl	114e4 <dcgettext@plt>
   12b74:	mov	r4, r0
   12b78:	ldr	r0, [sp, #36]	; 0x24
   12b7c:	ldr	r0, [r0, r8, lsl #2]
   12b80:	bl	15f84 <__assert_fail@plt+0x4824>
   12b84:	mov	r5, r0
   12b88:	movw	r0, #53888	; 0xd280
   12b8c:	add	r2, sp, #40	; 0x28
   12b90:	movt	r0, #3
   12b94:	ldrd	r0, [r0]
   12b98:	bl	14290 <__assert_fail@plt+0x2b30>
   12b9c:	str	r0, [sp]
   12ba0:	mov	r0, #1
   12ba4:	mov	r1, #0
   12ba8:	mov	r2, r4
   12bac:	mov	r3, r5
   12bb0:	bl	11598 <error@plt>
   12bb4:	movw	r1, #46981	; 0xb785
   12bb8:	movt	r1, #2
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, #5
   12bc4:	bl	114e4 <dcgettext@plt>
   12bc8:	mov	r2, r0
   12bcc:	mov	r0, #1
   12bd0:	mov	r1, #0
   12bd4:	mov	r3, r6
   12bd8:	bl	11598 <error@plt>
   12bdc:	movw	r1, #47434	; 0xb94a
   12be0:	mov	r0, #0
   12be4:	mov	r2, #5
   12be8:	movt	r1, #2
   12bec:	bl	114e4 <dcgettext@plt>
   12bf0:	mov	r4, r0
   12bf4:	mov	r0, r6
   12bf8:	bl	15f84 <__assert_fail@plt+0x4824>
   12bfc:	mov	r3, r0
   12c00:	mov	r0, #1
   12c04:	mov	r1, #0
   12c08:	mov	r2, r4
   12c0c:	bl	11598 <error@plt>
   12c10:	bl	11860 <__assert_fail@plt+0x100>
   12c14:	ldr	r1, [sp, #32]
   12c18:	cmp	r0, r1
   12c1c:	bge	12cd0 <__assert_fail@plt+0x1570>
   12c20:	movw	r1, #45451	; 0xb18b
   12c24:	mov	r0, #0
   12c28:	mov	r2, #5
   12c2c:	movt	r1, #2
   12c30:	bl	114e4 <dcgettext@plt>
   12c34:	mov	r4, r0
   12c38:	ldr	r0, [sp, #36]	; 0x24
   12c3c:	ldr	r1, [sp, #32]
   12c40:	add	r0, r0, r1, lsl #2
   12c44:	ldr	r0, [r0, #-4]
   12c48:	bl	15f84 <__assert_fail@plt+0x4824>
   12c4c:	mov	r3, r0
   12c50:	mov	r0, #0
   12c54:	mov	r1, #0
   12c58:	mov	r2, r4
   12c5c:	bl	11598 <error@plt>
   12c60:	mov	r0, #1
   12c64:	bl	12cfc <__assert_fail@plt+0x159c>
   12c68:	movw	r1, #46896	; 0xb730
   12c6c:	movt	r1, #2
   12c70:	b	12b18 <__assert_fail@plt+0x13b8>
   12c74:	bl	11640 <__errno_location@plt>
   12c78:	ldr	r4, [r0]
   12c7c:	movw	r1, #47120	; 0xb810
   12c80:	mov	r0, #0
   12c84:	mov	r2, #5
   12c88:	movt	r1, #2
   12c8c:	bl	114e4 <dcgettext@plt>
   12c90:	mov	r5, r0
   12c94:	mov	r0, #4
   12c98:	mov	r1, r6
   12c9c:	bl	15a5c <__assert_fail@plt+0x42fc>
   12ca0:	mov	r3, r0
   12ca4:	mov	r0, #1
   12ca8:	mov	r1, r4
   12cac:	mov	r2, r5
   12cb0:	bl	11598 <error@plt>
   12cb4:	cmp	sl, #0
   12cb8:	mov	r0, r4
   12cbc:	mov	r2, r8
   12cc0:	mov	r3, r9
   12cc4:	movwne	sl, #1
   12cc8:	str	sl, [sp]
   12ccc:	bl	1369c <__assert_fail@plt+0x1f3c>
   12cd0:	movw	r1, #45435	; 0xb17b
   12cd4:	mov	r0, #0
   12cd8:	mov	r2, #5
   12cdc:	movt	r1, #2
   12ce0:	bl	114e4 <dcgettext@plt>
   12ce4:	mov	r2, r0
   12ce8:	mov	r0, #0
   12cec:	mov	r1, #0
   12cf0:	bl	11598 <error@plt>
   12cf4:	mov	r0, #1
   12cf8:	bl	12cfc <__assert_fail@plt+0x159c>
   12cfc:	push	{fp, lr}
   12d00:	mov	fp, sp
   12d04:	sub	sp, sp, #56	; 0x38
   12d08:	mov	r4, r0
   12d0c:	cmp	r0, #0
   12d10:	bne	12fa4 <__assert_fail@plt+0x1844>
   12d14:	movw	r1, #45526	; 0xb1d6
   12d18:	mov	r0, #0
   12d1c:	mov	r2, #5
   12d20:	movt	r1, #2
   12d24:	bl	114e4 <dcgettext@plt>
   12d28:	mov	r1, r0
   12d2c:	movw	r0, #53948	; 0xd2bc
   12d30:	movt	r0, #3
   12d34:	ldr	r2, [r0]
   12d38:	mov	r0, #1
   12d3c:	bl	11688 <__printf_chk@plt>
   12d40:	movw	r1, #45565	; 0xb1fd
   12d44:	mov	r0, #0
   12d48:	mov	r2, #5
   12d4c:	movt	r1, #2
   12d50:	bl	114e4 <dcgettext@plt>
   12d54:	movw	r7, #53692	; 0xd1bc
   12d58:	movt	r7, #3
   12d5c:	ldr	r1, [r7]
   12d60:	bl	113dc <fputs_unlocked@plt>
   12d64:	movw	r1, #45699	; 0xb283
   12d68:	mov	r0, #0
   12d6c:	mov	r2, #5
   12d70:	movt	r1, #2
   12d74:	bl	114e4 <dcgettext@plt>
   12d78:	ldr	r1, [r7]
   12d7c:	bl	113dc <fputs_unlocked@plt>
   12d80:	movw	r1, #47694	; 0xba4e
   12d84:	mov	r0, #0
   12d88:	mov	r2, #5
   12d8c:	movt	r1, #2
   12d90:	bl	114e4 <dcgettext@plt>
   12d94:	ldr	r1, [r7]
   12d98:	bl	113dc <fputs_unlocked@plt>
   12d9c:	movw	r1, #45734	; 0xb2a6
   12da0:	mov	r0, #0
   12da4:	mov	r2, #5
   12da8:	movt	r1, #2
   12dac:	bl	114e4 <dcgettext@plt>
   12db0:	ldr	r1, [r7]
   12db4:	bl	113dc <fputs_unlocked@plt>
   12db8:	movw	r1, #45922	; 0xb362
   12dbc:	mov	r0, #0
   12dc0:	mov	r2, #5
   12dc4:	movt	r1, #2
   12dc8:	bl	114e4 <dcgettext@plt>
   12dcc:	ldr	r1, [r7]
   12dd0:	bl	113dc <fputs_unlocked@plt>
   12dd4:	movw	r1, #45988	; 0xb3a4
   12dd8:	mov	r0, #0
   12ddc:	mov	r2, #5
   12de0:	movt	r1, #2
   12de4:	bl	114e4 <dcgettext@plt>
   12de8:	ldr	r1, [r7]
   12dec:	bl	113dc <fputs_unlocked@plt>
   12df0:	movw	r1, #46187	; 0xb46b
   12df4:	mov	r0, #0
   12df8:	mov	r2, #5
   12dfc:	movt	r1, #2
   12e00:	bl	114e4 <dcgettext@plt>
   12e04:	ldr	r1, [r7]
   12e08:	bl	113dc <fputs_unlocked@plt>
   12e0c:	movw	r1, #46232	; 0xb498
   12e10:	mov	r0, #0
   12e14:	mov	r2, #5
   12e18:	movt	r1, #2
   12e1c:	bl	114e4 <dcgettext@plt>
   12e20:	ldr	r1, [r7]
   12e24:	bl	113dc <fputs_unlocked@plt>
   12e28:	movw	r1, #46286	; 0xb4ce
   12e2c:	mov	r0, #0
   12e30:	mov	r2, #5
   12e34:	movt	r1, #2
   12e38:	bl	114e4 <dcgettext@plt>
   12e3c:	ldr	r1, [r7]
   12e40:	bl	113dc <fputs_unlocked@plt>
   12e44:	movw	r0, #48304	; 0xbcb0
   12e48:	mov	r2, #48	; 0x30
   12e4c:	mov	r6, sp
   12e50:	movw	r5, #45386	; 0xb14a
   12e54:	movt	r0, #2
   12e58:	movt	r5, #2
   12e5c:	add	r1, r0, #32
   12e60:	add	r3, r0, #16
   12e64:	vld1.64	{d18-d19}, [r0], r2
   12e68:	vld1.64	{d16-d17}, [r1]
   12e6c:	vld1.64	{d20-d21}, [r3]
   12e70:	add	r1, r6, #32
   12e74:	vldr	d22, [r0]
   12e78:	add	r0, r6, #16
   12e7c:	vst1.64	{d16-d17}, [r1]
   12e80:	movw	r1, #47769	; 0xba99
   12e84:	vst1.64	{d20-d21}, [r0]
   12e88:	mov	r0, r6
   12e8c:	vst1.64	{d18-d19}, [r0], r2
   12e90:	movt	r1, #2
   12e94:	vstr	d22, [r0]
   12e98:	mov	r0, r5
   12e9c:	bl	11418 <strcmp@plt>
   12ea0:	cmp	r0, #0
   12ea4:	ldrne	r1, [r6, #8]!
   12ea8:	cmpne	r1, #0
   12eac:	bne	12e98 <__assert_fail@plt+0x1738>
   12eb0:	ldr	r6, [r6, #4]
   12eb4:	movw	r1, #47864	; 0xbaf8
   12eb8:	mov	r0, #0
   12ebc:	mov	r2, #5
   12ec0:	movt	r1, #2
   12ec4:	bl	114e4 <dcgettext@plt>
   12ec8:	movw	r2, #45393	; 0xb151
   12ecc:	movw	r3, #47887	; 0xbb0f
   12ed0:	mov	r1, r0
   12ed4:	mov	r0, #1
   12ed8:	movt	r2, #2
   12edc:	movt	r3, #2
   12ee0:	bl	11688 <__printf_chk@plt>
   12ee4:	cmp	r6, #0
   12ee8:	mov	r0, #5
   12eec:	mov	r1, #0
   12ef0:	moveq	r6, r5
   12ef4:	bl	116d0 <setlocale@plt>
   12ef8:	cmp	r0, #0
   12efc:	beq	12f34 <__assert_fail@plt+0x17d4>
   12f00:	movw	r1, #47927	; 0xbb37
   12f04:	mov	r2, #3
   12f08:	movt	r1, #2
   12f0c:	bl	11730 <strncmp@plt>
   12f10:	cmp	r0, #0
   12f14:	beq	12f34 <__assert_fail@plt+0x17d4>
   12f18:	movw	r1, #47931	; 0xbb3b
   12f1c:	mov	r0, #0
   12f20:	mov	r2, #5
   12f24:	movt	r1, #2
   12f28:	bl	114e4 <dcgettext@plt>
   12f2c:	ldr	r1, [r7]
   12f30:	bl	113dc <fputs_unlocked@plt>
   12f34:	movw	r1, #48002	; 0xbb82
   12f38:	mov	r0, #0
   12f3c:	mov	r2, #5
   12f40:	movt	r1, #2
   12f44:	bl	114e4 <dcgettext@plt>
   12f48:	movw	r2, #47887	; 0xbb0f
   12f4c:	mov	r1, r0
   12f50:	mov	r0, #1
   12f54:	mov	r3, r5
   12f58:	movt	r2, #2
   12f5c:	bl	11688 <__printf_chk@plt>
   12f60:	movw	r1, #48029	; 0xbb9d
   12f64:	mov	r0, #0
   12f68:	mov	r2, #5
   12f6c:	movt	r1, #2
   12f70:	bl	114e4 <dcgettext@plt>
   12f74:	movw	r3, #46723	; 0xb683
   12f78:	mov	r1, r0
   12f7c:	movw	r0, #47797	; 0xbab5
   12f80:	cmp	r6, r5
   12f84:	mov	r2, r6
   12f88:	movt	r0, #2
   12f8c:	movt	r3, #2
   12f90:	moveq	r3, r0
   12f94:	mov	r0, #1
   12f98:	bl	11688 <__printf_chk@plt>
   12f9c:	mov	r0, r4
   12fa0:	bl	1161c <exit@plt>
   12fa4:	movw	r0, #53688	; 0xd1b8
   12fa8:	movw	r1, #45487	; 0xb1af
   12fac:	mov	r2, #5
   12fb0:	movt	r0, #3
   12fb4:	movt	r1, #2
   12fb8:	ldr	r5, [r0]
   12fbc:	mov	r0, #0
   12fc0:	bl	114e4 <dcgettext@plt>
   12fc4:	mov	r2, r0
   12fc8:	movw	r0, #53948	; 0xd2bc
   12fcc:	mov	r1, #1
   12fd0:	movt	r0, #3
   12fd4:	ldr	r3, [r0]
   12fd8:	mov	r0, r5
   12fdc:	bl	116a0 <__fprintf_chk@plt>
   12fe0:	mov	r0, r4
   12fe4:	bl	1161c <exit@plt>
   12fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fec:	add	fp, sp, #28
   12ff0:	sub	sp, sp, #12
   12ff4:	mov	r4, r0
   12ff8:	movw	r0, #53717	; 0xd1d5
   12ffc:	movt	r0, #3
   13000:	ldrb	r0, [r0]
   13004:	cmp	r0, #0
   13008:	beq	130d0 <__assert_fail@plt+0x1970>
   1300c:	movw	r0, #53880	; 0xd278
   13010:	str	r4, [sp, #8]
   13014:	movt	r0, #3
   13018:	ldr	r0, [r0]
   1301c:	cmp	r0, #1
   13020:	blt	130bc <__assert_fail@plt+0x195c>
   13024:	movw	r6, #53732	; 0xd1e4
   13028:	movw	r4, #53720	; 0xd1d8
   1302c:	movw	r5, #53724	; 0xd1dc
   13030:	movw	sl, #46743	; 0xb697
   13034:	add	r7, r0, #1
   13038:	movt	r6, #3
   1303c:	movt	r4, #3
   13040:	movt	r5, #3
   13044:	movt	sl, #2
   13048:	ldr	r0, [r6]
   1304c:	ldr	r1, [r4]
   13050:	bl	11574 <strcpy@plt>
   13054:	ldr	r9, [r5]
   13058:	ldr	r8, [r6]
   1305c:	ldr	r0, [r4]
   13060:	bl	11628 <strlen@plt>
   13064:	add	r0, r8, r0
   13068:	sub	r1, r7, #2
   1306c:	cmp	r9, #0
   13070:	beq	13084 <__assert_fail@plt+0x1924>
   13074:	ldr	r3, [r5]
   13078:	str	r1, [sp]
   1307c:	mov	r1, #1
   13080:	b	130a0 <__assert_fail@plt+0x1940>
   13084:	movw	r2, #53592	; 0xd158
   13088:	mov	r3, sl
   1308c:	movt	r2, #3
   13090:	ldr	r2, [r2]
   13094:	str	r1, [sp, #4]
   13098:	mov	r1, #1
   1309c:	str	r2, [sp]
   130a0:	mvn	r2, #0
   130a4:	bl	11658 <__sprintf_chk@plt>
   130a8:	ldr	r0, [r6]
   130ac:	bl	114f0 <unlink@plt>
   130b0:	sub	r7, r7, #1
   130b4:	cmp	r7, #1
   130b8:	bgt	13048 <__assert_fail@plt+0x18e8>
   130bc:	movw	r1, #53880	; 0xd278
   130c0:	mov	r0, #0
   130c4:	movt	r1, #3
   130c8:	str	r0, [r1]
   130cc:	ldr	r4, [sp, #8]
   130d0:	mov	r0, r4
   130d4:	mov	r1, #0
   130d8:	bl	114c0 <signal@plt>
   130dc:	mov	r0, r4
   130e0:	sub	sp, fp, #28
   130e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e8:	b	113f4 <raise@plt>
   130ec:	push	{r4, sl, fp, lr}
   130f0:	add	fp, sp, #8
   130f4:	sub	sp, sp, #128	; 0x80
   130f8:	bl	13134 <__assert_fail@plt+0x19d4>
   130fc:	movw	r1, #53736	; 0xd1e8
   13100:	mov	r4, sp
   13104:	mov	r0, #0
   13108:	movt	r1, #3
   1310c:	mov	r2, r4
   13110:	bl	11448 <sigprocmask@plt>
   13114:	mov	r0, #0
   13118:	bl	132fc <__assert_fail@plt+0x1b9c>
   1311c:	mov	r0, #2
   13120:	mov	r1, r4
   13124:	mov	r2, #0
   13128:	bl	11448 <sigprocmask@plt>
   1312c:	sub	sp, fp, #8
   13130:	pop	{r4, sl, fp, pc}
   13134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13138:	add	fp, sp, #24
   1313c:	sub	sp, sp, #128	; 0x80
   13140:	movw	r7, #53864	; 0xd268
   13144:	movt	r7, #3
   13148:	ldr	r0, [r7]
   1314c:	cmp	r0, #0
   13150:	beq	1326c <__assert_fail@plt+0x1b0c>
   13154:	ldrb	r1, [r0]
   13158:	tst	r1, #32
   1315c:	bne	13274 <__assert_fail@plt+0x1b14>
   13160:	bl	13fb0 <__assert_fail@plt+0x2850>
   13164:	cmp	r0, #0
   13168:	bne	132b8 <__assert_fail@plt+0x1b58>
   1316c:	movw	r0, #53872	; 0xd270
   13170:	movt	r0, #3
   13174:	ldrd	r0, [r0]
   13178:	orrs	r2, r0, r1
   1317c:	bne	13224 <__assert_fail@plt+0x1ac4>
   13180:	movw	r2, #53728	; 0xd1e0
   13184:	movt	r2, #3
   13188:	ldrb	r2, [r2]
   1318c:	cmp	r2, #1
   13190:	bne	13224 <__assert_fail@plt+0x1ac4>
   13194:	movw	r1, #53736	; 0xd1e8
   13198:	mov	r5, sp
   1319c:	mov	r0, #0
   131a0:	movt	r1, #3
   131a4:	mov	r2, r5
   131a8:	bl	11448 <sigprocmask@plt>
   131ac:	movw	r8, #53868	; 0xd26c
   131b0:	movt	r8, #3
   131b4:	ldr	r0, [r8]
   131b8:	bl	114f0 <unlink@plt>
   131bc:	mov	r6, r0
   131c0:	bl	11640 <__errno_location@plt>
   131c4:	ldr	r4, [r0]
   131c8:	movw	r0, #53880	; 0xd278
   131cc:	mov	r2, #0
   131d0:	movt	r0, #3
   131d4:	ldr	r1, [r0]
   131d8:	sub	r1, r1, #1
   131dc:	str	r1, [r0]
   131e0:	mov	r0, #2
   131e4:	mov	r1, r5
   131e8:	bl	11448 <sigprocmask@plt>
   131ec:	cmp	r6, #0
   131f0:	cmpne	r4, #2
   131f4:	beq	13264 <__assert_fail@plt+0x1b04>
   131f8:	ldr	r2, [r8]
   131fc:	mov	r0, #0
   13200:	mov	r1, #3
   13204:	bl	15cd8 <__assert_fail@plt+0x4578>
   13208:	movw	r2, #47263	; 0xb89f
   1320c:	mov	r3, r0
   13210:	mov	r0, #0
   13214:	mov	r1, r4
   13218:	movt	r2, #2
   1321c:	bl	11598 <error@plt>
   13220:	b	13264 <__assert_fail@plt+0x1b04>
   13224:	movw	r2, #53716	; 0xd1d4
   13228:	movt	r2, #3
   1322c:	ldrb	r2, [r2]
   13230:	cmp	r2, #0
   13234:	bne	13264 <__assert_fail@plt+0x1b04>
   13238:	movw	r2, #53692	; 0xd1bc
   1323c:	movt	r2, #3
   13240:	ldr	r4, [r2]
   13244:	mov	r2, sp
   13248:	bl	14290 <__assert_fail@plt+0x2b30>
   1324c:	movw	r2, #49225	; 0xc049
   13250:	mov	r3, r0
   13254:	mov	r0, r4
   13258:	mov	r1, #1
   1325c:	movt	r2, #2
   13260:	bl	116a0 <__fprintf_chk@plt>
   13264:	mov	r0, #0
   13268:	str	r0, [r7]
   1326c:	sub	sp, fp, #24
   13270:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13274:	movw	r1, #46724	; 0xb684
   13278:	mov	r0, #0
   1327c:	mov	r2, #5
   13280:	mov	r5, #0
   13284:	movt	r1, #2
   13288:	bl	114e4 <dcgettext@plt>
   1328c:	mov	r4, r0
   13290:	movw	r0, #53868	; 0xd26c
   13294:	movt	r0, #3
   13298:	ldr	r1, [r0]
   1329c:	mov	r0, #4
   132a0:	bl	15a5c <__assert_fail@plt+0x42fc>
   132a4:	mov	r3, r0
   132a8:	mov	r0, #0
   132ac:	mov	r1, #0
   132b0:	mov	r2, r4
   132b4:	b	132f0 <__assert_fail@plt+0x1b90>
   132b8:	bl	11640 <__errno_location@plt>
   132bc:	ldr	r4, [r0]
   132c0:	movw	r0, #53868	; 0xd26c
   132c4:	mov	r1, #3
   132c8:	mov	r5, #0
   132cc:	movt	r0, #3
   132d0:	ldr	r2, [r0]
   132d4:	mov	r0, #0
   132d8:	bl	15cd8 <__assert_fail@plt+0x4578>
   132dc:	movw	r2, #47263	; 0xb89f
   132e0:	mov	r3, r0
   132e4:	mov	r0, #0
   132e8:	mov	r1, r4
   132ec:	movt	r2, #2
   132f0:	bl	11598 <error@plt>
   132f4:	str	r5, [r7]
   132f8:	bl	11898 <__assert_fail@plt+0x138>
   132fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13300:	add	fp, sp, #24
   13304:	mov	r4, r0
   13308:	movw	r0, #53717	; 0xd1d5
   1330c:	movt	r0, #3
   13310:	ldrb	r0, [r0]
   13314:	cmp	r0, #0
   13318:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1331c:	movw	r8, #53880	; 0xd278
   13320:	movt	r8, #3
   13324:	ldr	r0, [r8]
   13328:	cmp	r0, #1
   1332c:	blt	1339c <__assert_fail@plt+0x1c3c>
   13330:	movw	r9, #47263	; 0xb89f
   13334:	add	r5, r0, #1
   13338:	movt	r9, #2
   1333c:	sub	r0, r5, #2
   13340:	bl	133a8 <__assert_fail@plt+0x1c48>
   13344:	mov	r6, r0
   13348:	bl	114f0 <unlink@plt>
   1334c:	cmp	r0, #0
   13350:	beq	13390 <__assert_fail@plt+0x1c30>
   13354:	bl	11640 <__errno_location@plt>
   13358:	ldr	r7, [r0]
   1335c:	cmp	r7, #2
   13360:	beq	13390 <__assert_fail@plt+0x1c30>
   13364:	cmp	r4, #0
   13368:	bne	13390 <__assert_fail@plt+0x1c30>
   1336c:	mov	r0, #0
   13370:	mov	r1, #3
   13374:	mov	r2, r6
   13378:	bl	15cd8 <__assert_fail@plt+0x4578>
   1337c:	mov	r3, r0
   13380:	mov	r0, #0
   13384:	mov	r1, r7
   13388:	mov	r2, r9
   1338c:	bl	11598 <error@plt>
   13390:	sub	r5, r5, #1
   13394:	cmp	r5, #1
   13398:	bgt	1333c <__assert_fail@plt+0x1bdc>
   1339c:	mov	r0, #0
   133a0:	str	r0, [r8]
   133a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   133a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   133ac:	add	fp, sp, #24
   133b0:	sub	sp, sp, #8
   133b4:	movw	r8, #53732	; 0xd1e4
   133b8:	movw	r7, #53720	; 0xd1d8
   133bc:	mov	r4, r0
   133c0:	movt	r8, #3
   133c4:	movt	r7, #3
   133c8:	ldr	r0, [r8]
   133cc:	ldr	r1, [r7]
   133d0:	bl	11574 <strcpy@plt>
   133d4:	movw	r9, #53724	; 0xd1dc
   133d8:	movt	r9, #3
   133dc:	ldr	r5, [r9]
   133e0:	ldr	r6, [r8]
   133e4:	ldr	r0, [r7]
   133e8:	bl	11628 <strlen@plt>
   133ec:	add	r0, r6, r0
   133f0:	cmp	r5, #0
   133f4:	beq	13404 <__assert_fail@plt+0x1ca4>
   133f8:	ldr	r3, [r9]
   133fc:	str	r4, [sp]
   13400:	b	1341c <__assert_fail@plt+0x1cbc>
   13404:	movw	r1, #53592	; 0xd158
   13408:	movw	r3, #46743	; 0xb697
   1340c:	movt	r1, #3
   13410:	movt	r3, #2
   13414:	ldr	r1, [r1]
   13418:	stm	sp, {r1, r4}
   1341c:	mov	r1, #1
   13420:	mvn	r2, #0
   13424:	bl	11658 <__sprintf_chk@plt>
   13428:	ldr	r0, [r8]
   1342c:	sub	sp, fp, #24
   13430:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13438:	add	fp, sp, #28
   1343c:	sub	sp, sp, #140	; 0x8c
   13440:	movw	r8, #53880	; 0xd278
   13444:	movw	r9, #53732	; 0xd1e4
   13448:	movw	r6, #53720	; 0xd1d8
   1344c:	movt	r8, #3
   13450:	movt	r9, #3
   13454:	movt	r6, #3
   13458:	ldr	r7, [r8]
   1345c:	ldr	r0, [r9]
   13460:	ldr	r1, [r6]
   13464:	bl	11574 <strcpy@plt>
   13468:	movw	sl, #53724	; 0xd1dc
   1346c:	movt	sl, #3
   13470:	ldr	r4, [sl]
   13474:	ldr	r5, [r9]
   13478:	ldr	r0, [r6]
   1347c:	bl	11628 <strlen@plt>
   13480:	add	r0, r5, r0
   13484:	cmp	r4, #0
   13488:	beq	13498 <__assert_fail@plt+0x1d38>
   1348c:	ldr	r3, [sl]
   13490:	str	r7, [sp]
   13494:	b	134b0 <__assert_fail@plt+0x1d50>
   13498:	movw	r1, #53592	; 0xd158
   1349c:	movw	r3, #46743	; 0xb697
   134a0:	movt	r1, #3
   134a4:	movt	r3, #2
   134a8:	ldr	r1, [r1]
   134ac:	stm	sp, {r1, r7}
   134b0:	mov	r1, #1
   134b4:	mvn	r2, #0
   134b8:	bl	11658 <__sprintf_chk@plt>
   134bc:	ldr	r2, [r9]
   134c0:	movw	sl, #53868	; 0xd26c
   134c4:	cmn	r7, #-2147483647	; 0x80000001
   134c8:	movt	sl, #3
   134cc:	str	r2, [sl]
   134d0:	beq	1357c <__assert_fail@plt+0x1e1c>
   134d4:	movw	r1, #53736	; 0xd1e8
   134d8:	add	r5, sp, #12
   134dc:	mov	r0, #0
   134e0:	mov	r4, #0
   134e4:	movt	r1, #3
   134e8:	mov	r2, r5
   134ec:	bl	11448 <sigprocmask@plt>
   134f0:	ldr	r0, [sl]
   134f4:	movw	r1, #47692	; 0xba4c
   134f8:	movt	r1, #2
   134fc:	bl	14110 <__assert_fail@plt+0x29b0>
   13500:	mov	r6, r0
   13504:	movw	r0, #53864	; 0xd268
   13508:	movt	r0, #3
   1350c:	cmp	r6, #0
   13510:	str	r6, [r0]
   13514:	addne	r7, r7, #1
   13518:	bl	11640 <__errno_location@plt>
   1351c:	ldr	r9, [r0]
   13520:	mov	r0, #2
   13524:	mov	r1, r5
   13528:	mov	r2, #0
   1352c:	str	r7, [r8]
   13530:	bl	11448 <sigprocmask@plt>
   13534:	cmp	r6, #0
   13538:	movwne	r0, #53872	; 0xd270
   1353c:	movtne	r0, #3
   13540:	strne	r4, [r0]
   13544:	strne	r4, [r0, #4]
   13548:	subne	sp, fp, #28
   1354c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13550:	ldr	r2, [sl]
   13554:	mov	r0, #0
   13558:	mov	r1, #3
   1355c:	bl	15cd8 <__assert_fail@plt+0x4578>
   13560:	movw	r2, #47263	; 0xb89f
   13564:	mov	r3, r0
   13568:	mov	r0, #0
   1356c:	mov	r1, r9
   13570:	movt	r2, #2
   13574:	bl	11598 <error@plt>
   13578:	bl	11898 <__assert_fail@plt+0x138>
   1357c:	mov	r9, #75	; 0x4b
   13580:	b	13554 <__assert_fail@plt+0x1df4>
   13584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13588:	add	fp, sp, #24
   1358c:	movw	r8, #53912	; 0xd298
   13590:	mov	r5, r1
   13594:	mov	r4, r0
   13598:	movt	r8, #3
   1359c:	ldr	r7, [r8]
   135a0:	cmp	r7, #0
   135a4:	bne	135bc <__assert_fail@plt+0x1e5c>
   135a8:	mov	r6, #0
   135ac:	bl	1393c <__assert_fail@plt+0x21dc>
   135b0:	cmp	r0, #0
   135b4:	beq	13674 <__assert_fail@plt+0x1f14>
   135b8:	ldr	r7, [r8]
   135bc:	ldrd	r0, [r7, #8]
   135c0:	mov	r6, #0
   135c4:	subs	r2, r4, r0
   135c8:	sbcs	r2, r5, r1
   135cc:	blt	13674 <__assert_fail@plt+0x1f14>
   135d0:	cmp	r7, #0
   135d4:	beq	1367c <__assert_fail@plt+0x1f1c>
   135d8:	ldr	r2, [r7, #24]
   135dc:	adds	r3, r0, r2
   135e0:	adc	r1, r1, r2, asr #31
   135e4:	subs	r2, r4, r3
   135e8:	sbcs	r1, r5, r1
   135ec:	bge	135f8 <__assert_fail@plt+0x1e98>
   135f0:	mov	r1, r7
   135f4:	b	13640 <__assert_fail@plt+0x1ee0>
   135f8:	ldr	r1, [r7, #40]	; 0x28
   135fc:	cmp	r1, #0
   13600:	bne	1361c <__assert_fail@plt+0x1ebc>
   13604:	bl	1393c <__assert_fail@plt+0x21dc>
   13608:	cmp	r0, #0
   1360c:	beq	13674 <__assert_fail@plt+0x1f14>
   13610:	ldr	r1, [r7, #40]	; 0x28
   13614:	cmp	r1, #0
   13618:	beq	1367c <__assert_fail@plt+0x1f1c>
   1361c:	ldr	r0, [r1, #8]
   13620:	ldr	r3, [r1, #12]
   13624:	ldr	r2, [r1, #24]
   13628:	adds	r7, r0, r2
   1362c:	adc	r2, r3, r2, asr #31
   13630:	subs	r3, r4, r7
   13634:	mov	r7, r1
   13638:	sbcs	r2, r5, r2
   1363c:	bge	135f8 <__assert_fail@plt+0x1e98>
   13640:	ldr	r1, [r1, #32]
   13644:	sub	r2, r4, r0
   13648:	cmp	r2, #80	; 0x50
   1364c:	blt	1366c <__assert_fail@plt+0x1f0c>
   13650:	add	r2, r4, #80	; 0x50
   13654:	sub	r0, r2, r0
   13658:	ldr	r1, [r1, #652]	; 0x28c
   1365c:	sub	r0, r0, #80	; 0x50
   13660:	cmp	r0, #159	; 0x9f
   13664:	bgt	13658 <__assert_fail@plt+0x1ef8>
   13668:	sub	r2, r0, #80	; 0x50
   1366c:	add	r0, r1, r2, lsl #3
   13670:	add	r6, r0, #12
   13674:	mov	r0, r6
   13678:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1367c:	movw	r0, #47547	; 0xb9bb
   13680:	movw	r1, #47549	; 0xb9bd
   13684:	movw	r3, #47562	; 0xb9ca
   13688:	movw	r2, #583	; 0x247
   1368c:	movt	r0, #2
   13690:	movt	r1, #2
   13694:	movt	r3, #2
   13698:	bl	11760 <__assert_fail@plt>
   1369c:	push	{fp, lr}
   136a0:	mov	fp, sp
   136a4:	sub	sp, sp, #32
   136a8:	movw	r9, #53688	; 0xd1b8
   136ac:	movw	r1, #47598	; 0xb9ee
   136b0:	mov	r5, r2
   136b4:	mov	r6, r0
   136b8:	mov	r0, #0
   136bc:	mov	r2, #5
   136c0:	mov	r8, r3
   136c4:	movt	r9, #3
   136c8:	movt	r1, #2
   136cc:	ldr	r7, [r9]
   136d0:	bl	114e4 <dcgettext@plt>
   136d4:	movw	r1, #53704	; 0xd1c8
   136d8:	mov	r4, r0
   136dc:	ldr	r0, [r6, #24]
   136e0:	movt	r1, #3
   136e4:	ldr	r1, [r1]
   136e8:	ldr	r0, [r1, r0, lsl #2]
   136ec:	movw	r1, #53948	; 0xd2bc
   136f0:	movt	r1, #3
   136f4:	ldr	r6, [r1]
   136f8:	bl	15f84 <__assert_fail@plt+0x4824>
   136fc:	str	r0, [sp]
   13700:	mov	r0, r7
   13704:	mov	r1, #1
   13708:	mov	r2, r4
   1370c:	mov	r3, r6
   13710:	bl	116a0 <__fprintf_chk@plt>
   13714:	ldr	r7, [fp, #8]
   13718:	orrs	r0, r5, r8
   1371c:	beq	13764 <__assert_fail@plt+0x2004>
   13720:	ldr	r4, [r9]
   13724:	movw	r1, #47622	; 0xba06
   13728:	mov	r0, #0
   1372c:	mov	r2, #5
   13730:	movt	r1, #2
   13734:	bl	114e4 <dcgettext@plt>
   13738:	mov	r6, r0
   1373c:	add	r2, sp, #11
   13740:	mov	r0, r5
   13744:	mov	r1, r8
   13748:	bl	14290 <__assert_fail@plt+0x2b30>
   1374c:	mov	r3, r0
   13750:	mov	r0, r4
   13754:	mov	r1, #1
   13758:	mov	r2, r6
   1375c:	bl	116a0 <__fprintf_chk@plt>
   13760:	b	13778 <__assert_fail@plt+0x2018>
   13764:	ldr	r0, [r9]
   13768:	movw	r2, #46722	; 0xb682
   1376c:	mov	r1, #1
   13770:	movt	r2, #2
   13774:	bl	116a0 <__fprintf_chk@plt>
   13778:	cmp	r7, #0
   1377c:	beq	13788 <__assert_fail@plt+0x2028>
   13780:	b	13798 <__assert_fail@plt+0x2038>
   13784:	bl	13898 <__assert_fail@plt+0x2138>
   13788:	bl	1379c <__assert_fail@plt+0x203c>
   1378c:	cmp	r0, #0
   13790:	bne	13784 <__assert_fail@plt+0x2024>
   13794:	bl	13134 <__assert_fail@plt+0x19d4>
   13798:	bl	11898 <__assert_fail@plt+0x138>
   1379c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137a0:	add	fp, sp, #24
   137a4:	movw	r7, #53936	; 0xd2b0
   137a8:	movt	r7, #3
   137ac:	ldr	r4, [r7]
   137b0:	cmp	r4, #0
   137b4:	beq	137f0 <__assert_fail@plt+0x2090>
   137b8:	ldr	r0, [r4, #32]
   137bc:	cmp	r0, #0
   137c0:	beq	137d8 <__assert_fail@plt+0x2078>
   137c4:	ldr	r6, [r0, #652]	; 0x28c
   137c8:	bl	141c4 <__assert_fail@plt+0x2a64>
   137cc:	cmp	r6, #0
   137d0:	mov	r0, r6
   137d4:	bne	137c4 <__assert_fail@plt+0x2064>
   137d8:	ldr	r0, [r4, #28]
   137dc:	bl	141c4 <__assert_fail@plt+0x2a64>
   137e0:	mov	r0, r4
   137e4:	bl	141c4 <__assert_fail@plt+0x2a64>
   137e8:	mov	r0, #0
   137ec:	str	r0, [r7]
   137f0:	movw	r6, #53912	; 0xd298
   137f4:	movt	r6, #3
   137f8:	ldr	r0, [r6]
   137fc:	cmp	r0, #0
   13800:	bne	13818 <__assert_fail@plt+0x20b8>
   13804:	mov	r4, #0
   13808:	bl	1393c <__assert_fail@plt+0x21dc>
   1380c:	cmp	r0, #0
   13810:	beq	13890 <__assert_fail@plt+0x2130>
   13814:	ldr	r0, [r6]
   13818:	mov	r1, r0
   1381c:	movw	r4, #53904	; 0xd290
   13820:	ldr	r2, [r1, #16]!
   13824:	movt	r4, #3
   13828:	ldrd	r8, [r4]
   1382c:	ldr	r3, [r1, #4]
   13830:	subs	r5, r8, r2
   13834:	sbcs	r5, r9, r3
   13838:	strdlt	r2, [r4]
   1383c:	adds	r2, r2, #1
   13840:	adc	r3, r3, #0
   13844:	strd	r2, [r1]
   13848:	ldr	r1, [r0, #36]	; 0x24
   1384c:	ldr	r3, [r1, #8]
   13850:	ldr	r2, [r1]
   13854:	add	r5, r3, #1
   13858:	add	r3, r1, r3, lsl #3
   1385c:	add	r4, r3, #12
   13860:	cmp	r5, r2
   13864:	str	r5, [r1, #8]
   13868:	bne	13890 <__assert_fail@plt+0x2130>
   1386c:	ldr	r1, [r1, #652]	; 0x28c
   13870:	str	r1, [r0, #36]	; 0x24
   13874:	cmp	r1, #0
   13878:	ldrne	r1, [r1]
   1387c:	cmpne	r1, #0
   13880:	bne	13890 <__assert_fail@plt+0x2130>
   13884:	str	r0, [r7]
   13888:	ldr	r0, [r0, #40]	; 0x28
   1388c:	str	r0, [r6]
   13890:	mov	r0, r4
   13894:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13898:	push	{r4, r5, r6, r7, fp, lr}
   1389c:	add	fp, sp, #16
   138a0:	movw	r6, #53864	; 0xd268
   138a4:	mov	r4, r0
   138a8:	ldr	r2, [r0]
   138ac:	ldr	r0, [r0, #4]
   138b0:	mov	r1, #1
   138b4:	movt	r6, #3
   138b8:	ldr	r3, [r6]
   138bc:	bl	114cc <fwrite_unlocked@plt>
   138c0:	ldr	r1, [r4]
   138c4:	cmp	r0, r1
   138c8:	bne	138e8 <__assert_fail@plt+0x2188>
   138cc:	movw	r1, #53872	; 0xd270
   138d0:	movt	r1, #3
   138d4:	ldrd	r2, [r1]
   138d8:	adds	r2, r2, r0
   138dc:	adc	r3, r3, r0, asr #31
   138e0:	strd	r2, [r1]
   138e4:	pop	{r4, r5, r6, r7, fp, pc}
   138e8:	bl	11640 <__errno_location@plt>
   138ec:	ldr	r4, [r0]
   138f0:	movw	r1, #46724	; 0xb684
   138f4:	mov	r0, #0
   138f8:	mov	r2, #5
   138fc:	mov	r7, #0
   13900:	movt	r1, #2
   13904:	bl	114e4 <dcgettext@plt>
   13908:	mov	r5, r0
   1390c:	movw	r0, #53868	; 0xd26c
   13910:	movt	r0, #3
   13914:	ldr	r1, [r0]
   13918:	mov	r0, #4
   1391c:	bl	15a5c <__assert_fail@plt+0x42fc>
   13920:	mov	r3, r0
   13924:	mov	r0, #0
   13928:	mov	r1, r4
   1392c:	mov	r2, r5
   13930:	bl	11598 <error@plt>
   13934:	str	r7, [r6]
   13938:	bl	11898 <__assert_fail@plt+0x138>
   1393c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13940:	add	fp, sp, #28
   13944:	sub	sp, sp, #12
   13948:	movw	r0, #53916	; 0xd29c
   1394c:	movt	r0, #3
   13950:	ldrb	r1, [r0]
   13954:	mov	r0, #0
   13958:	cmp	r1, #0
   1395c:	bne	13d4c <__assert_fail@plt+0x25ec>
   13960:	movw	r8, #53920	; 0xd2a0
   13964:	movw	r1, #8190	; 0x1ffe
   13968:	movw	r5, #8191	; 0x1fff
   1396c:	mov	r9, #0
   13970:	mov	sl, #1
   13974:	movt	r8, #3
   13978:	ldr	r0, [r8]
   1397c:	cmp	r0, r1
   13980:	addgt	r5, r0, #1
   13984:	b	1399c <__assert_fail@plt+0x223c>
   13988:	ldr	r0, [r4, #28]
   1398c:	lsl	r5, r5, #1
   13990:	bl	141c4 <__assert_fail@plt+0x2a64>
   13994:	mov	r0, r4
   13998:	bl	141c4 <__assert_fail@plt+0x2a64>
   1399c:	mov	r0, #48	; 0x30
   139a0:	bl	27c30 <__assert_fail@plt+0x164d0>
   139a4:	mov	r4, r0
   139a8:	str	r9, [r0]
   139ac:	mov	r0, #0
   139b0:	mov	r2, r5
   139b4:	mvn	r3, #0
   139b8:	str	sl, [sp]
   139bc:	mov	r1, r4
   139c0:	bl	27e60 <__assert_fail@plt+0x16700>
   139c4:	str	r0, [r4, #28]
   139c8:	mov	r5, r0
   139cc:	movw	r0, #53928	; 0xd2a8
   139d0:	str	r9, [r4, #4]
   139d4:	str	r9, [r4, #24]
   139d8:	str	r9, [r4, #36]	; 0x24
   139dc:	str	r9, [r4, #32]
   139e0:	str	r9, [r4, #40]	; 0x28
   139e4:	ldr	r6, [r8]
   139e8:	movt	r0, #3
   139ec:	ldrd	r0, [r0]
   139f0:	adds	r0, r0, #1
   139f4:	adc	r1, r1, #0
   139f8:	vmov.32	d16[0], r0
   139fc:	add	r0, r4, #8
   13a00:	cmp	r6, #0
   13a04:	vmov.32	d16[1], r1
   13a08:	str	r0, [sp, #8]
   13a0c:	vorr	d17, d16, d16
   13a10:	vst1.64	{d16-d17}, [r0]
   13a14:	ldr	r7, [r4]
   13a18:	beq	13a4c <__assert_fail@plt+0x22ec>
   13a1c:	movw	r0, #53924	; 0xd2a4
   13a20:	mov	r2, r6
   13a24:	movt	r0, #3
   13a28:	ldr	r1, [r0]
   13a2c:	mov	r0, r5
   13a30:	bl	11484 <memcpy@plt>
   13a34:	ldr	r0, [r4, #4]
   13a38:	sub	r7, r7, r6
   13a3c:	add	r5, r5, r6
   13a40:	str	r9, [r8]
   13a44:	add	r0, r0, r6
   13a48:	str	r0, [r4, #4]
   13a4c:	subs	r2, r7, #1
   13a50:	mov	r0, #0
   13a54:	beq	13a88 <__assert_fail@plt+0x2328>
   13a58:	mov	r0, #0
   13a5c:	mov	r1, r5
   13a60:	bl	27508 <__assert_fail@plt+0x15da8>
   13a64:	cmp	r0, #0
   13a68:	beq	13a78 <__assert_fail@plt+0x2318>
   13a6c:	cmn	r0, #1
   13a70:	bne	13a88 <__assert_fail@plt+0x2328>
   13a74:	b	13da4 <__assert_fail@plt+0x2644>
   13a78:	movw	r0, #53916	; 0xd29c
   13a7c:	movt	r0, #3
   13a80:	strb	sl, [r0]
   13a84:	mov	r0, #0
   13a88:	ldr	r1, [r4, #4]
   13a8c:	adds	r0, r1, r0
   13a90:	str	r0, [r4, #4]
   13a94:	beq	13cb4 <__assert_fail@plt+0x2554>
   13a98:	ldr	r6, [r4, #28]
   13a9c:	mov	r1, #10
   13aa0:	mov	r7, r8
   13aa4:	mov	sl, r6
   13aa8:	strb	r1, [sl, r0]!
   13aac:	mov	r0, r6
   13ab0:	mov	r1, #10
   13ab4:	bl	1152c <rawmemchr@plt>
   13ab8:	mov	r9, #0
   13abc:	cmp	r0, sl
   13ac0:	beq	13b78 <__assert_fail@plt+0x2418>
   13ac4:	mov	r5, r6
   13ac8:	add	r6, r0, #1
   13acc:	ldr	r0, [r4, #32]
   13ad0:	cmp	r0, #0
   13ad4:	beq	13ae0 <__assert_fail@plt+0x2380>
   13ad8:	ldr	r0, [r4, #36]	; 0x24
   13adc:	b	13b04 <__assert_fail@plt+0x23a4>
   13ae0:	mov	r0, #656	; 0x290
   13ae4:	bl	27c30 <__assert_fail@plt+0x164d0>
   13ae8:	mov	r1, #0
   13aec:	str	r0, [r4, #32]
   13af0:	str	r0, [r4, #36]	; 0x24
   13af4:	str	r1, [r0, #652]	; 0x28c
   13af8:	str	r1, [r0]
   13afc:	str	r1, [r0, #4]
   13b00:	str	r1, [r0, #8]
   13b04:	ldr	r1, [r0]
   13b08:	sub	r8, r6, r5
   13b0c:	cmp	r1, #80	; 0x50
   13b10:	bne	13b3c <__assert_fail@plt+0x23dc>
   13b14:	mov	r0, #656	; 0x290
   13b18:	bl	27c30 <__assert_fail@plt+0x164d0>
   13b1c:	ldr	r2, [r4, #36]	; 0x24
   13b20:	mov	r1, #0
   13b24:	str	r1, [r0, #652]	; 0x28c
   13b28:	str	r1, [r0]
   13b2c:	str	r1, [r0, #4]
   13b30:	str	r1, [r0, #8]
   13b34:	str	r0, [r2, #652]	; 0x28c
   13b38:	str	r0, [r4, #36]	; 0x24
   13b3c:	ldr	r2, [r0, #4]
   13b40:	add	r1, r1, #1
   13b44:	add	r3, r0, r2, lsl #3
   13b48:	str	r8, [r3, #12]
   13b4c:	str	r5, [r3, #16]
   13b50:	str	r1, [r0]
   13b54:	add	r1, r2, #1
   13b58:	str	r1, [r0, #4]
   13b5c:	mov	r0, r6
   13b60:	mov	r1, #10
   13b64:	bl	1152c <rawmemchr@plt>
   13b68:	add	r9, r9, #1
   13b6c:	cmp	r0, sl
   13b70:	mov	r5, r6
   13b74:	bne	13ac8 <__assert_fail@plt+0x2368>
   13b78:	subs	sl, sl, r6
   13b7c:	beq	13bac <__assert_fail@plt+0x244c>
   13b80:	movw	r0, #53916	; 0xd29c
   13b84:	movt	r0, #3
   13b88:	ldrb	r0, [r0]
   13b8c:	cmp	r0, #1
   13b90:	bne	13bb4 <__assert_fail@plt+0x2454>
   13b94:	ldr	r0, [r4, #32]
   13b98:	ldr	r5, [sp, #8]
   13b9c:	cmp	r0, #0
   13ba0:	beq	13bec <__assert_fail@plt+0x248c>
   13ba4:	ldr	r0, [r4, #36]	; 0x24
   13ba8:	b	13c10 <__assert_fail@plt+0x24b0>
   13bac:	mov	r8, r7
   13bb0:	b	13be4 <__assert_fail@plt+0x2484>
   13bb4:	mov	r0, r6
   13bb8:	mov	r1, sl
   13bbc:	bl	280cc <__assert_fail@plt+0x1696c>
   13bc0:	mov	r5, r0
   13bc4:	movw	r0, #53924	; 0xd2a4
   13bc8:	movt	r0, #3
   13bcc:	mov	r6, r0
   13bd0:	ldr	r0, [r0]
   13bd4:	bl	141c4 <__assert_fail@plt+0x2a64>
   13bd8:	mov	r8, r7
   13bdc:	str	sl, [r7]
   13be0:	str	r5, [r6]
   13be4:	ldr	r5, [sp, #8]
   13be8:	b	13c6c <__assert_fail@plt+0x250c>
   13bec:	mov	r0, #656	; 0x290
   13bf0:	bl	27c30 <__assert_fail@plt+0x164d0>
   13bf4:	mov	r1, #0
   13bf8:	str	r0, [r4, #32]
   13bfc:	str	r0, [r4, #36]	; 0x24
   13c00:	str	r1, [r0, #652]	; 0x28c
   13c04:	str	r1, [r0]
   13c08:	str	r1, [r0, #4]
   13c0c:	str	r1, [r0, #8]
   13c10:	ldr	r1, [r0]
   13c14:	cmp	r1, #80	; 0x50
   13c18:	bne	13c44 <__assert_fail@plt+0x24e4>
   13c1c:	mov	r0, #656	; 0x290
   13c20:	bl	27c30 <__assert_fail@plt+0x164d0>
   13c24:	ldr	r2, [r4, #36]	; 0x24
   13c28:	mov	r1, #0
   13c2c:	str	r1, [r0, #652]	; 0x28c
   13c30:	str	r1, [r0]
   13c34:	str	r1, [r0, #4]
   13c38:	str	r1, [r0, #8]
   13c3c:	str	r0, [r2, #652]	; 0x28c
   13c40:	str	r0, [r4, #36]	; 0x24
   13c44:	ldr	r2, [r0, #4]
   13c48:	add	r1, r1, #1
   13c4c:	add	r9, r9, #1
   13c50:	mov	r8, r7
   13c54:	add	r3, r0, r2, lsl #3
   13c58:	str	sl, [r3, #12]
   13c5c:	str	r6, [r3, #16]
   13c60:	str	r1, [r0]
   13c64:	add	r1, r2, #1
   13c68:	str	r1, [r0, #4]
   13c6c:	movw	r0, #53928	; 0xd2a8
   13c70:	str	r9, [r4, #24]
   13c74:	mov	sl, #1
   13c78:	movt	r0, #3
   13c7c:	mov	r7, r0
   13c80:	ldrd	r0, [r0]
   13c84:	adds	r2, r0, #1
   13c88:	adc	r3, r1, #0
   13c8c:	vmov.32	d16[0], r2
   13c90:	adds	r0, r0, r9
   13c94:	vmov.32	d16[1], r3
   13c98:	adc	r1, r1, r9, asr #31
   13c9c:	cmp	r9, #0
   13ca0:	mov	r9, #0
   13ca4:	vorr	d17, d16, d16
   13ca8:	strd	r0, [r7]
   13cac:	vst1.64	{d16-d17}, [r5]
   13cb0:	bne	13d54 <__assert_fail@plt+0x25f4>
   13cb4:	movw	r0, #53916	; 0xd29c
   13cb8:	movt	r0, #3
   13cbc:	ldrb	r0, [r0]
   13cc0:	cmp	r0, #0
   13cc4:	bne	13d18 <__assert_fail@plt+0x25b8>
   13cc8:	ldr	r5, [r4]
   13ccc:	cmn	r5, #1
   13cd0:	ble	13ce0 <__assert_fail@plt+0x2580>
   13cd4:	cmp	r5, #1073741824	; 0x40000000
   13cd8:	blt	13cf4 <__assert_fail@plt+0x2594>
   13cdc:	b	13da0 <__assert_fail@plt+0x2640>
   13ce0:	beq	13cf4 <__assert_fail@plt+0x2594>
   13ce4:	mov	r0, #-2147483648	; 0x80000000
   13ce8:	sdiv	r0, r0, r5
   13cec:	cmp	r0, #2
   13cf0:	blt	13da0 <__assert_fail@plt+0x2640>
   13cf4:	ldr	r0, [r4, #32]
   13cf8:	cmp	r0, #0
   13cfc:	beq	13988 <__assert_fail@plt+0x2228>
   13d00:	ldr	r6, [r0, #652]	; 0x28c
   13d04:	bl	141c4 <__assert_fail@plt+0x2a64>
   13d08:	cmp	r6, #0
   13d0c:	mov	r0, r6
   13d10:	bne	13d00 <__assert_fail@plt+0x25a0>
   13d14:	b	13988 <__assert_fail@plt+0x2228>
   13d18:	ldr	r0, [r4, #32]
   13d1c:	cmp	r0, #0
   13d20:	beq	13d38 <__assert_fail@plt+0x25d8>
   13d24:	ldr	r5, [r0, #652]	; 0x28c
   13d28:	bl	141c4 <__assert_fail@plt+0x2a64>
   13d2c:	cmp	r5, #0
   13d30:	mov	r0, r5
   13d34:	bne	13d24 <__assert_fail@plt+0x25c4>
   13d38:	ldr	r0, [r4, #28]
   13d3c:	bl	141c4 <__assert_fail@plt+0x2a64>
   13d40:	mov	r0, r4
   13d44:	bl	141c4 <__assert_fail@plt+0x2a64>
   13d48:	mov	r0, #0
   13d4c:	sub	sp, fp, #28
   13d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d54:	ldr	r1, [r4, #32]
   13d58:	mov	r0, #0
   13d5c:	str	r1, [r4, #36]	; 0x24
   13d60:	movw	r1, #53912	; 0xd298
   13d64:	str	r0, [r4, #40]	; 0x28
   13d68:	movt	r1, #3
   13d6c:	ldr	r0, [r1]
   13d70:	cmp	r0, #0
   13d74:	beq	13d90 <__assert_fail@plt+0x2630>
   13d78:	mov	r1, r0
   13d7c:	ldr	r0, [r0, #40]	; 0x28
   13d80:	cmp	r0, #0
   13d84:	bne	13d78 <__assert_fail@plt+0x2618>
   13d88:	str	r4, [r1, #40]	; 0x28
   13d8c:	b	13d94 <__assert_fail@plt+0x2634>
   13d90:	str	r4, [r1]
   13d94:	mov	r0, #1
   13d98:	sub	sp, fp, #28
   13d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da0:	bl	11860 <__assert_fail@plt+0x100>
   13da4:	bl	11640 <__errno_location@plt>
   13da8:	ldr	r4, [r0]
   13dac:	movw	r1, #45476	; 0xb1a4
   13db0:	mov	r0, #0
   13db4:	mov	r2, #5
   13db8:	movt	r1, #2
   13dbc:	bl	114e4 <dcgettext@plt>
   13dc0:	mov	r2, r0
   13dc4:	mov	r0, #0
   13dc8:	mov	r1, r4
   13dcc:	bl	11598 <error@plt>
   13dd0:	bl	11898 <__assert_fail@plt+0x138>
   13dd4:	push	{fp, lr}
   13dd8:	mov	fp, sp
   13ddc:	sub	sp, sp, #32
   13de0:	movw	sl, #53688	; 0xd1b8
   13de4:	movw	r1, #47659	; 0xba2b
   13de8:	mov	r9, r2
   13dec:	mov	r6, r0
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	mov	r8, r3
   13dfc:	movt	sl, #3
   13e00:	movt	r1, #2
   13e04:	ldr	r7, [sl]
   13e08:	bl	114e4 <dcgettext@plt>
   13e0c:	mov	r4, r0
   13e10:	movw	r0, #53948	; 0xd2bc
   13e14:	add	r2, sp, #11
   13e18:	movt	r0, #3
   13e1c:	ldr	r5, [r0]
   13e20:	ldrd	r0, [r6, #8]
   13e24:	bl	14290 <__assert_fail@plt+0x2b30>
   13e28:	bl	15f84 <__assert_fail@plt+0x4824>
   13e2c:	str	r0, [sp]
   13e30:	mov	r0, r7
   13e34:	mov	r1, #1
   13e38:	mov	r2, r4
   13e3c:	mov	r3, r5
   13e40:	bl	116a0 <__fprintf_chk@plt>
   13e44:	ldr	r6, [sl]
   13e48:	orrs	r0, r9, r8
   13e4c:	bne	13e68 <__assert_fail@plt+0x2708>
   13e50:	movw	r2, #46722	; 0xb682
   13e54:	mov	r0, r6
   13e58:	mov	r1, #1
   13e5c:	movt	r2, #2
   13e60:	bl	116a0 <__fprintf_chk@plt>
   13e64:	bl	11898 <__assert_fail@plt+0x138>
   13e68:	movw	r1, #47622	; 0xba06
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	movt	r1, #2
   13e78:	bl	114e4 <dcgettext@plt>
   13e7c:	mov	r4, r0
   13e80:	add	r2, sp, #11
   13e84:	mov	r0, r9
   13e88:	mov	r1, r8
   13e8c:	bl	14290 <__assert_fail@plt+0x2b30>
   13e90:	mov	r3, r0
   13e94:	mov	r0, r6
   13e98:	mov	r1, #1
   13e9c:	mov	r2, r4
   13ea0:	bl	116a0 <__fprintf_chk@plt>
   13ea4:	bl	11898 <__assert_fail@plt+0x138>
   13ea8:	movw	r1, #53940	; 0xd2b4
   13eac:	movt	r1, #3
   13eb0:	str	r0, [r1]
   13eb4:	bx	lr
   13eb8:	movw	r1, #53944	; 0xd2b8
   13ebc:	movt	r1, #3
   13ec0:	strb	r0, [r1]
   13ec4:	bx	lr
   13ec8:	push	{r4, r5, r6, sl, fp, lr}
   13ecc:	add	fp, sp, #16
   13ed0:	sub	sp, sp, #8
   13ed4:	movw	r0, #53692	; 0xd1bc
   13ed8:	movt	r0, #3
   13edc:	ldr	r0, [r0]
   13ee0:	bl	2a930 <__assert_fail@plt+0x191d0>
   13ee4:	cmp	r0, #0
   13ee8:	beq	13f10 <__assert_fail@plt+0x27b0>
   13eec:	movw	r0, #53944	; 0xd2b8
   13ef0:	movt	r0, #3
   13ef4:	ldrb	r0, [r0]
   13ef8:	cmp	r0, #0
   13efc:	beq	13f30 <__assert_fail@plt+0x27d0>
   13f00:	bl	11640 <__errno_location@plt>
   13f04:	ldr	r0, [r0]
   13f08:	cmp	r0, #32
   13f0c:	bne	13f30 <__assert_fail@plt+0x27d0>
   13f10:	movw	r0, #53688	; 0xd1b8
   13f14:	movt	r0, #3
   13f18:	ldr	r0, [r0]
   13f1c:	bl	2a930 <__assert_fail@plt+0x191d0>
   13f20:	cmp	r0, #0
   13f24:	subeq	sp, fp, #16
   13f28:	popeq	{r4, r5, r6, sl, fp, pc}
   13f2c:	b	13fa0 <__assert_fail@plt+0x2840>
   13f30:	movw	r1, #48375	; 0xbcf7
   13f34:	mov	r0, #0
   13f38:	mov	r2, #5
   13f3c:	movt	r1, #2
   13f40:	bl	114e4 <dcgettext@plt>
   13f44:	mov	r4, r0
   13f48:	movw	r0, #53940	; 0xd2b4
   13f4c:	movt	r0, #3
   13f50:	ldr	r6, [r0]
   13f54:	bl	11640 <__errno_location@plt>
   13f58:	ldr	r5, [r0]
   13f5c:	cmp	r6, #0
   13f60:	bne	13f7c <__assert_fail@plt+0x281c>
   13f64:	movw	r2, #47263	; 0xb89f
   13f68:	mov	r0, #0
   13f6c:	mov	r1, r5
   13f70:	mov	r3, r4
   13f74:	movt	r2, #2
   13f78:	b	13f9c <__assert_fail@plt+0x283c>
   13f7c:	mov	r0, r6
   13f80:	bl	15bfc <__assert_fail@plt+0x449c>
   13f84:	movw	r2, #48387	; 0xbd03
   13f88:	mov	r3, r0
   13f8c:	str	r4, [sp]
   13f90:	mov	r0, #0
   13f94:	mov	r1, r5
   13f98:	movt	r2, #2
   13f9c:	bl	11598 <error@plt>
   13fa0:	movw	r0, #53600	; 0xd160
   13fa4:	movt	r0, #3
   13fa8:	ldr	r0, [r0]
   13fac:	bl	11478 <_exit@plt>
   13fb0:	push	{r4, r5, r6, sl, fp, lr}
   13fb4:	add	fp, sp, #16
   13fb8:	sub	sp, sp, #8
   13fbc:	mov	r4, r0
   13fc0:	bl	11694 <fileno@plt>
   13fc4:	cmn	r0, #1
   13fc8:	ble	1403c <__assert_fail@plt+0x28dc>
   13fcc:	mov	r0, r4
   13fd0:	bl	115d4 <__freading@plt>
   13fd4:	cmp	r0, #0
   13fd8:	beq	14004 <__assert_fail@plt+0x28a4>
   13fdc:	mov	r0, r4
   13fe0:	bl	11694 <fileno@plt>
   13fe4:	mov	r1, #1
   13fe8:	mov	r2, #0
   13fec:	mov	r3, #0
   13ff0:	str	r1, [sp]
   13ff4:	bl	1155c <lseek64@plt>
   13ff8:	and	r0, r0, r1
   13ffc:	cmn	r0, #1
   14000:	beq	1403c <__assert_fail@plt+0x28dc>
   14004:	mov	r0, r4
   14008:	bl	140b4 <__assert_fail@plt+0x2954>
   1400c:	cmp	r0, #0
   14010:	beq	1403c <__assert_fail@plt+0x28dc>
   14014:	bl	11640 <__errno_location@plt>
   14018:	ldr	r6, [r0]
   1401c:	mov	r5, r0
   14020:	mov	r0, r4
   14024:	bl	116ac <fclose@plt>
   14028:	cmp	r6, #0
   1402c:	strne	r6, [r5]
   14030:	mvnne	r0, #0
   14034:	sub	sp, fp, #16
   14038:	pop	{r4, r5, r6, sl, fp, pc}
   1403c:	mov	r0, r4
   14040:	sub	sp, fp, #16
   14044:	pop	{r4, r5, r6, sl, fp, lr}
   14048:	b	116ac <fclose@plt>
   1404c:	push	{r4, r5, r6, r7, fp, lr}
   14050:	add	fp, sp, #16
   14054:	mov	r5, r0
   14058:	mov	r0, r1
   1405c:	mov	r1, r2
   14060:	mov	r2, r3
   14064:	bl	115a4 <open64@plt>
   14068:	mov	r4, r0
   1406c:	cmp	r0, r5
   14070:	beq	140ac <__assert_fail@plt+0x294c>
   14074:	cmp	r4, #0
   14078:	blt	140ac <__assert_fail@plt+0x294c>
   1407c:	mov	r0, r4
   14080:	mov	r1, r5
   14084:	bl	114fc <dup2@plt>
   14088:	mov	r5, r0
   1408c:	bl	11640 <__errno_location@plt>
   14090:	ldr	r7, [r0]
   14094:	mov	r6, r0
   14098:	mov	r0, r4
   1409c:	bl	11748 <close@plt>
   140a0:	mov	r0, r5
   140a4:	str	r7, [r6]
   140a8:	pop	{r4, r5, r6, r7, fp, pc}
   140ac:	mov	r0, r4
   140b0:	pop	{r4, r5, r6, r7, fp, pc}
   140b4:	push	{r4, sl, fp, lr}
   140b8:	add	fp, sp, #8
   140bc:	sub	sp, sp, #8
   140c0:	mov	r4, r0
   140c4:	cmp	r0, #0
   140c8:	beq	140e4 <__assert_fail@plt+0x2984>
   140cc:	mov	r0, r4
   140d0:	bl	115d4 <__freading@plt>
   140d4:	cmp	r0, #0
   140d8:	ldrbne	r0, [r4, #1]
   140dc:	tstne	r0, #1
   140e0:	bne	140f4 <__assert_fail@plt+0x2994>
   140e4:	mov	r0, r4
   140e8:	sub	sp, fp, #8
   140ec:	pop	{r4, sl, fp, lr}
   140f0:	b	1143c <fflush@plt>
   140f4:	mov	r0, #1
   140f8:	mov	r2, #0
   140fc:	mov	r3, #0
   14100:	str	r0, [sp]
   14104:	mov	r0, r4
   14108:	bl	141ec <__assert_fail@plt+0x2a8c>
   1410c:	b	140e4 <__assert_fail@plt+0x2984>
   14110:	push	{r4, r5, r6, r7, fp, lr}
   14114:	add	fp, sp, #16
   14118:	mov	r5, r1
   1411c:	bl	1170c <fopen64@plt>
   14120:	mov	r4, #0
   14124:	cmp	r0, #0
   14128:	beq	14178 <__assert_fail@plt+0x2a18>
   1412c:	mov	r6, r0
   14130:	bl	11694 <fileno@plt>
   14134:	cmp	r0, #2
   14138:	movhi	r0, r6
   1413c:	pophi	{r4, r5, r6, r7, fp, pc}
   14140:	bl	2756c <__assert_fail@plt+0x15e0c>
   14144:	cmn	r0, #1
   14148:	ble	141a4 <__assert_fail@plt+0x2a44>
   1414c:	mov	r7, r0
   14150:	mov	r0, r6
   14154:	bl	13fb0 <__assert_fail@plt+0x2850>
   14158:	cmp	r0, #0
   1415c:	bne	14180 <__assert_fail@plt+0x2a20>
   14160:	mov	r0, r7
   14164:	mov	r1, r5
   14168:	bl	113c4 <fdopen@plt>
   1416c:	mov	r4, r0
   14170:	cmp	r0, #0
   14174:	beq	14180 <__assert_fail@plt+0x2a20>
   14178:	mov	r0, r4
   1417c:	pop	{r4, r5, r6, r7, fp, pc}
   14180:	bl	11640 <__errno_location@plt>
   14184:	ldr	r5, [r0]
   14188:	mov	r4, r0
   1418c:	mov	r0, r7
   14190:	bl	11748 <close@plt>
   14194:	str	r5, [r4]
   14198:	mov	r4, #0
   1419c:	mov	r0, r4
   141a0:	pop	{r4, r5, r6, r7, fp, pc}
   141a4:	bl	11640 <__errno_location@plt>
   141a8:	ldr	r7, [r0]
   141ac:	mov	r5, r0
   141b0:	mov	r0, r6
   141b4:	bl	13fb0 <__assert_fail@plt+0x2850>
   141b8:	mov	r0, r4
   141bc:	str	r7, [r5]
   141c0:	pop	{r4, r5, r6, r7, fp, pc}
   141c4:	push	{r4, r5, r6, sl, fp, lr}
   141c8:	add	fp, sp, #16
   141cc:	mov	r4, r0
   141d0:	bl	11640 <__errno_location@plt>
   141d4:	ldr	r6, [r0]
   141d8:	mov	r5, r0
   141dc:	mov	r0, r4
   141e0:	bl	11460 <free@plt>
   141e4:	str	r6, [r5]
   141e8:	pop	{r4, r5, r6, sl, fp, pc}
   141ec:	push	{r4, r5, r6, r7, fp, lr}
   141f0:	add	fp, sp, #16
   141f4:	sub	sp, sp, #8
   141f8:	mov	r4, r0
   141fc:	ldr	r0, [r0, #4]
   14200:	mov	r5, r3
   14204:	mov	r6, r2
   14208:	ldr	r1, [r4, #8]
   1420c:	cmp	r1, r0
   14210:	bne	1422c <__assert_fail@plt+0x2acc>
   14214:	ldrd	r0, [r4, #16]
   14218:	cmp	r1, r0
   1421c:	bne	1422c <__assert_fail@plt+0x2acc>
   14220:	ldr	r0, [r4, #36]	; 0x24
   14224:	cmp	r0, #0
   14228:	beq	14244 <__assert_fail@plt+0x2ae4>
   1422c:	mov	r0, r4
   14230:	mov	r2, r6
   14234:	mov	r3, r5
   14238:	sub	sp, fp, #16
   1423c:	pop	{r4, r5, r6, r7, fp, lr}
   14240:	b	116b8 <fseeko64@plt>
   14244:	ldr	r7, [fp, #8]
   14248:	mov	r0, r4
   1424c:	bl	11694 <fileno@plt>
   14250:	mov	r2, r6
   14254:	mov	r3, r5
   14258:	str	r7, [sp]
   1425c:	bl	1155c <lseek64@plt>
   14260:	and	r2, r0, r1
   14264:	cmn	r2, #1
   14268:	mvneq	r0, #0
   1426c:	subeq	sp, fp, #16
   14270:	popeq	{r4, r5, r6, r7, fp, pc}
   14274:	strd	r0, [r4, #80]	; 0x50
   14278:	ldr	r0, [r4]
   1427c:	bic	r0, r0, #16
   14280:	str	r0, [r4]
   14284:	mov	r0, #0
   14288:	sub	sp, fp, #16
   1428c:	pop	{r4, r5, r6, r7, fp, pc}
   14290:	push	{r4, r5, r6, sl, fp, lr}
   14294:	add	fp, sp, #16
   14298:	mov	r5, r0
   1429c:	mov	r0, #0
   142a0:	mov	r4, r1
   142a4:	add	r6, r2, #19
   142a8:	cmp	r1, #0
   142ac:	strb	r0, [r2, #20]
   142b0:	blt	14300 <__assert_fail@plt+0x2ba0>
   142b4:	mov	r0, r5
   142b8:	mov	r1, r4
   142bc:	mov	r2, #10
   142c0:	mov	r3, #0
   142c4:	bl	2ae30 <__assert_fail@plt+0x196d0>
   142c8:	add	r2, r0, r0, lsl #2
   142cc:	sub	r2, r5, r2, lsl #1
   142d0:	add	r2, r2, #48	; 0x30
   142d4:	strb	r2, [r6], #-1
   142d8:	adds	r2, r5, #9
   142dc:	mov	r5, r0
   142e0:	adc	r3, r4, #0
   142e4:	rsbs	r2, r2, #18
   142e8:	mov	r4, r1
   142ec:	rscs	r2, r3, #0
   142f0:	bcc	142b4 <__assert_fail@plt+0x2b54>
   142f4:	add	r6, r6, #1
   142f8:	mov	r0, r6
   142fc:	pop	{r4, r5, r6, sl, fp, pc}
   14300:	mov	r0, r5
   14304:	mov	r1, r4
   14308:	mov	r2, #10
   1430c:	mov	r3, #0
   14310:	bl	2ae30 <__assert_fail@plt+0x196d0>
   14314:	add	r2, r0, r0, lsl #2
   14318:	rsb	r2, r5, r2, lsl #1
   1431c:	add	r2, r2, #48	; 0x30
   14320:	strb	r2, [r6], #-1
   14324:	adds	r2, r5, #9
   14328:	mov	r5, r0
   1432c:	adc	r3, r4, #0
   14330:	rsbs	r2, r2, #18
   14334:	mov	r4, r1
   14338:	rscs	r2, r3, #0
   1433c:	bcc	14300 <__assert_fail@plt+0x2ba0>
   14340:	mov	r0, #45	; 0x2d
   14344:	strb	r0, [r6]
   14348:	mov	r0, r6
   1434c:	pop	{r4, r5, r6, sl, fp, pc}
   14350:	push	{r4, r5, fp, lr}
   14354:	add	fp, sp, #8
   14358:	cmp	r0, #0
   1435c:	beq	143f0 <__assert_fail@plt+0x2c90>
   14360:	mov	r1, #47	; 0x2f
   14364:	mov	r4, r0
   14368:	bl	116e8 <strrchr@plt>
   1436c:	cmp	r0, #0
   14370:	mov	r5, r4
   14374:	addne	r5, r0, #1
   14378:	sub	r0, r5, r4
   1437c:	cmp	r0, #7
   14380:	blt	143d4 <__assert_fail@plt+0x2c74>
   14384:	movw	r1, #48450	; 0xbd42
   14388:	sub	r0, r5, #7
   1438c:	mov	r2, #7
   14390:	movt	r1, #2
   14394:	bl	11730 <strncmp@plt>
   14398:	cmp	r0, #0
   1439c:	bne	143d4 <__assert_fail@plt+0x2c74>
   143a0:	movw	r1, #48458	; 0xbd4a
   143a4:	mov	r0, r5
   143a8:	mov	r2, #3
   143ac:	movt	r1, #2
   143b0:	bl	11730 <strncmp@plt>
   143b4:	cmp	r0, #0
   143b8:	beq	143c4 <__assert_fail@plt+0x2c64>
   143bc:	mov	r4, r5
   143c0:	b	143d4 <__assert_fail@plt+0x2c74>
   143c4:	movw	r0, #53672	; 0xd1a8
   143c8:	add	r4, r5, #3
   143cc:	movt	r0, #3
   143d0:	str	r4, [r0]
   143d4:	movw	r0, #53676	; 0xd1ac
   143d8:	movt	r0, #3
   143dc:	str	r4, [r0]
   143e0:	movw	r0, #53948	; 0xd2bc
   143e4:	movt	r0, #3
   143e8:	str	r4, [r0]
   143ec:	pop	{r4, r5, fp, pc}
   143f0:	movw	r0, #53688	; 0xd1b8
   143f4:	mov	r1, #55	; 0x37
   143f8:	mov	r2, #1
   143fc:	movt	r0, #3
   14400:	ldr	r3, [r0]
   14404:	movw	r0, #48394	; 0xbd0a
   14408:	movt	r0, #2
   1440c:	bl	11550 <fwrite@plt>
   14410:	bl	1173c <abort@plt>
   14414:	push	{r4, r5, r6, sl, fp, lr}
   14418:	add	fp, sp, #16
   1441c:	mov	r4, r0
   14420:	movw	r0, #53952	; 0xd2c0
   14424:	movt	r0, #3
   14428:	cmp	r4, #0
   1442c:	moveq	r4, r0
   14430:	bl	11640 <__errno_location@plt>
   14434:	ldr	r6, [r0]
   14438:	mov	r5, r0
   1443c:	mov	r0, r4
   14440:	mov	r1, #48	; 0x30
   14444:	bl	28090 <__assert_fail@plt+0x16930>
   14448:	str	r6, [r5]
   1444c:	pop	{r4, r5, r6, sl, fp, pc}
   14450:	movw	r1, #53952	; 0xd2c0
   14454:	cmp	r0, #0
   14458:	movt	r1, #3
   1445c:	movne	r1, r0
   14460:	ldr	r0, [r1]
   14464:	bx	lr
   14468:	movw	r2, #53952	; 0xd2c0
   1446c:	cmp	r0, #0
   14470:	movt	r2, #3
   14474:	movne	r2, r0
   14478:	str	r1, [r2]
   1447c:	bx	lr
   14480:	movw	r3, #53952	; 0xd2c0
   14484:	cmp	r0, #0
   14488:	movt	r3, #3
   1448c:	movne	r3, r0
   14490:	ubfx	r0, r1, #5, #3
   14494:	and	r1, r1, #31
   14498:	add	r0, r3, r0, lsl #2
   1449c:	ldr	r3, [r0, #8]
   144a0:	eor	r2, r2, r3, lsr r1
   144a4:	and	r2, r2, #1
   144a8:	eor	r2, r3, r2, lsl r1
   144ac:	str	r2, [r0, #8]
   144b0:	mov	r0, #1
   144b4:	and	r0, r0, r3, lsr r1
   144b8:	bx	lr
   144bc:	movw	r2, #53952	; 0xd2c0
   144c0:	cmp	r0, #0
   144c4:	movt	r2, #3
   144c8:	movne	r2, r0
   144cc:	ldr	r0, [r2, #4]
   144d0:	str	r1, [r2, #4]
   144d4:	bx	lr
   144d8:	movw	r3, #53952	; 0xd2c0
   144dc:	cmp	r0, #0
   144e0:	movt	r3, #3
   144e4:	movne	r3, r0
   144e8:	cmp	r1, #0
   144ec:	mov	r0, #10
   144f0:	cmpne	r2, #0
   144f4:	str	r0, [r3]
   144f8:	bne	14508 <__assert_fail@plt+0x2da8>
   144fc:	push	{fp, lr}
   14500:	mov	fp, sp
   14504:	bl	1173c <abort@plt>
   14508:	str	r1, [r3, #40]	; 0x28
   1450c:	str	r2, [r3, #44]	; 0x2c
   14510:	bx	lr
   14514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14518:	add	fp, sp, #28
   1451c:	sub	sp, sp, #20
   14520:	mov	r7, r0
   14524:	ldr	r0, [fp, #8]
   14528:	movw	r5, #53952	; 0xd2c0
   1452c:	mov	r8, r3
   14530:	mov	r9, r2
   14534:	mov	sl, r1
   14538:	movt	r5, #3
   1453c:	cmp	r0, #0
   14540:	movne	r5, r0
   14544:	bl	11640 <__errno_location@plt>
   14548:	mov	r4, r0
   1454c:	ldm	r5, {r0, r1}
   14550:	ldr	r2, [r5, #40]	; 0x28
   14554:	ldr	r3, [r5, #44]	; 0x2c
   14558:	add	r5, r5, #8
   1455c:	ldr	r6, [r4]
   14560:	stm	sp, {r0, r1, r5}
   14564:	str	r2, [sp, #12]
   14568:	str	r3, [sp, #16]
   1456c:	mov	r0, r7
   14570:	mov	r1, sl
   14574:	mov	r2, r9
   14578:	mov	r3, r8
   1457c:	bl	1458c <__assert_fail@plt+0x2e2c>
   14580:	str	r6, [r4]
   14584:	sub	sp, fp, #28
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14590:	add	fp, sp, #28
   14594:	sub	sp, sp, #156	; 0x9c
   14598:	str	r0, [sp, #80]	; 0x50
   1459c:	ldr	r0, [fp, #12]
   145a0:	mov	r6, r1
   145a4:	mov	r9, r3
   145a8:	str	r2, [fp, #-84]	; 0xffffffac
   145ac:	and	r1, r0, #4
   145b0:	str	r1, [sp, #32]
   145b4:	and	r1, r0, #1
   145b8:	str	r1, [sp, #36]	; 0x24
   145bc:	ubfx	r4, r0, #1, #1
   145c0:	bl	11568 <__ctype_get_mb_cur_max@plt>
   145c4:	str	r0, [sp, #40]	; 0x28
   145c8:	ldr	r0, [fp, #24]
   145cc:	ldr	r7, [fp, #8]
   145d0:	mov	r1, #0
   145d4:	mov	r5, #1
   145d8:	str	r1, [fp, #-56]	; 0xffffffc8
   145dc:	mov	r1, #0
   145e0:	str	r1, [sp, #60]	; 0x3c
   145e4:	str	r0, [sp, #76]	; 0x4c
   145e8:	ldr	r0, [fp, #20]
   145ec:	str	r0, [sp, #72]	; 0x48
   145f0:	mov	r0, #0
   145f4:	str	r0, [sp, #56]	; 0x38
   145f8:	mov	r0, #0
   145fc:	str	r0, [sp, #92]	; 0x5c
   14600:	mov	r0, #0
   14604:	str	r0, [fp, #-76]	; 0xffffffb4
   14608:	mov	r0, #0
   1460c:	cmp	r7, #10
   14610:	bhi	15590 <__assert_fail@plt+0x3e30>
   14614:	add	r1, pc, #28
   14618:	mov	sl, r6
   1461c:	ldr	r6, [sp, #80]	; 0x50
   14620:	ldr	ip, [fp, #-84]	; 0xffffffac
   14624:	mov	r8, #0
   14628:	mov	r2, #1
   1462c:	mov	r3, #0
   14630:	mov	lr, r9
   14634:	ldr	pc, [r1, r7, lsl #2]
   14638:	andeq	r4, r1, ip, lsl r7
   1463c:	andeq	r4, r1, r8, asr #14
   14640:	andeq	r4, r1, ip, lsl #14
   14644:	andeq	r4, r1, r4, lsl #14
   14648:	andeq	r4, r1, ip, lsr r7
   1464c:	muleq	r1, r0, r7
   14650:	andeq	r4, r1, ip, lsr #14
   14654:	andeq	r4, r1, ip, ror #15
   14658:	andeq	r4, r1, r4, ror #12
   1465c:	andeq	r4, r1, r4, ror #12
   14660:	andeq	r4, r1, ip, lsl #13
   14664:	movw	r0, #48540	; 0xbd9c
   14668:	mov	r1, r7
   1466c:	movt	r0, #2
   14670:	bl	15f9c <__assert_fail@plt+0x483c>
   14674:	str	r0, [sp, #72]	; 0x48
   14678:	movw	r0, #47510	; 0xb996
   1467c:	mov	r1, r7
   14680:	movt	r0, #2
   14684:	bl	15f9c <__assert_fail@plt+0x483c>
   14688:	str	r0, [sp, #76]	; 0x4c
   1468c:	str	r5, [fp, #-48]	; 0xffffffd0
   14690:	mov	r8, #0
   14694:	mov	r5, r7
   14698:	tst	r4, #1
   1469c:	bne	146d4 <__assert_fail@plt+0x2f74>
   146a0:	ldr	r0, [sp, #72]	; 0x48
   146a4:	ldrb	r0, [r0]
   146a8:	cmp	r0, #0
   146ac:	beq	146d4 <__assert_fail@plt+0x2f74>
   146b0:	ldr	r1, [sp, #72]	; 0x48
   146b4:	mov	r8, #0
   146b8:	add	r1, r1, #1
   146bc:	cmp	r8, sl
   146c0:	strbcc	r0, [r6, r8]
   146c4:	ldrb	r0, [r1, r8]
   146c8:	add	r8, r8, #1
   146cc:	cmp	r0, #0
   146d0:	bne	146bc <__assert_fail@plt+0x2f5c>
   146d4:	ldr	r7, [sp, #76]	; 0x4c
   146d8:	mov	r0, r7
   146dc:	bl	11628 <strlen@plt>
   146e0:	str	r7, [sp, #92]	; 0x5c
   146e4:	mov	r7, r5
   146e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   146ec:	ldr	r5, [fp, #-48]	; 0xffffffd0
   146f0:	str	r0, [fp, #-76]	; 0xffffffb4
   146f4:	mov	r2, #1
   146f8:	mov	r3, r4
   146fc:	mov	lr, r9
   14700:	b	147ec <__assert_fail@plt+0x308c>
   14704:	mov	r0, #1
   14708:	b	14748 <__assert_fail@plt+0x2fe8>
   1470c:	tst	r4, #1
   14710:	bne	14748 <__assert_fail@plt+0x2fe8>
   14714:	mov	r2, r0
   14718:	b	14770 <__assert_fail@plt+0x3010>
   1471c:	mov	r7, #0
   14720:	mov	r8, #0
   14724:	mov	r2, r0
   14728:	b	147e8 <__assert_fail@plt+0x3088>
   1472c:	mov	r0, #1
   14730:	mov	r8, #0
   14734:	mov	r7, #5
   14738:	b	147a4 <__assert_fail@plt+0x3044>
   1473c:	mov	r2, #1
   14740:	tst	r4, #1
   14744:	beq	14770 <__assert_fail@plt+0x3010>
   14748:	mov	r1, #1
   1474c:	mov	r8, #0
   14750:	mov	r7, #2
   14754:	mov	r2, r0
   14758:	mov	r3, #1
   1475c:	str	r1, [fp, #-76]	; 0xffffffb4
   14760:	movw	r1, #47510	; 0xb996
   14764:	movt	r1, #2
   14768:	str	r1, [sp, #92]	; 0x5c
   1476c:	b	147ec <__assert_fail@plt+0x308c>
   14770:	cmp	sl, #0
   14774:	mov	r8, #1
   14778:	mov	r7, #2
   1477c:	movne	r0, #39	; 0x27
   14780:	strbne	r0, [r6]
   14784:	movw	r0, #47510	; 0xb996
   14788:	movt	r0, #2
   1478c:	b	147dc <__assert_fail@plt+0x307c>
   14790:	mov	r7, #5
   14794:	tst	r4, #1
   14798:	beq	147c0 <__assert_fail@plt+0x3060>
   1479c:	mov	r0, #1
   147a0:	mov	r8, #0
   147a4:	str	r0, [fp, #-76]	; 0xffffffb4
   147a8:	movw	r0, #48538	; 0xbd9a
   147ac:	mov	r2, #1
   147b0:	mov	r3, #1
   147b4:	movt	r0, #2
   147b8:	str	r0, [sp, #92]	; 0x5c
   147bc:	b	147ec <__assert_fail@plt+0x308c>
   147c0:	cmp	sl, #0
   147c4:	mov	r8, #1
   147c8:	mov	r2, #1
   147cc:	movne	r0, #34	; 0x22
   147d0:	strbne	r0, [r6]
   147d4:	movw	r0, #48538	; 0xbd9a
   147d8:	movt	r0, #2
   147dc:	str	r0, [sp, #92]	; 0x5c
   147e0:	mov	r0, #1
   147e4:	str	r0, [fp, #-76]	; 0xffffffb4
   147e8:	mov	r3, #0
   147ec:	ldr	r0, [fp, #16]
   147f0:	str	r3, [fp, #-72]	; 0xffffffb8
   147f4:	str	r7, [fp, #-64]	; 0xffffffc0
   147f8:	str	r2, [sp, #84]	; 0x54
   147fc:	cmp	r0, #0
   14800:	movwne	r0, #1
   14804:	and	r0, r0, r3
   14808:	str	r0, [fp, #-88]	; 0xffffffa8
   1480c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14810:	cmp	r0, #0
   14814:	movwne	r0, #1
   14818:	subs	r4, r7, #2
   1481c:	mov	r7, #0
   14820:	and	r1, r0, r3
   14824:	str	r4, [fp, #-80]	; 0xffffffb0
   14828:	and	r1, r2, r1
   1482c:	str	r1, [sp, #48]	; 0x30
   14830:	clz	r1, r4
   14834:	lsr	r1, r1, #5
   14838:	and	r1, r1, r3
   1483c:	eor	r3, r3, #1
   14840:	str	r1, [sp, #64]	; 0x40
   14844:	mov	r1, r4
   14848:	str	r3, [sp, #88]	; 0x58
   1484c:	movwne	r1, #1
   14850:	orr	r3, r1, r3
   14854:	and	r1, r1, r2
   14858:	and	r0, r0, r1
   1485c:	str	r3, [sp, #68]	; 0x44
   14860:	str	r1, [fp, #-68]	; 0xffffffbc
   14864:	str	r0, [fp, #-60]	; 0xffffffc4
   14868:	eor	r0, r2, #1
   1486c:	str	r0, [sp, #52]	; 0x34
   14870:	cmn	lr, #1
   14874:	beq	14884 <__assert_fail@plt+0x3124>
   14878:	cmp	r7, lr
   1487c:	bne	14890 <__assert_fail@plt+0x3130>
   14880:	b	153b8 <__assert_fail@plt+0x3c58>
   14884:	ldrb	r0, [ip, r7]
   14888:	cmp	r0, #0
   1488c:	beq	153c0 <__assert_fail@plt+0x3c60>
   14890:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14894:	mov	r9, #0
   14898:	str	r5, [fp, #-48]	; 0xffffffd0
   1489c:	cmp	r0, #0
   148a0:	beq	148d4 <__assert_fail@plt+0x3174>
   148a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   148a8:	add	r4, r7, r0
   148ac:	cmp	r0, #2
   148b0:	bcc	148cc <__assert_fail@plt+0x316c>
   148b4:	cmn	lr, #1
   148b8:	bne	148cc <__assert_fail@plt+0x316c>
   148bc:	mov	r0, ip
   148c0:	bl	11628 <strlen@plt>
   148c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   148c8:	mov	lr, r0
   148cc:	cmp	r4, lr
   148d0:	bls	148dc <__assert_fail@plt+0x317c>
   148d4:	mov	r0, #0
   148d8:	b	1491c <__assert_fail@plt+0x31bc>
   148dc:	ldr	r1, [sp, #92]	; 0x5c
   148e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   148e4:	add	r0, ip, r7
   148e8:	mov	r4, lr
   148ec:	bl	114d8 <memcmp@plt>
   148f0:	ldr	r2, [sp, #88]	; 0x58
   148f4:	cmp	r0, #0
   148f8:	mov	r1, r0
   148fc:	movwne	r1, #1
   14900:	orr	r1, r1, r2
   14904:	tst	r1, #1
   14908:	beq	15450 <__assert_fail@plt+0x3cf0>
   1490c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14910:	clz	r0, r0
   14914:	mov	lr, r4
   14918:	lsr	r0, r0, #5
   1491c:	str	r0, [fp, #-52]	; 0xffffffcc
   14920:	ldrb	r5, [ip, r7]
   14924:	cmp	r5, #126	; 0x7e
   14928:	bhi	14ce0 <__assert_fail@plt+0x3580>
   1492c:	add	r3, pc, #16
   14930:	mov	r4, #1
   14934:	mov	r2, #110	; 0x6e
   14938:	mov	r0, #97	; 0x61
   1493c:	mov	r1, #0
   14940:	ldr	pc, [r3, r5, lsl #2]
   14944:	ldrdeq	r4, [r1], -ip
   14948:	andeq	r4, r1, r0, ror #25
   1494c:	andeq	r4, r1, r0, ror #25
   14950:	andeq	r4, r1, r0, ror #25
   14954:	andeq	r4, r1, r0, ror #25
   14958:	andeq	r4, r1, r0, ror #25
   1495c:	andeq	r4, r1, r0, ror #25
   14960:	muleq	r1, r4, sp
   14964:			; <UNDEFINED> instruction: 0x00014bbc
   14968:			; <UNDEFINED> instruction: 0x00014bb4
   1496c:	andeq	r4, r1, r8, asr #23
   14970:	andeq	r4, r1, r8, asr #24
   14974:	andeq	r4, r1, ip, lsr #23
   14978:	andeq	r4, r1, r4, asr #23
   1497c:	andeq	r4, r1, r0, ror #25
   14980:	andeq	r4, r1, r0, ror #25
   14984:	andeq	r4, r1, r0, ror #25
   14988:	andeq	r4, r1, r0, ror #25
   1498c:	andeq	r4, r1, r0, ror #25
   14990:	andeq	r4, r1, r0, ror #25
   14994:	andeq	r4, r1, r0, ror #25
   14998:	andeq	r4, r1, r0, ror #25
   1499c:	andeq	r4, r1, r0, ror #25
   149a0:	andeq	r4, r1, r0, ror #25
   149a4:	andeq	r4, r1, r0, ror #25
   149a8:	andeq	r4, r1, r0, ror #25
   149ac:	andeq	r4, r1, r0, ror #25
   149b0:	andeq	r4, r1, r0, ror #25
   149b4:	andeq	r4, r1, r0, ror #25
   149b8:	andeq	r4, r1, r0, ror #25
   149bc:	andeq	r4, r1, r0, ror #25
   149c0:	andeq	r4, r1, r0, ror #25
   149c4:	andeq	r4, r1, ip, asr #26
   149c8:	andeq	r4, r1, r0, asr sp
   149cc:	andeq	r4, r1, r0, asr sp
   149d0:	andeq	r4, r1, r4, asr fp
   149d4:	andeq	r4, r1, r0, asr sp
   149d8:	andeq	r4, r1, r0, asr #22
   149dc:	andeq	r4, r1, r0, asr sp
   149e0:	andeq	r4, r1, r0, asr ip
   149e4:	andeq	r4, r1, r0, asr sp
   149e8:	andeq	r4, r1, r0, asr sp
   149ec:	andeq	r4, r1, r0, asr sp
   149f0:	andeq	r4, r1, r0, asr #22
   149f4:	andeq	r4, r1, r0, asr #22
   149f8:	andeq	r4, r1, r0, asr #22
   149fc:	andeq	r4, r1, r0, asr #22
   14a00:	andeq	r4, r1, r0, asr #22
   14a04:	andeq	r4, r1, r0, asr #22
   14a08:	andeq	r4, r1, r0, asr #22
   14a0c:	andeq	r4, r1, r0, asr #22
   14a10:	andeq	r4, r1, r0, asr #22
   14a14:	andeq	r4, r1, r0, asr #22
   14a18:	andeq	r4, r1, r0, asr #22
   14a1c:	andeq	r4, r1, r0, asr #22
   14a20:	andeq	r4, r1, r0, asr #22
   14a24:	andeq	r4, r1, r0, asr #22
   14a28:	andeq	r4, r1, r0, asr #22
   14a2c:	andeq	r4, r1, r0, asr #22
   14a30:	andeq	r4, r1, r0, asr sp
   14a34:	andeq	r4, r1, r0, asr sp
   14a38:	andeq	r4, r1, r0, asr sp
   14a3c:	andeq	r4, r1, r0, asr sp
   14a40:	andeq	r4, r1, ip, lsl ip
   14a44:	andeq	r4, r1, r0, ror #25
   14a48:	andeq	r4, r1, r0, asr #22
   14a4c:	andeq	r4, r1, r0, asr #22
   14a50:	andeq	r4, r1, r0, asr #22
   14a54:	andeq	r4, r1, r0, asr #22
   14a58:	andeq	r4, r1, r0, asr #22
   14a5c:	andeq	r4, r1, r0, asr #22
   14a60:	andeq	r4, r1, r0, asr #22
   14a64:	andeq	r4, r1, r0, asr #22
   14a68:	andeq	r4, r1, r0, asr #22
   14a6c:	andeq	r4, r1, r0, asr #22
   14a70:	andeq	r4, r1, r0, asr #22
   14a74:	andeq	r4, r1, r0, asr #22
   14a78:	andeq	r4, r1, r0, asr #22
   14a7c:	andeq	r4, r1, r0, asr #22
   14a80:	andeq	r4, r1, r0, asr #22
   14a84:	andeq	r4, r1, r0, asr #22
   14a88:	andeq	r4, r1, r0, asr #22
   14a8c:	andeq	r4, r1, r0, asr #22
   14a90:	andeq	r4, r1, r0, asr #22
   14a94:	andeq	r4, r1, r0, asr #22
   14a98:	andeq	r4, r1, r0, asr #22
   14a9c:	andeq	r4, r1, r0, asr #22
   14aa0:	andeq	r4, r1, r0, asr #22
   14aa4:	andeq	r4, r1, r0, asr #22
   14aa8:	andeq	r4, r1, r0, asr #22
   14aac:	andeq	r4, r1, r0, asr #22
   14ab0:	andeq	r4, r1, r0, asr sp
   14ab4:	andeq	r4, r1, r8, lsl #23
   14ab8:	andeq	r4, r1, r0, asr #22
   14abc:	andeq	r4, r1, r0, asr sp
   14ac0:	andeq	r4, r1, r0, asr #22
   14ac4:	andeq	r4, r1, r0, asr sp
   14ac8:	andeq	r4, r1, r0, asr #22
   14acc:	andeq	r4, r1, r0, asr #22
   14ad0:	andeq	r4, r1, r0, asr #22
   14ad4:	andeq	r4, r1, r0, asr #22
   14ad8:	andeq	r4, r1, r0, asr #22
   14adc:	andeq	r4, r1, r0, asr #22
   14ae0:	andeq	r4, r1, r0, asr #22
   14ae4:	andeq	r4, r1, r0, asr #22
   14ae8:	andeq	r4, r1, r0, asr #22
   14aec:	andeq	r4, r1, r0, asr #22
   14af0:	andeq	r4, r1, r0, asr #22
   14af4:	andeq	r4, r1, r0, asr #22
   14af8:	andeq	r4, r1, r0, asr #22
   14afc:	andeq	r4, r1, r0, asr #22
   14b00:	andeq	r4, r1, r0, asr #22
   14b04:	andeq	r4, r1, r0, asr #22
   14b08:	andeq	r4, r1, r0, asr #22
   14b0c:	andeq	r4, r1, r0, asr #22
   14b10:	andeq	r4, r1, r0, asr #22
   14b14:	andeq	r4, r1, r0, asr #22
   14b18:	andeq	r4, r1, r0, asr #22
   14b1c:	andeq	r4, r1, r0, asr #22
   14b20:	andeq	r4, r1, r0, asr #22
   14b24:	andeq	r4, r1, r0, asr #22
   14b28:	andeq	r4, r1, r0, asr #22
   14b2c:	andeq	r4, r1, r0, asr #22
   14b30:	andeq	r4, r1, r8, ror #22
   14b34:	andeq	r4, r1, r0, asr sp
   14b38:	andeq	r4, r1, r8, ror #22
   14b3c:	andeq	r4, r1, r4, asr fp
   14b40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14b44:	cmp	r0, #0
   14b48:	beq	14da8 <__assert_fail@plt+0x3648>
   14b4c:	ldr	r0, [fp, #16]
   14b50:	b	14dac <__assert_fail@plt+0x364c>
   14b54:	mov	r4, #0
   14b58:	cmp	r7, #0
   14b5c:	beq	14d4c <__assert_fail@plt+0x35ec>
   14b60:	mov	r9, #0
   14b64:	b	14b40 <__assert_fail@plt+0x33e0>
   14b68:	mov	r4, #0
   14b6c:	cmn	lr, #1
   14b70:	beq	14d30 <__assert_fail@plt+0x35d0>
   14b74:	cmp	r7, #0
   14b78:	bne	14b60 <__assert_fail@plt+0x3400>
   14b7c:	cmp	lr, #1
   14b80:	beq	14d4c <__assert_fail@plt+0x35ec>
   14b84:	b	14b60 <__assert_fail@plt+0x3400>
   14b88:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14b8c:	cmp	r0, #2
   14b90:	bne	14d70 <__assert_fail@plt+0x3610>
   14b94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14b98:	tst	r0, #1
   14b9c:	bne	1546c <__assert_fail@plt+0x3d0c>
   14ba0:	mov	r9, #0
   14ba4:	mov	r0, #92	; 0x5c
   14ba8:	b	14d84 <__assert_fail@plt+0x3624>
   14bac:	mov	r0, #102	; 0x66
   14bb0:	b	14d94 <__assert_fail@plt+0x3634>
   14bb4:	mov	r2, #116	; 0x74
   14bb8:	b	14bc8 <__assert_fail@plt+0x3468>
   14bbc:	mov	r0, #98	; 0x62
   14bc0:	b	14d94 <__assert_fail@plt+0x3634>
   14bc4:	mov	r2, #114	; 0x72
   14bc8:	ldr	r0, [sp, #68]	; 0x44
   14bcc:	tst	r0, #1
   14bd0:	mov	r0, r2
   14bd4:	bne	14d94 <__assert_fail@plt+0x3634>
   14bd8:	b	1546c <__assert_fail@plt+0x3d0c>
   14bdc:	ldr	r0, [sp, #84]	; 0x54
   14be0:	tst	r0, #1
   14be4:	beq	14e84 <__assert_fail@plt+0x3724>
   14be8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14bec:	tst	r0, #1
   14bf0:	bne	1557c <__assert_fail@plt+0x3e1c>
   14bf4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14bf8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14bfc:	cmp	r0, #2
   14c00:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14c04:	movwne	r0, #1
   14c08:	orr	r0, r0, r2
   14c0c:	tst	r0, #1
   14c10:	beq	15254 <__assert_fail@plt+0x3af4>
   14c14:	mov	r0, r8
   14c18:	b	15288 <__assert_fail@plt+0x3b28>
   14c1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14c20:	mov	r9, #0
   14c24:	mov	r5, #63	; 0x3f
   14c28:	cmp	r0, #5
   14c2c:	beq	15038 <__assert_fail@plt+0x38d8>
   14c30:	cmp	r0, #2
   14c34:	bne	150dc <__assert_fail@plt+0x397c>
   14c38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c3c:	tst	r0, #1
   14c40:	beq	150e0 <__assert_fail@plt+0x3980>
   14c44:	b	1546c <__assert_fail@plt+0x3d0c>
   14c48:	mov	r0, #118	; 0x76
   14c4c:	b	14d94 <__assert_fail@plt+0x3634>
   14c50:	mov	r0, #1
   14c54:	mov	r5, #39	; 0x27
   14c58:	str	r0, [sp, #60]	; 0x3c
   14c5c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14c60:	cmp	r0, #2
   14c64:	bne	14cd8 <__assert_fail@plt+0x3578>
   14c68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14c6c:	tst	r0, #1
   14c70:	bne	1546c <__assert_fail@plt+0x3d0c>
   14c74:	ldr	r2, [sp, #56]	; 0x38
   14c78:	clz	r1, sl
   14c7c:	mov	r9, #0
   14c80:	lsr	r1, r1, #5
   14c84:	cmp	r2, #0
   14c88:	mov	r0, r2
   14c8c:	movwne	r0, #1
   14c90:	orrs	r0, r0, r1
   14c94:	moveq	r2, sl
   14c98:	moveq	sl, r0
   14c9c:	cmp	r8, sl
   14ca0:	str	r2, [sp, #56]	; 0x38
   14ca4:	movcc	r0, #39	; 0x27
   14ca8:	strbcc	r0, [r6, r8]
   14cac:	add	r0, r8, #1
   14cb0:	cmp	r0, sl
   14cb4:	movcc	r1, #92	; 0x5c
   14cb8:	strbcc	r1, [r6, r0]
   14cbc:	add	r0, r8, #2
   14cc0:	add	r8, r8, #3
   14cc4:	cmp	r0, sl
   14cc8:	movcc	r1, #39	; 0x27
   14ccc:	strbcc	r1, [r6, r0]
   14cd0:	mov	r0, #0
   14cd4:	str	r0, [fp, #-56]	; 0xffffffc8
   14cd8:	mov	r4, #1
   14cdc:	b	14b40 <__assert_fail@plt+0x33e0>
   14ce0:	ldr	r0, [sp, #40]	; 0x28
   14ce4:	cmp	r0, #1
   14ce8:	bne	14eb0 <__assert_fail@plt+0x3750>
   14cec:	str	lr, [sp, #28]
   14cf0:	bl	11610 <__ctype_b_loc@plt>
   14cf4:	ldr	r0, [r0]
   14cf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   14cfc:	mov	r1, #1
   14d00:	add	r0, r0, r5, lsl #1
   14d04:	ldrb	r0, [r0, #1]
   14d08:	ubfx	r4, r0, #6, #1
   14d0c:	ldr	r0, [sp, #52]	; 0x34
   14d10:	mov	r2, r1
   14d14:	cmp	r1, #1
   14d18:	orr	r0, r4, r0
   14d1c:	bhi	150e8 <__assert_fail@plt+0x3988>
   14d20:	tst	r0, #1
   14d24:	beq	150e8 <__assert_fail@plt+0x3988>
   14d28:	ldr	lr, [sp, #28]
   14d2c:	b	14b40 <__assert_fail@plt+0x33e0>
   14d30:	cmp	r7, #0
   14d34:	ldrbeq	r0, [ip, #1]
   14d38:	cmpeq	r0, #0
   14d3c:	beq	14d4c <__assert_fail@plt+0x35ec>
   14d40:	mvn	lr, #0
   14d44:	mov	r9, #0
   14d48:	b	14b40 <__assert_fail@plt+0x33e0>
   14d4c:	mov	r1, #1
   14d50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14d54:	cmp	r0, #2
   14d58:	bne	14d68 <__assert_fail@plt+0x3608>
   14d5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14d60:	tst	r0, #1
   14d64:	bne	1546c <__assert_fail@plt+0x3d0c>
   14d68:	mov	r4, r1
   14d6c:	b	14b40 <__assert_fail@plt+0x33e0>
   14d70:	ldr	r1, [sp, #48]	; 0x30
   14d74:	mov	r9, #0
   14d78:	mov	r0, #92	; 0x5c
   14d7c:	cmp	r1, #0
   14d80:	beq	14d94 <__assert_fail@plt+0x3634>
   14d84:	mov	r4, #0
   14d88:	cmp	r9, #0
   14d8c:	beq	15320 <__assert_fail@plt+0x3bc0>
   14d90:	b	1535c <__assert_fail@plt+0x3bfc>
   14d94:	ldr	r1, [sp, #84]	; 0x54
   14d98:	mov	r4, #0
   14d9c:	mov	r9, #0
   14da0:	tst	r1, #1
   14da4:	bne	14de4 <__assert_fail@plt+0x3684>
   14da8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14dac:	cmp	r0, #0
   14db0:	mov	r0, r5
   14db4:	beq	14dd8 <__assert_fail@plt+0x3678>
   14db8:	ldr	r1, [fp, #16]
   14dbc:	ubfx	r0, r5, #5, #3
   14dc0:	mov	r2, #1
   14dc4:	ldr	r0, [r1, r0, lsl #2]
   14dc8:	and	r1, r5, #31
   14dcc:	tst	r0, r2, lsl r1
   14dd0:	mov	r0, r5
   14dd4:	bne	14de4 <__assert_fail@plt+0x3684>
   14dd8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14ddc:	cmp	r1, #0
   14de0:	beq	15318 <__assert_fail@plt+0x3bb8>
   14de4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14de8:	tst	r1, #1
   14dec:	bne	15444 <__assert_fail@plt+0x3ce4>
   14df0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14df4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14df8:	cmp	r1, #2
   14dfc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14e00:	movwne	r1, #1
   14e04:	orr	r1, r1, r2
   14e08:	tst	r1, #1
   14e0c:	beq	14e18 <__assert_fail@plt+0x36b8>
   14e10:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14e14:	b	14e54 <__assert_fail@plt+0x36f4>
   14e18:	cmp	r8, sl
   14e1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14e20:	movcc	r1, #39	; 0x27
   14e24:	strbcc	r1, [r6, r8]
   14e28:	add	r1, r8, #1
   14e2c:	cmp	r1, sl
   14e30:	movcc	r2, #36	; 0x24
   14e34:	strbcc	r2, [r6, r1]
   14e38:	add	r1, r8, #2
   14e3c:	add	r8, r8, #3
   14e40:	cmp	r1, sl
   14e44:	movcc	r2, #39	; 0x27
   14e48:	strbcc	r2, [r6, r1]
   14e4c:	mov	r1, #1
   14e50:	str	r1, [fp, #-56]	; 0xffffffc8
   14e54:	cmp	r8, sl
   14e58:	movcc	r1, #92	; 0x5c
   14e5c:	strbcc	r1, [r6, r8]
   14e60:	add	r8, r8, #1
   14e64:	cmp	r8, sl
   14e68:	and	r5, r5, r4
   14e6c:	add	r7, r7, #1
   14e70:	strbcc	r0, [r6, r8]
   14e74:	add	r8, r8, #1
   14e78:	cmn	lr, #1
   14e7c:	bne	14878 <__assert_fail@plt+0x3118>
   14e80:	b	14884 <__assert_fail@plt+0x3124>
   14e84:	ldr	r0, [sp, #36]	; 0x24
   14e88:	mov	r4, #0
   14e8c:	mov	r9, #0
   14e90:	mov	r5, #0
   14e94:	cmp	r0, #0
   14e98:	beq	14da8 <__assert_fail@plt+0x3648>
   14e9c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14ea0:	add	r7, r7, #1
   14ea4:	cmn	lr, #1
   14ea8:	bne	14878 <__assert_fail@plt+0x3118>
   14eac:	b	14884 <__assert_fail@plt+0x3124>
   14eb0:	mov	r0, #0
   14eb4:	cmn	lr, #1
   14eb8:	str	r0, [fp, #-36]	; 0xffffffdc
   14ebc:	str	r0, [fp, #-40]	; 0xffffffd8
   14ec0:	bne	14ed4 <__assert_fail@plt+0x3774>
   14ec4:	mov	r0, ip
   14ec8:	bl	11628 <strlen@plt>
   14ecc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ed0:	mov	lr, r0
   14ed4:	add	r0, ip, r7
   14ed8:	mov	r4, #1
   14edc:	mov	r6, #0
   14ee0:	str	lr, [sp, #28]
   14ee4:	str	r0, [sp, #24]
   14ee8:	sub	r0, fp, #40	; 0x28
   14eec:	mov	r3, r0
   14ef0:	str	r6, [sp, #44]	; 0x2c
   14ef4:	add	r6, r6, r7
   14ef8:	sub	r0, fp, #44	; 0x2c
   14efc:	add	r1, ip, r6
   14f00:	sub	r2, lr, r6
   14f04:	bl	2ac8c <__assert_fail@plt+0x1952c>
   14f08:	cmp	r0, #0
   14f0c:	beq	153a4 <__assert_fail@plt+0x3c44>
   14f10:	cmn	r0, #1
   14f14:	beq	15364 <__assert_fail@plt+0x3c04>
   14f18:	ldr	lr, [sp, #28]
   14f1c:	cmn	r0, #2
   14f20:	beq	1536c <__assert_fail@plt+0x3c0c>
   14f24:	ldr	r2, [sp, #64]	; 0x40
   14f28:	cmp	r0, #2
   14f2c:	mov	r1, #0
   14f30:	movwcc	r1, #1
   14f34:	eor	r2, r2, #1
   14f38:	orrs	r1, r2, r1
   14f3c:	bne	14ffc <__assert_fail@plt+0x389c>
   14f40:	ldr	r1, [sp, #44]	; 0x2c
   14f44:	ldr	r2, [sp, #24]
   14f48:	add	r1, r2, r1
   14f4c:	mov	r2, #1
   14f50:	ldrb	r3, [r1, r2]
   14f54:	sub	r3, r3, #91	; 0x5b
   14f58:	cmp	r3, #33	; 0x21
   14f5c:	bhi	14ff0 <__assert_fail@plt+0x3890>
   14f60:	add	r6, pc, #0
   14f64:	ldr	pc, [r6, r3, lsl #2]
   14f68:	andeq	r5, r1, r4, ror #8
   14f6c:	andeq	r5, r1, r4, ror #8
   14f70:	strdeq	r4, [r1], -r0
   14f74:	andeq	r5, r1, r4, ror #8
   14f78:	strdeq	r4, [r1], -r0
   14f7c:	andeq	r5, r1, r4, ror #8
   14f80:	strdeq	r4, [r1], -r0
   14f84:	strdeq	r4, [r1], -r0
   14f88:	strdeq	r4, [r1], -r0
   14f8c:	strdeq	r4, [r1], -r0
   14f90:	strdeq	r4, [r1], -r0
   14f94:	strdeq	r4, [r1], -r0
   14f98:	strdeq	r4, [r1], -r0
   14f9c:	strdeq	r4, [r1], -r0
   14fa0:	strdeq	r4, [r1], -r0
   14fa4:	strdeq	r4, [r1], -r0
   14fa8:	strdeq	r4, [r1], -r0
   14fac:	strdeq	r4, [r1], -r0
   14fb0:	strdeq	r4, [r1], -r0
   14fb4:	strdeq	r4, [r1], -r0
   14fb8:	strdeq	r4, [r1], -r0
   14fbc:	strdeq	r4, [r1], -r0
   14fc0:	strdeq	r4, [r1], -r0
   14fc4:	strdeq	r4, [r1], -r0
   14fc8:	strdeq	r4, [r1], -r0
   14fcc:	strdeq	r4, [r1], -r0
   14fd0:	strdeq	r4, [r1], -r0
   14fd4:	strdeq	r4, [r1], -r0
   14fd8:	strdeq	r4, [r1], -r0
   14fdc:	strdeq	r4, [r1], -r0
   14fe0:	strdeq	r4, [r1], -r0
   14fe4:	strdeq	r4, [r1], -r0
   14fe8:	strdeq	r4, [r1], -r0
   14fec:	andeq	r5, r1, r4, ror #8
   14ff0:	add	r2, r2, #1
   14ff4:	cmp	r2, r0
   14ff8:	bcc	14f50 <__assert_fail@plt+0x37f0>
   14ffc:	ldr	r6, [sp, #44]	; 0x2c
   15000:	add	r6, r0, r6
   15004:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15008:	bl	11538 <iswprint@plt>
   1500c:	cmp	r0, #0
   15010:	movwne	r0, #1
   15014:	and	r4, r4, r0
   15018:	sub	r0, fp, #40	; 0x28
   1501c:	bl	114b4 <mbsinit@plt>
   15020:	ldr	lr, [sp, #28]
   15024:	ldr	ip, [fp, #-84]	; 0xffffffac
   15028:	sub	r3, fp, #40	; 0x28
   1502c:	cmp	r0, #0
   15030:	beq	14ef0 <__assert_fail@plt+0x3790>
   15034:	b	153ac <__assert_fail@plt+0x3c4c>
   15038:	ldr	r0, [sp, #32]
   1503c:	cmp	r0, #0
   15040:	beq	150dc <__assert_fail@plt+0x397c>
   15044:	add	r0, r7, #2
   15048:	cmp	r0, lr
   1504c:	bcs	150dc <__assert_fail@plt+0x397c>
   15050:	add	r1, ip, r7
   15054:	ldrb	r1, [r1, #1]
   15058:	cmp	r1, #63	; 0x3f
   1505c:	bne	150dc <__assert_fail@plt+0x397c>
   15060:	ldrb	r5, [ip, r0]
   15064:	sub	r1, r5, #33	; 0x21
   15068:	cmp	r1, #29
   1506c:	bhi	150dc <__assert_fail@plt+0x397c>
   15070:	movw	r3, #20929	; 0x51c1
   15074:	mov	r2, #1
   15078:	movt	r3, #14336	; 0x3800
   1507c:	tst	r3, r2, lsl r1
   15080:	beq	150dc <__assert_fail@plt+0x397c>
   15084:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15088:	tst	r1, #1
   1508c:	bne	15584 <__assert_fail@plt+0x3e24>
   15090:	cmp	r8, sl
   15094:	mov	r7, r0
   15098:	mov	r4, #0
   1509c:	movcc	r1, #63	; 0x3f
   150a0:	strbcc	r1, [r6, r8]
   150a4:	add	r1, r8, #1
   150a8:	cmp	r1, sl
   150ac:	movcc	r2, #34	; 0x22
   150b0:	strbcc	r2, [r6, r1]
   150b4:	add	r1, r8, #2
   150b8:	cmp	r1, sl
   150bc:	movcc	r2, #34	; 0x22
   150c0:	strbcc	r2, [r6, r1]
   150c4:	add	r1, r8, #3
   150c8:	add	r8, r8, #4
   150cc:	cmp	r1, sl
   150d0:	movcc	r2, #63	; 0x3f
   150d4:	strbcc	r2, [r6, r1]
   150d8:	b	14b40 <__assert_fail@plt+0x33e0>
   150dc:	mov	r5, #63	; 0x3f
   150e0:	mov	r4, #0
   150e4:	b	14b40 <__assert_fail@plt+0x33e0>
   150e8:	add	r1, r2, r7
   150ec:	ldr	lr, [sp, #28]
   150f0:	mov	r3, #0
   150f4:	str	r1, [sp, #44]	; 0x2c
   150f8:	add	r1, r7, #1
   150fc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15100:	tst	r0, #1
   15104:	bne	151d8 <__assert_fail@plt+0x3a78>
   15108:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1510c:	tst	r2, #1
   15110:	bne	154cc <__assert_fail@plt+0x3d6c>
   15114:	ldr	r3, [fp, #-80]	; 0xffffffb0
   15118:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1511c:	cmp	r7, #2
   15120:	movwne	r3, #1
   15124:	orr	r3, r3, r2
   15128:	tst	r3, #1
   1512c:	bne	15168 <__assert_fail@plt+0x3a08>
   15130:	cmp	r8, sl
   15134:	add	r3, r8, #1
   15138:	movcc	r2, #39	; 0x27
   1513c:	strbcc	r2, [r6, r8]
   15140:	cmp	r3, sl
   15144:	movcc	r2, #36	; 0x24
   15148:	strbcc	r2, [r6, r3]
   1514c:	add	r3, r8, #2
   15150:	add	r8, r8, #3
   15154:	cmp	r3, sl
   15158:	movcc	r2, #39	; 0x27
   1515c:	strbcc	r2, [r6, r3]
   15160:	mov	r2, #1
   15164:	str	r2, [fp, #-56]	; 0xffffffc8
   15168:	cmp	r8, sl
   1516c:	movcc	r3, #92	; 0x5c
   15170:	strbcc	r3, [r6, r8]
   15174:	add	r3, r8, #1
   15178:	cmp	r3, sl
   1517c:	andcc	r7, r5, #192	; 0xc0
   15180:	movcc	r2, #48	; 0x30
   15184:	orrcc	r7, r2, r7, lsr #6
   15188:	strbcc	r7, [r6, r3]
   1518c:	add	r3, r8, #2
   15190:	add	r8, r8, #3
   15194:	cmp	r3, sl
   15198:	lsrcc	r7, r5, #3
   1519c:	movcc	r2, #6
   151a0:	bficc	r7, r2, #3, #29
   151a4:	mov	r2, #6
   151a8:	strbcc	r7, [r6, r3]
   151ac:	bfi	r5, r2, #3, #29
   151b0:	mov	r3, #1
   151b4:	b	151fc <__assert_fail@plt+0x3a9c>
   151b8:	cmp	r8, sl
   151bc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   151c0:	strbcc	r5, [r6, r8]
   151c4:	add	r8, r8, #1
   151c8:	ldrb	r5, [ip, r1]
   151cc:	add	r1, r1, #1
   151d0:	tst	r0, #1
   151d4:	beq	15108 <__assert_fail@plt+0x39a8>
   151d8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   151dc:	tst	r2, #1
   151e0:	beq	151f4 <__assert_fail@plt+0x3a94>
   151e4:	cmp	r8, sl
   151e8:	movcc	r7, #92	; 0x5c
   151ec:	strbcc	r7, [r6, r8]
   151f0:	add	r8, r8, #1
   151f4:	mov	r2, #0
   151f8:	str	r2, [fp, #-52]	; 0xffffffcc
   151fc:	ldr	r2, [sp, #44]	; 0x2c
   15200:	and	r9, r3, #1
   15204:	cmp	r2, r1
   15208:	bls	15308 <__assert_fail@plt+0x3ba8>
   1520c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15210:	cmp	r9, #0
   15214:	movwne	r9, #1
   15218:	mvn	r7, r2
   1521c:	orr	r7, r7, r9
   15220:	tst	r7, #1
   15224:	bne	151b8 <__assert_fail@plt+0x3a58>
   15228:	cmp	r8, sl
   1522c:	movcc	r7, #39	; 0x27
   15230:	strbcc	r7, [r6, r8]
   15234:	add	r7, r8, #1
   15238:	add	r8, r8, #2
   1523c:	cmp	r7, sl
   15240:	movcc	r2, #39	; 0x27
   15244:	strbcc	r2, [r6, r7]
   15248:	mov	r2, #0
   1524c:	str	r2, [fp, #-56]	; 0xffffffc8
   15250:	b	151b8 <__assert_fail@plt+0x3a58>
   15254:	cmp	r8, sl
   15258:	mov	r2, #1
   1525c:	movcc	r0, #39	; 0x27
   15260:	strbcc	r0, [r6, r8]
   15264:	add	r0, r8, #1
   15268:	cmp	r0, sl
   1526c:	movcc	r1, #36	; 0x24
   15270:	strbcc	r1, [r6, r0]
   15274:	add	r0, r8, #2
   15278:	cmp	r0, sl
   1527c:	movcc	r1, #39	; 0x27
   15280:	strbcc	r1, [r6, r0]
   15284:	add	r0, r8, #3
   15288:	cmp	r0, sl
   1528c:	add	r8, r0, #1
   15290:	str	r2, [fp, #-56]	; 0xffffffc8
   15294:	movcc	r1, #92	; 0x5c
   15298:	strbcc	r1, [r6, r0]
   1529c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   152a0:	cmp	r1, #2
   152a4:	beq	152f8 <__assert_fail@plt+0x3b98>
   152a8:	add	r1, r7, #1
   152ac:	mov	r4, #0
   152b0:	mov	r9, #1
   152b4:	mov	r5, #48	; 0x30
   152b8:	cmp	r1, lr
   152bc:	bcs	14b40 <__assert_fail@plt+0x33e0>
   152c0:	ldrb	r1, [ip, r1]
   152c4:	sub	r1, r1, #48	; 0x30
   152c8:	uxtb	r1, r1
   152cc:	cmp	r1, #9
   152d0:	bhi	14b40 <__assert_fail@plt+0x33e0>
   152d4:	cmp	r8, sl
   152d8:	movcc	r1, #48	; 0x30
   152dc:	strbcc	r1, [r6, r8]
   152e0:	add	r1, r0, #2
   152e4:	add	r8, r0, #3
   152e8:	cmp	r1, sl
   152ec:	movcc	r2, #48	; 0x30
   152f0:	strbcc	r2, [r6, r1]
   152f4:	b	14b40 <__assert_fail@plt+0x33e0>
   152f8:	mov	r0, #48	; 0x30
   152fc:	mov	r9, #1
   15300:	mov	r4, #0
   15304:	b	14dd8 <__assert_fail@plt+0x3678>
   15308:	cmp	r9, #0
   1530c:	sub	r7, r1, #1
   15310:	mov	r0, r5
   15314:	movwne	r9, #1
   15318:	cmp	r9, #0
   1531c:	bne	1535c <__assert_fail@plt+0x3bfc>
   15320:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15324:	tst	r1, #1
   15328:	beq	1535c <__assert_fail@plt+0x3bfc>
   1532c:	cmp	r8, sl
   15330:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15334:	movcc	r1, #39	; 0x27
   15338:	strbcc	r1, [r6, r8]
   1533c:	add	r1, r8, #1
   15340:	add	r8, r8, #2
   15344:	cmp	r1, sl
   15348:	movcc	r2, #39	; 0x27
   1534c:	strbcc	r2, [r6, r1]
   15350:	mov	r1, #0
   15354:	str	r1, [fp, #-56]	; 0xffffffc8
   15358:	b	14e64 <__assert_fail@plt+0x3704>
   1535c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   15360:	b	14e64 <__assert_fail@plt+0x3704>
   15364:	mov	r4, #0
   15368:	b	153a4 <__assert_fail@plt+0x3c44>
   1536c:	mov	r4, #0
   15370:	cmp	lr, r6
   15374:	bls	153a4 <__assert_fail@plt+0x3c44>
   15378:	ldr	ip, [fp, #-84]	; 0xffffffac
   1537c:	ldr	r6, [sp, #44]	; 0x2c
   15380:	ldr	r0, [sp, #24]
   15384:	ldrb	r0, [r0, r6]
   15388:	cmp	r0, #0
   1538c:	beq	153ac <__assert_fail@plt+0x3c4c>
   15390:	add	r6, r6, #1
   15394:	add	r0, r7, r6
   15398:	cmp	r0, lr
   1539c:	bcc	15380 <__assert_fail@plt+0x3c20>
   153a0:	b	153ac <__assert_fail@plt+0x3c4c>
   153a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   153a8:	ldr	r6, [sp, #44]	; 0x2c
   153ac:	mov	r1, r6
   153b0:	ldr	r6, [sp, #80]	; 0x50
   153b4:	b	14d0c <__assert_fail@plt+0x35ac>
   153b8:	mov	lr, r7
   153bc:	b	153c4 <__assert_fail@plt+0x3c64>
   153c0:	mvn	lr, #0
   153c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   153c8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   153cc:	eor	r0, r7, #2
   153d0:	orr	r0, r0, r8
   153d4:	clz	r0, r0
   153d8:	lsr	r0, r0, #5
   153dc:	tst	r1, r0
   153e0:	bne	1546c <__assert_fail@plt+0x3d0c>
   153e4:	mov	r0, r1
   153e8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   153ec:	cmp	r7, #2
   153f0:	movwne	r1, #1
   153f4:	orr	r0, r0, r1
   153f8:	tst	r0, #1
   153fc:	ldreq	r0, [sp, #60]	; 0x3c
   15400:	eoreq	r0, r0, #1
   15404:	tsteq	r0, #1
   15408:	bne	15518 <__assert_fail@plt+0x3db8>
   1540c:	mov	r9, lr
   15410:	tst	r5, #1
   15414:	bne	154d4 <__assert_fail@plt+0x3d74>
   15418:	ldr	r6, [sp, #56]	; 0x38
   1541c:	mov	r4, #0
   15420:	cmp	r6, #0
   15424:	beq	15510 <__assert_fail@plt+0x3db0>
   15428:	ldr	r0, [sp, #84]	; 0x54
   1542c:	mov	r1, #0
   15430:	cmp	sl, #0
   15434:	mov	r5, #0
   15438:	str	r1, [fp, #-72]	; 0xffffffb8
   1543c:	beq	1460c <__assert_fail@plt+0x2eac>
   15440:	b	15518 <__assert_fail@plt+0x3db8>
   15444:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15448:	ldr	r2, [sp, #84]	; 0x54
   1544c:	b	15474 <__assert_fail@plt+0x3d14>
   15450:	ldr	ip, [fp, #-84]	; 0xffffffac
   15454:	mov	r2, #1
   15458:	mov	lr, r4
   1545c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15460:	b	15474 <__assert_fail@plt+0x3d14>
   15464:	ldr	r6, [sp, #80]	; 0x50
   15468:	ldr	ip, [fp, #-84]	; 0xffffffac
   1546c:	ldr	r2, [sp, #84]	; 0x54
   15470:	mov	r7, #2
   15474:	mov	r0, #0
   15478:	ldr	r1, [fp, #12]
   1547c:	tst	r2, #1
   15480:	mov	r2, r7
   15484:	mov	r3, lr
   15488:	str	r0, [sp, #8]
   1548c:	ldr	r0, [sp, #72]	; 0x48
   15490:	movwne	r2, #4
   15494:	cmp	r7, #2
   15498:	movne	r2, r7
   1549c:	str	r2, [sp]
   154a0:	mov	r2, ip
   154a4:	bic	r1, r1, #2
   154a8:	str	r0, [sp, #12]
   154ac:	ldr	r0, [sp, #76]	; 0x4c
   154b0:	str	r1, [sp, #4]
   154b4:	mov	r1, sl
   154b8:	str	r0, [sp, #16]
   154bc:	mov	r0, r6
   154c0:	bl	1458c <__assert_fail@plt+0x2e2c>
   154c4:	mov	r8, r0
   154c8:	b	15570 <__assert_fail@plt+0x3e10>
   154cc:	ldr	r2, [sp, #84]	; 0x54
   154d0:	b	15474 <__assert_fail@plt+0x3d14>
   154d4:	mov	r0, #5
   154d8:	ldr	r1, [sp, #56]	; 0x38
   154dc:	ldr	r2, [fp, #-84]	; 0xffffffac
   154e0:	mov	r3, r9
   154e4:	str	r0, [sp]
   154e8:	ldr	r0, [fp, #12]
   154ec:	str	r0, [sp, #4]
   154f0:	ldr	r0, [fp, #16]
   154f4:	str	r0, [sp, #8]
   154f8:	ldr	r0, [sp, #72]	; 0x48
   154fc:	str	r0, [sp, #12]
   15500:	ldr	r0, [sp, #76]	; 0x4c
   15504:	str	r0, [sp, #16]
   15508:	ldr	r0, [sp, #80]	; 0x50
   1550c:	b	154c0 <__assert_fail@plt+0x3d60>
   15510:	mov	r0, #0
   15514:	str	r0, [fp, #-72]	; 0xffffffb8
   15518:	ldr	r1, [sp, #92]	; 0x5c
   1551c:	cmp	r1, #0
   15520:	beq	15560 <__assert_fail@plt+0x3e00>
   15524:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15528:	ldr	r2, [sp, #80]	; 0x50
   1552c:	tst	r0, #1
   15530:	bne	15564 <__assert_fail@plt+0x3e04>
   15534:	ldrb	r0, [r1]
   15538:	cmp	r0, #0
   1553c:	beq	15564 <__assert_fail@plt+0x3e04>
   15540:	add	r1, r1, #1
   15544:	cmp	r8, sl
   15548:	strbcc	r0, [r2, r8]
   1554c:	add	r8, r8, #1
   15550:	ldrb	r0, [r1], #1
   15554:	cmp	r0, #0
   15558:	bne	15544 <__assert_fail@plt+0x3de4>
   1555c:	b	15564 <__assert_fail@plt+0x3e04>
   15560:	ldr	r2, [sp, #80]	; 0x50
   15564:	cmp	r8, sl
   15568:	movcc	r0, #0
   1556c:	strbcc	r0, [r2, r8]
   15570:	mov	r0, r8
   15574:	sub	sp, fp, #28
   15578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1557c:	mov	r2, #1
   15580:	b	1545c <__assert_fail@plt+0x3cfc>
   15584:	ldr	r2, [sp, #84]	; 0x54
   15588:	mov	r7, #5
   1558c:	b	15474 <__assert_fail@plt+0x3d14>
   15590:	bl	1173c <abort@plt>
   15594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15598:	add	fp, sp, #28
   1559c:	sub	sp, sp, #28
   155a0:	movw	r5, #53952	; 0xd2c0
   155a4:	cmp	r2, #0
   155a8:	mov	r4, r1
   155ac:	mov	r7, r0
   155b0:	str	r0, [sp, #20]
   155b4:	movt	r5, #3
   155b8:	movne	r5, r2
   155bc:	bl	11640 <__errno_location@plt>
   155c0:	mov	sl, r0
   155c4:	ldm	r5, {r0, r1}
   155c8:	ldr	r2, [r5, #40]	; 0x28
   155cc:	ldr	r3, [r5, #44]	; 0x2c
   155d0:	add	r9, r5, #8
   155d4:	ldr	r6, [sl]
   155d8:	orr	r8, r1, #1
   155dc:	mov	r1, #0
   155e0:	str	r6, [sp, #24]
   155e4:	stm	sp, {r0, r8, r9}
   155e8:	str	r2, [sp, #12]
   155ec:	str	r3, [sp, #16]
   155f0:	mov	r0, #0
   155f4:	mov	r2, r7
   155f8:	mov	r3, r4
   155fc:	mov	r6, r4
   15600:	bl	1458c <__assert_fail@plt+0x2e2c>
   15604:	add	r7, r0, #1
   15608:	mov	r0, r7
   1560c:	bl	27c60 <__assert_fail@plt+0x16500>
   15610:	mov	r4, r0
   15614:	ldr	r0, [r5]
   15618:	ldr	r2, [r5, #44]	; 0x2c
   1561c:	ldr	r1, [r5, #40]	; 0x28
   15620:	mov	r3, r6
   15624:	stm	sp, {r0, r8, r9}
   15628:	str	r2, [sp, #16]
   1562c:	str	r1, [sp, #12]
   15630:	mov	r0, r4
   15634:	mov	r1, r7
   15638:	ldr	r2, [sp, #20]
   1563c:	bl	1458c <__assert_fail@plt+0x2e2c>
   15640:	ldr	r0, [sp, #24]
   15644:	str	r0, [sl]
   15648:	mov	r0, r4
   1564c:	sub	sp, fp, #28
   15650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15658:	add	fp, sp, #28
   1565c:	sub	sp, sp, #36	; 0x24
   15660:	movw	r8, #53952	; 0xd2c0
   15664:	cmp	r3, #0
   15668:	mov	r4, r2
   1566c:	str	r2, [sp, #24]
   15670:	mov	r5, r1
   15674:	mov	r6, r0
   15678:	str	r0, [sp, #20]
   1567c:	movt	r8, #3
   15680:	movne	r8, r3
   15684:	bl	11640 <__errno_location@plt>
   15688:	str	r0, [sp, #28]
   1568c:	cmp	r4, #0
   15690:	add	sl, r8, #8
   15694:	ldm	r8, {r3, r9}
   15698:	ldr	r7, [r0]
   1569c:	ldr	r1, [r8, #40]	; 0x28
   156a0:	ldr	r2, [r8, #44]	; 0x2c
   156a4:	mov	r0, #0
   156a8:	orreq	r9, r9, #1
   156ac:	str	r7, [sp, #32]
   156b0:	mov	r7, r5
   156b4:	stm	sp, {r3, r9, sl}
   156b8:	str	r1, [sp, #12]
   156bc:	str	r2, [sp, #16]
   156c0:	mov	r1, #0
   156c4:	mov	r2, r6
   156c8:	mov	r3, r5
   156cc:	bl	1458c <__assert_fail@plt+0x2e2c>
   156d0:	add	r4, r0, #1
   156d4:	mov	r5, r0
   156d8:	mov	r0, r4
   156dc:	bl	27c60 <__assert_fail@plt+0x16500>
   156e0:	mov	r6, r0
   156e4:	ldr	r0, [r8]
   156e8:	ldr	r2, [r8, #44]	; 0x2c
   156ec:	ldr	r1, [r8, #40]	; 0x28
   156f0:	mov	r3, r7
   156f4:	stm	sp, {r0, r9, sl}
   156f8:	str	r2, [sp, #16]
   156fc:	str	r1, [sp, #12]
   15700:	mov	r0, r6
   15704:	mov	r1, r4
   15708:	ldr	r2, [sp, #20]
   1570c:	bl	1458c <__assert_fail@plt+0x2e2c>
   15710:	ldr	r0, [sp, #24]
   15714:	ldr	r1, [sp, #32]
   15718:	ldr	r2, [sp, #28]
   1571c:	cmp	r0, #0
   15720:	str	r1, [r2]
   15724:	strne	r5, [r0]
   15728:	mov	r0, r6
   1572c:	sub	sp, fp, #28
   15730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15734:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15738:	add	fp, sp, #24
   1573c:	movw	r5, #53612	; 0xd16c
   15740:	movw	r8, #53608	; 0xd168
   15744:	movt	r5, #3
   15748:	movt	r8, #3
   1574c:	ldr	r0, [r5]
   15750:	ldr	r4, [r8]
   15754:	cmp	r0, #2
   15758:	blt	15784 <__assert_fail@plt+0x4024>
   1575c:	add	r7, r4, #12
   15760:	mov	r6, #0
   15764:	ldr	r0, [r7, r6, lsl #3]
   15768:	bl	141c4 <__assert_fail@plt+0x2a64>
   1576c:	ldr	r1, [r5]
   15770:	add	r2, r6, #2
   15774:	add	r0, r6, #1
   15778:	mov	r6, r0
   1577c:	cmp	r2, r1
   15780:	blt	15764 <__assert_fail@plt+0x4004>
   15784:	ldr	r0, [r4, #4]
   15788:	movw	r7, #54000	; 0xd2f0
   1578c:	movt	r7, #3
   15790:	cmp	r0, r7
   15794:	beq	157ac <__assert_fail@plt+0x404c>
   15798:	bl	141c4 <__assert_fail@plt+0x2a64>
   1579c:	movw	r0, #53616	; 0xd170
   157a0:	mov	r6, #256	; 0x100
   157a4:	movt	r0, #3
   157a8:	strd	r6, [r0]
   157ac:	movw	r6, #53616	; 0xd170
   157b0:	movt	r6, #3
   157b4:	cmp	r4, r6
   157b8:	beq	157c8 <__assert_fail@plt+0x4068>
   157bc:	mov	r0, r4
   157c0:	bl	141c4 <__assert_fail@plt+0x2a64>
   157c4:	str	r6, [r8]
   157c8:	mov	r0, #1
   157cc:	str	r0, [r5]
   157d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   157d4:	movw	r3, #53952	; 0xd2c0
   157d8:	mvn	r2, #0
   157dc:	movt	r3, #3
   157e0:	b	157e4 <__assert_fail@plt+0x4084>
   157e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157e8:	add	fp, sp, #28
   157ec:	sub	sp, sp, #44	; 0x2c
   157f0:	mov	r7, r3
   157f4:	str	r2, [sp, #36]	; 0x24
   157f8:	str	r1, [sp, #32]
   157fc:	mov	r5, r0
   15800:	bl	11640 <__errno_location@plt>
   15804:	cmp	r5, #0
   15808:	blt	15974 <__assert_fail@plt+0x4214>
   1580c:	cmn	r5, #-2147483647	; 0x80000001
   15810:	beq	15974 <__assert_fail@plt+0x4214>
   15814:	movw	r8, #53612	; 0xd16c
   15818:	movw	r4, #53608	; 0xd168
   1581c:	str	r0, [sp, #28]
   15820:	ldr	r0, [r0]
   15824:	movt	r8, #3
   15828:	movt	r4, #3
   1582c:	ldr	r1, [r8]
   15830:	ldr	r6, [r4]
   15834:	str	r0, [sp, #24]
   15838:	cmp	r1, r5
   1583c:	ble	15848 <__assert_fail@plt+0x40e8>
   15840:	mov	sl, r6
   15844:	b	158b0 <__assert_fail@plt+0x4150>
   15848:	movw	r9, #53616	; 0xd170
   1584c:	mov	r0, #8
   15850:	add	r2, r5, #1
   15854:	str	r1, [fp, #-32]	; 0xffffffe0
   15858:	mvn	r3, #-2147483648	; 0x80000000
   1585c:	movt	r9, #3
   15860:	str	r0, [sp]
   15864:	sub	r2, r2, r1
   15868:	sub	r1, fp, #32
   1586c:	subs	r0, r6, r9
   15870:	movne	r0, r6
   15874:	bl	27e60 <__assert_fail@plt+0x16700>
   15878:	cmp	r6, r9
   1587c:	mov	sl, r0
   15880:	str	r0, [r4]
   15884:	ldrdeq	r0, [r9]
   15888:	stmeq	sl, {r0, r1}
   1588c:	ldr	r1, [r8]
   15890:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15894:	add	r0, sl, r1, lsl #3
   15898:	sub	r1, r2, r1
   1589c:	lsl	r2, r1, #3
   158a0:	mov	r1, #0
   158a4:	bl	11670 <memset@plt>
   158a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   158ac:	str	r0, [r8]
   158b0:	mov	r9, sl
   158b4:	ldr	r6, [r9, r5, lsl #3]!
   158b8:	ldr	r4, [r9, #4]!
   158bc:	ldm	r7, {r0, r1}
   158c0:	ldr	r2, [r7, #40]	; 0x28
   158c4:	ldr	r3, [r7, #44]	; 0x2c
   158c8:	orr	r8, r1, #1
   158cc:	add	r1, r7, #8
   158d0:	stm	sp, {r0, r8}
   158d4:	add	r0, sp, #8
   158d8:	str	r1, [sp, #20]
   158dc:	stm	r0, {r1, r2, r3}
   158e0:	mov	r0, r4
   158e4:	mov	r1, r6
   158e8:	ldr	r2, [sp, #32]
   158ec:	ldr	r3, [sp, #36]	; 0x24
   158f0:	bl	1458c <__assert_fail@plt+0x2e2c>
   158f4:	cmp	r6, r0
   158f8:	bhi	1595c <__assert_fail@plt+0x41fc>
   158fc:	add	r6, r0, #1
   15900:	movw	r0, #54000	; 0xd2f0
   15904:	movt	r0, #3
   15908:	str	r6, [sl, r5, lsl #3]
   1590c:	cmp	r4, r0
   15910:	beq	1591c <__assert_fail@plt+0x41bc>
   15914:	mov	r0, r4
   15918:	bl	141c4 <__assert_fail@plt+0x2a64>
   1591c:	mov	r0, r6
   15920:	bl	27c60 <__assert_fail@plt+0x16500>
   15924:	str	r0, [r9]
   15928:	mov	r4, r0
   1592c:	add	r3, sp, #8
   15930:	ldr	r0, [r7]
   15934:	ldr	r1, [r7, #40]	; 0x28
   15938:	ldr	r2, [r7, #44]	; 0x2c
   1593c:	stm	sp, {r0, r8}
   15940:	ldr	r0, [sp, #20]
   15944:	stm	r3, {r0, r1, r2}
   15948:	mov	r0, r4
   1594c:	mov	r1, r6
   15950:	ldr	r2, [sp, #32]
   15954:	ldr	r3, [sp, #36]	; 0x24
   15958:	bl	1458c <__assert_fail@plt+0x2e2c>
   1595c:	ldr	r0, [sp, #28]
   15960:	ldr	r1, [sp, #24]
   15964:	str	r1, [r0]
   15968:	mov	r0, r4
   1596c:	sub	sp, fp, #28
   15970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15974:	bl	1173c <abort@plt>
   15978:	movw	r3, #53952	; 0xd2c0
   1597c:	movt	r3, #3
   15980:	b	157e4 <__assert_fail@plt+0x4084>
   15984:	movw	r3, #53952	; 0xd2c0
   15988:	mov	r1, r0
   1598c:	mov	r0, #0
   15990:	mvn	r2, #0
   15994:	movt	r3, #3
   15998:	b	157e4 <__assert_fail@plt+0x4084>
   1599c:	movw	r3, #53952	; 0xd2c0
   159a0:	mov	r2, r1
   159a4:	mov	r1, r0
   159a8:	mov	r0, #0
   159ac:	movt	r3, #3
   159b0:	b	157e4 <__assert_fail@plt+0x4084>
   159b4:	push	{fp, lr}
   159b8:	mov	fp, sp
   159bc:	sub	sp, sp, #48	; 0x30
   159c0:	vmov.i32	q8, #0	; 0x00000000
   159c4:	mov	ip, #32
   159c8:	mov	r3, sp
   159cc:	mov	lr, r2
   159d0:	cmp	r1, #10
   159d4:	add	r2, r3, #16
   159d8:	vst1.64	{d16-d17}, [r3], ip
   159dc:	vst1.64	{d16-d17}, [r3]
   159e0:	vst1.64	{d16-d17}, [r2]
   159e4:	beq	15a04 <__assert_fail@plt+0x42a4>
   159e8:	str	r1, [sp]
   159ec:	mov	r3, sp
   159f0:	mov	r1, lr
   159f4:	mvn	r2, #0
   159f8:	bl	157e4 <__assert_fail@plt+0x4084>
   159fc:	mov	sp, fp
   15a00:	pop	{fp, pc}
   15a04:	bl	1173c <abort@plt>
   15a08:	push	{r4, sl, fp, lr}
   15a0c:	add	fp, sp, #8
   15a10:	sub	sp, sp, #48	; 0x30
   15a14:	mov	ip, r3
   15a18:	mov	r3, sp
   15a1c:	vmov.i32	q8, #0	; 0x00000000
   15a20:	mov	lr, #32
   15a24:	cmp	r1, #10
   15a28:	add	r4, r3, #16
   15a2c:	vst1.64	{d16-d17}, [r3], lr
   15a30:	vst1.64	{d16-d17}, [r3]
   15a34:	vst1.64	{d16-d17}, [r4]
   15a38:	beq	15a58 <__assert_fail@plt+0x42f8>
   15a3c:	str	r1, [sp]
   15a40:	mov	r1, r2
   15a44:	mov	r3, sp
   15a48:	mov	r2, ip
   15a4c:	bl	157e4 <__assert_fail@plt+0x4084>
   15a50:	sub	sp, fp, #8
   15a54:	pop	{r4, sl, fp, pc}
   15a58:	bl	1173c <abort@plt>
   15a5c:	push	{fp, lr}
   15a60:	mov	fp, sp
   15a64:	sub	sp, sp, #48	; 0x30
   15a68:	mov	r3, sp
   15a6c:	vmov.i32	q8, #0	; 0x00000000
   15a70:	mov	ip, #32
   15a74:	cmp	r0, #10
   15a78:	add	r2, r3, #16
   15a7c:	vst1.64	{d16-d17}, [r3], ip
   15a80:	vst1.64	{d16-d17}, [r3]
   15a84:	vst1.64	{d16-d17}, [r2]
   15a88:	beq	15aa8 <__assert_fail@plt+0x4348>
   15a8c:	str	r0, [sp]
   15a90:	mov	r3, sp
   15a94:	mov	r0, #0
   15a98:	mvn	r2, #0
   15a9c:	bl	157e4 <__assert_fail@plt+0x4084>
   15aa0:	mov	sp, fp
   15aa4:	pop	{fp, pc}
   15aa8:	bl	1173c <abort@plt>
   15aac:	push	{fp, lr}
   15ab0:	mov	fp, sp
   15ab4:	sub	sp, sp, #48	; 0x30
   15ab8:	mov	r3, sp
   15abc:	vmov.i32	q8, #0	; 0x00000000
   15ac0:	mov	ip, #32
   15ac4:	cmp	r0, #10
   15ac8:	add	lr, r3, #16
   15acc:	vst1.64	{d16-d17}, [r3], ip
   15ad0:	vst1.64	{d16-d17}, [r3]
   15ad4:	vst1.64	{d16-d17}, [lr]
   15ad8:	beq	15af4 <__assert_fail@plt+0x4394>
   15adc:	str	r0, [sp]
   15ae0:	mov	r3, sp
   15ae4:	mov	r0, #0
   15ae8:	bl	157e4 <__assert_fail@plt+0x4084>
   15aec:	mov	sp, fp
   15af0:	pop	{fp, pc}
   15af4:	bl	1173c <abort@plt>
   15af8:	push	{r4, sl, fp, lr}
   15afc:	add	fp, sp, #8
   15b00:	sub	sp, sp, #48	; 0x30
   15b04:	mov	lr, r0
   15b08:	movw	r0, #53952	; 0xd2c0
   15b0c:	mov	r3, #32
   15b10:	mov	ip, r1
   15b14:	mov	r4, #1
   15b18:	movt	r0, #3
   15b1c:	add	r1, r0, #16
   15b20:	vld1.64	{d16-d17}, [r0], r3
   15b24:	mov	r3, sp
   15b28:	vld1.64	{d18-d19}, [r1]
   15b2c:	add	r1, r3, #16
   15b30:	vld1.64	{d20-d21}, [r0]
   15b34:	add	r0, r3, #32
   15b38:	vst1.64	{d18-d19}, [r1]
   15b3c:	mov	r1, r3
   15b40:	vst1.64	{d20-d21}, [r0]
   15b44:	mov	r0, #28
   15b48:	and	r0, r0, r2, lsr #3
   15b4c:	and	r2, r2, #31
   15b50:	vst1.64	{d16-d17}, [r1], r0
   15b54:	ldr	r0, [r1, #8]
   15b58:	bic	r4, r4, r0, lsr r2
   15b5c:	eor	r0, r0, r4, lsl r2
   15b60:	mov	r2, ip
   15b64:	str	r0, [r1, #8]
   15b68:	mov	r0, #0
   15b6c:	mov	r1, lr
   15b70:	bl	157e4 <__assert_fail@plt+0x4084>
   15b74:	sub	sp, fp, #8
   15b78:	pop	{r4, sl, fp, pc}
   15b7c:	push	{fp, lr}
   15b80:	mov	fp, sp
   15b84:	sub	sp, sp, #48	; 0x30
   15b88:	mov	ip, r0
   15b8c:	movw	r0, #53952	; 0xd2c0
   15b90:	mov	r3, #32
   15b94:	movt	r0, #3
   15b98:	add	r2, r0, #16
   15b9c:	vld1.64	{d16-d17}, [r0], r3
   15ba0:	mov	r3, sp
   15ba4:	vld1.64	{d18-d19}, [r2]
   15ba8:	add	r2, r3, #16
   15bac:	vld1.64	{d20-d21}, [r0]
   15bb0:	add	r0, r3, #32
   15bb4:	vst1.64	{d18-d19}, [r2]
   15bb8:	mov	r2, r3
   15bbc:	vst1.64	{d20-d21}, [r0]
   15bc0:	mov	r0, #28
   15bc4:	and	r0, r0, r1, lsr #3
   15bc8:	and	r1, r1, #31
   15bcc:	vst1.64	{d16-d17}, [r2], r0
   15bd0:	mov	r0, #1
   15bd4:	ldr	lr, [r2, #8]
   15bd8:	bic	r0, r0, lr, lsr r1
   15bdc:	eor	r0, lr, r0, lsl r1
   15be0:	mov	r1, ip
   15be4:	str	r0, [r2, #8]
   15be8:	mov	r0, #0
   15bec:	mvn	r2, #0
   15bf0:	bl	157e4 <__assert_fail@plt+0x4084>
   15bf4:	mov	sp, fp
   15bf8:	pop	{fp, pc}
   15bfc:	push	{fp, lr}
   15c00:	mov	fp, sp
   15c04:	sub	sp, sp, #48	; 0x30
   15c08:	movw	r2, #53952	; 0xd2c0
   15c0c:	mov	r3, #32
   15c10:	mov	r1, r0
   15c14:	movt	r2, #3
   15c18:	add	r0, r2, #16
   15c1c:	vld1.64	{d16-d17}, [r2], r3
   15c20:	mov	r3, sp
   15c24:	vld1.64	{d18-d19}, [r0]
   15c28:	add	r0, r3, #16
   15c2c:	vld1.64	{d20-d21}, [r2]
   15c30:	mov	r2, r3
   15c34:	vst1.64	{d18-d19}, [r0]
   15c38:	add	r0, r3, #32
   15c3c:	vst1.64	{d20-d21}, [r0]
   15c40:	mov	r0, #12
   15c44:	vst1.64	{d16-d17}, [r2], r0
   15c48:	ldr	r0, [r2]
   15c4c:	orr	r0, r0, #67108864	; 0x4000000
   15c50:	str	r0, [r2]
   15c54:	mov	r0, #0
   15c58:	mvn	r2, #0
   15c5c:	bl	157e4 <__assert_fail@plt+0x4084>
   15c60:	mov	sp, fp
   15c64:	pop	{fp, pc}
   15c68:	push	{fp, lr}
   15c6c:	mov	fp, sp
   15c70:	sub	sp, sp, #48	; 0x30
   15c74:	mov	ip, r1
   15c78:	mov	r1, r0
   15c7c:	movw	r0, #53952	; 0xd2c0
   15c80:	mov	r3, #32
   15c84:	movt	r0, #3
   15c88:	add	r2, r0, #16
   15c8c:	vld1.64	{d16-d17}, [r0], r3
   15c90:	mov	r3, sp
   15c94:	vld1.64	{d18-d19}, [r2]
   15c98:	add	r2, r3, #16
   15c9c:	vld1.64	{d20-d21}, [r0]
   15ca0:	add	r0, r3, #32
   15ca4:	vst1.64	{d18-d19}, [r2]
   15ca8:	mov	r2, r3
   15cac:	vst1.64	{d20-d21}, [r0]
   15cb0:	mov	r0, #12
   15cb4:	vst1.64	{d16-d17}, [r2], r0
   15cb8:	ldr	r0, [r2]
   15cbc:	orr	r0, r0, #67108864	; 0x4000000
   15cc0:	str	r0, [r2]
   15cc4:	mov	r0, #0
   15cc8:	mov	r2, ip
   15ccc:	bl	157e4 <__assert_fail@plt+0x4084>
   15cd0:	mov	sp, fp
   15cd4:	pop	{fp, pc}
   15cd8:	push	{r4, sl, fp, lr}
   15cdc:	add	fp, sp, #8
   15ce0:	sub	sp, sp, #96	; 0x60
   15ce4:	mov	ip, r2
   15ce8:	mov	r2, sp
   15cec:	vmov.i32	q8, #0	; 0x00000000
   15cf0:	mov	r4, #28
   15cf4:	cmp	r1, #10
   15cf8:	mov	r3, r2
   15cfc:	add	lr, r2, #16
   15d00:	vst1.64	{d16-d17}, [r3], r4
   15d04:	vst1.64	{d16-d17}, [lr]
   15d08:	vst1.32	{d16-d17}, [r3]
   15d0c:	beq	15d5c <__assert_fail@plt+0x45fc>
   15d10:	vld1.64	{d16-d17}, [r2], r4
   15d14:	vld1.64	{d18-d19}, [lr]
   15d18:	add	r3, sp, #48	; 0x30
   15d1c:	add	r4, r3, #4
   15d20:	vld1.32	{d20-d21}, [r2]
   15d24:	add	r2, r3, #20
   15d28:	vst1.32	{d16-d17}, [r4]
   15d2c:	vst1.32	{d18-d19}, [r2]
   15d30:	add	r2, r3, #32
   15d34:	vst1.32	{d20-d21}, [r2]
   15d38:	str	r1, [sp, #48]	; 0x30
   15d3c:	mvn	r2, #0
   15d40:	ldr	r1, [sp, #60]	; 0x3c
   15d44:	orr	r1, r1, #67108864	; 0x4000000
   15d48:	str	r1, [sp, #60]	; 0x3c
   15d4c:	mov	r1, ip
   15d50:	bl	157e4 <__assert_fail@plt+0x4084>
   15d54:	sub	sp, fp, #8
   15d58:	pop	{r4, sl, fp, pc}
   15d5c:	bl	1173c <abort@plt>
   15d60:	push	{r4, r5, fp, lr}
   15d64:	add	fp, sp, #8
   15d68:	sub	sp, sp, #48	; 0x30
   15d6c:	mov	ip, r3
   15d70:	movw	r3, #53952	; 0xd2c0
   15d74:	mov	lr, #32
   15d78:	cmp	r1, #0
   15d7c:	mov	r5, sp
   15d80:	movt	r3, #3
   15d84:	cmpne	r2, #0
   15d88:	add	r4, r3, #16
   15d8c:	vld1.64	{d16-d17}, [r3], lr
   15d90:	vld1.64	{d18-d19}, [r4]
   15d94:	add	r4, r5, #16
   15d98:	vld1.64	{d20-d21}, [r3]
   15d9c:	vst1.64	{d16-d17}, [r5], lr
   15da0:	mov	r3, #10
   15da4:	vst1.64	{d18-d19}, [r4]
   15da8:	vst1.64	{d20-d21}, [r5]
   15dac:	str	r3, [sp]
   15db0:	bne	15db8 <__assert_fail@plt+0x4658>
   15db4:	bl	1173c <abort@plt>
   15db8:	str	r2, [sp, #44]	; 0x2c
   15dbc:	str	r1, [sp, #40]	; 0x28
   15dc0:	mov	r3, sp
   15dc4:	mov	r1, ip
   15dc8:	mvn	r2, #0
   15dcc:	bl	157e4 <__assert_fail@plt+0x4084>
   15dd0:	sub	sp, fp, #8
   15dd4:	pop	{r4, r5, fp, pc}
   15dd8:	push	{r4, r5, fp, lr}
   15ddc:	add	fp, sp, #8
   15de0:	sub	sp, sp, #48	; 0x30
   15de4:	mov	lr, r3
   15de8:	movw	r3, #53952	; 0xd2c0
   15dec:	mov	ip, #32
   15df0:	cmp	r1, #0
   15df4:	mov	r5, sp
   15df8:	movt	r3, #3
   15dfc:	cmpne	r2, #0
   15e00:	add	r4, r3, #16
   15e04:	vld1.64	{d16-d17}, [r3], ip
   15e08:	vld1.64	{d18-d19}, [r4]
   15e0c:	add	r4, r5, #16
   15e10:	vld1.64	{d20-d21}, [r3]
   15e14:	vst1.64	{d16-d17}, [r5], ip
   15e18:	mov	r3, #10
   15e1c:	vst1.64	{d18-d19}, [r4]
   15e20:	vst1.64	{d20-d21}, [r5]
   15e24:	str	r3, [sp]
   15e28:	bne	15e30 <__assert_fail@plt+0x46d0>
   15e2c:	bl	1173c <abort@plt>
   15e30:	ldr	ip, [fp, #8]
   15e34:	str	r2, [sp, #44]	; 0x2c
   15e38:	str	r1, [sp, #40]	; 0x28
   15e3c:	mov	r3, sp
   15e40:	mov	r1, lr
   15e44:	mov	r2, ip
   15e48:	bl	157e4 <__assert_fail@plt+0x4084>
   15e4c:	sub	sp, fp, #8
   15e50:	pop	{r4, r5, fp, pc}
   15e54:	push	{r4, sl, fp, lr}
   15e58:	add	fp, sp, #8
   15e5c:	sub	sp, sp, #48	; 0x30
   15e60:	mov	ip, r2
   15e64:	movw	r2, #53952	; 0xd2c0
   15e68:	mov	lr, #32
   15e6c:	cmp	r0, #0
   15e70:	mov	r4, sp
   15e74:	movt	r2, #3
   15e78:	cmpne	r1, #0
   15e7c:	add	r3, r2, #16
   15e80:	vld1.64	{d16-d17}, [r2], lr
   15e84:	vld1.64	{d18-d19}, [r3]
   15e88:	add	r3, r4, #16
   15e8c:	vld1.64	{d20-d21}, [r2]
   15e90:	vst1.64	{d16-d17}, [r4], lr
   15e94:	mov	r2, #10
   15e98:	vst1.64	{d18-d19}, [r3]
   15e9c:	vst1.64	{d20-d21}, [r4]
   15ea0:	str	r2, [sp]
   15ea4:	bne	15eac <__assert_fail@plt+0x474c>
   15ea8:	bl	1173c <abort@plt>
   15eac:	str	r1, [sp, #44]	; 0x2c
   15eb0:	str	r0, [sp, #40]	; 0x28
   15eb4:	mov	r3, sp
   15eb8:	mov	r0, #0
   15ebc:	mov	r1, ip
   15ec0:	mvn	r2, #0
   15ec4:	bl	157e4 <__assert_fail@plt+0x4084>
   15ec8:	sub	sp, fp, #8
   15ecc:	pop	{r4, sl, fp, pc}
   15ed0:	push	{r4, r5, fp, lr}
   15ed4:	add	fp, sp, #8
   15ed8:	sub	sp, sp, #48	; 0x30
   15edc:	mov	lr, r2
   15ee0:	movw	r2, #53952	; 0xd2c0
   15ee4:	mov	ip, r3
   15ee8:	mov	r3, #32
   15eec:	cmp	r0, #0
   15ef0:	mov	r5, sp
   15ef4:	movt	r2, #3
   15ef8:	cmpne	r1, #0
   15efc:	add	r4, r2, #16
   15f00:	vld1.64	{d16-d17}, [r2], r3
   15f04:	vld1.64	{d18-d19}, [r4]
   15f08:	add	r4, r5, #16
   15f0c:	vld1.64	{d20-d21}, [r2]
   15f10:	vst1.64	{d16-d17}, [r5], r3
   15f14:	mov	r2, #10
   15f18:	vst1.64	{d18-d19}, [r4]
   15f1c:	vst1.64	{d20-d21}, [r5]
   15f20:	str	r2, [sp]
   15f24:	bne	15f2c <__assert_fail@plt+0x47cc>
   15f28:	bl	1173c <abort@plt>
   15f2c:	str	r1, [sp, #44]	; 0x2c
   15f30:	str	r0, [sp, #40]	; 0x28
   15f34:	mov	r3, sp
   15f38:	mov	r0, #0
   15f3c:	mov	r1, lr
   15f40:	mov	r2, ip
   15f44:	bl	157e4 <__assert_fail@plt+0x4084>
   15f48:	sub	sp, fp, #8
   15f4c:	pop	{r4, r5, fp, pc}
   15f50:	movw	r3, #53624	; 0xd178
   15f54:	movt	r3, #3
   15f58:	b	157e4 <__assert_fail@plt+0x4084>
   15f5c:	movw	r3, #53624	; 0xd178
   15f60:	mov	r2, r1
   15f64:	mov	r1, r0
   15f68:	mov	r0, #0
   15f6c:	movt	r3, #3
   15f70:	b	157e4 <__assert_fail@plt+0x4084>
   15f74:	movw	r3, #53624	; 0xd178
   15f78:	mvn	r2, #0
   15f7c:	movt	r3, #3
   15f80:	b	157e4 <__assert_fail@plt+0x4084>
   15f84:	movw	r3, #53624	; 0xd178
   15f88:	mov	r1, r0
   15f8c:	mov	r0, #0
   15f90:	mvn	r2, #0
   15f94:	movt	r3, #3
   15f98:	b	157e4 <__assert_fail@plt+0x4084>
   15f9c:	push	{r4, r5, fp, lr}
   15fa0:	add	fp, sp, #8
   15fa4:	mov	r5, r0
   15fa8:	mov	r4, r1
   15fac:	mov	r0, #0
   15fb0:	mov	r2, #5
   15fb4:	mov	r1, r5
   15fb8:	bl	114e4 <dcgettext@plt>
   15fbc:	cmp	r0, r5
   15fc0:	popne	{r4, r5, fp, pc}
   15fc4:	bl	2ac54 <__assert_fail@plt+0x194f4>
   15fc8:	ldrb	r1, [r0]
   15fcc:	and	r1, r1, #223	; 0xdf
   15fd0:	cmp	r1, #71	; 0x47
   15fd4:	beq	1603c <__assert_fail@plt+0x48dc>
   15fd8:	cmp	r1, #85	; 0x55
   15fdc:	bne	16060 <__assert_fail@plt+0x4900>
   15fe0:	ldrb	r1, [r0, #1]
   15fe4:	and	r1, r1, #223	; 0xdf
   15fe8:	cmp	r1, #84	; 0x54
   15fec:	bne	16060 <__assert_fail@plt+0x4900>
   15ff0:	ldrb	r1, [r0, #2]
   15ff4:	and	r1, r1, #223	; 0xdf
   15ff8:	cmp	r1, #70	; 0x46
   15ffc:	ldrbeq	r1, [r0, #3]
   16000:	cmpeq	r1, #45	; 0x2d
   16004:	bne	16060 <__assert_fail@plt+0x4900>
   16008:	ldrb	r1, [r0, #4]
   1600c:	cmp	r1, #56	; 0x38
   16010:	ldrbeq	r0, [r0, #5]
   16014:	cmpeq	r0, #0
   16018:	bne	16060 <__assert_fail@plt+0x4900>
   1601c:	ldrb	r1, [r5]
   16020:	movw	r2, #48542	; 0xbd9e
   16024:	movw	r0, #48546	; 0xbda2
   16028:	movt	r2, #2
   1602c:	movt	r0, #2
   16030:	cmp	r1, #96	; 0x60
   16034:	moveq	r0, r2
   16038:	pop	{r4, r5, fp, pc}
   1603c:	ldrb	r1, [r0, #1]
   16040:	and	r1, r1, #223	; 0xdf
   16044:	cmp	r1, #66	; 0x42
   16048:	bne	16060 <__assert_fail@plt+0x4900>
   1604c:	ldrb	r1, [r0, #2]
   16050:	cmp	r1, #49	; 0x31
   16054:	ldrbeq	r1, [r0, #3]
   16058:	cmpeq	r1, #56	; 0x38
   1605c:	beq	1607c <__assert_fail@plt+0x491c>
   16060:	movw	r1, #48538	; 0xbd9a
   16064:	movw	r0, #47510	; 0xb996
   16068:	cmp	r4, #9
   1606c:	movt	r1, #2
   16070:	movt	r0, #2
   16074:	moveq	r0, r1
   16078:	pop	{r4, r5, fp, pc}
   1607c:	ldrb	r1, [r0, #4]
   16080:	cmp	r1, #48	; 0x30
   16084:	ldrbeq	r1, [r0, #5]
   16088:	cmpeq	r1, #51	; 0x33
   1608c:	bne	16060 <__assert_fail@plt+0x4900>
   16090:	ldrb	r1, [r0, #6]
   16094:	cmp	r1, #48	; 0x30
   16098:	ldrbeq	r0, [r0, #7]
   1609c:	cmpeq	r0, #0
   160a0:	bne	16060 <__assert_fail@plt+0x4900>
   160a4:	ldrb	r1, [r5]
   160a8:	movw	r2, #48550	; 0xbda6
   160ac:	movw	r0, #48554	; 0xbdaa
   160b0:	movt	r2, #2
   160b4:	movt	r0, #2
   160b8:	b	16030 <__assert_fail@plt+0x48d0>
   160bc:	andeq	r0, r0, r0
   160c0:	push	{fp, lr}
   160c4:	mov	fp, sp
   160c8:	mov	lr, r0
   160cc:	movw	r0, #54260	; 0xd3f4
   160d0:	mov	ip, r1
   160d4:	ldrb	r1, [r2, #28]
   160d8:	movt	r0, #3
   160dc:	ldr	r3, [r0]
   160e0:	mov	r0, #16
   160e4:	and	r1, r1, #111	; 0x6f
   160e8:	and	r0, r0, r3, lsr #21
   160ec:	orr	r0, r1, r0
   160f0:	mov	r1, lr
   160f4:	orr	r0, r0, #128	; 0x80
   160f8:	strb	r0, [r2, #28]
   160fc:	mov	r0, r2
   16100:	mov	r2, ip
   16104:	bl	16140 <__assert_fail@plt+0x49e0>
   16108:	cmp	r0, #0
   1610c:	moveq	r0, #0
   16110:	popeq	{fp, pc}
   16114:	movw	r1, #49032	; 0xbf88
   16118:	mov	r2, #5
   1611c:	movt	r1, #2
   16120:	ldr	r0, [r1, r0, lsl #2]
   16124:	movw	r1, #48648	; 0xbe08
   16128:	movt	r1, #2
   1612c:	add	r1, r1, r0
   16130:	mov	r0, #0
   16134:	pop	{fp, lr}
   16138:	b	114e4 <dcgettext@plt>
   1613c:	nop	{0}
   16140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16144:	add	fp, sp, #28
   16148:	sub	sp, sp, #140	; 0x8c
   1614c:	mov	r9, r0
   16150:	mov	r0, #0
   16154:	str	r1, [sp, #20]
   16158:	str	r3, [sp, #24]
   1615c:	mov	sl, r2
   16160:	str	r0, [fp, #-52]	; 0xffffffcc
   16164:	str	r0, [r9, #8]
   16168:	str	r3, [r9, #12]
   1616c:	str	r0, [r9, #24]
   16170:	ldrb	r0, [r9, #28]
   16174:	and	r0, r0, #144	; 0x90
   16178:	strb	r0, [r9, #28]
   1617c:	ldm	r9, {r0, r1}
   16180:	cmp	r1, #159	; 0x9f
   16184:	bls	168d0 <__assert_fail@plt+0x5170>
   16188:	mov	r1, #160	; 0xa0
   1618c:	mov	r2, #160	; 0xa0
   16190:	str	r0, [sp, #28]
   16194:	str	r1, [r9, #8]
   16198:	mov	r1, #0
   1619c:	bl	11670 <memset@plt>
   161a0:	ldr	r3, [sp, #28]
   161a4:	mov	r0, #31
   161a8:	str	r0, [r3, #64]	; 0x40
   161ac:	movw	r0, #43689	; 0xaaa9
   161b0:	movt	r0, #2730	; 0xaaa
   161b4:	cmp	sl, r0
   161b8:	bhi	16344 <__assert_fail@plt+0x4be4>
   161bc:	add	r5, sl, #1
   161c0:	mov	r4, r3
   161c4:	lsl	r0, r5, #3
   161c8:	str	r5, [r3, #4]
   161cc:	bl	2a8ac <__assert_fail@plt+0x1914c>
   161d0:	str	r0, [r4]
   161d4:	mov	r0, #1
   161d8:	mov	r4, r0
   161dc:	lsl	r0, r0, #1
   161e0:	cmp	r4, sl
   161e4:	bls	161d8 <__assert_fail@plt+0x4a78>
   161e8:	mov	r0, #12
   161ec:	mov	r1, r4
   161f0:	str	r5, [sp, #12]
   161f4:	bl	2a858 <__assert_fail@plt+0x190f8>
   161f8:	ldr	r5, [sp, #28]
   161fc:	str	r0, [r5, #32]
   16200:	sub	r0, r4, #1
   16204:	str	r0, [r5, #68]	; 0x44
   16208:	bl	11568 <__ctype_get_mb_cur_max@plt>
   1620c:	str	r0, [r5, #92]	; 0x5c
   16210:	mov	r0, #14
   16214:	bl	116f4 <nl_langinfo@plt>
   16218:	ldrb	r1, [r0]
   1621c:	orr	r1, r1, #32
   16220:	cmp	r1, #117	; 0x75
   16224:	bne	16278 <__assert_fail@plt+0x4b18>
   16228:	ldrb	r1, [r0, #1]
   1622c:	orr	r1, r1, #32
   16230:	cmp	r1, #116	; 0x74
   16234:	bne	16278 <__assert_fail@plt+0x4b18>
   16238:	ldrb	r1, [r0, #2]
   1623c:	orr	r1, r1, #32
   16240:	cmp	r1, #102	; 0x66
   16244:	bne	16278 <__assert_fail@plt+0x4b18>
   16248:	ldrb	r1, [r0, #3]!
   1624c:	cmp	r1, #45	; 0x2d
   16250:	movw	r1, #49148	; 0xbffc
   16254:	addeq	r0, r0, #1
   16258:	movt	r1, #2
   1625c:	bl	11418 <strcmp@plt>
   16260:	cmp	r0, #0
   16264:	bne	16278 <__assert_fail@plt+0x4b18>
   16268:	ldr	r1, [sp, #28]
   1626c:	ldrb	r0, [r1, #88]	; 0x58
   16270:	orr	r0, r0, #4
   16274:	strb	r0, [r1, #88]	; 0x58
   16278:	ldr	r3, [sp, #28]
   1627c:	ldrb	r0, [r3, #88]	; 0x58
   16280:	and	r1, r0, #247	; 0xf7
   16284:	strb	r1, [r3, #88]	; 0x58
   16288:	ldr	r1, [r3, #92]	; 0x5c
   1628c:	cmp	r1, #2
   16290:	blt	16330 <__assert_fail@plt+0x4bd0>
   16294:	tst	r0, #4
   16298:	bne	16324 <__assert_fail@plt+0x4bc4>
   1629c:	mov	r0, #32
   162a0:	mov	r1, #1
   162a4:	mov	r5, #1
   162a8:	bl	2a858 <__assert_fail@plt+0x190f8>
   162ac:	ldr	r3, [sp, #28]
   162b0:	cmp	r0, #0
   162b4:	str	r0, [r3, #60]	; 0x3c
   162b8:	beq	16344 <__assert_fail@plt+0x4be4>
   162bc:	mov	r6, #0
   162c0:	mov	r7, #0
   162c4:	mov	r8, #0
   162c8:	add	r4, r6, r8
   162cc:	mov	r0, r4
   162d0:	bl	1167c <btowc@plt>
   162d4:	ldr	r3, [sp, #28]
   162d8:	cmn	r0, #1
   162dc:	ldrne	r1, [r3, #60]	; 0x3c
   162e0:	ldrne	r2, [r1, r7, lsl #2]
   162e4:	orrne	r2, r2, r5, lsl r8
   162e8:	strne	r2, [r1, r7, lsl #2]
   162ec:	cmp	r4, #127	; 0x7f
   162f0:	bhi	16304 <__assert_fail@plt+0x4ba4>
   162f4:	cmp	r4, r0
   162f8:	ldrbne	r0, [r3, #88]	; 0x58
   162fc:	orrne	r0, r0, #8
   16300:	strbne	r0, [r3, #88]	; 0x58
   16304:	add	r8, r8, #1
   16308:	cmp	r8, #32
   1630c:	bne	162c8 <__assert_fail@plt+0x4b68>
   16310:	add	r7, r7, #1
   16314:	add	r6, r6, #32
   16318:	cmp	r7, #8
   1631c:	bne	162c4 <__assert_fail@plt+0x4b64>
   16320:	b	16330 <__assert_fail@plt+0x4bd0>
   16324:	movw	r0, #49100	; 0xbfcc
   16328:	movt	r0, #2
   1632c:	str	r0, [r3, #60]	; 0x3c
   16330:	ldr	r0, [r3]
   16334:	cmp	r0, #0
   16338:	ldrne	r0, [r3, #32]
   1633c:	cmpne	r0, #0
   16340:	bne	16364 <__assert_fail@plt+0x4c04>
   16344:	mov	r4, #12
   16348:	mov	r0, r3
   1634c:	str	r4, [fp, #-52]	; 0xffffffcc
   16350:	bl	17c90 <__assert_fail@plt+0x6530>
   16354:	mov	r0, #0
   16358:	str	r0, [r9]
   1635c:	str	r0, [r9, #4]
   16360:	b	17500 <__assert_fail@plt+0x5da0>
   16364:	movw	r0, #0
   16368:	movw	r1, #0
   1636c:	mov	r4, #0
   16370:	movt	r0, #0
   16374:	movt	r1, #0
   16378:	str	r4, [fp, #-52]	; 0xffffffcc
   1637c:	orrs	r0, r1, r0
   16380:	str	r0, [sp, #8]
   16384:	beq	163a0 <__assert_fail@plt+0x4c40>
   16388:	add	r0, r3, #136	; 0x88
   1638c:	mov	r1, #0
   16390:	bl	11490 <pthread_mutex_init@plt>
   16394:	ldr	r3, [sp, #28]
   16398:	cmp	r0, #0
   1639c:	bne	16344 <__assert_fail@plt+0x4be4>
   163a0:	add	r1, sp, #32
   163a4:	vmov.i32	q8, #0	; 0x00000000
   163a8:	ldr	r5, [r9, #20]
   163ac:	ldr	r7, [sp, #20]
   163b0:	ldr	r2, [sp, #24]
   163b4:	add	r0, r1, #64	; 0x40
   163b8:	vst1.32	{d16-d17}, [r0]
   163bc:	add	r0, r1, #52	; 0x34
   163c0:	vst1.32	{d16-d17}, [r0]
   163c4:	add	r0, r1, #36	; 0x24
   163c8:	vst1.32	{d16-d17}, [r0]
   163cc:	add	r0, r1, #20
   163d0:	vst1.32	{d16-d17}, [r0]
   163d4:	add	r0, r1, #4
   163d8:	add	r1, r1, #44	; 0x2c
   163dc:	vst1.32	{d16-d17}, [r0]
   163e0:	str	r7, [sp, #32]
   163e4:	ubfx	r0, r2, #22, #1
   163e8:	vdup.32	q8, sl
   163ec:	strb	r0, [sp, #104]	; 0x68
   163f0:	and	r0, r2, #4194304	; 0x400000
   163f4:	str	r5, [sp, #96]	; 0x60
   163f8:	orrs	r6, r0, r5
   163fc:	str	r0, [sp, #16]
   16400:	movwne	r6, #1
   16404:	cmp	sl, #1
   16408:	strb	r6, [sp, #107]	; 0x6b
   1640c:	ldr	r0, [r3, #92]	; 0x5c
   16410:	str	r0, [sp, #112]	; 0x70
   16414:	ldrb	r2, [r3, #88]	; 0x58
   16418:	vst1.32	{d16-d17}, [r1]
   1641c:	ubfx	r1, r2, #3, #1
   16420:	strb	r1, [sp, #106]	; 0x6a
   16424:	ubfx	r1, r2, #2, #1
   16428:	strb	r1, [sp, #105]	; 0x69
   1642c:	blt	164b0 <__assert_fail@plt+0x4d50>
   16430:	cmp	r0, #2
   16434:	blt	16468 <__assert_fail@plt+0x4d08>
   16438:	ldr	r0, [sp, #12]
   1643c:	mov	r8, #12
   16440:	cmn	r0, #-1073741823	; 0xc0000001
   16444:	bhi	168c8 <__assert_fail@plt+0x5168>
   16448:	lsl	r1, r0, #2
   1644c:	mov	r0, #0
   16450:	bl	2a8dc <__assert_fail@plt+0x1917c>
   16454:	ldr	r3, [sp, #28]
   16458:	cmp	r0, #0
   1645c:	beq	168c8 <__assert_fail@plt+0x5168>
   16460:	ldr	r7, [sp, #20]
   16464:	str	r0, [sp, #40]	; 0x28
   16468:	ldr	r8, [sp, #12]
   1646c:	cmp	r6, #0
   16470:	mov	r4, #0
   16474:	mov	r6, #0
   16478:	beq	164a4 <__assert_fail@plt+0x4d44>
   1647c:	mov	r0, #0
   16480:	mov	r1, r8
   16484:	bl	2a8dc <__assert_fail@plt+0x1917c>
   16488:	cmp	r0, #0
   1648c:	beq	168c4 <__assert_fail@plt+0x5164>
   16490:	ldr	r3, [sp, #28]
   16494:	ldr	r7, [sp, #20]
   16498:	mov	r4, r0
   1649c:	mov	r6, #1
   164a0:	str	r0, [sp, #36]	; 0x24
   164a4:	str	r8, [sp, #68]	; 0x44
   164a8:	ldr	r0, [r3, #92]	; 0x5c
   164ac:	b	164b4 <__assert_fail@plt+0x4d54>
   164b0:	mov	r8, #0
   164b4:	ldr	r1, [sp, #16]
   164b8:	cmp	r6, #0
   164bc:	moveq	r4, r7
   164c0:	str	r4, [sp, #36]	; 0x24
   164c4:	cmp	r1, #0
   164c8:	beq	165ac <__assert_fail@plt+0x4e4c>
   164cc:	cmp	r0, #2
   164d0:	blt	165c0 <__assert_fail@plt+0x4e60>
   164d4:	add	r0, sp, #32
   164d8:	bl	1b250 <__assert_fail@plt+0x9af0>
   164dc:	cmp	r0, #0
   164e0:	bne	165a4 <__assert_fail@plt+0x4e44>
   164e4:	ldr	r1, [sp, #28]
   164e8:	add	r5, sp, #32
   164ec:	ldr	r0, [sp, #64]	; 0x40
   164f0:	cmp	r0, sl
   164f4:	bge	166b0 <__assert_fail@plt+0x4f50>
   164f8:	ldr	r0, [r1, #92]	; 0x5c
   164fc:	ldr	r2, [sp, #60]	; 0x3c
   16500:	ldr	r1, [sp, #68]	; 0x44
   16504:	add	r0, r0, r2
   16508:	cmp	r1, r0
   1650c:	bgt	166b0 <__assert_fail@plt+0x4f50>
   16510:	ldr	r0, [sp, #112]	; 0x70
   16514:	lsl	r6, r1, #1
   16518:	cmp	r0, #2
   1651c:	blt	16568 <__assert_fail@plt+0x4e08>
   16520:	mov	r8, #12
   16524:	cmn	r6, #-1073741823	; 0xc0000001
   16528:	bhi	168c8 <__assert_fail@plt+0x5168>
   1652c:	ldr	r0, [sp, #40]	; 0x28
   16530:	lsl	r4, r1, #3
   16534:	mov	r1, r4
   16538:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1653c:	cmp	r0, #0
   16540:	beq	168c8 <__assert_fail@plt+0x5168>
   16544:	str	r0, [sp, #40]	; 0x28
   16548:	ldr	r0, [sp, #44]	; 0x2c
   1654c:	cmp	r0, #0
   16550:	beq	16568 <__assert_fail@plt+0x4e08>
   16554:	mov	r1, r4
   16558:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1655c:	cmp	r0, #0
   16560:	beq	168c8 <__assert_fail@plt+0x5168>
   16564:	str	r0, [sp, #44]	; 0x2c
   16568:	ldrb	r0, [sp, #107]	; 0x6b
   1656c:	cmp	r0, #0
   16570:	beq	1658c <__assert_fail@plt+0x4e2c>
   16574:	ldr	r0, [sp, #36]	; 0x24
   16578:	mov	r1, r6
   1657c:	bl	2a8dc <__assert_fail@plt+0x1917c>
   16580:	cmp	r0, #0
   16584:	beq	168c4 <__assert_fail@plt+0x5164>
   16588:	str	r0, [sp, #36]	; 0x24
   1658c:	mov	r0, r5
   16590:	str	r6, [sp, #68]	; 0x44
   16594:	bl	1b250 <__assert_fail@plt+0x9af0>
   16598:	ldr	r1, [sp, #28]
   1659c:	cmp	r0, #0
   165a0:	beq	164ec <__assert_fail@plt+0x4d8c>
   165a4:	mov	r8, r0
   165a8:	b	168c8 <__assert_fail@plt+0x5168>
   165ac:	cmp	r0, #2
   165b0:	blt	1662c <__assert_fail@plt+0x4ecc>
   165b4:	add	r0, sp, #32
   165b8:	bl	1b910 <__assert_fail@plt+0xa1b0>
   165bc:	b	166b0 <__assert_fail@plt+0x4f50>
   165c0:	cmp	r8, sl
   165c4:	movgt	r8, sl
   165c8:	cmp	r8, #1
   165cc:	blt	16694 <__assert_fail@plt+0x4f34>
   165d0:	mov	r0, #0
   165d4:	mov	r4, #0
   165d8:	b	165e8 <__assert_fail@plt+0x4e88>
   165dc:	ldr	r7, [sp, #32]
   165e0:	ldr	r0, [sp, #56]	; 0x38
   165e4:	ldr	r5, [sp, #96]	; 0x60
   165e8:	add	r0, r7, r0
   165ec:	cmp	r5, #0
   165f0:	ldrb	r6, [r0, r4]
   165f4:	ldrbne	r6, [r5, r6]
   165f8:	add	r0, r6, #128	; 0x80
   165fc:	lsr	r0, r0, #7
   16600:	cmp	r0, #2
   16604:	bhi	16614 <__assert_fail@plt+0x4eb4>
   16608:	bl	115ec <__ctype_toupper_loc@plt>
   1660c:	ldr	r0, [r0]
   16610:	ldr	r6, [r0, r6, lsl #2]
   16614:	ldr	r0, [sp, #36]	; 0x24
   16618:	strb	r6, [r0, r4]
   1661c:	add	r4, r4, #1
   16620:	cmp	r4, r8
   16624:	blt	165dc <__assert_fail@plt+0x4e7c>
   16628:	b	16698 <__assert_fail@plt+0x4f38>
   1662c:	cmp	r5, #0
   16630:	beq	16698 <__assert_fail@plt+0x4f38>
   16634:	cmp	r8, sl
   16638:	movgt	r8, sl
   1663c:	cmp	r8, #1
   16640:	blt	166a4 <__assert_fail@plt+0x4f44>
   16644:	ldrb	r0, [r7]
   16648:	cmp	r8, #1
   1664c:	ldrb	r0, [r5, r0]
   16650:	strb	r0, [r4]
   16654:	mov	r0, #1
   16658:	beq	166a8 <__assert_fail@plt+0x4f48>
   1665c:	mov	r0, #1
   16660:	ldr	r1, [sp, #32]
   16664:	ldr	r3, [sp, #56]	; 0x38
   16668:	ldr	r7, [sp, #96]	; 0x60
   1666c:	ldr	r2, [sp, #36]	; 0x24
   16670:	add	r1, r1, r3
   16674:	ldrb	r1, [r1, r0]
   16678:	ldrb	r1, [r7, r1]
   1667c:	strb	r1, [r2, r0]
   16680:	add	r0, r0, #1
   16684:	cmp	r0, r8
   16688:	blt	16660 <__assert_fail@plt+0x4f00>
   1668c:	mov	r0, r8
   16690:	b	166a8 <__assert_fail@plt+0x4f48>
   16694:	mov	r8, #0
   16698:	str	r8, [sp, #64]	; 0x40
   1669c:	str	r8, [sp, #60]	; 0x3c
   166a0:	b	166b0 <__assert_fail@plt+0x4f50>
   166a4:	mov	r0, #0
   166a8:	str	r0, [sp, #64]	; 0x40
   166ac:	str	r0, [sp, #60]	; 0x3c
   166b0:	mov	r5, #0
   166b4:	ldr	r4, [sp, #24]
   166b8:	sub	r8, fp, #48	; 0x30
   166bc:	add	r6, sp, #32
   166c0:	str	r5, [fp, #-52]	; 0xffffffcc
   166c4:	str	r5, [r9, #24]
   166c8:	mov	r0, r8
   166cc:	mov	r1, r6
   166d0:	ldr	r7, [r9]
   166d4:	orr	r2, r4, #8388608	; 0x800000
   166d8:	str	r4, [r7, #128]	; 0x80
   166dc:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   166e0:	ldr	r1, [sp, #72]	; 0x48
   166e4:	mov	r2, r8
   166e8:	mov	r3, r4
   166ec:	str	r5, [sp]
   166f0:	add	r0, r1, r0
   166f4:	mov	r1, r9
   166f8:	str	r0, [sp, #72]	; 0x48
   166fc:	sub	r0, fp, #52	; 0x34
   16700:	str	r0, [sp, #4]
   16704:	mov	r0, r6
   16708:	bl	1baec <__assert_fail@plt+0xa38c>
   1670c:	ldr	r5, [sp, #28]
   16710:	mov	r4, r0
   16714:	cmp	r0, #0
   16718:	bne	16728 <__assert_fail@plt+0x4fc8>
   1671c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16720:	cmp	r0, #0
   16724:	bne	16954 <__assert_fail@plt+0x51f4>
   16728:	ldr	r1, [r7, #64]	; 0x40
   1672c:	cmp	r1, #31
   16730:	beq	168ec <__assert_fail@plt+0x518c>
   16734:	ldr	r0, [r7, #56]	; 0x38
   16738:	add	r2, r1, #1
   1673c:	add	r0, r0, r1, lsl #5
   16740:	mov	r1, #0
   16744:	vmov.i32	q8, #0	; 0x00000000
   16748:	str	r2, [r7, #64]	; 0x40
   1674c:	add	r6, r0, #4
   16750:	mov	r2, #2
   16754:	str	r1, [r0, #20]
   16758:	str	r1, [r0, #24]
   1675c:	str	r2, [r0, #28]
   16760:	mov	r0, #28
   16764:	mov	r1, r6
   16768:	vst1.32	{d16-d17}, [r1], r0
   1676c:	mvn	r0, #0
   16770:	str	r0, [r1]
   16774:	cmp	r4, #0
   16778:	mov	r0, r6
   1677c:	beq	167d0 <__assert_fail@plt+0x5070>
   16780:	ldr	r1, [r7, #64]	; 0x40
   16784:	cmp	r1, #31
   16788:	beq	16920 <__assert_fail@plt+0x51c0>
   1678c:	ldr	r0, [r7, #56]	; 0x38
   16790:	add	r2, r1, #1
   16794:	add	r0, r0, r1, lsl #5
   16798:	mov	r1, #0
   1679c:	mvn	r3, #0
   167a0:	cmp	r6, #0
   167a4:	str	r2, [r7, #64]	; 0x40
   167a8:	str	r1, [r0, #4]!
   167ac:	mov	r2, #16
   167b0:	add	ip, r0, #20
   167b4:	stmib	r0, {r4, r6}
   167b8:	str	r1, [r0, #12]
   167bc:	str	r1, [r0, #16]
   167c0:	stm	ip, {r1, r2, r3}
   167c4:	str	r0, [r4]
   167c8:	beq	1694c <__assert_fail@plt+0x51ec>
   167cc:	str	r0, [r6]
   167d0:	cmp	r6, #0
   167d4:	cmpne	r0, #0
   167d8:	beq	1694c <__assert_fail@plt+0x51ec>
   167dc:	str	r0, [r5, #52]	; 0x34
   167e0:	ldr	sl, [r9]
   167e4:	ldr	r0, [sl, #4]
   167e8:	lsl	r0, r0, #2
   167ec:	bl	2a8ac <__assert_fail@plt+0x1914c>
   167f0:	str	r0, [sl, #12]
   167f4:	ldr	r0, [sl, #4]
   167f8:	lsl	r0, r0, #2
   167fc:	bl	2a8ac <__assert_fail@plt+0x1914c>
   16800:	str	r0, [sl, #16]
   16804:	ldr	r0, [sl, #4]
   16808:	add	r0, r0, r0, lsl #1
   1680c:	lsl	r0, r0, #2
   16810:	bl	2a8ac <__assert_fail@plt+0x1914c>
   16814:	str	r0, [sl, #20]
   16818:	ldr	r0, [sl, #4]
   1681c:	add	r0, r0, r0, lsl #1
   16820:	lsl	r0, r0, #2
   16824:	bl	2a8ac <__assert_fail@plt+0x1914c>
   16828:	str	r0, [sl, #24]
   1682c:	ldr	r1, [sl, #12]
   16830:	cmp	r1, #0
   16834:	ldrne	r1, [sl, #16]
   16838:	cmpne	r1, #0
   1683c:	beq	16850 <__assert_fail@plt+0x50f0>
   16840:	cmp	r0, #0
   16844:	ldrne	r0, [sl, #20]
   16848:	cmpne	r0, #0
   1684c:	bne	1685c <__assert_fail@plt+0x50fc>
   16850:	mov	r0, #12
   16854:	str	r0, [fp, #-52]	; 0xffffffcc
   16858:	b	1695c <__assert_fail@plt+0x51fc>
   1685c:	ldr	r0, [r9, #24]
   16860:	lsl	r0, r0, #2
   16864:	bl	2a8ac <__assert_fail@plt+0x1914c>
   16868:	cmp	r0, #0
   1686c:	str	r0, [sl, #132]	; 0x84
   16870:	beq	168bc <__assert_fail@plt+0x515c>
   16874:	ldr	r1, [r9, #24]
   16878:	cmp	r1, #0
   1687c:	beq	16a14 <__assert_fail@plt+0x52b4>
   16880:	mov	r2, #0
   16884:	cmp	r1, #4
   16888:	bcc	16a04 <__assert_fail@plt+0x52a4>
   1688c:	add	r3, pc, #876	; 0x36c
   16890:	bic	r2, r1, #3
   16894:	vmov.i32	q8, #4	; 0x00000004
   16898:	mov	r7, r0
   1689c:	vld1.64	{d18-d19}, [r3 :128]
   168a0:	mov	r3, r2
   168a4:	vadd.i32	q10, q9, q8
   168a8:	vst1.32	{d18-d19}, [r7]!
   168ac:	subs	r3, r3, #4
   168b0:	vorr	q9, q10, q10
   168b4:	bne	168a4 <__assert_fail@plt+0x5144>
   168b8:	b	16a0c <__assert_fail@plt+0x52ac>
   168bc:	add	r8, sl, #52	; 0x34
   168c0:	b	16bcc <__assert_fail@plt+0x546c>
   168c4:	mov	r8, #12
   168c8:	str	r8, [fp, #-52]	; 0xffffffcc
   168cc:	b	1695c <__assert_fail@plt+0x51fc>
   168d0:	mov	r1, #160	; 0xa0
   168d4:	mov	r4, #160	; 0xa0
   168d8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   168dc:	cmp	r0, #0
   168e0:	beq	16918 <__assert_fail@plt+0x51b8>
   168e4:	stm	r9, {r0, r4}
   168e8:	b	16188 <__assert_fail@plt+0x4a28>
   168ec:	mov	r0, #996	; 0x3e4
   168f0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   168f4:	cmp	r0, #0
   168f8:	beq	169f8 <__assert_fail@plt+0x5298>
   168fc:	ldr	r1, [r7, #56]	; 0x38
   16900:	ldr	r5, [sp, #28]
   16904:	str	r1, [r0]
   16908:	mov	r1, #0
   1690c:	str	r1, [r7, #64]	; 0x40
   16910:	str	r0, [r7, #56]	; 0x38
   16914:	b	16738 <__assert_fail@plt+0x4fd8>
   16918:	mov	r4, #12
   1691c:	b	17500 <__assert_fail@plt+0x5da0>
   16920:	mov	r0, #996	; 0x3e4
   16924:	bl	2a8ac <__assert_fail@plt+0x1914c>
   16928:	ldr	r5, [sp, #28]
   1692c:	cmp	r0, #0
   16930:	beq	1694c <__assert_fail@plt+0x51ec>
   16934:	ldr	r1, [r7, #56]	; 0x38
   16938:	str	r1, [r0]
   1693c:	mov	r1, #0
   16940:	str	r1, [r7, #64]	; 0x40
   16944:	str	r0, [r7, #56]	; 0x38
   16948:	b	16790 <__assert_fail@plt+0x5030>
   1694c:	mov	r0, #12
   16950:	str	r0, [fp, #-52]	; 0xffffffcc
   16954:	mov	r0, #0
   16958:	str	r0, [r5, #52]	; 0x34
   1695c:	ldr	r4, [r9]
   16960:	ldr	r0, [r4, #56]	; 0x38
   16964:	cmp	r0, #0
   16968:	beq	16980 <__assert_fail@plt+0x5220>
   1696c:	ldr	r5, [r0]
   16970:	bl	141c4 <__assert_fail@plt+0x2a64>
   16974:	cmp	r5, #0
   16978:	mov	r0, r5
   1697c:	bne	1696c <__assert_fail@plt+0x520c>
   16980:	mov	r0, #31
   16984:	mov	r5, #0
   16988:	str	r0, [r4, #64]	; 0x40
   1698c:	str	r5, [r4, #52]	; 0x34
   16990:	str	r5, [r4, #56]	; 0x38
   16994:	ldr	r0, [r4, #16]
   16998:	bl	141c4 <__assert_fail@plt+0x2a64>
   1699c:	str	r5, [r4, #16]
   169a0:	ldr	r0, [sp, #40]	; 0x28
   169a4:	bl	141c4 <__assert_fail@plt+0x2a64>
   169a8:	ldr	r0, [sp, #44]	; 0x2c
   169ac:	bl	141c4 <__assert_fail@plt+0x2a64>
   169b0:	ldrb	r0, [sp, #107]	; 0x6b
   169b4:	cmp	r0, #0
   169b8:	beq	169c4 <__assert_fail@plt+0x5264>
   169bc:	ldr	r0, [sp, #36]	; 0x24
   169c0:	bl	141c4 <__assert_fail@plt+0x2a64>
   169c4:	ldr	r0, [sp, #8]
   169c8:	cmp	r0, #0
   169cc:	beq	169dc <__assert_fail@plt+0x527c>
   169d0:	ldr	r0, [sp, #28]
   169d4:	add	r0, r0, #136	; 0x88
   169d8:	bl	11430 <pthread_mutex_destroy@plt>
   169dc:	ldr	r0, [sp, #28]
   169e0:	bl	17c90 <__assert_fail@plt+0x6530>
   169e4:	mov	r0, #0
   169e8:	str	r0, [r9]
   169ec:	str	r0, [r9, #4]
   169f0:	ldr	r4, [fp, #-52]	; 0xffffffcc
   169f4:	b	17500 <__assert_fail@plt+0x5da0>
   169f8:	ldr	r5, [sp, #28]
   169fc:	mov	r6, #0
   16a00:	b	16774 <__assert_fail@plt+0x5014>
   16a04:	str	r2, [r0, r2, lsl #2]
   16a08:	add	r2, r2, #1
   16a0c:	cmp	r1, r2
   16a10:	bne	16a04 <__assert_fail@plt+0x52a4>
   16a14:	mov	r8, sl
   16a18:	ldr	r2, [r8, #52]!	; 0x34
   16a1c:	ldrb	r1, [r2, #24]
   16a20:	cmp	r1, #17
   16a24:	beq	16a50 <__assert_fail@plt+0x52f0>
   16a28:	cmp	r1, #4
   16a2c:	bne	16aa0 <__assert_fail@plt+0x5340>
   16a30:	ldr	r1, [r2, #20]
   16a34:	mov	r3, #1
   16a38:	ldr	r0, [r0, r1, lsl #2]
   16a3c:	str	r0, [r2, #20]
   16a40:	ldr	r1, [sl, #80]	; 0x50
   16a44:	orr	r0, r1, r3, lsl r0
   16a48:	str	r0, [sl, #80]	; 0x50
   16a4c:	b	16aa0 <__assert_fail@plt+0x5340>
   16a50:	ldr	r1, [r2, #4]
   16a54:	cmp	r1, #0
   16a58:	beq	16aa0 <__assert_fail@plt+0x5340>
   16a5c:	ldrb	r3, [r1, #24]
   16a60:	cmp	r3, #17
   16a64:	bne	16aa0 <__assert_fail@plt+0x5340>
   16a68:	ldr	r3, [r1, #4]
   16a6c:	ldr	r1, [r1, #20]
   16a70:	cmp	r3, #0
   16a74:	str	r3, [r2, #4]
   16a78:	strne	r2, [r3]
   16a7c:	cmp	r1, #31
   16a80:	ldr	r3, [r2, #20]
   16a84:	ldr	r3, [r0, r3, lsl #2]
   16a88:	str	r3, [r0, r1, lsl #2]
   16a8c:	bgt	16aa0 <__assert_fail@plt+0x5340>
   16a90:	ldr	r0, [sl, #80]	; 0x50
   16a94:	mov	r3, #1
   16a98:	bic	r0, r0, r3, lsl r1
   16a9c:	b	16a48 <__assert_fail@plt+0x52e8>
   16aa0:	mov	r0, #1
   16aa4:	b	16ab0 <__assert_fail@plt+0x5350>
   16aa8:	str	r1, [sl, #80]	; 0x50
   16aac:	mov	r2, r7
   16ab0:	ldr	r7, [r2, #4]
   16ab4:	cmp	r7, #0
   16ab8:	bne	16ae8 <__assert_fail@plt+0x5388>
   16abc:	mov	r3, #0
   16ac0:	ldr	r7, [r2, #8]
   16ac4:	mov	r1, r2
   16ac8:	cmp	r7, r3
   16acc:	cmpne	r7, #0
   16ad0:	bne	16ae8 <__assert_fail@plt+0x5388>
   16ad4:	ldr	r2, [r1]
   16ad8:	mov	r3, r1
   16adc:	cmp	r2, #0
   16ae0:	bne	16ac0 <__assert_fail@plt+0x5360>
   16ae4:	b	16b84 <__assert_fail@plt+0x5424>
   16ae8:	ldrb	r1, [r7, #24]
   16aec:	cmp	r1, #17
   16af0:	beq	16b28 <__assert_fail@plt+0x53c8>
   16af4:	cmp	r1, #4
   16af8:	mov	r2, r7
   16afc:	bne	16ab0 <__assert_fail@plt+0x5350>
   16b00:	ldr	r1, [sl, #132]	; 0x84
   16b04:	mov	r2, r7
   16b08:	cmp	r1, #0
   16b0c:	beq	16ab0 <__assert_fail@plt+0x5350>
   16b10:	ldr	r2, [r7, #20]
   16b14:	ldr	r1, [r1, r2, lsl #2]
   16b18:	str	r1, [r7, #20]
   16b1c:	ldr	r2, [sl, #80]	; 0x50
   16b20:	orr	r1, r2, r0, lsl r1
   16b24:	b	16aa8 <__assert_fail@plt+0x5348>
   16b28:	ldr	r3, [r7, #4]
   16b2c:	mov	r2, r7
   16b30:	cmp	r3, #0
   16b34:	beq	16ab0 <__assert_fail@plt+0x5350>
   16b38:	ldrb	r1, [r3, #24]
   16b3c:	mov	r2, r7
   16b40:	cmp	r1, #17
   16b44:	bne	16ab0 <__assert_fail@plt+0x5350>
   16b48:	ldr	r1, [r3, #4]
   16b4c:	ldr	r3, [r3, #20]
   16b50:	cmp	r1, #0
   16b54:	str	r1, [r7, #4]
   16b58:	strne	r7, [r1]
   16b5c:	cmp	r3, #31
   16b60:	ldr	r1, [r7, #20]
   16b64:	ldr	r2, [sl, #132]	; 0x84
   16b68:	ldr	r1, [r2, r1, lsl #2]
   16b6c:	str	r1, [r2, r3, lsl #2]
   16b70:	mov	r2, r7
   16b74:	bgt	16ab0 <__assert_fail@plt+0x5350>
   16b78:	ldr	r1, [sl, #80]	; 0x50
   16b7c:	bic	r1, r1, r0, lsl r3
   16b80:	b	16aa8 <__assert_fail@plt+0x5348>
   16b84:	ldr	r1, [r9, #24]
   16b88:	cmp	r1, #0
   16b8c:	beq	16bbc <__assert_fail@plt+0x545c>
   16b90:	ldr	r0, [sl, #132]	; 0x84
   16b94:	mov	r2, #0
   16b98:	ldr	r3, [r0, r2, lsl #2]
   16b9c:	cmp	r2, r3
   16ba0:	bne	16bb0 <__assert_fail@plt+0x5450>
   16ba4:	add	r2, r2, #1
   16ba8:	cmp	r2, r1
   16bac:	bcc	16b98 <__assert_fail@plt+0x5438>
   16bb0:	cmp	r2, r1
   16bb4:	beq	16bc0 <__assert_fail@plt+0x5460>
   16bb8:	b	16bcc <__assert_fail@plt+0x546c>
   16bbc:	ldr	r0, [sl, #132]	; 0x84
   16bc0:	bl	141c4 <__assert_fail@plt+0x2a64>
   16bc4:	mov	r0, #0
   16bc8:	str	r0, [sl, #132]	; 0x84
   16bcc:	ldr	r0, [r8]
   16bd0:	mov	r7, #0
   16bd4:	sub	r5, fp, #48	; 0x30
   16bd8:	mov	r4, r0
   16bdc:	ldr	r0, [r0, #4]
   16be0:	cmp	r0, #0
   16be4:	bne	16bd8 <__assert_fail@plt+0x5478>
   16be8:	ldr	r0, [r4, #8]
   16bec:	cmp	r0, #0
   16bf0:	bne	16bd8 <__assert_fail@plt+0x5478>
   16bf4:	mov	r2, #0
   16bf8:	b	16c18 <__assert_fail@plt+0x54b8>
   16bfc:	nop	{0}
   16c00:	andeq	r0, r0, r0
   16c04:	andeq	r0, r0, r1
   16c08:	andeq	r0, r0, r2
   16c0c:	andeq	r0, r0, r3
   16c10:	ldr	r2, [r1, #4]
   16c14:	mov	r4, r1
   16c18:	cmp	r2, #0
   16c1c:	str	r7, [fp, #-48]	; 0xffffffd0
   16c20:	beq	16c48 <__assert_fail@plt+0x54e8>
   16c24:	ldrb	r0, [r2, #24]
   16c28:	cmp	r0, #17
   16c2c:	bne	16c48 <__assert_fail@plt+0x54e8>
   16c30:	mov	r0, r5
   16c34:	mov	r1, r9
   16c38:	bl	1ff64 <__assert_fail@plt+0xe804>
   16c3c:	cmp	r0, #0
   16c40:	str	r0, [r4, #4]
   16c44:	strne	r4, [r0]
   16c48:	ldr	r2, [r4, #8]
   16c4c:	cmp	r2, #0
   16c50:	beq	16c78 <__assert_fail@plt+0x5518>
   16c54:	ldrb	r0, [r2, #24]
   16c58:	cmp	r0, #17
   16c5c:	bne	16c78 <__assert_fail@plt+0x5518>
   16c60:	mov	r0, r5
   16c64:	mov	r1, r9
   16c68:	bl	1ff64 <__assert_fail@plt+0xe804>
   16c6c:	cmp	r0, #0
   16c70:	str	r0, [r4, #8]
   16c74:	strne	r4, [r0]
   16c78:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16c7c:	cmp	r0, #0
   16c80:	bne	16854 <__assert_fail@plt+0x50f4>
   16c84:	ldr	r1, [r4]
   16c88:	cmp	r1, #0
   16c8c:	beq	16ca4 <__assert_fail@plt+0x5544>
   16c90:	ldr	r0, [r1, #8]
   16c94:	cmp	r0, r4
   16c98:	cmpne	r0, #0
   16c9c:	beq	16c10 <__assert_fail@plt+0x54b0>
   16ca0:	b	16bd8 <__assert_fail@plt+0x5478>
   16ca4:	ldr	r0, [sl, #52]	; 0x34
   16ca8:	mov	r4, r0
   16cac:	ldr	r0, [r0, #4]
   16cb0:	cmp	r0, #0
   16cb4:	bne	16ca8 <__assert_fail@plt+0x5548>
   16cb8:	ldr	r0, [r4, #8]
   16cbc:	cmp	r0, #0
   16cc0:	bne	16ca8 <__assert_fail@plt+0x5548>
   16cc4:	ldr	r2, [r4, #24]
   16cc8:	uxtb	r0, r2
   16ccc:	cmp	r0, #16
   16cd0:	bne	16cec <__assert_fail@plt+0x558c>
   16cd4:	ldr	r0, [r4, #4]
   16cd8:	ldr	r1, [r0, #12]
   16cdc:	str	r1, [r4, #12]
   16ce0:	ldr	r0, [r0, #28]
   16ce4:	str	r0, [r4, #28]
   16ce8:	b	16d2c <__assert_fail@plt+0x55cc>
   16cec:	str	r4, [r4, #12]
   16cf0:	mov	r0, sl
   16cf4:	ldr	r1, [r4, #20]
   16cf8:	bl	20220 <__assert_fail@plt+0xeac0>
   16cfc:	cmn	r0, #1
   16d00:	str	r0, [r4, #28]
   16d04:	beq	16850 <__assert_fail@plt+0x50f0>
   16d08:	ldrb	r1, [r4, #24]
   16d0c:	cmp	r1, #12
   16d10:	bne	16d2c <__assert_fail@plt+0x55cc>
   16d14:	ldr	r1, [sl]
   16d18:	ldr	r2, [r4, #20]
   16d1c:	add	r0, r1, r0, lsl #3
   16d20:	ldr	r1, [r0, #4]
   16d24:	bfi	r1, r2, #8, #10
   16d28:	str	r1, [r0, #4]
   16d2c:	ldr	r1, [r4]
   16d30:	cmp	r1, #0
   16d34:	beq	16d58 <__assert_fail@plt+0x55f8>
   16d38:	ldr	r0, [r1, #8]
   16d3c:	cmp	r0, r4
   16d40:	mov	r4, r1
   16d44:	beq	16cc4 <__assert_fail@plt+0x5564>
   16d48:	cmp	r0, #0
   16d4c:	mov	r4, r1
   16d50:	beq	16cc4 <__assert_fail@plt+0x5564>
   16d54:	b	16ca8 <__assert_fail@plt+0x5548>
   16d58:	ldr	r4, [r8]
   16d5c:	ldrb	r0, [r4, #24]
   16d60:	cmp	r0, #16
   16d64:	beq	16d7c <__assert_fail@plt+0x561c>
   16d68:	cmp	r0, #11
   16d6c:	bne	16d8c <__assert_fail@plt+0x562c>
   16d70:	ldr	r0, [r4, #4]
   16d74:	str	r4, [r0, #16]
   16d78:	b	16db0 <__assert_fail@plt+0x5650>
   16d7c:	ldmib	r4, {r0, r1}
   16d80:	ldr	r2, [r1, #12]
   16d84:	str	r2, [r0, #16]
   16d88:	b	16da8 <__assert_fail@plt+0x5648>
   16d8c:	ldr	r0, [r4, #4]
   16d90:	cmp	r0, #0
   16d94:	ldrne	r1, [r4, #16]
   16d98:	strne	r1, [r0, #16]
   16d9c:	ldr	r1, [r4, #8]
   16da0:	cmp	r1, #0
   16da4:	beq	16db0 <__assert_fail@plt+0x5650>
   16da8:	ldr	r2, [r4, #16]
   16dac:	str	r2, [r1, #16]
   16db0:	mov	r1, r4
   16db4:	b	16dd4 <__assert_fail@plt+0x5674>
   16db8:	ldr	r3, [r1, #16]
   16dbc:	str	r3, [r2, #16]
   16dc0:	b	16dd4 <__assert_fail@plt+0x5674>
   16dc4:	ldmib	r1, {r0, r2}
   16dc8:	ldr	r3, [r2, #12]
   16dcc:	str	r3, [r0, #16]
   16dd0:	b	16db8 <__assert_fail@plt+0x5658>
   16dd4:	cmp	r0, #0
   16dd8:	bne	16e08 <__assert_fail@plt+0x56a8>
   16ddc:	mov	r3, #0
   16de0:	ldr	r0, [r1, #8]
   16de4:	mov	r2, r1
   16de8:	cmp	r0, r3
   16dec:	cmpne	r0, #0
   16df0:	bne	16e08 <__assert_fail@plt+0x56a8>
   16df4:	ldr	r1, [r2]
   16df8:	mov	r3, r2
   16dfc:	cmp	r1, #0
   16e00:	bne	16de0 <__assert_fail@plt+0x5680>
   16e04:	b	16e4c <__assert_fail@plt+0x56ec>
   16e08:	mov	r1, r0
   16e0c:	ldrb	r0, [r0, #24]
   16e10:	cmp	r0, #16
   16e14:	beq	16dc4 <__assert_fail@plt+0x5664>
   16e18:	cmp	r0, #11
   16e1c:	bne	16e2c <__assert_fail@plt+0x56cc>
   16e20:	ldr	r0, [r1, #4]
   16e24:	str	r1, [r0, #16]
   16e28:	b	16dd4 <__assert_fail@plt+0x5674>
   16e2c:	ldr	r0, [r1, #4]
   16e30:	cmp	r0, #0
   16e34:	ldrne	r2, [r1, #16]
   16e38:	strne	r2, [r0, #16]
   16e3c:	ldr	r2, [r1, #8]
   16e40:	cmp	r2, #0
   16e44:	beq	16dd4 <__assert_fail@plt+0x5674>
   16e48:	b	16db8 <__assert_fail@plt+0x5658>
   16e4c:	mov	r0, sl
   16e50:	mov	r1, r4
   16e54:	bl	1fdcc <__assert_fail@plt+0xe66c>
   16e58:	cmp	r0, #0
   16e5c:	bne	16854 <__assert_fail@plt+0x50f4>
   16e60:	ldr	r7, [r4, #4]
   16e64:	cmp	r7, #0
   16e68:	bne	16e98 <__assert_fail@plt+0x5738>
   16e6c:	mov	r1, #0
   16e70:	ldr	r7, [r4, #8]
   16e74:	mov	r0, r4
   16e78:	cmp	r7, r1
   16e7c:	cmpne	r7, #0
   16e80:	bne	16e98 <__assert_fail@plt+0x5738>
   16e84:	ldr	r4, [r0]
   16e88:	mov	r1, r0
   16e8c:	cmp	r4, #0
   16e90:	bne	16e70 <__assert_fail@plt+0x5710>
   16e94:	b	16eb4 <__assert_fail@plt+0x5754>
   16e98:	mov	r0, sl
   16e9c:	mov	r1, r7
   16ea0:	bl	1fdcc <__assert_fail@plt+0xe66c>
   16ea4:	cmp	r0, #0
   16ea8:	mov	r4, r7
   16eac:	beq	16e60 <__assert_fail@plt+0x5700>
   16eb0:	b	16854 <__assert_fail@plt+0x50f4>
   16eb4:	ldr	r0, [sl, #8]
   16eb8:	cmp	r0, #0
   16ebc:	beq	16f60 <__assert_fail@plt+0x5800>
   16ec0:	mov	r5, #0
   16ec4:	sub	r4, fp, #48	; 0x30
   16ec8:	mov	r7, #0
   16ecc:	ldr	r0, [sl, #24]
   16ed0:	add	r6, r7, r7, lsl #1
   16ed4:	add	r0, r0, r6, lsl #2
   16ed8:	ldr	r0, [r0, #4]
   16edc:	cmp	r0, #0
   16ee0:	beq	16eec <__assert_fail@plt+0x578c>
   16ee4:	mov	r1, r5
   16ee8:	b	16f2c <__assert_fail@plt+0x57cc>
   16eec:	mov	r0, r4
   16ef0:	mov	r1, sl
   16ef4:	mov	r2, r7
   16ef8:	mov	r3, #1
   16efc:	bl	203f0 <__assert_fail@plt+0xec90>
   16f00:	cmp	r0, #0
   16f04:	bne	16854 <__assert_fail@plt+0x50f4>
   16f08:	ldr	r0, [sl, #24]
   16f0c:	mov	r1, r5
   16f10:	add	r0, r0, r6, lsl #2
   16f14:	ldr	r0, [r0, #4]
   16f18:	cmp	r0, #0
   16f1c:	bne	16f2c <__assert_fail@plt+0x57cc>
   16f20:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16f24:	bl	141c4 <__assert_fail@plt+0x2a64>
   16f28:	mov	r1, #1
   16f2c:	ldr	r2, [sl, #8]
   16f30:	add	r0, r7, #1
   16f34:	subs	r3, r0, r2
   16f38:	mov	r7, r3
   16f3c:	movwne	r3, #1
   16f40:	movne	r7, r0
   16f44:	tst	r1, #1
   16f48:	and	r5, r1, r3
   16f4c:	cmpeq	r0, r2
   16f50:	bne	16ecc <__assert_fail@plt+0x576c>
   16f54:	add	r0, r0, r0, lsl #1
   16f58:	lsl	r0, r0, #2
   16f5c:	b	16f64 <__assert_fail@plt+0x5804>
   16f60:	mov	r0, #0
   16f64:	ldrb	r1, [r9, #28]
   16f68:	str	r9, [sp, #12]
   16f6c:	tst	r1, #16
   16f70:	bne	16f8c <__assert_fail@plt+0x582c>
   16f74:	ldr	r1, [sp, #12]
   16f78:	ldr	r1, [r1, #24]
   16f7c:	cmp	r1, #0
   16f80:	ldrbne	r1, [sl, #88]	; 0x58
   16f84:	tstne	r1, #1
   16f88:	bne	16f98 <__assert_fail@plt+0x5838>
   16f8c:	ldr	r1, [sl, #76]	; 0x4c
   16f90:	cmp	r1, #0
   16f94:	beq	170d0 <__assert_fail@plt+0x5970>
   16f98:	bl	2a8ac <__assert_fail@plt+0x1914c>
   16f9c:	cmp	r0, #0
   16fa0:	str	r0, [sl, #28]
   16fa4:	beq	1750c <__assert_fail@plt+0x5dac>
   16fa8:	ldr	r1, [sl, #8]
   16fac:	cmp	r1, #0
   16fb0:	beq	170d0 <__assert_fail@plt+0x5970>
   16fb4:	mov	r1, #0
   16fb8:	str	r1, [r0]
   16fbc:	str	r1, [r0, #4]
   16fc0:	str	r1, [r0, #8]
   16fc4:	ldr	r0, [sl, #8]
   16fc8:	cmp	r0, #2
   16fcc:	bcc	16ffc <__assert_fail@plt+0x589c>
   16fd0:	mov	r2, #1
   16fd4:	mov	r3, #12
   16fd8:	ldr	r0, [sl, #28]
   16fdc:	add	r2, r2, #1
   16fe0:	str	r1, [r0, r3]!
   16fe4:	add	r3, r3, #12
   16fe8:	str	r1, [r0, #4]
   16fec:	str	r1, [r0, #8]
   16ff0:	ldr	r0, [sl, #8]
   16ff4:	cmp	r2, r0
   16ff8:	bcc	16fd8 <__assert_fail@plt+0x5878>
   16ffc:	cmp	r0, #0
   17000:	beq	170d0 <__assert_fail@plt+0x5970>
   17004:	ldr	ip, [sl, #24]
   17008:	mov	r6, #0
   1700c:	add	lr, r6, r6, lsl #1
   17010:	add	r2, ip, lr, lsl #2
   17014:	ldr	r3, [r2, #4]
   17018:	cmp	r3, #1
   1701c:	blt	170c4 <__assert_fail@plt+0x5964>
   17020:	ldr	r1, [r2, #8]
   17024:	mov	r5, #0
   17028:	str	lr, [sp, #24]
   1702c:	str	r1, [sp, #20]
   17030:	ldr	r0, [r1, r5, lsl #2]
   17034:	ldr	r4, [sl, #28]
   17038:	add	r0, r0, r0, lsl #1
   1703c:	mov	r3, r4
   17040:	ldr	r7, [r3, r0, lsl #2]!
   17044:	mov	r8, r3
   17048:	ldr	r2, [r8, #4]!
   1704c:	cmp	r7, r2
   17050:	bne	17098 <__assert_fail@plt+0x5938>
   17054:	mov	r1, #2
   17058:	mov	r9, sl
   1705c:	add	sl, r4, r0, lsl #2
   17060:	add	r1, r1, r7, lsl #1
   17064:	str	r1, [r3]
   17068:	lsl	r1, r1, #2
   1706c:	ldr	r0, [sl, #8]!
   17070:	bl	2a8dc <__assert_fail@plt+0x1917c>
   17074:	cmp	r0, #0
   17078:	beq	1750c <__assert_fail@plt+0x5dac>
   1707c:	str	r0, [sl]
   17080:	ldr	lr, [sp, #24]
   17084:	ldr	r1, [sp, #20]
   17088:	mov	sl, r9
   1708c:	ldr	ip, [r9, #24]
   17090:	ldr	r2, [r8]
   17094:	b	170a0 <__assert_fail@plt+0x5940>
   17098:	add	r0, r4, r0, lsl #2
   1709c:	ldr	r0, [r0, #8]
   170a0:	add	r3, r2, #1
   170a4:	add	r5, r5, #1
   170a8:	str	r3, [r8]
   170ac:	str	r6, [r0, r2, lsl #2]
   170b0:	add	r0, ip, lr, lsl #2
   170b4:	ldr	r0, [r0, #4]
   170b8:	cmp	r5, r0
   170bc:	blt	17030 <__assert_fail@plt+0x58d0>
   170c0:	ldr	r0, [sl, #8]
   170c4:	add	r6, r6, #1
   170c8:	cmp	r6, r0
   170cc:	bcc	1700c <__assert_fail@plt+0x58ac>
   170d0:	mov	r0, #0
   170d4:	str	r0, [fp, #-52]	; 0xffffffcc
   170d8:	ldr	r0, [sp, #16]
   170dc:	cmp	r0, #0
   170e0:	bne	1722c <__assert_fail@plt+0x5acc>
   170e4:	ldr	r0, [sp, #28]
   170e8:	ldrb	r2, [r0, #88]	; 0x58
   170ec:	ands	r0, r2, #4
   170f0:	beq	1722c <__assert_fail@plt+0x5acc>
   170f4:	ldr	r0, [sp, #12]
   170f8:	ldr	r0, [r0, #20]
   170fc:	cmp	r0, #0
   17100:	bne	1722c <__assert_fail@plt+0x5acc>
   17104:	ldr	r5, [sp, #28]
   17108:	mov	r9, #0
   1710c:	ldr	r7, [r5, #8]
   17110:	cmp	r7, #0
   17114:	beq	17200 <__assert_fail@plt+0x5aa0>
   17118:	ldr	r3, [r5]
   1711c:	mov	r8, #0
   17120:	mov	ip, #1
   17124:	mov	lr, #139	; 0x8b
   17128:	mov	r6, #0
   1712c:	mov	r4, #0
   17130:	add	r5, r3, r4, lsl #3
   17134:	ldrb	r1, [r5, #4]
   17138:	sub	r1, r1, #1
   1713c:	cmp	r1, #11
   17140:	bhi	175e8 <__assert_fail@plt+0x5e88>
   17144:	add	r0, pc, #0
   17148:	ldr	pc, [r0, r1, lsl #2]
   1714c:	andeq	r7, r1, r0, ror #3
   17150:	andeq	r7, r1, ip, ror r1
   17154:	andeq	r7, r1, ip, lsl #3
   17158:	andeq	r7, r1, ip, ror r1
   1715c:	strdeq	r7, [r1], -r8
   17160:	andeq	r7, r1, ip, lsr #4
   17164:	andeq	r7, r1, r8, ror #11
   17168:	andeq	r7, r1, ip, ror r1
   1716c:	andeq	r7, r1, ip, ror r1
   17170:	andeq	r7, r1, ip, ror r1
   17174:	andeq	r7, r1, ip, ror r1
   17178:	andeq	r7, r1, r0, asr #3
   1717c:	add	r4, r4, #1
   17180:	cmp	r4, r7
   17184:	bcc	17130 <__assert_fail@plt+0x59d0>
   17188:	b	17524 <__assert_fail@plt+0x5dc4>
   1718c:	ldr	r5, [r3, r4, lsl #3]
   17190:	ldr	r0, [r5, #16]
   17194:	cmp	r0, #0
   17198:	bne	1722c <__assert_fail@plt+0x5acc>
   1719c:	ldr	r0, [r5, #20]
   171a0:	cmp	r0, #0
   171a4:	ldreq	r0, [r5, #24]
   171a8:	cmpeq	r0, #0
   171ac:	bne	1722c <__assert_fail@plt+0x5acc>
   171b0:	ldr	r0, [r5, #28]
   171b4:	cmp	r0, #0
   171b8:	beq	1717c <__assert_fail@plt+0x5a1c>
   171bc:	b	1722c <__assert_fail@plt+0x5acc>
   171c0:	ldr	r0, [r3, r4, lsl #3]
   171c4:	sub	r0, r0, #16
   171c8:	ror	r1, r0, #4
   171cc:	cmp	r1, #7
   171d0:	bhi	1722c <__assert_fail@plt+0x5acc>
   171d4:	tst	lr, ip, lsl r1
   171d8:	bne	1717c <__assert_fail@plt+0x5a1c>
   171dc:	b	1722c <__assert_fail@plt+0x5acc>
   171e0:	ldrsb	r0, [r5]
   171e4:	cmp	r0, #0
   171e8:	mov	r0, #0
   171ec:	movwlt	r0, #1
   171f0:	orr	r6, r6, r0
   171f4:	b	1717c <__assert_fail@plt+0x5a1c>
   171f8:	mov	r8, #1
   171fc:	b	1717c <__assert_fail@plt+0x5a1c>
   17200:	mov	r8, #0
   17204:	mov	r0, #1
   17208:	and	r1, r2, #249	; 0xf9
   1720c:	str	r0, [r5, #92]	; 0x5c
   17210:	ldr	r0, [r5, #76]	; 0x4c
   17214:	cmp	r0, #0
   17218:	movwgt	r9, #1
   1721c:	orr	r0, r8, r9
   17220:	and	r0, r0, #1
   17224:	orr	r0, r1, r0, lsl #1
   17228:	strb	r0, [r5, #88]	; 0x58
   1722c:	ldr	r1, [sp, #28]
   17230:	ldr	r2, [r1, #52]	; 0x34
   17234:	ldr	r0, [r1, #24]
   17238:	ldr	r2, [r2, #12]
   1723c:	ldr	r2, [r2, #28]
   17240:	str	r2, [r1, #72]	; 0x48
   17244:	add	r2, r2, r2, lsl #1
   17248:	add	r5, r0, r2, lsl #2
   1724c:	mov	r4, r5
   17250:	ldr	sl, [r4, #4]!
   17254:	str	sl, [fp, #-44]	; 0xffffffd4
   17258:	ldr	r0, [r4]
   1725c:	cmp	r0, #1
   17260:	blt	173ac <__assert_fail@plt+0x5c4c>
   17264:	lsl	r0, sl, #2
   17268:	str	sl, [fp, #-48]	; 0xffffffd0
   1726c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   17270:	cmp	r0, #0
   17274:	str	r0, [fp, #-40]	; 0xffffffd8
   17278:	beq	175cc <__assert_fail@plt+0x5e6c>
   1727c:	mov	r6, r0
   17280:	ldr	r0, [r4]
   17284:	ldr	r1, [r5, #8]
   17288:	lsl	r2, r0, #2
   1728c:	mov	r0, r6
   17290:	bl	11484 <memcpy@plt>
   17294:	ldr	r1, [sp, #28]
   17298:	mov	r0, #0
   1729c:	cmp	sl, #1
   172a0:	str	r0, [fp, #-32]	; 0xffffffe0
   172a4:	ldrge	r0, [r1, #76]	; 0x4c
   172a8:	cmpge	r0, #1
   172ac:	blt	173c0 <__assert_fail@plt+0x5c60>
   172b0:	mov	ip, #0
   172b4:	sub	r8, fp, #48	; 0x30
   172b8:	mov	r9, #1
   172bc:	b	172c4 <__assert_fail@plt+0x5b64>
   172c0:	ldr	r6, [fp, #-40]	; 0xffffffd8
   172c4:	ldr	r7, [r6, ip, lsl #2]
   172c8:	ldr	r2, [r1]
   172cc:	add	r3, r2, r7, lsl #3
   172d0:	ldrb	r3, [r3, #4]
   172d4:	cmp	r3, #4
   172d8:	bne	1739c <__assert_fail@plt+0x5c3c>
   172dc:	mov	r3, #0
   172e0:	cmp	sl, #1
   172e4:	blt	17318 <__assert_fail@plt+0x5bb8>
   172e8:	ldr	r5, [r6, r3, lsl #2]
   172ec:	add	r4, r2, r5, lsl #3
   172f0:	ldrb	r4, [r4, #4]
   172f4:	cmp	r4, #9
   172f8:	bne	1730c <__assert_fail@plt+0x5bac>
   172fc:	ldr	r4, [r2, r7, lsl #3]
   17300:	ldr	r5, [r2, r5, lsl #3]
   17304:	cmp	r5, r4
   17308:	beq	17318 <__assert_fail@plt+0x5bb8>
   1730c:	add	r3, r3, #1
   17310:	cmp	r3, sl
   17314:	blt	172e8 <__assert_fail@plt+0x5b88>
   17318:	cmp	r3, sl
   1731c:	beq	1739c <__assert_fail@plt+0x5c3c>
   17320:	ldr	r2, [r1, #20]
   17324:	add	r0, r7, r7, lsl #1
   17328:	cmp	sl, #1
   1732c:	add	r0, r2, r0, lsl #2
   17330:	ldr	r0, [r0, #8]
   17334:	ldr	r0, [r0]
   17338:	blt	17374 <__assert_fail@plt+0x5c14>
   1733c:	mov	r2, #0
   17340:	subs	r3, sl, #1
   17344:	beq	17368 <__assert_fail@plt+0x5c08>
   17348:	add	r5, r2, r3
   1734c:	lsr	r4, r5, #1
   17350:	ldr	r7, [r6, r4, lsl #2]
   17354:	cmp	r7, r0
   17358:	movge	r3, r4
   1735c:	addlt	r2, r9, r5, lsr #1
   17360:	cmp	r2, r3
   17364:	bcc	17348 <__assert_fail@plt+0x5be8>
   17368:	ldr	r2, [r6, r2, lsl #2]
   1736c:	cmp	r2, r0
   17370:	beq	1739c <__assert_fail@plt+0x5c3c>
   17374:	ldr	r2, [r1, #24]
   17378:	add	r1, r0, r0, lsl #1
   1737c:	mov	r0, r8
   17380:	add	r1, r2, r1, lsl #2
   17384:	bl	20ac0 <__assert_fail@plt+0xf360>
   17388:	cmp	r0, #0
   1738c:	bne	1751c <__assert_fail@plt+0x5dbc>
   17390:	ldr	sl, [fp, #-44]	; 0xffffffd4
   17394:	ldr	r1, [sp, #28]
   17398:	mov	ip, #0
   1739c:	add	ip, ip, #1
   173a0:	cmp	ip, sl
   173a4:	blt	172c0 <__assert_fail@plt+0x5b60>
   173a8:	b	173c0 <__assert_fail@plt+0x5c60>
   173ac:	mov	r0, #0
   173b0:	str	r0, [fp, #-44]	; 0xffffffd4
   173b4:	str	r0, [fp, #-48]	; 0xffffffd0
   173b8:	str	r0, [fp, #-40]	; 0xffffffd8
   173bc:	str	r0, [fp, #-32]	; 0xffffffe0
   173c0:	sub	r0, fp, #32
   173c4:	sub	r2, fp, #48	; 0x30
   173c8:	mov	r3, #0
   173cc:	bl	20d8c <__assert_fail@plt+0xf62c>
   173d0:	ldr	r1, [sp, #28]
   173d4:	ldr	r7, [sp, #12]
   173d8:	cmp	r0, #0
   173dc:	str	r0, [r1, #36]	; 0x24
   173e0:	beq	17468 <__assert_fail@plt+0x5d08>
   173e4:	ldrsb	r2, [r0, #52]	; 0x34
   173e8:	cmn	r2, #1
   173ec:	ble	17400 <__assert_fail@plt+0x5ca0>
   173f0:	str	r0, [r1, #40]	; 0x28
   173f4:	str	r0, [r1, #44]	; 0x2c
   173f8:	str	r0, [r1, #48]	; 0x30
   173fc:	b	1747c <__assert_fail@plt+0x5d1c>
   17400:	sub	r4, fp, #32
   17404:	sub	r6, fp, #48	; 0x30
   17408:	mov	r3, #1
   1740c:	mov	r0, r4
   17410:	mov	r2, r6
   17414:	bl	20d8c <__assert_fail@plt+0xf62c>
   17418:	ldr	r1, [sp, #28]
   1741c:	mov	r2, r6
   17420:	mov	r3, #2
   17424:	str	r0, [r1, #40]	; 0x28
   17428:	ldr	r1, [sp, #28]
   1742c:	mov	r0, r4
   17430:	bl	20d8c <__assert_fail@plt+0xf62c>
   17434:	ldr	r1, [sp, #28]
   17438:	mov	r2, r6
   1743c:	mov	r3, #6
   17440:	str	r0, [r1, #44]	; 0x2c
   17444:	ldr	r1, [sp, #28]
   17448:	mov	r0, r4
   1744c:	bl	20d8c <__assert_fail@plt+0xf62c>
   17450:	ldr	r2, [sp, #28]
   17454:	str	r0, [r2, #48]	; 0x30
   17458:	ldr	r1, [r2, #40]	; 0x28
   1745c:	cmp	r1, #0
   17460:	cmpne	r0, #0
   17464:	bne	17470 <__assert_fail@plt+0x5d10>
   17468:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1746c:	b	17488 <__assert_fail@plt+0x5d28>
   17470:	ldr	r0, [r2, #44]	; 0x2c
   17474:	cmp	r0, #0
   17478:	beq	17468 <__assert_fail@plt+0x5d08>
   1747c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17480:	bl	141c4 <__assert_fail@plt+0x2a64>
   17484:	mov	r0, #0
   17488:	str	r0, [fp, #-52]	; 0xffffffcc
   1748c:	ldr	r5, [r7]
   17490:	ldr	r0, [r5, #56]	; 0x38
   17494:	cmp	r0, #0
   17498:	beq	174b0 <__assert_fail@plt+0x5d50>
   1749c:	ldr	r4, [r0]
   174a0:	bl	141c4 <__assert_fail@plt+0x2a64>
   174a4:	cmp	r4, #0
   174a8:	mov	r0, r4
   174ac:	bne	1749c <__assert_fail@plt+0x5d3c>
   174b0:	mov	r0, #31
   174b4:	mov	r4, #0
   174b8:	str	r0, [r5, #64]	; 0x40
   174bc:	str	r4, [r5, #52]	; 0x34
   174c0:	str	r4, [r5, #56]	; 0x38
   174c4:	ldr	r0, [r5, #16]
   174c8:	bl	141c4 <__assert_fail@plt+0x2a64>
   174cc:	str	r4, [r5, #16]
   174d0:	ldr	r0, [sp, #40]	; 0x28
   174d4:	bl	141c4 <__assert_fail@plt+0x2a64>
   174d8:	ldr	r0, [sp, #44]	; 0x2c
   174dc:	bl	141c4 <__assert_fail@plt+0x2a64>
   174e0:	ldrb	r0, [sp, #107]	; 0x6b
   174e4:	cmp	r0, #0
   174e8:	beq	174f4 <__assert_fail@plt+0x5d94>
   174ec:	ldr	r0, [sp, #36]	; 0x24
   174f0:	bl	141c4 <__assert_fail@plt+0x2a64>
   174f4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   174f8:	cmp	r0, #0
   174fc:	bne	1759c <__assert_fail@plt+0x5e3c>
   17500:	mov	r0, r4
   17504:	sub	sp, fp, #28
   17508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1750c:	ldr	r9, [sp, #12]
   17510:	mov	r0, #12
   17514:	str	r0, [fp, #-52]	; 0xffffffcc
   17518:	b	1695c <__assert_fail@plt+0x51fc>
   1751c:	ldr	r7, [sp, #12]
   17520:	b	17488 <__assert_fail@plt+0x5d28>
   17524:	orr	r0, r6, r8
   17528:	tst	r0, #1
   1752c:	beq	17594 <__assert_fail@plt+0x5e34>
   17530:	ldr	r5, [sp, #28]
   17534:	mov	r2, #0
   17538:	mov	r7, #7
   1753c:	b	17544 <__assert_fail@plt+0x5de4>
   17540:	ldr	r3, [r5]
   17544:	add	r3, r3, r2, lsl #3
   17548:	ldr	r6, [r3, #4]
   1754c:	uxtb	r1, r6
   17550:	cmp	r1, #5
   17554:	beq	17574 <__assert_fail@plt+0x5e14>
   17558:	cmp	r1, #1
   1755c:	bne	1757c <__assert_fail@plt+0x5e1c>
   17560:	ldrsb	r0, [r3]
   17564:	cmn	r0, #1
   17568:	bicle	r0, r6, #2097152	; 0x200000
   1756c:	strle	r0, [r3, #4]
   17570:	b	1757c <__assert_fail@plt+0x5e1c>
   17574:	bfi	r6, r7, #0, #8
   17578:	str	r6, [r3, #4]
   1757c:	ldr	r0, [r5, #8]
   17580:	add	r2, r2, #1
   17584:	cmp	r2, r0
   17588:	bcc	17540 <__assert_fail@plt+0x5de0>
   1758c:	ldrb	r2, [r5, #88]	; 0x58
   17590:	b	17204 <__assert_fail@plt+0x5aa4>
   17594:	ldr	r5, [sp, #28]
   17598:	b	17204 <__assert_fail@plt+0x5aa4>
   1759c:	ldr	r0, [sp, #8]
   175a0:	cmp	r0, #0
   175a4:	beq	175b4 <__assert_fail@plt+0x5e54>
   175a8:	ldr	r0, [sp, #28]
   175ac:	add	r0, r0, #136	; 0x88
   175b0:	bl	11430 <pthread_mutex_destroy@plt>
   175b4:	ldr	r0, [sp, #28]
   175b8:	bl	17c90 <__assert_fail@plt+0x6530>
   175bc:	mov	r0, #0
   175c0:	str	r0, [r7]
   175c4:	str	r0, [r7, #4]
   175c8:	b	169f0 <__assert_fail@plt+0x5290>
   175cc:	ldr	r7, [sp, #12]
   175d0:	mov	r0, #0
   175d4:	str	r0, [fp, #-48]	; 0xffffffd0
   175d8:	str	r0, [fp, #-44]	; 0xffffffd4
   175dc:	mov	r0, #12
   175e0:	str	r0, [fp, #-32]	; 0xffffffe0
   175e4:	b	17488 <__assert_fail@plt+0x5d28>
   175e8:	bl	1173c <abort@plt>
   175ec:	movw	r2, #54260	; 0xd3f4
   175f0:	movt	r2, #3
   175f4:	ldr	r1, [r2]
   175f8:	str	r0, [r2]
   175fc:	mov	r0, r1
   17600:	bx	lr
   17604:	push	{r4, r5, r6, sl, fp, lr}
   17608:	add	fp, sp, #16
   1760c:	ldr	r5, [r0, #16]
   17610:	ldr	r6, [r0]
   17614:	mov	r4, r0
   17618:	mov	r1, #0
   1761c:	mov	r2, #256	; 0x100
   17620:	mov	r0, r5
   17624:	bl	11670 <memset@plt>
   17628:	ldr	r1, [r6, #36]	; 0x24
   1762c:	mov	r0, r4
   17630:	mov	r2, r5
   17634:	bl	176a0 <__assert_fail@plt+0x5f40>
   17638:	ldr	r0, [r6, #36]	; 0x24
   1763c:	ldr	r1, [r6, #40]	; 0x28
   17640:	cmp	r0, r1
   17644:	beq	17658 <__assert_fail@plt+0x5ef8>
   17648:	mov	r0, r4
   1764c:	mov	r2, r5
   17650:	bl	176a0 <__assert_fail@plt+0x5f40>
   17654:	ldr	r0, [r6, #36]	; 0x24
   17658:	ldr	r1, [r6, #44]	; 0x2c
   1765c:	cmp	r0, r1
   17660:	beq	17674 <__assert_fail@plt+0x5f14>
   17664:	mov	r0, r4
   17668:	mov	r2, r5
   1766c:	bl	176a0 <__assert_fail@plt+0x5f40>
   17670:	ldr	r0, [r6, #36]	; 0x24
   17674:	ldr	r1, [r6, #48]	; 0x30
   17678:	cmp	r0, r1
   1767c:	beq	1768c <__assert_fail@plt+0x5f2c>
   17680:	mov	r0, r4
   17684:	mov	r2, r5
   17688:	bl	176a0 <__assert_fail@plt+0x5f40>
   1768c:	ldrb	r0, [r4, #28]
   17690:	orr	r0, r0, #8
   17694:	strb	r0, [r4, #28]
   17698:	mov	r0, #0
   1769c:	pop	{r4, r5, r6, sl, fp, pc}
   176a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176a4:	add	fp, sp, #28
   176a8:	sub	sp, sp, #316	; 0x13c
   176ac:	ldr	r8, [r0]
   176b0:	str	r0, [sp, #20]
   176b4:	mov	r3, #0
   176b8:	str	r2, [sp, #36]	; 0x24
   176bc:	ldr	r0, [r8, #92]	; 0x5c
   176c0:	cmp	r0, #1
   176c4:	ldreq	r0, [sp, #20]
   176c8:	ldrbeq	r0, [r0, #14]
   176cc:	ubfxeq	r3, r0, #6, #1
   176d0:	ldr	r0, [r1, #8]
   176d4:	cmp	r0, #1
   176d8:	blt	17a6c <__assert_fail@plt+0x630c>
   176dc:	add	r0, sp, #40	; 0x28
   176e0:	mov	r4, #1
   176e4:	mov	r2, #0
   176e8:	str	r3, [sp, #32]
   176ec:	str	r1, [sp, #12]
   176f0:	str	r8, [sp, #24]
   176f4:	add	r0, r0, #1
   176f8:	str	r0, [sp, #8]
   176fc:	movw	r0, #1
   17700:	movt	r0, #32
   17704:	add	r0, r0, #254	; 0xfe
   17708:	str	r0, [sp, #4]
   1770c:	ldr	r0, [r1, #12]
   17710:	str	r2, [sp, #16]
   17714:	ldr	sl, [r0, r2, lsl #2]
   17718:	ldr	r0, [r8]
   1771c:	add	r1, r0, sl, lsl #3
   17720:	ldrb	r5, [r1, #4]
   17724:	sub	r1, r5, #1
   17728:	cmp	r1, #6
   1772c:	bhi	17a54 <__assert_fail@plt+0x62f4>
   17730:	add	r2, pc, #0
   17734:	ldr	pc, [r2, r1, lsl #2]
   17738:	andeq	r7, r1, r4, asr r7
   1773c:	andeq	r7, r1, r4, ror sl
   17740:	andeq	r7, r1, r4, ror #16
   17744:	andeq	r7, r1, r4, asr sl
   17748:	andeq	r7, r1, r4, ror sl
   1774c:	andeq	r7, r1, r8, lsl #18
   17750:	andeq	r7, r1, r4, ror sl
   17754:	ldrb	r5, [r0, sl, lsl #3]
   17758:	ldr	r0, [sp, #36]	; 0x24
   1775c:	cmp	r3, #0
   17760:	strb	r4, [r0, r5]
   17764:	beq	17780 <__assert_fail@plt+0x6020>
   17768:	bl	115e0 <__ctype_tolower_loc@plt>
   1776c:	ldr	r0, [r0]
   17770:	ldr	r3, [sp, #32]
   17774:	ldr	r1, [sp, #36]	; 0x24
   17778:	ldr	r0, [r0, r5, lsl #2]
   1777c:	strb	r4, [r1, r0]
   17780:	ldr	r0, [sp, #20]
   17784:	ldrb	r0, [r0, #14]
   17788:	tst	r0, #64	; 0x40
   1778c:	beq	17a54 <__assert_fail@plt+0x62f4>
   17790:	ldr	r0, [r8, #92]	; 0x5c
   17794:	cmp	r0, #2
   17798:	blt	17a54 <__assert_fail@plt+0x62f4>
   1779c:	ldr	r0, [r8]
   177a0:	add	r1, sl, #1
   177a4:	ldr	r5, [sp, #4]
   177a8:	movw	r6, #1
   177ac:	add	r9, sp, #40	; 0x28
   177b0:	mov	r7, #0
   177b4:	movt	r6, #32
   177b8:	ldrb	r0, [r0, sl, lsl #3]
   177bc:	strb	r0, [sp, #40]	; 0x28
   177c0:	ldr	r0, [r8, #8]
   177c4:	cmp	r1, r0
   177c8:	ldr	r0, [sp, #8]
   177cc:	bcs	1780c <__assert_fail@plt+0x60ac>
   177d0:	ldr	r0, [sp, #8]
   177d4:	ldr	r1, [r8]
   177d8:	add	r1, r1, sl, lsl #3
   177dc:	ldr	r2, [r1, #12]
   177e0:	and	r2, r2, r5
   177e4:	cmp	r2, r6
   177e8:	bne	1780c <__assert_fail@plt+0x60ac>
   177ec:	ldrb	r1, [r1, #8]
   177f0:	add	r3, sl, #2
   177f4:	strb	r1, [r0], #1
   177f8:	add	r1, sl, #1
   177fc:	ldr	r2, [r8, #8]
   17800:	mov	sl, r1
   17804:	cmp	r3, r2
   17808:	bcc	177d4 <__assert_fail@plt+0x6074>
   1780c:	sub	r6, r0, r9
   17810:	sub	r5, fp, #48	; 0x30
   17814:	sub	r0, fp, #36	; 0x24
   17818:	mov	r1, r9
   1781c:	str	r7, [fp, #-44]	; 0xffffffd4
   17820:	str	r7, [fp, #-48]	; 0xffffffd0
   17824:	mov	r2, r6
   17828:	mov	r3, r5
   1782c:	bl	2ac8c <__assert_fail@plt+0x1952c>
   17830:	cmp	r0, r6
   17834:	bne	17984 <__assert_fail@plt+0x6224>
   17838:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1783c:	bl	114a8 <towlower@plt>
   17840:	mov	r1, r0
   17844:	mov	r0, r9
   17848:	mov	r2, r5
   1784c:	bl	11400 <wcrtomb@plt>
   17850:	cmn	r0, #1
   17854:	ldrbne	r0, [sp, #40]	; 0x28
   17858:	ldrne	r1, [sp, #36]	; 0x24
   1785c:	strbne	r4, [r1, r0]
   17860:	b	17984 <__assert_fail@plt+0x6224>
   17864:	ldr	r5, [sp, #36]	; 0x24
   17868:	mov	r7, #0
   1786c:	mov	r6, #0
   17870:	mov	r9, #0
   17874:	str	sl, [sp, #28]
   17878:	b	1788c <__assert_fail@plt+0x612c>
   1787c:	ldr	r0, [r8]
   17880:	add	r7, r7, #128	; 0x80
   17884:	add	r5, r5, #32
   17888:	add	r6, r6, #32
   1788c:	ldr	r0, [r0, sl, lsl #3]
   17890:	mov	sl, #0
   17894:	ldr	r8, [r0, r9, lsl #2]
   17898:	tst	r8, r4, lsl sl
   1789c:	beq	178e4 <__assert_fail@plt+0x6184>
   178a0:	mov	r0, r5
   178a4:	cmp	r3, #0
   178a8:	strb	r4, [r0, sl]!
   178ac:	beq	178e4 <__assert_fail@plt+0x6184>
   178b0:	add	r1, r6, sl
   178b4:	add	r1, r1, #128	; 0x80
   178b8:	lsr	r1, r1, #7
   178bc:	cmp	r1, #2
   178c0:	bhi	178e0 <__assert_fail@plt+0x6180>
   178c4:	bl	115e0 <__ctype_tolower_loc@plt>
   178c8:	ldr	r0, [r0]
   178cc:	ldr	r1, [sp, #36]	; 0x24
   178d0:	ldr	r3, [sp, #32]
   178d4:	add	r0, r0, r7
   178d8:	ldr	r0, [r0, sl, lsl #2]
   178dc:	add	r0, r1, r0
   178e0:	strb	r4, [r0]
   178e4:	add	sl, sl, #1
   178e8:	cmp	sl, #32
   178ec:	bne	17898 <__assert_fail@plt+0x6138>
   178f0:	ldr	r8, [sp, #24]
   178f4:	ldr	sl, [sp, #28]
   178f8:	add	r9, r9, #1
   178fc:	cmp	r9, #8
   17900:	bne	1787c <__assert_fail@plt+0x611c>
   17904:	b	17a54 <__assert_fail@plt+0x62f4>
   17908:	ldr	r6, [r0, sl, lsl #3]
   1790c:	ldr	r0, [r8, #92]	; 0x5c
   17910:	cmp	r0, #2
   17914:	blt	1798c <__assert_fail@plt+0x622c>
   17918:	ldr	r0, [r6, #36]	; 0x24
   1791c:	cmp	r0, #0
   17920:	bne	17938 <__assert_fail@plt+0x61d8>
   17924:	ldrb	r0, [r6, #16]
   17928:	tst	r0, #1
   1792c:	ldreq	r0, [r6, #32]
   17930:	cmpeq	r0, #0
   17934:	beq	1798c <__assert_fail@plt+0x622c>
   17938:	mov	r6, #0
   1793c:	add	r5, sp, #40	; 0x28
   17940:	sub	r7, fp, #48	; 0x30
   17944:	strb	r6, [fp, #-48]	; 0xffffffd0
   17948:	mov	r0, #0
   1794c:	mov	r1, r7
   17950:	mov	r2, #1
   17954:	mov	r3, r5
   17958:	str	r6, [sp, #44]	; 0x2c
   1795c:	str	r6, [sp, #40]	; 0x28
   17960:	bl	2ac8c <__assert_fail@plt+0x1952c>
   17964:	cmn	r0, #2
   17968:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   1796c:	ldreq	r0, [sp, #36]	; 0x24
   17970:	strbeq	r4, [r0, r1]
   17974:	add	r0, r1, #1
   17978:	tst	r0, #255	; 0xff
   1797c:	strb	r0, [fp, #-48]	; 0xffffffd0
   17980:	bne	17948 <__assert_fail@plt+0x61e8>
   17984:	ldr	r3, [sp, #32]
   17988:	b	17a54 <__assert_fail@plt+0x62f4>
   1798c:	ldr	r0, [r6, #20]
   17990:	cmp	r0, #1
   17994:	blt	17a54 <__assert_fail@plt+0x62f4>
   17998:	mov	r9, #0
   1799c:	mov	r0, #0
   179a0:	add	r7, sp, #40	; 0x28
   179a4:	sub	r2, fp, #48	; 0x30
   179a8:	str	r0, [fp, #-44]	; 0xffffffd4
   179ac:	str	r0, [fp, #-48]	; 0xffffffd0
   179b0:	ldr	r0, [r6]
   179b4:	ldr	r1, [r0, r9, lsl #2]
   179b8:	mov	r0, r7
   179bc:	bl	11400 <wcrtomb@plt>
   179c0:	ldr	r3, [sp, #32]
   179c4:	cmn	r0, #1
   179c8:	beq	179f8 <__assert_fail@plt+0x6298>
   179cc:	ldrb	r5, [sp, #40]	; 0x28
   179d0:	ldr	r0, [sp, #36]	; 0x24
   179d4:	cmp	r3, #0
   179d8:	strb	r4, [r0, r5]
   179dc:	beq	179f8 <__assert_fail@plt+0x6298>
   179e0:	bl	115e0 <__ctype_tolower_loc@plt>
   179e4:	ldr	r0, [r0]
   179e8:	ldr	r3, [sp, #32]
   179ec:	ldr	r1, [sp, #36]	; 0x24
   179f0:	ldr	r0, [r0, r5, lsl #2]
   179f4:	strb	r4, [r1, r0]
   179f8:	ldr	r0, [sp, #20]
   179fc:	ldrb	r0, [r0, #14]
   17a00:	tst	r0, #64	; 0x40
   17a04:	beq	17a44 <__assert_fail@plt+0x62e4>
   17a08:	ldr	r0, [r8, #92]	; 0x5c
   17a0c:	cmp	r0, #2
   17a10:	blt	17a44 <__assert_fail@plt+0x62e4>
   17a14:	ldr	r0, [r6]
   17a18:	ldr	r0, [r0, r9, lsl #2]
   17a1c:	bl	114a8 <towlower@plt>
   17a20:	mov	r1, r0
   17a24:	mov	r0, r7
   17a28:	sub	r2, fp, #48	; 0x30
   17a2c:	bl	11400 <wcrtomb@plt>
   17a30:	cmn	r0, #1
   17a34:	ldr	r3, [sp, #32]
   17a38:	ldrbne	r0, [sp, #40]	; 0x28
   17a3c:	ldrne	r1, [sp, #36]	; 0x24
   17a40:	strbne	r4, [r1, r0]
   17a44:	ldr	r0, [r6, #20]
   17a48:	add	r9, r9, #1
   17a4c:	cmp	r9, r0
   17a50:	blt	1799c <__assert_fail@plt+0x623c>
   17a54:	ldr	r1, [sp, #12]
   17a58:	ldr	r2, [sp, #16]
   17a5c:	ldr	r0, [r1, #8]
   17a60:	add	r2, r2, #1
   17a64:	cmp	r2, r0
   17a68:	blt	1770c <__assert_fail@plt+0x5fac>
   17a6c:	sub	sp, fp, #28
   17a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a74:	ldr	r0, [sp, #36]	; 0x24
   17a78:	mov	r1, #1
   17a7c:	mov	r2, #256	; 0x100
   17a80:	bl	11670 <memset@plt>
   17a84:	cmp	r5, #2
   17a88:	ldreq	r1, [sp, #20]
   17a8c:	ldrbeq	r0, [r1, #28]
   17a90:	orreq	r0, r0, #1
   17a94:	strbeq	r0, [r1, #28]
   17a98:	sub	sp, fp, #28
   17a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17aa4:	add	fp, sp, #24
   17aa8:	mov	r4, r0
   17aac:	mov	r0, #0
   17ab0:	mov	r6, r2
   17ab4:	mov	r8, r1
   17ab8:	str	r0, [r4]
   17abc:	str	r0, [r4, #4]
   17ac0:	str	r0, [r4, #8]
   17ac4:	mov	r0, #256	; 0x100
   17ac8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   17acc:	cmp	r0, #0
   17ad0:	str	r0, [r4, #16]
   17ad4:	beq	17b84 <__assert_fail@plt+0x6424>
   17ad8:	movw	r0, #45820	; 0xb2fc
   17adc:	tst	r6, #1
   17ae0:	and	r1, r6, #2
   17ae4:	movt	r0, #3
   17ae8:	movweq	r0, #710	; 0x2c6
   17aec:	movteq	r0, #257	; 0x101
   17af0:	tst	r6, #4
   17af4:	orr	r5, r0, r1, lsl #21
   17af8:	bne	17b0c <__assert_fail@plt+0x63ac>
   17afc:	ldrb	r0, [r4, #28]
   17b00:	and	r0, r0, #127	; 0x7f
   17b04:	strb	r0, [r4, #28]
   17b08:	b	17b2c <__assert_fail@plt+0x63cc>
   17b0c:	ldrb	r0, [r4, #28]
   17b10:	mvn	r1, #127	; 0x7f
   17b14:	orr	r0, r0, r1
   17b18:	movw	r1, #45758	; 0xb2be
   17b1c:	movt	r1, #323	; 0x143
   17b20:	strb	r0, [r4, #28]
   17b24:	and	r1, r5, r1
   17b28:	orr	r5, r1, #256	; 0x100
   17b2c:	and	r1, r6, #8
   17b30:	and	r0, r0, #239	; 0xef
   17b34:	mov	r7, #0
   17b38:	orr	r0, r0, r1, lsl #1
   17b3c:	str	r7, [r4, #20]
   17b40:	strb	r0, [r4, #28]
   17b44:	mov	r0, r8
   17b48:	bl	11628 <strlen@plt>
   17b4c:	mov	r2, r0
   17b50:	mov	r0, r4
   17b54:	mov	r1, r8
   17b58:	mov	r3, r5
   17b5c:	bl	16140 <__assert_fail@plt+0x49e0>
   17b60:	mov	r5, r0
   17b64:	cmp	r0, #16
   17b68:	movweq	r5, #8
   17b6c:	cmp	r5, #0
   17b70:	bne	17b90 <__assert_fail@plt+0x6430>
   17b74:	mov	r0, r4
   17b78:	bl	17604 <__assert_fail@plt+0x5ea4>
   17b7c:	mov	r0, r7
   17b80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b84:	mov	r7, #12
   17b88:	mov	r0, r7
   17b8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b90:	ldr	r0, [r4, #16]
   17b94:	bl	141c4 <__assert_fail@plt+0x2a64>
   17b98:	mov	r0, r5
   17b9c:	str	r7, [r4, #16]
   17ba0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ba4:	push	{r4, r5, r6, r7, fp, lr}
   17ba8:	add	fp, sp, #16
   17bac:	cmp	r0, #17
   17bb0:	bcs	17c24 <__assert_fail@plt+0x64c4>
   17bb4:	movw	r1, #49032	; 0xbf88
   17bb8:	mov	r4, r2
   17bbc:	mov	r2, #5
   17bc0:	mov	r5, r3
   17bc4:	movt	r1, #2
   17bc8:	ldr	r0, [r1, r0, lsl #2]
   17bcc:	movw	r1, #48648	; 0xbe08
   17bd0:	movt	r1, #2
   17bd4:	add	r1, r1, r0
   17bd8:	mov	r0, #0
   17bdc:	bl	114e4 <dcgettext@plt>
   17be0:	mov	r6, r0
   17be4:	bl	11628 <strlen@plt>
   17be8:	add	r7, r0, #1
   17bec:	cmp	r5, #0
   17bf0:	beq	17c0c <__assert_fail@plt+0x64ac>
   17bf4:	cmp	r7, r5
   17bf8:	mov	r2, r7
   17bfc:	bhi	17c14 <__assert_fail@plt+0x64b4>
   17c00:	mov	r0, r4
   17c04:	mov	r1, r6
   17c08:	bl	11484 <memcpy@plt>
   17c0c:	mov	r0, r7
   17c10:	pop	{r4, r5, r6, r7, fp, pc}
   17c14:	sub	r2, r5, #1
   17c18:	mov	r0, #0
   17c1c:	strb	r0, [r4, r2]
   17c20:	b	17c00 <__assert_fail@plt+0x64a0>
   17c24:	bl	1173c <abort@plt>
   17c28:	push	{r4, r5, fp, lr}
   17c2c:	add	fp, sp, #8
   17c30:	ldr	r5, [r0]
   17c34:	mov	r4, r0
   17c38:	cmp	r5, #0
   17c3c:	beq	17c68 <__assert_fail@plt+0x6508>
   17c40:	movw	r0, #0
   17c44:	movw	r1, #0
   17c48:	movt	r0, #0
   17c4c:	movt	r1, #0
   17c50:	orrs	r0, r1, r0
   17c54:	beq	17c60 <__assert_fail@plt+0x6500>
   17c58:	add	r0, r5, #136	; 0x88
   17c5c:	bl	11430 <pthread_mutex_destroy@plt>
   17c60:	mov	r0, r5
   17c64:	bl	17c90 <__assert_fail@plt+0x6530>
   17c68:	mov	r5, #0
   17c6c:	str	r5, [r4]
   17c70:	str	r5, [r4, #4]
   17c74:	ldr	r0, [r4, #16]
   17c78:	bl	141c4 <__assert_fail@plt+0x2a64>
   17c7c:	str	r5, [r4, #16]
   17c80:	ldr	r0, [r4, #20]
   17c84:	bl	141c4 <__assert_fail@plt+0x2a64>
   17c88:	str	r5, [r4, #20]
   17c8c:	pop	{r4, r5, fp, pc}
   17c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c94:	add	fp, sp, #28
   17c98:	sub	sp, sp, #4
   17c9c:	mov	sl, r0
   17ca0:	ldr	r0, [r0]
   17ca4:	cmp	r0, #0
   17ca8:	ldrne	r1, [sl, #8]
   17cac:	cmpne	r1, #0
   17cb0:	beq	17d28 <__assert_fail@plt+0x65c8>
   17cb4:	movw	r7, #255	; 0xff
   17cb8:	mov	r6, #0
   17cbc:	movt	r7, #4
   17cc0:	b	17cc8 <__assert_fail@plt+0x6568>
   17cc4:	ldr	r0, [sl]
   17cc8:	add	r1, r0, r6, lsl #3
   17ccc:	ldr	r1, [r1, #4]
   17cd0:	and	r1, r1, r7
   17cd4:	cmp	r1, #3
   17cd8:	beq	17d10 <__assert_fail@plt+0x65b0>
   17cdc:	cmp	r1, #6
   17ce0:	bne	17d18 <__assert_fail@plt+0x65b8>
   17ce4:	ldr	r5, [r0, r6, lsl #3]
   17ce8:	ldr	r0, [r5]
   17cec:	bl	141c4 <__assert_fail@plt+0x2a64>
   17cf0:	ldr	r0, [r5, #4]
   17cf4:	bl	141c4 <__assert_fail@plt+0x2a64>
   17cf8:	ldr	r0, [r5, #8]
   17cfc:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d00:	ldr	r0, [r5, #12]
   17d04:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d08:	mov	r0, r5
   17d0c:	b	17d14 <__assert_fail@plt+0x65b4>
   17d10:	ldr	r0, [r0, r6, lsl #3]
   17d14:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d18:	ldr	r0, [sl, #8]
   17d1c:	add	r6, r6, #1
   17d20:	cmp	r6, r0
   17d24:	bcc	17cc4 <__assert_fail@plt+0x6564>
   17d28:	ldr	r0, [sl, #12]
   17d2c:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d30:	ldr	r0, [sl, #8]
   17d34:	cmp	r0, #0
   17d38:	beq	17da4 <__assert_fail@plt+0x6644>
   17d3c:	add	r7, sl, #20
   17d40:	add	r8, sl, #28
   17d44:	add	r9, sl, #24
   17d48:	mov	r5, #0
   17d4c:	mov	r6, #8
   17d50:	ldr	r0, [r9]
   17d54:	cmp	r0, #0
   17d58:	beq	17d64 <__assert_fail@plt+0x6604>
   17d5c:	ldr	r0, [r0, r6]
   17d60:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d64:	ldr	r0, [r8]
   17d68:	cmp	r0, #0
   17d6c:	beq	17d78 <__assert_fail@plt+0x6618>
   17d70:	ldr	r0, [r0, r6]
   17d74:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d78:	ldr	r0, [r7]
   17d7c:	cmp	r0, #0
   17d80:	beq	17d8c <__assert_fail@plt+0x662c>
   17d84:	ldr	r0, [r0, r6]
   17d88:	bl	141c4 <__assert_fail@plt+0x2a64>
   17d8c:	ldr	r0, [sl, #8]
   17d90:	add	r5, r5, #1
   17d94:	add	r6, r6, #12
   17d98:	cmp	r5, r0
   17d9c:	bcc	17d50 <__assert_fail@plt+0x65f0>
   17da0:	b	17db0 <__assert_fail@plt+0x6650>
   17da4:	add	r8, sl, #28
   17da8:	add	r9, sl, #24
   17dac:	add	r7, sl, #20
   17db0:	ldr	r0, [r7]
   17db4:	bl	141c4 <__assert_fail@plt+0x2a64>
   17db8:	ldr	r0, [r9]
   17dbc:	bl	141c4 <__assert_fail@plt+0x2a64>
   17dc0:	ldr	r0, [r8]
   17dc4:	bl	141c4 <__assert_fail@plt+0x2a64>
   17dc8:	ldr	r0, [sl]
   17dcc:	bl	141c4 <__assert_fail@plt+0x2a64>
   17dd0:	ldr	r5, [sl, #32]
   17dd4:	cmp	r5, #0
   17dd8:	beq	17e38 <__assert_fail@plt+0x66d8>
   17ddc:	mov	r6, #0
   17de0:	b	17dec <__assert_fail@plt+0x668c>
   17de4:	ldr	r5, [sl, #32]
   17de8:	add	r6, r6, #1
   17dec:	add	r0, r6, r6, lsl #1
   17df0:	ldr	r0, [r5, r0, lsl #2]!
   17df4:	add	r7, r5, #8
   17df8:	cmp	r0, #1
   17dfc:	blt	17e20 <__assert_fail@plt+0x66c0>
   17e00:	mov	r4, #0
   17e04:	ldr	r0, [r7]
   17e08:	ldr	r0, [r0, r4, lsl #2]
   17e0c:	bl	1b1ec <__assert_fail@plt+0x9a8c>
   17e10:	ldr	r0, [r5]
   17e14:	add	r4, r4, #1
   17e18:	cmp	r4, r0
   17e1c:	blt	17e04 <__assert_fail@plt+0x66a4>
   17e20:	ldr	r0, [r7]
   17e24:	bl	141c4 <__assert_fail@plt+0x2a64>
   17e28:	ldr	r0, [sl, #68]	; 0x44
   17e2c:	cmp	r6, r0
   17e30:	bcc	17de4 <__assert_fail@plt+0x6684>
   17e34:	ldr	r5, [sl, #32]
   17e38:	mov	r0, r5
   17e3c:	bl	141c4 <__assert_fail@plt+0x2a64>
   17e40:	ldr	r0, [sl, #60]	; 0x3c
   17e44:	movw	r1, #49100	; 0xbfcc
   17e48:	movt	r1, #2
   17e4c:	cmp	r0, r1
   17e50:	beq	17e58 <__assert_fail@plt+0x66f8>
   17e54:	bl	141c4 <__assert_fail@plt+0x2a64>
   17e58:	ldr	r0, [sl, #132]	; 0x84
   17e5c:	bl	141c4 <__assert_fail@plt+0x2a64>
   17e60:	mov	r0, sl
   17e64:	sub	sp, fp, #28
   17e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e6c:	b	141c4 <__assert_fail@plt+0x2a64>
   17e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e74:	add	fp, sp, #28
   17e78:	sub	sp, sp, #28
   17e7c:	ldr	sl, [fp, #8]
   17e80:	mov	r7, #2
   17e84:	cmp	sl, #7
   17e88:	bhi	17f5c <__assert_fail@plt+0x67fc>
   17e8c:	mov	r5, r0
   17e90:	ldr	r0, [r0]
   17e94:	mov	r6, r3
   17e98:	mov	r9, r2
   17e9c:	mov	r4, r1
   17ea0:	tst	sl, #4
   17ea4:	str	r0, [sp, #24]
   17ea8:	bne	17ec0 <__assert_fail@plt+0x6760>
   17eac:	mov	r0, r4
   17eb0:	bl	11628 <strlen@plt>
   17eb4:	mov	r7, r0
   17eb8:	mov	r8, #0
   17ebc:	b	17ec8 <__assert_fail@plt+0x6768>
   17ec0:	ldr	r8, [r6]
   17ec4:	ldr	r7, [r6, #4]
   17ec8:	movw	r0, #0
   17ecc:	movw	r1, #0
   17ed0:	movt	r0, #0
   17ed4:	movt	r1, #0
   17ed8:	orrs	r0, r1, r0
   17edc:	str	r0, [sp, #20]
   17ee0:	beq	17ef0 <__assert_fail@plt+0x6790>
   17ee4:	ldr	r0, [sp, #24]
   17ee8:	add	r0, r0, #136	; 0x88
   17eec:	bl	1146c <pthread_mutex_lock@plt>
   17ef0:	ldrb	r0, [r5, #28]
   17ef4:	tst	r0, #16
   17ef8:	bne	17f0c <__assert_fail@plt+0x67ac>
   17efc:	str	r7, [sp]
   17f00:	stmib	sp, {r7, r9}
   17f04:	str	r6, [sp, #12]
   17f08:	b	17f20 <__assert_fail@plt+0x67c0>
   17f0c:	mov	r0, #0
   17f10:	str	r7, [sp]
   17f14:	str	r7, [sp, #4]
   17f18:	str	r0, [sp, #8]
   17f1c:	str	r0, [sp, #12]
   17f20:	mov	r0, r5
   17f24:	mov	r1, r4
   17f28:	mov	r2, r7
   17f2c:	mov	r3, r8
   17f30:	str	sl, [sp, #16]
   17f34:	bl	17f68 <__assert_fail@plt+0x6808>
   17f38:	mov	r7, r0
   17f3c:	ldr	r0, [sp, #20]
   17f40:	cmp	r0, #0
   17f44:	beq	17f54 <__assert_fail@plt+0x67f4>
   17f48:	ldr	r0, [sp, #24]
   17f4c:	add	r0, r0, #136	; 0x88
   17f50:	bl	113b8 <pthread_mutex_unlock@plt>
   17f54:	cmp	r7, #0
   17f58:	movwne	r7, #1
   17f5c:	mov	r0, r7
   17f60:	sub	sp, fp, #28
   17f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f6c:	add	fp, sp, #28
   17f70:	sub	sp, sp, #412	; 0x19c
   17f74:	ldr	r8, [r0]
   17f78:	str	r2, [sp, #68]	; 0x44
   17f7c:	str	r1, [sp, #100]	; 0x64
   17f80:	mov	sl, r0
   17f84:	add	r0, sp, #104	; 0x68
   17f88:	mov	r1, #0
   17f8c:	mov	r2, #136	; 0x88
   17f90:	mov	r6, r3
   17f94:	mov	r4, #0
   17f98:	bl	11670 <memset@plt>
   17f9c:	str	r8, [sp, #188]	; 0xbc
   17fa0:	ldr	r0, [fp, #8]
   17fa4:	mov	ip, #0
   17fa8:	ldr	r1, [sl, #16]
   17fac:	cmp	r1, #0
   17fb0:	beq	17fcc <__assert_fail@plt+0x686c>
   17fb4:	ldrb	r2, [sl, #28]
   17fb8:	and	r2, r2, #9
   17fbc:	cmp	r2, #8
   17fc0:	movne	r1, #0
   17fc4:	subs	ip, r6, r0
   17fc8:	movne	ip, r1
   17fcc:	ldr	r2, [sl, #24]
   17fd0:	ldr	r7, [fp, #16]
   17fd4:	ldr	r1, [sl, #8]
   17fd8:	mov	r9, #1
   17fdc:	mvn	r3, r2
   17fe0:	cmp	r2, r7
   17fe4:	addcc	r4, r3, r7
   17fe8:	cmp	r1, #0
   17fec:	str	r4, [sp, #32]
   17ff0:	beq	1a9c0 <__assert_fail@plt+0x9260>
   17ff4:	ldr	r1, [r8, #36]	; 0x24
   17ff8:	cmp	r1, #0
   17ffc:	ldrne	r2, [r8, #40]	; 0x28
   18000:	cmpne	r2, #0
   18004:	beq	1a9c0 <__assert_fail@plt+0x9260>
   18008:	ldr	r3, [r8, #44]	; 0x2c
   1800c:	cmp	r3, #0
   18010:	ldrne	r7, [r8, #48]	; 0x30
   18014:	cmpne	r7, #0
   18018:	beq	1a9c0 <__assert_fail@plt+0x9260>
   1801c:	ldr	r1, [r1, #8]
   18020:	ldr	r7, [sl, #20]
   18024:	cmp	r1, #0
   18028:	bne	18038 <__assert_fail@plt+0x68d8>
   1802c:	ldr	r1, [r2, #8]
   18030:	cmp	r1, #0
   18034:	beq	19bc0 <__assert_fail@plt+0x8460>
   18038:	str	r0, [sp, #76]	; 0x4c
   1803c:	ldr	r0, [sp, #32]
   18040:	ldr	r1, [fp, #16]
   18044:	subs	lr, r1, r0
   18048:	mov	r0, #1
   1804c:	str	r0, [sp, #44]	; 0x2c
   18050:	bne	18064 <__assert_fail@plt+0x6904>
   18054:	ldr	r0, [r8, #76]	; 0x4c
   18058:	cmp	r0, #0
   1805c:	movwne	r0, #1
   18060:	str	r0, [sp, #44]	; 0x2c
   18064:	ldr	r0, [sl, #12]
   18068:	ldr	r2, [r8, #92]	; 0x5c
   1806c:	ldr	r3, [sp, #100]	; 0x64
   18070:	ldr	r1, [r8, #8]
   18074:	str	r7, [sp, #168]	; 0xa8
   18078:	str	sl, [sp, #80]	; 0x50
   1807c:	str	r3, [sp, #104]	; 0x68
   18080:	str	r2, [sp, #184]	; 0xb8
   18084:	ubfx	r3, r0, #22, #1
   18088:	and	r0, r0, #4194304	; 0x400000
   1808c:	ldr	r4, [sp, #68]	; 0x44
   18090:	add	r5, r1, #1
   18094:	orrs	sl, r7, r0
   18098:	strb	r3, [sp, #176]	; 0xb0
   1809c:	add	r3, sp, #104	; 0x68
   180a0:	movwne	sl, #1
   180a4:	add	r3, r3, #44	; 0x2c
   180a8:	cmp	r2, r5
   180ac:	strb	sl, [sp, #179]	; 0xb3
   180b0:	movgt	r5, r2
   180b4:	ldrb	r0, [r8, #88]	; 0x58
   180b8:	vdup.32	q8, r4
   180bc:	vst1.32	{d16-d17}, [r3]
   180c0:	ubfx	r3, r0, #3, #1
   180c4:	strb	r3, [sp, #178]	; 0xb2
   180c8:	ubfx	r0, r0, #2, #1
   180cc:	str	r8, [sp, #96]	; 0x60
   180d0:	str	ip, [sp, #88]	; 0x58
   180d4:	str	r7, [sp, #84]	; 0x54
   180d8:	strb	r0, [sp, #177]	; 0xb1
   180dc:	add	r0, r4, #1
   180e0:	cmp	r0, r5
   180e4:	movlt	r5, r0
   180e8:	cmp	r2, #2
   180ec:	blt	18128 <__assert_fail@plt+0x69c8>
   180f0:	mov	r9, #12
   180f4:	cmn	r5, #-1073741823	; 0xc0000001
   180f8:	bhi	1a96c <__assert_fail@plt+0x920c>
   180fc:	lsl	r1, r5, #2
   18100:	mov	r0, #0
   18104:	mov	r4, lr
   18108:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1810c:	ldr	r7, [sp, #84]	; 0x54
   18110:	ldr	ip, [sp, #88]	; 0x58
   18114:	cmp	r0, #0
   18118:	beq	1a96c <__assert_fail@plt+0x920c>
   1811c:	ldr	r8, [sp, #96]	; 0x60
   18120:	mov	lr, r4
   18124:	str	r0, [sp, #112]	; 0x70
   18128:	cmp	sl, #0
   1812c:	ldr	sl, [sp, #80]	; 0x50
   18130:	mov	r4, #1
   18134:	beq	18164 <__assert_fail@plt+0x6a04>
   18138:	mov	r0, #0
   1813c:	mov	r1, r5
   18140:	mov	r9, lr
   18144:	mov	r4, #0
   18148:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1814c:	cmp	r0, #0
   18150:	beq	1a798 <__assert_fail@plt+0x9038>
   18154:	ldr	ip, [sp, #88]	; 0x58
   18158:	ldr	r7, [sp, #84]	; 0x54
   1815c:	mov	lr, r9
   18160:	str	r0, [sp, #108]	; 0x6c
   18164:	add	r1, r8, #96	; 0x60
   18168:	str	r5, [sp, #140]	; 0x8c
   1816c:	ldr	r0, [fp, #12]
   18170:	cmp	r4, #0
   18174:	str	r1, [sp, #172]	; 0xac
   18178:	ldrb	r1, [r8, #88]	; 0x58
   1817c:	ubfx	r1, r1, #4, #1
   18180:	strb	r1, [sp, #182]	; 0xb6
   18184:	mov	r1, #0
   18188:	beq	181a4 <__assert_fail@plt+0x6a44>
   1818c:	ldr	r1, [sp, #100]	; 0x64
   18190:	str	r1, [sp, #108]	; 0x6c
   18194:	ldr	r1, [r8, #92]	; 0x5c
   18198:	cmp	r1, #1
   1819c:	ldr	r1, [sp, #68]	; 0x44
   181a0:	movwgt	r1, #0
   181a4:	str	r1, [sp, #136]	; 0x88
   181a8:	str	r1, [sp, #132]	; 0x84
   181ac:	str	r0, [sp, #160]	; 0xa0
   181b0:	str	r0, [sp, #156]	; 0x9c
   181b4:	str	lr, [sp, #92]	; 0x5c
   181b8:	ldrb	r0, [sl, #28]
   181bc:	lsr	r0, r0, #7
   181c0:	strb	r0, [sp, #181]	; 0xb5
   181c4:	mvn	r0, #0
   181c8:	ldr	r8, [r8, #76]	; 0x4c
   181cc:	str	r0, [sp, #196]	; 0xc4
   181d0:	ldr	r0, [fp, #24]
   181d4:	lsl	sl, r8, #1
   181d8:	cmp	r8, #1
   181dc:	str	r0, [sp, #192]	; 0xc0
   181e0:	blt	18238 <__assert_fail@plt+0x6ad8>
   181e4:	movw	r0, #43690	; 0xaaaa
   181e8:	mov	r9, #12
   181ec:	movt	r0, #2730	; 0xaaa
   181f0:	cmp	sl, r0
   181f4:	bhi	1a96c <__assert_fail@plt+0x920c>
   181f8:	add	r0, r8, r8, lsl #1
   181fc:	mov	r4, r5
   18200:	lsl	r0, r0, #4
   18204:	bl	2a8ac <__assert_fail@plt+0x1914c>
   18208:	mov	r5, r0
   1820c:	str	r0, [sp, #220]	; 0xdc
   18210:	lsl	r0, r8, #3
   18214:	bl	2a8ac <__assert_fail@plt+0x1914c>
   18218:	cmp	r0, #0
   1821c:	str	r0, [sp, #236]	; 0xec
   18220:	beq	1a96c <__assert_fail@plt+0x920c>
   18224:	add	lr, sp, #84	; 0x54
   18228:	cmp	r5, #0
   1822c:	mov	r5, r4
   18230:	ldm	lr, {r7, ip, lr}
   18234:	beq	1a96c <__assert_fail@plt+0x920c>
   18238:	mov	r0, #1
   1823c:	cmp	lr, #1
   18240:	str	r0, [sp, #224]	; 0xe0
   18244:	str	sl, [sp, #216]	; 0xd8
   18248:	str	sl, [sp, #232]	; 0xe8
   1824c:	bhi	18260 <__assert_fail@plt+0x6b00>
   18250:	ldr	r0, [sp, #96]	; 0x60
   18254:	ldrb	r0, [r0, #88]	; 0x58
   18258:	tst	r0, #2
   1825c:	beq	1828c <__assert_fail@plt+0x6b2c>
   18260:	mov	r9, #12
   18264:	cmn	r5, #-1073741822	; 0xc0000002
   18268:	bhi	1a96c <__assert_fail@plt+0x920c>
   1826c:	mov	r0, #4
   18270:	add	r0, r0, r5, lsl #2
   18274:	bl	2a8ac <__assert_fail@plt+0x1914c>
   18278:	ldr	r7, [sp, #84]	; 0x54
   1827c:	ldr	ip, [sp, #88]	; 0x58
   18280:	cmp	r0, #0
   18284:	str	r0, [sp, #204]	; 0xcc
   18288:	beq	1a96c <__assert_fail@plt+0x920c>
   1828c:	ldr	r1, [fp, #24]
   18290:	ldr	r2, [sp, #76]	; 0x4c
   18294:	str	r6, [fp, #-200]	; 0xffffff38
   18298:	mov	r8, #1
   1829c:	mov	r5, r6
   182a0:	mov	r0, #4
   182a4:	tst	r1, #1
   182a8:	mov	r1, #4
   182ac:	mov	r4, r2
   182b0:	movweq	r1, #6
   182b4:	cmp	r2, r6
   182b8:	str	r1, [sp, #164]	; 0xa4
   182bc:	ldr	r1, [sp, #96]	; 0x60
   182c0:	mvnlt	r8, #0
   182c4:	movlt	r4, r6
   182c8:	movlt	r5, r2
   182cc:	cmp	ip, #0
   182d0:	ldr	r1, [r1, #92]	; 0x5c
   182d4:	str	r1, [sp, #60]	; 0x3c
   182d8:	beq	1831c <__assert_fail@plt+0x6bbc>
   182dc:	cmp	r1, #1
   182e0:	beq	18300 <__assert_fail@plt+0x6ba0>
   182e4:	ldr	r0, [sp, #80]	; 0x50
   182e8:	ldr	r0, [r0, #12]
   182ec:	and	r0, r0, #4194304	; 0x400000
   182f0:	orr	r0, r7, r0
   182f4:	clz	r0, r0
   182f8:	lsr	r0, r0, #5
   182fc:	lsl	r0, r0, #2
   18300:	cmp	r7, #0
   18304:	mov	r1, r7
   18308:	movwne	r1, #1
   1830c:	cmp	r2, r6
   18310:	orrge	r1, r1, #2
   18314:	orr	r0, r1, r0
   18318:	b	18320 <__assert_fail@plt+0x6bc0>
   1831c:	mov	r0, #8
   18320:	add	r1, sp, #104	; 0x68
   18324:	cmp	r2, r6
   18328:	sub	r0, r0, #4
   1832c:	str	r4, [sp, #52]	; 0x34
   18330:	str	r5, [sp, #48]	; 0x30
   18334:	str	r8, [sp, #64]	; 0x40
   18338:	add	r1, r1, #32
   1833c:	str	r0, [sp, #76]	; 0x4c
   18340:	str	r1, [sp, #24]
   18344:	sub	r1, fp, #200	; 0xc8
   18348:	movwlt	r1, #0
   1834c:	cmp	r1, #0
   18350:	str	r1, [sp, #36]	; 0x24
   18354:	movwne	r1, #1
   18358:	str	r1, [sp, #40]	; 0x28
   1835c:	sub	r1, fp, #192	; 0xc0
   18360:	add	r1, r1, #16
   18364:	str	r1, [sp, #28]
   18368:	b	18a38 <__assert_fail@plt+0x72d8>
   1836c:	mov	r1, #0
   18370:	sub	r0, fp, #188	; 0xbc
   18374:	str	r8, [fp, #-192]	; 0xffffff40
   18378:	stm	r0, {r1, r6, sl}
   1837c:	ldr	r0, [sp, #28]
   18380:	str	r1, [r0]
   18384:	str	r1, [r0, #4]
   18388:	str	r1, [r0, #8]
   1838c:	add	r0, sp, #104	; 0x68
   18390:	sub	r1, fp, #192	; 0xc0
   18394:	bl	25ae0 <__assert_fail@plt+0x14380>
   18398:	mov	r9, r0
   1839c:	mov	r0, #0
   183a0:	bl	141c4 <__assert_fail@plt+0x2a64>
   183a4:	cmp	r9, #0
   183a8:	bne	184a8 <__assert_fail@plt+0x6d48>
   183ac:	ldr	r0, [r8]
   183b0:	mov	r4, #0
   183b4:	cmp	r0, #0
   183b8:	beq	18868 <__assert_fail@plt+0x7108>
   183bc:	b	199e8 <__assert_fail@plt+0x8288>
   183c0:	mov	r9, r0
   183c4:	b	199d8 <__assert_fail@plt+0x8278>
   183c8:	sxtb	r0, r0
   183cc:	cmn	r0, #1
   183d0:	ble	18428 <__assert_fail@plt+0x6cc8>
   183d4:	ldr	r0, [sp, #44]	; 0x2c
   183d8:	mov	lr, #1
   183dc:	mov	r9, sl
   183e0:	cmp	r0, #0
   183e4:	bne	18db4 <__assert_fail@plt+0x7654>
   183e8:	mov	r9, sl
   183ec:	ldr	r8, [sp, #64]	; 0x40
   183f0:	mov	sl, r5
   183f4:	cmn	r9, #1
   183f8:	beq	1887c <__assert_fail@plt+0x711c>
   183fc:	b	196c0 <__assert_fail@plt+0x7f60>
   18400:	ldr	r0, [r8, #8]
   18404:	cmp	r0, #1
   18408:	blt	189ac <__assert_fail@plt+0x724c>
   1840c:	ldr	r4, [sp, #188]	; 0xbc
   18410:	mov	r9, #0
   18414:	b	18918 <__assert_fail@plt+0x71b8>
   18418:	ldr	r0, [sp, #192]	; 0xc0
   1841c:	and	r0, r0, #2
   18420:	eor	r3, r0, #10
   18424:	b	19740 <__assert_fail@plt+0x7fe0>
   18428:	cmn	sl, #1
   1842c:	ble	1846c <__assert_fail@plt+0x6d0c>
   18430:	ldr	r0, [sp, #152]	; 0x98
   18434:	cmp	r0, sl
   18438:	beq	189f0 <__assert_fail@plt+0x7290>
   1843c:	ldr	r0, [sp, #184]	; 0xb8
   18440:	cmp	r0, #2
   18444:	blt	18474 <__assert_fail@plt+0x6d14>
   18448:	ldr	r0, [sp, #112]	; 0x70
   1844c:	mov	r1, sl
   18450:	ldr	r4, [r0, r1, lsl #2]
   18454:	cmn	r4, #1
   18458:	bne	184f0 <__assert_fail@plt+0x6d90>
   1845c:	sub	r2, r1, #1
   18460:	cmp	r1, #0
   18464:	mov	r1, r2
   18468:	bgt	18450 <__assert_fail@plt+0x6cf0>
   1846c:	ldr	r3, [sp, #164]	; 0xa4
   18470:	b	18514 <__assert_fail@plt+0x6db4>
   18474:	ldr	r0, [sp, #108]	; 0x6c
   18478:	ldr	r1, [sp, #172]	; 0xac
   1847c:	mov	r3, #1
   18480:	ldrb	r0, [r0, sl]
   18484:	ubfx	r2, r0, #5, #3
   18488:	ldr	r1, [r1, r2, lsl #2]
   1848c:	and	r2, r0, #31
   18490:	tst	r1, r3, lsl r2
   18494:	bne	18514 <__assert_fail@plt+0x6db4>
   18498:	mov	r3, #0
   1849c:	cmp	r0, #10
   184a0:	beq	18508 <__assert_fail@plt+0x6da8>
   184a4:	b	18514 <__assert_fail@plt+0x6db4>
   184a8:	mov	r0, #0
   184ac:	str	r0, [sp, #56]	; 0x38
   184b0:	b	188bc <__assert_fail@plt+0x715c>
   184b4:	mov	r0, r4
   184b8:	bl	1164c <iswalnum@plt>
   184bc:	mov	r3, #1
   184c0:	cmp	r4, #95	; 0x5f
   184c4:	beq	197b4 <__assert_fail@plt+0x8054>
   184c8:	cmp	r0, #0
   184cc:	beq	1979c <__assert_fail@plt+0x803c>
   184d0:	b	197b4 <__assert_fail@plt+0x8054>
   184d4:	mov	r0, r5
   184d8:	bl	1164c <iswalnum@plt>
   184dc:	cmp	r5, #95	; 0x5f
   184e0:	beq	18d68 <__assert_fail@plt+0x7608>
   184e4:	cmp	r0, #0
   184e8:	beq	18ccc <__assert_fail@plt+0x756c>
   184ec:	b	18d68 <__assert_fail@plt+0x7608>
   184f0:	ldrb	r0, [sp, #182]	; 0xb6
   184f4:	cmp	r0, #0
   184f8:	bne	18a00 <__assert_fail@plt+0x72a0>
   184fc:	mov	r3, #0
   18500:	cmp	r4, #10
   18504:	bne	18514 <__assert_fail@plt+0x6db4>
   18508:	ldrb	r3, [sp, #181]	; 0xb5
   1850c:	cmp	r3, #0
   18510:	movwne	r3, #2
   18514:	ldr	r0, [r8, #8]
   18518:	cmp	r0, #1
   1851c:	blt	185c8 <__assert_fail@plt+0x6e68>
   18520:	ldr	r6, [sp, #188]	; 0xbc
   18524:	str	r7, [sp, #16]
   18528:	ldr	r7, [r8, #12]
   1852c:	str	sl, [sp, #20]
   18530:	and	ip, r3, #8
   18534:	and	sl, r3, #2
   18538:	and	r3, r3, #1
   1853c:	mov	r2, #0
   18540:	ldr	r6, [r6]
   18544:	ldr	r1, [r7, r2, lsl #2]
   18548:	add	r4, r6, r1, lsl #3
   1854c:	mov	lr, r1
   18550:	ldr	r4, [r4, #4]
   18554:	uxtb	r1, r4
   18558:	cmp	r1, #2
   1855c:	bne	185ac <__assert_fail@plt+0x6e4c>
   18560:	movw	r1, #65280	; 0xff00
   18564:	movt	r1, #3
   18568:	tst	r4, r1
   1856c:	beq	185d0 <__assert_fail@plt+0x6e70>
   18570:	cmp	r3, #0
   18574:	bne	18580 <__assert_fail@plt+0x6e20>
   18578:	ands	r1, r4, #1024	; 0x400
   1857c:	bne	185ac <__assert_fail@plt+0x6e4c>
   18580:	cmp	r3, #0
   18584:	andsne	r1, r4, #2048	; 0x800
   18588:	bne	185ac <__assert_fail@plt+0x6e4c>
   1858c:	cmp	sl, #0
   18590:	bne	1859c <__assert_fail@plt+0x6e3c>
   18594:	ands	r1, r4, #8192	; 0x2000
   18598:	bne	185ac <__assert_fail@plt+0x6e4c>
   1859c:	cmp	ip, #0
   185a0:	bne	185d0 <__assert_fail@plt+0x6e70>
   185a4:	ands	r1, r4, #32768	; 0x8000
   185a8:	beq	185d0 <__assert_fail@plt+0x6e70>
   185ac:	add	r2, r2, #1
   185b0:	mov	lr, #0
   185b4:	cmp	r2, r0
   185b8:	blt	18544 <__assert_fail@plt+0x6de4>
   185bc:	ldr	sl, [sp, #20]
   185c0:	ldr	r7, [sp, #16]
   185c4:	b	18db4 <__assert_fail@plt+0x7654>
   185c8:	mov	lr, #0
   185cc:	b	18db4 <__assert_fail@plt+0x7654>
   185d0:	ldr	sl, [sp, #20]
   185d4:	ldr	r1, [sp, #44]	; 0x2c
   185d8:	clz	r0, lr
   185dc:	ldr	r7, [sp, #16]
   185e0:	cmp	lr, #0
   185e4:	lsr	r0, r0, #5
   185e8:	movwne	lr, #1
   185ec:	mov	r9, sl
   185f0:	orr	r0, r1, r0
   185f4:	mvneq	r9, #0
   185f8:	cmp	r0, #0
   185fc:	beq	183e8 <__assert_fail@plt+0x6c88>
   18600:	b	18db4 <__assert_fail@plt+0x7654>
   18604:	ldr	r3, [sp, #164]	; 0xa4
   18608:	movw	r9, #65280	; 0xff00
   1860c:	movt	r9, #3
   18610:	b	18754 <__assert_fail@plt+0x6ff4>
   18614:	ldr	r0, [sp, #192]	; 0xc0
   18618:	and	r0, r0, #2
   1861c:	eor	r3, r0, #10
   18620:	b	18754 <__assert_fail@plt+0x6ff4>
   18624:	mov	r0, r7
   18628:	bl	1164c <iswalnum@plt>
   1862c:	mov	r3, #1
   18630:	cmp	r7, #95	; 0x5f
   18634:	beq	18608 <__assert_fail@plt+0x6ea8>
   18638:	movw	r9, #65280	; 0xff00
   1863c:	cmp	r0, #0
   18640:	movt	r9, #3
   18644:	beq	1873c <__assert_fail@plt+0x6fdc>
   18648:	b	18754 <__assert_fail@plt+0x6ff4>
   1864c:	ldr	r1, [r4]
   18650:	cmp	r1, #0
   18654:	bne	19934 <__assert_fail@plt+0x81d4>
   18658:	cmp	sl, #1
   1865c:	blt	18868 <__assert_fail@plt+0x7108>
   18660:	ldr	r0, [sp, #204]	; 0xcc
   18664:	str	r4, [sp, #56]	; 0x38
   18668:	lsl	r4, sl, #2
   1866c:	mov	r5, sl
   18670:	sub	r0, r0, #4
   18674:	ldr	r6, [r0, r5, lsl #2]
   18678:	cmp	r6, #0
   1867c:	ldrbne	r1, [r6, #52]	; 0x34
   18680:	tstne	r1, #16
   18684:	bne	186a0 <__assert_fail@plt+0x6f40>
   18688:	sub	r5, r5, #1
   1868c:	sub	r4, r4, #4
   18690:	add	r1, r5, #1
   18694:	cmp	r1, #2
   18698:	bge	18674 <__assert_fail@plt+0x6f14>
   1869c:	b	18864 <__assert_fail@plt+0x7104>
   186a0:	cmp	r5, #0
   186a4:	ble	18604 <__assert_fail@plt+0x6ea4>
   186a8:	ldr	r0, [sp, #152]	; 0x98
   186ac:	movw	r9, #65280	; 0xff00
   186b0:	movt	r9, #3
   186b4:	add	r0, r0, #1
   186b8:	cmp	r0, r5
   186bc:	beq	18614 <__assert_fail@plt+0x6eb4>
   186c0:	ldr	r0, [sp, #184]	; 0xb8
   186c4:	cmp	r0, #2
   186c8:	blt	186f8 <__assert_fail@plt+0x6f98>
   186cc:	ldr	r0, [sp, #112]	; 0x70
   186d0:	mov	r1, r5
   186d4:	sub	r0, r0, #4
   186d8:	ldr	r7, [r0, r1, lsl #2]
   186dc:	cmn	r7, #1
   186e0:	bne	18730 <__assert_fail@plt+0x6fd0>
   186e4:	sub	r1, r1, #1
   186e8:	cmp	r1, #0
   186ec:	bgt	186d8 <__assert_fail@plt+0x6f78>
   186f0:	ldr	r3, [sp, #164]	; 0xa4
   186f4:	b	18754 <__assert_fail@plt+0x6ff4>
   186f8:	ldr	r0, [sp, #108]	; 0x6c
   186fc:	ldr	r1, [sp, #172]	; 0xac
   18700:	mov	r3, #1
   18704:	add	r0, r0, r5
   18708:	ldrb	r0, [r0, #-1]
   1870c:	ubfx	r2, r0, #5, #3
   18710:	ldr	r1, [r1, r2, lsl #2]
   18714:	and	r2, r0, #31
   18718:	tst	r1, r3, lsl r2
   1871c:	bne	18754 <__assert_fail@plt+0x6ff4>
   18720:	mov	r3, #0
   18724:	cmp	r0, #10
   18728:	beq	18748 <__assert_fail@plt+0x6fe8>
   1872c:	b	18754 <__assert_fail@plt+0x6ff4>
   18730:	ldrb	r0, [sp, #182]	; 0xb6
   18734:	cmp	r0, #0
   18738:	bne	18624 <__assert_fail@plt+0x6ec4>
   1873c:	mov	r3, #0
   18740:	cmp	r7, #10
   18744:	bne	18754 <__assert_fail@plt+0x6ff4>
   18748:	ldrb	r3, [sp, #181]	; 0xb5
   1874c:	cmp	r3, #0
   18750:	movwne	r3, #2
   18754:	ldr	r0, [r6, #8]
   18758:	sub	sl, r5, #1
   1875c:	cmp	r0, #1
   18760:	blt	187f8 <__assert_fail@plt+0x7098>
   18764:	and	r1, r3, #8
   18768:	ldr	r7, [r6, #12]
   1876c:	and	lr, r3, #1
   18770:	mov	r2, #0
   18774:	str	r1, [sp, #16]
   18778:	and	r1, r3, #2
   1877c:	str	r1, [sp, #20]
   18780:	ldr	r1, [sp, #188]	; 0xbc
   18784:	ldr	r1, [r1]
   18788:	ldr	r6, [r7, r2, lsl #2]
   1878c:	add	r3, r1, r6, lsl #3
   18790:	ldr	ip, [r3, #4]
   18794:	uxtb	r3, ip
   18798:	cmp	r3, #2
   1879c:	bne	187ec <__assert_fail@plt+0x708c>
   187a0:	tst	ip, r9
   187a4:	beq	187fc <__assert_fail@plt+0x709c>
   187a8:	cmp	lr, #0
   187ac:	bne	187b8 <__assert_fail@plt+0x7058>
   187b0:	ands	r3, ip, #1024	; 0x400
   187b4:	bne	187ec <__assert_fail@plt+0x708c>
   187b8:	cmp	lr, #0
   187bc:	andsne	r3, ip, #2048	; 0x800
   187c0:	bne	187ec <__assert_fail@plt+0x708c>
   187c4:	ldr	r3, [sp, #20]
   187c8:	cmp	r3, #0
   187cc:	bne	187d8 <__assert_fail@plt+0x7078>
   187d0:	ands	r3, ip, #8192	; 0x2000
   187d4:	bne	187ec <__assert_fail@plt+0x708c>
   187d8:	ldr	r3, [sp, #16]
   187dc:	cmp	r3, #0
   187e0:	bne	187fc <__assert_fail@plt+0x709c>
   187e4:	ands	r3, ip, #32768	; 0x8000
   187e8:	beq	187fc <__assert_fail@plt+0x709c>
   187ec:	add	r2, r2, #1
   187f0:	cmp	r2, r0
   187f4:	blt	18788 <__assert_fail@plt+0x7028>
   187f8:	mov	r6, #0
   187fc:	ldr	r0, [sp, #56]	; 0x38
   18800:	mov	r2, r4
   18804:	mov	r1, #0
   18808:	mov	r4, r0
   1880c:	bl	11670 <memset@plt>
   18810:	sub	r0, fp, #188	; 0xbc
   18814:	str	r8, [fp, #-192]	; 0xffffff40
   18818:	mov	r1, #0
   1881c:	stm	r0, {r4, r6, sl}
   18820:	ldr	r0, [sp, #28]
   18824:	str	r1, [r0]
   18828:	str	r1, [r0, #4]
   1882c:	str	r1, [r0, #8]
   18830:	add	r0, sp, #104	; 0x68
   18834:	sub	r1, fp, #192	; 0xc0
   18838:	bl	25ae0 <__assert_fail@plt+0x14380>
   1883c:	mov	r9, r0
   18840:	mov	r0, #0
   18844:	bl	141c4 <__assert_fail@plt+0x2a64>
   18848:	cmp	r9, #0
   1884c:	bne	188b8 <__assert_fail@plt+0x7158>
   18850:	ldr	r0, [r8]
   18854:	cmp	r0, #0
   18858:	beq	1864c <__assert_fail@plt+0x6eec>
   1885c:	sub	sl, r5, #1
   18860:	b	19934 <__assert_fail@plt+0x81d4>
   18864:	ldr	r4, [sp, #56]	; 0x38
   18868:	mov	r0, r8
   1886c:	bl	141c4 <__assert_fail@plt+0x2a64>
   18870:	mov	r0, r4
   18874:	bl	141c4 <__assert_fail@plt+0x2a64>
   18878:	ldr	r8, [sp, #64]	; 0x40
   1887c:	add	r0, sp, #104	; 0x68
   18880:	bl	21d18 <__assert_fail@plt+0x105b8>
   18884:	ldr	r0, [fp, #-200]	; 0xffffff38
   18888:	ldr	r5, [sp, #48]	; 0x30
   1888c:	ldr	r4, [sp, #52]	; 0x34
   18890:	mov	r9, #1
   18894:	add	r6, r0, r8
   18898:	cmp	r6, r5
   1889c:	str	r6, [fp, #-200]	; 0xffffff38
   188a0:	blt	1a96c <__assert_fail@plt+0x920c>
   188a4:	ldr	ip, [sp, #88]	; 0x58
   188a8:	ldr	r7, [sp, #84]	; 0x54
   188ac:	cmp	r4, r6
   188b0:	bge	18a38 <__assert_fail@plt+0x72d8>
   188b4:	b	1a96c <__assert_fail@plt+0x920c>
   188b8:	str	r4, [sp, #56]	; 0x38
   188bc:	mov	r0, r8
   188c0:	bl	141c4 <__assert_fail@plt+0x2a64>
   188c4:	ldr	r0, [sp, #56]	; 0x38
   188c8:	bl	141c4 <__assert_fail@plt+0x2a64>
   188cc:	ldr	r8, [sp, #96]	; 0x60
   188d0:	ldr	sl, [sp, #92]	; 0x5c
   188d4:	ldr	r5, [sp, #80]	; 0x50
   188d8:	cmp	r9, #0
   188dc:	sub	r6, fp, #48	; 0x30
   188e0:	beq	19a1c <__assert_fail@plt+0x82bc>
   188e4:	ldr	r8, [sp, #64]	; 0x40
   188e8:	cmp	r9, #1
   188ec:	beq	1887c <__assert_fail@plt+0x711c>
   188f0:	b	1a96c <__assert_fail@plt+0x920c>
   188f4:	ldr	r0, [sp, #236]	; 0xec
   188f8:	lsl	r1, r7, #3
   188fc:	bl	2a8dc <__assert_fail@plt+0x1917c>
   18900:	cmp	r0, #0
   18904:	beq	189e4 <__assert_fail@plt+0x7284>
   18908:	str	r0, [sp, #236]	; 0xec
   1890c:	lsl	r0, r7, #1
   18910:	str	r0, [sp, #232]	; 0xe8
   18914:	b	18960 <__assert_fail@plt+0x7200>
   18918:	ldr	r1, [r8, #12]
   1891c:	ldr	r6, [r1, r9, lsl #2]
   18920:	ldr	r1, [r4]
   18924:	add	r2, r1, r6, lsl #3
   18928:	ldrb	r2, [r2, #4]
   1892c:	cmp	r2, #8
   18930:	bne	189a0 <__assert_fail@plt+0x7240>
   18934:	ldr	r1, [r1, r6, lsl #3]
   18938:	cmp	r1, #31
   1893c:	bgt	189a0 <__assert_fail@plt+0x7240>
   18940:	ldr	r2, [r4, #80]	; 0x50
   18944:	mov	r3, #1
   18948:	tst	r2, r3, lsl r1
   1894c:	beq	189a0 <__assert_fail@plt+0x7240>
   18950:	ldr	r7, [sp, #228]	; 0xe4
   18954:	ldr	r0, [sp, #232]	; 0xe8
   18958:	cmp	r7, r0
   1895c:	beq	188f4 <__assert_fail@plt+0x7194>
   18960:	mov	r0, #1
   18964:	mov	r1, #24
   18968:	bl	2a858 <__assert_fail@plt+0x190f8>
   1896c:	ldr	r1, [sp, #228]	; 0xe4
   18970:	ldr	r2, [sp, #236]	; 0xec
   18974:	str	r0, [r2, r1, lsl #2]
   18978:	ldr	r0, [sp, #236]	; 0xec
   1897c:	ldr	r0, [r0, r1, lsl #2]
   18980:	cmp	r0, #0
   18984:	beq	189e4 <__assert_fail@plt+0x7284>
   18988:	add	r1, r1, #1
   1898c:	str	r6, [r0, #4]
   18990:	str	r1, [sp, #228]	; 0xe4
   18994:	mov	r1, #0
   18998:	str	r1, [r0]
   1899c:	ldr	r0, [r8, #8]
   189a0:	add	r9, r9, #1
   189a4:	cmp	r9, r0
   189a8:	blt	18918 <__assert_fail@plt+0x71b8>
   189ac:	mov	r7, #0
   189b0:	str	r7, [fp, #-196]	; 0xffffff3c
   189b4:	ldrb	r0, [r8, #52]	; 0x34
   189b8:	tst	r0, #64	; 0x40
   189bc:	beq	18da0 <__assert_fail@plt+0x7640>
   189c0:	add	r1, r8, #4
   189c4:	add	r0, sp, #104	; 0x68
   189c8:	bl	21ebc <__assert_fail@plt+0x1075c>
   189cc:	mov	r7, #0
   189d0:	cmp	r0, #0
   189d4:	str	r0, [fp, #-196]	; 0xffffff3c
   189d8:	beq	18da0 <__assert_fail@plt+0x7640>
   189dc:	mov	r9, r0
   189e0:	b	183ec <__assert_fail@plt+0x6c8c>
   189e4:	mov	r9, #12
   189e8:	mov	sl, r5
   189ec:	b	196c8 <__assert_fail@plt+0x7f68>
   189f0:	ldr	r0, [sp, #192]	; 0xc0
   189f4:	and	r0, r0, #2
   189f8:	eor	r3, r0, #10
   189fc:	b	18514 <__assert_fail@plt+0x6db4>
   18a00:	mov	r0, r4
   18a04:	mov	r6, r7
   18a08:	bl	1164c <iswalnum@plt>
   18a0c:	mov	r3, #1
   18a10:	cmp	r4, #95	; 0x5f
   18a14:	beq	18a2c <__assert_fail@plt+0x72cc>
   18a18:	ldr	r5, [sp, #92]	; 0x5c
   18a1c:	cmp	r0, #0
   18a20:	mov	r7, r6
   18a24:	beq	184fc <__assert_fail@plt+0x6d9c>
   18a28:	b	18514 <__assert_fail@plt+0x6db4>
   18a2c:	ldr	r5, [sp, #92]	; 0x5c
   18a30:	mov	r7, r6
   18a34:	b	18514 <__assert_fail@plt+0x6db4>
   18a38:	ldr	r1, [sp, #76]	; 0x4c
   18a3c:	cmp	r1, #4
   18a40:	bhi	18b44 <__assert_fail@plt+0x73e4>
   18a44:	add	r0, pc, #0
   18a48:	ldr	pc, [r0, r1, lsl #2]
   18a4c:	andeq	r8, r1, r0, ror #20
   18a50:	andeq	r8, r1, r0, ror #20
   18a54:	andeq	r8, r1, ip, lsr #21
   18a58:	ldrdeq	r8, [r1], -ip
   18a5c:	andeq	r8, r1, ip, asr #23
   18a60:	mov	r9, #1
   18a64:	cmp	r6, r5
   18a68:	blt	1a96c <__assert_fail@plt+0x920c>
   18a6c:	ldr	r1, [sp, #68]	; 0x44
   18a70:	mov	r0, #0
   18a74:	cmp	r6, r1
   18a78:	ldrlt	r0, [sp, #100]	; 0x64
   18a7c:	ldrblt	r0, [r0, r6]
   18a80:	cmp	r7, #0
   18a84:	ldrbne	r0, [r7, r0]
   18a88:	ldrb	r0, [ip, r0]
   18a8c:	cmp	r0, #0
   18a90:	bne	18bcc <__assert_fail@plt+0x746c>
   18a94:	sub	r0, r6, #1
   18a98:	cmp	r6, r5
   18a9c:	mov	r6, r0
   18aa0:	str	r0, [fp, #-200]	; 0xffffff38
   18aa4:	bgt	18a70 <__assert_fail@plt+0x7310>
   18aa8:	b	1a96c <__assert_fail@plt+0x920c>
   18aac:	ldr	r1, [sp, #100]	; 0x64
   18ab0:	cmp	r6, r4
   18ab4:	bge	18b0c <__assert_fail@plt+0x73ac>
   18ab8:	ldrb	r0, [r1, r6]
   18abc:	ldrb	r0, [ip, r0]
   18ac0:	cmp	r0, #0
   18ac4:	bne	18b0c <__assert_fail@plt+0x73ac>
   18ac8:	add	r6, r6, #1
   18acc:	cmp	r6, r4
   18ad0:	str	r6, [fp, #-200]	; 0xffffff38
   18ad4:	blt	18ab8 <__assert_fail@plt+0x7358>
   18ad8:	b	18b0c <__assert_fail@plt+0x73ac>
   18adc:	cmp	r6, r4
   18ae0:	bge	18b0c <__assert_fail@plt+0x73ac>
   18ae4:	ldr	r1, [sp, #100]	; 0x64
   18ae8:	ldrb	r0, [r1, r6]
   18aec:	ldrb	r0, [r7, r0]
   18af0:	ldrb	r0, [ip, r0]
   18af4:	cmp	r0, #0
   18af8:	bne	18b0c <__assert_fail@plt+0x73ac>
   18afc:	add	r6, r6, #1
   18b00:	cmp	r6, r4
   18b04:	str	r6, [fp, #-200]	; 0xffffff38
   18b08:	blt	18ae8 <__assert_fail@plt+0x7388>
   18b0c:	cmp	r6, r4
   18b10:	bne	18bcc <__assert_fail@plt+0x746c>
   18b14:	ldr	r1, [sp, #68]	; 0x44
   18b18:	mov	r0, #0
   18b1c:	mov	r6, r4
   18b20:	cmp	r4, r1
   18b24:	ldr	r1, [sp, #100]	; 0x64
   18b28:	ldrblt	r0, [r1, r4]
   18b2c:	cmp	r7, #0
   18b30:	ldrbne	r0, [r7, r0]
   18b34:	ldrb	r0, [ip, r0]
   18b38:	cmp	r0, #0
   18b3c:	bne	18bcc <__assert_fail@plt+0x746c>
   18b40:	b	1ab14 <__assert_fail@plt+0x93b4>
   18b44:	ldr	r0, [sp, #128]	; 0x80
   18b48:	ldr	r2, [sp, #136]	; 0x88
   18b4c:	sub	r1, r6, r0
   18b50:	cmp	r1, r2
   18b54:	bcs	18b98 <__assert_fail@plt+0x7438>
   18b58:	ldr	r3, [sp, #132]	; 0x84
   18b5c:	mov	r2, #0
   18b60:	cmp	r1, r3
   18b64:	ldrcc	r2, [sp, #108]	; 0x6c
   18b68:	ldrbcc	r2, [r2, r1]
   18b6c:	ldrb	r1, [ip, r2]
   18b70:	cmp	r1, #0
   18b74:	bne	18bcc <__assert_fail@plt+0x746c>
   18b78:	add	r6, r6, r8
   18b7c:	mov	r9, #1
   18b80:	cmp	r6, r5
   18b84:	str	r6, [fp, #-200]	; 0xffffff38
   18b88:	blt	1a96c <__assert_fail@plt+0x920c>
   18b8c:	cmp	r6, r4
   18b90:	ble	18b48 <__assert_fail@plt+0x73e8>
   18b94:	b	1a96c <__assert_fail@plt+0x920c>
   18b98:	ldr	r2, [fp, #24]
   18b9c:	add	r0, sp, #104	; 0x68
   18ba0:	mov	r1, r6
   18ba4:	bl	2130c <__assert_fail@plt+0xfbac>
   18ba8:	cmp	r0, #0
   18bac:	bne	1a7ac <__assert_fail@plt+0x904c>
   18bb0:	ldr	r0, [sp, #128]	; 0x80
   18bb4:	ldr	r6, [fp, #-200]	; 0xffffff38
   18bb8:	ldr	ip, [sp, #88]	; 0x58
   18bbc:	ldr	r4, [sp, #52]	; 0x34
   18bc0:	ldr	r5, [sp, #48]	; 0x30
   18bc4:	sub	r1, r6, r0
   18bc8:	b	18b58 <__assert_fail@plt+0x73f8>
   18bcc:	ldr	r2, [fp, #24]
   18bd0:	add	r0, sp, #104	; 0x68
   18bd4:	mov	r1, r6
   18bd8:	bl	2130c <__assert_fail@plt+0xfbac>
   18bdc:	cmp	r0, #0
   18be0:	bne	1a7ac <__assert_fail@plt+0x904c>
   18be4:	ldr	r0, [sp, #60]	; 0x3c
   18be8:	cmp	r0, #1
   18bec:	ldrne	r0, [sp, #132]	; 0x84
   18bf0:	cmpne	r0, #0
   18bf4:	bne	18c7c <__assert_fail@plt+0x751c>
   18bf8:	mov	r0, #0
   18bfc:	str	r0, [sp, #212]	; 0xd4
   18c00:	str	r0, [sp, #224]	; 0xe0
   18c04:	str	r0, [sp, #208]	; 0xd0
   18c08:	str	r0, [fp, #-196]	; 0xffffff3c
   18c0c:	ldr	r4, [sp, #188]	; 0xbc
   18c10:	ldr	sl, [sp, #144]	; 0x90
   18c14:	ldr	r8, [r4, #36]	; 0x24
   18c18:	ldrsb	r0, [r8, #52]	; 0x34
   18c1c:	cmn	r0, #1
   18c20:	bgt	18d6c <__assert_fail@plt+0x760c>
   18c24:	cmp	sl, #0
   18c28:	ble	18c6c <__assert_fail@plt+0x750c>
   18c2c:	ldr	r1, [sp, #152]	; 0x98
   18c30:	sub	r0, sl, #1
   18c34:	cmp	r1, r0
   18c38:	beq	18d54 <__assert_fail@plt+0x75f4>
   18c3c:	ldr	r1, [sp, #184]	; 0xb8
   18c40:	cmp	r1, #2
   18c44:	blt	18c90 <__assert_fail@plt+0x7530>
   18c48:	ldr	r0, [sp, #112]	; 0x70
   18c4c:	mov	r1, sl
   18c50:	sub	r0, r0, #4
   18c54:	ldr	r5, [r0, r1, lsl #2]
   18c58:	cmn	r5, #1
   18c5c:	bne	18cc0 <__assert_fail@plt+0x7560>
   18c60:	sub	r1, r1, #1
   18c64:	cmp	r1, #0
   18c68:	bgt	18c54 <__assert_fail@plt+0x74f4>
   18c6c:	ldr	r3, [sp, #164]	; 0xa4
   18c70:	tst	r3, #1
   18c74:	beq	18ce8 <__assert_fail@plt+0x7588>
   18c78:	b	18d68 <__assert_fail@plt+0x7608>
   18c7c:	ldr	r0, [sp, #112]	; 0x70
   18c80:	ldr	r0, [r0]
   18c84:	cmn	r0, #1
   18c88:	bne	18bf8 <__assert_fail@plt+0x7498>
   18c8c:	b	18884 <__assert_fail@plt+0x7124>
   18c90:	ldr	r1, [sp, #108]	; 0x6c
   18c94:	ldr	r2, [sp, #172]	; 0xac
   18c98:	mov	r3, #1
   18c9c:	ldrb	r0, [r1, r0]
   18ca0:	ubfx	r1, r0, #5, #3
   18ca4:	ldr	r1, [r2, r1, lsl #2]
   18ca8:	and	r2, r0, #31
   18cac:	tst	r1, r3, lsl r2
   18cb0:	bne	18d68 <__assert_fail@plt+0x7608>
   18cb4:	cmp	r0, #10
   18cb8:	beq	18cd4 <__assert_fail@plt+0x7574>
   18cbc:	b	18d6c <__assert_fail@plt+0x760c>
   18cc0:	ldrb	r0, [sp, #182]	; 0xb6
   18cc4:	cmp	r0, #0
   18cc8:	bne	184d4 <__assert_fail@plt+0x6d74>
   18ccc:	cmp	r5, #10
   18cd0:	bne	18d6c <__assert_fail@plt+0x760c>
   18cd4:	ldrb	r3, [sp, #181]	; 0xb5
   18cd8:	cmp	r3, #0
   18cdc:	movwne	r3, #2
   18ce0:	tst	r3, #1
   18ce4:	bne	18d68 <__assert_fail@plt+0x7608>
   18ce8:	cmp	r3, #0
   18cec:	beq	18d6c <__assert_fail@plt+0x760c>
   18cf0:	ands	r1, r3, #2
   18cf4:	and	r0, r3, #4
   18cf8:	cmpne	r0, #0
   18cfc:	bne	18d34 <__assert_fail@plt+0x75d4>
   18d00:	cmp	r1, #0
   18d04:	bne	18d44 <__assert_fail@plt+0x75e4>
   18d08:	ldr	r8, [r4, #36]	; 0x24
   18d0c:	cmp	r0, #0
   18d10:	beq	18d6c <__assert_fail@plt+0x760c>
   18d14:	ldr	r2, [r8, #40]	; 0x28
   18d18:	sub	r0, fp, #196	; 0xc4
   18d1c:	mov	r1, r4
   18d20:	bl	20d8c <__assert_fail@plt+0xf62c>
   18d24:	mov	r8, r0
   18d28:	cmp	r8, #0
   18d2c:	bne	18d74 <__assert_fail@plt+0x7614>
   18d30:	b	1a798 <__assert_fail@plt+0x9038>
   18d34:	ldr	r8, [r4, #48]	; 0x30
   18d38:	cmp	r8, #0
   18d3c:	bne	18d74 <__assert_fail@plt+0x7614>
   18d40:	b	1a798 <__assert_fail@plt+0x9038>
   18d44:	ldr	r8, [r4, #44]	; 0x2c
   18d48:	cmp	r8, #0
   18d4c:	bne	18d74 <__assert_fail@plt+0x7614>
   18d50:	b	1a798 <__assert_fail@plt+0x9038>
   18d54:	ldr	r0, [sp, #192]	; 0xc0
   18d58:	and	r0, r0, #2
   18d5c:	eor	r3, r0, #10
   18d60:	tst	r3, #1
   18d64:	beq	18ce8 <__assert_fail@plt+0x7588>
   18d68:	ldr	r8, [r4, #40]	; 0x28
   18d6c:	cmp	r8, #0
   18d70:	beq	1a798 <__assert_fail@plt+0x9038>
   18d74:	ldr	r0, [sp, #204]	; 0xcc
   18d78:	ldr	r1, [sp, #40]	; 0x28
   18d7c:	ldr	r5, [sp, #92]	; 0x5c
   18d80:	cmp	r0, #0
   18d84:	mov	r7, r1
   18d88:	beq	18da0 <__assert_fail@plt+0x7640>
   18d8c:	str	r8, [r0, sl, lsl #2]
   18d90:	mov	r7, r1
   18d94:	ldr	r0, [r4, #76]	; 0x4c
   18d98:	cmp	r0, #0
   18d9c:	bne	18400 <__assert_fail@plt+0x6ca0>
   18da0:	ldrb	r0, [r8, #52]	; 0x34
   18da4:	mov	lr, #0
   18da8:	mvn	r9, #0
   18dac:	tst	r0, #16
   18db0:	bne	183c8 <__assert_fail@plt+0x6c68>
   18db4:	ldr	r0, [sp, #144]	; 0x90
   18db8:	ldr	r1, [sp, #160]	; 0xa0
   18dbc:	str	lr, [sp, #56]	; 0x38
   18dc0:	cmp	r1, r0
   18dc4:	ble	19694 <__assert_fail@plt+0x7f34>
   18dc8:	ldr	r1, [sp, #36]	; 0x24
   18dcc:	str	r1, [sp, #72]	; 0x48
   18dd0:	b	19580 <__assert_fail@plt+0x7e20>
   18dd4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   18dd8:	cmp	r0, #0
   18ddc:	bne	1a798 <__assert_fail@plt+0x9038>
   18de0:	ldr	r0, [sp, #56]	; 0x38
   18de4:	ldr	r1, [sp, #44]	; 0x2c
   18de8:	clz	r0, r0
   18dec:	lsr	r0, r0, #5
   18df0:	orr	r0, r1, r0
   18df4:	cmp	r0, #1
   18df8:	bne	1969c <__assert_fail@plt+0x7f3c>
   18dfc:	ldr	r0, [sp, #204]	; 0xcc
   18e00:	cmp	r0, #0
   18e04:	bne	18e5c <__assert_fail@plt+0x76fc>
   18e08:	b	1969c <__assert_fail@plt+0x7f3c>
   18e0c:	ldr	r0, [sp, #144]	; 0x90
   18e10:	cmn	r0, #1
   18e14:	ble	18e50 <__assert_fail@plt+0x76f0>
   18e18:	ldr	r1, [sp, #152]	; 0x98
   18e1c:	cmp	r1, r0
   18e20:	beq	194e4 <__assert_fail@plt+0x7d84>
   18e24:	ldr	r1, [sp, #184]	; 0xb8
   18e28:	cmp	r1, #2
   18e2c:	blt	18eb8 <__assert_fail@plt+0x7758>
   18e30:	ldr	r1, [sp, #112]	; 0x70
   18e34:	ldr	r4, [r1, r0, lsl #2]
   18e38:	cmn	r4, #1
   18e3c:	bne	18eec <__assert_fail@plt+0x778c>
   18e40:	sub	r2, r0, #1
   18e44:	cmp	r0, #0
   18e48:	mov	r0, r2
   18e4c:	bgt	18e34 <__assert_fail@plt+0x76d4>
   18e50:	ldr	r3, [sp, #164]	; 0xa4
   18e54:	b	18f10 <__assert_fail@plt+0x77b0>
   18e58:	ldr	r0, [sp, #204]	; 0xcc
   18e5c:	ldr	r2, [sp, #144]	; 0x90
   18e60:	ldr	r1, [sp, #208]	; 0xd0
   18e64:	add	r2, r2, #1
   18e68:	sub	r3, r2, #1
   18e6c:	cmp	r3, r1
   18e70:	bge	1969c <__assert_fail@plt+0x7f3c>
   18e74:	str	r2, [sp, #144]	; 0x90
   18e78:	ldr	r3, [r0, r2, lsl #2]
   18e7c:	add	r2, r2, #1
   18e80:	cmp	r3, #0
   18e84:	beq	18e68 <__assert_fail@plt+0x7708>
   18e88:	sub	r0, fp, #196	; 0xc4
   18e8c:	add	r1, sp, #104	; 0x68
   18e90:	mov	r2, #0
   18e94:	bl	22a50 <__assert_fail@plt+0x112f0>
   18e98:	cmp	r0, #0
   18e9c:	mov	r8, r0
   18ea0:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   18ea4:	cmpeq	r0, #0
   18ea8:	beq	18e58 <__assert_fail@plt+0x76f8>
   18eac:	cmp	r8, #0
   18eb0:	bne	19634 <__assert_fail@plt+0x7ed4>
   18eb4:	b	1969c <__assert_fail@plt+0x7f3c>
   18eb8:	ldr	r1, [sp, #108]	; 0x6c
   18ebc:	ldr	r2, [sp, #172]	; 0xac
   18ec0:	mov	r3, #1
   18ec4:	ldrb	r0, [r1, r0]
   18ec8:	ubfx	r1, r0, #5, #3
   18ecc:	ldr	r1, [r2, r1, lsl #2]
   18ed0:	and	r2, r0, #31
   18ed4:	tst	r1, r3, lsl r2
   18ed8:	bne	18f10 <__assert_fail@plt+0x77b0>
   18edc:	mov	r3, #0
   18ee0:	cmp	r0, #10
   18ee4:	beq	18f04 <__assert_fail@plt+0x77a4>
   18ee8:	b	18f10 <__assert_fail@plt+0x77b0>
   18eec:	ldrb	r0, [sp, #182]	; 0xb6
   18ef0:	cmp	r0, #0
   18ef4:	bne	1950c <__assert_fail@plt+0x7dac>
   18ef8:	mov	r3, #0
   18efc:	cmp	r4, #10
   18f00:	bne	18f10 <__assert_fail@plt+0x77b0>
   18f04:	ldrb	r3, [sp, #181]	; 0xb5
   18f08:	cmp	r3, #0
   18f0c:	movwne	r3, #2
   18f10:	ldr	r0, [r8, #8]
   18f14:	cmp	r0, #1
   18f18:	blt	19680 <__assert_fail@plt+0x7f20>
   18f1c:	ldr	r1, [sp, #188]	; 0xbc
   18f20:	ldr	r6, [r8, #12]
   18f24:	and	ip, r3, #8
   18f28:	and	lr, r3, #2
   18f2c:	and	r3, r3, #1
   18f30:	mov	r4, #0
   18f34:	str	r7, [sp, #16]
   18f38:	str	sl, [sp, #20]
   18f3c:	ldr	r5, [r1]
   18f40:	ldr	r1, [r6, r4, lsl #2]
   18f44:	add	r7, r5, r1, lsl #3
   18f48:	ldr	r7, [r7, #4]
   18f4c:	uxtb	r2, r7
   18f50:	cmp	r2, #2
   18f54:	bne	18fa4 <__assert_fail@plt+0x7844>
   18f58:	movw	r2, #65280	; 0xff00
   18f5c:	movt	r2, #3
   18f60:	tst	r7, r2
   18f64:	beq	18fbc <__assert_fail@plt+0x785c>
   18f68:	cmp	r3, #0
   18f6c:	bne	18f78 <__assert_fail@plt+0x7818>
   18f70:	ands	r2, r7, #1024	; 0x400
   18f74:	bne	18fa4 <__assert_fail@plt+0x7844>
   18f78:	cmp	r3, #0
   18f7c:	andsne	r2, r7, #2048	; 0x800
   18f80:	bne	18fa4 <__assert_fail@plt+0x7844>
   18f84:	cmp	lr, #0
   18f88:	bne	18f94 <__assert_fail@plt+0x7834>
   18f8c:	ands	r2, r7, #8192	; 0x2000
   18f90:	bne	18fa4 <__assert_fail@plt+0x7844>
   18f94:	cmp	ip, #0
   18f98:	bne	18fbc <__assert_fail@plt+0x785c>
   18f9c:	ands	r2, r7, #32768	; 0x8000
   18fa0:	beq	18fbc <__assert_fail@plt+0x785c>
   18fa4:	add	r4, r4, #1
   18fa8:	cmp	r4, r0
   18fac:	blt	18f40 <__assert_fail@plt+0x77e0>
   18fb0:	ldr	sl, [sp, #20]
   18fb4:	ldr	r7, [sp, #16]
   18fb8:	b	19680 <__assert_fail@plt+0x7f20>
   18fbc:	ldr	sl, [sp, #20]
   18fc0:	ldr	r7, [sp, #16]
   18fc4:	cmp	r1, #0
   18fc8:	bne	19660 <__assert_fail@plt+0x7f00>
   18fcc:	b	19680 <__assert_fail@plt+0x7f20>
   18fd0:	ldr	r0, [r5, #8]
   18fd4:	cmp	r0, #1
   18fd8:	blt	19408 <__assert_fail@plt+0x7ca8>
   18fdc:	ldr	lr, [sp, #188]	; 0xbc
   18fe0:	mov	r3, #0
   18fe4:	str	sl, [sp, #20]
   18fe8:	str	r7, [sp, #16]
   18fec:	str	lr, [sp, #4]
   18ff0:	b	193d4 <__assert_fail@plt+0x7c74>
   18ff4:	movw	r0, #65280	; 0xff00
   18ff8:	str	r3, [sp, #8]
   18ffc:	movt	r0, #3
   19000:	tst	r6, r0
   19004:	beq	19118 <__assert_fail@plt+0x79b8>
   19008:	ldr	r0, [sp, #144]	; 0x90
   1900c:	cmn	r0, #1
   19010:	ble	19054 <__assert_fail@plt+0x78f4>
   19014:	ldr	r1, [sp, #152]	; 0x98
   19018:	cmp	r1, r0
   1901c:	beq	1932c <__assert_fail@plt+0x7bcc>
   19020:	ldr	r1, [sp, #184]	; 0xb8
   19024:	cmp	r1, #2
   19028:	blt	1905c <__assert_fail@plt+0x78fc>
   1902c:	ldr	r1, [sp, #112]	; 0x70
   19030:	ldr	sl, [sp, #20]
   19034:	ldr	r3, [sp, #8]
   19038:	ldr	r8, [r1, r0, lsl #2]
   1903c:	cmn	r8, #1
   19040:	bne	1909c <__assert_fail@plt+0x793c>
   19044:	sub	r2, r0, #1
   19048:	cmp	r0, #0
   1904c:	mov	r0, r2
   19050:	bgt	19038 <__assert_fail@plt+0x78d8>
   19054:	ldr	r1, [sp, #164]	; 0xa4
   19058:	b	190c0 <__assert_fail@plt+0x7960>
   1905c:	ldr	r1, [sp, #108]	; 0x6c
   19060:	ldr	r2, [sp, #172]	; 0xac
   19064:	mov	ip, #0
   19068:	ldrb	r0, [r1, r0]
   1906c:	ubfx	r1, r0, #5, #3
   19070:	ldr	sl, [sp, #20]
   19074:	ldr	r3, [r2, r1, lsl #2]
   19078:	and	r2, r0, #31
   1907c:	mov	r1, #1
   19080:	tst	r3, r1, lsl r2
   19084:	ldr	r3, [sp, #8]
   19088:	bne	190d8 <__assert_fail@plt+0x7978>
   1908c:	mov	r1, #0
   19090:	cmp	r0, #10
   19094:	beq	190b4 <__assert_fail@plt+0x7954>
   19098:	b	190c0 <__assert_fail@plt+0x7960>
   1909c:	ldrb	r0, [sp, #182]	; 0xb6
   190a0:	cmp	r0, #0
   190a4:	bne	19360 <__assert_fail@plt+0x7c00>
   190a8:	mov	r1, #0
   190ac:	cmp	r8, #10
   190b0:	bne	190c0 <__assert_fail@plt+0x7960>
   190b4:	ldrb	r1, [sp, #181]	; 0xb5
   190b8:	cmp	r1, #0
   190bc:	movwne	r1, #2
   190c0:	and	r0, r1, #1
   190c4:	tst	r6, #1024	; 0x400
   190c8:	eor	ip, r0, #1
   190cc:	beq	190d8 <__assert_fail@plt+0x7978>
   190d0:	cmp	r0, #0
   190d4:	beq	193f8 <__assert_fail@plt+0x7c98>
   190d8:	ldr	r0, [lr]
   190dc:	ldr	r2, [sp, #12]
   190e0:	cmp	ip, #0
   190e4:	add	r0, r0, r2, lsl #3
   190e8:	ldr	r0, [r0, #4]
   190ec:	bne	190f8 <__assert_fail@plt+0x7998>
   190f0:	ands	r2, r0, #2048	; 0x800
   190f4:	bne	193f8 <__assert_fail@plt+0x7c98>
   190f8:	tst	r1, #2
   190fc:	bne	19108 <__assert_fail@plt+0x79a8>
   19100:	ands	r2, r0, #8192	; 0x2000
   19104:	bne	193f8 <__assert_fail@plt+0x7c98>
   19108:	tst	r1, #8
   1910c:	bne	19118 <__assert_fail@plt+0x79b8>
   19110:	ands	r0, r0, #32768	; 0x8000
   19114:	bne	193f8 <__assert_fail@plt+0x7c98>
   19118:	ldr	r3, [sp, #144]	; 0x90
   1911c:	ldr	r1, [sp, #12]
   19120:	mov	r0, lr
   19124:	add	r2, sp, #104	; 0x68
   19128:	bl	244e0 <__assert_fail@plt+0x12d80>
   1912c:	ldr	r3, [sp, #8]
   19130:	ldr	lr, [sp, #4]
   19134:	ldr	r7, [sp, #16]
   19138:	cmp	r0, #0
   1913c:	beq	193f8 <__assert_fail@plt+0x7c98>
   19140:	ldr	r1, [sp, #224]	; 0xe0
   19144:	cmp	r1, r0
   19148:	movlt	r1, r0
   1914c:	str	r1, [sp, #224]	; 0xe0
   19150:	ldr	r3, [sp, #144]	; 0x90
   19154:	ldr	r2, [sp, #140]	; 0x8c
   19158:	ldr	r1, [sp, #152]	; 0x98
   1915c:	ldr	r7, [sp, #208]	; 0xd0
   19160:	add	r6, r3, r0
   19164:	cmp	r2, r6
   19168:	cmple	r2, r1
   1916c:	blt	19180 <__assert_fail@plt+0x7a20>
   19170:	ldr	r0, [sp, #132]	; 0x84
   19174:	cmp	r0, r6
   19178:	cmple	r0, r1
   1917c:	bge	19198 <__assert_fail@plt+0x7a38>
   19180:	add	r1, r6, #1
   19184:	add	r0, sp, #104	; 0x68
   19188:	bl	22848 <__assert_fail@plt+0x110e8>
   1918c:	ldr	lr, [sp, #4]
   19190:	cmp	r0, #0
   19194:	bne	194f4 <__assert_fail@plt+0x7d94>
   19198:	cmp	r6, r7
   1919c:	ble	191c4 <__assert_fail@plt+0x7a64>
   191a0:	sub	r0, r6, r7
   191a4:	mov	r1, #0
   191a8:	lsl	r2, r0, #2
   191ac:	ldr	r0, [sp, #204]	; 0xcc
   191b0:	add	r0, r0, r7, lsl #2
   191b4:	add	r0, r0, #4
   191b8:	bl	11670 <memset@plt>
   191bc:	ldr	lr, [sp, #4]
   191c0:	str	r6, [sp, #208]	; 0xd0
   191c4:	mov	r0, #0
   191c8:	ldr	r2, [sp, #12]
   191cc:	str	r0, [fp, #-48]	; 0xffffffd0
   191d0:	ldr	r0, [sp, #204]	; 0xcc
   191d4:	ldr	r1, [lr, #24]
   191d8:	ldr	r7, [r0, r6, lsl #2]
   191dc:	ldr	r0, [lr, #12]
   191e0:	ldr	r0, [r0, r2, lsl #2]
   191e4:	cmp	r7, #0
   191e8:	add	r0, r0, r0, lsl #1
   191ec:	add	r2, r1, r0, lsl #2
   191f0:	beq	19214 <__assert_fail@plt+0x7ab4>
   191f4:	ldr	r1, [r7, #40]	; 0x28
   191f8:	sub	r0, fp, #192	; 0xc0
   191fc:	bl	22c64 <__assert_fail@plt+0x11504>
   19200:	ldr	sl, [sp, #20]
   19204:	cmp	r0, #0
   19208:	str	r0, [fp, #-48]	; 0xffffffd0
   1920c:	beq	19228 <__assert_fail@plt+0x7ac8>
   19210:	b	194f8 <__assert_fail@plt+0x7d98>
   19214:	vldr	d16, [r2]
   19218:	ldr	r0, [r2, #8]
   1921c:	ldr	sl, [sp, #20]
   19220:	str	r0, [fp, #-184]	; 0xffffff48
   19224:	vstr	d16, [fp, #-192]	; 0xffffff40
   19228:	cmp	r6, #0
   1922c:	ble	19344 <__assert_fail@plt+0x7be4>
   19230:	ldr	r1, [sp, #152]	; 0x98
   19234:	sub	r0, r6, #1
   19238:	cmp	r1, r0
   1923c:	ldr	r1, [sp, #4]
   19240:	beq	19350 <__assert_fail@plt+0x7bf0>
   19244:	ldr	r2, [sp, #184]	; 0xb8
   19248:	cmp	r2, #2
   1924c:	blt	1927c <__assert_fail@plt+0x7b1c>
   19250:	ldr	r0, [sp, #112]	; 0x70
   19254:	mov	r2, r6
   19258:	sub	r0, r0, #4
   1925c:	ldr	r8, [r0, r2, lsl #2]
   19260:	cmn	r8, #1
   19264:	bne	192b8 <__assert_fail@plt+0x7b58>
   19268:	sub	r2, r2, #1
   1926c:	cmp	r2, #0
   19270:	bgt	1925c <__assert_fail@plt+0x7afc>
   19274:	ldr	r3, [sp, #164]	; 0xa4
   19278:	b	192dc <__assert_fail@plt+0x7b7c>
   1927c:	ldr	r3, [sp, #108]	; 0x6c
   19280:	ldr	r2, [sp, #172]	; 0xac
   19284:	mov	ip, r7
   19288:	ldrb	r0, [r3, r0]
   1928c:	ubfx	r3, r0, #5, #3
   19290:	ldr	r7, [r2, r3, lsl #2]
   19294:	and	r2, r0, #31
   19298:	mov	r3, #1
   1929c:	tst	r7, r3, lsl r2
   192a0:	mov	r7, ip
   192a4:	bne	192dc <__assert_fail@plt+0x7b7c>
   192a8:	mov	r3, #0
   192ac:	cmp	r0, #10
   192b0:	beq	192d0 <__assert_fail@plt+0x7b70>
   192b4:	b	192dc <__assert_fail@plt+0x7b7c>
   192b8:	ldrb	r0, [sp, #182]	; 0xb6
   192bc:	cmp	r0, #0
   192c0:	bne	19390 <__assert_fail@plt+0x7c30>
   192c4:	mov	r3, #0
   192c8:	cmp	r8, #10
   192cc:	bne	192dc <__assert_fail@plt+0x7b7c>
   192d0:	ldrb	r3, [sp, #181]	; 0xb5
   192d4:	cmp	r3, #0
   192d8:	movwne	r3, #2
   192dc:	sub	r0, fp, #48	; 0x30
   192e0:	sub	r2, fp, #192	; 0xc0
   192e4:	bl	20d8c <__assert_fail@plt+0xf62c>
   192e8:	ldr	r1, [sp, #204]	; 0xcc
   192ec:	cmp	r7, #0
   192f0:	str	r0, [r1, r6, lsl #2]
   192f4:	beq	19300 <__assert_fail@plt+0x7ba0>
   192f8:	ldr	r0, [fp, #-184]	; 0xffffff48
   192fc:	bl	141c4 <__assert_fail@plt+0x2a64>
   19300:	ldr	r0, [sp, #204]	; 0xcc
   19304:	ldr	r7, [sp, #16]
   19308:	ldr	lr, [sp, #4]
   1930c:	ldr	r3, [sp, #8]
   19310:	ldr	r0, [r0, r6, lsl #2]
   19314:	cmp	r0, #0
   19318:	bne	193f8 <__assert_fail@plt+0x7c98>
   1931c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19320:	cmp	r0, #0
   19324:	beq	193f8 <__assert_fail@plt+0x7c98>
   19328:	b	19500 <__assert_fail@plt+0x7da0>
   1932c:	ldr	r0, [sp, #192]	; 0xc0
   19330:	ldr	sl, [sp, #20]
   19334:	ldr	r3, [sp, #8]
   19338:	and	r0, r0, #2
   1933c:	eor	r1, r0, #10
   19340:	b	190c0 <__assert_fail@plt+0x7960>
   19344:	ldr	r3, [sp, #164]	; 0xa4
   19348:	ldr	r1, [sp, #4]
   1934c:	b	192dc <__assert_fail@plt+0x7b7c>
   19350:	ldr	r0, [sp, #192]	; 0xc0
   19354:	and	r0, r0, #2
   19358:	eor	r3, r0, #10
   1935c:	b	192dc <__assert_fail@plt+0x7b7c>
   19360:	mov	r0, r8
   19364:	bl	1164c <iswalnum@plt>
   19368:	mov	r1, #1
   1936c:	mov	ip, #0
   19370:	cmp	r8, #95	; 0x5f
   19374:	beq	193b8 <__assert_fail@plt+0x7c58>
   19378:	ldr	sl, [sp, #20]
   1937c:	ldr	lr, [sp, #4]
   19380:	ldr	r3, [sp, #8]
   19384:	cmp	r0, #0
   19388:	beq	190a8 <__assert_fail@plt+0x7948>
   1938c:	b	190d8 <__assert_fail@plt+0x7978>
   19390:	mov	r0, r8
   19394:	bl	1164c <iswalnum@plt>
   19398:	mov	r3, #1
   1939c:	cmp	r8, #95	; 0x5f
   193a0:	beq	193c8 <__assert_fail@plt+0x7c68>
   193a4:	ldr	sl, [sp, #20]
   193a8:	ldr	r1, [sp, #4]
   193ac:	cmp	r0, #0
   193b0:	beq	192c4 <__assert_fail@plt+0x7b64>
   193b4:	b	192dc <__assert_fail@plt+0x7b7c>
   193b8:	ldr	sl, [sp, #20]
   193bc:	ldr	lr, [sp, #4]
   193c0:	ldr	r3, [sp, #8]
   193c4:	b	190d8 <__assert_fail@plt+0x7978>
   193c8:	ldr	sl, [sp, #20]
   193cc:	ldr	r1, [sp, #4]
   193d0:	b	192dc <__assert_fail@plt+0x7b7c>
   193d4:	ldr	r0, [r5, #12]
   193d8:	ldr	r2, [r0, r3, lsl #2]
   193dc:	ldr	r0, [lr]
   193e0:	add	r0, r0, r2, lsl #3
   193e4:	mov	r1, r2
   193e8:	str	r2, [sp, #12]
   193ec:	ldr	r6, [r0, #4]
   193f0:	tst	r6, #1048576	; 0x100000
   193f4:	bne	18ff4 <__assert_fail@plt+0x7894>
   193f8:	ldr	r0, [r5, #8]
   193fc:	add	r3, r3, #1
   19400:	cmp	r3, r0
   19404:	blt	193d4 <__assert_fail@plt+0x7c74>
   19408:	mov	r0, #0
   1940c:	str	r0, [fp, #-196]	; 0xffffff3c
   19410:	b	195c0 <__assert_fail@plt+0x7e60>
   19414:	add	r1, r0, #2
   19418:	add	r0, sp, #104	; 0x68
   1941c:	bl	22848 <__assert_fail@plt+0x110e8>
   19420:	cmp	r0, #0
   19424:	str	r0, [fp, #-196]	; 0xffffff3c
   19428:	beq	195b4 <__assert_fail@plt+0x7e54>
   1942c:	b	1a798 <__assert_fail@plt+0x9038>
   19430:	ldr	r0, [sp, #144]	; 0x90
   19434:	cmp	r0, #0
   19438:	ble	19478 <__assert_fail@plt+0x7d18>
   1943c:	ldr	r2, [sp, #152]	; 0x98
   19440:	sub	r1, r0, #1
   19444:	cmp	r2, r1
   19448:	beq	1953c <__assert_fail@plt+0x7ddc>
   1944c:	ldr	r2, [sp, #184]	; 0xb8
   19450:	cmp	r2, #2
   19454:	blt	19480 <__assert_fail@plt+0x7d20>
   19458:	ldr	r1, [sp, #112]	; 0x70
   1945c:	sub	r1, r1, #4
   19460:	ldr	r8, [r1, r0, lsl #2]
   19464:	cmn	r8, #1
   19468:	bne	194b4 <__assert_fail@plt+0x7d54>
   1946c:	sub	r0, r0, #1
   19470:	cmp	r0, #0
   19474:	bgt	19460 <__assert_fail@plt+0x7d00>
   19478:	ldr	r1, [sp, #164]	; 0xa4
   1947c:	b	194d8 <__assert_fail@plt+0x7d78>
   19480:	ldr	r0, [sp, #108]	; 0x6c
   19484:	ldr	r2, [sp, #172]	; 0xac
   19488:	ldrb	r0, [r0, r1]
   1948c:	ubfx	r1, r0, #5, #3
   19490:	ldr	ip, [r2, r1, lsl #2]
   19494:	and	r2, r0, #31
   19498:	mov	r1, #1
   1949c:	tst	ip, r1, lsl r2
   194a0:	bne	194d8 <__assert_fail@plt+0x7d78>
   194a4:	mov	r1, #0
   194a8:	cmp	r0, #10
   194ac:	beq	194cc <__assert_fail@plt+0x7d6c>
   194b0:	b	194d8 <__assert_fail@plt+0x7d78>
   194b4:	ldrb	r0, [sp, #182]	; 0xb6
   194b8:	cmp	r0, #0
   194bc:	bne	19544 <__assert_fail@plt+0x7de4>
   194c0:	mov	r1, #0
   194c4:	cmp	r8, #10
   194c8:	bne	194d8 <__assert_fail@plt+0x7d78>
   194cc:	ldrb	r1, [sp, #181]	; 0xb5
   194d0:	cmp	r1, #0
   194d4:	movwne	r1, #2
   194d8:	bfi	r6, r1, #8, #1
   194dc:	ldr	r8, [r3, r6, lsl #2]
   194e0:	b	1960c <__assert_fail@plt+0x7eac>
   194e4:	ldr	r0, [sp, #192]	; 0xc0
   194e8:	and	r0, r0, #2
   194ec:	eor	r3, r0, #10
   194f0:	b	18f10 <__assert_fail@plt+0x77b0>
   194f4:	str	r0, [fp, #-48]	; 0xffffffd0
   194f8:	ldr	sl, [sp, #20]
   194fc:	ldr	r7, [sp, #16]
   19500:	mov	r8, #0
   19504:	str	r0, [fp, #-196]	; 0xffffff3c
   19508:	b	1960c <__assert_fail@plt+0x7eac>
   1950c:	mov	r0, r4
   19510:	mov	r5, r7
   19514:	bl	1164c <iswalnum@plt>
   19518:	mov	r3, #1
   1951c:	cmp	r4, #95	; 0x5f
   19520:	beq	19534 <__assert_fail@plt+0x7dd4>
   19524:	cmp	r0, #0
   19528:	mov	r7, r5
   1952c:	beq	18ef8 <__assert_fail@plt+0x7798>
   19530:	b	18f10 <__assert_fail@plt+0x77b0>
   19534:	mov	r7, r5
   19538:	b	18f10 <__assert_fail@plt+0x77b0>
   1953c:	mov	r1, #10
   19540:	b	194d8 <__assert_fail@plt+0x7d78>
   19544:	mov	r0, r8
   19548:	str	r3, [sp, #12]
   1954c:	str	r7, [sp, #16]
   19550:	bl	1164c <iswalnum@plt>
   19554:	mov	r1, #1
   19558:	cmp	r8, #95	; 0x5f
   1955c:	beq	19574 <__assert_fail@plt+0x7e14>
   19560:	ldr	r7, [sp, #16]
   19564:	ldr	r3, [sp, #12]
   19568:	cmp	r0, #0
   1956c:	beq	194c0 <__assert_fail@plt+0x7d60>
   19570:	b	194d8 <__assert_fail@plt+0x7d78>
   19574:	ldr	r7, [sp, #16]
   19578:	ldr	r3, [sp, #12]
   1957c:	b	194d8 <__assert_fail@plt+0x7d78>
   19580:	ldr	r2, [sp, #140]	; 0x8c
   19584:	ldr	r1, [sp, #152]	; 0x98
   19588:	add	r4, r0, #1
   1958c:	mov	r5, r8
   19590:	cmp	r4, r2
   19594:	blt	195a0 <__assert_fail@plt+0x7e40>
   19598:	cmp	r2, r1
   1959c:	blt	19414 <__assert_fail@plt+0x7cb4>
   195a0:	ldr	r2, [sp, #132]	; 0x84
   195a4:	cmp	r4, r2
   195a8:	blt	195b4 <__assert_fail@plt+0x7e54>
   195ac:	cmp	r2, r1
   195b0:	blt	19414 <__assert_fail@plt+0x7cb4>
   195b4:	ldrb	r0, [r5, #52]	; 0x34
   195b8:	tst	r0, #32
   195bc:	bne	18fd0 <__assert_fail@plt+0x7870>
   195c0:	ldr	r1, [sp, #144]	; 0x90
   195c4:	ldr	r0, [sp, #108]	; 0x6c
   195c8:	add	r2, r1, #1
   195cc:	str	r2, [sp, #144]	; 0x90
   195d0:	ldrb	r6, [r0, r1]
   195d4:	ldr	r0, [r5, #44]	; 0x2c
   195d8:	cmp	r0, #0
   195dc:	bne	19608 <__assert_fail@plt+0x7ea8>
   195e0:	ldr	r3, [r5, #48]	; 0x30
   195e4:	cmp	r3, #0
   195e8:	bne	19430 <__assert_fail@plt+0x7cd0>
   195ec:	ldr	r0, [sp, #188]	; 0xbc
   195f0:	mov	r1, r5
   195f4:	bl	249e4 <__assert_fail@plt+0x13284>
   195f8:	cmp	r0, #0
   195fc:	bne	195d4 <__assert_fail@plt+0x7e74>
   19600:	mov	r0, #12
   19604:	b	19500 <__assert_fail@plt+0x7da0>
   19608:	ldr	r8, [r0, r6, lsl #2]
   1960c:	ldr	r0, [sp, #204]	; 0xcc
   19610:	cmp	r0, #0
   19614:	beq	1962c <__assert_fail@plt+0x7ecc>
   19618:	sub	r0, fp, #196	; 0xc4
   1961c:	add	r1, sp, #104	; 0x68
   19620:	mov	r2, r8
   19624:	bl	22a50 <__assert_fail@plt+0x112f0>
   19628:	mov	r8, r0
   1962c:	cmp	r8, #0
   19630:	beq	18dd4 <__assert_fail@plt+0x7674>
   19634:	sub	r0, r5, r8
   19638:	clz	r0, r0
   1963c:	lsr	r0, r0, #5
   19640:	ands	r7, r7, r0
   19644:	ldrb	r0, [r8, #52]	; 0x34
   19648:	movne	sl, r4
   1964c:	tst	r0, #16
   19650:	beq	19680 <__assert_fail@plt+0x7f20>
   19654:	sxtb	r0, r0
   19658:	cmn	r0, #1
   1965c:	ble	18e0c <__assert_fail@plt+0x76ac>
   19660:	ldr	r0, [sp, #44]	; 0x2c
   19664:	ldr	r9, [sp, #144]	; 0x90
   19668:	cmp	r0, #0
   1966c:	beq	196b0 <__assert_fail@plt+0x7f50>
   19670:	mov	r0, #0
   19674:	str	r0, [sp, #72]	; 0x48
   19678:	mov	r0, #1
   1967c:	str	r0, [sp, #56]	; 0x38
   19680:	ldr	r0, [sp, #144]	; 0x90
   19684:	ldr	r1, [sp, #160]	; 0xa0
   19688:	cmp	r1, r0
   1968c:	bgt	19580 <__assert_fail@plt+0x7e20>
   19690:	b	1969c <__assert_fail@plt+0x7f3c>
   19694:	ldr	r0, [sp, #36]	; 0x24
   19698:	str	r0, [sp, #72]	; 0x48
   1969c:	ldr	r1, [sp, #72]	; 0x48
   196a0:	cmp	r1, #0
   196a4:	ldrne	r0, [r1]
   196a8:	addne	r0, r0, sl
   196ac:	strne	r0, [r1]
   196b0:	ldr	sl, [sp, #92]	; 0x5c
   196b4:	ldr	r8, [sp, #64]	; 0x40
   196b8:	cmn	r9, #1
   196bc:	beq	1887c <__assert_fail@plt+0x711c>
   196c0:	cmn	r9, #2
   196c4:	beq	1a798 <__assert_fail@plt+0x9038>
   196c8:	ldr	r5, [sp, #80]	; 0x50
   196cc:	str	r9, [sp, #196]	; 0xc4
   196d0:	ldr	r8, [sp, #96]	; 0x60
   196d4:	cmp	sl, #2
   196d8:	ldrb	r0, [r5, #28]
   196dc:	bcc	196e8 <__assert_fail@plt+0x7f88>
   196e0:	ands	r1, r0, #16
   196e4:	beq	196f4 <__assert_fail@plt+0x7f94>
   196e8:	ldr	r1, [r8, #76]	; 0x4c
   196ec:	cmp	r1, #0
   196f0:	beq	19854 <__assert_fail@plt+0x80f4>
   196f4:	ldr	r0, [sp, #204]	; 0xcc
   196f8:	cmn	r9, #1
   196fc:	ldr	r5, [r0, r9, lsl #2]
   19700:	ble	1973c <__assert_fail@plt+0x7fdc>
   19704:	ldr	r0, [sp, #152]	; 0x98
   19708:	cmp	r0, r9
   1970c:	beq	18418 <__assert_fail@plt+0x6cb8>
   19710:	ldr	r0, [sp, #184]	; 0xb8
   19714:	cmp	r0, #2
   19718:	blt	1974c <__assert_fail@plt+0x7fec>
   1971c:	ldr	r0, [sp, #112]	; 0x70
   19720:	ldr	r4, [r0, r9, lsl #2]
   19724:	cmn	r4, #1
   19728:	bne	19788 <__assert_fail@plt+0x8028>
   1972c:	sub	r1, r9, #1
   19730:	cmp	r9, #0
   19734:	mov	r9, r1
   19738:	bgt	19720 <__assert_fail@plt+0x7fc0>
   1973c:	ldr	r3, [sp, #164]	; 0xa4
   19740:	movw	r9, #65280	; 0xff00
   19744:	movt	r9, #3
   19748:	b	197b4 <__assert_fail@plt+0x8054>
   1974c:	ldr	r0, [sp, #108]	; 0x6c
   19750:	ldr	r1, [sp, #172]	; 0xac
   19754:	mov	r3, #1
   19758:	ldrb	r0, [r0, r9]
   1975c:	movw	r9, #65280	; 0xff00
   19760:	movt	r9, #3
   19764:	ubfx	r2, r0, #5, #3
   19768:	ldr	r1, [r1, r2, lsl #2]
   1976c:	and	r2, r0, #31
   19770:	tst	r1, r3, lsl r2
   19774:	bne	197b4 <__assert_fail@plt+0x8054>
   19778:	mov	r3, #0
   1977c:	cmp	r0, #10
   19780:	beq	197a8 <__assert_fail@plt+0x8048>
   19784:	b	197b4 <__assert_fail@plt+0x8054>
   19788:	ldrb	r0, [sp, #182]	; 0xb6
   1978c:	movw	r9, #65280	; 0xff00
   19790:	movt	r9, #3
   19794:	cmp	r0, #0
   19798:	bne	184b4 <__assert_fail@plt+0x6d54>
   1979c:	mov	r3, #0
   197a0:	cmp	r4, #10
   197a4:	bne	197b4 <__assert_fail@plt+0x8054>
   197a8:	ldrb	r3, [sp, #181]	; 0xb5
   197ac:	cmp	r3, #0
   197b0:	movwne	r3, #2
   197b4:	ldr	r0, [r5, #8]
   197b8:	cmp	r0, #1
   197bc:	blt	19844 <__assert_fail@plt+0x80e4>
   197c0:	ldr	r1, [sp, #188]	; 0xbc
   197c4:	ldr	r6, [r5, #12]
   197c8:	and	ip, r3, #8
   197cc:	and	lr, r3, #2
   197d0:	and	r3, r3, #1
   197d4:	mov	r4, #0
   197d8:	ldr	r5, [r1]
   197dc:	ldr	r7, [r6, r4, lsl #2]
   197e0:	add	r1, r5, r7, lsl #3
   197e4:	ldr	r1, [r1, #4]
   197e8:	uxtb	r2, r1
   197ec:	cmp	r2, #2
   197f0:	bne	19838 <__assert_fail@plt+0x80d8>
   197f4:	tst	r1, r9
   197f8:	beq	19848 <__assert_fail@plt+0x80e8>
   197fc:	cmp	r3, #0
   19800:	bne	1980c <__assert_fail@plt+0x80ac>
   19804:	ands	r2, r1, #1024	; 0x400
   19808:	bne	19838 <__assert_fail@plt+0x80d8>
   1980c:	cmp	r3, #0
   19810:	andsne	r2, r1, #2048	; 0x800
   19814:	bne	19838 <__assert_fail@plt+0x80d8>
   19818:	cmp	lr, #0
   1981c:	bne	19828 <__assert_fail@plt+0x80c8>
   19820:	ands	r2, r1, #8192	; 0x2000
   19824:	bne	19838 <__assert_fail@plt+0x80d8>
   19828:	cmp	ip, #0
   1982c:	bne	19848 <__assert_fail@plt+0x80e8>
   19830:	ands	r1, r1, #32768	; 0x8000
   19834:	beq	19848 <__assert_fail@plt+0x80e8>
   19838:	add	r4, r4, #1
   1983c:	cmp	r4, r0
   19840:	blt	197dc <__assert_fail@plt+0x807c>
   19844:	mov	r7, #0
   19848:	ldr	r5, [sp, #80]	; 0x50
   1984c:	str	r7, [sp, #200]	; 0xc8
   19850:	ldrb	r0, [r5, #28]
   19854:	sub	r6, fp, #48	; 0x30
   19858:	cmp	sl, #2
   1985c:	bcc	19874 <__assert_fail@plt+0x8114>
   19860:	ands	r0, r0, #16
   19864:	bne	19874 <__assert_fail@plt+0x8114>
   19868:	ldrb	r0, [r8, #88]	; 0x58
   1986c:	tst	r0, #1
   19870:	bne	19880 <__assert_fail@plt+0x8120>
   19874:	ldr	r0, [r8, #76]	; 0x4c
   19878:	cmp	r0, #0
   1987c:	beq	19a1c <__assert_fail@plt+0x82bc>
   19880:	ldr	sl, [sp, #196]	; 0xc4
   19884:	cmn	sl, #-1073741823	; 0xc0000001
   19888:	bcs	1a798 <__assert_fail@plt+0x9038>
   1988c:	ldr	r0, [sp, #188]	; 0xbc
   19890:	ldr	r6, [sp, #200]	; 0xc8
   19894:	str	r0, [sp, #72]	; 0x48
   19898:	mov	r0, #4
   1989c:	add	r4, r0, sl, lsl #2
   198a0:	mov	r0, r4
   198a4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   198a8:	mov	r8, r0
   198ac:	cmp	r0, #0
   198b0:	beq	1a9cc <__assert_fail@plt+0x926c>
   198b4:	ldr	r0, [sp, #72]	; 0x48
   198b8:	ldr	r0, [r0, #76]	; 0x4c
   198bc:	cmp	r0, #0
   198c0:	beq	1836c <__assert_fail@plt+0x6c0c>
   198c4:	mov	r0, r4
   198c8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   198cc:	cmp	r0, #0
   198d0:	beq	1a9cc <__assert_fail@plt+0x926c>
   198d4:	mov	r1, #0
   198d8:	mov	r2, r4
   198dc:	mov	r5, r0
   198e0:	bl	11670 <memset@plt>
   198e4:	sub	r0, fp, #188	; 0xbc
   198e8:	str	r8, [fp, #-192]	; 0xffffff40
   198ec:	mov	r1, #0
   198f0:	stm	r0, {r5, r6, sl}
   198f4:	ldr	r0, [sp, #28]
   198f8:	str	r1, [r0]
   198fc:	str	r1, [r0, #4]
   19900:	str	r1, [r0, #8]
   19904:	add	r0, sp, #104	; 0x68
   19908:	sub	r1, fp, #192	; 0xc0
   1990c:	bl	25ae0 <__assert_fail@plt+0x14380>
   19910:	mov	r9, r0
   19914:	mov	r0, #0
   19918:	bl	141c4 <__assert_fail@plt+0x2a64>
   1991c:	cmp	r9, #0
   19920:	mov	r4, r5
   19924:	bne	188b8 <__assert_fail@plt+0x7158>
   19928:	ldr	r0, [r8]
   1992c:	cmp	r0, #0
   19930:	beq	1864c <__assert_fail@plt+0x6eec>
   19934:	mov	r1, #0
   19938:	cmp	sl, #0
   1993c:	mov	r9, #0
   19940:	str	r1, [sp, #56]	; 0x38
   19944:	blt	199d8 <__assert_fail@plt+0x8278>
   19948:	mov	r7, #0
   1994c:	b	19960 <__assert_fail@plt+0x8200>
   19950:	add	r0, r8, r7, lsl #2
   19954:	add	r1, r7, #1
   19958:	ldr	r0, [r0, #4]
   1995c:	mov	r7, r1
   19960:	ldr	r2, [r4, r7, lsl #2]
   19964:	cmp	r0, #0
   19968:	beq	199c8 <__assert_fail@plt+0x8268>
   1996c:	cmp	r2, #0
   19970:	beq	199bc <__assert_fail@plt+0x825c>
   19974:	sub	r5, fp, #48	; 0x30
   19978:	add	r1, r0, #4
   1997c:	add	r2, r2, #4
   19980:	mov	r0, r5
   19984:	bl	22c64 <__assert_fail@plt+0x11504>
   19988:	cmp	r0, #0
   1998c:	str	r0, [fp, #-196]	; 0xffffff3c
   19990:	bne	183c0 <__assert_fail@plt+0x6c60>
   19994:	ldr	r1, [sp, #72]	; 0x48
   19998:	sub	r0, fp, #196	; 0xc4
   1999c:	mov	r2, r5
   199a0:	bl	24250 <__assert_fail@plt+0x12af0>
   199a4:	str	r0, [r8, r7, lsl #2]
   199a8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   199ac:	bl	141c4 <__assert_fail@plt+0x2a64>
   199b0:	ldr	r9, [fp, #-196]	; 0xffffff3c
   199b4:	cmp	r9, #0
   199b8:	bne	199d8 <__assert_fail@plt+0x8278>
   199bc:	cmp	r7, sl
   199c0:	blt	19950 <__assert_fail@plt+0x81f0>
   199c4:	b	199d4 <__assert_fail@plt+0x8274>
   199c8:	str	r2, [r8, r7, lsl #2]
   199cc:	cmp	r7, sl
   199d0:	blt	19950 <__assert_fail@plt+0x81f0>
   199d4:	mov	r9, #0
   199d8:	mov	r0, r4
   199dc:	bl	141c4 <__assert_fail@plt+0x2a64>
   199e0:	cmp	r9, #0
   199e4:	bne	188bc <__assert_fail@plt+0x715c>
   199e8:	ldr	r0, [sp, #204]	; 0xcc
   199ec:	bl	141c4 <__assert_fail@plt+0x2a64>
   199f0:	mov	r0, #0
   199f4:	str	r6, [sp, #200]	; 0xc8
   199f8:	str	r8, [sp, #204]	; 0xcc
   199fc:	str	sl, [sp, #196]	; 0xc4
   19a00:	bl	141c4 <__assert_fail@plt+0x2a64>
   19a04:	mov	r0, #0
   19a08:	bl	141c4 <__assert_fail@plt+0x2a64>
   19a0c:	ldr	r8, [sp, #96]	; 0x60
   19a10:	ldr	sl, [sp, #92]	; 0x5c
   19a14:	ldr	r5, [sp, #80]	; 0x50
   19a18:	sub	r6, fp, #48	; 0x30
   19a1c:	cmp	sl, #0
   19a20:	beq	1a968 <__assert_fail@plt+0x9208>
   19a24:	ldr	r4, [sp, #32]
   19a28:	cmp	sl, #1
   19a2c:	beq	19a50 <__assert_fail@plt+0x82f0>
   19a30:	ldr	r1, [fp, #16]
   19a34:	mvn	r0, r4
   19a38:	add	r0, r0, r1
   19a3c:	mov	r1, #255	; 0xff
   19a40:	lsl	r2, r0, #3
   19a44:	ldr	r0, [fp, #20]
   19a48:	add	r0, r0, #8
   19a4c:	bl	11670 <memset@plt>
   19a50:	ldr	r0, [sp, #196]	; 0xc4
   19a54:	ldr	r1, [fp, #20]
   19a58:	mov	r9, #0
   19a5c:	cmp	sl, #2
   19a60:	str	r9, [r1]
   19a64:	str	r0, [r1, #4]
   19a68:	bcc	1a848 <__assert_fail@plt+0x90e8>
   19a6c:	ldrb	r0, [r5, #28]
   19a70:	ands	r0, r0, #16
   19a74:	bne	1a848 <__assert_fail@plt+0x90e8>
   19a78:	ldrb	r1, [r8, #88]	; 0x58
   19a7c:	mov	r0, #0
   19a80:	tst	r1, #1
   19a84:	mov	r1, #0
   19a88:	beq	19a9c <__assert_fail@plt+0x833c>
   19a8c:	ldr	r2, [r8, #76]	; 0x4c
   19a90:	mov	r1, #0
   19a94:	cmp	r2, #0
   19a98:	movwgt	r1, #1
   19a9c:	movw	r2, #49136	; 0xbff0
   19aa0:	ldr	r7, [r5]
   19aa4:	cmp	r1, #0
   19aa8:	mov	r1, #0
   19aac:	movt	r2, #2
   19ab0:	vldr	d16, [r2]
   19ab4:	ldr	r2, [r2, #8]
   19ab8:	str	r2, [fp, #-40]	; 0xffffffd8
   19abc:	mov	r2, #16
   19ac0:	vstr	d16, [fp, #-48]	; 0xffffffd0
   19ac4:	str	r2, [fp, #-188]	; 0xffffff44
   19ac8:	sub	r2, fp, #192	; 0xc0
   19acc:	str	r0, [fp, #-192]	; 0xffffff40
   19ad0:	add	r5, r2, #12
   19ad4:	str	r5, [fp, #-184]	; 0xffffff48
   19ad8:	beq	19af8 <__assert_fail@plt+0x8398>
   19adc:	mov	r0, #48	; 0x30
   19ae0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   19ae4:	cmp	r0, #0
   19ae8:	str	r0, [fp, #-40]	; 0xffffffd8
   19aec:	beq	1a798 <__assert_fail@plt+0x9038>
   19af0:	ldr	r0, [fp, #-192]	; 0xffffff40
   19af4:	mov	r1, r6
   19af8:	str	r7, [sp, #68]	; 0x44
   19afc:	ldr	r7, [r7, #72]	; 0x48
   19b00:	cmp	r0, sl
   19b04:	str	r5, [sp, #76]	; 0x4c
   19b08:	str	r1, [sp, #80]	; 0x50
   19b0c:	bcs	19bf8 <__assert_fail@plt+0x8498>
   19b10:	ldr	r2, [sp, #76]	; 0x4c
   19b14:	sub	r0, fp, #192	; 0xc0
   19b18:	mov	r1, sl
   19b1c:	mov	r3, #8
   19b20:	bl	2a9b4 <__assert_fail@plt+0x19254>
   19b24:	cmp	r0, #0
   19b28:	bne	19bfc <__assert_fail@plt+0x849c>
   19b2c:	ldr	r0, [fp, #-184]	; 0xffffff48
   19b30:	ldr	r1, [sp, #76]	; 0x4c
   19b34:	cmp	r0, r1
   19b38:	beq	19b40 <__assert_fail@plt+0x83e0>
   19b3c:	bl	141c4 <__assert_fail@plt+0x2a64>
   19b40:	mov	r0, #16
   19b44:	mov	r9, #12
   19b48:	str	r0, [fp, #-188]	; 0xffffff44
   19b4c:	mov	r0, #0
   19b50:	str	r0, [fp, #-192]	; 0xffffff40
   19b54:	ldr	r0, [sp, #76]	; 0x4c
   19b58:	str	r0, [fp, #-184]	; 0xffffff48
   19b5c:	ldr	r0, [sp, #80]	; 0x50
   19b60:	cmp	r0, #0
   19b64:	beq	1a96c <__assert_fail@plt+0x920c>
   19b68:	ldr	r0, [sp, #80]	; 0x50
   19b6c:	ldr	r1, [r0]
   19b70:	ldr	r0, [r0, #8]
   19b74:	cmp	r1, #1
   19b78:	blt	1aa74 <__assert_fail@plt+0x9314>
   19b7c:	ldr	r4, [sp, #80]	; 0x50
   19b80:	mov	r5, #0
   19b84:	mov	r6, #0
   19b88:	add	r0, r0, r5
   19b8c:	ldr	r0, [r0, #20]
   19b90:	bl	141c4 <__assert_fail@plt+0x2a64>
   19b94:	ldr	r0, [r4, #8]
   19b98:	add	r0, r0, r5
   19b9c:	ldr	r0, [r0, #8]
   19ba0:	bl	141c4 <__assert_fail@plt+0x2a64>
   19ba4:	ldr	r1, [r4]
   19ba8:	ldr	r0, [r4, #8]
   19bac:	add	r6, r6, #1
   19bb0:	add	r5, r5, #24
   19bb4:	cmp	r6, r1
   19bb8:	blt	19b88 <__assert_fail@plt+0x8428>
   19bbc:	b	1aa74 <__assert_fail@plt+0x9314>
   19bc0:	ldr	r1, [r3, #8]
   19bc4:	cmp	r1, #0
   19bc8:	beq	19bd8 <__assert_fail@plt+0x8478>
   19bcc:	ldrsb	r1, [sl, #28]
   19bd0:	cmp	r1, #0
   19bd4:	blt	18038 <__assert_fail@plt+0x68d8>
   19bd8:	mov	r1, #0
   19bdc:	cmp	r6, #0
   19be0:	str	r1, [sp, #76]	; 0x4c
   19be4:	beq	1a790 <__assert_fail@plt+0x9030>
   19be8:	cmp	r0, #0
   19bec:	mov	r6, #0
   19bf0:	bne	1a9c0 <__assert_fail@plt+0x9260>
   19bf4:	b	1803c <__assert_fail@plt+0x68dc>
   19bf8:	str	sl, [fp, #-192]	; 0xffffff40
   19bfc:	ldr	r5, [fp, #20]
   19c00:	ldr	r0, [fp, #-184]	; 0xffffff48
   19c04:	lsl	r2, sl, #3
   19c08:	str	r2, [sp, #56]	; 0x38
   19c0c:	mov	r1, r5
   19c10:	str	r0, [sp, #60]	; 0x3c
   19c14:	bl	11484 <memcpy@plt>
   19c18:	ldr	r6, [r5]
   19c1c:	ldr	r0, [r5, #4]
   19c20:	mov	ip, #0
   19c24:	cmp	r6, r0
   19c28:	ble	19cb8 <__assert_fail@plt+0x8558>
   19c2c:	mov	r0, ip
   19c30:	bl	141c4 <__assert_fail@plt+0x2a64>
   19c34:	ldr	r0, [fp, #-184]	; 0xffffff48
   19c38:	ldr	r5, [sp, #76]	; 0x4c
   19c3c:	cmp	r0, r5
   19c40:	beq	19c48 <__assert_fail@plt+0x84e8>
   19c44:	bl	141c4 <__assert_fail@plt+0x2a64>
   19c48:	ldr	r6, [sp, #80]	; 0x50
   19c4c:	mov	r0, #16
   19c50:	str	r0, [fp, #-188]	; 0xffffff44
   19c54:	mov	r0, #0
   19c58:	str	r0, [fp, #-192]	; 0xffffff40
   19c5c:	str	r5, [fp, #-184]	; 0xffffff48
   19c60:	cmp	r6, #0
   19c64:	beq	1a848 <__assert_fail@plt+0x90e8>
   19c68:	ldr	r1, [r6]
   19c6c:	ldr	r0, [r6, #8]
   19c70:	cmp	r1, #1
   19c74:	blt	1a840 <__assert_fail@plt+0x90e0>
   19c78:	mov	r4, #0
   19c7c:	mov	r5, #0
   19c80:	add	r0, r0, r4
   19c84:	ldr	r0, [r0, #20]
   19c88:	bl	141c4 <__assert_fail@plt+0x2a64>
   19c8c:	ldr	r0, [r6, #8]
   19c90:	add	r0, r0, r4
   19c94:	ldr	r0, [r0, #8]
   19c98:	bl	141c4 <__assert_fail@plt+0x2a64>
   19c9c:	ldr	r1, [r6]
   19ca0:	ldr	r0, [r6, #8]
   19ca4:	add	r5, r5, #1
   19ca8:	add	r4, r4, #24
   19cac:	cmp	r5, r1
   19cb0:	blt	19c80 <__assert_fail@plt+0x8520>
   19cb4:	b	1a840 <__assert_fail@plt+0x90e0>
   19cb8:	lsl	r0, sl, #4
   19cbc:	mov	lr, #1
   19cc0:	mov	r1, #0
   19cc4:	mov	ip, #0
   19cc8:	str	r0, [sp, #48]	; 0x30
   19ccc:	mov	r0, #0
   19cd0:	str	r0, [sp, #52]	; 0x34
   19cd4:	ldr	r0, [sp, #68]	; 0x44
   19cd8:	mov	r5, r1
   19cdc:	ldr	r0, [r0]
   19ce0:	add	r1, r0, r7, lsl #3
   19ce4:	ldr	r3, [r1, #4]
   19ce8:	uxtb	r2, r3
   19cec:	cmp	r2, #9
   19cf0:	beq	19d20 <__assert_fail@plt+0x85c0>
   19cf4:	cmp	r2, #8
   19cf8:	bne	19d94 <__assert_fail@plt+0x8634>
   19cfc:	ldr	r0, [r0, r7, lsl #3]
   19d00:	add	r0, r0, #1
   19d04:	cmp	r0, sl
   19d08:	bge	19d94 <__assert_fail@plt+0x8634>
   19d0c:	ldr	r1, [fp, #20]
   19d10:	str	r6, [r1, r0, lsl #3]!
   19d14:	mvn	r0, #0
   19d18:	str	r0, [r1, #4]
   19d1c:	b	19d94 <__assert_fail@plt+0x8634>
   19d20:	ldr	r0, [r0, r7, lsl #3]
   19d24:	add	r0, r0, #1
   19d28:	cmp	r0, sl
   19d2c:	bge	19d94 <__assert_fail@plt+0x8634>
   19d30:	ldr	r1, [fp, #20]
   19d34:	ldr	r2, [r1, r0, lsl #3]
   19d38:	cmp	r2, r6
   19d3c:	bge	19d50 <__assert_fail@plt+0x85f0>
   19d40:	add	r0, r1, r0, lsl #3
   19d44:	str	r6, [r0, #4]
   19d48:	ldr	r0, [sp, #60]	; 0x3c
   19d4c:	b	19d70 <__assert_fail@plt+0x8610>
   19d50:	tst	r3, #524288	; 0x80000
   19d54:	beq	19d88 <__assert_fail@plt+0x8628>
   19d58:	ldr	r1, [sp, #60]	; 0x3c
   19d5c:	ldr	r1, [r1, r0, lsl #3]
   19d60:	cmn	r1, #1
   19d64:	beq	19d88 <__assert_fail@plt+0x8628>
   19d68:	ldr	r0, [fp, #20]
   19d6c:	ldr	r1, [sp, #60]	; 0x3c
   19d70:	ldr	r2, [sp, #56]	; 0x38
   19d74:	str	ip, [sp, #64]	; 0x40
   19d78:	bl	11484 <memcpy@plt>
   19d7c:	ldr	ip, [sp, #64]	; 0x40
   19d80:	mov	lr, #1
   19d84:	b	19d94 <__assert_fail@plt+0x8634>
   19d88:	ldr	r1, [fp, #20]
   19d8c:	add	r0, r1, r0, lsl #3
   19d90:	str	r6, [r0, #4]
   19d94:	ldr	r0, [fp, #20]
   19d98:	ldr	r0, [r0, #4]
   19d9c:	cmp	r6, r0
   19da0:	ldreq	r0, [sp, #200]	; 0xc8
   19da4:	cmpeq	r7, r0
   19da8:	beq	19e04 <__assert_fail@plt+0x86a4>
   19dac:	ldr	r0, [sp, #80]	; 0x50
   19db0:	cmp	r0, #0
   19db4:	beq	19e48 <__assert_fail@plt+0x86e8>
   19db8:	mov	r2, r5
   19dbc:	cmp	r5, #1
   19dc0:	blt	19ee4 <__assert_fail@plt+0x8784>
   19dc4:	mov	r0, #0
   19dc8:	subs	r1, r2, #1
   19dcc:	str	r6, [sp, #72]	; 0x48
   19dd0:	beq	19df4 <__assert_fail@plt+0x8694>
   19dd4:	add	r2, r0, r1
   19dd8:	lsr	r3, r2, #1
   19ddc:	ldr	r6, [ip, r3, lsl #2]
   19de0:	cmp	r6, r7
   19de4:	movge	r1, r3
   19de8:	addlt	r0, lr, r2, lsr #1
   19dec:	cmp	r0, r1
   19df0:	bcc	19dd4 <__assert_fail@plt+0x8674>
   19df4:	ldr	r0, [ip, r0, lsl #2]
   19df8:	ldr	r6, [sp, #72]	; 0x48
   19dfc:	cmp	r0, r7
   19e00:	bne	19e48 <__assert_fail@plt+0x86e8>
   19e04:	ldr	r6, [sp, #80]	; 0x50
   19e08:	cmp	r6, #0
   19e0c:	beq	1a7bc <__assert_fail@plt+0x905c>
   19e10:	ldr	r5, [sp, #76]	; 0x4c
   19e14:	mov	r0, #0
   19e18:	ldr	r2, [fp, #20]
   19e1c:	ldr	r1, [r2, r0, lsl #3]
   19e20:	cmp	r1, #0
   19e24:	blt	19e38 <__assert_fail@plt+0x86d8>
   19e28:	add	r1, r2, r0, lsl #3
   19e2c:	ldr	r1, [r1, #4]
   19e30:	cmn	r1, #1
   19e34:	beq	19e50 <__assert_fail@plt+0x86f0>
   19e38:	add	r0, r0, #1
   19e3c:	cmp	r0, sl
   19e40:	bcc	19e18 <__assert_fail@plt+0x86b8>
   19e44:	b	1a7c0 <__assert_fail@plt+0x9060>
   19e48:	mov	r2, r5
   19e4c:	b	19ee4 <__assert_fail@plt+0x8784>
   19e50:	ldr	r0, [r6]
   19e54:	cmp	r0, #0
   19e58:	beq	1a7c0 <__assert_fail@plt+0x9060>
   19e5c:	sub	r0, r0, #1
   19e60:	ldr	r7, [sp, #56]	; 0x38
   19e64:	str	ip, [sp, #64]	; 0x40
   19e68:	str	r0, [r6]
   19e6c:	add	r5, r0, r0, lsl #1
   19e70:	ldr	r4, [r6, #8]
   19e74:	mov	r2, r7
   19e78:	ldr	r0, [r4, r5, lsl #3]!
   19e7c:	str	r0, [sp, #72]	; 0x48
   19e80:	ldr	r1, [r4, #8]
   19e84:	ldr	r0, [fp, #20]
   19e88:	bl	11484 <memcpy@plt>
   19e8c:	ldr	r0, [r4, #8]
   19e90:	mov	r2, r7
   19e94:	add	r1, r0, sl, lsl #3
   19e98:	ldr	r0, [sp, #60]	; 0x3c
   19e9c:	bl	11484 <memcpy@plt>
   19ea0:	ldr	r0, [sp, #64]	; 0x40
   19ea4:	bl	141c4 <__assert_fail@plt+0x2a64>
   19ea8:	ldr	r0, [r6, #8]
   19eac:	add	r0, r0, r5, lsl #3
   19eb0:	ldr	r0, [r0, #8]
   19eb4:	bl	141c4 <__assert_fail@plt+0x2a64>
   19eb8:	ldr	r0, [r6, #8]
   19ebc:	add	r0, r0, r5, lsl #3
   19ec0:	ldr	r7, [r0, #4]
   19ec4:	ldr	ip, [r0, #20]
   19ec8:	cmn	r7, #1
   19ecc:	ble	1a7b4 <__assert_fail@plt+0x9054>
   19ed0:	ldr	r1, [r0, #12]
   19ed4:	ldr	r2, [r0, #16]
   19ed8:	ldr	r6, [sp, #72]	; 0x48
   19edc:	mov	lr, #1
   19ee0:	str	r1, [sp, #52]	; 0x34
   19ee4:	ldr	r5, [sp, #188]	; 0xbc
   19ee8:	ldr	r0, [r5]
   19eec:	add	r1, r0, r7, lsl #3
   19ef0:	ldr	r1, [r1, #4]
   19ef4:	tst	r1, #8
   19ef8:	bne	19f98 <__assert_fail@plt+0x8838>
   19efc:	tst	r1, #1048576	; 0x100000
   19f00:	bne	1a020 <__assert_fail@plt+0x88c0>
   19f04:	uxtb	r1, r1
   19f08:	cmp	r1, #4
   19f0c:	bne	1a054 <__assert_fail@plt+0x88f4>
   19f10:	ldr	r0, [r0, r7, lsl #3]
   19f14:	mov	r4, #0
   19f18:	add	r0, r0, #1
   19f1c:	cmp	r0, sl
   19f20:	bge	19f3c <__assert_fail@plt+0x87dc>
   19f24:	ldr	r1, [fp, #20]
   19f28:	mov	r3, r2
   19f2c:	ldr	r2, [r1, r0, lsl #3]!
   19f30:	ldr	r1, [r1, #4]
   19f34:	sub	r4, r1, r2
   19f38:	mov	r2, r3
   19f3c:	ldr	r1, [sp, #80]	; 0x50
   19f40:	cmp	r1, #0
   19f44:	beq	1a390 <__assert_fail@plt+0x8c30>
   19f48:	cmp	r0, sl
   19f4c:	bge	19f90 <__assert_fail@plt+0x8830>
   19f50:	mov	r3, r2
   19f54:	ldr	r2, [fp, #20]
   19f58:	ldr	r1, [r2, r0, lsl #3]
   19f5c:	cmn	r1, #1
   19f60:	beq	19f90 <__assert_fail@plt+0x8830>
   19f64:	add	r0, r2, r0, lsl #3
   19f68:	ldr	r0, [r0, #4]
   19f6c:	cmn	r0, #1
   19f70:	beq	19f90 <__assert_fail@plt+0x8830>
   19f74:	cmp	r4, #0
   19f78:	mov	r2, r3
   19f7c:	beq	1a3b4 <__assert_fail@plt+0x8c54>
   19f80:	ldr	r0, [sp, #132]	; 0x84
   19f84:	sub	r0, r0, r6
   19f88:	cmp	r0, r4
   19f8c:	bge	1a594 <__assert_fail@plt+0x8e34>
   19f90:	ldr	r7, [sp, #80]	; 0x50
   19f94:	b	1a22c <__assert_fail@plt+0x8acc>
   19f98:	ldr	r0, [sp, #204]	; 0xcc
   19f9c:	ldr	r4, [r5, #20]
   19fa0:	cmp	r2, #1
   19fa4:	ldr	r0, [r0, r6, lsl #2]
   19fa8:	str	r0, [sp, #88]	; 0x58
   19fac:	blt	1a000 <__assert_fail@plt+0x88a0>
   19fb0:	str	r4, [sp, #100]	; 0x64
   19fb4:	mov	r5, r6
   19fb8:	mov	r4, r2
   19fbc:	mov	r0, #0
   19fc0:	subs	r1, r2, #1
   19fc4:	beq	19fe8 <__assert_fail@plt+0x8888>
   19fc8:	add	r2, r0, r1
   19fcc:	lsr	r3, r2, #1
   19fd0:	ldr	r6, [ip, r3, lsl #2]
   19fd4:	cmp	r6, r7
   19fd8:	movge	r1, r3
   19fdc:	addlt	r0, lr, r2, lsr #1
   19fe0:	cmp	r0, r1
   19fe4:	bcc	19fc8 <__assert_fail@plt+0x8868>
   19fe8:	ldr	r0, [ip, r0, lsl #2]
   19fec:	mov	r2, r4
   19ff0:	ldr	r4, [sp, #100]	; 0x64
   19ff4:	mov	r6, r5
   19ff8:	cmp	r0, r7
   19ffc:	beq	1a134 <__assert_fail@plt+0x89d4>
   1a000:	ldr	r0, [sp, #52]	; 0x34
   1a004:	cmp	r0, #0
   1a008:	beq	1a110 <__assert_fail@plt+0x89b0>
   1a00c:	cmp	r2, #0
   1a010:	bne	1a5dc <__assert_fail@plt+0x8e7c>
   1a014:	str	r7, [ip]
   1a018:	mov	r2, #1
   1a01c:	b	1a134 <__assert_fail@plt+0x89d4>
   1a020:	mov	r0, r5
   1a024:	mov	r1, r7
   1a028:	add	r2, sp, #104	; 0x68
   1a02c:	mov	r3, r6
   1a030:	str	r5, [sp, #100]	; 0x64
   1a034:	mov	r4, ip
   1a038:	bl	244e0 <__assert_fail@plt+0x12d80>
   1a03c:	mov	lr, #1
   1a040:	mov	ip, r4
   1a044:	mov	r1, r0
   1a048:	ldr	r5, [sp, #100]	; 0x64
   1a04c:	cmp	r1, #0
   1a050:	bne	1a080 <__assert_fail@plt+0x8920>
   1a054:	ldr	r0, [r5]
   1a058:	mov	r2, r6
   1a05c:	mov	r4, ip
   1a060:	add	r1, r0, r7, lsl #3
   1a064:	add	r0, sp, #104	; 0x68
   1a068:	bl	247d4 <__assert_fail@plt+0x13074>
   1a06c:	mov	lr, #1
   1a070:	mov	ip, r4
   1a074:	mov	r1, #1
   1a078:	cmp	r0, #0
   1a07c:	beq	1a220 <__assert_fail@plt+0x8ac0>
   1a080:	ldr	r0, [r5, #12]
   1a084:	add	r6, r1, r6
   1a088:	ldr	r5, [r0, r7, lsl #2]
   1a08c:	ldr	r7, [sp, #80]	; 0x50
   1a090:	cmp	r7, #0
   1a094:	beq	1a2cc <__assert_fail@plt+0x8b6c>
   1a098:	ldr	r0, [sp, #196]	; 0xc4
   1a09c:	cmp	r6, r0
   1a0a0:	bgt	1a22c <__assert_fail@plt+0x8acc>
   1a0a4:	ldr	r0, [sp, #204]	; 0xcc
   1a0a8:	ldr	r0, [r0, r6, lsl #2]
   1a0ac:	cmp	r0, #0
   1a0b0:	beq	1a22c <__assert_fail@plt+0x8acc>
   1a0b4:	ldr	r1, [r0, #8]
   1a0b8:	cmp	r1, #1
   1a0bc:	blt	1a22c <__assert_fail@plt+0x8acc>
   1a0c0:	ldr	r0, [r0, #12]
   1a0c4:	mov	r4, r6
   1a0c8:	subs	r1, r1, #1
   1a0cc:	mov	r2, #0
   1a0d0:	beq	1a0f8 <__assert_fail@plt+0x8998>
   1a0d4:	mov	r2, #0
   1a0d8:	add	r3, r2, r1
   1a0dc:	lsr	r7, r3, #1
   1a0e0:	ldr	r6, [r0, r7, lsl #2]
   1a0e4:	cmp	r6, r5
   1a0e8:	movge	r1, r7
   1a0ec:	addlt	r2, lr, r3, lsr #1
   1a0f0:	cmp	r2, r1
   1a0f4:	bcc	1a0d8 <__assert_fail@plt+0x8978>
   1a0f8:	ldr	r0, [r0, r2, lsl #2]
   1a0fc:	mov	r6, r4
   1a100:	mov	r1, #0
   1a104:	cmp	r0, r5
   1a108:	beq	1a4ac <__assert_fail@plt+0x8d4c>
   1a10c:	b	1a220 <__assert_fail@plt+0x8ac0>
   1a110:	mov	r0, #4
   1a114:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1a118:	cmp	r0, #0
   1a11c:	beq	1ab1c <__assert_fail@plt+0x93bc>
   1a120:	mov	ip, r0
   1a124:	str	r7, [r0]
   1a128:	mov	r0, #1
   1a12c:	mov	r2, #1
   1a130:	str	r0, [sp, #52]	; 0x34
   1a134:	add	r0, r7, r7, lsl #1
   1a138:	add	r1, r4, r0, lsl #2
   1a13c:	ldr	lr, [r1, #4]
   1a140:	cmp	lr, #1
   1a144:	blt	1a220 <__assert_fail@plt+0x8ac0>
   1a148:	ldr	r0, [r1, #8]
   1a14c:	str	r2, [sp, #44]	; 0x2c
   1a150:	str	r6, [sp, #72]	; 0x48
   1a154:	mov	r6, #0
   1a158:	mvn	r5, #0
   1a15c:	str	ip, [sp, #64]	; 0x40
   1a160:	str	r0, [sp, #84]	; 0x54
   1a164:	ldr	r0, [sp, #88]	; 0x58
   1a168:	ldr	r2, [r0, #8]
   1a16c:	sub	r1, r2, #1
   1a170:	cmp	r2, #1
   1a174:	blt	1a1f4 <__assert_fail@plt+0x8a94>
   1a178:	ldr	r0, [sp, #84]	; 0x54
   1a17c:	str	r5, [sp, #100]	; 0x64
   1a180:	mov	r5, #0
   1a184:	cmp	r1, #0
   1a188:	ldr	r7, [r0, r6, lsl #2]
   1a18c:	ldr	r0, [sp, #88]	; 0x58
   1a190:	ldr	r4, [r0, #12]
   1a194:	beq	1a1c0 <__assert_fail@plt+0x8a60>
   1a198:	mov	r3, r1
   1a19c:	mov	ip, #1
   1a1a0:	add	r0, r5, r3
   1a1a4:	lsr	r8, r0, #1
   1a1a8:	ldr	sl, [r4, r8, lsl #2]
   1a1ac:	cmp	sl, r7
   1a1b0:	movge	r3, r8
   1a1b4:	addlt	r5, ip, r0, lsr #1
   1a1b8:	cmp	r5, r3
   1a1bc:	bcc	1a1a0 <__assert_fail@plt+0x8a40>
   1a1c0:	ldr	r0, [r4, r5, lsl #2]
   1a1c4:	cmp	r0, r7
   1a1c8:	bne	1a1e8 <__assert_fail@plt+0x8a88>
   1a1cc:	ldr	r4, [sp, #100]	; 0x64
   1a1d0:	ldr	r8, [sp, #96]	; 0x60
   1a1d4:	ldr	sl, [sp, #92]	; 0x5c
   1a1d8:	cmn	r4, #1
   1a1dc:	bne	1a2dc <__assert_fail@plt+0x8b7c>
   1a1e0:	mov	r5, r7
   1a1e4:	b	1a1f4 <__assert_fail@plt+0x8a94>
   1a1e8:	ldr	r8, [sp, #96]	; 0x60
   1a1ec:	ldr	sl, [sp, #92]	; 0x5c
   1a1f0:	ldr	r5, [sp, #100]	; 0x64
   1a1f4:	add	r6, r6, #1
   1a1f8:	cmp	r6, lr
   1a1fc:	blt	1a170 <__assert_fail@plt+0x8a10>
   1a200:	ldr	ip, [sp, #64]	; 0x40
   1a204:	ldr	r6, [sp, #72]	; 0x48
   1a208:	ldr	r1, [sp, #44]	; 0x2c
   1a20c:	mov	lr, #1
   1a210:	cmn	r5, #1
   1a214:	bgt	1a4b4 <__assert_fail@plt+0x8d54>
   1a218:	cmn	r5, #2
   1a21c:	beq	1aa80 <__assert_fail@plt+0x9320>
   1a220:	ldr	r7, [sp, #80]	; 0x50
   1a224:	cmp	r7, #0
   1a228:	beq	1a9e4 <__assert_fail@plt+0x9284>
   1a22c:	ldr	r0, [r7]
   1a230:	mov	r4, #0
   1a234:	cmp	r0, #0
   1a238:	beq	1a9e8 <__assert_fail@plt+0x9288>
   1a23c:	sub	r0, r0, #1
   1a240:	ldr	r5, [sp, #56]	; 0x38
   1a244:	str	ip, [sp, #64]	; 0x40
   1a248:	str	r0, [r7]
   1a24c:	add	r6, r0, r0, lsl #1
   1a250:	ldr	r4, [r7, #8]
   1a254:	mov	r2, r5
   1a258:	ldr	r0, [r4, r6, lsl #3]!
   1a25c:	str	r0, [sp, #72]	; 0x48
   1a260:	ldr	r1, [r4, #8]
   1a264:	ldr	r0, [fp, #20]
   1a268:	bl	11484 <memcpy@plt>
   1a26c:	ldr	r0, [r4, #8]
   1a270:	mov	r2, r5
   1a274:	add	r1, r0, sl, lsl #3
   1a278:	ldr	r0, [sp, #60]	; 0x3c
   1a27c:	bl	11484 <memcpy@plt>
   1a280:	ldr	r0, [sp, #64]	; 0x40
   1a284:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a288:	ldr	r0, [r7, #8]
   1a28c:	add	r0, r0, r6, lsl #3
   1a290:	ldr	r0, [r0, #8]
   1a294:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a298:	ldr	r0, [r7, #8]
   1a29c:	add	r0, r0, r6, lsl #3
   1a2a0:	ldr	r7, [r0, #4]
   1a2a4:	ldr	ip, [r0, #20]
   1a2a8:	cmn	r7, #1
   1a2ac:	ble	1a7a0 <__assert_fail@plt+0x9040>
   1a2b0:	ldr	r1, [r0, #12]
   1a2b4:	ldr	r4, [sp, #32]
   1a2b8:	ldr	r6, [sp, #72]	; 0x48
   1a2bc:	mov	lr, #1
   1a2c0:	str	r1, [sp, #52]	; 0x34
   1a2c4:	ldr	r1, [r0, #16]
   1a2c8:	b	1a4bc <__assert_fail@plt+0x8d5c>
   1a2cc:	mov	r1, #0
   1a2d0:	cmn	r5, #1
   1a2d4:	bgt	1a4b4 <__assert_fail@plt+0x8d54>
   1a2d8:	b	1a218 <__assert_fail@plt+0x8ab8>
   1a2dc:	ldr	r1, [sp, #44]	; 0x2c
   1a2e0:	ldr	ip, [sp, #64]	; 0x40
   1a2e4:	mov	lr, #1
   1a2e8:	cmp	r1, #1
   1a2ec:	blt	1a340 <__assert_fail@plt+0x8be0>
   1a2f0:	mov	r0, #0
   1a2f4:	subs	r1, r1, #1
   1a2f8:	beq	1a31c <__assert_fail@plt+0x8bbc>
   1a2fc:	add	r2, r0, r1
   1a300:	lsr	r3, r2, #1
   1a304:	ldr	r6, [ip, r3, lsl #2]
   1a308:	cmp	r6, r4
   1a30c:	movge	r1, r3
   1a310:	addlt	r0, lr, r2, lsr #1
   1a314:	cmp	r0, r1
   1a318:	bcc	1a2fc <__assert_fail@plt+0x8b9c>
   1a31c:	ldr	r0, [ip, r0, lsl #2]
   1a320:	ldr	r1, [sp, #44]	; 0x2c
   1a324:	cmp	r0, r4
   1a328:	bne	1a340 <__assert_fail@plt+0x8be0>
   1a32c:	ldr	r6, [sp, #72]	; 0x48
   1a330:	mov	r5, r7
   1a334:	cmn	r5, #1
   1a338:	bgt	1a4b4 <__assert_fail@plt+0x8d54>
   1a33c:	b	1a218 <__assert_fail@plt+0x8ab8>
   1a340:	ldr	r5, [sp, #80]	; 0x50
   1a344:	cmp	r5, #0
   1a348:	beq	1a4a4 <__assert_fail@plt+0x8d44>
   1a34c:	ldr	r6, [r5]
   1a350:	ldr	r0, [r5, #4]
   1a354:	add	r1, r6, #1
   1a358:	cmp	r1, r0
   1a35c:	str	r1, [r5]
   1a360:	bne	1a3d8 <__assert_fail@plt+0x8c78>
   1a364:	ldr	r0, [r5, #8]
   1a368:	add	r1, r1, r1, lsl #1
   1a36c:	lsl	r1, r1, #4
   1a370:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1a374:	cmp	r0, #0
   1a378:	beq	1aa7c <__assert_fail@plt+0x931c>
   1a37c:	str	r0, [r5, #8]
   1a380:	ldr	r1, [r5, #4]
   1a384:	lsl	r1, r1, #1
   1a388:	str	r1, [r5, #4]
   1a38c:	b	1a3dc <__assert_fail@plt+0x8c7c>
   1a390:	cmp	r4, #0
   1a394:	beq	1a3b4 <__assert_fail@plt+0x8c54>
   1a398:	ldr	r0, [r5, #12]
   1a39c:	add	r6, r4, r6
   1a3a0:	mov	r1, #0
   1a3a4:	ldr	r5, [r0, r7, lsl #2]
   1a3a8:	cmn	r5, #1
   1a3ac:	bgt	1a4b4 <__assert_fail@plt+0x8d54>
   1a3b0:	b	1a218 <__assert_fail@plt+0x8ab8>
   1a3b4:	ldr	r0, [sp, #52]	; 0x34
   1a3b8:	str	r5, [sp, #100]	; 0x64
   1a3bc:	cmp	r0, #0
   1a3c0:	beq	1a4d0 <__assert_fail@plt+0x8d70>
   1a3c4:	cmp	r2, #0
   1a3c8:	bne	1a6b4 <__assert_fail@plt+0x8f54>
   1a3cc:	str	r7, [ip]
   1a3d0:	mov	r5, #1
   1a3d4:	b	1a4f8 <__assert_fail@plt+0x8d98>
   1a3d8:	ldr	r0, [r5, #8]
   1a3dc:	ldr	r1, [sp, #72]	; 0x48
   1a3e0:	add	r6, r6, r6, lsl #1
   1a3e4:	str	r1, [r0, r6, lsl #3]!
   1a3e8:	str	r7, [r0, #4]
   1a3ec:	ldr	r0, [sp, #48]	; 0x30
   1a3f0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1a3f4:	ldr	r1, [r5, #8]
   1a3f8:	cmp	r0, #0
   1a3fc:	add	r4, r1, r6, lsl #3
   1a400:	str	r0, [r4, #8]!
   1a404:	beq	1aa7c <__assert_fail@plt+0x931c>
   1a408:	ldr	r7, [sp, #56]	; 0x38
   1a40c:	ldr	r1, [fp, #20]
   1a410:	mov	r2, r7
   1a414:	bl	11484 <memcpy@plt>
   1a418:	ldr	r0, [r4]
   1a41c:	ldr	r1, [sp, #60]	; 0x3c
   1a420:	mov	r2, r7
   1a424:	add	r0, r0, sl, lsl #3
   1a428:	bl	11484 <memcpy@plt>
   1a42c:	ldr	r0, [r5, #8]
   1a430:	ldr	r1, [sp, #44]	; 0x2c
   1a434:	add	r6, r0, r6, lsl #3
   1a438:	cmp	r1, #1
   1a43c:	mov	r5, r6
   1a440:	str	r1, [r5, #16]!
   1a444:	sub	r4, r5, #4
   1a448:	blt	1a48c <__assert_fail@plt+0x8d2c>
   1a44c:	lsl	r7, r1, #2
   1a450:	str	r1, [r4]
   1a454:	mov	r0, r7
   1a458:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1a45c:	cmp	r0, #0
   1a460:	str	r0, [r6, #20]
   1a464:	beq	1ab24 <__assert_fail@plt+0x93c4>
   1a468:	ldr	r4, [sp, #64]	; 0x40
   1a46c:	mov	r2, r7
   1a470:	mov	r1, r4
   1a474:	bl	11484 <memcpy@plt>
   1a478:	ldr	r6, [sp, #72]	; 0x48
   1a47c:	ldr	r1, [sp, #44]	; 0x2c
   1a480:	ldr	r5, [sp, #100]	; 0x64
   1a484:	mov	ip, r4
   1a488:	b	1a20c <__assert_fail@plt+0x8aac>
   1a48c:	ldr	ip, [sp, #64]	; 0x40
   1a490:	mov	r0, #0
   1a494:	mov	lr, #1
   1a498:	str	r0, [r4]
   1a49c:	str	r0, [r4, #4]
   1a4a0:	str	r0, [r4, #8]
   1a4a4:	ldr	r6, [sp, #72]	; 0x48
   1a4a8:	ldr	r5, [sp, #100]	; 0x64
   1a4ac:	cmn	r5, #1
   1a4b0:	ble	1a218 <__assert_fail@plt+0x8ab8>
   1a4b4:	ldr	r4, [sp, #32]
   1a4b8:	mov	r7, r5
   1a4bc:	ldr	r0, [fp, #20]
   1a4c0:	ldr	r0, [r0, #4]
   1a4c4:	cmp	r6, r0
   1a4c8:	ble	19cd4 <__assert_fail@plt+0x8574>
   1a4cc:	b	19c2c <__assert_fail@plt+0x84cc>
   1a4d0:	mov	r0, #4
   1a4d4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1a4d8:	cmp	r0, #0
   1a4dc:	beq	1ab1c <__assert_fail@plt+0x93bc>
   1a4e0:	mov	ip, r0
   1a4e4:	str	r7, [r0]
   1a4e8:	mov	r0, #1
   1a4ec:	mov	r5, #1
   1a4f0:	mov	lr, #1
   1a4f4:	str	r0, [sp, #52]	; 0x34
   1a4f8:	ldr	r0, [sp, #204]	; 0xcc
   1a4fc:	ldr	r0, [r0, r6, lsl #2]
   1a500:	ldr	r1, [r0, #8]
   1a504:	cmp	r1, #1
   1a508:	blt	1a58c <__assert_fail@plt+0x8e2c>
   1a50c:	ldr	r2, [sp, #100]	; 0x64
   1a510:	add	r3, r7, r7, lsl #1
   1a514:	str	r5, [sp, #44]	; 0x2c
   1a518:	ldr	r0, [r0, #12]
   1a51c:	str	r4, [sp, #88]	; 0x58
   1a520:	str	r6, [sp, #72]	; 0x48
   1a524:	ldr	r2, [r2, #20]
   1a528:	add	r2, r2, r3, lsl #2
   1a52c:	ldr	r2, [r2, #8]
   1a530:	ldr	r5, [r2]
   1a534:	subs	r2, r1, #1
   1a538:	mov	r1, #0
   1a53c:	beq	1a568 <__assert_fail@plt+0x8e08>
   1a540:	add	r3, r1, r2
   1a544:	mov	r4, r5
   1a548:	lsr	r6, r3, #1
   1a54c:	ldr	r5, [r0, r6, lsl #2]
   1a550:	cmp	r5, r4
   1a554:	mov	r5, r4
   1a558:	movge	r2, r6
   1a55c:	addlt	r1, lr, r3, lsr #1
   1a560:	cmp	r1, r2
   1a564:	bcc	1a540 <__assert_fail@plt+0x8de0>
   1a568:	ldr	r0, [r0, r1, lsl #2]
   1a56c:	ldr	r6, [sp, #72]	; 0x48
   1a570:	ldr	r1, [sp, #88]	; 0x58
   1a574:	cmp	r0, r5
   1a578:	bne	1a048 <__assert_fail@plt+0x88e8>
   1a57c:	ldr	r1, [sp, #44]	; 0x2c
   1a580:	cmn	r5, #1
   1a584:	bgt	1a4b4 <__assert_fail@plt+0x8d54>
   1a588:	b	1a218 <__assert_fail@plt+0x8ab8>
   1a58c:	ldr	r5, [sp, #100]	; 0x64
   1a590:	b	1a054 <__assert_fail@plt+0x88f4>
   1a594:	ldr	r2, [sp, #108]	; 0x6c
   1a598:	str	ip, [sp, #64]	; 0x40
   1a59c:	add	r0, r2, r1
   1a5a0:	add	r1, r2, r6
   1a5a4:	mov	r2, r4
   1a5a8:	bl	114d8 <memcmp@plt>
   1a5ac:	cmp	r0, #0
   1a5b0:	beq	1a5c0 <__assert_fail@plt+0x8e60>
   1a5b4:	ldr	r7, [sp, #80]	; 0x50
   1a5b8:	ldr	ip, [sp, #64]	; 0x40
   1a5bc:	b	1a22c <__assert_fail@plt+0x8acc>
   1a5c0:	ldr	r0, [r5, #12]
   1a5c4:	ldr	ip, [sp, #64]	; 0x40
   1a5c8:	add	r6, r4, r6
   1a5cc:	mov	lr, #1
   1a5d0:	ldr	r5, [r0, r7, lsl #2]
   1a5d4:	ldr	r7, [sp, #80]	; 0x50
   1a5d8:	b	1a098 <__assert_fail@plt+0x8938>
   1a5dc:	ldr	r0, [sp, #52]	; 0x34
   1a5e0:	mov	r8, r2
   1a5e4:	str	r4, [sp, #100]	; 0x64
   1a5e8:	cmp	r0, r2
   1a5ec:	bne	1a620 <__assert_fail@plt+0x8ec0>
   1a5f0:	lsl	r1, r8, #3
   1a5f4:	mov	r0, ip
   1a5f8:	mov	r4, r8
   1a5fc:	mov	r5, ip
   1a600:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1a604:	mov	ip, r5
   1a608:	cmp	r0, #0
   1a60c:	beq	1aa80 <__assert_fail@plt+0x9320>
   1a610:	mov	r1, r8
   1a614:	mov	ip, r0
   1a618:	lsl	r1, r8, #1
   1a61c:	str	r1, [sp, #52]	; 0x34
   1a620:	ldr	r0, [ip]
   1a624:	mov	r2, r8
   1a628:	cmp	r0, r7
   1a62c:	ble	1a668 <__assert_fail@plt+0x8f08>
   1a630:	cmp	r8, #1
   1a634:	blt	1a698 <__assert_fail@plt+0x8f38>
   1a638:	mov	r0, r8
   1a63c:	add	r1, ip, r8, lsl #2
   1a640:	add	r0, r8, #1
   1a644:	mov	r2, r1
   1a648:	ldr	r3, [r2, #-4]!
   1a64c:	sub	r0, r0, #1
   1a650:	cmp	r0, #1
   1a654:	str	r3, [r1]
   1a658:	mov	r1, r2
   1a65c:	bgt	1a648 <__assert_fail@plt+0x8ee8>
   1a660:	sub	r2, r0, #1
   1a664:	b	1a698 <__assert_fail@plt+0x8f38>
   1a668:	add	r0, ip, r8, lsl #2
   1a66c:	ldr	r1, [r0, #-4]
   1a670:	cmp	r1, r7
   1a674:	ble	1a698 <__assert_fail@plt+0x8f38>
   1a678:	sub	r2, r8, #2
   1a67c:	str	r1, [r0]
   1a680:	sub	r2, r2, #1
   1a684:	ldr	r1, [r0, #-8]
   1a688:	sub	r0, r0, #4
   1a68c:	cmp	r1, r7
   1a690:	bgt	1a67c <__assert_fail@plt+0x8f1c>
   1a694:	add	r2, r2, #2
   1a698:	str	r7, [ip, r2, lsl #2]
   1a69c:	mov	r2, r8
   1a6a0:	ldr	sl, [sp, #92]	; 0x5c
   1a6a4:	ldr	r4, [sp, #100]	; 0x64
   1a6a8:	add	r2, r8, #1
   1a6ac:	ldr	r8, [sp, #96]	; 0x60
   1a6b0:	b	1a134 <__assert_fail@plt+0x89d4>
   1a6b4:	ldr	r0, [sp, #52]	; 0x34
   1a6b8:	mov	r8, r2
   1a6bc:	str	r4, [sp, #88]	; 0x58
   1a6c0:	cmp	r0, r2
   1a6c4:	bne	1a6f8 <__assert_fail@plt+0x8f98>
   1a6c8:	lsl	r1, r8, #3
   1a6cc:	mov	r0, ip
   1a6d0:	mov	r5, r8
   1a6d4:	mov	r4, ip
   1a6d8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1a6dc:	mov	ip, r4
   1a6e0:	cmp	r0, #0
   1a6e4:	beq	1aa80 <__assert_fail@plt+0x9320>
   1a6e8:	mov	r1, r8
   1a6ec:	mov	ip, r0
   1a6f0:	lsl	r1, r8, #1
   1a6f4:	str	r1, [sp, #52]	; 0x34
   1a6f8:	ldr	r0, [ip]
   1a6fc:	mov	r2, r8
   1a700:	cmp	r0, r7
   1a704:	ble	1a740 <__assert_fail@plt+0x8fe0>
   1a708:	cmp	r8, #1
   1a70c:	blt	1a770 <__assert_fail@plt+0x9010>
   1a710:	mov	r0, r8
   1a714:	add	r1, ip, r8, lsl #2
   1a718:	add	r0, r8, #1
   1a71c:	mov	r2, r1
   1a720:	ldr	r3, [r2, #-4]!
   1a724:	sub	r0, r0, #1
   1a728:	cmp	r0, #1
   1a72c:	str	r3, [r1]
   1a730:	mov	r1, r2
   1a734:	bgt	1a720 <__assert_fail@plt+0x8fc0>
   1a738:	sub	r2, r0, #1
   1a73c:	b	1a770 <__assert_fail@plt+0x9010>
   1a740:	add	r0, ip, r8, lsl #2
   1a744:	ldr	r1, [r0, #-4]
   1a748:	cmp	r1, r7
   1a74c:	ble	1a770 <__assert_fail@plt+0x9010>
   1a750:	sub	r2, r8, #2
   1a754:	str	r1, [r0]
   1a758:	sub	r2, r2, #1
   1a75c:	ldr	r1, [r0, #-8]
   1a760:	sub	r0, r0, #4
   1a764:	cmp	r1, r7
   1a768:	bgt	1a754 <__assert_fail@plt+0x8ff4>
   1a76c:	add	r2, r2, #2
   1a770:	mov	r5, r8
   1a774:	ldr	sl, [sp, #92]	; 0x5c
   1a778:	ldr	r4, [sp, #88]	; 0x58
   1a77c:	mov	lr, #1
   1a780:	str	r7, [ip, r2, lsl #2]
   1a784:	add	r5, r8, #1
   1a788:	ldr	r8, [sp, #96]	; 0x60
   1a78c:	b	1a4f8 <__assert_fail@plt+0x8d98>
   1a790:	mov	r6, #0
   1a794:	b	1803c <__assert_fail@plt+0x68dc>
   1a798:	mov	r9, #12
   1a79c:	b	1a96c <__assert_fail@plt+0x920c>
   1a7a0:	ldr	r7, [sp, #80]	; 0x50
   1a7a4:	mov	r4, #0
   1a7a8:	b	1a9e8 <__assert_fail@plt+0x9288>
   1a7ac:	mov	r9, r0
   1a7b0:	b	1a96c <__assert_fail@plt+0x920c>
   1a7b4:	ldr	r4, [sp, #32]
   1a7b8:	ldr	r6, [sp, #80]	; 0x50
   1a7bc:	ldr	r5, [sp, #76]	; 0x4c
   1a7c0:	mov	r0, ip
   1a7c4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a7c8:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a7cc:	cmp	r0, r5
   1a7d0:	beq	1a7d8 <__assert_fail@plt+0x9078>
   1a7d4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a7d8:	mov	r0, #16
   1a7dc:	cmp	r6, #0
   1a7e0:	str	r0, [fp, #-188]	; 0xffffff44
   1a7e4:	mov	r0, #0
   1a7e8:	str	r0, [fp, #-192]	; 0xffffff40
   1a7ec:	str	r5, [fp, #-184]	; 0xffffff48
   1a7f0:	beq	1a848 <__assert_fail@plt+0x90e8>
   1a7f4:	ldr	r1, [r6]
   1a7f8:	ldr	r0, [r6, #8]
   1a7fc:	cmp	r1, #1
   1a800:	blt	1a840 <__assert_fail@plt+0x90e0>
   1a804:	mov	r4, #0
   1a808:	mov	r5, #0
   1a80c:	add	r0, r0, r4
   1a810:	ldr	r0, [r0, #20]
   1a814:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a818:	ldr	r0, [r6, #8]
   1a81c:	add	r0, r0, r4
   1a820:	ldr	r0, [r0, #8]
   1a824:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a828:	ldr	r1, [r6]
   1a82c:	ldr	r0, [r6, #8]
   1a830:	add	r5, r5, #1
   1a834:	add	r4, r4, #24
   1a838:	cmp	r5, r1
   1a83c:	blt	1a80c <__assert_fail@plt+0x90ac>
   1a840:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a844:	ldr	r4, [sp, #32]
   1a848:	ldr	r0, [fp, #20]
   1a84c:	ldrb	r1, [sp, #180]	; 0xb4
   1a850:	ldr	r2, [fp, #16]
   1a854:	add	r0, r0, #4
   1a858:	b	1a8a0 <__assert_fail@plt+0x9140>
   1a85c:	ldr	r7, [sp, #132]	; 0x84
   1a860:	ldr	r6, [sp, #24]
   1a864:	ldr	ip, [sp, #116]	; 0x74
   1a868:	cmp	r3, r7
   1a86c:	mov	r5, r6
   1a870:	addne	r5, ip, r3, lsl #2
   1a874:	ldr	r3, [r5]
   1a878:	str	r3, [r0, #-4]
   1a87c:	ldr	r5, [r0]
   1a880:	cmp	r5, r7
   1a884:	addne	r6, ip, r5, lsl #2
   1a888:	ldr	r7, [r6]
   1a88c:	ldr	r6, [fp, #20]
   1a890:	add	r6, r6, r9, lsl #3
   1a894:	str	r7, [r0]
   1a898:	add	r6, r6, #4
   1a89c:	b	1a8bc <__assert_fail@plt+0x915c>
   1a8a0:	ldr	r3, [r0, #-4]
   1a8a4:	cmn	r3, #1
   1a8a8:	beq	1a8d0 <__assert_fail@plt+0x9170>
   1a8ac:	cmp	r1, #0
   1a8b0:	bne	1a85c <__assert_fail@plt+0x90fc>
   1a8b4:	ldr	r7, [r0]
   1a8b8:	mov	r6, r0
   1a8bc:	ldr	r5, [fp, #-200]	; 0xffffff38
   1a8c0:	add	r3, r3, r5
   1a8c4:	str	r3, [r0, #-4]
   1a8c8:	add	r3, r7, r5
   1a8cc:	str	r3, [r6]
   1a8d0:	sub	r2, r2, #1
   1a8d4:	add	r0, r0, #8
   1a8d8:	add	r9, r9, #1
   1a8dc:	cmp	r4, r2
   1a8e0:	bne	1a8a0 <__assert_fail@plt+0x9140>
   1a8e4:	cmp	r4, #1
   1a8e8:	blt	1a900 <__assert_fail@plt+0x91a0>
   1a8ec:	ldr	r0, [fp, #20]
   1a8f0:	lsl	r2, r4, #3
   1a8f4:	mov	r1, #255	; 0xff
   1a8f8:	add	r0, r0, sl, lsl #3
   1a8fc:	bl	11670 <memset@plt>
   1a900:	ldr	r0, [r8, #132]	; 0x84
   1a904:	mov	r9, #0
   1a908:	cmp	r0, #0
   1a90c:	beq	1a96c <__assert_fail@plt+0x920c>
   1a910:	cmp	sl, #2
   1a914:	bcc	1a96c <__assert_fail@plt+0x920c>
   1a918:	ldr	r1, [fp, #16]
   1a91c:	ldr	r2, [sp, #32]
   1a920:	ldr	r6, [fp, #20]
   1a924:	sub	r1, r1, #1
   1a928:	sub	r1, r1, r2
   1a92c:	mov	r2, #0
   1a930:	ldr	r3, [r0, r2, lsl #2]
   1a934:	cmp	r2, r3
   1a938:	beq	1a95c <__assert_fail@plt+0x91fc>
   1a93c:	add	r3, r6, r3, lsl #3
   1a940:	add	r7, r6, r2, lsl #3
   1a944:	ldr	r3, [r3, #8]
   1a948:	str	r3, [r7, #8]
   1a94c:	ldr	r3, [r0, r2, lsl #2]
   1a950:	add	r3, r6, r3, lsl #3
   1a954:	ldr	r3, [r3, #12]
   1a958:	str	r3, [r7, #12]
   1a95c:	add	r2, r2, #1
   1a960:	cmp	r1, r2
   1a964:	bne	1a930 <__assert_fail@plt+0x91d0>
   1a968:	mov	r9, #0
   1a96c:	ldr	r0, [sp, #204]	; 0xcc
   1a970:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a974:	ldr	r0, [sp, #96]	; 0x60
   1a978:	ldr	r0, [r0, #76]	; 0x4c
   1a97c:	cmp	r0, #0
   1a980:	beq	1a99c <__assert_fail@plt+0x923c>
   1a984:	add	r0, sp, #104	; 0x68
   1a988:	bl	21d18 <__assert_fail@plt+0x105b8>
   1a98c:	ldr	r0, [sp, #236]	; 0xec
   1a990:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a994:	ldr	r0, [sp, #220]	; 0xdc
   1a998:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a99c:	ldr	r0, [sp, #112]	; 0x70
   1a9a0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a9a4:	ldr	r0, [sp, #116]	; 0x74
   1a9a8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a9ac:	ldrb	r0, [sp, #179]	; 0xb3
   1a9b0:	cmp	r0, #0
   1a9b4:	beq	1a9c0 <__assert_fail@plt+0x9260>
   1a9b8:	ldr	r0, [sp, #108]	; 0x6c
   1a9bc:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a9c0:	mov	r0, r9
   1a9c4:	sub	sp, fp, #28
   1a9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a9cc:	mov	r0, r8
   1a9d0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a9d4:	mov	r0, #0
   1a9d8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a9dc:	mov	r9, #12
   1a9e0:	b	1a96c <__assert_fail@plt+0x920c>
   1a9e4:	mov	r4, #1
   1a9e8:	mov	r0, ip
   1a9ec:	bl	141c4 <__assert_fail@plt+0x2a64>
   1a9f0:	ldr	r0, [fp, #-184]	; 0xffffff48
   1a9f4:	ldr	r1, [sp, #76]	; 0x4c
   1a9f8:	cmp	r0, r1
   1a9fc:	beq	1aa04 <__assert_fail@plt+0x92a4>
   1aa00:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aa04:	mov	r0, #16
   1aa08:	mov	r9, #1
   1aa0c:	cmp	r4, #0
   1aa10:	str	r0, [fp, #-188]	; 0xffffff44
   1aa14:	mov	r0, #0
   1aa18:	str	r0, [fp, #-192]	; 0xffffff40
   1aa1c:	ldr	r0, [sp, #76]	; 0x4c
   1aa20:	str	r0, [fp, #-184]	; 0xffffff48
   1aa24:	bne	1a96c <__assert_fail@plt+0x920c>
   1aa28:	ldr	r1, [r7]
   1aa2c:	ldr	r0, [r7, #8]
   1aa30:	cmp	r1, #1
   1aa34:	blt	1aa74 <__assert_fail@plt+0x9314>
   1aa38:	mov	r5, #0
   1aa3c:	mov	r6, #0
   1aa40:	add	r0, r0, r5
   1aa44:	ldr	r0, [r0, #20]
   1aa48:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aa4c:	ldr	r0, [r7, #8]
   1aa50:	add	r0, r0, r5
   1aa54:	ldr	r0, [r0, #8]
   1aa58:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aa5c:	ldr	r1, [r7]
   1aa60:	ldr	r0, [r7, #8]
   1aa64:	add	r6, r6, #1
   1aa68:	add	r5, r5, #24
   1aa6c:	cmp	r6, r1
   1aa70:	blt	1aa40 <__assert_fail@plt+0x92e0>
   1aa74:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aa78:	b	1a96c <__assert_fail@plt+0x920c>
   1aa7c:	ldr	ip, [sp, #64]	; 0x40
   1aa80:	mov	r0, ip
   1aa84:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aa88:	ldr	r0, [fp, #-184]	; 0xffffff48
   1aa8c:	ldr	r4, [sp, #76]	; 0x4c
   1aa90:	cmp	r0, r4
   1aa94:	beq	1aa9c <__assert_fail@plt+0x933c>
   1aa98:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aa9c:	mov	r0, #16
   1aaa0:	mov	r9, #12
   1aaa4:	str	r0, [fp, #-188]	; 0xffffff44
   1aaa8:	mov	r0, #0
   1aaac:	str	r0, [fp, #-192]	; 0xffffff40
   1aab0:	ldr	r0, [sp, #80]	; 0x50
   1aab4:	str	r4, [fp, #-184]	; 0xffffff48
   1aab8:	cmp	r0, #0
   1aabc:	beq	1a96c <__assert_fail@plt+0x920c>
   1aac0:	ldr	r1, [r0]
   1aac4:	ldr	r0, [r0, #8]
   1aac8:	cmp	r1, #1
   1aacc:	blt	1aa74 <__assert_fail@plt+0x9314>
   1aad0:	ldr	r4, [sp, #80]	; 0x50
   1aad4:	mov	r5, #0
   1aad8:	mov	r6, #0
   1aadc:	add	r0, r0, r5
   1aae0:	ldr	r0, [r0, #20]
   1aae4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aae8:	ldr	r0, [r4, #8]
   1aaec:	add	r0, r0, r5
   1aaf0:	ldr	r0, [r0, #8]
   1aaf4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1aaf8:	ldr	r1, [r4]
   1aafc:	ldr	r0, [r4, #8]
   1ab00:	add	r6, r6, #1
   1ab04:	add	r5, r5, #24
   1ab08:	cmp	r6, r1
   1ab0c:	blt	1aadc <__assert_fail@plt+0x937c>
   1ab10:	b	1aa74 <__assert_fail@plt+0x9314>
   1ab14:	mov	r9, #1
   1ab18:	b	1a96c <__assert_fail@plt+0x920c>
   1ab1c:	mov	ip, #0
   1ab20:	b	1aa80 <__assert_fail@plt+0x9320>
   1ab24:	ldr	ip, [sp, #64]	; 0x40
   1ab28:	mov	r0, #0
   1ab2c:	str	r0, [r5]
   1ab30:	str	r0, [r4]
   1ab34:	b	1aa80 <__assert_fail@plt+0x9320>
   1ab38:	push	{fp, lr}
   1ab3c:	mov	fp, sp
   1ab40:	sub	sp, sp, #16
   1ab44:	mov	ip, #1
   1ab48:	str	r2, [sp, #4]
   1ab4c:	str	ip, [sp, #12]
   1ab50:	mov	ip, #0
   1ab54:	str	ip, [sp]
   1ab58:	ldr	ip, [fp, #8]
   1ab5c:	str	ip, [sp, #8]
   1ab60:	bl	1ab6c <__assert_fail@plt+0x940c>
   1ab64:	mov	sp, fp
   1ab68:	pop	{fp, pc}
   1ab6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab70:	add	fp, sp, #28
   1ab74:	sub	sp, sp, #44	; 0x2c
   1ab78:	mvn	r6, #0
   1ab7c:	cmp	r3, #0
   1ab80:	blt	1ace8 <__assert_fail@plt+0x9588>
   1ab84:	mov	r5, r3
   1ab88:	mov	r9, r2
   1ab8c:	cmp	r3, r2
   1ab90:	bgt	1ace8 <__assert_fail@plt+0x9588>
   1ab94:	mov	r7, r0
   1ab98:	ldr	r0, [fp, #8]
   1ab9c:	mov	r8, r9
   1aba0:	mov	sl, r1
   1aba4:	movw	r1, #0
   1aba8:	ldr	r6, [r7]
   1abac:	movt	r1, #0
   1abb0:	add	r0, r0, r5
   1abb4:	cmp	r0, r9
   1abb8:	bicle	r8, r0, r0, asr #31
   1abbc:	movw	r0, #0
   1abc0:	movt	r0, #0
   1abc4:	orrs	r4, r1, r0
   1abc8:	beq	1abd4 <__assert_fail@plt+0x9474>
   1abcc:	add	r0, r6, #136	; 0x88
   1abd0:	bl	1146c <pthread_mutex_lock@plt>
   1abd4:	ldrb	r0, [r7, #28]
   1abd8:	str	r6, [sp, #24]
   1abdc:	ldr	r6, [fp, #16]
   1abe0:	cmp	r8, r5
   1abe4:	ubfx	r1, r0, #5, #2
   1abe8:	str	r4, [sp, #36]	; 0x24
   1abec:	str	sl, [sp, #32]
   1abf0:	str	r1, [sp, #28]
   1abf4:	ble	1ac18 <__assert_fail@plt+0x94b8>
   1abf8:	tst	r0, #8
   1abfc:	bne	1ac18 <__assert_fail@plt+0x94b8>
   1ac00:	ldr	r1, [r7, #16]
   1ac04:	cmp	r1, #0
   1ac08:	beq	1ac18 <__assert_fail@plt+0x94b8>
   1ac0c:	mov	r0, r7
   1ac10:	bl	17604 <__assert_fail@plt+0x5ea4>
   1ac14:	ldrb	r0, [r7, #28]
   1ac18:	mov	sl, #1
   1ac1c:	mov	r4, #0
   1ac20:	cmp	r6, #0
   1ac24:	str	r7, [fp, #-32]	; 0xffffffe0
   1ac28:	beq	1ac74 <__assert_fail@plt+0x9514>
   1ac2c:	ands	r1, r0, #16
   1ac30:	bne	1ac74 <__assert_fail@plt+0x9514>
   1ac34:	and	r0, r0, #6
   1ac38:	cmp	r0, #4
   1ac3c:	bne	1ac64 <__assert_fail@plt+0x9504>
   1ac40:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ac44:	ldr	sl, [r6]
   1ac48:	ldr	r0, [r0, #24]
   1ac4c:	cmp	sl, r0
   1ac50:	bhi	1ac6c <__assert_fail@plt+0x950c>
   1ac54:	cmp	sl, #1
   1ac58:	movwlt	r6, #0
   1ac5c:	movwlt	sl, #1
   1ac60:	b	1ac70 <__assert_fail@plt+0x9510>
   1ac64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ac68:	ldr	r0, [r0, #24]
   1ac6c:	add	sl, r0, #1
   1ac70:	mov	r4, r6
   1ac74:	lsl	r0, sl, #3
   1ac78:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ac7c:	cmp	r0, #0
   1ac80:	beq	1aefc <__assert_fail@plt+0x979c>
   1ac84:	mov	r7, r0
   1ac88:	ldr	r0, [fp, #12]
   1ac8c:	str	r8, [sp]
   1ac90:	mov	r2, r9
   1ac94:	mov	r3, r5
   1ac98:	stmib	sp, {r0, sl}
   1ac9c:	str	r7, [sp, #12]
   1aca0:	ldr	r0, [sp, #28]
   1aca4:	ldr	r1, [sp, #32]
   1aca8:	str	r0, [sp, #16]
   1acac:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1acb0:	bl	17f68 <__assert_fail@plt+0x6808>
   1acb4:	cmp	r0, #0
   1acb8:	beq	1acf4 <__assert_fail@plt+0x9594>
   1acbc:	mvn	r6, #1
   1acc0:	cmp	r0, #1
   1acc4:	mvneq	r6, #0
   1acc8:	ldr	r4, [sp, #36]	; 0x24
   1accc:	mov	r0, r7
   1acd0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1acd4:	cmp	r4, #0
   1acd8:	beq	1ace8 <__assert_fail@plt+0x9588>
   1acdc:	ldr	r0, [sp, #24]
   1ace0:	add	r0, r0, #136	; 0x88
   1ace4:	bl	113b8 <pthread_mutex_unlock@plt>
   1ace8:	mov	r0, r6
   1acec:	sub	sp, fp, #28
   1acf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acf4:	cmp	r4, #0
   1acf8:	str	r5, [sp, #32]
   1acfc:	beq	1ae18 <__assert_fail@plt+0x96b8>
   1ad00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ad04:	add	r9, sl, #1
   1ad08:	ldrb	r0, [r0, #28]
   1ad0c:	ubfx	r0, r0, #1, #2
   1ad10:	cmp	r0, #1
   1ad14:	beq	1ad74 <__assert_fail@plt+0x9614>
   1ad18:	mov	ip, #2
   1ad1c:	cmp	r0, #0
   1ad20:	bne	1ad84 <__assert_fail@plt+0x9624>
   1ad24:	mov	r5, r7
   1ad28:	lsl	r7, r9, #2
   1ad2c:	mov	r0, r7
   1ad30:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ad34:	mov	r6, #0
   1ad38:	cmp	r0, #0
   1ad3c:	str	r0, [r4, #4]
   1ad40:	beq	1af10 <__assert_fail@plt+0x97b0>
   1ad44:	mov	r0, r7
   1ad48:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ad4c:	cmp	r0, #0
   1ad50:	str	r0, [r4, #8]
   1ad54:	beq	1af70 <__assert_fail@plt+0x9810>
   1ad58:	str	r9, [r4]
   1ad5c:	mov	ip, #1
   1ad60:	mov	r7, r5
   1ad64:	cmp	sl, #1
   1ad68:	bge	1ad8c <__assert_fail@plt+0x962c>
   1ad6c:	mov	sl, #0
   1ad70:	b	1adcc <__assert_fail@plt+0x966c>
   1ad74:	ldr	r0, [r4]
   1ad78:	mov	ip, #1
   1ad7c:	cmp	r9, r0
   1ad80:	bhi	1af18 <__assert_fail@plt+0x97b8>
   1ad84:	cmp	sl, #1
   1ad88:	blt	1ad6c <__assert_fail@plt+0x960c>
   1ad8c:	mov	r8, r7
   1ad90:	ldmib	r4, {r6, r7}
   1ad94:	mov	r2, #0
   1ad98:	cmp	sl, #3
   1ad9c:	bhi	1ae44 <__assert_fail@plt+0x96e4>
   1ada0:	add	r0, r8, r2, lsl #3
   1ada4:	add	r0, r0, #4
   1ada8:	ldr	r1, [r0, #-4]
   1adac:	str	r1, [r6, r2, lsl #2]
   1adb0:	ldr	r1, [r0]
   1adb4:	add	r0, r0, #8
   1adb8:	str	r1, [r7, r2, lsl #2]
   1adbc:	add	r2, r2, #1
   1adc0:	cmp	sl, r2
   1adc4:	bne	1ada8 <__assert_fail@plt+0x9648>
   1adc8:	mov	r7, r8
   1adcc:	ldr	r0, [r4]
   1add0:	cmp	sl, r0
   1add4:	bcs	1adf8 <__assert_fail@plt+0x9698>
   1add8:	ldmib	r4, {r0, r1}
   1addc:	mvn	r2, #0
   1ade0:	str	r2, [r1, sl, lsl #2]
   1ade4:	str	r2, [r0, sl, lsl #2]
   1ade8:	add	sl, sl, #1
   1adec:	ldr	r3, [r4]
   1adf0:	cmp	sl, r3
   1adf4:	bcc	1ade0 <__assert_fail@plt+0x9680>
   1adf8:	mov	r6, ip
   1adfc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1ae00:	cmp	r6, #0
   1ae04:	ldrb	r0, [r1, #28]
   1ae08:	and	r0, r0, #249	; 0xf9
   1ae0c:	orr	r0, r0, r6, lsl #1
   1ae10:	strb	r0, [r1, #28]
   1ae14:	beq	1ae3c <__assert_fail@plt+0x96dc>
   1ae18:	ldr	r0, [fp, #20]
   1ae1c:	cmp	r0, #0
   1ae20:	beq	1ae34 <__assert_fail@plt+0x96d4>
   1ae24:	ldr	r0, [r7, #4]
   1ae28:	ldr	r1, [sp, #32]
   1ae2c:	sub	r6, r0, r1
   1ae30:	b	1acc8 <__assert_fail@plt+0x9568>
   1ae34:	ldr	r6, [r7]
   1ae38:	b	1acc8 <__assert_fail@plt+0x9568>
   1ae3c:	mvn	r6, #1
   1ae40:	b	1acc8 <__assert_fail@plt+0x9568>
   1ae44:	str	ip, [sp, #28]
   1ae48:	add	ip, r7, sl, lsl #2
   1ae4c:	mov	lr, #0
   1ae50:	add	r5, r8, sl, lsl #3
   1ae54:	mov	r9, #0
   1ae58:	add	r3, r6, sl, lsl #2
   1ae5c:	mov	r1, #0
   1ae60:	mov	r0, r8
   1ae64:	mov	r2, #0
   1ae68:	cmp	r8, ip
   1ae6c:	mov	r0, #0
   1ae70:	movwcc	lr, #1
   1ae74:	cmp	r5, r7
   1ae78:	movwhi	r9, #1
   1ae7c:	cmp	r8, r3
   1ae80:	movwcc	r1, #1
   1ae84:	cmp	r5, r6
   1ae88:	mov	r5, #0
   1ae8c:	movwhi	r5, #1
   1ae90:	cmp	r7, r3
   1ae94:	mov	r3, #0
   1ae98:	movwcc	r3, #1
   1ae9c:	cmp	r6, ip
   1aea0:	movwcc	r0, #1
   1aea4:	tst	r0, r3
   1aea8:	bne	1aef4 <__assert_fail@plt+0x9794>
   1aeac:	ands	r0, r5, r1
   1aeb0:	bne	1aef4 <__assert_fail@plt+0x9794>
   1aeb4:	ldr	ip, [sp, #28]
   1aeb8:	ands	r0, r9, lr
   1aebc:	bne	1ada0 <__assert_fail@plt+0x9640>
   1aec0:	bic	r2, sl, #3
   1aec4:	mov	r1, r7
   1aec8:	mov	r0, r6
   1aecc:	mov	r5, r8
   1aed0:	mov	r3, r2
   1aed4:	vld2.32	{d16-d19}, [r5]!
   1aed8:	subs	r3, r3, #4
   1aedc:	vst1.32	{d16-d17}, [r0]!
   1aee0:	vst1.32	{d18-d19}, [r1]!
   1aee4:	bne	1aed4 <__assert_fail@plt+0x9774>
   1aee8:	cmp	sl, r2
   1aeec:	bne	1ada0 <__assert_fail@plt+0x9640>
   1aef0:	b	1adc8 <__assert_fail@plt+0x9668>
   1aef4:	ldr	ip, [sp, #28]
   1aef8:	b	1ada0 <__assert_fail@plt+0x9640>
   1aefc:	ldr	r4, [sp, #36]	; 0x24
   1af00:	mvn	r6, #1
   1af04:	cmp	r4, #0
   1af08:	bne	1acdc <__assert_fail@plt+0x957c>
   1af0c:	b	1ace8 <__assert_fail@plt+0x9588>
   1af10:	mov	r7, r5
   1af14:	b	1adfc <__assert_fail@plt+0x969c>
   1af18:	ldr	r0, [r4, #4]
   1af1c:	mov	r8, r7
   1af20:	lsl	r7, r9, #2
   1af24:	mov	r1, r7
   1af28:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1af2c:	mov	r6, #0
   1af30:	cmp	r0, #0
   1af34:	beq	1af80 <__assert_fail@plt+0x9820>
   1af38:	mov	r5, r0
   1af3c:	ldr	r0, [r4, #8]
   1af40:	mov	r1, r7
   1af44:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1af48:	cmp	r0, #0
   1af4c:	beq	1af88 <__assert_fail@plt+0x9828>
   1af50:	mov	r7, r8
   1af54:	mov	ip, #1
   1af58:	str	r9, [r4]
   1af5c:	str	r5, [r4, #4]
   1af60:	str	r0, [r4, #8]
   1af64:	cmp	sl, #1
   1af68:	bge	1ad8c <__assert_fail@plt+0x962c>
   1af6c:	b	1ad6c <__assert_fail@plt+0x960c>
   1af70:	ldr	r0, [r4, #4]
   1af74:	bl	141c4 <__assert_fail@plt+0x2a64>
   1af78:	mov	r7, r5
   1af7c:	b	1adfc <__assert_fail@plt+0x969c>
   1af80:	mov	r7, r8
   1af84:	b	1adfc <__assert_fail@plt+0x969c>
   1af88:	mov	r0, r5
   1af8c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1af90:	mov	r7, r8
   1af94:	b	1adfc <__assert_fail@plt+0x969c>
   1af98:	push	{fp, lr}
   1af9c:	mov	fp, sp
   1afa0:	sub	sp, sp, #16
   1afa4:	mov	ip, #0
   1afa8:	str	r2, [sp, #4]
   1afac:	str	ip, [sp, #12]
   1afb0:	ldr	ip, [fp, #12]
   1afb4:	str	ip, [sp, #8]
   1afb8:	ldr	ip, [fp, #8]
   1afbc:	str	ip, [sp]
   1afc0:	bl	1ab6c <__assert_fail@plt+0x940c>
   1afc4:	mov	sp, fp
   1afc8:	pop	{fp, pc}
   1afcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afd0:	add	fp, sp, #28
   1afd4:	sub	sp, sp, #20
   1afd8:	ldr	r4, [fp, #8]
   1afdc:	mov	r8, r1
   1afe0:	mov	r1, r0
   1afe4:	mov	r6, r2
   1afe8:	orr	r0, r4, r2
   1afec:	ldr	r2, [fp, #20]
   1aff0:	orr	r0, r0, r2
   1aff4:	cmp	r0, #0
   1aff8:	blt	1b0b8 <__assert_fail@plt+0x9958>
   1affc:	adds	sl, r6, r4
   1b000:	bvs	1b0b8 <__assert_fail@plt+0x9958>
   1b004:	mov	r5, #0
   1b008:	cmp	r4, #1
   1b00c:	blt	1b064 <__assert_fail@plt+0x9904>
   1b010:	mov	r9, r3
   1b014:	cmp	r6, #1
   1b018:	blt	1b06c <__assert_fail@plt+0x990c>
   1b01c:	mov	r0, sl
   1b020:	mov	r5, r1
   1b024:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1b028:	cmp	r0, #0
   1b02c:	beq	1b0b8 <__assert_fail@plt+0x9958>
   1b030:	mov	r1, r8
   1b034:	mov	r2, r6
   1b038:	mov	r7, r0
   1b03c:	bl	11484 <memcpy@plt>
   1b040:	add	r0, r7, r6
   1b044:	mov	r1, r9
   1b048:	mov	r2, r4
   1b04c:	bl	11484 <memcpy@plt>
   1b050:	ldr	r2, [fp, #20]
   1b054:	mov	r1, r5
   1b058:	mov	r4, r7
   1b05c:	mov	r5, #0
   1b060:	b	1b074 <__assert_fail@plt+0x9914>
   1b064:	mov	r7, r8
   1b068:	b	1b070 <__assert_fail@plt+0x9910>
   1b06c:	mov	r7, r9
   1b070:	mov	r4, #0
   1b074:	ldr	r0, [fp, #16]
   1b078:	ldr	r3, [fp, #12]
   1b07c:	mov	r6, #1
   1b080:	str	r2, [sp, #4]
   1b084:	mov	r2, sl
   1b088:	str	r5, [sp]
   1b08c:	str	r6, [sp, #12]
   1b090:	str	r0, [sp, #8]
   1b094:	mov	r0, r1
   1b098:	mov	r1, r7
   1b09c:	bl	1ab6c <__assert_fail@plt+0x940c>
   1b0a0:	mov	r5, r0
   1b0a4:	mov	r0, r4
   1b0a8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b0ac:	mov	r0, r5
   1b0b0:	sub	sp, fp, #28
   1b0b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0b8:	mvn	r0, #1
   1b0bc:	sub	sp, fp, #28
   1b0c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b0c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0c8:	add	fp, sp, #28
   1b0cc:	sub	sp, sp, #20
   1b0d0:	ldr	r4, [fp, #8]
   1b0d4:	mov	r8, r1
   1b0d8:	mov	r1, r0
   1b0dc:	mov	r6, r2
   1b0e0:	orr	r0, r4, r2
   1b0e4:	ldr	r2, [fp, #24]
   1b0e8:	orr	r0, r0, r2
   1b0ec:	cmp	r0, #0
   1b0f0:	blt	1b1b0 <__assert_fail@plt+0x9a50>
   1b0f4:	adds	sl, r6, r4
   1b0f8:	bvs	1b1b0 <__assert_fail@plt+0x9a50>
   1b0fc:	mov	r5, #0
   1b100:	cmp	r4, #1
   1b104:	blt	1b15c <__assert_fail@plt+0x99fc>
   1b108:	mov	r9, r3
   1b10c:	cmp	r6, #1
   1b110:	blt	1b164 <__assert_fail@plt+0x9a04>
   1b114:	mov	r0, sl
   1b118:	mov	r5, r1
   1b11c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1b120:	cmp	r0, #0
   1b124:	beq	1b1b0 <__assert_fail@plt+0x9a50>
   1b128:	mov	r1, r8
   1b12c:	mov	r2, r6
   1b130:	mov	r7, r0
   1b134:	bl	11484 <memcpy@plt>
   1b138:	add	r0, r7, r6
   1b13c:	mov	r1, r9
   1b140:	mov	r2, r4
   1b144:	bl	11484 <memcpy@plt>
   1b148:	ldr	r2, [fp, #24]
   1b14c:	mov	r1, r5
   1b150:	mov	r4, r7
   1b154:	mov	r5, #0
   1b158:	b	1b16c <__assert_fail@plt+0x9a0c>
   1b15c:	mov	r7, r8
   1b160:	b	1b168 <__assert_fail@plt+0x9a08>
   1b164:	mov	r7, r9
   1b168:	mov	r4, #0
   1b16c:	ldr	r0, [fp, #20]
   1b170:	ldr	r6, [fp, #16]
   1b174:	ldr	r3, [fp, #12]
   1b178:	str	r2, [sp, #4]
   1b17c:	mov	r2, sl
   1b180:	str	r5, [sp, #12]
   1b184:	str	r0, [sp, #8]
   1b188:	mov	r0, r1
   1b18c:	mov	r1, r7
   1b190:	str	r6, [sp]
   1b194:	bl	1ab6c <__assert_fail@plt+0x940c>
   1b198:	mov	r5, r0
   1b19c:	mov	r0, r4
   1b1a0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b1a4:	mov	r0, r5
   1b1a8:	sub	sp, fp, #28
   1b1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1b0:	mvn	r0, #1
   1b1b4:	sub	sp, fp, #28
   1b1b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1bc:	ldrb	ip, [r0, #28]
   1b1c0:	cmp	r2, #0
   1b1c4:	bic	ip, ip, #6
   1b1c8:	orrne	ip, ip, #2
   1b1cc:	strb	ip, [r0, #28]
   1b1d0:	ldr	r0, [sp]
   1b1d4:	moveq	r0, r2
   1b1d8:	cmp	r2, #0
   1b1dc:	moveq	r3, r2
   1b1e0:	stm	r1, {r2, r3}
   1b1e4:	str	r0, [r1, #8]
   1b1e8:	bx	lr
   1b1ec:	push	{r4, sl, fp, lr}
   1b1f0:	add	fp, sp, #8
   1b1f4:	mov	r4, r0
   1b1f8:	ldr	r0, [r0, #24]
   1b1fc:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b200:	ldr	r0, [r4, #36]	; 0x24
   1b204:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b208:	ldr	r0, [r4, #40]	; 0x28
   1b20c:	add	r1, r4, #4
   1b210:	cmp	r0, r1
   1b214:	beq	1b228 <__assert_fail@plt+0x9ac8>
   1b218:	ldr	r0, [r0, #8]
   1b21c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b220:	ldr	r0, [r4, #40]	; 0x28
   1b224:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b228:	ldr	r0, [r4, #12]
   1b22c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b230:	ldr	r0, [r4, #48]	; 0x30
   1b234:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b238:	ldr	r0, [r4, #44]	; 0x2c
   1b23c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1b240:	mov	r0, r4
   1b244:	pop	{r4, sl, fp, lr}
   1b248:	b	141c4 <__assert_fail@plt+0x2a64>
   1b24c:	nop	{0}
   1b250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b254:	add	fp, sp, #28
   1b258:	sub	sp, sp, #92	; 0x5c
   1b25c:	mov	r9, r0
   1b260:	ldrb	r0, [r0, #74]	; 0x4a
   1b264:	ldr	r2, [r9, #36]	; 0x24
   1b268:	ldr	r1, [r9, #48]	; 0x30
   1b26c:	ldr	r4, [r9, #28]
   1b270:	cmp	r2, r1
   1b274:	movgt	r2, r1
   1b278:	cmp	r0, #0
   1b27c:	str	r2, [sp]
   1b280:	bne	1b2a0 <__assert_fail@plt+0x9b40>
   1b284:	mov	r7, r9
   1b288:	ldr	r0, [r7, #64]!	; 0x40
   1b28c:	cmp	r0, #0
   1b290:	bne	1b2a0 <__assert_fail@plt+0x9b40>
   1b294:	ldrb	r0, [r9, #76]	; 0x4c
   1b298:	cmp	r0, #0
   1b29c:	beq	1b2a8 <__assert_fail@plt+0x9b48>
   1b2a0:	ldr	r6, [r9, #32]
   1b2a4:	b	1b484 <__assert_fail@plt+0x9d24>
   1b2a8:	ldr	r0, [sp]
   1b2ac:	cmp	r0, r4
   1b2b0:	ble	1b2c0 <__assert_fail@plt+0x9b60>
   1b2b4:	add	r8, r9, #16
   1b2b8:	mov	sl, r4
   1b2bc:	b	1b318 <__assert_fail@plt+0x9bb8>
   1b2c0:	mov	sl, r4
   1b2c4:	str	r4, [sp, #4]
   1b2c8:	b	1b594 <__assert_fail@plt+0x9e34>
   1b2cc:	add	r0, r4, #1
   1b2d0:	cmp	r0, #2
   1b2d4:	bcc	1b2e8 <__assert_fail@plt+0x9b88>
   1b2d8:	ldr	r0, [r9, #36]	; 0x24
   1b2dc:	ldr	r1, [r9, #48]	; 0x30
   1b2e0:	cmp	r0, r1
   1b2e4:	blt	1b470 <__assert_fail@plt+0x9d10>
   1b2e8:	ldr	r0, [r9, #4]
   1b2ec:	ldr	r1, [sp, #4]
   1b2f0:	cmn	r4, #1
   1b2f4:	strb	sl, [r0, r1]
   1b2f8:	ldr	r0, [r9, #8]
   1b2fc:	str	sl, [r0, r1, lsl #2]
   1b300:	add	sl, r1, #1
   1b304:	bne	1b450 <__assert_fail@plt+0x9cf0>
   1b308:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b30c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b310:	stm	r8, {r0, r1}
   1b314:	b	1b450 <__assert_fail@plt+0x9cf0>
   1b318:	ldr	r5, [r9, #24]
   1b31c:	ldr	r4, [r9]
   1b320:	str	sl, [sp, #4]
   1b324:	add	r0, r5, sl
   1b328:	ldrb	sl, [r4, r0]
   1b32c:	tst	sl, #128	; 0x80
   1b330:	bne	1b378 <__assert_fail@plt+0x9c18>
   1b334:	mov	r0, r8
   1b338:	bl	114b4 <mbsinit@plt>
   1b33c:	cmp	r0, #0
   1b340:	beq	1b378 <__assert_fail@plt+0x9c18>
   1b344:	mov	r0, sl
   1b348:	bl	11724 <towupper@plt>
   1b34c:	cmp	r0, #128	; 0x80
   1b350:	bcs	1b370 <__assert_fail@plt+0x9c10>
   1b354:	ldr	r2, [sp, #4]
   1b358:	ldr	r1, [r9, #4]
   1b35c:	strb	r0, [r1, r2]
   1b360:	add	sl, r2, #1
   1b364:	ldr	r1, [r9, #8]
   1b368:	str	r0, [r1, r2, lsl #2]
   1b36c:	b	1b450 <__assert_fail@plt+0x9cf0>
   1b370:	ldr	r4, [r9]
   1b374:	ldr	r5, [r9, #24]
   1b378:	ldm	r8, {r0, r1}
   1b37c:	mov	r3, r8
   1b380:	str	r1, [fp, #-36]	; 0xffffffdc
   1b384:	str	r0, [fp, #-40]	; 0xffffffd8
   1b388:	ldm	sp, {r0, r1}
   1b38c:	sub	r2, r0, r1
   1b390:	add	r0, r4, r5
   1b394:	add	r1, r0, r1
   1b398:	add	r0, sp, #12
   1b39c:	bl	2ac8c <__assert_fail@plt+0x1952c>
   1b3a0:	mov	r4, r0
   1b3a4:	sub	r0, r0, #1
   1b3a8:	cmn	r0, #4
   1b3ac:	bhi	1b2cc <__assert_fail@plt+0x9b6c>
   1b3b0:	ldr	r0, [sp, #12]
   1b3b4:	bl	11724 <towupper@plt>
   1b3b8:	mov	r5, r0
   1b3bc:	ldr	r0, [sp, #12]
   1b3c0:	cmp	r5, r0
   1b3c4:	bne	1b3e8 <__assert_fail@plt+0x9c88>
   1b3c8:	ldr	r1, [r9]
   1b3cc:	ldr	r2, [r9, #24]
   1b3d0:	ldr	r0, [r9, #4]
   1b3d4:	ldr	r6, [sp, #4]
   1b3d8:	add	r1, r1, r2
   1b3dc:	add	r0, r0, r6
   1b3e0:	add	r1, r1, r6
   1b3e4:	b	1b414 <__assert_fail@plt+0x9cb4>
   1b3e8:	add	sl, sp, #16
   1b3ec:	mov	r1, r5
   1b3f0:	sub	r2, fp, #40	; 0x28
   1b3f4:	mov	r0, sl
   1b3f8:	bl	11400 <wcrtomb@plt>
   1b3fc:	cmp	r4, r0
   1b400:	bne	1b464 <__assert_fail@plt+0x9d04>
   1b404:	ldr	r0, [r9, #4]
   1b408:	ldr	r6, [sp, #4]
   1b40c:	mov	r1, sl
   1b410:	add	r0, r0, r6
   1b414:	mov	r2, r4
   1b418:	bl	11484 <memcpy@plt>
   1b41c:	ldr	r0, [r9, #8]
   1b420:	add	sl, r6, #1
   1b424:	str	r5, [r0, r6, lsl #2]
   1b428:	add	r5, r4, r6
   1b42c:	cmp	sl, r5
   1b430:	bge	1b450 <__assert_fail@plt+0x9cf0>
   1b434:	add	r0, r0, r6, lsl #2
   1b438:	mvn	r1, #3
   1b43c:	add	r2, r1, r4, lsl #2
   1b440:	add	r0, r0, #4
   1b444:	mov	r1, #255	; 0xff
   1b448:	bl	11670 <memset@plt>
   1b44c:	mov	sl, r5
   1b450:	ldr	r0, [sp]
   1b454:	str	sl, [sp, #4]
   1b458:	cmp	r0, sl
   1b45c:	bgt	1b318 <__assert_fail@plt+0x9bb8>
   1b460:	b	1b594 <__assert_fail@plt+0x9e34>
   1b464:	ldr	r6, [sp, #4]
   1b468:	mov	sl, r6
   1b46c:	b	1b49c <__assert_fail@plt+0x9d3c>
   1b470:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b474:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b478:	stm	r8, {r0, r1}
   1b47c:	ldr	sl, [sp, #4]
   1b480:	b	1b594 <__assert_fail@plt+0x9e34>
   1b484:	ldr	r0, [sp]
   1b488:	cmp	r4, r0
   1b48c:	bge	1b58c <__assert_fail@plt+0x9e2c>
   1b490:	add	r7, r9, #64	; 0x40
   1b494:	add	r8, r9, #16
   1b498:	mov	sl, r4
   1b49c:	ldm	r8, {r0, r1}
   1b4a0:	str	r6, [sp, #4]
   1b4a4:	str	r0, [fp, #-40]	; 0xffffffd8
   1b4a8:	ldr	r0, [sp]
   1b4ac:	str	r1, [fp, #-36]	; 0xffffffdc
   1b4b0:	sub	r2, r0, sl
   1b4b4:	ldr	r0, [r7]
   1b4b8:	cmp	r0, #0
   1b4bc:	bne	1b5ac <__assert_fail@plt+0x9e4c>
   1b4c0:	ldr	r0, [r9]
   1b4c4:	ldr	r1, [r9, #24]
   1b4c8:	add	r0, r0, r1
   1b4cc:	add	r4, r0, r6
   1b4d0:	add	r0, sp, #8
   1b4d4:	mov	r1, r4
   1b4d8:	mov	r3, r8
   1b4dc:	bl	2ac8c <__assert_fail@plt+0x1952c>
   1b4e0:	sub	r6, r0, #1
   1b4e4:	mov	r5, r0
   1b4e8:	cmn	r6, #4
   1b4ec:	bhi	1b5fc <__assert_fail@plt+0x9e9c>
   1b4f0:	ldr	r0, [sp, #8]
   1b4f4:	bl	11724 <towupper@plt>
   1b4f8:	mov	r7, r0
   1b4fc:	ldr	r0, [sp, #8]
   1b500:	cmp	r7, r0
   1b504:	bne	1b514 <__assert_fail@plt+0x9db4>
   1b508:	ldr	r0, [r9, #4]
   1b50c:	mov	r1, r4
   1b510:	b	1b534 <__assert_fail@plt+0x9dd4>
   1b514:	add	r0, sp, #16
   1b518:	sub	r2, fp, #40	; 0x28
   1b51c:	mov	r1, r7
   1b520:	bl	11400 <wcrtomb@plt>
   1b524:	cmp	r0, r5
   1b528:	bne	1b678 <__assert_fail@plt+0x9f18>
   1b52c:	ldr	r0, [r9, #4]
   1b530:	add	r1, sp, #16
   1b534:	add	r0, r0, sl
   1b538:	mov	r2, r5
   1b53c:	bl	11484 <memcpy@plt>
   1b540:	ldrb	r0, [r9, #76]	; 0x4c
   1b544:	ldr	r6, [sp, #4]
   1b548:	cmp	r0, #0
   1b54c:	bne	1b70c <__assert_fail@plt+0x9fac>
   1b550:	ldr	r0, [r9, #8]
   1b554:	add	r4, r5, sl
   1b558:	add	r1, sl, #1
   1b55c:	add	r6, r5, r6
   1b560:	cmp	r1, r4
   1b564:	str	r7, [r0, sl, lsl #2]
   1b568:	bge	1b584 <__assert_fail@plt+0x9e24>
   1b56c:	add	r0, r0, r1, lsl #2
   1b570:	mvn	r1, #3
   1b574:	add	r2, r1, r5, lsl #2
   1b578:	mov	r1, #255	; 0xff
   1b57c:	bl	11670 <memset@plt>
   1b580:	b	1b484 <__assert_fail@plt+0x9d24>
   1b584:	mov	r4, r1
   1b588:	b	1b484 <__assert_fail@plt+0x9d24>
   1b58c:	str	r6, [sp, #4]
   1b590:	mov	sl, r4
   1b594:	ldr	r0, [sp, #4]
   1b598:	str	sl, [r9, #28]
   1b59c:	str	r0, [r9, #32]
   1b5a0:	mov	r0, #0
   1b5a4:	sub	sp, fp, #28
   1b5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5ac:	cmp	r2, #1
   1b5b0:	add	r4, sp, #16
   1b5b4:	ldrge	r1, [r9, #80]	; 0x50
   1b5b8:	cmpge	r1, #1
   1b5bc:	blt	1b4d0 <__assert_fail@plt+0x9d70>
   1b5c0:	ldr	r7, [r9, #24]
   1b5c4:	ldr	r3, [r9]
   1b5c8:	add	r4, sp, #16
   1b5cc:	add	r7, r6, r7
   1b5d0:	add	r3, r3, r7
   1b5d4:	mov	r7, #0
   1b5d8:	ldrb	r5, [r3, r7]
   1b5dc:	ldrb	r5, [r0, r5]
   1b5e0:	strb	r5, [r4, r7]
   1b5e4:	add	r7, r7, #1
   1b5e8:	cmp	r7, r2
   1b5ec:	bge	1b4d0 <__assert_fail@plt+0x9d70>
   1b5f0:	cmp	r7, r1
   1b5f4:	blt	1b5d8 <__assert_fail@plt+0x9e78>
   1b5f8:	b	1b4d0 <__assert_fail@plt+0x9d70>
   1b5fc:	add	r0, r5, #1
   1b600:	cmp	r0, #2
   1b604:	bcc	1b618 <__assert_fail@plt+0x9eb8>
   1b608:	ldr	r0, [r9, #36]	; 0x24
   1b60c:	ldr	r1, [r9, #48]	; 0x30
   1b610:	cmp	r0, r1
   1b614:	blt	1b778 <__assert_fail@plt+0xa018>
   1b618:	ldr	r2, [r9, #24]
   1b61c:	ldr	r6, [sp, #4]
   1b620:	ldr	r0, [r9]
   1b624:	ldr	r1, [r9, #64]	; 0x40
   1b628:	add	r4, sl, #1
   1b62c:	add	r2, r2, r6
   1b630:	cmp	r1, #0
   1b634:	ldrb	r0, [r0, r2]
   1b638:	ldrbne	r0, [r1, r0]
   1b63c:	ldr	r1, [r9, #4]
   1b640:	strb	r0, [r1, sl]
   1b644:	ldrb	r1, [r9, #76]	; 0x4c
   1b648:	cmp	r1, #0
   1b64c:	ldrne	r1, [r9, #12]
   1b650:	strne	r6, [r1, sl, lsl #2]
   1b654:	add	r6, r6, #1
   1b658:	cmn	r5, #1
   1b65c:	ldr	r1, [r9, #8]
   1b660:	str	r0, [r1, sl, lsl #2]
   1b664:	bne	1b484 <__assert_fail@plt+0x9d24>
   1b668:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b66c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b670:	stm	r8, {r0, r1}
   1b674:	b	1b484 <__assert_fail@plt+0x9d24>
   1b678:	mov	r3, r0
   1b67c:	cmn	r0, #1
   1b680:	beq	1b508 <__assert_fail@plt+0x9da8>
   1b684:	ldr	r1, [r9, #36]	; 0x24
   1b688:	add	r4, r3, sl
   1b68c:	cmp	r4, r1
   1b690:	bhi	1b778 <__assert_fail@plt+0xa018>
   1b694:	ldr	r0, [r9, #12]
   1b698:	cmp	r0, #0
   1b69c:	bne	1b6bc <__assert_fail@plt+0x9f5c>
   1b6a0:	lsl	r0, r1, #2
   1b6a4:	mov	r8, r3
   1b6a8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1b6ac:	mov	r3, r8
   1b6b0:	cmp	r0, #0
   1b6b4:	str	r0, [r9, #12]
   1b6b8:	beq	1b788 <__assert_fail@plt+0xa028>
   1b6bc:	ldrb	r1, [r9, #76]	; 0x4c
   1b6c0:	cmp	r1, #0
   1b6c4:	bne	1b7ac <__assert_fail@plt+0xa04c>
   1b6c8:	cmp	sl, #0
   1b6cc:	beq	1b7a4 <__assert_fail@plt+0xa044>
   1b6d0:	mov	r1, #0
   1b6d4:	cmp	sl, #4
   1b6d8:	bcc	1b794 <__assert_fail@plt+0xa034>
   1b6dc:	add	r2, pc, #524	; 0x20c
   1b6e0:	bic	r1, sl, #3
   1b6e4:	vmov.i32	q8, #4	; 0x00000004
   1b6e8:	vld1.64	{d18-d19}, [r2 :128]
   1b6ec:	mov	ip, r1
   1b6f0:	mov	r2, r0
   1b6f4:	vadd.i32	q10, q9, q8
   1b6f8:	vst1.32	{d18-d19}, [r2]!
   1b6fc:	subs	ip, ip, #4
   1b700:	vorr	q9, q10, q10
   1b704:	bne	1b6f4 <__assert_fail@plt+0x9f94>
   1b708:	b	1b79c <__assert_fail@plt+0xa03c>
   1b70c:	ldr	r0, [r9, #12]
   1b710:	mov	r1, #0
   1b714:	cmp	r5, #4
   1b718:	bcc	1b754 <__assert_fail@plt+0x9ff4>
   1b71c:	add	r3, pc, #460	; 0x1cc
   1b720:	bic	r1, r5, #3
   1b724:	add	r2, r0, sl, lsl #2
   1b728:	vdup.32	q8, r6
   1b72c:	vmov.i32	q10, #4	; 0x00000004
   1b730:	vld1.64	{d18-d19}, [r3 :128]
   1b734:	mov	r3, r1
   1b738:	vadd.i32	q11, q9, q8
   1b73c:	vadd.i32	q9, q9, q10
   1b740:	subs	r3, r3, #4
   1b744:	vst1.32	{d22-d23}, [r2]!
   1b748:	bne	1b738 <__assert_fail@plt+0x9fd8>
   1b74c:	cmp	r5, r1
   1b750:	beq	1b550 <__assert_fail@plt+0x9df0>
   1b754:	add	r2, r6, r1
   1b758:	sub	r3, r5, r1
   1b75c:	add	r1, sl, r1
   1b760:	add	r0, r0, r1, lsl #2
   1b764:	str	r2, [r0], #4
   1b768:	add	r2, r2, #1
   1b76c:	subs	r3, r3, #1
   1b770:	bne	1b764 <__assert_fail@plt+0xa004>
   1b774:	b	1b550 <__assert_fail@plt+0x9df0>
   1b778:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1b77c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1b780:	stm	r8, {r0, r1}
   1b784:	b	1b594 <__assert_fail@plt+0x9e34>
   1b788:	mov	r0, #12
   1b78c:	sub	sp, fp, #28
   1b790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b794:	str	r1, [r0, r1, lsl #2]
   1b798:	add	r1, r1, #1
   1b79c:	cmp	sl, r1
   1b7a0:	bne	1b794 <__assert_fail@plt+0xa034>
   1b7a4:	mov	r0, #1
   1b7a8:	strb	r0, [r9, #76]	; 0x4c
   1b7ac:	ldr	r0, [r9, #4]
   1b7b0:	add	r1, sp, #16
   1b7b4:	mov	r2, r3
   1b7b8:	mov	r8, r3
   1b7bc:	add	r0, r0, sl
   1b7c0:	bl	11484 <memcpy@plt>
   1b7c4:	ldr	lr, [r9, #8]
   1b7c8:	ldr	ip, [sp, #4]
   1b7cc:	cmp	r8, #2
   1b7d0:	str	r7, [lr, sl, lsl #2]
   1b7d4:	ldr	r2, [r9, #12]
   1b7d8:	str	ip, [r2, sl, lsl #2]
   1b7dc:	bcc	1b8b0 <__assert_fail@plt+0xa150>
   1b7e0:	sub	r0, r8, #1
   1b7e4:	mov	r1, #1
   1b7e8:	cmp	r0, #4
   1b7ec:	bcs	1b7f8 <__assert_fail@plt+0xa098>
   1b7f0:	ldr	ip, [sp, #4]
   1b7f4:	b	1b880 <__assert_fail@plt+0xa120>
   1b7f8:	str	r0, [sp]
   1b7fc:	add	r3, r8, sl
   1b800:	add	r0, sl, #1
   1b804:	add	r7, lr, r0, lsl #2
   1b808:	add	ip, lr, r3, lsl #2
   1b80c:	add	r0, r2, r0, lsl #2
   1b810:	cmp	r0, ip
   1b814:	ldr	ip, [sp, #4]
   1b818:	addcc	r3, r2, r3, lsl #2
   1b81c:	cmpcc	r7, r3
   1b820:	bcc	1b880 <__assert_fail@plt+0xa120>
   1b824:	add	r1, pc, #212	; 0xd4
   1b828:	vdup.32	q8, ip
   1b82c:	vdup.32	q9, r6
   1b830:	vdup.32	q10, r5
   1b834:	vmov.i32	q12, #4	; 0x00000004
   1b838:	vmov.i8	q13, #255	; 0xff
   1b83c:	vld1.64	{d22-d23}, [r1 :128]
   1b840:	ldr	r1, [sp]
   1b844:	bic	ip, r1, #3
   1b848:	orr	r1, ip, #1
   1b84c:	mov	r3, ip
   1b850:	vcgt.u32	q14, q10, q11
   1b854:	subs	r3, r3, #4
   1b858:	vbsl	q14, q11, q9
   1b85c:	vadd.i32	q11, q11, q12
   1b860:	vadd.i32	q14, q14, q8
   1b864:	vst1.32	{d28-d29}, [r0]!
   1b868:	vst1.32	{d26-d27}, [r7]!
   1b86c:	bne	1b850 <__assert_fail@plt+0xa0f0>
   1b870:	ldr	r0, [sp]
   1b874:	cmp	r0, ip
   1b878:	ldr	ip, [sp, #4]
   1b87c:	beq	1b8b0 <__assert_fail@plt+0xa150>
   1b880:	add	r2, r2, sl, lsl #2
   1b884:	add	r0, lr, sl, lsl #2
   1b888:	mvn	r3, #0
   1b88c:	cmp	r1, r5
   1b890:	mov	r7, r6
   1b894:	movcc	r7, r1
   1b898:	add	r7, r7, ip
   1b89c:	str	r7, [r2, r1, lsl #2]
   1b8a0:	str	r3, [r0, r1, lsl #2]
   1b8a4:	add	r1, r1, #1
   1b8a8:	cmp	r8, r1
   1b8ac:	bne	1b88c <__assert_fail@plt+0xa12c>
   1b8b0:	ldr	r0, [r9, #48]	; 0x30
   1b8b4:	ldr	r2, [r9, #52]	; 0x34
   1b8b8:	sub	r1, r8, r5
   1b8bc:	mov	r6, ip
   1b8c0:	add	r6, r5, r6
   1b8c4:	add	r0, r0, r1
   1b8c8:	cmp	r2, ip
   1b8cc:	str	r0, [r9, #48]	; 0x30
   1b8d0:	ldrgt	r2, [r9, #56]	; 0x38
   1b8d4:	addgt	r1, r2, r1
   1b8d8:	strgt	r1, [r9, #56]	; 0x38
   1b8dc:	ldr	r1, [r9, #36]	; 0x24
   1b8e0:	cmp	r1, r0
   1b8e4:	movgt	r1, r0
   1b8e8:	str	r1, [sp]
   1b8ec:	b	1b484 <__assert_fail@plt+0x9d24>
   1b8f0:	andeq	r0, r0, r0
   1b8f4:	andeq	r0, r0, r1
   1b8f8:	andeq	r0, r0, r2
   1b8fc:	andeq	r0, r0, r3
   1b900:	andeq	r0, r0, r1
   1b904:	andeq	r0, r0, r2
   1b908:	andeq	r0, r0, r3
   1b90c:	andeq	r0, r0, r4
   1b910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b914:	add	fp, sp, #28
   1b918:	sub	sp, sp, #68	; 0x44
   1b91c:	mov	r4, r0
   1b920:	ldr	r6, [r0, #28]
   1b924:	ldr	r7, [r0, #36]	; 0x24
   1b928:	ldr	r0, [r0, #48]	; 0x30
   1b92c:	cmp	r7, r0
   1b930:	movgt	r7, r0
   1b934:	cmp	r7, r6
   1b938:	ble	1bad8 <__assert_fail@plt+0xa378>
   1b93c:	add	r8, r4, #16
   1b940:	mov	r5, sp
   1b944:	ldm	r8, {r9, sl}
   1b948:	ldr	r0, [r4, #64]	; 0x40
   1b94c:	sub	r2, r7, r6
   1b950:	cmp	r0, #0
   1b954:	bne	1ba24 <__assert_fail@plt+0xa2c4>
   1b958:	ldr	r0, [r4]
   1b95c:	ldr	r1, [r4, #24]
   1b960:	add	r0, r0, r1
   1b964:	add	r1, r0, r6
   1b968:	mov	r0, r5
   1b96c:	mov	r3, r8
   1b970:	bl	2ac8c <__assert_fail@plt+0x1952c>
   1b974:	add	r1, r0, #1
   1b978:	cmp	r1, #2
   1b97c:	bcc	1b998 <__assert_fail@plt+0xa238>
   1b980:	cmn	r0, #2
   1b984:	bne	1b9d4 <__assert_fail@plt+0xa274>
   1b988:	ldr	r0, [r4, #36]	; 0x24
   1b98c:	ldr	r1, [r4, #48]	; 0x30
   1b990:	cmp	r0, r1
   1b994:	blt	1bad4 <__assert_fail@plt+0xa374>
   1b998:	ldr	r1, [r4, #24]
   1b99c:	ldr	r0, [r4]
   1b9a0:	mov	r2, sl
   1b9a4:	mov	sl, r5
   1b9a8:	add	r1, r1, r6
   1b9ac:	ldrb	r1, [r0, r1]
   1b9b0:	str	r1, [sp]
   1b9b4:	ldr	r0, [r4, #64]	; 0x40
   1b9b8:	cmp	r0, #0
   1b9bc:	ldrbne	r1, [r0, r1]
   1b9c0:	mov	r0, #1
   1b9c4:	strne	r1, [sp]
   1b9c8:	str	r9, [r8]
   1b9cc:	str	r2, [r8, #4]
   1b9d0:	b	1b9dc <__assert_fail@plt+0xa27c>
   1b9d4:	ldr	r1, [sp]
   1b9d8:	mov	sl, r5
   1b9dc:	ldr	r3, [r4, #8]
   1b9e0:	add	r5, r0, r6
   1b9e4:	str	r1, [r3, r6, lsl #2]
   1b9e8:	add	r1, r6, #1
   1b9ec:	cmp	r1, r5
   1b9f0:	bge	1ba10 <__assert_fail@plt+0xa2b0>
   1b9f4:	mvn	r1, #3
   1b9f8:	add	r2, r1, r0, lsl #2
   1b9fc:	add	r0, r3, r6, lsl #2
   1ba00:	mov	r1, #255	; 0xff
   1ba04:	add	r0, r0, #4
   1ba08:	bl	11670 <memset@plt>
   1ba0c:	mov	r1, r5
   1ba10:	cmp	r7, r1
   1ba14:	mov	r6, r1
   1ba18:	mov	r5, sl
   1ba1c:	bgt	1b944 <__assert_fail@plt+0xa1e4>
   1ba20:	b	1badc <__assert_fail@plt+0xa37c>
   1ba24:	cmp	r2, #1
   1ba28:	add	r1, sp, #4
   1ba2c:	blt	1b968 <__assert_fail@plt+0xa208>
   1ba30:	ldr	r1, [r4, #80]	; 0x50
   1ba34:	cmp	r1, #1
   1ba38:	add	r1, sp, #4
   1ba3c:	blt	1b968 <__assert_fail@plt+0xa208>
   1ba40:	ldm	r4, {r1, r3}
   1ba44:	mov	lr, r5
   1ba48:	ldr	r5, [r4, #24]
   1ba4c:	cmp	r2, #2
   1ba50:	add	r5, r6, r5
   1ba54:	ldrb	r1, [r1, r5]
   1ba58:	mov	r5, lr
   1ba5c:	ldrb	r0, [r0, r1]
   1ba60:	add	r1, sp, #4
   1ba64:	strb	r0, [r3, r6]
   1ba68:	strb	r0, [sp, #4]
   1ba6c:	blt	1b968 <__assert_fail@plt+0xa208>
   1ba70:	ldr	r0, [r4, #80]	; 0x50
   1ba74:	add	r1, sp, #4
   1ba78:	cmp	r0, #2
   1ba7c:	blt	1b968 <__assert_fail@plt+0xa208>
   1ba80:	mov	r0, #1
   1ba84:	ldm	r4, {r1, ip}
   1ba88:	ldr	r5, [r4, #24]
   1ba8c:	ldr	r3, [r4, #64]	; 0x40
   1ba90:	add	r1, r1, r5
   1ba94:	add	r1, r1, r6
   1ba98:	ldrb	r1, [r1, r0]
   1ba9c:	ldrb	r1, [r3, r1]
   1baa0:	add	r3, ip, r6
   1baa4:	strb	r1, [r3, r0]
   1baa8:	add	r3, sp, #4
   1baac:	strb	r1, [r3, r0]
   1bab0:	add	r0, r0, #1
   1bab4:	cmp	r0, r2
   1bab8:	bge	1bac8 <__assert_fail@plt+0xa368>
   1babc:	ldr	r1, [r4, #80]	; 0x50
   1bac0:	cmp	r0, r1
   1bac4:	blt	1ba84 <__assert_fail@plt+0xa324>
   1bac8:	add	r1, sp, #4
   1bacc:	mov	r5, lr
   1bad0:	b	1b968 <__assert_fail@plt+0xa208>
   1bad4:	stm	r8, {r9, sl}
   1bad8:	mov	r1, r6
   1badc:	str	r1, [r4, #28]
   1bae0:	str	r1, [r4, #32]
   1bae4:	sub	sp, fp, #28
   1bae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1baec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baf0:	add	fp, sp, #28
   1baf4:	sub	sp, sp, #28
   1baf8:	ldr	r9, [r1]
   1bafc:	mov	r5, r0
   1bb00:	ldr	r4, [fp, #12]
   1bb04:	mov	r6, r2
   1bb08:	str	r1, [sp, #16]
   1bb0c:	str	r3, [sp, #20]
   1bb10:	ldr	r0, [r9, #84]	; 0x54
   1bb14:	str	r4, [sp, #4]
   1bb18:	str	r0, [sp, #12]
   1bb1c:	ldr	r0, [fp, #8]
   1bb20:	str	r0, [sp]
   1bb24:	mov	r0, r5
   1bb28:	bl	1c594 <__assert_fail@plt+0xae34>
   1bb2c:	mov	r7, r0
   1bb30:	cmp	r0, #0
   1bb34:	bne	1bb44 <__assert_fail@plt+0xa3e4>
   1bb38:	ldr	r0, [r4]
   1bb3c:	cmp	r0, #0
   1bb40:	bne	1bd54 <__assert_fail@plt+0xa5f4>
   1bb44:	ldrb	r0, [r6, #4]
   1bb48:	cmp	r0, #10
   1bb4c:	bne	1bc90 <__assert_fail@plt+0xa530>
   1bb50:	ldr	r0, [sp, #20]
   1bb54:	mov	sl, #0
   1bb58:	orr	r0, r0, #8388608	; 0x800000
   1bb5c:	str	r0, [sp, #24]
   1bb60:	b	1bc00 <__assert_fail@plt+0xa4a0>
   1bb64:	ldr	r1, [fp, #8]
   1bb68:	cmp	r1, #0
   1bb6c:	beq	1bb7c <__assert_fail@plt+0xa41c>
   1bb70:	cmp	r0, #9
   1bb74:	mov	r8, #0
   1bb78:	beq	1bc30 <__assert_fail@plt+0xa4d0>
   1bb7c:	ldr	r0, [sp, #12]
   1bb80:	ldr	r4, [r9, #84]	; 0x54
   1bb84:	ldr	r1, [sp, #16]
   1bb88:	ldr	r3, [sp, #20]
   1bb8c:	mov	r2, r6
   1bb90:	str	r0, [r9, #84]	; 0x54
   1bb94:	ldr	r0, [fp, #8]
   1bb98:	str	r0, [sp]
   1bb9c:	ldr	r0, [fp, #12]
   1bba0:	str	r0, [sp, #4]
   1bba4:	mov	r0, r5
   1bba8:	bl	1c594 <__assert_fail@plt+0xae34>
   1bbac:	mov	r8, r0
   1bbb0:	cmp	r0, #0
   1bbb4:	bne	1bbc8 <__assert_fail@plt+0xa468>
   1bbb8:	ldr	r0, [fp, #12]
   1bbbc:	ldr	r0, [r0]
   1bbc0:	cmp	r0, #0
   1bbc4:	bne	1bca0 <__assert_fail@plt+0xa540>
   1bbc8:	ldr	r0, [r9, #84]	; 0x54
   1bbcc:	orr	r0, r0, r4
   1bbd0:	str	r0, [r9, #84]	; 0x54
   1bbd4:	b	1bc30 <__assert_fail@plt+0xa4d0>
   1bbd8:	mov	r0, #996	; 0x3e4
   1bbdc:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1bbe0:	cmp	r0, #0
   1bbe4:	beq	1bd48 <__assert_fail@plt+0xa5e8>
   1bbe8:	ldr	r1, [r9, #56]	; 0x38
   1bbec:	str	r1, [r0]
   1bbf0:	mov	r1, #0
   1bbf4:	str	r1, [r9, #64]	; 0x40
   1bbf8:	str	r0, [r9, #56]	; 0x38
   1bbfc:	b	1bc40 <__assert_fail@plt+0xa4e0>
   1bc00:	ldr	r2, [sp, #24]
   1bc04:	mov	r0, r6
   1bc08:	mov	r1, r5
   1bc0c:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1bc10:	ldr	r1, [r5, #40]	; 0x28
   1bc14:	mov	r8, #0
   1bc18:	add	r0, r1, r0
   1bc1c:	str	r0, [r5, #40]	; 0x28
   1bc20:	ldrb	r0, [r6, #4]
   1bc24:	orr	r1, r0, #8
   1bc28:	cmp	r1, #10
   1bc2c:	bne	1bb64 <__assert_fail@plt+0xa404>
   1bc30:	ldr	r1, [r9, #64]	; 0x40
   1bc34:	cmp	r1, #31
   1bc38:	beq	1bbd8 <__assert_fail@plt+0xa478>
   1bc3c:	ldr	r0, [r9, #56]	; 0x38
   1bc40:	add	r2, r1, #1
   1bc44:	add	r4, r0, r1, lsl #5
   1bc48:	mov	r0, #10
   1bc4c:	cmp	r7, #0
   1bc50:	str	r2, [r9, #64]	; 0x40
   1bc54:	str	sl, [r4, #4]!
   1bc58:	stmib	r4, {r7, r8, sl}
   1bc5c:	str	sl, [r4, #16]
   1bc60:	str	sl, [r4, #20]
   1bc64:	str	r0, [r4, #24]
   1bc68:	mvn	r0, #0
   1bc6c:	str	r0, [r4, #28]
   1bc70:	strne	r4, [r7]
   1bc74:	cmp	r8, #0
   1bc78:	mov	r7, r4
   1bc7c:	strne	r4, [r8]
   1bc80:	ldrb	r0, [r6, #4]
   1bc84:	cmp	r0, #10
   1bc88:	beq	1bc00 <__assert_fail@plt+0xa4a0>
   1bc8c:	b	1bc94 <__assert_fail@plt+0xa534>
   1bc90:	mov	r4, r7
   1bc94:	mov	r0, r4
   1bc98:	sub	sp, fp, #28
   1bc9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bca0:	mov	r4, #0
   1bca4:	cmp	r7, #0
   1bca8:	beq	1bc94 <__assert_fail@plt+0xa534>
   1bcac:	movw	r8, #255	; 0xff
   1bcb0:	movt	r8, #4
   1bcb4:	mov	r6, r7
   1bcb8:	ldr	r7, [r7, #4]
   1bcbc:	cmp	r7, #0
   1bcc0:	bne	1bcb4 <__assert_fail@plt+0xa554>
   1bcc4:	ldr	r7, [r6, #8]
   1bcc8:	cmp	r7, #0
   1bccc:	bne	1bcb4 <__assert_fail@plt+0xa554>
   1bcd0:	ldr	r0, [r6, #24]
   1bcd4:	and	r0, r0, r8
   1bcd8:	cmp	r0, #3
   1bcdc:	beq	1bd14 <__assert_fail@plt+0xa5b4>
   1bce0:	cmp	r0, #6
   1bce4:	bne	1bd1c <__assert_fail@plt+0xa5bc>
   1bce8:	ldr	r5, [r6, #20]
   1bcec:	ldr	r0, [r5]
   1bcf0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1bcf4:	ldr	r0, [r5, #4]
   1bcf8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1bcfc:	ldr	r0, [r5, #8]
   1bd00:	bl	141c4 <__assert_fail@plt+0x2a64>
   1bd04:	ldr	r0, [r5, #12]
   1bd08:	bl	141c4 <__assert_fail@plt+0x2a64>
   1bd0c:	mov	r0, r5
   1bd10:	b	1bd18 <__assert_fail@plt+0xa5b8>
   1bd14:	ldr	r0, [r6, #20]
   1bd18:	bl	141c4 <__assert_fail@plt+0x2a64>
   1bd1c:	ldr	r0, [r6]
   1bd20:	cmp	r0, #0
   1bd24:	beq	1bc94 <__assert_fail@plt+0xa534>
   1bd28:	ldr	r7, [r0, #8]
   1bd2c:	cmp	r7, r6
   1bd30:	mov	r6, r0
   1bd34:	beq	1bcd0 <__assert_fail@plt+0xa570>
   1bd38:	cmp	r7, #0
   1bd3c:	mov	r6, r0
   1bd40:	beq	1bcd0 <__assert_fail@plt+0xa570>
   1bd44:	b	1bcb4 <__assert_fail@plt+0xa554>
   1bd48:	ldr	r1, [fp, #12]
   1bd4c:	mov	r0, #12
   1bd50:	str	r0, [r1]
   1bd54:	mov	r4, #0
   1bd58:	b	1bc94 <__assert_fail@plt+0xa534>
   1bd5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bd60:	add	fp, sp, #24
   1bd64:	sub	sp, sp, #8
   1bd68:	mov	r9, r0
   1bd6c:	mov	r7, r1
   1bd70:	ldr	r0, [r1, #40]	; 0x28
   1bd74:	ldr	r1, [r1, #56]	; 0x38
   1bd78:	cmp	r1, r0
   1bd7c:	ble	1be64 <__assert_fail@plt+0xa704>
   1bd80:	ldr	r1, [r7, #4]
   1bd84:	mov	r5, r9
   1bd88:	mov	r8, r2
   1bd8c:	ldrb	r6, [r1, r0]
   1bd90:	strb	r6, [r5], #4
   1bd94:	ldr	r0, [r5]
   1bd98:	bic	r1, r0, #6291456	; 0x600000
   1bd9c:	str	r1, [r5]
   1bda0:	ldr	r3, [r7, #80]	; 0x50
   1bda4:	cmp	r3, #2
   1bda8:	blt	1bdcc <__assert_fail@plt+0xa66c>
   1bdac:	ldr	r2, [r7, #28]
   1bdb0:	ldr	r1, [r7, #40]	; 0x28
   1bdb4:	cmp	r1, r2
   1bdb8:	beq	1bdcc <__assert_fail@plt+0xa66c>
   1bdbc:	ldr	r2, [r7, #8]
   1bdc0:	ldr	r1, [r2, r1, lsl #2]
   1bdc4:	cmn	r1, #1
   1bdc8:	beq	1c2a0 <__assert_fail@plt+0xab40>
   1bdcc:	movw	r1, #65280	; 0xff00
   1bdd0:	cmp	r6, #92	; 0x5c
   1bdd4:	movt	r1, #65439	; 0xff9f
   1bdd8:	bne	1be74 <__assert_fail@plt+0xa714>
   1bddc:	ldr	r6, [r7, #40]	; 0x28
   1bde0:	ldr	r4, [r7, #48]	; 0x30
   1bde4:	add	r2, r6, #1
   1bde8:	cmp	r2, r4
   1bdec:	bge	1bec8 <__assert_fail@plt+0xa768>
   1bdf0:	ldrb	r4, [r7, #75]	; 0x4b
   1bdf4:	cmp	r4, #0
   1bdf8:	bne	1c524 <__assert_fail@plt+0xadc4>
   1bdfc:	ldr	r3, [r7, #4]
   1be00:	ldrb	r6, [r3, r2]
   1be04:	and	r0, r0, r1
   1be08:	strb	r6, [r9]
   1be0c:	orr	r4, r0, #1
   1be10:	str	r4, [r9, #4]
   1be14:	ldr	r0, [r7, #80]	; 0x50
   1be18:	cmp	r0, #2
   1be1c:	blt	1c0ec <__assert_fail@plt+0xa98c>
   1be20:	ldr	r0, [r7, #8]
   1be24:	ldr	r1, [r7, #40]	; 0x28
   1be28:	add	r0, r0, r1, lsl #2
   1be2c:	ldr	r4, [r0, #4]
   1be30:	mov	r0, r4
   1be34:	bl	1164c <iswalnum@plt>
   1be38:	sub	r1, r4, #95	; 0x5f
   1be3c:	cmp	r0, #0
   1be40:	clz	r1, r1
   1be44:	movwne	r0, #1
   1be48:	lsr	r1, r1, #5
   1be4c:	orr	r0, r1, r0
   1be50:	ldr	r1, [r5]
   1be54:	bic	r1, r1, #4194304	; 0x400000
   1be58:	orr	r0, r1, r0, lsl #22
   1be5c:	uxtb	r1, r6
   1be60:	b	1c110 <__assert_fail@plt+0xa9b0>
   1be64:	mov	r0, #2
   1be68:	mov	r4, #0
   1be6c:	strb	r0, [r9, #4]
   1be70:	b	1c518 <__assert_fail@plt+0xadb8>
   1be74:	and	r0, r0, r1
   1be78:	orr	r4, r0, #1
   1be7c:	str	r4, [r5]
   1be80:	ldr	r0, [r7, #80]	; 0x50
   1be84:	cmp	r0, #2
   1be88:	blt	1bed4 <__assert_fail@plt+0xa774>
   1be8c:	ldr	r0, [r7, #8]
   1be90:	ldr	r1, [r7, #40]	; 0x28
   1be94:	ldr	r4, [r0, r1, lsl #2]
   1be98:	mov	r0, r4
   1be9c:	bl	1164c <iswalnum@plt>
   1bea0:	sub	r1, r4, #95	; 0x5f
   1bea4:	cmp	r0, #0
   1bea8:	clz	r1, r1
   1beac:	movwne	r0, #1
   1beb0:	lsr	r1, r1, #5
   1beb4:	orr	r0, r1, r0
   1beb8:	ldr	r1, [r5]
   1bebc:	bic	r1, r1, #4194304	; 0x400000
   1bec0:	orr	r0, r1, r0, lsl #22
   1bec4:	b	1bef4 <__assert_fail@plt+0xa794>
   1bec8:	and	r0, r0, r1
   1becc:	orr	r0, r0, #36	; 0x24
   1bed0:	b	1c2b4 <__assert_fail@plt+0xab54>
   1bed4:	bl	11610 <__ctype_b_loc@plt>
   1bed8:	ldr	r0, [r0]
   1bedc:	cmp	r6, #95	; 0x5f
   1bee0:	add	r0, r0, r6, lsl #1
   1bee4:	ldrh	r0, [r0]
   1bee8:	ubfx	r0, r0, #3, #1
   1beec:	movweq	r0, #1
   1bef0:	orr	r0, r4, r0, lsl #22
   1bef4:	sub	r1, r6, #10
   1bef8:	mov	r4, #1
   1befc:	str	r0, [r5]
   1bf00:	cmp	r1, #115	; 0x73
   1bf04:	bhi	1c518 <__assert_fail@plt+0xadb8>
   1bf08:	add	r2, pc, #0
   1bf0c:	ldr	pc, [r2, r1, lsl #2]
   1bf10:	andeq	ip, r1, r0, ror #1
   1bf14:	andeq	ip, r1, r8, lsl r5
   1bf18:	andeq	ip, r1, r8, lsl r5
   1bf1c:	andeq	ip, r1, r8, lsl r5
   1bf20:	andeq	ip, r1, r8, lsl r5
   1bf24:	andeq	ip, r1, r8, lsl r5
   1bf28:	andeq	ip, r1, r8, lsl r5
   1bf2c:	andeq	ip, r1, r8, lsl r5
   1bf30:	andeq	ip, r1, r8, lsl r5
   1bf34:	andeq	ip, r1, r8, lsl r5
   1bf38:	andeq	ip, r1, r8, lsl r5
   1bf3c:	andeq	ip, r1, r8, lsl r5
   1bf40:	andeq	ip, r1, r8, lsl r5
   1bf44:	andeq	ip, r1, r8, lsl r5
   1bf48:	andeq	ip, r1, r8, lsl r5
   1bf4c:	andeq	ip, r1, r8, lsl r5
   1bf50:	andeq	ip, r1, r8, lsl r5
   1bf54:	andeq	ip, r1, r8, lsl r5
   1bf58:	andeq	ip, r1, r8, lsl r5
   1bf5c:	andeq	ip, r1, r8, lsl r5
   1bf60:	andeq	ip, r1, r8, lsl r5
   1bf64:	andeq	ip, r1, r8, lsl r5
   1bf68:	andeq	ip, r1, r8, lsl r5
   1bf6c:	andeq	ip, r1, r8, lsl r5
   1bf70:	andeq	ip, r1, r8, lsl r5
   1bf74:	andeq	ip, r1, r8, lsl r5
   1bf78:	andeq	ip, r1, r0, asr #5
   1bf7c:	andeq	ip, r1, r8, lsl r5
   1bf80:	andeq	ip, r1, r8, lsl r5
   1bf84:	andeq	ip, r1, r8, lsl r5
   1bf88:	andeq	ip, r1, r8, lsl r3
   1bf8c:	andeq	ip, r1, r4, lsr #6
   1bf90:	andeq	ip, r1, r0, lsr r3
   1bf94:	andeq	ip, r1, r8, lsr r3
   1bf98:	andeq	ip, r1, r8, lsl r5
   1bf9c:	andeq	ip, r1, r8, lsl r5
   1bfa0:	andeq	ip, r1, r8, asr #6
   1bfa4:	andeq	ip, r1, r8, lsl r5
   1bfa8:	andeq	ip, r1, r8, lsl r5
   1bfac:	andeq	ip, r1, r8, lsl r5
   1bfb0:	andeq	ip, r1, r8, lsl r5
   1bfb4:	andeq	ip, r1, r8, lsl r5
   1bfb8:	andeq	ip, r1, r8, lsl r5
   1bfbc:	andeq	ip, r1, r8, lsl r5
   1bfc0:	andeq	ip, r1, r8, lsl r5
   1bfc4:	andeq	ip, r1, r8, lsl r5
   1bfc8:	andeq	ip, r1, r8, lsl r5
   1bfcc:	andeq	ip, r1, r8, lsl r5
   1bfd0:	andeq	ip, r1, r8, lsl r5
   1bfd4:	andeq	ip, r1, r8, lsl r5
   1bfd8:	andeq	ip, r1, r8, lsl r5
   1bfdc:	andeq	ip, r1, r8, lsl r5
   1bfe0:	andeq	ip, r1, r8, lsl r5
   1bfe4:	andeq	ip, r1, r0, asr r3
   1bfe8:	andeq	ip, r1, r8, lsl r5
   1bfec:	andeq	ip, r1, r8, lsl r5
   1bff0:	andeq	ip, r1, r8, lsl r5
   1bff4:	andeq	ip, r1, r8, lsl r5
   1bff8:	andeq	ip, r1, r8, lsl r5
   1bffc:	andeq	ip, r1, r8, lsl r5
   1c000:	andeq	ip, r1, r8, lsl r5
   1c004:	andeq	ip, r1, r8, lsl r5
   1c008:	andeq	ip, r1, r8, lsl r5
   1c00c:	andeq	ip, r1, r8, lsl r5
   1c010:	andeq	ip, r1, r8, lsl r5
   1c014:	andeq	ip, r1, r8, lsl r5
   1c018:	andeq	ip, r1, r8, lsl r5
   1c01c:	andeq	ip, r1, r8, lsl r5
   1c020:	andeq	ip, r1, r8, lsl r5
   1c024:	andeq	ip, r1, r8, lsl r5
   1c028:	andeq	ip, r1, r8, lsl r5
   1c02c:	andeq	ip, r1, r8, lsl r5
   1c030:	andeq	ip, r1, r8, lsl r5
   1c034:	andeq	ip, r1, r8, lsl r5
   1c038:	andeq	ip, r1, r8, lsl r5
   1c03c:	andeq	ip, r1, r8, lsl r5
   1c040:	andeq	ip, r1, r8, lsl r5
   1c044:	andeq	ip, r1, r8, lsl r5
   1c048:	andeq	ip, r1, r8, lsl r5
   1c04c:	andeq	ip, r1, r8, lsl r5
   1c050:	andeq	ip, r1, r8, lsl r5
   1c054:	andeq	ip, r1, r0, ror #6
   1c058:	andeq	ip, r1, r8, lsl r5
   1c05c:	andeq	ip, r1, r8, lsl r5
   1c060:	andeq	ip, r1, r8, ror #6
   1c064:	andeq	ip, r1, r8, lsl r5
   1c068:	andeq	ip, r1, r8, lsl r5
   1c06c:	andeq	ip, r1, r8, lsl r5
   1c070:	andeq	ip, r1, r8, lsl r5
   1c074:	andeq	ip, r1, r8, lsl r5
   1c078:	andeq	ip, r1, r8, lsl r5
   1c07c:	andeq	ip, r1, r8, lsl r5
   1c080:	andeq	ip, r1, r8, lsl r5
   1c084:	andeq	ip, r1, r8, lsl r5
   1c088:	andeq	ip, r1, r8, lsl r5
   1c08c:	andeq	ip, r1, r8, lsl r5
   1c090:	andeq	ip, r1, r8, lsl r5
   1c094:	andeq	ip, r1, r8, lsl r5
   1c098:	andeq	ip, r1, r8, lsl r5
   1c09c:	andeq	ip, r1, r8, lsl r5
   1c0a0:	andeq	ip, r1, r8, lsl r5
   1c0a4:	andeq	ip, r1, r8, lsl r5
   1c0a8:	andeq	ip, r1, r8, lsl r5
   1c0ac:	andeq	ip, r1, r8, lsl r5
   1c0b0:	andeq	ip, r1, r8, lsl r5
   1c0b4:	andeq	ip, r1, r8, lsl r5
   1c0b8:	andeq	ip, r1, r8, lsl r5
   1c0bc:	andeq	ip, r1, r8, lsl r5
   1c0c0:	andeq	ip, r1, r8, lsl r5
   1c0c4:	andeq	ip, r1, r8, lsl r5
   1c0c8:	andeq	ip, r1, r8, lsl r5
   1c0cc:	andeq	ip, r1, r8, lsl r5
   1c0d0:	andeq	ip, r1, r8, lsl r5
   1c0d4:	muleq	r1, r0, r3
   1c0d8:	andeq	ip, r1, r0, lsr #7
   1c0dc:			; <UNDEFINED> instruction: 0x0001c3b4
   1c0e0:	tst	r8, #2048	; 0x800
   1c0e4:	bne	1c3ac <__assert_fail@plt+0xac4c>
   1c0e8:	b	1c518 <__assert_fail@plt+0xadb8>
   1c0ec:	bl	11610 <__ctype_b_loc@plt>
   1c0f0:	ldr	r0, [r0]
   1c0f4:	uxtb	r1, r6
   1c0f8:	cmp	r1, #95	; 0x5f
   1c0fc:	add	r0, r0, r1, lsl #1
   1c100:	ldrh	r0, [r0]
   1c104:	ubfx	r0, r0, #3, #1
   1c108:	movweq	r0, #1
   1c10c:	orr	r0, r4, r0, lsl #22
   1c110:	mvn	r2, #38	; 0x26
   1c114:	mov	r4, #2
   1c118:	str	r0, [r5]
   1c11c:	uxtab	r2, r2, r6
   1c120:	cmp	r2, #86	; 0x56
   1c124:	bhi	1c518 <__assert_fail@plt+0xadb8>
   1c128:	add	r3, pc, #0
   1c12c:	ldr	pc, [r3, r2, lsl #2]
   1c130:	strdeq	ip, [r1], -r0
   1c134:	andeq	ip, r1, r0, lsl #8
   1c138:	andeq	ip, r1, r0, lsl r4
   1c13c:	andeq	ip, r1, r8, lsl r5
   1c140:	andeq	ip, r1, r0, lsr #8
   1c144:	andeq	ip, r1, r8, lsl r5
   1c148:	andeq	ip, r1, r8, lsl r5
   1c14c:	andeq	ip, r1, r8, lsl r5
   1c150:	andeq	ip, r1, r8, lsl r5
   1c154:	andeq	ip, r1, r8, lsl r5
   1c158:	andeq	ip, r1, ip, lsl #5
   1c15c:	andeq	ip, r1, ip, lsl #5
   1c160:	andeq	ip, r1, ip, lsl #5
   1c164:	andeq	ip, r1, ip, lsl #5
   1c168:	andeq	ip, r1, ip, lsl #5
   1c16c:	andeq	ip, r1, ip, lsl #5
   1c170:	andeq	ip, r1, ip, lsl #5
   1c174:	andeq	ip, r1, ip, lsl #5
   1c178:	andeq	ip, r1, ip, lsl #5
   1c17c:	andeq	ip, r1, r8, lsl r5
   1c180:	andeq	ip, r1, r8, lsl r5
   1c184:	andeq	ip, r1, r8, lsr r4
   1c188:	andeq	ip, r1, r8, lsl r5
   1c18c:	andeq	ip, r1, r8, asr #8
   1c190:	andeq	ip, r1, r8, asr r4
   1c194:	andeq	ip, r1, r8, lsl r5
   1c198:	andeq	ip, r1, r8, lsl r5
   1c19c:	andeq	ip, r1, r0, ror r4
   1c1a0:	andeq	ip, r1, r8, lsl r5
   1c1a4:	andeq	ip, r1, r8, lsl r5
   1c1a8:	andeq	ip, r1, r8, lsl r5
   1c1ac:	andeq	ip, r1, r8, lsl r5
   1c1b0:	andeq	ip, r1, r8, lsl r5
   1c1b4:	andeq	ip, r1, r8, lsl r5
   1c1b8:	andeq	ip, r1, r8, lsl r5
   1c1bc:	andeq	ip, r1, r8, lsl r5
   1c1c0:	andeq	ip, r1, r8, lsl r5
   1c1c4:	andeq	ip, r1, r8, lsl r5
   1c1c8:	andeq	ip, r1, r8, lsl r5
   1c1cc:	andeq	ip, r1, r8, lsl r5
   1c1d0:	andeq	ip, r1, r8, lsl r5
   1c1d4:	andeq	ip, r1, r8, lsl r5
   1c1d8:	andeq	ip, r1, r8, lsl r5
   1c1dc:	andeq	ip, r1, r8, lsl r5
   1c1e0:	andeq	ip, r1, r0, lsl #9
   1c1e4:	andeq	ip, r1, r8, lsl r5
   1c1e8:	andeq	ip, r1, r8, lsl r5
   1c1ec:	andeq	ip, r1, r8, lsl r5
   1c1f0:	muleq	r1, r0, r4
   1c1f4:	andeq	ip, r1, r8, lsl r5
   1c1f8:	andeq	ip, r1, r8, lsl r5
   1c1fc:	andeq	ip, r1, r8, lsl r5
   1c200:	andeq	ip, r1, r8, lsl r5
   1c204:	andeq	ip, r1, r8, lsl r5
   1c208:	andeq	ip, r1, r8, lsl r5
   1c20c:	andeq	ip, r1, r8, lsl r5
   1c210:	andeq	ip, r1, r8, lsl r5
   1c214:	andeq	ip, r1, r0, lsr #9
   1c218:	andeq	ip, r1, r8, lsl r5
   1c21c:			; <UNDEFINED> instruction: 0x0001c4b0
   1c220:	andeq	ip, r1, r8, lsl r5
   1c224:	andeq	ip, r1, r8, lsl r5
   1c228:	andeq	ip, r1, r8, lsl r5
   1c22c:	andeq	ip, r1, r8, lsl r5
   1c230:	andeq	ip, r1, r8, lsl r5
   1c234:	andeq	ip, r1, r8, lsl r5
   1c238:	andeq	ip, r1, r8, lsl r5
   1c23c:	andeq	ip, r1, r8, lsl r5
   1c240:	andeq	ip, r1, r8, lsl r5
   1c244:	andeq	ip, r1, r8, lsl r5
   1c248:	andeq	ip, r1, r8, lsl r5
   1c24c:	andeq	ip, r1, r8, lsl r5
   1c250:	andeq	ip, r1, r8, lsl r5
   1c254:	andeq	ip, r1, r8, lsl r5
   1c258:	andeq	ip, r1, r8, lsl r5
   1c25c:	andeq	ip, r1, r8, lsl r5
   1c260:	andeq	ip, r1, r0, asr #9
   1c264:	andeq	ip, r1, r8, lsl r5
   1c268:	andeq	ip, r1, r8, lsl r5
   1c26c:	andeq	ip, r1, r8, lsl r5
   1c270:	ldrdeq	ip, [r1], -r0
   1c274:	andeq	ip, r1, r8, lsl r5
   1c278:	andeq	ip, r1, r8, lsl r5
   1c27c:	andeq	ip, r1, r8, lsl r5
   1c280:	andeq	ip, r1, r0, ror #9
   1c284:	strdeq	ip, [r1], -r4
   1c288:	andeq	ip, r1, r0, lsl #10
   1c28c:	tst	r8, #16384	; 0x4000
   1c290:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c294:	sub	r1, r1, #49	; 0x31
   1c298:	mov	r2, #4
   1c29c:	b	1c380 <__assert_fail@plt+0xac20>
   1c2a0:	movw	r1, #65280	; 0xff00
   1c2a4:	movt	r1, #65439	; 0xff9f
   1c2a8:	and	r0, r0, r1
   1c2ac:	orr	r0, r0, #1
   1c2b0:	orr	r0, r0, #2097152	; 0x200000
   1c2b4:	str	r0, [r5]
   1c2b8:	mov	r4, #1
   1c2bc:	b	1c518 <__assert_fail@plt+0xadb8>
   1c2c0:	tst	r8, #8
   1c2c4:	bne	1c310 <__assert_fail@plt+0xabb0>
   1c2c8:	ldr	r1, [r7, #40]	; 0x28
   1c2cc:	ldr	r2, [r7, #48]	; 0x30
   1c2d0:	add	r1, r1, #1
   1c2d4:	cmp	r1, r2
   1c2d8:	beq	1c310 <__assert_fail@plt+0xabb0>
   1c2dc:	str	r1, [r7, #40]	; 0x28
   1c2e0:	mov	r0, sp
   1c2e4:	mov	r1, r7
   1c2e8:	mov	r2, r8
   1c2ec:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1c2f0:	ldr	r0, [r7, #40]	; 0x28
   1c2f4:	sub	r0, r0, #1
   1c2f8:	str	r0, [r7, #40]	; 0x28
   1c2fc:	ldrb	r0, [sp, #4]
   1c300:	sub	r0, r0, #9
   1c304:	cmp	r0, #1
   1c308:	bhi	1c518 <__assert_fail@plt+0xadb8>
   1c30c:	ldr	r0, [r5]
   1c310:	mov	r1, #32
   1c314:	b	1c37c <__assert_fail@plt+0xac1c>
   1c318:	tst	r8, #8192	; 0x2000
   1c31c:	bne	1c408 <__assert_fail@plt+0xaca8>
   1c320:	b	1c518 <__assert_fail@plt+0xadb8>
   1c324:	tst	r8, #8192	; 0x2000
   1c328:	bne	1c418 <__assert_fail@plt+0xacb8>
   1c32c:	b	1c518 <__assert_fail@plt+0xadb8>
   1c330:	mov	r1, #11
   1c334:	b	1c510 <__assert_fail@plt+0xadb0>
   1c338:	movw	r1, #1026	; 0x402
   1c33c:	tst	r8, r1
   1c340:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c344:	b	1c430 <__assert_fail@plt+0xacd0>
   1c348:	mov	r1, #5
   1c34c:	b	1c510 <__assert_fail@plt+0xadb0>
   1c350:	movw	r1, #1026	; 0x402
   1c354:	tst	r8, r1
   1c358:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c35c:	b	1c468 <__assert_fail@plt+0xad08>
   1c360:	mov	r1, #20
   1c364:	b	1c510 <__assert_fail@plt+0xadb0>
   1c368:	movw	r1, #8
   1c36c:	movt	r1, #128	; 0x80
   1c370:	tst	r8, r1
   1c374:	beq	1c3c4 <__assert_fail@plt+0xac64>
   1c378:	mov	r1, #16
   1c37c:	mov	r2, #12
   1c380:	bfi	r0, r2, #0, #8
   1c384:	str	r1, [r9]
   1c388:	str	r0, [r9, #4]
   1c38c:	b	1c518 <__assert_fail@plt+0xadb8>
   1c390:	and	r1, r8, #4608	; 0x1200
   1c394:	cmp	r1, #4608	; 0x1200
   1c398:	beq	1c4ec <__assert_fail@plt+0xad8c>
   1c39c:	b	1c518 <__assert_fail@plt+0xadb8>
   1c3a0:	and	r1, r8, #33792	; 0x8400
   1c3a4:	cmp	r1, #32768	; 0x8000
   1c3a8:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c3ac:	mov	r1, #10
   1c3b0:	b	1c510 <__assert_fail@plt+0xadb0>
   1c3b4:	and	r1, r8, #4608	; 0x1200
   1c3b8:	cmp	r1, #4608	; 0x1200
   1c3bc:	beq	1c50c <__assert_fail@plt+0xadac>
   1c3c0:	b	1c518 <__assert_fail@plt+0xadb8>
   1c3c4:	ldr	r1, [r7, #40]	; 0x28
   1c3c8:	cmp	r1, #0
   1c3cc:	beq	1c378 <__assert_fail@plt+0xac18>
   1c3d0:	tst	r8, #2048	; 0x800
   1c3d4:	beq	1c518 <__assert_fail@plt+0xadb8>
   1c3d8:	ldr	r2, [r7, #4]
   1c3dc:	add	r1, r2, r1
   1c3e0:	ldrb	r1, [r1, #-1]
   1c3e4:	cmp	r1, #10
   1c3e8:	beq	1c378 <__assert_fail@plt+0xac18>
   1c3ec:	b	1c518 <__assert_fail@plt+0xadb8>
   1c3f0:	tst	r8, #524288	; 0x80000
   1c3f4:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c3f8:	mov	r1, #128	; 0x80
   1c3fc:	b	1c37c <__assert_fail@plt+0xac1c>
   1c400:	tst	r8, #8192	; 0x2000
   1c404:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c408:	mov	r1, #8
   1c40c:	b	1c510 <__assert_fail@plt+0xadb0>
   1c410:	tst	r8, #8192	; 0x2000
   1c414:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c418:	mov	r1, #9
   1c41c:	b	1c510 <__assert_fail@plt+0xadb0>
   1c420:	movw	r1, #1026	; 0x402
   1c424:	and	r1, r8, r1
   1c428:	cmp	r1, #2
   1c42c:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c430:	mov	r1, #18
   1c434:	b	1c510 <__assert_fail@plt+0xadb0>
   1c438:	tst	r8, #524288	; 0x80000
   1c43c:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c440:	mov	r1, #6
   1c444:	b	1c37c <__assert_fail@plt+0xac1c>
   1c448:	tst	r8, #524288	; 0x80000
   1c44c:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c450:	mov	r1, #9
   1c454:	b	1c37c <__assert_fail@plt+0xac1c>
   1c458:	movw	r1, #1026	; 0x402
   1c45c:	and	r1, r8, r1
   1c460:	cmp	r1, #2
   1c464:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c468:	mov	r1, #19
   1c46c:	b	1c510 <__assert_fail@plt+0xadb0>
   1c470:	tst	r8, #524288	; 0x80000
   1c474:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c478:	mov	r1, #512	; 0x200
   1c47c:	b	1c37c <__assert_fail@plt+0xac1c>
   1c480:	tst	r8, #524288	; 0x80000
   1c484:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c488:	mov	r1, #35	; 0x23
   1c48c:	b	1c510 <__assert_fail@plt+0xadb0>
   1c490:	tst	r8, #524288	; 0x80000
   1c494:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c498:	mov	r1, #33	; 0x21
   1c49c:	b	1c510 <__assert_fail@plt+0xadb0>
   1c4a0:	tst	r8, #524288	; 0x80000
   1c4a4:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c4a8:	mov	r1, #64	; 0x40
   1c4ac:	b	1c37c <__assert_fail@plt+0xac1c>
   1c4b0:	tst	r8, #524288	; 0x80000
   1c4b4:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c4b8:	mov	r1, #256	; 0x100
   1c4bc:	b	1c37c <__assert_fail@plt+0xac1c>
   1c4c0:	tst	r8, #524288	; 0x80000
   1c4c4:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c4c8:	mov	r1, #34	; 0x22
   1c4cc:	b	1c510 <__assert_fail@plt+0xadb0>
   1c4d0:	tst	r8, #524288	; 0x80000
   1c4d4:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c4d8:	mov	r1, #32
   1c4dc:	b	1c510 <__assert_fail@plt+0xadb0>
   1c4e0:	and	r1, r8, #4608	; 0x1200
   1c4e4:	cmp	r1, #512	; 0x200
   1c4e8:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c4ec:	mov	r1, #23
   1c4f0:	b	1c510 <__assert_fail@plt+0xadb0>
   1c4f4:	tst	r8, #33792	; 0x8400
   1c4f8:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c4fc:	b	1c3ac <__assert_fail@plt+0xac4c>
   1c500:	and	r1, r8, #4608	; 0x1200
   1c504:	cmp	r1, #512	; 0x200
   1c508:	bne	1c518 <__assert_fail@plt+0xadb8>
   1c50c:	mov	r1, #24
   1c510:	bfi	r0, r1, #0, #8
   1c514:	str	r0, [r5]
   1c518:	mov	r0, r4
   1c51c:	sub	sp, fp, #24
   1c520:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c524:	cmp	r3, #2
   1c528:	blt	1c558 <__assert_fail@plt+0xadf8>
   1c52c:	ldr	r3, [r7, #8]
   1c530:	ldr	r4, [r3, r2, lsl #2]
   1c534:	cmn	r4, #1
   1c538:	beq	1bdfc <__assert_fail@plt+0xa69c>
   1c53c:	ldr	r4, [r7, #28]
   1c540:	add	r6, r6, #2
   1c544:	cmp	r4, r6
   1c548:	beq	1c558 <__assert_fail@plt+0xadf8>
   1c54c:	ldr	r3, [r3, r6, lsl #2]
   1c550:	cmn	r3, #1
   1c554:	beq	1bdfc <__assert_fail@plt+0xa69c>
   1c558:	ldrb	r3, [r7, #76]	; 0x4c
   1c55c:	mov	r6, r2
   1c560:	ldr	r4, [r7, #24]
   1c564:	ldr	ip, [r7]
   1c568:	cmp	r3, #0
   1c56c:	ldrne	r6, [r7, #12]
   1c570:	ldrne	r6, [r6, r2, lsl #2]
   1c574:	cmp	r3, #0
   1c578:	add	r6, r4, r6
   1c57c:	add	r6, ip, r6
   1c580:	ldrsb	r6, [r6]
   1c584:	beq	1be04 <__assert_fail@plt+0xa6a4>
   1c588:	cmn	r6, #1
   1c58c:	ble	1bdfc <__assert_fail@plt+0xa69c>
   1c590:	b	1be04 <__assert_fail@plt+0xa6a4>
   1c594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c598:	add	fp, sp, #28
   1c59c:	sub	sp, sp, #20
   1c5a0:	ldr	r4, [fp, #12]
   1c5a4:	ldr	r7, [fp, #8]
   1c5a8:	ldr	sl, [r1]
   1c5ac:	mov	r6, r2
   1c5b0:	str	r0, [sp, #12]
   1c5b4:	str	r1, [sp, #8]
   1c5b8:	str	r3, [sp, #16]
   1c5bc:	str	r4, [sp, #4]
   1c5c0:	str	r7, [sp]
   1c5c4:	bl	1c8e0 <__assert_fail@plt+0xb180>
   1c5c8:	mov	r3, r4
   1c5cc:	mov	r4, r0
   1c5d0:	cmp	r0, #0
   1c5d4:	bne	1c5f4 <__assert_fail@plt+0xae94>
   1c5d8:	ldr	r0, [r3]
   1c5dc:	cmp	r0, #0
   1c5e0:	beq	1c5f4 <__assert_fail@plt+0xae94>
   1c5e4:	b	1c8cc <__assert_fail@plt+0xb16c>
   1c5e8:	cmp	r4, #0
   1c5ec:	mov	r7, r8
   1c5f0:	moveq	r4, r5
   1c5f4:	ldrb	r0, [r6, #4]
   1c5f8:	orr	r1, r0, #8
   1c5fc:	cmp	r1, #10
   1c600:	beq	1c8d0 <__assert_fail@plt+0xb170>
   1c604:	cmp	r7, #0
   1c608:	beq	1c614 <__assert_fail@plt+0xaeb4>
   1c60c:	cmp	r0, #9
   1c610:	beq	1c8d0 <__assert_fail@plt+0xb170>
   1c614:	str	r3, [sp, #4]
   1c618:	mov	r9, r3
   1c61c:	ldr	r0, [sp, #12]
   1c620:	ldr	r1, [sp, #8]
   1c624:	ldr	r3, [sp, #16]
   1c628:	mov	r2, r6
   1c62c:	mov	r8, r7
   1c630:	str	r7, [sp]
   1c634:	bl	1c8e0 <__assert_fail@plt+0xb180>
   1c638:	mov	r3, r9
   1c63c:	mov	r5, r0
   1c640:	cmp	r0, #0
   1c644:	bne	1c654 <__assert_fail@plt+0xaef4>
   1c648:	ldr	r0, [r3]
   1c64c:	cmp	r0, #0
   1c650:	bne	1c6e4 <__assert_fail@plt+0xaf84>
   1c654:	cmp	r4, #0
   1c658:	cmpne	r5, #0
   1c65c:	beq	1c5e8 <__assert_fail@plt+0xae88>
   1c660:	ldr	r1, [sl, #64]	; 0x40
   1c664:	cmp	r1, #31
   1c668:	beq	1c6b8 <__assert_fail@plt+0xaf58>
   1c66c:	ldr	r0, [sl, #56]	; 0x38
   1c670:	add	r2, r1, #1
   1c674:	add	r0, r0, r1, lsl #5
   1c678:	mov	r1, #0
   1c67c:	mov	r7, r8
   1c680:	str	r2, [sl, #64]	; 0x40
   1c684:	str	r1, [r0, #4]!
   1c688:	stmib	r0, {r4, r5}
   1c68c:	str	r1, [r0, #12]
   1c690:	str	r1, [r0, #16]
   1c694:	str	r1, [r0, #20]
   1c698:	mov	r1, #16
   1c69c:	str	r1, [r0, #24]
   1c6a0:	mvn	r1, #0
   1c6a4:	str	r1, [r0, #28]
   1c6a8:	str	r0, [r4]
   1c6ac:	str	r0, [r5]
   1c6b0:	mov	r4, r0
   1c6b4:	b	1c5f4 <__assert_fail@plt+0xae94>
   1c6b8:	mov	r0, #996	; 0x3e4
   1c6bc:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1c6c0:	cmp	r0, #0
   1c6c4:	beq	1c788 <__assert_fail@plt+0xb028>
   1c6c8:	ldr	r1, [sl, #56]	; 0x38
   1c6cc:	mov	r3, r9
   1c6d0:	str	r1, [r0]
   1c6d4:	mov	r1, #0
   1c6d8:	str	r1, [sl, #64]	; 0x40
   1c6dc:	str	r0, [sl, #56]	; 0x38
   1c6e0:	b	1c670 <__assert_fail@plt+0xaf10>
   1c6e4:	cmp	r4, #0
   1c6e8:	beq	1c8cc <__assert_fail@plt+0xb16c>
   1c6ec:	movw	r5, #255	; 0xff
   1c6f0:	movt	r5, #4
   1c6f4:	mov	r6, r4
   1c6f8:	ldr	r4, [r4, #4]
   1c6fc:	cmp	r4, #0
   1c700:	bne	1c6f4 <__assert_fail@plt+0xaf94>
   1c704:	ldr	r4, [r6, #8]
   1c708:	cmp	r4, #0
   1c70c:	bne	1c6f4 <__assert_fail@plt+0xaf94>
   1c710:	ldr	r0, [r6, #24]
   1c714:	and	r0, r0, r5
   1c718:	cmp	r0, #3
   1c71c:	beq	1c754 <__assert_fail@plt+0xaff4>
   1c720:	cmp	r0, #6
   1c724:	bne	1c75c <__assert_fail@plt+0xaffc>
   1c728:	ldr	r4, [r6, #20]
   1c72c:	ldr	r0, [r4]
   1c730:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c734:	ldr	r0, [r4, #4]
   1c738:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c73c:	ldr	r0, [r4, #8]
   1c740:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c744:	ldr	r0, [r4, #12]
   1c748:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c74c:	mov	r0, r4
   1c750:	b	1c758 <__assert_fail@plt+0xaff8>
   1c754:	ldr	r0, [r6, #20]
   1c758:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c75c:	ldr	r0, [r6]
   1c760:	cmp	r0, #0
   1c764:	beq	1c8cc <__assert_fail@plt+0xb16c>
   1c768:	ldr	r4, [r0, #8]
   1c76c:	cmp	r4, r6
   1c770:	mov	r6, r0
   1c774:	beq	1c710 <__assert_fail@plt+0xafb0>
   1c778:	cmp	r4, #0
   1c77c:	mov	r6, r0
   1c780:	beq	1c710 <__assert_fail@plt+0xafb0>
   1c784:	b	1c6f4 <__assert_fail@plt+0xaf94>
   1c788:	movw	r6, #255	; 0xff
   1c78c:	mov	r1, r9
   1c790:	movt	r6, #4
   1c794:	mov	r7, r5
   1c798:	ldr	r5, [r5, #4]
   1c79c:	cmp	r5, #0
   1c7a0:	bne	1c794 <__assert_fail@plt+0xb034>
   1c7a4:	ldr	r5, [r7, #8]
   1c7a8:	cmp	r5, #0
   1c7ac:	bne	1c794 <__assert_fail@plt+0xb034>
   1c7b0:	ldr	r0, [r7, #24]
   1c7b4:	and	r0, r0, r6
   1c7b8:	cmp	r0, #3
   1c7bc:	beq	1c7f4 <__assert_fail@plt+0xb094>
   1c7c0:	cmp	r0, #6
   1c7c4:	bne	1c800 <__assert_fail@plt+0xb0a0>
   1c7c8:	ldr	r5, [r7, #20]
   1c7cc:	ldr	r0, [r5]
   1c7d0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c7d4:	ldr	r0, [r5, #4]
   1c7d8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c7dc:	ldr	r0, [r5, #8]
   1c7e0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c7e4:	ldr	r0, [r5, #12]
   1c7e8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c7ec:	mov	r0, r5
   1c7f0:	b	1c7f8 <__assert_fail@plt+0xb098>
   1c7f4:	ldr	r0, [r7, #20]
   1c7f8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c7fc:	mov	r1, r9
   1c800:	ldr	r0, [r7]
   1c804:	cmp	r0, #0
   1c808:	beq	1c82c <__assert_fail@plt+0xb0cc>
   1c80c:	ldr	r5, [r0, #8]
   1c810:	cmp	r5, r7
   1c814:	mov	r7, r0
   1c818:	beq	1c7b0 <__assert_fail@plt+0xb050>
   1c81c:	cmp	r5, #0
   1c820:	mov	r7, r0
   1c824:	beq	1c7b0 <__assert_fail@plt+0xb050>
   1c828:	b	1c794 <__assert_fail@plt+0xb034>
   1c82c:	mov	r5, r4
   1c830:	ldr	r4, [r4, #4]
   1c834:	cmp	r4, #0
   1c838:	bne	1c82c <__assert_fail@plt+0xb0cc>
   1c83c:	ldr	r4, [r5, #8]
   1c840:	cmp	r4, #0
   1c844:	bne	1c82c <__assert_fail@plt+0xb0cc>
   1c848:	ldr	r0, [r5, #24]
   1c84c:	and	r0, r0, r6
   1c850:	cmp	r0, #3
   1c854:	beq	1c88c <__assert_fail@plt+0xb12c>
   1c858:	cmp	r0, #6
   1c85c:	bne	1c898 <__assert_fail@plt+0xb138>
   1c860:	ldr	r4, [r5, #20]
   1c864:	ldr	r0, [r4]
   1c868:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c86c:	ldr	r0, [r4, #4]
   1c870:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c874:	ldr	r0, [r4, #8]
   1c878:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c87c:	ldr	r0, [r4, #12]
   1c880:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c884:	mov	r0, r4
   1c888:	b	1c890 <__assert_fail@plt+0xb130>
   1c88c:	ldr	r0, [r5, #20]
   1c890:	bl	141c4 <__assert_fail@plt+0x2a64>
   1c894:	mov	r1, r9
   1c898:	ldr	r0, [r5]
   1c89c:	cmp	r0, #0
   1c8a0:	beq	1c8c4 <__assert_fail@plt+0xb164>
   1c8a4:	ldr	r4, [r0, #8]
   1c8a8:	cmp	r4, r5
   1c8ac:	mov	r5, r0
   1c8b0:	beq	1c848 <__assert_fail@plt+0xb0e8>
   1c8b4:	cmp	r4, #0
   1c8b8:	mov	r5, r0
   1c8bc:	beq	1c848 <__assert_fail@plt+0xb0e8>
   1c8c0:	b	1c82c <__assert_fail@plt+0xb0cc>
   1c8c4:	mov	r0, #12
   1c8c8:	str	r0, [r1]
   1c8cc:	mov	r4, #0
   1c8d0:	mov	r0, r4
   1c8d4:	sub	sp, fp, #28
   1c8d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c8dc:	nop	{0}
   1c8e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8e4:	add	fp, sp, #28
   1c8e8:	sub	sp, sp, #148	; 0x94
   1c8ec:	str	r0, [sp, #24]
   1c8f0:	ldr	r0, [r2, #4]
   1c8f4:	mov	r7, r1
   1c8f8:	mov	lr, r2
   1c8fc:	mvn	r1, #0
   1c900:	mov	r6, r3
   1c904:	mov	sl, #0
   1c908:	ldr	r2, [fp, #12]
   1c90c:	ldr	r8, [r7]
   1c910:	uxtab	r1, r1, r0
   1c914:	cmp	r1, #35	; 0x23
   1c918:	str	r2, [sp, #16]
   1c91c:	str	lr, [sp, #44]	; 0x2c
   1c920:	bhi	1ca4c <__assert_fail@plt+0xb2ec>
   1c924:	add	r2, pc, #0
   1c928:	ldr	pc, [r2, r1, lsl #2]
   1c92c:	andeq	ip, r1, r8, lsl #26
   1c930:	ldrdeq	lr, [r1], -r8
   1c934:	andeq	ip, r1, ip, asr #20
   1c938:	ldrdeq	ip, [r1], -r0
   1c93c:	andeq	ip, r1, r0, asr fp
   1c940:	andeq	ip, r1, ip, asr #20
   1c944:	andeq	ip, r1, ip, asr #20
   1c948:			; <UNDEFINED> instruction: 0x0001cbb8
   1c94c:	andeq	ip, r1, ip, asr sl
   1c950:	ldrdeq	lr, [r1], -r8
   1c954:	andeq	ip, r1, ip, asr #20
   1c958:	andeq	ip, r1, r0, asr #24
   1c95c:	andeq	ip, r1, ip, asr #20
   1c960:	andeq	ip, r1, ip, asr #20
   1c964:	andeq	ip, r1, ip, asr #20
   1c968:	andeq	ip, r1, ip, asr #20
   1c96c:	andeq	ip, r1, ip, asr #20
   1c970:	andeq	ip, r1, ip, asr #20
   1c974:	andeq	ip, r1, ip, asr #20
   1c978:	ldrdeq	ip, [r1], -r8
   1c97c:	andeq	ip, r1, ip, asr #20
   1c980:	andeq	ip, r1, ip, asr #20
   1c984:	andeq	ip, r1, r4, asr #20
   1c988:	andeq	ip, r1, ip, ror #20
   1c98c:	andeq	ip, r1, ip, asr #20
   1c990:	andeq	ip, r1, ip, asr #20
   1c994:	andeq	ip, r1, ip, asr #20
   1c998:	andeq	ip, r1, ip, asr #20
   1c99c:	andeq	ip, r1, ip, asr #20
   1c9a0:	andeq	ip, r1, ip, asr #20
   1c9a4:	andeq	ip, r1, ip, asr #20
   1c9a8:			; <UNDEFINED> instruction: 0x0001c9bc
   1c9ac:			; <UNDEFINED> instruction: 0x0001c9bc
   1c9b0:	andeq	ip, r1, r0, ror #19
   1c9b4:	andeq	ip, r1, r0, ror #19
   1c9b8:	ldrdeq	ip, [r1], -r0
   1c9bc:	ldr	r1, [sp, #24]
   1c9c0:	mvn	r2, #32
   1c9c4:	movw	r3, #47929	; 0xbb39
   1c9c8:	uxtab	r0, r2, r0
   1c9cc:	movw	r2, #49150	; 0xbffe
   1c9d0:	movt	r3, #2
   1c9d4:	clz	r0, r0
   1c9d8:	movt	r2, #2
   1c9dc:	b	1ca00 <__assert_fail@plt+0xb2a0>
   1c9e0:	ldr	r1, [sp, #24]
   1c9e4:	mvn	r2, #34	; 0x22
   1c9e8:	movw	r3, #46723	; 0xb683
   1c9ec:	uxtab	r0, r2, r0
   1c9f0:	movw	r2, #49156	; 0xc004
   1c9f4:	movt	r3, #2
   1c9f8:	clz	r0, r0
   1c9fc:	movt	r2, #2
   1ca00:	lsr	r0, r0, #5
   1ca04:	ldr	r1, [r1, #64]	; 0x40
   1ca08:	str	r0, [sp]
   1ca0c:	ldr	r4, [sp, #16]
   1ca10:	str	r4, [sp, #4]
   1ca14:	mov	r0, r8
   1ca18:	bl	1ed1c <__assert_fail@plt+0xd5bc>
   1ca1c:	mov	r7, r0
   1ca20:	cmp	r0, #0
   1ca24:	bne	1ca3c <__assert_fail@plt+0xb2dc>
   1ca28:	ldr	r0, [r4]
   1ca2c:	cmp	r0, #0
   1ca30:	ldr	lr, [sp, #44]	; 0x2c
   1ca34:	beq	1d974 <__assert_fail@plt+0xc214>
   1ca38:	b	1e6d8 <__assert_fail@plt+0xcf78>
   1ca3c:	ldr	lr, [sp, #44]	; 0x2c
   1ca40:	b	1d974 <__assert_fail@plt+0xc214>
   1ca44:	tst	r6, #16777216	; 0x1000000
   1ca48:	bne	1cac8 <__assert_fail@plt+0xb368>
   1ca4c:	tst	r6, #32
   1ca50:	bne	1cac8 <__assert_fail@plt+0xb368>
   1ca54:	tst	r6, #16
   1ca58:	bne	1cf54 <__assert_fail@plt+0xb7f4>
   1ca5c:	tst	r6, #131072	; 0x20000
   1ca60:	uxtbeq	r1, r0
   1ca64:	cmpeq	r1, #9
   1ca68:	beq	1cf9c <__assert_fail@plt+0xb83c>
   1ca6c:	mov	r1, #1
   1ca70:	bfi	r0, r1, #0, #8
   1ca74:	str	r0, [lr, #4]
   1ca78:	ldr	r1, [r8, #64]	; 0x40
   1ca7c:	cmp	r1, #31
   1ca80:	beq	1e830 <__assert_fail@plt+0xd0d0>
   1ca84:	ldr	r0, [r8, #56]	; 0x38
   1ca88:	add	r2, r1, #1
   1ca8c:	add	r7, r0, r1, lsl #5
   1ca90:	mov	r0, #0
   1ca94:	str	r2, [r8, #64]	; 0x40
   1ca98:	str	r0, [r7, #4]!
   1ca9c:	str	r0, [r7, #4]
   1caa0:	str	r0, [r7, #8]
   1caa4:	ldm	lr, {r1, r2}
   1caa8:	str	r0, [r7, #12]
   1caac:	str	r0, [r7, #16]
   1cab0:	mvn	r0, #0
   1cab4:	str	r0, [r7, #28]
   1cab8:	bic	r0, r2, #786432	; 0xc0000
   1cabc:	str	r1, [r7, #20]
   1cac0:	str	r0, [r7, #24]
   1cac4:	b	1d974 <__assert_fail@plt+0xc214>
   1cac8:	mov	r0, #13
   1cacc:	b	1d878 <__assert_fail@plt+0xc118>
   1cad0:	ldr	r0, [lr]
   1cad4:	ldr	r2, [r8, #84]	; 0x54
   1cad8:	mov	r1, #1
   1cadc:	tst	r2, r1, lsl r0
   1cae0:	beq	1e874 <__assert_fail@plt+0xd114>
   1cae4:	lsl	r0, r1, r0
   1cae8:	ldr	r1, [r8, #64]	; 0x40
   1caec:	ldr	r2, [r8, #80]	; 0x50
   1caf0:	orr	r0, r2, r0
   1caf4:	cmp	r1, #31
   1caf8:	str	r0, [r8, #80]	; 0x50
   1cafc:	beq	1e8ec <__assert_fail@plt+0xd18c>
   1cb00:	ldr	r0, [r8, #56]	; 0x38
   1cb04:	add	r2, r1, #1
   1cb08:	add	r7, r0, r1, lsl #5
   1cb0c:	mov	r0, #0
   1cb10:	str	r2, [r8, #64]	; 0x40
   1cb14:	str	r0, [r7, #4]!
   1cb18:	str	r0, [r7, #4]
   1cb1c:	str	r0, [r7, #8]
   1cb20:	ldm	lr, {r1, r2}
   1cb24:	str	r0, [r7, #12]
   1cb28:	str	r0, [r7, #16]
   1cb2c:	mvn	r0, #0
   1cb30:	str	r0, [r7, #28]
   1cb34:	bic	r0, r2, #786432	; 0xc0000
   1cb38:	str	r1, [r7, #20]
   1cb3c:	str	r0, [r7, #24]
   1cb40:	ldr	r0, [r8, #76]	; 0x4c
   1cb44:	add	r0, r0, #1
   1cb48:	str	r0, [r8, #76]	; 0x4c
   1cb4c:	b	1cba8 <__assert_fail@plt+0xb448>
   1cb50:	ldr	r1, [r8, #64]	; 0x40
   1cb54:	cmp	r1, #31
   1cb58:	beq	1e87c <__assert_fail@plt+0xd11c>
   1cb5c:	ldr	r0, [r8, #56]	; 0x38
   1cb60:	add	r2, r1, #1
   1cb64:	add	r7, r0, r1, lsl #5
   1cb68:	mov	r0, #0
   1cb6c:	str	r2, [r8, #64]	; 0x40
   1cb70:	str	r0, [r7, #4]!
   1cb74:	str	r0, [r7, #4]
   1cb78:	str	r0, [r7, #8]
   1cb7c:	ldm	lr, {r1, r2}
   1cb80:	str	r0, [r7, #12]
   1cb84:	str	r0, [r7, #16]
   1cb88:	mvn	r0, #0
   1cb8c:	str	r0, [r7, #28]
   1cb90:	bic	r0, r2, #786432	; 0xc0000
   1cb94:	str	r1, [r7, #20]
   1cb98:	str	r0, [r7, #24]
   1cb9c:	ldr	r0, [r8, #92]	; 0x5c
   1cba0:	cmp	r0, #2
   1cba4:	blt	1d974 <__assert_fail@plt+0xc214>
   1cba8:	ldrb	r0, [r8, #88]	; 0x58
   1cbac:	orr	r0, r0, #2
   1cbb0:	strb	r0, [r8, #88]	; 0x58
   1cbb4:	b	1d974 <__assert_fail@plt+0xc214>
   1cbb8:	ldr	r4, [r7, #24]
   1cbbc:	mov	sl, r6
   1cbc0:	orr	r2, r6, #8388608	; 0x800000
   1cbc4:	ldr	r6, [sp, #24]
   1cbc8:	ldr	r5, [fp, #8]
   1cbcc:	add	r0, r4, #1
   1cbd0:	mov	r1, r6
   1cbd4:	str	r0, [r7, #24]
   1cbd8:	mov	r0, lr
   1cbdc:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1cbe0:	ldr	r1, [r6, #40]	; 0x28
   1cbe4:	ldr	lr, [sp, #44]	; 0x2c
   1cbe8:	mov	r9, #0
   1cbec:	add	r0, r1, r0
   1cbf0:	str	r0, [r6, #40]	; 0x28
   1cbf4:	ldrb	r0, [lr, #4]
   1cbf8:	cmp	r0, #9
   1cbfc:	beq	1d908 <__assert_fail@plt+0xc1a8>
   1cc00:	add	r0, r5, #1
   1cc04:	mov	r1, r7
   1cc08:	mov	r2, lr
   1cc0c:	mov	r3, sl
   1cc10:	mov	r6, lr
   1cc14:	str	r0, [sp]
   1cc18:	ldr	r5, [sp, #16]
   1cc1c:	str	r5, [sp, #4]
   1cc20:	ldr	r0, [sp, #24]
   1cc24:	bl	1baec <__assert_fail@plt+0xa38c>
   1cc28:	mov	r9, r0
   1cc2c:	ldr	r0, [r5]
   1cc30:	cmp	r0, #0
   1cc34:	beq	1d8f8 <__assert_fail@plt+0xc198>
   1cc38:	mov	sl, #0
   1cc3c:	b	1e6d8 <__assert_fail@plt+0xcf78>
   1cc40:	ldr	r0, [lr]
   1cc44:	ldr	r7, [sp, #24]
   1cc48:	movw	r1, #783	; 0x30f
   1cc4c:	tst	r0, r1
   1cc50:	beq	1cc98 <__assert_fail@plt+0xb538>
   1cc54:	ldrb	r0, [r8, #88]	; 0x58
   1cc58:	tst	r0, #16
   1cc5c:	bne	1cc94 <__assert_fail@plt+0xb534>
   1cc60:	orr	r1, r0, #16
   1cc64:	tst	r0, #8
   1cc68:	strb	r1, [r8, #88]	; 0x58
   1cc6c:	bne	1eb48 <__assert_fail@plt+0xd3e8>
   1cc70:	add	r1, pc, #824	; 0x338
   1cc74:	tst	r0, #4
   1cc78:	vld1.64	{d16-d17}, [r1 :128]
   1cc7c:	add	r1, r8, #96	; 0x60
   1cc80:	vst1.32	{d16-d17}, [r1]
   1cc84:	beq	1eb54 <__assert_fail@plt+0xd3f4>
   1cc88:	vmov.i32	q8, #0	; 0x00000000
   1cc8c:	add	r0, r8, #112	; 0x70
   1cc90:	vst1.32	{d16-d17}, [r0]
   1cc94:	ldr	r0, [lr]
   1cc98:	cmp	r0, #512	; 0x200
   1cc9c:	beq	1d76c <__assert_fail@plt+0xc00c>
   1cca0:	cmp	r0, #256	; 0x100
   1cca4:	bne	1d884 <__assert_fail@plt+0xc124>
   1cca8:	mov	r0, #6
   1ccac:	mov	r4, r8
   1ccb0:	str	r0, [lr]
   1ccb4:	ldr	r1, [r4, #64]!	; 0x40
   1ccb8:	cmp	r1, #31
   1ccbc:	beq	1ea9c <__assert_fail@plt+0xd33c>
   1ccc0:	ldr	r0, [r8, #56]	; 0x38
   1ccc4:	add	r2, r1, #1
   1ccc8:	add	r5, r0, r1, lsl #5
   1cccc:	mov	r0, #0
   1ccd0:	str	r2, [r4]
   1ccd4:	str	r0, [r5, #4]!
   1ccd8:	str	r0, [r5, #4]
   1ccdc:	str	r0, [r5, #8]
   1cce0:	ldm	lr, {r1, r2}
   1cce4:	str	r0, [r5, #12]
   1cce8:	str	r0, [r5, #16]
   1ccec:	mvn	r0, #0
   1ccf0:	str	r0, [r5, #28]
   1ccf4:	bic	r0, r2, #786432	; 0xc0000
   1ccf8:	str	r1, [r5, #20]
   1ccfc:	str	r0, [r5, #24]
   1cd00:	mov	r0, #9
   1cd04:	b	1d7c8 <__assert_fail@plt+0xc068>
   1cd08:	ldr	r1, [r8, #64]	; 0x40
   1cd0c:	cmp	r1, #31
   1cd10:	beq	1e8a8 <__assert_fail@plt+0xd148>
   1cd14:	ldr	r0, [r8, #56]	; 0x38
   1cd18:	ldr	r3, [sp, #24]
   1cd1c:	add	r2, r1, #1
   1cd20:	add	r4, r0, r1, lsl #5
   1cd24:	mov	r0, #0
   1cd28:	str	r2, [r8, #64]	; 0x40
   1cd2c:	str	r0, [r4, #4]!
   1cd30:	str	r0, [r4, #4]
   1cd34:	str	r0, [r4, #8]
   1cd38:	ldm	lr, {r1, r2}
   1cd3c:	str	r0, [r4, #12]
   1cd40:	str	r0, [r4, #16]
   1cd44:	mvn	r0, #0
   1cd48:	str	r0, [r4, #28]
   1cd4c:	bic	r0, r2, #786432	; 0xc0000
   1cd50:	str	r1, [r4, #20]
   1cd54:	str	r0, [r4, #24]
   1cd58:	ldr	r0, [r8, #92]	; 0x5c
   1cd5c:	cmp	r0, #2
   1cd60:	blt	1cf94 <__assert_fail@plt+0xb834>
   1cd64:	ldr	r0, [r3, #40]	; 0x28
   1cd68:	ldr	r1, [r3, #56]	; 0x38
   1cd6c:	cmp	r1, r0
   1cd70:	ble	1cf94 <__assert_fail@plt+0xb834>
   1cd74:	mov	r5, #0
   1cd78:	mvn	sl, #0
   1cd7c:	mov	r9, r6
   1cd80:	ldr	r6, [sp, #24]
   1cd84:	ldr	r1, [r6, #28]
   1cd88:	cmp	r0, r1
   1cd8c:	beq	1e6e4 <__assert_fail@plt+0xcf84>
   1cd90:	ldr	r1, [r6, #8]
   1cd94:	ldr	r0, [r1, r0, lsl #2]
   1cd98:	cmn	r0, #1
   1cd9c:	bne	1e6e4 <__assert_fail@plt+0xcf84>
   1cda0:	mov	r0, lr
   1cda4:	mov	r1, r6
   1cda8:	mov	r2, r9
   1cdac:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1cdb0:	ldr	r1, [r6, #40]	; 0x28
   1cdb4:	add	r0, r1, r0
   1cdb8:	str	r0, [r6, #40]	; 0x28
   1cdbc:	ldr	r1, [r8, #64]	; 0x40
   1cdc0:	cmp	r1, #31
   1cdc4:	beq	1ce70 <__assert_fail@plt+0xb710>
   1cdc8:	ldr	r0, [r8, #56]	; 0x38
   1cdcc:	ldr	lr, [sp, #44]	; 0x2c
   1cdd0:	add	r2, r1, #1
   1cdd4:	add	r6, r0, r1, lsl #5
   1cdd8:	str	r2, [r8, #64]	; 0x40
   1cddc:	str	r5, [r6, #4]!
   1cde0:	str	r5, [r6, #4]
   1cde4:	str	r5, [r6, #8]
   1cde8:	ldm	lr, {r0, r1}
   1cdec:	str	r5, [r6, #12]
   1cdf0:	str	r5, [r6, #16]
   1cdf4:	str	sl, [r6, #28]
   1cdf8:	str	r0, [r6, #20]
   1cdfc:	bic	r0, r1, #786432	; 0xc0000
   1ce00:	str	r0, [r6, #24]
   1ce04:	ldr	r1, [r8, #64]	; 0x40
   1ce08:	cmp	r1, #31
   1ce0c:	beq	1ce98 <__assert_fail@plt+0xb738>
   1ce10:	ldr	r0, [r8, #56]	; 0x38
   1ce14:	add	r2, r1, #1
   1ce18:	add	r7, r0, r1, lsl #5
   1ce1c:	mov	r0, #16
   1ce20:	cmp	r6, #0
   1ce24:	str	r2, [r8, #64]	; 0x40
   1ce28:	str	r5, [r7, #4]!
   1ce2c:	stmib	r7, {r4, r6}
   1ce30:	str	r5, [r7, #12]
   1ce34:	str	r5, [r7, #16]
   1ce38:	str	r5, [r7, #20]
   1ce3c:	str	r0, [r7, #24]
   1ce40:	str	sl, [r7, #28]
   1ce44:	str	r7, [r4]
   1ce48:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1ce4c:	ldr	r1, [sp, #24]
   1ce50:	str	r7, [r6]
   1ce54:	mov	r4, r7
   1ce58:	mov	r6, r9
   1ce5c:	ldr	r0, [r1, #40]	; 0x28
   1ce60:	ldr	r1, [r1, #56]	; 0x38
   1ce64:	cmp	r1, r0
   1ce68:	bgt	1cd7c <__assert_fail@plt+0xb61c>
   1ce6c:	b	1d974 <__assert_fail@plt+0xc214>
   1ce70:	mov	r0, #996	; 0x3e4
   1ce74:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ce78:	cmp	r0, #0
   1ce7c:	beq	1cec4 <__assert_fail@plt+0xb764>
   1ce80:	ldr	r1, [r8, #56]	; 0x38
   1ce84:	str	r1, [r0]
   1ce88:	mov	r1, #0
   1ce8c:	str	r1, [r8, #64]	; 0x40
   1ce90:	str	r0, [r8, #56]	; 0x38
   1ce94:	b	1cdcc <__assert_fail@plt+0xb66c>
   1ce98:	mov	r0, #996	; 0x3e4
   1ce9c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1cea0:	ldr	lr, [sp, #44]	; 0x2c
   1cea4:	cmp	r0, #0
   1cea8:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1ceac:	ldr	r1, [r8, #56]	; 0x38
   1ceb0:	str	r1, [r0]
   1ceb4:	mov	r1, #0
   1ceb8:	str	r1, [r8, #64]	; 0x40
   1cebc:	str	r0, [r8, #56]	; 0x38
   1cec0:	b	1ce14 <__assert_fail@plt+0xb6b4>
   1cec4:	ldr	lr, [sp, #44]	; 0x2c
   1cec8:	mov	r6, #0
   1cecc:	b	1ce04 <__assert_fail@plt+0xb6a4>
   1ced0:	mov	r0, #5
   1ced4:	b	1d878 <__assert_fail@plt+0xc118>
   1ced8:	mov	sl, #0
   1cedc:	mov	r0, #32
   1cee0:	mov	r1, #1
   1cee4:	str	sl, [fp, #-32]	; 0xffffffe0
   1cee8:	bl	2a858 <__assert_fail@plt+0x190f8>
   1ceec:	mov	r4, r0
   1cef0:	mov	r0, #40	; 0x28
   1cef4:	mov	r1, #1
   1cef8:	bl	2a858 <__assert_fail@plt+0x190f8>
   1cefc:	mov	r5, r0
   1cf00:	cmp	r4, #0
   1cf04:	cmpne	r5, #0
   1cf08:	beq	1e8d8 <__assert_fail@plt+0xd178>
   1cf0c:	str	r5, [sp, #48]	; 0x30
   1cf10:	mov	r2, r6
   1cf14:	ldr	r5, [sp, #44]	; 0x2c
   1cf18:	ldr	r7, [sp, #24]
   1cf1c:	mov	r0, r5
   1cf20:	mov	r1, r7
   1cf24:	bl	1f0d8 <__assert_fail@plt+0xd978>
   1cf28:	mov	r3, r0
   1cf2c:	ldr	r0, [r5, #4]
   1cf30:	mov	r2, r5
   1cf34:	uxtb	r1, r0
   1cf38:	cmp	r1, #25
   1cf3c:	beq	1cfc0 <__assert_fail@plt+0xb860>
   1cf40:	ldr	sl, [sp, #48]	; 0x30
   1cf44:	cmp	r1, #2
   1cf48:	beq	1e86c <__assert_fail@plt+0xd10c>
   1cf4c:	mov	r1, #0
   1cf50:	b	1d018 <__assert_fail@plt+0xb8b8>
   1cf54:	ldr	r4, [sp, #24]
   1cf58:	mov	r0, lr
   1cf5c:	mov	r2, r6
   1cf60:	mov	r5, lr
   1cf64:	mov	r1, r4
   1cf68:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1cf6c:	ldr	r1, [r4, #40]	; 0x28
   1cf70:	mov	r2, r5
   1cf74:	mov	r3, r6
   1cf78:	add	r0, r1, r0
   1cf7c:	mov	r1, r7
   1cf80:	str	r0, [r4, #40]	; 0x28
   1cf84:	mov	r0, r4
   1cf88:	sub	sp, fp, #28
   1cf8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf90:	b	1c8e0 <__assert_fail@plt+0xb180>
   1cf94:	mov	r7, r4
   1cf98:	b	1d974 <__assert_fail@plt+0xc214>
   1cf9c:	mov	r0, #16
   1cfa0:	b	1d878 <__assert_fail@plt+0xc118>
   1cfa4:	nop	{0}
   1cfa8:	nop	{0}
   1cfac:	nop	{0}
   1cfb0:	andeq	r0, r0, r0
   1cfb4:	mvnseq	r0, #0
   1cfb8:			; <UNDEFINED> instruction: 0x87fffffe
   1cfbc:			; <UNDEFINED> instruction: 0x07fffffe
   1cfc0:	ldr	sl, [sp, #48]	; 0x30
   1cfc4:	tst	r6, #256	; 0x100
   1cfc8:	mov	r1, r7
   1cfcc:	ldrb	r0, [sl, #16]
   1cfd0:	orr	r0, r0, #1
   1cfd4:	strb	r0, [sl, #16]
   1cfd8:	ldrne	r0, [r4]
   1cfdc:	orrne	r0, r0, #1024	; 0x400
   1cfe0:	strne	r0, [r4]
   1cfe4:	ldr	r0, [r7, #40]	; 0x28
   1cfe8:	add	r0, r0, r3
   1cfec:	str	r0, [r7, #40]	; 0x28
   1cff0:	mov	r0, r2
   1cff4:	mov	r2, r6
   1cff8:	bl	1f0d8 <__assert_fail@plt+0xd978>
   1cffc:	ldr	r2, [sp, #44]	; 0x2c
   1d000:	mov	r3, r0
   1d004:	ldr	r0, [r2, #4]
   1d008:	uxtb	r1, r0
   1d00c:	cmp	r1, #2
   1d010:	beq	1e86c <__assert_fail@plt+0xd10c>
   1d014:	mov	r1, #1
   1d018:	str	r1, [sp, #36]	; 0x24
   1d01c:	uxtb	r1, r0
   1d020:	str	r4, [sp, #52]	; 0x34
   1d024:	str	r6, [sp, #40]	; 0x28
   1d028:	cmp	r1, #21
   1d02c:	ldr	r5, [sp, #40]	; 0x28
   1d030:	moveq	r1, #1
   1d034:	bfieq	r0, r1, #0, #8
   1d038:	mov	r1, r7
   1d03c:	streq	r0, [r2, #4]
   1d040:	mov	r0, #3
   1d044:	str	r0, [fp, #-40]	; 0xffffffd8
   1d048:	sub	r0, fp, #80	; 0x50
   1d04c:	str	r0, [fp, #-36]	; 0xffffffdc
   1d050:	mov	r0, #1
   1d054:	str	r5, [sp]
   1d058:	str	r0, [sp, #4]
   1d05c:	sub	r0, fp, #40	; 0x28
   1d060:	bl	1f250 <__assert_fail@plt+0xdaf0>
   1d064:	cmp	r0, #0
   1d068:	bne	1e85c <__assert_fail@plt+0xd0fc>
   1d06c:	and	r0, r5, #65536	; 0x10000
   1d070:	str	r0, [sp, #32]
   1d074:	mov	r0, #0
   1d078:	str	r0, [sp, #28]
   1d07c:	mov	r0, #0
   1d080:	str	r0, [sp, #20]
   1d084:	ldr	r6, [sp, #24]
   1d088:	ldr	r7, [sp, #44]	; 0x2c
   1d08c:	mov	r0, r7
   1d090:	mov	r1, r6
   1d094:	mov	r2, r5
   1d098:	bl	1f0d8 <__assert_fail@plt+0xd978>
   1d09c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   1d0a0:	ldr	r4, [sp, #52]	; 0x34
   1d0a4:	mov	r9, r0
   1d0a8:	cmp	r5, #2
   1d0ac:	beq	1d278 <__assert_fail@plt+0xbb18>
   1d0b0:	cmp	r5, #4
   1d0b4:	bne	1d0f4 <__assert_fail@plt+0xb994>
   1d0b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1d0bc:	ldr	r0, [r6, #64]	; 0x40
   1d0c0:	mov	r2, sl
   1d0c4:	sub	r3, fp, #32
   1d0c8:	str	r1, [sp]
   1d0cc:	ldr	r1, [sp, #40]	; 0x28
   1d0d0:	str	r1, [sp, #4]
   1d0d4:	mov	r1, r4
   1d0d8:	bl	1f514 <__assert_fail@plt+0xddb4>
   1d0dc:	ldr	r1, [sp, #16]
   1d0e0:	ldr	lr, [sp, #44]	; 0x2c
   1d0e4:	cmp	r0, #0
   1d0e8:	str	r0, [r1]
   1d0ec:	beq	1d2b8 <__assert_fail@plt+0xbb58>
   1d0f0:	b	1e92c <__assert_fail@plt+0xd1cc>
   1d0f4:	ldr	lr, [sp, #44]	; 0x2c
   1d0f8:	mov	r7, r9
   1d0fc:	mov	r9, #7
   1d100:	ldrb	r0, [lr, #4]
   1d104:	cmp	r0, #22
   1d108:	beq	1d118 <__assert_fail@plt+0xb9b8>
   1d10c:	cmp	r0, #2
   1d110:	bne	1d230 <__assert_fail@plt+0xbad0>
   1d114:	b	1e91c <__assert_fail@plt+0xd1bc>
   1d118:	ldr	r4, [sp, #24]
   1d11c:	ldr	r2, [sp, #40]	; 0x28
   1d120:	mov	r6, r7
   1d124:	ldr	r0, [r4, #40]	; 0x28
   1d128:	mov	r1, r4
   1d12c:	add	r0, r0, r7
   1d130:	str	r0, [r4, #40]	; 0x28
   1d134:	add	r0, sp, #56	; 0x38
   1d138:	bl	1f0d8 <__assert_fail@plt+0xd978>
   1d13c:	mov	r3, r0
   1d140:	ldrb	r0, [sp, #60]	; 0x3c
   1d144:	cmp	r0, #21
   1d148:	beq	1d218 <__assert_fail@plt+0xbab8>
   1d14c:	cmp	r0, #2
   1d150:	beq	1e91c <__assert_fail@plt+0xd1bc>
   1d154:	ldr	r7, [sp, #40]	; 0x28
   1d158:	mov	r0, #3
   1d15c:	add	r2, sp, #56	; 0x38
   1d160:	str	r0, [fp, #-48]	; 0xffffffd0
   1d164:	add	r0, sp, #64	; 0x40
   1d168:	str	r0, [fp, #-44]	; 0xffffffd4
   1d16c:	mov	r0, #1
   1d170:	str	r0, [sp, #4]
   1d174:	sub	r0, fp, #48	; 0x30
   1d178:	str	r7, [sp]
   1d17c:	ldr	r4, [sp, #24]
   1d180:	mov	r1, r4
   1d184:	bl	1f250 <__assert_fail@plt+0xdaf0>
   1d188:	cmp	r0, #0
   1d18c:	bne	1e85c <__assert_fail@plt+0xd0fc>
   1d190:	ldr	r0, [sp, #44]	; 0x2c
   1d194:	mov	r1, r4
   1d198:	mov	r2, r7
   1d19c:	bl	1f0d8 <__assert_fail@plt+0xd978>
   1d1a0:	ldr	r4, [fp, #-48]	; 0xffffffd0
   1d1a4:	mov	r9, #11
   1d1a8:	str	r0, [sp, #12]
   1d1ac:	cmp	r4, #2
   1d1b0:	cmpne	r4, #4
   1d1b4:	beq	1e91c <__assert_fail@plt+0xd1bc>
   1d1b8:	cmp	r5, #3
   1d1bc:	bne	1d1d0 <__assert_fail@plt+0xba70>
   1d1c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d1c4:	bl	11628 <strlen@plt>
   1d1c8:	cmp	r0, #1
   1d1cc:	bhi	1e918 <__assert_fail@plt+0xd1b8>
   1d1d0:	cmp	r4, #3
   1d1d4:	bne	1d1e8 <__assert_fail@plt+0xba88>
   1d1d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d1dc:	bl	11628 <strlen@plt>
   1d1e0:	cmp	r0, #1
   1d1e4:	bhi	1e918 <__assert_fail@plt+0xd1b8>
   1d1e8:	ldr	lr, [sp, #44]	; 0x2c
   1d1ec:	cmp	r5, #3
   1d1f0:	beq	1d36c <__assert_fail@plt+0xbc0c>
   1d1f4:	mov	r7, #0
   1d1f8:	cmp	r5, #0
   1d1fc:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   1d200:	cmp	r4, #3
   1d204:	beq	1d37c <__assert_fail@plt+0xbc1c>
   1d208:	mov	sl, #0
   1d20c:	cmp	r4, #0
   1d210:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   1d214:	b	1d384 <__assert_fail@plt+0xbc24>
   1d218:	ldr	r0, [r4, #40]	; 0x28
   1d21c:	ldr	lr, [sp, #44]	; 0x2c
   1d220:	sub	r0, r0, r6
   1d224:	str	r0, [r4, #40]	; 0x28
   1d228:	mov	r0, #1
   1d22c:	strb	r0, [lr, #4]
   1d230:	cmp	r5, #1
   1d234:	beq	1d310 <__assert_fail@plt+0xbbb0>
   1d238:	ldr	r6, [sp, #24]
   1d23c:	ldr	r4, [sp, #52]	; 0x34
   1d240:	ldr	sl, [sp, #48]	; 0x30
   1d244:	cmp	r5, #2
   1d248:	mov	r9, r7
   1d24c:	beq	1d278 <__assert_fail@plt+0xbb18>
   1d250:	cmp	r5, #3
   1d254:	bne	1d348 <__assert_fail@plt+0xbbe8>
   1d258:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1d25c:	mov	r0, r7
   1d260:	bl	11628 <strlen@plt>
   1d264:	cmp	r0, #1
   1d268:	mov	r3, #1
   1d26c:	bne	1e918 <__assert_fail@plt+0xd1b8>
   1d270:	ldrb	r0, [r7]
   1d274:	b	1d294 <__assert_fail@plt+0xbb34>
   1d278:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1d27c:	mov	r0, r7
   1d280:	bl	11628 <strlen@plt>
   1d284:	cmp	r0, #1
   1d288:	bne	1e918 <__assert_fail@plt+0xd1b8>
   1d28c:	ldrb	r0, [r7]
   1d290:	mov	r3, #1
   1d294:	ubfx	r1, r0, #5, #3
   1d298:	and	r0, r0, #31
   1d29c:	ldr	r2, [r4, r1, lsl #2]
   1d2a0:	orr	r0, r2, r3, lsl r0
   1d2a4:	str	r0, [r4, r1, lsl #2]
   1d2a8:	mov	r1, #0
   1d2ac:	ldr	r0, [sp, #16]
   1d2b0:	ldr	lr, [sp, #44]	; 0x2c
   1d2b4:	str	r1, [r0]
   1d2b8:	ldrb	r0, [lr, #4]
   1d2bc:	cmp	r0, #21
   1d2c0:	beq	1d530 <__assert_fail@plt+0xbdd0>
   1d2c4:	cmp	r0, #2
   1d2c8:	beq	1e864 <__assert_fail@plt+0xd104>
   1d2cc:	mov	r0, #3
   1d2d0:	ldr	r5, [sp, #40]	; 0x28
   1d2d4:	mov	r1, r6
   1d2d8:	mov	r2, lr
   1d2dc:	mov	r3, r9
   1d2e0:	mov	r7, lr
   1d2e4:	str	r0, [fp, #-40]	; 0xffffffd8
   1d2e8:	sub	r0, fp, #80	; 0x50
   1d2ec:	str	r0, [fp, #-36]	; 0xffffffdc
   1d2f0:	mov	r0, #0
   1d2f4:	str	r0, [sp, #4]
   1d2f8:	sub	r0, fp, #40	; 0x28
   1d2fc:	str	r5, [sp]
   1d300:	bl	1f250 <__assert_fail@plt+0xdaf0>
   1d304:	cmp	r0, #0
   1d308:	beq	1d08c <__assert_fail@plt+0xb92c>
   1d30c:	b	1e85c <__assert_fail@plt+0xd0fc>
   1d310:	ldr	sl, [sp, #48]	; 0x30
   1d314:	ldr	r0, [sp, #28]
   1d318:	ldr	r4, [sp, #52]	; 0x34
   1d31c:	ldr	r1, [sl, #20]
   1d320:	cmp	r0, r1
   1d324:	beq	1d49c <__assert_fail@plt+0xbd3c>
   1d328:	ldr	r0, [sl]
   1d32c:	ldr	r6, [sp, #24]
   1d330:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d334:	add	r2, r1, #1
   1d338:	mov	r9, r7
   1d33c:	str	r2, [sl, #20]
   1d340:	str	r3, [r0, r1, lsl #2]
   1d344:	b	1d2b8 <__assert_fail@plt+0xbb58>
   1d348:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1d34c:	mov	r3, #1
   1d350:	ubfx	r1, r0, #5, #3
   1d354:	ldr	lr, [sp, #44]	; 0x2c
   1d358:	and	r0, r0, #31
   1d35c:	ldr	r2, [r4, r1, lsl #2]
   1d360:	orr	r0, r2, r3, lsl r0
   1d364:	str	r0, [r4, r1, lsl #2]
   1d368:	b	1d2b8 <__assert_fail@plt+0xbb58>
   1d36c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d370:	ldrb	r7, [r0]
   1d374:	cmp	r4, #3
   1d378:	bne	1d208 <__assert_fail@plt+0xbaa8>
   1d37c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1d380:	ldrb	sl, [r0]
   1d384:	cmp	r5, #3
   1d388:	cmpne	r5, #0
   1d38c:	bne	1d3b0 <__assert_fail@plt+0xbc50>
   1d390:	ldr	r0, [r8, #92]	; 0x5c
   1d394:	cmp	r0, #2
   1d398:	blt	1d3b4 <__assert_fail@plt+0xbc54>
   1d39c:	mov	r0, r7
   1d3a0:	bl	1167c <btowc@plt>
   1d3a4:	ldr	lr, [sp, #44]	; 0x2c
   1d3a8:	mov	r7, r0
   1d3ac:	b	1d3b4 <__assert_fail@plt+0xbc54>
   1d3b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1d3b4:	cmp	r4, #3
   1d3b8:	cmpne	r4, #0
   1d3bc:	bne	1d3e0 <__assert_fail@plt+0xbc80>
   1d3c0:	ldr	r0, [r8, #92]	; 0x5c
   1d3c4:	cmp	r0, #2
   1d3c8:	blt	1d3e4 <__assert_fail@plt+0xbc84>
   1d3cc:	mov	r0, sl
   1d3d0:	bl	1167c <btowc@plt>
   1d3d4:	ldr	lr, [sp, #44]	; 0x2c
   1d3d8:	mov	sl, r0
   1d3dc:	b	1d3e4 <__assert_fail@plt+0xbc84>
   1d3e0:	ldr	sl, [fp, #-44]	; 0xffffffd4
   1d3e4:	cmn	r7, #1
   1d3e8:	mov	r9, #3
   1d3ec:	cmnne	sl, #1
   1d3f0:	beq	1e91c <__assert_fail@plt+0xd1bc>
   1d3f4:	ldr	r0, [sp, #32]
   1d3f8:	cmp	r0, #0
   1d3fc:	beq	1d40c <__assert_fail@plt+0xbcac>
   1d400:	cmp	r7, sl
   1d404:	mov	r9, #11
   1d408:	bhi	1e91c <__assert_fail@plt+0xd1bc>
   1d40c:	ldr	r0, [r8, #92]	; 0x5c
   1d410:	cmp	r0, #2
   1d414:	blt	1d450 <__assert_fail@plt+0xbcf0>
   1d418:	ldr	r4, [sp, #48]	; 0x30
   1d41c:	ldr	r1, [sp, #20]
   1d420:	mov	r5, #1
   1d424:	ldr	r0, [r4, #32]
   1d428:	cmp	r1, r0
   1d42c:	beq	1d4dc <__assert_fail@plt+0xbd7c>
   1d430:	ldmib	r4, {r6, r9}
   1d434:	str	r7, [r6, r0, lsl #2]
   1d438:	ldr	r0, [r4, #32]
   1d43c:	add	r1, r0, #1
   1d440:	str	r1, [r4, #32]
   1d444:	ldr	r4, [sp, #52]	; 0x34
   1d448:	str	sl, [r9, r0, lsl #2]
   1d44c:	b	1d458 <__assert_fail@plt+0xbcf8>
   1d450:	ldr	r4, [sp, #52]	; 0x34
   1d454:	mov	r5, #1
   1d458:	ldr	r6, [sp, #24]
   1d45c:	ldr	r9, [sp, #12]
   1d460:	mov	r0, #0
   1d464:	cmp	r7, r0
   1d468:	cmpls	r0, sl
   1d46c:	ubfxls	r1, r0, #5, #3
   1d470:	andls	r3, r0, #31
   1d474:	add	r0, r0, #1
   1d478:	ldrls	r2, [r4, r1, lsl #2]
   1d47c:	orrls	r2, r2, r5, lsl r3
   1d480:	strls	r2, [r4, r1, lsl #2]
   1d484:	cmp	r0, #256	; 0x100
   1d488:	bne	1d464 <__assert_fail@plt+0xbd04>
   1d48c:	ldr	r0, [sp, #16]
   1d490:	ldr	sl, [sp, #48]	; 0x30
   1d494:	mov	r1, #0
   1d498:	b	1d2b4 <__assert_fail@plt+0xbb54>
   1d49c:	ldr	r1, [sp, #28]
   1d4a0:	mov	r0, #1
   1d4a4:	orr	r1, r0, r1, lsl #1
   1d4a8:	ldr	r0, [sl]
   1d4ac:	str	r1, [sp, #28]
   1d4b0:	lsl	r1, r1, #2
   1d4b4:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1d4b8:	cmp	r0, #0
   1d4bc:	beq	1ece8 <__assert_fail@plt+0xd588>
   1d4c0:	ldr	sl, [sp, #48]	; 0x30
   1d4c4:	ldr	r6, [sp, #24]
   1d4c8:	ldr	lr, [sp, #44]	; 0x2c
   1d4cc:	ldr	r4, [sp, #52]	; 0x34
   1d4d0:	str	r0, [sl]
   1d4d4:	ldr	r1, [sl, #20]
   1d4d8:	b	1d330 <__assert_fail@plt+0xbbd0>
   1d4dc:	ldr	r0, [sp, #20]
   1d4e0:	orr	r0, r5, r0, lsl #1
   1d4e4:	lsl	r9, r0, #2
   1d4e8:	str	r0, [sp, #20]
   1d4ec:	ldr	r0, [r4, #4]
   1d4f0:	mov	r1, r9
   1d4f4:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1d4f8:	mov	r6, r0
   1d4fc:	ldr	r0, [r4, #8]
   1d500:	mov	r1, r9
   1d504:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1d508:	mov	r9, r0
   1d50c:	cmp	r6, #0
   1d510:	cmpne	r9, #0
   1d514:	beq	1ed04 <__assert_fail@plt+0xd5a4>
   1d518:	ldr	r4, [sp, #48]	; 0x30
   1d51c:	mov	r5, #1
   1d520:	stmib	r4, {r6, r9}
   1d524:	ldr	r0, [r4, #32]
   1d528:	ldr	lr, [sp, #44]	; 0x2c
   1d52c:	b	1d434 <__assert_fail@plt+0xbcd4>
   1d530:	ldr	r0, [r6, #40]	; 0x28
   1d534:	add	r0, r0, r9
   1d538:	str	r0, [r6, #40]	; 0x28
   1d53c:	ldr	r0, [sp, #36]	; 0x24
   1d540:	cmp	r0, #0
   1d544:	beq	1d564 <__assert_fail@plt+0xbe04>
   1d548:	vld1.32	{d16-d17}, [r4]
   1d54c:	mov	r0, r4
   1d550:	vmvn	q8, q8
   1d554:	vst1.32	{d16-d17}, [r0]!
   1d558:	vld1.32	{d16-d17}, [r0]
   1d55c:	vmvn	q8, q8
   1d560:	vst1.32	{d16-d17}, [r0]
   1d564:	ldr	r0, [r8, #92]	; 0x5c
   1d568:	cmp	r0, #2
   1d56c:	blt	1d5e8 <__assert_fail@plt+0xbe88>
   1d570:	ldm	r4, {r1, r2, r3, r7}
   1d574:	ldr	r6, [r8, #60]	; 0x3c
   1d578:	ldr	r5, [r6]
   1d57c:	and	r1, r1, r5
   1d580:	str	r1, [r4]
   1d584:	ldr	r1, [r6, #4]
   1d588:	and	r1, r2, r1
   1d58c:	str	r1, [r4, #4]
   1d590:	ldr	r1, [r6, #8]
   1d594:	and	r1, r3, r1
   1d598:	str	r1, [r4, #8]
   1d59c:	ldr	r1, [r6, #12]
   1d5a0:	and	r1, r7, r1
   1d5a4:	str	r1, [r4, #12]
   1d5a8:	ldr	r1, [r4, #16]
   1d5ac:	ldr	r2, [r6, #16]
   1d5b0:	and	r1, r1, r2
   1d5b4:	str	r1, [r4, #16]
   1d5b8:	ldr	r1, [r6, #20]
   1d5bc:	ldr	r2, [r4, #20]
   1d5c0:	and	r1, r2, r1
   1d5c4:	str	r1, [r4, #20]
   1d5c8:	ldr	r1, [r6, #24]
   1d5cc:	ldr	r2, [r4, #24]
   1d5d0:	and	r1, r2, r1
   1d5d4:	str	r1, [r4, #24]
   1d5d8:	ldr	r1, [r6, #28]
   1d5dc:	ldr	r2, [r4, #28]
   1d5e0:	and	r1, r2, r1
   1d5e4:	str	r1, [r4, #28]
   1d5e8:	ldr	r1, [sl, #20]
   1d5ec:	ldr	r6, [sp, #40]	; 0x28
   1d5f0:	cmp	r1, #0
   1d5f4:	bne	1d61c <__assert_fail@plt+0xbebc>
   1d5f8:	ldr	r1, [sl, #24]
   1d5fc:	cmp	r1, #0
   1d600:	bne	1d61c <__assert_fail@plt+0xbebc>
   1d604:	ldr	r1, [sl, #28]
   1d608:	cmp	r1, #0
   1d60c:	bne	1d61c <__assert_fail@plt+0xbebc>
   1d610:	ldr	r1, [sl, #32]
   1d614:	cmp	r1, #0
   1d618:	beq	1e794 <__assert_fail@plt+0xd034>
   1d61c:	ldrb	r0, [r8, #88]	; 0x58
   1d620:	orr	r0, r0, #2
   1d624:	strb	r0, [r8, #88]	; 0x58
   1d628:	ldr	r1, [r8, #64]	; 0x40
   1d62c:	cmp	r1, #31
   1d630:	beq	1e974 <__assert_fail@plt+0xd214>
   1d634:	ldr	r0, [r8, #56]	; 0x38
   1d638:	add	r2, r1, #1
   1d63c:	add	r0, r0, r1, lsl #5
   1d640:	mov	r1, #6
   1d644:	vmov.i32	q8, #0	; 0x00000000
   1d648:	str	r2, [r8, #64]	; 0x40
   1d64c:	mov	r2, #0
   1d650:	add	r9, r0, #4
   1d654:	str	r2, [r0, #20]
   1d658:	str	sl, [r0, #24]
   1d65c:	str	r1, [r0, #28]
   1d660:	mov	r0, #28
   1d664:	mov	r1, r9
   1d668:	vst1.32	{d16-d17}, [r1], r0
   1d66c:	mvn	r0, #0
   1d670:	str	r0, [r1]
   1d674:	ldr	r0, [r4]
   1d678:	cmp	r0, #0
   1d67c:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d680:	ldr	r0, [r4, #4]
   1d684:	cmp	r0, #0
   1d688:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d68c:	ldr	r0, [r4, #8]
   1d690:	cmp	r0, #0
   1d694:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d698:	ldr	r0, [r4, #12]
   1d69c:	cmp	r0, #0
   1d6a0:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d6a4:	ldr	r0, [r4, #16]
   1d6a8:	cmp	r0, #0
   1d6ac:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d6b0:	ldr	r0, [r4, #20]
   1d6b4:	cmp	r0, #0
   1d6b8:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d6bc:	ldr	r0, [r4, #24]
   1d6c0:	cmp	r0, #0
   1d6c4:	bne	1d6d4 <__assert_fail@plt+0xbf74>
   1d6c8:	ldr	r0, [r4, #28]
   1d6cc:	cmp	r0, #0
   1d6d0:	beq	1ea28 <__assert_fail@plt+0xd2c8>
   1d6d4:	ldr	r1, [r8, #64]	; 0x40
   1d6d8:	cmp	r1, #31
   1d6dc:	beq	1e9a0 <__assert_fail@plt+0xd240>
   1d6e0:	ldr	r0, [r8, #56]	; 0x38
   1d6e4:	add	r2, r1, #1
   1d6e8:	add	r0, r0, r1, lsl #5
   1d6ec:	mov	r1, #3
   1d6f0:	vmov.i32	q8, #0	; 0x00000000
   1d6f4:	str	r2, [r8, #64]	; 0x40
   1d6f8:	mov	r2, #0
   1d6fc:	add	r5, r0, #4
   1d700:	str	r2, [r0, #20]
   1d704:	str	r4, [r0, #24]
   1d708:	str	r1, [r0, #28]
   1d70c:	mov	r0, #28
   1d710:	mov	r1, r5
   1d714:	vst1.32	{d16-d17}, [r1], r0
   1d718:	mvn	r0, #0
   1d71c:	str	r0, [r1]
   1d720:	ldr	r1, [r8, #64]	; 0x40
   1d724:	cmp	r1, #31
   1d728:	beq	1e9cc <__assert_fail@plt+0xd26c>
   1d72c:	ldr	r0, [r8, #56]	; 0x38
   1d730:	add	r2, r1, #1
   1d734:	add	r7, r0, r1, lsl #5
   1d738:	mov	r0, #0
   1d73c:	mov	r1, #10
   1d740:	str	r2, [r8, #64]	; 0x40
   1d744:	str	r0, [r7, #4]!
   1d748:	mvn	r2, #0
   1d74c:	add	r3, r7, #20
   1d750:	stmib	r7, {r5, r9}
   1d754:	str	r0, [r7, #12]
   1d758:	str	r0, [r7, #16]
   1d75c:	stm	r3, {r0, r1, r2}
   1d760:	str	r7, [r5]
   1d764:	str	r7, [r9]
   1d768:	b	1d974 <__assert_fail@plt+0xc214>
   1d76c:	mov	r0, #5
   1d770:	mov	r4, r8
   1d774:	str	r0, [lr]
   1d778:	ldr	r1, [r4, #64]!	; 0x40
   1d77c:	cmp	r1, #31
   1d780:	beq	1ead0 <__assert_fail@plt+0xd370>
   1d784:	ldr	r0, [r8, #56]	; 0x38
   1d788:	add	r2, r1, #1
   1d78c:	add	r5, r0, r1, lsl #5
   1d790:	mov	r0, #0
   1d794:	str	r2, [r4]
   1d798:	str	r0, [r5, #4]!
   1d79c:	str	r0, [r5, #4]
   1d7a0:	str	r0, [r5, #8]
   1d7a4:	ldm	lr, {r1, r2}
   1d7a8:	str	r0, [r5, #12]
   1d7ac:	str	r0, [r5, #16]
   1d7b0:	mvn	r0, #0
   1d7b4:	str	r0, [r5, #28]
   1d7b8:	bic	r0, r2, #786432	; 0xc0000
   1d7bc:	str	r1, [r5, #20]
   1d7c0:	str	r0, [r5, #24]
   1d7c4:	mov	r0, #10
   1d7c8:	str	r0, [lr]
   1d7cc:	mov	r9, r6
   1d7d0:	ldr	r1, [r4]
   1d7d4:	cmp	r1, #31
   1d7d8:	beq	1ea3c <__assert_fail@plt+0xd2dc>
   1d7dc:	ldr	r0, [r8, #56]	; 0x38
   1d7e0:	add	r2, r1, #1
   1d7e4:	add	r6, r0, r1, lsl #5
   1d7e8:	mov	r0, #0
   1d7ec:	str	r2, [r4]
   1d7f0:	str	r0, [r6, #4]!
   1d7f4:	str	r0, [r6, #4]
   1d7f8:	str	r0, [r6, #8]
   1d7fc:	ldm	lr, {r1, r2}
   1d800:	str	r0, [r6, #12]
   1d804:	str	r0, [r6, #16]
   1d808:	mvn	r0, #0
   1d80c:	str	r0, [r6, #28]
   1d810:	bic	r0, r2, #786432	; 0xc0000
   1d814:	str	r1, [r6, #20]
   1d818:	str	r0, [r6, #24]
   1d81c:	ldr	r1, [r4]
   1d820:	cmp	r1, #31
   1d824:	beq	1ea70 <__assert_fail@plt+0xd310>
   1d828:	ldr	r0, [r8, #56]	; 0x38
   1d82c:	add	r2, r1, #1
   1d830:	cmp	r5, #0
   1d834:	str	r2, [r4]
   1d838:	add	r4, r0, r1, lsl #5
   1d83c:	mov	r0, #0
   1d840:	mov	r1, #10
   1d844:	mvn	r2, #0
   1d848:	str	r0, [r4, #4]!
   1d84c:	add	r3, r4, #20
   1d850:	stmib	r4, {r5, r6}
   1d854:	str	r0, [r4, #12]
   1d858:	str	r0, [r4, #16]
   1d85c:	stm	r3, {r0, r1, r2}
   1d860:	strne	r4, [r5]
   1d864:	cmp	r6, #0
   1d868:	strne	r4, [r6]
   1d86c:	cmpne	r5, #0
   1d870:	bne	1d8d4 <__assert_fail@plt+0xc174>
   1d874:	mov	r0, #12
   1d878:	ldr	r1, [sp, #16]
   1d87c:	str	r0, [r1]
   1d880:	b	1e6d8 <__assert_fail@plt+0xcf78>
   1d884:	ldr	r1, [r8, #64]	; 0x40
   1d888:	mov	r9, r6
   1d88c:	cmp	r1, #31
   1d890:	beq	1eb04 <__assert_fail@plt+0xd3a4>
   1d894:	ldr	r0, [r8, #56]	; 0x38
   1d898:	add	r2, r1, #1
   1d89c:	add	r4, r0, r1, lsl #5
   1d8a0:	mov	r0, #0
   1d8a4:	str	r2, [r8, #64]	; 0x40
   1d8a8:	str	r0, [r4, #4]!
   1d8ac:	str	r0, [r4, #4]
   1d8b0:	str	r0, [r4, #8]
   1d8b4:	ldm	lr, {r1, r2}
   1d8b8:	str	r0, [r4, #12]
   1d8bc:	str	r0, [r4, #16]
   1d8c0:	mvn	r0, #0
   1d8c4:	str	r0, [r4, #28]
   1d8c8:	bic	r0, r2, #786432	; 0xc0000
   1d8cc:	str	r1, [r4, #20]
   1d8d0:	str	r0, [r4, #24]
   1d8d4:	mov	r0, lr
   1d8d8:	mov	r1, r7
   1d8dc:	mov	r2, r9
   1d8e0:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1d8e4:	ldr	r1, [r7, #40]	; 0x28
   1d8e8:	mov	sl, r4
   1d8ec:	add	r0, r1, r0
   1d8f0:	str	r0, [r7, #40]	; 0x28
   1d8f4:	b	1e6d8 <__assert_fail@plt+0xcf78>
   1d8f8:	ldrb	r0, [r6, #4]
   1d8fc:	cmp	r0, #9
   1d900:	bne	1ebf0 <__assert_fail@plt+0xd490>
   1d904:	mov	lr, r6
   1d908:	cmp	r4, #8
   1d90c:	ldrls	r0, [r8, #84]	; 0x54
   1d910:	movls	r1, #1
   1d914:	orrls	r0, r0, r1, lsl r4
   1d918:	strls	r0, [r8, #84]	; 0x54
   1d91c:	ldr	r1, [r8, #64]	; 0x40
   1d920:	cmp	r1, #31
   1d924:	beq	1e9f8 <__assert_fail@plt+0xd298>
   1d928:	ldr	r0, [r8, #56]	; 0x38
   1d92c:	mov	r6, sl
   1d930:	add	r0, r0, r1, lsl #5
   1d934:	add	r2, r1, #1
   1d938:	mov	r1, #0
   1d93c:	mvn	r3, #0
   1d940:	cmp	r9, #0
   1d944:	mov	r7, r0
   1d948:	str	r2, [r8, #64]	; 0x40
   1d94c:	mov	r2, #17
   1d950:	str	r1, [r7, #4]!
   1d954:	add	ip, r7, #20
   1d958:	str	r9, [r7, #4]
   1d95c:	str	r1, [r7, #8]
   1d960:	str	r1, [r7, #12]
   1d964:	str	r1, [r7, #16]
   1d968:	stm	ip, {r1, r2, r3}
   1d96c:	strne	r7, [r9]
   1d970:	str	r4, [r0, #24]
   1d974:	mov	r4, r6
   1d978:	ldr	r6, [sp, #24]
   1d97c:	mov	r0, lr
   1d980:	mov	r2, r4
   1d984:	mov	r1, r6
   1d988:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1d98c:	ldr	r1, [r6, #40]	; 0x28
   1d990:	ldr	ip, [sp, #44]	; 0x2c
   1d994:	add	r0, r1, r0
   1d998:	str	r0, [r6, #40]	; 0x28
   1d99c:	add	r0, r8, #56	; 0x38
   1d9a0:	add	r8, r8, #64	; 0x40
   1d9a4:	str	r0, [sp, #20]
   1d9a8:	and	r0, r4, #2097152	; 0x200000
   1d9ac:	str	r0, [sp, #12]
   1d9b0:	str	r4, [sp, #40]	; 0x28
   1d9b4:	and	r0, r4, #16777216	; 0x1000000
   1d9b8:	mov	r4, #0
   1d9bc:	str	r0, [sp, #28]
   1d9c0:	ldrb	r0, [ip, #4]
   1d9c4:	mov	sl, r7
   1d9c8:	cmp	r0, #23
   1d9cc:	bhi	1e6d8 <__assert_fail@plt+0xcf78>
   1d9d0:	movw	r2, #2048	; 0x800
   1d9d4:	mov	r1, #1
   1d9d8:	movt	r2, #140	; 0x8c
   1d9dc:	tst	r2, r1, lsl r0
   1d9e0:	beq	1e6d8 <__assert_fail@plt+0xcf78>
   1d9e4:	cmp	r0, #23
   1d9e8:	str	sl, [sp, #36]	; 0x24
   1d9ec:	bne	1da00 <__assert_fail@plt+0xc2a0>
   1d9f0:	ldm	ip, {r5, sl}
   1d9f4:	ldr	r7, [r6, #40]	; 0x28
   1d9f8:	mvn	r2, #0
   1d9fc:	b	1da34 <__assert_fail@plt+0xc2d4>
   1da00:	cmp	r0, #19
   1da04:	sub	r0, r0, #18
   1da08:	mvn	r5, #0
   1da0c:	clz	r0, r0
   1da10:	movweq	r5, #1
   1da14:	lsr	r9, r0, #5
   1da18:	b	1dc18 <__assert_fail@plt+0xc4b8>
   1da1c:	add	r0, r9, r9, lsl #2
   1da20:	add	r0, r1, r0, lsl #1
   1da24:	movw	r1, #32816	; 0x8030
   1da28:	sub	r2, r0, #48	; 0x30
   1da2c:	cmp	r0, r1
   1da30:	movwgt	r2, #32768	; 0x8000
   1da34:	mov	r9, r2
   1da38:	ldr	r2, [sp, #40]	; 0x28
   1da3c:	mov	r0, ip
   1da40:	mov	r1, r6
   1da44:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1da48:	ldr	r1, [r6, #40]	; 0x28
   1da4c:	ldr	ip, [sp, #44]	; 0x2c
   1da50:	add	r0, r1, r0
   1da54:	str	r0, [r6, #40]	; 0x28
   1da58:	ldrb	r0, [ip, #4]
   1da5c:	ldrb	r1, [ip]
   1da60:	cmp	r0, #24
   1da64:	beq	1daac <__assert_fail@plt+0xc34c>
   1da68:	cmp	r0, #2
   1da6c:	beq	1dafc <__assert_fail@plt+0xc39c>
   1da70:	cmp	r1, #44	; 0x2c
   1da74:	beq	1daac <__assert_fail@plt+0xc34c>
   1da78:	mvn	r2, #1
   1da7c:	cmp	r1, #48	; 0x30
   1da80:	bcc	1da34 <__assert_fail@plt+0xc2d4>
   1da84:	cmp	r0, #1
   1da88:	bne	1da34 <__assert_fail@plt+0xc2d4>
   1da8c:	cmn	r9, #2
   1da90:	beq	1da34 <__assert_fail@plt+0xc2d4>
   1da94:	cmp	r1, #57	; 0x39
   1da98:	bhi	1da34 <__assert_fail@plt+0xc2d4>
   1da9c:	cmn	r9, #1
   1daa0:	bne	1da1c <__assert_fail@plt+0xc2bc>
   1daa4:	sub	r2, r1, #48	; 0x30
   1daa8:	b	1da34 <__assert_fail@plt+0xc2d4>
   1daac:	cmn	r9, #1
   1dab0:	bne	1dadc <__assert_fail@plt+0xc37c>
   1dab4:	cmp	r1, #44	; 0x2c
   1dab8:	moveq	r9, #0
   1dabc:	cmpeq	r0, #1
   1dac0:	beq	1db24 <__assert_fail@plt+0xc3c4>
   1dac4:	ldr	r0, [sp, #16]
   1dac8:	mov	r1, #10
   1dacc:	str	r1, [r0]
   1dad0:	ldr	sl, [sp, #36]	; 0x24
   1dad4:	mov	r7, #0
   1dad8:	b	1e5e8 <__assert_fail@plt+0xce88>
   1dadc:	cmn	r9, #2
   1dae0:	mov	r2, r9
   1dae4:	beq	1dafc <__assert_fail@plt+0xc39c>
   1dae8:	cmp	r0, #24
   1daec:	beq	1db30 <__assert_fail@plt+0xc3d0>
   1daf0:	cmp	r0, #1
   1daf4:	cmpeq	r1, #44	; 0x2c
   1daf8:	beq	1db24 <__assert_fail@plt+0xc3c4>
   1dafc:	ldr	r1, [sp, #12]
   1db00:	cmp	r1, #0
   1db04:	beq	1e1c4 <__assert_fail@plt+0xca64>
   1db08:	mov	r0, #1
   1db0c:	str	r7, [r6, #40]	; 0x28
   1db10:	bfi	sl, r0, #0, #8
   1db14:	stm	ip, {r5, sl}
   1db18:	ldr	sl, [sp, #36]	; 0x24
   1db1c:	mov	r7, sl
   1db20:	b	1e5e8 <__assert_fail@plt+0xce88>
   1db24:	mvn	r2, #0
   1db28:	str	sl, [sp, #52]	; 0x34
   1db2c:	b	1db5c <__assert_fail@plt+0xc3fc>
   1db30:	ldr	sl, [sp, #36]	; 0x24
   1db34:	mov	r5, r9
   1db38:	cmp	r0, #24
   1db3c:	beq	1dc04 <__assert_fail@plt+0xc4a4>
   1db40:	b	1e1a4 <__assert_fail@plt+0xca44>
   1db44:	add	r0, sl, sl, lsl #2
   1db48:	add	r0, r1, r0, lsl #1
   1db4c:	movw	r1, #32816	; 0x8030
   1db50:	sub	r2, r0, #48	; 0x30
   1db54:	cmp	r0, r1
   1db58:	movwgt	r2, #32768	; 0x8000
   1db5c:	mov	sl, r2
   1db60:	ldr	r2, [sp, #40]	; 0x28
   1db64:	mov	r0, ip
   1db68:	mov	r1, r6
   1db6c:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1db70:	ldr	r1, [r6, #40]	; 0x28
   1db74:	ldr	ip, [sp, #44]	; 0x2c
   1db78:	add	r0, r1, r0
   1db7c:	str	r0, [r6, #40]	; 0x28
   1db80:	ldrb	r0, [ip, #4]
   1db84:	cmp	r0, #24
   1db88:	beq	1dbd4 <__assert_fail@plt+0xc474>
   1db8c:	cmp	r0, #2
   1db90:	beq	1e16c <__assert_fail@plt+0xca0c>
   1db94:	ldrb	r1, [ip]
   1db98:	cmp	r1, #44	; 0x2c
   1db9c:	beq	1dbd4 <__assert_fail@plt+0xc474>
   1dba0:	mvn	r2, #1
   1dba4:	cmp	r1, #48	; 0x30
   1dba8:	bcc	1db5c <__assert_fail@plt+0xc3fc>
   1dbac:	cmp	r0, #1
   1dbb0:	bne	1db5c <__assert_fail@plt+0xc3fc>
   1dbb4:	cmn	sl, #2
   1dbb8:	beq	1db5c <__assert_fail@plt+0xc3fc>
   1dbbc:	cmp	r1, #57	; 0x39
   1dbc0:	bhi	1db5c <__assert_fail@plt+0xc3fc>
   1dbc4:	cmn	sl, #1
   1dbc8:	bne	1db44 <__assert_fail@plt+0xc3e4>
   1dbcc:	sub	r2, r1, #48	; 0x30
   1dbd0:	b	1db5c <__assert_fail@plt+0xc3fc>
   1dbd4:	cmn	sl, #2
   1dbd8:	beq	1e16c <__assert_fail@plt+0xca0c>
   1dbdc:	cmn	sl, #1
   1dbe0:	mov	r5, sl
   1dbe4:	beq	1dbf8 <__assert_fail@plt+0xc498>
   1dbe8:	ldr	sl, [sp, #36]	; 0x24
   1dbec:	cmp	r9, r5
   1dbf0:	ble	1dbfc <__assert_fail@plt+0xc49c>
   1dbf4:	b	1e1a4 <__assert_fail@plt+0xca44>
   1dbf8:	ldr	sl, [sp, #36]	; 0x24
   1dbfc:	cmp	r0, #24
   1dc00:	bne	1e1a4 <__assert_fail@plt+0xca44>
   1dc04:	cmn	r5, #1
   1dc08:	mov	r0, r5
   1dc0c:	moveq	r0, r9
   1dc10:	cmp	r0, #32768	; 0x8000
   1dc14:	bge	1e1b0 <__assert_fail@plt+0xca50>
   1dc18:	ldr	r2, [sp, #40]	; 0x28
   1dc1c:	mov	r0, ip
   1dc20:	mov	r1, r6
   1dc24:	bl	1bd5c <__assert_fail@plt+0xa5fc>
   1dc28:	ldr	r1, [r6, #40]	; 0x28
   1dc2c:	mov	r7, #0
   1dc30:	cmp	sl, #0
   1dc34:	add	r0, r1, r0
   1dc38:	str	r0, [r6, #40]	; 0x28
   1dc3c:	beq	1e068 <__assert_fail@plt+0xc908>
   1dc40:	ldr	lr, [sp, #20]
   1dc44:	orrs	r0, r5, r9
   1dc48:	beq	1e070 <__assert_fail@plt+0xc910>
   1dc4c:	mov	r0, #0
   1dc50:	cmp	r9, #1
   1dc54:	mov	r7, sl
   1dc58:	str	r0, [sp, #32]
   1dc5c:	ldr	ip, [sp, #44]	; 0x2c
   1dc60:	str	r5, [sp, #48]	; 0x30
   1dc64:	bge	1e118 <__assert_fail@plt+0xc9b8>
   1dc68:	ldrb	r0, [r7, #24]
   1dc6c:	cmp	r0, #17
   1dc70:	bne	1dce0 <__assert_fail@plt+0xc580>
   1dc74:	ldr	r0, [r7, #20]
   1dc78:	mov	r2, r7
   1dc7c:	mov	r1, r2
   1dc80:	ldr	r2, [r2, #4]
   1dc84:	cmp	r2, #0
   1dc88:	bne	1dc7c <__assert_fail@plt+0xc51c>
   1dc8c:	ldr	r2, [r1, #8]
   1dc90:	cmp	r2, #0
   1dc94:	bne	1dc7c <__assert_fail@plt+0xc51c>
   1dc98:	ldr	r2, [r1, #24]
   1dc9c:	uxtb	r3, r2
   1dca0:	cmp	r3, #17
   1dca4:	ldreq	r3, [r1, #20]
   1dca8:	cmpeq	r3, r0
   1dcac:	orreq	r2, r2, #524288	; 0x80000
   1dcb0:	streq	r2, [r1, #24]
   1dcb4:	ldr	r3, [r1]
   1dcb8:	cmp	r3, #0
   1dcbc:	beq	1dce0 <__assert_fail@plt+0xc580>
   1dcc0:	ldr	r2, [r3, #8]
   1dcc4:	cmp	r2, r1
   1dcc8:	mov	r1, r3
   1dccc:	beq	1dc98 <__assert_fail@plt+0xc538>
   1dcd0:	cmp	r2, #0
   1dcd4:	mov	r1, r3
   1dcd8:	beq	1dc98 <__assert_fail@plt+0xc538>
   1dcdc:	b	1dc7c <__assert_fail@plt+0xc51c>
   1dce0:	ldr	r1, [r8]
   1dce4:	cmn	r5, #1
   1dce8:	mov	r6, #10
   1dcec:	movweq	r6, #11
   1dcf0:	cmp	r1, #31
   1dcf4:	beq	1e138 <__assert_fail@plt+0xc9d8>
   1dcf8:	ldr	r0, [lr]
   1dcfc:	add	r2, r1, #1
   1dd00:	add	sl, r0, r1, lsl #5
   1dd04:	mvn	r0, #0
   1dd08:	str	r2, [r8]
   1dd0c:	str	r4, [sl, #4]!
   1dd10:	str	r7, [sl, #4]
   1dd14:	str	r4, [sl, #8]
   1dd18:	str	r4, [sl, #12]
   1dd1c:	str	r4, [sl, #16]
   1dd20:	str	r4, [sl, #20]
   1dd24:	str	r6, [sl, #24]
   1dd28:	str	r0, [sl, #28]
   1dd2c:	add	r0, r9, #2
   1dd30:	str	sl, [r7]
   1dd34:	cmp	r0, r5
   1dd38:	bgt	1dffc <__assert_fail@plt+0xc89c>
   1dd3c:	mov	r6, sl
   1dd40:	b	1dd50 <__assert_fail@plt+0xc5f0>
   1dd44:	ldr	sl, [r7]
   1dd48:	mov	r0, r1
   1dd4c:	add	r0, r1, #1
   1dd50:	ldr	r1, [r8]
   1dd54:	str	r0, [sp, #52]	; 0x34
   1dd58:	cmp	r1, #31
   1dd5c:	beq	1df48 <__assert_fail@plt+0xc7e8>
   1dd60:	ldr	r0, [lr]
   1dd64:	add	r3, r1, #1
   1dd68:	add	r9, r0, r1, lsl #5
   1dd6c:	add	r2, r7, #20
   1dd70:	sub	r5, fp, #80	; 0x50
   1dd74:	str	r3, [r8]
   1dd78:	str	r4, [r9, #4]!
   1dd7c:	str	r4, [r9, #4]
   1dd80:	str	r4, [r9, #8]
   1dd84:	ldm	r2, {r0, r1}
   1dd88:	mvn	r2, #0
   1dd8c:	str	r4, [r9, #12]
   1dd90:	str	r4, [r9, #16]
   1dd94:	str	r2, [r9, #28]
   1dd98:	str	r0, [r9, #20]
   1dd9c:	bic	r0, r1, #786432	; 0xc0000
   1dda0:	str	r0, [r9, #24]
   1dda4:	mov	r0, r9
   1dda8:	str	r9, [fp, #-80]	; 0xffffffb0
   1ddac:	b	1ddf0 <__assert_fail@plt+0xc690>
   1ddb0:	add	r3, r1, #1
   1ddb4:	add	r0, r0, r1, lsl #5
   1ddb8:	add	r2, r7, #20
   1ddbc:	str	r3, [r8]
   1ddc0:	str	r4, [r0, #4]!
   1ddc4:	mvn	r3, #0
   1ddc8:	str	r4, [r0, #4]
   1ddcc:	str	r4, [r0, #8]
   1ddd0:	ldm	r2, {r1, r2}
   1ddd4:	str	r4, [r0, #12]
   1ddd8:	str	r4, [r0, #16]
   1dddc:	str	r3, [r0, #28]
   1dde0:	str	r1, [r0, #20]
   1dde4:	bic	r1, r2, #786432	; 0xc0000
   1dde8:	str	r1, [r0, #24]
   1ddec:	str	r0, [r5]
   1ddf0:	str	sl, [r0]
   1ddf4:	ldr	r0, [r5]
   1ddf8:	ldr	r1, [r0, #24]
   1ddfc:	orr	r1, r1, #262144	; 0x40000
   1de00:	str	r1, [r0, #24]
   1de04:	ldr	r0, [r7, #4]
   1de08:	ldr	sl, [r5]
   1de0c:	cmp	r0, #0
   1de10:	beq	1de20 <__assert_fail@plt+0xc6c0>
   1de14:	add	r5, sl, #4
   1de18:	mov	r7, r0
   1de1c:	b	1de54 <__assert_fail@plt+0xc6f4>
   1de20:	mov	r1, #0
   1de24:	mov	r0, r7
   1de28:	ldr	r7, [r7, #8]
   1de2c:	cmp	r7, r1
   1de30:	cmpne	r7, #0
   1de34:	bne	1de50 <__assert_fail@plt+0xc6f0>
   1de38:	ldr	r7, [r0]
   1de3c:	ldr	sl, [sl]
   1de40:	mov	r1, r0
   1de44:	cmp	r7, #0
   1de48:	bne	1de24 <__assert_fail@plt+0xc6c4>
   1de4c:	b	1de98 <__assert_fail@plt+0xc738>
   1de50:	add	r5, sl, #8
   1de54:	ldr	r1, [r8]
   1de58:	cmp	r1, #31
   1de5c:	beq	1de68 <__assert_fail@plt+0xc708>
   1de60:	ldr	r0, [lr]
   1de64:	b	1ddb0 <__assert_fail@plt+0xc650>
   1de68:	mov	r0, #996	; 0x3e4
   1de6c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1de70:	cmp	r0, #0
   1de74:	beq	1dfe4 <__assert_fail@plt+0xc884>
   1de78:	ldr	lr, [sp, #20]
   1de7c:	ldr	ip, [sp, #44]	; 0x2c
   1de80:	ldr	r1, [lr]
   1de84:	str	r1, [r0]
   1de88:	mov	r1, #0
   1de8c:	str	r0, [lr]
   1de90:	str	r1, [r8]
   1de94:	b	1ddb0 <__assert_fail@plt+0xc650>
   1de98:	mov	r7, r9
   1de9c:	ldr	r1, [r8]
   1dea0:	cmp	r1, #31
   1dea4:	beq	1df78 <__assert_fail@plt+0xc818>
   1dea8:	ldr	r0, [lr]
   1deac:	add	r2, r1, #1
   1deb0:	add	r5, r0, r1, lsl #5
   1deb4:	mov	r0, #16
   1deb8:	cmp	r7, #0
   1debc:	str	r2, [r8]
   1dec0:	str	r4, [r5, #4]!
   1dec4:	stmib	r5, {r6, r7}
   1dec8:	str	r4, [r5, #12]
   1decc:	str	r4, [r5, #16]
   1ded0:	str	r4, [r5, #20]
   1ded4:	str	r0, [r5, #24]
   1ded8:	mvn	r0, #0
   1dedc:	str	r0, [r5, #28]
   1dee0:	str	r5, [r6]
   1dee4:	beq	1e5d0 <__assert_fail@plt+0xce70>
   1dee8:	str	r5, [r7]
   1deec:	ldr	r1, [r8]
   1def0:	cmp	r1, #31
   1def4:	beq	1dfa8 <__assert_fail@plt+0xc848>
   1def8:	ldr	r0, [lr]
   1defc:	add	r2, r1, #1
   1df00:	add	r6, r0, r1, lsl #5
   1df04:	mov	r0, #10
   1df08:	ldr	r1, [sp, #52]	; 0x34
   1df0c:	str	r2, [r8]
   1df10:	str	r4, [r6, #4]!
   1df14:	str	r5, [r6, #4]
   1df18:	str	r4, [r6, #8]
   1df1c:	str	r4, [r6, #12]
   1df20:	str	r4, [r6, #16]
   1df24:	str	r4, [r6, #20]
   1df28:	str	r0, [r6, #24]
   1df2c:	mvn	r0, #0
   1df30:	str	r0, [r6, #28]
   1df34:	ldr	r0, [sp, #48]	; 0x30
   1df38:	str	r6, [r5]
   1df3c:	cmp	r1, r0
   1df40:	blt	1dd44 <__assert_fail@plt+0xc5e4>
   1df44:	b	1dff8 <__assert_fail@plt+0xc898>
   1df48:	mov	r0, #996	; 0x3e4
   1df4c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1df50:	cmp	r0, #0
   1df54:	beq	1dfd8 <__assert_fail@plt+0xc878>
   1df58:	ldr	lr, [sp, #20]
   1df5c:	ldr	ip, [sp, #44]	; 0x2c
   1df60:	ldr	r1, [lr]
   1df64:	str	r1, [r0]
   1df68:	mov	r1, #0
   1df6c:	str	r0, [lr]
   1df70:	str	r1, [r8]
   1df74:	b	1dd64 <__assert_fail@plt+0xc604>
   1df78:	mov	r0, #996	; 0x3e4
   1df7c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1df80:	ldr	lr, [sp, #20]
   1df84:	ldr	ip, [sp, #44]	; 0x2c
   1df88:	cmp	r0, #0
   1df8c:	beq	1e5d0 <__assert_fail@plt+0xce70>
   1df90:	ldr	r1, [lr]
   1df94:	str	r1, [r0]
   1df98:	mov	r1, #0
   1df9c:	str	r0, [lr]
   1dfa0:	str	r1, [r8]
   1dfa4:	b	1deac <__assert_fail@plt+0xc74c>
   1dfa8:	mov	r0, #996	; 0x3e4
   1dfac:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1dfb0:	ldr	lr, [sp, #20]
   1dfb4:	ldr	ip, [sp, #44]	; 0x2c
   1dfb8:	cmp	r0, #0
   1dfbc:	beq	1e5d0 <__assert_fail@plt+0xce70>
   1dfc0:	ldr	r1, [lr]
   1dfc4:	str	r1, [r0]
   1dfc8:	mov	r1, #0
   1dfcc:	str	r0, [lr]
   1dfd0:	str	r1, [r8]
   1dfd4:	b	1defc <__assert_fail@plt+0xc79c>
   1dfd8:	mov	r7, #0
   1dfdc:	str	r7, [fp, #-80]	; 0xffffffb0
   1dfe0:	b	1dfec <__assert_fail@plt+0xc88c>
   1dfe4:	mov	r7, #0
   1dfe8:	str	r7, [r5]
   1dfec:	ldr	ip, [sp, #44]	; 0x2c
   1dff0:	ldr	lr, [sp, #20]
   1dff4:	b	1de9c <__assert_fail@plt+0xc73c>
   1dff8:	mov	sl, r6
   1dffc:	ldr	r5, [sp, #32]
   1e000:	ldr	r6, [sp, #24]
   1e004:	cmp	r5, #0
   1e008:	beq	1e05c <__assert_fail@plt+0xc8fc>
   1e00c:	ldr	r1, [r8]
   1e010:	cmp	r1, #31
   1e014:	beq	1e174 <__assert_fail@plt+0xca14>
   1e018:	ldr	r0, [lr]
   1e01c:	add	r2, r1, #1
   1e020:	add	r7, r0, r1, lsl #5
   1e024:	mov	r0, #0
   1e028:	mov	r1, #16
   1e02c:	str	r2, [r8]
   1e030:	str	r0, [r7, #4]!
   1e034:	stmib	r7, {r5, sl}
   1e038:	str	r0, [r7, #12]
   1e03c:	str	r0, [r7, #16]
   1e040:	str	r0, [r7, #20]
   1e044:	str	r1, [r7, #24]
   1e048:	mvn	r1, #0
   1e04c:	str	r1, [r7, #28]
   1e050:	str	r7, [r5]
   1e054:	str	r7, [sl]
   1e058:	b	1e608 <__assert_fail@plt+0xcea8>
   1e05c:	mov	r0, #0
   1e060:	mov	r7, sl
   1e064:	b	1e608 <__assert_fail@plt+0xcea8>
   1e068:	ldr	ip, [sp, #44]	; 0x2c
   1e06c:	b	1e5e8 <__assert_fail@plt+0xce88>
   1e070:	ldr	ip, [sp, #44]	; 0x2c
   1e074:	mov	r0, sl
   1e078:	mov	r5, r0
   1e07c:	ldr	r0, [r0, #4]
   1e080:	cmp	r0, #0
   1e084:	bne	1e078 <__assert_fail@plt+0xc918>
   1e088:	ldr	r0, [r5, #8]
   1e08c:	cmp	r0, #0
   1e090:	bne	1e078 <__assert_fail@plt+0xc918>
   1e094:	ldr	r0, [r5, #24]
   1e098:	movw	r1, #255	; 0xff
   1e09c:	movt	r1, #4
   1e0a0:	and	r0, r0, r1
   1e0a4:	cmp	r0, #3
   1e0a8:	beq	1e0e0 <__assert_fail@plt+0xc980>
   1e0ac:	cmp	r0, #6
   1e0b0:	bne	1e0ec <__assert_fail@plt+0xc98c>
   1e0b4:	ldr	r9, [r5, #20]
   1e0b8:	ldr	r0, [r9]
   1e0bc:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e0c0:	ldr	r0, [r9, #4]
   1e0c4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e0c8:	ldr	r0, [r9, #8]
   1e0cc:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e0d0:	ldr	r0, [r9, #12]
   1e0d4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e0d8:	mov	r0, r9
   1e0dc:	b	1e0e4 <__assert_fail@plt+0xc984>
   1e0e0:	ldr	r0, [r5, #20]
   1e0e4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e0e8:	ldr	ip, [sp, #44]	; 0x2c
   1e0ec:	ldr	r1, [r5]
   1e0f0:	cmp	r1, #0
   1e0f4:	beq	1e5e8 <__assert_fail@plt+0xce88>
   1e0f8:	ldr	r0, [r1, #8]
   1e0fc:	cmp	r0, r5
   1e100:	mov	r5, r1
   1e104:	beq	1e094 <__assert_fail@plt+0xc934>
   1e108:	cmp	r0, #0
   1e10c:	mov	r5, r1
   1e110:	beq	1e094 <__assert_fail@plt+0xc934>
   1e114:	b	1e078 <__assert_fail@plt+0xc918>
   1e118:	mov	r5, sl
   1e11c:	str	r9, [sp, #8]
   1e120:	beq	1e41c <__assert_fail@plt+0xccbc>
   1e124:	ldr	r9, [sp, #36]	; 0x24
   1e128:	mov	r0, #2
   1e12c:	ldr	r5, [r9]
   1e130:	mov	sl, r9
   1e134:	b	1e264 <__assert_fail@plt+0xcb04>
   1e138:	mov	r0, #996	; 0x3e4
   1e13c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e140:	ldr	lr, [sp, #20]
   1e144:	ldr	ip, [sp, #44]	; 0x2c
   1e148:	cmp	r0, #0
   1e14c:	beq	1e5d0 <__assert_fail@plt+0xce70>
   1e150:	ldr	r1, [lr]
   1e154:	ldr	r5, [sp, #48]	; 0x30
   1e158:	str	r1, [r0]
   1e15c:	mov	r1, #0
   1e160:	str	r0, [lr]
   1e164:	str	r1, [r8]
   1e168:	b	1dcfc <__assert_fail@plt+0xc59c>
   1e16c:	ldr	sl, [sp, #52]	; 0x34
   1e170:	b	1dafc <__assert_fail@plt+0xc39c>
   1e174:	mov	r0, #996	; 0x3e4
   1e178:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e17c:	cmp	r0, #0
   1e180:	beq	1e1dc <__assert_fail@plt+0xca7c>
   1e184:	ldr	r2, [sp, #20]
   1e188:	ldr	ip, [sp, #44]	; 0x2c
   1e18c:	ldr	r1, [r2]
   1e190:	str	r1, [r0]
   1e194:	mov	r1, #0
   1e198:	str	r0, [r2]
   1e19c:	str	r1, [r8]
   1e1a0:	b	1e01c <__assert_fail@plt+0xc8bc>
   1e1a4:	ldr	r0, [sp, #16]
   1e1a8:	mov	r1, #10
   1e1ac:	b	1e1b8 <__assert_fail@plt+0xca58>
   1e1b0:	ldr	r0, [sp, #16]
   1e1b4:	mov	r1, #15
   1e1b8:	str	r1, [r0]
   1e1bc:	mov	r7, #0
   1e1c0:	b	1e5e8 <__assert_fail@plt+0xce88>
   1e1c4:	ldr	r1, [sp, #16]
   1e1c8:	cmp	r0, #2
   1e1cc:	mov	r0, #10
   1e1d0:	movweq	r0, #9
   1e1d4:	str	r0, [r1]
   1e1d8:	b	1dad0 <__assert_fail@plt+0xc370>
   1e1dc:	ldr	ip, [sp, #44]	; 0x2c
   1e1e0:	b	1dad0 <__assert_fail@plt+0xc370>
   1e1e4:	mov	r0, #996	; 0x3e4
   1e1e8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e1ec:	cmp	r0, #0
   1e1f0:	beq	1e244 <__assert_fail@plt+0xcae4>
   1e1f4:	ldr	lr, [sp, #20]
   1e1f8:	ldr	ip, [sp, #44]	; 0x2c
   1e1fc:	ldr	r1, [lr]
   1e200:	str	r1, [r0]
   1e204:	mov	r1, #0
   1e208:	str	r0, [lr]
   1e20c:	str	r1, [r8]
   1e210:	b	1e278 <__assert_fail@plt+0xcb18>
   1e214:	mov	r0, #996	; 0x3e4
   1e218:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e21c:	ldr	lr, [sp, #20]
   1e220:	ldr	ip, [sp, #44]	; 0x2c
   1e224:	cmp	r0, #0
   1e228:	beq	1e5d0 <__assert_fail@plt+0xce70>
   1e22c:	ldr	r1, [lr]
   1e230:	str	r1, [r0]
   1e234:	mov	r1, #0
   1e238:	str	r0, [lr]
   1e23c:	str	r1, [r8]
   1e240:	b	1e3c0 <__assert_fail@plt+0xcc60>
   1e244:	mov	sl, #0
   1e248:	str	sl, [fp, #-80]	; 0xffffffb0
   1e24c:	b	1e258 <__assert_fail@plt+0xcaf8>
   1e250:	mov	sl, #0
   1e254:	str	sl, [r6]
   1e258:	ldr	ip, [sp, #44]	; 0x2c
   1e25c:	ldr	lr, [sp, #20]
   1e260:	b	1e3b0 <__assert_fail@plt+0xcc50>
   1e264:	ldr	r1, [r8]
   1e268:	str	r0, [sp, #52]	; 0x34
   1e26c:	cmp	r1, #31
   1e270:	beq	1e1e4 <__assert_fail@plt+0xca84>
   1e274:	ldr	r0, [lr]
   1e278:	add	r3, r1, #1
   1e27c:	add	r7, r0, r1, lsl #5
   1e280:	add	r2, sl, #20
   1e284:	sub	r6, fp, #80	; 0x50
   1e288:	str	r3, [r8]
   1e28c:	str	r4, [r7, #4]!
   1e290:	str	r4, [r7, #4]
   1e294:	str	r4, [r7, #8]
   1e298:	ldm	r2, {r0, r1}
   1e29c:	mvn	r2, #0
   1e2a0:	str	r4, [r7, #12]
   1e2a4:	str	r4, [r7, #16]
   1e2a8:	str	r2, [r7, #28]
   1e2ac:	str	r0, [r7, #20]
   1e2b0:	bic	r0, r1, #786432	; 0xc0000
   1e2b4:	str	r0, [r7, #24]
   1e2b8:	mov	r0, r7
   1e2bc:	str	r7, [fp, #-80]	; 0xffffffb0
   1e2c0:	b	1e304 <__assert_fail@plt+0xcba4>
   1e2c4:	add	r3, r1, #1
   1e2c8:	add	r0, r0, r1, lsl #5
   1e2cc:	add	r2, sl, #20
   1e2d0:	str	r3, [r8]
   1e2d4:	str	r4, [r0, #4]!
   1e2d8:	mvn	r3, #0
   1e2dc:	str	r4, [r0, #4]
   1e2e0:	str	r4, [r0, #8]
   1e2e4:	ldm	r2, {r1, r2}
   1e2e8:	str	r4, [r0, #12]
   1e2ec:	str	r4, [r0, #16]
   1e2f0:	str	r3, [r0, #28]
   1e2f4:	str	r1, [r0, #20]
   1e2f8:	bic	r1, r2, #786432	; 0xc0000
   1e2fc:	str	r1, [r0, #24]
   1e300:	str	r0, [r6]
   1e304:	str	r5, [r0]
   1e308:	ldr	r0, [r6]
   1e30c:	ldr	r1, [r0, #24]
   1e310:	orr	r1, r1, #262144	; 0x40000
   1e314:	str	r1, [r0, #24]
   1e318:	ldr	r0, [sl, #4]
   1e31c:	ldr	r5, [r6]
   1e320:	cmp	r0, #0
   1e324:	beq	1e334 <__assert_fail@plt+0xcbd4>
   1e328:	add	r6, r5, #4
   1e32c:	mov	sl, r0
   1e330:	b	1e368 <__assert_fail@plt+0xcc08>
   1e334:	mov	r1, #0
   1e338:	mov	r0, sl
   1e33c:	ldr	sl, [sl, #8]
   1e340:	cmp	sl, r1
   1e344:	cmpne	sl, #0
   1e348:	bne	1e364 <__assert_fail@plt+0xcc04>
   1e34c:	ldr	sl, [r0]
   1e350:	ldr	r5, [r5]
   1e354:	mov	r1, r0
   1e358:	cmp	sl, #0
   1e35c:	bne	1e338 <__assert_fail@plt+0xcbd8>
   1e360:	b	1e3ac <__assert_fail@plt+0xcc4c>
   1e364:	add	r6, r5, #8
   1e368:	ldr	r1, [r8]
   1e36c:	cmp	r1, #31
   1e370:	beq	1e37c <__assert_fail@plt+0xcc1c>
   1e374:	ldr	r0, [lr]
   1e378:	b	1e2c4 <__assert_fail@plt+0xcb64>
   1e37c:	mov	r0, #996	; 0x3e4
   1e380:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e384:	cmp	r0, #0
   1e388:	beq	1e250 <__assert_fail@plt+0xcaf0>
   1e38c:	ldr	lr, [sp, #20]
   1e390:	ldr	ip, [sp, #44]	; 0x2c
   1e394:	ldr	r1, [lr]
   1e398:	str	r1, [r0]
   1e39c:	mov	r1, #0
   1e3a0:	str	r0, [lr]
   1e3a4:	str	r1, [r8]
   1e3a8:	b	1e2c4 <__assert_fail@plt+0xcb64>
   1e3ac:	mov	sl, r7
   1e3b0:	ldr	r1, [r8]
   1e3b4:	cmp	r1, #31
   1e3b8:	beq	1e214 <__assert_fail@plt+0xcab4>
   1e3bc:	ldr	r0, [lr]
   1e3c0:	add	r2, r1, #1
   1e3c4:	add	r1, r0, r1, lsl #5
   1e3c8:	mov	r0, #16
   1e3cc:	cmp	sl, #0
   1e3d0:	str	r2, [r8]
   1e3d4:	str	r4, [r1, #4]!
   1e3d8:	stmib	r1, {r9, sl}
   1e3dc:	str	r4, [r1, #12]
   1e3e0:	str	r4, [r1, #16]
   1e3e4:	str	r4, [r1, #20]
   1e3e8:	str	r0, [r1, #24]
   1e3ec:	mvn	r0, #0
   1e3f0:	str	r0, [r1, #28]
   1e3f4:	str	r1, [r9]
   1e3f8:	beq	1e5d0 <__assert_fail@plt+0xce70>
   1e3fc:	mov	r5, r1
   1e400:	str	r1, [sl]
   1e404:	ldr	r2, [sp, #52]	; 0x34
   1e408:	ldr	r1, [sp, #8]
   1e40c:	mov	r9, r5
   1e410:	add	r0, r2, #1
   1e414:	cmp	r2, r1
   1e418:	blt	1e264 <__assert_fail@plt+0xcb04>
   1e41c:	ldr	r1, [sp, #48]	; 0x30
   1e420:	ldr	r2, [sp, #8]
   1e424:	mov	r0, #0
   1e428:	cmp	r2, r1
   1e42c:	bne	1e43c <__assert_fail@plt+0xccdc>
   1e430:	ldr	r6, [sp, #24]
   1e434:	mov	r7, r5
   1e438:	b	1e608 <__assert_fail@plt+0xcea8>
   1e43c:	mov	r9, sl
   1e440:	ldr	r1, [r8]
   1e444:	str	r5, [sp, #32]
   1e448:	ldr	r6, [r9], #20
   1e44c:	cmp	r1, #31
   1e450:	beq	1e590 <__assert_fail@plt+0xce30>
   1e454:	ldr	r0, [lr]
   1e458:	add	r2, r1, #1
   1e45c:	add	r7, r0, r1, lsl #5
   1e460:	str	r2, [r8]
   1e464:	str	r4, [r7, #4]!
   1e468:	mvn	r2, #0
   1e46c:	str	r4, [r7, #4]
   1e470:	str	r4, [r7, #8]
   1e474:	ldm	r9, {r0, r1}
   1e478:	str	r4, [r7, #12]
   1e47c:	str	r4, [r7, #16]
   1e480:	str	r2, [r7, #28]
   1e484:	sub	r9, fp, #80	; 0x50
   1e488:	str	r0, [r7, #20]
   1e48c:	bic	r0, r1, #786432	; 0xc0000
   1e490:	str	r0, [r7, #24]
   1e494:	mov	r0, r7
   1e498:	str	r7, [fp, #-80]	; 0xffffffb0
   1e49c:	b	1e4e0 <__assert_fail@plt+0xcd80>
   1e4a0:	add	r3, r1, #1
   1e4a4:	add	r0, r0, r1, lsl #5
   1e4a8:	add	r2, sl, #20
   1e4ac:	str	r3, [r8]
   1e4b0:	str	r4, [r0, #4]!
   1e4b4:	mvn	r3, #0
   1e4b8:	str	r4, [r0, #4]
   1e4bc:	str	r4, [r0, #8]
   1e4c0:	ldm	r2, {r1, r2}
   1e4c4:	str	r4, [r0, #12]
   1e4c8:	str	r4, [r0, #16]
   1e4cc:	str	r3, [r0, #28]
   1e4d0:	str	r1, [r0, #20]
   1e4d4:	bic	r1, r2, #786432	; 0xc0000
   1e4d8:	str	r1, [r0, #24]
   1e4dc:	str	r0, [r9]
   1e4e0:	str	r6, [r0]
   1e4e4:	ldr	r0, [r9]
   1e4e8:	ldr	r1, [r0, #24]
   1e4ec:	orr	r1, r1, #262144	; 0x40000
   1e4f0:	str	r1, [r0, #24]
   1e4f4:	ldr	r0, [sl, #4]
   1e4f8:	ldr	r6, [r9]
   1e4fc:	cmp	r0, #0
   1e500:	beq	1e510 <__assert_fail@plt+0xcdb0>
   1e504:	add	r9, r6, #4
   1e508:	mov	sl, r0
   1e50c:	b	1e54c <__assert_fail@plt+0xcdec>
   1e510:	ldr	r5, [sp, #48]	; 0x30
   1e514:	ldr	r9, [sp, #8]
   1e518:	mov	r1, #0
   1e51c:	mov	r0, sl
   1e520:	ldr	sl, [sl, #8]
   1e524:	cmp	sl, r1
   1e528:	cmpne	sl, #0
   1e52c:	bne	1e548 <__assert_fail@plt+0xcde8>
   1e530:	ldr	sl, [r0]
   1e534:	ldr	r6, [r6]
   1e538:	mov	r1, r0
   1e53c:	cmp	sl, #0
   1e540:	bne	1e51c <__assert_fail@plt+0xcdbc>
   1e544:	b	1dc68 <__assert_fail@plt+0xc508>
   1e548:	add	r9, r6, #8
   1e54c:	ldr	r1, [r8]
   1e550:	cmp	r1, #31
   1e554:	beq	1e560 <__assert_fail@plt+0xce00>
   1e558:	ldr	r0, [lr]
   1e55c:	b	1e4a0 <__assert_fail@plt+0xcd40>
   1e560:	mov	r0, #996	; 0x3e4
   1e564:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e568:	cmp	r0, #0
   1e56c:	beq	1e5c8 <__assert_fail@plt+0xce68>
   1e570:	ldr	lr, [sp, #20]
   1e574:	ldr	ip, [sp, #44]	; 0x2c
   1e578:	ldr	r1, [lr]
   1e57c:	str	r1, [r0]
   1e580:	mov	r1, #0
   1e584:	str	r0, [lr]
   1e588:	str	r1, [r8]
   1e58c:	b	1e4a0 <__assert_fail@plt+0xcd40>
   1e590:	mov	r0, #996	; 0x3e4
   1e594:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e598:	cmp	r0, #0
   1e59c:	beq	1e5c0 <__assert_fail@plt+0xce60>
   1e5a0:	ldr	lr, [sp, #20]
   1e5a4:	ldr	ip, [sp, #44]	; 0x2c
   1e5a8:	ldr	r1, [lr]
   1e5ac:	str	r1, [r0]
   1e5b0:	mov	r1, #0
   1e5b4:	str	r0, [lr]
   1e5b8:	str	r1, [r8]
   1e5bc:	b	1e458 <__assert_fail@plt+0xccf8>
   1e5c0:	str	r4, [fp, #-80]	; 0xffffffb0
   1e5c4:	b	1e5cc <__assert_fail@plt+0xce6c>
   1e5c8:	str	r4, [r9]
   1e5cc:	ldr	ip, [sp, #44]	; 0x2c
   1e5d0:	ldr	r0, [sp, #16]
   1e5d4:	ldr	r6, [sp, #24]
   1e5d8:	ldr	sl, [sp, #36]	; 0x24
   1e5dc:	mov	r1, #12
   1e5e0:	mov	r7, #0
   1e5e4:	str	r1, [r0]
   1e5e8:	clz	r0, r7
   1e5ec:	cmp	r7, #0
   1e5f0:	lsr	r0, r0, #5
   1e5f4:	bne	1e608 <__assert_fail@plt+0xcea8>
   1e5f8:	ldr	r1, [sp, #16]
   1e5fc:	ldr	r1, [r1]
   1e600:	cmp	r1, #0
   1e604:	bne	1e6f0 <__assert_fail@plt+0xcf90>
   1e608:	ldr	r1, [sp, #28]
   1e60c:	cmp	r1, #0
   1e610:	beq	1d9c0 <__assert_fail@plt+0xc260>
   1e614:	ldrb	r1, [ip, #4]
   1e618:	cmp	r1, #23
   1e61c:	cmpne	r1, #11
   1e620:	bne	1d9c0 <__assert_fail@plt+0xc260>
   1e624:	ldr	r8, [sp, #16]
   1e628:	movw	r6, #255	; 0xff
   1e62c:	cmp	r0, #0
   1e630:	movt	r6, #4
   1e634:	bne	1e6cc <__assert_fail@plt+0xcf6c>
   1e638:	mov	r5, r7
   1e63c:	ldr	r7, [r7, #4]
   1e640:	cmp	r7, #0
   1e644:	bne	1e638 <__assert_fail@plt+0xced8>
   1e648:	ldr	r7, [r5, #8]
   1e64c:	cmp	r7, #0
   1e650:	bne	1e638 <__assert_fail@plt+0xced8>
   1e654:	ldr	r0, [r5, #24]
   1e658:	and	r0, r0, r6
   1e65c:	cmp	r0, #3
   1e660:	beq	1e698 <__assert_fail@plt+0xcf38>
   1e664:	cmp	r0, #6
   1e668:	bne	1e6a0 <__assert_fail@plt+0xcf40>
   1e66c:	ldr	r4, [r5, #20]
   1e670:	ldr	r0, [r4]
   1e674:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e678:	ldr	r0, [r4, #4]
   1e67c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e680:	ldr	r0, [r4, #8]
   1e684:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e688:	ldr	r0, [r4, #12]
   1e68c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e690:	mov	r0, r4
   1e694:	b	1e69c <__assert_fail@plt+0xcf3c>
   1e698:	ldr	r0, [r5, #20]
   1e69c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e6a0:	ldr	r0, [r5]
   1e6a4:	cmp	r0, #0
   1e6a8:	beq	1e6cc <__assert_fail@plt+0xcf6c>
   1e6ac:	ldr	r7, [r0, #8]
   1e6b0:	cmp	r7, r5
   1e6b4:	mov	r5, r0
   1e6b8:	beq	1e654 <__assert_fail@plt+0xcef4>
   1e6bc:	cmp	r7, #0
   1e6c0:	mov	r5, r0
   1e6c4:	beq	1e654 <__assert_fail@plt+0xcef4>
   1e6c8:	b	1e638 <__assert_fail@plt+0xced8>
   1e6cc:	mov	r0, #13
   1e6d0:	mov	sl, #0
   1e6d4:	str	r0, [r8]
   1e6d8:	mov	r0, sl
   1e6dc:	sub	sp, fp, #28
   1e6e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6e4:	mov	r7, r4
   1e6e8:	mov	r6, r9
   1e6ec:	b	1d974 <__assert_fail@plt+0xc214>
   1e6f0:	cmp	sl, #0
   1e6f4:	beq	1cc38 <__assert_fail@plt+0xb4d8>
   1e6f8:	movw	r6, #255	; 0xff
   1e6fc:	movt	r6, #4
   1e700:	mov	r5, sl
   1e704:	ldr	sl, [sl, #4]
   1e708:	cmp	sl, #0
   1e70c:	bne	1e700 <__assert_fail@plt+0xcfa0>
   1e710:	ldr	sl, [r5, #8]
   1e714:	cmp	sl, #0
   1e718:	bne	1e700 <__assert_fail@plt+0xcfa0>
   1e71c:	ldr	r0, [r5, #24]
   1e720:	and	r0, r0, r6
   1e724:	cmp	r0, #3
   1e728:	beq	1e760 <__assert_fail@plt+0xd000>
   1e72c:	cmp	r0, #6
   1e730:	bne	1e768 <__assert_fail@plt+0xd008>
   1e734:	ldr	r4, [r5, #20]
   1e738:	ldr	r0, [r4]
   1e73c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e740:	ldr	r0, [r4, #4]
   1e744:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e748:	ldr	r0, [r4, #8]
   1e74c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e750:	ldr	r0, [r4, #12]
   1e754:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e758:	mov	r0, r4
   1e75c:	b	1e764 <__assert_fail@plt+0xd004>
   1e760:	ldr	r0, [r5, #20]
   1e764:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e768:	ldr	r0, [r5]
   1e76c:	cmp	r0, #0
   1e770:	beq	1cc38 <__assert_fail@plt+0xb4d8>
   1e774:	ldr	sl, [r0, #8]
   1e778:	cmp	sl, r5
   1e77c:	mov	r5, r0
   1e780:	beq	1e71c <__assert_fail@plt+0xcfbc>
   1e784:	cmp	sl, #0
   1e788:	mov	r5, r0
   1e78c:	beq	1e71c <__assert_fail@plt+0xcfbc>
   1e790:	b	1e700 <__assert_fail@plt+0xcfa0>
   1e794:	cmp	r0, #2
   1e798:	blt	1e7b4 <__assert_fail@plt+0xd054>
   1e79c:	ldr	r0, [sl, #36]	; 0x24
   1e7a0:	cmp	r0, #0
   1e7a4:	bne	1d61c <__assert_fail@plt+0xbebc>
   1e7a8:	ldrb	r0, [sl, #16]
   1e7ac:	tst	r0, #1
   1e7b0:	bne	1d61c <__assert_fail@plt+0xbebc>
   1e7b4:	ldr	r0, [sl]
   1e7b8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e7bc:	ldr	r0, [sl, #4]
   1e7c0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e7c4:	ldr	r0, [sl, #8]
   1e7c8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e7cc:	ldr	r0, [sl, #12]
   1e7d0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e7d4:	mov	r0, sl
   1e7d8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e7dc:	ldr	r1, [r8, #64]	; 0x40
   1e7e0:	cmp	r1, #31
   1e7e4:	beq	1ecc0 <__assert_fail@plt+0xd560>
   1e7e8:	ldr	r0, [r8, #56]	; 0x38
   1e7ec:	add	r2, r1, #1
   1e7f0:	add	r0, r0, r1, lsl #5
   1e7f4:	ldr	lr, [sp, #44]	; 0x2c
   1e7f8:	mov	r1, #3
   1e7fc:	vmov.i32	q8, #0	; 0x00000000
   1e800:	str	r2, [r8, #64]	; 0x40
   1e804:	mov	r2, #0
   1e808:	add	r7, r0, #4
   1e80c:	str	r2, [r0, #20]
   1e810:	str	r4, [r0, #24]
   1e814:	str	r1, [r0, #28]
   1e818:	mov	r0, #28
   1e81c:	mov	r1, r7
   1e820:	vst1.32	{d16-d17}, [r1], r0
   1e824:	mvn	r0, #0
   1e828:	str	r0, [r1]
   1e82c:	b	1d974 <__assert_fail@plt+0xc214>
   1e830:	mov	r0, #996	; 0x3e4
   1e834:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e838:	cmp	r0, #0
   1e83c:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1e840:	ldr	r1, [r8, #56]	; 0x38
   1e844:	ldr	lr, [sp, #44]	; 0x2c
   1e848:	str	r1, [r0]
   1e84c:	mov	r1, #0
   1e850:	str	r1, [r8, #64]	; 0x40
   1e854:	str	r0, [r8, #56]	; 0x38
   1e858:	b	1ca88 <__assert_fail@plt+0xb328>
   1e85c:	mov	r9, r0
   1e860:	b	1e91c <__assert_fail@plt+0xd1bc>
   1e864:	mov	r9, #7
   1e868:	b	1e91c <__assert_fail@plt+0xd1bc>
   1e86c:	mov	r0, #2
   1e870:	b	1ecf8 <__assert_fail@plt+0xd598>
   1e874:	mov	r0, #6
   1e878:	b	1d878 <__assert_fail@plt+0xc118>
   1e87c:	mov	r0, #996	; 0x3e4
   1e880:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e884:	cmp	r0, #0
   1e888:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1e88c:	ldr	r1, [r8, #56]	; 0x38
   1e890:	ldr	lr, [sp, #44]	; 0x2c
   1e894:	str	r1, [r0]
   1e898:	mov	r1, #0
   1e89c:	str	r1, [r8, #64]	; 0x40
   1e8a0:	str	r0, [r8, #56]	; 0x38
   1e8a4:	b	1cb60 <__assert_fail@plt+0xb400>
   1e8a8:	mov	r0, #996	; 0x3e4
   1e8ac:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e8b0:	cmp	r0, #0
   1e8b4:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1e8b8:	ldr	r1, [r8, #56]	; 0x38
   1e8bc:	ldr	r3, [sp, #24]
   1e8c0:	ldr	lr, [sp, #44]	; 0x2c
   1e8c4:	str	r1, [r0]
   1e8c8:	mov	r1, #0
   1e8cc:	str	r1, [r8, #64]	; 0x40
   1e8d0:	str	r0, [r8, #56]	; 0x38
   1e8d4:	b	1cd1c <__assert_fail@plt+0xb5bc>
   1e8d8:	mov	r0, r4
   1e8dc:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e8e0:	mov	r0, r5
   1e8e4:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e8e8:	b	1d874 <__assert_fail@plt+0xc114>
   1e8ec:	mov	r0, #996	; 0x3e4
   1e8f0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e8f4:	cmp	r0, #0
   1e8f8:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1e8fc:	ldr	r1, [r8, #56]	; 0x38
   1e900:	ldr	lr, [sp, #44]	; 0x2c
   1e904:	str	r1, [r0]
   1e908:	mov	r1, #0
   1e90c:	str	r1, [r8, #64]	; 0x40
   1e910:	str	r0, [r8, #56]	; 0x38
   1e914:	b	1cb04 <__assert_fail@plt+0xb3a4>
   1e918:	mov	r9, #3
   1e91c:	ldr	r0, [sp, #16]
   1e920:	ldr	r4, [sp, #52]	; 0x34
   1e924:	ldr	sl, [sp, #48]	; 0x30
   1e928:	str	r9, [r0]
   1e92c:	ldr	r6, [sp, #40]	; 0x28
   1e930:	mov	r0, r4
   1e934:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e938:	ldr	r0, [sl]
   1e93c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e940:	ldr	r0, [sl, #4]
   1e944:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e948:	ldr	r0, [sl, #8]
   1e94c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e950:	ldr	r0, [sl, #12]
   1e954:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e958:	mov	r0, sl
   1e95c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1e960:	ldr	r0, [sp, #16]
   1e964:	mov	r7, #0
   1e968:	mov	sl, #0
   1e96c:	ldr	r0, [r0]
   1e970:	b	1ca2c <__assert_fail@plt+0xb2cc>
   1e974:	mov	r0, #996	; 0x3e4
   1e978:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e97c:	cmp	r0, #0
   1e980:	beq	1ecf4 <__assert_fail@plt+0xd594>
   1e984:	ldr	r1, [r8, #56]	; 0x38
   1e988:	ldr	lr, [sp, #44]	; 0x2c
   1e98c:	str	r1, [r0]
   1e990:	mov	r1, #0
   1e994:	str	r1, [r8, #64]	; 0x40
   1e998:	str	r0, [r8, #56]	; 0x38
   1e99c:	b	1d638 <__assert_fail@plt+0xbed8>
   1e9a0:	mov	r0, #996	; 0x3e4
   1e9a4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e9a8:	cmp	r0, #0
   1e9ac:	beq	1ecf4 <__assert_fail@plt+0xd594>
   1e9b0:	ldr	r1, [r8, #56]	; 0x38
   1e9b4:	ldr	lr, [sp, #44]	; 0x2c
   1e9b8:	str	r1, [r0]
   1e9bc:	mov	r1, #0
   1e9c0:	str	r1, [r8, #64]	; 0x40
   1e9c4:	str	r0, [r8, #56]	; 0x38
   1e9c8:	b	1d6e4 <__assert_fail@plt+0xbf84>
   1e9cc:	mov	r0, #996	; 0x3e4
   1e9d0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1e9d4:	cmp	r0, #0
   1e9d8:	beq	1ecf4 <__assert_fail@plt+0xd594>
   1e9dc:	ldr	r1, [r8, #56]	; 0x38
   1e9e0:	ldr	lr, [sp, #44]	; 0x2c
   1e9e4:	str	r1, [r0]
   1e9e8:	mov	r1, #0
   1e9ec:	str	r1, [r8, #64]	; 0x40
   1e9f0:	str	r0, [r8, #56]	; 0x38
   1e9f4:	b	1d730 <__assert_fail@plt+0xbfd0>
   1e9f8:	mov	r0, #996	; 0x3e4
   1e9fc:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ea00:	cmp	r0, #0
   1ea04:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1ea08:	ldr	r1, [r8, #56]	; 0x38
   1ea0c:	ldr	lr, [sp, #44]	; 0x2c
   1ea10:	mov	r6, sl
   1ea14:	str	r1, [r0]
   1ea18:	mov	r1, #0
   1ea1c:	str	r1, [r8, #64]	; 0x40
   1ea20:	str	r0, [r8, #56]	; 0x38
   1ea24:	b	1d930 <__assert_fail@plt+0xc1d0>
   1ea28:	mov	r0, r4
   1ea2c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ea30:	ldr	lr, [sp, #44]	; 0x2c
   1ea34:	mov	r7, r9
   1ea38:	b	1d974 <__assert_fail@plt+0xc214>
   1ea3c:	mov	r0, #996	; 0x3e4
   1ea40:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ea44:	cmp	r0, #0
   1ea48:	beq	1ebdc <__assert_fail@plt+0xd47c>
   1ea4c:	ldr	r1, [r8, #56]	; 0x38
   1ea50:	ldr	r7, [sp, #24]
   1ea54:	ldr	lr, [sp, #44]	; 0x2c
   1ea58:	mov	sl, #0
   1ea5c:	str	r1, [r0]
   1ea60:	mov	r1, #0
   1ea64:	str	r1, [r8, #64]	; 0x40
   1ea68:	str	r0, [r8, #56]	; 0x38
   1ea6c:	b	1d7e0 <__assert_fail@plt+0xc080>
   1ea70:	mov	r0, #996	; 0x3e4
   1ea74:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ea78:	ldr	lr, [sp, #44]	; 0x2c
   1ea7c:	cmp	r0, #0
   1ea80:	beq	1d874 <__assert_fail@plt+0xc114>
   1ea84:	ldr	r1, [r8, #56]	; 0x38
   1ea88:	str	r1, [r0]
   1ea8c:	mov	r1, #0
   1ea90:	str	r1, [r8, #64]	; 0x40
   1ea94:	str	r0, [r8, #56]	; 0x38
   1ea98:	b	1d82c <__assert_fail@plt+0xc0cc>
   1ea9c:	mov	r0, #996	; 0x3e4
   1eaa0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1eaa4:	cmp	r0, #0
   1eaa8:	beq	1ec9c <__assert_fail@plt+0xd53c>
   1eaac:	ldr	r1, [r8, #56]	; 0x38
   1eab0:	ldr	r7, [sp, #24]
   1eab4:	ldr	lr, [sp, #44]	; 0x2c
   1eab8:	mov	sl, #0
   1eabc:	str	r1, [r0]
   1eac0:	mov	r1, #0
   1eac4:	str	r1, [r8, #64]	; 0x40
   1eac8:	str	r0, [r8, #56]	; 0x38
   1eacc:	b	1ccc4 <__assert_fail@plt+0xb564>
   1ead0:	mov	r0, #996	; 0x3e4
   1ead4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ead8:	cmp	r0, #0
   1eadc:	beq	1eca8 <__assert_fail@plt+0xd548>
   1eae0:	ldr	r1, [r8, #56]	; 0x38
   1eae4:	ldr	r7, [sp, #24]
   1eae8:	ldr	lr, [sp, #44]	; 0x2c
   1eaec:	mov	sl, #0
   1eaf0:	str	r1, [r0]
   1eaf4:	mov	r1, #0
   1eaf8:	str	r1, [r8, #64]	; 0x40
   1eafc:	str	r0, [r8, #56]	; 0x38
   1eb00:	b	1d788 <__assert_fail@plt+0xc028>
   1eb04:	mov	r0, #996	; 0x3e4
   1eb08:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1eb0c:	cmp	r0, #0
   1eb10:	beq	1eb34 <__assert_fail@plt+0xd3d4>
   1eb14:	ldr	r1, [r8, #56]	; 0x38
   1eb18:	ldr	r7, [sp, #24]
   1eb1c:	ldr	lr, [sp, #44]	; 0x2c
   1eb20:	str	r1, [r0]
   1eb24:	mov	r1, #0
   1eb28:	str	r1, [r8, #64]	; 0x40
   1eb2c:	str	r0, [r8, #56]	; 0x38
   1eb30:	b	1d898 <__assert_fail@plt+0xc138>
   1eb34:	mov	r0, #12
   1eb38:	ldr	r1, [sp, #16]
   1eb3c:	mov	sl, #0
   1eb40:	str	r0, [r1]
   1eb44:	b	1e6d8 <__assert_fail@plt+0xcf78>
   1eb48:	mov	r4, #0
   1eb4c:	mov	r9, #0
   1eb50:	b	1eb5c <__assert_fail@plt+0xd3fc>
   1eb54:	mov	r9, #4
   1eb58:	mov	r4, #128	; 0x80
   1eb5c:	bl	11610 <__ctype_b_loc@plt>
   1eb60:	ldr	r0, [r0]
   1eb64:	ldr	r7, [sp, #24]
   1eb68:	ldr	lr, [sp, #44]	; 0x2c
   1eb6c:	mov	r1, #1
   1eb70:	mov	sl, #0
   1eb74:	add	r5, r0, r4, lsl #1
   1eb78:	add	r0, r8, r9, lsl #2
   1eb7c:	mov	ip, r6
   1eb80:	mov	r3, #0
   1eb84:	add	r2, r0, #96	; 0x60
   1eb88:	mov	r0, r5
   1eb8c:	add	r6, r4, r3
   1eb90:	cmp	r6, #95	; 0x5f
   1eb94:	beq	1eba4 <__assert_fail@plt+0xd444>
   1eb98:	ldrh	r6, [r0]
   1eb9c:	ands	r6, r6, #8
   1eba0:	beq	1ebb0 <__assert_fail@plt+0xd450>
   1eba4:	ldr	r6, [r2]
   1eba8:	orr	r6, r6, r1, lsl r3
   1ebac:	str	r6, [r2]
   1ebb0:	add	r3, r3, #1
   1ebb4:	add	r0, r0, #2
   1ebb8:	cmp	r3, #32
   1ebbc:	bne	1eb8c <__assert_fail@plt+0xd42c>
   1ebc0:	add	r9, r9, #1
   1ebc4:	add	r5, r5, #64	; 0x40
   1ebc8:	add	r4, r4, #32
   1ebcc:	mov	r6, ip
   1ebd0:	cmp	r9, #8
   1ebd4:	bne	1eb78 <__assert_fail@plt+0xd418>
   1ebd8:	b	1cc94 <__assert_fail@plt+0xb534>
   1ebdc:	ldr	r7, [sp, #24]
   1ebe0:	ldr	lr, [sp, #44]	; 0x2c
   1ebe4:	mov	r6, #0
   1ebe8:	mov	sl, #0
   1ebec:	b	1d81c <__assert_fail@plt+0xc0bc>
   1ebf0:	cmp	r9, #0
   1ebf4:	beq	1ec94 <__assert_fail@plt+0xd534>
   1ebf8:	movw	r5, #255	; 0xff
   1ebfc:	movt	r5, #4
   1ec00:	mov	r6, r9
   1ec04:	ldr	r9, [r9, #4]
   1ec08:	cmp	r9, #0
   1ec0c:	bne	1ec00 <__assert_fail@plt+0xd4a0>
   1ec10:	ldr	r9, [r6, #8]
   1ec14:	cmp	r9, #0
   1ec18:	bne	1ec00 <__assert_fail@plt+0xd4a0>
   1ec1c:	ldr	r0, [r6, #24]
   1ec20:	and	r0, r0, r5
   1ec24:	cmp	r0, #3
   1ec28:	beq	1ec60 <__assert_fail@plt+0xd500>
   1ec2c:	cmp	r0, #6
   1ec30:	bne	1ec68 <__assert_fail@plt+0xd508>
   1ec34:	ldr	r4, [r6, #20]
   1ec38:	ldr	r0, [r4]
   1ec3c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ec40:	ldr	r0, [r4, #4]
   1ec44:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ec48:	ldr	r0, [r4, #8]
   1ec4c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ec50:	ldr	r0, [r4, #12]
   1ec54:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ec58:	mov	r0, r4
   1ec5c:	b	1ec64 <__assert_fail@plt+0xd504>
   1ec60:	ldr	r0, [r6, #20]
   1ec64:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ec68:	ldr	r0, [r6]
   1ec6c:	cmp	r0, #0
   1ec70:	beq	1ec94 <__assert_fail@plt+0xd534>
   1ec74:	ldr	r9, [r0, #8]
   1ec78:	cmp	r9, r6
   1ec7c:	mov	r6, r0
   1ec80:	beq	1ec1c <__assert_fail@plt+0xd4bc>
   1ec84:	cmp	r9, #0
   1ec88:	mov	r6, r0
   1ec8c:	beq	1ec1c <__assert_fail@plt+0xd4bc>
   1ec90:	b	1ec00 <__assert_fail@plt+0xd4a0>
   1ec94:	mov	r0, #8
   1ec98:	b	1eb38 <__assert_fail@plt+0xd3d8>
   1ec9c:	mov	r5, #0
   1eca0:	mov	r0, #9
   1eca4:	b	1ecb0 <__assert_fail@plt+0xd550>
   1eca8:	mov	r5, #0
   1ecac:	mov	r0, #10
   1ecb0:	ldr	r7, [sp, #24]
   1ecb4:	ldr	lr, [sp, #44]	; 0x2c
   1ecb8:	mov	sl, #0
   1ecbc:	b	1d7c8 <__assert_fail@plt+0xc068>
   1ecc0:	mov	r0, #996	; 0x3e4
   1ecc4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1ecc8:	cmp	r0, #0
   1eccc:	beq	1ecf4 <__assert_fail@plt+0xd594>
   1ecd0:	ldr	r1, [r8, #56]	; 0x38
   1ecd4:	str	r1, [r0]
   1ecd8:	mov	r1, #0
   1ecdc:	str	r1, [r8, #64]	; 0x40
   1ece0:	str	r0, [r8, #56]	; 0x38
   1ece4:	b	1e7ec <__assert_fail@plt+0xd08c>
   1ece8:	ldr	r6, [sp, #40]	; 0x28
   1ecec:	ldr	r4, [sp, #52]	; 0x34
   1ecf0:	ldr	sl, [sp, #48]	; 0x30
   1ecf4:	mov	r0, #12
   1ecf8:	ldr	r1, [sp, #16]
   1ecfc:	str	r0, [r1]
   1ed00:	b	1e930 <__assert_fail@plt+0xd1d0>
   1ed04:	mov	r0, r6
   1ed08:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ed0c:	mov	r0, r9
   1ed10:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ed14:	mov	r9, #12
   1ed18:	b	1e91c <__assert_fail@plt+0xd1bc>
   1ed1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed20:	add	fp, sp, #28
   1ed24:	sub	sp, sp, #12
   1ed28:	mov	r9, r1
   1ed2c:	mov	r6, r0
   1ed30:	mov	r4, #0
   1ed34:	mov	r0, #32
   1ed38:	mov	r1, #1
   1ed3c:	mov	sl, r3
   1ed40:	mov	r5, r2
   1ed44:	str	r4, [sp, #8]
   1ed48:	bl	2a858 <__assert_fail@plt+0x190f8>
   1ed4c:	ldr	r1, [fp, #12]
   1ed50:	cmp	r0, #0
   1ed54:	beq	1f0a4 <__assert_fail@plt+0xd944>
   1ed58:	mov	r7, r0
   1ed5c:	mov	r0, #40	; 0x28
   1ed60:	mov	r1, #1
   1ed64:	bl	2a858 <__assert_fail@plt+0x190f8>
   1ed68:	cmp	r0, #0
   1ed6c:	beq	1efc4 <__assert_fail@plt+0xd864>
   1ed70:	mov	r8, r0
   1ed74:	ldrb	r0, [r0, #16]
   1ed78:	ldr	r1, [fp, #8]
   1ed7c:	mov	r4, #0
   1ed80:	add	r3, sp, #8
   1ed84:	str	r5, [sp]
   1ed88:	mov	r2, r8
   1ed8c:	str	r4, [sp, #4]
   1ed90:	and	r0, r0, #254	; 0xfe
   1ed94:	orr	r0, r0, r1
   1ed98:	mov	r1, r7
   1ed9c:	strb	r0, [r8, #16]
   1eda0:	mov	r0, r9
   1eda4:	bl	1f514 <__assert_fail@plt+0xddb4>
   1eda8:	cmp	r0, #0
   1edac:	bne	1efe0 <__assert_fail@plt+0xd880>
   1edb0:	ldrb	r0, [sl]
   1edb4:	cmp	r0, #0
   1edb8:	beq	1ede4 <__assert_fail@plt+0xd684>
   1edbc:	add	r1, sl, #1
   1edc0:	mov	r2, #1
   1edc4:	ubfx	r3, r0, #5, #3
   1edc8:	and	r0, r0, #31
   1edcc:	ldr	r5, [r7, r3, lsl #2]
   1edd0:	orr	r0, r5, r2, lsl r0
   1edd4:	str	r0, [r7, r3, lsl #2]
   1edd8:	ldrb	r0, [r1], #1
   1eddc:	cmp	r0, #0
   1ede0:	bne	1edc4 <__assert_fail@plt+0xd664>
   1ede4:	ldr	r0, [fp, #8]
   1ede8:	cmp	r0, #0
   1edec:	beq	1ee0c <__assert_fail@plt+0xd6ac>
   1edf0:	vld1.32	{d16-d17}, [r7]
   1edf4:	mov	r0, r7
   1edf8:	vmvn	q8, q8
   1edfc:	vst1.32	{d16-d17}, [r0]!
   1ee00:	vld1.32	{d16-d17}, [r0]
   1ee04:	vmvn	q8, q8
   1ee08:	vst1.32	{d16-d17}, [r0]
   1ee0c:	ldr	r0, [r6, #92]	; 0x5c
   1ee10:	cmp	r0, #2
   1ee14:	blt	1ee90 <__assert_fail@plt+0xd730>
   1ee18:	ldm	r7, {r0, r1, r2, ip}
   1ee1c:	ldr	r5, [r6, #60]	; 0x3c
   1ee20:	ldr	r3, [r5]
   1ee24:	and	r0, r0, r3
   1ee28:	str	r0, [r7]
   1ee2c:	ldr	r0, [r5, #4]
   1ee30:	and	r0, r1, r0
   1ee34:	str	r0, [r7, #4]
   1ee38:	ldr	r0, [r5, #8]
   1ee3c:	and	r0, r2, r0
   1ee40:	str	r0, [r7, #8]
   1ee44:	ldr	r0, [r5, #12]
   1ee48:	and	r0, ip, r0
   1ee4c:	str	r0, [r7, #12]
   1ee50:	ldr	r0, [r7, #16]
   1ee54:	ldr	r1, [r5, #16]
   1ee58:	and	r0, r0, r1
   1ee5c:	str	r0, [r7, #16]
   1ee60:	ldr	r0, [r5, #20]
   1ee64:	ldr	r1, [r7, #20]
   1ee68:	and	r0, r1, r0
   1ee6c:	str	r0, [r7, #20]
   1ee70:	ldr	r0, [r5, #24]
   1ee74:	ldr	r1, [r7, #24]
   1ee78:	and	r0, r1, r0
   1ee7c:	str	r0, [r7, #24]
   1ee80:	ldr	r0, [r5, #28]
   1ee84:	ldr	r1, [r7, #28]
   1ee88:	and	r0, r1, r0
   1ee8c:	str	r0, [r7, #28]
   1ee90:	ldr	r1, [r6, #64]	; 0x40
   1ee94:	cmp	r1, #31
   1ee98:	beq	1f020 <__assert_fail@plt+0xd8c0>
   1ee9c:	ldr	r0, [r6, #56]	; 0x38
   1eea0:	add	r2, r1, #1
   1eea4:	add	r0, r0, r1, lsl #5
   1eea8:	mov	r1, #3
   1eeac:	vmov.i32	q8, #0	; 0x00000000
   1eeb0:	str	r2, [r6, #64]	; 0x40
   1eeb4:	mov	r2, #0
   1eeb8:	add	r5, r0, #4
   1eebc:	str	r2, [r0, #20]
   1eec0:	str	r7, [r0, #24]
   1eec4:	str	r1, [r0, #28]
   1eec8:	mov	r0, #28
   1eecc:	mov	r1, r5
   1eed0:	vst1.32	{d16-d17}, [r1], r0
   1eed4:	mvn	r0, #0
   1eed8:	str	r0, [r1]
   1eedc:	ldr	r0, [r6, #92]	; 0x5c
   1eee0:	cmp	r0, #2
   1eee4:	blt	1ef8c <__assert_fail@plt+0xd82c>
   1eee8:	ldrb	r0, [r6, #88]	; 0x58
   1eeec:	orr	r0, r0, #2
   1eef0:	strb	r0, [r6, #88]	; 0x58
   1eef4:	ldr	r1, [r6, #64]	; 0x40
   1eef8:	cmp	r1, #31
   1eefc:	beq	1f048 <__assert_fail@plt+0xd8e8>
   1ef00:	ldr	r0, [r6, #56]	; 0x38
   1ef04:	add	r0, r0, r1, lsl #5
   1ef08:	add	r2, r1, #1
   1ef0c:	mov	r1, #6
   1ef10:	mov	r4, #0
   1ef14:	vmov.i32	q8, #0	; 0x00000000
   1ef18:	add	r7, r0, #4
   1ef1c:	str	r2, [r6, #64]	; 0x40
   1ef20:	str	r4, [r0, #20]
   1ef24:	str	r8, [r0, #24]
   1ef28:	str	r1, [r0, #28]
   1ef2c:	mov	r0, #28
   1ef30:	mov	r1, r7
   1ef34:	vst1.32	{d16-d17}, [r1], r0
   1ef38:	mvn	r0, #0
   1ef3c:	str	r0, [r1]
   1ef40:	ldr	r1, [r6, #64]	; 0x40
   1ef44:	cmp	r1, #31
   1ef48:	beq	1f0b0 <__assert_fail@plt+0xd950>
   1ef4c:	ldr	r0, [r6, #56]	; 0x38
   1ef50:	add	r2, r1, #1
   1ef54:	add	r4, r0, r1, lsl #5
   1ef58:	mov	r0, #0
   1ef5c:	mov	r1, #10
   1ef60:	str	r2, [r6, #64]	; 0x40
   1ef64:	str	r0, [r4, #4]!
   1ef68:	mvn	r2, #0
   1ef6c:	add	r3, r4, #20
   1ef70:	stmib	r4, {r5, r7}
   1ef74:	str	r0, [r4, #12]
   1ef78:	str	r0, [r4, #16]
   1ef7c:	stm	r3, {r0, r1, r2}
   1ef80:	str	r4, [r5]
   1ef84:	str	r4, [r7]
   1ef88:	b	1efb8 <__assert_fail@plt+0xd858>
   1ef8c:	ldr	r0, [r8]
   1ef90:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ef94:	ldr	r0, [r8, #4]
   1ef98:	bl	141c4 <__assert_fail@plt+0x2a64>
   1ef9c:	ldr	r0, [r8, #8]
   1efa0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1efa4:	ldr	r0, [r8, #12]
   1efa8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1efac:	mov	r0, r8
   1efb0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1efb4:	mov	r4, r5
   1efb8:	mov	r0, r4
   1efbc:	sub	sp, fp, #28
   1efc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1efc4:	mov	r0, r7
   1efc8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1efcc:	ldr	r1, [fp, #12]
   1efd0:	mov	r0, #12
   1efd4:	mov	r4, #0
   1efd8:	str	r0, [r1]
   1efdc:	b	1efb8 <__assert_fail@plt+0xd858>
   1efe0:	mov	r5, r0
   1efe4:	mov	r0, r7
   1efe8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1efec:	ldr	r0, [r8]
   1eff0:	bl	141c4 <__assert_fail@plt+0x2a64>
   1eff4:	ldr	r0, [r8, #4]
   1eff8:	bl	141c4 <__assert_fail@plt+0x2a64>
   1effc:	ldr	r0, [r8, #8]
   1f000:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f004:	ldr	r0, [r8, #12]
   1f008:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f00c:	mov	r0, r8
   1f010:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f014:	ldr	r0, [fp, #12]
   1f018:	str	r5, [r0]
   1f01c:	b	1efb8 <__assert_fail@plt+0xd858>
   1f020:	mov	r0, #996	; 0x3e4
   1f024:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1f028:	cmp	r0, #0
   1f02c:	beq	1f070 <__assert_fail@plt+0xd910>
   1f030:	ldr	r1, [r6, #56]	; 0x38
   1f034:	str	r1, [r0]
   1f038:	mov	r1, #0
   1f03c:	str	r1, [r6, #64]	; 0x40
   1f040:	str	r0, [r6, #56]	; 0x38
   1f044:	b	1eea0 <__assert_fail@plt+0xd740>
   1f048:	mov	r0, #996	; 0x3e4
   1f04c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1f050:	cmp	r0, #0
   1f054:	beq	1f070 <__assert_fail@plt+0xd910>
   1f058:	ldr	r1, [r6, #56]	; 0x38
   1f05c:	str	r1, [r0]
   1f060:	mov	r1, #0
   1f064:	str	r1, [r6, #64]	; 0x40
   1f068:	str	r0, [r6, #56]	; 0x38
   1f06c:	b	1ef04 <__assert_fail@plt+0xd7a4>
   1f070:	mov	r0, r7
   1f074:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f078:	ldr	r0, [r8]
   1f07c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f080:	ldr	r0, [r8, #4]
   1f084:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f088:	ldr	r0, [r8, #8]
   1f08c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f090:	ldr	r0, [r8, #12]
   1f094:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f098:	mov	r0, r8
   1f09c:	bl	141c4 <__assert_fail@plt+0x2a64>
   1f0a0:	ldr	r1, [fp, #12]
   1f0a4:	mov	r0, #12
   1f0a8:	str	r0, [r1]
   1f0ac:	b	1efb8 <__assert_fail@plt+0xd858>
   1f0b0:	mov	r0, #996	; 0x3e4
   1f0b4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1f0b8:	cmp	r0, #0
   1f0bc:	beq	1efb8 <__assert_fail@plt+0xd858>
   1f0c0:	ldr	r1, [r6, #56]	; 0x38
   1f0c4:	str	r1, [r0]
   1f0c8:	mov	r1, #0
   1f0cc:	str	r1, [r6, #64]	; 0x40
   1f0d0:	str	r0, [r6, #56]	; 0x38
   1f0d4:	b	1ef50 <__assert_fail@plt+0xd7f0>
   1f0d8:	push	{fp, lr}
   1f0dc:	mov	fp, sp
   1f0e0:	ldr	ip, [r1, #40]	; 0x28
   1f0e4:	ldr	r3, [r1, #56]	; 0x38
   1f0e8:	cmp	r3, ip
   1f0ec:	ble	1f16c <__assert_fail@plt+0xda0c>
   1f0f0:	ldr	r3, [r1, #4]
   1f0f4:	ldrb	lr, [r3, ip]
   1f0f8:	strb	lr, [r0]
   1f0fc:	ldr	r3, [r1, #80]	; 0x50
   1f100:	cmp	r3, #2
   1f104:	blt	1f128 <__assert_fail@plt+0xd9c8>
   1f108:	ldr	r3, [r1, #28]
   1f10c:	ldr	ip, [r1, #40]	; 0x28
   1f110:	cmp	ip, r3
   1f114:	beq	1f128 <__assert_fail@plt+0xd9c8>
   1f118:	ldr	r3, [r1, #8]
   1f11c:	ldr	r3, [r3, ip, lsl #2]
   1f120:	cmn	r3, #1
   1f124:	beq	1f21c <__assert_fail@plt+0xdabc>
   1f128:	tst	r2, #1
   1f12c:	beq	1f180 <__assert_fail@plt+0xda20>
   1f130:	cmp	lr, #92	; 0x5c
   1f134:	bne	1f180 <__assert_fail@plt+0xda20>
   1f138:	ldr	r2, [r1, #40]	; 0x28
   1f13c:	ldr	r3, [r1, #48]	; 0x30
   1f140:	add	r2, r2, #1
   1f144:	cmp	r2, r3
   1f148:	bge	1f21c <__assert_fail@plt+0xdabc>
   1f14c:	str	r2, [r1, #40]	; 0x28
   1f150:	ldr	r1, [r1, #4]
   1f154:	ldrb	r2, [r1, r2]
   1f158:	mov	r1, #1
   1f15c:	strb	r1, [r0, #4]
   1f160:	strb	r2, [r0]
   1f164:	mov	r0, r1
   1f168:	pop	{fp, pc}
   1f16c:	mov	r1, #2
   1f170:	strb	r1, [r0, #4]
   1f174:	mov	r1, #0
   1f178:	mov	r0, r1
   1f17c:	pop	{fp, pc}
   1f180:	cmp	lr, #92	; 0x5c
   1f184:	bgt	1f1d8 <__assert_fail@plt+0xda78>
   1f188:	cmp	lr, #45	; 0x2d
   1f18c:	beq	1f1f0 <__assert_fail@plt+0xda90>
   1f190:	cmp	lr, #91	; 0x5b
   1f194:	bne	1f21c <__assert_fail@plt+0xdabc>
   1f198:	ldr	r3, [r1, #40]	; 0x28
   1f19c:	ldr	ip, [r1, #48]	; 0x30
   1f1a0:	add	r3, r3, #1
   1f1a4:	cmp	r3, ip
   1f1a8:	bge	1f20c <__assert_fail@plt+0xdaac>
   1f1ac:	ldr	r1, [r1, #4]
   1f1b0:	ldrb	r1, [r1, r3]
   1f1b4:	cmp	r1, #61	; 0x3d
   1f1b8:	strb	r1, [r0]
   1f1bc:	beq	1f22c <__assert_fail@plt+0xdacc>
   1f1c0:	cmp	r1, #58	; 0x3a
   1f1c4:	beq	1f234 <__assert_fail@plt+0xdad4>
   1f1c8:	cmp	r1, #46	; 0x2e
   1f1cc:	bne	1f214 <__assert_fail@plt+0xdab4>
   1f1d0:	mov	r1, #26
   1f1d4:	b	1f240 <__assert_fail@plt+0xdae0>
   1f1d8:	cmp	lr, #93	; 0x5d
   1f1dc:	beq	1f1f8 <__assert_fail@plt+0xda98>
   1f1e0:	cmp	lr, #94	; 0x5e
   1f1e4:	bne	1f21c <__assert_fail@plt+0xdabc>
   1f1e8:	mov	r1, #25
   1f1ec:	b	1f1fc <__assert_fail@plt+0xda9c>
   1f1f0:	mov	r1, #22
   1f1f4:	b	1f1fc <__assert_fail@plt+0xda9c>
   1f1f8:	mov	r1, #21
   1f1fc:	strb	r1, [r0, #4]
   1f200:	mov	r1, #1
   1f204:	mov	r0, r1
   1f208:	pop	{fp, pc}
   1f20c:	mov	r1, #0
   1f210:	strb	r1, [r0]
   1f214:	mov	r1, #91	; 0x5b
   1f218:	strb	r1, [r0]
   1f21c:	mov	r1, #1
   1f220:	strb	r1, [r0, #4]
   1f224:	mov	r0, r1
   1f228:	pop	{fp, pc}
   1f22c:	mov	r1, #28
   1f230:	b	1f240 <__assert_fail@plt+0xdae0>
   1f234:	tst	r2, #4
   1f238:	beq	1f214 <__assert_fail@plt+0xdab4>
   1f23c:	mov	r1, #30
   1f240:	strb	r1, [r0, #4]
   1f244:	mov	r1, #2
   1f248:	mov	r0, r1
   1f24c:	pop	{fp, pc}
   1f250:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f254:	add	fp, sp, #24
   1f258:	sub	sp, sp, #8
   1f25c:	mov	r5, r2
   1f260:	ldr	r2, [r1, #80]	; 0x50
   1f264:	mov	r9, r0
   1f268:	ldr	r0, [r1, #40]	; 0x28
   1f26c:	cmp	r2, #1
   1f270:	beq	1f2e0 <__assert_fail@plt+0xdb80>
   1f274:	ldr	r4, [r1, #28]
   1f278:	add	r2, r0, #1
   1f27c:	cmp	r2, r4
   1f280:	bge	1f2e0 <__assert_fail@plt+0xdb80>
   1f284:	ldr	ip, [r1, #8]
   1f288:	mov	r2, #1
   1f28c:	add	r6, ip, r0, lsl #2
   1f290:	ldr	r7, [r6, r2, lsl #2]
   1f294:	cmn	r7, #1
   1f298:	bne	1f2b0 <__assert_fail@plt+0xdb50>
   1f29c:	add	r2, r2, #1
   1f2a0:	add	r7, r0, r2
   1f2a4:	cmp	r7, r4
   1f2a8:	blt	1f290 <__assert_fail@plt+0xdb30>
   1f2ac:	b	1f2b8 <__assert_fail@plt+0xdb58>
   1f2b0:	cmp	r2, #2
   1f2b4:	bcc	1f2e0 <__assert_fail@plt+0xdb80>
   1f2b8:	mov	r3, #1
   1f2bc:	str	r3, [r9]
   1f2c0:	ldr	r0, [ip, r0, lsl #2]
   1f2c4:	str	r0, [r9, #4]
   1f2c8:	ldr	r0, [r1, #40]	; 0x28
   1f2cc:	add	r0, r0, r2
   1f2d0:	str	r0, [r1, #40]	; 0x28
   1f2d4:	mov	r0, #0
   1f2d8:	sub	sp, fp, #24
   1f2dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2e0:	add	r2, r0, r3
   1f2e4:	str	r2, [r1, #40]	; 0x28
   1f2e8:	ldrb	r6, [r5, #4]
   1f2ec:	sub	r0, r6, #22
   1f2f0:	cmp	r0, #8
   1f2f4:	bhi	1f4fc <__assert_fail@plt+0xdd9c>
   1f2f8:	add	r3, pc, #0
   1f2fc:	ldr	pc, [r3, r0, lsl #2]
   1f300:	ldrdeq	pc, [r1], -r4
   1f304:	strdeq	pc, [r1], -ip
   1f308:	strdeq	pc, [r1], -ip
   1f30c:	strdeq	pc, [r1], -ip
   1f310:	andeq	pc, r1, r4, lsr #6
   1f314:	strdeq	pc, [r1], -ip
   1f318:	andeq	pc, r1, r4, lsr #6
   1f31c:	strdeq	pc, [r1], -ip
   1f320:	andeq	pc, r1, r4, lsr #6
   1f324:	ldr	r3, [r1, #56]	; 0x38
   1f328:	mov	r0, #7
   1f32c:	cmp	r3, r2
   1f330:	ble	1f50c <__assert_fail@plt+0xddac>
   1f334:	ldrb	r3, [r5]
   1f338:	mov	r2, #0
   1f33c:	b	1f348 <__assert_fail@plt+0xdbe8>
   1f340:	ldrb	r6, [r5, #4]
   1f344:	add	r2, r2, #1
   1f348:	uxtb	r7, r6
   1f34c:	cmp	r7, #30
   1f350:	bne	1f360 <__assert_fail@plt+0xdc00>
   1f354:	ldrb	r7, [r1, #75]	; 0x4b
   1f358:	cmp	r7, #0
   1f35c:	bne	1f3b0 <__assert_fail@plt+0xdc50>
   1f360:	ldr	r4, [r1, #40]	; 0x28
   1f364:	ldr	r7, [r1, #4]
   1f368:	add	r6, r4, #1
   1f36c:	str	r6, [r1, #40]	; 0x28
   1f370:	ldrb	r4, [r7, r4]
   1f374:	ldr	r7, [r1, #56]	; 0x38
   1f378:	cmp	r7, r6
   1f37c:	ble	1f50c <__assert_fail@plt+0xddac>
   1f380:	uxtb	r7, r4
   1f384:	cmp	r7, r3
   1f388:	bne	1f39c <__assert_fail@plt+0xdc3c>
   1f38c:	ldr	r7, [r1, #4]
   1f390:	ldrb	r7, [r7, r6]
   1f394:	cmp	r7, #93	; 0x5d
   1f398:	beq	1f484 <__assert_fail@plt+0xdd24>
   1f39c:	ldr	r7, [r9, #4]
   1f3a0:	cmp	r2, #30
   1f3a4:	strb	r4, [r7, r2]
   1f3a8:	bls	1f340 <__assert_fail@plt+0xdbe0>
   1f3ac:	b	1f50c <__assert_fail@plt+0xddac>
   1f3b0:	ldrb	r7, [r1, #76]	; 0x4c
   1f3b4:	cmp	r7, #0
   1f3b8:	beq	1f450 <__assert_fail@plt+0xdcf0>
   1f3bc:	ldr	lr, [r1, #28]
   1f3c0:	ldr	ip, [r1, #40]	; 0x28
   1f3c4:	cmp	ip, lr
   1f3c8:	beq	1f3dc <__assert_fail@plt+0xdc7c>
   1f3cc:	ldr	r4, [r1, #8]
   1f3d0:	ldr	r4, [r4, ip, lsl #2]
   1f3d4:	cmn	r4, #1
   1f3d8:	beq	1f470 <__assert_fail@plt+0xdd10>
   1f3dc:	ldr	r6, [r1, #12]
   1f3e0:	ldr	r7, [r1, #24]
   1f3e4:	ldr	r4, [r1]
   1f3e8:	ldr	r6, [r6, ip, lsl #2]
   1f3ec:	add	r6, r7, r6
   1f3f0:	add	r4, r4, r6
   1f3f4:	ldrsb	r4, [r4]
   1f3f8:	cmn	r4, #1
   1f3fc:	ble	1f470 <__assert_fail@plt+0xdd10>
   1f400:	ldr	r7, [r1, #80]	; 0x50
   1f404:	mov	r6, #1
   1f408:	cmp	r7, #1
   1f40c:	beq	1f444 <__assert_fail@plt+0xdce4>
   1f410:	add	r7, ip, #1
   1f414:	cmp	r7, lr
   1f418:	bge	1f444 <__assert_fail@plt+0xdce4>
   1f41c:	ldr	r6, [r1, #8]
   1f420:	add	r8, r6, ip, lsl #2
   1f424:	mov	r6, #1
   1f428:	ldr	r7, [r8, r6, lsl #2]
   1f42c:	cmn	r7, #1
   1f430:	bne	1f444 <__assert_fail@plt+0xdce4>
   1f434:	add	r6, r6, #1
   1f438:	add	r7, ip, r6
   1f43c:	cmp	r7, lr
   1f440:	blt	1f428 <__assert_fail@plt+0xdcc8>
   1f444:	add	r6, r6, ip
   1f448:	str	r6, [r1, #40]	; 0x28
   1f44c:	b	1f374 <__assert_fail@plt+0xdc14>
   1f450:	ldr	r7, [r1, #40]	; 0x28
   1f454:	ldr	r4, [r1, #24]
   1f458:	ldr	ip, [r1]
   1f45c:	add	r6, r7, #1
   1f460:	add	r7, r7, r4
   1f464:	str	r6, [r1, #40]	; 0x28
   1f468:	ldrb	r4, [ip, r7]
   1f46c:	b	1f374 <__assert_fail@plt+0xdc14>
   1f470:	add	r6, ip, #1
   1f474:	str	r6, [r1, #40]	; 0x28
   1f478:	ldr	r7, [r1, #4]
   1f47c:	ldrb	r4, [r7, ip]
   1f480:	b	1f374 <__assert_fail@plt+0xdc14>
   1f484:	add	r0, r6, #1
   1f488:	str	r0, [r1, #40]	; 0x28
   1f48c:	mov	r0, #0
   1f490:	ldr	r1, [r9, #4]
   1f494:	strb	r0, [r1, r2]
   1f498:	ldrb	r1, [r5, #4]
   1f49c:	cmp	r1, #30
   1f4a0:	beq	1f4bc <__assert_fail@plt+0xdd5c>
   1f4a4:	cmp	r1, #28
   1f4a8:	beq	1f4c4 <__assert_fail@plt+0xdd64>
   1f4ac:	cmp	r1, #26
   1f4b0:	bne	1f50c <__assert_fail@plt+0xddac>
   1f4b4:	mov	r1, #3
   1f4b8:	b	1f4c8 <__assert_fail@plt+0xdd68>
   1f4bc:	mov	r1, #4
   1f4c0:	b	1f4c8 <__assert_fail@plt+0xdd68>
   1f4c4:	mov	r1, #2
   1f4c8:	str	r1, [r9]
   1f4cc:	sub	sp, fp, #24
   1f4d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f4d4:	ldr	r0, [fp, #12]
   1f4d8:	cmp	r0, #0
   1f4dc:	bne	1f4fc <__assert_fail@plt+0xdd9c>
   1f4e0:	ldr	r2, [fp, #8]
   1f4e4:	mov	r0, sp
   1f4e8:	bl	1f0d8 <__assert_fail@plt+0xd978>
   1f4ec:	ldrb	r1, [sp, #4]
   1f4f0:	mov	r0, #11
   1f4f4:	cmp	r1, #21
   1f4f8:	bne	1f50c <__assert_fail@plt+0xddac>
   1f4fc:	mov	r0, #0
   1f500:	str	r0, [r9]
   1f504:	ldrb	r1, [r5]
   1f508:	strb	r1, [r9, #4]
   1f50c:	sub	sp, fp, #24
   1f510:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f514:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f518:	add	fp, sp, #24
   1f51c:	mov	r8, r0
   1f520:	ldrb	r0, [fp, #14]
   1f524:	ldr	r6, [fp, #8]
   1f528:	mov	r5, r3
   1f52c:	mov	r7, r2
   1f530:	mov	r4, r1
   1f534:	tst	r0, #64	; 0x40
   1f538:	beq	1f574 <__assert_fail@plt+0xde14>
   1f53c:	movw	r1, #49162	; 0xc00a
   1f540:	mov	r0, r6
   1f544:	movt	r1, #2
   1f548:	bl	11418 <strcmp@plt>
   1f54c:	cmp	r0, #0
   1f550:	beq	1f56c <__assert_fail@plt+0xde0c>
   1f554:	movw	r1, #49168	; 0xc010
   1f558:	mov	r0, r6
   1f55c:	movt	r1, #2
   1f560:	bl	11418 <strcmp@plt>
   1f564:	cmp	r0, #0
   1f568:	bne	1f574 <__assert_fail@plt+0xde14>
   1f56c:	movw	r6, #49174	; 0xc016
   1f570:	movt	r6, #2
   1f574:	ldr	r0, [r5]
   1f578:	ldr	r1, [r7, #36]	; 0x24
   1f57c:	cmp	r0, r1
   1f580:	beq	1faa0 <__assert_fail@plt+0xe340>
   1f584:	mov	r0, r6
   1f588:	bl	113e8 <wctype@plt>
   1f58c:	ldr	r2, [r7, #36]	; 0x24
   1f590:	ldr	r1, [r7, #12]
   1f594:	add	r3, r2, #1
   1f598:	str	r3, [r7, #36]	; 0x24
   1f59c:	str	r0, [r1, r2, lsl #2]
   1f5a0:	movw	r1, #49150	; 0xbffe
   1f5a4:	mov	r0, r6
   1f5a8:	movt	r1, #2
   1f5ac:	bl	11418 <strcmp@plt>
   1f5b0:	cmp	r0, #0
   1f5b4:	beq	1f718 <__assert_fail@plt+0xdfb8>
   1f5b8:	movw	r1, #49180	; 0xc01c
   1f5bc:	mov	r0, r6
   1f5c0:	movt	r1, #2
   1f5c4:	bl	11418 <strcmp@plt>
   1f5c8:	cmp	r0, #0
   1f5cc:	beq	1f76c <__assert_fail@plt+0xe00c>
   1f5d0:	movw	r1, #49168	; 0xc010
   1f5d4:	mov	r0, r6
   1f5d8:	movt	r1, #2
   1f5dc:	bl	11418 <strcmp@plt>
   1f5e0:	cmp	r0, #0
   1f5e4:	beq	1f7c0 <__assert_fail@plt+0xe060>
   1f5e8:	movw	r1, #49156	; 0xc004
   1f5ec:	mov	r0, r6
   1f5f0:	movt	r1, #2
   1f5f4:	bl	11418 <strcmp@plt>
   1f5f8:	cmp	r0, #0
   1f5fc:	beq	1f814 <__assert_fail@plt+0xe0b4>
   1f600:	movw	r1, #49174	; 0xc016
   1f604:	mov	r0, r6
   1f608:	movt	r1, #2
   1f60c:	bl	11418 <strcmp@plt>
   1f610:	cmp	r0, #0
   1f614:	beq	1f868 <__assert_fail@plt+0xe108>
   1f618:	movw	r1, #49211	; 0xc03b
   1f61c:	mov	r0, r6
   1f620:	movt	r1, #2
   1f624:	bl	11418 <strcmp@plt>
   1f628:	cmp	r0, #0
   1f62c:	beq	1f8bc <__assert_fail@plt+0xe15c>
   1f630:	movw	r1, #49186	; 0xc022
   1f634:	mov	r0, r6
   1f638:	movt	r1, #2
   1f63c:	bl	11418 <strcmp@plt>
   1f640:	cmp	r0, #0
   1f644:	beq	1f910 <__assert_fail@plt+0xe1b0>
   1f648:	movw	r1, #49162	; 0xc00a
   1f64c:	mov	r0, r6
   1f650:	movt	r1, #2
   1f654:	bl	11418 <strcmp@plt>
   1f658:	cmp	r0, #0
   1f65c:	beq	1f960 <__assert_fail@plt+0xe200>
   1f660:	movw	r1, #49192	; 0xc028
   1f664:	mov	r0, r6
   1f668:	movt	r1, #2
   1f66c:	bl	11418 <strcmp@plt>
   1f670:	cmp	r0, #0
   1f674:	beq	1f9b0 <__assert_fail@plt+0xe250>
   1f678:	movw	r1, #49198	; 0xc02e
   1f67c:	mov	r0, r6
   1f680:	movt	r1, #2
   1f684:	bl	11418 <strcmp@plt>
   1f688:	cmp	r0, #0
   1f68c:	beq	1fa00 <__assert_fail@plt+0xe2a0>
   1f690:	movw	r1, #49204	; 0xc034
   1f694:	mov	r0, r6
   1f698:	movt	r1, #2
   1f69c:	bl	11418 <strcmp@plt>
   1f6a0:	cmp	r0, #0
   1f6a4:	beq	1fa50 <__assert_fail@plt+0xe2f0>
   1f6a8:	movw	r1, #49210	; 0xc03a
   1f6ac:	mov	r0, r6
   1f6b0:	movt	r1, #2
   1f6b4:	bl	11418 <strcmp@plt>
   1f6b8:	mov	r1, r0
   1f6bc:	mov	r0, #4
   1f6c0:	cmp	r1, #0
   1f6c4:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f6c8:	bl	11610 <__ctype_b_loc@plt>
   1f6cc:	ldr	r1, [r0]
   1f6d0:	mov	r2, #0
   1f6d4:	mov	r3, #1
   1f6d8:	cmp	r8, #0
   1f6dc:	bne	1fc08 <__assert_fail@plt+0xe4a8>
   1f6e0:	ldrb	r0, [r1, #1]
   1f6e4:	tst	r0, #16
   1f6e8:	beq	1f700 <__assert_fail@plt+0xdfa0>
   1f6ec:	ubfx	r0, r2, #5, #3
   1f6f0:	and	r6, r2, #31
   1f6f4:	ldr	r7, [r4, r0, lsl #2]
   1f6f8:	orr	r7, r7, r3, lsl r6
   1f6fc:	str	r7, [r4, r0, lsl #2]
   1f700:	add	r2, r2, #1
   1f704:	add	r1, r1, #2
   1f708:	mov	r0, #0
   1f70c:	cmp	r2, #256	; 0x100
   1f710:	bne	1f6e0 <__assert_fail@plt+0xdf80>
   1f714:	b	1fa9c <__assert_fail@plt+0xe33c>
   1f718:	bl	11610 <__ctype_b_loc@plt>
   1f71c:	ldr	r1, [r0]
   1f720:	cmp	r8, #0
   1f724:	bne	1fb44 <__assert_fail@plt+0xe3e4>
   1f728:	mov	r0, #0
   1f72c:	mov	r2, #1
   1f730:	b	1f748 <__assert_fail@plt+0xdfe8>
   1f734:	add	r0, r0, #1
   1f738:	add	r1, r1, #2
   1f73c:	cmp	r0, #256	; 0x100
   1f740:	moveq	r0, #0
   1f744:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f748:	ldrb	r3, [r1]
   1f74c:	tst	r3, #8
   1f750:	beq	1f734 <__assert_fail@plt+0xdfd4>
   1f754:	ubfx	r3, r0, #5, #3
   1f758:	and	r6, r0, #31
   1f75c:	ldr	r7, [r4, r3, lsl #2]
   1f760:	orr	r7, r7, r2, lsl r6
   1f764:	str	r7, [r4, r3, lsl #2]
   1f768:	b	1f734 <__assert_fail@plt+0xdfd4>
   1f76c:	bl	11610 <__ctype_b_loc@plt>
   1f770:	ldr	r1, [r0]
   1f774:	cmp	r8, #0
   1f778:	bne	1fbc4 <__assert_fail@plt+0xe464>
   1f77c:	mov	r0, #0
   1f780:	mov	r2, #1
   1f784:	b	1f79c <__assert_fail@plt+0xe03c>
   1f788:	add	r0, r0, #1
   1f78c:	add	r1, r1, #2
   1f790:	cmp	r0, #256	; 0x100
   1f794:	moveq	r0, #0
   1f798:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f79c:	ldrb	r3, [r1]
   1f7a0:	tst	r3, #2
   1f7a4:	beq	1f788 <__assert_fail@plt+0xe028>
   1f7a8:	ubfx	r3, r0, #5, #3
   1f7ac:	and	r6, r0, #31
   1f7b0:	ldr	r7, [r4, r3, lsl #2]
   1f7b4:	orr	r7, r7, r2, lsl r6
   1f7b8:	str	r7, [r4, r3, lsl #2]
   1f7bc:	b	1f788 <__assert_fail@plt+0xe028>
   1f7c0:	bl	11610 <__ctype_b_loc@plt>
   1f7c4:	ldr	r1, [r0]
   1f7c8:	cmp	r8, #0
   1f7cc:	bne	1fc80 <__assert_fail@plt+0xe520>
   1f7d0:	mov	r0, #0
   1f7d4:	mov	r2, #1
   1f7d8:	b	1f7f0 <__assert_fail@plt+0xe090>
   1f7dc:	add	r0, r0, #1
   1f7e0:	add	r1, r1, #2
   1f7e4:	cmp	r0, #256	; 0x100
   1f7e8:	moveq	r0, #0
   1f7ec:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f7f0:	ldrb	r3, [r1, #1]
   1f7f4:	tst	r3, #2
   1f7f8:	beq	1f7dc <__assert_fail@plt+0xe07c>
   1f7fc:	ubfx	r3, r0, #5, #3
   1f800:	and	r6, r0, #31
   1f804:	ldr	r7, [r4, r3, lsl #2]
   1f808:	orr	r7, r7, r2, lsl r6
   1f80c:	str	r7, [r4, r3, lsl #2]
   1f810:	b	1f7dc <__assert_fail@plt+0xe07c>
   1f814:	bl	11610 <__ctype_b_loc@plt>
   1f818:	ldr	r1, [r0]
   1f81c:	cmp	r8, #0
   1f820:	bne	1fd00 <__assert_fail@plt+0xe5a0>
   1f824:	mov	r0, #0
   1f828:	mov	r2, #1
   1f82c:	b	1f844 <__assert_fail@plt+0xe0e4>
   1f830:	add	r0, r0, #1
   1f834:	add	r1, r1, #2
   1f838:	cmp	r0, #256	; 0x100
   1f83c:	moveq	r0, #0
   1f840:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f844:	ldrb	r3, [r1, #1]
   1f848:	tst	r3, #32
   1f84c:	beq	1f830 <__assert_fail@plt+0xe0d0>
   1f850:	ubfx	r3, r0, #5, #3
   1f854:	and	r6, r0, #31
   1f858:	ldr	r7, [r4, r3, lsl #2]
   1f85c:	orr	r7, r7, r2, lsl r6
   1f860:	str	r7, [r4, r3, lsl #2]
   1f864:	b	1f830 <__assert_fail@plt+0xe0d0>
   1f868:	bl	11610 <__ctype_b_loc@plt>
   1f86c:	ldr	r1, [r0]
   1f870:	cmp	r8, #0
   1f874:	bne	1fd44 <__assert_fail@plt+0xe5e4>
   1f878:	mov	r0, #0
   1f87c:	mov	r2, #1
   1f880:	b	1f898 <__assert_fail@plt+0xe138>
   1f884:	add	r0, r0, #1
   1f888:	add	r1, r1, #2
   1f88c:	cmp	r0, #256	; 0x100
   1f890:	moveq	r0, #0
   1f894:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f898:	ldrb	r3, [r1, #1]
   1f89c:	tst	r3, #4
   1f8a0:	beq	1f884 <__assert_fail@plt+0xe124>
   1f8a4:	ubfx	r3, r0, #5, #3
   1f8a8:	and	r6, r0, #31
   1f8ac:	ldr	r7, [r4, r3, lsl #2]
   1f8b0:	orr	r7, r7, r2, lsl r6
   1f8b4:	str	r7, [r4, r3, lsl #2]
   1f8b8:	b	1f884 <__assert_fail@plt+0xe124>
   1f8bc:	bl	11610 <__ctype_b_loc@plt>
   1f8c0:	ldr	r1, [r0]
   1f8c4:	cmp	r8, #0
   1f8c8:	bne	1fd88 <__assert_fail@plt+0xe628>
   1f8cc:	mov	r0, #0
   1f8d0:	mov	r2, #1
   1f8d4:	b	1f8ec <__assert_fail@plt+0xe18c>
   1f8d8:	add	r0, r0, #1
   1f8dc:	add	r1, r1, #2
   1f8e0:	cmp	r0, #256	; 0x100
   1f8e4:	moveq	r0, #0
   1f8e8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f8ec:	ldrb	r3, [r1, #1]
   1f8f0:	tst	r3, #8
   1f8f4:	beq	1f8d8 <__assert_fail@plt+0xe178>
   1f8f8:	ubfx	r3, r0, #5, #3
   1f8fc:	and	r6, r0, #31
   1f900:	ldr	r7, [r4, r3, lsl #2]
   1f904:	orr	r7, r7, r2, lsl r6
   1f908:	str	r7, [r4, r3, lsl #2]
   1f90c:	b	1f8d8 <__assert_fail@plt+0xe178>
   1f910:	bl	11610 <__ctype_b_loc@plt>
   1f914:	ldr	r1, [r0]
   1f918:	mov	r2, #0
   1f91c:	mov	r3, #1
   1f920:	cmp	r8, #0
   1f924:	bne	1facc <__assert_fail@plt+0xe36c>
   1f928:	ldrb	r0, [r1, #1]
   1f92c:	tst	r0, #64	; 0x40
   1f930:	beq	1f948 <__assert_fail@plt+0xe1e8>
   1f934:	ubfx	r0, r2, #5, #3
   1f938:	and	r6, r2, #31
   1f93c:	ldr	r7, [r4, r0, lsl #2]
   1f940:	orr	r7, r7, r3, lsl r6
   1f944:	str	r7, [r4, r0, lsl #2]
   1f948:	add	r2, r2, #1
   1f94c:	add	r1, r1, #2
   1f950:	mov	r0, #0
   1f954:	cmp	r2, #256	; 0x100
   1f958:	bne	1f928 <__assert_fail@plt+0xe1c8>
   1f95c:	b	1fa9c <__assert_fail@plt+0xe33c>
   1f960:	bl	11610 <__ctype_b_loc@plt>
   1f964:	ldr	r1, [r0]
   1f968:	mov	r2, #0
   1f96c:	mov	r3, #1
   1f970:	cmp	r8, #0
   1f974:	bne	1fb08 <__assert_fail@plt+0xe3a8>
   1f978:	ldrb	r0, [r1, #1]
   1f97c:	tst	r0, #1
   1f980:	beq	1f998 <__assert_fail@plt+0xe238>
   1f984:	ubfx	r0, r2, #5, #3
   1f988:	and	r6, r2, #31
   1f98c:	ldr	r7, [r4, r0, lsl #2]
   1f990:	orr	r7, r7, r3, lsl r6
   1f994:	str	r7, [r4, r0, lsl #2]
   1f998:	add	r2, r2, #1
   1f99c:	add	r1, r1, #2
   1f9a0:	mov	r0, #0
   1f9a4:	cmp	r2, #256	; 0x100
   1f9a8:	bne	1f978 <__assert_fail@plt+0xe218>
   1f9ac:	b	1fa9c <__assert_fail@plt+0xe33c>
   1f9b0:	bl	11610 <__ctype_b_loc@plt>
   1f9b4:	ldr	r1, [r0]
   1f9b8:	mov	r2, #0
   1f9bc:	mov	r3, #1
   1f9c0:	cmp	r8, #0
   1f9c4:	bne	1fb88 <__assert_fail@plt+0xe428>
   1f9c8:	ldrb	r0, [r1]
   1f9cc:	tst	r0, #1
   1f9d0:	beq	1f9e8 <__assert_fail@plt+0xe288>
   1f9d4:	ubfx	r0, r2, #5, #3
   1f9d8:	and	r6, r2, #31
   1f9dc:	ldr	r7, [r4, r0, lsl #2]
   1f9e0:	orr	r7, r7, r3, lsl r6
   1f9e4:	str	r7, [r4, r0, lsl #2]
   1f9e8:	add	r2, r2, #1
   1f9ec:	add	r1, r1, #2
   1f9f0:	mov	r0, #0
   1f9f4:	cmp	r2, #256	; 0x100
   1f9f8:	bne	1f9c8 <__assert_fail@plt+0xe268>
   1f9fc:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fa00:	bl	11610 <__ctype_b_loc@plt>
   1fa04:	ldr	r1, [r0]
   1fa08:	mov	r2, #0
   1fa0c:	mov	r3, #1
   1fa10:	cmp	r8, #0
   1fa14:	bne	1fc44 <__assert_fail@plt+0xe4e4>
   1fa18:	ldrsh	r0, [r1]
   1fa1c:	cmn	r0, #1
   1fa20:	bgt	1fa38 <__assert_fail@plt+0xe2d8>
   1fa24:	ubfx	r0, r2, #5, #3
   1fa28:	and	r6, r2, #31
   1fa2c:	ldr	r7, [r4, r0, lsl #2]
   1fa30:	orr	r7, r7, r3, lsl r6
   1fa34:	str	r7, [r4, r0, lsl #2]
   1fa38:	add	r2, r2, #1
   1fa3c:	add	r1, r1, #2
   1fa40:	mov	r0, #0
   1fa44:	cmp	r2, #256	; 0x100
   1fa48:	bne	1fa18 <__assert_fail@plt+0xe2b8>
   1fa4c:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fa50:	bl	11610 <__ctype_b_loc@plt>
   1fa54:	ldr	r1, [r0]
   1fa58:	mov	r2, #0
   1fa5c:	mov	r3, #1
   1fa60:	cmp	r8, #0
   1fa64:	bne	1fcc4 <__assert_fail@plt+0xe564>
   1fa68:	ldrb	r0, [r1]
   1fa6c:	tst	r0, #4
   1fa70:	beq	1fa88 <__assert_fail@plt+0xe328>
   1fa74:	ubfx	r0, r2, #5, #3
   1fa78:	and	r6, r2, #31
   1fa7c:	ldr	r7, [r4, r0, lsl #2]
   1fa80:	orr	r7, r7, r3, lsl r6
   1fa84:	str	r7, [r4, r0, lsl #2]
   1fa88:	add	r2, r2, #1
   1fa8c:	add	r1, r1, #2
   1fa90:	mov	r0, #0
   1fa94:	cmp	r2, #256	; 0x100
   1fa98:	bne	1fa68 <__assert_fail@plt+0xe308>
   1fa9c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1faa0:	mov	r1, #1
   1faa4:	orr	r9, r1, r0, lsl #1
   1faa8:	ldr	r0, [r7, #12]
   1faac:	lsl	r1, r9, #2
   1fab0:	bl	2a8dc <__assert_fail@plt+0x1917c>
   1fab4:	cmp	r0, #0
   1fab8:	moveq	r0, #12
   1fabc:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fac0:	str	r0, [r7, #12]
   1fac4:	str	r9, [r5]
   1fac8:	b	1f584 <__assert_fail@plt+0xde24>
   1facc:	ldrb	r0, [r1, #1]
   1fad0:	tst	r0, #64	; 0x40
   1fad4:	beq	1faf0 <__assert_fail@plt+0xe390>
   1fad8:	ldrb	r0, [r8, r2]
   1fadc:	ubfx	r7, r0, #5, #3
   1fae0:	and	r0, r0, #31
   1fae4:	ldr	r6, [r4, r7, lsl #2]
   1fae8:	orr	r0, r6, r3, lsl r0
   1faec:	str	r0, [r4, r7, lsl #2]
   1faf0:	add	r2, r2, #1
   1faf4:	add	r1, r1, #2
   1faf8:	mov	r0, #0
   1fafc:	cmp	r2, #256	; 0x100
   1fb00:	bne	1facc <__assert_fail@plt+0xe36c>
   1fb04:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fb08:	ldrb	r0, [r1, #1]
   1fb0c:	tst	r0, #1
   1fb10:	beq	1fb2c <__assert_fail@plt+0xe3cc>
   1fb14:	ldrb	r0, [r8, r2]
   1fb18:	ubfx	r7, r0, #5, #3
   1fb1c:	and	r0, r0, #31
   1fb20:	ldr	r6, [r4, r7, lsl #2]
   1fb24:	orr	r0, r6, r3, lsl r0
   1fb28:	str	r0, [r4, r7, lsl #2]
   1fb2c:	add	r2, r2, #1
   1fb30:	add	r1, r1, #2
   1fb34:	mov	r0, #0
   1fb38:	cmp	r2, #256	; 0x100
   1fb3c:	bne	1fb08 <__assert_fail@plt+0xe3a8>
   1fb40:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fb44:	mov	r2, #0
   1fb48:	mov	r3, #1
   1fb4c:	ldrb	r0, [r1]
   1fb50:	tst	r0, #8
   1fb54:	beq	1fb70 <__assert_fail@plt+0xe410>
   1fb58:	ldrb	r0, [r8, r2]
   1fb5c:	ubfx	r7, r0, #5, #3
   1fb60:	and	r0, r0, #31
   1fb64:	ldr	r6, [r4, r7, lsl #2]
   1fb68:	orr	r0, r6, r3, lsl r0
   1fb6c:	str	r0, [r4, r7, lsl #2]
   1fb70:	add	r2, r2, #1
   1fb74:	add	r1, r1, #2
   1fb78:	mov	r0, #0
   1fb7c:	cmp	r2, #256	; 0x100
   1fb80:	bne	1fb4c <__assert_fail@plt+0xe3ec>
   1fb84:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fb88:	ldrb	r0, [r1]
   1fb8c:	tst	r0, #1
   1fb90:	beq	1fbac <__assert_fail@plt+0xe44c>
   1fb94:	ldrb	r0, [r8, r2]
   1fb98:	ubfx	r7, r0, #5, #3
   1fb9c:	and	r0, r0, #31
   1fba0:	ldr	r6, [r4, r7, lsl #2]
   1fba4:	orr	r0, r6, r3, lsl r0
   1fba8:	str	r0, [r4, r7, lsl #2]
   1fbac:	add	r2, r2, #1
   1fbb0:	add	r1, r1, #2
   1fbb4:	mov	r0, #0
   1fbb8:	cmp	r2, #256	; 0x100
   1fbbc:	bne	1fb88 <__assert_fail@plt+0xe428>
   1fbc0:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fbc4:	mov	r2, #0
   1fbc8:	mov	r3, #1
   1fbcc:	ldrb	r0, [r1]
   1fbd0:	tst	r0, #2
   1fbd4:	beq	1fbf0 <__assert_fail@plt+0xe490>
   1fbd8:	ldrb	r0, [r8, r2]
   1fbdc:	ubfx	r7, r0, #5, #3
   1fbe0:	and	r0, r0, #31
   1fbe4:	ldr	r6, [r4, r7, lsl #2]
   1fbe8:	orr	r0, r6, r3, lsl r0
   1fbec:	str	r0, [r4, r7, lsl #2]
   1fbf0:	add	r2, r2, #1
   1fbf4:	add	r1, r1, #2
   1fbf8:	mov	r0, #0
   1fbfc:	cmp	r2, #256	; 0x100
   1fc00:	bne	1fbcc <__assert_fail@plt+0xe46c>
   1fc04:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fc08:	ldrb	r0, [r1, #1]
   1fc0c:	tst	r0, #16
   1fc10:	beq	1fc2c <__assert_fail@plt+0xe4cc>
   1fc14:	ldrb	r0, [r8, r2]
   1fc18:	ubfx	r7, r0, #5, #3
   1fc1c:	and	r0, r0, #31
   1fc20:	ldr	r6, [r4, r7, lsl #2]
   1fc24:	orr	r0, r6, r3, lsl r0
   1fc28:	str	r0, [r4, r7, lsl #2]
   1fc2c:	add	r2, r2, #1
   1fc30:	add	r1, r1, #2
   1fc34:	mov	r0, #0
   1fc38:	cmp	r2, #256	; 0x100
   1fc3c:	bne	1fc08 <__assert_fail@plt+0xe4a8>
   1fc40:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fc44:	ldrsh	r0, [r1]
   1fc48:	cmn	r0, #1
   1fc4c:	bgt	1fc68 <__assert_fail@plt+0xe508>
   1fc50:	ldrb	r0, [r8, r2]
   1fc54:	ubfx	r7, r0, #5, #3
   1fc58:	and	r0, r0, #31
   1fc5c:	ldr	r6, [r4, r7, lsl #2]
   1fc60:	orr	r0, r6, r3, lsl r0
   1fc64:	str	r0, [r4, r7, lsl #2]
   1fc68:	add	r2, r2, #1
   1fc6c:	add	r1, r1, #2
   1fc70:	mov	r0, #0
   1fc74:	cmp	r2, #256	; 0x100
   1fc78:	bne	1fc44 <__assert_fail@plt+0xe4e4>
   1fc7c:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fc80:	mov	r2, #0
   1fc84:	mov	r3, #1
   1fc88:	ldrb	r0, [r1, #1]
   1fc8c:	tst	r0, #2
   1fc90:	beq	1fcac <__assert_fail@plt+0xe54c>
   1fc94:	ldrb	r0, [r8, r2]
   1fc98:	ubfx	r7, r0, #5, #3
   1fc9c:	and	r0, r0, #31
   1fca0:	ldr	r6, [r4, r7, lsl #2]
   1fca4:	orr	r0, r6, r3, lsl r0
   1fca8:	str	r0, [r4, r7, lsl #2]
   1fcac:	add	r2, r2, #1
   1fcb0:	add	r1, r1, #2
   1fcb4:	mov	r0, #0
   1fcb8:	cmp	r2, #256	; 0x100
   1fcbc:	bne	1fc88 <__assert_fail@plt+0xe528>
   1fcc0:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fcc4:	ldrb	r0, [r1]
   1fcc8:	tst	r0, #4
   1fccc:	beq	1fce8 <__assert_fail@plt+0xe588>
   1fcd0:	ldrb	r0, [r8, r2]
   1fcd4:	ubfx	r7, r0, #5, #3
   1fcd8:	and	r0, r0, #31
   1fcdc:	ldr	r6, [r4, r7, lsl #2]
   1fce0:	orr	r0, r6, r3, lsl r0
   1fce4:	str	r0, [r4, r7, lsl #2]
   1fce8:	add	r2, r2, #1
   1fcec:	add	r1, r1, #2
   1fcf0:	mov	r0, #0
   1fcf4:	cmp	r2, #256	; 0x100
   1fcf8:	bne	1fcc4 <__assert_fail@plt+0xe564>
   1fcfc:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fd00:	mov	r2, #0
   1fd04:	mov	r3, #1
   1fd08:	ldrb	r0, [r1, #1]
   1fd0c:	tst	r0, #32
   1fd10:	beq	1fd2c <__assert_fail@plt+0xe5cc>
   1fd14:	ldrb	r0, [r8, r2]
   1fd18:	ubfx	r7, r0, #5, #3
   1fd1c:	and	r0, r0, #31
   1fd20:	ldr	r6, [r4, r7, lsl #2]
   1fd24:	orr	r0, r6, r3, lsl r0
   1fd28:	str	r0, [r4, r7, lsl #2]
   1fd2c:	add	r2, r2, #1
   1fd30:	add	r1, r1, #2
   1fd34:	mov	r0, #0
   1fd38:	cmp	r2, #256	; 0x100
   1fd3c:	bne	1fd08 <__assert_fail@plt+0xe5a8>
   1fd40:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fd44:	mov	r2, #0
   1fd48:	mov	r3, #1
   1fd4c:	ldrb	r0, [r1, #1]
   1fd50:	tst	r0, #4
   1fd54:	beq	1fd70 <__assert_fail@plt+0xe610>
   1fd58:	ldrb	r0, [r8, r2]
   1fd5c:	ubfx	r7, r0, #5, #3
   1fd60:	and	r0, r0, #31
   1fd64:	ldr	r6, [r4, r7, lsl #2]
   1fd68:	orr	r0, r6, r3, lsl r0
   1fd6c:	str	r0, [r4, r7, lsl #2]
   1fd70:	add	r2, r2, #1
   1fd74:	add	r1, r1, #2
   1fd78:	mov	r0, #0
   1fd7c:	cmp	r2, #256	; 0x100
   1fd80:	bne	1fd4c <__assert_fail@plt+0xe5ec>
   1fd84:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fd88:	mov	r2, #0
   1fd8c:	mov	r3, #1
   1fd90:	ldrb	r0, [r1, #1]
   1fd94:	tst	r0, #8
   1fd98:	beq	1fdb4 <__assert_fail@plt+0xe654>
   1fd9c:	ldrb	r0, [r8, r2]
   1fda0:	ubfx	r7, r0, #5, #3
   1fda4:	and	r0, r0, #31
   1fda8:	ldr	r6, [r4, r7, lsl #2]
   1fdac:	orr	r0, r6, r3, lsl r0
   1fdb0:	str	r0, [r4, r7, lsl #2]
   1fdb4:	add	r2, r2, #1
   1fdb8:	add	r1, r1, #2
   1fdbc:	mov	r0, #0
   1fdc0:	cmp	r2, #256	; 0x100
   1fdc4:	bne	1fd90 <__assert_fail@plt+0xe630>
   1fdc8:	b	1fa9c <__assert_fail@plt+0xe33c>
   1fdcc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fdd0:	add	fp, sp, #24
   1fdd4:	ldrb	r3, [r1, #24]
   1fdd8:	ldr	r2, [r1, #28]
   1fddc:	mov	r4, #0
   1fde0:	sub	r3, r3, #2
   1fde4:	cmp	r3, #14
   1fde8:	bhi	1ff0c <__assert_fail@plt+0xe7ac>
   1fdec:	add	r7, pc, #0
   1fdf0:	ldr	pc, [r7, r3, lsl #2]
   1fdf4:	andeq	pc, r1, r0, asr #30
   1fdf8:	andeq	pc, r1, ip, lsl #30
   1fdfc:	andeq	pc, r1, r4, lsr #30
   1fe00:	andeq	pc, r1, ip, lsl #30
   1fe04:	andeq	pc, r1, ip, lsl #30
   1fe08:	andeq	pc, r1, ip, lsl #30
   1fe0c:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1fe10:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1fe14:	andeq	pc, r1, r4, lsl #29
   1fe18:	andeq	pc, r1, r4, lsl #29
   1fe1c:	andeq	pc, r1, r0, lsr lr	; <UNPREDICTABLE>
   1fe20:	andeq	pc, r1, ip, lsl #30
   1fe24:	andeq	pc, r1, ip, lsl #30
   1fe28:	andeq	pc, r1, ip, lsl #30
   1fe2c:	andeq	pc, r1, r0, asr #30
   1fe30:	ldr	r1, [r1, #16]
   1fe34:	ldr	r5, [r1, #28]
   1fe38:	ldr	r6, [r0, #20]
   1fe3c:	add	r0, r2, r2, lsl #1
   1fe40:	mov	r1, #1
   1fe44:	str	r1, [r6, r0, lsl #2]!
   1fe48:	mov	r0, #4
   1fe4c:	mov	r7, r6
   1fe50:	str	r1, [r7, #4]!
   1fe54:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1fe58:	cmp	r0, #0
   1fe5c:	str	r0, [r6, #8]
   1fe60:	strne	r5, [r0]
   1fe64:	movne	r0, r4
   1fe68:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe6c:	mov	r0, #0
   1fe70:	str	r0, [r7]
   1fe74:	str	r0, [r6]
   1fe78:	mov	r4, #12
   1fe7c:	mov	r0, r4
   1fe80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1fe84:	ldrb	r3, [r0, #88]	; 0x58
   1fe88:	add	r6, r1, #16
   1fe8c:	add	r5, r2, r2, lsl #1
   1fe90:	orr	r3, r3, #1
   1fe94:	strb	r3, [r0, #88]	; 0x58
   1fe98:	mov	r3, r6
   1fe9c:	ldr	r7, [r1, #4]
   1fea0:	ldr	r1, [r1, #8]
   1fea4:	cmp	r1, #0
   1fea8:	addne	r3, r1, #12
   1feac:	cmp	r7, #0
   1feb0:	ldr	r1, [r3]
   1feb4:	addne	r6, r7, #12
   1feb8:	ldr	r8, [r1, #28]
   1febc:	ldr	r1, [r6]
   1fec0:	ldr	r6, [r0, #20]
   1fec4:	mov	r0, #2
   1fec8:	ldr	r9, [r1, #28]
   1fecc:	mov	r7, r6
   1fed0:	str	r0, [r7, r5, lsl #2]!
   1fed4:	mov	r0, #8
   1fed8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   1fedc:	cmp	r0, #0
   1fee0:	str	r0, [r7, #8]
   1fee4:	beq	1fe78 <__assert_fail@plt+0xe718>
   1fee8:	add	r1, r6, r5, lsl #2
   1feec:	cmp	r9, r8
   1fef0:	add	r1, r1, #4
   1fef4:	bne	1ff48 <__assert_fail@plt+0xe7e8>
   1fef8:	mov	r2, #1
   1fefc:	str	r2, [r1]
   1ff00:	str	r9, [r0]
   1ff04:	mov	r0, r4
   1ff08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff0c:	ldr	r1, [r1, #16]
   1ff10:	ldr	r0, [r0, #12]
   1ff14:	ldr	r1, [r1, #28]
   1ff18:	str	r1, [r0, r2, lsl #2]
   1ff1c:	mov	r0, r4
   1ff20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff24:	ldr	r7, [r1, #16]
   1ff28:	ldr	r3, [r0, #12]
   1ff2c:	ldr	r5, [r7, #28]
   1ff30:	str	r5, [r3, r2, lsl #2]
   1ff34:	ldrb	r1, [r1, #24]
   1ff38:	cmp	r1, #4
   1ff3c:	beq	1fe38 <__assert_fail@plt+0xe6d8>
   1ff40:	mov	r0, r4
   1ff44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff48:	mov	r2, #2
   1ff4c:	str	r2, [r1]
   1ff50:	stmge	r0, {r8, r9}
   1ff54:	strlt	r9, [r0]
   1ff58:	strlt	r8, [r0, #4]
   1ff5c:	mov	r0, r4
   1ff60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff68:	add	fp, sp, #28
   1ff6c:	sub	sp, sp, #4
   1ff70:	ldr	r6, [r2, #4]
   1ff74:	mov	r8, r0
   1ff78:	ldr	r5, [r1]
   1ff7c:	mov	r9, r2
   1ff80:	cmp	r6, #0
   1ff84:	ldrbne	r0, [r1, #28]
   1ff88:	andsne	r0, r0, #16
   1ff8c:	bne	20130 <__assert_fail@plt+0xe9d0>
   1ff90:	ldr	r1, [r5, #64]	; 0x40
   1ff94:	cmp	r1, #31
   1ff98:	beq	20158 <__assert_fail@plt+0xe9f8>
   1ff9c:	ldr	r0, [r5, #56]	; 0x38
   1ffa0:	add	r2, r1, #1
   1ffa4:	add	r0, r0, r1, lsl #5
   1ffa8:	mov	r1, #0
   1ffac:	vmov.i32	q8, #0	; 0x00000000
   1ffb0:	str	r2, [r5, #64]	; 0x40
   1ffb4:	add	sl, r0, #4
   1ffb8:	mov	r2, #8
   1ffbc:	str	r1, [r0, #20]
   1ffc0:	str	r1, [r0, #24]
   1ffc4:	str	r2, [r0, #28]
   1ffc8:	mov	r0, #28
   1ffcc:	mov	r1, sl
   1ffd0:	vst1.32	{d16-d17}, [r1], r0
   1ffd4:	mvn	r0, #0
   1ffd8:	str	r0, [r1]
   1ffdc:	ldr	r1, [r5, #64]	; 0x40
   1ffe0:	cmp	r1, #31
   1ffe4:	beq	20180 <__assert_fail@plt+0xea20>
   1ffe8:	ldr	r0, [r5, #56]	; 0x38
   1ffec:	add	r2, r1, #1
   1fff0:	add	r0, r0, r1, lsl #5
   1fff4:	mov	r1, #0
   1fff8:	vmov.i32	q8, #0	; 0x00000000
   1fffc:	str	r2, [r5, #64]	; 0x40
   20000:	add	r7, r0, #4
   20004:	mov	r2, #9
   20008:	str	r1, [r0, #20]
   2000c:	str	r1, [r0, #24]
   20010:	str	r2, [r0, #28]
   20014:	mov	r0, #28
   20018:	mov	r1, r7
   2001c:	vst1.32	{d16-d17}, [r1], r0
   20020:	mvn	r0, #0
   20024:	str	r0, [r1]
   20028:	cmp	r6, #0
   2002c:	mov	r4, r7
   20030:	beq	20080 <__assert_fail@plt+0xe920>
   20034:	ldr	r1, [r5, #64]	; 0x40
   20038:	cmp	r1, #31
   2003c:	beq	201d0 <__assert_fail@plt+0xea70>
   20040:	ldr	r0, [r5, #56]	; 0x38
   20044:	add	r2, r1, #1
   20048:	add	r4, r0, r1, lsl #5
   2004c:	mov	r0, #0
   20050:	mov	r1, #16
   20054:	cmp	r7, #0
   20058:	str	r2, [r5, #64]	; 0x40
   2005c:	str	r0, [r4, #4]!
   20060:	mvn	r2, #0
   20064:	add	r3, r4, #20
   20068:	stmib	r4, {r6, r7}
   2006c:	str	r0, [r4, #12]
   20070:	str	r0, [r4, #16]
   20074:	stm	r3, {r0, r1, r2}
   20078:	str	r4, [r6]
   2007c:	strne	r4, [r7]
   20080:	ldr	r1, [r5, #64]	; 0x40
   20084:	cmp	r1, #31
   20088:	beq	201a8 <__assert_fail@plt+0xea48>
   2008c:	ldr	r0, [r5, #56]	; 0x38
   20090:	add	r2, r1, #1
   20094:	add	r6, r0, r1, lsl #5
   20098:	mov	r0, #0
   2009c:	mov	r1, #16
   200a0:	cmp	sl, #0
   200a4:	str	r2, [r5, #64]	; 0x40
   200a8:	str	r0, [r6, #4]!
   200ac:	mvn	r2, #0
   200b0:	add	r3, r6, #20
   200b4:	str	sl, [r6, #4]
   200b8:	str	r4, [r6, #8]
   200bc:	str	r0, [r6, #12]
   200c0:	str	r0, [r6, #16]
   200c4:	stm	r3, {r0, r1, r2}
   200c8:	strne	r6, [sl]
   200cc:	cmp	r4, #0
   200d0:	strne	r6, [r4]
   200d4:	cmp	r7, #0
   200d8:	beq	200e8 <__assert_fail@plt+0xe988>
   200dc:	cmp	sl, #0
   200e0:	cmpne	r4, #0
   200e4:	bne	200f8 <__assert_fail@plt+0xe998>
   200e8:	mov	r0, #12
   200ec:	mov	r6, #0
   200f0:	str	r0, [r8]
   200f4:	b	2014c <__assert_fail@plt+0xe9ec>
   200f8:	cmp	r6, #0
   200fc:	beq	200e8 <__assert_fail@plt+0xe988>
   20100:	ldr	r0, [r9, #20]
   20104:	str	r0, [r7, #20]
   20108:	str	r0, [sl, #20]
   2010c:	ldr	r1, [r9, #24]
   20110:	ldr	r0, [r7, #24]
   20114:	lsr	r1, r1, #19
   20118:	bfi	r0, r1, #19, #1
   2011c:	str	r0, [r7, #24]
   20120:	ldr	r0, [sl, #24]
   20124:	bfi	r0, r1, #19, #1
   20128:	str	r0, [sl, #24]
   2012c:	b	2014c <__assert_fail@plt+0xe9ec>
   20130:	ldr	r0, [r9, #20]
   20134:	cmp	r0, #31
   20138:	bgt	2014c <__assert_fail@plt+0xe9ec>
   2013c:	ldr	r1, [r5, #80]	; 0x50
   20140:	mov	r2, #1
   20144:	tst	r1, r2, lsl r0
   20148:	bne	1ff90 <__assert_fail@plt+0xe830>
   2014c:	mov	r0, r6
   20150:	sub	sp, fp, #28
   20154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20158:	mov	r0, #996	; 0x3e4
   2015c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   20160:	cmp	r0, #0
   20164:	beq	201f8 <__assert_fail@plt+0xea98>
   20168:	ldr	r1, [r5, #56]	; 0x38
   2016c:	str	r1, [r0]
   20170:	mov	r1, #0
   20174:	str	r1, [r5, #64]	; 0x40
   20178:	str	r0, [r5, #56]	; 0x38
   2017c:	b	1ffa0 <__assert_fail@plt+0xe840>
   20180:	mov	r0, #996	; 0x3e4
   20184:	bl	2a8ac <__assert_fail@plt+0x1914c>
   20188:	cmp	r0, #0
   2018c:	beq	20200 <__assert_fail@plt+0xeaa0>
   20190:	ldr	r1, [r5, #56]	; 0x38
   20194:	str	r1, [r0]
   20198:	mov	r1, #0
   2019c:	str	r1, [r5, #64]	; 0x40
   201a0:	str	r0, [r5, #56]	; 0x38
   201a4:	b	1ffec <__assert_fail@plt+0xe88c>
   201a8:	mov	r0, #996	; 0x3e4
   201ac:	bl	2a8ac <__assert_fail@plt+0x1914c>
   201b0:	cmp	r0, #0
   201b4:	beq	20208 <__assert_fail@plt+0xeaa8>
   201b8:	ldr	r1, [r5, #56]	; 0x38
   201bc:	str	r1, [r0]
   201c0:	mov	r1, #0
   201c4:	str	r1, [r5, #64]	; 0x40
   201c8:	str	r0, [r5, #56]	; 0x38
   201cc:	b	20090 <__assert_fail@plt+0xe930>
   201d0:	mov	r0, #996	; 0x3e4
   201d4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   201d8:	cmp	r0, #0
   201dc:	beq	20218 <__assert_fail@plt+0xeab8>
   201e0:	ldr	r1, [r5, #56]	; 0x38
   201e4:	str	r1, [r0]
   201e8:	mov	r1, #0
   201ec:	str	r1, [r5, #64]	; 0x40
   201f0:	str	r0, [r5, #56]	; 0x38
   201f4:	b	20044 <__assert_fail@plt+0xe8e4>
   201f8:	mov	sl, #0
   201fc:	b	1ffdc <__assert_fail@plt+0xe87c>
   20200:	mov	r7, #0
   20204:	b	20028 <__assert_fail@plt+0xe8c8>
   20208:	mov	r6, #0
   2020c:	cmp	r7, #0
   20210:	bne	200dc <__assert_fail@plt+0xe97c>
   20214:	b	200e8 <__assert_fail@plt+0xe988>
   20218:	mov	r4, #0
   2021c:	b	20080 <__assert_fail@plt+0xe920>
   20220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20224:	add	fp, sp, #28
   20228:	sub	sp, sp, #12
   2022c:	mov	r4, r0
   20230:	ldr	r7, [r0, #4]
   20234:	ldr	r0, [r0, #8]
   20238:	mov	r5, r2
   2023c:	mov	r9, r1
   20240:	cmp	r0, r7
   20244:	bcs	20310 <__assert_fail@plt+0xebb0>
   20248:	ldr	r1, [r4]
   2024c:	str	r9, [r1, r0, lsl #3]!
   20250:	str	r5, [r1, #4]
   20254:	ldr	r0, [r4]
   20258:	ldr	r1, [r4, #8]
   2025c:	add	r0, r0, r1, lsl #3
   20260:	ldr	r1, [r0, #4]
   20264:	bfc	r1, #8, #10
   20268:	str	r1, [r0, #4]
   2026c:	uxtb	r1, r5
   20270:	cmp	r1, #5
   20274:	bne	20288 <__assert_fail@plt+0xeb28>
   20278:	ldr	r2, [r4, #92]	; 0x5c
   2027c:	mov	r0, #1048576	; 0x100000
   20280:	cmp	r2, #1
   20284:	bgt	20298 <__assert_fail@plt+0xeb38>
   20288:	sub	r0, r1, #6
   2028c:	clz	r0, r0
   20290:	lsr	r0, r0, #5
   20294:	lsl	r0, r0, #20
   20298:	ldr	r1, [r4]
   2029c:	ldr	r2, [r4, #8]
   202a0:	add	r1, r1, r2, lsl #3
   202a4:	ldr	r2, [r1, #4]
   202a8:	bic	r2, r2, #1048576	; 0x100000
   202ac:	orr	r0, r2, r0
   202b0:	mvn	r2, #0
   202b4:	str	r0, [r1, #4]
   202b8:	ldr	r0, [r4, #8]
   202bc:	ldr	r1, [r4, #12]
   202c0:	str	r2, [r1, r0, lsl #2]
   202c4:	mov	r2, #0
   202c8:	ldr	r0, [r4, #8]
   202cc:	ldr	r1, [r4, #20]
   202d0:	add	r0, r0, r0, lsl #1
   202d4:	str	r2, [r1, r0, lsl #2]!
   202d8:	str	r2, [r1, #4]
   202dc:	str	r2, [r1, #8]
   202e0:	ldr	r0, [r4, #8]
   202e4:	ldr	r1, [r4, #24]
   202e8:	add	r0, r0, r0, lsl #1
   202ec:	str	r2, [r1, r0, lsl #2]!
   202f0:	str	r2, [r1, #4]
   202f4:	str	r2, [r1, #8]
   202f8:	ldr	r6, [r4, #8]
   202fc:	add	r0, r6, #1
   20300:	str	r0, [r4, #8]
   20304:	mov	r0, r6
   20308:	sub	sp, fp, #28
   2030c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20310:	movw	r0, #21845	; 0x5555
   20314:	lsl	r1, r7, #1
   20318:	mvn	r6, #0
   2031c:	movt	r0, #5461	; 0x1555
   20320:	cmp	r1, r0
   20324:	bhi	20304 <__assert_fail@plt+0xeba4>
   20328:	ldr	r0, [r4]
   2032c:	str	r1, [sp, #8]
   20330:	lsl	r1, r7, #4
   20334:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20338:	cmp	r0, #0
   2033c:	beq	20304 <__assert_fail@plt+0xeba4>
   20340:	str	r0, [r4]
   20344:	lsl	r8, r7, #3
   20348:	ldr	r0, [r4, #12]
   2034c:	mov	r1, r8
   20350:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20354:	str	r0, [sp, #4]
   20358:	ldr	r0, [r4, #16]
   2035c:	mov	r1, r8
   20360:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20364:	mov	r2, r0
   20368:	ldr	r0, [r4, #20]
   2036c:	add	r1, r7, r7, lsl #1
   20370:	lsl	r8, r1, #3
   20374:	mov	r7, r2
   20378:	mov	r1, r8
   2037c:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20380:	mov	sl, r0
   20384:	ldr	r0, [r4, #24]
   20388:	mov	r1, r8
   2038c:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20390:	mov	r8, r0
   20394:	ldr	r0, [sp, #4]
   20398:	cmp	r0, #0
   2039c:	beq	203ac <__assert_fail@plt+0xec4c>
   203a0:	cmp	r7, #0
   203a4:	cmpne	sl, #0
   203a8:	bne	203cc <__assert_fail@plt+0xec6c>
   203ac:	bl	141c4 <__assert_fail@plt+0x2a64>
   203b0:	mov	r0, r7
   203b4:	bl	141c4 <__assert_fail@plt+0x2a64>
   203b8:	mov	r0, sl
   203bc:	bl	141c4 <__assert_fail@plt+0x2a64>
   203c0:	mov	r0, r8
   203c4:	bl	141c4 <__assert_fail@plt+0x2a64>
   203c8:	b	20304 <__assert_fail@plt+0xeba4>
   203cc:	cmp	r8, #0
   203d0:	beq	203ac <__assert_fail@plt+0xec4c>
   203d4:	add	r1, r4, #12
   203d8:	stm	r1, {r0, r7, sl}
   203dc:	str	r8, [r4, #24]
   203e0:	ldr	r0, [sp, #8]
   203e4:	str	r0, [r4, #4]
   203e8:	ldr	r0, [r4, #8]
   203ec:	b	20248 <__assert_fail@plt+0xeae8>
   203f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   203f4:	add	fp, sp, #28
   203f8:	sub	sp, sp, #44	; 0x2c
   203fc:	mov	r8, r0
   20400:	ldr	r0, [r1, #20]
   20404:	add	r4, r2, r2, lsl #1
   20408:	mov	r5, r1
   2040c:	mov	r1, #0
   20410:	mov	r9, r3
   20414:	mov	r6, r2
   20418:	add	r0, r0, r4, lsl #2
   2041c:	ldr	r0, [r0, #4]
   20420:	str	r1, [sp, #36]	; 0x24
   20424:	add	r0, r0, #1
   20428:	str	r0, [sp, #32]
   2042c:	lsl	r0, r0, #2
   20430:	bl	2a8ac <__assert_fail@plt+0x1914c>
   20434:	cmp	r0, #0
   20438:	str	r0, [sp, #40]	; 0x28
   2043c:	beq	20604 <__assert_fail@plt+0xeea4>
   20440:	mov	r1, #1
   20444:	str	r6, [r0]
   20448:	str	r1, [sp, #36]	; 0x24
   2044c:	mvn	r1, #0
   20450:	ldr	r0, [r5, #24]
   20454:	add	r0, r0, r4, lsl #2
   20458:	str	r1, [r0, #4]
   2045c:	ldr	r2, [r5]
   20460:	add	r0, r2, r6, lsl #3
   20464:	ldr	r0, [r0, #4]
   20468:	ubfx	r1, r0, #8, #10
   2046c:	cmp	r1, #0
   20470:	beq	204cc <__assert_fail@plt+0xed6c>
   20474:	ldr	r3, [r5, #20]
   20478:	add	r3, r3, r4, lsl #2
   2047c:	ldr	r7, [r3, #4]
   20480:	cmp	r7, #0
   20484:	beq	204cc <__assert_fail@plt+0xed6c>
   20488:	ldr	r3, [r3, #8]
   2048c:	ldr	r3, [r3]
   20490:	add	r2, r2, r3, lsl #3
   20494:	ldrb	r2, [r2, #6]
   20498:	tst	r2, #4
   2049c:	bne	204cc <__assert_fail@plt+0xed6c>
   204a0:	str	r1, [sp]
   204a4:	mov	r0, r5
   204a8:	mov	r1, r6
   204ac:	mov	r2, r6
   204b0:	mov	r3, r6
   204b4:	bl	20610 <__assert_fail@plt+0xeeb0>
   204b8:	cmp	r0, #0
   204bc:	bne	205fc <__assert_fail@plt+0xee9c>
   204c0:	ldr	r0, [r5]
   204c4:	add	r0, r0, r6, lsl #3
   204c8:	ldr	r0, [r0, #4]
   204cc:	tst	r0, #8
   204d0:	beq	205d0 <__assert_fail@plt+0xee70>
   204d4:	ldr	r0, [r5, #20]
   204d8:	add	r1, r0, r4, lsl #2
   204dc:	ldr	r1, [r1, #4]
   204e0:	cmp	r1, #1
   204e4:	blt	205d0 <__assert_fail@plt+0xee70>
   204e8:	str	r8, [sp, #12]
   204ec:	mov	r8, #0
   204f0:	add	r7, sp, #16
   204f4:	add	sl, sp, #32
   204f8:	mov	r6, #0
   204fc:	str	r9, [sp, #8]
   20500:	add	r0, r0, r4, lsl #2
   20504:	ldr	r0, [r0, #8]
   20508:	ldr	r2, [r0, r6, lsl #2]
   2050c:	ldr	r0, [r5, #24]
   20510:	add	r9, r2, r2, lsl #1
   20514:	add	r0, r0, r9, lsl #2
   20518:	ldr	r1, [r0, #4]
   2051c:	cmn	r1, #1
   20520:	beq	20588 <__assert_fail@plt+0xee28>
   20524:	cmp	r1, #0
   20528:	bne	20548 <__assert_fail@plt+0xede8>
   2052c:	mov	r0, r7
   20530:	mov	r1, r5
   20534:	mov	r3, #0
   20538:	bl	203f0 <__assert_fail@plt+0xec90>
   2053c:	cmp	r0, #0
   20540:	beq	20558 <__assert_fail@plt+0xedf8>
   20544:	b	205fc <__assert_fail@plt+0xee9c>
   20548:	vldr	d16, [r0]
   2054c:	ldr	r0, [r0, #8]
   20550:	str	r0, [sp, #24]
   20554:	vstr	d16, [sp, #16]
   20558:	mov	r0, sl
   2055c:	mov	r1, r7
   20560:	bl	20ac0 <__assert_fail@plt+0xf360>
   20564:	cmp	r0, #0
   20568:	bne	205fc <__assert_fail@plt+0xee9c>
   2056c:	ldr	r0, [r5, #24]
   20570:	add	r0, r0, r9, lsl #2
   20574:	ldr	r0, [r0, #4]
   20578:	cmp	r0, #0
   2057c:	bne	2058c <__assert_fail@plt+0xee2c>
   20580:	ldr	r0, [sp, #24]
   20584:	bl	141c4 <__assert_fail@plt+0x2a64>
   20588:	mov	r8, #1
   2058c:	ldr	r0, [r5, #20]
   20590:	add	r6, r6, #1
   20594:	add	r1, r0, r4, lsl #2
   20598:	ldr	r1, [r1, #4]
   2059c:	cmp	r6, r1
   205a0:	blt	20500 <__assert_fail@plt+0xeda0>
   205a4:	tst	r8, #1
   205a8:	ldr	r8, [sp, #12]
   205ac:	ldr	r0, [sp, #8]
   205b0:	beq	205d0 <__assert_fail@plt+0xee70>
   205b4:	cmp	r0, #0
   205b8:	bne	205d0 <__assert_fail@plt+0xee70>
   205bc:	ldr	r0, [r5, #24]
   205c0:	mov	r1, #0
   205c4:	add	r0, r0, r4, lsl #2
   205c8:	str	r1, [r0, #4]
   205cc:	b	205e8 <__assert_fail@plt+0xee88>
   205d0:	ldr	r0, [r5, #24]
   205d4:	vldr	d16, [sp, #32]
   205d8:	ldr	r1, [sp, #40]	; 0x28
   205dc:	add	r0, r0, r4, lsl #2
   205e0:	str	r1, [r0, #8]
   205e4:	vstr	d16, [r0]
   205e8:	ldr	r0, [sp, #40]	; 0x28
   205ec:	vldr	d16, [sp, #32]
   205f0:	str	r0, [r8, #8]
   205f4:	mov	r0, #0
   205f8:	vstr	d16, [r8]
   205fc:	sub	sp, fp, #28
   20600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20604:	mov	r0, #12
   20608:	sub	sp, fp, #28
   2060c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20614:	add	fp, sp, #28
   20618:	sub	sp, sp, #20
   2061c:	mov	r9, r0
   20620:	ldr	r0, [fp, #8]
   20624:	mov	sl, r2
   20628:	mov	r8, r1
   2062c:	str	r3, [sp, #8]
   20630:	str	r0, [sp, #16]
   20634:	ldr	r2, [r9]
   20638:	add	r3, r2, r8, lsl #3
   2063c:	ldrb	r0, [r3, #4]!
   20640:	cmp	r0, #4
   20644:	bne	20734 <__assert_fail@plt+0xefd4>
   20648:	ldr	r0, [r9, #12]
   2064c:	ldr	r1, [r9, #20]
   20650:	add	r6, sl, sl, lsl #1
   20654:	ldr	r4, [r0, r8, lsl #2]
   20658:	add	r0, r1, r6, lsl #2
   2065c:	mov	r1, #0
   20660:	str	r1, [r0, #4]
   20664:	mov	r0, r9
   20668:	ldr	r1, [r2, r4, lsl #3]!
   2066c:	ldr	r2, [r2, #4]
   20670:	bl	20220 <__assert_fail@plt+0xeac0>
   20674:	mov	r7, r0
   20678:	mov	r0, #12
   2067c:	cmn	r7, #1
   20680:	str	r0, [sp, #12]
   20684:	beq	20ab4 <__assert_fail@plt+0xf354>
   20688:	ldr	r1, [r9]
   2068c:	movw	r0, #65280	; 0xff00
   20690:	movw	r3, #255	; 0xff
   20694:	movt	r0, #3
   20698:	movt	r3, #65532	; 0xfffc
   2069c:	mov	ip, r0
   206a0:	ldr	r0, [sp, #16]
   206a4:	add	r1, r1, r7, lsl #3
   206a8:	ldr	r2, [r1, #4]
   206ac:	and	r0, ip, r0, lsl #8
   206b0:	and	r2, r2, r3
   206b4:	orr	r0, r2, r0
   206b8:	str	r0, [r1, #4]
   206bc:	ldr	r0, [r9]
   206c0:	add	r1, r0, r4, lsl #3
   206c4:	add	r0, r0, r7, lsl #3
   206c8:	ldr	r1, [r1, #4]
   206cc:	ldr	r2, [r0, #4]
   206d0:	and	r1, r1, ip
   206d4:	orr	r1, r1, r2
   206d8:	str	r1, [r0, #4]
   206dc:	ldr	r0, [r9]
   206e0:	add	r0, r0, r7, lsl #3
   206e4:	ldr	r1, [r0, #4]
   206e8:	orr	r1, r1, #262144	; 0x40000
   206ec:	str	r1, [r0, #4]
   206f0:	ldr	r0, [r9, #16]
   206f4:	str	r4, [r0, r7, lsl #2]
   206f8:	ldr	r0, [r9, #12]
   206fc:	ldr	r1, [r0, r8, lsl #2]
   20700:	str	r1, [r0, sl, lsl #2]
   20704:	mov	r1, r7
   20708:	ldr	r0, [r9, #20]
   2070c:	add	r0, r0, r6, lsl #2
   20710:	bl	20c50 <__assert_fail@plt+0xf4f0>
   20714:	mov	r1, #0
   20718:	cmp	r0, #0
   2071c:	mov	r8, r4
   20720:	mov	sl, r7
   20724:	beq	20ab4 <__assert_fail@plt+0xf354>
   20728:	cmp	r1, #0
   2072c:	beq	20634 <__assert_fail@plt+0xeed4>
   20730:	b	20a8c <__assert_fail@plt+0xf32c>
   20734:	ldr	r0, [r9, #20]
   20738:	add	ip, r8, r8, lsl #1
   2073c:	add	r7, r0, ip, lsl #2
   20740:	ldr	r1, [r7, #4]
   20744:	cmp	r1, #0
   20748:	beq	20aa0 <__assert_fail@plt+0xf340>
   2074c:	ldr	r7, [r7, #8]
   20750:	add	r6, sl, sl, lsl #1
   20754:	cmp	r1, #1
   20758:	add	r0, r0, r6, lsl #2
   2075c:	ldr	r5, [r7]
   20760:	mov	r7, #0
   20764:	str	r7, [r0, #4]
   20768:	bne	207a4 <__assert_fail@plt+0xf044>
   2076c:	ldr	r1, [sp, #8]
   20770:	cmp	r8, r1
   20774:	bne	209a4 <__assert_fail@plt+0xf244>
   20778:	cmp	sl, r8
   2077c:	beq	209a4 <__assert_fail@plt+0xf244>
   20780:	mov	r1, r5
   20784:	bl	20c50 <__assert_fail@plt+0xf4f0>
   20788:	ldr	r8, [sp, #8]
   2078c:	cmp	r0, #0
   20790:	mov	r1, #1
   20794:	movwne	r1, #2
   20798:	cmp	r1, #0
   2079c:	beq	20634 <__assert_fail@plt+0xeed4>
   207a0:	b	20a8c <__assert_fail@plt+0xf32c>
   207a4:	ldr	r1, [r9, #8]
   207a8:	ldr	r8, [sp, #16]
   207ac:	str	r6, [sp, #4]
   207b0:	sub	r3, r1, #1
   207b4:	cmp	r3, #1
   207b8:	blt	20808 <__assert_fail@plt+0xf0a8>
   207bc:	add	r3, r2, r3, lsl #3
   207c0:	ldr	r6, [r3, #4]
   207c4:	ands	r3, r6, #262144	; 0x40000
   207c8:	beq	20808 <__assert_fail@plt+0xf0a8>
   207cc:	ldr	r4, [r9, #16]
   207d0:	sub	r3, r2, #12
   207d4:	sub	r4, r4, #4
   207d8:	ldr	r7, [r4, r1, lsl #2]
   207dc:	cmp	r7, r5
   207e0:	ubfxeq	r7, r6, #8, #10
   207e4:	cmpeq	r7, r8
   207e8:	beq	20a6c <__assert_fail@plt+0xf30c>
   207ec:	sub	r7, r1, #2
   207f0:	cmp	r7, #1
   207f4:	blt	20808 <__assert_fail@plt+0xf0a8>
   207f8:	ldr	r6, [r3, r1, lsl #3]
   207fc:	sub	r1, r1, #1
   20800:	ands	r7, r6, #262144	; 0x40000
   20804:	bne	207d8 <__assert_fail@plt+0xf078>
   20808:	ldr	r1, [r2, r5, lsl #3]!
   2080c:	mov	r0, r9
   20810:	mov	sl, ip
   20814:	ldr	r2, [r2, #4]
   20818:	bl	20220 <__assert_fail@plt+0xeac0>
   2081c:	mov	r4, r0
   20820:	mov	r0, #12
   20824:	cmn	r4, #1
   20828:	str	r0, [sp, #12]
   2082c:	beq	20ab4 <__assert_fail@plt+0xf354>
   20830:	ldr	r1, [r9]
   20834:	movw	r0, #65280	; 0xff00
   20838:	movw	r7, #255	; 0xff
   2083c:	ldr	r6, [sp, #4]
   20840:	movt	r0, #3
   20844:	movt	r7, #65532	; 0xfffc
   20848:	mov	r3, r0
   2084c:	and	r0, r0, r8, lsl #8
   20850:	add	r1, r1, r4, lsl #3
   20854:	ldr	r2, [r1, #4]
   20858:	and	r2, r2, r7
   2085c:	orr	r0, r2, r0
   20860:	str	r0, [r1, #4]
   20864:	ldr	r0, [r9]
   20868:	add	r1, r0, r5, lsl #3
   2086c:	add	r0, r0, r4, lsl #3
   20870:	ldr	r1, [r1, #4]
   20874:	ldr	r2, [r0, #4]
   20878:	and	r1, r1, r3
   2087c:	orr	r1, r1, r2
   20880:	str	r1, [r0, #4]
   20884:	ldr	r0, [r9]
   20888:	add	r0, r0, r4, lsl #3
   2088c:	ldr	r1, [r0, #4]
   20890:	orr	r1, r1, #262144	; 0x40000
   20894:	str	r1, [r0, #4]
   20898:	mov	r1, r4
   2089c:	ldr	r0, [r9, #16]
   208a0:	str	r5, [r0, r4, lsl #2]
   208a4:	ldr	r0, [r9, #20]
   208a8:	add	r0, r0, r6, lsl #2
   208ac:	bl	20c50 <__assert_fail@plt+0xf4f0>
   208b0:	cmp	r0, #0
   208b4:	beq	20ab4 <__assert_fail@plt+0xf354>
   208b8:	ldr	r0, [sp, #16]
   208bc:	ldr	r3, [sp, #8]
   208c0:	mov	r1, r5
   208c4:	mov	r2, r4
   208c8:	str	r0, [sp]
   208cc:	mov	r0, r9
   208d0:	bl	20610 <__assert_fail@plt+0xeeb0>
   208d4:	cmp	r0, #0
   208d8:	bne	20ab0 <__assert_fail@plt+0xf350>
   208dc:	ldr	r1, [r9, #20]
   208e0:	ldr	r0, [r9]
   208e4:	add	r1, r1, sl, lsl #2
   208e8:	ldr	r1, [r1, #8]
   208ec:	ldr	r8, [r1, #4]
   208f0:	ldr	r1, [r0, r8, lsl #3]!
   208f4:	ldr	r2, [r0, #4]
   208f8:	mov	r0, r9
   208fc:	bl	20220 <__assert_fail@plt+0xeac0>
   20900:	mov	sl, r0
   20904:	mov	r0, #12
   20908:	cmn	sl, #1
   2090c:	str	r0, [sp, #12]
   20910:	beq	20ab4 <__assert_fail@plt+0xf354>
   20914:	ldr	r1, [r9]
   20918:	movw	r0, #65280	; 0xff00
   2091c:	movw	r7, #255	; 0xff
   20920:	movt	r0, #3
   20924:	movt	r7, #65532	; 0xfffc
   20928:	mov	r3, r0
   2092c:	ldr	r0, [sp, #16]
   20930:	add	r1, r1, sl, lsl #3
   20934:	ldr	r2, [r1, #4]
   20938:	and	r0, r3, r0, lsl #8
   2093c:	and	r2, r2, r7
   20940:	orr	r0, r2, r0
   20944:	str	r0, [r1, #4]
   20948:	ldr	r0, [r9]
   2094c:	add	r1, r0, r8, lsl #3
   20950:	add	r0, r0, sl, lsl #3
   20954:	ldr	r1, [r1, #4]
   20958:	ldr	r2, [r0, #4]
   2095c:	and	r1, r1, r3
   20960:	orr	r1, r1, r2
   20964:	str	r1, [r0, #4]
   20968:	ldr	r0, [r9]
   2096c:	add	r0, r0, sl, lsl #3
   20970:	ldr	r1, [r0, #4]
   20974:	orr	r1, r1, #262144	; 0x40000
   20978:	str	r1, [r0, #4]
   2097c:	mov	r1, sl
   20980:	ldr	r0, [r9, #16]
   20984:	str	r8, [r0, sl, lsl #2]
   20988:	ldr	r0, [r9, #20]
   2098c:	add	r0, r0, r6, lsl #2
   20990:	bl	20c50 <__assert_fail@plt+0xf4f0>
   20994:	mov	r1, #0
   20998:	cmp	r0, #0
   2099c:	bne	20728 <__assert_fail@plt+0xefc8>
   209a0:	b	20ab4 <__assert_fail@plt+0xf354>
   209a4:	ldr	r1, [r2, r5, lsl #3]!
   209a8:	ldr	r4, [r3]
   209ac:	mov	r0, r9
   209b0:	ldr	r2, [r2, #4]
   209b4:	bl	20220 <__assert_fail@plt+0xeac0>
   209b8:	mov	sl, r0
   209bc:	ubfx	r0, r4, #8, #10
   209c0:	mov	r1, #12
   209c4:	cmn	sl, #1
   209c8:	str	r1, [sp, #12]
   209cc:	beq	20ab4 <__assert_fail@plt+0xf354>
   209d0:	ldr	r1, [sp, #16]
   209d4:	movw	r7, #255	; 0xff
   209d8:	movt	r7, #65532	; 0xfffc
   209dc:	orr	r1, r0, r1
   209e0:	movw	r0, #65280	; 0xff00
   209e4:	movt	r0, #3
   209e8:	str	r1, [sp, #16]
   209ec:	mov	r3, r0
   209f0:	and	r0, r0, r1, lsl #8
   209f4:	ldr	r1, [r9]
   209f8:	add	r1, r1, sl, lsl #3
   209fc:	ldr	r2, [r1, #4]
   20a00:	and	r2, r2, r7
   20a04:	orr	r0, r2, r0
   20a08:	str	r0, [r1, #4]
   20a0c:	ldr	r0, [r9]
   20a10:	add	r1, r0, r5, lsl #3
   20a14:	add	r0, r0, sl, lsl #3
   20a18:	ldr	r1, [r1, #4]
   20a1c:	ldr	r2, [r0, #4]
   20a20:	and	r1, r1, r3
   20a24:	orr	r1, r1, r2
   20a28:	str	r1, [r0, #4]
   20a2c:	ldr	r0, [r9]
   20a30:	add	r0, r0, sl, lsl #3
   20a34:	ldr	r1, [r0, #4]
   20a38:	orr	r1, r1, #262144	; 0x40000
   20a3c:	str	r1, [r0, #4]
   20a40:	mov	r1, sl
   20a44:	ldr	r0, [r9, #16]
   20a48:	str	r5, [r0, sl, lsl #2]
   20a4c:	ldr	r0, [r9, #20]
   20a50:	add	r0, r0, r6, lsl #2
   20a54:	bl	20c50 <__assert_fail@plt+0xf4f0>
   20a58:	mov	r1, #0
   20a5c:	cmp	r0, #0
   20a60:	mov	r8, r5
   20a64:	bne	20728 <__assert_fail@plt+0xefc8>
   20a68:	b	20ab4 <__assert_fail@plt+0xf354>
   20a6c:	sub	r1, r1, #1
   20a70:	mov	sl, ip
   20a74:	bl	20c50 <__assert_fail@plt+0xf4f0>
   20a78:	ldr	r6, [sp, #4]
   20a7c:	cmp	r0, #0
   20a80:	bne	208dc <__assert_fail@plt+0xf17c>
   20a84:	mov	r0, #12
   20a88:	b	20ab0 <__assert_fail@plt+0xf350>
   20a8c:	mov	r0, #12
   20a90:	cmp	r1, #2
   20a94:	str	r0, [sp, #12]
   20a98:	beq	20aac <__assert_fail@plt+0xf34c>
   20a9c:	b	20ab4 <__assert_fail@plt+0xf354>
   20aa0:	ldr	r0, [r9, #12]
   20aa4:	ldr	r1, [r0, r8, lsl #2]
   20aa8:	str	r1, [r0, sl, lsl #2]
   20aac:	mov	r0, #0
   20ab0:	str	r0, [sp, #12]
   20ab4:	ldr	r0, [sp, #12]
   20ab8:	sub	sp, fp, #28
   20abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20ac0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20ac4:	add	fp, sp, #24
   20ac8:	mov	r8, #0
   20acc:	cmp	r1, #0
   20ad0:	beq	20c28 <__assert_fail@plt+0xf4c8>
   20ad4:	mov	r5, r0
   20ad8:	ldr	r0, [r1, #4]
   20adc:	mov	r9, r1
   20ae0:	cmp	r0, #0
   20ae4:	beq	20c28 <__assert_fail@plt+0xf4c8>
   20ae8:	ldr	r1, [r5, #4]
   20aec:	ldr	r2, [r5]
   20af0:	add	r3, r1, r0, lsl #1
   20af4:	cmp	r2, r3
   20af8:	bge	20b28 <__assert_fail@plt+0xf3c8>
   20afc:	add	r7, r2, r0
   20b00:	ldr	r0, [r5, #8]
   20b04:	lsl	r1, r7, #3
   20b08:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20b0c:	cmp	r0, #0
   20b10:	beq	20c44 <__assert_fail@plt+0xf4e4>
   20b14:	str	r0, [r5, #8]
   20b18:	lsl	r0, r7, #1
   20b1c:	str	r0, [r5]
   20b20:	ldr	r1, [r5, #4]
   20b24:	ldr	r0, [r9, #4]
   20b28:	cmp	r1, #0
   20b2c:	beq	20c30 <__assert_fail@plt+0xf4d0>
   20b30:	add	r7, r1, r0, lsl #1
   20b34:	sub	r1, r1, #1
   20b38:	sub	r0, r0, #1
   20b3c:	orr	r2, r0, r1
   20b40:	cmp	r2, #0
   20b44:	blt	20b90 <__assert_fail@plt+0xf430>
   20b48:	ldr	r2, [r9, #8]
   20b4c:	ldr	r3, [r5, #8]
   20b50:	ldr	r4, [r2, r0, lsl #2]
   20b54:	ldr	r6, [r3, r1, lsl #2]
   20b58:	cmp	r6, r4
   20b5c:	bne	20b6c <__assert_fail@plt+0xf40c>
   20b60:	sub	r1, r1, #1
   20b64:	sub	r0, r0, #1
   20b68:	b	20b84 <__assert_fail@plt+0xf424>
   20b6c:	bge	20b80 <__assert_fail@plt+0xf420>
   20b70:	sub	r7, r7, #1
   20b74:	sub	r0, r0, #1
   20b78:	str	r4, [r3, r7, lsl #2]
   20b7c:	b	20b84 <__assert_fail@plt+0xf424>
   20b80:	sub	r1, r1, #1
   20b84:	orr	r6, r0, r1
   20b88:	cmn	r6, #1
   20b8c:	bgt	20b50 <__assert_fail@plt+0xf3f0>
   20b90:	cmp	r0, #0
   20b94:	blt	20bb4 <__assert_fail@plt+0xf454>
   20b98:	add	r2, r0, #1
   20b9c:	ldr	r0, [r5, #8]
   20ba0:	ldr	r1, [r9, #8]
   20ba4:	sub	r7, r7, r2
   20ba8:	lsl	r2, r2, #2
   20bac:	add	r0, r0, r7, lsl #2
   20bb0:	bl	11484 <memcpy@plt>
   20bb4:	ldr	r0, [r5, #4]
   20bb8:	ldr	r2, [r9, #4]
   20bbc:	sub	r1, r0, #1
   20bc0:	add	r3, r1, r2, lsl #1
   20bc4:	sub	r2, r3, r7
   20bc8:	adds	r2, r2, #1
   20bcc:	beq	20c28 <__assert_fail@plt+0xf4c8>
   20bd0:	add	r0, r2, r0
   20bd4:	str	r0, [r5, #4]
   20bd8:	ldr	r0, [r5, #8]
   20bdc:	ldr	r6, [r0, r1, lsl #2]
   20be0:	ldr	r5, [r0, r3, lsl #2]
   20be4:	cmp	r5, r6
   20be8:	ble	20c04 <__assert_fail@plt+0xf4a4>
   20bec:	add	r6, r2, r1
   20bf0:	subs	r2, r2, #1
   20bf4:	sub	r3, r3, #1
   20bf8:	str	r5, [r0, r6, lsl #2]
   20bfc:	bne	20bdc <__assert_fail@plt+0xf47c>
   20c00:	b	20c28 <__assert_fail@plt+0xf4c8>
   20c04:	add	r5, r2, r1
   20c08:	cmp	r1, #0
   20c0c:	str	r6, [r0, r5, lsl #2]
   20c10:	sub	r6, r1, #1
   20c14:	mov	r1, r6
   20c18:	bgt	20bdc <__assert_fail@plt+0xf47c>
   20c1c:	add	r1, r0, r7, lsl #2
   20c20:	lsl	r2, r2, #2
   20c24:	bl	11484 <memcpy@plt>
   20c28:	mov	r0, r8
   20c2c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c30:	str	r0, [r5, #4]
   20c34:	ldr	r0, [r5, #8]
   20c38:	ldr	r2, [r9, #4]
   20c3c:	ldr	r1, [r9, #8]
   20c40:	b	20c20 <__assert_fail@plt+0xf4c0>
   20c44:	mov	r8, #12
   20c48:	mov	r0, r8
   20c4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20c50:	push	{r4, r5, r6, sl, fp, lr}
   20c54:	add	fp, sp, #16
   20c58:	ldr	r2, [r0]
   20c5c:	mov	r5, r1
   20c60:	mov	r4, r0
   20c64:	cmp	r2, #0
   20c68:	beq	20c98 <__assert_fail@plt+0xf538>
   20c6c:	ldr	r1, [r4, #4]
   20c70:	cmp	r1, #0
   20c74:	bne	20cd4 <__assert_fail@plt+0xf574>
   20c78:	ldr	r0, [r4, #8]
   20c7c:	str	r5, [r0]
   20c80:	ldr	r0, [r4, #4]
   20c84:	mov	r6, #1
   20c88:	add	r0, r0, #1
   20c8c:	str	r0, [r4, #4]
   20c90:	mov	r0, r6
   20c94:	pop	{r4, r5, r6, sl, fp, pc}
   20c98:	mov	r6, #1
   20c9c:	mov	r0, #4
   20ca0:	str	r6, [r4]
   20ca4:	str	r6, [r4, #4]
   20ca8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   20cac:	cmp	r0, #0
   20cb0:	str	r0, [r4, #8]
   20cb4:	strne	r5, [r0]
   20cb8:	movne	r0, r6
   20cbc:	popne	{r4, r5, r6, sl, fp, pc}
   20cc0:	mov	r6, #0
   20cc4:	mov	r0, r6
   20cc8:	str	r6, [r4]
   20ccc:	str	r6, [r4, #4]
   20cd0:	pop	{r4, r5, r6, sl, fp, pc}
   20cd4:	cmp	r2, r1
   20cd8:	bne	20d04 <__assert_fail@plt+0xf5a4>
   20cdc:	lsl	r0, r2, #1
   20ce0:	lsl	r1, r2, #3
   20ce4:	str	r0, [r4]
   20ce8:	ldr	r0, [r4, #8]
   20cec:	bl	2a8dc <__assert_fail@plt+0x1917c>
   20cf0:	cmp	r0, #0
   20cf4:	beq	20d80 <__assert_fail@plt+0xf620>
   20cf8:	str	r0, [r4, #8]
   20cfc:	ldr	r1, [r4, #4]
   20d00:	b	20d08 <__assert_fail@plt+0xf5a8>
   20d04:	ldr	r0, [r4, #8]
   20d08:	ldr	r2, [r0]
   20d0c:	cmp	r2, r5
   20d10:	ble	20d48 <__assert_fail@plt+0xf5e8>
   20d14:	cmp	r1, #1
   20d18:	blt	20d78 <__assert_fail@plt+0xf618>
   20d1c:	add	r2, r0, r1, lsl #2
   20d20:	add	r1, r1, #1
   20d24:	mov	r3, r2
   20d28:	ldr	r6, [r3, #-4]!
   20d2c:	sub	r1, r1, #1
   20d30:	cmp	r1, #1
   20d34:	str	r6, [r2]
   20d38:	mov	r2, r3
   20d3c:	bgt	20d28 <__assert_fail@plt+0xf5c8>
   20d40:	sub	r1, r1, #1
   20d44:	b	20d78 <__assert_fail@plt+0xf618>
   20d48:	add	r2, r0, r1, lsl #2
   20d4c:	ldr	r3, [r2, #-4]
   20d50:	cmp	r3, r5
   20d54:	ble	20d78 <__assert_fail@plt+0xf618>
   20d58:	sub	r1, r1, #2
   20d5c:	str	r3, [r2]
   20d60:	sub	r1, r1, #1
   20d64:	ldr	r3, [r2, #-8]
   20d68:	sub	r2, r2, #4
   20d6c:	cmp	r3, r5
   20d70:	bgt	20d5c <__assert_fail@plt+0xf5fc>
   20d74:	add	r1, r1, #2
   20d78:	str	r5, [r0, r1, lsl #2]
   20d7c:	b	20c80 <__assert_fail@plt+0xf520>
   20d80:	mov	r6, #0
   20d84:	mov	r0, r6
   20d88:	pop	{r4, r5, r6, sl, fp, pc}
   20d8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d90:	add	fp, sp, #28
   20d94:	sub	sp, sp, #28
   20d98:	ldr	lr, [r2, #4]
   20d9c:	str	r2, [sp, #24]
   20da0:	cmp	lr, #0
   20da4:	beq	20f40 <__assert_fail@plt+0xf7e0>
   20da8:	mov	r9, r3
   20dac:	add	r7, lr, r3
   20db0:	cmp	lr, #1
   20db4:	str	r0, [sp, #4]
   20db8:	blt	20e2c <__assert_fail@plt+0xf6cc>
   20dbc:	ldr	r0, [sp, #24]
   20dc0:	mov	r2, #0
   20dc4:	cmp	lr, #4
   20dc8:	ldr	r5, [r0, #8]
   20dcc:	bcc	20e14 <__assert_fail@plt+0xf6b4>
   20dd0:	mov	r0, #0
   20dd4:	bic	r2, lr, #3
   20dd8:	vdup.32	q8, r0
   20ddc:	mov	r3, r2
   20de0:	mov	r0, r5
   20de4:	vmov.32	d16[0], r7
   20de8:	vld1.32	{d18-d19}, [r0]!
   20dec:	subs	r3, r3, #4
   20df0:	vadd.i32	q8, q9, q8
   20df4:	bne	20de8 <__assert_fail@plt+0xf688>
   20df8:	vext.8	q9, q8, q8, #8
   20dfc:	cmp	lr, r2
   20e00:	vadd.i32	q8, q8, q9
   20e04:	vdup.32	q9, d16[1]
   20e08:	vadd.i32	q8, q8, q9
   20e0c:	vmov.32	r7, d16[0]
   20e10:	beq	20e2c <__assert_fail@plt+0xf6cc>
   20e14:	add	r3, r5, r2, lsl #2
   20e18:	sub	r2, lr, r2
   20e1c:	ldr	r0, [r3], #4
   20e20:	subs	r2, r2, #1
   20e24:	add	r7, r0, r7
   20e28:	bne	20e1c <__assert_fail@plt+0xf6bc>
   20e2c:	ldr	r0, [r1, #32]
   20e30:	mov	sl, r1
   20e34:	ldr	r1, [r1, #68]	; 0x44
   20e38:	and	r1, r1, r7
   20e3c:	add	r2, r1, r1, lsl #1
   20e40:	ldr	r1, [r0, r2, lsl #2]
   20e44:	cmp	r1, #1
   20e48:	blt	20ee0 <__assert_fail@plt+0xf780>
   20e4c:	add	r0, r0, r2, lsl #2
   20e50:	sub	ip, lr, #1
   20e54:	mov	r3, #0
   20e58:	ldr	r8, [r0, #8]
   20e5c:	b	20ea0 <__assert_fail@plt+0xf740>
   20e60:	ldr	r0, [r5, #4]
   20e64:	cmp	r0, lr
   20e68:	bne	20ed4 <__assert_fail@plt+0xf774>
   20e6c:	mov	r0, ip
   20e70:	add	r6, r0, #1
   20e74:	cmp	r6, #1
   20e78:	blt	21184 <__assert_fail@plt+0xfa24>
   20e7c:	ldr	r2, [sp, #24]
   20e80:	ldr	r6, [r2, #8]
   20e84:	ldr	r2, [r5, #8]
   20e88:	ldr	r6, [r6, r0, lsl #2]
   20e8c:	ldr	r2, [r2, r0, lsl #2]
   20e90:	sub	r0, r0, #1
   20e94:	cmp	r2, r6
   20e98:	beq	20e70 <__assert_fail@plt+0xf710>
   20e9c:	b	20ed4 <__assert_fail@plt+0xf774>
   20ea0:	ldr	r4, [r8, r3, lsl #2]
   20ea4:	ldr	r0, [r4]
   20ea8:	cmp	r0, r7
   20eac:	bne	20ed4 <__assert_fail@plt+0xf774>
   20eb0:	ldrb	r0, [r4, #52]	; 0x34
   20eb4:	and	r0, r0, #15
   20eb8:	cmp	r0, r9
   20ebc:	bne	20ed4 <__assert_fail@plt+0xf774>
   20ec0:	ldr	r0, [sp, #24]
   20ec4:	cmp	r0, #0
   20ec8:	ldrne	r5, [r4, #40]	; 0x28
   20ecc:	cmpne	r5, #0
   20ed0:	bne	20e60 <__assert_fail@plt+0xf700>
   20ed4:	add	r3, r3, #1
   20ed8:	cmp	r3, r1
   20edc:	blt	20ea0 <__assert_fail@plt+0xf740>
   20ee0:	mov	r0, #56	; 0x38
   20ee4:	mov	r1, #1
   20ee8:	bl	2a858 <__assert_fail@plt+0x190f8>
   20eec:	cmp	r0, #0
   20ef0:	beq	211a4 <__assert_fail@plt+0xfa44>
   20ef4:	mov	r4, r0
   20ef8:	ldr	r0, [sp, #24]
   20efc:	add	r6, r4, #4
   20f00:	ldr	r8, [r0, #4]
   20f04:	cmp	r8, #1
   20f08:	str	r8, [r4, #8]
   20f0c:	blt	20f4c <__assert_fail@plt+0xf7ec>
   20f10:	lsl	r0, r8, #2
   20f14:	str	r8, [r4, #4]
   20f18:	bl	2a8ac <__assert_fail@plt+0x1914c>
   20f1c:	cmp	r0, #0
   20f20:	str	r0, [r4, #12]
   20f24:	beq	211b8 <__assert_fail@plt+0xfa58>
   20f28:	ldr	r1, [sp, #24]
   20f2c:	ldr	r8, [r1, #4]
   20f30:	ldr	r1, [r1, #8]
   20f34:	lsl	r2, r8, #2
   20f38:	bl	11484 <memcpy@plt>
   20f3c:	b	20f5c <__assert_fail@plt+0xf7fc>
   20f40:	mov	r4, #0
   20f44:	str	r4, [r0]
   20f48:	b	21184 <__assert_fail@plt+0xfa24>
   20f4c:	mov	r0, #0
   20f50:	str	r0, [r6]
   20f54:	str	r0, [r6, #4]
   20f58:	str	r0, [r6, #8]
   20f5c:	str	r6, [r4, #40]	; 0x28
   20f60:	and	r0, r9, #15
   20f64:	cmp	r8, #1
   20f68:	ldrb	r1, [r4, #52]	; 0x34
   20f6c:	and	r1, r1, #240	; 0xf0
   20f70:	orr	r0, r1, r0
   20f74:	strb	r0, [r4, #52]	; 0x34
   20f78:	mov	r0, sl
   20f7c:	blt	21170 <__assert_fail@plt+0xfa10>
   20f80:	movw	lr, #65280	; 0xff00
   20f84:	and	r1, r9, #4
   20f88:	and	ip, r9, #1
   20f8c:	mov	r5, #0
   20f90:	str	r0, [sp, #16]
   20f94:	str	r1, [sp]
   20f98:	and	r1, r9, #2
   20f9c:	movt	lr, #3
   20fa0:	mov	r9, #0
   20fa4:	str	ip, [sp, #12]
   20fa8:	str	r1, [sp, #8]
   20fac:	add	r1, lr, #255	; 0xff
   20fb0:	str	r1, [sp, #20]
   20fb4:	b	20ff4 <__assert_fail@plt+0xf894>
   20fb8:	sub	r2, r2, #1
   20fbc:	cmp	r2, r1
   20fc0:	str	r2, [r4, #8]
   20fc4:	ble	21160 <__assert_fail@plt+0xfa00>
   20fc8:	ldr	r2, [r4, #12]
   20fcc:	add	r3, r2, r1, lsl #2
   20fd0:	ldr	r3, [r3, #4]
   20fd4:	str	r3, [r2, r1, lsl #2]
   20fd8:	add	r1, r1, #1
   20fdc:	ldr	r3, [r4, #8]
   20fe0:	cmp	r1, r3
   20fe4:	blt	20fcc <__assert_fail@plt+0xf86c>
   20fe8:	ldr	r1, [sp, #24]
   20fec:	ldr	r8, [r1, #4]
   20ff0:	b	21160 <__assert_fail@plt+0xfa00>
   20ff4:	ldr	r1, [sp, #24]
   20ff8:	ldr	r2, [r0]
   20ffc:	ldr	r1, [r1, #8]
   21000:	ldr	r1, [r1, r9, lsl #2]
   21004:	add	r1, r2, r1, lsl #3
   21008:	ldr	sl, [r1, #4]
   2100c:	ldr	r1, [sp, #20]
   21010:	and	r1, sl, r1
   21014:	cmp	r1, #1
   21018:	beq	21164 <__assert_fail@plt+0xfa04>
   2101c:	ldrb	r3, [r4, #52]	; 0x34
   21020:	mov	r2, #32
   21024:	and	r1, sl, lr
   21028:	and	r2, r2, sl, lsr #15
   2102c:	orr	r2, r3, r2
   21030:	uxtb	r3, sl
   21034:	cmp	r3, #2
   21038:	strb	r2, [r4, #52]	; 0x34
   2103c:	beq	21050 <__assert_fail@plt+0xf8f0>
   21040:	cmp	r3, #4
   21044:	bne	2105c <__assert_fail@plt+0xf8fc>
   21048:	mov	r3, #64	; 0x40
   2104c:	b	21054 <__assert_fail@plt+0xf8f4>
   21050:	mov	r3, #16
   21054:	orr	r2, r2, r3
   21058:	strb	r2, [r4, #52]	; 0x34
   2105c:	cmp	r1, #0
   21060:	beq	21164 <__assert_fail@plt+0xfa04>
   21064:	ldr	r1, [r4, #40]	; 0x28
   21068:	cmp	r1, r6
   2106c:	beq	21084 <__assert_fail@plt+0xf924>
   21070:	cmp	ip, #0
   21074:	bne	21118 <__assert_fail@plt+0xf9b8>
   21078:	ands	r1, sl, #256	; 0x100
   2107c:	bne	2114c <__assert_fail@plt+0xf9ec>
   21080:	b	21118 <__assert_fail@plt+0xf9b8>
   21084:	mov	r0, #12
   21088:	bl	2a8ac <__assert_fail@plt+0x1914c>
   2108c:	cmp	r0, #0
   21090:	beq	2119c <__assert_fail@plt+0xfa3c>
   21094:	mov	r5, r0
   21098:	str	r0, [r4, #40]	; 0x28
   2109c:	ldr	r0, [sp, #24]
   210a0:	ldr	r8, [r0, #4]
   210a4:	cmp	r8, #1
   210a8:	str	r8, [r5, #4]
   210ac:	blt	210e0 <__assert_fail@plt+0xf980>
   210b0:	lsl	r0, r8, #2
   210b4:	str	r8, [r5]
   210b8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   210bc:	cmp	r0, #0
   210c0:	str	r0, [r5, #8]
   210c4:	beq	21190 <__assert_fail@plt+0xfa30>
   210c8:	ldr	r1, [sp, #24]
   210cc:	ldr	r8, [r1, #4]
   210d0:	ldr	r1, [r1, #8]
   210d4:	lsl	r2, r8, #2
   210d8:	bl	11484 <memcpy@plt>
   210dc:	b	210f0 <__assert_fail@plt+0xf990>
   210e0:	mov	r0, #0
   210e4:	str	r0, [r5]
   210e8:	str	r0, [r5, #4]
   210ec:	str	r0, [r5, #8]
   210f0:	ldrb	r0, [r4, #52]	; 0x34
   210f4:	ldr	ip, [sp, #12]
   210f8:	movw	lr, #65280	; 0xff00
   210fc:	mov	r5, #0
   21100:	movt	lr, #3
   21104:	orr	r0, r0, #128	; 0x80
   21108:	strb	r0, [r4, #52]	; 0x34
   2110c:	ldr	r0, [sp, #16]
   21110:	cmp	ip, #0
   21114:	beq	21078 <__assert_fail@plt+0xf918>
   21118:	cmp	ip, #0
   2111c:	andsne	r1, sl, #512	; 0x200
   21120:	bne	2114c <__assert_fail@plt+0xf9ec>
   21124:	ldr	r1, [sp, #8]
   21128:	cmp	r1, #0
   2112c:	bne	21138 <__assert_fail@plt+0xf9d8>
   21130:	ands	r1, sl, #4096	; 0x1000
   21134:	bne	2114c <__assert_fail@plt+0xf9ec>
   21138:	ldr	r1, [sp]
   2113c:	cmp	r1, #0
   21140:	bne	21164 <__assert_fail@plt+0xfa04>
   21144:	ands	r1, sl, #16384	; 0x4000
   21148:	beq	21164 <__assert_fail@plt+0xfa04>
   2114c:	sub	r1, r9, r5
   21150:	cmp	r1, #0
   21154:	ldrge	r2, [r4, #8]
   21158:	cmpge	r2, r1
   2115c:	bgt	20fb8 <__assert_fail@plt+0xf858>
   21160:	add	r5, r5, #1
   21164:	add	r9, r9, #1
   21168:	cmp	r9, r8
   2116c:	blt	20ff4 <__assert_fail@plt+0xf894>
   21170:	mov	r1, r4
   21174:	mov	r2, r7
   21178:	bl	211d0 <__assert_fail@plt+0xfa70>
   2117c:	cmp	r0, #0
   21180:	bne	2119c <__assert_fail@plt+0xfa3c>
   21184:	mov	r0, r4
   21188:	sub	sp, fp, #28
   2118c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21190:	mov	r0, #0
   21194:	str	r0, [r5]
   21198:	str	r0, [r5, #4]
   2119c:	mov	r0, r4
   211a0:	bl	1b1ec <__assert_fail@plt+0x9a8c>
   211a4:	ldr	r1, [sp, #4]
   211a8:	mov	r0, #12
   211ac:	mov	r4, #0
   211b0:	str	r0, [r1]
   211b4:	b	21184 <__assert_fail@plt+0xfa24>
   211b8:	mov	r0, #0
   211bc:	str	r0, [r4, #4]
   211c0:	str	r0, [r4, #8]
   211c4:	mov	r0, r4
   211c8:	bl	141c4 <__assert_fail@plt+0x2a64>
   211cc:	b	211a4 <__assert_fail@plt+0xfa44>
   211d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211d4:	add	fp, sp, #28
   211d8:	sub	sp, sp, #4
   211dc:	str	r2, [r1]
   211e0:	mov	r4, r1
   211e4:	mov	r7, r0
   211e8:	mov	r0, #0
   211ec:	mov	r9, r2
   211f0:	ldr	r1, [r1, #8]
   211f4:	str	r1, [r4, #16]
   211f8:	str	r0, [r4, #20]
   211fc:	lsl	r0, r1, #2
   21200:	bl	2a8ac <__assert_fail@plt+0x1914c>
   21204:	mov	r8, #12
   21208:	cmp	r0, #0
   2120c:	str	r0, [r4, #24]
   21210:	beq	212d0 <__assert_fail@plt+0xfb70>
   21214:	ldr	r1, [r4, #8]
   21218:	cmp	r1, #1
   2121c:	blt	21290 <__assert_fail@plt+0xfb30>
   21220:	mov	r5, #0
   21224:	mov	sl, #2
   21228:	ldr	r2, [r4, #12]
   2122c:	ldr	r6, [r2, r5, lsl #2]
   21230:	ldr	r2, [r7]
   21234:	add	r2, r2, r6, lsl #3
   21238:	ldrb	r2, [r2, #4]
   2123c:	tst	r2, #8
   21240:	bne	21284 <__assert_fail@plt+0xfb24>
   21244:	ldr	r2, [r4, #16]
   21248:	ldr	r1, [r4, #20]
   2124c:	cmp	r2, r1
   21250:	bne	21274 <__assert_fail@plt+0xfb14>
   21254:	add	r1, sl, r2, lsl #1
   21258:	str	r1, [r4, #16]
   2125c:	lsl	r1, r1, #2
   21260:	bl	2a8dc <__assert_fail@plt+0x1917c>
   21264:	cmp	r0, #0
   21268:	beq	212d0 <__assert_fail@plt+0xfb70>
   2126c:	str	r0, [r4, #24]
   21270:	ldr	r1, [r4, #20]
   21274:	add	r2, r1, #1
   21278:	str	r2, [r4, #20]
   2127c:	str	r6, [r0, r1, lsl #2]
   21280:	ldr	r1, [r4, #8]
   21284:	add	r5, r5, #1
   21288:	cmp	r5, r1
   2128c:	blt	21228 <__assert_fail@plt+0xfac8>
   21290:	ldr	r1, [r7, #68]	; 0x44
   21294:	ldr	r0, [r7, #32]
   21298:	and	r1, r1, r9
   2129c:	mov	r5, r0
   212a0:	add	r2, r1, r1, lsl #1
   212a4:	ldr	r1, [r5, r2, lsl #2]!
   212a8:	mov	r6, r5
   212ac:	ldr	r3, [r6, #4]!
   212b0:	cmp	r3, r1
   212b4:	ble	212dc <__assert_fail@plt+0xfb7c>
   212b8:	add	r0, r0, r2, lsl #2
   212bc:	ldr	r0, [r0, #8]
   212c0:	add	r2, r1, #1
   212c4:	mov	r8, #0
   212c8:	str	r2, [r5]
   212cc:	str	r4, [r0, r1, lsl #2]
   212d0:	mov	r0, r8
   212d4:	sub	sp, fp, #28
   212d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212dc:	add	r7, r0, r2, lsl #2
   212e0:	mov	r2, #2
   212e4:	ldr	r0, [r7, #8]!
   212e8:	add	r9, r2, r1, lsl #1
   212ec:	lsl	r1, r9, #2
   212f0:	bl	2a8dc <__assert_fail@plt+0x1917c>
   212f4:	cmp	r0, #0
   212f8:	beq	212d0 <__assert_fail@plt+0xfb70>
   212fc:	str	r0, [r7]
   21300:	str	r9, [r6]
   21304:	ldr	r1, [r5]
   21308:	b	212c0 <__assert_fail@plt+0xfb60>
   2130c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21310:	add	fp, sp, #28
   21314:	sub	sp, sp, #36	; 0x24
   21318:	mov	r4, r0
   2131c:	ldr	r0, [r0, #24]
   21320:	mov	r6, r2
   21324:	mov	r9, r1
   21328:	cmp	r0, r1
   2132c:	ble	2152c <__assert_fail@plt+0xfdcc>
   21330:	ldr	r0, [r4, #80]	; 0x50
   21334:	mov	r1, #4
   21338:	mov	r5, r9
   2133c:	cmp	r0, #2
   21340:	movge	r0, #0
   21344:	strge	r0, [r4, #16]
   21348:	strge	r0, [r4, #20]
   2134c:	mov	r0, #0
   21350:	tst	r6, #1
   21354:	str	r0, [r4, #24]
   21358:	str	r0, [r4, #28]
   2135c:	str	r0, [r4, #32]
   21360:	strb	r0, [r4, #76]	; 0x4c
   21364:	movweq	r1, #6
   21368:	ldr	r2, [r4, #44]	; 0x2c
   2136c:	ldr	r3, [r4, #52]	; 0x34
   21370:	str	r2, [r4, #48]	; 0x30
   21374:	str	r3, [r4, #56]	; 0x38
   21378:	str	r1, [r4, #60]	; 0x3c
   2137c:	ldrb	r1, [r4, #75]	; 0x4b
   21380:	cmp	r1, #0
   21384:	ldreq	r1, [r4]
   21388:	streq	r1, [r4, #4]
   2138c:	cmp	r5, #0
   21390:	beq	214b4 <__assert_fail@plt+0xfd54>
   21394:	ldr	r1, [r4, #32]
   21398:	cmp	r5, r1
   2139c:	bge	2153c <__assert_fail@plt+0xfddc>
   213a0:	ldrb	r0, [r4, #76]	; 0x4c
   213a4:	cmp	r0, #0
   213a8:	bne	2163c <__assert_fail@plt+0xfedc>
   213ac:	cmp	r5, #0
   213b0:	ble	213f4 <__assert_fail@plt+0xfc94>
   213b4:	ldr	r1, [r4, #48]	; 0x30
   213b8:	sub	r0, r5, #1
   213bc:	cmp	r1, r0
   213c0:	beq	216f4 <__assert_fail@plt+0xff94>
   213c4:	ldr	r1, [r4, #80]	; 0x50
   213c8:	cmp	r1, #2
   213cc:	blt	213fc <__assert_fail@plt+0xfc9c>
   213d0:	ldr	r0, [r4, #8]
   213d4:	mov	r1, r5
   213d8:	sub	r0, r0, #4
   213dc:	ldr	r6, [r0, r1, lsl #2]
   213e0:	cmn	r6, #1
   213e4:	bne	21430 <__assert_fail@plt+0xfcd0>
   213e8:	sub	r1, r1, #1
   213ec:	cmp	r1, #0
   213f0:	bgt	213dc <__assert_fail@plt+0xfc7c>
   213f4:	ldr	r1, [r4, #60]	; 0x3c
   213f8:	b	21454 <__assert_fail@plt+0xfcf4>
   213fc:	ldr	r1, [r4, #4]
   21400:	ldr	r2, [r4, #68]	; 0x44
   21404:	ldrb	r0, [r1, r0]
   21408:	ubfx	r1, r0, #5, #3
   2140c:	and	r3, r0, #31
   21410:	ldr	r2, [r2, r1, lsl #2]
   21414:	mov	r1, #1
   21418:	tst	r2, r1, lsl r3
   2141c:	bne	21454 <__assert_fail@plt+0xfcf4>
   21420:	mov	r1, #0
   21424:	cmp	r0, #10
   21428:	beq	21448 <__assert_fail@plt+0xfce8>
   2142c:	b	21454 <__assert_fail@plt+0xfcf4>
   21430:	ldrb	r0, [r4, #78]	; 0x4e
   21434:	cmp	r0, #0
   21438:	bne	219b0 <__assert_fail@plt+0x10250>
   2143c:	mov	r1, #0
   21440:	cmp	r6, #10
   21444:	bne	21454 <__assert_fail@plt+0xfcf4>
   21448:	ldrb	r1, [r4, #77]	; 0x4d
   2144c:	cmp	r1, #0
   21450:	movwne	r1, #2
   21454:	str	r1, [r4, #60]	; 0x3c
   21458:	ldr	r0, [r4, #80]	; 0x50
   2145c:	cmp	r0, #2
   21460:	blt	2147c <__assert_fail@plt+0xfd1c>
   21464:	ldr	r2, [r4, #28]
   21468:	ldr	r0, [r4, #8]
   2146c:	sub	r2, r2, r5
   21470:	add	r1, r0, r5, lsl #2
   21474:	lsl	r2, r2, #2
   21478:	bl	11454 <memmove@plt>
   2147c:	ldrb	r0, [r4, #75]	; 0x4b
   21480:	cmp	r0, #0
   21484:	bne	216dc <__assert_fail@plt+0xff7c>
   21488:	ldr	r0, [r4, #28]
   2148c:	ldr	r1, [r4, #32]
   21490:	sub	r0, r0, r5
   21494:	sub	r1, r1, r5
   21498:	str	r0, [r4, #28]
   2149c:	str	r1, [r4, #32]
   214a0:	ldrb	r0, [r4, #75]	; 0x4b
   214a4:	cmp	r0, #0
   214a8:	ldreq	r0, [r4, #4]
   214ac:	addeq	r0, r0, r5
   214b0:	streq	r0, [r4, #4]
   214b4:	str	r9, [r4, #24]
   214b8:	ldr	r0, [r4, #48]	; 0x30
   214bc:	ldr	r3, [r4, #80]	; 0x50
   214c0:	ldr	r2, [r4, #56]	; 0x38
   214c4:	sub	r1, r0, r5
   214c8:	cmp	r3, #2
   214cc:	sub	r0, r2, r5
   214d0:	str	r1, [r4, #48]	; 0x30
   214d4:	str	r0, [r4, #56]	; 0x38
   214d8:	blt	21500 <__assert_fail@plt+0xfda0>
   214dc:	ldrb	r0, [r4, #72]	; 0x48
   214e0:	cmp	r0, #0
   214e4:	beq	21514 <__assert_fail@plt+0xfdb4>
   214e8:	mov	r0, r4
   214ec:	bl	1b250 <__assert_fail@plt+0x9af0>
   214f0:	cmp	r0, #0
   214f4:	beq	2151c <__assert_fail@plt+0xfdbc>
   214f8:	sub	sp, fp, #28
   214fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21500:	ldrb	r0, [r4, #75]	; 0x4b
   21504:	cmp	r0, #0
   21508:	bne	21700 <__assert_fail@plt+0xffa0>
   2150c:	str	r1, [r4, #28]
   21510:	b	2151c <__assert_fail@plt+0xfdbc>
   21514:	mov	r0, r4
   21518:	bl	1b910 <__assert_fail@plt+0xa1b0>
   2151c:	mov	r0, #0
   21520:	str	r0, [r4, #40]	; 0x28
   21524:	sub	sp, fp, #28
   21528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2152c:	sub	r5, r9, r0
   21530:	cmp	r5, #0
   21534:	bne	21394 <__assert_fail@plt+0xfc34>
   21538:	b	214b4 <__assert_fail@plt+0xfd54>
   2153c:	ldrb	r2, [r4, #76]	; 0x4c
   21540:	ldr	lr, [r4, #28]
   21544:	cmp	r2, #0
   21548:	bne	21bd0 <__assert_fail@plt+0x10470>
   2154c:	mov	r2, #0
   21550:	str	r2, [r4, #28]
   21554:	ldr	r3, [r4, #80]	; 0x50
   21558:	cmp	r3, #2
   2155c:	blt	21784 <__assert_fail@plt+0x10024>
   21560:	ldrb	r2, [r4, #73]	; 0x49
   21564:	cmp	r2, #0
   21568:	beq	21624 <__assert_fail@plt+0xfec4>
   2156c:	ldr	r7, [r4]
   21570:	sub	r3, r5, r3
   21574:	add	ip, r7, r0
   21578:	add	r3, ip, r3
   2157c:	add	r8, ip, r5
   21580:	cmp	r3, r7
   21584:	movcc	r3, r7
   21588:	mov	r7, r8
   2158c:	sub	r7, r7, #1
   21590:	cmp	r7, r3
   21594:	bcc	21624 <__assert_fail@plt+0xfec4>
   21598:	ldrb	r2, [r7]
   2159c:	and	r2, r2, #192	; 0xc0
   215a0:	cmp	r2, #128	; 0x80
   215a4:	beq	2158c <__assert_fail@plt+0xfe2c>
   215a8:	ldr	r0, [r4, #48]	; 0x30
   215ac:	mov	sl, lr
   215b0:	mov	r1, r7
   215b4:	add	r3, ip, r0
   215b8:	ldr	r0, [r4, #64]	; 0x40
   215bc:	sub	r2, r3, r7
   215c0:	cmp	r0, #0
   215c4:	bne	21ca8 <__assert_fail@plt+0x10548>
   215c8:	mov	r0, #0
   215cc:	add	r3, sp, #24
   215d0:	str	r0, [sp, #28]
   215d4:	str	r0, [sp, #24]
   215d8:	add	r0, sp, #20
   215dc:	bl	2ac8c <__assert_fail@plt+0x1952c>
   215e0:	sub	r1, r8, r7
   215e4:	mvn	r7, #0
   215e8:	cmp	r0, r1
   215ec:	bcc	21610 <__assert_fail@plt+0xfeb0>
   215f0:	cmn	r0, #3
   215f4:	bhi	21610 <__assert_fail@plt+0xfeb0>
   215f8:	mov	r2, #0
   215fc:	sub	r0, r0, r1
   21600:	str	r2, [r4, #16]
   21604:	str	r2, [r4, #20]
   21608:	str	r0, [r4, #28]
   2160c:	ldr	r7, [sp, #20]
   21610:	cmn	r7, #1
   21614:	bne	21af4 <__assert_fail@plt+0x10394>
   21618:	ldr	r0, [r4, #24]
   2161c:	ldr	r1, [r4, #32]
   21620:	mov	lr, sl
   21624:	add	r8, r1, r0
   21628:	cmp	r8, r9
   2162c:	bge	219d0 <__assert_fail@plt+0x10270>
   21630:	add	sl, r4, #16
   21634:	str	lr, [sp]
   21638:	b	21a94 <__assert_fail@plt+0x10334>
   2163c:	ldr	ip, [r4, #12]
   21640:	ldr	r0, [r4, #28]
   21644:	mov	r1, #0
   21648:	add	r2, r1, r0
   2164c:	add	r2, r2, r2, lsr #31
   21650:	asr	r7, r2, #1
   21654:	ldr	r3, [ip, r7, lsl #2]
   21658:	mov	r2, r7
   2165c:	cmp	r3, r5
   21660:	bgt	21670 <__assert_fail@plt+0xff10>
   21664:	bge	2167c <__assert_fail@plt+0xff1c>
   21668:	add	r1, r7, #1
   2166c:	mov	r2, r0
   21670:	cmp	r1, r2
   21674:	mov	r0, r2
   21678:	blt	21648 <__assert_fail@plt+0xfee8>
   2167c:	mov	r8, #0
   21680:	cmp	r3, r5
   21684:	movwlt	r8, #1
   21688:	add	sl, r7, r8
   2168c:	cmp	sl, #0
   21690:	ble	216d4 <__assert_fail@plt+0xff74>
   21694:	ldr	r1, [r4, #48]	; 0x30
   21698:	sub	r0, sl, #1
   2169c:	cmp	r1, r0
   216a0:	beq	21bf8 <__assert_fail@plt+0x10498>
   216a4:	ldr	r1, [r4, #80]	; 0x50
   216a8:	cmp	r1, #2
   216ac:	blt	217e0 <__assert_fail@plt+0x10080>
   216b0:	ldr	r0, [r4, #8]
   216b4:	mov	r1, sl
   216b8:	sub	r0, r0, #4
   216bc:	ldr	r6, [r0, r1, lsl #2]
   216c0:	cmn	r6, #1
   216c4:	bne	21814 <__assert_fail@plt+0x100b4>
   216c8:	sub	r1, r1, #1
   216cc:	cmp	r1, #0
   216d0:	bgt	216bc <__assert_fail@plt+0xff5c>
   216d4:	ldr	r1, [r4, #60]	; 0x3c
   216d8:	b	21838 <__assert_fail@plt+0x100d8>
   216dc:	ldr	r2, [r4, #28]
   216e0:	ldr	r0, [r4, #4]
   216e4:	add	r1, r0, r5
   216e8:	sub	r2, r2, r5
   216ec:	bl	11454 <memmove@plt>
   216f0:	b	21488 <__assert_fail@plt+0xfd28>
   216f4:	and	r0, r6, #2
   216f8:	eor	r1, r0, #10
   216fc:	b	21454 <__assert_fail@plt+0xfcf4>
   21700:	ldrb	r0, [r4, #72]	; 0x48
   21704:	cmp	r0, #0
   21708:	beq	219dc <__assert_fail@plt+0x1027c>
   2170c:	ldr	r6, [r4, #36]	; 0x24
   21710:	ldr	r5, [r4, #28]
   21714:	cmp	r6, r1
   21718:	movgt	r6, r1
   2171c:	cmp	r5, r6
   21720:	blt	2172c <__assert_fail@plt+0xffcc>
   21724:	b	21778 <__assert_fail@plt+0x10018>
   21728:	ldr	r9, [r4, #24]
   2172c:	ldr	r1, [r4]
   21730:	ldr	r0, [r4, #64]	; 0x40
   21734:	add	r1, r1, r9
   21738:	cmp	r0, #0
   2173c:	ldrb	r7, [r1, r5]
   21740:	ldrbne	r7, [r0, r7]
   21744:	add	r0, r7, #128	; 0x80
   21748:	lsr	r0, r0, #7
   2174c:	cmp	r0, #2
   21750:	bhi	21760 <__assert_fail@plt+0x10000>
   21754:	bl	115ec <__ctype_toupper_loc@plt>
   21758:	ldr	r0, [r0]
   2175c:	ldr	r7, [r0, r7, lsl #2]
   21760:	ldr	r0, [r4, #4]
   21764:	strb	r7, [r0, r5]
   21768:	add	r5, r5, #1
   2176c:	cmp	r5, r6
   21770:	blt	21728 <__assert_fail@plt+0xffc8>
   21774:	mov	r5, r6
   21778:	str	r5, [r4, #28]
   2177c:	str	r5, [r4, #32]
   21780:	b	2151c <__assert_fail@plt+0xfdbc>
   21784:	ldr	r3, [r4]
   21788:	add	r0, r5, r0
   2178c:	ldr	r1, [r4, #64]	; 0x40
   21790:	add	r0, r3, r0
   21794:	cmp	r1, #0
   21798:	ldrb	r0, [r0, #-1]
   2179c:	str	r2, [r4, #32]
   217a0:	ldrbne	r0, [r1, r0]
   217a4:	ldr	r1, [r4, #68]	; 0x44
   217a8:	ubfx	r2, r0, #5, #3
   217ac:	and	r3, r0, #31
   217b0:	ldr	r2, [r1, r2, lsl #2]
   217b4:	mov	r1, #1
   217b8:	tst	r2, r1, lsl r3
   217bc:	bne	217d8 <__assert_fail@plt+0x10078>
   217c0:	mov	r1, #0
   217c4:	cmp	r0, #10
   217c8:	bne	217d8 <__assert_fail@plt+0x10078>
   217cc:	ldrb	r1, [r4, #77]	; 0x4d
   217d0:	cmp	r1, #0
   217d4:	movwne	r1, #2
   217d8:	str	r1, [r4, #60]	; 0x3c
   217dc:	b	214a0 <__assert_fail@plt+0xfd40>
   217e0:	ldr	r1, [r4, #4]
   217e4:	ldr	r2, [r4, #68]	; 0x44
   217e8:	ldrb	r0, [r1, r0]
   217ec:	ubfx	r1, r0, #5, #3
   217f0:	and	r3, r0, #31
   217f4:	ldr	r2, [r2, r1, lsl #2]
   217f8:	mov	r1, #1
   217fc:	tst	r2, r1, lsl r3
   21800:	bne	21838 <__assert_fail@plt+0x100d8>
   21804:	mov	r1, #0
   21808:	cmp	r0, #10
   2180c:	beq	2182c <__assert_fail@plt+0x100cc>
   21810:	b	21838 <__assert_fail@plt+0x100d8>
   21814:	ldrb	r0, [r4, #78]	; 0x4e
   21818:	cmp	r0, #0
   2181c:	bne	21c58 <__assert_fail@plt+0x104f8>
   21820:	mov	r1, #0
   21824:	cmp	r6, #10
   21828:	bne	21838 <__assert_fail@plt+0x100d8>
   2182c:	ldrb	r1, [r4, #77]	; 0x4d
   21830:	cmp	r1, #0
   21834:	movwne	r1, #2
   21838:	str	r1, [r4, #60]	; 0x3c
   2183c:	cmp	sl, r5
   21840:	ldr	r2, [r4, #28]
   21844:	bne	218d4 <__assert_fail@plt+0x10174>
   21848:	cmp	r2, r5
   2184c:	ble	218d4 <__assert_fail@plt+0x10174>
   21850:	ldr	r0, [r4, #12]
   21854:	ldr	r0, [r0, r5, lsl #2]
   21858:	cmp	r0, r5
   2185c:	bne	218d4 <__assert_fail@plt+0x10174>
   21860:	ldr	r0, [r4, #8]
   21864:	sub	r2, r2, r5
   21868:	lsl	r2, r2, #2
   2186c:	add	r1, r0, r5, lsl #2
   21870:	bl	11454 <memmove@plt>
   21874:	ldr	r2, [r4, #28]
   21878:	ldr	r0, [r4, #4]
   2187c:	add	r1, r0, r5
   21880:	sub	r2, r2, r5
   21884:	bl	11454 <memmove@plt>
   21888:	ldr	r0, [r4, #28]
   2188c:	ldr	r1, [r4, #32]
   21890:	sub	r0, r0, r5
   21894:	sub	r1, r1, r5
   21898:	cmp	r0, #1
   2189c:	str	r0, [r4, #28]
   218a0:	str	r1, [r4, #32]
   218a4:	blt	214a0 <__assert_fail@plt+0xfd40>
   218a8:	ldr	r0, [r4, #12]
   218ac:	mov	r2, #0
   218b0:	add	r1, r0, r5, lsl #2
   218b4:	ldr	r3, [r1, r2, lsl #2]
   218b8:	sub	r3, r3, r5
   218bc:	str	r3, [r0, r2, lsl #2]
   218c0:	add	r2, r2, #1
   218c4:	ldr	r3, [r4, #28]
   218c8:	cmp	r2, r3
   218cc:	blt	218b4 <__assert_fail@plt+0x10154>
   218d0:	b	214a0 <__assert_fail@plt+0xfd40>
   218d4:	mov	r0, #0
   218d8:	strb	r0, [r4, #76]	; 0x4c
   218dc:	sub	r0, r5, r9
   218e0:	ldr	r1, [r4, #44]	; 0x2c
   218e4:	ldr	r3, [r4, #52]	; 0x34
   218e8:	add	r1, r0, r1
   218ec:	add	r0, r0, r3
   218f0:	str	r1, [r4, #48]	; 0x30
   218f4:	str	r0, [r4, #56]	; 0x38
   218f8:	add	r0, r7, r8
   218fc:	sub	r1, r0, #1
   21900:	add	r0, r1, #1
   21904:	cmp	r0, #1
   21908:	blt	21920 <__assert_fail@plt+0x101c0>
   2190c:	ldr	r3, [r4, #12]
   21910:	ldr	r3, [r3, r1, lsl #2]
   21914:	sub	r1, r1, #1
   21918:	cmp	r3, r5
   2191c:	beq	21900 <__assert_fail@plt+0x101a0>
   21920:	cmp	r0, r2
   21924:	bge	21944 <__assert_fail@plt+0x101e4>
   21928:	ldr	r1, [r4, #8]
   2192c:	ldr	r3, [r1, r0, lsl #2]
   21930:	cmn	r3, #1
   21934:	bne	21944 <__assert_fail@plt+0x101e4>
   21938:	add	r0, r0, #1
   2193c:	cmp	r0, r2
   21940:	blt	2192c <__assert_fail@plt+0x101cc>
   21944:	cmp	r0, r2
   21948:	bne	2195c <__assert_fail@plt+0x101fc>
   2194c:	mov	r0, #0
   21950:	str	r0, [r4, #28]
   21954:	str	r0, [r4, #32]
   21958:	b	214a0 <__assert_fail@plt+0xfd40>
   2195c:	ldr	r1, [r4, #12]
   21960:	ldr	r0, [r1, r0, lsl #2]
   21964:	subs	r2, r0, r5
   21968:	str	r2, [r4, #28]
   2196c:	beq	21a5c <__assert_fail@plt+0x102fc>
   21970:	cmp	r2, #1
   21974:	blt	21998 <__assert_fail@plt+0x10238>
   21978:	ldr	r0, [r4, #8]
   2197c:	mov	r1, #0
   21980:	mvn	r3, #0
   21984:	str	r3, [r0, r1, lsl #2]
   21988:	add	r1, r1, #1
   2198c:	ldr	r2, [r4, #28]
   21990:	cmp	r1, r2
   21994:	blt	21984 <__assert_fail@plt+0x10224>
   21998:	ldr	r0, [r4, #4]
   2199c:	mov	r1, #255	; 0xff
   219a0:	bl	11670 <memset@plt>
   219a4:	ldr	r0, [r4, #28]
   219a8:	str	r0, [r4, #32]
   219ac:	b	214a0 <__assert_fail@plt+0xfd40>
   219b0:	mov	r0, r6
   219b4:	bl	1164c <iswalnum@plt>
   219b8:	mov	r1, #1
   219bc:	cmp	r6, #95	; 0x5f
   219c0:	beq	21454 <__assert_fail@plt+0xfcf4>
   219c4:	cmp	r0, #0
   219c8:	beq	2143c <__assert_fail@plt+0xfcdc>
   219cc:	b	21454 <__assert_fail@plt+0xfcf4>
   219d0:	sub	r0, r8, r9
   219d4:	str	r0, [r4, #28]
   219d8:	b	21b10 <__assert_fail@plt+0x103b0>
   219dc:	ldr	r3, [r4, #64]	; 0x40
   219e0:	cmp	r3, #0
   219e4:	beq	2151c <__assert_fail@plt+0xfdbc>
   219e8:	ldr	r0, [r4, #36]	; 0x24
   219ec:	ldr	r2, [r4, #28]
   219f0:	cmp	r0, r1
   219f4:	movgt	r0, r1
   219f8:	cmp	r2, r0
   219fc:	bge	21a50 <__assert_fail@plt+0x102f0>
   21a00:	ldr	r7, [r4]
   21a04:	add	r1, r2, r9
   21a08:	ldr	r6, [r4, #4]
   21a0c:	ldrb	r1, [r7, r1]
   21a10:	ldrb	r1, [r3, r1]
   21a14:	strb	r1, [r6, r2]
   21a18:	add	r1, r2, #1
   21a1c:	cmp	r1, r0
   21a20:	bge	21a4c <__assert_fail@plt+0x102ec>
   21a24:	ldm	r4, {r2, r3}
   21a28:	ldr	r7, [r4, #24]
   21a2c:	ldr	r6, [r4, #64]	; 0x40
   21a30:	add	r2, r2, r7
   21a34:	ldrb	r2, [r2, r1]
   21a38:	ldrb	r2, [r6, r2]
   21a3c:	strb	r2, [r3, r1]
   21a40:	add	r1, r1, #1
   21a44:	cmp	r1, r0
   21a48:	blt	21a24 <__assert_fail@plt+0x102c4>
   21a4c:	mov	r2, r0
   21a50:	str	r2, [r4, #28]
   21a54:	str	r2, [r4, #32]
   21a58:	b	2151c <__assert_fail@plt+0xfdbc>
   21a5c:	mov	r0, #0
   21a60:	str	r0, [r4, #32]
   21a64:	b	214a0 <__assert_fail@plt+0xfd40>
   21a68:	cmp	r7, #0
   21a6c:	mov	r1, #0
   21a70:	ldr	r3, [sp, #4]
   21a74:	ldr	r2, [sp, #8]
   21a78:	cmpne	r0, #0
   21a7c:	ldrne	r0, [r4]
   21a80:	ldrbne	r1, [r0, r8]
   21a84:	stm	sl, {r2, r3}
   21a88:	mov	r0, #1
   21a8c:	mov	r7, r1
   21a90:	b	21ad4 <__assert_fail@plt+0x10374>
   21a94:	ldr	r0, [r4]
   21a98:	ldr	r2, [r4, #44]	; 0x2c
   21a9c:	mov	r3, sl
   21aa0:	add	r1, r0, r8
   21aa4:	ldr	r0, [sl]
   21aa8:	sub	r7, r2, r8
   21aac:	mov	r2, r7
   21ab0:	str	r0, [sp, #8]
   21ab4:	ldr	r0, [sl, #4]
   21ab8:	str	r0, [sp, #4]
   21abc:	add	r0, sp, #24
   21ac0:	bl	2ac8c <__assert_fail@plt+0x1952c>
   21ac4:	sub	r1, r0, #1
   21ac8:	cmn	r1, #3
   21acc:	bcs	21a68 <__assert_fail@plt+0x10308>
   21ad0:	ldr	r7, [sp, #24]
   21ad4:	add	r8, r0, r8
   21ad8:	cmp	r8, r9
   21adc:	blt	21a94 <__assert_fail@plt+0x10334>
   21ae0:	ldr	lr, [sp]
   21ae4:	sub	r0, r8, r9
   21ae8:	cmn	r7, #1
   21aec:	str	r0, [r4, #28]
   21af0:	beq	21b10 <__assert_fail@plt+0x103b0>
   21af4:	ldrb	r0, [r4, #78]	; 0x4e
   21af8:	cmp	r0, #0
   21afc:	bne	21c78 <__assert_fail@plt+0x10518>
   21b00:	mov	r1, #0
   21b04:	cmp	r7, #10
   21b08:	beq	21ba8 <__assert_fail@plt+0x10448>
   21b0c:	b	21bb4 <__assert_fail@plt+0x10454>
   21b10:	cmp	lr, #0
   21b14:	ble	21b54 <__assert_fail@plt+0x103f4>
   21b18:	ldr	r1, [r4, #48]	; 0x30
   21b1c:	sub	r0, lr, #1
   21b20:	cmp	r1, r0
   21b24:	beq	21c4c <__assert_fail@plt+0x104ec>
   21b28:	ldr	r1, [r4, #80]	; 0x50
   21b2c:	cmp	r1, #2
   21b30:	blt	21b5c <__assert_fail@plt+0x103fc>
   21b34:	ldr	r0, [r4, #8]
   21b38:	sub	r0, r0, #4
   21b3c:	ldr	r6, [r0, lr, lsl #2]
   21b40:	cmn	r6, #1
   21b44:	bne	21b90 <__assert_fail@plt+0x10430>
   21b48:	sub	lr, lr, #1
   21b4c:	cmp	lr, #0
   21b50:	bgt	21b3c <__assert_fail@plt+0x103dc>
   21b54:	ldr	r1, [r4, #60]	; 0x3c
   21b58:	b	21bb4 <__assert_fail@plt+0x10454>
   21b5c:	ldr	r1, [r4, #4]
   21b60:	ldr	r2, [r4, #68]	; 0x44
   21b64:	ldrb	r0, [r1, r0]
   21b68:	ubfx	r1, r0, #5, #3
   21b6c:	and	r3, r0, #31
   21b70:	ldr	r2, [r2, r1, lsl #2]
   21b74:	mov	r1, #1
   21b78:	tst	r2, r1, lsl r3
   21b7c:	bne	21bb4 <__assert_fail@plt+0x10454>
   21b80:	mov	r1, #0
   21b84:	cmp	r0, #10
   21b88:	beq	21ba8 <__assert_fail@plt+0x10448>
   21b8c:	b	21bb4 <__assert_fail@plt+0x10454>
   21b90:	ldrb	r0, [r4, #78]	; 0x4e
   21b94:	cmp	r0, #0
   21b98:	bne	21cf0 <__assert_fail@plt+0x10590>
   21b9c:	mov	r1, #0
   21ba0:	cmp	r6, #10
   21ba4:	bne	21bb4 <__assert_fail@plt+0x10454>
   21ba8:	ldrb	r1, [r4, #77]	; 0x4d
   21bac:	cmp	r1, #0
   21bb0:	movwne	r1, #2
   21bb4:	str	r1, [r4, #60]	; 0x3c
   21bb8:	mov	r0, #0
   21bbc:	ldr	r2, [r4, #28]
   21bc0:	cmp	r2, #0
   21bc4:	bne	21c04 <__assert_fail@plt+0x104a4>
   21bc8:	str	r0, [r4, #32]
   21bcc:	b	214a0 <__assert_fail@plt+0xfd40>
   21bd0:	mov	r2, #0
   21bd4:	strb	r2, [r4, #76]	; 0x4c
   21bd8:	sub	r2, r5, r9
   21bdc:	ldr	r3, [r4, #44]	; 0x2c
   21be0:	ldr	r7, [r4, #52]	; 0x34
   21be4:	add	r3, r2, r3
   21be8:	add	r2, r2, r7
   21bec:	str	r3, [r4, #48]	; 0x30
   21bf0:	str	r2, [r4, #56]	; 0x38
   21bf4:	b	2154c <__assert_fail@plt+0xfdec>
   21bf8:	and	r0, r6, #2
   21bfc:	eor	r1, r0, #10
   21c00:	b	21838 <__assert_fail@plt+0x100d8>
   21c04:	cmp	r2, #1
   21c08:	blt	21c2c <__assert_fail@plt+0x104cc>
   21c0c:	ldr	r0, [r4, #8]
   21c10:	mov	r1, #0
   21c14:	mvn	r3, #0
   21c18:	str	r3, [r0, r1, lsl #2]
   21c1c:	add	r1, r1, #1
   21c20:	ldr	r2, [r4, #28]
   21c24:	cmp	r1, r2
   21c28:	blt	21c18 <__assert_fail@plt+0x104b8>
   21c2c:	ldrb	r0, [r4, #75]	; 0x4b
   21c30:	cmp	r0, #0
   21c34:	beq	21c9c <__assert_fail@plt+0x1053c>
   21c38:	ldr	r0, [r4, #4]
   21c3c:	mov	r1, #255	; 0xff
   21c40:	bl	11670 <memset@plt>
   21c44:	ldr	r0, [r4, #28]
   21c48:	b	21bc8 <__assert_fail@plt+0x10468>
   21c4c:	and	r0, r6, #2
   21c50:	eor	r1, r0, #10
   21c54:	b	21bb4 <__assert_fail@plt+0x10454>
   21c58:	mov	r0, r6
   21c5c:	bl	1164c <iswalnum@plt>
   21c60:	mov	r1, #1
   21c64:	cmp	r6, #95	; 0x5f
   21c68:	beq	21838 <__assert_fail@plt+0x100d8>
   21c6c:	cmp	r0, #0
   21c70:	beq	21820 <__assert_fail@plt+0x100c0>
   21c74:	b	21838 <__assert_fail@plt+0x100d8>
   21c78:	mov	r0, r7
   21c7c:	bl	1164c <iswalnum@plt>
   21c80:	mov	r1, #1
   21c84:	cmp	r7, #95	; 0x5f
   21c88:	beq	21bb4 <__assert_fail@plt+0x10454>
   21c8c:	cmp	r0, #0
   21c90:	mov	r2, r7
   21c94:	beq	21b00 <__assert_fail@plt+0x103a0>
   21c98:	b	21bb4 <__assert_fail@plt+0x10454>
   21c9c:	mov	r0, r2
   21ca0:	str	r2, [r4, #32]
   21ca4:	b	214a0 <__assert_fail@plt+0xfd40>
   21ca8:	cmp	r2, #1
   21cac:	blt	21d10 <__assert_fail@plt+0x105b0>
   21cb0:	sub	r1, r7, #1
   21cb4:	sub	r1, r1, r3
   21cb8:	mvn	r3, #1
   21cbc:	cmn	r1, #7
   21cc0:	mvnle	r1, #6
   21cc4:	sub	ip, r3, r1
   21cc8:	add	r1, sp, #14
   21ccc:	ldrb	r3, [r7, ip]
   21cd0:	sub	lr, ip, #1
   21cd4:	ldrb	r3, [r0, r3]
   21cd8:	strb	r3, [r1, ip]
   21cdc:	add	r3, ip, #1
   21ce0:	mov	ip, lr
   21ce4:	cmp	r3, #1
   21ce8:	bgt	21ccc <__assert_fail@plt+0x1056c>
   21cec:	b	215c8 <__assert_fail@plt+0xfe68>
   21cf0:	mov	r0, r6
   21cf4:	bl	1164c <iswalnum@plt>
   21cf8:	mov	r1, #1
   21cfc:	cmp	r6, #95	; 0x5f
   21d00:	beq	21bb4 <__assert_fail@plt+0x10454>
   21d04:	cmp	r0, #0
   21d08:	beq	21b9c <__assert_fail@plt+0x1043c>
   21d0c:	b	21bb4 <__assert_fail@plt+0x10454>
   21d10:	add	r1, sp, #14
   21d14:	b	215c8 <__assert_fail@plt+0xfe68>
   21d18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21d1c:	add	fp, sp, #24
   21d20:	mov	r8, r0
   21d24:	ldr	r0, [r0, #124]	; 0x7c
   21d28:	cmp	r0, #1
   21d2c:	blt	21db0 <__assert_fail@plt+0x10650>
   21d30:	mov	r7, #0
   21d34:	ldr	r0, [r8, #132]	; 0x84
   21d38:	ldr	r5, [r0, r7, lsl #2]
   21d3c:	ldr	r0, [r5, #16]
   21d40:	cmp	r0, #1
   21d44:	blt	21d74 <__assert_fail@plt+0x10614>
   21d48:	mov	r4, #0
   21d4c:	ldr	r0, [r5, #20]
   21d50:	ldr	r6, [r0, r4, lsl #2]
   21d54:	ldr	r0, [r6, #16]
   21d58:	bl	141c4 <__assert_fail@plt+0x2a64>
   21d5c:	mov	r0, r6
   21d60:	bl	141c4 <__assert_fail@plt+0x2a64>
   21d64:	ldr	r0, [r5, #16]
   21d68:	add	r4, r4, #1
   21d6c:	cmp	r4, r0
   21d70:	blt	21d4c <__assert_fail@plt+0x105ec>
   21d74:	ldr	r0, [r5, #20]
   21d78:	bl	141c4 <__assert_fail@plt+0x2a64>
   21d7c:	ldr	r0, [r5, #8]
   21d80:	cmp	r0, #0
   21d84:	beq	21d98 <__assert_fail@plt+0x10638>
   21d88:	ldr	r0, [r0, #8]
   21d8c:	bl	141c4 <__assert_fail@plt+0x2a64>
   21d90:	ldr	r0, [r5, #8]
   21d94:	bl	141c4 <__assert_fail@plt+0x2a64>
   21d98:	mov	r0, r5
   21d9c:	bl	141c4 <__assert_fail@plt+0x2a64>
   21da0:	ldr	r0, [r8, #124]	; 0x7c
   21da4:	add	r7, r7, #1
   21da8:	cmp	r7, r0
   21dac:	blt	21d34 <__assert_fail@plt+0x105d4>
   21db0:	mov	r0, #0
   21db4:	str	r0, [r8, #108]	; 0x6c
   21db8:	str	r0, [r8, #124]	; 0x7c
   21dbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dc4:	add	fp, sp, #28
   21dc8:	sub	sp, sp, #4
   21dcc:	mov	sl, r0
   21dd0:	ldr	r0, [r1, #4]
   21dd4:	cmp	r0, #1
   21dd8:	blt	21ea4 <__assert_fail@plt+0x10744>
   21ddc:	ldr	r7, [sl, #84]	; 0x54
   21de0:	mov	r8, r2
   21de4:	mov	r5, r1
   21de8:	mov	r4, #0
   21dec:	b	21e14 <__assert_fail@plt+0x106b4>
   21df0:	ldr	r0, [sl, #132]	; 0x84
   21df4:	lsl	r1, r9, #3
   21df8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   21dfc:	cmp	r0, #0
   21e00:	beq	21eb0 <__assert_fail@plt+0x10750>
   21e04:	lsl	r1, r9, #1
   21e08:	str	r1, [sl, #128]	; 0x80
   21e0c:	str	r0, [sl, #132]	; 0x84
   21e10:	b	21e5c <__assert_fail@plt+0x106fc>
   21e14:	ldr	r1, [r5, #8]
   21e18:	ldr	r6, [r1, r4, lsl #2]
   21e1c:	ldr	r1, [r7]
   21e20:	add	r2, r1, r6, lsl #3
   21e24:	ldrb	r2, [r2, #4]
   21e28:	cmp	r2, #8
   21e2c:	bne	21e98 <__assert_fail@plt+0x10738>
   21e30:	ldr	r1, [r1, r6, lsl #3]
   21e34:	cmp	r1, #31
   21e38:	bgt	21e98 <__assert_fail@plt+0x10738>
   21e3c:	ldr	r2, [r7, #80]	; 0x50
   21e40:	mov	r3, #1
   21e44:	tst	r2, r3, lsl r1
   21e48:	beq	21e98 <__assert_fail@plt+0x10738>
   21e4c:	ldr	r9, [sl, #124]	; 0x7c
   21e50:	ldr	r0, [sl, #128]	; 0x80
   21e54:	cmp	r9, r0
   21e58:	beq	21df0 <__assert_fail@plt+0x10690>
   21e5c:	mov	r0, #1
   21e60:	mov	r1, #24
   21e64:	bl	2a858 <__assert_fail@plt+0x190f8>
   21e68:	ldr	r1, [sl, #124]	; 0x7c
   21e6c:	ldr	r2, [sl, #132]	; 0x84
   21e70:	str	r0, [r2, r1, lsl #2]
   21e74:	ldr	r0, [sl, #132]	; 0x84
   21e78:	ldr	r0, [r0, r1, lsl #2]
   21e7c:	cmp	r0, #0
   21e80:	beq	21eb0 <__assert_fail@plt+0x10750>
   21e84:	add	r1, r1, #1
   21e88:	str	r6, [r0, #4]
   21e8c:	str	r1, [sl, #124]	; 0x7c
   21e90:	str	r8, [r0]
   21e94:	ldr	r0, [r5, #4]
   21e98:	add	r4, r4, #1
   21e9c:	cmp	r4, r0
   21ea0:	blt	21e14 <__assert_fail@plt+0x106b4>
   21ea4:	mov	r0, #0
   21ea8:	sub	sp, fp, #28
   21eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21eb0:	mov	r0, #12
   21eb4:	sub	sp, fp, #28
   21eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ec0:	add	fp, sp, #28
   21ec4:	sub	sp, sp, #76	; 0x4c
   21ec8:	mov	r9, r0
   21ecc:	ldr	r0, [r1, #4]
   21ed0:	cmp	r0, #1
   21ed4:	blt	2280c <__assert_fail@plt+0x110ac>
   21ed8:	ldr	r2, [r9, #84]	; 0x54
   21edc:	ldr	r8, [r9, #40]	; 0x28
   21ee0:	mov	r3, #0
   21ee4:	str	r9, [sp, #40]	; 0x28
   21ee8:	str	r1, [sp, #16]
   21eec:	str	r8, [sp, #52]	; 0x34
   21ef0:	str	r2, [sp, #20]
   21ef4:	b	21f2c <__assert_fail@plt+0x107cc>
   21ef8:	ldr	r0, [r9, #88]	; 0x58
   21efc:	and	r0, r0, #2
   21f00:	eor	r1, r0, #10
   21f04:	b	22010 <__assert_fail@plt+0x108b0>
   21f08:	mov	r0, r4
   21f0c:	bl	1164c <iswalnum@plt>
   21f10:	mov	r1, #1
   21f14:	mov	r2, #0
   21f18:	cmp	r4, #95	; 0x5f
   21f1c:	beq	22028 <__assert_fail@plt+0x108c8>
   21f20:	cmp	r0, #0
   21f24:	beq	21ff8 <__assert_fail@plt+0x10898>
   21f28:	b	22028 <__assert_fail@plt+0x108c8>
   21f2c:	ldr	r0, [r1, #8]
   21f30:	str	r3, [sp, #24]
   21f34:	ldr	r3, [r0, r3, lsl #2]
   21f38:	ldr	r0, [r2]
   21f3c:	add	r5, r0, r3, lsl #3
   21f40:	mov	r1, r3
   21f44:	str	r3, [sp, #48]	; 0x30
   21f48:	ldr	r6, [r5, #4]!
   21f4c:	uxtb	r0, r6
   21f50:	cmp	r0, #4
   21f54:	bne	227f0 <__assert_fail@plt+0x11090>
   21f58:	movw	r0, #65280	; 0xff00
   21f5c:	movt	r0, #3
   21f60:	tst	r6, r0
   21f64:	beq	2205c <__assert_fail@plt+0x108fc>
   21f68:	cmn	r8, #1
   21f6c:	ble	21fac <__assert_fail@plt+0x1084c>
   21f70:	ldr	r0, [r9, #48]	; 0x30
   21f74:	cmp	r0, r8
   21f78:	beq	21ef8 <__assert_fail@plt+0x10798>
   21f7c:	ldr	r0, [r9, #80]	; 0x50
   21f80:	cmp	r0, #2
   21f84:	blt	21fb4 <__assert_fail@plt+0x10854>
   21f88:	ldr	r0, [r9, #8]
   21f8c:	mov	r1, r8
   21f90:	ldr	r4, [r0, r1, lsl #2]
   21f94:	cmn	r4, #1
   21f98:	bne	21fec <__assert_fail@plt+0x1088c>
   21f9c:	sub	r2, r1, #1
   21fa0:	cmp	r1, #0
   21fa4:	mov	r1, r2
   21fa8:	bgt	21f90 <__assert_fail@plt+0x10830>
   21fac:	ldr	r1, [r9, #60]	; 0x3c
   21fb0:	b	22010 <__assert_fail@plt+0x108b0>
   21fb4:	ldr	r0, [r9, #4]
   21fb8:	ldr	r1, [r9, #68]	; 0x44
   21fbc:	ldrb	r0, [r0, r8]
   21fc0:	ubfx	r2, r0, #5, #3
   21fc4:	and	r7, r0, #31
   21fc8:	ldr	r3, [r1, r2, lsl #2]
   21fcc:	mov	r1, #1
   21fd0:	mov	r2, #0
   21fd4:	tst	r3, r1, lsl r7
   21fd8:	bne	22028 <__assert_fail@plt+0x108c8>
   21fdc:	mov	r1, #0
   21fe0:	cmp	r0, #10
   21fe4:	beq	22004 <__assert_fail@plt+0x108a4>
   21fe8:	b	22010 <__assert_fail@plt+0x108b0>
   21fec:	ldrb	r0, [r9, #78]	; 0x4e
   21ff0:	cmp	r0, #0
   21ff4:	bne	21f08 <__assert_fail@plt+0x107a8>
   21ff8:	mov	r1, #0
   21ffc:	cmp	r4, #10
   22000:	bne	22010 <__assert_fail@plt+0x108b0>
   22004:	ldrb	r1, [r9, #77]	; 0x4d
   22008:	cmp	r1, #0
   2200c:	movwne	r1, #2
   22010:	and	r0, r1, #1
   22014:	tst	r6, #1024	; 0x400
   22018:	eor	r2, r0, #1
   2201c:	beq	22028 <__assert_fail@plt+0x108c8>
   22020:	cmp	r0, #0
   22024:	beq	227f0 <__assert_fail@plt+0x11090>
   22028:	ldr	r0, [r5]
   2202c:	cmp	r2, #0
   22030:	bne	2203c <__assert_fail@plt+0x108dc>
   22034:	ands	r2, r0, #2048	; 0x800
   22038:	bne	227f0 <__assert_fail@plt+0x11090>
   2203c:	tst	r1, #2
   22040:	bne	2204c <__assert_fail@plt+0x108ec>
   22044:	ands	r2, r0, #8192	; 0x2000
   22048:	bne	227f0 <__assert_fail@plt+0x11090>
   2204c:	tst	r1, #8
   22050:	bne	2205c <__assert_fail@plt+0x108fc>
   22054:	ands	r0, r0, #32768	; 0x8000
   22058:	bne	227f0 <__assert_fail@plt+0x11090>
   2205c:	ldr	r2, [r9, #108]	; 0x6c
   22060:	ldr	r0, [r9, #84]	; 0x54
   22064:	ldr	ip, [r9, #4]
   22068:	cmp	r2, #1
   2206c:	str	r0, [sp, #28]
   22070:	str	r2, [sp, #12]
   22074:	blt	220b4 <__assert_fail@plt+0x10954>
   22078:	ldr	r1, [r9, #116]	; 0x74
   2207c:	mov	r0, #0
   22080:	mov	r5, #1
   22084:	add	r3, r2, r0
   22088:	add	r3, r3, r3, lsr #31
   2208c:	asr	r7, r3, #1
   22090:	add	r6, r7, r7, lsl #1
   22094:	add	r6, r1, r6, lsl #3
   22098:	ldr	r6, [r6, #4]
   2209c:	cmp	r6, r8
   220a0:	addlt	r0, r5, r3, asr #1
   220a4:	movge	r2, r7
   220a8:	cmp	r0, r2
   220ac:	blt	22084 <__assert_fail@plt+0x10924>
   220b0:	b	220b8 <__assert_fail@plt+0x10958>
   220b4:	mov	r0, #0
   220b8:	ldr	r1, [sp, #12]
   220bc:	ldr	r5, [sp, #28]
   220c0:	cmp	r0, r1
   220c4:	bge	22108 <__assert_fail@plt+0x109a8>
   220c8:	cmn	r0, #1
   220cc:	beq	22108 <__assert_fail@plt+0x109a8>
   220d0:	ldr	r1, [r9, #116]	; 0x74
   220d4:	add	r0, r0, r0, lsl #1
   220d8:	add	r0, r1, r0, lsl #3
   220dc:	ldr	r1, [r0, #4]
   220e0:	cmp	r1, r8
   220e4:	bne	22108 <__assert_fail@plt+0x109a8>
   220e8:	ldr	r1, [r0]
   220ec:	ldr	r2, [sp, #48]	; 0x30
   220f0:	cmp	r1, r2
   220f4:	beq	22518 <__assert_fail@plt+0x10db8>
   220f8:	ldrb	r1, [r0, #20]
   220fc:	add	r0, r0, #24
   22100:	cmp	r1, #0
   22104:	bne	220e8 <__assert_fail@plt+0x10988>
   22108:	ldr	r0, [r9, #124]	; 0x7c
   2210c:	cmp	r0, #1
   22110:	blt	22518 <__assert_fail@plt+0x10db8>
   22114:	ldr	r0, [r5]
   22118:	ldr	r1, [sp, #48]	; 0x30
   2211c:	mov	r2, #0
   22120:	ldr	r1, [r0, r1, lsl #3]
   22124:	str	r1, [sp, #36]	; 0x24
   22128:	b	22130 <__assert_fail@plt+0x109d0>
   2212c:	ldr	r0, [r5]
   22130:	ldr	r1, [r9, #132]	; 0x84
   22134:	str	r2, [sp, #32]
   22138:	ldr	lr, [r1, r2, lsl #2]
   2213c:	ldr	r1, [lr, #4]
   22140:	ldr	r0, [r0, r1, lsl #3]
   22144:	ldr	r1, [sp, #36]	; 0x24
   22148:	cmp	r0, r1
   2214c:	bne	224e8 <__assert_fail@plt+0x10d88>
   22150:	ldr	r0, [lr, #16]
   22154:	ldr	r2, [lr]
   22158:	mov	r8, #0
   2215c:	str	lr, [sp, #44]	; 0x2c
   22160:	cmp	r0, #1
   22164:	blt	22174 <__assert_fail@plt+0x10a14>
   22168:	ldr	r6, [sp, #52]	; 0x34
   2216c:	mov	r7, r2
   22170:	b	221f8 <__assert_fail@plt+0x10a98>
   22174:	ldr	r6, [sp, #52]	; 0x34
   22178:	b	222a4 <__assert_fail@plt+0x10b44>
   2217c:	ldr	r2, [r9, #48]	; 0x30
   22180:	cmp	r5, r2
   22184:	bgt	222a0 <__assert_fail@plt+0x10b40>
   22188:	ldr	r0, [r9, #36]	; 0x24
   2218c:	ldr	r3, [r9, #104]	; 0x68
   22190:	cmp	r0, r5
   22194:	cmple	r0, r2
   22198:	blt	221a8 <__assert_fail@plt+0x10a48>
   2219c:	cmp	r1, r5
   221a0:	cmple	r1, r2
   221a4:	bge	221c4 <__assert_fail@plt+0x10a64>
   221a8:	ldr	r0, [sp, #40]	; 0x28
   221ac:	add	r1, r5, #1
   221b0:	mov	r9, r3
   221b4:	bl	22848 <__assert_fail@plt+0x110e8>
   221b8:	mov	r3, r9
   221bc:	cmp	r0, #0
   221c0:	bne	22820 <__assert_fail@plt+0x110c0>
   221c4:	ldr	r9, [sp, #40]	; 0x28
   221c8:	cmp	r5, r3
   221cc:	ble	221f0 <__assert_fail@plt+0x10a90>
   221d0:	sub	r0, r5, r3
   221d4:	mov	r1, #0
   221d8:	lsl	r2, r0, #2
   221dc:	ldr	r0, [r9, #100]	; 0x64
   221e0:	add	r0, r0, r3, lsl #2
   221e4:	add	r0, r0, #4
   221e8:	bl	11670 <memset@plt>
   221ec:	str	r5, [r9, #104]	; 0x68
   221f0:	ldr	ip, [r9, #4]
   221f4:	b	22224 <__assert_fail@plt+0x10ac4>
   221f8:	ldr	r1, [lr, #20]
   221fc:	ldr	sl, [r1, r8, lsl #2]
   22200:	ldr	r1, [sl, #4]
   22204:	sub	r4, r1, r7
   22208:	str	r1, [fp, #-48]	; 0xffffffd0
   2220c:	cmp	r4, #1
   22210:	blt	22244 <__assert_fail@plt+0x10ae4>
   22214:	ldr	r1, [r9, #28]
   22218:	add	r5, r4, r6
   2221c:	cmp	r5, r1
   22220:	bgt	2217c <__assert_fail@plt+0x10a1c>
   22224:	add	r0, ip, r6
   22228:	add	r1, ip, r7
   2222c:	mov	r2, r4
   22230:	mov	r5, ip
   22234:	bl	114d8 <memcmp@plt>
   22238:	ldr	lr, [sp, #44]	; 0x2c
   2223c:	cmp	r0, #0
   22240:	bne	22298 <__assert_fail@plt+0x10b38>
   22244:	ldr	r0, [sp, #52]	; 0x34
   22248:	ldr	r3, [sp, #48]	; 0x30
   2224c:	mov	r1, lr
   22250:	mov	r2, sl
   22254:	mov	r5, lr
   22258:	str	r0, [sp]
   2225c:	mov	r0, r9
   22260:	bl	22ee8 <__assert_fail@plt+0x11788>
   22264:	cmp	r0, #1
   22268:	bhi	22820 <__assert_fail@plt+0x110c0>
   2226c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   22270:	ldr	r0, [r5, #16]
   22274:	ldr	ip, [r9, #4]
   22278:	add	r8, r8, #1
   2227c:	add	r6, r4, r6
   22280:	mov	lr, r5
   22284:	mov	r1, r9
   22288:	cmp	r8, r0
   2228c:	mov	r7, r2
   22290:	blt	221f8 <__assert_fail@plt+0x10a98>
   22294:	b	222a4 <__assert_fail@plt+0x10b44>
   22298:	ldr	r0, [lr, #16]
   2229c:	mov	ip, r5
   222a0:	mov	r2, r7
   222a4:	ldr	r5, [sp, #28]
   222a8:	cmp	r8, r0
   222ac:	bge	222b8 <__assert_fail@plt+0x10b58>
   222b0:	ldr	r8, [sp, #52]	; 0x34
   222b4:	b	224e8 <__assert_fail@plt+0x10d88>
   222b8:	cmp	r8, #0
   222bc:	ldr	r8, [sp, #52]	; 0x34
   222c0:	addne	r2, r2, #1
   222c4:	cmp	r2, r8
   222c8:	bgt	224e8 <__assert_fail@plt+0x10d88>
   222cc:	b	2243c <__assert_fail@plt+0x10cdc>
   222d0:	cmn	r4, #1
   222d4:	beq	224d4 <__assert_fail@plt+0x10d74>
   222d8:	ldr	r1, [lr, #8]
   222dc:	str	r6, [fp, #-48]	; 0xffffffd0
   222e0:	mov	r6, ip
   222e4:	mov	r5, r9
   222e8:	cmp	r1, #0
   222ec:	bne	2231c <__assert_fail@plt+0x10bbc>
   222f0:	ldr	r0, [lr]
   222f4:	add	r1, sl, #1
   222f8:	mov	r9, #12
   222fc:	sub	r1, r1, r0
   22300:	mov	r0, #12
   22304:	bl	2a858 <__assert_fail@plt+0x190f8>
   22308:	ldr	lr, [sp, #44]	; 0x2c
   2230c:	mov	r1, r0
   22310:	cmp	r0, #0
   22314:	str	r0, [lr, #8]
   22318:	beq	22810 <__assert_fail@plt+0x110b0>
   2231c:	ldr	r3, [lr]
   22320:	ldr	r2, [lr, #4]
   22324:	stm	sp, {r4, sl}
   22328:	mov	r0, #9
   2232c:	str	r0, [sp, #8]
   22330:	ldr	r0, [sp, #40]	; 0x28
   22334:	bl	230ac <__assert_fail@plt+0x1194c>
   22338:	mov	ip, r6
   2233c:	ldr	lr, [sp, #44]	; 0x2c
   22340:	ldr	r6, [fp, #-48]	; 0xffffffd0
   22344:	cmp	r0, #1
   22348:	beq	224d8 <__assert_fail@plt+0x10d78>
   2234c:	mov	r9, r0
   22350:	cmp	r0, #0
   22354:	bne	22810 <__assert_fail@plt+0x110b0>
   22358:	ldr	r1, [lr, #12]
   2235c:	ldr	r0, [lr, #16]
   22360:	ldr	r7, [sp, #40]	; 0x28
   22364:	cmp	r0, r1
   22368:	beq	2240c <__assert_fail@plt+0x10cac>
   2236c:	mov	r0, #1
   22370:	mov	r1, #20
   22374:	bl	2a858 <__assert_fail@plt+0x190f8>
   22378:	cmp	r0, #0
   2237c:	beq	22828 <__assert_fail@plt+0x110c8>
   22380:	ldr	r1, [sp, #44]	; 0x2c
   22384:	mov	r2, r0
   22388:	ldr	r0, [r1, #16]
   2238c:	ldr	r3, [r1, #20]
   22390:	str	r2, [r3, r0, lsl #2]
   22394:	stm	r2, {r4, sl}
   22398:	add	r0, r0, #1
   2239c:	ldr	r3, [sp, #48]	; 0x30
   223a0:	str	r0, [r1, #16]
   223a4:	mov	r0, r7
   223a8:	str	r8, [sp]
   223ac:	bl	22ee8 <__assert_fail@plt+0x11788>
   223b0:	cmp	r0, #1
   223b4:	bhi	22820 <__assert_fail@plt+0x110c0>
   223b8:	ldr	ip, [r7, #4]
   223bc:	ldr	lr, [sp, #44]	; 0x2c
   223c0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   223c4:	b	224d8 <__assert_fail@plt+0x10d78>
   223c8:	ldr	r0, [r9, #48]	; 0x30
   223cc:	cmp	r6, r0
   223d0:	bge	224e8 <__assert_fail@plt+0x10d88>
   223d4:	add	r4, r6, #1
   223d8:	mov	r0, r9
   223dc:	mov	r7, r5
   223e0:	mov	r5, r6
   223e4:	mov	r1, r4
   223e8:	bl	22848 <__assert_fail@plt+0x110e8>
   223ec:	cmp	r0, #0
   223f0:	bne	22820 <__assert_fail@plt+0x110c0>
   223f4:	ldr	ip, [r9, #4]
   223f8:	ldr	lr, [sp, #44]	; 0x2c
   223fc:	mov	r6, r5
   22400:	mov	r5, r7
   22404:	mov	r1, r9
   22408:	b	2245c <__assert_fail@plt+0x10cfc>
   2240c:	mov	r1, #1
   22410:	mov	r5, lr
   22414:	orr	r6, r1, r0, lsl #1
   22418:	ldr	r0, [lr, #20]
   2241c:	lsl	r1, r6, #2
   22420:	bl	2a8dc <__assert_fail@plt+0x1917c>
   22424:	cmp	r0, #0
   22428:	beq	22828 <__assert_fail@plt+0x110c8>
   2242c:	str	r6, [r5, #12]
   22430:	str	r0, [r5, #20]
   22434:	ldr	r5, [sp, #28]
   22438:	b	2236c <__assert_fail@plt+0x10c0c>
   2243c:	ldr	r0, [lr]
   22440:	mov	sl, r2
   22444:	cmp	r2, r0
   22448:	ble	22474 <__assert_fail@plt+0x10d14>
   2244c:	ldr	r0, [r9, #28]
   22450:	cmp	r6, r0
   22454:	bge	223c8 <__assert_fail@plt+0x10c68>
   22458:	add	r4, r6, #1
   2245c:	add	r1, ip, sl
   22460:	ldrb	r0, [ip, r6]
   22464:	ldrb	r1, [r1, #-1]
   22468:	cmp	r0, r1
   2246c:	beq	22478 <__assert_fail@plt+0x10d18>
   22470:	b	224e8 <__assert_fail@plt+0x10d88>
   22474:	mov	r4, r6
   22478:	ldr	r0, [r9, #100]	; 0x64
   2247c:	mov	r6, r4
   22480:	ldr	r2, [r0, sl, lsl #2]
   22484:	cmp	r2, #0
   22488:	beq	224d8 <__assert_fail@plt+0x10d78>
   2248c:	ldr	r0, [r2, #8]
   22490:	cmp	r0, #1
   22494:	blt	224d8 <__assert_fail@plt+0x10d78>
   22498:	mov	r9, r5
   2249c:	ldr	r1, [r5]
   224a0:	ldr	r2, [r2, #12]
   224a4:	ldr	r5, [sp, #36]	; 0x24
   224a8:	mov	r3, #0
   224ac:	ldr	r4, [r2, r3, lsl #2]
   224b0:	add	r7, r1, r4, lsl #3
   224b4:	ldrb	r7, [r7, #4]
   224b8:	cmp	r7, #9
   224bc:	ldreq	r7, [r1, r4, lsl #3]
   224c0:	cmpeq	r7, r5
   224c4:	beq	222d0 <__assert_fail@plt+0x10b70>
   224c8:	add	r3, r3, #1
   224cc:	cmp	r3, r0
   224d0:	blt	224ac <__assert_fail@plt+0x10d4c>
   224d4:	mov	r5, r9
   224d8:	ldr	r9, [sp, #40]	; 0x28
   224dc:	add	r2, sl, #1
   224e0:	cmp	sl, r8
   224e4:	blt	2243c <__assert_fail@plt+0x10cdc>
   224e8:	ldr	r2, [sp, #32]
   224ec:	ldr	r0, [r9, #124]	; 0x7c
   224f0:	add	r2, r2, #1
   224f4:	cmp	r2, r0
   224f8:	blt	2212c <__assert_fail@plt+0x109cc>
   224fc:	mov	r1, #0
   22500:	ldr	r0, [r9, #108]	; 0x6c
   22504:	str	r1, [fp, #-32]	; 0xffffffe0
   22508:	ldr	r1, [sp, #12]
   2250c:	cmp	r1, r0
   22510:	bge	227f0 <__assert_fail@plt+0x11090>
   22514:	b	22560 <__assert_fail@plt+0x10e00>
   22518:	mov	r0, #0
   2251c:	str	r0, [fp, #-32]	; 0xffffffe0
   22520:	b	227f0 <__assert_fail@plt+0x11090>
   22524:	ldr	r0, [r3, #88]	; 0x58
   22528:	and	r0, r0, #2
   2252c:	eor	sl, r0, #10
   22530:	b	22694 <__assert_fail@plt+0x10f34>
   22534:	mov	r0, r4
   22538:	bl	1164c <iswalnum@plt>
   2253c:	mov	sl, #1
   22540:	cmp	r4, #95	; 0x5f
   22544:	beq	22558 <__assert_fail@plt+0x10df8>
   22548:	ldr	r3, [sp, #40]	; 0x28
   2254c:	cmp	r0, #0
   22550:	beq	2267c <__assert_fail@plt+0x10f1c>
   22554:	b	22694 <__assert_fail@plt+0x10f34>
   22558:	ldr	r3, [sp, #40]	; 0x28
   2255c:	b	22694 <__assert_fail@plt+0x10f34>
   22560:	ldr	r0, [r9, #116]	; 0x74
   22564:	mov	r5, r1
   22568:	add	r1, r1, r1, lsl #1
   2256c:	ldr	r3, [sp, #48]	; 0x30
   22570:	ldr	r2, [r0, r1, lsl #3]
   22574:	cmp	r2, r3
   22578:	bne	227d4 <__assert_fail@plt+0x11074>
   2257c:	add	r0, r0, r1, lsl #3
   22580:	ldr	r2, [sp, #52]	; 0x34
   22584:	ldr	r1, [r0, #4]
   22588:	cmp	r1, r2
   2258c:	bne	227d4 <__assert_fail@plt+0x11074>
   22590:	ldr	r2, [r0, #8]
   22594:	ldr	r6, [r0, #12]
   22598:	ldr	r0, [sp, #20]
   2259c:	ldr	r8, [r0, #24]
   225a0:	cmp	r6, r2
   225a4:	bne	225c0 <__assert_fail@plt+0x10e60>
   225a8:	ldr	r1, [sp, #48]	; 0x30
   225ac:	ldr	r0, [r0, #20]
   225b0:	add	r1, r1, r1, lsl #1
   225b4:	add	r0, r0, r1, lsl #2
   225b8:	ldr	r0, [r0, #8]
   225bc:	b	225cc <__assert_fail@plt+0x10e6c>
   225c0:	ldr	r0, [r0, #12]
   225c4:	ldr	r1, [sp, #48]	; 0x30
   225c8:	add	r0, r0, r1, lsl #2
   225cc:	ldr	r9, [r0]
   225d0:	ldr	r0, [sp, #52]	; 0x34
   225d4:	str	r2, [fp, #-48]	; 0xffffffd0
   225d8:	add	r0, r6, r0
   225dc:	sub	r7, r0, r2
   225e0:	cmp	r7, #0
   225e4:	ble	2262c <__assert_fail@plt+0x10ecc>
   225e8:	ldr	r3, [sp, #40]	; 0x28
   225ec:	sub	r0, r7, #1
   225f0:	ldr	r1, [r3, #48]	; 0x30
   225f4:	cmp	r1, r0
   225f8:	beq	22524 <__assert_fail@plt+0x10dc4>
   225fc:	ldr	r1, [r3, #80]	; 0x50
   22600:	cmp	r1, #2
   22604:	blt	22638 <__assert_fail@plt+0x10ed8>
   22608:	ldr	r0, [r3, #8]
   2260c:	mov	r1, r7
   22610:	sub	r0, r0, #4
   22614:	ldr	r4, [r0, r1, lsl #2]
   22618:	cmn	r4, #1
   2261c:	bne	2266c <__assert_fail@plt+0x10f0c>
   22620:	sub	r1, r1, #1
   22624:	cmp	r1, #0
   22628:	bgt	22614 <__assert_fail@plt+0x10eb4>
   2262c:	ldr	r3, [sp, #40]	; 0x28
   22630:	ldr	sl, [r3, #60]	; 0x3c
   22634:	b	22694 <__assert_fail@plt+0x10f34>
   22638:	ldr	r1, [r3, #4]
   2263c:	ldr	r2, [r3, #68]	; 0x44
   22640:	mov	sl, #1
   22644:	ldrb	r0, [r1, r0]
   22648:	ubfx	r1, r0, #5, #3
   2264c:	ldr	r1, [r2, r1, lsl #2]
   22650:	and	r2, r0, #31
   22654:	tst	r1, sl, lsl r2
   22658:	bne	22694 <__assert_fail@plt+0x10f34>
   2265c:	mov	sl, #0
   22660:	cmp	r0, #10
   22664:	beq	22688 <__assert_fail@plt+0x10f28>
   22668:	b	22694 <__assert_fail@plt+0x10f34>
   2266c:	ldr	r3, [sp, #40]	; 0x28
   22670:	ldrb	r0, [r3, #78]	; 0x4e
   22674:	cmp	r0, #0
   22678:	bne	22534 <__assert_fail@plt+0x10dd4>
   2267c:	mov	sl, #0
   22680:	cmp	r4, #10
   22684:	bne	22694 <__assert_fail@plt+0x10f34>
   22688:	ldrb	sl, [r3, #77]	; 0x4d
   2268c:	cmp	sl, #0
   22690:	movwne	sl, #2
   22694:	ldr	r0, [r3, #100]	; 0x64
   22698:	ldr	r2, [sp, #52]	; 0x34
   2269c:	add	r1, r9, r9, lsl #1
   226a0:	mov	r4, r3
   226a4:	add	r8, r8, r1, lsl #2
   226a8:	ldr	r2, [r0, r2, lsl #2]
   226ac:	ldr	r0, [r0, r7, lsl #2]
   226b0:	cmp	r2, #0
   226b4:	ldrne	r2, [r2, #8]
   226b8:	moveq	r2, #0
   226bc:	cmp	r0, #0
   226c0:	str	r2, [sp, #44]	; 0x2c
   226c4:	beq	22730 <__assert_fail@plt+0x10fd0>
   226c8:	ldr	r1, [r0, #40]	; 0x28
   226cc:	sub	r4, fp, #44	; 0x2c
   226d0:	mov	r2, r8
   226d4:	mov	r0, r4
   226d8:	bl	22c64 <__assert_fail@plt+0x11504>
   226dc:	cmp	r0, #0
   226e0:	str	r0, [fp, #-32]	; 0xffffffe0
   226e4:	bne	22830 <__assert_fail@plt+0x110d0>
   226e8:	ldr	r1, [sp, #20]
   226ec:	sub	r0, fp, #32
   226f0:	mov	r2, r4
   226f4:	mov	r3, sl
   226f8:	bl	20d8c <__assert_fail@plt+0xf62c>
   226fc:	ldr	r4, [sp, #40]	; 0x28
   22700:	ldr	r1, [r4, #100]	; 0x64
   22704:	str	r0, [r1, r7, lsl #2]
   22708:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2270c:	bl	141c4 <__assert_fail@plt+0x2a64>
   22710:	ldr	r0, [r4, #100]	; 0x64
   22714:	ldr	r1, [r0, r7, lsl #2]
   22718:	cmp	r1, #0
   2271c:	bne	22778 <__assert_fail@plt+0x11018>
   22720:	ldr	r9, [fp, #-32]	; 0xffffffe0
   22724:	cmp	r9, #0
   22728:	beq	22778 <__assert_fail@plt+0x11018>
   2272c:	b	22814 <__assert_fail@plt+0x110b4>
   22730:	ldr	r1, [sp, #20]
   22734:	sub	r0, fp, #32
   22738:	mov	r2, r8
   2273c:	mov	r3, sl
   22740:	bl	20d8c <__assert_fail@plt+0xf62c>
   22744:	ldr	r1, [r4, #100]	; 0x64
   22748:	str	r0, [r1, r7, lsl #2]
   2274c:	ldr	r0, [r4, #100]	; 0x64
   22750:	ldr	r1, [r0, r7, lsl #2]
   22754:	cmp	r1, #0
   22758:	bne	22778 <__assert_fail@plt+0x11018>
   2275c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   22760:	ldr	r1, [fp, #-48]	; 0xffffffd0
   22764:	cmp	r9, #0
   22768:	bne	22814 <__assert_fail@plt+0x110b4>
   2276c:	cmp	r6, r1
   22770:	bne	227d4 <__assert_fail@plt+0x11074>
   22774:	b	22784 <__assert_fail@plt+0x11024>
   22778:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2277c:	cmp	r6, r1
   22780:	bne	227d4 <__assert_fail@plt+0x11074>
   22784:	ldr	r1, [sp, #52]	; 0x34
   22788:	ldr	r0, [r0, r1, lsl #2]
   2278c:	ldr	r1, [sp, #44]	; 0x2c
   22790:	ldr	r0, [r0, #8]
   22794:	cmp	r0, r1
   22798:	ble	227d4 <__assert_fail@plt+0x11074>
   2279c:	ldr	r4, [sp, #40]	; 0x28
   227a0:	ldr	r2, [sp, #52]	; 0x34
   227a4:	mov	r1, r8
   227a8:	mov	r0, r4
   227ac:	bl	21dc0 <__assert_fail@plt+0x10660>
   227b0:	cmp	r0, #0
   227b4:	str	r0, [fp, #-32]	; 0xffffffe0
   227b8:	bne	22840 <__assert_fail@plt+0x110e0>
   227bc:	mov	r0, r4
   227c0:	mov	r1, r8
   227c4:	bl	21ebc <__assert_fail@plt+0x1075c>
   227c8:	cmp	r0, #0
   227cc:	str	r0, [fp, #-32]	; 0xffffffe0
   227d0:	bne	22840 <__assert_fail@plt+0x110e0>
   227d4:	ldr	r9, [sp, #40]	; 0x28
   227d8:	ldr	r8, [sp, #52]	; 0x34
   227dc:	mov	r1, r5
   227e0:	add	r1, r5, #1
   227e4:	ldr	r0, [r9, #108]	; 0x6c
   227e8:	cmp	r1, r0
   227ec:	blt	22560 <__assert_fail@plt+0x10e00>
   227f0:	ldr	r1, [sp, #16]
   227f4:	ldr	r3, [sp, #24]
   227f8:	ldr	r2, [sp, #20]
   227fc:	ldr	r0, [r1, #4]
   22800:	add	r3, r3, #1
   22804:	cmp	r3, r0
   22808:	blt	21f2c <__assert_fail@plt+0x107cc>
   2280c:	mov	r9, #0
   22810:	str	r9, [fp, #-32]	; 0xffffffe0
   22814:	mov	r0, r9
   22818:	sub	sp, fp, #28
   2281c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22820:	mov	r9, r0
   22824:	b	22810 <__assert_fail@plt+0x110b0>
   22828:	mov	r9, #12
   2282c:	b	22810 <__assert_fail@plt+0x110b0>
   22830:	mov	r9, r0
   22834:	ldr	r0, [fp, #-36]	; 0xffffffdc
   22838:	bl	141c4 <__assert_fail@plt+0x2a64>
   2283c:	b	22814 <__assert_fail@plt+0x110b4>
   22840:	mov	r9, r0
   22844:	b	22814 <__assert_fail@plt+0x110b4>
   22848:	push	{r4, r5, r6, r7, fp, lr}
   2284c:	add	fp, sp, #16
   22850:	mov	r4, r0
   22854:	ldr	r0, [r0, #36]	; 0x24
   22858:	mov	r5, #12
   2285c:	cmn	r0, #-536870910	; 0xe0000002
   22860:	bhi	22a48 <__assert_fail@plt+0x112e8>
   22864:	ldr	r6, [r4, #48]	; 0x30
   22868:	ldr	r2, [r4, #80]	; 0x50
   2286c:	cmp	r6, r0, lsl #1
   22870:	lslge	r6, r0, #1
   22874:	cmp	r6, r1
   22878:	movle	r6, r1
   2287c:	cmp	r2, #2
   22880:	blt	228c8 <__assert_fail@plt+0x11168>
   22884:	cmn	r6, #-1073741823	; 0xc0000001
   22888:	bhi	22a48 <__assert_fail@plt+0x112e8>
   2288c:	ldr	r0, [r4, #8]
   22890:	lsl	r7, r6, #2
   22894:	mov	r1, r7
   22898:	bl	2a8dc <__assert_fail@plt+0x1917c>
   2289c:	cmp	r0, #0
   228a0:	beq	22a48 <__assert_fail@plt+0x112e8>
   228a4:	str	r0, [r4, #8]
   228a8:	ldr	r0, [r4, #12]
   228ac:	cmp	r0, #0
   228b0:	beq	228c8 <__assert_fail@plt+0x11168>
   228b4:	mov	r1, r7
   228b8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   228bc:	cmp	r0, #0
   228c0:	beq	22a48 <__assert_fail@plt+0x112e8>
   228c4:	str	r0, [r4, #12]
   228c8:	ldrb	r0, [r4, #75]	; 0x4b
   228cc:	cmp	r0, #0
   228d0:	beq	228ec <__assert_fail@plt+0x1118c>
   228d4:	ldr	r0, [r4, #4]
   228d8:	mov	r1, r6
   228dc:	bl	2a8dc <__assert_fail@plt+0x1917c>
   228e0:	cmp	r0, #0
   228e4:	beq	22a48 <__assert_fail@plt+0x112e8>
   228e8:	str	r0, [r4, #4]
   228ec:	str	r6, [r4, #36]	; 0x24
   228f0:	ldr	r0, [r4, #100]	; 0x64
   228f4:	cmp	r0, #0
   228f8:	beq	22914 <__assert_fail@plt+0x111b4>
   228fc:	mov	r1, #4
   22900:	add	r1, r1, r6, lsl #2
   22904:	bl	2a8dc <__assert_fail@plt+0x1917c>
   22908:	cmp	r0, #0
   2290c:	beq	22a48 <__assert_fail@plt+0x112e8>
   22910:	str	r0, [r4, #100]	; 0x64
   22914:	ldrb	r1, [r4, #72]	; 0x48
   22918:	ldr	r0, [r4, #80]	; 0x50
   2291c:	cmp	r1, #0
   22920:	beq	22940 <__assert_fail@plt+0x111e0>
   22924:	cmp	r0, #2
   22928:	blt	22954 <__assert_fail@plt+0x111f4>
   2292c:	mov	r0, r4
   22930:	bl	1b250 <__assert_fail@plt+0x9af0>
   22934:	cmp	r0, #0
   22938:	popne	{r4, r5, r6, r7, fp, pc}
   2293c:	b	22a44 <__assert_fail@plt+0x112e4>
   22940:	cmp	r0, #2
   22944:	blt	229cc <__assert_fail@plt+0x1126c>
   22948:	mov	r0, r4
   2294c:	bl	1b910 <__assert_fail@plt+0xa1b0>
   22950:	b	22a44 <__assert_fail@plt+0x112e4>
   22954:	ldr	r6, [r4, #36]	; 0x24
   22958:	ldr	r0, [r4, #48]	; 0x30
   2295c:	ldr	r5, [r4, #28]
   22960:	cmp	r6, r0
   22964:	movgt	r6, r0
   22968:	cmp	r5, r6
   2296c:	bge	229c0 <__assert_fail@plt+0x11260>
   22970:	ldr	r1, [r4]
   22974:	ldr	r2, [r4, #24]
   22978:	ldr	r0, [r4, #64]	; 0x40
   2297c:	add	r1, r1, r2
   22980:	cmp	r0, #0
   22984:	ldrb	r7, [r1, r5]
   22988:	ldrbne	r7, [r0, r7]
   2298c:	add	r0, r7, #128	; 0x80
   22990:	lsr	r0, r0, #7
   22994:	cmp	r0, #2
   22998:	bhi	229a8 <__assert_fail@plt+0x11248>
   2299c:	bl	115ec <__ctype_toupper_loc@plt>
   229a0:	ldr	r0, [r0]
   229a4:	ldr	r7, [r0, r7, lsl #2]
   229a8:	ldr	r0, [r4, #4]
   229ac:	strb	r7, [r0, r5]
   229b0:	add	r5, r5, #1
   229b4:	cmp	r5, r6
   229b8:	blt	22970 <__assert_fail@plt+0x11210>
   229bc:	mov	r5, r6
   229c0:	str	r5, [r4, #28]
   229c4:	str	r5, [r4, #32]
   229c8:	b	22a44 <__assert_fail@plt+0x112e4>
   229cc:	ldr	r2, [r4, #64]	; 0x40
   229d0:	cmp	r2, #0
   229d4:	beq	22a44 <__assert_fail@plt+0x112e4>
   229d8:	ldr	r0, [r4, #36]	; 0x24
   229dc:	ldr	r3, [r4, #48]	; 0x30
   229e0:	ldr	r1, [r4, #28]
   229e4:	cmp	r0, r3
   229e8:	movgt	r0, r3
   229ec:	cmp	r1, r0
   229f0:	bge	22a3c <__assert_fail@plt+0x112dc>
   229f4:	ldm	r4, {r3, r7}
   229f8:	ldr	r6, [r4, #24]
   229fc:	add	r6, r6, r1
   22a00:	ldrb	r3, [r3, r6]
   22a04:	ldrb	r2, [r2, r3]
   22a08:	strb	r2, [r7, r1]
   22a0c:	b	22a2c <__assert_fail@plt+0x112cc>
   22a10:	ldm	r4, {r2, r3}
   22a14:	ldr	r7, [r4, #24]
   22a18:	ldr	r6, [r4, #64]	; 0x40
   22a1c:	add	r2, r2, r7
   22a20:	ldrb	r2, [r2, r1]
   22a24:	ldrb	r2, [r6, r2]
   22a28:	strb	r2, [r3, r1]
   22a2c:	add	r1, r1, #1
   22a30:	cmp	r1, r0
   22a34:	blt	22a10 <__assert_fail@plt+0x112b0>
   22a38:	mov	r1, r0
   22a3c:	str	r1, [r4, #28]
   22a40:	str	r1, [r4, #32]
   22a44:	mov	r5, #0
   22a48:	mov	r0, r5
   22a4c:	pop	{r4, r5, r6, r7, fp, pc}
   22a50:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22a54:	add	fp, sp, #24
   22a58:	sub	sp, sp, #16
   22a5c:	mov	r9, r0
   22a60:	mov	r4, r1
   22a64:	ldr	r5, [r1, #40]	; 0x28
   22a68:	ldr	r7, [r1, #84]	; 0x54
   22a6c:	ldr	r0, [r1, #100]	; 0x64
   22a70:	ldr	r1, [r1, #104]	; 0x68
   22a74:	mov	r6, r2
   22a78:	cmp	r5, r1
   22a7c:	ble	22a8c <__assert_fail@plt+0x1132c>
   22a80:	str	r6, [r0, r5, lsl #2]
   22a84:	str	r5, [r4, #104]	; 0x68
   22a88:	b	22bc0 <__assert_fail@plt+0x11460>
   22a8c:	ldr	r1, [r0, r5, lsl #2]
   22a90:	cmp	r1, #0
   22a94:	beq	22ad0 <__assert_fail@plt+0x11370>
   22a98:	ldr	r2, [r1, #40]	; 0x28
   22a9c:	cmp	r6, #0
   22aa0:	beq	22ad8 <__assert_fail@plt+0x11378>
   22aa4:	ldr	r8, [r6, #40]	; 0x28
   22aa8:	mov	r0, sp
   22aac:	mov	r1, r8
   22ab0:	bl	22c64 <__assert_fail@plt+0x11504>
   22ab4:	cmp	r0, #0
   22ab8:	str	r0, [r9]
   22abc:	bne	22c2c <__assert_fail@plt+0x114cc>
   22ac0:	ldr	r0, [r4, #40]	; 0x28
   22ac4:	cmp	r0, #0
   22ac8:	bgt	22af8 <__assert_fail@plt+0x11398>
   22acc:	b	22b34 <__assert_fail@plt+0x113d4>
   22ad0:	str	r6, [r0, r5, lsl #2]
   22ad4:	b	22bc0 <__assert_fail@plt+0x11460>
   22ad8:	ldr	r0, [r2, #8]
   22adc:	vldr	d16, [r2]
   22ae0:	mov	r8, #0
   22ae4:	str	r0, [sp, #8]
   22ae8:	mov	r0, r5
   22aec:	vstr	d16, [sp]
   22af0:	cmp	r0, #0
   22af4:	ble	22b34 <__assert_fail@plt+0x113d4>
   22af8:	ldr	r2, [r4, #48]	; 0x30
   22afc:	sub	r1, r0, #1
   22b00:	cmp	r2, r1
   22b04:	beq	22c34 <__assert_fail@plt+0x114d4>
   22b08:	ldr	r2, [r4, #80]	; 0x50
   22b0c:	cmp	r2, #2
   22b10:	blt	22b3c <__assert_fail@plt+0x113dc>
   22b14:	ldr	r1, [r4, #8]
   22b18:	sub	r1, r1, #4
   22b1c:	ldr	r6, [r1, r0, lsl #2]
   22b20:	cmn	r6, #1
   22b24:	bne	22b70 <__assert_fail@plt+0x11410>
   22b28:	sub	r0, r0, #1
   22b2c:	cmp	r0, #0
   22b30:	bgt	22b1c <__assert_fail@plt+0x113bc>
   22b34:	ldr	r3, [r4, #60]	; 0x3c
   22b38:	b	22b94 <__assert_fail@plt+0x11434>
   22b3c:	ldr	r0, [r4, #4]
   22b40:	ldr	r2, [r4, #68]	; 0x44
   22b44:	mov	r3, #1
   22b48:	ldrb	r0, [r0, r1]
   22b4c:	ubfx	r1, r0, #5, #3
   22b50:	ldr	r1, [r2, r1, lsl #2]
   22b54:	and	r2, r0, #31
   22b58:	tst	r1, r3, lsl r2
   22b5c:	bne	22b94 <__assert_fail@plt+0x11434>
   22b60:	mov	r3, #0
   22b64:	cmp	r0, #10
   22b68:	beq	22b88 <__assert_fail@plt+0x11428>
   22b6c:	b	22b94 <__assert_fail@plt+0x11434>
   22b70:	ldrb	r0, [r4, #78]	; 0x4e
   22b74:	cmp	r0, #0
   22b78:	bne	22c44 <__assert_fail@plt+0x114e4>
   22b7c:	mov	r3, #0
   22b80:	cmp	r6, #10
   22b84:	bne	22b94 <__assert_fail@plt+0x11434>
   22b88:	ldrb	r3, [r4, #77]	; 0x4d
   22b8c:	cmp	r3, #0
   22b90:	movwne	r3, #2
   22b94:	mov	r2, sp
   22b98:	mov	r0, r9
   22b9c:	mov	r1, r7
   22ba0:	bl	20d8c <__assert_fail@plt+0xf62c>
   22ba4:	mov	r6, r0
   22ba8:	ldr	r0, [r4, #100]	; 0x64
   22bac:	cmp	r8, #0
   22bb0:	str	r6, [r0, r5, lsl #2]
   22bb4:	beq	22bc0 <__assert_fail@plt+0x11460>
   22bb8:	ldr	r0, [sp, #8]
   22bbc:	bl	141c4 <__assert_fail@plt+0x2a64>
   22bc0:	cmp	r6, #0
   22bc4:	ldrne	r0, [r7, #76]	; 0x4c
   22bc8:	cmpne	r0, #0
   22bcc:	bne	22bdc <__assert_fail@plt+0x1147c>
   22bd0:	mov	r0, r6
   22bd4:	sub	sp, fp, #24
   22bd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22bdc:	add	r7, r6, #4
   22be0:	mov	r0, r4
   22be4:	mov	r2, r5
   22be8:	mov	r1, r7
   22bec:	bl	21dc0 <__assert_fail@plt+0x10660>
   22bf0:	cmp	r0, #0
   22bf4:	str	r0, [r9]
   22bf8:	bne	22c2c <__assert_fail@plt+0x114cc>
   22bfc:	ldrb	r0, [r6, #52]	; 0x34
   22c00:	tst	r0, #64	; 0x40
   22c04:	beq	22bd0 <__assert_fail@plt+0x11470>
   22c08:	mov	r0, r4
   22c0c:	mov	r1, r7
   22c10:	bl	21ebc <__assert_fail@plt+0x1075c>
   22c14:	str	r0, [r9]
   22c18:	cmp	r0, #0
   22c1c:	mov	r6, #0
   22c20:	ldreq	r0, [r4, #100]	; 0x64
   22c24:	ldreq	r6, [r0, r5, lsl #2]
   22c28:	b	22bd0 <__assert_fail@plt+0x11470>
   22c2c:	mov	r6, #0
   22c30:	b	22bd0 <__assert_fail@plt+0x11470>
   22c34:	ldr	r0, [r4, #88]	; 0x58
   22c38:	and	r0, r0, #2
   22c3c:	eor	r3, r0, #10
   22c40:	b	22b94 <__assert_fail@plt+0x11434>
   22c44:	mov	r0, r6
   22c48:	bl	1164c <iswalnum@plt>
   22c4c:	mov	r3, #1
   22c50:	cmp	r6, #95	; 0x5f
   22c54:	beq	22b94 <__assert_fail@plt+0x11434>
   22c58:	cmp	r0, #0
   22c5c:	beq	22b7c <__assert_fail@plt+0x1141c>
   22c60:	b	22b94 <__assert_fail@plt+0x11434>
   22c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c68:	add	fp, sp, #28
   22c6c:	sub	sp, sp, #20
   22c70:	mov	sl, r2
   22c74:	cmp	r1, #0
   22c78:	str	r0, [sp, #16]
   22c7c:	beq	22ce4 <__assert_fail@plt+0x11584>
   22c80:	ldr	r0, [r1, #4]
   22c84:	mov	r8, r1
   22c88:	cmp	sl, #0
   22c8c:	beq	22ca0 <__assert_fail@plt+0x11540>
   22c90:	cmp	r0, #1
   22c94:	ldrge	r1, [sl, #4]
   22c98:	cmpge	r1, #1
   22c9c:	bge	22d58 <__assert_fail@plt+0x115f8>
   22ca0:	cmp	r0, #1
   22ca4:	blt	22ce4 <__assert_fail@plt+0x11584>
   22ca8:	ldr	r1, [sp, #16]
   22cac:	str	r0, [r1, #4]
   22cb0:	ldr	r1, [r8, #4]
   22cb4:	cmp	r1, #1
   22cb8:	blt	22d3c <__assert_fail@plt+0x115dc>
   22cbc:	ldr	r4, [sp, #16]
   22cc0:	str	r0, [r4]
   22cc4:	lsl	r0, r0, #2
   22cc8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   22ccc:	cmp	r0, #0
   22cd0:	str	r0, [r4, #8]
   22cd4:	beq	22ecc <__assert_fail@plt+0x1176c>
   22cd8:	ldr	r2, [r8, #4]
   22cdc:	ldr	r1, [r8, #8]
   22ce0:	b	22d30 <__assert_fail@plt+0x115d0>
   22ce4:	cmp	sl, #0
   22ce8:	beq	22d3c <__assert_fail@plt+0x115dc>
   22cec:	ldr	r0, [sl, #4]
   22cf0:	cmp	r0, #1
   22cf4:	blt	22d3c <__assert_fail@plt+0x115dc>
   22cf8:	ldr	r1, [sp, #16]
   22cfc:	str	r0, [r1, #4]
   22d00:	ldr	r1, [sl, #4]
   22d04:	cmp	r1, #1
   22d08:	blt	22d3c <__assert_fail@plt+0x115dc>
   22d0c:	ldr	r4, [sp, #16]
   22d10:	str	r0, [r4]
   22d14:	lsl	r0, r0, #2
   22d18:	bl	2a8ac <__assert_fail@plt+0x1914c>
   22d1c:	cmp	r0, #0
   22d20:	str	r0, [r4, #8]
   22d24:	beq	22ecc <__assert_fail@plt+0x1176c>
   22d28:	ldr	r2, [sl, #4]
   22d2c:	ldr	r1, [sl, #8]
   22d30:	lsl	r2, r2, #2
   22d34:	bl	11484 <memcpy@plt>
   22d38:	b	22ec0 <__assert_fail@plt+0x11760>
   22d3c:	ldr	r1, [sp, #16]
   22d40:	mov	r0, #0
   22d44:	str	r0, [r1]
   22d48:	str	r0, [r1, #4]
   22d4c:	str	r0, [r1, #8]
   22d50:	sub	sp, fp, #28
   22d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22d58:	ldr	r4, [sp, #16]
   22d5c:	add	r0, r1, r0
   22d60:	str	r0, [r4]
   22d64:	lsl	r0, r0, #2
   22d68:	bl	2a8ac <__assert_fail@plt+0x1914c>
   22d6c:	cmp	r0, #0
   22d70:	str	r0, [r4, #8]
   22d74:	beq	22edc <__assert_fail@plt+0x1177c>
   22d78:	ldr	r9, [sl, #4]
   22d7c:	ldr	lr, [r8, #4]
   22d80:	mov	r1, #0
   22d84:	mov	r7, #0
   22d88:	cmp	r9, #0
   22d8c:	movwgt	r1, #1
   22d90:	cmp	lr, #1
   22d94:	blt	22e60 <__assert_fail@plt+0x11700>
   22d98:	mov	r2, #0
   22d9c:	mov	ip, #0
   22da0:	str	r2, [sp, #8]
   22da4:	mov	r2, #0
   22da8:	str	r2, [sp, #12]
   22dac:	mov	r2, #0
   22db0:	ldr	r4, [sp, #12]
   22db4:	mov	r7, ip
   22db8:	tst	r1, #1
   22dbc:	beq	22e90 <__assert_fail@plt+0x11730>
   22dc0:	ldr	r1, [sl, #8]
   22dc4:	ldr	r5, [r1, r7, lsl #2]
   22dc8:	ldr	r1, [r8, #8]
   22dcc:	ldr	r3, [r1, r2, lsl #2]
   22dd0:	cmp	r3, r5
   22dd4:	ble	22dfc <__assert_fail@plt+0x1169c>
   22dd8:	add	r7, r7, #1
   22ddc:	mov	r1, #0
   22de0:	str	r5, [r0, r4, lsl #2]
   22de4:	add	r4, r4, #1
   22de8:	cmp	r9, r7
   22dec:	movwgt	r1, #1
   22df0:	cmp	lr, r2
   22df4:	bgt	22db8 <__assert_fail@plt+0x11658>
   22df8:	b	22e64 <__assert_fail@plt+0x11704>
   22dfc:	str	r3, [r0, r4, lsl #2]
   22e00:	ldr	r6, [sp, #8]
   22e04:	add	r1, r7, #1
   22e08:	mov	ip, r7
   22e0c:	add	r2, r2, #1
   22e10:	ldr	r9, [sl, #4]
   22e14:	ldr	lr, [r8, #4]
   22e18:	moveq	ip, r1
   22e1c:	str	r1, [sp, #4]
   22e20:	mov	r1, #0
   22e24:	sub	r6, r6, #1
   22e28:	cmp	r9, ip
   22e2c:	str	r6, [sp, #8]
   22e30:	add	r6, r4, #1
   22e34:	movwgt	r1, #1
   22e38:	cmp	lr, r2
   22e3c:	str	r6, [sp, #12]
   22e40:	bgt	22db0 <__assert_fail@plt+0x11650>
   22e44:	ldr	r2, [sp, #4]
   22e48:	cmp	r3, r5
   22e4c:	add	r4, r4, #1
   22e50:	moveq	r7, r2
   22e54:	cmp	r1, #0
   22e58:	bne	22e6c <__assert_fail@plt+0x1170c>
   22e5c:	b	22eb8 <__assert_fail@plt+0x11758>
   22e60:	mov	r4, #0
   22e64:	cmp	r1, #0
   22e68:	beq	22eb8 <__assert_fail@plt+0x11758>
   22e6c:	ldr	r1, [sl, #8]
   22e70:	sub	r2, r9, r7
   22e74:	add	r0, r0, r4, lsl #2
   22e78:	lsl	r2, r2, #2
   22e7c:	add	r1, r1, r7, lsl #2
   22e80:	bl	11484 <memcpy@plt>
   22e84:	sub	r0, r4, r7
   22e88:	add	r4, r0, r9
   22e8c:	b	22eb8 <__assert_fail@plt+0x11758>
   22e90:	ldr	r1, [r8, #8]
   22e94:	add	r0, r0, r4, lsl #2
   22e98:	add	r1, r1, r2, lsl #2
   22e9c:	sub	r2, lr, r2
   22ea0:	lsl	r2, r2, #2
   22ea4:	bl	11484 <memcpy@plt>
   22ea8:	ldr	r0, [r8, #4]
   22eac:	ldr	r1, [sp, #8]
   22eb0:	add	r0, r0, r1
   22eb4:	add	r4, r0, r4
   22eb8:	ldr	r0, [sp, #16]
   22ebc:	str	r4, [r0, #4]
   22ec0:	mov	r0, #0
   22ec4:	sub	sp, fp, #28
   22ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ecc:	ldr	r1, [sp, #16]
   22ed0:	mov	r0, #0
   22ed4:	str	r0, [r1]
   22ed8:	str	r0, [r1, #4]
   22edc:	mov	r0, #12
   22ee0:	sub	sp, fp, #28
   22ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22eec:	add	fp, sp, #28
   22ef0:	sub	sp, sp, #12
   22ef4:	mov	r6, r2
   22ef8:	mov	r7, r3
   22efc:	ldr	r2, [r2]
   22f00:	ldr	r9, [fp, #8]
   22f04:	mov	r4, r0
   22f08:	mov	r0, #8
   22f0c:	mov	r8, r1
   22f10:	ldr	r3, [r6, #4]
   22f14:	str	r0, [sp, #8]
   22f18:	add	r1, r6, #8
   22f1c:	mov	r0, r4
   22f20:	stm	sp, {r7, r9}
   22f24:	bl	230ac <__assert_fail@plt+0x1194c>
   22f28:	mov	r5, r0
   22f2c:	cmp	r0, #0
   22f30:	beq	22f40 <__assert_fail@plt+0x117e0>
   22f34:	mov	r0, r5
   22f38:	sub	sp, fp, #28
   22f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f40:	ldr	r0, [r4, #108]	; 0x6c
   22f44:	ldr	r1, [r4, #112]	; 0x70
   22f48:	ldr	sl, [r6, #4]
   22f4c:	ldr	r5, [r8]
   22f50:	cmp	r0, r1
   22f54:	blt	22fa4 <__assert_fail@plt+0x11844>
   22f58:	ldr	r0, [r4, #116]	; 0x74
   22f5c:	add	r1, r1, r1, lsl #1
   22f60:	lsl	r1, r1, #4
   22f64:	bl	2a8dc <__assert_fail@plt+0x1917c>
   22f68:	cmp	r0, #0
   22f6c:	beq	2309c <__assert_fail@plt+0x1193c>
   22f70:	str	r0, [r4, #116]	; 0x74
   22f74:	ldr	r1, [r4, #108]	; 0x6c
   22f78:	ldr	r2, [r4, #112]	; 0x70
   22f7c:	add	r1, r1, r1, lsl #1
   22f80:	add	r0, r0, r1, lsl #3
   22f84:	add	r1, r2, r2, lsl #1
   22f88:	lsl	r2, r1, #3
   22f8c:	mov	r1, #0
   22f90:	bl	11670 <memset@plt>
   22f94:	ldr	r1, [r4, #112]	; 0x70
   22f98:	ldr	r0, [r4, #108]	; 0x6c
   22f9c:	lsl	r1, r1, #1
   22fa0:	str	r1, [r4, #112]	; 0x70
   22fa4:	ldr	r1, [r4, #116]	; 0x74
   22fa8:	cmp	r0, #1
   22fac:	blt	22fcc <__assert_fail@plt+0x1186c>
   22fb0:	sub	r2, r0, #1
   22fb4:	add	r2, r2, r2, lsl #1
   22fb8:	add	r2, r1, r2, lsl #3
   22fbc:	ldr	r3, [r2, #4]
   22fc0:	cmp	r3, r9
   22fc4:	moveq	r3, #1
   22fc8:	strbeq	r3, [r2, #20]
   22fcc:	add	r2, r0, r0, lsl #1
   22fd0:	cmp	sl, r5
   22fd4:	mov	r3, #0
   22fd8:	add	r0, r0, #1
   22fdc:	str	r7, [r1, r2, lsl #3]!
   22fe0:	mov	r2, #0
   22fe4:	mvneq	r3, #0
   22fe8:	str	r9, [r1, #4]
   22fec:	str	r5, [r1, #8]
   22ff0:	str	sl, [r1, #12]
   22ff4:	str	r3, [r1, #16]
   22ff8:	str	r0, [r4, #108]	; 0x6c
   22ffc:	strb	r2, [r1, #20]
   23000:	sub	r0, sl, r5
   23004:	ldr	r1, [r4, #120]	; 0x78
   23008:	cmp	r1, r0
   2300c:	strlt	r0, [r4, #120]	; 0x78
   23010:	ldr	r0, [r6, #4]
   23014:	ldr	r1, [r8]
   23018:	ldr	r7, [r4, #104]	; 0x68
   2301c:	add	r0, r0, r9
   23020:	sub	r6, r0, r1
   23024:	ldr	r0, [r4, #36]	; 0x24
   23028:	cmp	r0, r6
   2302c:	ldrle	r1, [r4, #48]	; 0x30
   23030:	cmple	r0, r1
   23034:	blt	23080 <__assert_fail@plt+0x11920>
   23038:	ldr	r0, [r4, #28]
   2303c:	cmp	r0, r6
   23040:	ldrle	r1, [r4, #48]	; 0x30
   23044:	cmple	r0, r1
   23048:	blt	23080 <__assert_fail@plt+0x11920>
   2304c:	mov	r5, #0
   23050:	cmp	r6, r7
   23054:	ble	22f34 <__assert_fail@plt+0x117d4>
   23058:	sub	r0, r6, r7
   2305c:	mov	r1, #0
   23060:	mov	r5, #0
   23064:	lsl	r2, r0, #2
   23068:	ldr	r0, [r4, #100]	; 0x64
   2306c:	add	r0, r0, r7, lsl #2
   23070:	add	r0, r0, #4
   23074:	bl	11670 <memset@plt>
   23078:	str	r6, [r4, #104]	; 0x68
   2307c:	b	22f34 <__assert_fail@plt+0x117d4>
   23080:	add	r1, r6, #1
   23084:	mov	r0, r4
   23088:	bl	22848 <__assert_fail@plt+0x110e8>
   2308c:	mov	r5, r0
   23090:	cmp	r0, #0
   23094:	bne	22f34 <__assert_fail@plt+0x117d4>
   23098:	b	2304c <__assert_fail@plt+0x118ec>
   2309c:	ldr	r0, [r4, #116]	; 0x74
   230a0:	bl	141c4 <__assert_fail@plt+0x2a64>
   230a4:	mov	r5, #12
   230a8:	b	22f34 <__assert_fail@plt+0x117d4>
   230ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230b0:	add	fp, sp, #28
   230b4:	sub	sp, sp, #84	; 0x54
   230b8:	ldr	sl, [r0, #84]	; 0x54
   230bc:	mov	r8, r2
   230c0:	mov	r2, #0
   230c4:	mov	r9, r3
   230c8:	ldr	r3, [fp, #12]
   230cc:	str	r0, [sp, #40]	; 0x28
   230d0:	str	r2, [fp, #-52]	; 0xffffffcc
   230d4:	ldr	r5, [r1, #4]
   230d8:	ldr	r2, [sl]
   230dc:	str	sl, [sp, #20]
   230e0:	ldr	r2, [r2, r8, lsl #3]
   230e4:	str	r2, [sp, #24]
   230e8:	ldr	r2, [r0, #120]	; 0x78
   230ec:	add	r2, r2, r3
   230f0:	cmp	r5, r2
   230f4:	ble	239c8 <__assert_fail@plt+0x12268>
   230f8:	add	r4, r1, #8
   230fc:	ldr	r2, [r0, #40]	; 0x28
   23100:	ldr	r5, [r1]
   23104:	ldr	r3, [r0, #88]	; 0x58
   23108:	str	r1, [sp, #16]
   2310c:	str	r2, [sp, #12]
   23110:	ldr	r2, [r0, #100]	; 0x64
   23114:	cmp	r5, #0
   23118:	moveq	r5, r9
   2311c:	cmp	r5, #0
   23120:	str	r2, [sp, #8]
   23124:	ldr	r2, [r4]
   23128:	str	r2, [r0, #100]	; 0x64
   2312c:	str	r5, [r0, #40]	; 0x28
   23130:	ble	23174 <__assert_fail@plt+0x11a14>
   23134:	ldr	r2, [r0, #48]	; 0x30
   23138:	sub	r7, r5, #1
   2313c:	cmp	r2, r7
   23140:	beq	23a38 <__assert_fail@plt+0x122d8>
   23144:	ldr	r2, [r0, #80]	; 0x50
   23148:	cmp	r2, #2
   2314c:	blt	231b8 <__assert_fail@plt+0x11a58>
   23150:	ldr	r2, [r0, #8]
   23154:	mov	r3, r5
   23158:	sub	r2, r2, #4
   2315c:	ldr	r6, [r2, r3, lsl #2]
   23160:	cmn	r6, #1
   23164:	bne	231ec <__assert_fail@plt+0x11a8c>
   23168:	sub	r3, r3, #1
   2316c:	cmp	r3, #0
   23170:	bgt	2315c <__assert_fail@plt+0x119fc>
   23174:	ldr	r7, [r0, #60]	; 0x3c
   23178:	cmp	r5, r9
   2317c:	beq	2321c <__assert_fail@plt+0x11abc>
   23180:	ldr	r0, [sp, #40]	; 0x28
   23184:	ldr	r0, [r0, #100]	; 0x64
   23188:	ldr	r4, [r0, r5, lsl #2]
   2318c:	cmp	r4, #0
   23190:	beq	232d8 <__assert_fail@plt+0x11b78>
   23194:	ldrb	r0, [r4, #52]	; 0x34
   23198:	ldr	r8, [fp, #16]
   2319c:	tst	r0, #64	; 0x40
   231a0:	bne	232f0 <__assert_fail@plt+0x11b90>
   231a4:	mov	r0, #0
   231a8:	str	r0, [sp, #52]	; 0x34
   231ac:	str	r0, [sp, #48]	; 0x30
   231b0:	str	r0, [sp, #56]	; 0x38
   231b4:	b	2333c <__assert_fail@plt+0x11bdc>
   231b8:	ldr	r3, [r0, #4]
   231bc:	ldr	r2, [r0, #68]	; 0x44
   231c0:	ldrb	r0, [r3, r7]
   231c4:	mov	r7, #1
   231c8:	ubfx	r1, r0, #5, #3
   231cc:	ldr	r1, [r2, r1, lsl #2]
   231d0:	and	r2, r0, #31
   231d4:	tst	r1, r7, lsl r2
   231d8:	bne	23214 <__assert_fail@plt+0x11ab4>
   231dc:	mov	r7, #0
   231e0:	cmp	r0, #10
   231e4:	beq	23204 <__assert_fail@plt+0x11aa4>
   231e8:	b	23214 <__assert_fail@plt+0x11ab4>
   231ec:	ldrb	r0, [r0, #78]	; 0x4e
   231f0:	cmp	r0, #0
   231f4:	bne	23a74 <__assert_fail@plt+0x12314>
   231f8:	mov	r7, #0
   231fc:	cmp	r6, #10
   23200:	bne	23214 <__assert_fail@plt+0x11ab4>
   23204:	ldr	r0, [sp, #40]	; 0x28
   23208:	ldrb	r7, [r0, #77]	; 0x4d
   2320c:	cmp	r7, #0
   23210:	movwne	r7, #2
   23214:	cmp	r5, r9
   23218:	bne	23180 <__assert_fail@plt+0x11a20>
   2321c:	mov	r0, #1
   23220:	str	r0, [sp, #52]	; 0x34
   23224:	str	r0, [sp, #48]	; 0x30
   23228:	mov	r0, #4
   2322c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23230:	cmp	r0, #0
   23234:	str	r0, [sp, #56]	; 0x38
   23238:	beq	23a5c <__assert_fail@plt+0x122fc>
   2323c:	str	r8, [r0]
   23240:	ldr	r8, [fp, #16]
   23244:	ldr	r2, [sp, #24]
   23248:	mov	r0, #0
   2324c:	add	r1, sp, #48	; 0x30
   23250:	str	r0, [fp, #-52]	; 0xffffffcc
   23254:	mov	r0, sl
   23258:	mov	r3, r8
   2325c:	bl	23a94 <__assert_fail@plt+0x12334>
   23260:	cmp	r0, #0
   23264:	str	r0, [fp, #-52]	; 0xffffffcc
   23268:	bne	23a4c <__assert_fail@plt+0x122ec>
   2326c:	ldr	r0, [sp, #52]	; 0x34
   23270:	cmp	r0, #0
   23274:	beq	2329c <__assert_fail@plt+0x11b3c>
   23278:	ldr	r0, [sp, #40]	; 0x28
   2327c:	ldr	r3, [sp, #24]
   23280:	add	r1, sp, #48	; 0x30
   23284:	mov	r2, r5
   23288:	str	r8, [sp]
   2328c:	bl	23bd0 <__assert_fail@plt+0x12470>
   23290:	cmp	r0, #0
   23294:	str	r0, [fp, #-52]	; 0xffffffcc
   23298:	bne	23a4c <__assert_fail@plt+0x122ec>
   2329c:	ldr	r1, [sp, #20]
   232a0:	sub	r0, fp, #52	; 0x34
   232a4:	add	r2, sp, #48	; 0x30
   232a8:	mov	r3, r7
   232ac:	bl	20d8c <__assert_fail@plt+0xf62c>
   232b0:	mov	r4, r0
   232b4:	cmp	r0, #0
   232b8:	bne	232c8 <__assert_fail@plt+0x11b68>
   232bc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   232c0:	cmp	r0, #0
   232c4:	bne	239b8 <__assert_fail@plt+0x12258>
   232c8:	ldr	r0, [sp, #40]	; 0x28
   232cc:	ldr	r0, [r0, #100]	; 0x64
   232d0:	str	r4, [r0, r5, lsl #2]
   232d4:	b	2333c <__assert_fail@plt+0x11bdc>
   232d8:	ldr	r8, [fp, #16]
   232dc:	mov	r4, #0
   232e0:	str	r4, [sp, #52]	; 0x34
   232e4:	str	r4, [sp, #48]	; 0x30
   232e8:	str	r4, [sp, #56]	; 0x38
   232ec:	b	2333c <__assert_fail@plt+0x11bdc>
   232f0:	ldr	r0, [r4, #8]
   232f4:	cmp	r0, #1
   232f8:	str	r0, [sp, #52]	; 0x34
   232fc:	blt	23964 <__assert_fail@plt+0x12204>
   23300:	str	r0, [sp, #48]	; 0x30
   23304:	lsl	r0, r0, #2
   23308:	bl	2a8ac <__assert_fail@plt+0x1914c>
   2330c:	cmp	r0, #0
   23310:	str	r0, [sp, #56]	; 0x38
   23314:	beq	23a5c <__assert_fail@plt+0x122fc>
   23318:	ldr	r2, [r4, #8]
   2331c:	ldr	r1, [r4, #12]
   23320:	lsl	r2, r2, #2
   23324:	bl	11484 <memcpy@plt>
   23328:	ldrb	r0, [r4, #52]	; 0x34
   2332c:	mov	r1, #0
   23330:	str	r1, [fp, #-52]	; 0xffffffcc
   23334:	tst	r0, #64	; 0x40
   23338:	bne	23278 <__assert_fail@plt+0x11b18>
   2333c:	str	r4, [sp, #36]	; 0x24
   23340:	ldr	r4, [fp, #12]
   23344:	mov	r9, r4
   23348:	cmp	r5, r4
   2334c:	bge	238b4 <__assert_fail@plt+0x12154>
   23350:	ldr	r7, [sp, #40]	; 0x28
   23354:	ldr	r4, [sp, #20]
   23358:	ldr	sl, [sp, #24]
   2335c:	mov	r0, #0
   23360:	str	r0, [sp, #32]
   23364:	ldr	r0, [r7, #120]	; 0x78
   23368:	ldr	r1, [sp, #32]
   2336c:	cmp	r1, r0
   23370:	bgt	238b8 <__assert_fail@plt+0x12158>
   23374:	mov	r0, #0
   23378:	add	r1, r5, #1
   2337c:	str	r0, [sp, #52]	; 0x34
   23380:	str	r1, [sp, #28]
   23384:	ldr	r0, [r7, #100]	; 0x64
   23388:	ldr	r0, [r0, r1, lsl #2]
   2338c:	cmp	r0, #0
   23390:	beq	233ac <__assert_fail@plt+0x11c4c>
   23394:	add	r1, r0, #4
   23398:	add	r0, sp, #48	; 0x30
   2339c:	bl	20ac0 <__assert_fail@plt+0xf360>
   233a0:	cmp	r0, #0
   233a4:	str	r0, [fp, #-52]	; 0xffffffcc
   233a8:	bne	239b8 <__assert_fail@plt+0x12258>
   233ac:	ldr	r1, [sp, #36]	; 0x24
   233b0:	cmp	r1, #0
   233b4:	beq	23728 <__assert_fail@plt+0x11fc8>
   233b8:	mov	r0, #0
   233bc:	ldr	r8, [r7, #84]	; 0x54
   233c0:	str	r0, [fp, #-32]	; 0xffffffe0
   233c4:	str	r0, [fp, #-44]	; 0xffffffd4
   233c8:	str	r0, [fp, #-48]	; 0xffffffd0
   233cc:	str	r0, [fp, #-40]	; 0xffffffd8
   233d0:	ldr	r1, [r1, #20]
   233d4:	cmp	r1, #1
   233d8:	blt	23718 <__assert_fail@plt+0x11fb8>
   233dc:	str	r5, [sp, #44]	; 0x2c
   233e0:	ldr	r5, [sp, #36]	; 0x24
   233e4:	mov	r4, #0
   233e8:	b	2355c <__assert_fail@plt+0x11dfc>
   233ec:	cmp	r2, r1
   233f0:	bne	2341c <__assert_fail@plt+0x11cbc>
   233f4:	lsl	r0, r2, #1
   233f8:	lsl	r1, r2, #3
   233fc:	str	r0, [sp, #48]	; 0x30
   23400:	ldr	r0, [sp, #56]	; 0x38
   23404:	bl	2a8dc <__assert_fail@plt+0x1917c>
   23408:	cmp	r0, #0
   2340c:	beq	23988 <__assert_fail@plt+0x12228>
   23410:	str	r0, [sp, #56]	; 0x38
   23414:	ldr	r1, [sp, #52]	; 0x34
   23418:	b	23420 <__assert_fail@plt+0x11cc0>
   2341c:	ldr	r0, [sp, #56]	; 0x38
   23420:	ldr	r2, [r0]
   23424:	cmp	r2, r6
   23428:	ble	23464 <__assert_fail@plt+0x11d04>
   2342c:	cmp	r1, #1
   23430:	blt	23494 <__assert_fail@plt+0x11d34>
   23434:	add	r2, r0, r1, lsl #2
   23438:	add	r1, r1, #1
   2343c:	mov	r3, r2
   23440:	ldr	r7, [r3, #-4]!
   23444:	sub	r1, r1, #1
   23448:	cmp	r1, #1
   2344c:	str	r7, [r2]
   23450:	mov	r2, r3
   23454:	bgt	23440 <__assert_fail@plt+0x11ce0>
   23458:	ldr	r7, [sp, #40]	; 0x28
   2345c:	sub	r1, r1, #1
   23460:	b	23494 <__assert_fail@plt+0x11d34>
   23464:	add	r2, r0, r1, lsl #2
   23468:	ldr	r3, [r2, #-4]
   2346c:	cmp	r3, r6
   23470:	ble	23494 <__assert_fail@plt+0x11d34>
   23474:	sub	r1, r1, #2
   23478:	str	r3, [r2]
   2347c:	sub	r1, r1, #1
   23480:	ldr	r3, [r2, #-8]
   23484:	sub	r2, r2, #4
   23488:	cmp	r3, r6
   2348c:	bgt	23478 <__assert_fail@plt+0x11d18>
   23490:	add	r1, r1, #2
   23494:	str	r6, [r0, r1, lsl #2]
   23498:	b	236bc <__assert_fail@plt+0x11f5c>
   2349c:	cmp	r2, r1
   234a0:	bne	234cc <__assert_fail@plt+0x11d6c>
   234a4:	lsl	r0, r2, #1
   234a8:	lsl	r1, r2, #3
   234ac:	str	r0, [fp, #-48]	; 0xffffffd0
   234b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   234b4:	bl	2a8dc <__assert_fail@plt+0x1917c>
   234b8:	cmp	r0, #0
   234bc:	beq	23988 <__assert_fail@plt+0x12228>
   234c0:	str	r0, [fp, #-40]	; 0xffffffd8
   234c4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   234c8:	b	234d0 <__assert_fail@plt+0x11d70>
   234cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   234d0:	ldr	r2, [r0]
   234d4:	cmp	r2, r5
   234d8:	ble	23514 <__assert_fail@plt+0x11db4>
   234dc:	cmp	r1, #1
   234e0:	blt	2350c <__assert_fail@plt+0x11dac>
   234e4:	add	r2, r0, r1, lsl #2
   234e8:	add	r1, r1, #1
   234ec:	mov	r3, r2
   234f0:	ldr	r7, [r3, #-4]!
   234f4:	sub	r1, r1, #1
   234f8:	cmp	r1, #1
   234fc:	str	r7, [r2]
   23500:	mov	r2, r3
   23504:	bgt	234f0 <__assert_fail@plt+0x11d90>
   23508:	sub	r1, r1, #1
   2350c:	ldr	r7, [sp, #40]	; 0x28
   23510:	b	23548 <__assert_fail@plt+0x11de8>
   23514:	add	r2, r0, r1, lsl #2
   23518:	ldr	r7, [sp, #40]	; 0x28
   2351c:	ldr	r3, [r2, #-4]
   23520:	cmp	r3, r5
   23524:	ble	23548 <__assert_fail@plt+0x11de8>
   23528:	sub	r1, r1, #2
   2352c:	str	r3, [r2]
   23530:	sub	r1, r1, #1
   23534:	ldr	r3, [r2, #-8]
   23538:	sub	r2, r2, #4
   2353c:	cmp	r3, r5
   23540:	bgt	2352c <__assert_fail@plt+0x11dcc>
   23544:	add	r1, r1, #2
   23548:	str	r5, [r0, r1, lsl #2]
   2354c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   23550:	add	r0, r0, #1
   23554:	str	r0, [fp, #-44]	; 0xffffffd4
   23558:	b	23634 <__assert_fail@plt+0x11ed4>
   2355c:	ldr	r0, [r5, #24]
   23560:	ldr	sl, [r0, r4, lsl #2]
   23564:	ldr	r0, [r8]
   23568:	add	r1, r0, sl, lsl #3
   2356c:	ldrb	r1, [r1, #6]
   23570:	tst	r1, #16
   23574:	beq	2367c <__assert_fail@plt+0x11f1c>
   23578:	ldr	r5, [sp, #44]	; 0x2c
   2357c:	mov	r0, r8
   23580:	mov	r1, sl
   23584:	mov	r2, r7
   23588:	mov	r3, r5
   2358c:	bl	244e0 <__assert_fail@plt+0x12d80>
   23590:	mov	r9, r0
   23594:	cmp	r0, #2
   23598:	blt	23668 <__assert_fail@plt+0x11f08>
   2359c:	ldr	r0, [sp, #40]	; 0x28
   235a0:	ldr	r1, [r8, #12]
   235a4:	add	r6, r9, r5
   235a8:	ldr	r0, [r0, #100]	; 0x64
   235ac:	ldr	r5, [r1, sl, lsl #2]
   235b0:	mov	r1, #0
   235b4:	ldr	r0, [r0, r6, lsl #2]
   235b8:	str	r1, [fp, #-44]	; 0xffffffd4
   235bc:	cmp	r0, #0
   235c0:	beq	235dc <__assert_fail@plt+0x11e7c>
   235c4:	add	r1, r0, #4
   235c8:	sub	r0, fp, #48	; 0x30
   235cc:	bl	20ac0 <__assert_fail@plt+0xf360>
   235d0:	cmp	r0, #0
   235d4:	str	r0, [fp, #-32]	; 0xffffffe0
   235d8:	bne	23990 <__assert_fail@plt+0x12230>
   235dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   235e0:	cmp	r2, #0
   235e4:	beq	2360c <__assert_fail@plt+0x11eac>
   235e8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   235ec:	cmp	r1, #0
   235f0:	bne	2349c <__assert_fail@plt+0x11d3c>
   235f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   235f8:	str	r5, [r0]
   235fc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   23600:	add	r0, r0, #1
   23604:	str	r0, [fp, #-44]	; 0xffffffd4
   23608:	b	23630 <__assert_fail@plt+0x11ed0>
   2360c:	mov	r0, #1
   23610:	str	r0, [fp, #-44]	; 0xffffffd4
   23614:	str	r0, [fp, #-48]	; 0xffffffd0
   23618:	mov	r0, #4
   2361c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23620:	cmp	r0, #0
   23624:	str	r0, [fp, #-40]	; 0xffffffd8
   23628:	beq	239a0 <__assert_fail@plt+0x12240>
   2362c:	str	r5, [r0]
   23630:	ldr	r7, [sp, #40]	; 0x28
   23634:	sub	r0, fp, #32
   23638:	mov	r1, r8
   2363c:	sub	r2, fp, #48	; 0x30
   23640:	bl	24250 <__assert_fail@plt+0x12af0>
   23644:	ldr	r1, [r7, #100]	; 0x64
   23648:	str	r0, [r1, r6, lsl #2]
   2364c:	ldr	r0, [r7, #100]	; 0x64
   23650:	ldr	r0, [r0, r6, lsl #2]
   23654:	cmp	r0, #0
   23658:	bne	23668 <__assert_fail@plt+0x11f08>
   2365c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   23660:	cmp	r7, #0
   23664:	bne	23994 <__assert_fail@plt+0x12234>
   23668:	ldr	r7, [sp, #40]	; 0x28
   2366c:	ldr	r5, [sp, #36]	; 0x24
   23670:	cmp	r9, #0
   23674:	bne	23694 <__assert_fail@plt+0x11f34>
   23678:	ldr	r0, [r8]
   2367c:	ldr	r2, [sp, #44]	; 0x2c
   23680:	add	r1, r0, sl, lsl #3
   23684:	mov	r0, r7
   23688:	bl	247d4 <__assert_fail@plt+0x13074>
   2368c:	cmp	r0, #0
   23690:	beq	236f0 <__assert_fail@plt+0x11f90>
   23694:	ldr	r0, [r8, #12]
   23698:	ldr	r2, [sp, #48]	; 0x30
   2369c:	ldr	r6, [r0, sl, lsl #2]
   236a0:	cmp	r2, #0
   236a4:	beq	236cc <__assert_fail@plt+0x11f6c>
   236a8:	ldr	r1, [sp, #52]	; 0x34
   236ac:	cmp	r1, #0
   236b0:	bne	233ec <__assert_fail@plt+0x11c8c>
   236b4:	ldr	r0, [sp, #56]	; 0x38
   236b8:	str	r6, [r0]
   236bc:	ldr	r0, [sp, #52]	; 0x34
   236c0:	add	r0, r0, #1
   236c4:	str	r0, [sp, #52]	; 0x34
   236c8:	b	236f0 <__assert_fail@plt+0x11f90>
   236cc:	mov	r0, #1
   236d0:	str	r0, [sp, #52]	; 0x34
   236d4:	str	r0, [sp, #48]	; 0x30
   236d8:	mov	r0, #4
   236dc:	bl	2a8ac <__assert_fail@plt+0x1914c>
   236e0:	cmp	r0, #0
   236e4:	str	r0, [sp, #56]	; 0x38
   236e8:	beq	2397c <__assert_fail@plt+0x1221c>
   236ec:	str	r6, [r0]
   236f0:	ldr	r0, [r5, #20]
   236f4:	add	r4, r4, #1
   236f8:	cmp	r4, r0
   236fc:	blt	2355c <__assert_fail@plt+0x11dfc>
   23700:	ldr	r4, [fp, #12]
   23704:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23708:	ldr	sl, [sp, #24]
   2370c:	ldr	r5, [sp, #44]	; 0x2c
   23710:	mov	r9, r4
   23714:	ldr	r4, [sp, #20]
   23718:	bl	141c4 <__assert_fail@plt+0x2a64>
   2371c:	ldr	r8, [fp, #16]
   23720:	mov	r0, #0
   23724:	str	r0, [fp, #-52]	; 0xffffffcc
   23728:	ldr	r0, [sp, #52]	; 0x34
   2372c:	cmp	r0, #0
   23730:	beq	2377c <__assert_fail@plt+0x1201c>
   23734:	add	r6, sp, #48	; 0x30
   23738:	mov	r0, r4
   2373c:	mov	r2, sl
   23740:	mov	r3, r8
   23744:	mov	r1, r6
   23748:	bl	23a94 <__assert_fail@plt+0x12334>
   2374c:	cmp	r0, #0
   23750:	str	r0, [fp, #-52]	; 0xffffffcc
   23754:	bne	239b8 <__assert_fail@plt+0x12258>
   23758:	ldr	r2, [sp, #28]
   2375c:	mov	r0, r7
   23760:	mov	r1, r6
   23764:	mov	r3, sl
   23768:	str	r8, [sp]
   2376c:	bl	23bd0 <__assert_fail@plt+0x12470>
   23770:	cmp	r0, #0
   23774:	str	r0, [fp, #-52]	; 0xffffffcc
   23778:	bne	239b8 <__assert_fail@plt+0x12258>
   2377c:	cmn	r5, #1
   23780:	ble	237bc <__assert_fail@plt+0x1205c>
   23784:	ldr	r0, [r7, #48]	; 0x30
   23788:	cmp	r0, r5
   2378c:	beq	23880 <__assert_fail@plt+0x12120>
   23790:	ldr	r0, [r7, #80]	; 0x50
   23794:	cmp	r0, #2
   23798:	blt	237c8 <__assert_fail@plt+0x12068>
   2379c:	ldr	r0, [r7, #8]
   237a0:	ldr	r6, [r0, r5, lsl #2]
   237a4:	cmn	r6, #1
   237a8:	bne	23800 <__assert_fail@plt+0x120a0>
   237ac:	sub	r1, r5, #1
   237b0:	cmp	r5, #0
   237b4:	mov	r5, r1
   237b8:	bgt	237a0 <__assert_fail@plt+0x12040>
   237bc:	ldr	r3, [r7, #60]	; 0x3c
   237c0:	add	r5, sp, #48	; 0x30
   237c4:	b	23828 <__assert_fail@plt+0x120c8>
   237c8:	ldr	r0, [r7, #4]
   237cc:	ldr	r1, [r7, #68]	; 0x44
   237d0:	mov	r3, #1
   237d4:	ldrb	r0, [r0, r5]
   237d8:	add	r5, sp, #48	; 0x30
   237dc:	ubfx	r2, r0, #5, #3
   237e0:	ldr	r1, [r1, r2, lsl #2]
   237e4:	and	r2, r0, #31
   237e8:	tst	r1, r3, lsl r2
   237ec:	bne	23828 <__assert_fail@plt+0x120c8>
   237f0:	mov	r3, #0
   237f4:	cmp	r0, #10
   237f8:	beq	2381c <__assert_fail@plt+0x120bc>
   237fc:	b	23828 <__assert_fail@plt+0x120c8>
   23800:	ldrb	r0, [r7, #78]	; 0x4e
   23804:	add	r5, sp, #48	; 0x30
   23808:	cmp	r0, #0
   2380c:	bne	23894 <__assert_fail@plt+0x12134>
   23810:	mov	r3, #0
   23814:	cmp	r6, #10
   23818:	bne	23828 <__assert_fail@plt+0x120c8>
   2381c:	ldrb	r3, [r7, #77]	; 0x4d
   23820:	cmp	r3, #0
   23824:	movwne	r3, #2
   23828:	sub	r0, fp, #52	; 0x34
   2382c:	mov	r1, r4
   23830:	mov	r2, r5
   23834:	bl	20d8c <__assert_fail@plt+0xf62c>
   23838:	cmp	r0, #0
   2383c:	str	r0, [sp, #36]	; 0x24
   23840:	bne	23850 <__assert_fail@plt+0x120f0>
   23844:	ldr	r0, [fp, #-52]	; 0xffffffcc
   23848:	cmp	r0, #0
   2384c:	bne	239b8 <__assert_fail@plt+0x12258>
   23850:	ldr	r1, [sp, #28]
   23854:	ldr	r2, [sp, #36]	; 0x24
   23858:	ldr	r0, [r7, #100]	; 0x64
   2385c:	str	r2, [r0, r1, lsl #2]
   23860:	cmp	r2, #0
   23864:	ldr	r2, [sp, #32]
   23868:	mov	r0, #0
   2386c:	mov	r5, r1
   23870:	addeq	r0, r2, #1
   23874:	cmp	r1, r9
   23878:	blt	23360 <__assert_fail@plt+0x11c00>
   2387c:	b	238bc <__assert_fail@plt+0x1215c>
   23880:	ldr	r0, [r7, #88]	; 0x58
   23884:	add	r5, sp, #48	; 0x30
   23888:	and	r0, r0, #2
   2388c:	eor	r3, r0, #10
   23890:	b	23828 <__assert_fail@plt+0x120c8>
   23894:	mov	r0, r6
   23898:	bl	1164c <iswalnum@plt>
   2389c:	mov	r3, #1
   238a0:	cmp	r6, #95	; 0x5f
   238a4:	beq	23828 <__assert_fail@plt+0x120c8>
   238a8:	cmp	r0, #0
   238ac:	beq	23810 <__assert_fail@plt+0x120b0>
   238b0:	b	23828 <__assert_fail@plt+0x120c8>
   238b4:	ldr	r7, [sp, #40]	; 0x28
   238b8:	mov	r1, r5
   238bc:	ldr	r0, [sp, #56]	; 0x38
   238c0:	mov	r4, r1
   238c4:	bl	141c4 <__assert_fail@plt+0x2a64>
   238c8:	ldr	r0, [r7, #100]	; 0x64
   238cc:	mov	sl, #1
   238d0:	ldr	r1, [r0, r9, lsl #2]
   238d4:	ldr	r0, [sp, #16]
   238d8:	str	r4, [r0]
   238dc:	ldr	r0, [sp, #12]
   238e0:	cmp	r1, #0
   238e4:	addne	r1, r1, #4
   238e8:	str	r0, [r7, #40]	; 0x28
   238ec:	ldr	r0, [sp, #8]
   238f0:	str	r0, [r7, #100]	; 0x64
   238f4:	beq	23958 <__assert_fail@plt+0x121f8>
   238f8:	ldr	r2, [r1, #4]
   238fc:	cmp	r2, #1
   23900:	blt	23954 <__assert_fail@plt+0x121f4>
   23904:	ldr	r0, [fp, #8]
   23908:	ldr	r1, [r1, #8]
   2390c:	subs	r2, r2, #1
   23910:	mov	sl, #0
   23914:	mov	r3, #0
   23918:	beq	23944 <__assert_fail@plt+0x121e4>
   2391c:	mov	r3, #0
   23920:	mov	r7, #1
   23924:	add	r5, r3, r2
   23928:	lsr	r4, r5, #1
   2392c:	ldr	r6, [r1, r4, lsl #2]
   23930:	cmp	r6, r0
   23934:	movge	r2, r4
   23938:	addlt	r3, r7, r5, lsr #1
   2393c:	cmp	r3, r2
   23940:	bcc	23924 <__assert_fail@plt+0x121c4>
   23944:	ldr	r1, [r1, r3, lsl #2]
   23948:	cmp	r1, r0
   2394c:	movne	sl, #1
   23950:	b	23958 <__assert_fail@plt+0x121f8>
   23954:	mov	sl, #1
   23958:	mov	r0, sl
   2395c:	sub	sp, fp, #28
   23960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23964:	mov	r0, #0
   23968:	str	r0, [sp, #52]	; 0x34
   2396c:	str	r0, [sp, #48]	; 0x30
   23970:	str	r0, [sp, #56]	; 0x38
   23974:	str	r0, [fp, #-52]	; 0xffffffcc
   23978:	b	2329c <__assert_fail@plt+0x11b3c>
   2397c:	mov	r0, #0
   23980:	str	r0, [sp, #48]	; 0x30
   23984:	str	r0, [sp, #52]	; 0x34
   23988:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2398c:	b	239ac <__assert_fail@plt+0x1224c>
   23990:	mov	r7, r0
   23994:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23998:	bl	141c4 <__assert_fail@plt+0x2a64>
   2399c:	b	239b4 <__assert_fail@plt+0x12254>
   239a0:	mov	r0, #0
   239a4:	str	r0, [fp, #-48]	; 0xffffffd0
   239a8:	str	r0, [fp, #-44]	; 0xffffffd4
   239ac:	bl	141c4 <__assert_fail@plt+0x2a64>
   239b0:	mov	r7, #12
   239b4:	str	r7, [fp, #-52]	; 0xffffffcc
   239b8:	ldr	r0, [sp, #56]	; 0x38
   239bc:	bl	141c4 <__assert_fail@plt+0x2a64>
   239c0:	ldr	sl, [fp, #-52]	; 0xffffffcc
   239c4:	b	23958 <__assert_fail@plt+0x121f8>
   239c8:	mov	r6, r1
   239cc:	mvn	r1, #-2147483648	; 0x80000000
   239d0:	mov	sl, #12
   239d4:	sub	r1, r1, r5
   239d8:	cmp	r1, r2
   239dc:	ble	23958 <__assert_fail@plt+0x121f8>
   239e0:	add	r0, r2, #1
   239e4:	add	r7, r0, r5
   239e8:	str	r0, [sp, #44]	; 0x2c
   239ec:	cmn	r7, #-1073741823	; 0xc0000001
   239f0:	bhi	23958 <__assert_fail@plt+0x121f8>
   239f4:	mov	r4, r6
   239f8:	lsl	r1, r7, #2
   239fc:	ldr	r0, [r4, #8]!
   23a00:	bl	2a8dc <__assert_fail@plt+0x1917c>
   23a04:	cmp	r0, #0
   23a08:	beq	23958 <__assert_fail@plt+0x121f8>
   23a0c:	ldr	r1, [sp, #44]	; 0x2c
   23a10:	str	r7, [r6, #4]
   23a14:	str	r0, [r6, #8]
   23a18:	add	r0, r0, r5, lsl #2
   23a1c:	lsl	r2, r1, #2
   23a20:	mov	r1, #0
   23a24:	bl	11670 <memset@plt>
   23a28:	ldr	r0, [sp, #40]	; 0x28
   23a2c:	ldr	sl, [sp, #20]
   23a30:	mov	r1, r6
   23a34:	b	230fc <__assert_fail@plt+0x1199c>
   23a38:	and	r0, r3, #2
   23a3c:	eor	r7, r0, #10
   23a40:	cmp	r5, r9
   23a44:	beq	2321c <__assert_fail@plt+0x11abc>
   23a48:	b	23180 <__assert_fail@plt+0x11a20>
   23a4c:	mov	sl, r0
   23a50:	ldr	r0, [sp, #56]	; 0x38
   23a54:	bl	141c4 <__assert_fail@plt+0x2a64>
   23a58:	b	23958 <__assert_fail@plt+0x121f8>
   23a5c:	mov	r0, #0
   23a60:	mov	sl, #12
   23a64:	str	r0, [sp, #48]	; 0x30
   23a68:	str	r0, [sp, #52]	; 0x34
   23a6c:	str	sl, [fp, #-52]	; 0xffffffcc
   23a70:	b	23958 <__assert_fail@plt+0x121f8>
   23a74:	mov	r0, r6
   23a78:	bl	1164c <iswalnum@plt>
   23a7c:	mov	r7, #1
   23a80:	cmp	r6, #95	; 0x5f
   23a84:	beq	23214 <__assert_fail@plt+0x11ab4>
   23a88:	cmp	r0, #0
   23a8c:	beq	231f8 <__assert_fail@plt+0x11a98>
   23a90:	b	23214 <__assert_fail@plt+0x11ab4>
   23a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a98:	add	fp, sp, #28
   23a9c:	sub	sp, sp, #28
   23aa0:	str	r0, [sp, #12]
   23aa4:	ldr	r0, [r1, #4]
   23aa8:	mov	r4, r1
   23aac:	mov	r1, #0
   23ab0:	mov	sl, r3
   23ab4:	mov	r8, r2
   23ab8:	str	r1, [sp, #20]
   23abc:	str	r0, [sp, #16]
   23ac0:	lsl	r0, r0, #2
   23ac4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23ac8:	cmp	r0, #0
   23acc:	str	r0, [sp, #24]
   23ad0:	beq	23bc8 <__assert_fail@plt+0x12468>
   23ad4:	ldr	r0, [r4, #4]
   23ad8:	cmp	r0, #1
   23adc:	blt	23ba0 <__assert_fail@plt+0x12440>
   23ae0:	mov	r9, #0
   23ae4:	str	r4, [sp, #8]
   23ae8:	ldr	r0, [r4, #8]
   23aec:	ldr	r1, [sp, #12]
   23af0:	ldr	r2, [r0, r9, lsl #2]
   23af4:	ldr	r1, [r1, #24]
   23af8:	add	r0, r2, r2, lsl #1
   23afc:	add	r1, r1, r0, lsl #2
   23b00:	ldr	r0, [r1, #4]
   23b04:	cmp	r0, #1
   23b08:	blt	23b44 <__assert_fail@plt+0x123e4>
   23b0c:	ldr	r7, [sp, #12]
   23b10:	ldr	r3, [r1, #8]
   23b14:	mov	r6, #0
   23b18:	ldr	r7, [r7]
   23b1c:	ldr	r4, [r3, r6, lsl #2]
   23b20:	add	r5, r7, r4, lsl #3
   23b24:	ldrb	r5, [r5, #4]
   23b28:	cmp	r5, sl
   23b2c:	ldreq	r5, [r7, r4, lsl #3]
   23b30:	cmpeq	r5, r8
   23b34:	beq	23b6c <__assert_fail@plt+0x1240c>
   23b38:	add	r6, r6, #1
   23b3c:	cmp	r6, r0
   23b40:	blt	23b1c <__assert_fail@plt+0x123bc>
   23b44:	add	r0, sp, #16
   23b48:	bl	20ac0 <__assert_fail@plt+0xf360>
   23b4c:	cmp	r0, #0
   23b50:	bne	23b90 <__assert_fail@plt+0x12430>
   23b54:	ldr	r4, [sp, #8]
   23b58:	add	r9, r9, #1
   23b5c:	ldr	r0, [r4, #4]
   23b60:	cmp	r9, r0
   23b64:	blt	23ae8 <__assert_fail@plt+0x12388>
   23b68:	b	23ba0 <__assert_fail@plt+0x12440>
   23b6c:	cmn	r4, #1
   23b70:	beq	23b44 <__assert_fail@plt+0x123e4>
   23b74:	ldr	r0, [sp, #12]
   23b78:	add	r1, sp, #16
   23b7c:	mov	r3, r8
   23b80:	str	sl, [sp]
   23b84:	bl	24118 <__assert_fail@plt+0x129b8>
   23b88:	cmp	r0, #0
   23b8c:	beq	23b54 <__assert_fail@plt+0x123f4>
   23b90:	mov	r7, r0
   23b94:	ldr	r0, [sp, #24]
   23b98:	bl	141c4 <__assert_fail@plt+0x2a64>
   23b9c:	b	23bbc <__assert_fail@plt+0x1245c>
   23ba0:	ldr	r0, [r4, #8]
   23ba4:	bl	141c4 <__assert_fail@plt+0x2a64>
   23ba8:	vldr	d16, [sp, #16]
   23bac:	ldr	r0, [sp, #24]
   23bb0:	mov	r7, #0
   23bb4:	str	r0, [r4, #8]
   23bb8:	vstr	d16, [r4]
   23bbc:	mov	r0, r7
   23bc0:	sub	sp, fp, #28
   23bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bc8:	mov	r7, #12
   23bcc:	b	23bbc <__assert_fail@plt+0x1245c>
   23bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bd4:	add	fp, sp, #28
   23bd8:	sub	sp, sp, #52	; 0x34
   23bdc:	ldr	ip, [r0, #108]	; 0x6c
   23be0:	mov	lr, r1
   23be4:	ldr	r1, [r0, #84]	; 0x54
   23be8:	str	r0, [sp, #24]
   23bec:	mov	sl, r2
   23bf0:	mov	r8, #0
   23bf4:	mov	r0, #0
   23bf8:	cmp	ip, #1
   23bfc:	str	r1, [sp, #28]
   23c00:	blt	23c44 <__assert_fail@plt+0x124e4>
   23c04:	ldr	r0, [sp, #24]
   23c08:	mov	r7, #1
   23c0c:	mov	r1, ip
   23c10:	ldr	r2, [r0, #116]	; 0x74
   23c14:	mov	r0, #0
   23c18:	add	r6, r1, r0
   23c1c:	add	r6, r6, r6, lsr #31
   23c20:	asr	r4, r6, #1
   23c24:	add	r5, r4, r4, lsl #1
   23c28:	add	r5, r2, r5, lsl #3
   23c2c:	ldr	r5, [r5, #4]
   23c30:	cmp	r5, sl
   23c34:	addlt	r0, r7, r6, asr #1
   23c38:	movge	r1, r4
   23c3c:	cmp	r0, r1
   23c40:	blt	23c18 <__assert_fail@plt+0x124b8>
   23c44:	cmp	r0, ip
   23c48:	bge	2410c <__assert_fail@plt+0x129ac>
   23c4c:	cmn	r0, #1
   23c50:	beq	2410c <__assert_fail@plt+0x129ac>
   23c54:	ldr	r1, [sp, #24]
   23c58:	add	r0, r0, r0, lsl #1
   23c5c:	str	r0, [sp, #8]
   23c60:	ldr	r1, [r1, #116]	; 0x74
   23c64:	add	r0, r1, r0, lsl #3
   23c68:	ldr	r0, [r0, #4]
   23c6c:	cmp	r0, sl
   23c70:	bne	2410c <__assert_fail@plt+0x129ac>
   23c74:	str	r3, [sp, #12]
   23c78:	mov	r9, #1
   23c7c:	str	lr, [sp, #16]
   23c80:	b	23c8c <__assert_fail@plt+0x1252c>
   23c84:	ldr	r0, [sp, #24]
   23c88:	ldr	r1, [r0, #116]	; 0x74
   23c8c:	ldr	r0, [sp, #8]
   23c90:	add	r0, r1, r0, lsl #3
   23c94:	mov	r8, r0
   23c98:	ldr	r0, [lr, #4]
   23c9c:	cmp	r0, #1
   23ca0:	blt	23f9c <__assert_fail@plt+0x1283c>
   23ca4:	subs	r6, r0, #1
   23ca8:	ldr	r2, [r8]
   23cac:	ldr	r0, [lr, #8]
   23cb0:	mov	r3, #0
   23cb4:	beq	23cdc <__assert_fail@plt+0x1257c>
   23cb8:	mov	r1, r6
   23cbc:	add	r7, r3, r1
   23cc0:	lsr	r5, r7, #1
   23cc4:	ldr	r4, [r0, r5, lsl #2]
   23cc8:	cmp	r4, r2
   23ccc:	movge	r1, r5
   23cd0:	addlt	r3, r9, r7, lsr #1
   23cd4:	cmp	r3, r1
   23cd8:	bcc	23cbc <__assert_fail@plt+0x1255c>
   23cdc:	ldr	r1, [r0, r3, lsl #2]
   23ce0:	cmp	r1, r2
   23ce4:	bne	23f9c <__assert_fail@plt+0x1283c>
   23ce8:	ldr	r3, [r8, #12]
   23cec:	ldr	r1, [r8, #8]
   23cf0:	add	r3, r3, sl
   23cf4:	sub	r7, r3, r1
   23cf8:	cmp	r7, sl
   23cfc:	bne	23de8 <__assert_fail@plt+0x12688>
   23d00:	ldr	r1, [sp, #28]
   23d04:	add	r2, r2, r2, lsl #1
   23d08:	cmp	r6, #0
   23d0c:	ldr	r1, [r1, #20]
   23d10:	add	r1, r1, r2, lsl #2
   23d14:	mov	r2, #0
   23d18:	ldr	r1, [r1, #8]
   23d1c:	ldr	r4, [r1]
   23d20:	beq	23d44 <__assert_fail@plt+0x125e4>
   23d24:	add	r1, r2, r6
   23d28:	lsr	r3, r1, #1
   23d2c:	ldr	r7, [r0, r3, lsl #2]
   23d30:	cmp	r7, r4
   23d34:	movge	r6, r3
   23d38:	addlt	r2, r9, r1, lsr #1
   23d3c:	cmp	r2, r6
   23d40:	bcc	23d24 <__assert_fail@plt+0x125c4>
   23d44:	ldr	r1, [r0, r2, lsl #2]
   23d48:	mov	r0, #4
   23d4c:	cmp	r1, r4
   23d50:	beq	23f90 <__assert_fail@plt+0x12830>
   23d54:	mov	r0, #4
   23d58:	str	r9, [sp, #36]	; 0x24
   23d5c:	str	r9, [sp, #32]
   23d60:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23d64:	cmp	r0, #0
   23d68:	str	r0, [sp, #40]	; 0x28
   23d6c:	beq	23fb0 <__assert_fail@plt+0x12850>
   23d70:	mov	r6, #0
   23d74:	str	r4, [r0]
   23d78:	ldr	r0, [sp, #28]
   23d7c:	ldr	r2, [sp, #12]
   23d80:	ldr	r3, [fp, #8]
   23d84:	add	r4, sp, #32
   23d88:	str	r6, [fp, #-32]	; 0xffffffe0
   23d8c:	mov	r1, r4
   23d90:	bl	23a94 <__assert_fail@plt+0x12334>
   23d94:	ldr	r5, [sp, #16]
   23d98:	mov	r7, r0
   23d9c:	mov	r1, r4
   23da0:	mov	r0, r5
   23da4:	bl	20ac0 <__assert_fail@plt+0xf360>
   23da8:	mov	r4, r0
   23dac:	ldr	r0, [sp, #40]	; 0x28
   23db0:	bl	141c4 <__assert_fail@plt+0x2a64>
   23db4:	orr	r0, r7, r6
   23db8:	mov	lr, r5
   23dbc:	orrs	r0, r0, r4
   23dc0:	mov	r0, #2
   23dc4:	beq	23f90 <__assert_fail@plt+0x12830>
   23dc8:	cmp	r7, #0
   23dcc:	mov	r0, #1
   23dd0:	movne	r4, r7
   23dd4:	cmp	r6, #0
   23dd8:	movne	r4, r6
   23ddc:	str	r4, [fp, #-32]	; 0xffffffe0
   23de0:	str	r4, [sp, #20]
   23de4:	b	23f90 <__assert_fail@plt+0x12830>
   23de8:	ldr	r0, [sp, #24]
   23dec:	ldr	r0, [r0, #100]	; 0x64
   23df0:	ldr	r5, [r0, r7, lsl #2]
   23df4:	ldr	r0, [sp, #28]
   23df8:	ldr	r0, [r0, #12]
   23dfc:	cmp	r5, #0
   23e00:	ldr	r4, [r0, r2, lsl #2]
   23e04:	beq	23ecc <__assert_fail@plt+0x1276c>
   23e08:	ldr	ip, [r5, #8]
   23e0c:	cmp	ip, #0
   23e10:	ble	23ef8 <__assert_fail@plt+0x12798>
   23e14:	ldr	r0, [r5, #12]
   23e18:	subs	r3, ip, #1
   23e1c:	mov	r2, #0
   23e20:	str	r7, [sp, #4]
   23e24:	beq	23e48 <__assert_fail@plt+0x126e8>
   23e28:	add	r6, r2, r3
   23e2c:	lsr	r7, r6, #1
   23e30:	ldr	r1, [r0, r7, lsl #2]
   23e34:	cmp	r1, r4
   23e38:	movge	r3, r7
   23e3c:	addlt	r2, r9, r6, lsr #1
   23e40:	cmp	r2, r3
   23e44:	bcc	23e28 <__assert_fail@plt+0x126c8>
   23e48:	ldr	r1, [r0, r2, lsl #2]
   23e4c:	mov	r0, #4
   23e50:	cmp	r1, r4
   23e54:	beq	23f90 <__assert_fail@plt+0x12830>
   23e58:	ldr	r7, [sp, #4]
   23e5c:	cmp	ip, #1
   23e60:	str	ip, [sp, #36]	; 0x24
   23e64:	blt	23efc <__assert_fail@plt+0x1279c>
   23e68:	lsl	r0, ip, #2
   23e6c:	str	ip, [sp, #32]
   23e70:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23e74:	cmp	r0, #0
   23e78:	str	r0, [sp, #40]	; 0x28
   23e7c:	beq	24018 <__assert_fail@plt+0x128b8>
   23e80:	ldr	r2, [r5, #8]
   23e84:	ldr	r1, [r5, #12]
   23e88:	mov	r5, r0
   23e8c:	lsl	r2, r2, #2
   23e90:	bl	11484 <memcpy@plt>
   23e94:	ldr	r1, [sp, #32]
   23e98:	mov	r6, #0
   23e9c:	str	r6, [fp, #-32]	; 0xffffffe0
   23ea0:	cmp	r1, #0
   23ea4:	beq	23f10 <__assert_fail@plt+0x127b0>
   23ea8:	ldr	r0, [sp, #36]	; 0x24
   23eac:	cmp	r0, #0
   23eb0:	bne	2402c <__assert_fail@plt+0x128cc>
   23eb4:	str	r4, [r5]
   23eb8:	str	r9, [sp, #36]	; 0x24
   23ebc:	mov	r6, #0
   23ec0:	cmp	r6, #0
   23ec4:	beq	23f38 <__assert_fail@plt+0x127d8>
   23ec8:	b	23ff0 <__assert_fail@plt+0x12890>
   23ecc:	mov	r0, #4
   23ed0:	str	r9, [sp, #36]	; 0x24
   23ed4:	str	r9, [sp, #32]
   23ed8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23edc:	cmp	r0, #0
   23ee0:	str	r0, [sp, #40]	; 0x28
   23ee4:	beq	23fc4 <__assert_fail@plt+0x12864>
   23ee8:	str	r4, [r0]
   23eec:	mov	r0, #0
   23ef0:	str	r0, [fp, #-32]	; 0xffffffe0
   23ef4:	b	23f38 <__assert_fail@plt+0x127d8>
   23ef8:	str	ip, [sp, #36]	; 0x24
   23efc:	mov	r6, #0
   23f00:	str	r6, [sp, #36]	; 0x24
   23f04:	str	r6, [sp, #32]
   23f08:	str	r6, [sp, #40]	; 0x28
   23f0c:	str	r6, [fp, #-32]	; 0xffffffe0
   23f10:	mov	r0, #4
   23f14:	str	r9, [sp, #36]	; 0x24
   23f18:	str	r9, [sp, #32]
   23f1c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   23f20:	cmp	r0, #0
   23f24:	str	r0, [sp, #40]	; 0x28
   23f28:	beq	23fe4 <__assert_fail@plt+0x12884>
   23f2c:	str	r4, [r0]
   23f30:	cmp	r6, #0
   23f34:	bne	23ff0 <__assert_fail@plt+0x12890>
   23f38:	ldr	r1, [sp, #28]
   23f3c:	sub	r0, fp, #32
   23f40:	add	r2, sp, #32
   23f44:	bl	24250 <__assert_fail@plt+0x12af0>
   23f48:	ldr	r4, [sp, #24]
   23f4c:	ldr	r1, [r4, #100]	; 0x64
   23f50:	str	r0, [r1, r7, lsl #2]
   23f54:	ldr	r0, [sp, #40]	; 0x28
   23f58:	bl	141c4 <__assert_fail@plt+0x2a64>
   23f5c:	ldr	r0, [r4, #100]	; 0x64
   23f60:	ldr	r1, [fp, #-32]	; 0xffffffe0
   23f64:	ldr	r0, [r0, r7, lsl #2]
   23f68:	cmp	r1, #0
   23f6c:	mov	r2, r1
   23f70:	movwne	r2, #1
   23f74:	clz	r0, r0
   23f78:	lsr	r0, r0, #5
   23f7c:	ands	r0, r0, r2
   23f80:	ldr	r2, [sp, #20]
   23f84:	movne	r2, r1
   23f88:	str	r2, [sp, #20]
   23f8c:	ldr	lr, [sp, #16]
   23f90:	cmp	r0, #0
   23f94:	cmpne	r0, #4
   23f98:	bne	240f8 <__assert_fail@plt+0x12998>
   23f9c:	ldrb	r1, [r8, #20]
   23fa0:	add	r0, r8, #24
   23fa4:	cmp	r1, #0
   23fa8:	bne	23c94 <__assert_fail@plt+0x12534>
   23fac:	b	24108 <__assert_fail@plt+0x129a8>
   23fb0:	mov	r0, #0
   23fb4:	mov	r6, #12
   23fb8:	str	r0, [sp, #32]
   23fbc:	str	r0, [sp, #36]	; 0x24
   23fc0:	b	23d78 <__assert_fail@plt+0x12618>
   23fc4:	mov	r0, #0
   23fc8:	mov	r1, #12
   23fcc:	str	r0, [sp, #32]
   23fd0:	str	r0, [sp, #36]	; 0x24
   23fd4:	mov	r0, #12
   23fd8:	str	r1, [fp, #-32]	; 0xffffffe0
   23fdc:	str	r0, [sp, #20]
   23fe0:	b	24010 <__assert_fail@plt+0x128b0>
   23fe4:	mov	r0, #0
   23fe8:	str	r0, [sp, #32]
   23fec:	str	r0, [sp, #36]	; 0x24
   23ff0:	clz	r0, r6
   23ff4:	lsr	r4, r0, #5
   23ff8:	ldr	r0, [sp, #40]	; 0x28
   23ffc:	bl	141c4 <__assert_fail@plt+0x2a64>
   24000:	cmp	r4, #0
   24004:	movwne	r6, #12
   24008:	str	r6, [sp, #20]
   2400c:	str	r6, [fp, #-32]	; 0xffffffe0
   24010:	mov	r0, #1
   24014:	b	23f8c <__assert_fail@plt+0x1282c>
   24018:	mov	r0, #0
   2401c:	mov	r6, #12
   24020:	str	r0, [sp, #32]
   24024:	str	r0, [sp, #36]	; 0x24
   24028:	b	23f0c <__assert_fail@plt+0x127ac>
   2402c:	cmp	r1, r0
   24030:	bne	2405c <__assert_fail@plt+0x128fc>
   24034:	lsl	r0, r1, #1
   24038:	lsl	r1, r1, #3
   2403c:	str	r0, [sp, #32]
   24040:	mov	r0, r5
   24044:	bl	2a8dc <__assert_fail@plt+0x1917c>
   24048:	cmp	r0, #0
   2404c:	beq	240f0 <__assert_fail@plt+0x12990>
   24050:	str	r0, [sp, #40]	; 0x28
   24054:	mov	r5, r0
   24058:	ldr	r0, [sp, #36]	; 0x24
   2405c:	ldr	r1, [r5]
   24060:	cmp	r1, r4
   24064:	ble	2409c <__assert_fail@plt+0x1293c>
   24068:	cmp	r0, #1
   2406c:	blt	240cc <__assert_fail@plt+0x1296c>
   24070:	add	r1, r5, r0, lsl #2
   24074:	add	r0, r0, #1
   24078:	mov	r2, r1
   2407c:	ldr	r3, [r2, #-4]!
   24080:	sub	r0, r0, #1
   24084:	cmp	r0, #1
   24088:	str	r3, [r1]
   2408c:	mov	r1, r2
   24090:	bgt	2407c <__assert_fail@plt+0x1291c>
   24094:	sub	r0, r0, #1
   24098:	b	240cc <__assert_fail@plt+0x1296c>
   2409c:	add	r1, r5, r0, lsl #2
   240a0:	ldr	r2, [r1, #-4]
   240a4:	cmp	r2, r4
   240a8:	ble	240cc <__assert_fail@plt+0x1296c>
   240ac:	sub	r0, r0, #2
   240b0:	str	r2, [r1]
   240b4:	sub	r0, r0, #1
   240b8:	ldr	r2, [r1, #-8]
   240bc:	sub	r1, r1, #4
   240c0:	cmp	r2, r4
   240c4:	bgt	240b0 <__assert_fail@plt+0x12950>
   240c8:	add	r0, r0, #2
   240cc:	str	r4, [r5, r0, lsl #2]
   240d0:	ldr	r7, [sp, #4]
   240d4:	mov	r6, #0
   240d8:	ldr	r0, [sp, #36]	; 0x24
   240dc:	add	r0, r0, #1
   240e0:	str	r0, [sp, #36]	; 0x24
   240e4:	cmp	r6, #0
   240e8:	beq	23f38 <__assert_fail@plt+0x127d8>
   240ec:	b	23ff0 <__assert_fail@plt+0x12890>
   240f0:	mov	r6, #0
   240f4:	b	23ff0 <__assert_fail@plt+0x12890>
   240f8:	cmp	r0, #2
   240fc:	beq	23c84 <__assert_fail@plt+0x12524>
   24100:	ldr	r8, [sp, #20]
   24104:	b	2410c <__assert_fail@plt+0x129ac>
   24108:	mov	r8, #0
   2410c:	mov	r0, r8
   24110:	sub	sp, fp, #28
   24114:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2411c:	add	fp, sp, #28
   24120:	sub	sp, sp, #4
   24124:	ldr	r4, [fp, #8]
   24128:	mov	r9, r3
   2412c:	mov	r7, r2
   24130:	mov	r8, r1
   24134:	mov	sl, r0
   24138:	mov	r5, #1
   2413c:	b	2414c <__assert_fail@plt+0x129ec>
   24140:	add	r0, r0, r7, lsl #2
   24144:	ldr	r0, [r0, #8]
   24148:	ldr	r7, [r0]
   2414c:	ldr	r0, [r8, #4]
   24150:	cmp	r0, #1
   24154:	blt	2419c <__assert_fail@plt+0x12a3c>
   24158:	subs	r2, r0, #1
   2415c:	ldr	r0, [r8, #8]
   24160:	mov	ip, r4
   24164:	mov	r1, #0
   24168:	beq	2418c <__assert_fail@plt+0x12a2c>
   2416c:	add	r3, r1, r2
   24170:	lsr	r6, r3, #1
   24174:	ldr	r4, [r0, r6, lsl #2]
   24178:	cmp	r4, r7
   2417c:	movge	r2, r6
   24180:	addlt	r1, r5, r3, lsr #1
   24184:	cmp	r1, r2
   24188:	bcc	2416c <__assert_fail@plt+0x12a0c>
   2418c:	ldr	r0, [r0, r1, lsl #2]
   24190:	mov	r4, ip
   24194:	cmp	r0, r7
   24198:	beq	24238 <__assert_fail@plt+0x12ad8>
   2419c:	ldr	r0, [sl]
   241a0:	add	r1, r0, r7, lsl #3
   241a4:	ldrb	r1, [r1, #4]
   241a8:	cmp	r1, r4
   241ac:	ldreq	r0, [r0, r7, lsl #3]
   241b0:	cmpeq	r0, r9
   241b4:	beq	2421c <__assert_fail@plt+0x12abc>
   241b8:	mov	r0, r8
   241bc:	mov	r1, r7
   241c0:	bl	20c50 <__assert_fail@plt+0xf4f0>
   241c4:	cmp	r0, #0
   241c8:	beq	24244 <__assert_fail@plt+0x12ae4>
   241cc:	ldr	r0, [sl, #20]
   241d0:	add	r7, r7, r7, lsl #1
   241d4:	add	r1, r0, r7, lsl #2
   241d8:	ldr	r2, [r1, #4]
   241dc:	cmp	r2, #2
   241e0:	beq	241f0 <__assert_fail@plt+0x12a90>
   241e4:	cmp	r2, #0
   241e8:	bne	24140 <__assert_fail@plt+0x129e0>
   241ec:	b	24238 <__assert_fail@plt+0x12ad8>
   241f0:	ldr	r0, [r1, #8]
   241f4:	mov	r1, r8
   241f8:	mov	r3, r9
   241fc:	ldr	r2, [r0, #4]
   24200:	mov	r0, sl
   24204:	str	r4, [sp]
   24208:	bl	24118 <__assert_fail@plt+0x129b8>
   2420c:	cmp	r0, #0
   24210:	bne	2423c <__assert_fail@plt+0x12adc>
   24214:	ldr	r0, [sl, #20]
   24218:	b	24140 <__assert_fail@plt+0x129e0>
   2421c:	cmp	r4, #9
   24220:	bne	24238 <__assert_fail@plt+0x12ad8>
   24224:	mov	r0, r8
   24228:	mov	r1, r7
   2422c:	bl	20c50 <__assert_fail@plt+0xf4f0>
   24230:	cmp	r0, #0
   24234:	beq	24244 <__assert_fail@plt+0x12ae4>
   24238:	mov	r0, #0
   2423c:	sub	sp, fp, #28
   24240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24244:	mov	r0, #12
   24248:	sub	sp, fp, #28
   2424c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24254:	add	fp, sp, #28
   24258:	sub	sp, sp, #4
   2425c:	ldr	sl, [r2, #4]
   24260:	cmp	sl, #0
   24264:	beq	244a0 <__assert_fail@plt+0x12d40>
   24268:	mov	r7, r2
   2426c:	mov	r9, r1
   24270:	cmp	sl, #1
   24274:	mov	r6, sl
   24278:	blt	242ec <__assert_fail@plt+0x12b8c>
   2427c:	ldr	r5, [r7, #8]
   24280:	mov	r2, #0
   24284:	cmp	sl, #4
   24288:	mov	r6, sl
   2428c:	bcc	242d4 <__assert_fail@plt+0x12b74>
   24290:	mov	r1, #0
   24294:	bic	r2, sl, #3
   24298:	vdup.32	q8, r1
   2429c:	mov	r3, r2
   242a0:	mov	r1, r5
   242a4:	vmov.32	d16[0], sl
   242a8:	vld1.32	{d18-d19}, [r1]!
   242ac:	subs	r3, r3, #4
   242b0:	vadd.i32	q8, q9, q8
   242b4:	bne	242a8 <__assert_fail@plt+0x12b48>
   242b8:	vext.8	q9, q8, q8, #8
   242bc:	cmp	sl, r2
   242c0:	vadd.i32	q8, q8, q9
   242c4:	vdup.32	q9, d16[1]
   242c8:	vadd.i32	q8, q8, q9
   242cc:	vmov.32	r6, d16[0]
   242d0:	beq	242ec <__assert_fail@plt+0x12b8c>
   242d4:	add	r1, r5, r2, lsl #2
   242d8:	sub	r2, sl, r2
   242dc:	ldr	r3, [r1], #4
   242e0:	subs	r2, r2, #1
   242e4:	add	r6, r3, r6
   242e8:	bne	242dc <__assert_fail@plt+0x12b7c>
   242ec:	ldr	r1, [r9, #68]	; 0x44
   242f0:	ldr	r2, [r9, #32]
   242f4:	str	r0, [sp]
   242f8:	and	r1, r1, r6
   242fc:	add	r3, r1, r1, lsl #1
   24300:	ldr	r1, [r2, r3, lsl #2]
   24304:	cmp	r1, #1
   24308:	blt	2437c <__assert_fail@plt+0x12c1c>
   2430c:	add	r2, r2, r3, lsl #2
   24310:	sub	ip, sl, #1
   24314:	mov	r5, #0
   24318:	ldr	lr, [r2, #8]
   2431c:	b	24350 <__assert_fail@plt+0x12bf0>
   24320:	mov	r3, ip
   24324:	add	r2, r3, #1
   24328:	cmp	r2, #1
   2432c:	blt	24494 <__assert_fail@plt+0x12d34>
   24330:	ldr	r2, [r7, #8]
   24334:	ldr	r0, [r4, #12]
   24338:	ldr	r2, [r2, r3, lsl #2]
   2433c:	ldr	r0, [r0, r3, lsl #2]
   24340:	sub	r3, r3, #1
   24344:	cmp	r0, r2
   24348:	beq	24324 <__assert_fail@plt+0x12bc4>
   2434c:	b	24370 <__assert_fail@plt+0x12c10>
   24350:	cmp	r7, #0
   24354:	beq	24370 <__assert_fail@plt+0x12c10>
   24358:	ldr	r4, [lr, r5, lsl #2]
   2435c:	ldr	r3, [r4]
   24360:	cmp	r6, r3
   24364:	ldreq	r3, [r4, #8]
   24368:	cmpeq	r3, sl
   2436c:	beq	24320 <__assert_fail@plt+0x12bc0>
   24370:	add	r5, r5, #1
   24374:	cmp	r5, r1
   24378:	blt	24350 <__assert_fail@plt+0x12bf0>
   2437c:	mov	r0, #56	; 0x38
   24380:	mov	r1, #1
   24384:	bl	2a858 <__assert_fail@plt+0x190f8>
   24388:	cmp	r0, #0
   2438c:	beq	244cc <__assert_fail@plt+0x12d6c>
   24390:	mov	r4, r0
   24394:	ldr	r0, [r7, #4]
   24398:	add	sl, r4, #4
   2439c:	cmp	r0, #1
   243a0:	str	r0, [r4, #8]
   243a4:	blt	24468 <__assert_fail@plt+0x12d08>
   243a8:	str	r0, [r4, #4]
   243ac:	lsl	r0, r0, #2
   243b0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   243b4:	cmp	r0, #0
   243b8:	str	r0, [r4, #12]
   243bc:	beq	244b8 <__assert_fail@plt+0x12d58>
   243c0:	ldmib	r7, {r5, r7}
   243c4:	lsl	r2, r5, #2
   243c8:	mov	r1, r7
   243cc:	bl	11484 <memcpy@plt>
   243d0:	cmp	r5, #1
   243d4:	str	sl, [r4, #40]	; 0x28
   243d8:	blt	2447c <__assert_fail@plt+0x12d1c>
   243dc:	ldr	sl, [r9]
   243e0:	movw	ip, #65280	; 0xff00
   243e4:	mov	lr, #32
   243e8:	movt	ip, #3
   243ec:	add	r2, ip, #255	; 0xff
   243f0:	ldr	r0, [r7]
   243f4:	add	r1, sl, r0, lsl #3
   243f8:	ldr	r0, [r1, #4]!
   243fc:	and	r3, r0, r2
   24400:	cmp	r3, #1
   24404:	beq	24458 <__assert_fail@plt+0x12cf8>
   24408:	ldrb	r8, [r4, #52]	; 0x34
   2440c:	and	r3, lr, r0, lsr #15
   24410:	uxtb	r0, r0
   24414:	cmp	r0, #12
   24418:	orr	r3, r8, r3
   2441c:	strb	r3, [r4, #52]	; 0x34
   24420:	beq	24450 <__assert_fail@plt+0x12cf0>
   24424:	cmp	r0, #4
   24428:	beq	2443c <__assert_fail@plt+0x12cdc>
   2442c:	cmp	r0, #2
   24430:	bne	24444 <__assert_fail@plt+0x12ce4>
   24434:	orr	r0, r3, #16
   24438:	b	24454 <__assert_fail@plt+0x12cf4>
   2443c:	orr	r0, r3, #64	; 0x40
   24440:	b	24454 <__assert_fail@plt+0x12cf4>
   24444:	ldr	r0, [r1]
   24448:	tst	r0, ip
   2444c:	beq	24458 <__assert_fail@plt+0x12cf8>
   24450:	orr	r0, r3, #128	; 0x80
   24454:	strb	r0, [r4, #52]	; 0x34
   24458:	add	r7, r7, #4
   2445c:	subs	r5, r5, #1
   24460:	bne	243f0 <__assert_fail@plt+0x12c90>
   24464:	b	2447c <__assert_fail@plt+0x12d1c>
   24468:	mov	r0, #0
   2446c:	str	r0, [sl]
   24470:	str	r0, [sl, #4]
   24474:	str	r0, [sl, #8]
   24478:	str	sl, [r4, #40]	; 0x28
   2447c:	mov	r0, r9
   24480:	mov	r1, r4
   24484:	mov	r2, r6
   24488:	bl	211d0 <__assert_fail@plt+0xfa70>
   2448c:	cmp	r0, #0
   24490:	bne	244ac <__assert_fail@plt+0x12d4c>
   24494:	mov	r0, r4
   24498:	sub	sp, fp, #28
   2449c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   244a0:	mov	r4, #0
   244a4:	str	r4, [r0]
   244a8:	b	24494 <__assert_fail@plt+0x12d34>
   244ac:	mov	r0, r4
   244b0:	bl	1b1ec <__assert_fail@plt+0x9a8c>
   244b4:	b	244cc <__assert_fail@plt+0x12d6c>
   244b8:	mov	r0, #0
   244bc:	str	r0, [r4, #4]
   244c0:	str	r0, [r4, #8]
   244c4:	mov	r0, r4
   244c8:	bl	141c4 <__assert_fail@plt+0x2a64>
   244cc:	ldr	r1, [sp]
   244d0:	mov	r0, #12
   244d4:	mov	r4, #0
   244d8:	str	r0, [r1]
   244dc:	b	24494 <__assert_fail@plt+0x12d34>
   244e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   244e4:	add	fp, sp, #24
   244e8:	ldr	lr, [r0]
   244ec:	add	r7, lr, r1, lsl #3
   244f0:	ldrb	r9, [r7, #4]
   244f4:	cmp	r9, #7
   244f8:	beq	246c4 <__assert_fail@plt+0x12f64>
   244fc:	ldr	ip, [r2, #80]	; 0x50
   24500:	mov	r6, #1
   24504:	cmp	ip, #1
   24508:	beq	24544 <__assert_fail@plt+0x12de4>
   2450c:	ldr	r5, [r2, #28]
   24510:	add	r7, r3, #1
   24514:	cmp	r7, r5
   24518:	bge	24544 <__assert_fail@plt+0x12de4>
   2451c:	ldr	r6, [r2, #8]
   24520:	add	r7, r6, r3, lsl #2
   24524:	mov	r6, #1
   24528:	ldr	r4, [r7, r6, lsl #2]
   2452c:	cmn	r4, #1
   24530:	bne	24544 <__assert_fail@plt+0x12de4>
   24534:	add	r6, r6, #1
   24538:	add	r4, r3, r6
   2453c:	cmp	r4, r5
   24540:	blt	24528 <__assert_fail@plt+0x12dc8>
   24544:	mov	r8, #0
   24548:	cmp	r9, #5
   2454c:	bne	24594 <__assert_fail@plt+0x12e34>
   24550:	cmp	r6, #2
   24554:	blt	246b4 <__assert_fail@plt+0x12f54>
   24558:	ldr	r0, [r0, #128]	; 0x80
   2455c:	tst	r0, #64	; 0x40
   24560:	bne	24574 <__assert_fail@plt+0x12e14>
   24564:	ldr	r1, [r2, #4]
   24568:	ldrb	r1, [r1, r3]
   2456c:	cmp	r1, #10
   24570:	beq	246b4 <__assert_fail@plt+0x12f54>
   24574:	tst	r0, #128	; 0x80
   24578:	beq	246b0 <__assert_fail@plt+0x12f50>
   2457c:	ldr	r0, [r2, #4]
   24580:	ldrb	r0, [r0, r3]
   24584:	cmp	r0, #0
   24588:	movne	r8, r6
   2458c:	mov	r0, r8
   24590:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24594:	cmp	r9, #6
   24598:	bne	246b4 <__assert_fail@plt+0x12f54>
   2459c:	cmp	r6, #2
   245a0:	blt	246b4 <__assert_fail@plt+0x12f54>
   245a4:	ldr	r7, [lr, r1, lsl #3]
   245a8:	ldr	r0, [r7, #32]
   245ac:	cmp	r0, #0
   245b0:	bne	245cc <__assert_fail@plt+0x12e6c>
   245b4:	ldr	r1, [r7, #36]	; 0x24
   245b8:	cmp	r1, #0
   245bc:	bne	245cc <__assert_fail@plt+0x12e6c>
   245c0:	ldr	r1, [r7, #20]
   245c4:	cmp	r1, #0
   245c8:	beq	246bc <__assert_fail@plt+0x12f5c>
   245cc:	cmp	ip, #1
   245d0:	bne	245e0 <__assert_fail@plt+0x12e80>
   245d4:	ldr	r1, [r2, #4]
   245d8:	ldrb	r5, [r1, r3]
   245dc:	b	245e8 <__assert_fail@plt+0x12e88>
   245e0:	ldr	r1, [r2, #8]
   245e4:	ldr	r5, [r1, r3, lsl #2]
   245e8:	ldr	r1, [r7, #20]
   245ec:	cmp	r1, #1
   245f0:	blt	24614 <__assert_fail@plt+0x12eb4>
   245f4:	ldr	r2, [r7]
   245f8:	mov	r3, #0
   245fc:	ldr	r4, [r2, r3, lsl #2]
   24600:	cmp	r5, r4
   24604:	beq	24690 <__assert_fail@plt+0x12f30>
   24608:	add	r3, r3, #1
   2460c:	cmp	r3, r1
   24610:	blt	245fc <__assert_fail@plt+0x12e9c>
   24614:	ldr	r1, [r7, #36]	; 0x24
   24618:	cmp	r1, #1
   2461c:	blt	24650 <__assert_fail@plt+0x12ef0>
   24620:	mov	r4, #0
   24624:	ldr	r0, [r7, #12]
   24628:	ldr	r1, [r0, r4, lsl #2]
   2462c:	mov	r0, r5
   24630:	bl	1140c <iswctype@plt>
   24634:	cmp	r0, #0
   24638:	bne	24690 <__assert_fail@plt+0x12f30>
   2463c:	ldr	r0, [r7, #36]	; 0x24
   24640:	add	r4, r4, #1
   24644:	cmp	r4, r0
   24648:	blt	24624 <__assert_fail@plt+0x12ec4>
   2464c:	ldr	r0, [r7, #32]
   24650:	cmp	r0, #1
   24654:	blt	24688 <__assert_fail@plt+0x12f28>
   24658:	ldr	r1, [r7, #4]
   2465c:	mov	r2, #0
   24660:	ldr	r3, [r1, r2, lsl #2]
   24664:	cmp	r3, r5
   24668:	bhi	2467c <__assert_fail@plt+0x12f1c>
   2466c:	ldr	r3, [r7, #8]
   24670:	ldr	r3, [r3, r2, lsl #2]
   24674:	cmp	r5, r3
   24678:	bls	24690 <__assert_fail@plt+0x12f30>
   2467c:	add	r2, r2, #1
   24680:	cmp	r2, r0
   24684:	blt	24660 <__assert_fail@plt+0x12f00>
   24688:	mov	r0, #0
   2468c:	b	24694 <__assert_fail@plt+0x12f34>
   24690:	mov	r0, r6
   24694:	ldrb	r1, [r7, #16]
   24698:	tst	r1, #1
   2469c:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   246a0:	cmp	r0, #0
   246a4:	bgt	246b4 <__assert_fail@plt+0x12f54>
   246a8:	cmp	r6, #1
   246ac:	movle	r6, #1
   246b0:	mov	r8, r6
   246b4:	mov	r0, r8
   246b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   246bc:	mov	r5, #0
   246c0:	b	245e8 <__assert_fail@plt+0x12e88>
   246c4:	ldr	r0, [r2, #4]
   246c8:	mov	r8, #0
   246cc:	ldrb	r6, [r0, r3]
   246d0:	cmp	r6, #194	; 0xc2
   246d4:	bcc	246b4 <__assert_fail@plt+0x12f54>
   246d8:	ldr	r1, [r2, #48]	; 0x30
   246dc:	add	r2, r3, #2
   246e0:	cmp	r2, r1
   246e4:	bgt	246b4 <__assert_fail@plt+0x12f54>
   246e8:	add	r0, r0, r3
   246ec:	cmp	r6, #223	; 0xdf
   246f0:	ldrb	r7, [r0, #1]
   246f4:	bhi	24718 <__assert_fail@plt+0x12fb8>
   246f8:	mov	r8, #2
   246fc:	cmp	r7, #191	; 0xbf
   24700:	sxtb	r0, r7
   24704:	movwhi	r8, #0
   24708:	cmn	r0, #1
   2470c:	movwgt	r8, #0
   24710:	mov	r0, r8
   24714:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24718:	cmp	r6, #239	; 0xef
   2471c:	bhi	24738 <__assert_fail@plt+0x12fd8>
   24720:	mov	r2, #3
   24724:	cmp	r6, #224	; 0xe0
   24728:	bne	24794 <__assert_fail@plt+0x13034>
   2472c:	cmp	r7, #160	; 0xa0
   24730:	bcc	246b4 <__assert_fail@plt+0x12f54>
   24734:	b	24794 <__assert_fail@plt+0x13034>
   24738:	cmp	r6, #247	; 0xf7
   2473c:	bhi	24758 <__assert_fail@plt+0x12ff8>
   24740:	mov	r2, #4
   24744:	cmp	r6, #240	; 0xf0
   24748:	bne	24794 <__assert_fail@plt+0x13034>
   2474c:	cmp	r7, #144	; 0x90
   24750:	bcc	246b4 <__assert_fail@plt+0x12f54>
   24754:	b	24794 <__assert_fail@plt+0x13034>
   24758:	cmp	r6, #251	; 0xfb
   2475c:	bhi	24778 <__assert_fail@plt+0x13018>
   24760:	mov	r2, #5
   24764:	cmp	r6, #248	; 0xf8
   24768:	bne	24794 <__assert_fail@plt+0x13034>
   2476c:	cmp	r7, #136	; 0x88
   24770:	bcc	246b4 <__assert_fail@plt+0x12f54>
   24774:	b	24794 <__assert_fail@plt+0x13034>
   24778:	cmp	r6, #253	; 0xfd
   2477c:	bhi	246b4 <__assert_fail@plt+0x12f54>
   24780:	mov	r2, #6
   24784:	cmp	r6, #252	; 0xfc
   24788:	bne	24794 <__assert_fail@plt+0x13034>
   2478c:	cmp	r7, #132	; 0x84
   24790:	bcc	246b4 <__assert_fail@plt+0x12f54>
   24794:	add	r3, r2, r3
   24798:	cmp	r3, r1
   2479c:	bgt	246b4 <__assert_fail@plt+0x12f54>
   247a0:	mov	r1, #1
   247a4:	b	247b8 <__assert_fail@plt+0x13058>
   247a8:	add	r1, r1, #1
   247ac:	cmp	r1, r2
   247b0:	movcs	r0, r2
   247b4:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   247b8:	ldrb	r3, [r0, r1]
   247bc:	sxtb	r7, r3
   247c0:	cmn	r7, #1
   247c4:	bgt	246b4 <__assert_fail@plt+0x12f54>
   247c8:	cmp	r3, #191	; 0xbf
   247cc:	bls	247a8 <__assert_fail@plt+0x13048>
   247d0:	b	246b4 <__assert_fail@plt+0x12f54>
   247d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   247d8:	add	fp, sp, #24
   247dc:	ldr	r4, [r1, #4]
   247e0:	mov	r6, r0
   247e4:	mvn	r0, #0
   247e8:	mov	r8, #0
   247ec:	uxtab	r3, r0, r4
   247f0:	cmp	r3, #6
   247f4:	bhi	24990 <__assert_fail@plt+0x13230>
   247f8:	ldr	r0, [r6, #4]
   247fc:	mov	r9, r1
   24800:	ldrb	r1, [r0, r2]
   24804:	add	r7, pc, #4
   24808:	sxtb	r0, r1
   2480c:	ldr	pc, [r7, r3, lsl #2]
   24810:	andeq	r4, r2, ip, lsr #16
   24814:	muleq	r2, r0, r9
   24818:	andeq	r4, r2, r0, asr #16
   2481c:	muleq	r2, r0, r9
   24820:	andeq	r4, r2, r8, ror #16
   24824:	muleq	r2, r0, r9
   24828:	andeq	r4, r2, r0, ror #16
   2482c:	ldrb	r3, [r9]
   24830:	uxtb	r7, r0
   24834:	cmp	r3, r7
   24838:	beq	2489c <__assert_fail@plt+0x1313c>
   2483c:	b	24990 <__assert_fail@plt+0x13230>
   24840:	ldr	r3, [r9]
   24844:	ubfx	r7, r1, #5, #3
   24848:	mov	r5, #1
   2484c:	ldr	r3, [r3, r7, lsl #2]
   24850:	and	r7, r1, #31
   24854:	tst	r3, r5, lsl r7
   24858:	bne	2489c <__assert_fail@plt+0x1313c>
   2485c:	b	24990 <__assert_fail@plt+0x13230>
   24860:	cmp	r0, #0
   24864:	blt	24990 <__assert_fail@plt+0x13230>
   24868:	cmp	r1, #0
   2486c:	beq	2488c <__assert_fail@plt+0x1312c>
   24870:	cmp	r1, #10
   24874:	bne	2489c <__assert_fail@plt+0x1313c>
   24878:	ldr	r3, [r6, #84]	; 0x54
   2487c:	ldrb	r3, [r3, #128]	; 0x80
   24880:	tst	r3, #64	; 0x40
   24884:	beq	24990 <__assert_fail@plt+0x13230>
   24888:	b	2489c <__assert_fail@plt+0x1313c>
   2488c:	ldr	r3, [r6, #84]	; 0x54
   24890:	ldrb	r3, [r3, #128]	; 0x80
   24894:	tst	r3, #128	; 0x80
   24898:	bne	24990 <__assert_fail@plt+0x13230>
   2489c:	movw	r3, #65280	; 0xff00
   248a0:	movt	r3, #3
   248a4:	tst	r4, r3
   248a8:	beq	248f4 <__assert_fail@plt+0x13194>
   248ac:	cmn	r2, #1
   248b0:	ble	248ec <__assert_fail@plt+0x1318c>
   248b4:	ldr	r3, [r6, #48]	; 0x30
   248b8:	cmp	r3, r2
   248bc:	beq	249b0 <__assert_fail@plt+0x13250>
   248c0:	ldr	r3, [r6, #80]	; 0x50
   248c4:	cmp	r3, #2
   248c8:	blt	24900 <__assert_fail@plt+0x131a0>
   248cc:	ldr	r0, [r6, #8]
   248d0:	ldr	r7, [r0, r2, lsl #2]
   248d4:	cmn	r7, #1
   248d8:	bne	24930 <__assert_fail@plt+0x131d0>
   248dc:	sub	r1, r2, #1
   248e0:	cmp	r2, #0
   248e4:	mov	r2, r1
   248e8:	bgt	248d0 <__assert_fail@plt+0x13170>
   248ec:	ldr	r1, [r6, #60]	; 0x3c
   248f0:	b	24954 <__assert_fail@plt+0x131f4>
   248f4:	mov	r8, #1
   248f8:	mov	r0, r8
   248fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24900:	ldr	r2, [r6, #68]	; 0x44
   24904:	ubfx	r3, r1, #5, #3
   24908:	and	r7, r1, #31
   2490c:	mov	r1, #1
   24910:	ldr	r3, [r2, r3, lsl #2]
   24914:	mov	r2, #0
   24918:	tst	r3, r1, lsl r7
   2491c:	bne	2496c <__assert_fail@plt+0x1320c>
   24920:	mov	r1, #0
   24924:	cmp	r0, #10
   24928:	beq	24948 <__assert_fail@plt+0x131e8>
   2492c:	b	24954 <__assert_fail@plt+0x131f4>
   24930:	ldrb	r0, [r6, #78]	; 0x4e
   24934:	cmp	r0, #0
   24938:	bne	249c0 <__assert_fail@plt+0x13260>
   2493c:	mov	r1, #0
   24940:	cmp	r7, #10
   24944:	bne	24954 <__assert_fail@plt+0x131f4>
   24948:	ldrb	r1, [r6, #77]	; 0x4d
   2494c:	cmp	r1, #0
   24950:	movwne	r1, #2
   24954:	and	r0, r1, #1
   24958:	tst	r4, #1024	; 0x400
   2495c:	eor	r2, r0, #1
   24960:	beq	2496c <__assert_fail@plt+0x1320c>
   24964:	cmp	r0, #0
   24968:	beq	24990 <__assert_fail@plt+0x13230>
   2496c:	ldr	r0, [r9, #4]
   24970:	cmp	r2, #0
   24974:	bne	24980 <__assert_fail@plt+0x13220>
   24978:	ands	r2, r0, #2048	; 0x800
   2497c:	bne	24990 <__assert_fail@plt+0x13230>
   24980:	tst	r1, #2
   24984:	bne	24998 <__assert_fail@plt+0x13238>
   24988:	ands	r2, r0, #8192	; 0x2000
   2498c:	beq	24998 <__assert_fail@plt+0x13238>
   24990:	mov	r0, r8
   24994:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24998:	and	r0, r0, #32768	; 0x8000
   2499c:	mov	r2, #1
   249a0:	and	r1, r1, #8
   249a4:	eor	r0, r2, r0, lsr #15
   249a8:	orr	r0, r0, r1, lsr #3
   249ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   249b0:	ldr	r0, [r6, #88]	; 0x58
   249b4:	and	r0, r0, #2
   249b8:	eor	r1, r0, #10
   249bc:	b	24954 <__assert_fail@plt+0x131f4>
   249c0:	mov	r0, r7
   249c4:	bl	1164c <iswalnum@plt>
   249c8:	mov	r1, #1
   249cc:	mov	r2, #0
   249d0:	cmp	r7, #95	; 0x5f
   249d4:	beq	2496c <__assert_fail@plt+0x1320c>
   249d8:	cmp	r0, #0
   249dc:	beq	2493c <__assert_fail@plt+0x131dc>
   249e0:	b	2496c <__assert_fail@plt+0x1320c>
   249e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249e8:	add	fp, sp, #28
   249ec:	sub	sp, sp, #4
   249f0:	vpush	{d8-d9}
   249f4:	sub	sp, sp, #2256	; 0x8d0
   249f8:	sub	sp, sp, #12288	; 0x3000
   249fc:	mov	r6, #0
   24a00:	sub	lr, fp, #1024	; 0x400
   24a04:	mov	r8, r1
   24a08:	str	r0, [sp, #148]	; 0x94
   24a0c:	vmov.i32	q4, #0	; 0x00000000
   24a10:	str	r6, [r1, #44]	; 0x2c
   24a14:	str	r6, [r1, #48]	; 0x30
   24a18:	sub	r1, lr, #56	; 0x38
   24a1c:	mov	r0, r1
   24a20:	vst1.64	{d8-d9}, [r0]!
   24a24:	vst1.64	{d8-d9}, [r0]
   24a28:	ldr	r0, [r8, #8]
   24a2c:	cmp	r0, #1
   24a30:	blt	259a0 <__assert_fail@plt+0x14240>
   24a34:	ldr	r2, [sp, #148]	; 0x94
   24a38:	mov	r7, #0
   24a3c:	mov	r6, #0
   24a40:	str	r8, [sp, #24]
   24a44:	add	r0, r2, #112	; 0x70
   24a48:	str	r0, [sp, #4]
   24a4c:	add	r0, r2, #96	; 0x60
   24a50:	str	r0, [sp]
   24a54:	add	r0, r1, #16
   24a58:	str	r0, [sp, #8]
   24a5c:	ldr	r0, [r8, #12]
   24a60:	ldr	r1, [sp, #148]	; 0x94
   24a64:	ldr	r0, [r0, r7, lsl #2]
   24a68:	ldr	r2, [r1]
   24a6c:	add	r9, r2, r0, lsl #3
   24a70:	ldr	r1, [r9, #4]!
   24a74:	uxtb	r3, r1
   24a78:	cmp	r3, #1
   24a7c:	str	r3, [sp, #92]	; 0x5c
   24a80:	bne	24ac4 <__assert_fail@plt+0x13364>
   24a84:	str	r2, [sp, #16]
   24a88:	ldrb	r2, [r2, r0, lsl #3]
   24a8c:	sub	lr, fp, #1024	; 0x400
   24a90:	str	r0, [sp, #20]
   24a94:	mov	r0, r7
   24a98:	mov	r4, #1
   24a9c:	sub	r7, lr, #56	; 0x38
   24aa0:	mov	r5, r7
   24aa4:	ubfx	r3, r2, #5, #3
   24aa8:	ldr	r8, [sp, #24]
   24aac:	and	r2, r2, #31
   24ab0:	ldr	r7, [r7, r3, lsl #2]
   24ab4:	orr	r2, r7, r4, lsl r2
   24ab8:	mov	r7, r0
   24abc:	str	r2, [r5, r3, lsl #2]
   24ac0:	b	24c20 <__assert_fail@plt+0x134c0>
   24ac4:	cmp	r3, #7
   24ac8:	beq	24b18 <__assert_fail@plt+0x133b8>
   24acc:	cmp	r3, #5
   24ad0:	beq	24b70 <__assert_fail@plt+0x13410>
   24ad4:	cmp	r3, #3
   24ad8:	bne	2539c <__assert_fail@plt+0x13c3c>
   24adc:	str	r2, [sp, #16]
   24ae0:	ldr	r2, [r2, r0, lsl #3]
   24ae4:	sub	lr, fp, #1024	; 0x400
   24ae8:	str	r0, [sp, #20]
   24aec:	sub	r3, lr, #56	; 0x38
   24af0:	vld1.64	{d16-d17}, [r3]
   24af4:	vld1.32	{d18-d19}, [r2]!
   24af8:	vorr	q8, q8, q9
   24afc:	vst1.64	{d16-d17}, [r3]
   24b00:	vld1.32	{d16-d17}, [r2]
   24b04:	ldr	r2, [sp, #8]
   24b08:	vld1.32	{d18-d19}, [r2]
   24b0c:	vorr	q8, q9, q8
   24b10:	vst1.32	{d16-d17}, [r2]
   24b14:	b	24c20 <__assert_fail@plt+0x134c0>
   24b18:	str	r0, [sp, #20]
   24b1c:	ldr	r0, [sp, #148]	; 0x94
   24b20:	str	r2, [sp, #16]
   24b24:	mvn	r2, #0
   24b28:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24b2c:	str	r2, [fp, #-1072]	; 0xfffffbd0
   24b30:	str	r2, [fp, #-1076]	; 0xfffffbcc
   24b34:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24b38:	ldr	r3, [r0, #128]	; 0x80
   24b3c:	and	r2, r3, #128	; 0x80
   24b40:	ands	r3, r3, #64	; 0x40
   24b44:	beq	24b50 <__assert_fail@plt+0x133f0>
   24b48:	cmp	r2, #0
   24b4c:	beq	24c20 <__assert_fail@plt+0x134c0>
   24b50:	cmp	r3, #0
   24b54:	mvn	r3, #1
   24b58:	movweq	r3, #64510	; 0xfbfe
   24b5c:	movteq	r3, #65535	; 0xffff
   24b60:	cmp	r2, #0
   24b64:	mvneq	r3, #1024	; 0x400
   24b68:	str	r3, [fp, #-1080]	; 0xfffffbc8
   24b6c:	b	24c20 <__assert_fail@plt+0x134c0>
   24b70:	str	r2, [sp, #16]
   24b74:	ldr	r2, [sp, #148]	; 0x94
   24b78:	mov	r4, r7
   24b7c:	str	r0, [sp, #20]
   24b80:	ldr	r2, [r2, #92]	; 0x5c
   24b84:	cmp	r2, #2
   24b88:	blt	24bc8 <__assert_fail@plt+0x13468>
   24b8c:	ldr	r0, [sp, #148]	; 0x94
   24b90:	sub	lr, fp, #1024	; 0x400
   24b94:	sub	r3, lr, #56	; 0x38
   24b98:	vld1.64	{d16-d17}, [r3]
   24b9c:	ldr	r2, [r0, #60]	; 0x3c
   24ba0:	vld1.32	{d18-d19}, [r2]!
   24ba4:	vorr	q8, q8, q9
   24ba8:	vst1.64	{d16-d17}, [r3]
   24bac:	vld1.32	{d18-d19}, [r2]
   24bb0:	ldr	r2, [sp, #8]
   24bb4:	vld1.32	{d20-d21}, [r2]
   24bb8:	vorr	q9, q10, q9
   24bbc:	vst1.32	{d18-d19}, [r2]
   24bc0:	vmov.32	r2, d16[0]
   24bc4:	b	24bec <__assert_fail@plt+0x1348c>
   24bc8:	mvn	r2, #0
   24bcc:	str	r2, [fp, #-1052]	; 0xfffffbe4
   24bd0:	str	r2, [fp, #-1056]	; 0xfffffbe0
   24bd4:	str	r2, [fp, #-1060]	; 0xfffffbdc
   24bd8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   24bdc:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24be0:	str	r2, [fp, #-1072]	; 0xfffffbd0
   24be4:	str	r2, [fp, #-1076]	; 0xfffffbcc
   24be8:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24bec:	ldr	r0, [sp, #148]	; 0x94
   24bf0:	ldr	r8, [sp, #24]
   24bf4:	ldr	r3, [r0, #128]	; 0x80
   24bf8:	ands	r7, r3, #64	; 0x40
   24bfc:	and	r3, r3, #128	; 0x80
   24c00:	biceq	r2, r2, #1024	; 0x400
   24c04:	mov	r7, r4
   24c08:	beq	24c14 <__assert_fail@plt+0x134b4>
   24c0c:	cmp	r3, #0
   24c10:	beq	24c20 <__assert_fail@plt+0x134c0>
   24c14:	cmp	r3, #0
   24c18:	bicne	r2, r2, #1
   24c1c:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24c20:	ldr	sl, [sp, #92]	; 0x5c
   24c24:	movw	r2, #65280	; 0xff00
   24c28:	movt	r2, #3
   24c2c:	ands	r2, r1, r2
   24c30:	beq	24ee0 <__assert_fail@plt+0x13780>
   24c34:	tst	r1, #8192	; 0x2000
   24c38:	beq	24c64 <__assert_fail@plt+0x13504>
   24c3c:	ldr	r2, [fp, #-1080]	; 0xfffffbc8
   24c40:	sub	lr, fp, #1024	; 0x400
   24c44:	sub	r3, lr, #56	; 0x38
   24c48:	vst1.64	{d8-d9}, [r3]!
   24c4c:	vst1.64	{d8-d9}, [r3]
   24c50:	tst	r2, #1024	; 0x400
   24c54:	beq	2539c <__assert_fail@plt+0x13c3c>
   24c58:	ldr	sl, [sp, #92]	; 0x5c
   24c5c:	mov	r2, #1024	; 0x400
   24c60:	str	r2, [fp, #-1080]	; 0xfffffbc8
   24c64:	tst	r1, #32768	; 0x8000
   24c68:	bne	24e68 <__assert_fail@plt+0x13708>
   24c6c:	tst	r1, #1024	; 0x400
   24c70:	beq	24df0 <__assert_fail@plt+0x13690>
   24c74:	cmp	sl, #1
   24c78:	ldrbeq	r2, [r9, #2]
   24c7c:	tsteq	r2, #64	; 0x40
   24c80:	beq	24e68 <__assert_fail@plt+0x13708>
   24c84:	ldr	r0, [sp, #148]	; 0x94
   24c88:	ldr	r2, [r0, #92]	; 0x5c
   24c8c:	cmp	r2, #1
   24c90:	ble	24d20 <__assert_fail@plt+0x135c0>
   24c94:	ldr	r0, [sp, #148]	; 0x94
   24c98:	ldr	r3, [sp]
   24c9c:	sub	lr, fp, #1024	; 0x400
   24ca0:	ldr	r2, [r0, #60]	; 0x3c
   24ca4:	vld1.32	{d16-d17}, [r3]
   24ca8:	sub	r3, lr, #56	; 0x38
   24cac:	vld1.64	{d20-d21}, [r3]
   24cb0:	vld1.32	{d18-d19}, [r2]!
   24cb4:	vorn	q8, q8, q9
   24cb8:	vand	q8, q10, q8
   24cbc:	vst1.64	{d16-d17}, [r3]
   24cc0:	vmov.32	r3, d16[1]
   24cc4:	vld1.32	{d18-d19}, [r2]
   24cc8:	ldr	r2, [sp, #4]
   24ccc:	vld1.32	{d20-d21}, [r2]
   24cd0:	ldr	r2, [sp, #8]
   24cd4:	vld1.32	{d22-d23}, [r2]
   24cd8:	vorn	q9, q10, q9
   24cdc:	vand	q9, q11, q9
   24ce0:	vst1.32	{d18-d19}, [r2]
   24ce4:	vmov.32	r2, d16[0]
   24ce8:	orr	r2, r3, r2
   24cec:	vmov.32	r3, d17[0]
   24cf0:	orr	r2, r2, r3
   24cf4:	vmov.32	r3, d17[1]
   24cf8:	orr	r2, r2, r3
   24cfc:	vmov.32	r3, d18[0]
   24d00:	orr	r2, r2, r3
   24d04:	vmov.32	r3, d18[1]
   24d08:	orr	r2, r2, r3
   24d0c:	vmov.32	r3, d19[0]
   24d10:	orr	r2, r2, r3
   24d14:	vmov.32	r3, d19[1]
   24d18:	orr	r2, r2, r3
   24d1c:	b	24de4 <__assert_fail@plt+0x13684>
   24d20:	ldr	r4, [sp, #148]	; 0x94
   24d24:	str	r6, [sp, #144]	; 0x90
   24d28:	ldr	r6, [fp, #-1072]	; 0xfffffbd0
   24d2c:	ldr	r2, [fp, #-1068]	; 0xfffffbd4
   24d30:	str	r7, [sp, #12]
   24d34:	ldr	r5, [r4, #116]	; 0x74
   24d38:	ldr	ip, [r4, #104]	; 0x68
   24d3c:	ldr	r0, [r4, #108]	; 0x6c
   24d40:	ldr	r3, [r4, #96]	; 0x60
   24d44:	ldr	lr, [r4, #100]	; 0x64
   24d48:	ldr	r8, [r4, #112]	; 0x70
   24d4c:	ldr	sl, [r4, #124]	; 0x7c
   24d50:	str	r5, [sp, #136]	; 0x88
   24d54:	ldr	r5, [r4, #120]	; 0x78
   24d58:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   24d5c:	and	r2, r2, r0
   24d60:	and	ip, r6, ip
   24d64:	ldr	r0, [sp, #136]	; 0x88
   24d68:	str	r5, [sp, #140]	; 0x8c
   24d6c:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   24d70:	and	r7, r4, r3
   24d74:	str	r7, [fp, #-1080]	; 0xfffffbc8
   24d78:	and	lr, r5, lr
   24d7c:	str	lr, [fp, #-1076]	; 0xfffffbcc
   24d80:	str	ip, [fp, #-1072]	; 0xfffffbd0
   24d84:	str	r2, [fp, #-1068]	; 0xfffffbd4
   24d88:	orr	r7, lr, r7
   24d8c:	ldr	r6, [fp, #-1064]	; 0xfffffbd8
   24d90:	orr	r7, r7, ip
   24d94:	orr	r2, r7, r2
   24d98:	ldr	r7, [sp, #12]
   24d9c:	and	r6, r6, r8
   24da0:	ldr	r8, [sp, #24]
   24da4:	str	r6, [fp, #-1064]	; 0xfffffbd8
   24da8:	orr	r2, r2, r6
   24dac:	ldr	r6, [sp, #144]	; 0x90
   24db0:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   24db4:	and	r4, r4, r0
   24db8:	ldr	r0, [sp, #140]	; 0x8c
   24dbc:	str	r4, [fp, #-1060]	; 0xfffffbdc
   24dc0:	orr	r2, r2, r4
   24dc4:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   24dc8:	and	r3, r3, r0
   24dcc:	str	r3, [fp, #-1056]	; 0xfffffbe0
   24dd0:	orr	r2, r2, r3
   24dd4:	ldr	r5, [fp, #-1052]	; 0xfffffbe4
   24dd8:	and	r5, r5, sl
   24ddc:	str	r5, [fp, #-1052]	; 0xfffffbe4
   24de0:	orr	r2, r2, r5
   24de4:	ldr	sl, [sp, #92]	; 0x5c
   24de8:	cmp	r2, #0
   24dec:	beq	2539c <__assert_fail@plt+0x13c3c>
   24df0:	tst	r1, #2048	; 0x800
   24df4:	beq	24ee0 <__assert_fail@plt+0x13780>
   24df8:	cmp	sl, #1
   24dfc:	bne	24e0c <__assert_fail@plt+0x136ac>
   24e00:	ldrb	r0, [r9, #2]
   24e04:	tst	r0, #64	; 0x40
   24e08:	bne	24e68 <__assert_fail@plt+0x13708>
   24e0c:	ldr	r0, [sp, #148]	; 0x94
   24e10:	sub	lr, fp, #1024	; 0x400
   24e14:	sub	r1, lr, #56	; 0x38
   24e18:	ldr	r0, [r0, #92]	; 0x5c
   24e1c:	cmp	r0, #1
   24e20:	ble	24e74 <__assert_fail@plt+0x13714>
   24e24:	ldr	r0, [sp, #148]	; 0x94
   24e28:	ldr	r2, [sp]
   24e2c:	vld1.64	{d20-d21}, [r1]
   24e30:	ldr	r0, [r0, #60]	; 0x3c
   24e34:	vld1.32	{d16-d17}, [r2]
   24e38:	vld1.32	{d18-d19}, [r0]!
   24e3c:	vand	q8, q9, q8
   24e40:	vbic	q9, q10, q8
   24e44:	vst1.64	{d18-d19}, [r1]
   24e48:	ldr	r1, [sp, #4]
   24e4c:	vld1.32	{d20-d21}, [r0]
   24e50:	ldr	r0, [sp, #8]
   24e54:	vld1.32	{d16-d17}, [r1]
   24e58:	vld1.32	{d22-d23}, [r0]
   24e5c:	vand	q8, q10, q8
   24e60:	vbic	q8, q11, q8
   24e64:	b	24e9c <__assert_fail@plt+0x1373c>
   24e68:	sub	lr, fp, #1024	; 0x400
   24e6c:	sub	r0, lr, #56	; 0x38
   24e70:	b	25394 <__assert_fail@plt+0x13c34>
   24e74:	ldr	r0, [sp]
   24e78:	vld1.64	{d18-d19}, [r1]
   24e7c:	vld1.32	{d16-d17}, [r0]
   24e80:	ldr	r0, [sp, #4]
   24e84:	vbic	q9, q9, q8
   24e88:	vst1.64	{d18-d19}, [r1]
   24e8c:	vld1.32	{d16-d17}, [r0]
   24e90:	ldr	r0, [sp, #8]
   24e94:	vld1.32	{d20-d21}, [r0]
   24e98:	vbic	q8, q10, q8
   24e9c:	vst1.32	{d16-d17}, [r0]
   24ea0:	vmov.32	r0, d18[0]
   24ea4:	vmov.32	r1, d18[1]
   24ea8:	orr	r0, r1, r0
   24eac:	vmov.32	r1, d19[0]
   24eb0:	orr	r0, r0, r1
   24eb4:	vmov.32	r1, d19[1]
   24eb8:	orr	r0, r0, r1
   24ebc:	vmov.32	r1, d16[0]
   24ec0:	orr	r0, r0, r1
   24ec4:	vmov.32	r1, d16[1]
   24ec8:	orr	r0, r0, r1
   24ecc:	vmov.32	r1, d17[0]
   24ed0:	orr	r0, r0, r1
   24ed4:	vmov.32	r1, d17[1]
   24ed8:	orrs	r0, r0, r1
   24edc:	beq	2539c <__assert_fail@plt+0x13c3c>
   24ee0:	cmp	r6, #1
   24ee4:	blt	252b0 <__assert_fail@plt+0x13b50>
   24ee8:	ldr	r0, [fp, #-1052]	; 0xfffffbe4
   24eec:	ldr	lr, [fp, #-1080]	; 0xfffffbc8
   24ef0:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   24ef4:	ldr	r1, [fp, #-1072]	; 0xfffffbd0
   24ef8:	ldr	r8, [fp, #-1068]	; 0xfffffbd4
   24efc:	str	r7, [sp, #12]
   24f00:	mov	r9, #0
   24f04:	add	r7, sp, #152	; 0x98
   24f08:	str	r0, [sp, #96]	; 0x60
   24f0c:	ldr	r0, [fp, #-1056]	; 0xfffffbe0
   24f10:	str	r0, [sp, #136]	; 0x88
   24f14:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   24f18:	str	r0, [sp, #128]	; 0x80
   24f1c:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   24f20:	str	r0, [sp, #132]	; 0x84
   24f24:	sub	r0, fp, #6144	; 0x1800
   24f28:	sub	r4, r0, #104	; 0x68
   24f2c:	mov	ip, r1
   24f30:	cmp	sl, #1
   24f34:	str	r5, [sp, #140]	; 0x8c
   24f38:	bne	24f60 <__assert_fail@plt+0x13800>
   24f3c:	ldr	r0, [sp, #20]
   24f40:	ldr	r1, [sp, #16]
   24f44:	mov	r2, #1
   24f48:	ldrb	r0, [r1, r0, lsl #3]
   24f4c:	ubfx	r1, r0, #5, #3
   24f50:	and	r0, r0, #31
   24f54:	ldr	r1, [r7, r1, lsl #2]
   24f58:	tst	r1, r2, lsl r0
   24f5c:	beq	251dc <__assert_fail@plt+0x13a7c>
   24f60:	str	r4, [sp, #112]	; 0x70
   24f64:	str	r6, [sp, #144]	; 0x90
   24f68:	str	r9, [sp, #108]	; 0x6c
   24f6c:	mov	r3, r8
   24f70:	mov	r5, lr
   24f74:	ldm	r7, {r0, r2, sl}
   24f78:	ldr	r8, [sp, #140]	; 0x8c
   24f7c:	ldr	r1, [r7, #12]
   24f80:	str	ip, [sp, #100]	; 0x64
   24f84:	ldr	r4, [sp, #132]	; 0x84
   24f88:	ldr	r9, [r7, #20]
   24f8c:	str	r3, [sp, #104]	; 0x68
   24f90:	and	r6, sl, ip
   24f94:	ldr	ip, [r7, #16]
   24f98:	str	r0, [sp, #124]	; 0x7c
   24f9c:	and	r0, r0, lr
   24fa0:	str	r2, [sp, #116]	; 0x74
   24fa4:	and	r2, r2, r8
   24fa8:	str	r1, [sp, #120]	; 0x78
   24fac:	ldr	lr, [r7, #24]
   24fb0:	str	r0, [sp, #84]	; 0x54
   24fb4:	orr	r0, r2, r0
   24fb8:	str	r2, [sp, #80]	; 0x50
   24fbc:	and	r2, r1, r3
   24fc0:	ldr	r1, [sp, #136]	; 0x88
   24fc4:	str	r6, [sp, #88]	; 0x58
   24fc8:	orr	r0, r0, r6
   24fcc:	str	r2, [sp, #76]	; 0x4c
   24fd0:	ldr	r6, [sp, #96]	; 0x60
   24fd4:	orr	r0, r0, r2
   24fd8:	and	r2, ip, r4
   24fdc:	str	r2, [sp, #72]	; 0x48
   24fe0:	orr	r0, r0, r2
   24fe4:	ldr	r2, [sp, #128]	; 0x80
   24fe8:	and	r2, r9, r2
   24fec:	str	r2, [sp, #68]	; 0x44
   24ff0:	orr	r0, r0, r2
   24ff4:	and	r2, lr, r1
   24ff8:	str	r2, [sp, #64]	; 0x40
   24ffc:	orr	r0, r0, r2
   25000:	ldr	r2, [r7, #28]
   25004:	and	r3, r2, r6
   25008:	orrs	r0, r0, r3
   2500c:	beq	251a4 <__assert_fail@plt+0x13a44>
   25010:	ldr	r0, [sp, #124]	; 0x7c
   25014:	str	r3, [sp, #28]
   25018:	ldr	r3, [sp, #104]	; 0x68
   2501c:	str	r4, [sp, #132]	; 0x84
   25020:	bic	r0, r5, r0
   25024:	str	r0, [sp, #56]	; 0x38
   25028:	ldr	r0, [sp, #116]	; 0x74
   2502c:	bic	r0, r8, r0
   25030:	ldr	r8, [sp, #100]	; 0x64
   25034:	str	r0, [sp, #52]	; 0x34
   25038:	bic	r0, r8, sl
   2503c:	bic	r1, sl, r8
   25040:	str	r0, [sp, #60]	; 0x3c
   25044:	ldr	r0, [sp, #120]	; 0x78
   25048:	bic	r0, r3, r0
   2504c:	str	r0, [sp, #48]	; 0x30
   25050:	bic	r0, r4, ip
   25054:	ldr	r4, [sp, #128]	; 0x80
   25058:	str	r0, [sp, #44]	; 0x2c
   2505c:	bic	r0, r4, r9
   25060:	str	r0, [sp, #40]	; 0x28
   25064:	ldr	r0, [sp, #136]	; 0x88
   25068:	bic	r0, r0, lr
   2506c:	str	r0, [sp, #36]	; 0x24
   25070:	bic	r0, r6, r2
   25074:	bic	r2, r2, r6
   25078:	str	r0, [sp, #32]
   2507c:	ldr	r0, [sp, #124]	; 0x7c
   25080:	bic	r8, r0, r5
   25084:	ldr	r5, [sp, #140]	; 0x8c
   25088:	ldr	r0, [sp, #116]	; 0x74
   2508c:	str	r1, [sp, #140]	; 0x8c
   25090:	bic	r5, r0, r5
   25094:	orr	r0, r5, r8
   25098:	orr	r0, r0, r1
   2509c:	ldr	r1, [sp, #120]	; 0x78
   250a0:	bic	sl, r1, r3
   250a4:	ldr	r1, [sp, #132]	; 0x84
   250a8:	orr	r0, r0, sl
   250ac:	bic	r1, ip, r1
   250b0:	orr	r3, r0, r1
   250b4:	bic	r0, r9, r4
   250b8:	orr	r4, r3, r0
   250bc:	ldr	r3, [sp, #136]	; 0x88
   250c0:	bic	r3, lr, r3
   250c4:	orr	r4, r4, r3
   250c8:	orrs	r4, r4, r2
   250cc:	beq	251cc <__assert_fail@plt+0x13a6c>
   250d0:	ldr	r6, [sp, #144]	; 0x90
   250d4:	add	r4, sp, #152	; 0x98
   250d8:	sub	lr, fp, #6144	; 0x1800
   250dc:	mov	ip, r4
   250e0:	str	r8, [r4, r6, lsl #5]
   250e4:	mov	r4, r5
   250e8:	add	r5, ip, r6, lsl #5
   250ec:	str	r4, [r5, #4]
   250f0:	ldr	r4, [sp, #140]	; 0x8c
   250f4:	str	r4, [r5, #8]
   250f8:	str	sl, [r5, #12]
   250fc:	str	r1, [r5, #16]
   25100:	str	r0, [r5, #20]
   25104:	ldr	r0, [sp, #84]	; 0x54
   25108:	str	r3, [r5, #24]
   2510c:	str	r2, [r5, #28]
   25110:	ldr	r4, [sp, #112]	; 0x70
   25114:	sub	r1, lr, #104	; 0x68
   25118:	str	r0, [r7]
   2511c:	ldr	r0, [sp, #80]	; 0x50
   25120:	str	r0, [r7, #4]
   25124:	ldr	r0, [sp, #88]	; 0x58
   25128:	str	r0, [r7, #8]
   2512c:	ldr	r0, [sp, #76]	; 0x4c
   25130:	str	r0, [r7, #12]
   25134:	ldr	r0, [sp, #72]	; 0x48
   25138:	str	r0, [r7, #16]
   2513c:	ldr	r0, [sp, #68]	; 0x44
   25140:	str	r0, [r7, #20]
   25144:	ldr	r0, [sp, #64]	; 0x40
   25148:	str	r0, [r7, #24]
   2514c:	ldr	r0, [sp, #28]
   25150:	str	r0, [r7, #28]
   25154:	add	r0, r6, r6, lsl #1
   25158:	add	r5, r1, r0, lsl #2
   2515c:	ldr	r0, [r4, #4]
   25160:	mov	r8, r5
   25164:	str	r0, [r8, #4]!
   25168:	ldr	sl, [r4, #4]
   2516c:	cmp	sl, #1
   25170:	blt	251e8 <__assert_fail@plt+0x13a88>
   25174:	str	r0, [r5]
   25178:	lsl	r0, r0, #2
   2517c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   25180:	ldr	r9, [sp, #108]	; 0x6c
   25184:	ldr	r6, [sp, #60]	; 0x3c
   25188:	cmp	r0, #0
   2518c:	str	r0, [r5, #8]
   25190:	beq	25928 <__assert_fail@plt+0x141c8>
   25194:	ldr	r1, [r4, #8]
   25198:	lsl	r2, sl, #2
   2519c:	bl	11484 <memcpy@plt>
   251a0:	b	25200 <__assert_fail@plt+0x13aa0>
   251a4:	ldr	r0, [sp, #104]	; 0x68
   251a8:	ldr	r9, [sp, #108]	; 0x6c
   251ac:	ldr	r6, [sp, #144]	; 0x90
   251b0:	ldr	r4, [sp, #112]	; 0x70
   251b4:	ldr	sl, [sp, #92]	; 0x5c
   251b8:	ldr	r1, [sp, #100]	; 0x64
   251bc:	mov	lr, r5
   251c0:	mov	r5, r8
   251c4:	mov	r8, r0
   251c8:	b	25298 <__assert_fail@plt+0x13b38>
   251cc:	ldr	r9, [sp, #108]	; 0x6c
   251d0:	ldr	r4, [sp, #112]	; 0x70
   251d4:	ldr	r6, [sp, #60]	; 0x3c
   251d8:	b	2520c <__assert_fail@plt+0x13aac>
   251dc:	ldr	r5, [sp, #140]	; 0x8c
   251e0:	mov	r1, ip
   251e4:	b	25298 <__assert_fail@plt+0x13b38>
   251e8:	ldr	r9, [sp, #108]	; 0x6c
   251ec:	ldr	r6, [sp, #60]	; 0x3c
   251f0:	mov	r0, #0
   251f4:	str	r0, [r5]
   251f8:	str	r0, [r5, #4]
   251fc:	str	r0, [r5, #8]
   25200:	ldr	r0, [sp, #144]	; 0x90
   25204:	add	r0, r0, #1
   25208:	str	r0, [sp, #144]	; 0x90
   2520c:	ldr	r0, [sp, #24]
   25210:	ldr	r1, [sp, #12]
   25214:	ldr	r0, [r0, #12]
   25218:	ldr	r1, [r0, r1, lsl #2]
   2521c:	mov	r0, r4
   25220:	bl	20c50 <__assert_fail@plt+0xf4f0>
   25224:	cmp	r0, #0
   25228:	beq	258a4 <__assert_fail@plt+0x14144>
   2522c:	ldr	lr, [sp, #56]	; 0x38
   25230:	ldr	ip, [sp, #52]	; 0x34
   25234:	ldr	r8, [sp, #48]	; 0x30
   25238:	ldr	r2, [sp, #44]	; 0x2c
   2523c:	mov	sl, r6
   25240:	ldr	r3, [sp, #36]	; 0x24
   25244:	ldr	r5, [sp, #32]
   25248:	mov	r1, #0
   2524c:	orr	r0, ip, lr
   25250:	orr	r0, r0, r6
   25254:	ldr	r6, [sp, #40]	; 0x28
   25258:	orr	r0, r0, r8
   2525c:	orr	r0, r0, r2
   25260:	orr	r0, r0, r6
   25264:	orr	r0, r0, r3
   25268:	orrs	r0, r0, r5
   2526c:	movweq	r1, #17
   25270:	cmp	r1, #0
   25274:	bne	252b8 <__assert_fail@plt+0x13b58>
   25278:	str	r6, [sp, #128]	; 0x80
   2527c:	mov	r1, sl
   25280:	ldr	sl, [sp, #92]	; 0x5c
   25284:	ldr	r6, [sp, #144]	; 0x90
   25288:	str	r5, [sp, #96]	; 0x60
   2528c:	mov	r5, ip
   25290:	str	r3, [sp, #136]	; 0x88
   25294:	str	r2, [sp, #132]	; 0x84
   25298:	add	r9, r9, #1
   2529c:	add	r4, r4, #12
   252a0:	add	r7, r7, #32
   252a4:	cmp	r9, r6
   252a8:	blt	24f2c <__assert_fail@plt+0x137cc>
   252ac:	b	252dc <__assert_fail@plt+0x13b7c>
   252b0:	mov	r9, #0
   252b4:	b	25314 <__assert_fail@plt+0x13bb4>
   252b8:	cmp	r1, #17
   252bc:	bne	253b0 <__assert_fail@plt+0x13c50>
   252c0:	str	r6, [sp, #128]	; 0x80
   252c4:	ldr	r1, [sp, #60]	; 0x3c
   252c8:	ldr	r6, [sp, #144]	; 0x90
   252cc:	str	r5, [sp, #96]	; 0x60
   252d0:	mov	r5, ip
   252d4:	str	r3, [sp, #136]	; 0x88
   252d8:	str	r2, [sp, #132]	; 0x84
   252dc:	ldr	r0, [sp, #132]	; 0x84
   252e0:	str	r1, [fp, #-1072]	; 0xfffffbd0
   252e4:	str	r5, [fp, #-1076]	; 0xfffffbcc
   252e8:	str	r8, [fp, #-1068]	; 0xfffffbd4
   252ec:	ldr	r8, [sp, #24]
   252f0:	ldr	r7, [sp, #12]
   252f4:	str	r0, [fp, #-1064]	; 0xfffffbd8
   252f8:	ldr	r0, [sp, #128]	; 0x80
   252fc:	str	r0, [fp, #-1060]	; 0xfffffbdc
   25300:	ldr	r0, [sp, #136]	; 0x88
   25304:	str	r0, [fp, #-1056]	; 0xfffffbe0
   25308:	ldr	r0, [sp, #96]	; 0x60
   2530c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   25310:	str	lr, [fp, #-1080]	; 0xfffffbc8
   25314:	sub	lr, fp, #1024	; 0x400
   25318:	cmp	r9, r6
   2531c:	sub	r1, lr, #56	; 0x38
   25320:	bne	2539c <__assert_fail@plt+0x13c3c>
   25324:	mov	r0, r1
   25328:	sub	lr, fp, #6144	; 0x1800
   2532c:	mov	r2, #1
   25330:	mov	sl, r7
   25334:	vld1.32	{d16-d17}, [r0]!
   25338:	sub	r3, lr, #104	; 0x68
   2533c:	vld1.64	{d18-d19}, [r0]
   25340:	add	r0, sp, #152	; 0x98
   25344:	add	r0, r0, r9, lsl #5
   25348:	vst1.32	{d16-d17}, [r0]!
   2534c:	vst1.32	{d18-d19}, [r0]
   25350:	ldr	r0, [r8, #12]
   25354:	ldr	r6, [r0, r7, lsl #2]
   25358:	add	r0, r9, r9, lsl #1
   2535c:	mov	r7, r1
   25360:	add	r4, r3, r0, lsl #2
   25364:	str	r2, [r3, r0, lsl #2]
   25368:	mov	r0, #4
   2536c:	mov	r5, r4
   25370:	str	r2, [r5, #4]!
   25374:	bl	2a8ac <__assert_fail@plt+0x1914c>
   25378:	cmp	r0, #0
   2537c:	str	r0, [r4, #8]
   25380:	beq	259d4 <__assert_fail@plt+0x14274>
   25384:	str	r6, [r0]
   25388:	mov	r0, r7
   2538c:	add	r6, r9, #1
   25390:	mov	r7, sl
   25394:	vst1.64	{d8-d9}, [r0]!
   25398:	vst1.64	{d8-d9}, [r0]
   2539c:	ldr	r0, [r8, #8]
   253a0:	add	r7, r7, #1
   253a4:	cmp	r7, r0
   253a8:	blt	24a5c <__assert_fail@plt+0x132fc>
   253ac:	b	253ec <__assert_fail@plt+0x13c8c>
   253b0:	ldr	r1, [sp, #60]	; 0x3c
   253b4:	ldr	r7, [sp, #12]
   253b8:	cmp	r0, #0
   253bc:	str	r1, [fp, #-1072]	; 0xfffffbd0
   253c0:	str	ip, [fp, #-1076]	; 0xfffffbcc
   253c4:	str	r8, [fp, #-1068]	; 0xfffffbd4
   253c8:	str	r2, [fp, #-1064]	; 0xfffffbd8
   253cc:	str	r6, [fp, #-1060]	; 0xfffffbdc
   253d0:	ldr	r8, [sp, #24]
   253d4:	ldr	r6, [sp, #144]	; 0x90
   253d8:	str	r3, [fp, #-1056]	; 0xfffffbe0
   253dc:	str	r5, [fp, #-1052]	; 0xfffffbe4
   253e0:	str	lr, [fp, #-1080]	; 0xfffffbc8
   253e4:	bne	2539c <__assert_fail@plt+0x13c3c>
   253e8:	b	253f4 <__assert_fail@plt+0x13c94>
   253ec:	cmp	r6, #0
   253f0:	ble	259a0 <__assert_fail@plt+0x14240>
   253f4:	mov	r0, #0
   253f8:	str	r0, [fp, #-3136]	; 0xfffff3c0
   253fc:	add	r0, r6, #1
   25400:	str	r0, [fp, #-3140]	; 0xfffff3bc
   25404:	lsl	r0, r0, #2
   25408:	bl	2a8ac <__assert_fail@plt+0x1914c>
   2540c:	cmp	r0, #0
   25410:	str	r0, [fp, #-3132]	; 0xfffff3c4
   25414:	mov	r0, #0
   25418:	movweq	r0, #12
   2541c:	str	r0, [fp, #-56]	; 0xffffffc8
   25420:	beq	259ec <__assert_fail@plt+0x1428c>
   25424:	sub	lr, fp, #3072	; 0xc00
   25428:	vmov.i32	q8, #0	; 0x00000000
   2542c:	mov	r1, #0
   25430:	mov	r2, #0
   25434:	mov	r4, #0
   25438:	mov	r3, #0
   2543c:	mov	r8, #0
   25440:	sub	r0, lr, #104	; 0x68
   25444:	sub	lr, fp, #3072	; 0xc00
   25448:	vst1.64	{d16-d17}, [r0]!
   2544c:	sub	r5, lr, #68	; 0x44
   25450:	vst1.64	{d16-d17}, [r0]
   25454:	mov	r0, #0
   25458:	str	r0, [sp, #140]	; 0x8c
   2545c:	mov	r0, #0
   25460:	str	r0, [sp, #136]	; 0x88
   25464:	mov	r0, #0
   25468:	str	r0, [sp, #132]	; 0x84
   2546c:	mov	r0, #0
   25470:	str	r0, [sp, #128]	; 0x80
   25474:	mov	r0, #0
   25478:	str	r0, [sp, #144]	; 0x90
   2547c:	mov	r0, #0
   25480:	str	r0, [sp, #112]	; 0x70
   25484:	mov	r0, #0
   25488:	sub	lr, fp, #6144	; 0x1800
   2548c:	str	r2, [sp, #124]	; 0x7c
   25490:	str	r3, [sp, #116]	; 0x74
   25494:	str	r4, [sp, #120]	; 0x78
   25498:	str	r0, [fp, #-3136]	; 0xfffff3c0
   2549c:	add	r0, r8, r8, lsl #1
   254a0:	sub	r2, lr, #104	; 0x68
   254a4:	add	r0, r2, r0, lsl #2
   254a8:	ldr	r7, [r0, #4]
   254ac:	cmp	r7, #1
   254b0:	blt	25508 <__assert_fail@plt+0x13da8>
   254b4:	ldr	r4, [r0, #8]
   254b8:	mov	r9, #0
   254bc:	ldr	r2, [sp, #148]	; 0x94
   254c0:	ldr	r0, [r4, r9, lsl #2]
   254c4:	ldr	r2, [r2, #12]
   254c8:	ldr	r0, [r2, r0, lsl #2]
   254cc:	cmn	r0, #1
   254d0:	beq	254f8 <__assert_fail@plt+0x13d98>
   254d4:	ldr	r1, [sp, #148]	; 0x94
   254d8:	add	r0, r0, r0, lsl #1
   254dc:	ldr	r1, [r1, #24]
   254e0:	add	r1, r1, r0, lsl #2
   254e4:	mov	r0, r5
   254e8:	bl	20ac0 <__assert_fail@plt+0xf360>
   254ec:	mov	r1, #0
   254f0:	cmp	r0, #0
   254f4:	bne	2582c <__assert_fail@plt+0x140cc>
   254f8:	add	r9, r9, #1
   254fc:	cmp	r9, r7
   25500:	blt	254bc <__assert_fail@plt+0x13d5c>
   25504:	str	r1, [fp, #-56]	; 0xffffffc8
   25508:	ldr	r1, [sp, #148]	; 0x94
   2550c:	sub	r0, fp, #56	; 0x38
   25510:	mov	r2, r5
   25514:	mov	r3, #0
   25518:	bl	20d8c <__assert_fail@plt+0xf62c>
   2551c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   25520:	mov	r7, r0
   25524:	sub	lr, fp, #1024	; 0x400
   25528:	add	r4, sp, #152	; 0x98
   2552c:	sub	r0, lr, #56	; 0x38
   25530:	cmp	r7, #0
   25534:	str	r7, [r0, r8, lsl #2]
   25538:	bne	25544 <__assert_fail@plt+0x13de4>
   2553c:	cmp	r1, #0
   25540:	bne	258e4 <__assert_fail@plt+0x14184>
   25544:	ldrsb	r0, [r7, #52]	; 0x34
   25548:	cmn	r0, #1
   2554c:	ble	2556c <__assert_fail@plt+0x13e0c>
   25550:	sub	lr, fp, #3072	; 0xc00
   25554:	sub	r0, lr, #56	; 0x38
   25558:	sub	lr, fp, #2048	; 0x800
   2555c:	str	r7, [r0, r8, lsl #2]
   25560:	sub	r0, lr, #56	; 0x38
   25564:	str	r7, [r0, r8, lsl #2]
   25568:	b	255fc <__assert_fail@plt+0x13e9c>
   2556c:	ldr	r1, [sp, #148]	; 0x94
   25570:	sub	r0, fp, #56	; 0x38
   25574:	mov	r2, r5
   25578:	mov	r3, #1
   2557c:	bl	20d8c <__assert_fail@plt+0xf62c>
   25580:	sub	lr, fp, #2048	; 0x800
   25584:	cmp	r0, #0
   25588:	sub	r1, lr, #56	; 0x38
   2558c:	str	r0, [r1, r8, lsl #2]
   25590:	bne	255a0 <__assert_fail@plt+0x13e40>
   25594:	ldr	r1, [fp, #-56]	; 0xffffffc8
   25598:	cmp	r1, #0
   2559c:	bne	258e4 <__assert_fail@plt+0x14184>
   255a0:	cmp	r7, r0
   255a4:	beq	255c8 <__assert_fail@plt+0x13e68>
   255a8:	ldr	r0, [sp, #148]	; 0x94
   255ac:	ldr	r1, [sp, #112]	; 0x70
   255b0:	ldr	r0, [r0, #92]	; 0x5c
   255b4:	cmp	r0, #1
   255b8:	mov	r0, #0
   255bc:	movwgt	r0, #1
   255c0:	orr	r1, r1, r0
   255c4:	str	r1, [sp, #112]	; 0x70
   255c8:	ldr	r1, [sp, #148]	; 0x94
   255cc:	sub	r0, fp, #56	; 0x38
   255d0:	mov	r2, r5
   255d4:	mov	r3, #2
   255d8:	bl	20d8c <__assert_fail@plt+0xf62c>
   255dc:	sub	lr, fp, #3072	; 0xc00
   255e0:	cmp	r0, #0
   255e4:	sub	r1, lr, #56	; 0x38
   255e8:	str	r0, [r1, r8, lsl #2]
   255ec:	ldr	r1, [fp, #-56]	; 0xffffffc8
   255f0:	bne	255fc <__assert_fail@plt+0x13e9c>
   255f4:	cmp	r1, #0
   255f8:	bne	258e4 <__assert_fail@plt+0x14184>
   255fc:	ldr	r0, [r4, r8, lsl #5]
   25600:	ldr	r2, [sp, #144]	; 0x90
   25604:	mov	r9, r6
   25608:	orr	r2, r2, r0
   2560c:	add	r0, r4, r8, lsl #5
   25610:	mov	r4, r5
   25614:	add	r8, r8, #1
   25618:	str	r2, [sp, #144]	; 0x90
   2561c:	cmp	r8, r9
   25620:	ldmib	r0, {ip, lr}
   25624:	ldr	r7, [r0, #12]
   25628:	ldr	r3, [r0, #16]
   2562c:	ldr	r5, [r0, #20]
   25630:	ldr	r6, [r0, #24]
   25634:	ldr	r0, [r0, #28]
   25638:	ldr	r2, [sp, #140]	; 0x8c
   2563c:	orr	r2, r2, r0
   25640:	mov	r0, r9
   25644:	str	r2, [sp, #140]	; 0x8c
   25648:	ldr	r2, [sp, #124]	; 0x7c
   2564c:	orr	r2, r2, r6
   25650:	ldr	r6, [sp, #136]	; 0x88
   25654:	orr	r6, r6, r5
   25658:	mov	r5, r4
   2565c:	ldr	r4, [sp, #120]	; 0x78
   25660:	str	r6, [sp, #136]	; 0x88
   25664:	mov	r6, r9
   25668:	orr	r4, r4, r3
   2566c:	ldr	r3, [sp, #132]	; 0x84
   25670:	orr	r3, r3, r7
   25674:	str	r3, [sp, #132]	; 0x84
   25678:	ldr	r3, [sp, #128]	; 0x80
   2567c:	orr	r3, r3, lr
   25680:	str	r3, [sp, #128]	; 0x80
   25684:	ldr	r3, [sp, #116]	; 0x74
   25688:	orr	r3, r3, ip
   2568c:	blt	25484 <__assert_fail@plt+0x13d24>
   25690:	ldr	r7, [sp, #144]	; 0x90
   25694:	ldr	r0, [sp, #128]	; 0x80
   25698:	str	r3, [fp, #-3172]	; 0xfffff39c
   2569c:	ldr	sl, [sp, #112]	; 0x70
   256a0:	str	r7, [fp, #-3176]	; 0xfffff398
   256a4:	str	r0, [fp, #-3168]	; 0xfffff3a0
   256a8:	ldr	r0, [sp, #132]	; 0x84
   256ac:	tst	sl, #1
   256b0:	str	r0, [fp, #-3164]	; 0xfffff3a4
   256b4:	ldr	r0, [sp, #136]	; 0x88
   256b8:	str	r4, [fp, #-3160]	; 0xfffff3a8
   256bc:	str	r0, [fp, #-3156]	; 0xfffff3ac
   256c0:	ldr	r0, [sp, #140]	; 0x8c
   256c4:	str	r2, [fp, #-3152]	; 0xfffff3b0
   256c8:	str	r0, [fp, #-3148]	; 0xfffff3b4
   256cc:	mov	r0, #4
   256d0:	bne	259f8 <__assert_fail@plt+0x14298>
   256d4:	mov	r1, #256	; 0x100
   256d8:	bl	2a858 <__assert_fail@plt+0x190f8>
   256dc:	ldr	r1, [sp, #24]
   256e0:	sub	lr, fp, #3072	; 0xc00
   256e4:	cmp	r0, #0
   256e8:	sub	r8, lr, #104	; 0x68
   256ec:	str	r0, [r1, #44]	; 0x2c
   256f0:	beq	25870 <__assert_fail@plt+0x14110>
   256f4:	mov	r1, #0
   256f8:	mov	r3, r7
   256fc:	mov	r2, #0
   25700:	add	r4, sp, #152	; 0x98
   25704:	cmp	r3, #0
   25708:	beq	257a8 <__assert_fail@plt+0x14048>
   2570c:	ldr	r7, [sp, #148]	; 0x94
   25710:	lsl	r6, r2, #5
   25714:	mov	r5, #1
   25718:	add	r7, r7, r2, lsl #2
   2571c:	add	ip, r7, #96	; 0x60
   25720:	b	25774 <__assert_fail@plt+0x14014>
   25724:	mov	lr, #0
   25728:	str	sl, [sp, #112]	; 0x70
   2572c:	ldr	r7, [r4, lr, lsl #3]
   25730:	add	lr, lr, #4
   25734:	tst	r7, r5
   25738:	beq	2572c <__assert_fail@plt+0x13fcc>
   2573c:	ldr	r7, [ip]
   25740:	mov	sl, r4
   25744:	sub	r4, fp, #1024	; 0x400
   25748:	sub	r4, r4, #56	; 0x38
   2574c:	tst	r7, r5
   25750:	sub	r7, fp, #2048	; 0x800
   25754:	sub	r7, r7, #56	; 0x38
   25758:	moveq	r7, r4
   2575c:	mov	r4, sl
   25760:	ldr	sl, [sp, #112]	; 0x70
   25764:	add	r7, r7, lr
   25768:	ldr	r7, [r7, #-4]
   2576c:	str	r7, [r0, r6, lsl #2]
   25770:	b	2577c <__assert_fail@plt+0x1401c>
   25774:	tst	r3, #1
   25778:	bne	25724 <__assert_fail@plt+0x13fc4>
   2577c:	lsr	r7, r3, #1
   25780:	cmp	r1, r3, lsr #1
   25784:	add	r6, r6, #1
   25788:	lsl	r5, r5, #1
   2578c:	mov	r3, r7
   25790:	bne	25774 <__assert_fail@plt+0x14014>
   25794:	b	257a8 <__assert_fail@plt+0x14048>
   25798:	ldr	r3, [r8, r2, lsl #2]
   2579c:	add	r4, r4, #4
   257a0:	cmp	r3, #0
   257a4:	bne	2570c <__assert_fail@plt+0x13fac>
   257a8:	add	r2, r2, #1
   257ac:	cmp	r2, #8
   257b0:	bne	25798 <__assert_fail@plt+0x14038>
   257b4:	ldr	r7, [sp, #144]	; 0x90
   257b8:	tst	r7, #1024	; 0x400
   257bc:	beq	25800 <__assert_fail@plt+0x140a0>
   257c0:	mov	r1, #0
   257c4:	add	r2, sp, #152	; 0x98
   257c8:	add	r3, r2, r1, lsl #5
   257cc:	ldrb	r3, [r3, #1]
   257d0:	tst	r3, #4
   257d4:	bne	257e8 <__assert_fail@plt+0x14088>
   257d8:	add	r1, r1, #1
   257dc:	cmp	r1, r9
   257e0:	blt	257c8 <__assert_fail@plt+0x14068>
   257e4:	b	25800 <__assert_fail@plt+0x140a0>
   257e8:	sub	lr, fp, #3072	; 0xc00
   257ec:	tst	sl, #1
   257f0:	sub	r2, lr, #56	; 0x38
   257f4:	ldr	r1, [r2, r1, lsl #2]
   257f8:	str	r1, [r0, #40]	; 0x28
   257fc:	strne	r1, [r0, #1064]	; 0x428
   25800:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   25804:	bl	141c4 <__assert_fail@plt+0x2a64>
   25808:	sub	lr, fp, #6144	; 0x1800
   2580c:	sub	r0, lr, #104	; 0x68
   25810:	add	r4, r0, #8
   25814:	ldr	r0, [r4], #12
   25818:	bl	141c4 <__assert_fail@plt+0x2a64>
   2581c:	subs	r9, r9, #1
   25820:	bne	25814 <__assert_fail@plt+0x140b4>
   25824:	mov	r0, #1
   25828:	b	259c4 <__assert_fail@plt+0x14264>
   2582c:	ldr	r1, [sp, #116]	; 0x74
   25830:	str	r0, [fp, #-56]	; 0xffffffc8
   25834:	str	r1, [fp, #-3172]	; 0xfffff39c
   25838:	ldr	r1, [sp, #144]	; 0x90
   2583c:	str	r1, [fp, #-3176]	; 0xfffff398
   25840:	ldr	r1, [sp, #128]	; 0x80
   25844:	str	r1, [fp, #-3168]	; 0xfffff3a0
   25848:	ldr	r1, [sp, #132]	; 0x84
   2584c:	str	r1, [fp, #-3164]	; 0xfffff3a4
   25850:	ldr	r1, [sp, #120]	; 0x78
   25854:	str	r1, [fp, #-3160]	; 0xfffff3a8
   25858:	ldr	r1, [sp, #136]	; 0x88
   2585c:	str	r1, [fp, #-3156]	; 0xfffff3ac
   25860:	ldr	r1, [sp, #124]	; 0x7c
   25864:	str	r1, [fp, #-3152]	; 0xfffff3b0
   25868:	ldr	r1, [sp, #140]	; 0x8c
   2586c:	str	r1, [fp, #-3148]	; 0xfffff3b4
   25870:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   25874:	bl	141c4 <__assert_fail@plt+0x2a64>
   25878:	cmp	r6, #1
   2587c:	blt	2589c <__assert_fail@plt+0x1413c>
   25880:	sub	lr, fp, #6144	; 0x1800
   25884:	sub	r0, lr, #104	; 0x68
   25888:	add	r4, r0, #8
   2588c:	ldr	r0, [r4], #12
   25890:	bl	141c4 <__assert_fail@plt+0x2a64>
   25894:	subs	r6, r6, #1
   25898:	bne	2588c <__assert_fail@plt+0x1412c>
   2589c:	mov	r0, #0
   258a0:	b	259c4 <__assert_fail@plt+0x14264>
   258a4:	ldr	r0, [sp, #52]	; 0x34
   258a8:	str	r6, [fp, #-1072]	; 0xfffffbd0
   258ac:	str	r0, [fp, #-1076]	; 0xfffffbcc
   258b0:	ldr	r0, [sp, #48]	; 0x30
   258b4:	str	r0, [fp, #-1068]	; 0xfffffbd4
   258b8:	ldr	r0, [sp, #44]	; 0x2c
   258bc:	str	r0, [fp, #-1064]	; 0xfffffbd8
   258c0:	ldr	r0, [sp, #40]	; 0x28
   258c4:	str	r0, [fp, #-1060]	; 0xfffffbdc
   258c8:	ldr	r0, [sp, #36]	; 0x24
   258cc:	str	r0, [fp, #-1056]	; 0xfffffbe0
   258d0:	ldr	r0, [sp, #32]
   258d4:	str	r0, [fp, #-1052]	; 0xfffffbe4
   258d8:	ldr	r0, [sp, #56]	; 0x38
   258dc:	str	r0, [fp, #-1080]	; 0xfffffbc8
   258e0:	b	25970 <__assert_fail@plt+0x14210>
   258e4:	ldr	r0, [sp, #116]	; 0x74
   258e8:	str	r0, [fp, #-3172]	; 0xfffff39c
   258ec:	ldr	r0, [sp, #144]	; 0x90
   258f0:	str	r0, [fp, #-3176]	; 0xfffff398
   258f4:	ldr	r0, [sp, #128]	; 0x80
   258f8:	str	r0, [fp, #-3168]	; 0xfffff3a0
   258fc:	ldr	r0, [sp, #132]	; 0x84
   25900:	str	r0, [fp, #-3164]	; 0xfffff3a4
   25904:	ldr	r0, [sp, #120]	; 0x78
   25908:	str	r0, [fp, #-3160]	; 0xfffff3a8
   2590c:	ldr	r0, [sp, #136]	; 0x88
   25910:	str	r0, [fp, #-3156]	; 0xfffff3ac
   25914:	ldr	r0, [sp, #124]	; 0x7c
   25918:	str	r0, [fp, #-3152]	; 0xfffff3b0
   2591c:	ldr	r0, [sp, #140]	; 0x8c
   25920:	str	r0, [fp, #-3148]	; 0xfffff3b4
   25924:	b	25870 <__assert_fail@plt+0x14110>
   25928:	ldr	r0, [sp, #52]	; 0x34
   2592c:	str	r6, [fp, #-1072]	; 0xfffffbd0
   25930:	str	r0, [fp, #-1076]	; 0xfffffbcc
   25934:	ldr	r0, [sp, #48]	; 0x30
   25938:	str	r0, [fp, #-1068]	; 0xfffffbd4
   2593c:	ldr	r0, [sp, #44]	; 0x2c
   25940:	str	r0, [fp, #-1064]	; 0xfffffbd8
   25944:	ldr	r0, [sp, #40]	; 0x28
   25948:	str	r0, [fp, #-1060]	; 0xfffffbdc
   2594c:	ldr	r0, [sp, #36]	; 0x24
   25950:	str	r0, [fp, #-1056]	; 0xfffffbe0
   25954:	ldr	r0, [sp, #32]
   25958:	str	r0, [fp, #-1052]	; 0xfffffbe4
   2595c:	ldr	r0, [sp, #56]	; 0x38
   25960:	str	r0, [fp, #-1080]	; 0xfffffbc8
   25964:	mov	r0, #0
   25968:	str	r0, [r8]
   2596c:	str	r0, [r5]
   25970:	ldr	r8, [sp, #24]
   25974:	ldr	r9, [sp, #144]	; 0x90
   25978:	cmp	r9, #1
   2597c:	blt	2599c <__assert_fail@plt+0x1423c>
   25980:	sub	lr, fp, #6144	; 0x1800
   25984:	sub	r0, lr, #104	; 0x68
   25988:	add	r4, r0, #8
   2598c:	ldr	r0, [r4], #12
   25990:	bl	141c4 <__assert_fail@plt+0x2a64>
   25994:	subs	r9, r9, #1
   25998:	bne	2598c <__assert_fail@plt+0x1422c>
   2599c:	mvn	r6, #0
   259a0:	mov	r0, #0
   259a4:	cmp	r6, #0
   259a8:	bne	259c4 <__assert_fail@plt+0x14264>
   259ac:	mov	r0, #4
   259b0:	mov	r1, #256	; 0x100
   259b4:	bl	2a858 <__assert_fail@plt+0x190f8>
   259b8:	cmp	r0, #0
   259bc:	str	r0, [r8, #44]	; 0x2c
   259c0:	movwne	r0, #1
   259c4:	sub	sp, fp, #48	; 0x30
   259c8:	vpop	{d8-d9}
   259cc:	add	sp, sp, #4
   259d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259d4:	mov	r0, #0
   259d8:	str	r0, [r5]
   259dc:	str	r0, [r4]
   259e0:	cmp	r9, #1
   259e4:	bge	25980 <__assert_fail@plt+0x14220>
   259e8:	b	2599c <__assert_fail@plt+0x1423c>
   259ec:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   259f0:	bl	141c4 <__assert_fail@plt+0x2a64>
   259f4:	b	25880 <__assert_fail@plt+0x14120>
   259f8:	mov	r1, #512	; 0x200
   259fc:	bl	2a858 <__assert_fail@plt+0x190f8>
   25a00:	ldr	r1, [sp, #24]
   25a04:	cmp	r0, #0
   25a08:	str	r0, [r1, #48]	; 0x30
   25a0c:	beq	25870 <__assert_fail@plt+0x14110>
   25a10:	sub	lr, fp, #1024	; 0x400
   25a14:	mov	r3, #0
   25a18:	add	r8, sp, #152	; 0x98
   25a1c:	mov	r5, r7
   25a20:	mov	r6, #0
   25a24:	sub	r1, lr, #56	; 0x38
   25a28:	sub	lr, r1, #4
   25a2c:	sub	r1, fp, #2048	; 0x800
   25a30:	sub	r1, r1, #56	; 0x38
   25a34:	sub	ip, r1, #4
   25a38:	cmp	r5, #0
   25a3c:	beq	25ad0 <__assert_fail@plt+0x14370>
   25a40:	lsl	r4, r6, #5
   25a44:	mov	r1, #1
   25a48:	b	25a94 <__assert_fail@plt+0x14334>
   25a4c:	mov	r2, r8
   25a50:	str	lr, [sp, #148]	; 0x94
   25a54:	mov	sl, lr
   25a58:	mov	lr, ip
   25a5c:	ldr	r7, [r2], #32
   25a60:	add	sl, sl, #4
   25a64:	add	lr, lr, #4
   25a68:	tst	r7, r1
   25a6c:	beq	25a5c <__assert_fail@plt+0x142fc>
   25a70:	ldr	r2, [sl]
   25a74:	mov	r7, r0
   25a78:	str	r2, [r7, r4, lsl #2]!
   25a7c:	ldr	r2, [lr]
   25a80:	ldr	sl, [sp, #112]	; 0x70
   25a84:	ldr	lr, [sp, #148]	; 0x94
   25a88:	str	r2, [r7, #1024]	; 0x400
   25a8c:	ldr	r7, [sp, #144]	; 0x90
   25a90:	b	25a9c <__assert_fail@plt+0x1433c>
   25a94:	tst	r5, #1
   25a98:	bne	25a4c <__assert_fail@plt+0x142ec>
   25a9c:	lsr	r2, r5, #1
   25aa0:	cmp	r3, r5, lsr #1
   25aa4:	add	r4, r4, #1
   25aa8:	lsl	r1, r1, #1
   25aac:	mov	r5, r2
   25ab0:	bne	25a94 <__assert_fail@plt+0x14334>
   25ab4:	b	25ad0 <__assert_fail@plt+0x14370>
   25ab8:	sub	r1, fp, #3072	; 0xc00
   25abc:	add	r8, r8, #4
   25ac0:	sub	r1, r1, #104	; 0x68
   25ac4:	ldr	r5, [r1, r6, lsl #2]
   25ac8:	cmp	r5, #0
   25acc:	bne	25a40 <__assert_fail@plt+0x142e0>
   25ad0:	add	r6, r6, #1
   25ad4:	cmp	r6, #8
   25ad8:	bne	25ab8 <__assert_fail@plt+0x14358>
   25adc:	b	257b8 <__assert_fail@plt+0x14058>
   25ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ae4:	add	fp, sp, #28
   25ae8:	sub	sp, sp, #52	; 0x34
   25aec:	ldr	r4, [r1, #8]
   25af0:	ldr	r8, [r1, #12]
   25af4:	mov	r6, r0
   25af8:	mov	r0, #1
   25afc:	mov	r5, r1
   25b00:	str	r0, [sp, #44]	; 0x2c
   25b04:	str	r0, [sp, #40]	; 0x28
   25b08:	mov	r0, #4
   25b0c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   25b10:	cmp	r0, #0
   25b14:	str	r0, [sp, #48]	; 0x30
   25b18:	beq	25f14 <__assert_fail@plt+0x147b4>
   25b1c:	str	r4, [r0]
   25b20:	add	r3, sp, #40	; 0x28
   25b24:	mov	r0, r6
   25b28:	mov	r1, r5
   25b2c:	mov	r2, r8
   25b30:	str	r6, [sp, #24]
   25b34:	bl	25f30 <__assert_fail@plt+0x147d0>
   25b38:	cmp	r0, #0
   25b3c:	bne	25ecc <__assert_fail@plt+0x1476c>
   25b40:	add	r0, r5, #16
   25b44:	mov	r1, #0
   25b48:	str	r5, [sp, #16]
   25b4c:	str	r0, [sp, #20]
   25b50:	cmp	r8, #1
   25b54:	blt	25ed4 <__assert_fail@plt+0x14774>
   25b58:	ldr	r0, [r5]
   25b5c:	ldr	r7, [sp, #24]
   25b60:	ldr	r2, [r0, r8, lsl #2]
   25b64:	cmp	r2, #0
   25b68:	mov	r2, #0
   25b6c:	addeq	r2, r1, #1
   25b70:	ldr	r1, [r7, #120]	; 0x78
   25b74:	cmp	r2, r1
   25b78:	bgt	25edc <__assert_fail@plt+0x1477c>
   25b7c:	mov	r0, #0
   25b80:	str	r8, [sp, #28]
   25b84:	sub	r8, r8, #1
   25b88:	str	r2, [sp, #12]
   25b8c:	str	r0, [sp, #44]	; 0x2c
   25b90:	ldr	r0, [r7, #100]	; 0x64
   25b94:	ldr	r6, [r0, r8, lsl #2]
   25b98:	cmp	r6, #0
   25b9c:	beq	25eac <__assert_fail@plt+0x1474c>
   25ba0:	ldr	r0, [r6, #20]
   25ba4:	cmp	r0, #1
   25ba8:	blt	25eac <__assert_fail@plt+0x1474c>
   25bac:	ldr	r0, [r7, #84]	; 0x54
   25bb0:	mov	r9, #0
   25bb4:	str	r6, [sp, #32]
   25bb8:	str	r0, [sp, #36]	; 0x24
   25bbc:	b	25c70 <__assert_fail@plt+0x14510>
   25bc0:	cmp	r2, r1
   25bc4:	bne	25bf0 <__assert_fail@plt+0x14490>
   25bc8:	lsl	r0, r2, #1
   25bcc:	lsl	r1, r2, #3
   25bd0:	str	r0, [sp, #40]	; 0x28
   25bd4:	ldr	r0, [sp, #48]	; 0x30
   25bd8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   25bdc:	cmp	r0, #0
   25be0:	beq	25f28 <__assert_fail@plt+0x147c8>
   25be4:	str	r0, [sp, #48]	; 0x30
   25be8:	ldr	r1, [sp, #44]	; 0x2c
   25bec:	b	25bf4 <__assert_fail@plt+0x14494>
   25bf0:	ldr	r0, [sp, #48]	; 0x30
   25bf4:	ldr	r2, [r0]
   25bf8:	cmp	r2, sl
   25bfc:	ble	25c38 <__assert_fail@plt+0x144d8>
   25c00:	cmp	r1, #1
   25c04:	blt	25c68 <__assert_fail@plt+0x14508>
   25c08:	add	r2, r0, r1, lsl #2
   25c0c:	add	r1, r1, #1
   25c10:	mov	r3, r2
   25c14:	ldr	r7, [r3, #-4]!
   25c18:	sub	r1, r1, #1
   25c1c:	cmp	r1, #1
   25c20:	str	r7, [r2]
   25c24:	mov	r2, r3
   25c28:	bgt	25c14 <__assert_fail@plt+0x144b4>
   25c2c:	ldr	r7, [sp, #24]
   25c30:	sub	r1, r1, #1
   25c34:	b	25c68 <__assert_fail@plt+0x14508>
   25c38:	add	r2, r0, r1, lsl #2
   25c3c:	ldr	r3, [r2, #-4]
   25c40:	cmp	r3, sl
   25c44:	ble	25c68 <__assert_fail@plt+0x14508>
   25c48:	sub	r1, r1, #2
   25c4c:	str	r3, [r2]
   25c50:	sub	r1, r1, #1
   25c54:	ldr	r3, [r2, #-8]
   25c58:	sub	r2, r2, #4
   25c5c:	cmp	r3, sl
   25c60:	bgt	25c4c <__assert_fail@plt+0x144ec>
   25c64:	add	r1, r1, #2
   25c68:	str	sl, [r0, r1, lsl #2]
   25c6c:	b	25e68 <__assert_fail@plt+0x14708>
   25c70:	ldr	r0, [r6, #24]
   25c74:	ldr	sl, [r0, r9, lsl #2]
   25c78:	ldr	r0, [sp, #36]	; 0x24
   25c7c:	ldr	r0, [r0]
   25c80:	add	r0, r0, sl, lsl #3
   25c84:	ldrb	r0, [r0, #6]
   25c88:	tst	r0, #16
   25c8c:	bne	25d30 <__assert_fail@plt+0x145d0>
   25c90:	ldr	r0, [sp, #36]	; 0x24
   25c94:	mov	r2, r8
   25c98:	ldr	r0, [r0]
   25c9c:	add	r1, r0, sl, lsl #3
   25ca0:	mov	r0, r7
   25ca4:	bl	247d4 <__assert_fail@plt+0x13074>
   25ca8:	cmp	r0, #0
   25cac:	beq	25e9c <__assert_fail@plt+0x1473c>
   25cb0:	ldr	r0, [r5]
   25cb4:	ldr	r1, [sp, #28]
   25cb8:	ldr	r0, [r0, r1, lsl #2]
   25cbc:	cmp	r0, #0
   25cc0:	beq	25e9c <__assert_fail@plt+0x1473c>
   25cc4:	ldr	r2, [r0, #8]
   25cc8:	cmp	r2, #1
   25ccc:	blt	25e9c <__assert_fail@plt+0x1473c>
   25cd0:	ldr	r1, [sp, #36]	; 0x24
   25cd4:	ldr	r0, [r0, #12]
   25cd8:	subs	r3, r2, #1
   25cdc:	mov	r2, #0
   25ce0:	ldr	r1, [r1, #12]
   25ce4:	ldr	r1, [r1, sl, lsl #2]
   25ce8:	beq	25d10 <__assert_fail@plt+0x145b0>
   25cec:	mov	r5, #1
   25cf0:	add	r7, r2, r3
   25cf4:	lsr	r6, r7, #1
   25cf8:	ldr	r4, [r0, r6, lsl #2]
   25cfc:	cmp	r4, r1
   25d00:	movge	r3, r6
   25d04:	addlt	r2, r5, r7, lsr #1
   25d08:	cmp	r2, r3
   25d0c:	bcc	25cf0 <__assert_fail@plt+0x14590>
   25d10:	ldr	r2, [r0, r2, lsl #2]
   25d14:	ldr	r5, [sp, #16]
   25d18:	ldr	r7, [sp, #24]
   25d1c:	ldr	r6, [sp, #32]
   25d20:	mov	r0, #1
   25d24:	cmp	r2, r1
   25d28:	beq	25e10 <__assert_fail@plt+0x146b0>
   25d2c:	b	25e9c <__assert_fail@plt+0x1473c>
   25d30:	ldr	r4, [r7, #84]	; 0x54
   25d34:	mov	r6, r5
   25d38:	ldr	r5, [r5, #12]
   25d3c:	mov	r1, sl
   25d40:	mov	r2, r7
   25d44:	mov	r3, r8
   25d48:	mov	r0, r4
   25d4c:	bl	244e0 <__assert_fail@plt+0x12d80>
   25d50:	cmp	r0, #1
   25d54:	blt	25d78 <__assert_fail@plt+0x14618>
   25d58:	add	r1, r0, r8
   25d5c:	mov	r3, r8
   25d60:	cmp	r1, r5
   25d64:	ble	25d8c <__assert_fail@plt+0x1462c>
   25d68:	mov	r5, r6
   25d6c:	ldr	r6, [sp, #32]
   25d70:	mov	r8, r3
   25d74:	b	25e10 <__assert_fail@plt+0x146b0>
   25d78:	mov	r5, r6
   25d7c:	ldr	r6, [sp, #32]
   25d80:	cmp	r0, #0
   25d84:	bne	25e10 <__assert_fail@plt+0x146b0>
   25d88:	b	25c90 <__assert_fail@plt+0x14530>
   25d8c:	ldr	r2, [r6]
   25d90:	mov	r5, r6
   25d94:	ldr	r6, [sp, #32]
   25d98:	mov	r8, r3
   25d9c:	ldr	r2, [r2, r1, lsl #2]
   25da0:	cmp	r2, #0
   25da4:	beq	25c90 <__assert_fail@plt+0x14530>
   25da8:	ldr	r3, [r2, #8]
   25dac:	cmp	r3, #1
   25db0:	blt	25c90 <__assert_fail@plt+0x14530>
   25db4:	ldr	r1, [r4, #12]
   25db8:	ldr	r2, [r2, #12]
   25dbc:	subs	r4, r3, #1
   25dc0:	mov	r3, #0
   25dc4:	ldr	ip, [r1, sl, lsl #2]
   25dc8:	beq	25df0 <__assert_fail@plt+0x14690>
   25dcc:	mov	r5, #1
   25dd0:	add	r6, r3, r4
   25dd4:	lsr	r7, r6, #1
   25dd8:	ldr	r1, [r2, r7, lsl #2]
   25ddc:	cmp	r1, ip
   25de0:	movge	r4, r7
   25de4:	addlt	r3, r5, r6, lsr #1
   25de8:	cmp	r3, r4
   25dec:	bcc	25dd0 <__assert_fail@plt+0x14670>
   25df0:	ldr	r5, [sp, #16]
   25df4:	ldr	r7, [sp, #24]
   25df8:	ldr	r6, [sp, #32]
   25dfc:	cmp	r0, #0
   25e00:	beq	25c90 <__assert_fail@plt+0x14530>
   25e04:	ldr	r1, [r2, r3, lsl #2]
   25e08:	cmp	r1, ip
   25e0c:	bne	25c90 <__assert_fail@plt+0x14530>
   25e10:	ldr	r1, [r5, #20]
   25e14:	cmp	r1, #0
   25e18:	beq	25e48 <__assert_fail@plt+0x146e8>
   25e1c:	ldr	r1, [sp, #36]	; 0x24
   25e20:	add	r3, r0, r8
   25e24:	mov	r0, r7
   25e28:	ldr	r1, [r1, #12]
   25e2c:	ldr	r2, [r1, sl, lsl #2]
   25e30:	ldr	r1, [sp, #20]
   25e34:	str	sl, [sp]
   25e38:	str	r8, [sp, #4]
   25e3c:	bl	27048 <__assert_fail@plt+0x158e8>
   25e40:	cmp	r0, #0
   25e44:	bne	25e9c <__assert_fail@plt+0x1473c>
   25e48:	ldr	r2, [sp, #40]	; 0x28
   25e4c:	cmp	r2, #0
   25e50:	beq	25e78 <__assert_fail@plt+0x14718>
   25e54:	ldr	r1, [sp, #44]	; 0x2c
   25e58:	cmp	r1, #0
   25e5c:	bne	25bc0 <__assert_fail@plt+0x14460>
   25e60:	ldr	r0, [sp, #48]	; 0x30
   25e64:	str	sl, [r0]
   25e68:	ldr	r0, [sp, #44]	; 0x2c
   25e6c:	add	r0, r0, #1
   25e70:	str	r0, [sp, #44]	; 0x2c
   25e74:	b	25e9c <__assert_fail@plt+0x1473c>
   25e78:	mov	r0, #1
   25e7c:	str	r0, [sp, #44]	; 0x2c
   25e80:	str	r0, [sp, #40]	; 0x28
   25e84:	mov	r0, #4
   25e88:	bl	2a8ac <__assert_fail@plt+0x1914c>
   25e8c:	cmp	r0, #0
   25e90:	str	r0, [sp, #48]	; 0x30
   25e94:	beq	25f00 <__assert_fail@plt+0x147a0>
   25e98:	str	sl, [r0]
   25e9c:	ldr	r0, [r6, #20]
   25ea0:	add	r9, r9, #1
   25ea4:	cmp	r9, r0
   25ea8:	blt	25c70 <__assert_fail@plt+0x14510>
   25eac:	mov	r0, r7
   25eb0:	mov	r1, r5
   25eb4:	mov	r2, r8
   25eb8:	add	r3, sp, #40	; 0x28
   25ebc:	bl	25f30 <__assert_fail@plt+0x147d0>
   25ec0:	ldr	r1, [sp, #12]
   25ec4:	cmp	r0, #0
   25ec8:	beq	25b50 <__assert_fail@plt+0x143f0>
   25ecc:	mov	r7, r0
   25ed0:	b	25eec <__assert_fail@plt+0x1478c>
   25ed4:	mov	r7, #0
   25ed8:	b	25eec <__assert_fail@plt+0x1478c>
   25edc:	lsl	r2, r8, #2
   25ee0:	mov	r1, #0
   25ee4:	mov	r7, #0
   25ee8:	bl	11670 <memset@plt>
   25eec:	ldr	r0, [sp, #48]	; 0x30
   25ef0:	bl	141c4 <__assert_fail@plt+0x2a64>
   25ef4:	mov	r0, r7
   25ef8:	sub	sp, fp, #28
   25efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f00:	mov	r0, #0
   25f04:	mov	r7, #12
   25f08:	str	r0, [sp, #40]	; 0x28
   25f0c:	str	r0, [sp, #44]	; 0x2c
   25f10:	b	25eec <__assert_fail@plt+0x1478c>
   25f14:	mov	r0, #0
   25f18:	mov	r7, #12
   25f1c:	str	r0, [sp, #40]	; 0x28
   25f20:	str	r0, [sp, #44]	; 0x2c
   25f24:	b	25ef4 <__assert_fail@plt+0x14794>
   25f28:	mov	r7, #12
   25f2c:	b	25eec <__assert_fail@plt+0x1478c>
   25f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f34:	add	fp, sp, #28
   25f38:	sub	sp, sp, #132	; 0x84
   25f3c:	mov	r9, r0
   25f40:	ldr	r8, [r0, #84]	; 0x54
   25f44:	mov	r0, #0
   25f48:	mov	sl, r1
   25f4c:	mov	r5, r2
   25f50:	str	r0, [fp, #-76]	; 0xffffffb4
   25f54:	str	r5, [sp, #68]	; 0x44
   25f58:	ldr	r1, [r9, #100]	; 0x64
   25f5c:	ldr	r2, [r1, r2, lsl #2]
   25f60:	cmp	r2, #0
   25f64:	mov	r1, r2
   25f68:	addne	r1, r1, #4
   25f6c:	str	r1, [sp, #80]	; 0x50
   25f70:	ldr	r1, [r3, #4]
   25f74:	cmp	r1, #0
   25f78:	beq	26380 <__assert_fail@plt+0x14c20>
   25f7c:	mov	lr, r3
   25f80:	cmp	r2, #0
   25f84:	str	r2, [sp, #48]	; 0x30
   25f88:	beq	2634c <__assert_fail@plt+0x14bec>
   25f8c:	mov	r0, #0
   25f90:	mov	r1, r8
   25f94:	mov	r2, lr
   25f98:	str	r8, [sp, #76]	; 0x4c
   25f9c:	str	lr, [sp, #56]	; 0x38
   25fa0:	str	r0, [fp, #-72]	; 0xffffffb8
   25fa4:	sub	r0, fp, #72	; 0x48
   25fa8:	bl	24250 <__assert_fail@plt+0x12af0>
   25fac:	ldr	r8, [fp, #-72]	; 0xffffffb8
   25fb0:	cmp	r8, #0
   25fb4:	bne	26a54 <__assert_fail@plt+0x152f4>
   25fb8:	mov	r5, r0
   25fbc:	mov	r4, r0
   25fc0:	ldr	r2, [sp, #56]	; 0x38
   25fc4:	ldr	r0, [r5, #28]!
   25fc8:	cmp	r0, #0
   25fcc:	bne	26060 <__assert_fail@plt+0x14900>
   25fd0:	ldr	r0, [r2, #4]
   25fd4:	mov	r6, #0
   25fd8:	mov	r7, r2
   25fdc:	str	r0, [r4, #28]
   25fe0:	lsl	r0, r0, #2
   25fe4:	str	r6, [r4, #32]
   25fe8:	bl	2a8ac <__assert_fail@plt+0x1914c>
   25fec:	cmp	r0, #0
   25ff0:	mov	r8, #12
   25ff4:	str	r0, [r4, #36]	; 0x24
   25ff8:	movweq	r6, #12
   25ffc:	str	r6, [fp, #-72]	; 0xffffffb8
   26000:	beq	26a54 <__assert_fail@plt+0x152f4>
   26004:	ldr	r0, [r7, #4]
   26008:	mov	r2, r7
   2600c:	cmp	r0, #1
   26010:	blt	26060 <__assert_fail@plt+0x14900>
   26014:	mov	r4, #0
   26018:	ldr	r0, [r2, #8]
   2601c:	ldr	r1, [sp, #76]	; 0x4c
   26020:	mov	r6, r2
   26024:	ldr	r0, [r0, r4, lsl #2]
   26028:	ldr	r1, [r1, #28]
   2602c:	add	r0, r0, r0, lsl #1
   26030:	add	r1, r1, r0, lsl #2
   26034:	mov	r0, r5
   26038:	bl	20ac0 <__assert_fail@plt+0xf360>
   2603c:	cmp	r0, #0
   26040:	bne	26a50 <__assert_fail@plt+0x152f0>
   26044:	ldr	r0, [r6, #4]
   26048:	add	r4, r4, #1
   2604c:	mov	r2, r6
   26050:	cmp	r4, r0
   26054:	blt	26018 <__assert_fail@plt+0x148b8>
   26058:	mov	r0, #0
   2605c:	str	r0, [fp, #-72]	; 0xffffffb8
   26060:	ldr	r1, [sp, #80]	; 0x50
   26064:	mov	r0, r2
   26068:	mov	r2, r5
   2606c:	bl	26ab4 <__assert_fail@plt+0x15354>
   26070:	cmp	r0, #0
   26074:	str	r0, [fp, #-76]	; 0xffffffb4
   26078:	bne	26a88 <__assert_fail@plt+0x15328>
   2607c:	ldr	r0, [sl, #20]
   26080:	ldr	r5, [sp, #68]	; 0x44
   26084:	ldr	lr, [sp, #56]	; 0x38
   26088:	ldr	r8, [sp, #76]	; 0x4c
   2608c:	cmp	r0, #0
   26090:	beq	2634c <__assert_fail@plt+0x14bec>
   26094:	ldr	r3, [sp, #80]	; 0x50
   26098:	cmp	r0, #1
   2609c:	str	r9, [sp, #52]	; 0x34
   260a0:	blt	26340 <__assert_fail@plt+0x14be0>
   260a4:	ldr	r0, [sp, #52]	; 0x34
   260a8:	mov	r1, #0
   260ac:	str	sl, [sp, #60]	; 0x3c
   260b0:	ldr	r0, [r0, #116]	; 0x74
   260b4:	str	r0, [sp, #64]	; 0x40
   260b8:	ldr	r0, [sl, #24]
   260bc:	str	r1, [sp, #72]	; 0x48
   260c0:	ldr	r0, [r0, r1, lsl #2]
   260c4:	ldr	r1, [sp, #64]	; 0x40
   260c8:	add	r0, r0, r0, lsl #1
   260cc:	add	r1, r1, r0, lsl #3
   260d0:	ldr	r2, [r1, #8]
   260d4:	cmp	r2, r5
   260d8:	bge	26328 <__assert_fail@plt+0x14bc8>
   260dc:	ldr	r1, [r1, #4]
   260e0:	cmp	r1, r5
   260e4:	blt	26328 <__assert_fail@plt+0x14bc8>
   260e8:	ldr	r1, [sp, #64]	; 0x40
   260ec:	ldr	r2, [r8]
   260f0:	ldr	r0, [r1, r0, lsl #3]!
   260f4:	ldr	r1, [r1, #12]
   260f8:	ldr	sl, [r2, r0, lsl #3]
   260fc:	ldr	r0, [lr, #4]
   26100:	cmp	r1, r5
   26104:	bne	262b0 <__assert_fail@plt+0x14b50>
   26108:	cmp	r0, #1
   2610c:	blt	26328 <__assert_fail@plt+0x14bc8>
   26110:	ldr	r3, [lr, #8]
   26114:	mvn	r9, #0
   26118:	mvn	r1, #0
   2611c:	ldr	r6, [r3]
   26120:	add	r7, r2, r6, lsl #3
   26124:	ldrb	r7, [r7, #4]
   26128:	cmp	r7, #9
   2612c:	beq	26148 <__assert_fail@plt+0x149e8>
   26130:	cmp	r7, #8
   26134:	bne	26154 <__assert_fail@plt+0x149f4>
   26138:	ldr	r7, [r2, r6, lsl #3]
   2613c:	cmp	sl, r7
   26140:	moveq	r1, r6
   26144:	b	26154 <__assert_fail@plt+0x149f4>
   26148:	ldr	r7, [r2, r6, lsl #3]
   2614c:	cmp	sl, r7
   26150:	moveq	r9, r6
   26154:	add	r3, r3, #4
   26158:	subs	r0, r0, #1
   2615c:	bne	2611c <__assert_fail@plt+0x149bc>
   26160:	cmp	r1, #0
   26164:	blt	26184 <__assert_fail@plt+0x14a24>
   26168:	ldr	r0, [sp, #76]	; 0x4c
   2616c:	ldr	r3, [sp, #80]	; 0x50
   26170:	mov	r2, lr
   26174:	bl	26cd0 <__assert_fail@plt+0x15570>
   26178:	ldr	lr, [sp, #56]	; 0x38
   2617c:	cmp	r0, #0
   26180:	bne	26a3c <__assert_fail@plt+0x152dc>
   26184:	cmp	r9, #0
   26188:	ldr	r3, [sp, #80]	; 0x50
   2618c:	ldr	r8, [sp, #76]	; 0x4c
   26190:	ldrge	ip, [lr, #4]
   26194:	cmpge	ip, #1
   26198:	blt	26328 <__assert_fail@plt+0x14bc8>
   2619c:	mov	sl, #0
   261a0:	ldr	r0, [lr, #8]
   261a4:	ldr	r1, [r0, sl, lsl #2]
   261a8:	ldr	r0, [r8, #28]
   261ac:	add	lr, r1, r1, lsl #1
   261b0:	add	r2, r0, lr, lsl #2
   261b4:	ldr	r0, [r2, #4]
   261b8:	cmp	r0, #1
   261bc:	blt	26218 <__assert_fail@plt+0x14ab8>
   261c0:	ldr	r4, [r2, #8]
   261c4:	mov	r3, ip
   261c8:	mov	r7, #0
   261cc:	subs	r0, r0, #1
   261d0:	beq	261f8 <__assert_fail@plt+0x14a98>
   261d4:	add	r6, r7, r0
   261d8:	mov	ip, #1
   261dc:	lsr	r5, r6, #1
   261e0:	ldr	r2, [r4, r5, lsl #2]
   261e4:	cmp	r2, r9
   261e8:	movge	r0, r5
   261ec:	addlt	r7, ip, r6, lsr #1
   261f0:	cmp	r7, r0
   261f4:	bcc	261d4 <__assert_fail@plt+0x14a74>
   261f8:	ldr	r0, [r4, r7, lsl #2]
   261fc:	mov	ip, r3
   26200:	ldr	r5, [sp, #68]	; 0x44
   26204:	ldr	r3, [sp, #80]	; 0x50
   26208:	cmp	r0, r9
   2620c:	bne	26218 <__assert_fail@plt+0x14ab8>
   26210:	ldr	lr, [sp, #56]	; 0x38
   26214:	b	262a0 <__assert_fail@plt+0x14b40>
   26218:	ldr	r0, [r8, #24]
   2621c:	add	r2, r0, lr, lsl #2
   26220:	ldr	lr, [sp, #56]	; 0x38
   26224:	ldr	r0, [r2, #4]
   26228:	cmp	r0, #1
   2622c:	blt	26274 <__assert_fail@plt+0x14b14>
   26230:	ldr	r2, [r2, #8]
   26234:	mov	r4, #0
   26238:	subs	r0, r0, #1
   2623c:	beq	26264 <__assert_fail@plt+0x14b04>
   26240:	add	r7, r4, r0
   26244:	lsr	r6, r7, #1
   26248:	ldr	r5, [r2, r6, lsl #2]
   2624c:	cmp	r5, r9
   26250:	movge	r0, r6
   26254:	mov	r6, #1
   26258:	addlt	r4, r6, r7, lsr #1
   2625c:	cmp	r4, r0
   26260:	bcc	26240 <__assert_fail@plt+0x14ae0>
   26264:	ldr	r0, [r2, r4, lsl #2]
   26268:	ldr	r5, [sp, #68]	; 0x44
   2626c:	cmp	r0, r9
   26270:	beq	262a0 <__assert_fail@plt+0x14b40>
   26274:	mov	r0, r8
   26278:	mov	r2, lr
   2627c:	mov	r4, lr
   26280:	bl	26cd0 <__assert_fail@plt+0x15570>
   26284:	cmp	r0, #0
   26288:	bne	26a3c <__assert_fail@plt+0x152dc>
   2628c:	ldr	ip, [r4, #4]
   26290:	ldr	r3, [sp, #80]	; 0x50
   26294:	ldr	r8, [sp, #76]	; 0x4c
   26298:	sub	sl, sl, #1
   2629c:	mov	lr, r4
   262a0:	add	sl, sl, #1
   262a4:	cmp	sl, ip
   262a8:	blt	261a0 <__assert_fail@plt+0x14a40>
   262ac:	b	26328 <__assert_fail@plt+0x14bc8>
   262b0:	cmp	r0, #1
   262b4:	blt	26328 <__assert_fail@plt+0x14bc8>
   262b8:	mov	r4, #0
   262bc:	b	262c4 <__assert_fail@plt+0x14b64>
   262c0:	ldr	r2, [r8]
   262c4:	ldr	r1, [lr, #8]
   262c8:	ldr	r1, [r1, r4, lsl #2]
   262cc:	add	r7, r2, r1, lsl #3
   262d0:	ldr	r7, [r7, #4]
   262d4:	and	r7, r7, #254	; 0xfe
   262d8:	orr	r7, r7, #1
   262dc:	cmp	r7, #9
   262e0:	ldreq	r2, [r2, r1, lsl #3]
   262e4:	cmpeq	sl, r2
   262e8:	beq	262fc <__assert_fail@plt+0x14b9c>
   262ec:	add	r4, r4, #1
   262f0:	cmp	r4, r0
   262f4:	blt	262c0 <__assert_fail@plt+0x14b60>
   262f8:	b	26328 <__assert_fail@plt+0x14bc8>
   262fc:	mov	r0, r8
   26300:	mov	r2, lr
   26304:	mov	r6, lr
   26308:	bl	26cd0 <__assert_fail@plt+0x15570>
   2630c:	cmp	r0, #0
   26310:	bne	26a3c <__assert_fail@plt+0x152dc>
   26314:	ldr	r0, [r6, #4]
   26318:	ldr	r3, [sp, #80]	; 0x50
   2631c:	ldr	r8, [sp, #76]	; 0x4c
   26320:	mov	lr, r6
   26324:	b	262ec <__assert_fail@plt+0x14b8c>
   26328:	ldr	sl, [sp, #60]	; 0x3c
   2632c:	ldr	r1, [sp, #72]	; 0x48
   26330:	ldr	r0, [sl, #20]
   26334:	add	r1, r1, #1
   26338:	cmp	r1, r0
   2633c:	blt	260b8 <__assert_fail@plt+0x14958>
   26340:	ldr	r9, [sp, #52]	; 0x34
   26344:	mov	r0, #0
   26348:	str	r0, [fp, #-76]	; 0xffffffb4
   2634c:	sub	r0, fp, #76	; 0x4c
   26350:	mov	r1, r8
   26354:	mov	r2, lr
   26358:	bl	24250 <__assert_fail@plt+0x12af0>
   2635c:	ldr	r1, [sl]
   26360:	ldr	r2, [sp, #48]	; 0x30
   26364:	str	r0, [r1, r5, lsl #2]
   26368:	ldr	r8, [fp, #-76]	; 0xffffffb4
   2636c:	cmp	r8, #0
   26370:	bne	26a30 <__assert_fail@plt+0x152d0>
   26374:	cmp	r2, #0
   26378:	bne	26390 <__assert_fail@plt+0x14c30>
   2637c:	b	26a2c <__assert_fail@plt+0x152cc>
   26380:	ldr	r1, [sl]
   26384:	str	r0, [r1, r5, lsl #2]
   26388:	cmp	r2, #0
   2638c:	beq	26a2c <__assert_fail@plt+0x152cc>
   26390:	ldr	r0, [r9, #100]	; 0x64
   26394:	ldr	r0, [r0, r5, lsl #2]
   26398:	ldrb	r0, [r0, #52]	; 0x34
   2639c:	tst	r0, #64	; 0x40
   263a0:	beq	26a2c <__assert_fail@plt+0x152cc>
   263a4:	ldr	r0, [r9, #84]	; 0x54
   263a8:	str	r0, [sp, #56]	; 0x38
   263ac:	ldr	r0, [r9, #108]	; 0x6c
   263b0:	cmp	r0, #1
   263b4:	blt	26a14 <__assert_fail@plt+0x152b4>
   263b8:	ldr	r1, [r9, #116]	; 0x74
   263bc:	ldr	r8, [sp, #80]	; 0x50
   263c0:	mov	lr, #0
   263c4:	mov	r2, #1
   263c8:	mov	r3, r0
   263cc:	add	r7, r3, lr
   263d0:	add	r7, r7, r7, lsr #31
   263d4:	asr	r6, r7, #1
   263d8:	add	r4, r6, r6, lsl #1
   263dc:	add	r4, r1, r4, lsl #3
   263e0:	ldr	r4, [r4, #4]
   263e4:	cmp	r4, r5
   263e8:	addlt	lr, r2, r7, asr #1
   263ec:	movge	r3, r6
   263f0:	cmp	lr, r3
   263f4:	blt	263cc <__assert_fail@plt+0x14c6c>
   263f8:	cmp	lr, r0
   263fc:	bge	26a24 <__assert_fail@plt+0x152c4>
   26400:	cmn	lr, #1
   26404:	beq	26a24 <__assert_fail@plt+0x152c4>
   26408:	ldr	r0, [r9, #116]	; 0x74
   2640c:	add	r1, lr, lr, lsl #1
   26410:	str	r1, [sp, #28]
   26414:	add	r0, r0, r1, lsl #3
   26418:	ldr	r0, [r0, #4]
   2641c:	cmp	r0, r5
   26420:	bne	26a24 <__assert_fail@plt+0x152c4>
   26424:	mov	r1, #0
   26428:	ldr	r7, [sp, #56]	; 0x38
   2642c:	str	r1, [fp, #-72]	; 0xffffffb8
   26430:	ldr	r0, [r8, #4]
   26434:	cmp	r0, #0
   26438:	ble	26a48 <__assert_fail@plt+0x152e8>
   2643c:	sub	r0, fp, #72	; 0x48
   26440:	mov	r2, #0
   26444:	str	sl, [sp, #60]	; 0x3c
   26448:	str	r9, [sp, #52]	; 0x34
   2644c:	str	lr, [sp, #48]	; 0x30
   26450:	add	r0, r0, #16
   26454:	str	r0, [sp, #12]
   26458:	add	r0, sl, #16
   2645c:	str	r0, [sp, #36]	; 0x24
   26460:	mov	r0, #0
   26464:	str	r0, [sp, #64]	; 0x40
   26468:	ldr	r0, [r8, #8]
   2646c:	ldr	r1, [sl, #8]
   26470:	str	r4, [sp, #76]	; 0x4c
   26474:	str	r2, [sp, #44]	; 0x2c
   26478:	ldr	r3, [r0, r2, lsl #2]
   2647c:	ldr	r0, [r7]
   26480:	add	r0, r0, r3, lsl #3
   26484:	cmp	r3, r1
   26488:	str	r3, [sp, #72]	; 0x48
   2648c:	ldrb	r0, [r0, #4]
   26490:	bne	264ac <__assert_fail@plt+0x14d4c>
   26494:	cmp	r0, #4
   26498:	bne	269f0 <__assert_fail@plt+0x15290>
   2649c:	ldr	r0, [sl, #12]
   264a0:	cmp	r0, r5
   264a4:	bne	264b4 <__assert_fail@plt+0x14d54>
   264a8:	b	269f0 <__assert_fail@plt+0x15290>
   264ac:	cmp	r0, #4
   264b0:	bne	269f0 <__assert_fail@plt+0x15290>
   264b4:	ldr	r0, [r9, #116]	; 0x74
   264b8:	ldr	r1, [sp, #28]
   264bc:	ldr	r4, [sp, #72]	; 0x48
   264c0:	mov	r9, lr
   264c4:	add	r6, r0, r1, lsl #3
   264c8:	b	26900 <__assert_fail@plt+0x151a0>
   264cc:	ldr	r5, [sp, #68]	; 0x44
   264d0:	ldr	r7, [sp, #56]	; 0x38
   264d4:	ldr	r4, [sp, #72]	; 0x48
   264d8:	mov	r0, r6
   264dc:	b	269dc <__assert_fail@plt+0x1527c>
   264e0:	ldr	r0, [sp, #64]	; 0x40
   264e4:	cmp	r0, #0
   264e8:	beq	2652c <__assert_fail@plt+0x14dcc>
   264ec:	ldr	r0, [sp, #20]
   264f0:	str	r5, [fp, #-60]	; 0xffffffc4
   264f4:	str	r4, [fp, #-64]	; 0xffffffc0
   264f8:	cmp	r0, #0
   264fc:	beq	26630 <__assert_fail@plt+0x14ed0>
   26500:	ldr	r6, [sp, #40]	; 0x28
   26504:	cmp	r6, #0
   26508:	bne	268e8 <__assert_fail@plt+0x15188>
   2650c:	ldr	r4, [sp, #76]	; 0x4c
   26510:	mov	r0, #1
   26514:	mov	r1, #1
   26518:	str	r0, [sp, #40]	; 0x28
   2651c:	str	r9, [r4]
   26520:	str	r1, [fp, #-52]	; 0xffffffcc
   26524:	str	r4, [sp, #24]
   26528:	b	266bc <__assert_fail@plt+0x14f5c>
   2652c:	add	r0, sl, #12
   26530:	mov	r3, #20
   26534:	sub	r2, fp, #72	; 0x48
   26538:	vld1.32	{d16-d17}, [r0]
   2653c:	mov	r0, sl
   26540:	add	r1, r2, #12
   26544:	vld1.32	{d18-d19}, [r0], r3
   26548:	vst1.32	{d16-d17}, [r1]
   2654c:	mov	r1, r2
   26550:	vst1.64	{d18-d19}, [r1], r3
   26554:	ldr	r6, [r0]
   26558:	mov	r0, #0
   2655c:	cmp	r6, #1
   26560:	str	r6, [r1]
   26564:	blt	26618 <__assert_fail@plt+0x14eb8>
   26568:	lsl	r0, r6, #2
   2656c:	str	r6, [fp, #-56]	; 0xffffffc8
   26570:	bl	2a8ac <__assert_fail@plt+0x1914c>
   26574:	cmp	r0, #0
   26578:	str	r0, [fp, #-48]	; 0xffffffd0
   2657c:	beq	26a98 <__assert_fail@plt+0x15338>
   26580:	mov	r8, r0
   26584:	ldr	r0, [sl, #20]
   26588:	ldr	r1, [sl, #24]
   2658c:	lsl	r2, r0, #2
   26590:	mov	r0, r8
   26594:	bl	11484 <memcpy@plt>
   26598:	str	r4, [fp, #-64]	; 0xffffffc0
   2659c:	str	r5, [fp, #-60]	; 0xffffffc4
   265a0:	mov	r4, r8
   265a4:	lsl	r0, r6, #1
   265a8:	lsl	r1, r6, #3
   265ac:	str	r0, [sp, #20]
   265b0:	str	r0, [fp, #-56]	; 0xffffffc8
   265b4:	mov	r0, r8
   265b8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   265bc:	cmp	r0, #0
   265c0:	beq	26aac <__assert_fail@plt+0x1534c>
   265c4:	mov	r4, r0
   265c8:	mov	r8, r0
   265cc:	str	r0, [fp, #-48]	; 0xffffffd0
   265d0:	str	r0, [sp, #16]
   265d4:	ldr	r0, [r4]
   265d8:	cmp	r0, r9
   265dc:	ble	26674 <__assert_fail@plt+0x14f14>
   265e0:	cmp	r6, #1
   265e4:	mov	r2, r6
   265e8:	blt	266a8 <__assert_fail@plt+0x14f48>
   265ec:	add	r1, r4, r6, lsl #2
   265f0:	add	r0, r6, #1
   265f4:	mov	r2, r1
   265f8:	ldr	r3, [r2, #-4]!
   265fc:	sub	r0, r0, #1
   26600:	cmp	r0, #1
   26604:	str	r3, [r1]
   26608:	mov	r1, r2
   2660c:	bgt	265f8 <__assert_fail@plt+0x14e98>
   26610:	sub	r2, r0, #1
   26614:	b	266a8 <__assert_fail@plt+0x14f48>
   26618:	ldr	r1, [sp, #12]
   2661c:	str	r0, [r1]
   26620:	str	r0, [r1, #4]
   26624:	str	r0, [r1, #8]
   26628:	str	r5, [fp, #-60]	; 0xffffffc4
   2662c:	str	r4, [fp, #-64]	; 0xffffffc0
   26630:	mov	r0, #1
   26634:	str	r0, [fp, #-52]	; 0xffffffcc
   26638:	str	r0, [fp, #-56]	; 0xffffffc8
   2663c:	mov	r0, #4
   26640:	bl	2a8ac <__assert_fail@plt+0x1914c>
   26644:	cmp	r0, #0
   26648:	str	r0, [fp, #-48]	; 0xffffffd0
   2664c:	beq	26a98 <__assert_fail@plt+0x15338>
   26650:	mov	r4, r0
   26654:	str	r9, [r0]
   26658:	mov	r0, #1
   2665c:	str	r0, [sp, #40]	; 0x28
   26660:	mov	r0, #1
   26664:	str	r4, [sp, #16]
   26668:	str	r4, [sp, #24]
   2666c:	str	r0, [sp, #20]
   26670:	b	266bc <__assert_fail@plt+0x14f5c>
   26674:	add	r0, r4, r6, lsl #2
   26678:	mov	r2, r6
   2667c:	ldr	r1, [r0, #-4]
   26680:	cmp	r1, r9
   26684:	ble	266a8 <__assert_fail@plt+0x14f48>
   26688:	sub	r2, r6, #2
   2668c:	str	r1, [r0]
   26690:	sub	r2, r2, #1
   26694:	ldr	r1, [r0, #-8]
   26698:	sub	r0, r0, #4
   2669c:	cmp	r1, r9
   266a0:	bgt	2668c <__assert_fail@plt+0x14f2c>
   266a4:	add	r2, r2, #2
   266a8:	add	r6, r6, #1
   266ac:	str	r9, [r4, r2, lsl #2]
   266b0:	str	r8, [sp, #24]
   266b4:	str	r6, [sp, #40]	; 0x28
   266b8:	str	r6, [fp, #-52]	; 0xffffffcc
   266bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   266c0:	sub	r1, fp, #72	; 0x48
   266c4:	str	r0, [sp, #64]	; 0x40
   266c8:	ldr	r0, [r0, r5, lsl #2]
   266cc:	str	r0, [sp, #32]
   266d0:	ldr	r0, [sp, #52]	; 0x34
   266d4:	bl	25ae0 <__assert_fail@plt+0x14380>
   266d8:	cmp	r0, #0
   266dc:	bne	26a90 <__assert_fail@plt+0x15330>
   266e0:	ldr	r6, [sl, #4]
   266e4:	str	r4, [sp, #76]	; 0x4c
   266e8:	ldr	lr, [sp, #48]	; 0x30
   266ec:	ldr	r4, [sp, #72]	; 0x48
   266f0:	ldr	r2, [sp, #64]	; 0x40
   266f4:	cmp	r6, #0
   266f8:	beq	26790 <__assert_fail@plt+0x15030>
   266fc:	cmp	r5, #0
   26700:	blt	2678c <__assert_fail@plt+0x1502c>
   26704:	mov	r0, #0
   26708:	mov	sl, r0
   2670c:	ldr	r0, [r2, r0, lsl #2]
   26710:	ldr	r1, [r6, sl, lsl #2]
   26714:	cmp	r1, #0
   26718:	beq	2677c <__assert_fail@plt+0x1501c>
   2671c:	cmp	r0, #0
   26720:	beq	26780 <__assert_fail@plt+0x15020>
   26724:	sub	r4, fp, #44	; 0x2c
   26728:	add	r2, r0, #4
   2672c:	add	r1, r1, #4
   26730:	mov	r0, r4
   26734:	bl	22c64 <__assert_fail@plt+0x11504>
   26738:	cmp	r0, #0
   2673c:	str	r0, [fp, #-32]	; 0xffffffe0
   26740:	bne	26a5c <__assert_fail@plt+0x152fc>
   26744:	sub	r0, fp, #32
   26748:	mov	r1, r7
   2674c:	mov	r2, r4
   26750:	bl	24250 <__assert_fail@plt+0x12af0>
   26754:	str	r0, [r6, sl, lsl #2]
   26758:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2675c:	bl	141c4 <__assert_fail@plt+0x2a64>
   26760:	ldr	r8, [fp, #-32]	; 0xffffffe0
   26764:	ldr	lr, [sp, #48]	; 0x30
   26768:	ldr	r4, [sp, #72]	; 0x48
   2676c:	ldr	r2, [sp, #64]	; 0x40
   26770:	cmp	r8, #0
   26774:	beq	26780 <__assert_fail@plt+0x15020>
   26778:	b	26a60 <__assert_fail@plt+0x15300>
   2677c:	str	r0, [r6, sl, lsl #2]
   26780:	add	r0, sl, #1
   26784:	cmp	sl, r5
   26788:	blt	26708 <__assert_fail@plt+0x14fa8>
   2678c:	ldr	sl, [sp, #60]	; 0x3c
   26790:	ldr	r0, [sp, #32]
   26794:	str	r0, [r2, r5, lsl #2]
   26798:	ldr	r0, [sp, #40]	; 0x28
   2679c:	cmp	r0, #1
   267a0:	blt	267e8 <__assert_fail@plt+0x15088>
   267a4:	ldr	r8, [sp, #80]	; 0x50
   267a8:	subs	r0, r0, #1
   267ac:	mov	r4, #1
   267b0:	mov	r1, #0
   267b4:	beq	267f0 <__assert_fail@plt+0x15090>
   267b8:	mov	r2, r0
   267bc:	ldr	r6, [sp, #76]	; 0x4c
   267c0:	add	r3, r1, r2
   267c4:	lsr	r7, r3, #1
   267c8:	ldr	r6, [r6, r7, lsl #2]
   267cc:	cmp	r6, r9
   267d0:	ldr	r6, [sp, #76]	; 0x4c
   267d4:	movge	r2, r7
   267d8:	addlt	r1, r4, r3, lsr #1
   267dc:	cmp	r1, r2
   267e0:	bcc	267bc <__assert_fail@plt+0x1505c>
   267e4:	b	267f4 <__assert_fail@plt+0x15094>
   267e8:	ldr	r8, [sp, #80]	; 0x50
   267ec:	b	268d4 <__assert_fail@plt+0x15174>
   267f0:	ldr	r6, [sp, #76]	; 0x4c
   267f4:	ldr	r2, [r6, r1, lsl #2]
   267f8:	cmp	r2, r9
   267fc:	mov	r2, r1
   26800:	mvnne	r2, #0
   26804:	cmp	r2, #0
   26808:	blt	26848 <__assert_fail@plt+0x150e8>
   2680c:	ldr	r3, [sp, #40]	; 0x28
   26810:	ldr	r7, [sp, #56]	; 0x38
   26814:	ldr	r4, [sp, #72]	; 0x48
   26818:	cmp	r3, r2
   2681c:	ble	2685c <__assert_fail@plt+0x150fc>
   26820:	cmp	r0, r2
   26824:	str	r0, [fp, #-52]	; 0xffffffcc
   26828:	ble	26868 <__assert_fail@plt+0x15108>
   2682c:	ldr	r3, [sp, #40]	; 0x28
   26830:	mvn	r2, r1
   26834:	add	r3, r3, r2
   26838:	cmp	r3, #4
   2683c:	bcs	26874 <__assert_fail@plt+0x15114>
   26840:	mov	r2, r1
   26844:	b	268b4 <__assert_fail@plt+0x15154>
   26848:	ldr	r0, [sp, #16]
   2684c:	ldr	r7, [sp, #56]	; 0x38
   26850:	ldr	r4, [sp, #72]	; 0x48
   26854:	str	r0, [sp, #24]
   26858:	b	268d4 <__assert_fail@plt+0x15174>
   2685c:	ldr	r0, [sp, #16]
   26860:	str	r0, [sp, #24]
   26864:	b	268d4 <__assert_fail@plt+0x15174>
   26868:	ldr	r1, [sp, #16]
   2686c:	str	r1, [sp, #24]
   26870:	b	268d0 <__assert_fail@plt+0x15170>
   26874:	mov	r7, r6
   26878:	bic	r6, r3, #3
   2687c:	add	r2, r1, r6
   26880:	add	r1, r7, r1, lsl #2
   26884:	mov	r7, r6
   26888:	add	r1, r1, #4
   2688c:	sub	r5, r1, #4
   26890:	vld1.32	{d16-d17}, [r1]!
   26894:	subs	r7, r7, #4
   26898:	vst1.32	{d16-d17}, [r5]
   2689c:	bne	2688c <__assert_fail@plt+0x1512c>
   268a0:	cmp	r3, r6
   268a4:	ldr	r5, [sp, #68]	; 0x44
   268a8:	ldr	r7, [sp, #56]	; 0x38
   268ac:	ldr	r6, [sp, #76]	; 0x4c
   268b0:	beq	268cc <__assert_fail@plt+0x1516c>
   268b4:	add	r1, r6, r2, lsl #2
   268b8:	ldr	r1, [r1, #4]
   268bc:	str	r1, [r6, r2, lsl #2]
   268c0:	add	r2, r2, #1
   268c4:	cmp	r0, r2
   268c8:	bne	268b4 <__assert_fail@plt+0x15154>
   268cc:	str	r6, [sp, #24]
   268d0:	str	r0, [sp, #40]	; 0x28
   268d4:	ldr	r0, [sp, #52]	; 0x34
   268d8:	add	r1, r9, r9, lsl #1
   268dc:	ldr	r0, [r0, #116]	; 0x74
   268e0:	add	r0, r0, r1, lsl #3
   268e4:	b	269dc <__assert_fail@plt+0x1527c>
   268e8:	ldr	r0, [sp, #20]
   268ec:	ldr	r4, [sp, #76]	; 0x4c
   268f0:	ldr	r8, [sp, #24]
   268f4:	cmp	r0, r6
   268f8:	beq	265a4 <__assert_fail@plt+0x14e44>
   268fc:	b	265d4 <__assert_fail@plt+0x14e74>
   26900:	ldr	r0, [r6]
   26904:	cmp	r0, r4
   26908:	bne	269d8 <__assert_fail@plt+0x15278>
   2690c:	ldr	r0, [r6, #8]
   26910:	ldr	r1, [r6, #12]
   26914:	subs	r0, r1, r0
   26918:	add	ip, r0, r5
   2691c:	beq	2692c <__assert_fail@plt+0x151cc>
   26920:	ldr	r1, [r7, #12]
   26924:	add	r1, r1, r4, lsl #2
   26928:	b	2693c <__assert_fail@plt+0x151dc>
   2692c:	ldr	r1, [r7, #20]
   26930:	add	r2, r4, r4, lsl #1
   26934:	add	r1, r1, r2, lsl #2
   26938:	ldr	r1, [r1, #8]
   2693c:	ldr	r2, [sl, #12]
   26940:	cmp	ip, r2
   26944:	bgt	269d8 <__assert_fail@plt+0x15278>
   26948:	ldr	r2, [sl]
   2694c:	ldr	r2, [r2, ip, lsl #2]
   26950:	cmp	r2, #0
   26954:	beq	269d8 <__assert_fail@plt+0x15278>
   26958:	ldr	r3, [r2, #8]
   2695c:	cmp	r3, #1
   26960:	blt	269d8 <__assert_fail@plt+0x15278>
   26964:	ldr	r1, [r1]
   26968:	ldr	r2, [r2, #12]
   2696c:	subs	r7, r3, #1
   26970:	mov	r3, #0
   26974:	beq	2699c <__assert_fail@plt+0x1523c>
   26978:	add	r5, r3, r7
   2697c:	lsr	r4, r5, #1
   26980:	ldr	r0, [r2, r4, lsl #2]
   26984:	cmp	r0, r1
   26988:	mov	r0, #1
   2698c:	movge	r7, r4
   26990:	addlt	r3, r0, r5, lsr #1
   26994:	cmp	r3, r7
   26998:	bcc	26978 <__assert_fail@plt+0x15218>
   2699c:	ldr	r0, [r2, r3, lsl #2]
   269a0:	cmp	r0, r1
   269a4:	bne	264cc <__assert_fail@plt+0x14d6c>
   269a8:	stm	sp, {r1, ip}
   269ac:	ldr	r4, [sp, #72]	; 0x48
   269b0:	ldr	r5, [sp, #68]	; 0x44
   269b4:	ldr	r0, [sp, #52]	; 0x34
   269b8:	ldr	r1, [sp, #36]	; 0x24
   269bc:	mov	r2, r4
   269c0:	mov	r3, r5
   269c4:	bl	27048 <__assert_fail@plt+0x158e8>
   269c8:	ldr	r7, [sp, #56]	; 0x38
   269cc:	cmp	r0, #0
   269d0:	beq	264e0 <__assert_fail@plt+0x14d80>
   269d4:	ldr	lr, [sp, #48]	; 0x30
   269d8:	mov	r0, r6
   269dc:	add	r6, r0, #24
   269e0:	ldrb	r0, [r0, #20]
   269e4:	add	r9, r9, #1
   269e8:	cmp	r0, #0
   269ec:	bne	26900 <__assert_fail@plt+0x151a0>
   269f0:	ldr	r2, [sp, #44]	; 0x2c
   269f4:	ldr	r0, [r8, #4]
   269f8:	ldr	r9, [sp, #52]	; 0x34
   269fc:	ldr	r4, [sp, #76]	; 0x4c
   26a00:	add	r2, r2, #1
   26a04:	cmp	r2, r0
   26a08:	blt	26468 <__assert_fail@plt+0x14d08>
   26a0c:	mov	r8, #0
   26a10:	b	26a64 <__assert_fail@plt+0x15304>
   26a14:	ldr	r8, [sp, #80]	; 0x50
   26a18:	mov	lr, #0
   26a1c:	cmp	lr, r0
   26a20:	blt	26400 <__assert_fail@plt+0x14ca0>
   26a24:	mov	r0, #0
   26a28:	str	r0, [fp, #-76]	; 0xffffffb4
   26a2c:	mov	r8, #0
   26a30:	mov	r0, r8
   26a34:	sub	sp, fp, #28
   26a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a3c:	mov	r8, r0
   26a40:	str	r0, [fp, #-76]	; 0xffffffb4
   26a44:	b	26a30 <__assert_fail@plt+0x152d0>
   26a48:	str	r1, [fp, #-76]	; 0xffffffb4
   26a4c:	b	26a2c <__assert_fail@plt+0x152cc>
   26a50:	str	r0, [fp, #-72]	; 0xffffffb8
   26a54:	str	r8, [fp, #-76]	; 0xffffffb4
   26a58:	b	26a30 <__assert_fail@plt+0x152d0>
   26a5c:	mov	r8, r0
   26a60:	ldr	r4, [sp, #76]	; 0x4c
   26a64:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26a68:	cmp	r0, #0
   26a6c:	beq	26a78 <__assert_fail@plt+0x15318>
   26a70:	mov	r0, r4
   26a74:	bl	141c4 <__assert_fail@plt+0x2a64>
   26a78:	cmp	r8, #0
   26a7c:	str	r8, [fp, #-76]	; 0xffffffb4
   26a80:	moveq	r8, #0
   26a84:	b	26a30 <__assert_fail@plt+0x152d0>
   26a88:	mov	r8, r0
   26a8c:	b	26a30 <__assert_fail@plt+0x152d0>
   26a90:	mov	r8, r0
   26a94:	b	26a64 <__assert_fail@plt+0x15304>
   26a98:	mov	r4, #0
   26a9c:	mov	r8, #12
   26aa0:	str	r4, [fp, #-56]	; 0xffffffc8
   26aa4:	str	r4, [fp, #-52]	; 0xffffffcc
   26aa8:	b	26a64 <__assert_fail@plt+0x15304>
   26aac:	mov	r8, #12
   26ab0:	b	26a64 <__assert_fail@plt+0x15304>
   26ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ab8:	add	fp, sp, #28
   26abc:	sub	sp, sp, #12
   26ac0:	ldr	ip, [r1, #4]
   26ac4:	mov	sl, r0
   26ac8:	mov	r0, #0
   26acc:	cmp	ip, #0
   26ad0:	ldrne	lr, [r2, #4]
   26ad4:	cmpne	lr, #0
   26ad8:	bne	26ae4 <__assert_fail@plt+0x15384>
   26adc:	sub	sp, fp, #28
   26ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ae4:	mov	r7, r1
   26ae8:	ldr	r1, [sl, #4]
   26aec:	ldr	r6, [sl]
   26af0:	add	r3, lr, ip
   26af4:	add	r4, r1, r3
   26af8:	cmp	r4, r6
   26afc:	ble	26b40 <__assert_fail@plt+0x153e0>
   26b00:	mov	r5, r2
   26b04:	mov	r2, sl
   26b08:	add	r4, r6, r3
   26b0c:	ldr	r0, [r2, #8]!
   26b10:	lsl	r1, r4, #2
   26b14:	str	r2, [sp, #8]
   26b18:	bl	2a8dc <__assert_fail@plt+0x1917c>
   26b1c:	cmp	r0, #0
   26b20:	beq	26cc4 <__assert_fail@plt+0x15564>
   26b24:	str	r4, [sl]
   26b28:	str	r0, [sl, #8]
   26b2c:	mov	r2, r5
   26b30:	ldr	r1, [sl, #4]
   26b34:	ldr	lr, [r5, #4]
   26b38:	ldr	ip, [r7, #4]
   26b3c:	b	26b48 <__assert_fail@plt+0x153e8>
   26b40:	add	r0, sl, #8
   26b44:	str	r0, [sp, #8]
   26b48:	str	r2, [sp, #4]
   26b4c:	ldr	r2, [r2, #8]
   26b50:	ldr	r4, [r7, #8]
   26b54:	add	r3, ip, r1
   26b58:	sub	r8, r1, #1
   26b5c:	add	r9, r3, lr
   26b60:	sub	ip, ip, #1
   26b64:	sub	r3, lr, #1
   26b68:	ldr	r1, [r2, r3, lsl #2]
   26b6c:	ldr	r6, [r4, ip, lsl #2]
   26b70:	cmp	r6, r1
   26b74:	beq	26ba0 <__assert_fail@plt+0x15440>
   26b78:	blt	26b90 <__assert_fail@plt+0x15430>
   26b7c:	sub	r5, ip, #1
   26b80:	cmp	ip, #0
   26b84:	mov	ip, r5
   26b88:	bgt	26b6c <__assert_fail@plt+0x1540c>
   26b8c:	b	26c1c <__assert_fail@plt+0x154bc>
   26b90:	cmp	lr, #2
   26b94:	mov	lr, r3
   26b98:	bge	26b64 <__assert_fail@plt+0x15404>
   26b9c:	b	26c1c <__assert_fail@plt+0x154bc>
   26ba0:	mov	r0, r9
   26ba4:	cmp	r8, #0
   26ba8:	blt	26bf4 <__assert_fail@plt+0x15494>
   26bac:	ldr	r1, [sp, #8]
   26bb0:	ldr	r9, [r1]
   26bb4:	mov	r1, r8
   26bb8:	ldr	r5, [r9, r1, lsl #2]
   26bbc:	cmp	r5, r6
   26bc0:	ble	26bd8 <__assert_fail@plt+0x15478>
   26bc4:	sub	r8, r1, #1
   26bc8:	cmp	r1, #0
   26bcc:	mov	r1, r8
   26bd0:	bgt	26bb8 <__assert_fail@plt+0x15458>
   26bd4:	b	26bf4 <__assert_fail@plt+0x15494>
   26bd8:	mov	r8, r1
   26bdc:	bne	26bf4 <__assert_fail@plt+0x15494>
   26be0:	mov	r8, r1
   26be4:	mov	r9, r0
   26be8:	cmp	ip, #1
   26bec:	bge	26c10 <__assert_fail@plt+0x154b0>
   26bf0:	b	26c1c <__assert_fail@plt+0x154bc>
   26bf4:	ldr	r1, [sp, #8]
   26bf8:	mov	r9, r0
   26bfc:	sub	r9, r0, #1
   26c00:	ldr	r1, [r1]
   26c04:	str	r6, [r1, r9, lsl #2]
   26c08:	cmp	ip, #1
   26c0c:	blt	26c1c <__assert_fail@plt+0x154bc>
   26c10:	cmp	lr, #2
   26c14:	mov	lr, r3
   26c18:	bge	26b60 <__assert_fail@plt+0x15400>
   26c1c:	ldr	lr, [r7, #4]
   26c20:	ldr	r7, [sp, #4]
   26c24:	ldr	r2, [sl, #4]
   26c28:	ldr	r0, [sl, #8]
   26c2c:	ldr	r4, [r7, #4]
   26c30:	subs	r1, r2, #1
   26c34:	add	r3, r1, lr
   26c38:	add	r3, r3, r4
   26c3c:	sub	r5, r3, r9
   26c40:	add	r6, r5, #1
   26c44:	cmpge	r5, #0
   26c48:	add	r7, r6, r2
   26c4c:	str	r7, [sl, #4]
   26c50:	blt	26ca8 <__assert_fail@plt+0x15548>
   26c54:	add	r2, r2, r4
   26c58:	add	r2, r2, lr
   26c5c:	sub	r2, r2, r9
   26c60:	add	r7, r0, r2, lsl #2
   26c64:	ldr	r2, [r0, r1, lsl #2]
   26c68:	ldr	r5, [r0, r3, lsl #2]
   26c6c:	cmp	r5, r2
   26c70:	bgt	26c8c <__assert_fail@plt+0x1552c>
   26c74:	str	r2, [r7, r1, lsl #2]
   26c78:	sub	r2, r1, #1
   26c7c:	cmp	r1, #0
   26c80:	mov	r1, r2
   26c84:	bgt	26c64 <__assert_fail@plt+0x15504>
   26c88:	b	26ca8 <__assert_fail@plt+0x15548>
   26c8c:	str	r5, [r7, r1, lsl #2]
   26c90:	sub	r7, r7, #4
   26c94:	subs	r6, r6, #1
   26c98:	sub	r3, r3, #1
   26c9c:	mov	r2, #0
   26ca0:	bne	26c64 <__assert_fail@plt+0x15504>
   26ca4:	b	26cac <__assert_fail@plt+0x1554c>
   26ca8:	mov	r2, r6
   26cac:	add	r1, r0, r9, lsl #2
   26cb0:	lsl	r2, r2, #2
   26cb4:	bl	11484 <memcpy@plt>
   26cb8:	mov	r0, #0
   26cbc:	sub	sp, fp, #28
   26cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cc4:	mov	r0, #12
   26cc8:	sub	sp, fp, #28
   26ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cd4:	add	fp, sp, #28
   26cd8:	sub	sp, sp, #44	; 0x2c
   26cdc:	mov	ip, r0
   26ce0:	ldr	r0, [r0, #28]
   26ce4:	mov	r8, r2
   26ce8:	add	r2, r1, r1, lsl #1
   26cec:	mov	r9, #0
   26cf0:	str	r3, [sp, #4]
   26cf4:	str	r9, [sp, #36]	; 0x24
   26cf8:	str	r9, [sp, #32]
   26cfc:	str	r9, [sp, #40]	; 0x28
   26d00:	add	r2, r0, r2, lsl #2
   26d04:	mov	r0, r2
   26d08:	ldr	r6, [r0, #4]!
   26d0c:	cmp	r6, #1
   26d10:	str	r0, [sp, #28]
   26d14:	blt	27020 <__assert_fail@plt+0x158c0>
   26d18:	add	r4, r2, #8
   26d1c:	mov	sl, #1
   26d20:	str	r2, [sp]
   26d24:	str	r1, [sp, #12]
   26d28:	str	ip, [sp, #8]
   26d2c:	str	r4, [sp, #20]
   26d30:	ldr	r3, [r4]
   26d34:	ldr	r0, [r3, r9, lsl #2]
   26d38:	cmp	r0, r1
   26d3c:	beq	26eec <__assert_fail@plt+0x1578c>
   26d40:	ldr	r2, [ip]
   26d44:	add	r2, r2, r0, lsl #3
   26d48:	ldrb	r2, [r2, #4]
   26d4c:	tst	r2, #8
   26d50:	beq	26eec <__assert_fail@plt+0x1578c>
   26d54:	ldr	r2, [ip, #20]
   26d58:	add	r0, r0, r0, lsl #1
   26d5c:	mvn	lr, #0
   26d60:	str	r6, [sp, #24]
   26d64:	str	r0, [sp, #16]
   26d68:	add	r0, r2, r0, lsl #2
   26d6c:	ldr	r7, [r0, #4]
   26d70:	ldr	r0, [r0, #8]
   26d74:	cmp	r7, #2
   26d78:	ldr	r5, [r0]
   26d7c:	ldrge	lr, [r0, #4]
   26d80:	cmp	r6, #1
   26d84:	blt	26dc8 <__assert_fail@plt+0x15668>
   26d88:	mov	r2, #0
   26d8c:	subs	r7, r6, #1
   26d90:	beq	26db4 <__assert_fail@plt+0x15654>
   26d94:	add	r4, r2, r7
   26d98:	lsr	r6, r4, #1
   26d9c:	ldr	r0, [r3, r6, lsl #2]
   26da0:	cmp	r0, r5
   26da4:	movge	r7, r6
   26da8:	addlt	r2, sl, r4, lsr #1
   26dac:	cmp	r2, r7
   26db0:	bcc	26d94 <__assert_fail@plt+0x15634>
   26db4:	ldr	r0, [r3, r2, lsl #2]
   26db8:	ldr	r4, [sp, #20]
   26dbc:	ldr	r6, [sp, #24]
   26dc0:	cmp	r0, r5
   26dc4:	beq	26e20 <__assert_fail@plt+0x156c0>
   26dc8:	ldr	r0, [r8, #4]
   26dcc:	cmp	r0, #1
   26dd0:	blt	26e20 <__assert_fail@plt+0x156c0>
   26dd4:	ldr	r1, [r8, #8]
   26dd8:	subs	r4, r0, #1
   26ddc:	mov	r7, #0
   26de0:	beq	26e04 <__assert_fail@plt+0x156a4>
   26de4:	add	r0, r7, r4
   26de8:	lsr	r6, r0, #1
   26dec:	ldr	ip, [r1, r6, lsl #2]
   26df0:	cmp	ip, r5
   26df4:	movge	r4, r6
   26df8:	addlt	r7, sl, r0, lsr #1
   26dfc:	cmp	r7, r4
   26e00:	bcc	26de4 <__assert_fail@plt+0x15684>
   26e04:	ldr	r0, [r1, r7, lsl #2]
   26e08:	ldr	r1, [sp, #12]
   26e0c:	ldr	ip, [sp, #8]
   26e10:	ldr	r4, [sp, #20]
   26e14:	ldr	r6, [sp, #24]
   26e18:	cmp	r0, r5
   26e1c:	beq	26ebc <__assert_fail@plt+0x1575c>
   26e20:	cmp	lr, #1
   26e24:	blt	26eec <__assert_fail@plt+0x1578c>
   26e28:	cmp	r6, #1
   26e2c:	blt	26e6c <__assert_fail@plt+0x1570c>
   26e30:	mov	r2, #0
   26e34:	subs	r7, r6, #1
   26e38:	beq	26e5c <__assert_fail@plt+0x156fc>
   26e3c:	add	r0, r2, r7
   26e40:	lsr	r6, r0, #1
   26e44:	ldr	r5, [r3, r6, lsl #2]
   26e48:	cmp	r5, lr
   26e4c:	movge	r7, r6
   26e50:	addlt	r2, sl, r0, lsr #1
   26e54:	cmp	r2, r7
   26e58:	bcc	26e3c <__assert_fail@plt+0x156dc>
   26e5c:	ldr	r0, [r3, r2, lsl #2]
   26e60:	ldr	r6, [sp, #24]
   26e64:	cmp	r0, lr
   26e68:	beq	26eec <__assert_fail@plt+0x1578c>
   26e6c:	ldr	r0, [r8, #4]
   26e70:	cmp	r0, #1
   26e74:	blt	26eec <__assert_fail@plt+0x1578c>
   26e78:	ldr	r4, [r8, #8]
   26e7c:	subs	r7, r0, #1
   26e80:	mov	r3, #0
   26e84:	beq	26ea8 <__assert_fail@plt+0x15748>
   26e88:	add	r0, r3, r7
   26e8c:	lsr	r6, r0, #1
   26e90:	ldr	r5, [r4, r6, lsl #2]
   26e94:	cmp	r5, lr
   26e98:	movge	r7, r6
   26e9c:	addlt	r3, sl, r0, lsr #1
   26ea0:	cmp	r3, r7
   26ea4:	bcc	26e88 <__assert_fail@plt+0x15728>
   26ea8:	ldr	r0, [r4, r3, lsl #2]
   26eac:	ldr	r4, [sp, #20]
   26eb0:	ldr	r6, [sp, #24]
   26eb4:	cmp	r0, lr
   26eb8:	bne	26eec <__assert_fail@plt+0x1578c>
   26ebc:	ldr	r0, [ip, #28]
   26ec0:	ldr	r1, [sp, #16]
   26ec4:	add	r2, r0, r1, lsl #2
   26ec8:	ldr	r1, [sp, #4]
   26ecc:	add	r0, sp, #32
   26ed0:	bl	26ab4 <__assert_fail@plt+0x15354>
   26ed4:	cmp	r0, #0
   26ed8:	bne	27038 <__assert_fail@plt+0x158d8>
   26edc:	ldr	r0, [sp, #28]
   26ee0:	ldr	r1, [sp, #12]
   26ee4:	ldr	ip, [sp, #8]
   26ee8:	ldr	r6, [r0]
   26eec:	add	r9, r9, #1
   26ef0:	cmp	r9, r6
   26ef4:	blt	26d30 <__assert_fail@plt+0x155d0>
   26ef8:	ldr	r0, [sp]
   26efc:	cmp	r6, #0
   26f00:	ble	27020 <__assert_fail@plt+0x158c0>
   26f04:	ldr	r9, [sp, #36]	; 0x24
   26f08:	ldr	lr, [r0, #8]
   26f0c:	ldr	r0, [sp, #40]	; 0x28
   26f10:	mov	ip, #0
   26f14:	mov	r6, #1
   26f18:	sub	r1, r9, #1
   26f1c:	str	lr, [sp, #20]
   26f20:	str	r9, [sp, #16]
   26f24:	str	r1, [sp, #24]
   26f28:	b	26f4c <__assert_fail@plt+0x157ec>
   26f2c:	add	r3, r1, r2, lsl #2
   26f30:	ldr	r3, [r3, #4]
   26f34:	str	r3, [r1, r2, lsl #2]
   26f38:	add	r2, r2, #1
   26f3c:	ldr	r3, [r8, #4]
   26f40:	cmp	r2, r3
   26f44:	blt	26f2c <__assert_fail@plt+0x157cc>
   26f48:	b	27008 <__assert_fail@plt+0x158a8>
   26f4c:	ldr	r5, [lr, ip, lsl #2]
   26f50:	cmp	r9, #1
   26f54:	blt	26f94 <__assert_fail@plt+0x15834>
   26f58:	ldr	r2, [sp, #24]
   26f5c:	mov	r1, #0
   26f60:	cmp	r2, #0
   26f64:	beq	26f88 <__assert_fail@plt+0x15828>
   26f68:	add	r3, r1, r2
   26f6c:	lsr	r4, r3, #1
   26f70:	ldr	r7, [r0, r4, lsl #2]
   26f74:	cmp	r7, r5
   26f78:	movge	r2, r4
   26f7c:	addlt	r1, r6, r3, lsr #1
   26f80:	cmp	r1, r2
   26f84:	bcc	26f68 <__assert_fail@plt+0x15808>
   26f88:	ldr	r1, [r0, r1, lsl #2]
   26f8c:	cmp	r1, r5
   26f90:	beq	27008 <__assert_fail@plt+0x158a8>
   26f94:	ldr	r3, [r8, #4]
   26f98:	cmp	r3, #1
   26f9c:	blt	27008 <__assert_fail@plt+0x158a8>
   26fa0:	mov	r1, r8
   26fa4:	subs	sl, r3, #1
   26fa8:	mov	r2, #0
   26fac:	ldr	r1, [r8, #8]
   26fb0:	beq	26fd8 <__assert_fail@plt+0x15878>
   26fb4:	mov	r4, sl
   26fb8:	add	r7, r2, r4
   26fbc:	lsr	lr, r7, #1
   26fc0:	ldr	r9, [r1, lr, lsl #2]
   26fc4:	cmp	r9, r5
   26fc8:	movge	r4, lr
   26fcc:	addlt	r2, r6, r7, lsr #1
   26fd0:	cmp	r2, r4
   26fd4:	bcc	26fb8 <__assert_fail@plt+0x15858>
   26fd8:	ldr	r7, [r1, r2, lsl #2]
   26fdc:	ldr	lr, [sp, #20]
   26fe0:	ldr	r9, [sp, #16]
   26fe4:	mov	r4, r2
   26fe8:	cmp	r7, r5
   26fec:	mvnne	r4, #0
   26ff0:	cmp	r4, #0
   26ff4:	blt	27008 <__assert_fail@plt+0x158a8>
   26ff8:	cmp	r3, r4
   26ffc:	strgt	sl, [r8, #4]
   27000:	cmpgt	sl, r4
   27004:	bgt	26f2c <__assert_fail@plt+0x157cc>
   27008:	ldr	r1, [sp, #28]
   2700c:	add	ip, ip, #1
   27010:	ldr	r1, [r1]
   27014:	cmp	ip, r1
   27018:	blt	26f4c <__assert_fail@plt+0x157ec>
   2701c:	b	27024 <__assert_fail@plt+0x158c4>
   27020:	ldr	r0, [sp, #40]	; 0x28
   27024:	bl	141c4 <__assert_fail@plt+0x2a64>
   27028:	mov	r5, #0
   2702c:	mov	r0, r5
   27030:	sub	sp, fp, #28
   27034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27038:	mov	r5, r0
   2703c:	ldr	r0, [sp, #40]	; 0x28
   27040:	bl	141c4 <__assert_fail@plt+0x2a64>
   27044:	b	2702c <__assert_fail@plt+0x158cc>
   27048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2704c:	add	fp, sp, #28
   27050:	sub	sp, sp, #28
   27054:	ldr	ip, [r0, #108]	; 0x6c
   27058:	str	r1, [sp, #24]
   2705c:	ldr	r1, [r0, #84]	; 0x54
   27060:	mov	r4, r3
   27064:	str	r2, [sp, #8]
   27068:	str	r0, [sp, #16]
   2706c:	cmp	ip, #1
   27070:	str	r1, [sp, #20]
   27074:	blt	270dc <__assert_fail@plt+0x1597c>
   27078:	ldr	r1, [r0, #116]	; 0x74
   2707c:	mov	r9, #0
   27080:	mov	r2, #1
   27084:	mov	r3, ip
   27088:	add	r7, r3, r9
   2708c:	add	r7, r7, r7, lsr #31
   27090:	asr	r6, r7, #1
   27094:	add	r5, r6, r6, lsl #1
   27098:	add	r5, r1, r5, lsl #3
   2709c:	ldr	r5, [r5, #4]
   270a0:	cmp	r5, r4
   270a4:	addlt	r9, r2, r7, asr #1
   270a8:	movge	r3, r6
   270ac:	cmp	r9, r3
   270b0:	blt	27088 <__assert_fail@plt+0x15928>
   270b4:	cmp	r9, ip
   270b8:	bge	270e8 <__assert_fail@plt+0x15988>
   270bc:	ldr	r0, [sp, #16]
   270c0:	add	r2, r9, r9, lsl #1
   270c4:	ldr	r1, [r0, #116]	; 0x74
   270c8:	add	r1, r1, r2, lsl #3
   270cc:	ldr	r1, [r1, #4]
   270d0:	cmp	r1, r4
   270d4:	mvnne	r9, #0
   270d8:	b	270ec <__assert_fail@plt+0x1598c>
   270dc:	mov	r9, #0
   270e0:	cmp	r9, ip
   270e4:	blt	270bc <__assert_fail@plt+0x1595c>
   270e8:	mvn	r9, #0
   270ec:	ldr	r8, [fp, #12]
   270f0:	cmp	ip, #1
   270f4:	blt	2713c <__assert_fail@plt+0x159dc>
   270f8:	ldr	r0, [sp, #16]
   270fc:	mov	r6, #0
   27100:	mov	r2, #1
   27104:	mov	r3, ip
   27108:	ldr	r1, [r0, #116]	; 0x74
   2710c:	add	r7, r3, r6
   27110:	add	r7, r7, r7, lsr #31
   27114:	asr	r5, r7, #1
   27118:	add	r0, r5, r5, lsl #1
   2711c:	add	r0, r1, r0, lsl #3
   27120:	ldr	r0, [r0, #4]
   27124:	cmp	r0, r8
   27128:	addlt	r6, r2, r7, asr #1
   2712c:	movge	r3, r5
   27130:	cmp	r6, r3
   27134:	blt	2710c <__assert_fail@plt+0x159ac>
   27138:	b	27140 <__assert_fail@plt+0x159e0>
   2713c:	mov	r6, #0
   27140:	cmp	r6, ip
   27144:	ldr	ip, [sp, #16]
   27148:	bge	27168 <__assert_fail@plt+0x15a08>
   2714c:	ldr	r0, [ip, #116]	; 0x74
   27150:	add	r1, r6, r6, lsl #1
   27154:	add	r0, r0, r1, lsl #3
   27158:	ldr	r0, [r0, #4]
   2715c:	cmp	r0, r8
   27160:	mvnne	r6, #0
   27164:	b	2716c <__assert_fail@plt+0x15a0c>
   27168:	mvn	r6, #0
   2716c:	ldr	r0, [sp, #24]
   27170:	ldr	r0, [r0, #4]
   27174:	cmp	r0, #1
   27178:	blt	272f8 <__assert_fail@plt+0x15b98>
   2717c:	mov	sl, #0
   27180:	str	r4, [sp, #12]
   27184:	ldr	r0, [sp, #24]
   27188:	ldr	r3, [ip, #116]	; 0x74
   2718c:	ldr	r5, [sp, #20]
   27190:	ldr	r0, [r0, #8]
   27194:	ldr	r5, [r5]
   27198:	ldr	r2, [r0, sl, lsl #2]
   2719c:	mov	r0, r3
   271a0:	add	r1, r2, r2, lsl #1
   271a4:	ldr	r7, [r0, r1, lsl #3]!
   271a8:	ldr	r0, [r0, #8]
   271ac:	ldr	r5, [r5, r7, lsl #3]
   271b0:	mvn	r7, #0
   271b4:	cmp	r0, r4
   271b8:	ble	271c4 <__assert_fail@plt+0x15a64>
   271bc:	mvn	r8, #0
   271c0:	b	27250 <__assert_fail@plt+0x15af0>
   271c4:	add	r1, r3, r1, lsl #3
   271c8:	mov	r8, #1
   271cc:	ldr	r1, [r1, #12]
   271d0:	cmp	r1, r4
   271d4:	blt	27250 <__assert_fail@plt+0x15af0>
   271d8:	sub	r1, r1, r4
   271dc:	mov	lr, r5
   271e0:	cmp	r0, r4
   271e4:	mov	r4, #1
   271e8:	clz	r1, r1
   271ec:	lsr	r5, r1, #5
   271f0:	lsl	r1, r5, #1
   271f4:	orreq	r1, r4, r5, lsl #1
   271f8:	cmp	r1, #0
   271fc:	beq	27244 <__assert_fail@plt+0x15ae4>
   27200:	ldr	r3, [sp, #8]
   27204:	mov	r0, ip
   27208:	mov	r2, lr
   2720c:	str	r9, [sp]
   27210:	mov	r5, lr
   27214:	bl	27304 <__assert_fail@plt+0x15ba4>
   27218:	mov	r8, r0
   2721c:	ldr	r0, [sp, #24]
   27220:	ldr	ip, [sp, #16]
   27224:	ldr	r4, [sp, #12]
   27228:	ldr	r0, [r0, #8]
   2722c:	ldr	r3, [ip, #116]	; 0x74
   27230:	ldr	r2, [r0, sl, lsl #2]
   27234:	add	r0, r2, r2, lsl #1
   27238:	add	r0, r3, r0, lsl #3
   2723c:	ldr	r0, [r0, #8]
   27240:	b	27250 <__assert_fail@plt+0x15af0>
   27244:	ldr	r4, [sp, #12]
   27248:	mov	r8, #0
   2724c:	mov	r5, lr
   27250:	ldr	r1, [fp, #12]
   27254:	cmp	r0, r1
   27258:	bgt	272c0 <__assert_fail@plt+0x15b60>
   2725c:	add	r1, r2, r2, lsl #1
   27260:	ldr	r2, [fp, #12]
   27264:	mov	r7, #1
   27268:	add	r1, r3, r1, lsl #3
   2726c:	ldr	r1, [r1, #12]
   27270:	cmp	r1, r2
   27274:	blt	272c0 <__assert_fail@plt+0x15b60>
   27278:	ldr	r2, [fp, #12]
   2727c:	sub	r1, r1, r2
   27280:	mov	r3, r2
   27284:	clz	r1, r1
   27288:	cmp	r0, r3
   2728c:	mov	r0, #1
   27290:	lsr	r2, r1, #5
   27294:	lsl	r1, r2, #1
   27298:	orreq	r1, r0, r2, lsl #1
   2729c:	cmp	r1, #0
   272a0:	beq	272e0 <__assert_fail@plt+0x15b80>
   272a4:	ldr	r3, [fp, #8]
   272a8:	mov	r0, ip
   272ac:	mov	r2, r5
   272b0:	str	r6, [sp]
   272b4:	bl	27304 <__assert_fail@plt+0x15ba4>
   272b8:	ldr	ip, [sp, #16]
   272bc:	mov	r7, r0
   272c0:	cmp	r7, r8
   272c4:	bne	272ec <__assert_fail@plt+0x15b8c>
   272c8:	ldr	r0, [sp, #24]
   272cc:	add	sl, sl, #1
   272d0:	ldr	r0, [r0, #4]
   272d4:	cmp	sl, r0
   272d8:	blt	27184 <__assert_fail@plt+0x15a24>
   272dc:	b	272f8 <__assert_fail@plt+0x15b98>
   272e0:	mov	r7, #0
   272e4:	cmp	r7, r8
   272e8:	beq	272c8 <__assert_fail@plt+0x15b68>
   272ec:	mov	r0, #1
   272f0:	sub	sp, fp, #28
   272f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   272f8:	mov	r0, #0
   272fc:	sub	sp, fp, #28
   27300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27308:	add	fp, sp, #28
   2730c:	sub	sp, sp, #36	; 0x24
   27310:	ldr	r4, [r0, #84]	; 0x54
   27314:	mov	r7, r0
   27318:	mov	r5, r1
   2731c:	add	r1, r3, r3, lsl #1
   27320:	str	r3, [sp, #32]
   27324:	ldr	r0, [r4, #24]
   27328:	add	r1, r0, r1, lsl #2
   2732c:	mov	lr, r1
   27330:	ldr	r0, [lr, #4]!
   27334:	cmp	r0, #1
   27338:	blt	274d4 <__assert_fail@plt+0x15d74>
   2733c:	mov	ip, #1
   27340:	mov	r6, r2
   27344:	and	r3, r5, #2
   27348:	mov	sl, #0
   2734c:	mvn	r2, ip, lsl r2
   27350:	cmp	r6, #31
   27354:	str	r3, [sp, #16]
   27358:	str	r2, [sp, #24]
   2735c:	lsl	r2, ip, r6
   27360:	and	ip, r5, #1
   27364:	str	r2, [sp, #28]
   27368:	mov	r2, #0
   2736c:	str	ip, [sp, #12]
   27370:	movwgt	r2, #1
   27374:	orr	r2, r2, r3, lsr #1
   27378:	add	r3, r1, #8
   2737c:	str	r2, [sp, #20]
   27380:	stmib	sp, {r3, lr}
   27384:	ldr	r1, [r3]
   27388:	ldr	r9, [r1, sl, lsl #2]
   2738c:	ldr	r1, [r4]
   27390:	add	r2, r1, r9, lsl #3
   27394:	ldrb	r2, [r2, #4]
   27398:	cmp	r2, #9
   2739c:	beq	27498 <__assert_fail@plt+0x15d38>
   273a0:	cmp	r2, #8
   273a4:	beq	274b4 <__assert_fail@plt+0x15d54>
   273a8:	cmp	r2, #4
   273ac:	bne	274c8 <__assert_fail@plt+0x15d68>
   273b0:	ldr	r1, [fp, #8]
   273b4:	cmn	r1, #1
   273b8:	beq	274c8 <__assert_fail@plt+0x15d68>
   273bc:	ldr	r1, [fp, #8]
   273c0:	ldr	r0, [r7, #116]	; 0x74
   273c4:	add	r1, r1, r1, lsl #1
   273c8:	add	r0, r0, r1, lsl #3
   273cc:	add	r8, r0, #16
   273d0:	ldr	r0, [r8, #-16]
   273d4:	cmp	r0, r9
   273d8:	bne	27474 <__assert_fail@plt+0x15d14>
   273dc:	cmp	r6, #31
   273e0:	bgt	273f4 <__assert_fail@plt+0x15c94>
   273e4:	ldr	r0, [r8]
   273e8:	ldr	r1, [sp, #28]
   273ec:	tst	r0, r1
   273f0:	beq	27474 <__assert_fail@plt+0x15d14>
   273f4:	ldr	r0, [r4, #20]
   273f8:	add	r1, r9, r9, lsl #1
   273fc:	add	r0, r0, r1, lsl #2
   27400:	ldr	r0, [r0, #8]
   27404:	ldr	r3, [r0]
   27408:	ldr	r0, [sp, #32]
   2740c:	cmp	r3, r0
   27410:	beq	274e0 <__assert_fail@plt+0x15d80>
   27414:	ldr	r0, [fp, #8]
   27418:	mov	r1, r5
   2741c:	mov	r2, r6
   27420:	str	r0, [sp]
   27424:	mov	r0, r7
   27428:	bl	27304 <__assert_fail@plt+0x15ba4>
   2742c:	cmp	r0, #0
   27430:	beq	27448 <__assert_fail@plt+0x15ce8>
   27434:	cmn	r0, #1
   27438:	beq	274f4 <__assert_fail@plt+0x15d94>
   2743c:	cmp	r6, #31
   27440:	ble	27464 <__assert_fail@plt+0x15d04>
   27444:	b	27474 <__assert_fail@plt+0x15d14>
   27448:	ldr	r0, [sp, #20]
   2744c:	cmp	r0, #0
   27450:	beq	27464 <__assert_fail@plt+0x15d04>
   27454:	ldr	r0, [sp, #16]
   27458:	cmp	r0, #0
   2745c:	beq	27474 <__assert_fail@plt+0x15d14>
   27460:	b	274f0 <__assert_fail@plt+0x15d90>
   27464:	ldr	r0, [r8]
   27468:	ldr	r1, [sp, #24]
   2746c:	and	r0, r0, r1
   27470:	str	r0, [r8]
   27474:	ldrb	r0, [r8, #4]
   27478:	add	r8, r8, #24
   2747c:	cmp	r0, #0
   27480:	bne	273d0 <__assert_fail@plt+0x15c70>
   27484:	ldr	lr, [sp, #8]
   27488:	ldr	ip, [sp, #12]
   2748c:	ldr	r3, [sp, #4]
   27490:	ldr	r0, [lr]
   27494:	b	274c8 <__assert_fail@plt+0x15d68>
   27498:	ldr	r2, [sp, #16]
   2749c:	cmp	r2, #0
   274a0:	beq	274c8 <__assert_fail@plt+0x15d68>
   274a4:	ldr	r1, [r1, r9, lsl #3]
   274a8:	cmp	r1, r6
   274ac:	bne	274c8 <__assert_fail@plt+0x15d68>
   274b0:	b	274f0 <__assert_fail@plt+0x15d90>
   274b4:	cmp	ip, #0
   274b8:	beq	274c8 <__assert_fail@plt+0x15d68>
   274bc:	ldr	r1, [r1, r9, lsl #3]
   274c0:	cmp	r1, r6
   274c4:	beq	274fc <__assert_fail@plt+0x15d9c>
   274c8:	add	sl, sl, #1
   274cc:	cmp	sl, r0
   274d0:	blt	27384 <__assert_fail@plt+0x15c24>
   274d4:	ubfx	r0, r5, #1, #1
   274d8:	sub	sp, fp, #28
   274dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274e0:	ldr	r0, [sp, #12]
   274e4:	rsb	r0, r0, #0
   274e8:	sub	sp, fp, #28
   274ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274f0:	mov	r0, #0
   274f4:	sub	sp, fp, #28
   274f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   274fc:	mvn	r0, #0
   27500:	sub	sp, fp, #28
   27504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27508:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2750c:	add	fp, sp, #24
   27510:	movw	r8, #0
   27514:	mov	r6, r2
   27518:	mov	r4, r1
   2751c:	mov	r5, r0
   27520:	movt	r8, #32752	; 0x7ff0
   27524:	mov	r0, r5
   27528:	mov	r1, r4
   2752c:	mov	r2, r6
   27530:	bl	11424 <read@plt>
   27534:	mov	r7, r0
   27538:	cmn	r0, #1
   2753c:	bgt	27564 <__assert_fail@plt+0x15e04>
   27540:	bl	11640 <__errno_location@plt>
   27544:	ldr	r0, [r0]
   27548:	cmp	r0, #4
   2754c:	beq	27524 <__assert_fail@plt+0x15dc4>
   27550:	cmp	r6, r8
   27554:	bls	27564 <__assert_fail@plt+0x15e04>
   27558:	cmp	r0, #22
   2755c:	mov	r6, r8
   27560:	beq	27524 <__assert_fail@plt+0x15dc4>
   27564:	mov	r0, r7
   27568:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2756c:	mov	r1, #0
   27570:	mov	r2, #3
   27574:	b	2aa74 <__assert_fail@plt+0x19314>
   27578:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2757c:	add	fp, sp, #24
   27580:	sub	sp, sp, #32
   27584:	ldr	r6, [fp, #12]
   27588:	ldr	r7, [fp, #8]
   2758c:	mov	r4, r2
   27590:	mov	r8, r0
   27594:	cmp	r1, #0
   27598:	beq	275c0 <__assert_fail@plt+0x15e60>
   2759c:	movw	r2, #49217	; 0xc041
   275a0:	mov	r5, r1
   275a4:	str	r3, [sp, #4]
   275a8:	str	r4, [sp]
   275ac:	mov	r0, r8
   275b0:	mov	r1, #1
   275b4:	movt	r2, #2
   275b8:	mov	r3, r5
   275bc:	b	275d8 <__assert_fail@plt+0x15e78>
   275c0:	movw	r2, #49229	; 0xc04d
   275c4:	str	r3, [sp]
   275c8:	mov	r0, r8
   275cc:	mov	r1, #1
   275d0:	mov	r3, r4
   275d4:	movt	r2, #2
   275d8:	bl	116a0 <__fprintf_chk@plt>
   275dc:	movw	r1, #49236	; 0xc054
   275e0:	mov	r0, #0
   275e4:	mov	r2, #5
   275e8:	movt	r1, #2
   275ec:	bl	114e4 <dcgettext@plt>
   275f0:	movw	r2, #49954	; 0xc322
   275f4:	mov	r3, r0
   275f8:	movw	r0, #2022	; 0x7e6
   275fc:	mov	r1, #1
   27600:	str	r0, [sp]
   27604:	movt	r2, #2
   27608:	mov	r0, r8
   2760c:	bl	116a0 <__fprintf_chk@plt>
   27610:	movw	r4, #46722	; 0xb682
   27614:	mov	r1, r8
   27618:	movt	r4, #2
   2761c:	mov	r0, r4
   27620:	bl	113dc <fputs_unlocked@plt>
   27624:	movw	r1, #49240	; 0xc058
   27628:	mov	r0, #0
   2762c:	mov	r2, #5
   27630:	movt	r1, #2
   27634:	bl	114e4 <dcgettext@plt>
   27638:	movw	r3, #49411	; 0xc103
   2763c:	mov	r2, r0
   27640:	mov	r0, r8
   27644:	mov	r1, #1
   27648:	movt	r3, #2
   2764c:	bl	116a0 <__fprintf_chk@plt>
   27650:	mov	r0, r4
   27654:	mov	r1, r8
   27658:	bl	113dc <fputs_unlocked@plt>
   2765c:	cmp	r6, #9
   27660:	bhi	2769c <__assert_fail@plt+0x15f3c>
   27664:	add	r0, pc, #0
   27668:	ldr	pc, [r0, r6, lsl #2]
   2766c:	muleq	r2, r4, r6
   27670:	andeq	r7, r2, r8, lsr #13
   27674:	ldrdeq	r7, [r2], -r8
   27678:	andeq	r7, r2, r0, lsl #14
   2767c:	andeq	r7, r2, r8, lsr #14
   27680:	andeq	r7, r2, r0, asr r7
   27684:	andeq	r7, r2, r8, ror r7
   27688:			; <UNDEFINED> instruction: 0x000277b0
   2768c:	andeq	r7, r2, r0, asr r8
   27690:	strdeq	r7, [r2], -r8
   27694:	sub	sp, fp, #24
   27698:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2769c:	movw	r1, #49764	; 0xc264
   276a0:	movt	r1, #2
   276a4:	b	27800 <__assert_fail@plt+0x160a0>
   276a8:	movw	r1, #49445	; 0xc125
   276ac:	mov	r0, #0
   276b0:	mov	r2, #5
   276b4:	movt	r1, #2
   276b8:	bl	114e4 <dcgettext@plt>
   276bc:	ldr	r3, [r7]
   276c0:	mov	r2, r0
   276c4:	mov	r0, r8
   276c8:	mov	r1, #1
   276cc:	sub	sp, fp, #24
   276d0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   276d4:	b	116a0 <__fprintf_chk@plt>
   276d8:	movw	r1, #49461	; 0xc135
   276dc:	mov	r0, #0
   276e0:	mov	r2, #5
   276e4:	movt	r1, #2
   276e8:	bl	114e4 <dcgettext@plt>
   276ec:	mov	r2, r0
   276f0:	ldr	r3, [r7]
   276f4:	ldr	r0, [r7, #4]
   276f8:	str	r0, [sp]
   276fc:	b	277ec <__assert_fail@plt+0x1608c>
   27700:	movw	r1, #49484	; 0xc14c
   27704:	mov	r0, #0
   27708:	mov	r2, #5
   2770c:	movt	r1, #2
   27710:	bl	114e4 <dcgettext@plt>
   27714:	ldr	r3, [r7]
   27718:	mov	r2, r0
   2771c:	ldmib	r7, {r0, r1}
   27720:	stm	sp, {r0, r1}
   27724:	b	277ec <__assert_fail@plt+0x1608c>
   27728:	movw	r1, #49512	; 0xc168
   2772c:	mov	r0, #0
   27730:	mov	r2, #5
   27734:	movt	r1, #2
   27738:	bl	114e4 <dcgettext@plt>
   2773c:	ldr	r3, [r7]
   27740:	mov	r2, r0
   27744:	ldmib	r7, {r0, r1, r7}
   27748:	stm	sp, {r0, r1, r7}
   2774c:	b	277ec <__assert_fail@plt+0x1608c>
   27750:	movw	r1, #49544	; 0xc188
   27754:	mov	r0, #0
   27758:	mov	r2, #5
   2775c:	movt	r1, #2
   27760:	bl	114e4 <dcgettext@plt>
   27764:	ldr	r3, [r7]
   27768:	mov	r2, r0
   2776c:	ldmib	r7, {r0, r1, r6, r7}
   27770:	stm	sp, {r0, r1, r6, r7}
   27774:	b	277ec <__assert_fail@plt+0x1608c>
   27778:	movw	r1, #49580	; 0xc1ac
   2777c:	mov	r0, #0
   27780:	mov	r2, #5
   27784:	movt	r1, #2
   27788:	bl	114e4 <dcgettext@plt>
   2778c:	ldr	r3, [r7]
   27790:	mov	r2, r0
   27794:	ldmib	r7, {r0, r1, r6}
   27798:	ldr	r5, [r7, #16]
   2779c:	ldr	r7, [r7, #20]
   277a0:	stm	sp, {r0, r1, r6}
   277a4:	str	r5, [sp, #12]
   277a8:	str	r7, [sp, #16]
   277ac:	b	277ec <__assert_fail@plt+0x1608c>
   277b0:	movw	r1, #49620	; 0xc1d4
   277b4:	mov	r0, #0
   277b8:	mov	r2, #5
   277bc:	movt	r1, #2
   277c0:	bl	114e4 <dcgettext@plt>
   277c4:	ldr	r3, [r7]
   277c8:	mov	r2, r0
   277cc:	ldmib	r7, {r0, r1, r6}
   277d0:	ldr	r5, [r7, #16]
   277d4:	ldr	r4, [r7, #20]
   277d8:	ldr	r7, [r7, #24]
   277dc:	stm	sp, {r0, r1, r6}
   277e0:	str	r5, [sp, #12]
   277e4:	str	r4, [sp, #16]
   277e8:	str	r7, [sp, #20]
   277ec:	mov	r0, r8
   277f0:	mov	r1, #1
   277f4:	b	278a0 <__assert_fail@plt+0x16140>
   277f8:	movw	r1, #49712	; 0xc230
   277fc:	movt	r1, #2
   27800:	mov	r0, #0
   27804:	mov	r2, #5
   27808:	bl	114e4 <dcgettext@plt>
   2780c:	mov	ip, r0
   27810:	ldr	r3, [r7]
   27814:	ldr	r0, [r7, #4]
   27818:	ldr	r1, [r7, #8]
   2781c:	ldr	r6, [r7, #12]
   27820:	ldr	r5, [r7, #16]
   27824:	ldr	r4, [r7, #20]
   27828:	ldr	r2, [r7, #24]
   2782c:	ldr	lr, [r7, #28]
   27830:	ldr	r7, [r7, #32]
   27834:	stm	sp, {r0, r1, r6}
   27838:	str	r5, [sp, #12]
   2783c:	str	r4, [sp, #16]
   27840:	str	r2, [sp, #20]
   27844:	str	lr, [sp, #24]
   27848:	str	r7, [sp, #28]
   2784c:	b	27894 <__assert_fail@plt+0x16134>
   27850:	movw	r1, #49664	; 0xc200
   27854:	mov	r0, #0
   27858:	mov	r2, #5
   2785c:	movt	r1, #2
   27860:	bl	114e4 <dcgettext@plt>
   27864:	mov	ip, r0
   27868:	ldr	r3, [r7]
   2786c:	ldmib	r7, {r0, r1, r6}
   27870:	ldr	r5, [r7, #16]
   27874:	ldr	r4, [r7, #20]
   27878:	ldr	r2, [r7, #24]
   2787c:	ldr	r7, [r7, #28]
   27880:	stm	sp, {r0, r1, r6}
   27884:	str	r5, [sp, #12]
   27888:	str	r4, [sp, #16]
   2788c:	str	r2, [sp, #20]
   27890:	str	r7, [sp, #24]
   27894:	mov	r0, r8
   27898:	mov	r1, #1
   2789c:	mov	r2, ip
   278a0:	bl	116a0 <__fprintf_chk@plt>
   278a4:	sub	sp, fp, #24
   278a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   278ac:	push	{r4, sl, fp, lr}
   278b0:	add	fp, sp, #8
   278b4:	sub	sp, sp, #8
   278b8:	ldr	ip, [fp, #8]
   278bc:	mov	lr, #0
   278c0:	ldr	r4, [ip, lr, lsl #2]
   278c4:	add	lr, lr, #1
   278c8:	cmp	r4, #0
   278cc:	bne	278c0 <__assert_fail@plt+0x16160>
   278d0:	sub	r4, lr, #1
   278d4:	str	ip, [sp]
   278d8:	str	r4, [sp, #4]
   278dc:	bl	27578 <__assert_fail@plt+0x15e18>
   278e0:	sub	sp, fp, #8
   278e4:	pop	{r4, sl, fp, pc}
   278e8:	push	{fp, lr}
   278ec:	mov	fp, sp
   278f0:	sub	sp, sp, #48	; 0x30
   278f4:	ldr	ip, [fp, #8]
   278f8:	ldr	lr, [ip]
   278fc:	cmp	lr, #0
   27900:	str	lr, [sp, #8]
   27904:	beq	279a0 <__assert_fail@plt+0x16240>
   27908:	ldr	lr, [ip, #4]
   2790c:	cmp	lr, #0
   27910:	str	lr, [sp, #12]
   27914:	beq	279a8 <__assert_fail@plt+0x16248>
   27918:	ldr	lr, [ip, #8]
   2791c:	cmp	lr, #0
   27920:	str	lr, [sp, #16]
   27924:	beq	279b0 <__assert_fail@plt+0x16250>
   27928:	ldr	lr, [ip, #12]
   2792c:	cmp	lr, #0
   27930:	str	lr, [sp, #20]
   27934:	beq	279b8 <__assert_fail@plt+0x16258>
   27938:	ldr	lr, [ip, #16]
   2793c:	cmp	lr, #0
   27940:	str	lr, [sp, #24]
   27944:	beq	279c0 <__assert_fail@plt+0x16260>
   27948:	ldr	lr, [ip, #20]
   2794c:	cmp	lr, #0
   27950:	str	lr, [sp, #28]
   27954:	beq	279c8 <__assert_fail@plt+0x16268>
   27958:	ldr	lr, [ip, #24]
   2795c:	cmp	lr, #0
   27960:	str	lr, [sp, #32]
   27964:	beq	279d0 <__assert_fail@plt+0x16270>
   27968:	ldr	lr, [ip, #28]
   2796c:	cmp	lr, #0
   27970:	str	lr, [sp, #36]	; 0x24
   27974:	beq	279d8 <__assert_fail@plt+0x16278>
   27978:	ldr	lr, [ip, #32]
   2797c:	cmp	lr, #0
   27980:	str	lr, [sp, #40]	; 0x28
   27984:	beq	279e0 <__assert_fail@plt+0x16280>
   27988:	ldr	lr, [ip, #36]	; 0x24
   2798c:	mov	ip, #10
   27990:	cmp	lr, #0
   27994:	str	lr, [sp, #44]	; 0x2c
   27998:	movweq	ip, #9
   2799c:	b	279e4 <__assert_fail@plt+0x16284>
   279a0:	mov	ip, #0
   279a4:	b	279e4 <__assert_fail@plt+0x16284>
   279a8:	mov	ip, #1
   279ac:	b	279e4 <__assert_fail@plt+0x16284>
   279b0:	mov	ip, #2
   279b4:	b	279e4 <__assert_fail@plt+0x16284>
   279b8:	mov	ip, #3
   279bc:	b	279e4 <__assert_fail@plt+0x16284>
   279c0:	mov	ip, #4
   279c4:	b	279e4 <__assert_fail@plt+0x16284>
   279c8:	mov	ip, #5
   279cc:	b	279e4 <__assert_fail@plt+0x16284>
   279d0:	mov	ip, #6
   279d4:	b	279e4 <__assert_fail@plt+0x16284>
   279d8:	mov	ip, #7
   279dc:	b	279e4 <__assert_fail@plt+0x16284>
   279e0:	mov	ip, #8
   279e4:	add	lr, sp, #8
   279e8:	str	ip, [sp, #4]
   279ec:	str	lr, [sp]
   279f0:	bl	27578 <__assert_fail@plt+0x15e18>
   279f4:	mov	sp, fp
   279f8:	pop	{fp, pc}
   279fc:	push	{fp, lr}
   27a00:	mov	fp, sp
   27a04:	sub	sp, sp, #56	; 0x38
   27a08:	add	ip, fp, #8
   27a0c:	str	ip, [sp, #12]
   27a10:	ldr	lr, [fp, #8]
   27a14:	cmp	lr, #0
   27a18:	str	lr, [sp, #16]
   27a1c:	beq	27ab8 <__assert_fail@plt+0x16358>
   27a20:	ldr	lr, [ip, #4]
   27a24:	cmp	lr, #0
   27a28:	str	lr, [sp, #20]
   27a2c:	beq	27ac0 <__assert_fail@plt+0x16360>
   27a30:	ldr	lr, [ip, #8]
   27a34:	cmp	lr, #0
   27a38:	str	lr, [sp, #24]
   27a3c:	beq	27ac8 <__assert_fail@plt+0x16368>
   27a40:	ldr	lr, [ip, #12]
   27a44:	cmp	lr, #0
   27a48:	str	lr, [sp, #28]
   27a4c:	beq	27ad0 <__assert_fail@plt+0x16370>
   27a50:	ldr	lr, [ip, #16]
   27a54:	cmp	lr, #0
   27a58:	str	lr, [sp, #32]
   27a5c:	beq	27ad8 <__assert_fail@plt+0x16378>
   27a60:	ldr	lr, [ip, #20]
   27a64:	cmp	lr, #0
   27a68:	str	lr, [sp, #36]	; 0x24
   27a6c:	beq	27ae0 <__assert_fail@plt+0x16380>
   27a70:	ldr	lr, [ip, #24]
   27a74:	cmp	lr, #0
   27a78:	str	lr, [sp, #40]	; 0x28
   27a7c:	beq	27ae8 <__assert_fail@plt+0x16388>
   27a80:	ldr	lr, [ip, #28]
   27a84:	cmp	lr, #0
   27a88:	str	lr, [sp, #44]	; 0x2c
   27a8c:	beq	27af0 <__assert_fail@plt+0x16390>
   27a90:	ldr	lr, [ip, #32]
   27a94:	cmp	lr, #0
   27a98:	str	lr, [sp, #48]	; 0x30
   27a9c:	beq	27af8 <__assert_fail@plt+0x16398>
   27aa0:	ldr	lr, [ip, #36]	; 0x24
   27aa4:	mov	ip, #10
   27aa8:	cmp	lr, #0
   27aac:	str	lr, [sp, #52]	; 0x34
   27ab0:	movweq	ip, #9
   27ab4:	b	27afc <__assert_fail@plt+0x1639c>
   27ab8:	mov	ip, #0
   27abc:	b	27afc <__assert_fail@plt+0x1639c>
   27ac0:	mov	ip, #1
   27ac4:	b	27afc <__assert_fail@plt+0x1639c>
   27ac8:	mov	ip, #2
   27acc:	b	27afc <__assert_fail@plt+0x1639c>
   27ad0:	mov	ip, #3
   27ad4:	b	27afc <__assert_fail@plt+0x1639c>
   27ad8:	mov	ip, #4
   27adc:	b	27afc <__assert_fail@plt+0x1639c>
   27ae0:	mov	ip, #5
   27ae4:	b	27afc <__assert_fail@plt+0x1639c>
   27ae8:	mov	ip, #6
   27aec:	b	27afc <__assert_fail@plt+0x1639c>
   27af0:	mov	ip, #7
   27af4:	b	27afc <__assert_fail@plt+0x1639c>
   27af8:	mov	ip, #8
   27afc:	add	lr, sp, #16
   27b00:	str	ip, [sp, #4]
   27b04:	str	lr, [sp]
   27b08:	bl	27578 <__assert_fail@plt+0x15e18>
   27b0c:	mov	sp, fp
   27b10:	pop	{fp, pc}
   27b14:	push	{fp, lr}
   27b18:	mov	fp, sp
   27b1c:	movw	r0, #53692	; 0xd1bc
   27b20:	movt	r0, #3
   27b24:	ldr	r1, [r0]
   27b28:	movw	r0, #46722	; 0xb682
   27b2c:	movt	r0, #2
   27b30:	bl	113dc <fputs_unlocked@plt>
   27b34:	movw	r1, #49824	; 0xc2a0
   27b38:	mov	r0, #0
   27b3c:	mov	r2, #5
   27b40:	movt	r1, #2
   27b44:	bl	114e4 <dcgettext@plt>
   27b48:	movw	r2, #49844	; 0xc2b4
   27b4c:	mov	r1, r0
   27b50:	mov	r0, #1
   27b54:	movt	r2, #2
   27b58:	bl	11688 <__printf_chk@plt>
   27b5c:	movw	r1, #49866	; 0xc2ca
   27b60:	mov	r0, #0
   27b64:	mov	r2, #5
   27b68:	movt	r1, #2
   27b6c:	bl	114e4 <dcgettext@plt>
   27b70:	movw	r2, #45393	; 0xb151
   27b74:	movw	r3, #47887	; 0xbb0f
   27b78:	mov	r1, r0
   27b7c:	mov	r0, #1
   27b80:	movt	r2, #2
   27b84:	movt	r3, #2
   27b88:	bl	11688 <__printf_chk@plt>
   27b8c:	movw	r1, #49886	; 0xc2de
   27b90:	mov	r0, #0
   27b94:	mov	r2, #5
   27b98:	movt	r1, #2
   27b9c:	bl	114e4 <dcgettext@plt>
   27ba0:	movw	r2, #49925	; 0xc305
   27ba4:	mov	r1, r0
   27ba8:	mov	r0, #1
   27bac:	movt	r2, #2
   27bb0:	pop	{fp, lr}
   27bb4:	b	11688 <__printf_chk@plt>
   27bb8:	push	{r4, r5, r6, sl, fp, lr}
   27bbc:	add	fp, sp, #16
   27bc0:	mov	r4, r2
   27bc4:	mov	r5, r1
   27bc8:	mov	r6, r0
   27bcc:	bl	2acec <__assert_fail@plt+0x1958c>
   27bd0:	cmp	r0, #0
   27bd4:	popne	{r4, r5, r6, sl, fp, pc}
   27bd8:	cmp	r6, #0
   27bdc:	beq	27bf0 <__assert_fail@plt+0x16490>
   27be0:	cmp	r5, #0
   27be4:	cmpne	r4, #0
   27be8:	bne	27bf0 <__assert_fail@plt+0x16490>
   27bec:	pop	{r4, r5, r6, sl, fp, pc}
   27bf0:	bl	11860 <__assert_fail@plt+0x100>
   27bf4:	push	{r4, r5, r6, sl, fp, lr}
   27bf8:	add	fp, sp, #16
   27bfc:	mov	r4, r2
   27c00:	mov	r5, r1
   27c04:	mov	r6, r0
   27c08:	bl	2acec <__assert_fail@plt+0x1958c>
   27c0c:	cmp	r0, #0
   27c10:	popne	{r4, r5, r6, sl, fp, pc}
   27c14:	cmp	r6, #0
   27c18:	beq	27c2c <__assert_fail@plt+0x164cc>
   27c1c:	cmp	r5, #0
   27c20:	cmpne	r4, #0
   27c24:	bne	27c2c <__assert_fail@plt+0x164cc>
   27c28:	pop	{r4, r5, r6, sl, fp, pc}
   27c2c:	bl	11860 <__assert_fail@plt+0x100>
   27c30:	push	{fp, lr}
   27c34:	mov	fp, sp
   27c38:	bl	2a8ac <__assert_fail@plt+0x1914c>
   27c3c:	cmp	r0, #0
   27c40:	popne	{fp, pc}
   27c44:	bl	11860 <__assert_fail@plt+0x100>
   27c48:	push	{fp, lr}
   27c4c:	mov	fp, sp
   27c50:	bl	2a8ac <__assert_fail@plt+0x1914c>
   27c54:	cmp	r0, #0
   27c58:	popne	{fp, pc}
   27c5c:	bl	11860 <__assert_fail@plt+0x100>
   27c60:	push	{fp, lr}
   27c64:	mov	fp, sp
   27c68:	bl	2a8ac <__assert_fail@plt+0x1914c>
   27c6c:	cmp	r0, #0
   27c70:	popne	{fp, pc}
   27c74:	bl	11860 <__assert_fail@plt+0x100>
   27c78:	push	{r4, r5, fp, lr}
   27c7c:	add	fp, sp, #8
   27c80:	mov	r4, r1
   27c84:	mov	r5, r0
   27c88:	bl	2a8dc <__assert_fail@plt+0x1917c>
   27c8c:	cmp	r0, #0
   27c90:	popne	{r4, r5, fp, pc}
   27c94:	cmp	r5, #0
   27c98:	beq	27ca8 <__assert_fail@plt+0x16548>
   27c9c:	cmp	r4, #0
   27ca0:	bne	27ca8 <__assert_fail@plt+0x16548>
   27ca4:	pop	{r4, r5, fp, pc}
   27ca8:	bl	11860 <__assert_fail@plt+0x100>
   27cac:	push	{fp, lr}
   27cb0:	mov	fp, sp
   27cb4:	cmp	r1, #0
   27cb8:	orreq	r1, r1, #1
   27cbc:	bl	2a8dc <__assert_fail@plt+0x1917c>
   27cc0:	cmp	r0, #0
   27cc4:	popne	{fp, pc}
   27cc8:	bl	11860 <__assert_fail@plt+0x100>
   27ccc:	push	{fp, lr}
   27cd0:	mov	fp, sp
   27cd4:	clz	r3, r2
   27cd8:	lsr	ip, r3, #5
   27cdc:	clz	r3, r1
   27ce0:	lsr	r3, r3, #5
   27ce4:	orrs	r3, r3, ip
   27ce8:	movwne	r1, #1
   27cec:	movwne	r2, #1
   27cf0:	bl	2acec <__assert_fail@plt+0x1958c>
   27cf4:	cmp	r0, #0
   27cf8:	popne	{fp, pc}
   27cfc:	bl	11860 <__assert_fail@plt+0x100>
   27d00:	push	{fp, lr}
   27d04:	mov	fp, sp
   27d08:	mov	r2, r1
   27d0c:	mov	r1, r0
   27d10:	mov	r0, #0
   27d14:	bl	2acec <__assert_fail@plt+0x1958c>
   27d18:	cmp	r0, #0
   27d1c:	popne	{fp, pc}
   27d20:	bl	11860 <__assert_fail@plt+0x100>
   27d24:	push	{fp, lr}
   27d28:	mov	fp, sp
   27d2c:	mov	r2, r1
   27d30:	mov	r1, r0
   27d34:	clz	r0, r2
   27d38:	clz	r3, r1
   27d3c:	lsr	r0, r0, #5
   27d40:	lsr	r3, r3, #5
   27d44:	orrs	r0, r3, r0
   27d48:	movwne	r1, #1
   27d4c:	movwne	r2, #1
   27d50:	mov	r0, #0
   27d54:	bl	2acec <__assert_fail@plt+0x1958c>
   27d58:	cmp	r0, #0
   27d5c:	popne	{fp, pc}
   27d60:	bl	11860 <__assert_fail@plt+0x100>
   27d64:	push	{r4, r5, r6, sl, fp, lr}
   27d68:	add	fp, sp, #16
   27d6c:	ldr	r5, [r1]
   27d70:	mov	r4, r1
   27d74:	mov	r6, r0
   27d78:	cmp	r0, #0
   27d7c:	beq	27d94 <__assert_fail@plt+0x16634>
   27d80:	mov	r0, #1
   27d84:	add	r0, r0, r5, lsr #1
   27d88:	adds	r5, r5, r0
   27d8c:	bcc	27d9c <__assert_fail@plt+0x1663c>
   27d90:	b	27dd8 <__assert_fail@plt+0x16678>
   27d94:	cmp	r5, #0
   27d98:	movweq	r5, #64	; 0x40
   27d9c:	mov	r0, r6
   27da0:	mov	r1, r5
   27da4:	mov	r2, #1
   27da8:	bl	2acec <__assert_fail@plt+0x1958c>
   27dac:	cmp	r5, #0
   27db0:	mov	r1, r5
   27db4:	movwne	r1, #1
   27db8:	cmp	r0, #0
   27dbc:	bne	27dd0 <__assert_fail@plt+0x16670>
   27dc0:	clz	r2, r6
   27dc4:	lsr	r2, r2, #5
   27dc8:	orrs	r1, r2, r1
   27dcc:	bne	27dd8 <__assert_fail@plt+0x16678>
   27dd0:	str	r5, [r4]
   27dd4:	pop	{r4, r5, r6, sl, fp, pc}
   27dd8:	bl	11860 <__assert_fail@plt+0x100>
   27ddc:	push	{r4, r5, r6, r7, fp, lr}
   27de0:	add	fp, sp, #16
   27de4:	ldr	r5, [r1]
   27de8:	mov	r6, r2
   27dec:	mov	r4, r1
   27df0:	mov	r7, r0
   27df4:	cmp	r0, #0
   27df8:	beq	27e10 <__assert_fail@plt+0x166b0>
   27dfc:	mov	r0, #1
   27e00:	add	r0, r0, r5, lsr #1
   27e04:	adds	r5, r5, r0
   27e08:	bcc	27e28 <__assert_fail@plt+0x166c8>
   27e0c:	b	27e5c <__assert_fail@plt+0x166fc>
   27e10:	cmp	r5, #0
   27e14:	bne	27e28 <__assert_fail@plt+0x166c8>
   27e18:	mov	r0, #64	; 0x40
   27e1c:	cmp	r6, #64	; 0x40
   27e20:	udiv	r5, r0, r6
   27e24:	addhi	r5, r5, #1
   27e28:	mov	r0, r7
   27e2c:	mov	r1, r5
   27e30:	mov	r2, r6
   27e34:	bl	2acec <__assert_fail@plt+0x1958c>
   27e38:	cmp	r0, #0
   27e3c:	bne	27e54 <__assert_fail@plt+0x166f4>
   27e40:	cmp	r7, #0
   27e44:	beq	27e5c <__assert_fail@plt+0x166fc>
   27e48:	cmp	r6, #0
   27e4c:	cmpne	r5, #0
   27e50:	bne	27e5c <__assert_fail@plt+0x166fc>
   27e54:	str	r5, [r4]
   27e58:	pop	{r4, r5, r6, r7, fp, pc}
   27e5c:	bl	11860 <__assert_fail@plt+0x100>
   27e60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   27e64:	add	fp, sp, #24
   27e68:	mov	r8, r1
   27e6c:	ldr	r1, [r1]
   27e70:	mov	r5, r0
   27e74:	add	r0, r1, r1, asr #1
   27e78:	cmp	r0, r1
   27e7c:	mvnvs	r0, #-2147483648	; 0x80000000
   27e80:	cmp	r0, r3
   27e84:	mov	r7, r0
   27e88:	movgt	r7, r3
   27e8c:	cmn	r3, #1
   27e90:	movle	r7, r0
   27e94:	ldr	r0, [fp, #8]
   27e98:	cmn	r0, #1
   27e9c:	ble	27ec4 <__assert_fail@plt+0x16764>
   27ea0:	cmp	r0, #0
   27ea4:	beq	27f18 <__assert_fail@plt+0x167b8>
   27ea8:	cmn	r7, #1
   27eac:	ble	27eec <__assert_fail@plt+0x1678c>
   27eb0:	mvn	r4, #-2147483648	; 0x80000000
   27eb4:	udiv	r6, r4, r0
   27eb8:	cmp	r6, r7
   27ebc:	bge	27f18 <__assert_fail@plt+0x167b8>
   27ec0:	b	27f28 <__assert_fail@plt+0x167c8>
   27ec4:	cmn	r7, #1
   27ec8:	ble	27f08 <__assert_fail@plt+0x167a8>
   27ecc:	cmn	r0, #1
   27ed0:	beq	27f18 <__assert_fail@plt+0x167b8>
   27ed4:	mov	r6, #-2147483648	; 0x80000000
   27ed8:	mvn	r4, #-2147483648	; 0x80000000
   27edc:	sdiv	r6, r6, r0
   27ee0:	cmp	r6, r7
   27ee4:	bge	27f18 <__assert_fail@plt+0x167b8>
   27ee8:	b	27f28 <__assert_fail@plt+0x167c8>
   27eec:	beq	27f18 <__assert_fail@plt+0x167b8>
   27ef0:	mov	r6, #-2147483648	; 0x80000000
   27ef4:	mvn	r4, #-2147483648	; 0x80000000
   27ef8:	sdiv	r6, r6, r7
   27efc:	cmp	r6, r0
   27f00:	bge	27f18 <__assert_fail@plt+0x167b8>
   27f04:	b	27f28 <__assert_fail@plt+0x167c8>
   27f08:	mvn	r4, #-2147483648	; 0x80000000
   27f0c:	sdiv	r6, r4, r0
   27f10:	cmp	r7, r6
   27f14:	blt	27f28 <__assert_fail@plt+0x167c8>
   27f18:	mul	r6, r7, r0
   27f1c:	mov	r4, #64	; 0x40
   27f20:	cmp	r6, #63	; 0x3f
   27f24:	bgt	27f30 <__assert_fail@plt+0x167d0>
   27f28:	sdiv	r7, r4, r0
   27f2c:	mul	r6, r7, r0
   27f30:	cmp	r5, #0
   27f34:	moveq	r4, #0
   27f38:	streq	r4, [r8]
   27f3c:	sub	r4, r7, r1
   27f40:	cmp	r4, r2
   27f44:	bge	27ff0 <__assert_fail@plt+0x16890>
   27f48:	add	r7, r1, r2
   27f4c:	mov	r6, #0
   27f50:	mov	r2, #0
   27f54:	cmp	r7, r3
   27f58:	movwgt	r6, #1
   27f5c:	cmn	r3, #1
   27f60:	movwgt	r2, #1
   27f64:	cmp	r7, r1
   27f68:	bvs	28024 <__assert_fail@plt+0x168c4>
   27f6c:	ands	r1, r2, r6
   27f70:	bne	28024 <__assert_fail@plt+0x168c4>
   27f74:	cmn	r0, #1
   27f78:	ble	27fa0 <__assert_fail@plt+0x16840>
   27f7c:	cmp	r0, #0
   27f80:	beq	27fec <__assert_fail@plt+0x1688c>
   27f84:	cmn	r7, #1
   27f88:	ble	27fc4 <__assert_fail@plt+0x16864>
   27f8c:	mvn	r1, #-2147483648	; 0x80000000
   27f90:	udiv	r1, r1, r0
   27f94:	cmp	r1, r7
   27f98:	bge	27fec <__assert_fail@plt+0x1688c>
   27f9c:	b	28024 <__assert_fail@plt+0x168c4>
   27fa0:	cmn	r7, #1
   27fa4:	ble	27fdc <__assert_fail@plt+0x1687c>
   27fa8:	cmn	r0, #1
   27fac:	beq	27fec <__assert_fail@plt+0x1688c>
   27fb0:	mov	r1, #-2147483648	; 0x80000000
   27fb4:	sdiv	r1, r1, r0
   27fb8:	cmp	r1, r7
   27fbc:	bge	27fec <__assert_fail@plt+0x1688c>
   27fc0:	b	28024 <__assert_fail@plt+0x168c4>
   27fc4:	beq	27fec <__assert_fail@plt+0x1688c>
   27fc8:	mov	r1, #-2147483648	; 0x80000000
   27fcc:	sdiv	r1, r1, r7
   27fd0:	cmp	r1, r0
   27fd4:	bge	27fec <__assert_fail@plt+0x1688c>
   27fd8:	b	28024 <__assert_fail@plt+0x168c4>
   27fdc:	mvn	r1, #-2147483648	; 0x80000000
   27fe0:	sdiv	r1, r1, r0
   27fe4:	cmp	r7, r1
   27fe8:	blt	28024 <__assert_fail@plt+0x168c4>
   27fec:	mul	r6, r7, r0
   27ff0:	mov	r0, r5
   27ff4:	mov	r1, r6
   27ff8:	bl	2a8dc <__assert_fail@plt+0x1917c>
   27ffc:	cmp	r6, #0
   28000:	movwne	r6, #1
   28004:	cmp	r0, #0
   28008:	bne	2801c <__assert_fail@plt+0x168bc>
   2800c:	clz	r1, r5
   28010:	lsr	r1, r1, #5
   28014:	orrs	r1, r1, r6
   28018:	bne	28024 <__assert_fail@plt+0x168c4>
   2801c:	str	r7, [r8]
   28020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28024:	bl	11860 <__assert_fail@plt+0x100>
   28028:	push	{fp, lr}
   2802c:	mov	fp, sp
   28030:	mov	r1, #1
   28034:	bl	2a858 <__assert_fail@plt+0x190f8>
   28038:	cmp	r0, #0
   2803c:	popne	{fp, pc}
   28040:	bl	11860 <__assert_fail@plt+0x100>
   28044:	push	{fp, lr}
   28048:	mov	fp, sp
   2804c:	bl	2a858 <__assert_fail@plt+0x190f8>
   28050:	cmp	r0, #0
   28054:	popne	{fp, pc}
   28058:	bl	11860 <__assert_fail@plt+0x100>
   2805c:	push	{fp, lr}
   28060:	mov	fp, sp
   28064:	mov	r1, #1
   28068:	bl	2a858 <__assert_fail@plt+0x190f8>
   2806c:	cmp	r0, #0
   28070:	popne	{fp, pc}
   28074:	bl	11860 <__assert_fail@plt+0x100>
   28078:	push	{fp, lr}
   2807c:	mov	fp, sp
   28080:	bl	2a858 <__assert_fail@plt+0x190f8>
   28084:	cmp	r0, #0
   28088:	popne	{fp, pc}
   2808c:	bl	11860 <__assert_fail@plt+0x100>
   28090:	push	{r4, r5, r6, sl, fp, lr}
   28094:	add	fp, sp, #16
   28098:	mov	r5, r0
   2809c:	mov	r0, r1
   280a0:	mov	r4, r1
   280a4:	bl	2a8ac <__assert_fail@plt+0x1914c>
   280a8:	cmp	r0, #0
   280ac:	beq	280c8 <__assert_fail@plt+0x16968>
   280b0:	mov	r1, r5
   280b4:	mov	r2, r4
   280b8:	mov	r6, r0
   280bc:	bl	11484 <memcpy@plt>
   280c0:	mov	r0, r6
   280c4:	pop	{r4, r5, r6, sl, fp, pc}
   280c8:	bl	11860 <__assert_fail@plt+0x100>
   280cc:	push	{r4, r5, r6, sl, fp, lr}
   280d0:	add	fp, sp, #16
   280d4:	mov	r5, r0
   280d8:	mov	r0, r1
   280dc:	mov	r4, r1
   280e0:	bl	2a8ac <__assert_fail@plt+0x1914c>
   280e4:	cmp	r0, #0
   280e8:	beq	28104 <__assert_fail@plt+0x169a4>
   280ec:	mov	r1, r5
   280f0:	mov	r2, r4
   280f4:	mov	r6, r0
   280f8:	bl	11484 <memcpy@plt>
   280fc:	mov	r0, r6
   28100:	pop	{r4, r5, r6, sl, fp, pc}
   28104:	bl	11860 <__assert_fail@plt+0x100>
   28108:	push	{r4, r5, r6, sl, fp, lr}
   2810c:	add	fp, sp, #16
   28110:	mov	r5, r0
   28114:	add	r0, r1, #1
   28118:	mov	r4, r1
   2811c:	bl	2a8ac <__assert_fail@plt+0x1914c>
   28120:	cmp	r0, #0
   28124:	beq	2814c <__assert_fail@plt+0x169ec>
   28128:	mov	r6, r0
   2812c:	mov	r0, #0
   28130:	mov	r1, r5
   28134:	mov	r2, r4
   28138:	strb	r0, [r6, r4]
   2813c:	mov	r0, r6
   28140:	bl	11484 <memcpy@plt>
   28144:	mov	r0, r6
   28148:	pop	{r4, r5, r6, sl, fp, pc}
   2814c:	bl	11860 <__assert_fail@plt+0x100>
   28150:	push	{r4, r5, r6, sl, fp, lr}
   28154:	add	fp, sp, #16
   28158:	mov	r4, r0
   2815c:	bl	11628 <strlen@plt>
   28160:	add	r5, r0, #1
   28164:	mov	r0, r5
   28168:	bl	2a8ac <__assert_fail@plt+0x1914c>
   2816c:	cmp	r0, #0
   28170:	beq	2818c <__assert_fail@plt+0x16a2c>
   28174:	mov	r1, r4
   28178:	mov	r2, r5
   2817c:	mov	r6, r0
   28180:	bl	11484 <memcpy@plt>
   28184:	mov	r0, r6
   28188:	pop	{r4, r5, r6, sl, fp, pc}
   2818c:	bl	11860 <__assert_fail@plt+0x100>
   28190:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   28194:	add	fp, sp, #24
   28198:	sub	sp, sp, #16
   2819c:	mov	r8, r0
   281a0:	ldr	r0, [fp, #16]
   281a4:	mov	r7, r3
   281a8:	mov	r4, r2
   281ac:	mov	r2, r1
   281b0:	add	r3, sp, #8
   281b4:	mov	r1, #0
   281b8:	str	r0, [sp]
   281bc:	mov	r0, r8
   281c0:	bl	282a0 <__assert_fail@plt+0x16b40>
   281c4:	cmp	r0, #0
   281c8:	bne	28274 <__assert_fail@plt+0x16b14>
   281cc:	ldr	r6, [sp, #8]
   281d0:	ldr	r5, [sp, #12]
   281d4:	subs	r0, r6, r4
   281d8:	sbcs	r0, r5, r7
   281dc:	blt	28200 <__assert_fail@plt+0x16aa0>
   281e0:	ldr	r1, [fp, #8]
   281e4:	ldr	r0, [fp, #12]
   281e8:	subs	r1, r1, r6
   281ec:	sbcs	r0, r0, r5
   281f0:	movge	r0, r6
   281f4:	movge	r1, r5
   281f8:	subge	sp, fp, #24
   281fc:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   28200:	subs	r0, r6, #1073741824	; 0x40000000
   28204:	sbcs	r0, r5, #0
   28208:	blt	28218 <__assert_fail@plt+0x16ab8>
   2820c:	bl	11640 <__errno_location@plt>
   28210:	mov	r1, #75	; 0x4b
   28214:	b	28234 <__assert_fail@plt+0x16ad4>
   28218:	bl	11640 <__errno_location@plt>
   2821c:	mvn	r2, #1073741824	; 0x40000000
   28220:	mvn	r1, #0
   28224:	subs	r2, r2, r6
   28228:	sbcs	r1, r1, r5
   2822c:	movlt	r1, #34	; 0x22
   28230:	movge	r1, #75	; 0x4b
   28234:	str	r1, [r0]
   28238:	ldr	r6, [r0]
   2823c:	ldr	r4, [fp, #24]
   28240:	ldr	r5, [fp, #20]
   28244:	mov	r0, r8
   28248:	bl	15f84 <__assert_fail@plt+0x4824>
   2824c:	subs	r1, r6, #22
   28250:	movw	r2, #48387	; 0xbd03
   28254:	str	r0, [sp]
   28258:	mov	r3, r5
   2825c:	movne	r1, r6
   28260:	cmp	r4, #0
   28264:	movt	r2, #2
   28268:	movweq	r4, #1
   2826c:	mov	r0, r4
   28270:	bl	11598 <error@plt>
   28274:	cmp	r0, #1
   28278:	beq	2820c <__assert_fail@plt+0x16aac>
   2827c:	cmp	r0, #3
   28280:	bne	28290 <__assert_fail@plt+0x16b30>
   28284:	bl	11640 <__errno_location@plt>
   28288:	mov	r1, #0
   2828c:	b	28234 <__assert_fail@plt+0x16ad4>
   28290:	bl	11640 <__errno_location@plt>
   28294:	b	28238 <__assert_fail@plt+0x16ad8>
   28298:	mov	r1, #10
   2829c:	b	28190 <__assert_fail@plt+0x16a30>
   282a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282a4:	add	fp, sp, #28
   282a8:	sub	sp, sp, #36	; 0x24
   282ac:	cmp	r2, #37	; 0x25
   282b0:	bcs	29b98 <__assert_fail@plt+0x18438>
   282b4:	ldr	r8, [fp, #8]
   282b8:	mov	r9, r3
   282bc:	mov	r6, r2
   282c0:	mov	r7, r1
   282c4:	mov	r4, r0
   282c8:	bl	11640 <__errno_location@plt>
   282cc:	add	sl, sp, #32
   282d0:	cmp	r7, #0
   282d4:	mov	r5, r0
   282d8:	mov	r0, #0
   282dc:	mov	r2, r6
   282e0:	mov	r3, #0
   282e4:	movne	sl, r7
   282e8:	str	r0, [r5]
   282ec:	mov	r0, r4
   282f0:	mov	r1, sl
   282f4:	bl	11700 <__strtoll_internal@plt>
   282f8:	mov	r7, r1
   282fc:	ldr	r1, [sl]
   28300:	cmp	r1, r4
   28304:	beq	28334 <__assert_fail@plt+0x16bd4>
   28308:	mov	r6, r0
   2830c:	ldr	r0, [r5]
   28310:	cmp	r0, #0
   28314:	beq	28374 <__assert_fail@plt+0x16c14>
   28318:	mov	r5, #4
   2831c:	cmp	r0, #34	; 0x22
   28320:	bne	297a8 <__assert_fail@plt+0x18048>
   28324:	mov	r5, #1
   28328:	cmp	r8, #0
   2832c:	bne	28380 <__assert_fail@plt+0x16c20>
   28330:	b	297a4 <__assert_fail@plt+0x18044>
   28334:	mov	r5, #4
   28338:	cmp	r8, #0
   2833c:	beq	297a8 <__assert_fail@plt+0x18048>
   28340:	mov	r6, r1
   28344:	ldrb	r1, [r4]
   28348:	cmp	r1, #0
   2834c:	beq	297a8 <__assert_fail@plt+0x18048>
   28350:	mov	r0, r8
   28354:	bl	11634 <strchr@plt>
   28358:	cmp	r0, #0
   2835c:	beq	297a8 <__assert_fail@plt+0x18048>
   28360:	mov	r1, r6
   28364:	mov	r5, #0
   28368:	mov	r6, #1
   2836c:	mov	r7, #0
   28370:	b	28380 <__assert_fail@plt+0x16c20>
   28374:	mov	r5, r0
   28378:	cmp	r8, #0
   2837c:	beq	297a4 <__assert_fail@plt+0x18044>
   28380:	ldrb	r4, [r1]
   28384:	cmp	r4, #0
   28388:	beq	297a4 <__assert_fail@plt+0x18044>
   2838c:	str	r1, [sp, #20]
   28390:	mov	r0, r8
   28394:	mov	r1, r4
   28398:	bl	11634 <strchr@plt>
   2839c:	cmp	r0, #0
   283a0:	beq	2862c <__assert_fail@plt+0x16ecc>
   283a4:	sub	r0, r4, #69	; 0x45
   283a8:	mov	r1, #1
   283ac:	mov	r3, #0
   283b0:	mov	r2, #1024	; 0x400
   283b4:	cmp	r0, #47	; 0x2f
   283b8:	str	r1, [sp, #16]
   283bc:	bhi	284f8 <__assert_fail@plt+0x16d98>
   283c0:	add	r1, pc, #0
   283c4:	ldr	pc, [r1, r0, lsl #2]
   283c8:	andeq	r8, r2, r8, lsl #9
   283cc:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283d0:	andeq	r8, r2, r8, lsl #9
   283d4:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283d8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283dc:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283e0:	andeq	r8, r2, r8, lsl #9
   283e4:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283e8:	andeq	r8, r2, r8, lsl #9
   283ec:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283f0:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283f4:	andeq	r8, r2, r8, lsl #9
   283f8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   283fc:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28400:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28404:	andeq	r8, r2, r8, lsl #9
   28408:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2840c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28410:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28414:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28418:	andeq	r8, r2, r8, lsl #9
   2841c:	andeq	r8, r2, r8, lsl #9
   28420:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28424:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28428:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2842c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28430:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28434:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28438:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2843c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28440:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28444:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28448:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2844c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28450:	andeq	r8, r2, r8, lsl #9
   28454:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28458:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2845c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28460:	andeq	r8, r2, r8, lsl #9
   28464:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28468:	andeq	r8, r2, r8, lsl #9
   2846c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28470:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28474:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28478:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   2847c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28480:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   28484:	andeq	r8, r2, r8, lsl #9
   28488:	mov	r0, r8
   2848c:	mov	r1, #48	; 0x30
   28490:	bl	11634 <strchr@plt>
   28494:	cmp	r0, #0
   28498:	beq	284c4 <__assert_fail@plt+0x16d64>
   2849c:	ldr	r1, [sp, #20]
   284a0:	ldrb	r0, [r1, #1]
   284a4:	cmp	r0, #66	; 0x42
   284a8:	cmpne	r0, #68	; 0x44
   284ac:	bne	284cc <__assert_fail@plt+0x16d6c>
   284b0:	mov	r0, #2
   284b4:	mov	r2, #1000	; 0x3e8
   284b8:	mov	r3, #0
   284bc:	str	r0, [sp, #16]
   284c0:	b	284f8 <__assert_fail@plt+0x16d98>
   284c4:	mov	r3, #0
   284c8:	b	284f4 <__assert_fail@plt+0x16d94>
   284cc:	cmp	r0, #105	; 0x69
   284d0:	mov	r3, #0
   284d4:	bne	284f4 <__assert_fail@plt+0x16d94>
   284d8:	ldrb	r0, [r1, #2]
   284dc:	mov	r1, #1
   284e0:	mov	r2, #1024	; 0x400
   284e4:	cmp	r0, #66	; 0x42
   284e8:	movweq	r1, #3
   284ec:	str	r1, [sp, #16]
   284f0:	b	284f8 <__assert_fail@plt+0x16d98>
   284f4:	mov	r2, #1024	; 0x400
   284f8:	sub	r0, r4, #66	; 0x42
   284fc:	cmp	r0, #53	; 0x35
   28500:	bhi	2862c <__assert_fail@plt+0x16ecc>
   28504:	add	r1, pc, #8
   28508:	str	r3, [sp, #28]
   2850c:	str	r2, [sp, #24]
   28510:	ldr	pc, [r1, r0, lsl #2]
   28514:	andeq	r8, r2, ip, lsr #14
   28518:	andeq	r8, r2, ip, lsr #12
   2851c:	andeq	r8, r2, ip, lsr #12
   28520:	andeq	r8, r2, r0, asr #14
   28524:	andeq	r8, r2, ip, lsr #12
   28528:	andeq	r8, r2, ip, ror #11
   2852c:	andeq	r8, r2, ip, lsr #12
   28530:	andeq	r8, r2, ip, lsr #12
   28534:	andeq	r8, r2, ip, lsr #12
   28538:	andeq	r8, r2, r4, lsr r6
   2853c:	andeq	r8, r2, ip, lsr #12
   28540:	andeq	r8, r2, r4, ror #12
   28544:	andeq	r8, r2, ip, lsr #12
   28548:	andeq	r8, r2, ip, lsr #12
   2854c:	andeq	r8, r2, r4, lsl #15
   28550:	andeq	r8, r2, ip, lsr #12
   28554:	andeq	r8, r2, ip, lsr #12
   28558:	andeq	r8, r2, ip, lsr #12
   2855c:	andeq	r8, r2, r4, lsr #13
   28560:	andeq	r8, r2, ip, lsr #12
   28564:	andeq	r8, r2, ip, lsr #12
   28568:	andeq	r8, r2, ip, lsr #12
   2856c:	andeq	r8, r2, ip, lsr #12
   28570:	andeq	r8, r2, r8, asr #15
   28574:	andeq	r8, r2, r8, ror #13
   28578:	andeq	r8, r2, ip, lsr #12
   2857c:	andeq	r8, r2, ip, lsr #12
   28580:	andeq	r8, r2, ip, lsr #12
   28584:	andeq	r8, r2, ip, lsr #12
   28588:	andeq	r8, r2, ip, lsr #12
   2858c:	andeq	r8, r2, ip, lsr #12
   28590:	andeq	r8, r2, ip, lsr #12
   28594:	andeq	r8, r2, ip, lsl #16
   28598:	andeq	r9, r2, r4, lsl #15
   2859c:	andeq	r8, r2, ip, lsr #12
   285a0:	andeq	r8, r2, ip, lsr #12
   285a4:	andeq	r8, r2, ip, lsr #12
   285a8:	andeq	r8, r2, ip, ror #11
   285ac:	andeq	r8, r2, ip, lsr #12
   285b0:	andeq	r8, r2, ip, lsr #12
   285b4:	andeq	r8, r2, ip, lsr #12
   285b8:	andeq	r8, r2, r4, lsr r6
   285bc:	andeq	r8, r2, ip, lsr #12
   285c0:	andeq	r8, r2, r4, ror #12
   285c4:	andeq	r8, r2, ip, lsr #12
   285c8:	andeq	r8, r2, ip, lsr #12
   285cc:	andeq	r8, r2, ip, lsr #12
   285d0:	andeq	r8, r2, ip, lsr #12
   285d4:	andeq	r8, r2, ip, lsr #12
   285d8:	andeq	r8, r2, ip, lsr #12
   285dc:	andeq	r8, r2, r4, lsr #13
   285e0:	andeq	r8, r2, ip, lsr #12
   285e4:	andeq	r8, r2, ip, lsr #12
   285e8:	andeq	r8, r2, r0, lsr #16
   285ec:	cmn	r7, #1
   285f0:	str	r9, [sp, #12]
   285f4:	ble	28834 <__assert_fail@plt+0x170d4>
   285f8:	ldr	r3, [sp, #28]
   285fc:	mvn	r0, #0
   28600:	mvn	r1, #-2147483648	; 0x80000000
   28604:	mvn	r8, #0
   28608:	mvn	r9, #-2147483648	; 0x80000000
   2860c:	bl	2af04 <__assert_fail@plt+0x197a4>
   28610:	ldr	r2, [sp, #24]
   28614:	ldr	r3, [sp, #28]
   28618:	subs	r0, r0, r6
   2861c:	mov	r4, #1
   28620:	sbcs	r0, r1, r7
   28624:	bge	28874 <__assert_fail@plt+0x17114>
   28628:	b	2888c <__assert_fail@plt+0x1712c>
   2862c:	orr	r5, r5, #2
   28630:	b	297a4 <__assert_fail@plt+0x18044>
   28634:	cmn	r7, #1
   28638:	ble	288c8 <__assert_fail@plt+0x17168>
   2863c:	ldr	r3, [sp, #28]
   28640:	mvn	r0, #0
   28644:	mvn	r1, #-2147483648	; 0x80000000
   28648:	bl	2af04 <__assert_fail@plt+0x197a4>
   2864c:	ldr	r2, [sp, #24]
   28650:	ldr	r3, [sp, #28]
   28654:	subs	r0, r0, r6
   28658:	sbcs	r0, r1, r7
   2865c:	bge	288fc <__assert_fail@plt+0x1719c>
   28660:	b	2900c <__assert_fail@plt+0x178ac>
   28664:	cmn	r7, #1
   28668:	str	r9, [sp, #12]
   2866c:	ble	28910 <__assert_fail@plt+0x171b0>
   28670:	ldr	r3, [sp, #28]
   28674:	mvn	r0, #0
   28678:	mvn	r1, #-2147483648	; 0x80000000
   2867c:	mvn	r8, #0
   28680:	mvn	r9, #-2147483648	; 0x80000000
   28684:	bl	2af04 <__assert_fail@plt+0x197a4>
   28688:	ldr	r2, [sp, #24]
   2868c:	ldr	r3, [sp, #28]
   28690:	subs	r0, r0, r6
   28694:	mov	r4, #1
   28698:	sbcs	r0, r1, r7
   2869c:	bge	28950 <__assert_fail@plt+0x171f0>
   286a0:	b	28968 <__assert_fail@plt+0x17208>
   286a4:	cmn	r7, #1
   286a8:	str	r9, [sp, #12]
   286ac:	ble	289a0 <__assert_fail@plt+0x17240>
   286b0:	ldr	r3, [sp, #28]
   286b4:	mvn	r0, #0
   286b8:	mvn	r1, #-2147483648	; 0x80000000
   286bc:	mvn	r9, #-2147483648	; 0x80000000
   286c0:	str	r0, [sp, #8]
   286c4:	mvn	r0, #0
   286c8:	bl	2af04 <__assert_fail@plt+0x197a4>
   286cc:	ldr	r2, [sp, #24]
   286d0:	ldr	r3, [sp, #28]
   286d4:	subs	r0, r0, r6
   286d8:	mov	r4, #1
   286dc:	sbcs	r0, r1, r7
   286e0:	bge	289e4 <__assert_fail@plt+0x17284>
   286e4:	b	28a00 <__assert_fail@plt+0x172a0>
   286e8:	cmp	r7, #0
   286ec:	str	r9, [sp, #12]
   286f0:	blt	28ce8 <__assert_fail@plt+0x17588>
   286f4:	ldr	r3, [sp, #28]
   286f8:	mvn	r0, #0
   286fc:	mvn	r1, #-2147483648	; 0x80000000
   28700:	mvn	r9, #-2147483648	; 0x80000000
   28704:	str	r0, [sp, #8]
   28708:	mvn	r0, #0
   2870c:	bl	2af04 <__assert_fail@plt+0x197a4>
   28710:	ldr	r2, [sp, #24]
   28714:	ldr	r3, [sp, #28]
   28718:	subs	r0, r0, r6
   2871c:	mov	r4, #1
   28720:	sbcs	r0, r1, r7
   28724:	bge	28d2c <__assert_fail@plt+0x175cc>
   28728:	b	28d48 <__assert_fail@plt+0x175e8>
   2872c:	cmn	r7, #1
   28730:	ble	28d84 <__assert_fail@plt+0x17624>
   28734:	cmp	r7, #2097152	; 0x200000
   28738:	blt	28db4 <__assert_fail@plt+0x17654>
   2873c:	b	2900c <__assert_fail@plt+0x178ac>
   28740:	cmp	r7, #0
   28744:	str	r9, [sp, #12]
   28748:	blt	28dc4 <__assert_fail@plt+0x17664>
   2874c:	ldr	r3, [sp, #28]
   28750:	mvn	r0, #0
   28754:	mvn	r1, #-2147483648	; 0x80000000
   28758:	mvn	r9, #-2147483648	; 0x80000000
   2875c:	str	r0, [sp, #8]
   28760:	mvn	r0, #0
   28764:	bl	2af04 <__assert_fail@plt+0x197a4>
   28768:	ldr	r2, [sp, #24]
   2876c:	ldr	r3, [sp, #28]
   28770:	subs	r0, r0, r6
   28774:	mov	r4, #1
   28778:	sbcs	r0, r1, r7
   2877c:	bge	28e08 <__assert_fail@plt+0x176a8>
   28780:	b	28e24 <__assert_fail@plt+0x176c4>
   28784:	cmp	r7, #0
   28788:	str	r9, [sp, #12]
   2878c:	blt	28e60 <__assert_fail@plt+0x17700>
   28790:	ldr	r3, [sp, #28]
   28794:	mvn	r0, #0
   28798:	mvn	r1, #-2147483648	; 0x80000000
   2879c:	mvn	r8, #-2147483648	; 0x80000000
   287a0:	str	r0, [sp, #8]
   287a4:	mvn	r0, #0
   287a8:	bl	2af04 <__assert_fail@plt+0x197a4>
   287ac:	ldr	r2, [sp, #24]
   287b0:	ldr	r3, [sp, #28]
   287b4:	subs	r0, r0, r6
   287b8:	mov	r4, #1
   287bc:	sbcs	r0, r1, r7
   287c0:	bge	28ea4 <__assert_fail@plt+0x17744>
   287c4:	b	28ec0 <__assert_fail@plt+0x17760>
   287c8:	cmp	r7, #0
   287cc:	str	r9, [sp, #12]
   287d0:	blt	28efc <__assert_fail@plt+0x1779c>
   287d4:	ldr	r3, [sp, #28]
   287d8:	mvn	r0, #0
   287dc:	mvn	r1, #-2147483648	; 0x80000000
   287e0:	mvn	r9, #-2147483648	; 0x80000000
   287e4:	str	r0, [sp, #8]
   287e8:	mvn	r0, #0
   287ec:	bl	2af04 <__assert_fail@plt+0x197a4>
   287f0:	ldr	r2, [sp, #24]
   287f4:	ldr	r3, [sp, #28]
   287f8:	subs	r0, r0, r6
   287fc:	mov	r4, #1
   28800:	sbcs	r0, r1, r7
   28804:	bge	28f40 <__assert_fail@plt+0x177e0>
   28808:	b	28f5c <__assert_fail@plt+0x177fc>
   2880c:	cmn	r7, #1
   28810:	ble	28f9c <__assert_fail@plt+0x1783c>
   28814:	cmp	r7, #4194304	; 0x400000
   28818:	blt	28fcc <__assert_fail@plt+0x1786c>
   2881c:	b	2900c <__assert_fail@plt+0x178ac>
   28820:	cmn	r7, #1
   28824:	ble	28fdc <__assert_fail@plt+0x1787c>
   28828:	cmp	r7, #1073741824	; 0x40000000
   2882c:	bge	2900c <__assert_fail@plt+0x178ac>
   28830:	b	2902c <__assert_fail@plt+0x178cc>
   28834:	and	r0, r6, r7
   28838:	cmn	r0, #1
   2883c:	beq	28874 <__assert_fail@plt+0x17114>
   28840:	mov	r0, #0
   28844:	mov	r1, #-2147483648	; 0x80000000
   28848:	mov	r2, r6
   2884c:	mov	r3, r7
   28850:	mov	r8, #0
   28854:	mov	r9, #-2147483648	; 0x80000000
   28858:	bl	2ae30 <__assert_fail@plt+0x196d0>
   2885c:	ldr	r2, [sp, #24]
   28860:	ldr	r3, [sp, #28]
   28864:	mov	r4, #1
   28868:	subs	r0, r0, r2
   2886c:	sbcs	r0, r1, r3
   28870:	blt	28a3c <__assert_fail@plt+0x172dc>
   28874:	umull	r8, r0, r6, r2
   28878:	mov	r4, #0
   2887c:	mla	r0, r6, r3, r0
   28880:	mla	r9, r7, r2, r0
   28884:	cmp	r9, #0
   28888:	blt	28a3c <__assert_fail@plt+0x172dc>
   2888c:	ldr	r3, [sp, #28]
   28890:	mvn	r0, #-2147483648	; 0x80000000
   28894:	mvn	r1, #-2147483648	; 0x80000000
   28898:	mov	r6, r4
   2889c:	mvn	r4, #0
   288a0:	str	r0, [sp, #8]
   288a4:	mvn	r0, #0
   288a8:	bl	2af04 <__assert_fail@plt+0x197a4>
   288ac:	ldr	r2, [sp, #24]
   288b0:	ldr	r3, [sp, #28]
   288b4:	subs	r0, r0, r8
   288b8:	mov	r7, #1
   288bc:	sbcs	r0, r1, r9
   288c0:	bge	28a78 <__assert_fail@plt+0x17318>
   288c4:	b	28a94 <__assert_fail@plt+0x17334>
   288c8:	and	r0, r6, r7
   288cc:	cmn	r0, #1
   288d0:	beq	288fc <__assert_fail@plt+0x1719c>
   288d4:	mov	r0, #0
   288d8:	mov	r1, #-2147483648	; 0x80000000
   288dc:	mov	r2, r6
   288e0:	mov	r3, r7
   288e4:	bl	2ae30 <__assert_fail@plt+0x196d0>
   288e8:	ldr	r2, [sp, #24]
   288ec:	ldr	r3, [sp, #28]
   288f0:	subs	r0, r0, r2
   288f4:	sbcs	r0, r1, r3
   288f8:	blt	2900c <__assert_fail@plt+0x178ac>
   288fc:	umull	r0, r1, r6, r2
   28900:	mla	r1, r6, r3, r1
   28904:	mov	r6, r0
   28908:	mla	r7, r7, r2, r1
   2890c:	b	29784 <__assert_fail@plt+0x18024>
   28910:	and	r0, r6, r7
   28914:	cmn	r0, #1
   28918:	beq	28950 <__assert_fail@plt+0x171f0>
   2891c:	mov	r0, #0
   28920:	mov	r1, #-2147483648	; 0x80000000
   28924:	mov	r2, r6
   28928:	mov	r3, r7
   2892c:	mov	r8, #0
   28930:	mov	r9, #-2147483648	; 0x80000000
   28934:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28938:	ldr	r2, [sp, #24]
   2893c:	ldr	r3, [sp, #28]
   28940:	mov	r4, #1
   28944:	subs	r0, r0, r2
   28948:	sbcs	r0, r1, r3
   2894c:	blt	28b28 <__assert_fail@plt+0x173c8>
   28950:	umull	r8, r0, r6, r2
   28954:	mov	r4, #0
   28958:	mla	r0, r6, r3, r0
   2895c:	mla	r9, r7, r2, r0
   28960:	cmp	r9, #0
   28964:	blt	28b28 <__assert_fail@plt+0x173c8>
   28968:	ldr	r3, [sp, #28]
   2896c:	mvn	r0, #0
   28970:	mvn	r1, #-2147483648	; 0x80000000
   28974:	str	r4, [sp, #8]
   28978:	mvn	r6, #0
   2897c:	mvn	r7, #-2147483648	; 0x80000000
   28980:	bl	2af04 <__assert_fail@plt+0x197a4>
   28984:	ldr	r4, [sp, #24]
   28988:	ldr	r3, [sp, #28]
   2898c:	subs	r0, r0, r8
   28990:	mov	r2, #1
   28994:	sbcs	r0, r1, r9
   28998:	bge	28b60 <__assert_fail@plt+0x17400>
   2899c:	b	28c98 <__assert_fail@plt+0x17538>
   289a0:	and	r0, r6, r7
   289a4:	cmn	r0, #1
   289a8:	beq	289e4 <__assert_fail@plt+0x17284>
   289ac:	mov	r0, #0
   289b0:	mov	r1, #-2147483648	; 0x80000000
   289b4:	mov	r2, r6
   289b8:	mov	r3, r7
   289bc:	bl	2ae30 <__assert_fail@plt+0x196d0>
   289c0:	ldr	r2, [sp, #24]
   289c4:	ldr	r3, [sp, #28]
   289c8:	mov	r4, #1
   289cc:	mov	r9, #-2147483648	; 0x80000000
   289d0:	subs	r0, r0, r2
   289d4:	sbcs	r0, r1, r3
   289d8:	mov	r0, #0
   289dc:	str	r0, [sp, #8]
   289e0:	blt	28b74 <__assert_fail@plt+0x17414>
   289e4:	umull	r1, r0, r6, r2
   289e8:	mov	r4, #0
   289ec:	mla	r0, r6, r3, r0
   289f0:	str	r1, [sp, #8]
   289f4:	mla	r9, r7, r2, r0
   289f8:	cmp	r9, #0
   289fc:	blt	28b74 <__assert_fail@plt+0x17414>
   28a00:	ldr	r3, [sp, #28]
   28a04:	mvn	r0, #0
   28a08:	mvn	r1, #-2147483648	; 0x80000000
   28a0c:	str	r4, [sp, #4]
   28a10:	mvn	r6, #0
   28a14:	mvn	r8, #-2147483648	; 0x80000000
   28a18:	bl	2af04 <__assert_fail@plt+0x197a4>
   28a1c:	ldr	r4, [sp, #8]
   28a20:	ldr	r2, [sp, #24]
   28a24:	ldr	r3, [sp, #28]
   28a28:	mov	r7, #1
   28a2c:	subs	r0, r0, r4
   28a30:	sbcs	r0, r1, r9
   28a34:	bge	28bb0 <__assert_fail@plt+0x17450>
   28a38:	b	28bc8 <__assert_fail@plt+0x17468>
   28a3c:	mov	r0, #-2147483648	; 0x80000000
   28a40:	mov	r1, #-2147483648	; 0x80000000
   28a44:	mov	r2, r8
   28a48:	mov	r3, r9
   28a4c:	mov	r6, r4
   28a50:	mov	r4, #0
   28a54:	str	r0, [sp, #8]
   28a58:	mov	r0, #0
   28a5c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28a60:	ldr	r2, [sp, #24]
   28a64:	ldr	r3, [sp, #28]
   28a68:	mov	r7, #1
   28a6c:	subs	r0, r0, r2
   28a70:	sbcs	r0, r1, r3
   28a74:	blt	28ae8 <__assert_fail@plt+0x17388>
   28a78:	umull	r4, r0, r8, r2
   28a7c:	mov	r7, r6
   28a80:	mla	r0, r8, r3, r0
   28a84:	mla	r0, r9, r2, r0
   28a88:	cmp	r0, #0
   28a8c:	str	r0, [sp, #8]
   28a90:	blt	28ae8 <__assert_fail@plt+0x17388>
   28a94:	ldr	r3, [sp, #28]
   28a98:	mvn	r0, #0
   28a9c:	mvn	r1, #-2147483648	; 0x80000000
   28aa0:	mov	r9, r7
   28aa4:	mvn	r6, #0
   28aa8:	mvn	r7, #-2147483648	; 0x80000000
   28aac:	bl	2af04 <__assert_fail@plt+0x197a4>
   28ab0:	ldr	r8, [sp, #8]
   28ab4:	ldr	r3, [sp, #24]
   28ab8:	ldr	ip, [sp, #28]
   28abc:	subs	r0, r0, r4
   28ac0:	mov	r2, #1
   28ac4:	sbcs	r0, r1, r8
   28ac8:	blt	28adc <__assert_fail@plt+0x1737c>
   28acc:	umull	r6, r0, r4, r3
   28ad0:	mov	r2, #0
   28ad4:	mla	r0, r4, ip, r0
   28ad8:	mla	r7, r8, r3, r0
   28adc:	orr	r3, r2, r9
   28ae0:	ldr	r9, [sp, #12]
   28ae4:	b	29784 <__assert_fail@plt+0x18024>
   28ae8:	ldr	r8, [sp, #8]
   28aec:	mov	r0, #0
   28af0:	mov	r1, #-2147483648	; 0x80000000
   28af4:	mov	r2, r4
   28af8:	mov	r9, r7
   28afc:	mov	r6, #0
   28b00:	mov	r7, #-2147483648	; 0x80000000
   28b04:	mov	r3, r8
   28b08:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28b0c:	ldr	r3, [sp, #24]
   28b10:	ldr	ip, [sp, #28]
   28b14:	mov	r2, #1
   28b18:	subs	r0, r0, r3
   28b1c:	sbcs	r0, r1, ip
   28b20:	bge	28acc <__assert_fail@plt+0x1736c>
   28b24:	b	28adc <__assert_fail@plt+0x1737c>
   28b28:	mov	r0, #0
   28b2c:	mov	r1, #-2147483648	; 0x80000000
   28b30:	mov	r2, r8
   28b34:	mov	r3, r9
   28b38:	str	r4, [sp, #8]
   28b3c:	mov	r6, #0
   28b40:	mov	r7, #-2147483648	; 0x80000000
   28b44:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28b48:	ldr	r4, [sp, #24]
   28b4c:	ldr	r3, [sp, #28]
   28b50:	mov	r2, #1
   28b54:	subs	r0, r0, r4
   28b58:	sbcs	r0, r1, r3
   28b5c:	blt	28c98 <__assert_fail@plt+0x17538>
   28b60:	umull	r6, r0, r8, r4
   28b64:	mov	r2, #0
   28b68:	mla	r0, r8, r3, r0
   28b6c:	mla	r7, r9, r4, r0
   28b70:	b	28c98 <__assert_fail@plt+0x17538>
   28b74:	str	r4, [sp, #4]
   28b78:	ldr	r4, [sp, #8]
   28b7c:	mov	r0, #0
   28b80:	mov	r1, #-2147483648	; 0x80000000
   28b84:	mov	r3, r9
   28b88:	mov	r2, r4
   28b8c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28b90:	ldr	r2, [sp, #24]
   28b94:	ldr	r3, [sp, #28]
   28b98:	mov	r7, #1
   28b9c:	mov	r6, #0
   28ba0:	mov	r8, #-2147483648	; 0x80000000
   28ba4:	subs	r0, r0, r2
   28ba8:	sbcs	r0, r1, r3
   28bac:	blt	28c00 <__assert_fail@plt+0x174a0>
   28bb0:	umull	r6, r0, r4, r2
   28bb4:	ldr	r7, [sp, #4]
   28bb8:	mla	r0, r4, r3, r0
   28bbc:	mla	r8, r9, r2, r0
   28bc0:	cmp	r8, #0
   28bc4:	blt	28c00 <__assert_fail@plt+0x174a0>
   28bc8:	ldr	r3, [sp, #28]
   28bcc:	mvn	r0, #0
   28bd0:	mvn	r1, #-2147483648	; 0x80000000
   28bd4:	str	r7, [sp, #8]
   28bd8:	mvn	r4, #0
   28bdc:	mvn	r9, #-2147483648	; 0x80000000
   28be0:	bl	2af04 <__assert_fail@plt+0x197a4>
   28be4:	ldr	r2, [sp, #24]
   28be8:	ldr	r3, [sp, #28]
   28bec:	subs	r0, r0, r6
   28bf0:	mov	r7, #1
   28bf4:	sbcs	r0, r1, r8
   28bf8:	bge	28c38 <__assert_fail@plt+0x174d8>
   28bfc:	b	28c50 <__assert_fail@plt+0x174f0>
   28c00:	mov	r0, #0
   28c04:	mov	r1, #-2147483648	; 0x80000000
   28c08:	mov	r2, r6
   28c0c:	mov	r3, r8
   28c10:	str	r7, [sp, #8]
   28c14:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28c18:	ldr	r2, [sp, #24]
   28c1c:	ldr	r3, [sp, #28]
   28c20:	mov	r7, #1
   28c24:	mov	r4, #0
   28c28:	mov	r9, #-2147483648	; 0x80000000
   28c2c:	subs	r0, r0, r2
   28c30:	sbcs	r0, r1, r3
   28c34:	blt	28ca8 <__assert_fail@plt+0x17548>
   28c38:	umull	r4, r0, r6, r2
   28c3c:	ldr	r7, [sp, #8]
   28c40:	mla	r0, r6, r3, r0
   28c44:	mla	r9, r8, r2, r0
   28c48:	cmp	r9, #0
   28c4c:	blt	28ca8 <__assert_fail@plt+0x17548>
   28c50:	ldr	r3, [sp, #28]
   28c54:	mvn	r0, #0
   28c58:	mvn	r1, #-2147483648	; 0x80000000
   28c5c:	str	r7, [sp, #8]
   28c60:	mvn	r6, #0
   28c64:	mvn	r7, #-2147483648	; 0x80000000
   28c68:	bl	2af04 <__assert_fail@plt+0x197a4>
   28c6c:	ldr	r3, [sp, #24]
   28c70:	ldr	ip, [sp, #28]
   28c74:	subs	r0, r0, r4
   28c78:	mov	r2, #1
   28c7c:	mov	r8, r4
   28c80:	sbcs	r0, r1, r9
   28c84:	blt	28c98 <__assert_fail@plt+0x17538>
   28c88:	umull	r6, r0, r8, r3
   28c8c:	mov	r2, #0
   28c90:	mla	r0, r8, ip, r0
   28c94:	mla	r7, r9, r3, r0
   28c98:	ldr	r0, [sp, #8]
   28c9c:	ldr	r9, [sp, #12]
   28ca0:	orr	r3, r2, r0
   28ca4:	b	29784 <__assert_fail@plt+0x18024>
   28ca8:	mov	r0, #0
   28cac:	mov	r1, #-2147483648	; 0x80000000
   28cb0:	mov	r2, r4
   28cb4:	mov	r3, r9
   28cb8:	str	r7, [sp, #8]
   28cbc:	mov	r8, r4
   28cc0:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28cc4:	ldr	r3, [sp, #24]
   28cc8:	ldr	ip, [sp, #28]
   28ccc:	mov	r2, #1
   28cd0:	mov	r6, #0
   28cd4:	mov	r7, #-2147483648	; 0x80000000
   28cd8:	subs	r0, r0, r3
   28cdc:	sbcs	r0, r1, ip
   28ce0:	bge	28c88 <__assert_fail@plt+0x17528>
   28ce4:	b	28c98 <__assert_fail@plt+0x17538>
   28ce8:	and	r0, r6, r7
   28cec:	cmn	r0, #1
   28cf0:	beq	28d2c <__assert_fail@plt+0x175cc>
   28cf4:	mov	r0, #0
   28cf8:	mov	r1, #-2147483648	; 0x80000000
   28cfc:	mov	r2, r6
   28d00:	mov	r3, r7
   28d04:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28d08:	ldr	r2, [sp, #24]
   28d0c:	ldr	r3, [sp, #28]
   28d10:	mov	r4, #1
   28d14:	mov	r9, #-2147483648	; 0x80000000
   28d18:	subs	r0, r0, r2
   28d1c:	sbcs	r0, r1, r3
   28d20:	mov	r0, #0
   28d24:	str	r0, [sp, #8]
   28d28:	blt	2903c <__assert_fail@plt+0x178dc>
   28d2c:	umull	r1, r0, r6, r2
   28d30:	mov	r4, #0
   28d34:	mla	r0, r6, r3, r0
   28d38:	str	r1, [sp, #8]
   28d3c:	mla	r9, r7, r2, r0
   28d40:	cmp	r9, #0
   28d44:	blt	2903c <__assert_fail@plt+0x178dc>
   28d48:	ldr	r3, [sp, #28]
   28d4c:	mvn	r0, #0
   28d50:	mvn	r1, #-2147483648	; 0x80000000
   28d54:	str	r4, [sp, #4]
   28d58:	mvn	r8, #0
   28d5c:	mvn	r4, #-2147483648	; 0x80000000
   28d60:	bl	2af04 <__assert_fail@plt+0x197a4>
   28d64:	ldr	r6, [sp, #8]
   28d68:	ldr	r2, [sp, #24]
   28d6c:	ldr	r3, [sp, #28]
   28d70:	mov	r7, #1
   28d74:	subs	r0, r0, r6
   28d78:	sbcs	r0, r1, r9
   28d7c:	bge	29078 <__assert_fail@plt+0x17918>
   28d80:	b	29090 <__assert_fail@plt+0x17930>
   28d84:	and	r0, r6, r7
   28d88:	cmn	r0, #1
   28d8c:	beq	28db4 <__assert_fail@plt+0x17654>
   28d90:	mov	r0, #0
   28d94:	mov	r1, #-2147483648	; 0x80000000
   28d98:	mov	r2, r6
   28d9c:	mov	r3, r7
   28da0:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28da4:	ldr	r3, [sp, #28]
   28da8:	subs	r0, r0, #1024	; 0x400
   28dac:	sbcs	r0, r1, #0
   28db0:	blt	2900c <__assert_fail@plt+0x178ac>
   28db4:	lsl	r0, r7, #10
   28db8:	orr	r7, r0, r6, lsr #22
   28dbc:	lsl	r6, r6, #10
   28dc0:	b	29784 <__assert_fail@plt+0x18024>
   28dc4:	and	r0, r6, r7
   28dc8:	cmn	r0, #1
   28dcc:	beq	28e08 <__assert_fail@plt+0x176a8>
   28dd0:	mov	r0, #0
   28dd4:	mov	r1, #-2147483648	; 0x80000000
   28dd8:	mov	r2, r6
   28ddc:	mov	r3, r7
   28de0:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28de4:	ldr	r2, [sp, #24]
   28de8:	ldr	r3, [sp, #28]
   28dec:	mov	r4, #1
   28df0:	mov	r9, #-2147483648	; 0x80000000
   28df4:	subs	r0, r0, r2
   28df8:	sbcs	r0, r1, r3
   28dfc:	mov	r0, #0
   28e00:	str	r0, [sp, #8]
   28e04:	blt	29354 <__assert_fail@plt+0x17bf4>
   28e08:	umull	r1, r0, r6, r2
   28e0c:	mov	r4, #0
   28e10:	mla	r0, r6, r3, r0
   28e14:	str	r1, [sp, #8]
   28e18:	mla	r9, r7, r2, r0
   28e1c:	cmp	r9, #0
   28e20:	blt	29354 <__assert_fail@plt+0x17bf4>
   28e24:	ldr	r3, [sp, #28]
   28e28:	mvn	r0, #0
   28e2c:	mvn	r1, #-2147483648	; 0x80000000
   28e30:	str	r4, [sp, #4]
   28e34:	mvn	r8, #0
   28e38:	mvn	r4, #-2147483648	; 0x80000000
   28e3c:	bl	2af04 <__assert_fail@plt+0x197a4>
   28e40:	ldr	r6, [sp, #8]
   28e44:	ldr	r2, [sp, #24]
   28e48:	ldr	r3, [sp, #28]
   28e4c:	mov	r7, #1
   28e50:	subs	r0, r0, r6
   28e54:	sbcs	r0, r1, r9
   28e58:	bge	29390 <__assert_fail@plt+0x17c30>
   28e5c:	b	293a8 <__assert_fail@plt+0x17c48>
   28e60:	and	r0, r6, r7
   28e64:	cmn	r0, #1
   28e68:	beq	28ea4 <__assert_fail@plt+0x17744>
   28e6c:	mov	r0, #0
   28e70:	mov	r1, #-2147483648	; 0x80000000
   28e74:	mov	r2, r6
   28e78:	mov	r3, r7
   28e7c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28e80:	ldr	r2, [sp, #24]
   28e84:	ldr	r3, [sp, #28]
   28e88:	mov	r4, #1
   28e8c:	mov	r8, #-2147483648	; 0x80000000
   28e90:	subs	r0, r0, r2
   28e94:	sbcs	r0, r1, r3
   28e98:	mov	r0, #0
   28e9c:	str	r0, [sp, #8]
   28ea0:	blt	295d0 <__assert_fail@plt+0x17e70>
   28ea4:	umull	r1, r0, r6, r2
   28ea8:	mov	r4, #0
   28eac:	mla	r0, r6, r3, r0
   28eb0:	str	r1, [sp, #8]
   28eb4:	mla	r8, r7, r2, r0
   28eb8:	cmp	r8, #0
   28ebc:	blt	295d0 <__assert_fail@plt+0x17e70>
   28ec0:	ldr	r3, [sp, #28]
   28ec4:	mvn	r0, #0
   28ec8:	mvn	r1, #-2147483648	; 0x80000000
   28ecc:	str	r4, [sp, #4]
   28ed0:	mvn	r9, #0
   28ed4:	mvn	r4, #-2147483648	; 0x80000000
   28ed8:	bl	2af04 <__assert_fail@plt+0x197a4>
   28edc:	ldr	r6, [sp, #8]
   28ee0:	ldr	r2, [sp, #24]
   28ee4:	ldr	r3, [sp, #28]
   28ee8:	mov	r7, #1
   28eec:	subs	r0, r0, r6
   28ef0:	sbcs	r0, r1, r8
   28ef4:	bge	2960c <__assert_fail@plt+0x17eac>
   28ef8:	b	29624 <__assert_fail@plt+0x17ec4>
   28efc:	and	r0, r6, r7
   28f00:	cmn	r0, #1
   28f04:	beq	28f40 <__assert_fail@plt+0x177e0>
   28f08:	mov	r0, #0
   28f0c:	mov	r1, #-2147483648	; 0x80000000
   28f10:	mov	r2, r6
   28f14:	mov	r3, r7
   28f18:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28f1c:	ldr	r2, [sp, #24]
   28f20:	ldr	r3, [sp, #28]
   28f24:	mov	r4, #1
   28f28:	mov	r9, #-2147483648	; 0x80000000
   28f2c:	subs	r0, r0, r2
   28f30:	sbcs	r0, r1, r3
   28f34:	mov	r0, #0
   28f38:	str	r0, [sp, #8]
   28f3c:	blt	297ec <__assert_fail@plt+0x1808c>
   28f40:	umull	r1, r0, r6, r2
   28f44:	mov	r4, #0
   28f48:	mla	r0, r6, r3, r0
   28f4c:	str	r1, [sp, #8]
   28f50:	mla	r9, r7, r2, r0
   28f54:	cmp	r9, #0
   28f58:	blt	297ec <__assert_fail@plt+0x1808c>
   28f5c:	ldr	r3, [sp, #28]
   28f60:	mvn	r0, #0
   28f64:	mvn	r1, #-2147483648	; 0x80000000
   28f68:	str	r4, [sp]
   28f6c:	mvn	r8, #-2147483648	; 0x80000000
   28f70:	str	r0, [sp, #4]
   28f74:	mvn	r0, #0
   28f78:	bl	2af04 <__assert_fail@plt+0x197a4>
   28f7c:	ldr	r6, [sp, #8]
   28f80:	ldr	r2, [sp, #24]
   28f84:	ldr	r3, [sp, #28]
   28f88:	mov	r7, #1
   28f8c:	subs	r0, r0, r6
   28f90:	sbcs	r0, r1, r9
   28f94:	bge	2982c <__assert_fail@plt+0x180cc>
   28f98:	b	29848 <__assert_fail@plt+0x180e8>
   28f9c:	and	r0, r6, r7
   28fa0:	cmn	r0, #1
   28fa4:	beq	28fcc <__assert_fail@plt+0x1786c>
   28fa8:	mov	r0, #0
   28fac:	mov	r1, #-2147483648	; 0x80000000
   28fb0:	mov	r2, r6
   28fb4:	mov	r3, r7
   28fb8:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28fbc:	ldr	r3, [sp, #28]
   28fc0:	subs	r0, r0, #512	; 0x200
   28fc4:	sbcs	r0, r1, #0
   28fc8:	blt	2900c <__assert_fail@plt+0x178ac>
   28fcc:	lsl	r0, r7, #9
   28fd0:	orr	r7, r0, r6, lsr #23
   28fd4:	lsl	r6, r6, #9
   28fd8:	b	29784 <__assert_fail@plt+0x18024>
   28fdc:	and	r0, r6, r7
   28fe0:	cmn	r0, #1
   28fe4:	beq	2902c <__assert_fail@plt+0x178cc>
   28fe8:	mov	r0, #0
   28fec:	mov	r1, #-2147483648	; 0x80000000
   28ff0:	mov	r2, r6
   28ff4:	mov	r3, r7
   28ff8:	bl	2ae30 <__assert_fail@plt+0x196d0>
   28ffc:	ldr	r3, [sp, #28]
   29000:	subs	r0, r0, #2
   29004:	sbcs	r0, r1, #0
   29008:	bge	2902c <__assert_fail@plt+0x178cc>
   2900c:	mvn	r0, #-2147483648	; 0x80000000
   29010:	cmp	r7, #0
   29014:	mvn	r6, #0
   29018:	mov	r3, #1
   2901c:	movlt	r0, #-2147483648	; 0x80000000
   29020:	movwlt	r6, #0
   29024:	mov	r7, r0
   29028:	b	29784 <__assert_fail@plt+0x18024>
   2902c:	lsl	r0, r7, #1
   29030:	orr	r7, r0, r6, lsr #31
   29034:	lsl	r6, r6, #1
   29038:	b	29784 <__assert_fail@plt+0x18024>
   2903c:	ldr	r6, [sp, #8]
   29040:	mov	r0, #0
   29044:	mov	r1, #-2147483648	; 0x80000000
   29048:	mov	r3, r9
   2904c:	str	r4, [sp, #4]
   29050:	mov	r2, r6
   29054:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29058:	ldr	r2, [sp, #24]
   2905c:	ldr	r3, [sp, #28]
   29060:	mov	r7, #1
   29064:	mov	r8, #0
   29068:	mov	r4, #-2147483648	; 0x80000000
   2906c:	subs	r0, r0, r2
   29070:	sbcs	r0, r1, r3
   29074:	blt	290c8 <__assert_fail@plt+0x17968>
   29078:	umull	r8, r0, r6, r2
   2907c:	ldr	r7, [sp, #4]
   29080:	mla	r0, r6, r3, r0
   29084:	mla	r4, r9, r2, r0
   29088:	cmp	r4, #0
   2908c:	blt	290c8 <__assert_fail@plt+0x17968>
   29090:	ldr	r3, [sp, #28]
   29094:	mvn	r0, #0
   29098:	mvn	r1, #-2147483648	; 0x80000000
   2909c:	str	r7, [sp, #8]
   290a0:	mvn	r7, #0
   290a4:	mvn	r9, #-2147483648	; 0x80000000
   290a8:	bl	2af04 <__assert_fail@plt+0x197a4>
   290ac:	ldr	r2, [sp, #24]
   290b0:	ldr	r3, [sp, #28]
   290b4:	subs	r0, r0, r8
   290b8:	mov	r6, #1
   290bc:	sbcs	r0, r1, r4
   290c0:	bge	29100 <__assert_fail@plt+0x179a0>
   290c4:	b	29118 <__assert_fail@plt+0x179b8>
   290c8:	mov	r0, #0
   290cc:	mov	r1, #-2147483648	; 0x80000000
   290d0:	mov	r2, r8
   290d4:	mov	r3, r4
   290d8:	str	r7, [sp, #8]
   290dc:	bl	2ae30 <__assert_fail@plt+0x196d0>
   290e0:	ldr	r2, [sp, #24]
   290e4:	ldr	r3, [sp, #28]
   290e8:	mov	r6, #1
   290ec:	mov	r7, #0
   290f0:	mov	r9, #-2147483648	; 0x80000000
   290f4:	subs	r0, r0, r2
   290f8:	sbcs	r0, r1, r3
   290fc:	blt	29158 <__assert_fail@plt+0x179f8>
   29100:	umull	r7, r0, r8, r2
   29104:	ldr	r6, [sp, #8]
   29108:	mla	r0, r8, r3, r0
   2910c:	mla	r9, r4, r2, r0
   29110:	cmp	r9, #0
   29114:	blt	29158 <__assert_fail@plt+0x179f8>
   29118:	ldr	r3, [sp, #28]
   2911c:	mvn	r0, #0
   29120:	mvn	r1, #-2147483648	; 0x80000000
   29124:	str	r6, [sp, #8]
   29128:	mvn	r8, #0
   2912c:	mvn	r4, #-2147483648	; 0x80000000
   29130:	bl	2af04 <__assert_fail@plt+0x197a4>
   29134:	ldr	r2, [sp, #24]
   29138:	ldr	r3, [sp, #28]
   2913c:	subs	r0, r0, r7
   29140:	sbcs	r0, r1, r9
   29144:	bge	2919c <__assert_fail@plt+0x17a3c>
   29148:	mov	r0, #1
   2914c:	mov	r6, #0
   29150:	str	r0, [sp, #8]
   29154:	b	291b4 <__assert_fail@plt+0x17a54>
   29158:	mov	r0, #0
   2915c:	mov	r1, #-2147483648	; 0x80000000
   29160:	mov	r2, r7
   29164:	mov	r3, r9
   29168:	str	r6, [sp, #8]
   2916c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29170:	ldr	r2, [sp, #24]
   29174:	ldr	r3, [sp, #28]
   29178:	subs	r0, r0, r2
   2917c:	sbcs	r0, r1, r3
   29180:	bge	2919c <__assert_fail@plt+0x17a3c>
   29184:	mov	r0, #1
   29188:	mov	r8, #0
   2918c:	mov	r4, #-2147483648	; 0x80000000
   29190:	mov	r6, #0
   29194:	str	r0, [sp, #8]
   29198:	b	291ec <__assert_fail@plt+0x17a8c>
   2919c:	umull	r8, r0, r7, r2
   291a0:	mov	r6, #0
   291a4:	mla	r0, r7, r3, r0
   291a8:	mla	r4, r9, r2, r0
   291ac:	cmp	r4, #0
   291b0:	blt	291ec <__assert_fail@plt+0x17a8c>
   291b4:	ldr	r3, [sp, #28]
   291b8:	mvn	r0, #0
   291bc:	mvn	r1, #-2147483648	; 0x80000000
   291c0:	mvn	r9, #0
   291c4:	mvn	r7, #-2147483648	; 0x80000000
   291c8:	bl	2af04 <__assert_fail@plt+0x197a4>
   291cc:	ldr	r2, [sp, #24]
   291d0:	ldr	r3, [sp, #28]
   291d4:	subs	r0, r0, r8
   291d8:	sbcs	r0, r1, r4
   291dc:	bge	29228 <__assert_fail@plt+0x17ac8>
   291e0:	mov	r0, #1
   291e4:	str	r0, [sp, #8]
   291e8:	b	2923c <__assert_fail@plt+0x17adc>
   291ec:	mov	r0, #0
   291f0:	mov	r1, #-2147483648	; 0x80000000
   291f4:	mov	r2, r8
   291f8:	mov	r3, r4
   291fc:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29200:	ldr	r2, [sp, #24]
   29204:	ldr	r3, [sp, #28]
   29208:	subs	r0, r0, r2
   2920c:	sbcs	r0, r1, r3
   29210:	bge	29228 <__assert_fail@plt+0x17ac8>
   29214:	mov	r0, #1
   29218:	mov	r9, #0
   2921c:	mov	r7, #-2147483648	; 0x80000000
   29220:	str	r0, [sp, #8]
   29224:	b	29278 <__assert_fail@plt+0x17b18>
   29228:	umull	r9, r0, r8, r2
   2922c:	mla	r0, r8, r3, r0
   29230:	mla	r7, r4, r2, r0
   29234:	cmp	r7, #0
   29238:	blt	29278 <__assert_fail@plt+0x17b18>
   2923c:	ldr	r3, [sp, #28]
   29240:	mvn	r0, #0
   29244:	mvn	r1, #-2147483648	; 0x80000000
   29248:	mvn	r8, #0
   2924c:	mvn	r4, #-2147483648	; 0x80000000
   29250:	bl	2af04 <__assert_fail@plt+0x197a4>
   29254:	ldr	r2, [sp, #24]
   29258:	ldr	r3, [sp, #28]
   2925c:	subs	r0, r0, r9
   29260:	sbcs	r0, r1, r7
   29264:	bge	292b8 <__assert_fail@plt+0x17b58>
   29268:	ldr	r9, [sp, #12]
   2926c:	mov	r0, #1
   29270:	str	r0, [sp, #8]
   29274:	b	292d0 <__assert_fail@plt+0x17b70>
   29278:	mov	r0, #0
   2927c:	mov	r1, #-2147483648	; 0x80000000
   29280:	mov	r2, r9
   29284:	mov	r3, r7
   29288:	bl	2ae30 <__assert_fail@plt+0x196d0>
   2928c:	ldr	r2, [sp, #24]
   29290:	ldr	r3, [sp, #28]
   29294:	subs	r0, r0, r2
   29298:	sbcs	r0, r1, r3
   2929c:	bge	292b8 <__assert_fail@plt+0x17b58>
   292a0:	ldr	r9, [sp, #12]
   292a4:	mov	r0, #1
   292a8:	mov	r8, #0
   292ac:	mov	r4, #-2147483648	; 0x80000000
   292b0:	str	r0, [sp, #8]
   292b4:	b	29320 <__assert_fail@plt+0x17bc0>
   292b8:	umull	r8, r0, r9, r2
   292bc:	mla	r0, r9, r3, r0
   292c0:	ldr	r9, [sp, #12]
   292c4:	mla	r4, r7, r2, r0
   292c8:	cmp	r4, #0
   292cc:	blt	29320 <__assert_fail@plt+0x17bc0>
   292d0:	ldr	r3, [sp, #28]
   292d4:	mvn	r0, #0
   292d8:	mvn	r1, #-2147483648	; 0x80000000
   292dc:	mvn	r6, #0
   292e0:	bl	2af04 <__assert_fail@plt+0x197a4>
   292e4:	ldr	r7, [sp, #24]
   292e8:	ldr	r3, [sp, #28]
   292ec:	subs	r0, r0, r8
   292f0:	mov	r2, #1
   292f4:	sbcs	r0, r1, r4
   292f8:	mvn	r0, #-2147483648	; 0x80000000
   292fc:	blt	29310 <__assert_fail@plt+0x17bb0>
   29300:	umull	r6, r0, r8, r7
   29304:	mov	r2, #0
   29308:	mla	r0, r8, r3, r0
   2930c:	mla	r0, r4, r7, r0
   29310:	ldr	r1, [sp, #8]
   29314:	mov	r7, r0
   29318:	orr	r3, r2, r1
   2931c:	b	29784 <__assert_fail@plt+0x18024>
   29320:	mov	r0, #0
   29324:	mov	r1, #-2147483648	; 0x80000000
   29328:	mov	r2, r8
   2932c:	mov	r3, r4
   29330:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29334:	ldr	r7, [sp, #24]
   29338:	ldr	r3, [sp, #28]
   2933c:	mov	r2, #1
   29340:	subs	r0, r0, r7
   29344:	sbcs	r0, r1, r3
   29348:	mov	r0, #-2147483648	; 0x80000000
   2934c:	bge	29300 <__assert_fail@plt+0x17ba0>
   29350:	b	29310 <__assert_fail@plt+0x17bb0>
   29354:	ldr	r6, [sp, #8]
   29358:	mov	r0, #0
   2935c:	mov	r1, #-2147483648	; 0x80000000
   29360:	mov	r3, r9
   29364:	str	r4, [sp, #4]
   29368:	mov	r2, r6
   2936c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29370:	ldr	r2, [sp, #24]
   29374:	ldr	r3, [sp, #28]
   29378:	mov	r7, #1
   2937c:	mov	r8, #0
   29380:	mov	r4, #-2147483648	; 0x80000000
   29384:	subs	r0, r0, r2
   29388:	sbcs	r0, r1, r3
   2938c:	blt	293e4 <__assert_fail@plt+0x17c84>
   29390:	umull	r8, r0, r6, r2
   29394:	ldr	r7, [sp, #4]
   29398:	mla	r0, r6, r3, r0
   2939c:	mla	r4, r9, r2, r0
   293a0:	cmp	r4, #0
   293a4:	blt	293e4 <__assert_fail@plt+0x17c84>
   293a8:	ldr	r3, [sp, #28]
   293ac:	mvn	r0, #0
   293b0:	mvn	r1, #-2147483648	; 0x80000000
   293b4:	str	r7, [sp, #4]
   293b8:	mvn	r7, #0
   293bc:	mvn	r9, #-2147483648	; 0x80000000
   293c0:	bl	2af04 <__assert_fail@plt+0x197a4>
   293c4:	ldr	r2, [sp, #24]
   293c8:	ldr	r3, [sp, #28]
   293cc:	subs	r0, r0, r8
   293d0:	mov	r6, #1
   293d4:	sbcs	r0, r1, r4
   293d8:	str	r6, [sp, #8]
   293dc:	bge	29420 <__assert_fail@plt+0x17cc0>
   293e0:	b	2943c <__assert_fail@plt+0x17cdc>
   293e4:	mov	r0, #0
   293e8:	mov	r1, #-2147483648	; 0x80000000
   293ec:	mov	r2, r8
   293f0:	mov	r3, r4
   293f4:	str	r7, [sp, #4]
   293f8:	bl	2ae30 <__assert_fail@plt+0x196d0>
   293fc:	ldr	r2, [sp, #24]
   29400:	ldr	r3, [sp, #28]
   29404:	mov	r7, #1
   29408:	mov	r9, #-2147483648	; 0x80000000
   2940c:	str	r7, [sp, #8]
   29410:	mov	r7, #0
   29414:	subs	r0, r0, r2
   29418:	sbcs	r0, r1, r3
   2941c:	blt	29474 <__assert_fail@plt+0x17d14>
   29420:	umull	r7, r0, r8, r2
   29424:	mla	r0, r8, r3, r0
   29428:	mla	r9, r4, r2, r0
   2942c:	ldr	r0, [sp, #4]
   29430:	cmp	r9, #0
   29434:	str	r0, [sp, #8]
   29438:	blt	29474 <__assert_fail@plt+0x17d14>
   2943c:	ldr	r3, [sp, #28]
   29440:	mvn	r0, #0
   29444:	mvn	r1, #-2147483648	; 0x80000000
   29448:	mvn	r4, #0
   2944c:	mvn	r8, #-2147483648	; 0x80000000
   29450:	bl	2af04 <__assert_fail@plt+0x197a4>
   29454:	ldr	r2, [sp, #24]
   29458:	ldr	r3, [sp, #28]
   2945c:	subs	r0, r0, r7
   29460:	sbcs	r0, r1, r9
   29464:	bge	294b0 <__assert_fail@plt+0x17d50>
   29468:	mov	r0, #1
   2946c:	str	r0, [sp, #8]
   29470:	b	294c4 <__assert_fail@plt+0x17d64>
   29474:	mov	r0, #0
   29478:	mov	r1, #-2147483648	; 0x80000000
   2947c:	mov	r2, r7
   29480:	mov	r3, r9
   29484:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29488:	ldr	r2, [sp, #24]
   2948c:	ldr	r3, [sp, #28]
   29490:	subs	r0, r0, r2
   29494:	sbcs	r0, r1, r3
   29498:	bge	294b0 <__assert_fail@plt+0x17d50>
   2949c:	mov	r0, #1
   294a0:	mov	r4, #0
   294a4:	mov	r8, #-2147483648	; 0x80000000
   294a8:	str	r0, [sp, #8]
   294ac:	b	294f8 <__assert_fail@plt+0x17d98>
   294b0:	umull	r4, r0, r7, r2
   294b4:	mla	r0, r7, r3, r0
   294b8:	mla	r8, r9, r2, r0
   294bc:	cmp	r8, #0
   294c0:	blt	294f8 <__assert_fail@plt+0x17d98>
   294c4:	ldr	r3, [sp, #28]
   294c8:	mvn	r0, #0
   294cc:	mvn	r1, #-2147483648	; 0x80000000
   294d0:	mvn	r6, #0
   294d4:	mvn	r9, #-2147483648	; 0x80000000
   294d8:	bl	2af04 <__assert_fail@plt+0x197a4>
   294dc:	ldr	r2, [sp, #24]
   294e0:	ldr	r3, [sp, #28]
   294e4:	subs	r0, r0, r4
   294e8:	sbcs	r0, r1, r8
   294ec:	bge	29530 <__assert_fail@plt+0x17dd0>
   294f0:	mov	r8, #1
   294f4:	b	29548 <__assert_fail@plt+0x17de8>
   294f8:	mov	r0, #0
   294fc:	mov	r1, #-2147483648	; 0x80000000
   29500:	mov	r2, r4
   29504:	mov	r3, r8
   29508:	bl	2ae30 <__assert_fail@plt+0x196d0>
   2950c:	ldr	r2, [sp, #24]
   29510:	ldr	r3, [sp, #28]
   29514:	subs	r0, r0, r2
   29518:	sbcs	r0, r1, r3
   2951c:	bge	29530 <__assert_fail@plt+0x17dd0>
   29520:	mov	r8, #1
   29524:	mov	r6, #0
   29528:	mov	r9, #-2147483648	; 0x80000000
   2952c:	b	29598 <__assert_fail@plt+0x17e38>
   29530:	umull	r6, r0, r4, r2
   29534:	mla	r0, r4, r3, r0
   29538:	mla	r9, r8, r2, r0
   2953c:	ldr	r8, [sp, #8]
   29540:	cmp	r9, #0
   29544:	blt	29598 <__assert_fail@plt+0x17e38>
   29548:	ldr	r3, [sp, #28]
   2954c:	mvn	r0, #0
   29550:	mvn	r1, #-2147483648	; 0x80000000
   29554:	mvn	r4, #0
   29558:	mvn	r7, #-2147483648	; 0x80000000
   2955c:	bl	2af04 <__assert_fail@plt+0x197a4>
   29560:	ldr	r3, [sp, #24]
   29564:	ldr	ip, [sp, #28]
   29568:	subs	r0, r0, r6
   2956c:	mov	r2, #1
   29570:	sbcs	r0, r1, r9
   29574:	blt	29588 <__assert_fail@plt+0x17e28>
   29578:	umull	r4, r0, r6, r3
   2957c:	mov	r2, #0
   29580:	mla	r0, r6, ip, r0
   29584:	mla	r7, r9, r3, r0
   29588:	ldr	r9, [sp, #12]
   2958c:	orr	r3, r2, r8
   29590:	mov	r6, r4
   29594:	b	29784 <__assert_fail@plt+0x18024>
   29598:	mov	r0, #0
   2959c:	mov	r1, #-2147483648	; 0x80000000
   295a0:	mov	r2, r6
   295a4:	mov	r3, r9
   295a8:	bl	2ae30 <__assert_fail@plt+0x196d0>
   295ac:	ldr	r3, [sp, #24]
   295b0:	ldr	ip, [sp, #28]
   295b4:	mov	r2, #1
   295b8:	mov	r4, #0
   295bc:	mov	r7, #-2147483648	; 0x80000000
   295c0:	subs	r0, r0, r3
   295c4:	sbcs	r0, r1, ip
   295c8:	bge	29578 <__assert_fail@plt+0x17e18>
   295cc:	b	29588 <__assert_fail@plt+0x17e28>
   295d0:	ldr	r6, [sp, #8]
   295d4:	mov	r0, #0
   295d8:	mov	r1, #-2147483648	; 0x80000000
   295dc:	mov	r3, r8
   295e0:	str	r4, [sp, #4]
   295e4:	mov	r2, r6
   295e8:	bl	2ae30 <__assert_fail@plt+0x196d0>
   295ec:	ldr	r2, [sp, #24]
   295f0:	ldr	r3, [sp, #28]
   295f4:	mov	r7, #1
   295f8:	mov	r9, #0
   295fc:	mov	r4, #-2147483648	; 0x80000000
   29600:	subs	r0, r0, r2
   29604:	sbcs	r0, r1, r3
   29608:	blt	29660 <__assert_fail@plt+0x17f00>
   2960c:	umull	r9, r0, r6, r2
   29610:	ldr	r7, [sp, #4]
   29614:	mla	r0, r6, r3, r0
   29618:	mla	r4, r8, r2, r0
   2961c:	cmp	r4, #0
   29620:	blt	29660 <__assert_fail@plt+0x17f00>
   29624:	ldr	r3, [sp, #28]
   29628:	mvn	r0, #0
   2962c:	mvn	r1, #-2147483648	; 0x80000000
   29630:	str	r7, [sp, #4]
   29634:	mvn	r8, #0
   29638:	mvn	r7, #-2147483648	; 0x80000000
   2963c:	bl	2af04 <__assert_fail@plt+0x197a4>
   29640:	ldr	r2, [sp, #24]
   29644:	ldr	r3, [sp, #28]
   29648:	subs	r0, r0, r9
   2964c:	mov	r6, #1
   29650:	sbcs	r0, r1, r4
   29654:	str	r6, [sp, #8]
   29658:	bge	2969c <__assert_fail@plt+0x17f3c>
   2965c:	b	296b8 <__assert_fail@plt+0x17f58>
   29660:	mov	r0, #0
   29664:	mov	r1, #-2147483648	; 0x80000000
   29668:	mov	r2, r9
   2966c:	mov	r3, r4
   29670:	str	r7, [sp, #4]
   29674:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29678:	ldr	r2, [sp, #24]
   2967c:	ldr	r3, [sp, #28]
   29680:	mov	r7, #1
   29684:	mov	r8, #0
   29688:	str	r7, [sp, #8]
   2968c:	mov	r7, #-2147483648	; 0x80000000
   29690:	subs	r0, r0, r2
   29694:	sbcs	r0, r1, r3
   29698:	blt	296ec <__assert_fail@plt+0x17f8c>
   2969c:	umull	r8, r0, r9, r2
   296a0:	mla	r0, r9, r3, r0
   296a4:	mla	r7, r4, r2, r0
   296a8:	ldr	r0, [sp, #4]
   296ac:	cmp	r7, #0
   296b0:	str	r0, [sp, #8]
   296b4:	blt	296ec <__assert_fail@plt+0x17f8c>
   296b8:	ldr	r3, [sp, #28]
   296bc:	mvn	r0, #0
   296c0:	mvn	r1, #-2147483648	; 0x80000000
   296c4:	mvn	r4, #0
   296c8:	mvn	r9, #-2147483648	; 0x80000000
   296cc:	bl	2af04 <__assert_fail@plt+0x197a4>
   296d0:	ldr	r2, [sp, #24]
   296d4:	ldr	r3, [sp, #28]
   296d8:	subs	r0, r0, r8
   296dc:	sbcs	r0, r1, r7
   296e0:	bge	29724 <__assert_fail@plt+0x17fc4>
   296e4:	mov	r8, #1
   296e8:	b	2973c <__assert_fail@plt+0x17fdc>
   296ec:	mov	r0, #0
   296f0:	mov	r1, #-2147483648	; 0x80000000
   296f4:	mov	r2, r8
   296f8:	mov	r3, r7
   296fc:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29700:	ldr	r2, [sp, #24]
   29704:	ldr	r3, [sp, #28]
   29708:	subs	r0, r0, r2
   2970c:	sbcs	r0, r1, r3
   29710:	bge	29724 <__assert_fail@plt+0x17fc4>
   29714:	mov	r8, #1
   29718:	mov	r4, #0
   2971c:	mov	r9, #-2147483648	; 0x80000000
   29720:	b	297b4 <__assert_fail@plt+0x18054>
   29724:	umull	r4, r0, r8, r2
   29728:	mla	r0, r8, r3, r0
   2972c:	ldr	r8, [sp, #8]
   29730:	mla	r9, r7, r2, r0
   29734:	cmp	r9, #0
   29738:	blt	297b4 <__assert_fail@plt+0x18054>
   2973c:	ldr	r3, [sp, #28]
   29740:	mvn	r0, #0
   29744:	mvn	r1, #-2147483648	; 0x80000000
   29748:	mvn	r6, #0
   2974c:	mvn	r7, #-2147483648	; 0x80000000
   29750:	bl	2af04 <__assert_fail@plt+0x197a4>
   29754:	ldr	r3, [sp, #24]
   29758:	ldr	ip, [sp, #28]
   2975c:	subs	r0, r0, r4
   29760:	mov	r2, #1
   29764:	sbcs	r0, r1, r9
   29768:	blt	2977c <__assert_fail@plt+0x1801c>
   2976c:	umull	r6, r0, r4, r3
   29770:	mov	r2, #0
   29774:	mla	r0, r4, ip, r0
   29778:	mla	r7, r9, r3, r0
   2977c:	ldr	r9, [sp, #12]
   29780:	orr	r3, r2, r8
   29784:	ldr	r1, [sp, #20]
   29788:	ldr	r2, [sp, #16]
   2978c:	orr	r5, r3, r5
   29790:	add	r0, r1, r2
   29794:	str	r0, [sl]
   29798:	ldrb	r0, [r1, r2]
   2979c:	cmp	r0, #0
   297a0:	orrne	r5, r5, #2
   297a4:	strd	r6, [r9]
   297a8:	mov	r0, r5
   297ac:	sub	sp, fp, #28
   297b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   297b4:	mov	r0, #0
   297b8:	mov	r1, #-2147483648	; 0x80000000
   297bc:	mov	r2, r4
   297c0:	mov	r3, r9
   297c4:	bl	2ae30 <__assert_fail@plt+0x196d0>
   297c8:	ldr	r3, [sp, #24]
   297cc:	ldr	ip, [sp, #28]
   297d0:	mov	r2, #1
   297d4:	mov	r6, #0
   297d8:	mov	r7, #-2147483648	; 0x80000000
   297dc:	subs	r0, r0, r3
   297e0:	sbcs	r0, r1, ip
   297e4:	bge	2976c <__assert_fail@plt+0x1800c>
   297e8:	b	2977c <__assert_fail@plt+0x1801c>
   297ec:	ldr	r6, [sp, #8]
   297f0:	mov	r0, #0
   297f4:	mov	r1, #-2147483648	; 0x80000000
   297f8:	mov	r3, r9
   297fc:	str	r4, [sp]
   29800:	mov	r2, r6
   29804:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29808:	ldr	r2, [sp, #24]
   2980c:	ldr	r3, [sp, #28]
   29810:	mov	r7, #1
   29814:	mov	r8, #-2147483648	; 0x80000000
   29818:	subs	r0, r0, r2
   2981c:	sbcs	r0, r1, r3
   29820:	mov	r0, #0
   29824:	str	r0, [sp, #4]
   29828:	blt	29888 <__assert_fail@plt+0x18128>
   2982c:	umull	r1, r0, r6, r2
   29830:	ldr	r7, [sp]
   29834:	mla	r0, r6, r3, r0
   29838:	str	r1, [sp, #4]
   2983c:	mla	r8, r9, r2, r0
   29840:	cmp	r8, #0
   29844:	blt	29888 <__assert_fail@plt+0x18128>
   29848:	ldr	r3, [sp, #28]
   2984c:	mvn	r0, #0
   29850:	mvn	r1, #-2147483648	; 0x80000000
   29854:	str	r7, [sp]
   29858:	mvn	r7, #0
   2985c:	mvn	r4, #-2147483648	; 0x80000000
   29860:	bl	2af04 <__assert_fail@plt+0x197a4>
   29864:	mov	r6, #1
   29868:	ldr	r2, [sp, #24]
   2986c:	ldr	r3, [sp, #28]
   29870:	str	r6, [sp, #8]
   29874:	ldr	r6, [sp, #4]
   29878:	subs	r0, r0, r6
   2987c:	sbcs	r0, r1, r8
   29880:	bge	298c8 <__assert_fail@plt+0x18168>
   29884:	b	298e4 <__assert_fail@plt+0x18184>
   29888:	ldr	r6, [sp, #4]
   2988c:	mov	r0, #0
   29890:	mov	r1, #-2147483648	; 0x80000000
   29894:	mov	r3, r8
   29898:	str	r7, [sp]
   2989c:	mov	r2, r6
   298a0:	bl	2ae30 <__assert_fail@plt+0x196d0>
   298a4:	ldr	r2, [sp, #24]
   298a8:	ldr	r3, [sp, #28]
   298ac:	mov	r7, #1
   298b0:	mov	r4, #-2147483648	; 0x80000000
   298b4:	str	r7, [sp, #8]
   298b8:	mov	r7, #0
   298bc:	subs	r0, r0, r2
   298c0:	sbcs	r0, r1, r3
   298c4:	blt	2991c <__assert_fail@plt+0x181bc>
   298c8:	umull	r7, r0, r6, r2
   298cc:	mla	r0, r6, r3, r0
   298d0:	mla	r4, r8, r2, r0
   298d4:	ldr	r0, [sp]
   298d8:	cmp	r4, #0
   298dc:	str	r0, [sp, #8]
   298e0:	blt	2991c <__assert_fail@plt+0x181bc>
   298e4:	ldr	r3, [sp, #28]
   298e8:	mvn	r0, #0
   298ec:	mvn	r1, #-2147483648	; 0x80000000
   298f0:	mvn	r9, #0
   298f4:	mvn	r8, #-2147483648	; 0x80000000
   298f8:	bl	2af04 <__assert_fail@plt+0x197a4>
   298fc:	ldr	r2, [sp, #24]
   29900:	ldr	r3, [sp, #28]
   29904:	subs	r0, r0, r7
   29908:	sbcs	r0, r1, r4
   2990c:	bge	29958 <__assert_fail@plt+0x181f8>
   29910:	mov	r0, #1
   29914:	str	r0, [sp, #8]
   29918:	b	2996c <__assert_fail@plt+0x1820c>
   2991c:	mov	r0, #0
   29920:	mov	r1, #-2147483648	; 0x80000000
   29924:	mov	r2, r7
   29928:	mov	r3, r4
   2992c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29930:	ldr	r2, [sp, #24]
   29934:	ldr	r3, [sp, #28]
   29938:	subs	r0, r0, r2
   2993c:	sbcs	r0, r1, r3
   29940:	bge	29958 <__assert_fail@plt+0x181f8>
   29944:	mov	r0, #1
   29948:	mov	r9, #0
   2994c:	mov	r8, #-2147483648	; 0x80000000
   29950:	str	r0, [sp, #8]
   29954:	b	299a4 <__assert_fail@plt+0x18244>
   29958:	umull	r9, r0, r7, r2
   2995c:	mla	r0, r7, r3, r0
   29960:	mla	r8, r4, r2, r0
   29964:	cmp	r8, #0
   29968:	blt	299a4 <__assert_fail@plt+0x18244>
   2996c:	ldr	r3, [sp, #28]
   29970:	mvn	r0, #0
   29974:	mvn	r1, #-2147483648	; 0x80000000
   29978:	mvn	r4, #0
   2997c:	mvn	r7, #-2147483648	; 0x80000000
   29980:	bl	2af04 <__assert_fail@plt+0x197a4>
   29984:	ldr	r2, [sp, #24]
   29988:	ldr	r3, [sp, #28]
   2998c:	subs	r0, r0, r9
   29990:	sbcs	r0, r1, r8
   29994:	bge	299e0 <__assert_fail@plt+0x18280>
   29998:	mov	r0, #1
   2999c:	str	r0, [sp, #8]
   299a0:	b	299f4 <__assert_fail@plt+0x18294>
   299a4:	mov	r0, #0
   299a8:	mov	r1, #-2147483648	; 0x80000000
   299ac:	mov	r2, r9
   299b0:	mov	r3, r8
   299b4:	bl	2ae30 <__assert_fail@plt+0x196d0>
   299b8:	ldr	r2, [sp, #24]
   299bc:	ldr	r3, [sp, #28]
   299c0:	subs	r0, r0, r2
   299c4:	sbcs	r0, r1, r3
   299c8:	bge	299e0 <__assert_fail@plt+0x18280>
   299cc:	mov	r0, #1
   299d0:	mov	r4, #0
   299d4:	mov	r7, #-2147483648	; 0x80000000
   299d8:	str	r0, [sp, #8]
   299dc:	b	29a2c <__assert_fail@plt+0x182cc>
   299e0:	umull	r4, r0, r9, r2
   299e4:	mla	r0, r9, r3, r0
   299e8:	mla	r7, r8, r2, r0
   299ec:	cmp	r7, #0
   299f0:	blt	29a2c <__assert_fail@plt+0x182cc>
   299f4:	ldr	r3, [sp, #28]
   299f8:	mvn	r0, #0
   299fc:	mvn	r1, #-2147483648	; 0x80000000
   29a00:	mvn	r8, #0
   29a04:	mvn	r9, #-2147483648	; 0x80000000
   29a08:	bl	2af04 <__assert_fail@plt+0x197a4>
   29a0c:	ldr	r2, [sp, #24]
   29a10:	ldr	r3, [sp, #28]
   29a14:	subs	r0, r0, r4
   29a18:	sbcs	r0, r1, r7
   29a1c:	bge	29a68 <__assert_fail@plt+0x18308>
   29a20:	mov	r0, #1
   29a24:	str	r0, [sp, #8]
   29a28:	b	29a7c <__assert_fail@plt+0x1831c>
   29a2c:	mov	r0, #0
   29a30:	mov	r1, #-2147483648	; 0x80000000
   29a34:	mov	r2, r4
   29a38:	mov	r3, r7
   29a3c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29a40:	ldr	r2, [sp, #24]
   29a44:	ldr	r3, [sp, #28]
   29a48:	subs	r0, r0, r2
   29a4c:	sbcs	r0, r1, r3
   29a50:	bge	29a68 <__assert_fail@plt+0x18308>
   29a54:	mov	r0, #1
   29a58:	mov	r8, #0
   29a5c:	mov	r9, #-2147483648	; 0x80000000
   29a60:	str	r0, [sp, #8]
   29a64:	b	29ab8 <__assert_fail@plt+0x18358>
   29a68:	umull	r8, r0, r4, r2
   29a6c:	mla	r0, r4, r3, r0
   29a70:	mla	r9, r7, r2, r0
   29a74:	cmp	r9, #0
   29a78:	blt	29ab8 <__assert_fail@plt+0x18358>
   29a7c:	ldr	r3, [sp, #28]
   29a80:	mvn	r0, #0
   29a84:	mvn	r1, #-2147483648	; 0x80000000
   29a88:	mvn	r4, #0
   29a8c:	mvn	r6, #-2147483648	; 0x80000000
   29a90:	bl	2af04 <__assert_fail@plt+0x197a4>
   29a94:	ldr	r2, [sp, #24]
   29a98:	ldr	r3, [sp, #28]
   29a9c:	subs	r0, r0, r8
   29aa0:	sbcs	r0, r1, r9
   29aa4:	bge	29af8 <__assert_fail@plt+0x18398>
   29aa8:	ldr	r9, [sp, #12]
   29aac:	mov	r0, #1
   29ab0:	str	r0, [sp, #8]
   29ab4:	b	29b10 <__assert_fail@plt+0x183b0>
   29ab8:	mov	r0, #0
   29abc:	mov	r1, #-2147483648	; 0x80000000
   29ac0:	mov	r2, r8
   29ac4:	mov	r3, r9
   29ac8:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29acc:	ldr	r2, [sp, #24]
   29ad0:	ldr	r3, [sp, #28]
   29ad4:	subs	r0, r0, r2
   29ad8:	sbcs	r0, r1, r3
   29adc:	bge	29af8 <__assert_fail@plt+0x18398>
   29ae0:	ldr	r9, [sp, #12]
   29ae4:	mov	r0, #1
   29ae8:	mov	r4, #0
   29aec:	mov	r6, #-2147483648	; 0x80000000
   29af0:	str	r0, [sp, #8]
   29af4:	b	29b5c <__assert_fail@plt+0x183fc>
   29af8:	umull	r4, r0, r8, r2
   29afc:	mla	r0, r8, r3, r0
   29b00:	mla	r6, r9, r2, r0
   29b04:	ldr	r9, [sp, #12]
   29b08:	cmp	r6, #0
   29b0c:	blt	29b5c <__assert_fail@plt+0x183fc>
   29b10:	ldr	r3, [sp, #28]
   29b14:	mvn	r0, #0
   29b18:	mvn	r1, #-2147483648	; 0x80000000
   29b1c:	mov	r8, r6
   29b20:	mvn	r6, #0
   29b24:	mvn	r7, #-2147483648	; 0x80000000
   29b28:	bl	2af04 <__assert_fail@plt+0x197a4>
   29b2c:	ldr	r3, [sp, #24]
   29b30:	ldr	ip, [sp, #28]
   29b34:	subs	r0, r0, r4
   29b38:	mov	r2, #1
   29b3c:	sbcs	r0, r1, r8
   29b40:	blt	29b54 <__assert_fail@plt+0x183f4>
   29b44:	umull	r6, r0, r4, r3
   29b48:	mov	r2, #0
   29b4c:	mla	r0, r4, ip, r0
   29b50:	mla	r7, r8, r3, r0
   29b54:	ldr	r0, [sp, #8]
   29b58:	b	28ca0 <__assert_fail@plt+0x17540>
   29b5c:	mov	r0, #0
   29b60:	mov	r1, #-2147483648	; 0x80000000
   29b64:	mov	r2, r4
   29b68:	mov	r3, r6
   29b6c:	bl	2ae30 <__assert_fail@plt+0x196d0>
   29b70:	ldr	r3, [sp, #24]
   29b74:	ldr	ip, [sp, #28]
   29b78:	mov	r8, r6
   29b7c:	mov	r2, #1
   29b80:	mov	r6, #0
   29b84:	mov	r7, #-2147483648	; 0x80000000
   29b88:	subs	r0, r0, r3
   29b8c:	sbcs	r0, r1, ip
   29b90:	bge	29b44 <__assert_fail@plt+0x183e4>
   29b94:	b	29b54 <__assert_fail@plt+0x183f4>
   29b98:	movw	r0, #50001	; 0xc351
   29b9c:	movw	r1, #50039	; 0xc377
   29ba0:	movw	r3, #50055	; 0xc387
   29ba4:	mov	r2, #85	; 0x55
   29ba8:	movt	r0, #2
   29bac:	movt	r1, #2
   29bb0:	movt	r3, #2
   29bb4:	bl	11760 <__assert_fail@plt>
   29bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29bbc:	add	fp, sp, #28
   29bc0:	sub	sp, sp, #44	; 0x2c
   29bc4:	cmp	r2, #37	; 0x25
   29bc8:	bcs	2a838 <__assert_fail@plt+0x190d8>
   29bcc:	ldr	sl, [fp, #8]
   29bd0:	mov	r6, r2
   29bd4:	mov	r7, r1
   29bd8:	mov	r4, r0
   29bdc:	str	r3, [sp, #36]	; 0x24
   29be0:	bl	11640 <__errno_location@plt>
   29be4:	mov	r5, r0
   29be8:	mov	r0, #0
   29bec:	str	r0, [r5]
   29bf0:	bl	11610 <__ctype_b_loc@plt>
   29bf4:	ldr	r1, [r0]
   29bf8:	mov	r2, r4
   29bfc:	ldrb	r0, [r2], #1
   29c00:	add	r3, r1, r0, lsl #1
   29c04:	ldrb	r3, [r3, #1]
   29c08:	tst	r3, #32
   29c0c:	bne	29bfc <__assert_fail@plt+0x1849c>
   29c10:	sub	r9, fp, #32
   29c14:	cmp	r7, #0
   29c18:	mov	r8, #4
   29c1c:	movne	r9, r7
   29c20:	cmp	r0, #45	; 0x2d
   29c24:	beq	2a82c <__assert_fail@plt+0x190cc>
   29c28:	mov	r0, r4
   29c2c:	mov	r1, r9
   29c30:	mov	r2, r6
   29c34:	mov	r3, #0
   29c38:	bl	1149c <__strtoull_internal@plt>
   29c3c:	mov	r7, r1
   29c40:	ldr	r1, [r9]
   29c44:	cmp	r1, r4
   29c48:	beq	29c74 <__assert_fail@plt+0x18514>
   29c4c:	mov	r6, r0
   29c50:	ldr	r0, [r5]
   29c54:	cmp	r0, #0
   29c58:	beq	29cb0 <__assert_fail@plt+0x18550>
   29c5c:	cmp	r0, #34	; 0x22
   29c60:	bne	2a82c <__assert_fail@plt+0x190cc>
   29c64:	mov	r8, #1
   29c68:	cmp	sl, #0
   29c6c:	bne	29cbc <__assert_fail@plt+0x1855c>
   29c70:	b	2a824 <__assert_fail@plt+0x190c4>
   29c74:	cmp	sl, #0
   29c78:	beq	2a82c <__assert_fail@plt+0x190cc>
   29c7c:	mov	r5, r1
   29c80:	ldrb	r1, [r4]
   29c84:	cmp	r1, #0
   29c88:	beq	2a82c <__assert_fail@plt+0x190cc>
   29c8c:	mov	r0, sl
   29c90:	bl	11634 <strchr@plt>
   29c94:	cmp	r0, #0
   29c98:	beq	2a82c <__assert_fail@plt+0x190cc>
   29c9c:	mov	r1, r5
   29ca0:	mov	r8, #0
   29ca4:	mov	r6, #1
   29ca8:	mov	r7, #0
   29cac:	b	29cbc <__assert_fail@plt+0x1855c>
   29cb0:	mov	r8, r0
   29cb4:	cmp	sl, #0
   29cb8:	beq	2a824 <__assert_fail@plt+0x190c4>
   29cbc:	ldrb	r4, [r1]
   29cc0:	cmp	r4, #0
   29cc4:	beq	2a824 <__assert_fail@plt+0x190c4>
   29cc8:	str	r1, [sp, #32]
   29ccc:	mov	r0, sl
   29cd0:	mov	r1, r4
   29cd4:	bl	11634 <strchr@plt>
   29cd8:	cmp	r0, #0
   29cdc:	beq	29fa4 <__assert_fail@plt+0x18844>
   29ce0:	sub	r0, r4, #69	; 0x45
   29ce4:	mov	r1, #1
   29ce8:	mov	r3, #0
   29cec:	mov	r5, #1024	; 0x400
   29cf0:	cmp	r0, #47	; 0x2f
   29cf4:	str	r1, [sp, #28]
   29cf8:	bhi	29dfc <__assert_fail@plt+0x1869c>
   29cfc:	add	r1, pc, #0
   29d00:	ldr	pc, [r1, r0, lsl #2]
   29d04:	andeq	r9, r2, r4, asr #27
   29d08:	strdeq	r9, [r2], -ip
   29d0c:	andeq	r9, r2, r4, asr #27
   29d10:	strdeq	r9, [r2], -ip
   29d14:	strdeq	r9, [r2], -ip
   29d18:	strdeq	r9, [r2], -ip
   29d1c:	andeq	r9, r2, r4, asr #27
   29d20:	strdeq	r9, [r2], -ip
   29d24:	andeq	r9, r2, r4, asr #27
   29d28:	strdeq	r9, [r2], -ip
   29d2c:	strdeq	r9, [r2], -ip
   29d30:	andeq	r9, r2, r4, asr #27
   29d34:	strdeq	r9, [r2], -ip
   29d38:	strdeq	r9, [r2], -ip
   29d3c:	strdeq	r9, [r2], -ip
   29d40:	andeq	r9, r2, r4, asr #27
   29d44:	strdeq	r9, [r2], -ip
   29d48:	strdeq	r9, [r2], -ip
   29d4c:	strdeq	r9, [r2], -ip
   29d50:	strdeq	r9, [r2], -ip
   29d54:	andeq	r9, r2, r4, asr #27
   29d58:	andeq	r9, r2, r4, asr #27
   29d5c:	strdeq	r9, [r2], -ip
   29d60:	strdeq	r9, [r2], -ip
   29d64:	strdeq	r9, [r2], -ip
   29d68:	strdeq	r9, [r2], -ip
   29d6c:	strdeq	r9, [r2], -ip
   29d70:	strdeq	r9, [r2], -ip
   29d74:	strdeq	r9, [r2], -ip
   29d78:	strdeq	r9, [r2], -ip
   29d7c:	strdeq	r9, [r2], -ip
   29d80:	strdeq	r9, [r2], -ip
   29d84:	strdeq	r9, [r2], -ip
   29d88:	strdeq	r9, [r2], -ip
   29d8c:	andeq	r9, r2, r4, asr #27
   29d90:	strdeq	r9, [r2], -ip
   29d94:	strdeq	r9, [r2], -ip
   29d98:	strdeq	r9, [r2], -ip
   29d9c:	andeq	r9, r2, r4, asr #27
   29da0:	strdeq	r9, [r2], -ip
   29da4:	andeq	r9, r2, r4, asr #27
   29da8:	strdeq	r9, [r2], -ip
   29dac:	strdeq	r9, [r2], -ip
   29db0:	strdeq	r9, [r2], -ip
   29db4:	strdeq	r9, [r2], -ip
   29db8:	strdeq	r9, [r2], -ip
   29dbc:	strdeq	r9, [r2], -ip
   29dc0:	andeq	r9, r2, r4, asr #27
   29dc4:	mov	r0, sl
   29dc8:	mov	r1, #48	; 0x30
   29dcc:	bl	11634 <strchr@plt>
   29dd0:	cmp	r0, #0
   29dd4:	beq	29df8 <__assert_fail@plt+0x18698>
   29dd8:	ldr	r1, [sp, #32]
   29ddc:	ldrb	r0, [r1, #1]
   29de0:	cmp	r0, #66	; 0x42
   29de4:	cmpne	r0, #68	; 0x44
   29de8:	bne	29fb0 <__assert_fail@plt+0x18850>
   29dec:	mov	r5, #1000	; 0x3e8
   29df0:	mov	r0, #2
   29df4:	str	r0, [sp, #28]
   29df8:	mov	r3, #0
   29dfc:	sub	r0, r4, #66	; 0x42
   29e00:	cmp	r0, #53	; 0x35
   29e04:	bhi	29fa4 <__assert_fail@plt+0x18844>
   29e08:	add	r1, pc, #0
   29e0c:	ldr	pc, [r1, r0, lsl #2]
   29e10:	andeq	sl, r2, ip, lsr #6
   29e14:	andeq	r9, r2, r4, lsr #31
   29e18:	andeq	r9, r2, r4, lsr #31
   29e1c:	andeq	sl, r2, r4, asr r3
   29e20:	andeq	r9, r2, r4, lsr #31
   29e24:	andeq	r9, r2, r8, ror #29
   29e28:	andeq	r9, r2, r4, lsr #31
   29e2c:	andeq	r9, r2, r4, lsr #31
   29e30:	andeq	r9, r2, r4, lsr #31
   29e34:	ldrdeq	r9, [r2], -r4
   29e38:	andeq	r9, r2, r4, lsr #31
   29e3c:	andeq	sl, r2, ip, lsl r0
   29e40:	andeq	r9, r2, r4, lsr #31
   29e44:	andeq	r9, r2, r4, lsr #31
   29e48:	andeq	sl, r2, ip, lsr #9
   29e4c:	andeq	r9, r2, r4, lsr #31
   29e50:	andeq	r9, r2, r4, lsr #31
   29e54:	andeq	r9, r2, r4, lsr #31
   29e58:	andeq	sl, r2, r8, lsr #1
   29e5c:	andeq	r9, r2, r4, lsr #31
   29e60:	andeq	r9, r2, r4, lsr #31
   29e64:	andeq	r9, r2, r4, lsr #31
   29e68:	andeq	r9, r2, r4, lsr #31
   29e6c:	ldrdeq	sl, [r2], -r4
   29e70:	muleq	r2, r0, r1
   29e74:	andeq	r9, r2, r4, lsr #31
   29e78:	andeq	r9, r2, r4, lsr #31
   29e7c:	andeq	r9, r2, r4, lsr #31
   29e80:	andeq	r9, r2, r4, lsr #31
   29e84:	andeq	r9, r2, r4, lsr #31
   29e88:	andeq	r9, r2, r4, lsr #31
   29e8c:	andeq	r9, r2, r4, lsr #31
   29e90:	andeq	sl, r2, ip, lsr #15
   29e94:	andeq	sl, r2, r4, lsl #16
   29e98:	andeq	r9, r2, r4, lsr #31
   29e9c:	andeq	r9, r2, r4, lsr #31
   29ea0:	andeq	r9, r2, r4, lsr #31
   29ea4:	andeq	r9, r2, r8, ror #29
   29ea8:	andeq	r9, r2, r4, lsr #31
   29eac:	andeq	r9, r2, r4, lsr #31
   29eb0:	andeq	r9, r2, r4, lsr #31
   29eb4:	ldrdeq	r9, [r2], -r4
   29eb8:	andeq	r9, r2, r4, lsr #31
   29ebc:	andeq	sl, r2, ip, lsl r0
   29ec0:	andeq	r9, r2, r4, lsr #31
   29ec4:	andeq	r9, r2, r4, lsr #31
   29ec8:	andeq	r9, r2, r4, lsr #31
   29ecc:	andeq	r9, r2, r4, lsr #31
   29ed0:	andeq	r9, r2, r4, lsr #31
   29ed4:	andeq	r9, r2, r4, lsr #31
   29ed8:	andeq	sl, r2, r8, lsr #1
   29edc:	andeq	r9, r2, r4, lsr #31
   29ee0:	andeq	r9, r2, r4, lsr #31
   29ee4:	andeq	sl, r2, r0, ror #15
   29ee8:	mvn	r0, #0
   29eec:	mvn	r1, #0
   29ef0:	mov	r2, r5
   29ef4:	mov	sl, r3
   29ef8:	bl	2af04 <__assert_fail@plt+0x197a4>
   29efc:	subs	r3, r0, r6
   29f00:	mov	lr, #0
   29f04:	umull	r4, r2, r6, r5
   29f08:	str	r1, [sp, #20]
   29f0c:	sbcs	r3, r1, r7
   29f10:	mla	ip, r6, sl, r2
   29f14:	mov	r2, r1
   29f18:	movwcc	lr, #1
   29f1c:	mla	r7, r7, r5, ip
   29f20:	mov	r2, #0
   29f24:	cmp	lr, #0
   29f28:	mvnne	r4, #0
   29f2c:	mvnne	r7, #0
   29f30:	subs	r6, r0, r4
   29f34:	sbcs	r6, r1, r7
   29f38:	movwcc	r2, #1
   29f3c:	umull	r3, r6, r4, r5
   29f40:	cmp	r2, #0
   29f44:	str	r6, [sp, #16]
   29f48:	mvnne	r3, #0
   29f4c:	cmp	r2, #0
   29f50:	umull	r6, ip, r3, r5
   29f54:	mla	r1, r3, sl, ip
   29f58:	ldr	ip, [sp, #16]
   29f5c:	str	r1, [sp, #12]
   29f60:	mla	r4, r4, sl, ip
   29f64:	mla	r4, r7, r5, r4
   29f68:	ldr	r7, [sp, #12]
   29f6c:	mvnne	r4, #0
   29f70:	subs	r0, r0, r3
   29f74:	ldr	r0, [sp, #20]
   29f78:	mla	r7, r4, r5, r7
   29f7c:	sbcs	r0, r0, r4
   29f80:	mov	r0, #0
   29f84:	movwcc	r0, #1
   29f88:	cmp	r0, #0
   29f8c:	mov	r1, r0
   29f90:	orr	r0, lr, r2
   29f94:	mvnne	r7, #0
   29f98:	mvnne	r6, #0
   29f9c:	orr	r3, r0, r1
   29fa0:	b	2a804 <__assert_fail@plt+0x190a4>
   29fa4:	ldr	r0, [sp, #36]	; 0x24
   29fa8:	orr	r8, r8, #2
   29fac:	b	2a828 <__assert_fail@plt+0x190c8>
   29fb0:	cmp	r0, #105	; 0x69
   29fb4:	mov	r3, #0
   29fb8:	bne	29dfc <__assert_fail@plt+0x1869c>
   29fbc:	ldrb	r0, [r1, #2]
   29fc0:	mov	r1, #1
   29fc4:	cmp	r0, #66	; 0x42
   29fc8:	movweq	r1, #3
   29fcc:	str	r1, [sp, #28]
   29fd0:	b	29dfc <__assert_fail@plt+0x1869c>
   29fd4:	mvn	r0, #0
   29fd8:	mvn	r1, #0
   29fdc:	mov	r2, r5
   29fe0:	mov	r4, r3
   29fe4:	bl	2af04 <__assert_fail@plt+0x197a4>
   29fe8:	subs	r0, r0, r6
   29fec:	mov	r2, #0
   29ff0:	sbcs	r0, r1, r7
   29ff4:	movwcc	r2, #1
   29ff8:	umull	r0, r1, r6, r5
   29ffc:	mla	r1, r6, r4, r1
   2a000:	cmp	r2, #0
   2a004:	mov	r3, r2
   2a008:	mla	r7, r7, r5, r1
   2a00c:	mvnne	r0, #0
   2a010:	mvnne	r7, #0
   2a014:	mov	r6, r0
   2a018:	b	2a804 <__assert_fail@plt+0x190a4>
   2a01c:	mvn	r0, #0
   2a020:	mvn	r1, #0
   2a024:	mov	r2, r5
   2a028:	str	r3, [sp, #24]
   2a02c:	bl	2af04 <__assert_fail@plt+0x197a4>
   2a030:	subs	r3, r0, r6
   2a034:	mov	ip, r0
   2a038:	umull	r4, r0, r6, r5
   2a03c:	mov	sl, #0
   2a040:	sbcs	r3, r1, r7
   2a044:	str	r0, [sp, #20]
   2a048:	ldr	r0, [sp, #24]
   2a04c:	mov	r3, #0
   2a050:	movwcc	r3, #1
   2a054:	cmp	r3, #0
   2a058:	mvnne	r4, #0
   2a05c:	cmp	r3, #0
   2a060:	umull	lr, r2, r4, r5
   2a064:	mla	r2, r4, r0, r2
   2a068:	str	r2, [sp, #16]
   2a06c:	ldr	r2, [sp, #20]
   2a070:	mla	r6, r6, r0, r2
   2a074:	ldr	r0, [sp, #16]
   2a078:	mla	r6, r7, r5, r6
   2a07c:	mvnne	r6, #0
   2a080:	mla	r7, r6, r5, r0
   2a084:	subs	r0, ip, r4
   2a088:	sbcs	r0, r1, r6
   2a08c:	movwcc	sl, #1
   2a090:	cmp	sl, #0
   2a094:	orr	r3, r3, sl
   2a098:	mvnne	lr, #0
   2a09c:	mvnne	r7, #0
   2a0a0:	mov	r6, lr
   2a0a4:	b	2a804 <__assert_fail@plt+0x190a4>
   2a0a8:	mvn	r0, #0
   2a0ac:	mvn	r1, #0
   2a0b0:	mov	r2, r5
   2a0b4:	mov	sl, r3
   2a0b8:	bl	2af04 <__assert_fail@plt+0x197a4>
   2a0bc:	subs	r3, r0, r6
   2a0c0:	mov	ip, r1
   2a0c4:	umull	r2, lr, r6, r5
   2a0c8:	str	r0, [sp, #20]
   2a0cc:	sbcs	r3, r1, r7
   2a0d0:	mov	r1, #0
   2a0d4:	mla	r6, r6, sl, lr
   2a0d8:	mov	lr, #0
   2a0dc:	str	ip, [sp, #16]
   2a0e0:	movwcc	r1, #1
   2a0e4:	mla	r7, r7, r5, r6
   2a0e8:	cmp	r1, #0
   2a0ec:	mvnne	r2, #0
   2a0f0:	cmp	r1, #0
   2a0f4:	umull	r3, r4, r2, r5
   2a0f8:	mvnne	r7, #0
   2a0fc:	mla	r4, r2, sl, r4
   2a100:	subs	r2, r0, r2
   2a104:	sbcs	r2, ip, r7
   2a108:	mla	r4, r7, r5, r4
   2a10c:	movwcc	lr, #1
   2a110:	mov	r2, #0
   2a114:	cmp	lr, #0
   2a118:	mvnne	r3, #0
   2a11c:	mvnne	r4, #0
   2a120:	subs	r7, r0, r3
   2a124:	mov	r0, r5
   2a128:	sbcs	r7, ip, r4
   2a12c:	movwcc	r2, #1
   2a130:	umull	r5, r7, r3, r5
   2a134:	cmp	r2, #0
   2a138:	mla	r3, r3, sl, r7
   2a13c:	mvnne	r5, #0
   2a140:	mla	r3, r4, r0, r3
   2a144:	cmp	r2, #0
   2a148:	umull	r6, ip, r5, r0
   2a14c:	mvnne	r3, #0
   2a150:	mla	ip, r5, sl, ip
   2a154:	mla	r7, r3, r0, ip
   2a158:	ldr	r0, [sp, #20]
   2a15c:	subs	r0, r0, r5
   2a160:	ldr	r0, [sp, #16]
   2a164:	sbcs	r0, r0, r3
   2a168:	mov	r0, #0
   2a16c:	movwcc	r0, #1
   2a170:	cmp	r0, #0
   2a174:	mov	r3, r0
   2a178:	orr	r0, r1, lr
   2a17c:	orr	r0, r0, r2
   2a180:	mvnne	r7, #0
   2a184:	mvnne	r6, #0
   2a188:	orr	r3, r0, r3
   2a18c:	b	2a804 <__assert_fail@plt+0x190a4>
   2a190:	mvn	r0, #0
   2a194:	mvn	r1, #0
   2a198:	mov	r2, r5
   2a19c:	mov	r4, r3
   2a1a0:	str	r3, [sp, #24]
   2a1a4:	bl	2af04 <__assert_fail@plt+0x197a4>
   2a1a8:	umull	r3, r2, r6, r5
   2a1ac:	mla	r2, r6, r4, r2
   2a1b0:	subs	r6, r0, r6
   2a1b4:	sbcs	r6, r1, r7
   2a1b8:	mla	ip, r7, r5, r2
   2a1bc:	ldr	r2, [sp, #24]
   2a1c0:	mov	r6, #0
   2a1c4:	movwcc	r6, #1
   2a1c8:	cmp	r6, #0
   2a1cc:	str	r6, [sp, #20]
   2a1d0:	mov	r6, #0
   2a1d4:	mvnne	r3, #0
   2a1d8:	mvnne	ip, #0
   2a1dc:	subs	r4, r0, r3
   2a1e0:	umull	r7, lr, r3, r5
   2a1e4:	sbcs	r4, r1, ip
   2a1e8:	mla	r3, r3, r2, lr
   2a1ec:	movwcc	r6, #1
   2a1f0:	cmp	r6, #0
   2a1f4:	str	r6, [sp, #16]
   2a1f8:	mvnne	r7, #0
   2a1fc:	cmp	r6, #0
   2a200:	umull	sl, r4, r7, r5
   2a204:	mla	r4, r7, r2, r4
   2a208:	mla	r2, ip, r5, r3
   2a20c:	mov	ip, #0
   2a210:	mvnne	r2, #0
   2a214:	subs	r3, r0, r7
   2a218:	mla	r6, r2, r5, r4
   2a21c:	mov	r4, r0
   2a220:	sbcs	r2, r1, r2
   2a224:	mov	r0, #0
   2a228:	movwcc	r0, #1
   2a22c:	mov	r3, r4
   2a230:	cmp	r0, #0
   2a234:	str	r0, [sp, #12]
   2a238:	mov	r0, r1
   2a23c:	str	r3, [sp, #4]
   2a240:	mvnne	sl, #0
   2a244:	mvnne	r6, #0
   2a248:	str	r0, [sp, #8]
   2a24c:	subs	r2, r4, sl
   2a250:	ldr	r4, [sp, #24]
   2a254:	sbcs	r2, r1, r6
   2a258:	movwcc	ip, #1
   2a25c:	umull	r7, r2, sl, r5
   2a260:	cmp	ip, #0
   2a264:	mla	r2, sl, r4, r2
   2a268:	mvnne	r7, #0
   2a26c:	cmp	ip, #0
   2a270:	mov	sl, #0
   2a274:	umull	r1, lr, r7, r5
   2a278:	mla	r2, r6, r5, r2
   2a27c:	mvnne	r2, #0
   2a280:	mla	lr, r7, r4, lr
   2a284:	subs	r6, r3, r7
   2a288:	mla	lr, r2, r5, lr
   2a28c:	sbcs	r2, r0, r2
   2a290:	movwcc	sl, #1
   2a294:	mov	r2, #0
   2a298:	cmp	sl, #0
   2a29c:	mvnne	r1, #0
   2a2a0:	mvnne	lr, #0
   2a2a4:	subs	r6, r3, r1
   2a2a8:	ldr	r3, [sp, #24]
   2a2ac:	sbcs	r6, r0, lr
   2a2b0:	umull	r0, r7, r1, r5
   2a2b4:	movwcc	r2, #1
   2a2b8:	cmp	r2, #0
   2a2bc:	mvnne	r0, #0
   2a2c0:	mla	r1, r1, r3, r7
   2a2c4:	cmp	r2, #0
   2a2c8:	umull	r6, r4, r0, r5
   2a2cc:	mla	r1, lr, r5, r1
   2a2d0:	mla	r4, r0, r3, r4
   2a2d4:	ldr	r3, [sp, #4]
   2a2d8:	mvnne	r1, #0
   2a2dc:	mla	r7, r1, r5, r4
   2a2e0:	ldr	r5, [sp, #16]
   2a2e4:	subs	r0, r3, r0
   2a2e8:	ldr	r0, [sp, #8]
   2a2ec:	sbcs	r0, r0, r1
   2a2f0:	mov	r0, #0
   2a2f4:	movwcc	r0, #1
   2a2f8:	cmp	r0, #0
   2a2fc:	mov	r1, r0
   2a300:	ldr	r0, [sp, #20]
   2a304:	mvnne	r7, #0
   2a308:	mvnne	r6, #0
   2a30c:	orr	r0, r0, r5
   2a310:	ldr	r5, [sp, #12]
   2a314:	orr	r0, r0, r5
   2a318:	orr	r0, r0, ip
   2a31c:	orr	r0, r0, sl
   2a320:	orr	r0, r0, r2
   2a324:	orr	r0, r0, r1
   2a328:	b	2a7a4 <__assert_fail@plt+0x19044>
   2a32c:	mov	r1, #0
   2a330:	lsl	r2, r7, #10
   2a334:	lsl	r0, r6, #10
   2a338:	lsr	r3, r7, #22
   2a33c:	cmp	r1, r7, lsr #22
   2a340:	orr	r2, r2, r6, lsr #22
   2a344:	mvnne	r0, #0
   2a348:	movwne	r3, #1
   2a34c:	cmp	r1, r7, lsr #22
   2a350:	b	2a7d0 <__assert_fail@plt+0x19070>
   2a354:	mvn	r0, #0
   2a358:	mvn	r1, #0
   2a35c:	mov	r2, r5
   2a360:	mov	sl, r3
   2a364:	bl	2af04 <__assert_fail@plt+0x197a4>
   2a368:	subs	r2, r0, r6
   2a36c:	mov	ip, r0
   2a370:	mov	r0, #0
   2a374:	sbcs	r2, r1, r7
   2a378:	movwcc	r0, #1
   2a37c:	umull	r4, r2, r6, r5
   2a380:	cmp	r0, #0
   2a384:	mla	r2, r6, sl, r2
   2a388:	str	r0, [sp, #20]
   2a38c:	mvnne	r4, #0
   2a390:	cmp	r0, #0
   2a394:	mla	r2, r7, r5, r2
   2a398:	mov	r0, #0
   2a39c:	umull	lr, r3, r4, r5
   2a3a0:	mvnne	r2, #0
   2a3a4:	mla	r3, r4, sl, r3
   2a3a8:	mla	r6, r2, r5, r3
   2a3ac:	subs	r3, ip, r4
   2a3b0:	sbcs	r2, r1, r2
   2a3b4:	mov	r3, r1
   2a3b8:	movwcc	r0, #1
   2a3bc:	str	r3, [sp, #8]
   2a3c0:	cmp	r0, #0
   2a3c4:	str	r0, [sp, #16]
   2a3c8:	mov	r0, ip
   2a3cc:	mvnne	lr, #0
   2a3d0:	mvnne	r6, #0
   2a3d4:	str	r0, [sp, #12]
   2a3d8:	subs	r2, ip, lr
   2a3dc:	umull	r7, r4, lr, r5
   2a3e0:	sbcs	r2, r1, r6
   2a3e4:	mla	r4, lr, sl, r4
   2a3e8:	mov	r2, #0
   2a3ec:	mla	r6, r6, r5, r4
   2a3f0:	mov	r4, #0
   2a3f4:	movwcc	r2, #1
   2a3f8:	cmp	r2, #0
   2a3fc:	mvnne	r7, #0
   2a400:	cmp	r2, #0
   2a404:	umull	r1, ip, r7, r5
   2a408:	mvnne	r6, #0
   2a40c:	mla	ip, r7, sl, ip
   2a410:	subs	r7, r0, r7
   2a414:	mla	lr, r6, r5, ip
   2a418:	sbcs	r7, r3, r6
   2a41c:	mov	ip, #0
   2a420:	movwcc	ip, #1
   2a424:	cmp	ip, #0
   2a428:	mvnne	r1, #0
   2a42c:	mvnne	lr, #0
   2a430:	subs	r7, r0, r1
   2a434:	sbcs	r7, r3, lr
   2a438:	movwcc	r4, #1
   2a43c:	umull	r0, r7, r1, r5
   2a440:	cmp	r4, #0
   2a444:	mla	r1, r1, sl, r7
   2a448:	mvnne	r0, #0
   2a44c:	mla	r1, lr, r5, r1
   2a450:	cmp	r4, #0
   2a454:	umull	r6, r3, r0, r5
   2a458:	mvnne	r1, #0
   2a45c:	mla	r3, r0, sl, r3
   2a460:	mla	r7, r1, r5, r3
   2a464:	ldr	r3, [sp, #12]
   2a468:	subs	r0, r3, r0
   2a46c:	ldr	r3, [sp, #16]
   2a470:	ldr	r0, [sp, #8]
   2a474:	sbcs	r0, r0, r1
   2a478:	mov	r0, #0
   2a47c:	movwcc	r0, #1
   2a480:	cmp	r0, #0
   2a484:	mov	r1, r0
   2a488:	ldr	r0, [sp, #20]
   2a48c:	mvnne	r7, #0
   2a490:	mvnne	r6, #0
   2a494:	orr	r0, r0, r3
   2a498:	orr	r0, r0, r2
   2a49c:	orr	r0, r0, ip
   2a4a0:	orr	r0, r0, r4
   2a4a4:	orr	r3, r0, r1
   2a4a8:	b	2a804 <__assert_fail@plt+0x190a4>
   2a4ac:	mvn	r0, #0
   2a4b0:	mvn	r1, #0
   2a4b4:	mov	r2, r5
   2a4b8:	mov	sl, r3
   2a4bc:	bl	2af04 <__assert_fail@plt+0x197a4>
   2a4c0:	umull	r3, r2, r6, r5
   2a4c4:	mov	lr, r1
   2a4c8:	mov	r1, r0
   2a4cc:	mla	r2, r6, sl, r2
   2a4d0:	subs	r6, r0, r6
   2a4d4:	mov	r0, #0
   2a4d8:	sbcs	r6, lr, r7
   2a4dc:	mla	r2, r7, r5, r2
   2a4e0:	movwcc	r0, #1
   2a4e4:	cmp	r0, #0
   2a4e8:	str	r0, [sp, #20]
   2a4ec:	mov	r0, r1
   2a4f0:	mvnne	r3, #0
   2a4f4:	mvnne	r2, #0
   2a4f8:	str	r0, [sp, #16]
   2a4fc:	subs	r4, r1, r3
   2a500:	umull	r7, ip, r3, r5
   2a504:	sbcs	r4, lr, r2
   2a508:	mla	r3, r3, sl, ip
   2a50c:	mov	ip, #0
   2a510:	mov	r4, #0
   2a514:	mla	r2, r2, r5, r3
   2a518:	movwcc	r4, #1
   2a51c:	cmp	r4, #0
   2a520:	mvnne	r7, #0
   2a524:	cmp	r4, #0
   2a528:	umull	r1, r6, r7, r5
   2a52c:	mvnne	r2, #0
   2a530:	mla	r6, r7, sl, r6
   2a534:	mla	r3, r2, r5, r6
   2a538:	subs	r6, r0, r7
   2a53c:	sbcs	r2, lr, r2
   2a540:	movwcc	ip, #1
   2a544:	mov	r2, #0
   2a548:	cmp	ip, #0
   2a54c:	mvnne	r1, #0
   2a550:	mvnne	r3, #0
   2a554:	subs	r6, r0, r1
   2a558:	sbcs	r6, lr, r3
   2a55c:	movwcc	r2, #1
   2a560:	umull	r0, r6, r1, r5
   2a564:	cmp	r2, #0
   2a568:	str	r6, [sp, #12]
   2a56c:	mvnne	r0, #0
   2a570:	cmp	r2, #0
   2a574:	umull	r6, r7, r0, r5
   2a578:	mla	r7, r0, sl, r7
   2a57c:	str	r7, [sp, #8]
   2a580:	ldr	r7, [sp, #12]
   2a584:	mla	r1, r1, sl, r7
   2a588:	mla	r1, r3, r5, r1
   2a58c:	ldr	r3, [sp, #8]
   2a590:	mvnne	r1, #0
   2a594:	mla	r7, r1, r5, r3
   2a598:	ldr	r3, [sp, #16]
   2a59c:	subs	r0, r3, r0
   2a5a0:	sbcs	r0, lr, r1
   2a5a4:	mov	r0, #0
   2a5a8:	movwcc	r0, #1
   2a5ac:	cmp	r0, #0
   2a5b0:	mov	r1, r0
   2a5b4:	ldr	r0, [sp, #20]
   2a5b8:	mvnne	r7, #0
   2a5bc:	mvnne	r6, #0
   2a5c0:	orr	r0, r0, r4
   2a5c4:	orr	r0, r0, ip
   2a5c8:	orr	r0, r0, r2
   2a5cc:	orr	r3, r0, r1
   2a5d0:	b	2a804 <__assert_fail@plt+0x190a4>
   2a5d4:	mvn	r0, #0
   2a5d8:	mvn	r1, #0
   2a5dc:	mov	r2, r5
   2a5e0:	mov	sl, r3
   2a5e4:	bl	2af04 <__assert_fail@plt+0x197a4>
   2a5e8:	mov	lr, r0
   2a5ec:	subs	r0, r0, r6
   2a5f0:	mov	r2, #0
   2a5f4:	mov	ip, r1
   2a5f8:	str	sl, [sp, #24]
   2a5fc:	sbcs	r0, r1, r7
   2a600:	umull	r3, r1, r6, r5
   2a604:	str	lr, [sp, #4]
   2a608:	movwcc	r2, #1
   2a60c:	mla	r6, r6, sl, r1
   2a610:	mov	r1, #0
   2a614:	cmp	r2, #0
   2a618:	mla	r7, r7, r5, r6
   2a61c:	str	r2, [sp, #20]
   2a620:	mvnne	r3, #0
   2a624:	cmp	r2, #0
   2a628:	mov	r2, #0
   2a62c:	umull	r0, r4, r3, r5
   2a630:	mvnne	r7, #0
   2a634:	mla	r4, r3, sl, r4
   2a638:	subs	r3, lr, r3
   2a63c:	sbcs	r3, ip, r7
   2a640:	mla	r4, r7, r5, r4
   2a644:	movwcc	r1, #1
   2a648:	cmp	r1, #0
   2a64c:	str	r1, [sp, #16]
   2a650:	mvnne	r0, #0
   2a654:	mvnne	r4, #0
   2a658:	subs	r3, lr, r0
   2a65c:	sbcs	r3, ip, r4
   2a660:	movwcc	r2, #1
   2a664:	umull	r6, r3, r0, r5
   2a668:	cmp	r2, #0
   2a66c:	mla	r0, r0, sl, r3
   2a670:	str	r2, [sp, #12]
   2a674:	mvnne	r6, #0
   2a678:	mla	r0, r4, r5, r0
   2a67c:	cmp	r2, #0
   2a680:	ldr	r4, [sp, #24]
   2a684:	umull	r1, r7, r6, r5
   2a688:	mvnne	r0, #0
   2a68c:	subs	r3, lr, r6
   2a690:	mla	r7, r6, sl, r7
   2a694:	mov	r3, ip
   2a698:	mla	r7, r0, r5, r7
   2a69c:	sbcs	r0, ip, r0
   2a6a0:	str	r3, [sp]
   2a6a4:	mov	r0, #0
   2a6a8:	movwcc	r0, #1
   2a6ac:	cmp	r0, #0
   2a6b0:	str	r0, [sp, #8]
   2a6b4:	mvnne	r1, #0
   2a6b8:	mvnne	r7, #0
   2a6bc:	subs	r0, lr, r1
   2a6c0:	sbcs	r0, ip, r7
   2a6c4:	mov	ip, #0
   2a6c8:	movwcc	ip, #1
   2a6cc:	umull	r6, r0, r1, r5
   2a6d0:	cmp	ip, #0
   2a6d4:	mla	r1, r1, r4, r0
   2a6d8:	mov	r0, lr
   2a6dc:	mvnne	r6, #0
   2a6e0:	mla	r1, r7, r5, r1
   2a6e4:	cmp	ip, #0
   2a6e8:	umull	r2, sl, r6, r5
   2a6ec:	mvnne	r1, #0
   2a6f0:	mla	sl, r6, r4, sl
   2a6f4:	subs	r6, lr, r6
   2a6f8:	mov	lr, #0
   2a6fc:	mla	r7, r1, r5, sl
   2a700:	sbcs	r1, r3, r1
   2a704:	movwcc	lr, #1
   2a708:	ldr	r1, [sp, #24]
   2a70c:	cmp	lr, #0
   2a710:	mvnne	r2, #0
   2a714:	mvnne	r7, #0
   2a718:	subs	r6, r0, r2
   2a71c:	umull	r0, sl, r2, r5
   2a720:	sbcs	r6, r3, r7
   2a724:	mov	r3, #0
   2a728:	mla	r2, r2, r1, sl
   2a72c:	movwcc	r3, #1
   2a730:	mla	r2, r7, r5, r2
   2a734:	cmp	r3, #0
   2a738:	mvnne	r0, #0
   2a73c:	cmp	r3, #0
   2a740:	umull	r6, r4, r0, r5
   2a744:	mvnne	r2, #0
   2a748:	mla	r4, r0, r1, r4
   2a74c:	ldr	r1, [sp, #4]
   2a750:	mla	r7, r2, r5, r4
   2a754:	ldr	r5, [sp, #16]
   2a758:	subs	r0, r1, r0
   2a75c:	ldr	r0, [sp]
   2a760:	sbcs	r0, r0, r2
   2a764:	mov	r0, #0
   2a768:	movwcc	r0, #1
   2a76c:	cmp	r0, #0
   2a770:	mov	r2, r0
   2a774:	ldr	r0, [sp, #20]
   2a778:	mvnne	r7, #0
   2a77c:	mvnne	r6, #0
   2a780:	orr	r0, r0, r5
   2a784:	ldr	r5, [sp, #12]
   2a788:	orr	r0, r0, r5
   2a78c:	ldr	r5, [sp, #8]
   2a790:	orr	r0, r0, r5
   2a794:	orr	r0, r0, ip
   2a798:	orr	r0, r0, lr
   2a79c:	orr	r0, r0, r3
   2a7a0:	orr	r0, r0, r2
   2a7a4:	and	r3, r0, #1
   2a7a8:	b	2a804 <__assert_fail@plt+0x190a4>
   2a7ac:	mov	r1, #0
   2a7b0:	lsl	r2, r7, #9
   2a7b4:	lsl	r0, r6, #9
   2a7b8:	lsr	r3, r7, #23
   2a7bc:	cmp	r1, r7, lsr #23
   2a7c0:	orr	r2, r2, r6, lsr #23
   2a7c4:	mvnne	r0, #0
   2a7c8:	movwne	r3, #1
   2a7cc:	cmp	r1, r7, lsr #23
   2a7d0:	mvnne	r2, #0
   2a7d4:	mov	r6, r0
   2a7d8:	mov	r7, r2
   2a7dc:	b	2a804 <__assert_fail@plt+0x190a4>
   2a7e0:	lsl	r1, r7, #1
   2a7e4:	lsl	r0, r6, #1
   2a7e8:	cmp	r7, #0
   2a7ec:	lsr	r3, r7, #31
   2a7f0:	orr	r1, r1, r6, lsr #31
   2a7f4:	mvnlt	r0, #0
   2a7f8:	mvnlt	r1, #0
   2a7fc:	mov	r6, r0
   2a800:	mov	r7, r1
   2a804:	ldr	r1, [sp, #32]
   2a808:	ldr	r2, [sp, #28]
   2a80c:	orr	r8, r3, r8
   2a810:	add	r0, r1, r2
   2a814:	str	r0, [r9]
   2a818:	ldrb	r0, [r1, r2]
   2a81c:	cmp	r0, #0
   2a820:	orrne	r8, r8, #2
   2a824:	ldr	r0, [sp, #36]	; 0x24
   2a828:	strd	r6, [r0]
   2a82c:	mov	r0, r8
   2a830:	sub	sp, fp, #28
   2a834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a838:	movw	r0, #50001	; 0xc351
   2a83c:	movw	r1, #50039	; 0xc377
   2a840:	movw	r3, #50133	; 0xc3d5
   2a844:	mov	r2, #85	; 0x55
   2a848:	movt	r0, #2
   2a84c:	movt	r1, #2
   2a850:	movt	r3, #2
   2a854:	bl	11760 <__assert_fail@plt>
   2a858:	clz	r2, r1
   2a85c:	clz	r3, r0
   2a860:	lsr	r2, r2, #5
   2a864:	lsr	r3, r3, #5
   2a868:	orrs	r2, r3, r2
   2a86c:	movwne	r1, #1
   2a870:	movwne	r0, #1
   2a874:	cmp	r1, #0
   2a878:	beq	2a8a8 <__assert_fail@plt+0x19148>
   2a87c:	mvn	r2, #-2147483648	; 0x80000000
   2a880:	udiv	r2, r2, r1
   2a884:	cmp	r2, r0
   2a888:	bcs	2a8a8 <__assert_fail@plt+0x19148>
   2a88c:	push	{fp, lr}
   2a890:	mov	fp, sp
   2a894:	bl	11640 <__errno_location@plt>
   2a898:	mov	r1, #12
   2a89c:	str	r1, [r0]
   2a8a0:	mov	r0, #0
   2a8a4:	pop	{fp, pc}
   2a8a8:	b	113d0 <calloc@plt>
   2a8ac:	cmp	r0, #0
   2a8b0:	movweq	r0, #1
   2a8b4:	cmn	r0, #1
   2a8b8:	ble	2a8c0 <__assert_fail@plt+0x19160>
   2a8bc:	b	115b0 <malloc@plt>
   2a8c0:	push	{fp, lr}
   2a8c4:	mov	fp, sp
   2a8c8:	bl	11640 <__errno_location@plt>
   2a8cc:	mov	r1, #12
   2a8d0:	str	r1, [r0]
   2a8d4:	mov	r0, #0
   2a8d8:	pop	{fp, pc}
   2a8dc:	push	{fp, lr}
   2a8e0:	mov	fp, sp
   2a8e4:	cmp	r0, #0
   2a8e8:	beq	2a904 <__assert_fail@plt+0x191a4>
   2a8ec:	cmp	r1, #0
   2a8f0:	beq	2a910 <__assert_fail@plt+0x191b0>
   2a8f4:	cmn	r1, #1
   2a8f8:	ble	2a91c <__assert_fail@plt+0x191bc>
   2a8fc:	pop	{fp, lr}
   2a900:	b	11508 <realloc@plt>
   2a904:	mov	r0, r1
   2a908:	pop	{fp, lr}
   2a90c:	b	2a8ac <__assert_fail@plt+0x1914c>
   2a910:	bl	141c4 <__assert_fail@plt+0x2a64>
   2a914:	mov	r0, #0
   2a918:	pop	{fp, pc}
   2a91c:	bl	11640 <__errno_location@plt>
   2a920:	mov	r1, #12
   2a924:	str	r1, [r0]
   2a928:	mov	r0, #0
   2a92c:	pop	{fp, pc}
   2a930:	push	{r4, r5, r6, sl, fp, lr}
   2a934:	add	fp, sp, #16
   2a938:	mov	r4, r0
   2a93c:	bl	11580 <__fpending@plt>
   2a940:	ldr	r6, [r4]
   2a944:	mov	r5, r0
   2a948:	mov	r0, r4
   2a94c:	bl	13fb0 <__assert_fail@plt+0x2850>
   2a950:	tst	r6, #32
   2a954:	bne	2a98c <__assert_fail@plt+0x1922c>
   2a958:	cmp	r0, #0
   2a95c:	mov	r4, r0
   2a960:	mvnne	r4, #0
   2a964:	cmp	r5, #0
   2a968:	bne	2a998 <__assert_fail@plt+0x19238>
   2a96c:	cmp	r0, #0
   2a970:	beq	2a998 <__assert_fail@plt+0x19238>
   2a974:	bl	11640 <__errno_location@plt>
   2a978:	ldr	r0, [r0]
   2a97c:	subs	r4, r0, #9
   2a980:	mvnne	r4, #0
   2a984:	mov	r0, r4
   2a988:	pop	{r4, r5, r6, sl, fp, pc}
   2a98c:	mvn	r4, #0
   2a990:	cmp	r0, #0
   2a994:	beq	2a9a0 <__assert_fail@plt+0x19240>
   2a998:	mov	r0, r4
   2a99c:	pop	{r4, r5, r6, sl, fp, pc}
   2a9a0:	bl	11640 <__errno_location@plt>
   2a9a4:	mov	r1, #0
   2a9a8:	str	r1, [r0]
   2a9ac:	mov	r0, r4
   2a9b0:	pop	{r4, r5, r6, sl, fp, pc}
   2a9b4:	push	{r4, r5, r6, r7, fp, lr}
   2a9b8:	add	fp, sp, #16
   2a9bc:	mov	r4, r0
   2a9c0:	ldr	r0, [r0, #4]
   2a9c4:	mov	r5, r1
   2a9c8:	cmp	r0, r1
   2a9cc:	movcs	r0, #1
   2a9d0:	strcs	r5, [r4]
   2a9d4:	popcs	{r4, r5, r6, r7, fp, pc}
   2a9d8:	mov	r6, r3
   2a9dc:	cmp	r3, #0
   2a9e0:	beq	2aa08 <__assert_fail@plt+0x192a8>
   2a9e4:	mvn	r0, #0
   2a9e8:	udiv	r0, r0, r6
   2a9ec:	cmp	r0, r5
   2a9f0:	bcs	2aa08 <__assert_fail@plt+0x192a8>
   2a9f4:	bl	11640 <__errno_location@plt>
   2a9f8:	mov	r1, #12
   2a9fc:	str	r1, [r0]
   2aa00:	mov	r0, #0
   2aa04:	pop	{r4, r5, r6, r7, fp, pc}
   2aa08:	ldr	r0, [r4, #8]
   2aa0c:	mul	r1, r6, r5
   2aa10:	cmp	r0, r2
   2aa14:	beq	2aa2c <__assert_fail@plt+0x192cc>
   2aa18:	bl	2a8dc <__assert_fail@plt+0x1917c>
   2aa1c:	mov	r7, r0
   2aa20:	cmp	r0, #0
   2aa24:	bne	2aa5c <__assert_fail@plt+0x192fc>
   2aa28:	b	2aa6c <__assert_fail@plt+0x1930c>
   2aa2c:	mov	r0, r1
   2aa30:	bl	2a8ac <__assert_fail@plt+0x1914c>
   2aa34:	cmp	r0, #0
   2aa38:	beq	2aa6c <__assert_fail@plt+0x1930c>
   2aa3c:	ldr	r1, [r4, #8]
   2aa40:	mov	r7, r0
   2aa44:	cmp	r1, #0
   2aa48:	beq	2aa5c <__assert_fail@plt+0x192fc>
   2aa4c:	ldr	r0, [r4]
   2aa50:	mul	r2, r0, r6
   2aa54:	mov	r0, r7
   2aa58:	bl	11484 <memcpy@plt>
   2aa5c:	mov	r0, #1
   2aa60:	str	r5, [r4]
   2aa64:	stmib	r4, {r5, r7}
   2aa68:	pop	{r4, r5, r6, r7, fp, pc}
   2aa6c:	mov	r0, #0
   2aa70:	pop	{r4, r5, r6, r7, fp, pc}
   2aa74:	sub	sp, sp, #8
   2aa78:	push	{r4, r5, r6, r7, fp, lr}
   2aa7c:	add	fp, sp, #16
   2aa80:	sub	sp, sp, #8
   2aa84:	mov	r5, r0
   2aa88:	add	r0, fp, #8
   2aa8c:	cmp	r1, #11
   2aa90:	str	r3, [fp, #12]
   2aa94:	str	r2, [fp, #8]
   2aa98:	str	r0, [sp, #4]
   2aa9c:	bhi	2aad8 <__assert_fail@plt+0x19378>
   2aaa0:	mov	r0, #1
   2aaa4:	movw	r2, #1300	; 0x514
   2aaa8:	tst	r2, r0, lsl r1
   2aaac:	bne	2ab98 <__assert_fail@plt+0x19438>
   2aab0:	movw	r2, #2570	; 0xa0a
   2aab4:	tst	r2, r0, lsl r1
   2aab8:	bne	2ab00 <__assert_fail@plt+0x193a0>
   2aabc:	cmp	r1, #0
   2aac0:	bne	2aad8 <__assert_fail@plt+0x19378>
   2aac4:	ldr	r0, [sp, #4]
   2aac8:	add	r1, r0, #4
   2aacc:	str	r1, [sp, #4]
   2aad0:	mov	r1, #0
   2aad4:	b	2aba4 <__assert_fail@plt+0x19444>
   2aad8:	sub	r0, r1, #1024	; 0x400
   2aadc:	cmp	r0, #10
   2aae0:	bhi	2ab98 <__assert_fail@plt+0x19438>
   2aae4:	mov	r2, #1
   2aae8:	movw	r3, #645	; 0x285
   2aaec:	tst	r3, r2, lsl r0
   2aaf0:	bne	2ab98 <__assert_fail@plt+0x19438>
   2aaf4:	movw	r3, #1282	; 0x502
   2aaf8:	tst	r3, r2, lsl r0
   2aafc:	beq	2ab0c <__assert_fail@plt+0x193ac>
   2ab00:	mov	r0, r5
   2ab04:	bl	116c4 <fcntl64@plt>
   2ab08:	b	2abb0 <__assert_fail@plt+0x19450>
   2ab0c:	cmp	r0, #6
   2ab10:	bne	2ab98 <__assert_fail@plt+0x19438>
   2ab14:	ldr	r0, [sp, #4]
   2ab18:	movw	r7, #54256	; 0xd3f0
   2ab1c:	movt	r7, #3
   2ab20:	add	r1, r0, #4
   2ab24:	str	r1, [sp, #4]
   2ab28:	ldr	r6, [r0]
   2ab2c:	ldr	r0, [r7]
   2ab30:	cmp	r0, #0
   2ab34:	blt	2abd4 <__assert_fail@plt+0x19474>
   2ab38:	mov	r0, r5
   2ab3c:	movw	r1, #1030	; 0x406
   2ab40:	mov	r2, r6
   2ab44:	bl	116c4 <fcntl64@plt>
   2ab48:	mov	r4, r0
   2ab4c:	cmn	r0, #1
   2ab50:	bgt	2abc8 <__assert_fail@plt+0x19468>
   2ab54:	bl	11640 <__errno_location@plt>
   2ab58:	ldr	r0, [r0]
   2ab5c:	cmp	r0, #22
   2ab60:	bne	2abc8 <__assert_fail@plt+0x19468>
   2ab64:	mov	r0, r5
   2ab68:	mov	r1, #0
   2ab6c:	mov	r2, r6
   2ab70:	bl	116c4 <fcntl64@plt>
   2ab74:	mov	r4, r0
   2ab78:	cmp	r0, #0
   2ab7c:	blt	2abb4 <__assert_fail@plt+0x19454>
   2ab80:	mvn	r0, #0
   2ab84:	str	r0, [r7]
   2ab88:	mov	r0, #1
   2ab8c:	cmp	r0, #0
   2ab90:	bne	2ac00 <__assert_fail@plt+0x194a0>
   2ab94:	b	2abb4 <__assert_fail@plt+0x19454>
   2ab98:	ldr	r0, [sp, #4]
   2ab9c:	add	r2, r0, #4
   2aba0:	str	r2, [sp, #4]
   2aba4:	ldr	r2, [r0]
   2aba8:	mov	r0, r5
   2abac:	bl	116c4 <fcntl64@plt>
   2abb0:	mov	r4, r0
   2abb4:	mov	r0, r4
   2abb8:	sub	sp, fp, #16
   2abbc:	pop	{r4, r5, r6, r7, fp, lr}
   2abc0:	add	sp, sp, #8
   2abc4:	bx	lr
   2abc8:	mov	r0, #1
   2abcc:	str	r0, [r7]
   2abd0:	b	2abb4 <__assert_fail@plt+0x19454>
   2abd4:	mov	r0, r5
   2abd8:	mov	r1, #0
   2abdc:	mov	r2, r6
   2abe0:	bl	116c4 <fcntl64@plt>
   2abe4:	mov	r4, r0
   2abe8:	ldr	r0, [r7]
   2abec:	add	r0, r0, #1
   2abf0:	clz	r0, r0
   2abf4:	lsr	r0, r0, #5
   2abf8:	cmp	r0, #0
   2abfc:	beq	2abb4 <__assert_fail@plt+0x19454>
   2ac00:	cmp	r4, #0
   2ac04:	blt	2abb4 <__assert_fail@plt+0x19454>
   2ac08:	mov	r0, r4
   2ac0c:	mov	r1, #1
   2ac10:	bl	116c4 <fcntl64@plt>
   2ac14:	cmp	r0, #0
   2ac18:	blt	2ac34 <__assert_fail@plt+0x194d4>
   2ac1c:	orr	r2, r0, #1
   2ac20:	mov	r0, r4
   2ac24:	mov	r1, #2
   2ac28:	bl	116c4 <fcntl64@plt>
   2ac2c:	cmn	r0, #1
   2ac30:	bne	2abb4 <__assert_fail@plt+0x19454>
   2ac34:	bl	11640 <__errno_location@plt>
   2ac38:	ldr	r6, [r0]
   2ac3c:	mov	r5, r0
   2ac40:	mov	r0, r4
   2ac44:	bl	11748 <close@plt>
   2ac48:	str	r6, [r5]
   2ac4c:	mvn	r4, #0
   2ac50:	b	2abb4 <__assert_fail@plt+0x19454>
   2ac54:	push	{fp, lr}
   2ac58:	mov	fp, sp
   2ac5c:	mov	r0, #14
   2ac60:	bl	116f4 <nl_langinfo@plt>
   2ac64:	movw	r1, #46723	; 0xb683
   2ac68:	cmp	r0, #0
   2ac6c:	movt	r1, #2
   2ac70:	movne	r1, r0
   2ac74:	movw	r0, #50212	; 0xc424
   2ac78:	ldrb	r2, [r1]
   2ac7c:	movt	r0, #2
   2ac80:	cmp	r2, #0
   2ac84:	movne	r0, r1
   2ac88:	pop	{fp, pc}
   2ac8c:	push	{r4, r5, r6, r7, fp, lr}
   2ac90:	add	fp, sp, #16
   2ac94:	sub	sp, sp, #8
   2ac98:	add	r5, sp, #4
   2ac9c:	cmp	r0, #0
   2aca0:	mov	r7, r2
   2aca4:	mov	r4, r1
   2aca8:	movne	r5, r0
   2acac:	mov	r0, r5
   2acb0:	bl	1158c <mbrtowc@plt>
   2acb4:	mov	r6, r0
   2acb8:	cmp	r7, #0
   2acbc:	beq	2ace0 <__assert_fail@plt+0x19580>
   2acc0:	cmn	r6, #2
   2acc4:	bcc	2ace0 <__assert_fail@plt+0x19580>
   2acc8:	mov	r0, #0
   2accc:	bl	2ad28 <__assert_fail@plt+0x195c8>
   2acd0:	cmp	r0, #0
   2acd4:	ldrbeq	r0, [r4]
   2acd8:	moveq	r6, #1
   2acdc:	streq	r0, [r5]
   2ace0:	mov	r0, r6
   2ace4:	sub	sp, fp, #16
   2ace8:	pop	{r4, r5, r6, r7, fp, pc}
   2acec:	cmp	r2, #0
   2acf0:	beq	2ad20 <__assert_fail@plt+0x195c0>
   2acf4:	mvn	r3, #0
   2acf8:	udiv	r3, r3, r2
   2acfc:	cmp	r3, r1
   2ad00:	bcs	2ad20 <__assert_fail@plt+0x195c0>
   2ad04:	push	{fp, lr}
   2ad08:	mov	fp, sp
   2ad0c:	bl	11640 <__errno_location@plt>
   2ad10:	mov	r1, #12
   2ad14:	str	r1, [r0]
   2ad18:	mov	r0, #0
   2ad1c:	pop	{fp, pc}
   2ad20:	mul	r1, r2, r1
   2ad24:	b	2a8dc <__assert_fail@plt+0x1917c>
   2ad28:	push	{r4, sl, fp, lr}
   2ad2c:	add	fp, sp, #8
   2ad30:	sub	sp, sp, #264	; 0x108
   2ad34:	add	r1, sp, #7
   2ad38:	movw	r2, #257	; 0x101
   2ad3c:	bl	2ad8c <__assert_fail@plt+0x1962c>
   2ad40:	mov	r4, #0
   2ad44:	cmp	r0, #0
   2ad48:	bne	2ad80 <__assert_fail@plt+0x19620>
   2ad4c:	movw	r1, #50218	; 0xc42a
   2ad50:	add	r0, sp, #7
   2ad54:	movt	r1, #2
   2ad58:	bl	11418 <strcmp@plt>
   2ad5c:	cmp	r0, #0
   2ad60:	beq	2ad80 <__assert_fail@plt+0x19620>
   2ad64:	movw	r1, #50220	; 0xc42c
   2ad68:	add	r0, sp, #7
   2ad6c:	movt	r1, #2
   2ad70:	bl	11418 <strcmp@plt>
   2ad74:	mov	r4, r0
   2ad78:	cmp	r0, #0
   2ad7c:	movwne	r4, #1
   2ad80:	mov	r0, r4
   2ad84:	sub	sp, fp, #8
   2ad88:	pop	{r4, sl, fp, pc}
   2ad8c:	push	{r4, r5, r6, r7, fp, lr}
   2ad90:	add	fp, sp, #16
   2ad94:	mov	r4, r1
   2ad98:	mov	r1, #0
   2ad9c:	mov	r6, r2
   2ada0:	bl	116d0 <setlocale@plt>
   2ada4:	cmp	r0, #0
   2ada8:	beq	2add8 <__assert_fail@plt+0x19678>
   2adac:	mov	r7, r0
   2adb0:	bl	11628 <strlen@plt>
   2adb4:	cmp	r0, r6
   2adb8:	bcs	2adf8 <__assert_fail@plt+0x19698>
   2adbc:	add	r2, r0, #1
   2adc0:	mov	r0, r4
   2adc4:	mov	r1, r7
   2adc8:	bl	11484 <memcpy@plt>
   2adcc:	mov	r5, #0
   2add0:	mov	r0, r5
   2add4:	pop	{r4, r5, r6, r7, fp, pc}
   2add8:	cmp	r6, #0
   2addc:	mov	r5, #22
   2ade0:	movne	r0, #0
   2ade4:	strbne	r0, [r4]
   2ade8:	movne	r0, r5
   2adec:	popne	{r4, r5, r6, r7, fp, pc}
   2adf0:	mov	r0, r5
   2adf4:	pop	{r4, r5, r6, r7, fp, pc}
   2adf8:	mov	r5, #34	; 0x22
   2adfc:	cmp	r6, #0
   2ae00:	beq	2ae20 <__assert_fail@plt+0x196c0>
   2ae04:	sub	r6, r6, #1
   2ae08:	mov	r0, r4
   2ae0c:	mov	r1, r7
   2ae10:	mov	r2, r6
   2ae14:	bl	11484 <memcpy@plt>
   2ae18:	mov	r0, #0
   2ae1c:	strb	r0, [r4, r6]
   2ae20:	mov	r0, r5
   2ae24:	pop	{r4, r5, r6, r7, fp, pc}
   2ae28:	mov	r1, #0
   2ae2c:	b	116d0 <setlocale@plt>
   2ae30:	cmp	r3, #0
   2ae34:	cmpeq	r2, #0
   2ae38:	bne	2ae5c <__assert_fail@plt+0x196fc>
   2ae3c:	cmp	r1, #0
   2ae40:	movlt	r1, #-2147483648	; 0x80000000
   2ae44:	movlt	r0, #0
   2ae48:	blt	2ae58 <__assert_fail@plt+0x196f8>
   2ae4c:	cmpeq	r0, #0
   2ae50:	mvnne	r1, #-2147483648	; 0x80000000
   2ae54:	mvnne	r0, #0
   2ae58:	b	2af40 <__assert_fail@plt+0x197e0>
   2ae5c:	sub	sp, sp, #8
   2ae60:	push	{sp, lr}
   2ae64:	cmp	r1, #0
   2ae68:	blt	2ae88 <__assert_fail@plt+0x19728>
   2ae6c:	cmp	r3, #0
   2ae70:	blt	2aebc <__assert_fail@plt+0x1975c>
   2ae74:	bl	2af50 <__assert_fail@plt+0x197f0>
   2ae78:	ldr	lr, [sp, #4]
   2ae7c:	add	sp, sp, #8
   2ae80:	pop	{r2, r3}
   2ae84:	bx	lr
   2ae88:	rsbs	r0, r0, #0
   2ae8c:	sbc	r1, r1, r1, lsl #1
   2ae90:	cmp	r3, #0
   2ae94:	blt	2aee0 <__assert_fail@plt+0x19780>
   2ae98:	bl	2af50 <__assert_fail@plt+0x197f0>
   2ae9c:	ldr	lr, [sp, #4]
   2aea0:	add	sp, sp, #8
   2aea4:	pop	{r2, r3}
   2aea8:	rsbs	r0, r0, #0
   2aeac:	sbc	r1, r1, r1, lsl #1
   2aeb0:	rsbs	r2, r2, #0
   2aeb4:	sbc	r3, r3, r3, lsl #1
   2aeb8:	bx	lr
   2aebc:	rsbs	r2, r2, #0
   2aec0:	sbc	r3, r3, r3, lsl #1
   2aec4:	bl	2af50 <__assert_fail@plt+0x197f0>
   2aec8:	ldr	lr, [sp, #4]
   2aecc:	add	sp, sp, #8
   2aed0:	pop	{r2, r3}
   2aed4:	rsbs	r0, r0, #0
   2aed8:	sbc	r1, r1, r1, lsl #1
   2aedc:	bx	lr
   2aee0:	rsbs	r2, r2, #0
   2aee4:	sbc	r3, r3, r3, lsl #1
   2aee8:	bl	2af50 <__assert_fail@plt+0x197f0>
   2aeec:	ldr	lr, [sp, #4]
   2aef0:	add	sp, sp, #8
   2aef4:	pop	{r2, r3}
   2aef8:	rsbs	r2, r2, #0
   2aefc:	sbc	r3, r3, r3, lsl #1
   2af00:	bx	lr
   2af04:	cmp	r3, #0
   2af08:	cmpeq	r2, #0
   2af0c:	bne	2af24 <__assert_fail@plt+0x197c4>
   2af10:	cmp	r1, #0
   2af14:	cmpeq	r0, #0
   2af18:	mvnne	r1, #0
   2af1c:	mvnne	r0, #0
   2af20:	b	2af40 <__assert_fail@plt+0x197e0>
   2af24:	sub	sp, sp, #8
   2af28:	push	{sp, lr}
   2af2c:	bl	2af50 <__assert_fail@plt+0x197f0>
   2af30:	ldr	lr, [sp, #4]
   2af34:	add	sp, sp, #8
   2af38:	pop	{r2, r3}
   2af3c:	bx	lr
   2af40:	push	{r1, lr}
   2af44:	mov	r0, #8
   2af48:	bl	113f4 <raise@plt>
   2af4c:	pop	{r1, pc}
   2af50:	cmp	r1, r3
   2af54:	cmpeq	r0, r2
   2af58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af5c:	mov	r4, r0
   2af60:	movcc	r0, #0
   2af64:	mov	r5, r1
   2af68:	ldr	lr, [sp, #36]	; 0x24
   2af6c:	movcc	r1, r0
   2af70:	bcc	2b06c <__assert_fail@plt+0x1990c>
   2af74:	cmp	r3, #0
   2af78:	clzeq	ip, r2
   2af7c:	clzne	ip, r3
   2af80:	addeq	ip, ip, #32
   2af84:	cmp	r5, #0
   2af88:	clzeq	r1, r4
   2af8c:	addeq	r1, r1, #32
   2af90:	clzne	r1, r5
   2af94:	sub	ip, ip, r1
   2af98:	sub	sl, ip, #32
   2af9c:	lsl	r9, r3, ip
   2afa0:	rsb	fp, ip, #32
   2afa4:	orr	r9, r9, r2, lsl sl
   2afa8:	orr	r9, r9, r2, lsr fp
   2afac:	lsl	r8, r2, ip
   2afb0:	cmp	r5, r9
   2afb4:	cmpeq	r4, r8
   2afb8:	movcc	r0, #0
   2afbc:	movcc	r1, r0
   2afc0:	bcc	2afdc <__assert_fail@plt+0x1987c>
   2afc4:	mov	r0, #1
   2afc8:	subs	r4, r4, r8
   2afcc:	lsl	r1, r0, sl
   2afd0:	orr	r1, r1, r0, lsr fp
   2afd4:	lsl	r0, r0, ip
   2afd8:	sbc	r5, r5, r9
   2afdc:	cmp	ip, #0
   2afe0:	beq	2b06c <__assert_fail@plt+0x1990c>
   2afe4:	lsr	r6, r8, #1
   2afe8:	orr	r6, r6, r9, lsl #31
   2afec:	lsr	r7, r9, #1
   2aff0:	mov	r2, ip
   2aff4:	b	2b018 <__assert_fail@plt+0x198b8>
   2aff8:	subs	r3, r4, r6
   2affc:	sbc	r8, r5, r7
   2b000:	adds	r3, r3, r3
   2b004:	adc	r8, r8, r8
   2b008:	adds	r4, r3, #1
   2b00c:	adc	r5, r8, #0
   2b010:	subs	r2, r2, #1
   2b014:	beq	2b034 <__assert_fail@plt+0x198d4>
   2b018:	cmp	r5, r7
   2b01c:	cmpeq	r4, r6
   2b020:	bcs	2aff8 <__assert_fail@plt+0x19898>
   2b024:	adds	r4, r4, r4
   2b028:	adc	r5, r5, r5
   2b02c:	subs	r2, r2, #1
   2b030:	bne	2b018 <__assert_fail@plt+0x198b8>
   2b034:	lsr	r3, r4, ip
   2b038:	orr	r3, r3, r5, lsl fp
   2b03c:	lsr	r2, r5, ip
   2b040:	orr	r3, r3, r5, lsr sl
   2b044:	adds	r0, r0, r4
   2b048:	mov	r4, r3
   2b04c:	lsl	r3, r2, ip
   2b050:	orr	r3, r3, r4, lsl sl
   2b054:	lsl	ip, r4, ip
   2b058:	orr	r3, r3, r4, lsr fp
   2b05c:	adc	r1, r1, r5
   2b060:	subs	r0, r0, ip
   2b064:	mov	r5, r2
   2b068:	sbc	r1, r1, r3
   2b06c:	cmp	lr, #0
   2b070:	strdne	r4, [lr]
   2b074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b078:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b07c:	mov	r7, r0
   2b080:	ldr	r6, [pc, #72]	; 2b0d0 <__assert_fail@plt+0x19970>
   2b084:	ldr	r5, [pc, #72]	; 2b0d4 <__assert_fail@plt+0x19974>
   2b088:	add	r6, pc, r6
   2b08c:	add	r5, pc, r5
   2b090:	sub	r6, r6, r5
   2b094:	mov	r8, r1
   2b098:	mov	r9, r2
   2b09c:	bl	11398 <pthread_mutex_unlock@plt-0x20>
   2b0a0:	asrs	r6, r6, #2
   2b0a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b0a8:	mov	r4, #0
   2b0ac:	add	r4, r4, #1
   2b0b0:	ldr	r3, [r5], #4
   2b0b4:	mov	r2, r9
   2b0b8:	mov	r1, r8
   2b0bc:	mov	r0, r7
   2b0c0:	blx	r3
   2b0c4:	cmp	r6, r4
   2b0c8:	bne	2b0ac <__assert_fail@plt+0x1994c>
   2b0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b0d0:	andeq	r1, r1, ip, ror lr
   2b0d4:	andeq	r1, r1, r4, ror lr
   2b0d8:	bx	lr
   2b0dc:	ldr	r3, [pc, #12]	; 2b0f0 <__assert_fail@plt+0x19990>
   2b0e0:	mov	r1, #0
   2b0e4:	add	r3, pc, r3
   2b0e8:	ldr	r2, [r3]
   2b0ec:	b	11664 <__cxa_atexit@plt>
   2b0f0:	andeq	r2, r1, r8, rrx

Disassembly of section .fini:

0002b0f4 <.fini>:
   2b0f4:	push	{r3, lr}
   2b0f8:	pop	{r3, pc}
