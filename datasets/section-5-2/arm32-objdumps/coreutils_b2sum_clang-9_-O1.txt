
../repos/coreutils/src/b2sum:     file format elf32-littlearm


Disassembly of section .init:

00011088 <.init>:
   11088:	push	{r3, lr}
   1108c:	bl	113c0 <__assert_fail@plt+0x48>
   11090:	pop	{r3, pc}

Disassembly of section .plt:

00011094 <fdopen@plt-0x14>:
   11094:	push	{lr}		; (str lr, [sp, #-4]!)
   11098:	ldr	lr, [pc, #4]	; 110a4 <fdopen@plt-0x4>
   1109c:	add	lr, pc, lr
   110a0:	ldr	pc, [lr, #8]!
   110a4:	andeq	ip, r1, ip, asr pc

000110a8 <fdopen@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #28, 20	; 0x1c000
   110b0:	ldr	pc, [ip, #3932]!	; 0xf5c

000110b4 <calloc@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #28, 20	; 0x1c000
   110bc:	ldr	pc, [ip, #3924]!	; 0xf54

000110c0 <fputs_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #28, 20	; 0x1c000
   110c8:	ldr	pc, [ip, #3916]!	; 0xf4c

000110cc <raise@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #28, 20	; 0x1c000
   110d4:	ldr	pc, [ip, #3908]!	; 0xf44

000110d8 <strcmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #28, 20	; 0x1c000
   110e0:	ldr	pc, [ip, #3900]!	; 0xf3c

000110e4 <posix_fadvise64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #28, 20	; 0x1c000
   110ec:	ldr	pc, [ip, #3892]!	; 0xf34

000110f0 <fflush@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #28, 20	; 0x1c000
   110f8:	ldr	pc, [ip, #3884]!	; 0xf2c

000110fc <free@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #28, 20	; 0x1c000
   11104:	ldr	pc, [ip, #3876]!	; 0xf24

00011108 <ferror@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #28, 20	; 0x1c000
   11110:	ldr	pc, [ip, #3868]!	; 0xf1c

00011114 <_exit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #28, 20	; 0x1c000
   1111c:	ldr	pc, [ip, #3860]!	; 0xf14

00011120 <memcpy@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #28, 20	; 0x1c000
   11128:	ldr	pc, [ip, #3852]!	; 0xf0c

0001112c <mbsinit@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #28, 20	; 0x1c000
   11134:	ldr	pc, [ip, #3844]!	; 0xf04

00011138 <dcgettext@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #28, 20	; 0x1c000
   11140:	ldr	pc, [ip, #3836]!	; 0xefc

00011144 <realloc@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #28, 20	; 0x1c000
   1114c:	ldr	pc, [ip, #3828]!	; 0xef4

00011150 <textdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #28, 20	; 0x1c000
   11158:	ldr	pc, [ip, #3820]!	; 0xeec

0001115c <iswprint@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #28, 20	; 0x1c000
   11164:	ldr	pc, [ip, #3812]!	; 0xee4

00011168 <fwrite@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #28, 20	; 0x1c000
   11170:	ldr	pc, [ip, #3804]!	; 0xedc

00011174 <lseek64@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #28, 20	; 0x1c000
   1117c:	ldr	pc, [ip, #3796]!	; 0xed4

00011180 <__ctype_get_mb_cur_max@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #28, 20	; 0x1c000
   11188:	ldr	pc, [ip, #3788]!	; 0xecc

0001118c <fread@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #28, 20	; 0x1c000
   11194:	ldr	pc, [ip, #3780]!	; 0xec4

00011198 <__fpending@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #28, 20	; 0x1c000
   111a0:	ldr	pc, [ip, #3772]!	; 0xebc

000111a4 <ferror_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #28, 20	; 0x1c000
   111ac:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b0 <mbrtowc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #28, 20	; 0x1c000
   111b8:	ldr	pc, [ip, #3756]!	; 0xeac

000111bc <error@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #28, 20	; 0x1c000
   111c4:	ldr	pc, [ip, #3748]!	; 0xea4

000111c8 <malloc@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #28, 20	; 0x1c000
   111d0:	ldr	pc, [ip, #3740]!	; 0xe9c

000111d4 <__libc_start_main@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #28, 20	; 0x1c000
   111dc:	ldr	pc, [ip, #3732]!	; 0xe94

000111e0 <__freading@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #28, 20	; 0x1c000
   111e8:	ldr	pc, [ip, #3724]!	; 0xe8c

000111ec <__ctype_tolower_loc@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #28, 20	; 0x1c000
   111f4:	ldr	pc, [ip, #3716]!	; 0xe84

000111f8 <__gmon_start__@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #28, 20	; 0x1c000
   11200:	ldr	pc, [ip, #3708]!	; 0xe7c

00011204 <getopt_long@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #28, 20	; 0x1c000
   1120c:	ldr	pc, [ip, #3700]!	; 0xe74

00011210 <__ctype_b_loc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #28, 20	; 0x1c000
   11218:	ldr	pc, [ip, #3692]!	; 0xe6c

0001121c <exit@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #28, 20	; 0x1c000
   11224:	ldr	pc, [ip, #3684]!	; 0xe64

00011228 <feof@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #28, 20	; 0x1c000
   11230:	ldr	pc, [ip, #3676]!	; 0xe5c

00011234 <bcmp@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #28, 20	; 0x1c000
   1123c:	ldr	pc, [ip, #3668]!	; 0xe54

00011240 <strlen@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #28, 20	; 0x1c000
   11248:	ldr	pc, [ip, #3660]!	; 0xe4c

0001124c <strchr@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #28, 20	; 0x1c000
   11254:	ldr	pc, [ip, #3652]!	; 0xe44

00011258 <__errno_location@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #28, 20	; 0x1c000
   11260:	ldr	pc, [ip, #3644]!	; 0xe3c

00011264 <__cxa_atexit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #28, 20	; 0x1c000
   1126c:	ldr	pc, [ip, #3636]!	; 0xe34

00011270 <setvbuf@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #28, 20	; 0x1c000
   11278:	ldr	pc, [ip, #3628]!	; 0xe2c

0001127c <memset@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #28, 20	; 0x1c000
   11284:	ldr	pc, [ip, #3620]!	; 0xe24

00011288 <__printf_chk@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #28, 20	; 0x1c000
   11290:	ldr	pc, [ip, #3612]!	; 0xe1c

00011294 <fileno@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #28, 20	; 0x1c000
   1129c:	ldr	pc, [ip, #3604]!	; 0xe14

000112a0 <strtoumax@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #28, 20	; 0x1c000
   112a8:	ldr	pc, [ip, #3596]!	; 0xe0c

000112ac <__fprintf_chk@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #28, 20	; 0x1c000
   112b4:	ldr	pc, [ip, #3588]!	; 0xe04

000112b8 <fclose@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #28, 20	; 0x1c000
   112c0:	ldr	pc, [ip, #3580]!	; 0xdfc

000112c4 <fseeko64@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #28, 20	; 0x1c000
   112cc:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d0 <fcntl64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #28, 20	; 0x1c000
   112d8:	ldr	pc, [ip, #3564]!	; 0xdec

000112dc <setlocale@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #28, 20	; 0x1c000
   112e4:	ldr	pc, [ip, #3556]!	; 0xde4

000112e8 <strrchr@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #28, 20	; 0x1c000
   112f0:	ldr	pc, [ip, #3548]!	; 0xddc

000112f4 <nl_langinfo@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #28, 20	; 0x1c000
   112fc:	ldr	pc, [ip, #3540]!	; 0xdd4

00011300 <clearerr_unlocked@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #28, 20	; 0x1c000
   11308:	ldr	pc, [ip, #3532]!	; 0xdcc

0001130c <fopen64@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #28, 20	; 0x1c000
   11314:	ldr	pc, [ip, #3524]!	; 0xdc4

00011318 <bindtextdomain@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #28, 20	; 0x1c000
   11320:	ldr	pc, [ip, #3516]!	; 0xdbc

00011324 <getline@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #28, 20	; 0x1c000
   1132c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011330 <strncmp@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #28, 20	; 0x1c000
   11338:	ldr	pc, [ip, #3500]!	; 0xdac

0001133c <abort@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #28, 20	; 0x1c000
   11344:	ldr	pc, [ip, #3492]!	; 0xda4

00011348 <feof_unlocked@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #28, 20	; 0x1c000
   11350:	ldr	pc, [ip, #3484]!	; 0xd9c

00011354 <close@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #28, 20	; 0x1c000
   1135c:	ldr	pc, [ip, #3476]!	; 0xd94

00011360 <dcngettext@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #28, 20	; 0x1c000
   11368:	ldr	pc, [ip, #3468]!	; 0xd8c

0001136c <putchar_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #28, 20	; 0x1c000
   11374:	ldr	pc, [ip, #3460]!	; 0xd84

00011378 <__assert_fail@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #28, 20	; 0x1c000
   11380:	ldr	pc, [ip, #3452]!	; 0xd7c

Disassembly of section .text:

00011384 <.text>:
   11384:	mov	fp, #0
   11388:	mov	lr, #0
   1138c:	pop	{r1}		; (ldr r1, [sp], #4)
   11390:	mov	r2, sp
   11394:	push	{r2}		; (str r2, [sp, #-4]!)
   11398:	push	{r0}		; (str r0, [sp, #-4]!)
   1139c:	ldr	ip, [pc, #16]	; 113b4 <__assert_fail@plt+0x3c>
   113a0:	push	{ip}		; (str ip, [sp, #-4]!)
   113a4:	ldr	r0, [pc, #12]	; 113b8 <__assert_fail@plt+0x40>
   113a8:	ldr	r3, [pc, #12]	; 113bc <__assert_fail@plt+0x44>
   113ac:	bl	111d4 <__libc_start_main@plt>
   113b0:	bl	1133c <abort@plt>
   113b4:	andeq	ip, r1, r0, lsr #16
   113b8:	andeq	r1, r1, r8, ror #16
   113bc:	andeq	ip, r1, r0, asr #15
   113c0:	ldr	r3, [pc, #20]	; 113dc <__assert_fail@plt+0x64>
   113c4:	ldr	r2, [pc, #20]	; 113e0 <__assert_fail@plt+0x68>
   113c8:	add	r3, pc, r3
   113cc:	ldr	r2, [r3, r2]
   113d0:	cmp	r2, #0
   113d4:	bxeq	lr
   113d8:	b	111f8 <__gmon_start__@plt>
   113dc:	andeq	ip, r1, r0, lsr ip
   113e0:	andeq	r0, r0, r0, lsl #2
   113e4:	ldr	r0, [pc, #24]	; 11404 <__assert_fail@plt+0x8c>
   113e8:	ldr	r3, [pc, #24]	; 11408 <__assert_fail@plt+0x90>
   113ec:	cmp	r3, r0
   113f0:	bxeq	lr
   113f4:	ldr	r3, [pc, #16]	; 1140c <__assert_fail@plt+0x94>
   113f8:	cmp	r3, #0
   113fc:	bxeq	lr
   11400:	bx	r3
   11404:	andeq	lr, r2, r0, ror #2
   11408:	andeq	lr, r2, r0, ror #2
   1140c:	andeq	r0, r0, r0
   11410:	ldr	r0, [pc, #36]	; 1143c <__assert_fail@plt+0xc4>
   11414:	ldr	r1, [pc, #36]	; 11440 <__assert_fail@plt+0xc8>
   11418:	sub	r1, r1, r0
   1141c:	asr	r1, r1, #2
   11420:	add	r1, r1, r1, lsr #31
   11424:	asrs	r1, r1, #1
   11428:	bxeq	lr
   1142c:	ldr	r3, [pc, #16]	; 11444 <__assert_fail@plt+0xcc>
   11430:	cmp	r3, #0
   11434:	bxeq	lr
   11438:	bx	r3
   1143c:	andeq	lr, r2, r0, ror #2
   11440:	andeq	lr, r2, r0, ror #2
   11444:	andeq	r0, r0, r0
   11448:	push	{r4, lr}
   1144c:	ldr	r4, [pc, #24]	; 1146c <__assert_fail@plt+0xf4>
   11450:	ldrb	r3, [r4]
   11454:	cmp	r3, #0
   11458:	popne	{r4, pc}
   1145c:	bl	113e4 <__assert_fail@plt+0x6c>
   11460:	mov	r3, #1
   11464:	strb	r3, [r4]
   11468:	pop	{r4, pc}
   1146c:	andeq	lr, r2, r4, lsl #3
   11470:	b	11410 <__assert_fail@plt+0x98>
   11474:	push	{fp, lr}
   11478:	mov	fp, sp
   1147c:	mov	r4, r0
   11480:	cmp	r0, #0
   11484:	bne	1163c <__assert_fail@plt+0x2c4>
   11488:	movw	r1, #51315	; 0xc873
   1148c:	movt	r1, #1
   11490:	mov	r0, #0
   11494:	mov	r2, #5
   11498:	bl	11138 <dcgettext@plt>
   1149c:	mov	r1, r0
   114a0:	movw	r0, #57772	; 0xe1ac
   114a4:	movt	r0, #2
   114a8:	ldr	r2, [r0]
   114ac:	mov	r0, #1
   114b0:	bl	11288 <__printf_chk@plt>
   114b4:	movw	r1, #51348	; 0xc894
   114b8:	movt	r1, #1
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	bl	11138 <dcgettext@plt>
   114c8:	mov	r1, r0
   114cc:	movw	r2, #51387	; 0xc8bb
   114d0:	movt	r2, #1
   114d4:	mov	r0, #1
   114d8:	mov	r3, #512	; 0x200
   114dc:	bl	11288 <__printf_chk@plt>
   114e0:	bl	11680 <__assert_fail@plt+0x308>
   114e4:	bl	116b0 <__assert_fail@plt+0x338>
   114e8:	movw	r1, #51395	; 0xc8c3
   114ec:	movt	r1, #1
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	bl	11138 <dcgettext@plt>
   114fc:	movw	r5, #57724	; 0xe17c
   11500:	movt	r5, #2
   11504:	ldr	r1, [r5]
   11508:	bl	110c0 <fputs_unlocked@plt>
   1150c:	movw	r1, #51440	; 0xc8f0
   11510:	movt	r1, #1
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	bl	11138 <dcgettext@plt>
   11520:	ldr	r1, [r5]
   11524:	bl	110c0 <fputs_unlocked@plt>
   11528:	movw	r1, #51510	; 0xc936
   1152c:	movt	r1, #1
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	bl	11138 <dcgettext@plt>
   1153c:	ldr	r1, [r5]
   11540:	bl	110c0 <fputs_unlocked@plt>
   11544:	movw	r1, #51661	; 0xc9cd
   11548:	movt	r1, #1
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	bl	11138 <dcgettext@plt>
   11558:	ldr	r1, [r5]
   1155c:	bl	110c0 <fputs_unlocked@plt>
   11560:	movw	r1, #51714	; 0xca02
   11564:	movt	r1, #1
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	bl	11138 <dcgettext@plt>
   11574:	ldr	r1, [r5]
   11578:	bl	110c0 <fputs_unlocked@plt>
   1157c:	movw	r1, #51767	; 0xca37
   11580:	movt	r1, #1
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	bl	11138 <dcgettext@plt>
   11590:	ldr	r1, [r5]
   11594:	bl	110c0 <fputs_unlocked@plt>
   11598:	movw	r1, #51893	; 0xcab5
   1159c:	movt	r1, #1
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	bl	11138 <dcgettext@plt>
   115ac:	ldr	r1, [r5]
   115b0:	bl	110c0 <fputs_unlocked@plt>
   115b4:	movw	r1, #52332	; 0xcc6c
   115b8:	movt	r1, #1
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	bl	11138 <dcgettext@plt>
   115c8:	ldr	r1, [r5]
   115cc:	bl	110c0 <fputs_unlocked@plt>
   115d0:	movw	r1, #52377	; 0xcc99
   115d4:	movt	r1, #1
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	bl	11138 <dcgettext@plt>
   115e4:	ldr	r1, [r5]
   115e8:	bl	110c0 <fputs_unlocked@plt>
   115ec:	movw	r1, #52431	; 0xcccf
   115f0:	movt	r1, #1
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	bl	11138 <dcgettext@plt>
   11600:	mov	r1, r0
   11604:	movw	r2, #52475	; 0xccfb
   11608:	movt	r2, #1
   1160c:	mov	r0, #1
   11610:	bl	11288 <__printf_chk@plt>
   11614:	movw	r1, #52484	; 0xcd04
   11618:	movt	r1, #1
   1161c:	mov	r0, #0
   11620:	mov	r2, #5
   11624:	bl	11138 <dcgettext@plt>
   11628:	ldr	r1, [r5]
   1162c:	bl	110c0 <fputs_unlocked@plt>
   11630:	bl	116e0 <__assert_fail@plt+0x368>
   11634:	mov	r0, r4
   11638:	bl	1121c <exit@plt>
   1163c:	movw	r0, #57712	; 0xe170
   11640:	movt	r0, #2
   11644:	ldr	r5, [r0]
   11648:	movw	r1, #51276	; 0xc84c
   1164c:	movt	r1, #1
   11650:	mov	r0, #0
   11654:	mov	r2, #5
   11658:	bl	11138 <dcgettext@plt>
   1165c:	mov	r2, r0
   11660:	movw	r0, #57772	; 0xe1ac
   11664:	movt	r0, #2
   11668:	ldr	r3, [r0]
   1166c:	mov	r0, r5
   11670:	mov	r1, #1
   11674:	bl	112ac <__fprintf_chk@plt>
   11678:	mov	r0, r4
   1167c:	bl	1121c <exit@plt>
   11680:	push	{fp, lr}
   11684:	mov	fp, sp
   11688:	movw	r1, #53565	; 0xd13d
   1168c:	movt	r1, #1
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	bl	11138 <dcgettext@plt>
   1169c:	movw	r1, #57724	; 0xe17c
   116a0:	movt	r1, #2
   116a4:	ldr	r1, [r1]
   116a8:	pop	{fp, lr}
   116ac:	b	110c0 <fputs_unlocked@plt>
   116b0:	push	{fp, lr}
   116b4:	mov	fp, sp
   116b8:	movw	r1, #53621	; 0xd175
   116bc:	movt	r1, #1
   116c0:	mov	r0, #0
   116c4:	mov	r2, #5
   116c8:	bl	11138 <dcgettext@plt>
   116cc:	movw	r1, #57724	; 0xe17c
   116d0:	movt	r1, #2
   116d4:	ldr	r1, [r1]
   116d8:	pop	{fp, lr}
   116dc:	b	110c0 <fputs_unlocked@plt>
   116e0:	push	{r4, r5, r6, sl, fp, lr}
   116e4:	add	fp, sp, #16
   116e8:	sub	sp, sp, #56	; 0x38
   116ec:	movw	r0, #54808	; 0xd618
   116f0:	movt	r0, #1
   116f4:	add	r1, r0, #32
   116f8:	mov	r2, #48	; 0x30
   116fc:	vld1.64	{d16-d17}, [r1]
   11700:	mov	r6, sp
   11704:	add	r1, r6, #32
   11708:	add	r3, r0, #16
   1170c:	vld1.64	{d18-d19}, [r0], r2
   11710:	vld1.64	{d20-d21}, [r3]
   11714:	vldr	d22, [r0]
   11718:	vst1.64	{d16-d17}, [r1]
   1171c:	add	r0, r6, #16
   11720:	vst1.64	{d20-d21}, [r0]
   11724:	mov	r0, r6
   11728:	vst1.64	{d18-d19}, [r0], r2
   1172c:	vstr	d22, [r0]
   11730:	ldr	r1, [sp]
   11734:	cmp	r1, #0
   11738:	movw	r4, #52817	; 0xce51
   1173c:	movt	r4, #1
   11740:	beq	11768 <__assert_fail@plt+0x3f0>
   11744:	mov	r6, sp
   11748:	movw	r5, #52817	; 0xce51
   1174c:	movt	r5, #1
   11750:	mov	r0, r5
   11754:	bl	110d8 <strcmp@plt>
   11758:	cmp	r0, #0
   1175c:	ldrne	r1, [r6, #8]!
   11760:	cmpne	r1, #0
   11764:	bne	11750 <__assert_fail@plt+0x3d8>
   11768:	ldr	r5, [r6, #4]
   1176c:	movw	r1, #53791	; 0xd21f
   11770:	movt	r1, #1
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	bl	11138 <dcgettext@plt>
   11780:	mov	r1, r0
   11784:	movw	r2, #52919	; 0xceb7
   11788:	movt	r2, #1
   1178c:	movw	r3, #53814	; 0xd236
   11790:	movt	r3, #1
   11794:	mov	r0, #1
   11798:	bl	11288 <__printf_chk@plt>
   1179c:	cmp	r5, #0
   117a0:	moveq	r5, r4
   117a4:	mov	r0, #5
   117a8:	mov	r1, #0
   117ac:	bl	112dc <setlocale@plt>
   117b0:	cmp	r0, #0
   117b4:	beq	117f4 <__assert_fail@plt+0x47c>
   117b8:	movw	r1, #53854	; 0xd25e
   117bc:	movt	r1, #1
   117c0:	mov	r2, #3
   117c4:	bl	11330 <strncmp@plt>
   117c8:	cmp	r0, #0
   117cc:	beq	117f4 <__assert_fail@plt+0x47c>
   117d0:	movw	r1, #53858	; 0xd262
   117d4:	movt	r1, #1
   117d8:	mov	r0, #0
   117dc:	mov	r2, #5
   117e0:	bl	11138 <dcgettext@plt>
   117e4:	movw	r1, #57724	; 0xe17c
   117e8:	movt	r1, #2
   117ec:	ldr	r1, [r1]
   117f0:	bl	110c0 <fputs_unlocked@plt>
   117f4:	movw	r1, #53929	; 0xd2a9
   117f8:	movt	r1, #1
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	bl	11138 <dcgettext@plt>
   11808:	mov	r1, r0
   1180c:	movw	r2, #53814	; 0xd236
   11810:	movt	r2, #1
   11814:	mov	r0, #1
   11818:	mov	r3, r4
   1181c:	bl	11288 <__printf_chk@plt>
   11820:	movw	r0, #53724	; 0xd1dc
   11824:	movt	r0, #1
   11828:	movw	r6, #52331	; 0xcc6b
   1182c:	movt	r6, #1
   11830:	cmp	r5, r4
   11834:	moveq	r6, r0
   11838:	movw	r1, #53956	; 0xd2c4
   1183c:	movt	r1, #1
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	bl	11138 <dcgettext@plt>
   1184c:	mov	r1, r0
   11850:	mov	r0, #1
   11854:	mov	r2, r5
   11858:	mov	r3, r6
   1185c:	sub	sp, fp, #16
   11860:	pop	{r4, r5, r6, sl, fp, lr}
   11864:	b	11288 <__printf_chk@plt>
   11868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1186c:	add	fp, sp, #28
   11870:	sub	sp, sp, #116	; 0x74
   11874:	mov	r5, r1
   11878:	mov	r8, r0
   1187c:	add	r0, sp, #44	; 0x2c
   11880:	bl	11fa0 <__assert_fail@plt+0xc28>
   11884:	str	r0, [sp, #36]	; 0x24
   11888:	ldr	r0, [r5]
   1188c:	bl	192d0 <__assert_fail@plt+0x7f58>
   11890:	movw	r6, #52331	; 0xcc6b
   11894:	movt	r6, #1
   11898:	mov	r0, #6
   1189c:	mov	r1, r6
   118a0:	bl	112dc <setlocale@plt>
   118a4:	movw	r4, #52923	; 0xcebb
   118a8:	movt	r4, #1
   118ac:	movw	r1, #52823	; 0xce57
   118b0:	movt	r1, #1
   118b4:	mov	r0, r4
   118b8:	bl	11318 <bindtextdomain@plt>
   118bc:	mov	r0, r4
   118c0:	bl	11150 <textdomain@plt>
   118c4:	movw	r0, #36640	; 0x8f20
   118c8:	movt	r0, #1
   118cc:	bl	1c824 <__assert_fail@plt+0xb4ac>
   118d0:	movw	r0, #57724	; 0xe17c
   118d4:	movt	r0, #2
   118d8:	ldr	r0, [r0]
   118dc:	mov	r1, #0
   118e0:	mov	r2, #1
   118e4:	mov	r3, #0
   118e8:	bl	11270 <setvbuf@plt>
   118ec:	movw	r2, #52847	; 0xce6f
   118f0:	movt	r2, #1
   118f4:	movw	r4, #54584	; 0xd538
   118f8:	movt	r4, #1
   118fc:	mvn	r0, #0
   11900:	str	r0, [sp, #32]
   11904:	mov	r0, #0
   11908:	str	r0, [sp, #28]
   1190c:	mov	r0, #0
   11910:	str	r6, [sp, #24]
   11914:	mov	r7, #0
   11918:	mov	sl, r0
   1191c:	str	r7, [sp]
   11920:	mov	r0, r8
   11924:	mov	r1, r5
   11928:	mov	r9, r2
   1192c:	mov	r3, r4
   11930:	bl	11204 <getopt_long@plt>
   11934:	cmp	r0, #97	; 0x61
   11938:	ble	11b6c <__assert_fail@plt+0x7f4>
   1193c:	mov	r6, r4
   11940:	sub	r1, r0, #98	; 0x62
   11944:	cmp	r1, #24
   11948:	bhi	119cc <__assert_fail@plt+0x654>
   1194c:	add	r3, pc, #12
   11950:	mov	r0, #1
   11954:	mov	r2, r9
   11958:	mov	r4, r6
   1195c:	ldr	pc, [r3, r1, lsl #2]
   11960:	andeq	r1, r1, r4, asr #19
   11964:	andeq	r1, r1, r8, lsl r9
   11968:	andeq	r1, r1, ip, ror #28
   1196c:	andeq	r1, r1, ip, ror #28
   11970:	andeq	r1, r1, ip, ror #28
   11974:	andeq	r1, r1, ip, ror #28
   11978:	andeq	r1, r1, ip, ror #28
   1197c:	andeq	r1, r1, ip, ror #28
   11980:	andeq	r1, r1, ip, ror #28
   11984:	andeq	r1, r1, ip, ror #28
   11988:	andeq	r1, r1, r0, asr sl
   1198c:	andeq	r1, r1, ip, ror #28
   11990:	andeq	r1, r1, ip, ror #28
   11994:	andeq	r1, r1, ip, ror #28
   11998:	andeq	r1, r1, ip, ror #28
   1199c:	andeq	r1, r1, ip, ror #28
   119a0:	andeq	r1, r1, ip, ror #28
   119a4:	andeq	r1, r1, ip, ror #28
   119a8:	andeq	r1, r1, r0, lsl #22
   119ac:	andeq	r1, r1, ip, ror #28
   119b0:	andeq	r1, r1, ip, ror #28
   119b4:	andeq	r1, r1, r8, lsl #20
   119b8:	andeq	r1, r1, ip, ror #28
   119bc:	andeq	r1, r1, ip, ror #28
   119c0:	andeq	r1, r1, r4, asr fp
   119c4:	mov	r0, #1
   119c8:	b	11b04 <__assert_fail@plt+0x78c>
   119cc:	sub	r0, r0, #256	; 0x100
   119d0:	cmp	r0, #4
   119d4:	bhi	11e6c <__assert_fail@plt+0xaf4>
   119d8:	mov	r2, r9
   119dc:	mov	r4, r6
   119e0:	add	r1, pc, #0
   119e4:	ldr	pc, [r1, r0, lsl #2]
   119e8:	strdeq	r1, [r1], -ip
   119ec:	andeq	r1, r1, r0, lsl fp
   119f0:	ldrdeq	r1, [r1], -r4
   119f4:	andeq	r1, r1, r8, asr #22
   119f8:	andeq	r1, r1, r8, lsr sl
   119fc:	movw	r0, #57747	; 0xe193
   11a00:	movt	r0, #2
   11a04:	b	11b5c <__assert_fail@plt+0x7e4>
   11a08:	movw	r0, #57745	; 0xe191
   11a0c:	movt	r0, #2
   11a10:	mov	r1, #1
   11a14:	strb	r1, [r0]
   11a18:	movw	r0, #57744	; 0xe190
   11a1c:	movt	r0, #2
   11a20:	mov	r1, #0
   11a24:	strb	r1, [r0]
   11a28:	movw	r0, #57746	; 0xe192
   11a2c:	movt	r0, #2
   11a30:	mov	r7, #0
   11a34:	b	11b60 <__assert_fail@plt+0x7e8>
   11a38:	mov	r0, #1
   11a3c:	str	r0, [sp, #32]
   11a40:	mov	r0, #1
   11a44:	str	r0, [sp, #28]
   11a48:	mov	r0, sl
   11a4c:	b	11918 <__assert_fail@plt+0x5a0>
   11a50:	movw	r0, #57728	; 0xe180
   11a54:	movt	r0, #2
   11a58:	ldr	r4, [r0]
   11a5c:	mov	r0, #0
   11a60:	movw	r1, #52855	; 0xce77
   11a64:	movt	r1, #1
   11a68:	mov	r2, #5
   11a6c:	bl	11138 <dcgettext@plt>
   11a70:	mvn	r1, #0
   11a74:	str	r1, [sp]
   11a78:	str	r1, [sp, #4]
   11a7c:	movw	r1, #52331	; 0xcc6b
   11a80:	movt	r1, #1
   11a84:	str	r1, [sp, #8]
   11a88:	str	r0, [sp, #12]
   11a8c:	str	r7, [sp, #16]
   11a90:	mov	r0, r4
   11a94:	mov	r2, #0
   11a98:	mov	r3, #0
   11a9c:	bl	1b86c <__assert_fail@plt+0xa4f4>
   11aa0:	mov	r4, r6
   11aa4:	mov	r2, r9
   11aa8:	movw	r3, #57736	; 0xe188
   11aac:	movt	r3, #2
   11ab0:	strd	r0, [r3]
   11ab4:	movw	r1, #57728	; 0xe180
   11ab8:	movt	r1, #2
   11abc:	ldr	r1, [r1]
   11ac0:	str	r1, [sp, #24]
   11ac4:	tst	r0, #7
   11ac8:	mov	r0, sl
   11acc:	beq	11918 <__assert_fail@plt+0x5a0>
   11ad0:	b	11e14 <__assert_fail@plt+0xa9c>
   11ad4:	movw	r0, #57745	; 0xe191
   11ad8:	movt	r0, #2
   11adc:	mov	r1, #0
   11ae0:	strb	r1, [r0]
   11ae4:	movw	r0, #57744	; 0xe190
   11ae8:	movt	r0, #2
   11aec:	mov	r7, #0
   11af0:	strb	r1, [r0]
   11af4:	movw	r0, #57746	; 0xe192
   11af8:	movt	r0, #2
   11afc:	b	11b5c <__assert_fail@plt+0x7e4>
   11b00:	mov	r0, #0
   11b04:	str	r0, [sp, #32]
   11b08:	mov	r0, sl
   11b0c:	b	11918 <__assert_fail@plt+0x5a0>
   11b10:	movw	r0, #57745	; 0xe191
   11b14:	movt	r0, #2
   11b18:	mov	r3, #0
   11b1c:	strb	r3, [r0]
   11b20:	movw	r0, #57744	; 0xe190
   11b24:	movt	r0, #2
   11b28:	mov	r1, #1
   11b2c:	strb	r1, [r0]
   11b30:	movw	r0, #57746	; 0xe192
   11b34:	movt	r0, #2
   11b38:	mov	r7, #0
   11b3c:	strb	r3, [r0]
   11b40:	mov	r0, sl
   11b44:	b	11918 <__assert_fail@plt+0x5a0>
   11b48:	movw	r0, #57748	; 0xe194
   11b4c:	movt	r0, #2
   11b50:	b	11b5c <__assert_fail@plt+0x7e4>
   11b54:	movw	r0, #57749	; 0xe195
   11b58:	movt	r0, #2
   11b5c:	mov	r1, #1
   11b60:	strb	r1, [r0]
   11b64:	mov	r0, sl
   11b68:	b	11918 <__assert_fail@plt+0x5a0>
   11b6c:	cmn	r0, #1
   11b70:	bne	11da8 <__assert_fail@plt+0xa30>
   11b74:	movw	r0, #57752	; 0xe198
   11b78:	movt	r0, #2
   11b7c:	mov	r1, #1
   11b80:	strb	r1, [r0]
   11b84:	movw	r3, #57736	; 0xe188
   11b88:	movt	r3, #2
   11b8c:	ldrd	r0, [r3]
   11b90:	movw	r2, #513	; 0x201
   11b94:	subs	r2, r0, r2
   11b98:	sbcs	r2, r1, #0
   11b9c:	ldr	r7, [sp, #32]
   11ba0:	bcs	11e74 <__assert_fail@plt+0xafc>
   11ba4:	orrs	r0, r0, r1
   11ba8:	moveq	r1, #0
   11bac:	moveq	r0, #512	; 0x200
   11bb0:	strdeq	r0, [r3]
   11bb4:	ldrd	r0, [r3]
   11bb8:	lsr	r0, r0, #2
   11bbc:	orr	r0, r0, r1, lsl #30
   11bc0:	movw	r1, #57756	; 0xe19c
   11bc4:	movt	r1, #2
   11bc8:	str	r0, [r1]
   11bcc:	ldr	r3, [sp, #28]
   11bd0:	eor	r1, r3, #1
   11bd4:	cmp	r7, #0
   11bd8:	tsteq	r1, #1
   11bdc:	beq	11ee8 <__assert_fail@plt+0xb70>
   11be0:	eor	r0, sl, #1
   11be4:	tst	r0, #1
   11be8:	bne	11c00 <__assert_fail@plt+0x888>
   11bec:	movw	r2, #57749	; 0xe195
   11bf0:	movt	r2, #2
   11bf4:	ldrb	r2, [r2]
   11bf8:	cmp	r2, #0
   11bfc:	bne	11ef4 <__assert_fail@plt+0xb7c>
   11c00:	orr	r1, r1, r0
   11c04:	tst	r1, #1
   11c08:	beq	11f00 <__assert_fail@plt+0xb88>
   11c0c:	mov	r1, #0
   11c10:	cmp	r7, #0
   11c14:	movwmi	r1, #1
   11c18:	orr	r1, r1, r0
   11c1c:	tst	r1, #1
   11c20:	beq	11f0c <__assert_fail@plt+0xb94>
   11c24:	movw	r1, #57747	; 0xe193
   11c28:	movt	r1, #2
   11c2c:	ldrb	r1, [r1]
   11c30:	mvn	r1, r1
   11c34:	orr	r1, sl, r1
   11c38:	tst	r1, #1
   11c3c:	beq	11f18 <__assert_fail@plt+0xba0>
   11c40:	movw	r1, #57744	; 0xe190
   11c44:	movt	r1, #2
   11c48:	ldrb	r1, [r1]
   11c4c:	mvn	r1, r1
   11c50:	orr	r1, sl, r1
   11c54:	tst	r1, #1
   11c58:	beq	11f24 <__assert_fail@plt+0xbac>
   11c5c:	movw	r1, #57745	; 0xe191
   11c60:	movt	r1, #2
   11c64:	ldrb	r1, [r1]
   11c68:	mvn	r1, r1
   11c6c:	orr	r1, sl, r1
   11c70:	tst	r1, #1
   11c74:	beq	11f30 <__assert_fail@plt+0xbb8>
   11c78:	movw	r1, #57746	; 0xe192
   11c7c:	movt	r1, #2
   11c80:	ldrb	r1, [r1]
   11c84:	mvn	r1, r1
   11c88:	orr	r1, sl, r1
   11c8c:	tst	r1, #1
   11c90:	beq	11f3c <__assert_fail@plt+0xbc4>
   11c94:	movw	r1, #57748	; 0xe194
   11c98:	movt	r1, #2
   11c9c:	ldrb	r1, [r1]
   11ca0:	and	r0, r1, r0
   11ca4:	tst	r0, #1
   11ca8:	bne	11f48 <__assert_fail@plt+0xbd0>
   11cac:	add	r6, r5, r8, lsl #2
   11cb0:	movw	r0, #57704	; 0xe168
   11cb4:	movt	r0, #2
   11cb8:	ldr	r0, [r0]
   11cbc:	cmp	r0, r8
   11cc0:	movweq	r1, #55048	; 0xd708
   11cc4:	movteq	r1, #1
   11cc8:	streq	r1, [r6], #4
   11ccc:	add	r8, r5, r0, lsl #2
   11cd0:	mov	r9, #1
   11cd4:	cmp	r8, r6
   11cd8:	bcs	11d6c <__assert_fail@plt+0x9f4>
   11cdc:	bic	r5, r7, r7, asr #31
   11ce0:	mov	r9, #1
   11ce4:	and	r7, r3, #1
   11ce8:	b	11cfc <__assert_fail@plt+0x984>
   11cec:	mov	r9, r1
   11cf0:	add	r8, r8, #4
   11cf4:	cmp	r8, r6
   11cf8:	bcs	11d6c <__assert_fail@plt+0x9f4>
   11cfc:	ldr	r4, [r8]
   11d00:	tst	sl, #1
   11d04:	beq	11d18 <__assert_fail@plt+0x9a0>
   11d08:	mov	r0, r4
   11d0c:	bl	11fb0 <__assert_fail@plt+0xc38>
   11d10:	and	r9, r9, r0
   11d14:	b	11cf0 <__assert_fail@plt+0x978>
   11d18:	mov	r0, r4
   11d1c:	ldr	r1, [sp, #36]	; 0x24
   11d20:	add	r2, sp, #43	; 0x2b
   11d24:	bl	12828 <__assert_fail@plt+0x14b0>
   11d28:	mov	r1, #0
   11d2c:	cmp	r0, #0
   11d30:	beq	11cec <__assert_fail@plt+0x974>
   11d34:	movw	r0, #57749	; 0xe195
   11d38:	movt	r0, #2
   11d3c:	ldrb	r0, [r0]
   11d40:	cmp	r0, #0
   11d44:	mov	r0, #10
   11d48:	movwne	r0, #0
   11d4c:	str	r0, [sp]
   11d50:	mov	r0, r4
   11d54:	mov	r1, r5
   11d58:	ldr	r2, [sp, #36]	; 0x24
   11d5c:	mov	r3, r7
   11d60:	bl	129bc <__assert_fail@plt+0x1644>
   11d64:	mov	r1, r9
   11d68:	b	11cec <__assert_fail@plt+0x974>
   11d6c:	movw	r0, #57760	; 0xe1a0
   11d70:	movt	r0, #2
   11d74:	ldrb	r0, [r0]
   11d78:	cmp	r0, #0
   11d7c:	beq	11d98 <__assert_fail@plt+0xa20>
   11d80:	movw	r0, #57720	; 0xe178
   11d84:	movt	r0, #2
   11d88:	ldr	r0, [r0]
   11d8c:	bl	19048 <__assert_fail@plt+0x7cd0>
   11d90:	cmn	r0, #1
   11d94:	beq	11f74 <__assert_fail@plt+0xbfc>
   11d98:	mov	r0, #1
   11d9c:	bic	r0, r0, r9
   11da0:	sub	sp, fp, #28
   11da4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11da8:	cmn	r0, #3
   11dac:	bne	11e04 <__assert_fail@plt+0xa8c>
   11db0:	movw	r0, #57620	; 0xe114
   11db4:	movt	r0, #2
   11db8:	ldr	r3, [r0]
   11dbc:	movw	r0, #57724	; 0xe17c
   11dc0:	movt	r0, #2
   11dc4:	ldr	r0, [r0]
   11dc8:	mov	r1, #0
   11dcc:	movw	r2, #52947	; 0xced3
   11dd0:	movt	r2, #1
   11dd4:	movw	r7, #52933	; 0xcec5
   11dd8:	movt	r7, #1
   11ddc:	str	r7, [sp]
   11de0:	str	r2, [sp, #4]
   11de4:	str	r1, [sp, #8]
   11de8:	movw	r1, #52817	; 0xce51
   11dec:	movt	r1, #1
   11df0:	movw	r2, #52919	; 0xceb7
   11df4:	movt	r2, #1
   11df8:	bl	1b2a8 <__assert_fail@plt+0x9f30>
   11dfc:	mov	r0, #0
   11e00:	bl	1121c <exit@plt>
   11e04:	cmn	r0, #2
   11e08:	bne	11e6c <__assert_fail@plt+0xaf4>
   11e0c:	mov	r0, #0
   11e10:	bl	11474 <__assert_fail@plt+0xfc>
   11e14:	movw	r1, #52870	; 0xce86
   11e18:	movt	r1, #1
   11e1c:	mov	r0, #0
   11e20:	mov	r2, #5
   11e24:	bl	11138 <dcgettext@plt>
   11e28:	mov	r5, r0
   11e2c:	ldr	r0, [sp, #24]
   11e30:	bl	1aac4 <__assert_fail@plt+0x974c>
   11e34:	mov	r3, r0
   11e38:	mov	r0, #0
   11e3c:	mov	r1, #0
   11e40:	mov	r2, r5
   11e44:	bl	111bc <error@plt>
   11e48:	movw	r1, #52889	; 0xce99
   11e4c:	movt	r1, #1
   11e50:	mov	r0, #0
   11e54:	mov	r2, #5
   11e58:	bl	11138 <dcgettext@plt>
   11e5c:	mov	r2, r0
   11e60:	mov	r0, #1
   11e64:	mov	r1, #0
   11e68:	bl	111bc <error@plt>
   11e6c:	mov	r0, #1
   11e70:	bl	11474 <__assert_fail@plt+0xfc>
   11e74:	movw	r1, #52870	; 0xce86
   11e78:	movt	r1, #1
   11e7c:	mov	r0, #0
   11e80:	mov	r2, #5
   11e84:	bl	11138 <dcgettext@plt>
   11e88:	mov	r5, r0
   11e8c:	ldr	r0, [sp, #24]
   11e90:	bl	1aac4 <__assert_fail@plt+0x974c>
   11e94:	mov	r3, r0
   11e98:	mov	r0, #0
   11e9c:	mov	r1, #0
   11ea0:	mov	r2, r5
   11ea4:	bl	111bc <error@plt>
   11ea8:	movw	r1, #52960	; 0xcee0
   11eac:	movt	r1, #1
   11eb0:	mov	r0, #0
   11eb4:	mov	r2, #5
   11eb8:	bl	11138 <dcgettext@plt>
   11ebc:	mov	r4, r0
   11ec0:	movw	r0, #51387	; 0xc8bb
   11ec4:	movt	r0, #1
   11ec8:	bl	1aac4 <__assert_fail@plt+0x974c>
   11ecc:	mov	r3, r0
   11ed0:	mov	r0, #512	; 0x200
   11ed4:	str	r0, [sp]
   11ed8:	mov	r0, #1
   11edc:	mov	r1, #0
   11ee0:	mov	r2, r4
   11ee4:	bl	111bc <error@plt>
   11ee8:	movw	r1, #53000	; 0xcf08
   11eec:	movt	r1, #1
   11ef0:	b	11f50 <__assert_fail@plt+0xbd8>
   11ef4:	movw	r1, #53035	; 0xcf2b
   11ef8:	movt	r1, #1
   11efc:	b	11f50 <__assert_fail@plt+0xbd8>
   11f00:	movw	r1, #53095	; 0xcf67
   11f04:	movt	r1, #1
   11f08:	b	11f50 <__assert_fail@plt+0xbd8>
   11f0c:	movw	r1, #53152	; 0xcfa0
   11f10:	movt	r1, #1
   11f14:	b	11f50 <__assert_fail@plt+0xbd8>
   11f18:	movw	r1, #53225	; 0xcfe9
   11f1c:	movt	r1, #1
   11f20:	b	11f50 <__assert_fail@plt+0xbd8>
   11f24:	movw	r1, #53297	; 0xd031
   11f28:	movt	r1, #1
   11f2c:	b	11f50 <__assert_fail@plt+0xbd8>
   11f30:	movw	r1, #53361	; 0xd071
   11f34:	movt	r1, #1
   11f38:	b	11f50 <__assert_fail@plt+0xbd8>
   11f3c:	movw	r1, #53423	; 0xd0af
   11f40:	movt	r1, #1
   11f44:	b	11f50 <__assert_fail@plt+0xbd8>
   11f48:	movw	r1, #53486	; 0xd0ee
   11f4c:	movt	r1, #1
   11f50:	mov	r0, #0
   11f54:	mov	r2, #5
   11f58:	bl	11138 <dcgettext@plt>
   11f5c:	mov	r2, r0
   11f60:	mov	r0, #0
   11f64:	mov	r1, #0
   11f68:	bl	111bc <error@plt>
   11f6c:	mov	r0, #1
   11f70:	bl	11474 <__assert_fail@plt+0xfc>
   11f74:	bl	11258 <__errno_location@plt>
   11f78:	ldr	r4, [r0]
   11f7c:	movw	r1, #53550	; 0xd12e
   11f80:	movt	r1, #1
   11f84:	mov	r0, #0
   11f88:	mov	r2, #5
   11f8c:	bl	11138 <dcgettext@plt>
   11f90:	mov	r2, r0
   11f94:	mov	r0, #1
   11f98:	mov	r1, r4
   11f9c:	bl	111bc <error@plt>
   11fa0:	add	r0, r0, #7
   11fa4:	and	r1, r0, #7
   11fa8:	sub	r0, r0, r1
   11fac:	bx	lr
   11fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb4:	add	fp, sp, #28
   11fb8:	sub	sp, sp, #172	; 0xac
   11fbc:	mov	r7, r0
   11fc0:	add	r0, sp, #100	; 0x64
   11fc4:	bl	11fa0 <__assert_fail@plt+0xc28>
   11fc8:	str	r0, [sp, #72]	; 0x48
   11fcc:	movw	r1, #55048	; 0xd708
   11fd0:	movt	r1, #1
   11fd4:	mov	r0, r7
   11fd8:	bl	110d8 <strcmp@plt>
   11fdc:	str	r0, [sp, #56]	; 0x38
   11fe0:	cmp	r0, #0
   11fe4:	beq	12008 <__assert_fail@plt+0xc90>
   11fe8:	movw	r1, #54554	; 0xd51a
   11fec:	movt	r1, #1
   11ff0:	mov	r0, r7
   11ff4:	bl	19150 <__assert_fail@plt+0x7dd8>
   11ff8:	cmp	r0, #0
   11ffc:	beq	1272c <__assert_fail@plt+0x13b4>
   12000:	mov	r9, r0
   12004:	b	1203c <__assert_fail@plt+0xcc4>
   12008:	movw	r0, #57760	; 0xe1a0
   1200c:	movt	r0, #2
   12010:	mov	r1, #1
   12014:	strb	r1, [r0]
   12018:	movw	r1, #53550	; 0xd12e
   1201c:	movt	r1, #1
   12020:	mov	r0, #0
   12024:	mov	r2, #5
   12028:	bl	11138 <dcgettext@plt>
   1202c:	mov	r7, r0
   12030:	movw	r0, #57720	; 0xe178
   12034:	movt	r0, #2
   12038:	ldr	r9, [r0]
   1203c:	mov	r5, #0
   12040:	str	r5, [sp, #92]	; 0x5c
   12044:	str	r5, [sp, #96]	; 0x60
   12048:	mov	r0, #0
   1204c:	str	r0, [sp, #36]	; 0x24
   12050:	mov	r6, #0
   12054:	mov	sl, #0
   12058:	mov	r8, #0
   1205c:	mov	r0, #0
   12060:	str	r0, [sp, #52]	; 0x34
   12064:	mov	r0, #0
   12068:	str	r0, [sp, #48]	; 0x30
   1206c:	mov	r0, #0
   12070:	str	r0, [sp, #44]	; 0x2c
   12074:	mov	r0, #0
   12078:	str	r0, [sp, #40]	; 0x28
   1207c:	mov	r4, #0
   12080:	mov	r0, #0
   12084:	str	r0, [sp, #68]	; 0x44
   12088:	mov	r0, #0
   1208c:	str	r0, [sp, #64]	; 0x40
   12090:	mov	r0, #0
   12094:	str	r0, [sp, #60]	; 0x3c
   12098:	adds	r6, r6, #1
   1209c:	adcs	sl, sl, #0
   120a0:	adc	r0, r5, #0
   120a4:	cmp	r0, #1
   120a8:	beq	127ec <__assert_fail@plt+0x1474>
   120ac:	add	r0, sp, #96	; 0x60
   120b0:	add	r1, sp, #92	; 0x5c
   120b4:	mov	r2, r9
   120b8:	bl	11324 <getline@plt>
   120bc:	cmp	r0, #1
   120c0:	blt	124d4 <__assert_fail@plt+0x115c>
   120c4:	mov	r1, r0
   120c8:	ldr	r0, [sp, #96]	; 0x60
   120cc:	ldrb	r2, [r0]
   120d0:	cmp	r2, #35	; 0x23
   120d4:	beq	124b4 <__assert_fail@plt+0x113c>
   120d8:	sub	r2, r1, #1
   120dc:	ldrb	r3, [r0, r2]
   120e0:	cmp	r3, #10
   120e4:	moveq	r1, r2
   120e8:	sub	r2, r1, #1
   120ec:	cmp	r1, #0
   120f0:	mov	r3, r1
   120f4:	movgt	r3, r2
   120f8:	ldrb	r3, [r0, r3]
   120fc:	cmp	r3, #13
   12100:	moveq	r1, r2
   12104:	cmp	r1, #0
   12108:	beq	124b4 <__assert_fail@plt+0x113c>
   1210c:	strb	r5, [r0, r1]
   12110:	ldr	r0, [sp, #96]	; 0x60
   12114:	add	r2, sp, #88	; 0x58
   12118:	str	r2, [sp]
   1211c:	add	r2, sp, #80	; 0x50
   12120:	add	r3, sp, #84	; 0x54
   12124:	bl	12b30 <__assert_fail@plt+0x17b8>
   12128:	cmp	r0, #0
   1212c:	beq	122a8 <__assert_fail@plt+0xf30>
   12130:	ldr	r0, [sp, #56]	; 0x38
   12134:	cmp	r0, #0
   12138:	bne	12154 <__assert_fail@plt+0xddc>
   1213c:	ldr	r0, [sp, #88]	; 0x58
   12140:	movw	r1, #55048	; 0xd708
   12144:	movt	r1, #1
   12148:	bl	110d8 <strcmp@plt>
   1214c:	cmp	r0, #0
   12150:	beq	122a8 <__assert_fail@plt+0xf30>
   12154:	movw	r0, #57744	; 0xe190
   12158:	movt	r0, #2
   1215c:	ldrb	r0, [r0]
   12160:	mov	r8, #0
   12164:	cmp	r0, #0
   12168:	bne	12184 <__assert_fail@plt+0xe0c>
   1216c:	ldr	r0, [sp, #88]	; 0x58
   12170:	mov	r1, #10
   12174:	bl	1124c <strchr@plt>
   12178:	mov	r8, r0
   1217c:	cmp	r0, #0
   12180:	movwne	r8, #1
   12184:	ldr	r5, [sp, #88]	; 0x58
   12188:	mov	r0, r5
   1218c:	ldr	r1, [sp, #72]	; 0x48
   12190:	add	r2, sp, #79	; 0x4f
   12194:	bl	12828 <__assert_fail@plt+0x14b0>
   12198:	cmp	r0, #0
   1219c:	beq	12338 <__assert_fail@plt+0xfc0>
   121a0:	ldrb	r0, [sp, #79]	; 0x4f
   121a4:	cmp	r0, #0
   121a8:	beq	121c0 <__assert_fail@plt+0xe48>
   121ac:	movw	r0, #57747	; 0xe193
   121b0:	movt	r0, #2
   121b4:	ldrb	r0, [r0]
   121b8:	cmp	r0, #0
   121bc:	bne	12364 <__assert_fail@plt+0xfec>
   121c0:	str	r5, [sp, #24]
   121c4:	str	r4, [sp, #32]
   121c8:	str	r7, [sp, #28]
   121cc:	movw	r0, #57756	; 0xe19c
   121d0:	movt	r0, #2
   121d4:	ldr	r0, [r0]
   121d8:	lsr	ip, r0, #1
   121dc:	mov	r7, #0
   121e0:	cmp	r7, r0, lsr #1
   121e4:	beq	12248 <__assert_fail@plt+0xed0>
   121e8:	mov	r4, ip
   121ec:	bl	111ec <__ctype_tolower_loc@plt>
   121f0:	mov	ip, r4
   121f4:	movw	r5, #54864	; 0xd650
   121f8:	movt	r5, #1
   121fc:	ldr	r0, [r0]
   12200:	mov	r7, #0
   12204:	ldr	r1, [sp, #80]	; 0x50
   12208:	ldr	r2, [sp, #72]	; 0x48
   1220c:	ldrb	r2, [r2, r7]
   12210:	ldrb	r3, [r5, r2, lsr #4]
   12214:	ldrb	r4, [r1, r7, lsl #1]
   12218:	ldr	r4, [r0, r4, lsl #2]
   1221c:	cmp	r4, r3
   12220:	andeq	r2, r2, #15
   12224:	ldrbeq	r2, [r5, r2]
   12228:	addeq	r3, r1, r7, lsl #1
   1222c:	ldrbeq	r3, [r3, #1]
   12230:	ldreq	r3, [r0, r3, lsl #2]
   12234:	cmpeq	r3, r2
   12238:	bne	12248 <__assert_fail@plt+0xed0>
   1223c:	add	r7, r7, #1
   12240:	cmp	ip, r7
   12244:	bne	12208 <__assert_fail@plt+0xe90>
   12248:	ldr	r0, [sp, #44]	; 0x2c
   1224c:	adds	r3, r0, #1
   12250:	ldr	r1, [sp, #40]	; 0x28
   12254:	adc	r5, r1, #0
   12258:	cmp	r7, ip
   1225c:	movne	r0, r3
   12260:	movne	r1, r5
   12264:	movw	r2, #57744	; 0xe190
   12268:	movt	r2, #2
   1226c:	ldrb	r2, [r2]
   12270:	cmp	r2, #0
   12274:	beq	123b8 <__assert_fail@plt+0x1040>
   12278:	sub	r2, r7, ip
   1227c:	clz	r2, r2
   12280:	lsr	r2, r2, #5
   12284:	ldr	r3, [sp, #36]	; 0x24
   12288:	orr	r3, r3, r2
   1228c:	str	r3, [sp, #36]	; 0x24
   12290:	str	r0, [sp, #44]	; 0x2c
   12294:	str	r1, [sp, #40]	; 0x28
   12298:	ldr	r7, [sp, #28]
   1229c:	ldr	r4, [sp, #32]
   122a0:	mov	r5, #0
   122a4:	b	124b0 <__assert_fail@plt+0x1138>
   122a8:	ldr	r0, [sp, #64]	; 0x40
   122ac:	adds	r0, r0, #1
   122b0:	str	r0, [sp, #64]	; 0x40
   122b4:	ldr	r0, [sp, #60]	; 0x3c
   122b8:	adc	r0, r0, #0
   122bc:	str	r0, [sp, #60]	; 0x3c
   122c0:	movw	r0, #57745	; 0xe191
   122c4:	movt	r0, #2
   122c8:	ldrb	r0, [r0]
   122cc:	cmp	r0, #1
   122d0:	bne	12324 <__assert_fail@plt+0xfac>
   122d4:	mov	r0, #0
   122d8:	movw	r1, #54115	; 0xd363
   122dc:	movt	r1, #1
   122e0:	mov	r2, #5
   122e4:	bl	11138 <dcgettext@plt>
   122e8:	mov	r5, r0
   122ec:	mov	r0, #0
   122f0:	mov	r1, #3
   122f4:	mov	r2, r7
   122f8:	bl	1a984 <__assert_fail@plt+0x960c>
   122fc:	mov	r3, r0
   12300:	stm	sp, {r6, sl}
   12304:	movw	r0, #51387	; 0xc8bb
   12308:	movt	r0, #1
   1230c:	str	r0, [sp, #8]
   12310:	mov	r0, #0
   12314:	mov	r1, #0
   12318:	mov	r2, r5
   1231c:	mov	r5, #0
   12320:	bl	111bc <error@plt>
   12324:	adds	r4, r4, #1
   12328:	ldr	r0, [sp, #68]	; 0x44
   1232c:	adc	r0, r0, #0
   12330:	str	r0, [sp, #68]	; 0x44
   12334:	b	124b4 <__assert_fail@plt+0x113c>
   12338:	ldr	r0, [sp, #52]	; 0x34
   1233c:	adds	r0, r0, #1
   12340:	str	r0, [sp, #52]	; 0x34
   12344:	ldr	r0, [sp, #48]	; 0x30
   12348:	adc	r0, r0, #0
   1234c:	str	r0, [sp, #48]	; 0x30
   12350:	movw	r0, #57744	; 0xe190
   12354:	movt	r0, #2
   12358:	ldrb	r0, [r0]
   1235c:	cmp	r0, #0
   12360:	beq	1236c <__assert_fail@plt+0xff4>
   12364:	mov	r5, #0
   12368:	b	124b0 <__assert_fail@plt+0x1138>
   1236c:	cmp	r8, #0
   12370:	beq	1237c <__assert_fail@plt+0x1004>
   12374:	mov	r0, #92	; 0x5c
   12378:	bl	1136c <putchar_unlocked@plt>
   1237c:	mov	r0, r5
   12380:	mov	r1, r8
   12384:	bl	12e68 <__assert_fail@plt+0x1af0>
   12388:	mov	r0, #0
   1238c:	movw	r1, #54163	; 0xd393
   12390:	movt	r1, #1
   12394:	mov	r2, #5
   12398:	bl	11138 <dcgettext@plt>
   1239c:	mov	r2, r0
   123a0:	mov	r0, #1
   123a4:	movw	r1, #55853	; 0xda2d
   123a8:	movt	r1, #1
   123ac:	bl	11288 <__printf_chk@plt>
   123b0:	mov	r5, #0
   123b4:	b	124b0 <__assert_fail@plt+0x1138>
   123b8:	cmp	r7, ip
   123bc:	ldr	r4, [sp, #32]
   123c0:	bne	123e4 <__assert_fail@plt+0x106c>
   123c4:	movw	r0, #57746	; 0xe192
   123c8:	movt	r0, #2
   123cc:	ldrb	r0, [r0]
   123d0:	cmp	r0, #0
   123d4:	beq	123e4 <__assert_fail@plt+0x106c>
   123d8:	mov	r0, #1
   123dc:	str	r0, [sp, #36]	; 0x24
   123e0:	b	1244c <__assert_fail@plt+0x10d4>
   123e4:	str	r5, [sp, #16]
   123e8:	str	r3, [sp, #20]
   123ec:	mov	r5, ip
   123f0:	cmp	r8, #0
   123f4:	beq	12400 <__assert_fail@plt+0x1088>
   123f8:	mov	r0, #92	; 0x5c
   123fc:	bl	1136c <putchar_unlocked@plt>
   12400:	ldr	r0, [sp, #24]
   12404:	mov	r1, r8
   12408:	bl	12e68 <__assert_fail@plt+0x1af0>
   1240c:	cmp	r7, r5
   12410:	beq	12458 <__assert_fail@plt+0x10e0>
   12414:	mov	r0, #0
   12418:	movw	r1, #54183	; 0xd3a7
   1241c:	movt	r1, #1
   12420:	mov	r2, #5
   12424:	bl	11138 <dcgettext@plt>
   12428:	mov	r2, r0
   1242c:	mov	r0, #1
   12430:	movw	r1, #55853	; 0xda2d
   12434:	movt	r1, #1
   12438:	bl	11288 <__printf_chk@plt>
   1243c:	ldr	r0, [sp, #20]
   12440:	str	r0, [sp, #44]	; 0x2c
   12444:	ldr	r0, [sp, #16]
   12448:	str	r0, [sp, #40]	; 0x28
   1244c:	ldr	r7, [sp, #28]
   12450:	mov	r5, #0
   12454:	b	124b0 <__assert_fail@plt+0x1138>
   12458:	movw	r0, #57746	; 0xe192
   1245c:	movt	r0, #2
   12460:	ldrb	r0, [r0]
   12464:	cmp	r0, #0
   12468:	ldr	r7, [sp, #28]
   1246c:	mov	r5, #0
   12470:	beq	12480 <__assert_fail@plt+0x1108>
   12474:	mov	r0, #1
   12478:	str	r0, [sp, #36]	; 0x24
   1247c:	b	124b0 <__assert_fail@plt+0x1138>
   12480:	mov	r0, #0
   12484:	movw	r1, #54190	; 0xd3ae
   12488:	movt	r1, #1
   1248c:	mov	r2, #5
   12490:	bl	11138 <dcgettext@plt>
   12494:	mov	r2, r0
   12498:	mov	r0, #1
   1249c:	str	r0, [sp, #36]	; 0x24
   124a0:	mov	r0, #1
   124a4:	movw	r1, #55853	; 0xda2d
   124a8:	movt	r1, #1
   124ac:	bl	11288 <__printf_chk@plt>
   124b0:	mov	r8, #1
   124b4:	mov	r0, r9
   124b8:	bl	11348 <feof_unlocked@plt>
   124bc:	cmp	r0, #0
   124c0:	bne	124d4 <__assert_fail@plt+0x115c>
   124c4:	mov	r0, r9
   124c8:	bl	111a4 <ferror_unlocked@plt>
   124cc:	cmp	r0, #0
   124d0:	beq	12098 <__assert_fail@plt+0xd20>
   124d4:	mov	sl, r4
   124d8:	ldr	r0, [sp, #96]	; 0x60
   124dc:	bl	19200 <__assert_fail@plt+0x7e88>
   124e0:	mov	r0, r9
   124e4:	bl	111a4 <ferror_unlocked@plt>
   124e8:	mov	r5, r0
   124ec:	mov	r4, #0
   124f0:	cmp	r0, #0
   124f4:	mvneq	r4, #0
   124f8:	ldr	r0, [sp, #56]	; 0x38
   124fc:	cmp	r0, #0
   12500:	beq	12544 <__assert_fail@plt+0x11cc>
   12504:	mov	r0, r9
   12508:	bl	19048 <__assert_fail@plt+0x7cd0>
   1250c:	cmp	r5, #0
   12510:	bne	1254c <__assert_fail@plt+0x11d4>
   12514:	cmp	r0, #0
   12518:	ldr	r5, [sp, #52]	; 0x34
   1251c:	ldr	r6, [sp, #48]	; 0x30
   12520:	beq	1252c <__assert_fail@plt+0x11b4>
   12524:	bl	11258 <__errno_location@plt>
   12528:	ldr	r4, [r0]
   1252c:	cmp	r4, #0
   12530:	bmi	1255c <__assert_fail@plt+0x11e4>
   12534:	beq	12760 <__assert_fail@plt+0x13e8>
   12538:	movw	r5, #52886	; 0xce96
   1253c:	movt	r5, #1
   12540:	b	12778 <__assert_fail@plt+0x1400>
   12544:	mov	r0, r9
   12548:	bl	11300 <clearerr_unlocked@plt>
   1254c:	ldr	r5, [sp, #52]	; 0x34
   12550:	ldr	r6, [sp, #48]	; 0x30
   12554:	cmp	r4, #0
   12558:	bpl	12534 <__assert_fail@plt+0x11bc>
   1255c:	tst	r8, #1
   12560:	beq	127a0 <__assert_fail@plt+0x1428>
   12564:	movw	r0, #57744	; 0xe190
   12568:	movt	r0, #2
   1256c:	ldrb	r0, [r0]
   12570:	cmp	r0, #0
   12574:	mov	r4, sl
   12578:	ldr	r9, [sp, #36]	; 0x24
   1257c:	bne	126d8 <__assert_fail@plt+0x1360>
   12580:	str	r4, [sp, #32]
   12584:	ldr	r4, [sp, #64]	; 0x40
   12588:	ldr	r8, [sp, #60]	; 0x3c
   1258c:	orrs	r0, r4, r8
   12590:	beq	125d8 <__assert_fail@plt+0x1260>
   12594:	mov	r0, r4
   12598:	mov	r1, r8
   1259c:	bl	12f1c <__assert_fail@plt+0x1ba4>
   125a0:	mov	r3, r0
   125a4:	mov	r0, #5
   125a8:	str	r0, [sp]
   125ac:	movw	r1, #54255	; 0xd3ef
   125b0:	movt	r1, #1
   125b4:	movw	r2, #54298	; 0xd41a
   125b8:	movt	r2, #1
   125bc:	mov	r0, #0
   125c0:	bl	11360 <dcngettext@plt>
   125c4:	mov	r2, r0
   125c8:	stm	sp, {r4, r8}
   125cc:	mov	r0, #0
   125d0:	mov	r1, #0
   125d4:	bl	111bc <error@plt>
   125d8:	orrs	r0, r5, r6
   125dc:	beq	12624 <__assert_fail@plt+0x12ac>
   125e0:	mov	r0, r5
   125e4:	mov	r1, r6
   125e8:	bl	12f1c <__assert_fail@plt+0x1ba4>
   125ec:	mov	r3, r0
   125f0:	mov	r0, #5
   125f4:	str	r0, [sp]
   125f8:	movw	r1, #54343	; 0xd447
   125fc:	movt	r1, #1
   12600:	movw	r2, #54387	; 0xd473
   12604:	movt	r2, #1
   12608:	mov	r0, #0
   1260c:	bl	11360 <dcngettext@plt>
   12610:	mov	r2, r0
   12614:	stm	sp, {r5, r6}
   12618:	mov	r0, #0
   1261c:	mov	r1, #0
   12620:	bl	111bc <error@plt>
   12624:	ldr	r4, [sp, #44]	; 0x2c
   12628:	ldr	r8, [sp, #40]	; 0x28
   1262c:	orrs	r0, r4, r8
   12630:	beq	12678 <__assert_fail@plt+0x1300>
   12634:	mov	r0, r4
   12638:	mov	r1, r8
   1263c:	bl	12f1c <__assert_fail@plt+0x1ba4>
   12640:	mov	r3, r0
   12644:	mov	r0, #5
   12648:	str	r0, [sp]
   1264c:	movw	r1, #54432	; 0xd4a0
   12650:	movt	r1, #1
   12654:	movw	r2, #54478	; 0xd4ce
   12658:	movt	r2, #1
   1265c:	mov	r0, #0
   12660:	bl	11360 <dcngettext@plt>
   12664:	mov	r2, r0
   12668:	stm	sp, {r4, r8}
   1266c:	mov	r0, #0
   12670:	mov	r1, #0
   12674:	bl	111bc <error@plt>
   12678:	movw	r0, #57747	; 0xe193
   1267c:	movt	r0, #2
   12680:	ldrb	r0, [r0]
   12684:	mvn	r0, r0
   12688:	orr	r0, r9, r0
   1268c:	tst	r0, #1
   12690:	ldr	r4, [sp, #32]
   12694:	bne	126d8 <__assert_fail@plt+0x1360>
   12698:	movw	r1, #54525	; 0xd4fd
   1269c:	movt	r1, #1
   126a0:	mov	r0, #0
   126a4:	mov	r2, #5
   126a8:	bl	11138 <dcgettext@plt>
   126ac:	mov	r8, r0
   126b0:	mov	r0, #0
   126b4:	mov	r1, #3
   126b8:	mov	r2, r7
   126bc:	bl	1a984 <__assert_fail@plt+0x960c>
   126c0:	mov	r3, r0
   126c4:	mov	r0, #0
   126c8:	mov	r1, #0
   126cc:	mov	r2, r8
   126d0:	mov	r4, sl
   126d4:	bl	111bc <error@plt>
   126d8:	ldr	r0, [sp, #44]	; 0x2c
   126dc:	orr	r0, r5, r0
   126e0:	ldr	r1, [sp, #40]	; 0x28
   126e4:	orr	r1, r6, r1
   126e8:	orrs	r0, r0, r1
   126ec:	movwne	r0, #1
   126f0:	mvn	r1, r9
   126f4:	orr	r0, r1, r0
   126f8:	mov	r6, #0
   126fc:	tst	r0, #1
   12700:	bne	127e0 <__assert_fail@plt+0x1468>
   12704:	ldr	r0, [sp, #68]	; 0x44
   12708:	orr	r0, r4, r0
   1270c:	clz	r0, r0
   12710:	lsr	r0, r0, #5
   12714:	movw	r1, #57748	; 0xe194
   12718:	movt	r1, #2
   1271c:	ldrb	r1, [r1]
   12720:	eor	r1, r1, #1
   12724:	orr	r6, r0, r1
   12728:	b	127e0 <__assert_fail@plt+0x1468>
   1272c:	bl	11258 <__errno_location@plt>
   12730:	ldr	r4, [r0]
   12734:	mov	r6, #0
   12738:	mov	r0, #0
   1273c:	mov	r1, #3
   12740:	mov	r2, r7
   12744:	bl	1a984 <__assert_fail@plt+0x960c>
   12748:	mov	r3, r0
   1274c:	movw	r2, #52886	; 0xce96
   12750:	movt	r2, #1
   12754:	mov	r0, #0
   12758:	mov	r1, r4
   1275c:	b	127dc <__assert_fail@plt+0x1464>
   12760:	movw	r1, #54193	; 0xd3b1
   12764:	movt	r1, #1
   12768:	mov	r0, #0
   1276c:	mov	r2, #5
   12770:	bl	11138 <dcgettext@plt>
   12774:	mov	r5, r0
   12778:	mov	r6, #0
   1277c:	mov	r0, #0
   12780:	mov	r1, #3
   12784:	mov	r2, r7
   12788:	bl	1a984 <__assert_fail@plt+0x960c>
   1278c:	mov	r3, r0
   12790:	mov	r0, #0
   12794:	mov	r1, r4
   12798:	mov	r2, r5
   1279c:	b	127dc <__assert_fail@plt+0x1464>
   127a0:	mov	r6, #0
   127a4:	movw	r1, #54208	; 0xd3c0
   127a8:	movt	r1, #1
   127ac:	mov	r0, #0
   127b0:	mov	r2, #5
   127b4:	bl	11138 <dcgettext@plt>
   127b8:	mov	r4, r0
   127bc:	mov	r0, #0
   127c0:	mov	r1, #3
   127c4:	mov	r2, r7
   127c8:	bl	1a984 <__assert_fail@plt+0x960c>
   127cc:	mov	r3, r0
   127d0:	mov	r0, #0
   127d4:	mov	r1, #0
   127d8:	mov	r2, r4
   127dc:	bl	111bc <error@plt>
   127e0:	and	r0, r6, #1
   127e4:	sub	sp, fp, #28
   127e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ec:	movw	r1, #54087	; 0xd347
   127f0:	movt	r1, #1
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	bl	11138 <dcgettext@plt>
   12800:	mov	r4, r0
   12804:	mov	r0, #0
   12808:	mov	r1, #3
   1280c:	mov	r2, r7
   12810:	bl	1a984 <__assert_fail@plt+0x960c>
   12814:	mov	r3, r0
   12818:	mov	r0, #1
   1281c:	mov	r1, #0
   12820:	mov	r2, r4
   12824:	bl	111bc <error@plt>
   12828:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1282c:	add	fp, sp, #24
   12830:	mov	r4, r2
   12834:	mov	r6, r1
   12838:	mov	r8, r0
   1283c:	movw	r1, #55048	; 0xd708
   12840:	movt	r1, #1
   12844:	bl	110d8 <strcmp@plt>
   12848:	mov	r5, r0
   1284c:	mov	r0, #0
   12850:	strb	r0, [r4]
   12854:	cmp	r5, #0
   12858:	beq	128ac <__assert_fail@plt+0x1534>
   1285c:	movw	r1, #54554	; 0xd51a
   12860:	movt	r1, #1
   12864:	mov	r0, r8
   12868:	bl	19150 <__assert_fail@plt+0x7dd8>
   1286c:	mov	r7, r0
   12870:	cmp	r0, #0
   12874:	bne	128c8 <__assert_fail@plt+0x1550>
   12878:	movw	r0, #57747	; 0xe193
   1287c:	movt	r0, #2
   12880:	ldrb	r0, [r0]
   12884:	cmp	r0, #1
   12888:	bne	12980 <__assert_fail@plt+0x1608>
   1288c:	bl	11258 <__errno_location@plt>
   12890:	ldr	r0, [r0]
   12894:	cmp	r0, #2
   12898:	bne	12980 <__assert_fail@plt+0x1608>
   1289c:	mov	r5, #1
   128a0:	strb	r5, [r4]
   128a4:	mov	r0, r5
   128a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   128ac:	movw	r0, #57760	; 0xe1a0
   128b0:	movt	r0, #2
   128b4:	mov	r1, #1
   128b8:	strb	r1, [r0]
   128bc:	movw	r0, #57720	; 0xe178
   128c0:	movt	r0, #2
   128c4:	ldr	r7, [r0]
   128c8:	mov	r0, r7
   128cc:	mov	r1, #2
   128d0:	bl	1900c <__assert_fail@plt+0x7c94>
   128d4:	movw	r0, #57736	; 0xe188
   128d8:	movt	r0, #2
   128dc:	ldrd	r0, [r0]
   128e0:	lsr	r0, r0, #3
   128e4:	orr	r2, r0, r1, lsl #29
   128e8:	mov	r0, r7
   128ec:	mov	r1, r6
   128f0:	bl	18e14 <__assert_fail@plt+0x7a9c>
   128f4:	cmp	r0, #0
   128f8:	beq	12908 <__assert_fail@plt+0x1590>
   128fc:	bl	11258 <__errno_location@plt>
   12900:	ldr	r6, [r0]
   12904:	b	1290c <__assert_fail@plt+0x1594>
   12908:	mov	r6, #0
   1290c:	mov	r0, r7
   12910:	cmp	r5, #0
   12914:	beq	12968 <__assert_fail@plt+0x15f0>
   12918:	bl	19048 <__assert_fail@plt+0x7cd0>
   1291c:	cmp	r6, #0
   12920:	bne	12934 <__assert_fail@plt+0x15bc>
   12924:	cmp	r0, #0
   12928:	beq	12934 <__assert_fail@plt+0x15bc>
   1292c:	bl	11258 <__errno_location@plt>
   12930:	ldr	r6, [r0]
   12934:	cmp	r6, #0
   12938:	beq	12974 <__assert_fail@plt+0x15fc>
   1293c:	mov	r5, #0
   12940:	mov	r0, #0
   12944:	mov	r1, #3
   12948:	mov	r2, r8
   1294c:	bl	1a984 <__assert_fail@plt+0x960c>
   12950:	mov	r3, r0
   12954:	movw	r2, #52886	; 0xce96
   12958:	movt	r2, #1
   1295c:	mov	r0, #0
   12960:	mov	r1, r6
   12964:	b	129b0 <__assert_fail@plt+0x1638>
   12968:	bl	11300 <clearerr_unlocked@plt>
   1296c:	cmp	r6, #0
   12970:	bne	1293c <__assert_fail@plt+0x15c4>
   12974:	mov	r5, #1
   12978:	mov	r0, r5
   1297c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12980:	bl	11258 <__errno_location@plt>
   12984:	ldr	r4, [r0]
   12988:	mov	r5, #0
   1298c:	mov	r0, #0
   12990:	mov	r1, #3
   12994:	mov	r2, r8
   12998:	bl	1a984 <__assert_fail@plt+0x960c>
   1299c:	mov	r3, r0
   129a0:	movw	r2, #52886	; 0xce96
   129a4:	movt	r2, #1
   129a8:	mov	r0, #0
   129ac:	mov	r1, r4
   129b0:	bl	111bc <error@plt>
   129b4:	mov	r0, r5
   129b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   129bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	add	fp, sp, #28
   129c4:	sub	sp, sp, #12
   129c8:	mov	r7, r3
   129cc:	mov	r6, r2
   129d0:	mov	r4, r0
   129d4:	mov	sl, #0
   129d8:	ldr	r0, [fp, #8]
   129dc:	cmp	r0, #10
   129e0:	str	r0, [sp, #8]
   129e4:	str	r1, [sp, #4]
   129e8:	bne	12a34 <__assert_fail@plt+0x16bc>
   129ec:	mov	r0, r4
   129f0:	mov	r1, #92	; 0x5c
   129f4:	bl	1124c <strchr@plt>
   129f8:	cmp	r0, #0
   129fc:	bne	12a28 <__assert_fail@plt+0x16b0>
   12a00:	mov	r0, r4
   12a04:	mov	r1, #10
   12a08:	bl	1124c <strchr@plt>
   12a0c:	cmp	r0, #0
   12a10:	bne	12a28 <__assert_fail@plt+0x16b0>
   12a14:	mov	r0, r4
   12a18:	mov	r1, #13
   12a1c:	bl	1124c <strchr@plt>
   12a20:	cmp	r0, #0
   12a24:	beq	12a34 <__assert_fail@plt+0x16bc>
   12a28:	mov	r0, #92	; 0x5c
   12a2c:	bl	1136c <putchar_unlocked@plt>
   12a30:	mov	sl, #1
   12a34:	cmp	r7, #0
   12a38:	beq	12ab0 <__assert_fail@plt+0x1738>
   12a3c:	movw	r8, #57724	; 0xe17c
   12a40:	movt	r8, #2
   12a44:	ldr	r1, [r8]
   12a48:	movw	r0, #51387	; 0xc8bb
   12a4c:	movt	r0, #1
   12a50:	bl	110c0 <fputs_unlocked@plt>
   12a54:	movw	r0, #57736	; 0xe188
   12a58:	movt	r0, #2
   12a5c:	ldrd	r2, [r0]
   12a60:	lsr	r0, r2, #9
   12a64:	orr	r0, r0, r3, lsl #23
   12a68:	orr	r0, r0, r3, lsr #9
   12a6c:	cmp	r0, #0
   12a70:	bne	12a84 <__assert_fail@plt+0x170c>
   12a74:	movw	r1, #54559	; 0xd51f
   12a78:	movt	r1, #1
   12a7c:	mov	r0, #1
   12a80:	bl	11288 <__printf_chk@plt>
   12a84:	ldr	r1, [r8]
   12a88:	movw	r0, #54565	; 0xd525
   12a8c:	movt	r0, #1
   12a90:	bl	110c0 <fputs_unlocked@plt>
   12a94:	mov	r0, r4
   12a98:	mov	r1, sl
   12a9c:	bl	12e68 <__assert_fail@plt+0x1af0>
   12aa0:	ldr	r1, [r8]
   12aa4:	movw	r0, #54568	; 0xd528
   12aa8:	movt	r0, #1
   12aac:	bl	110c0 <fputs_unlocked@plt>
   12ab0:	movw	r8, #57756	; 0xe19c
   12ab4:	movt	r8, #2
   12ab8:	ldr	r0, [r8]
   12abc:	cmp	r0, #2
   12ac0:	bcc	12af0 <__assert_fail@plt+0x1778>
   12ac4:	mov	r9, #0
   12ac8:	movw	r5, #54573	; 0xd52d
   12acc:	movt	r5, #1
   12ad0:	ldrb	r2, [r6, r9]
   12ad4:	mov	r0, #1
   12ad8:	mov	r1, r5
   12adc:	bl	11288 <__printf_chk@plt>
   12ae0:	add	r9, r9, #1
   12ae4:	ldr	r0, [r8]
   12ae8:	cmp	r9, r0, lsr #1
   12aec:	bcc	12ad0 <__assert_fail@plt+0x1758>
   12af0:	cmp	r7, #0
   12af4:	bne	12b20 <__assert_fail@plt+0x17a8>
   12af8:	mov	r0, #32
   12afc:	bl	1136c <putchar_unlocked@plt>
   12b00:	mov	r0, #42	; 0x2a
   12b04:	ldr	r1, [sp, #4]
   12b08:	cmp	r1, #0
   12b0c:	movweq	r0, #32
   12b10:	bl	1136c <putchar_unlocked@plt>
   12b14:	mov	r0, r4
   12b18:	mov	r1, sl
   12b1c:	bl	12e68 <__assert_fail@plt+0x1af0>
   12b20:	ldr	r0, [sp, #8]
   12b24:	sub	sp, fp, #28
   12b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b2c:	b	1136c <putchar_unlocked@plt>
   12b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b34:	add	fp, sp, #28
   12b38:	sub	sp, sp, #36	; 0x24
   12b3c:	mov	r9, r2
   12b40:	mov	r4, r1
   12b44:	mov	r6, r0
   12b48:	mov	r8, #0
   12b4c:	b	12b54 <__assert_fail@plt+0x17dc>
   12b50:	add	r8, r8, #1
   12b54:	ldrb	r0, [r6, r8]
   12b58:	cmp	r0, #9
   12b5c:	cmpne	r0, #32
   12b60:	beq	12b50 <__assert_fail@plt+0x17d8>
   12b64:	cmp	r0, #92	; 0x5c
   12b68:	str	r3, [sp, #8]
   12b6c:	movne	r0, #0
   12b70:	addeq	r8, r8, #1
   12b74:	moveq	r0, #1
   12b78:	str	r0, [sp, #12]
   12b7c:	add	r7, r6, r8
   12b80:	movw	r1, #51387	; 0xc8bb
   12b84:	movt	r1, #1
   12b88:	mov	r0, r7
   12b8c:	mov	r2, #7
   12b90:	bl	11330 <strncmp@plt>
   12b94:	cmp	r0, #0
   12b98:	str	r4, [sp, #16]
   12b9c:	beq	12cf8 <__assert_fail@plt+0x1980>
   12ba0:	movw	r0, #57752	; 0xe198
   12ba4:	movt	r0, #2
   12ba8:	ldrb	r0, [r0]
   12bac:	ldrb	r1, [r7]
   12bb0:	sub	r1, r1, #92	; 0x5c
   12bb4:	clz	r1, r1
   12bb8:	lsr	r1, r1, #5
   12bbc:	cmp	r0, #0
   12bc0:	addne	r1, r1, #3
   12bc4:	sub	r0, r4, r8
   12bc8:	mov	r5, #0
   12bcc:	cmp	r0, r1
   12bd0:	bcc	12e08 <__assert_fail@plt+0x1a90>
   12bd4:	str	r7, [r9]
   12bd8:	movw	sl, #57756	; 0xe19c
   12bdc:	movt	sl, #2
   12be0:	mov	r5, #0
   12be4:	str	r5, [sl]
   12be8:	bl	11210 <__ctype_b_loc@plt>
   12bec:	ldrb	r1, [r7]
   12bf0:	ldr	r2, [r0]
   12bf4:	add	r1, r2, r1, lsl #1
   12bf8:	ldrb	r1, [r1, #1]
   12bfc:	tst	r1, #16
   12c00:	beq	12e08 <__assert_fail@plt+0x1a90>
   12c04:	add	r1, r7, #1
   12c08:	ldr	r2, [r0]
   12c0c:	mov	r0, #0
   12c10:	mov	r4, #0
   12c14:	ldrb	r3, [r1, r4]
   12c18:	add	r3, r2, r3, lsl #1
   12c1c:	ldrb	r3, [r3, #1]
   12c20:	add	r0, r0, #4
   12c24:	add	r4, r4, #1
   12c28:	tst	r3, #16
   12c2c:	bne	12c14 <__assert_fail@plt+0x189c>
   12c30:	str	r4, [sl]
   12c34:	mov	r5, #0
   12c38:	cmp	r4, #2
   12c3c:	bcc	12e08 <__assert_fail@plt+0x1a90>
   12c40:	cmp	r4, #128	; 0x80
   12c44:	bhi	12e08 <__assert_fail@plt+0x1a90>
   12c48:	ands	r1, r4, #1
   12c4c:	bne	12e08 <__assert_fail@plt+0x1a90>
   12c50:	movw	r1, #57736	; 0xe188
   12c54:	movt	r1, #2
   12c58:	mov	r5, #0
   12c5c:	stm	r1, {r0, r5}
   12c60:	mov	r0, r7
   12c64:	ldrb	r1, [r0, r4]!
   12c68:	cmp	r1, #32
   12c6c:	cmpne	r1, #9
   12c70:	bne	12e08 <__assert_fail@plt+0x1a90>
   12c74:	add	r0, r0, #1
   12c78:	mov	r5, #0
   12c7c:	strb	r5, [r0, #-1]
   12c80:	ldr	r0, [r9]
   12c84:	bl	13014 <__assert_fail@plt+0x1c9c>
   12c88:	cmp	r0, #0
   12c8c:	beq	12e08 <__assert_fail@plt+0x1a90>
   12c90:	add	r0, r8, r4
   12c94:	add	r1, r0, #1
   12c98:	ldr	r2, [sp, #16]
   12c9c:	sub	r2, r8, r2
   12ca0:	add	r2, r2, r4
   12ca4:	cmn	r2, #2
   12ca8:	beq	12e14 <__assert_fail@plt+0x1a9c>
   12cac:	add	r2, r7, r4
   12cb0:	ldrb	r2, [r2, #1]
   12cb4:	cmp	r2, #32
   12cb8:	cmpne	r2, #42	; 0x2a
   12cbc:	bne	12e14 <__assert_fail@plt+0x1a9c>
   12cc0:	movw	r3, #57616	; 0xe110
   12cc4:	movt	r3, #2
   12cc8:	ldr	r7, [r3]
   12ccc:	cmp	r7, #1
   12cd0:	beq	12e30 <__assert_fail@plt+0x1ab8>
   12cd4:	mov	r1, #0
   12cd8:	str	r1, [r3]
   12cdc:	sub	r1, r2, #42	; 0x2a
   12ce0:	clz	r1, r1
   12ce4:	lsr	r1, r1, #5
   12ce8:	ldr	r2, [sp, #8]
   12cec:	str	r1, [r2]
   12cf0:	add	r1, r0, #2
   12cf4:	b	12e30 <__assert_fail@plt+0x1ab8>
   12cf8:	add	sl, r8, #7
   12cfc:	ldrb	r4, [r6, sl]
   12d00:	mov	r5, #0
   12d04:	strb	r5, [r6, sl]
   12d08:	movw	r1, #51387	; 0xc8bb
   12d0c:	movt	r1, #1
   12d10:	mov	r0, r7
   12d14:	bl	110d8 <strcmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	bne	12e08 <__assert_fail@plt+0x1a90>
   12d20:	cmp	r4, #40	; 0x28
   12d24:	moveq	r0, #40	; 0x28
   12d28:	strbeq	r0, [r6, sl]
   12d2c:	addne	sl, r8, #8
   12d30:	movw	r8, #57736	; 0xe188
   12d34:	movt	r8, #2
   12d38:	mov	r1, #0
   12d3c:	mov	r0, #512	; 0x200
   12d40:	strd	r0, [r8]
   12d44:	cmp	r4, #45	; 0x2d
   12d48:	bne	12da0 <__assert_fail@plt+0x1a28>
   12d4c:	mov	r5, #0
   12d50:	str	r5, [sp]
   12d54:	add	r0, r6, sl
   12d58:	add	r1, sp, #20
   12d5c:	add	r3, sp, #24
   12d60:	mov	r2, #0
   12d64:	bl	1b874 <__assert_fail@plt+0xa4fc>
   12d68:	ldr	r2, [sp, #24]
   12d6c:	ldr	r3, [sp, #28]
   12d70:	subs	r7, r2, #1
   12d74:	sbc	r4, r3, #0
   12d78:	tst	r2, #7
   12d7c:	cmpeq	r0, #0
   12d80:	bne	12e08 <__assert_fail@plt+0x1a90>
   12d84:	ldrd	r0, [r8]
   12d88:	subs	r0, r7, r0
   12d8c:	sbcs	r0, r4, r1
   12d90:	bcs	12e08 <__assert_fail@plt+0x1a90>
   12d94:	strd	r2, [r8]
   12d98:	ldr	r0, [sp, #20]
   12d9c:	sub	sl, r0, r6
   12da0:	ldrd	r0, [r8]
   12da4:	lsr	r0, r0, #2
   12da8:	orr	r0, r0, r1, lsl #30
   12dac:	movw	r1, #57756	; 0xe19c
   12db0:	movt	r1, #2
   12db4:	str	r0, [r1]
   12db8:	ldrb	r0, [r6, sl]
   12dbc:	cmp	r0, #32
   12dc0:	addeq	sl, sl, #1
   12dc4:	ldrb	r0, [r6, sl]
   12dc8:	cmp	r0, #40	; 0x28
   12dcc:	mov	r5, #0
   12dd0:	bne	12e08 <__assert_fail@plt+0x1a90>
   12dd4:	mov	r0, #0
   12dd8:	ldr	r1, [sp, #8]
   12ddc:	str	r0, [r1]
   12de0:	ldr	r0, [sp, #12]
   12de4:	str	r0, [sp]
   12de8:	add	r1, sl, #1
   12dec:	add	r0, r6, r1
   12df0:	ldr	r2, [sp, #16]
   12df4:	sub	r1, r2, r1
   12df8:	mov	r2, r9
   12dfc:	ldr	r3, [fp, #8]
   12e00:	bl	12f4c <__assert_fail@plt+0x1bd4>
   12e04:	mov	r5, r0
   12e08:	mov	r0, r5
   12e0c:	sub	sp, fp, #28
   12e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e14:	movw	r0, #57616	; 0xe110
   12e18:	movt	r0, #2
   12e1c:	ldr	r2, [r0]
   12e20:	cmp	r2, #0
   12e24:	beq	12e08 <__assert_fail@plt+0x1a90>
   12e28:	mov	r2, #1
   12e2c:	str	r2, [r0]
   12e30:	add	r0, r6, r1
   12e34:	ldr	r2, [fp, #8]
   12e38:	str	r0, [r2]
   12e3c:	mov	r5, #1
   12e40:	ldr	r2, [sp, #12]
   12e44:	cmp	r2, #0
   12e48:	beq	12e08 <__assert_fail@plt+0x1a90>
   12e4c:	ldr	r2, [sp, #16]
   12e50:	sub	r1, r2, r1
   12e54:	bl	1307c <__assert_fail@plt+0x1d04>
   12e58:	mov	r5, r0
   12e5c:	cmp	r0, #0
   12e60:	movwne	r5, #1
   12e64:	b	12e08 <__assert_fail@plt+0x1a90>
   12e68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e6c:	add	fp, sp, #24
   12e70:	mov	r4, r0
   12e74:	cmp	r1, #0
   12e78:	beq	12f00 <__assert_fail@plt+0x1b88>
   12e7c:	movw	r5, #57724	; 0xe17c
   12e80:	movt	r5, #2
   12e84:	movw	r8, #54550	; 0xd516
   12e88:	movt	r8, #1
   12e8c:	movw	r6, #54553	; 0xd519
   12e90:	movt	r6, #1
   12e94:	movw	r7, #54556	; 0xd51c
   12e98:	movt	r7, #1
   12e9c:	b	12eb0 <__assert_fail@plt+0x1b38>
   12ea0:	ldr	r1, [r5]
   12ea4:	mov	r0, r6
   12ea8:	bl	110c0 <fputs_unlocked@plt>
   12eac:	add	r4, r4, #1
   12eb0:	ldrb	r0, [r4]
   12eb4:	cmp	r0, #12
   12eb8:	ble	12ed8 <__assert_fail@plt+0x1b60>
   12ebc:	cmp	r0, #13
   12ec0:	beq	12ea0 <__assert_fail@plt+0x1b28>
   12ec4:	cmp	r0, #92	; 0x5c
   12ec8:	bne	12ef4 <__assert_fail@plt+0x1b7c>
   12ecc:	ldr	r1, [r5]
   12ed0:	mov	r0, r7
   12ed4:	b	12ea8 <__assert_fail@plt+0x1b30>
   12ed8:	cmp	r0, #10
   12edc:	bne	12eec <__assert_fail@plt+0x1b74>
   12ee0:	ldr	r1, [r5]
   12ee4:	mov	r0, r8
   12ee8:	b	12ea8 <__assert_fail@plt+0x1b30>
   12eec:	cmp	r0, #0
   12ef0:	beq	12f18 <__assert_fail@plt+0x1ba0>
   12ef4:	bl	1136c <putchar_unlocked@plt>
   12ef8:	add	r4, r4, #1
   12efc:	b	12eb0 <__assert_fail@plt+0x1b38>
   12f00:	movw	r0, #57724	; 0xe17c
   12f04:	movt	r0, #2
   12f08:	ldr	r1, [r0]
   12f0c:	mov	r0, r4
   12f10:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f14:	b	110c0 <fputs_unlocked@plt>
   12f18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12f1c:	cmp	r1, #0
   12f20:	bxeq	lr
   12f24:	push	{r4, sl, fp, lr}
   12f28:	add	fp, sp, #8
   12f2c:	movw	r4, #16960	; 0x4240
   12f30:	movt	r4, #15
   12f34:	mov	r2, r4
   12f38:	mov	r3, #0
   12f3c:	bl	1c64c <__assert_fail@plt+0xb2d4>
   12f40:	add	r0, r2, r4
   12f44:	pop	{r4, sl, fp, lr}
   12f48:	bx	lr
   12f4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f50:	add	fp, sp, #24
   12f54:	cmp	r1, #0
   12f58:	beq	13000 <__assert_fail@plt+0x1c88>
   12f5c:	mov	r8, r2
   12f60:	ldr	ip, [fp, #8]
   12f64:	mov	r4, #1
   12f68:	mov	r7, r0
   12f6c:	mov	r6, r7
   12f70:	mov	r5, r4
   12f74:	cmp	r1, r4
   12f78:	addne	r7, r6, r1
   12f7c:	ldrbne	r2, [r7, #-1]
   12f80:	addne	r4, r5, #1
   12f84:	subne	r7, r6, #1
   12f88:	cmpne	r2, #41	; 0x29
   12f8c:	bne	12f6c <__assert_fail@plt+0x1bf4>
   12f90:	add	r6, r6, r1
   12f94:	ldrb	r2, [r6, #-1]
   12f98:	cmp	r2, #41	; 0x29
   12f9c:	bne	13000 <__assert_fail@plt+0x1c88>
   12fa0:	str	r0, [r3]
   12fa4:	cmp	ip, #0
   12fa8:	beq	12fbc <__assert_fail@plt+0x1c44>
   12fac:	sub	r1, r1, r5
   12fb0:	bl	1307c <__assert_fail@plt+0x1d04>
   12fb4:	cmp	r0, #0
   12fb8:	beq	13000 <__assert_fail@plt+0x1c88>
   12fbc:	add	r0, r6, #1
   12fc0:	mov	r1, #0
   12fc4:	strb	r1, [r6, #-1]
   12fc8:	ldrb	r1, [r0, #-1]
   12fcc:	cmp	r1, #9
   12fd0:	cmpne	r1, #32
   12fd4:	bne	12fe0 <__assert_fail@plt+0x1c68>
   12fd8:	add	r0, r0, #1
   12fdc:	b	12fc8 <__assert_fail@plt+0x1c50>
   12fe0:	cmp	r1, #61	; 0x3d
   12fe4:	bne	13000 <__assert_fail@plt+0x1c88>
   12fe8:	ldrb	r1, [r0]
   12fec:	cmp	r1, #32
   12ff0:	cmpne	r1, #9
   12ff4:	bne	13008 <__assert_fail@plt+0x1c90>
   12ff8:	add	r0, r0, #1
   12ffc:	b	12fe8 <__assert_fail@plt+0x1c70>
   13000:	mov	r0, #0
   13004:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13008:	str	r0, [r8]
   1300c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13010:	b	13014 <__assert_fail@plt+0x1c9c>
   13014:	push	{r4, r5, fp, lr}
   13018:	add	fp, sp, #8
   1301c:	mov	r4, r0
   13020:	movw	r5, #57756	; 0xe19c
   13024:	movt	r5, #2
   13028:	ldr	r0, [r5]
   1302c:	cmp	r0, #0
   13030:	beq	1306c <__assert_fail@plt+0x1cf4>
   13034:	bl	11210 <__ctype_b_loc@plt>
   13038:	ldr	r1, [r5]
   1303c:	ldr	r2, [r0]
   13040:	mov	r0, #0
   13044:	mov	r3, #0
   13048:	ldrb	r5, [r4, r3]
   1304c:	add	r5, r2, r5, lsl #1
   13050:	ldrb	r5, [r5, #1]
   13054:	tst	r5, #16
   13058:	beq	13078 <__assert_fail@plt+0x1d00>
   1305c:	add	r3, r3, #1
   13060:	cmp	r3, r1
   13064:	bcc	13048 <__assert_fail@plt+0x1cd0>
   13068:	add	r4, r4, r3
   1306c:	ldrb	r0, [r4]
   13070:	clz	r0, r0
   13074:	lsr	r0, r0, #5
   13078:	pop	{r4, r5, fp, pc}
   1307c:	push	{r4, sl, fp, lr}
   13080:	add	fp, sp, #8
   13084:	cmp	r1, #0
   13088:	mov	lr, r0
   1308c:	beq	13100 <__assert_fail@plt+0x1d88>
   13090:	sub	ip, r1, #1
   13094:	mov	r3, #0
   13098:	mov	lr, r0
   1309c:	b	130b8 <__assert_fail@plt+0x1d40>
   130a0:	cmp	r2, #0
   130a4:	beq	13114 <__assert_fail@plt+0x1d9c>
   130a8:	strb	r2, [lr], #1
   130ac:	add	r3, r3, #1
   130b0:	cmp	r3, r1
   130b4:	bcs	13100 <__assert_fail@plt+0x1d88>
   130b8:	ldrb	r2, [r0, r3]
   130bc:	cmp	r2, #92	; 0x5c
   130c0:	bne	130a0 <__assert_fail@plt+0x1d28>
   130c4:	cmp	r3, ip
   130c8:	beq	13114 <__assert_fail@plt+0x1d9c>
   130cc:	add	r3, r3, #1
   130d0:	ldrb	r4, [r0, r3]
   130d4:	cmp	r4, #92	; 0x5c
   130d8:	beq	130f8 <__assert_fail@plt+0x1d80>
   130dc:	mov	r2, #10
   130e0:	cmp	r4, #110	; 0x6e
   130e4:	beq	130a8 <__assert_fail@plt+0x1d30>
   130e8:	cmp	r4, #114	; 0x72
   130ec:	bne	13114 <__assert_fail@plt+0x1d9c>
   130f0:	mov	r2, #13
   130f4:	b	130a8 <__assert_fail@plt+0x1d30>
   130f8:	mov	r2, #92	; 0x5c
   130fc:	b	130a8 <__assert_fail@plt+0x1d30>
   13100:	add	r1, r0, r1
   13104:	cmp	lr, r1
   13108:	movcc	r1, #0
   1310c:	strbcc	r1, [lr]
   13110:	pop	{r4, sl, fp, pc}
   13114:	mov	r0, #0
   13118:	pop	{r4, sl, fp, pc}
   1311c:	push	{r4, r5, r6, sl, fp, lr}
   13120:	add	fp, sp, #16
   13124:	mov	r5, r1
   13128:	mov	r4, r0
   1312c:	bl	13174 <__assert_fail@plt+0x1dfc>
   13130:	mov	r6, #0
   13134:	add	r0, r5, r6
   13138:	bl	131d0 <__assert_fail@plt+0x1e58>
   1313c:	mov	r2, r4
   13140:	ldr	r3, [r2, r6]!
   13144:	eor	r0, r3, r0
   13148:	str	r0, [r2]
   1314c:	ldr	r0, [r2, #4]
   13150:	eor	r0, r0, r1
   13154:	str	r0, [r2, #4]
   13158:	add	r6, r6, #8
   1315c:	cmp	r6, #64	; 0x40
   13160:	bne	13134 <__assert_fail@plt+0x1dbc>
   13164:	ldrb	r0, [r5]
   13168:	str	r0, [r4, #228]	; 0xe4
   1316c:	mov	r0, #0
   13170:	pop	{r4, r5, r6, sl, fp, pc}
   13174:	push	{r4, sl, fp, lr}
   13178:	add	fp, sp, #8
   1317c:	mov	r4, r0
   13180:	add	r0, r0, #64	; 0x40
   13184:	mov	r1, #0
   13188:	mov	r2, #176	; 0xb0
   1318c:	bl	1127c <memset@plt>
   13190:	movw	r0, #54880	; 0xd660
   13194:	movt	r0, #1
   13198:	add	r1, r0, #16
   1319c:	mov	r2, #48	; 0x30
   131a0:	vld1.64	{d16-d17}, [r1]
   131a4:	add	r1, r4, #16
   131a8:	add	r3, r0, #32
   131ac:	vld1.64	{d18-d19}, [r0], r2
   131b0:	vld1.64	{d20-d21}, [r3]
   131b4:	vld1.64	{d22-d23}, [r0]
   131b8:	vst1.64	{d16-d17}, [r1]
   131bc:	add	r0, r4, #32
   131c0:	vst1.64	{d20-d21}, [r0]
   131c4:	vst1.64	{d18-d19}, [r4], r2
   131c8:	vst1.64	{d22-d23}, [r4]
   131cc:	pop	{r4, sl, fp, pc}
   131d0:	ldr	r2, [r0]
   131d4:	ldr	r1, [r0, #4]
   131d8:	mov	r0, r2
   131dc:	bx	lr
   131e0:	push	{r4, r5, fp, lr}
   131e4:	add	fp, sp, #8
   131e8:	sub	sp, sp, #64	; 0x40
   131ec:	mov	r4, r0
   131f0:	sub	r2, r1, #1
   131f4:	mvn	r0, #0
   131f8:	cmp	r2, #63	; 0x3f
   131fc:	bhi	1325c <__assert_fail@plt+0x1ee4>
   13200:	mov	r0, #1
   13204:	strb	r0, [sp, #3]
   13208:	mov	r0, #256	; 0x100
   1320c:	strh	r0, [sp, #1]
   13210:	strb	r1, [sp]
   13214:	mov	r5, sp
   13218:	orr	r0, r5, #4
   1321c:	bl	13264 <__assert_fail@plt+0x1eec>
   13220:	add	r0, r5, #8
   13224:	bl	13264 <__assert_fail@plt+0x1eec>
   13228:	add	r0, r5, #12
   1322c:	bl	13264 <__assert_fail@plt+0x1eec>
   13230:	vmov.i32	q8, #0	; 0x00000000
   13234:	add	r0, r5, #48	; 0x30
   13238:	vst1.64	{d16-d17}, [r0]
   1323c:	add	r0, r5, #32
   13240:	vst1.64	{d16-d17}, [r0]
   13244:	add	r0, r5, #16
   13248:	vst1.64	{d16-d17}, [r0]
   1324c:	mov	r0, r4
   13250:	mov	r1, r5
   13254:	bl	1311c <__assert_fail@plt+0x1da4>
   13258:	mov	r0, #0
   1325c:	sub	sp, fp, #8
   13260:	pop	{r4, r5, fp, pc}
   13264:	mov	r1, #0
   13268:	str	r1, [r0]
   1326c:	bx	lr
   13270:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13274:	add	fp, sp, #24
   13278:	sub	sp, sp, #192	; 0xc0
   1327c:	mov	r4, r0
   13280:	sub	r0, r1, #1
   13284:	mvn	r7, #0
   13288:	cmp	r0, #63	; 0x3f
   1328c:	bhi	13344 <__assert_fail@plt+0x1fcc>
   13290:	mov	r6, r2
   13294:	cmp	r2, #0
   13298:	beq	13344 <__assert_fail@plt+0x1fcc>
   1329c:	mov	r5, r3
   132a0:	sub	r0, r3, #1
   132a4:	cmp	r0, #63	; 0x3f
   132a8:	bhi	13344 <__assert_fail@plt+0x1fcc>
   132ac:	movw	r0, #257	; 0x101
   132b0:	strh	r0, [fp, #-86]	; 0xffffffaa
   132b4:	strb	r5, [fp, #-87]	; 0xffffffa9
   132b8:	strb	r1, [fp, #-88]	; 0xffffffa8
   132bc:	sub	r7, fp, #88	; 0x58
   132c0:	orr	r0, r7, #4
   132c4:	bl	13264 <__assert_fail@plt+0x1eec>
   132c8:	add	r0, r7, #8
   132cc:	bl	13264 <__assert_fail@plt+0x1eec>
   132d0:	add	r0, r7, #12
   132d4:	bl	13264 <__assert_fail@plt+0x1eec>
   132d8:	vmov.i32	q8, #0	; 0x00000000
   132dc:	add	r0, r7, #48	; 0x30
   132e0:	vst1.64	{d16-d17}, [r0]
   132e4:	add	r0, r7, #32
   132e8:	vst1.64	{d16-d17}, [r0]
   132ec:	add	r0, r7, #16
   132f0:	vst1.64	{d16-d17}, [r0]
   132f4:	mov	r0, r4
   132f8:	mov	r1, r7
   132fc:	bl	1311c <__assert_fail@plt+0x1da4>
   13300:	mov	r8, sp
   13304:	add	r0, r8, r5
   13308:	rsb	r2, r5, #128	; 0x80
   1330c:	mov	r7, #0
   13310:	mov	r1, #0
   13314:	bl	1127c <memset@plt>
   13318:	mov	r0, r8
   1331c:	mov	r1, r6
   13320:	mov	r2, r5
   13324:	bl	11120 <memcpy@plt>
   13328:	mov	r0, r4
   1332c:	mov	r1, r8
   13330:	mov	r2, #128	; 0x80
   13334:	bl	13350 <__assert_fail@plt+0x1fd8>
   13338:	mov	r0, r8
   1333c:	mov	r1, #128	; 0x80
   13340:	bl	13448 <__assert_fail@plt+0x20d0>
   13344:	mov	r0, r7
   13348:	sub	sp, fp, #24
   1334c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13350:	cmp	r2, #0
   13354:	beq	13440 <__assert_fail@plt+0x20c8>
   13358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1335c:	add	fp, sp, #28
   13360:	sub	sp, sp, #4
   13364:	mov	r7, r2
   13368:	mov	r5, r1
   1336c:	mov	r4, r0
   13370:	ldr	sl, [r0, #224]	; 0xe0
   13374:	rsb	r9, sl, #128	; 0x80
   13378:	cmp	r9, r2
   1337c:	bcs	13414 <__assert_fail@plt+0x209c>
   13380:	mov	r0, #0
   13384:	str	r0, [r4, #224]	; 0xe0
   13388:	add	r8, r4, #96	; 0x60
   1338c:	add	r0, r8, sl
   13390:	mov	r1, r5
   13394:	mov	r2, r9
   13398:	bl	11120 <memcpy@plt>
   1339c:	mov	r0, r4
   133a0:	mov	r2, #128	; 0x80
   133a4:	mov	r3, #0
   133a8:	bl	13460 <__assert_fail@plt+0x20e8>
   133ac:	mov	r0, r4
   133b0:	mov	r1, r8
   133b4:	bl	13490 <__assert_fail@plt+0x2118>
   133b8:	sub	r6, r7, r9
   133bc:	add	r5, r5, r9
   133c0:	cmp	r6, #129	; 0x81
   133c4:	bcc	13410 <__assert_fail@plt+0x2098>
   133c8:	add	r7, sl, r7
   133cc:	movw	r0, #257	; 0x101
   133d0:	sub	r0, r7, r0
   133d4:	bic	r8, r0, #127	; 0x7f
   133d8:	mov	r0, r4
   133dc:	mov	r2, #128	; 0x80
   133e0:	mov	r3, #0
   133e4:	bl	13460 <__assert_fail@plt+0x20e8>
   133e8:	mov	r0, r4
   133ec:	mov	r1, r5
   133f0:	bl	13490 <__assert_fail@plt+0x2118>
   133f4:	sub	r6, r6, #128	; 0x80
   133f8:	add	r5, r5, #128	; 0x80
   133fc:	cmp	r6, #128	; 0x80
   13400:	bhi	133d8 <__assert_fail@plt+0x2060>
   13404:	sub	r0, r7, r8
   13408:	sub	r7, r0, #256	; 0x100
   1340c:	b	13414 <__assert_fail@plt+0x209c>
   13410:	mov	r7, r6
   13414:	ldr	r0, [r4, #224]	; 0xe0
   13418:	add	r0, r4, r0
   1341c:	add	r0, r0, #96	; 0x60
   13420:	mov	r1, r5
   13424:	mov	r2, r7
   13428:	bl	11120 <memcpy@plt>
   1342c:	ldr	r0, [r4, #224]	; 0xe0
   13430:	add	r0, r0, r7
   13434:	str	r0, [r4, #224]	; 0xe0
   13438:	sub	sp, fp, #28
   1343c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13440:	mov	r0, #0
   13444:	bx	lr
   13448:	mov	r2, r1
   1344c:	movw	r1, #54944	; 0xd6a0
   13450:	movt	r1, #1
   13454:	ldr	r3, [r1]
   13458:	mov	r1, #0
   1345c:	bx	r3
   13460:	push	{r4, sl, fp, lr}
   13464:	add	fp, sp, #8
   13468:	add	lr, r0, #64	; 0x40
   1346c:	ldm	lr, {r1, ip, lr}
   13470:	ldr	r4, [r0, #76]	; 0x4c
   13474:	adds	r1, r1, r2
   13478:	adcs	r2, ip, r3
   1347c:	adcs	r3, lr, #0
   13480:	adc	r4, r4, #0
   13484:	add	r0, r0, #64	; 0x40
   13488:	stm	r0, {r1, r2, r3, r4}
   1348c:	pop	{r4, sl, fp, pc}
   13490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13494:	add	fp, sp, #28
   13498:	sub	sp, sp, #604	; 0x25c
   1349c:	mov	r4, r1
   134a0:	mov	r8, r0
   134a4:	sub	r5, fp, #288	; 0x120
   134a8:	add	r0, r5, #8
   134ac:	str	r0, [sp, #176]	; 0xb0
   134b0:	add	r0, r5, #16
   134b4:	str	r0, [sp, #224]	; 0xe0
   134b8:	add	r0, r5, #24
   134bc:	str	r0, [sp, #204]	; 0xcc
   134c0:	add	r0, r5, #32
   134c4:	str	r0, [fp, #-292]	; 0xfffffedc
   134c8:	add	r0, r5, #40	; 0x28
   134cc:	str	r0, [sp, #172]	; 0xac
   134d0:	add	r0, r5, #48	; 0x30
   134d4:	str	r0, [sp, #188]	; 0xbc
   134d8:	add	r0, r5, #56	; 0x38
   134dc:	str	r0, [sp, #200]	; 0xc8
   134e0:	add	r0, r5, #64	; 0x40
   134e4:	str	r0, [sp, #196]	; 0xc4
   134e8:	add	r0, r5, #72	; 0x48
   134ec:	str	r0, [sp, #208]	; 0xd0
   134f0:	add	r0, r5, #80	; 0x50
   134f4:	str	r0, [sp, #168]	; 0xa8
   134f8:	add	r0, r5, #88	; 0x58
   134fc:	str	r0, [sp, #184]	; 0xb8
   13500:	add	r0, r5, #96	; 0x60
   13504:	str	r0, [sp, #180]	; 0xb4
   13508:	add	r0, r5, #104	; 0x68
   1350c:	str	r0, [sp, #192]	; 0xc0
   13510:	add	r0, r5, #112	; 0x70
   13514:	str	r0, [sp, #128]	; 0x80
   13518:	add	r0, r5, #120	; 0x78
   1351c:	str	r0, [fp, #-296]	; 0xfffffed8
   13520:	sub	r6, fp, #160	; 0xa0
   13524:	add	r0, r6, #8
   13528:	str	r0, [sp, #316]	; 0x13c
   1352c:	add	r0, r6, #16
   13530:	str	r0, [sp, #244]	; 0xf4
   13534:	add	r0, r6, #24
   13538:	str	r0, [sp, #276]	; 0x114
   1353c:	add	r0, r6, #32
   13540:	str	r0, [sp, #268]	; 0x10c
   13544:	add	r0, r6, #40	; 0x28
   13548:	str	r0, [fp, #-300]	; 0xfffffed4
   1354c:	add	r0, r6, #48	; 0x30
   13550:	str	r0, [fp, #-312]	; 0xfffffec8
   13554:	add	r0, r6, #56	; 0x38
   13558:	str	r0, [fp, #-308]	; 0xfffffecc
   1355c:	add	r0, r6, #64	; 0x40
   13560:	str	r0, [sp, #252]	; 0xfc
   13564:	add	r0, r6, #72	; 0x48
   13568:	str	r0, [sp, #272]	; 0x110
   1356c:	add	r0, r6, #80	; 0x50
   13570:	str	r0, [sp, #220]	; 0xdc
   13574:	add	r0, r6, #88	; 0x58
   13578:	str	r0, [sp, #248]	; 0xf8
   1357c:	add	r0, r6, #96	; 0x60
   13580:	str	r0, [sp, #300]	; 0x12c
   13584:	add	r0, r6, #104	; 0x68
   13588:	str	r0, [sp, #256]	; 0x100
   1358c:	add	r0, r6, #112	; 0x70
   13590:	str	r0, [sp, #288]	; 0x120
   13594:	add	r0, r6, #120	; 0x78
   13598:	str	r0, [sp, #292]	; 0x124
   1359c:	add	r9, r8, #64	; 0x40
   135a0:	add	r0, r8, #72	; 0x48
   135a4:	str	r0, [sp, #312]	; 0x138
   135a8:	add	r0, r8, #80	; 0x50
   135ac:	str	r0, [fp, #-304]	; 0xfffffed0
   135b0:	add	sl, r8, #88	; 0x58
   135b4:	mov	r7, #0
   135b8:	add	r0, r4, r7
   135bc:	bl	131d0 <__assert_fail@plt+0x1e58>
   135c0:	str	r0, [r6, r7]
   135c4:	add	r0, r6, r7
   135c8:	str	r1, [r0, #4]
   135cc:	add	r7, r7, #8
   135d0:	cmp	r7, #128	; 0x80
   135d4:	bne	135b8 <__assert_fail@plt+0x2240>
   135d8:	add	r0, r8, #32
   135dc:	mov	r1, #48	; 0x30
   135e0:	mov	r2, r8
   135e4:	vld1.64	{d16-d17}, [r2], r1
   135e8:	vld1.64	{d18-d19}, [r0]
   135ec:	add	r0, r8, #16
   135f0:	vld1.64	{d20-d21}, [r0]
   135f4:	vld1.64	{d22-d23}, [r2]
   135f8:	ldr	r2, [fp, #-292]	; 0xfffffedc
   135fc:	vst1.64	{d18-d19}, [r2]
   13600:	ldr	r0, [sp, #224]	; 0xe0
   13604:	vst1.64	{d20-d21}, [r0]
   13608:	mov	r0, r5
   1360c:	vst1.64	{d16-d17}, [r0], r1
   13610:	vst1.64	{d22-d23}, [r0]
   13614:	movw	r1, #62778	; 0xf53a
   13618:	movt	r1, #42319	; 0xa54f
   1361c:	movw	r3, #14065	; 0x36f1
   13620:	movt	r3, #24349	; 0x5f1d
   13624:	ldr	r0, [sp, #184]	; 0xb8
   13628:	str	r3, [r0]
   1362c:	str	r1, [r0, #4]
   13630:	ldrd	r6, [r2]
   13634:	ldr	r0, [fp, #-288]	; 0xfffffee0
   13638:	ldr	r1, [fp, #-284]	; 0xfffffee4
   1363c:	adds	r0, r6, r0
   13640:	adc	r1, r7, r1
   13644:	ldr	r2, [fp, #-160]	; 0xffffff60
   13648:	ldr	r3, [fp, #-156]	; 0xffffff64
   1364c:	adds	r5, r0, r2
   13650:	adc	r2, r1, r3
   13654:	str	r2, [sp, #304]	; 0x130
   13658:	ldrd	r0, [r9]
   1365c:	eor	r1, r1, r2
   13660:	movw	r2, #21119	; 0x527f
   13664:	movt	r2, #20750	; 0x510e
   13668:	eor	r1, r1, r2
   1366c:	eor	r0, r0, r5
   13670:	movw	r2, #33489	; 0x82d1
   13674:	movt	r2, #44518	; 0xade6
   13678:	eor	r0, r0, r2
   1367c:	ldrd	r2, [sl]
   13680:	str	r3, [sp, #164]	; 0xa4
   13684:	str	r2, [sp, #228]	; 0xe4
   13688:	ldr	r2, [fp, #-304]	; 0xfffffed0
   1368c:	ldrd	r2, [r2]
   13690:	str	r3, [sp, #308]	; 0x134
   13694:	str	r2, [fp, #-304]	; 0xfffffed0
   13698:	ldr	r2, [sp, #312]	; 0x138
   1369c:	ldrd	r2, [r2]
   136a0:	str	r3, [sp, #260]	; 0x104
   136a4:	str	r2, [sp, #264]	; 0x108
   136a8:	mov	r2, #32
   136ac:	bl	18da8 <__assert_fail@plt+0x7a30>
   136b0:	mov	r4, r0
   136b4:	mov	r9, r1
   136b8:	movw	r0, #51464	; 0xc908
   136bc:	movt	r0, #62396	; 0xf3bc
   136c0:	adds	r2, r4, r0
   136c4:	str	r2, [sp, #284]	; 0x11c
   136c8:	movw	r0, #58983	; 0xe667
   136cc:	movt	r0, #27145	; 0x6a09
   136d0:	str	r8, [sp, #132]	; 0x84
   136d4:	adc	r8, r1, r0
   136d8:	eor	r1, r8, r7
   136dc:	eor	r0, r2, r6
   136e0:	mov	r2, #24
   136e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   136e8:	mov	sl, r0
   136ec:	mov	r7, r1
   136f0:	adds	r0, r0, r5
   136f4:	ldr	r1, [sp, #304]	; 0x130
   136f8:	adc	r1, r7, r1
   136fc:	ldr	r2, [sp, #316]	; 0x13c
   13700:	ldr	r3, [r2]
   13704:	ldr	r2, [r2, #4]
   13708:	str	r3, [sp, #312]	; 0x138
   1370c:	str	r2, [sp, #316]	; 0x13c
   13710:	adds	r3, r0, r3
   13714:	str	r3, [sp, #160]	; 0xa0
   13718:	adc	r0, r1, r2
   1371c:	str	r0, [sp, #304]	; 0x130
   13720:	eor	r1, r0, r9
   13724:	eor	r0, r3, r4
   13728:	mov	r2, #16
   1372c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13730:	mov	r5, r0
   13734:	str	r0, [sp, #296]	; 0x128
   13738:	mov	r6, r1
   1373c:	str	r1, [sp, #232]	; 0xe8
   13740:	ldr	r0, [sp, #284]	; 0x11c
   13744:	adds	r3, r5, r0
   13748:	str	r3, [sp, #280]	; 0x118
   1374c:	adc	r4, r1, r8
   13750:	str	r4, [sp, #284]	; 0x11c
   13754:	eor	r1, r4, r7
   13758:	eor	r0, r3, sl
   1375c:	ldr	r2, [sp, #180]	; 0xb4
   13760:	stm	r2, {r5, r6}
   13764:	ldr	r2, [sp, #196]	; 0xc4
   13768:	stm	r2, {r3, r4}
   1376c:	mov	r2, #63	; 0x3f
   13770:	bl	18da8 <__assert_fail@plt+0x7a30>
   13774:	str	r0, [sp, #144]	; 0x90
   13778:	str	r1, [sp, #148]	; 0x94
   1377c:	ldr	r2, [fp, #-292]	; 0xfffffedc
   13780:	strd	r0, [r2]
   13784:	ldr	r0, [sp, #176]	; 0xb0
   13788:	ldrd	r0, [r0]
   1378c:	ldr	r2, [sp, #172]	; 0xac
   13790:	ldrd	r6, [r2]
   13794:	adds	r0, r6, r0
   13798:	adc	r1, r7, r1
   1379c:	ldr	r2, [sp, #244]	; 0xf4
   137a0:	ldr	r3, [r2]
   137a4:	ldr	r2, [r2, #4]
   137a8:	str	r3, [sp, #236]	; 0xec
   137ac:	str	r2, [sp, #240]	; 0xf0
   137b0:	adds	r3, r0, r3
   137b4:	str	r3, [sp, #216]	; 0xd8
   137b8:	adc	r4, r1, r2
   137bc:	ldr	r0, [sp, #260]	; 0x104
   137c0:	eor	r0, r0, r4
   137c4:	movw	r1, #26764	; 0x688c
   137c8:	movt	r1, #39685	; 0x9b05
   137cc:	eor	r1, r0, r1
   137d0:	ldr	r0, [sp, #264]	; 0x108
   137d4:	eor	r0, r0, r3
   137d8:	movw	r2, #27679	; 0x6c1f
   137dc:	movt	r2, #11070	; 0x2b3e
   137e0:	eor	r0, r0, r2
   137e4:	mov	r2, #32
   137e8:	bl	18da8 <__assert_fail@plt+0x7a30>
   137ec:	mov	sl, r0
   137f0:	mov	r5, r1
   137f4:	movw	r0, #42811	; 0xa73b
   137f8:	movt	r0, #33994	; 0x84ca
   137fc:	adds	r2, sl, r0
   13800:	str	r2, [sp, #156]	; 0x9c
   13804:	movw	r0, #44677	; 0xae85
   13808:	movt	r0, #47975	; 0xbb67
   1380c:	adc	r8, r1, r0
   13810:	eor	r1, r8, r7
   13814:	eor	r0, r2, r6
   13818:	mov	r2, #24
   1381c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13820:	mov	r9, r0
   13824:	mov	r7, r1
   13828:	ldr	r0, [sp, #216]	; 0xd8
   1382c:	adds	r0, r9, r0
   13830:	adc	r1, r1, r4
   13834:	ldr	r2, [sp, #276]	; 0x114
   13838:	ldrd	r2, [r2]
   1383c:	adds	r2, r0, r2
   13840:	str	r2, [sp, #260]	; 0x104
   13844:	adc	r0, r1, r3
   13848:	str	r0, [sp, #264]	; 0x108
   1384c:	eor	r1, r0, r5
   13850:	eor	r0, r2, sl
   13854:	mov	r2, #16
   13858:	bl	18da8 <__assert_fail@plt+0x7a30>
   1385c:	mov	r4, r0
   13860:	str	r0, [sp, #216]	; 0xd8
   13864:	mov	r6, r1
   13868:	str	r1, [sp, #212]	; 0xd4
   1386c:	ldr	r0, [sp, #156]	; 0x9c
   13870:	adds	r3, r4, r0
   13874:	str	r3, [sp, #120]	; 0x78
   13878:	adc	r5, r1, r8
   1387c:	str	r5, [sp, #124]	; 0x7c
   13880:	eor	r1, r5, r7
   13884:	eor	r0, r3, r9
   13888:	ldr	r2, [sp, #192]	; 0xc0
   1388c:	stm	r2, {r4, r6}
   13890:	ldr	r2, [sp, #208]	; 0xd0
   13894:	stm	r2, {r3, r5}
   13898:	mov	r2, #63	; 0x3f
   1389c:	bl	18da8 <__assert_fail@plt+0x7a30>
   138a0:	str	r0, [sp, #140]	; 0x8c
   138a4:	str	r1, [sp, #136]	; 0x88
   138a8:	ldr	r2, [sp, #160]	; 0xa0
   138ac:	adds	r0, r0, r2
   138b0:	str	r0, [sp, #116]	; 0x74
   138b4:	ldr	r0, [sp, #304]	; 0x130
   138b8:	adc	r0, r1, r0
   138bc:	str	r0, [sp, #112]	; 0x70
   138c0:	ldr	r0, [sp, #224]	; 0xe0
   138c4:	ldrd	r0, [r0]
   138c8:	ldr	r2, [sp, #188]	; 0xbc
   138cc:	ldrd	r6, [r2]
   138d0:	adds	r0, r6, r0
   138d4:	adc	r1, r7, r1
   138d8:	ldr	r2, [sp, #268]	; 0x10c
   138dc:	ldr	r3, [r2]
   138e0:	ldr	r2, [r2, #4]
   138e4:	str	r3, [sp, #152]	; 0x98
   138e8:	str	r2, [sp, #156]	; 0x9c
   138ec:	adds	r3, r0, r3
   138f0:	str	r3, [sp, #304]	; 0x130
   138f4:	adc	r9, r1, r2
   138f8:	ldr	r0, [sp, #308]	; 0x134
   138fc:	eor	r0, r0, r9
   13900:	movw	r1, #55723	; 0xd9ab
   13904:	movt	r1, #8067	; 0x1f83
   13908:	eor	r1, r0, r1
   1390c:	ldr	r0, [fp, #-304]	; 0xfffffed0
   13910:	eor	r0, r0, r3
   13914:	movw	r2, #48491	; 0xbd6b
   13918:	movt	r2, #64321	; 0xfb41
   1391c:	eor	r0, r0, r2
   13920:	mov	r2, #32
   13924:	bl	18da8 <__assert_fail@plt+0x7a30>
   13928:	mov	r4, r0
   1392c:	mov	r5, r1
   13930:	movw	r0, #63531	; 0xf82b
   13934:	movt	r0, #65172	; 0xfe94
   13938:	adds	sl, r4, r0
   1393c:	movw	r0, #62322	; 0xf372
   13940:	movt	r0, #15470	; 0x3c6e
   13944:	adc	r8, r1, r0
   13948:	eor	r1, r8, r7
   1394c:	eor	r0, sl, r6
   13950:	mov	r2, #24
   13954:	bl	18da8 <__assert_fail@plt+0x7a30>
   13958:	mov	r6, r0
   1395c:	mov	r7, r1
   13960:	ldr	r0, [sp, #304]	; 0x130
   13964:	adds	r0, r6, r0
   13968:	adc	r1, r1, r9
   1396c:	ldr	r2, [fp, #-300]	; 0xfffffed4
   13970:	ldr	r3, [r2]
   13974:	ldr	r2, [r2, #4]
   13978:	str	r3, [fp, #-304]	; 0xfffffed0
   1397c:	str	r2, [fp, #-300]	; 0xfffffed4
   13980:	adds	r3, r0, r3
   13984:	str	r3, [sp, #76]	; 0x4c
   13988:	adc	r0, r1, r2
   1398c:	str	r0, [sp, #84]	; 0x54
   13990:	eor	r1, r0, r5
   13994:	eor	r0, r3, r4
   13998:	mov	r2, #16
   1399c:	bl	18da8 <__assert_fail@plt+0x7a30>
   139a0:	str	r0, [sp, #92]	; 0x5c
   139a4:	str	r1, [sp, #88]	; 0x58
   139a8:	adds	r2, r0, sl
   139ac:	str	r2, [sp, #100]	; 0x64
   139b0:	adc	r0, r1, r8
   139b4:	str	r0, [sp, #104]	; 0x68
   139b8:	eor	r1, r0, r7
   139bc:	eor	r0, r2, r6
   139c0:	mov	r2, #63	; 0x3f
   139c4:	bl	18da8 <__assert_fail@plt+0x7a30>
   139c8:	str	r0, [sp, #108]	; 0x6c
   139cc:	str	r1, [sp, #96]	; 0x60
   139d0:	ldr	r0, [sp, #204]	; 0xcc
   139d4:	ldrd	r0, [r0]
   139d8:	ldr	r2, [sp, #200]	; 0xc8
   139dc:	ldrd	r6, [r2]
   139e0:	adds	r0, r6, r0
   139e4:	adc	r1, r7, r1
   139e8:	ldr	r2, [fp, #-312]	; 0xfffffec8
   139ec:	ldr	r3, [r2]
   139f0:	ldr	r2, [r2, #4]
   139f4:	str	r3, [sp, #304]	; 0x130
   139f8:	str	r2, [sp, #308]	; 0x134
   139fc:	adds	r8, r0, r3
   13a00:	adc	r1, r1, r2
   13a04:	str	r1, [fp, #-312]	; 0xfffffec8
   13a08:	ldr	r0, [sp, #164]	; 0xa4
   13a0c:	eor	r0, r0, r1
   13a10:	movw	r1, #52505	; 0xcd19
   13a14:	movt	r1, #23520	; 0x5be0
   13a18:	eor	r1, r0, r1
   13a1c:	ldr	r0, [sp, #228]	; 0xe4
   13a20:	eor	r0, r0, r8
   13a24:	movw	r2, #8569	; 0x2179
   13a28:	movt	r2, #4990	; 0x137e
   13a2c:	eor	r0, r0, r2
   13a30:	mov	r2, #32
   13a34:	bl	18da8 <__assert_fail@plt+0x7a30>
   13a38:	mov	r4, r0
   13a3c:	mov	r5, r1
   13a40:	movw	r0, #14065	; 0x36f1
   13a44:	movt	r0, #24349	; 0x5f1d
   13a48:	adds	sl, r4, r0
   13a4c:	movw	r0, #62778	; 0xf53a
   13a50:	movt	r0, #42319	; 0xa54f
   13a54:	adc	r9, r1, r0
   13a58:	eor	r1, r9, r7
   13a5c:	eor	r0, sl, r6
   13a60:	mov	r2, #24
   13a64:	bl	18da8 <__assert_fail@plt+0x7a30>
   13a68:	mov	r7, r0
   13a6c:	mov	r6, r1
   13a70:	adds	r0, r0, r8
   13a74:	ldr	r1, [fp, #-312]	; 0xfffffec8
   13a78:	adc	r1, r6, r1
   13a7c:	ldr	r2, [fp, #-308]	; 0xfffffecc
   13a80:	ldr	r3, [r2]
   13a84:	ldr	r2, [r2, #4]
   13a88:	str	r3, [fp, #-312]	; 0xfffffec8
   13a8c:	str	r2, [fp, #-308]	; 0xfffffecc
   13a90:	adds	r3, r0, r3
   13a94:	str	r3, [sp, #28]
   13a98:	adc	r0, r1, r2
   13a9c:	str	r0, [sp, #44]	; 0x2c
   13aa0:	eor	r1, r0, r5
   13aa4:	eor	r0, r3, r4
   13aa8:	mov	r2, #16
   13aac:	bl	18da8 <__assert_fail@plt+0x7a30>
   13ab0:	mov	r4, r0
   13ab4:	mov	r8, r1
   13ab8:	adds	r2, r0, sl
   13abc:	str	r2, [sp, #68]	; 0x44
   13ac0:	adc	r0, r1, r9
   13ac4:	str	r0, [sp, #228]	; 0xe4
   13ac8:	eor	r1, r0, r6
   13acc:	eor	r0, r2, r7
   13ad0:	mov	r2, #63	; 0x3f
   13ad4:	bl	18da8 <__assert_fail@plt+0x7a30>
   13ad8:	str	r0, [sp, #60]	; 0x3c
   13adc:	str	r1, [sp, #56]	; 0x38
   13ae0:	ldr	r0, [sp, #252]	; 0xfc
   13ae4:	ldr	r1, [r0]
   13ae8:	ldr	r0, [r0, #4]
   13aec:	str	r1, [sp, #160]	; 0xa0
   13af0:	str	r0, [sp, #164]	; 0xa4
   13af4:	ldr	r2, [sp, #116]	; 0x74
   13af8:	adds	r9, r2, r1
   13afc:	ldr	r1, [sp, #112]	; 0x70
   13b00:	adc	sl, r1, r0
   13b04:	eor	r1, sl, r8
   13b08:	eor	r0, r9, r4
   13b0c:	mov	r2, #32
   13b10:	bl	18da8 <__assert_fail@plt+0x7a30>
   13b14:	mov	r4, r0
   13b18:	mov	r6, r1
   13b1c:	ldr	r0, [sp, #100]	; 0x64
   13b20:	adds	r7, r4, r0
   13b24:	ldr	r0, [sp, #104]	; 0x68
   13b28:	adc	r1, r1, r0
   13b2c:	str	r1, [sp, #104]	; 0x68
   13b30:	ldr	r0, [sp, #136]	; 0x88
   13b34:	eor	r1, r1, r0
   13b38:	ldr	r0, [sp, #140]	; 0x8c
   13b3c:	eor	r0, r7, r0
   13b40:	mov	r2, #24
   13b44:	bl	18da8 <__assert_fail@plt+0x7a30>
   13b48:	mov	r8, r0
   13b4c:	mov	r5, r1
   13b50:	adds	r0, r0, r9
   13b54:	adc	r1, r1, sl
   13b58:	ldr	r2, [sp, #272]	; 0x110
   13b5c:	ldr	r3, [r2]
   13b60:	ldr	r2, [r2, #4]
   13b64:	str	r3, [sp, #112]	; 0x70
   13b68:	str	r2, [sp, #116]	; 0x74
   13b6c:	adds	r3, r0, r3
   13b70:	str	r3, [sp, #36]	; 0x24
   13b74:	adc	r0, r1, r2
   13b78:	str	r0, [sp, #48]	; 0x30
   13b7c:	eor	r1, r0, r6
   13b80:	eor	r0, r3, r4
   13b84:	mov	r2, #16
   13b88:	bl	18da8 <__assert_fail@plt+0x7a30>
   13b8c:	mov	r3, r0
   13b90:	str	r0, [sp, #140]	; 0x8c
   13b94:	mov	r6, r1
   13b98:	str	r1, [sp, #136]	; 0x88
   13b9c:	adds	r4, r0, r7
   13ba0:	str	r4, [sp, #100]	; 0x64
   13ba4:	ldr	r0, [sp, #104]	; 0x68
   13ba8:	adc	r7, r1, r0
   13bac:	str	r7, [sp, #104]	; 0x68
   13bb0:	eor	r1, r7, r5
   13bb4:	eor	r0, r4, r8
   13bb8:	ldr	r2, [fp, #-296]	; 0xfffffed8
   13bbc:	stm	r2, {r3, r6}
   13bc0:	ldr	r2, [sp, #168]	; 0xa8
   13bc4:	stm	r2, {r4, r7}
   13bc8:	mov	r2, #63	; 0x3f
   13bcc:	bl	18da8 <__assert_fail@plt+0x7a30>
   13bd0:	str	r0, [sp, #80]	; 0x50
   13bd4:	str	r1, [sp, #72]	; 0x48
   13bd8:	ldr	r0, [sp, #260]	; 0x104
   13bdc:	ldr	r6, [sp, #108]	; 0x6c
   13be0:	adds	r0, r6, r0
   13be4:	ldr	r1, [sp, #264]	; 0x108
   13be8:	ldr	r7, [sp, #96]	; 0x60
   13bec:	adc	r1, r7, r1
   13bf0:	ldr	r2, [sp, #220]	; 0xdc
   13bf4:	ldr	r3, [r2]
   13bf8:	ldr	r2, [r2, #4]
   13bfc:	str	r3, [sp, #260]	; 0x104
   13c00:	str	r2, [sp, #264]	; 0x108
   13c04:	adds	r8, r0, r3
   13c08:	adc	r9, r1, r2
   13c0c:	ldr	r0, [sp, #232]	; 0xe8
   13c10:	eor	r1, r9, r0
   13c14:	ldr	r0, [sp, #296]	; 0x128
   13c18:	eor	r0, r8, r0
   13c1c:	mov	r2, #32
   13c20:	bl	18da8 <__assert_fail@plt+0x7a30>
   13c24:	mov	r4, r0
   13c28:	mov	r5, r1
   13c2c:	ldr	r0, [sp, #68]	; 0x44
   13c30:	adds	sl, r4, r0
   13c34:	ldr	r0, [sp, #228]	; 0xe4
   13c38:	adc	r0, r1, r0
   13c3c:	str	r0, [sp, #296]	; 0x128
   13c40:	eor	r1, r0, r7
   13c44:	eor	r0, sl, r6
   13c48:	mov	r2, #24
   13c4c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13c50:	mov	r7, r0
   13c54:	mov	r6, r1
   13c58:	adds	r0, r0, r8
   13c5c:	adc	r1, r1, r9
   13c60:	ldr	r2, [sp, #248]	; 0xf8
   13c64:	ldr	r3, [r2]
   13c68:	ldr	r2, [r2, #4]
   13c6c:	str	r3, [sp, #228]	; 0xe4
   13c70:	str	r2, [sp, #232]	; 0xe8
   13c74:	adds	r3, r0, r3
   13c78:	str	r3, [sp, #24]
   13c7c:	adc	r0, r1, r2
   13c80:	str	r0, [sp, #32]
   13c84:	eor	r1, r0, r5
   13c88:	eor	r0, r3, r4
   13c8c:	mov	r2, #16
   13c90:	bl	18da8 <__assert_fail@plt+0x7a30>
   13c94:	str	r0, [sp, #16]
   13c98:	str	r1, [sp, #8]
   13c9c:	adds	r2, r0, sl
   13ca0:	str	r2, [sp, #96]	; 0x60
   13ca4:	ldr	r0, [sp, #296]	; 0x128
   13ca8:	adc	r0, r1, r0
   13cac:	str	r0, [sp, #108]	; 0x6c
   13cb0:	eor	r1, r0, r6
   13cb4:	eor	r0, r2, r7
   13cb8:	mov	r2, #63	; 0x3f
   13cbc:	bl	18da8 <__assert_fail@plt+0x7a30>
   13cc0:	str	r0, [sp, #68]	; 0x44
   13cc4:	str	r1, [sp, #64]	; 0x40
   13cc8:	ldr	r0, [sp, #76]	; 0x4c
   13ccc:	ldr	r4, [sp, #60]	; 0x3c
   13cd0:	adds	r0, r4, r0
   13cd4:	ldr	r1, [sp, #84]	; 0x54
   13cd8:	ldr	r7, [sp, #56]	; 0x38
   13cdc:	adc	r1, r7, r1
   13ce0:	ldr	r2, [sp, #300]	; 0x12c
   13ce4:	ldr	r3, [r2]
   13ce8:	ldr	r2, [r2, #4]
   13cec:	str	r3, [sp, #296]	; 0x128
   13cf0:	str	r2, [sp, #300]	; 0x12c
   13cf4:	adds	r8, r0, r3
   13cf8:	adc	r9, r1, r2
   13cfc:	ldr	r0, [sp, #212]	; 0xd4
   13d00:	eor	r1, r9, r0
   13d04:	ldr	r0, [sp, #216]	; 0xd8
   13d08:	eor	r0, r8, r0
   13d0c:	mov	r2, #32
   13d10:	bl	18da8 <__assert_fail@plt+0x7a30>
   13d14:	mov	r5, r0
   13d18:	mov	r6, r1
   13d1c:	ldr	r0, [sp, #280]	; 0x118
   13d20:	adds	sl, r5, r0
   13d24:	ldr	r0, [sp, #284]	; 0x11c
   13d28:	adc	r0, r1, r0
   13d2c:	str	r0, [sp, #284]	; 0x11c
   13d30:	eor	r1, r0, r7
   13d34:	eor	r0, sl, r4
   13d38:	mov	r2, #24
   13d3c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13d40:	mov	r4, r0
   13d44:	mov	r7, r1
   13d48:	adds	r0, r0, r8
   13d4c:	adc	r1, r1, r9
   13d50:	ldr	r2, [sp, #256]	; 0x100
   13d54:	ldr	r3, [r2]
   13d58:	ldr	r2, [r2, #4]
   13d5c:	str	r3, [sp, #212]	; 0xd4
   13d60:	str	r2, [sp, #216]	; 0xd8
   13d64:	adds	r3, r0, r3
   13d68:	str	r3, [sp, #40]	; 0x28
   13d6c:	adc	r0, r1, r2
   13d70:	str	r0, [sp, #52]	; 0x34
   13d74:	eor	r1, r0, r6
   13d78:	eor	r0, r3, r5
   13d7c:	mov	r2, #16
   13d80:	bl	18da8 <__assert_fail@plt+0x7a30>
   13d84:	str	r0, [sp, #4]
   13d88:	str	r1, [sp]
   13d8c:	adds	r2, r0, sl
   13d90:	str	r2, [sp, #76]	; 0x4c
   13d94:	ldr	r0, [sp, #284]	; 0x11c
   13d98:	adc	r0, r1, r0
   13d9c:	str	r0, [sp, #84]	; 0x54
   13da0:	eor	r1, r0, r7
   13da4:	eor	r0, r2, r4
   13da8:	mov	r2, #63	; 0x3f
   13dac:	bl	18da8 <__assert_fail@plt+0x7a30>
   13db0:	str	r0, [sp, #60]	; 0x3c
   13db4:	str	r1, [sp, #56]	; 0x38
   13db8:	ldr	r6, [sp, #144]	; 0x90
   13dbc:	ldr	r0, [sp, #28]
   13dc0:	adds	r0, r0, r6
   13dc4:	ldr	r7, [sp, #148]	; 0x94
   13dc8:	ldr	r1, [sp, #44]	; 0x2c
   13dcc:	adc	r1, r1, r7
   13dd0:	ldr	r2, [sp, #288]	; 0x120
   13dd4:	ldr	r3, [r2]
   13dd8:	ldr	r2, [r2, #4]
   13ddc:	str	r3, [sp, #280]	; 0x118
   13de0:	str	r2, [sp, #284]	; 0x11c
   13de4:	adds	r8, r0, r3
   13de8:	adc	sl, r1, r2
   13dec:	ldr	r0, [sp, #88]	; 0x58
   13df0:	eor	r1, sl, r0
   13df4:	ldr	r0, [sp, #92]	; 0x5c
   13df8:	eor	r0, r8, r0
   13dfc:	mov	r2, #32
   13e00:	bl	18da8 <__assert_fail@plt+0x7a30>
   13e04:	mov	r4, r0
   13e08:	mov	r5, r1
   13e0c:	ldr	r0, [sp, #120]	; 0x78
   13e10:	adds	r9, r4, r0
   13e14:	ldr	r0, [sp, #124]	; 0x7c
   13e18:	adc	r0, r1, r0
   13e1c:	str	r0, [sp, #124]	; 0x7c
   13e20:	eor	r1, r0, r7
   13e24:	eor	r0, r9, r6
   13e28:	mov	r2, #24
   13e2c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13e30:	mov	r7, r0
   13e34:	mov	r6, r1
   13e38:	adds	r0, r0, r8
   13e3c:	adc	r1, r1, sl
   13e40:	ldr	r2, [sp, #292]	; 0x124
   13e44:	ldr	r3, [r2]
   13e48:	ldr	r2, [r2, #4]
   13e4c:	str	r3, [sp, #288]	; 0x120
   13e50:	str	r2, [sp, #292]	; 0x124
   13e54:	adds	r3, r0, r3
   13e58:	str	r3, [sp, #28]
   13e5c:	adc	r0, r1, r2
   13e60:	str	r0, [sp, #44]	; 0x2c
   13e64:	eor	r1, r0, r5
   13e68:	eor	r0, r3, r4
   13e6c:	mov	r2, #16
   13e70:	bl	18da8 <__assert_fail@plt+0x7a30>
   13e74:	str	r0, [sp, #20]
   13e78:	str	r1, [sp, #12]
   13e7c:	adds	r2, r0, r9
   13e80:	str	r2, [sp, #88]	; 0x58
   13e84:	ldr	r0, [sp, #124]	; 0x7c
   13e88:	adc	r0, r1, r0
   13e8c:	str	r0, [sp, #120]	; 0x78
   13e90:	eor	r1, r0, r6
   13e94:	eor	r0, r2, r7
   13e98:	mov	r2, #63	; 0x3f
   13e9c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13ea0:	mov	r6, r0
   13ea4:	mov	r7, r1
   13ea8:	ldr	r0, [sp, #280]	; 0x118
   13eac:	ldr	r1, [sp, #36]	; 0x24
   13eb0:	adds	r0, r0, r1
   13eb4:	ldr	r1, [sp, #284]	; 0x11c
   13eb8:	ldr	r2, [sp, #48]	; 0x30
   13ebc:	adc	r1, r1, r2
   13ec0:	adds	r8, r0, r6
   13ec4:	adc	r9, r1, r7
   13ec8:	ldr	r0, [sp, #8]
   13ecc:	eor	r1, r9, r0
   13ed0:	ldr	r0, [sp, #16]
   13ed4:	eor	r0, r8, r0
   13ed8:	mov	r2, #32
   13edc:	bl	18da8 <__assert_fail@plt+0x7a30>
   13ee0:	mov	r4, r0
   13ee4:	mov	r5, r1
   13ee8:	ldr	r0, [sp, #76]	; 0x4c
   13eec:	adds	sl, r4, r0
   13ef0:	ldr	r0, [sp, #84]	; 0x54
   13ef4:	adc	r0, r1, r0
   13ef8:	str	r0, [sp, #148]	; 0x94
   13efc:	eor	r1, r0, r7
   13f00:	eor	r0, sl, r6
   13f04:	mov	r2, #24
   13f08:	bl	18da8 <__assert_fail@plt+0x7a30>
   13f0c:	mov	r6, r0
   13f10:	mov	r7, r1
   13f14:	ldr	r0, [sp, #260]	; 0x104
   13f18:	adds	r0, r8, r0
   13f1c:	ldr	r1, [sp, #264]	; 0x108
   13f20:	adc	r1, r9, r1
   13f24:	adds	r2, r0, r6
   13f28:	str	r2, [sp, #16]
   13f2c:	adc	r0, r1, r7
   13f30:	str	r0, [sp, #48]	; 0x30
   13f34:	eor	r1, r0, r5
   13f38:	eor	r0, r2, r4
   13f3c:	mov	r2, #16
   13f40:	bl	18da8 <__assert_fail@plt+0x7a30>
   13f44:	str	r0, [sp, #84]	; 0x54
   13f48:	str	r1, [sp, #76]	; 0x4c
   13f4c:	adds	r2, r0, sl
   13f50:	str	r2, [sp, #92]	; 0x5c
   13f54:	ldr	r0, [sp, #148]	; 0x94
   13f58:	adc	r0, r1, r0
   13f5c:	str	r0, [sp, #124]	; 0x7c
   13f60:	eor	r1, r0, r7
   13f64:	eor	r0, r2, r6
   13f68:	mov	r2, #63	; 0x3f
   13f6c:	bl	18da8 <__assert_fail@plt+0x7a30>
   13f70:	mov	r3, r0
   13f74:	str	r0, [sp, #144]	; 0x90
   13f78:	mov	r7, r1
   13f7c:	str	r1, [sp, #148]	; 0x94
   13f80:	ldr	r0, [sp, #152]	; 0x98
   13f84:	ldr	r6, [sp, #80]	; 0x50
   13f88:	adds	r0, r6, r0
   13f8c:	ldr	r1, [sp, #156]	; 0x9c
   13f90:	ldr	r9, [sp, #72]	; 0x48
   13f94:	adc	r1, r9, r1
   13f98:	ldr	r2, [sp, #24]
   13f9c:	adds	sl, r0, r2
   13fa0:	ldr	r0, [sp, #32]
   13fa4:	adc	r8, r1, r0
   13fa8:	ldr	r0, [sp]
   13fac:	eor	r1, r0, r8
   13fb0:	ldr	r0, [sp, #4]
   13fb4:	eor	r0, r0, sl
   13fb8:	ldr	r2, [fp, #-292]	; 0xfffffedc
   13fbc:	stm	r2, {r3, r7}
   13fc0:	mov	r2, #32
   13fc4:	bl	18da8 <__assert_fail@plt+0x7a30>
   13fc8:	mov	r4, r0
   13fcc:	mov	r5, r1
   13fd0:	ldr	r0, [sp, #88]	; 0x58
   13fd4:	adds	r2, r4, r0
   13fd8:	ldr	r0, [sp, #120]	; 0x78
   13fdc:	adc	r0, r1, r0
   13fe0:	str	r0, [sp, #156]	; 0x9c
   13fe4:	eor	r1, r0, r9
   13fe8:	eor	r0, r2, r6
   13fec:	mov	r9, r2
   13ff0:	mov	r2, #24
   13ff4:	bl	18da8 <__assert_fail@plt+0x7a30>
   13ff8:	mov	r6, r0
   13ffc:	mov	r7, r1
   14000:	ldr	r0, [sp, #160]	; 0xa0
   14004:	adds	r0, sl, r0
   14008:	ldr	r1, [sp, #164]	; 0xa4
   1400c:	adc	r1, r8, r1
   14010:	adds	r2, r0, r6
   14014:	str	r2, [sp, #32]
   14018:	adc	r0, r1, r7
   1401c:	str	r0, [sp, #36]	; 0x24
   14020:	eor	r1, r0, r5
   14024:	eor	r0, r2, r4
   14028:	mov	r2, #16
   1402c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14030:	str	r0, [sp, #80]	; 0x50
   14034:	str	r1, [sp, #72]	; 0x48
   14038:	adds	r2, r0, r9
   1403c:	str	r2, [sp, #88]	; 0x58
   14040:	ldr	r0, [sp, #156]	; 0x9c
   14044:	adc	r0, r1, r0
   14048:	str	r0, [sp, #120]	; 0x78
   1404c:	eor	r1, r0, r7
   14050:	eor	r0, r2, r6
   14054:	mov	r2, #63	; 0x3f
   14058:	bl	18da8 <__assert_fail@plt+0x7a30>
   1405c:	mov	r2, r0
   14060:	str	r0, [sp, #156]	; 0x9c
   14064:	mov	r3, r1
   14068:	str	r1, [sp, #152]	; 0x98
   1406c:	ldr	r0, [sp, #312]	; 0x138
   14070:	ldr	r1, [sp, #16]
   14074:	adds	r0, r1, r0
   14078:	ldr	r1, [sp, #316]	; 0x13c
   1407c:	ldr	r7, [sp, #48]	; 0x30
   14080:	adc	r1, r7, r1
   14084:	adds	r0, r0, r2
   14088:	str	r0, [sp, #48]	; 0x30
   1408c:	adc	r0, r1, r3
   14090:	str	r0, [sp, #24]
   14094:	ldr	r0, [sp, #112]	; 0x70
   14098:	ldr	r6, [sp, #68]	; 0x44
   1409c:	adds	r0, r6, r0
   140a0:	ldr	r1, [sp, #116]	; 0x74
   140a4:	ldr	r7, [sp, #64]	; 0x40
   140a8:	adc	r1, r7, r1
   140ac:	ldr	r2, [sp, #40]	; 0x28
   140b0:	adds	r8, r0, r2
   140b4:	ldr	r0, [sp, #52]	; 0x34
   140b8:	adc	r9, r1, r0
   140bc:	ldr	r0, [sp, #12]
   140c0:	eor	r1, r0, r9
   140c4:	ldr	r0, [sp, #20]
   140c8:	eor	r0, r0, r8
   140cc:	mov	r2, #32
   140d0:	bl	18da8 <__assert_fail@plt+0x7a30>
   140d4:	mov	r4, r0
   140d8:	mov	r5, r1
   140dc:	ldr	r0, [sp, #100]	; 0x64
   140e0:	adds	sl, r4, r0
   140e4:	ldr	r0, [sp, #104]	; 0x68
   140e8:	adc	r0, r1, r0
   140ec:	str	r0, [sp, #116]	; 0x74
   140f0:	eor	r1, r0, r7
   140f4:	eor	r0, sl, r6
   140f8:	mov	r2, #24
   140fc:	bl	18da8 <__assert_fail@plt+0x7a30>
   14100:	mov	r6, r0
   14104:	mov	r7, r1
   14108:	ldr	r0, [sp, #288]	; 0x120
   1410c:	adds	r0, r0, r8
   14110:	ldr	r1, [sp, #292]	; 0x124
   14114:	adc	r1, r1, r9
   14118:	adds	r2, r0, r6
   1411c:	str	r2, [sp, #8]
   14120:	adc	r0, r1, r7
   14124:	str	r0, [sp, #52]	; 0x34
   14128:	eor	r1, r0, r5
   1412c:	eor	r0, r2, r4
   14130:	mov	r2, #16
   14134:	bl	18da8 <__assert_fail@plt+0x7a30>
   14138:	str	r0, [sp, #100]	; 0x64
   1413c:	str	r1, [sp, #68]	; 0x44
   14140:	adds	r2, r0, sl
   14144:	str	r2, [sp, #20]
   14148:	ldr	r0, [sp, #116]	; 0x74
   1414c:	adc	r0, r1, r0
   14150:	str	r0, [sp, #104]	; 0x68
   14154:	eor	r1, r0, r7
   14158:	eor	r0, r2, r6
   1415c:	mov	r2, #63	; 0x3f
   14160:	bl	18da8 <__assert_fail@plt+0x7a30>
   14164:	str	r0, [sp, #116]	; 0x74
   14168:	str	r1, [sp, #112]	; 0x70
   1416c:	ldr	r0, [sp, #212]	; 0xd4
   14170:	ldr	r5, [sp, #60]	; 0x3c
   14174:	adds	r0, r5, r0
   14178:	ldr	r1, [sp, #216]	; 0xd8
   1417c:	ldr	r7, [sp, #56]	; 0x38
   14180:	adc	r1, r7, r1
   14184:	ldr	r2, [sp, #28]
   14188:	adds	sl, r0, r2
   1418c:	ldr	r0, [sp, #44]	; 0x2c
   14190:	adc	r9, r1, r0
   14194:	ldr	r0, [sp, #136]	; 0x88
   14198:	eor	r1, r9, r0
   1419c:	ldr	r0, [sp, #140]	; 0x8c
   141a0:	eor	r0, sl, r0
   141a4:	mov	r2, #32
   141a8:	bl	18da8 <__assert_fail@plt+0x7a30>
   141ac:	mov	r4, r0
   141b0:	mov	r6, r1
   141b4:	ldr	r0, [sp, #96]	; 0x60
   141b8:	adds	r2, r4, r0
   141bc:	ldr	r0, [sp, #108]	; 0x6c
   141c0:	adc	r0, r1, r0
   141c4:	str	r0, [sp, #140]	; 0x8c
   141c8:	eor	r1, r0, r7
   141cc:	eor	r0, r2, r5
   141d0:	mov	r7, r2
   141d4:	mov	r2, #24
   141d8:	bl	18da8 <__assert_fail@plt+0x7a30>
   141dc:	mov	r5, r0
   141e0:	mov	r8, r1
   141e4:	ldr	r0, [sp, #304]	; 0x130
   141e8:	adds	r0, sl, r0
   141ec:	ldr	r1, [sp, #308]	; 0x134
   141f0:	adc	r1, r9, r1
   141f4:	adds	r2, r0, r5
   141f8:	str	r2, [sp, #12]
   141fc:	adc	r0, r1, r8
   14200:	str	r0, [sp, #40]	; 0x28
   14204:	eor	r1, r0, r6
   14208:	eor	r0, r2, r4
   1420c:	mov	r2, #16
   14210:	bl	18da8 <__assert_fail@plt+0x7a30>
   14214:	mov	r6, r0
   14218:	mov	r9, r1
   1421c:	adds	r2, r0, r7
   14220:	str	r2, [sp, #56]	; 0x38
   14224:	ldr	r0, [sp, #140]	; 0x8c
   14228:	adc	r0, r1, r0
   1422c:	str	r0, [sp, #64]	; 0x40
   14230:	eor	r1, r0, r8
   14234:	eor	r0, r2, r5
   14238:	mov	r2, #63	; 0x3f
   1423c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14240:	str	r0, [sp, #60]	; 0x3c
   14244:	str	r1, [sp, #44]	; 0x2c
   14248:	ldr	sl, [sp, #24]
   1424c:	eor	r1, r9, sl
   14250:	ldr	r8, [sp, #48]	; 0x30
   14254:	eor	r0, r6, r8
   14258:	mov	r2, #32
   1425c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14260:	mov	r5, r0
   14264:	mov	r6, r1
   14268:	ldr	r0, [sp, #20]
   1426c:	adds	r9, r5, r0
   14270:	ldr	r0, [sp, #104]	; 0x68
   14274:	adc	r1, r1, r0
   14278:	str	r1, [sp, #140]	; 0x8c
   1427c:	ldr	r0, [sp, #152]	; 0x98
   14280:	eor	r1, r1, r0
   14284:	ldr	r0, [sp, #156]	; 0x9c
   14288:	eor	r0, r9, r0
   1428c:	mov	r2, #24
   14290:	bl	18da8 <__assert_fail@plt+0x7a30>
   14294:	mov	r4, r0
   14298:	mov	r7, r1
   1429c:	ldr	r0, [sp, #296]	; 0x128
   142a0:	adds	r0, r8, r0
   142a4:	ldr	r1, [sp, #300]	; 0x12c
   142a8:	adc	r1, sl, r1
   142ac:	adds	r2, r0, r4
   142b0:	str	r2, [sp, #20]
   142b4:	adc	r0, r1, r7
   142b8:	str	r0, [sp, #28]
   142bc:	eor	r1, r0, r6
   142c0:	eor	r0, r2, r5
   142c4:	mov	r2, #16
   142c8:	bl	18da8 <__assert_fail@plt+0x7a30>
   142cc:	mov	r3, r0
   142d0:	str	r0, [sp, #156]	; 0x9c
   142d4:	mov	r6, r1
   142d8:	str	r1, [sp, #152]	; 0x98
   142dc:	adds	r2, r0, r9
   142e0:	str	r2, [sp, #136]	; 0x88
   142e4:	ldr	r0, [sp, #140]	; 0x8c
   142e8:	adc	r0, r1, r0
   142ec:	str	r0, [sp, #140]	; 0x8c
   142f0:	eor	r1, r0, r7
   142f4:	eor	r0, r2, r4
   142f8:	ldr	r2, [fp, #-296]	; 0xfffffed8
   142fc:	stm	r2, {r3, r6}
   14300:	mov	r2, #63	; 0x3f
   14304:	bl	18da8 <__assert_fail@plt+0x7a30>
   14308:	str	r0, [sp, #96]	; 0x60
   1430c:	str	r1, [sp, #48]	; 0x30
   14310:	ldr	r0, [sp, #32]
   14314:	ldr	r6, [sp, #116]	; 0x74
   14318:	adds	r0, r6, r0
   1431c:	ldr	r1, [sp, #36]	; 0x24
   14320:	ldr	r7, [sp, #112]	; 0x70
   14324:	adc	r1, r7, r1
   14328:	ldr	r2, [fp, #-160]	; 0xffffff60
   1432c:	str	r2, [sp, #108]	; 0x6c
   14330:	ldr	r3, [fp, #-156]	; 0xffffff64
   14334:	str	r3, [sp, #104]	; 0x68
   14338:	adds	r9, r0, r2
   1433c:	adc	sl, r1, r3
   14340:	ldr	r0, [sp, #76]	; 0x4c
   14344:	eor	r1, sl, r0
   14348:	ldr	r0, [sp, #84]	; 0x54
   1434c:	eor	r0, r9, r0
   14350:	mov	r2, #32
   14354:	bl	18da8 <__assert_fail@plt+0x7a30>
   14358:	mov	r4, r0
   1435c:	mov	r5, r1
   14360:	ldr	r0, [sp, #56]	; 0x38
   14364:	adds	r8, r4, r0
   14368:	ldr	r0, [sp, #64]	; 0x40
   1436c:	adc	r0, r1, r0
   14370:	str	r0, [sp, #64]	; 0x40
   14374:	eor	r1, r0, r7
   14378:	eor	r0, r8, r6
   1437c:	mov	r2, #24
   14380:	bl	18da8 <__assert_fail@plt+0x7a30>
   14384:	mov	r7, r0
   14388:	mov	r6, r1
   1438c:	ldr	r0, [sp, #236]	; 0xec
   14390:	adds	r0, r9, r0
   14394:	ldr	r1, [sp, #240]	; 0xf0
   14398:	adc	r1, sl, r1
   1439c:	adds	r2, r0, r7
   143a0:	str	r2, [sp, #16]
   143a4:	adc	r0, r1, r6
   143a8:	str	r0, [sp, #24]
   143ac:	eor	r1, r0, r5
   143b0:	eor	r0, r2, r4
   143b4:	mov	r2, #16
   143b8:	bl	18da8 <__assert_fail@plt+0x7a30>
   143bc:	str	r0, [sp, #84]	; 0x54
   143c0:	str	r1, [sp, #76]	; 0x4c
   143c4:	adds	r2, r0, r8
   143c8:	str	r2, [sp, #112]	; 0x70
   143cc:	ldr	r0, [sp, #64]	; 0x40
   143d0:	adc	r0, r1, r0
   143d4:	str	r0, [sp, #116]	; 0x74
   143d8:	eor	r1, r0, r6
   143dc:	eor	r0, r2, r7
   143e0:	mov	r2, #63	; 0x3f
   143e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   143e8:	str	r0, [sp, #64]	; 0x40
   143ec:	str	r1, [sp, #56]	; 0x38
   143f0:	ldr	r0, [sp, #228]	; 0xe4
   143f4:	ldr	r1, [sp, #8]
   143f8:	adds	r0, r1, r0
   143fc:	ldr	r1, [sp, #232]	; 0xe8
   14400:	ldr	r2, [sp, #52]	; 0x34
   14404:	adc	r1, r2, r1
   14408:	ldr	r4, [sp, #60]	; 0x3c
   1440c:	adds	r8, r0, r4
   14410:	ldr	r5, [sp, #44]	; 0x2c
   14414:	adc	r9, r1, r5
   14418:	ldr	r0, [sp, #72]	; 0x48
   1441c:	eor	r1, r9, r0
   14420:	ldr	r0, [sp, #80]	; 0x50
   14424:	eor	r0, r8, r0
   14428:	mov	r2, #32
   1442c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14430:	mov	r6, r0
   14434:	mov	r7, r1
   14438:	ldr	r0, [sp, #92]	; 0x5c
   1443c:	adds	sl, r6, r0
   14440:	ldr	r0, [sp, #124]	; 0x7c
   14444:	adc	r0, r1, r0
   14448:	str	r0, [sp, #124]	; 0x7c
   1444c:	eor	r1, r0, r5
   14450:	eor	r0, sl, r4
   14454:	mov	r2, #24
   14458:	bl	18da8 <__assert_fail@plt+0x7a30>
   1445c:	mov	r4, r0
   14460:	mov	r5, r1
   14464:	ldr	r0, [fp, #-312]	; 0xfffffec8
   14468:	adds	r0, r8, r0
   1446c:	ldr	r1, [fp, #-308]	; 0xfffffecc
   14470:	adc	r1, r9, r1
   14474:	adds	r2, r0, r4
   14478:	str	r2, [sp, #36]	; 0x24
   1447c:	adc	r0, r1, r5
   14480:	str	r0, [sp, #44]	; 0x2c
   14484:	eor	r1, r0, r7
   14488:	eor	r0, r2, r6
   1448c:	mov	r2, #16
   14490:	bl	18da8 <__assert_fail@plt+0x7a30>
   14494:	str	r0, [sp, #80]	; 0x50
   14498:	str	r1, [sp, #72]	; 0x48
   1449c:	adds	r2, r0, sl
   144a0:	str	r2, [sp, #92]	; 0x5c
   144a4:	ldr	r0, [sp, #124]	; 0x7c
   144a8:	adc	r0, r1, r0
   144ac:	str	r0, [sp, #124]	; 0x7c
   144b0:	eor	r1, r0, r5
   144b4:	eor	r0, r2, r4
   144b8:	mov	r2, #63	; 0x3f
   144bc:	bl	18da8 <__assert_fail@plt+0x7a30>
   144c0:	str	r0, [sp, #60]	; 0x3c
   144c4:	str	r1, [sp, #52]	; 0x34
   144c8:	ldr	r0, [fp, #-304]	; 0xfffffed0
   144cc:	ldr	r7, [sp, #144]	; 0x90
   144d0:	adds	r0, r7, r0
   144d4:	ldr	r1, [fp, #-300]	; 0xfffffed4
   144d8:	ldr	r6, [sp, #148]	; 0x94
   144dc:	adc	r1, r6, r1
   144e0:	ldr	r2, [sp, #12]
   144e4:	adds	sl, r0, r2
   144e8:	ldr	r0, [sp, #40]	; 0x28
   144ec:	adc	r9, r1, r0
   144f0:	ldr	r0, [sp, #68]	; 0x44
   144f4:	eor	r1, r9, r0
   144f8:	ldr	r0, [sp, #100]	; 0x64
   144fc:	eor	r0, sl, r0
   14500:	mov	r2, #32
   14504:	bl	18da8 <__assert_fail@plt+0x7a30>
   14508:	mov	r4, r0
   1450c:	mov	r5, r1
   14510:	ldr	r0, [sp, #88]	; 0x58
   14514:	adds	r2, r4, r0
   14518:	ldr	r0, [sp, #120]	; 0x78
   1451c:	adc	r0, r1, r0
   14520:	str	r0, [sp, #120]	; 0x78
   14524:	eor	r1, r0, r6
   14528:	eor	r0, r2, r7
   1452c:	mov	r6, r2
   14530:	mov	r2, #24
   14534:	bl	18da8 <__assert_fail@plt+0x7a30>
   14538:	mov	r7, r0
   1453c:	mov	r8, r1
   14540:	adds	r0, r0, sl
   14544:	adc	r1, r1, r9
   14548:	ldr	r2, [sp, #276]	; 0x114
   1454c:	ldr	r3, [r2]
   14550:	ldr	r2, [r2, #4]
   14554:	str	r3, [sp, #144]	; 0x90
   14558:	str	r2, [sp, #148]	; 0x94
   1455c:	adds	r3, r0, r3
   14560:	str	r3, [sp, #32]
   14564:	adc	r0, r1, r2
   14568:	str	r0, [sp, #40]	; 0x28
   1456c:	eor	r1, r0, r5
   14570:	eor	r0, r3, r4
   14574:	mov	r2, #16
   14578:	bl	18da8 <__assert_fail@plt+0x7a30>
   1457c:	str	r0, [sp, #68]	; 0x44
   14580:	str	r1, [sp, #12]
   14584:	adds	r2, r0, r6
   14588:	str	r2, [sp, #8]
   1458c:	ldr	r0, [sp, #120]	; 0x78
   14590:	adc	r0, r1, r0
   14594:	str	r0, [sp, #88]	; 0x58
   14598:	eor	r1, r0, r8
   1459c:	eor	r0, r2, r7
   145a0:	mov	r2, #63	; 0x3f
   145a4:	bl	18da8 <__assert_fail@plt+0x7a30>
   145a8:	mov	r5, r0
   145ac:	mov	r7, r1
   145b0:	ldr	r0, [sp, #228]	; 0xe4
   145b4:	ldr	r1, [sp, #20]
   145b8:	adds	r0, r1, r0
   145bc:	ldr	r1, [sp, #232]	; 0xe8
   145c0:	ldr	r2, [sp, #28]
   145c4:	adc	r1, r2, r1
   145c8:	adds	r8, r0, r5
   145cc:	adc	r9, r1, r7
   145d0:	ldr	r0, [sp, #76]	; 0x4c
   145d4:	eor	r1, r9, r0
   145d8:	ldr	r0, [sp, #84]	; 0x54
   145dc:	eor	r0, r8, r0
   145e0:	mov	r2, #32
   145e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   145e8:	mov	r4, r0
   145ec:	mov	r6, r1
   145f0:	ldr	r0, [sp, #92]	; 0x5c
   145f4:	adds	sl, r4, r0
   145f8:	ldr	r0, [sp, #124]	; 0x7c
   145fc:	adc	r0, r1, r0
   14600:	str	r0, [sp, #124]	; 0x7c
   14604:	eor	r1, r0, r7
   14608:	eor	r0, sl, r5
   1460c:	mov	r2, #24
   14610:	bl	18da8 <__assert_fail@plt+0x7a30>
   14614:	mov	r5, r0
   14618:	mov	r7, r1
   1461c:	ldr	r0, [sp, #160]	; 0xa0
   14620:	adds	r0, r8, r0
   14624:	ldr	r1, [sp, #164]	; 0xa4
   14628:	adc	r1, r9, r1
   1462c:	adds	r2, r0, r5
   14630:	str	r2, [sp, #20]
   14634:	adc	r0, r1, r7
   14638:	str	r0, [sp, #28]
   1463c:	eor	r1, r0, r6
   14640:	eor	r0, r2, r4
   14644:	mov	r2, #16
   14648:	bl	18da8 <__assert_fail@plt+0x7a30>
   1464c:	str	r0, [sp, #84]	; 0x54
   14650:	str	r1, [sp, #76]	; 0x4c
   14654:	adds	r2, r0, sl
   14658:	str	r2, [sp, #92]	; 0x5c
   1465c:	ldr	r0, [sp, #124]	; 0x7c
   14660:	adc	r0, r1, r0
   14664:	str	r0, [sp, #100]	; 0x64
   14668:	eor	r1, r0, r7
   1466c:	eor	r0, r2, r5
   14670:	mov	r2, #63	; 0x3f
   14674:	bl	18da8 <__assert_fail@plt+0x7a30>
   14678:	mov	r3, r0
   1467c:	str	r0, [sp, #120]	; 0x78
   14680:	mov	r7, r1
   14684:	str	r1, [sp, #124]	; 0x7c
   14688:	ldr	r0, [sp, #296]	; 0x128
   1468c:	ldr	r6, [sp, #96]	; 0x60
   14690:	adds	r0, r6, r0
   14694:	ldr	r1, [sp, #300]	; 0x12c
   14698:	ldr	r9, [sp, #48]	; 0x30
   1469c:	adc	r1, r9, r1
   146a0:	ldr	r2, [sp, #16]
   146a4:	adds	sl, r0, r2
   146a8:	ldr	r0, [sp, #24]
   146ac:	adc	r8, r1, r0
   146b0:	ldr	r0, [sp, #72]	; 0x48
   146b4:	eor	r1, r0, r8
   146b8:	ldr	r0, [sp, #80]	; 0x50
   146bc:	eor	r0, r0, sl
   146c0:	ldr	r2, [fp, #-292]	; 0xfffffedc
   146c4:	stm	r2, {r3, r7}
   146c8:	mov	r2, #32
   146cc:	bl	18da8 <__assert_fail@plt+0x7a30>
   146d0:	mov	r4, r0
   146d4:	mov	r5, r1
   146d8:	ldr	r0, [sp, #8]
   146dc:	adds	r2, r4, r0
   146e0:	ldr	r0, [sp, #88]	; 0x58
   146e4:	adc	r0, r1, r0
   146e8:	str	r0, [sp, #164]	; 0xa4
   146ec:	eor	r1, r0, r9
   146f0:	eor	r0, r2, r6
   146f4:	mov	r9, r2
   146f8:	mov	r2, #24
   146fc:	bl	18da8 <__assert_fail@plt+0x7a30>
   14700:	mov	r6, r0
   14704:	mov	r7, r1
   14708:	ldr	r0, [sp, #108]	; 0x6c
   1470c:	adds	r0, sl, r0
   14710:	ldr	r1, [sp, #104]	; 0x68
   14714:	adc	r1, r8, r1
   14718:	adds	r2, r0, r6
   1471c:	str	r2, [sp, #48]	; 0x30
   14720:	adc	r0, r1, r7
   14724:	str	r0, [sp, #104]	; 0x68
   14728:	eor	r1, r0, r5
   1472c:	eor	r0, r2, r4
   14730:	mov	r2, #16
   14734:	bl	18da8 <__assert_fail@plt+0x7a30>
   14738:	str	r0, [sp, #80]	; 0x50
   1473c:	str	r1, [sp, #72]	; 0x48
   14740:	adds	r2, r0, r9
   14744:	str	r2, [sp, #88]	; 0x58
   14748:	ldr	r0, [sp, #164]	; 0xa4
   1474c:	adc	r0, r1, r0
   14750:	str	r0, [sp, #96]	; 0x60
   14754:	eor	r1, r0, r7
   14758:	eor	r0, r2, r6
   1475c:	mov	r2, #63	; 0x3f
   14760:	bl	18da8 <__assert_fail@plt+0x7a30>
   14764:	mov	r2, r0
   14768:	str	r0, [sp, #164]	; 0xa4
   1476c:	mov	r3, r1
   14770:	str	r1, [sp, #160]	; 0xa0
   14774:	ldr	r0, [sp, #260]	; 0x104
   14778:	ldr	r1, [sp, #20]
   1477c:	adds	r0, r1, r0
   14780:	ldr	r1, [sp, #264]	; 0x108
   14784:	ldr	r7, [sp, #28]
   14788:	adc	r1, r7, r1
   1478c:	adds	r0, r0, r2
   14790:	str	r0, [sp, #108]	; 0x6c
   14794:	adc	r0, r1, r3
   14798:	str	r0, [sp, #28]
   1479c:	ldr	r0, [fp, #-304]	; 0xfffffed0
   147a0:	ldr	r5, [sp, #64]	; 0x40
   147a4:	adds	r0, r5, r0
   147a8:	ldr	r1, [fp, #-300]	; 0xfffffed4
   147ac:	ldr	r7, [sp, #56]	; 0x38
   147b0:	adc	r1, r7, r1
   147b4:	ldr	r2, [sp, #36]	; 0x24
   147b8:	adds	r8, r0, r2
   147bc:	ldr	r0, [sp, #44]	; 0x2c
   147c0:	adc	r9, r1, r0
   147c4:	ldr	r0, [sp, #12]
   147c8:	eor	r1, r0, r9
   147cc:	ldr	r0, [sp, #68]	; 0x44
   147d0:	eor	r0, r0, r8
   147d4:	mov	r2, #32
   147d8:	bl	18da8 <__assert_fail@plt+0x7a30>
   147dc:	mov	r4, r0
   147e0:	mov	r6, r1
   147e4:	ldr	r0, [sp, #136]	; 0x88
   147e8:	adds	sl, r4, r0
   147ec:	ldr	r0, [sp, #140]	; 0x8c
   147f0:	adc	r0, r1, r0
   147f4:	str	r0, [sp, #44]	; 0x2c
   147f8:	eor	r1, r0, r7
   147fc:	eor	r0, sl, r5
   14800:	mov	r2, #24
   14804:	bl	18da8 <__assert_fail@plt+0x7a30>
   14808:	mov	r7, r0
   1480c:	mov	r5, r1
   14810:	ldr	r0, [sp, #236]	; 0xec
   14814:	adds	r0, r8, r0
   14818:	ldr	r1, [sp, #240]	; 0xf0
   1481c:	adc	r1, r9, r1
   14820:	adds	r2, r0, r7
   14824:	str	r2, [sp, #136]	; 0x88
   14828:	adc	r0, r1, r5
   1482c:	str	r0, [sp, #140]	; 0x8c
   14830:	eor	r1, r0, r6
   14834:	eor	r0, r2, r4
   14838:	mov	r2, #16
   1483c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14840:	str	r0, [sp, #68]	; 0x44
   14844:	str	r1, [sp, #64]	; 0x40
   14848:	adds	r2, r0, sl
   1484c:	str	r2, [sp, #20]
   14850:	ldr	r0, [sp, #44]	; 0x2c
   14854:	adc	r0, r1, r0
   14858:	str	r0, [sp, #44]	; 0x2c
   1485c:	eor	r1, r0, r5
   14860:	eor	r0, r2, r7
   14864:	mov	r2, #63	; 0x3f
   14868:	bl	18da8 <__assert_fail@plt+0x7a30>
   1486c:	str	r0, [sp, #56]	; 0x38
   14870:	str	r1, [sp, #24]
   14874:	ldr	r0, [sp, #288]	; 0x120
   14878:	ldr	r4, [sp, #60]	; 0x3c
   1487c:	adds	r0, r4, r0
   14880:	ldr	r1, [sp, #292]	; 0x124
   14884:	ldr	r7, [sp, #52]	; 0x34
   14888:	adc	r1, r7, r1
   1488c:	ldr	r2, [sp, #32]
   14890:	adds	r8, r0, r2
   14894:	ldr	r0, [sp, #40]	; 0x28
   14898:	adc	r9, r1, r0
   1489c:	ldr	r0, [sp, #152]	; 0x98
   148a0:	eor	r1, r9, r0
   148a4:	ldr	r0, [sp, #156]	; 0x9c
   148a8:	eor	r0, r8, r0
   148ac:	mov	r2, #32
   148b0:	bl	18da8 <__assert_fail@plt+0x7a30>
   148b4:	mov	r5, r0
   148b8:	mov	r6, r1
   148bc:	ldr	r0, [sp, #112]	; 0x70
   148c0:	adds	sl, r5, r0
   148c4:	ldr	r0, [sp, #116]	; 0x74
   148c8:	adc	r0, r1, r0
   148cc:	str	r0, [sp, #116]	; 0x74
   148d0:	eor	r1, r0, r7
   148d4:	eor	r0, sl, r4
   148d8:	mov	r2, #24
   148dc:	bl	18da8 <__assert_fail@plt+0x7a30>
   148e0:	mov	r7, r0
   148e4:	mov	r4, r1
   148e8:	ldr	r0, [sp, #212]	; 0xd4
   148ec:	adds	r0, r8, r0
   148f0:	ldr	r1, [sp, #216]	; 0xd8
   148f4:	adc	r1, r9, r1
   148f8:	adds	r2, r0, r7
   148fc:	str	r2, [sp, #152]	; 0x98
   14900:	adc	r0, r1, r4
   14904:	str	r0, [sp, #156]	; 0x9c
   14908:	eor	r1, r0, r6
   1490c:	eor	r0, r2, r5
   14910:	mov	r2, #16
   14914:	bl	18da8 <__assert_fail@plt+0x7a30>
   14918:	mov	r5, r0
   1491c:	mov	r8, r1
   14920:	adds	r2, r0, sl
   14924:	str	r2, [sp, #60]	; 0x3c
   14928:	ldr	r0, [sp, #116]	; 0x74
   1492c:	adc	r0, r1, r0
   14930:	str	r0, [sp, #112]	; 0x70
   14934:	eor	r1, r0, r4
   14938:	eor	r0, r2, r7
   1493c:	mov	r2, #63	; 0x3f
   14940:	bl	18da8 <__assert_fail@plt+0x7a30>
   14944:	str	r0, [sp, #36]	; 0x24
   14948:	str	r1, [sp, #32]
   1494c:	ldr	r9, [sp, #28]
   14950:	eor	r1, r8, r9
   14954:	ldr	sl, [sp, #108]	; 0x6c
   14958:	eor	r0, r5, sl
   1495c:	mov	r2, #32
   14960:	bl	18da8 <__assert_fail@plt+0x7a30>
   14964:	mov	r5, r0
   14968:	mov	r7, r1
   1496c:	ldr	r0, [sp, #20]
   14970:	adds	r8, r5, r0
   14974:	ldr	r0, [sp, #44]	; 0x2c
   14978:	adc	r1, r1, r0
   1497c:	str	r1, [sp, #116]	; 0x74
   14980:	ldr	r0, [sp, #160]	; 0xa0
   14984:	eor	r1, r1, r0
   14988:	ldr	r0, [sp, #164]	; 0xa4
   1498c:	eor	r0, r8, r0
   14990:	mov	r2, #24
   14994:	bl	18da8 <__assert_fail@plt+0x7a30>
   14998:	mov	r4, r0
   1499c:	mov	r6, r1
   149a0:	ldr	r0, [sp, #280]	; 0x118
   149a4:	adds	r0, sl, r0
   149a8:	ldr	r1, [sp, #284]	; 0x11c
   149ac:	adc	r1, r9, r1
   149b0:	adds	r2, r0, r4
   149b4:	str	r2, [sp, #8]
   149b8:	adc	r0, r1, r6
   149bc:	str	r0, [sp, #16]
   149c0:	eor	r1, r0, r7
   149c4:	eor	r0, r2, r5
   149c8:	mov	r2, #16
   149cc:	bl	18da8 <__assert_fail@plt+0x7a30>
   149d0:	mov	r3, r0
   149d4:	str	r0, [sp, #164]	; 0xa4
   149d8:	mov	r7, r1
   149dc:	str	r1, [sp, #160]	; 0xa0
   149e0:	adds	r2, r0, r8
   149e4:	str	r2, [sp, #108]	; 0x6c
   149e8:	ldr	r0, [sp, #116]	; 0x74
   149ec:	adc	r0, r1, r0
   149f0:	str	r0, [sp, #116]	; 0x74
   149f4:	eor	r1, r0, r6
   149f8:	eor	r0, r2, r4
   149fc:	ldr	r2, [fp, #-296]	; 0xfffffed8
   14a00:	stm	r2, {r3, r7}
   14a04:	mov	r2, #63	; 0x3f
   14a08:	bl	18da8 <__assert_fail@plt+0x7a30>
   14a0c:	str	r0, [sp, #44]	; 0x2c
   14a10:	str	r1, [sp, #40]	; 0x28
   14a14:	ldr	r0, [sp, #144]	; 0x90
   14a18:	ldr	r1, [sp, #48]	; 0x30
   14a1c:	adds	r0, r1, r0
   14a20:	ldr	r1, [sp, #148]	; 0x94
   14a24:	ldr	r2, [sp, #104]	; 0x68
   14a28:	adc	r1, r2, r1
   14a2c:	ldr	r6, [sp, #56]	; 0x38
   14a30:	adds	r8, r0, r6
   14a34:	ldr	r7, [sp, #24]
   14a38:	adc	r9, r1, r7
   14a3c:	ldr	r0, [sp, #76]	; 0x4c
   14a40:	eor	r1, r9, r0
   14a44:	ldr	r0, [sp, #84]	; 0x54
   14a48:	eor	r0, r8, r0
   14a4c:	mov	r2, #32
   14a50:	bl	18da8 <__assert_fail@plt+0x7a30>
   14a54:	mov	r4, r0
   14a58:	mov	r5, r1
   14a5c:	ldr	r0, [sp, #60]	; 0x3c
   14a60:	adds	sl, r4, r0
   14a64:	ldr	r0, [sp, #112]	; 0x70
   14a68:	adc	r0, r1, r0
   14a6c:	str	r0, [sp, #112]	; 0x70
   14a70:	eor	r1, r0, r7
   14a74:	eor	r0, sl, r6
   14a78:	mov	r2, #24
   14a7c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14a80:	mov	r6, r0
   14a84:	mov	r7, r1
   14a88:	ldr	r0, [sp, #304]	; 0x130
   14a8c:	adds	r0, r8, r0
   14a90:	ldr	r1, [sp, #308]	; 0x134
   14a94:	adc	r1, r9, r1
   14a98:	adds	r2, r0, r6
   14a9c:	str	r2, [sp, #12]
   14aa0:	adc	r0, r1, r7
   14aa4:	str	r0, [sp, #20]
   14aa8:	eor	r1, r0, r5
   14aac:	eor	r0, r2, r4
   14ab0:	mov	r2, #16
   14ab4:	bl	18da8 <__assert_fail@plt+0x7a30>
   14ab8:	str	r0, [sp, #84]	; 0x54
   14abc:	str	r1, [sp, #76]	; 0x4c
   14ac0:	adds	r2, r0, sl
   14ac4:	str	r2, [sp, #104]	; 0x68
   14ac8:	ldr	r0, [sp, #112]	; 0x70
   14acc:	adc	r0, r1, r0
   14ad0:	str	r0, [sp, #112]	; 0x70
   14ad4:	eor	r1, r0, r7
   14ad8:	eor	r0, r2, r6
   14adc:	mov	r2, #63	; 0x3f
   14ae0:	bl	18da8 <__assert_fail@plt+0x7a30>
   14ae4:	str	r0, [sp, #60]	; 0x3c
   14ae8:	str	r1, [sp, #52]	; 0x34
   14aec:	ldr	r0, [fp, #-312]	; 0xfffffec8
   14af0:	ldr	r1, [sp, #136]	; 0x88
   14af4:	adds	r0, r1, r0
   14af8:	ldr	r1, [fp, #-308]	; 0xfffffecc
   14afc:	ldr	r2, [sp, #140]	; 0x8c
   14b00:	adc	r1, r2, r1
   14b04:	ldr	r5, [sp, #36]	; 0x24
   14b08:	adds	r8, r0, r5
   14b0c:	ldr	r7, [sp, #32]
   14b10:	adc	r9, r1, r7
   14b14:	ldr	r0, [sp, #72]	; 0x48
   14b18:	eor	r1, r9, r0
   14b1c:	ldr	r0, [sp, #80]	; 0x50
   14b20:	eor	r0, r8, r0
   14b24:	mov	r2, #32
   14b28:	bl	18da8 <__assert_fail@plt+0x7a30>
   14b2c:	mov	r4, r0
   14b30:	mov	r6, r1
   14b34:	ldr	r0, [sp, #92]	; 0x5c
   14b38:	adds	sl, r4, r0
   14b3c:	ldr	r0, [sp, #100]	; 0x64
   14b40:	adc	r0, r1, r0
   14b44:	str	r0, [sp, #140]	; 0x8c
   14b48:	eor	r1, r0, r7
   14b4c:	eor	r0, sl, r5
   14b50:	mov	r2, #24
   14b54:	bl	18da8 <__assert_fail@plt+0x7a30>
   14b58:	mov	r7, r0
   14b5c:	mov	r5, r1
   14b60:	ldr	r0, [sp, #312]	; 0x138
   14b64:	adds	r0, r8, r0
   14b68:	ldr	r1, [sp, #316]	; 0x13c
   14b6c:	adc	r1, r9, r1
   14b70:	adds	r2, r0, r7
   14b74:	str	r2, [sp, #32]
   14b78:	adc	r0, r1, r5
   14b7c:	str	r0, [sp, #36]	; 0x24
   14b80:	eor	r1, r0, r6
   14b84:	eor	r0, r2, r4
   14b88:	mov	r2, #16
   14b8c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14b90:	str	r0, [sp, #100]	; 0x64
   14b94:	str	r1, [sp, #92]	; 0x5c
   14b98:	adds	r2, r0, sl
   14b9c:	str	r2, [sp, #4]
   14ba0:	ldr	r0, [sp, #140]	; 0x8c
   14ba4:	adc	r0, r1, r0
   14ba8:	str	r0, [sp, #80]	; 0x50
   14bac:	eor	r1, r0, r5
   14bb0:	eor	r0, r2, r7
   14bb4:	mov	r2, #63	; 0x3f
   14bb8:	bl	18da8 <__assert_fail@plt+0x7a30>
   14bbc:	str	r0, [sp, #56]	; 0x38
   14bc0:	str	r1, [sp, #48]	; 0x30
   14bc4:	ldr	r7, [sp, #120]	; 0x78
   14bc8:	ldr	r0, [sp, #152]	; 0x98
   14bcc:	adds	r0, r0, r7
   14bd0:	ldr	r4, [sp, #124]	; 0x7c
   14bd4:	ldr	r1, [sp, #156]	; 0x9c
   14bd8:	adc	r1, r1, r4
   14bdc:	ldr	r2, [sp, #272]	; 0x110
   14be0:	ldr	r3, [r2]
   14be4:	ldr	r2, [r2, #4]
   14be8:	str	r3, [sp, #136]	; 0x88
   14bec:	str	r2, [sp, #140]	; 0x8c
   14bf0:	adds	r9, r0, r3
   14bf4:	adc	r8, r1, r2
   14bf8:	ldr	r0, [sp, #64]	; 0x40
   14bfc:	eor	r1, r8, r0
   14c00:	ldr	r0, [sp, #68]	; 0x44
   14c04:	eor	r0, r9, r0
   14c08:	mov	r2, #32
   14c0c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14c10:	mov	r5, r0
   14c14:	mov	r6, r1
   14c18:	ldr	r0, [sp, #88]	; 0x58
   14c1c:	adds	r2, r5, r0
   14c20:	ldr	r0, [sp, #96]	; 0x60
   14c24:	adc	r0, r1, r0
   14c28:	str	r0, [sp, #96]	; 0x60
   14c2c:	eor	r1, r0, r4
   14c30:	eor	r0, r2, r7
   14c34:	mov	r4, r2
   14c38:	mov	r2, #24
   14c3c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14c40:	mov	r7, r0
   14c44:	mov	sl, r1
   14c48:	adds	r0, r0, r9
   14c4c:	adc	r1, r1, r8
   14c50:	ldr	r2, [sp, #268]	; 0x10c
   14c54:	ldr	r3, [r2]
   14c58:	ldr	r2, [r2, #4]
   14c5c:	str	r3, [sp, #152]	; 0x98
   14c60:	str	r2, [sp, #156]	; 0x9c
   14c64:	adds	r3, r0, r3
   14c68:	str	r3, [sp, #24]
   14c6c:	adc	r0, r1, r2
   14c70:	str	r0, [sp, #28]
   14c74:	eor	r1, r0, r6
   14c78:	eor	r0, r3, r5
   14c7c:	mov	r2, #16
   14c80:	bl	18da8 <__assert_fail@plt+0x7a30>
   14c84:	str	r0, [sp, #68]	; 0x44
   14c88:	str	r1, [sp, #64]	; 0x40
   14c8c:	adds	r2, r0, r4
   14c90:	str	r2, [sp]
   14c94:	ldr	r0, [sp, #96]	; 0x60
   14c98:	adc	r0, r1, r0
   14c9c:	str	r0, [sp, #72]	; 0x48
   14ca0:	eor	r1, r0, sl
   14ca4:	eor	r0, r2, r7
   14ca8:	mov	r2, #63	; 0x3f
   14cac:	bl	18da8 <__assert_fail@plt+0x7a30>
   14cb0:	mov	r7, r0
   14cb4:	mov	r5, r1
   14cb8:	ldr	r0, [fp, #-312]	; 0xfffffec8
   14cbc:	ldr	r1, [sp, #8]
   14cc0:	adds	r0, r1, r0
   14cc4:	ldr	r1, [fp, #-308]	; 0xfffffecc
   14cc8:	ldr	r2, [sp, #16]
   14ccc:	adc	r1, r2, r1
   14cd0:	adds	r8, r0, r7
   14cd4:	adc	sl, r1, r5
   14cd8:	ldr	r0, [sp, #76]	; 0x4c
   14cdc:	eor	r1, sl, r0
   14ce0:	ldr	r0, [sp, #84]	; 0x54
   14ce4:	eor	r0, r8, r0
   14ce8:	mov	r2, #32
   14cec:	bl	18da8 <__assert_fail@plt+0x7a30>
   14cf0:	mov	r6, r0
   14cf4:	mov	r4, r1
   14cf8:	ldr	r0, [sp, #4]
   14cfc:	adds	r9, r6, r0
   14d00:	ldr	r0, [sp, #80]	; 0x50
   14d04:	adc	r0, r1, r0
   14d08:	str	r0, [sp, #124]	; 0x7c
   14d0c:	eor	r1, r0, r5
   14d10:	eor	r0, r9, r7
   14d14:	mov	r2, #24
   14d18:	bl	18da8 <__assert_fail@plt+0x7a30>
   14d1c:	mov	r5, r0
   14d20:	mov	r7, r1
   14d24:	ldr	r0, [sp, #136]	; 0x88
   14d28:	adds	r0, r8, r0
   14d2c:	ldr	r1, [sp, #140]	; 0x8c
   14d30:	adc	r1, sl, r1
   14d34:	adds	r2, r0, r5
   14d38:	str	r2, [sp, #4]
   14d3c:	adc	r0, r1, r7
   14d40:	str	r0, [sp, #8]
   14d44:	eor	r1, r0, r4
   14d48:	eor	r0, r2, r6
   14d4c:	mov	r2, #16
   14d50:	bl	18da8 <__assert_fail@plt+0x7a30>
   14d54:	str	r0, [sp, #84]	; 0x54
   14d58:	str	r1, [sp, #76]	; 0x4c
   14d5c:	adds	r2, r0, r9
   14d60:	str	r2, [sp, #88]	; 0x58
   14d64:	ldr	r0, [sp, #124]	; 0x7c
   14d68:	adc	r0, r1, r0
   14d6c:	str	r0, [sp, #96]	; 0x60
   14d70:	eor	r1, r0, r7
   14d74:	eor	r0, r2, r5
   14d78:	mov	r2, #63	; 0x3f
   14d7c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14d80:	mov	r3, r0
   14d84:	str	r0, [sp, #120]	; 0x78
   14d88:	mov	r7, r1
   14d8c:	str	r1, [sp, #124]	; 0x7c
   14d90:	ldr	r0, [sp, #144]	; 0x90
   14d94:	ldr	r6, [sp, #44]	; 0x2c
   14d98:	adds	r0, r6, r0
   14d9c:	ldr	r1, [sp, #148]	; 0x94
   14da0:	ldr	sl, [sp, #40]	; 0x28
   14da4:	adc	r1, sl, r1
   14da8:	ldr	r2, [sp, #12]
   14dac:	adds	r9, r0, r2
   14db0:	ldr	r0, [sp, #20]
   14db4:	adc	r8, r1, r0
   14db8:	ldr	r0, [sp, #92]	; 0x5c
   14dbc:	eor	r1, r0, r8
   14dc0:	ldr	r0, [sp, #100]	; 0x64
   14dc4:	eor	r0, r0, r9
   14dc8:	ldr	r2, [fp, #-292]	; 0xfffffedc
   14dcc:	stm	r2, {r3, r7}
   14dd0:	mov	r2, #32
   14dd4:	bl	18da8 <__assert_fail@plt+0x7a30>
   14dd8:	mov	r4, r0
   14ddc:	mov	r5, r1
   14de0:	ldr	r0, [sp]
   14de4:	adds	r2, r4, r0
   14de8:	ldr	r0, [sp, #72]	; 0x48
   14dec:	adc	r0, r1, r0
   14df0:	str	r0, [sp, #148]	; 0x94
   14df4:	eor	r1, r0, sl
   14df8:	eor	r0, r2, r6
   14dfc:	mov	sl, r2
   14e00:	mov	r2, #24
   14e04:	bl	18da8 <__assert_fail@plt+0x7a30>
   14e08:	mov	r6, r0
   14e0c:	mov	r7, r1
   14e10:	ldr	r0, [sp, #312]	; 0x138
   14e14:	adds	r0, r9, r0
   14e18:	ldr	r1, [sp, #316]	; 0x13c
   14e1c:	adc	r1, r8, r1
   14e20:	adds	r2, r0, r6
   14e24:	str	r2, [sp, #16]
   14e28:	adc	r0, r1, r7
   14e2c:	str	r0, [sp, #20]
   14e30:	eor	r1, r0, r5
   14e34:	eor	r0, r2, r4
   14e38:	mov	r2, #16
   14e3c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14e40:	str	r0, [sp, #80]	; 0x50
   14e44:	str	r1, [sp, #72]	; 0x48
   14e48:	adds	r2, r0, sl
   14e4c:	str	r2, [sp, #92]	; 0x5c
   14e50:	ldr	r0, [sp, #148]	; 0x94
   14e54:	adc	r0, r1, r0
   14e58:	str	r0, [sp, #100]	; 0x64
   14e5c:	eor	r1, r0, r7
   14e60:	eor	r0, r2, r6
   14e64:	mov	r2, #63	; 0x3f
   14e68:	bl	18da8 <__assert_fail@plt+0x7a30>
   14e6c:	mov	r2, r0
   14e70:	str	r0, [sp, #148]	; 0x94
   14e74:	mov	r3, r1
   14e78:	str	r1, [sp, #144]	; 0x90
   14e7c:	ldr	r0, [sp, #236]	; 0xec
   14e80:	ldr	r1, [sp, #4]
   14e84:	adds	r0, r1, r0
   14e88:	ldr	r1, [sp, #240]	; 0xf0
   14e8c:	ldr	r7, [sp, #8]
   14e90:	adc	r1, r7, r1
   14e94:	adds	r0, r0, r2
   14e98:	str	r0, [sp, #44]	; 0x2c
   14e9c:	adc	r0, r1, r3
   14ea0:	str	r0, [sp, #40]	; 0x28
   14ea4:	ldr	r0, [sp, #212]	; 0xd4
   14ea8:	ldr	r6, [sp, #60]	; 0x3c
   14eac:	adds	r0, r6, r0
   14eb0:	ldr	r1, [sp, #216]	; 0xd8
   14eb4:	ldr	r7, [sp, #52]	; 0x34
   14eb8:	adc	r1, r7, r1
   14ebc:	ldr	r2, [sp, #32]
   14ec0:	adds	r8, r0, r2
   14ec4:	ldr	r0, [sp, #36]	; 0x24
   14ec8:	adc	r9, r1, r0
   14ecc:	ldr	r0, [sp, #64]	; 0x40
   14ed0:	eor	r1, r0, r9
   14ed4:	ldr	r0, [sp, #68]	; 0x44
   14ed8:	eor	r0, r0, r8
   14edc:	mov	r2, #32
   14ee0:	bl	18da8 <__assert_fail@plt+0x7a30>
   14ee4:	mov	r4, r0
   14ee8:	mov	r5, r1
   14eec:	ldr	r0, [sp, #108]	; 0x6c
   14ef0:	adds	sl, r4, r0
   14ef4:	ldr	r0, [sp, #116]	; 0x74
   14ef8:	adc	r0, r1, r0
   14efc:	str	r0, [sp, #116]	; 0x74
   14f00:	eor	r1, r0, r7
   14f04:	eor	r0, sl, r6
   14f08:	mov	r2, #24
   14f0c:	bl	18da8 <__assert_fail@plt+0x7a30>
   14f10:	mov	r6, r0
   14f14:	mov	r7, r1
   14f18:	ldr	r0, [sp, #296]	; 0x128
   14f1c:	adds	r0, r8, r0
   14f20:	ldr	r1, [sp, #300]	; 0x12c
   14f24:	adc	r1, r9, r1
   14f28:	adds	r2, r0, r6
   14f2c:	str	r2, [sp, #212]	; 0xd4
   14f30:	adc	r0, r1, r7
   14f34:	str	r0, [sp, #216]	; 0xd8
   14f38:	eor	r1, r0, r5
   14f3c:	eor	r0, r2, r4
   14f40:	mov	r2, #16
   14f44:	bl	18da8 <__assert_fail@plt+0x7a30>
   14f48:	str	r0, [sp, #68]	; 0x44
   14f4c:	str	r1, [sp, #64]	; 0x40
   14f50:	adds	r2, r0, sl
   14f54:	str	r2, [sp, #108]	; 0x6c
   14f58:	ldr	r0, [sp, #116]	; 0x74
   14f5c:	adc	r0, r1, r0
   14f60:	str	r0, [sp, #116]	; 0x74
   14f64:	eor	r1, r0, r7
   14f68:	eor	r0, r2, r6
   14f6c:	mov	r2, #63	; 0x3f
   14f70:	bl	18da8 <__assert_fail@plt+0x7a30>
   14f74:	str	r0, [sp, #60]	; 0x3c
   14f78:	str	r1, [sp, #36]	; 0x24
   14f7c:	ldr	r0, [sp, #228]	; 0xe4
   14f80:	ldr	r5, [sp, #56]	; 0x38
   14f84:	adds	r0, r5, r0
   14f88:	ldr	r1, [sp, #232]	; 0xe8
   14f8c:	ldr	r6, [sp, #48]	; 0x30
   14f90:	adc	r1, r6, r1
   14f94:	ldr	r2, [sp, #24]
   14f98:	adds	r9, r0, r2
   14f9c:	ldr	r0, [sp, #28]
   14fa0:	adc	r8, r1, r0
   14fa4:	ldr	r0, [sp, #160]	; 0xa0
   14fa8:	eor	r1, r8, r0
   14fac:	ldr	r0, [sp, #164]	; 0xa4
   14fb0:	eor	r0, r9, r0
   14fb4:	mov	r2, #32
   14fb8:	bl	18da8 <__assert_fail@plt+0x7a30>
   14fbc:	mov	r7, r0
   14fc0:	mov	r4, r1
   14fc4:	ldr	r0, [sp, #104]	; 0x68
   14fc8:	adds	sl, r7, r0
   14fcc:	ldr	r0, [sp, #112]	; 0x70
   14fd0:	adc	r0, r1, r0
   14fd4:	str	r0, [sp, #112]	; 0x70
   14fd8:	eor	r1, r0, r6
   14fdc:	eor	r0, sl, r5
   14fe0:	mov	r2, #24
   14fe4:	bl	18da8 <__assert_fail@plt+0x7a30>
   14fe8:	mov	r6, r0
   14fec:	mov	r5, r1
   14ff0:	ldr	r0, [sp, #280]	; 0x118
   14ff4:	adds	r0, r9, r0
   14ff8:	ldr	r1, [sp, #284]	; 0x11c
   14ffc:	adc	r1, r8, r1
   15000:	adds	r2, r0, r6
   15004:	str	r2, [sp, #160]	; 0xa0
   15008:	adc	r0, r1, r5
   1500c:	str	r0, [sp, #164]	; 0xa4
   15010:	eor	r1, r0, r4
   15014:	eor	r0, r2, r7
   15018:	mov	r2, #16
   1501c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15020:	mov	r4, r0
   15024:	mov	r7, r1
   15028:	adds	r2, r0, sl
   1502c:	str	r2, [sp, #104]	; 0x68
   15030:	ldr	r0, [sp, #112]	; 0x70
   15034:	adc	r0, r1, r0
   15038:	str	r0, [sp, #112]	; 0x70
   1503c:	eor	r1, r0, r5
   15040:	eor	r0, r2, r6
   15044:	mov	r2, #63	; 0x3f
   15048:	bl	18da8 <__assert_fail@plt+0x7a30>
   1504c:	str	r0, [sp, #52]	; 0x34
   15050:	str	r1, [sp, #48]	; 0x30
   15054:	ldr	r8, [sp, #40]	; 0x28
   15058:	eor	r1, r7, r8
   1505c:	ldr	r9, [sp, #44]	; 0x2c
   15060:	eor	r0, r4, r9
   15064:	mov	r2, #32
   15068:	bl	18da8 <__assert_fail@plt+0x7a30>
   1506c:	mov	r4, r0
   15070:	mov	r5, r1
   15074:	ldr	r0, [sp, #108]	; 0x6c
   15078:	adds	r2, r4, r0
   1507c:	str	r2, [sp, #108]	; 0x6c
   15080:	ldr	r0, [sp, #116]	; 0x74
   15084:	adc	sl, r1, r0
   15088:	ldr	r0, [sp, #144]	; 0x90
   1508c:	eor	r1, sl, r0
   15090:	ldr	r0, [sp, #148]	; 0x94
   15094:	eor	r0, r2, r0
   15098:	mov	r2, #24
   1509c:	bl	18da8 <__assert_fail@plt+0x7a30>
   150a0:	mov	r6, r0
   150a4:	mov	r7, r1
   150a8:	ldr	r0, [sp, #304]	; 0x130
   150ac:	adds	r0, r9, r0
   150b0:	ldr	r1, [sp, #308]	; 0x134
   150b4:	adc	r1, r8, r1
   150b8:	adds	r2, r0, r6
   150bc:	str	r2, [sp, #28]
   150c0:	adc	r0, r1, r7
   150c4:	str	r0, [sp, #32]
   150c8:	eor	r1, r0, r5
   150cc:	eor	r0, r2, r4
   150d0:	mov	r2, #16
   150d4:	bl	18da8 <__assert_fail@plt+0x7a30>
   150d8:	mov	r3, r0
   150dc:	str	r0, [sp, #148]	; 0x94
   150e0:	mov	r5, r1
   150e4:	str	r1, [sp, #144]	; 0x90
   150e8:	ldr	r0, [sp, #108]	; 0x6c
   150ec:	adds	r2, r3, r0
   150f0:	str	r2, [sp, #108]	; 0x6c
   150f4:	adc	r0, r1, sl
   150f8:	str	r0, [sp, #116]	; 0x74
   150fc:	eor	r1, r0, r7
   15100:	eor	r0, r2, r6
   15104:	ldr	r2, [fp, #-296]	; 0xfffffed8
   15108:	stm	r2, {r3, r5}
   1510c:	mov	r2, #63	; 0x3f
   15110:	bl	18da8 <__assert_fail@plt+0x7a30>
   15114:	str	r0, [sp, #44]	; 0x2c
   15118:	str	r1, [sp, #40]	; 0x28
   1511c:	ldr	r0, [fp, #-304]	; 0xfffffed0
   15120:	ldr	r1, [sp, #16]
   15124:	adds	r0, r1, r0
   15128:	ldr	r1, [fp, #-300]	; 0xfffffed4
   1512c:	ldr	r2, [sp, #20]
   15130:	adc	r1, r2, r1
   15134:	ldr	r6, [sp, #60]	; 0x3c
   15138:	adds	r8, r0, r6
   1513c:	ldr	r7, [sp, #36]	; 0x24
   15140:	adc	sl, r1, r7
   15144:	ldr	r0, [sp, #76]	; 0x4c
   15148:	eor	r1, sl, r0
   1514c:	ldr	r0, [sp, #84]	; 0x54
   15150:	eor	r0, r8, r0
   15154:	mov	r2, #32
   15158:	bl	18da8 <__assert_fail@plt+0x7a30>
   1515c:	mov	r4, r0
   15160:	mov	r5, r1
   15164:	ldr	r0, [sp, #104]	; 0x68
   15168:	adds	r9, r4, r0
   1516c:	ldr	r0, [sp, #112]	; 0x70
   15170:	adc	r0, r1, r0
   15174:	str	r0, [sp, #112]	; 0x70
   15178:	eor	r1, r0, r7
   1517c:	eor	r0, r9, r6
   15180:	mov	r2, #24
   15184:	bl	18da8 <__assert_fail@plt+0x7a30>
   15188:	mov	r7, r0
   1518c:	mov	r6, r1
   15190:	ldr	r0, [sp, #260]	; 0x104
   15194:	adds	r0, r8, r0
   15198:	ldr	r1, [sp, #264]	; 0x108
   1519c:	adc	r1, sl, r1
   151a0:	adds	r2, r0, r7
   151a4:	str	r2, [sp, #76]	; 0x4c
   151a8:	adc	r0, r1, r6
   151ac:	str	r0, [sp, #84]	; 0x54
   151b0:	eor	r1, r0, r5
   151b4:	eor	r0, r2, r4
   151b8:	mov	r2, #16
   151bc:	bl	18da8 <__assert_fail@plt+0x7a30>
   151c0:	str	r0, [sp, #20]
   151c4:	str	r1, [sp, #12]
   151c8:	adds	r2, r0, r9
   151cc:	str	r2, [sp, #104]	; 0x68
   151d0:	ldr	r0, [sp, #112]	; 0x70
   151d4:	adc	r0, r1, r0
   151d8:	str	r0, [sp, #112]	; 0x70
   151dc:	eor	r1, r0, r6
   151e0:	eor	r0, r2, r7
   151e4:	mov	r2, #63	; 0x3f
   151e8:	bl	18da8 <__assert_fail@plt+0x7a30>
   151ec:	str	r0, [sp, #60]	; 0x3c
   151f0:	str	r1, [sp, #56]	; 0x38
   151f4:	ldr	r0, [sp, #152]	; 0x98
   151f8:	ldr	r1, [sp, #212]	; 0xd4
   151fc:	adds	r0, r1, r0
   15200:	ldr	r1, [sp, #156]	; 0x9c
   15204:	ldr	r2, [sp, #216]	; 0xd8
   15208:	adc	r1, r2, r1
   1520c:	ldr	r4, [sp, #52]	; 0x34
   15210:	adds	r8, r0, r4
   15214:	ldr	r5, [sp, #48]	; 0x30
   15218:	adc	r9, r1, r5
   1521c:	ldr	r0, [sp, #72]	; 0x48
   15220:	eor	r1, r9, r0
   15224:	ldr	r0, [sp, #80]	; 0x50
   15228:	eor	r0, r8, r0
   1522c:	mov	r2, #32
   15230:	bl	18da8 <__assert_fail@plt+0x7a30>
   15234:	mov	r6, r0
   15238:	mov	r7, r1
   1523c:	ldr	r0, [sp, #88]	; 0x58
   15240:	adds	sl, r6, r0
   15244:	ldr	r0, [sp, #96]	; 0x60
   15248:	adc	r0, r1, r0
   1524c:	str	r0, [sp, #80]	; 0x50
   15250:	eor	r1, r0, r5
   15254:	eor	r0, sl, r4
   15258:	mov	r2, #24
   1525c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15260:	mov	r5, r0
   15264:	mov	r4, r1
   15268:	adds	r0, r0, r8
   1526c:	adc	r1, r1, r9
   15270:	ldr	r2, [fp, #-160]	; 0xffffff60
   15274:	str	r2, [sp, #216]	; 0xd8
   15278:	ldr	r3, [fp, #-156]	; 0xffffff64
   1527c:	str	r3, [sp, #212]	; 0xd4
   15280:	adds	r2, r0, r2
   15284:	str	r2, [sp, #36]	; 0x24
   15288:	adc	r0, r1, r3
   1528c:	str	r0, [sp, #72]	; 0x48
   15290:	eor	r1, r0, r7
   15294:	eor	r0, r2, r6
   15298:	mov	r2, #16
   1529c:	bl	18da8 <__assert_fail@plt+0x7a30>
   152a0:	str	r0, [sp, #96]	; 0x60
   152a4:	str	r1, [sp, #88]	; 0x58
   152a8:	adds	r2, r0, sl
   152ac:	str	r2, [sp, #8]
   152b0:	ldr	r0, [sp, #80]	; 0x50
   152b4:	adc	r0, r1, r0
   152b8:	str	r0, [sp, #80]	; 0x50
   152bc:	eor	r1, r0, r4
   152c0:	eor	r0, r2, r5
   152c4:	mov	r2, #63	; 0x3f
   152c8:	bl	18da8 <__assert_fail@plt+0x7a30>
   152cc:	str	r0, [sp, #52]	; 0x34
   152d0:	str	r1, [sp, #48]	; 0x30
   152d4:	ldr	r0, [sp, #288]	; 0x120
   152d8:	ldr	r6, [sp, #120]	; 0x78
   152dc:	adds	r0, r6, r0
   152e0:	ldr	r1, [sp, #292]	; 0x124
   152e4:	ldr	r7, [sp, #124]	; 0x7c
   152e8:	adc	r1, r7, r1
   152ec:	ldr	r2, [sp, #160]	; 0xa0
   152f0:	adds	sl, r0, r2
   152f4:	ldr	r0, [sp, #164]	; 0xa4
   152f8:	adc	r8, r1, r0
   152fc:	ldr	r0, [sp, #64]	; 0x40
   15300:	eor	r1, r8, r0
   15304:	ldr	r0, [sp, #68]	; 0x44
   15308:	eor	r0, sl, r0
   1530c:	mov	r2, #32
   15310:	bl	18da8 <__assert_fail@plt+0x7a30>
   15314:	mov	r4, r0
   15318:	mov	r5, r1
   1531c:	ldr	r0, [sp, #92]	; 0x5c
   15320:	adds	r9, r4, r0
   15324:	ldr	r0, [sp, #100]	; 0x64
   15328:	adc	r0, r1, r0
   1532c:	str	r0, [sp, #100]	; 0x64
   15330:	eor	r1, r0, r7
   15334:	eor	r0, r9, r6
   15338:	mov	r2, #24
   1533c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15340:	mov	r6, r0
   15344:	mov	r7, r1
   15348:	adds	r0, r0, sl
   1534c:	adc	r1, r1, r8
   15350:	ldr	r2, [sp, #252]	; 0xfc
   15354:	ldr	r3, [r2]
   15358:	ldr	r2, [r2, #4]
   1535c:	str	r3, [sp, #160]	; 0xa0
   15360:	str	r2, [sp, #164]	; 0xa4
   15364:	adds	r3, r0, r3
   15368:	str	r3, [sp, #68]	; 0x44
   1536c:	adc	r0, r1, r2
   15370:	str	r0, [sp, #124]	; 0x7c
   15374:	eor	r1, r0, r5
   15378:	eor	r0, r3, r4
   1537c:	mov	r2, #16
   15380:	bl	18da8 <__assert_fail@plt+0x7a30>
   15384:	str	r0, [sp, #24]
   15388:	str	r1, [sp, #16]
   1538c:	adds	r2, r0, r9
   15390:	str	r2, [sp, #4]
   15394:	ldr	r0, [sp, #100]	; 0x64
   15398:	adc	r0, r1, r0
   1539c:	str	r0, [sp, #64]	; 0x40
   153a0:	eor	r1, r0, r7
   153a4:	eor	r0, r2, r6
   153a8:	mov	r2, #63	; 0x3f
   153ac:	bl	18da8 <__assert_fail@plt+0x7a30>
   153b0:	mov	r5, r0
   153b4:	mov	r6, r1
   153b8:	ldr	r0, [sp, #136]	; 0x88
   153bc:	ldr	r1, [sp, #28]
   153c0:	adds	r0, r1, r0
   153c4:	ldr	r1, [sp, #140]	; 0x8c
   153c8:	ldr	r2, [sp, #32]
   153cc:	adc	r1, r2, r1
   153d0:	adds	r4, r0, r5
   153d4:	adc	r8, r1, r6
   153d8:	ldr	r0, [sp, #12]
   153dc:	eor	r1, r8, r0
   153e0:	ldr	r0, [sp, #20]
   153e4:	eor	r0, r4, r0
   153e8:	mov	r2, #32
   153ec:	bl	18da8 <__assert_fail@plt+0x7a30>
   153f0:	mov	r7, r0
   153f4:	mov	sl, r1
   153f8:	ldr	r0, [sp, #8]
   153fc:	adds	r9, r7, r0
   15400:	ldr	r0, [sp, #80]	; 0x50
   15404:	adc	r0, r1, r0
   15408:	str	r0, [sp, #140]	; 0x8c
   1540c:	eor	r1, r0, r6
   15410:	eor	r0, r9, r5
   15414:	mov	r2, #24
   15418:	bl	18da8 <__assert_fail@plt+0x7a30>
   1541c:	mov	r5, r0
   15420:	mov	r6, r1
   15424:	ldr	r0, [sp, #216]	; 0xd8
   15428:	adds	r0, r4, r0
   1542c:	ldr	r1, [sp, #212]	; 0xd4
   15430:	adc	r1, r8, r1
   15434:	adds	r2, r0, r5
   15438:	str	r2, [sp, #12]
   1543c:	adc	r0, r1, r6
   15440:	str	r0, [sp, #28]
   15444:	eor	r1, r0, sl
   15448:	eor	r0, r2, r7
   1544c:	mov	r2, #16
   15450:	bl	18da8 <__assert_fail@plt+0x7a30>
   15454:	str	r0, [sp, #120]	; 0x78
   15458:	str	r1, [sp, #80]	; 0x50
   1545c:	adds	r2, r0, r9
   15460:	str	r2, [sp, #92]	; 0x5c
   15464:	ldr	r0, [sp, #140]	; 0x8c
   15468:	adc	r0, r1, r0
   1546c:	str	r0, [sp, #100]	; 0x64
   15470:	eor	r1, r0, r6
   15474:	eor	r0, r2, r5
   15478:	mov	r2, #63	; 0x3f
   1547c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15480:	mov	r3, r0
   15484:	str	r0, [sp, #136]	; 0x88
   15488:	mov	r7, r1
   1548c:	str	r1, [sp, #140]	; 0x8c
   15490:	ldr	r0, [fp, #-304]	; 0xfffffed0
   15494:	ldr	r4, [sp, #44]	; 0x2c
   15498:	adds	r0, r4, r0
   1549c:	ldr	r1, [fp, #-300]	; 0xfffffed4
   154a0:	ldr	r8, [sp, #40]	; 0x28
   154a4:	adc	r1, r8, r1
   154a8:	ldr	r2, [sp, #76]	; 0x4c
   154ac:	adds	r9, r0, r2
   154b0:	ldr	r0, [sp, #84]	; 0x54
   154b4:	adc	sl, r1, r0
   154b8:	ldr	r0, [sp, #88]	; 0x58
   154bc:	eor	r1, r0, sl
   154c0:	ldr	r0, [sp, #96]	; 0x60
   154c4:	eor	r0, r0, r9
   154c8:	ldr	r2, [fp, #-292]	; 0xfffffedc
   154cc:	stm	r2, {r3, r7}
   154d0:	mov	r2, #32
   154d4:	bl	18da8 <__assert_fail@plt+0x7a30>
   154d8:	mov	r5, r0
   154dc:	mov	r6, r1
   154e0:	ldr	r0, [sp, #4]
   154e4:	adds	r2, r5, r0
   154e8:	ldr	r0, [sp, #64]	; 0x40
   154ec:	adc	r0, r1, r0
   154f0:	str	r0, [sp, #96]	; 0x60
   154f4:	eor	r1, r0, r8
   154f8:	eor	r0, r2, r4
   154fc:	mov	r8, r2
   15500:	mov	r2, #24
   15504:	bl	18da8 <__assert_fail@plt+0x7a30>
   15508:	mov	r7, r0
   1550c:	mov	r4, r1
   15510:	ldr	r0, [fp, #-312]	; 0xfffffec8
   15514:	adds	r0, r9, r0
   15518:	ldr	r1, [fp, #-308]	; 0xfffffecc
   1551c:	adc	r1, sl, r1
   15520:	adds	r2, r0, r7
   15524:	str	r2, [sp, #44]	; 0x2c
   15528:	adc	r0, r1, r4
   1552c:	str	r0, [sp, #64]	; 0x40
   15530:	eor	r1, r0, r6
   15534:	eor	r0, r2, r5
   15538:	mov	r2, #16
   1553c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15540:	str	r0, [sp, #84]	; 0x54
   15544:	str	r1, [sp, #76]	; 0x4c
   15548:	adds	r2, r0, r8
   1554c:	str	r2, [sp, #88]	; 0x58
   15550:	ldr	r0, [sp, #96]	; 0x60
   15554:	adc	r0, r1, r0
   15558:	str	r0, [sp, #96]	; 0x60
   1555c:	eor	r1, r0, r4
   15560:	eor	r0, r2, r7
   15564:	mov	r2, #63	; 0x3f
   15568:	bl	18da8 <__assert_fail@plt+0x7a30>
   1556c:	mov	r2, r0
   15570:	str	r0, [sp, #32]
   15574:	mov	r3, r1
   15578:	str	r1, [sp, #20]
   1557c:	ldr	r0, [sp, #280]	; 0x118
   15580:	ldr	r1, [sp, #12]
   15584:	adds	r0, r1, r0
   15588:	ldr	r1, [sp, #284]	; 0x11c
   1558c:	ldr	r7, [sp, #28]
   15590:	adc	r1, r7, r1
   15594:	adds	r0, r0, r2
   15598:	str	r0, [sp, #12]
   1559c:	adc	r0, r1, r3
   155a0:	str	r0, [sp, #8]
   155a4:	ldr	r0, [sp, #236]	; 0xec
   155a8:	ldr	r5, [sp, #60]	; 0x3c
   155ac:	adds	r0, r5, r0
   155b0:	ldr	r1, [sp, #240]	; 0xf0
   155b4:	ldr	r7, [sp, #56]	; 0x38
   155b8:	adc	r1, r7, r1
   155bc:	ldr	r2, [sp, #36]	; 0x24
   155c0:	adds	r8, r0, r2
   155c4:	ldr	r0, [sp, #72]	; 0x48
   155c8:	adc	r9, r1, r0
   155cc:	ldr	r0, [sp, #16]
   155d0:	eor	r1, r0, r9
   155d4:	ldr	r0, [sp, #24]
   155d8:	eor	r0, r0, r8
   155dc:	mov	r2, #32
   155e0:	bl	18da8 <__assert_fail@plt+0x7a30>
   155e4:	mov	r4, r0
   155e8:	mov	r6, r1
   155ec:	ldr	r0, [sp, #108]	; 0x6c
   155f0:	adds	sl, r4, r0
   155f4:	ldr	r0, [sp, #116]	; 0x74
   155f8:	adc	r0, r1, r0
   155fc:	str	r0, [sp, #116]	; 0x74
   15600:	eor	r1, r0, r7
   15604:	eor	r0, sl, r5
   15608:	mov	r2, #24
   1560c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15610:	mov	r5, r0
   15614:	mov	r7, r1
   15618:	ldr	r0, [sp, #152]	; 0x98
   1561c:	adds	r0, r8, r0
   15620:	ldr	r1, [sp, #156]	; 0x9c
   15624:	adc	r1, r9, r1
   15628:	adds	r2, r0, r5
   1562c:	str	r2, [sp, #36]	; 0x24
   15630:	adc	r0, r1, r7
   15634:	str	r0, [sp, #56]	; 0x38
   15638:	eor	r1, r0, r6
   1563c:	eor	r0, r2, r4
   15640:	mov	r2, #16
   15644:	bl	18da8 <__assert_fail@plt+0x7a30>
   15648:	str	r0, [sp, #108]	; 0x6c
   1564c:	str	r1, [sp, #72]	; 0x48
   15650:	adds	r2, r0, sl
   15654:	str	r2, [sp, #152]	; 0x98
   15658:	ldr	r0, [sp, #116]	; 0x74
   1565c:	adc	r0, r1, r0
   15660:	str	r0, [sp, #156]	; 0x9c
   15664:	eor	r1, r0, r7
   15668:	eor	r0, r2, r5
   1566c:	mov	r2, #63	; 0x3f
   15670:	bl	18da8 <__assert_fail@plt+0x7a30>
   15674:	str	r0, [sp, #60]	; 0x3c
   15678:	str	r1, [sp, #24]
   1567c:	ldr	r0, [sp, #260]	; 0x104
   15680:	ldr	r4, [sp, #52]	; 0x34
   15684:	adds	r0, r4, r0
   15688:	ldr	r1, [sp, #264]	; 0x108
   1568c:	ldr	r6, [sp, #48]	; 0x30
   15690:	adc	r1, r6, r1
   15694:	ldr	r2, [sp, #68]	; 0x44
   15698:	adds	r9, r0, r2
   1569c:	ldr	r0, [sp, #124]	; 0x7c
   156a0:	adc	r8, r1, r0
   156a4:	ldr	r0, [sp, #144]	; 0x90
   156a8:	eor	r1, r8, r0
   156ac:	ldr	r0, [sp, #148]	; 0x94
   156b0:	eor	r0, r9, r0
   156b4:	mov	r2, #32
   156b8:	bl	18da8 <__assert_fail@plt+0x7a30>
   156bc:	mov	r5, r0
   156c0:	mov	r7, r1
   156c4:	ldr	r0, [sp, #104]	; 0x68
   156c8:	adds	sl, r5, r0
   156cc:	ldr	r0, [sp, #112]	; 0x70
   156d0:	adc	r0, r1, r0
   156d4:	str	r0, [sp, #148]	; 0x94
   156d8:	eor	r1, r0, r6
   156dc:	eor	r0, sl, r4
   156e0:	mov	r2, #24
   156e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   156e8:	mov	r6, r0
   156ec:	mov	r4, r1
   156f0:	ldr	r0, [sp, #288]	; 0x120
   156f4:	adds	r0, r9, r0
   156f8:	ldr	r1, [sp, #292]	; 0x124
   156fc:	adc	r1, r8, r1
   15700:	adds	r2, r0, r6
   15704:	str	r2, [sp, #28]
   15708:	adc	r0, r1, r4
   1570c:	str	r0, [sp, #40]	; 0x28
   15710:	eor	r1, r0, r7
   15714:	eor	r0, r2, r5
   15718:	mov	r2, #16
   1571c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15720:	mov	r5, r0
   15724:	mov	r7, r1
   15728:	adds	r2, r0, sl
   1572c:	str	r2, [sp, #68]	; 0x44
   15730:	ldr	r0, [sp, #148]	; 0x94
   15734:	adc	r0, r1, r0
   15738:	str	r0, [sp, #112]	; 0x70
   1573c:	eor	r1, r0, r4
   15740:	eor	r0, r2, r6
   15744:	mov	r2, #63	; 0x3f
   15748:	bl	18da8 <__assert_fail@plt+0x7a30>
   1574c:	str	r0, [sp, #48]	; 0x30
   15750:	str	r1, [sp, #16]
   15754:	ldr	r8, [sp, #8]
   15758:	eor	r1, r7, r8
   1575c:	ldr	r9, [sp, #12]
   15760:	eor	r0, r5, r9
   15764:	mov	r2, #32
   15768:	bl	18da8 <__assert_fail@plt+0x7a30>
   1576c:	mov	r4, r0
   15770:	mov	r5, r1
   15774:	ldr	r0, [sp, #152]	; 0x98
   15778:	adds	r2, r4, r0
   1577c:	str	r2, [sp, #124]	; 0x7c
   15780:	ldr	r0, [sp, #156]	; 0x9c
   15784:	adc	sl, r1, r0
   15788:	ldr	r0, [sp, #20]
   1578c:	eor	r1, sl, r0
   15790:	ldr	r0, [sp, #32]
   15794:	eor	r0, r2, r0
   15798:	mov	r2, #24
   1579c:	bl	18da8 <__assert_fail@plt+0x7a30>
   157a0:	mov	r6, r0
   157a4:	mov	r7, r1
   157a8:	ldr	r0, [sp, #312]	; 0x138
   157ac:	adds	r0, r9, r0
   157b0:	ldr	r1, [sp, #316]	; 0x13c
   157b4:	adc	r1, r8, r1
   157b8:	adds	r2, r0, r6
   157bc:	str	r2, [sp, #144]	; 0x90
   157c0:	adc	r0, r1, r7
   157c4:	str	r0, [sp, #148]	; 0x94
   157c8:	eor	r1, r0, r5
   157cc:	eor	r0, r2, r4
   157d0:	mov	r2, #16
   157d4:	bl	18da8 <__assert_fail@plt+0x7a30>
   157d8:	mov	r3, r0
   157dc:	str	r0, [sp, #156]	; 0x9c
   157e0:	mov	r5, r1
   157e4:	str	r1, [sp, #152]	; 0x98
   157e8:	ldr	r0, [sp, #124]	; 0x7c
   157ec:	adds	r2, r3, r0
   157f0:	str	r2, [sp, #116]	; 0x74
   157f4:	adc	r0, r1, sl
   157f8:	str	r0, [sp, #124]	; 0x7c
   157fc:	eor	r1, r0, r7
   15800:	eor	r0, r2, r6
   15804:	ldr	r2, [fp, #-296]	; 0xfffffed8
   15808:	stm	r2, {r3, r5}
   1580c:	mov	r2, #63	; 0x3f
   15810:	bl	18da8 <__assert_fail@plt+0x7a30>
   15814:	str	r0, [sp, #104]	; 0x68
   15818:	str	r1, [sp, #52]	; 0x34
   1581c:	ldr	r0, [sp, #228]	; 0xe4
   15820:	ldr	r1, [sp, #44]	; 0x2c
   15824:	adds	r0, r1, r0
   15828:	ldr	r1, [sp, #232]	; 0xe8
   1582c:	ldr	r2, [sp, #64]	; 0x40
   15830:	adc	r1, r2, r1
   15834:	ldr	r6, [sp, #60]	; 0x3c
   15838:	adds	r9, r0, r6
   1583c:	ldr	r7, [sp, #24]
   15840:	adc	sl, r1, r7
   15844:	ldr	r0, [sp, #80]	; 0x50
   15848:	eor	r1, sl, r0
   1584c:	ldr	r0, [sp, #120]	; 0x78
   15850:	eor	r0, r9, r0
   15854:	mov	r2, #32
   15858:	bl	18da8 <__assert_fail@plt+0x7a30>
   1585c:	mov	r4, r0
   15860:	mov	r5, r1
   15864:	ldr	r0, [sp, #68]	; 0x44
   15868:	adds	r2, r4, r0
   1586c:	ldr	r0, [sp, #112]	; 0x70
   15870:	adc	r0, r1, r0
   15874:	str	r0, [sp, #120]	; 0x78
   15878:	eor	r1, r0, r7
   1587c:	eor	r0, r2, r6
   15880:	mov	r7, r2
   15884:	mov	r2, #24
   15888:	bl	18da8 <__assert_fail@plt+0x7a30>
   1588c:	mov	r6, r0
   15890:	mov	r8, r1
   15894:	ldr	r0, [sp, #296]	; 0x128
   15898:	adds	r0, r9, r0
   1589c:	ldr	r1, [sp, #300]	; 0x12c
   158a0:	adc	r1, sl, r1
   158a4:	adds	r2, r0, r6
   158a8:	str	r2, [sp, #32]
   158ac:	adc	r0, r1, r8
   158b0:	str	r0, [sp, #80]	; 0x50
   158b4:	eor	r1, r0, r5
   158b8:	eor	r0, r2, r4
   158bc:	mov	r2, #16
   158c0:	bl	18da8 <__assert_fail@plt+0x7a30>
   158c4:	str	r0, [sp, #24]
   158c8:	str	r1, [sp, #12]
   158cc:	adds	r2, r0, r7
   158d0:	str	r2, [sp, #112]	; 0x70
   158d4:	ldr	r0, [sp, #120]	; 0x78
   158d8:	adc	r0, r1, r0
   158dc:	str	r0, [sp, #120]	; 0x78
   158e0:	eor	r1, r0, r8
   158e4:	eor	r0, r2, r6
   158e8:	mov	r2, #63	; 0x3f
   158ec:	bl	18da8 <__assert_fail@plt+0x7a30>
   158f0:	str	r0, [sp, #68]	; 0x44
   158f4:	str	r1, [sp, #60]	; 0x3c
   158f8:	ldr	r0, [sp, #304]	; 0x130
   158fc:	ldr	r1, [sp, #36]	; 0x24
   15900:	adds	r0, r1, r0
   15904:	ldr	r1, [sp, #308]	; 0x134
   15908:	ldr	r2, [sp, #56]	; 0x38
   1590c:	adc	r1, r2, r1
   15910:	ldr	r6, [sp, #48]	; 0x30
   15914:	adds	r8, r0, r6
   15918:	ldr	r7, [sp, #16]
   1591c:	adc	r9, r1, r7
   15920:	ldr	r0, [sp, #76]	; 0x4c
   15924:	eor	r1, r9, r0
   15928:	ldr	r0, [sp, #84]	; 0x54
   1592c:	eor	r0, r8, r0
   15930:	mov	r2, #32
   15934:	bl	18da8 <__assert_fail@plt+0x7a30>
   15938:	mov	r4, r0
   1593c:	mov	r5, r1
   15940:	ldr	r0, [sp, #92]	; 0x5c
   15944:	adds	sl, r4, r0
   15948:	ldr	r0, [sp, #100]	; 0x64
   1594c:	adc	r0, r1, r0
   15950:	str	r0, [sp, #100]	; 0x64
   15954:	eor	r1, r0, r7
   15958:	eor	r0, sl, r6
   1595c:	mov	r2, #24
   15960:	bl	18da8 <__assert_fail@plt+0x7a30>
   15964:	mov	r6, r0
   15968:	mov	r7, r1
   1596c:	ldr	r0, [sp, #160]	; 0xa0
   15970:	adds	r0, r8, r0
   15974:	ldr	r1, [sp, #164]	; 0xa4
   15978:	adc	r1, r9, r1
   1597c:	adds	r2, r0, r6
   15980:	str	r2, [sp, #44]	; 0x2c
   15984:	adc	r0, r1, r7
   15988:	str	r0, [sp, #48]	; 0x30
   1598c:	eor	r1, r0, r5
   15990:	eor	r0, r2, r4
   15994:	mov	r2, #16
   15998:	bl	18da8 <__assert_fail@plt+0x7a30>
   1599c:	str	r0, [sp, #20]
   159a0:	str	r1, [sp, #8]
   159a4:	adds	r2, r0, sl
   159a8:	str	r2, [sp, #4]
   159ac:	ldr	r0, [sp, #100]	; 0x64
   159b0:	adc	r0, r1, r0
   159b4:	str	r0, [sp, #76]	; 0x4c
   159b8:	eor	r1, r0, r7
   159bc:	eor	r0, r2, r6
   159c0:	mov	r2, #63	; 0x3f
   159c4:	bl	18da8 <__assert_fail@plt+0x7a30>
   159c8:	str	r0, [sp, #64]	; 0x40
   159cc:	str	r1, [sp, #56]	; 0x38
   159d0:	ldr	r5, [sp, #136]	; 0x88
   159d4:	ldr	r0, [sp, #28]
   159d8:	adds	r0, r0, r5
   159dc:	ldr	r7, [sp, #140]	; 0x8c
   159e0:	ldr	r1, [sp, #40]	; 0x28
   159e4:	adc	r1, r1, r7
   159e8:	ldr	r2, [sp, #276]	; 0x114
   159ec:	ldr	r3, [r2]
   159f0:	ldr	r2, [r2, #4]
   159f4:	str	r3, [sp, #84]	; 0x54
   159f8:	str	r2, [sp, #92]	; 0x5c
   159fc:	adds	r8, r0, r3
   15a00:	adc	sl, r1, r2
   15a04:	ldr	r0, [sp, #72]	; 0x48
   15a08:	eor	r1, sl, r0
   15a0c:	ldr	r0, [sp, #108]	; 0x6c
   15a10:	eor	r0, r8, r0
   15a14:	mov	r2, #32
   15a18:	bl	18da8 <__assert_fail@plt+0x7a30>
   15a1c:	mov	r4, r0
   15a20:	mov	r6, r1
   15a24:	ldr	r0, [sp, #88]	; 0x58
   15a28:	adds	r9, r4, r0
   15a2c:	ldr	r0, [sp, #96]	; 0x60
   15a30:	adc	r0, r1, r0
   15a34:	str	r0, [sp, #108]	; 0x6c
   15a38:	eor	r1, r0, r7
   15a3c:	eor	r0, r9, r5
   15a40:	mov	r2, #24
   15a44:	bl	18da8 <__assert_fail@plt+0x7a30>
   15a48:	mov	r7, r0
   15a4c:	mov	r5, r1
   15a50:	adds	r0, r0, r8
   15a54:	adc	r1, r1, sl
   15a58:	ldr	r2, [sp, #256]	; 0x100
   15a5c:	ldr	r3, [r2]
   15a60:	ldr	r2, [r2, #4]
   15a64:	str	r3, [sp, #96]	; 0x60
   15a68:	str	r2, [sp, #100]	; 0x64
   15a6c:	adds	r3, r0, r3
   15a70:	str	r3, [sp, #36]	; 0x24
   15a74:	adc	r0, r1, r2
   15a78:	str	r0, [sp, #40]	; 0x28
   15a7c:	eor	r1, r0, r6
   15a80:	eor	r0, r3, r4
   15a84:	mov	r2, #16
   15a88:	bl	18da8 <__assert_fail@plt+0x7a30>
   15a8c:	str	r0, [sp, #28]
   15a90:	str	r1, [sp, #16]
   15a94:	adds	r2, r0, r9
   15a98:	str	r2, [sp, #72]	; 0x48
   15a9c:	ldr	r0, [sp, #108]	; 0x6c
   15aa0:	adc	r0, r1, r0
   15aa4:	str	r0, [sp, #136]	; 0x88
   15aa8:	eor	r1, r0, r5
   15aac:	eor	r0, r2, r7
   15ab0:	mov	r2, #63	; 0x3f
   15ab4:	bl	18da8 <__assert_fail@plt+0x7a30>
   15ab8:	mov	r5, r0
   15abc:	mov	r6, r1
   15ac0:	ldr	r0, [sp, #236]	; 0xec
   15ac4:	ldr	r1, [sp, #144]	; 0x90
   15ac8:	adds	r0, r1, r0
   15acc:	ldr	r1, [sp, #240]	; 0xf0
   15ad0:	ldr	r2, [sp, #148]	; 0x94
   15ad4:	adc	r1, r2, r1
   15ad8:	adds	r4, r0, r5
   15adc:	adc	r8, r1, r6
   15ae0:	ldr	r0, [sp, #12]
   15ae4:	eor	r1, r8, r0
   15ae8:	ldr	r0, [sp, #24]
   15aec:	eor	r0, r4, r0
   15af0:	mov	r2, #32
   15af4:	bl	18da8 <__assert_fail@plt+0x7a30>
   15af8:	mov	r7, r0
   15afc:	mov	sl, r1
   15b00:	ldr	r0, [sp, #4]
   15b04:	adds	r9, r7, r0
   15b08:	ldr	r0, [sp, #76]	; 0x4c
   15b0c:	adc	r0, r1, r0
   15b10:	str	r0, [sp, #240]	; 0xf0
   15b14:	eor	r1, r0, r6
   15b18:	eor	r0, r9, r5
   15b1c:	mov	r2, #24
   15b20:	bl	18da8 <__assert_fail@plt+0x7a30>
   15b24:	mov	r5, r0
   15b28:	mov	r6, r1
   15b2c:	ldr	r0, [sp, #296]	; 0x128
   15b30:	adds	r0, r4, r0
   15b34:	ldr	r1, [sp, #300]	; 0x12c
   15b38:	adc	r1, r8, r1
   15b3c:	adds	r2, r0, r5
   15b40:	str	r2, [sp, #24]
   15b44:	adc	r0, r1, r6
   15b48:	str	r0, [sp, #12]
   15b4c:	eor	r1, r0, sl
   15b50:	eor	r0, r2, r7
   15b54:	mov	r2, #16
   15b58:	bl	18da8 <__assert_fail@plt+0x7a30>
   15b5c:	str	r0, [sp, #88]	; 0x58
   15b60:	str	r1, [sp, #76]	; 0x4c
   15b64:	adds	r2, r0, r9
   15b68:	str	r2, [sp, #108]	; 0x6c
   15b6c:	ldr	r0, [sp, #240]	; 0xf0
   15b70:	adc	r0, r1, r0
   15b74:	str	r0, [sp, #140]	; 0x8c
   15b78:	eor	r1, r0, r6
   15b7c:	eor	r0, r2, r5
   15b80:	mov	r2, #63	; 0x3f
   15b84:	bl	18da8 <__assert_fail@plt+0x7a30>
   15b88:	mov	r3, r0
   15b8c:	str	r0, [sp, #144]	; 0x90
   15b90:	mov	r7, r1
   15b94:	str	r1, [sp, #148]	; 0x94
   15b98:	ldr	r0, [sp, #304]	; 0x130
   15b9c:	ldr	r4, [sp, #104]	; 0x68
   15ba0:	adds	r0, r4, r0
   15ba4:	ldr	r1, [sp, #308]	; 0x134
   15ba8:	ldr	r8, [sp, #52]	; 0x34
   15bac:	adc	r1, r8, r1
   15bb0:	ldr	r2, [sp, #32]
   15bb4:	adds	r9, r0, r2
   15bb8:	ldr	r0, [sp, #80]	; 0x50
   15bbc:	adc	sl, r1, r0
   15bc0:	ldr	r0, [sp, #8]
   15bc4:	eor	r1, r0, sl
   15bc8:	ldr	r0, [sp, #20]
   15bcc:	eor	r0, r0, r9
   15bd0:	ldr	r2, [fp, #-292]	; 0xfffffedc
   15bd4:	stm	r2, {r3, r7}
   15bd8:	mov	r2, #32
   15bdc:	bl	18da8 <__assert_fail@plt+0x7a30>
   15be0:	mov	r5, r0
   15be4:	mov	r6, r1
   15be8:	ldr	r0, [sp, #72]	; 0x48
   15bec:	adds	r2, r5, r0
   15bf0:	ldr	r0, [sp, #136]	; 0x88
   15bf4:	adc	r0, r1, r0
   15bf8:	str	r0, [sp, #240]	; 0xf0
   15bfc:	eor	r1, r0, r8
   15c00:	eor	r0, r2, r4
   15c04:	mov	r8, r2
   15c08:	mov	r2, #24
   15c0c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15c10:	mov	r7, r0
   15c14:	mov	r4, r1
   15c18:	ldr	r0, [sp, #260]	; 0x104
   15c1c:	adds	r0, r9, r0
   15c20:	ldr	r1, [sp, #264]	; 0x108
   15c24:	adc	r1, sl, r1
   15c28:	adds	r2, r0, r7
   15c2c:	str	r2, [sp, #32]
   15c30:	adc	r0, r1, r4
   15c34:	str	r0, [sp, #52]	; 0x34
   15c38:	eor	r1, r0, r6
   15c3c:	eor	r0, r2, r5
   15c40:	mov	r2, #16
   15c44:	bl	18da8 <__assert_fail@plt+0x7a30>
   15c48:	str	r0, [sp, #80]	; 0x50
   15c4c:	str	r1, [sp, #72]	; 0x48
   15c50:	adds	r2, r0, r8
   15c54:	str	r2, [sp, #104]	; 0x68
   15c58:	ldr	r0, [sp, #240]	; 0xf0
   15c5c:	adc	r0, r1, r0
   15c60:	str	r0, [sp, #136]	; 0x88
   15c64:	eor	r1, r0, r4
   15c68:	eor	r0, r2, r7
   15c6c:	mov	r2, #63	; 0x3f
   15c70:	bl	18da8 <__assert_fail@plt+0x7a30>
   15c74:	str	r0, [sp, #240]	; 0xf0
   15c78:	str	r1, [sp, #236]	; 0xec
   15c7c:	ldr	r2, [sp, #24]
   15c80:	adds	r0, r0, r2
   15c84:	str	r0, [sp, #24]
   15c88:	ldr	r0, [sp, #12]
   15c8c:	adc	r0, r1, r0
   15c90:	str	r0, [sp, #20]
   15c94:	ldr	r0, [sp, #216]	; 0xd8
   15c98:	ldr	r5, [sp, #68]	; 0x44
   15c9c:	adds	r0, r5, r0
   15ca0:	ldr	r1, [sp, #212]	; 0xd4
   15ca4:	ldr	r7, [sp, #60]	; 0x3c
   15ca8:	adc	r1, r7, r1
   15cac:	ldr	r2, [sp, #44]	; 0x2c
   15cb0:	adds	r8, r0, r2
   15cb4:	ldr	r0, [sp, #48]	; 0x30
   15cb8:	adc	r9, r1, r0
   15cbc:	ldr	r0, [sp, #16]
   15cc0:	eor	r1, r0, r9
   15cc4:	ldr	r0, [sp, #28]
   15cc8:	eor	r0, r0, r8
   15ccc:	mov	r2, #32
   15cd0:	bl	18da8 <__assert_fail@plt+0x7a30>
   15cd4:	mov	r4, r0
   15cd8:	mov	r6, r1
   15cdc:	ldr	r0, [sp, #116]	; 0x74
   15ce0:	adds	sl, r4, r0
   15ce4:	ldr	r0, [sp, #124]	; 0x7c
   15ce8:	adc	r0, r1, r0
   15cec:	str	r0, [sp, #216]	; 0xd8
   15cf0:	eor	r1, r0, r7
   15cf4:	eor	r0, sl, r5
   15cf8:	mov	r2, #24
   15cfc:	bl	18da8 <__assert_fail@plt+0x7a30>
   15d00:	mov	r7, r0
   15d04:	mov	r5, r1
   15d08:	ldr	r0, [sp, #228]	; 0xe4
   15d0c:	adds	r0, r8, r0
   15d10:	ldr	r1, [sp, #232]	; 0xe8
   15d14:	adc	r1, r9, r1
   15d18:	adds	r2, r0, r7
   15d1c:	str	r2, [sp, #48]	; 0x30
   15d20:	adc	r0, r1, r5
   15d24:	str	r0, [sp, #60]	; 0x3c
   15d28:	eor	r1, r0, r6
   15d2c:	eor	r0, r2, r4
   15d30:	mov	r2, #16
   15d34:	bl	18da8 <__assert_fail@plt+0x7a30>
   15d38:	str	r0, [sp, #232]	; 0xe8
   15d3c:	str	r1, [sp, #228]	; 0xe4
   15d40:	adds	r2, r0, sl
   15d44:	str	r2, [sp, #116]	; 0x74
   15d48:	ldr	r0, [sp, #216]	; 0xd8
   15d4c:	adc	r0, r1, r0
   15d50:	str	r0, [sp, #212]	; 0xd4
   15d54:	eor	r1, r0, r5
   15d58:	eor	r0, r2, r7
   15d5c:	mov	r2, #63	; 0x3f
   15d60:	bl	18da8 <__assert_fail@plt+0x7a30>
   15d64:	str	r0, [sp, #216]	; 0xd8
   15d68:	str	r1, [sp, #124]	; 0x7c
   15d6c:	ldr	r0, [sp, #160]	; 0xa0
   15d70:	ldr	r4, [sp, #64]	; 0x40
   15d74:	adds	r0, r4, r0
   15d78:	ldr	r1, [sp, #164]	; 0xa4
   15d7c:	ldr	r6, [sp, #56]	; 0x38
   15d80:	adc	r1, r6, r1
   15d84:	ldr	r2, [sp, #36]	; 0x24
   15d88:	adds	r9, r0, r2
   15d8c:	ldr	r0, [sp, #40]	; 0x28
   15d90:	adc	r8, r1, r0
   15d94:	ldr	r0, [sp, #152]	; 0x98
   15d98:	eor	r1, r8, r0
   15d9c:	ldr	r0, [sp, #156]	; 0x9c
   15da0:	eor	r0, r9, r0
   15da4:	mov	r2, #32
   15da8:	bl	18da8 <__assert_fail@plt+0x7a30>
   15dac:	mov	r5, r0
   15db0:	mov	r7, r1
   15db4:	ldr	r0, [sp, #112]	; 0x70
   15db8:	adds	sl, r5, r0
   15dbc:	ldr	r0, [sp, #120]	; 0x78
   15dc0:	adc	r0, r1, r0
   15dc4:	str	r0, [sp, #164]	; 0xa4
   15dc8:	eor	r1, r0, r6
   15dcc:	eor	r0, sl, r4
   15dd0:	mov	r2, #24
   15dd4:	bl	18da8 <__assert_fail@plt+0x7a30>
   15dd8:	mov	r6, r0
   15ddc:	mov	r4, r1
   15de0:	ldr	r0, [sp, #84]	; 0x54
   15de4:	adds	r0, r9, r0
   15de8:	ldr	r1, [sp, #92]	; 0x5c
   15dec:	adc	r1, r8, r1
   15df0:	adds	r2, r0, r6
   15df4:	str	r2, [sp, #68]	; 0x44
   15df8:	adc	r0, r1, r4
   15dfc:	str	r0, [sp, #152]	; 0x98
   15e00:	eor	r1, r0, r7
   15e04:	eor	r0, r2, r5
   15e08:	mov	r2, #16
   15e0c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15e10:	mov	r5, r0
   15e14:	mov	r7, r1
   15e18:	adds	r2, r0, sl
   15e1c:	str	r2, [sp, #112]	; 0x70
   15e20:	ldr	r0, [sp, #164]	; 0xa4
   15e24:	adc	r0, r1, r0
   15e28:	str	r0, [sp, #164]	; 0xa4
   15e2c:	eor	r1, r0, r4
   15e30:	eor	r0, r2, r6
   15e34:	mov	r2, #63	; 0x3f
   15e38:	bl	18da8 <__assert_fail@plt+0x7a30>
   15e3c:	str	r0, [sp, #92]	; 0x5c
   15e40:	str	r1, [sp, #44]	; 0x2c
   15e44:	ldr	r0, [sp, #268]	; 0x10c
   15e48:	ldrd	r0, [r0]
   15e4c:	ldr	r2, [sp, #24]
   15e50:	adds	r8, r2, r0
   15e54:	ldr	r0, [sp, #20]
   15e58:	adc	sl, r0, r1
   15e5c:	eor	r1, sl, r7
   15e60:	eor	r0, r8, r5
   15e64:	mov	r2, #32
   15e68:	bl	18da8 <__assert_fail@plt+0x7a30>
   15e6c:	mov	r5, r0
   15e70:	mov	r6, r1
   15e74:	ldr	r0, [sp, #116]	; 0x74
   15e78:	adds	r9, r5, r0
   15e7c:	ldr	r0, [sp, #212]	; 0xd4
   15e80:	adc	r1, r1, r0
   15e84:	str	r1, [sp, #212]	; 0xd4
   15e88:	ldr	r0, [sp, #236]	; 0xec
   15e8c:	eor	r1, r1, r0
   15e90:	ldr	r0, [sp, #240]	; 0xf0
   15e94:	eor	r0, r9, r0
   15e98:	mov	r2, #24
   15e9c:	bl	18da8 <__assert_fail@plt+0x7a30>
   15ea0:	mov	r7, r0
   15ea4:	mov	r4, r1
   15ea8:	ldr	r0, [sp, #96]	; 0x60
   15eac:	adds	r0, r8, r0
   15eb0:	ldr	r1, [sp, #100]	; 0x64
   15eb4:	adc	r1, sl, r1
   15eb8:	adds	r2, r0, r7
   15ebc:	str	r2, [sp, #64]	; 0x40
   15ec0:	adc	r0, r1, r4
   15ec4:	str	r0, [sp, #116]	; 0x74
   15ec8:	eor	r1, r0, r6
   15ecc:	eor	r0, r2, r5
   15ed0:	mov	r2, #16
   15ed4:	bl	18da8 <__assert_fail@plt+0x7a30>
   15ed8:	mov	r3, r0
   15edc:	str	r0, [sp, #240]	; 0xf0
   15ee0:	mov	r6, r1
   15ee4:	str	r1, [sp, #236]	; 0xec
   15ee8:	adds	r2, r0, r9
   15eec:	str	r2, [sp, #160]	; 0xa0
   15ef0:	ldr	r0, [sp, #212]	; 0xd4
   15ef4:	adc	r0, r1, r0
   15ef8:	str	r0, [sp, #212]	; 0xd4
   15efc:	eor	r1, r0, r4
   15f00:	eor	r0, r2, r7
   15f04:	ldr	r2, [fp, #-296]	; 0xfffffed8
   15f08:	stm	r2, {r3, r6}
   15f0c:	mov	r2, #63	; 0x3f
   15f10:	bl	18da8 <__assert_fail@plt+0x7a30>
   15f14:	str	r0, [sp, #156]	; 0x9c
   15f18:	str	r1, [sp, #120]	; 0x78
   15f1c:	ldr	r0, [fp, #-312]	; 0xfffffec8
   15f20:	ldr	r1, [sp, #32]
   15f24:	adds	r0, r1, r0
   15f28:	ldr	r1, [fp, #-308]	; 0xfffffecc
   15f2c:	ldr	r2, [sp, #52]	; 0x34
   15f30:	adc	r1, r2, r1
   15f34:	ldr	r6, [sp, #216]	; 0xd8
   15f38:	adds	r8, r0, r6
   15f3c:	ldr	r7, [sp, #124]	; 0x7c
   15f40:	adc	r9, r1, r7
   15f44:	ldr	r0, [sp, #76]	; 0x4c
   15f48:	eor	r1, r9, r0
   15f4c:	ldr	r0, [sp, #88]	; 0x58
   15f50:	eor	r0, r8, r0
   15f54:	mov	r2, #32
   15f58:	bl	18da8 <__assert_fail@plt+0x7a30>
   15f5c:	mov	r4, r0
   15f60:	mov	r5, r1
   15f64:	ldr	r0, [sp, #112]	; 0x70
   15f68:	adds	sl, r4, r0
   15f6c:	ldr	r0, [sp, #164]	; 0xa4
   15f70:	adc	r0, r1, r0
   15f74:	str	r0, [sp, #112]	; 0x70
   15f78:	eor	r1, r0, r7
   15f7c:	eor	r0, sl, r6
   15f80:	mov	r2, #24
   15f84:	bl	18da8 <__assert_fail@plt+0x7a30>
   15f88:	mov	r6, r0
   15f8c:	mov	r7, r1
   15f90:	ldr	r0, [fp, #-304]	; 0xfffffed0
   15f94:	adds	r0, r8, r0
   15f98:	ldr	r1, [fp, #-300]	; 0xfffffed4
   15f9c:	adc	r1, r9, r1
   15fa0:	adds	r2, r0, r6
   15fa4:	str	r2, [sp, #76]	; 0x4c
   15fa8:	adc	r0, r1, r7
   15fac:	str	r0, [sp, #84]	; 0x54
   15fb0:	eor	r1, r0, r5
   15fb4:	eor	r0, r2, r4
   15fb8:	mov	r2, #16
   15fbc:	bl	18da8 <__assert_fail@plt+0x7a30>
   15fc0:	str	r0, [sp, #56]	; 0x38
   15fc4:	str	r1, [sp, #52]	; 0x34
   15fc8:	adds	r2, r0, sl
   15fcc:	str	r2, [sp, #164]	; 0xa4
   15fd0:	ldr	r0, [sp, #112]	; 0x70
   15fd4:	adc	r0, r1, r0
   15fd8:	str	r0, [sp, #216]	; 0xd8
   15fdc:	eor	r1, r0, r7
   15fe0:	eor	r0, r2, r6
   15fe4:	mov	r2, #63	; 0x3f
   15fe8:	bl	18da8 <__assert_fail@plt+0x7a30>
   15fec:	str	r0, [sp, #124]	; 0x7c
   15ff0:	str	r1, [sp, #112]	; 0x70
   15ff4:	ldr	r0, [sp, #288]	; 0x120
   15ff8:	ldr	r1, [sp, #48]	; 0x30
   15ffc:	adds	r0, r1, r0
   16000:	ldr	r1, [sp, #292]	; 0x124
   16004:	ldr	r2, [sp, #60]	; 0x3c
   16008:	adc	r1, r2, r1
   1600c:	ldr	r5, [sp, #92]	; 0x5c
   16010:	adds	r8, r0, r5
   16014:	ldr	r7, [sp, #44]	; 0x2c
   16018:	adc	r9, r1, r7
   1601c:	ldr	r0, [sp, #72]	; 0x48
   16020:	eor	r1, r9, r0
   16024:	ldr	r0, [sp, #80]	; 0x50
   16028:	eor	r0, r8, r0
   1602c:	mov	r2, #32
   16030:	bl	18da8 <__assert_fail@plt+0x7a30>
   16034:	mov	r4, r0
   16038:	mov	r6, r1
   1603c:	ldr	r0, [sp, #108]	; 0x6c
   16040:	adds	sl, r4, r0
   16044:	ldr	r0, [sp, #140]	; 0x8c
   16048:	adc	r0, r1, r0
   1604c:	str	r0, [sp, #108]	; 0x6c
   16050:	eor	r1, r0, r7
   16054:	eor	r0, sl, r5
   16058:	mov	r2, #24
   1605c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16060:	mov	r7, r0
   16064:	mov	r5, r1
   16068:	ldr	r0, [sp, #280]	; 0x118
   1606c:	adds	r0, r8, r0
   16070:	ldr	r1, [sp, #284]	; 0x11c
   16074:	adc	r1, r9, r1
   16078:	adds	r2, r0, r7
   1607c:	str	r2, [sp, #92]	; 0x5c
   16080:	adc	r0, r1, r5
   16084:	str	r0, [sp, #96]	; 0x60
   16088:	eor	r1, r0, r6
   1608c:	eor	r0, r2, r4
   16090:	mov	r2, #16
   16094:	bl	18da8 <__assert_fail@plt+0x7a30>
   16098:	str	r0, [sp, #140]	; 0x8c
   1609c:	str	r1, [sp, #60]	; 0x3c
   160a0:	adds	r2, r0, sl
   160a4:	str	r2, [sp, #44]	; 0x2c
   160a8:	ldr	r0, [sp, #108]	; 0x6c
   160ac:	adc	r0, r1, r0
   160b0:	str	r0, [sp, #48]	; 0x30
   160b4:	eor	r1, r0, r5
   160b8:	eor	r0, r2, r7
   160bc:	mov	r2, #63	; 0x3f
   160c0:	bl	18da8 <__assert_fail@plt+0x7a30>
   160c4:	str	r0, [sp, #108]	; 0x6c
   160c8:	str	r1, [sp, #100]	; 0x64
   160cc:	ldr	r0, [sp, #312]	; 0x138
   160d0:	ldr	r6, [sp, #144]	; 0x90
   160d4:	adds	r0, r6, r0
   160d8:	ldr	r1, [sp, #316]	; 0x13c
   160dc:	ldr	r4, [sp, #148]	; 0x94
   160e0:	adc	r1, r4, r1
   160e4:	ldr	r2, [sp, #68]	; 0x44
   160e8:	adds	sl, r0, r2
   160ec:	ldr	r0, [sp, #152]	; 0x98
   160f0:	adc	r9, r1, r0
   160f4:	ldr	r0, [sp, #228]	; 0xe4
   160f8:	eor	r1, r9, r0
   160fc:	ldr	r0, [sp, #232]	; 0xe8
   16100:	eor	r0, sl, r0
   16104:	mov	r2, #32
   16108:	bl	18da8 <__assert_fail@plt+0x7a30>
   1610c:	mov	r5, r0
   16110:	mov	r7, r1
   16114:	ldr	r0, [sp, #104]	; 0x68
   16118:	adds	r2, r5, r0
   1611c:	ldr	r0, [sp, #136]	; 0x88
   16120:	adc	r0, r1, r0
   16124:	str	r0, [sp, #232]	; 0xe8
   16128:	eor	r1, r0, r4
   1612c:	eor	r0, r2, r6
   16130:	mov	r4, r2
   16134:	mov	r2, #24
   16138:	bl	18da8 <__assert_fail@plt+0x7a30>
   1613c:	mov	r6, r0
   16140:	mov	r8, r1
   16144:	adds	r0, r0, sl
   16148:	adc	r1, r1, r9
   1614c:	ldr	r2, [sp, #272]	; 0x110
   16150:	ldrd	r2, [r2]
   16154:	adds	r2, r0, r2
   16158:	str	r2, [sp, #80]	; 0x50
   1615c:	adc	r0, r1, r3
   16160:	str	r0, [sp, #88]	; 0x58
   16164:	eor	r1, r0, r7
   16168:	eor	r0, r2, r5
   1616c:	mov	r2, #16
   16170:	bl	18da8 <__assert_fail@plt+0x7a30>
   16174:	str	r0, [sp, #72]	; 0x48
   16178:	str	r1, [sp, #68]	; 0x44
   1617c:	adds	r2, r0, r4
   16180:	str	r2, [sp, #104]	; 0x68
   16184:	ldr	r0, [sp, #232]	; 0xe8
   16188:	adc	r0, r1, r0
   1618c:	str	r0, [sp, #148]	; 0x94
   16190:	eor	r1, r0, r8
   16194:	eor	r0, r2, r6
   16198:	mov	r2, #63	; 0x3f
   1619c:	bl	18da8 <__assert_fail@plt+0x7a30>
   161a0:	mov	r6, r0
   161a4:	mov	r5, r1
   161a8:	ldr	r0, [sp, #296]	; 0x128
   161ac:	ldr	r1, [sp, #64]	; 0x40
   161b0:	adds	r0, r1, r0
   161b4:	ldr	r1, [sp, #300]	; 0x12c
   161b8:	ldr	r2, [sp, #116]	; 0x74
   161bc:	adc	r1, r2, r1
   161c0:	adds	r8, r0, r6
   161c4:	adc	r9, r1, r5
   161c8:	ldr	r0, [sp, #52]	; 0x34
   161cc:	eor	r1, r9, r0
   161d0:	ldr	r0, [sp, #56]	; 0x38
   161d4:	eor	r0, r8, r0
   161d8:	mov	r2, #32
   161dc:	bl	18da8 <__assert_fail@plt+0x7a30>
   161e0:	mov	r7, r0
   161e4:	mov	r4, r1
   161e8:	ldr	r0, [sp, #44]	; 0x2c
   161ec:	adds	sl, r7, r0
   161f0:	ldr	r0, [sp, #48]	; 0x30
   161f4:	adc	r0, r1, r0
   161f8:	str	r0, [sp, #232]	; 0xe8
   161fc:	eor	r1, r0, r5
   16200:	eor	r0, sl, r6
   16204:	mov	r2, #24
   16208:	bl	18da8 <__assert_fail@plt+0x7a30>
   1620c:	mov	r5, r0
   16210:	mov	r6, r1
   16214:	ldr	r0, [fp, #-304]	; 0xfffffed0
   16218:	adds	r0, r8, r0
   1621c:	ldr	r1, [fp, #-300]	; 0xfffffed4
   16220:	adc	r1, r9, r1
   16224:	adds	r2, r0, r5
   16228:	str	r2, [sp, #52]	; 0x34
   1622c:	adc	r0, r1, r6
   16230:	str	r0, [sp, #56]	; 0x38
   16234:	eor	r1, r0, r4
   16238:	eor	r0, r2, r7
   1623c:	mov	r2, #16
   16240:	bl	18da8 <__assert_fail@plt+0x7a30>
   16244:	str	r0, [sp, #136]	; 0x88
   16248:	str	r1, [sp, #116]	; 0x74
   1624c:	adds	r2, r0, sl
   16250:	str	r2, [sp, #144]	; 0x90
   16254:	ldr	r0, [sp, #232]	; 0xe8
   16258:	adc	r0, r1, r0
   1625c:	str	r0, [sp, #152]	; 0x98
   16260:	eor	r1, r0, r6
   16264:	eor	r0, r2, r5
   16268:	mov	r2, #63	; 0x3f
   1626c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16270:	mov	r3, r0
   16274:	str	r0, [sp, #228]	; 0xe4
   16278:	mov	r7, r1
   1627c:	str	r1, [sp, #232]	; 0xe8
   16280:	ldr	r0, [sp, #312]	; 0x138
   16284:	ldr	r6, [sp, #156]	; 0x9c
   16288:	adds	r0, r6, r0
   1628c:	ldr	r1, [sp, #316]	; 0x13c
   16290:	ldr	r9, [sp, #120]	; 0x78
   16294:	adc	r1, r9, r1
   16298:	ldr	r2, [sp, #76]	; 0x4c
   1629c:	adds	sl, r0, r2
   162a0:	ldr	r0, [sp, #84]	; 0x54
   162a4:	adc	r8, r1, r0
   162a8:	ldr	r0, [sp, #60]	; 0x3c
   162ac:	eor	r1, r0, r8
   162b0:	ldr	r0, [sp, #140]	; 0x8c
   162b4:	eor	r0, r0, sl
   162b8:	ldr	r2, [fp, #-292]	; 0xfffffedc
   162bc:	stm	r2, {r3, r7}
   162c0:	mov	r2, #32
   162c4:	bl	18da8 <__assert_fail@plt+0x7a30>
   162c8:	mov	r4, r0
   162cc:	mov	r5, r1
   162d0:	ldr	r0, [sp, #104]	; 0x68
   162d4:	adds	r2, r4, r0
   162d8:	ldr	r0, [sp, #148]	; 0x94
   162dc:	adc	r0, r1, r0
   162e0:	str	r0, [sp, #76]	; 0x4c
   162e4:	eor	r1, r0, r9
   162e8:	eor	r0, r2, r6
   162ec:	mov	r9, r2
   162f0:	mov	r2, #24
   162f4:	bl	18da8 <__assert_fail@plt+0x7a30>
   162f8:	mov	r6, r0
   162fc:	mov	r7, r1
   16300:	ldr	r0, [sp, #288]	; 0x120
   16304:	adds	r0, sl, r0
   16308:	ldr	r1, [sp, #292]	; 0x124
   1630c:	adc	r1, r8, r1
   16310:	adds	r2, r0, r6
   16314:	str	r2, [sp, #84]	; 0x54
   16318:	adc	r0, r1, r7
   1631c:	str	r0, [sp, #104]	; 0x68
   16320:	eor	r1, r0, r5
   16324:	eor	r0, r2, r4
   16328:	mov	r2, #16
   1632c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16330:	str	r0, [sp, #140]	; 0x8c
   16334:	str	r1, [sp, #120]	; 0x78
   16338:	adds	r2, r0, r9
   1633c:	str	r2, [sp, #148]	; 0x94
   16340:	ldr	r0, [sp, #76]	; 0x4c
   16344:	adc	r0, r1, r0
   16348:	str	r0, [sp, #156]	; 0x9c
   1634c:	eor	r1, r0, r7
   16350:	eor	r0, r2, r6
   16354:	mov	r2, #63	; 0x3f
   16358:	bl	18da8 <__assert_fail@plt+0x7a30>
   1635c:	str	r0, [sp, #76]	; 0x4c
   16360:	str	r1, [sp, #64]	; 0x40
   16364:	ldr	r2, [sp, #52]	; 0x34
   16368:	adds	r0, r0, r2
   1636c:	str	r0, [sp, #52]	; 0x34
   16370:	ldr	r0, [sp, #56]	; 0x38
   16374:	adc	r0, r1, r0
   16378:	str	r0, [sp, #48]	; 0x30
   1637c:	ldr	r0, [sp, #280]	; 0x118
   16380:	ldr	r6, [sp, #124]	; 0x7c
   16384:	adds	r0, r6, r0
   16388:	ldr	r1, [sp, #284]	; 0x11c
   1638c:	ldr	r7, [sp, #112]	; 0x70
   16390:	adc	r1, r7, r1
   16394:	ldr	r2, [sp, #92]	; 0x5c
   16398:	adds	r8, r0, r2
   1639c:	ldr	r0, [sp, #96]	; 0x60
   163a0:	adc	r9, r1, r0
   163a4:	ldr	r0, [sp, #68]	; 0x44
   163a8:	eor	r1, r0, r9
   163ac:	ldr	r0, [sp, #72]	; 0x48
   163b0:	eor	r0, r0, r8
   163b4:	mov	r2, #32
   163b8:	bl	18da8 <__assert_fail@plt+0x7a30>
   163bc:	mov	r4, r0
   163c0:	mov	r5, r1
   163c4:	ldr	r0, [sp, #160]	; 0xa0
   163c8:	adds	sl, r4, r0
   163cc:	ldr	r0, [sp, #212]	; 0xd4
   163d0:	adc	r0, r1, r0
   163d4:	str	r0, [sp, #212]	; 0xd4
   163d8:	eor	r1, r0, r7
   163dc:	eor	r0, sl, r6
   163e0:	mov	r2, #24
   163e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   163e8:	mov	r6, r0
   163ec:	mov	r7, r1
   163f0:	adds	r0, r0, r8
   163f4:	adc	r1, r1, r9
   163f8:	ldr	r2, [sp, #256]	; 0x100
   163fc:	ldrd	r2, [r2]
   16400:	adds	r2, r0, r2
   16404:	str	r2, [sp, #56]	; 0x38
   16408:	adc	r0, r1, r3
   1640c:	str	r0, [sp, #96]	; 0x60
   16410:	eor	r1, r0, r5
   16414:	eor	r0, r2, r4
   16418:	mov	r2, #16
   1641c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16420:	str	r0, [sp, #124]	; 0x7c
   16424:	str	r1, [sp, #112]	; 0x70
   16428:	adds	r2, r0, sl
   1642c:	str	r2, [sp, #72]	; 0x48
   16430:	ldr	r0, [sp, #212]	; 0xd4
   16434:	adc	r0, r1, r0
   16438:	str	r0, [sp, #92]	; 0x5c
   1643c:	eor	r1, r0, r7
   16440:	eor	r0, r2, r6
   16444:	mov	r2, #63	; 0x3f
   16448:	bl	18da8 <__assert_fail@plt+0x7a30>
   1644c:	str	r0, [sp, #212]	; 0xd4
   16450:	str	r1, [sp, #160]	; 0xa0
   16454:	ldr	r5, [sp, #108]	; 0x6c
   16458:	ldr	r0, [sp, #80]	; 0x50
   1645c:	adds	r0, r0, r5
   16460:	ldr	r6, [sp, #100]	; 0x64
   16464:	ldr	r1, [sp, #88]	; 0x58
   16468:	adc	r1, r1, r6
   1646c:	ldr	r2, [sp, #268]	; 0x10c
   16470:	ldrd	r2, [r2]
   16474:	adds	sl, r0, r2
   16478:	adc	r9, r1, r3
   1647c:	ldr	r0, [sp, #236]	; 0xec
   16480:	eor	r1, r9, r0
   16484:	ldr	r0, [sp, #240]	; 0xf0
   16488:	eor	r0, sl, r0
   1648c:	mov	r2, #32
   16490:	bl	18da8 <__assert_fail@plt+0x7a30>
   16494:	mov	r4, r0
   16498:	mov	r7, r1
   1649c:	ldr	r0, [sp, #164]	; 0xa4
   164a0:	adds	r2, r4, r0
   164a4:	ldr	r0, [sp, #216]	; 0xd8
   164a8:	adc	r0, r1, r0
   164ac:	str	r0, [sp, #240]	; 0xf0
   164b0:	eor	r1, r0, r6
   164b4:	eor	r0, r2, r5
   164b8:	mov	r6, r2
   164bc:	mov	r2, #24
   164c0:	bl	18da8 <__assert_fail@plt+0x7a30>
   164c4:	mov	r5, r0
   164c8:	mov	r8, r1
   164cc:	ldr	r0, [sp, #260]	; 0x104
   164d0:	adds	r0, sl, r0
   164d4:	ldr	r1, [sp, #264]	; 0x108
   164d8:	adc	r1, r9, r1
   164dc:	adds	r2, r0, r5
   164e0:	str	r2, [sp, #60]	; 0x3c
   164e4:	adc	r0, r1, r8
   164e8:	str	r0, [sp, #68]	; 0x44
   164ec:	eor	r1, r0, r7
   164f0:	eor	r0, r2, r4
   164f4:	mov	r2, #16
   164f8:	bl	18da8 <__assert_fail@plt+0x7a30>
   164fc:	mov	r4, r0
   16500:	mov	r9, r1
   16504:	adds	r2, r0, r6
   16508:	str	r2, [sp, #44]	; 0x2c
   1650c:	ldr	r0, [sp, #240]	; 0xf0
   16510:	adc	r0, r1, r0
   16514:	str	r0, [sp, #108]	; 0x6c
   16518:	eor	r1, r0, r8
   1651c:	eor	r0, r2, r5
   16520:	mov	r2, #63	; 0x3f
   16524:	bl	18da8 <__assert_fail@plt+0x7a30>
   16528:	str	r0, [sp, #100]	; 0x64
   1652c:	str	r1, [sp, #80]	; 0x50
   16530:	ldr	r0, [fp, #-160]	; 0xffffff60
   16534:	ldr	r1, [fp, #-156]	; 0xffffff64
   16538:	ldr	r2, [sp, #52]	; 0x34
   1653c:	adds	sl, r2, r0
   16540:	ldr	r0, [sp, #48]	; 0x30
   16544:	adc	r8, r0, r1
   16548:	eor	r1, r8, r9
   1654c:	eor	r0, sl, r4
   16550:	mov	r2, #32
   16554:	bl	18da8 <__assert_fail@plt+0x7a30>
   16558:	mov	r4, r0
   1655c:	mov	r5, r1
   16560:	ldr	r0, [sp, #72]	; 0x48
   16564:	adds	r9, r4, r0
   16568:	ldr	r0, [sp, #92]	; 0x5c
   1656c:	adc	r1, r1, r0
   16570:	str	r1, [sp, #216]	; 0xd8
   16574:	ldr	r0, [sp, #64]	; 0x40
   16578:	eor	r1, r1, r0
   1657c:	ldr	r0, [sp, #76]	; 0x4c
   16580:	eor	r0, r9, r0
   16584:	mov	r2, #24
   16588:	bl	18da8 <__assert_fail@plt+0x7a30>
   1658c:	mov	r7, r0
   16590:	mov	r6, r1
   16594:	ldr	r0, [fp, #-312]	; 0xfffffec8
   16598:	adds	r0, sl, r0
   1659c:	ldr	r1, [fp, #-308]	; 0xfffffecc
   165a0:	adc	r1, r8, r1
   165a4:	adds	r2, r0, r7
   165a8:	str	r2, [sp, #64]	; 0x40
   165ac:	adc	r0, r1, r6
   165b0:	str	r0, [sp, #72]	; 0x48
   165b4:	eor	r1, r0, r5
   165b8:	eor	r0, r2, r4
   165bc:	mov	r2, #16
   165c0:	bl	18da8 <__assert_fail@plt+0x7a30>
   165c4:	mov	r3, r0
   165c8:	str	r0, [sp, #240]	; 0xf0
   165cc:	mov	r5, r1
   165d0:	str	r1, [sp, #236]	; 0xec
   165d4:	adds	r2, r0, r9
   165d8:	str	r2, [sp, #164]	; 0xa4
   165dc:	ldr	r0, [sp, #216]	; 0xd8
   165e0:	adc	r0, r1, r0
   165e4:	str	r0, [sp, #216]	; 0xd8
   165e8:	eor	r1, r0, r6
   165ec:	eor	r0, r2, r7
   165f0:	ldr	r2, [fp, #-296]	; 0xfffffed8
   165f4:	stm	r2, {r3, r5}
   165f8:	mov	r2, #63	; 0x3f
   165fc:	bl	18da8 <__assert_fail@plt+0x7a30>
   16600:	str	r0, [sp, #92]	; 0x5c
   16604:	str	r1, [sp, #88]	; 0x58
   16608:	ldr	r0, [sp, #304]	; 0x130
   1660c:	ldr	r1, [sp, #84]	; 0x54
   16610:	adds	r0, r1, r0
   16614:	ldr	r1, [sp, #308]	; 0x134
   16618:	ldr	r2, [sp, #104]	; 0x68
   1661c:	adc	r1, r2, r1
   16620:	ldr	r6, [sp, #212]	; 0xd4
   16624:	adds	r8, r0, r6
   16628:	ldr	r7, [sp, #160]	; 0xa0
   1662c:	adc	r9, r1, r7
   16630:	ldr	r0, [sp, #116]	; 0x74
   16634:	eor	r1, r9, r0
   16638:	ldr	r0, [sp, #136]	; 0x88
   1663c:	eor	r0, r8, r0
   16640:	mov	r2, #32
   16644:	bl	18da8 <__assert_fail@plt+0x7a30>
   16648:	mov	r4, r0
   1664c:	mov	r5, r1
   16650:	ldr	r0, [sp, #44]	; 0x2c
   16654:	adds	sl, r4, r0
   16658:	ldr	r0, [sp, #108]	; 0x6c
   1665c:	adc	r0, r1, r0
   16660:	str	r0, [sp, #108]	; 0x6c
   16664:	eor	r1, r0, r7
   16668:	eor	r0, sl, r6
   1666c:	mov	r2, #24
   16670:	bl	18da8 <__assert_fail@plt+0x7a30>
   16674:	mov	r7, r0
   16678:	mov	r6, r1
   1667c:	adds	r0, r0, r8
   16680:	adc	r1, r1, r9
   16684:	ldr	r2, [sp, #276]	; 0x114
   16688:	ldrd	r2, [r2]
   1668c:	adds	r2, r0, r2
   16690:	str	r2, [sp, #76]	; 0x4c
   16694:	adc	r0, r1, r3
   16698:	str	r0, [sp, #136]	; 0x88
   1669c:	eor	r1, r0, r5
   166a0:	eor	r0, r2, r4
   166a4:	mov	r2, #16
   166a8:	bl	18da8 <__assert_fail@plt+0x7a30>
   166ac:	str	r0, [sp, #116]	; 0x74
   166b0:	str	r1, [sp, #52]	; 0x34
   166b4:	adds	r2, r0, sl
   166b8:	str	r2, [sp, #160]	; 0xa0
   166bc:	ldr	r0, [sp, #108]	; 0x6c
   166c0:	adc	r0, r1, r0
   166c4:	str	r0, [sp, #212]	; 0xd4
   166c8:	eor	r1, r0, r6
   166cc:	eor	r0, r2, r7
   166d0:	mov	r2, #63	; 0x3f
   166d4:	bl	18da8 <__assert_fail@plt+0x7a30>
   166d8:	str	r0, [sp, #108]	; 0x6c
   166dc:	str	r1, [sp, #104]	; 0x68
   166e0:	ldr	r0, [sp, #56]	; 0x38
   166e4:	ldr	r4, [sp, #100]	; 0x64
   166e8:	adds	r0, r4, r0
   166ec:	ldr	r1, [sp, #96]	; 0x60
   166f0:	ldr	r5, [sp, #80]	; 0x50
   166f4:	adc	r1, r5, r1
   166f8:	ldr	r2, [sp, #272]	; 0x110
   166fc:	ldrd	r2, [r2]
   16700:	adds	r9, r0, r2
   16704:	adc	r8, r1, r3
   16708:	ldr	r0, [sp, #120]	; 0x78
   1670c:	eor	r1, r8, r0
   16710:	ldr	r0, [sp, #140]	; 0x8c
   16714:	eor	r0, r9, r0
   16718:	mov	r2, #32
   1671c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16720:	mov	r6, r0
   16724:	mov	r7, r1
   16728:	ldr	r0, [sp, #144]	; 0x90
   1672c:	adds	r2, r6, r0
   16730:	ldr	r0, [sp, #152]	; 0x98
   16734:	adc	r0, r1, r0
   16738:	str	r0, [sp, #152]	; 0x98
   1673c:	eor	r1, r0, r5
   16740:	eor	r0, r2, r4
   16744:	mov	r5, r2
   16748:	mov	r2, #24
   1674c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16750:	mov	r4, r0
   16754:	mov	sl, r1
   16758:	adds	r0, r0, r9
   1675c:	adc	r1, r1, r8
   16760:	ldr	r2, [sp, #244]	; 0xf4
   16764:	ldrd	r2, [r2]
   16768:	adds	r2, r0, r2
   1676c:	str	r2, [sp, #80]	; 0x50
   16770:	adc	r0, r1, r3
   16774:	str	r0, [sp, #84]	; 0x54
   16778:	eor	r1, r0, r7
   1677c:	eor	r0, r2, r6
   16780:	mov	r2, #16
   16784:	bl	18da8 <__assert_fail@plt+0x7a30>
   16788:	str	r0, [sp, #140]	; 0x8c
   1678c:	str	r1, [sp, #120]	; 0x78
   16790:	adds	r2, r0, r5
   16794:	str	r2, [sp, #144]	; 0x90
   16798:	ldr	r0, [sp, #152]	; 0x98
   1679c:	adc	r0, r1, r0
   167a0:	str	r0, [sp, #152]	; 0x98
   167a4:	eor	r1, r0, sl
   167a8:	eor	r0, r2, r4
   167ac:	mov	r2, #63	; 0x3f
   167b0:	bl	18da8 <__assert_fail@plt+0x7a30>
   167b4:	str	r0, [sp, #100]	; 0x64
   167b8:	str	r1, [sp, #96]	; 0x60
   167bc:	ldr	r7, [sp, #228]	; 0xe4
   167c0:	ldr	r0, [sp, #60]	; 0x3c
   167c4:	adds	r0, r0, r7
   167c8:	ldr	r5, [sp, #232]	; 0xe8
   167cc:	ldr	r1, [sp, #68]	; 0x44
   167d0:	adc	r1, r1, r5
   167d4:	ldr	r2, [sp, #252]	; 0xfc
   167d8:	ldrd	r2, [r2]
   167dc:	adds	r9, r0, r2
   167e0:	adc	r8, r1, r3
   167e4:	ldr	r0, [sp, #112]	; 0x70
   167e8:	eor	r1, r8, r0
   167ec:	ldr	r0, [sp, #124]	; 0x7c
   167f0:	eor	r0, r9, r0
   167f4:	mov	r2, #32
   167f8:	bl	18da8 <__assert_fail@plt+0x7a30>
   167fc:	mov	r4, r0
   16800:	mov	r6, r1
   16804:	ldr	r0, [sp, #148]	; 0x94
   16808:	adds	r2, r4, r0
   1680c:	ldr	r0, [sp, #156]	; 0x9c
   16810:	adc	r0, r1, r0
   16814:	str	r0, [sp, #148]	; 0x94
   16818:	eor	r1, r0, r5
   1681c:	eor	r0, r2, r7
   16820:	mov	r5, r2
   16824:	mov	r2, #24
   16828:	bl	18da8 <__assert_fail@plt+0x7a30>
   1682c:	mov	r7, r0
   16830:	mov	sl, r1
   16834:	adds	r0, r0, r9
   16838:	adc	r1, r1, r8
   1683c:	ldr	r2, [sp, #248]	; 0xf8
   16840:	ldrd	r2, [r2]
   16844:	adds	r2, r0, r2
   16848:	str	r2, [sp, #68]	; 0x44
   1684c:	adc	r0, r1, r3
   16850:	str	r0, [sp, #156]	; 0x9c
   16854:	eor	r1, r0, r6
   16858:	eor	r0, r2, r4
   1685c:	mov	r2, #16
   16860:	bl	18da8 <__assert_fail@plt+0x7a30>
   16864:	str	r0, [sp, #112]	; 0x70
   16868:	str	r1, [sp, #60]	; 0x3c
   1686c:	adds	r2, r0, r5
   16870:	str	r2, [sp, #56]	; 0x38
   16874:	ldr	r0, [sp, #148]	; 0x94
   16878:	adc	r0, r1, r0
   1687c:	str	r0, [sp, #148]	; 0x94
   16880:	eor	r1, r0, sl
   16884:	eor	r0, r2, r7
   16888:	mov	r2, #63	; 0x3f
   1688c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16890:	mov	r6, r0
   16894:	mov	r7, r1
   16898:	ldr	r0, [sp, #64]	; 0x40
   1689c:	adds	r0, r6, r0
   168a0:	ldr	r1, [sp, #72]	; 0x48
   168a4:	adc	r1, r7, r1
   168a8:	ldr	r2, [sp, #256]	; 0x100
   168ac:	ldrd	r2, [r2]
   168b0:	adds	r8, r0, r2
   168b4:	adc	r9, r1, r3
   168b8:	ldr	r0, [sp, #52]	; 0x34
   168bc:	eor	r1, r9, r0
   168c0:	ldr	r0, [sp, #116]	; 0x74
   168c4:	eor	r0, r8, r0
   168c8:	mov	r2, #32
   168cc:	bl	18da8 <__assert_fail@plt+0x7a30>
   168d0:	mov	r5, r0
   168d4:	mov	r4, r1
   168d8:	ldr	r0, [sp, #144]	; 0x90
   168dc:	adds	sl, r5, r0
   168e0:	ldr	r0, [sp, #152]	; 0x98
   168e4:	adc	r0, r1, r0
   168e8:	str	r0, [sp, #232]	; 0xe8
   168ec:	eor	r1, r0, r7
   168f0:	eor	r0, sl, r6
   168f4:	mov	r2, #24
   168f8:	bl	18da8 <__assert_fail@plt+0x7a30>
   168fc:	mov	r6, r0
   16900:	mov	r7, r1
   16904:	adds	r0, r0, r8
   16908:	adc	r1, r1, r9
   1690c:	ldr	r2, [sp, #248]	; 0xf8
   16910:	ldrd	r2, [r2]
   16914:	adds	r2, r0, r2
   16918:	str	r2, [sp, #52]	; 0x34
   1691c:	adc	r0, r1, r3
   16920:	str	r0, [sp, #64]	; 0x40
   16924:	eor	r1, r0, r4
   16928:	eor	r0, r2, r5
   1692c:	mov	r2, #16
   16930:	bl	18da8 <__assert_fail@plt+0x7a30>
   16934:	str	r0, [sp, #124]	; 0x7c
   16938:	str	r1, [sp, #116]	; 0x74
   1693c:	adds	r2, r0, sl
   16940:	str	r2, [sp, #144]	; 0x90
   16944:	ldr	r0, [sp, #232]	; 0xe8
   16948:	adc	r0, r1, r0
   1694c:	str	r0, [sp, #152]	; 0x98
   16950:	eor	r1, r0, r7
   16954:	eor	r0, r2, r6
   16958:	mov	r2, #63	; 0x3f
   1695c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16960:	mov	r3, r0
   16964:	str	r0, [sp, #228]	; 0xe4
   16968:	mov	r7, r1
   1696c:	str	r1, [sp, #232]	; 0xe8
   16970:	ldr	r0, [fp, #-312]	; 0xfffffec8
   16974:	ldr	r6, [sp, #92]	; 0x5c
   16978:	adds	r0, r6, r0
   1697c:	ldr	r1, [fp, #-308]	; 0xfffffecc
   16980:	ldr	r9, [sp, #88]	; 0x58
   16984:	adc	r1, r9, r1
   16988:	ldr	r2, [sp, #76]	; 0x4c
   1698c:	adds	sl, r0, r2
   16990:	ldr	r0, [sp, #136]	; 0x88
   16994:	adc	r8, r1, r0
   16998:	ldr	r0, [sp, #120]	; 0x78
   1699c:	eor	r1, r0, r8
   169a0:	ldr	r0, [sp, #140]	; 0x8c
   169a4:	eor	r0, r0, sl
   169a8:	ldr	r2, [fp, #-292]	; 0xfffffedc
   169ac:	stm	r2, {r3, r7}
   169b0:	mov	r2, #32
   169b4:	bl	18da8 <__assert_fail@plt+0x7a30>
   169b8:	mov	r4, r0
   169bc:	mov	r5, r1
   169c0:	ldr	r0, [sp, #56]	; 0x38
   169c4:	adds	r2, r4, r0
   169c8:	ldr	r0, [sp, #148]	; 0x94
   169cc:	adc	r0, r1, r0
   169d0:	str	r0, [sp, #148]	; 0x94
   169d4:	eor	r1, r0, r9
   169d8:	eor	r0, r2, r6
   169dc:	mov	r9, r2
   169e0:	mov	r2, #24
   169e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   169e8:	mov	r6, r0
   169ec:	mov	r7, r1
   169f0:	ldr	r0, [sp, #280]	; 0x118
   169f4:	adds	r0, sl, r0
   169f8:	ldr	r1, [sp, #284]	; 0x11c
   169fc:	adc	r1, r8, r1
   16a00:	adds	r2, r0, r6
   16a04:	str	r2, [sp, #72]	; 0x48
   16a08:	adc	r0, r1, r7
   16a0c:	str	r0, [sp, #76]	; 0x4c
   16a10:	eor	r1, r0, r5
   16a14:	eor	r0, r2, r4
   16a18:	mov	r2, #16
   16a1c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16a20:	str	r0, [sp, #136]	; 0x88
   16a24:	str	r1, [sp, #120]	; 0x78
   16a28:	adds	r2, r0, r9
   16a2c:	str	r2, [sp, #140]	; 0x8c
   16a30:	ldr	r0, [sp, #148]	; 0x94
   16a34:	adc	r0, r1, r0
   16a38:	str	r0, [sp, #148]	; 0x94
   16a3c:	eor	r1, r0, r7
   16a40:	eor	r0, r2, r6
   16a44:	mov	r2, #63	; 0x3f
   16a48:	bl	18da8 <__assert_fail@plt+0x7a30>
   16a4c:	mov	r2, r0
   16a50:	str	r0, [sp, #92]	; 0x5c
   16a54:	mov	r3, r1
   16a58:	str	r1, [sp, #88]	; 0x58
   16a5c:	ldr	r0, [fp, #-304]	; 0xfffffed0
   16a60:	ldr	r1, [sp, #52]	; 0x34
   16a64:	adds	r0, r1, r0
   16a68:	ldr	r1, [fp, #-300]	; 0xfffffed4
   16a6c:	ldr	r7, [sp, #64]	; 0x40
   16a70:	adc	r1, r7, r1
   16a74:	adds	r0, r0, r2
   16a78:	str	r0, [sp, #56]	; 0x38
   16a7c:	adc	r0, r1, r3
   16a80:	str	r0, [sp, #52]	; 0x34
   16a84:	ldr	r0, [sp, #296]	; 0x128
   16a88:	ldr	r5, [sp, #108]	; 0x6c
   16a8c:	adds	r0, r5, r0
   16a90:	ldr	r1, [sp, #300]	; 0x12c
   16a94:	ldr	r6, [sp, #104]	; 0x68
   16a98:	adc	r1, r6, r1
   16a9c:	ldr	r2, [sp, #80]	; 0x50
   16aa0:	adds	r8, r0, r2
   16aa4:	ldr	r0, [sp, #84]	; 0x54
   16aa8:	adc	r9, r1, r0
   16aac:	ldr	r0, [sp, #60]	; 0x3c
   16ab0:	eor	r1, r0, r9
   16ab4:	ldr	r0, [sp, #112]	; 0x70
   16ab8:	eor	r0, r0, r8
   16abc:	mov	r2, #32
   16ac0:	bl	18da8 <__assert_fail@plt+0x7a30>
   16ac4:	mov	r4, r0
   16ac8:	mov	r7, r1
   16acc:	ldr	r0, [sp, #164]	; 0xa4
   16ad0:	adds	sl, r4, r0
   16ad4:	ldr	r0, [sp, #216]	; 0xd8
   16ad8:	adc	r0, r1, r0
   16adc:	str	r0, [sp, #216]	; 0xd8
   16ae0:	eor	r1, r0, r6
   16ae4:	eor	r0, sl, r5
   16ae8:	mov	r2, #24
   16aec:	bl	18da8 <__assert_fail@plt+0x7a30>
   16af0:	mov	r5, r0
   16af4:	mov	r6, r1
   16af8:	ldr	r0, [sp, #312]	; 0x138
   16afc:	adds	r0, r8, r0
   16b00:	ldr	r1, [sp, #316]	; 0x13c
   16b04:	adc	r1, r9, r1
   16b08:	adds	r2, r0, r5
   16b0c:	str	r2, [sp, #84]	; 0x54
   16b10:	adc	r0, r1, r6
   16b14:	str	r0, [sp, #104]	; 0x68
   16b18:	eor	r1, r0, r7
   16b1c:	eor	r0, r2, r4
   16b20:	mov	r2, #16
   16b24:	bl	18da8 <__assert_fail@plt+0x7a30>
   16b28:	str	r0, [sp, #112]	; 0x70
   16b2c:	str	r1, [sp, #108]	; 0x6c
   16b30:	adds	r2, r0, sl
   16b34:	str	r2, [sp, #44]	; 0x2c
   16b38:	ldr	r0, [sp, #216]	; 0xd8
   16b3c:	adc	r0, r1, r0
   16b40:	str	r0, [sp, #80]	; 0x50
   16b44:	eor	r1, r0, r6
   16b48:	eor	r0, r2, r5
   16b4c:	mov	r2, #63	; 0x3f
   16b50:	bl	18da8 <__assert_fail@plt+0x7a30>
   16b54:	str	r0, [sp, #216]	; 0xd8
   16b58:	str	r1, [sp, #164]	; 0xa4
   16b5c:	ldr	r6, [sp, #100]	; 0x64
   16b60:	ldr	r0, [sp, #68]	; 0x44
   16b64:	adds	r0, r0, r6
   16b68:	ldr	r7, [sp, #96]	; 0x60
   16b6c:	ldr	r1, [sp, #156]	; 0x9c
   16b70:	adc	r1, r1, r7
   16b74:	ldr	r2, [sp, #276]	; 0x114
   16b78:	ldrd	r2, [r2]
   16b7c:	adds	sl, r0, r2
   16b80:	adc	r8, r1, r3
   16b84:	ldr	r0, [sp, #236]	; 0xec
   16b88:	eor	r1, r8, r0
   16b8c:	ldr	r0, [sp, #240]	; 0xf0
   16b90:	eor	r0, sl, r0
   16b94:	mov	r2, #32
   16b98:	bl	18da8 <__assert_fail@plt+0x7a30>
   16b9c:	mov	r4, r0
   16ba0:	mov	r5, r1
   16ba4:	ldr	r0, [sp, #160]	; 0xa0
   16ba8:	adds	r9, r4, r0
   16bac:	ldr	r0, [sp, #212]	; 0xd4
   16bb0:	adc	r0, r1, r0
   16bb4:	str	r0, [sp, #240]	; 0xf0
   16bb8:	eor	r1, r0, r7
   16bbc:	eor	r0, r9, r6
   16bc0:	mov	r2, #24
   16bc4:	bl	18da8 <__assert_fail@plt+0x7a30>
   16bc8:	mov	r6, r0
   16bcc:	mov	r7, r1
   16bd0:	adds	r0, r0, sl
   16bd4:	adc	r1, r1, r8
   16bd8:	ldr	r2, [sp, #272]	; 0x110
   16bdc:	ldrd	r2, [r2]
   16be0:	adds	r2, r0, r2
   16be4:	str	r2, [sp, #60]	; 0x3c
   16be8:	adc	r0, r1, r3
   16bec:	str	r0, [sp, #64]	; 0x40
   16bf0:	eor	r1, r0, r5
   16bf4:	eor	r0, r2, r4
   16bf8:	mov	r2, #16
   16bfc:	bl	18da8 <__assert_fail@plt+0x7a30>
   16c00:	mov	r5, r0
   16c04:	mov	r4, r1
   16c08:	adds	r2, r0, r9
   16c0c:	str	r2, [sp, #68]	; 0x44
   16c10:	ldr	r0, [sp, #240]	; 0xf0
   16c14:	adc	r0, r1, r0
   16c18:	str	r0, [sp, #96]	; 0x60
   16c1c:	eor	r1, r0, r7
   16c20:	eor	r0, r2, r6
   16c24:	mov	r2, #63	; 0x3f
   16c28:	bl	18da8 <__assert_fail@plt+0x7a30>
   16c2c:	str	r0, [sp, #100]	; 0x64
   16c30:	str	r1, [sp, #48]	; 0x30
   16c34:	ldr	r8, [sp, #52]	; 0x34
   16c38:	eor	r1, r4, r8
   16c3c:	ldr	sl, [sp, #56]	; 0x38
   16c40:	eor	r0, r5, sl
   16c44:	mov	r2, #32
   16c48:	bl	18da8 <__assert_fail@plt+0x7a30>
   16c4c:	mov	r4, r0
   16c50:	mov	r5, r1
   16c54:	ldr	r0, [sp, #44]	; 0x2c
   16c58:	adds	r2, r4, r0
   16c5c:	str	r2, [sp, #212]	; 0xd4
   16c60:	ldr	r0, [sp, #80]	; 0x50
   16c64:	adc	r9, r1, r0
   16c68:	ldr	r0, [sp, #88]	; 0x58
   16c6c:	eor	r1, r9, r0
   16c70:	ldr	r0, [sp, #92]	; 0x5c
   16c74:	eor	r0, r2, r0
   16c78:	mov	r2, #24
   16c7c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16c80:	mov	r6, r0
   16c84:	mov	r7, r1
   16c88:	adds	r0, r0, sl
   16c8c:	adc	r1, r1, r8
   16c90:	ldr	r2, [fp, #-160]	; 0xffffff60
   16c94:	ldr	r3, [fp, #-156]	; 0xffffff64
   16c98:	adds	r2, r0, r2
   16c9c:	str	r2, [sp, #80]	; 0x50
   16ca0:	adc	r0, r1, r3
   16ca4:	str	r0, [sp, #160]	; 0xa0
   16ca8:	eor	r1, r0, r5
   16cac:	eor	r0, r2, r4
   16cb0:	mov	r2, #16
   16cb4:	bl	18da8 <__assert_fail@plt+0x7a30>
   16cb8:	mov	r3, r0
   16cbc:	str	r0, [sp, #240]	; 0xf0
   16cc0:	mov	r5, r1
   16cc4:	str	r1, [sp, #236]	; 0xec
   16cc8:	ldr	r0, [sp, #212]	; 0xd4
   16ccc:	adds	r2, r3, r0
   16cd0:	str	r2, [sp, #156]	; 0x9c
   16cd4:	adc	r0, r1, r9
   16cd8:	str	r0, [sp, #212]	; 0xd4
   16cdc:	eor	r1, r0, r7
   16ce0:	eor	r0, r2, r6
   16ce4:	ldr	r2, [fp, #-296]	; 0xfffffed8
   16ce8:	stm	r2, {r3, r5}
   16cec:	mov	r2, #63	; 0x3f
   16cf0:	bl	18da8 <__assert_fail@plt+0x7a30>
   16cf4:	str	r0, [sp, #92]	; 0x5c
   16cf8:	str	r1, [sp, #88]	; 0x58
   16cfc:	ldr	r0, [sp, #288]	; 0x120
   16d00:	ldr	r1, [sp, #72]	; 0x48
   16d04:	adds	r0, r1, r0
   16d08:	ldr	r1, [sp, #292]	; 0x124
   16d0c:	ldr	r2, [sp, #76]	; 0x4c
   16d10:	adc	r1, r2, r1
   16d14:	ldr	r6, [sp, #216]	; 0xd8
   16d18:	adds	r8, r0, r6
   16d1c:	ldr	r7, [sp, #164]	; 0xa4
   16d20:	adc	r9, r1, r7
   16d24:	ldr	r0, [sp, #116]	; 0x74
   16d28:	eor	r1, r9, r0
   16d2c:	ldr	r0, [sp, #124]	; 0x7c
   16d30:	eor	r0, r8, r0
   16d34:	mov	r2, #32
   16d38:	bl	18da8 <__assert_fail@plt+0x7a30>
   16d3c:	mov	r4, r0
   16d40:	mov	r5, r1
   16d44:	ldr	r0, [sp, #68]	; 0x44
   16d48:	adds	sl, r4, r0
   16d4c:	ldr	r0, [sp, #96]	; 0x60
   16d50:	adc	r0, r1, r0
   16d54:	str	r0, [sp, #116]	; 0x74
   16d58:	eor	r1, r0, r7
   16d5c:	eor	r0, sl, r6
   16d60:	mov	r2, #24
   16d64:	bl	18da8 <__assert_fail@plt+0x7a30>
   16d68:	mov	r7, r0
   16d6c:	mov	r6, r1
   16d70:	adds	r0, r0, r8
   16d74:	adc	r1, r1, r9
   16d78:	ldr	r2, [sp, #268]	; 0x10c
   16d7c:	ldrd	r2, [r2]
   16d80:	adds	r2, r0, r2
   16d84:	str	r2, [sp, #68]	; 0x44
   16d88:	adc	r0, r1, r3
   16d8c:	str	r0, [sp, #124]	; 0x7c
   16d90:	eor	r1, r0, r5
   16d94:	eor	r0, r2, r4
   16d98:	mov	r2, #16
   16d9c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16da0:	str	r0, [sp, #56]	; 0x38
   16da4:	str	r1, [sp, #52]	; 0x34
   16da8:	adds	r2, r0, sl
   16dac:	str	r2, [sp, #164]	; 0xa4
   16db0:	ldr	r0, [sp, #116]	; 0x74
   16db4:	adc	r0, r1, r0
   16db8:	str	r0, [sp, #216]	; 0xd8
   16dbc:	eor	r1, r0, r6
   16dc0:	eor	r0, r2, r7
   16dc4:	mov	r2, #63	; 0x3f
   16dc8:	bl	18da8 <__assert_fail@plt+0x7a30>
   16dcc:	str	r0, [sp, #116]	; 0x74
   16dd0:	str	r1, [sp, #96]	; 0x60
   16dd4:	ldr	r0, [sp, #84]	; 0x54
   16dd8:	ldr	r5, [sp, #100]	; 0x64
   16ddc:	adds	r0, r5, r0
   16de0:	ldr	r1, [sp, #104]	; 0x68
   16de4:	ldr	r7, [sp, #48]	; 0x30
   16de8:	adc	r1, r7, r1
   16dec:	ldr	r2, [sp, #252]	; 0xfc
   16df0:	ldrd	r2, [r2]
   16df4:	adds	r8, r0, r2
   16df8:	adc	r9, r1, r3
   16dfc:	ldr	r0, [sp, #120]	; 0x78
   16e00:	eor	r1, r9, r0
   16e04:	ldr	r0, [sp, #136]	; 0x88
   16e08:	eor	r0, r8, r0
   16e0c:	mov	r2, #32
   16e10:	bl	18da8 <__assert_fail@plt+0x7a30>
   16e14:	mov	r4, r0
   16e18:	mov	r6, r1
   16e1c:	ldr	r0, [sp, #144]	; 0x90
   16e20:	adds	sl, r4, r0
   16e24:	ldr	r0, [sp, #152]	; 0x98
   16e28:	adc	r0, r1, r0
   16e2c:	str	r0, [sp, #136]	; 0x88
   16e30:	eor	r1, r0, r7
   16e34:	eor	r0, sl, r5
   16e38:	mov	r2, #24
   16e3c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16e40:	mov	r7, r0
   16e44:	mov	r5, r1
   16e48:	ldr	r0, [sp, #304]	; 0x130
   16e4c:	adds	r0, r8, r0
   16e50:	ldr	r1, [sp, #308]	; 0x134
   16e54:	adc	r1, r9, r1
   16e58:	adds	r2, r0, r7
   16e5c:	str	r2, [sp, #72]	; 0x48
   16e60:	adc	r0, r1, r5
   16e64:	str	r0, [sp, #84]	; 0x54
   16e68:	eor	r1, r0, r6
   16e6c:	eor	r0, r2, r4
   16e70:	mov	r2, #16
   16e74:	bl	18da8 <__assert_fail@plt+0x7a30>
   16e78:	str	r0, [sp, #152]	; 0x98
   16e7c:	str	r1, [sp, #144]	; 0x90
   16e80:	adds	r2, r0, sl
   16e84:	str	r2, [sp, #48]	; 0x30
   16e88:	ldr	r0, [sp, #136]	; 0x88
   16e8c:	adc	r0, r1, r0
   16e90:	str	r0, [sp, #136]	; 0x88
   16e94:	eor	r1, r0, r5
   16e98:	eor	r0, r2, r7
   16e9c:	mov	r2, #63	; 0x3f
   16ea0:	bl	18da8 <__assert_fail@plt+0x7a30>
   16ea4:	str	r0, [sp, #104]	; 0x68
   16ea8:	str	r1, [sp, #100]	; 0x64
   16eac:	ldr	r4, [sp, #228]	; 0xe4
   16eb0:	ldr	r0, [sp, #60]	; 0x3c
   16eb4:	adds	r0, r0, r4
   16eb8:	ldr	r6, [sp, #232]	; 0xe8
   16ebc:	ldr	r1, [sp, #64]	; 0x40
   16ec0:	adc	r1, r1, r6
   16ec4:	ldr	r2, [sp, #244]	; 0xf4
   16ec8:	ldrd	r2, [r2]
   16ecc:	adds	r8, r0, r2
   16ed0:	adc	r1, r1, r3
   16ed4:	str	r1, [sp, #120]	; 0x78
   16ed8:	ldr	r0, [sp, #108]	; 0x6c
   16edc:	eor	r1, r1, r0
   16ee0:	ldr	r0, [sp, #112]	; 0x70
   16ee4:	eor	r0, r8, r0
   16ee8:	mov	r2, #32
   16eec:	bl	18da8 <__assert_fail@plt+0x7a30>
   16ef0:	mov	r5, r0
   16ef4:	mov	r7, r1
   16ef8:	ldr	r0, [sp, #140]	; 0x8c
   16efc:	adds	r2, r5, r0
   16f00:	ldr	r0, [sp, #148]	; 0x94
   16f04:	adc	r0, r1, r0
   16f08:	eor	r1, r0, r6
   16f0c:	mov	r6, r0
   16f10:	eor	r0, r2, r4
   16f14:	mov	r4, r2
   16f18:	mov	r2, #24
   16f1c:	bl	18da8 <__assert_fail@plt+0x7a30>
   16f20:	mov	r9, r0
   16f24:	mov	sl, r1
   16f28:	ldr	r0, [sp, #260]	; 0x104
   16f2c:	adds	r0, r8, r0
   16f30:	ldr	r1, [sp, #264]	; 0x108
   16f34:	ldr	r2, [sp, #120]	; 0x78
   16f38:	adc	r1, r2, r1
   16f3c:	adds	r2, r0, r9
   16f40:	str	r2, [sp, #76]	; 0x4c
   16f44:	adc	r0, r1, sl
   16f48:	str	r0, [sp, #108]	; 0x6c
   16f4c:	eor	r1, r0, r7
   16f50:	eor	r0, r2, r5
   16f54:	mov	r2, #16
   16f58:	bl	18da8 <__assert_fail@plt+0x7a30>
   16f5c:	str	r0, [sp, #112]	; 0x70
   16f60:	str	r1, [sp, #64]	; 0x40
   16f64:	adds	r2, r0, r4
   16f68:	str	r2, [sp, #44]	; 0x2c
   16f6c:	adc	r0, r1, r6
   16f70:	str	r0, [sp, #120]	; 0x78
   16f74:	eor	r1, r0, sl
   16f78:	eor	r0, r2, r9
   16f7c:	mov	r2, #63	; 0x3f
   16f80:	bl	18da8 <__assert_fail@plt+0x7a30>
   16f84:	mov	r5, r0
   16f88:	mov	r7, r1
   16f8c:	ldr	r0, [sp, #304]	; 0x130
   16f90:	ldr	r1, [sp, #80]	; 0x50
   16f94:	adds	r0, r1, r0
   16f98:	ldr	r1, [sp, #308]	; 0x134
   16f9c:	ldr	r2, [sp, #160]	; 0xa0
   16fa0:	adc	r1, r2, r1
   16fa4:	adds	r8, r0, r5
   16fa8:	adc	r9, r1, r7
   16fac:	ldr	r0, [sp, #52]	; 0x34
   16fb0:	eor	r1, r9, r0
   16fb4:	ldr	r0, [sp, #56]	; 0x38
   16fb8:	eor	r0, r8, r0
   16fbc:	mov	r2, #32
   16fc0:	bl	18da8 <__assert_fail@plt+0x7a30>
   16fc4:	mov	r6, r0
   16fc8:	mov	r4, r1
   16fcc:	ldr	r0, [sp, #48]	; 0x30
   16fd0:	adds	sl, r6, r0
   16fd4:	ldr	r0, [sp, #136]	; 0x88
   16fd8:	adc	r0, r1, r0
   16fdc:	str	r0, [sp, #232]	; 0xe8
   16fe0:	eor	r1, r0, r7
   16fe4:	eor	r0, sl, r5
   16fe8:	mov	r2, #24
   16fec:	bl	18da8 <__assert_fail@plt+0x7a30>
   16ff0:	mov	r5, r0
   16ff4:	mov	r7, r1
   16ff8:	ldr	r0, [sp, #288]	; 0x120
   16ffc:	adds	r0, r8, r0
   17000:	ldr	r1, [sp, #292]	; 0x124
   17004:	adc	r1, r9, r1
   17008:	adds	r2, r0, r5
   1700c:	str	r2, [sp, #56]	; 0x38
   17010:	adc	r0, r1, r7
   17014:	str	r0, [sp, #60]	; 0x3c
   17018:	eor	r1, r0, r4
   1701c:	eor	r0, r2, r6
   17020:	mov	r2, #16
   17024:	bl	18da8 <__assert_fail@plt+0x7a30>
   17028:	str	r0, [sp, #140]	; 0x8c
   1702c:	str	r1, [sp, #136]	; 0x88
   17030:	adds	r2, r0, sl
   17034:	str	r2, [sp, #148]	; 0x94
   17038:	ldr	r0, [sp, #232]	; 0xe8
   1703c:	adc	r0, r1, r0
   17040:	str	r0, [sp, #160]	; 0xa0
   17044:	eor	r1, r0, r7
   17048:	eor	r0, r2, r5
   1704c:	mov	r2, #63	; 0x3f
   17050:	bl	18da8 <__assert_fail@plt+0x7a30>
   17054:	mov	r3, r0
   17058:	str	r0, [sp, #228]	; 0xe4
   1705c:	mov	r7, r1
   17060:	str	r1, [sp, #232]	; 0xe8
   17064:	ldr	r0, [sp, #280]	; 0x118
   17068:	ldr	r6, [sp, #92]	; 0x5c
   1706c:	adds	r0, r6, r0
   17070:	ldr	r1, [sp, #284]	; 0x11c
   17074:	ldr	r9, [sp, #88]	; 0x58
   17078:	adc	r1, r9, r1
   1707c:	ldr	r2, [sp, #68]	; 0x44
   17080:	adds	sl, r0, r2
   17084:	ldr	r0, [sp, #124]	; 0x7c
   17088:	adc	r8, r1, r0
   1708c:	ldr	r0, [sp, #144]	; 0x90
   17090:	eor	r1, r0, r8
   17094:	ldr	r0, [sp, #152]	; 0x98
   17098:	eor	r0, r0, sl
   1709c:	ldr	r2, [fp, #-292]	; 0xfffffedc
   170a0:	stm	r2, {r3, r7}
   170a4:	mov	r2, #32
   170a8:	bl	18da8 <__assert_fail@plt+0x7a30>
   170ac:	mov	r4, r0
   170b0:	mov	r5, r1
   170b4:	ldr	r0, [sp, #44]	; 0x2c
   170b8:	adds	r2, r4, r0
   170bc:	ldr	r0, [sp, #120]	; 0x78
   170c0:	adc	r0, r1, r0
   170c4:	str	r0, [sp, #152]	; 0x98
   170c8:	eor	r1, r0, r9
   170cc:	eor	r0, r2, r6
   170d0:	mov	r9, r2
   170d4:	mov	r2, #24
   170d8:	bl	18da8 <__assert_fail@plt+0x7a30>
   170dc:	mov	r6, r0
   170e0:	mov	r7, r1
   170e4:	adds	r0, r0, sl
   170e8:	adc	r1, r1, r8
   170ec:	ldr	r2, [sp, #272]	; 0x110
   170f0:	ldrd	r2, [r2]
   170f4:	adds	r2, r0, r2
   170f8:	str	r2, [sp, #68]	; 0x44
   170fc:	adc	r0, r1, r3
   17100:	str	r0, [sp, #80]	; 0x50
   17104:	eor	r1, r0, r5
   17108:	eor	r0, r2, r4
   1710c:	mov	r2, #16
   17110:	bl	18da8 <__assert_fail@plt+0x7a30>
   17114:	str	r0, [sp, #124]	; 0x7c
   17118:	str	r1, [sp, #120]	; 0x78
   1711c:	adds	r2, r0, r9
   17120:	str	r2, [sp, #144]	; 0x90
   17124:	ldr	r0, [sp, #152]	; 0x98
   17128:	adc	r0, r1, r0
   1712c:	str	r0, [sp, #152]	; 0x98
   17130:	eor	r1, r0, r7
   17134:	eor	r0, r2, r6
   17138:	mov	r2, #63	; 0x3f
   1713c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17140:	mov	r2, r0
   17144:	str	r0, [sp, #92]	; 0x5c
   17148:	mov	r3, r1
   1714c:	str	r1, [sp, #88]	; 0x58
   17150:	ldr	r0, [sp, #296]	; 0x128
   17154:	ldr	r1, [sp, #56]	; 0x38
   17158:	adds	r0, r1, r0
   1715c:	ldr	r1, [sp, #300]	; 0x12c
   17160:	ldr	r7, [sp, #60]	; 0x3c
   17164:	adc	r1, r7, r1
   17168:	adds	r0, r0, r2
   1716c:	str	r0, [sp, #60]	; 0x3c
   17170:	adc	r0, r1, r3
   17174:	str	r0, [sp, #52]	; 0x34
   17178:	ldr	r5, [sp, #116]	; 0x74
   1717c:	ldr	r0, [sp, #72]	; 0x48
   17180:	adds	r0, r0, r5
   17184:	ldr	r7, [sp, #96]	; 0x60
   17188:	ldr	r1, [sp, #84]	; 0x54
   1718c:	adc	r1, r1, r7
   17190:	ldr	r2, [sp, #248]	; 0xf8
   17194:	ldrd	r2, [r2]
   17198:	adds	r8, r0, r2
   1719c:	adc	r9, r1, r3
   171a0:	ldr	r0, [sp, #64]	; 0x40
   171a4:	eor	r1, r9, r0
   171a8:	ldr	r0, [sp, #112]	; 0x70
   171ac:	eor	r0, r8, r0
   171b0:	mov	r2, #32
   171b4:	bl	18da8 <__assert_fail@plt+0x7a30>
   171b8:	mov	r4, r0
   171bc:	mov	r6, r1
   171c0:	ldr	r0, [sp, #156]	; 0x9c
   171c4:	adds	sl, r4, r0
   171c8:	ldr	r0, [sp, #212]	; 0xd4
   171cc:	adc	r0, r1, r0
   171d0:	str	r0, [sp, #212]	; 0xd4
   171d4:	eor	r1, r0, r7
   171d8:	eor	r0, sl, r5
   171dc:	mov	r2, #24
   171e0:	bl	18da8 <__assert_fail@plt+0x7a30>
   171e4:	mov	r5, r0
   171e8:	mov	r7, r1
   171ec:	adds	r0, r0, r8
   171f0:	adc	r1, r1, r9
   171f4:	ldr	r2, [sp, #276]	; 0x114
   171f8:	ldrd	r2, [r2]
   171fc:	adds	r2, r0, r2
   17200:	str	r2, [sp, #84]	; 0x54
   17204:	adc	r0, r1, r3
   17208:	str	r0, [sp, #96]	; 0x60
   1720c:	eor	r1, r0, r6
   17210:	eor	r0, r2, r4
   17214:	mov	r2, #16
   17218:	bl	18da8 <__assert_fail@plt+0x7a30>
   1721c:	str	r0, [sp, #116]	; 0x74
   17220:	str	r1, [sp, #112]	; 0x70
   17224:	adds	r2, r0, sl
   17228:	str	r2, [sp, #64]	; 0x40
   1722c:	ldr	r0, [sp, #212]	; 0xd4
   17230:	adc	r0, r1, r0
   17234:	str	r0, [sp, #212]	; 0xd4
   17238:	eor	r1, r0, r7
   1723c:	eor	r0, r2, r5
   17240:	mov	r2, #63	; 0x3f
   17244:	bl	18da8 <__assert_fail@plt+0x7a30>
   17248:	str	r0, [sp, #156]	; 0x9c
   1724c:	str	r1, [sp, #48]	; 0x30
   17250:	ldr	r6, [sp, #104]	; 0x68
   17254:	ldr	r0, [sp, #76]	; 0x4c
   17258:	adds	r0, r0, r6
   1725c:	ldr	r7, [sp, #100]	; 0x64
   17260:	ldr	r1, [sp, #108]	; 0x6c
   17264:	adc	r1, r1, r7
   17268:	ldr	r2, [fp, #-160]	; 0xffffff60
   1726c:	ldr	r3, [fp, #-156]	; 0xffffff64
   17270:	adds	sl, r0, r2
   17274:	adc	r8, r1, r3
   17278:	ldr	r0, [sp, #236]	; 0xec
   1727c:	eor	r1, r8, r0
   17280:	ldr	r0, [sp, #240]	; 0xf0
   17284:	eor	r0, sl, r0
   17288:	mov	r2, #32
   1728c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17290:	mov	r4, r0
   17294:	mov	r5, r1
   17298:	ldr	r0, [sp, #164]	; 0xa4
   1729c:	adds	r9, r4, r0
   172a0:	ldr	r0, [sp, #216]	; 0xd8
   172a4:	adc	r0, r1, r0
   172a8:	str	r0, [sp, #240]	; 0xf0
   172ac:	eor	r1, r0, r7
   172b0:	eor	r0, r9, r6
   172b4:	mov	r2, #24
   172b8:	bl	18da8 <__assert_fail@plt+0x7a30>
   172bc:	mov	r7, r0
   172c0:	mov	r6, r1
   172c4:	adds	r0, r0, sl
   172c8:	adc	r1, r1, r8
   172cc:	ldr	r2, [sp, #252]	; 0xfc
   172d0:	ldrd	r2, [r2]
   172d4:	adds	r2, r0, r2
   172d8:	str	r2, [sp, #56]	; 0x38
   172dc:	adc	r0, r1, r3
   172e0:	str	r0, [sp, #72]	; 0x48
   172e4:	eor	r1, r0, r5
   172e8:	eor	r0, r2, r4
   172ec:	mov	r2, #16
   172f0:	bl	18da8 <__assert_fail@plt+0x7a30>
   172f4:	mov	r5, r0
   172f8:	mov	sl, r1
   172fc:	adds	r2, r0, r9
   17300:	str	r2, [sp, #108]	; 0x6c
   17304:	ldr	r0, [sp, #240]	; 0xf0
   17308:	adc	r0, r1, r0
   1730c:	str	r0, [sp, #164]	; 0xa4
   17310:	eor	r1, r0, r6
   17314:	eor	r0, r2, r7
   17318:	mov	r2, #63	; 0x3f
   1731c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17320:	str	r0, [sp, #100]	; 0x64
   17324:	str	r1, [sp, #76]	; 0x4c
   17328:	ldr	r8, [sp, #52]	; 0x34
   1732c:	eor	r1, sl, r8
   17330:	ldr	sl, [sp, #60]	; 0x3c
   17334:	eor	r0, r5, sl
   17338:	mov	r2, #32
   1733c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17340:	mov	r5, r0
   17344:	mov	r6, r1
   17348:	ldr	r0, [sp, #64]	; 0x40
   1734c:	adds	r2, r5, r0
   17350:	str	r2, [sp, #216]	; 0xd8
   17354:	ldr	r0, [sp, #212]	; 0xd4
   17358:	adc	r9, r1, r0
   1735c:	ldr	r0, [sp, #88]	; 0x58
   17360:	eor	r1, r9, r0
   17364:	ldr	r0, [sp, #92]	; 0x5c
   17368:	eor	r0, r2, r0
   1736c:	mov	r2, #24
   17370:	bl	18da8 <__assert_fail@plt+0x7a30>
   17374:	mov	r7, r0
   17378:	mov	r4, r1
   1737c:	adds	r0, r0, sl
   17380:	adc	r1, r1, r8
   17384:	ldr	r2, [sp, #244]	; 0xf4
   17388:	ldrd	r2, [r2]
   1738c:	adds	r2, r0, r2
   17390:	str	r2, [sp, #60]	; 0x3c
   17394:	adc	r0, r1, r3
   17398:	str	r0, [sp, #64]	; 0x40
   1739c:	eor	r1, r0, r6
   173a0:	eor	r0, r2, r5
   173a4:	mov	r2, #16
   173a8:	bl	18da8 <__assert_fail@plt+0x7a30>
   173ac:	mov	r3, r0
   173b0:	str	r0, [sp, #240]	; 0xf0
   173b4:	mov	r6, r1
   173b8:	str	r1, [sp, #236]	; 0xec
   173bc:	ldr	r0, [sp, #216]	; 0xd8
   173c0:	adds	r2, r3, r0
   173c4:	str	r2, [sp, #212]	; 0xd4
   173c8:	adc	r0, r1, r9
   173cc:	str	r0, [sp, #216]	; 0xd8
   173d0:	eor	r1, r0, r4
   173d4:	eor	r0, r2, r7
   173d8:	ldr	r2, [fp, #-296]	; 0xfffffed8
   173dc:	stm	r2, {r3, r6}
   173e0:	mov	r2, #63	; 0x3f
   173e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   173e8:	str	r0, [sp, #92]	; 0x5c
   173ec:	str	r1, [sp, #88]	; 0x58
   173f0:	ldr	r0, [sp, #68]	; 0x44
   173f4:	ldr	r6, [sp, #156]	; 0x9c
   173f8:	adds	r0, r6, r0
   173fc:	ldr	r1, [sp, #80]	; 0x50
   17400:	ldr	r7, [sp, #48]	; 0x30
   17404:	adc	r1, r7, r1
   17408:	ldr	r2, [sp, #256]	; 0x100
   1740c:	ldrd	r2, [r2]
   17410:	adds	r8, r0, r2
   17414:	adc	r9, r1, r3
   17418:	ldr	r0, [sp, #136]	; 0x88
   1741c:	eor	r1, r9, r0
   17420:	ldr	r0, [sp, #140]	; 0x8c
   17424:	eor	r0, r8, r0
   17428:	mov	r2, #32
   1742c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17430:	mov	r4, r0
   17434:	mov	r5, r1
   17438:	ldr	r0, [sp, #108]	; 0x6c
   1743c:	adds	sl, r4, r0
   17440:	ldr	r0, [sp, #164]	; 0xa4
   17444:	adc	r0, r1, r0
   17448:	str	r0, [sp, #164]	; 0xa4
   1744c:	eor	r1, r0, r7
   17450:	eor	r0, sl, r6
   17454:	mov	r2, #24
   17458:	bl	18da8 <__assert_fail@plt+0x7a30>
   1745c:	mov	r7, r0
   17460:	mov	r6, r1
   17464:	ldr	r0, [fp, #-312]	; 0xfffffec8
   17468:	adds	r0, r8, r0
   1746c:	ldr	r1, [fp, #-308]	; 0xfffffecc
   17470:	adc	r1, r9, r1
   17474:	adds	r2, r0, r7
   17478:	str	r2, [sp, #68]	; 0x44
   1747c:	adc	r0, r1, r6
   17480:	str	r0, [sp, #140]	; 0x8c
   17484:	eor	r1, r0, r5
   17488:	eor	r0, r2, r4
   1748c:	mov	r2, #16
   17490:	bl	18da8 <__assert_fail@plt+0x7a30>
   17494:	str	r0, [sp, #136]	; 0x88
   17498:	str	r1, [sp, #52]	; 0x34
   1749c:	adds	r2, r0, sl
   174a0:	str	r2, [sp, #156]	; 0x9c
   174a4:	ldr	r0, [sp, #164]	; 0xa4
   174a8:	adc	r0, r1, r0
   174ac:	str	r0, [sp, #164]	; 0xa4
   174b0:	eor	r1, r0, r6
   174b4:	eor	r0, r2, r7
   174b8:	mov	r2, #63	; 0x3f
   174bc:	bl	18da8 <__assert_fail@plt+0x7a30>
   174c0:	str	r0, [sp, #108]	; 0x6c
   174c4:	str	r1, [sp, #104]	; 0x68
   174c8:	ldr	r0, [sp, #312]	; 0x138
   174cc:	ldr	r1, [sp, #84]	; 0x54
   174d0:	adds	r0, r1, r0
   174d4:	ldr	r1, [sp, #316]	; 0x13c
   174d8:	ldr	r2, [sp, #96]	; 0x60
   174dc:	adc	r1, r2, r1
   174e0:	ldr	r4, [sp, #100]	; 0x64
   174e4:	adds	r8, r0, r4
   174e8:	ldr	r7, [sp, #76]	; 0x4c
   174ec:	adc	r9, r1, r7
   174f0:	ldr	r0, [sp, #120]	; 0x78
   174f4:	eor	r1, r9, r0
   174f8:	ldr	r0, [sp, #124]	; 0x7c
   174fc:	eor	r0, r8, r0
   17500:	mov	r2, #32
   17504:	bl	18da8 <__assert_fail@plt+0x7a30>
   17508:	mov	r5, r0
   1750c:	mov	r6, r1
   17510:	ldr	r0, [sp, #148]	; 0x94
   17514:	adds	sl, r5, r0
   17518:	ldr	r0, [sp, #160]	; 0xa0
   1751c:	adc	r0, r1, r0
   17520:	str	r0, [sp, #160]	; 0xa0
   17524:	eor	r1, r0, r7
   17528:	eor	r0, sl, r4
   1752c:	mov	r2, #24
   17530:	bl	18da8 <__assert_fail@plt+0x7a30>
   17534:	mov	r7, r0
   17538:	mov	r4, r1
   1753c:	adds	r0, r0, r8
   17540:	adc	r1, r1, r9
   17544:	ldr	r2, [sp, #268]	; 0x10c
   17548:	ldrd	r2, [r2]
   1754c:	adds	r2, r0, r2
   17550:	str	r2, [sp, #76]	; 0x4c
   17554:	adc	r0, r1, r3
   17558:	str	r0, [sp, #84]	; 0x54
   1755c:	eor	r1, r0, r6
   17560:	eor	r0, r2, r5
   17564:	mov	r2, #16
   17568:	bl	18da8 <__assert_fail@plt+0x7a30>
   1756c:	str	r0, [sp, #124]	; 0x7c
   17570:	str	r1, [sp, #120]	; 0x78
   17574:	adds	r2, r0, sl
   17578:	str	r2, [sp, #148]	; 0x94
   1757c:	ldr	r0, [sp, #160]	; 0xa0
   17580:	adc	r0, r1, r0
   17584:	str	r0, [sp, #160]	; 0xa0
   17588:	eor	r1, r0, r4
   1758c:	eor	r0, r2, r7
   17590:	mov	r2, #63	; 0x3f
   17594:	bl	18da8 <__assert_fail@plt+0x7a30>
   17598:	str	r0, [sp, #100]	; 0x64
   1759c:	str	r1, [sp, #96]	; 0x60
   175a0:	ldr	r0, [sp, #260]	; 0x104
   175a4:	ldr	r7, [sp, #228]	; 0xe4
   175a8:	adds	r0, r7, r0
   175ac:	ldr	r1, [sp, #264]	; 0x108
   175b0:	ldr	r5, [sp, #232]	; 0xe8
   175b4:	adc	r1, r5, r1
   175b8:	ldr	r2, [sp, #56]	; 0x38
   175bc:	adds	sl, r0, r2
   175c0:	ldr	r0, [sp, #72]	; 0x48
   175c4:	adc	r9, r1, r0
   175c8:	ldr	r0, [sp, #112]	; 0x70
   175cc:	eor	r1, r9, r0
   175d0:	ldr	r0, [sp, #116]	; 0x74
   175d4:	eor	r0, sl, r0
   175d8:	mov	r2, #32
   175dc:	bl	18da8 <__assert_fail@plt+0x7a30>
   175e0:	mov	r4, r0
   175e4:	mov	r6, r1
   175e8:	ldr	r0, [sp, #144]	; 0x90
   175ec:	adds	r2, r4, r0
   175f0:	ldr	r0, [sp, #152]	; 0x98
   175f4:	adc	r0, r1, r0
   175f8:	str	r0, [sp, #152]	; 0x98
   175fc:	eor	r1, r0, r5
   17600:	eor	r0, r2, r7
   17604:	mov	r5, r2
   17608:	mov	r2, #24
   1760c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17610:	mov	r8, r0
   17614:	mov	r7, r1
   17618:	ldr	r0, [fp, #-304]	; 0xfffffed0
   1761c:	adds	r0, sl, r0
   17620:	ldr	r1, [fp, #-300]	; 0xfffffed4
   17624:	adc	r1, r9, r1
   17628:	adds	r2, r0, r8
   1762c:	str	r2, [sp, #72]	; 0x48
   17630:	adc	r0, r1, r7
   17634:	str	r0, [sp, #80]	; 0x50
   17638:	eor	r1, r0, r6
   1763c:	eor	r0, r2, r4
   17640:	mov	r2, #16
   17644:	bl	18da8 <__assert_fail@plt+0x7a30>
   17648:	str	r0, [sp, #116]	; 0x74
   1764c:	str	r1, [sp, #112]	; 0x70
   17650:	adds	r2, r0, r5
   17654:	str	r2, [sp, #56]	; 0x38
   17658:	ldr	r0, [sp, #152]	; 0x98
   1765c:	adc	r0, r1, r0
   17660:	str	r0, [sp, #144]	; 0x90
   17664:	eor	r1, r0, r7
   17668:	eor	r0, r2, r8
   1766c:	mov	r2, #63	; 0x3f
   17670:	bl	18da8 <__assert_fail@plt+0x7a30>
   17674:	mov	r4, r0
   17678:	mov	r7, r1
   1767c:	ldr	r0, [sp, #260]	; 0x104
   17680:	ldr	r1, [sp, #60]	; 0x3c
   17684:	adds	r0, r1, r0
   17688:	ldr	r1, [sp, #264]	; 0x108
   1768c:	ldr	r2, [sp, #64]	; 0x40
   17690:	adc	r1, r2, r1
   17694:	adds	r8, r0, r4
   17698:	adc	r9, r1, r7
   1769c:	ldr	r0, [sp, #52]	; 0x34
   176a0:	eor	r1, r9, r0
   176a4:	ldr	r0, [sp, #136]	; 0x88
   176a8:	eor	r0, r8, r0
   176ac:	mov	r2, #32
   176b0:	bl	18da8 <__assert_fail@plt+0x7a30>
   176b4:	mov	r6, r0
   176b8:	mov	r5, r1
   176bc:	ldr	r0, [sp, #148]	; 0x94
   176c0:	adds	sl, r6, r0
   176c4:	ldr	r0, [sp, #160]	; 0xa0
   176c8:	adc	r0, r1, r0
   176cc:	str	r0, [sp, #264]	; 0x108
   176d0:	eor	r1, r0, r7
   176d4:	eor	r0, sl, r4
   176d8:	mov	r2, #24
   176dc:	bl	18da8 <__assert_fail@plt+0x7a30>
   176e0:	mov	r4, r0
   176e4:	mov	r7, r1
   176e8:	adds	r0, r0, r8
   176ec:	adc	r1, r1, r9
   176f0:	ldr	r2, [sp, #244]	; 0xf4
   176f4:	ldrd	r2, [r2]
   176f8:	adds	r2, r0, r2
   176fc:	str	r2, [sp, #52]	; 0x34
   17700:	adc	r0, r1, r3
   17704:	str	r0, [sp, #60]	; 0x3c
   17708:	eor	r1, r0, r5
   1770c:	eor	r0, r2, r6
   17710:	mov	r2, #16
   17714:	bl	18da8 <__assert_fail@plt+0x7a30>
   17718:	str	r0, [sp, #160]	; 0xa0
   1771c:	str	r1, [sp, #136]	; 0x88
   17720:	adds	r2, r0, sl
   17724:	str	r2, [sp, #148]	; 0x94
   17728:	ldr	r0, [sp, #264]	; 0x108
   1772c:	adc	r0, r1, r0
   17730:	str	r0, [sp, #152]	; 0x98
   17734:	eor	r1, r0, r7
   17738:	eor	r0, r2, r4
   1773c:	mov	r2, #63	; 0x3f
   17740:	bl	18da8 <__assert_fail@plt+0x7a30>
   17744:	str	r0, [sp, #228]	; 0xe4
   17748:	str	r1, [sp, #232]	; 0xe8
   1774c:	ldr	r9, [sp, #92]	; 0x5c
   17750:	ldr	r2, [sp, #68]	; 0x44
   17754:	adds	r7, r2, r9
   17758:	ldr	r8, [sp, #88]	; 0x58
   1775c:	ldr	r2, [sp, #140]	; 0x8c
   17760:	adc	r6, r2, r8
   17764:	ldr	r2, [fp, #-292]	; 0xfffffedc
   17768:	strd	r0, [r2]
   1776c:	ldr	r2, [sp, #252]	; 0xfc
   17770:	ldrd	r2, [r2]
   17774:	adds	sl, r7, r2
   17778:	adc	r1, r6, r3
   1777c:	str	r1, [sp, #260]	; 0x104
   17780:	ldr	r0, [sp, #120]	; 0x78
   17784:	eor	r1, r1, r0
   17788:	ldr	r0, [sp, #124]	; 0x7c
   1778c:	eor	r0, sl, r0
   17790:	mov	r2, #32
   17794:	bl	18da8 <__assert_fail@plt+0x7a30>
   17798:	mov	r4, r0
   1779c:	mov	r5, r1
   177a0:	ldr	r0, [sp, #56]	; 0x38
   177a4:	adds	r2, r4, r0
   177a8:	ldr	r0, [sp, #144]	; 0x90
   177ac:	adc	r0, r1, r0
   177b0:	str	r0, [sp, #264]	; 0x108
   177b4:	eor	r1, r0, r8
   177b8:	eor	r0, r2, r9
   177bc:	mov	r8, r2
   177c0:	mov	r2, #24
   177c4:	bl	18da8 <__assert_fail@plt+0x7a30>
   177c8:	mov	r6, r0
   177cc:	mov	r7, r1
   177d0:	adds	r0, r0, sl
   177d4:	ldr	r1, [sp, #260]	; 0x104
   177d8:	adc	r1, r7, r1
   177dc:	ldr	r2, [sp, #268]	; 0x10c
   177e0:	ldrd	r2, [r2]
   177e4:	adds	r2, r0, r2
   177e8:	str	r2, [sp, #64]	; 0x40
   177ec:	adc	r0, r1, r3
   177f0:	str	r0, [sp, #68]	; 0x44
   177f4:	eor	r1, r0, r5
   177f8:	eor	r0, r2, r4
   177fc:	mov	r2, #16
   17800:	bl	18da8 <__assert_fail@plt+0x7a30>
   17804:	str	r0, [sp, #124]	; 0x7c
   17808:	str	r1, [sp, #120]	; 0x78
   1780c:	adds	r2, r0, r8
   17810:	str	r2, [sp, #140]	; 0x8c
   17814:	ldr	r0, [sp, #264]	; 0x108
   17818:	adc	r0, r1, r0
   1781c:	str	r0, [sp, #144]	; 0x90
   17820:	eor	r1, r0, r7
   17824:	eor	r0, r2, r6
   17828:	mov	r2, #63	; 0x3f
   1782c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17830:	mov	r2, r0
   17834:	str	r0, [sp, #264]	; 0x108
   17838:	mov	r3, r1
   1783c:	str	r1, [sp, #260]	; 0x104
   17840:	ldr	r0, [sp, #288]	; 0x120
   17844:	ldr	r1, [sp, #52]	; 0x34
   17848:	adds	r0, r1, r0
   1784c:	ldr	r1, [sp, #292]	; 0x124
   17850:	ldr	r7, [sp, #60]	; 0x3c
   17854:	adc	r1, r7, r1
   17858:	adds	r0, r0, r2
   1785c:	str	r0, [sp, #92]	; 0x5c
   17860:	adc	r0, r1, r3
   17864:	str	r0, [sp, #88]	; 0x58
   17868:	ldr	r0, [fp, #-312]	; 0xfffffec8
   1786c:	ldr	r4, [sp, #108]	; 0x6c
   17870:	adds	r0, r4, r0
   17874:	ldr	r1, [fp, #-308]	; 0xfffffecc
   17878:	ldr	r7, [sp, #104]	; 0x68
   1787c:	adc	r1, r7, r1
   17880:	ldr	r2, [sp, #76]	; 0x4c
   17884:	adds	r8, r0, r2
   17888:	ldr	r0, [sp, #84]	; 0x54
   1788c:	adc	r9, r1, r0
   17890:	ldr	r0, [sp, #112]	; 0x70
   17894:	eor	r1, r0, r9
   17898:	ldr	r0, [sp, #116]	; 0x74
   1789c:	eor	r0, r0, r8
   178a0:	mov	r2, #32
   178a4:	bl	18da8 <__assert_fail@plt+0x7a30>
   178a8:	mov	r5, r0
   178ac:	mov	r6, r1
   178b0:	ldr	r0, [sp, #212]	; 0xd4
   178b4:	adds	sl, r5, r0
   178b8:	ldr	r0, [sp, #216]	; 0xd8
   178bc:	adc	r0, r1, r0
   178c0:	str	r0, [sp, #216]	; 0xd8
   178c4:	eor	r1, r0, r7
   178c8:	eor	r0, sl, r4
   178cc:	mov	r2, #24
   178d0:	bl	18da8 <__assert_fail@plt+0x7a30>
   178d4:	mov	r7, r0
   178d8:	mov	r4, r1
   178dc:	ldr	r0, [sp, #304]	; 0x130
   178e0:	adds	r0, r8, r0
   178e4:	ldr	r1, [sp, #308]	; 0x134
   178e8:	adc	r1, r9, r1
   178ec:	adds	r2, r0, r7
   178f0:	str	r2, [sp, #104]	; 0x68
   178f4:	adc	r0, r1, r4
   178f8:	str	r0, [sp, #108]	; 0x6c
   178fc:	eor	r1, r0, r6
   17900:	eor	r0, r2, r5
   17904:	mov	r2, #16
   17908:	bl	18da8 <__assert_fail@plt+0x7a30>
   1790c:	str	r0, [sp, #116]	; 0x74
   17910:	str	r1, [sp, #112]	; 0x70
   17914:	adds	r2, r0, sl
   17918:	str	r2, [sp, #212]	; 0xd4
   1791c:	ldr	r0, [sp, #216]	; 0xd8
   17920:	adc	r0, r1, r0
   17924:	str	r0, [sp, #216]	; 0xd8
   17928:	eor	r1, r0, r4
   1792c:	eor	r0, r2, r7
   17930:	mov	r2, #63	; 0x3f
   17934:	bl	18da8 <__assert_fail@plt+0x7a30>
   17938:	str	r0, [sp, #76]	; 0x4c
   1793c:	str	r1, [sp, #56]	; 0x38
   17940:	ldr	r0, [sp, #312]	; 0x138
   17944:	ldr	r5, [sp, #100]	; 0x64
   17948:	adds	r0, r5, r0
   1794c:	ldr	r1, [sp, #316]	; 0x13c
   17950:	ldr	r6, [sp, #96]	; 0x60
   17954:	adc	r1, r6, r1
   17958:	ldr	r2, [sp, #72]	; 0x48
   1795c:	adds	r9, r0, r2
   17960:	ldr	r0, [sp, #80]	; 0x50
   17964:	adc	r8, r1, r0
   17968:	ldr	r0, [sp, #236]	; 0xec
   1796c:	eor	r1, r8, r0
   17970:	ldr	r0, [sp, #240]	; 0xf0
   17974:	eor	r0, r9, r0
   17978:	mov	r2, #32
   1797c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17980:	mov	r4, r0
   17984:	mov	r7, r1
   17988:	ldr	r0, [sp, #156]	; 0x9c
   1798c:	adds	sl, r4, r0
   17990:	ldr	r0, [sp, #164]	; 0xa4
   17994:	adc	r0, r1, r0
   17998:	str	r0, [sp, #240]	; 0xf0
   1799c:	eor	r1, r0, r6
   179a0:	eor	r0, sl, r5
   179a4:	mov	r2, #24
   179a8:	bl	18da8 <__assert_fail@plt+0x7a30>
   179ac:	mov	r5, r0
   179b0:	mov	r6, r1
   179b4:	ldr	r0, [fp, #-304]	; 0xfffffed0
   179b8:	adds	r0, r9, r0
   179bc:	ldr	r1, [fp, #-300]	; 0xfffffed4
   179c0:	adc	r1, r8, r1
   179c4:	adds	r2, r0, r5
   179c8:	str	r2, [sp, #60]	; 0x3c
   179cc:	adc	r0, r1, r6
   179d0:	str	r0, [sp, #156]	; 0x9c
   179d4:	eor	r1, r0, r7
   179d8:	eor	r0, r2, r4
   179dc:	mov	r2, #16
   179e0:	bl	18da8 <__assert_fail@plt+0x7a30>
   179e4:	mov	r4, r0
   179e8:	mov	r7, r1
   179ec:	adds	r2, r0, sl
   179f0:	str	r2, [sp, #100]	; 0x64
   179f4:	ldr	r0, [sp, #240]	; 0xf0
   179f8:	adc	r0, r1, r0
   179fc:	str	r0, [sp, #164]	; 0xa4
   17a00:	eor	r1, r0, r6
   17a04:	eor	r0, r2, r5
   17a08:	mov	r2, #63	; 0x3f
   17a0c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17a10:	str	r0, [sp, #84]	; 0x54
   17a14:	str	r1, [sp, #80]	; 0x50
   17a18:	ldr	r8, [sp, #88]	; 0x58
   17a1c:	eor	r1, r7, r8
   17a20:	ldr	r9, [sp, #92]	; 0x5c
   17a24:	eor	r0, r4, r9
   17a28:	mov	r2, #32
   17a2c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17a30:	mov	r4, r0
   17a34:	mov	r6, r1
   17a38:	ldr	r0, [sp, #212]	; 0xd4
   17a3c:	adds	r2, r4, r0
   17a40:	str	r2, [sp, #212]	; 0xd4
   17a44:	ldr	r0, [sp, #216]	; 0xd8
   17a48:	adc	sl, r1, r0
   17a4c:	ldr	r0, [sp, #260]	; 0x104
   17a50:	eor	r1, sl, r0
   17a54:	ldr	r0, [sp, #264]	; 0x108
   17a58:	eor	r0, r2, r0
   17a5c:	mov	r2, #24
   17a60:	bl	18da8 <__assert_fail@plt+0x7a30>
   17a64:	mov	r7, r0
   17a68:	mov	r5, r1
   17a6c:	adds	r0, r0, r9
   17a70:	adc	r1, r1, r8
   17a74:	ldr	r2, [sp, #248]	; 0xf8
   17a78:	ldrd	r2, [r2]
   17a7c:	adds	r2, r0, r2
   17a80:	str	r2, [sp, #236]	; 0xec
   17a84:	adc	r0, r1, r3
   17a88:	str	r0, [sp, #240]	; 0xf0
   17a8c:	eor	r1, r0, r6
   17a90:	eor	r0, r2, r4
   17a94:	mov	r2, #16
   17a98:	bl	18da8 <__assert_fail@plt+0x7a30>
   17a9c:	mov	r3, r0
   17aa0:	str	r0, [sp, #264]	; 0x108
   17aa4:	mov	r6, r1
   17aa8:	str	r1, [sp, #260]	; 0x104
   17aac:	ldr	r0, [sp, #212]	; 0xd4
   17ab0:	adds	r2, r3, r0
   17ab4:	str	r2, [sp, #212]	; 0xd4
   17ab8:	adc	r0, r1, sl
   17abc:	str	r0, [sp, #216]	; 0xd8
   17ac0:	eor	r1, r0, r5
   17ac4:	eor	r0, r2, r7
   17ac8:	ldr	r2, [fp, #-296]	; 0xfffffed8
   17acc:	stm	r2, {r3, r6}
   17ad0:	mov	r2, #63	; 0x3f
   17ad4:	bl	18da8 <__assert_fail@plt+0x7a30>
   17ad8:	str	r0, [sp, #92]	; 0x5c
   17adc:	str	r1, [sp, #88]	; 0x58
   17ae0:	ldr	r0, [sp, #64]	; 0x40
   17ae4:	ldr	r6, [sp, #76]	; 0x4c
   17ae8:	adds	r0, r6, r0
   17aec:	ldr	r1, [sp, #68]	; 0x44
   17af0:	ldr	r7, [sp, #56]	; 0x38
   17af4:	adc	r1, r7, r1
   17af8:	ldr	r2, [sp, #272]	; 0x110
   17afc:	ldrd	r2, [r2]
   17b00:	adds	r8, r0, r2
   17b04:	adc	sl, r1, r3
   17b08:	ldr	r0, [sp, #136]	; 0x88
   17b0c:	eor	r1, sl, r0
   17b10:	ldr	r0, [sp, #160]	; 0xa0
   17b14:	eor	r0, r8, r0
   17b18:	mov	r2, #32
   17b1c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17b20:	mov	r4, r0
   17b24:	mov	r5, r1
   17b28:	ldr	r0, [sp, #100]	; 0x64
   17b2c:	adds	r9, r4, r0
   17b30:	ldr	r0, [sp, #164]	; 0xa4
   17b34:	adc	r0, r1, r0
   17b38:	str	r0, [sp, #164]	; 0xa4
   17b3c:	eor	r1, r0, r7
   17b40:	eor	r0, r9, r6
   17b44:	mov	r2, #24
   17b48:	bl	18da8 <__assert_fail@plt+0x7a30>
   17b4c:	mov	r6, r0
   17b50:	mov	r7, r1
   17b54:	ldr	r0, [sp, #280]	; 0x118
   17b58:	adds	r0, r8, r0
   17b5c:	ldr	r1, [sp, #284]	; 0x11c
   17b60:	adc	r1, sl, r1
   17b64:	adds	r2, r0, r6
   17b68:	str	r2, [sp, #72]	; 0x48
   17b6c:	adc	r0, r1, r7
   17b70:	str	r0, [sp, #76]	; 0x4c
   17b74:	eor	r1, r0, r5
   17b78:	eor	r0, r2, r4
   17b7c:	mov	r2, #16
   17b80:	bl	18da8 <__assert_fail@plt+0x7a30>
   17b84:	str	r0, [sp, #136]	; 0x88
   17b88:	str	r1, [sp, #68]	; 0x44
   17b8c:	adds	r2, r0, r9
   17b90:	str	r2, [sp, #160]	; 0xa0
   17b94:	ldr	r0, [sp, #164]	; 0xa4
   17b98:	adc	r0, r1, r0
   17b9c:	str	r0, [sp, #164]	; 0xa4
   17ba0:	eor	r1, r0, r7
   17ba4:	eor	r0, r2, r6
   17ba8:	mov	r2, #63	; 0x3f
   17bac:	bl	18da8 <__assert_fail@plt+0x7a30>
   17bb0:	str	r0, [sp, #100]	; 0x64
   17bb4:	str	r1, [sp, #96]	; 0x60
   17bb8:	ldr	r0, [sp, #104]	; 0x68
   17bbc:	ldr	r6, [sp, #84]	; 0x54
   17bc0:	adds	r0, r6, r0
   17bc4:	ldr	r1, [sp, #108]	; 0x6c
   17bc8:	ldr	r7, [sp, #80]	; 0x50
   17bcc:	adc	r1, r7, r1
   17bd0:	ldr	r2, [sp, #276]	; 0x114
   17bd4:	ldrd	r2, [r2]
   17bd8:	adds	r8, r0, r2
   17bdc:	adc	r9, r1, r3
   17be0:	ldr	r0, [sp, #120]	; 0x78
   17be4:	eor	r1, r9, r0
   17be8:	ldr	r0, [sp, #124]	; 0x7c
   17bec:	eor	r0, r8, r0
   17bf0:	mov	r2, #32
   17bf4:	bl	18da8 <__assert_fail@plt+0x7a30>
   17bf8:	mov	r4, r0
   17bfc:	mov	r5, r1
   17c00:	ldr	r0, [sp, #148]	; 0x94
   17c04:	adds	sl, r4, r0
   17c08:	ldr	r0, [sp, #152]	; 0x98
   17c0c:	adc	r0, r1, r0
   17c10:	str	r0, [sp, #152]	; 0x98
   17c14:	eor	r1, r0, r7
   17c18:	eor	r0, sl, r6
   17c1c:	mov	r2, #24
   17c20:	bl	18da8 <__assert_fail@plt+0x7a30>
   17c24:	mov	r6, r0
   17c28:	mov	r7, r1
   17c2c:	ldr	r0, [sp, #296]	; 0x128
   17c30:	adds	r0, r8, r0
   17c34:	ldr	r1, [sp, #300]	; 0x12c
   17c38:	adc	r1, r9, r1
   17c3c:	adds	r2, r0, r6
   17c40:	str	r2, [sp, #80]	; 0x50
   17c44:	adc	r0, r1, r7
   17c48:	str	r0, [sp, #84]	; 0x54
   17c4c:	eor	r1, r0, r5
   17c50:	eor	r0, r2, r4
   17c54:	mov	r2, #16
   17c58:	bl	18da8 <__assert_fail@plt+0x7a30>
   17c5c:	str	r0, [sp, #148]	; 0x94
   17c60:	str	r1, [sp, #124]	; 0x7c
   17c64:	adds	r2, r0, sl
   17c68:	str	r2, [sp, #120]	; 0x78
   17c6c:	ldr	r0, [sp, #152]	; 0x98
   17c70:	adc	r0, r1, r0
   17c74:	str	r0, [sp, #152]	; 0x98
   17c78:	eor	r1, r0, r7
   17c7c:	eor	r0, r2, r6
   17c80:	mov	r2, #63	; 0x3f
   17c84:	bl	18da8 <__assert_fail@plt+0x7a30>
   17c88:	str	r0, [sp, #108]	; 0x6c
   17c8c:	str	r1, [sp, #104]	; 0x68
   17c90:	ldr	r7, [sp, #228]	; 0xe4
   17c94:	ldr	r0, [sp, #60]	; 0x3c
   17c98:	adds	r0, r0, r7
   17c9c:	ldr	r4, [sp, #232]	; 0xe8
   17ca0:	ldr	r1, [sp, #156]	; 0x9c
   17ca4:	adc	r1, r1, r4
   17ca8:	ldr	r2, [sp, #256]	; 0x100
   17cac:	ldrd	r2, [r2]
   17cb0:	adds	sl, r0, r2
   17cb4:	adc	r8, r1, r3
   17cb8:	ldr	r0, [sp, #112]	; 0x70
   17cbc:	eor	r1, r8, r0
   17cc0:	ldr	r0, [sp, #116]	; 0x74
   17cc4:	eor	r0, sl, r0
   17cc8:	mov	r2, #32
   17ccc:	bl	18da8 <__assert_fail@plt+0x7a30>
   17cd0:	mov	r5, r0
   17cd4:	mov	r6, r1
   17cd8:	ldr	r0, [sp, #140]	; 0x8c
   17cdc:	adds	r2, r5, r0
   17ce0:	ldr	r0, [sp, #144]	; 0x90
   17ce4:	adc	r0, r1, r0
   17ce8:	str	r0, [sp, #156]	; 0x9c
   17cec:	eor	r1, r0, r4
   17cf0:	eor	r0, r2, r7
   17cf4:	mov	r4, r2
   17cf8:	mov	r2, #24
   17cfc:	bl	18da8 <__assert_fail@plt+0x7a30>
   17d00:	mov	r7, r0
   17d04:	mov	r9, r1
   17d08:	adds	r0, r0, sl
   17d0c:	adc	r1, r1, r8
   17d10:	ldr	r2, [fp, #-160]	; 0xffffff60
   17d14:	ldr	r3, [fp, #-156]	; 0xffffff64
   17d18:	adds	r2, r0, r2
   17d1c:	str	r2, [sp, #228]	; 0xe4
   17d20:	adc	r0, r1, r3
   17d24:	str	r0, [sp, #232]	; 0xe8
   17d28:	eor	r1, r0, r6
   17d2c:	eor	r0, r2, r5
   17d30:	mov	r2, #16
   17d34:	bl	18da8 <__assert_fail@plt+0x7a30>
   17d38:	str	r0, [sp, #116]	; 0x74
   17d3c:	str	r1, [sp, #112]	; 0x70
   17d40:	adds	r2, r0, r4
   17d44:	str	r2, [sp, #64]	; 0x40
   17d48:	ldr	r0, [sp, #156]	; 0x9c
   17d4c:	adc	r0, r1, r0
   17d50:	str	r0, [sp, #144]	; 0x90
   17d54:	eor	r1, r0, r9
   17d58:	eor	r0, r2, r7
   17d5c:	mov	r2, #63	; 0x3f
   17d60:	bl	18da8 <__assert_fail@plt+0x7a30>
   17d64:	mov	r7, r0
   17d68:	mov	r6, r1
   17d6c:	ldr	r0, [sp, #236]	; 0xec
   17d70:	adds	r0, r7, r0
   17d74:	ldr	r1, [sp, #240]	; 0xf0
   17d78:	adc	r1, r6, r1
   17d7c:	ldr	r2, [fp, #-160]	; 0xffffff60
   17d80:	ldr	r3, [fp, #-156]	; 0xffffff64
   17d84:	adds	r8, r0, r2
   17d88:	adc	r9, r1, r3
   17d8c:	ldr	r0, [sp, #68]	; 0x44
   17d90:	eor	r1, r9, r0
   17d94:	ldr	r0, [sp, #136]	; 0x88
   17d98:	eor	r0, r8, r0
   17d9c:	mov	r2, #32
   17da0:	bl	18da8 <__assert_fail@plt+0x7a30>
   17da4:	mov	r5, r0
   17da8:	mov	r4, r1
   17dac:	ldr	r0, [sp, #120]	; 0x78
   17db0:	adds	sl, r5, r0
   17db4:	ldr	r0, [sp, #152]	; 0x98
   17db8:	adc	r0, r1, r0
   17dbc:	str	r0, [sp, #240]	; 0xf0
   17dc0:	eor	r1, r0, r6
   17dc4:	eor	r0, sl, r7
   17dc8:	mov	r2, #24
   17dcc:	bl	18da8 <__assert_fail@plt+0x7a30>
   17dd0:	mov	r6, r0
   17dd4:	mov	r7, r1
   17dd8:	ldr	r0, [sp, #312]	; 0x138
   17ddc:	adds	r0, r8, r0
   17de0:	ldr	r1, [sp, #316]	; 0x13c
   17de4:	adc	r1, r9, r1
   17de8:	adds	r2, r0, r6
   17dec:	str	r2, [sp, #56]	; 0x38
   17df0:	adc	r0, r1, r7
   17df4:	str	r0, [sp, #60]	; 0x3c
   17df8:	eor	r1, r0, r4
   17dfc:	eor	r0, r2, r5
   17e00:	mov	r2, #16
   17e04:	bl	18da8 <__assert_fail@plt+0x7a30>
   17e08:	str	r0, [sp, #140]	; 0x8c
   17e0c:	str	r1, [sp, #136]	; 0x88
   17e10:	adds	r2, r0, sl
   17e14:	str	r2, [sp, #152]	; 0x98
   17e18:	ldr	r0, [sp, #240]	; 0xf0
   17e1c:	adc	r0, r1, r0
   17e20:	str	r0, [sp, #156]	; 0x9c
   17e24:	eor	r1, r0, r7
   17e28:	eor	r0, r2, r6
   17e2c:	mov	r2, #63	; 0x3f
   17e30:	bl	18da8 <__assert_fail@plt+0x7a30>
   17e34:	str	r0, [sp, #236]	; 0xec
   17e38:	str	r1, [sp, #240]	; 0xf0
   17e3c:	ldr	r9, [sp, #92]	; 0x5c
   17e40:	ldr	r2, [sp, #72]	; 0x48
   17e44:	adds	r7, r2, r9
   17e48:	ldr	r8, [sp, #88]	; 0x58
   17e4c:	ldr	r2, [sp, #76]	; 0x4c
   17e50:	adc	r6, r2, r8
   17e54:	ldr	r2, [fp, #-292]	; 0xfffffedc
   17e58:	strd	r0, [r2]
   17e5c:	ldr	r2, [sp, #244]	; 0xf4
   17e60:	ldrd	r2, [r2]
   17e64:	adds	sl, r7, r2
   17e68:	adc	r1, r6, r3
   17e6c:	str	r1, [sp, #120]	; 0x78
   17e70:	ldr	r0, [sp, #124]	; 0x7c
   17e74:	eor	r1, r1, r0
   17e78:	ldr	r0, [sp, #148]	; 0x94
   17e7c:	eor	r0, sl, r0
   17e80:	mov	r2, #32
   17e84:	bl	18da8 <__assert_fail@plt+0x7a30>
   17e88:	mov	r4, r0
   17e8c:	mov	r5, r1
   17e90:	ldr	r0, [sp, #64]	; 0x40
   17e94:	adds	r2, r4, r0
   17e98:	ldr	r0, [sp, #144]	; 0x90
   17e9c:	adc	r0, r1, r0
   17ea0:	str	r0, [sp, #148]	; 0x94
   17ea4:	eor	r1, r0, r8
   17ea8:	eor	r0, r2, r9
   17eac:	mov	r8, r2
   17eb0:	mov	r2, #24
   17eb4:	bl	18da8 <__assert_fail@plt+0x7a30>
   17eb8:	mov	r6, r0
   17ebc:	mov	r7, r1
   17ec0:	adds	r0, r0, sl
   17ec4:	ldr	r1, [sp, #120]	; 0x78
   17ec8:	adc	r1, r7, r1
   17ecc:	ldr	r2, [sp, #276]	; 0x114
   17ed0:	ldrd	r2, [r2]
   17ed4:	adds	r2, r0, r2
   17ed8:	str	r2, [sp, #76]	; 0x4c
   17edc:	adc	r0, r1, r3
   17ee0:	str	r0, [sp, #92]	; 0x5c
   17ee4:	eor	r1, r0, r5
   17ee8:	eor	r0, r2, r4
   17eec:	mov	r2, #16
   17ef0:	bl	18da8 <__assert_fail@plt+0x7a30>
   17ef4:	str	r0, [sp, #124]	; 0x7c
   17ef8:	str	r1, [sp, #120]	; 0x78
   17efc:	adds	r2, r0, r8
   17f00:	str	r2, [sp, #144]	; 0x90
   17f04:	ldr	r0, [sp, #148]	; 0x94
   17f08:	adc	r0, r1, r0
   17f0c:	str	r0, [sp, #148]	; 0x94
   17f10:	eor	r1, r0, r7
   17f14:	eor	r0, r2, r6
   17f18:	mov	r2, #63	; 0x3f
   17f1c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17f20:	str	r0, [sp, #72]	; 0x48
   17f24:	str	r1, [sp, #68]	; 0x44
   17f28:	ldr	r2, [sp, #56]	; 0x38
   17f2c:	adds	r0, r0, r2
   17f30:	str	r0, [sp, #64]	; 0x40
   17f34:	ldr	r0, [sp, #60]	; 0x3c
   17f38:	adc	r0, r1, r0
   17f3c:	str	r0, [sp, #56]	; 0x38
   17f40:	ldr	r6, [sp, #100]	; 0x64
   17f44:	ldr	r0, [sp, #80]	; 0x50
   17f48:	adds	r0, r0, r6
   17f4c:	ldr	r7, [sp, #96]	; 0x60
   17f50:	ldr	r1, [sp, #84]	; 0x54
   17f54:	adc	r1, r1, r7
   17f58:	ldr	r2, [sp, #268]	; 0x10c
   17f5c:	ldrd	r2, [r2]
   17f60:	adds	r8, r0, r2
   17f64:	adc	r9, r1, r3
   17f68:	ldr	r0, [sp, #112]	; 0x70
   17f6c:	eor	r1, r9, r0
   17f70:	ldr	r0, [sp, #116]	; 0x74
   17f74:	eor	r0, r8, r0
   17f78:	mov	r2, #32
   17f7c:	bl	18da8 <__assert_fail@plt+0x7a30>
   17f80:	mov	r4, r0
   17f84:	mov	r5, r1
   17f88:	ldr	r0, [sp, #212]	; 0xd4
   17f8c:	adds	sl, r4, r0
   17f90:	ldr	r0, [sp, #216]	; 0xd8
   17f94:	adc	r0, r1, r0
   17f98:	str	r0, [sp, #216]	; 0xd8
   17f9c:	eor	r1, r0, r7
   17fa0:	eor	r0, sl, r6
   17fa4:	mov	r2, #24
   17fa8:	bl	18da8 <__assert_fail@plt+0x7a30>
   17fac:	mov	r6, r0
   17fb0:	mov	r7, r1
   17fb4:	ldr	r0, [fp, #-304]	; 0xfffffed0
   17fb8:	adds	r0, r8, r0
   17fbc:	ldr	r1, [fp, #-300]	; 0xfffffed4
   17fc0:	adc	r1, r9, r1
   17fc4:	adds	r2, r0, r6
   17fc8:	str	r2, [sp, #80]	; 0x50
   17fcc:	adc	r0, r1, r7
   17fd0:	str	r0, [sp, #88]	; 0x58
   17fd4:	eor	r1, r0, r5
   17fd8:	eor	r0, r2, r4
   17fdc:	mov	r2, #16
   17fe0:	bl	18da8 <__assert_fail@plt+0x7a30>
   17fe4:	str	r0, [sp, #116]	; 0x74
   17fe8:	str	r1, [sp, #112]	; 0x70
   17fec:	adds	r2, r0, sl
   17ff0:	str	r2, [sp, #84]	; 0x54
   17ff4:	ldr	r0, [sp, #216]	; 0xd8
   17ff8:	adc	r0, r1, r0
   17ffc:	str	r0, [sp, #96]	; 0x60
   18000:	eor	r1, r0, r7
   18004:	eor	r0, r2, r6
   18008:	mov	r2, #63	; 0x3f
   1800c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18010:	str	r0, [sp, #216]	; 0xd8
   18014:	str	r1, [sp, #212]	; 0xd4
   18018:	ldr	r0, [sp, #304]	; 0x130
   1801c:	ldr	r4, [sp, #108]	; 0x6c
   18020:	adds	r0, r4, r0
   18024:	ldr	r1, [sp, #308]	; 0x134
   18028:	ldr	r6, [sp, #104]	; 0x68
   1802c:	adc	r1, r6, r1
   18030:	ldr	r2, [sp, #228]	; 0xe4
   18034:	adds	r9, r0, r2
   18038:	ldr	r0, [sp, #232]	; 0xe8
   1803c:	adc	r8, r1, r0
   18040:	ldr	r0, [sp, #260]	; 0x104
   18044:	eor	r1, r8, r0
   18048:	ldr	r0, [sp, #264]	; 0x108
   1804c:	eor	r0, r9, r0
   18050:	mov	r2, #32
   18054:	bl	18da8 <__assert_fail@plt+0x7a30>
   18058:	mov	r5, r0
   1805c:	mov	r7, r1
   18060:	ldr	r0, [sp, #160]	; 0xa0
   18064:	adds	sl, r5, r0
   18068:	ldr	r0, [sp, #164]	; 0xa4
   1806c:	adc	r0, r1, r0
   18070:	str	r0, [sp, #264]	; 0x108
   18074:	eor	r1, r0, r6
   18078:	eor	r0, sl, r4
   1807c:	mov	r2, #24
   18080:	bl	18da8 <__assert_fail@plt+0x7a30>
   18084:	mov	r6, r0
   18088:	mov	r4, r1
   1808c:	ldr	r0, [fp, #-312]	; 0xfffffec8
   18090:	adds	r0, r9, r0
   18094:	ldr	r1, [fp, #-308]	; 0xfffffecc
   18098:	adc	r1, r8, r1
   1809c:	adds	r2, r0, r6
   180a0:	str	r2, [sp, #100]	; 0x64
   180a4:	adc	r0, r1, r4
   180a8:	str	r0, [sp, #160]	; 0xa0
   180ac:	eor	r1, r0, r7
   180b0:	eor	r0, r2, r5
   180b4:	mov	r2, #16
   180b8:	bl	18da8 <__assert_fail@plt+0x7a30>
   180bc:	mov	r7, r0
   180c0:	mov	r5, r1
   180c4:	adds	r2, r0, sl
   180c8:	str	r2, [sp, #48]	; 0x30
   180cc:	ldr	r0, [sp, #264]	; 0x108
   180d0:	adc	r0, r1, r0
   180d4:	str	r0, [sp, #52]	; 0x34
   180d8:	eor	r1, r0, r4
   180dc:	eor	r0, r2, r6
   180e0:	mov	r2, #63	; 0x3f
   180e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   180e8:	str	r0, [sp, #104]	; 0x68
   180ec:	str	r1, [sp, #60]	; 0x3c
   180f0:	ldr	r0, [sp, #252]	; 0xfc
   180f4:	ldrd	r0, [r0]
   180f8:	ldr	r2, [sp, #64]	; 0x40
   180fc:	adds	r8, r2, r0
   18100:	ldr	r0, [sp, #56]	; 0x38
   18104:	adc	sl, r0, r1
   18108:	eor	r1, sl, r5
   1810c:	eor	r0, r8, r7
   18110:	mov	r2, #32
   18114:	bl	18da8 <__assert_fail@plt+0x7a30>
   18118:	mov	r4, r0
   1811c:	mov	r5, r1
   18120:	ldr	r0, [sp, #84]	; 0x54
   18124:	adds	r9, r4, r0
   18128:	ldr	r0, [sp, #96]	; 0x60
   1812c:	adc	r1, r1, r0
   18130:	str	r1, [sp, #232]	; 0xe8
   18134:	ldr	r0, [sp, #68]	; 0x44
   18138:	eor	r1, r1, r0
   1813c:	ldr	r0, [sp, #72]	; 0x48
   18140:	eor	r0, r9, r0
   18144:	mov	r2, #24
   18148:	bl	18da8 <__assert_fail@plt+0x7a30>
   1814c:	mov	r6, r0
   18150:	mov	r7, r1
   18154:	adds	r0, r0, r8
   18158:	adc	r1, r1, sl
   1815c:	ldr	r2, [sp, #272]	; 0x110
   18160:	ldrd	r2, [r2]
   18164:	adds	r2, r0, r2
   18168:	str	r2, [sp, #84]	; 0x54
   1816c:	adc	r0, r1, r3
   18170:	str	r0, [sp, #96]	; 0x60
   18174:	eor	r1, r0, r5
   18178:	eor	r0, r2, r4
   1817c:	mov	r2, #16
   18180:	bl	18da8 <__assert_fail@plt+0x7a30>
   18184:	mov	r3, r0
   18188:	str	r0, [sp, #264]	; 0x108
   1818c:	mov	r5, r1
   18190:	str	r1, [sp, #260]	; 0x104
   18194:	adds	r2, r0, r9
   18198:	str	r2, [sp, #228]	; 0xe4
   1819c:	ldr	r0, [sp, #232]	; 0xe8
   181a0:	adc	r0, r1, r0
   181a4:	str	r0, [sp, #232]	; 0xe8
   181a8:	eor	r1, r0, r7
   181ac:	eor	r0, r2, r6
   181b0:	ldr	r2, [fp, #-296]	; 0xfffffed8
   181b4:	stm	r2, {r3, r5}
   181b8:	mov	r2, #63	; 0x3f
   181bc:	bl	18da8 <__assert_fail@plt+0x7a30>
   181c0:	str	r0, [sp, #164]	; 0xa4
   181c4:	str	r1, [sp, #108]	; 0x6c
   181c8:	ldr	r0, [sp, #76]	; 0x4c
   181cc:	ldr	r6, [sp, #216]	; 0xd8
   181d0:	adds	r0, r6, r0
   181d4:	ldr	r1, [sp, #92]	; 0x5c
   181d8:	ldr	r7, [sp, #212]	; 0xd4
   181dc:	adc	r1, r7, r1
   181e0:	ldr	r2, [sp, #220]	; 0xdc
   181e4:	ldrd	r2, [r2]
   181e8:	adds	r8, r0, r2
   181ec:	adc	r9, r1, r3
   181f0:	ldr	r0, [sp, #136]	; 0x88
   181f4:	eor	r1, r9, r0
   181f8:	ldr	r0, [sp, #140]	; 0x8c
   181fc:	eor	r0, r8, r0
   18200:	mov	r2, #32
   18204:	bl	18da8 <__assert_fail@plt+0x7a30>
   18208:	mov	r4, r0
   1820c:	mov	r5, r1
   18210:	ldr	r0, [sp, #48]	; 0x30
   18214:	adds	sl, r4, r0
   18218:	ldr	r0, [sp, #52]	; 0x34
   1821c:	adc	r0, r1, r0
   18220:	str	r0, [sp, #140]	; 0x8c
   18224:	eor	r1, r0, r7
   18228:	eor	r0, sl, r6
   1822c:	mov	r2, #24
   18230:	bl	18da8 <__assert_fail@plt+0x7a30>
   18234:	mov	r7, r0
   18238:	mov	r6, r1
   1823c:	adds	r0, r0, r8
   18240:	adc	r1, r1, r9
   18244:	ldr	r2, [sp, #248]	; 0xf8
   18248:	ldrd	r2, [r2]
   1824c:	adds	r2, r0, r2
   18250:	str	r2, [sp, #76]	; 0x4c
   18254:	adc	r0, r1, r3
   18258:	str	r0, [sp, #92]	; 0x5c
   1825c:	eor	r1, r0, r5
   18260:	eor	r0, r2, r4
   18264:	mov	r2, #16
   18268:	bl	18da8 <__assert_fail@plt+0x7a30>
   1826c:	str	r0, [sp, #68]	; 0x44
   18270:	str	r1, [sp, #64]	; 0x40
   18274:	adds	r2, r0, sl
   18278:	str	r2, [sp, #212]	; 0xd4
   1827c:	ldr	r0, [sp, #140]	; 0x8c
   18280:	adc	r0, r1, r0
   18284:	str	r0, [sp, #216]	; 0xd8
   18288:	eor	r1, r0, r6
   1828c:	eor	r0, r2, r7
   18290:	mov	r2, #63	; 0x3f
   18294:	bl	18da8 <__assert_fail@plt+0x7a30>
   18298:	str	r0, [sp, #140]	; 0x8c
   1829c:	str	r1, [sp, #136]	; 0x88
   182a0:	ldr	r0, [sp, #296]	; 0x128
   182a4:	ldr	r1, [sp, #80]	; 0x50
   182a8:	adds	r0, r1, r0
   182ac:	ldr	r1, [sp, #300]	; 0x12c
   182b0:	ldr	r2, [sp, #88]	; 0x58
   182b4:	adc	r1, r2, r1
   182b8:	ldr	r4, [sp, #104]	; 0x68
   182bc:	adds	r8, r0, r4
   182c0:	ldr	r5, [sp, #60]	; 0x3c
   182c4:	adc	r9, r1, r5
   182c8:	ldr	r0, [sp, #120]	; 0x78
   182cc:	eor	r1, r9, r0
   182d0:	ldr	r0, [sp, #124]	; 0x7c
   182d4:	eor	r0, r8, r0
   182d8:	mov	r2, #32
   182dc:	bl	18da8 <__assert_fail@plt+0x7a30>
   182e0:	mov	r6, r0
   182e4:	mov	r7, r1
   182e8:	ldr	r0, [sp, #152]	; 0x98
   182ec:	adds	sl, r6, r0
   182f0:	ldr	r0, [sp, #156]	; 0x9c
   182f4:	adc	r0, r1, r0
   182f8:	str	r0, [sp, #156]	; 0x9c
   182fc:	eor	r1, r0, r5
   18300:	eor	r0, sl, r4
   18304:	mov	r2, #24
   18308:	bl	18da8 <__assert_fail@plt+0x7a30>
   1830c:	mov	r5, r0
   18310:	mov	r4, r1
   18314:	adds	r0, r0, r8
   18318:	adc	r1, r1, r9
   1831c:	ldr	r2, [sp, #256]	; 0x100
   18320:	ldrd	r2, [r2]
   18324:	adds	r2, r0, r2
   18328:	str	r2, [sp, #104]	; 0x68
   1832c:	adc	r0, r1, r3
   18330:	str	r0, [sp, #120]	; 0x78
   18334:	eor	r1, r0, r7
   18338:	eor	r0, r2, r6
   1833c:	mov	r2, #16
   18340:	bl	18da8 <__assert_fail@plt+0x7a30>
   18344:	str	r0, [sp, #80]	; 0x50
   18348:	str	r1, [sp, #72]	; 0x48
   1834c:	adds	r2, r0, sl
   18350:	str	r2, [sp, #60]	; 0x3c
   18354:	ldr	r0, [sp, #156]	; 0x9c
   18358:	adc	r0, r1, r0
   1835c:	str	r0, [sp, #156]	; 0x9c
   18360:	eor	r1, r0, r4
   18364:	eor	r0, r2, r5
   18368:	mov	r2, #63	; 0x3f
   1836c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18370:	str	r0, [sp, #152]	; 0x98
   18374:	str	r1, [sp, #124]	; 0x7c
   18378:	ldr	r0, [sp, #280]	; 0x118
   1837c:	ldr	r6, [sp, #236]	; 0xec
   18380:	adds	r0, r6, r0
   18384:	ldr	r1, [sp, #284]	; 0x11c
   18388:	ldr	r7, [sp, #240]	; 0xf0
   1838c:	adc	r1, r7, r1
   18390:	ldr	r2, [sp, #100]	; 0x64
   18394:	adds	sl, r0, r2
   18398:	ldr	r0, [sp, #160]	; 0xa0
   1839c:	adc	r9, r1, r0
   183a0:	ldr	r0, [sp, #112]	; 0x70
   183a4:	eor	r1, r9, r0
   183a8:	ldr	r0, [sp, #116]	; 0x74
   183ac:	eor	r0, sl, r0
   183b0:	mov	r2, #32
   183b4:	bl	18da8 <__assert_fail@plt+0x7a30>
   183b8:	mov	r4, r0
   183bc:	mov	r5, r1
   183c0:	ldr	r0, [sp, #144]	; 0x90
   183c4:	adds	r2, r4, r0
   183c8:	ldr	r0, [sp, #148]	; 0x94
   183cc:	adc	r0, r1, r0
   183d0:	str	r0, [sp, #160]	; 0xa0
   183d4:	eor	r1, r0, r7
   183d8:	eor	r0, r2, r6
   183dc:	mov	r7, r2
   183e0:	mov	r2, #24
   183e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   183e8:	mov	r8, r0
   183ec:	mov	r6, r1
   183f0:	ldr	r0, [sp, #288]	; 0x120
   183f4:	adds	r0, sl, r0
   183f8:	ldr	r1, [sp, #292]	; 0x124
   183fc:	adc	r1, r9, r1
   18400:	adds	r2, r0, r8
   18404:	str	r2, [sp, #144]	; 0x90
   18408:	adc	r0, r1, r6
   1840c:	str	r0, [sp, #148]	; 0x94
   18410:	eor	r1, r0, r5
   18414:	eor	r0, r2, r4
   18418:	mov	r2, #16
   1841c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18420:	str	r0, [sp, #100]	; 0x64
   18424:	str	r1, [sp, #88]	; 0x58
   18428:	adds	r2, r0, r7
   1842c:	str	r2, [sp, #112]	; 0x70
   18430:	ldr	r0, [sp, #160]	; 0xa0
   18434:	adc	r0, r1, r0
   18438:	str	r0, [sp, #116]	; 0x74
   1843c:	eor	r1, r0, r6
   18440:	eor	r0, r2, r8
   18444:	mov	r2, #63	; 0x3f
   18448:	bl	18da8 <__assert_fail@plt+0x7a30>
   1844c:	mov	r5, r0
   18450:	mov	r6, r1
   18454:	ldr	r0, [sp, #280]	; 0x118
   18458:	ldr	r1, [sp, #84]	; 0x54
   1845c:	adds	r0, r1, r0
   18460:	ldr	r1, [sp, #284]	; 0x11c
   18464:	ldr	r2, [sp, #96]	; 0x60
   18468:	adc	r1, r2, r1
   1846c:	adds	r8, r0, r5
   18470:	adc	r9, r1, r6
   18474:	ldr	r0, [sp, #64]	; 0x40
   18478:	eor	r1, r9, r0
   1847c:	ldr	r0, [sp, #68]	; 0x44
   18480:	eor	r0, r8, r0
   18484:	mov	r2, #32
   18488:	bl	18da8 <__assert_fail@plt+0x7a30>
   1848c:	mov	r4, r0
   18490:	mov	r7, r1
   18494:	ldr	r0, [sp, #60]	; 0x3c
   18498:	adds	sl, r4, r0
   1849c:	ldr	r0, [sp, #156]	; 0x9c
   184a0:	adc	r0, r1, r0
   184a4:	str	r0, [sp, #284]	; 0x11c
   184a8:	eor	r1, r0, r6
   184ac:	eor	r0, sl, r5
   184b0:	mov	r2, #24
   184b4:	bl	18da8 <__assert_fail@plt+0x7a30>
   184b8:	mov	r5, r0
   184bc:	mov	r6, r1
   184c0:	adds	r0, r0, r8
   184c4:	adc	r1, r1, r9
   184c8:	ldr	r2, [sp, #220]	; 0xdc
   184cc:	ldrd	r2, [r2]
   184d0:	adds	r2, r0, r2
   184d4:	str	r2, [sp, #68]	; 0x44
   184d8:	adc	r0, r1, r3
   184dc:	str	r0, [sp, #84]	; 0x54
   184e0:	eor	r1, r0, r7
   184e4:	eor	r0, r2, r4
   184e8:	mov	r2, #16
   184ec:	bl	18da8 <__assert_fail@plt+0x7a30>
   184f0:	str	r0, [sp, #160]	; 0xa0
   184f4:	str	r1, [sp, #156]	; 0x9c
   184f8:	adds	r2, r0, sl
   184fc:	str	r2, [sp, #236]	; 0xec
   18500:	ldr	r0, [sp, #284]	; 0x11c
   18504:	adc	r0, r1, r0
   18508:	str	r0, [sp, #240]	; 0xf0
   1850c:	eor	r1, r0, r6
   18510:	eor	r0, r2, r5
   18514:	mov	r2, #63	; 0x3f
   18518:	bl	18da8 <__assert_fail@plt+0x7a30>
   1851c:	str	r0, [sp, #280]	; 0x118
   18520:	str	r1, [sp, #284]	; 0x11c
   18524:	ldr	r9, [sp, #164]	; 0xa4
   18528:	ldr	r2, [sp, #76]	; 0x4c
   1852c:	adds	r7, r2, r9
   18530:	ldr	r8, [sp, #108]	; 0x6c
   18534:	ldr	r2, [sp, #92]	; 0x5c
   18538:	adc	r6, r2, r8
   1853c:	ldr	r2, [fp, #-292]	; 0xfffffedc
   18540:	strd	r0, [r2]
   18544:	ldr	r2, [sp, #268]	; 0x10c
   18548:	ldrd	r2, [r2]
   1854c:	adds	sl, r7, r2
   18550:	adc	r1, r6, r3
   18554:	str	r1, [sp, #220]	; 0xdc
   18558:	ldr	r0, [sp, #72]	; 0x48
   1855c:	eor	r1, r1, r0
   18560:	ldr	r0, [sp, #80]	; 0x50
   18564:	eor	r0, sl, r0
   18568:	mov	r2, #32
   1856c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18570:	mov	r4, r0
   18574:	mov	r5, r1
   18578:	ldr	r0, [sp, #112]	; 0x70
   1857c:	adds	r2, r4, r0
   18580:	ldr	r0, [sp, #116]	; 0x74
   18584:	adc	r0, r1, r0
   18588:	str	r0, [sp, #268]	; 0x10c
   1858c:	eor	r1, r0, r8
   18590:	eor	r0, r2, r9
   18594:	mov	r8, r2
   18598:	mov	r2, #24
   1859c:	bl	18da8 <__assert_fail@plt+0x7a30>
   185a0:	mov	r6, r0
   185a4:	mov	r7, r1
   185a8:	adds	r0, r0, sl
   185ac:	ldr	r1, [sp, #220]	; 0xdc
   185b0:	adc	r1, r7, r1
   185b4:	ldr	r2, [sp, #252]	; 0xfc
   185b8:	ldrd	r2, [r2]
   185bc:	adds	r2, r0, r2
   185c0:	str	r2, [sp, #112]	; 0x70
   185c4:	adc	r0, r1, r3
   185c8:	str	r0, [sp, #116]	; 0x74
   185cc:	eor	r1, r0, r5
   185d0:	eor	r0, r2, r4
   185d4:	mov	r2, #16
   185d8:	bl	18da8 <__assert_fail@plt+0x7a30>
   185dc:	str	r0, [sp, #220]	; 0xdc
   185e0:	str	r1, [sp, #164]	; 0xa4
   185e4:	adds	r2, r0, r8
   185e8:	str	r2, [sp, #252]	; 0xfc
   185ec:	ldr	r0, [sp, #268]	; 0x10c
   185f0:	adc	r0, r1, r0
   185f4:	str	r0, [sp, #268]	; 0x10c
   185f8:	eor	r1, r0, r7
   185fc:	eor	r0, r2, r6
   18600:	mov	r2, #63	; 0x3f
   18604:	bl	18da8 <__assert_fail@plt+0x7a30>
   18608:	mov	r2, r0
   1860c:	str	r0, [sp, #108]	; 0x6c
   18610:	mov	r3, r1
   18614:	str	r1, [sp, #96]	; 0x60
   18618:	ldr	r0, [sp, #312]	; 0x138
   1861c:	ldr	r1, [sp, #68]	; 0x44
   18620:	adds	r0, r1, r0
   18624:	ldr	r1, [sp, #316]	; 0x13c
   18628:	ldr	r7, [sp, #84]	; 0x54
   1862c:	adc	r1, r7, r1
   18630:	adds	r0, r0, r2
   18634:	str	r0, [sp, #92]	; 0x5c
   18638:	adc	r0, r1, r3
   1863c:	str	r0, [sp, #84]	; 0x54
   18640:	ldr	r5, [sp, #140]	; 0x8c
   18644:	ldr	r0, [sp, #104]	; 0x68
   18648:	adds	r0, r0, r5
   1864c:	ldr	r7, [sp, #136]	; 0x88
   18650:	ldr	r1, [sp, #120]	; 0x78
   18654:	adc	r1, r1, r7
   18658:	ldr	r2, [sp, #272]	; 0x110
   1865c:	ldrd	r2, [r2]
   18660:	adds	r8, r0, r2
   18664:	adc	r9, r1, r3
   18668:	ldr	r0, [sp, #88]	; 0x58
   1866c:	eor	r1, r9, r0
   18670:	ldr	r0, [sp, #100]	; 0x64
   18674:	eor	r0, r8, r0
   18678:	mov	r2, #32
   1867c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18680:	mov	r4, r0
   18684:	mov	r6, r1
   18688:	ldr	r0, [sp, #228]	; 0xe4
   1868c:	adds	sl, r4, r0
   18690:	ldr	r0, [sp, #232]	; 0xe8
   18694:	adc	r0, r1, r0
   18698:	str	r0, [sp, #272]	; 0x110
   1869c:	eor	r1, r0, r7
   186a0:	eor	r0, sl, r5
   186a4:	mov	r2, #24
   186a8:	bl	18da8 <__assert_fail@plt+0x7a30>
   186ac:	mov	r7, r0
   186b0:	mov	r5, r1
   186b4:	ldr	r0, [sp, #288]	; 0x120
   186b8:	adds	r0, r8, r0
   186bc:	ldr	r1, [sp, #292]	; 0x124
   186c0:	adc	r1, r9, r1
   186c4:	adds	r2, r0, r7
   186c8:	str	r2, [sp, #288]	; 0x120
   186cc:	adc	r0, r1, r5
   186d0:	str	r0, [sp, #292]	; 0x124
   186d4:	eor	r1, r0, r6
   186d8:	eor	r0, r2, r4
   186dc:	mov	r2, #16
   186e0:	bl	18da8 <__assert_fail@plt+0x7a30>
   186e4:	str	r0, [sp, #316]	; 0x13c
   186e8:	str	r1, [sp, #312]	; 0x138
   186ec:	adds	r2, r0, sl
   186f0:	str	r2, [sp, #136]	; 0x88
   186f4:	ldr	r0, [sp, #272]	; 0x110
   186f8:	adc	r0, r1, r0
   186fc:	str	r0, [sp, #140]	; 0x8c
   18700:	eor	r1, r0, r5
   18704:	eor	r0, r2, r7
   18708:	mov	r2, #63	; 0x3f
   1870c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18710:	str	r0, [sp, #232]	; 0xe8
   18714:	str	r1, [sp, #228]	; 0xe4
   18718:	ldr	r6, [sp, #152]	; 0x98
   1871c:	ldr	r0, [sp, #144]	; 0x90
   18720:	adds	r0, r0, r6
   18724:	ldr	r7, [sp, #124]	; 0x7c
   18728:	ldr	r1, [sp, #148]	; 0x94
   1872c:	adc	r1, r1, r7
   18730:	ldr	r2, [sp, #256]	; 0x100
   18734:	ldrd	r2, [r2]
   18738:	adds	sl, r0, r2
   1873c:	adc	r8, r1, r3
   18740:	ldr	r0, [sp, #260]	; 0x104
   18744:	eor	r1, r8, r0
   18748:	ldr	r0, [sp, #264]	; 0x108
   1874c:	eor	r0, sl, r0
   18750:	mov	r2, #32
   18754:	bl	18da8 <__assert_fail@plt+0x7a30>
   18758:	mov	r4, r0
   1875c:	mov	r5, r1
   18760:	ldr	r0, [sp, #212]	; 0xd4
   18764:	adds	r9, r4, r0
   18768:	ldr	r0, [sp, #216]	; 0xd8
   1876c:	adc	r0, r1, r0
   18770:	str	r0, [sp, #272]	; 0x110
   18774:	eor	r1, r0, r7
   18778:	eor	r0, r9, r6
   1877c:	mov	r2, #24
   18780:	bl	18da8 <__assert_fail@plt+0x7a30>
   18784:	mov	r6, r0
   18788:	mov	r7, r1
   1878c:	ldr	r0, [sp, #304]	; 0x130
   18790:	adds	r0, sl, r0
   18794:	ldr	r1, [sp, #308]	; 0x134
   18798:	adc	r1, r8, r1
   1879c:	adds	r2, r0, r6
   187a0:	str	r2, [sp, #304]	; 0x130
   187a4:	adc	r0, r1, r7
   187a8:	str	r0, [sp, #308]	; 0x134
   187ac:	eor	r1, r0, r5
   187b0:	eor	r0, r2, r4
   187b4:	mov	r2, #16
   187b8:	bl	18da8 <__assert_fail@plt+0x7a30>
   187bc:	mov	r5, r0
   187c0:	mov	r4, r1
   187c4:	adds	r2, r0, r9
   187c8:	str	r2, [sp, #256]	; 0x100
   187cc:	ldr	r0, [sp, #272]	; 0x110
   187d0:	adc	r0, r1, r0
   187d4:	str	r0, [sp, #260]	; 0x104
   187d8:	eor	r1, r0, r7
   187dc:	eor	r0, r2, r6
   187e0:	mov	r2, #63	; 0x3f
   187e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   187e8:	str	r0, [sp, #272]	; 0x110
   187ec:	str	r1, [sp, #264]	; 0x108
   187f0:	ldr	r8, [sp, #84]	; 0x54
   187f4:	eor	r1, r4, r8
   187f8:	ldr	r6, [sp, #92]	; 0x5c
   187fc:	eor	r0, r5, r6
   18800:	mov	r2, #32
   18804:	bl	18da8 <__assert_fail@plt+0x7a30>
   18808:	mov	r4, r0
   1880c:	mov	r5, r1
   18810:	ldr	r0, [sp, #136]	; 0x88
   18814:	adds	r2, r4, r0
   18818:	str	r2, [sp, #216]	; 0xd8
   1881c:	ldr	r0, [sp, #140]	; 0x8c
   18820:	adc	r9, r1, r0
   18824:	ldr	r0, [sp, #96]	; 0x60
   18828:	eor	r1, r9, r0
   1882c:	ldr	r0, [sp, #108]	; 0x6c
   18830:	eor	r0, r2, r0
   18834:	mov	r2, #24
   18838:	bl	18da8 <__assert_fail@plt+0x7a30>
   1883c:	mov	sl, r0
   18840:	mov	r7, r1
   18844:	ldr	r0, [sp, #296]	; 0x128
   18848:	adds	r0, r6, r0
   1884c:	ldr	r1, [sp, #300]	; 0x12c
   18850:	adc	r1, r8, r1
   18854:	adds	r0, r0, sl
   18858:	adc	r1, r1, r7
   1885c:	str	r1, [fp, #-284]	; 0xfffffee4
   18860:	eor	r1, r1, r5
   18864:	str	r0, [fp, #-288]	; 0xfffffee0
   18868:	eor	r0, r0, r4
   1886c:	mov	r2, #16
   18870:	bl	18da8 <__assert_fail@plt+0x7a30>
   18874:	ldr	r2, [fp, #-296]	; 0xfffffed8
   18878:	strd	r0, [r2]
   1887c:	ldr	r2, [sp, #216]	; 0xd8
   18880:	adds	r0, r0, r2
   18884:	adc	r1, r1, r9
   18888:	ldr	r2, [sp, #168]	; 0xa8
   1888c:	strd	r0, [r2]
   18890:	eor	r1, r1, r7
   18894:	eor	r0, r0, sl
   18898:	mov	r2, #63	; 0x3f
   1889c:	bl	18da8 <__assert_fail@plt+0x7a30>
   188a0:	ldr	r2, [sp, #172]	; 0xac
   188a4:	strd	r0, [r2]
   188a8:	ldr	r0, [sp, #112]	; 0x70
   188ac:	ldr	r6, [sp, #232]	; 0xe8
   188b0:	adds	r0, r6, r0
   188b4:	ldr	r1, [sp, #116]	; 0x74
   188b8:	ldr	r7, [sp, #228]	; 0xe4
   188bc:	adc	r1, r7, r1
   188c0:	ldr	r2, [fp, #-160]	; 0xffffff60
   188c4:	ldr	r3, [fp, #-156]	; 0xffffff64
   188c8:	adds	r8, r0, r2
   188cc:	adc	r9, r1, r3
   188d0:	ldr	r0, [sp, #156]	; 0x9c
   188d4:	eor	r1, r9, r0
   188d8:	ldr	r0, [sp, #160]	; 0xa0
   188dc:	eor	r0, r8, r0
   188e0:	mov	r2, #32
   188e4:	bl	18da8 <__assert_fail@plt+0x7a30>
   188e8:	mov	r4, r0
   188ec:	mov	r5, r1
   188f0:	ldr	r0, [sp, #256]	; 0x100
   188f4:	adds	sl, r4, r0
   188f8:	ldr	r0, [sp, #260]	; 0x104
   188fc:	adc	r0, r1, r0
   18900:	str	r0, [fp, #-296]	; 0xfffffed8
   18904:	eor	r1, r0, r7
   18908:	eor	r0, sl, r6
   1890c:	mov	r2, #24
   18910:	bl	18da8 <__assert_fail@plt+0x7a30>
   18914:	mov	r6, r0
   18918:	mov	r7, r1
   1891c:	adds	r0, r0, r8
   18920:	adc	r1, r1, r9
   18924:	ldr	r2, [sp, #244]	; 0xf4
   18928:	ldrd	r2, [r2]
   1892c:	adds	r0, r0, r2
   18930:	adc	r1, r1, r3
   18934:	ldr	r2, [sp, #176]	; 0xb0
   18938:	strd	r0, [r2]
   1893c:	eor	r1, r1, r5
   18940:	eor	r0, r0, r4
   18944:	mov	r2, #16
   18948:	bl	18da8 <__assert_fail@plt+0x7a30>
   1894c:	ldr	r2, [sp, #180]	; 0xb4
   18950:	strd	r0, [r2]
   18954:	adds	r0, r0, sl
   18958:	ldr	r2, [fp, #-296]	; 0xfffffed8
   1895c:	adc	r1, r1, r2
   18960:	ldr	r2, [sp, #184]	; 0xb8
   18964:	strd	r0, [r2]
   18968:	eor	r1, r1, r7
   1896c:	eor	r0, r0, r6
   18970:	mov	r2, #63	; 0x3f
   18974:	bl	18da8 <__assert_fail@plt+0x7a30>
   18978:	ldr	r2, [sp, #188]	; 0xbc
   1897c:	strd	r0, [r2]
   18980:	ldr	r0, [sp, #288]	; 0x120
   18984:	ldr	r6, [sp, #272]	; 0x110
   18988:	adds	r0, r6, r0
   1898c:	ldr	r1, [sp, #292]	; 0x124
   18990:	ldr	r7, [sp, #264]	; 0x108
   18994:	adc	r1, r7, r1
   18998:	ldr	r2, [sp, #248]	; 0xf8
   1899c:	ldrd	r2, [r2]
   189a0:	adds	r8, r0, r2
   189a4:	adc	r9, r1, r3
   189a8:	ldr	r0, [sp, #164]	; 0xa4
   189ac:	eor	r1, r9, r0
   189b0:	ldr	r0, [sp, #220]	; 0xdc
   189b4:	eor	r0, r8, r0
   189b8:	mov	r2, #32
   189bc:	bl	18da8 <__assert_fail@plt+0x7a30>
   189c0:	mov	r4, r0
   189c4:	mov	r5, r1
   189c8:	ldr	r0, [sp, #236]	; 0xec
   189cc:	adds	sl, r4, r0
   189d0:	ldr	r0, [sp, #240]	; 0xf0
   189d4:	adc	r0, r1, r0
   189d8:	str	r0, [fp, #-296]	; 0xfffffed8
   189dc:	eor	r1, r0, r7
   189e0:	eor	r0, sl, r6
   189e4:	mov	r2, #24
   189e8:	bl	18da8 <__assert_fail@plt+0x7a30>
   189ec:	mov	r6, r0
   189f0:	mov	r7, r1
   189f4:	ldr	r0, [fp, #-312]	; 0xfffffec8
   189f8:	adds	r0, r8, r0
   189fc:	ldr	r1, [fp, #-308]	; 0xfffffecc
   18a00:	adc	r1, r9, r1
   18a04:	adds	r0, r0, r6
   18a08:	adc	r1, r1, r7
   18a0c:	ldr	r2, [sp, #224]	; 0xe0
   18a10:	strd	r0, [r2]
   18a14:	eor	r1, r1, r5
   18a18:	eor	r0, r0, r4
   18a1c:	mov	r2, #16
   18a20:	bl	18da8 <__assert_fail@plt+0x7a30>
   18a24:	ldr	r2, [sp, #192]	; 0xc0
   18a28:	strd	r0, [r2]
   18a2c:	adds	r0, r0, sl
   18a30:	ldr	r2, [fp, #-296]	; 0xfffffed8
   18a34:	adc	r1, r1, r2
   18a38:	ldr	r2, [sp, #196]	; 0xc4
   18a3c:	strd	r0, [r2]
   18a40:	eor	r1, r1, r7
   18a44:	eor	r0, r0, r6
   18a48:	mov	r2, #63	; 0x3f
   18a4c:	bl	18da8 <__assert_fail@plt+0x7a30>
   18a50:	ldr	r2, [sp, #200]	; 0xc8
   18a54:	strd	r0, [r2]
   18a58:	ldr	r0, [fp, #-304]	; 0xfffffed0
   18a5c:	ldr	r6, [sp, #280]	; 0x118
   18a60:	adds	r0, r6, r0
   18a64:	ldr	r1, [fp, #-300]	; 0xfffffed4
   18a68:	ldr	r7, [sp, #284]	; 0x11c
   18a6c:	adc	r1, r7, r1
   18a70:	ldr	r2, [sp, #304]	; 0x130
   18a74:	adds	r8, r0, r2
   18a78:	ldr	r0, [sp, #308]	; 0x134
   18a7c:	adc	r9, r1, r0
   18a80:	ldr	r0, [sp, #312]	; 0x138
   18a84:	eor	r1, r9, r0
   18a88:	ldr	r0, [sp, #316]	; 0x13c
   18a8c:	eor	r0, r8, r0
   18a90:	mov	r2, #32
   18a94:	bl	18da8 <__assert_fail@plt+0x7a30>
   18a98:	mov	r4, r0
   18a9c:	mov	r5, r1
   18aa0:	ldr	r0, [sp, #252]	; 0xfc
   18aa4:	adds	r2, r4, r0
   18aa8:	str	r2, [fp, #-300]	; 0xfffffed4
   18aac:	ldr	r0, [sp, #268]	; 0x10c
   18ab0:	adc	r0, r1, r0
   18ab4:	str	r0, [fp, #-296]	; 0xfffffed8
   18ab8:	eor	r1, r0, r7
   18abc:	eor	r0, r2, r6
   18ac0:	mov	r2, #24
   18ac4:	bl	18da8 <__assert_fail@plt+0x7a30>
   18ac8:	mov	sl, r0
   18acc:	mov	r7, r1
   18ad0:	adds	r0, r0, r8
   18ad4:	ldr	r6, [sp, #132]	; 0x84
   18ad8:	adc	r1, r1, r9
   18adc:	sub	r8, fp, #288	; 0x120
   18ae0:	ldr	r2, [sp, #276]	; 0x114
   18ae4:	ldrd	r2, [r2]
   18ae8:	adds	r0, r0, r2
   18aec:	adc	r1, r1, r3
   18af0:	ldr	r2, [sp, #204]	; 0xcc
   18af4:	strd	r0, [r2]
   18af8:	eor	r1, r1, r5
   18afc:	eor	r0, r0, r4
   18b00:	mov	r2, #16
   18b04:	bl	18da8 <__assert_fail@plt+0x7a30>
   18b08:	ldr	r2, [sp, #128]	; 0x80
   18b0c:	strd	r0, [r2]
   18b10:	ldr	r2, [fp, #-300]	; 0xfffffed4
   18b14:	adds	r0, r0, r2
   18b18:	ldr	r2, [fp, #-296]	; 0xfffffed8
   18b1c:	adc	r1, r1, r2
   18b20:	ldr	r2, [sp, #208]	; 0xd0
   18b24:	strd	r0, [r2]
   18b28:	eor	r1, r1, r7
   18b2c:	eor	r0, r0, sl
   18b30:	mov	r2, #63	; 0x3f
   18b34:	bl	18da8 <__assert_fail@plt+0x7a30>
   18b38:	ldr	r2, [fp, #-292]	; 0xfffffedc
   18b3c:	strd	r0, [r2]
   18b40:	mov	r0, #0
   18b44:	mov	r1, r6
   18b48:	ldr	r2, [r1, r0]!
   18b4c:	ldr	r3, [r8, r0]
   18b50:	eor	r2, r3, r2
   18b54:	add	r3, r8, r0
   18b58:	ldr	r7, [r3, #4]
   18b5c:	ldrd	r4, [r3, #64]	; 0x40
   18b60:	eor	r2, r2, r4
   18b64:	str	r2, [r1]
   18b68:	ldr	r2, [r1, #4]
   18b6c:	eor	r2, r7, r2
   18b70:	eor	r2, r2, r5
   18b74:	str	r2, [r1, #4]
   18b78:	add	r0, r0, #8
   18b7c:	cmp	r0, #64	; 0x40
   18b80:	bne	18b44 <__assert_fail@plt+0x77cc>
   18b84:	sub	sp, fp, #28
   18b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b90:	add	fp, sp, #24
   18b94:	sub	sp, sp, #64	; 0x40
   18b98:	mov	r4, r1
   18b9c:	mov	r5, r0
   18ba0:	vmov.i32	q8, #0	; 0x00000000
   18ba4:	mov	r0, #48	; 0x30
   18ba8:	mov	r7, sp
   18bac:	mov	r1, r7
   18bb0:	vst1.64	{d16-d17}, [r1], r0
   18bb4:	vst1.64	{d16-d17}, [r1]
   18bb8:	add	r0, r7, #32
   18bbc:	vst1.64	{d16-d17}, [r0]
   18bc0:	add	r0, r7, #16
   18bc4:	vst1.64	{d16-d17}, [r0]
   18bc8:	mvn	r6, #0
   18bcc:	cmp	r4, #0
   18bd0:	beq	18c74 <__assert_fail@plt+0x78fc>
   18bd4:	ldr	r0, [r5, #228]	; 0xe4
   18bd8:	cmp	r0, r2
   18bdc:	bhi	18c74 <__assert_fail@plt+0x78fc>
   18be0:	mov	r0, r5
   18be4:	bl	18c80 <__assert_fail@plt+0x7908>
   18be8:	cmp	r0, #0
   18bec:	bne	18c74 <__assert_fail@plt+0x78fc>
   18bf0:	ldr	r2, [r5, #224]	; 0xe0
   18bf4:	mov	r6, #0
   18bf8:	mov	r0, r5
   18bfc:	mov	r3, #0
   18c00:	bl	13460 <__assert_fail@plt+0x20e8>
   18c04:	mov	r0, r5
   18c08:	bl	18c90 <__assert_fail@plt+0x7918>
   18c0c:	ldr	r1, [r5, #224]	; 0xe0
   18c10:	add	r8, r5, #96	; 0x60
   18c14:	add	r0, r8, r1
   18c18:	rsb	r2, r1, #128	; 0x80
   18c1c:	mov	r1, #0
   18c20:	bl	1127c <memset@plt>
   18c24:	mov	r0, r5
   18c28:	mov	r1, r8
   18c2c:	bl	13490 <__assert_fail@plt+0x2118>
   18c30:	add	r0, r7, r6
   18c34:	mov	r1, r5
   18c38:	ldr	r2, [r1, r6]!
   18c3c:	ldr	r3, [r1, #4]
   18c40:	bl	18cbc <__assert_fail@plt+0x7944>
   18c44:	add	r6, r6, #8
   18c48:	cmp	r6, #64	; 0x40
   18c4c:	bne	18c30 <__assert_fail@plt+0x78b8>
   18c50:	ldr	r2, [r5, #228]	; 0xe4
   18c54:	mov	r5, sp
   18c58:	mov	r0, r4
   18c5c:	mov	r1, r5
   18c60:	bl	11120 <memcpy@plt>
   18c64:	mov	r0, r5
   18c68:	mov	r1, #64	; 0x40
   18c6c:	bl	13448 <__assert_fail@plt+0x20d0>
   18c70:	mov	r6, #0
   18c74:	mov	r0, r6
   18c78:	sub	sp, fp, #24
   18c7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c80:	ldrd	r0, [r0, #80]	; 0x50
   18c84:	orrs	r0, r0, r1
   18c88:	movwne	r0, #1
   18c8c:	bx	lr
   18c90:	push	{r4, sl, fp, lr}
   18c94:	add	fp, sp, #8
   18c98:	mov	r4, r0
   18c9c:	ldrb	r0, [r0, #232]	; 0xe8
   18ca0:	cmp	r0, #0
   18ca4:	movne	r0, r4
   18ca8:	blne	18e04 <__assert_fail@plt+0x7a8c>
   18cac:	mvn	r0, #0
   18cb0:	str	r0, [r4, #80]	; 0x50
   18cb4:	str	r0, [r4, #84]	; 0x54
   18cb8:	pop	{r4, sl, fp, pc}
   18cbc:	str	r3, [r0, #4]
   18cc0:	str	r2, [r0]
   18cc4:	bx	lr
   18cc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18ccc:	add	fp, sp, #24
   18cd0:	sub	sp, sp, #240	; 0xf0
   18cd4:	mov	r6, r0
   18cd8:	cmp	r3, #0
   18cdc:	mov	r0, r3
   18ce0:	movwne	r0, #1
   18ce4:	mvn	r4, #0
   18ce8:	cmp	r6, #0
   18cec:	beq	18d2c <__assert_fail@plt+0x79b4>
   18cf0:	mov	r5, r2
   18cf4:	mov	r8, r1
   18cf8:	clz	r1, r2
   18cfc:	lsr	r1, r1, #5
   18d00:	ands	r0, r1, r0
   18d04:	bne	18d2c <__assert_fail@plt+0x79b4>
   18d08:	mov	r7, r3
   18d0c:	ldr	r3, [fp, #12]
   18d10:	cmp	r3, #0
   18d14:	mov	r0, r3
   18d18:	movwne	r0, #1
   18d1c:	cmp	r3, #64	; 0x40
   18d20:	subls	r1, r8, #1
   18d24:	cmpls	r1, #63	; 0x3f
   18d28:	bls	18d38 <__assert_fail@plt+0x79c0>
   18d2c:	mov	r0, r4
   18d30:	sub	sp, fp, #24
   18d34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18d38:	ldr	r2, [fp, #8]
   18d3c:	clz	r1, r2
   18d40:	lsr	r1, r1, #5
   18d44:	ands	r0, r1, r0
   18d48:	bne	18d2c <__assert_fail@plt+0x79b4>
   18d4c:	mov	r0, sp
   18d50:	mov	r1, r8
   18d54:	cmp	r3, #0
   18d58:	beq	18d6c <__assert_fail@plt+0x79f4>
   18d5c:	bl	13270 <__assert_fail@plt+0x1ef8>
   18d60:	cmp	r0, #0
   18d64:	bpl	18d78 <__assert_fail@plt+0x7a00>
   18d68:	b	18d2c <__assert_fail@plt+0x79b4>
   18d6c:	bl	131e0 <__assert_fail@plt+0x1e68>
   18d70:	cmp	r0, #0
   18d74:	bmi	18d2c <__assert_fail@plt+0x79b4>
   18d78:	mov	r4, sp
   18d7c:	mov	r0, r4
   18d80:	mov	r1, r5
   18d84:	mov	r2, r7
   18d88:	bl	13350 <__assert_fail@plt+0x1fd8>
   18d8c:	mov	r0, r4
   18d90:	mov	r1, r6
   18d94:	mov	r2, r8
   18d98:	bl	18b8c <__assert_fail@plt+0x7814>
   18d9c:	mov	r4, #0
   18da0:	b	18d2c <__assert_fail@plt+0x79b4>
   18da4:	b	18cc8 <__assert_fail@plt+0x7950>
   18da8:	push	{r4, r5, fp, lr}
   18dac:	add	fp, sp, #8
   18db0:	lsr	ip, r0, r2
   18db4:	rsb	r3, r2, #32
   18db8:	orr	ip, ip, r1, lsl r3
   18dbc:	subs	lr, r2, #32
   18dc0:	lsrpl	ip, r1, lr
   18dc4:	rsb	r4, r2, #64	; 0x40
   18dc8:	lsl	r5, r0, r4
   18dcc:	cmp	r3, #0
   18dd0:	movwpl	r5, #0
   18dd4:	orr	ip, r5, ip
   18dd8:	rsb	r5, r4, #32
   18ddc:	lsr	r5, r0, r5
   18de0:	orr	r4, r5, r1, lsl r4
   18de4:	cmp	r3, #0
   18de8:	lslpl	r4, r0, r3
   18dec:	lsr	r0, r1, r2
   18df0:	cmp	lr, #0
   18df4:	movwpl	r0, #0
   18df8:	orr	r1, r4, r0
   18dfc:	mov	r0, ip
   18e00:	pop	{r4, r5, fp, pc}
   18e04:	mvn	r1, #0
   18e08:	str	r1, [r0, #88]	; 0x58
   18e0c:	str	r1, [r0, #92]	; 0x5c
   18e10:	bx	lr
   18e14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18e18:	add	fp, sp, #24
   18e1c:	sub	sp, sp, #248	; 0xf8
   18e20:	mov	r9, r2
   18e24:	mov	r8, r1
   18e28:	mov	r7, r0
   18e2c:	mov	r0, #32768	; 0x8000
   18e30:	bl	1be04 <__assert_fail@plt+0xaa8c>
   18e34:	cmp	r0, #0
   18e38:	beq	18ea4 <__assert_fail@plt+0x7b2c>
   18e3c:	mov	r5, r0
   18e40:	mov	r4, sp
   18e44:	mov	r0, r4
   18e48:	mov	r1, r9
   18e4c:	bl	131e0 <__assert_fail@plt+0x1e68>
   18e50:	b	18e64 <__assert_fail@plt+0x7aec>
   18e54:	mov	r0, r4
   18e58:	mov	r1, r5
   18e5c:	mov	r2, #32768	; 0x8000
   18e60:	bl	13350 <__assert_fail@plt+0x1fd8>
   18e64:	mov	r6, #0
   18e68:	add	r0, r5, r6
   18e6c:	rsb	r2, r6, #32768	; 0x8000
   18e70:	mov	r1, #1
   18e74:	mov	r3, r7
   18e78:	bl	1118c <fread@plt>
   18e7c:	add	r6, r0, r6
   18e80:	cmp	r6, #32768	; 0x8000
   18e84:	beq	18e54 <__assert_fail@plt+0x7adc>
   18e88:	cmp	r0, #0
   18e8c:	beq	18eac <__assert_fail@plt+0x7b34>
   18e90:	mov	r0, r7
   18e94:	bl	11228 <feof@plt>
   18e98:	cmp	r0, #0
   18e9c:	beq	18e68 <__assert_fail@plt+0x7af0>
   18ea0:	b	18ec0 <__assert_fail@plt+0x7b48>
   18ea4:	mvn	r4, #0
   18ea8:	b	18ef4 <__assert_fail@plt+0x7b7c>
   18eac:	mov	r0, r7
   18eb0:	bl	11108 <ferror@plt>
   18eb4:	mvn	r4, #0
   18eb8:	cmp	r0, #0
   18ebc:	bne	18eec <__assert_fail@plt+0x7b74>
   18ec0:	cmp	r6, #0
   18ec4:	beq	18ed8 <__assert_fail@plt+0x7b60>
   18ec8:	mov	r0, sp
   18ecc:	mov	r1, r5
   18ed0:	mov	r2, r6
   18ed4:	bl	13350 <__assert_fail@plt+0x1fd8>
   18ed8:	mov	r0, sp
   18edc:	mov	r1, r8
   18ee0:	mov	r2, r9
   18ee4:	bl	18b8c <__assert_fail@plt+0x7814>
   18ee8:	mov	r4, #0
   18eec:	mov	r0, r5
   18ef0:	bl	19200 <__assert_fail@plt+0x7e88>
   18ef4:	mov	r0, r4
   18ef8:	sub	sp, fp, #24
   18efc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18f00:	movw	r1, #57764	; 0xe1a4
   18f04:	movt	r1, #2
   18f08:	str	r0, [r1]
   18f0c:	bx	lr
   18f10:	movw	r1, #57768	; 0xe1a8
   18f14:	movt	r1, #2
   18f18:	strb	r0, [r1]
   18f1c:	bx	lr
   18f20:	push	{r4, r5, r6, sl, fp, lr}
   18f24:	add	fp, sp, #16
   18f28:	sub	sp, sp, #8
   18f2c:	movw	r0, #57724	; 0xe17c
   18f30:	movt	r0, #2
   18f34:	ldr	r0, [r0]
   18f38:	bl	1c1ac <__assert_fail@plt+0xae34>
   18f3c:	cmp	r0, #0
   18f40:	beq	18f68 <__assert_fail@plt+0x7bf0>
   18f44:	movw	r0, #57768	; 0xe1a8
   18f48:	movt	r0, #2
   18f4c:	ldrb	r0, [r0]
   18f50:	cmp	r0, #0
   18f54:	beq	18f88 <__assert_fail@plt+0x7c10>
   18f58:	bl	11258 <__errno_location@plt>
   18f5c:	ldr	r0, [r0]
   18f60:	cmp	r0, #32
   18f64:	bne	18f88 <__assert_fail@plt+0x7c10>
   18f68:	movw	r0, #57712	; 0xe170
   18f6c:	movt	r0, #2
   18f70:	ldr	r0, [r0]
   18f74:	bl	1c1ac <__assert_fail@plt+0xae34>
   18f78:	cmp	r0, #0
   18f7c:	subeq	sp, fp, #16
   18f80:	popeq	{r4, r5, r6, sl, fp, pc}
   18f84:	b	18ff8 <__assert_fail@plt+0x7c80>
   18f88:	movw	r1, #54963	; 0xd6b3
   18f8c:	movt	r1, #1
   18f90:	mov	r0, #0
   18f94:	mov	r2, #5
   18f98:	bl	11138 <dcgettext@plt>
   18f9c:	mov	r4, r0
   18fa0:	movw	r0, #57764	; 0xe1a4
   18fa4:	movt	r0, #2
   18fa8:	ldr	r6, [r0]
   18fac:	bl	11258 <__errno_location@plt>
   18fb0:	ldr	r5, [r0]
   18fb4:	cmp	r6, #0
   18fb8:	bne	18fd4 <__assert_fail@plt+0x7c5c>
   18fbc:	movw	r2, #52886	; 0xce96
   18fc0:	movt	r2, #1
   18fc4:	mov	r0, #0
   18fc8:	mov	r1, r5
   18fcc:	mov	r3, r4
   18fd0:	b	18ff4 <__assert_fail@plt+0x7c7c>
   18fd4:	mov	r0, r6
   18fd8:	bl	1a974 <__assert_fail@plt+0x95fc>
   18fdc:	mov	r3, r0
   18fe0:	str	r4, [sp]
   18fe4:	movw	r2, #54975	; 0xd6bf
   18fe8:	movt	r2, #1
   18fec:	mov	r0, #0
   18ff0:	mov	r1, r5
   18ff4:	bl	111bc <error@plt>
   18ff8:	movw	r0, #57624	; 0xe118
   18ffc:	movt	r0, #2
   19000:	ldr	r0, [r0]
   19004:	bl	11114 <_exit@plt>
   19008:	b	110e4 <posix_fadvise64@plt>
   1900c:	cmp	r0, #0
   19010:	bxeq	lr
   19014:	push	{r4, sl, fp, lr}
   19018:	add	fp, sp, #8
   1901c:	sub	sp, sp, #16
   19020:	mov	r4, r1
   19024:	bl	11294 <fileno@plt>
   19028:	mov	r1, #0
   1902c:	str	r1, [sp]
   19030:	stmib	sp, {r1, r4}
   19034:	mov	r2, #0
   19038:	mov	r3, #0
   1903c:	bl	19008 <__assert_fail@plt+0x7c90>
   19040:	sub	sp, fp, #8
   19044:	pop	{r4, sl, fp, pc}
   19048:	push	{r4, r5, fp, lr}
   1904c:	add	fp, sp, #8
   19050:	sub	sp, sp, #8
   19054:	mov	r4, r0
   19058:	bl	11294 <fileno@plt>
   1905c:	cmn	r0, #1
   19060:	ble	190d8 <__assert_fail@plt+0x7d60>
   19064:	mov	r0, r4
   19068:	bl	111e0 <__freading@plt>
   1906c:	cmp	r0, #0
   19070:	beq	1909c <__assert_fail@plt+0x7d24>
   19074:	mov	r0, r4
   19078:	bl	11294 <fileno@plt>
   1907c:	mov	r1, #1
   19080:	str	r1, [sp]
   19084:	mov	r2, #0
   19088:	mov	r3, #0
   1908c:	bl	11174 <lseek64@plt>
   19090:	and	r0, r0, r1
   19094:	cmn	r0, #1
   19098:	beq	190d8 <__assert_fail@plt+0x7d60>
   1909c:	mov	r0, r4
   190a0:	bl	190e8 <__assert_fail@plt+0x7d70>
   190a4:	cmp	r0, #0
   190a8:	beq	190d8 <__assert_fail@plt+0x7d60>
   190ac:	bl	11258 <__errno_location@plt>
   190b0:	ldr	r5, [r0]
   190b4:	mov	r0, r4
   190b8:	bl	112b8 <fclose@plt>
   190bc:	cmp	r5, #0
   190c0:	beq	190d0 <__assert_fail@plt+0x7d58>
   190c4:	bl	11258 <__errno_location@plt>
   190c8:	str	r5, [r0]
   190cc:	mvn	r0, #0
   190d0:	sub	sp, fp, #8
   190d4:	pop	{r4, r5, fp, pc}
   190d8:	mov	r0, r4
   190dc:	sub	sp, fp, #8
   190e0:	pop	{r4, r5, fp, lr}
   190e4:	b	112b8 <fclose@plt>
   190e8:	push	{r4, sl, fp, lr}
   190ec:	add	fp, sp, #8
   190f0:	mov	r4, r0
   190f4:	cmp	r0, #0
   190f8:	beq	19110 <__assert_fail@plt+0x7d98>
   190fc:	mov	r0, r4
   19100:	bl	111e0 <__freading@plt>
   19104:	cmp	r0, #0
   19108:	movne	r0, r4
   1910c:	blne	1911c <__assert_fail@plt+0x7da4>
   19110:	mov	r0, r4
   19114:	pop	{r4, sl, fp, lr}
   19118:	b	110f0 <fflush@plt>
   1911c:	push	{fp, lr}
   19120:	mov	fp, sp
   19124:	sub	sp, sp, #8
   19128:	ldrb	r1, [r0, #1]
   1912c:	tst	r1, #1
   19130:	beq	19148 <__assert_fail@plt+0x7dd0>
   19134:	mov	r1, #1
   19138:	str	r1, [sp]
   1913c:	mov	r2, #0
   19140:	mov	r3, #0
   19144:	bl	19228 <__assert_fail@plt+0x7eb0>
   19148:	mov	sp, fp
   1914c:	pop	{fp, pc}
   19150:	push	{r4, r5, r6, r7, fp, lr}
   19154:	add	fp, sp, #16
   19158:	mov	r5, r1
   1915c:	bl	1130c <fopen64@plt>
   19160:	mov	r4, #0
   19164:	cmp	r0, #0
   19168:	beq	191d0 <__assert_fail@plt+0x7e58>
   1916c:	mov	r6, r0
   19170:	bl	11294 <fileno@plt>
   19174:	cmp	r0, #2
   19178:	bhi	191d8 <__assert_fail@plt+0x7e60>
   1917c:	bl	1aedc <__assert_fail@plt+0x9b64>
   19180:	cmn	r0, #1
   19184:	ble	191e0 <__assert_fail@plt+0x7e68>
   19188:	mov	r7, r0
   1918c:	mov	r0, r6
   19190:	bl	19048 <__assert_fail@plt+0x7cd0>
   19194:	cmp	r0, #0
   19198:	bne	191b4 <__assert_fail@plt+0x7e3c>
   1919c:	mov	r0, r7
   191a0:	mov	r1, r5
   191a4:	bl	110a8 <fdopen@plt>
   191a8:	mov	r4, r0
   191ac:	cmp	r0, #0
   191b0:	bne	191d0 <__assert_fail@plt+0x7e58>
   191b4:	bl	11258 <__errno_location@plt>
   191b8:	mov	r4, r0
   191bc:	ldr	r5, [r0]
   191c0:	mov	r0, r7
   191c4:	bl	11354 <close@plt>
   191c8:	str	r5, [r4]
   191cc:	mov	r4, #0
   191d0:	mov	r0, r4
   191d4:	pop	{r4, r5, r6, r7, fp, pc}
   191d8:	mov	r0, r6
   191dc:	pop	{r4, r5, r6, r7, fp, pc}
   191e0:	bl	11258 <__errno_location@plt>
   191e4:	mov	r5, r0
   191e8:	ldr	r7, [r0]
   191ec:	mov	r0, r6
   191f0:	bl	19048 <__assert_fail@plt+0x7cd0>
   191f4:	str	r7, [r5]
   191f8:	mov	r0, r4
   191fc:	pop	{r4, r5, r6, r7, fp, pc}
   19200:	push	{r4, r5, r6, sl, fp, lr}
   19204:	add	fp, sp, #16
   19208:	mov	r4, r0
   1920c:	bl	11258 <__errno_location@plt>
   19210:	mov	r5, r0
   19214:	ldr	r6, [r0]
   19218:	mov	r0, r4
   1921c:	bl	110fc <free@plt>
   19220:	str	r6, [r5]
   19224:	pop	{r4, r5, r6, sl, fp, pc}
   19228:	push	{r4, r5, r6, r7, fp, lr}
   1922c:	add	fp, sp, #16
   19230:	sub	sp, sp, #8
   19234:	mov	r5, r3
   19238:	mov	r6, r2
   1923c:	mov	r4, r0
   19240:	ldr	r0, [r0, #4]
   19244:	ldr	r1, [r4, #8]
   19248:	cmp	r1, r0
   1924c:	bne	19268 <__assert_fail@plt+0x7ef0>
   19250:	ldrd	r0, [r4, #16]
   19254:	cmp	r1, r0
   19258:	bne	19268 <__assert_fail@plt+0x7ef0>
   1925c:	ldr	r0, [r4, #36]	; 0x24
   19260:	cmp	r0, #0
   19264:	beq	19280 <__assert_fail@plt+0x7f08>
   19268:	mov	r0, r4
   1926c:	mov	r2, r6
   19270:	mov	r3, r5
   19274:	sub	sp, fp, #16
   19278:	pop	{r4, r5, r6, r7, fp, lr}
   1927c:	b	112c4 <fseeko64@plt>
   19280:	ldr	r7, [fp, #8]
   19284:	mov	r0, r4
   19288:	bl	11294 <fileno@plt>
   1928c:	str	r7, [sp]
   19290:	mov	r2, r6
   19294:	mov	r3, r5
   19298:	bl	11174 <lseek64@plt>
   1929c:	and	r2, r0, r1
   192a0:	cmn	r2, #1
   192a4:	beq	192c4 <__assert_fail@plt+0x7f4c>
   192a8:	strd	r0, [r4, #80]	; 0x50
   192ac:	ldr	r0, [r4]
   192b0:	bic	r0, r0, #16
   192b4:	str	r0, [r4]
   192b8:	mov	r0, #0
   192bc:	sub	sp, fp, #16
   192c0:	pop	{r4, r5, r6, r7, fp, pc}
   192c4:	mvn	r0, #0
   192c8:	sub	sp, fp, #16
   192cc:	pop	{r4, r5, r6, r7, fp, pc}
   192d0:	push	{r4, r5, fp, lr}
   192d4:	add	fp, sp, #8
   192d8:	cmp	r0, #0
   192dc:	beq	19370 <__assert_fail@plt+0x7ff8>
   192e0:	mov	r4, r0
   192e4:	mov	r1, #47	; 0x2f
   192e8:	bl	112e8 <strrchr@plt>
   192ec:	cmp	r0, #0
   192f0:	mov	r5, r4
   192f4:	addne	r5, r0, #1
   192f8:	sub	r0, r5, r4
   192fc:	cmp	r0, #7
   19300:	blt	19354 <__assert_fail@plt+0x7fdc>
   19304:	sub	r0, r5, #7
   19308:	movw	r1, #55038	; 0xd6fe
   1930c:	movt	r1, #1
   19310:	mov	r2, #7
   19314:	bl	11330 <strncmp@plt>
   19318:	cmp	r0, #0
   1931c:	bne	19354 <__assert_fail@plt+0x7fdc>
   19320:	movw	r1, #55046	; 0xd706
   19324:	movt	r1, #1
   19328:	mov	r0, r5
   1932c:	mov	r2, #3
   19330:	bl	11330 <strncmp@plt>
   19334:	cmp	r0, #0
   19338:	beq	19344 <__assert_fail@plt+0x7fcc>
   1933c:	mov	r4, r5
   19340:	b	19354 <__assert_fail@plt+0x7fdc>
   19344:	add	r4, r5, #3
   19348:	movw	r0, #57696	; 0xe160
   1934c:	movt	r0, #2
   19350:	str	r4, [r0]
   19354:	movw	r0, #57700	; 0xe164
   19358:	movt	r0, #2
   1935c:	str	r4, [r0]
   19360:	movw	r0, #57772	; 0xe1ac
   19364:	movt	r0, #2
   19368:	str	r4, [r0]
   1936c:	pop	{r4, r5, fp, pc}
   19370:	movw	r0, #57712	; 0xe170
   19374:	movt	r0, #2
   19378:	ldr	r3, [r0]
   1937c:	movw	r0, #54982	; 0xd6c6
   19380:	movt	r0, #1
   19384:	mov	r1, #55	; 0x37
   19388:	mov	r2, #1
   1938c:	bl	11168 <fwrite@plt>
   19390:	bl	1133c <abort@plt>
   19394:	push	{r4, r5, r6, sl, fp, lr}
   19398:	add	fp, sp, #16
   1939c:	mov	r4, r0
   193a0:	movw	r0, #57776	; 0xe1b0
   193a4:	movt	r0, #2
   193a8:	cmp	r4, #0
   193ac:	moveq	r4, r0
   193b0:	bl	11258 <__errno_location@plt>
   193b4:	mov	r5, r0
   193b8:	ldr	r6, [r0]
   193bc:	mov	r0, r4
   193c0:	mov	r1, #48	; 0x30
   193c4:	bl	1b698 <__assert_fail@plt+0xa320>
   193c8:	str	r6, [r5]
   193cc:	pop	{r4, r5, r6, sl, fp, pc}
   193d0:	movw	r1, #57776	; 0xe1b0
   193d4:	movt	r1, #2
   193d8:	cmp	r0, #0
   193dc:	movne	r1, r0
   193e0:	ldr	r0, [r1]
   193e4:	bx	lr
   193e8:	movw	r2, #57776	; 0xe1b0
   193ec:	movt	r2, #2
   193f0:	cmp	r0, #0
   193f4:	movne	r2, r0
   193f8:	str	r1, [r2]
   193fc:	bx	lr
   19400:	movw	r3, #57776	; 0xe1b0
   19404:	movt	r3, #2
   19408:	cmp	r0, #0
   1940c:	movne	r3, r0
   19410:	ubfx	r0, r1, #5, #3
   19414:	add	ip, r3, r0, lsl #2
   19418:	ldr	r3, [ip, #8]
   1941c:	and	r1, r1, #31
   19420:	mov	r0, #1
   19424:	and	r0, r0, r3, lsr r1
   19428:	and	r2, r2, #1
   1942c:	eor	r2, r0, r2
   19430:	eor	r1, r3, r2, lsl r1
   19434:	str	r1, [ip, #8]
   19438:	bx	lr
   1943c:	movw	r2, #57776	; 0xe1b0
   19440:	movt	r2, #2
   19444:	cmp	r0, #0
   19448:	movne	r2, r0
   1944c:	ldr	r0, [r2, #4]
   19450:	str	r1, [r2, #4]
   19454:	bx	lr
   19458:	push	{fp, lr}
   1945c:	mov	fp, sp
   19460:	movw	r3, #57776	; 0xe1b0
   19464:	movt	r3, #2
   19468:	cmp	r0, #0
   1946c:	movne	r3, r0
   19470:	mov	r0, #10
   19474:	str	r0, [r3]
   19478:	cmp	r1, #0
   1947c:	cmpne	r2, #0
   19480:	bne	19488 <__assert_fail@plt+0x8110>
   19484:	bl	1133c <abort@plt>
   19488:	str	r1, [r3, #40]	; 0x28
   1948c:	str	r2, [r3, #44]	; 0x2c
   19490:	pop	{fp, pc}
   19494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19498:	add	fp, sp, #28
   1949c:	sub	sp, sp, #20
   194a0:	mov	r8, r3
   194a4:	mov	r9, r2
   194a8:	mov	sl, r1
   194ac:	mov	r7, r0
   194b0:	ldr	r0, [fp, #8]
   194b4:	movw	r5, #57776	; 0xe1b0
   194b8:	movt	r5, #2
   194bc:	cmp	r0, #0
   194c0:	movne	r5, r0
   194c4:	bl	11258 <__errno_location@plt>
   194c8:	mov	r4, r0
   194cc:	ldm	r5, {r0, r1}
   194d0:	ldr	r2, [r5, #40]	; 0x28
   194d4:	ldr	r3, [r5, #44]	; 0x2c
   194d8:	ldr	r6, [r4]
   194dc:	add	r5, r5, #8
   194e0:	stm	sp, {r0, r1, r5}
   194e4:	str	r2, [sp, #12]
   194e8:	str	r3, [sp, #16]
   194ec:	mov	r0, r7
   194f0:	mov	r1, sl
   194f4:	mov	r2, r9
   194f8:	mov	r3, r8
   194fc:	bl	1950c <__assert_fail@plt+0x8194>
   19500:	str	r6, [r4]
   19504:	sub	sp, fp, #28
   19508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1950c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19510:	add	fp, sp, #28
   19514:	sub	sp, sp, #156	; 0x9c
   19518:	mov	r9, r3
   1951c:	mov	r7, r1
   19520:	mov	r6, r0
   19524:	str	r2, [fp, #-80]	; 0xffffffb0
   19528:	add	r0, r2, #1
   1952c:	str	r0, [sp, #76]	; 0x4c
   19530:	ldr	r0, [fp, #12]
   19534:	and	r1, r0, #1
   19538:	str	r1, [sp, #40]	; 0x28
   1953c:	and	r1, r0, #4
   19540:	str	r1, [sp, #36]	; 0x24
   19544:	ubfx	r4, r0, #1, #1
   19548:	bl	11180 <__ctype_get_mb_cur_max@plt>
   1954c:	str	r0, [sp, #44]	; 0x2c
   19550:	ldr	r0, [fp, #24]
   19554:	str	r0, [sp, #88]	; 0x58
   19558:	ldr	r0, [fp, #20]
   1955c:	str	r0, [sp, #80]	; 0x50
   19560:	ldr	r1, [fp, #8]
   19564:	mov	r0, #0
   19568:	str	r0, [sp, #84]	; 0x54
   1956c:	mov	r0, #0
   19570:	str	r0, [fp, #-84]	; 0xffffffac
   19574:	mov	r0, #0
   19578:	str	r0, [fp, #-72]	; 0xffffffb8
   1957c:	mov	r0, #0
   19580:	mov	r2, #0
   19584:	str	r2, [fp, #-56]	; 0xffffffc8
   19588:	mov	r2, #0
   1958c:	str	r2, [sp, #64]	; 0x40
   19590:	mov	r2, #1
   19594:	str	r2, [fp, #-48]	; 0xffffffd0
   19598:	cmp	r1, #10
   1959c:	bhi	1a4c8 <__assert_fail@plt+0x9150>
   195a0:	mov	sl, r7
   195a4:	mov	r7, r1
   195a8:	add	r1, pc, #24
   195ac:	mov	r8, #0
   195b0:	mov	r2, #1
   195b4:	mov	r3, #0
   195b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   195bc:	mov	lr, r9
   195c0:	mov	r5, r6
   195c4:	ldr	pc, [r1, r7, lsl #2]
   195c8:	muleq	r1, ip, r6
   195cc:	ldrdeq	r9, [r1], -ip
   195d0:	andeq	r9, r1, ip, lsr #13
   195d4:	muleq	r1, r4, r6
   195d8:	ldrdeq	r9, [r1], -r0
   195dc:	andeq	r9, r1, r0, lsr r7
   195e0:			; <UNDEFINED> instruction: 0x000196bc
   195e4:	andeq	r9, r1, ip, lsl #15
   195e8:	strdeq	r9, [r1], -r4
   195ec:	strdeq	r9, [r1], -r4
   195f0:	andeq	r9, r1, r0, lsr #12
   195f4:	movw	r0, #55128	; 0xd758
   195f8:	movt	r0, #1
   195fc:	mov	r1, r7
   19600:	bl	1aad0 <__assert_fail@plt+0x9758>
   19604:	str	r0, [sp, #80]	; 0x50
   19608:	movw	r0, #55130	; 0xd75a
   1960c:	movt	r0, #1
   19610:	mov	r1, r7
   19614:	bl	1aad0 <__assert_fail@plt+0x9758>
   19618:	mov	r5, r6
   1961c:	str	r0, [sp, #88]	; 0x58
   19620:	mov	r8, #0
   19624:	tst	r4, #1
   19628:	str	r7, [fp, #-64]	; 0xffffffc0
   1962c:	bne	19664 <__assert_fail@plt+0x82ec>
   19630:	ldr	r0, [sp, #80]	; 0x50
   19634:	ldrb	r0, [r0]
   19638:	cmp	r0, #0
   1963c:	beq	19664 <__assert_fail@plt+0x82ec>
   19640:	ldr	r1, [sp, #80]	; 0x50
   19644:	add	r1, r1, #1
   19648:	mov	r8, #0
   1964c:	cmp	r8, sl
   19650:	strbcc	r0, [r5, r8]
   19654:	ldrb	r0, [r1, r8]
   19658:	add	r8, r8, #1
   1965c:	cmp	r0, #0
   19660:	bne	1964c <__assert_fail@plt+0x82d4>
   19664:	ldr	r7, [sp, #88]	; 0x58
   19668:	mov	r0, r7
   1966c:	bl	11240 <strlen@plt>
   19670:	mov	r5, r6
   19674:	str	r0, [fp, #-72]	; 0xffffffb8
   19678:	str	r7, [fp, #-84]	; 0xffffffac
   1967c:	mov	r2, #1
   19680:	mov	r3, r4
   19684:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19688:	mov	lr, r9
   1968c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19690:	b	1978c <__assert_fail@plt+0x8414>
   19694:	mov	r0, #1
   19698:	b	196dc <__assert_fail@plt+0x8364>
   1969c:	mov	r7, #0
   196a0:	mov	r8, #0
   196a4:	mov	r2, r0
   196a8:	b	19788 <__assert_fail@plt+0x8410>
   196ac:	tst	r4, #1
   196b0:	bne	196dc <__assert_fail@plt+0x8364>
   196b4:	mov	r2, r0
   196b8:	b	19704 <__assert_fail@plt+0x838c>
   196bc:	mov	r0, #1
   196c0:	str	r0, [fp, #-72]	; 0xffffffb8
   196c4:	mov	r8, #0
   196c8:	mov	r7, #5
   196cc:	b	19748 <__assert_fail@plt+0x83d0>
   196d0:	mov	r2, #1
   196d4:	tst	r4, #1
   196d8:	beq	19704 <__assert_fail@plt+0x838c>
   196dc:	mov	r1, #1
   196e0:	str	r1, [fp, #-72]	; 0xffffffb8
   196e4:	mov	r8, #0
   196e8:	mov	r7, #2
   196ec:	movw	r1, #55130	; 0xd75a
   196f0:	movt	r1, #1
   196f4:	str	r1, [fp, #-84]	; 0xffffffac
   196f8:	mov	r2, r0
   196fc:	mov	r3, #1
   19700:	b	1978c <__assert_fail@plt+0x8414>
   19704:	mov	r8, #1
   19708:	mov	r7, #2
   1970c:	cmp	sl, #0
   19710:	movne	r0, #39	; 0x27
   19714:	strbne	r0, [r5]
   19718:	movw	r0, #55130	; 0xd75a
   1971c:	movt	r0, #1
   19720:	str	r0, [fp, #-84]	; 0xffffffac
   19724:	mov	r0, #1
   19728:	str	r0, [fp, #-72]	; 0xffffffb8
   1972c:	b	19788 <__assert_fail@plt+0x8410>
   19730:	mov	r7, #5
   19734:	tst	r4, #1
   19738:	beq	19760 <__assert_fail@plt+0x83e8>
   1973c:	mov	r0, #1
   19740:	str	r0, [fp, #-72]	; 0xffffffb8
   19744:	mov	r8, #0
   19748:	movw	r0, #55126	; 0xd756
   1974c:	movt	r0, #1
   19750:	str	r0, [fp, #-84]	; 0xffffffac
   19754:	mov	r2, #1
   19758:	mov	r3, #1
   1975c:	b	1978c <__assert_fail@plt+0x8414>
   19760:	cmp	sl, #0
   19764:	movne	r0, #34	; 0x22
   19768:	strbne	r0, [r5]
   1976c:	mov	r8, #1
   19770:	movw	r0, #55126	; 0xd756
   19774:	movt	r0, #1
   19778:	str	r0, [fp, #-84]	; 0xffffffac
   1977c:	mov	r0, #1
   19780:	str	r0, [fp, #-72]	; 0xffffffb8
   19784:	mov	r2, #1
   19788:	mov	r3, #0
   1978c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19790:	cmp	r0, #0
   19794:	movwne	r0, #1
   19798:	and	r1, r0, r3
   1979c:	and	r1, r2, r1
   197a0:	str	r1, [sp, #56]	; 0x38
   197a4:	sub	r1, r7, #2
   197a8:	clz	r1, r1
   197ac:	lsr	r1, r1, #5
   197b0:	and	r1, r1, r3
   197b4:	str	r1, [sp, #68]	; 0x44
   197b8:	str	r7, [fp, #-64]	; 0xffffffc0
   197bc:	subs	r1, r7, #2
   197c0:	movwne	r1, #1
   197c4:	eor	r4, r3, #1
   197c8:	str	r4, [fp, #-88]	; 0xffffffa8
   197cc:	orr	r4, r1, r4
   197d0:	str	r4, [sp, #72]	; 0x48
   197d4:	and	r1, r1, r2
   197d8:	and	r0, r0, r1
   197dc:	str	r0, [fp, #-60]	; 0xffffffc4
   197e0:	str	r3, [fp, #-76]	; 0xffffffb4
   197e4:	orr	r0, r1, r3
   197e8:	eor	r0, r0, #1
   197ec:	ldr	r1, [fp, #16]
   197f0:	clz	r1, r1
   197f4:	lsr	r1, r1, #5
   197f8:	orr	r0, r1, r0
   197fc:	str	r0, [fp, #-68]	; 0xffffffbc
   19800:	str	r2, [sp, #92]	; 0x5c
   19804:	eor	r0, r2, #1
   19808:	str	r0, [sp, #60]	; 0x3c
   1980c:	mov	r7, #0
   19810:	cmn	lr, #1
   19814:	beq	19824 <__assert_fail@plt+0x84ac>
   19818:	cmp	r7, lr
   1981c:	bne	19830 <__assert_fail@plt+0x84b8>
   19820:	b	1a33c <__assert_fail@plt+0x8fc4>
   19824:	ldrb	r0, [ip, r7]
   19828:	cmp	r0, #0
   1982c:	beq	1a33c <__assert_fail@plt+0x8fc4>
   19830:	mov	r9, #0
   19834:	ldr	r0, [fp, #-60]	; 0xffffffc4
   19838:	cmp	r0, #0
   1983c:	beq	19870 <__assert_fail@plt+0x84f8>
   19840:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19844:	add	r4, r7, r0
   19848:	cmp	r0, #2
   1984c:	bcc	19868 <__assert_fail@plt+0x84f0>
   19850:	cmn	lr, #1
   19854:	bne	19868 <__assert_fail@plt+0x84f0>
   19858:	mov	r0, ip
   1985c:	bl	11240 <strlen@plt>
   19860:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19864:	mov	lr, r0
   19868:	cmp	r4, lr
   1986c:	bls	1987c <__assert_fail@plt+0x8504>
   19870:	mov	r0, #0
   19874:	str	r0, [fp, #-52]	; 0xffffffcc
   19878:	b	198c0 <__assert_fail@plt+0x8548>
   1987c:	mov	r4, lr
   19880:	add	r0, ip, r7
   19884:	ldr	r1, [fp, #-84]	; 0xffffffac
   19888:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1988c:	bl	11234 <bcmp@plt>
   19890:	cmp	r0, #0
   19894:	mov	r1, r0
   19898:	movwne	r1, #1
   1989c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   198a0:	orr	r1, r1, r2
   198a4:	tst	r1, #1
   198a8:	beq	1a410 <__assert_fail@plt+0x9098>
   198ac:	clz	r0, r0
   198b0:	lsr	r0, r0, #5
   198b4:	str	r0, [fp, #-52]	; 0xffffffcc
   198b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   198bc:	mov	lr, r4
   198c0:	ldrb	r4, [ip, r7]
   198c4:	cmp	r4, #126	; 0x7e
   198c8:	bhi	19df8 <__assert_fail@plt+0x8a80>
   198cc:	mov	r6, #1
   198d0:	mov	r2, #110	; 0x6e
   198d4:	mov	r0, #97	; 0x61
   198d8:	add	r3, pc, #4
   198dc:	mov	r1, #0
   198e0:	ldr	pc, [r3, r4, lsl #2]
   198e4:	andeq	r9, r1, r8, asr ip
   198e8:	strdeq	r9, [r1], -r8
   198ec:	strdeq	r9, [r1], -r8
   198f0:	strdeq	r9, [r1], -r8
   198f4:	strdeq	r9, [r1], -r8
   198f8:	strdeq	r9, [r1], -r8
   198fc:	strdeq	r9, [r1], -r8
   19900:	andeq	r9, r1, ip, asr #29
   19904:	andeq	r9, r1, r8, lsr ip
   19908:	andeq	r9, r1, r0, lsr ip
   1990c:	andeq	r9, r1, r4, asr #24
   19910:	andeq	r9, r1, r0, ror #26
   19914:	andeq	r9, r1, r8, lsr #24
   19918:	andeq	r9, r1, r0, asr #24
   1991c:	strdeq	r9, [r1], -r8
   19920:	strdeq	r9, [r1], -r8
   19924:	strdeq	r9, [r1], -r8
   19928:	strdeq	r9, [r1], -r8
   1992c:	strdeq	r9, [r1], -r8
   19930:	strdeq	r9, [r1], -r8
   19934:	strdeq	r9, [r1], -r8
   19938:	strdeq	r9, [r1], -r8
   1993c:	strdeq	r9, [r1], -r8
   19940:	strdeq	r9, [r1], -r8
   19944:	strdeq	r9, [r1], -r8
   19948:	strdeq	r9, [r1], -r8
   1994c:	strdeq	r9, [r1], -r8
   19950:	strdeq	r9, [r1], -r8
   19954:	strdeq	r9, [r1], -r8
   19958:	strdeq	r9, [r1], -r8
   1995c:	strdeq	r9, [r1], -r8
   19960:	strdeq	r9, [r1], -r8
   19964:	ldrdeq	r9, [r1], -ip
   19968:	andeq	r9, r1, r0, ror #23
   1996c:	andeq	r9, r1, r0, ror #23
   19970:	andeq	r9, r1, r8, asr #23
   19974:	andeq	r9, r1, r0, ror #23
   19978:	andeq	r9, r1, r0, ror #21
   1997c:	andeq	r9, r1, r0, ror #23
   19980:	andeq	r9, r1, r8, ror #26
   19984:	andeq	r9, r1, r0, ror #23
   19988:	andeq	r9, r1, r0, ror #23
   1998c:	andeq	r9, r1, r0, ror #23
   19990:	andeq	r9, r1, r0, ror #21
   19994:	andeq	r9, r1, r0, ror #21
   19998:	andeq	r9, r1, r0, ror #21
   1999c:	andeq	r9, r1, r0, ror #21
   199a0:	andeq	r9, r1, r0, ror #21
   199a4:	andeq	r9, r1, r0, ror #21
   199a8:	andeq	r9, r1, r0, ror #21
   199ac:	andeq	r9, r1, r0, ror #21
   199b0:	andeq	r9, r1, r0, ror #21
   199b4:	andeq	r9, r1, r0, ror #21
   199b8:	andeq	r9, r1, r0, ror #21
   199bc:	andeq	r9, r1, r0, ror #21
   199c0:	andeq	r9, r1, r0, ror #21
   199c4:	andeq	r9, r1, r0, ror #21
   199c8:	andeq	r9, r1, r0, ror #21
   199cc:	andeq	r9, r1, r0, ror #21
   199d0:	andeq	r9, r1, r0, ror #23
   199d4:	andeq	r9, r1, r0, ror #23
   199d8:	andeq	r9, r1, r0, ror #23
   199dc:	andeq	r9, r1, r0, ror #23
   199e0:	andeq	r9, r1, r0, lsr sp
   199e4:	strdeq	r9, [r1], -r8
   199e8:	andeq	r9, r1, r0, ror #21
   199ec:	andeq	r9, r1, r0, ror #21
   199f0:	andeq	r9, r1, r0, ror #21
   199f4:	andeq	r9, r1, r0, ror #21
   199f8:	andeq	r9, r1, r0, ror #21
   199fc:	andeq	r9, r1, r0, ror #21
   19a00:	andeq	r9, r1, r0, ror #21
   19a04:	andeq	r9, r1, r0, ror #21
   19a08:	andeq	r9, r1, r0, ror #21
   19a0c:	andeq	r9, r1, r0, ror #21
   19a10:	andeq	r9, r1, r0, ror #21
   19a14:	andeq	r9, r1, r0, ror #21
   19a18:	andeq	r9, r1, r0, ror #21
   19a1c:	andeq	r9, r1, r0, ror #21
   19a20:	andeq	r9, r1, r0, ror #21
   19a24:	andeq	r9, r1, r0, ror #21
   19a28:	andeq	r9, r1, r0, ror #21
   19a2c:	andeq	r9, r1, r0, ror #21
   19a30:	andeq	r9, r1, r0, ror #21
   19a34:	andeq	r9, r1, r0, ror #21
   19a38:	andeq	r9, r1, r0, ror #21
   19a3c:	andeq	r9, r1, r0, ror #21
   19a40:	andeq	r9, r1, r0, ror #21
   19a44:	andeq	r9, r1, r0, ror #21
   19a48:	andeq	r9, r1, r0, ror #21
   19a4c:	andeq	r9, r1, r0, ror #21
   19a50:	andeq	r9, r1, r0, ror #23
   19a54:	andeq	r9, r1, r8, lsl #24
   19a58:	andeq	r9, r1, r0, ror #21
   19a5c:	andeq	r9, r1, r0, ror #23
   19a60:	andeq	r9, r1, r0, ror #21
   19a64:	andeq	r9, r1, r0, ror #23
   19a68:	andeq	r9, r1, r0, ror #21
   19a6c:	andeq	r9, r1, r0, ror #21
   19a70:	andeq	r9, r1, r0, ror #21
   19a74:	andeq	r9, r1, r0, ror #21
   19a78:	andeq	r9, r1, r0, ror #21
   19a7c:	andeq	r9, r1, r0, ror #21
   19a80:	andeq	r9, r1, r0, ror #21
   19a84:	andeq	r9, r1, r0, ror #21
   19a88:	andeq	r9, r1, r0, ror #21
   19a8c:	andeq	r9, r1, r0, ror #21
   19a90:	andeq	r9, r1, r0, ror #21
   19a94:	andeq	r9, r1, r0, ror #21
   19a98:	andeq	r9, r1, r0, ror #21
   19a9c:	andeq	r9, r1, r0, ror #21
   19aa0:	andeq	r9, r1, r0, ror #21
   19aa4:	andeq	r9, r1, r0, ror #21
   19aa8:	andeq	r9, r1, r0, ror #21
   19aac:	andeq	r9, r1, r0, ror #21
   19ab0:	andeq	r9, r1, r0, ror #21
   19ab4:	andeq	r9, r1, r0, ror #21
   19ab8:	andeq	r9, r1, r0, ror #21
   19abc:	andeq	r9, r1, r0, ror #21
   19ac0:	andeq	r9, r1, r0, ror #21
   19ac4:	andeq	r9, r1, r0, ror #21
   19ac8:	andeq	r9, r1, r0, ror #21
   19acc:	andeq	r9, r1, r0, ror #21
   19ad0:	muleq	r1, ip, fp
   19ad4:	andeq	r9, r1, r0, ror #23
   19ad8:	muleq	r1, ip, fp
   19adc:	andeq	r9, r1, r8, asr #23
   19ae0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19ae4:	tst	r0, #1
   19ae8:	bne	19b14 <__assert_fail@plt+0x879c>
   19aec:	ubfx	r0, r4, #5, #3
   19af0:	ldr	r1, [fp, #16]
   19af4:	ldr	r0, [r1, r0, lsl #2]
   19af8:	and	r1, r4, #31
   19afc:	mov	r2, #1
   19b00:	tst	r0, r2, lsl r1
   19b04:	beq	19b14 <__assert_fail@plt+0x879c>
   19b08:	mov	r0, r4
   19b0c:	mov	r1, r6
   19b10:	b	19b28 <__assert_fail@plt+0x87b0>
   19b14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   19b18:	cmp	r0, #0
   19b1c:	mov	r0, r4
   19b20:	mov	r1, r6
   19b24:	beq	19e60 <__assert_fail@plt+0x8ae8>
   19b28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19b2c:	tst	r2, #1
   19b30:	bne	1a424 <__assert_fail@plt+0x90ac>
   19b34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   19b38:	subs	r2, r2, #2
   19b3c:	movwne	r2, #1
   19b40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19b44:	orr	r2, r2, r3
   19b48:	tst	r2, #1
   19b4c:	bne	19b88 <__assert_fail@plt+0x8810>
   19b50:	cmp	r8, sl
   19b54:	movcc	r2, #39	; 0x27
   19b58:	strbcc	r2, [r5, r8]
   19b5c:	add	r2, r8, #1
   19b60:	cmp	r2, sl
   19b64:	movcc	r3, #36	; 0x24
   19b68:	strbcc	r3, [r5, r2]
   19b6c:	add	r2, r8, #2
   19b70:	cmp	r2, sl
   19b74:	movcc	r3, #39	; 0x27
   19b78:	strbcc	r3, [r5, r2]
   19b7c:	add	r8, r8, #3
   19b80:	mov	r2, #1
   19b84:	str	r2, [fp, #-56]	; 0xffffffc8
   19b88:	cmp	r8, sl
   19b8c:	movcc	r2, #92	; 0x5c
   19b90:	strbcc	r2, [r5, r8]
   19b94:	add	r8, r8, #1
   19b98:	b	19ea4 <__assert_fail@plt+0x8b2c>
   19b9c:	cmp	lr, #1
   19ba0:	beq	19bc8 <__assert_fail@plt+0x8850>
   19ba4:	mov	r6, #0
   19ba8:	cmn	lr, #1
   19bac:	bne	19bd4 <__assert_fail@plt+0x885c>
   19bb0:	ldrb	r0, [ip, #1]
   19bb4:	cmp	r0, #0
   19bb8:	beq	19bc8 <__assert_fail@plt+0x8850>
   19bbc:	mvn	lr, #0
   19bc0:	mov	r9, #0
   19bc4:	b	19ae0 <__assert_fail@plt+0x8768>
   19bc8:	mov	r6, #0
   19bcc:	cmp	r7, #0
   19bd0:	beq	19bdc <__assert_fail@plt+0x8864>
   19bd4:	mov	r9, #0
   19bd8:	b	19ae0 <__assert_fail@plt+0x8768>
   19bdc:	mov	r1, #1
   19be0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19be4:	cmp	r0, #2
   19be8:	bne	19c00 <__assert_fail@plt+0x8888>
   19bec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19bf0:	tst	r0, #1
   19bf4:	mov	r6, r1
   19bf8:	beq	19ae0 <__assert_fail@plt+0x8768>
   19bfc:	b	1a424 <__assert_fail@plt+0x90ac>
   19c00:	mov	r6, r1
   19c04:	b	19ae0 <__assert_fail@plt+0x8768>
   19c08:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19c0c:	cmp	r0, #2
   19c10:	bne	19e44 <__assert_fail@plt+0x8acc>
   19c14:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19c18:	tst	r0, #1
   19c1c:	bne	1a424 <__assert_fail@plt+0x90ac>
   19c20:	mov	r9, #0
   19c24:	b	19e58 <__assert_fail@plt+0x8ae0>
   19c28:	mov	r0, #102	; 0x66
   19c2c:	b	19ecc <__assert_fail@plt+0x8b54>
   19c30:	mov	r2, #116	; 0x74
   19c34:	b	19c44 <__assert_fail@plt+0x88cc>
   19c38:	mov	r0, #98	; 0x62
   19c3c:	b	19ecc <__assert_fail@plt+0x8b54>
   19c40:	mov	r2, #114	; 0x72
   19c44:	ldr	r0, [sp, #72]	; 0x48
   19c48:	tst	r0, #1
   19c4c:	mov	r0, r2
   19c50:	bne	19ecc <__assert_fail@plt+0x8b54>
   19c54:	b	1a424 <__assert_fail@plt+0x90ac>
   19c58:	ldr	r0, [sp, #92]	; 0x5c
   19c5c:	tst	r0, #1
   19c60:	beq	19ee8 <__assert_fail@plt+0x8b70>
   19c64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19c68:	tst	r0, #1
   19c6c:	bne	1a424 <__assert_fail@plt+0x90ac>
   19c70:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19c74:	subs	r0, r0, #2
   19c78:	movwne	r0, #1
   19c7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19c80:	orr	r0, r0, r1
   19c84:	tst	r0, #1
   19c88:	bne	19cc4 <__assert_fail@plt+0x894c>
   19c8c:	cmp	r8, sl
   19c90:	movcc	r0, #39	; 0x27
   19c94:	strbcc	r0, [r5, r8]
   19c98:	add	r0, r8, #1
   19c9c:	cmp	r0, sl
   19ca0:	movcc	r1, #36	; 0x24
   19ca4:	strbcc	r1, [r5, r0]
   19ca8:	add	r0, r8, #2
   19cac:	cmp	r0, sl
   19cb0:	movcc	r1, #39	; 0x27
   19cb4:	strbcc	r1, [r5, r0]
   19cb8:	add	r8, r8, #3
   19cbc:	mov	r0, #1
   19cc0:	str	r0, [fp, #-56]	; 0xffffffc8
   19cc4:	cmp	r8, sl
   19cc8:	movcc	r0, #92	; 0x5c
   19ccc:	strbcc	r0, [r5, r8]
   19cd0:	add	r0, r8, #1
   19cd4:	mov	r6, #0
   19cd8:	mov	r9, #1
   19cdc:	mov	r4, #48	; 0x30
   19ce0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19ce4:	cmp	r1, #2
   19ce8:	beq	1a0ac <__assert_fail@plt+0x8d34>
   19cec:	add	r1, r7, #1
   19cf0:	cmp	r1, lr
   19cf4:	bcs	1a0ac <__assert_fail@plt+0x8d34>
   19cf8:	ldrb	r1, [ip, r1]
   19cfc:	sub	r1, r1, #48	; 0x30
   19d00:	uxtb	r1, r1
   19d04:	cmp	r1, #9
   19d08:	bhi	1a0ac <__assert_fail@plt+0x8d34>
   19d0c:	cmp	r0, sl
   19d10:	movcc	r1, #48	; 0x30
   19d14:	strbcc	r1, [r5, r0]
   19d18:	add	r0, r8, #2
   19d1c:	cmp	r0, sl
   19d20:	movcc	r1, #48	; 0x30
   19d24:	strbcc	r1, [r5, r0]
   19d28:	add	r8, r8, #3
   19d2c:	b	19ae0 <__assert_fail@plt+0x8768>
   19d30:	mov	r9, #0
   19d34:	mov	r4, #63	; 0x3f
   19d38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19d3c:	cmp	r0, #5
   19d40:	beq	1a0b4 <__assert_fail@plt+0x8d3c>
   19d44:	cmp	r0, #2
   19d48:	bne	1a15c <__assert_fail@plt+0x8de4>
   19d4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19d50:	tst	r0, #1
   19d54:	mov	r6, #0
   19d58:	beq	19ae0 <__assert_fail@plt+0x8768>
   19d5c:	b	1a424 <__assert_fail@plt+0x90ac>
   19d60:	mov	r0, #118	; 0x76
   19d64:	b	19ecc <__assert_fail@plt+0x8b54>
   19d68:	mov	r4, #39	; 0x27
   19d6c:	mov	r0, #1
   19d70:	str	r0, [sp, #64]	; 0x40
   19d74:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19d78:	cmp	r0, #2
   19d7c:	bne	19f04 <__assert_fail@plt+0x8b8c>
   19d80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19d84:	tst	r0, #1
   19d88:	bne	1a424 <__assert_fail@plt+0x90ac>
   19d8c:	ldr	r2, [sp, #84]	; 0x54
   19d90:	cmp	r2, #0
   19d94:	mov	r0, r2
   19d98:	movwne	r0, #1
   19d9c:	clz	r1, sl
   19da0:	lsr	r1, r1, #5
   19da4:	orrs	r0, r0, r1
   19da8:	moveq	r2, sl
   19dac:	str	r2, [sp, #84]	; 0x54
   19db0:	moveq	sl, r0
   19db4:	cmp	r8, sl
   19db8:	movcc	r0, #39	; 0x27
   19dbc:	strbcc	r0, [r5, r8]
   19dc0:	add	r0, r8, #1
   19dc4:	cmp	r0, sl
   19dc8:	movcc	r1, #92	; 0x5c
   19dcc:	strbcc	r1, [r5, r0]
   19dd0:	add	r0, r8, #2
   19dd4:	cmp	r0, sl
   19dd8:	movcc	r1, #39	; 0x27
   19ddc:	strbcc	r1, [r5, r0]
   19de0:	add	r8, r8, #3
   19de4:	mov	r0, #0
   19de8:	str	r0, [fp, #-56]	; 0xffffffc8
   19dec:	mov	r9, #0
   19df0:	mov	r6, #1
   19df4:	b	19ae0 <__assert_fail@plt+0x8768>
   19df8:	ldr	r0, [sp, #44]	; 0x2c
   19dfc:	cmp	r0, #1
   19e00:	bne	19f0c <__assert_fail@plt+0x8b94>
   19e04:	str	lr, [sp, #32]
   19e08:	bl	11210 <__ctype_b_loc@plt>
   19e0c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19e10:	ldr	r0, [r0]
   19e14:	add	r0, r0, r4, lsl #1
   19e18:	ldrb	r0, [r0, #1]
   19e1c:	ubfx	r6, r0, #6, #1
   19e20:	mov	r2, #1
   19e24:	ldr	r0, [sp, #60]	; 0x3c
   19e28:	orr	r1, r6, r0
   19e2c:	cmp	r2, #1
   19e30:	bhi	1a164 <__assert_fail@plt+0x8dec>
   19e34:	tst	r1, #1
   19e38:	beq	1a164 <__assert_fail@plt+0x8dec>
   19e3c:	ldr	lr, [sp, #32]
   19e40:	b	19ae0 <__assert_fail@plt+0x8768>
   19e44:	mov	r9, #0
   19e48:	mov	r0, #92	; 0x5c
   19e4c:	ldr	r1, [sp, #56]	; 0x38
   19e50:	cmp	r1, #0
   19e54:	beq	19ecc <__assert_fail@plt+0x8b54>
   19e58:	mov	r4, #92	; 0x5c
   19e5c:	mov	r6, #0
   19e60:	cmp	r9, #0
   19e64:	bne	19e9c <__assert_fail@plt+0x8b24>
   19e68:	ldr	r0, [fp, #-56]	; 0xffffffc8
   19e6c:	tst	r0, #1
   19e70:	beq	19e9c <__assert_fail@plt+0x8b24>
   19e74:	cmp	r8, sl
   19e78:	movcc	r0, #39	; 0x27
   19e7c:	strbcc	r0, [r5, r8]
   19e80:	add	r0, r8, #1
   19e84:	cmp	r0, sl
   19e88:	movcc	r1, #39	; 0x27
   19e8c:	strbcc	r1, [r5, r0]
   19e90:	add	r8, r8, #2
   19e94:	mov	r0, #0
   19e98:	str	r0, [fp, #-56]	; 0xffffffc8
   19e9c:	mov	r1, r6
   19ea0:	mov	r0, r4
   19ea4:	cmp	r8, sl
   19ea8:	strbcc	r0, [r5, r8]
   19eac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   19eb0:	and	r0, r0, r1
   19eb4:	str	r0, [fp, #-48]	; 0xffffffd0
   19eb8:	add	r8, r8, #1
   19ebc:	add	r7, r7, #1
   19ec0:	cmn	lr, #1
   19ec4:	bne	19818 <__assert_fail@plt+0x84a0>
   19ec8:	b	19824 <__assert_fail@plt+0x84ac>
   19ecc:	mov	r9, #0
   19ed0:	ldr	r1, [sp, #92]	; 0x5c
   19ed4:	tst	r1, #1
   19ed8:	mov	r6, #0
   19edc:	mov	r1, #0
   19ee0:	beq	19ae0 <__assert_fail@plt+0x8768>
   19ee4:	b	19b28 <__assert_fail@plt+0x87b0>
   19ee8:	mov	r4, #0
   19eec:	ldr	r0, [sp, #40]	; 0x28
   19ef0:	cmp	r0, #0
   19ef4:	mov	r9, #0
   19ef8:	mov	r6, #0
   19efc:	beq	19ae0 <__assert_fail@plt+0x8768>
   19f00:	b	19ebc <__assert_fail@plt+0x8b44>
   19f04:	mov	r6, #1
   19f08:	b	19ae0 <__assert_fail@plt+0x8768>
   19f0c:	mov	r0, #0
   19f10:	str	r0, [fp, #-36]	; 0xffffffdc
   19f14:	str	r0, [fp, #-40]	; 0xffffffd8
   19f18:	cmn	lr, #1
   19f1c:	bne	19f30 <__assert_fail@plt+0x8bb8>
   19f20:	mov	r0, ip
   19f24:	bl	11240 <strlen@plt>
   19f28:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19f2c:	mov	lr, r0
   19f30:	ldr	r0, [sp, #76]	; 0x4c
   19f34:	add	r0, r0, r7
   19f38:	str	r0, [sp, #24]
   19f3c:	mov	r6, #1
   19f40:	mov	r2, #0
   19f44:	sub	r0, fp, #40	; 0x28
   19f48:	mov	r3, r0
   19f4c:	str	r5, [sp, #28]
   19f50:	str	lr, [sp, #32]
   19f54:	b	19f98 <__assert_fail@plt+0x8c20>
   19f58:	ldr	r5, [sp, #52]	; 0x34
   19f5c:	add	r5, r0, r5
   19f60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19f64:	bl	1115c <iswprint@plt>
   19f68:	cmp	r0, #0
   19f6c:	movwne	r0, #1
   19f70:	and	r6, r6, r0
   19f74:	sub	r0, fp, #40	; 0x28
   19f78:	bl	1112c <mbsinit@plt>
   19f7c:	sub	r3, fp, #40	; 0x28
   19f80:	mov	r2, r5
   19f84:	ldr	lr, [sp, #32]
   19f88:	cmp	r0, #0
   19f8c:	ldr	r5, [sp, #28]
   19f90:	ldr	ip, [fp, #-80]	; 0xffffffb0
   19f94:	bne	19e24 <__assert_fail@plt+0x8aac>
   19f98:	str	r2, [sp, #52]	; 0x34
   19f9c:	add	r0, r2, r7
   19fa0:	add	r1, ip, r0
   19fa4:	str	r0, [sp, #48]	; 0x30
   19fa8:	sub	r2, lr, r0
   19fac:	sub	r0, fp, #44	; 0x2c
   19fb0:	bl	1c49c <__assert_fail@plt+0xb124>
   19fb4:	cmp	r0, #0
   19fb8:	beq	1a330 <__assert_fail@plt+0x8fb8>
   19fbc:	cmn	r0, #1
   19fc0:	beq	1a2ec <__assert_fail@plt+0x8f74>
   19fc4:	cmn	r0, #2
   19fc8:	ldr	lr, [sp, #32]
   19fcc:	beq	1a2f4 <__assert_fail@plt+0x8f7c>
   19fd0:	cmp	r0, #2
   19fd4:	mov	r1, #0
   19fd8:	movwcc	r1, #1
   19fdc:	ldr	r2, [sp, #68]	; 0x44
   19fe0:	eor	r2, r2, #1
   19fe4:	orrs	r1, r2, r1
   19fe8:	bne	19f58 <__assert_fail@plt+0x8be0>
   19fec:	ldr	r1, [sp, #52]	; 0x34
   19ff0:	ldr	r2, [sp, #24]
   19ff4:	add	r1, r2, r1
   19ff8:	sub	r2, r0, #1
   19ffc:	b	1a00c <__assert_fail@plt+0x8c94>
   1a000:	add	r1, r1, #1
   1a004:	subs	r2, r2, #1
   1a008:	beq	19f58 <__assert_fail@plt+0x8be0>
   1a00c:	ldrb	r3, [r1]
   1a010:	sub	r3, r3, #91	; 0x5b
   1a014:	cmp	r3, #33	; 0x21
   1a018:	bhi	1a000 <__assert_fail@plt+0x8c88>
   1a01c:	add	r5, pc, #0
   1a020:	ldr	pc, [r5, r3, lsl #2]
   1a024:	andeq	sl, r1, ip, lsl r4
   1a028:	andeq	sl, r1, ip, lsl r4
   1a02c:	andeq	sl, r1, r0
   1a030:	andeq	sl, r1, ip, lsl r4
   1a034:	andeq	sl, r1, r0
   1a038:	andeq	sl, r1, ip, lsl r4
   1a03c:	andeq	sl, r1, r0
   1a040:	andeq	sl, r1, r0
   1a044:	andeq	sl, r1, r0
   1a048:	andeq	sl, r1, r0
   1a04c:	andeq	sl, r1, r0
   1a050:	andeq	sl, r1, r0
   1a054:	andeq	sl, r1, r0
   1a058:	andeq	sl, r1, r0
   1a05c:	andeq	sl, r1, r0
   1a060:	andeq	sl, r1, r0
   1a064:	andeq	sl, r1, r0
   1a068:	andeq	sl, r1, r0
   1a06c:	andeq	sl, r1, r0
   1a070:	andeq	sl, r1, r0
   1a074:	andeq	sl, r1, r0
   1a078:	andeq	sl, r1, r0
   1a07c:	andeq	sl, r1, r0
   1a080:	andeq	sl, r1, r0
   1a084:	andeq	sl, r1, r0
   1a088:	andeq	sl, r1, r0
   1a08c:	andeq	sl, r1, r0
   1a090:	andeq	sl, r1, r0
   1a094:	andeq	sl, r1, r0
   1a098:	andeq	sl, r1, r0
   1a09c:	andeq	sl, r1, r0
   1a0a0:	andeq	sl, r1, r0
   1a0a4:	andeq	sl, r1, r0
   1a0a8:	andeq	sl, r1, ip, lsl r4
   1a0ac:	mov	r8, r0
   1a0b0:	b	19ae0 <__assert_fail@plt+0x8768>
   1a0b4:	ldr	r0, [sp, #36]	; 0x24
   1a0b8:	cmp	r0, #0
   1a0bc:	beq	1a15c <__assert_fail@plt+0x8de4>
   1a0c0:	add	r0, r7, #2
   1a0c4:	cmp	r0, lr
   1a0c8:	bcs	1a15c <__assert_fail@plt+0x8de4>
   1a0cc:	add	r1, r7, ip
   1a0d0:	ldrb	r1, [r1, #1]
   1a0d4:	cmp	r1, #63	; 0x3f
   1a0d8:	bne	1a15c <__assert_fail@plt+0x8de4>
   1a0dc:	ldrb	r1, [ip, r0]
   1a0e0:	sub	r2, r1, #33	; 0x21
   1a0e4:	cmp	r2, #29
   1a0e8:	bhi	1a15c <__assert_fail@plt+0x8de4>
   1a0ec:	mov	r3, #1
   1a0f0:	movw	r6, #20929	; 0x51c1
   1a0f4:	movt	r6, #14336	; 0x3800
   1a0f8:	tst	r6, r3, lsl r2
   1a0fc:	beq	1a15c <__assert_fail@plt+0x8de4>
   1a100:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a104:	tst	r2, #1
   1a108:	bne	1a424 <__assert_fail@plt+0x90ac>
   1a10c:	cmp	r8, sl
   1a110:	movcc	r2, #63	; 0x3f
   1a114:	strbcc	r2, [r5, r8]
   1a118:	add	r2, r8, #1
   1a11c:	cmp	r2, sl
   1a120:	movcc	r3, #34	; 0x22
   1a124:	strbcc	r3, [r5, r2]
   1a128:	add	r2, r8, #2
   1a12c:	cmp	r2, sl
   1a130:	movcc	r3, #34	; 0x22
   1a134:	strbcc	r3, [r5, r2]
   1a138:	add	r2, r8, #3
   1a13c:	cmp	r2, sl
   1a140:	movcc	r3, #63	; 0x3f
   1a144:	strbcc	r3, [r5, r2]
   1a148:	add	r8, r8, #4
   1a14c:	mov	r7, r0
   1a150:	mov	r4, r1
   1a154:	mov	r6, #0
   1a158:	b	19ae0 <__assert_fail@plt+0x8768>
   1a15c:	mov	r6, #0
   1a160:	b	19ae0 <__assert_fail@plt+0x8768>
   1a164:	add	r0, r2, r7
   1a168:	str	r0, [sp, #52]	; 0x34
   1a16c:	mov	r2, #0
   1a170:	ldr	lr, [sp, #32]
   1a174:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a178:	str	r1, [sp, #48]	; 0x30
   1a17c:	tst	r1, #1
   1a180:	bne	1a25c <__assert_fail@plt+0x8ee4>
   1a184:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1a188:	tst	r1, #1
   1a18c:	bne	1a424 <__assert_fail@plt+0x90ac>
   1a190:	mov	r3, r0
   1a194:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a198:	subs	r1, r0, #2
   1a19c:	movwne	r1, #1
   1a1a0:	orr	r1, r1, r3
   1a1a4:	tst	r1, #1
   1a1a8:	bne	1a1e0 <__assert_fail@plt+0x8e68>
   1a1ac:	cmp	r8, sl
   1a1b0:	movcc	r0, #39	; 0x27
   1a1b4:	strbcc	r0, [r5, r8]
   1a1b8:	add	r2, r8, #1
   1a1bc:	cmp	r2, sl
   1a1c0:	movcc	r0, #36	; 0x24
   1a1c4:	strbcc	r0, [r5, r2]
   1a1c8:	add	r2, r8, #2
   1a1cc:	cmp	r2, sl
   1a1d0:	movcc	r0, #39	; 0x27
   1a1d4:	strbcc	r0, [r5, r2]
   1a1d8:	add	r8, r8, #3
   1a1dc:	mov	r3, #1
   1a1e0:	cmp	r8, sl
   1a1e4:	movcc	r1, #92	; 0x5c
   1a1e8:	strbcc	r1, [r5, r8]
   1a1ec:	add	r2, r8, #1
   1a1f0:	cmp	r2, sl
   1a1f4:	bcs	1a208 <__assert_fail@plt+0x8e90>
   1a1f8:	uxtb	r1, r4
   1a1fc:	mov	r0, #48	; 0x30
   1a200:	orr	r1, r0, r1, lsr #6
   1a204:	strb	r1, [r5, r2]
   1a208:	add	r2, r8, #2
   1a20c:	cmp	r2, sl
   1a210:	lsrcc	r1, r4, #3
   1a214:	movcc	r0, #6
   1a218:	bficc	r1, r0, #3, #29
   1a21c:	strbcc	r1, [r5, r2]
   1a220:	mov	r0, #6
   1a224:	bfi	r4, r0, #3, #29
   1a228:	add	r8, r8, #3
   1a22c:	mov	r2, #1
   1a230:	mov	r0, r3
   1a234:	b	1a280 <__assert_fail@plt+0x8f08>
   1a238:	cmp	r8, sl
   1a23c:	strbcc	r4, [r5, r8]
   1a240:	ldr	r1, [sp, #76]	; 0x4c
   1a244:	ldrb	r4, [r1, r7]
   1a248:	add	r8, r8, #1
   1a24c:	mov	r7, r3
   1a250:	ldr	r1, [sp, #48]	; 0x30
   1a254:	tst	r1, #1
   1a258:	beq	1a184 <__assert_fail@plt+0x8e0c>
   1a25c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a260:	tst	r1, #1
   1a264:	beq	1a278 <__assert_fail@plt+0x8f00>
   1a268:	cmp	r8, sl
   1a26c:	movcc	r1, #92	; 0x5c
   1a270:	strbcc	r1, [r5, r8]
   1a274:	add	r8, r8, #1
   1a278:	mov	r1, #0
   1a27c:	str	r1, [fp, #-52]	; 0xffffffcc
   1a280:	and	r9, r2, #1
   1a284:	add	r3, r7, #1
   1a288:	ldr	r1, [sp, #52]	; 0x34
   1a28c:	cmp	r1, r3
   1a290:	bls	1a2d4 <__assert_fail@plt+0x8f5c>
   1a294:	cmp	r9, #0
   1a298:	movwne	r9, #1
   1a29c:	mvn	r1, r0
   1a2a0:	orr	r1, r1, r9
   1a2a4:	tst	r1, #1
   1a2a8:	bne	1a238 <__assert_fail@plt+0x8ec0>
   1a2ac:	cmp	r8, sl
   1a2b0:	movcc	r1, #39	; 0x27
   1a2b4:	strbcc	r1, [r5, r8]
   1a2b8:	add	r1, r8, #1
   1a2bc:	cmp	r1, sl
   1a2c0:	movcc	r0, #39	; 0x27
   1a2c4:	strbcc	r0, [r5, r1]
   1a2c8:	add	r8, r8, #2
   1a2cc:	mov	r0, #0
   1a2d0:	b	1a238 <__assert_fail@plt+0x8ec0>
   1a2d4:	str	r0, [fp, #-56]	; 0xffffffc8
   1a2d8:	cmp	r9, #0
   1a2dc:	movwne	r9, #1
   1a2e0:	cmp	r9, #0
   1a2e4:	beq	19e68 <__assert_fail@plt+0x8af0>
   1a2e8:	b	19e9c <__assert_fail@plt+0x8b24>
   1a2ec:	mov	r6, #0
   1a2f0:	b	1a330 <__assert_fail@plt+0x8fb8>
   1a2f4:	mov	r6, #0
   1a2f8:	ldr	r0, [sp, #48]	; 0x30
   1a2fc:	cmp	r0, lr
   1a300:	bcs	1a330 <__assert_fail@plt+0x8fb8>
   1a304:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a308:	add	r0, ip, r7
   1a30c:	ldr	r2, [sp, #52]	; 0x34
   1a310:	ldrb	r1, [r0, r2]
   1a314:	cmp	r1, #0
   1a318:	beq	19e24 <__assert_fail@plt+0x8aac>
   1a31c:	add	r2, r2, #1
   1a320:	add	r1, r7, r2
   1a324:	cmp	r1, lr
   1a328:	bcc	1a310 <__assert_fail@plt+0x8f98>
   1a32c:	b	19e24 <__assert_fail@plt+0x8aac>
   1a330:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a334:	ldr	r2, [sp, #52]	; 0x34
   1a338:	b	19e24 <__assert_fail@plt+0x8aac>
   1a33c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a340:	eor	r0, r1, #2
   1a344:	orr	r0, r0, r8
   1a348:	clz	r0, r0
   1a34c:	lsr	r0, r0, #5
   1a350:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1a354:	tst	r3, r0
   1a358:	bne	1a424 <__assert_fail@plt+0x90ac>
   1a35c:	mov	r6, r5
   1a360:	subs	r0, r1, #2
   1a364:	movwne	r0, #1
   1a368:	orr	r0, r3, r0
   1a36c:	tst	r0, #1
   1a370:	ldr	r2, [sp, #92]	; 0x5c
   1a374:	ldreq	r0, [sp, #64]	; 0x40
   1a378:	eoreq	r0, r0, #1
   1a37c:	tsteq	r0, #1
   1a380:	bne	1a3c0 <__assert_fail@plt+0x9048>
   1a384:	mov	r9, lr
   1a388:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a38c:	tst	r0, #1
   1a390:	bne	1a48c <__assert_fail@plt+0x9114>
   1a394:	ldr	r0, [sp, #84]	; 0x54
   1a398:	cmp	r0, #0
   1a39c:	beq	1a3c0 <__assert_fail@plt+0x9048>
   1a3a0:	mov	r0, #0
   1a3a4:	str	r0, [fp, #-48]	; 0xffffffd0
   1a3a8:	mov	r1, #2
   1a3ac:	cmp	sl, #0
   1a3b0:	mov	r0, r2
   1a3b4:	mov	r4, r3
   1a3b8:	ldr	r7, [sp, #84]	; 0x54
   1a3bc:	beq	19598 <__assert_fail@plt+0x8220>
   1a3c0:	ldr	r1, [fp, #-84]	; 0xffffffac
   1a3c4:	clz	r0, r1
   1a3c8:	lsr	r0, r0, #5
   1a3cc:	orr	r0, r0, r3
   1a3d0:	tst	r0, #1
   1a3d4:	bne	1a400 <__assert_fail@plt+0x9088>
   1a3d8:	ldrb	r0, [r1]
   1a3dc:	cmp	r0, #0
   1a3e0:	beq	1a400 <__assert_fail@plt+0x9088>
   1a3e4:	add	r1, r1, #1
   1a3e8:	cmp	r8, sl
   1a3ec:	strbcc	r0, [r6, r8]
   1a3f0:	add	r8, r8, #1
   1a3f4:	ldrb	r0, [r1], #1
   1a3f8:	cmp	r0, #0
   1a3fc:	bne	1a3e8 <__assert_fail@plt+0x9070>
   1a400:	cmp	r8, sl
   1a404:	movcc	r0, #0
   1a408:	strbcc	r0, [r6, r8]
   1a40c:	b	1a480 <__assert_fail@plt+0x9108>
   1a410:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a414:	mov	lr, r4
   1a418:	b	1a424 <__assert_fail@plt+0x90ac>
   1a41c:	ldr	r5, [sp, #28]
   1a420:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a424:	mov	r0, #0
   1a428:	ldr	r1, [fp, #12]
   1a42c:	bic	r1, r1, #2
   1a430:	mov	r2, #2
   1a434:	ldr	r3, [sp, #92]	; 0x5c
   1a438:	tst	r3, #1
   1a43c:	movwne	r2, #4
   1a440:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a444:	cmp	r3, #2
   1a448:	movne	r2, r3
   1a44c:	str	r2, [sp]
   1a450:	str	r1, [sp, #4]
   1a454:	str	r0, [sp, #8]
   1a458:	ldr	r0, [sp, #80]	; 0x50
   1a45c:	str	r0, [sp, #12]
   1a460:	ldr	r0, [sp, #88]	; 0x58
   1a464:	str	r0, [sp, #16]
   1a468:	mov	r0, r5
   1a46c:	mov	r1, sl
   1a470:	mov	r2, ip
   1a474:	mov	r3, lr
   1a478:	bl	1950c <__assert_fail@plt+0x8194>
   1a47c:	mov	r8, r0
   1a480:	mov	r0, r8
   1a484:	sub	sp, fp, #28
   1a488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a48c:	mov	r0, #5
   1a490:	str	r0, [sp]
   1a494:	ldr	r0, [fp, #12]
   1a498:	str	r0, [sp, #4]
   1a49c:	ldr	r0, [fp, #16]
   1a4a0:	str	r0, [sp, #8]
   1a4a4:	ldr	r0, [sp, #80]	; 0x50
   1a4a8:	str	r0, [sp, #12]
   1a4ac:	ldr	r0, [sp, #88]	; 0x58
   1a4b0:	str	r0, [sp, #16]
   1a4b4:	mov	r0, r6
   1a4b8:	ldr	r1, [sp, #84]	; 0x54
   1a4bc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1a4c0:	mov	r3, r9
   1a4c4:	b	1a478 <__assert_fail@plt+0x9100>
   1a4c8:	bl	1133c <abort@plt>
   1a4cc:	mov	r3, r2
   1a4d0:	mov	r2, #0
   1a4d4:	b	1a4d8 <__assert_fail@plt+0x9160>
   1a4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4dc:	add	fp, sp, #28
   1a4e0:	sub	sp, sp, #36	; 0x24
   1a4e4:	mov	r4, r2
   1a4e8:	str	r2, [sp, #24]
   1a4ec:	mov	r5, r1
   1a4f0:	mov	r6, r0
   1a4f4:	str	r0, [sp, #20]
   1a4f8:	movw	r8, #57776	; 0xe1b0
   1a4fc:	movt	r8, #2
   1a500:	cmp	r3, #0
   1a504:	movne	r8, r3
   1a508:	bl	11258 <__errno_location@plt>
   1a50c:	str	r0, [sp, #28]
   1a510:	ldm	r8, {r3, r9}
   1a514:	ldr	r1, [r8, #40]	; 0x28
   1a518:	ldr	r2, [r8, #44]	; 0x2c
   1a51c:	ldr	r7, [r0]
   1a520:	str	r7, [sp, #32]
   1a524:	add	sl, r8, #8
   1a528:	cmp	r4, #0
   1a52c:	orreq	r9, r9, #1
   1a530:	stm	sp, {r3, r9, sl}
   1a534:	str	r1, [sp, #12]
   1a538:	str	r2, [sp, #16]
   1a53c:	mov	r0, #0
   1a540:	mov	r1, #0
   1a544:	mov	r2, r6
   1a548:	mov	r3, r5
   1a54c:	mov	r7, r5
   1a550:	bl	1950c <__assert_fail@plt+0x8194>
   1a554:	mov	r5, r0
   1a558:	add	r4, r0, #1
   1a55c:	mov	r0, r4
   1a560:	bl	1b3ec <__assert_fail@plt+0xa074>
   1a564:	mov	r6, r0
   1a568:	ldr	r0, [r8]
   1a56c:	ldr	r1, [r8, #40]	; 0x28
   1a570:	ldr	r2, [r8, #44]	; 0x2c
   1a574:	stm	sp, {r0, r9, sl}
   1a578:	str	r1, [sp, #12]
   1a57c:	str	r2, [sp, #16]
   1a580:	mov	r0, r6
   1a584:	mov	r1, r4
   1a588:	ldr	r2, [sp, #20]
   1a58c:	mov	r3, r7
   1a590:	bl	1950c <__assert_fail@plt+0x8194>
   1a594:	ldr	r0, [sp, #24]
   1a598:	ldr	r1, [sp, #32]
   1a59c:	ldr	r2, [sp, #28]
   1a5a0:	str	r1, [r2]
   1a5a4:	cmp	r0, #0
   1a5a8:	strne	r5, [r0]
   1a5ac:	mov	r0, r6
   1a5b0:	sub	sp, fp, #28
   1a5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a5bc:	add	fp, sp, #24
   1a5c0:	movw	r8, #57632	; 0xe120
   1a5c4:	movt	r8, #2
   1a5c8:	ldr	r4, [r8]
   1a5cc:	movw	r5, #57636	; 0xe124
   1a5d0:	movt	r5, #2
   1a5d4:	ldr	r0, [r5]
   1a5d8:	cmp	r0, #2
   1a5dc:	blt	1a608 <__assert_fail@plt+0x9290>
   1a5e0:	add	r7, r4, #12
   1a5e4:	mov	r6, #0
   1a5e8:	ldr	r0, [r7, r6, lsl #3]
   1a5ec:	bl	19200 <__assert_fail@plt+0x7e88>
   1a5f0:	add	r0, r6, #1
   1a5f4:	ldr	r1, [r5]
   1a5f8:	add	r2, r6, #2
   1a5fc:	cmp	r2, r1
   1a600:	mov	r6, r0
   1a604:	blt	1a5e8 <__assert_fail@plt+0x9270>
   1a608:	ldr	r0, [r4, #4]
   1a60c:	movw	r9, #57824	; 0xe1e0
   1a610:	movt	r9, #2
   1a614:	cmp	r0, r9
   1a618:	movw	r7, #57640	; 0xe128
   1a61c:	movt	r7, #2
   1a620:	beq	1a630 <__assert_fail@plt+0x92b8>
   1a624:	bl	19200 <__assert_fail@plt+0x7e88>
   1a628:	mov	r0, #256	; 0x100
   1a62c:	stm	r7, {r0, r9}
   1a630:	cmp	r4, r7
   1a634:	beq	1a644 <__assert_fail@plt+0x92cc>
   1a638:	mov	r0, r4
   1a63c:	bl	19200 <__assert_fail@plt+0x7e88>
   1a640:	str	r7, [r8]
   1a644:	mov	r0, #1
   1a648:	str	r0, [r5]
   1a64c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a650:	movw	r3, #57776	; 0xe1b0
   1a654:	movt	r3, #2
   1a658:	mvn	r2, #0
   1a65c:	b	1a660 <__assert_fail@plt+0x92e8>
   1a660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a664:	add	fp, sp, #28
   1a668:	sub	sp, sp, #44	; 0x2c
   1a66c:	mov	r7, r3
   1a670:	str	r2, [sp, #36]	; 0x24
   1a674:	str	r1, [sp, #32]
   1a678:	mov	r5, r0
   1a67c:	bl	11258 <__errno_location@plt>
   1a680:	cmp	r5, #0
   1a684:	bmi	1a7f4 <__assert_fail@plt+0x947c>
   1a688:	cmn	r5, #-2147483647	; 0x80000001
   1a68c:	beq	1a7f4 <__assert_fail@plt+0x947c>
   1a690:	movw	r4, #57632	; 0xe120
   1a694:	movt	r4, #2
   1a698:	ldr	r6, [r4]
   1a69c:	str	r0, [sp, #28]
   1a6a0:	ldr	r0, [r0]
   1a6a4:	str	r0, [sp, #24]
   1a6a8:	movw	r8, #57636	; 0xe124
   1a6ac:	movt	r8, #2
   1a6b0:	ldr	r1, [r8]
   1a6b4:	cmp	r1, r5
   1a6b8:	ble	1a6c4 <__assert_fail@plt+0x934c>
   1a6bc:	mov	sl, r6
   1a6c0:	b	1a730 <__assert_fail@plt+0x93b8>
   1a6c4:	str	r1, [fp, #-32]	; 0xffffffe0
   1a6c8:	mov	r0, #8
   1a6cc:	str	r0, [sp]
   1a6d0:	movw	r9, #57640	; 0xe128
   1a6d4:	movt	r9, #2
   1a6d8:	subs	r0, r6, r9
   1a6dc:	movne	r0, r6
   1a6e0:	sub	r1, r5, r1
   1a6e4:	add	r2, r1, #1
   1a6e8:	sub	r1, fp, #32
   1a6ec:	mvn	r3, #-2147483648	; 0x80000000
   1a6f0:	bl	1b4c8 <__assert_fail@plt+0xa150>
   1a6f4:	mov	sl, r0
   1a6f8:	str	r0, [r4]
   1a6fc:	cmp	r6, r9
   1a700:	bne	1a70c <__assert_fail@plt+0x9394>
   1a704:	ldrd	r0, [r9]
   1a708:	stm	sl, {r0, r1}
   1a70c:	ldr	r1, [r8]
   1a710:	add	r0, sl, r1, lsl #3
   1a714:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a718:	sub	r1, r2, r1
   1a71c:	lsl	r2, r1, #3
   1a720:	mov	r1, #0
   1a724:	bl	1127c <memset@plt>
   1a728:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a72c:	str	r0, [r8]
   1a730:	mov	r9, sl
   1a734:	ldr	r6, [r9, r5, lsl #3]!
   1a738:	ldr	r4, [r9, #4]!
   1a73c:	ldm	r7, {r0, r1}
   1a740:	ldr	r2, [r7, #40]	; 0x28
   1a744:	ldr	r3, [r7, #44]	; 0x2c
   1a748:	orr	r8, r1, #1
   1a74c:	add	r1, r7, #8
   1a750:	stm	sp, {r0, r8}
   1a754:	str	r1, [sp, #20]
   1a758:	add	r0, sp, #8
   1a75c:	stm	r0, {r1, r2, r3}
   1a760:	mov	r0, r4
   1a764:	mov	r1, r6
   1a768:	ldr	r2, [sp, #32]
   1a76c:	ldr	r3, [sp, #36]	; 0x24
   1a770:	bl	1950c <__assert_fail@plt+0x8194>
   1a774:	cmp	r6, r0
   1a778:	bhi	1a7dc <__assert_fail@plt+0x9464>
   1a77c:	add	r6, r0, #1
   1a780:	str	r6, [sl, r5, lsl #3]
   1a784:	movw	r0, #57824	; 0xe1e0
   1a788:	movt	r0, #2
   1a78c:	cmp	r4, r0
   1a790:	beq	1a79c <__assert_fail@plt+0x9424>
   1a794:	mov	r0, r4
   1a798:	bl	19200 <__assert_fail@plt+0x7e88>
   1a79c:	mov	r0, r6
   1a7a0:	bl	1b3ec <__assert_fail@plt+0xa074>
   1a7a4:	mov	r4, r0
   1a7a8:	str	r0, [r9]
   1a7ac:	ldr	r0, [r7]
   1a7b0:	ldr	r1, [r7, #40]	; 0x28
   1a7b4:	ldr	r2, [r7, #44]	; 0x2c
   1a7b8:	stm	sp, {r0, r8}
   1a7bc:	ldr	r0, [sp, #20]
   1a7c0:	add	r3, sp, #8
   1a7c4:	stm	r3, {r0, r1, r2}
   1a7c8:	mov	r0, r4
   1a7cc:	mov	r1, r6
   1a7d0:	ldr	r2, [sp, #32]
   1a7d4:	ldr	r3, [sp, #36]	; 0x24
   1a7d8:	bl	1950c <__assert_fail@plt+0x8194>
   1a7dc:	ldr	r0, [sp, #28]
   1a7e0:	ldr	r1, [sp, #24]
   1a7e4:	str	r1, [r0]
   1a7e8:	mov	r0, r4
   1a7ec:	sub	sp, fp, #28
   1a7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7f4:	bl	1133c <abort@plt>
   1a7f8:	movw	r3, #57776	; 0xe1b0
   1a7fc:	movt	r3, #2
   1a800:	b	1a660 <__assert_fail@plt+0x92e8>
   1a804:	mov	r1, r0
   1a808:	mov	r0, #0
   1a80c:	b	1a650 <__assert_fail@plt+0x92d8>
   1a810:	mov	r2, r1
   1a814:	mov	r1, r0
   1a818:	mov	r0, #0
   1a81c:	b	1a7f8 <__assert_fail@plt+0x9480>
   1a820:	push	{r4, r5, r6, sl, fp, lr}
   1a824:	add	fp, sp, #16
   1a828:	sub	sp, sp, #48	; 0x30
   1a82c:	mov	r4, r2
   1a830:	mov	r5, r0
   1a834:	mov	r6, sp
   1a838:	mov	r0, r6
   1a83c:	bl	1a85c <__assert_fail@plt+0x94e4>
   1a840:	mov	r0, r5
   1a844:	mov	r1, r4
   1a848:	mvn	r2, #0
   1a84c:	mov	r3, r6
   1a850:	bl	1a660 <__assert_fail@plt+0x92e8>
   1a854:	sub	sp, fp, #16
   1a858:	pop	{r4, r5, r6, sl, fp, pc}
   1a85c:	push	{fp, lr}
   1a860:	mov	fp, sp
   1a864:	vmov.i32	q8, #0	; 0x00000000
   1a868:	mov	r2, #32
   1a86c:	mov	r3, r0
   1a870:	vst1.32	{d16-d17}, [r3], r2
   1a874:	vst1.32	{d16-d17}, [r3]
   1a878:	add	r2, r0, #16
   1a87c:	vst1.32	{d16-d17}, [r2]
   1a880:	cmp	r1, #10
   1a884:	strne	r1, [r0]
   1a888:	popne	{fp, pc}
   1a88c:	bl	1133c <abort@plt>
   1a890:	push	{r4, r5, r6, r7, fp, lr}
   1a894:	add	fp, sp, #16
   1a898:	sub	sp, sp, #48	; 0x30
   1a89c:	mov	r4, r3
   1a8a0:	mov	r5, r2
   1a8a4:	mov	r6, r0
   1a8a8:	mov	r7, sp
   1a8ac:	mov	r0, r7
   1a8b0:	bl	1a85c <__assert_fail@plt+0x94e4>
   1a8b4:	mov	r0, r6
   1a8b8:	mov	r1, r5
   1a8bc:	mov	r2, r4
   1a8c0:	mov	r3, r7
   1a8c4:	bl	1a660 <__assert_fail@plt+0x92e8>
   1a8c8:	sub	sp, fp, #16
   1a8cc:	pop	{r4, r5, r6, r7, fp, pc}
   1a8d0:	mov	r2, r1
   1a8d4:	mov	r1, r0
   1a8d8:	mov	r0, #0
   1a8dc:	b	1a820 <__assert_fail@plt+0x94a8>
   1a8e0:	mov	r3, r2
   1a8e4:	mov	r2, r1
   1a8e8:	mov	r1, r0
   1a8ec:	mov	r0, #0
   1a8f0:	b	1a890 <__assert_fail@plt+0x9518>
   1a8f4:	push	{r4, r5, r6, sl, fp, lr}
   1a8f8:	add	fp, sp, #16
   1a8fc:	sub	sp, sp, #48	; 0x30
   1a900:	mov	r4, r1
   1a904:	mov	r5, r0
   1a908:	movw	r0, #57776	; 0xe1b0
   1a90c:	movt	r0, #2
   1a910:	add	r1, r0, #16
   1a914:	mov	r3, #32
   1a918:	vld1.64	{d16-d17}, [r0], r3
   1a91c:	vld1.64	{d18-d19}, [r1]
   1a920:	mov	r6, sp
   1a924:	add	r1, r6, #16
   1a928:	vld1.64	{d20-d21}, [r0]
   1a92c:	vst1.64	{d18-d19}, [r1]
   1a930:	mov	r0, r6
   1a934:	vst1.64	{d16-d17}, [r0], r3
   1a938:	vst1.64	{d20-d21}, [r0]
   1a93c:	mov	r0, r6
   1a940:	mov	r1, r2
   1a944:	mov	r2, #1
   1a948:	bl	19400 <__assert_fail@plt+0x8088>
   1a94c:	mov	r0, #0
   1a950:	mov	r1, r5
   1a954:	mov	r2, r4
   1a958:	mov	r3, r6
   1a95c:	bl	1a660 <__assert_fail@plt+0x92e8>
   1a960:	sub	sp, fp, #16
   1a964:	pop	{r4, r5, r6, sl, fp, pc}
   1a968:	mov	r2, r1
   1a96c:	mvn	r1, #0
   1a970:	b	1a8f4 <__assert_fail@plt+0x957c>
   1a974:	mov	r1, #58	; 0x3a
   1a978:	b	1a968 <__assert_fail@plt+0x95f0>
   1a97c:	mov	r2, #58	; 0x3a
   1a980:	b	1a8f4 <__assert_fail@plt+0x957c>
   1a984:	push	{r4, r5, r6, sl, fp, lr}
   1a988:	add	fp, sp, #16
   1a98c:	sub	sp, sp, #48	; 0x30
   1a990:	mov	r4, r2
   1a994:	mov	r5, r0
   1a998:	mov	r6, sp
   1a99c:	mov	r0, r6
   1a9a0:	bl	1a85c <__assert_fail@plt+0x94e4>
   1a9a4:	mov	r0, r6
   1a9a8:	mov	r1, #58	; 0x3a
   1a9ac:	mov	r2, #1
   1a9b0:	bl	19400 <__assert_fail@plt+0x8088>
   1a9b4:	mov	r0, r5
   1a9b8:	mov	r1, r4
   1a9bc:	mvn	r2, #0
   1a9c0:	mov	r3, r6
   1a9c4:	bl	1a660 <__assert_fail@plt+0x92e8>
   1a9c8:	sub	sp, fp, #16
   1a9cc:	pop	{r4, r5, r6, sl, fp, pc}
   1a9d0:	push	{fp, lr}
   1a9d4:	mov	fp, sp
   1a9d8:	sub	sp, sp, #8
   1a9dc:	mvn	ip, #0
   1a9e0:	str	ip, [sp]
   1a9e4:	bl	1a9f0 <__assert_fail@plt+0x9678>
   1a9e8:	mov	sp, fp
   1a9ec:	pop	{fp, pc}
   1a9f0:	push	{r4, r5, r6, r7, fp, lr}
   1a9f4:	add	fp, sp, #16
   1a9f8:	sub	sp, sp, #48	; 0x30
   1a9fc:	mov	r7, r3
   1aa00:	mov	r5, r0
   1aa04:	movw	r0, #57776	; 0xe1b0
   1aa08:	movt	r0, #2
   1aa0c:	add	r3, r0, #16
   1aa10:	mov	r4, #32
   1aa14:	vld1.64	{d16-d17}, [r0], r4
   1aa18:	vld1.64	{d18-d19}, [r3]
   1aa1c:	mov	r6, sp
   1aa20:	add	r3, r6, #16
   1aa24:	vld1.64	{d20-d21}, [r0]
   1aa28:	vst1.64	{d18-d19}, [r3]
   1aa2c:	mov	r0, r6
   1aa30:	vst1.64	{d16-d17}, [r0], r4
   1aa34:	vst1.64	{d20-d21}, [r0]
   1aa38:	mov	r0, r6
   1aa3c:	bl	19458 <__assert_fail@plt+0x80e0>
   1aa40:	ldr	r2, [fp, #8]
   1aa44:	mov	r0, r5
   1aa48:	mov	r1, r7
   1aa4c:	mov	r3, r6
   1aa50:	bl	1a660 <__assert_fail@plt+0x92e8>
   1aa54:	sub	sp, fp, #16
   1aa58:	pop	{r4, r5, r6, r7, fp, pc}
   1aa5c:	mov	r3, r2
   1aa60:	mov	r2, r1
   1aa64:	mov	r1, r0
   1aa68:	mov	r0, #0
   1aa6c:	b	1a9d0 <__assert_fail@plt+0x9658>
   1aa70:	push	{fp, lr}
   1aa74:	mov	fp, sp
   1aa78:	sub	sp, sp, #8
   1aa7c:	mov	ip, r2
   1aa80:	mov	r2, r1
   1aa84:	mov	r1, r0
   1aa88:	str	r3, [sp]
   1aa8c:	mov	r0, #0
   1aa90:	mov	r3, ip
   1aa94:	bl	1a9f0 <__assert_fail@plt+0x9678>
   1aa98:	mov	sp, fp
   1aa9c:	pop	{fp, pc}
   1aaa0:	movw	r3, #57648	; 0xe130
   1aaa4:	movt	r3, #2
   1aaa8:	b	1a660 <__assert_fail@plt+0x92e8>
   1aaac:	mov	r2, r1
   1aab0:	mov	r1, r0
   1aab4:	mov	r0, #0
   1aab8:	b	1aaa0 <__assert_fail@plt+0x9728>
   1aabc:	mvn	r2, #0
   1aac0:	b	1aaa0 <__assert_fail@plt+0x9728>
   1aac4:	mov	r1, r0
   1aac8:	mov	r0, #0
   1aacc:	b	1aabc <__assert_fail@plt+0x9744>
   1aad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aad4:	add	fp, sp, #24
   1aad8:	sub	sp, sp, #16
   1aadc:	mov	r4, r1
   1aae0:	mov	r5, r0
   1aae4:	mov	r7, #0
   1aae8:	mov	r0, #0
   1aaec:	mov	r1, r5
   1aaf0:	mov	r2, #5
   1aaf4:	bl	11138 <dcgettext@plt>
   1aaf8:	cmp	r0, r5
   1aafc:	beq	1ab08 <__assert_fail@plt+0x9790>
   1ab00:	sub	sp, fp, #24
   1ab04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab08:	bl	1c464 <__assert_fail@plt+0xb0ec>
   1ab0c:	mov	r6, r0
   1ab10:	mov	r8, #56	; 0x38
   1ab14:	mov	r0, #45	; 0x2d
   1ab18:	stm	sp, {r0, r8}
   1ab1c:	str	r7, [sp, #8]
   1ab20:	str	r7, [sp, #12]
   1ab24:	mov	r0, r6
   1ab28:	mov	r1, #85	; 0x55
   1ab2c:	mov	r2, #84	; 0x54
   1ab30:	mov	r3, #70	; 0x46
   1ab34:	bl	1abcc <__assert_fail@plt+0x9854>
   1ab38:	cmp	r0, #0
   1ab3c:	beq	1ab58 <__assert_fail@plt+0x97e0>
   1ab40:	ldrb	r1, [r5]
   1ab44:	movw	r2, #55132	; 0xd75c
   1ab48:	movt	r2, #1
   1ab4c:	movw	r0, #55136	; 0xd760
   1ab50:	movt	r0, #1
   1ab54:	b	1ab9c <__assert_fail@plt+0x9824>
   1ab58:	mov	r0, #48	; 0x30
   1ab5c:	mov	r1, #51	; 0x33
   1ab60:	str	r8, [sp]
   1ab64:	stmib	sp, {r0, r1}
   1ab68:	str	r0, [sp, #12]
   1ab6c:	mov	r0, r6
   1ab70:	mov	r1, #71	; 0x47
   1ab74:	mov	r2, #66	; 0x42
   1ab78:	mov	r3, #49	; 0x31
   1ab7c:	bl	1abcc <__assert_fail@plt+0x9854>
   1ab80:	cmp	r0, #0
   1ab84:	beq	1abac <__assert_fail@plt+0x9834>
   1ab88:	ldrb	r1, [r5]
   1ab8c:	movw	r2, #55140	; 0xd764
   1ab90:	movt	r2, #1
   1ab94:	movw	r0, #55144	; 0xd768
   1ab98:	movt	r0, #1
   1ab9c:	cmp	r1, #96	; 0x60
   1aba0:	moveq	r0, r2
   1aba4:	sub	sp, fp, #24
   1aba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abac:	movw	r1, #55126	; 0xd756
   1abb0:	movt	r1, #1
   1abb4:	movw	r0, #55130	; 0xd75a
   1abb8:	movt	r0, #1
   1abbc:	cmp	r4, #9
   1abc0:	moveq	r0, r1
   1abc4:	sub	sp, fp, #24
   1abc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abcc:	push	{r4, r5, r6, r7, fp, lr}
   1abd0:	add	fp, sp, #16
   1abd4:	sub	sp, sp, #16
   1abd8:	mov	r4, r3
   1abdc:	mov	r5, r2
   1abe0:	mov	r7, r1
   1abe4:	mov	r6, r0
   1abe8:	mov	r0, r1
   1abec:	bl	1c13c <__assert_fail@plt+0xadc4>
   1abf0:	ldrb	r1, [r6]
   1abf4:	cmp	r0, #0
   1abf8:	andne	r1, r1, #223	; 0xdf
   1abfc:	mov	r0, #0
   1ac00:	cmp	r1, r7
   1ac04:	bne	1ac3c <__assert_fail@plt+0x98c4>
   1ac08:	cmp	r7, #0
   1ac0c:	beq	1ac44 <__assert_fail@plt+0x98cc>
   1ac10:	ldr	r0, [fp, #20]
   1ac14:	ldr	r1, [fp, #16]
   1ac18:	ldr	r2, [fp, #12]
   1ac1c:	ldr	r3, [fp, #8]
   1ac20:	str	r2, [sp]
   1ac24:	str	r1, [sp, #4]
   1ac28:	str	r0, [sp, #8]
   1ac2c:	mov	r0, r6
   1ac30:	mov	r1, r5
   1ac34:	mov	r2, r4
   1ac38:	bl	1ac50 <__assert_fail@plt+0x98d8>
   1ac3c:	sub	sp, fp, #16
   1ac40:	pop	{r4, r5, r6, r7, fp, pc}
   1ac44:	mov	r0, #1
   1ac48:	sub	sp, fp, #16
   1ac4c:	pop	{r4, r5, r6, r7, fp, pc}
   1ac50:	push	{r4, r5, r6, r7, fp, lr}
   1ac54:	add	fp, sp, #16
   1ac58:	sub	sp, sp, #8
   1ac5c:	mov	r4, r3
   1ac60:	mov	r5, r2
   1ac64:	mov	r7, r1
   1ac68:	mov	r6, r0
   1ac6c:	mov	r0, r1
   1ac70:	bl	1c13c <__assert_fail@plt+0xadc4>
   1ac74:	ldrb	r1, [r6, #1]
   1ac78:	cmp	r0, #0
   1ac7c:	andne	r1, r1, #223	; 0xdf
   1ac80:	mov	r0, #0
   1ac84:	cmp	r1, r7
   1ac88:	bne	1acb8 <__assert_fail@plt+0x9940>
   1ac8c:	cmp	r7, #0
   1ac90:	beq	1acc0 <__assert_fail@plt+0x9948>
   1ac94:	ldr	r0, [fp, #16]
   1ac98:	ldr	r1, [fp, #12]
   1ac9c:	ldr	r3, [fp, #8]
   1aca0:	str	r1, [sp]
   1aca4:	str	r0, [sp, #4]
   1aca8:	mov	r0, r6
   1acac:	mov	r1, r5
   1acb0:	mov	r2, r4
   1acb4:	bl	1accc <__assert_fail@plt+0x9954>
   1acb8:	sub	sp, fp, #16
   1acbc:	pop	{r4, r5, r6, r7, fp, pc}
   1acc0:	mov	r0, #1
   1acc4:	sub	sp, fp, #16
   1acc8:	pop	{r4, r5, r6, r7, fp, pc}
   1accc:	push	{r4, r5, r6, r7, fp, lr}
   1acd0:	add	fp, sp, #16
   1acd4:	sub	sp, sp, #8
   1acd8:	mov	r4, r3
   1acdc:	mov	r5, r2
   1ace0:	mov	r7, r1
   1ace4:	mov	r6, r0
   1ace8:	mov	r0, r1
   1acec:	bl	1c13c <__assert_fail@plt+0xadc4>
   1acf0:	ldrb	r1, [r6, #2]
   1acf4:	cmp	r0, #0
   1acf8:	andne	r1, r1, #223	; 0xdf
   1acfc:	mov	r0, #0
   1ad00:	cmp	r1, r7
   1ad04:	bne	1ad2c <__assert_fail@plt+0x99b4>
   1ad08:	cmp	r7, #0
   1ad0c:	beq	1ad34 <__assert_fail@plt+0x99bc>
   1ad10:	ldr	r0, [fp, #12]
   1ad14:	ldr	r3, [fp, #8]
   1ad18:	str	r0, [sp]
   1ad1c:	mov	r0, r6
   1ad20:	mov	r1, r5
   1ad24:	mov	r2, r4
   1ad28:	bl	1ad40 <__assert_fail@plt+0x99c8>
   1ad2c:	sub	sp, fp, #16
   1ad30:	pop	{r4, r5, r6, r7, fp, pc}
   1ad34:	mov	r0, #1
   1ad38:	sub	sp, fp, #16
   1ad3c:	pop	{r4, r5, r6, r7, fp, pc}
   1ad40:	push	{r4, r5, r6, r7, fp, lr}
   1ad44:	add	fp, sp, #16
   1ad48:	mov	r4, r3
   1ad4c:	mov	r5, r2
   1ad50:	mov	r7, r1
   1ad54:	mov	r6, r0
   1ad58:	mov	r0, r1
   1ad5c:	bl	1c13c <__assert_fail@plt+0xadc4>
   1ad60:	ldrb	r1, [r6, #3]
   1ad64:	ldr	r3, [fp, #8]
   1ad68:	cmp	r0, #0
   1ad6c:	andne	r1, r1, #223	; 0xdf
   1ad70:	mov	r0, #0
   1ad74:	cmp	r1, r7
   1ad78:	bne	1ad9c <__assert_fail@plt+0x9a24>
   1ad7c:	cmp	r7, #0
   1ad80:	beq	1ad98 <__assert_fail@plt+0x9a20>
   1ad84:	mov	r0, r6
   1ad88:	mov	r1, r5
   1ad8c:	mov	r2, r4
   1ad90:	pop	{r4, r5, r6, r7, fp, lr}
   1ad94:	b	1ada0 <__assert_fail@plt+0x9a28>
   1ad98:	mov	r0, #1
   1ad9c:	pop	{r4, r5, r6, r7, fp, pc}
   1ada0:	push	{r4, r5, r6, r7, fp, lr}
   1ada4:	add	fp, sp, #16
   1ada8:	mov	r4, r3
   1adac:	mov	r5, r2
   1adb0:	mov	r7, r1
   1adb4:	mov	r6, r0
   1adb8:	mov	r0, r1
   1adbc:	bl	1c13c <__assert_fail@plt+0xadc4>
   1adc0:	ldrb	r1, [r6, #4]
   1adc4:	cmp	r0, #0
   1adc8:	andne	r1, r1, #223	; 0xdf
   1adcc:	mov	r0, #0
   1add0:	cmp	r1, r7
   1add4:	bne	1adf8 <__assert_fail@plt+0x9a80>
   1add8:	cmp	r7, #0
   1addc:	beq	1adf4 <__assert_fail@plt+0x9a7c>
   1ade0:	mov	r0, r6
   1ade4:	mov	r1, r5
   1ade8:	mov	r2, r4
   1adec:	pop	{r4, r5, r6, r7, fp, lr}
   1adf0:	b	1adfc <__assert_fail@plt+0x9a84>
   1adf4:	mov	r0, #1
   1adf8:	pop	{r4, r5, r6, r7, fp, pc}
   1adfc:	push	{r4, r5, r6, sl, fp, lr}
   1ae00:	add	fp, sp, #16
   1ae04:	mov	r4, r2
   1ae08:	mov	r6, r1
   1ae0c:	mov	r5, r0
   1ae10:	mov	r0, r1
   1ae14:	bl	1c13c <__assert_fail@plt+0xadc4>
   1ae18:	ldrb	r1, [r5, #5]
   1ae1c:	cmp	r0, #0
   1ae20:	andne	r1, r1, #223	; 0xdf
   1ae24:	mov	r0, #0
   1ae28:	cmp	r1, r6
   1ae2c:	bne	1ae4c <__assert_fail@plt+0x9ad4>
   1ae30:	cmp	r6, #0
   1ae34:	beq	1ae48 <__assert_fail@plt+0x9ad0>
   1ae38:	mov	r0, r5
   1ae3c:	mov	r1, r4
   1ae40:	pop	{r4, r5, r6, sl, fp, lr}
   1ae44:	b	1ae50 <__assert_fail@plt+0x9ad8>
   1ae48:	mov	r0, #1
   1ae4c:	pop	{r4, r5, r6, sl, fp, pc}
   1ae50:	push	{r4, r5, fp, lr}
   1ae54:	add	fp, sp, #8
   1ae58:	mov	r5, r1
   1ae5c:	mov	r4, r0
   1ae60:	mov	r0, r1
   1ae64:	bl	1c13c <__assert_fail@plt+0xadc4>
   1ae68:	ldrb	r1, [r4, #6]
   1ae6c:	cmp	r0, #0
   1ae70:	andne	r1, r1, #223	; 0xdf
   1ae74:	mov	r0, #0
   1ae78:	cmp	r1, r5
   1ae7c:	popne	{r4, r5, fp, pc}
   1ae80:	cmp	r5, #0
   1ae84:	beq	1ae94 <__assert_fail@plt+0x9b1c>
   1ae88:	mov	r0, r4
   1ae8c:	pop	{r4, r5, fp, lr}
   1ae90:	b	1ae9c <__assert_fail@plt+0x9b24>
   1ae94:	mov	r0, #1
   1ae98:	pop	{r4, r5, fp, pc}
   1ae9c:	push	{r4, sl, fp, lr}
   1aea0:	add	fp, sp, #8
   1aea4:	mov	r4, r0
   1aea8:	mov	r0, #0
   1aeac:	bl	1c13c <__assert_fail@plt+0xadc4>
   1aeb0:	ldrb	r1, [r4, #7]
   1aeb4:	cmp	r0, #0
   1aeb8:	beq	1aecc <__assert_fail@plt+0x9b54>
   1aebc:	tst	r1, #223	; 0xdf
   1aec0:	bne	1aed4 <__assert_fail@plt+0x9b5c>
   1aec4:	mov	r0, #1
   1aec8:	pop	{r4, sl, fp, pc}
   1aecc:	cmp	r1, #0
   1aed0:	beq	1aec4 <__assert_fail@plt+0x9b4c>
   1aed4:	mov	r0, #0
   1aed8:	pop	{r4, sl, fp, pc}
   1aedc:	mov	r1, #0
   1aee0:	mov	r2, #3
   1aee4:	b	1c230 <__assert_fail@plt+0xaeb8>
   1aee8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aeec:	add	fp, sp, #24
   1aef0:	sub	sp, sp, #32
   1aef4:	mov	r4, r2
   1aef8:	mov	r8, r0
   1aefc:	ldr	r6, [fp, #12]
   1af00:	ldr	r7, [fp, #8]
   1af04:	cmp	r1, #0
   1af08:	beq	1af30 <__assert_fail@plt+0x9bb8>
   1af0c:	mov	r5, r1
   1af10:	str	r4, [sp]
   1af14:	str	r3, [sp, #4]
   1af18:	movw	r2, #55232	; 0xd7c0
   1af1c:	movt	r2, #1
   1af20:	mov	r0, r8
   1af24:	mov	r1, #1
   1af28:	mov	r3, r5
   1af2c:	b	1af48 <__assert_fail@plt+0x9bd0>
   1af30:	str	r3, [sp]
   1af34:	movw	r2, #55244	; 0xd7cc
   1af38:	movt	r2, #1
   1af3c:	mov	r0, r8
   1af40:	mov	r1, #1
   1af44:	mov	r3, r4
   1af48:	bl	112ac <__fprintf_chk@plt>
   1af4c:	movw	r1, #55251	; 0xd7d3
   1af50:	movt	r1, #1
   1af54:	mov	r0, #0
   1af58:	mov	r2, #5
   1af5c:	bl	11138 <dcgettext@plt>
   1af60:	mov	r3, r0
   1af64:	movw	r0, #2022	; 0x7e6
   1af68:	str	r0, [sp]
   1af6c:	movw	r2, #55969	; 0xdaa1
   1af70:	movt	r2, #1
   1af74:	mov	r0, r8
   1af78:	mov	r1, #1
   1af7c:	bl	112ac <__fprintf_chk@plt>
   1af80:	movw	r4, #52330	; 0xcc6a
   1af84:	movt	r4, #1
   1af88:	mov	r0, r4
   1af8c:	mov	r1, r8
   1af90:	bl	110c0 <fputs_unlocked@plt>
   1af94:	movw	r1, #55255	; 0xd7d7
   1af98:	movt	r1, #1
   1af9c:	mov	r0, #0
   1afa0:	mov	r2, #5
   1afa4:	bl	11138 <dcgettext@plt>
   1afa8:	mov	r2, r0
   1afac:	movw	r3, #55426	; 0xd882
   1afb0:	movt	r3, #1
   1afb4:	mov	r0, r8
   1afb8:	mov	r1, #1
   1afbc:	bl	112ac <__fprintf_chk@plt>
   1afc0:	mov	r0, r4
   1afc4:	mov	r1, r8
   1afc8:	bl	110c0 <fputs_unlocked@plt>
   1afcc:	cmp	r6, #9
   1afd0:	bhi	1b00c <__assert_fail@plt+0x9c94>
   1afd4:	add	r0, pc, #0
   1afd8:	ldr	pc, [r0, r6, lsl #2]
   1afdc:	andeq	fp, r1, r4
   1afe0:	andeq	fp, r1, r8, lsl r0
   1afe4:	andeq	fp, r1, r8, asr #32
   1afe8:	andeq	fp, r1, r0, ror r0
   1afec:	muleq	r1, r8, r0
   1aff0:	andeq	fp, r1, r0, asr #1
   1aff4:	andeq	fp, r1, r8, ror #1
   1aff8:	andeq	fp, r1, r0, lsr #2
   1affc:	andeq	fp, r1, r0, asr #3
   1b000:	andeq	fp, r1, r8, ror #2
   1b004:	sub	sp, fp, #24
   1b008:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b00c:	movw	r1, #55779	; 0xd9e3
   1b010:	movt	r1, #1
   1b014:	b	1b170 <__assert_fail@plt+0x9df8>
   1b018:	movw	r1, #55460	; 0xd8a4
   1b01c:	movt	r1, #1
   1b020:	mov	r0, #0
   1b024:	mov	r2, #5
   1b028:	bl	11138 <dcgettext@plt>
   1b02c:	mov	r2, r0
   1b030:	ldr	r3, [r7]
   1b034:	mov	r0, r8
   1b038:	mov	r1, #1
   1b03c:	sub	sp, fp, #24
   1b040:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b044:	b	112ac <__fprintf_chk@plt>
   1b048:	movw	r1, #55476	; 0xd8b4
   1b04c:	movt	r1, #1
   1b050:	mov	r0, #0
   1b054:	mov	r2, #5
   1b058:	bl	11138 <dcgettext@plt>
   1b05c:	mov	r2, r0
   1b060:	ldr	r3, [r7]
   1b064:	ldr	r0, [r7, #4]
   1b068:	str	r0, [sp]
   1b06c:	b	1b15c <__assert_fail@plt+0x9de4>
   1b070:	movw	r1, #55499	; 0xd8cb
   1b074:	movt	r1, #1
   1b078:	mov	r0, #0
   1b07c:	mov	r2, #5
   1b080:	bl	11138 <dcgettext@plt>
   1b084:	mov	r2, r0
   1b088:	ldr	r3, [r7]
   1b08c:	ldmib	r7, {r0, r1}
   1b090:	stm	sp, {r0, r1}
   1b094:	b	1b15c <__assert_fail@plt+0x9de4>
   1b098:	movw	r1, #55527	; 0xd8e7
   1b09c:	movt	r1, #1
   1b0a0:	mov	r0, #0
   1b0a4:	mov	r2, #5
   1b0a8:	bl	11138 <dcgettext@plt>
   1b0ac:	mov	r2, r0
   1b0b0:	ldr	r3, [r7]
   1b0b4:	ldmib	r7, {r0, r1, r7}
   1b0b8:	stm	sp, {r0, r1, r7}
   1b0bc:	b	1b15c <__assert_fail@plt+0x9de4>
   1b0c0:	movw	r1, #55559	; 0xd907
   1b0c4:	movt	r1, #1
   1b0c8:	mov	r0, #0
   1b0cc:	mov	r2, #5
   1b0d0:	bl	11138 <dcgettext@plt>
   1b0d4:	mov	r2, r0
   1b0d8:	ldr	r3, [r7]
   1b0dc:	ldmib	r7, {r0, r1, r6, r7}
   1b0e0:	stm	sp, {r0, r1, r6, r7}
   1b0e4:	b	1b15c <__assert_fail@plt+0x9de4>
   1b0e8:	movw	r1, #55595	; 0xd92b
   1b0ec:	movt	r1, #1
   1b0f0:	mov	r0, #0
   1b0f4:	mov	r2, #5
   1b0f8:	bl	11138 <dcgettext@plt>
   1b0fc:	mov	r2, r0
   1b100:	ldr	r3, [r7]
   1b104:	ldmib	r7, {r0, r1, r6}
   1b108:	ldr	r5, [r7, #16]
   1b10c:	ldr	r7, [r7, #20]
   1b110:	stm	sp, {r0, r1, r6}
   1b114:	str	r5, [sp, #12]
   1b118:	str	r7, [sp, #16]
   1b11c:	b	1b15c <__assert_fail@plt+0x9de4>
   1b120:	movw	r1, #55635	; 0xd953
   1b124:	movt	r1, #1
   1b128:	mov	r0, #0
   1b12c:	mov	r2, #5
   1b130:	bl	11138 <dcgettext@plt>
   1b134:	mov	r2, r0
   1b138:	ldr	r3, [r7]
   1b13c:	ldmib	r7, {r0, r1, r6}
   1b140:	ldr	r5, [r7, #16]
   1b144:	ldr	r4, [r7, #20]
   1b148:	ldr	r7, [r7, #24]
   1b14c:	stm	sp, {r0, r1, r6}
   1b150:	str	r5, [sp, #12]
   1b154:	str	r4, [sp, #16]
   1b158:	str	r7, [sp, #20]
   1b15c:	mov	r0, r8
   1b160:	mov	r1, #1
   1b164:	b	1b210 <__assert_fail@plt+0x9e98>
   1b168:	movw	r1, #55727	; 0xd9af
   1b16c:	movt	r1, #1
   1b170:	mov	r0, #0
   1b174:	mov	r2, #5
   1b178:	bl	11138 <dcgettext@plt>
   1b17c:	mov	ip, r0
   1b180:	ldr	r3, [r7]
   1b184:	ldr	r0, [r7, #4]
   1b188:	ldr	r1, [r7, #8]
   1b18c:	ldr	r6, [r7, #12]
   1b190:	ldr	r5, [r7, #16]
   1b194:	ldr	r4, [r7, #20]
   1b198:	ldr	r2, [r7, #24]
   1b19c:	ldr	lr, [r7, #28]
   1b1a0:	ldr	r7, [r7, #32]
   1b1a4:	stm	sp, {r0, r1, r6}
   1b1a8:	str	r5, [sp, #12]
   1b1ac:	str	r4, [sp, #16]
   1b1b0:	str	r2, [sp, #20]
   1b1b4:	str	lr, [sp, #24]
   1b1b8:	str	r7, [sp, #28]
   1b1bc:	b	1b204 <__assert_fail@plt+0x9e8c>
   1b1c0:	movw	r1, #55679	; 0xd97f
   1b1c4:	movt	r1, #1
   1b1c8:	mov	r0, #0
   1b1cc:	mov	r2, #5
   1b1d0:	bl	11138 <dcgettext@plt>
   1b1d4:	mov	ip, r0
   1b1d8:	ldr	r3, [r7]
   1b1dc:	ldmib	r7, {r0, r1, r6}
   1b1e0:	ldr	r5, [r7, #16]
   1b1e4:	ldr	r4, [r7, #20]
   1b1e8:	ldr	r2, [r7, #24]
   1b1ec:	ldr	r7, [r7, #28]
   1b1f0:	stm	sp, {r0, r1, r6}
   1b1f4:	str	r5, [sp, #12]
   1b1f8:	str	r4, [sp, #16]
   1b1fc:	str	r2, [sp, #20]
   1b200:	str	r7, [sp, #24]
   1b204:	mov	r0, r8
   1b208:	mov	r1, #1
   1b20c:	mov	r2, ip
   1b210:	bl	112ac <__fprintf_chk@plt>
   1b214:	sub	sp, fp, #24
   1b218:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b21c:	push	{r4, sl, fp, lr}
   1b220:	add	fp, sp, #8
   1b224:	sub	sp, sp, #8
   1b228:	mov	lr, #0
   1b22c:	ldr	ip, [fp, #8]
   1b230:	ldr	r4, [ip, lr, lsl #2]
   1b234:	add	lr, lr, #1
   1b238:	cmp	r4, #0
   1b23c:	bne	1b230 <__assert_fail@plt+0x9eb8>
   1b240:	sub	r4, lr, #1
   1b244:	str	ip, [sp]
   1b248:	str	r4, [sp, #4]
   1b24c:	bl	1aee8 <__assert_fail@plt+0x9b70>
   1b250:	sub	sp, fp, #8
   1b254:	pop	{r4, sl, fp, pc}
   1b258:	push	{r4, r5, fp, lr}
   1b25c:	add	fp, sp, #8
   1b260:	sub	sp, sp, #48	; 0x30
   1b264:	mov	ip, #0
   1b268:	ldr	r4, [fp, #8]
   1b26c:	add	lr, sp, #8
   1b270:	ldr	r5, [r4]
   1b274:	str	r5, [lr, ip, lsl #2]
   1b278:	cmp	r5, #0
   1b27c:	beq	1b294 <__assert_fail@plt+0x9f1c>
   1b280:	add	ip, ip, #1
   1b284:	add	r4, r4, #4
   1b288:	cmp	ip, #10
   1b28c:	bne	1b270 <__assert_fail@plt+0x9ef8>
   1b290:	mov	ip, #10
   1b294:	str	lr, [sp]
   1b298:	str	ip, [sp, #4]
   1b29c:	bl	1aee8 <__assert_fail@plt+0x9b70>
   1b2a0:	sub	sp, fp, #8
   1b2a4:	pop	{r4, r5, fp, pc}
   1b2a8:	push	{fp, lr}
   1b2ac:	mov	fp, sp
   1b2b0:	sub	sp, sp, #8
   1b2b4:	add	ip, fp, #8
   1b2b8:	str	ip, [sp, #4]
   1b2bc:	str	ip, [sp]
   1b2c0:	bl	1b258 <__assert_fail@plt+0x9ee0>
   1b2c4:	mov	sp, fp
   1b2c8:	pop	{fp, pc}
   1b2cc:	push	{fp, lr}
   1b2d0:	mov	fp, sp
   1b2d4:	movw	r0, #57724	; 0xe17c
   1b2d8:	movt	r0, #2
   1b2dc:	ldr	r1, [r0]
   1b2e0:	movw	r0, #52330	; 0xcc6a
   1b2e4:	movt	r0, #1
   1b2e8:	bl	110c0 <fputs_unlocked@plt>
   1b2ec:	movw	r1, #55839	; 0xda1f
   1b2f0:	movt	r1, #1
   1b2f4:	mov	r0, #0
   1b2f8:	mov	r2, #5
   1b2fc:	bl	11138 <dcgettext@plt>
   1b300:	mov	r1, r0
   1b304:	movw	r2, #55859	; 0xda33
   1b308:	movt	r2, #1
   1b30c:	mov	r0, #1
   1b310:	bl	11288 <__printf_chk@plt>
   1b314:	movw	r1, #55881	; 0xda49
   1b318:	movt	r1, #1
   1b31c:	mov	r0, #0
   1b320:	mov	r2, #5
   1b324:	bl	11138 <dcgettext@plt>
   1b328:	mov	r1, r0
   1b32c:	movw	r2, #52919	; 0xceb7
   1b330:	movt	r2, #1
   1b334:	movw	r3, #53814	; 0xd236
   1b338:	movt	r3, #1
   1b33c:	mov	r0, #1
   1b340:	bl	11288 <__printf_chk@plt>
   1b344:	movw	r1, #55901	; 0xda5d
   1b348:	movt	r1, #1
   1b34c:	mov	r0, #0
   1b350:	mov	r2, #5
   1b354:	bl	11138 <dcgettext@plt>
   1b358:	mov	r1, r0
   1b35c:	movw	r2, #55940	; 0xda84
   1b360:	movt	r2, #1
   1b364:	mov	r0, #1
   1b368:	pop	{fp, lr}
   1b36c:	b	11288 <__printf_chk@plt>
   1b370:	b	1b374 <__assert_fail@plt+0x9ffc>
   1b374:	push	{r4, r5, r6, sl, fp, lr}
   1b378:	add	fp, sp, #16
   1b37c:	mov	r4, r2
   1b380:	mov	r5, r1
   1b384:	mov	r6, r0
   1b388:	bl	1c500 <__assert_fail@plt+0xb188>
   1b38c:	cmp	r0, #0
   1b390:	popne	{r4, r5, r6, sl, fp, pc}
   1b394:	cmp	r6, #0
   1b398:	beq	1b3ac <__assert_fail@plt+0xa034>
   1b39c:	cmp	r5, #0
   1b3a0:	cmpne	r4, #0
   1b3a4:	bne	1b3ac <__assert_fail@plt+0xa034>
   1b3a8:	pop	{r4, r5, r6, sl, fp, pc}
   1b3ac:	bl	1b738 <__assert_fail@plt+0xa3c0>
   1b3b0:	push	{fp, lr}
   1b3b4:	mov	fp, sp
   1b3b8:	bl	1be04 <__assert_fail@plt+0xaa8c>
   1b3bc:	pop	{fp, lr}
   1b3c0:	b	1b3c4 <__assert_fail@plt+0xa04c>
   1b3c4:	cmp	r0, #0
   1b3c8:	bxne	lr
   1b3cc:	push	{fp, lr}
   1b3d0:	mov	fp, sp
   1b3d4:	bl	1b738 <__assert_fail@plt+0xa3c0>
   1b3d8:	push	{fp, lr}
   1b3dc:	mov	fp, sp
   1b3e0:	bl	1c430 <__assert_fail@plt+0xb0b8>
   1b3e4:	pop	{fp, lr}
   1b3e8:	b	1b3c4 <__assert_fail@plt+0xa04c>
   1b3ec:	b	1b3b0 <__assert_fail@plt+0xa038>
   1b3f0:	push	{r4, r5, fp, lr}
   1b3f4:	add	fp, sp, #8
   1b3f8:	mov	r4, r1
   1b3fc:	mov	r5, r0
   1b400:	bl	1be34 <__assert_fail@plt+0xaabc>
   1b404:	cmp	r0, #0
   1b408:	popne	{r4, r5, fp, pc}
   1b40c:	cmp	r5, #0
   1b410:	beq	1b420 <__assert_fail@plt+0xa0a8>
   1b414:	cmp	r4, #0
   1b418:	bne	1b420 <__assert_fail@plt+0xa0a8>
   1b41c:	pop	{r4, r5, fp, pc}
   1b420:	bl	1b738 <__assert_fail@plt+0xa3c0>
   1b424:	push	{fp, lr}
   1b428:	mov	fp, sp
   1b42c:	bl	1c434 <__assert_fail@plt+0xb0bc>
   1b430:	pop	{fp, lr}
   1b434:	b	1b3c4 <__assert_fail@plt+0xa04c>
   1b438:	push	{fp, lr}
   1b43c:	mov	fp, sp
   1b440:	bl	1c444 <__assert_fail@plt+0xb0cc>
   1b444:	pop	{fp, lr}
   1b448:	b	1b3c4 <__assert_fail@plt+0xa04c>
   1b44c:	mov	r2, r1
   1b450:	mov	r1, r0
   1b454:	mov	r0, #0
   1b458:	b	1b374 <__assert_fail@plt+0x9ffc>
   1b45c:	mov	r2, r1
   1b460:	mov	r1, r0
   1b464:	mov	r0, #0
   1b468:	b	1b438 <__assert_fail@plt+0xa0c0>
   1b46c:	mov	r2, #1
   1b470:	b	1b474 <__assert_fail@plt+0xa0fc>
   1b474:	push	{r4, r5, fp, lr}
   1b478:	add	fp, sp, #8
   1b47c:	mov	r4, r1
   1b480:	ldr	r5, [r1]
   1b484:	cmp	r0, #0
   1b488:	beq	1b4a0 <__assert_fail@plt+0xa128>
   1b48c:	mov	r1, #1
   1b490:	add	r1, r1, r5, lsr #1
   1b494:	adds	r5, r5, r1
   1b498:	bcc	1b4b8 <__assert_fail@plt+0xa140>
   1b49c:	bl	1b738 <__assert_fail@plt+0xa3c0>
   1b4a0:	cmp	r5, #0
   1b4a4:	bne	1b4b8 <__assert_fail@plt+0xa140>
   1b4a8:	mov	r1, #64	; 0x40
   1b4ac:	udiv	r5, r1, r2
   1b4b0:	cmp	r2, #64	; 0x40
   1b4b4:	addhi	r5, r5, #1
   1b4b8:	mov	r1, r5
   1b4bc:	bl	1b374 <__assert_fail@plt+0x9ffc>
   1b4c0:	str	r5, [r4]
   1b4c4:	pop	{r4, r5, fp, pc}
   1b4c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b4cc:	add	fp, sp, #24
   1b4d0:	mov	r8, r1
   1b4d4:	ldr	r6, [r1]
   1b4d8:	add	r1, r6, r6, asr #1
   1b4dc:	cmp	r1, r6
   1b4e0:	mvnvs	r1, #-2147483648	; 0x80000000
   1b4e4:	cmp	r1, r3
   1b4e8:	mov	r5, r1
   1b4ec:	movgt	r5, r3
   1b4f0:	cmn	r3, #1
   1b4f4:	movle	r5, r1
   1b4f8:	ldr	r4, [fp, #8]
   1b4fc:	cmn	r4, #1
   1b500:	ble	1b528 <__assert_fail@plt+0xa1b0>
   1b504:	cmp	r4, #0
   1b508:	beq	1b57c <__assert_fail@plt+0xa204>
   1b50c:	cmn	r5, #1
   1b510:	ble	1b550 <__assert_fail@plt+0xa1d8>
   1b514:	mvn	r7, #-2147483648	; 0x80000000
   1b518:	udiv	r1, r7, r4
   1b51c:	cmp	r1, r5
   1b520:	bge	1b57c <__assert_fail@plt+0xa204>
   1b524:	b	1b58c <__assert_fail@plt+0xa214>
   1b528:	cmn	r5, #1
   1b52c:	ble	1b56c <__assert_fail@plt+0xa1f4>
   1b530:	cmn	r4, #1
   1b534:	beq	1b57c <__assert_fail@plt+0xa204>
   1b538:	mov	r1, #-2147483648	; 0x80000000
   1b53c:	sdiv	r1, r1, r4
   1b540:	mvn	r7, #-2147483648	; 0x80000000
   1b544:	cmp	r1, r5
   1b548:	bge	1b57c <__assert_fail@plt+0xa204>
   1b54c:	b	1b58c <__assert_fail@plt+0xa214>
   1b550:	beq	1b57c <__assert_fail@plt+0xa204>
   1b554:	mov	r1, #-2147483648	; 0x80000000
   1b558:	sdiv	r1, r1, r5
   1b55c:	mvn	r7, #-2147483648	; 0x80000000
   1b560:	cmp	r1, r4
   1b564:	bge	1b57c <__assert_fail@plt+0xa204>
   1b568:	b	1b58c <__assert_fail@plt+0xa214>
   1b56c:	mvn	r7, #-2147483648	; 0x80000000
   1b570:	sdiv	r1, r7, r4
   1b574:	cmp	r5, r1
   1b578:	blt	1b58c <__assert_fail@plt+0xa214>
   1b57c:	mul	r1, r5, r4
   1b580:	mov	r7, #64	; 0x40
   1b584:	cmp	r1, #63	; 0x3f
   1b588:	bgt	1b594 <__assert_fail@plt+0xa21c>
   1b58c:	sdiv	r5, r7, r4
   1b590:	mul	r1, r5, r4
   1b594:	cmp	r0, #0
   1b598:	moveq	r7, #0
   1b59c:	streq	r7, [r8]
   1b5a0:	sub	r7, r5, r6
   1b5a4:	cmp	r7, r2
   1b5a8:	bge	1b654 <__assert_fail@plt+0xa2dc>
   1b5ac:	add	r5, r6, r2
   1b5b0:	mov	r1, #0
   1b5b4:	cmp	r5, r3
   1b5b8:	mov	r2, #0
   1b5bc:	movwgt	r2, #1
   1b5c0:	cmn	r3, #1
   1b5c4:	movwgt	r1, #1
   1b5c8:	cmp	r5, r6
   1b5cc:	bvs	1b63c <__assert_fail@plt+0xa2c4>
   1b5d0:	ands	r1, r1, r2
   1b5d4:	bne	1b63c <__assert_fail@plt+0xa2c4>
   1b5d8:	cmn	r4, #1
   1b5dc:	ble	1b604 <__assert_fail@plt+0xa28c>
   1b5e0:	cmp	r4, #0
   1b5e4:	beq	1b650 <__assert_fail@plt+0xa2d8>
   1b5e8:	cmn	r5, #1
   1b5ec:	ble	1b628 <__assert_fail@plt+0xa2b0>
   1b5f0:	mvn	r1, #-2147483648	; 0x80000000
   1b5f4:	udiv	r1, r1, r4
   1b5f8:	cmp	r1, r5
   1b5fc:	bge	1b650 <__assert_fail@plt+0xa2d8>
   1b600:	b	1b63c <__assert_fail@plt+0xa2c4>
   1b604:	cmn	r5, #1
   1b608:	ble	1b640 <__assert_fail@plt+0xa2c8>
   1b60c:	cmn	r4, #1
   1b610:	beq	1b650 <__assert_fail@plt+0xa2d8>
   1b614:	mov	r1, #-2147483648	; 0x80000000
   1b618:	sdiv	r1, r1, r4
   1b61c:	cmp	r1, r5
   1b620:	bge	1b650 <__assert_fail@plt+0xa2d8>
   1b624:	b	1b63c <__assert_fail@plt+0xa2c4>
   1b628:	beq	1b650 <__assert_fail@plt+0xa2d8>
   1b62c:	mov	r1, #-2147483648	; 0x80000000
   1b630:	sdiv	r1, r1, r5
   1b634:	cmp	r1, r4
   1b638:	bge	1b650 <__assert_fail@plt+0xa2d8>
   1b63c:	bl	1b738 <__assert_fail@plt+0xa3c0>
   1b640:	mvn	r1, #-2147483648	; 0x80000000
   1b644:	sdiv	r1, r1, r4
   1b648:	cmp	r5, r1
   1b64c:	blt	1b63c <__assert_fail@plt+0xa2c4>
   1b650:	mul	r1, r5, r4
   1b654:	bl	1b3f0 <__assert_fail@plt+0xa078>
   1b658:	str	r5, [r8]
   1b65c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b660:	mov	r1, #1
   1b664:	b	1b668 <__assert_fail@plt+0xa2f0>
   1b668:	push	{fp, lr}
   1b66c:	mov	fp, sp
   1b670:	bl	1bdb0 <__assert_fail@plt+0xaa38>
   1b674:	pop	{fp, lr}
   1b678:	b	1b3c4 <__assert_fail@plt+0xa04c>
   1b67c:	mov	r1, #1
   1b680:	b	1b684 <__assert_fail@plt+0xa30c>
   1b684:	push	{fp, lr}
   1b688:	mov	fp, sp
   1b68c:	bl	1c440 <__assert_fail@plt+0xb0c8>
   1b690:	pop	{fp, lr}
   1b694:	b	1b3c4 <__assert_fail@plt+0xa04c>
   1b698:	push	{r4, r5, fp, lr}
   1b69c:	add	fp, sp, #8
   1b6a0:	mov	r4, r1
   1b6a4:	mov	r5, r0
   1b6a8:	mov	r0, r1
   1b6ac:	bl	1b3b0 <__assert_fail@plt+0xa038>
   1b6b0:	mov	r1, r5
   1b6b4:	mov	r2, r4
   1b6b8:	pop	{r4, r5, fp, lr}
   1b6bc:	b	11120 <memcpy@plt>
   1b6c0:	push	{r4, r5, fp, lr}
   1b6c4:	add	fp, sp, #8
   1b6c8:	mov	r4, r1
   1b6cc:	mov	r5, r0
   1b6d0:	mov	r0, r1
   1b6d4:	bl	1b3d8 <__assert_fail@plt+0xa060>
   1b6d8:	mov	r1, r5
   1b6dc:	mov	r2, r4
   1b6e0:	pop	{r4, r5, fp, lr}
   1b6e4:	b	11120 <memcpy@plt>
   1b6e8:	push	{r4, r5, fp, lr}
   1b6ec:	add	fp, sp, #8
   1b6f0:	mov	r4, r1
   1b6f4:	mov	r5, r0
   1b6f8:	add	r0, r1, #1
   1b6fc:	bl	1b3d8 <__assert_fail@plt+0xa060>
   1b700:	mov	r1, #0
   1b704:	strb	r1, [r0, r4]
   1b708:	mov	r1, r5
   1b70c:	mov	r2, r4
   1b710:	pop	{r4, r5, fp, lr}
   1b714:	b	11120 <memcpy@plt>
   1b718:	push	{r4, sl, fp, lr}
   1b71c:	add	fp, sp, #8
   1b720:	mov	r4, r0
   1b724:	bl	11240 <strlen@plt>
   1b728:	add	r1, r0, #1
   1b72c:	mov	r0, r4
   1b730:	pop	{r4, sl, fp, lr}
   1b734:	b	1b698 <__assert_fail@plt+0xa320>
   1b738:	push	{fp, lr}
   1b73c:	mov	fp, sp
   1b740:	movw	r0, #57624	; 0xe118
   1b744:	movt	r0, #2
   1b748:	ldr	r4, [r0]
   1b74c:	movw	r1, #56016	; 0xdad0
   1b750:	movt	r1, #1
   1b754:	mov	r0, #0
   1b758:	mov	r2, #5
   1b75c:	bl	11138 <dcgettext@plt>
   1b760:	mov	r3, r0
   1b764:	movw	r2, #52886	; 0xce96
   1b768:	movt	r2, #1
   1b76c:	mov	r0, r4
   1b770:	mov	r1, #0
   1b774:	bl	111bc <error@plt>
   1b778:	bl	1133c <abort@plt>
   1b77c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b780:	add	fp, sp, #24
   1b784:	sub	sp, sp, #16
   1b788:	mov	r5, r3
   1b78c:	mov	r6, r2
   1b790:	mov	r2, r1
   1b794:	mov	r8, r0
   1b798:	ldr	r0, [fp, #16]
   1b79c:	str	r0, [sp]
   1b7a0:	add	r3, sp, #8
   1b7a4:	mov	r0, r8
   1b7a8:	mov	r1, #0
   1b7ac:	bl	1b874 <__assert_fail@plt+0xa4fc>
   1b7b0:	cmp	r0, #0
   1b7b4:	bne	1b844 <__assert_fail@plt+0xa4cc>
   1b7b8:	ldr	r7, [sp, #8]
   1b7bc:	ldr	r4, [sp, #12]
   1b7c0:	subs	r0, r7, r6
   1b7c4:	sbcs	r0, r4, r5
   1b7c8:	bcc	1b7ec <__assert_fail@plt+0xa474>
   1b7cc:	ldr	r0, [fp, #12]
   1b7d0:	ldr	r1, [fp, #8]
   1b7d4:	subs	r1, r1, r7
   1b7d8:	sbcs	r0, r0, r4
   1b7dc:	ldrcs	r0, [sp, #8]
   1b7e0:	ldrcs	r1, [sp, #12]
   1b7e4:	subcs	sp, fp, #24
   1b7e8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b7ec:	bl	11258 <__errno_location@plt>
   1b7f0:	subs	r1, r7, #1073741824	; 0x40000000
   1b7f4:	sbcs	r1, r4, #0
   1b7f8:	movcc	r1, #34	; 0x22
   1b7fc:	movcs	r1, #75	; 0x4b
   1b800:	str	r1, [r0]
   1b804:	ldr	r5, [fp, #24]
   1b808:	ldr	r6, [fp, #20]
   1b80c:	bl	11258 <__errno_location@plt>
   1b810:	ldr	r4, [r0]
   1b814:	mov	r0, r8
   1b818:	bl	1aac4 <__assert_fail@plt+0x974c>
   1b81c:	str	r0, [sp]
   1b820:	subs	r1, r4, #22
   1b824:	movne	r1, r4
   1b828:	cmp	r5, #0
   1b82c:	movweq	r5, #1
   1b830:	movw	r2, #54975	; 0xd6bf
   1b834:	movt	r2, #1
   1b838:	mov	r0, r5
   1b83c:	mov	r3, r6
   1b840:	bl	111bc <error@plt>
   1b844:	cmp	r0, #1
   1b848:	beq	1b860 <__assert_fail@plt+0xa4e8>
   1b84c:	cmp	r0, #3
   1b850:	bne	1b804 <__assert_fail@plt+0xa48c>
   1b854:	bl	11258 <__errno_location@plt>
   1b858:	mov	r1, #0
   1b85c:	b	1b800 <__assert_fail@plt+0xa488>
   1b860:	bl	11258 <__errno_location@plt>
   1b864:	mov	r1, #75	; 0x4b
   1b868:	b	1b800 <__assert_fail@plt+0xa488>
   1b86c:	mov	r1, #10
   1b870:	b	1b77c <__assert_fail@plt+0xa404>
   1b874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b878:	add	fp, sp, #28
   1b87c:	sub	sp, sp, #20
   1b880:	cmp	r2, #37	; 0x25
   1b884:	bcs	1bcb8 <__assert_fail@plt+0xa940>
   1b888:	mov	r5, r2
   1b88c:	mov	r6, r1
   1b890:	mov	r4, r0
   1b894:	str	r3, [sp, #4]
   1b898:	ldr	sl, [fp, #8]
   1b89c:	bl	11258 <__errno_location@plt>
   1b8a0:	mov	r7, r0
   1b8a4:	mov	r0, #0
   1b8a8:	str	r0, [r7]
   1b8ac:	bl	11210 <__ctype_b_loc@plt>
   1b8b0:	ldr	r1, [r0]
   1b8b4:	mov	r2, r4
   1b8b8:	ldrb	r0, [r2], #1
   1b8bc:	add	r3, r1, r0, lsl #1
   1b8c0:	ldrb	r3, [r3, #1]
   1b8c4:	tst	r3, #32
   1b8c8:	bne	1b8b8 <__assert_fail@plt+0xa540>
   1b8cc:	add	r9, sp, #16
   1b8d0:	cmp	r6, #0
   1b8d4:	movne	r9, r6
   1b8d8:	mov	r8, #4
   1b8dc:	cmp	r0, #45	; 0x2d
   1b8e0:	beq	1bcac <__assert_fail@plt+0xa934>
   1b8e4:	mov	r0, r4
   1b8e8:	mov	r1, r9
   1b8ec:	mov	r2, r5
   1b8f0:	bl	112a0 <strtoumax@plt>
   1b8f4:	str	r1, [sp, #12]
   1b8f8:	str	r0, [sp, #8]
   1b8fc:	ldr	r6, [r9]
   1b900:	cmp	r6, r4
   1b904:	beq	1b92c <__assert_fail@plt+0xa5b4>
   1b908:	ldr	r0, [r7]
   1b90c:	cmp	r0, #0
   1b910:	beq	1b964 <__assert_fail@plt+0xa5ec>
   1b914:	cmp	r0, #34	; 0x22
   1b918:	bne	1bcac <__assert_fail@plt+0xa934>
   1b91c:	mov	r8, #1
   1b920:	cmp	sl, #0
   1b924:	bne	1b970 <__assert_fail@plt+0xa5f8>
   1b928:	b	1bc9c <__assert_fail@plt+0xa924>
   1b92c:	cmp	sl, #0
   1b930:	beq	1bcac <__assert_fail@plt+0xa934>
   1b934:	ldrb	r1, [r6]
   1b938:	cmp	r1, #0
   1b93c:	beq	1bcac <__assert_fail@plt+0xa934>
   1b940:	mov	r0, sl
   1b944:	bl	1124c <strchr@plt>
   1b948:	cmp	r0, #0
   1b94c:	beq	1bcac <__assert_fail@plt+0xa934>
   1b950:	mov	r8, #0
   1b954:	str	r8, [sp, #12]
   1b958:	mov	r0, #1
   1b95c:	str	r0, [sp, #8]
   1b960:	b	1b970 <__assert_fail@plt+0xa5f8>
   1b964:	mov	r8, r0
   1b968:	cmp	sl, #0
   1b96c:	beq	1bc9c <__assert_fail@plt+0xa924>
   1b970:	ldrb	r4, [r6]
   1b974:	cmp	r4, #0
   1b978:	beq	1bc9c <__assert_fail@plt+0xa924>
   1b97c:	mov	r0, sl
   1b980:	mov	r1, r4
   1b984:	bl	1124c <strchr@plt>
   1b988:	cmp	r0, #0
   1b98c:	beq	1bbb8 <__assert_fail@plt+0xa840>
   1b990:	sub	r0, r4, #69	; 0x45
   1b994:	mov	r7, #1
   1b998:	mov	r5, #1024	; 0x400
   1b99c:	cmp	r0, #47	; 0x2f
   1b9a0:	bhi	1bab4 <__assert_fail@plt+0xa73c>
   1b9a4:	add	r1, pc, #0
   1b9a8:	ldr	pc, [r1, r0, lsl #2]
   1b9ac:	andeq	fp, r1, ip, ror #20
   1b9b0:			; <UNDEFINED> instruction: 0x0001bab4
   1b9b4:	andeq	fp, r1, ip, ror #20
   1b9b8:			; <UNDEFINED> instruction: 0x0001bab4
   1b9bc:			; <UNDEFINED> instruction: 0x0001bab4
   1b9c0:			; <UNDEFINED> instruction: 0x0001bab4
   1b9c4:	andeq	fp, r1, ip, ror #20
   1b9c8:			; <UNDEFINED> instruction: 0x0001bab4
   1b9cc:	andeq	fp, r1, ip, ror #20
   1b9d0:			; <UNDEFINED> instruction: 0x0001bab4
   1b9d4:			; <UNDEFINED> instruction: 0x0001bab4
   1b9d8:	andeq	fp, r1, ip, ror #20
   1b9dc:			; <UNDEFINED> instruction: 0x0001bab4
   1b9e0:			; <UNDEFINED> instruction: 0x0001bab4
   1b9e4:			; <UNDEFINED> instruction: 0x0001bab4
   1b9e8:	andeq	fp, r1, ip, ror #20
   1b9ec:			; <UNDEFINED> instruction: 0x0001bab4
   1b9f0:			; <UNDEFINED> instruction: 0x0001bab4
   1b9f4:			; <UNDEFINED> instruction: 0x0001bab4
   1b9f8:			; <UNDEFINED> instruction: 0x0001bab4
   1b9fc:	andeq	fp, r1, ip, ror #20
   1ba00:	andeq	fp, r1, ip, ror #20
   1ba04:			; <UNDEFINED> instruction: 0x0001bab4
   1ba08:			; <UNDEFINED> instruction: 0x0001bab4
   1ba0c:			; <UNDEFINED> instruction: 0x0001bab4
   1ba10:			; <UNDEFINED> instruction: 0x0001bab4
   1ba14:			; <UNDEFINED> instruction: 0x0001bab4
   1ba18:			; <UNDEFINED> instruction: 0x0001bab4
   1ba1c:			; <UNDEFINED> instruction: 0x0001bab4
   1ba20:			; <UNDEFINED> instruction: 0x0001bab4
   1ba24:			; <UNDEFINED> instruction: 0x0001bab4
   1ba28:			; <UNDEFINED> instruction: 0x0001bab4
   1ba2c:			; <UNDEFINED> instruction: 0x0001bab4
   1ba30:			; <UNDEFINED> instruction: 0x0001bab4
   1ba34:	andeq	fp, r1, ip, ror #20
   1ba38:			; <UNDEFINED> instruction: 0x0001bab4
   1ba3c:			; <UNDEFINED> instruction: 0x0001bab4
   1ba40:			; <UNDEFINED> instruction: 0x0001bab4
   1ba44:	andeq	fp, r1, ip, ror #20
   1ba48:			; <UNDEFINED> instruction: 0x0001bab4
   1ba4c:	andeq	fp, r1, ip, ror #20
   1ba50:			; <UNDEFINED> instruction: 0x0001bab4
   1ba54:			; <UNDEFINED> instruction: 0x0001bab4
   1ba58:			; <UNDEFINED> instruction: 0x0001bab4
   1ba5c:			; <UNDEFINED> instruction: 0x0001bab4
   1ba60:			; <UNDEFINED> instruction: 0x0001bab4
   1ba64:			; <UNDEFINED> instruction: 0x0001bab4
   1ba68:	andeq	fp, r1, ip, ror #20
   1ba6c:	mov	r0, sl
   1ba70:	mov	r1, #48	; 0x30
   1ba74:	bl	1124c <strchr@plt>
   1ba78:	cmp	r0, #0
   1ba7c:	beq	1bab4 <__assert_fail@plt+0xa73c>
   1ba80:	ldrb	r0, [r6, #1]
   1ba84:	cmp	r0, #66	; 0x42
   1ba88:	cmpne	r0, #68	; 0x44
   1ba8c:	bne	1ba9c <__assert_fail@plt+0xa724>
   1ba90:	mov	r7, #2
   1ba94:	mov	r5, #1000	; 0x3e8
   1ba98:	b	1bab4 <__assert_fail@plt+0xa73c>
   1ba9c:	cmp	r0, #105	; 0x69
   1baa0:	bne	1bab4 <__assert_fail@plt+0xa73c>
   1baa4:	ldrb	r0, [r6, #2]
   1baa8:	mov	r7, #1
   1baac:	cmp	r0, #66	; 0x42
   1bab0:	movweq	r7, #3
   1bab4:	sub	r1, r4, #66	; 0x42
   1bab8:	cmp	r1, #53	; 0x35
   1babc:	bhi	1bbb8 <__assert_fail@plt+0xa840>
   1bac0:	mov	r0, #0
   1bac4:	add	r2, pc, #0
   1bac8:	ldr	pc, [r2, r1, lsl #2]
   1bacc:	andeq	fp, r1, r0, lsr #24
   1bad0:			; <UNDEFINED> instruction: 0x0001bbb8
   1bad4:			; <UNDEFINED> instruction: 0x0001bbb8
   1bad8:	andeq	fp, r1, ip, lsr #24
   1badc:			; <UNDEFINED> instruction: 0x0001bbb8
   1bae0:	andeq	fp, r1, r4, lsr #23
   1bae4:			; <UNDEFINED> instruction: 0x0001bbb8
   1bae8:			; <UNDEFINED> instruction: 0x0001bbb8
   1baec:			; <UNDEFINED> instruction: 0x0001bbb8
   1baf0:	ldrdeq	fp, [r1], -r0
   1baf4:			; <UNDEFINED> instruction: 0x0001bbb8
   1baf8:	andeq	fp, r1, r4, ror #23
   1bafc:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb00:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb04:	andeq	fp, r1, r0, asr #24
   1bb08:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb0c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb10:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb14:	strdeq	fp, [r1], -r8
   1bb18:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb1c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb20:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb24:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb28:	andeq	fp, r1, r4, asr ip
   1bb2c:	andeq	fp, r1, ip, lsl #24
   1bb30:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb34:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb38:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb3c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb40:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb44:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb48:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb4c:	andeq	fp, r1, r8, ror #24
   1bb50:	andeq	fp, r1, r0, lsl #25
   1bb54:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb58:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb5c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb60:	andeq	fp, r1, r4, lsr #23
   1bb64:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb68:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb6c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb70:	ldrdeq	fp, [r1], -r0
   1bb74:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb78:	andeq	fp, r1, r4, ror #23
   1bb7c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb80:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb84:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb88:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb8c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb90:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb94:	strdeq	fp, [r1], -r8
   1bb98:			; <UNDEFINED> instruction: 0x0001bbb8
   1bb9c:			; <UNDEFINED> instruction: 0x0001bbb8
   1bba0:	andeq	fp, r1, r4, ror ip
   1bba4:	add	r0, sp, #8
   1bba8:	mov	r1, r5
   1bbac:	mov	r2, #3
   1bbb0:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bbb4:	b	1bc80 <__assert_fail@plt+0xa908>
   1bbb8:	ldr	r0, [sp, #8]
   1bbbc:	ldr	r1, [sp, #12]
   1bbc0:	ldr	r2, [sp, #4]
   1bbc4:	strd	r0, [r2]
   1bbc8:	orr	r8, r8, #2
   1bbcc:	b	1bcac <__assert_fail@plt+0xa934>
   1bbd0:	add	r0, sp, #8
   1bbd4:	mov	r1, r5
   1bbd8:	mov	r2, #1
   1bbdc:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bbe0:	b	1bc80 <__assert_fail@plt+0xa908>
   1bbe4:	add	r0, sp, #8
   1bbe8:	mov	r1, r5
   1bbec:	mov	r2, #2
   1bbf0:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bbf4:	b	1bc80 <__assert_fail@plt+0xa908>
   1bbf8:	add	r0, sp, #8
   1bbfc:	mov	r1, r5
   1bc00:	mov	r2, #4
   1bc04:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bc08:	b	1bc80 <__assert_fail@plt+0xa908>
   1bc0c:	add	r0, sp, #8
   1bc10:	mov	r1, r5
   1bc14:	mov	r2, #7
   1bc18:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bc1c:	b	1bc80 <__assert_fail@plt+0xa908>
   1bc20:	add	r0, sp, #8
   1bc24:	mov	r1, #1024	; 0x400
   1bc28:	b	1bc7c <__assert_fail@plt+0xa904>
   1bc2c:	add	r0, sp, #8
   1bc30:	mov	r1, r5
   1bc34:	mov	r2, #6
   1bc38:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bc3c:	b	1bc80 <__assert_fail@plt+0xa908>
   1bc40:	add	r0, sp, #8
   1bc44:	mov	r1, r5
   1bc48:	mov	r2, #5
   1bc4c:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bc50:	b	1bc80 <__assert_fail@plt+0xa908>
   1bc54:	add	r0, sp, #8
   1bc58:	mov	r1, r5
   1bc5c:	mov	r2, #8
   1bc60:	bl	1bd64 <__assert_fail@plt+0xa9ec>
   1bc64:	b	1bc80 <__assert_fail@plt+0xa908>
   1bc68:	add	r0, sp, #8
   1bc6c:	mov	r1, #512	; 0x200
   1bc70:	b	1bc7c <__assert_fail@plt+0xa904>
   1bc74:	add	r0, sp, #8
   1bc78:	mov	r1, #2
   1bc7c:	bl	1bcd8 <__assert_fail@plt+0xa960>
   1bc80:	ldr	r1, [r9]
   1bc84:	add	r2, r1, r7
   1bc88:	str	r2, [r9]
   1bc8c:	ldrb	r1, [r1, r7]
   1bc90:	orr	r8, r0, r8
   1bc94:	cmp	r1, #0
   1bc98:	orrne	r8, r8, #2
   1bc9c:	ldr	r0, [sp, #8]
   1bca0:	ldr	r1, [sp, #12]
   1bca4:	ldr	r2, [sp, #4]
   1bca8:	strd	r0, [r2]
   1bcac:	mov	r0, r8
   1bcb0:	sub	sp, fp, #28
   1bcb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcb8:	movw	r0, #56033	; 0xdae1
   1bcbc:	movt	r0, #1
   1bcc0:	movw	r1, #56071	; 0xdb07
   1bcc4:	movt	r1, #1
   1bcc8:	movw	r3, #56087	; 0xdb17
   1bccc:	movt	r3, #1
   1bcd0:	mov	r2, #85	; 0x55
   1bcd4:	bl	11378 <__assert_fail@plt>
   1bcd8:	push	{r4, r5, r6, r7, fp, lr}
   1bcdc:	add	fp, sp, #16
   1bce0:	mov	r5, r1
   1bce4:	mov	r4, r0
   1bce8:	cmn	r1, #1
   1bcec:	ble	1bd24 <__assert_fail@plt+0xa9ac>
   1bcf0:	cmp	r5, #0
   1bcf4:	beq	1bd44 <__assert_fail@plt+0xa9cc>
   1bcf8:	asr	r3, r5, #31
   1bcfc:	mvn	r6, #0
   1bd00:	mvn	r0, #0
   1bd04:	mvn	r1, #0
   1bd08:	mov	r2, r5
   1bd0c:	bl	1c64c <__assert_fail@plt+0xb2d4>
   1bd10:	ldrd	r2, [r4]
   1bd14:	subs	r0, r0, r2
   1bd18:	sbcs	r0, r1, r3
   1bd1c:	bcc	1bd34 <__assert_fail@plt+0xa9bc>
   1bd20:	b	1bd44 <__assert_fail@plt+0xa9cc>
   1bd24:	ldrd	r0, [r4]
   1bd28:	orrs	r0, r0, r1
   1bd2c:	beq	1bd44 <__assert_fail@plt+0xa9cc>
   1bd30:	mvn	r6, #0
   1bd34:	mov	r0, #1
   1bd38:	mvn	r7, #0
   1bd3c:	strd	r6, [r4]
   1bd40:	pop	{r4, r5, r6, r7, fp, pc}
   1bd44:	ldrd	r0, [r4]
   1bd48:	umull	r6, r2, r0, r5
   1bd4c:	asr	r3, r5, #31
   1bd50:	mla	r0, r0, r3, r2
   1bd54:	mla	r7, r1, r5, r0
   1bd58:	mov	r0, #0
   1bd5c:	strd	r6, [r4]
   1bd60:	pop	{r4, r5, r6, r7, fp, pc}
   1bd64:	push	{r4, r5, r6, r7, fp, lr}
   1bd68:	add	fp, sp, #16
   1bd6c:	cmp	r2, #0
   1bd70:	beq	1bda4 <__assert_fail@plt+0xaa2c>
   1bd74:	mov	r4, r2
   1bd78:	mov	r5, r1
   1bd7c:	mov	r7, r0
   1bd80:	mov	r6, #0
   1bd84:	mov	r0, r7
   1bd88:	mov	r1, r5
   1bd8c:	bl	1bcd8 <__assert_fail@plt+0xa960>
   1bd90:	orr	r6, r0, r6
   1bd94:	subs	r4, r4, #1
   1bd98:	bne	1bd84 <__assert_fail@plt+0xaa0c>
   1bd9c:	mov	r0, r6
   1bda0:	pop	{r4, r5, r6, r7, fp, pc}
   1bda4:	mov	r6, #0
   1bda8:	mov	r0, r6
   1bdac:	pop	{r4, r5, r6, r7, fp, pc}
   1bdb0:	clz	r2, r1
   1bdb4:	lsr	r2, r2, #5
   1bdb8:	clz	r3, r0
   1bdbc:	lsr	r3, r3, #5
   1bdc0:	orrs	r2, r3, r2
   1bdc4:	movwne	r1, #1
   1bdc8:	movwne	r0, #1
   1bdcc:	cmp	r1, #0
   1bdd0:	beq	1be00 <__assert_fail@plt+0xaa88>
   1bdd4:	mvn	r2, #-2147483648	; 0x80000000
   1bdd8:	udiv	r2, r2, r1
   1bddc:	cmp	r2, r0
   1bde0:	bcs	1be00 <__assert_fail@plt+0xaa88>
   1bde4:	push	{fp, lr}
   1bde8:	mov	fp, sp
   1bdec:	bl	11258 <__errno_location@plt>
   1bdf0:	mov	r1, #12
   1bdf4:	str	r1, [r0]
   1bdf8:	mov	r0, #0
   1bdfc:	pop	{fp, pc}
   1be00:	b	110b4 <calloc@plt>
   1be04:	cmp	r0, #0
   1be08:	movweq	r0, #1
   1be0c:	cmn	r0, #1
   1be10:	ble	1be18 <__assert_fail@plt+0xaaa0>
   1be14:	b	111c8 <malloc@plt>
   1be18:	push	{fp, lr}
   1be1c:	mov	fp, sp
   1be20:	bl	11258 <__errno_location@plt>
   1be24:	mov	r1, #12
   1be28:	str	r1, [r0]
   1be2c:	mov	r0, #0
   1be30:	pop	{fp, pc}
   1be34:	push	{fp, lr}
   1be38:	mov	fp, sp
   1be3c:	cmp	r0, #0
   1be40:	beq	1be5c <__assert_fail@plt+0xaae4>
   1be44:	cmp	r1, #0
   1be48:	beq	1be68 <__assert_fail@plt+0xaaf0>
   1be4c:	cmn	r1, #1
   1be50:	ble	1be74 <__assert_fail@plt+0xaafc>
   1be54:	pop	{fp, lr}
   1be58:	b	11144 <realloc@plt>
   1be5c:	mov	r0, r1
   1be60:	pop	{fp, lr}
   1be64:	b	1be04 <__assert_fail@plt+0xaa8c>
   1be68:	bl	19200 <__assert_fail@plt+0x7e88>
   1be6c:	mov	r0, #0
   1be70:	pop	{fp, pc}
   1be74:	bl	11258 <__errno_location@plt>
   1be78:	mov	r1, #12
   1be7c:	str	r1, [r0]
   1be80:	mov	r0, #0
   1be84:	pop	{fp, pc}
   1be88:	mov	r1, r0
   1be8c:	sub	r2, r0, #65	; 0x41
   1be90:	mov	r0, #1
   1be94:	cmp	r2, #26
   1be98:	subcs	r2, r1, #97	; 0x61
   1be9c:	cmpcs	r2, #26
   1bea0:	bcs	1bea8 <__assert_fail@plt+0xab30>
   1bea4:	bx	lr
   1bea8:	sub	r1, r1, #48	; 0x30
   1beac:	cmp	r1, #10
   1beb0:	movcs	r0, #0
   1beb4:	bx	lr
   1beb8:	mov	r1, r0
   1bebc:	sub	r2, r0, #65	; 0x41
   1bec0:	mov	r0, #1
   1bec4:	cmp	r2, #26
   1bec8:	subcs	r1, r1, #97	; 0x61
   1becc:	cmpcs	r1, #26
   1bed0:	movcs	r0, #0
   1bed4:	bx	lr
   1bed8:	mov	r1, #0
   1bedc:	cmp	r0, #128	; 0x80
   1bee0:	movwcc	r1, #1
   1bee4:	mov	r0, r1
   1bee8:	bx	lr
   1beec:	sub	r1, r0, #9
   1bef0:	clz	r1, r1
   1bef4:	lsr	r1, r1, #5
   1bef8:	sub	r0, r0, #32
   1befc:	clz	r0, r0
   1bf00:	lsr	r0, r0, #5
   1bf04:	orr	r0, r0, r1
   1bf08:	bx	lr
   1bf0c:	mov	r1, r0
   1bf10:	mov	r0, #1
   1bf14:	cmp	r1, #32
   1bf18:	bxcc	lr
   1bf1c:	cmp	r1, #127	; 0x7f
   1bf20:	movne	r0, #0
   1bf24:	bx	lr
   1bf28:	sub	r1, r0, #48	; 0x30
   1bf2c:	mov	r0, #0
   1bf30:	cmp	r1, #10
   1bf34:	movwcc	r0, #1
   1bf38:	bx	lr
   1bf3c:	sub	r1, r0, #33	; 0x21
   1bf40:	mov	r0, #0
   1bf44:	cmp	r1, #94	; 0x5e
   1bf48:	movwcc	r0, #1
   1bf4c:	bx	lr
   1bf50:	sub	r1, r0, #97	; 0x61
   1bf54:	mov	r0, #0
   1bf58:	cmp	r1, #26
   1bf5c:	movwcc	r0, #1
   1bf60:	bx	lr
   1bf64:	sub	r1, r0, #32
   1bf68:	mov	r0, #0
   1bf6c:	cmp	r1, #95	; 0x5f
   1bf70:	movwcc	r0, #1
   1bf74:	bx	lr
   1bf78:	sub	r1, r0, #33	; 0x21
   1bf7c:	cmp	r1, #93	; 0x5d
   1bf80:	bhi	1c10c <__assert_fail@plt+0xad94>
   1bf84:	mov	r0, #1
   1bf88:	add	r2, pc, #0
   1bf8c:	ldr	pc, [r2, r1, lsl #2]
   1bf90:	andeq	ip, r1, r8, lsl #2
   1bf94:	andeq	ip, r1, r8, lsl #2
   1bf98:	andeq	ip, r1, r8, lsl #2
   1bf9c:	andeq	ip, r1, r8, lsl #2
   1bfa0:	andeq	ip, r1, r8, lsl #2
   1bfa4:	andeq	ip, r1, r8, lsl #2
   1bfa8:	andeq	ip, r1, r8, lsl #2
   1bfac:	andeq	ip, r1, r8, lsl #2
   1bfb0:	andeq	ip, r1, r8, lsl #2
   1bfb4:	andeq	ip, r1, r8, lsl #2
   1bfb8:	andeq	ip, r1, r8, lsl #2
   1bfbc:	andeq	ip, r1, r8, lsl #2
   1bfc0:	andeq	ip, r1, r8, lsl #2
   1bfc4:	andeq	ip, r1, r8, lsl #2
   1bfc8:	andeq	ip, r1, r8, lsl #2
   1bfcc:	andeq	ip, r1, ip, lsl #2
   1bfd0:	andeq	ip, r1, ip, lsl #2
   1bfd4:	andeq	ip, r1, ip, lsl #2
   1bfd8:	andeq	ip, r1, ip, lsl #2
   1bfdc:	andeq	ip, r1, ip, lsl #2
   1bfe0:	andeq	ip, r1, ip, lsl #2
   1bfe4:	andeq	ip, r1, ip, lsl #2
   1bfe8:	andeq	ip, r1, ip, lsl #2
   1bfec:	andeq	ip, r1, ip, lsl #2
   1bff0:	andeq	ip, r1, ip, lsl #2
   1bff4:	andeq	ip, r1, r8, lsl #2
   1bff8:	andeq	ip, r1, r8, lsl #2
   1bffc:	andeq	ip, r1, r8, lsl #2
   1c000:	andeq	ip, r1, r8, lsl #2
   1c004:	andeq	ip, r1, r8, lsl #2
   1c008:	andeq	ip, r1, r8, lsl #2
   1c00c:	andeq	ip, r1, r8, lsl #2
   1c010:	andeq	ip, r1, ip, lsl #2
   1c014:	andeq	ip, r1, ip, lsl #2
   1c018:	andeq	ip, r1, ip, lsl #2
   1c01c:	andeq	ip, r1, ip, lsl #2
   1c020:	andeq	ip, r1, ip, lsl #2
   1c024:	andeq	ip, r1, ip, lsl #2
   1c028:	andeq	ip, r1, ip, lsl #2
   1c02c:	andeq	ip, r1, ip, lsl #2
   1c030:	andeq	ip, r1, ip, lsl #2
   1c034:	andeq	ip, r1, ip, lsl #2
   1c038:	andeq	ip, r1, ip, lsl #2
   1c03c:	andeq	ip, r1, ip, lsl #2
   1c040:	andeq	ip, r1, ip, lsl #2
   1c044:	andeq	ip, r1, ip, lsl #2
   1c048:	andeq	ip, r1, ip, lsl #2
   1c04c:	andeq	ip, r1, ip, lsl #2
   1c050:	andeq	ip, r1, ip, lsl #2
   1c054:	andeq	ip, r1, ip, lsl #2
   1c058:	andeq	ip, r1, ip, lsl #2
   1c05c:	andeq	ip, r1, ip, lsl #2
   1c060:	andeq	ip, r1, ip, lsl #2
   1c064:	andeq	ip, r1, ip, lsl #2
   1c068:	andeq	ip, r1, ip, lsl #2
   1c06c:	andeq	ip, r1, ip, lsl #2
   1c070:	andeq	ip, r1, ip, lsl #2
   1c074:	andeq	ip, r1, ip, lsl #2
   1c078:	andeq	ip, r1, r8, lsl #2
   1c07c:	andeq	ip, r1, r8, lsl #2
   1c080:	andeq	ip, r1, r8, lsl #2
   1c084:	andeq	ip, r1, r8, lsl #2
   1c088:	andeq	ip, r1, r8, lsl #2
   1c08c:	andeq	ip, r1, r8, lsl #2
   1c090:	andeq	ip, r1, ip, lsl #2
   1c094:	andeq	ip, r1, ip, lsl #2
   1c098:	andeq	ip, r1, ip, lsl #2
   1c09c:	andeq	ip, r1, ip, lsl #2
   1c0a0:	andeq	ip, r1, ip, lsl #2
   1c0a4:	andeq	ip, r1, ip, lsl #2
   1c0a8:	andeq	ip, r1, ip, lsl #2
   1c0ac:	andeq	ip, r1, ip, lsl #2
   1c0b0:	andeq	ip, r1, ip, lsl #2
   1c0b4:	andeq	ip, r1, ip, lsl #2
   1c0b8:	andeq	ip, r1, ip, lsl #2
   1c0bc:	andeq	ip, r1, ip, lsl #2
   1c0c0:	andeq	ip, r1, ip, lsl #2
   1c0c4:	andeq	ip, r1, ip, lsl #2
   1c0c8:	andeq	ip, r1, ip, lsl #2
   1c0cc:	andeq	ip, r1, ip, lsl #2
   1c0d0:	andeq	ip, r1, ip, lsl #2
   1c0d4:	andeq	ip, r1, ip, lsl #2
   1c0d8:	andeq	ip, r1, ip, lsl #2
   1c0dc:	andeq	ip, r1, ip, lsl #2
   1c0e0:	andeq	ip, r1, ip, lsl #2
   1c0e4:	andeq	ip, r1, ip, lsl #2
   1c0e8:	andeq	ip, r1, ip, lsl #2
   1c0ec:	andeq	ip, r1, ip, lsl #2
   1c0f0:	andeq	ip, r1, ip, lsl #2
   1c0f4:	andeq	ip, r1, ip, lsl #2
   1c0f8:	andeq	ip, r1, r8, lsl #2
   1c0fc:	andeq	ip, r1, r8, lsl #2
   1c100:	andeq	ip, r1, r8, lsl #2
   1c104:	andeq	ip, r1, r8, lsl #2
   1c108:	bx	lr
   1c10c:	mov	r0, #0
   1c110:	bx	lr
   1c114:	sub	r0, r0, #9
   1c118:	cmp	r0, #23
   1c11c:	movhi	r0, #0
   1c120:	bxhi	lr
   1c124:	bic	r0, r0, #-16777216	; 0xff000000
   1c128:	movw	r1, #31
   1c12c:	movt	r1, #128	; 0x80
   1c130:	mov	r2, #1
   1c134:	and	r0, r2, r1, lsr r0
   1c138:	bx	lr
   1c13c:	sub	r1, r0, #65	; 0x41
   1c140:	mov	r0, #0
   1c144:	cmp	r1, #26
   1c148:	movwcc	r0, #1
   1c14c:	bx	lr
   1c150:	mov	r1, r0
   1c154:	sub	r2, r0, #48	; 0x30
   1c158:	mov	r0, #1
   1c15c:	cmp	r2, #22
   1c160:	bhi	1c178 <__assert_fail@plt+0xae00>
   1c164:	mov	ip, #1
   1c168:	movw	r3, #1023	; 0x3ff
   1c16c:	movt	r3, #126	; 0x7e
   1c170:	tst	r3, ip, lsl r2
   1c174:	bxne	lr
   1c178:	sub	r1, r1, #97	; 0x61
   1c17c:	cmp	r1, #6
   1c180:	movcs	r0, #0
   1c184:	bxcs	lr
   1c188:	bx	lr
   1c18c:	sub	r1, r0, #65	; 0x41
   1c190:	cmp	r1, #26
   1c194:	addcc	r0, r0, #32
   1c198:	bx	lr
   1c19c:	sub	r1, r0, #97	; 0x61
   1c1a0:	cmp	r1, #26
   1c1a4:	subcc	r0, r0, #32
   1c1a8:	bx	lr
   1c1ac:	push	{r4, r5, r6, sl, fp, lr}
   1c1b0:	add	fp, sp, #16
   1c1b4:	mov	r4, r0
   1c1b8:	bl	11198 <__fpending@plt>
   1c1bc:	mov	r5, r0
   1c1c0:	mov	r0, r4
   1c1c4:	bl	111a4 <ferror_unlocked@plt>
   1c1c8:	mov	r6, r0
   1c1cc:	mov	r0, r4
   1c1d0:	bl	19048 <__assert_fail@plt+0x7cd0>
   1c1d4:	cmp	r6, #0
   1c1d8:	beq	1c1fc <__assert_fail@plt+0xae84>
   1c1dc:	mvn	r4, #0
   1c1e0:	cmp	r0, #0
   1c1e4:	bne	1c228 <__assert_fail@plt+0xaeb0>
   1c1e8:	bl	11258 <__errno_location@plt>
   1c1ec:	mov	r1, #0
   1c1f0:	str	r1, [r0]
   1c1f4:	mov	r0, r4
   1c1f8:	pop	{r4, r5, r6, sl, fp, pc}
   1c1fc:	cmp	r0, #0
   1c200:	mov	r4, r0
   1c204:	mvnne	r4, #0
   1c208:	cmp	r5, #0
   1c20c:	bne	1c228 <__assert_fail@plt+0xaeb0>
   1c210:	cmp	r0, #0
   1c214:	beq	1c228 <__assert_fail@plt+0xaeb0>
   1c218:	bl	11258 <__errno_location@plt>
   1c21c:	ldr	r0, [r0]
   1c220:	subs	r4, r0, #9
   1c224:	mvnne	r4, #0
   1c228:	mov	r0, r4
   1c22c:	pop	{r4, r5, r6, sl, fp, pc}
   1c230:	sub	sp, sp, #8
   1c234:	push	{fp, lr}
   1c238:	mov	fp, sp
   1c23c:	sub	sp, sp, #8
   1c240:	str	r2, [fp, #8]
   1c244:	str	r3, [fp, #12]
   1c248:	add	r2, fp, #8
   1c24c:	str	r2, [sp, #4]
   1c250:	cmp	r1, #11
   1c254:	bhi	1c294 <__assert_fail@plt+0xaf1c>
   1c258:	mov	r2, #1
   1c25c:	movw	r3, #1300	; 0x514
   1c260:	tst	r3, r2, lsl r1
   1c264:	bne	1c2e4 <__assert_fail@plt+0xaf6c>
   1c268:	movw	r3, #2570	; 0xa0a
   1c26c:	tst	r3, r2, lsl r1
   1c270:	bne	1c2bc <__assert_fail@plt+0xaf44>
   1c274:	cmp	r1, #0
   1c278:	bne	1c294 <__assert_fail@plt+0xaf1c>
   1c27c:	ldr	r1, [sp, #4]
   1c280:	add	r2, r1, #4
   1c284:	str	r2, [sp, #4]
   1c288:	ldr	r1, [r1]
   1c28c:	bl	1c308 <__assert_fail@plt+0xaf90>
   1c290:	b	1c2f8 <__assert_fail@plt+0xaf80>
   1c294:	sub	r2, r1, #1024	; 0x400
   1c298:	cmp	r2, #10
   1c29c:	bhi	1c2e4 <__assert_fail@plt+0xaf6c>
   1c2a0:	mov	ip, #1
   1c2a4:	movw	r3, #645	; 0x285
   1c2a8:	tst	r3, ip, lsl r2
   1c2ac:	bne	1c2e4 <__assert_fail@plt+0xaf6c>
   1c2b0:	movw	r3, #1282	; 0x502
   1c2b4:	tst	r3, ip, lsl r2
   1c2b8:	beq	1c2c4 <__assert_fail@plt+0xaf4c>
   1c2bc:	bl	112d0 <fcntl64@plt>
   1c2c0:	b	1c2f8 <__assert_fail@plt+0xaf80>
   1c2c4:	cmp	r2, #6
   1c2c8:	bne	1c2e4 <__assert_fail@plt+0xaf6c>
   1c2cc:	ldr	r1, [sp, #4]
   1c2d0:	add	r2, r1, #4
   1c2d4:	str	r2, [sp, #4]
   1c2d8:	ldr	r1, [r1]
   1c2dc:	bl	1c314 <__assert_fail@plt+0xaf9c>
   1c2e0:	b	1c2f8 <__assert_fail@plt+0xaf80>
   1c2e4:	ldr	r2, [sp, #4]
   1c2e8:	add	r3, r2, #4
   1c2ec:	str	r3, [sp, #4]
   1c2f0:	ldr	r2, [r2]
   1c2f4:	bl	112d0 <fcntl64@plt>
   1c2f8:	mov	sp, fp
   1c2fc:	pop	{fp, lr}
   1c300:	add	sp, sp, #8
   1c304:	bx	lr
   1c308:	mov	r2, r1
   1c30c:	mov	r1, #0
   1c310:	b	112d0 <fcntl64@plt>
   1c314:	push	{r4, r5, r6, r7, fp, lr}
   1c318:	add	fp, sp, #16
   1c31c:	mov	r5, r1
   1c320:	mov	r6, r0
   1c324:	movw	r7, #58080	; 0xe2e0
   1c328:	movt	r7, #2
   1c32c:	ldr	r0, [r7]
   1c330:	cmp	r0, #0
   1c334:	bmi	1c398 <__assert_fail@plt+0xb020>
   1c338:	mov	r0, r6
   1c33c:	movw	r1, #1030	; 0x406
   1c340:	mov	r2, r5
   1c344:	bl	112d0 <fcntl64@plt>
   1c348:	mov	r4, r0
   1c34c:	cmn	r0, #1
   1c350:	bgt	1c384 <__assert_fail@plt+0xb00c>
   1c354:	bl	11258 <__errno_location@plt>
   1c358:	ldr	r0, [r0]
   1c35c:	cmp	r0, #22
   1c360:	bne	1c384 <__assert_fail@plt+0xb00c>
   1c364:	mov	r0, r6
   1c368:	mov	r1, r5
   1c36c:	bl	1c308 <__assert_fail@plt+0xaf90>
   1c370:	mov	r4, r0
   1c374:	cmp	r0, #0
   1c378:	bmi	1c3e8 <__assert_fail@plt+0xb070>
   1c37c:	mvn	r0, #0
   1c380:	b	1c388 <__assert_fail@plt+0xb010>
   1c384:	mov	r0, #1
   1c388:	str	r0, [r7]
   1c38c:	cmp	r4, #0
   1c390:	bpl	1c3b0 <__assert_fail@plt+0xb038>
   1c394:	b	1c3e8 <__assert_fail@plt+0xb070>
   1c398:	mov	r0, r6
   1c39c:	mov	r1, r5
   1c3a0:	bl	1c308 <__assert_fail@plt+0xaf90>
   1c3a4:	mov	r4, r0
   1c3a8:	cmp	r4, #0
   1c3ac:	bmi	1c3e8 <__assert_fail@plt+0xb070>
   1c3b0:	ldr	r0, [r7]
   1c3b4:	cmn	r0, #1
   1c3b8:	bne	1c3e8 <__assert_fail@plt+0xb070>
   1c3bc:	mov	r0, r4
   1c3c0:	mov	r1, #1
   1c3c4:	bl	112d0 <fcntl64@plt>
   1c3c8:	cmp	r0, #0
   1c3cc:	bmi	1c3f0 <__assert_fail@plt+0xb078>
   1c3d0:	orr	r2, r0, #1
   1c3d4:	mov	r0, r4
   1c3d8:	mov	r1, #2
   1c3dc:	bl	112d0 <fcntl64@plt>
   1c3e0:	cmn	r0, #1
   1c3e4:	beq	1c3f0 <__assert_fail@plt+0xb078>
   1c3e8:	mov	r0, r4
   1c3ec:	pop	{r4, r5, r6, r7, fp, pc}
   1c3f0:	bl	11258 <__errno_location@plt>
   1c3f4:	mov	r5, r0
   1c3f8:	ldr	r6, [r0]
   1c3fc:	mov	r0, r4
   1c400:	bl	11354 <close@plt>
   1c404:	str	r6, [r5]
   1c408:	mvn	r4, #0
   1c40c:	mov	r0, r4
   1c410:	pop	{r4, r5, r6, r7, fp, pc}
   1c414:	push	{fp, lr}
   1c418:	mov	fp, sp
   1c41c:	bl	11258 <__errno_location@plt>
   1c420:	mov	r1, #12
   1c424:	str	r1, [r0]
   1c428:	mov	r0, #0
   1c42c:	pop	{fp, pc}
   1c430:	b	1be04 <__assert_fail@plt+0xaa8c>
   1c434:	cmp	r1, #0
   1c438:	orreq	r1, r1, #1
   1c43c:	b	1be34 <__assert_fail@plt+0xaabc>
   1c440:	b	1bdb0 <__assert_fail@plt+0xaa38>
   1c444:	clz	r3, r2
   1c448:	lsr	ip, r3, #5
   1c44c:	clz	r3, r1
   1c450:	lsr	r3, r3, #5
   1c454:	orrs	r3, r3, ip
   1c458:	movwne	r1, #1
   1c45c:	movwne	r2, #1
   1c460:	b	1c500 <__assert_fail@plt+0xb188>
   1c464:	push	{fp, lr}
   1c468:	mov	fp, sp
   1c46c:	mov	r0, #14
   1c470:	bl	112f4 <nl_langinfo@plt>
   1c474:	movw	r1, #52331	; 0xcc6b
   1c478:	movt	r1, #1
   1c47c:	cmp	r0, #0
   1c480:	movne	r1, r0
   1c484:	ldrb	r2, [r1]
   1c488:	movw	r0, #56166	; 0xdb66
   1c48c:	movt	r0, #1
   1c490:	cmp	r2, #0
   1c494:	movne	r0, r1
   1c498:	pop	{fp, pc}
   1c49c:	push	{r4, r5, r6, r7, fp, lr}
   1c4a0:	add	fp, sp, #16
   1c4a4:	sub	sp, sp, #8
   1c4a8:	mov	r7, r2
   1c4ac:	mov	r4, r1
   1c4b0:	add	r5, sp, #4
   1c4b4:	cmp	r0, #0
   1c4b8:	movne	r5, r0
   1c4bc:	mov	r0, r5
   1c4c0:	bl	111b0 <mbrtowc@plt>
   1c4c4:	mov	r6, r0
   1c4c8:	cmp	r7, #0
   1c4cc:	beq	1c4f4 <__assert_fail@plt+0xb17c>
   1c4d0:	cmn	r6, #2
   1c4d4:	bcc	1c4f4 <__assert_fail@plt+0xb17c>
   1c4d8:	mov	r0, #0
   1c4dc:	bl	1c53c <__assert_fail@plt+0xb1c4>
   1c4e0:	cmp	r0, #0
   1c4e4:	bne	1c4f4 <__assert_fail@plt+0xb17c>
   1c4e8:	ldrb	r0, [r4]
   1c4ec:	str	r0, [r5]
   1c4f0:	mov	r6, #1
   1c4f4:	mov	r0, r6
   1c4f8:	sub	sp, fp, #16
   1c4fc:	pop	{r4, r5, r6, r7, fp, pc}
   1c500:	cmp	r2, #0
   1c504:	beq	1c534 <__assert_fail@plt+0xb1bc>
   1c508:	mvn	r3, #0
   1c50c:	udiv	r3, r3, r2
   1c510:	cmp	r3, r1
   1c514:	bcs	1c534 <__assert_fail@plt+0xb1bc>
   1c518:	push	{fp, lr}
   1c51c:	mov	fp, sp
   1c520:	bl	11258 <__errno_location@plt>
   1c524:	mov	r1, #12
   1c528:	str	r1, [r0]
   1c52c:	mov	r0, #0
   1c530:	pop	{fp, pc}
   1c534:	mul	r1, r2, r1
   1c538:	b	1be34 <__assert_fail@plt+0xaabc>
   1c53c:	push	{r4, sl, fp, lr}
   1c540:	add	fp, sp, #8
   1c544:	sub	sp, sp, #264	; 0x108
   1c548:	add	r1, sp, #7
   1c54c:	movw	r2, #257	; 0x101
   1c550:	bl	1c5a8 <__assert_fail@plt+0xb230>
   1c554:	mov	r4, #0
   1c558:	cmp	r0, #0
   1c55c:	bne	1c59c <__assert_fail@plt+0xb224>
   1c560:	add	r0, sp, #7
   1c564:	movw	r1, #56172	; 0xdb6c
   1c568:	movt	r1, #1
   1c56c:	mov	r2, #2
   1c570:	bl	11234 <bcmp@plt>
   1c574:	cmp	r0, #0
   1c578:	beq	1c59c <__assert_fail@plt+0xb224>
   1c57c:	add	r0, sp, #7
   1c580:	movw	r1, #56174	; 0xdb6e
   1c584:	movt	r1, #1
   1c588:	mov	r2, #6
   1c58c:	bl	11234 <bcmp@plt>
   1c590:	mov	r4, r0
   1c594:	cmp	r0, #0
   1c598:	movwne	r4, #1
   1c59c:	mov	r0, r4
   1c5a0:	sub	sp, fp, #8
   1c5a4:	pop	{r4, sl, fp, pc}
   1c5a8:	b	1c5ac <__assert_fail@plt+0xb234>
   1c5ac:	push	{r4, r5, r6, r7, fp, lr}
   1c5b0:	add	fp, sp, #16
   1c5b4:	mov	r6, r2
   1c5b8:	mov	r4, r1
   1c5bc:	bl	1c644 <__assert_fail@plt+0xb2cc>
   1c5c0:	cmp	r0, #0
   1c5c4:	beq	1c5f4 <__assert_fail@plt+0xb27c>
   1c5c8:	mov	r7, r0
   1c5cc:	bl	11240 <strlen@plt>
   1c5d0:	cmp	r0, r6
   1c5d4:	bcs	1c610 <__assert_fail@plt+0xb298>
   1c5d8:	add	r2, r0, #1
   1c5dc:	mov	r0, r4
   1c5e0:	mov	r1, r7
   1c5e4:	bl	11120 <memcpy@plt>
   1c5e8:	mov	r5, #0
   1c5ec:	mov	r0, r5
   1c5f0:	pop	{r4, r5, r6, r7, fp, pc}
   1c5f4:	mov	r5, #22
   1c5f8:	cmp	r6, #0
   1c5fc:	beq	1c638 <__assert_fail@plt+0xb2c0>
   1c600:	mov	r0, #0
   1c604:	strb	r0, [r4]
   1c608:	mov	r0, r5
   1c60c:	pop	{r4, r5, r6, r7, fp, pc}
   1c610:	mov	r5, #34	; 0x22
   1c614:	cmp	r6, #0
   1c618:	beq	1c638 <__assert_fail@plt+0xb2c0>
   1c61c:	sub	r6, r6, #1
   1c620:	mov	r0, r4
   1c624:	mov	r1, r7
   1c628:	mov	r2, r6
   1c62c:	bl	11120 <memcpy@plt>
   1c630:	mov	r0, #0
   1c634:	strb	r0, [r4, r6]
   1c638:	mov	r0, r5
   1c63c:	pop	{r4, r5, r6, r7, fp, pc}
   1c640:	b	1c644 <__assert_fail@plt+0xb2cc>
   1c644:	mov	r1, #0
   1c648:	b	112dc <setlocale@plt>
   1c64c:	cmp	r3, #0
   1c650:	cmpeq	r2, #0
   1c654:	bne	1c66c <__assert_fail@plt+0xb2f4>
   1c658:	cmp	r1, #0
   1c65c:	cmpeq	r0, #0
   1c660:	mvnne	r1, #0
   1c664:	mvnne	r0, #0
   1c668:	b	1c688 <__assert_fail@plt+0xb310>
   1c66c:	sub	sp, sp, #8
   1c670:	push	{sp, lr}
   1c674:	bl	1c698 <__assert_fail@plt+0xb320>
   1c678:	ldr	lr, [sp, #4]
   1c67c:	add	sp, sp, #8
   1c680:	pop	{r2, r3}
   1c684:	bx	lr
   1c688:	push	{r1, lr}
   1c68c:	mov	r0, #8
   1c690:	bl	110cc <raise@plt>
   1c694:	pop	{r1, pc}
   1c698:	cmp	r1, r3
   1c69c:	cmpeq	r0, r2
   1c6a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6a4:	mov	r4, r0
   1c6a8:	movcc	r0, #0
   1c6ac:	mov	r5, r1
   1c6b0:	ldr	lr, [sp, #36]	; 0x24
   1c6b4:	movcc	r1, r0
   1c6b8:	bcc	1c7b4 <__assert_fail@plt+0xb43c>
   1c6bc:	cmp	r3, #0
   1c6c0:	clzeq	ip, r2
   1c6c4:	clzne	ip, r3
   1c6c8:	addeq	ip, ip, #32
   1c6cc:	cmp	r5, #0
   1c6d0:	clzeq	r1, r4
   1c6d4:	addeq	r1, r1, #32
   1c6d8:	clzne	r1, r5
   1c6dc:	sub	ip, ip, r1
   1c6e0:	sub	sl, ip, #32
   1c6e4:	lsl	r9, r3, ip
   1c6e8:	rsb	fp, ip, #32
   1c6ec:	orr	r9, r9, r2, lsl sl
   1c6f0:	orr	r9, r9, r2, lsr fp
   1c6f4:	lsl	r8, r2, ip
   1c6f8:	cmp	r5, r9
   1c6fc:	cmpeq	r4, r8
   1c700:	movcc	r0, #0
   1c704:	movcc	r1, r0
   1c708:	bcc	1c724 <__assert_fail@plt+0xb3ac>
   1c70c:	mov	r0, #1
   1c710:	subs	r4, r4, r8
   1c714:	lsl	r1, r0, sl
   1c718:	orr	r1, r1, r0, lsr fp
   1c71c:	lsl	r0, r0, ip
   1c720:	sbc	r5, r5, r9
   1c724:	cmp	ip, #0
   1c728:	beq	1c7b4 <__assert_fail@plt+0xb43c>
   1c72c:	lsr	r6, r8, #1
   1c730:	orr	r6, r6, r9, lsl #31
   1c734:	lsr	r7, r9, #1
   1c738:	mov	r2, ip
   1c73c:	b	1c760 <__assert_fail@plt+0xb3e8>
   1c740:	subs	r3, r4, r6
   1c744:	sbc	r8, r5, r7
   1c748:	adds	r3, r3, r3
   1c74c:	adc	r8, r8, r8
   1c750:	adds	r4, r3, #1
   1c754:	adc	r5, r8, #0
   1c758:	subs	r2, r2, #1
   1c75c:	beq	1c77c <__assert_fail@plt+0xb404>
   1c760:	cmp	r5, r7
   1c764:	cmpeq	r4, r6
   1c768:	bcs	1c740 <__assert_fail@plt+0xb3c8>
   1c76c:	adds	r4, r4, r4
   1c770:	adc	r5, r5, r5
   1c774:	subs	r2, r2, #1
   1c778:	bne	1c760 <__assert_fail@plt+0xb3e8>
   1c77c:	lsr	r3, r4, ip
   1c780:	orr	r3, r3, r5, lsl fp
   1c784:	lsr	r2, r5, ip
   1c788:	orr	r3, r3, r5, lsr sl
   1c78c:	adds	r0, r0, r4
   1c790:	mov	r4, r3
   1c794:	lsl	r3, r2, ip
   1c798:	orr	r3, r3, r4, lsl sl
   1c79c:	lsl	ip, r4, ip
   1c7a0:	orr	r3, r3, r4, lsr fp
   1c7a4:	adc	r1, r1, r5
   1c7a8:	subs	r0, r0, ip
   1c7ac:	mov	r5, r2
   1c7b0:	sbc	r1, r1, r3
   1c7b4:	cmp	lr, #0
   1c7b8:	strdne	r4, [lr]
   1c7bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c7c4:	mov	r7, r0
   1c7c8:	ldr	r6, [pc, #72]	; 1c818 <__assert_fail@plt+0xb4a0>
   1c7cc:	ldr	r5, [pc, #72]	; 1c81c <__assert_fail@plt+0xb4a4>
   1c7d0:	add	r6, pc, r6
   1c7d4:	add	r5, pc, r5
   1c7d8:	sub	r6, r6, r5
   1c7dc:	mov	r8, r1
   1c7e0:	mov	r9, r2
   1c7e4:	bl	11088 <fdopen@plt-0x20>
   1c7e8:	asrs	r6, r6, #2
   1c7ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c7f0:	mov	r4, #0
   1c7f4:	add	r4, r4, #1
   1c7f8:	ldr	r3, [r5], #4
   1c7fc:	mov	r2, r9
   1c800:	mov	r1, r8
   1c804:	mov	r0, r7
   1c808:	blx	r3
   1c80c:	cmp	r6, r4
   1c810:	bne	1c7f4 <__assert_fail@plt+0xb47c>
   1c814:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c818:	andeq	r1, r1, r4, lsr r7
   1c81c:	andeq	r1, r1, ip, lsr #14
   1c820:	bx	lr
   1c824:	ldr	r3, [pc, #12]	; 1c838 <__assert_fail@plt+0xb4c0>
   1c828:	mov	r1, #0
   1c82c:	add	r3, pc, r3
   1c830:	ldr	r2, [r3]
   1c834:	b	11264 <__cxa_atexit@plt>
   1c838:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

0001c83c <.fini>:
   1c83c:	push	{r3, lr}
   1c840:	pop	{r3, pc}
