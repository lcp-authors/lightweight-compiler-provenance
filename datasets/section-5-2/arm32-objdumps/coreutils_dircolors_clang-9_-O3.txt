
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010e8c <.init>:
   10e8c:	push	{r3, lr}
   10e90:	bl	11140 <close@plt+0x48>
   10e94:	pop	{r3, pc}

Disassembly of section .plt:

00010e98 <calloc@plt-0x14>:
   10e98:	push	{lr}		; (str lr, [sp, #-4]!)
   10e9c:	ldr	lr, [pc, #4]	; 10ea8 <calloc@plt-0x4>
   10ea0:	add	lr, pc, lr
   10ea4:	ldr	pc, [lr, #8]!
   10ea8:	andeq	r7, r1, r8, asr r1

00010eac <calloc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #344]!	; 0x158

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #336]!	; 0x150

00010ec4 <__getdelim@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #328]!	; 0x148

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #320]!	; 0x140

00010edc <fflush@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #312]!	; 0x138

00010ee8 <free@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #304]!	; 0x130

00010ef4 <_exit@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #296]!	; 0x128

00010f00 <memcpy@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #288]!	; 0x120

00010f0c <mbsinit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #280]!	; 0x118

00010f18 <fwrite_unlocked@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #272]!	; 0x110

00010f24 <dcgettext@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #264]!	; 0x108

00010f30 <dup2@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #256]!	; 0x100

00010f3c <realloc@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #248]!	; 0xf8

00010f48 <textdomain@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #240]!	; 0xf0

00010f54 <iswprint@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #232]!	; 0xe8

00010f60 <fwrite@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #224]!	; 0xe0

00010f6c <lseek64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #216]!	; 0xd8

00010f78 <__ctype_get_mb_cur_max@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #208]!	; 0xd0

00010f84 <__fpending@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #200]!	; 0xc8

00010f90 <mbrtowc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #192]!	; 0xc0

00010f9c <error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #184]!	; 0xb8

00010fa8 <fnmatch@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #176]!	; 0xb0

00010fb4 <open64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #168]!	; 0xa8

00010fc0 <getenv@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #160]!	; 0xa0

00010fcc <puts@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #152]!	; 0x98

00010fd8 <malloc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #144]!	; 0x90

00010fe4 <__libc_start_main@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #136]!	; 0x88

00010ff0 <__freading@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #128]!	; 0x80

00010ffc <__gmon_start__@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #120]!	; 0x78

00011008 <freopen64@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #112]!	; 0x70

00011014 <getopt_long@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #104]!	; 0x68

00011020 <__ctype_b_loc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #96]!	; 0x60

0001102c <exit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #88]!	; 0x58

00011038 <bcmp@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #80]!	; 0x50

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #72]!	; 0x48

00011050 <__errno_location@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #64]!	; 0x40

0001105c <__cxa_atexit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #56]!	; 0x38

00011068 <memset@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #48]!	; 0x30

00011074 <__printf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #40]!	; 0x28

00011080 <fileno@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #32]!

0001108c <__fprintf_chk@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #24]!

00011098 <fclose@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #16]!

000110a4 <fseeko64@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #8]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #0]!

000110bc <strrchr@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4088]!	; 0xff8

000110c8 <nl_langinfo@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4080]!	; 0xff0

000110d4 <bindtextdomain@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4072]!	; 0xfe8

000110e0 <strncmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110ec <abort@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f8 <close@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4048]!	; 0xfd0

Disassembly of section .text:

00011104 <_obstack_begin@@Base-0x1a2c>:
   11104:	mov	fp, #0
   11108:	mov	lr, #0
   1110c:	pop	{r1}		; (ldr r1, [sp], #4)
   11110:	mov	r2, sp
   11114:	push	{r2}		; (str r2, [sp, #-4]!)
   11118:	push	{r0}		; (str r0, [sp, #-4]!)
   1111c:	ldr	ip, [pc, #16]	; 11134 <close@plt+0x3c>
   11120:	push	{ip}		; (str ip, [sp, #-4]!)
   11124:	ldr	r0, [pc, #12]	; 11138 <close@plt+0x40>
   11128:	ldr	r3, [pc, #12]	; 1113c <close@plt+0x44>
   1112c:	bl	10fe4 <__libc_start_main@plt>
   11130:	bl	110ec <abort@plt>
   11134:	andeq	r5, r1, r0, lsl #30
   11138:	andeq	r1, r1, r4, asr r4
   1113c:	andeq	r5, r1, r0, lsr #29
   11140:	ldr	r3, [pc, #20]	; 1115c <close@plt+0x64>
   11144:	ldr	r2, [pc, #20]	; 11160 <close@plt+0x68>
   11148:	add	r3, pc, r3
   1114c:	ldr	r2, [r3, r2]
   11150:	cmp	r2, #0
   11154:	bxeq	lr
   11158:	b	10ffc <__gmon_start__@plt>
   1115c:			; <UNDEFINED> instruction: 0x00016eb0
   11160:	ldrdeq	r0, [r0], -r4
   11164:	ldr	r0, [pc, #24]	; 11184 <close@plt+0x8c>
   11168:	ldr	r3, [pc, #24]	; 11188 <close@plt+0x90>
   1116c:	cmp	r3, r0
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <close@plt+0x94>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r8, r2, r0, lsr r1
   11188:	andeq	r8, r2, r0, lsr r1
   1118c:	andeq	r0, r0, r0
   11190:	ldr	r0, [pc, #36]	; 111bc <close@plt+0xc4>
   11194:	ldr	r1, [pc, #36]	; 111c0 <close@plt+0xc8>
   11198:	sub	r1, r1, r0
   1119c:	asr	r1, r1, #2
   111a0:	add	r1, r1, r1, lsr #31
   111a4:	asrs	r1, r1, #1
   111a8:	bxeq	lr
   111ac:	ldr	r3, [pc, #16]	; 111c4 <close@plt+0xcc>
   111b0:	cmp	r3, #0
   111b4:	bxeq	lr
   111b8:	bx	r3
   111bc:	andeq	r8, r2, r0, lsr r1
   111c0:	andeq	r8, r2, r0, lsr r1
   111c4:	andeq	r0, r0, r0
   111c8:	push	{r4, lr}
   111cc:	ldr	r4, [pc, #24]	; 111ec <close@plt+0xf4>
   111d0:	ldrb	r3, [r4]
   111d4:	cmp	r3, #0
   111d8:	popne	{r4, pc}
   111dc:	bl	11164 <close@plt+0x6c>
   111e0:	mov	r3, #1
   111e4:	strb	r3, [r4]
   111e8:	pop	{r4, pc}
   111ec:	andeq	r8, r2, r0, asr r1
   111f0:	b	11190 <close@plt+0x98>
   111f4:	push	{fp, lr}
   111f8:	mov	fp, sp
   111fc:	sub	sp, sp, #56	; 0x38
   11200:	mov	r4, r0
   11204:	cmp	r0, #0
   11208:	bne	11410 <close@plt+0x318>
   1120c:	movw	r1, #24403	; 0x5f53
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10f24 <dcgettext@plt>
   11220:	mov	r1, r0
   11224:	movw	r0, #33160	; 0x8188
   11228:	movt	r0, #2
   1122c:	ldr	r2, [r0]
   11230:	mov	r0, #1
   11234:	bl	11074 <__printf_chk@plt>
   11238:	movw	r1, #24433	; 0x5f71
   1123c:	mov	r0, #0
   11240:	mov	r2, #5
   11244:	movt	r1, #1
   11248:	bl	10f24 <dcgettext@plt>
   1124c:	movw	r7, #33100	; 0x814c
   11250:	movt	r7, #2
   11254:	ldr	r1, [r7]
   11258:	bl	10eb8 <fputs_unlocked@plt>
   1125c:	movw	r1, #24707	; 0x6083
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10f24 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10eb8 <fputs_unlocked@plt>
   11278:	movw	r1, #24752	; 0x60b0
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10f24 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10eb8 <fputs_unlocked@plt>
   11294:	movw	r1, #24806	; 0x60e6
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10f24 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10eb8 <fputs_unlocked@plt>
   112b0:	movw	r0, #30624	; 0x77a0
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movw	r5, #25028	; 0x61c4
   112c0:	movt	r0, #1
   112c4:	movt	r5, #1
   112c8:	add	r1, r0, #32
   112cc:	add	r3, r0, #16
   112d0:	vld1.64	{d18-d19}, [r0], r2
   112d4:	vld1.64	{d16-d17}, [r1]
   112d8:	vld1.64	{d20-d21}, [r3]
   112dc:	vldr	d22, [r0]
   112e0:	add	r1, r6, #32
   112e4:	add	r0, r6, #16
   112e8:	vst1.64	{d16-d17}, [r1]
   112ec:	movw	r1, #25389	; 0x632d
   112f0:	vst1.64	{d20-d21}, [r0]
   112f4:	mov	r0, r6
   112f8:	movt	r1, #1
   112fc:	vst1.64	{d18-d19}, [r0], r2
   11300:	vstr	d22, [r0]
   11304:	mov	r0, r5
   11308:	bl	10ed0 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	ldrne	r1, [r6, #8]!
   11314:	cmpne	r1, #0
   11318:	bne	11304 <close@plt+0x20c>
   1131c:	movw	r1, #25484	; 0x638c
   11320:	ldr	r6, [r6, #4]
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10f24 <dcgettext@plt>
   11334:	movw	r2, #25066	; 0x61ea
   11338:	movw	r3, #25507	; 0x63a3
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	movt	r2, #1
   11348:	movt	r3, #1
   1134c:	bl	11074 <__printf_chk@plt>
   11350:	cmp	r6, #0
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	moveq	r6, r5
   11360:	bl	110b0 <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a0 <close@plt+0x2a8>
   1136c:	movw	r1, #25547	; 0x63cb
   11370:	mov	r2, #3
   11374:	movt	r1, #1
   11378:	bl	110e0 <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a0 <close@plt+0x2a8>
   11384:	movw	r1, #25551	; 0x63cf
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	movt	r1, #1
   11394:	bl	10f24 <dcgettext@plt>
   11398:	ldr	r1, [r7]
   1139c:	bl	10eb8 <fputs_unlocked@plt>
   113a0:	movw	r1, #25622	; 0x6416
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10f24 <dcgettext@plt>
   113b4:	movw	r2, #25507	; 0x63a3
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	mov	r3, r5
   113c4:	movt	r2, #1
   113c8:	bl	11074 <__printf_chk@plt>
   113cc:	movw	r1, #25649	; 0x6431
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10f24 <dcgettext@plt>
   113e0:	mov	r1, r0
   113e4:	movw	r0, #25417	; 0x6349
   113e8:	movw	r3, #25699	; 0x6463
   113ec:	cmp	r6, r5
   113f0:	mov	r2, r6
   113f4:	movt	r0, #1
   113f8:	movt	r3, #1
   113fc:	moveq	r3, r0
   11400:	mov	r0, #1
   11404:	bl	11074 <__printf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	1102c <exit@plt>
   11410:	movw	r0, #33088	; 0x8140
   11414:	movw	r1, #24364	; 0x5f2c
   11418:	mov	r2, #5
   1141c:	movt	r0, #2
   11420:	movt	r1, #1
   11424:	ldr	r5, [r0]
   11428:	mov	r0, #0
   1142c:	bl	10f24 <dcgettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r0, #33160	; 0x8188
   11438:	mov	r1, #1
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r0]
   11444:	mov	r0, r5
   11448:	bl	1108c <__fprintf_chk@plt>
   1144c:	mov	r0, r4
   11450:	bl	1102c <exit@plt>
   11454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11458:	add	fp, sp, #28
   1145c:	sub	sp, sp, #12
   11460:	mov	sl, r0
   11464:	ldr	r0, [r1]
   11468:	mov	r5, r1
   1146c:	bl	12f44 <_obstack_memory_used@@Base+0x78>
   11470:	movw	r1, #25699	; 0x6463
   11474:	mov	r0, #6
   11478:	movt	r1, #1
   1147c:	bl	110b0 <setlocale@plt>
   11480:	movw	r6, #25070	; 0x61ee
   11484:	movw	r1, #25038	; 0x61ce
   11488:	movt	r6, #1
   1148c:	movt	r1, #1
   11490:	mov	r0, r6
   11494:	bl	110d4 <bindtextdomain@plt>
   11498:	mov	r0, r6
   1149c:	bl	10f48 <textdomain@plt>
   114a0:	movw	r0, #9744	; 0x2610
   114a4:	movt	r0, #1
   114a8:	bl	15f04 <_obstack_memory_used@@Base+0x3038>
   114ac:	movw	r8, #25062	; 0x61e6
   114b0:	movw	r9, #26184	; 0x6648
   114b4:	mov	r6, #2
   114b8:	mov	r7, #0
   114bc:	movt	r8, #1
   114c0:	movt	r9, #1
   114c4:	mov	r4, r6
   114c8:	mov	r6, #0
   114cc:	mov	r0, sl
   114d0:	mov	r1, r5
   114d4:	mov	r2, r8
   114d8:	mov	r3, r9
   114dc:	str	r6, [sp]
   114e0:	bl	11014 <getopt_long@plt>
   114e4:	cmp	r0, #97	; 0x61
   114e8:	ble	11518 <close@plt+0x420>
   114ec:	cmp	r0, #98	; 0x62
   114f0:	beq	114c4 <close@plt+0x3cc>
   114f4:	cmp	r0, #112	; 0x70
   114f8:	bne	11508 <close@plt+0x410>
   114fc:	mov	r7, #1
   11500:	mov	r6, r4
   11504:	b	114c4 <close@plt+0x3cc>
   11508:	cmp	r0, #99	; 0x63
   1150c:	bne	118d0 <close@plt+0x7d8>
   11510:	mov	r6, #1
   11514:	b	114c4 <close@plt+0x3cc>
   11518:	cmn	r0, #1
   1151c:	bne	117d0 <close@plt+0x6d8>
   11520:	sub	r1, r4, #2
   11524:	mvn	r0, r7
   11528:	clz	r1, r1
   1152c:	lsr	r1, r1, #5
   11530:	orr	r0, r0, r1
   11534:	tst	r0, #1
   11538:	beq	11830 <close@plt+0x738>
   1153c:	movw	r0, #33080	; 0x8138
   11540:	movt	r0, #2
   11544:	ldr	r0, [r0]
   11548:	add	r8, r5, r0, lsl #2
   1154c:	sub	r5, sl, r0
   11550:	mov	r0, #1
   11554:	bic	r6, r0, r7
   11558:	cmp	r5, r6
   1155c:	bgt	1185c <close@plt+0x764>
   11560:	tst	r7, #1
   11564:	beq	115a8 <close@plt+0x4b0>
   11568:	movw	r5, #26312	; 0x66c8
   1156c:	movw	r6, #4310	; 0x10d6
   11570:	movt	r5, #1
   11574:	mov	r4, r5
   11578:	mov	r0, r4
   1157c:	bl	10fcc <puts@plt>
   11580:	mov	r0, r4
   11584:	bl	11044 <strlen@plt>
   11588:	add	r0, r0, r4
   1158c:	add	r4, r0, #1
   11590:	sub	r0, r4, r5
   11594:	cmp	r0, r6
   11598:	bcc	11578 <close@plt+0x480>
   1159c:	mov	r0, #0
   115a0:	sub	sp, fp, #28
   115a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115a8:	cmp	r4, #2
   115ac:	bne	1162c <close@plt+0x534>
   115b0:	movw	r0, #25749	; 0x6495
   115b4:	movt	r0, #1
   115b8:	bl	10fc0 <getenv@plt>
   115bc:	cmp	r0, #0
   115c0:	ldrbne	r1, [r0]
   115c4:	cmpne	r1, #0
   115c8:	bne	115f0 <close@plt+0x4f8>
   115cc:	movw	r1, #25275	; 0x62bb
   115d0:	mov	r0, #0
   115d4:	mov	r2, #5
   115d8:	movt	r1, #1
   115dc:	bl	10f24 <dcgettext@plt>
   115e0:	mov	r2, r0
   115e4:	mov	r0, #1
   115e8:	mov	r1, #0
   115ec:	bl	10f9c <error@plt>
   115f0:	bl	12504 <close@plt+0x140c>
   115f4:	movw	r1, #25756	; 0x649c
   115f8:	mov	r4, r0
   115fc:	movt	r1, #1
   11600:	bl	10ed0 <strcmp@plt>
   11604:	cmp	r0, #0
   11608:	beq	11628 <close@plt+0x530>
   1160c:	movw	r1, #25755	; 0x649b
   11610:	mov	r0, r4
   11614:	movt	r1, #1
   11618:	bl	10ed0 <strcmp@plt>
   1161c:	clz	r0, r0
   11620:	lsr	r4, r0, #5
   11624:	b	1162c <close@plt+0x534>
   11628:	mov	r4, #1
   1162c:	movw	r0, #10228	; 0x27f4
   11630:	movw	r9, #33108	; 0x8154
   11634:	movw	r3, #23476	; 0x5bb4
   11638:	mov	r1, #0
   1163c:	mov	r2, #0
   11640:	movt	r0, #1
   11644:	movt	r9, #2
   11648:	movt	r3, #1
   1164c:	str	r0, [sp]
   11650:	mov	r0, r9
   11654:	bl	12b30 <_obstack_begin@@Base>
   11658:	cmp	r5, #0
   1165c:	beq	116fc <close@plt+0x604>
   11660:	ldr	r5, [r8]
   11664:	movw	r1, #30959	; 0x78ef
   11668:	movt	r1, #1
   1166c:	mov	r0, r5
   11670:	bl	10ed0 <strcmp@plt>
   11674:	movw	r6, #33096	; 0x8148
   11678:	cmp	r0, #0
   1167c:	movt	r6, #2
   11680:	beq	116a0 <close@plt+0x5a8>
   11684:	ldr	r2, [r6]
   11688:	movw	r1, #30857	; 0x7889
   1168c:	mov	r0, r5
   11690:	movt	r1, #1
   11694:	bl	1281c <close@plt+0x1724>
   11698:	cmp	r0, #0
   1169c:	beq	116c0 <close@plt+0x5c8>
   116a0:	ldr	r0, [r6]
   116a4:	mov	r1, r5
   116a8:	bl	118d8 <close@plt+0x7e0>
   116ac:	mov	r7, r0
   116b0:	ldr	r0, [r6]
   116b4:	bl	126fc <close@plt+0x1604>
   116b8:	cmp	r0, #0
   116bc:	beq	117c0 <close@plt+0x6c8>
   116c0:	bl	11050 <__errno_location@plt>
   116c4:	ldr	r4, [r0]
   116c8:	mov	r0, #0
   116cc:	mov	r1, #3
   116d0:	mov	r2, r5
   116d4:	bl	14c5c <_obstack_memory_used@@Base+0x1d90>
   116d8:	movw	r2, #30863	; 0x788f
   116dc:	mov	r3, r0
   116e0:	mov	r0, #0
   116e4:	mov	r1, r4
   116e8:	movt	r2, #1
   116ec:	bl	10f9c <error@plt>
   116f0:	mov	r0, #1
   116f4:	sub	sp, fp, #28
   116f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116fc:	mov	r0, #0
   11700:	mov	r1, #0
   11704:	bl	118d8 <close@plt+0x7e0>
   11708:	mov	r1, r0
   1170c:	mov	r0, #1
   11710:	cmp	r1, #0
   11714:	beq	115a0 <close@plt+0x4a8>
   11718:	ldr	r5, [r9, #8]
   1171c:	ldr	r0, [r9, #12]
   11720:	subs	r7, r0, r5
   11724:	bne	11734 <close@plt+0x63c>
   11728:	ldrb	r1, [r9, #40]	; 0x28
   1172c:	orr	r1, r1, #2
   11730:	strb	r1, [r9, #40]	; 0x28
   11734:	ldr	r3, [r9, #24]
   11738:	ldr	r1, [r9, #4]
   1173c:	ldr	r2, [r9, #16]
   11740:	movw	r6, #33100	; 0x814c
   11744:	movt	r6, #2
   11748:	add	r0, r3, r0
   1174c:	bic	r0, r0, r3
   11750:	sub	r3, r0, r1
   11754:	sub	r1, r2, r1
   11758:	cmp	r3, r1
   1175c:	movw	r1, #25337	; 0x62f9
   11760:	movhi	r0, r2
   11764:	movt	r1, #1
   11768:	cmp	r4, #0
   1176c:	str	r0, [r9, #8]
   11770:	str	r0, [r9, #12]
   11774:	movw	r0, #25370	; 0x631a
   11778:	movt	r0, #1
   1177c:	moveq	r0, r1
   11780:	ldr	r1, [r6]
   11784:	bl	10eb8 <fputs_unlocked@plt>
   11788:	ldr	r3, [r6]
   1178c:	mov	r0, r5
   11790:	mov	r1, #1
   11794:	mov	r2, r7
   11798:	bl	10f18 <fwrite_unlocked@plt>
   1179c:	movw	r1, #25349	; 0x6305
   117a0:	movw	r0, #25697	; 0x6461
   117a4:	cmp	r4, #0
   117a8:	movt	r1, #1
   117ac:	movt	r0, #1
   117b0:	moveq	r0, r1
   117b4:	ldr	r1, [r6]
   117b8:	bl	10eb8 <fputs_unlocked@plt>
   117bc:	b	1159c <close@plt+0x4a4>
   117c0:	mov	r0, #1
   117c4:	cmp	r7, #0
   117c8:	beq	115a0 <close@plt+0x4a8>
   117cc:	b	11718 <close@plt+0x620>
   117d0:	cmn	r0, #3
   117d4:	bne	11820 <close@plt+0x728>
   117d8:	movw	r0, #32992	; 0x80e0
   117dc:	movw	r2, #25080	; 0x61f8
   117e0:	mov	r1, #0
   117e4:	movt	r0, #2
   117e8:	movt	r2, #1
   117ec:	str	r1, [sp, #4]
   117f0:	movw	r1, #25028	; 0x61c4
   117f4:	movt	r1, #1
   117f8:	ldr	r3, [r0]
   117fc:	movw	r0, #33100	; 0x814c
   11800:	str	r2, [sp]
   11804:	movw	r2, #25066	; 0x61ea
   11808:	movt	r0, #2
   1180c:	movt	r2, #1
   11810:	ldr	r0, [r0]
   11814:	bl	153ac <_obstack_memory_used@@Base+0x24e0>
   11818:	mov	r0, #0
   1181c:	bl	1102c <exit@plt>
   11820:	cmn	r0, #2
   11824:	bne	118d0 <close@plt+0x7d8>
   11828:	mov	r0, #0
   1182c:	bl	111f4 <close@plt+0xfc>
   11830:	movw	r1, #25095	; 0x6207
   11834:	mov	r0, #0
   11838:	mov	r2, #5
   1183c:	movt	r1, #1
   11840:	bl	10f24 <dcgettext@plt>
   11844:	mov	r2, r0
   11848:	mov	r0, #0
   1184c:	mov	r1, #0
   11850:	bl	10f9c <error@plt>
   11854:	mov	r0, #1
   11858:	bl	111f4 <close@plt+0xfc>
   1185c:	movw	r1, #25198	; 0x626e
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	movt	r1, #1
   1186c:	bl	10f24 <dcgettext@plt>
   11870:	mov	r4, r0
   11874:	ldr	r0, [r8, r6, lsl #2]
   11878:	bl	14f08 <_obstack_memory_used@@Base+0x203c>
   1187c:	mov	r3, r0
   11880:	mov	r0, #0
   11884:	mov	r1, #0
   11888:	mov	r2, r4
   1188c:	bl	10f9c <error@plt>
   11890:	tst	r7, #1
   11894:	beq	118d0 <close@plt+0x7d8>
   11898:	movw	r0, #33088	; 0x8140
   1189c:	movw	r1, #25215	; 0x627f
   118a0:	mov	r2, #5
   118a4:	movt	r0, #2
   118a8:	movt	r1, #1
   118ac:	ldr	r4, [r0]
   118b0:	mov	r0, #0
   118b4:	bl	10f24 <dcgettext@plt>
   118b8:	movw	r2, #31144	; 0x79a8
   118bc:	mov	r3, r0
   118c0:	mov	r0, r4
   118c4:	mov	r1, #1
   118c8:	movt	r2, #1
   118cc:	bl	1108c <__fprintf_chk@plt>
   118d0:	mov	r0, #1
   118d4:	bl	111f4 <close@plt+0xfc>
   118d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118dc:	add	fp, sp, #28
   118e0:	sub	sp, sp, #44	; 0x2c
   118e4:	mov	r5, r0
   118e8:	mov	r0, #0
   118ec:	mov	sl, r1
   118f0:	str	r0, [fp, #-32]	; 0xffffffe0
   118f4:	str	r0, [sp, #36]	; 0x24
   118f8:	movw	r0, #25760	; 0x64a0
   118fc:	movt	r0, #1
   11900:	bl	10fc0 <getenv@plt>
   11904:	cmp	r0, #0
   11908:	beq	11918 <close@plt+0x820>
   1190c:	ldrb	r1, [r0]
   11910:	cmp	r1, #0
   11914:	bne	11920 <close@plt+0x828>
   11918:	movw	r0, #25765	; 0x64a5
   1191c:	movt	r0, #1
   11920:	movw	r7, #26312	; 0x66c8
   11924:	str	r0, [sp, #12]
   11928:	mov	r0, #1
   1192c:	mov	r9, #0
   11930:	movt	r7, #1
   11934:	str	r0, [sp, #28]
   11938:	mov	r0, #3
   1193c:	str	r0, [sp, #16]
   11940:	movw	r0, #4310	; 0x10d6
   11944:	add	r0, r7, r0
   11948:	str	r0, [sp, #32]
   1194c:	cmp	r5, #0
   11950:	beq	1197c <close@plt+0x884>
   11954:	sub	r0, fp, #32
   11958:	add	r1, sp, #36	; 0x24
   1195c:	mov	r2, #10
   11960:	mov	r3, r5
   11964:	bl	10ec4 <__getdelim@plt>
   11968:	mov	r1, r0
   1196c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11970:	cmp	r1, #0
   11974:	bgt	119a0 <close@plt+0x8a8>
   11978:	b	122dc <close@plt+0x11e4>
   1197c:	ldr	r0, [sp, #32]
   11980:	cmp	r7, r0
   11984:	beq	122e0 <close@plt+0x11e8>
   11988:	mov	r0, r7
   1198c:	bl	11044 <strlen@plt>
   11990:	add	r0, r0, r7
   11994:	add	r1, r0, #1
   11998:	mov	r0, r7
   1199c:	mov	r7, r1
   119a0:	add	r9, r9, #1
   119a4:	add	r6, r0, #3
   119a8:	sub	r4, r0, #1
   119ac:	bl	11020 <__ctype_b_loc@plt>
   119b0:	mov	r8, r0
   119b4:	ldr	r0, [r0]
   119b8:	ldrb	r2, [r4, #1]!
   119bc:	mov	r1, r6
   119c0:	add	r6, r6, #1
   119c4:	add	r3, r0, r2, lsl #1
   119c8:	ldrb	r3, [r3, #1]
   119cc:	tst	r3, #32
   119d0:	bne	119b8 <close@plt+0x8c0>
   119d4:	cmp	r2, #0
   119d8:	cmpne	r2, #35	; 0x23
   119dc:	beq	1194c <close@plt+0x854>
   119e0:	mov	r6, r4
   119e4:	str	sl, [sp, #20]
   119e8:	mov	sl, r1
   119ec:	ldrb	r1, [r6, #1]!
   119f0:	cmp	r1, #0
   119f4:	beq	11a0c <close@plt+0x914>
   119f8:	add	r1, r0, r1, lsl #1
   119fc:	ldrh	r1, [r1]
   11a00:	ands	r1, r1, #8192	; 0x2000
   11a04:	add	r1, sl, #1
   11a08:	beq	119e8 <close@plt+0x8f0>
   11a0c:	sub	r1, r6, r4
   11a10:	mov	r0, r4
   11a14:	bl	15aa8 <_obstack_memory_used@@Base+0x2bdc>
   11a18:	str	r0, [sp, #24]
   11a1c:	ldrb	r0, [r6]
   11a20:	cmp	r0, #0
   11a24:	beq	11a54 <close@plt+0x95c>
   11a28:	ldr	r0, [r8]
   11a2c:	ldrb	r2, [r6, #1]!
   11a30:	mov	r1, sl
   11a34:	add	sl, sl, #1
   11a38:	add	r3, r0, r2, lsl #1
   11a3c:	ldrb	r3, [r3, #1]
   11a40:	tst	r3, #32
   11a44:	bne	11a2c <close@plt+0x934>
   11a48:	cmp	r2, #0
   11a4c:	cmpne	r2, #35	; 0x23
   11a50:	bne	11ab4 <close@plt+0x9bc>
   11a54:	movw	r1, #25770	; 0x64aa
   11a58:	mov	r0, #0
   11a5c:	mov	r2, #5
   11a60:	movt	r1, #1
   11a64:	str	r0, [sp, #28]
   11a68:	mov	r0, #0
   11a6c:	bl	10f24 <dcgettext@plt>
   11a70:	ldr	sl, [sp, #20]
   11a74:	mov	r4, r0
   11a78:	mov	r0, #0
   11a7c:	mov	r1, #3
   11a80:	mov	r2, sl
   11a84:	bl	14c5c <_obstack_memory_used@@Base+0x1d90>
   11a88:	mov	r3, r0
   11a8c:	mov	r0, #0
   11a90:	mov	r1, #0
   11a94:	mov	r2, r4
   11a98:	str	r9, [sp]
   11a9c:	bl	10f9c <error@plt>
   11aa0:	ldr	r0, [sp, #24]
   11aa4:	bl	127f4 <close@plt+0x16fc>
   11aa8:	cmp	r5, #0
   11aac:	bne	11954 <close@plt+0x85c>
   11ab0:	b	1197c <close@plt+0x884>
   11ab4:	ldr	r8, [sp, #24]
   11ab8:	mov	r3, r6
   11abc:	uxtb	r2, r2
   11ac0:	cmp	r2, #35	; 0x23
   11ac4:	cmpne	r2, #0
   11ac8:	beq	11ae4 <close@plt+0x9ec>
   11acc:	ldrb	r2, [r3, #1]!
   11ad0:	add	r1, r1, #1
   11ad4:	uxtb	r2, r2
   11ad8:	cmp	r2, #35	; 0x23
   11adc:	cmpne	r2, #0
   11ae0:	bne	11acc <close@plt+0x9d4>
   11ae4:	movw	r4, #33108	; 0x8154
   11ae8:	movt	r4, #2
   11aec:	ldrb	r2, [r1, #-2]
   11af0:	sub	r1, r1, #1
   11af4:	add	r2, r0, r2, lsl #1
   11af8:	ldrb	r2, [r2, #1]
   11afc:	tst	r2, #32
   11b00:	bne	11aec <close@plt+0x9f4>
   11b04:	sub	r1, r1, r6
   11b08:	mov	r0, r6
   11b0c:	bl	15aa8 <_obstack_memory_used@@Base+0x2bdc>
   11b10:	movw	r1, #25760	; 0x64a0
   11b14:	mov	r6, r0
   11b18:	mov	r0, r8
   11b1c:	movt	r1, #1
   11b20:	bl	1259c <close@plt+0x14a4>
   11b24:	ldr	sl, [sp, #20]
   11b28:	cmp	r0, #0
   11b2c:	beq	11c00 <close@plt+0xb08>
   11b30:	ldr	r0, [sp, #16]
   11b34:	cmp	r0, #2
   11b38:	movweq	r0, #1
   11b3c:	cmp	r0, #0
   11b40:	beq	11c34 <close@plt+0xb3c>
   11b44:	str	r0, [sp, #16]
   11b48:	ldrb	r0, [r8]
   11b4c:	cmp	r0, #42	; 0x2a
   11b50:	beq	11b8c <close@plt+0xa94>
   11b54:	cmp	r0, #46	; 0x2e
   11b58:	bne	11c4c <close@plt+0xb54>
   11b5c:	ldr	r0, [r4, #12]
   11b60:	ldr	r1, [r4, #16]
   11b64:	cmp	r1, r0
   11b68:	bne	11b7c <close@plt+0xa84>
   11b6c:	mov	r0, r4
   11b70:	mov	r1, #1
   11b74:	bl	12c84 <_obstack_newchunk@@Base>
   11b78:	ldr	r0, [r4, #12]
   11b7c:	add	r1, r0, #1
   11b80:	str	r1, [r4, #12]
   11b84:	mov	r1, #42	; 0x2a
   11b88:	strb	r1, [r0]
   11b8c:	mov	r0, r8
   11b90:	bl	122f0 <close@plt+0x11f8>
   11b94:	ldr	r0, [r4, #12]
   11b98:	ldr	r1, [r4, #16]
   11b9c:	cmp	r1, r0
   11ba0:	bne	11bb4 <close@plt+0xabc>
   11ba4:	mov	r0, r4
   11ba8:	mov	r1, #1
   11bac:	bl	12c84 <_obstack_newchunk@@Base>
   11bb0:	ldr	r0, [r4, #12]
   11bb4:	add	r1, r0, #1
   11bb8:	str	r1, [r4, #12]
   11bbc:	mov	r1, #61	; 0x3d
   11bc0:	strb	r1, [r0]
   11bc4:	mov	r0, r6
   11bc8:	bl	122f0 <close@plt+0x11f8>
   11bcc:	ldr	r0, [r4, #12]
   11bd0:	ldr	r1, [r4, #16]
   11bd4:	cmp	r1, r0
   11bd8:	bne	11bec <close@plt+0xaf4>
   11bdc:	mov	r0, r4
   11be0:	mov	r1, #1
   11be4:	bl	12c84 <_obstack_newchunk@@Base>
   11be8:	ldr	r0, [r4, #12]
   11bec:	add	r1, r0, #1
   11bf0:	str	r1, [r4, #12]
   11bf4:	mov	r1, #58	; 0x3a
   11bf8:	strb	r1, [r0]
   11bfc:	b	122c0 <close@plt+0x11c8>
   11c00:	ldr	r1, [sp, #12]
   11c04:	mov	r0, r6
   11c08:	mov	r2, #0
   11c0c:	bl	10fa8 <fnmatch@plt>
   11c10:	cmp	r0, #0
   11c14:	beq	11c40 <close@plt+0xb48>
   11c18:	ldr	r0, [sp, #16]
   11c1c:	sub	r0, r0, #2
   11c20:	clz	r0, r0
   11c24:	lsr	r0, r0, #5
   11c28:	lsl	r0, r0, #1
   11c2c:	str	r0, [sp, #16]
   11c30:	b	122c0 <close@plt+0x11c8>
   11c34:	mov	r0, #0
   11c38:	str	r0, [sp, #16]
   11c3c:	b	122c0 <close@plt+0x11c8>
   11c40:	mov	r0, #2
   11c44:	str	r0, [sp, #16]
   11c48:	b	122c0 <close@plt+0x11c8>
   11c4c:	movw	r1, #25814	; 0x64d6
   11c50:	mov	r0, r8
   11c54:	movt	r1, #1
   11c58:	bl	1259c <close@plt+0x14a4>
   11c5c:	cmp	r0, #0
   11c60:	beq	122c0 <close@plt+0x11c8>
   11c64:	movw	r1, #25822	; 0x64de
   11c68:	mov	r0, r8
   11c6c:	movt	r1, #1
   11c70:	bl	1259c <close@plt+0x14a4>
   11c74:	cmp	r0, #0
   11c78:	beq	122c0 <close@plt+0x11c8>
   11c7c:	movw	r1, #25828	; 0x64e4
   11c80:	mov	r0, r8
   11c84:	movt	r1, #1
   11c88:	bl	1259c <close@plt+0x14a4>
   11c8c:	cmp	r0, #0
   11c90:	beq	122c0 <close@plt+0x11c8>
   11c94:	movw	r1, #25880	; 0x6518
   11c98:	mov	r0, r8
   11c9c:	movt	r1, #1
   11ca0:	bl	1259c <close@plt+0x14a4>
   11ca4:	cmp	r0, #0
   11ca8:	str	r6, [sp, #8]
   11cac:	beq	12058 <close@plt+0xf60>
   11cb0:	movw	r1, #25887	; 0x651f
   11cb4:	mov	r0, r8
   11cb8:	movt	r1, #1
   11cbc:	bl	1259c <close@plt+0x14a4>
   11cc0:	cmp	r0, #0
   11cc4:	beq	120f0 <close@plt+0xff8>
   11cc8:	movw	r1, #25892	; 0x6524
   11ccc:	mov	r0, r8
   11cd0:	movt	r1, #1
   11cd4:	bl	1259c <close@plt+0x14a4>
   11cd8:	cmp	r0, #0
   11cdc:	beq	12108 <close@plt+0x1010>
   11ce0:	movw	r1, #25897	; 0x6529
   11ce4:	mov	r0, r8
   11ce8:	movt	r1, #1
   11cec:	bl	1259c <close@plt+0x14a4>
   11cf0:	cmp	r0, #0
   11cf4:	beq	12120 <close@plt+0x1028>
   11cf8:	movw	r1, #25903	; 0x652f
   11cfc:	mov	r0, r8
   11d00:	movt	r1, #1
   11d04:	bl	1259c <close@plt+0x14a4>
   11d08:	cmp	r0, #0
   11d0c:	beq	12138 <close@plt+0x1040>
   11d10:	movw	r1, #25907	; 0x6533
   11d14:	mov	r0, r8
   11d18:	movt	r1, #1
   11d1c:	bl	1259c <close@plt+0x14a4>
   11d20:	cmp	r0, #0
   11d24:	beq	12150 <close@plt+0x1058>
   11d28:	ldr	r0, [sp, #24]
   11d2c:	movw	r1, #26101	; 0x65f5
   11d30:	movt	r1, #1
   11d34:	bl	1259c <close@plt+0x14a4>
   11d38:	cmp	r0, #0
   11d3c:	beq	12158 <close@plt+0x1060>
   11d40:	ldr	r0, [sp, #24]
   11d44:	movw	r1, #25911	; 0x6537
   11d48:	movt	r1, #1
   11d4c:	bl	1259c <close@plt+0x14a4>
   11d50:	cmp	r0, #0
   11d54:	beq	12160 <close@plt+0x1068>
   11d58:	ldr	r0, [sp, #24]
   11d5c:	movw	r1, #25919	; 0x653f
   11d60:	movt	r1, #1
   11d64:	bl	1259c <close@plt+0x14a4>
   11d68:	cmp	r0, #0
   11d6c:	beq	12168 <close@plt+0x1070>
   11d70:	ldr	r0, [sp, #24]
   11d74:	movw	r1, #25926	; 0x6546
   11d78:	movt	r1, #1
   11d7c:	bl	1259c <close@plt+0x14a4>
   11d80:	cmp	r0, #0
   11d84:	beq	12170 <close@plt+0x1078>
   11d88:	ldr	r0, [sp, #24]
   11d8c:	movw	r1, #25934	; 0x654e
   11d90:	movt	r1, #1
   11d94:	bl	1259c <close@plt+0x14a4>
   11d98:	cmp	r0, #0
   11d9c:	beq	12178 <close@plt+0x1080>
   11da0:	ldr	r0, [sp, #24]
   11da4:	movw	r1, #25939	; 0x6553
   11da8:	movt	r1, #1
   11dac:	bl	1259c <close@plt+0x14a4>
   11db0:	cmp	r0, #0
   11db4:	beq	12180 <close@plt+0x1088>
   11db8:	ldr	r0, [sp, #24]
   11dbc:	movw	r1, #25944	; 0x6558
   11dc0:	movt	r1, #1
   11dc4:	bl	1259c <close@plt+0x14a4>
   11dc8:	cmp	r0, #0
   11dcc:	beq	12188 <close@plt+0x1090>
   11dd0:	ldr	r0, [sp, #24]
   11dd4:	movw	r1, #25949	; 0x655d
   11dd8:	movt	r1, #1
   11ddc:	bl	1259c <close@plt+0x14a4>
   11de0:	cmp	r0, #0
   11de4:	beq	12190 <close@plt+0x1098>
   11de8:	ldr	r0, [sp, #24]
   11dec:	movw	r1, #25953	; 0x6561
   11df0:	movt	r1, #1
   11df4:	bl	1259c <close@plt+0x14a4>
   11df8:	cmp	r0, #0
   11dfc:	beq	12198 <close@plt+0x10a0>
   11e00:	ldr	r0, [sp, #24]
   11e04:	movw	r1, #25959	; 0x6567
   11e08:	movt	r1, #1
   11e0c:	bl	1259c <close@plt+0x14a4>
   11e10:	cmp	r0, #0
   11e14:	beq	121a0 <close@plt+0x10a8>
   11e18:	ldr	r0, [sp, #24]
   11e1c:	movw	r1, #25963	; 0x656b
   11e20:	movt	r1, #1
   11e24:	bl	1259c <close@plt+0x14a4>
   11e28:	cmp	r0, #0
   11e2c:	beq	121a8 <close@plt+0x10b0>
   11e30:	ldr	r0, [sp, #24]
   11e34:	movw	r1, #25968	; 0x6570
   11e38:	movt	r1, #1
   11e3c:	bl	1259c <close@plt+0x14a4>
   11e40:	cmp	r0, #0
   11e44:	beq	121b0 <close@plt+0x10b8>
   11e48:	ldr	r0, [sp, #24]
   11e4c:	movw	r1, #25973	; 0x6575
   11e50:	movt	r1, #1
   11e54:	bl	1259c <close@plt+0x14a4>
   11e58:	cmp	r0, #0
   11e5c:	beq	121b8 <close@plt+0x10c0>
   11e60:	ldr	r0, [sp, #24]
   11e64:	movw	r1, #25978	; 0x657a
   11e68:	movt	r1, #1
   11e6c:	bl	1259c <close@plt+0x14a4>
   11e70:	cmp	r0, #0
   11e74:	beq	121c0 <close@plt+0x10c8>
   11e78:	ldr	r0, [sp, #24]
   11e7c:	movw	r1, #25983	; 0x657f
   11e80:	movt	r1, #1
   11e84:	bl	1259c <close@plt+0x14a4>
   11e88:	cmp	r0, #0
   11e8c:	beq	121c8 <close@plt+0x10d0>
   11e90:	ldr	r0, [sp, #24]
   11e94:	movw	r1, #25992	; 0x6588
   11e98:	movt	r1, #1
   11e9c:	bl	1259c <close@plt+0x14a4>
   11ea0:	cmp	r0, #0
   11ea4:	beq	121d0 <close@plt+0x10d8>
   11ea8:	ldr	r0, [sp, #24]
   11eac:	movw	r1, #25998	; 0x658e
   11eb0:	movt	r1, #1
   11eb4:	bl	1259c <close@plt+0x14a4>
   11eb8:	cmp	r0, #0
   11ebc:	beq	121d8 <close@plt+0x10e0>
   11ec0:	ldr	r0, [sp, #24]
   11ec4:	movw	r1, #26008	; 0x6598
   11ec8:	movt	r1, #1
   11ecc:	bl	1259c <close@plt+0x14a4>
   11ed0:	cmp	r0, #0
   11ed4:	beq	121e0 <close@plt+0x10e8>
   11ed8:	ldr	r0, [sp, #24]
   11edc:	movw	r1, #26012	; 0x659c
   11ee0:	movt	r1, #1
   11ee4:	bl	1259c <close@plt+0x14a4>
   11ee8:	cmp	r0, #0
   11eec:	beq	121e8 <close@plt+0x10f0>
   11ef0:	ldr	r0, [sp, #24]
   11ef4:	movw	r1, #26020	; 0x65a4
   11ef8:	movt	r1, #1
   11efc:	bl	1259c <close@plt+0x14a4>
   11f00:	cmp	r0, #0
   11f04:	beq	121f0 <close@plt+0x10f8>
   11f08:	ldr	r0, [sp, #24]
   11f0c:	movw	r1, #26025	; 0x65a9
   11f10:	movt	r1, #1
   11f14:	bl	1259c <close@plt+0x14a4>
   11f18:	cmp	r0, #0
   11f1c:	beq	121f8 <close@plt+0x1100>
   11f20:	ldr	r0, [sp, #24]
   11f24:	movw	r1, #26032	; 0x65b0
   11f28:	movt	r1, #1
   11f2c:	bl	1259c <close@plt+0x14a4>
   11f30:	cmp	r0, #0
   11f34:	beq	12200 <close@plt+0x1108>
   11f38:	ldr	r0, [sp, #24]
   11f3c:	movw	r1, #26037	; 0x65b5
   11f40:	movt	r1, #1
   11f44:	bl	1259c <close@plt+0x14a4>
   11f48:	cmp	r0, #0
   11f4c:	beq	12208 <close@plt+0x1110>
   11f50:	ldr	r0, [sp, #24]
   11f54:	movw	r1, #26044	; 0x65bc
   11f58:	movt	r1, #1
   11f5c:	bl	1259c <close@plt+0x14a4>
   11f60:	cmp	r0, #0
   11f64:	beq	12210 <close@plt+0x1118>
   11f68:	ldr	r0, [sp, #24]
   11f6c:	movw	r1, #26062	; 0x65ce
   11f70:	movt	r1, #1
   11f74:	bl	1259c <close@plt+0x14a4>
   11f78:	cmp	r0, #0
   11f7c:	beq	12218 <close@plt+0x1120>
   11f80:	ldr	r0, [sp, #24]
   11f84:	movw	r1, #26051	; 0x65c3
   11f88:	movt	r1, #1
   11f8c:	bl	1259c <close@plt+0x14a4>
   11f90:	cmp	r0, #0
   11f94:	beq	12220 <close@plt+0x1128>
   11f98:	ldr	r0, [sp, #24]
   11f9c:	movw	r1, #26055	; 0x65c7
   11fa0:	movt	r1, #1
   11fa4:	bl	1259c <close@plt+0x14a4>
   11fa8:	cmp	r0, #0
   11fac:	beq	12228 <close@plt+0x1130>
   11fb0:	ldr	r0, [sp, #24]
   11fb4:	movw	r1, #26077	; 0x65dd
   11fb8:	movt	r1, #1
   11fbc:	bl	1259c <close@plt+0x14a4>
   11fc0:	cmp	r0, #0
   11fc4:	beq	12230 <close@plt+0x1138>
   11fc8:	ldr	r0, [sp, #24]
   11fcc:	movw	r1, #26081	; 0x65e1
   11fd0:	movt	r1, #1
   11fd4:	bl	1259c <close@plt+0x14a4>
   11fd8:	cmp	r0, #0
   11fdc:	beq	12238 <close@plt+0x1140>
   11fe0:	ldr	r0, [sp, #24]
   11fe4:	movw	r1, #26092	; 0x65ec
   11fe8:	movt	r1, #1
   11fec:	bl	1259c <close@plt+0x14a4>
   11ff0:	cmp	r0, #0
   11ff4:	beq	12240 <close@plt+0x1148>
   11ff8:	ldr	r0, [sp, #24]
   11ffc:	movw	r1, #26106	; 0x65fa
   12000:	movt	r1, #1
   12004:	bl	1259c <close@plt+0x14a4>
   12008:	cmp	r0, #0
   1200c:	beq	12248 <close@plt+0x1150>
   12010:	ldr	r0, [sp, #16]
   12014:	sub	r0, r0, #1
   12018:	cmp	r0, #2
   1201c:	bcs	12270 <close@plt+0x1178>
   12020:	movw	r1, #25837	; 0x64ed
   12024:	mov	r0, #0
   12028:	mov	r2, #5
   1202c:	movt	r1, #1
   12030:	bl	10f24 <dcgettext@plt>
   12034:	mov	r4, r0
   12038:	ldr	r0, [sp, #20]
   1203c:	cmp	r0, #0
   12040:	beq	1227c <close@plt+0x1184>
   12044:	ldr	r2, [sp, #20]
   12048:	mov	r0, #0
   1204c:	mov	r1, #3
   12050:	bl	14c5c <_obstack_memory_used@@Base+0x1d90>
   12054:	b	12290 <close@plt+0x1198>
   12058:	mov	r6, #0
   1205c:	ldr	r0, [r4, #12]
   12060:	ldr	r1, [r4, #16]
   12064:	cmp	r1, r0
   12068:	bne	1207c <close@plt+0xf84>
   1206c:	mov	r0, r4
   12070:	mov	r1, #1
   12074:	bl	12c84 <_obstack_newchunk@@Base>
   12078:	ldr	r0, [r4, #12]
   1207c:	movw	r1, #30680	; 0x77d8
   12080:	add	r2, r0, #1
   12084:	movt	r1, #1
   12088:	ldr	r6, [r1, r6, lsl #2]
   1208c:	ldrb	r1, [r6]
   12090:	str	r2, [r4, #12]
   12094:	strb	r1, [r0]
   12098:	ldr	r0, [r4, #12]
   1209c:	ldr	r1, [r4, #16]
   120a0:	cmp	r1, r0
   120a4:	bne	120b8 <close@plt+0xfc0>
   120a8:	mov	r0, r4
   120ac:	mov	r1, #1
   120b0:	bl	12c84 <_obstack_newchunk@@Base>
   120b4:	ldr	r0, [r4, #12]
   120b8:	ldrb	r1, [r6, #1]
   120bc:	add	r2, r0, #1
   120c0:	str	r2, [r4, #12]
   120c4:	strb	r1, [r0]
   120c8:	ldr	r0, [r4, #12]
   120cc:	ldr	r1, [r4, #16]
   120d0:	cmp	r1, r0
   120d4:	bne	120e8 <close@plt+0xff0>
   120d8:	mov	r0, r4
   120dc:	mov	r1, #1
   120e0:	bl	12c84 <_obstack_newchunk@@Base>
   120e4:	ldr	r0, [r4, #12]
   120e8:	ldr	r6, [sp, #8]
   120ec:	b	11bb4 <close@plt+0xabc>
   120f0:	mov	r6, #1
   120f4:	ldr	r0, [r4, #12]
   120f8:	ldr	r1, [r4, #16]
   120fc:	cmp	r1, r0
   12100:	beq	1206c <close@plt+0xf74>
   12104:	b	1207c <close@plt+0xf84>
   12108:	mov	r6, #2
   1210c:	ldr	r0, [r4, #12]
   12110:	ldr	r1, [r4, #16]
   12114:	cmp	r1, r0
   12118:	beq	1206c <close@plt+0xf74>
   1211c:	b	1207c <close@plt+0xf84>
   12120:	mov	r6, #3
   12124:	ldr	r0, [r4, #12]
   12128:	ldr	r1, [r4, #16]
   1212c:	cmp	r1, r0
   12130:	beq	1206c <close@plt+0xf74>
   12134:	b	1207c <close@plt+0xf84>
   12138:	mov	r6, #4
   1213c:	ldr	r0, [r4, #12]
   12140:	ldr	r1, [r4, #16]
   12144:	cmp	r1, r0
   12148:	beq	1206c <close@plt+0xf74>
   1214c:	b	1207c <close@plt+0xf84>
   12150:	mov	r6, #5
   12154:	b	1224c <close@plt+0x1154>
   12158:	mov	r6, #6
   1215c:	b	1224c <close@plt+0x1154>
   12160:	mov	r6, #7
   12164:	b	1224c <close@plt+0x1154>
   12168:	mov	r6, #8
   1216c:	b	1224c <close@plt+0x1154>
   12170:	mov	r6, #9
   12174:	b	1224c <close@plt+0x1154>
   12178:	mov	r6, #10
   1217c:	b	1224c <close@plt+0x1154>
   12180:	mov	r6, #11
   12184:	b	1224c <close@plt+0x1154>
   12188:	mov	r6, #12
   1218c:	b	1224c <close@plt+0x1154>
   12190:	mov	r6, #13
   12194:	b	1224c <close@plt+0x1154>
   12198:	mov	r6, #14
   1219c:	b	1224c <close@plt+0x1154>
   121a0:	mov	r6, #15
   121a4:	b	1224c <close@plt+0x1154>
   121a8:	mov	r6, #16
   121ac:	b	1224c <close@plt+0x1154>
   121b0:	mov	r6, #17
   121b4:	b	1224c <close@plt+0x1154>
   121b8:	mov	r6, #18
   121bc:	b	1224c <close@plt+0x1154>
   121c0:	mov	r6, #19
   121c4:	b	1224c <close@plt+0x1154>
   121c8:	mov	r6, #20
   121cc:	b	1224c <close@plt+0x1154>
   121d0:	mov	r6, #21
   121d4:	b	1224c <close@plt+0x1154>
   121d8:	mov	r6, #22
   121dc:	b	1224c <close@plt+0x1154>
   121e0:	mov	r6, #23
   121e4:	b	1224c <close@plt+0x1154>
   121e8:	mov	r6, #24
   121ec:	b	1224c <close@plt+0x1154>
   121f0:	mov	r6, #25
   121f4:	b	1224c <close@plt+0x1154>
   121f8:	mov	r6, #26
   121fc:	b	1224c <close@plt+0x1154>
   12200:	mov	r6, #27
   12204:	b	1224c <close@plt+0x1154>
   12208:	mov	r6, #28
   1220c:	b	1224c <close@plt+0x1154>
   12210:	mov	r6, #29
   12214:	b	1224c <close@plt+0x1154>
   12218:	mov	r6, #30
   1221c:	b	1224c <close@plt+0x1154>
   12220:	mov	r6, #31
   12224:	b	1224c <close@plt+0x1154>
   12228:	mov	r6, #32
   1222c:	b	1224c <close@plt+0x1154>
   12230:	mov	r6, #33	; 0x21
   12234:	b	1224c <close@plt+0x1154>
   12238:	mov	r6, #34	; 0x22
   1223c:	b	1224c <close@plt+0x1154>
   12240:	mov	r6, #35	; 0x23
   12244:	b	1224c <close@plt+0x1154>
   12248:	mov	r6, #36	; 0x24
   1224c:	ldr	sl, [sp, #20]
   12250:	ldr	r8, [sp, #24]
   12254:	movw	r4, #33108	; 0x8154
   12258:	movt	r4, #2
   1225c:	ldr	r0, [r4, #12]
   12260:	ldr	r1, [r4, #16]
   12264:	cmp	r1, r0
   12268:	bne	1207c <close@plt+0xf84>
   1226c:	b	1206c <close@plt+0xf74>
   12270:	ldr	sl, [sp, #20]
   12274:	ldr	r8, [sp, #24]
   12278:	b	122bc <close@plt+0x11c4>
   1227c:	movw	r1, #25869	; 0x650d
   12280:	mov	r0, #0
   12284:	mov	r2, #5
   12288:	movt	r1, #1
   1228c:	bl	10f24 <dcgettext@plt>
   12290:	ldr	r8, [sp, #24]
   12294:	mov	r3, r0
   12298:	mov	r0, #0
   1229c:	mov	r1, #0
   122a0:	mov	r2, r4
   122a4:	str	r9, [sp]
   122a8:	str	r0, [sp, #28]
   122ac:	mov	r0, #0
   122b0:	str	r8, [sp, #4]
   122b4:	bl	10f9c <error@plt>
   122b8:	ldr	sl, [sp, #20]
   122bc:	ldr	r6, [sp, #8]
   122c0:	mov	r0, r8
   122c4:	bl	127f4 <close@plt+0x16fc>
   122c8:	mov	r0, r6
   122cc:	bl	127f4 <close@plt+0x16fc>
   122d0:	cmp	r5, #0
   122d4:	bne	11954 <close@plt+0x85c>
   122d8:	b	1197c <close@plt+0x884>
   122dc:	bl	127f4 <close@plt+0x16fc>
   122e0:	ldr	r0, [sp, #28]
   122e4:	and	r0, r0, #1
   122e8:	sub	sp, fp, #28
   122ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   122f4:	add	fp, sp, #24
   122f8:	movw	r5, #33108	; 0x8154
   122fc:	mov	r4, r0
   12300:	mov	r0, #1
   12304:	mov	r8, #39	; 0x27
   12308:	mov	r7, #92	; 0x5c
   1230c:	movt	r5, #2
   12310:	ldrb	r1, [r4]
   12314:	sub	r2, r1, #58	; 0x3a
   12318:	cmp	r2, #36	; 0x24
   1231c:	bls	12348 <close@plt+0x1250>
   12320:	b	1243c <close@plt+0x1344>
   12324:	ldrb	r1, [r4], #1
   12328:	add	r2, r0, #1
   1232c:	str	r2, [r5, #12]
   12330:	strb	r1, [r0]
   12334:	mov	r0, r6
   12338:	ldrb	r1, [r4]
   1233c:	sub	r2, r1, #58	; 0x3a
   12340:	cmp	r2, #36	; 0x24
   12344:	bhi	1243c <close@plt+0x1344>
   12348:	add	r1, pc, #4
   1234c:	mov	r6, #1
   12350:	ldr	pc, [r1, r2, lsl #2]
   12354:	andeq	r2, r1, r8, ror #7
   12358:	ldrdeq	r2, [r1], -ip
   1235c:	ldrdeq	r2, [r1], -ip
   12360:	andeq	r2, r1, r8, ror #7
   12364:	ldrdeq	r2, [r1], -ip
   12368:	ldrdeq	r2, [r1], -ip
   1236c:	ldrdeq	r2, [r1], -ip
   12370:	ldrdeq	r2, [r1], -ip
   12374:	ldrdeq	r2, [r1], -ip
   12378:	ldrdeq	r2, [r1], -ip
   1237c:	ldrdeq	r2, [r1], -ip
   12380:	ldrdeq	r2, [r1], -ip
   12384:	ldrdeq	r2, [r1], -ip
   12388:	ldrdeq	r2, [r1], -ip
   1238c:	ldrdeq	r2, [r1], -ip
   12390:	ldrdeq	r2, [r1], -ip
   12394:	ldrdeq	r2, [r1], -ip
   12398:	ldrdeq	r2, [r1], -ip
   1239c:	ldrdeq	r2, [r1], -ip
   123a0:	ldrdeq	r2, [r1], -ip
   123a4:	ldrdeq	r2, [r1], -ip
   123a8:	ldrdeq	r2, [r1], -ip
   123ac:	ldrdeq	r2, [r1], -ip
   123b0:	ldrdeq	r2, [r1], -ip
   123b4:	ldrdeq	r2, [r1], -ip
   123b8:	ldrdeq	r2, [r1], -ip
   123bc:	ldrdeq	r2, [r1], -ip
   123c0:	ldrdeq	r2, [r1], -ip
   123c4:	ldrdeq	r2, [r1], -ip
   123c8:	ldrdeq	r2, [r1], -ip
   123cc:	ldrdeq	r2, [r1], -ip
   123d0:	ldrdeq	r2, [r1], -ip
   123d4:	ldrdeq	r2, [r1], -ip
   123d8:	ldrdeq	r2, [r1], -ip
   123dc:	andeq	r2, r1, r4, lsr #8
   123e0:	ldrdeq	r2, [r1], -ip
   123e4:	andeq	r2, r1, r4, lsr #8
   123e8:	tst	r0, #1
   123ec:	mov	r6, #1
   123f0:	beq	124dc <close@plt+0x13e4>
   123f4:	ldr	r0, [r5, #12]
   123f8:	ldr	r1, [r5, #16]
   123fc:	cmp	r1, r0
   12400:	bne	12414 <close@plt+0x131c>
   12404:	mov	r0, r5
   12408:	mov	r1, #1
   1240c:	bl	12c84 <_obstack_newchunk@@Base>
   12410:	ldr	r0, [r5, #12]
   12414:	add	r1, r0, #1
   12418:	str	r1, [r5, #12]
   1241c:	strb	r7, [r0]
   12420:	b	124d8 <close@plt+0x13e0>
   12424:	eor	r6, r0, #1
   12428:	ldr	r0, [r5, #12]
   1242c:	ldr	r1, [r5, #16]
   12430:	cmp	r1, r0
   12434:	bne	12324 <close@plt+0x122c>
   12438:	b	124ec <close@plt+0x13f4>
   1243c:	cmp	r1, #39	; 0x27
   12440:	beq	12454 <close@plt+0x135c>
   12444:	cmp	r1, #0
   12448:	mov	r6, #1
   1244c:	bne	124dc <close@plt+0x13e4>
   12450:	b	12500 <close@plt+0x1408>
   12454:	ldr	r0, [r5, #12]
   12458:	ldr	r1, [r5, #16]
   1245c:	cmp	r1, r0
   12460:	bne	12474 <close@plt+0x137c>
   12464:	mov	r0, r5
   12468:	mov	r1, #1
   1246c:	bl	12c84 <_obstack_newchunk@@Base>
   12470:	ldr	r0, [r5, #12]
   12474:	add	r1, r0, #1
   12478:	str	r1, [r5, #12]
   1247c:	strb	r8, [r0]
   12480:	ldr	r0, [r5, #12]
   12484:	ldr	r1, [r5, #16]
   12488:	cmp	r1, r0
   1248c:	bne	124a0 <close@plt+0x13a8>
   12490:	mov	r0, r5
   12494:	mov	r1, #1
   12498:	bl	12c84 <_obstack_newchunk@@Base>
   1249c:	ldr	r0, [r5, #12]
   124a0:	add	r1, r0, #1
   124a4:	str	r1, [r5, #12]
   124a8:	strb	r7, [r0]
   124ac:	ldr	r0, [r5, #12]
   124b0:	ldr	r1, [r5, #16]
   124b4:	cmp	r1, r0
   124b8:	bne	124cc <close@plt+0x13d4>
   124bc:	mov	r0, r5
   124c0:	mov	r1, #1
   124c4:	bl	12c84 <_obstack_newchunk@@Base>
   124c8:	ldr	r0, [r5, #12]
   124cc:	add	r1, r0, #1
   124d0:	str	r1, [r5, #12]
   124d4:	strb	r8, [r0]
   124d8:	mov	r6, #1
   124dc:	ldr	r0, [r5, #12]
   124e0:	ldr	r1, [r5, #16]
   124e4:	cmp	r1, r0
   124e8:	bne	12324 <close@plt+0x122c>
   124ec:	mov	r0, r5
   124f0:	mov	r1, #1
   124f4:	bl	12c84 <_obstack_newchunk@@Base>
   124f8:	ldr	r0, [r5, #12]
   124fc:	b	12324 <close@plt+0x122c>
   12500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12504:	sub	r0, r0, #1
   12508:	ldrb	r3, [r0, #1]!
   1250c:	cmp	r3, #47	; 0x2f
   12510:	beq	12508 <close@plt+0x1410>
   12514:	mov	r2, #0
   12518:	mov	r1, r0
   1251c:	uxtb	r3, r3
   12520:	cmp	r3, #47	; 0x2f
   12524:	bne	1253c <close@plt+0x1444>
   12528:	ldrb	r3, [r1, #1]!
   1252c:	mov	r2, #1
   12530:	uxtb	r3, r3
   12534:	cmp	r3, #47	; 0x2f
   12538:	beq	12528 <close@plt+0x1430>
   1253c:	cmp	r3, #0
   12540:	bxeq	lr
   12544:	tst	r2, #1
   12548:	mov	r2, #0
   1254c:	movne	r0, r1
   12550:	ldrb	r3, [r1, #1]!
   12554:	uxtb	r3, r3
   12558:	cmp	r3, #47	; 0x2f
   1255c:	bne	1253c <close@plt+0x1444>
   12560:	b	12528 <close@plt+0x1430>
   12564:	push	{r4, sl, fp, lr}
   12568:	add	fp, sp, #8
   1256c:	mov	r4, r0
   12570:	bl	11044 <strlen@plt>
   12574:	mov	r1, r0
   12578:	sub	r2, r4, #1
   1257c:	mov	r0, r1
   12580:	cmp	r1, #2
   12584:	bcc	12598 <close@plt+0x14a0>
   12588:	ldrb	r3, [r2, r0]
   1258c:	sub	r1, r0, #1
   12590:	cmp	r3, #47	; 0x2f
   12594:	beq	1257c <close@plt+0x1484>
   12598:	pop	{r4, sl, fp, pc}
   1259c:	cmp	r0, r1
   125a0:	moveq	r0, #0
   125a4:	bxeq	lr
   125a8:	ldrb	r3, [r1]
   125ac:	ldrb	ip, [r0]
   125b0:	sub	r2, r3, #65	; 0x41
   125b4:	cmp	r2, #26
   125b8:	sub	r2, ip, #65	; 0x41
   125bc:	addcc	r3, r3, #32
   125c0:	cmp	r2, #26
   125c4:	addcc	ip, ip, #32
   125c8:	uxtb	r3, r3
   125cc:	uxtb	r2, ip
   125d0:	cmp	r2, #0
   125d4:	beq	125e8 <close@plt+0x14f0>
   125d8:	add	r1, r1, #1
   125dc:	add	r0, r0, #1
   125e0:	cmp	r2, r3
   125e4:	beq	125a8 <close@plt+0x14b0>
   125e8:	sub	r0, r2, r3
   125ec:	bx	lr
   125f0:	movw	r1, #33152	; 0x8180
   125f4:	movt	r1, #2
   125f8:	str	r0, [r1, #4]
   125fc:	bx	lr
   12600:	movw	r1, #33152	; 0x8180
   12604:	movt	r1, #2
   12608:	strb	r0, [r1]
   1260c:	bx	lr
   12610:	push	{r4, r5, r6, sl, fp, lr}
   12614:	add	fp, sp, #16
   12618:	sub	sp, sp, #8
   1261c:	movw	r0, #33100	; 0x814c
   12620:	movt	r0, #2
   12624:	ldr	r0, [r0]
   12628:	bl	15c38 <_obstack_memory_used@@Base+0x2d6c>
   1262c:	cmp	r0, #0
   12630:	beq	12658 <close@plt+0x1560>
   12634:	movw	r5, #33152	; 0x8180
   12638:	movt	r5, #2
   1263c:	ldrb	r0, [r5]
   12640:	cmp	r0, #0
   12644:	beq	12684 <close@plt+0x158c>
   12648:	bl	11050 <__errno_location@plt>
   1264c:	ldr	r0, [r0]
   12650:	cmp	r0, #32
   12654:	bne	12684 <close@plt+0x158c>
   12658:	movw	r0, #33088	; 0x8140
   1265c:	movt	r0, #2
   12660:	ldr	r0, [r0]
   12664:	bl	15c38 <_obstack_memory_used@@Base+0x2d6c>
   12668:	cmp	r0, #0
   1266c:	subeq	sp, fp, #16
   12670:	popeq	{r4, r5, r6, sl, fp, pc}
   12674:	movw	r0, #32996	; 0x80e4
   12678:	movt	r0, #2
   1267c:	ldr	r0, [r0]
   12680:	bl	10ef4 <_exit@plt>
   12684:	movw	r1, #30847	; 0x787f
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	movt	r1, #1
   12694:	bl	10f24 <dcgettext@plt>
   12698:	ldr	r6, [r5, #4]
   1269c:	mov	r4, r0
   126a0:	bl	11050 <__errno_location@plt>
   126a4:	ldr	r5, [r0]
   126a8:	cmp	r6, #0
   126ac:	bne	126c8 <close@plt+0x15d0>
   126b0:	movw	r2, #30863	; 0x788f
   126b4:	mov	r0, #0
   126b8:	mov	r1, r5
   126bc:	mov	r3, r4
   126c0:	movt	r2, #1
   126c4:	b	126e8 <close@plt+0x15f0>
   126c8:	mov	r0, r6
   126cc:	bl	14b80 <_obstack_memory_used@@Base+0x1cb4>
   126d0:	movw	r2, #30859	; 0x788b
   126d4:	mov	r3, r0
   126d8:	str	r4, [sp]
   126dc:	mov	r0, #0
   126e0:	mov	r1, r5
   126e4:	movt	r2, #1
   126e8:	bl	10f9c <error@plt>
   126ec:	movw	r0, #32996	; 0x80e4
   126f0:	movt	r0, #2
   126f4:	ldr	r0, [r0]
   126f8:	bl	10ef4 <_exit@plt>
   126fc:	push	{r4, r5, r6, sl, fp, lr}
   12700:	add	fp, sp, #16
   12704:	sub	sp, sp, #8
   12708:	mov	r4, r0
   1270c:	bl	11080 <fileno@plt>
   12710:	cmn	r0, #1
   12714:	ble	12788 <close@plt+0x1690>
   12718:	mov	r0, r4
   1271c:	bl	10ff0 <__freading@plt>
   12720:	cmp	r0, #0
   12724:	beq	12750 <close@plt+0x1658>
   12728:	mov	r0, r4
   1272c:	bl	11080 <fileno@plt>
   12730:	mov	r1, #1
   12734:	mov	r2, #0
   12738:	mov	r3, #0
   1273c:	str	r1, [sp]
   12740:	bl	10f6c <lseek64@plt>
   12744:	and	r0, r0, r1
   12748:	cmn	r0, #1
   1274c:	beq	12788 <close@plt+0x1690>
   12750:	mov	r0, r4
   12754:	bl	12798 <close@plt+0x16a0>
   12758:	cmp	r0, #0
   1275c:	beq	12788 <close@plt+0x1690>
   12760:	bl	11050 <__errno_location@plt>
   12764:	ldr	r6, [r0]
   12768:	mov	r5, r0
   1276c:	mov	r0, r4
   12770:	bl	11098 <fclose@plt>
   12774:	cmp	r6, #0
   12778:	strne	r6, [r5]
   1277c:	mvnne	r0, #0
   12780:	sub	sp, fp, #16
   12784:	pop	{r4, r5, r6, sl, fp, pc}
   12788:	mov	r0, r4
   1278c:	sub	sp, fp, #16
   12790:	pop	{r4, r5, r6, sl, fp, lr}
   12794:	b	11098 <fclose@plt>
   12798:	push	{r4, sl, fp, lr}
   1279c:	add	fp, sp, #8
   127a0:	sub	sp, sp, #8
   127a4:	mov	r4, r0
   127a8:	cmp	r0, #0
   127ac:	beq	127e4 <close@plt+0x16ec>
   127b0:	mov	r0, r4
   127b4:	bl	10ff0 <__freading@plt>
   127b8:	cmp	r0, #0
   127bc:	beq	127e4 <close@plt+0x16ec>
   127c0:	ldrb	r0, [r4, #1]
   127c4:	tst	r0, #1
   127c8:	beq	127e4 <close@plt+0x16ec>
   127cc:	mov	r0, #1
   127d0:	mov	r2, #0
   127d4:	mov	r3, #0
   127d8:	str	r0, [sp]
   127dc:	mov	r0, r4
   127e0:	bl	12a88 <close@plt+0x1990>
   127e4:	mov	r0, r4
   127e8:	sub	sp, fp, #8
   127ec:	pop	{r4, sl, fp, lr}
   127f0:	b	10edc <fflush@plt>
   127f4:	push	{r4, r5, r6, sl, fp, lr}
   127f8:	add	fp, sp, #16
   127fc:	mov	r4, r0
   12800:	bl	11050 <__errno_location@plt>
   12804:	ldr	r6, [r0]
   12808:	mov	r5, r0
   1280c:	mov	r0, r4
   12810:	bl	10ee8 <free@plt>
   12814:	str	r6, [r5]
   12818:	pop	{r4, r5, r6, sl, fp, pc}
   1281c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12820:	add	fp, sp, #28
   12824:	sub	sp, sp, #4
   12828:	mov	r5, r0
   1282c:	mov	r0, r2
   12830:	mov	r4, r2
   12834:	mov	r9, r1
   12838:	bl	11080 <fileno@plt>
   1283c:	mov	r7, #0
   12840:	cmp	r0, #0
   12844:	beq	12884 <close@plt+0x178c>
   12848:	cmp	r0, #1
   1284c:	beq	12890 <close@plt+0x1798>
   12850:	cmp	r0, #2
   12854:	beq	1286c <close@plt+0x1774>
   12858:	mov	r0, #2
   1285c:	mov	r1, #2
   12860:	bl	10f30 <dup2@plt>
   12864:	subs	r7, r0, #2
   12868:	movwne	r7, #1
   1286c:	mov	r0, #1
   12870:	mov	r1, #1
   12874:	bl	10f30 <dup2@plt>
   12878:	subs	r6, r0, #1
   1287c:	movwne	r6, #1
   12880:	b	12894 <close@plt+0x179c>
   12884:	mov	r6, #0
   12888:	mov	r8, #0
   1288c:	b	1295c <close@plt+0x1864>
   12890:	mov	r6, #0
   12894:	mov	r0, #0
   12898:	mov	r1, #0
   1289c:	mov	sl, #0
   128a0:	bl	10f30 <dup2@plt>
   128a4:	cmp	r0, #0
   128a8:	mov	r8, #0
   128ac:	beq	128ec <close@plt+0x17f4>
   128b0:	movw	r0, #30866	; 0x7892
   128b4:	mov	r1, #0
   128b8:	movt	r0, #1
   128bc:	bl	10fb4 <open64@plt>
   128c0:	cmp	r0, #0
   128c4:	beq	128e8 <close@plt+0x17f0>
   128c8:	cmn	r0, #1
   128cc:	ble	12a0c <close@plt+0x1914>
   128d0:	bl	110f8 <close@plt>
   128d4:	bl	11050 <__errno_location@plt>
   128d8:	mov	r4, r0
   128dc:	mov	r0, #9
   128e0:	str	r0, [r4]
   128e4:	b	12a14 <close@plt+0x191c>
   128e8:	mov	r8, #1
   128ec:	cmp	r6, #0
   128f0:	beq	12910 <close@plt+0x1818>
   128f4:	movw	r0, #30866	; 0x7892
   128f8:	mov	r1, #0
   128fc:	movt	r0, #1
   12900:	bl	10fb4 <open64@plt>
   12904:	mov	sl, #1
   12908:	cmp	r0, #1
   1290c:	bne	129dc <close@plt+0x18e4>
   12910:	cmp	r7, #0
   12914:	beq	12954 <close@plt+0x185c>
   12918:	movw	r0, #30866	; 0x7892
   1291c:	mov	r1, #0
   12920:	movt	r0, #1
   12924:	bl	10fb4 <open64@plt>
   12928:	mov	r7, #1
   1292c:	cmp	r0, #2
   12930:	beq	12958 <close@plt+0x1860>
   12934:	cmn	r0, #1
   12938:	ble	12a64 <close@plt+0x196c>
   1293c:	bl	110f8 <close@plt>
   12940:	bl	11050 <__errno_location@plt>
   12944:	mov	r4, r0
   12948:	mov	r0, #9
   1294c:	str	r0, [r4]
   12950:	b	12a6c <close@plt+0x1974>
   12954:	mov	r7, #0
   12958:	mov	r6, sl
   1295c:	mov	r0, r5
   12960:	mov	r1, r9
   12964:	mov	r2, r4
   12968:	bl	11008 <freopen64@plt>
   1296c:	mov	r5, r0
   12970:	bl	11050 <__errno_location@plt>
   12974:	ldr	r9, [r0]
   12978:	mov	r4, r0
   1297c:	cmp	r7, #0
   12980:	beq	1298c <close@plt+0x1894>
   12984:	mov	r0, #2
   12988:	bl	110f8 <close@plt>
   1298c:	cmp	r6, #0
   12990:	beq	1299c <close@plt+0x18a4>
   12994:	mov	r0, #1
   12998:	bl	110f8 <close@plt>
   1299c:	cmp	r8, #0
   129a0:	beq	129c0 <close@plt+0x18c8>
   129a4:	mov	r0, #0
   129a8:	bl	110f8 <close@plt>
   129ac:	cmp	r5, #0
   129b0:	beq	129c8 <close@plt+0x18d0>
   129b4:	mov	r0, r5
   129b8:	sub	sp, fp, #28
   129bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c0:	cmp	r5, #0
   129c4:	bne	129b4 <close@plt+0x18bc>
   129c8:	mov	r5, #0
   129cc:	str	r9, [r4]
   129d0:	mov	r0, r5
   129d4:	sub	sp, fp, #28
   129d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129dc:	cmn	r0, #1
   129e0:	ble	12a2c <close@plt+0x1934>
   129e4:	bl	110f8 <close@plt>
   129e8:	bl	11050 <__errno_location@plt>
   129ec:	mov	r4, r0
   129f0:	mov	r0, #9
   129f4:	str	r0, [r4]
   129f8:	ldr	r9, [r4]
   129fc:	mov	r5, #0
   12a00:	cmp	r7, #0
   12a04:	beq	12994 <close@plt+0x189c>
   12a08:	b	12a44 <close@plt+0x194c>
   12a0c:	bl	11050 <__errno_location@plt>
   12a10:	mov	r4, r0
   12a14:	ldr	r9, [r4]
   12a18:	mov	r8, #1
   12a1c:	mov	r5, #0
   12a20:	cmp	r7, #0
   12a24:	bne	12984 <close@plt+0x188c>
   12a28:	b	1298c <close@plt+0x1894>
   12a2c:	bl	11050 <__errno_location@plt>
   12a30:	mov	r4, r0
   12a34:	ldr	r9, [r4]
   12a38:	mov	r5, #0
   12a3c:	cmp	r7, #0
   12a40:	beq	12994 <close@plt+0x189c>
   12a44:	mov	r0, #2
   12a48:	bl	110f8 <close@plt>
   12a4c:	mov	r0, #1
   12a50:	bl	110f8 <close@plt>
   12a54:	mov	r5, #0
   12a58:	cmp	r8, #0
   12a5c:	beq	129c8 <close@plt+0x18d0>
   12a60:	b	129a4 <close@plt+0x18ac>
   12a64:	bl	11050 <__errno_location@plt>
   12a68:	mov	r4, r0
   12a6c:	ldr	r9, [r4]
   12a70:	mov	r0, #2
   12a74:	bl	110f8 <close@plt>
   12a78:	mov	r5, #0
   12a7c:	cmp	sl, #0
   12a80:	bne	12994 <close@plt+0x189c>
   12a84:	b	1299c <close@plt+0x18a4>
   12a88:	push	{r4, r5, r6, r7, fp, lr}
   12a8c:	add	fp, sp, #16
   12a90:	sub	sp, sp, #8
   12a94:	mov	r4, r0
   12a98:	ldr	r0, [r0, #4]
   12a9c:	mov	r5, r3
   12aa0:	mov	r6, r2
   12aa4:	ldr	r1, [r4, #8]
   12aa8:	cmp	r1, r0
   12aac:	bne	12ac8 <close@plt+0x19d0>
   12ab0:	ldrd	r0, [r4, #16]
   12ab4:	cmp	r1, r0
   12ab8:	bne	12ac8 <close@plt+0x19d0>
   12abc:	ldr	r0, [r4, #36]	; 0x24
   12ac0:	cmp	r0, #0
   12ac4:	beq	12ae0 <close@plt+0x19e8>
   12ac8:	mov	r0, r4
   12acc:	mov	r2, r6
   12ad0:	mov	r3, r5
   12ad4:	sub	sp, fp, #16
   12ad8:	pop	{r4, r5, r6, r7, fp, lr}
   12adc:	b	110a4 <fseeko64@plt>
   12ae0:	ldr	r7, [fp, #8]
   12ae4:	mov	r0, r4
   12ae8:	bl	11080 <fileno@plt>
   12aec:	mov	r2, r6
   12af0:	mov	r3, r5
   12af4:	str	r7, [sp]
   12af8:	bl	10f6c <lseek64@plt>
   12afc:	and	r2, r0, r1
   12b00:	cmn	r2, #1
   12b04:	beq	12b24 <close@plt+0x1a2c>
   12b08:	strd	r0, [r4, #80]	; 0x50
   12b0c:	ldr	r0, [r4]
   12b10:	bic	r0, r0, #16
   12b14:	str	r0, [r4]
   12b18:	mov	r0, #0
   12b1c:	sub	sp, fp, #16
   12b20:	pop	{r4, r5, r6, r7, fp, pc}
   12b24:	mvn	r0, #0
   12b28:	sub	sp, fp, #16
   12b2c:	pop	{r4, r5, r6, r7, fp, pc}

00012b30 <_obstack_begin@@Base>:
   12b30:	push	{r4, r5, r6, sl, fp, lr}
   12b34:	add	fp, sp, #16
   12b38:	cmp	r1, #0
   12b3c:	mov	r4, r0
   12b40:	str	r3, [r0, #28]
   12b44:	mov	r5, r2
   12b48:	movweq	r1, #4072	; 0xfe8
   12b4c:	cmp	r2, #0
   12b50:	str	r1, [r0]
   12b54:	ldr	r0, [fp, #8]
   12b58:	movweq	r5, #8
   12b5c:	sub	r6, r5, #1
   12b60:	str	r0, [r4, #32]
   12b64:	str	r6, [r4, #24]
   12b68:	ldrb	r0, [r4, #40]	; 0x28
   12b6c:	and	r0, r0, #254	; 0xfe
   12b70:	strb	r0, [r4, #40]	; 0x28
   12b74:	mov	r0, r1
   12b78:	blx	r3
   12b7c:	cmp	r0, #0
   12b80:	str	r0, [r4, #4]
   12b84:	addne	r1, r0, r6
   12b88:	rsbne	r2, r5, #0
   12b8c:	addne	r1, r1, #8
   12b90:	andne	r1, r1, r2
   12b94:	strne	r1, [r4, #12]
   12b98:	strne	r1, [r4, #8]
   12b9c:	ldrne	r1, [r4]
   12ba0:	addne	r1, r0, r1
   12ba4:	strne	r1, [r0]
   12ba8:	strne	r1, [r4, #16]
   12bac:	movne	r1, #0
   12bb0:	strne	r1, [r0, #4]
   12bb4:	ldrbne	r0, [r4, #40]	; 0x28
   12bb8:	andne	r0, r0, #249	; 0xf9
   12bbc:	strbne	r0, [r4, #40]	; 0x28
   12bc0:	movne	r0, #1
   12bc4:	popne	{r4, r5, r6, sl, fp, pc}
   12bc8:	movw	r0, #33000	; 0x80e8
   12bcc:	movt	r0, #2
   12bd0:	ldr	r0, [r0]
   12bd4:	blx	r0

00012bd8 <_obstack_begin_1@@Base>:
   12bd8:	push	{r4, r5, r6, sl, fp, lr}
   12bdc:	add	fp, sp, #16
   12be0:	cmp	r1, #0
   12be4:	mov	r5, r2
   12be8:	mov	r4, r0
   12bec:	str	r3, [r0, #28]
   12bf0:	ldr	r2, [fp, #8]
   12bf4:	movweq	r1, #4072	; 0xfe8
   12bf8:	cmp	r5, #0
   12bfc:	str	r1, [r0]
   12c00:	ldr	r0, [fp, #12]
   12c04:	movweq	r5, #8
   12c08:	sub	r6, r5, #1
   12c0c:	str	r0, [r4, #36]	; 0x24
   12c10:	str	r2, [r4, #32]
   12c14:	str	r6, [r4, #24]
   12c18:	ldrb	r2, [r4, #40]	; 0x28
   12c1c:	orr	r2, r2, #1
   12c20:	strb	r2, [r4, #40]	; 0x28
   12c24:	blx	r3
   12c28:	cmp	r0, #0
   12c2c:	str	r0, [r4, #4]
   12c30:	addne	r1, r0, r6
   12c34:	rsbne	r2, r5, #0
   12c38:	addne	r1, r1, #8
   12c3c:	andne	r1, r1, r2
   12c40:	strne	r1, [r4, #12]
   12c44:	strne	r1, [r4, #8]
   12c48:	ldrne	r1, [r4]
   12c4c:	addne	r1, r0, r1
   12c50:	strne	r1, [r0]
   12c54:	strne	r1, [r4, #16]
   12c58:	movne	r1, #0
   12c5c:	strne	r1, [r0, #4]
   12c60:	ldrbne	r0, [r4, #40]	; 0x28
   12c64:	andne	r0, r0, #249	; 0xf9
   12c68:	strbne	r0, [r4, #40]	; 0x28
   12c6c:	movne	r0, #1
   12c70:	popne	{r4, r5, r6, sl, fp, pc}
   12c74:	movw	r0, #33000	; 0x80e8
   12c78:	movt	r0, #2
   12c7c:	ldr	r0, [r0]
   12c80:	blx	r0

00012c84 <_obstack_newchunk@@Base>:
   12c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c88:	add	fp, sp, #28
   12c8c:	sub	sp, sp, #4
   12c90:	mov	r4, r0
   12c94:	ldr	r2, [r0]
   12c98:	ldr	r0, [r0, #8]
   12c9c:	ldr	r3, [r4, #12]
   12ca0:	sub	r9, r3, r0
   12ca4:	ldr	r0, [r4, #24]
   12ca8:	mov	r3, #0
   12cac:	add	r1, r9, r1
   12cb0:	adds	r6, r1, r0
   12cb4:	adc	r0, r3, #0
   12cb8:	mov	r3, #100	; 0x64
   12cbc:	add	r3, r3, r9, lsr #3
   12cc0:	adds	r7, r3, r6
   12cc4:	movcs	r7, r6
   12cc8:	cmp	r7, r2
   12ccc:	movcc	r7, r2
   12cd0:	cmp	r1, r9
   12cd4:	bcc	12dd8 <_obstack_newchunk@@Base+0x154>
   12cd8:	cmp	r0, #0
   12cdc:	bne	12dd8 <_obstack_newchunk@@Base+0x154>
   12ce0:	ldrb	r0, [r4, #40]	; 0x28
   12ce4:	ldr	r8, [r4, #4]
   12ce8:	tst	r0, #1
   12cec:	bne	12d0c <_obstack_newchunk@@Base+0x88>
   12cf0:	ldr	r1, [r4, #28]
   12cf4:	mov	r0, r7
   12cf8:	blx	r1
   12cfc:	mov	r6, r0
   12d00:	cmp	r0, #0
   12d04:	bne	12d28 <_obstack_newchunk@@Base+0xa4>
   12d08:	b	12dd8 <_obstack_newchunk@@Base+0x154>
   12d0c:	ldr	r2, [r4, #28]
   12d10:	ldr	r0, [r4, #36]	; 0x24
   12d14:	mov	r1, r7
   12d18:	blx	r2
   12d1c:	mov	r6, r0
   12d20:	cmp	r0, #0
   12d24:	beq	12dd8 <_obstack_newchunk@@Base+0x154>
   12d28:	add	r0, r6, r7
   12d2c:	str	r6, [r4, #4]
   12d30:	str	r8, [r6, #4]
   12d34:	mov	r2, r9
   12d38:	str	r0, [r4, #16]
   12d3c:	str	r0, [r6]
   12d40:	ldr	r5, [r4, #24]
   12d44:	ldr	sl, [r4, #8]
   12d48:	add	r0, r6, r5
   12d4c:	mov	r1, sl
   12d50:	add	r0, r0, #8
   12d54:	bic	r7, r0, r5
   12d58:	mov	r0, r7
   12d5c:	bl	10f00 <memcpy@plt>
   12d60:	ldrb	r0, [r4, #40]	; 0x28
   12d64:	tst	r0, #2
   12d68:	bne	12db8 <_obstack_newchunk@@Base+0x134>
   12d6c:	add	r1, r8, r5
   12d70:	mvn	r0, r5
   12d74:	add	r1, r1, #8
   12d78:	and	r0, r1, r0
   12d7c:	cmp	sl, r0
   12d80:	bne	12db8 <_obstack_newchunk@@Base+0x134>
   12d84:	ldr	r0, [r8, #4]
   12d88:	str	r0, [r6, #4]
   12d8c:	ldrb	r0, [r4, #40]	; 0x28
   12d90:	tst	r0, #1
   12d94:	bne	12da8 <_obstack_newchunk@@Base+0x124>
   12d98:	ldr	r1, [r4, #32]
   12d9c:	mov	r0, r8
   12da0:	blx	r1
   12da4:	b	12db8 <_obstack_newchunk@@Base+0x134>
   12da8:	ldr	r2, [r4, #32]
   12dac:	ldr	r0, [r4, #36]	; 0x24
   12db0:	mov	r1, r8
   12db4:	blx	r2
   12db8:	add	r0, r7, r9
   12dbc:	str	r7, [r4, #8]
   12dc0:	str	r0, [r4, #12]
   12dc4:	ldrb	r0, [r4, #40]	; 0x28
   12dc8:	and	r0, r0, #253	; 0xfd
   12dcc:	strb	r0, [r4, #40]	; 0x28
   12dd0:	sub	sp, fp, #28
   12dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dd8:	movw	r0, #33000	; 0x80e8
   12ddc:	movt	r0, #2
   12de0:	ldr	r0, [r0]
   12de4:	blx	r0

00012de8 <_obstack_allocated_p@@Base>:
   12de8:	ldr	r2, [r0, #4]
   12dec:	mov	r0, #0
   12df0:	cmp	r2, #0
   12df4:	bxeq	lr
   12df8:	cmp	r2, r1
   12dfc:	bcc	12e14 <_obstack_allocated_p@@Base+0x2c>
   12e00:	ldr	r2, [r2, #4]
   12e04:	cmp	r2, #0
   12e08:	bxeq	lr
   12e0c:	cmp	r2, r1
   12e10:	bcs	12e00 <_obstack_allocated_p@@Base+0x18>
   12e14:	ldr	r3, [r2]
   12e18:	cmp	r3, r1
   12e1c:	bcc	12e00 <_obstack_allocated_p@@Base+0x18>
   12e20:	mov	r0, #1
   12e24:	bx	lr

00012e28 <_obstack_free@@Base>:
   12e28:	push	{r4, r5, r6, sl, fp, lr}
   12e2c:	add	fp, sp, #16
   12e30:	mov	r5, r1
   12e34:	ldr	r1, [r0, #4]
   12e38:	cmp	r1, #0
   12e3c:	beq	12ea8 <_obstack_free@@Base+0x80>
   12e40:	mov	r4, r0
   12e44:	cmp	r1, r5
   12e48:	bcs	12e88 <_obstack_free@@Base+0x60>
   12e4c:	b	12e7c <_obstack_free@@Base+0x54>
   12e50:	ldr	r2, [r4, #32]
   12e54:	mov	r0, r1
   12e58:	blx	r2
   12e5c:	ldrb	r0, [r4, #40]	; 0x28
   12e60:	cmp	r6, #0
   12e64:	mov	r1, r6
   12e68:	orr	r0, r0, #2
   12e6c:	strb	r0, [r4, #40]	; 0x28
   12e70:	beq	12ea8 <_obstack_free@@Base+0x80>
   12e74:	cmp	r1, r5
   12e78:	bcs	12e88 <_obstack_free@@Base+0x60>
   12e7c:	ldr	r0, [r1]
   12e80:	cmp	r0, r5
   12e84:	bcs	12eb4 <_obstack_free@@Base+0x8c>
   12e88:	ldrb	r0, [r4, #40]	; 0x28
   12e8c:	ldr	r6, [r1, #4]
   12e90:	tst	r0, #1
   12e94:	beq	12e50 <_obstack_free@@Base+0x28>
   12e98:	ldr	r2, [r4, #32]
   12e9c:	ldr	r0, [r4, #36]	; 0x24
   12ea0:	blx	r2
   12ea4:	b	12e5c <_obstack_free@@Base+0x34>
   12ea8:	cmp	r5, #0
   12eac:	popeq	{r4, r5, r6, sl, fp, pc}
   12eb0:	bl	110ec <abort@plt>
   12eb4:	str	r5, [r4, #8]
   12eb8:	str	r5, [r4, #12]
   12ebc:	ldr	r0, [r1]
   12ec0:	str	r1, [r4, #4]
   12ec4:	str	r0, [r4, #16]
   12ec8:	pop	{r4, r5, r6, sl, fp, pc}

00012ecc <_obstack_memory_used@@Base>:
   12ecc:	ldr	r1, [r0, #4]
   12ed0:	mov	r0, #0
   12ed4:	b	12ee8 <_obstack_memory_used@@Base+0x1c>
   12ed8:	ldr	r2, [r1]
   12edc:	sub	r0, r0, r1
   12ee0:	ldr	r1, [r1, #4]
   12ee4:	add	r0, r0, r2
   12ee8:	cmp	r1, #0
   12eec:	bxeq	lr
   12ef0:	b	12ed8 <_obstack_memory_used@@Base+0xc>
   12ef4:	push	{fp, lr}
   12ef8:	mov	fp, sp
   12efc:	movw	r0, #33088	; 0x8140
   12f00:	movw	r1, #30876	; 0x789c
   12f04:	mov	r2, #5
   12f08:	movt	r0, #2
   12f0c:	movt	r1, #1
   12f10:	ldr	r4, [r0]
   12f14:	mov	r0, #0
   12f18:	bl	10f24 <dcgettext@plt>
   12f1c:	movw	r2, #31144	; 0x79a8
   12f20:	mov	r3, r0
   12f24:	mov	r0, r4
   12f28:	mov	r1, #1
   12f2c:	movt	r2, #1
   12f30:	bl	1108c <__fprintf_chk@plt>
   12f34:	movw	r0, #32996	; 0x80e4
   12f38:	movt	r0, #2
   12f3c:	ldr	r0, [r0]
   12f40:	bl	1102c <exit@plt>
   12f44:	push	{r4, r5, fp, lr}
   12f48:	add	fp, sp, #8
   12f4c:	cmp	r0, #0
   12f50:	beq	12fe4 <_obstack_memory_used@@Base+0x118>
   12f54:	mov	r1, #47	; 0x2f
   12f58:	mov	r4, r0
   12f5c:	bl	110bc <strrchr@plt>
   12f60:	cmp	r0, #0
   12f64:	mov	r5, r4
   12f68:	addne	r5, r0, #1
   12f6c:	sub	r0, r5, r4
   12f70:	cmp	r0, #7
   12f74:	blt	12fc8 <_obstack_memory_used@@Base+0xfc>
   12f78:	movw	r1, #30949	; 0x78e5
   12f7c:	sub	r0, r5, #7
   12f80:	mov	r2, #7
   12f84:	movt	r1, #1
   12f88:	bl	110e0 <strncmp@plt>
   12f8c:	cmp	r0, #0
   12f90:	bne	12fc8 <_obstack_memory_used@@Base+0xfc>
   12f94:	movw	r1, #30957	; 0x78ed
   12f98:	mov	r0, r5
   12f9c:	mov	r2, #3
   12fa0:	movt	r1, #1
   12fa4:	bl	110e0 <strncmp@plt>
   12fa8:	cmp	r0, #0
   12fac:	beq	12fb8 <_obstack_memory_used@@Base+0xec>
   12fb0:	mov	r4, r5
   12fb4:	b	12fc8 <_obstack_memory_used@@Base+0xfc>
   12fb8:	movw	r0, #33072	; 0x8130
   12fbc:	add	r4, r5, #3
   12fc0:	movt	r0, #2
   12fc4:	str	r4, [r0]
   12fc8:	movw	r0, #33076	; 0x8134
   12fcc:	movt	r0, #2
   12fd0:	str	r4, [r0]
   12fd4:	movw	r0, #33160	; 0x8188
   12fd8:	movt	r0, #2
   12fdc:	str	r4, [r0]
   12fe0:	pop	{r4, r5, fp, pc}
   12fe4:	movw	r0, #33088	; 0x8140
   12fe8:	mov	r1, #55	; 0x37
   12fec:	mov	r2, #1
   12ff0:	movt	r0, #2
   12ff4:	ldr	r3, [r0]
   12ff8:	movw	r0, #30893	; 0x78ad
   12ffc:	movt	r0, #1
   13000:	bl	10f60 <fwrite@plt>
   13004:	bl	110ec <abort@plt>
   13008:	push	{r4, r5, r6, sl, fp, lr}
   1300c:	add	fp, sp, #16
   13010:	mov	r4, r0
   13014:	movw	r0, #33168	; 0x8190
   13018:	movt	r0, #2
   1301c:	cmp	r4, #0
   13020:	moveq	r4, r0
   13024:	bl	11050 <__errno_location@plt>
   13028:	ldr	r6, [r0]
   1302c:	mov	r5, r0
   13030:	mov	r0, r4
   13034:	mov	r1, #48	; 0x30
   13038:	bl	15a40 <_obstack_memory_used@@Base+0x2b74>
   1303c:	str	r6, [r5]
   13040:	pop	{r4, r5, r6, sl, fp, pc}
   13044:	movw	r1, #33168	; 0x8190
   13048:	cmp	r0, #0
   1304c:	movt	r1, #2
   13050:	movne	r1, r0
   13054:	ldr	r0, [r1]
   13058:	bx	lr
   1305c:	movw	r2, #33168	; 0x8190
   13060:	cmp	r0, #0
   13064:	movt	r2, #2
   13068:	movne	r2, r0
   1306c:	str	r1, [r2]
   13070:	bx	lr
   13074:	movw	r3, #33168	; 0x8190
   13078:	cmp	r0, #0
   1307c:	and	r2, r2, #1
   13080:	movt	r3, #2
   13084:	movne	r3, r0
   13088:	ubfx	r0, r1, #5, #3
   1308c:	and	r1, r1, #31
   13090:	add	ip, r3, r0, lsl #2
   13094:	mov	r0, #1
   13098:	ldr	r3, [ip, #8]
   1309c:	and	r0, r0, r3, lsr r1
   130a0:	eor	r2, r0, r2
   130a4:	eor	r1, r3, r2, lsl r1
   130a8:	str	r1, [ip, #8]
   130ac:	bx	lr
   130b0:	movw	r2, #33168	; 0x8190
   130b4:	cmp	r0, #0
   130b8:	movt	r2, #2
   130bc:	movne	r2, r0
   130c0:	ldr	r0, [r2, #4]
   130c4:	str	r1, [r2, #4]
   130c8:	bx	lr
   130cc:	push	{fp, lr}
   130d0:	mov	fp, sp
   130d4:	movw	r3, #33168	; 0x8190
   130d8:	cmp	r0, #0
   130dc:	movt	r3, #2
   130e0:	movne	r3, r0
   130e4:	cmp	r1, #0
   130e8:	mov	r0, #10
   130ec:	cmpne	r2, #0
   130f0:	str	r0, [r3]
   130f4:	bne	130fc <_obstack_memory_used@@Base+0x230>
   130f8:	bl	110ec <abort@plt>
   130fc:	str	r1, [r3, #40]	; 0x28
   13100:	str	r2, [r3, #44]	; 0x2c
   13104:	pop	{fp, pc}
   13108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1310c:	add	fp, sp, #28
   13110:	sub	sp, sp, #20
   13114:	mov	r7, r0
   13118:	ldr	r0, [fp, #8]
   1311c:	movw	r5, #33168	; 0x8190
   13120:	mov	r8, r3
   13124:	mov	r9, r2
   13128:	mov	sl, r1
   1312c:	movt	r5, #2
   13130:	cmp	r0, #0
   13134:	movne	r5, r0
   13138:	bl	11050 <__errno_location@plt>
   1313c:	ldr	r2, [r5, #40]	; 0x28
   13140:	ldr	r3, [r5, #44]	; 0x2c
   13144:	mov	r4, r0
   13148:	ldm	r5, {r0, r1}
   1314c:	add	r5, r5, #8
   13150:	ldr	r6, [r4]
   13154:	stm	sp, {r0, r1, r5}
   13158:	mov	r0, r7
   1315c:	mov	r1, sl
   13160:	str	r2, [sp, #12]
   13164:	str	r3, [sp, #16]
   13168:	mov	r2, r9
   1316c:	mov	r3, r8
   13170:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   13174:	str	r6, [r4]
   13178:	sub	sp, fp, #28
   1317c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13184:	add	fp, sp, #28
   13188:	sub	sp, sp, #156	; 0x9c
   1318c:	str	r0, [fp, #-84]	; 0xffffffac
   13190:	add	r0, r2, #1
   13194:	mov	r6, r1
   13198:	mov	r7, r3
   1319c:	str	r2, [fp, #-80]	; 0xffffffb0
   131a0:	str	r0, [sp, #80]	; 0x50
   131a4:	ldr	r0, [fp, #12]
   131a8:	and	r1, r0, #1
   131ac:	str	r1, [sp, #36]	; 0x24
   131b0:	and	r1, r0, #4
   131b4:	str	r1, [sp, #32]
   131b8:	ubfx	r8, r0, #1, #1
   131bc:	bl	10f78 <__ctype_get_mb_cur_max@plt>
   131c0:	str	r0, [sp, #40]	; 0x28
   131c4:	ldr	r0, [fp, #24]
   131c8:	ldr	r4, [fp, #8]
   131cc:	mov	r1, #0
   131d0:	str	r1, [fp, #-52]	; 0xffffffcc
   131d4:	mov	r1, #0
   131d8:	str	r1, [sp, #60]	; 0x3c
   131dc:	mov	r1, #1
   131e0:	str	r1, [sp, #84]	; 0x54
   131e4:	str	r0, [sp, #76]	; 0x4c
   131e8:	ldr	r0, [fp, #20]
   131ec:	str	r0, [sp, #72]	; 0x48
   131f0:	mov	r0, #0
   131f4:	str	r0, [sp, #56]	; 0x38
   131f8:	mov	r0, #0
   131fc:	str	r0, [fp, #-88]	; 0xffffffa8
   13200:	mov	r0, #0
   13204:	str	r0, [fp, #-72]	; 0xffffffb8
   13208:	mov	r0, #0
   1320c:	cmp	r4, #10
   13210:	bhi	1452c <_obstack_memory_used@@Base+0x1660>
   13214:	add	r1, pc, #24
   13218:	ldr	ip, [fp, #-84]	; 0xffffffac
   1321c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13220:	mov	r5, r6
   13224:	mov	r9, #0
   13228:	mov	r2, #1
   1322c:	mov	r3, #0
   13230:	ldr	pc, [r1, r4, lsl #2]
   13234:	strdeq	r3, [r1], -ip
   13238:	andeq	r3, r1, r8, lsr r3
   1323c:	andeq	r3, r1, ip, lsl #6
   13240:	strdeq	r3, [r1], -r4
   13244:	andeq	r3, r1, ip, lsr #6
   13248:	muleq	r1, r0, r3
   1324c:	andeq	r3, r1, ip, lsl r3
   13250:	andeq	r3, r1, r8, lsl #12
   13254:	andeq	r3, r1, r0, ror #4
   13258:	andeq	r3, r1, r0, ror #4
   1325c:	muleq	r1, r8, r4
   13260:	movw	r6, #31033	; 0x7939
   13264:	mov	r0, #0
   13268:	mov	r2, #5
   1326c:	movt	r6, #1
   13270:	mov	r1, r6
   13274:	bl	10f24 <dcgettext@plt>
   13278:	cmp	r0, r6
   1327c:	str	r0, [sp, #72]	; 0x48
   13280:	bne	13470 <_obstack_memory_used@@Base+0x5a4>
   13284:	bl	15cbc <_obstack_memory_used@@Base+0x2df0>
   13288:	ldrb	r1, [r0]
   1328c:	and	r1, r1, #223	; 0xdf
   13290:	cmp	r1, #71	; 0x47
   13294:	beq	133f0 <_obstack_memory_used@@Base+0x524>
   13298:	cmp	r1, #85	; 0x55
   1329c:	bne	13454 <_obstack_memory_used@@Base+0x588>
   132a0:	ldrb	r1, [r0, #1]
   132a4:	and	r1, r1, #223	; 0xdf
   132a8:	cmp	r1, #84	; 0x54
   132ac:	bne	13454 <_obstack_memory_used@@Base+0x588>
   132b0:	ldrb	r1, [r0, #2]
   132b4:	and	r1, r1, #223	; 0xdf
   132b8:	cmp	r1, #70	; 0x46
   132bc:	bne	13454 <_obstack_memory_used@@Base+0x588>
   132c0:	ldrb	r1, [r0, #3]
   132c4:	cmp	r1, #45	; 0x2d
   132c8:	bne	13454 <_obstack_memory_used@@Base+0x588>
   132cc:	ldrb	r1, [r0, #4]
   132d0:	cmp	r1, #56	; 0x38
   132d4:	bne	13454 <_obstack_memory_used@@Base+0x588>
   132d8:	ldrb	r0, [r0, #5]
   132dc:	cmp	r0, #0
   132e0:	movw	r0, #31035	; 0x793b
   132e4:	movt	r0, #1
   132e8:	str	r0, [sp, #72]	; 0x48
   132ec:	bne	13454 <_obstack_memory_used@@Base+0x588>
   132f0:	b	13470 <_obstack_memory_used@@Base+0x5a4>
   132f4:	mov	r0, #1
   132f8:	b	13338 <_obstack_memory_used@@Base+0x46c>
   132fc:	mov	r4, #0
   13300:	mov	r9, #0
   13304:	mov	r2, r0
   13308:	b	13388 <_obstack_memory_used@@Base+0x4bc>
   1330c:	tst	r8, #1
   13310:	bne	13338 <_obstack_memory_used@@Base+0x46c>
   13314:	mov	r2, r0
   13318:	b	13360 <_obstack_memory_used@@Base+0x494>
   1331c:	mov	r0, #1
   13320:	mov	r9, #0
   13324:	mov	r4, #5
   13328:	b	133a4 <_obstack_memory_used@@Base+0x4d8>
   1332c:	mov	r2, #1
   13330:	tst	r8, #1
   13334:	beq	13360 <_obstack_memory_used@@Base+0x494>
   13338:	mov	r1, #1
   1333c:	mov	r9, #0
   13340:	mov	r4, #2
   13344:	mov	r2, r0
   13348:	mov	r3, #1
   1334c:	str	r1, [fp, #-72]	; 0xffffffb8
   13350:	movw	r1, #25387	; 0x632b
   13354:	movt	r1, #1
   13358:	str	r1, [fp, #-88]	; 0xffffffa8
   1335c:	b	13608 <_obstack_memory_used@@Base+0x73c>
   13360:	cmp	r5, #0
   13364:	mov	r9, #1
   13368:	mov	r4, #2
   1336c:	movne	r0, #39	; 0x27
   13370:	strbne	r0, [ip]
   13374:	movw	r0, #25387	; 0x632b
   13378:	movt	r0, #1
   1337c:	str	r0, [fp, #-88]	; 0xffffffa8
   13380:	mov	r0, #1
   13384:	str	r0, [fp, #-72]	; 0xffffffb8
   13388:	mov	r3, #0
   1338c:	b	13608 <_obstack_memory_used@@Base+0x73c>
   13390:	mov	r4, #5
   13394:	tst	r8, #1
   13398:	beq	133c0 <_obstack_memory_used@@Base+0x4f4>
   1339c:	mov	r0, #1
   133a0:	mov	r9, #0
   133a4:	str	r0, [fp, #-72]	; 0xffffffb8
   133a8:	movw	r0, #31031	; 0x7937
   133ac:	mov	r2, #1
   133b0:	mov	r3, #1
   133b4:	movt	r0, #1
   133b8:	str	r0, [fp, #-88]	; 0xffffffa8
   133bc:	b	13608 <_obstack_memory_used@@Base+0x73c>
   133c0:	cmp	r5, #0
   133c4:	mov	r3, #0
   133c8:	mov	r9, #1
   133cc:	mov	r2, #1
   133d0:	movne	r0, #34	; 0x22
   133d4:	strbne	r0, [ip]
   133d8:	movw	r0, #31031	; 0x7937
   133dc:	movt	r0, #1
   133e0:	str	r0, [fp, #-88]	; 0xffffffa8
   133e4:	mov	r0, #1
   133e8:	str	r0, [fp, #-72]	; 0xffffffb8
   133ec:	b	13608 <_obstack_memory_used@@Base+0x73c>
   133f0:	ldrb	r1, [r0, #1]
   133f4:	and	r1, r1, #223	; 0xdf
   133f8:	cmp	r1, #66	; 0x42
   133fc:	bne	13454 <_obstack_memory_used@@Base+0x588>
   13400:	ldrb	r1, [r0, #2]
   13404:	cmp	r1, #49	; 0x31
   13408:	bne	13454 <_obstack_memory_used@@Base+0x588>
   1340c:	ldrb	r1, [r0, #3]
   13410:	cmp	r1, #56	; 0x38
   13414:	bne	13454 <_obstack_memory_used@@Base+0x588>
   13418:	ldrb	r1, [r0, #4]
   1341c:	cmp	r1, #48	; 0x30
   13420:	bne	13454 <_obstack_memory_used@@Base+0x588>
   13424:	ldrb	r1, [r0, #5]
   13428:	cmp	r1, #51	; 0x33
   1342c:	bne	13454 <_obstack_memory_used@@Base+0x588>
   13430:	ldrb	r1, [r0, #6]
   13434:	cmp	r1, #48	; 0x30
   13438:	bne	13454 <_obstack_memory_used@@Base+0x588>
   1343c:	ldrb	r0, [r0, #7]
   13440:	cmp	r0, #0
   13444:	movw	r0, #31043	; 0x7943
   13448:	movt	r0, #1
   1344c:	str	r0, [sp, #72]	; 0x48
   13450:	beq	13470 <_obstack_memory_used@@Base+0x5a4>
   13454:	movw	r1, #31031	; 0x7937
   13458:	movw	r0, #25387	; 0x632b
   1345c:	cmp	r4, #9
   13460:	movt	r1, #1
   13464:	movt	r0, #1
   13468:	moveq	r0, r1
   1346c:	str	r0, [sp, #72]	; 0x48
   13470:	movw	r6, #25387	; 0x632b
   13474:	mov	r0, #0
   13478:	mov	r2, #5
   1347c:	movt	r6, #1
   13480:	mov	r1, r6
   13484:	bl	10f24 <dcgettext@plt>
   13488:	cmp	r0, r6
   1348c:	str	r0, [sp, #76]	; 0x4c
   13490:	beq	134dc <_obstack_memory_used@@Base+0x610>
   13494:	ldr	ip, [fp, #-84]	; 0xffffffac
   13498:	mov	r9, #0
   1349c:	tst	r8, #1
   134a0:	bne	135e4 <_obstack_memory_used@@Base+0x718>
   134a4:	ldr	r0, [sp, #72]	; 0x48
   134a8:	ldrb	r0, [r0]
   134ac:	cmp	r0, #0
   134b0:	beq	135e4 <_obstack_memory_used@@Base+0x718>
   134b4:	ldr	r1, [sp, #72]	; 0x48
   134b8:	mov	r9, #0
   134bc:	add	r1, r1, #1
   134c0:	cmp	r9, r5
   134c4:	strbcc	r0, [ip, r9]
   134c8:	ldrb	r0, [r1, r9]
   134cc:	add	r9, r9, #1
   134d0:	cmp	r0, #0
   134d4:	bne	134c0 <_obstack_memory_used@@Base+0x5f4>
   134d8:	b	135e4 <_obstack_memory_used@@Base+0x718>
   134dc:	bl	15cbc <_obstack_memory_used@@Base+0x2df0>
   134e0:	ldrb	r1, [r0]
   134e4:	and	r1, r1, #223	; 0xdf
   134e8:	cmp	r1, #71	; 0x47
   134ec:	beq	1355c <_obstack_memory_used@@Base+0x690>
   134f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   134f4:	cmp	r1, #85	; 0x55
   134f8:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   134fc:	ldrb	r1, [r0, #1]
   13500:	and	r1, r1, #223	; 0xdf
   13504:	cmp	r1, #84	; 0x54
   13508:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   1350c:	ldrb	r1, [r0, #2]
   13510:	and	r1, r1, #223	; 0xdf
   13514:	cmp	r1, #70	; 0x46
   13518:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   1351c:	ldrb	r1, [r0, #3]
   13520:	cmp	r1, #45	; 0x2d
   13524:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   13528:	ldrb	r1, [r0, #4]
   1352c:	cmp	r1, #56	; 0x38
   13530:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   13534:	ldrb	r0, [r0, #5]
   13538:	cmp	r0, #0
   1353c:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   13540:	movw	r0, #31039	; 0x793f
   13544:	movt	r0, #1
   13548:	str	r0, [sp, #76]	; 0x4c
   1354c:	mov	r9, #0
   13550:	tst	r8, #1
   13554:	beq	134a4 <_obstack_memory_used@@Base+0x5d8>
   13558:	b	135e4 <_obstack_memory_used@@Base+0x718>
   1355c:	ldrb	r1, [r0, #1]
   13560:	ldr	ip, [fp, #-84]	; 0xffffffac
   13564:	and	r1, r1, #223	; 0xdf
   13568:	cmp	r1, #66	; 0x42
   1356c:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   13570:	ldrb	r1, [r0, #2]
   13574:	cmp	r1, #49	; 0x31
   13578:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   1357c:	ldrb	r1, [r0, #3]
   13580:	cmp	r1, #56	; 0x38
   13584:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   13588:	ldrb	r1, [r0, #4]
   1358c:	cmp	r1, #48	; 0x30
   13590:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   13594:	ldrb	r1, [r0, #5]
   13598:	cmp	r1, #51	; 0x33
   1359c:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   135a0:	ldrb	r1, [r0, #6]
   135a4:	cmp	r1, #48	; 0x30
   135a8:	bne	135b8 <_obstack_memory_used@@Base+0x6ec>
   135ac:	ldrb	r0, [r0, #7]
   135b0:	cmp	r0, #0
   135b4:	beq	143cc <_obstack_memory_used@@Base+0x1500>
   135b8:	movw	r0, #25387	; 0x632b
   135bc:	cmp	r4, #9
   135c0:	movt	r0, #1
   135c4:	mov	r1, r0
   135c8:	movw	r0, #31031	; 0x7937
   135cc:	movt	r0, #1
   135d0:	moveq	r1, r0
   135d4:	str	r1, [sp, #76]	; 0x4c
   135d8:	mov	r9, #0
   135dc:	tst	r8, #1
   135e0:	beq	134a4 <_obstack_memory_used@@Base+0x5d8>
   135e4:	ldr	r6, [sp, #76]	; 0x4c
   135e8:	mov	r0, r6
   135ec:	bl	11044 <strlen@plt>
   135f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   135f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   135f8:	str	r0, [fp, #-72]	; 0xffffffb8
   135fc:	str	r6, [fp, #-88]	; 0xffffffa8
   13600:	mov	r2, #1
   13604:	mov	r3, r8
   13608:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1360c:	str	r4, [fp, #-64]	; 0xffffffc0
   13610:	mov	sl, #0
   13614:	str	r3, [fp, #-76]	; 0xffffffb4
   13618:	str	r2, [sp, #88]	; 0x58
   1361c:	cmp	r0, #0
   13620:	movwne	r0, #1
   13624:	and	r1, r0, r3
   13628:	and	r1, r2, r1
   1362c:	str	r1, [sp, #48]	; 0x30
   13630:	sub	r1, r4, #2
   13634:	clz	r1, r1
   13638:	lsr	r1, r1, #5
   1363c:	and	r1, r1, r3
   13640:	str	r1, [sp, #44]	; 0x2c
   13644:	subs	r1, r4, #2
   13648:	eor	r4, r3, #1
   1364c:	movwne	r1, #1
   13650:	str	r4, [sp, #92]	; 0x5c
   13654:	orr	r4, r1, r4
   13658:	and	r1, r1, r2
   1365c:	and	r0, r0, r1
   13660:	str	r4, [sp, #64]	; 0x40
   13664:	ldr	r4, [sp, #84]	; 0x54
   13668:	str	r0, [fp, #-60]	; 0xffffffc4
   1366c:	orr	r0, r1, r3
   13670:	ldr	r1, [fp, #16]
   13674:	eor	r0, r0, #1
   13678:	clz	r1, r1
   1367c:	lsr	r1, r1, #5
   13680:	orr	r0, r1, r0
   13684:	str	r0, [fp, #-68]	; 0xffffffbc
   13688:	eor	r0, r2, #1
   1368c:	str	r0, [sp, #52]	; 0x34
   13690:	cmn	r7, #1
   13694:	beq	136a4 <_obstack_memory_used@@Base+0x7d8>
   13698:	cmp	sl, r7
   1369c:	bne	136b0 <_obstack_memory_used@@Base+0x7e4>
   136a0:	b	14344 <_obstack_memory_used@@Base+0x1478>
   136a4:	ldrb	r0, [lr, sl]
   136a8:	cmp	r0, #0
   136ac:	beq	1434c <_obstack_memory_used@@Base+0x1480>
   136b0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   136b4:	cmp	r0, #0
   136b8:	beq	13718 <_obstack_memory_used@@Base+0x84c>
   136bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   136c0:	mov	r6, r5
   136c4:	add	r5, sl, r0
   136c8:	cmp	r0, #2
   136cc:	bcc	13738 <_obstack_memory_used@@Base+0x86c>
   136d0:	mov	r0, #0
   136d4:	cmn	r7, #1
   136d8:	str	r0, [fp, #-56]	; 0xffffffc8
   136dc:	bne	136f4 <_obstack_memory_used@@Base+0x828>
   136e0:	mov	r0, lr
   136e4:	bl	11044 <strlen@plt>
   136e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   136ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   136f0:	mov	r7, r0
   136f4:	cmp	r5, r7
   136f8:	bls	13748 <_obstack_memory_used@@Base+0x87c>
   136fc:	mov	r0, #0
   13700:	mov	r5, r6
   13704:	str	r0, [fp, #-48]	; 0xffffffd0
   13708:	ldrb	r6, [lr, sl]
   1370c:	cmp	r6, #126	; 0x7e
   13710:	bls	13798 <_obstack_memory_used@@Base+0x8cc>
   13714:	b	13cf4 <_obstack_memory_used@@Base+0xe28>
   13718:	mov	r0, #0
   1371c:	str	r0, [fp, #-56]	; 0xffffffc8
   13720:	mov	r0, #0
   13724:	str	r0, [fp, #-48]	; 0xffffffd0
   13728:	ldrb	r6, [lr, sl]
   1372c:	cmp	r6, #126	; 0x7e
   13730:	bls	13798 <_obstack_memory_used@@Base+0x8cc>
   13734:	b	13cf4 <_obstack_memory_used@@Base+0xe28>
   13738:	mov	r0, #0
   1373c:	str	r0, [fp, #-56]	; 0xffffffc8
   13740:	cmp	r5, r7
   13744:	bhi	136fc <_obstack_memory_used@@Base+0x830>
   13748:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1374c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13750:	add	r0, lr, sl
   13754:	bl	11038 <bcmp@plt>
   13758:	ldr	r2, [sp, #92]	; 0x5c
   1375c:	cmp	r0, #0
   13760:	mov	r1, r0
   13764:	mov	r5, r6
   13768:	movwne	r1, #1
   1376c:	orr	r1, r1, r2
   13770:	tst	r1, #1
   13774:	beq	1440c <_obstack_memory_used@@Base+0x1540>
   13778:	ldr	ip, [fp, #-84]	; 0xffffffac
   1377c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13780:	clz	r0, r0
   13784:	lsr	r0, r0, #5
   13788:	str	r0, [fp, #-48]	; 0xffffffd0
   1378c:	ldrb	r6, [lr, sl]
   13790:	cmp	r6, #126	; 0x7e
   13794:	bhi	13cf4 <_obstack_memory_used@@Base+0xe28>
   13798:	add	r3, pc, #16
   1379c:	mov	r8, #1
   137a0:	mov	r2, #110	; 0x6e
   137a4:	mov	r0, #97	; 0x61
   137a8:	mov	r1, #0
   137ac:	ldr	pc, [r3, r6, lsl #2]
   137b0:	andeq	r3, r1, ip, lsr #21
   137b4:	strdeq	r3, [r1], -r4
   137b8:	strdeq	r3, [r1], -r4
   137bc:	strdeq	r3, [r1], -r4
   137c0:	strdeq	r3, [r1], -r4
   137c4:	strdeq	r3, [r1], -r4
   137c8:	strdeq	r3, [r1], -r4
   137cc:	andeq	r3, r1, r8, lsr #27
   137d0:	andeq	r3, r1, ip, lsl #21
   137d4:	andeq	r3, r1, r4, lsl #21
   137d8:	muleq	r1, r8, sl
   137dc:	andeq	r3, r1, r8, asr #23
   137e0:	andeq	r3, r1, ip, ror sl
   137e4:	muleq	r1, r4, sl
   137e8:	strdeq	r3, [r1], -r4
   137ec:	strdeq	r3, [r1], -r4
   137f0:	strdeq	r3, [r1], -r4
   137f4:	strdeq	r3, [r1], -r4
   137f8:	strdeq	r3, [r1], -r4
   137fc:	strdeq	r3, [r1], -r4
   13800:	strdeq	r3, [r1], -r4
   13804:	strdeq	r3, [r1], -r4
   13808:	strdeq	r3, [r1], -r4
   1380c:	strdeq	r3, [r1], -r4
   13810:	strdeq	r3, [r1], -r4
   13814:	strdeq	r3, [r1], -r4
   13818:	strdeq	r3, [r1], -r4
   1381c:	strdeq	r3, [r1], -r4
   13820:	strdeq	r3, [r1], -r4
   13824:	strdeq	r3, [r1], -r4
   13828:	strdeq	r3, [r1], -r4
   1382c:	strdeq	r3, [r1], -r4
   13830:	andeq	r3, r1, r0, lsr #20
   13834:	andeq	r3, r1, r4, lsr #20
   13838:	andeq	r3, r1, r4, lsr #20
   1383c:	andeq	r3, r1, r4, lsl sl
   13840:	andeq	r3, r1, r4, lsr #20
   13844:	andeq	r3, r1, ip, lsr #19
   13848:	andeq	r3, r1, r4, lsr #20
   1384c:	ldrdeq	r3, [r1], -r0
   13850:	andeq	r3, r1, r4, lsr #20
   13854:	andeq	r3, r1, r4, lsr #20
   13858:	andeq	r3, r1, r4, lsr #20
   1385c:	andeq	r3, r1, ip, lsr #19
   13860:	andeq	r3, r1, ip, lsr #19
   13864:	andeq	r3, r1, ip, lsr #19
   13868:	andeq	r3, r1, ip, lsr #19
   1386c:	andeq	r3, r1, ip, lsr #19
   13870:	andeq	r3, r1, ip, lsr #19
   13874:	andeq	r3, r1, ip, lsr #19
   13878:	andeq	r3, r1, ip, lsr #19
   1387c:	andeq	r3, r1, ip, lsr #19
   13880:	andeq	r3, r1, ip, lsr #19
   13884:	andeq	r3, r1, ip, lsr #19
   13888:	andeq	r3, r1, ip, lsr #19
   1388c:	andeq	r3, r1, ip, lsr #19
   13890:	andeq	r3, r1, ip, lsr #19
   13894:	andeq	r3, r1, ip, lsr #19
   13898:	andeq	r3, r1, ip, lsr #19
   1389c:	andeq	r3, r1, r4, lsr #20
   138a0:	andeq	r3, r1, r4, lsr #20
   138a4:	andeq	r3, r1, r4, lsr #20
   138a8:	andeq	r3, r1, r4, lsr #20
   138ac:	muleq	r1, r4, fp
   138b0:	strdeq	r3, [r1], -r4
   138b4:	andeq	r3, r1, ip, lsr #19
   138b8:	andeq	r3, r1, ip, lsr #19
   138bc:	andeq	r3, r1, ip, lsr #19
   138c0:	andeq	r3, r1, ip, lsr #19
   138c4:	andeq	r3, r1, ip, lsr #19
   138c8:	andeq	r3, r1, ip, lsr #19
   138cc:	andeq	r3, r1, ip, lsr #19
   138d0:	andeq	r3, r1, ip, lsr #19
   138d4:	andeq	r3, r1, ip, lsr #19
   138d8:	andeq	r3, r1, ip, lsr #19
   138dc:	andeq	r3, r1, ip, lsr #19
   138e0:	andeq	r3, r1, ip, lsr #19
   138e4:	andeq	r3, r1, ip, lsr #19
   138e8:	andeq	r3, r1, ip, lsr #19
   138ec:	andeq	r3, r1, ip, lsr #19
   138f0:	andeq	r3, r1, ip, lsr #19
   138f4:	andeq	r3, r1, ip, lsr #19
   138f8:	andeq	r3, r1, ip, lsr #19
   138fc:	andeq	r3, r1, ip, lsr #19
   13900:	andeq	r3, r1, ip, lsr #19
   13904:	andeq	r3, r1, ip, lsr #19
   13908:	andeq	r3, r1, ip, lsr #19
   1390c:	andeq	r3, r1, ip, lsr #19
   13910:	andeq	r3, r1, ip, lsr #19
   13914:	andeq	r3, r1, ip, lsr #19
   13918:	andeq	r3, r1, ip, lsr #19
   1391c:	andeq	r3, r1, r4, lsr #20
   13920:	andeq	r3, r1, r8, asr sl
   13924:	andeq	r3, r1, ip, lsr #19
   13928:	andeq	r3, r1, r4, lsr #20
   1392c:	andeq	r3, r1, ip, lsr #19
   13930:	andeq	r3, r1, r4, lsr #20
   13934:	andeq	r3, r1, ip, lsr #19
   13938:	andeq	r3, r1, ip, lsr #19
   1393c:	andeq	r3, r1, ip, lsr #19
   13940:	andeq	r3, r1, ip, lsr #19
   13944:	andeq	r3, r1, ip, lsr #19
   13948:	andeq	r3, r1, ip, lsr #19
   1394c:	andeq	r3, r1, ip, lsr #19
   13950:	andeq	r3, r1, ip, lsr #19
   13954:	andeq	r3, r1, ip, lsr #19
   13958:	andeq	r3, r1, ip, lsr #19
   1395c:	andeq	r3, r1, ip, lsr #19
   13960:	andeq	r3, r1, ip, lsr #19
   13964:	andeq	r3, r1, ip, lsr #19
   13968:	andeq	r3, r1, ip, lsr #19
   1396c:	andeq	r3, r1, ip, lsr #19
   13970:	andeq	r3, r1, ip, lsr #19
   13974:	andeq	r3, r1, ip, lsr #19
   13978:	andeq	r3, r1, ip, lsr #19
   1397c:	andeq	r3, r1, ip, lsr #19
   13980:	andeq	r3, r1, ip, lsr #19
   13984:	andeq	r3, r1, ip, lsr #19
   13988:	andeq	r3, r1, ip, lsr #19
   1398c:	andeq	r3, r1, ip, lsr #19
   13990:	andeq	r3, r1, ip, lsr #19
   13994:	andeq	r3, r1, ip, lsr #19
   13998:	andeq	r3, r1, ip, lsr #19
   1399c:	andeq	r3, r1, ip, ror #19
   139a0:	andeq	r3, r1, r4, lsr #20
   139a4:	andeq	r3, r1, ip, ror #19
   139a8:	andeq	r3, r1, r4, lsl sl
   139ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139b0:	tst	r0, #1
   139b4:	bne	13c6c <_obstack_memory_used@@Base+0xda0>
   139b8:	ldr	r1, [fp, #16]
   139bc:	ubfx	r0, r6, #5, #3
   139c0:	mov	r2, #1
   139c4:	ldr	r0, [r1, r0, lsl #2]
   139c8:	and	r1, r6, #31
   139cc:	tst	r0, r2, lsl r1
   139d0:	beq	13c6c <_obstack_memory_used@@Base+0xda0>
   139d4:	mov	r0, r6
   139d8:	mov	r1, r8
   139dc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   139e0:	tst	r2, #1
   139e4:	beq	13c8c <_obstack_memory_used@@Base+0xdc0>
   139e8:	b	143e8 <_obstack_memory_used@@Base+0x151c>
   139ec:	cmp	r7, #1
   139f0:	beq	13a14 <_obstack_memory_used@@Base+0xb48>
   139f4:	mov	r8, #0
   139f8:	cmn	r7, #1
   139fc:	bne	13c58 <_obstack_memory_used@@Base+0xd8c>
   13a00:	ldrb	r0, [lr, #1]
   13a04:	cmp	r0, #0
   13a08:	beq	13a14 <_obstack_memory_used@@Base+0xb48>
   13a0c:	mvn	r7, #0
   13a10:	b	13c58 <_obstack_memory_used@@Base+0xd8c>
   13a14:	mov	r8, #0
   13a18:	cmp	sl, #0
   13a1c:	bne	13c58 <_obstack_memory_used@@Base+0xd8c>
   13a20:	mov	r1, #1
   13a24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a28:	cmp	r0, #2
   13a2c:	bne	13a44 <_obstack_memory_used@@Base+0xb78>
   13a30:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a34:	mov	r8, r1
   13a38:	tst	r0, #1
   13a3c:	beq	139ac <_obstack_memory_used@@Base+0xae0>
   13a40:	b	143e8 <_obstack_memory_used@@Base+0x151c>
   13a44:	mov	r8, r1
   13a48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a4c:	tst	r0, #1
   13a50:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   13a54:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   13a58:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13a5c:	cmp	r0, #2
   13a60:	bne	13d20 <_obstack_memory_used@@Base+0xe54>
   13a64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a68:	tst	r0, #1
   13a6c:	bne	143e8 <_obstack_memory_used@@Base+0x151c>
   13a70:	mov	r0, #0
   13a74:	str	r0, [fp, #-56]	; 0xffffffc8
   13a78:	b	13d38 <_obstack_memory_used@@Base+0xe6c>
   13a7c:	mov	r0, #102	; 0x66
   13a80:	b	13da8 <_obstack_memory_used@@Base+0xedc>
   13a84:	mov	r2, #116	; 0x74
   13a88:	b	13a98 <_obstack_memory_used@@Base+0xbcc>
   13a8c:	mov	r0, #98	; 0x62
   13a90:	b	13da8 <_obstack_memory_used@@Base+0xedc>
   13a94:	mov	r2, #114	; 0x72
   13a98:	ldr	r0, [sp, #64]	; 0x40
   13a9c:	tst	r0, #1
   13aa0:	mov	r0, r2
   13aa4:	bne	13da8 <_obstack_memory_used@@Base+0xedc>
   13aa8:	b	143e8 <_obstack_memory_used@@Base+0x151c>
   13aac:	ldr	r0, [sp, #88]	; 0x58
   13ab0:	tst	r0, #1
   13ab4:	beq	13dc8 <_obstack_memory_used@@Base+0xefc>
   13ab8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13abc:	tst	r0, #1
   13ac0:	bne	14524 <_obstack_memory_used@@Base+0x1658>
   13ac4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ac8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13acc:	subs	r0, r0, #2
   13ad0:	movwne	r0, #1
   13ad4:	orr	r0, r0, r1
   13ad8:	tst	r0, #1
   13adc:	bne	13b18 <_obstack_memory_used@@Base+0xc4c>
   13ae0:	cmp	r9, r5
   13ae4:	movcc	r0, #39	; 0x27
   13ae8:	strbcc	r0, [ip, r9]
   13aec:	add	r0, r9, #1
   13af0:	cmp	r0, r5
   13af4:	movcc	r1, #36	; 0x24
   13af8:	strbcc	r1, [ip, r0]
   13afc:	add	r0, r9, #2
   13b00:	add	r9, r9, #3
   13b04:	cmp	r0, r5
   13b08:	movcc	r1, #39	; 0x27
   13b0c:	strbcc	r1, [ip, r0]
   13b10:	mov	r0, #1
   13b14:	str	r0, [fp, #-52]	; 0xffffffcc
   13b18:	mov	r1, #1
   13b1c:	cmp	r9, r5
   13b20:	mov	r8, #0
   13b24:	mov	r6, #48	; 0x30
   13b28:	str	r1, [fp, #-56]	; 0xffffffc8
   13b2c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13b30:	movcc	r0, #92	; 0x5c
   13b34:	strbcc	r0, [ip, r9]
   13b38:	add	r0, r9, #1
   13b3c:	cmp	r1, #2
   13b40:	beq	13f94 <_obstack_memory_used@@Base+0x10c8>
   13b44:	add	r1, sl, #1
   13b48:	cmp	r1, r7
   13b4c:	bcs	13f94 <_obstack_memory_used@@Base+0x10c8>
   13b50:	ldrb	r1, [lr, r1]
   13b54:	sub	r1, r1, #48	; 0x30
   13b58:	uxtb	r1, r1
   13b5c:	cmp	r1, #9
   13b60:	bhi	13f94 <_obstack_memory_used@@Base+0x10c8>
   13b64:	cmp	r0, r5
   13b68:	movcc	r1, #48	; 0x30
   13b6c:	strbcc	r1, [ip, r0]
   13b70:	add	r0, r9, #2
   13b74:	add	r9, r9, #3
   13b78:	cmp	r0, r5
   13b7c:	movcc	r1, #48	; 0x30
   13b80:	strbcc	r1, [ip, r0]
   13b84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b88:	tst	r0, #1
   13b8c:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   13b90:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   13b94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b98:	mov	r6, #63	; 0x3f
   13b9c:	cmp	r0, #5
   13ba0:	beq	13fa8 <_obstack_memory_used@@Base+0x10dc>
   13ba4:	mov	r1, #0
   13ba8:	cmp	r0, #2
   13bac:	str	r1, [fp, #-56]	; 0xffffffc8
   13bb0:	bne	14070 <_obstack_memory_used@@Base+0x11a4>
   13bb4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bb8:	mov	r8, #0
   13bbc:	tst	r0, #1
   13bc0:	beq	139ac <_obstack_memory_used@@Base+0xae0>
   13bc4:	b	143e8 <_obstack_memory_used@@Base+0x151c>
   13bc8:	mov	r0, #118	; 0x76
   13bcc:	b	13da8 <_obstack_memory_used@@Base+0xedc>
   13bd0:	mov	r0, #1
   13bd4:	mov	r6, #39	; 0x27
   13bd8:	str	r0, [sp, #60]	; 0x3c
   13bdc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13be0:	cmp	r0, #2
   13be4:	bne	13de8 <_obstack_memory_used@@Base+0xf1c>
   13be8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bec:	tst	r0, #1
   13bf0:	bne	143e8 <_obstack_memory_used@@Base+0x151c>
   13bf4:	ldr	r2, [sp, #56]	; 0x38
   13bf8:	clz	r1, r5
   13bfc:	mov	r8, #1
   13c00:	lsr	r1, r1, #5
   13c04:	cmp	r2, #0
   13c08:	mov	r0, r2
   13c0c:	movwne	r0, #1
   13c10:	orrs	r0, r0, r1
   13c14:	moveq	r2, r5
   13c18:	moveq	r5, r0
   13c1c:	cmp	r9, r5
   13c20:	str	r2, [sp, #56]	; 0x38
   13c24:	movcc	r0, #39	; 0x27
   13c28:	strbcc	r0, [ip, r9]
   13c2c:	add	r0, r9, #1
   13c30:	cmp	r0, r5
   13c34:	movcc	r1, #92	; 0x5c
   13c38:	strbcc	r1, [ip, r0]
   13c3c:	add	r0, r9, #2
   13c40:	add	r9, r9, #3
   13c44:	cmp	r0, r5
   13c48:	movcc	r1, #39	; 0x27
   13c4c:	strbcc	r1, [ip, r0]
   13c50:	mov	r0, #0
   13c54:	str	r0, [fp, #-52]	; 0xffffffcc
   13c58:	mov	r0, #0
   13c5c:	str	r0, [fp, #-56]	; 0xffffffc8
   13c60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13c64:	tst	r0, #1
   13c68:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   13c6c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13c70:	mov	r1, r8
   13c74:	cmp	r0, #0
   13c78:	mov	r0, r6
   13c7c:	beq	13d40 <_obstack_memory_used@@Base+0xe74>
   13c80:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13c84:	tst	r2, #1
   13c88:	bne	143e8 <_obstack_memory_used@@Base+0x151c>
   13c8c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13c90:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13c94:	subs	r2, r2, #2
   13c98:	movwne	r2, #1
   13c9c:	orr	r2, r2, r3
   13ca0:	tst	r2, #1
   13ca4:	bne	13ce0 <_obstack_memory_used@@Base+0xe14>
   13ca8:	cmp	r9, r5
   13cac:	movcc	r2, #39	; 0x27
   13cb0:	strbcc	r2, [ip, r9]
   13cb4:	add	r2, r9, #1
   13cb8:	cmp	r2, r5
   13cbc:	movcc	r3, #36	; 0x24
   13cc0:	strbcc	r3, [ip, r2]
   13cc4:	add	r2, r9, #2
   13cc8:	add	r9, r9, #3
   13ccc:	cmp	r2, r5
   13cd0:	movcc	r3, #39	; 0x27
   13cd4:	strbcc	r3, [ip, r2]
   13cd8:	mov	r2, #1
   13cdc:	str	r2, [fp, #-52]	; 0xffffffcc
   13ce0:	cmp	r9, r5
   13ce4:	movcc	r2, #92	; 0x5c
   13ce8:	strbcc	r2, [ip, r9]
   13cec:	add	r9, r9, #1
   13cf0:	b	13d88 <_obstack_memory_used@@Base+0xebc>
   13cf4:	ldr	r0, [sp, #40]	; 0x28
   13cf8:	cmp	r0, #1
   13cfc:	bne	13dfc <_obstack_memory_used@@Base+0xf30>
   13d00:	bl	11020 <__ctype_b_loc@plt>
   13d04:	ldr	r0, [r0]
   13d08:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13d0c:	mov	r1, #1
   13d10:	add	r0, r0, r6, lsl #1
   13d14:	ldrb	r0, [r0, #1]
   13d18:	ubfx	r8, r0, #6, #1
   13d1c:	b	14154 <_obstack_memory_used@@Base+0x1288>
   13d20:	ldr	r1, [sp, #48]	; 0x30
   13d24:	mov	r0, #0
   13d28:	str	r0, [fp, #-56]	; 0xffffffc8
   13d2c:	mov	r0, #92	; 0x5c
   13d30:	cmp	r1, #0
   13d34:	beq	13da8 <_obstack_memory_used@@Base+0xedc>
   13d38:	mov	r6, #92	; 0x5c
   13d3c:	mov	r8, #0
   13d40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d44:	cmp	r0, #0
   13d48:	bne	13d80 <_obstack_memory_used@@Base+0xeb4>
   13d4c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13d50:	tst	r0, #1
   13d54:	beq	13d80 <_obstack_memory_used@@Base+0xeb4>
   13d58:	cmp	r9, r5
   13d5c:	movcc	r0, #39	; 0x27
   13d60:	strbcc	r0, [ip, r9]
   13d64:	add	r0, r9, #1
   13d68:	add	r9, r9, #2
   13d6c:	cmp	r0, r5
   13d70:	movcc	r1, #39	; 0x27
   13d74:	strbcc	r1, [ip, r0]
   13d78:	mov	r0, #0
   13d7c:	str	r0, [fp, #-52]	; 0xffffffcc
   13d80:	mov	r1, r8
   13d84:	mov	r0, r6
   13d88:	cmp	r9, r5
   13d8c:	and	r4, r4, r1
   13d90:	strbcc	r0, [ip, r9]
   13d94:	add	r9, r9, #1
   13d98:	add	sl, sl, #1
   13d9c:	cmn	r7, #1
   13da0:	bne	13698 <_obstack_memory_used@@Base+0x7cc>
   13da4:	b	136a4 <_obstack_memory_used@@Base+0x7d8>
   13da8:	mov	r1, #0
   13dac:	mov	r8, #0
   13db0:	str	r1, [fp, #-56]	; 0xffffffc8
   13db4:	ldr	r1, [sp, #88]	; 0x58
   13db8:	tst	r1, #1
   13dbc:	mov	r1, #0
   13dc0:	beq	139ac <_obstack_memory_used@@Base+0xae0>
   13dc4:	b	13c80 <_obstack_memory_used@@Base+0xdb4>
   13dc8:	ldr	r0, [sp, #36]	; 0x24
   13dcc:	mov	r6, #0
   13dd0:	mov	r8, #0
   13dd4:	cmp	r0, #0
   13dd8:	mov	r0, #0
   13ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   13de0:	bne	13d98 <_obstack_memory_used@@Base+0xecc>
   13de4:	b	139ac <_obstack_memory_used@@Base+0xae0>
   13de8:	mov	r8, #1
   13dec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13df0:	tst	r0, #1
   13df4:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   13df8:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   13dfc:	mov	r0, #0
   13e00:	cmn	r7, #1
   13e04:	str	r0, [fp, #-36]	; 0xffffffdc
   13e08:	str	r0, [fp, #-40]	; 0xffffffd8
   13e0c:	bne	13e20 <_obstack_memory_used@@Base+0xf54>
   13e10:	mov	r0, lr
   13e14:	bl	11044 <strlen@plt>
   13e18:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13e1c:	mov	r7, r0
   13e20:	ldr	r0, [sp, #44]	; 0x2c
   13e24:	str	r4, [sp, #84]	; 0x54
   13e28:	str	r5, [sp, #28]
   13e2c:	cmp	r0, #0
   13e30:	beq	14084 <_obstack_memory_used@@Base+0x11b8>
   13e34:	ldr	r0, [sp, #80]	; 0x50
   13e38:	mov	r8, #1
   13e3c:	mov	r5, #0
   13e40:	add	r0, r0, sl
   13e44:	str	r0, [sp, #24]
   13e48:	sub	r0, fp, #40	; 0x28
   13e4c:	mov	r3, r0
   13e50:	b	13e8c <_obstack_memory_used@@Base+0xfc0>
   13e54:	ldr	r5, [sp, #68]	; 0x44
   13e58:	add	r5, r0, r5
   13e5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13e60:	bl	10f54 <iswprint@plt>
   13e64:	cmp	r0, #0
   13e68:	sub	r4, fp, #40	; 0x28
   13e6c:	movwne	r0, #1
   13e70:	and	r8, r8, r0
   13e74:	mov	r0, r4
   13e78:	bl	10f0c <mbsinit@plt>
   13e7c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13e80:	mov	r3, r4
   13e84:	cmp	r0, #0
   13e88:	bne	14148 <_obstack_memory_used@@Base+0x127c>
   13e8c:	str	r5, [sp, #68]	; 0x44
   13e90:	add	r5, r5, sl
   13e94:	sub	r0, fp, #44	; 0x2c
   13e98:	add	r1, lr, r5
   13e9c:	sub	r2, r7, r5
   13ea0:	bl	15cf4 <_obstack_memory_used@@Base+0x2e28>
   13ea4:	cmn	r0, #2
   13ea8:	beq	14108 <_obstack_memory_used@@Base+0x123c>
   13eac:	ldr	ip, [fp, #-84]	; 0xffffffac
   13eb0:	cmn	r0, #1
   13eb4:	beq	140fc <_obstack_memory_used@@Base+0x1230>
   13eb8:	cmp	r0, #0
   13ebc:	beq	14100 <_obstack_memory_used@@Base+0x1234>
   13ec0:	cmp	r0, #2
   13ec4:	bcc	13e54 <_obstack_memory_used@@Base+0xf88>
   13ec8:	ldr	r1, [sp, #68]	; 0x44
   13ecc:	ldr	r2, [sp, #24]
   13ed0:	add	r1, r2, r1
   13ed4:	sub	r2, r0, #1
   13ed8:	ldrb	r3, [r1]
   13edc:	sub	r3, r3, #91	; 0x5b
   13ee0:	cmp	r3, #33	; 0x21
   13ee4:	bls	13f04 <_obstack_memory_used@@Base+0x1038>
   13ee8:	add	r1, r1, #1
   13eec:	subs	r2, r2, #1
   13ef0:	beq	13e54 <_obstack_memory_used@@Base+0xf88>
   13ef4:	ldrb	r3, [r1]
   13ef8:	sub	r3, r3, #91	; 0x5b
   13efc:	cmp	r3, #33	; 0x21
   13f00:	bhi	13ee8 <_obstack_memory_used@@Base+0x101c>
   13f04:	add	r5, pc, #0
   13f08:	ldr	pc, [r5, r3, lsl #2]
   13f0c:	andeq	r4, r1, r0, lsr #8
   13f10:	andeq	r4, r1, r0, lsr #8
   13f14:	andeq	r3, r1, r8, ror #29
   13f18:	andeq	r4, r1, r0, lsr #8
   13f1c:	andeq	r3, r1, r8, ror #29
   13f20:	andeq	r4, r1, r0, lsr #8
   13f24:	andeq	r3, r1, r8, ror #29
   13f28:	andeq	r3, r1, r8, ror #29
   13f2c:	andeq	r3, r1, r8, ror #29
   13f30:	andeq	r3, r1, r8, ror #29
   13f34:	andeq	r3, r1, r8, ror #29
   13f38:	andeq	r3, r1, r8, ror #29
   13f3c:	andeq	r3, r1, r8, ror #29
   13f40:	andeq	r3, r1, r8, ror #29
   13f44:	andeq	r3, r1, r8, ror #29
   13f48:	andeq	r3, r1, r8, ror #29
   13f4c:	andeq	r3, r1, r8, ror #29
   13f50:	andeq	r3, r1, r8, ror #29
   13f54:	andeq	r3, r1, r8, ror #29
   13f58:	andeq	r3, r1, r8, ror #29
   13f5c:	andeq	r3, r1, r8, ror #29
   13f60:	andeq	r3, r1, r8, ror #29
   13f64:	andeq	r3, r1, r8, ror #29
   13f68:	andeq	r3, r1, r8, ror #29
   13f6c:	andeq	r3, r1, r8, ror #29
   13f70:	andeq	r3, r1, r8, ror #29
   13f74:	andeq	r3, r1, r8, ror #29
   13f78:	andeq	r3, r1, r8, ror #29
   13f7c:	andeq	r3, r1, r8, ror #29
   13f80:	andeq	r3, r1, r8, ror #29
   13f84:	andeq	r3, r1, r8, ror #29
   13f88:	andeq	r3, r1, r8, ror #29
   13f8c:	andeq	r3, r1, r8, ror #29
   13f90:	andeq	r4, r1, r0, lsr #8
   13f94:	mov	r9, r0
   13f98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f9c:	tst	r0, #1
   13fa0:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   13fa4:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   13fa8:	mov	r0, #0
   13fac:	str	r0, [fp, #-56]	; 0xffffffc8
   13fb0:	ldr	r0, [sp, #32]
   13fb4:	cmp	r0, #0
   13fb8:	beq	14070 <_obstack_memory_used@@Base+0x11a4>
   13fbc:	add	r0, sl, #2
   13fc0:	mov	r1, r7
   13fc4:	cmp	r0, r7
   13fc8:	bcs	14070 <_obstack_memory_used@@Base+0x11a4>
   13fcc:	add	r1, sl, lr
   13fd0:	ldrb	r1, [r1, #1]
   13fd4:	cmp	r1, #63	; 0x3f
   13fd8:	bne	14070 <_obstack_memory_used@@Base+0x11a4>
   13fdc:	ldrb	r8, [lr, r0]
   13fe0:	sub	r2, r8, #33	; 0x21
   13fe4:	cmp	r2, #29
   13fe8:	bhi	14070 <_obstack_memory_used@@Base+0x11a4>
   13fec:	mov	r1, r4
   13ff0:	movw	r4, #20929	; 0x51c1
   13ff4:	mov	r3, #1
   13ff8:	movt	r4, #14336	; 0x3800
   13ffc:	tst	r4, r3, lsl r2
   14000:	beq	1432c <_obstack_memory_used@@Base+0x1460>
   14004:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14008:	tst	r2, #1
   1400c:	bne	143e8 <_obstack_memory_used@@Base+0x151c>
   14010:	cmp	r9, r5
   14014:	mov	r6, r8
   14018:	mov	r4, r1
   1401c:	mov	sl, r0
   14020:	mov	r8, #0
   14024:	movcc	r2, #63	; 0x3f
   14028:	strbcc	r2, [ip, r9]
   1402c:	add	r2, r9, #1
   14030:	cmp	r2, r5
   14034:	movcc	r3, #34	; 0x22
   14038:	strbcc	r3, [ip, r2]
   1403c:	add	r2, r9, #2
   14040:	cmp	r2, r5
   14044:	movcc	r3, #34	; 0x22
   14048:	strbcc	r3, [ip, r2]
   1404c:	add	r2, r9, #3
   14050:	add	r9, r9, #4
   14054:	cmp	r2, r5
   14058:	movcc	r3, #63	; 0x3f
   1405c:	strbcc	r3, [ip, r2]
   14060:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14064:	tst	r0, #1
   14068:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   1406c:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   14070:	mov	r8, #0
   14074:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14078:	tst	r0, #1
   1407c:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   14080:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   14084:	mov	r8, #1
   14088:	mov	r5, #0
   1408c:	sub	r4, fp, #40	; 0x28
   14090:	str	r5, [sp, #68]	; 0x44
   14094:	add	r5, r5, sl
   14098:	sub	r0, fp, #44	; 0x2c
   1409c:	mov	r3, r4
   140a0:	add	r1, lr, r5
   140a4:	sub	r2, r7, r5
   140a8:	bl	15cf4 <_obstack_memory_used@@Base+0x2e28>
   140ac:	cmn	r0, #2
   140b0:	beq	14108 <_obstack_memory_used@@Base+0x123c>
   140b4:	cmn	r0, #1
   140b8:	beq	140fc <_obstack_memory_used@@Base+0x1230>
   140bc:	ldr	r5, [sp, #68]	; 0x44
   140c0:	cmp	r0, #0
   140c4:	beq	14144 <_obstack_memory_used@@Base+0x1278>
   140c8:	add	r5, r0, r5
   140cc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   140d0:	bl	10f54 <iswprint@plt>
   140d4:	cmp	r0, #0
   140d8:	sub	r4, fp, #40	; 0x28
   140dc:	movwne	r0, #1
   140e0:	and	r8, r8, r0
   140e4:	mov	r0, r4
   140e8:	bl	10f0c <mbsinit@plt>
   140ec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   140f0:	cmp	r0, #0
   140f4:	beq	14090 <_obstack_memory_used@@Base+0x11c4>
   140f8:	b	14148 <_obstack_memory_used@@Base+0x127c>
   140fc:	mov	r8, #0
   14100:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14104:	b	1413c <_obstack_memory_used@@Base+0x1270>
   14108:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1410c:	mov	r8, #0
   14110:	cmp	r5, r7
   14114:	bcs	1413c <_obstack_memory_used@@Base+0x1270>
   14118:	ldrb	r0, [lr, r5]
   1411c:	cmp	r0, #0
   14120:	beq	1413c <_obstack_memory_used@@Base+0x1270>
   14124:	ldr	r0, [sp, #68]	; 0x44
   14128:	add	r0, r0, #1
   1412c:	add	r5, r0, sl
   14130:	str	r0, [sp, #68]	; 0x44
   14134:	cmp	r5, r7
   14138:	bcc	14118 <_obstack_memory_used@@Base+0x124c>
   1413c:	ldr	r5, [sp, #68]	; 0x44
   14140:	b	14148 <_obstack_memory_used@@Base+0x127c>
   14144:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14148:	mov	r1, r5
   1414c:	ldr	r5, [sp, #28]
   14150:	ldr	r4, [sp, #84]	; 0x54
   14154:	ldr	r0, [sp, #52]	; 0x34
   14158:	ldr	ip, [fp, #-84]	; 0xffffffac
   1415c:	cmp	r1, #1
   14160:	orr	r2, r8, r0
   14164:	mov	r0, r1
   14168:	bhi	14174 <_obstack_memory_used@@Base+0x12a8>
   1416c:	tst	r2, #1
   14170:	bne	139ac <_obstack_memory_used@@Base+0xae0>
   14174:	add	r0, r0, sl
   14178:	str	r2, [sp, #84]	; 0x54
   1417c:	str	r0, [fp, #-56]	; 0xffffffc8
   14180:	mov	r0, #0
   14184:	tst	r2, #1
   14188:	bne	14268 <_obstack_memory_used@@Base+0x139c>
   1418c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14190:	tst	r1, #1
   14194:	bne	143e8 <_obstack_memory_used@@Base+0x151c>
   14198:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1419c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   141a0:	subs	r2, r1, #2
   141a4:	movwne	r2, #1
   141a8:	orr	r2, r2, r0
   141ac:	tst	r2, #1
   141b0:	bne	141ec <_obstack_memory_used@@Base+0x1320>
   141b4:	cmp	r9, r5
   141b8:	add	r2, r9, #1
   141bc:	mov	r0, #1
   141c0:	movcc	r1, #39	; 0x27
   141c4:	str	r0, [fp, #-52]	; 0xffffffcc
   141c8:	strbcc	r1, [ip, r9]
   141cc:	cmp	r2, r5
   141d0:	movcc	r1, #36	; 0x24
   141d4:	strbcc	r1, [ip, r2]
   141d8:	add	r2, r9, #2
   141dc:	add	r9, r9, #3
   141e0:	cmp	r2, r5
   141e4:	movcc	r1, #39	; 0x27
   141e8:	strbcc	r1, [ip, r2]
   141ec:	cmp	r9, r5
   141f0:	add	r2, r9, #1
   141f4:	movcc	r1, #92	; 0x5c
   141f8:	strbcc	r1, [ip, r9]
   141fc:	cmp	r2, r5
   14200:	bcs	14214 <_obstack_memory_used@@Base+0x1348>
   14204:	uxtb	r3, r6
   14208:	mov	r1, #48	; 0x30
   1420c:	orr	r3, r1, r3, lsr #6
   14210:	strb	r3, [ip, r2]
   14214:	add	r2, r9, #2
   14218:	add	r9, r9, #3
   1421c:	cmp	r2, r5
   14220:	lsrcc	r3, r6, #3
   14224:	movcc	r1, #6
   14228:	bficc	r3, r1, #3, #29
   1422c:	mov	r1, #6
   14230:	bfi	r6, r1, #3, #29
   14234:	strbcc	r3, [ip, r2]
   14238:	mov	r2, #1
   1423c:	b	1429c <_obstack_memory_used@@Base+0x13d0>
   14240:	ldr	r1, [sp, #80]	; 0x50
   14244:	cmp	r9, r2
   14248:	mov	r5, r2
   1424c:	ldr	r2, [sp, #84]	; 0x54
   14250:	strbcc	r6, [ip, r9]
   14254:	add	r9, r9, #1
   14258:	ldrb	r6, [r1, sl]
   1425c:	mov	sl, r3
   14260:	tst	r2, #1
   14264:	beq	1418c <_obstack_memory_used@@Base+0x12c0>
   14268:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1426c:	tst	r1, #1
   14270:	beq	14290 <_obstack_memory_used@@Base+0x13c4>
   14274:	cmp	r9, r5
   14278:	mov	r2, r0
   1427c:	movcc	r1, #92	; 0x5c
   14280:	strbcc	r1, [ip, r9]
   14284:	add	r9, r9, #1
   14288:	mov	r1, #0
   1428c:	b	14298 <_obstack_memory_used@@Base+0x13cc>
   14290:	mov	r1, #0
   14294:	mov	r2, r0
   14298:	str	r1, [fp, #-48]	; 0xffffffd0
   1429c:	mov	r0, r2
   142a0:	and	r1, r2, #1
   142a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   142a8:	add	r3, sl, #1
   142ac:	cmp	r2, r3
   142b0:	bls	14310 <_obstack_memory_used@@Base+0x1444>
   142b4:	mov	r2, r5
   142b8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   142bc:	cmp	r1, #0
   142c0:	movwne	r1, #1
   142c4:	mvn	r5, r5
   142c8:	orr	r5, r5, r1
   142cc:	tst	r5, #1
   142d0:	bne	14240 <_obstack_memory_used@@Base+0x1374>
   142d4:	cmp	r9, r2
   142d8:	movcc	r5, r4
   142dc:	movcc	r4, #39	; 0x27
   142e0:	strbcc	r4, [ip, r9]
   142e4:	movcc	r4, r5
   142e8:	add	r5, r9, #1
   142ec:	add	r9, r9, #2
   142f0:	cmp	r5, r2
   142f4:	movcc	r1, r4
   142f8:	movcc	r4, #39	; 0x27
   142fc:	strbcc	r4, [ip, r5]
   14300:	movcc	r4, r1
   14304:	mov	r1, #0
   14308:	str	r1, [fp, #-52]	; 0xffffffcc
   1430c:	b	14240 <_obstack_memory_used@@Base+0x1374>
   14310:	cmp	r1, #0
   14314:	movwne	r1, #1
   14318:	str	r1, [fp, #-56]	; 0xffffffc8
   1431c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14320:	cmp	r0, #0
   14324:	beq	13d4c <_obstack_memory_used@@Base+0xe80>
   14328:	b	13d80 <_obstack_memory_used@@Base+0xeb4>
   1432c:	mov	r8, #0
   14330:	mov	r4, r1
   14334:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14338:	tst	r0, #1
   1433c:	beq	139b8 <_obstack_memory_used@@Base+0xaec>
   14340:	b	13c6c <_obstack_memory_used@@Base+0xda0>
   14344:	mov	r7, sl
   14348:	b	14350 <_obstack_memory_used@@Base+0x1484>
   1434c:	mvn	r7, #0
   14350:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14354:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14358:	ldr	r2, [sp, #88]	; 0x58
   1435c:	eor	r0, r1, #2
   14360:	orr	r0, r0, r9
   14364:	clz	r0, r0
   14368:	lsr	r0, r0, #5
   1436c:	tst	r3, r0
   14370:	bne	143e8 <_obstack_memory_used@@Base+0x151c>
   14374:	subs	r0, r1, #2
   14378:	movwne	r0, #1
   1437c:	orr	r0, r3, r0
   14380:	tst	r0, #1
   14384:	ldreq	r0, [sp, #60]	; 0x3c
   14388:	eoreq	r0, r0, #1
   1438c:	tsteq	r0, #1
   14390:	bne	144c4 <_obstack_memory_used@@Base+0x15f8>
   14394:	tst	r4, #1
   14398:	bne	14488 <_obstack_memory_used@@Base+0x15bc>
   1439c:	ldr	r6, [sp, #56]	; 0x38
   143a0:	mov	r8, #0
   143a4:	cmp	r6, #0
   143a8:	beq	144c0 <_obstack_memory_used@@Base+0x15f4>
   143ac:	mov	r1, #0
   143b0:	mov	r4, #2
   143b4:	cmp	r5, #0
   143b8:	mov	r0, r2
   143bc:	mov	r3, #0
   143c0:	str	r1, [sp, #84]	; 0x54
   143c4:	beq	1320c <_obstack_memory_used@@Base+0x340>
   143c8:	b	144c4 <_obstack_memory_used@@Base+0x15f8>
   143cc:	movw	r0, #31047	; 0x7947
   143d0:	movt	r0, #1
   143d4:	str	r0, [sp, #76]	; 0x4c
   143d8:	mov	r9, #0
   143dc:	tst	r8, #1
   143e0:	beq	134a4 <_obstack_memory_used@@Base+0x5d8>
   143e4:	b	135e4 <_obstack_memory_used@@Base+0x718>
   143e8:	ldr	r1, [sp, #88]	; 0x58
   143ec:	mov	r0, #2
   143f0:	tst	r1, #1
   143f4:	movwne	r0, #4
   143f8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   143fc:	ldr	r1, [fp, #12]
   14400:	cmp	r2, #2
   14404:	moveq	r2, r0
   14408:	b	14440 <_obstack_memory_used@@Base+0x1574>
   1440c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14410:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14414:	ldr	r1, [fp, #12]
   14418:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1441c:	b	14440 <_obstack_memory_used@@Base+0x1574>
   14420:	ldr	r1, [sp, #88]	; 0x58
   14424:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14428:	ldr	r5, [sp, #28]
   1442c:	mov	r0, #2
   14430:	tst	r1, #1
   14434:	ldr	r1, [fp, #12]
   14438:	movwne	r0, #4
   1443c:	mov	r2, r0
   14440:	mov	r0, #0
   14444:	bic	r1, r1, #2
   14448:	str	r2, [sp]
   1444c:	mov	r2, lr
   14450:	str	r0, [sp, #8]
   14454:	ldr	r0, [sp, #72]	; 0x48
   14458:	str	r1, [sp, #4]
   1445c:	mov	r1, r5
   14460:	str	r0, [sp, #12]
   14464:	ldr	r0, [sp, #76]	; 0x4c
   14468:	str	r0, [sp, #16]
   1446c:	mov	r0, ip
   14470:	mov	r3, r7
   14474:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   14478:	mov	r9, r0
   1447c:	mov	r0, r9
   14480:	sub	sp, fp, #28
   14484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14488:	mov	r0, #5
   1448c:	ldr	r1, [sp, #56]	; 0x38
   14490:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14494:	str	r0, [sp]
   14498:	ldr	r0, [fp, #12]
   1449c:	str	r0, [sp, #4]
   144a0:	ldr	r0, [fp, #16]
   144a4:	str	r0, [sp, #8]
   144a8:	ldr	r0, [sp, #72]	; 0x48
   144ac:	str	r0, [sp, #12]
   144b0:	ldr	r0, [sp, #76]	; 0x4c
   144b4:	str	r0, [sp, #16]
   144b8:	ldr	r0, [fp, #-84]	; 0xffffffac
   144bc:	b	14470 <_obstack_memory_used@@Base+0x15a4>
   144c0:	mov	r3, #0
   144c4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   144c8:	cmp	r1, #0
   144cc:	beq	14508 <_obstack_memory_used@@Base+0x163c>
   144d0:	ldr	r2, [fp, #-84]	; 0xffffffac
   144d4:	tst	r3, #1
   144d8:	bne	1450c <_obstack_memory_used@@Base+0x1640>
   144dc:	ldrb	r0, [r1]
   144e0:	cmp	r0, #0
   144e4:	beq	1450c <_obstack_memory_used@@Base+0x1640>
   144e8:	add	r1, r1, #1
   144ec:	cmp	r9, r5
   144f0:	strbcc	r0, [r2, r9]
   144f4:	add	r9, r9, #1
   144f8:	ldrb	r0, [r1], #1
   144fc:	cmp	r0, #0
   14500:	bne	144ec <_obstack_memory_used@@Base+0x1620>
   14504:	b	1450c <_obstack_memory_used@@Base+0x1640>
   14508:	ldr	r2, [fp, #-84]	; 0xffffffac
   1450c:	cmp	r9, r5
   14510:	movcc	r0, #0
   14514:	strbcc	r0, [r2, r9]
   14518:	mov	r0, r9
   1451c:	sub	sp, fp, #28
   14520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14524:	mov	r0, #4
   14528:	b	143f8 <_obstack_memory_used@@Base+0x152c>
   1452c:	bl	110ec <abort@plt>
   14530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14534:	add	fp, sp, #28
   14538:	sub	sp, sp, #28
   1453c:	movw	r5, #33168	; 0x8190
   14540:	cmp	r2, #0
   14544:	mov	r4, r1
   14548:	mov	r7, r0
   1454c:	str	r0, [sp, #20]
   14550:	movt	r5, #2
   14554:	movne	r5, r2
   14558:	bl	11050 <__errno_location@plt>
   1455c:	mov	sl, r0
   14560:	ldr	r2, [r5, #40]	; 0x28
   14564:	ldr	r3, [r5, #44]	; 0x2c
   14568:	ldm	r5, {r0, r1}
   1456c:	orr	r8, r1, #1
   14570:	add	r9, r5, #8
   14574:	mov	r1, #0
   14578:	ldr	r6, [sl]
   1457c:	stm	sp, {r0, r8, r9}
   14580:	mov	r0, #0
   14584:	str	r2, [sp, #12]
   14588:	str	r3, [sp, #16]
   1458c:	mov	r2, r7
   14590:	mov	r3, r4
   14594:	str	r6, [sp, #24]
   14598:	mov	r6, r4
   1459c:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   145a0:	add	r7, r0, #1
   145a4:	mov	r0, r7
   145a8:	bl	15610 <_obstack_memory_used@@Base+0x2744>
   145ac:	mov	r4, r0
   145b0:	ldr	r0, [r5]
   145b4:	ldr	r2, [r5, #44]	; 0x2c
   145b8:	ldr	r1, [r5, #40]	; 0x28
   145bc:	mov	r3, r6
   145c0:	stm	sp, {r0, r8, r9}
   145c4:	str	r2, [sp, #16]
   145c8:	ldr	r2, [sp, #20]
   145cc:	str	r1, [sp, #12]
   145d0:	mov	r0, r4
   145d4:	mov	r1, r7
   145d8:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   145dc:	ldr	r0, [sp, #24]
   145e0:	str	r0, [sl]
   145e4:	mov	r0, r4
   145e8:	sub	sp, fp, #28
   145ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145f4:	add	fp, sp, #28
   145f8:	sub	sp, sp, #36	; 0x24
   145fc:	movw	r8, #33168	; 0x8190
   14600:	cmp	r3, #0
   14604:	mov	r4, r2
   14608:	str	r2, [sp, #24]
   1460c:	mov	r5, r1
   14610:	mov	r6, r0
   14614:	str	r0, [sp, #20]
   14618:	movt	r8, #2
   1461c:	movne	r8, r3
   14620:	bl	11050 <__errno_location@plt>
   14624:	str	r0, [sp, #28]
   14628:	ldr	r1, [r8, #40]	; 0x28
   1462c:	ldr	r2, [r8, #44]	; 0x2c
   14630:	ldr	r7, [r0]
   14634:	cmp	r4, #0
   14638:	add	sl, r8, #8
   1463c:	mov	r0, #0
   14640:	ldm	r8, {r3, r9}
   14644:	orreq	r9, r9, #1
   14648:	stm	sp, {r3, r9, sl}
   1464c:	str	r1, [sp, #12]
   14650:	str	r2, [sp, #16]
   14654:	mov	r1, #0
   14658:	mov	r2, r6
   1465c:	mov	r3, r5
   14660:	str	r7, [sp, #32]
   14664:	mov	r7, r5
   14668:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   1466c:	add	r4, r0, #1
   14670:	mov	r5, r0
   14674:	mov	r0, r4
   14678:	bl	15610 <_obstack_memory_used@@Base+0x2744>
   1467c:	mov	r6, r0
   14680:	ldr	r0, [r8]
   14684:	ldr	r2, [r8, #44]	; 0x2c
   14688:	ldr	r1, [r8, #40]	; 0x28
   1468c:	mov	r3, r7
   14690:	stm	sp, {r0, r9, sl}
   14694:	str	r2, [sp, #16]
   14698:	ldr	r2, [sp, #20]
   1469c:	str	r1, [sp, #12]
   146a0:	mov	r0, r6
   146a4:	mov	r1, r4
   146a8:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   146ac:	ldr	r0, [sp, #24]
   146b0:	ldr	r1, [sp, #32]
   146b4:	ldr	r2, [sp, #28]
   146b8:	cmp	r0, #0
   146bc:	str	r1, [r2]
   146c0:	strne	r5, [r0]
   146c4:	mov	r0, r6
   146c8:	sub	sp, fp, #28
   146cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d0:	push	{r4, r5, r6, r7, fp, lr}
   146d4:	add	fp, sp, #16
   146d8:	movw	r4, #33056	; 0x8120
   146dc:	movt	r4, #2
   146e0:	ldrd	r6, [r4]
   146e4:	cmp	r7, #2
   146e8:	blt	14714 <_obstack_memory_used@@Base+0x1848>
   146ec:	add	r5, r6, #12
   146f0:	mov	r7, #0
   146f4:	ldr	r0, [r5, r7, lsl #3]
   146f8:	bl	127f4 <close@plt+0x16fc>
   146fc:	ldr	r1, [r4, #4]
   14700:	add	r2, r7, #2
   14704:	add	r0, r7, #1
   14708:	mov	r7, r0
   1470c:	cmp	r2, r1
   14710:	blt	146f4 <_obstack_memory_used@@Base+0x1828>
   14714:	ldr	r0, [r6, #4]
   14718:	movw	r5, #33216	; 0x81c0
   1471c:	movt	r5, #2
   14720:	cmp	r0, r5
   14724:	beq	14738 <_obstack_memory_used@@Base+0x186c>
   14728:	bl	127f4 <close@plt+0x16fc>
   1472c:	mov	r0, #256	; 0x100
   14730:	str	r0, [r4, #8]
   14734:	str	r5, [r4, #12]
   14738:	add	r5, r4, #8
   1473c:	cmp	r6, r5
   14740:	beq	14750 <_obstack_memory_used@@Base+0x1884>
   14744:	mov	r0, r6
   14748:	bl	127f4 <close@plt+0x16fc>
   1474c:	str	r5, [r4]
   14750:	mov	r0, #1
   14754:	str	r0, [r4, #4]
   14758:	pop	{r4, r5, r6, r7, fp, pc}
   1475c:	movw	r3, #33168	; 0x8190
   14760:	mvn	r2, #0
   14764:	movt	r3, #2
   14768:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   1476c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14770:	add	fp, sp, #28
   14774:	sub	sp, sp, #44	; 0x2c
   14778:	mov	r7, r3
   1477c:	str	r2, [sp, #36]	; 0x24
   14780:	str	r1, [sp, #32]
   14784:	mov	r5, r0
   14788:	bl	11050 <__errno_location@plt>
   1478c:	cmp	r5, #0
   14790:	bmi	148f8 <_obstack_memory_used@@Base+0x1a2c>
   14794:	cmn	r5, #-2147483647	; 0x80000001
   14798:	beq	148f8 <_obstack_memory_used@@Base+0x1a2c>
   1479c:	movw	r8, #33056	; 0x8120
   147a0:	mov	r4, r0
   147a4:	ldr	r0, [r0]
   147a8:	movt	r8, #2
   147ac:	str	r4, [sp, #28]
   147b0:	ldr	r1, [r8, #4]
   147b4:	ldr	r6, [r8]
   147b8:	str	r0, [sp, #24]
   147bc:	cmp	r1, r5
   147c0:	ble	147cc <_obstack_memory_used@@Base+0x1900>
   147c4:	mov	sl, r6
   147c8:	b	14834 <_obstack_memory_used@@Base+0x1968>
   147cc:	mov	r0, #8
   147d0:	add	r9, r8, #8
   147d4:	str	r1, [fp, #-32]	; 0xffffffe0
   147d8:	sub	r1, r5, r1
   147dc:	mvn	r3, #-2147483648	; 0x80000000
   147e0:	str	r0, [sp]
   147e4:	subs	r0, r6, r9
   147e8:	add	r2, r1, #1
   147ec:	sub	r1, fp, #32
   147f0:	movne	r0, r6
   147f4:	bl	15810 <_obstack_memory_used@@Base+0x2944>
   147f8:	mov	sl, r0
   147fc:	cmp	r6, r9
   14800:	str	r0, [r8]
   14804:	bne	14810 <_obstack_memory_used@@Base+0x1944>
   14808:	ldrd	r0, [r8, #8]
   1480c:	stm	sl, {r0, r1}
   14810:	ldr	r1, [r8, #4]
   14814:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14818:	add	r0, sl, r1, lsl #3
   1481c:	sub	r1, r2, r1
   14820:	lsl	r2, r1, #3
   14824:	mov	r1, #0
   14828:	bl	11068 <memset@plt>
   1482c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14830:	str	r0, [r8, #4]
   14834:	mov	r9, sl
   14838:	ldm	r7, {r0, r1}
   1483c:	orr	r8, r1, #1
   14840:	add	r1, r7, #8
   14844:	ldr	r2, [r7, #40]	; 0x28
   14848:	ldr	r3, [r7, #44]	; 0x2c
   1484c:	ldr	r6, [r9, r5, lsl #3]!
   14850:	str	r1, [sp, #20]
   14854:	ldr	r4, [r9, #4]!
   14858:	stm	sp, {r0, r8}
   1485c:	add	r0, sp, #8
   14860:	stm	r0, {r1, r2, r3}
   14864:	ldr	r2, [sp, #32]
   14868:	ldr	r3, [sp, #36]	; 0x24
   1486c:	mov	r1, r6
   14870:	mov	r0, r4
   14874:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   14878:	cmp	r6, r0
   1487c:	bhi	148e0 <_obstack_memory_used@@Base+0x1a14>
   14880:	add	r6, r0, #1
   14884:	movw	r0, #33216	; 0x81c0
   14888:	movt	r0, #2
   1488c:	str	r6, [sl, r5, lsl #3]
   14890:	cmp	r4, r0
   14894:	beq	148a0 <_obstack_memory_used@@Base+0x19d4>
   14898:	mov	r0, r4
   1489c:	bl	127f4 <close@plt+0x16fc>
   148a0:	mov	r0, r6
   148a4:	bl	15610 <_obstack_memory_used@@Base+0x2744>
   148a8:	str	r0, [r9]
   148ac:	mov	r4, r0
   148b0:	add	r3, sp, #8
   148b4:	ldr	r0, [r7]
   148b8:	ldr	r1, [r7, #40]	; 0x28
   148bc:	ldr	r2, [r7, #44]	; 0x2c
   148c0:	stm	sp, {r0, r8}
   148c4:	ldr	r0, [sp, #20]
   148c8:	stm	r3, {r0, r1, r2}
   148cc:	ldr	r2, [sp, #32]
   148d0:	ldr	r3, [sp, #36]	; 0x24
   148d4:	mov	r0, r4
   148d8:	mov	r1, r6
   148dc:	bl	13180 <_obstack_memory_used@@Base+0x2b4>
   148e0:	ldr	r1, [sp, #24]
   148e4:	ldr	r0, [sp, #28]
   148e8:	str	r1, [r0]
   148ec:	mov	r0, r4
   148f0:	sub	sp, fp, #28
   148f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f8:	bl	110ec <abort@plt>
   148fc:	movw	r3, #33168	; 0x8190
   14900:	movt	r3, #2
   14904:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14908:	movw	r3, #33168	; 0x8190
   1490c:	mov	r1, r0
   14910:	mov	r0, #0
   14914:	mvn	r2, #0
   14918:	movt	r3, #2
   1491c:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14920:	movw	r3, #33168	; 0x8190
   14924:	mov	r2, r1
   14928:	mov	r1, r0
   1492c:	mov	r0, #0
   14930:	movt	r3, #2
   14934:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14938:	push	{fp, lr}
   1493c:	mov	fp, sp
   14940:	sub	sp, sp, #48	; 0x30
   14944:	vmov.i32	q8, #0	; 0x00000000
   14948:	mov	ip, #32
   1494c:	mov	r3, sp
   14950:	mov	lr, r2
   14954:	cmp	r1, #10
   14958:	add	r2, r3, #16
   1495c:	vst1.64	{d16-d17}, [r3], ip
   14960:	vst1.64	{d16-d17}, [r2]
   14964:	vst1.64	{d16-d17}, [r3]
   14968:	beq	14988 <_obstack_memory_used@@Base+0x1abc>
   1496c:	str	r1, [sp]
   14970:	mov	r3, sp
   14974:	mov	r1, lr
   14978:	mvn	r2, #0
   1497c:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14980:	mov	sp, fp
   14984:	pop	{fp, pc}
   14988:	bl	110ec <abort@plt>
   1498c:	push	{r4, sl, fp, lr}
   14990:	add	fp, sp, #8
   14994:	sub	sp, sp, #48	; 0x30
   14998:	vmov.i32	q8, #0	; 0x00000000
   1499c:	mov	ip, r3
   149a0:	mov	r3, sp
   149a4:	mov	lr, #32
   149a8:	cmp	r1, #10
   149ac:	add	r4, r3, #16
   149b0:	vst1.64	{d16-d17}, [r3], lr
   149b4:	vst1.64	{d16-d17}, [r4]
   149b8:	vst1.64	{d16-d17}, [r3]
   149bc:	beq	149dc <_obstack_memory_used@@Base+0x1b10>
   149c0:	str	r1, [sp]
   149c4:	mov	r1, r2
   149c8:	mov	r3, sp
   149cc:	mov	r2, ip
   149d0:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   149d4:	sub	sp, fp, #8
   149d8:	pop	{r4, sl, fp, pc}
   149dc:	bl	110ec <abort@plt>
   149e0:	push	{fp, lr}
   149e4:	mov	fp, sp
   149e8:	sub	sp, sp, #48	; 0x30
   149ec:	vmov.i32	q8, #0	; 0x00000000
   149f0:	mov	r3, sp
   149f4:	mov	ip, #32
   149f8:	cmp	r0, #10
   149fc:	add	r2, r3, #16
   14a00:	vst1.64	{d16-d17}, [r3], ip
   14a04:	vst1.64	{d16-d17}, [r2]
   14a08:	vst1.64	{d16-d17}, [r3]
   14a0c:	beq	14a2c <_obstack_memory_used@@Base+0x1b60>
   14a10:	str	r0, [sp]
   14a14:	mov	r3, sp
   14a18:	mov	r0, #0
   14a1c:	mvn	r2, #0
   14a20:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14a24:	mov	sp, fp
   14a28:	pop	{fp, pc}
   14a2c:	bl	110ec <abort@plt>
   14a30:	push	{fp, lr}
   14a34:	mov	fp, sp
   14a38:	sub	sp, sp, #48	; 0x30
   14a3c:	vmov.i32	q8, #0	; 0x00000000
   14a40:	mov	r3, sp
   14a44:	mov	ip, #32
   14a48:	cmp	r0, #10
   14a4c:	add	lr, r3, #16
   14a50:	vst1.64	{d16-d17}, [r3], ip
   14a54:	vst1.64	{d16-d17}, [lr]
   14a58:	vst1.64	{d16-d17}, [r3]
   14a5c:	beq	14a78 <_obstack_memory_used@@Base+0x1bac>
   14a60:	str	r0, [sp]
   14a64:	mov	r3, sp
   14a68:	mov	r0, #0
   14a6c:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14a70:	mov	sp, fp
   14a74:	pop	{fp, pc}
   14a78:	bl	110ec <abort@plt>
   14a7c:	push	{r4, sl, fp, lr}
   14a80:	add	fp, sp, #8
   14a84:	sub	sp, sp, #48	; 0x30
   14a88:	mov	lr, r0
   14a8c:	movw	r0, #33168	; 0x8190
   14a90:	mov	ip, r1
   14a94:	mov	r1, #32
   14a98:	mov	r4, #1
   14a9c:	movt	r0, #2
   14aa0:	add	r3, r0, #16
   14aa4:	vld1.64	{d16-d17}, [r0], r1
   14aa8:	vld1.64	{d20-d21}, [r0]
   14aac:	vld1.64	{d18-d19}, [r3]
   14ab0:	mov	r3, sp
   14ab4:	add	r0, r3, #32
   14ab8:	add	r1, r3, #16
   14abc:	vst1.64	{d20-d21}, [r0]
   14ac0:	mov	r0, #28
   14ac4:	vst1.64	{d18-d19}, [r1]
   14ac8:	mov	r1, r3
   14acc:	and	r0, r0, r2, lsr #3
   14ad0:	and	r2, r2, #31
   14ad4:	vst1.64	{d16-d17}, [r1], r0
   14ad8:	ldr	r0, [r1, #8]
   14adc:	bic	r4, r4, r0, lsr r2
   14ae0:	eor	r0, r0, r4, lsl r2
   14ae4:	mov	r2, ip
   14ae8:	str	r0, [r1, #8]
   14aec:	mov	r0, #0
   14af0:	mov	r1, lr
   14af4:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14af8:	sub	sp, fp, #8
   14afc:	pop	{r4, sl, fp, pc}
   14b00:	push	{fp, lr}
   14b04:	mov	fp, sp
   14b08:	sub	sp, sp, #48	; 0x30
   14b0c:	mov	ip, r0
   14b10:	movw	r0, #33168	; 0x8190
   14b14:	mov	r2, #32
   14b18:	movt	r0, #2
   14b1c:	add	r3, r0, #16
   14b20:	vld1.64	{d16-d17}, [r0], r2
   14b24:	vld1.64	{d20-d21}, [r0]
   14b28:	vld1.64	{d18-d19}, [r3]
   14b2c:	mov	r3, sp
   14b30:	add	r0, r3, #32
   14b34:	add	r2, r3, #16
   14b38:	vst1.64	{d20-d21}, [r0]
   14b3c:	mov	r0, #28
   14b40:	vst1.64	{d18-d19}, [r2]
   14b44:	mov	r2, r3
   14b48:	and	r0, r0, r1, lsr #3
   14b4c:	and	r1, r1, #31
   14b50:	vst1.64	{d16-d17}, [r2], r0
   14b54:	mov	r0, #1
   14b58:	ldr	lr, [r2, #8]
   14b5c:	bic	r0, r0, lr, lsr r1
   14b60:	eor	r0, lr, r0, lsl r1
   14b64:	mov	r1, ip
   14b68:	str	r0, [r2, #8]
   14b6c:	mov	r0, #0
   14b70:	mvn	r2, #0
   14b74:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14b78:	mov	sp, fp
   14b7c:	pop	{fp, pc}
   14b80:	push	{fp, lr}
   14b84:	mov	fp, sp
   14b88:	sub	sp, sp, #48	; 0x30
   14b8c:	mov	r1, r0
   14b90:	movw	r0, #33168	; 0x8190
   14b94:	mov	r3, #32
   14b98:	movt	r0, #2
   14b9c:	add	r2, r0, #16
   14ba0:	vld1.64	{d16-d17}, [r0], r3
   14ba4:	mov	r3, sp
   14ba8:	vld1.64	{d18-d19}, [r2]
   14bac:	vld1.64	{d20-d21}, [r0]
   14bb0:	add	r2, r3, #16
   14bb4:	add	r0, r3, #32
   14bb8:	vst1.64	{d18-d19}, [r2]
   14bbc:	vst1.64	{d20-d21}, [r0]
   14bc0:	mov	r0, #12
   14bc4:	mov	r2, r3
   14bc8:	vst1.64	{d16-d17}, [r2], r0
   14bcc:	ldr	r0, [r2]
   14bd0:	orr	r0, r0, #67108864	; 0x4000000
   14bd4:	str	r0, [r2]
   14bd8:	mov	r0, #0
   14bdc:	mvn	r2, #0
   14be0:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14be4:	mov	sp, fp
   14be8:	pop	{fp, pc}
   14bec:	push	{fp, lr}
   14bf0:	mov	fp, sp
   14bf4:	sub	sp, sp, #48	; 0x30
   14bf8:	mov	ip, r1
   14bfc:	mov	r1, r0
   14c00:	movw	r0, #33168	; 0x8190
   14c04:	mov	r2, #32
   14c08:	movt	r0, #2
   14c0c:	add	r3, r0, #16
   14c10:	vld1.64	{d16-d17}, [r0], r2
   14c14:	vld1.64	{d18-d19}, [r3]
   14c18:	vld1.64	{d20-d21}, [r0]
   14c1c:	mov	r3, sp
   14c20:	add	r2, r3, #16
   14c24:	add	r0, r3, #32
   14c28:	vst1.64	{d18-d19}, [r2]
   14c2c:	vst1.64	{d20-d21}, [r0]
   14c30:	mov	r0, #12
   14c34:	mov	r2, r3
   14c38:	vst1.64	{d16-d17}, [r2], r0
   14c3c:	ldr	r0, [r2]
   14c40:	orr	r0, r0, #67108864	; 0x4000000
   14c44:	str	r0, [r2]
   14c48:	mov	r0, #0
   14c4c:	mov	r2, ip
   14c50:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14c54:	mov	sp, fp
   14c58:	pop	{fp, pc}
   14c5c:	push	{r4, sl, fp, lr}
   14c60:	add	fp, sp, #8
   14c64:	sub	sp, sp, #96	; 0x60
   14c68:	vmov.i32	q8, #0	; 0x00000000
   14c6c:	mov	ip, r2
   14c70:	mov	r2, sp
   14c74:	mov	r4, #28
   14c78:	cmp	r1, #10
   14c7c:	mov	r3, r2
   14c80:	add	lr, r2, #16
   14c84:	vst1.64	{d16-d17}, [r3], r4
   14c88:	vst1.64	{d16-d17}, [lr]
   14c8c:	vst1.32	{d16-d17}, [r3]
   14c90:	beq	14ce0 <_obstack_memory_used@@Base+0x1e14>
   14c94:	vld1.64	{d16-d17}, [r2], r4
   14c98:	vld1.64	{d18-d19}, [lr]
   14c9c:	add	r3, sp, #48	; 0x30
   14ca0:	vld1.32	{d20-d21}, [r2]
   14ca4:	add	r2, r3, #20
   14ca8:	add	r4, r3, #4
   14cac:	vst1.32	{d18-d19}, [r2]
   14cb0:	add	r2, r3, #32
   14cb4:	vst1.32	{d16-d17}, [r4]
   14cb8:	vst1.32	{d20-d21}, [r2]
   14cbc:	str	r1, [sp, #48]	; 0x30
   14cc0:	mvn	r2, #0
   14cc4:	ldr	r1, [sp, #60]	; 0x3c
   14cc8:	orr	r1, r1, #67108864	; 0x4000000
   14ccc:	str	r1, [sp, #60]	; 0x3c
   14cd0:	mov	r1, ip
   14cd4:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14cd8:	sub	sp, fp, #8
   14cdc:	pop	{r4, sl, fp, pc}
   14ce0:	bl	110ec <abort@plt>
   14ce4:	push	{r4, r5, r6, sl, fp, lr}
   14ce8:	add	fp, sp, #16
   14cec:	sub	sp, sp, #48	; 0x30
   14cf0:	mov	ip, r3
   14cf4:	movw	r3, #33168	; 0x8190
   14cf8:	mov	r6, #32
   14cfc:	cmp	r1, #0
   14d00:	mov	r4, sp
   14d04:	movt	r3, #2
   14d08:	cmpne	r2, #0
   14d0c:	add	r5, r4, #16
   14d10:	add	lr, r3, #16
   14d14:	vld1.64	{d16-d17}, [r3], r6
   14d18:	vld1.64	{d18-d19}, [lr]
   14d1c:	vld1.64	{d20-d21}, [r3]
   14d20:	mov	r3, #10
   14d24:	vst1.64	{d16-d17}, [r4], r6
   14d28:	vst1.64	{d18-d19}, [r5]
   14d2c:	vst1.64	{d20-d21}, [r4]
   14d30:	str	r3, [sp]
   14d34:	bne	14d3c <_obstack_memory_used@@Base+0x1e70>
   14d38:	bl	110ec <abort@plt>
   14d3c:	str	r2, [sp, #44]	; 0x2c
   14d40:	str	r1, [sp, #40]	; 0x28
   14d44:	mov	r3, sp
   14d48:	mov	r1, ip
   14d4c:	mvn	r2, #0
   14d50:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14d54:	sub	sp, fp, #16
   14d58:	pop	{r4, r5, r6, sl, fp, pc}
   14d5c:	push	{r4, r5, r6, sl, fp, lr}
   14d60:	add	fp, sp, #16
   14d64:	sub	sp, sp, #48	; 0x30
   14d68:	mov	lr, r3
   14d6c:	movw	r3, #33168	; 0x8190
   14d70:	mov	r6, #32
   14d74:	cmp	r1, #0
   14d78:	mov	r4, sp
   14d7c:	movt	r3, #2
   14d80:	cmpne	r2, #0
   14d84:	add	r5, r4, #16
   14d88:	add	ip, r3, #16
   14d8c:	vld1.64	{d16-d17}, [r3], r6
   14d90:	vld1.64	{d18-d19}, [ip]
   14d94:	vld1.64	{d20-d21}, [r3]
   14d98:	mov	r3, #10
   14d9c:	vst1.64	{d16-d17}, [r4], r6
   14da0:	vst1.64	{d18-d19}, [r5]
   14da4:	vst1.64	{d20-d21}, [r4]
   14da8:	str	r3, [sp]
   14dac:	bne	14db4 <_obstack_memory_used@@Base+0x1ee8>
   14db0:	bl	110ec <abort@plt>
   14db4:	ldr	ip, [fp, #8]
   14db8:	str	r2, [sp, #44]	; 0x2c
   14dbc:	str	r1, [sp, #40]	; 0x28
   14dc0:	mov	r3, sp
   14dc4:	mov	r1, lr
   14dc8:	mov	r2, ip
   14dcc:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14dd0:	sub	sp, fp, #16
   14dd4:	pop	{r4, r5, r6, sl, fp, pc}
   14dd8:	push	{r4, sl, fp, lr}
   14ddc:	add	fp, sp, #8
   14de0:	sub	sp, sp, #48	; 0x30
   14de4:	movw	r3, #33168	; 0x8190
   14de8:	mov	lr, #32
   14dec:	mov	ip, r2
   14df0:	cmp	r0, #0
   14df4:	movt	r3, #2
   14df8:	cmpne	r1, #0
   14dfc:	add	r2, r3, #16
   14e00:	vld1.64	{d16-d17}, [r3], lr
   14e04:	vld1.64	{d20-d21}, [r3]
   14e08:	vld1.64	{d18-d19}, [r2]
   14e0c:	mov	r2, sp
   14e10:	add	r4, r2, #16
   14e14:	vst1.64	{d16-d17}, [r2], lr
   14e18:	vst1.64	{d20-d21}, [r2]
   14e1c:	mov	r2, #10
   14e20:	vst1.64	{d18-d19}, [r4]
   14e24:	str	r2, [sp]
   14e28:	bne	14e30 <_obstack_memory_used@@Base+0x1f64>
   14e2c:	bl	110ec <abort@plt>
   14e30:	str	r1, [sp, #44]	; 0x2c
   14e34:	str	r0, [sp, #40]	; 0x28
   14e38:	mov	r3, sp
   14e3c:	mov	r0, #0
   14e40:	mov	r1, ip
   14e44:	mvn	r2, #0
   14e48:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14e4c:	sub	sp, fp, #8
   14e50:	pop	{r4, sl, fp, pc}
   14e54:	push	{r4, r5, fp, lr}
   14e58:	add	fp, sp, #8
   14e5c:	sub	sp, sp, #48	; 0x30
   14e60:	mov	ip, r3
   14e64:	movw	r3, #33168	; 0x8190
   14e68:	mov	r4, #32
   14e6c:	mov	lr, r2
   14e70:	cmp	r0, #0
   14e74:	movt	r3, #2
   14e78:	cmpne	r1, #0
   14e7c:	add	r2, r3, #16
   14e80:	vld1.64	{d16-d17}, [r3], r4
   14e84:	vld1.64	{d20-d21}, [r3]
   14e88:	vld1.64	{d18-d19}, [r2]
   14e8c:	mov	r2, sp
   14e90:	add	r5, r2, #16
   14e94:	vst1.64	{d16-d17}, [r2], r4
   14e98:	vst1.64	{d20-d21}, [r2]
   14e9c:	mov	r2, #10
   14ea0:	vst1.64	{d18-d19}, [r5]
   14ea4:	str	r2, [sp]
   14ea8:	bne	14eb0 <_obstack_memory_used@@Base+0x1fe4>
   14eac:	bl	110ec <abort@plt>
   14eb0:	str	r1, [sp, #44]	; 0x2c
   14eb4:	str	r0, [sp, #40]	; 0x28
   14eb8:	mov	r3, sp
   14ebc:	mov	r0, #0
   14ec0:	mov	r1, lr
   14ec4:	mov	r2, ip
   14ec8:	bl	1476c <_obstack_memory_used@@Base+0x18a0>
   14ecc:	sub	sp, fp, #8
   14ed0:	pop	{r4, r5, fp, pc}
   14ed4:	movw	r3, #33008	; 0x80f0
   14ed8:	movt	r3, #2
   14edc:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14ee0:	movw	r3, #33008	; 0x80f0
   14ee4:	mov	r2, r1
   14ee8:	mov	r1, r0
   14eec:	mov	r0, #0
   14ef0:	movt	r3, #2
   14ef4:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14ef8:	movw	r3, #33008	; 0x80f0
   14efc:	mvn	r2, #0
   14f00:	movt	r3, #2
   14f04:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14f08:	movw	r3, #33008	; 0x80f0
   14f0c:	mov	r1, r0
   14f10:	mov	r0, #0
   14f14:	mvn	r2, #0
   14f18:	movt	r3, #2
   14f1c:	b	1476c <_obstack_memory_used@@Base+0x18a0>
   14f20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f24:	add	fp, sp, #24
   14f28:	sub	sp, sp, #32
   14f2c:	ldr	r6, [fp, #12]
   14f30:	ldr	r7, [fp, #8]
   14f34:	mov	r4, r2
   14f38:	mov	r8, r0
   14f3c:	cmp	r1, #0
   14f40:	beq	14f68 <_obstack_memory_used@@Base+0x209c>
   14f44:	movw	r2, #31136	; 0x79a0
   14f48:	mov	r5, r1
   14f4c:	str	r3, [sp, #4]
   14f50:	str	r4, [sp]
   14f54:	mov	r0, r8
   14f58:	mov	r1, #1
   14f5c:	movt	r2, #1
   14f60:	mov	r3, r5
   14f64:	b	14f80 <_obstack_memory_used@@Base+0x20b4>
   14f68:	movw	r2, #31148	; 0x79ac
   14f6c:	str	r3, [sp]
   14f70:	mov	r0, r8
   14f74:	mov	r1, #1
   14f78:	mov	r3, r4
   14f7c:	movt	r2, #1
   14f80:	bl	1108c <__fprintf_chk@plt>
   14f84:	movw	r1, #31155	; 0x79b3
   14f88:	mov	r0, #0
   14f8c:	mov	r2, #5
   14f90:	movt	r1, #1
   14f94:	bl	10f24 <dcgettext@plt>
   14f98:	movw	r2, #31873	; 0x7c81
   14f9c:	mov	r3, r0
   14fa0:	movw	r0, #2022	; 0x7e6
   14fa4:	mov	r1, #1
   14fa8:	movt	r2, #1
   14fac:	str	r0, [sp]
   14fb0:	mov	r0, r8
   14fb4:	bl	1108c <__fprintf_chk@plt>
   14fb8:	movw	r4, #25698	; 0x6462
   14fbc:	mov	r1, r8
   14fc0:	movt	r4, #1
   14fc4:	mov	r0, r4
   14fc8:	bl	10eb8 <fputs_unlocked@plt>
   14fcc:	movw	r1, #31159	; 0x79b7
   14fd0:	mov	r0, #0
   14fd4:	mov	r2, #5
   14fd8:	movt	r1, #1
   14fdc:	bl	10f24 <dcgettext@plt>
   14fe0:	movw	r3, #31330	; 0x7a62
   14fe4:	mov	r2, r0
   14fe8:	mov	r0, r8
   14fec:	mov	r1, #1
   14ff0:	movt	r3, #1
   14ff4:	bl	1108c <__fprintf_chk@plt>
   14ff8:	mov	r0, r4
   14ffc:	mov	r1, r8
   15000:	bl	10eb8 <fputs_unlocked@plt>
   15004:	cmp	r6, #9
   15008:	bhi	15044 <_obstack_memory_used@@Base+0x2178>
   1500c:	add	r0, pc, #0
   15010:	ldr	pc, [r0, r6, lsl #2]
   15014:	andeq	r5, r1, ip, lsr r0
   15018:	andeq	r5, r1, r0, asr r0
   1501c:	andeq	r5, r1, r0, lsl #1
   15020:	andeq	r5, r1, r8, lsr #1
   15024:	ldrdeq	r5, [r1], -r0
   15028:	strdeq	r5, [r1], -r8
   1502c:	andeq	r5, r1, r0, lsr #2
   15030:	andeq	r5, r1, r8, asr r1
   15034:	andeq	r5, r1, r0, lsl #4
   15038:	andeq	r5, r1, r8, lsr #3
   1503c:	sub	sp, fp, #24
   15040:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15044:	movw	r1, #31683	; 0x7bc3
   15048:	movt	r1, #1
   1504c:	b	151b0 <_obstack_memory_used@@Base+0x22e4>
   15050:	movw	r1, #31364	; 0x7a84
   15054:	mov	r0, #0
   15058:	mov	r2, #5
   1505c:	movt	r1, #1
   15060:	bl	10f24 <dcgettext@plt>
   15064:	ldr	r3, [r7]
   15068:	mov	r2, r0
   1506c:	mov	r0, r8
   15070:	mov	r1, #1
   15074:	sub	sp, fp, #24
   15078:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1507c:	b	1108c <__fprintf_chk@plt>
   15080:	movw	r1, #31380	; 0x7a94
   15084:	mov	r0, #0
   15088:	mov	r2, #5
   1508c:	movt	r1, #1
   15090:	bl	10f24 <dcgettext@plt>
   15094:	mov	r2, r0
   15098:	ldr	r3, [r7]
   1509c:	ldr	r0, [r7, #4]
   150a0:	str	r0, [sp]
   150a4:	b	15194 <_obstack_memory_used@@Base+0x22c8>
   150a8:	movw	r1, #31403	; 0x7aab
   150ac:	mov	r0, #0
   150b0:	mov	r2, #5
   150b4:	movt	r1, #1
   150b8:	bl	10f24 <dcgettext@plt>
   150bc:	mov	r2, r0
   150c0:	ldr	r3, [r7]
   150c4:	ldmib	r7, {r0, r1}
   150c8:	stm	sp, {r0, r1}
   150cc:	b	15194 <_obstack_memory_used@@Base+0x22c8>
   150d0:	movw	r1, #31431	; 0x7ac7
   150d4:	mov	r0, #0
   150d8:	mov	r2, #5
   150dc:	movt	r1, #1
   150e0:	bl	10f24 <dcgettext@plt>
   150e4:	ldr	r3, [r7]
   150e8:	mov	r2, r0
   150ec:	ldmib	r7, {r0, r1, r7}
   150f0:	stm	sp, {r0, r1, r7}
   150f4:	b	15194 <_obstack_memory_used@@Base+0x22c8>
   150f8:	movw	r1, #31463	; 0x7ae7
   150fc:	mov	r0, #0
   15100:	mov	r2, #5
   15104:	movt	r1, #1
   15108:	bl	10f24 <dcgettext@plt>
   1510c:	ldr	r3, [r7]
   15110:	mov	r2, r0
   15114:	ldmib	r7, {r0, r1, r6, r7}
   15118:	stm	sp, {r0, r1, r6, r7}
   1511c:	b	15194 <_obstack_memory_used@@Base+0x22c8>
   15120:	movw	r1, #31499	; 0x7b0b
   15124:	mov	r0, #0
   15128:	mov	r2, #5
   1512c:	movt	r1, #1
   15130:	bl	10f24 <dcgettext@plt>
   15134:	mov	r2, r0
   15138:	ldr	r3, [r7]
   1513c:	ldmib	r7, {r0, r1, r6}
   15140:	ldr	r5, [r7, #16]
   15144:	ldr	r7, [r7, #20]
   15148:	stm	sp, {r0, r1, r6}
   1514c:	str	r5, [sp, #12]
   15150:	str	r7, [sp, #16]
   15154:	b	15194 <_obstack_memory_used@@Base+0x22c8>
   15158:	movw	r1, #31539	; 0x7b33
   1515c:	mov	r0, #0
   15160:	mov	r2, #5
   15164:	movt	r1, #1
   15168:	bl	10f24 <dcgettext@plt>
   1516c:	mov	r2, r0
   15170:	ldr	r3, [r7]
   15174:	ldmib	r7, {r0, r1, r6}
   15178:	ldr	r5, [r7, #16]
   1517c:	ldr	r4, [r7, #20]
   15180:	ldr	r7, [r7, #24]
   15184:	stm	sp, {r0, r1, r6}
   15188:	str	r5, [sp, #12]
   1518c:	str	r4, [sp, #16]
   15190:	str	r7, [sp, #20]
   15194:	mov	r0, r8
   15198:	mov	r1, #1
   1519c:	bl	1108c <__fprintf_chk@plt>
   151a0:	sub	sp, fp, #24
   151a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151a8:	movw	r1, #31631	; 0x7b8f
   151ac:	movt	r1, #1
   151b0:	mov	r0, #0
   151b4:	mov	r2, #5
   151b8:	bl	10f24 <dcgettext@plt>
   151bc:	mov	ip, r0
   151c0:	ldr	r3, [r7]
   151c4:	ldr	r0, [r7, #4]
   151c8:	ldr	r1, [r7, #8]
   151cc:	ldr	r6, [r7, #12]
   151d0:	ldr	r5, [r7, #16]
   151d4:	ldr	r4, [r7, #20]
   151d8:	ldr	r2, [r7, #24]
   151dc:	ldr	lr, [r7, #28]
   151e0:	ldr	r7, [r7, #32]
   151e4:	stm	sp, {r0, r1, r6}
   151e8:	str	r5, [sp, #12]
   151ec:	str	r4, [sp, #16]
   151f0:	str	r2, [sp, #20]
   151f4:	str	lr, [sp, #24]
   151f8:	str	r7, [sp, #28]
   151fc:	b	15244 <_obstack_memory_used@@Base+0x2378>
   15200:	movw	r1, #31583	; 0x7b5f
   15204:	mov	r0, #0
   15208:	mov	r2, #5
   1520c:	movt	r1, #1
   15210:	bl	10f24 <dcgettext@plt>
   15214:	mov	ip, r0
   15218:	ldr	r3, [r7]
   1521c:	ldmib	r7, {r0, r1, r6}
   15220:	ldr	r5, [r7, #16]
   15224:	ldr	r4, [r7, #20]
   15228:	ldr	r2, [r7, #24]
   1522c:	ldr	r7, [r7, #28]
   15230:	stm	sp, {r0, r1, r6}
   15234:	str	r5, [sp, #12]
   15238:	str	r4, [sp, #16]
   1523c:	str	r2, [sp, #20]
   15240:	str	r7, [sp, #24]
   15244:	mov	r0, r8
   15248:	mov	r1, #1
   1524c:	mov	r2, ip
   15250:	bl	1108c <__fprintf_chk@plt>
   15254:	sub	sp, fp, #24
   15258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1525c:	push	{r4, sl, fp, lr}
   15260:	add	fp, sp, #8
   15264:	sub	sp, sp, #8
   15268:	ldr	ip, [fp, #8]
   1526c:	mov	lr, #0
   15270:	ldr	r4, [ip, lr, lsl #2]
   15274:	add	lr, lr, #1
   15278:	cmp	r4, #0
   1527c:	bne	15270 <_obstack_memory_used@@Base+0x23a4>
   15280:	sub	r4, lr, #1
   15284:	str	ip, [sp]
   15288:	str	r4, [sp, #4]
   1528c:	bl	14f20 <_obstack_memory_used@@Base+0x2054>
   15290:	sub	sp, fp, #8
   15294:	pop	{r4, sl, fp, pc}
   15298:	push	{fp, lr}
   1529c:	mov	fp, sp
   152a0:	sub	sp, sp, #48	; 0x30
   152a4:	ldr	ip, [fp, #8]
   152a8:	ldr	lr, [ip]
   152ac:	cmp	lr, #0
   152b0:	str	lr, [sp, #8]
   152b4:	beq	15350 <_obstack_memory_used@@Base+0x2484>
   152b8:	ldr	lr, [ip, #4]
   152bc:	cmp	lr, #0
   152c0:	str	lr, [sp, #12]
   152c4:	beq	15358 <_obstack_memory_used@@Base+0x248c>
   152c8:	ldr	lr, [ip, #8]
   152cc:	cmp	lr, #0
   152d0:	str	lr, [sp, #16]
   152d4:	beq	15360 <_obstack_memory_used@@Base+0x2494>
   152d8:	ldr	lr, [ip, #12]
   152dc:	cmp	lr, #0
   152e0:	str	lr, [sp, #20]
   152e4:	beq	15368 <_obstack_memory_used@@Base+0x249c>
   152e8:	ldr	lr, [ip, #16]
   152ec:	cmp	lr, #0
   152f0:	str	lr, [sp, #24]
   152f4:	beq	15370 <_obstack_memory_used@@Base+0x24a4>
   152f8:	ldr	lr, [ip, #20]
   152fc:	cmp	lr, #0
   15300:	str	lr, [sp, #28]
   15304:	beq	15378 <_obstack_memory_used@@Base+0x24ac>
   15308:	ldr	lr, [ip, #24]
   1530c:	cmp	lr, #0
   15310:	str	lr, [sp, #32]
   15314:	beq	15380 <_obstack_memory_used@@Base+0x24b4>
   15318:	ldr	lr, [ip, #28]
   1531c:	cmp	lr, #0
   15320:	str	lr, [sp, #36]	; 0x24
   15324:	beq	15388 <_obstack_memory_used@@Base+0x24bc>
   15328:	ldr	lr, [ip, #32]
   1532c:	cmp	lr, #0
   15330:	str	lr, [sp, #40]	; 0x28
   15334:	beq	15390 <_obstack_memory_used@@Base+0x24c4>
   15338:	ldr	lr, [ip, #36]	; 0x24
   1533c:	mov	ip, #10
   15340:	cmp	lr, #0
   15344:	str	lr, [sp, #44]	; 0x2c
   15348:	movweq	ip, #9
   1534c:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15350:	mov	ip, #0
   15354:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15358:	mov	ip, #1
   1535c:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15360:	mov	ip, #2
   15364:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15368:	mov	ip, #3
   1536c:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15370:	mov	ip, #4
   15374:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15378:	mov	ip, #5
   1537c:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15380:	mov	ip, #6
   15384:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15388:	mov	ip, #7
   1538c:	b	15394 <_obstack_memory_used@@Base+0x24c8>
   15390:	mov	ip, #8
   15394:	add	lr, sp, #8
   15398:	str	ip, [sp, #4]
   1539c:	str	lr, [sp]
   153a0:	bl	14f20 <_obstack_memory_used@@Base+0x2054>
   153a4:	mov	sp, fp
   153a8:	pop	{fp, pc}
   153ac:	push	{fp, lr}
   153b0:	mov	fp, sp
   153b4:	sub	sp, sp, #56	; 0x38
   153b8:	add	ip, fp, #8
   153bc:	str	ip, [sp, #12]
   153c0:	ldr	lr, [fp, #8]
   153c4:	cmp	lr, #0
   153c8:	str	lr, [sp, #16]
   153cc:	beq	15468 <_obstack_memory_used@@Base+0x259c>
   153d0:	ldr	lr, [ip, #4]
   153d4:	cmp	lr, #0
   153d8:	str	lr, [sp, #20]
   153dc:	beq	15470 <_obstack_memory_used@@Base+0x25a4>
   153e0:	ldr	lr, [ip, #8]
   153e4:	cmp	lr, #0
   153e8:	str	lr, [sp, #24]
   153ec:	beq	15478 <_obstack_memory_used@@Base+0x25ac>
   153f0:	ldr	lr, [ip, #12]
   153f4:	cmp	lr, #0
   153f8:	str	lr, [sp, #28]
   153fc:	beq	15480 <_obstack_memory_used@@Base+0x25b4>
   15400:	ldr	lr, [ip, #16]
   15404:	cmp	lr, #0
   15408:	str	lr, [sp, #32]
   1540c:	beq	15488 <_obstack_memory_used@@Base+0x25bc>
   15410:	ldr	lr, [ip, #20]
   15414:	cmp	lr, #0
   15418:	str	lr, [sp, #36]	; 0x24
   1541c:	beq	15490 <_obstack_memory_used@@Base+0x25c4>
   15420:	ldr	lr, [ip, #24]
   15424:	cmp	lr, #0
   15428:	str	lr, [sp, #40]	; 0x28
   1542c:	beq	15498 <_obstack_memory_used@@Base+0x25cc>
   15430:	ldr	lr, [ip, #28]
   15434:	cmp	lr, #0
   15438:	str	lr, [sp, #44]	; 0x2c
   1543c:	beq	154a0 <_obstack_memory_used@@Base+0x25d4>
   15440:	ldr	lr, [ip, #32]
   15444:	cmp	lr, #0
   15448:	str	lr, [sp, #48]	; 0x30
   1544c:	beq	154a8 <_obstack_memory_used@@Base+0x25dc>
   15450:	ldr	lr, [ip, #36]	; 0x24
   15454:	mov	ip, #10
   15458:	cmp	lr, #0
   1545c:	str	lr, [sp, #52]	; 0x34
   15460:	movweq	ip, #9
   15464:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15468:	mov	ip, #0
   1546c:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15470:	mov	ip, #1
   15474:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15478:	mov	ip, #2
   1547c:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15480:	mov	ip, #3
   15484:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15488:	mov	ip, #4
   1548c:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15490:	mov	ip, #5
   15494:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   15498:	mov	ip, #6
   1549c:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   154a0:	mov	ip, #7
   154a4:	b	154ac <_obstack_memory_used@@Base+0x25e0>
   154a8:	mov	ip, #8
   154ac:	add	lr, sp, #16
   154b0:	str	ip, [sp, #4]
   154b4:	str	lr, [sp]
   154b8:	bl	14f20 <_obstack_memory_used@@Base+0x2054>
   154bc:	mov	sp, fp
   154c0:	pop	{fp, pc}
   154c4:	push	{fp, lr}
   154c8:	mov	fp, sp
   154cc:	movw	r0, #33100	; 0x814c
   154d0:	movt	r0, #2
   154d4:	ldr	r1, [r0]
   154d8:	movw	r0, #25698	; 0x6462
   154dc:	movt	r0, #1
   154e0:	bl	10eb8 <fputs_unlocked@plt>
   154e4:	movw	r1, #31743	; 0x7bff
   154e8:	mov	r0, #0
   154ec:	mov	r2, #5
   154f0:	movt	r1, #1
   154f4:	bl	10f24 <dcgettext@plt>
   154f8:	movw	r2, #31763	; 0x7c13
   154fc:	mov	r1, r0
   15500:	mov	r0, #1
   15504:	movt	r2, #1
   15508:	bl	11074 <__printf_chk@plt>
   1550c:	movw	r1, #31785	; 0x7c29
   15510:	mov	r0, #0
   15514:	mov	r2, #5
   15518:	movt	r1, #1
   1551c:	bl	10f24 <dcgettext@plt>
   15520:	movw	r2, #25066	; 0x61ea
   15524:	movw	r3, #25507	; 0x63a3
   15528:	mov	r1, r0
   1552c:	mov	r0, #1
   15530:	movt	r2, #1
   15534:	movt	r3, #1
   15538:	bl	11074 <__printf_chk@plt>
   1553c:	movw	r1, #31805	; 0x7c3d
   15540:	mov	r0, #0
   15544:	mov	r2, #5
   15548:	movt	r1, #1
   1554c:	bl	10f24 <dcgettext@plt>
   15550:	movw	r2, #31844	; 0x7c64
   15554:	mov	r1, r0
   15558:	mov	r0, #1
   1555c:	movt	r2, #1
   15560:	pop	{fp, lr}
   15564:	b	11074 <__printf_chk@plt>
   15568:	push	{r4, r5, r6, sl, fp, lr}
   1556c:	add	fp, sp, #16
   15570:	mov	r4, r2
   15574:	mov	r5, r1
   15578:	mov	r6, r0
   1557c:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   15580:	cmp	r0, #0
   15584:	popne	{r4, r5, r6, sl, fp, pc}
   15588:	cmp	r6, #0
   1558c:	beq	155a0 <_obstack_memory_used@@Base+0x26d4>
   15590:	cmp	r5, #0
   15594:	cmpne	r4, #0
   15598:	bne	155a0 <_obstack_memory_used@@Base+0x26d4>
   1559c:	pop	{r4, r5, r6, sl, fp, pc}
   155a0:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   155a4:	push	{r4, r5, r6, sl, fp, lr}
   155a8:	add	fp, sp, #16
   155ac:	mov	r4, r2
   155b0:	mov	r5, r1
   155b4:	mov	r6, r0
   155b8:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   155bc:	cmp	r0, #0
   155c0:	popne	{r4, r5, r6, sl, fp, pc}
   155c4:	cmp	r6, #0
   155c8:	beq	155dc <_obstack_memory_used@@Base+0x2710>
   155cc:	cmp	r5, #0
   155d0:	cmpne	r4, #0
   155d4:	bne	155dc <_obstack_memory_used@@Base+0x2710>
   155d8:	pop	{r4, r5, r6, sl, fp, pc}
   155dc:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   155e0:	push	{fp, lr}
   155e4:	mov	fp, sp
   155e8:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   155ec:	cmp	r0, #0
   155f0:	popne	{fp, pc}
   155f4:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   155f8:	push	{fp, lr}
   155fc:	mov	fp, sp
   15600:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   15604:	cmp	r0, #0
   15608:	popne	{fp, pc}
   1560c:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15610:	push	{fp, lr}
   15614:	mov	fp, sp
   15618:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   1561c:	cmp	r0, #0
   15620:	popne	{fp, pc}
   15624:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15628:	push	{r4, r5, fp, lr}
   1562c:	add	fp, sp, #8
   15630:	mov	r4, r1
   15634:	mov	r5, r0
   15638:	bl	15be4 <_obstack_memory_used@@Base+0x2d18>
   1563c:	cmp	r0, #0
   15640:	popne	{r4, r5, fp, pc}
   15644:	cmp	r5, #0
   15648:	beq	15658 <_obstack_memory_used@@Base+0x278c>
   1564c:	cmp	r4, #0
   15650:	bne	15658 <_obstack_memory_used@@Base+0x278c>
   15654:	pop	{r4, r5, fp, pc}
   15658:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   1565c:	push	{fp, lr}
   15660:	mov	fp, sp
   15664:	cmp	r1, #0
   15668:	orreq	r1, r1, #1
   1566c:	bl	15be4 <_obstack_memory_used@@Base+0x2d18>
   15670:	cmp	r0, #0
   15674:	popne	{fp, pc}
   15678:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   1567c:	push	{fp, lr}
   15680:	mov	fp, sp
   15684:	clz	r3, r2
   15688:	lsr	ip, r3, #5
   1568c:	clz	r3, r1
   15690:	lsr	r3, r3, #5
   15694:	orrs	r3, r3, ip
   15698:	movwne	r1, #1
   1569c:	movwne	r2, #1
   156a0:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   156a4:	cmp	r0, #0
   156a8:	popne	{fp, pc}
   156ac:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   156b0:	push	{fp, lr}
   156b4:	mov	fp, sp
   156b8:	mov	r2, r1
   156bc:	mov	r1, r0
   156c0:	mov	r0, #0
   156c4:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   156c8:	cmp	r0, #0
   156cc:	popne	{fp, pc}
   156d0:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   156d4:	push	{fp, lr}
   156d8:	mov	fp, sp
   156dc:	mov	r2, r1
   156e0:	mov	r1, r0
   156e4:	clz	r0, r2
   156e8:	clz	r3, r1
   156ec:	lsr	r0, r0, #5
   156f0:	lsr	r3, r3, #5
   156f4:	orrs	r0, r3, r0
   156f8:	mov	r0, #0
   156fc:	movwne	r1, #1
   15700:	movwne	r2, #1
   15704:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   15708:	cmp	r0, #0
   1570c:	popne	{fp, pc}
   15710:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15714:	push	{r4, r5, r6, sl, fp, lr}
   15718:	add	fp, sp, #16
   1571c:	ldr	r5, [r1]
   15720:	mov	r4, r1
   15724:	mov	r6, r0
   15728:	cmp	r0, #0
   1572c:	beq	15744 <_obstack_memory_used@@Base+0x2878>
   15730:	mov	r0, #1
   15734:	add	r0, r0, r5, lsr #1
   15738:	adds	r5, r5, r0
   1573c:	bcc	1574c <_obstack_memory_used@@Base+0x2880>
   15740:	b	15788 <_obstack_memory_used@@Base+0x28bc>
   15744:	cmp	r5, #0
   15748:	movweq	r5, #64	; 0x40
   1574c:	mov	r0, r6
   15750:	mov	r1, r5
   15754:	mov	r2, #1
   15758:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   1575c:	cmp	r5, #0
   15760:	mov	r1, r5
   15764:	movwne	r1, #1
   15768:	cmp	r0, #0
   1576c:	bne	15780 <_obstack_memory_used@@Base+0x28b4>
   15770:	clz	r2, r6
   15774:	lsr	r2, r2, #5
   15778:	orrs	r1, r2, r1
   1577c:	bne	15788 <_obstack_memory_used@@Base+0x28bc>
   15780:	str	r5, [r4]
   15784:	pop	{r4, r5, r6, sl, fp, pc}
   15788:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   1578c:	push	{r4, r5, r6, r7, fp, lr}
   15790:	add	fp, sp, #16
   15794:	ldr	r5, [r1]
   15798:	mov	r6, r2
   1579c:	mov	r4, r1
   157a0:	mov	r7, r0
   157a4:	cmp	r0, #0
   157a8:	beq	157c0 <_obstack_memory_used@@Base+0x28f4>
   157ac:	mov	r0, #1
   157b0:	add	r0, r0, r5, lsr #1
   157b4:	adds	r5, r5, r0
   157b8:	bcc	157d8 <_obstack_memory_used@@Base+0x290c>
   157bc:	b	1580c <_obstack_memory_used@@Base+0x2940>
   157c0:	cmp	r5, #0
   157c4:	bne	157d8 <_obstack_memory_used@@Base+0x290c>
   157c8:	mov	r0, #64	; 0x40
   157cc:	cmp	r6, #64	; 0x40
   157d0:	udiv	r5, r0, r6
   157d4:	addhi	r5, r5, #1
   157d8:	mov	r0, r7
   157dc:	mov	r1, r5
   157e0:	mov	r2, r6
   157e4:	bl	15d58 <_obstack_memory_used@@Base+0x2e8c>
   157e8:	cmp	r0, #0
   157ec:	bne	15804 <_obstack_memory_used@@Base+0x2938>
   157f0:	cmp	r7, #0
   157f4:	beq	1580c <_obstack_memory_used@@Base+0x2940>
   157f8:	cmp	r6, #0
   157fc:	cmpne	r5, #0
   15800:	bne	1580c <_obstack_memory_used@@Base+0x2940>
   15804:	str	r5, [r4]
   15808:	pop	{r4, r5, r6, r7, fp, pc}
   1580c:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15810:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15814:	add	fp, sp, #24
   15818:	mov	r8, r1
   1581c:	ldr	r1, [r1]
   15820:	mov	r5, r0
   15824:	add	r0, r1, r1, asr #1
   15828:	cmp	r0, r1
   1582c:	mvnvs	r0, #-2147483648	; 0x80000000
   15830:	cmp	r0, r3
   15834:	mov	r7, r0
   15838:	movgt	r7, r3
   1583c:	cmn	r3, #1
   15840:	movle	r7, r0
   15844:	ldr	r0, [fp, #8]
   15848:	cmn	r0, #1
   1584c:	ble	15874 <_obstack_memory_used@@Base+0x29a8>
   15850:	cmp	r0, #0
   15854:	beq	158c8 <_obstack_memory_used@@Base+0x29fc>
   15858:	cmn	r7, #1
   1585c:	ble	1589c <_obstack_memory_used@@Base+0x29d0>
   15860:	mvn	r4, #-2147483648	; 0x80000000
   15864:	udiv	r6, r4, r0
   15868:	cmp	r6, r7
   1586c:	bge	158c8 <_obstack_memory_used@@Base+0x29fc>
   15870:	b	158d8 <_obstack_memory_used@@Base+0x2a0c>
   15874:	cmn	r7, #1
   15878:	ble	158b8 <_obstack_memory_used@@Base+0x29ec>
   1587c:	cmn	r0, #1
   15880:	beq	158c8 <_obstack_memory_used@@Base+0x29fc>
   15884:	mov	r6, #-2147483648	; 0x80000000
   15888:	mvn	r4, #-2147483648	; 0x80000000
   1588c:	sdiv	r6, r6, r0
   15890:	cmp	r6, r7
   15894:	bge	158c8 <_obstack_memory_used@@Base+0x29fc>
   15898:	b	158d8 <_obstack_memory_used@@Base+0x2a0c>
   1589c:	beq	158c8 <_obstack_memory_used@@Base+0x29fc>
   158a0:	mov	r6, #-2147483648	; 0x80000000
   158a4:	mvn	r4, #-2147483648	; 0x80000000
   158a8:	sdiv	r6, r6, r7
   158ac:	cmp	r6, r0
   158b0:	bge	158c8 <_obstack_memory_used@@Base+0x29fc>
   158b4:	b	158d8 <_obstack_memory_used@@Base+0x2a0c>
   158b8:	mvn	r4, #-2147483648	; 0x80000000
   158bc:	sdiv	r6, r4, r0
   158c0:	cmp	r7, r6
   158c4:	blt	158d8 <_obstack_memory_used@@Base+0x2a0c>
   158c8:	mul	r6, r7, r0
   158cc:	mov	r4, #64	; 0x40
   158d0:	cmp	r6, #63	; 0x3f
   158d4:	bgt	158e0 <_obstack_memory_used@@Base+0x2a14>
   158d8:	sdiv	r7, r4, r0
   158dc:	mul	r6, r7, r0
   158e0:	cmp	r5, #0
   158e4:	moveq	r4, #0
   158e8:	streq	r4, [r8]
   158ec:	sub	r4, r7, r1
   158f0:	cmp	r4, r2
   158f4:	bge	159a0 <_obstack_memory_used@@Base+0x2ad4>
   158f8:	add	r7, r1, r2
   158fc:	mov	r6, #0
   15900:	mov	r2, #0
   15904:	cmp	r7, r3
   15908:	movwgt	r6, #1
   1590c:	cmn	r3, #1
   15910:	movwgt	r2, #1
   15914:	cmp	r7, r1
   15918:	bvs	159d4 <_obstack_memory_used@@Base+0x2b08>
   1591c:	ands	r1, r2, r6
   15920:	bne	159d4 <_obstack_memory_used@@Base+0x2b08>
   15924:	cmn	r0, #1
   15928:	ble	15950 <_obstack_memory_used@@Base+0x2a84>
   1592c:	cmp	r0, #0
   15930:	beq	1599c <_obstack_memory_used@@Base+0x2ad0>
   15934:	cmn	r7, #1
   15938:	ble	15974 <_obstack_memory_used@@Base+0x2aa8>
   1593c:	mvn	r1, #-2147483648	; 0x80000000
   15940:	udiv	r1, r1, r0
   15944:	cmp	r1, r7
   15948:	bge	1599c <_obstack_memory_used@@Base+0x2ad0>
   1594c:	b	159d4 <_obstack_memory_used@@Base+0x2b08>
   15950:	cmn	r7, #1
   15954:	ble	1598c <_obstack_memory_used@@Base+0x2ac0>
   15958:	cmn	r0, #1
   1595c:	beq	1599c <_obstack_memory_used@@Base+0x2ad0>
   15960:	mov	r1, #-2147483648	; 0x80000000
   15964:	sdiv	r1, r1, r0
   15968:	cmp	r1, r7
   1596c:	bge	1599c <_obstack_memory_used@@Base+0x2ad0>
   15970:	b	159d4 <_obstack_memory_used@@Base+0x2b08>
   15974:	beq	1599c <_obstack_memory_used@@Base+0x2ad0>
   15978:	mov	r1, #-2147483648	; 0x80000000
   1597c:	sdiv	r1, r1, r7
   15980:	cmp	r1, r0
   15984:	bge	1599c <_obstack_memory_used@@Base+0x2ad0>
   15988:	b	159d4 <_obstack_memory_used@@Base+0x2b08>
   1598c:	mvn	r1, #-2147483648	; 0x80000000
   15990:	sdiv	r1, r1, r0
   15994:	cmp	r7, r1
   15998:	blt	159d4 <_obstack_memory_used@@Base+0x2b08>
   1599c:	mul	r6, r7, r0
   159a0:	mov	r0, r5
   159a4:	mov	r1, r6
   159a8:	bl	15be4 <_obstack_memory_used@@Base+0x2d18>
   159ac:	cmp	r6, #0
   159b0:	movwne	r6, #1
   159b4:	cmp	r0, #0
   159b8:	bne	159cc <_obstack_memory_used@@Base+0x2b00>
   159bc:	clz	r1, r5
   159c0:	lsr	r1, r1, #5
   159c4:	orrs	r1, r1, r6
   159c8:	bne	159d4 <_obstack_memory_used@@Base+0x2b08>
   159cc:	str	r7, [r8]
   159d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159d4:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   159d8:	push	{fp, lr}
   159dc:	mov	fp, sp
   159e0:	mov	r1, #1
   159e4:	bl	15b60 <_obstack_memory_used@@Base+0x2c94>
   159e8:	cmp	r0, #0
   159ec:	popne	{fp, pc}
   159f0:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   159f4:	push	{fp, lr}
   159f8:	mov	fp, sp
   159fc:	bl	15b60 <_obstack_memory_used@@Base+0x2c94>
   15a00:	cmp	r0, #0
   15a04:	popne	{fp, pc}
   15a08:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15a0c:	push	{fp, lr}
   15a10:	mov	fp, sp
   15a14:	mov	r1, #1
   15a18:	bl	15b60 <_obstack_memory_used@@Base+0x2c94>
   15a1c:	cmp	r0, #0
   15a20:	popne	{fp, pc}
   15a24:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15a28:	push	{fp, lr}
   15a2c:	mov	fp, sp
   15a30:	bl	15b60 <_obstack_memory_used@@Base+0x2c94>
   15a34:	cmp	r0, #0
   15a38:	popne	{fp, pc}
   15a3c:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15a40:	push	{r4, r5, fp, lr}
   15a44:	add	fp, sp, #8
   15a48:	mov	r5, r0
   15a4c:	mov	r0, r1
   15a50:	mov	r4, r1
   15a54:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   15a58:	cmp	r0, #0
   15a5c:	beq	15a70 <_obstack_memory_used@@Base+0x2ba4>
   15a60:	mov	r1, r5
   15a64:	mov	r2, r4
   15a68:	pop	{r4, r5, fp, lr}
   15a6c:	b	10f00 <memcpy@plt>
   15a70:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15a74:	push	{r4, r5, fp, lr}
   15a78:	add	fp, sp, #8
   15a7c:	mov	r5, r0
   15a80:	mov	r0, r1
   15a84:	mov	r4, r1
   15a88:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   15a8c:	cmp	r0, #0
   15a90:	beq	15aa4 <_obstack_memory_used@@Base+0x2bd8>
   15a94:	mov	r1, r5
   15a98:	mov	r2, r4
   15a9c:	pop	{r4, r5, fp, lr}
   15aa0:	b	10f00 <memcpy@plt>
   15aa4:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15aa8:	push	{r4, r5, fp, lr}
   15aac:	add	fp, sp, #8
   15ab0:	mov	r5, r0
   15ab4:	add	r0, r1, #1
   15ab8:	mov	r4, r1
   15abc:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   15ac0:	cmp	r0, #0
   15ac4:	beq	15ae0 <_obstack_memory_used@@Base+0x2c14>
   15ac8:	mov	r1, #0
   15acc:	mov	r2, r4
   15ad0:	strb	r1, [r0, r4]
   15ad4:	mov	r1, r5
   15ad8:	pop	{r4, r5, fp, lr}
   15adc:	b	10f00 <memcpy@plt>
   15ae0:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15ae4:	push	{r4, r5, fp, lr}
   15ae8:	add	fp, sp, #8
   15aec:	mov	r4, r0
   15af0:	bl	11044 <strlen@plt>
   15af4:	add	r5, r0, #1
   15af8:	mov	r0, r5
   15afc:	bl	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   15b00:	cmp	r0, #0
   15b04:	beq	15b18 <_obstack_memory_used@@Base+0x2c4c>
   15b08:	mov	r1, r4
   15b0c:	mov	r2, r5
   15b10:	pop	{r4, r5, fp, lr}
   15b14:	b	10f00 <memcpy@plt>
   15b18:	bl	15b1c <_obstack_memory_used@@Base+0x2c50>
   15b1c:	push	{fp, lr}
   15b20:	mov	fp, sp
   15b24:	movw	r0, #32996	; 0x80e4
   15b28:	movw	r1, #30876	; 0x789c
   15b2c:	mov	r2, #5
   15b30:	movt	r0, #2
   15b34:	movt	r1, #1
   15b38:	ldr	r4, [r0]
   15b3c:	mov	r0, #0
   15b40:	bl	10f24 <dcgettext@plt>
   15b44:	movw	r2, #30863	; 0x788f
   15b48:	mov	r3, r0
   15b4c:	mov	r0, r4
   15b50:	mov	r1, #0
   15b54:	movt	r2, #1
   15b58:	bl	10f9c <error@plt>
   15b5c:	bl	110ec <abort@plt>
   15b60:	clz	r2, r1
   15b64:	clz	r3, r0
   15b68:	lsr	r2, r2, #5
   15b6c:	lsr	r3, r3, #5
   15b70:	orrs	r2, r3, r2
   15b74:	movwne	r1, #1
   15b78:	movwne	r0, #1
   15b7c:	cmp	r1, #0
   15b80:	beq	15bb0 <_obstack_memory_used@@Base+0x2ce4>
   15b84:	mvn	r2, #-2147483648	; 0x80000000
   15b88:	udiv	r2, r2, r1
   15b8c:	cmp	r2, r0
   15b90:	bcs	15bb0 <_obstack_memory_used@@Base+0x2ce4>
   15b94:	push	{fp, lr}
   15b98:	mov	fp, sp
   15b9c:	bl	11050 <__errno_location@plt>
   15ba0:	mov	r1, #12
   15ba4:	str	r1, [r0]
   15ba8:	mov	r0, #0
   15bac:	pop	{fp, pc}
   15bb0:	b	10eac <calloc@plt>
   15bb4:	cmp	r0, #0
   15bb8:	movweq	r0, #1
   15bbc:	cmn	r0, #1
   15bc0:	ble	15bc8 <_obstack_memory_used@@Base+0x2cfc>
   15bc4:	b	10fd8 <malloc@plt>
   15bc8:	push	{fp, lr}
   15bcc:	mov	fp, sp
   15bd0:	bl	11050 <__errno_location@plt>
   15bd4:	mov	r1, #12
   15bd8:	str	r1, [r0]
   15bdc:	mov	r0, #0
   15be0:	pop	{fp, pc}
   15be4:	push	{fp, lr}
   15be8:	mov	fp, sp
   15bec:	cmp	r0, #0
   15bf0:	beq	15c0c <_obstack_memory_used@@Base+0x2d40>
   15bf4:	cmp	r1, #0
   15bf8:	beq	15c18 <_obstack_memory_used@@Base+0x2d4c>
   15bfc:	cmn	r1, #1
   15c00:	ble	15c24 <_obstack_memory_used@@Base+0x2d58>
   15c04:	pop	{fp, lr}
   15c08:	b	10f3c <realloc@plt>
   15c0c:	mov	r0, r1
   15c10:	pop	{fp, lr}
   15c14:	b	15bb4 <_obstack_memory_used@@Base+0x2ce8>
   15c18:	bl	127f4 <close@plt+0x16fc>
   15c1c:	mov	r0, #0
   15c20:	pop	{fp, pc}
   15c24:	bl	11050 <__errno_location@plt>
   15c28:	mov	r1, #12
   15c2c:	str	r1, [r0]
   15c30:	mov	r0, #0
   15c34:	pop	{fp, pc}
   15c38:	push	{r4, r5, r6, sl, fp, lr}
   15c3c:	add	fp, sp, #16
   15c40:	mov	r4, r0
   15c44:	bl	10f84 <__fpending@plt>
   15c48:	ldr	r6, [r4]
   15c4c:	mov	r5, r0
   15c50:	mov	r0, r4
   15c54:	bl	126fc <close@plt+0x1604>
   15c58:	tst	r6, #32
   15c5c:	bne	15c94 <_obstack_memory_used@@Base+0x2dc8>
   15c60:	cmp	r0, #0
   15c64:	mov	r4, r0
   15c68:	mvnne	r4, #0
   15c6c:	cmp	r5, #0
   15c70:	bne	15ca0 <_obstack_memory_used@@Base+0x2dd4>
   15c74:	cmp	r0, #0
   15c78:	beq	15ca0 <_obstack_memory_used@@Base+0x2dd4>
   15c7c:	bl	11050 <__errno_location@plt>
   15c80:	ldr	r0, [r0]
   15c84:	subs	r4, r0, #9
   15c88:	mvnne	r4, #0
   15c8c:	mov	r0, r4
   15c90:	pop	{r4, r5, r6, sl, fp, pc}
   15c94:	mvn	r4, #0
   15c98:	cmp	r0, #0
   15c9c:	beq	15ca8 <_obstack_memory_used@@Base+0x2ddc>
   15ca0:	mov	r0, r4
   15ca4:	pop	{r4, r5, r6, sl, fp, pc}
   15ca8:	bl	11050 <__errno_location@plt>
   15cac:	mov	r1, #0
   15cb0:	str	r1, [r0]
   15cb4:	mov	r0, r4
   15cb8:	pop	{r4, r5, r6, sl, fp, pc}
   15cbc:	push	{fp, lr}
   15cc0:	mov	fp, sp
   15cc4:	mov	r0, #14
   15cc8:	bl	110c8 <nl_langinfo@plt>
   15ccc:	movw	r1, #25699	; 0x6463
   15cd0:	cmp	r0, #0
   15cd4:	movt	r1, #1
   15cd8:	movne	r1, r0
   15cdc:	movw	r0, #31920	; 0x7cb0
   15ce0:	ldrb	r2, [r1]
   15ce4:	movt	r0, #1
   15ce8:	cmp	r2, #0
   15cec:	movne	r0, r1
   15cf0:	pop	{fp, pc}
   15cf4:	push	{r4, r5, r6, r7, fp, lr}
   15cf8:	add	fp, sp, #16
   15cfc:	sub	sp, sp, #8
   15d00:	cmp	r0, #0
   15d04:	add	r5, sp, #4
   15d08:	mov	r7, r2
   15d0c:	mov	r4, r1
   15d10:	movne	r5, r0
   15d14:	mov	r0, r5
   15d18:	bl	10f90 <mbrtowc@plt>
   15d1c:	mov	r6, r0
   15d20:	cmp	r7, #0
   15d24:	beq	15d4c <_obstack_memory_used@@Base+0x2e80>
   15d28:	cmn	r6, #2
   15d2c:	bcc	15d4c <_obstack_memory_used@@Base+0x2e80>
   15d30:	mov	r0, #0
   15d34:	bl	15d94 <_obstack_memory_used@@Base+0x2ec8>
   15d38:	cmp	r0, #0
   15d3c:	bne	15d4c <_obstack_memory_used@@Base+0x2e80>
   15d40:	ldrb	r0, [r4]
   15d44:	mov	r6, #1
   15d48:	str	r0, [r5]
   15d4c:	mov	r0, r6
   15d50:	sub	sp, fp, #16
   15d54:	pop	{r4, r5, r6, r7, fp, pc}
   15d58:	cmp	r2, #0
   15d5c:	beq	15d8c <_obstack_memory_used@@Base+0x2ec0>
   15d60:	mvn	r3, #0
   15d64:	udiv	r3, r3, r2
   15d68:	cmp	r3, r1
   15d6c:	bcs	15d8c <_obstack_memory_used@@Base+0x2ec0>
   15d70:	push	{fp, lr}
   15d74:	mov	fp, sp
   15d78:	bl	11050 <__errno_location@plt>
   15d7c:	mov	r1, #12
   15d80:	str	r1, [r0]
   15d84:	mov	r0, #0
   15d88:	pop	{fp, pc}
   15d8c:	mul	r1, r2, r1
   15d90:	b	15be4 <_obstack_memory_used@@Base+0x2d18>
   15d94:	push	{r4, sl, fp, lr}
   15d98:	add	fp, sp, #8
   15d9c:	sub	sp, sp, #264	; 0x108
   15da0:	add	r1, sp, #7
   15da4:	movw	r2, #257	; 0x101
   15da8:	bl	15e00 <_obstack_memory_used@@Base+0x2f34>
   15dac:	mov	r4, #0
   15db0:	cmp	r0, #0
   15db4:	bne	15df4 <_obstack_memory_used@@Base+0x2f28>
   15db8:	movw	r1, #25976	; 0x6578
   15dbc:	add	r0, sp, #7
   15dc0:	mov	r2, #2
   15dc4:	movt	r1, #1
   15dc8:	bl	11038 <bcmp@plt>
   15dcc:	cmp	r0, #0
   15dd0:	beq	15df4 <_obstack_memory_used@@Base+0x2f28>
   15dd4:	movw	r1, #31926	; 0x7cb6
   15dd8:	add	r0, sp, #7
   15ddc:	mov	r2, #6
   15de0:	movt	r1, #1
   15de4:	bl	11038 <bcmp@plt>
   15de8:	cmp	r0, #0
   15dec:	mov	r4, r0
   15df0:	movwne	r4, #1
   15df4:	mov	r0, r4
   15df8:	sub	sp, fp, #8
   15dfc:	pop	{r4, sl, fp, pc}
   15e00:	push	{r4, r5, r6, r7, fp, lr}
   15e04:	add	fp, sp, #16
   15e08:	mov	r4, r1
   15e0c:	mov	r1, #0
   15e10:	mov	r6, r2
   15e14:	bl	110b0 <setlocale@plt>
   15e18:	cmp	r0, #0
   15e1c:	beq	15e4c <_obstack_memory_used@@Base+0x2f80>
   15e20:	mov	r7, r0
   15e24:	bl	11044 <strlen@plt>
   15e28:	cmp	r0, r6
   15e2c:	bcs	15e68 <_obstack_memory_used@@Base+0x2f9c>
   15e30:	add	r2, r0, #1
   15e34:	mov	r0, r4
   15e38:	mov	r1, r7
   15e3c:	bl	10f00 <memcpy@plt>
   15e40:	mov	r5, #0
   15e44:	mov	r0, r5
   15e48:	pop	{r4, r5, r6, r7, fp, pc}
   15e4c:	mov	r5, #22
   15e50:	cmp	r6, #0
   15e54:	beq	15e90 <_obstack_memory_used@@Base+0x2fc4>
   15e58:	mov	r0, #0
   15e5c:	strb	r0, [r4]
   15e60:	mov	r0, r5
   15e64:	pop	{r4, r5, r6, r7, fp, pc}
   15e68:	mov	r5, #34	; 0x22
   15e6c:	cmp	r6, #0
   15e70:	beq	15e90 <_obstack_memory_used@@Base+0x2fc4>
   15e74:	sub	r6, r6, #1
   15e78:	mov	r0, r4
   15e7c:	mov	r1, r7
   15e80:	mov	r2, r6
   15e84:	bl	10f00 <memcpy@plt>
   15e88:	mov	r0, #0
   15e8c:	strb	r0, [r4, r6]
   15e90:	mov	r0, r5
   15e94:	pop	{r4, r5, r6, r7, fp, pc}
   15e98:	mov	r1, #0
   15e9c:	b	110b0 <setlocale@plt>
   15ea0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ea4:	mov	r7, r0
   15ea8:	ldr	r6, [pc, #72]	; 15ef8 <_obstack_memory_used@@Base+0x302c>
   15eac:	ldr	r5, [pc, #72]	; 15efc <_obstack_memory_used@@Base+0x3030>
   15eb0:	add	r6, pc, r6
   15eb4:	add	r5, pc, r5
   15eb8:	sub	r6, r6, r5
   15ebc:	mov	r8, r1
   15ec0:	mov	r9, r2
   15ec4:	bl	10e8c <calloc@plt-0x20>
   15ec8:	asrs	r6, r6, #2
   15ecc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ed0:	mov	r4, #0
   15ed4:	add	r4, r4, #1
   15ed8:	ldr	r3, [r5], #4
   15edc:	mov	r2, r9
   15ee0:	mov	r1, r8
   15ee4:	mov	r0, r7
   15ee8:	blx	r3
   15eec:	cmp	r6, r4
   15ef0:	bne	15ed4 <_obstack_memory_used@@Base+0x3008>
   15ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ef8:	andeq	r2, r1, r4, asr r0
   15efc:	andeq	r2, r1, ip, asr #32
   15f00:	bx	lr
   15f04:	ldr	r3, [pc, #12]	; 15f18 <_obstack_memory_used@@Base+0x304c>
   15f08:	mov	r1, #0
   15f0c:	add	r3, pc, r3
   15f10:	ldr	r2, [r3]
   15f14:	b	1105c <__cxa_atexit@plt>
   15f18:	andeq	r2, r1, r8, asr #3

Disassembly of section .fini:

00015f1c <.fini>:
   15f1c:	push	{r3, lr}
   15f20:	pop	{r3, pc}
