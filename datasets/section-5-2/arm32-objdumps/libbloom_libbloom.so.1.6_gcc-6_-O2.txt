
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

00000510 <.init>:
 510:	push	{r3, lr}
 514:	bl	5b8 <bloom_init@plt+0x10>
 518:	pop	{r3, pc}

Disassembly of section .plt:

0000051c <calloc@plt-0x14>:
 51c:	push	{lr}		; (str lr, [sp, #-4]!)
 520:	ldr	lr, [pc, #4]	; 52c <calloc@plt-0x4>
 524:	add	lr, pc, lr
 528:	ldr	pc, [lr, #8]!
 52c:	ldrdeq	r0, [r1], -r4

00000530 <calloc@plt>:
 530:	add	ip, pc, #0, 12
 534:	add	ip, ip, #16, 20	; 0x10000
 538:	ldr	pc, [ip, #2772]!	; 0xad4

0000053c <raise@plt>:
 53c:	add	ip, pc, #0, 12
 540:	add	ip, ip, #16, 20	; 0x10000
 544:	ldr	pc, [ip, #2764]!	; 0xacc

00000548 <log@plt>:
 548:	add	ip, pc, #0, 12
 54c:	add	ip, ip, #16, 20	; 0x10000
 550:	ldr	pc, [ip, #2756]!	; 0xac4

00000554 <__cxa_finalize@plt>:
 554:	add	ip, pc, #0, 12
 558:	add	ip, ip, #16, 20	; 0x10000
 55c:	ldr	pc, [ip, #2748]!	; 0xabc

00000560 <printf@plt>:
 560:	add	ip, pc, #0, 12
 564:	add	ip, ip, #16, 20	; 0x10000
 568:	ldr	pc, [ip, #2740]!	; 0xab4

0000056c <murmurhash2@plt>:
 56c:	add	ip, pc, #0, 12
 570:	add	ip, ip, #16, 20	; 0x10000
 574:	ldr	pc, [ip, #2732]!	; 0xaac

00000578 <free@plt>:
 578:	add	ip, pc, #0, 12
 57c:	add	ip, ip, #16, 20	; 0x10000
 580:	ldr	pc, [ip, #2724]!	; 0xaa4

00000584 <__gmon_start__@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #16, 20	; 0x10000
 58c:	ldr	pc, [ip, #2716]!	; 0xa9c

00000590 <memset@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #16, 20	; 0x10000
 598:	ldr	pc, [ip, #2708]!	; 0xa94

0000059c <ceil@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #16, 20	; 0x10000
 5a4:	ldr	pc, [ip, #2700]!	; 0xa8c

000005a8 <bloom_init@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #16, 20	; 0x10000
 5b0:	ldr	pc, [ip, #2692]!	; 0xa84

Disassembly of section .text:

000005b8 <bloom_init@@Base-0x274>:
 5b8:	ldr	r3, [pc, #20]	; 5d4 <bloom_init@plt+0x2c>
 5bc:	ldr	r2, [pc, #20]	; 5d8 <bloom_init@plt+0x30>
 5c0:	add	r3, pc, r3
 5c4:	ldr	r2, [r3, r2]
 5c8:	cmp	r2, #0
 5cc:	bxeq	lr
 5d0:	b	584 <__gmon_start__@plt>
 5d4:	andeq	r0, r1, r8, lsr sl
 5d8:	andeq	r0, r0, r0, asr #32
 5dc:	ldr	r3, [pc, #52]	; 618 <bloom_init@plt+0x70>
 5e0:	ldr	r0, [pc, #52]	; 61c <bloom_init@plt+0x74>
 5e4:	add	r3, pc, r3
 5e8:	add	r0, pc, r0
 5ec:	add	r3, r3, #3
 5f0:	sub	r3, r3, r0
 5f4:	cmp	r3, #6
 5f8:	ldr	r3, [pc, #32]	; 620 <bloom_init@plt+0x78>
 5fc:	add	r3, pc, r3
 600:	bxls	lr
 604:	ldr	r2, [pc, #24]	; 624 <bloom_init@plt+0x7c>
 608:	ldr	r3, [r3, r2]
 60c:	cmp	r3, #0
 610:	bxeq	lr
 614:	bx	r3
 618:	andeq	r0, r1, r4, ror #20
 61c:	andeq	r0, r1, r0, ror #20
 620:	strdeq	r0, [r1], -ip
 624:	andeq	r0, r0, ip, lsr r0
 628:	ldr	r1, [pc, #56]	; 668 <bloom_init@plt+0xc0>
 62c:	ldr	r0, [pc, #56]	; 66c <bloom_init@plt+0xc4>
 630:	add	r1, pc, r1
 634:	add	r0, pc, r0
 638:	sub	r1, r1, r0
 63c:	ldr	r3, [pc, #44]	; 670 <bloom_init@plt+0xc8>
 640:	asr	r1, r1, #2
 644:	add	r3, pc, r3
 648:	add	r1, r1, r1, lsr #31
 64c:	asrs	r1, r1, #1
 650:	bxeq	lr
 654:	ldr	r2, [pc, #24]	; 674 <bloom_init@plt+0xcc>
 658:	ldr	r3, [r3, r2]
 65c:	cmp	r3, #0
 660:	bxeq	lr
 664:	bx	r3
 668:	andeq	r0, r1, r8, lsl sl
 66c:	andeq	r0, r1, r4, lsl sl
 670:			; <UNDEFINED> instruction: 0x000109b4
 674:	andeq	r0, r0, r8, asr #32
 678:	ldr	r3, [pc, #76]	; 6cc <bloom_init@plt+0x124>
 67c:	ldr	r2, [pc, #76]	; 6d0 <bloom_init@plt+0x128>
 680:	add	r3, pc, r3
 684:	add	r2, pc, r2
 688:	ldrb	r3, [r3]
 68c:	cmp	r3, #0
 690:	bxne	lr
 694:	ldr	r3, [pc, #56]	; 6d4 <bloom_init@plt+0x12c>
 698:	push	{r4, lr}
 69c:	ldr	r3, [r2, r3]
 6a0:	cmp	r3, #0
 6a4:	beq	6b4 <bloom_init@plt+0x10c>
 6a8:	ldr	r3, [pc, #40]	; 6d8 <bloom_init@plt+0x130>
 6ac:	ldr	r0, [pc, r3]
 6b0:	bl	554 <__cxa_finalize@plt>
 6b4:	bl	5dc <bloom_init@plt+0x34>
 6b8:	ldr	r3, [pc, #28]	; 6dc <bloom_init@plt+0x134>
 6bc:	mov	r2, #1
 6c0:	add	r3, pc, r3
 6c4:	strb	r2, [r3]
 6c8:	pop	{r4, pc}
 6cc:	andeq	r0, r1, r8, asr #19
 6d0:	andeq	r0, r1, r4, ror r9
 6d4:	andeq	r0, r0, r8, lsr r0
 6d8:	muleq	r1, r8, r9
 6dc:	andeq	r0, r1, r8, lsl #19
 6e0:	ldr	r0, [pc, #56]	; 720 <bloom_init@plt+0x178>
 6e4:	ldr	r3, [pc, #56]	; 724 <bloom_init@plt+0x17c>
 6e8:	add	r0, pc, r0
 6ec:	ldr	r2, [r0]
 6f0:	add	r3, pc, r3
 6f4:	cmp	r2, #0
 6f8:	bne	700 <bloom_init@plt+0x158>
 6fc:	b	628 <bloom_init@plt+0x80>
 700:	ldr	r2, [pc, #32]	; 728 <bloom_init@plt+0x180>
 704:	ldr	r3, [r3, r2]
 708:	cmp	r3, #0
 70c:	beq	6fc <bloom_init@plt+0x154>
 710:	push	{r4, lr}
 714:	blx	r3
 718:	pop	{r4, lr}
 71c:	b	628 <bloom_init@plt+0x80>
 720:	andeq	r0, r1, ip, lsl r8
 724:	andeq	r0, r1, r8, lsl #18
 728:	andeq	r0, r0, r4, asr #32
 72c:	andeq	r0, r0, r0
 730:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 734:	mov	r6, r1
 738:	ldr	r1, [r0, #44]	; 0x2c
 73c:	mov	r5, r0
 740:	cmp	r1, #0
 744:	beq	80c <bloom_init@plt+0x264>
 748:	mov	r7, r2
 74c:	mov	r1, r7
 750:	ldr	r2, [pc, #204]	; 824 <bloom_init@plt+0x27c>
 754:	mov	r0, r6
 758:	mov	r9, r3
 75c:	bl	56c <murmurhash2@plt>
 760:	mov	r1, r7
 764:	mov	r2, r0
 768:	mov	r4, r0
 76c:	mov	r0, r6
 770:	bl	56c <murmurhash2@plt>
 774:	ldr	r6, [r5, #24]
 778:	cmp	r6, #0
 77c:	mov	fp, r6
 780:	mov	r8, r0
 784:	beq	804 <bloom_init@plt+0x25c>
 788:	mov	sl, #0
 78c:	mov	r6, sl
 790:	mov	r7, #1
 794:	ldr	r1, [r5, #16]
 798:	mov	r0, r4
 79c:	bl	d18 <murmurhash2@@Base+0x2e4>
 7a0:	ldr	r0, [r5, #40]	; 0x28
 7a4:	and	r3, r1, #7
 7a8:	ldrb	r2, [r0, r1, lsr #3]
 7ac:	lsl	r3, r7, r3
 7b0:	tst	r3, r2
 7b4:	bne	7cc <bloom_init@plt+0x224>
 7b8:	cmp	r9, #0
 7bc:	orr	r3, r2, r3
 7c0:	bne	7f8 <bloom_init@plt+0x250>
 7c4:	mov	r0, r9
 7c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7cc:	add	r6, r6, #1
 7d0:	add	sl, sl, #1
 7d4:	cmp	fp, sl
 7d8:	add	r4, r4, r8
 7dc:	mov	r3, fp
 7e0:	bhi	794 <bloom_init@plt+0x1ec>
 7e4:	sub	r9, r6, r3
 7e8:	clz	r9, r9
 7ec:	lsr	r9, r9, #5
 7f0:	mov	r0, r9
 7f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7f8:	strb	r3, [r0, r1, lsr #3]
 7fc:	ldr	fp, [r5, #24]
 800:	b	7d0 <bloom_init@plt+0x228>
 804:	mov	r3, r6
 808:	b	7e4 <bloom_init@plt+0x23c>
 80c:	mov	r1, r0
 810:	ldr	r0, [pc, #16]	; 828 <bloom_init@plt+0x280>
 814:	mvn	r9, #0
 818:	add	r0, pc, r0
 81c:	bl	560 <printf@plt>
 820:	b	7c4 <bloom_init@plt+0x21c>
 824:	strbls	fp, [r7, -ip, lsl #5]
 828:	andeq	r0, r0, r0, lsr r5

0000082c <bloom_init@@Base>:
 82c:	vcmp.f64	d0, #0.0
 830:	mov	r3, #0
 834:	str	r3, [r0, #44]	; 0x2c
 838:	vmrs	APSR_nzcv, fpscr
 83c:	moveq	r3, #1
 840:	cmp	r1, #1000	; 0x3e8
 844:	orrlt	r3, r3, #1
 848:	cmp	r3, #0
 84c:	beq	858 <bloom_init@@Base+0x2c>
 850:	mov	r0, #1
 854:	bx	lr
 858:	push	{r4, r5, r6, lr}
 85c:	mov	r5, r0
 860:	mov	r4, r1
 864:	str	r1, [r5]
 868:	vstr	d0, [r5, #8]
 86c:	bl	548 <log@plt>
 870:	vldr	d6, [pc, #152]	; 910 <bloom_init@@Base+0xe4>
 874:	vmov	s15, r4
 878:	vcvt.f64.s32	d7, s15
 87c:	vdiv.f64	d0, d0, d6
 880:	vneg.f64	d0, d0
 884:	vmul.f64	d7, d7, d0
 888:	vstr	d0, [r5, #32]
 88c:	vcvt.s32.f64	s15, d7
 890:	vmov	r3, s15
 894:	vstr	s15, [r5, #16]
 898:	tst	r3, #7
 89c:	add	r4, r3, #7
 8a0:	bne	8f0 <bloom_init@@Base+0xc4>
 8a4:	cmp	r3, #0
 8a8:	movlt	r3, r4
 8ac:	asr	r4, r3, #3
 8b0:	str	r4, [r5, #20]
 8b4:	vldr	d7, [pc, #92]	; 918 <bloom_init@@Base+0xec>
 8b8:	vmul.f64	d0, d0, d7
 8bc:	bl	59c <ceil@plt>
 8c0:	mov	r0, r4
 8c4:	mov	r1, #1
 8c8:	vcvt.s32.f64	s0, d0
 8cc:	vstr	s0, [r5, #24]
 8d0:	bl	530 <calloc@plt>
 8d4:	cmp	r0, #0
 8d8:	str	r0, [r5, #40]	; 0x28
 8dc:	beq	908 <bloom_init@@Base+0xdc>
 8e0:	mov	r3, #1
 8e4:	mov	r0, #0
 8e8:	str	r3, [r5, #44]	; 0x2c
 8ec:	pop	{r4, r5, r6, pc}
 8f0:	cmp	r3, #0
 8f4:	movlt	r3, r4
 8f8:	asr	r4, r3, #3
 8fc:	add	r4, r4, #1
 900:	str	r4, [r5, #20]
 904:	b	8b4 <bloom_init@@Base+0x88>
 908:	mov	r0, #1
 90c:	pop	{r4, r5, r6, pc}
 910:			; <UNDEFINED> instruction: 0xff82c587
 914:	svccc	0x00debfbd
 918:			; <UNDEFINED> instruction: 0xfefa39ec
 91c:	svccc	0x00e62e42

00000920 <bloom_init_size@@Base>:
 920:	b	5a8 <bloom_init@plt>

00000924 <bloom_check@@Base>:
 924:	mov	r3, #0
 928:	b	730 <bloom_init@plt+0x188>

0000092c <bloom_add@@Base>:
 92c:	mov	r3, #1
 930:	b	730 <bloom_init@plt+0x188>

00000934 <bloom_print@@Base>:
 934:	push	{r4, lr}
 938:	mov	r1, r0
 93c:	mov	r4, r0
 940:	ldr	r0, [pc, #104]	; 9b0 <bloom_print@@Base+0x7c>
 944:	add	r0, pc, r0
 948:	bl	560 <printf@plt>
 94c:	ldr	r0, [pc, #96]	; 9b4 <bloom_print@@Base+0x80>
 950:	ldr	r1, [r4]
 954:	add	r0, pc, r0
 958:	bl	560 <printf@plt>
 95c:	ldr	r0, [pc, #84]	; 9b8 <bloom_print@@Base+0x84>
 960:	ldrd	r2, [r4, #8]
 964:	add	r0, pc, r0
 968:	bl	560 <printf@plt>
 96c:	ldr	r0, [pc, #72]	; 9bc <bloom_print@@Base+0x88>
 970:	ldr	r1, [r4, #16]
 974:	add	r0, pc, r0
 978:	bl	560 <printf@plt>
 97c:	ldr	r0, [pc, #60]	; 9c0 <bloom_print@@Base+0x8c>
 980:	ldrd	r2, [r4, #32]
 984:	add	r0, pc, r0
 988:	bl	560 <printf@plt>
 98c:	ldr	r0, [pc, #48]	; 9c4 <bloom_print@@Base+0x90>
 990:	ldr	r1, [r4, #20]
 994:	add	r0, pc, r0
 998:	bl	560 <printf@plt>
 99c:	ldr	r0, [pc, #36]	; 9c8 <bloom_print@@Base+0x94>
 9a0:	ldr	r1, [r4, #24]
 9a4:	add	r0, pc, r0
 9a8:	pop	{r4, lr}
 9ac:	b	560 <printf@plt>
 9b0:	andeq	r0, r0, r4, lsr #8
 9b4:	andeq	r0, r0, r4, lsr #8
 9b8:	andeq	r0, r0, r8, lsr #8
 9bc:	andeq	r0, r0, r8, lsr #8
 9c0:	andeq	r0, r0, r8, lsr #8
 9c4:	andeq	r0, r0, r0, lsr r4
 9c8:	andeq	r0, r0, r0, lsr r4

000009cc <bloom_free@@Base>:
 9cc:	ldr	r3, [r0, #44]	; 0x2c
 9d0:	push	{r4, lr}
 9d4:	cmp	r3, #0
 9d8:	mov	r4, r0
 9dc:	beq	9e8 <bloom_free@@Base+0x1c>
 9e0:	ldr	r0, [r0, #40]	; 0x28
 9e4:	bl	578 <free@plt>
 9e8:	mov	r3, #0
 9ec:	str	r3, [r4, #44]	; 0x2c
 9f0:	pop	{r4, pc}

000009f4 <bloom_reset@@Base>:
 9f4:	ldr	r3, [r0, #44]	; 0x2c
 9f8:	cmp	r3, #0
 9fc:	bne	a08 <bloom_reset@@Base+0x14>
 a00:	mov	r0, #1
 a04:	bx	lr
 a08:	ldr	r2, [r0, #20]
 a0c:	push	{r4, lr}
 a10:	mov	r1, #0
 a14:	ldr	r0, [r0, #40]	; 0x28
 a18:	bl	590 <memset@plt>
 a1c:	mov	r0, #0
 a20:	pop	{r4, pc}

00000a24 <bloom_version@@Base>:
 a24:	ldr	r0, [pc, #4]	; a30 <bloom_version@@Base+0xc>
 a28:	add	r0, pc, r0
 a2c:	bx	lr
 a30:	andeq	r0, r0, r4, asr #7

00000a34 <murmurhash2@@Base>:
 a34:	cmp	r1, #3
 a38:	eor	r2, r2, r1
 a3c:	ble	ad8 <murmurhash2@@Base+0xa4>
 a40:	push	{r4, lr}
 a44:	mov	ip, r1
 a48:	ldr	lr, [pc, #216]	; b28 <murmurhash2@@Base+0xf4>
 a4c:	mov	r4, r0
 a50:	ldr	r3, [r4], #4
 a54:	mul	r2, lr, r2
 a58:	mul	r3, lr, r3
 a5c:	sub	ip, ip, #4
 a60:	cmp	ip, #3
 a64:	eor	r3, r3, r3, lsr #24
 a68:	mul	r3, lr, r3
 a6c:	eor	r2, r2, r3
 a70:	bgt	a50 <murmurhash2@@Base+0x1c>
 a74:	sub	r1, r1, #4
 a78:	bic	r3, r1, #3
 a7c:	and	r1, r1, #3
 a80:	add	r3, r3, #4
 a84:	cmp	r1, #2
 a88:	add	r0, r0, r3
 a8c:	beq	abc <murmurhash2@@Base+0x88>
 a90:	cmp	r1, #3
 a94:	beq	ab4 <murmurhash2@@Base+0x80>
 a98:	cmp	r1, #1
 a9c:	beq	ac4 <murmurhash2@@Base+0x90>
 aa0:	ldr	r0, [pc, #128]	; b28 <murmurhash2@@Base+0xf4>
 aa4:	eor	r3, r2, r2, lsr #13
 aa8:	mul	r0, r0, r3
 aac:	eor	r0, r0, r0, lsr #15
 ab0:	pop	{r4, pc}
 ab4:	ldrb	r3, [r0, #2]
 ab8:	eor	r2, r2, r3, lsl #16
 abc:	ldrb	r3, [r0, #1]
 ac0:	eor	r2, r2, r3, lsl #8
 ac4:	ldrb	r3, [r0]
 ac8:	ldr	r1, [pc, #88]	; b28 <murmurhash2@@Base+0xf4>
 acc:	eor	r3, r3, r2
 ad0:	mul	r2, r1, r3
 ad4:	b	aa0 <murmurhash2@@Base+0x6c>
 ad8:	cmp	r1, #2
 adc:	beq	b0c <murmurhash2@@Base+0xd8>
 ae0:	cmp	r1, #3
 ae4:	beq	b04 <murmurhash2@@Base+0xd0>
 ae8:	cmp	r1, #1
 aec:	beq	b14 <murmurhash2@@Base+0xe0>
 af0:	ldr	r0, [pc, #48]	; b28 <murmurhash2@@Base+0xf4>
 af4:	eor	r3, r2, r2, lsr #13
 af8:	mul	r0, r0, r3
 afc:	eor	r0, r0, r0, lsr #15
 b00:	bx	lr
 b04:	ldrb	r3, [r0, #2]
 b08:	eor	r2, r2, r3, lsl #16
 b0c:	ldrb	r3, [r0, #1]
 b10:	eor	r2, r2, r3, lsl #8
 b14:	ldrb	r3, [r0]
 b18:	ldr	r1, [pc, #8]	; b28 <murmurhash2@@Base+0xf4>
 b1c:	eor	r3, r3, r2
 b20:	mul	r2, r1, r3
 b24:	b	af0 <murmurhash2@@Base+0xbc>
 b28:	blpl	ff47b184 <murmurhash2@@Base+0xff47a750>
 b2c:	subs	r2, r1, #1
 b30:	bxeq	lr
 b34:	bcc	d0c <murmurhash2@@Base+0x2d8>
 b38:	cmp	r0, r1
 b3c:	bls	cf0 <murmurhash2@@Base+0x2bc>
 b40:	tst	r1, r2
 b44:	beq	cfc <murmurhash2@@Base+0x2c8>
 b48:	clz	r3, r0
 b4c:	clz	r2, r1
 b50:	sub	r3, r2, r3
 b54:	rsbs	r3, r3, #31
 b58:	addne	r3, r3, r3, lsl #1
 b5c:	mov	r2, #0
 b60:	addne	pc, pc, r3, lsl #2
 b64:	nop			; (mov r0, r0)
 b68:	cmp	r0, r1, lsl #31
 b6c:	adc	r2, r2, r2
 b70:	subcs	r0, r0, r1, lsl #31
 b74:	cmp	r0, r1, lsl #30
 b78:	adc	r2, r2, r2
 b7c:	subcs	r0, r0, r1, lsl #30
 b80:	cmp	r0, r1, lsl #29
 b84:	adc	r2, r2, r2
 b88:	subcs	r0, r0, r1, lsl #29
 b8c:	cmp	r0, r1, lsl #28
 b90:	adc	r2, r2, r2
 b94:	subcs	r0, r0, r1, lsl #28
 b98:	cmp	r0, r1, lsl #27
 b9c:	adc	r2, r2, r2
 ba0:	subcs	r0, r0, r1, lsl #27
 ba4:	cmp	r0, r1, lsl #26
 ba8:	adc	r2, r2, r2
 bac:	subcs	r0, r0, r1, lsl #26
 bb0:	cmp	r0, r1, lsl #25
 bb4:	adc	r2, r2, r2
 bb8:	subcs	r0, r0, r1, lsl #25
 bbc:	cmp	r0, r1, lsl #24
 bc0:	adc	r2, r2, r2
 bc4:	subcs	r0, r0, r1, lsl #24
 bc8:	cmp	r0, r1, lsl #23
 bcc:	adc	r2, r2, r2
 bd0:	subcs	r0, r0, r1, lsl #23
 bd4:	cmp	r0, r1, lsl #22
 bd8:	adc	r2, r2, r2
 bdc:	subcs	r0, r0, r1, lsl #22
 be0:	cmp	r0, r1, lsl #21
 be4:	adc	r2, r2, r2
 be8:	subcs	r0, r0, r1, lsl #21
 bec:	cmp	r0, r1, lsl #20
 bf0:	adc	r2, r2, r2
 bf4:	subcs	r0, r0, r1, lsl #20
 bf8:	cmp	r0, r1, lsl #19
 bfc:	adc	r2, r2, r2
 c00:	subcs	r0, r0, r1, lsl #19
 c04:	cmp	r0, r1, lsl #18
 c08:	adc	r2, r2, r2
 c0c:	subcs	r0, r0, r1, lsl #18
 c10:	cmp	r0, r1, lsl #17
 c14:	adc	r2, r2, r2
 c18:	subcs	r0, r0, r1, lsl #17
 c1c:	cmp	r0, r1, lsl #16
 c20:	adc	r2, r2, r2
 c24:	subcs	r0, r0, r1, lsl #16
 c28:	cmp	r0, r1, lsl #15
 c2c:	adc	r2, r2, r2
 c30:	subcs	r0, r0, r1, lsl #15
 c34:	cmp	r0, r1, lsl #14
 c38:	adc	r2, r2, r2
 c3c:	subcs	r0, r0, r1, lsl #14
 c40:	cmp	r0, r1, lsl #13
 c44:	adc	r2, r2, r2
 c48:	subcs	r0, r0, r1, lsl #13
 c4c:	cmp	r0, r1, lsl #12
 c50:	adc	r2, r2, r2
 c54:	subcs	r0, r0, r1, lsl #12
 c58:	cmp	r0, r1, lsl #11
 c5c:	adc	r2, r2, r2
 c60:	subcs	r0, r0, r1, lsl #11
 c64:	cmp	r0, r1, lsl #10
 c68:	adc	r2, r2, r2
 c6c:	subcs	r0, r0, r1, lsl #10
 c70:	cmp	r0, r1, lsl #9
 c74:	adc	r2, r2, r2
 c78:	subcs	r0, r0, r1, lsl #9
 c7c:	cmp	r0, r1, lsl #8
 c80:	adc	r2, r2, r2
 c84:	subcs	r0, r0, r1, lsl #8
 c88:	cmp	r0, r1, lsl #7
 c8c:	adc	r2, r2, r2
 c90:	subcs	r0, r0, r1, lsl #7
 c94:	cmp	r0, r1, lsl #6
 c98:	adc	r2, r2, r2
 c9c:	subcs	r0, r0, r1, lsl #6
 ca0:	cmp	r0, r1, lsl #5
 ca4:	adc	r2, r2, r2
 ca8:	subcs	r0, r0, r1, lsl #5
 cac:	cmp	r0, r1, lsl #4
 cb0:	adc	r2, r2, r2
 cb4:	subcs	r0, r0, r1, lsl #4
 cb8:	cmp	r0, r1, lsl #3
 cbc:	adc	r2, r2, r2
 cc0:	subcs	r0, r0, r1, lsl #3
 cc4:	cmp	r0, r1, lsl #2
 cc8:	adc	r2, r2, r2
 ccc:	subcs	r0, r0, r1, lsl #2
 cd0:	cmp	r0, r1, lsl #1
 cd4:	adc	r2, r2, r2
 cd8:	subcs	r0, r0, r1, lsl #1
 cdc:	cmp	r0, r1
 ce0:	adc	r2, r2, r2
 ce4:	subcs	r0, r0, r1
 ce8:	mov	r0, r2
 cec:	bx	lr
 cf0:	moveq	r0, #1
 cf4:	movne	r0, #0
 cf8:	bx	lr
 cfc:	clz	r2, r1
 d00:	rsb	r2, r2, #31
 d04:	lsr	r0, r0, r2
 d08:	bx	lr
 d0c:	cmp	r0, #0
 d10:	mvnne	r0, #0
 d14:	b	d38 <murmurhash2@@Base+0x304>
 d18:	cmp	r1, #0
 d1c:	beq	d0c <murmurhash2@@Base+0x2d8>
 d20:	push	{r0, r1, lr}
 d24:	bl	b2c <murmurhash2@@Base+0xf8>
 d28:	pop	{r1, r2, lr}
 d2c:	mul	r3, r2, r0
 d30:	sub	r1, r1, r3
 d34:	bx	lr
 d38:	push	{r1, lr}
 d3c:	mov	r0, #8
 d40:	bl	53c <raise@plt>
 d44:	pop	{r1, pc}

Disassembly of section .fini:

00000d48 <.fini>:
 d48:	push	{r3, lr}
 d4c:	pop	{r3, pc}
