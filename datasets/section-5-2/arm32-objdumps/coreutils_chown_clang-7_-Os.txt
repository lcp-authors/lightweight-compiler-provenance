
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111f4 <.init>:
   111f4:	push	{r3, lr}
   111f8:	bl	115a4 <__assert_fail@plt+0x48>
   111fc:	pop	{r3, pc}

Disassembly of section .plt:

00011200 <fstatfs64@plt-0x14>:
   11200:	push	{lr}		; (str lr, [sp, #-4]!)
   11204:	ldr	lr, [pc, #4]	; 11210 <fstatfs64@plt-0x4>
   11208:	add	lr, pc, lr
   1120c:	ldr	pc, [lr, #8]!
   11210:	strdeq	r9, [r1], -r0

00011214 <fstatfs64@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #102400	; 0x19000
   1121c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011220 <calloc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #102400	; 0x19000
   11228:	ldr	pc, [ip, #3560]!	; 0xde8

0001122c <endgrent@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #102400	; 0x19000
   11234:	ldr	pc, [ip, #3552]!	; 0xde0

00011238 <fputs_unlocked@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #102400	; 0x19000
   11240:	ldr	pc, [ip, #3544]!	; 0xdd8

00011244 <raise@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #102400	; 0x19000
   1124c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011250 <getpwnam@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #102400	; 0x19000
   11258:	ldr	pc, [ip, #3528]!	; 0xdc8

0001125c <strcmp@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #102400	; 0x19000
   11264:	ldr	pc, [ip, #3520]!	; 0xdc0

00011268 <getpwuid@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #102400	; 0x19000
   11270:	ldr	pc, [ip, #3512]!	; 0xdb8

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #102400	; 0x19000
   1127c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011280 <memmove@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #102400	; 0x19000
   11288:	ldr	pc, [ip, #3496]!	; 0xda8

0001128c <free@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #102400	; 0x19000
   11294:	ldr	pc, [ip, #3488]!	; 0xda0

00011298 <_exit@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #102400	; 0x19000
   112a0:	ldr	pc, [ip, #3480]!	; 0xd98

000112a4 <memcpy@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #102400	; 0x19000
   112ac:	ldr	pc, [ip, #3472]!	; 0xd90

000112b0 <mbsinit@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #102400	; 0x19000
   112b8:	ldr	pc, [ip, #3464]!	; 0xd88

000112bc <memcmp@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #102400	; 0x19000
   112c4:	ldr	pc, [ip, #3456]!	; 0xd80

000112c8 <stpcpy@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #102400	; 0x19000
   112d0:	ldr	pc, [ip, #3448]!	; 0xd78

000112d4 <dcgettext@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #102400	; 0x19000
   112dc:	ldr	pc, [ip, #3440]!	; 0xd70

000112e0 <realloc@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #102400	; 0x19000
   112e8:	ldr	pc, [ip, #3432]!	; 0xd68

000112ec <textdomain@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #102400	; 0x19000
   112f4:	ldr	pc, [ip, #3424]!	; 0xd60

000112f8 <__fxstatat64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #102400	; 0x19000
   11300:	ldr	pc, [ip, #3416]!	; 0xd58

00011304 <iswprint@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #102400	; 0x19000
   1130c:	ldr	pc, [ip, #3408]!	; 0xd50

00011310 <__fxstat64@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #102400	; 0x19000
   11318:	ldr	pc, [ip, #3400]!	; 0xd48

0001131c <lseek64@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #102400	; 0x19000
   11324:	ldr	pc, [ip, #3392]!	; 0xd40

00011328 <__ctype_get_mb_cur_max@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #102400	; 0x19000
   11330:	ldr	pc, [ip, #3384]!	; 0xd38

00011334 <__fpending@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #102400	; 0x19000
   1133c:	ldr	pc, [ip, #3376]!	; 0xd30

00011340 <ferror_unlocked@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #102400	; 0x19000
   11348:	ldr	pc, [ip, #3368]!	; 0xd28

0001134c <mbrtowc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #102400	; 0x19000
   11354:	ldr	pc, [ip, #3360]!	; 0xd20

00011358 <error@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #102400	; 0x19000
   11360:	ldr	pc, [ip, #3352]!	; 0xd18

00011364 <open64@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #102400	; 0x19000
   1136c:	ldr	pc, [ip, #3344]!	; 0xd10

00011370 <malloc@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #102400	; 0x19000
   11378:	ldr	pc, [ip, #3336]!	; 0xd08

0001137c <__libc_start_main@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #102400	; 0x19000
   11384:	ldr	pc, [ip, #3328]!	; 0xd00

00011388 <__freading@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #102400	; 0x19000
   11390:	ldr	pc, [ip, #3320]!	; 0xcf8

00011394 <__gmon_start__@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #102400	; 0x19000
   1139c:	ldr	pc, [ip, #3312]!	; 0xcf0

000113a0 <getopt_long@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3304]!	; 0xce8

000113ac <__ctype_b_loc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3296]!	; 0xce0

000113b8 <exit@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113c4 <strtoul@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3280]!	; 0xcd0

000113d0 <strlen@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113dc <strchr@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113e8 <openat64@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113f4 <fchown@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3248]!	; 0xcb0

00011400 <__errno_location@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3240]!	; 0xca8

0001140c <__cxa_atexit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3232]!	; 0xca0

00011418 <memset@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3224]!	; 0xc98

00011424 <__printf_chk@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3216]!	; 0xc90

00011430 <fileno@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3208]!	; 0xc88

0001143c <__fprintf_chk@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3200]!	; 0xc80

00011448 <fclose@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3192]!	; 0xc78

00011454 <fseeko64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3184]!	; 0xc70

00011460 <fcntl64@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3176]!	; 0xc68

0001146c <setlocale@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3168]!	; 0xc60

00011478 <endpwent@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3160]!	; 0xc58

00011484 <strrchr@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3152]!	; 0xc50

00011490 <nl_langinfo@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3144]!	; 0xc48

0001149c <readdir64@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3136]!	; 0xc40

000114a8 <fdopendir@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #3128]!	; 0xc38

000114b4 <dirfd@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #3120]!	; 0xc30

000114c0 <fchdir@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #3112]!	; 0xc28

000114cc <qsort@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #3104]!	; 0xc20

000114d8 <fchownat@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #3096]!	; 0xc18

000114e4 <bindtextdomain@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #3088]!	; 0xc10

000114f0 <__xstat64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #3080]!	; 0xc08

000114fc <fputs@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #3072]!	; 0xc00

00011508 <strncmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #3064]!	; 0xbf8

00011514 <abort@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011520 <close@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #3048]!	; 0xbe8

0001152c <__lxstat64@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #3040]!	; 0xbe0

00011538 <closedir@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #3032]!	; 0xbd8

00011544 <getgrgid@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011550 <getgrnam@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #102400	; 0x19000
   11558:	ldr	pc, [ip, #3016]!	; 0xbc8

0001155c <__assert_fail@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #102400	; 0x19000
   11564:	ldr	pc, [ip, #3008]!	; 0xbc0

Disassembly of section .text:

00011568 <.text>:
   11568:	mov	fp, #0
   1156c:	mov	lr, #0
   11570:	pop	{r1}		; (ldr r1, [sp], #4)
   11574:	mov	r2, sp
   11578:	push	{r2}		; (str r2, [sp, #-4]!)
   1157c:	push	{r0}		; (str r0, [sp, #-4]!)
   11580:	ldr	ip, [pc, #16]	; 11598 <__assert_fail@plt+0x3c>
   11584:	push	{ip}		; (str ip, [sp, #-4]!)
   11588:	ldr	r0, [pc, #12]	; 1159c <__assert_fail@plt+0x40>
   1158c:	ldr	r3, [pc, #12]	; 115a0 <__assert_fail@plt+0x44>
   11590:	bl	1137c <__libc_start_main@plt>
   11594:	bl	11514 <abort@plt>
   11598:	andeq	r9, r1, r8, ror #12
   1159c:	andeq	r1, r1, r8, lsr #19
   115a0:	andeq	r9, r1, r8, lsl #12
   115a4:	ldr	r3, [pc, #20]	; 115c0 <__assert_fail@plt+0x64>
   115a8:	ldr	r2, [pc, #20]	; 115c4 <__assert_fail@plt+0x68>
   115ac:	add	r3, pc, r3
   115b0:	ldr	r2, [r3, r2]
   115b4:	cmp	r2, #0
   115b8:	bxeq	lr
   115bc:	b	11394 <__gmon_start__@plt>
   115c0:	andeq	r9, r1, ip, asr #20
   115c4:	andeq	r0, r0, r8, lsr #2
   115c8:	ldr	r0, [pc, #24]	; 115e8 <__assert_fail@plt+0x8c>
   115cc:	ldr	r3, [pc, #24]	; 115ec <__assert_fail@plt+0x90>
   115d0:	cmp	r3, r0
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0x94>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	fp, r2, r0, lsl #3
   115ec:	andeq	fp, r2, r0, lsl #3
   115f0:	andeq	r0, r0, r0
   115f4:	ldr	r0, [pc, #36]	; 11620 <__assert_fail@plt+0xc4>
   115f8:	ldr	r1, [pc, #36]	; 11624 <__assert_fail@plt+0xc8>
   115fc:	sub	r1, r1, r0
   11600:	asr	r1, r1, #2
   11604:	add	r1, r1, r1, lsr #31
   11608:	asrs	r1, r1, #1
   1160c:	bxeq	lr
   11610:	ldr	r3, [pc, #16]	; 11628 <__assert_fail@plt+0xcc>
   11614:	cmp	r3, #0
   11618:	bxeq	lr
   1161c:	bx	r3
   11620:	andeq	fp, r2, r0, lsl #3
   11624:	andeq	fp, r2, r0, lsl #3
   11628:	andeq	r0, r0, r0
   1162c:	push	{r4, lr}
   11630:	ldr	r4, [pc, #24]	; 11650 <__assert_fail@plt+0xf4>
   11634:	ldrb	r3, [r4]
   11638:	cmp	r3, #0
   1163c:	popne	{r4, pc}
   11640:	bl	115c8 <__assert_fail@plt+0x6c>
   11644:	mov	r3, #1
   11648:	strb	r3, [r4]
   1164c:	pop	{r4, pc}
   11650:	muleq	r2, ip, r1
   11654:	b	115f4 <__assert_fail@plt+0x98>
   11658:	push	{fp, lr}
   1165c:	mov	fp, sp
   11660:	sub	sp, sp, #64	; 0x40
   11664:	mov	r8, r0
   11668:	cmp	r0, #0
   1166c:	bne	11968 <__assert_fail@plt+0x40c>
   11670:	movw	r1, #38683	; 0x971b
   11674:	mov	r0, #0
   11678:	mov	r2, #5
   1167c:	movt	r1, #1
   11680:	bl	112d4 <dcgettext@plt>
   11684:	movw	r5, #45504	; 0xb1c0
   11688:	mov	r1, r0
   1168c:	mov	r0, #1
   11690:	movt	r5, #2
   11694:	ldr	r2, [r5]
   11698:	mov	r3, r2
   1169c:	bl	11424 <__printf_chk@plt>
   116a0:	movw	r1, #38780	; 0x977c
   116a4:	mov	r0, #0
   116a8:	mov	r2, #5
   116ac:	movt	r1, #1
   116b0:	bl	112d4 <dcgettext@plt>
   116b4:	movw	r9, #45460	; 0xb194
   116b8:	movt	r9, #2
   116bc:	ldr	r1, [r9]
   116c0:	bl	11238 <fputs_unlocked@plt>
   116c4:	movw	r1, #38925	; 0x980d
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	112d4 <dcgettext@plt>
   116d8:	ldr	r1, [r9]
   116dc:	bl	11238 <fputs_unlocked@plt>
   116e0:	movw	r1, #39126	; 0x98d6
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	112d4 <dcgettext@plt>
   116f4:	ldr	r1, [r9]
   116f8:	bl	11238 <fputs_unlocked@plt>
   116fc:	movw	r1, #39357	; 0x99bd
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	112d4 <dcgettext@plt>
   11710:	ldr	r1, [r9]
   11714:	bl	11238 <fputs_unlocked@plt>
   11718:	movw	r1, #39476	; 0x9a34
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	112d4 <dcgettext@plt>
   1172c:	ldr	r1, [r9]
   11730:	bl	11238 <fputs_unlocked@plt>
   11734:	movw	r1, #39816	; 0x9b88
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	movt	r1, #1
   11744:	bl	112d4 <dcgettext@plt>
   11748:	ldr	r1, [r9]
   1174c:	bl	11238 <fputs_unlocked@plt>
   11750:	movw	r1, #39944	; 0x9c08
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	112d4 <dcgettext@plt>
   11764:	ldr	r1, [r9]
   11768:	bl	11238 <fputs_unlocked@plt>
   1176c:	movw	r1, #40065	; 0x9c81
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	112d4 <dcgettext@plt>
   11780:	ldr	r1, [r9]
   11784:	bl	11238 <fputs_unlocked@plt>
   11788:	movw	r1, #40136	; 0x9cc8
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	112d4 <dcgettext@plt>
   1179c:	ldr	r1, [r9]
   117a0:	bl	11238 <fputs_unlocked@plt>
   117a4:	movw	r1, #40601	; 0x9e99
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	movt	r1, #1
   117b4:	bl	112d4 <dcgettext@plt>
   117b8:	ldr	r1, [r9]
   117bc:	bl	11238 <fputs_unlocked@plt>
   117c0:	movw	r1, #40646	; 0x9ec6
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	112d4 <dcgettext@plt>
   117d4:	ldr	r1, [r9]
   117d8:	bl	11238 <fputs_unlocked@plt>
   117dc:	movw	r1, #40700	; 0x9efc
   117e0:	mov	r0, #0
   117e4:	mov	r2, #5
   117e8:	movt	r1, #1
   117ec:	bl	112d4 <dcgettext@plt>
   117f0:	ldr	r1, [r9]
   117f4:	bl	11238 <fputs_unlocked@plt>
   117f8:	movw	r1, #40892	; 0x9fbc
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	movt	r1, #1
   11808:	bl	112d4 <dcgettext@plt>
   1180c:	ldr	r2, [r5]
   11810:	mov	r1, r0
   11814:	mov	r0, #1
   11818:	mov	r3, r2
   1181c:	str	r2, [sp]
   11820:	bl	11424 <__printf_chk@plt>
   11824:	movw	r0, #41920	; 0xa3c0
   11828:	add	r6, sp, #8
   1182c:	movt	r0, #1
   11830:	mov	r1, r6
   11834:	ldm	r0!, {r2, r3, r4, r5}
   11838:	stmia	r1!, {r2, r3, r4, r5}
   1183c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11840:	stmia	r1!, {r2, r3, r4, r5, r7}
   11844:	ldm	r0, {r2, r3, r4, r5, r7}
   11848:	stm	r1, {r2, r3, r4, r5, r7}
   1184c:	movw	r1, #41296	; 0xa150
   11850:	movw	r5, #41093	; 0xa085
   11854:	movt	r1, #1
   11858:	movt	r5, #1
   1185c:	mov	r0, r5
   11860:	bl	1125c <strcmp@plt>
   11864:	cmp	r0, #0
   11868:	ldrne	r1, [r6, #8]!
   1186c:	cmpne	r1, #0
   11870:	bne	1185c <__assert_fail@plt+0x300>
   11874:	ldr	r6, [r6, #4]
   11878:	movw	r1, #41391	; 0xa1af
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #1
   11888:	bl	112d4 <dcgettext@plt>
   1188c:	movw	r2, #41139	; 0xa0b3
   11890:	movw	r3, #41414	; 0xa1c6
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	movt	r2, #1
   118a0:	movt	r3, #1
   118a4:	bl	11424 <__printf_chk@plt>
   118a8:	cmp	r6, #0
   118ac:	mov	r0, #5
   118b0:	mov	r1, #0
   118b4:	moveq	r6, r5
   118b8:	bl	1146c <setlocale@plt>
   118bc:	cmp	r0, #0
   118c0:	beq	118f8 <__assert_fail@plt+0x39c>
   118c4:	movw	r1, #41454	; 0xa1ee
   118c8:	mov	r2, #3
   118cc:	movt	r1, #1
   118d0:	bl	11508 <strncmp@plt>
   118d4:	cmp	r0, #0
   118d8:	beq	118f8 <__assert_fail@plt+0x39c>
   118dc:	movw	r1, #41458	; 0xa1f2
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	112d4 <dcgettext@plt>
   118f0:	ldr	r1, [r9]
   118f4:	bl	11238 <fputs_unlocked@plt>
   118f8:	movw	r1, #41529	; 0xa239
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	112d4 <dcgettext@plt>
   1190c:	movw	r2, #41414	; 0xa1c6
   11910:	mov	r1, r0
   11914:	mov	r0, #1
   11918:	mov	r3, r5
   1191c:	movt	r2, #1
   11920:	bl	11424 <__printf_chk@plt>
   11924:	movw	r1, #41556	; 0xa254
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	112d4 <dcgettext@plt>
   11938:	movw	r3, #40600	; 0x9e98
   1193c:	mov	r1, r0
   11940:	movw	r0, #41324	; 0xa16c
   11944:	cmp	r6, r5
   11948:	mov	r2, r6
   1194c:	movt	r0, #1
   11950:	movt	r3, #1
   11954:	moveq	r3, r0
   11958:	mov	r0, #1
   1195c:	bl	11424 <__printf_chk@plt>
   11960:	mov	r0, r8
   11964:	bl	113b8 <exit@plt>
   11968:	movw	r0, #45456	; 0xb190
   1196c:	movw	r1, #38644	; 0x96f4
   11970:	mov	r2, #5
   11974:	movt	r0, #2
   11978:	movt	r1, #1
   1197c:	ldr	r5, [r0]
   11980:	mov	r0, #0
   11984:	bl	112d4 <dcgettext@plt>
   11988:	mov	r2, r0
   1198c:	movw	r0, #45504	; 0xb1c0
   11990:	mov	r1, #1
   11994:	movt	r0, #2
   11998:	ldr	r3, [r0]
   1199c:	mov	r0, r5
   119a0:	bl	1143c <__fprintf_chk@plt>
   119a4:	b	11960 <__assert_fail@plt+0x404>
   119a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119ac:	add	fp, sp, #28
   119b0:	sub	sp, sp, #172	; 0xac
   119b4:	mvn	r8, #0
   119b8:	mov	r6, r0
   119bc:	mov	r4, r1
   119c0:	str	r8, [fp, #-32]	; 0xffffffe0
   119c4:	str	r8, [fp, #-36]	; 0xffffffdc
   119c8:	str	r8, [fp, #-40]	; 0xffffffd8
   119cc:	str	r8, [fp, #-44]	; 0xffffffd4
   119d0:	ldr	r0, [r1]
   119d4:	bl	15f24 <__assert_fail@plt+0x49c8>
   119d8:	movw	r1, #40600	; 0x9e98
   119dc:	mov	r0, #6
   119e0:	movt	r1, #1
   119e4:	bl	1146c <setlocale@plt>
   119e8:	movw	r5, #41143	; 0xa0b7
   119ec:	movw	r1, #41099	; 0xa08b
   119f0:	movt	r5, #1
   119f4:	movt	r1, #1
   119f8:	mov	r0, r5
   119fc:	bl	114e4 <bindtextdomain@plt>
   11a00:	mov	r0, r5
   11a04:	bl	112ec <textdomain@plt>
   11a08:	movw	r0, #11484	; 0x2cdc
   11a0c:	movt	r0, #1
   11a10:	bl	1966c <__assert_fail@plt+0x8110>
   11a14:	sub	r0, fp, #68	; 0x44
   11a18:	bl	11ee0 <__assert_fail@plt+0x984>
   11a1c:	movw	r7, #41123	; 0xa0a3
   11a20:	movw	r5, #41696	; 0xa2e0
   11a24:	mov	r0, #16
   11a28:	mov	sl, #0
   11a2c:	movt	r7, #1
   11a30:	movt	r5, #1
   11a34:	str	r0, [sp, #20]
   11a38:	mov	r0, #0
   11a3c:	str	r0, [sp, #16]
   11a40:	mov	r0, r6
   11a44:	mov	r1, r4
   11a48:	mov	r2, r7
   11a4c:	mov	r3, r5
   11a50:	str	sl, [sp]
   11a54:	bl	113a0 <getopt_long@plt>
   11a58:	cmp	r0, #103	; 0x67
   11a5c:	bgt	11a84 <__assert_fail@plt+0x528>
   11a60:	cmp	r0, #79	; 0x4f
   11a64:	ble	11ab4 <__assert_fail@plt+0x558>
   11a68:	cmp	r0, #98	; 0x62
   11a6c:	bgt	11af0 <__assert_fail@plt+0x594>
   11a70:	cmp	r0, #80	; 0x50
   11a74:	bne	11b14 <__assert_fail@plt+0x5b8>
   11a78:	mov	r0, #16
   11a7c:	str	r0, [sp, #20]
   11a80:	b	11a40 <__assert_fail@plt+0x4e4>
   11a84:	sub	r1, r0, #256	; 0x100
   11a88:	cmp	r1, #4
   11a8c:	bhi	11ae0 <__assert_fail@plt+0x584>
   11a90:	add	r0, pc, #0
   11a94:	ldr	pc, [r0, r1, lsl #2]
   11a98:	andeq	r1, r1, ip, lsr #21
   11a9c:	andeq	r1, r1, r8, asr fp
   11aa0:	andeq	r1, r1, r8, lsr sl
   11aa4:	andeq	r1, r1, r4, lsl #23
   11aa8:	andeq	r1, r1, ip, lsr fp
   11aac:	mov	r8, #1
   11ab0:	b	11a40 <__assert_fail@plt+0x4e4>
   11ab4:	cmp	r0, #71	; 0x47
   11ab8:	ble	11b8c <__assert_fail@plt+0x630>
   11abc:	mov	r1, #17
   11ac0:	cmp	r0, #72	; 0x48
   11ac4:	str	r1, [sp, #20]
   11ac8:	beq	11a40 <__assert_fail@plt+0x4e4>
   11acc:	cmp	r0, #76	; 0x4c
   11ad0:	bne	11eac <__assert_fail@plt+0x950>
   11ad4:	mov	r0, #2
   11ad8:	str	r0, [sp, #20]
   11adc:	b	11a40 <__assert_fail@plt+0x4e4>
   11ae0:	cmp	r0, #104	; 0x68
   11ae4:	bne	11b04 <__assert_fail@plt+0x5a8>
   11ae8:	mov	r8, #0
   11aec:	b	11a40 <__assert_fail@plt+0x4e4>
   11af0:	cmp	r0, #99	; 0x63
   11af4:	bne	11b28 <__assert_fail@plt+0x5cc>
   11af8:	mov	r0, #1
   11afc:	str	r0, [fp, #-68]	; 0xffffffbc
   11b00:	b	11a40 <__assert_fail@plt+0x4e4>
   11b04:	cmp	r0, #118	; 0x76
   11b08:	bne	11eac <__assert_fail@plt+0x950>
   11b0c:	str	sl, [fp, #-68]	; 0xffffffbc
   11b10:	b	11a40 <__assert_fail@plt+0x4e4>
   11b14:	cmp	r0, #82	; 0x52
   11b18:	bne	11eac <__assert_fail@plt+0x950>
   11b1c:	mov	r0, #1
   11b20:	strb	r0, [fp, #-64]	; 0xffffffc0
   11b24:	b	11a40 <__assert_fail@plt+0x4e4>
   11b28:	cmp	r0, #102	; 0x66
   11b2c:	bne	11eac <__assert_fail@plt+0x950>
   11b30:	mov	r0, #1
   11b34:	strb	r0, [fp, #-55]	; 0xffffffc9
   11b38:	b	11a40 <__assert_fail@plt+0x4e4>
   11b3c:	movw	r0, #45464	; 0xb198
   11b40:	movw	r1, #45472	; 0xb1a0
   11b44:	movt	r0, #2
   11b48:	movt	r1, #2
   11b4c:	ldr	r0, [r0]
   11b50:	str	r0, [r1]
   11b54:	b	11a40 <__assert_fail@plt+0x4e4>
   11b58:	movw	r0, #45464	; 0xb198
   11b5c:	sub	r1, fp, #40	; 0x28
   11b60:	sub	r2, fp, #44	; 0x2c
   11b64:	mov	r3, #0
   11b68:	str	sl, [sp]
   11b6c:	movt	r0, #2
   11b70:	ldr	r0, [r0]
   11b74:	bl	17af0 <__assert_fail@plt+0x6594>
   11b78:	cmp	r0, #0
   11b7c:	beq	11a40 <__assert_fail@plt+0x4e4>
   11b80:	b	11da0 <__assert_fail@plt+0x844>
   11b84:	mov	r0, #1
   11b88:	b	11a3c <__assert_fail@plt+0x4e0>
   11b8c:	cmn	r0, #1
   11b90:	bne	11d34 <__assert_fail@plt+0x7d8>
   11b94:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11b98:	ldr	r1, [sp, #20]
   11b9c:	mov	r9, #16
   11ba0:	cmp	r0, #0
   11ba4:	beq	11be0 <__assert_fail@plt+0x684>
   11ba8:	cmp	r1, #16
   11bac:	bne	11be8 <__assert_fail@plt+0x68c>
   11bb0:	mov	r0, #0
   11bb4:	cmp	r8, #1
   11bb8:	bne	11bf0 <__assert_fail@plt+0x694>
   11bbc:	movw	r1, #41182	; 0xa0de
   11bc0:	mov	r0, #0
   11bc4:	mov	r2, #5
   11bc8:	movt	r1, #1
   11bcc:	bl	112d4 <dcgettext@plt>
   11bd0:	mov	r2, r0
   11bd4:	mov	r0, #1
   11bd8:	mov	r1, #0
   11bdc:	bl	11358 <error@plt>
   11be0:	mov	r0, r8
   11be4:	b	11bf0 <__assert_fail@plt+0x694>
   11be8:	mov	r0, r8
   11bec:	mov	r9, r1
   11bf0:	cmp	r0, #0
   11bf4:	movw	r7, #45448	; 0xb188
   11bf8:	mov	r2, #2
   11bfc:	movwne	r0, #1
   11c00:	movt	r7, #2
   11c04:	strb	r0, [fp, #-56]	; 0xffffffc8
   11c08:	movw	r0, #45472	; 0xb1a0
   11c0c:	ldr	r1, [r7]
   11c10:	movt	r0, #2
   11c14:	ldr	r0, [r0]
   11c18:	sub	r3, r6, r1
   11c1c:	cmp	r0, #0
   11c20:	movwne	r2, #1
   11c24:	cmp	r3, r2
   11c28:	blt	11dd0 <__assert_fail@plt+0x874>
   11c2c:	cmp	r0, #0
   11c30:	beq	11c70 <__assert_fail@plt+0x714>
   11c34:	add	r1, sp, #24
   11c38:	bl	19684 <__assert_fail@plt+0x8128>
   11c3c:	cmp	r0, #0
   11c40:	sub	r6, fp, #68	; 0x44
   11c44:	bne	11e14 <__assert_fail@plt+0x8b8>
   11c48:	ldr	r0, [sp, #48]	; 0x30
   11c4c:	ldr	r5, [sp, #52]	; 0x34
   11c50:	str	r0, [fp, #-32]	; 0xffffffe0
   11c54:	str	r5, [fp, #-36]	; 0xffffffdc
   11c58:	bl	11f68 <__assert_fail@plt+0xa0c>
   11c5c:	str	r0, [fp, #-52]	; 0xffffffcc
   11c60:	mov	r0, r5
   11c64:	bl	11f28 <__assert_fail@plt+0x9cc>
   11c68:	str	r0, [fp, #-48]	; 0xffffffd0
   11c6c:	b	11ccc <__assert_fail@plt+0x770>
   11c70:	ldr	r0, [r4, r1, lsl #2]
   11c74:	sub	r6, fp, #68	; 0x44
   11c78:	sub	r2, fp, #36	; 0x24
   11c7c:	add	r1, r6, #20
   11c80:	add	r3, r6, #16
   11c84:	str	r1, [sp]
   11c88:	sub	r1, fp, #32
   11c8c:	bl	17af0 <__assert_fail@plt+0x6594>
   11c90:	cmp	r0, #0
   11c94:	bne	11eb4 <__assert_fail@plt+0x958>
   11c98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11c9c:	cmp	r0, #0
   11ca0:	bne	11cc0 <__assert_fail@plt+0x764>
   11ca4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11ca8:	cmp	r0, #0
   11cac:	beq	11cc0 <__assert_fail@plt+0x764>
   11cb0:	movw	r0, #40600	; 0x9e98
   11cb4:	movt	r0, #1
   11cb8:	bl	18758 <__assert_fail@plt+0x71fc>
   11cbc:	str	r0, [fp, #-52]	; 0xffffffcc
   11cc0:	ldr	r0, [r7]
   11cc4:	add	r0, r0, #1
   11cc8:	str	r0, [r7]
   11ccc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11cd0:	cmp	r0, #0
   11cd4:	beq	11d00 <__assert_fail@plt+0x7a4>
   11cd8:	ldr	r0, [sp, #16]
   11cdc:	eor	r0, r0, #1
   11ce0:	tst	r0, #1
   11ce4:	bne	11d00 <__assert_fail@plt+0x7a4>
   11ce8:	movw	r0, #45480	; 0xb1a8
   11cec:	movt	r0, #2
   11cf0:	bl	17a60 <__assert_fail@plt+0x6504>
   11cf4:	cmp	r0, #0
   11cf8:	str	r0, [fp, #-60]	; 0xffffffc4
   11cfc:	beq	11e44 <__assert_fail@plt+0x8e8>
   11d00:	ldr	r0, [r7]
   11d04:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11d08:	ldr	r7, [fp, #-44]	; 0xffffffd4
   11d0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d14:	stm	sp, {r1, r7}
   11d18:	add	r0, r4, r0, lsl #2
   11d1c:	orr	r1, r9, #1024	; 0x400
   11d20:	str	r6, [sp, #8]
   11d24:	bl	11fa8 <__assert_fail@plt+0xa4c>
   11d28:	eor	r0, r0, #1
   11d2c:	sub	sp, fp, #28
   11d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d34:	cmn	r0, #3
   11d38:	bne	11d90 <__assert_fail@plt+0x834>
   11d3c:	movw	r0, #45368	; 0xb138
   11d40:	movw	r2, #41169	; 0xa0d1
   11d44:	mov	r1, #0
   11d48:	movw	r7, #41153	; 0xa0c1
   11d4c:	movt	r0, #2
   11d50:	movt	r2, #1
   11d54:	str	r1, [sp, #8]
   11d58:	movw	r1, #41093	; 0xa085
   11d5c:	movt	r7, #1
   11d60:	ldr	r3, [r0]
   11d64:	movw	r0, #45460	; 0xb194
   11d68:	str	r2, [sp, #4]
   11d6c:	movw	r2, #41139	; 0xa0b3
   11d70:	movt	r1, #1
   11d74:	str	r7, [sp]
   11d78:	movt	r0, #2
   11d7c:	movt	r2, #1
   11d80:	ldr	r0, [r0]
   11d84:	bl	18240 <__assert_fail@plt+0x6ce4>
   11d88:	mov	r0, #0
   11d8c:	bl	113b8 <exit@plt>
   11d90:	cmn	r0, #2
   11d94:	bne	11eac <__assert_fail@plt+0x950>
   11d98:	mov	r0, #0
   11d9c:	bl	11658 <__assert_fail@plt+0xfc>
   11da0:	mov	r9, r0
   11da4:	movw	r0, #45464	; 0xb198
   11da8:	movt	r0, #2
   11dac:	ldr	r0, [r0]
   11db0:	bl	17928 <__assert_fail@plt+0x63cc>
   11db4:	movw	r2, #41132	; 0xa0ac
   11db8:	str	r0, [sp]
   11dbc:	mov	r0, #1
   11dc0:	mov	r1, #0
   11dc4:	mov	r3, r9
   11dc8:	movt	r2, #1
   11dcc:	bl	11358 <error@plt>
   11dd0:	cmp	r1, r6
   11dd4:	bge	11e88 <__assert_fail@plt+0x92c>
   11dd8:	movw	r1, #41240	; 0xa118
   11ddc:	mov	r0, #0
   11de0:	mov	r2, #5
   11de4:	movt	r1, #1
   11de8:	bl	112d4 <dcgettext@plt>
   11dec:	mov	r5, r0
   11df0:	add	r0, r4, r6, lsl #2
   11df4:	ldr	r0, [r0, #-4]
   11df8:	bl	17928 <__assert_fail@plt+0x63cc>
   11dfc:	mov	r3, r0
   11e00:	mov	r0, #0
   11e04:	mov	r1, #0
   11e08:	mov	r2, r5
   11e0c:	bl	11358 <error@plt>
   11e10:	b	11eac <__assert_fail@plt+0x950>
   11e14:	bl	11400 <__errno_location@plt>
   11e18:	ldr	r4, [r0]
   11e1c:	movw	r1, #41265	; 0xa131
   11e20:	mov	r0, #0
   11e24:	mov	r2, #5
   11e28:	movt	r1, #1
   11e2c:	bl	112d4 <dcgettext@plt>
   11e30:	mov	r5, r0
   11e34:	movw	r0, #45472	; 0xb1a0
   11e38:	movt	r0, #2
   11e3c:	ldr	r1, [r0]
   11e40:	b	11e6c <__assert_fail@plt+0x910>
   11e44:	bl	11400 <__errno_location@plt>
   11e48:	ldr	r4, [r0]
   11e4c:	movw	r1, #41265	; 0xa131
   11e50:	mov	r0, #0
   11e54:	mov	r2, #5
   11e58:	movt	r1, #1
   11e5c:	bl	112d4 <dcgettext@plt>
   11e60:	movw	r1, #44151	; 0xac77
   11e64:	mov	r5, r0
   11e68:	movt	r1, #1
   11e6c:	mov	r0, #4
   11e70:	bl	175f0 <__assert_fail@plt+0x6094>
   11e74:	mov	r3, r0
   11e78:	mov	r0, #1
   11e7c:	mov	r1, r4
   11e80:	mov	r2, r5
   11e84:	bl	11358 <error@plt>
   11e88:	movw	r1, #41224	; 0xa108
   11e8c:	mov	r0, #0
   11e90:	mov	r2, #5
   11e94:	movt	r1, #1
   11e98:	bl	112d4 <dcgettext@plt>
   11e9c:	mov	r2, r0
   11ea0:	mov	r0, #0
   11ea4:	mov	r1, #0
   11ea8:	bl	11358 <error@plt>
   11eac:	mov	r0, #1
   11eb0:	bl	11658 <__assert_fail@plt+0xfc>
   11eb4:	mov	r5, r0
   11eb8:	ldr	r0, [r7]
   11ebc:	ldr	r0, [r4, r0, lsl #2]
   11ec0:	bl	17928 <__assert_fail@plt+0x63cc>
   11ec4:	movw	r2, #41132	; 0xa0ac
   11ec8:	str	r0, [sp]
   11ecc:	mov	r0, #1
   11ed0:	mov	r1, #0
   11ed4:	mov	r3, r5
   11ed8:	movt	r2, #1
   11edc:	bl	11358 <error@plt>
   11ee0:	mov	r1, #0
   11ee4:	mov	r2, #2
   11ee8:	str	r1, [r0, #8]
   11eec:	str	r2, [r0]
   11ef0:	mov	r2, #1
   11ef4:	strb	r1, [r0, #4]
   11ef8:	strh	r2, [r0, #12]
   11efc:	str	r1, [r0, #16]
   11f00:	str	r1, [r0, #20]
   11f04:	bx	lr
   11f08:	push	{r4, sl, fp, lr}
   11f0c:	add	fp, sp, #8
   11f10:	mov	r4, r0
   11f14:	ldr	r0, [r0, #16]
   11f18:	bl	12dc4 <__assert_fail@plt+0x1868>
   11f1c:	ldr	r0, [r4, #20]
   11f20:	pop	{r4, sl, fp, lr}
   11f24:	b	12dc4 <__assert_fail@plt+0x1868>
   11f28:	push	{r4, sl, fp, lr}
   11f2c:	add	fp, sp, #8
   11f30:	sub	sp, sp, #24
   11f34:	mov	r4, r0
   11f38:	bl	11544 <getgrgid@plt>
   11f3c:	cmp	r0, #0
   11f40:	beq	11f4c <__assert_fail@plt+0x9f0>
   11f44:	ldr	r0, [r0]
   11f48:	b	11f5c <__assert_fail@plt+0xa00>
   11f4c:	add	r2, sp, #3
   11f50:	mov	r0, r4
   11f54:	mov	r1, #0
   11f58:	bl	15e28 <__assert_fail@plt+0x48cc>
   11f5c:	bl	18758 <__assert_fail@plt+0x71fc>
   11f60:	sub	sp, fp, #8
   11f64:	pop	{r4, sl, fp, pc}
   11f68:	push	{r4, sl, fp, lr}
   11f6c:	add	fp, sp, #8
   11f70:	sub	sp, sp, #24
   11f74:	mov	r4, r0
   11f78:	bl	11268 <getpwuid@plt>
   11f7c:	cmp	r0, #0
   11f80:	beq	11f8c <__assert_fail@plt+0xa30>
   11f84:	ldr	r0, [r0]
   11f88:	b	11f9c <__assert_fail@plt+0xa40>
   11f8c:	add	r2, sp, #3
   11f90:	mov	r0, r4
   11f94:	mov	r1, #0
   11f98:	bl	15e28 <__assert_fail@plt+0x48cc>
   11f9c:	bl	18758 <__assert_fail@plt+0x71fc>
   11fa0:	sub	sp, fp, #8
   11fa4:	pop	{r4, sl, fp, pc}
   11fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fac:	add	fp, sp, #28
   11fb0:	sub	sp, sp, #268	; 0x10c
   11fb4:	str	r3, [sp, #32]
   11fb8:	str	r2, [sp, #40]	; 0x28
   11fbc:	ldr	r2, [fp, #8]
   11fc0:	ldr	r3, [fp, #12]
   11fc4:	ldr	r5, [fp, #16]
   11fc8:	and	r3, r3, r2
   11fcc:	mov	r2, #0
   11fd0:	cmn	r3, #1
   11fd4:	str	r3, [sp, #44]	; 0x2c
   11fd8:	bne	11ffc <__assert_fail@plt+0xaa0>
   11fdc:	ldrb	r3, [r5, #12]
   11fe0:	cmp	r3, #0
   11fe4:	bne	11ffc <__assert_fail@plt+0xaa0>
   11fe8:	ldr	r2, [r5]
   11fec:	sub	r2, r2, #2
   11ff0:	clz	r2, r2
   11ff4:	lsr	r2, r2, #5
   11ff8:	lsl	r2, r2, #3
   11ffc:	orr	r1, r2, r1
   12000:	mov	r2, #0
   12004:	bl	187dc <__assert_fail@plt+0x7280>
   12008:	str	r0, [sp, #52]	; 0x34
   1200c:	bl	136a4 <__assert_fail@plt+0x2148>
   12010:	cmp	r0, #0
   12014:	beq	12050 <__assert_fail@plt+0xaf4>
   12018:	ldr	r1, [sp, #40]	; 0x28
   1201c:	movw	r2, #42411	; 0xa5ab
   12020:	mov	sl, r0
   12024:	movw	r0, #42436	; 0xa5c4
   12028:	mov	r8, #1
   1202c:	movt	r0, #1
   12030:	movt	r2, #1
   12034:	cmn	r1, #1
   12038:	moveq	r2, r0
   1203c:	sub	r0, fp, #136	; 0x88
   12040:	add	r0, r0, #96	; 0x60
   12044:	str	r2, [sp, #12]
   12048:	str	r0, [sp, #8]
   1204c:	b	12070 <__assert_fail@plt+0xb14>
   12050:	mov	r8, #1
   12054:	b	12b94 <__assert_fail@plt+0x1638>
   12058:	ldr	r0, [sp, #36]	; 0x24
   1205c:	bl	11520 <close@plt>
   12060:	cmp	r0, #0
   12064:	mov	r0, #6
   12068:	movweq	r0, #2
   1206c:	b	1266c <__assert_fail@plt+0x1110>
   12070:	ldr	r7, [sl, #24]
   12074:	ldr	r4, [sl, #28]
   12078:	ldrh	r0, [sl, #56]	; 0x38
   1207c:	sub	r0, r0, #1
   12080:	cmp	r0, #9
   12084:	bhi	12284 <__assert_fail@plt+0xd28>
   12088:	add	r1, pc, #0
   1208c:	ldr	pc, [r1, r0, lsl #2]
   12090:	strheq	r2, [r1], -r8
   12094:	andeq	r2, r1, ip, lsl r2
   12098:	andeq	r2, r1, r4, lsl #5
   1209c:	andeq	r2, r1, ip, ror r1
   120a0:	andeq	r2, r1, r4, lsl #5
   120a4:	andeq	r2, r1, r8, ror r2
   120a8:	andeq	r2, r1, r0, lsl #7
   120ac:	andeq	r2, r1, r4, lsl #5
   120b0:	andeq	r2, r1, r4, lsl #5
   120b4:	andeq	r2, r1, ip, lsr #3
   120b8:	ldrb	r0, [r5, #4]
   120bc:	cmp	r0, #0
   120c0:	beq	12284 <__assert_fail@plt+0xd28>
   120c4:	ldr	r0, [r5, #8]
   120c8:	mov	r6, r4
   120cc:	mov	r4, #1
   120d0:	cmp	r0, #0
   120d4:	beq	12b7c <__assert_fail@plt+0x1620>
   120d8:	ldrd	r2, [r0]
   120dc:	ldrd	r4, [sl, #160]	; 0xa0
   120e0:	eor	r1, r5, r3
   120e4:	eor	r2, r4, r2
   120e8:	orrs	r1, r2, r1
   120ec:	bne	123f8 <__assert_fail@plt+0xe9c>
   120f0:	ldrd	r0, [r0, #8]
   120f4:	ldrd	r2, [sl, #64]	; 0x40
   120f8:	ldr	r5, [fp, #16]
   120fc:	mov	r4, #1
   12100:	eor	r1, r3, r1
   12104:	eor	r0, r2, r0
   12108:	orrs	r0, r0, r1
   1210c:	bne	12b7c <__assert_fail@plt+0x1620>
   12110:	movw	r7, #44151	; 0xac77
   12114:	mov	r0, r6
   12118:	mov	r4, r6
   1211c:	movt	r7, #1
   12120:	mov	r1, r7
   12124:	bl	1125c <strcmp@plt>
   12128:	cmp	r0, #0
   1212c:	beq	12a5c <__assert_fail@plt+0x1500>
   12130:	movw	r1, #42054	; 0xa446
   12134:	mov	r0, #0
   12138:	mov	r2, #5
   1213c:	movt	r1, #1
   12140:	bl	112d4 <dcgettext@plt>
   12144:	mov	r6, r0
   12148:	mov	r0, #0
   1214c:	mov	r1, #4
   12150:	mov	r2, r4
   12154:	bl	17548 <__assert_fail@plt+0x5fec>
   12158:	mov	r5, r0
   1215c:	mov	r0, #1
   12160:	mov	r1, #4
   12164:	mov	r2, r7
   12168:	bl	17548 <__assert_fail@plt+0x5fec>
   1216c:	mov	r3, r5
   12170:	ldr	r5, [fp, #16]
   12174:	str	r0, [sp]
   12178:	b	12a84 <__assert_fail@plt+0x1528>
   1217c:	ldrb	r0, [r5, #13]
   12180:	mov	r9, #0
   12184:	mov	r6, #1
   12188:	str	r4, [sp, #48]	; 0x30
   1218c:	cmp	r0, #0
   12190:	bne	123c8 <__assert_fail@plt+0xe6c>
   12194:	ldr	r7, [sl, #32]
   12198:	movw	r1, #42178	; 0xa4c2
   1219c:	mov	r9, #0
   121a0:	mov	r0, #0
   121a4:	movt	r1, #1
   121a8:	b	121f0 <__assert_fail@plt+0xc94>
   121ac:	ldr	r0, [sl, #48]	; 0x30
   121b0:	cmp	r0, #0
   121b4:	bne	121c4 <__assert_fail@plt+0xc68>
   121b8:	ldr	r0, [sl, #16]
   121bc:	cmp	r0, #0
   121c0:	beq	12570 <__assert_fail@plt+0x1014>
   121c4:	ldrb	r0, [r5, #13]
   121c8:	mov	r9, #0
   121cc:	mov	r6, #1
   121d0:	str	r4, [sp, #48]	; 0x30
   121d4:	cmp	r0, #0
   121d8:	bne	123c8 <__assert_fail@plt+0xe6c>
   121dc:	ldr	r7, [sl, #32]
   121e0:	movw	r1, #42161	; 0xa4b1
   121e4:	mov	r9, #0
   121e8:	mov	r0, #0
   121ec:	movt	r1, #1
   121f0:	mov	r2, #5
   121f4:	bl	112d4 <dcgettext@plt>
   121f8:	mov	r5, r0
   121fc:	mov	r0, #4
   12200:	mov	r1, r4
   12204:	bl	175f0 <__assert_fail@plt+0x6094>
   12208:	mov	r3, r0
   1220c:	mov	r0, #0
   12210:	mov	r1, r7
   12214:	mov	r2, r5
   12218:	b	123c4 <__assert_fail@plt+0xe68>
   1221c:	ldr	r0, [sp, #52]	; 0x34
   12220:	mov	r1, sl
   12224:	bl	18828 <__assert_fail@plt+0x72cc>
   12228:	cmp	r0, #0
   1222c:	beq	12284 <__assert_fail@plt+0xd28>
   12230:	movw	r1, #42203	; 0xa4db
   12234:	mov	r0, #0
   12238:	mov	r2, #5
   1223c:	mov	r6, r4
   12240:	movt	r1, #1
   12244:	bl	112d4 <dcgettext@plt>
   12248:	mov	r4, r0
   1224c:	mov	r0, #0
   12250:	mov	r1, #3
   12254:	mov	r2, r6
   12258:	bl	17794 <__assert_fail@plt+0x6238>
   1225c:	mov	r3, r0
   12260:	mov	r2, r4
   12264:	mov	r0, #0
   12268:	mov	r1, #0
   1226c:	mov	r4, #0
   12270:	bl	11358 <error@plt>
   12274:	b	12b7c <__assert_fail@plt+0x1620>
   12278:	ldrb	r0, [r5, #4]
   1227c:	cmp	r0, #0
   12280:	beq	123fc <__assert_fail@plt+0xea0>
   12284:	ldr	r0, [sp, #44]	; 0x2c
   12288:	cmn	r0, #1
   1228c:	bne	122a4 <__assert_fail@plt+0xd48>
   12290:	ldr	r0, [r5]
   12294:	cmp	r0, #2
   12298:	ldreq	r0, [r5, #8]
   1229c:	cmpeq	r0, #0
   122a0:	beq	12404 <__assert_fail@plt+0xea8>
   122a4:	ldrb	r0, [r5, #12]
   122a8:	add	r9, sl, #64	; 0x40
   122ac:	cmp	r0, #0
   122b0:	beq	1234c <__assert_fail@plt+0xdf0>
   122b4:	ldr	r0, [sl, #80]	; 0x50
   122b8:	and	r0, r0, #61440	; 0xf000
   122bc:	cmp	r0, #40960	; 0xa000
   122c0:	bne	1234c <__assert_fail@plt+0xdf0>
   122c4:	ldr	r0, [sp, #52]	; 0x34
   122c8:	add	r9, sp, #56	; 0x38
   122cc:	mov	r1, r7
   122d0:	mov	r3, #0
   122d4:	mov	r2, r9
   122d8:	ldr	r0, [r0, #32]
   122dc:	bl	196b4 <__assert_fail@plt+0x8158>
   122e0:	cmp	r0, #0
   122e4:	beq	1234c <__assert_fail@plt+0xdf0>
   122e8:	ldrb	r0, [r5, #13]
   122ec:	str	r4, [sp, #48]	; 0x30
   122f0:	mov	r4, #0
   122f4:	mov	r6, #1
   122f8:	cmp	r0, #0
   122fc:	bne	12344 <__assert_fail@plt+0xde8>
   12300:	bl	11400 <__errno_location@plt>
   12304:	ldr	r4, [r0]
   12308:	movw	r1, #42389	; 0xa595
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	movt	r1, #1
   12318:	bl	112d4 <dcgettext@plt>
   1231c:	ldr	r1, [sp, #48]	; 0x30
   12320:	mov	r5, r0
   12324:	mov	r0, #4
   12328:	bl	175f0 <__assert_fail@plt+0x6094>
   1232c:	mov	r3, r0
   12330:	mov	r1, r4
   12334:	mov	r0, #0
   12338:	mov	r2, r5
   1233c:	mov	r4, #0
   12340:	bl	11358 <error@plt>
   12344:	add	r9, sp, #56	; 0x38
   12348:	b	126a4 <__assert_fail@plt+0x1148>
   1234c:	ldr	r2, [fp, #8]
   12350:	cmn	r2, #1
   12354:	beq	123d4 <__assert_fail@plt+0xe78>
   12358:	ldr	r1, [r9, #24]
   1235c:	ldr	r3, [fp, #12]
   12360:	sub	r0, r1, r2
   12364:	cmn	r3, #1
   12368:	clz	r0, r0
   1236c:	lsr	r0, r0, #5
   12370:	beq	12418 <__assert_fail@plt+0xebc>
   12374:	cmp	r1, r2
   12378:	beq	123e0 <__assert_fail@plt+0xe84>
   1237c:	b	12418 <__assert_fail@plt+0xebc>
   12380:	ldrb	r0, [r5, #13]
   12384:	mov	r9, #0
   12388:	mov	r6, #1
   1238c:	str	r4, [sp, #48]	; 0x30
   12390:	cmp	r0, #0
   12394:	bne	123c8 <__assert_fail@plt+0xe6c>
   12398:	ldr	r5, [sl, #32]
   1239c:	mov	r0, #0
   123a0:	mov	r1, #3
   123a4:	mov	r2, r4
   123a8:	mov	r9, #0
   123ac:	bl	17794 <__assert_fail@plt+0x6238>
   123b0:	movw	r2, #41136	; 0xa0b0
   123b4:	mov	r3, r0
   123b8:	mov	r0, #0
   123bc:	mov	r1, r5
   123c0:	movt	r2, #1
   123c4:	bl	11358 <error@plt>
   123c8:	mov	r5, #1
   123cc:	mov	r4, #0
   123d0:	b	126a8 <__assert_fail@plt+0x114c>
   123d4:	ldr	r0, [fp, #12]
   123d8:	cmn	r0, #1
   123dc:	beq	12414 <__assert_fail@plt+0xeb8>
   123e0:	ldr	r0, [r9, #28]
   123e4:	ldr	r1, [fp, #12]
   123e8:	sub	r0, r0, r1
   123ec:	clz	r0, r0
   123f0:	lsr	r0, r0, #5
   123f4:	b	12418 <__assert_fail@plt+0xebc>
   123f8:	ldr	r5, [fp, #16]
   123fc:	mov	r4, #1
   12400:	b	12b7c <__assert_fail@plt+0x1620>
   12404:	ldrb	r0, [r5, #12]
   12408:	add	r9, sl, #64	; 0x40
   1240c:	cmp	r0, #0
   12410:	bne	122b4 <__assert_fail@plt+0xd58>
   12414:	mov	r0, #1
   12418:	ldrh	r1, [sl, #56]	; 0x38
   1241c:	cmp	r1, #6
   12420:	bhi	1243c <__assert_fail@plt+0xee0>
   12424:	mov	r2, #1
   12428:	mov	r3, #86	; 0x56
   1242c:	tst	r3, r2, lsl r1
   12430:	ldrne	r1, [r5, #8]
   12434:	cmpne	r1, #0
   12438:	bne	1248c <__assert_fail@plt+0xf30>
   1243c:	str	r4, [sp, #48]	; 0x30
   12440:	mov	r4, #1
   12444:	cmp	r0, #0
   12448:	beq	126a0 <__assert_fail@plt+0x1144>
   1244c:	ldr	r0, [sp, #52]	; 0x34
   12450:	ldr	r6, [r0, #32]
   12454:	ldrb	r0, [r5, #12]
   12458:	cmp	r0, #0
   1245c:	beq	12530 <__assert_fail@plt+0xfd4>
   12460:	ldr	r0, [sp, #44]	; 0x2c
   12464:	cmn	r0, #1
   12468:	beq	128c0 <__assert_fail@plt+0x1364>
   1246c:	ldr	r0, [r9, #16]
   12470:	and	r0, r0, #61440	; 0xf000
   12474:	cmp	r0, #32768	; 0x8000
   12478:	beq	12590 <__assert_fail@plt+0x1034>
   1247c:	cmp	r0, #16384	; 0x4000
   12480:	bne	128c0 <__assert_fail@plt+0x1364>
   12484:	mov	r5, #18688	; 0x4900
   12488:	b	12594 <__assert_fail@plt+0x1038>
   1248c:	ldrd	r2, [r1]
   12490:	ldr	r6, [r9, #96]	; 0x60
   12494:	ldr	r5, [r9, #100]	; 0x64
   12498:	eor	r3, r5, r3
   1249c:	ldr	r5, [fp, #16]
   124a0:	eor	r2, r6, r2
   124a4:	orrs	r2, r2, r3
   124a8:	bne	1243c <__assert_fail@plt+0xee0>
   124ac:	ldrd	r2, [r1, #8]
   124b0:	ldr	r6, [r9]
   124b4:	ldr	r1, [r9, #4]
   124b8:	eor	r1, r1, r3
   124bc:	eor	r2, r6, r2
   124c0:	orrs	r1, r2, r1
   124c4:	bne	1243c <__assert_fail@plt+0xee0>
   124c8:	movw	r7, #44151	; 0xac77
   124cc:	mov	r0, r4
   124d0:	movt	r7, #1
   124d4:	mov	r1, r7
   124d8:	bl	1125c <strcmp@plt>
   124dc:	cmp	r0, #0
   124e0:	beq	129dc <__assert_fail@plt+0x1480>
   124e4:	movw	r1, #42054	; 0xa446
   124e8:	mov	r0, #0
   124ec:	mov	r2, #5
   124f0:	movt	r1, #1
   124f4:	bl	112d4 <dcgettext@plt>
   124f8:	mov	r6, r0
   124fc:	mov	r0, #0
   12500:	mov	r1, #4
   12504:	mov	r2, r4
   12508:	bl	17548 <__assert_fail@plt+0x5fec>
   1250c:	mov	r5, r0
   12510:	mov	r0, #1
   12514:	mov	r1, #4
   12518:	mov	r2, r7
   1251c:	bl	17548 <__assert_fail@plt+0x5fec>
   12520:	mov	r3, r5
   12524:	ldr	r5, [fp, #16]
   12528:	str	r0, [sp]
   1252c:	b	12a04 <__assert_fail@plt+0x14a8>
   12530:	ldr	r2, [sp, #40]	; 0x28
   12534:	ldr	r3, [sp, #32]
   12538:	mov	r0, #256	; 0x100
   1253c:	mov	r1, r7
   12540:	str	r0, [sp]
   12544:	mov	r0, r6
   12548:	bl	114d8 <fchownat@plt>
   1254c:	cmp	r0, #0
   12550:	beq	12588 <__assert_fail@plt+0x102c>
   12554:	bl	11400 <__errno_location@plt>
   12558:	ldr	r0, [r0]
   1255c:	mov	r6, #0
   12560:	cmp	r0, #95	; 0x5f
   12564:	bne	128e8 <__assert_fail@plt+0x138c>
   12568:	mov	r5, #0
   1256c:	b	126a8 <__assert_fail@plt+0x114c>
   12570:	ldr	r0, [sp, #52]	; 0x34
   12574:	mov	r4, #1
   12578:	mov	r1, sl
   1257c:	mov	r2, #1
   12580:	str	r4, [sl, #16]
   12584:	b	12b78 <__assert_fail@plt+0x161c>
   12588:	mov	r5, #0
   1258c:	b	12944 <__assert_fail@plt+0x13e8>
   12590:	mov	r5, #2304	; 0x900
   12594:	mov	r0, r6
   12598:	mov	r1, r7
   1259c:	mov	r2, r5
   125a0:	bl	113e8 <openat64@plt>
   125a4:	cmn	r0, #1
   125a8:	ble	12874 <__assert_fail@plt+0x1318>
   125ac:	sub	r1, fp, #136	; 0x88
   125b0:	str	r0, [sp, #36]	; 0x24
   125b4:	bl	19694 <__assert_fail@plt+0x8138>
   125b8:	mov	r6, #6
   125bc:	cmp	r0, #0
   125c0:	bne	1264c <__assert_fail@plt+0x10f0>
   125c4:	ldr	r0, [sp, #8]
   125c8:	ldrd	r2, [r9, #96]	; 0x60
   125cc:	mov	r6, #4
   125d0:	ldrd	r0, [r0]
   125d4:	eor	r1, r3, r1
   125d8:	eor	r0, r2, r0
   125dc:	orrs	r0, r0, r1
   125e0:	bne	1264c <__assert_fail@plt+0x10f0>
   125e4:	ldrd	r0, [r9]
   125e8:	ldr	r2, [fp, #-136]	; 0xffffff78
   125ec:	ldr	r3, [fp, #-132]	; 0xffffff7c
   125f0:	eor	r1, r1, r3
   125f4:	eor	r0, r0, r2
   125f8:	orrs	r0, r0, r1
   125fc:	bne	1264c <__assert_fail@plt+0x10f0>
   12600:	ldr	r1, [fp, #8]
   12604:	mov	r6, #2
   12608:	cmn	r1, #1
   1260c:	ldrne	r0, [fp, #-112]	; 0xffffff90
   12610:	cmpne	r0, r1
   12614:	bne	1264c <__assert_fail@plt+0x10f0>
   12618:	ldr	r0, [fp, #12]
   1261c:	cmn	r0, #1
   12620:	ldrne	r0, [fp, #-108]	; 0xffffff94
   12624:	ldrne	r1, [fp, #12]
   12628:	cmpne	r0, r1
   1262c:	bne	1264c <__assert_fail@plt+0x10f0>
   12630:	ldr	r0, [sp, #36]	; 0x24
   12634:	ldr	r1, [sp, #40]	; 0x28
   12638:	ldr	r2, [sp, #32]
   1263c:	bl	113f4 <fchown@plt>
   12640:	cmp	r0, #0
   12644:	mov	r6, #6
   12648:	beq	12058 <__assert_fail@plt+0xafc>
   1264c:	str	r6, [sp, #28]
   12650:	bl	11400 <__errno_location@plt>
   12654:	mov	r5, r0
   12658:	ldr	r6, [r0]
   1265c:	ldr	r0, [sp, #36]	; 0x24
   12660:	bl	11520 <close@plt>
   12664:	ldr	r0, [sp, #28]
   12668:	str	r6, [r5]
   1266c:	sub	r0, r0, #2
   12670:	cmp	r0, #4
   12674:	bhi	12c2c <__assert_fail@plt+0x16d0>
   12678:	add	r1, pc, #8
   1267c:	mov	r5, #0
   12680:	mov	r6, #1
   12684:	ldr	pc, [r1, r0, lsl #2]
   12688:	andeq	r2, r1, r8, lsr #13
   1268c:	muleq	r1, ip, r6
   12690:	muleq	r1, ip, r6
   12694:	andeq	r2, r1, r0, asr #17
   12698:	andeq	r2, r1, r8, ror #17
   1269c:	mov	r4, #0
   126a0:	mov	r6, #1
   126a4:	mov	r5, #1
   126a8:	ldr	r0, [fp, #16]
   126ac:	ldr	r1, [r0]
   126b0:	cmp	r1, #2
   126b4:	beq	12b5c <__assert_fail@plt+0x1600>
   126b8:	eor	r0, r4, #1
   126bc:	orrs	r0, r5, r0
   126c0:	eorseq	r0, r6, #1
   126c4:	beq	126f8 <__assert_fail@plt+0x119c>
   126c8:	cmp	r1, #0
   126cc:	bne	12b5c <__assert_fail@plt+0x1600>
   126d0:	cmp	r6, #0
   126d4:	mov	r5, #1
   126d8:	mov	r0, #3
   126dc:	movwne	r5, #4
   126e0:	cmp	r4, #0
   126e4:	moveq	r5, r0
   126e8:	cmp	r9, #0
   126ec:	beq	12764 <__assert_fail@plt+0x1208>
   126f0:	ldr	r0, [r9, #24]
   126f4:	b	1274c <__assert_fail@plt+0x11f0>
   126f8:	ldr	r0, [sp, #40]	; 0x28
   126fc:	cmn	r0, #1
   12700:	beq	12714 <__assert_fail@plt+0x11b8>
   12704:	ldr	r0, [r9, #24]
   12708:	ldr	r2, [sp, #40]	; 0x28
   1270c:	cmp	r0, r2
   12710:	bne	12734 <__assert_fail@plt+0x11d8>
   12714:	ldr	r0, [sp, #32]
   12718:	cmn	r0, #1
   1271c:	beq	126c8 <__assert_fail@plt+0x116c>
   12720:	ldr	r0, [r9, #28]
   12724:	ldr	r2, [sp, #32]
   12728:	cmp	r0, r2
   1272c:	beq	126c8 <__assert_fail@plt+0x116c>
   12730:	ldr	r0, [r9, #24]
   12734:	cmp	r6, #0
   12738:	mov	r5, #1
   1273c:	mov	r1, #3
   12740:	movwne	r5, #2
   12744:	cmp	r4, #0
   12748:	moveq	r5, r1
   1274c:	bl	11f68 <__assert_fail@plt+0xa0c>
   12750:	mov	r6, r0
   12754:	ldr	r0, [r9, #28]
   12758:	bl	11f28 <__assert_fail@plt+0x9cc>
   1275c:	mov	r7, r0
   12760:	b	1276c <__assert_fail@plt+0x1210>
   12764:	mov	r6, #0
   12768:	mov	r7, #0
   1276c:	cmp	r5, #1
   12770:	str	r4, [sp, #36]	; 0x24
   12774:	bne	127b4 <__assert_fail@plt+0x1258>
   12778:	movw	r1, #42457	; 0xa5d9
   1277c:	mov	r0, #0
   12780:	mov	r2, #5
   12784:	movt	r1, #1
   12788:	bl	112d4 <dcgettext@plt>
   1278c:	ldr	r1, [sp, #48]	; 0x30
   12790:	mov	r4, r0
   12794:	mov	r0, #4
   12798:	bl	175f0 <__assert_fail@plt+0x6094>
   1279c:	mov	r2, r0
   127a0:	mov	r0, #1
   127a4:	mov	r1, r4
   127a8:	bl	11424 <__printf_chk@plt>
   127ac:	ldr	r4, [sp, #36]	; 0x24
   127b0:	b	12b4c <__assert_fail@plt+0x15f0>
   127b4:	ldr	r0, [fp, #16]
   127b8:	ldr	r9, [r0, #20]
   127bc:	ldr	r4, [r0, #16]
   127c0:	mov	r0, r4
   127c4:	mov	r1, r9
   127c8:	bl	12c30 <__assert_fail@plt+0x16d4>
   127cc:	str	r0, [sp, #16]
   127d0:	cmp	r4, #0
   127d4:	mov	r0, r4
   127d8:	mov	r1, r9
   127dc:	str	r6, [sp, #24]
   127e0:	str	r7, [sp, #20]
   127e4:	movne	r0, r6
   127e8:	cmp	r9, #0
   127ec:	movne	r1, r7
   127f0:	bl	12c30 <__assert_fail@plt+0x16d4>
   127f4:	cmp	r5, #4
   127f8:	beq	1284c <__assert_fail@plt+0x12f0>
   127fc:	cmp	r5, #3
   12800:	beq	12828 <__assert_fail@plt+0x12cc>
   12804:	cmp	r5, #2
   12808:	bne	12c2c <__assert_fail@plt+0x16d0>
   1280c:	cmp	r4, #0
   12810:	str	r0, [sp, #28]
   12814:	beq	1294c <__assert_fail@plt+0x13f0>
   12818:	movw	r1, #42513	; 0xa611
   1281c:	mov	r0, #0
   12820:	movt	r1, #1
   12824:	b	12864 <__assert_fail@plt+0x1308>
   12828:	cmp	r0, #0
   1282c:	beq	12968 <__assert_fail@plt+0x140c>
   12830:	cmp	r4, #0
   12834:	str	r0, [sp, #28]
   12838:	beq	12a40 <__assert_fail@plt+0x14e4>
   1283c:	movw	r1, #42617	; 0xa679
   12840:	mov	r0, #0
   12844:	movt	r1, #1
   12848:	b	12864 <__assert_fail@plt+0x1308>
   1284c:	cmp	r4, #0
   12850:	str	r0, [sp, #28]
   12854:	beq	129c0 <__assert_fail@plt+0x1464>
   12858:	movw	r1, #42819	; 0xa743
   1285c:	mov	r0, #0
   12860:	movt	r1, #1
   12864:	mov	r2, #5
   12868:	bl	112d4 <dcgettext@plt>
   1286c:	ldr	r4, [sp, #36]	; 0x24
   12870:	b	12b04 <__assert_fail@plt+0x15a8>
   12874:	bl	11400 <__errno_location@plt>
   12878:	ldr	r1, [r0]
   1287c:	cmp	r1, #13
   12880:	bne	128e8 <__assert_fail@plt+0x138c>
   12884:	ldr	r1, [r9, #16]
   12888:	and	r1, r1, #61440	; 0xf000
   1288c:	cmp	r1, #32768	; 0x8000
   12890:	bne	128c0 <__assert_fail@plt+0x1364>
   12894:	str	r0, [sp, #36]	; 0x24
   12898:	orr	r2, r5, #1
   1289c:	mov	r0, r6
   128a0:	mov	r1, r7
   128a4:	bl	113e8 <openat64@plt>
   128a8:	cmn	r0, #1
   128ac:	bgt	125ac <__assert_fail@plt+0x1050>
   128b0:	ldr	r0, [sp, #36]	; 0x24
   128b4:	ldr	r0, [r0]
   128b8:	cmp	r0, #13
   128bc:	bne	128e8 <__assert_fail@plt+0x138c>
   128c0:	ldr	r0, [sp, #52]	; 0x34
   128c4:	ldr	r2, [sp, #40]	; 0x28
   128c8:	ldr	r3, [sp, #32]
   128cc:	mov	r5, #0
   128d0:	mov	r1, r7
   128d4:	str	r5, [sp]
   128d8:	ldr	r0, [r0, #32]
   128dc:	bl	114d8 <fchownat@plt>
   128e0:	cmp	r0, #0
   128e4:	beq	12944 <__assert_fail@plt+0x13e8>
   128e8:	ldr	r0, [fp, #16]
   128ec:	mov	r5, #0
   128f0:	ldrb	r0, [r0, #13]
   128f4:	cmp	r0, #0
   128f8:	bne	1293c <__assert_fail@plt+0x13e0>
   128fc:	bl	11400 <__errno_location@plt>
   12900:	ldr	r1, [sp, #12]
   12904:	ldr	r4, [r0]
   12908:	mov	r0, #0
   1290c:	mov	r2, #5
   12910:	mov	r5, #0
   12914:	bl	112d4 <dcgettext@plt>
   12918:	ldr	r1, [sp, #48]	; 0x30
   1291c:	mov	r6, r0
   12920:	mov	r0, #4
   12924:	bl	175f0 <__assert_fail@plt+0x6094>
   12928:	mov	r3, r0
   1292c:	mov	r0, #0
   12930:	mov	r1, r4
   12934:	mov	r2, r6
   12938:	bl	11358 <error@plt>
   1293c:	mov	r6, #1
   12940:	b	123cc <__assert_fail@plt+0xe70>
   12944:	mov	r6, #1
   12948:	b	126a8 <__assert_fail@plt+0x114c>
   1294c:	ldr	r4, [sp, #36]	; 0x24
   12950:	cmp	r9, #0
   12954:	mov	r0, #0
   12958:	beq	12adc <__assert_fail@plt+0x1580>
   1295c:	movw	r1, #42552	; 0xa638
   12960:	movt	r1, #1
   12964:	b	12afc <__assert_fail@plt+0x15a0>
   12968:	movw	r1, #42709	; 0xa6d5
   1296c:	movw	r0, #42783	; 0xa71f
   12970:	cmp	r9, #0
   12974:	mov	r2, #5
   12978:	movt	r1, #1
   1297c:	movt	r0, #1
   12980:	movne	r1, r0
   12984:	movw	r0, #42743	; 0xa6f7
   12988:	cmp	r4, #0
   1298c:	movt	r0, #1
   12990:	movne	r1, r0
   12994:	mov	r0, #0
   12998:	bl	112d4 <dcgettext@plt>
   1299c:	mov	r6, r0
   129a0:	mov	r0, #0
   129a4:	bl	12dc4 <__assert_fail@plt+0x1868>
   129a8:	ldr	r0, [sp, #16]
   129ac:	ldr	r4, [sp, #36]	; 0x24
   129b0:	ldr	r7, [sp, #20]
   129b4:	mov	r5, #0
   129b8:	str	r0, [sp, #28]
   129bc:	b	12b10 <__assert_fail@plt+0x15b4>
   129c0:	ldr	r4, [sp, #36]	; 0x24
   129c4:	cmp	r9, #0
   129c8:	mov	r0, #0
   129cc:	beq	12ae8 <__assert_fail@plt+0x158c>
   129d0:	movw	r1, #42851	; 0xa763
   129d4:	movt	r1, #1
   129d8:	b	12afc <__assert_fail@plt+0x15a0>
   129dc:	movw	r1, #42009	; 0xa419
   129e0:	mov	r0, #0
   129e4:	mov	r2, #5
   129e8:	movt	r1, #1
   129ec:	bl	112d4 <dcgettext@plt>
   129f0:	mov	r6, r0
   129f4:	mov	r0, #4
   129f8:	mov	r1, r4
   129fc:	bl	175f0 <__assert_fail@plt+0x6094>
   12a00:	mov	r3, r0
   12a04:	mov	r0, #0
   12a08:	mov	r1, #0
   12a0c:	mov	r2, r6
   12a10:	bl	11358 <error@plt>
   12a14:	movw	r1, #42112	; 0xa480
   12a18:	mov	r0, #0
   12a1c:	mov	r2, #5
   12a20:	mov	r4, #0
   12a24:	movt	r1, #1
   12a28:	bl	112d4 <dcgettext@plt>
   12a2c:	mov	r2, r0
   12a30:	mov	r0, #0
   12a34:	mov	r1, #0
   12a38:	bl	11358 <error@plt>
   12a3c:	b	12b7c <__assert_fail@plt+0x1620>
   12a40:	ldr	r4, [sp, #36]	; 0x24
   12a44:	cmp	r9, #0
   12a48:	mov	r0, #0
   12a4c:	beq	12af4 <__assert_fail@plt+0x1598>
   12a50:	movw	r1, #42665	; 0xa6a9
   12a54:	movt	r1, #1
   12a58:	b	12afc <__assert_fail@plt+0x15a0>
   12a5c:	movw	r1, #42009	; 0xa419
   12a60:	mov	r0, #0
   12a64:	mov	r2, #5
   12a68:	movt	r1, #1
   12a6c:	bl	112d4 <dcgettext@plt>
   12a70:	mov	r6, r0
   12a74:	mov	r0, #4
   12a78:	mov	r1, r4
   12a7c:	bl	175f0 <__assert_fail@plt+0x6094>
   12a80:	mov	r3, r0
   12a84:	mov	r0, #0
   12a88:	mov	r1, #0
   12a8c:	mov	r2, r6
   12a90:	bl	11358 <error@plt>
   12a94:	movw	r1, #42112	; 0xa480
   12a98:	mov	r0, #0
   12a9c:	mov	r2, #5
   12aa0:	movt	r1, #1
   12aa4:	bl	112d4 <dcgettext@plt>
   12aa8:	mov	r2, r0
   12aac:	mov	r0, #0
   12ab0:	mov	r1, #0
   12ab4:	bl	11358 <error@plt>
   12ab8:	ldr	r4, [sp, #52]	; 0x34
   12abc:	mov	r1, sl
   12ac0:	mov	r2, #4
   12ac4:	mov	r0, r4
   12ac8:	bl	14a68 <__assert_fail@plt+0x350c>
   12acc:	mov	r0, r4
   12ad0:	mov	r4, #0
   12ad4:	bl	136a4 <__assert_fail@plt+0x2148>
   12ad8:	b	12b7c <__assert_fail@plt+0x1620>
   12adc:	movw	r1, #42587	; 0xa65b
   12ae0:	movt	r1, #1
   12ae4:	b	12afc <__assert_fail@plt+0x15a0>
   12ae8:	movw	r1, #42879	; 0xa77f
   12aec:	movt	r1, #1
   12af0:	b	12afc <__assert_fail@plt+0x15a0>
   12af4:	movw	r1, #42709	; 0xa6d5
   12af8:	movt	r1, #1
   12afc:	mov	r2, #5
   12b00:	bl	112d4 <dcgettext@plt>
   12b04:	mov	r6, r0
   12b08:	ldr	r7, [sp, #20]
   12b0c:	ldr	r5, [sp, #16]
   12b10:	ldr	r1, [sp, #48]	; 0x30
   12b14:	mov	r0, #4
   12b18:	bl	175f0 <__assert_fail@plt+0x6094>
   12b1c:	mov	r1, r6
   12b20:	ldr	r6, [sp, #28]
   12b24:	mov	r2, r0
   12b28:	mov	r0, #1
   12b2c:	str	r5, [sp]
   12b30:	mov	r3, r6
   12b34:	bl	11424 <__printf_chk@plt>
   12b38:	mov	r0, r6
   12b3c:	bl	12dc4 <__assert_fail@plt+0x1868>
   12b40:	mov	r0, r5
   12b44:	bl	12dc4 <__assert_fail@plt+0x1868>
   12b48:	ldr	r6, [sp, #24]
   12b4c:	mov	r0, r6
   12b50:	bl	12dc4 <__assert_fail@plt+0x1868>
   12b54:	mov	r0, r7
   12b58:	bl	12dc4 <__assert_fail@plt+0x1868>
   12b5c:	ldr	r5, [fp, #16]
   12b60:	ldrb	r0, [r5, #4]
   12b64:	cmp	r0, #0
   12b68:	bne	12b7c <__assert_fail@plt+0x1620>
   12b6c:	ldr	r0, [sp, #52]	; 0x34
   12b70:	mov	r1, sl
   12b74:	mov	r2, #4
   12b78:	bl	14a68 <__assert_fail@plt+0x350c>
   12b7c:	ldr	r0, [sp, #52]	; 0x34
   12b80:	and	r8, r8, r4
   12b84:	bl	136a4 <__assert_fail@plt+0x2148>
   12b88:	mov	sl, r0
   12b8c:	cmp	r0, #0
   12b90:	bne	12070 <__assert_fail@plt+0xb14>
   12b94:	bl	11400 <__errno_location@plt>
   12b98:	ldr	r4, [r0]
   12b9c:	mov	r5, r0
   12ba0:	cmp	r4, #0
   12ba4:	beq	12be4 <__assert_fail@plt+0x1688>
   12ba8:	ldr	r0, [fp, #16]
   12bac:	mov	r8, #0
   12bb0:	ldrb	r0, [r0, #13]
   12bb4:	cmp	r0, #0
   12bb8:	bne	12be4 <__assert_fail@plt+0x1688>
   12bbc:	movw	r1, #41976	; 0xa3f8
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	mov	r8, #0
   12bcc:	movt	r1, #1
   12bd0:	bl	112d4 <dcgettext@plt>
   12bd4:	mov	r2, r0
   12bd8:	mov	r0, #0
   12bdc:	mov	r1, r4
   12be0:	bl	11358 <error@plt>
   12be4:	ldr	r0, [sp, #52]	; 0x34
   12be8:	bl	13524 <__assert_fail@plt+0x1fc8>
   12bec:	cmp	r0, #0
   12bf0:	beq	12c20 <__assert_fail@plt+0x16c4>
   12bf4:	ldr	r4, [r5]
   12bf8:	movw	r1, #41992	; 0xa408
   12bfc:	mov	r0, #0
   12c00:	mov	r2, #5
   12c04:	mov	r8, #0
   12c08:	movt	r1, #1
   12c0c:	bl	112d4 <dcgettext@plt>
   12c10:	mov	r2, r0
   12c14:	mov	r0, #0
   12c18:	mov	r1, r4
   12c1c:	bl	11358 <error@plt>
   12c20:	mov	r0, r8
   12c24:	sub	sp, fp, #28
   12c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c2c:	bl	11514 <abort@plt>
   12c30:	push	{r4, r5, r6, sl, fp, lr}
   12c34:	add	fp, sp, #16
   12c38:	mov	r4, r1
   12c3c:	cmp	r0, #0
   12c40:	beq	12c90 <__assert_fail@plt+0x1734>
   12c44:	mov	r5, r0
   12c48:	cmp	r4, #0
   12c4c:	beq	12ca0 <__assert_fail@plt+0x1744>
   12c50:	mov	r0, r5
   12c54:	bl	113d0 <strlen@plt>
   12c58:	mov	r6, r0
   12c5c:	mov	r0, r4
   12c60:	bl	113d0 <strlen@plt>
   12c64:	add	r0, r6, r0
   12c68:	add	r0, r0, #2
   12c6c:	bl	18348 <__assert_fail@plt+0x6dec>
   12c70:	mov	r1, r5
   12c74:	mov	r6, r0
   12c78:	bl	112c8 <stpcpy@plt>
   12c7c:	mov	r1, #58	; 0x3a
   12c80:	strh	r1, [r0], #1
   12c84:	mov	r1, r4
   12c88:	bl	112c8 <stpcpy@plt>
   12c8c:	b	12cb4 <__assert_fail@plt+0x1758>
   12c90:	cmp	r4, #0
   12c94:	beq	12cb0 <__assert_fail@plt+0x1754>
   12c98:	mov	r0, r4
   12c9c:	b	12ca4 <__assert_fail@plt+0x1748>
   12ca0:	mov	r0, r5
   12ca4:	bl	18758 <__assert_fail@plt+0x71fc>
   12ca8:	mov	r6, r0
   12cac:	b	12cb4 <__assert_fail@plt+0x1758>
   12cb0:	mov	r6, #0
   12cb4:	mov	r0, r6
   12cb8:	pop	{r4, r5, r6, sl, fp, pc}
   12cbc:	movw	r1, #45496	; 0xb1b8
   12cc0:	movt	r1, #2
   12cc4:	str	r0, [r1]
   12cc8:	bx	lr
   12ccc:	movw	r1, #45500	; 0xb1bc
   12cd0:	movt	r1, #2
   12cd4:	strb	r0, [r1]
   12cd8:	bx	lr
   12cdc:	push	{r4, r5, r6, sl, fp, lr}
   12ce0:	add	fp, sp, #16
   12ce4:	sub	sp, sp, #8
   12ce8:	movw	r0, #45460	; 0xb194
   12cec:	movt	r0, #2
   12cf0:	ldr	r0, [r0]
   12cf4:	bl	18d94 <__assert_fail@plt+0x7838>
   12cf8:	cmp	r0, #0
   12cfc:	beq	12d24 <__assert_fail@plt+0x17c8>
   12d00:	movw	r0, #45500	; 0xb1bc
   12d04:	movt	r0, #2
   12d08:	ldrb	r0, [r0]
   12d0c:	cmp	r0, #0
   12d10:	beq	12d44 <__assert_fail@plt+0x17e8>
   12d14:	bl	11400 <__errno_location@plt>
   12d18:	ldr	r0, [r0]
   12d1c:	cmp	r0, #32
   12d20:	bne	12d44 <__assert_fail@plt+0x17e8>
   12d24:	movw	r0, #45456	; 0xb190
   12d28:	movt	r0, #2
   12d2c:	ldr	r0, [r0]
   12d30:	bl	18d94 <__assert_fail@plt+0x7838>
   12d34:	cmp	r0, #0
   12d38:	subeq	sp, fp, #16
   12d3c:	popeq	{r4, r5, r6, sl, fp, pc}
   12d40:	b	12db4 <__assert_fail@plt+0x1858>
   12d44:	movw	r1, #42920	; 0xa7a8
   12d48:	mov	r0, #0
   12d4c:	mov	r2, #5
   12d50:	movt	r1, #1
   12d54:	bl	112d4 <dcgettext@plt>
   12d58:	mov	r4, r0
   12d5c:	movw	r0, #45496	; 0xb1b8
   12d60:	movt	r0, #2
   12d64:	ldr	r6, [r0]
   12d68:	bl	11400 <__errno_location@plt>
   12d6c:	ldr	r5, [r0]
   12d70:	cmp	r6, #0
   12d74:	bne	12d90 <__assert_fail@plt+0x1834>
   12d78:	movw	r2, #41136	; 0xa0b0
   12d7c:	mov	r0, #0
   12d80:	mov	r1, r5
   12d84:	mov	r3, r4
   12d88:	movt	r2, #1
   12d8c:	b	12db0 <__assert_fail@plt+0x1854>
   12d90:	mov	r0, r6
   12d94:	bl	176e8 <__assert_fail@plt+0x618c>
   12d98:	movw	r2, #41132	; 0xa0ac
   12d9c:	mov	r3, r0
   12da0:	str	r4, [sp]
   12da4:	mov	r0, #0
   12da8:	mov	r1, r5
   12dac:	movt	r2, #1
   12db0:	bl	11358 <error@plt>
   12db4:	movw	r0, #45372	; 0xb13c
   12db8:	movt	r0, #2
   12dbc:	ldr	r0, [r0]
   12dc0:	bl	11298 <_exit@plt>
   12dc4:	push	{r4, r5, r6, sl, fp, lr}
   12dc8:	add	fp, sp, #16
   12dcc:	mov	r4, r0
   12dd0:	bl	11400 <__errno_location@plt>
   12dd4:	ldr	r6, [r0]
   12dd8:	mov	r5, r0
   12ddc:	mov	r0, r4
   12de0:	bl	1128c <free@plt>
   12de4:	str	r6, [r5]
   12de8:	pop	{r4, r5, r6, sl, fp, pc}
   12dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df0:	add	fp, sp, #28
   12df4:	sub	sp, sp, #12
   12df8:	cmp	r1, #4096	; 0x1000
   12dfc:	bcs	12e18 <__assert_fail@plt+0x18bc>
   12e00:	mov	r6, r0
   12e04:	and	r0, r1, #516	; 0x204
   12e08:	mov	r5, r1
   12e0c:	cmp	r0, #516	; 0x204
   12e10:	tstne	r5, #18
   12e14:	bne	12e34 <__assert_fail@plt+0x18d8>
   12e18:	bl	11400 <__errno_location@plt>
   12e1c:	mov	r1, #22
   12e20:	str	r1, [r0]
   12e24:	mov	r8, #0
   12e28:	mov	r0, r8
   12e2c:	sub	sp, fp, #28
   12e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e34:	mov	r0, #1
   12e38:	mov	r1, #96	; 0x60
   12e3c:	mov	r9, r2
   12e40:	bl	18cc0 <__assert_fail@plt+0x7764>
   12e44:	cmp	r0, #0
   12e48:	beq	12e24 <__assert_fail@plt+0x18c8>
   12e4c:	mov	r8, r0
   12e50:	mvn	r0, #99	; 0x63
   12e54:	tst	r5, #2
   12e58:	mov	r1, r5
   12e5c:	str	r0, [r8, #32]
   12e60:	bic	r0, r5, #516	; 0x204
   12e64:	str	r9, [r8, #44]	; 0x2c
   12e68:	orrne	r1, r0, #4
   12e6c:	str	r1, [r8, #48]	; 0x30
   12e70:	ldr	r0, [r6]
   12e74:	cmp	r0, #0
   12e78:	beq	12eac <__assert_fail@plt+0x1950>
   12e7c:	add	r4, r6, #4
   12e80:	mov	r7, #0
   12e84:	bl	113d0 <strlen@plt>
   12e88:	cmp	r0, r7
   12e8c:	movhi	r7, r0
   12e90:	ldr	r0, [r4], #4
   12e94:	cmp	r0, #0
   12e98:	bne	12e84 <__assert_fail@plt+0x1928>
   12e9c:	add	r1, r7, #1
   12ea0:	cmp	r1, #4096	; 0x1000
   12ea4:	movls	r1, #4096	; 0x1000
   12ea8:	b	12eb0 <__assert_fail@plt+0x1954>
   12eac:	mov	r1, #4096	; 0x1000
   12eb0:	mov	r0, r8
   12eb4:	bl	13108 <__assert_fail@plt+0x1bac>
   12eb8:	cmp	r0, #0
   12ebc:	beq	130fc <__assert_fail@plt+0x1ba0>
   12ec0:	ldr	r0, [r6]
   12ec4:	cmp	r0, #0
   12ec8:	beq	12ef8 <__assert_fail@plt+0x199c>
   12ecc:	movw	r1, #40600	; 0x9e98
   12ed0:	mov	r0, r8
   12ed4:	mov	r2, #0
   12ed8:	movt	r1, #1
   12edc:	bl	1317c <__assert_fail@plt+0x1c20>
   12ee0:	cmp	r0, #0
   12ee4:	beq	130f4 <__assert_fail@plt+0x1b98>
   12ee8:	mov	r4, r0
   12eec:	mvn	r0, #0
   12ef0:	str	r0, [r4, #48]	; 0x30
   12ef4:	b	12efc <__assert_fail@plt+0x19a0>
   12ef8:	mov	r4, #0
   12efc:	cmp	r9, #0
   12f00:	ldrbne	r0, [r8, #49]	; 0x31
   12f04:	ubfxne	r0, r0, #2, #1
   12f08:	ldr	r7, [r6]
   12f0c:	moveq	r0, #1
   12f10:	cmp	r7, #0
   12f14:	beq	13034 <__assert_fail@plt+0x1ad8>
   12f18:	eor	r0, r0, #1
   12f1c:	and	r1, r5, #2048	; 0x800
   12f20:	mov	sl, #0
   12f24:	mov	r5, #0
   12f28:	str	r0, [sp, #4]
   12f2c:	mov	r0, #0
   12f30:	str	r1, [sp, #8]
   12f34:	str	r0, [sp]
   12f38:	mov	r0, r7
   12f3c:	bl	113d0 <strlen@plt>
   12f40:	mov	r2, r0
   12f44:	ldr	r0, [sp, #8]
   12f48:	cmp	r0, #0
   12f4c:	bne	12f84 <__assert_fail@plt+0x1a28>
   12f50:	cmp	r2, #3
   12f54:	bcc	12f84 <__assert_fail@plt+0x1a28>
   12f58:	add	r0, r7, r2
   12f5c:	ldrb	r0, [r0, #-1]
   12f60:	cmp	r0, #47	; 0x2f
   12f64:	bne	12f84 <__assert_fail@plt+0x1a28>
   12f68:	sub	r0, r7, #2
   12f6c:	ldrb	r1, [r0, r2]
   12f70:	cmp	r1, #47	; 0x2f
   12f74:	bne	12f84 <__assert_fail@plt+0x1a28>
   12f78:	sub	r2, r2, #1
   12f7c:	cmp	r2, #1
   12f80:	bhi	12f6c <__assert_fail@plt+0x1a10>
   12f84:	mov	r0, r8
   12f88:	mov	r1, r7
   12f8c:	bl	1317c <__assert_fail@plt+0x1c20>
   12f90:	cmp	r0, #0
   12f94:	beq	130e4 <__assert_fail@plt+0x1b88>
   12f98:	mov	r1, #0
   12f9c:	ldr	r2, [sp, #4]
   12fa0:	str	r4, [r0, #4]
   12fa4:	mov	r7, r0
   12fa8:	str	r1, [r0, #48]	; 0x30
   12fac:	add	r0, r0, #168	; 0xa8
   12fb0:	str	r0, [r7, #24]
   12fb4:	clz	r0, sl
   12fb8:	lsr	r0, r0, #5
   12fbc:	orrs	r0, r2, r0
   12fc0:	bne	12fd4 <__assert_fail@plt+0x1a78>
   12fc4:	mov	r0, #2
   12fc8:	strd	r0, [r7, #112]	; 0x70
   12fcc:	mov	r0, #11
   12fd0:	b	12fe8 <__assert_fail@plt+0x1a8c>
   12fd4:	mov	r0, r8
   12fd8:	mov	r1, r7
   12fdc:	mov	r2, #0
   12fe0:	bl	131fc <__assert_fail@plt+0x1ca0>
   12fe4:	mov	r1, #0
   12fe8:	cmp	r9, #0
   12fec:	strh	r0, [r7, #56]	; 0x38
   12ff0:	beq	13000 <__assert_fail@plt+0x1aa4>
   12ff4:	str	sl, [r7, #8]
   12ff8:	mov	sl, r7
   12ffc:	b	13018 <__assert_fail@plt+0x1abc>
   13000:	cmp	sl, #0
   13004:	str	r1, [r7, #8]
   13008:	beq	1302c <__assert_fail@plt+0x1ad0>
   1300c:	ldr	r0, [sp]
   13010:	str	r7, [sp]
   13014:	str	r7, [r0, #8]
   13018:	ldr	r7, [r6, #4]!
   1301c:	add	r5, r5, #1
   13020:	cmp	r7, #0
   13024:	bne	12f38 <__assert_fail@plt+0x19dc>
   13028:	b	1303c <__assert_fail@plt+0x1ae0>
   1302c:	str	r7, [sp]
   13030:	b	12ff8 <__assert_fail@plt+0x1a9c>
   13034:	mov	sl, #0
   13038:	b	13060 <__assert_fail@plt+0x1b04>
   1303c:	cmp	r9, #0
   13040:	beq	13060 <__assert_fail@plt+0x1b04>
   13044:	cmp	r5, #2
   13048:	bcc	13060 <__assert_fail@plt+0x1b04>
   1304c:	mov	r0, r8
   13050:	mov	r1, sl
   13054:	mov	r2, r5
   13058:	bl	13330 <__assert_fail@plt+0x1dd4>
   1305c:	mov	sl, r0
   13060:	movw	r1, #40600	; 0x9e98
   13064:	mov	r0, r8
   13068:	mov	r2, #0
   1306c:	movt	r1, #1
   13070:	bl	1317c <__assert_fail@plt+0x1c20>
   13074:	cmp	r0, #0
   13078:	str	r0, [r8]
   1307c:	beq	130e4 <__assert_fail@plt+0x1b88>
   13080:	mov	r1, #9
   13084:	strh	r1, [r0, #56]	; 0x38
   13088:	mov	r1, #1
   1308c:	str	sl, [r0, #8]
   13090:	str	r1, [r0, #48]	; 0x30
   13094:	mov	r0, r8
   13098:	bl	13428 <__assert_fail@plt+0x1ecc>
   1309c:	cmp	r0, #0
   130a0:	beq	130e4 <__assert_fail@plt+0x1b88>
   130a4:	ldrh	r0, [r8, #48]	; 0x30
   130a8:	tst	r0, #516	; 0x204
   130ac:	bne	130d4 <__assert_fail@plt+0x1b78>
   130b0:	movw	r1, #42933	; 0xa7b5
   130b4:	mov	r0, r8
   130b8:	movt	r1, #1
   130bc:	bl	134b4 <__assert_fail@plt+0x1f58>
   130c0:	str	r0, [r8, #28]
   130c4:	cmn	r0, #1
   130c8:	ldrle	r0, [r8, #48]	; 0x30
   130cc:	orrle	r0, r0, #4
   130d0:	strle	r0, [r8, #48]	; 0x30
   130d4:	add	r0, r8, #60	; 0x3c
   130d8:	mvn	r1, #0
   130dc:	bl	15d48 <__assert_fail@plt+0x47ec>
   130e0:	b	12e28 <__assert_fail@plt+0x18cc>
   130e4:	mov	r0, sl
   130e8:	bl	134e4 <__assert_fail@plt+0x1f88>
   130ec:	mov	r0, r4
   130f0:	bl	12dc4 <__assert_fail@plt+0x1868>
   130f4:	ldr	r0, [r8, #24]
   130f8:	bl	12dc4 <__assert_fail@plt+0x1868>
   130fc:	mov	r0, r8
   13100:	bl	12dc4 <__assert_fail@plt+0x1868>
   13104:	b	12e24 <__assert_fail@plt+0x18c8>
   13108:	push	{r4, r5, fp, lr}
   1310c:	add	fp, sp, #8
   13110:	mov	r4, r0
   13114:	ldr	r0, [r0, #36]	; 0x24
   13118:	add	r1, r1, #256	; 0x100
   1311c:	adds	r1, r1, r0
   13120:	bcc	13144 <__assert_fail@plt+0x1be8>
   13124:	ldr	r0, [r4, #24]
   13128:	bl	12dc4 <__assert_fail@plt+0x1868>
   1312c:	mov	r5, #0
   13130:	str	r5, [r4, #24]
   13134:	bl	11400 <__errno_location@plt>
   13138:	mov	r1, #36	; 0x24
   1313c:	str	r1, [r0]
   13140:	b	13174 <__assert_fail@plt+0x1c18>
   13144:	str	r1, [r4, #36]	; 0x24
   13148:	ldr	r0, [r4, #24]
   1314c:	bl	18d44 <__assert_fail@plt+0x77e8>
   13150:	cmp	r0, #0
   13154:	beq	13164 <__assert_fail@plt+0x1c08>
   13158:	mov	r5, #1
   1315c:	str	r0, [r4, #24]
   13160:	b	13174 <__assert_fail@plt+0x1c18>
   13164:	ldr	r0, [r4, #24]
   13168:	bl	12dc4 <__assert_fail@plt+0x1868>
   1316c:	mov	r5, #0
   13170:	str	r5, [r4, #24]
   13174:	mov	r0, r5
   13178:	pop	{r4, r5, fp, pc}
   1317c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13180:	add	fp, sp, #24
   13184:	mov	r5, r0
   13188:	add	r0, r2, #176	; 0xb0
   1318c:	mov	r6, r2
   13190:	mov	r8, r1
   13194:	bic	r0, r0, #7
   13198:	bl	18d14 <__assert_fail@plt+0x77b8>
   1319c:	cmp	r0, #0
   131a0:	beq	131f0 <__assert_fail@plt+0x1c94>
   131a4:	add	r7, r0, #168	; 0xa8
   131a8:	mov	r4, r0
   131ac:	mov	r1, r8
   131b0:	mov	r2, r6
   131b4:	mov	r0, r7
   131b8:	bl	112a4 <memcpy@plt>
   131bc:	mov	r0, #0
   131c0:	mov	r2, #196608	; 0x30000
   131c4:	strb	r0, [r7, r6]
   131c8:	str	r6, [r4, #52]	; 0x34
   131cc:	str	r5, [r4, #44]	; 0x2c
   131d0:	ldr	r1, [r5, #24]
   131d4:	str	r2, [r4, #58]	; 0x3a
   131d8:	str	r0, [r4, #12]
   131dc:	str	r0, [r4, #16]
   131e0:	str	r0, [r4, #20]
   131e4:	str	r1, [r4, #28]
   131e8:	str	r0, [r4, #32]
   131ec:	b	131f4 <__assert_fail@plt+0x1c98>
   131f0:	mov	r4, #0
   131f4:	mov	r0, r4
   131f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131fc:	push	{r4, r5, r6, sl, fp, lr}
   13200:	add	fp, sp, #16
   13204:	mov	r4, r1
   13208:	ldr	r1, [r0, #48]	; 0x30
   1320c:	ldr	r3, [r4, #48]	; 0x30
   13210:	add	r5, r4, #64	; 0x40
   13214:	cmp	r3, #0
   13218:	andeq	r3, r1, #1
   1321c:	orreq	r2, r3, r2
   13220:	cmp	r2, #0
   13224:	andseq	r1, r1, #2
   13228:	beq	13278 <__assert_fail@plt+0x1d1c>
   1322c:	ldr	r0, [r4, #24]
   13230:	mov	r1, r5
   13234:	bl	19684 <__assert_fail@plt+0x8128>
   13238:	cmp	r0, #0
   1323c:	beq	132bc <__assert_fail@plt+0x1d60>
   13240:	bl	11400 <__errno_location@plt>
   13244:	mov	r6, r0
   13248:	ldr	r0, [r0]
   1324c:	cmp	r0, #2
   13250:	bne	132a0 <__assert_fail@plt+0x1d44>
   13254:	ldr	r0, [r4, #24]
   13258:	mov	r1, r5
   1325c:	bl	196a4 <__assert_fail@plt+0x8148>
   13260:	cmp	r0, #0
   13264:	bne	1329c <__assert_fail@plt+0x1d40>
   13268:	mov	r0, #0
   1326c:	str	r0, [r6]
   13270:	mov	r0, #13
   13274:	pop	{r4, r5, r6, sl, fp, pc}
   13278:	ldr	r1, [r4, #24]
   1327c:	ldr	r0, [r0, #32]
   13280:	mov	r2, r5
   13284:	mov	r3, #256	; 0x100
   13288:	bl	196b4 <__assert_fail@plt+0x8158>
   1328c:	cmp	r0, #0
   13290:	beq	132bc <__assert_fail@plt+0x1d60>
   13294:	bl	11400 <__errno_location@plt>
   13298:	mov	r6, r0
   1329c:	ldr	r0, [r6]
   132a0:	str	r0, [r4, #32]
   132a4:	mov	r0, r5
   132a8:	mov	r1, #0
   132ac:	mov	r2, #104	; 0x68
   132b0:	bl	11418 <memset@plt>
   132b4:	mov	r0, #10
   132b8:	pop	{r4, r5, r6, sl, fp, pc}
   132bc:	ldr	r0, [r4, #80]	; 0x50
   132c0:	and	r0, r0, #61440	; 0xf000
   132c4:	cmp	r0, #40960	; 0xa000
   132c8:	moveq	r0, #12
   132cc:	popeq	{r4, r5, r6, sl, fp, pc}
   132d0:	cmp	r0, #32768	; 0x8000
   132d4:	moveq	r0, #8
   132d8:	popeq	{r4, r5, r6, sl, fp, pc}
   132dc:	cmp	r0, #16384	; 0x4000
   132e0:	bne	13314 <__assert_fail@plt+0x1db8>
   132e4:	ldrb	r1, [r4, #168]	; 0xa8
   132e8:	mov	r0, #1
   132ec:	cmp	r1, #46	; 0x2e
   132f0:	popne	{r4, r5, r6, sl, fp, pc}
   132f4:	ldrb	r1, [r4, #169]	; 0xa9
   132f8:	cmp	r1, #0
   132fc:	beq	1331c <__assert_fail@plt+0x1dc0>
   13300:	cmp	r1, #46	; 0x2e
   13304:	ldrbeq	r1, [r4, #170]	; 0xaa
   13308:	cmpeq	r1, #0
   1330c:	beq	1331c <__assert_fail@plt+0x1dc0>
   13310:	pop	{r4, r5, r6, sl, fp, pc}
   13314:	mov	r0, #3
   13318:	pop	{r4, r5, r6, sl, fp, pc}
   1331c:	ldr	r1, [r4, #48]	; 0x30
   13320:	mov	r0, #5
   13324:	cmp	r1, #0
   13328:	movweq	r0, #1
   1332c:	pop	{r4, r5, r6, sl, fp, pc}
   13330:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13334:	add	fp, sp, #24
   13338:	ldrd	r8, [r0, #40]	; 0x28
   1333c:	mov	r5, r2
   13340:	mov	r4, r1
   13344:	mov	r6, r0
   13348:	cmp	r8, r2
   1334c:	bcs	13384 <__assert_fail@plt+0x1e28>
   13350:	add	r1, r5, #40	; 0x28
   13354:	cmn	r1, #-1073741823	; 0xc0000001
   13358:	str	r1, [r6, #40]	; 0x28
   1335c:	bhi	1340c <__assert_fail@plt+0x1eb0>
   13360:	add	r7, r6, #8
   13364:	lsl	r1, r1, #2
   13368:	ldr	r0, [r7]
   1336c:	bl	18d44 <__assert_fail@plt+0x77e8>
   13370:	cmp	r0, #0
   13374:	beq	1340c <__assert_fail@plt+0x1eb0>
   13378:	mov	r6, r7
   1337c:	str	r0, [r7]
   13380:	b	13388 <__assert_fail@plt+0x1e2c>
   13384:	ldr	r0, [r6, #8]!
   13388:	cmp	r4, #0
   1338c:	beq	133a4 <__assert_fail@plt+0x1e48>
   13390:	str	r4, [r0], #4
   13394:	ldr	r4, [r4, #8]
   13398:	cmp	r4, #0
   1339c:	bne	13390 <__assert_fail@plt+0x1e34>
   133a0:	ldr	r0, [r6]
   133a4:	mov	r1, r5
   133a8:	mov	r2, #4
   133ac:	mov	r3, r9
   133b0:	bl	114cc <qsort@plt>
   133b4:	ldr	r7, [r6]
   133b8:	subs	r0, r5, #1
   133bc:	ldr	r4, [r7]
   133c0:	mov	r1, r4
   133c4:	beq	13400 <__assert_fail@plt+0x1ea4>
   133c8:	mov	r1, r7
   133cc:	cmp	r5, #2
   133d0:	ldr	r2, [r1, #4]!
   133d4:	str	r2, [r4, #8]
   133d8:	beq	133fc <__assert_fail@plt+0x1ea0>
   133dc:	rsb	r3, r5, #2
   133e0:	mov	r2, r1
   133e4:	ldr	r6, [r2, #4]!
   133e8:	ldr	r1, [r1]
   133ec:	adds	r3, r3, #1
   133f0:	str	r6, [r1, #8]
   133f4:	mov	r1, r2
   133f8:	bne	133e4 <__assert_fail@plt+0x1e88>
   133fc:	ldr	r1, [r7, r0, lsl #2]
   13400:	mov	r0, #0
   13404:	str	r0, [r1, #8]
   13408:	b	13420 <__assert_fail@plt+0x1ec4>
   1340c:	ldr	r0, [r6, #8]
   13410:	bl	12dc4 <__assert_fail@plt+0x1868>
   13414:	mov	r0, #0
   13418:	str	r0, [r6, #40]	; 0x28
   1341c:	str	r0, [r6, #8]
   13420:	mov	r0, r4
   13424:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13428:	push	{r4, r5, fp, lr}
   1342c:	add	fp, sp, #8
   13430:	sub	sp, sp, #8
   13434:	mov	r4, r0
   13438:	ldrh	r0, [r0, #48]	; 0x30
   1343c:	movw	r1, #258	; 0x102
   13440:	tst	r0, r1
   13444:	beq	13484 <__assert_fail@plt+0x1f28>
   13448:	movw	r0, #11716	; 0x2dc4
   1344c:	movw	r2, #19448	; 0x4bf8
   13450:	movw	r3, #19480	; 0x4c18
   13454:	mov	r1, #0
   13458:	mov	r5, #0
   1345c:	movt	r0, #1
   13460:	movt	r2, #1
   13464:	movt	r3, #1
   13468:	str	r0, [sp]
   1346c:	mov	r0, #31
   13470:	bl	15270 <__assert_fail@plt+0x3d14>
   13474:	cmp	r0, #0
   13478:	str	r0, [r4, #56]	; 0x38
   1347c:	movne	r5, #1
   13480:	b	134a8 <__assert_fail@plt+0x1f4c>
   13484:	mov	r0, #32
   13488:	bl	18d14 <__assert_fail@plt+0x77b8>
   1348c:	cmp	r0, #0
   13490:	str	r0, [r4, #56]	; 0x38
   13494:	beq	134a4 <__assert_fail@plt+0x1f48>
   13498:	bl	18e14 <__assert_fail@plt+0x78b8>
   1349c:	mov	r5, #1
   134a0:	b	134a8 <__assert_fail@plt+0x1f4c>
   134a4:	mov	r5, #0
   134a8:	mov	r0, r5
   134ac:	sub	sp, fp, #8
   134b0:	pop	{r4, r5, fp, pc}
   134b4:	ldr	r3, [r0, #48]	; 0x30
   134b8:	mov	r2, #32768	; 0x8000
   134bc:	and	r2, r2, r3, lsl #11
   134c0:	tst	r3, #512	; 0x200
   134c4:	orr	r2, r2, #18688	; 0x4900
   134c8:	orr	r2, r2, #524288	; 0x80000
   134cc:	bne	134dc <__assert_fail@plt+0x1f80>
   134d0:	mov	r0, r1
   134d4:	mov	r1, r2
   134d8:	b	19174 <__assert_fail@plt+0x7c18>
   134dc:	ldr	r0, [r0, #32]
   134e0:	b	15e84 <__assert_fail@plt+0x4928>
   134e4:	push	{r4, r6, r7, sl, fp, lr}
   134e8:	add	fp, sp, #16
   134ec:	cmp	r0, #0
   134f0:	popeq	{r4, r6, r7, sl, fp, pc}
   134f4:	mov	r4, r0
   134f8:	ldrd	r6, [r4, #8]
   134fc:	cmp	r7, #0
   13500:	beq	1350c <__assert_fail@plt+0x1fb0>
   13504:	mov	r0, r7
   13508:	bl	11538 <closedir@plt>
   1350c:	mov	r0, r4
   13510:	bl	12dc4 <__assert_fail@plt+0x1868>
   13514:	cmp	r6, #0
   13518:	mov	r4, r6
   1351c:	bne	134f8 <__assert_fail@plt+0x1f9c>
   13520:	pop	{r4, r6, r7, sl, fp, pc}
   13524:	push	{r4, r5, fp, lr}
   13528:	add	fp, sp, #8
   1352c:	mov	r4, r0
   13530:	ldr	r0, [r0]
   13534:	cmp	r0, #0
   13538:	beq	13578 <__assert_fail@plt+0x201c>
   1353c:	ldr	r1, [r0, #48]	; 0x30
   13540:	cmp	r1, #0
   13544:	blt	1356c <__assert_fail@plt+0x2010>
   13548:	ldr	r5, [r0, #8]
   1354c:	cmp	r5, #0
   13550:	ldreq	r5, [r0, #4]
   13554:	bl	12dc4 <__assert_fail@plt+0x1868>
   13558:	ldr	r0, [r5, #48]	; 0x30
   1355c:	cmn	r0, #1
   13560:	mov	r0, r5
   13564:	bgt	13548 <__assert_fail@plt+0x1fec>
   13568:	b	13570 <__assert_fail@plt+0x2014>
   1356c:	mov	r5, r0
   13570:	mov	r0, r5
   13574:	bl	12dc4 <__assert_fail@plt+0x1868>
   13578:	ldr	r0, [r4, #4]
   1357c:	cmp	r0, #0
   13580:	blne	134e4 <__assert_fail@plt+0x1f88>
   13584:	ldr	r0, [r4, #8]
   13588:	bl	12dc4 <__assert_fail@plt+0x1868>
   1358c:	ldr	r0, [r4, #24]
   13590:	bl	12dc4 <__assert_fail@plt+0x1868>
   13594:	ldr	r0, [r4, #48]	; 0x30
   13598:	tst	r0, #512	; 0x200
   1359c:	bne	135c8 <__assert_fail@plt+0x206c>
   135a0:	mov	r5, #0
   135a4:	tst	r0, #4
   135a8:	bne	13604 <__assert_fail@plt+0x20a8>
   135ac:	ldr	r0, [r4, #28]
   135b0:	bl	114c0 <fchdir@plt>
   135b4:	cmp	r0, #0
   135b8:	beq	135e0 <__assert_fail@plt+0x2084>
   135bc:	bl	11400 <__errno_location@plt>
   135c0:	ldr	r5, [r0]
   135c4:	b	135e4 <__assert_fail@plt+0x2088>
   135c8:	ldr	r0, [r4, #32]
   135cc:	mov	r5, #0
   135d0:	cmp	r0, #0
   135d4:	blt	13604 <__assert_fail@plt+0x20a8>
   135d8:	bl	11520 <close@plt>
   135dc:	b	135f4 <__assert_fail@plt+0x2098>
   135e0:	mov	r5, #0
   135e4:	ldr	r0, [r4, #28]
   135e8:	bl	11520 <close@plt>
   135ec:	cmp	r5, #0
   135f0:	bne	13604 <__assert_fail@plt+0x20a8>
   135f4:	cmp	r0, #0
   135f8:	beq	13604 <__assert_fail@plt+0x20a8>
   135fc:	bl	11400 <__errno_location@plt>
   13600:	ldr	r5, [r0]
   13604:	add	r0, r4, #60	; 0x3c
   13608:	bl	13648 <__assert_fail@plt+0x20ec>
   1360c:	ldr	r0, [r4, #52]	; 0x34
   13610:	cmp	r0, #0
   13614:	beq	1361c <__assert_fail@plt+0x20c0>
   13618:	bl	1559c <__assert_fail@plt+0x4040>
   1361c:	mov	r0, r4
   13620:	bl	1367c <__assert_fail@plt+0x2120>
   13624:	mov	r0, r4
   13628:	bl	12dc4 <__assert_fail@plt+0x1868>
   1362c:	cmp	r5, #0
   13630:	moveq	r0, #0
   13634:	popeq	{r4, r5, fp, pc}
   13638:	bl	11400 <__errno_location@plt>
   1363c:	str	r5, [r0]
   13640:	mvn	r0, #0
   13644:	pop	{r4, r5, fp, pc}
   13648:	push	{r4, sl, fp, lr}
   1364c:	add	fp, sp, #8
   13650:	mov	r4, r0
   13654:	bl	15d7c <__assert_fail@plt+0x4820>
   13658:	cmp	r0, #0
   1365c:	popne	{r4, sl, fp, pc}
   13660:	mov	r0, r4
   13664:	bl	15dd0 <__assert_fail@plt+0x4874>
   13668:	cmp	r0, #0
   1366c:	blt	13674 <__assert_fail@plt+0x2118>
   13670:	bl	11520 <close@plt>
   13674:	mov	r0, r4
   13678:	b	13654 <__assert_fail@plt+0x20f8>
   1367c:	ldrh	r1, [r0, #48]	; 0x30
   13680:	movw	r2, #258	; 0x102
   13684:	tst	r1, r2
   13688:	beq	1369c <__assert_fail@plt+0x2140>
   1368c:	ldr	r0, [r0, #56]	; 0x38
   13690:	cmp	r0, #0
   13694:	bxeq	lr
   13698:	b	1559c <__assert_fail@plt+0x4040>
   1369c:	ldr	r0, [r0, #56]	; 0x38
   136a0:	b	12dc4 <__assert_fail@plt+0x1868>
   136a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136a8:	add	fp, sp, #24
   136ac:	ldr	r6, [r0]
   136b0:	mov	r5, #0
   136b4:	cmp	r6, #0
   136b8:	beq	13cac <__assert_fail@plt+0x2750>
   136bc:	ldr	r1, [r0, #48]	; 0x30
   136c0:	mov	r4, r0
   136c4:	tst	r1, #8192	; 0x2000
   136c8:	bne	13cac <__assert_fail@plt+0x2750>
   136cc:	ldrh	r0, [r6, #60]	; 0x3c
   136d0:	mov	r2, #3
   136d4:	strh	r2, [r6, #60]	; 0x3c
   136d8:	cmp	r0, #1
   136dc:	beq	1372c <__assert_fail@plt+0x21d0>
   136e0:	mov	r7, r6
   136e4:	cmp	r0, #2
   136e8:	bne	13744 <__assert_fail@plt+0x21e8>
   136ec:	ldrh	r2, [r7, #56]!	; 0x38
   136f0:	movw	r3, #65534	; 0xfffe
   136f4:	and	r3, r2, r3
   136f8:	cmp	r3, #12
   136fc:	bne	13748 <__assert_fail@plt+0x21ec>
   13700:	mov	r0, r4
   13704:	mov	r1, r6
   13708:	mov	r2, #1
   1370c:	bl	131fc <__assert_fail@plt+0x1ca0>
   13710:	strh	r0, [r6, #56]	; 0x38
   13714:	cmp	r0, #1
   13718:	ldrbeq	r0, [r4, #48]	; 0x30
   1371c:	tsteq	r0, #4
   13720:	beq	13914 <__assert_fail@plt+0x23b8>
   13724:	mov	r5, r6
   13728:	b	13a3c <__assert_fail@plt+0x24e0>
   1372c:	mov	r0, r4
   13730:	mov	r1, r6
   13734:	mov	r2, #0
   13738:	bl	131fc <__assert_fail@plt+0x1ca0>
   1373c:	strh	r0, [r6, #56]	; 0x38
   13740:	b	13798 <__assert_fail@plt+0x223c>
   13744:	ldrh	r2, [r7, #56]!	; 0x38
   13748:	cmp	r2, #1
   1374c:	bne	137a0 <__assert_fail@plt+0x2244>
   13750:	cmp	r0, #4
   13754:	bne	1380c <__assert_fail@plt+0x22b0>
   13758:	ldrb	r0, [r6, #58]	; 0x3a
   1375c:	tst	r0, #2
   13760:	beq	1376c <__assert_fail@plt+0x2210>
   13764:	ldr	r0, [r6, #36]	; 0x24
   13768:	bl	11520 <close@plt>
   1376c:	ldr	r0, [r4, #4]
   13770:	cmp	r0, #0
   13774:	beq	13784 <__assert_fail@plt+0x2228>
   13778:	bl	134e4 <__assert_fail@plt+0x1f88>
   1377c:	mov	r0, #0
   13780:	str	r0, [r4, #4]
   13784:	mov	r0, #6
   13788:	strh	r0, [r6, #56]	; 0x38
   1378c:	mov	r0, r4
   13790:	mov	r1, r6
   13794:	bl	13cb8 <__assert_fail@plt+0x275c>
   13798:	mov	r5, r6
   1379c:	b	13cac <__assert_fail@plt+0x2750>
   137a0:	ldr	r5, [r6, #8]
   137a4:	cmp	r5, #0
   137a8:	beq	138a4 <__assert_fail@plt+0x2348>
   137ac:	mov	r0, r6
   137b0:	str	r5, [r4]
   137b4:	bl	12dc4 <__assert_fail@plt+0x1868>
   137b8:	ldr	r0, [r5, #48]	; 0x30
   137bc:	cmp	r0, #0
   137c0:	beq	138f0 <__assert_fail@plt+0x2394>
   137c4:	ldrh	r0, [r5, #60]	; 0x3c
   137c8:	mov	r6, r5
   137cc:	cmp	r0, #4
   137d0:	beq	137a0 <__assert_fail@plt+0x2244>
   137d4:	cmp	r0, #2
   137d8:	bne	13a00 <__assert_fail@plt+0x24a4>
   137dc:	mov	r0, r4
   137e0:	mov	r1, r5
   137e4:	mov	r2, #1
   137e8:	bl	131fc <__assert_fail@plt+0x1ca0>
   137ec:	strh	r0, [r5, #56]	; 0x38
   137f0:	cmp	r0, #1
   137f4:	ldrbeq	r0, [r4, #48]	; 0x30
   137f8:	tsteq	r0, #4
   137fc:	beq	13c10 <__assert_fail@plt+0x26b4>
   13800:	mov	r0, #3
   13804:	strh	r0, [r5, #60]	; 0x3c
   13808:	b	13a00 <__assert_fail@plt+0x24a4>
   1380c:	tst	r1, #64	; 0x40
   13810:	beq	13834 <__assert_fail@plt+0x22d8>
   13814:	ldr	r0, [r4, #16]
   13818:	ldr	r3, [r4, #20]
   1381c:	ldr	r2, [r6, #64]	; 0x40
   13820:	ldr	r5, [r6, #68]	; 0x44
   13824:	eor	r3, r5, r3
   13828:	eor	r0, r2, r0
   1382c:	orrs	r0, r0, r3
   13830:	bne	13758 <__assert_fail@plt+0x21fc>
   13834:	ldr	r0, [r4, #4]
   13838:	cmp	r0, #0
   1383c:	beq	139dc <__assert_fail@plt+0x2480>
   13840:	tst	r1, #4096	; 0x1000
   13844:	bne	139c8 <__assert_fail@plt+0x246c>
   13848:	ldr	r3, [r6, #24]
   1384c:	mov	r0, r4
   13850:	mov	r1, r6
   13854:	mvn	r2, #0
   13858:	bl	13d84 <__assert_fail@plt+0x2828>
   1385c:	cmp	r0, #0
   13860:	beq	139f4 <__assert_fail@plt+0x2498>
   13864:	bl	11400 <__errno_location@plt>
   13868:	ldr	r0, [r0]
   1386c:	str	r0, [r6, #32]
   13870:	ldrh	r0, [r6, #58]	; 0x3a
   13874:	orr	r0, r0, #1
   13878:	strh	r0, [r6, #58]	; 0x3a
   1387c:	ldr	r0, [r4, #4]
   13880:	cmp	r0, #0
   13884:	beq	139f4 <__assert_fail@plt+0x2498>
   13888:	ldmib	r0, {r1, r2}
   1388c:	ldr	r1, [r1, #24]
   13890:	cmp	r2, #0
   13894:	str	r1, [r0, #24]
   13898:	mov	r0, r2
   1389c:	bne	13888 <__assert_fail@plt+0x232c>
   138a0:	b	139f4 <__assert_fail@plt+0x2498>
   138a4:	ldr	r5, [r6, #4]
   138a8:	ldr	r0, [r5, #12]
   138ac:	cmp	r0, #0
   138b0:	beq	13af8 <__assert_fail@plt+0x259c>
   138b4:	str	r5, [r4]
   138b8:	ldr	r1, [r5, #40]	; 0x28
   138bc:	ldr	r0, [r4, #24]
   138c0:	mov	r5, #0
   138c4:	strb	r5, [r0, r1]
   138c8:	mov	r0, r4
   138cc:	mov	r1, #3
   138d0:	bl	13f5c <__assert_fail@plt+0x2a00>
   138d4:	cmp	r0, #0
   138d8:	beq	13ae8 <__assert_fail@plt+0x258c>
   138dc:	mov	r7, r0
   138e0:	mov	r0, r6
   138e4:	bl	12dc4 <__assert_fail@plt+0x1868>
   138e8:	mov	r5, r7
   138ec:	b	13a00 <__assert_fail@plt+0x24a4>
   138f0:	mov	r0, r4
   138f4:	bl	148f0 <__assert_fail@plt+0x3394>
   138f8:	cmp	r0, #0
   138fc:	beq	13940 <__assert_fail@plt+0x23e4>
   13900:	ldr	r0, [r4, #48]	; 0x30
   13904:	mov	r5, #0
   13908:	orr	r0, r0, #8192	; 0x2000
   1390c:	str	r0, [r4, #48]	; 0x30
   13910:	b	13cac <__assert_fail@plt+0x2750>
   13914:	movw	r1, #42933	; 0xa7b5
   13918:	mov	r0, r4
   1391c:	movt	r1, #1
   13920:	bl	134b4 <__assert_fail@plt+0x1f58>
   13924:	cmn	r0, #1
   13928:	str	r0, [r6, #36]	; 0x24
   1392c:	ble	13b84 <__assert_fail@plt+0x2628>
   13930:	ldrh	r0, [r6, #58]	; 0x3a
   13934:	orr	r0, r0, #2
   13938:	strh	r0, [r6, #58]	; 0x3a
   1393c:	b	13724 <__assert_fail@plt+0x21c8>
   13940:	mov	r0, r4
   13944:	bl	1367c <__assert_fail@plt+0x2120>
   13948:	ldr	r1, [r5, #52]	; 0x34
   1394c:	add	r6, r5, #168	; 0xa8
   13950:	str	r1, [r5, #40]	; 0x28
   13954:	add	r2, r1, #1
   13958:	mov	r1, r6
   1395c:	ldr	r0, [r4, #24]
   13960:	bl	11280 <memmove@plt>
   13964:	mov	r0, r6
   13968:	mov	r1, #47	; 0x2f
   1396c:	bl	11484 <strrchr@plt>
   13970:	cmp	r0, #0
   13974:	beq	139b0 <__assert_fail@plt+0x2454>
   13978:	cmp	r0, r6
   1397c:	bne	1398c <__assert_fail@plt+0x2430>
   13980:	ldrb	r1, [r5, #169]	; 0xa9
   13984:	cmp	r1, #0
   13988:	beq	139b0 <__assert_fail@plt+0x2454>
   1398c:	add	r7, r0, #1
   13990:	mov	r0, r7
   13994:	bl	113d0 <strlen@plt>
   13998:	mov	r8, r0
   1399c:	add	r2, r0, #1
   139a0:	mov	r0, r6
   139a4:	mov	r1, r7
   139a8:	bl	11280 <memmove@plt>
   139ac:	str	r8, [r5, #52]	; 0x34
   139b0:	ldr	r0, [r4, #24]
   139b4:	str	r0, [r5, #24]
   139b8:	str	r0, [r5, #28]
   139bc:	mov	r0, r4
   139c0:	bl	13428 <__assert_fail@plt+0x1ecc>
   139c4:	b	13a3c <__assert_fail@plt+0x24e0>
   139c8:	bic	r1, r1, #4096	; 0x1000
   139cc:	str	r1, [r4, #48]	; 0x30
   139d0:	bl	134e4 <__assert_fail@plt+0x1f88>
   139d4:	mov	r0, #0
   139d8:	str	r0, [r4, #4]
   139dc:	mov	r0, r4
   139e0:	mov	r1, #3
   139e4:	bl	13f5c <__assert_fail@plt+0x2a00>
   139e8:	cmp	r0, #0
   139ec:	str	r0, [r4, #4]
   139f0:	beq	13abc <__assert_fail@plt+0x2560>
   139f4:	ldr	r5, [r4, #4]
   139f8:	mov	r0, #0
   139fc:	str	r0, [r4, #4]
   13a00:	ldr	r0, [r5, #4]
   13a04:	ldr	r1, [r0, #28]
   13a08:	ldr	r0, [r0, #40]	; 0x28
   13a0c:	sub	r2, r0, #1
   13a10:	ldrb	r1, [r1, r2]
   13a14:	cmp	r1, #47	; 0x2f
   13a18:	ldr	r1, [r4, #24]
   13a1c:	moveq	r0, r2
   13a20:	mov	r2, #47	; 0x2f
   13a24:	strb	r2, [r1, r0]!
   13a28:	ldr	r2, [r5, #52]	; 0x34
   13a2c:	add	r0, r1, #1
   13a30:	add	r1, r5, #168	; 0xa8
   13a34:	add	r2, r2, #1
   13a38:	bl	11280 <memmove@plt>
   13a3c:	str	r5, [r4]
   13a40:	ldrh	r0, [r5, #56]	; 0x38
   13a44:	cmp	r0, #11
   13a48:	bne	13a7c <__assert_fail@plt+0x2520>
   13a4c:	ldrd	r0, [r5, #112]	; 0x70
   13a50:	eor	r2, r0, #1
   13a54:	orrs	r2, r2, r1
   13a58:	beq	13cac <__assert_fail@plt+0x2750>
   13a5c:	eor	r0, r0, #2
   13a60:	orrs	r0, r0, r1
   13a64:	bne	13cb4 <__assert_fail@plt+0x2758>
   13a68:	mov	r0, r4
   13a6c:	mov	r1, r5
   13a70:	mov	r2, #0
   13a74:	bl	131fc <__assert_fail@plt+0x1ca0>
   13a78:	strh	r0, [r5, #56]	; 0x38
   13a7c:	cmp	r0, #1
   13a80:	bne	13cac <__assert_fail@plt+0x2750>
   13a84:	ldr	r0, [r5, #48]	; 0x30
   13a88:	cmp	r0, #0
   13a8c:	ldrdeq	r0, [r5, #64]	; 0x40
   13a90:	strdeq	r0, [r4, #16]
   13a94:	mov	r0, r4
   13a98:	mov	r1, r5
   13a9c:	bl	1494c <__assert_fail@plt+0x33f0>
   13aa0:	cmp	r0, #0
   13aa4:	bne	13cac <__assert_fail@plt+0x2750>
   13aa8:	bl	11400 <__errno_location@plt>
   13aac:	mov	r1, #12
   13ab0:	mov	r5, #0
   13ab4:	str	r1, [r0]
   13ab8:	b	13cac <__assert_fail@plt+0x2750>
   13abc:	ldrb	r0, [r4, #49]	; 0x31
   13ac0:	mov	r5, #0
   13ac4:	tst	r0, #32
   13ac8:	bne	13cac <__assert_fail@plt+0x2750>
   13acc:	ldr	r0, [r6, #32]
   13ad0:	cmp	r0, #0
   13ad4:	ldrhne	r0, [r7]
   13ad8:	cmpne	r0, #4
   13adc:	movne	r0, #7
   13ae0:	strhne	r0, [r7]
   13ae4:	b	1378c <__assert_fail@plt+0x2230>
   13ae8:	ldrb	r0, [r4, #49]	; 0x31
   13aec:	tst	r0, #32
   13af0:	bne	13cac <__assert_fail@plt+0x2750>
   13af4:	ldr	r5, [r6, #4]
   13af8:	mov	r0, r6
   13afc:	str	r5, [r4]
   13b00:	bl	12dc4 <__assert_fail@plt+0x1868>
   13b04:	ldr	r0, [r5, #48]	; 0x30
   13b08:	cmn	r0, #1
   13b0c:	beq	13b68 <__assert_fail@plt+0x260c>
   13b10:	ldrh	r0, [r5, #56]	; 0x38
   13b14:	cmp	r0, #11
   13b18:	beq	13cb4 <__assert_fail@plt+0x2758>
   13b1c:	ldr	r0, [r5, #40]	; 0x28
   13b20:	ldr	r1, [r4, #24]
   13b24:	mov	r2, #0
   13b28:	strb	r2, [r1, r0]
   13b2c:	ldr	r0, [r5, #48]	; 0x30
   13b30:	cmp	r0, #0
   13b34:	beq	13b9c <__assert_fail@plt+0x2640>
   13b38:	ldrh	r0, [r5, #58]	; 0x3a
   13b3c:	tst	r0, #2
   13b40:	bne	13bc8 <__assert_fail@plt+0x266c>
   13b44:	tst	r0, #1
   13b48:	bne	13c70 <__assert_fail@plt+0x2714>
   13b4c:	ldr	r1, [r5, #4]
   13b50:	movw	r3, #42932	; 0xa7b4
   13b54:	mov	r0, r4
   13b58:	mvn	r2, #0
   13b5c:	movt	r3, #1
   13b60:	bl	13d84 <__assert_fail@plt+0x2828>
   13b64:	b	13ba4 <__assert_fail@plt+0x2648>
   13b68:	mov	r0, r5
   13b6c:	bl	12dc4 <__assert_fail@plt+0x1868>
   13b70:	bl	11400 <__errno_location@plt>
   13b74:	mov	r5, #0
   13b78:	str	r5, [r0]
   13b7c:	str	r5, [r4]
   13b80:	b	13cac <__assert_fail@plt+0x2750>
   13b84:	bl	11400 <__errno_location@plt>
   13b88:	ldr	r0, [r0]
   13b8c:	mov	r1, #7
   13b90:	strh	r1, [r6, #56]	; 0x38
   13b94:	str	r0, [r6, #32]
   13b98:	b	13724 <__assert_fail@plt+0x21c8>
   13b9c:	mov	r0, r4
   13ba0:	bl	148f0 <__assert_fail@plt+0x3394>
   13ba4:	cmp	r0, #0
   13ba8:	beq	13c70 <__assert_fail@plt+0x2714>
   13bac:	bl	11400 <__errno_location@plt>
   13bb0:	ldr	r0, [r0]
   13bb4:	str	r0, [r5, #32]
   13bb8:	ldr	r0, [r4, #48]	; 0x30
   13bbc:	orr	r0, r0, #8192	; 0x2000
   13bc0:	str	r0, [r4, #48]	; 0x30
   13bc4:	b	13c70 <__assert_fail@plt+0x2714>
   13bc8:	ldr	r0, [r4, #48]	; 0x30
   13bcc:	tst	r0, #4
   13bd0:	bne	13c3c <__assert_fail@plt+0x26e0>
   13bd4:	mov	r6, r5
   13bd8:	tst	r0, #512	; 0x200
   13bdc:	ldr	r1, [r6, #36]!	; 0x24
   13be0:	bne	13c5c <__assert_fail@plt+0x2700>
   13be4:	mov	r0, r1
   13be8:	bl	114c0 <fchdir@plt>
   13bec:	cmp	r0, #0
   13bf0:	beq	13c68 <__assert_fail@plt+0x270c>
   13bf4:	bl	11400 <__errno_location@plt>
   13bf8:	ldr	r0, [r0]
   13bfc:	str	r0, [r5, #32]
   13c00:	ldr	r0, [r4, #48]	; 0x30
   13c04:	orr	r0, r0, #8192	; 0x2000
   13c08:	str	r0, [r4, #48]	; 0x30
   13c0c:	b	13c68 <__assert_fail@plt+0x270c>
   13c10:	movw	r1, #42933	; 0xa7b5
   13c14:	mov	r0, r4
   13c18:	movt	r1, #1
   13c1c:	bl	134b4 <__assert_fail@plt+0x1f58>
   13c20:	cmn	r0, #1
   13c24:	str	r0, [r5, #36]	; 0x24
   13c28:	ble	13c44 <__assert_fail@plt+0x26e8>
   13c2c:	ldrh	r0, [r5, #58]	; 0x3a
   13c30:	orr	r0, r0, #2
   13c34:	strh	r0, [r5, #58]	; 0x3a
   13c38:	b	13800 <__assert_fail@plt+0x22a4>
   13c3c:	add	r6, r5, #36	; 0x24
   13c40:	b	13c68 <__assert_fail@plt+0x270c>
   13c44:	bl	11400 <__errno_location@plt>
   13c48:	ldr	r0, [r0]
   13c4c:	mov	r1, #7
   13c50:	strh	r1, [r5, #56]	; 0x38
   13c54:	str	r0, [r5, #32]
   13c58:	b	13800 <__assert_fail@plt+0x22a4>
   13c5c:	mov	r0, r4
   13c60:	mov	r2, #1
   13c64:	bl	14a00 <__assert_fail@plt+0x34a4>
   13c68:	ldr	r0, [r6]
   13c6c:	bl	11520 <close@plt>
   13c70:	ldrh	r0, [r5, #56]	; 0x38
   13c74:	cmp	r0, #2
   13c78:	beq	13ca0 <__assert_fail@plt+0x2744>
   13c7c:	ldr	r0, [r5, #32]
   13c80:	mov	r1, #7
   13c84:	cmp	r0, #0
   13c88:	movweq	r1, #6
   13c8c:	strh	r1, [r5, #56]	; 0x38
   13c90:	bne	13ca0 <__assert_fail@plt+0x2744>
   13c94:	mov	r0, r4
   13c98:	mov	r1, r5
   13c9c:	bl	13cb8 <__assert_fail@plt+0x275c>
   13ca0:	ldrb	r0, [r4, #49]	; 0x31
   13ca4:	tst	r0, #32
   13ca8:	movne	r5, #0
   13cac:	mov	r0, r5
   13cb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cb4:	bl	11514 <abort@plt>
   13cb8:	push	{r4, r5, r6, r7, fp, lr}
   13cbc:	add	fp, sp, #16
   13cc0:	sub	sp, sp, #24
   13cc4:	ldrh	r2, [r0, #48]	; 0x30
   13cc8:	movw	r3, #258	; 0x102
   13ccc:	add	lr, r1, #64	; 0x40
   13cd0:	tst	r2, r3
   13cd4:	beq	13d0c <__assert_fail@plt+0x27b0>
   13cd8:	ldrd	r2, [lr]
   13cdc:	stm	sp, {r2, r3}
   13ce0:	ldrd	r2, [r1, #160]	; 0xa0
   13ce4:	mov	r1, sp
   13ce8:	str	r3, [sp, #12]
   13cec:	str	r2, [sp, #8]
   13cf0:	ldr	r0, [r0, #56]	; 0x38
   13cf4:	bl	15c38 <__assert_fail@plt+0x46dc>
   13cf8:	cmp	r0, #0
   13cfc:	beq	13d80 <__assert_fail@plt+0x2824>
   13d00:	bl	12dc4 <__assert_fail@plt+0x1868>
   13d04:	sub	sp, fp, #16
   13d08:	pop	{r4, r5, r6, r7, fp, pc}
   13d0c:	ldr	r2, [r1, #4]
   13d10:	cmp	r2, #0
   13d14:	beq	13d04 <__assert_fail@plt+0x27a8>
   13d18:	ldr	r3, [r2, #48]	; 0x30
   13d1c:	cmp	r3, #0
   13d20:	blt	13d04 <__assert_fail@plt+0x27a8>
   13d24:	ldr	ip, [r0, #56]	; 0x38
   13d28:	ldrd	r4, [ip, #16]
   13d2c:	orrs	r3, r4, r5
   13d30:	beq	13d80 <__assert_fail@plt+0x2824>
   13d34:	ldrd	r4, [r1, #160]	; 0xa0
   13d38:	ldrd	r6, [ip]
   13d3c:	eor	r1, r7, r5
   13d40:	eor	r3, r6, r4
   13d44:	orrs	r1, r3, r1
   13d48:	bne	13d04 <__assert_fail@plt+0x27a8>
   13d4c:	ldr	r1, [ip, #8]!
   13d50:	ldrd	r4, [lr]
   13d54:	ldr	r3, [ip, #4]
   13d58:	eor	r1, r1, r4
   13d5c:	eor	r3, r3, r5
   13d60:	orrs	r1, r1, r3
   13d64:	bne	13d04 <__assert_fail@plt+0x27a8>
   13d68:	ldrd	r4, [r2, #64]	; 0x40
   13d6c:	strd	r4, [ip]
   13d70:	ldr	r0, [r0, #56]	; 0x38
   13d74:	ldrd	r2, [r2, #160]	; 0xa0
   13d78:	strd	r2, [r0]
   13d7c:	b	13d04 <__assert_fail@plt+0x27a8>
   13d80:	bl	11514 <abort@plt>
   13d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d88:	add	fp, sp, #28
   13d8c:	sub	sp, sp, #108	; 0x6c
   13d90:	mov	r7, r3
   13d94:	mov	r4, r2
   13d98:	mov	r8, r1
   13d9c:	mov	sl, r0
   13da0:	cmp	r3, #0
   13da4:	beq	13dc8 <__assert_fail@plt+0x286c>
   13da8:	movw	r1, #42932	; 0xa7b4
   13dac:	mov	r0, r7
   13db0:	movt	r1, #1
   13db4:	bl	1125c <strcmp@plt>
   13db8:	mov	r6, r0
   13dbc:	cmp	r0, #0
   13dc0:	movwne	r6, #1
   13dc4:	b	13dcc <__assert_fail@plt+0x2870>
   13dc8:	mov	r6, #1
   13dcc:	ldr	r0, [sl, #48]	; 0x30
   13dd0:	tst	r0, #4
   13dd4:	bne	13e2c <__assert_fail@plt+0x28d0>
   13dd8:	cmn	r4, #1
   13ddc:	mov	r1, #0
   13de0:	mov	r9, #0
   13de4:	movwgt	r1, #1
   13de8:	orrs	r1, r1, r6
   13dec:	bne	13e4c <__assert_fail@plt+0x28f0>
   13df0:	ands	r0, r0, #512	; 0x200
   13df4:	beq	13e4c <__assert_fail@plt+0x28f0>
   13df8:	add	r4, sl, #60	; 0x3c
   13dfc:	mov	r0, r4
   13e00:	bl	15d7c <__assert_fail@plt+0x4820>
   13e04:	cmp	r0, #0
   13e08:	bne	13e54 <__assert_fail@plt+0x28f8>
   13e0c:	mov	r0, r4
   13e10:	bl	15dd0 <__assert_fail@plt+0x4874>
   13e14:	cmn	r0, #1
   13e18:	ble	13e54 <__assert_fail@plt+0x28f8>
   13e1c:	mov	r4, r0
   13e20:	mov	r9, #0
   13e24:	mov	r7, #0
   13e28:	b	13e70 <__assert_fail@plt+0x2914>
   13e2c:	mov	r5, #0
   13e30:	cmp	r4, #0
   13e34:	blt	13f50 <__assert_fail@plt+0x29f4>
   13e38:	ands	r0, r0, #512	; 0x200
   13e3c:	beq	13f50 <__assert_fail@plt+0x29f4>
   13e40:	mov	r0, r4
   13e44:	bl	11520 <close@plt>
   13e48:	b	13f50 <__assert_fail@plt+0x29f4>
   13e4c:	cmn	r4, #1
   13e50:	bgt	13e70 <__assert_fail@plt+0x2914>
   13e54:	mov	r0, sl
   13e58:	mov	r1, r7
   13e5c:	bl	134b4 <__assert_fail@plt+0x1f58>
   13e60:	cmp	r0, #0
   13e64:	blt	13f00 <__assert_fail@plt+0x29a4>
   13e68:	mov	r4, r0
   13e6c:	mov	r9, #1
   13e70:	ldr	r5, [sl, #48]	; 0x30
   13e74:	tst	r5, #2
   13e78:	bne	13e9c <__assert_fail@plt+0x2940>
   13e7c:	cmp	r7, #0
   13e80:	beq	13ee8 <__assert_fail@plt+0x298c>
   13e84:	movw	r1, #42932	; 0xa7b4
   13e88:	mov	r0, r7
   13e8c:	movt	r1, #1
   13e90:	bl	1125c <strcmp@plt>
   13e94:	cmp	r0, #0
   13e98:	bne	13ee8 <__assert_fail@plt+0x298c>
   13e9c:	mov	r1, sp
   13ea0:	mov	r0, r4
   13ea4:	bl	19694 <__assert_fail@plt+0x8138>
   13ea8:	cmp	r0, #0
   13eac:	bne	13f2c <__assert_fail@plt+0x29d0>
   13eb0:	ldrd	r0, [r8, #64]	; 0x40
   13eb4:	ldm	sp, {r2, r3}
   13eb8:	eor	r1, r1, r3
   13ebc:	eor	r0, r0, r2
   13ec0:	orrs	r0, r0, r1
   13ec4:	bne	13f20 <__assert_fail@plt+0x29c4>
   13ec8:	ldrd	r0, [r8, #160]	; 0xa0
   13ecc:	ldr	r2, [sp, #96]	; 0x60
   13ed0:	ldr	r3, [sp, #100]	; 0x64
   13ed4:	eor	r1, r1, r3
   13ed8:	eor	r0, r0, r2
   13edc:	orrs	r0, r0, r1
   13ee0:	bne	13f20 <__assert_fail@plt+0x29c4>
   13ee4:	ldr	r5, [sl, #48]	; 0x30
   13ee8:	tst	r5, #512	; 0x200
   13eec:	bne	13f08 <__assert_fail@plt+0x29ac>
   13ef0:	mov	r0, r4
   13ef4:	bl	114c0 <fchdir@plt>
   13ef8:	mov	r5, r0
   13efc:	b	13f30 <__assert_fail@plt+0x29d4>
   13f00:	mvn	r5, #0
   13f04:	b	13f50 <__assert_fail@plt+0x29f4>
   13f08:	mov	r0, sl
   13f0c:	mov	r1, r4
   13f10:	mov	r2, r6
   13f14:	bl	14a00 <__assert_fail@plt+0x34a4>
   13f18:	mov	r5, #0
   13f1c:	b	13f50 <__assert_fail@plt+0x29f4>
   13f20:	bl	11400 <__errno_location@plt>
   13f24:	mov	r1, #2
   13f28:	str	r1, [r0]
   13f2c:	mvn	r5, #0
   13f30:	cmp	r9, #0
   13f34:	beq	13f50 <__assert_fail@plt+0x29f4>
   13f38:	bl	11400 <__errno_location@plt>
   13f3c:	ldr	r7, [r0]
   13f40:	mov	r6, r0
   13f44:	mov	r0, r4
   13f48:	bl	11520 <close@plt>
   13f4c:	str	r7, [r6]
   13f50:	mov	r0, r5
   13f54:	sub	sp, fp, #28
   13f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f60:	add	fp, sp, #28
   13f64:	sub	sp, sp, #68	; 0x44
   13f68:	ldr	r8, [r0]
   13f6c:	mov	r4, r1
   13f70:	mov	r6, r0
   13f74:	str	r0, [fp, #-40]	; 0xffffffd8
   13f78:	ldr	r5, [r8, #12]
   13f7c:	cmp	r5, #0
   13f80:	beq	13fc4 <__assert_fail@plt+0x2a68>
   13f84:	mov	r0, r5
   13f88:	bl	114b4 <dirfd@plt>
   13f8c:	cmn	r0, #1
   13f90:	str	r0, [fp, #-32]	; 0xffffffe0
   13f94:	ble	14000 <__assert_fail@plt+0x2aa4>
   13f98:	ldr	r0, [r6, #44]!	; 0x2c
   13f9c:	mvn	r2, #0
   13fa0:	str	r5, [sp, #12]
   13fa4:	cmp	r0, #0
   13fa8:	str	r6, [sp, #44]	; 0x2c
   13fac:	add	r9, r6, #4
   13fb0:	mov	r6, #0
   13fb4:	movweq	r2, #34464	; 0x86a0
   13fb8:	movteq	r2, #1
   13fbc:	str	r2, [sp, #24]
   13fc0:	b	141f4 <__assert_fail@plt+0x2c98>
   13fc4:	mov	r9, r6
   13fc8:	mvn	r0, #99	; 0x63
   13fcc:	mov	r2, #0
   13fd0:	str	r5, [sp, #12]
   13fd4:	ldr	r3, [r9, #48]!	; 0x30
   13fd8:	and	r1, r3, #516	; 0x204
   13fdc:	cmp	r1, #512	; 0x200
   13fe0:	ldr	r1, [r8, #24]
   13fe4:	ldreq	r0, [r6, #32]
   13fe8:	tst	r3, #16
   13fec:	beq	14020 <__assert_fail@plt+0x2ac4>
   13ff0:	tst	r3, #1
   13ff4:	bne	14014 <__assert_fail@plt+0x2ab8>
   13ff8:	mov	r2, #32768	; 0x8000
   13ffc:	b	14020 <__assert_fail@plt+0x2ac4>
   14000:	ldr	r0, [r8, #12]
   14004:	bl	11538 <closedir@plt>
   14008:	mov	r5, #0
   1400c:	str	r5, [r8, #12]
   14010:	b	1405c <__assert_fail@plt+0x2b00>
   14014:	ldr	r3, [r8, #48]	; 0x30
   14018:	cmp	r3, #0
   1401c:	movne	r2, #32768	; 0x8000
   14020:	sub	r3, fp, #32
   14024:	bl	15ec8 <__assert_fail@plt+0x496c>
   14028:	cmp	r0, #0
   1402c:	str	r0, [r8, #12]
   14030:	beq	14058 <__assert_fail@plt+0x2afc>
   14034:	ldrh	r0, [r8, #56]	; 0x38
   14038:	cmp	r0, #11
   1403c:	bne	1407c <__assert_fail@plt+0x2b20>
   14040:	mov	r0, r6
   14044:	mov	r1, r8
   14048:	mov	r2, #0
   1404c:	bl	131fc <__assert_fail@plt+0x1ca0>
   14050:	strh	r0, [r8, #56]	; 0x38
   14054:	b	140bc <__assert_fail@plt+0x2b60>
   14058:	mov	r5, #0
   1405c:	cmp	r4, #3
   14060:	bne	1488c <__assert_fail@plt+0x3330>
   14064:	mov	r0, #4
   14068:	strh	r0, [r8, #56]	; 0x38
   1406c:	bl	11400 <__errno_location@plt>
   14070:	ldr	r0, [r0]
   14074:	str	r0, [r8, #32]
   14078:	b	1488c <__assert_fail@plt+0x3330>
   1407c:	ldrb	r0, [r9, #1]
   14080:	tst	r0, #1
   14084:	beq	140bc <__assert_fail@plt+0x2b60>
   14088:	mov	r0, r6
   1408c:	mov	r1, r8
   14090:	bl	13cb8 <__assert_fail@plt+0x275c>
   14094:	mov	r0, r6
   14098:	mov	r1, r8
   1409c:	mov	r2, #0
   140a0:	mov	r5, #0
   140a4:	bl	131fc <__assert_fail@plt+0x1ca0>
   140a8:	mov	r0, r6
   140ac:	mov	r1, r8
   140b0:	bl	1494c <__assert_fail@plt+0x33f0>
   140b4:	cmp	r0, #0
   140b8:	beq	146a0 <__assert_fail@plt+0x3144>
   140bc:	mov	r1, r6
   140c0:	mov	sl, r6
   140c4:	ldr	r0, [r1, #44]!	; 0x2c
   140c8:	str	r1, [sp, #44]	; 0x2c
   140cc:	mvn	r1, #0
   140d0:	cmp	r0, #0
   140d4:	movweq	r1, #34464	; 0x86a0
   140d8:	movteq	r1, #1
   140dc:	cmp	r4, #2
   140e0:	str	r1, [sp, #24]
   140e4:	bne	14108 <__assert_fail@plt+0x2bac>
   140e8:	mov	r6, #1
   140ec:	cmp	r4, #3
   140f0:	bne	141f4 <__assert_fail@plt+0x2c98>
   140f4:	sub	r0, r4, #3
   140f8:	mov	r7, r8
   140fc:	mov	r8, r4
   14100:	mov	r5, #0
   14104:	b	14130 <__assert_fail@plt+0x2bd4>
   14108:	ldr	r0, [r9]
   1410c:	and	r0, r0, #56	; 0x38
   14110:	cmp	r0, #24
   14114:	ldreq	r0, [r8, #84]	; 0x54
   14118:	cmpeq	r0, #2
   1411c:	beq	14898 <__assert_fail@plt+0x333c>
   14120:	sub	r0, r4, #3
   14124:	mov	r7, r8
   14128:	mov	r8, r4
   1412c:	mov	r5, #1
   14130:	clz	r0, r0
   14134:	lsr	r4, r0, #5
   14138:	ldrb	r0, [r9, #1]
   1413c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14140:	tst	r0, #2
   14144:	beq	14160 <__assert_fail@plt+0x2c04>
   14148:	mov	r0, r2
   1414c:	movw	r1, #1030	; 0x406
   14150:	mov	r2, #3
   14154:	bl	18f9c <__assert_fail@plt+0x7a40>
   14158:	mov	r2, r0
   1415c:	str	r0, [fp, #-32]	; 0xffffffe0
   14160:	cmp	r2, #0
   14164:	blt	14180 <__assert_fail@plt+0x2c24>
   14168:	mov	r0, sl
   1416c:	mov	r1, r7
   14170:	mov	r3, #0
   14174:	bl	13d84 <__assert_fail@plt+0x2828>
   14178:	cmp	r0, #0
   1417c:	beq	141e8 <__assert_fail@plt+0x2c8c>
   14180:	and	r0, r4, r5
   14184:	cmp	r0, #1
   14188:	bne	14198 <__assert_fail@plt+0x2c3c>
   1418c:	bl	11400 <__errno_location@plt>
   14190:	ldr	r0, [r0]
   14194:	str	r0, [r7, #32]
   14198:	ldrh	r0, [r7, #58]	; 0x3a
   1419c:	orr	r0, r0, #1
   141a0:	strh	r0, [r7, #58]	; 0x3a
   141a4:	ldr	r0, [r7, #12]
   141a8:	bl	11538 <closedir@plt>
   141ac:	mov	r4, #0
   141b0:	mov	r5, r7
   141b4:	str	r4, [r7, #12]
   141b8:	ldr	r0, [r9]
   141bc:	tst	r0, #512	; 0x200
   141c0:	beq	141d4 <__assert_fail@plt+0x2c78>
   141c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   141c8:	cmp	r0, #0
   141cc:	blt	141d4 <__assert_fail@plt+0x2c78>
   141d0:	bl	11520 <close@plt>
   141d4:	str	r4, [r5, #12]
   141d8:	mov	r4, r8
   141dc:	mov	r6, #1
   141e0:	mov	r8, r5
   141e4:	b	141f4 <__assert_fail@plt+0x2c98>
   141e8:	mov	r4, r8
   141ec:	mov	r6, #0
   141f0:	mov	r8, r7
   141f4:	ldr	r0, [r8, #40]	; 0x28
   141f8:	ldr	r1, [r8, #28]
   141fc:	mov	r5, #0
   14200:	str	r4, [sp, #4]
   14204:	sub	r2, r0, #1
   14208:	ldrb	r1, [r1, r2]
   1420c:	cmp	r1, #47	; 0x2f
   14210:	ldrb	r1, [r9]
   14214:	moveq	r0, r2
   14218:	tst	r1, #4
   1421c:	mov	r1, #0
   14220:	str	r1, [sp, #36]	; 0x24
   14224:	beq	14240 <__assert_fail@plt+0x2ce4>
   14228:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1422c:	mov	r2, #47	; 0x2f
   14230:	ldr	r1, [r1, #24]
   14234:	strb	r2, [r1, r0]!
   14238:	add	r1, r1, #1
   1423c:	str	r1, [sp, #36]	; 0x24
   14240:	ldr	r4, [r8, #12]
   14244:	add	r0, r0, #1
   14248:	str	r0, [sp, #48]	; 0x30
   1424c:	cmp	r4, #0
   14250:	beq	14578 <__assert_fail@plt+0x301c>
   14254:	mov	r1, r0
   14258:	ldr	r0, [r8, #48]	; 0x30
   1425c:	str	r6, [sp]
   14260:	mov	r6, #0
   14264:	add	r0, r0, #1
   14268:	str	r0, [sp, #20]
   1426c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14270:	ldr	r0, [r0, #36]	; 0x24
   14274:	sub	r0, r0, r1
   14278:	str	r0, [fp, #-44]	; 0xffffffd4
   1427c:	bl	11400 <__errno_location@plt>
   14280:	str	r0, [sp, #28]
   14284:	mov	r0, #0
   14288:	mov	r5, #0
   1428c:	mov	r7, #0
   14290:	str	r8, [sp, #32]
   14294:	str	r9, [fp, #-36]	; 0xffffffdc
   14298:	str	r0, [sp, #40]	; 0x28
   1429c:	mov	r0, #0
   142a0:	str	r0, [sp, #16]
   142a4:	mov	r0, #0
   142a8:	str	r0, [sp, #8]
   142ac:	ldr	r0, [sp, #28]
   142b0:	str	r6, [r0]
   142b4:	mov	r0, r4
   142b8:	bl	1149c <readdir64@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	145d8 <__assert_fail@plt+0x307c>
   142c4:	mov	sl, r0
   142c8:	ldrb	r0, [r9]
   142cc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   142d0:	add	r4, sl, #19
   142d4:	tst	r0, #32
   142d8:	ldrbeq	r0, [r4]
   142dc:	cmpeq	r0, #46	; 0x2e
   142e0:	beq	14380 <__assert_fail@plt+0x2e24>
   142e4:	mov	r0, r4
   142e8:	bl	113d0 <strlen@plt>
   142ec:	mov	r8, r0
   142f0:	mov	r0, r6
   142f4:	mov	r1, r4
   142f8:	mov	r2, r8
   142fc:	bl	1317c <__assert_fail@plt+0x1c20>
   14300:	mov	r9, r0
   14304:	cmp	r0, #0
   14308:	beq	1458c <__assert_fail@plt+0x3030>
   1430c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14310:	cmp	r8, r1
   14314:	bcs	14328 <__assert_fail@plt+0x2dcc>
   14318:	ldr	r2, [sp, #48]	; 0x30
   1431c:	add	r4, r8, r2
   14320:	mov	r8, r6
   14324:	b	143b4 <__assert_fail@plt+0x2e58>
   14328:	ldr	r1, [sp, #48]	; 0x30
   1432c:	add	r4, r8, r1
   14330:	mov	r8, r6
   14334:	ldr	r6, [r6, #24]
   14338:	add	r1, r4, #1
   1433c:	mov	r0, r8
   14340:	bl	13108 <__assert_fail@plt+0x1bac>
   14344:	cmp	r0, #0
   14348:	beq	1458c <__assert_fail@plt+0x3030>
   1434c:	ldr	r0, [r8, #24]
   14350:	cmp	r6, r0
   14354:	beq	143a8 <__assert_fail@plt+0x2e4c>
   14358:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1435c:	ldr	r2, [sp, #48]	; 0x30
   14360:	ldrb	r1, [r1]
   14364:	tst	r1, #4
   14368:	ldr	r1, [sp, #36]	; 0x24
   1436c:	addne	r1, r0, r2
   14370:	mov	r0, #1
   14374:	str	r1, [sp, #36]	; 0x24
   14378:	str	r0, [sp, #8]
   1437c:	b	143ac <__assert_fail@plt+0x2e50>
   14380:	ldrb	r0, [sl, #20]
   14384:	cmp	r0, #0
   14388:	beq	1439c <__assert_fail@plt+0x2e40>
   1438c:	cmp	r0, #46	; 0x2e
   14390:	ldrbeq	r0, [sl, #21]
   14394:	cmpeq	r0, #0
   14398:	bne	142e4 <__assert_fail@plt+0x2d88>
   1439c:	ldr	r8, [sp, #32]
   143a0:	mov	r6, #0
   143a4:	b	14560 <__assert_fail@plt+0x3004>
   143a8:	ldr	r2, [sp, #48]	; 0x30
   143ac:	ldr	r0, [r8, #36]	; 0x24
   143b0:	sub	r1, r0, r2
   143b4:	cmp	r4, r2
   143b8:	bcc	14630 <__assert_fail@plt+0x30d4>
   143bc:	ldr	r0, [sp, #20]
   143c0:	str	r1, [fp, #-44]	; 0xffffffd4
   143c4:	str	r0, [r9, #48]	; 0x30
   143c8:	ldr	r0, [r8]
   143cc:	str	r4, [r9, #40]	; 0x28
   143d0:	str	r0, [r9, #4]
   143d4:	ldrd	r0, [sl]
   143d8:	strd	r0, [r9, #160]	; 0xa0
   143dc:	ldrb	r0, [r8, #48]	; 0x30
   143e0:	tst	r0, #4
   143e4:	bne	143f4 <__assert_fail@plt+0x2e98>
   143e8:	add	r0, r9, #168	; 0xa8
   143ec:	str	r0, [r9, #24]
   143f0:	b	14410 <__assert_fail@plt+0x2eb4>
   143f4:	ldr	r0, [r9, #28]
   143f8:	ldr	r2, [r9, #52]	; 0x34
   143fc:	add	r1, r9, #168	; 0xa8
   14400:	str	r0, [r9, #24]
   14404:	ldr	r0, [sp, #36]	; 0x24
   14408:	add	r2, r2, #1
   1440c:	bl	11280 <memmove@plt>
   14410:	ldr	r0, [sp, #44]	; 0x2c
   14414:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14418:	ldr	r0, [r0]
   1441c:	ldr	r2, [r1]
   14420:	cmp	r0, #0
   14424:	beq	1444c <__assert_fail@plt+0x2ef0>
   14428:	ands	r0, r2, #1024	; 0x400
   1442c:	bne	1444c <__assert_fail@plt+0x2ef0>
   14430:	mov	r0, r8
   14434:	mov	r1, r9
   14438:	mov	r2, #0
   1443c:	bl	131fc <__assert_fail@plt+0x1ca0>
   14440:	mov	r6, #0
   14444:	strh	r0, [r9, #56]	; 0x38
   14448:	b	144c0 <__assert_fail@plt+0x2f64>
   1444c:	ldrb	r3, [sl, #18]
   14450:	mov	r0, #0
   14454:	tst	r2, #8
   14458:	mov	r1, #0
   1445c:	beq	14480 <__assert_fail@plt+0x2f24>
   14460:	orr	r1, r3, #4
   14464:	cmp	r1, #4
   14468:	mov	r1, #0
   1446c:	beq	14480 <__assert_fail@plt+0x2f24>
   14470:	eor	r1, r3, #10
   14474:	and	r2, r2, #16
   14478:	orrs	r1, r2, r1
   1447c:	movwne	r1, #1
   14480:	mov	r2, #11
   14484:	mov	r6, #0
   14488:	strh	r2, [r9, #56]	; 0x38
   1448c:	sub	r2, r3, #1
   14490:	uxtb	r3, r2
   14494:	cmp	r3, #11
   14498:	sxtbls	r0, r2
   1449c:	movwls	r2, #42944	; 0xa7c0
   144a0:	movtls	r2, #1
   144a4:	ldrls	r0, [r2, r0, lsl #2]
   144a8:	cmp	r1, #0
   144ac:	str	r0, [r9, #80]	; 0x50
   144b0:	mov	r0, #2
   144b4:	movwne	r0, #1
   144b8:	str	r0, [r9, #112]	; 0x70
   144bc:	str	r6, [r9, #116]	; 0x74
   144c0:	cmp	r5, #0
   144c4:	mov	r4, r9
   144c8:	str	r6, [r9, #8]
   144cc:	ldrne	r0, [sp, #40]	; 0x28
   144d0:	movne	r4, r5
   144d4:	strne	r9, [r0, #8]
   144d8:	movw	r0, #10000	; 0x2710
   144dc:	cmp	r7, r0
   144e0:	bne	14534 <__assert_fail@plt+0x2fd8>
   144e4:	ldr	r0, [sp, #44]	; 0x2c
   144e8:	ldr	r0, [r0]
   144ec:	cmp	r0, #0
   144f0:	bne	14534 <__assert_fail@plt+0x2fd8>
   144f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   144f8:	ldr	r0, [sp, #32]
   144fc:	bl	14c98 <__assert_fail@plt+0x373c>
   14500:	mov	r1, #0
   14504:	str	r1, [sp, #16]
   14508:	movw	r1, #19778	; 0x4d42
   1450c:	movt	r1, #65363	; 0xff53
   14510:	cmp	r0, r1
   14514:	movwne	r1, #26985	; 0x6969
   14518:	cmpne	r0, r1
   1451c:	beq	14534 <__assert_fail@plt+0x2fd8>
   14520:	movw	r1, #6548	; 0x1994
   14524:	movt	r1, #258	; 0x102
   14528:	cmp	r0, r1
   1452c:	movne	r0, #1
   14530:	strne	r0, [sp, #16]
   14534:	ldr	r0, [sp, #24]
   14538:	add	r7, r7, #1
   1453c:	cmp	r0, r7
   14540:	mov	r0, #0
   14544:	movwls	r0, #15
   14548:	cmp	r0, #0
   1454c:	bne	1467c <__assert_fail@plt+0x3120>
   14550:	str	r9, [sp, #40]	; 0x28
   14554:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14558:	ldr	r8, [sp, #32]
   1455c:	mov	r5, r4
   14560:	ldr	r4, [r8, #12]
   14564:	cmp	r4, #0
   14568:	bne	142ac <__assert_fail@plt+0x2d50>
   1456c:	ldr	r0, [sp, #8]
   14570:	ldr	r4, [sp, #4]
   14574:	b	14620 <__assert_fail@plt+0x30c4>
   14578:	ldr	r4, [sp, #4]
   1457c:	mov	r7, #0
   14580:	mov	r0, #0
   14584:	str	r0, [sp, #16]
   14588:	b	14748 <__assert_fail@plt+0x31ec>
   1458c:	ldr	r4, [sp, #28]
   14590:	mov	r0, r9
   14594:	ldr	r8, [r4]
   14598:	bl	12dc4 <__assert_fail@plt+0x1868>
   1459c:	mov	r0, r5
   145a0:	bl	134e4 <__assert_fail@plt+0x1f88>
   145a4:	ldr	r6, [sp, #32]
   145a8:	ldr	r0, [r6, #12]
   145ac:	bl	11538 <closedir@plt>
   145b0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   145b4:	mov	r5, #0
   145b8:	mov	r0, #7
   145bc:	str	r5, [r6, #12]
   145c0:	strh	r0, [r6, #56]	; 0x38
   145c4:	ldr	r0, [r7]
   145c8:	orr	r0, r0, #8192	; 0x2000
   145cc:	str	r0, [r7]
   145d0:	str	r8, [r4]
   145d4:	b	1488c <__assert_fail@plt+0x3330>
   145d8:	ldr	r0, [sp, #28]
   145dc:	ldr	r0, [r0]
   145e0:	cmp	r0, #0
   145e4:	beq	14600 <__assert_fail@plt+0x30a4>
   145e8:	str	r0, [r8, #32]
   145ec:	ldr	r0, [sp, #12]
   145f0:	orrs	r0, r0, r7
   145f4:	mov	r0, #4
   145f8:	movwne	r0, #7
   145fc:	strh	r0, [r8, #56]	; 0x38
   14600:	ldr	r0, [r8, #12]
   14604:	ldr	r4, [sp, #4]
   14608:	cmp	r0, #0
   1460c:	beq	146b0 <__assert_fail@plt+0x3154>
   14610:	bl	11538 <closedir@plt>
   14614:	mov	r0, #0
   14618:	str	r0, [r8, #12]
   1461c:	ldr	r0, [sp, #8]
   14620:	tst	r0, #1
   14624:	ldr	r6, [sp]
   14628:	bne	146c0 <__assert_fail@plt+0x3164>
   1462c:	b	14748 <__assert_fail@plt+0x31ec>
   14630:	mov	r0, r9
   14634:	bl	12dc4 <__assert_fail@plt+0x1868>
   14638:	mov	r0, r5
   1463c:	bl	134e4 <__assert_fail@plt+0x1f88>
   14640:	ldr	r4, [sp, #32]
   14644:	ldr	r0, [r4, #12]
   14648:	bl	11538 <closedir@plt>
   1464c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14650:	mov	r5, #0
   14654:	mov	r0, #7
   14658:	ldr	r1, [sp, #28]
   1465c:	str	r5, [r4, #12]
   14660:	strh	r0, [r4, #56]	; 0x38
   14664:	ldr	r0, [r7]
   14668:	orr	r0, r0, #8192	; 0x2000
   1466c:	str	r0, [r7]
   14670:	mov	r0, #36	; 0x24
   14674:	str	r0, [r1]
   14678:	b	1488c <__assert_fail@plt+0x3330>
   1467c:	ldr	r6, [sp]
   14680:	cmp	r0, #15
   14684:	bne	14888 <__assert_fail@plt+0x332c>
   14688:	mov	r5, r4
   1468c:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14690:	ldr	r4, [sp, #4]
   14694:	ldr	r0, [sp, #8]
   14698:	ldr	r8, [sp, #32]
   1469c:	b	146b8 <__assert_fail@plt+0x315c>
   146a0:	bl	11400 <__errno_location@plt>
   146a4:	mov	r1, #12
   146a8:	str	r1, [r0]
   146ac:	b	1488c <__assert_fail@plt+0x3330>
   146b0:	ldr	r6, [sp]
   146b4:	ldr	r0, [sp, #8]
   146b8:	tst	r0, #1
   146bc:	beq	14748 <__assert_fail@plt+0x31ec>
   146c0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   146c4:	ldr	r1, [r0, #4]
   146c8:	ldr	r0, [r0, #24]
   146cc:	b	146f4 <__assert_fail@plt+0x3198>
   146d0:	ldr	r2, [r1, #24]
   146d4:	add	r3, r1, #168	; 0xa8
   146d8:	cmp	r2, r3
   146dc:	ldrne	r3, [r1, #28]
   146e0:	subne	r2, r2, r3
   146e4:	addne	r2, r0, r2
   146e8:	strne	r2, [r1, #24]
   146ec:	str	r0, [r1, #28]
   146f0:	ldr	r1, [r1, #8]
   146f4:	cmp	r1, #0
   146f8:	bne	146d0 <__assert_fail@plt+0x3174>
   146fc:	ldr	r1, [r5, #48]	; 0x30
   14700:	cmp	r1, #0
   14704:	blt	14748 <__assert_fail@plt+0x31ec>
   14708:	mov	r1, r5
   1470c:	ldr	r2, [r1, #24]
   14710:	add	r3, r1, #168	; 0xa8
   14714:	cmp	r2, r3
   14718:	ldrne	r3, [r1, #28]
   1471c:	subne	r2, r2, r3
   14720:	addne	r2, r0, r2
   14724:	strne	r2, [r1, #24]
   14728:	str	r0, [r1, #28]
   1472c:	ldr	r2, [r1, #8]
   14730:	cmp	r2, #0
   14734:	ldreq	r2, [r1, #4]
   14738:	ldr	r1, [r2, #48]	; 0x30
   1473c:	cmn	r1, #1
   14740:	mov	r1, r2
   14744:	bgt	1470c <__assert_fail@plt+0x31b0>
   14748:	ldrb	r0, [r9]
   1474c:	tst	r0, #4
   14750:	beq	14780 <__assert_fail@plt+0x3224>
   14754:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14758:	ldr	r2, [sp, #36]	; 0x24
   1475c:	ldr	r3, [sp, #48]	; 0x30
   14760:	ldr	r0, [r0, #36]	; 0x24
   14764:	sub	r1, r2, #1
   14768:	cmp	r3, r0
   1476c:	mov	r0, #0
   14770:	moveq	r2, r1
   14774:	cmp	r7, #0
   14778:	moveq	r2, r1
   1477c:	strb	r0, [r2]
   14780:	ldr	r0, [sp, #12]
   14784:	cmp	r0, #0
   14788:	movwne	r0, #1
   1478c:	orrs	r0, r0, r6
   14790:	beq	147bc <__assert_fail@plt+0x3260>
   14794:	cmp	r7, #0
   14798:	bne	147f0 <__assert_fail@plt+0x3294>
   1479c:	cmp	r4, #3
   147a0:	bne	14880 <__assert_fail@plt+0x3324>
   147a4:	ldrh	r0, [r8, #56]	; 0x38
   147a8:	cmp	r0, #4
   147ac:	cmpne	r0, #7
   147b0:	movne	r0, #6
   147b4:	strhne	r0, [r8, #56]	; 0x38
   147b8:	b	14880 <__assert_fail@plt+0x3324>
   147bc:	cmp	r4, #1
   147c0:	cmpne	r7, #0
   147c4:	bne	147f0 <__assert_fail@plt+0x3294>
   147c8:	ldr	r0, [r8, #48]	; 0x30
   147cc:	cmp	r0, #0
   147d0:	beq	1485c <__assert_fail@plt+0x3300>
   147d4:	ldr	r1, [r8, #4]
   147d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   147dc:	movw	r3, #42932	; 0xa7b4
   147e0:	mvn	r2, #0
   147e4:	movt	r3, #1
   147e8:	bl	13d84 <__assert_fail@plt+0x2828>
   147ec:	b	14864 <__assert_fail@plt+0x3308>
   147f0:	ldr	r0, [sp, #16]
   147f4:	tst	r0, #1
   147f8:	beq	1482c <__assert_fail@plt+0x32d0>
   147fc:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14800:	movw	r0, #19552	; 0x4c60
   14804:	mov	r1, r5
   14808:	mov	r2, r7
   1480c:	movt	r0, #1
   14810:	str	r0, [r4, #44]	; 0x2c
   14814:	mov	r0, r4
   14818:	bl	13330 <__assert_fail@plt+0x1dd4>
   1481c:	mov	r5, r0
   14820:	mov	r0, #0
   14824:	str	r0, [r4, #44]	; 0x2c
   14828:	b	1488c <__assert_fail@plt+0x3330>
   1482c:	cmp	r7, #2
   14830:	bcc	1488c <__assert_fail@plt+0x3330>
   14834:	ldr	r0, [sp, #44]	; 0x2c
   14838:	ldr	r0, [r0]
   1483c:	cmp	r0, #0
   14840:	beq	1488c <__assert_fail@plt+0x3330>
   14844:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14848:	mov	r1, r5
   1484c:	mov	r2, r7
   14850:	bl	13330 <__assert_fail@plt+0x1dd4>
   14854:	mov	r5, r0
   14858:	b	1488c <__assert_fail@plt+0x3330>
   1485c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14860:	bl	148f0 <__assert_fail@plt+0x3394>
   14864:	cmp	r0, #0
   14868:	beq	14794 <__assert_fail@plt+0x3238>
   1486c:	mov	r0, #7
   14870:	strh	r0, [r8, #56]	; 0x38
   14874:	ldr	r0, [r9]
   14878:	orr	r0, r0, #8192	; 0x2000
   1487c:	str	r0, [r9]
   14880:	mov	r0, r5
   14884:	bl	134e4 <__assert_fail@plt+0x1f88>
   14888:	mov	r5, #0
   1488c:	mov	r0, r5
   14890:	sub	sp, fp, #28
   14894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14898:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1489c:	mov	r0, r8
   148a0:	bl	14c98 <__assert_fail@plt+0x373c>
   148a4:	movw	r1, #26984	; 0x6968
   148a8:	cmp	r0, r1
   148ac:	ble	148d8 <__assert_fail@plt+0x337c>
   148b0:	movw	r1, #26985	; 0x6969
   148b4:	cmp	r0, r1
   148b8:	movwne	r1, #16719	; 0x414f
   148bc:	movtne	r1, #21318	; 0x5346
   148c0:	cmpne	r0, r1
   148c4:	beq	14120 <__assert_fail@plt+0x2bc4>
   148c8:	movw	r1, #40864	; 0x9fa0
   148cc:	cmp	r0, r1
   148d0:	beq	14120 <__assert_fail@plt+0x2bc4>
   148d4:	b	140e8 <__assert_fail@plt+0x2b8c>
   148d8:	movw	r1, #19778	; 0x4d42
   148dc:	movt	r1, #65363	; 0xff53
   148e0:	cmp	r0, r1
   148e4:	cmpne	r0, #0
   148e8:	beq	14120 <__assert_fail@plt+0x2bc4>
   148ec:	b	140e8 <__assert_fail@plt+0x2b8c>
   148f0:	push	{r4, r5, fp, lr}
   148f4:	add	fp, sp, #8
   148f8:	mov	r4, r0
   148fc:	ldr	r0, [r0, #48]	; 0x30
   14900:	mov	r5, #0
   14904:	tst	r0, #4
   14908:	bne	1493c <__assert_fail@plt+0x33e0>
   1490c:	tst	r0, #512	; 0x200
   14910:	bne	1492c <__assert_fail@plt+0x33d0>
   14914:	ldr	r0, [r4, #28]
   14918:	bl	114c0 <fchdir@plt>
   1491c:	mov	r5, r0
   14920:	cmp	r0, #0
   14924:	movwne	r5, #1
   14928:	b	1493c <__assert_fail@plt+0x33e0>
   1492c:	mov	r0, r4
   14930:	mvn	r1, #99	; 0x63
   14934:	mov	r2, #1
   14938:	bl	14a00 <__assert_fail@plt+0x34a4>
   1493c:	add	r0, r4, #60	; 0x3c
   14940:	bl	13648 <__assert_fail@plt+0x20ec>
   14944:	mov	r0, r5
   14948:	pop	{r4, r5, fp, pc}
   1494c:	push	{r4, r5, r6, r7, fp, lr}
   14950:	add	fp, sp, #16
   14954:	mov	r6, r0
   14958:	ldrh	r0, [r0, #48]	; 0x30
   1495c:	mov	r4, r1
   14960:	movw	r1, #258	; 0x102
   14964:	tst	r0, r1
   14968:	beq	149d8 <__assert_fail@plt+0x347c>
   1496c:	mov	r0, #24
   14970:	bl	18d14 <__assert_fail@plt+0x77b8>
   14974:	mov	r5, #0
   14978:	cmp	r0, #0
   1497c:	beq	149f8 <__assert_fail@plt+0x349c>
   14980:	mov	r7, r0
   14984:	ldrd	r0, [r4, #64]	; 0x40
   14988:	add	r2, r7, #8
   1498c:	stm	r7, {r0, r1}
   14990:	ldrd	r0, [r4, #160]	; 0xa0
   14994:	stm	r2, {r0, r1, r4}
   14998:	mov	r1, r7
   1499c:	ldr	r0, [r6, #56]	; 0x38
   149a0:	bl	15bf8 <__assert_fail@plt+0x469c>
   149a4:	cmp	r0, r7
   149a8:	beq	149d0 <__assert_fail@plt+0x3474>
   149ac:	mov	r6, r0
   149b0:	mov	r0, r7
   149b4:	bl	12dc4 <__assert_fail@plt+0x1868>
   149b8:	cmp	r6, #0
   149bc:	beq	149f8 <__assert_fail@plt+0x349c>
   149c0:	ldr	r0, [r6, #16]
   149c4:	mov	r1, #2
   149c8:	strh	r1, [r4, #56]	; 0x38
   149cc:	str	r0, [r4]
   149d0:	mov	r5, #1
   149d4:	b	149f8 <__assert_fail@plt+0x349c>
   149d8:	ldr	r0, [r6, #56]	; 0x38
   149dc:	add	r1, r4, #64	; 0x40
   149e0:	bl	18e30 <__assert_fail@plt+0x78d4>
   149e4:	cmp	r0, #0
   149e8:	mov	r5, #1
   149ec:	movne	r0, #2
   149f0:	strhne	r0, [r4, #56]	; 0x38
   149f4:	strne	r4, [r4]
   149f8:	mov	r0, r5
   149fc:	pop	{r4, r5, r6, r7, fp, pc}
   14a00:	push	{r4, r5, fp, lr}
   14a04:	add	fp, sp, #8
   14a08:	mov	r4, r1
   14a0c:	ldr	r1, [r0, #32]
   14a10:	mov	r5, r0
   14a14:	cmp	r1, r4
   14a18:	bne	14a24 <__assert_fail@plt+0x34c8>
   14a1c:	cmn	r1, #100	; 0x64
   14a20:	bne	14a64 <__assert_fail@plt+0x3508>
   14a24:	cmp	r2, #0
   14a28:	beq	14a40 <__assert_fail@plt+0x34e4>
   14a2c:	add	r0, r5, #60	; 0x3c
   14a30:	bl	15d84 <__assert_fail@plt+0x4828>
   14a34:	cmp	r0, #0
   14a38:	bge	14a58 <__assert_fail@plt+0x34fc>
   14a3c:	b	14a5c <__assert_fail@plt+0x3500>
   14a40:	cmp	r1, #0
   14a44:	blt	14a5c <__assert_fail@plt+0x3500>
   14a48:	ldr	r0, [r5, #48]	; 0x30
   14a4c:	ands	r0, r0, #4
   14a50:	bne	14a5c <__assert_fail@plt+0x3500>
   14a54:	mov	r0, r1
   14a58:	bl	11520 <close@plt>
   14a5c:	str	r4, [r5, #32]
   14a60:	pop	{r4, r5, fp, pc}
   14a64:	bl	11514 <abort@plt>
   14a68:	cmp	r2, #5
   14a6c:	movcc	r0, #0
   14a70:	strhcc	r2, [r1, #60]	; 0x3c
   14a74:	bxcc	lr
   14a78:	push	{fp, lr}
   14a7c:	mov	fp, sp
   14a80:	bl	11400 <__errno_location@plt>
   14a84:	mov	r1, #22
   14a88:	str	r1, [r0]
   14a8c:	mov	r0, #1
   14a90:	pop	{fp, pc}
   14a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a98:	add	fp, sp, #28
   14a9c:	sub	sp, sp, #4
   14aa0:	mov	r5, r0
   14aa4:	orr	r0, r1, #4096	; 0x1000
   14aa8:	cmp	r0, #4096	; 0x1000
   14aac:	bne	14aec <__assert_fail@plt+0x3590>
   14ab0:	ldr	r6, [r5]
   14ab4:	mov	r7, r1
   14ab8:	bl	11400 <__errno_location@plt>
   14abc:	mov	r4, #0
   14ac0:	mov	sl, r0
   14ac4:	str	r4, [r0]
   14ac8:	ldrb	r0, [r5, #49]	; 0x31
   14acc:	tst	r0, #32
   14ad0:	bne	14afc <__assert_fail@plt+0x35a0>
   14ad4:	ldrh	r0, [r6, #56]	; 0x38
   14ad8:	cmp	r0, #1
   14adc:	beq	14b08 <__assert_fail@plt+0x35ac>
   14ae0:	cmp	r0, #9
   14ae4:	ldreq	r4, [r6, #8]
   14ae8:	b	14afc <__assert_fail@plt+0x35a0>
   14aec:	bl	11400 <__errno_location@plt>
   14af0:	mov	r1, #22
   14af4:	mov	r4, #0
   14af8:	str	r1, [r0]
   14afc:	mov	r0, r4
   14b00:	sub	sp, fp, #28
   14b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b08:	ldr	r0, [r5, #4]
   14b0c:	cmp	r0, #0
   14b10:	blne	134e4 <__assert_fail@plt+0x1f88>
   14b14:	cmp	r7, #4096	; 0x1000
   14b18:	mov	r9, #1
   14b1c:	ldreq	r0, [r5, #48]	; 0x30
   14b20:	moveq	r9, #2
   14b24:	orreq	r0, r0, #4096	; 0x1000
   14b28:	streq	r0, [r5, #48]	; 0x30
   14b2c:	ldr	r0, [r6, #48]	; 0x30
   14b30:	cmp	r0, #0
   14b34:	bne	14bb0 <__assert_fail@plt+0x3654>
   14b38:	ldr	r0, [r6, #24]
   14b3c:	ldrb	r0, [r0]
   14b40:	cmp	r0, #47	; 0x2f
   14b44:	beq	14bb0 <__assert_fail@plt+0x3654>
   14b48:	ldrb	r0, [r5, #48]	; 0x30
   14b4c:	tst	r0, #4
   14b50:	bne	14bb0 <__assert_fail@plt+0x3654>
   14b54:	movw	r1, #42933	; 0xa7b5
   14b58:	mov	r0, r5
   14b5c:	movt	r1, #1
   14b60:	bl	134b4 <__assert_fail@plt+0x1f58>
   14b64:	cmn	r0, #1
   14b68:	ble	14bc8 <__assert_fail@plt+0x366c>
   14b6c:	mov	r8, r0
   14b70:	mov	r0, r5
   14b74:	mov	r1, r9
   14b78:	bl	13f5c <__assert_fail@plt+0x2a00>
   14b7c:	str	r0, [r5, #4]
   14b80:	ldrb	r0, [r5, #49]	; 0x31
   14b84:	tst	r0, #2
   14b88:	bne	14bd4 <__assert_fail@plt+0x3678>
   14b8c:	mov	r0, r8
   14b90:	bl	114c0 <fchdir@plt>
   14b94:	cmp	r0, #0
   14b98:	beq	14be8 <__assert_fail@plt+0x368c>
   14b9c:	ldr	r5, [sl]
   14ba0:	mov	r0, r8
   14ba4:	bl	11520 <close@plt>
   14ba8:	str	r5, [sl]
   14bac:	b	14afc <__assert_fail@plt+0x35a0>
   14bb0:	mov	r0, r5
   14bb4:	mov	r1, r9
   14bb8:	bl	13f5c <__assert_fail@plt+0x2a00>
   14bbc:	mov	r4, r0
   14bc0:	str	r0, [r5, #4]
   14bc4:	b	14afc <__assert_fail@plt+0x35a0>
   14bc8:	mov	r4, #0
   14bcc:	str	r4, [r5, #4]
   14bd0:	b	14afc <__assert_fail@plt+0x35a0>
   14bd4:	mov	r0, r5
   14bd8:	mov	r1, r8
   14bdc:	mov	r2, #1
   14be0:	bl	14a00 <__assert_fail@plt+0x34a4>
   14be4:	b	14bf0 <__assert_fail@plt+0x3694>
   14be8:	mov	r0, r8
   14bec:	bl	11520 <close@plt>
   14bf0:	ldr	r4, [r5, #4]
   14bf4:	b	14afc <__assert_fail@plt+0x35a0>
   14bf8:	push	{fp, lr}
   14bfc:	mov	fp, sp
   14c00:	mov	r2, r1
   14c04:	ldrd	r0, [r0, #8]
   14c08:	mov	r3, #0
   14c0c:	bl	19494 <__assert_fail@plt+0x7f38>
   14c10:	mov	r0, r2
   14c14:	pop	{fp, pc}
   14c18:	push	{r4, r5, fp, lr}
   14c1c:	add	fp, sp, #8
   14c20:	ldrd	r2, [r1, #8]
   14c24:	ldrd	r4, [r0, #8]
   14c28:	eor	r3, r5, r3
   14c2c:	eor	r2, r4, r2
   14c30:	orrs	r2, r2, r3
   14c34:	mov	r2, #0
   14c38:	bne	14c58 <__assert_fail@plt+0x36fc>
   14c3c:	ldrd	r2, [r1]
   14c40:	ldrd	r0, [r0]
   14c44:	eor	r1, r1, r3
   14c48:	eor	r0, r0, r2
   14c4c:	orr	r0, r0, r1
   14c50:	clz	r0, r0
   14c54:	lsr	r2, r0, #5
   14c58:	mov	r0, r2
   14c5c:	pop	{r4, r5, fp, pc}
   14c60:	push	{r4, r5, fp, lr}
   14c64:	add	fp, sp, #8
   14c68:	ldr	r0, [r0]
   14c6c:	ldrd	r2, [r0, #160]	; 0xa0
   14c70:	ldr	r0, [r1]
   14c74:	ldrd	r4, [r0, #160]	; 0xa0
   14c78:	mov	r0, #0
   14c7c:	subs	r1, r4, r2
   14c80:	sbcs	r1, r5, r3
   14c84:	movwcc	r0, #1
   14c88:	subs	r1, r2, r4
   14c8c:	sbcs	r1, r3, r5
   14c90:	subcc	r0, r0, #1
   14c94:	pop	{r4, r5, fp, pc}
   14c98:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c9c:	add	fp, sp, #24
   14ca0:	sub	sp, sp, #96	; 0x60
   14ca4:	ldr	r7, [r0, #44]	; 0x2c
   14ca8:	mov	r4, r0
   14cac:	mov	r5, #0
   14cb0:	ldrb	r0, [r7, #49]	; 0x31
   14cb4:	tst	r0, #2
   14cb8:	beq	14dac <__assert_fail@plt+0x3850>
   14cbc:	ldr	r6, [r7, #52]	; 0x34
   14cc0:	mov	r9, r1
   14cc4:	cmp	r6, #0
   14cc8:	bne	14d08 <__assert_fail@plt+0x37ac>
   14ccc:	movw	r0, #11716	; 0x2dc4
   14cd0:	movw	r2, #19896	; 0x4db8
   14cd4:	movw	r3, #19928	; 0x4dd8
   14cd8:	mov	r1, #0
   14cdc:	mov	r8, #0
   14ce0:	movt	r0, #1
   14ce4:	movt	r2, #1
   14ce8:	movt	r3, #1
   14cec:	str	r0, [sp]
   14cf0:	mov	r0, #13
   14cf4:	bl	15270 <__assert_fail@plt+0x3d14>
   14cf8:	mov	r6, r0
   14cfc:	cmp	r0, #0
   14d00:	str	r0, [r7, #52]	; 0x34
   14d04:	beq	14d38 <__assert_fail@plt+0x37dc>
   14d08:	ldrd	r0, [r4, #64]	; 0x40
   14d0c:	str	r1, [sp, #12]
   14d10:	str	r0, [sp, #8]
   14d14:	add	r1, sp, #8
   14d18:	mov	r0, r6
   14d1c:	bl	14fd0 <__assert_fail@plt+0x3a74>
   14d20:	cmp	r0, #0
   14d24:	beq	14d30 <__assert_fail@plt+0x37d4>
   14d28:	ldr	r5, [r0, #8]
   14d2c:	b	14dac <__assert_fail@plt+0x3850>
   14d30:	mov	r8, #1
   14d34:	b	14d3c <__assert_fail@plt+0x37e0>
   14d38:	mov	r6, #0
   14d3c:	cmp	r9, #0
   14d40:	blt	14dac <__assert_fail@plt+0x3850>
   14d44:	add	r1, sp, #8
   14d48:	mov	r0, r9
   14d4c:	bl	11214 <fstatfs64@plt>
   14d50:	cmp	r0, #0
   14d54:	bne	14dac <__assert_fail@plt+0x3850>
   14d58:	cmp	r8, #0
   14d5c:	beq	14da8 <__assert_fail@plt+0x384c>
   14d60:	mov	r0, #16
   14d64:	bl	18d14 <__assert_fail@plt+0x77b8>
   14d68:	cmp	r0, #0
   14d6c:	beq	14da8 <__assert_fail@plt+0x384c>
   14d70:	mov	r5, r0
   14d74:	ldrd	r0, [r4, #64]	; 0x40
   14d78:	ldr	r2, [sp, #8]
   14d7c:	stm	r5, {r0, r1, r2}
   14d80:	mov	r0, r6
   14d84:	mov	r1, r5
   14d88:	bl	15bf8 <__assert_fail@plt+0x469c>
   14d8c:	cmp	r0, #0
   14d90:	beq	14da0 <__assert_fail@plt+0x3844>
   14d94:	cmp	r0, r5
   14d98:	beq	14da8 <__assert_fail@plt+0x384c>
   14d9c:	bl	11514 <abort@plt>
   14da0:	mov	r0, r5
   14da4:	bl	12dc4 <__assert_fail@plt+0x1868>
   14da8:	ldr	r5, [sp, #8]
   14dac:	mov	r0, r5
   14db0:	sub	sp, fp, #24
   14db4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14db8:	push	{fp, lr}
   14dbc:	mov	fp, sp
   14dc0:	mov	r2, r1
   14dc4:	ldrd	r0, [r0]
   14dc8:	mov	r3, #0
   14dcc:	bl	19494 <__assert_fail@plt+0x7f38>
   14dd0:	mov	r0, r2
   14dd4:	pop	{fp, pc}
   14dd8:	ldrd	r2, [r1]
   14ddc:	ldrd	r0, [r0]
   14de0:	eor	r1, r1, r3
   14de4:	eor	r0, r0, r2
   14de8:	orr	r0, r0, r1
   14dec:	clz	r0, r0
   14df0:	lsr	r0, r0, #5
   14df4:	bx	lr
   14df8:	ldr	r0, [r0, #8]
   14dfc:	bx	lr
   14e00:	ldr	r0, [r0, #12]
   14e04:	bx	lr
   14e08:	ldr	r0, [r0, #16]
   14e0c:	bx	lr
   14e10:	ldm	r0, {r2, ip}
   14e14:	mov	r0, #0
   14e18:	cmp	r2, ip
   14e1c:	bxcs	lr
   14e20:	mov	r0, #0
   14e24:	ldr	r1, [r2]
   14e28:	cmp	r1, #0
   14e2c:	beq	14e50 <__assert_fail@plt+0x38f4>
   14e30:	mov	r3, #0
   14e34:	mov	r1, r2
   14e38:	ldr	r1, [r1, #4]
   14e3c:	add	r3, r3, #1
   14e40:	cmp	r1, #0
   14e44:	bne	14e38 <__assert_fail@plt+0x38dc>
   14e48:	cmp	r3, r0
   14e4c:	movhi	r0, r3
   14e50:	add	r2, r2, #8
   14e54:	cmp	r2, ip
   14e58:	bcc	14e24 <__assert_fail@plt+0x38c8>
   14e5c:	bx	lr
   14e60:	push	{fp, lr}
   14e64:	mov	fp, sp
   14e68:	ldm	r0, {r3, ip}
   14e6c:	mov	lr, #0
   14e70:	mov	r1, #0
   14e74:	cmp	r3, ip
   14e78:	bcs	14eb4 <__assert_fail@plt+0x3958>
   14e7c:	mov	r1, #0
   14e80:	mov	lr, #0
   14e84:	ldr	r2, [r3]
   14e88:	cmp	r2, #0
   14e8c:	beq	14ea8 <__assert_fail@plt+0x394c>
   14e90:	mov	r2, r3
   14e94:	ldr	r2, [r2, #4]
   14e98:	add	r1, r1, #1
   14e9c:	cmp	r2, #0
   14ea0:	bne	14e94 <__assert_fail@plt+0x3938>
   14ea4:	add	lr, lr, #1
   14ea8:	add	r3, r3, #8
   14eac:	cmp	r3, ip
   14eb0:	bcc	14e84 <__assert_fail@plt+0x3928>
   14eb4:	ldr	r2, [r0, #12]
   14eb8:	cmp	lr, r2
   14ebc:	bne	14ed4 <__assert_fail@plt+0x3978>
   14ec0:	ldr	r2, [r0, #16]
   14ec4:	mov	r0, #1
   14ec8:	cmp	r1, r2
   14ecc:	movne	r0, #0
   14ed0:	pop	{fp, pc}
   14ed4:	mov	r0, #0
   14ed8:	pop	{fp, pc}
   14edc:	nop	{0}
   14ee0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ee4:	add	fp, sp, #24
   14ee8:	sub	sp, sp, #8
   14eec:	ldr	r6, [r0]
   14ef0:	ldmib	r0, {r2, r7, r8}
   14ef4:	ldr	r3, [r0, #16]
   14ef8:	mov	r4, r1
   14efc:	mov	r5, #0
   14f00:	cmp	r6, r2
   14f04:	bcs	14f44 <__assert_fail@plt+0x39e8>
   14f08:	mov	r5, #0
   14f0c:	ldr	r0, [r6]
   14f10:	cmp	r0, #0
   14f14:	beq	14f38 <__assert_fail@plt+0x39dc>
   14f18:	mov	r0, #0
   14f1c:	mov	r1, r6
   14f20:	ldr	r1, [r1, #4]
   14f24:	add	r0, r0, #1
   14f28:	cmp	r1, #0
   14f2c:	bne	14f20 <__assert_fail@plt+0x39c4>
   14f30:	cmp	r0, r5
   14f34:	movhi	r5, r0
   14f38:	add	r6, r6, #8
   14f3c:	cmp	r6, r2
   14f40:	bcc	14f0c <__assert_fail@plt+0x39b0>
   14f44:	movw	r2, #42992	; 0xa7f0
   14f48:	mov	r0, r4
   14f4c:	mov	r1, #1
   14f50:	movt	r2, #1
   14f54:	bl	1143c <__fprintf_chk@plt>
   14f58:	movw	r2, #43016	; 0xa808
   14f5c:	mov	r0, r4
   14f60:	mov	r1, #1
   14f64:	mov	r3, r7
   14f68:	movt	r2, #1
   14f6c:	bl	1143c <__fprintf_chk@plt>
   14f70:	vldr	d16, [pc, #80]	; 14fc8 <__assert_fail@plt+0x3a6c>
   14f74:	vmov	s0, r8
   14f78:	movw	r2, #43040	; 0xa820
   14f7c:	mov	r0, r4
   14f80:	mov	r1, #1
   14f84:	mov	r3, r8
   14f88:	vcvt.f64.u32	d17, s0
   14f8c:	vmov	s0, r7
   14f90:	movt	r2, #1
   14f94:	vcvt.f64.u32	d18, s0
   14f98:	vmul.f64	d16, d17, d16
   14f9c:	vdiv.f64	d16, d16, d18
   14fa0:	vstr	d16, [sp]
   14fa4:	bl	1143c <__fprintf_chk@plt>
   14fa8:	movw	r2, #43073	; 0xa841
   14fac:	mov	r0, r4
   14fb0:	mov	r1, #1
   14fb4:	mov	r3, r5
   14fb8:	movt	r2, #1
   14fbc:	sub	sp, fp, #24
   14fc0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fc4:	b	1143c <__fprintf_chk@plt>
   14fc8:	andeq	r0, r0, r0
   14fcc:	subsmi	r0, r9, r0
   14fd0:	push	{r4, r5, r6, r7, fp, lr}
   14fd4:	add	fp, sp, #16
   14fd8:	mov	r4, r1
   14fdc:	ldr	r1, [r0, #8]
   14fe0:	ldr	r2, [r0, #24]
   14fe4:	mov	r5, r0
   14fe8:	mov	r0, r4
   14fec:	blx	r2
   14ff0:	ldr	r1, [r5, #8]
   14ff4:	cmp	r0, r1
   14ff8:	bcs	15058 <__assert_fail@plt+0x3afc>
   14ffc:	ldr	r7, [r5]
   15000:	mov	r6, #0
   15004:	ldr	r1, [r7, r0, lsl #3]!
   15008:	cmp	r1, #0
   1500c:	cmpne	r7, #0
   15010:	bne	15040 <__assert_fail@plt+0x3ae4>
   15014:	mov	r0, r6
   15018:	pop	{r4, r5, r6, r7, fp, pc}
   1501c:	ldr	r2, [r5, #28]
   15020:	mov	r0, r4
   15024:	blx	r2
   15028:	cmp	r0, #0
   1502c:	bne	15050 <__assert_fail@plt+0x3af4>
   15030:	ldr	r7, [r7, #4]
   15034:	cmp	r7, #0
   15038:	beq	15014 <__assert_fail@plt+0x3ab8>
   1503c:	ldr	r1, [r7]
   15040:	cmp	r1, r4
   15044:	bne	1501c <__assert_fail@plt+0x3ac0>
   15048:	mov	r6, r4
   1504c:	b	15014 <__assert_fail@plt+0x3ab8>
   15050:	ldr	r6, [r7]
   15054:	b	15014 <__assert_fail@plt+0x3ab8>
   15058:	bl	11514 <abort@plt>
   1505c:	ldr	r1, [r0, #16]
   15060:	cmp	r1, #0
   15064:	moveq	r0, #0
   15068:	bxeq	lr
   1506c:	ldm	r0, {r1, r2}
   15070:	b	15080 <__assert_fail@plt+0x3b24>
   15074:	ldr	r0, [r1], #8
   15078:	cmp	r0, #0
   1507c:	bxne	lr
   15080:	cmp	r1, r2
   15084:	bcc	15074 <__assert_fail@plt+0x3b18>
   15088:	push	{fp, lr}
   1508c:	mov	fp, sp
   15090:	bl	11514 <abort@plt>
   15094:	push	{r4, r5, fp, lr}
   15098:	add	fp, sp, #8
   1509c:	mov	r5, r1
   150a0:	ldr	r1, [r0, #8]
   150a4:	ldr	r2, [r0, #24]
   150a8:	mov	r4, r0
   150ac:	mov	r0, r5
   150b0:	blx	r2
   150b4:	ldr	r1, [r4, #8]
   150b8:	cmp	r0, r1
   150bc:	bcs	15118 <__assert_fail@plt+0x3bbc>
   150c0:	ldr	r1, [r4]
   150c4:	add	r2, r1, r0, lsl #3
   150c8:	ldr	r3, [r2]
   150cc:	ldr	r2, [r2, #4]
   150d0:	cmp	r3, r5
   150d4:	beq	150e4 <__assert_fail@plt+0x3b88>
   150d8:	cmp	r2, #0
   150dc:	bne	150c8 <__assert_fail@plt+0x3b6c>
   150e0:	b	150f0 <__assert_fail@plt+0x3b94>
   150e4:	cmp	r2, #0
   150e8:	ldrne	r0, [r2]
   150ec:	popne	{r4, r5, fp, pc}
   150f0:	ldr	r2, [r4, #4]
   150f4:	add	r0, r1, r0, lsl #3
   150f8:	add	r1, r0, #8
   150fc:	cmp	r1, r2
   15100:	movcs	r0, #0
   15104:	popcs	{r4, r5, fp, pc}
   15108:	ldr	r0, [r1], #8
   1510c:	cmp	r0, #0
   15110:	popne	{r4, r5, fp, pc}
   15114:	b	150fc <__assert_fail@plt+0x3ba0>
   15118:	bl	11514 <abort@plt>
   1511c:	push	{r4, r5, fp, lr}
   15120:	add	fp, sp, #8
   15124:	ldm	r0, {r5, lr}
   15128:	mov	ip, r0
   1512c:	mov	r0, #0
   15130:	cmp	r5, lr
   15134:	bcs	15180 <__assert_fail@plt+0x3c24>
   15138:	mov	r0, #0
   1513c:	ldr	r3, [r5]
   15140:	cmp	r3, #0
   15144:	cmpne	r5, #0
   15148:	beq	15174 <__assert_fail@plt+0x3c18>
   1514c:	mov	r3, r5
   15150:	cmp	r0, r2
   15154:	popcs	{r4, r5, fp, pc}
   15158:	ldr	r4, [r3]
   1515c:	str	r4, [r1, r0, lsl #2]
   15160:	add	r0, r0, #1
   15164:	ldr	r3, [r3, #4]
   15168:	cmp	r3, #0
   1516c:	bne	15150 <__assert_fail@plt+0x3bf4>
   15170:	ldr	lr, [ip, #4]
   15174:	add	r5, r5, #8
   15178:	cmp	r5, lr
   1517c:	bcc	1513c <__assert_fail@plt+0x3be0>
   15180:	pop	{r4, r5, fp, pc}
   15184:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15188:	add	fp, sp, #24
   1518c:	mov	r5, r1
   15190:	ldr	r4, [r0]
   15194:	ldr	r1, [r0, #4]
   15198:	mov	r6, #0
   1519c:	cmp	r4, r1
   151a0:	bcs	15214 <__assert_fail@plt+0x3cb8>
   151a4:	mov	r9, r2
   151a8:	mov	r8, r0
   151ac:	mov	r6, #0
   151b0:	b	151f8 <__assert_fail@plt+0x3c9c>
   151b4:	mov	r1, r9
   151b8:	blx	r5
   151bc:	cmp	r0, #0
   151c0:	beq	15214 <__assert_fail@plt+0x3cb8>
   151c4:	mov	r7, r4
   151c8:	ldr	r7, [r7, #4]
   151cc:	add	r6, r6, #1
   151d0:	cmp	r7, #0
   151d4:	beq	151f0 <__assert_fail@plt+0x3c94>
   151d8:	ldr	r0, [r7]
   151dc:	mov	r1, r9
   151e0:	blx	r5
   151e4:	cmp	r0, #0
   151e8:	bne	151c8 <__assert_fail@plt+0x3c6c>
   151ec:	b	15214 <__assert_fail@plt+0x3cb8>
   151f0:	ldr	r1, [r8, #4]
   151f4:	b	15208 <__assert_fail@plt+0x3cac>
   151f8:	ldr	r0, [r4]
   151fc:	cmp	r0, #0
   15200:	cmpne	r4, #0
   15204:	bne	151b4 <__assert_fail@plt+0x3c58>
   15208:	add	r4, r4, #8
   1520c:	cmp	r4, r1
   15210:	bcc	151f8 <__assert_fail@plt+0x3c9c>
   15214:	mov	r0, r6
   15218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1521c:	ldrb	r2, [r0]
   15220:	cmp	r2, #0
   15224:	moveq	r0, #0
   15228:	bxeq	lr
   1522c:	add	r3, r0, #1
   15230:	mov	r0, #0
   15234:	rsb	r0, r0, r0, lsl #5
   15238:	uxtab	r0, r0, r2
   1523c:	udiv	r2, r0, r1
   15240:	mls	r0, r2, r1, r0
   15244:	ldrb	r2, [r3], #1
   15248:	cmp	r2, #0
   1524c:	bne	15234 <__assert_fail@plt+0x3cd8>
   15250:	bx	lr
   15254:	movw	r1, #43104	; 0xa860
   15258:	movt	r1, #1
   1525c:	vld1.32	{d16-d17}, [r1]!
   15260:	ldr	r1, [r1]
   15264:	vst1.32	{d16-d17}, [r0]!
   15268:	str	r1, [r0]
   1526c:	bx	lr
   15270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15274:	add	fp, sp, #28
   15278:	sub	sp, sp, #4
   1527c:	movw	sl, #21348	; 0x5364
   15280:	movw	r5, #21328	; 0x5350
   15284:	cmp	r3, #0
   15288:	mov	r8, r0
   1528c:	mov	r0, #40	; 0x28
   15290:	mov	r7, r1
   15294:	movt	sl, #1
   15298:	movt	r5, #1
   1529c:	movne	sl, r3
   152a0:	cmp	r2, #0
   152a4:	movne	r5, r2
   152a8:	bl	18d14 <__assert_fail@plt+0x77b8>
   152ac:	mov	r9, #0
   152b0:	cmp	r0, #0
   152b4:	beq	15344 <__assert_fail@plt+0x3de8>
   152b8:	movw	r6, #43104	; 0xa860
   152bc:	cmp	r7, #0
   152c0:	mov	r4, r0
   152c4:	movt	r6, #1
   152c8:	movne	r6, r7
   152cc:	str	r6, [r0, #20]
   152d0:	bl	15374 <__assert_fail@plt+0x3e18>
   152d4:	cmp	r0, #0
   152d8:	beq	1533c <__assert_fail@plt+0x3de0>
   152dc:	mov	r0, r8
   152e0:	mov	r1, r6
   152e4:	bl	15420 <__assert_fail@plt+0x3ec4>
   152e8:	cmp	r0, #0
   152ec:	str	r0, [r4, #8]
   152f0:	beq	1533c <__assert_fail@plt+0x3de0>
   152f4:	mov	r1, #8
   152f8:	bl	18cc0 <__assert_fail@plt+0x7764>
   152fc:	cmp	r0, #0
   15300:	str	r0, [r4]
   15304:	beq	1533c <__assert_fail@plt+0x3de0>
   15308:	ldr	r1, [fp, #8]
   1530c:	mov	r2, #0
   15310:	mov	r9, r4
   15314:	str	r2, [r4, #12]
   15318:	str	r2, [r4, #16]
   1531c:	str	r5, [r4, #24]
   15320:	str	sl, [r4, #28]
   15324:	str	r1, [r4, #32]
   15328:	str	r2, [r4, #36]	; 0x24
   1532c:	ldr	r1, [r4, #8]
   15330:	add	r0, r0, r1, lsl #3
   15334:	str	r0, [r4, #4]
   15338:	b	15344 <__assert_fail@plt+0x3de8>
   1533c:	mov	r0, r4
   15340:	bl	12dc4 <__assert_fail@plt+0x1868>
   15344:	mov	r0, r9
   15348:	sub	sp, fp, #28
   1534c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15350:	ror	r2, r0, #3
   15354:	udiv	r2, r2, r1
   15358:	mul	r1, r2, r1
   1535c:	rsb	r0, r1, r0, ror #3
   15360:	bx	lr
   15364:	sub	r0, r0, r1
   15368:	clz	r0, r0
   1536c:	lsr	r0, r0, #5
   15370:	bx	lr
   15374:	ldr	r3, [r0, #20]
   15378:	movw	r2, #43104	; 0xa860
   1537c:	mov	r1, r0
   15380:	mov	r0, #1
   15384:	movt	r2, #1
   15388:	cmp	r3, r2
   1538c:	beq	15410 <__assert_fail@plt+0x3eb4>
   15390:	vldr	s2, [pc, #124]	; 15414 <__assert_fail@plt+0x3eb8>
   15394:	vldr	s0, [r3, #8]
   15398:	vcmpe.f32	s0, s2
   1539c:	vmrs	APSR_nzcv, fpscr
   153a0:	ble	15408 <__assert_fail@plt+0x3eac>
   153a4:	vldr	s4, [pc, #108]	; 15418 <__assert_fail@plt+0x3ebc>
   153a8:	vcmpe.f32	s0, s4
   153ac:	vmrs	APSR_nzcv, fpscr
   153b0:	bpl	15408 <__assert_fail@plt+0x3eac>
   153b4:	vldr	s4, [pc, #96]	; 1541c <__assert_fail@plt+0x3ec0>
   153b8:	vldr	s6, [r3, #12]
   153bc:	vcmpe.f32	s6, s4
   153c0:	vmrs	APSR_nzcv, fpscr
   153c4:	ble	15408 <__assert_fail@plt+0x3eac>
   153c8:	vldr	s4, [r3]
   153cc:	vcmpe.f32	s4, #0.0
   153d0:	vmrs	APSR_nzcv, fpscr
   153d4:	blt	15408 <__assert_fail@plt+0x3eac>
   153d8:	vadd.f32	s2, s4, s2
   153dc:	vcmpe.f32	s2, s0
   153e0:	vmrs	APSR_nzcv, fpscr
   153e4:	bpl	15408 <__assert_fail@plt+0x3eac>
   153e8:	vldr	s0, [r3, #4]
   153ec:	vmov.f32	s4, #112	; 0x3f800000  1.0
   153f0:	vcmpe.f32	s0, s4
   153f4:	vmrs	APSR_nzcv, fpscr
   153f8:	bhi	15408 <__assert_fail@plt+0x3eac>
   153fc:	vcmpe.f32	s2, s0
   15400:	vmrs	APSR_nzcv, fpscr
   15404:	bxmi	lr
   15408:	mov	r0, #0
   1540c:	str	r2, [r1, #20]
   15410:	bx	lr
   15414:	stclcc	12, cr12, [ip, #820]	; 0x334
   15418:	svccc	0x00666666
   1541c:	svccc	0x008ccccd
   15420:	ldrb	r2, [r1, #16]
   15424:	cmp	r2, #0
   15428:	bne	15458 <__assert_fail@plt+0x3efc>
   1542c:	vldr	s0, [r1, #8]
   15430:	vldr	s4, [pc, #160]	; 154d8 <__assert_fail@plt+0x3f7c>
   15434:	vmov	s2, r0
   15438:	mov	r0, #0
   1543c:	vcvt.f32.u32	s2, s2
   15440:	vdiv.f32	s2, s2, s0
   15444:	vcmpe.f32	s2, s4
   15448:	vcvt.u32.f32	s0, s2
   1544c:	vmrs	APSR_nzcv, fpscr
   15450:	bxge	lr
   15454:	vmov	r0, s0
   15458:	cmp	r0, #10
   1545c:	movls	r0, #10
   15460:	orr	r0, r0, #1
   15464:	b	154bc <__assert_fail@plt+0x3f60>
   15468:	mov	r1, #3
   1546c:	cmp	r0, #10
   15470:	bcc	154a8 <__assert_fail@plt+0x3f4c>
   15474:	mov	r1, #3
   15478:	mov	ip, #9
   1547c:	mov	r2, #12
   15480:	udiv	r3, r0, r1
   15484:	mls	r3, r3, r1, r0
   15488:	cmp	r3, #0
   1548c:	beq	154a8 <__assert_fail@plt+0x3f4c>
   15490:	add	r3, ip, r2
   15494:	add	r2, r2, #8
   15498:	add	r1, r1, #2
   1549c:	add	ip, r3, #4
   154a0:	cmp	ip, r0
   154a4:	bcc	15480 <__assert_fail@plt+0x3f24>
   154a8:	udiv	r2, r0, r1
   154ac:	mls	r1, r2, r1, r0
   154b0:	cmp	r1, #0
   154b4:	bne	154cc <__assert_fail@plt+0x3f70>
   154b8:	add	r0, r0, #2
   154bc:	cmn	r0, #1
   154c0:	bne	15468 <__assert_fail@plt+0x3f0c>
   154c4:	mov	r0, #0
   154c8:	bx	lr
   154cc:	cmp	r0, #536870912	; 0x20000000
   154d0:	movcs	r0, #0
   154d4:	bx	lr
   154d8:	svcmi	0x00800000
   154dc:	push	{r4, r5, r6, r7, fp, lr}
   154e0:	add	fp, sp, #16
   154e4:	mov	r4, r0
   154e8:	ldr	r5, [r0]
   154ec:	ldr	r0, [r0, #4]
   154f0:	cmp	r5, r0
   154f4:	bcs	1558c <__assert_fail@plt+0x4030>
   154f8:	mov	r6, #0
   154fc:	ldr	r1, [r5]
   15500:	cmp	r1, #0
   15504:	beq	15580 <__assert_fail@plt+0x4024>
   15508:	ldr	r1, [r4, #32]
   1550c:	ldr	r7, [r5, #4]
   15510:	cmp	r1, #0
   15514:	mov	r0, r1
   15518:	movwne	r0, #1
   1551c:	cmp	r7, #0
   15520:	beq	15564 <__assert_fail@plt+0x4008>
   15524:	tst	r0, #1
   15528:	beq	15538 <__assert_fail@plt+0x3fdc>
   1552c:	ldr	r0, [r7]
   15530:	blx	r1
   15534:	ldr	r1, [r4, #32]
   15538:	str	r6, [r7]
   1553c:	cmp	r1, #0
   15540:	ldr	r0, [r4, #36]	; 0x24
   15544:	ldr	r2, [r7, #4]
   15548:	str	r0, [r7, #4]
   1554c:	mov	r0, r1
   15550:	str	r7, [r4, #36]	; 0x24
   15554:	mov	r7, r2
   15558:	movwne	r0, #1
   1555c:	cmp	r2, #0
   15560:	bne	15524 <__assert_fail@plt+0x3fc8>
   15564:	cmp	r0, #0
   15568:	beq	15574 <__assert_fail@plt+0x4018>
   1556c:	ldr	r0, [r5]
   15570:	blx	r1
   15574:	str	r6, [r5]
   15578:	str	r6, [r5, #4]
   1557c:	ldr	r0, [r4, #4]
   15580:	add	r5, r5, #8
   15584:	cmp	r5, r0
   15588:	bcc	154fc <__assert_fail@plt+0x3fa0>
   1558c:	mov	r0, #0
   15590:	str	r0, [r4, #12]
   15594:	str	r0, [r4, #16]
   15598:	pop	{r4, r5, r6, r7, fp, pc}
   1559c:	push	{r4, r5, r6, sl, fp, lr}
   155a0:	add	fp, sp, #16
   155a4:	mov	r4, r0
   155a8:	ldr	r0, [r0, #32]
   155ac:	cmp	r0, #0
   155b0:	ldrne	r0, [r4, #16]
   155b4:	cmpne	r0, #0
   155b8:	beq	15610 <__assert_fail@plt+0x40b4>
   155bc:	ldr	r5, [r4]
   155c0:	ldr	r1, [r4, #4]
   155c4:	b	15608 <__assert_fail@plt+0x40ac>
   155c8:	ldr	r0, [r5]
   155cc:	cmp	r0, #0
   155d0:	cmpne	r5, #0
   155d4:	beq	15604 <__assert_fail@plt+0x40a8>
   155d8:	ldr	r1, [r4, #32]
   155dc:	blx	r1
   155e0:	ldr	r6, [r5, #4]
   155e4:	b	155f8 <__assert_fail@plt+0x409c>
   155e8:	ldr	r1, [r4, #32]
   155ec:	ldr	r0, [r6]
   155f0:	blx	r1
   155f4:	ldr	r6, [r6, #4]
   155f8:	cmp	r6, #0
   155fc:	bne	155e8 <__assert_fail@plt+0x408c>
   15600:	ldr	r1, [r4, #4]
   15604:	add	r5, r5, #8
   15608:	cmp	r5, r1
   1560c:	bcc	155c8 <__assert_fail@plt+0x406c>
   15610:	ldr	r5, [r4]
   15614:	ldr	r1, [r4, #4]
   15618:	b	15644 <__assert_fail@plt+0x40e8>
   1561c:	ldr	r0, [r5, #4]
   15620:	cmp	r0, #0
   15624:	beq	15640 <__assert_fail@plt+0x40e4>
   15628:	ldr	r6, [r0, #4]
   1562c:	bl	12dc4 <__assert_fail@plt+0x1868>
   15630:	cmp	r6, #0
   15634:	mov	r0, r6
   15638:	bne	15628 <__assert_fail@plt+0x40cc>
   1563c:	ldr	r1, [r4, #4]
   15640:	add	r5, r5, #8
   15644:	cmp	r5, r1
   15648:	bcc	1561c <__assert_fail@plt+0x40c0>
   1564c:	ldr	r0, [r4, #36]	; 0x24
   15650:	cmp	r0, #0
   15654:	beq	1566c <__assert_fail@plt+0x4110>
   15658:	ldr	r5, [r0, #4]
   1565c:	bl	12dc4 <__assert_fail@plt+0x1868>
   15660:	cmp	r5, #0
   15664:	mov	r0, r5
   15668:	bne	15658 <__assert_fail@plt+0x40fc>
   1566c:	ldr	r0, [r4]
   15670:	bl	12dc4 <__assert_fail@plt+0x1868>
   15674:	mov	r0, r4
   15678:	pop	{r4, r5, r6, sl, fp, lr}
   1567c:	b	12dc4 <__assert_fail@plt+0x1868>
   15680:	push	{r4, r5, r6, r7, fp, lr}
   15684:	add	fp, sp, #16
   15688:	sub	sp, sp, #40	; 0x28
   1568c:	mov	r7, r0
   15690:	mov	r2, r1
   15694:	mov	r4, r0
   15698:	ldr	r1, [r7, #20]!
   1569c:	mov	r0, r2
   156a0:	bl	15420 <__assert_fail@plt+0x3ec4>
   156a4:	mov	r5, #0
   156a8:	cmp	r0, #0
   156ac:	beq	15740 <__assert_fail@plt+0x41e4>
   156b0:	mov	r6, r0
   156b4:	ldr	r0, [r4, #8]
   156b8:	cmp	r6, r0
   156bc:	beq	1573c <__assert_fail@plt+0x41e0>
   156c0:	mov	r0, r6
   156c4:	mov	r1, #8
   156c8:	bl	18cc0 <__assert_fail@plt+0x7764>
   156cc:	cmp	r0, #0
   156d0:	str	r0, [sp]
   156d4:	beq	15740 <__assert_fail@plt+0x41e4>
   156d8:	mov	r1, #0
   156dc:	add	r0, r0, r6, lsl #3
   156e0:	str	r6, [sp, #8]
   156e4:	mov	r5, sp
   156e8:	mov	r2, #0
   156ec:	str	r1, [sp, #12]
   156f0:	str	r1, [sp, #16]
   156f4:	str	r0, [sp, #4]
   156f8:	add	r0, r5, #20
   156fc:	mov	r1, r4
   15700:	vld1.32	{d16-d17}, [r7]
   15704:	vst1.32	{d16-d17}, [r0]
   15708:	ldr	r0, [r4, #36]	; 0x24
   1570c:	str	r0, [sp, #36]	; 0x24
   15710:	mov	r0, r5
   15714:	bl	15798 <__assert_fail@plt+0x423c>
   15718:	cmp	r0, #0
   1571c:	beq	1574c <__assert_fail@plt+0x41f0>
   15720:	ldr	r0, [r4]
   15724:	bl	12dc4 <__assert_fail@plt+0x1868>
   15728:	mov	r0, #36	; 0x24
   1572c:	vld1.32	{d16-d17}, [r5], r0
   15730:	vst1.32	{d16-d17}, [r4], r0
   15734:	ldr	r0, [r5]
   15738:	str	r0, [r4]
   1573c:	mov	r5, #1
   15740:	mov	r0, r5
   15744:	sub	sp, fp, #16
   15748:	pop	{r4, r5, r6, r7, fp, pc}
   1574c:	ldr	r0, [sp, #36]	; 0x24
   15750:	mov	r1, sp
   15754:	mov	r2, #1
   15758:	str	r0, [r4, #36]	; 0x24
   1575c:	mov	r0, r4
   15760:	bl	15798 <__assert_fail@plt+0x423c>
   15764:	cmp	r0, #0
   15768:	beq	15794 <__assert_fail@plt+0x4238>
   1576c:	mov	r1, sp
   15770:	mov	r0, r4
   15774:	mov	r2, #0
   15778:	mov	r5, #0
   1577c:	bl	15798 <__assert_fail@plt+0x423c>
   15780:	cmp	r0, #0
   15784:	beq	15794 <__assert_fail@plt+0x4238>
   15788:	ldr	r0, [sp]
   1578c:	bl	12dc4 <__assert_fail@plt+0x1868>
   15790:	b	15740 <__assert_fail@plt+0x41e4>
   15794:	bl	11514 <abort@plt>
   15798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1579c:	add	fp, sp, #28
   157a0:	sub	sp, sp, #12
   157a4:	ldr	sl, [r1]
   157a8:	str	r1, [sp, #8]
   157ac:	ldr	r1, [r1, #4]
   157b0:	mov	r7, r0
   157b4:	mov	r0, #1
   157b8:	str	r2, [sp, #4]
   157bc:	cmp	sl, r1
   157c0:	bcs	1591c <__assert_fail@plt+0x43c0>
   157c4:	add	r8, r7, #36	; 0x24
   157c8:	mov	r9, #0
   157cc:	ldr	r4, [sl]
   157d0:	cmp	r4, #0
   157d4:	beq	15904 <__assert_fail@plt+0x43a8>
   157d8:	ldr	r5, [sl, #4]
   157dc:	cmp	r5, #0
   157e0:	beq	15858 <__assert_fail@plt+0x42fc>
   157e4:	ldr	r1, [r7, #8]
   157e8:	ldr	r4, [r5]
   157ec:	ldr	r2, [r7, #24]
   157f0:	mov	r0, r4
   157f4:	blx	r2
   157f8:	ldr	r1, [r7, #8]
   157fc:	cmp	r0, r1
   15800:	bcs	1592c <__assert_fail@plt+0x43d0>
   15804:	ldr	r3, [r7]
   15808:	ldr	r2, [r5, #4]
   1580c:	ldr	r6, [r3, r0, lsl #3]
   15810:	cmp	r6, #0
   15814:	beq	15824 <__assert_fail@plt+0x42c8>
   15818:	add	r0, r3, r0, lsl #3
   1581c:	add	r0, r0, #4
   15820:	b	1583c <__assert_fail@plt+0x42e0>
   15824:	str	r4, [r3, r0, lsl #3]
   15828:	ldr	r0, [r7, #12]
   1582c:	add	r0, r0, #1
   15830:	str	r0, [r7, #12]
   15834:	mov	r0, r8
   15838:	str	r9, [r5]
   1583c:	ldr	r3, [r0]
   15840:	cmp	r2, #0
   15844:	str	r3, [r5, #4]
   15848:	str	r5, [r0]
   1584c:	mov	r5, r2
   15850:	bne	157e8 <__assert_fail@plt+0x428c>
   15854:	ldr	r4, [sl]
   15858:	ldr	r0, [sp, #4]
   1585c:	str	r9, [sl, #4]
   15860:	cmp	r0, #0
   15864:	bne	15904 <__assert_fail@plt+0x43a8>
   15868:	ldr	r1, [r7, #8]
   1586c:	ldr	r2, [r7, #24]
   15870:	mov	r0, r4
   15874:	blx	r2
   15878:	mov	r5, r0
   1587c:	ldr	r0, [r7, #8]
   15880:	cmp	r5, r0
   15884:	bcs	1592c <__assert_fail@plt+0x43d0>
   15888:	ldr	r6, [r7]
   1588c:	ldr	r0, [r6, r5, lsl #3]
   15890:	cmp	r0, #0
   15894:	beq	158b4 <__assert_fail@plt+0x4358>
   15898:	ldr	r0, [r8]
   1589c:	cmp	r0, #0
   158a0:	beq	158c8 <__assert_fail@plt+0x436c>
   158a4:	mov	r1, r0
   158a8:	ldr	r2, [r1, #4]!
   158ac:	str	r2, [r8]
   158b0:	b	158dc <__assert_fail@plt+0x4380>
   158b4:	str	r4, [r6, r5, lsl #3]
   158b8:	ldr	r0, [r7, #12]
   158bc:	add	r0, r0, #1
   158c0:	str	r0, [r7, #12]
   158c4:	b	158f0 <__assert_fail@plt+0x4394>
   158c8:	mov	r0, #8
   158cc:	bl	18d14 <__assert_fail@plt+0x77b8>
   158d0:	cmp	r0, #0
   158d4:	beq	15924 <__assert_fail@plt+0x43c8>
   158d8:	add	r1, r0, #4
   158dc:	str	r4, [r0]
   158e0:	add	r2, r6, r5, lsl #3
   158e4:	ldr	r3, [r2, #4]
   158e8:	str	r3, [r1]
   158ec:	str	r0, [r2, #4]
   158f0:	ldr	r1, [sp, #8]
   158f4:	str	r9, [sl]
   158f8:	ldr	r0, [r1, #12]
   158fc:	sub	r0, r0, #1
   15900:	str	r0, [r1, #12]
   15904:	ldr	r0, [sp, #8]
   15908:	add	sl, sl, #8
   1590c:	ldr	r0, [r0, #4]
   15910:	cmp	sl, r0
   15914:	bcc	157cc <__assert_fail@plt+0x4270>
   15918:	mov	r0, #1
   1591c:	sub	sp, fp, #28
   15920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15924:	mov	r0, #0
   15928:	b	1591c <__assert_fail@plt+0x43c0>
   1592c:	bl	11514 <abort@plt>
   15930:	push	{r4, r5, r6, r7, fp, lr}
   15934:	add	fp, sp, #16
   15938:	sub	sp, sp, #8
   1593c:	cmp	r1, #0
   15940:	beq	15ac0 <__assert_fail@plt+0x4564>
   15944:	mov	r7, r2
   15948:	add	r2, sp, #4
   1594c:	mov	r3, #0
   15950:	mov	r5, r1
   15954:	mov	r4, r0
   15958:	mov	r6, #0
   1595c:	bl	15ac8 <__assert_fail@plt+0x456c>
   15960:	cmp	r0, #0
   15964:	beq	15974 <__assert_fail@plt+0x4418>
   15968:	cmp	r7, #0
   1596c:	strne	r0, [r7]
   15970:	b	15aac <__assert_fail@plt+0x4550>
   15974:	ldr	r0, [r4, #20]
   15978:	vldr	s0, [r4, #8]
   1597c:	vldr	s2, [r4, #12]
   15980:	vldr	s4, [r0, #8]
   15984:	vcvt.f32.u32	s0, s0
   15988:	vcvt.f32.u32	s2, s2
   1598c:	vmul.f32	s0, s4, s0
   15990:	vcmpe.f32	s0, s2
   15994:	vmrs	APSR_nzcv, fpscr
   15998:	bpl	15a2c <__assert_fail@plt+0x44d0>
   1599c:	mov	r0, r4
   159a0:	bl	15374 <__assert_fail@plt+0x3e18>
   159a4:	vldr	s0, [r4, #8]
   159a8:	ldr	r0, [r4, #20]
   159ac:	vldr	s4, [r4, #12]
   159b0:	vcvt.f32.u32	s2, s0
   159b4:	vldr	s0, [r0, #8]
   159b8:	vcvt.f32.u32	s4, s4
   159bc:	vmul.f32	s6, s0, s2
   159c0:	vcmpe.f32	s6, s4
   159c4:	vmrs	APSR_nzcv, fpscr
   159c8:	bpl	15a2c <__assert_fail@plt+0x44d0>
   159cc:	vldr	s4, [r0, #12]
   159d0:	ldrb	r0, [r0, #16]
   159d4:	mvn	r6, #0
   159d8:	vmul.f32	s2, s4, s2
   159dc:	vldr	s4, [pc, #224]	; 15ac4 <__assert_fail@plt+0x4568>
   159e0:	cmp	r0, #0
   159e4:	vmul.f32	s0, s0, s2
   159e8:	vseleq.f32	s0, s0, s2
   159ec:	vcmpe.f32	s0, s4
   159f0:	vmrs	APSR_nzcv, fpscr
   159f4:	bge	15aac <__assert_fail@plt+0x4550>
   159f8:	vcvt.u32.f32	s0, s0
   159fc:	mov	r0, r4
   15a00:	vmov	r1, s0
   15a04:	bl	15680 <__assert_fail@plt+0x4124>
   15a08:	cmp	r0, #0
   15a0c:	beq	15aac <__assert_fail@plt+0x4550>
   15a10:	add	r2, sp, #4
   15a14:	mov	r0, r4
   15a18:	mov	r1, r5
   15a1c:	mov	r3, #0
   15a20:	bl	15ac8 <__assert_fail@plt+0x456c>
   15a24:	cmp	r0, #0
   15a28:	bne	15ac0 <__assert_fail@plt+0x4564>
   15a2c:	ldr	r6, [sp, #4]
   15a30:	ldr	r0, [r6]
   15a34:	cmp	r0, #0
   15a38:	beq	15a58 <__assert_fail@plt+0x44fc>
   15a3c:	ldr	r0, [r4, #36]	; 0x24
   15a40:	cmp	r0, #0
   15a44:	beq	15a78 <__assert_fail@plt+0x451c>
   15a48:	mov	r1, r0
   15a4c:	ldr	r2, [r1, #4]!
   15a50:	str	r2, [r4, #36]	; 0x24
   15a54:	b	15a8c <__assert_fail@plt+0x4530>
   15a58:	str	r5, [r6]
   15a5c:	ldr	r0, [r4, #12]
   15a60:	ldr	r1, [r4, #16]
   15a64:	add	r0, r0, #1
   15a68:	add	r1, r1, #1
   15a6c:	str	r0, [r4, #12]
   15a70:	str	r1, [r4, #16]
   15a74:	b	15aa8 <__assert_fail@plt+0x454c>
   15a78:	mov	r0, #8
   15a7c:	bl	18d14 <__assert_fail@plt+0x77b8>
   15a80:	cmp	r0, #0
   15a84:	beq	15ab8 <__assert_fail@plt+0x455c>
   15a88:	add	r1, r0, #4
   15a8c:	str	r5, [r0]
   15a90:	ldr	r2, [r6, #4]
   15a94:	str	r2, [r1]
   15a98:	str	r0, [r6, #4]
   15a9c:	ldr	r0, [r4, #16]
   15aa0:	add	r0, r0, #1
   15aa4:	str	r0, [r4, #16]
   15aa8:	mov	r6, #1
   15aac:	mov	r0, r6
   15ab0:	sub	sp, fp, #16
   15ab4:	pop	{r4, r5, r6, r7, fp, pc}
   15ab8:	mvn	r6, #0
   15abc:	b	15aac <__assert_fail@plt+0x4550>
   15ac0:	bl	11514 <abort@plt>
   15ac4:	svcmi	0x00800000
   15ac8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15acc:	add	fp, sp, #24
   15ad0:	mov	r7, r2
   15ad4:	mov	r4, r1
   15ad8:	ldr	r1, [r0, #8]
   15adc:	ldr	r2, [r0, #24]
   15ae0:	mov	r5, r0
   15ae4:	mov	r8, r3
   15ae8:	mov	r0, r4
   15aec:	blx	r2
   15af0:	ldr	r1, [r5, #8]
   15af4:	cmp	r0, r1
   15af8:	bcs	15bf4 <__assert_fail@plt+0x4698>
   15afc:	ldr	r1, [r5]
   15b00:	add	r6, r1, r0, lsl #3
   15b04:	str	r6, [r7]
   15b08:	ldr	r1, [r1, r0, lsl #3]
   15b0c:	cmp	r1, #0
   15b10:	beq	15ba8 <__assert_fail@plt+0x464c>
   15b14:	cmp	r1, r4
   15b18:	beq	15b34 <__assert_fail@plt+0x45d8>
   15b1c:	ldr	r2, [r5, #28]
   15b20:	mov	r0, r4
   15b24:	blx	r2
   15b28:	cmp	r0, #0
   15b2c:	beq	15b68 <__assert_fail@plt+0x460c>
   15b30:	ldr	r4, [r6]
   15b34:	cmp	r8, #0
   15b38:	beq	15bac <__assert_fail@plt+0x4650>
   15b3c:	ldr	r0, [r6, #4]
   15b40:	cmp	r0, #0
   15b44:	beq	15bb4 <__assert_fail@plt+0x4658>
   15b48:	ldm	r0, {r1, r2}
   15b4c:	stm	r6, {r1, r2}
   15b50:	mov	r1, #0
   15b54:	str	r1, [r0]
   15b58:	ldr	r1, [r5, #36]	; 0x24
   15b5c:	str	r1, [r0, #4]
   15b60:	str	r0, [r5, #36]	; 0x24
   15b64:	b	15bac <__assert_fail@plt+0x4650>
   15b68:	ldr	r0, [r6, #4]!
   15b6c:	cmp	r0, #0
   15b70:	beq	15ba8 <__assert_fail@plt+0x464c>
   15b74:	ldr	r1, [r0]
   15b78:	cmp	r1, r4
   15b7c:	beq	15bc0 <__assert_fail@plt+0x4664>
   15b80:	ldr	r2, [r5, #28]
   15b84:	mov	r0, r4
   15b88:	blx	r2
   15b8c:	ldr	r1, [r6]
   15b90:	cmp	r0, #0
   15b94:	bne	15bc8 <__assert_fail@plt+0x466c>
   15b98:	ldr	r0, [r1, #4]!
   15b9c:	cmp	r0, #0
   15ba0:	mov	r6, r1
   15ba4:	bne	15b74 <__assert_fail@plt+0x4618>
   15ba8:	mov	r4, #0
   15bac:	mov	r0, r4
   15bb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15bb4:	mov	r0, #0
   15bb8:	str	r0, [r6]
   15bbc:	b	15bac <__assert_fail@plt+0x4650>
   15bc0:	mov	r1, r0
   15bc4:	b	15bcc <__assert_fail@plt+0x4670>
   15bc8:	ldr	r4, [r1]
   15bcc:	cmp	r8, #0
   15bd0:	beq	15bac <__assert_fail@plt+0x4650>
   15bd4:	ldr	r0, [r1, #4]
   15bd8:	str	r0, [r6]
   15bdc:	mov	r0, #0
   15be0:	str	r0, [r1]
   15be4:	ldr	r0, [r5, #36]	; 0x24
   15be8:	str	r0, [r1, #4]
   15bec:	str	r1, [r5, #36]	; 0x24
   15bf0:	b	15bac <__assert_fail@plt+0x4650>
   15bf4:	bl	11514 <abort@plt>
   15bf8:	push	{r4, sl, fp, lr}
   15bfc:	add	fp, sp, #8
   15c00:	sub	sp, sp, #8
   15c04:	add	r2, sp, #4
   15c08:	mov	r4, r1
   15c0c:	bl	15930 <__assert_fail@plt+0x43d4>
   15c10:	cmn	r0, #1
   15c14:	beq	15c28 <__assert_fail@plt+0x46cc>
   15c18:	ldr	r1, [sp, #4]
   15c1c:	cmp	r0, #0
   15c20:	moveq	r4, r1
   15c24:	b	15c2c <__assert_fail@plt+0x46d0>
   15c28:	mov	r4, #0
   15c2c:	mov	r0, r4
   15c30:	sub	sp, fp, #8
   15c34:	pop	{r4, sl, fp, pc}
   15c38:	push	{r4, r5, r6, sl, fp, lr}
   15c3c:	add	fp, sp, #16
   15c40:	sub	sp, sp, #8
   15c44:	add	r2, sp, #4
   15c48:	mov	r3, #1
   15c4c:	mov	r4, r0
   15c50:	bl	15ac8 <__assert_fail@plt+0x456c>
   15c54:	mov	r5, r0
   15c58:	cmp	r0, #0
   15c5c:	beq	15d38 <__assert_fail@plt+0x47dc>
   15c60:	ldr	r0, [r4, #16]
   15c64:	sub	r0, r0, #1
   15c68:	str	r0, [r4, #16]
   15c6c:	ldr	r0, [sp, #4]
   15c70:	ldr	r0, [r0]
   15c74:	cmp	r0, #0
   15c78:	bne	15d38 <__assert_fail@plt+0x47dc>
   15c7c:	ldr	r0, [r4, #12]
   15c80:	vldr	s0, [r4, #8]
   15c84:	sub	r0, r0, #1
   15c88:	str	r0, [r4, #12]
   15c8c:	vmov	s4, r0
   15c90:	ldr	r1, [r4, #20]
   15c94:	vldr	s2, [r1]
   15c98:	vcvt.f32.u32	s0, s0
   15c9c:	vcvt.f32.u32	s4, s4
   15ca0:	vmul.f32	s0, s2, s0
   15ca4:	vcmpe.f32	s0, s4
   15ca8:	vmrs	APSR_nzcv, fpscr
   15cac:	ble	15d38 <__assert_fail@plt+0x47dc>
   15cb0:	mov	r0, r4
   15cb4:	bl	15374 <__assert_fail@plt+0x3e18>
   15cb8:	vldr	s0, [r4, #8]
   15cbc:	ldr	r0, [r4, #20]
   15cc0:	vldr	s2, [r4, #12]
   15cc4:	vcvt.f32.u32	s0, s0
   15cc8:	vldr	s4, [r0]
   15ccc:	vcvt.f32.u32	s2, s2
   15cd0:	vmul.f32	s4, s4, s0
   15cd4:	vcmpe.f32	s4, s2
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	ble	15d38 <__assert_fail@plt+0x47dc>
   15ce0:	ldrb	r1, [r0, #16]
   15ce4:	vldr	s2, [r0, #4]
   15ce8:	cmp	r1, #0
   15cec:	vmul.f32	s0, s2, s0
   15cf0:	vldreq	s2, [r0, #8]
   15cf4:	mov	r0, r4
   15cf8:	vmuleq.f32	s0, s0, s2
   15cfc:	vcvt.u32.f32	s0, s0
   15d00:	vmov	r1, s0
   15d04:	bl	15680 <__assert_fail@plt+0x4124>
   15d08:	cmp	r0, #0
   15d0c:	bne	15d38 <__assert_fail@plt+0x47dc>
   15d10:	ldr	r0, [r4, #36]	; 0x24
   15d14:	cmp	r0, #0
   15d18:	beq	15d30 <__assert_fail@plt+0x47d4>
   15d1c:	ldr	r6, [r0, #4]
   15d20:	bl	12dc4 <__assert_fail@plt+0x1868>
   15d24:	cmp	r6, #0
   15d28:	mov	r0, r6
   15d2c:	bne	15d1c <__assert_fail@plt+0x47c0>
   15d30:	mov	r0, #0
   15d34:	str	r0, [r4, #36]	; 0x24
   15d38:	mov	r0, r5
   15d3c:	sub	sp, fp, #16
   15d40:	pop	{r4, r5, r6, sl, fp, pc}
   15d44:	b	15c38 <__assert_fail@plt+0x46dc>
   15d48:	mov	r3, #1
   15d4c:	mov	r2, #0
   15d50:	vdup.32	q8, r1
   15d54:	strb	r3, [r0, #28]
   15d58:	str	r2, [r0, #20]
   15d5c:	str	r2, [r0, #24]
   15d60:	add	r3, r0, r2
   15d64:	add	r2, r2, #16
   15d68:	cmp	r2, #16
   15d6c:	vst1.32	{d16-d17}, [r3]
   15d70:	bne	15d60 <__assert_fail@plt+0x4804>
   15d74:	str	r1, [r0, #16]
   15d78:	bx	lr
   15d7c:	ldrb	r0, [r0, #28]
   15d80:	bx	lr
   15d84:	push	{fp, lr}
   15d88:	mov	fp, sp
   15d8c:	ldrb	r3, [r0, #28]
   15d90:	ldr	r2, [r0, #20]
   15d94:	eor	lr, r3, #1
   15d98:	add	r2, r2, lr
   15d9c:	and	r3, r2, #3
   15da0:	ldr	ip, [r0, r3, lsl #2]
   15da4:	str	r1, [r0, r3, lsl #2]
   15da8:	str	r3, [r0, #20]
   15dac:	ldr	r1, [r0, #24]
   15db0:	cmp	r3, r1
   15db4:	addeq	r1, r2, lr
   15db8:	andeq	r1, r1, #3
   15dbc:	streq	r1, [r0, #24]
   15dc0:	mov	r1, #0
   15dc4:	strb	r1, [r0, #28]
   15dc8:	mov	r0, ip
   15dcc:	pop	{fp, pc}
   15dd0:	ldrb	r1, [r0, #28]
   15dd4:	cmp	r1, #0
   15dd8:	bne	15e1c <__assert_fail@plt+0x48c0>
   15ddc:	ldr	r3, [r0, #20]
   15de0:	ldr	r2, [r0, #16]
   15de4:	ldr	r1, [r0, r3, lsl #2]
   15de8:	str	r2, [r0, r3, lsl #2]
   15dec:	ldr	r2, [r0, #20]
   15df0:	ldr	r3, [r0, #24]
   15df4:	cmp	r2, r3
   15df8:	bne	15e08 <__assert_fail@plt+0x48ac>
   15dfc:	mov	r2, #1
   15e00:	strb	r2, [r0, #28]
   15e04:	b	15e14 <__assert_fail@plt+0x48b8>
   15e08:	sub	r2, r2, #1
   15e0c:	and	r2, r2, #3
   15e10:	str	r2, [r0, #20]
   15e14:	mov	r0, r1
   15e18:	bx	lr
   15e1c:	push	{fp, lr}
   15e20:	mov	fp, sp
   15e24:	bl	11514 <abort@plt>
   15e28:	push	{r4, r5, r6, sl, fp, lr}
   15e2c:	add	fp, sp, #16
   15e30:	mov	r5, r0
   15e34:	mov	r0, #0
   15e38:	mov	r4, r1
   15e3c:	add	r6, r2, #19
   15e40:	strb	r0, [r2, #20]
   15e44:	mov	r0, r5
   15e48:	mov	r1, r4
   15e4c:	mov	r2, #10
   15e50:	mov	r3, #0
   15e54:	bl	19494 <__assert_fail@plt+0x7f38>
   15e58:	add	r2, r0, r0, lsl #2
   15e5c:	sub	r2, r5, r2, lsl #1
   15e60:	orr	r2, r2, #48	; 0x30
   15e64:	strb	r2, [r6], #-1
   15e68:	rsbs	r2, r5, #9
   15e6c:	mov	r5, r0
   15e70:	rscs	r2, r4, #0
   15e74:	mov	r4, r1
   15e78:	bcc	15e44 <__assert_fail@plt+0x48e8>
   15e7c:	add	r0, r6, #1
   15e80:	pop	{r4, r5, r6, sl, fp, pc}
   15e84:	sub	sp, sp, #4
   15e88:	push	{fp, lr}
   15e8c:	mov	fp, sp
   15e90:	sub	sp, sp, #4
   15e94:	str	r3, [fp, #8]
   15e98:	mov	r3, #0
   15e9c:	tst	r2, #64	; 0x40
   15ea0:	addne	r3, fp, #8
   15ea4:	addne	r3, r3, #4
   15ea8:	strne	r3, [sp]
   15eac:	ldrne	r3, [fp, #8]
   15eb0:	bl	113e8 <openat64@plt>
   15eb4:	bl	17aac <__assert_fail@plt+0x6550>
   15eb8:	mov	sp, fp
   15ebc:	pop	{fp, lr}
   15ec0:	add	sp, sp, #4
   15ec4:	bx	lr
   15ec8:	push	{r4, r5, r6, sl, fp, lr}
   15ecc:	add	fp, sp, #16
   15ed0:	orr	r2, r2, #18688	; 0x4900
   15ed4:	mov	r4, r3
   15ed8:	orr	r2, r2, #524288	; 0x80000
   15edc:	bl	15e84 <__assert_fail@plt+0x4928>
   15ee0:	mov	r5, r0
   15ee4:	mov	r0, #0
   15ee8:	cmp	r5, #0
   15eec:	poplt	{r4, r5, r6, sl, fp, pc}
   15ef0:	mov	r0, r5
   15ef4:	bl	114a8 <fdopendir@plt>
   15ef8:	cmp	r0, #0
   15efc:	strne	r5, [r4]
   15f00:	popne	{r4, r5, r6, sl, fp, pc}
   15f04:	bl	11400 <__errno_location@plt>
   15f08:	ldr	r6, [r0]
   15f0c:	mov	r4, r0
   15f10:	mov	r0, r5
   15f14:	bl	11520 <close@plt>
   15f18:	mov	r0, #0
   15f1c:	str	r6, [r4]
   15f20:	pop	{r4, r5, r6, sl, fp, pc}
   15f24:	push	{r4, r5, fp, lr}
   15f28:	add	fp, sp, #8
   15f2c:	cmp	r0, #0
   15f30:	beq	15fc4 <__assert_fail@plt+0x4a68>
   15f34:	mov	r1, #47	; 0x2f
   15f38:	mov	r4, r0
   15f3c:	bl	11484 <strrchr@plt>
   15f40:	cmp	r0, #0
   15f44:	mov	r5, r4
   15f48:	addne	r5, r0, #1
   15f4c:	sub	r0, r5, r4
   15f50:	cmp	r0, #7
   15f54:	blt	15fa8 <__assert_fail@plt+0x4a4c>
   15f58:	movw	r1, #43180	; 0xa8ac
   15f5c:	sub	r0, r5, #7
   15f60:	mov	r2, #7
   15f64:	movt	r1, #1
   15f68:	bl	11508 <strncmp@plt>
   15f6c:	cmp	r0, #0
   15f70:	bne	15fa8 <__assert_fail@plt+0x4a4c>
   15f74:	movw	r1, #43188	; 0xa8b4
   15f78:	mov	r0, r5
   15f7c:	mov	r2, #3
   15f80:	movt	r1, #1
   15f84:	bl	11508 <strncmp@plt>
   15f88:	cmp	r0, #0
   15f8c:	beq	15f98 <__assert_fail@plt+0x4a3c>
   15f90:	mov	r4, r5
   15f94:	b	15fa8 <__assert_fail@plt+0x4a4c>
   15f98:	movw	r0, #45440	; 0xb180
   15f9c:	add	r4, r5, #3
   15fa0:	movt	r0, #2
   15fa4:	str	r4, [r0]
   15fa8:	movw	r0, #45444	; 0xb184
   15fac:	movt	r0, #2
   15fb0:	str	r4, [r0]
   15fb4:	movw	r0, #45504	; 0xb1c0
   15fb8:	movt	r0, #2
   15fbc:	str	r4, [r0]
   15fc0:	pop	{r4, r5, fp, pc}
   15fc4:	movw	r0, #45456	; 0xb190
   15fc8:	movt	r0, #2
   15fcc:	ldr	r1, [r0]
   15fd0:	movw	r0, #43124	; 0xa874
   15fd4:	movt	r0, #1
   15fd8:	bl	114fc <fputs@plt>
   15fdc:	bl	11514 <abort@plt>
   15fe0:	push	{r4, r5, r6, sl, fp, lr}
   15fe4:	add	fp, sp, #16
   15fe8:	mov	r4, r0
   15fec:	movw	r0, #45512	; 0xb1c8
   15ff0:	movt	r0, #2
   15ff4:	cmp	r4, #0
   15ff8:	moveq	r4, r0
   15ffc:	bl	11400 <__errno_location@plt>
   16000:	ldr	r6, [r0]
   16004:	mov	r5, r0
   16008:	mov	r0, r4
   1600c:	mov	r1, #48	; 0x30
   16010:	bl	18698 <__assert_fail@plt+0x713c>
   16014:	str	r6, [r5]
   16018:	pop	{r4, r5, r6, sl, fp, pc}
   1601c:	movw	r1, #45512	; 0xb1c8
   16020:	cmp	r0, #0
   16024:	movt	r1, #2
   16028:	movne	r1, r0
   1602c:	ldr	r0, [r1]
   16030:	bx	lr
   16034:	movw	r2, #45512	; 0xb1c8
   16038:	cmp	r0, #0
   1603c:	movt	r2, #2
   16040:	movne	r2, r0
   16044:	str	r1, [r2]
   16048:	bx	lr
   1604c:	movw	r3, #45512	; 0xb1c8
   16050:	cmp	r0, #0
   16054:	movt	r3, #2
   16058:	movne	r3, r0
   1605c:	ubfx	r0, r1, #5, #3
   16060:	and	r1, r1, #31
   16064:	add	r0, r3, r0, lsl #2
   16068:	ldr	r3, [r0, #8]
   1606c:	eor	r2, r2, r3, lsr r1
   16070:	and	r2, r2, #1
   16074:	eor	r2, r3, r2, lsl r1
   16078:	str	r2, [r0, #8]
   1607c:	mov	r0, #1
   16080:	and	r0, r0, r3, lsr r1
   16084:	bx	lr
   16088:	movw	r2, #45512	; 0xb1c8
   1608c:	cmp	r0, #0
   16090:	movt	r2, #2
   16094:	movne	r2, r0
   16098:	ldr	r0, [r2, #4]
   1609c:	str	r1, [r2, #4]
   160a0:	bx	lr
   160a4:	movw	r3, #45512	; 0xb1c8
   160a8:	cmp	r0, #0
   160ac:	movt	r3, #2
   160b0:	movne	r3, r0
   160b4:	cmp	r1, #0
   160b8:	mov	r0, #10
   160bc:	cmpne	r2, #0
   160c0:	str	r0, [r3]
   160c4:	bne	160d4 <__assert_fail@plt+0x4b78>
   160c8:	push	{fp, lr}
   160cc:	mov	fp, sp
   160d0:	bl	11514 <abort@plt>
   160d4:	str	r1, [r3, #40]	; 0x28
   160d8:	str	r2, [r3, #44]	; 0x2c
   160dc:	bx	lr
   160e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e4:	add	fp, sp, #28
   160e8:	sub	sp, sp, #20
   160ec:	mov	r7, r0
   160f0:	ldr	r0, [fp, #8]
   160f4:	movw	r5, #45512	; 0xb1c8
   160f8:	mov	r8, r3
   160fc:	mov	r9, r2
   16100:	mov	sl, r1
   16104:	movt	r5, #2
   16108:	cmp	r0, #0
   1610c:	movne	r5, r0
   16110:	bl	11400 <__errno_location@plt>
   16114:	mov	r4, r0
   16118:	ldm	r5, {r0, r1}
   1611c:	ldr	r2, [r5, #40]	; 0x28
   16120:	ldr	r3, [r5, #44]	; 0x2c
   16124:	add	r5, r5, #8
   16128:	ldr	r6, [r4]
   1612c:	stm	sp, {r0, r1, r5}
   16130:	str	r2, [sp, #12]
   16134:	str	r3, [sp, #16]
   16138:	mov	r0, r7
   1613c:	mov	r1, sl
   16140:	mov	r2, r9
   16144:	mov	r3, r8
   16148:	bl	16158 <__assert_fail@plt+0x4bfc>
   1614c:	str	r6, [r4]
   16150:	sub	sp, fp, #28
   16154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16158:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1615c:	add	fp, sp, #28
   16160:	sub	sp, sp, #156	; 0x9c
   16164:	str	r0, [fp, #-56]	; 0xffffffc8
   16168:	ldr	r0, [fp, #12]
   1616c:	mov	r4, r1
   16170:	str	r3, [sp, #80]	; 0x50
   16174:	str	r2, [fp, #-84]	; 0xffffffac
   16178:	and	r1, r0, #4
   1617c:	str	r1, [sp, #24]
   16180:	and	r1, r0, #1
   16184:	str	r1, [sp, #28]
   16188:	ubfx	r7, r0, #1, #1
   1618c:	bl	11328 <__ctype_get_mb_cur_max@plt>
   16190:	str	r0, [sp, #32]
   16194:	ldr	r0, [fp, #24]
   16198:	ldr	r9, [fp, #8]
   1619c:	mov	r2, #0
   161a0:	mov	r1, #0
   161a4:	mov	r5, #0
   161a8:	str	r2, [sp, #52]	; 0x34
   161ac:	mov	r2, #1
   161b0:	str	r0, [sp, #72]	; 0x48
   161b4:	ldr	r0, [fp, #20]
   161b8:	str	r0, [sp, #64]	; 0x40
   161bc:	mov	r0, #0
   161c0:	str	r0, [sp, #92]	; 0x5c
   161c4:	mov	r0, #0
   161c8:	str	r0, [fp, #-76]	; 0xffffffb4
   161cc:	mov	r0, #0
   161d0:	cmp	r9, #10
   161d4:	str	r1, [sp, #68]	; 0x44
   161d8:	bhi	171d8 <__assert_fail@plt+0x5c7c>
   161dc:	add	r1, pc, #28
   161e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   161e4:	ldr	lr, [sp, #80]	; 0x50
   161e8:	mov	r6, r4
   161ec:	mov	r8, #0
   161f0:	mov	r3, #1
   161f4:	mov	sl, #0
   161f8:	mov	r4, r2
   161fc:	ldr	pc, [r1, r9, lsl #2]
   16200:	ldrdeq	r6, [r1], -r0
   16204:	andeq	r6, r1, ip, lsl #6
   16208:	andeq	r6, r1, r0, ror #5
   1620c:	andeq	r6, r1, r8, asr #5
   16210:	andeq	r6, r1, r0, lsl #6
   16214:	andeq	r6, r1, r8, asr r3
   16218:	strdeq	r6, [r1], -r0
   1621c:			; <UNDEFINED> instruction: 0x000163b8
   16220:	andeq	r6, r1, ip, lsr #4
   16224:	andeq	r6, r1, ip, lsr #4
   16228:	andeq	r6, r1, r4, asr r2
   1622c:	movw	r0, #43270	; 0xa906
   16230:	mov	r1, r9
   16234:	movt	r0, #1
   16238:	bl	17940 <__assert_fail@plt+0x63e4>
   1623c:	str	r0, [sp, #64]	; 0x40
   16240:	movw	r0, #43272	; 0xa908
   16244:	mov	r1, r9
   16248:	movt	r0, #1
   1624c:	bl	17940 <__assert_fail@plt+0x63e4>
   16250:	str	r0, [sp, #72]	; 0x48
   16254:	mov	r8, #0
   16258:	mov	sl, r7
   1625c:	tst	r7, #1
   16260:	str	r5, [fp, #-48]	; 0xffffffd0
   16264:	bne	162a0 <__assert_fail@plt+0x4d44>
   16268:	ldr	r0, [sp, #64]	; 0x40
   1626c:	ldrb	r0, [r0]
   16270:	cmp	r0, #0
   16274:	beq	162a0 <__assert_fail@plt+0x4d44>
   16278:	ldr	r1, [sp, #64]	; 0x40
   1627c:	mov	r8, #0
   16280:	add	r1, r1, #1
   16284:	cmp	r8, r6
   16288:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1628c:	strbcc	r0, [r2, r8]
   16290:	ldrb	r0, [r1, r8]
   16294:	add	r8, r8, #1
   16298:	cmp	r0, #0
   1629c:	bne	16284 <__assert_fail@plt+0x4d28>
   162a0:	ldr	r7, [sp, #72]	; 0x48
   162a4:	mov	r0, r7
   162a8:	bl	113d0 <strlen@plt>
   162ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   162b0:	ldr	lr, [sp, #80]	; 0x50
   162b4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   162b8:	str	r0, [fp, #-76]	; 0xffffffb4
   162bc:	str	r7, [sp, #92]	; 0x5c
   162c0:	mov	r3, #1
   162c4:	b	163b8 <__assert_fail@plt+0x4e5c>
   162c8:	mov	r0, #1
   162cc:	b	1630c <__assert_fail@plt+0x4db0>
   162d0:	mov	r9, #0
   162d4:	mov	r8, #0
   162d8:	mov	r3, r0
   162dc:	b	163b4 <__assert_fail@plt+0x4e58>
   162e0:	tst	r7, #1
   162e4:	bne	1630c <__assert_fail@plt+0x4db0>
   162e8:	mov	r3, r0
   162ec:	b	16334 <__assert_fail@plt+0x4dd8>
   162f0:	mov	r0, #1
   162f4:	mov	r8, #0
   162f8:	mov	r9, #5
   162fc:	b	1636c <__assert_fail@plt+0x4e10>
   16300:	mov	r3, #1
   16304:	tst	r7, #1
   16308:	beq	16334 <__assert_fail@plt+0x4dd8>
   1630c:	mov	r1, #1
   16310:	mov	r8, #0
   16314:	mov	r9, #2
   16318:	mov	r3, r0
   1631c:	mov	sl, #1
   16320:	str	r1, [fp, #-76]	; 0xffffffb4
   16324:	movw	r1, #43272	; 0xa908
   16328:	movt	r1, #1
   1632c:	str	r1, [sp, #92]	; 0x5c
   16330:	b	163b8 <__assert_fail@plt+0x4e5c>
   16334:	cmp	r6, #0
   16338:	mov	r8, #1
   1633c:	mov	r9, #2
   16340:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16344:	movne	r0, #39	; 0x27
   16348:	strbne	r0, [r1]
   1634c:	movw	r0, #43272	; 0xa908
   16350:	movt	r0, #1
   16354:	b	163a8 <__assert_fail@plt+0x4e4c>
   16358:	mov	r9, #5
   1635c:	tst	r7, #1
   16360:	beq	16388 <__assert_fail@plt+0x4e2c>
   16364:	mov	r0, #1
   16368:	mov	r8, #0
   1636c:	str	r0, [fp, #-76]	; 0xffffffb4
   16370:	movw	r0, #43268	; 0xa904
   16374:	mov	r3, #1
   16378:	mov	sl, #1
   1637c:	movt	r0, #1
   16380:	str	r0, [sp, #92]	; 0x5c
   16384:	b	163b8 <__assert_fail@plt+0x4e5c>
   16388:	cmp	r6, #0
   1638c:	mov	r8, #1
   16390:	mov	r3, #1
   16394:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   16398:	movne	r0, #34	; 0x22
   1639c:	strbne	r0, [r1]
   163a0:	movw	r0, #43268	; 0xa904
   163a4:	movt	r0, #1
   163a8:	str	r0, [sp, #92]	; 0x5c
   163ac:	mov	r0, #1
   163b0:	str	r0, [fp, #-76]	; 0xffffffb4
   163b4:	mov	sl, #0
   163b8:	ldr	r0, [fp, #16]
   163bc:	mov	r7, #0
   163c0:	str	r9, [fp, #-64]	; 0xffffffc0
   163c4:	str	sl, [fp, #-72]	; 0xffffffb8
   163c8:	str	r3, [sp, #84]	; 0x54
   163cc:	cmp	r0, #0
   163d0:	movwne	r0, #1
   163d4:	and	r0, r0, sl
   163d8:	str	r0, [fp, #-88]	; 0xffffffa8
   163dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   163e0:	cmp	r0, #0
   163e4:	movwne	r0, #1
   163e8:	subs	r2, r9, #2
   163ec:	and	r1, r0, sl
   163f0:	str	r2, [fp, #-80]	; 0xffffffb0
   163f4:	and	r1, r3, r1
   163f8:	str	r1, [sp, #44]	; 0x2c
   163fc:	clz	r1, r2
   16400:	lsr	r1, r1, #5
   16404:	and	r1, r1, sl
   16408:	str	r1, [sp, #56]	; 0x38
   1640c:	mov	r1, r2
   16410:	eor	r2, sl, #1
   16414:	movwne	r1, #1
   16418:	str	r2, [sp, #88]	; 0x58
   1641c:	orr	r2, r1, r2
   16420:	and	r1, r1, r3
   16424:	and	r0, r0, r1
   16428:	str	r2, [sp, #60]	; 0x3c
   1642c:	str	r1, [fp, #-68]	; 0xffffffbc
   16430:	str	r0, [fp, #-60]	; 0xffffffc4
   16434:	eor	r0, r3, #1
   16438:	str	r0, [sp, #48]	; 0x30
   1643c:	cmn	lr, #1
   16440:	beq	16450 <__assert_fail@plt+0x4ef4>
   16444:	cmp	r7, lr
   16448:	bne	1645c <__assert_fail@plt+0x4f00>
   1644c:	b	17008 <__assert_fail@plt+0x5aac>
   16450:	ldrb	r0, [ip, r7]
   16454:	cmp	r0, #0
   16458:	beq	17010 <__assert_fail@plt+0x5ab4>
   1645c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16460:	mov	r9, #0
   16464:	str	r5, [fp, #-48]	; 0xffffffd0
   16468:	str	r6, [fp, #-52]	; 0xffffffcc
   1646c:	cmp	r0, #0
   16470:	beq	164b0 <__assert_fail@plt+0x4f54>
   16474:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16478:	mov	r5, r4
   1647c:	add	r4, r7, r0
   16480:	cmp	r0, #2
   16484:	bcc	164a0 <__assert_fail@plt+0x4f44>
   16488:	cmn	lr, #1
   1648c:	bne	164a0 <__assert_fail@plt+0x4f44>
   16490:	mov	r0, ip
   16494:	bl	113d0 <strlen@plt>
   16498:	ldr	ip, [fp, #-84]	; 0xffffffac
   1649c:	mov	lr, r0
   164a0:	cmp	r4, lr
   164a4:	bls	164b8 <__assert_fail@plt+0x4f5c>
   164a8:	mov	r6, #0
   164ac:	b	164f8 <__assert_fail@plt+0x4f9c>
   164b0:	mov	r6, #0
   164b4:	b	164fc <__assert_fail@plt+0x4fa0>
   164b8:	ldr	r1, [sp, #92]	; 0x5c
   164bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   164c0:	add	r0, ip, r7
   164c4:	mov	r4, lr
   164c8:	bl	112bc <memcmp@plt>
   164cc:	ldr	r2, [sp, #88]	; 0x58
   164d0:	cmp	r0, #0
   164d4:	mov	r1, r0
   164d8:	movwne	r1, #1
   164dc:	orr	r1, r1, r2
   164e0:	tst	r1, #1
   164e4:	beq	170a4 <__assert_fail@plt+0x5b48>
   164e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   164ec:	clz	r0, r0
   164f0:	mov	lr, r4
   164f4:	lsr	r6, r0, #5
   164f8:	mov	r4, r5
   164fc:	ldrb	r5, [ip, r7]
   16500:	cmp	r5, #126	; 0x7e
   16504:	bhi	168cc <__assert_fail@plt+0x5370>
   16508:	add	r3, pc, #16
   1650c:	mov	sl, #1
   16510:	mov	r2, #110	; 0x6e
   16514:	mov	r0, #97	; 0x61
   16518:	mov	r1, #0
   1651c:	ldr	pc, [r3, r5, lsl #2]
   16520:			; <UNDEFINED> instruction: 0x000167b0
   16524:	andeq	r6, r1, ip, asr #17
   16528:	andeq	r6, r1, ip, asr #17
   1652c:	andeq	r6, r1, ip, asr #17
   16530:	andeq	r6, r1, ip, asr #17
   16534:	andeq	r6, r1, ip, asr #17
   16538:	andeq	r6, r1, ip, asr #17
   1653c:	andeq	r6, r1, r0, ror r9
   16540:	muleq	r1, r0, r7
   16544:	andeq	r6, r1, r8, lsl #15
   16548:	muleq	r1, ip, r7
   1654c:	andeq	r6, r1, r0, lsr #16
   16550:	andeq	r6, r1, r0, lsl #15
   16554:	muleq	r1, r8, r7
   16558:	andeq	r6, r1, ip, asr #17
   1655c:	andeq	r6, r1, ip, asr #17
   16560:	andeq	r6, r1, ip, asr #17
   16564:	andeq	r6, r1, ip, asr #17
   16568:	andeq	r6, r1, ip, asr #17
   1656c:	andeq	r6, r1, ip, asr #17
   16570:	andeq	r6, r1, ip, asr #17
   16574:	andeq	r6, r1, ip, asr #17
   16578:	andeq	r6, r1, ip, asr #17
   1657c:	andeq	r6, r1, ip, asr #17
   16580:	andeq	r6, r1, ip, asr #17
   16584:	andeq	r6, r1, ip, asr #17
   16588:	andeq	r6, r1, ip, asr #17
   1658c:	andeq	r6, r1, ip, asr #17
   16590:	andeq	r6, r1, ip, asr #17
   16594:	andeq	r6, r1, ip, asr #17
   16598:	andeq	r6, r1, ip, asr #17
   1659c:	andeq	r6, r1, ip, asr #17
   165a0:	andeq	r6, r1, r0, lsr r9
   165a4:	andeq	r6, r1, r4, lsr r9
   165a8:	andeq	r6, r1, r4, lsr r9
   165ac:	andeq	r6, r1, r0, lsr r7
   165b0:	andeq	r6, r1, r4, lsr r9
   165b4:	andeq	r6, r1, ip, lsl r7
   165b8:	andeq	r6, r1, r4, lsr r9
   165bc:	andeq	r6, r1, r8, lsr #16
   165c0:	andeq	r6, r1, r4, lsr r9
   165c4:	andeq	r6, r1, r4, lsr r9
   165c8:	andeq	r6, r1, r4, lsr r9
   165cc:	andeq	r6, r1, ip, lsl r7
   165d0:	andeq	r6, r1, ip, lsl r7
   165d4:	andeq	r6, r1, ip, lsl r7
   165d8:	andeq	r6, r1, ip, lsl r7
   165dc:	andeq	r6, r1, ip, lsl r7
   165e0:	andeq	r6, r1, ip, lsl r7
   165e4:	andeq	r6, r1, ip, lsl r7
   165e8:	andeq	r6, r1, ip, lsl r7
   165ec:	andeq	r6, r1, ip, lsl r7
   165f0:	andeq	r6, r1, ip, lsl r7
   165f4:	andeq	r6, r1, ip, lsl r7
   165f8:	andeq	r6, r1, ip, lsl r7
   165fc:	andeq	r6, r1, ip, lsl r7
   16600:	andeq	r6, r1, ip, lsl r7
   16604:	andeq	r6, r1, ip, lsl r7
   16608:	andeq	r6, r1, ip, lsl r7
   1660c:	andeq	r6, r1, r4, lsr r9
   16610:	andeq	r6, r1, r4, lsr r9
   16614:	andeq	r6, r1, r4, lsr r9
   16618:	andeq	r6, r1, r4, lsr r9
   1661c:	strdeq	r6, [r1], -r4
   16620:	andeq	r6, r1, ip, asr #17
   16624:	andeq	r6, r1, ip, lsl r7
   16628:	andeq	r6, r1, ip, lsl r7
   1662c:	andeq	r6, r1, ip, lsl r7
   16630:	andeq	r6, r1, ip, lsl r7
   16634:	andeq	r6, r1, ip, lsl r7
   16638:	andeq	r6, r1, ip, lsl r7
   1663c:	andeq	r6, r1, ip, lsl r7
   16640:	andeq	r6, r1, ip, lsl r7
   16644:	andeq	r6, r1, ip, lsl r7
   16648:	andeq	r6, r1, ip, lsl r7
   1664c:	andeq	r6, r1, ip, lsl r7
   16650:	andeq	r6, r1, ip, lsl r7
   16654:	andeq	r6, r1, ip, lsl r7
   16658:	andeq	r6, r1, ip, lsl r7
   1665c:	andeq	r6, r1, ip, lsl r7
   16660:	andeq	r6, r1, ip, lsl r7
   16664:	andeq	r6, r1, ip, lsl r7
   16668:	andeq	r6, r1, ip, lsl r7
   1666c:	andeq	r6, r1, ip, lsl r7
   16670:	andeq	r6, r1, ip, lsl r7
   16674:	andeq	r6, r1, ip, lsl r7
   16678:	andeq	r6, r1, ip, lsl r7
   1667c:	andeq	r6, r1, ip, lsl r7
   16680:	andeq	r6, r1, ip, lsl r7
   16684:	andeq	r6, r1, ip, lsl r7
   16688:	andeq	r6, r1, ip, lsl r7
   1668c:	andeq	r6, r1, r4, lsr r9
   16690:	andeq	r6, r1, ip, asr r7
   16694:	andeq	r6, r1, ip, lsl r7
   16698:	andeq	r6, r1, r4, lsr r9
   1669c:	andeq	r6, r1, ip, lsl r7
   166a0:	andeq	r6, r1, r4, lsr r9
   166a4:	andeq	r6, r1, ip, lsl r7
   166a8:	andeq	r6, r1, ip, lsl r7
   166ac:	andeq	r6, r1, ip, lsl r7
   166b0:	andeq	r6, r1, ip, lsl r7
   166b4:	andeq	r6, r1, ip, lsl r7
   166b8:	andeq	r6, r1, ip, lsl r7
   166bc:	andeq	r6, r1, ip, lsl r7
   166c0:	andeq	r6, r1, ip, lsl r7
   166c4:	andeq	r6, r1, ip, lsl r7
   166c8:	andeq	r6, r1, ip, lsl r7
   166cc:	andeq	r6, r1, ip, lsl r7
   166d0:	andeq	r6, r1, ip, lsl r7
   166d4:	andeq	r6, r1, ip, lsl r7
   166d8:	andeq	r6, r1, ip, lsl r7
   166dc:	andeq	r6, r1, ip, lsl r7
   166e0:	andeq	r6, r1, ip, lsl r7
   166e4:	andeq	r6, r1, ip, lsl r7
   166e8:	andeq	r6, r1, ip, lsl r7
   166ec:	andeq	r6, r1, ip, lsl r7
   166f0:	andeq	r6, r1, ip, lsl r7
   166f4:	andeq	r6, r1, ip, lsl r7
   166f8:	andeq	r6, r1, ip, lsl r7
   166fc:	andeq	r6, r1, ip, lsl r7
   16700:	andeq	r6, r1, ip, lsl r7
   16704:	andeq	r6, r1, ip, lsl r7
   16708:	andeq	r6, r1, ip, lsl r7
   1670c:	andeq	r6, r1, r0, asr #14
   16710:	andeq	r6, r1, r4, lsr r9
   16714:	andeq	r6, r1, r0, asr #14
   16718:	andeq	r6, r1, r0, lsr r7
   1671c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16720:	cmp	r0, #0
   16724:	beq	16984 <__assert_fail@plt+0x5428>
   16728:	ldr	r0, [fp, #16]
   1672c:	b	16988 <__assert_fail@plt+0x542c>
   16730:	mov	sl, #0
   16734:	cmp	r7, #0
   16738:	bne	16ba0 <__assert_fail@plt+0x5644>
   1673c:	b	16930 <__assert_fail@plt+0x53d4>
   16740:	mov	sl, #0
   16744:	cmn	lr, #1
   16748:	beq	1691c <__assert_fail@plt+0x53c0>
   1674c:	cmp	r7, #0
   16750:	cmpeq	lr, #1
   16754:	bne	16ba0 <__assert_fail@plt+0x5644>
   16758:	b	16930 <__assert_fail@plt+0x53d4>
   1675c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16760:	cmp	r0, #2
   16764:	bne	16954 <__assert_fail@plt+0x53f8>
   16768:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1676c:	tst	r0, #1
   16770:	bne	170c0 <__assert_fail@plt+0x5b64>
   16774:	mov	r9, #0
   16778:	mov	r0, #92	; 0x5c
   1677c:	b	16968 <__assert_fail@plt+0x540c>
   16780:	mov	r0, #102	; 0x66
   16784:	b	16970 <__assert_fail@plt+0x5414>
   16788:	mov	r2, #116	; 0x74
   1678c:	b	1679c <__assert_fail@plt+0x5240>
   16790:	mov	r0, #98	; 0x62
   16794:	b	16970 <__assert_fail@plt+0x5414>
   16798:	mov	r2, #114	; 0x72
   1679c:	ldr	r0, [sp, #60]	; 0x3c
   167a0:	tst	r0, #1
   167a4:	mov	r0, r2
   167a8:	bne	16970 <__assert_fail@plt+0x5414>
   167ac:	b	170c0 <__assert_fail@plt+0x5b64>
   167b0:	ldr	r0, [sp, #84]	; 0x54
   167b4:	tst	r0, #1
   167b8:	beq	16a5c <__assert_fail@plt+0x5500>
   167bc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167c0:	tst	r0, #1
   167c4:	bne	171c8 <__assert_fail@plt+0x5c6c>
   167c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   167d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   167d4:	cmp	r0, #2
   167d8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   167dc:	movwne	r0, #1
   167e0:	orr	r0, r0, r3
   167e4:	tst	r0, #1
   167e8:	beq	16edc <__assert_fail@plt+0x5980>
   167ec:	mov	r0, r8
   167f0:	b	16f1c <__assert_fail@plt+0x59c0>
   167f4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167f8:	mov	r9, #0
   167fc:	mov	r5, #63	; 0x3f
   16800:	cmp	r0, #5
   16804:	beq	16ba8 <__assert_fail@plt+0x564c>
   16808:	cmp	r0, #2
   1680c:	bne	16c68 <__assert_fail@plt+0x570c>
   16810:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16814:	tst	r0, #1
   16818:	beq	16c6c <__assert_fail@plt+0x5710>
   1681c:	b	170c0 <__assert_fail@plt+0x5b64>
   16820:	mov	r0, #118	; 0x76
   16824:	b	16970 <__assert_fail@plt+0x5414>
   16828:	mov	r0, #1
   1682c:	mov	r5, #39	; 0x27
   16830:	str	r0, [sp, #52]	; 0x34
   16834:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16838:	cmp	r0, #2
   1683c:	bne	168c4 <__assert_fail@plt+0x5368>
   16840:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16844:	tst	r0, #1
   16848:	bne	170c0 <__assert_fail@plt+0x5b64>
   1684c:	ldr	r3, [sp, #68]	; 0x44
   16850:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16854:	mov	r9, #0
   16858:	clz	r1, r2
   1685c:	cmp	r3, #0
   16860:	mov	r0, r3
   16864:	movwne	r0, #1
   16868:	lsr	r1, r1, #5
   1686c:	orrs	r0, r0, r1
   16870:	moveq	r3, r2
   16874:	moveq	r2, r0
   16878:	cmp	r8, r2
   1687c:	str	r3, [sp, #68]	; 0x44
   16880:	str	r2, [fp, #-52]	; 0xffffffcc
   16884:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   16888:	movcc	r0, #39	; 0x27
   1688c:	strbcc	r0, [r1, r8]
   16890:	add	r0, r8, #1
   16894:	cmp	r0, r2
   16898:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1689c:	movcc	r1, #92	; 0x5c
   168a0:	strbcc	r1, [r3, r0]
   168a4:	add	r0, r8, #2
   168a8:	add	r8, r8, #3
   168ac:	cmp	r0, r2
   168b0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   168b4:	movcc	r1, #39	; 0x27
   168b8:	strbcc	r1, [r2, r0]
   168bc:	mov	r0, #0
   168c0:	str	r0, [fp, #-48]	; 0xffffffd0
   168c4:	mov	sl, #1
   168c8:	b	1671c <__assert_fail@plt+0x51c0>
   168cc:	ldr	r0, [sp, #32]
   168d0:	cmp	r0, #1
   168d4:	bne	16a80 <__assert_fail@plt+0x5524>
   168d8:	str	lr, [sp, #80]	; 0x50
   168dc:	bl	113ac <__ctype_b_loc@plt>
   168e0:	ldr	r0, [r0]
   168e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   168e8:	mov	r1, #1
   168ec:	add	r0, r0, r5, lsl #1
   168f0:	ldrb	r0, [r0, #1]
   168f4:	ubfx	sl, r0, #6, #1
   168f8:	ldr	r0, [sp, #48]	; 0x30
   168fc:	mov	r2, r1
   16900:	cmp	r1, #1
   16904:	orr	r0, sl, r0
   16908:	bhi	16c74 <__assert_fail@plt+0x5718>
   1690c:	tst	r0, #1
   16910:	beq	16c74 <__assert_fail@plt+0x5718>
   16914:	ldr	lr, [sp, #80]	; 0x50
   16918:	b	1671c <__assert_fail@plt+0x51c0>
   1691c:	cmp	r7, #0
   16920:	bne	16b9c <__assert_fail@plt+0x5640>
   16924:	ldrb	r0, [ip, #1]
   16928:	cmp	r0, #0
   1692c:	bne	16b9c <__assert_fail@plt+0x5640>
   16930:	mov	r1, #1
   16934:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16938:	cmp	r0, #2
   1693c:	bne	1694c <__assert_fail@plt+0x53f0>
   16940:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16944:	tst	r0, #1
   16948:	bne	170c0 <__assert_fail@plt+0x5b64>
   1694c:	mov	sl, r1
   16950:	b	1671c <__assert_fail@plt+0x51c0>
   16954:	ldr	r1, [sp, #44]	; 0x2c
   16958:	mov	r9, #0
   1695c:	mov	r0, #92	; 0x5c
   16960:	cmp	r1, #0
   16964:	beq	16970 <__assert_fail@plt+0x5414>
   16968:	mov	sl, #0
   1696c:	b	16e88 <__assert_fail@plt+0x592c>
   16970:	ldr	r1, [sp, #84]	; 0x54
   16974:	mov	sl, #0
   16978:	mov	r9, #0
   1697c:	tst	r1, #1
   16980:	bne	169bc <__assert_fail@plt+0x5460>
   16984:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16988:	cmp	r0, #0
   1698c:	mov	r0, r5
   16990:	beq	169b4 <__assert_fail@plt+0x5458>
   16994:	ldr	r1, [fp, #16]
   16998:	ubfx	r0, r5, #5, #3
   1699c:	mov	r2, #1
   169a0:	ldr	r0, [r1, r0, lsl #2]
   169a4:	and	r1, r5, #31
   169a8:	tst	r0, r2, lsl r1
   169ac:	mov	r0, r5
   169b0:	bne	169bc <__assert_fail@plt+0x5460>
   169b4:	cmp	r6, #0
   169b8:	beq	16e88 <__assert_fail@plt+0x592c>
   169bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   169c0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   169c4:	tst	r1, #1
   169c8:	bne	1709c <__assert_fail@plt+0x5b40>
   169cc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   169d0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   169d4:	cmp	r1, #2
   169d8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   169dc:	movwne	r1, #1
   169e0:	orr	r1, r1, r5
   169e4:	tst	r1, #1
   169e8:	bne	16a2c <__assert_fail@plt+0x54d0>
   169ec:	cmp	r8, r6
   169f0:	mov	r5, #1
   169f4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   169f8:	movcc	r1, #39	; 0x27
   169fc:	strbcc	r1, [r2, r8]
   16a00:	add	r1, r8, #1
   16a04:	cmp	r1, r6
   16a08:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16a0c:	movcc	r2, #36	; 0x24
   16a10:	strbcc	r2, [r3, r1]
   16a14:	add	r1, r8, #2
   16a18:	add	r8, r8, #3
   16a1c:	cmp	r1, r6
   16a20:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16a24:	movcc	r2, #39	; 0x27
   16a28:	strbcc	r2, [r3, r1]
   16a2c:	cmp	r8, r6
   16a30:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16a34:	movcc	r1, #92	; 0x5c
   16a38:	strbcc	r1, [r2, r8]
   16a3c:	add	r8, r8, #1
   16a40:	cmp	r8, r6
   16a44:	and	r4, r4, sl
   16a48:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   16a4c:	strbcc	r0, [r1, r8]
   16a50:	add	r8, r8, #1
   16a54:	add	r7, r7, #1
   16a58:	b	1643c <__assert_fail@plt+0x4ee0>
   16a5c:	ldr	r0, [sp, #28]
   16a60:	mov	sl, #0
   16a64:	mov	r9, #0
   16a68:	mov	r5, #0
   16a6c:	cmp	r0, #0
   16a70:	beq	16984 <__assert_fail@plt+0x5428>
   16a74:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16a78:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16a7c:	b	16a54 <__assert_fail@plt+0x54f8>
   16a80:	mov	r0, #0
   16a84:	cmn	lr, #1
   16a88:	str	r6, [sp, #76]	; 0x4c
   16a8c:	str	r4, [sp, #20]
   16a90:	str	r0, [fp, #-36]	; 0xffffffdc
   16a94:	str	r0, [fp, #-40]	; 0xffffffd8
   16a98:	bne	16aac <__assert_fail@plt+0x5550>
   16a9c:	mov	r0, ip
   16aa0:	bl	113d0 <strlen@plt>
   16aa4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16aa8:	mov	lr, r0
   16aac:	add	r0, ip, r7
   16ab0:	mov	sl, #1
   16ab4:	mov	r6, #0
   16ab8:	sub	r4, fp, #40	; 0x28
   16abc:	str	lr, [sp, #80]	; 0x50
   16ac0:	str	r0, [sp, #36]	; 0x24
   16ac4:	str	r6, [sp, #40]	; 0x28
   16ac8:	add	r6, r6, r7
   16acc:	sub	r0, fp, #44	; 0x2c
   16ad0:	mov	r3, r4
   16ad4:	add	r1, ip, r6
   16ad8:	sub	r2, lr, r6
   16adc:	bl	192f4 <__assert_fail@plt+0x7d98>
   16ae0:	cmp	r0, #0
   16ae4:	beq	16ff0 <__assert_fail@plt+0x5a94>
   16ae8:	cmn	r0, #1
   16aec:	beq	16fb0 <__assert_fail@plt+0x5a54>
   16af0:	ldr	lr, [sp, #80]	; 0x50
   16af4:	cmn	r0, #2
   16af8:	beq	16fb8 <__assert_fail@plt+0x5a5c>
   16afc:	ldr	r2, [sp, #56]	; 0x38
   16b00:	cmp	r0, #2
   16b04:	mov	r1, #0
   16b08:	movwcc	r1, #1
   16b0c:	eor	r2, r2, #1
   16b10:	orrs	r1, r2, r1
   16b14:	bne	16b60 <__assert_fail@plt+0x5604>
   16b18:	ldr	r1, [sp, #40]	; 0x28
   16b1c:	ldr	r2, [sp, #36]	; 0x24
   16b20:	add	ip, r2, r1
   16b24:	mov	r2, #1
   16b28:	ldrb	r3, [ip, r2]
   16b2c:	sub	r6, r3, #94	; 0x5e
   16b30:	cmp	r6, #30
   16b34:	bhi	16b48 <__assert_fail@plt+0x55ec>
   16b38:	mov	r4, #1
   16b3c:	mov	r1, #1073741829	; 0x40000005
   16b40:	tst	r1, r4, lsl r6
   16b44:	bne	170bc <__assert_fail@plt+0x5b60>
   16b48:	sub	r3, r3, #91	; 0x5b
   16b4c:	cmp	r3, #2
   16b50:	bcc	170bc <__assert_fail@plt+0x5b60>
   16b54:	add	r2, r2, #1
   16b58:	cmp	r2, r0
   16b5c:	bcc	16b28 <__assert_fail@plt+0x55cc>
   16b60:	ldr	r6, [sp, #40]	; 0x28
   16b64:	add	r6, r0, r6
   16b68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16b6c:	bl	11304 <iswprint@plt>
   16b70:	cmp	r0, #0
   16b74:	sub	r4, fp, #40	; 0x28
   16b78:	movwne	r0, #1
   16b7c:	and	sl, sl, r0
   16b80:	mov	r0, r4
   16b84:	bl	112b0 <mbsinit@plt>
   16b88:	ldr	lr, [sp, #80]	; 0x50
   16b8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16b90:	cmp	r0, #0
   16b94:	beq	16ac4 <__assert_fail@plt+0x5568>
   16b98:	b	16ff8 <__assert_fail@plt+0x5a9c>
   16b9c:	mvn	lr, #0
   16ba0:	mov	r9, #0
   16ba4:	b	1671c <__assert_fail@plt+0x51c0>
   16ba8:	ldr	r0, [sp, #24]
   16bac:	cmp	r0, #0
   16bb0:	beq	16c68 <__assert_fail@plt+0x570c>
   16bb4:	add	r0, r7, #2
   16bb8:	cmp	r0, lr
   16bbc:	bcs	16c68 <__assert_fail@plt+0x570c>
   16bc0:	add	r1, ip, r7
   16bc4:	ldrb	r1, [r1, #1]
   16bc8:	cmp	r1, #63	; 0x3f
   16bcc:	bne	16c68 <__assert_fail@plt+0x570c>
   16bd0:	ldrb	r5, [ip, r0]
   16bd4:	sub	r1, r5, #33	; 0x21
   16bd8:	cmp	r1, #29
   16bdc:	bhi	16c68 <__assert_fail@plt+0x570c>
   16be0:	movw	r3, #20929	; 0x51c1
   16be4:	mov	r2, #1
   16be8:	movt	r3, #14336	; 0x3800
   16bec:	tst	r3, r2, lsl r1
   16bf0:	beq	16c68 <__assert_fail@plt+0x570c>
   16bf4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16bf8:	tst	r1, #1
   16bfc:	bne	171d0 <__assert_fail@plt+0x5c74>
   16c00:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16c04:	mov	r7, r0
   16c08:	cmp	r8, r1
   16c0c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16c10:	movcc	r1, #63	; 0x3f
   16c14:	strbcc	r1, [r2, r8]
   16c18:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16c1c:	add	r1, r8, #1
   16c20:	cmp	r1, r2
   16c24:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16c28:	movcc	r2, #34	; 0x22
   16c2c:	strbcc	r2, [r3, r1]
   16c30:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16c34:	add	r1, r8, #2
   16c38:	cmp	r1, r2
   16c3c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16c40:	movcc	r2, #34	; 0x22
   16c44:	strbcc	r2, [r3, r1]
   16c48:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16c4c:	add	r1, r8, #3
   16c50:	add	r8, r8, #4
   16c54:	cmp	r1, r2
   16c58:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16c5c:	movcc	r2, #63	; 0x3f
   16c60:	strbcc	r2, [r3, r1]
   16c64:	b	16c6c <__assert_fail@plt+0x5710>
   16c68:	mov	r5, #63	; 0x3f
   16c6c:	mov	sl, #0
   16c70:	b	1671c <__assert_fail@plt+0x51c0>
   16c74:	str	r0, [sp, #40]	; 0x28
   16c78:	add	r0, r2, r7
   16c7c:	str	r6, [sp, #76]	; 0x4c
   16c80:	add	r1, r7, #1
   16c84:	ldr	lr, [sp, #80]	; 0x50
   16c88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16c8c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16c90:	mov	r3, #0
   16c94:	str	r0, [sp, #36]	; 0x24
   16c98:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16c9c:	b	16d30 <__assert_fail@plt+0x57d4>
   16ca0:	str	r0, [sp, #76]	; 0x4c
   16ca4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16ca8:	cmp	r9, #0
   16cac:	movwne	r9, #1
   16cb0:	mvn	r7, r0
   16cb4:	orr	r7, r7, r9
   16cb8:	tst	r7, #1
   16cbc:	bne	16d0c <__assert_fail@plt+0x57b0>
   16cc0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16cc4:	cmp	r8, r6
   16cc8:	bcs	16ce0 <__assert_fail@plt+0x5784>
   16ccc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   16cd0:	mov	r2, r4
   16cd4:	mov	r4, #39	; 0x27
   16cd8:	strb	r4, [r7, r8]
   16cdc:	mov	r4, r2
   16ce0:	add	r7, r8, #1
   16ce4:	cmp	r7, r6
   16ce8:	bcs	16d00 <__assert_fail@plt+0x57a4>
   16cec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16cf0:	mov	r2, r4
   16cf4:	mov	r4, #39	; 0x27
   16cf8:	strb	r4, [r0, r7]
   16cfc:	mov	r4, r2
   16d00:	add	r8, r8, #2
   16d04:	mov	r0, #0
   16d08:	b	16d14 <__assert_fail@plt+0x57b8>
   16d0c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16d10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16d14:	cmp	r8, r6
   16d18:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16d1c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16d20:	strbcc	r5, [r2, r8]
   16d24:	add	r8, r8, #1
   16d28:	ldrb	r5, [ip, r1]
   16d2c:	add	r1, r1, #1
   16d30:	ldr	r2, [sp, #40]	; 0x28
   16d34:	tst	r2, #1
   16d38:	beq	16d74 <__assert_fail@plt+0x5818>
   16d3c:	ldr	r2, [sp, #76]	; 0x4c
   16d40:	str	r0, [fp, #-48]	; 0xffffffd0
   16d44:	tst	r2, #1
   16d48:	beq	16d6c <__assert_fail@plt+0x5810>
   16d4c:	cmp	r8, r6
   16d50:	bcs	16d68 <__assert_fail@plt+0x580c>
   16d54:	ldr	r6, [fp, #-56]	; 0xffffffc8
   16d58:	mov	r2, r4
   16d5c:	mov	r4, #92	; 0x5c
   16d60:	strb	r4, [r6, r8]
   16d64:	mov	r4, r2
   16d68:	add	r8, r8, #1
   16d6c:	mov	r0, #0
   16d70:	b	16e68 <__assert_fail@plt+0x590c>
   16d74:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16d78:	tst	r2, #1
   16d7c:	bne	170c8 <__assert_fail@plt+0x5b6c>
   16d80:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16d84:	cmp	r7, #2
   16d88:	movwne	r3, #1
   16d8c:	orr	r3, r3, r0
   16d90:	tst	r3, #1
   16d94:	bne	16df0 <__assert_fail@plt+0x5894>
   16d98:	cmp	r8, r6
   16d9c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16da0:	movcc	r3, #39	; 0x27
   16da4:	strbcc	r3, [r2, r8]
   16da8:	add	r3, r8, #1
   16dac:	cmp	r3, r6
   16db0:	bcs	16dc8 <__assert_fail@plt+0x586c>
   16db4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16db8:	mov	r7, r4
   16dbc:	mov	r4, #36	; 0x24
   16dc0:	strb	r4, [r2, r3]
   16dc4:	mov	r4, r7
   16dc8:	add	r3, r8, #2
   16dcc:	cmp	r3, r6
   16dd0:	bcs	16de8 <__assert_fail@plt+0x588c>
   16dd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16dd8:	mov	r7, r4
   16ddc:	mov	r4, #39	; 0x27
   16de0:	strb	r4, [r2, r3]
   16de4:	mov	r4, r7
   16de8:	add	r8, r8, #3
   16dec:	mov	r0, #1
   16df0:	cmp	r8, r6
   16df4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16df8:	movcc	r3, #92	; 0x5c
   16dfc:	strbcc	r3, [r2, r8]
   16e00:	add	r3, r8, #1
   16e04:	cmp	r3, r6
   16e08:	bcs	16e28 <__assert_fail@plt+0x58cc>
   16e0c:	mov	r2, r4
   16e10:	and	r7, r5, #192	; 0xc0
   16e14:	mov	r4, #48	; 0x30
   16e18:	orr	r7, r4, r7, lsr #6
   16e1c:	mov	r4, r2
   16e20:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16e24:	strb	r7, [r2, r3]
   16e28:	add	r3, r8, #2
   16e2c:	cmp	r3, r6
   16e30:	bcs	16e50 <__assert_fail@plt+0x58f4>
   16e34:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16e38:	mov	r6, r4
   16e3c:	lsr	r7, r5, #3
   16e40:	mov	r4, #6
   16e44:	bfi	r7, r4, #3, #29
   16e48:	mov	r4, r6
   16e4c:	strb	r7, [r2, r3]
   16e50:	str	r0, [fp, #-48]	; 0xffffffd0
   16e54:	ldr	r0, [sp, #76]	; 0x4c
   16e58:	mov	r3, #6
   16e5c:	add	r8, r8, #3
   16e60:	bfi	r5, r3, #3, #29
   16e64:	mov	r3, #1
   16e68:	ldr	r2, [sp, #36]	; 0x24
   16e6c:	and	r9, r3, #1
   16e70:	cmp	r2, r1
   16e74:	bhi	16ca0 <__assert_fail@plt+0x5744>
   16e78:	cmp	r9, #0
   16e7c:	sub	r7, r1, #1
   16e80:	mov	r0, r5
   16e84:	movwne	r9, #1
   16e88:	cmp	r9, #0
   16e8c:	bne	16ed0 <__assert_fail@plt+0x5974>
   16e90:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16e94:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16e98:	tst	r5, #1
   16e9c:	beq	16a40 <__assert_fail@plt+0x54e4>
   16ea0:	cmp	r8, r6
   16ea4:	mov	r5, #0
   16ea8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16eac:	movcc	r1, #39	; 0x27
   16eb0:	strbcc	r1, [r2, r8]
   16eb4:	add	r1, r8, #1
   16eb8:	add	r8, r8, #2
   16ebc:	cmp	r1, r6
   16ec0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16ec4:	movcc	r2, #39	; 0x27
   16ec8:	strbcc	r2, [r3, r1]
   16ecc:	b	16a40 <__assert_fail@plt+0x54e4>
   16ed0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16ed4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16ed8:	b	16a40 <__assert_fail@plt+0x54e4>
   16edc:	cmp	r8, r1
   16ee0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16ee4:	movcc	r0, #39	; 0x27
   16ee8:	strbcc	r0, [r2, r8]
   16eec:	add	r0, r8, #1
   16ef0:	cmp	r0, r1
   16ef4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16ef8:	movcc	r2, #36	; 0x24
   16efc:	strbcc	r2, [r3, r0]
   16f00:	add	r0, r8, #2
   16f04:	cmp	r0, r1
   16f08:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16f0c:	movcc	r2, #39	; 0x27
   16f10:	strbcc	r2, [r3, r0]
   16f14:	add	r0, r8, #3
   16f18:	mov	r3, #1
   16f1c:	cmp	r0, r1
   16f20:	add	r8, r0, #1
   16f24:	str	r3, [fp, #-48]	; 0xffffffd0
   16f28:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16f2c:	movcc	r1, #92	; 0x5c
   16f30:	strbcc	r1, [r2, r0]
   16f34:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16f38:	cmp	r1, #2
   16f3c:	beq	16fa0 <__assert_fail@plt+0x5a44>
   16f40:	add	r1, r7, #1
   16f44:	mov	sl, #0
   16f48:	mov	r9, #1
   16f4c:	mov	r5, #48	; 0x30
   16f50:	cmp	r1, lr
   16f54:	bcs	1671c <__assert_fail@plt+0x51c0>
   16f58:	ldrb	r1, [ip, r1]
   16f5c:	sub	r1, r1, #48	; 0x30
   16f60:	uxtb	r1, r1
   16f64:	cmp	r1, #9
   16f68:	bhi	1671c <__assert_fail@plt+0x51c0>
   16f6c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16f70:	cmp	r8, r1
   16f74:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16f78:	movcc	r1, #48	; 0x30
   16f7c:	strbcc	r1, [r2, r8]
   16f80:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16f84:	add	r1, r0, #2
   16f88:	add	r8, r0, #3
   16f8c:	cmp	r1, r2
   16f90:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16f94:	movcc	r2, #48	; 0x30
   16f98:	strbcc	r2, [r3, r1]
   16f9c:	b	1671c <__assert_fail@plt+0x51c0>
   16fa0:	mov	r0, #48	; 0x30
   16fa4:	mov	r9, #1
   16fa8:	mov	sl, #0
   16fac:	b	169b4 <__assert_fail@plt+0x5458>
   16fb0:	mov	sl, #0
   16fb4:	b	16ff0 <__assert_fail@plt+0x5a94>
   16fb8:	mov	sl, #0
   16fbc:	cmp	lr, r6
   16fc0:	bls	16ff0 <__assert_fail@plt+0x5a94>
   16fc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fc8:	ldr	r6, [sp, #40]	; 0x28
   16fcc:	ldr	r0, [sp, #36]	; 0x24
   16fd0:	ldrb	r0, [r0, r6]
   16fd4:	cmp	r0, #0
   16fd8:	beq	16ff8 <__assert_fail@plt+0x5a9c>
   16fdc:	add	r6, r6, #1
   16fe0:	add	r0, r7, r6
   16fe4:	cmp	r0, lr
   16fe8:	bcc	16fcc <__assert_fail@plt+0x5a70>
   16fec:	b	16ff8 <__assert_fail@plt+0x5a9c>
   16ff0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ff4:	ldr	r6, [sp, #40]	; 0x28
   16ff8:	mov	r1, r6
   16ffc:	ldr	r4, [sp, #20]
   17000:	ldr	r6, [sp, #76]	; 0x4c
   17004:	b	168f8 <__assert_fail@plt+0x539c>
   17008:	mov	lr, r7
   1700c:	b	17014 <__assert_fail@plt+0x5ab8>
   17010:	mvn	lr, #0
   17014:	ldr	r9, [fp, #-64]	; 0xffffffc0
   17018:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1701c:	eor	r0, r9, #2
   17020:	orr	r0, r0, r8
   17024:	clz	r0, r0
   17028:	lsr	r0, r0, #5
   1702c:	tst	r1, r0
   17030:	bne	1712c <__assert_fail@plt+0x5bd0>
   17034:	mov	r0, r1
   17038:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1703c:	cmp	r9, #2
   17040:	movwne	r1, #1
   17044:	orr	r0, r0, r1
   17048:	tst	r0, #1
   1704c:	bne	1716c <__assert_fail@plt+0x5c10>
   17050:	ldr	r0, [sp, #52]	; 0x34
   17054:	ldr	r1, [sp, #68]	; 0x44
   17058:	str	lr, [sp, #80]	; 0x50
   1705c:	eor	r0, r0, #1
   17060:	tst	r0, #1
   17064:	bne	1716c <__assert_fail@plt+0x5c10>
   17068:	tst	r4, #1
   1706c:	bne	17134 <__assert_fail@plt+0x5bd8>
   17070:	mov	r7, #0
   17074:	cmp	r1, #0
   17078:	beq	17164 <__assert_fail@plt+0x5c08>
   1707c:	ldr	r0, [sp, #84]	; 0x54
   17080:	mov	r3, #0
   17084:	cmp	r6, #0
   17088:	mov	r2, #0
   1708c:	mov	r4, r1
   17090:	str	r3, [fp, #-72]	; 0xffffffb8
   17094:	beq	161d0 <__assert_fail@plt+0x4c74>
   17098:	b	1716c <__assert_fail@plt+0x5c10>
   1709c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   170a0:	b	170c8 <__assert_fail@plt+0x5b6c>
   170a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   170a8:	mov	r2, #1
   170ac:	mov	lr, r4
   170b0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   170b4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   170b8:	b	170cc <__assert_fail@plt+0x5b70>
   170bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   170c0:	mov	r7, #2
   170c4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   170c8:	ldr	r2, [sp, #84]	; 0x54
   170cc:	mov	r0, #0
   170d0:	ldr	r1, [fp, #12]
   170d4:	tst	r2, #1
   170d8:	mov	r2, r7
   170dc:	mov	r3, lr
   170e0:	str	r0, [sp, #8]
   170e4:	ldr	r0, [sp, #64]	; 0x40
   170e8:	movwne	r2, #4
   170ec:	cmp	r7, #2
   170f0:	movne	r2, r7
   170f4:	str	r2, [sp]
   170f8:	mov	r2, ip
   170fc:	bic	r1, r1, #2
   17100:	str	r0, [sp, #12]
   17104:	ldr	r0, [sp, #72]	; 0x48
   17108:	str	r1, [sp, #4]
   1710c:	mov	r1, r6
   17110:	str	r0, [sp, #16]
   17114:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17118:	bl	16158 <__assert_fail@plt+0x4bfc>
   1711c:	mov	r8, r0
   17120:	mov	r0, r8
   17124:	sub	sp, fp, #28
   17128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1712c:	mov	r7, #2
   17130:	b	170c8 <__assert_fail@plt+0x5b6c>
   17134:	mov	r0, #5
   17138:	ldr	r2, [fp, #-84]	; 0xffffffac
   1713c:	ldr	r3, [sp, #80]	; 0x50
   17140:	str	r0, [sp]
   17144:	ldr	r0, [fp, #12]
   17148:	str	r0, [sp, #4]
   1714c:	ldr	r0, [fp, #16]
   17150:	str	r0, [sp, #8]
   17154:	ldr	r0, [sp, #64]	; 0x40
   17158:	str	r0, [sp, #12]
   1715c:	ldr	r0, [sp, #72]	; 0x48
   17160:	b	17110 <__assert_fail@plt+0x5bb4>
   17164:	mov	r0, #0
   17168:	str	r0, [fp, #-72]	; 0xffffffb8
   1716c:	ldr	r1, [sp, #92]	; 0x5c
   17170:	cmp	r1, #0
   17174:	beq	171b4 <__assert_fail@plt+0x5c58>
   17178:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1717c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17180:	tst	r0, #1
   17184:	bne	171b8 <__assert_fail@plt+0x5c5c>
   17188:	ldrb	r0, [r1]
   1718c:	cmp	r0, #0
   17190:	beq	171b8 <__assert_fail@plt+0x5c5c>
   17194:	add	r1, r1, #1
   17198:	cmp	r8, r6
   1719c:	strbcc	r0, [r2, r8]
   171a0:	add	r8, r8, #1
   171a4:	ldrb	r0, [r1], #1
   171a8:	cmp	r0, #0
   171ac:	bne	17198 <__assert_fail@plt+0x5c3c>
   171b0:	b	171b8 <__assert_fail@plt+0x5c5c>
   171b4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   171b8:	cmp	r8, r6
   171bc:	movcc	r0, #0
   171c0:	strbcc	r0, [r2, r8]
   171c4:	b	17120 <__assert_fail@plt+0x5bc4>
   171c8:	mov	r2, #1
   171cc:	b	170b0 <__assert_fail@plt+0x5b54>
   171d0:	mov	r7, #5
   171d4:	b	170c4 <__assert_fail@plt+0x5b68>
   171d8:	bl	11514 <abort@plt>
   171dc:	mov	r3, r2
   171e0:	mov	r2, #0
   171e4:	b	171e8 <__assert_fail@plt+0x5c8c>
   171e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171ec:	add	fp, sp, #28
   171f0:	sub	sp, sp, #36	; 0x24
   171f4:	movw	r8, #45512	; 0xb1c8
   171f8:	cmp	r3, #0
   171fc:	mov	r4, r2
   17200:	str	r2, [sp, #24]
   17204:	mov	r5, r1
   17208:	mov	r6, r0
   1720c:	str	r0, [sp, #20]
   17210:	movt	r8, #2
   17214:	movne	r8, r3
   17218:	bl	11400 <__errno_location@plt>
   1721c:	str	r0, [sp, #28]
   17220:	cmp	r4, #0
   17224:	add	sl, r8, #8
   17228:	ldm	r8, {r3, r9}
   1722c:	ldr	r7, [r0]
   17230:	ldr	r1, [r8, #40]	; 0x28
   17234:	ldr	r2, [r8, #44]	; 0x2c
   17238:	mov	r0, #0
   1723c:	orreq	r9, r9, #1
   17240:	str	r7, [sp, #32]
   17244:	mov	r7, r5
   17248:	stm	sp, {r3, r9, sl}
   1724c:	str	r1, [sp, #12]
   17250:	str	r2, [sp, #16]
   17254:	mov	r1, #0
   17258:	mov	r2, r6
   1725c:	mov	r3, r5
   17260:	bl	16158 <__assert_fail@plt+0x4bfc>
   17264:	add	r4, r0, #1
   17268:	mov	r5, r0
   1726c:	mov	r0, r4
   17270:	bl	18378 <__assert_fail@plt+0x6e1c>
   17274:	mov	r6, r0
   17278:	ldr	r0, [r8]
   1727c:	ldr	r2, [r8, #44]	; 0x2c
   17280:	ldr	r1, [r8, #40]	; 0x28
   17284:	mov	r3, r7
   17288:	stm	sp, {r0, r9, sl}
   1728c:	str	r2, [sp, #16]
   17290:	str	r1, [sp, #12]
   17294:	mov	r0, r6
   17298:	mov	r1, r4
   1729c:	ldr	r2, [sp, #20]
   172a0:	bl	16158 <__assert_fail@plt+0x4bfc>
   172a4:	ldr	r0, [sp, #24]
   172a8:	ldr	r1, [sp, #32]
   172ac:	ldr	r2, [sp, #28]
   172b0:	cmp	r0, #0
   172b4:	str	r1, [r2]
   172b8:	strne	r5, [r0]
   172bc:	mov	r0, r6
   172c0:	sub	sp, fp, #28
   172c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   172cc:	add	fp, sp, #24
   172d0:	movw	r5, #45380	; 0xb144
   172d4:	movw	r8, #45376	; 0xb140
   172d8:	movt	r5, #2
   172dc:	movt	r8, #2
   172e0:	ldr	r0, [r5]
   172e4:	ldr	r4, [r8]
   172e8:	cmp	r0, #2
   172ec:	blt	17318 <__assert_fail@plt+0x5dbc>
   172f0:	add	r7, r4, #12
   172f4:	mov	r6, #0
   172f8:	ldr	r0, [r7, r6, lsl #3]
   172fc:	bl	12dc4 <__assert_fail@plt+0x1868>
   17300:	ldr	r1, [r5]
   17304:	add	r2, r6, #2
   17308:	add	r0, r6, #1
   1730c:	mov	r6, r0
   17310:	cmp	r2, r1
   17314:	blt	172f8 <__assert_fail@plt+0x5d9c>
   17318:	ldr	r0, [r4, #4]
   1731c:	movw	r7, #45560	; 0xb1f8
   17320:	movt	r7, #2
   17324:	cmp	r0, r7
   17328:	beq	17340 <__assert_fail@plt+0x5de4>
   1732c:	bl	12dc4 <__assert_fail@plt+0x1868>
   17330:	movw	r0, #45384	; 0xb148
   17334:	mov	r6, #256	; 0x100
   17338:	movt	r0, #2
   1733c:	strd	r6, [r0]
   17340:	movw	r6, #45384	; 0xb148
   17344:	movt	r6, #2
   17348:	cmp	r4, r6
   1734c:	beq	1735c <__assert_fail@plt+0x5e00>
   17350:	mov	r0, r4
   17354:	bl	12dc4 <__assert_fail@plt+0x1868>
   17358:	str	r6, [r8]
   1735c:	mov	r0, #1
   17360:	str	r0, [r5]
   17364:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17368:	movw	r3, #45512	; 0xb1c8
   1736c:	mvn	r2, #0
   17370:	movt	r3, #2
   17374:	b	17378 <__assert_fail@plt+0x5e1c>
   17378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1737c:	add	fp, sp, #28
   17380:	sub	sp, sp, #44	; 0x2c
   17384:	mov	r7, r3
   17388:	str	r2, [sp, #36]	; 0x24
   1738c:	str	r1, [sp, #32]
   17390:	mov	r5, r0
   17394:	bl	11400 <__errno_location@plt>
   17398:	cmp	r5, #0
   1739c:	blt	17508 <__assert_fail@plt+0x5fac>
   173a0:	cmn	r5, #-2147483647	; 0x80000001
   173a4:	beq	17508 <__assert_fail@plt+0x5fac>
   173a8:	movw	r8, #45380	; 0xb144
   173ac:	movw	r4, #45376	; 0xb140
   173b0:	str	r0, [sp, #28]
   173b4:	ldr	r0, [r0]
   173b8:	movt	r8, #2
   173bc:	movt	r4, #2
   173c0:	ldr	r1, [r8]
   173c4:	ldr	r6, [r4]
   173c8:	str	r0, [sp, #24]
   173cc:	cmp	r1, r5
   173d0:	ble	173dc <__assert_fail@plt+0x5e80>
   173d4:	mov	sl, r6
   173d8:	b	17444 <__assert_fail@plt+0x5ee8>
   173dc:	movw	r9, #45384	; 0xb148
   173e0:	mov	r0, #8
   173e4:	add	r2, r5, #1
   173e8:	str	r1, [fp, #-32]	; 0xffffffe0
   173ec:	mvn	r3, #-2147483648	; 0x80000000
   173f0:	movt	r9, #2
   173f4:	str	r0, [sp]
   173f8:	sub	r2, r2, r1
   173fc:	sub	r1, fp, #32
   17400:	subs	r0, r6, r9
   17404:	movne	r0, r6
   17408:	bl	184a8 <__assert_fail@plt+0x6f4c>
   1740c:	cmp	r6, r9
   17410:	mov	sl, r0
   17414:	str	r0, [r4]
   17418:	ldrdeq	r0, [r9]
   1741c:	stmeq	sl, {r0, r1}
   17420:	ldr	r1, [r8]
   17424:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17428:	add	r0, sl, r1, lsl #3
   1742c:	sub	r1, r2, r1
   17430:	lsl	r2, r1, #3
   17434:	mov	r1, #0
   17438:	bl	11418 <memset@plt>
   1743c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17440:	str	r0, [r8]
   17444:	mov	r9, sl
   17448:	ldr	r6, [r9, r5, lsl #3]!
   1744c:	ldr	r4, [r9, #4]!
   17450:	ldm	r7, {r0, r1}
   17454:	ldr	r2, [r7, #40]	; 0x28
   17458:	ldr	r3, [r7, #44]	; 0x2c
   1745c:	orr	r8, r1, #1
   17460:	add	r1, r7, #8
   17464:	stm	sp, {r0, r8}
   17468:	add	r0, sp, #8
   1746c:	str	r1, [sp, #20]
   17470:	stm	r0, {r1, r2, r3}
   17474:	mov	r0, r4
   17478:	mov	r1, r6
   1747c:	ldr	r2, [sp, #32]
   17480:	ldr	r3, [sp, #36]	; 0x24
   17484:	bl	16158 <__assert_fail@plt+0x4bfc>
   17488:	cmp	r6, r0
   1748c:	bhi	174f0 <__assert_fail@plt+0x5f94>
   17490:	add	r6, r0, #1
   17494:	movw	r0, #45560	; 0xb1f8
   17498:	movt	r0, #2
   1749c:	str	r6, [sl, r5, lsl #3]
   174a0:	cmp	r4, r0
   174a4:	beq	174b0 <__assert_fail@plt+0x5f54>
   174a8:	mov	r0, r4
   174ac:	bl	12dc4 <__assert_fail@plt+0x1868>
   174b0:	mov	r0, r6
   174b4:	bl	18378 <__assert_fail@plt+0x6e1c>
   174b8:	str	r0, [r9]
   174bc:	mov	r4, r0
   174c0:	add	r3, sp, #8
   174c4:	ldr	r0, [r7]
   174c8:	ldr	r1, [r7, #40]	; 0x28
   174cc:	ldr	r2, [r7, #44]	; 0x2c
   174d0:	stm	sp, {r0, r8}
   174d4:	ldr	r0, [sp, #20]
   174d8:	stm	r3, {r0, r1, r2}
   174dc:	mov	r0, r4
   174e0:	mov	r1, r6
   174e4:	ldr	r2, [sp, #32]
   174e8:	ldr	r3, [sp, #36]	; 0x24
   174ec:	bl	16158 <__assert_fail@plt+0x4bfc>
   174f0:	ldr	r0, [sp, #28]
   174f4:	ldr	r1, [sp, #24]
   174f8:	str	r1, [r0]
   174fc:	mov	r0, r4
   17500:	sub	sp, fp, #28
   17504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17508:	bl	11514 <abort@plt>
   1750c:	movw	r3, #45512	; 0xb1c8
   17510:	movt	r3, #2
   17514:	b	17378 <__assert_fail@plt+0x5e1c>
   17518:	movw	r3, #45512	; 0xb1c8
   1751c:	mov	r1, r0
   17520:	mov	r0, #0
   17524:	mvn	r2, #0
   17528:	movt	r3, #2
   1752c:	b	17378 <__assert_fail@plt+0x5e1c>
   17530:	movw	r3, #45512	; 0xb1c8
   17534:	mov	r2, r1
   17538:	mov	r1, r0
   1753c:	mov	r0, #0
   17540:	movt	r3, #2
   17544:	b	17378 <__assert_fail@plt+0x5e1c>
   17548:	push	{fp, lr}
   1754c:	mov	fp, sp
   17550:	sub	sp, sp, #48	; 0x30
   17554:	vmov.i32	q8, #0	; 0x00000000
   17558:	mov	ip, #32
   1755c:	mov	r3, sp
   17560:	mov	lr, r2
   17564:	cmp	r1, #10
   17568:	add	r2, r3, #16
   1756c:	vst1.64	{d16-d17}, [r3], ip
   17570:	vst1.64	{d16-d17}, [r3]
   17574:	vst1.64	{d16-d17}, [r2]
   17578:	beq	17598 <__assert_fail@plt+0x603c>
   1757c:	str	r1, [sp]
   17580:	mov	r3, sp
   17584:	mov	r1, lr
   17588:	mvn	r2, #0
   1758c:	bl	17378 <__assert_fail@plt+0x5e1c>
   17590:	mov	sp, fp
   17594:	pop	{fp, pc}
   17598:	bl	11514 <abort@plt>
   1759c:	push	{r4, sl, fp, lr}
   175a0:	add	fp, sp, #8
   175a4:	sub	sp, sp, #48	; 0x30
   175a8:	mov	ip, r3
   175ac:	mov	r3, sp
   175b0:	vmov.i32	q8, #0	; 0x00000000
   175b4:	mov	lr, #32
   175b8:	cmp	r1, #10
   175bc:	add	r4, r3, #16
   175c0:	vst1.64	{d16-d17}, [r3], lr
   175c4:	vst1.64	{d16-d17}, [r3]
   175c8:	vst1.64	{d16-d17}, [r4]
   175cc:	beq	175ec <__assert_fail@plt+0x6090>
   175d0:	str	r1, [sp]
   175d4:	mov	r1, r2
   175d8:	mov	r3, sp
   175dc:	mov	r2, ip
   175e0:	bl	17378 <__assert_fail@plt+0x5e1c>
   175e4:	sub	sp, fp, #8
   175e8:	pop	{r4, sl, fp, pc}
   175ec:	bl	11514 <abort@plt>
   175f0:	mov	r2, r1
   175f4:	mov	r1, r0
   175f8:	mov	r0, #0
   175fc:	b	17548 <__assert_fail@plt+0x5fec>
   17600:	mov	r3, r2
   17604:	mov	r2, r1
   17608:	mov	r1, r0
   1760c:	mov	r0, #0
   17610:	b	1759c <__assert_fail@plt+0x6040>
   17614:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17618:	add	fp, sp, #24
   1761c:	sub	sp, sp, #48	; 0x30
   17620:	movw	r8, #45512	; 0xb1c8
   17624:	mov	lr, r0
   17628:	mov	r3, sp
   1762c:	mov	ip, r1
   17630:	movt	r8, #2
   17634:	mov	r1, r3
   17638:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   1763c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   17640:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   17644:	stm	r1, {r0, r4, r5, r6, r7, r9}
   17648:	ubfx	r0, r2, #5, #3
   1764c:	and	r2, r2, #31
   17650:	mov	r4, #1
   17654:	add	r0, r3, r0, lsl #2
   17658:	ldr	r1, [r0, #8]
   1765c:	bic	r4, r4, r1, lsr r2
   17660:	eor	r1, r1, r4, lsl r2
   17664:	mov	r2, ip
   17668:	str	r1, [r0, #8]
   1766c:	mov	r0, #0
   17670:	mov	r1, lr
   17674:	bl	17378 <__assert_fail@plt+0x5e1c>
   17678:	sub	sp, fp, #24
   1767c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17684:	add	fp, sp, #24
   17688:	sub	sp, sp, #48	; 0x30
   1768c:	movw	lr, #45512	; 0xb1c8
   17690:	mov	ip, r0
   17694:	mov	r3, sp
   17698:	movt	lr, #2
   1769c:	mov	r2, r3
   176a0:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   176a4:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   176a8:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   176ac:	stm	r2, {r0, r4, r5, r6, r7, r8}
   176b0:	ubfx	r0, r1, #5, #3
   176b4:	and	r1, r1, #31
   176b8:	mov	r7, #1
   176bc:	add	r0, r3, r0, lsl #2
   176c0:	ldr	r2, [r0, #8]
   176c4:	bic	r7, r7, r2, lsr r1
   176c8:	eor	r1, r2, r7, lsl r1
   176cc:	mvn	r2, #0
   176d0:	str	r1, [r0, #8]
   176d4:	mov	r0, #0
   176d8:	mov	r1, ip
   176dc:	bl	17378 <__assert_fail@plt+0x5e1c>
   176e0:	sub	sp, fp, #24
   176e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   176e8:	push	{r4, r5, r6, r7, fp, lr}
   176ec:	add	fp, sp, #16
   176f0:	sub	sp, sp, #48	; 0x30
   176f4:	movw	lr, #45512	; 0xb1c8
   176f8:	mov	ip, r0
   176fc:	mov	r3, sp
   17700:	movt	lr, #2
   17704:	mov	r2, r3
   17708:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   1770c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17710:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17714:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17718:	mov	r1, ip
   1771c:	mvn	r2, #0
   17720:	ldr	r0, [sp, #12]
   17724:	orr	r0, r0, #67108864	; 0x4000000
   17728:	str	r0, [sp, #12]
   1772c:	mov	r0, #0
   17730:	bl	17378 <__assert_fail@plt+0x5e1c>
   17734:	sub	sp, fp, #16
   17738:	pop	{r4, r5, r6, r7, fp, pc}
   1773c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17740:	add	fp, sp, #24
   17744:	sub	sp, sp, #48	; 0x30
   17748:	movw	r8, #45512	; 0xb1c8
   1774c:	mov	ip, r1
   17750:	mov	lr, r0
   17754:	mov	r3, sp
   17758:	movt	r8, #2
   1775c:	mov	r2, r3
   17760:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   17764:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17768:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   1776c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   17770:	mov	r1, lr
   17774:	mov	r2, ip
   17778:	ldr	r0, [sp, #12]
   1777c:	orr	r0, r0, #67108864	; 0x4000000
   17780:	str	r0, [sp, #12]
   17784:	mov	r0, #0
   17788:	bl	17378 <__assert_fail@plt+0x5e1c>
   1778c:	sub	sp, fp, #24
   17790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17794:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17798:	add	fp, sp, #24
   1779c:	sub	sp, sp, #96	; 0x60
   177a0:	mov	lr, sp
   177a4:	vmov.i32	q8, #0	; 0x00000000
   177a8:	mov	ip, r2
   177ac:	cmp	r1, #10
   177b0:	add	r3, lr, #16
   177b4:	mov	r2, lr
   177b8:	vst1.64	{d16-d17}, [r3]
   177bc:	mov	r3, #28
   177c0:	vst1.64	{d16-d17}, [r2], r3
   177c4:	vst1.32	{d16-d17}, [r2]
   177c8:	beq	17808 <__assert_fail@plt+0x62ac>
   177cc:	str	r1, [sp, #48]	; 0x30
   177d0:	add	r3, sp, #48	; 0x30
   177d4:	ldm	lr!, {r2, r4, r5, r6, r7}
   177d8:	add	r1, r3, #4
   177dc:	stmia	r1!, {r2, r4, r5, r6, r7}
   177e0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   177e4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   177e8:	mvn	r2, #0
   177ec:	ldr	r1, [sp, #60]	; 0x3c
   177f0:	orr	r1, r1, #67108864	; 0x4000000
   177f4:	str	r1, [sp, #60]	; 0x3c
   177f8:	mov	r1, ip
   177fc:	bl	17378 <__assert_fail@plt+0x5e1c>
   17800:	sub	sp, fp, #24
   17804:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17808:	bl	11514 <abort@plt>
   1780c:	push	{fp, lr}
   17810:	mov	fp, sp
   17814:	sub	sp, sp, #8
   17818:	mvn	ip, #0
   1781c:	str	ip, [sp]
   17820:	bl	1782c <__assert_fail@plt+0x62d0>
   17824:	mov	sp, fp
   17828:	pop	{fp, pc}
   1782c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17830:	add	fp, sp, #24
   17834:	sub	sp, sp, #48	; 0x30
   17838:	movw	ip, #45512	; 0xb1c8
   1783c:	mov	lr, r3
   17840:	mov	r3, sp
   17844:	cmp	r1, #0
   17848:	movt	ip, #2
   1784c:	cmpne	r2, #0
   17850:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   17854:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   17858:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   1785c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   17860:	mov	r3, #10
   17864:	str	r3, [sp]
   17868:	bne	17870 <__assert_fail@plt+0x6314>
   1786c:	bl	11514 <abort@plt>
   17870:	ldr	ip, [fp, #8]
   17874:	str	r2, [sp, #44]	; 0x2c
   17878:	str	r1, [sp, #40]	; 0x28
   1787c:	mov	r3, sp
   17880:	mov	r1, lr
   17884:	mov	r2, ip
   17888:	bl	17378 <__assert_fail@plt+0x5e1c>
   1788c:	sub	sp, fp, #24
   17890:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17894:	push	{fp, lr}
   17898:	mov	fp, sp
   1789c:	sub	sp, sp, #8
   178a0:	mov	r3, r2
   178a4:	mov	r2, r1
   178a8:	mov	r1, r0
   178ac:	mvn	r0, #0
   178b0:	str	r0, [sp]
   178b4:	mov	r0, #0
   178b8:	bl	1782c <__assert_fail@plt+0x62d0>
   178bc:	mov	sp, fp
   178c0:	pop	{fp, pc}
   178c4:	push	{fp, lr}
   178c8:	mov	fp, sp
   178cc:	sub	sp, sp, #8
   178d0:	mov	ip, r2
   178d4:	mov	r2, r1
   178d8:	mov	r1, r0
   178dc:	str	r3, [sp]
   178e0:	mov	r0, #0
   178e4:	mov	r3, ip
   178e8:	bl	1782c <__assert_fail@plt+0x62d0>
   178ec:	mov	sp, fp
   178f0:	pop	{fp, pc}
   178f4:	movw	r3, #45392	; 0xb150
   178f8:	movt	r3, #2
   178fc:	b	17378 <__assert_fail@plt+0x5e1c>
   17900:	movw	r3, #45392	; 0xb150
   17904:	mov	r2, r1
   17908:	mov	r1, r0
   1790c:	mov	r0, #0
   17910:	movt	r3, #2
   17914:	b	17378 <__assert_fail@plt+0x5e1c>
   17918:	movw	r3, #45392	; 0xb150
   1791c:	mvn	r2, #0
   17920:	movt	r3, #2
   17924:	b	17378 <__assert_fail@plt+0x5e1c>
   17928:	movw	r3, #45392	; 0xb150
   1792c:	mov	r1, r0
   17930:	mov	r0, #0
   17934:	mvn	r2, #0
   17938:	movt	r3, #2
   1793c:	b	17378 <__assert_fail@plt+0x5e1c>
   17940:	push	{r4, r5, fp, lr}
   17944:	add	fp, sp, #8
   17948:	mov	r5, r0
   1794c:	mov	r4, r1
   17950:	mov	r0, #0
   17954:	mov	r2, #5
   17958:	mov	r1, r5
   1795c:	bl	112d4 <dcgettext@plt>
   17960:	cmp	r0, r5
   17964:	popne	{r4, r5, fp, pc}
   17968:	bl	192bc <__assert_fail@plt+0x7d60>
   1796c:	ldrb	r1, [r0]
   17970:	and	r1, r1, #223	; 0xdf
   17974:	cmp	r1, #71	; 0x47
   17978:	beq	179e0 <__assert_fail@plt+0x6484>
   1797c:	cmp	r1, #85	; 0x55
   17980:	bne	17a04 <__assert_fail@plt+0x64a8>
   17984:	ldrb	r1, [r0, #1]
   17988:	and	r1, r1, #223	; 0xdf
   1798c:	cmp	r1, #84	; 0x54
   17990:	bne	17a04 <__assert_fail@plt+0x64a8>
   17994:	ldrb	r1, [r0, #2]
   17998:	and	r1, r1, #223	; 0xdf
   1799c:	cmp	r1, #70	; 0x46
   179a0:	ldrbeq	r1, [r0, #3]
   179a4:	cmpeq	r1, #45	; 0x2d
   179a8:	bne	17a04 <__assert_fail@plt+0x64a8>
   179ac:	ldrb	r1, [r0, #4]
   179b0:	cmp	r1, #56	; 0x38
   179b4:	ldrbeq	r0, [r0, #5]
   179b8:	cmpeq	r0, #0
   179bc:	bne	17a04 <__assert_fail@plt+0x64a8>
   179c0:	ldrb	r1, [r5]
   179c4:	movw	r2, #43274	; 0xa90a
   179c8:	movw	r0, #43278	; 0xa90e
   179cc:	movt	r2, #1
   179d0:	movt	r0, #1
   179d4:	cmp	r1, #96	; 0x60
   179d8:	moveq	r0, r2
   179dc:	pop	{r4, r5, fp, pc}
   179e0:	ldrb	r1, [r0, #1]
   179e4:	and	r1, r1, #223	; 0xdf
   179e8:	cmp	r1, #66	; 0x42
   179ec:	bne	17a04 <__assert_fail@plt+0x64a8>
   179f0:	ldrb	r1, [r0, #2]
   179f4:	cmp	r1, #49	; 0x31
   179f8:	ldrbeq	r1, [r0, #3]
   179fc:	cmpeq	r1, #56	; 0x38
   17a00:	beq	17a20 <__assert_fail@plt+0x64c4>
   17a04:	movw	r1, #43268	; 0xa904
   17a08:	movw	r0, #43272	; 0xa908
   17a0c:	cmp	r4, #9
   17a10:	movt	r1, #1
   17a14:	movt	r0, #1
   17a18:	moveq	r0, r1
   17a1c:	pop	{r4, r5, fp, pc}
   17a20:	ldrb	r1, [r0, #4]
   17a24:	cmp	r1, #48	; 0x30
   17a28:	ldrbeq	r1, [r0, #5]
   17a2c:	cmpeq	r1, #51	; 0x33
   17a30:	bne	17a04 <__assert_fail@plt+0x64a8>
   17a34:	ldrb	r1, [r0, #6]
   17a38:	cmp	r1, #48	; 0x30
   17a3c:	ldrbeq	r0, [r0, #7]
   17a40:	cmpeq	r0, #0
   17a44:	bne	17a04 <__assert_fail@plt+0x64a8>
   17a48:	ldrb	r1, [r5]
   17a4c:	movw	r2, #43282	; 0xa912
   17a50:	movw	r0, #43286	; 0xa916
   17a54:	movt	r2, #1
   17a58:	movt	r0, #1
   17a5c:	b	179d4 <__assert_fail@plt+0x6478>
   17a60:	push	{r4, sl, fp, lr}
   17a64:	add	fp, sp, #8
   17a68:	sub	sp, sp, #104	; 0x68
   17a6c:	mov	r4, r0
   17a70:	movw	r0, #44151	; 0xac77
   17a74:	mov	r1, sp
   17a78:	movt	r0, #1
   17a7c:	bl	196a4 <__assert_fail@plt+0x8148>
   17a80:	mov	r1, r0
   17a84:	mov	r0, #0
   17a88:	cmp	r1, #0
   17a8c:	bne	17aa4 <__assert_fail@plt+0x6548>
   17a90:	ldr	r0, [sp, #96]	; 0x60
   17a94:	ldr	r1, [sp, #100]	; 0x64
   17a98:	ldm	sp, {r2, r3}
   17a9c:	stm	r4, {r0, r1, r2, r3}
   17aa0:	mov	r0, r4
   17aa4:	sub	sp, fp, #8
   17aa8:	pop	{r4, sl, fp, pc}
   17aac:	push	{r4, r5, r6, r7, fp, lr}
   17ab0:	add	fp, sp, #16
   17ab4:	mov	r4, r0
   17ab8:	cmp	r0, #2
   17abc:	movhi	r0, r4
   17ac0:	pophi	{r4, r5, r6, r7, fp, pc}
   17ac4:	mov	r0, r4
   17ac8:	bl	19390 <__assert_fail@plt+0x7e34>
   17acc:	mov	r5, r0
   17ad0:	bl	11400 <__errno_location@plt>
   17ad4:	ldr	r7, [r0]
   17ad8:	mov	r6, r0
   17adc:	mov	r0, r4
   17ae0:	bl	11520 <close@plt>
   17ae4:	mov	r0, r5
   17ae8:	str	r7, [r6]
   17aec:	pop	{r4, r5, r6, r7, fp, pc}
   17af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17af4:	add	fp, sp, #28
   17af8:	sub	sp, sp, #12
   17afc:	ldr	sl, [fp, #8]
   17b00:	mov	r9, r3
   17b04:	mov	r4, r2
   17b08:	mov	r8, r1
   17b0c:	mov	r7, r0
   17b10:	cmp	r2, #0
   17b14:	beq	17b2c <__assert_fail@plt+0x65d0>
   17b18:	mov	r0, r7
   17b1c:	mov	r1, #58	; 0x3a
   17b20:	bl	113dc <strchr@plt>
   17b24:	mov	r6, r0
   17b28:	b	17b30 <__assert_fail@plt+0x65d4>
   17b2c:	mov	r6, #0
   17b30:	mov	r0, r7
   17b34:	mov	r1, r6
   17b38:	mov	r2, r8
   17b3c:	mov	r3, r4
   17b40:	stm	sp, {r9, sl}
   17b44:	bl	17bac <__assert_fail@plt+0x6650>
   17b48:	mov	r5, r0
   17b4c:	cmp	r4, #0
   17b50:	beq	17ba0 <__assert_fail@plt+0x6644>
   17b54:	cmp	r6, #0
   17b58:	bne	17ba0 <__assert_fail@plt+0x6644>
   17b5c:	cmp	r5, #0
   17b60:	beq	17ba0 <__assert_fail@plt+0x6644>
   17b64:	mov	r0, r7
   17b68:	mov	r1, #46	; 0x2e
   17b6c:	bl	113dc <strchr@plt>
   17b70:	cmp	r0, #0
   17b74:	beq	17ba0 <__assert_fail@plt+0x6644>
   17b78:	mov	r1, r0
   17b7c:	mov	r0, r7
   17b80:	mov	r2, r8
   17b84:	mov	r3, r4
   17b88:	stm	sp, {r9, sl}
   17b8c:	bl	17bac <__assert_fail@plt+0x6650>
   17b90:	cmp	r0, #0
   17b94:	movne	r0, r5
   17b98:	sub	sp, fp, #28
   17b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba0:	mov	r0, r5
   17ba4:	sub	sp, fp, #28
   17ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb0:	add	fp, sp, #28
   17bb4:	sub	sp, sp, #36	; 0x24
   17bb8:	mov	sl, r3
   17bbc:	ldr	r3, [r2]
   17bc0:	mov	r9, r2
   17bc4:	mov	r4, r1
   17bc8:	ldr	r2, [fp, #8]
   17bcc:	ldr	r8, [fp, #12]
   17bd0:	cmp	sl, #0
   17bd4:	ldrne	r1, [sl]
   17bd8:	str	r3, [sp, #4]
   17bdc:	mvneq	r1, #0
   17be0:	cmp	r2, #0
   17be4:	str	r1, [sp, #8]
   17be8:	movne	r1, #0
   17bec:	strne	r1, [r2]
   17bf0:	cmp	r8, #0
   17bf4:	movne	r1, #0
   17bf8:	strne	r1, [r8]
   17bfc:	cmp	r4, #0
   17c00:	beq	17c34 <__assert_fail@plt+0x66d8>
   17c04:	subs	r5, r4, r0
   17c08:	beq	17cc4 <__assert_fail@plt+0x6768>
   17c0c:	add	r1, r5, #1
   17c10:	bl	186d4 <__assert_fail@plt+0x7178>
   17c14:	mov	r7, r0
   17c18:	mov	r0, #0
   17c1c:	mov	r6, r4
   17c20:	strb	r0, [r7, r5]
   17c24:	ldrb	r0, [r6, #1]!
   17c28:	cmp	r0, #0
   17c2c:	moveq	r6, r0
   17c30:	b	17c4c <__assert_fail@plt+0x66f0>
   17c34:	ldrb	r1, [r0]
   17c38:	cmp	r1, #0
   17c3c:	beq	17d40 <__assert_fail@plt+0x67e4>
   17c40:	bl	18758 <__assert_fail@plt+0x71fc>
   17c44:	mov	r7, r0
   17c48:	mov	r6, #0
   17c4c:	ldrb	r0, [r7]
   17c50:	cmp	r0, #43	; 0x2b
   17c54:	beq	17ca4 <__assert_fail@plt+0x6748>
   17c58:	mov	r0, r7
   17c5c:	bl	11250 <getpwnam@plt>
   17c60:	cmp	r0, #0
   17c64:	beq	17ca4 <__assert_fail@plt+0x6748>
   17c68:	ldr	r1, [r0, #8]
   17c6c:	mov	r5, #0
   17c70:	cmp	r4, #0
   17c74:	str	r1, [sp, #4]
   17c78:	beq	17cbc <__assert_fail@plt+0x6760>
   17c7c:	cmp	r6, #0
   17c80:	bne	17cbc <__assert_fail@plt+0x6760>
   17c84:	ldr	r4, [r0, #12]
   17c88:	mov	r0, r4
   17c8c:	bl	11544 <getgrgid@plt>
   17c90:	cmp	r0, #0
   17c94:	str	r4, [sp, #8]
   17c98:	beq	17d4c <__assert_fail@plt+0x67f0>
   17c9c:	ldr	r0, [r0]
   17ca0:	b	17d5c <__assert_fail@plt+0x6800>
   17ca4:	cmp	r4, #0
   17ca8:	beq	17ce4 <__assert_fail@plt+0x6788>
   17cac:	cmp	r6, #0
   17cb0:	bne	17ce4 <__assert_fail@plt+0x6788>
   17cb4:	movw	r5, #43403	; 0xa98b
   17cb8:	movt	r5, #1
   17cbc:	mov	r4, #0
   17cc0:	b	17d68 <__assert_fail@plt+0x680c>
   17cc4:	ldrb	r0, [r4, #1]!
   17cc8:	mov	r7, #0
   17ccc:	mov	r5, #0
   17cd0:	cmp	r0, #0
   17cd4:	moveq	r4, r0
   17cd8:	mov	r6, r4
   17cdc:	mov	r4, #0
   17ce0:	b	17d6c <__assert_fail@plt+0x6810>
   17ce4:	movw	r0, #40600	; 0x9e98
   17ce8:	add	r3, sp, #12
   17cec:	mov	r1, #0
   17cf0:	mov	r2, #10
   17cf4:	mov	r4, #0
   17cf8:	movt	r0, #1
   17cfc:	str	r0, [sp]
   17d00:	mov	r0, r7
   17d04:	bl	18858 <__assert_fail@plt+0x72fc>
   17d08:	ldr	r1, [sp, #12]
   17d0c:	clz	r0, r0
   17d10:	movw	r5, #43376	; 0xa970
   17d14:	lsr	r0, r0, #5
   17d18:	movt	r5, #1
   17d1c:	add	r2, r1, #1
   17d20:	cmn	r1, #1
   17d24:	movwne	r2, #1
   17d28:	ands	r0, r0, r2
   17d2c:	ldr	r0, [sp, #4]
   17d30:	movwne	r5, #0
   17d34:	movne	r0, r1
   17d38:	str	r0, [sp, #4]
   17d3c:	b	17d68 <__assert_fail@plt+0x680c>
   17d40:	mov	r4, #0
   17d44:	mov	r7, #0
   17d48:	b	17e14 <__assert_fail@plt+0x68b8>
   17d4c:	add	r2, sp, #12
   17d50:	mov	r0, r4
   17d54:	mov	r1, #0
   17d58:	bl	15e28 <__assert_fail@plt+0x48cc>
   17d5c:	bl	18758 <__assert_fail@plt+0x71fc>
   17d60:	mov	r4, r0
   17d64:	bl	1122c <endgrent@plt>
   17d68:	bl	11478 <endpwent@plt>
   17d6c:	cmp	r6, #0
   17d70:	beq	17e08 <__assert_fail@plt+0x68ac>
   17d74:	cmp	r5, #0
   17d78:	bne	17e08 <__assert_fail@plt+0x68ac>
   17d7c:	ldrb	r0, [r6]
   17d80:	cmp	r0, #43	; 0x2b
   17d84:	beq	17da4 <__assert_fail@plt+0x6848>
   17d88:	mov	r0, r6
   17d8c:	bl	11550 <getgrnam@plt>
   17d90:	cmp	r0, #0
   17d94:	beq	17da4 <__assert_fail@plt+0x6848>
   17d98:	ldr	r0, [r0, #8]
   17d9c:	mov	r5, #0
   17da0:	b	17df4 <__assert_fail@plt+0x6898>
   17da4:	movw	r0, #40600	; 0x9e98
   17da8:	add	r3, sp, #12
   17dac:	mov	r1, #0
   17db0:	mov	r2, #10
   17db4:	movt	r0, #1
   17db8:	str	r0, [sp]
   17dbc:	mov	r0, r6
   17dc0:	bl	18858 <__assert_fail@plt+0x72fc>
   17dc4:	ldr	r1, [sp, #12]
   17dc8:	clz	r0, r0
   17dcc:	movw	r5, #43389	; 0xa97d
   17dd0:	lsr	r0, r0, #5
   17dd4:	movt	r5, #1
   17dd8:	add	r2, r1, #1
   17ddc:	cmn	r1, #1
   17de0:	movwne	r2, #1
   17de4:	ands	r0, r0, r2
   17de8:	ldr	r0, [sp, #8]
   17dec:	movwne	r5, #0
   17df0:	movne	r0, r1
   17df4:	str	r0, [sp, #8]
   17df8:	bl	1122c <endgrent@plt>
   17dfc:	mov	r0, r6
   17e00:	bl	18758 <__assert_fail@plt+0x71fc>
   17e04:	mov	r4, r0
   17e08:	mov	r6, #0
   17e0c:	cmp	r5, #0
   17e10:	bne	17e58 <__assert_fail@plt+0x68fc>
   17e14:	ldr	r0, [sp, #4]
   17e18:	cmp	sl, #0
   17e1c:	mov	r6, #1
   17e20:	str	r0, [r9]
   17e24:	ldrne	r0, [sp, #8]
   17e28:	strne	r0, [sl]
   17e2c:	ldr	r0, [fp, #8]
   17e30:	cmp	r0, #0
   17e34:	strne	r7, [r0]
   17e38:	movne	r7, #0
   17e3c:	cmp	r8, #0
   17e40:	beq	17e54 <__assert_fail@plt+0x68f8>
   17e44:	str	r4, [r8]
   17e48:	mov	r5, #0
   17e4c:	mov	r4, #0
   17e50:	b	17e58 <__assert_fail@plt+0x68fc>
   17e54:	mov	r5, #0
   17e58:	mov	r0, r7
   17e5c:	bl	12dc4 <__assert_fail@plt+0x1868>
   17e60:	mov	r0, r4
   17e64:	bl	12dc4 <__assert_fail@plt+0x1868>
   17e68:	mov	r0, #0
   17e6c:	cmp	r6, #0
   17e70:	bne	17e84 <__assert_fail@plt+0x6928>
   17e74:	mov	r0, #0
   17e78:	mov	r1, r5
   17e7c:	mov	r2, #5
   17e80:	bl	112d4 <dcgettext@plt>
   17e84:	sub	sp, fp, #28
   17e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17e90:	add	fp, sp, #24
   17e94:	sub	sp, sp, #32
   17e98:	ldr	r6, [fp, #12]
   17e9c:	ldr	r7, [fp, #8]
   17ea0:	mov	r4, r2
   17ea4:	mov	r8, r0
   17ea8:	cmp	r1, #0
   17eac:	beq	17ed4 <__assert_fail@plt+0x6978>
   17eb0:	movw	r2, #43416	; 0xa998
   17eb4:	mov	r5, r1
   17eb8:	str	r3, [sp, #4]
   17ebc:	str	r4, [sp]
   17ec0:	mov	r0, r8
   17ec4:	mov	r1, #1
   17ec8:	movt	r2, #1
   17ecc:	mov	r3, r5
   17ed0:	b	17eec <__assert_fail@plt+0x6990>
   17ed4:	movw	r2, #43428	; 0xa9a4
   17ed8:	str	r3, [sp]
   17edc:	mov	r0, r8
   17ee0:	mov	r1, #1
   17ee4:	mov	r3, r4
   17ee8:	movt	r2, #1
   17eec:	bl	1143c <__fprintf_chk@plt>
   17ef0:	movw	r1, #43435	; 0xa9ab
   17ef4:	mov	r0, #0
   17ef8:	mov	r2, #5
   17efc:	movt	r1, #1
   17f00:	bl	112d4 <dcgettext@plt>
   17f04:	movw	r2, #44153	; 0xac79
   17f08:	mov	r3, r0
   17f0c:	movw	r0, #2022	; 0x7e6
   17f10:	mov	r1, #1
   17f14:	str	r0, [sp]
   17f18:	movt	r2, #1
   17f1c:	mov	r0, r8
   17f20:	bl	1143c <__fprintf_chk@plt>
   17f24:	movw	r4, #40599	; 0x9e97
   17f28:	mov	r1, r8
   17f2c:	movt	r4, #1
   17f30:	mov	r0, r4
   17f34:	bl	11238 <fputs_unlocked@plt>
   17f38:	movw	r1, #43439	; 0xa9af
   17f3c:	mov	r0, #0
   17f40:	mov	r2, #5
   17f44:	movt	r1, #1
   17f48:	bl	112d4 <dcgettext@plt>
   17f4c:	movw	r3, #43610	; 0xaa5a
   17f50:	mov	r2, r0
   17f54:	mov	r0, r8
   17f58:	mov	r1, #1
   17f5c:	movt	r3, #1
   17f60:	bl	1143c <__fprintf_chk@plt>
   17f64:	mov	r0, r4
   17f68:	mov	r1, r8
   17f6c:	bl	11238 <fputs_unlocked@plt>
   17f70:	cmp	r6, #9
   17f74:	bhi	17fd8 <__assert_fail@plt+0x6a7c>
   17f78:	add	r0, pc, #0
   17f7c:	ldr	pc, [r0, r6, lsl #2]
   17f80:			; <UNDEFINED> instruction: 0x000181b0
   17f84:	andeq	r7, r1, r8, lsr #31
   17f88:	andeq	r7, r1, r4, ror #31
   17f8c:	andeq	r8, r1, ip
   17f90:	andeq	r8, r1, r4, lsr r0
   17f94:	andeq	r8, r1, ip, asr r0
   17f98:	andeq	r8, r1, r4, lsl #1
   17f9c:	strheq	r8, [r1], -ip
   17fa0:	andeq	r8, r1, ip, asr r1
   17fa4:	andeq	r8, r1, r4, lsl #2
   17fa8:	movw	r1, #43644	; 0xaa7c
   17fac:	mov	r0, #0
   17fb0:	mov	r2, #5
   17fb4:	movt	r1, #1
   17fb8:	bl	112d4 <dcgettext@plt>
   17fbc:	ldr	r3, [r7]
   17fc0:	mov	r2, r0
   17fc4:	mov	r0, r8
   17fc8:	mov	r1, #1
   17fcc:	sub	sp, fp, #24
   17fd0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17fd4:	b	1143c <__fprintf_chk@plt>
   17fd8:	movw	r1, #43963	; 0xabbb
   17fdc:	movt	r1, #1
   17fe0:	b	1810c <__assert_fail@plt+0x6bb0>
   17fe4:	movw	r1, #43660	; 0xaa8c
   17fe8:	mov	r0, #0
   17fec:	mov	r2, #5
   17ff0:	movt	r1, #1
   17ff4:	bl	112d4 <dcgettext@plt>
   17ff8:	mov	r2, r0
   17ffc:	ldr	r3, [r7]
   18000:	ldr	r0, [r7, #4]
   18004:	str	r0, [sp]
   18008:	b	180f8 <__assert_fail@plt+0x6b9c>
   1800c:	movw	r1, #43683	; 0xaaa3
   18010:	mov	r0, #0
   18014:	mov	r2, #5
   18018:	movt	r1, #1
   1801c:	bl	112d4 <dcgettext@plt>
   18020:	ldr	r3, [r7]
   18024:	mov	r2, r0
   18028:	ldmib	r7, {r0, r1}
   1802c:	stm	sp, {r0, r1}
   18030:	b	180f8 <__assert_fail@plt+0x6b9c>
   18034:	movw	r1, #43711	; 0xaabf
   18038:	mov	r0, #0
   1803c:	mov	r2, #5
   18040:	movt	r1, #1
   18044:	bl	112d4 <dcgettext@plt>
   18048:	ldr	r3, [r7]
   1804c:	mov	r2, r0
   18050:	ldmib	r7, {r0, r1, r7}
   18054:	stm	sp, {r0, r1, r7}
   18058:	b	180f8 <__assert_fail@plt+0x6b9c>
   1805c:	movw	r1, #43743	; 0xaadf
   18060:	mov	r0, #0
   18064:	mov	r2, #5
   18068:	movt	r1, #1
   1806c:	bl	112d4 <dcgettext@plt>
   18070:	ldr	r3, [r7]
   18074:	mov	r2, r0
   18078:	ldmib	r7, {r0, r1, r6, r7}
   1807c:	stm	sp, {r0, r1, r6, r7}
   18080:	b	180f8 <__assert_fail@plt+0x6b9c>
   18084:	movw	r1, #43779	; 0xab03
   18088:	mov	r0, #0
   1808c:	mov	r2, #5
   18090:	movt	r1, #1
   18094:	bl	112d4 <dcgettext@plt>
   18098:	ldr	r3, [r7]
   1809c:	mov	r2, r0
   180a0:	ldmib	r7, {r0, r1, r6}
   180a4:	ldr	r5, [r7, #16]
   180a8:	ldr	r7, [r7, #20]
   180ac:	stm	sp, {r0, r1, r6}
   180b0:	str	r5, [sp, #12]
   180b4:	str	r7, [sp, #16]
   180b8:	b	180f8 <__assert_fail@plt+0x6b9c>
   180bc:	movw	r1, #43819	; 0xab2b
   180c0:	mov	r0, #0
   180c4:	mov	r2, #5
   180c8:	movt	r1, #1
   180cc:	bl	112d4 <dcgettext@plt>
   180d0:	ldr	r3, [r7]
   180d4:	mov	r2, r0
   180d8:	ldmib	r7, {r0, r1, r6}
   180dc:	ldr	r5, [r7, #16]
   180e0:	ldr	r4, [r7, #20]
   180e4:	ldr	r7, [r7, #24]
   180e8:	stm	sp, {r0, r1, r6}
   180ec:	str	r5, [sp, #12]
   180f0:	str	r4, [sp, #16]
   180f4:	str	r7, [sp, #20]
   180f8:	mov	r0, r8
   180fc:	mov	r1, #1
   18100:	b	181ac <__assert_fail@plt+0x6c50>
   18104:	movw	r1, #43911	; 0xab87
   18108:	movt	r1, #1
   1810c:	mov	r0, #0
   18110:	mov	r2, #5
   18114:	bl	112d4 <dcgettext@plt>
   18118:	mov	ip, r0
   1811c:	ldr	r3, [r7]
   18120:	ldr	r0, [r7, #4]
   18124:	ldr	r1, [r7, #8]
   18128:	ldr	r6, [r7, #12]
   1812c:	ldr	r5, [r7, #16]
   18130:	ldr	r4, [r7, #20]
   18134:	ldr	r2, [r7, #24]
   18138:	ldr	lr, [r7, #28]
   1813c:	ldr	r7, [r7, #32]
   18140:	stm	sp, {r0, r1, r6}
   18144:	str	r5, [sp, #12]
   18148:	str	r4, [sp, #16]
   1814c:	str	r2, [sp, #20]
   18150:	str	lr, [sp, #24]
   18154:	str	r7, [sp, #28]
   18158:	b	181a0 <__assert_fail@plt+0x6c44>
   1815c:	movw	r1, #43863	; 0xab57
   18160:	mov	r0, #0
   18164:	mov	r2, #5
   18168:	movt	r1, #1
   1816c:	bl	112d4 <dcgettext@plt>
   18170:	mov	ip, r0
   18174:	ldr	r3, [r7]
   18178:	ldmib	r7, {r0, r1, r6}
   1817c:	ldr	r5, [r7, #16]
   18180:	ldr	r4, [r7, #20]
   18184:	ldr	r2, [r7, #24]
   18188:	ldr	r7, [r7, #28]
   1818c:	stm	sp, {r0, r1, r6}
   18190:	str	r5, [sp, #12]
   18194:	str	r4, [sp, #16]
   18198:	str	r2, [sp, #20]
   1819c:	str	r7, [sp, #24]
   181a0:	mov	r0, r8
   181a4:	mov	r1, #1
   181a8:	mov	r2, ip
   181ac:	bl	1143c <__fprintf_chk@plt>
   181b0:	sub	sp, fp, #24
   181b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   181b8:	push	{r4, sl, fp, lr}
   181bc:	add	fp, sp, #8
   181c0:	sub	sp, sp, #8
   181c4:	ldr	ip, [fp, #8]
   181c8:	mov	lr, #0
   181cc:	ldr	r4, [ip, lr, lsl #2]
   181d0:	add	lr, lr, #1
   181d4:	cmp	r4, #0
   181d8:	bne	181cc <__assert_fail@plt+0x6c70>
   181dc:	sub	r4, lr, #1
   181e0:	str	ip, [sp]
   181e4:	str	r4, [sp, #4]
   181e8:	bl	17e8c <__assert_fail@plt+0x6930>
   181ec:	sub	sp, fp, #8
   181f0:	pop	{r4, sl, fp, pc}
   181f4:	push	{r4, r5, fp, lr}
   181f8:	add	fp, sp, #8
   181fc:	sub	sp, sp, #48	; 0x30
   18200:	ldr	r4, [fp, #8]
   18204:	mov	ip, #0
   18208:	add	lr, sp, #8
   1820c:	ldr	r5, [r4]
   18210:	cmp	r5, #0
   18214:	str	r5, [lr, ip, lsl #2]
   18218:	beq	1822c <__assert_fail@plt+0x6cd0>
   1821c:	add	ip, ip, #1
   18220:	add	r4, r4, #4
   18224:	cmp	ip, #10
   18228:	bcc	1820c <__assert_fail@plt+0x6cb0>
   1822c:	str	lr, [sp]
   18230:	str	ip, [sp, #4]
   18234:	bl	17e8c <__assert_fail@plt+0x6930>
   18238:	sub	sp, fp, #8
   1823c:	pop	{r4, r5, fp, pc}
   18240:	push	{fp, lr}
   18244:	mov	fp, sp
   18248:	sub	sp, sp, #8
   1824c:	add	ip, fp, #8
   18250:	str	ip, [sp, #4]
   18254:	str	ip, [sp]
   18258:	bl	181f4 <__assert_fail@plt+0x6c98>
   1825c:	mov	sp, fp
   18260:	pop	{fp, pc}
   18264:	push	{fp, lr}
   18268:	mov	fp, sp
   1826c:	movw	r0, #45460	; 0xb194
   18270:	movt	r0, #2
   18274:	ldr	r1, [r0]
   18278:	movw	r0, #40599	; 0x9e97
   1827c:	movt	r0, #1
   18280:	bl	11238 <fputs_unlocked@plt>
   18284:	movw	r1, #44023	; 0xabf7
   18288:	mov	r0, #0
   1828c:	mov	r2, #5
   18290:	movt	r1, #1
   18294:	bl	112d4 <dcgettext@plt>
   18298:	movw	r2, #44043	; 0xac0b
   1829c:	mov	r1, r0
   182a0:	mov	r0, #1
   182a4:	movt	r2, #1
   182a8:	bl	11424 <__printf_chk@plt>
   182ac:	movw	r1, #44065	; 0xac21
   182b0:	mov	r0, #0
   182b4:	mov	r2, #5
   182b8:	movt	r1, #1
   182bc:	bl	112d4 <dcgettext@plt>
   182c0:	movw	r2, #41139	; 0xa0b3
   182c4:	movw	r3, #41414	; 0xa1c6
   182c8:	mov	r1, r0
   182cc:	mov	r0, #1
   182d0:	movt	r2, #1
   182d4:	movt	r3, #1
   182d8:	bl	11424 <__printf_chk@plt>
   182dc:	movw	r1, #44085	; 0xac35
   182e0:	mov	r0, #0
   182e4:	mov	r2, #5
   182e8:	movt	r1, #1
   182ec:	bl	112d4 <dcgettext@plt>
   182f0:	movw	r2, #44124	; 0xac5c
   182f4:	mov	r1, r0
   182f8:	mov	r0, #1
   182fc:	movt	r2, #1
   18300:	pop	{fp, lr}
   18304:	b	11424 <__printf_chk@plt>
   18308:	b	1830c <__assert_fail@plt+0x6db0>
   1830c:	push	{r4, r5, r6, sl, fp, lr}
   18310:	add	fp, sp, #16
   18314:	mov	r4, r2
   18318:	mov	r5, r1
   1831c:	mov	r6, r0
   18320:	bl	19354 <__assert_fail@plt+0x7df8>
   18324:	cmp	r0, #0
   18328:	popne	{r4, r5, r6, sl, fp, pc}
   1832c:	cmp	r6, #0
   18330:	beq	18344 <__assert_fail@plt+0x6de8>
   18334:	cmp	r5, #0
   18338:	cmpne	r4, #0
   1833c:	bne	18344 <__assert_fail@plt+0x6de8>
   18340:	pop	{r4, r5, r6, sl, fp, pc}
   18344:	bl	18798 <__assert_fail@plt+0x723c>
   18348:	push	{fp, lr}
   1834c:	mov	fp, sp
   18350:	bl	18d14 <__assert_fail@plt+0x77b8>
   18354:	cmp	r0, #0
   18358:	popne	{fp, pc}
   1835c:	bl	18798 <__assert_fail@plt+0x723c>
   18360:	push	{fp, lr}
   18364:	mov	fp, sp
   18368:	bl	18d14 <__assert_fail@plt+0x77b8>
   1836c:	cmp	r0, #0
   18370:	popne	{fp, pc}
   18374:	bl	18798 <__assert_fail@plt+0x723c>
   18378:	push	{fp, lr}
   1837c:	mov	fp, sp
   18380:	bl	18d14 <__assert_fail@plt+0x77b8>
   18384:	cmp	r0, #0
   18388:	popne	{fp, pc}
   1838c:	bl	18798 <__assert_fail@plt+0x723c>
   18390:	push	{r4, r5, fp, lr}
   18394:	add	fp, sp, #8
   18398:	mov	r4, r1
   1839c:	mov	r5, r0
   183a0:	bl	18d44 <__assert_fail@plt+0x77e8>
   183a4:	cmp	r0, #0
   183a8:	popne	{r4, r5, fp, pc}
   183ac:	cmp	r5, #0
   183b0:	beq	183c0 <__assert_fail@plt+0x6e64>
   183b4:	cmp	r4, #0
   183b8:	bne	183c0 <__assert_fail@plt+0x6e64>
   183bc:	pop	{r4, r5, fp, pc}
   183c0:	bl	18798 <__assert_fail@plt+0x723c>
   183c4:	push	{fp, lr}
   183c8:	mov	fp, sp
   183cc:	cmp	r1, #0
   183d0:	orreq	r1, r1, #1
   183d4:	bl	18d44 <__assert_fail@plt+0x77e8>
   183d8:	cmp	r0, #0
   183dc:	popne	{fp, pc}
   183e0:	bl	18798 <__assert_fail@plt+0x723c>
   183e4:	push	{fp, lr}
   183e8:	mov	fp, sp
   183ec:	clz	r3, r2
   183f0:	lsr	ip, r3, #5
   183f4:	clz	r3, r1
   183f8:	lsr	r3, r3, #5
   183fc:	orrs	r3, r3, ip
   18400:	movwne	r1, #1
   18404:	movwne	r2, #1
   18408:	bl	19354 <__assert_fail@plt+0x7df8>
   1840c:	cmp	r0, #0
   18410:	popne	{fp, pc}
   18414:	bl	18798 <__assert_fail@plt+0x723c>
   18418:	push	{fp, lr}
   1841c:	mov	fp, sp
   18420:	mov	r2, r1
   18424:	mov	r1, r0
   18428:	mov	r0, #0
   1842c:	bl	19354 <__assert_fail@plt+0x7df8>
   18430:	cmp	r0, #0
   18434:	popne	{fp, pc}
   18438:	bl	18798 <__assert_fail@plt+0x723c>
   1843c:	mov	r2, r1
   18440:	mov	r1, r0
   18444:	mov	r0, #0
   18448:	b	183e4 <__assert_fail@plt+0x6e88>
   1844c:	mov	r2, #1
   18450:	b	18454 <__assert_fail@plt+0x6ef8>
   18454:	push	{r4, r5, fp, lr}
   18458:	add	fp, sp, #8
   1845c:	ldr	r5, [r1]
   18460:	mov	r4, r1
   18464:	cmp	r0, #0
   18468:	beq	18480 <__assert_fail@plt+0x6f24>
   1846c:	mov	r1, #1
   18470:	add	r1, r1, r5, lsr #1
   18474:	adds	r5, r5, r1
   18478:	bcc	18498 <__assert_fail@plt+0x6f3c>
   1847c:	bl	18798 <__assert_fail@plt+0x723c>
   18480:	cmp	r5, #0
   18484:	bne	18498 <__assert_fail@plt+0x6f3c>
   18488:	mov	r1, #64	; 0x40
   1848c:	cmp	r2, #64	; 0x40
   18490:	udiv	r5, r1, r2
   18494:	addhi	r5, r5, #1
   18498:	mov	r1, r5
   1849c:	bl	1830c <__assert_fail@plt+0x6db0>
   184a0:	str	r5, [r4]
   184a4:	pop	{r4, r5, fp, pc}
   184a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184ac:	add	fp, sp, #24
   184b0:	ldr	r6, [r1]
   184b4:	mov	r8, r1
   184b8:	ldr	r4, [fp, #8]
   184bc:	add	r1, r6, r6, asr #1
   184c0:	cmp	r1, r6
   184c4:	mvnvs	r1, #-2147483648	; 0x80000000
   184c8:	cmp	r1, r3
   184cc:	mov	r5, r1
   184d0:	movgt	r5, r3
   184d4:	cmn	r3, #1
   184d8:	movle	r5, r1
   184dc:	cmn	r4, #1
   184e0:	ble	18500 <__assert_fail@plt+0x6fa4>
   184e4:	cmp	r4, #0
   184e8:	beq	18554 <__assert_fail@plt+0x6ff8>
   184ec:	cmn	r5, #1
   184f0:	ble	18528 <__assert_fail@plt+0x6fcc>
   184f4:	mvn	r7, #-2147483648	; 0x80000000
   184f8:	udiv	r1, r7, r4
   184fc:	b	1851c <__assert_fail@plt+0x6fc0>
   18500:	cmn	r5, #1
   18504:	ble	18544 <__assert_fail@plt+0x6fe8>
   18508:	cmn	r4, #1
   1850c:	beq	18554 <__assert_fail@plt+0x6ff8>
   18510:	mov	r1, #-2147483648	; 0x80000000
   18514:	mvn	r7, #-2147483648	; 0x80000000
   18518:	sdiv	r1, r1, r4
   1851c:	cmp	r1, r5
   18520:	bge	18554 <__assert_fail@plt+0x6ff8>
   18524:	b	18564 <__assert_fail@plt+0x7008>
   18528:	beq	18554 <__assert_fail@plt+0x6ff8>
   1852c:	mov	r1, #-2147483648	; 0x80000000
   18530:	mvn	r7, #-2147483648	; 0x80000000
   18534:	sdiv	r1, r1, r5
   18538:	cmp	r1, r4
   1853c:	bge	18554 <__assert_fail@plt+0x6ff8>
   18540:	b	18564 <__assert_fail@plt+0x7008>
   18544:	mvn	r7, #-2147483648	; 0x80000000
   18548:	sdiv	r1, r7, r4
   1854c:	cmp	r5, r1
   18550:	blt	18564 <__assert_fail@plt+0x7008>
   18554:	mul	r1, r5, r4
   18558:	mov	r7, #64	; 0x40
   1855c:	cmp	r1, #63	; 0x3f
   18560:	bgt	1856c <__assert_fail@plt+0x7010>
   18564:	sdiv	r5, r7, r4
   18568:	mul	r1, r5, r4
   1856c:	cmp	r0, #0
   18570:	moveq	r7, #0
   18574:	streq	r7, [r8]
   18578:	sub	r7, r5, r6
   1857c:	cmp	r7, r2
   18580:	bge	18624 <__assert_fail@plt+0x70c8>
   18584:	add	r5, r6, r2
   18588:	mov	r2, #0
   1858c:	mov	r1, #0
   18590:	cmp	r5, r3
   18594:	movwgt	r2, #1
   18598:	cmn	r3, #1
   1859c:	movwgt	r1, #1
   185a0:	cmp	r5, r6
   185a4:	bvs	1860c <__assert_fail@plt+0x70b0>
   185a8:	ands	r1, r1, r2
   185ac:	bne	1860c <__assert_fail@plt+0x70b0>
   185b0:	cmn	r4, #1
   185b4:	ble	185d4 <__assert_fail@plt+0x7078>
   185b8:	cmp	r4, #0
   185bc:	beq	18620 <__assert_fail@plt+0x70c4>
   185c0:	cmn	r5, #1
   185c4:	ble	185f8 <__assert_fail@plt+0x709c>
   185c8:	mvn	r1, #-2147483648	; 0x80000000
   185cc:	udiv	r1, r1, r4
   185d0:	b	185ec <__assert_fail@plt+0x7090>
   185d4:	cmn	r5, #1
   185d8:	ble	18610 <__assert_fail@plt+0x70b4>
   185dc:	cmn	r4, #1
   185e0:	beq	18620 <__assert_fail@plt+0x70c4>
   185e4:	mov	r1, #-2147483648	; 0x80000000
   185e8:	sdiv	r1, r1, r4
   185ec:	cmp	r1, r5
   185f0:	bge	18620 <__assert_fail@plt+0x70c4>
   185f4:	b	1860c <__assert_fail@plt+0x70b0>
   185f8:	beq	18620 <__assert_fail@plt+0x70c4>
   185fc:	mov	r1, #-2147483648	; 0x80000000
   18600:	sdiv	r1, r1, r5
   18604:	cmp	r1, r4
   18608:	bge	18620 <__assert_fail@plt+0x70c4>
   1860c:	bl	18798 <__assert_fail@plt+0x723c>
   18610:	mvn	r1, #-2147483648	; 0x80000000
   18614:	sdiv	r1, r1, r4
   18618:	cmp	r5, r1
   1861c:	blt	1860c <__assert_fail@plt+0x70b0>
   18620:	mul	r1, r5, r4
   18624:	bl	18390 <__assert_fail@plt+0x6e34>
   18628:	str	r5, [r8]
   1862c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18630:	push	{fp, lr}
   18634:	mov	fp, sp
   18638:	mov	r1, #1
   1863c:	bl	18cc0 <__assert_fail@plt+0x7764>
   18640:	cmp	r0, #0
   18644:	popne	{fp, pc}
   18648:	bl	18798 <__assert_fail@plt+0x723c>
   1864c:	push	{fp, lr}
   18650:	mov	fp, sp
   18654:	bl	18cc0 <__assert_fail@plt+0x7764>
   18658:	cmp	r0, #0
   1865c:	popne	{fp, pc}
   18660:	bl	18798 <__assert_fail@plt+0x723c>
   18664:	push	{fp, lr}
   18668:	mov	fp, sp
   1866c:	mov	r1, #1
   18670:	bl	18cc0 <__assert_fail@plt+0x7764>
   18674:	cmp	r0, #0
   18678:	popne	{fp, pc}
   1867c:	bl	18798 <__assert_fail@plt+0x723c>
   18680:	push	{fp, lr}
   18684:	mov	fp, sp
   18688:	bl	18cc0 <__assert_fail@plt+0x7764>
   1868c:	cmp	r0, #0
   18690:	popne	{fp, pc}
   18694:	bl	18798 <__assert_fail@plt+0x723c>
   18698:	push	{r4, r5, r6, sl, fp, lr}
   1869c:	add	fp, sp, #16
   186a0:	mov	r5, r0
   186a4:	mov	r0, r1
   186a8:	mov	r4, r1
   186ac:	bl	18d14 <__assert_fail@plt+0x77b8>
   186b0:	cmp	r0, #0
   186b4:	beq	186d0 <__assert_fail@plt+0x7174>
   186b8:	mov	r1, r5
   186bc:	mov	r2, r4
   186c0:	mov	r6, r0
   186c4:	bl	112a4 <memcpy@plt>
   186c8:	mov	r0, r6
   186cc:	pop	{r4, r5, r6, sl, fp, pc}
   186d0:	bl	18798 <__assert_fail@plt+0x723c>
   186d4:	push	{r4, r5, r6, sl, fp, lr}
   186d8:	add	fp, sp, #16
   186dc:	mov	r5, r0
   186e0:	mov	r0, r1
   186e4:	mov	r4, r1
   186e8:	bl	18d14 <__assert_fail@plt+0x77b8>
   186ec:	cmp	r0, #0
   186f0:	beq	1870c <__assert_fail@plt+0x71b0>
   186f4:	mov	r1, r5
   186f8:	mov	r2, r4
   186fc:	mov	r6, r0
   18700:	bl	112a4 <memcpy@plt>
   18704:	mov	r0, r6
   18708:	pop	{r4, r5, r6, sl, fp, pc}
   1870c:	bl	18798 <__assert_fail@plt+0x723c>
   18710:	push	{r4, r5, r6, sl, fp, lr}
   18714:	add	fp, sp, #16
   18718:	mov	r5, r0
   1871c:	add	r0, r1, #1
   18720:	mov	r4, r1
   18724:	bl	18d14 <__assert_fail@plt+0x77b8>
   18728:	cmp	r0, #0
   1872c:	beq	18754 <__assert_fail@plt+0x71f8>
   18730:	mov	r6, r0
   18734:	mov	r0, #0
   18738:	mov	r1, r5
   1873c:	mov	r2, r4
   18740:	strb	r0, [r6, r4]
   18744:	mov	r0, r6
   18748:	bl	112a4 <memcpy@plt>
   1874c:	mov	r0, r6
   18750:	pop	{r4, r5, r6, sl, fp, pc}
   18754:	bl	18798 <__assert_fail@plt+0x723c>
   18758:	push	{r4, r5, r6, sl, fp, lr}
   1875c:	add	fp, sp, #16
   18760:	mov	r4, r0
   18764:	bl	113d0 <strlen@plt>
   18768:	add	r5, r0, #1
   1876c:	mov	r0, r5
   18770:	bl	18d14 <__assert_fail@plt+0x77b8>
   18774:	cmp	r0, #0
   18778:	beq	18794 <__assert_fail@plt+0x7238>
   1877c:	mov	r1, r4
   18780:	mov	r2, r5
   18784:	mov	r6, r0
   18788:	bl	112a4 <memcpy@plt>
   1878c:	mov	r0, r6
   18790:	pop	{r4, r5, r6, sl, fp, pc}
   18794:	bl	18798 <__assert_fail@plt+0x723c>
   18798:	push	{fp, lr}
   1879c:	mov	fp, sp
   187a0:	movw	r0, #45372	; 0xb13c
   187a4:	movw	r1, #44200	; 0xaca8
   187a8:	mov	r2, #5
   187ac:	movt	r0, #2
   187b0:	movt	r1, #1
   187b4:	ldr	r4, [r0]
   187b8:	mov	r0, #0
   187bc:	bl	112d4 <dcgettext@plt>
   187c0:	movw	r2, #41136	; 0xa0b0
   187c4:	mov	r3, r0
   187c8:	mov	r0, r4
   187cc:	mov	r1, #0
   187d0:	movt	r2, #1
   187d4:	bl	11358 <error@plt>
   187d8:	bl	11514 <abort@plt>
   187dc:	push	{fp, lr}
   187e0:	mov	fp, sp
   187e4:	orr	r1, r1, #512	; 0x200
   187e8:	bl	12dec <__assert_fail@plt+0x1890>
   187ec:	cmp	r0, #0
   187f0:	popne	{fp, pc}
   187f4:	bl	11400 <__errno_location@plt>
   187f8:	ldr	r0, [r0]
   187fc:	cmp	r0, #22
   18800:	bne	18824 <__assert_fail@plt+0x72c8>
   18804:	movw	r0, #44217	; 0xacb9
   18808:	movw	r1, #44233	; 0xacc9
   1880c:	movw	r3, #44244	; 0xacd4
   18810:	mov	r2, #41	; 0x29
   18814:	movt	r0, #1
   18818:	movt	r1, #1
   1881c:	movt	r3, #1
   18820:	bl	1155c <__assert_fail@plt>
   18824:	bl	18798 <__assert_fail@plt+0x723c>
   18828:	ldr	r0, [r0, #48]	; 0x30
   1882c:	and	r0, r0, #17
   18830:	cmp	r0, #16
   18834:	moveq	r0, #1
   18838:	bxeq	lr
   1883c:	cmp	r0, #17
   18840:	movne	r0, #0
   18844:	bxne	lr
   18848:	ldr	r0, [r1, #48]	; 0x30
   1884c:	cmp	r0, #0
   18850:	movwne	r0, #1
   18854:	bx	lr
   18858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1885c:	add	fp, sp, #28
   18860:	sub	sp, sp, #12
   18864:	cmp	r2, #37	; 0x25
   18868:	bcs	18ca0 <__assert_fail@plt+0x7744>
   1886c:	ldr	r9, [fp, #8]
   18870:	mov	r7, r2
   18874:	mov	r6, r1
   18878:	mov	r4, r0
   1887c:	str	r3, [sp, #4]
   18880:	bl	11400 <__errno_location@plt>
   18884:	mov	r5, r0
   18888:	mov	r0, #0
   1888c:	str	r0, [r5]
   18890:	bl	113ac <__ctype_b_loc@plt>
   18894:	ldr	r1, [r0]
   18898:	mov	r2, r4
   1889c:	ldrb	r0, [r2], #1
   188a0:	add	r3, r1, r0, lsl #1
   188a4:	ldrb	r3, [r3, #1]
   188a8:	tst	r3, #32
   188ac:	bne	1889c <__assert_fail@plt+0x7340>
   188b0:	add	r8, sp, #8
   188b4:	cmp	r6, #0
   188b8:	mov	sl, #4
   188bc:	movne	r8, r6
   188c0:	cmp	r0, #45	; 0x2d
   188c4:	beq	18c94 <__assert_fail@plt+0x7738>
   188c8:	mov	r0, r4
   188cc:	mov	r1, r8
   188d0:	mov	r2, r7
   188d4:	bl	113c4 <strtoul@plt>
   188d8:	ldr	r6, [r8]
   188dc:	cmp	r6, r4
   188e0:	beq	18904 <__assert_fail@plt+0x73a8>
   188e4:	mov	r7, r0
   188e8:	ldr	r0, [r5]
   188ec:	cmp	r0, #0
   188f0:	beq	18930 <__assert_fail@plt+0x73d4>
   188f4:	cmp	r0, #34	; 0x22
   188f8:	bne	18c94 <__assert_fail@plt+0x7738>
   188fc:	mov	sl, #1
   18900:	b	18934 <__assert_fail@plt+0x73d8>
   18904:	cmp	r9, #0
   18908:	ldrbne	r1, [r4]
   1890c:	cmpne	r1, #0
   18910:	beq	18c94 <__assert_fail@plt+0x7738>
   18914:	mov	r0, r9
   18918:	bl	113dc <strchr@plt>
   1891c:	cmp	r0, #0
   18920:	beq	18c94 <__assert_fail@plt+0x7738>
   18924:	mov	r7, #1
   18928:	mov	sl, #0
   1892c:	b	1893c <__assert_fail@plt+0x73e0>
   18930:	mov	sl, r0
   18934:	cmp	r9, #0
   18938:	beq	18c8c <__assert_fail@plt+0x7730>
   1893c:	ldrb	r4, [r6]
   18940:	cmp	r4, #0
   18944:	beq	18c8c <__assert_fail@plt+0x7730>
   18948:	mov	r0, r9
   1894c:	mov	r1, r4
   18950:	bl	113dc <strchr@plt>
   18954:	cmp	r0, #0
   18958:	beq	18c14 <__assert_fail@plt+0x76b8>
   1895c:	sub	r0, r4, #69	; 0x45
   18960:	mov	r3, #1
   18964:	mov	r5, #1024	; 0x400
   18968:	cmp	r0, #21
   1896c:	bhi	18984 <__assert_fail@plt+0x7428>
   18970:	movw	r2, #35141	; 0x8945
   18974:	mov	r1, #1
   18978:	movt	r2, #48	; 0x30
   1897c:	tst	r2, r1, lsl r0
   18980:	bne	189a0 <__assert_fail@plt+0x7444>
   18984:	sub	r0, r4, #103	; 0x67
   18988:	cmp	r0, #13
   1898c:	bhi	189f0 <__assert_fail@plt+0x7494>
   18990:	mov	r1, #1
   18994:	movw	r2, #8273	; 0x2051
   18998:	tst	r2, r1, lsl r0
   1899c:	beq	189f0 <__assert_fail@plt+0x7494>
   189a0:	mov	r0, r9
   189a4:	mov	r1, #48	; 0x30
   189a8:	bl	113dc <strchr@plt>
   189ac:	cmp	r0, #0
   189b0:	beq	189ec <__assert_fail@plt+0x7490>
   189b4:	ldrb	r0, [r6, #1]
   189b8:	cmp	r0, #66	; 0x42
   189bc:	cmpne	r0, #68	; 0x44
   189c0:	bne	189d0 <__assert_fail@plt+0x7474>
   189c4:	mov	r3, #2
   189c8:	mov	r5, #1000	; 0x3e8
   189cc:	b	189f0 <__assert_fail@plt+0x7494>
   189d0:	cmp	r0, #105	; 0x69
   189d4:	bne	189ec <__assert_fail@plt+0x7490>
   189d8:	ldrb	r0, [r6, #2]
   189dc:	mov	r3, #1
   189e0:	cmp	r0, #66	; 0x42
   189e4:	movweq	r3, #3
   189e8:	b	189f0 <__assert_fail@plt+0x7494>
   189ec:	mov	r3, #1
   189f0:	cmp	r4, #89	; 0x59
   189f4:	bgt	18a64 <__assert_fail@plt+0x7508>
   189f8:	sub	r0, r4, #66	; 0x42
   189fc:	cmp	r0, #14
   18a00:	bhi	18ad8 <__assert_fail@plt+0x757c>
   18a04:	add	r1, pc, #0
   18a08:	ldr	pc, [r1, r0, lsl #2]
   18a0c:	andeq	r8, r1, r8, asr #20
   18a10:	andeq	r8, r1, r4, lsl ip
   18a14:	andeq	r8, r1, r4, lsl ip
   18a18:	andeq	r8, r1, r0, lsr #24
   18a1c:	andeq	r8, r1, r4, lsl ip
   18a20:	andeq	r8, r1, r8, lsr fp
   18a24:	andeq	r8, r1, r4, lsl ip
   18a28:	andeq	r8, r1, r4, lsl ip
   18a2c:	andeq	r8, r1, r4, lsl ip
   18a30:	andeq	r8, r1, r4, ror #22
   18a34:	andeq	r8, r1, r4, lsl ip
   18a38:	andeq	r8, r1, r8, lsl #23
   18a3c:	andeq	r8, r1, r4, lsl ip
   18a40:	andeq	r8, r1, r4, lsl ip
   18a44:	andeq	r8, r1, ip, asr #24
   18a48:	mov	r1, #0
   18a4c:	lsr	r0, r7, #22
   18a50:	cmp	r1, r7, lsr #22
   18a54:	lsl	r7, r7, #10
   18a58:	movwne	r0, #1
   18a5c:	mvnne	r7, #0
   18a60:	b	18c74 <__assert_fail@plt+0x7718>
   18a64:	cmp	r4, #115	; 0x73
   18a68:	bgt	18b14 <__assert_fail@plt+0x75b8>
   18a6c:	sub	r1, r4, #98	; 0x62
   18a70:	cmp	r1, #11
   18a74:	bhi	18be0 <__assert_fail@plt+0x7684>
   18a78:	add	r2, pc, #4
   18a7c:	mov	r0, #0
   18a80:	ldr	pc, [r2, r1, lsl #2]
   18a84:			; <UNDEFINED> instruction: 0x00018ab4
   18a88:	andeq	r8, r1, r4, ror ip
   18a8c:	andeq	r8, r1, r4, lsl ip
   18a90:	andeq	r8, r1, r4, lsl ip
   18a94:	andeq	r8, r1, r4, lsl ip
   18a98:	andeq	r8, r1, r8, lsr fp
   18a9c:	andeq	r8, r1, r4, lsl ip
   18aa0:	andeq	r8, r1, r4, lsl ip
   18aa4:	andeq	r8, r1, r4, lsl ip
   18aa8:	andeq	r8, r1, r4, ror #22
   18aac:	andeq	r8, r1, r4, lsl ip
   18ab0:	andeq	r8, r1, r8, lsl #23
   18ab4:	movw	r0, #65535	; 0xffff
   18ab8:	movt	r0, #63	; 0x3f
   18abc:	add	r1, r0, #4194304	; 0x400000
   18ac0:	mov	r0, #0
   18ac4:	cmp	r7, r1
   18ac8:	lsl	r7, r7, #9
   18acc:	movwhi	r0, #1
   18ad0:	mvnhi	r7, #0
   18ad4:	b	18c74 <__assert_fail@plt+0x7718>
   18ad8:	cmp	r4, #84	; 0x54
   18adc:	beq	18bb4 <__assert_fail@plt+0x7658>
   18ae0:	cmp	r4, #89	; 0x59
   18ae4:	bne	18c14 <__assert_fail@plt+0x76b8>
   18ae8:	mvn	r0, #0
   18aec:	mvn	r2, #7
   18af0:	udiv	r1, r0, r5
   18af4:	mov	r0, #0
   18af8:	cmp	r1, r7
   18afc:	mul	r7, r7, r5
   18b00:	orrcc	r0, r0, #1
   18b04:	mvncc	r7, #0
   18b08:	adds	r2, r2, #1
   18b0c:	bne	18af8 <__assert_fail@plt+0x759c>
   18b10:	b	18c74 <__assert_fail@plt+0x7718>
   18b14:	cmp	r4, #116	; 0x74
   18b18:	beq	18bb4 <__assert_fail@plt+0x7658>
   18b1c:	cmp	r4, #119	; 0x77
   18b20:	bne	18c14 <__assert_fail@plt+0x76b8>
   18b24:	lsl	r1, r7, #1
   18b28:	cmp	r7, #0
   18b2c:	lsr	r0, r7, #31
   18b30:	mvnlt	r1, #0
   18b34:	b	18b80 <__assert_fail@plt+0x7624>
   18b38:	mvn	r0, #0
   18b3c:	mvn	r2, #2
   18b40:	udiv	r1, r0, r5
   18b44:	mov	r0, #0
   18b48:	cmp	r1, r7
   18b4c:	mul	r7, r7, r5
   18b50:	orrcc	r0, r0, #1
   18b54:	mvncc	r7, #0
   18b58:	adds	r2, r2, #1
   18b5c:	bne	18b48 <__assert_fail@plt+0x75ec>
   18b60:	b	18c74 <__assert_fail@plt+0x7718>
   18b64:	mvn	r0, #0
   18b68:	mul	r1, r7, r5
   18b6c:	udiv	r0, r0, r5
   18b70:	cmp	r0, r7
   18b74:	mov	r0, #0
   18b78:	mvncc	r1, #0
   18b7c:	movwcc	r0, #1
   18b80:	mov	r7, r1
   18b84:	b	18c74 <__assert_fail@plt+0x7718>
   18b88:	mvn	r0, #0
   18b8c:	mvn	r2, #1
   18b90:	udiv	r1, r0, r5
   18b94:	mov	r0, #0
   18b98:	cmp	r1, r7
   18b9c:	mul	r7, r7, r5
   18ba0:	orrcc	r0, r0, #1
   18ba4:	mvncc	r7, #0
   18ba8:	adds	r2, r2, #1
   18bac:	bne	18b98 <__assert_fail@plt+0x763c>
   18bb0:	b	18c74 <__assert_fail@plt+0x7718>
   18bb4:	mvn	r0, #0
   18bb8:	mvn	r2, #3
   18bbc:	udiv	r1, r0, r5
   18bc0:	mov	r0, #0
   18bc4:	cmp	r1, r7
   18bc8:	mul	r7, r7, r5
   18bcc:	orrcc	r0, r0, #1
   18bd0:	mvncc	r7, #0
   18bd4:	adds	r2, r2, #1
   18bd8:	bne	18bc4 <__assert_fail@plt+0x7668>
   18bdc:	b	18c74 <__assert_fail@plt+0x7718>
   18be0:	cmp	r4, #90	; 0x5a
   18be4:	bne	18c14 <__assert_fail@plt+0x76b8>
   18be8:	mvn	r0, #0
   18bec:	mvn	r2, #6
   18bf0:	udiv	r1, r0, r5
   18bf4:	mov	r0, #0
   18bf8:	cmp	r1, r7
   18bfc:	mul	r7, r7, r5
   18c00:	orrcc	r0, r0, #1
   18c04:	mvncc	r7, #0
   18c08:	adds	r2, r2, #1
   18c0c:	bne	18bf8 <__assert_fail@plt+0x769c>
   18c10:	b	18c74 <__assert_fail@plt+0x7718>
   18c14:	ldr	r0, [sp, #4]
   18c18:	orr	sl, sl, #2
   18c1c:	b	18c90 <__assert_fail@plt+0x7734>
   18c20:	mvn	r0, #0
   18c24:	mvn	r2, #5
   18c28:	udiv	r1, r0, r5
   18c2c:	mov	r0, #0
   18c30:	cmp	r1, r7
   18c34:	mul	r7, r7, r5
   18c38:	orrcc	r0, r0, #1
   18c3c:	mvncc	r7, #0
   18c40:	adds	r2, r2, #1
   18c44:	bne	18c30 <__assert_fail@plt+0x76d4>
   18c48:	b	18c74 <__assert_fail@plt+0x7718>
   18c4c:	mvn	r0, #0
   18c50:	mvn	r2, #4
   18c54:	udiv	r1, r0, r5
   18c58:	mov	r0, #0
   18c5c:	cmp	r1, r7
   18c60:	mul	r7, r7, r5
   18c64:	orrcc	r0, r0, #1
   18c68:	mvncc	r7, #0
   18c6c:	adds	r2, r2, #1
   18c70:	bne	18c5c <__assert_fail@plt+0x7700>
   18c74:	add	r1, r6, r3
   18c78:	orr	sl, r0, sl
   18c7c:	str	r1, [r8]
   18c80:	ldrb	r1, [r6, r3]
   18c84:	cmp	r1, #0
   18c88:	orrne	sl, sl, #2
   18c8c:	ldr	r0, [sp, #4]
   18c90:	str	r7, [r0]
   18c94:	mov	r0, sl
   18c98:	sub	sp, fp, #28
   18c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ca0:	movw	r0, #44322	; 0xad22
   18ca4:	movw	r1, #44360	; 0xad48
   18ca8:	movw	r3, #44376	; 0xad58
   18cac:	mov	r2, #85	; 0x55
   18cb0:	movt	r0, #1
   18cb4:	movt	r1, #1
   18cb8:	movt	r3, #1
   18cbc:	bl	1155c <__assert_fail@plt>
   18cc0:	clz	r2, r1
   18cc4:	clz	r3, r0
   18cc8:	lsr	r2, r2, #5
   18ccc:	lsr	r3, r3, #5
   18cd0:	orrs	r2, r3, r2
   18cd4:	movwne	r1, #1
   18cd8:	movwne	r0, #1
   18cdc:	cmp	r1, #0
   18ce0:	beq	18d10 <__assert_fail@plt+0x77b4>
   18ce4:	mvn	r2, #-2147483648	; 0x80000000
   18ce8:	udiv	r2, r2, r1
   18cec:	cmp	r2, r0
   18cf0:	bcs	18d10 <__assert_fail@plt+0x77b4>
   18cf4:	push	{fp, lr}
   18cf8:	mov	fp, sp
   18cfc:	bl	11400 <__errno_location@plt>
   18d00:	mov	r1, #12
   18d04:	str	r1, [r0]
   18d08:	mov	r0, #0
   18d0c:	pop	{fp, pc}
   18d10:	b	11220 <calloc@plt>
   18d14:	cmp	r0, #0
   18d18:	movweq	r0, #1
   18d1c:	cmn	r0, #1
   18d20:	ble	18d28 <__assert_fail@plt+0x77cc>
   18d24:	b	11370 <malloc@plt>
   18d28:	push	{fp, lr}
   18d2c:	mov	fp, sp
   18d30:	bl	11400 <__errno_location@plt>
   18d34:	mov	r1, #12
   18d38:	str	r1, [r0]
   18d3c:	mov	r0, #0
   18d40:	pop	{fp, pc}
   18d44:	push	{fp, lr}
   18d48:	mov	fp, sp
   18d4c:	cmp	r0, #0
   18d50:	beq	18d6c <__assert_fail@plt+0x7810>
   18d54:	cmp	r1, #0
   18d58:	beq	18d78 <__assert_fail@plt+0x781c>
   18d5c:	cmn	r1, #1
   18d60:	ble	18d80 <__assert_fail@plt+0x7824>
   18d64:	pop	{fp, lr}
   18d68:	b	112e0 <realloc@plt>
   18d6c:	mov	r0, r1
   18d70:	pop	{fp, lr}
   18d74:	b	18d14 <__assert_fail@plt+0x77b8>
   18d78:	bl	12dc4 <__assert_fail@plt+0x1868>
   18d7c:	b	18d8c <__assert_fail@plt+0x7830>
   18d80:	bl	11400 <__errno_location@plt>
   18d84:	mov	r1, #12
   18d88:	str	r1, [r0]
   18d8c:	mov	r0, #0
   18d90:	pop	{fp, pc}
   18d94:	push	{r4, r5, r6, sl, fp, lr}
   18d98:	add	fp, sp, #16
   18d9c:	mov	r4, r0
   18da0:	bl	11334 <__fpending@plt>
   18da4:	mov	r5, r0
   18da8:	mov	r0, r4
   18dac:	bl	11340 <ferror_unlocked@plt>
   18db0:	mov	r6, r0
   18db4:	mov	r0, r4
   18db8:	bl	18f00 <__assert_fail@plt+0x79a4>
   18dbc:	cmp	r6, #0
   18dc0:	beq	18de0 <__assert_fail@plt+0x7884>
   18dc4:	mvn	r4, #0
   18dc8:	cmp	r0, #0
   18dcc:	bne	18e0c <__assert_fail@plt+0x78b0>
   18dd0:	bl	11400 <__errno_location@plt>
   18dd4:	mov	r1, #0
   18dd8:	str	r1, [r0]
   18ddc:	b	18e0c <__assert_fail@plt+0x78b0>
   18de0:	cmp	r0, #0
   18de4:	mov	r4, r0
   18de8:	mvnne	r4, #0
   18dec:	cmp	r5, #0
   18df0:	bne	18e0c <__assert_fail@plt+0x78b0>
   18df4:	cmp	r0, #0
   18df8:	beq	18e0c <__assert_fail@plt+0x78b0>
   18dfc:	bl	11400 <__errno_location@plt>
   18e00:	ldr	r0, [r0]
   18e04:	subs	r4, r0, #9
   18e08:	mvnne	r4, #0
   18e0c:	mov	r0, r4
   18e10:	pop	{r4, r5, r6, sl, fp, pc}
   18e14:	movw	r2, #62998	; 0xf616
   18e18:	mov	r1, #0
   18e1c:	movt	r2, #149	; 0x95
   18e20:	str	r1, [r0, #16]
   18e24:	str	r1, [r0, #20]
   18e28:	str	r2, [r0, #24]
   18e2c:	bx	lr
   18e30:	push	{r4, r5, r6, r7, fp, lr}
   18e34:	add	fp, sp, #16
   18e38:	ldr	r2, [r0, #24]
   18e3c:	movw	r3, #62998	; 0xf616
   18e40:	movt	r3, #149	; 0x95
   18e44:	cmp	r2, r3
   18e48:	bne	18ee0 <__assert_fail@plt+0x7984>
   18e4c:	mov	r3, r0
   18e50:	ldr	r2, [r3, #16]!
   18e54:	ldr	lr, [r3, #4]
   18e58:	orrs	r5, r2, lr
   18e5c:	beq	18e94 <__assert_fail@plt+0x7938>
   18e60:	ldrd	r4, [r0]
   18e64:	ldrd	r6, [r1, #96]	; 0x60
   18e68:	eor	r7, r7, r5
   18e6c:	eor	r6, r6, r4
   18e70:	orrs	r7, r6, r7
   18e74:	bne	18e94 <__assert_fail@plt+0x7938>
   18e78:	ldrd	r4, [r0, #8]
   18e7c:	ldrd	r6, [r1]
   18e80:	mov	ip, #1
   18e84:	eor	r7, r7, r5
   18e88:	eor	r6, r6, r4
   18e8c:	orrs	r7, r6, r7
   18e90:	beq	18ed8 <__assert_fail@plt+0x797c>
   18e94:	adds	r4, r2, #1
   18e98:	mov	ip, #0
   18e9c:	adc	r5, lr, #0
   18ea0:	and	r2, r4, r2
   18ea4:	strd	r4, [r3]
   18ea8:	and	r3, r5, lr
   18eac:	orrs	r2, r2, r3
   18eb0:	bne	18ed8 <__assert_fail@plt+0x797c>
   18eb4:	orrs	r2, r4, r5
   18eb8:	beq	18ed4 <__assert_fail@plt+0x7978>
   18ebc:	ldrd	r2, [r1]
   18ec0:	str	r3, [r0, #12]
   18ec4:	str	r2, [r0, #8]
   18ec8:	ldrd	r2, [r1, #96]	; 0x60
   18ecc:	stm	r0, {r2, r3}
   18ed0:	b	18ed8 <__assert_fail@plt+0x797c>
   18ed4:	mov	ip, #1
   18ed8:	mov	r0, ip
   18edc:	pop	{r4, r5, r6, r7, fp, pc}
   18ee0:	movw	r0, #44457	; 0xada9
   18ee4:	movw	r1, #44481	; 0xadc1
   18ee8:	movw	r3, #44499	; 0xadd3
   18eec:	mov	r2, #60	; 0x3c
   18ef0:	movt	r0, #1
   18ef4:	movt	r1, #1
   18ef8:	movt	r3, #1
   18efc:	bl	1155c <__assert_fail@plt>
   18f00:	push	{r4, r5, r6, sl, fp, lr}
   18f04:	add	fp, sp, #16
   18f08:	sub	sp, sp, #8
   18f0c:	mov	r4, r0
   18f10:	bl	11430 <fileno@plt>
   18f14:	cmn	r0, #1
   18f18:	ble	18f8c <__assert_fail@plt+0x7a30>
   18f1c:	mov	r0, r4
   18f20:	bl	11388 <__freading@plt>
   18f24:	cmp	r0, #0
   18f28:	beq	18f54 <__assert_fail@plt+0x79f8>
   18f2c:	mov	r0, r4
   18f30:	bl	11430 <fileno@plt>
   18f34:	mov	r1, #1
   18f38:	mov	r2, #0
   18f3c:	mov	r3, #0
   18f40:	str	r1, [sp]
   18f44:	bl	1131c <lseek64@plt>
   18f48:	and	r0, r0, r1
   18f4c:	cmn	r0, #1
   18f50:	beq	18f8c <__assert_fail@plt+0x7a30>
   18f54:	mov	r0, r4
   18f58:	bl	191bc <__assert_fail@plt+0x7c60>
   18f5c:	cmp	r0, #0
   18f60:	beq	18f8c <__assert_fail@plt+0x7a30>
   18f64:	bl	11400 <__errno_location@plt>
   18f68:	ldr	r6, [r0]
   18f6c:	mov	r5, r0
   18f70:	mov	r0, r4
   18f74:	bl	11448 <fclose@plt>
   18f78:	cmp	r6, #0
   18f7c:	strne	r6, [r5]
   18f80:	mvnne	r0, #0
   18f84:	sub	sp, fp, #16
   18f88:	pop	{r4, r5, r6, sl, fp, pc}
   18f8c:	mov	r0, r4
   18f90:	sub	sp, fp, #16
   18f94:	pop	{r4, r5, r6, sl, fp, lr}
   18f98:	b	11448 <fclose@plt>
   18f9c:	sub	sp, sp, #8
   18fa0:	push	{r4, r5, r6, r7, fp, lr}
   18fa4:	add	fp, sp, #16
   18fa8:	sub	sp, sp, #8
   18fac:	mov	r5, r0
   18fb0:	add	r0, fp, #8
   18fb4:	cmp	r1, #11
   18fb8:	str	r3, [fp, #12]
   18fbc:	str	r2, [fp, #8]
   18fc0:	str	r0, [sp, #4]
   18fc4:	bhi	19000 <__assert_fail@plt+0x7aa4>
   18fc8:	mov	r0, #1
   18fcc:	movw	r2, #1300	; 0x514
   18fd0:	tst	r2, r0, lsl r1
   18fd4:	bne	190b8 <__assert_fail@plt+0x7b5c>
   18fd8:	movw	r2, #2570	; 0xa0a
   18fdc:	tst	r2, r0, lsl r1
   18fe0:	bne	19028 <__assert_fail@plt+0x7acc>
   18fe4:	cmp	r1, #0
   18fe8:	bne	19000 <__assert_fail@plt+0x7aa4>
   18fec:	ldr	r0, [sp, #4]
   18ff0:	add	r1, r0, #4
   18ff4:	str	r1, [sp, #4]
   18ff8:	mov	r1, #0
   18ffc:	b	190c4 <__assert_fail@plt+0x7b68>
   19000:	sub	r0, r1, #1024	; 0x400
   19004:	cmp	r0, #10
   19008:	bhi	190b8 <__assert_fail@plt+0x7b5c>
   1900c:	mov	r2, #1
   19010:	movw	r3, #645	; 0x285
   19014:	tst	r3, r2, lsl r0
   19018:	bne	190b8 <__assert_fail@plt+0x7b5c>
   1901c:	movw	r3, #1282	; 0x502
   19020:	tst	r3, r2, lsl r0
   19024:	beq	19034 <__assert_fail@plt+0x7ad8>
   19028:	mov	r0, r5
   1902c:	bl	11460 <fcntl64@plt>
   19030:	b	190d0 <__assert_fail@plt+0x7b74>
   19034:	cmp	r0, #6
   19038:	bne	190b8 <__assert_fail@plt+0x7b5c>
   1903c:	ldr	r0, [sp, #4]
   19040:	movw	r7, #45816	; 0xb2f8
   19044:	movt	r7, #2
   19048:	add	r1, r0, #4
   1904c:	str	r1, [sp, #4]
   19050:	ldr	r6, [r0]
   19054:	ldr	r0, [r7]
   19058:	cmp	r0, #0
   1905c:	blt	190f4 <__assert_fail@plt+0x7b98>
   19060:	mov	r0, r5
   19064:	movw	r1, #1030	; 0x406
   19068:	mov	r2, r6
   1906c:	bl	11460 <fcntl64@plt>
   19070:	mov	r4, r0
   19074:	cmn	r0, #1
   19078:	bgt	190e8 <__assert_fail@plt+0x7b8c>
   1907c:	bl	11400 <__errno_location@plt>
   19080:	ldr	r0, [r0]
   19084:	cmp	r0, #22
   19088:	bne	190e8 <__assert_fail@plt+0x7b8c>
   1908c:	mov	r0, r5
   19090:	mov	r1, #0
   19094:	mov	r2, r6
   19098:	bl	11460 <fcntl64@plt>
   1909c:	mov	r4, r0
   190a0:	cmp	r0, #0
   190a4:	blt	190d4 <__assert_fail@plt+0x7b78>
   190a8:	mvn	r0, #0
   190ac:	str	r0, [r7]
   190b0:	mov	r0, #1
   190b4:	b	19118 <__assert_fail@plt+0x7bbc>
   190b8:	ldr	r0, [sp, #4]
   190bc:	add	r2, r0, #4
   190c0:	str	r2, [sp, #4]
   190c4:	ldr	r2, [r0]
   190c8:	mov	r0, r5
   190cc:	bl	11460 <fcntl64@plt>
   190d0:	mov	r4, r0
   190d4:	mov	r0, r4
   190d8:	sub	sp, fp, #16
   190dc:	pop	{r4, r5, r6, r7, fp, lr}
   190e0:	add	sp, sp, #8
   190e4:	bx	lr
   190e8:	mov	r0, #1
   190ec:	str	r0, [r7]
   190f0:	b	190d4 <__assert_fail@plt+0x7b78>
   190f4:	mov	r0, r5
   190f8:	mov	r1, #0
   190fc:	mov	r2, r6
   19100:	bl	11460 <fcntl64@plt>
   19104:	mov	r4, r0
   19108:	ldr	r0, [r7]
   1910c:	add	r0, r0, #1
   19110:	clz	r0, r0
   19114:	lsr	r0, r0, #5
   19118:	cmp	r0, #0
   1911c:	beq	190d4 <__assert_fail@plt+0x7b78>
   19120:	cmp	r4, #0
   19124:	blt	190d4 <__assert_fail@plt+0x7b78>
   19128:	mov	r0, r4
   1912c:	mov	r1, #1
   19130:	bl	11460 <fcntl64@plt>
   19134:	cmp	r0, #0
   19138:	blt	19154 <__assert_fail@plt+0x7bf8>
   1913c:	orr	r2, r0, #1
   19140:	mov	r0, r4
   19144:	mov	r1, #2
   19148:	bl	11460 <fcntl64@plt>
   1914c:	cmn	r0, #1
   19150:	bne	190d4 <__assert_fail@plt+0x7b78>
   19154:	bl	11400 <__errno_location@plt>
   19158:	ldr	r6, [r0]
   1915c:	mov	r5, r0
   19160:	mov	r0, r4
   19164:	bl	11520 <close@plt>
   19168:	str	r6, [r5]
   1916c:	mvn	r4, #0
   19170:	b	190d4 <__assert_fail@plt+0x7b78>
   19174:	sub	sp, sp, #8
   19178:	push	{fp, lr}
   1917c:	mov	fp, sp
   19180:	sub	sp, sp, #8
   19184:	str	r2, [fp, #8]
   19188:	mov	r2, #0
   1918c:	tst	r1, #64	; 0x40
   19190:	str	r3, [fp, #12]
   19194:	addne	r2, fp, #8
   19198:	orrne	r2, r2, #4
   1919c:	strne	r2, [sp, #4]
   191a0:	ldrne	r2, [fp, #8]
   191a4:	bl	11364 <open64@plt>
   191a8:	bl	17aac <__assert_fail@plt+0x6550>
   191ac:	mov	sp, fp
   191b0:	pop	{fp, lr}
   191b4:	add	sp, sp, #8
   191b8:	bx	lr
   191bc:	push	{r4, sl, fp, lr}
   191c0:	add	fp, sp, #8
   191c4:	sub	sp, sp, #8
   191c8:	mov	r4, r0
   191cc:	cmp	r0, #0
   191d0:	beq	191ec <__assert_fail@plt+0x7c90>
   191d4:	mov	r0, r4
   191d8:	bl	11388 <__freading@plt>
   191dc:	cmp	r0, #0
   191e0:	ldrbne	r0, [r4, #1]
   191e4:	tstne	r0, #1
   191e8:	bne	191fc <__assert_fail@plt+0x7ca0>
   191ec:	mov	r0, r4
   191f0:	sub	sp, fp, #8
   191f4:	pop	{r4, sl, fp, lr}
   191f8:	b	11274 <fflush@plt>
   191fc:	mov	r0, #1
   19200:	mov	r2, #0
   19204:	mov	r3, #0
   19208:	str	r0, [sp]
   1920c:	mov	r0, r4
   19210:	bl	19218 <__assert_fail@plt+0x7cbc>
   19214:	b	191ec <__assert_fail@plt+0x7c90>
   19218:	push	{r4, r5, r6, r7, fp, lr}
   1921c:	add	fp, sp, #16
   19220:	sub	sp, sp, #8
   19224:	mov	r4, r0
   19228:	ldr	r0, [r0, #4]
   1922c:	mov	r5, r3
   19230:	mov	r6, r2
   19234:	ldr	r1, [r4, #8]
   19238:	cmp	r1, r0
   1923c:	bne	19258 <__assert_fail@plt+0x7cfc>
   19240:	ldrd	r0, [r4, #16]
   19244:	cmp	r1, r0
   19248:	bne	19258 <__assert_fail@plt+0x7cfc>
   1924c:	ldr	r0, [r4, #36]	; 0x24
   19250:	cmp	r0, #0
   19254:	beq	19270 <__assert_fail@plt+0x7d14>
   19258:	mov	r0, r4
   1925c:	mov	r2, r6
   19260:	mov	r3, r5
   19264:	sub	sp, fp, #16
   19268:	pop	{r4, r5, r6, r7, fp, lr}
   1926c:	b	11454 <fseeko64@plt>
   19270:	ldr	r7, [fp, #8]
   19274:	mov	r0, r4
   19278:	bl	11430 <fileno@plt>
   1927c:	mov	r2, r6
   19280:	mov	r3, r5
   19284:	str	r7, [sp]
   19288:	bl	1131c <lseek64@plt>
   1928c:	and	r2, r0, r1
   19290:	cmn	r2, #1
   19294:	beq	192b0 <__assert_fail@plt+0x7d54>
   19298:	strd	r0, [r4, #80]	; 0x50
   1929c:	ldr	r0, [r4]
   192a0:	bic	r0, r0, #16
   192a4:	str	r0, [r4]
   192a8:	mov	r0, #0
   192ac:	b	192b4 <__assert_fail@plt+0x7d58>
   192b0:	mvn	r0, #0
   192b4:	sub	sp, fp, #16
   192b8:	pop	{r4, r5, r6, r7, fp, pc}
   192bc:	push	{fp, lr}
   192c0:	mov	fp, sp
   192c4:	mov	r0, #14
   192c8:	bl	11490 <nl_langinfo@plt>
   192cc:	movw	r1, #40600	; 0x9e98
   192d0:	cmp	r0, #0
   192d4:	movt	r1, #1
   192d8:	movne	r1, r0
   192dc:	movw	r0, #44566	; 0xae16
   192e0:	ldrb	r2, [r1]
   192e4:	movt	r0, #1
   192e8:	cmp	r2, #0
   192ec:	movne	r0, r1
   192f0:	pop	{fp, pc}
   192f4:	push	{r4, r5, r6, r7, fp, lr}
   192f8:	add	fp, sp, #16
   192fc:	sub	sp, sp, #8
   19300:	add	r5, sp, #4
   19304:	cmp	r0, #0
   19308:	mov	r7, r2
   1930c:	mov	r4, r1
   19310:	movne	r5, r0
   19314:	mov	r0, r5
   19318:	bl	1134c <mbrtowc@plt>
   1931c:	mov	r6, r0
   19320:	cmp	r7, #0
   19324:	beq	19348 <__assert_fail@plt+0x7dec>
   19328:	cmn	r6, #2
   1932c:	bcc	19348 <__assert_fail@plt+0x7dec>
   19330:	mov	r0, #0
   19334:	bl	1939c <__assert_fail@plt+0x7e40>
   19338:	cmp	r0, #0
   1933c:	ldrbeq	r0, [r4]
   19340:	moveq	r6, #1
   19344:	streq	r0, [r5]
   19348:	mov	r0, r6
   1934c:	sub	sp, fp, #16
   19350:	pop	{r4, r5, r6, r7, fp, pc}
   19354:	cmp	r2, #0
   19358:	beq	19388 <__assert_fail@plt+0x7e2c>
   1935c:	mvn	r3, #0
   19360:	udiv	r3, r3, r2
   19364:	cmp	r3, r1
   19368:	bcs	19388 <__assert_fail@plt+0x7e2c>
   1936c:	push	{fp, lr}
   19370:	mov	fp, sp
   19374:	bl	11400 <__errno_location@plt>
   19378:	mov	r1, #12
   1937c:	str	r1, [r0]
   19380:	mov	r0, #0
   19384:	pop	{fp, pc}
   19388:	mul	r1, r2, r1
   1938c:	b	18d44 <__assert_fail@plt+0x77e8>
   19390:	mov	r1, #0
   19394:	mov	r2, #3
   19398:	b	18f9c <__assert_fail@plt+0x7a40>
   1939c:	push	{r4, sl, fp, lr}
   193a0:	add	fp, sp, #8
   193a4:	sub	sp, sp, #264	; 0x108
   193a8:	add	r1, sp, #7
   193ac:	movw	r2, #257	; 0x101
   193b0:	bl	19400 <__assert_fail@plt+0x7ea4>
   193b4:	mov	r4, #0
   193b8:	cmp	r0, #0
   193bc:	bne	193f4 <__assert_fail@plt+0x7e98>
   193c0:	movw	r1, #44572	; 0xae1c
   193c4:	add	r0, sp, #7
   193c8:	movt	r1, #1
   193cc:	bl	1125c <strcmp@plt>
   193d0:	cmp	r0, #0
   193d4:	beq	193f4 <__assert_fail@plt+0x7e98>
   193d8:	movw	r1, #44574	; 0xae1e
   193dc:	add	r0, sp, #7
   193e0:	movt	r1, #1
   193e4:	bl	1125c <strcmp@plt>
   193e8:	mov	r4, r0
   193ec:	cmp	r0, #0
   193f0:	movwne	r4, #1
   193f4:	mov	r0, r4
   193f8:	sub	sp, fp, #8
   193fc:	pop	{r4, sl, fp, pc}
   19400:	push	{r4, r5, r6, r7, fp, lr}
   19404:	add	fp, sp, #16
   19408:	mov	r4, r1
   1940c:	mov	r1, #0
   19410:	mov	r6, r2
   19414:	bl	1146c <setlocale@plt>
   19418:	cmp	r0, #0
   1941c:	beq	19448 <__assert_fail@plt+0x7eec>
   19420:	mov	r7, r0
   19424:	bl	113d0 <strlen@plt>
   19428:	cmp	r0, r6
   1942c:	bcs	1945c <__assert_fail@plt+0x7f00>
   19430:	add	r2, r0, #1
   19434:	mov	r0, r4
   19438:	mov	r1, r7
   1943c:	bl	112a4 <memcpy@plt>
   19440:	mov	r5, #0
   19444:	b	19484 <__assert_fail@plt+0x7f28>
   19448:	cmp	r6, #0
   1944c:	mov	r5, #22
   19450:	movne	r0, #0
   19454:	strbne	r0, [r4]
   19458:	b	19484 <__assert_fail@plt+0x7f28>
   1945c:	mov	r5, #34	; 0x22
   19460:	cmp	r6, #0
   19464:	beq	19484 <__assert_fail@plt+0x7f28>
   19468:	sub	r6, r6, #1
   1946c:	mov	r0, r4
   19470:	mov	r1, r7
   19474:	mov	r2, r6
   19478:	bl	112a4 <memcpy@plt>
   1947c:	mov	r0, #0
   19480:	strb	r0, [r4, r6]
   19484:	mov	r0, r5
   19488:	pop	{r4, r5, r6, r7, fp, pc}
   1948c:	mov	r1, #0
   19490:	b	1146c <setlocale@plt>
   19494:	cmp	r3, #0
   19498:	cmpeq	r2, #0
   1949c:	bne	194b4 <__assert_fail@plt+0x7f58>
   194a0:	cmp	r1, #0
   194a4:	cmpeq	r0, #0
   194a8:	mvnne	r1, #0
   194ac:	mvnne	r0, #0
   194b0:	b	194d0 <__assert_fail@plt+0x7f74>
   194b4:	sub	sp, sp, #8
   194b8:	push	{sp, lr}
   194bc:	bl	194e0 <__assert_fail@plt+0x7f84>
   194c0:	ldr	lr, [sp, #4]
   194c4:	add	sp, sp, #8
   194c8:	pop	{r2, r3}
   194cc:	bx	lr
   194d0:	push	{r1, lr}
   194d4:	mov	r0, #8
   194d8:	bl	11244 <raise@plt>
   194dc:	pop	{r1, pc}
   194e0:	cmp	r1, r3
   194e4:	cmpeq	r0, r2
   194e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194ec:	mov	r4, r0
   194f0:	movcc	r0, #0
   194f4:	mov	r5, r1
   194f8:	ldr	lr, [sp, #36]	; 0x24
   194fc:	movcc	r1, r0
   19500:	bcc	195fc <__assert_fail@plt+0x80a0>
   19504:	cmp	r3, #0
   19508:	clzeq	ip, r2
   1950c:	clzne	ip, r3
   19510:	addeq	ip, ip, #32
   19514:	cmp	r5, #0
   19518:	clzeq	r1, r4
   1951c:	addeq	r1, r1, #32
   19520:	clzne	r1, r5
   19524:	sub	ip, ip, r1
   19528:	sub	sl, ip, #32
   1952c:	lsl	r9, r3, ip
   19530:	rsb	fp, ip, #32
   19534:	orr	r9, r9, r2, lsl sl
   19538:	orr	r9, r9, r2, lsr fp
   1953c:	lsl	r8, r2, ip
   19540:	cmp	r5, r9
   19544:	cmpeq	r4, r8
   19548:	movcc	r0, #0
   1954c:	movcc	r1, r0
   19550:	bcc	1956c <__assert_fail@plt+0x8010>
   19554:	mov	r0, #1
   19558:	subs	r4, r4, r8
   1955c:	lsl	r1, r0, sl
   19560:	orr	r1, r1, r0, lsr fp
   19564:	lsl	r0, r0, ip
   19568:	sbc	r5, r5, r9
   1956c:	cmp	ip, #0
   19570:	beq	195fc <__assert_fail@plt+0x80a0>
   19574:	lsr	r6, r8, #1
   19578:	orr	r6, r6, r9, lsl #31
   1957c:	lsr	r7, r9, #1
   19580:	mov	r2, ip
   19584:	b	195a8 <__assert_fail@plt+0x804c>
   19588:	subs	r3, r4, r6
   1958c:	sbc	r8, r5, r7
   19590:	adds	r3, r3, r3
   19594:	adc	r8, r8, r8
   19598:	adds	r4, r3, #1
   1959c:	adc	r5, r8, #0
   195a0:	subs	r2, r2, #1
   195a4:	beq	195c4 <__assert_fail@plt+0x8068>
   195a8:	cmp	r5, r7
   195ac:	cmpeq	r4, r6
   195b0:	bcs	19588 <__assert_fail@plt+0x802c>
   195b4:	adds	r4, r4, r4
   195b8:	adc	r5, r5, r5
   195bc:	subs	r2, r2, #1
   195c0:	bne	195a8 <__assert_fail@plt+0x804c>
   195c4:	lsr	r3, r4, ip
   195c8:	orr	r3, r3, r5, lsl fp
   195cc:	lsr	r2, r5, ip
   195d0:	orr	r3, r3, r5, lsr sl
   195d4:	adds	r0, r0, r4
   195d8:	mov	r4, r3
   195dc:	lsl	r3, r2, ip
   195e0:	orr	r3, r3, r4, lsl sl
   195e4:	lsl	ip, r4, ip
   195e8:	orr	r3, r3, r4, lsr fp
   195ec:	adc	r1, r1, r5
   195f0:	subs	r0, r0, ip
   195f4:	mov	r5, r2
   195f8:	sbc	r1, r1, r3
   195fc:	cmp	lr, #0
   19600:	strdne	r4, [lr]
   19604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19608:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1960c:	mov	r7, r0
   19610:	ldr	r6, [pc, #72]	; 19660 <__assert_fail@plt+0x8104>
   19614:	ldr	r5, [pc, #72]	; 19664 <__assert_fail@plt+0x8108>
   19618:	add	r6, pc, r6
   1961c:	add	r5, pc, r5
   19620:	sub	r6, r6, r5
   19624:	mov	r8, r1
   19628:	mov	r9, r2
   1962c:	bl	111f4 <fstatfs64@plt-0x20>
   19630:	asrs	r6, r6, #2
   19634:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19638:	mov	r4, #0
   1963c:	add	r4, r4, #1
   19640:	ldr	r3, [r5], #4
   19644:	mov	r2, r9
   19648:	mov	r1, r8
   1964c:	mov	r0, r7
   19650:	blx	r3
   19654:	cmp	r6, r4
   19658:	bne	1963c <__assert_fail@plt+0x80e0>
   1965c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19660:	andeq	r1, r1, ip, ror #17
   19664:	andeq	r1, r1, r4, ror #17
   19668:	bx	lr
   1966c:	ldr	r3, [pc, #12]	; 19680 <__assert_fail@plt+0x8124>
   19670:	mov	r1, #0
   19674:	add	r3, pc, r3
   19678:	ldr	r2, [r3]
   1967c:	b	1140c <__cxa_atexit@plt>
   19680:			; <UNDEFINED> instruction: 0x00011ab8
   19684:	mov	r2, r1
   19688:	mov	r1, r0
   1968c:	mov	r0, #3
   19690:	b	114f0 <__xstat64@plt>
   19694:	mov	r2, r1
   19698:	mov	r1, r0
   1969c:	mov	r0, #3
   196a0:	b	11310 <__fxstat64@plt>
   196a4:	mov	r2, r1
   196a8:	mov	r1, r0
   196ac:	mov	r0, #3
   196b0:	b	1152c <__lxstat64@plt>
   196b4:	push	{lr}		; (str lr, [sp, #-4]!)
   196b8:	sub	sp, sp, #12
   196bc:	str	r3, [sp]
   196c0:	mov	r3, r2
   196c4:	mov	r2, r1
   196c8:	mov	r1, r0
   196cc:	mov	r0, #3
   196d0:	bl	112f8 <__fxstatat64@plt>
   196d4:	add	sp, sp, #12
   196d8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000196dc <.fini>:
   196dc:	push	{r3, lr}
   196e0:	pop	{r3, pc}
