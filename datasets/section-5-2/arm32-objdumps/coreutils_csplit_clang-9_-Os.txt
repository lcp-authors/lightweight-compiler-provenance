
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

0001139c <.init>:
   1139c:	push	{r3, lr}
   113a0:	bl	117bc <__assert_fail@plt+0x4c>
   113a4:	pop	{r3, pc}

Disassembly of section .plt:

000113a8 <pthread_mutex_unlock@plt-0x14>:
   113a8:	push	{lr}		; (str lr, [sp, #-4]!)
   113ac:	ldr	lr, [pc, #4]	; 113b8 <pthread_mutex_unlock@plt-0x4>
   113b0:	add	lr, pc, lr
   113b4:	ldr	pc, [lr, #8]!
   113b8:	andeq	r4, r2, r8, asr #24

000113bc <pthread_mutex_unlock@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #36, 20	; 0x24000
   113c4:	ldr	pc, [ip, #3144]!	; 0xc48

000113c8 <fdopen@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #36, 20	; 0x24000
   113d0:	ldr	pc, [ip, #3136]!	; 0xc40

000113d4 <calloc@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #36, 20	; 0x24000
   113dc:	ldr	pc, [ip, #3128]!	; 0xc38

000113e0 <fputs_unlocked@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #36, 20	; 0x24000
   113e8:	ldr	pc, [ip, #3120]!	; 0xc30

000113ec <wctype@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #36, 20	; 0x24000
   113f4:	ldr	pc, [ip, #3112]!	; 0xc28

000113f8 <raise@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #36, 20	; 0x24000
   11400:	ldr	pc, [ip, #3104]!	; 0xc20

00011404 <wcrtomb@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #36, 20	; 0x24000
   1140c:	ldr	pc, [ip, #3096]!	; 0xc18

00011410 <iswctype@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #36, 20	; 0x24000
   11418:	ldr	pc, [ip, #3088]!	; 0xc10

0001141c <strcmp@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #36, 20	; 0x24000
   11424:	ldr	pc, [ip, #3080]!	; 0xc08

00011428 <read@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #36, 20	; 0x24000
   11430:	ldr	pc, [ip, #3072]!	; 0xc00

00011434 <pthread_mutex_destroy@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #36, 20	; 0x24000
   1143c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011440 <fflush@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #36, 20	; 0x24000
   11448:	ldr	pc, [ip, #3056]!	; 0xbf0

0001144c <sigprocmask@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #36, 20	; 0x24000
   11454:	ldr	pc, [ip, #3048]!	; 0xbe8

00011458 <memmove@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #36, 20	; 0x24000
   11460:	ldr	pc, [ip, #3040]!	; 0xbe0

00011464 <free@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #36, 20	; 0x24000
   1146c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011470 <pthread_mutex_lock@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #36, 20	; 0x24000
   11478:	ldr	pc, [ip, #3024]!	; 0xbd0

0001147c <_exit@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #36, 20	; 0x24000
   11484:	ldr	pc, [ip, #3016]!	; 0xbc8

00011488 <memcpy@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #36, 20	; 0x24000
   11490:	ldr	pc, [ip, #3008]!	; 0xbc0

00011494 <tolower@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #36, 20	; 0x24000
   1149c:	ldr	pc, [ip, #3000]!	; 0xbb8

000114a0 <pthread_mutex_init@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #36, 20	; 0x24000
   114a8:	ldr	pc, [ip, #2992]!	; 0xbb0

000114ac <towlower@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #36, 20	; 0x24000
   114b4:	ldr	pc, [ip, #2984]!	; 0xba8

000114b8 <mbsinit@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #36, 20	; 0x24000
   114c0:	ldr	pc, [ip, #2976]!	; 0xba0

000114c4 <signal@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #36, 20	; 0x24000
   114cc:	ldr	pc, [ip, #2968]!	; 0xb98

000114d0 <fwrite_unlocked@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #36, 20	; 0x24000
   114d8:	ldr	pc, [ip, #2960]!	; 0xb90

000114dc <dcgettext@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #36, 20	; 0x24000
   114e4:	ldr	pc, [ip, #2952]!	; 0xb88

000114e8 <unlink@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #36, 20	; 0x24000
   114f0:	ldr	pc, [ip, #2944]!	; 0xb80

000114f4 <dup2@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #36, 20	; 0x24000
   114fc:	ldr	pc, [ip, #2936]!	; 0xb78

00011500 <realloc@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #36, 20	; 0x24000
   11508:	ldr	pc, [ip, #2928]!	; 0xb70

0001150c <sigismember@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #36, 20	; 0x24000
   11514:	ldr	pc, [ip, #2920]!	; 0xb68

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #36, 20	; 0x24000
   11520:	ldr	pc, [ip, #2912]!	; 0xb60

00011524 <rawmemchr@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #36, 20	; 0x24000
   1152c:	ldr	pc, [ip, #2904]!	; 0xb58

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #36, 20	; 0x24000
   11538:	ldr	pc, [ip, #2896]!	; 0xb50

0001153c <sigaction@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #36, 20	; 0x24000
   11544:	ldr	pc, [ip, #2888]!	; 0xb48

00011548 <lseek64@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #36, 20	; 0x24000
   11550:	ldr	pc, [ip, #2880]!	; 0xb40

00011554 <__ctype_get_mb_cur_max@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #36, 20	; 0x24000
   1155c:	ldr	pc, [ip, #2872]!	; 0xb38

00011560 <strcpy@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #36, 20	; 0x24000
   11568:	ldr	pc, [ip, #2864]!	; 0xb30

0001156c <__fpending@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #36, 20	; 0x24000
   11574:	ldr	pc, [ip, #2856]!	; 0xb28

00011578 <ferror_unlocked@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #36, 20	; 0x24000
   11580:	ldr	pc, [ip, #2848]!	; 0xb20

00011584 <mbrtowc@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #36, 20	; 0x24000
   1158c:	ldr	pc, [ip, #2840]!	; 0xb18

00011590 <error@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #36, 20	; 0x24000
   11598:	ldr	pc, [ip, #2832]!	; 0xb10

0001159c <open64@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #36, 20	; 0x24000
   115a4:	ldr	pc, [ip, #2824]!	; 0xb08

000115a8 <malloc@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #36, 20	; 0x24000
   115b0:	ldr	pc, [ip, #2816]!	; 0xb00

000115b4 <sigaddset@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #36, 20	; 0x24000
   115bc:	ldr	pc, [ip, #2808]!	; 0xaf8

000115c0 <__libc_start_main@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #36, 20	; 0x24000
   115c8:	ldr	pc, [ip, #2800]!	; 0xaf0

000115cc <__freading@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #36, 20	; 0x24000
   115d4:	ldr	pc, [ip, #2792]!	; 0xae8

000115d8 <__gmon_start__@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #36, 20	; 0x24000
   115e0:	ldr	pc, [ip, #2784]!	; 0xae0

000115e4 <getopt_long@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #36, 20	; 0x24000
   115ec:	ldr	pc, [ip, #2776]!	; 0xad8

000115f0 <__ctype_b_loc@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #36, 20	; 0x24000
   115f8:	ldr	pc, [ip, #2768]!	; 0xad0

000115fc <exit@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #36, 20	; 0x24000
   11604:	ldr	pc, [ip, #2760]!	; 0xac8

00011608 <bcmp@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #36, 20	; 0x24000
   11610:	ldr	pc, [ip, #2752]!	; 0xac0

00011614 <strlen@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #36, 20	; 0x24000
   1161c:	ldr	pc, [ip, #2744]!	; 0xab8

00011620 <strchr@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #36, 20	; 0x24000
   11628:	ldr	pc, [ip, #2736]!	; 0xab0

0001162c <__errno_location@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #36, 20	; 0x24000
   11634:	ldr	pc, [ip, #2728]!	; 0xaa8

00011638 <iswalnum@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #36, 20	; 0x24000
   11640:	ldr	pc, [ip, #2720]!	; 0xaa0

00011644 <__sprintf_chk@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #36, 20	; 0x24000
   1164c:	ldr	pc, [ip, #2712]!	; 0xa98

00011650 <__cxa_atexit@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #36, 20	; 0x24000
   11658:	ldr	pc, [ip, #2704]!	; 0xa90

0001165c <memset@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #36, 20	; 0x24000
   11664:	ldr	pc, [ip, #2696]!	; 0xa88

00011668 <btowc@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #36, 20	; 0x24000
   11670:	ldr	pc, [ip, #2688]!	; 0xa80

00011674 <__printf_chk@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #36, 20	; 0x24000
   1167c:	ldr	pc, [ip, #2680]!	; 0xa78

00011680 <fileno@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #36, 20	; 0x24000
   11688:	ldr	pc, [ip, #2672]!	; 0xa70

0001168c <strtoumax@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #36, 20	; 0x24000
   11694:	ldr	pc, [ip, #2664]!	; 0xa68

00011698 <__fprintf_chk@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #36, 20	; 0x24000
   116a0:	ldr	pc, [ip, #2656]!	; 0xa60

000116a4 <strtoimax@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #36, 20	; 0x24000
   116ac:	ldr	pc, [ip, #2648]!	; 0xa58

000116b0 <fclose@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #36, 20	; 0x24000
   116b8:	ldr	pc, [ip, #2640]!	; 0xa50

000116bc <fseeko64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #36, 20	; 0x24000
   116c4:	ldr	pc, [ip, #2632]!	; 0xa48

000116c8 <fcntl64@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #36, 20	; 0x24000
   116d0:	ldr	pc, [ip, #2624]!	; 0xa40

000116d4 <setlocale@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #36, 20	; 0x24000
   116dc:	ldr	pc, [ip, #2616]!	; 0xa38

000116e0 <sigemptyset@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #36, 20	; 0x24000
   116e8:	ldr	pc, [ip, #2608]!	; 0xa30

000116ec <toupper@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #36, 20	; 0x24000
   116f4:	ldr	pc, [ip, #2600]!	; 0xa28

000116f8 <strrchr@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #36, 20	; 0x24000
   11700:	ldr	pc, [ip, #2592]!	; 0xa20

00011704 <nl_langinfo@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #36, 20	; 0x24000
   1170c:	ldr	pc, [ip, #2584]!	; 0xa18

00011710 <fopen64@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #36, 20	; 0x24000
   11718:	ldr	pc, [ip, #2576]!	; 0xa10

0001171c <bindtextdomain@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #36, 20	; 0x24000
   11724:	ldr	pc, [ip, #2568]!	; 0xa08

00011728 <towupper@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #36, 20	; 0x24000
   11730:	ldr	pc, [ip, #2560]!	; 0xa00

00011734 <fputs@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #36, 20	; 0x24000
   1173c:	ldr	pc, [ip, #2552]!	; 0x9f8

00011740 <strncmp@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #36, 20	; 0x24000
   11748:	ldr	pc, [ip, #2544]!	; 0x9f0

0001174c <abort@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #36, 20	; 0x24000
   11754:	ldr	pc, [ip, #2536]!	; 0x9e8

00011758 <close@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #36, 20	; 0x24000
   11760:	ldr	pc, [ip, #2528]!	; 0x9e0

00011764 <__snprintf_chk@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #36, 20	; 0x24000
   1176c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011770 <__assert_fail@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #36, 20	; 0x24000
   11778:	ldr	pc, [ip, #2512]!	; 0x9d0

Disassembly of section .text:

00011780 <.text>:
   11780:	mov	fp, #0
   11784:	mov	lr, #0
   11788:	pop	{r1}		; (ldr r1, [sp], #4)
   1178c:	mov	r2, sp
   11790:	push	{r2}		; (str r2, [sp, #-4]!)
   11794:	push	{r0}		; (str r0, [sp, #-4]!)
   11798:	ldr	ip, [pc, #16]	; 117b0 <__assert_fail@plt+0x40>
   1179c:	push	{ip}		; (str ip, [sp, #-4]!)
   117a0:	ldr	r0, [pc, #12]	; 117b4 <__assert_fail@plt+0x44>
   117a4:	ldr	r3, [pc, #12]	; 117b8 <__assert_fail@plt+0x48>
   117a8:	bl	115c0 <__libc_start_main@plt>
   117ac:	bl	1174c <abort@plt>
   117b0:	andeq	r4, r2, r8, lsr #3
   117b4:			; <UNDEFINED> instruction: 0x000118bc
   117b8:	andeq	r4, r2, r8, asr #2
   117bc:	ldr	r3, [pc, #20]	; 117d8 <__assert_fail@plt+0x68>
   117c0:	ldr	r2, [pc, #20]	; 117dc <__assert_fail@plt+0x6c>
   117c4:	add	r3, pc, r3
   117c8:	ldr	r2, [r3, r2]
   117cc:	cmp	r2, #0
   117d0:	bxeq	lr
   117d4:	b	115d8 <__gmon_start__@plt>
   117d8:	andeq	r4, r2, r4, lsr r8
   117dc:	andeq	r0, r0, ip, asr #2
   117e0:	ldr	r0, [pc, #24]	; 11800 <__assert_fail@plt+0x90>
   117e4:	ldr	r3, [pc, #24]	; 11804 <__assert_fail@plt+0x94>
   117e8:	cmp	r3, r0
   117ec:	bxeq	lr
   117f0:	ldr	r3, [pc, #16]	; 11808 <__assert_fail@plt+0x98>
   117f4:	cmp	r3, #0
   117f8:	bxeq	lr
   117fc:	bx	r3
   11800:	andeq	r6, r3, r8, lsr #3
   11804:	andeq	r6, r3, r8, lsr #3
   11808:	andeq	r0, r0, r0
   1180c:	ldr	r0, [pc, #36]	; 11838 <__assert_fail@plt+0xc8>
   11810:	ldr	r1, [pc, #36]	; 1183c <__assert_fail@plt+0xcc>
   11814:	sub	r1, r1, r0
   11818:	asr	r1, r1, #2
   1181c:	add	r1, r1, r1, lsr #31
   11820:	asrs	r1, r1, #1
   11824:	bxeq	lr
   11828:	ldr	r3, [pc, #16]	; 11840 <__assert_fail@plt+0xd0>
   1182c:	cmp	r3, #0
   11830:	bxeq	lr
   11834:	bx	r3
   11838:	andeq	r6, r3, r8, lsr #3
   1183c:	andeq	r6, r3, r8, lsr #3
   11840:	andeq	r0, r0, r0
   11844:	push	{r4, lr}
   11848:	ldr	r4, [pc, #24]	; 11868 <__assert_fail@plt+0xf8>
   1184c:	ldrb	r3, [r4]
   11850:	cmp	r3, #0
   11854:	popne	{r4, pc}
   11858:	bl	117e0 <__assert_fail@plt+0x70>
   1185c:	mov	r3, #1
   11860:	strb	r3, [r4]
   11864:	pop	{r4, pc}
   11868:	andeq	r6, r3, r4, asr #3
   1186c:	b	1180c <__assert_fail@plt+0x9c>
   11870:	push	{fp, lr}
   11874:	mov	fp, sp
   11878:	movw	r1, #16852	; 0x41d4
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #2
   11888:	bl	114dc <dcgettext@plt>
   1188c:	movw	r2, #18799	; 0x496f
   11890:	mov	r3, r0
   11894:	mov	r0, #0
   11898:	mov	r1, #0
   1189c:	movt	r2, #2
   118a0:	bl	11590 <error@plt>
   118a4:	bl	118a8 <__assert_fail@plt+0x138>
   118a8:	push	{fp, lr}
   118ac:	mov	fp, sp
   118b0:	bl	12b10 <__assert_fail@plt+0x13a0>
   118b4:	mov	r0, #1
   118b8:	bl	115fc <exit@plt>
   118bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118c0:	add	fp, sp, #28
   118c4:	sub	sp, sp, #196	; 0xc4
   118c8:	mov	r6, r0
   118cc:	ldr	r0, [r1]
   118d0:	mov	r5, r1
   118d4:	bl	13d58 <__assert_fail@plt+0x25e8>
   118d8:	movw	r1, #18259	; 0x4753
   118dc:	mov	r0, #6
   118e0:	movt	r1, #2
   118e4:	bl	116d4 <setlocale@plt>
   118e8:	movw	r4, #16933	; 0x4225
   118ec:	movw	r1, #16869	; 0x41e5
   118f0:	movt	r4, #2
   118f4:	movt	r1, #2
   118f8:	mov	r0, r4
   118fc:	bl	1171c <bindtextdomain@plt>
   11900:	mov	r0, r4
   11904:	mov	r4, r6
   11908:	bl	11518 <textdomain@plt>
   1190c:	movw	r0, #14556	; 0x38dc
   11910:	movt	r0, #1
   11914:	bl	241ac <__assert_fail@plt+0x12a3c>
   11918:	movw	r0, #25045	; 0x61d5
   1191c:	mov	r8, #1
   11920:	mov	sl, #0
   11924:	movw	r1, #25048	; 0x61d8
   11928:	movw	r7, #16896	; 0x4200
   1192c:	movw	r6, #19616	; 0x4ca0
   11930:	movw	r9, #25024	; 0x61c0
   11934:	movt	r0, #3
   11938:	movt	r1, #3
   1193c:	movt	r7, #2
   11940:	movt	r6, #2
   11944:	movt	r9, #3
   11948:	strb	r8, [r0]
   1194c:	movw	r0, #25032	; 0x61c8
   11950:	str	r5, [sp, #36]	; 0x24
   11954:	movt	r0, #3
   11958:	str	r5, [r0]
   1195c:	movw	r0, #25036	; 0x61cc
   11960:	movw	r5, #25044	; 0x61d4
   11964:	movt	r0, #3
   11968:	movt	r5, #3
   1196c:	str	sl, [r0]
   11970:	movw	r0, #25040	; 0x61d0
   11974:	strb	sl, [r5]
   11978:	movt	r0, #3
   1197c:	str	sl, [r0]
   11980:	movw	r0, #25046	; 0x61d6
   11984:	movt	r0, #3
   11988:	strb	sl, [r0]
   1198c:	movw	r0, #16893	; 0x41fd
   11990:	movt	r0, #2
   11994:	str	r0, [r1]
   11998:	str	r4, [sp, #32]
   1199c:	ldr	r1, [sp, #36]	; 0x24
   119a0:	mov	r0, r4
   119a4:	mov	r2, r7
   119a8:	mov	r3, r6
   119ac:	str	sl, [sp]
   119b0:	bl	115e4 <getopt_long@plt>
   119b4:	cmp	r0, #106	; 0x6a
   119b8:	ble	119fc <__assert_fail@plt+0x28c>
   119bc:	sub	r1, r0, #107	; 0x6b
   119c0:	cmp	r1, #8
   119c4:	bhi	11a20 <__assert_fail@plt+0x2b0>
   119c8:	add	r0, pc, #0
   119cc:	ldr	pc, [r0, r1, lsl #2]
   119d0:	andeq	r1, r1, ip, ror #20
   119d4:	andeq	r2, r1, r0, lsl r8
   119d8:	andeq	r2, r1, r0, lsl r8
   119dc:	andeq	r1, r1, ip, ror sl
   119e0:	andeq	r2, r1, r0, lsl r8
   119e4:	andeq	r2, r1, r0, lsl r8
   119e8:	strdeq	r1, [r1], -r4
   119ec:	andeq	r2, r1, r0, lsl r8
   119f0:	strdeq	r1, [r1], -r4
   119f4:	strb	r8, [r5]
   119f8:	b	1199c <__assert_fail@plt+0x22c>
   119fc:	cmp	r0, #97	; 0x61
   11a00:	ble	11ad4 <__assert_fail@plt+0x364>
   11a04:	cmp	r0, #98	; 0x62
   11a08:	bne	11a50 <__assert_fail@plt+0x2e0>
   11a0c:	ldr	r0, [r9]
   11a10:	movw	r1, #25052	; 0x61dc
   11a14:	movt	r1, #3
   11a18:	str	r0, [r1]
   11a1c:	b	1199c <__assert_fail@plt+0x22c>
   11a20:	cmp	r0, #122	; 0x7a
   11a24:	bne	11a38 <__assert_fail@plt+0x2c8>
   11a28:	movw	r0, #25056	; 0x61e0
   11a2c:	movt	r0, #3
   11a30:	strb	r8, [r0]
   11a34:	b	1199c <__assert_fail@plt+0x22c>
   11a38:	cmp	r0, #256	; 0x100
   11a3c:	bne	12810 <__assert_fail@plt+0x10a0>
   11a40:	movw	r0, #25046	; 0x61d6
   11a44:	movt	r0, #3
   11a48:	strb	r8, [r0]
   11a4c:	b	1199c <__assert_fail@plt+0x22c>
   11a50:	cmp	r0, #102	; 0x66
   11a54:	bne	12810 <__assert_fail@plt+0x10a0>
   11a58:	ldr	r0, [r9]
   11a5c:	movw	r1, #25048	; 0x61d8
   11a60:	movt	r1, #3
   11a64:	str	r0, [r1]
   11a68:	b	1199c <__assert_fail@plt+0x22c>
   11a6c:	movw	r0, #25045	; 0x61d5
   11a70:	movt	r0, #3
   11a74:	strb	sl, [r0]
   11a78:	b	1199c <__assert_fail@plt+0x22c>
   11a7c:	movw	r1, #16907	; 0x420b
   11a80:	ldr	r4, [r9]
   11a84:	mov	r0, #0
   11a88:	mov	r2, #5
   11a8c:	movt	r1, #2
   11a90:	bl	114dc <dcgettext@plt>
   11a94:	mvn	r1, #-2147483648	; 0x80000000
   11a98:	mov	r2, #0
   11a9c:	mov	r3, #0
   11aa0:	stm	sp, {r1, sl}
   11aa4:	movw	r1, #18259	; 0x4753
   11aa8:	str	r0, [sp, #12]
   11aac:	mov	r0, r4
   11ab0:	ldr	r4, [sp, #32]
   11ab4:	str	sl, [sp, #16]
   11ab8:	movt	r1, #2
   11abc:	str	r1, [sp, #8]
   11ac0:	bl	22c2c <__assert_fail@plt+0x114bc>
   11ac4:	movw	r1, #24920	; 0x6158
   11ac8:	movt	r1, #3
   11acc:	str	r0, [r1]
   11ad0:	b	1199c <__assert_fail@plt+0x22c>
   11ad4:	cmn	r0, #1
   11ad8:	bne	124b4 <__assert_fail@plt+0xd44>
   11adc:	movw	r4, #25008	; 0x61b0
   11ae0:	ldr	r1, [sp, #32]
   11ae4:	ldr	sl, [sp, #36]	; 0x24
   11ae8:	movt	r4, #3
   11aec:	ldr	r0, [r4]
   11af0:	sub	r1, r1, r0
   11af4:	cmp	r1, #1
   11af8:	ble	12750 <__assert_fail@plt+0xfe0>
   11afc:	movw	r0, #25048	; 0x61d8
   11b00:	movt	r0, #3
   11b04:	ldr	r0, [r0]
   11b08:	bl	11614 <strlen@plt>
   11b0c:	movw	r1, #25052	; 0x61dc
   11b10:	mov	r8, r0
   11b14:	movt	r1, #3
   11b18:	ldr	r0, [r1]
   11b1c:	cmp	r0, #0
   11b20:	beq	11c8c <__assert_fail@plt+0x51c>
   11b24:	ldr	r6, [r1]
   11b28:	mov	r3, #0
   11b2c:	mvn	r1, #47	; 0x2f
   11b30:	mov	r2, #100	; 0x64
   11b34:	mov	r0, r6
   11b38:	ldrb	r7, [r0]
   11b3c:	cmp	r7, #37	; 0x25
   11b40:	beq	11b50 <__assert_fail@plt+0x3e0>
   11b44:	cmp	r7, #0
   11b48:	bne	11c50 <__assert_fail@plt+0x4e0>
   11b4c:	b	11c58 <__assert_fail@plt+0x4e8>
   11b50:	mov	r5, r0
   11b54:	ldrb	r7, [r5, #1]!
   11b58:	cmp	r7, #37	; 0x25
   11b5c:	bne	11b68 <__assert_fail@plt+0x3f8>
   11b60:	mov	r0, r5
   11b64:	b	11c50 <__assert_fail@plt+0x4e0>
   11b68:	tst	r3, #1
   11b6c:	bne	12674 <__assert_fail@plt+0xf04>
   11b70:	add	r0, r0, #2
   11b74:	mov	r3, #0
   11b78:	uxtb	r5, r7
   11b7c:	cmp	r5, #44	; 0x2c
   11b80:	bgt	11b9c <__assert_fail@plt+0x42c>
   11b84:	cmp	r5, #35	; 0x23
   11b88:	beq	11bac <__assert_fail@plt+0x43c>
   11b8c:	cmp	r5, #39	; 0x27
   11b90:	bne	11bb8 <__assert_fail@plt+0x448>
   11b94:	orr	r3, r3, #1
   11b98:	b	11bb0 <__assert_fail@plt+0x440>
   11b9c:	cmp	r5, #45	; 0x2d
   11ba0:	cmpne	r5, #48	; 0x30
   11ba4:	beq	11bb0 <__assert_fail@plt+0x440>
   11ba8:	b	11bb8 <__assert_fail@plt+0x448>
   11bac:	orr	r3, r3, #2
   11bb0:	ldrb	r7, [r0], #1
   11bb4:	b	11b78 <__assert_fail@plt+0x408>
   11bb8:	uxtab	r5, r1, r7
   11bbc:	cmp	r5, #9
   11bc0:	bhi	11bd4 <__assert_fail@plt+0x464>
   11bc4:	ldrb	r7, [r0], #1
   11bc8:	sub	r5, r7, #48	; 0x30
   11bcc:	cmp	r5, #10
   11bd0:	bcc	11bc4 <__assert_fail@plt+0x454>
   11bd4:	uxtb	r5, r7
   11bd8:	sub	r0, r0, #1
   11bdc:	cmp	r5, #46	; 0x2e
   11be0:	bne	11bf4 <__assert_fail@plt+0x484>
   11be4:	ldrb	r7, [r0, #1]!
   11be8:	sub	r5, r7, #48	; 0x30
   11bec:	cmp	r5, #10
   11bf0:	bcc	11be4 <__assert_fail@plt+0x474>
   11bf4:	uxtb	r7, r7
   11bf8:	mvn	r5, #1
   11bfc:	cmp	r7, #110	; 0x6e
   11c00:	bgt	11c1c <__assert_fail@plt+0x4ac>
   11c04:	cmp	r7, #99	; 0x63
   11c08:	ble	11c38 <__assert_fail@plt+0x4c8>
   11c0c:	cmp	r7, #100	; 0x64
   11c10:	cmpne	r7, #105	; 0x69
   11c14:	beq	11c44 <__assert_fail@plt+0x4d4>
   11c18:	b	12700 <__assert_fail@plt+0xf90>
   11c1c:	cmp	r7, #111	; 0x6f
   11c20:	cmpne	r7, #120	; 0x78
   11c24:	beq	11c40 <__assert_fail@plt+0x4d0>
   11c28:	cmp	r7, #117	; 0x75
   11c2c:	bne	12700 <__assert_fail@plt+0xf90>
   11c30:	strb	r2, [r0]
   11c34:	b	11c44 <__assert_fail@plt+0x4d4>
   11c38:	cmp	r7, #88	; 0x58
   11c3c:	bne	12660 <__assert_fail@plt+0xef0>
   11c40:	mvn	r5, #2
   11c44:	ands	r5, r5, r3
   11c48:	mov	r3, #1
   11c4c:	bne	12698 <__assert_fail@plt+0xf28>
   11c50:	add	r0, r0, #1
   11c54:	b	11b38 <__assert_fail@plt+0x3c8>
   11c58:	tst	r3, #1
   11c5c:	beq	127a0 <__assert_fail@plt+0x1030>
   11c60:	mvn	r0, #-2147483648	; 0x80000000
   11c64:	mov	r1, #0
   11c68:	mov	r2, #1
   11c6c:	mvn	r3, #0
   11c70:	str	r6, [sp]
   11c74:	str	r0, [sp, #4]
   11c78:	mov	r0, #0
   11c7c:	bl	11764 <__snprintf_chk@plt>
   11c80:	cmn	r0, #1
   11c84:	bgt	11ca4 <__assert_fail@plt+0x534>
   11c88:	b	12724 <__assert_fail@plt+0xfb4>
   11c8c:	movw	r2, #24920	; 0x6158
   11c90:	mov	r0, #11
   11c94:	movt	r2, #3
   11c98:	ldr	r1, [r2]
   11c9c:	cmp	r1, #11
   11ca0:	ldrcs	r0, [r2]
   11ca4:	add	r0, r0, r8
   11ca8:	add	r0, r0, #1
   11cac:	cmp	r0, r8
   11cb0:	bvs	12724 <__assert_fail@plt+0xfb4>
   11cb4:	bl	2270c <__assert_fail@plt+0x10f9c>
   11cb8:	movw	r1, #25060	; 0x61e4
   11cbc:	movt	r1, #3
   11cc0:	str	r0, [r1]
   11cc4:	movw	r1, #19996	; 0x4e1c
   11cc8:	ldr	r0, [r4]
   11ccc:	movt	r1, #2
   11cd0:	add	r9, r0, #1
   11cd4:	str	r9, [r4]
   11cd8:	ldr	r6, [sl, r0, lsl #2]
   11cdc:	mov	r0, r6
   11ce0:	bl	1141c <strcmp@plt>
   11ce4:	cmp	r0, #0
   11ce8:	beq	11d0c <__assert_fail@plt+0x59c>
   11cec:	mov	r0, #0
   11cf0:	mov	r1, r6
   11cf4:	mov	r2, #0
   11cf8:	mov	r3, #0
   11cfc:	bl	13a60 <__assert_fail@plt+0x22f0>
   11d00:	cmp	r0, #0
   11d04:	bmi	127ac <__assert_fail@plt+0x103c>
   11d08:	ldr	r9, [r4]
   11d0c:	ldr	r4, [sp, #32]
   11d10:	cmp	r9, r4
   11d14:	bge	11f7c <__assert_fail@plt+0x80c>
   11d18:	ldr	r5, [sl, r9, lsl #2]
   11d1c:	ldrb	r8, [r5]
   11d20:	cmp	r8, #47	; 0x2f
   11d24:	cmpne	r8, #37	; 0x25
   11d28:	bne	11dfc <__assert_fail@plt+0x68c>
   11d2c:	add	sl, r5, #1
   11d30:	mov	r1, r8
   11d34:	mov	r0, sl
   11d38:	bl	116f8 <strrchr@plt>
   11d3c:	cmp	r0, #0
   11d40:	beq	1251c <__assert_fail@plt+0xdac>
   11d44:	mov	r6, r0
   11d48:	bl	12e58 <__assert_fail@plt+0x16e8>
   11d4c:	mov	r1, #0
   11d50:	mov	r7, r0
   11d54:	str	r1, [r0, #36]	; 0x24
   11d58:	mov	r0, #1
   11d5c:	mov	r4, r7
   11d60:	strb	r0, [r7, #30]
   11d64:	sub	r0, r8, #37	; 0x25
   11d68:	str	r9, [r7, #24]
   11d6c:	mov	r8, #0
   11d70:	clz	r0, r0
   11d74:	lsr	r0, r0, #5
   11d78:	strb	r0, [r7, #29]
   11d7c:	mov	r0, #256	; 0x100
   11d80:	str	r1, [r4, #32]!
   11d84:	bl	226f4 <__assert_fail@plt+0x10f84>
   11d88:	str	r0, [r7, #48]	; 0x30
   11d8c:	movw	r0, #25588	; 0x63f4
   11d90:	movw	r1, #710	; 0x2c6
   11d94:	str	r8, [r7, #52]	; 0x34
   11d98:	mov	r2, r4
   11d9c:	movt	r0, #3
   11da0:	str	r1, [r0]
   11da4:	mvn	r0, r5
   11da8:	add	r1, r6, r0
   11dac:	mov	r0, sl
   11db0:	bl	15890 <__assert_fail@plt+0x4120>
   11db4:	cmp	r0, #0
   11db8:	bne	12548 <__assert_fail@plt+0xdd8>
   11dbc:	ldrb	r0, [r6, #1]!
   11dc0:	ldr	sl, [sp, #36]	; 0x24
   11dc4:	cmp	r0, #0
   11dc8:	beq	11ec4 <__assert_fail@plt+0x754>
   11dcc:	movw	r0, #18259	; 0x4753
   11dd0:	mov	r1, #0
   11dd4:	mov	r2, #10
   11dd8:	mov	r3, r7
   11ddc:	movt	r0, #2
   11de0:	str	r0, [sp]
   11de4:	mov	r0, r6
   11de8:	bl	22c34 <__assert_fail@plt+0x114c4>
   11dec:	ldr	r4, [sp, #32]
   11df0:	cmp	r0, #0
   11df4:	beq	11ec8 <__assert_fail@plt+0x758>
   11df8:	b	12584 <__assert_fail@plt+0xe14>
   11dfc:	bl	12e58 <__assert_fail@plt+0x16e8>
   11e00:	str	r9, [r0, #24]
   11e04:	movw	r1, #18259	; 0x4753
   11e08:	mov	r7, r0
   11e0c:	mov	r2, #10
   11e10:	sub	r3, fp, #40	; 0x28
   11e14:	ldr	r0, [sl, r9, lsl #2]
   11e18:	movt	r1, #2
   11e1c:	str	r1, [sp]
   11e20:	mov	r1, #0
   11e24:	bl	23284 <__assert_fail@plt+0x11b14>
   11e28:	cmp	r0, #0
   11e2c:	bne	125a4 <__assert_fail@plt+0xe34>
   11e30:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11e34:	cmn	r1, #1
   11e38:	ble	125a4 <__assert_fail@plt+0xe34>
   11e3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e40:	orrs	r2, r0, r1
   11e44:	beq	125c4 <__assert_fail@plt+0xe54>
   11e48:	movw	r2, #25216	; 0x6280
   11e4c:	movt	r2, #3
   11e50:	ldrd	r2, [r2]
   11e54:	subs	r6, r0, r2
   11e58:	sbcs	r6, r1, r3
   11e5c:	bcc	125e4 <__assert_fail@plt+0xe74>
   11e60:	eor	r2, r0, r2
   11e64:	eor	r3, r1, r3
   11e68:	orrs	r2, r2, r3
   11e6c:	bne	11eb0 <__assert_fail@plt+0x740>
   11e70:	movw	r1, #18802	; 0x4972
   11e74:	mov	r0, #0
   11e78:	mov	r2, #5
   11e7c:	movt	r1, #2
   11e80:	bl	114dc <dcgettext@plt>
   11e84:	mov	r4, r0
   11e88:	ldr	r0, [sl, r9, lsl #2]
   11e8c:	bl	15744 <__assert_fail@plt+0x3fd4>
   11e90:	mov	r2, r4
   11e94:	ldr	r4, [sp, #32]
   11e98:	mov	r3, r0
   11e9c:	mov	r0, #0
   11ea0:	mov	r1, #0
   11ea4:	bl	11590 <error@plt>
   11ea8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11eac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11eb0:	movw	r2, #25216	; 0x6280
   11eb4:	movt	r2, #3
   11eb8:	strd	r0, [r2]
   11ebc:	strd	r0, [r7, #8]
   11ec0:	b	11ec8 <__assert_fail@plt+0x758>
   11ec4:	ldr	r4, [sp, #32]
   11ec8:	add	r5, r9, #1
   11ecc:	cmp	r5, r4
   11ed0:	bge	11ee4 <__assert_fail@plt+0x774>
   11ed4:	ldr	r6, [sl, r5, lsl #2]
   11ed8:	ldrb	r0, [r6]
   11edc:	cmp	r0, #123	; 0x7b
   11ee0:	beq	11eec <__assert_fail@plt+0x77c>
   11ee4:	mov	r9, r5
   11ee8:	b	11d10 <__assert_fail@plt+0x5a0>
   11eec:	mov	r0, r6
   11ef0:	bl	11614 <strlen@plt>
   11ef4:	sub	r4, r0, #1
   11ef8:	mov	r1, r0
   11efc:	ldrb	r0, [r6, r4]
   11f00:	cmp	r0, #125	; 0x7d
   11f04:	bne	126cc <__assert_fail@plt+0xf5c>
   11f08:	mov	r0, #0
   11f0c:	cmp	r1, #3
   11f10:	strb	r0, [r6, r4]
   11f14:	add	r0, r6, #1
   11f18:	bne	11f34 <__assert_fail@plt+0x7c4>
   11f1c:	ldrb	r1, [r0]
   11f20:	cmp	r1, #42	; 0x2a
   11f24:	bne	11f34 <__assert_fail@plt+0x7c4>
   11f28:	mov	r0, #1
   11f2c:	strb	r0, [r7, #28]
   11f30:	b	11f6c <__assert_fail@plt+0x7fc>
   11f34:	movw	r1, #18259	; 0x4753
   11f38:	mov	r2, #10
   11f3c:	add	r3, sp, #40	; 0x28
   11f40:	movt	r1, #2
   11f44:	str	r1, [sp]
   11f48:	mov	r1, #0
   11f4c:	bl	23284 <__assert_fail@plt+0x11b14>
   11f50:	cmp	r0, #0
   11f54:	bne	12634 <__assert_fail@plt+0xec4>
   11f58:	ldr	r1, [sp, #44]	; 0x2c
   11f5c:	cmn	r1, #1
   11f60:	ble	12634 <__assert_fail@plt+0xec4>
   11f64:	ldr	r0, [sp, #40]	; 0x28
   11f68:	strd	r0, [r7, #16]
   11f6c:	mov	r0, #125	; 0x7d
   11f70:	add	r9, r9, #2
   11f74:	strb	r0, [r6, r4]
   11f78:	b	11d0c <__assert_fail@plt+0x59c>
   11f7c:	movw	r8, #25064	; 0x61e8
   11f80:	movt	r8, #3
   11f84:	mov	r0, r8
   11f88:	bl	116e0 <sigemptyset@plt>
   11f8c:	movw	r7, #19792	; 0x4d50
   11f90:	mov	r5, #0
   11f94:	add	r4, sp, #40	; 0x28
   11f98:	movt	r7, #2
   11f9c:	ldr	r6, [r7, -r5, lsl #2]
   11fa0:	mov	r1, #0
   11fa4:	mov	r2, r4
   11fa8:	mov	r0, r6
   11fac:	bl	1153c <sigaction@plt>
   11fb0:	ldr	r0, [sp, #40]	; 0x28
   11fb4:	cmp	r0, #1
   11fb8:	beq	11fc8 <__assert_fail@plt+0x858>
   11fbc:	mov	r0, r8
   11fc0:	mov	r1, r6
   11fc4:	bl	115b4 <sigaddset@plt>
   11fc8:	sub	r5, r5, #1
   11fcc:	cmn	r5, #11
   11fd0:	bne	11f9c <__assert_fail@plt+0x82c>
   11fd4:	movw	r0, #10980	; 0x2ae4
   11fd8:	movw	r8, #25064	; 0x61e8
   11fdc:	mov	r2, #128	; 0x80
   11fe0:	movt	r0, #1
   11fe4:	movt	r8, #3
   11fe8:	str	r0, [sp, #40]	; 0x28
   11fec:	add	r0, r4, #4
   11ff0:	mov	r1, r8
   11ff4:	bl	11488 <memcpy@plt>
   11ff8:	mov	r5, #0
   11ffc:	str	r5, [sp, #172]	; 0xac
   12000:	ldr	r6, [r7, -r5, lsl #2]
   12004:	mov	r0, r8
   12008:	mov	r1, r6
   1200c:	bl	1150c <sigismember@plt>
   12010:	cmp	r0, #0
   12014:	beq	12028 <__assert_fail@plt+0x8b8>
   12018:	mov	r0, r6
   1201c:	mov	r1, r4
   12020:	mov	r2, #0
   12024:	bl	1153c <sigaction@plt>
   12028:	sub	r5, r5, #1
   1202c:	cmn	r5, #11
   12030:	bne	12000 <__assert_fail@plt+0x890>
   12034:	movw	r0, #25040	; 0x61d0
   12038:	movt	r0, #3
   1203c:	ldr	r0, [r0]
   12040:	cmp	r0, #1
   12044:	blt	123a4 <__assert_fail@plt+0xc34>
   12048:	movw	r0, #25036	; 0x61cc
   1204c:	movw	r5, #25232	; 0x6290
   12050:	mov	r4, #0
   12054:	movt	r0, #3
   12058:	movt	r5, #3
   1205c:	ldr	r0, [r0]
   12060:	add	r1, r0, r4, lsl #6
   12064:	str	r4, [sp, #24]
   12068:	ldrb	r1, [r1, #30]
   1206c:	cmp	r1, #0
   12070:	beq	12270 <__assert_fail@plt+0xb00>
   12074:	mov	r8, #0
   12078:	mov	r9, #0
   1207c:	add	r6, r0, r4, lsl #6
   12080:	mov	sl, r6
   12084:	ldrb	r1, [sl, #28]!
   12088:	cmp	r1, #0
   1208c:	bne	120a0 <__assert_fail@plt+0x930>
   12090:	ldrd	r2, [r6, #16]
   12094:	subs	r1, r2, r8
   12098:	sbcs	r1, r3, r9
   1209c:	blt	1238c <__assert_fail@plt+0xc1c>
   120a0:	ldrb	r4, [r6, #29]
   120a4:	cmp	r4, #0
   120a8:	bleq	12efc <__assert_fail@plt+0x178c>
   120ac:	ldr	r0, [r6, #4]
   120b0:	cmn	r0, #1
   120b4:	ble	1213c <__assert_fail@plt+0x9cc>
   120b8:	ldrd	r0, [r5]
   120bc:	adds	r0, r0, #1
   120c0:	adc	r1, r1, #0
   120c4:	strd	r0, [r5]
   120c8:	bl	13004 <__assert_fail@plt+0x1894>
   120cc:	cmp	r0, #0
   120d0:	beq	12450 <__assert_fail@plt+0xce0>
   120d4:	add	r7, r6, #32
   120d8:	ldr	r2, [r0]
   120dc:	ldr	r1, [r0, #4]
   120e0:	sub	r0, r2, #1
   120e4:	ldrb	r3, [r1, r0]
   120e8:	cmp	r3, #10
   120ec:	mov	r3, #0
   120f0:	moveq	r2, r0
   120f4:	mov	r0, #0
   120f8:	str	r0, [sp, #4]
   120fc:	mov	r0, r7
   12100:	str	r2, [sp]
   12104:	bl	18984 <__assert_fail@plt+0x7214>
   12108:	cmn	r0, #1
   1210c:	bne	12194 <__assert_fail@plt+0xa24>
   12110:	bl	13200 <__assert_fail@plt+0x1a90>
   12114:	cmp	r4, #0
   12118:	bleq	132d4 <__assert_fail@plt+0x1b64>
   1211c:	ldrd	r0, [r5]
   12120:	adds	r0, r0, #1
   12124:	adc	r1, r1, #0
   12128:	strd	r0, [r5]
   1212c:	bl	13004 <__assert_fail@plt+0x1894>
   12130:	cmp	r0, #0
   12134:	bne	120d8 <__assert_fail@plt+0x968>
   12138:	b	12450 <__assert_fail@plt+0xce0>
   1213c:	add	r7, r6, #32
   12140:	ldrd	r0, [r5]
   12144:	adds	r0, r0, #1
   12148:	adc	r1, r1, #0
   1214c:	strd	r0, [r5]
   12150:	bl	13004 <__assert_fail@plt+0x1894>
   12154:	cmp	r0, #0
   12158:	beq	12450 <__assert_fail@plt+0xce0>
   1215c:	ldr	r2, [r0]
   12160:	ldr	r1, [r0, #4]
   12164:	sub	r0, r2, #1
   12168:	ldrb	r3, [r1, r0]
   1216c:	cmp	r3, #10
   12170:	mov	r3, #0
   12174:	moveq	r2, r0
   12178:	mov	r0, #0
   1217c:	str	r0, [sp, #4]
   12180:	mov	r0, r7
   12184:	str	r2, [sp]
   12188:	bl	18984 <__assert_fail@plt+0x7214>
   1218c:	cmn	r0, #1
   12190:	beq	12140 <__assert_fail@plt+0x9d0>
   12194:	cmn	r0, #2
   12198:	beq	12478 <__assert_fail@plt+0xd08>
   1219c:	ldr	r0, [r6, #24]
   121a0:	str	r9, [sp, #32]
   121a4:	str	r8, [sp, #36]	; 0x24
   121a8:	str	r6, [sp, #28]
   121ac:	str	r0, [sp, #20]
   121b0:	ldrd	r0, [r5]
   121b4:	ldrd	r2, [r6]
   121b8:	adds	r6, r2, r0
   121bc:	adc	r7, r3, r1
   121c0:	bl	13788 <__assert_fail@plt+0x2018>
   121c4:	subs	r2, r6, r0
   121c8:	sbcs	r2, r7, r1
   121cc:	blt	123f8 <__assert_fail@plt+0xc88>
   121d0:	subs	r8, r6, r0
   121d4:	sbc	r9, r7, r1
   121d8:	subs	r0, r8, #1
   121dc:	sbcs	r0, r9, #0
   121e0:	blt	12214 <__assert_fail@plt+0xaa4>
   121e4:	mov	sl, #0
   121e8:	mov	r5, #0
   121ec:	bl	13200 <__assert_fail@plt+0x1a90>
   121f0:	cmp	r0, #0
   121f4:	beq	123f8 <__assert_fail@plt+0xc88>
   121f8:	cmp	r4, #0
   121fc:	bleq	132d4 <__assert_fail@plt+0x1b64>
   12200:	adds	sl, sl, #1
   12204:	adc	r5, r5, #0
   12208:	subs	r0, sl, r8
   1220c:	sbcs	r0, r5, r9
   12210:	blt	121ec <__assert_fail@plt+0xa7c>
   12214:	cmp	r4, #0
   12218:	bleq	12b58 <__assert_fail@plt+0x13e8>
   1221c:	ldr	r0, [sp, #28]
   12220:	movw	r5, #25232	; 0x6290
   12224:	ldr	r4, [sp, #24]
   12228:	ldr	r8, [sp, #36]	; 0x24
   1222c:	ldr	r9, [sp, #32]
   12230:	movt	r5, #3
   12234:	ldrd	r0, [r0]
   12238:	subs	r0, r0, #1
   1223c:	sbcs	r0, r1, #0
   12240:	movw	r0, #25046	; 0x61d6
   12244:	movt	r0, #3
   12248:	strdge	r6, [r5]
   1224c:	ldrb	r0, [r0]
   12250:	cmp	r0, #1
   12254:	bleq	13200 <__assert_fail@plt+0x1a90>
   12258:	movw	r0, #25036	; 0x61cc
   1225c:	adds	r8, r8, #1
   12260:	movt	r0, #3
   12264:	adc	r9, r9, #0
   12268:	ldr	r0, [r0]
   1226c:	b	1207c <__assert_fail@plt+0x90c>
   12270:	mov	r6, #0
   12274:	mov	sl, #0
   12278:	add	r7, r0, r4, lsl #6
   1227c:	ldrb	r1, [r7, #28]
   12280:	cmp	r1, #0
   12284:	bne	12298 <__assert_fail@plt+0xb28>
   12288:	ldrd	r2, [r7, #16]
   1228c:	subs	r1, r2, r6
   12290:	sbcs	r1, r3, sl
   12294:	blt	1238c <__assert_fail@plt+0xc1c>
   12298:	str	r6, [sp, #36]	; 0x24
   1229c:	str	sl, [sp, #32]
   122a0:	str	r7, [sp, #28]
   122a4:	adds	r6, r6, #1
   122a8:	ldr	r4, [r7, #8]
   122ac:	ldr	r7, [r7, #12]
   122b0:	adc	sl, sl, #0
   122b4:	bl	12efc <__assert_fail@plt+0x178c>
   122b8:	ldrd	r0, [r5]
   122bc:	adds	r0, r0, #1
   122c0:	adc	r1, r1, #0
   122c4:	bl	13004 <__assert_fail@plt+0x1894>
   122c8:	cmp	r0, #0
   122cc:	bne	122e4 <__assert_fail@plt+0xb74>
   122d0:	movw	r0, #25046	; 0x61d6
   122d4:	movt	r0, #3
   122d8:	ldrb	r0, [r0]
   122dc:	cmp	r0, #1
   122e0:	beq	12440 <__assert_fail@plt+0xcd0>
   122e4:	umull	r8, r0, r4, r6
   122e8:	mla	r0, r4, sl, r0
   122ec:	mla	r9, r7, r6, r0
   122f0:	bl	13788 <__assert_fail@plt+0x2018>
   122f4:	mov	r7, r0
   122f8:	subs	r0, r0, r8
   122fc:	sbcs	r0, r1, r9
   12300:	bge	1232c <__assert_fail@plt+0xbbc>
   12304:	mov	r4, r1
   12308:	adds	r7, r7, #1
   1230c:	adc	r4, r4, #0
   12310:	bl	13200 <__assert_fail@plt+0x1a90>
   12314:	cmp	r0, #0
   12318:	beq	12440 <__assert_fail@plt+0xcd0>
   1231c:	bl	132d4 <__assert_fail@plt+0x1b64>
   12320:	subs	r0, r7, r8
   12324:	sbcs	r0, r4, r9
   12328:	blt	12308 <__assert_fail@plt+0xb98>
   1232c:	bl	12b58 <__assert_fail@plt+0x13e8>
   12330:	movw	r0, #25046	; 0x61d6
   12334:	movt	r0, #3
   12338:	ldrb	r0, [r0]
   1233c:	cmp	r0, #1
   12340:	bleq	13200 <__assert_fail@plt+0x1a90>
   12344:	movw	r5, #25232	; 0x6290
   12348:	movt	r5, #3
   1234c:	ldrd	r0, [r5]
   12350:	adds	r0, r0, #1
   12354:	adc	r1, r1, #0
   12358:	bl	13004 <__assert_fail@plt+0x1894>
   1235c:	ldr	r4, [sp, #24]
   12360:	cmp	r0, #0
   12364:	bne	1237c <__assert_fail@plt+0xc0c>
   12368:	movw	r0, #25046	; 0x61d6
   1236c:	movt	r0, #3
   12370:	ldrb	r0, [r0]
   12374:	cmp	r0, #0
   12378:	beq	12440 <__assert_fail@plt+0xcd0>
   1237c:	movw	r0, #25036	; 0x61cc
   12380:	movt	r0, #3
   12384:	ldr	r0, [r0]
   12388:	b	12278 <__assert_fail@plt+0xb08>
   1238c:	movw	r1, #25040	; 0x61d0
   12390:	add	r4, r4, #1
   12394:	movt	r1, #3
   12398:	ldr	r1, [r1]
   1239c:	cmp	r4, r1
   123a0:	blt	12060 <__assert_fail@plt+0x8f0>
   123a4:	bl	12efc <__assert_fail@plt+0x178c>
   123a8:	bl	12fe4 <__assert_fail@plt+0x1874>
   123ac:	bl	12b58 <__assert_fail@plt+0x13e8>
   123b0:	mov	r0, #0
   123b4:	bl	11758 <close@plt>
   123b8:	cmp	r0, #0
   123bc:	moveq	r0, #0
   123c0:	subeq	sp, fp, #28
   123c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c8:	bl	1162c <__errno_location@plt>
   123cc:	movw	r1, #17012	; 0x4274
   123d0:	ldr	r4, [r0]
   123d4:	mov	r0, #0
   123d8:	mov	r2, #5
   123dc:	movt	r1, #2
   123e0:	bl	114dc <dcgettext@plt>
   123e4:	mov	r2, r0
   123e8:	mov	r0, #0
   123ec:	mov	r1, r4
   123f0:	bl	11590 <error@plt>
   123f4:	bl	118a8 <__assert_fail@plt+0x138>
   123f8:	movw	r1, #19199	; 0x4aff
   123fc:	mov	r0, #0
   12400:	mov	r2, #5
   12404:	movt	r1, #2
   12408:	bl	114dc <dcgettext@plt>
   1240c:	mov	r4, r0
   12410:	movw	r0, #25032	; 0x61c8
   12414:	ldr	r1, [sp, #20]
   12418:	movt	r0, #3
   1241c:	ldr	r0, [r0]
   12420:	ldr	r0, [r0, r1, lsl #2]
   12424:	bl	15744 <__assert_fail@plt+0x3fd4>
   12428:	mov	r3, r0
   1242c:	mov	r0, #0
   12430:	mov	r1, #0
   12434:	mov	r2, r4
   12438:	bl	11590 <error@plt>
   1243c:	bl	118a8 <__assert_fail@plt+0x138>
   12440:	ldr	r0, [sp, #28]
   12444:	ldr	r2, [sp, #36]	; 0x24
   12448:	ldr	r3, [sp, #32]
   1244c:	bl	137e8 <__assert_fail@plt+0x2078>
   12450:	ldrb	r0, [sl]
   12454:	cmp	r0, #0
   12458:	bne	1249c <__assert_fail@plt+0xd2c>
   1245c:	cmp	r4, #0
   12460:	mov	r3, r9
   12464:	mov	r2, r8
   12468:	mov	r0, r6
   1246c:	movwne	r4, #1
   12470:	str	r4, [sp]
   12474:	bl	13110 <__assert_fail@plt+0x19a0>
   12478:	movw	r1, #19048	; 0x4a68
   1247c:	mov	r0, #0
   12480:	mov	r2, #5
   12484:	movt	r1, #2
   12488:	bl	114dc <dcgettext@plt>
   1248c:	mov	r2, r0
   12490:	mov	r0, #0
   12494:	mov	r1, #0
   12498:	b	123f0 <__assert_fail@plt+0xc80>
   1249c:	cmp	r4, #0
   124a0:	bne	124ac <__assert_fail@plt+0xd3c>
   124a4:	bl	12fe4 <__assert_fail@plt+0x1874>
   124a8:	bl	12b58 <__assert_fail@plt+0x13e8>
   124ac:	mov	r0, #0
   124b0:	bl	115fc <exit@plt>
   124b4:	cmn	r0, #3
   124b8:	bne	1250c <__assert_fail@plt+0xd9c>
   124bc:	movw	r0, #24924	; 0x615c
   124c0:	movw	r2, #16955	; 0x423b
   124c4:	mov	r1, #0
   124c8:	movw	r7, #16943	; 0x422f
   124cc:	movt	r0, #3
   124d0:	movt	r2, #2
   124d4:	str	r1, [sp, #8]
   124d8:	movw	r1, #16922	; 0x421a
   124dc:	movt	r7, #2
   124e0:	movt	r1, #2
   124e4:	ldr	r3, [r0]
   124e8:	movw	r0, #25020	; 0x61bc
   124ec:	str	r2, [sp, #4]
   124f0:	movw	r2, #16929	; 0x4221
   124f4:	str	r7, [sp]
   124f8:	movt	r0, #3
   124fc:	movt	r2, #2
   12500:	ldr	r0, [r0]
   12504:	bl	225ec <__assert_fail@plt+0x10e7c>
   12508:	b	124ac <__assert_fail@plt+0xd3c>
   1250c:	cmn	r0, #2
   12510:	bne	12810 <__assert_fail@plt+0x10a0>
   12514:	mov	r0, #0
   12518:	bl	12818 <__assert_fail@plt+0x10a8>
   1251c:	movw	r1, #18863	; 0x49af
   12520:	mov	r0, #0
   12524:	mov	r2, #5
   12528:	movt	r1, #2
   1252c:	bl	114dc <dcgettext@plt>
   12530:	mov	r2, r0
   12534:	mov	r0, #1
   12538:	mov	r1, #0
   1253c:	mov	r3, r5
   12540:	str	r8, [sp]
   12544:	bl	11590 <error@plt>
   12548:	movw	r1, #18898	; 0x49d2
   1254c:	mov	r4, r0
   12550:	mov	r0, #0
   12554:	mov	r2, #5
   12558:	movt	r1, #2
   1255c:	bl	114dc <dcgettext@plt>
   12560:	mov	r6, r0
   12564:	mov	r0, r5
   12568:	bl	15744 <__assert_fail@plt+0x3fd4>
   1256c:	mov	r3, r0
   12570:	mov	r0, #0
   12574:	mov	r1, #0
   12578:	mov	r2, r6
   1257c:	str	r4, [sp]
   12580:	b	12438 <__assert_fail@plt+0xcc8>
   12584:	movw	r1, #18933	; 0x49f5
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	movt	r1, #2
   12594:	bl	114dc <dcgettext@plt>
   12598:	mov	r4, r0
   1259c:	mov	r0, r5
   125a0:	b	126e8 <__assert_fail@plt+0xf78>
   125a4:	movw	r1, #18683	; 0x48fb
   125a8:	mov	r0, #0
   125ac:	mov	r2, #5
   125b0:	movt	r1, #2
   125b4:	bl	114dc <dcgettext@plt>
   125b8:	mov	r4, r0
   125bc:	ldr	r0, [sl, r9, lsl #2]
   125c0:	b	126e8 <__assert_fail@plt+0xf78>
   125c4:	movw	r1, #18703	; 0x490f
   125c8:	mov	r0, #0
   125cc:	mov	r2, #5
   125d0:	movt	r1, #2
   125d4:	bl	114dc <dcgettext@plt>
   125d8:	ldr	r3, [sl, r9, lsl #2]
   125dc:	mov	r2, r0
   125e0:	b	126c0 <__assert_fail@plt+0xf50>
   125e4:	movw	r1, #18745	; 0x4939
   125e8:	mov	r0, #0
   125ec:	mov	r2, #5
   125f0:	movt	r1, #2
   125f4:	bl	114dc <dcgettext@plt>
   125f8:	mov	r4, r0
   125fc:	ldr	r0, [sl, r9, lsl #2]
   12600:	bl	15744 <__assert_fail@plt+0x3fd4>
   12604:	mov	r5, r0
   12608:	movw	r0, #25216	; 0x6280
   1260c:	add	r2, sp, #40	; 0x28
   12610:	movt	r0, #3
   12614:	ldrd	r0, [r0]
   12618:	bl	13c9c <__assert_fail@plt+0x252c>
   1261c:	str	r0, [sp]
   12620:	mov	r0, #1
   12624:	mov	r1, #0
   12628:	mov	r2, r4
   1262c:	mov	r3, r5
   12630:	bl	11590 <error@plt>
   12634:	movw	r1, #19006	; 0x4a3e
   12638:	mov	r0, #0
   1263c:	mov	r2, #5
   12640:	movt	r1, #2
   12644:	bl	114dc <dcgettext@plt>
   12648:	mov	r4, r0
   1264c:	movw	r0, #25032	; 0x61c8
   12650:	movt	r0, #3
   12654:	ldr	r0, [r0]
   12658:	ldr	r0, [r0, r5, lsl #2]
   1265c:	b	126e8 <__assert_fail@plt+0xf78>
   12660:	cmp	r7, #0
   12664:	bne	12700 <__assert_fail@plt+0xf90>
   12668:	movw	r1, #18478	; 0x482e
   1266c:	movt	r1, #2
   12670:	b	1267c <__assert_fail@plt+0xf0c>
   12674:	movw	r1, #18384	; 0x47d0
   12678:	movt	r1, #2
   1267c:	mov	r0, #0
   12680:	mov	r2, #5
   12684:	bl	114dc <dcgettext@plt>
   12688:	mov	r2, r0
   1268c:	mov	r0, #1
   12690:	mov	r1, #0
   12694:	bl	11590 <error@plt>
   12698:	movw	r1, #18606	; 0x48ae
   1269c:	mov	r0, #0
   126a0:	mov	r2, #5
   126a4:	movt	r1, #2
   126a8:	bl	114dc <dcgettext@plt>
   126ac:	tst	r5, #2
   126b0:	mov	r3, #35	; 0x23
   126b4:	mov	r2, r0
   126b8:	str	r7, [sp]
   126bc:	movweq	r3, #39	; 0x27
   126c0:	mov	r0, #1
   126c4:	mov	r1, #0
   126c8:	bl	11590 <error@plt>
   126cc:	movw	r1, #18970	; 0x4a1a
   126d0:	mov	r0, #0
   126d4:	mov	r2, #5
   126d8:	movt	r1, #2
   126dc:	bl	114dc <dcgettext@plt>
   126e0:	mov	r4, r0
   126e4:	mov	r0, r6
   126e8:	bl	15744 <__assert_fail@plt+0x3fd4>
   126ec:	mov	r3, r0
   126f0:	mov	r0, #1
   126f4:	mov	r1, #0
   126f8:	mov	r2, r4
   126fc:	bl	11590 <error@plt>
   12700:	bl	115f0 <__ctype_b_loc@plt>
   12704:	ldr	r0, [r0]
   12708:	add	r0, r0, r7, lsl #1
   1270c:	ldrb	r0, [r0, #1]
   12710:	tst	r0, #64	; 0x40
   12714:	bne	12728 <__assert_fail@plt+0xfb8>
   12718:	movw	r1, #18560	; 0x4880
   1271c:	movt	r1, #2
   12720:	b	12730 <__assert_fail@plt+0xfc0>
   12724:	bl	11870 <__assert_fail@plt+0x100>
   12728:	movw	r1, #18517	; 0x4855
   1272c:	movt	r1, #2
   12730:	mov	r0, #0
   12734:	mov	r2, #5
   12738:	bl	114dc <dcgettext@plt>
   1273c:	mov	r2, r0
   12740:	mov	r0, #1
   12744:	mov	r1, #0
   12748:	mov	r3, r7
   1274c:	bl	11590 <error@plt>
   12750:	ldr	r1, [sp, #32]
   12754:	cmp	r0, r1
   12758:	bge	127ec <__assert_fail@plt+0x107c>
   1275c:	movw	r1, #16987	; 0x425b
   12760:	mov	r0, #0
   12764:	mov	r2, #5
   12768:	movt	r1, #2
   1276c:	bl	114dc <dcgettext@plt>
   12770:	mov	r4, r0
   12774:	ldr	r0, [sp, #36]	; 0x24
   12778:	ldr	r1, [sp, #32]
   1277c:	add	r0, r0, r1, lsl #2
   12780:	ldr	r0, [r0, #-4]
   12784:	bl	15744 <__assert_fail@plt+0x3fd4>
   12788:	mov	r3, r0
   1278c:	mov	r0, #0
   12790:	mov	r1, #0
   12794:	mov	r2, r4
   12798:	bl	11590 <error@plt>
   1279c:	b	12810 <__assert_fail@plt+0x10a0>
   127a0:	movw	r1, #18432	; 0x4800
   127a4:	movt	r1, #2
   127a8:	b	1267c <__assert_fail@plt+0xf0c>
   127ac:	bl	1162c <__errno_location@plt>
   127b0:	movw	r1, #18656	; 0x48e0
   127b4:	ldr	r4, [r0]
   127b8:	mov	r0, #0
   127bc:	mov	r2, #5
   127c0:	movt	r1, #2
   127c4:	bl	114dc <dcgettext@plt>
   127c8:	mov	r5, r0
   127cc:	mov	r0, #4
   127d0:	mov	r1, r6
   127d4:	bl	1540c <__assert_fail@plt+0x3c9c>
   127d8:	mov	r3, r0
   127dc:	mov	r0, #1
   127e0:	mov	r1, r4
   127e4:	mov	r2, r5
   127e8:	bl	11590 <error@plt>
   127ec:	movw	r1, #16971	; 0x424b
   127f0:	mov	r0, #0
   127f4:	mov	r2, #5
   127f8:	movt	r1, #2
   127fc:	bl	114dc <dcgettext@plt>
   12800:	mov	r2, r0
   12804:	mov	r0, #0
   12808:	mov	r1, #0
   1280c:	bl	11590 <error@plt>
   12810:	mov	r0, #1
   12814:	bl	12818 <__assert_fail@plt+0x10a8>
   12818:	push	{fp, lr}
   1281c:	mov	fp, sp
   12820:	sub	sp, sp, #56	; 0x38
   12824:	mov	r8, r0
   12828:	cmp	r0, #0
   1282c:	bne	12aa4 <__assert_fail@plt+0x1334>
   12830:	movw	r1, #17062	; 0x42a6
   12834:	mov	r0, #0
   12838:	mov	r2, #5
   1283c:	movt	r1, #2
   12840:	bl	114dc <dcgettext@plt>
   12844:	mov	r1, r0
   12848:	movw	r0, #25276	; 0x62bc
   1284c:	movt	r0, #3
   12850:	ldr	r2, [r0]
   12854:	mov	r0, #1
   12858:	bl	11674 <__printf_chk@plt>
   1285c:	movw	r1, #17101	; 0x42cd
   12860:	mov	r0, #0
   12864:	mov	r2, #5
   12868:	movt	r1, #2
   1286c:	bl	114dc <dcgettext@plt>
   12870:	movw	r9, #25020	; 0x61bc
   12874:	movt	r9, #3
   12878:	ldr	r1, [r9]
   1287c:	bl	113e0 <fputs_unlocked@plt>
   12880:	movw	r1, #17235	; 0x4353
   12884:	mov	r0, #0
   12888:	mov	r2, #5
   1288c:	movt	r1, #2
   12890:	bl	114dc <dcgettext@plt>
   12894:	ldr	r1, [r9]
   12898:	bl	113e0 <fputs_unlocked@plt>
   1289c:	movw	r1, #19230	; 0x4b1e
   128a0:	mov	r0, #0
   128a4:	mov	r2, #5
   128a8:	movt	r1, #2
   128ac:	bl	114dc <dcgettext@plt>
   128b0:	ldr	r1, [r9]
   128b4:	bl	113e0 <fputs_unlocked@plt>
   128b8:	movw	r1, #17270	; 0x4376
   128bc:	mov	r0, #0
   128c0:	mov	r2, #5
   128c4:	movt	r1, #2
   128c8:	bl	114dc <dcgettext@plt>
   128cc:	ldr	r1, [r9]
   128d0:	bl	113e0 <fputs_unlocked@plt>
   128d4:	movw	r1, #17458	; 0x4432
   128d8:	mov	r0, #0
   128dc:	mov	r2, #5
   128e0:	movt	r1, #2
   128e4:	bl	114dc <dcgettext@plt>
   128e8:	ldr	r1, [r9]
   128ec:	bl	113e0 <fputs_unlocked@plt>
   128f0:	movw	r1, #17524	; 0x4474
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	movt	r1, #2
   12900:	bl	114dc <dcgettext@plt>
   12904:	ldr	r1, [r9]
   12908:	bl	113e0 <fputs_unlocked@plt>
   1290c:	movw	r1, #17723	; 0x453b
   12910:	mov	r0, #0
   12914:	mov	r2, #5
   12918:	movt	r1, #2
   1291c:	bl	114dc <dcgettext@plt>
   12920:	ldr	r1, [r9]
   12924:	bl	113e0 <fputs_unlocked@plt>
   12928:	movw	r1, #17768	; 0x4568
   1292c:	mov	r0, #0
   12930:	mov	r2, #5
   12934:	movt	r1, #2
   12938:	bl	114dc <dcgettext@plt>
   1293c:	ldr	r1, [r9]
   12940:	bl	113e0 <fputs_unlocked@plt>
   12944:	movw	r1, #17822	; 0x459e
   12948:	mov	r0, #0
   1294c:	mov	r2, #5
   12950:	movt	r1, #2
   12954:	bl	114dc <dcgettext@plt>
   12958:	ldr	r1, [r9]
   1295c:	bl	113e0 <fputs_unlocked@plt>
   12960:	movw	r0, #19840	; 0x4d80
   12964:	mov	r6, sp
   12968:	movt	r0, #2
   1296c:	mov	r1, r6
   12970:	ldm	r0!, {r2, r3, r4, r5}
   12974:	stmia	r1!, {r2, r3, r4, r5}
   12978:	ldm	r0!, {r2, r3, r4, r5, r7}
   1297c:	stmia	r1!, {r2, r3, r4, r5, r7}
   12980:	ldm	r0, {r2, r3, r4, r5, r7}
   12984:	stm	r1, {r2, r3, r4, r5, r7}
   12988:	movw	r1, #19305	; 0x4b69
   1298c:	movw	r5, #16922	; 0x421a
   12990:	movt	r1, #2
   12994:	movt	r5, #2
   12998:	mov	r0, r5
   1299c:	bl	1141c <strcmp@plt>
   129a0:	cmp	r0, #0
   129a4:	ldrne	r1, [r6, #8]!
   129a8:	cmpne	r1, #0
   129ac:	bne	12998 <__assert_fail@plt+0x1228>
   129b0:	movw	r1, #19400	; 0x4bc8
   129b4:	ldr	r6, [r6, #4]
   129b8:	mov	r0, #0
   129bc:	mov	r2, #5
   129c0:	movt	r1, #2
   129c4:	bl	114dc <dcgettext@plt>
   129c8:	movw	r2, #16929	; 0x4221
   129cc:	movw	r3, #19423	; 0x4bdf
   129d0:	mov	r1, r0
   129d4:	mov	r0, #1
   129d8:	movt	r2, #2
   129dc:	movt	r3, #2
   129e0:	bl	11674 <__printf_chk@plt>
   129e4:	cmp	r6, #0
   129e8:	mov	r0, #5
   129ec:	mov	r1, #0
   129f0:	moveq	r6, r5
   129f4:	bl	116d4 <setlocale@plt>
   129f8:	cmp	r0, #0
   129fc:	beq	12a34 <__assert_fail@plt+0x12c4>
   12a00:	movw	r1, #19463	; 0x4c07
   12a04:	mov	r2, #3
   12a08:	movt	r1, #2
   12a0c:	bl	11740 <strncmp@plt>
   12a10:	cmp	r0, #0
   12a14:	beq	12a34 <__assert_fail@plt+0x12c4>
   12a18:	movw	r1, #19467	; 0x4c0b
   12a1c:	mov	r0, #0
   12a20:	mov	r2, #5
   12a24:	movt	r1, #2
   12a28:	bl	114dc <dcgettext@plt>
   12a2c:	ldr	r1, [r9]
   12a30:	bl	113e0 <fputs_unlocked@plt>
   12a34:	movw	r1, #19538	; 0x4c52
   12a38:	mov	r0, #0
   12a3c:	mov	r2, #5
   12a40:	movt	r1, #2
   12a44:	bl	114dc <dcgettext@plt>
   12a48:	movw	r2, #19423	; 0x4bdf
   12a4c:	mov	r1, r0
   12a50:	mov	r0, #1
   12a54:	mov	r3, r5
   12a58:	movt	r2, #2
   12a5c:	bl	11674 <__printf_chk@plt>
   12a60:	movw	r1, #19565	; 0x4c6d
   12a64:	mov	r0, #0
   12a68:	mov	r2, #5
   12a6c:	movt	r1, #2
   12a70:	bl	114dc <dcgettext@plt>
   12a74:	mov	r1, r0
   12a78:	movw	r0, #19333	; 0x4b85
   12a7c:	movw	r3, #18259	; 0x4753
   12a80:	cmp	r6, r5
   12a84:	mov	r2, r6
   12a88:	movt	r0, #2
   12a8c:	movt	r3, #2
   12a90:	moveq	r3, r0
   12a94:	mov	r0, #1
   12a98:	bl	11674 <__printf_chk@plt>
   12a9c:	mov	r0, r8
   12aa0:	bl	115fc <exit@plt>
   12aa4:	movw	r0, #25016	; 0x61b8
   12aa8:	movw	r1, #17023	; 0x427f
   12aac:	mov	r2, #5
   12ab0:	movt	r0, #3
   12ab4:	movt	r1, #2
   12ab8:	ldr	r5, [r0]
   12abc:	mov	r0, #0
   12ac0:	bl	114dc <dcgettext@plt>
   12ac4:	mov	r2, r0
   12ac8:	movw	r0, #25276	; 0x62bc
   12acc:	mov	r1, #1
   12ad0:	movt	r0, #3
   12ad4:	ldr	r3, [r0]
   12ad8:	mov	r0, r5
   12adc:	bl	11698 <__fprintf_chk@plt>
   12ae0:	b	12a9c <__assert_fail@plt+0x132c>
   12ae4:	push	{r4, sl, fp, lr}
   12ae8:	add	fp, sp, #8
   12aec:	mov	r4, r0
   12af0:	mov	r0, #1
   12af4:	bl	12d24 <__assert_fail@plt+0x15b4>
   12af8:	mov	r0, r4
   12afc:	mov	r1, #0
   12b00:	bl	114c4 <signal@plt>
   12b04:	mov	r0, r4
   12b08:	pop	{r4, sl, fp, lr}
   12b0c:	b	113f8 <raise@plt>
   12b10:	push	{r4, sl, fp, lr}
   12b14:	add	fp, sp, #8
   12b18:	sub	sp, sp, #128	; 0x80
   12b1c:	bl	12b58 <__assert_fail@plt+0x13e8>
   12b20:	movw	r1, #25064	; 0x61e8
   12b24:	mov	r4, sp
   12b28:	mov	r0, #0
   12b2c:	movt	r1, #3
   12b30:	mov	r2, r4
   12b34:	bl	1144c <sigprocmask@plt>
   12b38:	mov	r0, #0
   12b3c:	bl	12d24 <__assert_fail@plt+0x15b4>
   12b40:	mov	r0, #2
   12b44:	mov	r1, r4
   12b48:	mov	r2, #0
   12b4c:	bl	1144c <sigprocmask@plt>
   12b50:	sub	sp, fp, #8
   12b54:	pop	{r4, sl, fp, pc}
   12b58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12b5c:	add	fp, sp, #24
   12b60:	sub	sp, sp, #128	; 0x80
   12b64:	movw	r7, #25192	; 0x6268
   12b68:	movt	r7, #3
   12b6c:	ldr	r0, [r7]
   12b70:	cmp	r0, #0
   12b74:	beq	12c94 <__assert_fail@plt+0x1524>
   12b78:	bl	11578 <ferror_unlocked@plt>
   12b7c:	cmp	r0, #0
   12b80:	bne	12c9c <__assert_fail@plt+0x152c>
   12b84:	ldr	r0, [r7]
   12b88:	bl	139c4 <__assert_fail@plt+0x2254>
   12b8c:	cmp	r0, #0
   12b90:	bne	12ce0 <__assert_fail@plt+0x1570>
   12b94:	movw	r0, #25200	; 0x6270
   12b98:	movt	r0, #3
   12b9c:	ldrd	r0, [r0]
   12ba0:	orrs	r2, r0, r1
   12ba4:	bne	12c4c <__assert_fail@plt+0x14dc>
   12ba8:	movw	r2, #25056	; 0x61e0
   12bac:	movt	r2, #3
   12bb0:	ldrb	r2, [r2]
   12bb4:	cmp	r2, #1
   12bb8:	bne	12c4c <__assert_fail@plt+0x14dc>
   12bbc:	movw	r1, #25064	; 0x61e8
   12bc0:	mov	r5, sp
   12bc4:	mov	r0, #0
   12bc8:	movt	r1, #3
   12bcc:	mov	r2, r5
   12bd0:	bl	1144c <sigprocmask@plt>
   12bd4:	movw	r8, #25196	; 0x626c
   12bd8:	movt	r8, #3
   12bdc:	ldr	r0, [r8]
   12be0:	bl	114e8 <unlink@plt>
   12be4:	mov	r6, r0
   12be8:	bl	1162c <__errno_location@plt>
   12bec:	ldr	r4, [r0]
   12bf0:	movw	r0, #25208	; 0x6278
   12bf4:	mov	r2, #0
   12bf8:	movt	r0, #3
   12bfc:	ldr	r1, [r0]
   12c00:	sub	r1, r1, #1
   12c04:	str	r1, [r0]
   12c08:	mov	r0, #2
   12c0c:	mov	r1, r5
   12c10:	bl	1144c <sigprocmask@plt>
   12c14:	cmp	r6, #0
   12c18:	cmpne	r4, #2
   12c1c:	beq	12c8c <__assert_fail@plt+0x151c>
   12c20:	ldr	r2, [r8]
   12c24:	mov	r0, #0
   12c28:	mov	r1, #3
   12c2c:	bl	155b0 <__assert_fail@plt+0x3e40>
   12c30:	movw	r2, #18799	; 0x496f
   12c34:	mov	r3, r0
   12c38:	mov	r0, #0
   12c3c:	mov	r1, r4
   12c40:	movt	r2, #2
   12c44:	bl	11590 <error@plt>
   12c48:	b	12c8c <__assert_fail@plt+0x151c>
   12c4c:	movw	r2, #25044	; 0x61d4
   12c50:	movt	r2, #3
   12c54:	ldrb	r2, [r2]
   12c58:	cmp	r2, #0
   12c5c:	bne	12c8c <__assert_fail@plt+0x151c>
   12c60:	movw	r2, #25020	; 0x61bc
   12c64:	movt	r2, #3
   12c68:	ldr	r4, [r2]
   12c6c:	mov	r2, sp
   12c70:	bl	13c9c <__assert_fail@plt+0x252c>
   12c74:	movw	r2, #20761	; 0x5119
   12c78:	mov	r3, r0
   12c7c:	mov	r0, r4
   12c80:	mov	r1, #1
   12c84:	movt	r2, #2
   12c88:	bl	11698 <__fprintf_chk@plt>
   12c8c:	mov	r0, #0
   12c90:	str	r0, [r7]
   12c94:	sub	sp, fp, #24
   12c98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c9c:	movw	r1, #18260	; 0x4754
   12ca0:	mov	r0, #0
   12ca4:	mov	r2, #5
   12ca8:	mov	r5, #0
   12cac:	movt	r1, #2
   12cb0:	bl	114dc <dcgettext@plt>
   12cb4:	mov	r4, r0
   12cb8:	movw	r0, #25196	; 0x626c
   12cbc:	movt	r0, #3
   12cc0:	ldr	r1, [r0]
   12cc4:	mov	r0, #4
   12cc8:	bl	1540c <__assert_fail@plt+0x3c9c>
   12ccc:	mov	r3, r0
   12cd0:	mov	r0, #0
   12cd4:	mov	r1, #0
   12cd8:	mov	r2, r4
   12cdc:	b	12d18 <__assert_fail@plt+0x15a8>
   12ce0:	bl	1162c <__errno_location@plt>
   12ce4:	ldr	r4, [r0]
   12ce8:	movw	r0, #25196	; 0x626c
   12cec:	mov	r1, #3
   12cf0:	mov	r5, #0
   12cf4:	movt	r0, #3
   12cf8:	ldr	r2, [r0]
   12cfc:	mov	r0, #0
   12d00:	bl	155b0 <__assert_fail@plt+0x3e40>
   12d04:	movw	r2, #18799	; 0x496f
   12d08:	mov	r3, r0
   12d0c:	mov	r0, #0
   12d10:	mov	r1, r4
   12d14:	movt	r2, #2
   12d18:	bl	11590 <error@plt>
   12d1c:	str	r5, [r7]
   12d20:	bl	118a8 <__assert_fail@plt+0x138>
   12d24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d28:	add	fp, sp, #24
   12d2c:	mov	r4, r0
   12d30:	movw	r0, #25045	; 0x61d5
   12d34:	movt	r0, #3
   12d38:	ldrb	r0, [r0]
   12d3c:	cmp	r0, #0
   12d40:	beq	12dc8 <__assert_fail@plt+0x1658>
   12d44:	movw	r9, #25208	; 0x6278
   12d48:	movt	r9, #3
   12d4c:	ldr	r5, [r9]
   12d50:	cmp	r5, #1
   12d54:	blt	12dc0 <__assert_fail@plt+0x1650>
   12d58:	movw	r8, #18799	; 0x496f
   12d5c:	movt	r8, #2
   12d60:	sub	r5, r5, #1
   12d64:	mov	r0, r5
   12d68:	bl	12dcc <__assert_fail@plt+0x165c>
   12d6c:	mov	r7, r0
   12d70:	bl	114e8 <unlink@plt>
   12d74:	cmp	r0, #0
   12d78:	beq	12db8 <__assert_fail@plt+0x1648>
   12d7c:	bl	1162c <__errno_location@plt>
   12d80:	ldr	r6, [r0]
   12d84:	cmp	r6, #2
   12d88:	beq	12db8 <__assert_fail@plt+0x1648>
   12d8c:	cmp	r4, #0
   12d90:	bne	12db8 <__assert_fail@plt+0x1648>
   12d94:	mov	r0, #0
   12d98:	mov	r1, #3
   12d9c:	mov	r2, r7
   12da0:	bl	155b0 <__assert_fail@plt+0x3e40>
   12da4:	mov	r3, r0
   12da8:	mov	r0, #0
   12dac:	mov	r1, r6
   12db0:	mov	r2, r8
   12db4:	bl	11590 <error@plt>
   12db8:	cmp	r5, #0
   12dbc:	bgt	12d60 <__assert_fail@plt+0x15f0>
   12dc0:	mov	r0, #0
   12dc4:	str	r0, [r9]
   12dc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12dcc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12dd0:	add	fp, sp, #24
   12dd4:	sub	sp, sp, #8
   12dd8:	movw	r8, #25060	; 0x61e4
   12ddc:	movw	r7, #25048	; 0x61d8
   12de0:	mov	r4, r0
   12de4:	movt	r8, #3
   12de8:	movt	r7, #3
   12dec:	ldr	r0, [r8]
   12df0:	ldr	r1, [r7]
   12df4:	bl	11560 <strcpy@plt>
   12df8:	movw	r9, #25052	; 0x61dc
   12dfc:	movt	r9, #3
   12e00:	ldr	r5, [r9]
   12e04:	ldr	r6, [r8]
   12e08:	ldr	r0, [r7]
   12e0c:	bl	11614 <strlen@plt>
   12e10:	add	r0, r6, r0
   12e14:	cmp	r5, #0
   12e18:	beq	12e28 <__assert_fail@plt+0x16b8>
   12e1c:	ldr	r3, [r9]
   12e20:	str	r4, [sp]
   12e24:	b	12e40 <__assert_fail@plt+0x16d0>
   12e28:	movw	r1, #24920	; 0x6158
   12e2c:	movw	r3, #18279	; 0x4767
   12e30:	movt	r1, #3
   12e34:	movt	r3, #2
   12e38:	ldr	r1, [r1]
   12e3c:	stm	sp, {r1, r4}
   12e40:	mov	r1, #1
   12e44:	mvn	r2, #0
   12e48:	bl	11644 <__sprintf_chk@plt>
   12e4c:	ldr	r0, [r8]
   12e50:	sub	sp, fp, #24
   12e54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e58:	push	{r4, r5, fp, lr}
   12e5c:	add	fp, sp, #8
   12e60:	sub	sp, sp, #8
   12e64:	movw	r4, #25040	; 0x61d0
   12e68:	movw	r0, #25224	; 0x6288
   12e6c:	movt	r0, #3
   12e70:	movt	r4, #3
   12e74:	ldr	r1, [r4]
   12e78:	ldr	r0, [r0]
   12e7c:	cmp	r1, r0
   12e80:	bne	12eb8 <__assert_fail@plt+0x1748>
   12e84:	movw	r5, #25036	; 0x61cc
   12e88:	mov	r1, #64	; 0x40
   12e8c:	mov	r2, #1
   12e90:	mvn	r3, #0
   12e94:	movt	r5, #3
   12e98:	str	r1, [sp]
   12e9c:	movw	r1, #25224	; 0x6288
   12ea0:	movt	r1, #3
   12ea4:	ldr	r0, [r5]
   12ea8:	bl	22854 <__assert_fail@plt+0x110e4>
   12eac:	ldr	r1, [r4]
   12eb0:	str	r0, [r5]
   12eb4:	b	12ec4 <__assert_fail@plt+0x1754>
   12eb8:	movw	r0, #25036	; 0x61cc
   12ebc:	movt	r0, #3
   12ec0:	ldr	r0, [r0]
   12ec4:	add	r0, r0, r1, lsl #6
   12ec8:	vmov.i32	q8, #0	; 0x00000000
   12ecc:	add	r2, r1, #1
   12ed0:	mov	r1, #0
   12ed4:	str	r2, [r4]
   12ed8:	mov	r2, #20
   12edc:	mov	r3, r0
   12ee0:	strb	r1, [r0, #28]
   12ee4:	strb	r1, [r0, #30]
   12ee8:	str	r1, [r0, #16]
   12eec:	vst1.64	{d16-d17}, [r3], r2
   12ef0:	str	r1, [r3]
   12ef4:	sub	sp, fp, #8
   12ef8:	pop	{r4, r5, fp, pc}
   12efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f00:	add	fp, sp, #28
   12f04:	sub	sp, sp, #132	; 0x84
   12f08:	movw	r5, #25208	; 0x6278
   12f0c:	movt	r5, #3
   12f10:	ldr	r4, [r5]
   12f14:	mov	r0, r4
   12f18:	bl	12dcc <__assert_fail@plt+0x165c>
   12f1c:	movw	r9, #25196	; 0x626c
   12f20:	cmn	r4, #-2147483647	; 0x80000001
   12f24:	movt	r9, #3
   12f28:	str	r0, [r9]
   12f2c:	beq	12fd8 <__assert_fail@plt+0x1868>
   12f30:	movw	r1, #25064	; 0x61e8
   12f34:	add	r6, sp, #4
   12f38:	mov	r0, #0
   12f3c:	mov	sl, #0
   12f40:	movt	r1, #3
   12f44:	mov	r2, r6
   12f48:	bl	1144c <sigprocmask@plt>
   12f4c:	ldr	r0, [r9]
   12f50:	movw	r1, #19228	; 0x4b1c
   12f54:	movt	r1, #2
   12f58:	bl	13b24 <__assert_fail@plt+0x23b4>
   12f5c:	mov	r7, r0
   12f60:	movw	r0, #25192	; 0x6268
   12f64:	movt	r0, #3
   12f68:	cmp	r7, #0
   12f6c:	addne	r4, r4, #1
   12f70:	str	r7, [r0]
   12f74:	bl	1162c <__errno_location@plt>
   12f78:	ldr	r8, [r0]
   12f7c:	mov	r0, #2
   12f80:	mov	r1, r6
   12f84:	mov	r2, #0
   12f88:	str	r4, [r5]
   12f8c:	bl	1144c <sigprocmask@plt>
   12f90:	cmp	r7, #0
   12f94:	movwne	r0, #25200	; 0x6270
   12f98:	movtne	r0, #3
   12f9c:	strne	sl, [r0]
   12fa0:	strne	sl, [r0, #4]
   12fa4:	subne	sp, fp, #28
   12fa8:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fac:	ldr	r2, [r9]
   12fb0:	mov	r0, #0
   12fb4:	mov	r1, #3
   12fb8:	bl	155b0 <__assert_fail@plt+0x3e40>
   12fbc:	movw	r2, #18799	; 0x496f
   12fc0:	mov	r3, r0
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, r8
   12fcc:	movt	r2, #2
   12fd0:	bl	11590 <error@plt>
   12fd4:	bl	118a8 <__assert_fail@plt+0x138>
   12fd8:	mov	r2, r0
   12fdc:	mov	r8, #75	; 0x4b
   12fe0:	b	12fb0 <__assert_fail@plt+0x1840>
   12fe4:	push	{fp, lr}
   12fe8:	mov	fp, sp
   12fec:	bl	13200 <__assert_fail@plt+0x1a90>
   12ff0:	cmp	r0, #0
   12ff4:	beq	13000 <__assert_fail@plt+0x1890>
   12ff8:	bl	132d4 <__assert_fail@plt+0x1b64>
   12ffc:	b	12fec <__assert_fail@plt+0x187c>
   13000:	pop	{fp, pc}
   13004:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13008:	add	fp, sp, #24
   1300c:	movw	r8, #25240	; 0x6298
   13010:	mov	r5, r1
   13014:	mov	r4, r0
   13018:	movt	r8, #3
   1301c:	ldr	r7, [r8]
   13020:	cmp	r7, #0
   13024:	bne	1303c <__assert_fail@plt+0x18cc>
   13028:	mov	r6, #0
   1302c:	bl	13378 <__assert_fail@plt+0x1c08>
   13030:	cmp	r0, #0
   13034:	beq	130e8 <__assert_fail@plt+0x1978>
   13038:	ldr	r7, [r8]
   1303c:	ldrd	r0, [r7, #8]
   13040:	mov	r6, #0
   13044:	subs	r2, r4, r0
   13048:	sbcs	r2, r5, r1
   1304c:	blt	130e8 <__assert_fail@plt+0x1978>
   13050:	cmp	r7, #0
   13054:	beq	130f0 <__assert_fail@plt+0x1980>
   13058:	ldr	r2, [r7, #24]
   1305c:	adds	r3, r0, r2
   13060:	adc	r1, r1, r2, asr #31
   13064:	subs	r2, r4, r3
   13068:	sbcs	r1, r5, r1
   1306c:	bge	13078 <__assert_fail@plt+0x1908>
   13070:	mov	r1, r7
   13074:	b	130c0 <__assert_fail@plt+0x1950>
   13078:	ldr	r1, [r7, #40]	; 0x28
   1307c:	cmp	r1, #0
   13080:	bne	1309c <__assert_fail@plt+0x192c>
   13084:	bl	13378 <__assert_fail@plt+0x1c08>
   13088:	cmp	r0, #0
   1308c:	beq	130e8 <__assert_fail@plt+0x1978>
   13090:	ldr	r1, [r7, #40]	; 0x28
   13094:	cmp	r1, #0
   13098:	beq	130f0 <__assert_fail@plt+0x1980>
   1309c:	ldr	r0, [r1, #8]
   130a0:	ldr	r2, [r1, #24]
   130a4:	ldr	r3, [r1, #12]
   130a8:	adds	r7, r0, r2
   130ac:	adc	r2, r3, r2, asr #31
   130b0:	subs	r3, r4, r7
   130b4:	mov	r7, r1
   130b8:	sbcs	r2, r5, r2
   130bc:	bge	13078 <__assert_fail@plt+0x1908>
   130c0:	ldr	r1, [r1, #32]
   130c4:	sub	r0, r4, r0
   130c8:	cmp	r0, #80	; 0x50
   130cc:	blt	130e0 <__assert_fail@plt+0x1970>
   130d0:	ldr	r1, [r1, #652]	; 0x28c
   130d4:	sub	r0, r0, #80	; 0x50
   130d8:	cmp	r0, #79	; 0x4f
   130dc:	bgt	130d0 <__assert_fail@plt+0x1960>
   130e0:	add	r0, r1, r0, lsl #3
   130e4:	add	r6, r0, #12
   130e8:	mov	r0, r6
   130ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130f0:	movw	r0, #19083	; 0x4a8b
   130f4:	movw	r1, #19085	; 0x4a8d
   130f8:	movw	r3, #19098	; 0x4a9a
   130fc:	movw	r2, #583	; 0x247
   13100:	movt	r0, #2
   13104:	movt	r1, #2
   13108:	movt	r3, #2
   1310c:	bl	11770 <__assert_fail@plt>
   13110:	push	{fp, lr}
   13114:	mov	fp, sp
   13118:	sub	sp, sp, #32
   1311c:	movw	r9, #25016	; 0x61b8
   13120:	movw	r1, #19134	; 0x4abe
   13124:	mov	r5, r2
   13128:	mov	r6, r0
   1312c:	mov	r0, #0
   13130:	mov	r2, #5
   13134:	mov	r8, r3
   13138:	movt	r9, #3
   1313c:	movt	r1, #2
   13140:	ldr	r7, [r9]
   13144:	bl	114dc <dcgettext@plt>
   13148:	movw	r1, #25032	; 0x61c8
   1314c:	mov	r4, r0
   13150:	ldr	r0, [r6, #24]
   13154:	movt	r1, #3
   13158:	ldr	r1, [r1]
   1315c:	ldr	r0, [r1, r0, lsl #2]
   13160:	movw	r1, #25276	; 0x62bc
   13164:	movt	r1, #3
   13168:	ldr	r6, [r1]
   1316c:	bl	15744 <__assert_fail@plt+0x3fd4>
   13170:	str	r0, [sp]
   13174:	mov	r0, r7
   13178:	mov	r1, #1
   1317c:	mov	r2, r4
   13180:	mov	r3, r6
   13184:	bl	11698 <__fprintf_chk@plt>
   13188:	ldr	r7, [fp, #8]
   1318c:	orrs	r0, r5, r8
   13190:	bne	131ac <__assert_fail@plt+0x1a3c>
   13194:	ldr	r0, [r9]
   13198:	movw	r2, #18258	; 0x4752
   1319c:	mov	r1, #1
   131a0:	movt	r2, #2
   131a4:	bl	11698 <__fprintf_chk@plt>
   131a8:	b	131ec <__assert_fail@plt+0x1a7c>
   131ac:	movw	r1, #19158	; 0x4ad6
   131b0:	ldr	r4, [r9]
   131b4:	mov	r0, #0
   131b8:	mov	r2, #5
   131bc:	movt	r1, #2
   131c0:	bl	114dc <dcgettext@plt>
   131c4:	mov	r6, r0
   131c8:	add	r2, sp, #11
   131cc:	mov	r0, r5
   131d0:	mov	r1, r8
   131d4:	bl	13c9c <__assert_fail@plt+0x252c>
   131d8:	mov	r3, r0
   131dc:	mov	r0, r4
   131e0:	mov	r1, #1
   131e4:	mov	r2, r6
   131e8:	bl	11698 <__fprintf_chk@plt>
   131ec:	cmp	r7, #0
   131f0:	bne	131fc <__assert_fail@plt+0x1a8c>
   131f4:	bl	12fe4 <__assert_fail@plt+0x1874>
   131f8:	bl	12b58 <__assert_fail@plt+0x13e8>
   131fc:	bl	118a8 <__assert_fail@plt+0x138>
   13200:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13204:	add	fp, sp, #24
   13208:	movw	r5, #25264	; 0x62b0
   1320c:	movt	r5, #3
   13210:	ldr	r0, [r5]
   13214:	cmp	r0, #0
   13218:	beq	13228 <__assert_fail@plt+0x1ab8>
   1321c:	bl	136a0 <__assert_fail@plt+0x1f30>
   13220:	mov	r0, #0
   13224:	str	r0, [r5]
   13228:	movw	r7, #25240	; 0x6298
   1322c:	movt	r7, #3
   13230:	ldr	r0, [r7]
   13234:	cmp	r0, #0
   13238:	bne	13250 <__assert_fail@plt+0x1ae0>
   1323c:	mov	r4, #0
   13240:	bl	13378 <__assert_fail@plt+0x1c08>
   13244:	cmp	r0, #0
   13248:	beq	132cc <__assert_fail@plt+0x1b5c>
   1324c:	ldr	r0, [r7]
   13250:	movw	r4, #25232	; 0x6290
   13254:	mov	r1, r0
   13258:	movt	r4, #3
   1325c:	ldr	r2, [r1, #16]!
   13260:	ldr	r3, [r1, #4]
   13264:	ldrd	r8, [r4]
   13268:	subs	r6, r8, r2
   1326c:	sbcs	r6, r9, r3
   13270:	strdlt	r2, [r4]
   13274:	adds	r2, r2, #1
   13278:	adc	r3, r3, #0
   1327c:	strd	r2, [r1]
   13280:	ldr	r1, [r0, #36]	; 0x24
   13284:	ldr	r3, [r1, #8]
   13288:	ldr	r2, [r1]
   1328c:	add	r6, r3, #1
   13290:	add	r3, r1, r3, lsl #3
   13294:	cmp	r6, r2
   13298:	str	r6, [r1, #8]
   1329c:	add	r4, r3, #12
   132a0:	bne	132cc <__assert_fail@plt+0x1b5c>
   132a4:	ldr	r1, [r1, #652]	; 0x28c
   132a8:	cmp	r1, #0
   132ac:	str	r1, [r0, #36]	; 0x24
   132b0:	beq	132c0 <__assert_fail@plt+0x1b50>
   132b4:	ldr	r1, [r1]
   132b8:	cmp	r1, #0
   132bc:	bne	132cc <__assert_fail@plt+0x1b5c>
   132c0:	str	r0, [r5]
   132c4:	ldr	r0, [r0, #40]	; 0x28
   132c8:	str	r0, [r7]
   132cc:	mov	r0, r4
   132d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   132d4:	push	{r4, r5, r6, r7, fp, lr}
   132d8:	add	fp, sp, #16
   132dc:	movw	r6, #25192	; 0x6268
   132e0:	mov	r4, r0
   132e4:	ldr	r2, [r0]
   132e8:	ldr	r0, [r0, #4]
   132ec:	mov	r1, #1
   132f0:	movt	r6, #3
   132f4:	ldr	r3, [r6]
   132f8:	bl	114d0 <fwrite_unlocked@plt>
   132fc:	ldr	r1, [r4]
   13300:	cmp	r0, r1
   13304:	bne	13324 <__assert_fail@plt+0x1bb4>
   13308:	movw	r1, #25200	; 0x6270
   1330c:	movt	r1, #3
   13310:	ldrd	r2, [r1]
   13314:	adds	r2, r2, r0
   13318:	adc	r3, r3, r0, asr #31
   1331c:	strd	r2, [r1]
   13320:	pop	{r4, r5, r6, r7, fp, pc}
   13324:	bl	1162c <__errno_location@plt>
   13328:	movw	r1, #18260	; 0x4754
   1332c:	ldr	r4, [r0]
   13330:	mov	r0, #0
   13334:	mov	r2, #5
   13338:	mov	r7, #0
   1333c:	movt	r1, #2
   13340:	bl	114dc <dcgettext@plt>
   13344:	mov	r5, r0
   13348:	movw	r0, #25196	; 0x626c
   1334c:	movt	r0, #3
   13350:	ldr	r1, [r0]
   13354:	mov	r0, #4
   13358:	bl	1540c <__assert_fail@plt+0x3c9c>
   1335c:	mov	r3, r0
   13360:	mov	r0, #0
   13364:	mov	r1, r4
   13368:	mov	r2, r5
   1336c:	bl	11590 <error@plt>
   13370:	str	r7, [r6]
   13374:	bl	118a8 <__assert_fail@plt+0x138>
   13378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1337c:	add	fp, sp, #28
   13380:	sub	sp, sp, #4
   13384:	movw	r0, #25244	; 0x629c
   13388:	movt	r0, #3
   1338c:	ldrb	r1, [r0]
   13390:	mov	r0, #0
   13394:	cmp	r1, #0
   13398:	bne	13664 <__assert_fail@plt+0x1ef4>
   1339c:	movw	r9, #25248	; 0x62a0
   133a0:	movw	r1, #8190	; 0x1ffe
   133a4:	movw	r5, #8191	; 0x1fff
   133a8:	mov	sl, #0
   133ac:	movt	r9, #3
   133b0:	ldr	r0, [r9]
   133b4:	cmp	r0, r1
   133b8:	addgt	r5, r0, #1
   133bc:	mov	r0, #48	; 0x30
   133c0:	bl	226f4 <__assert_fail@plt+0x10f84>
   133c4:	mov	r4, r0
   133c8:	str	sl, [r0]
   133cc:	mov	r0, #1
   133d0:	mov	r2, r5
   133d4:	mvn	r3, #0
   133d8:	str	r0, [sp]
   133dc:	mov	r0, #0
   133e0:	mov	r1, r4
   133e4:	bl	22854 <__assert_fail@plt+0x110e4>
   133e8:	str	r0, [r4, #28]
   133ec:	mov	r5, r0
   133f0:	movw	r0, #25256	; 0x62a8
   133f4:	add	r8, r4, #8
   133f8:	str	sl, [r4, #4]
   133fc:	str	sl, [r4, #32]
   13400:	str	sl, [r4, #40]	; 0x28
   13404:	str	sl, [r4, #24]
   13408:	str	sl, [r4, #36]	; 0x24
   1340c:	ldr	r6, [r9]
   13410:	movt	r0, #3
   13414:	ldrd	r0, [r0]
   13418:	adds	r0, r0, #1
   1341c:	vmov.32	d16[0], r0
   13420:	adc	r1, r1, #0
   13424:	cmp	r6, #0
   13428:	vmov.32	d16[1], r1
   1342c:	vorr	d17, d16, d16
   13430:	vst1.64	{d16-d17}, [r8]
   13434:	ldr	r7, [r4]
   13438:	beq	1346c <__assert_fail@plt+0x1cfc>
   1343c:	movw	r0, #25252	; 0x62a4
   13440:	mov	r2, r6
   13444:	movt	r0, #3
   13448:	ldr	r1, [r0]
   1344c:	mov	r0, r5
   13450:	bl	11488 <memcpy@plt>
   13454:	ldr	r0, [r4, #4]
   13458:	sub	r7, r7, r6
   1345c:	add	r5, r5, r6
   13460:	str	sl, [r9]
   13464:	add	r0, r0, r6
   13468:	str	r0, [r4, #4]
   1346c:	subs	r2, r7, #1
   13470:	mov	r0, #0
   13474:	beq	134ac <__assert_fail@plt+0x1d3c>
   13478:	mov	r0, #0
   1347c:	mov	r1, r5
   13480:	bl	221c4 <__assert_fail@plt+0x10a54>
   13484:	cmp	r0, #0
   13488:	beq	13498 <__assert_fail@plt+0x1d28>
   1348c:	cmn	r0, #1
   13490:	bne	134ac <__assert_fail@plt+0x1d3c>
   13494:	b	13670 <__assert_fail@plt+0x1f00>
   13498:	movw	r0, #25244	; 0x629c
   1349c:	mov	r1, #1
   134a0:	movt	r0, #3
   134a4:	strb	r1, [r0]
   134a8:	mov	r0, #0
   134ac:	ldr	r1, [r4, #4]
   134b0:	adds	r0, r1, r0
   134b4:	str	r0, [r4, #4]
   134b8:	beq	135c0 <__assert_fail@plt+0x1e50>
   134bc:	ldr	r5, [r4, #28]
   134c0:	mov	r1, #10
   134c4:	mov	r7, r9
   134c8:	mov	r6, r5
   134cc:	strb	r1, [r6, r0]!
   134d0:	mov	r0, r5
   134d4:	mov	r1, #10
   134d8:	bl	11524 <rawmemchr@plt>
   134dc:	mov	r9, #0
   134e0:	cmp	r0, r6
   134e4:	beq	13518 <__assert_fail@plt+0x1da8>
   134e8:	mov	r1, r5
   134ec:	add	r5, r0, #1
   134f0:	mov	r0, r4
   134f4:	sub	r2, r5, r1
   134f8:	bl	136e0 <__assert_fail@plt+0x1f70>
   134fc:	mov	r0, r5
   13500:	mov	r1, #10
   13504:	bl	11524 <rawmemchr@plt>
   13508:	add	r9, r9, #1
   1350c:	cmp	r0, r6
   13510:	mov	r1, r5
   13514:	bne	134ec <__assert_fail@plt+0x1d7c>
   13518:	subs	r6, r6, r5
   1351c:	beq	1357c <__assert_fail@plt+0x1e0c>
   13520:	movw	r0, #25244	; 0x629c
   13524:	movt	r0, #3
   13528:	ldrb	r0, [r0]
   1352c:	cmp	r0, #1
   13530:	bne	1354c <__assert_fail@plt+0x1ddc>
   13534:	mov	r0, r4
   13538:	mov	r1, r5
   1353c:	mov	r2, r6
   13540:	bl	136e0 <__assert_fail@plt+0x1f70>
   13544:	add	r9, r9, #1
   13548:	b	1357c <__assert_fail@plt+0x1e0c>
   1354c:	mov	r0, r5
   13550:	mov	r1, r6
   13554:	bl	22a78 <__assert_fail@plt+0x11308>
   13558:	mov	r5, r0
   1355c:	movw	r0, #25252	; 0x62a4
   13560:	movt	r0, #3
   13564:	ldr	r0, [r0]
   13568:	bl	13bd0 <__assert_fail@plt+0x2460>
   1356c:	movw	r0, #25252	; 0x62a4
   13570:	str	r6, [r7]
   13574:	movt	r0, #3
   13578:	str	r5, [r0]
   1357c:	movw	r0, #25256	; 0x62a8
   13580:	str	r9, [r4, #24]
   13584:	movt	r0, #3
   13588:	mov	r6, r0
   1358c:	ldrd	r0, [r0]
   13590:	adds	r2, r0, #1
   13594:	vmov.32	d16[0], r2
   13598:	adc	r3, r1, #0
   1359c:	adds	r0, r0, r9
   135a0:	adc	r1, r1, r9, asr #31
   135a4:	cmp	r9, #0
   135a8:	mov	r9, r7
   135ac:	strd	r0, [r6]
   135b0:	vmov.32	d16[1], r3
   135b4:	vorr	d17, d16, d16
   135b8:	vst1.64	{d16-d17}, [r8]
   135bc:	bne	13620 <__assert_fail@plt+0x1eb0>
   135c0:	movw	r0, #25244	; 0x629c
   135c4:	movt	r0, #3
   135c8:	ldrb	r0, [r0]
   135cc:	cmp	r0, #0
   135d0:	bne	13610 <__assert_fail@plt+0x1ea0>
   135d4:	ldr	r5, [r4]
   135d8:	cmn	r5, #1
   135dc:	ble	135ec <__assert_fail@plt+0x1e7c>
   135e0:	cmp	r5, #1073741824	; 0x40000000
   135e4:	blt	13600 <__assert_fail@plt+0x1e90>
   135e8:	b	1366c <__assert_fail@plt+0x1efc>
   135ec:	beq	13600 <__assert_fail@plt+0x1e90>
   135f0:	mov	r0, #-2147483648	; 0x80000000
   135f4:	sdiv	r0, r0, r5
   135f8:	cmp	r0, #2
   135fc:	blt	1366c <__assert_fail@plt+0x1efc>
   13600:	mov	r0, r4
   13604:	bl	136a0 <__assert_fail@plt+0x1f30>
   13608:	lsl	r5, r5, #1
   1360c:	b	133bc <__assert_fail@plt+0x1c4c>
   13610:	mov	r0, r4
   13614:	bl	136a0 <__assert_fail@plt+0x1f30>
   13618:	mov	r0, #0
   1361c:	b	13664 <__assert_fail@plt+0x1ef4>
   13620:	ldr	r1, [r4, #32]
   13624:	mov	r0, #0
   13628:	str	r1, [r4, #36]	; 0x24
   1362c:	movw	r1, #25240	; 0x6298
   13630:	str	r0, [r4, #40]	; 0x28
   13634:	movt	r1, #3
   13638:	ldr	r0, [r1]
   1363c:	cmp	r0, #0
   13640:	beq	1365c <__assert_fail@plt+0x1eec>
   13644:	mov	r1, r0
   13648:	ldr	r0, [r0, #40]	; 0x28
   1364c:	cmp	r0, #0
   13650:	bne	13644 <__assert_fail@plt+0x1ed4>
   13654:	str	r4, [r1, #40]	; 0x28
   13658:	b	13660 <__assert_fail@plt+0x1ef0>
   1365c:	str	r4, [r1]
   13660:	mov	r0, #1
   13664:	sub	sp, fp, #28
   13668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1366c:	bl	11870 <__assert_fail@plt+0x100>
   13670:	bl	1162c <__errno_location@plt>
   13674:	movw	r1, #17012	; 0x4274
   13678:	ldr	r4, [r0]
   1367c:	mov	r0, #0
   13680:	mov	r2, #5
   13684:	movt	r1, #2
   13688:	bl	114dc <dcgettext@plt>
   1368c:	mov	r2, r0
   13690:	mov	r0, #0
   13694:	mov	r1, r4
   13698:	bl	11590 <error@plt>
   1369c:	bl	118a8 <__assert_fail@plt+0x138>
   136a0:	push	{r4, r5, fp, lr}
   136a4:	add	fp, sp, #8
   136a8:	mov	r4, r0
   136ac:	ldr	r0, [r0, #32]
   136b0:	cmp	r0, #0
   136b4:	beq	136cc <__assert_fail@plt+0x1f5c>
   136b8:	ldr	r5, [r0, #652]	; 0x28c
   136bc:	bl	13bd0 <__assert_fail@plt+0x2460>
   136c0:	cmp	r5, #0
   136c4:	mov	r0, r5
   136c8:	bne	136b8 <__assert_fail@plt+0x1f48>
   136cc:	ldr	r0, [r4, #28]
   136d0:	bl	13bd0 <__assert_fail@plt+0x2460>
   136d4:	mov	r0, r4
   136d8:	pop	{r4, r5, fp, lr}
   136dc:	b	13bd0 <__assert_fail@plt+0x2460>
   136e0:	push	{r4, r5, r6, sl, fp, lr}
   136e4:	add	fp, sp, #16
   136e8:	mov	r6, r0
   136ec:	ldr	r0, [r0, #32]
   136f0:	mov	r5, r2
   136f4:	mov	r4, r1
   136f8:	cmp	r0, #0
   136fc:	beq	13708 <__assert_fail@plt+0x1f98>
   13700:	ldr	r0, [r6, #36]	; 0x24
   13704:	b	1372c <__assert_fail@plt+0x1fbc>
   13708:	mov	r0, #656	; 0x290
   1370c:	bl	226f4 <__assert_fail@plt+0x10f84>
   13710:	mov	r1, #0
   13714:	str	r1, [r0, #652]	; 0x28c
   13718:	str	r1, [r0]
   1371c:	str	r1, [r0, #4]
   13720:	str	r1, [r0, #8]
   13724:	str	r0, [r6, #32]
   13728:	str	r0, [r6, #36]	; 0x24
   1372c:	ldr	r1, [r0]
   13730:	cmp	r1, #80	; 0x50
   13734:	bne	13760 <__assert_fail@plt+0x1ff0>
   13738:	mov	r0, #656	; 0x290
   1373c:	bl	226f4 <__assert_fail@plt+0x10f84>
   13740:	mov	r1, #0
   13744:	str	r1, [r0, #652]	; 0x28c
   13748:	str	r1, [r0]
   1374c:	str	r1, [r0, #4]
   13750:	str	r1, [r0, #8]
   13754:	ldr	r1, [r6, #36]	; 0x24
   13758:	str	r0, [r1, #652]	; 0x28c
   1375c:	str	r0, [r6, #36]	; 0x24
   13760:	ldr	r1, [r0, #4]
   13764:	add	r2, r0, r1, lsl #3
   13768:	add	r1, r1, #1
   1376c:	str	r5, [r2, #12]
   13770:	str	r4, [r2, #16]
   13774:	str	r1, [r0, #4]
   13778:	ldr	r1, [r0]
   1377c:	add	r1, r1, #1
   13780:	str	r1, [r0]
   13784:	pop	{r4, r5, r6, sl, fp, pc}
   13788:	push	{r4, sl, fp, lr}
   1378c:	add	fp, sp, #8
   13790:	movw	r4, #25240	; 0x6298
   13794:	movt	r4, #3
   13798:	ldr	r0, [r4]
   1379c:	cmp	r0, #0
   137a0:	bne	137b4 <__assert_fail@plt+0x2044>
   137a4:	bl	13378 <__assert_fail@plt+0x1c08>
   137a8:	cmp	r0, #0
   137ac:	beq	137bc <__assert_fail@plt+0x204c>
   137b0:	ldr	r0, [r4]
   137b4:	ldrd	r0, [r0, #16]
   137b8:	pop	{r4, sl, fp, pc}
   137bc:	bl	1162c <__errno_location@plt>
   137c0:	movw	r1, #19177	; 0x4ae9
   137c4:	ldr	r4, [r0]
   137c8:	mov	r0, #0
   137cc:	mov	r2, #5
   137d0:	movt	r1, #2
   137d4:	bl	114dc <dcgettext@plt>
   137d8:	mov	r2, r0
   137dc:	mov	r0, #1
   137e0:	mov	r1, r4
   137e4:	bl	11590 <error@plt>
   137e8:	push	{fp, lr}
   137ec:	mov	fp, sp
   137f0:	sub	sp, sp, #32
   137f4:	movw	sl, #25016	; 0x61b8
   137f8:	movw	r1, #19195	; 0x4afb
   137fc:	mov	r9, r2
   13800:	mov	r6, r0
   13804:	mov	r0, #0
   13808:	mov	r2, #5
   1380c:	mov	r8, r3
   13810:	movt	sl, #3
   13814:	movt	r1, #2
   13818:	ldr	r7, [sl]
   1381c:	bl	114dc <dcgettext@plt>
   13820:	mov	r4, r0
   13824:	movw	r0, #25276	; 0x62bc
   13828:	add	r2, sp, #11
   1382c:	movt	r0, #3
   13830:	ldr	r5, [r0]
   13834:	ldrd	r0, [r6, #8]
   13838:	bl	13c9c <__assert_fail@plt+0x252c>
   1383c:	bl	15744 <__assert_fail@plt+0x3fd4>
   13840:	str	r0, [sp]
   13844:	mov	r0, r7
   13848:	mov	r1, #1
   1384c:	mov	r2, r4
   13850:	mov	r3, r5
   13854:	bl	11698 <__fprintf_chk@plt>
   13858:	ldr	r6, [sl]
   1385c:	orrs	r0, r9, r8
   13860:	bne	1387c <__assert_fail@plt+0x210c>
   13864:	movw	r2, #18258	; 0x4752
   13868:	mov	r0, r6
   1386c:	mov	r1, #1
   13870:	movt	r2, #2
   13874:	bl	11698 <__fprintf_chk@plt>
   13878:	bl	118a8 <__assert_fail@plt+0x138>
   1387c:	movw	r1, #19158	; 0x4ad6
   13880:	mov	r0, #0
   13884:	mov	r2, #5
   13888:	movt	r1, #2
   1388c:	bl	114dc <dcgettext@plt>
   13890:	mov	r4, r0
   13894:	add	r2, sp, #11
   13898:	mov	r0, r9
   1389c:	mov	r1, r8
   138a0:	bl	13c9c <__assert_fail@plt+0x252c>
   138a4:	mov	r3, r0
   138a8:	mov	r0, r6
   138ac:	mov	r1, #1
   138b0:	mov	r2, r4
   138b4:	bl	11698 <__fprintf_chk@plt>
   138b8:	bl	118a8 <__assert_fail@plt+0x138>
   138bc:	movw	r1, #25268	; 0x62b4
   138c0:	movt	r1, #3
   138c4:	str	r0, [r1]
   138c8:	bx	lr
   138cc:	movw	r1, #25272	; 0x62b8
   138d0:	movt	r1, #3
   138d4:	strb	r0, [r1]
   138d8:	bx	lr
   138dc:	push	{r4, r5, r6, sl, fp, lr}
   138e0:	add	fp, sp, #16
   138e4:	sub	sp, sp, #8
   138e8:	movw	r0, #25020	; 0x61bc
   138ec:	movt	r0, #3
   138f0:	ldr	r0, [r0]
   138f4:	bl	23a14 <__assert_fail@plt+0x122a4>
   138f8:	cmp	r0, #0
   138fc:	beq	13924 <__assert_fail@plt+0x21b4>
   13900:	movw	r0, #25272	; 0x62b8
   13904:	movt	r0, #3
   13908:	ldrb	r0, [r0]
   1390c:	cmp	r0, #0
   13910:	beq	13944 <__assert_fail@plt+0x21d4>
   13914:	bl	1162c <__errno_location@plt>
   13918:	ldr	r0, [r0]
   1391c:	cmp	r0, #32
   13920:	bne	13944 <__assert_fail@plt+0x21d4>
   13924:	movw	r0, #25016	; 0x61b8
   13928:	movt	r0, #3
   1392c:	ldr	r0, [r0]
   13930:	bl	23a14 <__assert_fail@plt+0x122a4>
   13934:	cmp	r0, #0
   13938:	subeq	sp, fp, #16
   1393c:	popeq	{r4, r5, r6, sl, fp, pc}
   13940:	b	139b4 <__assert_fail@plt+0x2244>
   13944:	movw	r1, #19911	; 0x4dc7
   13948:	mov	r0, #0
   1394c:	mov	r2, #5
   13950:	movt	r1, #2
   13954:	bl	114dc <dcgettext@plt>
   13958:	mov	r4, r0
   1395c:	movw	r0, #25268	; 0x62b4
   13960:	movt	r0, #3
   13964:	ldr	r6, [r0]
   13968:	bl	1162c <__errno_location@plt>
   1396c:	ldr	r5, [r0]
   13970:	cmp	r6, #0
   13974:	bne	13990 <__assert_fail@plt+0x2220>
   13978:	movw	r2, #18799	; 0x496f
   1397c:	mov	r0, #0
   13980:	mov	r1, r5
   13984:	mov	r3, r4
   13988:	movt	r2, #2
   1398c:	b	139b0 <__assert_fail@plt+0x2240>
   13990:	mov	r0, r6
   13994:	bl	15504 <__assert_fail@plt+0x3d94>
   13998:	movw	r2, #19923	; 0x4dd3
   1399c:	mov	r3, r0
   139a0:	str	r4, [sp]
   139a4:	mov	r0, #0
   139a8:	mov	r1, r5
   139ac:	movt	r2, #2
   139b0:	bl	11590 <error@plt>
   139b4:	movw	r0, #24928	; 0x6160
   139b8:	movt	r0, #3
   139bc:	ldr	r0, [r0]
   139c0:	bl	1147c <_exit@plt>
   139c4:	push	{r4, r5, r6, sl, fp, lr}
   139c8:	add	fp, sp, #16
   139cc:	sub	sp, sp, #8
   139d0:	mov	r4, r0
   139d4:	bl	11680 <fileno@plt>
   139d8:	cmn	r0, #1
   139dc:	ble	13a50 <__assert_fail@plt+0x22e0>
   139e0:	mov	r0, r4
   139e4:	bl	115cc <__freading@plt>
   139e8:	cmp	r0, #0
   139ec:	beq	13a18 <__assert_fail@plt+0x22a8>
   139f0:	mov	r0, r4
   139f4:	bl	11680 <fileno@plt>
   139f8:	mov	r1, #1
   139fc:	mov	r2, #0
   13a00:	mov	r3, #0
   13a04:	str	r1, [sp]
   13a08:	bl	11548 <lseek64@plt>
   13a0c:	and	r0, r0, r1
   13a10:	cmn	r0, #1
   13a14:	beq	13a50 <__assert_fail@plt+0x22e0>
   13a18:	mov	r0, r4
   13a1c:	bl	13ac8 <__assert_fail@plt+0x2358>
   13a20:	cmp	r0, #0
   13a24:	beq	13a50 <__assert_fail@plt+0x22e0>
   13a28:	bl	1162c <__errno_location@plt>
   13a2c:	ldr	r6, [r0]
   13a30:	mov	r5, r0
   13a34:	mov	r0, r4
   13a38:	bl	116b0 <fclose@plt>
   13a3c:	cmp	r6, #0
   13a40:	strne	r6, [r5]
   13a44:	mvnne	r0, #0
   13a48:	sub	sp, fp, #16
   13a4c:	pop	{r4, r5, r6, sl, fp, pc}
   13a50:	mov	r0, r4
   13a54:	sub	sp, fp, #16
   13a58:	pop	{r4, r5, r6, sl, fp, lr}
   13a5c:	b	116b0 <fclose@plt>
   13a60:	push	{r4, r5, r6, r7, fp, lr}
   13a64:	add	fp, sp, #16
   13a68:	mov	r5, r0
   13a6c:	mov	r0, r1
   13a70:	mov	r1, r2
   13a74:	mov	r2, r3
   13a78:	bl	1159c <open64@plt>
   13a7c:	mov	r4, r0
   13a80:	cmp	r0, r5
   13a84:	beq	13ac0 <__assert_fail@plt+0x2350>
   13a88:	cmp	r4, #0
   13a8c:	bmi	13ac0 <__assert_fail@plt+0x2350>
   13a90:	mov	r0, r4
   13a94:	mov	r1, r5
   13a98:	bl	114f4 <dup2@plt>
   13a9c:	mov	r5, r0
   13aa0:	bl	1162c <__errno_location@plt>
   13aa4:	ldr	r7, [r0]
   13aa8:	mov	r6, r0
   13aac:	mov	r0, r4
   13ab0:	bl	11758 <close@plt>
   13ab4:	mov	r0, r5
   13ab8:	str	r7, [r6]
   13abc:	pop	{r4, r5, r6, r7, fp, pc}
   13ac0:	mov	r0, r4
   13ac4:	pop	{r4, r5, r6, r7, fp, pc}
   13ac8:	push	{r4, sl, fp, lr}
   13acc:	add	fp, sp, #8
   13ad0:	sub	sp, sp, #8
   13ad4:	mov	r4, r0
   13ad8:	cmp	r0, #0
   13adc:	beq	13b14 <__assert_fail@plt+0x23a4>
   13ae0:	mov	r0, r4
   13ae4:	bl	115cc <__freading@plt>
   13ae8:	cmp	r0, #0
   13aec:	beq	13b14 <__assert_fail@plt+0x23a4>
   13af0:	ldrb	r0, [r4, #1]
   13af4:	tst	r0, #1
   13af8:	beq	13b14 <__assert_fail@plt+0x23a4>
   13afc:	mov	r0, #1
   13b00:	mov	r2, #0
   13b04:	mov	r3, #0
   13b08:	str	r0, [sp]
   13b0c:	mov	r0, r4
   13b10:	bl	13bf8 <__assert_fail@plt+0x2488>
   13b14:	mov	r0, r4
   13b18:	sub	sp, fp, #8
   13b1c:	pop	{r4, sl, fp, lr}
   13b20:	b	11440 <fflush@plt>
   13b24:	push	{r4, r5, r6, r7, fp, lr}
   13b28:	add	fp, sp, #16
   13b2c:	mov	r5, r1
   13b30:	bl	11710 <fopen64@plt>
   13b34:	mov	r4, #0
   13b38:	cmp	r0, #0
   13b3c:	beq	13bc8 <__assert_fail@plt+0x2458>
   13b40:	mov	r6, r0
   13b44:	bl	11680 <fileno@plt>
   13b48:	cmp	r0, #2
   13b4c:	bhi	13ba8 <__assert_fail@plt+0x2438>
   13b50:	bl	22228 <__assert_fail@plt+0x10ab8>
   13b54:	cmn	r0, #1
   13b58:	ble	13bb0 <__assert_fail@plt+0x2440>
   13b5c:	mov	r7, r0
   13b60:	mov	r0, r6
   13b64:	bl	139c4 <__assert_fail@plt+0x2254>
   13b68:	cmp	r0, #0
   13b6c:	bne	13b88 <__assert_fail@plt+0x2418>
   13b70:	mov	r0, r7
   13b74:	mov	r1, r5
   13b78:	bl	113c8 <fdopen@plt>
   13b7c:	mov	r4, r0
   13b80:	cmp	r0, #0
   13b84:	bne	13bc8 <__assert_fail@plt+0x2458>
   13b88:	bl	1162c <__errno_location@plt>
   13b8c:	ldr	r5, [r0]
   13b90:	mov	r4, r0
   13b94:	mov	r0, r7
   13b98:	bl	11758 <close@plt>
   13b9c:	str	r5, [r4]
   13ba0:	mov	r4, #0
   13ba4:	b	13bc8 <__assert_fail@plt+0x2458>
   13ba8:	mov	r4, r6
   13bac:	b	13bc8 <__assert_fail@plt+0x2458>
   13bb0:	bl	1162c <__errno_location@plt>
   13bb4:	ldr	r7, [r0]
   13bb8:	mov	r5, r0
   13bbc:	mov	r0, r6
   13bc0:	bl	139c4 <__assert_fail@plt+0x2254>
   13bc4:	str	r7, [r5]
   13bc8:	mov	r0, r4
   13bcc:	pop	{r4, r5, r6, r7, fp, pc}
   13bd0:	push	{r4, r5, r6, sl, fp, lr}
   13bd4:	add	fp, sp, #16
   13bd8:	mov	r4, r0
   13bdc:	bl	1162c <__errno_location@plt>
   13be0:	ldr	r6, [r0]
   13be4:	mov	r5, r0
   13be8:	mov	r0, r4
   13bec:	bl	11464 <free@plt>
   13bf0:	str	r6, [r5]
   13bf4:	pop	{r4, r5, r6, sl, fp, pc}
   13bf8:	push	{r4, r5, r6, r7, fp, lr}
   13bfc:	add	fp, sp, #16
   13c00:	sub	sp, sp, #8
   13c04:	mov	r4, r0
   13c08:	ldr	r0, [r0, #4]
   13c0c:	mov	r5, r3
   13c10:	mov	r6, r2
   13c14:	ldr	r1, [r4, #8]
   13c18:	cmp	r1, r0
   13c1c:	bne	13c38 <__assert_fail@plt+0x24c8>
   13c20:	ldrd	r0, [r4, #16]
   13c24:	cmp	r1, r0
   13c28:	bne	13c38 <__assert_fail@plt+0x24c8>
   13c2c:	ldr	r0, [r4, #36]	; 0x24
   13c30:	cmp	r0, #0
   13c34:	beq	13c50 <__assert_fail@plt+0x24e0>
   13c38:	mov	r0, r4
   13c3c:	mov	r2, r6
   13c40:	mov	r3, r5
   13c44:	sub	sp, fp, #16
   13c48:	pop	{r4, r5, r6, r7, fp, lr}
   13c4c:	b	116bc <fseeko64@plt>
   13c50:	ldr	r7, [fp, #8]
   13c54:	mov	r0, r4
   13c58:	bl	11680 <fileno@plt>
   13c5c:	mov	r2, r6
   13c60:	mov	r3, r5
   13c64:	str	r7, [sp]
   13c68:	bl	11548 <lseek64@plt>
   13c6c:	and	r2, r0, r1
   13c70:	cmn	r2, #1
   13c74:	beq	13c90 <__assert_fail@plt+0x2520>
   13c78:	strd	r0, [r4, #80]	; 0x50
   13c7c:	ldr	r0, [r4]
   13c80:	bic	r0, r0, #16
   13c84:	str	r0, [r4]
   13c88:	mov	r0, #0
   13c8c:	b	13c94 <__assert_fail@plt+0x2524>
   13c90:	mvn	r0, #0
   13c94:	sub	sp, fp, #16
   13c98:	pop	{r4, r5, r6, r7, fp, pc}
   13c9c:	push	{r4, r5, r6, sl, fp, lr}
   13ca0:	add	fp, sp, #16
   13ca4:	mov	r5, r0
   13ca8:	mov	r0, #0
   13cac:	mov	r4, r1
   13cb0:	add	r6, r2, #19
   13cb4:	cmp	r1, #0
   13cb8:	strb	r0, [r2, #20]
   13cbc:	bmi	13d08 <__assert_fail@plt+0x2598>
   13cc0:	mov	r0, r5
   13cc4:	mov	r1, r4
   13cc8:	mov	r2, #10
   13ccc:	mov	r3, #0
   13cd0:	bl	23f00 <__assert_fail@plt+0x12790>
   13cd4:	add	r2, r0, r0, lsl #2
   13cd8:	sub	r2, r5, r2, lsl #1
   13cdc:	add	r2, r2, #48	; 0x30
   13ce0:	strb	r2, [r6], #-1
   13ce4:	adds	r2, r5, #9
   13ce8:	mov	r5, r0
   13cec:	adc	r3, r4, #0
   13cf0:	rsbs	r2, r2, #18
   13cf4:	mov	r4, r1
   13cf8:	rscs	r2, r3, #0
   13cfc:	bcc	13cc0 <__assert_fail@plt+0x2550>
   13d00:	add	r6, r6, #1
   13d04:	b	13d50 <__assert_fail@plt+0x25e0>
   13d08:	mov	r0, r5
   13d0c:	mov	r1, r4
   13d10:	mov	r2, #10
   13d14:	mov	r3, #0
   13d18:	bl	23f00 <__assert_fail@plt+0x12790>
   13d1c:	add	r2, r0, r0, lsl #2
   13d20:	rsb	r2, r5, r2, lsl #1
   13d24:	add	r2, r2, #48	; 0x30
   13d28:	strb	r2, [r6], #-1
   13d2c:	adds	r2, r5, #9
   13d30:	mov	r5, r0
   13d34:	adc	r3, r4, #0
   13d38:	rsbs	r2, r2, #18
   13d3c:	mov	r4, r1
   13d40:	rscs	r2, r3, #0
   13d44:	bcc	13d08 <__assert_fail@plt+0x2598>
   13d48:	mov	r0, #45	; 0x2d
   13d4c:	strb	r0, [r6]
   13d50:	mov	r0, r6
   13d54:	pop	{r4, r5, r6, sl, fp, pc}
   13d58:	push	{r4, r5, fp, lr}
   13d5c:	add	fp, sp, #8
   13d60:	cmp	r0, #0
   13d64:	beq	13df8 <__assert_fail@plt+0x2688>
   13d68:	mov	r1, #47	; 0x2f
   13d6c:	mov	r4, r0
   13d70:	bl	116f8 <strrchr@plt>
   13d74:	cmp	r0, #0
   13d78:	mov	r5, r4
   13d7c:	addne	r5, r0, #1
   13d80:	sub	r0, r5, r4
   13d84:	cmp	r0, #7
   13d88:	blt	13ddc <__assert_fail@plt+0x266c>
   13d8c:	movw	r1, #19986	; 0x4e12
   13d90:	sub	r0, r5, #7
   13d94:	mov	r2, #7
   13d98:	movt	r1, #2
   13d9c:	bl	11740 <strncmp@plt>
   13da0:	cmp	r0, #0
   13da4:	bne	13ddc <__assert_fail@plt+0x266c>
   13da8:	movw	r1, #19994	; 0x4e1a
   13dac:	mov	r0, r5
   13db0:	mov	r2, #3
   13db4:	movt	r1, #2
   13db8:	bl	11740 <strncmp@plt>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13dcc <__assert_fail@plt+0x265c>
   13dc4:	mov	r4, r5
   13dc8:	b	13ddc <__assert_fail@plt+0x266c>
   13dcc:	movw	r0, #25000	; 0x61a8
   13dd0:	add	r4, r5, #3
   13dd4:	movt	r0, #3
   13dd8:	str	r4, [r0]
   13ddc:	movw	r0, #25004	; 0x61ac
   13de0:	movt	r0, #3
   13de4:	str	r4, [r0]
   13de8:	movw	r0, #25276	; 0x62bc
   13dec:	movt	r0, #3
   13df0:	str	r4, [r0]
   13df4:	pop	{r4, r5, fp, pc}
   13df8:	movw	r0, #25016	; 0x61b8
   13dfc:	movt	r0, #3
   13e00:	ldr	r1, [r0]
   13e04:	movw	r0, #19930	; 0x4dda
   13e08:	movt	r0, #2
   13e0c:	bl	11734 <fputs@plt>
   13e10:	bl	1174c <abort@plt>
   13e14:	push	{r4, r5, r6, sl, fp, lr}
   13e18:	add	fp, sp, #16
   13e1c:	mov	r4, r0
   13e20:	movw	r0, #25280	; 0x62c0
   13e24:	movt	r0, #3
   13e28:	cmp	r4, #0
   13e2c:	moveq	r4, r0
   13e30:	bl	1162c <__errno_location@plt>
   13e34:	ldr	r6, [r0]
   13e38:	mov	r5, r0
   13e3c:	mov	r0, r4
   13e40:	mov	r1, #48	; 0x30
   13e44:	bl	22a44 <__assert_fail@plt+0x112d4>
   13e48:	str	r6, [r5]
   13e4c:	pop	{r4, r5, r6, sl, fp, pc}
   13e50:	movw	r1, #25280	; 0x62c0
   13e54:	cmp	r0, #0
   13e58:	movt	r1, #3
   13e5c:	movne	r1, r0
   13e60:	ldr	r0, [r1]
   13e64:	bx	lr
   13e68:	movw	r2, #25280	; 0x62c0
   13e6c:	cmp	r0, #0
   13e70:	movt	r2, #3
   13e74:	movne	r2, r0
   13e78:	str	r1, [r2]
   13e7c:	bx	lr
   13e80:	movw	r3, #25280	; 0x62c0
   13e84:	cmp	r0, #0
   13e88:	and	r2, r2, #1
   13e8c:	movt	r3, #3
   13e90:	movne	r3, r0
   13e94:	ubfx	r0, r1, #5, #3
   13e98:	and	r1, r1, #31
   13e9c:	add	ip, r3, r0, lsl #2
   13ea0:	mov	r0, #1
   13ea4:	ldr	r3, [ip, #8]
   13ea8:	and	r0, r0, r3, lsr r1
   13eac:	eor	r2, r0, r2
   13eb0:	eor	r1, r3, r2, lsl r1
   13eb4:	str	r1, [ip, #8]
   13eb8:	bx	lr
   13ebc:	movw	r2, #25280	; 0x62c0
   13ec0:	cmp	r0, #0
   13ec4:	movt	r2, #3
   13ec8:	movne	r2, r0
   13ecc:	ldr	r0, [r2, #4]
   13ed0:	str	r1, [r2, #4]
   13ed4:	bx	lr
   13ed8:	push	{fp, lr}
   13edc:	mov	fp, sp
   13ee0:	movw	r3, #25280	; 0x62c0
   13ee4:	cmp	r0, #0
   13ee8:	movt	r3, #3
   13eec:	movne	r3, r0
   13ef0:	cmp	r1, #0
   13ef4:	mov	r0, #10
   13ef8:	cmpne	r2, #0
   13efc:	str	r0, [r3]
   13f00:	bne	13f08 <__assert_fail@plt+0x2798>
   13f04:	bl	1174c <abort@plt>
   13f08:	str	r1, [r3, #40]	; 0x28
   13f0c:	str	r2, [r3, #44]	; 0x2c
   13f10:	pop	{fp, pc}
   13f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f18:	add	fp, sp, #28
   13f1c:	sub	sp, sp, #20
   13f20:	mov	r7, r0
   13f24:	ldr	r0, [fp, #8]
   13f28:	movw	r5, #25280	; 0x62c0
   13f2c:	mov	r8, r3
   13f30:	mov	r9, r2
   13f34:	mov	sl, r1
   13f38:	movt	r5, #3
   13f3c:	cmp	r0, #0
   13f40:	movne	r5, r0
   13f44:	bl	1162c <__errno_location@plt>
   13f48:	ldr	r2, [r5, #40]	; 0x28
   13f4c:	ldr	r3, [r5, #44]	; 0x2c
   13f50:	mov	r4, r0
   13f54:	ldm	r5, {r0, r1}
   13f58:	add	r5, r5, #8
   13f5c:	ldr	r6, [r4]
   13f60:	stm	sp, {r0, r1, r5}
   13f64:	mov	r0, r7
   13f68:	mov	r1, sl
   13f6c:	str	r2, [sp, #12]
   13f70:	str	r3, [sp, #16]
   13f74:	mov	r2, r9
   13f78:	mov	r3, r8
   13f7c:	bl	13f8c <__assert_fail@plt+0x281c>
   13f80:	str	r6, [r4]
   13f84:	sub	sp, fp, #28
   13f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f90:	add	fp, sp, #28
   13f94:	sub	sp, sp, #156	; 0x9c
   13f98:	mov	r5, r0
   13f9c:	add	r0, r2, #1
   13fa0:	mov	r6, r1
   13fa4:	mov	sl, r3
   13fa8:	str	r2, [fp, #-80]	; 0xffffffb0
   13fac:	str	r0, [sp, #72]	; 0x48
   13fb0:	ldr	r0, [fp, #12]
   13fb4:	and	r1, r0, #1
   13fb8:	str	r1, [sp, #32]
   13fbc:	and	r1, r0, #4
   13fc0:	str	r1, [sp, #28]
   13fc4:	ubfx	r9, r0, #1, #1
   13fc8:	bl	11554 <__ctype_get_mb_cur_max@plt>
   13fcc:	str	r0, [sp, #40]	; 0x28
   13fd0:	ldr	r0, [fp, #24]
   13fd4:	ldr	r7, [fp, #8]
   13fd8:	mov	r1, #0
   13fdc:	mov	lr, #0
   13fe0:	str	r5, [fp, #-84]	; 0xffffffac
   13fe4:	str	r1, [sp, #60]	; 0x3c
   13fe8:	mov	r1, #1
   13fec:	str	r1, [fp, #-48]	; 0xffffffd0
   13ff0:	str	r0, [sp, #80]	; 0x50
   13ff4:	ldr	r0, [fp, #20]
   13ff8:	str	r0, [sp, #76]	; 0x4c
   13ffc:	mov	r0, #0
   14000:	str	r0, [sp, #56]	; 0x38
   14004:	mov	r0, #0
   14008:	str	r0, [fp, #-88]	; 0xffffffa8
   1400c:	mov	r0, #0
   14010:	str	r0, [fp, #-72]	; 0xffffffb8
   14014:	mov	r0, #0
   14018:	cmp	r7, #10
   1401c:	bhi	14ff8 <__assert_fail@plt+0x3888>
   14020:	add	r1, pc, #24
   14024:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14028:	mov	ip, r6
   1402c:	mov	r8, #0
   14030:	mov	r2, #1
   14034:	mov	r6, #0
   14038:	mov	r3, sl
   1403c:	ldr	pc, [r1, r7, lsl #2]
   14040:	andeq	r4, r1, ip, lsr #2
   14044:	andeq	r4, r1, r0, lsl #3
   14048:	andeq	r4, r1, r0, asr #2
   1404c:	andeq	r4, r1, r4, lsr #2
   14050:	andeq	r4, r1, r4, ror r1
   14054:	andeq	r4, r1, r8, lsr #3
   14058:	andeq	r4, r1, r0, asr r1
   1405c:	andeq	r4, r1, ip, lsr #4
   14060:	andeq	r4, r1, ip, rrx
   14064:	andeq	r4, r1, ip, rrx
   14068:	andeq	r4, r1, ip, lsr #1
   1406c:	movw	r0, #20076	; 0x4e6c
   14070:	mov	r1, r7
   14074:	mov	r6, r5
   14078:	mov	r4, ip
   1407c:	mov	r5, lr
   14080:	movt	r0, #2
   14084:	bl	1575c <__assert_fail@plt+0x3fec>
   14088:	str	r0, [sp, #76]	; 0x4c
   1408c:	movw	r0, #19046	; 0x4a66
   14090:	mov	r1, r7
   14094:	movt	r0, #2
   14098:	bl	1575c <__assert_fail@plt+0x3fec>
   1409c:	mov	lr, r5
   140a0:	mov	r5, r6
   140a4:	mov	ip, r4
   140a8:	str	r0, [sp, #80]	; 0x50
   140ac:	mov	r8, #0
   140b0:	tst	r9, #1
   140b4:	str	lr, [sp, #44]	; 0x2c
   140b8:	bne	140f0 <__assert_fail@plt+0x2980>
   140bc:	ldr	r0, [sp, #76]	; 0x4c
   140c0:	ldrb	r0, [r0]
   140c4:	cmp	r0, #0
   140c8:	beq	140f0 <__assert_fail@plt+0x2980>
   140cc:	ldr	r1, [sp, #76]	; 0x4c
   140d0:	mov	r8, #0
   140d4:	add	r1, r1, #1
   140d8:	cmp	r8, ip
   140dc:	strbcc	r0, [r5, r8]
   140e0:	ldrb	r0, [r1, r8]
   140e4:	add	r8, r8, #1
   140e8:	cmp	r0, #0
   140ec:	bne	140d8 <__assert_fail@plt+0x2968>
   140f0:	ldr	r6, [sp, #80]	; 0x50
   140f4:	mov	r4, ip
   140f8:	mov	r0, r6
   140fc:	bl	11614 <strlen@plt>
   14100:	mov	ip, r4
   14104:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14108:	ldr	lr, [sp, #44]	; 0x2c
   1410c:	str	r6, [fp, #-88]	; 0xffffffa8
   14110:	str	r0, [fp, #-72]	; 0xffffffb8
   14114:	mov	r2, #1
   14118:	mov	r6, r9
   1411c:	mov	r3, sl
   14120:	b	1422c <__assert_fail@plt+0x2abc>
   14124:	mov	r0, #1
   14128:	b	14180 <__assert_fail@plt+0x2a10>
   1412c:	mov	r7, #0
   14130:	mov	r8, #0
   14134:	mov	r2, r0
   14138:	mov	r6, #0
   1413c:	b	1422c <__assert_fail@plt+0x2abc>
   14140:	tst	r9, #1
   14144:	bne	14180 <__assert_fail@plt+0x2a10>
   14148:	mov	r2, r0
   1414c:	b	141d8 <__assert_fail@plt+0x2a68>
   14150:	mov	r0, #1
   14154:	mov	r8, #0
   14158:	mov	r7, #5
   1415c:	mov	r2, #1
   14160:	str	r0, [fp, #-72]	; 0xffffffb8
   14164:	movw	r0, #20074	; 0x4e6a
   14168:	movt	r0, #2
   1416c:	str	r0, [fp, #-88]	; 0xffffffa8
   14170:	b	141a0 <__assert_fail@plt+0x2a30>
   14174:	mov	r2, #1
   14178:	tst	r9, #1
   1417c:	beq	141d8 <__assert_fail@plt+0x2a68>
   14180:	mov	r1, #1
   14184:	mov	r8, #0
   14188:	mov	r7, #2
   1418c:	mov	r2, r0
   14190:	str	r1, [fp, #-72]	; 0xffffffb8
   14194:	movw	r1, #19046	; 0x4a66
   14198:	movt	r1, #2
   1419c:	str	r1, [fp, #-88]	; 0xffffffa8
   141a0:	mov	r6, #1
   141a4:	b	1422c <__assert_fail@plt+0x2abc>
   141a8:	tst	r9, #1
   141ac:	beq	141fc <__assert_fail@plt+0x2a8c>
   141b0:	mov	r0, #1
   141b4:	mov	r8, #0
   141b8:	mov	r2, #1
   141bc:	mov	r6, #1
   141c0:	mov	r7, #5
   141c4:	str	r0, [fp, #-72]	; 0xffffffb8
   141c8:	movw	r0, #20074	; 0x4e6a
   141cc:	movt	r0, #2
   141d0:	str	r0, [fp, #-88]	; 0xffffffa8
   141d4:	b	1422c <__assert_fail@plt+0x2abc>
   141d8:	cmp	ip, #0
   141dc:	mov	r8, #1
   141e0:	mov	r6, #0
   141e4:	mov	r7, #2
   141e8:	movne	r0, #39	; 0x27
   141ec:	strbne	r0, [r5]
   141f0:	movw	r0, #19046	; 0x4a66
   141f4:	movt	r0, #2
   141f8:	b	14220 <__assert_fail@plt+0x2ab0>
   141fc:	cmp	ip, #0
   14200:	mov	r8, #1
   14204:	mov	r2, #1
   14208:	mov	r7, #5
   1420c:	mov	r6, #0
   14210:	movne	r0, #34	; 0x22
   14214:	strbne	r0, [r5]
   14218:	movw	r0, #20074	; 0x4e6a
   1421c:	movt	r0, #2
   14220:	str	r0, [fp, #-88]	; 0xffffffa8
   14224:	mov	r0, #1
   14228:	str	r0, [fp, #-72]	; 0xffffffb8
   1422c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14230:	str	r7, [fp, #-68]	; 0xffffffbc
   14234:	str	r6, [fp, #-76]	; 0xffffffb4
   14238:	str	r2, [sp, #84]	; 0x54
   1423c:	cmp	r0, #0
   14240:	movwne	r0, #1
   14244:	and	r1, r0, r6
   14248:	and	r1, r2, r1
   1424c:	str	r1, [sp, #48]	; 0x30
   14250:	sub	r1, r7, #2
   14254:	clz	r1, r1
   14258:	lsr	r1, r1, #5
   1425c:	and	r1, r1, r6
   14260:	str	r1, [sp, #64]	; 0x40
   14264:	subs	r1, r7, #2
   14268:	eor	r7, r6, #1
   1426c:	movwne	r1, #1
   14270:	str	r7, [sp, #92]	; 0x5c
   14274:	orr	r7, r1, r7
   14278:	and	r1, r1, r2
   1427c:	and	r0, r0, r1
   14280:	str	r7, [sp, #68]	; 0x44
   14284:	mov	r7, #0
   14288:	str	r0, [fp, #-60]	; 0xffffffc4
   1428c:	orr	r0, r1, r6
   14290:	ldr	r1, [fp, #16]
   14294:	eor	r0, r0, #1
   14298:	clz	r1, r1
   1429c:	lsr	r1, r1, #5
   142a0:	orr	r0, r1, r0
   142a4:	str	r0, [fp, #-64]	; 0xffffffc0
   142a8:	eor	r0, r2, #1
   142ac:	str	r0, [sp, #52]	; 0x34
   142b0:	cmn	r3, #1
   142b4:	beq	142c4 <__assert_fail@plt+0x2b54>
   142b8:	cmp	r7, r3
   142bc:	bne	142d0 <__assert_fail@plt+0x2b60>
   142c0:	b	14e2c <__assert_fail@plt+0x36bc>
   142c4:	ldrb	r0, [r4, r7]
   142c8:	cmp	r0, #0
   142cc:	beq	14e34 <__assert_fail@plt+0x36c4>
   142d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   142d4:	cmp	r0, #0
   142d8:	beq	14320 <__assert_fail@plt+0x2bb0>
   142dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   142e0:	add	r5, r7, r0
   142e4:	cmp	r0, #2
   142e8:	bcc	14334 <__assert_fail@plt+0x2bc4>
   142ec:	mov	r0, #0
   142f0:	cmn	r3, #1
   142f4:	str	r0, [fp, #-56]	; 0xffffffc8
   142f8:	bne	1433c <__assert_fail@plt+0x2bcc>
   142fc:	mov	r0, r4
   14300:	mov	r4, ip
   14304:	mov	r6, lr
   14308:	bl	11614 <strlen@plt>
   1430c:	mov	ip, r4
   14310:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14314:	mov	lr, r6
   14318:	mov	r3, r0
   1431c:	b	1433c <__assert_fail@plt+0x2bcc>
   14320:	mov	r0, #0
   14324:	mov	sl, r3
   14328:	str	r0, [fp, #-56]	; 0xffffffc8
   1432c:	mov	r0, #0
   14330:	b	143a8 <__assert_fail@plt+0x2c38>
   14334:	mov	r0, #0
   14338:	str	r0, [fp, #-56]	; 0xffffffc8
   1433c:	cmp	r5, r3
   14340:	bls	14354 <__assert_fail@plt+0x2be4>
   14344:	ldr	r5, [fp, #-84]	; 0xffffffac
   14348:	mov	r0, #0
   1434c:	mov	sl, r3
   14350:	b	143a8 <__assert_fail@plt+0x2c38>
   14354:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14358:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1435c:	add	r0, r4, r7
   14360:	mov	r5, lr
   14364:	mov	r6, ip
   14368:	mov	sl, r3
   1436c:	bl	11608 <bcmp@plt>
   14370:	ldr	r2, [sp, #92]	; 0x5c
   14374:	cmp	r0, #0
   14378:	ldr	r3, [fp, #-84]	; 0xffffffac
   1437c:	mov	r1, r0
   14380:	movwne	r1, #1
   14384:	orr	r1, r1, r2
   14388:	tst	r1, #1
   1438c:	beq	14eb8 <__assert_fail@plt+0x3748>
   14390:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14394:	clz	r0, r0
   14398:	mov	lr, r5
   1439c:	mov	ip, r6
   143a0:	mov	r5, r3
   143a4:	lsr	r0, r0, #5
   143a8:	str	r0, [fp, #-52]	; 0xffffffcc
   143ac:	ldrb	r6, [r4, r7]
   143b0:	cmp	r6, #126	; 0x7e
   143b4:	bhi	148dc <__assert_fail@plt+0x316c>
   143b8:	add	r3, pc, #16
   143bc:	mov	r9, #1
   143c0:	mov	r2, #110	; 0x6e
   143c4:	mov	r0, #97	; 0x61
   143c8:	mov	r1, #0
   143cc:	ldr	pc, [r3, r6, lsl #2]
   143d0:	andeq	r4, r1, r0, asr #14
   143d4:	ldrdeq	r4, [r1], -ip
   143d8:	ldrdeq	r4, [r1], -ip
   143dc:	ldrdeq	r4, [r1], -ip
   143e0:	ldrdeq	r4, [r1], -ip
   143e4:	ldrdeq	r4, [r1], -ip
   143e8:	ldrdeq	r4, [r1], -ip
   143ec:	andeq	r4, r1, ip, asr r9
   143f0:	andeq	r4, r1, r0, lsr #14
   143f4:	andeq	r4, r1, r8, lsl r7
   143f8:	andeq	r4, r1, ip, lsr #14
   143fc:	andeq	r4, r1, r4, asr #16
   14400:	andeq	r4, r1, r0, lsl r7
   14404:	andeq	r4, r1, r8, lsr #14
   14408:	ldrdeq	r4, [r1], -ip
   1440c:	ldrdeq	r4, [r1], -ip
   14410:	ldrdeq	r4, [r1], -ip
   14414:	ldrdeq	r4, [r1], -ip
   14418:	ldrdeq	r4, [r1], -ip
   1441c:	ldrdeq	r4, [r1], -ip
   14420:	ldrdeq	r4, [r1], -ip
   14424:	ldrdeq	r4, [r1], -ip
   14428:	ldrdeq	r4, [r1], -ip
   1442c:	ldrdeq	r4, [r1], -ip
   14430:	ldrdeq	r4, [r1], -ip
   14434:	ldrdeq	r4, [r1], -ip
   14438:	ldrdeq	r4, [r1], -ip
   1443c:	ldrdeq	r4, [r1], -ip
   14440:	ldrdeq	r4, [r1], -ip
   14444:	ldrdeq	r4, [r1], -ip
   14448:	ldrdeq	r4, [r1], -ip
   1444c:	ldrdeq	r4, [r1], -ip
   14450:	andeq	r4, r1, r0, asr #13
   14454:	andeq	r4, r1, r4, asr #13
   14458:	andeq	r4, r1, r4, asr #13
   1445c:	andeq	r4, r1, r8, lsr #13
   14460:	andeq	r4, r1, r4, asr #13
   14464:	andeq	r4, r1, ip, asr #11
   14468:	andeq	r4, r1, r4, asr #13
   1446c:	andeq	r4, r1, ip, asr #16
   14470:	andeq	r4, r1, r4, asr #13
   14474:	andeq	r4, r1, r4, asr #13
   14478:	andeq	r4, r1, r4, asr #13
   1447c:	andeq	r4, r1, ip, asr #11
   14480:	andeq	r4, r1, ip, asr #11
   14484:	andeq	r4, r1, ip, asr #11
   14488:	andeq	r4, r1, ip, asr #11
   1448c:	andeq	r4, r1, ip, asr #11
   14490:	andeq	r4, r1, ip, asr #11
   14494:	andeq	r4, r1, ip, asr #11
   14498:	andeq	r4, r1, ip, asr #11
   1449c:	andeq	r4, r1, ip, asr #11
   144a0:	andeq	r4, r1, ip, asr #11
   144a4:	andeq	r4, r1, ip, asr #11
   144a8:	andeq	r4, r1, ip, asr #11
   144ac:	andeq	r4, r1, ip, asr #11
   144b0:	andeq	r4, r1, ip, asr #11
   144b4:	andeq	r4, r1, ip, asr #11
   144b8:	andeq	r4, r1, ip, asr #11
   144bc:	andeq	r4, r1, r4, asr #13
   144c0:	andeq	r4, r1, r4, asr #13
   144c4:	andeq	r4, r1, r4, asr #13
   144c8:	andeq	r4, r1, r4, asr #13
   144cc:	andeq	r4, r1, r8, lsl r8
   144d0:	ldrdeq	r4, [r1], -ip
   144d4:	andeq	r4, r1, ip, asr #11
   144d8:	andeq	r4, r1, ip, asr #11
   144dc:	andeq	r4, r1, ip, asr #11
   144e0:	andeq	r4, r1, ip, asr #11
   144e4:	andeq	r4, r1, ip, asr #11
   144e8:	andeq	r4, r1, ip, asr #11
   144ec:	andeq	r4, r1, ip, asr #11
   144f0:	andeq	r4, r1, ip, asr #11
   144f4:	andeq	r4, r1, ip, asr #11
   144f8:	andeq	r4, r1, ip, asr #11
   144fc:	andeq	r4, r1, ip, asr #11
   14500:	andeq	r4, r1, ip, asr #11
   14504:	andeq	r4, r1, ip, asr #11
   14508:	andeq	r4, r1, ip, asr #11
   1450c:	andeq	r4, r1, ip, asr #11
   14510:	andeq	r4, r1, ip, asr #11
   14514:	andeq	r4, r1, ip, asr #11
   14518:	andeq	r4, r1, ip, asr #11
   1451c:	andeq	r4, r1, ip, asr #11
   14520:	andeq	r4, r1, ip, asr #11
   14524:	andeq	r4, r1, ip, asr #11
   14528:	andeq	r4, r1, ip, asr #11
   1452c:	andeq	r4, r1, ip, asr #11
   14530:	andeq	r4, r1, ip, asr #11
   14534:	andeq	r4, r1, ip, asr #11
   14538:	andeq	r4, r1, ip, asr #11
   1453c:	andeq	r4, r1, r4, asr #13
   14540:	andeq	r4, r1, ip, ror #13
   14544:	andeq	r4, r1, ip, asr #11
   14548:	andeq	r4, r1, r4, asr #13
   1454c:	andeq	r4, r1, ip, asr #11
   14550:	andeq	r4, r1, r4, asr #13
   14554:	andeq	r4, r1, ip, asr #11
   14558:	andeq	r4, r1, ip, asr #11
   1455c:	andeq	r4, r1, ip, asr #11
   14560:	andeq	r4, r1, ip, asr #11
   14564:	andeq	r4, r1, ip, asr #11
   14568:	andeq	r4, r1, ip, asr #11
   1456c:	andeq	r4, r1, ip, asr #11
   14570:	andeq	r4, r1, ip, asr #11
   14574:	andeq	r4, r1, ip, asr #11
   14578:	andeq	r4, r1, ip, asr #11
   1457c:	andeq	r4, r1, ip, asr #11
   14580:	andeq	r4, r1, ip, asr #11
   14584:	andeq	r4, r1, ip, asr #11
   14588:	andeq	r4, r1, ip, asr #11
   1458c:	andeq	r4, r1, ip, asr #11
   14590:	andeq	r4, r1, ip, asr #11
   14594:	andeq	r4, r1, ip, asr #11
   14598:	andeq	r4, r1, ip, asr #11
   1459c:	andeq	r4, r1, ip, asr #11
   145a0:	andeq	r4, r1, ip, asr #11
   145a4:	andeq	r4, r1, ip, asr #11
   145a8:	andeq	r4, r1, ip, asr #11
   145ac:	andeq	r4, r1, ip, asr #11
   145b0:	andeq	r4, r1, ip, asr #11
   145b4:	andeq	r4, r1, ip, asr #11
   145b8:	andeq	r4, r1, ip, asr #11
   145bc:	andeq	r4, r1, r0, lsl #13
   145c0:	andeq	r4, r1, r4, asr #13
   145c4:	andeq	r4, r1, r0, lsl #13
   145c8:	andeq	r4, r1, r8, lsr #13
   145cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   145d0:	tst	r0, #1
   145d4:	bne	14600 <__assert_fail@plt+0x2e90>
   145d8:	ldr	r1, [fp, #16]
   145dc:	ubfx	r0, r6, #5, #3
   145e0:	mov	r2, #1
   145e4:	ldr	r0, [r1, r0, lsl #2]
   145e8:	and	r1, r6, #31
   145ec:	tst	r0, r2, lsl r1
   145f0:	beq	14600 <__assert_fail@plt+0x2e90>
   145f4:	mov	r0, r6
   145f8:	mov	r1, r9
   145fc:	b	14614 <__assert_fail@plt+0x2ea4>
   14600:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14604:	mov	r1, r9
   14608:	cmp	r0, #0
   1460c:	mov	r0, r6
   14610:	beq	14d60 <__assert_fail@plt+0x35f0>
   14614:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14618:	tst	r2, #1
   1461c:	bne	14efc <__assert_fail@plt+0x378c>
   14620:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14624:	subs	r2, r2, #2
   14628:	movwne	r2, #1
   1462c:	orr	r2, r2, lr
   14630:	tst	r2, #1
   14634:	bne	1466c <__assert_fail@plt+0x2efc>
   14638:	cmp	r8, ip
   1463c:	mov	lr, #1
   14640:	movcc	r2, #39	; 0x27
   14644:	strbcc	r2, [r5, r8]
   14648:	add	r2, r8, #1
   1464c:	cmp	r2, ip
   14650:	movcc	r3, #36	; 0x24
   14654:	strbcc	r3, [r5, r2]
   14658:	add	r2, r8, #2
   1465c:	add	r8, r8, #3
   14660:	cmp	r2, ip
   14664:	movcc	r3, #39	; 0x27
   14668:	strbcc	r3, [r5, r2]
   1466c:	cmp	r8, ip
   14670:	movcc	r2, #92	; 0x5c
   14674:	strbcc	r2, [r5, r8]
   14678:	add	r8, r8, #1
   1467c:	b	14da0 <__assert_fail@plt+0x3630>
   14680:	cmp	sl, #1
   14684:	beq	146a8 <__assert_fail@plt+0x2f38>
   14688:	mov	r9, #0
   1468c:	cmn	sl, #1
   14690:	bne	146b4 <__assert_fail@plt+0x2f44>
   14694:	ldrb	r0, [r4, #1]
   14698:	cmp	r0, #0
   1469c:	beq	146a8 <__assert_fail@plt+0x2f38>
   146a0:	mvn	sl, #0
   146a4:	b	146b4 <__assert_fail@plt+0x2f44>
   146a8:	mov	r9, #0
   146ac:	cmp	r7, #0
   146b0:	beq	146c0 <__assert_fail@plt+0x2f50>
   146b4:	mov	r0, #0
   146b8:	str	r0, [fp, #-56]	; 0xffffffc8
   146bc:	b	145cc <__assert_fail@plt+0x2e5c>
   146c0:	mov	r1, #1
   146c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   146c8:	cmp	r0, #2
   146cc:	bne	146e4 <__assert_fail@plt+0x2f74>
   146d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   146d4:	mov	r9, r1
   146d8:	tst	r0, #1
   146dc:	beq	145cc <__assert_fail@plt+0x2e5c>
   146e0:	b	14efc <__assert_fail@plt+0x378c>
   146e4:	mov	r9, r1
   146e8:	b	145cc <__assert_fail@plt+0x2e5c>
   146ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   146f0:	cmp	r0, #2
   146f4:	bne	14938 <__assert_fail@plt+0x31c8>
   146f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   146fc:	tst	r0, #1
   14700:	bne	14efc <__assert_fail@plt+0x378c>
   14704:	mov	r0, #0
   14708:	str	r0, [fp, #-56]	; 0xffffffc8
   1470c:	b	14950 <__assert_fail@plt+0x31e0>
   14710:	mov	r0, #102	; 0x66
   14714:	b	1495c <__assert_fail@plt+0x31ec>
   14718:	mov	r2, #116	; 0x74
   1471c:	b	1472c <__assert_fail@plt+0x2fbc>
   14720:	mov	r0, #98	; 0x62
   14724:	b	1495c <__assert_fail@plt+0x31ec>
   14728:	mov	r2, #114	; 0x72
   1472c:	ldr	r0, [sp, #68]	; 0x44
   14730:	tst	r0, #1
   14734:	mov	r0, r2
   14738:	bne	1495c <__assert_fail@plt+0x31ec>
   1473c:	b	14efc <__assert_fail@plt+0x378c>
   14740:	ldr	r0, [sp, #84]	; 0x54
   14744:	tst	r0, #1
   14748:	beq	1497c <__assert_fail@plt+0x320c>
   1474c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14750:	tst	r0, #1
   14754:	bne	14fe8 <__assert_fail@plt+0x3878>
   14758:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1475c:	mov	r2, sl
   14760:	subs	r0, r0, #2
   14764:	movwne	r0, #1
   14768:	orr	r0, r0, lr
   1476c:	tst	r0, #1
   14770:	bne	147a8 <__assert_fail@plt+0x3038>
   14774:	cmp	r8, ip
   14778:	mov	lr, #1
   1477c:	movcc	r0, #39	; 0x27
   14780:	strbcc	r0, [r5, r8]
   14784:	add	r0, r8, #1
   14788:	cmp	r0, ip
   1478c:	movcc	r1, #36	; 0x24
   14790:	strbcc	r1, [r5, r0]
   14794:	add	r0, r8, #2
   14798:	add	r8, r8, #3
   1479c:	cmp	r0, ip
   147a0:	movcc	r1, #39	; 0x27
   147a4:	strbcc	r1, [r5, r0]
   147a8:	mov	r1, #1
   147ac:	cmp	r8, ip
   147b0:	mov	r9, #0
   147b4:	mov	r6, #48	; 0x30
   147b8:	str	r1, [fp, #-56]	; 0xffffffc8
   147bc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   147c0:	movcc	r0, #92	; 0x5c
   147c4:	strbcc	r0, [r5, r8]
   147c8:	add	r0, r8, #1
   147cc:	cmp	r1, #2
   147d0:	beq	14ad8 <__assert_fail@plt+0x3368>
   147d4:	add	r1, r7, #1
   147d8:	cmp	r1, r2
   147dc:	bcs	14ad8 <__assert_fail@plt+0x3368>
   147e0:	ldrb	r1, [r4, r1]
   147e4:	sub	r1, r1, #48	; 0x30
   147e8:	uxtb	r1, r1
   147ec:	cmp	r1, #9
   147f0:	bhi	14ad8 <__assert_fail@plt+0x3368>
   147f4:	cmp	r0, ip
   147f8:	movcc	r1, #48	; 0x30
   147fc:	strbcc	r1, [r5, r0]
   14800:	add	r0, r8, #2
   14804:	add	r8, r8, #3
   14808:	cmp	r0, ip
   1480c:	movcc	r1, #48	; 0x30
   14810:	strbcc	r1, [r5, r0]
   14814:	b	145cc <__assert_fail@plt+0x2e5c>
   14818:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1481c:	mov	r6, #63	; 0x3f
   14820:	cmp	r0, #5
   14824:	beq	14ae0 <__assert_fail@plt+0x3370>
   14828:	mov	r1, #0
   1482c:	cmp	r0, #2
   14830:	str	r1, [fp, #-56]	; 0xffffffc8
   14834:	bne	14b94 <__assert_fail@plt+0x3424>
   14838:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1483c:	mov	r9, #0
   14840:	b	146d8 <__assert_fail@plt+0x2f68>
   14844:	mov	r0, #118	; 0x76
   14848:	b	1495c <__assert_fail@plt+0x31ec>
   1484c:	mov	r0, #1
   14850:	mov	r6, #39	; 0x27
   14854:	str	r0, [sp, #60]	; 0x3c
   14858:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1485c:	cmp	r0, #2
   14860:	bne	148d4 <__assert_fail@plt+0x3164>
   14864:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14868:	tst	r0, #1
   1486c:	bne	14efc <__assert_fail@plt+0x378c>
   14870:	ldr	r2, [sp, #56]	; 0x38
   14874:	clz	r1, ip
   14878:	mov	lr, #0
   1487c:	lsr	r1, r1, #5
   14880:	cmp	r2, #0
   14884:	mov	r0, r2
   14888:	movwne	r0, #1
   1488c:	orrs	r0, r0, r1
   14890:	moveq	r2, ip
   14894:	moveq	ip, r0
   14898:	cmp	r8, ip
   1489c:	str	r2, [sp, #56]	; 0x38
   148a0:	movcc	r0, #39	; 0x27
   148a4:	strbcc	r0, [r5, r8]
   148a8:	add	r0, r8, #1
   148ac:	cmp	r0, ip
   148b0:	movcc	r1, #92	; 0x5c
   148b4:	strbcc	r1, [r5, r0]
   148b8:	add	r0, r8, #2
   148bc:	add	r8, r8, #3
   148c0:	cmp	r0, ip
   148c4:	movcc	r1, #39	; 0x27
   148c8:	strbcc	r1, [r5, r0]
   148cc:	mov	r0, #0
   148d0:	str	r0, [fp, #-56]	; 0xffffffc8
   148d4:	mov	r9, #1
   148d8:	b	145cc <__assert_fail@plt+0x2e5c>
   148dc:	ldr	r0, [sp, #40]	; 0x28
   148e0:	str	lr, [sp, #44]	; 0x2c
   148e4:	str	ip, [sp, #88]	; 0x58
   148e8:	cmp	r0, #1
   148ec:	bne	1499c <__assert_fail@plt+0x322c>
   148f0:	str	sl, [sp, #36]	; 0x24
   148f4:	bl	115f0 <__ctype_b_loc@plt>
   148f8:	ldr	r0, [r0]
   148fc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14900:	mov	r1, #1
   14904:	add	r0, r0, r6, lsl #1
   14908:	ldrb	r0, [r0, #1]
   1490c:	ubfx	r9, r0, #6, #1
   14910:	ldr	r0, [sp, #52]	; 0x34
   14914:	ldr	lr, [sp, #44]	; 0x2c
   14918:	cmp	r1, #1
   1491c:	orr	r3, r9, r0
   14920:	bhi	14b9c <__assert_fail@plt+0x342c>
   14924:	tst	r3, #1
   14928:	beq	14b9c <__assert_fail@plt+0x342c>
   1492c:	ldr	sl, [sp, #36]	; 0x24
   14930:	ldr	ip, [sp, #88]	; 0x58
   14934:	b	145cc <__assert_fail@plt+0x2e5c>
   14938:	ldr	r1, [sp, #48]	; 0x30
   1493c:	mov	r0, #0
   14940:	str	r0, [fp, #-56]	; 0xffffffc8
   14944:	mov	r0, #92	; 0x5c
   14948:	cmp	r1, #0
   1494c:	beq	1495c <__assert_fail@plt+0x31ec>
   14950:	mov	r6, #92	; 0x5c
   14954:	mov	r9, #0
   14958:	b	14d60 <__assert_fail@plt+0x35f0>
   1495c:	mov	r1, #0
   14960:	mov	r9, #0
   14964:	str	r1, [fp, #-56]	; 0xffffffc8
   14968:	ldr	r1, [sp, #84]	; 0x54
   1496c:	tst	r1, #1
   14970:	mov	r1, #0
   14974:	beq	145cc <__assert_fail@plt+0x2e5c>
   14978:	b	14614 <__assert_fail@plt+0x2ea4>
   1497c:	ldr	r0, [sp, #32]
   14980:	mov	r6, #0
   14984:	mov	r9, #0
   14988:	cmp	r0, #0
   1498c:	mov	r0, #0
   14990:	str	r0, [fp, #-56]	; 0xffffffc8
   14994:	beq	145cc <__assert_fail@plt+0x2e5c>
   14998:	b	14db8 <__assert_fail@plt+0x3648>
   1499c:	mov	r0, #0
   149a0:	cmn	sl, #1
   149a4:	sub	r3, fp, #40	; 0x28
   149a8:	str	r0, [fp, #-36]	; 0xffffffdc
   149ac:	str	r0, [fp, #-40]	; 0xffffffd8
   149b0:	bne	149c8 <__assert_fail@plt+0x3258>
   149b4:	mov	r0, r4
   149b8:	bl	11614 <strlen@plt>
   149bc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   149c0:	sub	r3, fp, #40	; 0x28
   149c4:	mov	sl, r0
   149c8:	ldr	r0, [sp, #72]	; 0x48
   149cc:	mov	r9, #1
   149d0:	mov	r1, #0
   149d4:	str	sl, [sp, #36]	; 0x24
   149d8:	add	r0, r0, r7
   149dc:	str	r0, [sp, #20]
   149e0:	add	r0, r1, r7
   149e4:	str	r1, [sp, #24]
   149e8:	add	r1, r4, r0
   149ec:	mov	r4, r0
   149f0:	sub	r2, sl, r0
   149f4:	sub	r0, fp, #44	; 0x2c
   149f8:	bl	23d60 <__assert_fail@plt+0x125f0>
   149fc:	cmp	r0, #0
   14a00:	beq	14e0c <__assert_fail@plt+0x369c>
   14a04:	cmn	r0, #1
   14a08:	beq	14dc4 <__assert_fail@plt+0x3654>
   14a0c:	ldr	r2, [sp, #36]	; 0x24
   14a10:	cmn	r0, #2
   14a14:	beq	14dcc <__assert_fail@plt+0x365c>
   14a18:	ldr	r2, [sp, #64]	; 0x40
   14a1c:	ldr	ip, [sp, #88]	; 0x58
   14a20:	ldr	r4, [sp, #84]	; 0x54
   14a24:	ldr	lr, [fp, #-48]	; 0xffffffd0
   14a28:	cmp	r0, #2
   14a2c:	mov	r1, #0
   14a30:	movwcc	r1, #1
   14a34:	eor	r2, r2, #1
   14a38:	orrs	r1, r2, r1
   14a3c:	bne	14a8c <__assert_fail@plt+0x331c>
   14a40:	ldr	r1, [sp, #24]
   14a44:	ldr	r2, [sp, #20]
   14a48:	add	r1, r2, r1
   14a4c:	sub	r2, r0, #1
   14a50:	ldrb	r3, [r1]
   14a54:	sub	r5, r3, #94	; 0x5e
   14a58:	cmp	r5, #30
   14a5c:	bhi	14a74 <__assert_fail@plt+0x3304>
   14a60:	mov	r4, #1
   14a64:	mov	sl, #1073741829	; 0x40000005
   14a68:	tst	sl, r4, lsl r5
   14a6c:	ldr	r4, [sp, #84]	; 0x54
   14a70:	bne	14ed4 <__assert_fail@plt+0x3764>
   14a74:	sub	r3, r3, #91	; 0x5b
   14a78:	cmp	r3, #2
   14a7c:	bcc	14ed4 <__assert_fail@plt+0x3764>
   14a80:	add	r1, r1, #1
   14a84:	subs	r2, r2, #1
   14a88:	bne	14a50 <__assert_fail@plt+0x32e0>
   14a8c:	ldr	r5, [sp, #24]
   14a90:	str	lr, [fp, #-48]	; 0xffffffd0
   14a94:	add	r5, r0, r5
   14a98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14a9c:	bl	11530 <iswprint@plt>
   14aa0:	cmp	r0, #0
   14aa4:	sub	r4, fp, #40	; 0x28
   14aa8:	movwne	r0, #1
   14aac:	and	r9, r9, r0
   14ab0:	mov	r0, r4
   14ab4:	bl	114b8 <mbsinit@plt>
   14ab8:	mov	r1, r5
   14abc:	mov	r3, r4
   14ac0:	ldr	sl, [sp, #36]	; 0x24
   14ac4:	ldr	r5, [fp, #-84]	; 0xffffffac
   14ac8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14acc:	cmp	r0, #0
   14ad0:	beq	149e0 <__assert_fail@plt+0x3270>
   14ad4:	b	14910 <__assert_fail@plt+0x31a0>
   14ad8:	mov	r8, r0
   14adc:	b	145cc <__assert_fail@plt+0x2e5c>
   14ae0:	mov	r0, #0
   14ae4:	str	r0, [fp, #-56]	; 0xffffffc8
   14ae8:	ldr	r0, [sp, #28]
   14aec:	cmp	r0, #0
   14af0:	beq	14b94 <__assert_fail@plt+0x3424>
   14af4:	add	r0, r7, #2
   14af8:	mov	r1, sl
   14afc:	cmp	r0, sl
   14b00:	bcs	14b94 <__assert_fail@plt+0x3424>
   14b04:	add	r1, r7, r4
   14b08:	ldrb	r1, [r1, #1]
   14b0c:	cmp	r1, #63	; 0x3f
   14b10:	bne	14b94 <__assert_fail@plt+0x3424>
   14b14:	ldrb	r9, [r4, r0]
   14b18:	sub	r2, r9, #33	; 0x21
   14b1c:	cmp	r2, #29
   14b20:	bhi	14b94 <__assert_fail@plt+0x3424>
   14b24:	mov	r1, r4
   14b28:	movw	r4, #20929	; 0x51c1
   14b2c:	mov	r3, #1
   14b30:	movt	r4, #14336	; 0x3800
   14b34:	tst	r4, r3, lsl r2
   14b38:	beq	14e20 <__assert_fail@plt+0x36b0>
   14b3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14b40:	tst	r2, #1
   14b44:	bne	14ff0 <__assert_fail@plt+0x3880>
   14b48:	cmp	r8, ip
   14b4c:	mov	r4, r1
   14b50:	mov	r7, r0
   14b54:	mov	r6, r9
   14b58:	movcc	r2, #63	; 0x3f
   14b5c:	strbcc	r2, [r5, r8]
   14b60:	add	r2, r8, #1
   14b64:	cmp	r2, ip
   14b68:	movcc	r3, #34	; 0x22
   14b6c:	strbcc	r3, [r5, r2]
   14b70:	add	r2, r8, #2
   14b74:	cmp	r2, ip
   14b78:	movcc	r3, #34	; 0x22
   14b7c:	strbcc	r3, [r5, r2]
   14b80:	add	r2, r8, #3
   14b84:	add	r8, r8, #4
   14b88:	cmp	r2, ip
   14b8c:	movcc	r3, #63	; 0x3f
   14b90:	strbcc	r3, [r5, r2]
   14b94:	mov	r9, #0
   14b98:	b	145cc <__assert_fail@plt+0x2e5c>
   14b9c:	ldr	sl, [sp, #36]	; 0x24
   14ba0:	add	r0, r1, r7
   14ba4:	mov	r2, #0
   14ba8:	str	r3, [sp, #24]
   14bac:	str	r0, [fp, #-56]	; 0xffffffc8
   14bb0:	tst	r3, #1
   14bb4:	beq	14be0 <__assert_fail@plt+0x3470>
   14bb8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14bbc:	tst	r0, #1
   14bc0:	beq	14ca8 <__assert_fail@plt+0x3538>
   14bc4:	ldr	r1, [sp, #88]	; 0x58
   14bc8:	mov	r0, r3
   14bcc:	cmp	r8, r1
   14bd0:	movcc	r1, #92	; 0x5c
   14bd4:	strbcc	r1, [r5, r8]
   14bd8:	add	r8, r8, #1
   14bdc:	b	14cac <__assert_fail@plt+0x353c>
   14be0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14be4:	tst	r1, #1
   14be8:	bne	14ef8 <__assert_fail@plt+0x3788>
   14bec:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14bf0:	subs	r2, r1, #2
   14bf4:	movwne	r2, #1
   14bf8:	orr	r2, r2, lr
   14bfc:	tst	r2, #1
   14c00:	bne	14c44 <__assert_fail@plt+0x34d4>
   14c04:	ldr	r1, [sp, #88]	; 0x58
   14c08:	add	r2, r8, #1
   14c0c:	mov	lr, #1
   14c10:	cmp	r8, r1
   14c14:	movcc	r1, #39	; 0x27
   14c18:	strbcc	r1, [r5, r8]
   14c1c:	ldr	r1, [sp, #88]	; 0x58
   14c20:	cmp	r2, r1
   14c24:	movcc	r1, #36	; 0x24
   14c28:	strbcc	r1, [r5, r2]
   14c2c:	ldr	r1, [sp, #88]	; 0x58
   14c30:	add	r2, r8, #2
   14c34:	add	r8, r8, #3
   14c38:	cmp	r2, r1
   14c3c:	movcc	r1, #39	; 0x27
   14c40:	strbcc	r1, [r5, r2]
   14c44:	ldr	r1, [sp, #88]	; 0x58
   14c48:	add	r2, r8, #1
   14c4c:	mov	r0, r3
   14c50:	cmp	r8, r1
   14c54:	movcc	r1, #92	; 0x5c
   14c58:	strbcc	r1, [r5, r8]
   14c5c:	ldr	r1, [sp, #88]	; 0x58
   14c60:	cmp	r2, r1
   14c64:	bcs	14c78 <__assert_fail@plt+0x3508>
   14c68:	uxtb	r3, r6
   14c6c:	mov	r1, #48	; 0x30
   14c70:	orr	r3, r1, r3, lsr #6
   14c74:	strb	r3, [r5, r2]
   14c78:	ldr	r1, [sp, #88]	; 0x58
   14c7c:	add	r2, r8, #2
   14c80:	add	r8, r8, #3
   14c84:	cmp	r2, r1
   14c88:	lsrcc	r3, r6, #3
   14c8c:	movcc	r1, #6
   14c90:	bficc	r3, r1, #3, #29
   14c94:	mov	r1, #6
   14c98:	bfi	r6, r1, #3, #29
   14c9c:	strbcc	r3, [r5, r2]
   14ca0:	mov	r2, #1
   14ca4:	b	14cb4 <__assert_fail@plt+0x3544>
   14ca8:	mov	r0, r3
   14cac:	mov	r1, #0
   14cb0:	str	r1, [fp, #-52]	; 0xffffffcc
   14cb4:	mov	ip, r2
   14cb8:	and	r1, r2, #1
   14cbc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14cc0:	add	r3, r7, #1
   14cc4:	cmp	r2, r3
   14cc8:	bls	14d50 <__assert_fail@plt+0x35e0>
   14ccc:	cmp	r1, #0
   14cd0:	mvn	r5, lr
   14cd4:	movwne	r1, #1
   14cd8:	orr	r5, r5, r1
   14cdc:	tst	r5, #1
   14ce0:	bne	14d24 <__assert_fail@plt+0x35b4>
   14ce4:	ldr	r1, [sp, #88]	; 0x58
   14ce8:	ldr	r5, [fp, #-84]	; 0xffffffac
   14cec:	mov	r2, r4
   14cf0:	ldr	r4, [sp, #88]	; 0x58
   14cf4:	ldr	r0, [sp, #24]
   14cf8:	mov	lr, #0
   14cfc:	cmp	r8, r1
   14d00:	movcc	r1, #39	; 0x27
   14d04:	strbcc	r1, [r5, r8]
   14d08:	add	r1, r8, #1
   14d0c:	add	r8, r8, #2
   14d10:	cmp	r1, r4
   14d14:	movcc	r4, #39	; 0x27
   14d18:	strbcc	r4, [r5, r1]
   14d1c:	mov	r4, r2
   14d20:	b	14d28 <__assert_fail@plt+0x35b8>
   14d24:	ldr	r5, [fp, #-84]	; 0xffffffac
   14d28:	ldr	r1, [sp, #88]	; 0x58
   14d2c:	mov	r2, ip
   14d30:	cmp	r8, r1
   14d34:	ldr	r1, [sp, #72]	; 0x48
   14d38:	strbcc	r6, [r5, r8]
   14d3c:	add	r8, r8, #1
   14d40:	ldrb	r6, [r1, r7]
   14d44:	mov	r7, r3
   14d48:	mov	r3, r0
   14d4c:	b	14bb0 <__assert_fail@plt+0x3440>
   14d50:	ldr	ip, [sp, #88]	; 0x58
   14d54:	cmp	r1, #0
   14d58:	movwne	r1, #1
   14d5c:	str	r1, [fp, #-56]	; 0xffffffc8
   14d60:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14d64:	cmp	r0, #0
   14d68:	bne	14d98 <__assert_fail@plt+0x3628>
   14d6c:	tst	lr, #1
   14d70:	beq	14d98 <__assert_fail@plt+0x3628>
   14d74:	cmp	r8, ip
   14d78:	mov	lr, #0
   14d7c:	movcc	r0, #39	; 0x27
   14d80:	strbcc	r0, [r5, r8]
   14d84:	add	r0, r8, #1
   14d88:	add	r8, r8, #2
   14d8c:	cmp	r0, ip
   14d90:	movcc	r1, #39	; 0x27
   14d94:	strbcc	r1, [r5, r0]
   14d98:	mov	r1, r9
   14d9c:	mov	r0, r6
   14da0:	cmp	r8, ip
   14da4:	strbcc	r0, [r5, r8]
   14da8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14dac:	add	r8, r8, #1
   14db0:	and	r0, r0, r1
   14db4:	str	r0, [fp, #-48]	; 0xffffffd0
   14db8:	mov	r3, sl
   14dbc:	add	r7, r7, #1
   14dc0:	b	142b0 <__assert_fail@plt+0x2b40>
   14dc4:	mov	r9, #0
   14dc8:	b	14e0c <__assert_fail@plt+0x369c>
   14dcc:	mov	r9, #0
   14dd0:	cmp	r2, r4
   14dd4:	bls	14e0c <__assert_fail@plt+0x369c>
   14dd8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14ddc:	ldr	r1, [sp, #24]
   14de0:	add	r0, r4, r7
   14de4:	mov	r3, r1
   14de8:	ldrb	r1, [r0, r1]
   14dec:	cmp	r1, #0
   14df0:	beq	14e18 <__assert_fail@plt+0x36a8>
   14df4:	add	r3, r3, #1
   14df8:	add	r1, r7, r3
   14dfc:	cmp	r1, r2
   14e00:	mov	r1, r3
   14e04:	bcc	14de4 <__assert_fail@plt+0x3674>
   14e08:	b	14910 <__assert_fail@plt+0x31a0>
   14e0c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14e10:	ldr	r1, [sp, #24]
   14e14:	b	14910 <__assert_fail@plt+0x31a0>
   14e18:	mov	r1, r3
   14e1c:	b	14910 <__assert_fail@plt+0x31a0>
   14e20:	mov	r9, #0
   14e24:	mov	r4, r1
   14e28:	b	145cc <__assert_fail@plt+0x2e5c>
   14e2c:	mov	sl, r7
   14e30:	b	14e38 <__assert_fail@plt+0x36c8>
   14e34:	mvn	sl, #0
   14e38:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14e3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14e40:	eor	r0, r1, #2
   14e44:	orr	r0, r0, r8
   14e48:	clz	r0, r0
   14e4c:	lsr	r0, r0, #5
   14e50:	tst	r2, r0
   14e54:	bne	14efc <__assert_fail@plt+0x378c>
   14e58:	subs	r0, r1, #2
   14e5c:	movwne	r0, #1
   14e60:	orr	r0, r2, r0
   14e64:	tst	r0, #1
   14e68:	ldreq	r0, [sp, #60]	; 0x3c
   14e6c:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   14e70:	eoreq	r0, r0, #1
   14e74:	tsteq	r0, #1
   14e78:	bne	14f90 <__assert_fail@plt+0x3820>
   14e7c:	tst	r1, #1
   14e80:	bne	14f5c <__assert_fail@plt+0x37ec>
   14e84:	ldr	r6, [sp, #56]	; 0x38
   14e88:	mov	r9, #0
   14e8c:	cmp	r6, #0
   14e90:	beq	14f88 <__assert_fail@plt+0x3818>
   14e94:	ldr	r0, [sp, #84]	; 0x54
   14e98:	mov	r1, #0
   14e9c:	mov	r7, #2
   14ea0:	cmp	ip, #0
   14ea4:	str	r1, [fp, #-48]	; 0xffffffd0
   14ea8:	mov	r1, #0
   14eac:	str	r1, [fp, #-76]	; 0xffffffb4
   14eb0:	beq	14018 <__assert_fail@plt+0x28a8>
   14eb4:	b	14f90 <__assert_fail@plt+0x3820>
   14eb8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14ebc:	ldr	r1, [fp, #12]
   14ec0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14ec4:	mov	r5, r3
   14ec8:	mov	ip, r6
   14ecc:	mov	r3, sl
   14ed0:	b	14f20 <__assert_fail@plt+0x37b0>
   14ed4:	tst	r4, #1
   14ed8:	ldr	r5, [fp, #-84]	; 0xffffffac
   14edc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14ee0:	ldr	r1, [fp, #12]
   14ee4:	ldr	r3, [sp, #36]	; 0x24
   14ee8:	mov	r0, #2
   14eec:	movwne	r0, #4
   14ef0:	mov	r2, r0
   14ef4:	b	14f20 <__assert_fail@plt+0x37b0>
   14ef8:	ldr	ip, [sp, #88]	; 0x58
   14efc:	ldr	r1, [sp, #84]	; 0x54
   14f00:	mov	r0, #2
   14f04:	tst	r1, #1
   14f08:	movwne	r0, #4
   14f0c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14f10:	ldr	r1, [fp, #12]
   14f14:	mov	r3, sl
   14f18:	cmp	r2, #2
   14f1c:	moveq	r2, r0
   14f20:	mov	r0, #0
   14f24:	bic	r1, r1, #2
   14f28:	str	r2, [sp]
   14f2c:	mov	r2, r4
   14f30:	str	r0, [sp, #8]
   14f34:	ldr	r0, [sp, #76]	; 0x4c
   14f38:	str	r1, [sp, #4]
   14f3c:	mov	r1, ip
   14f40:	str	r0, [sp, #12]
   14f44:	ldr	r0, [sp, #80]	; 0x50
   14f48:	str	r0, [sp, #16]
   14f4c:	mov	r0, r5
   14f50:	bl	13f8c <__assert_fail@plt+0x281c>
   14f54:	mov	r8, r0
   14f58:	b	14fdc <__assert_fail@plt+0x386c>
   14f5c:	mov	r0, #5
   14f60:	ldr	r1, [sp, #56]	; 0x38
   14f64:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14f68:	mov	r3, sl
   14f6c:	str	r0, [sp]
   14f70:	ldr	r0, [fp, #12]
   14f74:	str	r0, [sp, #4]
   14f78:	ldr	r0, [fp, #16]
   14f7c:	str	r0, [sp, #8]
   14f80:	ldr	r0, [sp, #76]	; 0x4c
   14f84:	b	14f40 <__assert_fail@plt+0x37d0>
   14f88:	mov	r0, #0
   14f8c:	str	r0, [fp, #-76]	; 0xffffffb4
   14f90:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14f94:	cmp	r1, #0
   14f98:	beq	14fd0 <__assert_fail@plt+0x3860>
   14f9c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14fa0:	tst	r0, #1
   14fa4:	bne	14fd0 <__assert_fail@plt+0x3860>
   14fa8:	ldrb	r0, [r1]
   14fac:	cmp	r0, #0
   14fb0:	beq	14fd0 <__assert_fail@plt+0x3860>
   14fb4:	add	r1, r1, #1
   14fb8:	cmp	r8, ip
   14fbc:	strbcc	r0, [r5, r8]
   14fc0:	add	r8, r8, #1
   14fc4:	ldrb	r0, [r1], #1
   14fc8:	cmp	r0, #0
   14fcc:	bne	14fb8 <__assert_fail@plt+0x3848>
   14fd0:	cmp	r8, ip
   14fd4:	movcc	r0, #0
   14fd8:	strbcc	r0, [r5, r8]
   14fdc:	mov	r0, r8
   14fe0:	sub	sp, fp, #28
   14fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe8:	mov	r0, #4
   14fec:	b	14f0c <__assert_fail@plt+0x379c>
   14ff0:	mov	r4, r1
   14ff4:	b	14efc <__assert_fail@plt+0x378c>
   14ff8:	bl	1174c <abort@plt>
   14ffc:	mov	r3, r2
   15000:	mov	r2, #0
   15004:	b	15008 <__assert_fail@plt+0x3898>
   15008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	add	fp, sp, #28
   15010:	sub	sp, sp, #36	; 0x24
   15014:	movw	r8, #25280	; 0x62c0
   15018:	cmp	r3, #0
   1501c:	mov	r4, r2
   15020:	str	r2, [sp, #24]
   15024:	mov	r5, r1
   15028:	mov	r6, r0
   1502c:	str	r0, [sp, #20]
   15030:	movt	r8, #3
   15034:	movne	r8, r3
   15038:	bl	1162c <__errno_location@plt>
   1503c:	str	r0, [sp, #28]
   15040:	ldr	r1, [r8, #40]	; 0x28
   15044:	ldr	r2, [r8, #44]	; 0x2c
   15048:	ldr	r7, [r0]
   1504c:	cmp	r4, #0
   15050:	add	sl, r8, #8
   15054:	mov	r0, #0
   15058:	ldm	r8, {r3, r9}
   1505c:	orreq	r9, r9, #1
   15060:	stm	sp, {r3, r9, sl}
   15064:	str	r1, [sp, #12]
   15068:	str	r2, [sp, #16]
   1506c:	mov	r1, #0
   15070:	mov	r2, r6
   15074:	mov	r3, r5
   15078:	str	r7, [sp, #32]
   1507c:	mov	r7, r5
   15080:	bl	13f8c <__assert_fail@plt+0x281c>
   15084:	add	r4, r0, #1
   15088:	mov	r5, r0
   1508c:	mov	r0, r4
   15090:	bl	22724 <__assert_fail@plt+0x10fb4>
   15094:	mov	r6, r0
   15098:	ldr	r0, [r8]
   1509c:	ldr	r2, [r8, #44]	; 0x2c
   150a0:	ldr	r1, [r8, #40]	; 0x28
   150a4:	mov	r3, r7
   150a8:	stm	sp, {r0, r9, sl}
   150ac:	str	r2, [sp, #16]
   150b0:	ldr	r2, [sp, #20]
   150b4:	str	r1, [sp, #12]
   150b8:	mov	r0, r6
   150bc:	mov	r1, r4
   150c0:	bl	13f8c <__assert_fail@plt+0x281c>
   150c4:	ldr	r0, [sp, #24]
   150c8:	ldr	r1, [sp, #32]
   150cc:	ldr	r2, [sp, #28]
   150d0:	cmp	r0, #0
   150d4:	str	r1, [r2]
   150d8:	strne	r5, [r0]
   150dc:	mov	r0, r6
   150e0:	sub	sp, fp, #28
   150e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150e8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   150ec:	add	fp, sp, #24
   150f0:	movw	r5, #24940	; 0x616c
   150f4:	movw	r8, #24936	; 0x6168
   150f8:	movt	r5, #3
   150fc:	movt	r8, #3
   15100:	ldr	r0, [r5]
   15104:	ldr	r4, [r8]
   15108:	cmp	r0, #2
   1510c:	blt	15138 <__assert_fail@plt+0x39c8>
   15110:	add	r7, r4, #12
   15114:	mov	r6, #0
   15118:	ldr	r0, [r7, r6, lsl #3]
   1511c:	bl	13bd0 <__assert_fail@plt+0x2460>
   15120:	ldr	r1, [r5]
   15124:	add	r2, r6, #2
   15128:	add	r0, r6, #1
   1512c:	mov	r6, r0
   15130:	cmp	r2, r1
   15134:	blt	15118 <__assert_fail@plt+0x39a8>
   15138:	ldr	r0, [r4, #4]
   1513c:	movw	r9, #25328	; 0x62f0
   15140:	movw	r7, #24944	; 0x6170
   15144:	movt	r9, #3
   15148:	movt	r7, #3
   1514c:	cmp	r0, r9
   15150:	beq	15160 <__assert_fail@plt+0x39f0>
   15154:	bl	13bd0 <__assert_fail@plt+0x2460>
   15158:	mov	r0, #256	; 0x100
   1515c:	stm	r7, {r0, r9}
   15160:	cmp	r4, r7
   15164:	beq	15174 <__assert_fail@plt+0x3a04>
   15168:	mov	r0, r4
   1516c:	bl	13bd0 <__assert_fail@plt+0x2460>
   15170:	str	r7, [r8]
   15174:	mov	r0, #1
   15178:	str	r0, [r5]
   1517c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15180:	movw	r3, #25280	; 0x62c0
   15184:	mvn	r2, #0
   15188:	movt	r3, #3
   1518c:	b	15190 <__assert_fail@plt+0x3a20>
   15190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15194:	add	fp, sp, #28
   15198:	sub	sp, sp, #44	; 0x2c
   1519c:	mov	r7, r3
   151a0:	str	r2, [sp, #36]	; 0x24
   151a4:	str	r1, [sp, #32]
   151a8:	mov	r5, r0
   151ac:	bl	1162c <__errno_location@plt>
   151b0:	cmp	r5, #0
   151b4:	bmi	15324 <__assert_fail@plt+0x3bb4>
   151b8:	cmn	r5, #-2147483647	; 0x80000001
   151bc:	beq	15324 <__assert_fail@plt+0x3bb4>
   151c0:	movw	r8, #24940	; 0x616c
   151c4:	movw	r4, #24936	; 0x6168
   151c8:	str	r0, [sp, #28]
   151cc:	ldr	r0, [r0]
   151d0:	movt	r8, #3
   151d4:	movt	r4, #3
   151d8:	ldr	r1, [r8]
   151dc:	ldr	r6, [r4]
   151e0:	str	r0, [sp, #24]
   151e4:	cmp	r1, r5
   151e8:	ble	151f4 <__assert_fail@plt+0x3a84>
   151ec:	mov	sl, r6
   151f0:	b	15260 <__assert_fail@plt+0x3af0>
   151f4:	movw	r9, #24944	; 0x6170
   151f8:	mov	r0, #8
   151fc:	str	r1, [fp, #-32]	; 0xffffffe0
   15200:	sub	r1, r5, r1
   15204:	mvn	r3, #-2147483648	; 0x80000000
   15208:	movt	r9, #3
   1520c:	str	r0, [sp]
   15210:	add	r2, r1, #1
   15214:	sub	r1, fp, #32
   15218:	subs	r0, r6, r9
   1521c:	movne	r0, r6
   15220:	bl	22854 <__assert_fail@plt+0x110e4>
   15224:	mov	sl, r0
   15228:	cmp	r6, r9
   1522c:	str	r0, [r4]
   15230:	bne	1523c <__assert_fail@plt+0x3acc>
   15234:	ldrd	r0, [r9]
   15238:	stm	sl, {r0, r1}
   1523c:	ldr	r1, [r8]
   15240:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15244:	add	r0, sl, r1, lsl #3
   15248:	sub	r1, r2, r1
   1524c:	lsl	r2, r1, #3
   15250:	mov	r1, #0
   15254:	bl	1165c <memset@plt>
   15258:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1525c:	str	r0, [r8]
   15260:	mov	r9, sl
   15264:	ldm	r7, {r0, r1}
   15268:	orr	r8, r1, #1
   1526c:	add	r1, r7, #8
   15270:	ldr	r2, [r7, #40]	; 0x28
   15274:	ldr	r3, [r7, #44]	; 0x2c
   15278:	ldr	r6, [r9, r5, lsl #3]!
   1527c:	str	r1, [sp, #20]
   15280:	ldr	r4, [r9, #4]!
   15284:	stm	sp, {r0, r8}
   15288:	add	r0, sp, #8
   1528c:	stm	r0, {r1, r2, r3}
   15290:	ldr	r2, [sp, #32]
   15294:	ldr	r3, [sp, #36]	; 0x24
   15298:	mov	r1, r6
   1529c:	mov	r0, r4
   152a0:	bl	13f8c <__assert_fail@plt+0x281c>
   152a4:	cmp	r6, r0
   152a8:	bhi	1530c <__assert_fail@plt+0x3b9c>
   152ac:	add	r6, r0, #1
   152b0:	movw	r0, #25328	; 0x62f0
   152b4:	movt	r0, #3
   152b8:	str	r6, [sl, r5, lsl #3]
   152bc:	cmp	r4, r0
   152c0:	beq	152cc <__assert_fail@plt+0x3b5c>
   152c4:	mov	r0, r4
   152c8:	bl	13bd0 <__assert_fail@plt+0x2460>
   152cc:	mov	r0, r6
   152d0:	bl	22724 <__assert_fail@plt+0x10fb4>
   152d4:	str	r0, [r9]
   152d8:	mov	r4, r0
   152dc:	add	r3, sp, #8
   152e0:	ldr	r0, [r7]
   152e4:	ldr	r1, [r7, #40]	; 0x28
   152e8:	ldr	r2, [r7, #44]	; 0x2c
   152ec:	stm	sp, {r0, r8}
   152f0:	ldr	r0, [sp, #20]
   152f4:	stm	r3, {r0, r1, r2}
   152f8:	ldr	r2, [sp, #32]
   152fc:	ldr	r3, [sp, #36]	; 0x24
   15300:	mov	r0, r4
   15304:	mov	r1, r6
   15308:	bl	13f8c <__assert_fail@plt+0x281c>
   1530c:	ldr	r0, [sp, #28]
   15310:	ldr	r1, [sp, #24]
   15314:	str	r1, [r0]
   15318:	mov	r0, r4
   1531c:	sub	sp, fp, #28
   15320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15324:	bl	1174c <abort@plt>
   15328:	movw	r3, #25280	; 0x62c0
   1532c:	movt	r3, #3
   15330:	b	15190 <__assert_fail@plt+0x3a20>
   15334:	movw	r3, #25280	; 0x62c0
   15338:	mov	r1, r0
   1533c:	mov	r0, #0
   15340:	mvn	r2, #0
   15344:	movt	r3, #3
   15348:	b	15190 <__assert_fail@plt+0x3a20>
   1534c:	movw	r3, #25280	; 0x62c0
   15350:	mov	r2, r1
   15354:	mov	r1, r0
   15358:	mov	r0, #0
   1535c:	movt	r3, #3
   15360:	b	15190 <__assert_fail@plt+0x3a20>
   15364:	push	{fp, lr}
   15368:	mov	fp, sp
   1536c:	sub	sp, sp, #48	; 0x30
   15370:	vmov.i32	q8, #0	; 0x00000000
   15374:	mov	ip, #32
   15378:	mov	r3, sp
   1537c:	mov	lr, r2
   15380:	cmp	r1, #10
   15384:	add	r2, r3, #16
   15388:	vst1.64	{d16-d17}, [r3], ip
   1538c:	vst1.64	{d16-d17}, [r2]
   15390:	vst1.64	{d16-d17}, [r3]
   15394:	beq	153b4 <__assert_fail@plt+0x3c44>
   15398:	str	r1, [sp]
   1539c:	mov	r3, sp
   153a0:	mov	r1, lr
   153a4:	mvn	r2, #0
   153a8:	bl	15190 <__assert_fail@plt+0x3a20>
   153ac:	mov	sp, fp
   153b0:	pop	{fp, pc}
   153b4:	bl	1174c <abort@plt>
   153b8:	push	{r4, sl, fp, lr}
   153bc:	add	fp, sp, #8
   153c0:	sub	sp, sp, #48	; 0x30
   153c4:	vmov.i32	q8, #0	; 0x00000000
   153c8:	mov	ip, r3
   153cc:	mov	r3, sp
   153d0:	mov	lr, #32
   153d4:	cmp	r1, #10
   153d8:	add	r4, r3, #16
   153dc:	vst1.64	{d16-d17}, [r3], lr
   153e0:	vst1.64	{d16-d17}, [r4]
   153e4:	vst1.64	{d16-d17}, [r3]
   153e8:	beq	15408 <__assert_fail@plt+0x3c98>
   153ec:	str	r1, [sp]
   153f0:	mov	r1, r2
   153f4:	mov	r3, sp
   153f8:	mov	r2, ip
   153fc:	bl	15190 <__assert_fail@plt+0x3a20>
   15400:	sub	sp, fp, #8
   15404:	pop	{r4, sl, fp, pc}
   15408:	bl	1174c <abort@plt>
   1540c:	mov	r2, r1
   15410:	mov	r1, r0
   15414:	mov	r0, #0
   15418:	b	15364 <__assert_fail@plt+0x3bf4>
   1541c:	mov	r3, r2
   15420:	mov	r2, r1
   15424:	mov	r1, r0
   15428:	mov	r0, #0
   1542c:	b	153b8 <__assert_fail@plt+0x3c48>
   15430:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15434:	add	fp, sp, #24
   15438:	sub	sp, sp, #48	; 0x30
   1543c:	movw	r8, #25280	; 0x62c0
   15440:	mov	lr, r0
   15444:	mov	r3, sp
   15448:	mov	ip, r1
   1544c:	movt	r8, #3
   15450:	mov	r1, r3
   15454:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   15458:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   1545c:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   15460:	stm	r1, {r0, r4, r5, r6, r7, r9}
   15464:	ubfx	r0, r2, #5, #3
   15468:	and	r2, r2, #31
   1546c:	mov	r4, #1
   15470:	add	r0, r3, r0, lsl #2
   15474:	ldr	r1, [r0, #8]
   15478:	bic	r4, r4, r1, lsr r2
   1547c:	eor	r1, r1, r4, lsl r2
   15480:	mov	r2, ip
   15484:	str	r1, [r0, #8]
   15488:	mov	r0, #0
   1548c:	mov	r1, lr
   15490:	bl	15190 <__assert_fail@plt+0x3a20>
   15494:	sub	sp, fp, #24
   15498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1549c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   154a0:	add	fp, sp, #24
   154a4:	sub	sp, sp, #48	; 0x30
   154a8:	movw	lr, #25280	; 0x62c0
   154ac:	mov	ip, r0
   154b0:	mov	r3, sp
   154b4:	movt	lr, #3
   154b8:	mov	r2, r3
   154bc:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   154c0:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   154c4:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   154c8:	stm	r2, {r0, r4, r5, r6, r7, r8}
   154cc:	ubfx	r0, r1, #5, #3
   154d0:	and	r1, r1, #31
   154d4:	mov	r7, #1
   154d8:	add	r0, r3, r0, lsl #2
   154dc:	ldr	r2, [r0, #8]
   154e0:	bic	r7, r7, r2, lsr r1
   154e4:	eor	r1, r2, r7, lsl r1
   154e8:	mvn	r2, #0
   154ec:	str	r1, [r0, #8]
   154f0:	mov	r0, #0
   154f4:	mov	r1, ip
   154f8:	bl	15190 <__assert_fail@plt+0x3a20>
   154fc:	sub	sp, fp, #24
   15500:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15504:	push	{r4, r5, r6, r7, fp, lr}
   15508:	add	fp, sp, #16
   1550c:	sub	sp, sp, #48	; 0x30
   15510:	movw	lr, #25280	; 0x62c0
   15514:	mov	ip, r0
   15518:	mov	r3, sp
   1551c:	movt	lr, #3
   15520:	mov	r2, r3
   15524:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   15528:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1552c:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   15530:	stm	r2, {r0, r1, r4, r5, r6, r7}
   15534:	mov	r1, ip
   15538:	mvn	r2, #0
   1553c:	ldr	r0, [sp, #12]
   15540:	orr	r0, r0, #67108864	; 0x4000000
   15544:	str	r0, [sp, #12]
   15548:	mov	r0, #0
   1554c:	bl	15190 <__assert_fail@plt+0x3a20>
   15550:	sub	sp, fp, #16
   15554:	pop	{r4, r5, r6, r7, fp, pc}
   15558:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1555c:	add	fp, sp, #24
   15560:	sub	sp, sp, #48	; 0x30
   15564:	movw	r8, #25280	; 0x62c0
   15568:	mov	ip, r1
   1556c:	mov	lr, r0
   15570:	mov	r3, sp
   15574:	movt	r8, #3
   15578:	mov	r2, r3
   1557c:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   15580:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   15584:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   15588:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1558c:	mov	r1, lr
   15590:	mov	r2, ip
   15594:	ldr	r0, [sp, #12]
   15598:	orr	r0, r0, #67108864	; 0x4000000
   1559c:	str	r0, [sp, #12]
   155a0:	mov	r0, #0
   155a4:	bl	15190 <__assert_fail@plt+0x3a20>
   155a8:	sub	sp, fp, #24
   155ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155b4:	add	fp, sp, #24
   155b8:	sub	sp, sp, #96	; 0x60
   155bc:	vmov.i32	q8, #0	; 0x00000000
   155c0:	mov	lr, sp
   155c4:	mov	ip, r2
   155c8:	cmp	r1, #10
   155cc:	add	r3, lr, #16
   155d0:	mov	r2, lr
   155d4:	vst1.64	{d16-d17}, [r3]
   155d8:	mov	r3, #28
   155dc:	vst1.64	{d16-d17}, [r2], r3
   155e0:	vst1.32	{d16-d17}, [r2]
   155e4:	beq	15624 <__assert_fail@plt+0x3eb4>
   155e8:	str	r1, [sp, #48]	; 0x30
   155ec:	add	r3, sp, #48	; 0x30
   155f0:	ldm	lr!, {r2, r4, r5, r6, r7}
   155f4:	add	r1, r3, #4
   155f8:	stmia	r1!, {r2, r4, r5, r6, r7}
   155fc:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   15600:	stm	r1, {r2, r4, r5, r6, r7, r8}
   15604:	mvn	r2, #0
   15608:	ldr	r1, [sp, #60]	; 0x3c
   1560c:	orr	r1, r1, #67108864	; 0x4000000
   15610:	str	r1, [sp, #60]	; 0x3c
   15614:	mov	r1, ip
   15618:	bl	15190 <__assert_fail@plt+0x3a20>
   1561c:	sub	sp, fp, #24
   15620:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15624:	bl	1174c <abort@plt>
   15628:	push	{fp, lr}
   1562c:	mov	fp, sp
   15630:	sub	sp, sp, #8
   15634:	mvn	ip, #0
   15638:	str	ip, [sp]
   1563c:	bl	15648 <__assert_fail@plt+0x3ed8>
   15640:	mov	sp, fp
   15644:	pop	{fp, pc}
   15648:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1564c:	add	fp, sp, #24
   15650:	sub	sp, sp, #48	; 0x30
   15654:	movw	ip, #25280	; 0x62c0
   15658:	mov	lr, r3
   1565c:	mov	r3, sp
   15660:	cmp	r1, #0
   15664:	movt	ip, #3
   15668:	cmpne	r2, #0
   1566c:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   15670:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   15674:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   15678:	stm	r3, {r4, r5, r6, r7, r8, r9}
   1567c:	mov	r3, #10
   15680:	str	r3, [sp]
   15684:	bne	1568c <__assert_fail@plt+0x3f1c>
   15688:	bl	1174c <abort@plt>
   1568c:	ldr	ip, [fp, #8]
   15690:	str	r2, [sp, #44]	; 0x2c
   15694:	str	r1, [sp, #40]	; 0x28
   15698:	mov	r3, sp
   1569c:	mov	r1, lr
   156a0:	mov	r2, ip
   156a4:	bl	15190 <__assert_fail@plt+0x3a20>
   156a8:	sub	sp, fp, #24
   156ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156b0:	push	{fp, lr}
   156b4:	mov	fp, sp
   156b8:	sub	sp, sp, #8
   156bc:	mov	r3, r2
   156c0:	mov	r2, r1
   156c4:	mov	r1, r0
   156c8:	mvn	r0, #0
   156cc:	str	r0, [sp]
   156d0:	mov	r0, #0
   156d4:	bl	15648 <__assert_fail@plt+0x3ed8>
   156d8:	mov	sp, fp
   156dc:	pop	{fp, pc}
   156e0:	push	{fp, lr}
   156e4:	mov	fp, sp
   156e8:	sub	sp, sp, #8
   156ec:	mov	ip, r2
   156f0:	mov	r2, r1
   156f4:	mov	r1, r0
   156f8:	str	r3, [sp]
   156fc:	mov	r0, #0
   15700:	mov	r3, ip
   15704:	bl	15648 <__assert_fail@plt+0x3ed8>
   15708:	mov	sp, fp
   1570c:	pop	{fp, pc}
   15710:	movw	r3, #24952	; 0x6178
   15714:	movt	r3, #3
   15718:	b	15190 <__assert_fail@plt+0x3a20>
   1571c:	movw	r3, #24952	; 0x6178
   15720:	mov	r2, r1
   15724:	mov	r1, r0
   15728:	mov	r0, #0
   1572c:	movt	r3, #3
   15730:	b	15190 <__assert_fail@plt+0x3a20>
   15734:	movw	r3, #24952	; 0x6178
   15738:	mvn	r2, #0
   1573c:	movt	r3, #3
   15740:	b	15190 <__assert_fail@plt+0x3a20>
   15744:	movw	r3, #24952	; 0x6178
   15748:	mov	r1, r0
   1574c:	mov	r0, #0
   15750:	mvn	r2, #0
   15754:	movt	r3, #3
   15758:	b	15190 <__assert_fail@plt+0x3a20>
   1575c:	push	{r4, r5, fp, lr}
   15760:	add	fp, sp, #8
   15764:	mov	r5, r0
   15768:	mov	r4, r1
   1576c:	mov	r0, #0
   15770:	mov	r2, #5
   15774:	mov	r1, r5
   15778:	bl	114dc <dcgettext@plt>
   1577c:	cmp	r0, r5
   15780:	popne	{r4, r5, fp, pc}
   15784:	bl	23d28 <__assert_fail@plt+0x125b8>
   15788:	ldrb	r1, [r0]
   1578c:	and	r1, r1, #223	; 0xdf
   15790:	cmp	r1, #71	; 0x47
   15794:	beq	157fc <__assert_fail@plt+0x408c>
   15798:	cmp	r1, #85	; 0x55
   1579c:	bne	15854 <__assert_fail@plt+0x40e4>
   157a0:	ldrb	r1, [r0, #1]
   157a4:	and	r1, r1, #223	; 0xdf
   157a8:	cmp	r1, #84	; 0x54
   157ac:	bne	15854 <__assert_fail@plt+0x40e4>
   157b0:	ldrb	r1, [r0, #2]
   157b4:	and	r1, r1, #223	; 0xdf
   157b8:	cmp	r1, #70	; 0x46
   157bc:	bne	15854 <__assert_fail@plt+0x40e4>
   157c0:	ldrb	r1, [r0, #3]
   157c4:	cmp	r1, #45	; 0x2d
   157c8:	bne	15854 <__assert_fail@plt+0x40e4>
   157cc:	ldrb	r1, [r0, #4]
   157d0:	cmp	r1, #56	; 0x38
   157d4:	bne	15854 <__assert_fail@plt+0x40e4>
   157d8:	ldrb	r0, [r0, #5]
   157dc:	cmp	r0, #0
   157e0:	bne	15854 <__assert_fail@plt+0x40e4>
   157e4:	ldrb	r1, [r5]
   157e8:	movw	r2, #20078	; 0x4e6e
   157ec:	movw	r0, #20082	; 0x4e72
   157f0:	movt	r2, #2
   157f4:	movt	r0, #2
   157f8:	b	15884 <__assert_fail@plt+0x4114>
   157fc:	ldrb	r1, [r0, #1]
   15800:	and	r1, r1, #223	; 0xdf
   15804:	cmp	r1, #66	; 0x42
   15808:	bne	15854 <__assert_fail@plt+0x40e4>
   1580c:	ldrb	r1, [r0, #2]
   15810:	cmp	r1, #49	; 0x31
   15814:	bne	15854 <__assert_fail@plt+0x40e4>
   15818:	ldrb	r1, [r0, #3]
   1581c:	cmp	r1, #56	; 0x38
   15820:	bne	15854 <__assert_fail@plt+0x40e4>
   15824:	ldrb	r1, [r0, #4]
   15828:	cmp	r1, #48	; 0x30
   1582c:	bne	15854 <__assert_fail@plt+0x40e4>
   15830:	ldrb	r1, [r0, #5]
   15834:	cmp	r1, #51	; 0x33
   15838:	bne	15854 <__assert_fail@plt+0x40e4>
   1583c:	ldrb	r1, [r0, #6]
   15840:	cmp	r1, #48	; 0x30
   15844:	bne	15854 <__assert_fail@plt+0x40e4>
   15848:	ldrb	r0, [r0, #7]
   1584c:	cmp	r0, #0
   15850:	beq	15870 <__assert_fail@plt+0x4100>
   15854:	movw	r1, #20074	; 0x4e6a
   15858:	movw	r0, #19046	; 0x4a66
   1585c:	cmp	r4, #9
   15860:	movt	r1, #2
   15864:	movt	r0, #2
   15868:	moveq	r0, r1
   1586c:	pop	{r4, r5, fp, pc}
   15870:	ldrb	r1, [r5]
   15874:	movw	r2, #20086	; 0x4e76
   15878:	movw	r0, #20090	; 0x4e7a
   1587c:	movt	r2, #2
   15880:	movt	r0, #2
   15884:	cmp	r1, #96	; 0x60
   15888:	moveq	r0, r2
   1588c:	pop	{r4, r5, fp, pc}
   15890:	push	{fp, lr}
   15894:	mov	fp, sp
   15898:	mov	lr, r0
   1589c:	movw	r0, #25588	; 0x63f4
   158a0:	mov	ip, r1
   158a4:	ldrb	r1, [r2, #28]
   158a8:	movt	r0, #3
   158ac:	ldr	r3, [r0]
   158b0:	mov	r0, #16
   158b4:	and	r1, r1, #111	; 0x6f
   158b8:	and	r0, r0, r3, lsr #21
   158bc:	orr	r0, r1, r0
   158c0:	mov	r1, lr
   158c4:	orr	r0, r0, #128	; 0x80
   158c8:	strb	r0, [r2, #28]
   158cc:	mov	r0, r2
   158d0:	mov	r2, ip
   158d4:	bl	15910 <__assert_fail@plt+0x41a0>
   158d8:	cmp	r0, #0
   158dc:	beq	15908 <__assert_fail@plt+0x4198>
   158e0:	movw	r1, #20568	; 0x5058
   158e4:	mov	r2, #5
   158e8:	movt	r1, #2
   158ec:	ldr	r0, [r1, r0, lsl #2]
   158f0:	movw	r1, #20184	; 0x4ed8
   158f4:	movt	r1, #2
   158f8:	add	r1, r1, r0
   158fc:	mov	r0, #0
   15900:	pop	{fp, lr}
   15904:	b	114dc <dcgettext@plt>
   15908:	mov	r0, #0
   1590c:	pop	{fp, pc}
   15910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15914:	add	fp, sp, #28
   15918:	sub	sp, sp, #140	; 0x8c
   1591c:	str	r1, [sp, #24]
   15920:	mov	r1, #0
   15924:	str	r0, [sp, #28]
   15928:	mov	sl, r2
   1592c:	str	r3, [sp, #20]
   15930:	str	r1, [fp, #-52]	; 0xffffffcc
   15934:	str	r1, [r0, #24]
   15938:	str	r1, [r0, #8]
   1593c:	str	r3, [r0, #12]
   15940:	ldrb	r1, [r0, #28]
   15944:	and	r1, r1, #144	; 0x90
   15948:	strb	r1, [r0, #28]
   1594c:	ldr	r9, [r0]
   15950:	ldr	r0, [r0, #4]
   15954:	cmp	r0, #159	; 0x9f
   15958:	bls	16500 <__assert_fail@plt+0x4d90>
   1595c:	ldr	r1, [sp, #28]
   15960:	mov	r0, #160	; 0xa0
   15964:	mov	r2, #160	; 0xa0
   15968:	str	r0, [r1, #8]
   1596c:	mov	r0, r9
   15970:	mov	r1, #0
   15974:	bl	1165c <memset@plt>
   15978:	mov	r0, #31
   1597c:	str	r0, [r9, #64]	; 0x40
   15980:	movw	r0, #43689	; 0xaaa9
   15984:	movt	r0, #2730	; 0xaaa
   15988:	cmp	sl, r0
   1598c:	bhi	15b04 <__assert_fail@plt+0x4394>
   15990:	add	r0, sl, #1
   15994:	str	r0, [r9, #4]
   15998:	str	r0, [sp, #12]
   1599c:	lsl	r0, r0, #3
   159a0:	bl	23994 <__assert_fail@plt+0x12224>
   159a4:	str	r0, [r9]
   159a8:	mov	r0, #1
   159ac:	mov	r4, r0
   159b0:	lsl	r0, r0, #1
   159b4:	cmp	r4, sl
   159b8:	bls	159ac <__assert_fail@plt+0x423c>
   159bc:	mov	r0, #12
   159c0:	mov	r1, r4
   159c4:	bl	23940 <__assert_fail@plt+0x121d0>
   159c8:	sub	r1, r4, #1
   159cc:	str	r1, [r9, #68]	; 0x44
   159d0:	str	r0, [r9, #32]
   159d4:	bl	11554 <__ctype_get_mb_cur_max@plt>
   159d8:	str	r0, [r9, #92]	; 0x5c
   159dc:	mov	r0, #14
   159e0:	bl	11704 <nl_langinfo@plt>
   159e4:	ldrb	r1, [r0]
   159e8:	orr	r1, r1, #32
   159ec:	cmp	r1, #117	; 0x75
   159f0:	bne	15a40 <__assert_fail@plt+0x42d0>
   159f4:	ldrb	r1, [r0, #1]
   159f8:	orr	r1, r1, #32
   159fc:	cmp	r1, #116	; 0x74
   15a00:	bne	15a40 <__assert_fail@plt+0x42d0>
   15a04:	ldrb	r1, [r0, #2]
   15a08:	orr	r1, r1, #32
   15a0c:	cmp	r1, #102	; 0x66
   15a10:	bne	15a40 <__assert_fail@plt+0x42d0>
   15a14:	ldrb	r1, [r0, #3]!
   15a18:	cmp	r1, #45	; 0x2d
   15a1c:	movw	r1, #20684	; 0x50cc
   15a20:	movt	r1, #2
   15a24:	addeq	r0, r0, #1
   15a28:	bl	1141c <strcmp@plt>
   15a2c:	cmp	r0, #0
   15a30:	bne	15a40 <__assert_fail@plt+0x42d0>
   15a34:	ldrb	r0, [r9, #88]	; 0x58
   15a38:	orr	r0, r0, #4
   15a3c:	strb	r0, [r9, #88]	; 0x58
   15a40:	ldrb	r0, [r9, #88]	; 0x58
   15a44:	and	r1, r0, #247	; 0xf7
   15a48:	strb	r1, [r9, #88]	; 0x58
   15a4c:	ldr	r1, [r9, #92]	; 0x5c
   15a50:	cmp	r1, #2
   15a54:	blt	15af0 <__assert_fail@plt+0x4380>
   15a58:	tst	r0, #4
   15a5c:	bne	15ae4 <__assert_fail@plt+0x4374>
   15a60:	mov	r0, #32
   15a64:	mov	r1, #1
   15a68:	mov	r8, #1
   15a6c:	bl	23940 <__assert_fail@plt+0x121d0>
   15a70:	cmp	r0, #0
   15a74:	str	r0, [r9, #60]	; 0x3c
   15a78:	beq	15b04 <__assert_fail@plt+0x4394>
   15a7c:	mov	r7, #0
   15a80:	mov	r5, #0
   15a84:	mov	r6, #0
   15a88:	add	r4, r7, r6
   15a8c:	mov	r0, r4
   15a90:	bl	11668 <btowc@plt>
   15a94:	cmn	r0, #1
   15a98:	beq	15aac <__assert_fail@plt+0x433c>
   15a9c:	ldr	r1, [r9, #60]	; 0x3c
   15aa0:	ldr	r2, [r1, r5, lsl #2]
   15aa4:	orr	r2, r2, r8, lsl r6
   15aa8:	str	r2, [r1, r5, lsl #2]
   15aac:	cmp	r4, #127	; 0x7f
   15ab0:	bhi	15ac4 <__assert_fail@plt+0x4354>
   15ab4:	cmp	r4, r0
   15ab8:	ldrbne	r0, [r9, #88]	; 0x58
   15abc:	orrne	r0, r0, #8
   15ac0:	strbne	r0, [r9, #88]	; 0x58
   15ac4:	add	r6, r6, #1
   15ac8:	cmp	r6, #32
   15acc:	bne	15a88 <__assert_fail@plt+0x4318>
   15ad0:	add	r5, r5, #1
   15ad4:	add	r7, r7, r6
   15ad8:	cmp	r5, #8
   15adc:	bne	15a84 <__assert_fail@plt+0x4314>
   15ae0:	b	15af0 <__assert_fail@plt+0x4380>
   15ae4:	movw	r0, #20636	; 0x509c
   15ae8:	movt	r0, #2
   15aec:	str	r0, [r9, #60]	; 0x3c
   15af0:	ldr	r0, [r9]
   15af4:	cmp	r0, #0
   15af8:	ldrne	r0, [r9, #32]
   15afc:	cmpne	r0, #0
   15b00:	bne	15b28 <__assert_fail@plt+0x43b8>
   15b04:	mov	r4, #12
   15b08:	mov	r0, r9
   15b0c:	str	r4, [fp, #-52]	; 0xffffffcc
   15b10:	bl	16b70 <__assert_fail@plt+0x5400>
   15b14:	ldr	r0, [sp, #28]
   15b18:	mov	r1, #0
   15b1c:	str	r1, [r0]
   15b20:	str	r1, [r0, #4]
   15b24:	b	16488 <__assert_fail@plt+0x4d18>
   15b28:	movw	r0, #0
   15b2c:	movw	r1, #0
   15b30:	mov	r4, #0
   15b34:	movt	r0, #0
   15b38:	movt	r1, #0
   15b3c:	str	r4, [fp, #-52]	; 0xffffffcc
   15b40:	orrs	r0, r1, r0
   15b44:	str	r0, [sp, #8]
   15b48:	beq	15b60 <__assert_fail@plt+0x43f0>
   15b4c:	add	r0, r9, #136	; 0x88
   15b50:	mov	r1, #0
   15b54:	bl	114a0 <pthread_mutex_init@plt>
   15b58:	cmp	r0, #0
   15b5c:	bne	15b04 <__assert_fail@plt+0x4394>
   15b60:	ldr	r0, [sp, #28]
   15b64:	add	r5, sp, #32
   15b68:	mov	r1, #0
   15b6c:	mov	r2, #76	; 0x4c
   15b70:	ldr	r8, [r0, #20]
   15b74:	add	r0, r5, #4
   15b78:	bl	1165c <memset@plt>
   15b7c:	ldr	r1, [sp, #20]
   15b80:	vdup.32	q8, sl
   15b84:	add	r3, r5, #44	; 0x2c
   15b88:	ubfx	r0, r1, #22, #1
   15b8c:	strb	r0, [sp, #104]	; 0x68
   15b90:	ldr	r0, [sp, #24]
   15b94:	str	r8, [sp, #96]	; 0x60
   15b98:	str	r0, [sp, #32]
   15b9c:	and	r0, r1, #4194304	; 0x400000
   15ba0:	orrs	r1, r0, r8
   15ba4:	str	r0, [sp, #16]
   15ba8:	movwne	r1, #1
   15bac:	cmp	sl, #1
   15bb0:	strb	r1, [sp, #107]	; 0x6b
   15bb4:	ldr	r0, [r9, #92]	; 0x5c
   15bb8:	str	r0, [sp, #112]	; 0x70
   15bbc:	ldrb	r2, [r9, #88]	; 0x58
   15bc0:	vst1.32	{d16-d17}, [r3]
   15bc4:	ubfx	r3, r2, #2, #1
   15bc8:	strb	r3, [sp, #105]	; 0x69
   15bcc:	ubfx	r2, r2, #3, #1
   15bd0:	strb	r2, [sp, #106]	; 0x6a
   15bd4:	blt	15bf8 <__assert_fail@plt+0x4488>
   15bd8:	ldr	r1, [sp, #12]
   15bdc:	add	r0, sp, #32
   15be0:	bl	18ca8 <__assert_fail@plt+0x7538>
   15be4:	cmp	r0, #0
   15be8:	bne	15c68 <__assert_fail@plt+0x44f8>
   15bec:	ldr	r0, [r9, #92]	; 0x5c
   15bf0:	ldr	r4, [sp, #36]	; 0x24
   15bf4:	ldrb	r1, [sp, #107]	; 0x6b
   15bf8:	cmp	r1, #0
   15bfc:	ldr	r1, [sp, #24]
   15c00:	moveq	r4, r1
   15c04:	ldr	r1, [sp, #16]
   15c08:	str	r4, [sp, #36]	; 0x24
   15c0c:	cmp	r1, #0
   15c10:	beq	15c70 <__assert_fail@plt+0x4500>
   15c14:	cmp	r0, #2
   15c18:	blt	15c84 <__assert_fail@plt+0x4514>
   15c1c:	add	r4, sp, #32
   15c20:	mov	r0, r4
   15c24:	bl	18d48 <__assert_fail@plt+0x75d8>
   15c28:	cmp	r0, #0
   15c2c:	bne	15c68 <__assert_fail@plt+0x44f8>
   15c30:	ldr	r0, [sp, #64]	; 0x40
   15c34:	cmp	r0, sl
   15c38:	bge	15d14 <__assert_fail@plt+0x45a4>
   15c3c:	ldr	r1, [r9, #92]	; 0x5c
   15c40:	ldr	r2, [sp, #60]	; 0x3c
   15c44:	ldr	r0, [sp, #68]	; 0x44
   15c48:	add	r1, r1, r2
   15c4c:	cmp	r0, r1
   15c50:	bgt	15d14 <__assert_fail@plt+0x45a4>
   15c54:	lsl	r1, r0, #1
   15c58:	mov	r0, r4
   15c5c:	bl	18ca8 <__assert_fail@plt+0x7538>
   15c60:	cmp	r0, #0
   15c64:	beq	15c20 <__assert_fail@plt+0x44b0>
   15c68:	ldr	sl, [sp, #28]
   15c6c:	b	15e68 <__assert_fail@plt+0x46f8>
   15c70:	cmp	r0, #2
   15c74:	blt	15c90 <__assert_fail@plt+0x4520>
   15c78:	add	r0, sp, #32
   15c7c:	bl	19384 <__assert_fail@plt+0x7c14>
   15c80:	b	15d14 <__assert_fail@plt+0x45a4>
   15c84:	add	r0, sp, #32
   15c88:	bl	19318 <__assert_fail@plt+0x7ba8>
   15c8c:	b	15d14 <__assert_fail@plt+0x45a4>
   15c90:	ldr	r1, [sp, #68]	; 0x44
   15c94:	cmp	r8, #0
   15c98:	beq	15d0c <__assert_fail@plt+0x459c>
   15c9c:	ldr	r2, [sp, #80]	; 0x50
   15ca0:	ldr	r0, [sp, #60]	; 0x3c
   15ca4:	cmp	r1, r2
   15ca8:	movgt	r1, r2
   15cac:	cmp	r0, r1
   15cb0:	bge	15d00 <__assert_fail@plt+0x4590>
   15cb4:	ldr	r3, [sp, #56]	; 0x38
   15cb8:	ldr	r2, [sp, #32]
   15cbc:	ldr	r7, [sp, #96]	; 0x60
   15cc0:	add	r3, r3, r0
   15cc4:	ldrb	r2, [r2, r3]
   15cc8:	ldrb	r2, [r7, r2]
   15ccc:	strb	r2, [r4, r0]
   15cd0:	add	r0, r0, #1
   15cd4:	cmp	r0, r1
   15cd8:	bge	15d00 <__assert_fail@plt+0x4590>
   15cdc:	ldr	r2, [sp, #32]
   15ce0:	ldr	r7, [sp, #56]	; 0x38
   15ce4:	ldr	r6, [sp, #96]	; 0x60
   15ce8:	ldr	r3, [sp, #36]	; 0x24
   15cec:	add	r2, r2, r7
   15cf0:	ldrb	r2, [r2, r0]
   15cf4:	ldrb	r2, [r6, r2]
   15cf8:	strb	r2, [r3, r0]
   15cfc:	b	15cd0 <__assert_fail@plt+0x4560>
   15d00:	str	r0, [sp, #64]	; 0x40
   15d04:	str	r0, [sp, #60]	; 0x3c
   15d08:	b	15d14 <__assert_fail@plt+0x45a4>
   15d0c:	str	r1, [sp, #64]	; 0x40
   15d10:	str	r1, [sp, #60]	; 0x3c
   15d14:	ldr	sl, [sp, #28]
   15d18:	mov	r5, #0
   15d1c:	ldr	r6, [sp, #20]
   15d20:	sub	r8, fp, #48	; 0x30
   15d24:	add	r7, sp, #32
   15d28:	str	r5, [fp, #-52]	; 0xffffffcc
   15d2c:	mov	r0, r8
   15d30:	mov	r1, r7
   15d34:	str	r5, [sl, #24]
   15d38:	orr	r2, r6, #8388608	; 0x800000
   15d3c:	ldr	r4, [sl]
   15d40:	str	r6, [r4, #128]	; 0x80
   15d44:	bl	19774 <__assert_fail@plt+0x8004>
   15d48:	ldr	r1, [sp, #72]	; 0x48
   15d4c:	mov	r2, r8
   15d50:	mov	r3, r6
   15d54:	str	r5, [sp]
   15d58:	add	r0, r1, r0
   15d5c:	mov	r1, sl
   15d60:	str	r0, [sp, #72]	; 0x48
   15d64:	sub	r0, fp, #52	; 0x34
   15d68:	str	r0, [sp, #4]
   15d6c:	mov	r0, r7
   15d70:	bl	195c4 <__assert_fail@plt+0x7e54>
   15d74:	mov	r6, r0
   15d78:	cmp	r0, #0
   15d7c:	bne	15d8c <__assert_fail@plt+0x461c>
   15d80:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15d84:	cmp	r0, #0
   15d88:	bne	16534 <__assert_fail@plt+0x4dc4>
   15d8c:	mov	r0, #2
   15d90:	sub	r3, fp, #40	; 0x28
   15d94:	mov	r1, #0
   15d98:	mov	r2, #0
   15d9c:	str	r0, [fp, #-36]	; 0xffffffdc
   15da0:	mov	r0, r4
   15da4:	str	r5, [fp, #-40]	; 0xffffffd8
   15da8:	bl	1b594 <__assert_fail@plt+0x9e24>
   15dac:	mov	r7, r0
   15db0:	cmp	r6, #0
   15db4:	beq	15de0 <__assert_fail@plt+0x4670>
   15db8:	mov	r0, #16
   15dbc:	sub	r3, fp, #40	; 0x28
   15dc0:	mov	r1, r6
   15dc4:	mov	r2, r7
   15dc8:	str	r0, [fp, #-36]	; 0xffffffdc
   15dcc:	mov	r0, #0
   15dd0:	str	r0, [fp, #-40]	; 0xffffffd8
   15dd4:	mov	r0, r4
   15dd8:	bl	1b594 <__assert_fail@plt+0x9e24>
   15ddc:	b	15de4 <__assert_fail@plt+0x4674>
   15de0:	mov	r0, r7
   15de4:	cmp	r7, #0
   15de8:	cmpne	r0, #0
   15dec:	beq	1652c <__assert_fail@plt+0x4dbc>
   15df0:	str	r0, [r9, #52]	; 0x34
   15df4:	ldr	r8, [sl]
   15df8:	ldr	r0, [r8, #4]
   15dfc:	lsl	r0, r0, #2
   15e00:	bl	23994 <__assert_fail@plt+0x12224>
   15e04:	str	r0, [r8, #12]
   15e08:	ldr	r0, [r8, #4]
   15e0c:	lsl	r0, r0, #2
   15e10:	bl	23994 <__assert_fail@plt+0x12224>
   15e14:	str	r0, [r8, #16]
   15e18:	ldr	r0, [r8, #4]
   15e1c:	add	r0, r0, r0, lsl #1
   15e20:	lsl	r0, r0, #2
   15e24:	bl	23994 <__assert_fail@plt+0x12224>
   15e28:	str	r0, [r8, #20]
   15e2c:	ldr	r0, [r8, #4]
   15e30:	add	r0, r0, r0, lsl #1
   15e34:	lsl	r0, r0, #2
   15e38:	bl	23994 <__assert_fail@plt+0x12224>
   15e3c:	str	r0, [r8, #24]
   15e40:	ldr	r1, [r8, #12]
   15e44:	cmp	r1, #0
   15e48:	ldrne	r1, [r8, #16]
   15e4c:	cmpne	r1, #0
   15e50:	beq	15e64 <__assert_fail@plt+0x46f4>
   15e54:	cmp	r0, #0
   15e58:	ldrne	r0, [r8, #20]
   15e5c:	cmpne	r0, #0
   15e60:	bne	15eac <__assert_fail@plt+0x473c>
   15e64:	mov	r0, #12
   15e68:	str	r0, [fp, #-52]	; 0xffffffcc
   15e6c:	mov	r0, sl
   15e70:	bl	18c24 <__assert_fail@plt+0x74b4>
   15e74:	add	r0, sp, #32
   15e78:	bl	18c74 <__assert_fail@plt+0x7504>
   15e7c:	ldr	r0, [sp, #8]
   15e80:	cmp	r0, #0
   15e84:	beq	15e90 <__assert_fail@plt+0x4720>
   15e88:	add	r0, r9, #136	; 0x88
   15e8c:	bl	11434 <pthread_mutex_destroy@plt>
   15e90:	mov	r0, r9
   15e94:	bl	16b70 <__assert_fail@plt+0x5400>
   15e98:	mov	r0, #0
   15e9c:	str	r0, [sl]
   15ea0:	str	r0, [sl, #4]
   15ea4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15ea8:	b	16488 <__assert_fail@plt+0x4d18>
   15eac:	ldr	r0, [sl, #24]
   15eb0:	lsl	r0, r0, #2
   15eb4:	bl	23994 <__assert_fail@plt+0x12224>
   15eb8:	cmp	r0, #0
   15ebc:	str	r0, [r8, #132]	; 0x84
   15ec0:	beq	15f44 <__assert_fail@plt+0x47d4>
   15ec4:	ldr	r1, [sl, #24]
   15ec8:	cmp	r1, #0
   15ecc:	beq	15ee4 <__assert_fail@plt+0x4774>
   15ed0:	mov	r2, #0
   15ed4:	str	r2, [r0, r2, lsl #2]
   15ed8:	add	r2, r2, #1
   15edc:	cmp	r1, r2
   15ee0:	bne	15ed4 <__assert_fail@plt+0x4764>
   15ee4:	ldr	r0, [r8, #52]	; 0x34
   15ee8:	movw	r1, #50996	; 0xc734
   15eec:	mov	r2, r8
   15ef0:	movt	r1, #1
   15ef4:	bl	1c6b0 <__assert_fail@plt+0xaf40>
   15ef8:	ldr	r1, [sl, #24]
   15efc:	cmp	r1, #0
   15f00:	beq	15f28 <__assert_fail@plt+0x47b8>
   15f04:	ldr	r0, [r8, #132]	; 0x84
   15f08:	mov	r2, #0
   15f0c:	ldr	r3, [r0, r2, lsl #2]
   15f10:	cmp	r2, r3
   15f14:	bne	15f30 <__assert_fail@plt+0x47c0>
   15f18:	add	r2, r2, #1
   15f1c:	cmp	r1, r2
   15f20:	bne	15f0c <__assert_fail@plt+0x479c>
   15f24:	b	15f38 <__assert_fail@plt+0x47c8>
   15f28:	ldr	r0, [r8, #132]	; 0x84
   15f2c:	b	15f38 <__assert_fail@plt+0x47c8>
   15f30:	cmp	r1, r2
   15f34:	bne	15f44 <__assert_fail@plt+0x47d4>
   15f38:	bl	13bd0 <__assert_fail@plt+0x2460>
   15f3c:	mov	r0, #0
   15f40:	str	r0, [r8, #132]	; 0x84
   15f44:	ldr	r0, [r8, #52]	; 0x34
   15f48:	movw	r1, #51148	; 0xc7cc
   15f4c:	mov	r2, sl
   15f50:	movt	r1, #1
   15f54:	bl	1a020 <__assert_fail@plt+0x88b0>
   15f58:	cmp	r0, #0
   15f5c:	bne	15e68 <__assert_fail@plt+0x46f8>
   15f60:	ldr	r0, [r8, #52]	; 0x34
   15f64:	movw	r1, #51284	; 0xc854
   15f68:	mov	r2, r8
   15f6c:	movt	r1, #1
   15f70:	bl	1a020 <__assert_fail@plt+0x88b0>
   15f74:	cmp	r0, #0
   15f78:	bne	15e68 <__assert_fail@plt+0x46f8>
   15f7c:	ldr	r0, [r8, #52]	; 0x34
   15f80:	movw	r1, #51428	; 0xc8e4
   15f84:	mov	r2, r8
   15f88:	movt	r1, #1
   15f8c:	bl	1c6b0 <__assert_fail@plt+0xaf40>
   15f90:	ldr	r0, [r8, #52]	; 0x34
   15f94:	movw	r1, #51524	; 0xc944
   15f98:	mov	r2, r8
   15f9c:	movt	r1, #1
   15fa0:	bl	1c6b0 <__assert_fail@plt+0xaf40>
   15fa4:	cmp	r0, #0
   15fa8:	bne	15e68 <__assert_fail@plt+0x46f8>
   15fac:	mov	r5, #0
   15fb0:	sub	r7, fp, #40	; 0x28
   15fb4:	mov	r4, #0
   15fb8:	ldr	r0, [r8, #24]
   15fbc:	add	r6, r4, r4, lsl #1
   15fc0:	add	r0, r0, r6, lsl #2
   15fc4:	ldr	r0, [r0, #4]
   15fc8:	cmp	r0, #0
   15fcc:	beq	15fd8 <__assert_fail@plt+0x4868>
   15fd0:	mov	r1, r5
   15fd4:	b	16018 <__assert_fail@plt+0x48a8>
   15fd8:	mov	r0, r7
   15fdc:	mov	r1, r8
   15fe0:	mov	r2, r4
   15fe4:	mov	r3, #1
   15fe8:	bl	1cdf4 <__assert_fail@plt+0xb684>
   15fec:	cmp	r0, #0
   15ff0:	bne	15e68 <__assert_fail@plt+0x46f8>
   15ff4:	ldr	r0, [r8, #24]
   15ff8:	mov	r1, r5
   15ffc:	add	r0, r0, r6, lsl #2
   16000:	ldr	r0, [r0, #4]
   16004:	cmp	r0, #0
   16008:	bne	16018 <__assert_fail@plt+0x48a8>
   1600c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16010:	bl	13bd0 <__assert_fail@plt+0x2460>
   16014:	mov	r1, #1
   16018:	ldr	r2, [r8, #8]
   1601c:	add	r0, r4, #1
   16020:	subs	r3, r0, r2
   16024:	mov	r4, r3
   16028:	movwne	r3, #1
   1602c:	movne	r4, r0
   16030:	tst	r1, #1
   16034:	and	r5, r1, r3
   16038:	cmpeq	r0, r2
   1603c:	bne	15fb8 <__assert_fail@plt+0x4848>
   16040:	ldrb	r1, [sl, #28]
   16044:	tst	r1, #16
   16048:	bne	16064 <__assert_fail@plt+0x48f4>
   1604c:	ldr	r1, [sl, #24]
   16050:	cmp	r1, #0
   16054:	beq	16064 <__assert_fail@plt+0x48f4>
   16058:	ldrb	r1, [r8, #88]	; 0x58
   1605c:	tst	r1, #1
   16060:	bne	16070 <__assert_fail@plt+0x4900>
   16064:	ldr	r1, [r8, #76]	; 0x4c
   16068:	cmp	r1, #0
   1606c:	beq	16150 <__assert_fail@plt+0x49e0>
   16070:	add	r0, r0, r0, lsl #1
   16074:	lsl	r0, r0, #2
   16078:	bl	23994 <__assert_fail@plt+0x12224>
   1607c:	cmp	r0, #0
   16080:	str	r0, [r8, #28]
   16084:	beq	15e64 <__assert_fail@plt+0x46f4>
   16088:	ldr	r1, [r8, #8]
   1608c:	cmp	r1, #0
   16090:	beq	16150 <__assert_fail@plt+0x49e0>
   16094:	mov	r1, #0
   16098:	str	r1, [r0]
   1609c:	str	r1, [r0, #4]
   160a0:	str	r1, [r0, #8]
   160a4:	ldr	r0, [r8, #8]
   160a8:	cmp	r0, #2
   160ac:	bcc	160dc <__assert_fail@plt+0x496c>
   160b0:	mov	r2, #1
   160b4:	mov	r3, #12
   160b8:	ldr	r0, [r8, #28]
   160bc:	add	r2, r2, #1
   160c0:	str	r1, [r0, r3]!
   160c4:	add	r3, r3, #12
   160c8:	str	r1, [r0, #4]
   160cc:	str	r1, [r0, #8]
   160d0:	ldr	r0, [r8, #8]
   160d4:	cmp	r2, r0
   160d8:	bcc	160b8 <__assert_fail@plt+0x4948>
   160dc:	cmp	r0, #0
   160e0:	beq	16150 <__assert_fail@plt+0x49e0>
   160e4:	ldr	r1, [r8, #24]
   160e8:	mov	r4, #0
   160ec:	add	r5, r4, r4, lsl #1
   160f0:	add	r2, r1, r5, lsl #2
   160f4:	ldr	r3, [r2, #4]
   160f8:	cmp	r3, #1
   160fc:	blt	16144 <__assert_fail@plt+0x49d4>
   16100:	ldr	r7, [r2, #8]
   16104:	mov	r6, #0
   16108:	ldr	r0, [r7, r6, lsl #2]
   1610c:	ldr	r1, [r8, #28]
   16110:	add	r0, r0, r0, lsl #1
   16114:	add	r0, r1, r0, lsl #2
   16118:	mov	r1, r4
   1611c:	bl	1d60c <__assert_fail@plt+0xbe9c>
   16120:	cmp	r0, #0
   16124:	beq	15e64 <__assert_fail@plt+0x46f4>
   16128:	ldr	r1, [r8, #24]
   1612c:	add	r6, r6, #1
   16130:	add	r0, r1, r5, lsl #2
   16134:	ldr	r0, [r0, #4]
   16138:	cmp	r6, r0
   1613c:	blt	16108 <__assert_fail@plt+0x4998>
   16140:	ldr	r0, [r8, #8]
   16144:	add	r4, r4, #1
   16148:	cmp	r4, r0
   1614c:	bcc	160ec <__assert_fail@plt+0x497c>
   16150:	mov	r0, #0
   16154:	str	r0, [fp, #-52]	; 0xffffffcc
   16158:	ldr	r0, [sp, #16]
   1615c:	cmp	r0, #0
   16160:	bne	16298 <__assert_fail@plt+0x4b28>
   16164:	ldrb	r2, [r9, #88]	; 0x58
   16168:	ands	r0, r2, #4
   1616c:	beq	16298 <__assert_fail@plt+0x4b28>
   16170:	ldr	r0, [sp, #28]
   16174:	ldr	r0, [r0, #20]
   16178:	cmp	r0, #0
   1617c:	bne	16298 <__assert_fail@plt+0x4b28>
   16180:	ldr	r7, [r9, #8]
   16184:	mov	sl, #0
   16188:	cmp	r7, #0
   1618c:	beq	1626c <__assert_fail@plt+0x4afc>
   16190:	ldr	r3, [r9]
   16194:	mov	r8, #0
   16198:	mov	ip, #1
   1619c:	mov	lr, #139	; 0x8b
   161a0:	mov	r6, #0
   161a4:	mov	r4, #0
   161a8:	add	r1, r3, r4, lsl #3
   161ac:	ldrb	r5, [r1, #4]
   161b0:	sub	r5, r5, #1
   161b4:	cmp	r5, #11
   161b8:	bhi	16550 <__assert_fail@plt+0x4de0>
   161bc:	add	r0, pc, #0
   161c0:	ldr	pc, [r0, r5, lsl #2]
   161c4:	andeq	r6, r1, ip, asr #4
   161c8:	strdeq	r6, [r1], -r4
   161cc:	andeq	r6, r1, r4, lsl #4
   161d0:	strdeq	r6, [r1], -r4
   161d4:	andeq	r6, r1, r4, ror #4
   161d8:	muleq	r1, r8, r2
   161dc:	andeq	r6, r1, r0, asr r5
   161e0:	strdeq	r6, [r1], -r4
   161e4:	strdeq	r6, [r1], -r4
   161e8:	strdeq	r6, [r1], -r4
   161ec:	strdeq	r6, [r1], -r4
   161f0:	andeq	r6, r1, ip, lsr #4
   161f4:	add	r4, r4, #1
   161f8:	cmp	r4, r7
   161fc:	bne	161a8 <__assert_fail@plt+0x4a38>
   16200:	b	16494 <__assert_fail@plt+0x4d24>
   16204:	ldr	r0, [r3, r4, lsl #3]
   16208:	mov	r1, #0
   1620c:	add	r5, r0, #16
   16210:	ldr	r0, [r5, r1, lsl #2]
   16214:	cmp	r0, #0
   16218:	bne	16298 <__assert_fail@plt+0x4b28>
   1621c:	add	r1, r1, #1
   16220:	cmp	r1, #4
   16224:	bne	16210 <__assert_fail@plt+0x4aa0>
   16228:	b	161f4 <__assert_fail@plt+0x4a84>
   1622c:	ldr	r0, [r3, r4, lsl #3]
   16230:	sub	r0, r0, #16
   16234:	ror	r1, r0, #4
   16238:	cmp	r1, #7
   1623c:	bhi	16298 <__assert_fail@plt+0x4b28>
   16240:	tst	lr, ip, lsl r1
   16244:	bne	161f4 <__assert_fail@plt+0x4a84>
   16248:	b	16298 <__assert_fail@plt+0x4b28>
   1624c:	ldrsb	r0, [r1]
   16250:	cmp	r0, #0
   16254:	mov	r0, #0
   16258:	movwmi	r0, #1
   1625c:	orr	r6, r6, r0
   16260:	b	161f4 <__assert_fail@plt+0x4a84>
   16264:	mov	r8, #1
   16268:	b	161f4 <__assert_fail@plt+0x4a84>
   1626c:	mov	r8, #0
   16270:	mov	r0, #1
   16274:	and	r1, r2, #249	; 0xf9
   16278:	str	r0, [r9, #92]	; 0x5c
   1627c:	ldr	r0, [r9, #76]	; 0x4c
   16280:	cmp	r0, #0
   16284:	movwgt	sl, #1
   16288:	orr	r0, r8, sl
   1628c:	and	r0, r0, #1
   16290:	orr	r0, r1, r0, lsl #1
   16294:	strb	r0, [r9, #88]	; 0x58
   16298:	ldr	r1, [r9, #52]	; 0x34
   1629c:	ldr	r0, [r9, #24]
   162a0:	ldr	r1, [r1, #12]
   162a4:	ldr	r1, [r1, #28]
   162a8:	str	r1, [r9, #72]	; 0x48
   162ac:	add	r1, r1, r1, lsl #1
   162b0:	add	r1, r0, r1, lsl #2
   162b4:	sub	r0, fp, #40	; 0x28
   162b8:	bl	1d678 <__assert_fail@plt+0xbf08>
   162bc:	cmp	r0, #0
   162c0:	str	r0, [fp, #-48]	; 0xffffffd0
   162c4:	bne	16548 <__assert_fail@plt+0x4dd8>
   162c8:	ldr	r0, [r9, #76]	; 0x4c
   162cc:	ldr	sl, [sp, #28]
   162d0:	cmp	r0, #1
   162d4:	blt	163a8 <__assert_fail@plt+0x4c38>
   162d8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   162dc:	cmp	r7, #1
   162e0:	blt	163a8 <__assert_fail@plt+0x4c38>
   162e4:	mov	r6, #0
   162e8:	sub	r8, fp, #40	; 0x28
   162ec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   162f0:	ldr	r2, [r9]
   162f4:	ldr	r0, [r1, r6, lsl #2]
   162f8:	add	r3, r2, r0, lsl #3
   162fc:	ldrb	r3, [r3, #4]
   16300:	cmp	r3, #4
   16304:	bne	1639c <__assert_fail@plt+0x4c2c>
   16308:	mov	r3, #0
   1630c:	cmp	r7, #1
   16310:	blt	16348 <__assert_fail@plt+0x4bd8>
   16314:	ldr	r5, [r1, r3, lsl #2]
   16318:	add	r4, r2, r5, lsl #3
   1631c:	ldrb	r4, [r4, #4]
   16320:	cmp	r4, #9
   16324:	bne	16338 <__assert_fail@plt+0x4bc8>
   16328:	ldr	r4, [r2, r0, lsl #3]
   1632c:	ldr	r5, [r2, r5, lsl #3]
   16330:	cmp	r5, r4
   16334:	beq	16348 <__assert_fail@plt+0x4bd8>
   16338:	add	r3, r3, #1
   1633c:	cmp	r7, r3
   16340:	bne	16314 <__assert_fail@plt+0x4ba4>
   16344:	b	1639c <__assert_fail@plt+0x4c2c>
   16348:	cmp	r3, r7
   1634c:	beq	1639c <__assert_fail@plt+0x4c2c>
   16350:	ldr	r1, [r9, #20]
   16354:	add	r0, r0, r0, lsl #1
   16358:	add	r0, r1, r0, lsl #2
   1635c:	ldr	r0, [r0, #8]
   16360:	ldr	r4, [r0]
   16364:	mov	r0, r8
   16368:	mov	r1, r4
   1636c:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   16370:	cmp	r0, #0
   16374:	bne	1639c <__assert_fail@plt+0x4c2c>
   16378:	ldr	r0, [r9, #24]
   1637c:	add	r1, r4, r4, lsl #1
   16380:	add	r1, r0, r1, lsl #2
   16384:	mov	r0, r8
   16388:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   1638c:	cmp	r0, #0
   16390:	bne	16464 <__assert_fail@plt+0x4cf4>
   16394:	ldr	r7, [fp, #-36]	; 0xffffffdc
   16398:	mov	r6, #0
   1639c:	add	r6, r6, #1
   163a0:	cmp	r6, r7
   163a4:	blt	162ec <__assert_fail@plt+0x4b7c>
   163a8:	sub	r0, fp, #48	; 0x30
   163ac:	sub	r2, fp, #40	; 0x28
   163b0:	mov	r1, r9
   163b4:	mov	r3, #0
   163b8:	bl	1d75c <__assert_fail@plt+0xbfec>
   163bc:	cmp	r0, #0
   163c0:	str	r0, [r9, #36]	; 0x24
   163c4:	beq	16444 <__assert_fail@plt+0x4cd4>
   163c8:	ldrsb	r1, [r0, #52]	; 0x34
   163cc:	cmn	r1, #1
   163d0:	ble	163e4 <__assert_fail@plt+0x4c74>
   163d4:	str	r0, [r9, #40]	; 0x28
   163d8:	str	r0, [r9, #44]	; 0x2c
   163dc:	str	r0, [r9, #48]	; 0x30
   163e0:	b	16458 <__assert_fail@plt+0x4ce8>
   163e4:	sub	r4, fp, #48	; 0x30
   163e8:	sub	r6, fp, #40	; 0x28
   163ec:	mov	r1, r9
   163f0:	mov	r3, #1
   163f4:	mov	r0, r4
   163f8:	mov	r2, r6
   163fc:	bl	1d75c <__assert_fail@plt+0xbfec>
   16400:	str	r0, [r9, #40]	; 0x28
   16404:	mov	r0, r4
   16408:	mov	r1, r9
   1640c:	mov	r2, r6
   16410:	mov	r3, #2
   16414:	bl	1d75c <__assert_fail@plt+0xbfec>
   16418:	str	r0, [r9, #44]	; 0x2c
   1641c:	mov	r0, r4
   16420:	mov	r1, r9
   16424:	mov	r2, r6
   16428:	mov	r3, #6
   1642c:	bl	1d75c <__assert_fail@plt+0xbfec>
   16430:	str	r0, [r9, #48]	; 0x30
   16434:	ldr	r1, [r9, #40]	; 0x28
   16438:	cmp	r1, #0
   1643c:	cmpne	r0, #0
   16440:	bne	1644c <__assert_fail@plt+0x4cdc>
   16444:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16448:	b	16464 <__assert_fail@plt+0x4cf4>
   1644c:	ldr	r0, [r9, #44]	; 0x2c
   16450:	cmp	r0, #0
   16454:	beq	16444 <__assert_fail@plt+0x4cd4>
   16458:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1645c:	bl	13bd0 <__assert_fail@plt+0x2460>
   16460:	mov	r0, #0
   16464:	str	r0, [fp, #-52]	; 0xffffffcc
   16468:	mov	r0, sl
   1646c:	bl	18c24 <__assert_fail@plt+0x74b4>
   16470:	add	r0, sp, #32
   16474:	bl	18c74 <__assert_fail@plt+0x7504>
   16478:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1647c:	mov	r4, #0
   16480:	cmp	r0, #0
   16484:	bne	15e7c <__assert_fail@plt+0x470c>
   16488:	mov	r0, r4
   1648c:	sub	sp, fp, #28
   16490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16494:	orr	r0, r6, r8
   16498:	tst	r0, #1
   1649c:	beq	16270 <__assert_fail@plt+0x4b00>
   164a0:	mov	r2, #0
   164a4:	mov	r7, #7
   164a8:	add	r3, r3, r2, lsl #3
   164ac:	ldr	r6, [r3, #4]
   164b0:	uxtb	r1, r6
   164b4:	cmp	r1, #5
   164b8:	beq	164d8 <__assert_fail@plt+0x4d68>
   164bc:	cmp	r1, #1
   164c0:	bne	164e0 <__assert_fail@plt+0x4d70>
   164c4:	ldrsb	r0, [r3]
   164c8:	cmn	r0, #1
   164cc:	bicle	r0, r6, #2097152	; 0x200000
   164d0:	strle	r0, [r3, #4]
   164d4:	b	164e0 <__assert_fail@plt+0x4d70>
   164d8:	bfi	r6, r7, #0, #8
   164dc:	str	r6, [r3, #4]
   164e0:	ldr	r0, [r9, #8]
   164e4:	add	r2, r2, #1
   164e8:	cmp	r2, r0
   164ec:	bcs	164f8 <__assert_fail@plt+0x4d88>
   164f0:	ldr	r3, [r9]
   164f4:	b	164a8 <__assert_fail@plt+0x4d38>
   164f8:	ldrb	r2, [r9, #88]	; 0x58
   164fc:	b	16270 <__assert_fail@plt+0x4b00>
   16500:	mov	r0, r9
   16504:	mov	r1, #160	; 0xa0
   16508:	mov	r4, #160	; 0xa0
   1650c:	bl	239c4 <__assert_fail@plt+0x12254>
   16510:	cmp	r0, #0
   16514:	beq	16540 <__assert_fail@plt+0x4dd0>
   16518:	mov	r9, r0
   1651c:	ldr	r0, [sp, #28]
   16520:	str	r9, [r0]
   16524:	str	r4, [r0, #4]
   16528:	b	1595c <__assert_fail@plt+0x41ec>
   1652c:	mov	r0, #12
   16530:	str	r0, [fp, #-52]	; 0xffffffcc
   16534:	mov	r0, #0
   16538:	str	r0, [r9, #52]	; 0x34
   1653c:	b	15e6c <__assert_fail@plt+0x46fc>
   16540:	mov	r4, #12
   16544:	b	16488 <__assert_fail@plt+0x4d18>
   16548:	ldr	sl, [sp, #28]
   1654c:	b	16464 <__assert_fail@plt+0x4cf4>
   16550:	bl	1174c <abort@plt>
   16554:	movw	r2, #25588	; 0x63f4
   16558:	movt	r2, #3
   1655c:	ldr	r1, [r2]
   16560:	str	r0, [r2]
   16564:	mov	r0, r1
   16568:	bx	lr
   1656c:	push	{r4, r5, r6, sl, fp, lr}
   16570:	add	fp, sp, #16
   16574:	ldr	r5, [r0, #16]
   16578:	ldr	r6, [r0]
   1657c:	mov	r4, r0
   16580:	mov	r1, #0
   16584:	mov	r2, #256	; 0x100
   16588:	mov	r0, r5
   1658c:	bl	1165c <memset@plt>
   16590:	ldr	r1, [r6, #36]	; 0x24
   16594:	mov	r0, r4
   16598:	mov	r2, r5
   1659c:	bl	16604 <__assert_fail@plt+0x4e94>
   165a0:	ldr	r0, [r6, #36]	; 0x24
   165a4:	ldr	r1, [r6, #40]	; 0x28
   165a8:	cmp	r0, r1
   165ac:	beq	165c0 <__assert_fail@plt+0x4e50>
   165b0:	mov	r0, r4
   165b4:	mov	r2, r5
   165b8:	bl	16604 <__assert_fail@plt+0x4e94>
   165bc:	ldr	r0, [r6, #36]	; 0x24
   165c0:	ldr	r1, [r6, #44]	; 0x2c
   165c4:	cmp	r0, r1
   165c8:	beq	165dc <__assert_fail@plt+0x4e6c>
   165cc:	mov	r0, r4
   165d0:	mov	r2, r5
   165d4:	bl	16604 <__assert_fail@plt+0x4e94>
   165d8:	ldr	r0, [r6, #36]	; 0x24
   165dc:	ldr	r1, [r6, #48]	; 0x30
   165e0:	cmp	r0, r1
   165e4:	movne	r0, r4
   165e8:	movne	r2, r5
   165ec:	blne	16604 <__assert_fail@plt+0x4e94>
   165f0:	ldrb	r0, [r4, #28]
   165f4:	orr	r0, r0, #8
   165f8:	strb	r0, [r4, #28]
   165fc:	mov	r0, #0
   16600:	pop	{r4, r5, r6, sl, fp, pc}
   16604:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16608:	add	fp, sp, #28
   1660c:	sub	sp, sp, #308	; 0x134
   16610:	ldr	r8, [r0]
   16614:	str	r0, [sp, #20]
   16618:	mov	r5, r2
   1661c:	mov	r9, #0
   16620:	ldr	r0, [r8, #92]	; 0x5c
   16624:	cmp	r0, #1
   16628:	bne	16638 <__assert_fail@plt+0x4ec8>
   1662c:	ldr	r0, [sp, #20]
   16630:	ldrb	r0, [r0, #14]
   16634:	ubfx	r9, r0, #6, #1
   16638:	ldr	r0, [r1, #8]
   1663c:	cmp	r0, #1
   16640:	blt	1697c <__assert_fail@plt+0x520c>
   16644:	add	r0, sp, #32
   16648:	mov	r7, #1
   1664c:	mov	r2, #0
   16650:	str	r1, [sp, #12]
   16654:	str	r8, [sp, #24]
   16658:	add	r0, r0, #1
   1665c:	str	r0, [sp, #4]
   16660:	movw	r0, #1
   16664:	movt	r0, #32
   16668:	add	r0, r0, #254	; 0xfe
   1666c:	str	r0, [sp, #8]
   16670:	ldr	r0, [r1, #12]
   16674:	str	r2, [sp, #16]
   16678:	ldr	sl, [r0, r2, lsl #2]
   1667c:	ldr	r0, [r8]
   16680:	add	r1, r0, sl, lsl #3
   16684:	ldrb	r4, [r1, #4]
   16688:	sub	r1, r4, #1
   1668c:	cmp	r1, #6
   16690:	bhi	16938 <__assert_fail@plt+0x51c8>
   16694:	add	r2, pc, #0
   16698:	ldr	pc, [r2, r1, lsl #2]
   1669c:			; <UNDEFINED> instruction: 0x000166b8
   166a0:	andeq	r6, r1, r4, asr r9
   166a4:	andeq	r6, r1, ip, lsr #15
   166a8:	andeq	r6, r1, r8, lsr r9
   166ac:	andeq	r6, r1, r4, asr r9
   166b0:	andeq	r6, r1, r4, lsl r8
   166b4:	andeq	r6, r1, r4, asr r9
   166b8:	ldrb	r0, [r0, sl, lsl #3]
   166bc:	cmp	r9, #0
   166c0:	strb	r7, [r5, r0]
   166c4:	beq	166d0 <__assert_fail@plt+0x4f60>
   166c8:	bl	11494 <tolower@plt>
   166cc:	strb	r7, [r5, r0]
   166d0:	ldr	r0, [sp, #20]
   166d4:	ldrb	r0, [r0, #14]
   166d8:	tst	r0, #64	; 0x40
   166dc:	beq	16938 <__assert_fail@plt+0x51c8>
   166e0:	ldr	r0, [r8, #92]	; 0x5c
   166e4:	cmp	r0, #2
   166e8:	blt	16938 <__assert_fail@plt+0x51c8>
   166ec:	ldr	r0, [r8]
   166f0:	add	r1, sl, #1
   166f4:	movw	r4, #1
   166f8:	add	r6, sp, #32
   166fc:	movt	r4, #32
   16700:	ldrb	r0, [r0, sl, lsl #3]
   16704:	strb	r0, [sp, #32]
   16708:	ldr	r0, [r8, #8]
   1670c:	cmp	r1, r0
   16710:	ldr	r0, [sp, #4]
   16714:	bcs	16758 <__assert_fail@plt+0x4fe8>
   16718:	ldr	r0, [sp, #4]
   1671c:	ldr	r1, [r8]
   16720:	ldr	r3, [sp, #8]
   16724:	add	r1, r1, sl, lsl #3
   16728:	ldr	r2, [r1, #12]
   1672c:	and	r2, r2, r3
   16730:	cmp	r2, r4
   16734:	bne	16758 <__assert_fail@plt+0x4fe8>
   16738:	ldrb	r1, [r1, #8]
   1673c:	add	r3, sl, #2
   16740:	strb	r1, [r0], #1
   16744:	add	r1, sl, #1
   16748:	ldr	r2, [r8, #8]
   1674c:	mov	sl, r1
   16750:	cmp	r3, r2
   16754:	bcc	1671c <__assert_fail@plt+0x4fac>
   16758:	mov	r1, #0
   1675c:	sub	r4, r0, r6
   16760:	sub	r0, fp, #36	; 0x24
   16764:	sub	r3, fp, #48	; 0x30
   16768:	str	r1, [fp, #-44]	; 0xffffffd4
   1676c:	str	r1, [fp, #-48]	; 0xffffffd0
   16770:	mov	r1, r6
   16774:	mov	r2, r4
   16778:	bl	23d60 <__assert_fail@plt+0x125f0>
   1677c:	cmp	r0, r4
   16780:	bne	16938 <__assert_fail@plt+0x51c8>
   16784:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16788:	bl	114ac <towlower@plt>
   1678c:	mov	r1, r0
   16790:	mov	r0, r6
   16794:	sub	r2, fp, #48	; 0x30
   16798:	bl	11404 <wcrtomb@plt>
   1679c:	cmn	r0, #1
   167a0:	ldrbne	r0, [sp, #32]
   167a4:	strbne	r7, [r5, r0]
   167a8:	b	16938 <__assert_fail@plt+0x51c8>
   167ac:	mov	r4, #0
   167b0:	mov	r6, #0
   167b4:	str	sl, [sp, #28]
   167b8:	ldr	r0, [r0, sl, lsl #3]
   167bc:	mov	sl, #0
   167c0:	ldr	r8, [r0, r6, lsl #2]
   167c4:	tst	r8, r7, lsl sl
   167c8:	strbne	r7, [r5, r4]
   167cc:	cmpne	r9, #0
   167d0:	bne	167e8 <__assert_fail@plt+0x5078>
   167d4:	add	sl, sl, #1
   167d8:	add	r4, r4, #1
   167dc:	cmp	sl, #32
   167e0:	bne	167c4 <__assert_fail@plt+0x5054>
   167e4:	b	167f8 <__assert_fail@plt+0x5088>
   167e8:	mov	r0, r4
   167ec:	bl	11494 <tolower@plt>
   167f0:	strb	r7, [r5, r0]
   167f4:	b	167d4 <__assert_fail@plt+0x5064>
   167f8:	ldr	r8, [sp, #24]
   167fc:	ldr	sl, [sp, #28]
   16800:	add	r6, r6, #1
   16804:	cmp	r6, #8
   16808:	beq	16938 <__assert_fail@plt+0x51c8>
   1680c:	ldr	r0, [r8]
   16810:	b	167b8 <__assert_fail@plt+0x5048>
   16814:	ldr	r4, [r0, sl, lsl #3]
   16818:	ldr	r0, [r8, #92]	; 0x5c
   1681c:	cmp	r0, #2
   16820:	blt	16894 <__assert_fail@plt+0x5124>
   16824:	ldr	r0, [r4, #36]	; 0x24
   16828:	cmp	r0, #0
   1682c:	bne	16848 <__assert_fail@plt+0x50d8>
   16830:	ldrb	r0, [r4, #16]
   16834:	tst	r0, #1
   16838:	bne	16848 <__assert_fail@plt+0x50d8>
   1683c:	ldr	r0, [r4, #32]
   16840:	cmp	r0, #0
   16844:	beq	16894 <__assert_fail@plt+0x5124>
   16848:	mov	r6, #0
   1684c:	add	r4, sp, #32
   16850:	strb	r6, [fp, #-48]	; 0xffffffd0
   16854:	mov	r0, #0
   16858:	sub	r1, fp, #48	; 0x30
   1685c:	mov	r2, #1
   16860:	mov	r3, r4
   16864:	str	r6, [sp, #36]	; 0x24
   16868:	str	r6, [sp, #32]
   1686c:	bl	23d60 <__assert_fail@plt+0x125f0>
   16870:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   16874:	cmn	r0, #2
   16878:	add	r0, r1, #1
   1687c:	strbeq	r7, [r5, r1]
   16880:	uxtb	r1, r0
   16884:	strb	r0, [fp, #-48]	; 0xffffffd0
   16888:	cmp	r1, r0
   1688c:	beq	16854 <__assert_fail@plt+0x50e4>
   16890:	b	16938 <__assert_fail@plt+0x51c8>
   16894:	ldr	r0, [r4, #20]
   16898:	cmp	r0, #1
   1689c:	blt	16938 <__assert_fail@plt+0x51c8>
   168a0:	mov	r6, #0
   168a4:	mov	r0, #0
   168a8:	sub	r2, fp, #48	; 0x30
   168ac:	str	r0, [fp, #-44]	; 0xffffffd4
   168b0:	str	r0, [fp, #-48]	; 0xffffffd0
   168b4:	ldr	r0, [r4]
   168b8:	ldr	r1, [r0, r6, lsl #2]
   168bc:	add	r0, sp, #32
   168c0:	bl	11404 <wcrtomb@plt>
   168c4:	cmn	r0, #1
   168c8:	beq	168e4 <__assert_fail@plt+0x5174>
   168cc:	ldrb	r0, [sp, #32]
   168d0:	cmp	r9, #0
   168d4:	strb	r7, [r5, r0]
   168d8:	beq	168e4 <__assert_fail@plt+0x5174>
   168dc:	bl	11494 <tolower@plt>
   168e0:	strb	r7, [r5, r0]
   168e4:	ldr	r0, [sp, #20]
   168e8:	ldrb	r0, [r0, #14]
   168ec:	tst	r0, #64	; 0x40
   168f0:	beq	16928 <__assert_fail@plt+0x51b8>
   168f4:	ldr	r0, [r8, #92]	; 0x5c
   168f8:	cmp	r0, #2
   168fc:	blt	16928 <__assert_fail@plt+0x51b8>
   16900:	ldr	r0, [r4]
   16904:	ldr	r0, [r0, r6, lsl #2]
   16908:	bl	114ac <towlower@plt>
   1690c:	mov	r1, r0
   16910:	add	r0, sp, #32
   16914:	sub	r2, fp, #48	; 0x30
   16918:	bl	11404 <wcrtomb@plt>
   1691c:	cmn	r0, #1
   16920:	ldrbne	r0, [sp, #32]
   16924:	strbne	r7, [r5, r0]
   16928:	ldr	r0, [r4, #20]
   1692c:	add	r6, r6, #1
   16930:	cmp	r6, r0
   16934:	blt	168a4 <__assert_fail@plt+0x5134>
   16938:	ldr	r1, [sp, #12]
   1693c:	ldr	r2, [sp, #16]
   16940:	ldr	r0, [r1, #8]
   16944:	add	r2, r2, #1
   16948:	cmp	r2, r0
   1694c:	blt	16670 <__assert_fail@plt+0x4f00>
   16950:	b	1697c <__assert_fail@plt+0x520c>
   16954:	mov	r0, r5
   16958:	mov	r1, #1
   1695c:	mov	r2, #256	; 0x100
   16960:	bl	1165c <memset@plt>
   16964:	cmp	r4, #2
   16968:	bne	1697c <__assert_fail@plt+0x520c>
   1696c:	ldr	r1, [sp, #20]
   16970:	ldrb	r0, [r1, #28]
   16974:	orr	r0, r0, #1
   16978:	strb	r0, [r1, #28]
   1697c:	sub	sp, fp, #28
   16980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16984:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16988:	add	fp, sp, #24
   1698c:	mov	r4, r0
   16990:	mov	r0, #0
   16994:	mov	r6, r2
   16998:	mov	r8, r1
   1699c:	str	r0, [r4]
   169a0:	str	r0, [r4, #4]
   169a4:	str	r0, [r4, #8]
   169a8:	mov	r0, #256	; 0x100
   169ac:	bl	23994 <__assert_fail@plt+0x12224>
   169b0:	cmp	r0, #0
   169b4:	str	r0, [r4, #16]
   169b8:	beq	16a68 <__assert_fail@plt+0x52f8>
   169bc:	movw	r0, #45820	; 0xb2fc
   169c0:	tst	r6, #1
   169c4:	and	r1, r6, #2
   169c8:	movt	r0, #3
   169cc:	movweq	r0, #710	; 0x2c6
   169d0:	movteq	r0, #257	; 0x101
   169d4:	tst	r6, #4
   169d8:	orr	r5, r0, r1, lsl #21
   169dc:	bne	169f0 <__assert_fail@plt+0x5280>
   169e0:	ldrb	r0, [r4, #28]
   169e4:	and	r0, r0, #127	; 0x7f
   169e8:	strb	r0, [r4, #28]
   169ec:	b	16a10 <__assert_fail@plt+0x52a0>
   169f0:	ldrb	r0, [r4, #28]
   169f4:	mvn	r1, #127	; 0x7f
   169f8:	orr	r0, r0, r1
   169fc:	movw	r1, #45758	; 0xb2be
   16a00:	movt	r1, #323	; 0x143
   16a04:	strb	r0, [r4, #28]
   16a08:	and	r1, r5, r1
   16a0c:	orr	r5, r1, #256	; 0x100
   16a10:	and	r1, r6, #8
   16a14:	and	r0, r0, #239	; 0xef
   16a18:	mov	r7, #0
   16a1c:	orr	r0, r0, r1, lsl #1
   16a20:	str	r7, [r4, #20]
   16a24:	strb	r0, [r4, #28]
   16a28:	mov	r0, r8
   16a2c:	bl	11614 <strlen@plt>
   16a30:	mov	r2, r0
   16a34:	mov	r0, r4
   16a38:	mov	r1, r8
   16a3c:	mov	r3, r5
   16a40:	bl	15910 <__assert_fail@plt+0x41a0>
   16a44:	cmp	r0, #16
   16a48:	mov	r5, r0
   16a4c:	movweq	r5, #8
   16a50:	cmp	r5, #0
   16a54:	bne	16a70 <__assert_fail@plt+0x5300>
   16a58:	mov	r0, r4
   16a5c:	bl	1656c <__assert_fail@plt+0x4dfc>
   16a60:	mov	r0, r7
   16a64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a68:	mov	r7, #12
   16a6c:	b	16a60 <__assert_fail@plt+0x52f0>
   16a70:	ldr	r0, [r4, #16]
   16a74:	bl	13bd0 <__assert_fail@plt+0x2460>
   16a78:	str	r7, [r4, #16]
   16a7c:	mov	r7, r5
   16a80:	b	16a60 <__assert_fail@plt+0x52f0>
   16a84:	push	{r4, r5, r6, r7, fp, lr}
   16a88:	add	fp, sp, #16
   16a8c:	cmp	r0, #17
   16a90:	bcs	16b04 <__assert_fail@plt+0x5394>
   16a94:	movw	r1, #20568	; 0x5058
   16a98:	mov	r4, r2
   16a9c:	mov	r2, #5
   16aa0:	mov	r5, r3
   16aa4:	movt	r1, #2
   16aa8:	ldr	r0, [r1, r0, lsl #2]
   16aac:	movw	r1, #20184	; 0x4ed8
   16ab0:	movt	r1, #2
   16ab4:	add	r1, r1, r0
   16ab8:	mov	r0, #0
   16abc:	bl	114dc <dcgettext@plt>
   16ac0:	mov	r6, r0
   16ac4:	bl	11614 <strlen@plt>
   16ac8:	add	r7, r0, #1
   16acc:	cmp	r5, #0
   16ad0:	beq	16aec <__assert_fail@plt+0x537c>
   16ad4:	cmp	r7, r5
   16ad8:	mov	r2, r7
   16adc:	bhi	16af4 <__assert_fail@plt+0x5384>
   16ae0:	mov	r0, r4
   16ae4:	mov	r1, r6
   16ae8:	bl	11488 <memcpy@plt>
   16aec:	mov	r0, r7
   16af0:	pop	{r4, r5, r6, r7, fp, pc}
   16af4:	sub	r2, r5, #1
   16af8:	mov	r0, #0
   16afc:	strb	r0, [r4, r2]
   16b00:	b	16ae0 <__assert_fail@plt+0x5370>
   16b04:	bl	1174c <abort@plt>
   16b08:	push	{r4, r5, fp, lr}
   16b0c:	add	fp, sp, #8
   16b10:	ldr	r5, [r0]
   16b14:	mov	r4, r0
   16b18:	cmp	r5, #0
   16b1c:	beq	16b48 <__assert_fail@plt+0x53d8>
   16b20:	movw	r0, #0
   16b24:	movw	r1, #0
   16b28:	movt	r0, #0
   16b2c:	movt	r1, #0
   16b30:	orrs	r0, r1, r0
   16b34:	beq	16b40 <__assert_fail@plt+0x53d0>
   16b38:	add	r0, r5, #136	; 0x88
   16b3c:	bl	11434 <pthread_mutex_destroy@plt>
   16b40:	mov	r0, r5
   16b44:	bl	16b70 <__assert_fail@plt+0x5400>
   16b48:	mov	r5, #0
   16b4c:	str	r5, [r4]
   16b50:	str	r5, [r4, #4]
   16b54:	ldr	r0, [r4, #16]
   16b58:	bl	13bd0 <__assert_fail@plt+0x2460>
   16b5c:	str	r5, [r4, #16]
   16b60:	ldr	r0, [r4, #20]
   16b64:	bl	13bd0 <__assert_fail@plt+0x2460>
   16b68:	str	r5, [r4, #20]
   16b6c:	pop	{r4, r5, fp, pc}
   16b70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16b74:	add	fp, sp, #24
   16b78:	mov	r8, r0
   16b7c:	ldr	r0, [r0]
   16b80:	cmp	r0, #0
   16b84:	beq	16bcc <__assert_fail@plt+0x545c>
   16b88:	ldr	r1, [r8, #8]
   16b8c:	cmp	r1, #0
   16b90:	beq	16bcc <__assert_fail@plt+0x545c>
   16b94:	bl	18b5c <__assert_fail@plt+0x73ec>
   16b98:	ldr	r0, [r8, #8]
   16b9c:	cmp	r0, #2
   16ba0:	bcc	16bcc <__assert_fail@plt+0x545c>
   16ba4:	mov	r5, #1
   16ba8:	mov	r6, #8
   16bac:	ldr	r0, [r8]
   16bb0:	add	r0, r0, r6
   16bb4:	bl	18b5c <__assert_fail@plt+0x73ec>
   16bb8:	ldr	r0, [r8, #8]
   16bbc:	add	r5, r5, #1
   16bc0:	add	r6, r6, #8
   16bc4:	cmp	r5, r0
   16bc8:	bcc	16bac <__assert_fail@plt+0x543c>
   16bcc:	ldr	r0, [r8, #12]
   16bd0:	bl	13bd0 <__assert_fail@plt+0x2460>
   16bd4:	ldr	r0, [r8, #8]
   16bd8:	cmp	r0, #0
   16bdc:	beq	16c38 <__assert_fail@plt+0x54c8>
   16be0:	mov	r5, #0
   16be4:	mov	r6, #8
   16be8:	ldr	r0, [r8, #24]
   16bec:	cmp	r0, #0
   16bf0:	beq	16bfc <__assert_fail@plt+0x548c>
   16bf4:	ldr	r0, [r0, r6]
   16bf8:	bl	13bd0 <__assert_fail@plt+0x2460>
   16bfc:	ldr	r0, [r8, #28]
   16c00:	cmp	r0, #0
   16c04:	beq	16c10 <__assert_fail@plt+0x54a0>
   16c08:	ldr	r0, [r0, r6]
   16c0c:	bl	13bd0 <__assert_fail@plt+0x2460>
   16c10:	ldr	r0, [r8, #20]
   16c14:	cmp	r0, #0
   16c18:	beq	16c24 <__assert_fail@plt+0x54b4>
   16c1c:	ldr	r0, [r0, r6]
   16c20:	bl	13bd0 <__assert_fail@plt+0x2460>
   16c24:	ldr	r0, [r8, #8]
   16c28:	add	r5, r5, #1
   16c2c:	add	r6, r6, #12
   16c30:	cmp	r5, r0
   16c34:	bcc	16be8 <__assert_fail@plt+0x5478>
   16c38:	ldr	r0, [r8, #20]
   16c3c:	bl	13bd0 <__assert_fail@plt+0x2460>
   16c40:	ldr	r0, [r8, #24]
   16c44:	bl	13bd0 <__assert_fail@plt+0x2460>
   16c48:	ldr	r0, [r8, #28]
   16c4c:	bl	13bd0 <__assert_fail@plt+0x2460>
   16c50:	ldr	r0, [r8]
   16c54:	bl	13bd0 <__assert_fail@plt+0x2460>
   16c58:	ldr	r5, [r8, #32]
   16c5c:	cmp	r5, #0
   16c60:	beq	16cc0 <__assert_fail@plt+0x5550>
   16c64:	mov	r6, #0
   16c68:	add	r0, r6, r6, lsl #1
   16c6c:	ldr	r0, [r5, r0, lsl #2]!
   16c70:	add	r7, r5, #8
   16c74:	cmp	r0, #1
   16c78:	blt	16c9c <__assert_fail@plt+0x552c>
   16c7c:	mov	r4, #0
   16c80:	ldr	r0, [r7]
   16c84:	ldr	r0, [r0, r4, lsl #2]
   16c88:	bl	18b8c <__assert_fail@plt+0x741c>
   16c8c:	ldr	r0, [r5]
   16c90:	add	r4, r4, #1
   16c94:	cmp	r4, r0
   16c98:	blt	16c80 <__assert_fail@plt+0x5510>
   16c9c:	ldr	r0, [r7]
   16ca0:	bl	13bd0 <__assert_fail@plt+0x2460>
   16ca4:	ldr	r0, [r8, #68]	; 0x44
   16ca8:	cmp	r6, r0
   16cac:	bcs	16cbc <__assert_fail@plt+0x554c>
   16cb0:	ldr	r5, [r8, #32]
   16cb4:	add	r6, r6, #1
   16cb8:	b	16c68 <__assert_fail@plt+0x54f8>
   16cbc:	ldr	r5, [r8, #32]
   16cc0:	mov	r0, r5
   16cc4:	bl	13bd0 <__assert_fail@plt+0x2460>
   16cc8:	ldr	r0, [r8, #60]	; 0x3c
   16ccc:	movw	r1, #20636	; 0x509c
   16cd0:	movt	r1, #2
   16cd4:	cmp	r0, r1
   16cd8:	beq	16ce0 <__assert_fail@plt+0x5570>
   16cdc:	bl	13bd0 <__assert_fail@plt+0x2460>
   16ce0:	ldr	r0, [r8, #132]	; 0x84
   16ce4:	bl	13bd0 <__assert_fail@plt+0x2460>
   16ce8:	mov	r0, r8
   16cec:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16cf0:	b	13bd0 <__assert_fail@plt+0x2460>
   16cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf8:	add	fp, sp, #28
   16cfc:	sub	sp, sp, #28
   16d00:	ldr	sl, [fp, #8]
   16d04:	mov	r7, #2
   16d08:	cmp	sl, #7
   16d0c:	bhi	16de0 <__assert_fail@plt+0x5670>
   16d10:	mov	r5, r0
   16d14:	ldr	r0, [r0]
   16d18:	mov	r6, r3
   16d1c:	mov	r9, r2
   16d20:	mov	r4, r1
   16d24:	tst	sl, #4
   16d28:	str	r0, [sp, #24]
   16d2c:	bne	16d44 <__assert_fail@plt+0x55d4>
   16d30:	mov	r0, r4
   16d34:	bl	11614 <strlen@plt>
   16d38:	mov	r7, r0
   16d3c:	mov	r8, #0
   16d40:	b	16d4c <__assert_fail@plt+0x55dc>
   16d44:	ldr	r8, [r6]
   16d48:	ldr	r7, [r6, #4]
   16d4c:	movw	r0, #0
   16d50:	movw	r1, #0
   16d54:	movt	r0, #0
   16d58:	movt	r1, #0
   16d5c:	orrs	r0, r1, r0
   16d60:	str	r0, [sp, #20]
   16d64:	beq	16d74 <__assert_fail@plt+0x5604>
   16d68:	ldr	r0, [sp, #24]
   16d6c:	add	r0, r0, #136	; 0x88
   16d70:	bl	11470 <pthread_mutex_lock@plt>
   16d74:	ldrb	r0, [r5, #28]
   16d78:	tst	r0, #16
   16d7c:	bne	16d90 <__assert_fail@plt+0x5620>
   16d80:	str	r7, [sp]
   16d84:	stmib	sp, {r7, r9}
   16d88:	str	r6, [sp, #12]
   16d8c:	b	16da4 <__assert_fail@plt+0x5634>
   16d90:	mov	r0, #0
   16d94:	str	r7, [sp]
   16d98:	str	r7, [sp, #4]
   16d9c:	str	r0, [sp, #8]
   16da0:	str	r0, [sp, #12]
   16da4:	mov	r0, r5
   16da8:	mov	r1, r4
   16dac:	mov	r2, r7
   16db0:	mov	r3, r8
   16db4:	str	sl, [sp, #16]
   16db8:	bl	16dec <__assert_fail@plt+0x567c>
   16dbc:	mov	r7, r0
   16dc0:	ldr	r0, [sp, #20]
   16dc4:	cmp	r0, #0
   16dc8:	beq	16dd8 <__assert_fail@plt+0x5668>
   16dcc:	ldr	r0, [sp, #24]
   16dd0:	add	r0, r0, #136	; 0x88
   16dd4:	bl	113bc <pthread_mutex_unlock@plt>
   16dd8:	cmp	r7, #0
   16ddc:	movwne	r7, #1
   16de0:	mov	r0, r7
   16de4:	sub	sp, fp, #28
   16de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16df0:	add	fp, sp, #28
   16df4:	sub	sp, sp, #436	; 0x1b4
   16df8:	ldr	r5, [r0]
   16dfc:	str	r2, [sp, #80]	; 0x50
   16e00:	mov	r7, r1
   16e04:	mov	r6, r0
   16e08:	add	r0, sp, #112	; 0x70
   16e0c:	mov	r1, #0
   16e10:	mov	r2, #136	; 0x88
   16e14:	mov	r4, r3
   16e18:	mov	r8, #0
   16e1c:	bl	1165c <memset@plt>
   16e20:	str	r5, [sp, #196]	; 0xc4
   16e24:	ldr	r9, [fp, #16]
   16e28:	ldr	ip, [fp, #8]
   16e2c:	mov	r0, #0
   16e30:	ldr	r1, [r6, #16]
   16e34:	cmp	r1, #0
   16e38:	beq	16e54 <__assert_fail@plt+0x56e4>
   16e3c:	ldrb	r2, [r6, #28]
   16e40:	and	r2, r2, #9
   16e44:	cmp	r2, #8
   16e48:	movne	r1, #0
   16e4c:	subs	r0, r4, ip
   16e50:	movne	r0, r1
   16e54:	ldr	r2, [r6, #24]
   16e58:	ldr	r1, [r6, #8]
   16e5c:	mov	sl, #1
   16e60:	mvn	r3, r2
   16e64:	cmp	r2, r9
   16e68:	addcc	r8, r3, r9
   16e6c:	cmp	r1, #0
   16e70:	beq	185bc <__assert_fail@plt+0x6e4c>
   16e74:	ldr	r1, [r5, #36]	; 0x24
   16e78:	cmp	r1, #0
   16e7c:	ldrne	r2, [r5, #40]	; 0x28
   16e80:	cmpne	r2, #0
   16e84:	beq	185bc <__assert_fail@plt+0x6e4c>
   16e88:	ldr	r3, [r5, #44]	; 0x2c
   16e8c:	cmp	r3, #0
   16e90:	strne	r7, [sp, #104]	; 0x68
   16e94:	ldrne	r7, [r5, #48]	; 0x30
   16e98:	cmpne	r7, #0
   16e9c:	beq	185bc <__assert_fail@plt+0x6e4c>
   16ea0:	ldr	r1, [r1, #8]
   16ea4:	ldr	r7, [r6, #20]
   16ea8:	str	r0, [sp, #100]	; 0x64
   16eac:	cmp	r1, #0
   16eb0:	str	r7, [sp, #108]	; 0x6c
   16eb4:	beq	16ec0 <__assert_fail@plt+0x5750>
   16eb8:	ldr	lr, [sp, #104]	; 0x68
   16ebc:	b	16ed0 <__assert_fail@plt+0x5760>
   16ec0:	ldr	r1, [r2, #8]
   16ec4:	ldr	lr, [sp, #104]	; 0x68
   16ec8:	cmp	r1, #0
   16ecc:	beq	17e24 <__assert_fail@plt+0x66b4>
   16ed0:	mov	r0, ip
   16ed4:	str	r0, [sp, #92]	; 0x5c
   16ed8:	subs	r9, r9, r8
   16edc:	mov	r0, #1
   16ee0:	str	r0, [sp, #60]	; 0x3c
   16ee4:	bne	16ef8 <__assert_fail@plt+0x5788>
   16ee8:	ldr	r0, [r5, #76]	; 0x4c
   16eec:	cmp	r0, #0
   16ef0:	movwne	r0, #1
   16ef4:	str	r0, [sp, #60]	; 0x3c
   16ef8:	ldr	r0, [r6, #12]
   16efc:	ldr	r2, [r5, #92]	; 0x5c
   16f00:	ldr	r7, [sp, #108]	; 0x6c
   16f04:	ldr	ip, [r5, #8]
   16f08:	str	r7, [sp, #176]	; 0xb0
   16f0c:	str	lr, [sp, #112]	; 0x70
   16f10:	str	r2, [sp, #192]	; 0xc0
   16f14:	ubfx	r3, r0, #22, #1
   16f18:	and	r0, r0, #4194304	; 0x400000
   16f1c:	orrs	r0, r7, r0
   16f20:	ldr	r7, [sp, #80]	; 0x50
   16f24:	strb	r3, [sp, #184]	; 0xb8
   16f28:	movwne	r0, #1
   16f2c:	strb	r0, [sp, #187]	; 0xbb
   16f30:	add	r0, sp, #112	; 0x70
   16f34:	ldrb	r1, [r5, #88]	; 0x58
   16f38:	add	r3, r0, #44	; 0x2c
   16f3c:	vdup.32	q8, r7
   16f40:	vst1.32	{d16-d17}, [r3]
   16f44:	ubfx	r3, r1, #3, #1
   16f48:	strb	r3, [sp, #186]	; 0xba
   16f4c:	ubfx	r1, r1, #2, #1
   16f50:	strb	r1, [sp, #185]	; 0xb9
   16f54:	add	r1, ip, #1
   16f58:	cmp	r2, r1
   16f5c:	movgt	r1, r2
   16f60:	add	r2, r7, #1
   16f64:	cmp	r2, r1
   16f68:	movlt	r1, r2
   16f6c:	bl	18ca8 <__assert_fail@plt+0x7538>
   16f70:	cmp	r0, #0
   16f74:	str	r5, [sp, #96]	; 0x60
   16f78:	bne	185e0 <__assert_fail@plt+0x6e70>
   16f7c:	add	r1, r5, #96	; 0x60
   16f80:	str	r9, [sp, #84]	; 0x54
   16f84:	str	r8, [sp, #32]
   16f88:	ldr	r3, [fp, #24]
   16f8c:	ldr	r0, [fp, #12]
   16f90:	str	r1, [sp, #180]	; 0xb4
   16f94:	ldrb	r1, [r5, #88]	; 0x58
   16f98:	ubfx	r1, r1, #4, #1
   16f9c:	ldr	r9, [sp, #104]	; 0x68
   16fa0:	strb	r1, [sp, #190]	; 0xbe
   16fa4:	mov	r1, #0
   16fa8:	ldrb	r2, [sp, #187]	; 0xbb
   16fac:	cmp	r2, #0
   16fb0:	bne	16fc8 <__assert_fail@plt+0x5858>
   16fb4:	str	r9, [sp, #116]	; 0x74
   16fb8:	ldr	r1, [r5, #92]	; 0x5c
   16fbc:	cmp	r1, #1
   16fc0:	ldr	r1, [sp, #80]	; 0x50
   16fc4:	movwgt	r1, #0
   16fc8:	str	r0, [sp, #168]	; 0xa8
   16fcc:	str	r1, [sp, #144]	; 0x90
   16fd0:	str	r1, [sp, #140]	; 0x8c
   16fd4:	str	r0, [sp, #164]	; 0xa4
   16fd8:	str	r6, [sp, #68]	; 0x44
   16fdc:	ldr	sl, [sp, #108]	; 0x6c
   16fe0:	ldrb	r0, [r6, #28]
   16fe4:	ldr	r6, [sp, #100]	; 0x64
   16fe8:	lsr	r0, r0, #7
   16fec:	strb	r0, [sp, #189]	; 0xbd
   16ff0:	mvn	r0, #0
   16ff4:	ldr	r8, [r5, #76]	; 0x4c
   16ff8:	str	r0, [sp, #204]	; 0xcc
   16ffc:	str	r3, [sp, #200]	; 0xc8
   17000:	lsl	r5, r8, #1
   17004:	cmp	r8, #1
   17008:	blt	1705c <__assert_fail@plt+0x58ec>
   1700c:	movw	r0, #43690	; 0xaaaa
   17010:	mov	r2, #12
   17014:	movt	r0, #2730	; 0xaaa
   17018:	cmp	r5, r0
   1701c:	bhi	18580 <__assert_fail@plt+0x6e10>
   17020:	add	r0, r8, r8, lsl #1
   17024:	lsl	r0, r0, #4
   17028:	bl	23994 <__assert_fail@plt+0x12224>
   1702c:	mov	r6, r0
   17030:	str	r0, [sp, #228]	; 0xe4
   17034:	lsl	r0, r8, #3
   17038:	bl	23994 <__assert_fail@plt+0x12224>
   1703c:	cmp	r0, #0
   17040:	str	r0, [sp, #244]	; 0xf4
   17044:	beq	18608 <__assert_fail@plt+0x6e98>
   17048:	cmp	r6, #0
   1704c:	ldr	sl, [sp, #108]	; 0x6c
   17050:	ldr	r6, [sp, #100]	; 0x64
   17054:	mov	r2, #12
   17058:	beq	18580 <__assert_fail@plt+0x6e10>
   1705c:	mov	r0, #1
   17060:	str	r5, [sp, #240]	; 0xf0
   17064:	str	r0, [sp, #232]	; 0xe8
   17068:	ldr	r0, [sp, #84]	; 0x54
   1706c:	str	r5, [sp, #224]	; 0xe0
   17070:	cmp	r0, #1
   17074:	bhi	17088 <__assert_fail@plt+0x5918>
   17078:	ldr	r0, [sp, #96]	; 0x60
   1707c:	ldrb	r0, [r0, #88]	; 0x58
   17080:	tst	r0, #2
   17084:	beq	170b8 <__assert_fail@plt+0x5948>
   17088:	ldr	r0, [sp, #148]	; 0x94
   1708c:	mov	r2, #12
   17090:	cmn	r0, #-1073741822	; 0xc0000002
   17094:	bhi	18580 <__assert_fail@plt+0x6e10>
   17098:	mov	r1, #4
   1709c:	add	r0, r1, r0, lsl #2
   170a0:	bl	23994 <__assert_fail@plt+0x12224>
   170a4:	ldr	r6, [sp, #100]	; 0x64
   170a8:	mov	r2, #12
   170ac:	cmp	r0, #0
   170b0:	str	r0, [sp, #212]	; 0xd4
   170b4:	beq	18580 <__assert_fail@plt+0x6e10>
   170b8:	ldr	r1, [fp, #24]
   170bc:	ldr	r2, [sp, #92]	; 0x5c
   170c0:	str	r4, [fp, #-212]	; 0xffffff2c
   170c4:	mov	r0, #4
   170c8:	mov	r8, #1
   170cc:	mov	r7, r4
   170d0:	tst	r1, #1
   170d4:	mov	r1, #4
   170d8:	mov	r5, r2
   170dc:	movweq	r1, #6
   170e0:	cmp	r2, r4
   170e4:	str	r1, [sp, #172]	; 0xac
   170e8:	ldr	r1, [sp, #96]	; 0x60
   170ec:	mvnlt	r8, #0
   170f0:	movlt	r5, r4
   170f4:	movlt	r7, r2
   170f8:	cmp	r6, #0
   170fc:	ldr	r1, [r1, #92]	; 0x5c
   17100:	str	r1, [sp, #64]	; 0x40
   17104:	beq	17148 <__assert_fail@plt+0x59d8>
   17108:	cmp	r1, #1
   1710c:	beq	1712c <__assert_fail@plt+0x59bc>
   17110:	ldr	r0, [sp, #68]	; 0x44
   17114:	ldr	r0, [r0, #12]
   17118:	and	r0, r0, #4194304	; 0x400000
   1711c:	orr	r0, sl, r0
   17120:	clz	r0, r0
   17124:	lsr	r0, r0, #5
   17128:	lsl	r0, r0, #2
   1712c:	cmp	sl, #0
   17130:	mov	r1, sl
   17134:	movwne	r1, #1
   17138:	cmp	r2, r4
   1713c:	orrge	r1, r1, #2
   17140:	orr	r0, r1, r0
   17144:	b	1714c <__assert_fail@plt+0x59dc>
   17148:	mov	r0, #8
   1714c:	add	r1, sp, #112	; 0x70
   17150:	cmp	r2, r4
   17154:	str	r7, [sp, #56]	; 0x38
   17158:	str	r8, [sp, #76]	; 0x4c
   1715c:	str	r5, [sp, #72]	; 0x48
   17160:	add	r1, r1, #32
   17164:	str	r1, [sp, #28]
   17168:	sub	r1, fp, #212	; 0xd4
   1716c:	movwlt	r1, #0
   17170:	cmp	r1, #0
   17174:	str	r1, [sp, #48]	; 0x30
   17178:	movwne	r1, #1
   1717c:	str	r1, [sp, #52]	; 0x34
   17180:	sub	r1, fp, #208	; 0xd0
   17184:	add	r1, r1, #16
   17188:	str	r1, [sp, #36]	; 0x24
   1718c:	sub	r1, r0, #4
   17190:	str	r1, [sp, #44]	; 0x2c
   17194:	cmp	r1, #4
   17198:	bhi	17280 <__assert_fail@plt+0x5b10>
   1719c:	ldr	r2, [fp, #24]
   171a0:	add	r0, pc, #0
   171a4:	ldr	pc, [r0, r1, lsl #2]
   171a8:			; <UNDEFINED> instruction: 0x000171bc
   171ac:			; <UNDEFINED> instruction: 0x000171bc
   171b0:	andeq	r7, r1, r4, lsr r2
   171b4:	andeq	r7, r1, ip, lsl #4
   171b8:	andeq	r7, r1, ip, lsl #6
   171bc:	mov	r2, #1
   171c0:	cmp	r4, r7
   171c4:	blt	18580 <__assert_fail@plt+0x6e10>
   171c8:	ldr	r1, [sp, #80]	; 0x50
   171cc:	cmp	r4, r1
   171d0:	mov	r0, #0
   171d4:	ldrblt	r0, [r9, r4]
   171d8:	cmp	sl, #0
   171dc:	ldrbne	r0, [sl, r0]
   171e0:	ldrb	r0, [r6, r0]
   171e4:	cmp	r0, #0
   171e8:	bne	17308 <__assert_fail@plt+0x5b98>
   171ec:	sub	r0, r4, #1
   171f0:	cmp	r4, r7
   171f4:	mov	r4, r0
   171f8:	str	r0, [fp, #-212]	; 0xffffff2c
   171fc:	bgt	171cc <__assert_fail@plt+0x5a5c>
   17200:	b	18580 <__assert_fail@plt+0x6e10>
   17204:	add	r4, r4, #1
   17208:	str	r4, [fp, #-212]	; 0xffffff2c
   1720c:	cmp	r4, r5
   17210:	bge	1724c <__assert_fail@plt+0x5adc>
   17214:	ldrb	r0, [r9, r4]
   17218:	ldrb	r0, [sl, r0]
   1721c:	ldrb	r0, [r6, r0]
   17220:	cmp	r0, #0
   17224:	beq	17204 <__assert_fail@plt+0x5a94>
   17228:	b	1724c <__assert_fail@plt+0x5adc>
   1722c:	add	r4, r4, #1
   17230:	str	r4, [fp, #-212]	; 0xffffff2c
   17234:	cmp	r4, r5
   17238:	bge	1724c <__assert_fail@plt+0x5adc>
   1723c:	ldrb	r0, [r9, r4]
   17240:	ldrb	r0, [r6, r0]
   17244:	cmp	r0, #0
   17248:	beq	1722c <__assert_fail@plt+0x5abc>
   1724c:	cmp	r4, r5
   17250:	bne	1730c <__assert_fail@plt+0x5b9c>
   17254:	ldr	r1, [sp, #80]	; 0x50
   17258:	mov	r0, #0
   1725c:	mov	r4, r5
   17260:	cmp	r5, r1
   17264:	ldrblt	r0, [r9, r5]
   17268:	cmp	sl, #0
   1726c:	ldrbne	r0, [sl, r0]
   17270:	ldrb	r0, [r6, r0]
   17274:	cmp	r0, #0
   17278:	bne	1730c <__assert_fail@plt+0x5b9c>
   1727c:	b	18610 <__assert_fail@plt+0x6ea0>
   17280:	ldr	r0, [sp, #136]	; 0x88
   17284:	ldr	r2, [sp, #144]	; 0x90
   17288:	sub	r1, r4, r0
   1728c:	cmp	r1, r2
   17290:	bcs	172d8 <__assert_fail@plt+0x5b68>
   17294:	ldr	r3, [sp, #140]	; 0x8c
   17298:	mov	r2, #0
   1729c:	cmp	r1, r3
   172a0:	bcs	172ac <__assert_fail@plt+0x5b3c>
   172a4:	ldr	r2, [sp, #116]	; 0x74
   172a8:	ldrb	r2, [r2, r1]
   172ac:	ldrb	r1, [r6, r2]
   172b0:	cmp	r1, #0
   172b4:	bne	17308 <__assert_fail@plt+0x5b98>
   172b8:	add	r4, r4, r8
   172bc:	mov	r2, #1
   172c0:	cmp	r4, r7
   172c4:	str	r4, [fp, #-212]	; 0xffffff2c
   172c8:	blt	18580 <__assert_fail@plt+0x6e10>
   172cc:	cmp	r4, r5
   172d0:	ble	17284 <__assert_fail@plt+0x5b14>
   172d4:	b	18580 <__assert_fail@plt+0x6e10>
   172d8:	ldr	r2, [fp, #24]
   172dc:	add	r0, sp, #112	; 0x70
   172e0:	mov	r1, r4
   172e4:	bl	1db9c <__assert_fail@plt+0xc42c>
   172e8:	cmp	r0, #0
   172ec:	bne	185e0 <__assert_fail@plt+0x6e70>
   172f0:	ldr	r0, [sp, #136]	; 0x88
   172f4:	ldr	r4, [fp, #-212]	; 0xffffff2c
   172f8:	ldr	r7, [sp, #56]	; 0x38
   172fc:	ldr	r6, [sp, #100]	; 0x64
   17300:	sub	r1, r4, r0
   17304:	b	17294 <__assert_fail@plt+0x5b24>
   17308:	ldr	r2, [fp, #24]
   1730c:	add	r0, sp, #112	; 0x70
   17310:	mov	r1, r4
   17314:	bl	1db9c <__assert_fail@plt+0xc42c>
   17318:	cmp	r0, #0
   1731c:	bne	185e0 <__assert_fail@plt+0x6e70>
   17320:	ldr	r0, [sp, #64]	; 0x40
   17324:	cmp	r0, #1
   17328:	ldrne	r0, [sp, #140]	; 0x8c
   1732c:	cmpne	r0, #0
   17330:	bne	17368 <__assert_fail@plt+0x5bf8>
   17334:	mov	r0, #0
   17338:	str	r0, [sp, #220]	; 0xdc
   1733c:	str	r0, [sp, #232]	; 0xe8
   17340:	str	r0, [sp, #216]	; 0xd8
   17344:	str	r0, [fp, #-64]	; 0xffffffc0
   17348:	ldr	r4, [sp, #196]	; 0xc4
   1734c:	ldr	r7, [sp, #152]	; 0x98
   17350:	ldr	r8, [r4, #36]	; 0x24
   17354:	ldrsb	r0, [r8, #52]	; 0x34
   17358:	cmn	r0, #1
   1735c:	ble	1737c <__assert_fail@plt+0x5c0c>
   17360:	ldr	r5, [sp, #52]	; 0x34
   17364:	b	173e0 <__assert_fail@plt+0x5c70>
   17368:	ldr	r0, [sp, #120]	; 0x78
   1736c:	ldr	r0, [r0]
   17370:	cmn	r0, #1
   17374:	bne	17334 <__assert_fail@plt+0x5bc4>
   17378:	b	17b68 <__assert_fail@plt+0x63f8>
   1737c:	ldr	r2, [sp, #200]	; 0xc8
   17380:	sub	r1, r7, #1
   17384:	add	r0, sp, #112	; 0x70
   17388:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1738c:	ldr	r5, [sp, #52]	; 0x34
   17390:	tst	r0, #1
   17394:	bne	173dc <__assert_fail@plt+0x5c6c>
   17398:	mov	r3, r0
   1739c:	cmp	r0, #0
   173a0:	beq	173e0 <__assert_fail@plt+0x5c70>
   173a4:	ands	r1, r3, #2
   173a8:	and	r0, r3, #4
   173ac:	cmpne	r0, #0
   173b0:	bne	17b98 <__assert_fail@plt+0x6428>
   173b4:	cmp	r1, #0
   173b8:	bne	17ba0 <__assert_fail@plt+0x6430>
   173bc:	cmp	r0, #0
   173c0:	beq	173e0 <__assert_fail@plt+0x5c70>
   173c4:	ldr	r2, [r8, #40]	; 0x28
   173c8:	sub	r0, fp, #64	; 0x40
   173cc:	mov	r1, r4
   173d0:	bl	1d75c <__assert_fail@plt+0xbfec>
   173d4:	mov	r8, r0
   173d8:	b	173e0 <__assert_fail@plt+0x5c70>
   173dc:	ldr	r8, [r4, #40]	; 0x28
   173e0:	cmp	r8, #0
   173e4:	beq	18608 <__assert_fail@plt+0x6e98>
   173e8:	ldr	r0, [sp, #212]	; 0xd4
   173ec:	mov	r6, r5
   173f0:	cmp	r0, #0
   173f4:	beq	1740c <__assert_fail@plt+0x5c9c>
   173f8:	str	r8, [r0, r7, lsl #2]
   173fc:	mov	r6, r5
   17400:	ldr	r0, [r4, #76]	; 0x4c
   17404:	cmp	r0, #0
   17408:	bne	17bc4 <__assert_fail@plt+0x6454>
   1740c:	ldrb	r0, [r8, #52]	; 0x34
   17410:	tst	r0, #16
   17414:	bne	17ba8 <__assert_fail@plt+0x6438>
   17418:	mvn	r0, #0
   1741c:	mov	r2, #0
   17420:	str	r0, [sp, #88]	; 0x58
   17424:	ldr	r0, [sp, #152]	; 0x98
   17428:	ldr	r1, [sp, #168]	; 0xa8
   1742c:	cmp	r1, r0
   17430:	ble	17848 <__assert_fail@plt+0x60d8>
   17434:	ldr	r5, [sp, #48]	; 0x30
   17438:	str	r2, [sp, #40]	; 0x28
   1743c:	ldr	r2, [sp, #148]	; 0x94
   17440:	ldr	r1, [sp, #160]	; 0xa0
   17444:	str	r7, [sp, #92]	; 0x5c
   17448:	add	r7, r0, #1
   1744c:	mov	r9, r6
   17450:	mov	r6, r8
   17454:	cmp	r7, r2
   17458:	blt	17464 <__assert_fail@plt+0x5cf4>
   1745c:	cmp	r2, r1
   17460:	blt	17800 <__assert_fail@plt+0x6090>
   17464:	ldr	r2, [sp, #140]	; 0x8c
   17468:	cmp	r7, r2
   1746c:	blt	17478 <__assert_fail@plt+0x5d08>
   17470:	cmp	r2, r1
   17474:	blt	17800 <__assert_fail@plt+0x6090>
   17478:	ldrb	r0, [r6, #52]	; 0x34
   1747c:	tst	r0, #32
   17480:	bne	17628 <__assert_fail@plt+0x5eb8>
   17484:	ldr	r1, [sp, #152]	; 0x98
   17488:	ldr	r0, [sp, #116]	; 0x74
   1748c:	add	r2, r1, #1
   17490:	str	r2, [sp, #152]	; 0x98
   17494:	ldrb	r4, [r0, r1]
   17498:	ldr	r0, [r6, #44]	; 0x2c
   1749c:	cmp	r0, #0
   174a0:	bne	174cc <__assert_fail@plt+0x5d5c>
   174a4:	ldr	r8, [r6, #48]	; 0x30
   174a8:	cmp	r8, #0
   174ac:	bne	1781c <__assert_fail@plt+0x60ac>
   174b0:	ldr	r0, [sp, #196]	; 0xc4
   174b4:	mov	r1, r6
   174b8:	bl	20420 <__assert_fail@plt+0xecb0>
   174bc:	cmp	r0, #0
   174c0:	bne	17498 <__assert_fail@plt+0x5d28>
   174c4:	mov	r0, #12
   174c8:	b	1783c <__assert_fail@plt+0x60cc>
   174cc:	ldr	r8, [r0, r4, lsl #2]
   174d0:	ldr	r0, [sp, #212]	; 0xd4
   174d4:	cmp	r0, #0
   174d8:	beq	174f0 <__assert_fail@plt+0x5d80>
   174dc:	sub	r0, fp, #64	; 0x40
   174e0:	add	r1, sp, #112	; 0x70
   174e4:	mov	r2, r8
   174e8:	bl	1ed8c <__assert_fail@plt+0xd61c>
   174ec:	mov	r8, r0
   174f0:	cmp	r8, #0
   174f4:	beq	17530 <__assert_fail@plt+0x5dc0>
   174f8:	sub	r0, r6, r8
   174fc:	mov	r6, r9
   17500:	clz	r0, r0
   17504:	lsr	r0, r0, #5
   17508:	ands	r6, r9, r0
   1750c:	ldr	r0, [sp, #92]	; 0x5c
   17510:	movne	r0, r7
   17514:	mov	r7, r0
   17518:	ldrb	r0, [r8, #52]	; 0x34
   1751c:	tst	r0, #16
   17520:	bne	175bc <__assert_fail@plt+0x5e4c>
   17524:	ldr	r9, [sp, #104]	; 0x68
   17528:	ldr	sl, [sp, #108]	; 0x6c
   1752c:	b	17608 <__assert_fail@plt+0x5e98>
   17530:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17534:	cmp	r0, #0
   17538:	bne	18608 <__assert_fail@plt+0x6e98>
   1753c:	ldr	r0, [sp, #40]	; 0x28
   17540:	ldr	r1, [sp, #60]	; 0x3c
   17544:	cmp	r0, #0
   17548:	mvn	r1, r1
   1754c:	movwne	r0, #1
   17550:	tst	r1, r0
   17554:	bne	17850 <__assert_fail@plt+0x60e0>
   17558:	ldr	r0, [sp, #212]	; 0xd4
   1755c:	cmp	r0, #0
   17560:	beq	17850 <__assert_fail@plt+0x60e0>
   17564:	ldr	r2, [sp, #152]	; 0x98
   17568:	ldr	r1, [sp, #216]	; 0xd8
   1756c:	add	r0, r0, #4
   17570:	cmp	r2, r1
   17574:	bge	17850 <__assert_fail@plt+0x60e0>
   17578:	add	r3, r2, #1
   1757c:	str	r3, [sp, #152]	; 0x98
   17580:	ldr	r2, [r0, r2, lsl #2]
   17584:	cmp	r2, #0
   17588:	mov	r2, r3
   1758c:	beq	17570 <__assert_fail@plt+0x5e00>
   17590:	sub	r0, fp, #64	; 0x40
   17594:	add	r1, sp, #112	; 0x70
   17598:	mov	r2, #0
   1759c:	bl	1ed8c <__assert_fail@plt+0xd61c>
   175a0:	cmp	r0, #0
   175a4:	mov	r8, r0
   175a8:	ldreq	r0, [fp, #-64]	; 0xffffffc0
   175ac:	cmpeq	r0, #0
   175b0:	bne	1761c <__assert_fail@plt+0x5eac>
   175b4:	ldr	r0, [sp, #212]	; 0xd4
   175b8:	b	17564 <__assert_fail@plt+0x5df4>
   175bc:	ldr	r9, [sp, #104]	; 0x68
   175c0:	ldr	sl, [sp, #108]	; 0x6c
   175c4:	sxtb	r0, r0
   175c8:	cmn	r0, #1
   175cc:	bgt	175e8 <__assert_fail@plt+0x5e78>
   175d0:	ldr	r2, [sp, #152]	; 0x98
   175d4:	add	r0, sp, #112	; 0x70
   175d8:	mov	r1, r8
   175dc:	bl	1e26c <__assert_fail@plt+0xcafc>
   175e0:	cmp	r0, #0
   175e4:	beq	17608 <__assert_fail@plt+0x5e98>
   175e8:	ldr	r0, [sp, #152]	; 0x98
   175ec:	str	r0, [sp, #88]	; 0x58
   175f0:	ldr	r0, [sp, #60]	; 0x3c
   175f4:	cmp	r0, #0
   175f8:	beq	17870 <__assert_fail@plt+0x6100>
   175fc:	mov	r5, #0
   17600:	mov	r0, #1
   17604:	str	r0, [sp, #40]	; 0x28
   17608:	ldr	r0, [sp, #152]	; 0x98
   1760c:	ldr	r1, [sp, #168]	; 0xa8
   17610:	cmp	r1, r0
   17614:	bgt	1743c <__assert_fail@plt+0x5ccc>
   17618:	b	1785c <__assert_fail@plt+0x60ec>
   1761c:	cmp	r8, #0
   17620:	bne	174f8 <__assert_fail@plt+0x5d88>
   17624:	b	17850 <__assert_fail@plt+0x60e0>
   17628:	ldr	r0, [r6, #8]
   1762c:	cmp	r0, #1
   17630:	blt	177f4 <__assert_fail@plt+0x6084>
   17634:	ldr	sl, [sp, #196]	; 0xc4
   17638:	mov	r4, #0
   1763c:	str	sl, [sp, #20]
   17640:	ldr	r0, [r6, #12]
   17644:	ldr	r1, [r0, r4, lsl #2]
   17648:	ldr	r0, [sl]
   1764c:	add	r0, r0, r1, lsl #3
   17650:	ldr	r8, [r0, #4]
   17654:	tst	r8, #1048576	; 0x100000
   17658:	beq	177e4 <__assert_fail@plt+0x6074>
   1765c:	movw	r0, #65280	; 0xff00
   17660:	ldr	r3, [sp, #152]	; 0x98
   17664:	str	r1, [sp, #24]
   17668:	movt	r0, #3
   1766c:	tst	r8, r0
   17670:	beq	176d4 <__assert_fail@plt+0x5f64>
   17674:	ldr	r2, [sp, #200]	; 0xc8
   17678:	add	r0, sp, #112	; 0x70
   1767c:	mov	r1, r3
   17680:	mov	sl, r3
   17684:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   17688:	mov	r3, sl
   1768c:	ldr	r1, [sp, #24]
   17690:	ldr	sl, [sp, #20]
   17694:	and	r2, r0, #1
   17698:	tst	r8, #1024	; 0x400
   1769c:	beq	176a8 <__assert_fail@plt+0x5f38>
   176a0:	cmp	r2, #0
   176a4:	beq	177e4 <__assert_fail@plt+0x6074>
   176a8:	tst	r8, #2048	; 0x800
   176ac:	cmpne	r2, #0
   176b0:	bne	177e4 <__assert_fail@plt+0x6074>
   176b4:	tst	r8, #8192	; 0x2000
   176b8:	beq	176c4 <__assert_fail@plt+0x5f54>
   176bc:	ands	r2, r0, #2
   176c0:	beq	177e4 <__assert_fail@plt+0x6074>
   176c4:	tst	r8, #32768	; 0x8000
   176c8:	beq	176d4 <__assert_fail@plt+0x5f64>
   176cc:	ands	r0, r0, #8
   176d0:	beq	177e4 <__assert_fail@plt+0x6074>
   176d4:	mov	r0, sl
   176d8:	add	r2, sp, #112	; 0x70
   176dc:	bl	1fff4 <__assert_fail@plt+0xe884>
   176e0:	cmp	r0, #0
   176e4:	beq	177e4 <__assert_fail@plt+0x6074>
   176e8:	ldr	r1, [sp, #152]	; 0x98
   176ec:	ldr	r2, [sp, #232]	; 0xe8
   176f0:	cmp	r2, r0
   176f4:	add	r8, r1, r0
   176f8:	movlt	r2, r0
   176fc:	add	r0, sp, #112	; 0x70
   17700:	mov	r1, r8
   17704:	str	r2, [sp, #232]	; 0xe8
   17708:	bl	1f170 <__assert_fail@plt+0xda00>
   1770c:	cmp	r0, #0
   17710:	str	r0, [fp, #-48]	; 0xffffffd0
   17714:	bne	1783c <__assert_fail@plt+0x60cc>
   17718:	ldr	r0, [sp, #212]	; 0xd4
   1771c:	ldr	r2, [sp, #24]
   17720:	ldr	r1, [sl, #24]
   17724:	str	r4, [sp, #16]
   17728:	str	r8, [sp, #12]
   1772c:	ldr	r3, [r0, r8, lsl #2]
   17730:	ldr	r0, [sl, #12]
   17734:	ldr	r0, [r0, r2, lsl #2]
   17738:	cmp	r3, #0
   1773c:	str	r3, [sp, #8]
   17740:	add	r0, r0, r0, lsl #1
   17744:	add	r2, r1, r0, lsl #2
   17748:	beq	1776c <__assert_fail@plt+0x5ffc>
   1774c:	ldr	r1, [r3, #40]	; 0x28
   17750:	sub	r4, fp, #208	; 0xd0
   17754:	mov	r0, r4
   17758:	bl	1eee0 <__assert_fail@plt+0xd770>
   1775c:	cmp	r0, #0
   17760:	str	r0, [fp, #-48]	; 0xffffffd0
   17764:	beq	17780 <__assert_fail@plt+0x6010>
   17768:	b	1783c <__assert_fail@plt+0x60cc>
   1776c:	vldr	d16, [r2]
   17770:	ldr	r0, [r2, #8]
   17774:	sub	r4, fp, #208	; 0xd0
   17778:	str	r0, [fp, #-200]	; 0xffffff38
   1777c:	vstr	d16, [fp, #-208]	; 0xffffff30
   17780:	ldr	r8, [sp, #12]
   17784:	ldr	r2, [sp, #200]	; 0xc8
   17788:	add	r0, sp, #112	; 0x70
   1778c:	sub	r1, r8, #1
   17790:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   17794:	mov	r3, r0
   17798:	sub	r0, fp, #48	; 0x30
   1779c:	mov	r1, sl
   177a0:	mov	r2, r4
   177a4:	bl	1d75c <__assert_fail@plt+0xbfec>
   177a8:	ldr	r1, [sp, #212]	; 0xd4
   177ac:	str	r0, [r1, r8, lsl #2]
   177b0:	ldr	r0, [sp, #8]
   177b4:	cmp	r0, #0
   177b8:	beq	177c4 <__assert_fail@plt+0x6054>
   177bc:	ldr	r0, [fp, #-200]	; 0xffffff38
   177c0:	bl	13bd0 <__assert_fail@plt+0x2460>
   177c4:	ldr	r0, [sp, #212]	; 0xd4
   177c8:	ldr	r4, [sp, #16]
   177cc:	ldr	r0, [r0, r8, lsl #2]
   177d0:	cmp	r0, #0
   177d4:	bne	177e4 <__assert_fail@plt+0x6074>
   177d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   177dc:	cmp	r0, #0
   177e0:	bne	1783c <__assert_fail@plt+0x60cc>
   177e4:	ldr	r0, [r6, #8]
   177e8:	add	r4, r4, #1
   177ec:	cmp	r4, r0
   177f0:	blt	17640 <__assert_fail@plt+0x5ed0>
   177f4:	mov	r0, #0
   177f8:	str	r0, [fp, #-64]	; 0xffffffc0
   177fc:	b	17484 <__assert_fail@plt+0x5d14>
   17800:	add	r1, r0, #2
   17804:	add	r0, sp, #112	; 0x70
   17808:	bl	1ecb4 <__assert_fail@plt+0xd544>
   1780c:	cmp	r0, #0
   17810:	str	r0, [fp, #-64]	; 0xffffffc0
   17814:	beq	17478 <__assert_fail@plt+0x5d08>
   17818:	b	18608 <__assert_fail@plt+0x6e98>
   1781c:	ldr	r0, [sp, #152]	; 0x98
   17820:	ldr	r2, [sp, #200]	; 0xc8
   17824:	sub	r1, r0, #1
   17828:	add	r0, sp, #112	; 0x70
   1782c:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   17830:	bfi	r4, r0, #8, #1
   17834:	ldr	r8, [r8, r4, lsl #2]
   17838:	b	174d0 <__assert_fail@plt+0x5d60>
   1783c:	mov	r8, #0
   17840:	str	r0, [fp, #-64]	; 0xffffffc0
   17844:	b	174d0 <__assert_fail@plt+0x5d60>
   17848:	ldr	r5, [sp, #48]	; 0x30
   1784c:	b	1785c <__assert_fail@plt+0x60ec>
   17850:	ldr	r9, [sp, #104]	; 0x68
   17854:	ldr	sl, [sp, #108]	; 0x6c
   17858:	ldr	r7, [sp, #92]	; 0x5c
   1785c:	cmp	r5, #0
   17860:	beq	17870 <__assert_fail@plt+0x6100>
   17864:	ldr	r0, [r5]
   17868:	add	r0, r0, r7
   1786c:	str	r0, [r5]
   17870:	ldr	r8, [sp, #76]	; 0x4c
   17874:	ldr	r5, [sp, #72]	; 0x48
   17878:	ldr	r7, [sp, #88]	; 0x58
   1787c:	cmn	r7, #1
   17880:	beq	17b60 <__assert_fail@plt+0x63f0>
   17884:	mov	r2, #12
   17888:	cmn	r7, #2
   1788c:	beq	18580 <__assert_fail@plt+0x6e10>
   17890:	ldr	r0, [sp, #68]	; 0x44
   17894:	str	r7, [sp, #204]	; 0xcc
   17898:	ldr	r8, [sp, #84]	; 0x54
   1789c:	ldr	r4, [sp, #96]	; 0x60
   178a0:	ldrb	r0, [r0, #28]
   178a4:	cmp	r8, #2
   178a8:	bcc	178b4 <__assert_fail@plt+0x6144>
   178ac:	ands	r1, r0, #16
   178b0:	beq	178c0 <__assert_fail@plt+0x6150>
   178b4:	ldr	r1, [r4, #76]	; 0x4c
   178b8:	cmp	r1, #0
   178bc:	beq	178e4 <__assert_fail@plt+0x6174>
   178c0:	ldr	r0, [sp, #212]	; 0xd4
   178c4:	mov	r2, r7
   178c8:	ldr	r1, [r0, r7, lsl #2]
   178cc:	add	r0, sp, #112	; 0x70
   178d0:	bl	1e26c <__assert_fail@plt+0xcafc>
   178d4:	str	r0, [sp, #208]	; 0xd0
   178d8:	ldr	r0, [sp, #68]	; 0x44
   178dc:	mov	r2, #12
   178e0:	ldrb	r0, [r0, #28]
   178e4:	cmp	r8, #2
   178e8:	bcc	17900 <__assert_fail@plt+0x6190>
   178ec:	ands	r0, r0, #16
   178f0:	bne	17900 <__assert_fail@plt+0x6190>
   178f4:	ldrb	r0, [r4, #88]	; 0x58
   178f8:	tst	r0, #1
   178fc:	bne	1790c <__assert_fail@plt+0x619c>
   17900:	ldr	r0, [r4, #76]	; 0x4c
   17904:	cmp	r0, #0
   17908:	beq	17ce4 <__assert_fail@plt+0x6574>
   1790c:	ldr	r6, [sp, #204]	; 0xcc
   17910:	cmn	r6, #-1073741823	; 0xc0000001
   17914:	bcs	18580 <__assert_fail@plt+0x6e10>
   17918:	mov	r0, #4
   1791c:	ldr	r7, [sp, #196]	; 0xc4
   17920:	ldr	r5, [sp, #208]	; 0xd0
   17924:	add	r4, r0, r6, lsl #2
   17928:	mov	r0, r4
   1792c:	bl	23994 <__assert_fail@plt+0x12224>
   17930:	mov	sl, r0
   17934:	cmp	r0, #0
   17938:	beq	185f8 <__assert_fail@plt+0x6e88>
   1793c:	ldr	r0, [r7, #76]	; 0x4c
   17940:	cmp	r0, #0
   17944:	beq	179f4 <__assert_fail@plt+0x6284>
   17948:	mov	r0, r4
   1794c:	bl	23994 <__assert_fail@plt+0x12224>
   17950:	cmp	r0, #0
   17954:	beq	185f8 <__assert_fail@plt+0x6e88>
   17958:	mov	r9, r0
   1795c:	add	r0, r6, #1
   17960:	mov	r1, #0
   17964:	str	r0, [sp, #92]	; 0x5c
   17968:	lsl	r2, r0, #2
   1796c:	mov	r0, r9
   17970:	bl	1165c <memset@plt>
   17974:	ldr	r0, [sp, #36]	; 0x24
   17978:	mov	r1, #0
   1797c:	str	r6, [fp, #-196]	; 0xffffff3c
   17980:	str	r5, [fp, #-200]	; 0xffffff38
   17984:	str	r9, [fp, #-204]	; 0xffffff34
   17988:	str	sl, [fp, #-208]	; 0xffffff30
   1798c:	str	r1, [r0]
   17990:	str	r1, [r0, #4]
   17994:	str	r1, [r0, #8]
   17998:	add	r0, sp, #112	; 0x70
   1799c:	sub	r1, fp, #208	; 0xd0
   179a0:	bl	20f1c <__assert_fail@plt+0xf7ac>
   179a4:	mov	r4, r0
   179a8:	mov	r0, #0
   179ac:	bl	13bd0 <__assert_fail@plt+0x2460>
   179b0:	cmp	r4, #0
   179b4:	bne	17c70 <__assert_fail@plt+0x6500>
   179b8:	ldr	r0, [sl]
   179bc:	cmp	r0, #0
   179c0:	beq	17a4c <__assert_fail@plt+0x62dc>
   179c4:	ldr	r3, [sp, #92]	; 0x5c
   179c8:	mov	r0, r7
   179cc:	mov	r1, sl
   179d0:	mov	r2, r9
   179d4:	bl	211b4 <__assert_fail@plt+0xfa44>
   179d8:	mov	r4, r0
   179dc:	mov	r0, r9
   179e0:	bl	13bd0 <__assert_fail@plt+0x2460>
   179e4:	cmp	r4, #0
   179e8:	beq	17cbc <__assert_fail@plt+0x654c>
   179ec:	mov	r9, #0
   179f0:	b	17c6c <__assert_fail@plt+0x64fc>
   179f4:	ldr	r0, [sp, #36]	; 0x24
   179f8:	mov	r9, #0
   179fc:	str	r6, [fp, #-196]	; 0xffffff3c
   17a00:	str	r5, [fp, #-200]	; 0xffffff38
   17a04:	sub	r1, fp, #208	; 0xd0
   17a08:	str	r9, [fp, #-204]	; 0xffffff34
   17a0c:	str	sl, [fp, #-208]	; 0xffffff30
   17a10:	str	r9, [r0]
   17a14:	str	r9, [r0, #4]
   17a18:	str	r9, [r0, #8]
   17a1c:	add	r0, sp, #112	; 0x70
   17a20:	bl	20f1c <__assert_fail@plt+0xf7ac>
   17a24:	mov	r4, r0
   17a28:	mov	r0, #0
   17a2c:	bl	13bd0 <__assert_fail@plt+0x2460>
   17a30:	cmp	r4, #0
   17a34:	bne	17c70 <__assert_fail@plt+0x6500>
   17a38:	ldr	r0, [sl]
   17a3c:	mov	r9, #0
   17a40:	cmp	r0, #0
   17a44:	beq	17b40 <__assert_fail@plt+0x63d0>
   17a48:	b	17cbc <__assert_fail@plt+0x654c>
   17a4c:	ldr	r0, [r9]
   17a50:	cmp	r0, #0
   17a54:	bne	179c4 <__assert_fail@plt+0x6254>
   17a58:	cmp	r6, #1
   17a5c:	blt	17b40 <__assert_fail@plt+0x63d0>
   17a60:	ldr	r0, [sp, #212]	; 0xd4
   17a64:	str	r7, [sp, #88]	; 0x58
   17a68:	lsl	r4, r6, #2
   17a6c:	add	r8, r6, #1
   17a70:	mov	r7, sl
   17a74:	sub	r0, r0, #4
   17a78:	ldr	r1, [r0, r4]
   17a7c:	cmp	r1, #0
   17a80:	beq	17a90 <__assert_fail@plt+0x6320>
   17a84:	ldrb	r2, [r1, #52]	; 0x34
   17a88:	tst	r2, #16
   17a8c:	bne	17aa4 <__assert_fail@plt+0x6334>
   17a90:	sub	r8, r8, #1
   17a94:	sub	r4, r4, #4
   17a98:	cmp	r8, #2
   17a9c:	bge	17a78 <__assert_fail@plt+0x6308>
   17aa0:	b	17b40 <__assert_fail@plt+0x63d0>
   17aa4:	sub	r6, r8, #2
   17aa8:	add	r5, sp, #112	; 0x70
   17aac:	mov	r0, r5
   17ab0:	mov	r2, r6
   17ab4:	bl	1e26c <__assert_fail@plt+0xcafc>
   17ab8:	mov	sl, r0
   17abc:	mov	r0, r9
   17ac0:	mov	r1, #0
   17ac4:	mov	r2, r4
   17ac8:	bl	1165c <memset@plt>
   17acc:	ldr	r0, [sp, #36]	; 0x24
   17ad0:	mov	r1, #0
   17ad4:	str	r6, [fp, #-196]	; 0xffffff3c
   17ad8:	str	sl, [fp, #-200]	; 0xffffff38
   17adc:	str	r9, [fp, #-204]	; 0xffffff34
   17ae0:	str	r7, [fp, #-208]	; 0xffffff30
   17ae4:	mov	r5, sl
   17ae8:	mov	sl, r7
   17aec:	str	r1, [r0]
   17af0:	str	r1, [r0, #4]
   17af4:	str	r1, [r0, #8]
   17af8:	add	r0, sp, #112	; 0x70
   17afc:	sub	r1, fp, #208	; 0xd0
   17b00:	bl	20f1c <__assert_fail@plt+0xf7ac>
   17b04:	mov	r4, r0
   17b08:	mov	r0, #0
   17b0c:	bl	13bd0 <__assert_fail@plt+0x2460>
   17b10:	cmp	r4, #0
   17b14:	bne	17c6c <__assert_fail@plt+0x64fc>
   17b18:	sub	r0, r8, #1
   17b1c:	ldr	r7, [sp, #88]	; 0x58
   17b20:	str	r0, [sp, #92]	; 0x5c
   17b24:	ldr	r0, [sl]
   17b28:	cmp	r0, #0
   17b2c:	beq	17a4c <__assert_fail@plt+0x62dc>
   17b30:	sub	r6, r8, #2
   17b34:	sub	r0, r8, #1
   17b38:	str	r0, [sp, #92]	; 0x5c
   17b3c:	b	179c4 <__assert_fail@plt+0x6254>
   17b40:	mov	r0, sl
   17b44:	bl	13bd0 <__assert_fail@plt+0x2460>
   17b48:	mov	r0, r9
   17b4c:	bl	13bd0 <__assert_fail@plt+0x2460>
   17b50:	ldr	r9, [sp, #104]	; 0x68
   17b54:	ldr	sl, [sp, #108]	; 0x6c
   17b58:	ldr	r8, [sp, #76]	; 0x4c
   17b5c:	ldr	r5, [sp, #72]	; 0x48
   17b60:	add	r0, sp, #112	; 0x70
   17b64:	bl	1e32c <__assert_fail@plt+0xcbbc>
   17b68:	ldr	r0, [fp, #-212]	; 0xffffff2c
   17b6c:	ldr	r7, [sp, #56]	; 0x38
   17b70:	mov	r2, #1
   17b74:	add	r4, r0, r8
   17b78:	cmp	r4, r7
   17b7c:	str	r4, [fp, #-212]	; 0xffffff2c
   17b80:	blt	18580 <__assert_fail@plt+0x6e10>
   17b84:	ldr	r6, [sp, #100]	; 0x64
   17b88:	ldr	r1, [sp, #44]	; 0x2c
   17b8c:	cmp	r5, r4
   17b90:	bge	17194 <__assert_fail@plt+0x5a24>
   17b94:	b	18580 <__assert_fail@plt+0x6e10>
   17b98:	ldr	r8, [r4, #48]	; 0x30
   17b9c:	b	173e0 <__assert_fail@plt+0x5c70>
   17ba0:	ldr	r8, [r4, #44]	; 0x2c
   17ba4:	b	173e0 <__assert_fail@plt+0x5c70>
   17ba8:	sxtb	r0, r0
   17bac:	cmn	r0, #1
   17bb0:	ble	17bfc <__assert_fail@plt+0x648c>
   17bb4:	ldr	r0, [sp, #60]	; 0x3c
   17bb8:	mov	r2, #1
   17bbc:	str	r7, [sp, #88]	; 0x58
   17bc0:	b	17c34 <__assert_fail@plt+0x64c4>
   17bc4:	add	r6, r8, #4
   17bc8:	add	r0, sp, #112	; 0x70
   17bcc:	mov	r2, #0
   17bd0:	mov	r1, r6
   17bd4:	bl	1e4b0 <__assert_fail@plt+0xcd40>
   17bd8:	cmp	r0, #0
   17bdc:	str	r0, [fp, #-64]	; 0xffffffc0
   17be0:	bne	17ca8 <__assert_fail@plt+0x6538>
   17be4:	ldrb	r0, [r8, #52]	; 0x34
   17be8:	tst	r0, #64	; 0x40
   17bec:	bne	17c48 <__assert_fail@plt+0x64d8>
   17bf0:	ldr	sl, [sp, #108]	; 0x6c
   17bf4:	mov	r6, #0
   17bf8:	b	1740c <__assert_fail@plt+0x5c9c>
   17bfc:	add	r0, sp, #112	; 0x70
   17c00:	mov	r1, r8
   17c04:	mov	r2, r7
   17c08:	bl	1e26c <__assert_fail@plt+0xcafc>
   17c0c:	cmp	r0, #0
   17c10:	ldr	r1, [sp, #60]	; 0x3c
   17c14:	mov	r2, r0
   17c18:	mov	r0, r7
   17c1c:	mvneq	r0, #0
   17c20:	str	r0, [sp, #88]	; 0x58
   17c24:	clz	r0, r2
   17c28:	movwne	r2, #1
   17c2c:	lsr	r0, r0, #5
   17c30:	orr	r0, r1, r0
   17c34:	cmp	r0, #0
   17c38:	bne	17424 <__assert_fail@plt+0x5cb4>
   17c3c:	ldr	r8, [sp, #76]	; 0x4c
   17c40:	ldr	r5, [sp, #72]	; 0x48
   17c44:	b	1787c <__assert_fail@plt+0x610c>
   17c48:	add	r0, sp, #112	; 0x70
   17c4c:	mov	r1, r6
   17c50:	bl	1e5a8 <__assert_fail@plt+0xce38>
   17c54:	ldr	sl, [sp, #108]	; 0x6c
   17c58:	cmp	r0, #0
   17c5c:	mov	r6, #0
   17c60:	str	r0, [fp, #-64]	; 0xffffffc0
   17c64:	beq	1740c <__assert_fail@plt+0x5c9c>
   17c68:	b	17cac <__assert_fail@plt+0x653c>
   17c6c:	ldr	r8, [sp, #84]	; 0x54
   17c70:	mov	r0, sl
   17c74:	bl	13bd0 <__assert_fail@plt+0x2460>
   17c78:	mov	r0, r9
   17c7c:	bl	13bd0 <__assert_fail@plt+0x2460>
   17c80:	ldr	r9, [sp, #104]	; 0x68
   17c84:	cmp	r4, #0
   17c88:	beq	17ce4 <__assert_fail@plt+0x6574>
   17c8c:	ldr	sl, [sp, #108]	; 0x6c
   17c90:	ldr	r8, [sp, #76]	; 0x4c
   17c94:	ldr	r5, [sp, #72]	; 0x48
   17c98:	mov	r2, r4
   17c9c:	cmp	r4, #1
   17ca0:	beq	17b60 <__assert_fail@plt+0x63f0>
   17ca4:	b	18580 <__assert_fail@plt+0x6e10>
   17ca8:	ldr	sl, [sp, #108]	; 0x6c
   17cac:	ldr	r8, [sp, #76]	; 0x4c
   17cb0:	ldr	r5, [sp, #72]	; 0x48
   17cb4:	mov	r7, r0
   17cb8:	b	1787c <__assert_fail@plt+0x610c>
   17cbc:	ldr	r0, [sp, #212]	; 0xd4
   17cc0:	bl	13bd0 <__assert_fail@plt+0x2460>
   17cc4:	mov	r0, #0
   17cc8:	str	r5, [sp, #208]	; 0xd0
   17ccc:	str	sl, [sp, #212]	; 0xd4
   17cd0:	str	r6, [sp, #204]	; 0xcc
   17cd4:	bl	13bd0 <__assert_fail@plt+0x2460>
   17cd8:	mov	r0, #0
   17cdc:	bl	13bd0 <__assert_fail@plt+0x2460>
   17ce0:	ldr	r8, [sp, #84]	; 0x54
   17ce4:	cmp	r8, #0
   17ce8:	beq	1857c <__assert_fail@plt+0x6e0c>
   17cec:	ldr	r4, [fp, #20]
   17cf0:	cmp	r8, #1
   17cf4:	beq	17d18 <__assert_fail@plt+0x65a8>
   17cf8:	ldr	r0, [sp, #32]
   17cfc:	ldr	r1, [fp, #16]
   17d00:	mvn	r0, r0
   17d04:	add	r0, r0, r1
   17d08:	mov	r1, #255	; 0xff
   17d0c:	lsl	r2, r0, #3
   17d10:	add	r0, r4, #8
   17d14:	bl	1165c <memset@plt>
   17d18:	cmp	r8, #2
   17d1c:	mov	r0, #0
   17d20:	ldr	r1, [sp, #204]	; 0xcc
   17d24:	stm	r4, {r0, r1}
   17d28:	bcc	18464 <__assert_fail@plt+0x6cf4>
   17d2c:	ldr	r0, [sp, #68]	; 0x44
   17d30:	ldrb	r0, [r0, #28]
   17d34:	ands	r0, r0, #16
   17d38:	bne	18464 <__assert_fail@plt+0x6cf4>
   17d3c:	ldr	r2, [sp, #96]	; 0x60
   17d40:	mov	r0, #0
   17d44:	ldrb	r1, [r2, #88]	; 0x58
   17d48:	tst	r1, #1
   17d4c:	mov	r1, #0
   17d50:	beq	17d64 <__assert_fail@plt+0x65f4>
   17d54:	ldr	r2, [r2, #76]	; 0x4c
   17d58:	mov	r1, #0
   17d5c:	cmp	r2, #0
   17d60:	movwgt	r1, #1
   17d64:	ldr	r2, [sp, #68]	; 0x44
   17d68:	ldr	r5, [sp, #84]	; 0x54
   17d6c:	ldr	r4, [fp, #20]
   17d70:	cmp	r1, #0
   17d74:	mov	r6, #0
   17d78:	ldr	r8, [r2]
   17d7c:	movw	r2, #20672	; 0x50c0
   17d80:	movt	r2, #2
   17d84:	vldr	d16, [r2]
   17d88:	ldr	r2, [r2, #8]
   17d8c:	str	r2, [fp, #-56]	; 0xffffffc8
   17d90:	sub	r2, fp, #208	; 0xd0
   17d94:	add	sl, r2, #12
   17d98:	mov	r2, #16
   17d9c:	vstr	d16, [fp, #-64]	; 0xffffffc0
   17da0:	str	sl, [fp, #-200]	; 0xffffff38
   17da4:	str	r2, [fp, #-204]	; 0xffffff34
   17da8:	str	r0, [fp, #-208]	; 0xffffff30
   17dac:	beq	17dcc <__assert_fail@plt+0x665c>
   17db0:	mov	r0, #48	; 0x30
   17db4:	bl	23994 <__assert_fail@plt+0x12224>
   17db8:	cmp	r0, #0
   17dbc:	str	r0, [fp, #-56]	; 0xffffffc8
   17dc0:	beq	185d0 <__assert_fail@plt+0x6e60>
   17dc4:	ldr	r0, [fp, #-208]	; 0xffffff30
   17dc8:	sub	r6, fp, #64	; 0x40
   17dcc:	ldr	r9, [r8, #72]	; 0x48
   17dd0:	mov	r1, #0
   17dd4:	cmp	r0, r5
   17dd8:	str	r1, [fp, #-44]	; 0xffffffd4
   17ddc:	str	r1, [fp, #-48]	; 0xffffffd0
   17de0:	str	r1, [fp, #-40]	; 0xffffffd8
   17de4:	bcs	17e58 <__assert_fail@plt+0x66e8>
   17de8:	sub	r0, fp, #208	; 0xd0
   17dec:	mov	r1, r5
   17df0:	mov	r2, sl
   17df4:	mov	r3, #8
   17df8:	bl	23a94 <__assert_fail@plt+0x12324>
   17dfc:	cmp	r0, #0
   17e00:	bne	17e5c <__assert_fail@plt+0x66ec>
   17e04:	ldr	r0, [fp, #-200]	; 0xffffff38
   17e08:	mov	r4, #12
   17e0c:	mov	r5, sl
   17e10:	cmp	r0, sl
   17e14:	beq	17e1c <__assert_fail@plt+0x66ac>
   17e18:	bl	13bd0 <__assert_fail@plt+0x2460>
   17e1c:	mov	sl, r5
   17e20:	b	1843c <__assert_fail@plt+0x6ccc>
   17e24:	ldr	r1, [r3, #8]
   17e28:	cmp	r1, #0
   17e2c:	beq	17e3c <__assert_fail@plt+0x66cc>
   17e30:	ldrsb	r1, [r6, #28]
   17e34:	cmp	r1, #0
   17e38:	bmi	16ed0 <__assert_fail@plt+0x5760>
   17e3c:	mov	r0, #0
   17e40:	cmp	r4, #0
   17e44:	beq	185c8 <__assert_fail@plt+0x6e58>
   17e48:	cmp	ip, #0
   17e4c:	mov	r4, #0
   17e50:	bne	185bc <__assert_fail@plt+0x6e4c>
   17e54:	b	16ed4 <__assert_fail@plt+0x5764>
   17e58:	str	r5, [fp, #-208]	; 0xffffff30
   17e5c:	ldr	r7, [fp, #-200]	; 0xffffff38
   17e60:	lsl	r2, r5, #3
   17e64:	mov	r1, r4
   17e68:	str	r2, [sp, #104]	; 0x68
   17e6c:	mov	r0, r7
   17e70:	bl	11488 <memcpy@plt>
   17e74:	ldr	r3, [r4]
   17e78:	ldr	r0, [r4, #4]
   17e7c:	cmp	r3, r0
   17e80:	mov	r0, #0
   17e84:	str	r3, [fp, #-36]	; 0xffffffdc
   17e88:	ble	17e98 <__assert_fail@plt+0x6728>
   17e8c:	mov	r4, #0
   17e90:	bl	13bd0 <__assert_fail@plt+0x2460>
   17e94:	b	1842c <__assert_fail@plt+0x6cbc>
   17e98:	lsl	r0, r5, #4
   17e9c:	str	r6, [sp, #108]	; 0x6c
   17ea0:	str	r8, [sp, #92]	; 0x5c
   17ea4:	str	r7, [sp, #100]	; 0x64
   17ea8:	str	r0, [sp, #88]	; 0x58
   17eac:	ldr	r0, [r8]
   17eb0:	add	r1, r0, r9, lsl #3
   17eb4:	ldr	r1, [r1, #4]
   17eb8:	uxtb	r2, r1
   17ebc:	cmp	r2, #9
   17ec0:	beq	17ef0 <__assert_fail@plt+0x6780>
   17ec4:	cmp	r2, #8
   17ec8:	bne	17f60 <__assert_fail@plt+0x67f0>
   17ecc:	ldr	r0, [r0, r9, lsl #3]
   17ed0:	add	r0, r0, #1
   17ed4:	cmp	r0, r5
   17ed8:	bge	17f60 <__assert_fail@plt+0x67f0>
   17edc:	mov	r1, r4
   17ee0:	str	r3, [r1, r0, lsl #3]!
   17ee4:	mvn	r0, #0
   17ee8:	str	r0, [r1, #4]
   17eec:	b	17f60 <__assert_fail@plt+0x67f0>
   17ef0:	ldr	r0, [r0, r9, lsl #3]
   17ef4:	add	r0, r0, #1
   17ef8:	cmp	r0, r5
   17efc:	bge	17f60 <__assert_fail@plt+0x67f0>
   17f00:	ldr	r2, [r4, r0, lsl #3]
   17f04:	cmp	r2, r3
   17f08:	bge	17f20 <__assert_fail@plt+0x67b0>
   17f0c:	add	r0, r4, r0, lsl #3
   17f10:	mov	r1, r4
   17f14:	str	r3, [r0, #4]
   17f18:	mov	r0, r7
   17f1c:	b	17f3c <__assert_fail@plt+0x67cc>
   17f20:	tst	r1, #524288	; 0x80000
   17f24:	beq	17f58 <__assert_fail@plt+0x67e8>
   17f28:	ldr	r1, [r7, r0, lsl #3]
   17f2c:	cmn	r1, #1
   17f30:	beq	17f58 <__assert_fail@plt+0x67e8>
   17f34:	mov	r0, r4
   17f38:	mov	r1, r7
   17f3c:	ldr	r2, [sp, #104]	; 0x68
   17f40:	str	sl, [sp, #80]	; 0x50
   17f44:	mov	sl, r3
   17f48:	bl	11488 <memcpy@plt>
   17f4c:	mov	r3, sl
   17f50:	ldr	sl, [sp, #80]	; 0x50
   17f54:	b	17f60 <__assert_fail@plt+0x67f0>
   17f58:	add	r0, r4, r0, lsl #3
   17f5c:	str	r3, [r0, #4]
   17f60:	ldr	r0, [r4, #4]
   17f64:	cmp	r3, r0
   17f68:	ldreq	r0, [sp, #208]	; 0xd0
   17f6c:	cmpeq	r9, r0
   17f70:	beq	17f94 <__assert_fail@plt+0x6824>
   17f74:	cmp	r6, #0
   17f78:	beq	17ff8 <__assert_fail@plt+0x6888>
   17f7c:	sub	r0, fp, #48	; 0x30
   17f80:	mov	r1, r9
   17f84:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   17f88:	cmp	r0, #0
   17f8c:	bne	17f9c <__assert_fail@plt+0x682c>
   17f90:	b	17ff8 <__assert_fail@plt+0x6888>
   17f94:	cmp	r6, #0
   17f98:	beq	18420 <__assert_fail@plt+0x6cb0>
   17f9c:	mov	r0, #0
   17fa0:	ldr	r1, [r4, r0, lsl #3]
   17fa4:	cmp	r1, #0
   17fa8:	bmi	17fbc <__assert_fail@plt+0x684c>
   17fac:	add	r1, r4, r0, lsl #3
   17fb0:	ldr	r1, [r1, #4]
   17fb4:	cmn	r1, #1
   17fb8:	beq	17fcc <__assert_fail@plt+0x685c>
   17fbc:	add	r0, r0, #1
   17fc0:	cmp	r5, r0
   17fc4:	bne	17fa0 <__assert_fail@plt+0x6830>
   17fc8:	b	18420 <__assert_fail@plt+0x6cb0>
   17fcc:	sub	r0, fp, #48	; 0x30
   17fd0:	sub	r1, fp, #36	; 0x24
   17fd4:	mov	r2, r5
   17fd8:	mov	r3, r4
   17fdc:	str	r7, [sp]
   17fe0:	str	r0, [sp, #4]
   17fe4:	mov	r0, r6
   17fe8:	bl	2210c <__assert_fail@plt+0x1099c>
   17fec:	mov	r9, r0
   17ff0:	cmn	r0, #1
   17ff4:	ble	18420 <__assert_fail@plt+0x6cb0>
   17ff8:	ldr	r4, [sp, #196]	; 0xc4
   17ffc:	ldr	r0, [r4]
   18000:	add	r1, r0, r9, lsl #3
   18004:	ldr	r1, [r1, #4]
   18008:	tst	r1, #8
   1800c:	bne	180c8 <__assert_fail@plt+0x6958>
   18010:	tst	r1, #1048576	; 0x100000
   18014:	bne	1815c <__assert_fail@plt+0x69ec>
   18018:	uxtb	r1, r1
   1801c:	cmp	r1, #4
   18020:	bne	18184 <__assert_fail@plt+0x6a14>
   18024:	ldr	r0, [r0, r9, lsl #3]
   18028:	mov	r7, #0
   1802c:	add	r0, r0, #1
   18030:	cmp	r0, r5
   18034:	bge	18048 <__assert_fail@plt+0x68d8>
   18038:	ldr	r1, [fp, #20]
   1803c:	ldr	r2, [r1, r0, lsl #3]!
   18040:	ldr	r1, [r1, #4]
   18044:	sub	r7, r1, r2
   18048:	cmp	r6, #0
   1804c:	beq	1826c <__assert_fail@plt+0x6afc>
   18050:	cmp	r0, r5
   18054:	bge	18208 <__assert_fail@plt+0x6a98>
   18058:	ldr	r1, [fp, #20]
   1805c:	ldr	r1, [r1, r0, lsl #3]
   18060:	cmn	r1, #1
   18064:	beq	18208 <__assert_fail@plt+0x6a98>
   18068:	ldr	r2, [fp, #20]
   1806c:	add	r0, r2, r0, lsl #3
   18070:	ldr	r0, [r0, #4]
   18074:	cmn	r0, #1
   18078:	beq	18208 <__assert_fail@plt+0x6a98>
   1807c:	cmp	r7, #0
   18080:	beq	18318 <__assert_fail@plt+0x6ba8>
   18084:	ldr	r5, [fp, #-36]	; 0xffffffdc
   18088:	ldr	r0, [sp, #140]	; 0x8c
   1808c:	sub	r0, r0, r5
   18090:	cmp	r0, r7
   18094:	blt	18208 <__assert_fail@plt+0x6a98>
   18098:	ldr	r2, [sp, #116]	; 0x74
   1809c:	add	r0, r2, r1
   180a0:	add	r1, r2, r5
   180a4:	mov	r2, r7
   180a8:	bl	11608 <bcmp@plt>
   180ac:	cmp	r0, #0
   180b0:	bne	18208 <__assert_fail@plt+0x6a98>
   180b4:	ldr	r0, [r4, #12]
   180b8:	add	r3, r5, r7
   180bc:	ldr	r8, [r0, r9, lsl #2]
   180c0:	str	r3, [fp, #-36]	; 0xffffffdc
   180c4:	b	181d0 <__assert_fail@plt+0x6a60>
   180c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   180cc:	ldr	r0, [sp, #212]	; 0xd4
   180d0:	ldr	r4, [r4, #20]
   180d4:	ldr	r6, [r0, r1, lsl #2]
   180d8:	str	r1, [sp, #80]	; 0x50
   180dc:	sub	r0, fp, #48	; 0x30
   180e0:	mov	r1, r9
   180e4:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   180e8:	cmp	r0, #0
   180ec:	bne	18104 <__assert_fail@plt+0x6994>
   180f0:	sub	r0, fp, #48	; 0x30
   180f4:	mov	r1, r9
   180f8:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   180fc:	cmp	r0, #0
   18100:	beq	183fc <__assert_fail@plt+0x6c8c>
   18104:	add	r0, r9, r9, lsl #1
   18108:	add	r0, r4, r0, lsl #2
   1810c:	ldr	r5, [r0, #4]
   18110:	cmp	r5, #1
   18114:	blt	18208 <__assert_fail@plt+0x6a98>
   18118:	ldr	r7, [r0, #8]
   1811c:	add	r6, r6, #4
   18120:	mvn	r4, #0
   18124:	ldr	r8, [r7]
   18128:	mov	r0, r6
   1812c:	mov	r1, r8
   18130:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   18134:	cmp	r0, #0
   18138:	beq	18148 <__assert_fail@plt+0x69d8>
   1813c:	cmn	r4, #1
   18140:	bne	18250 <__assert_fail@plt+0x6ae0>
   18144:	mov	r4, r8
   18148:	add	r7, r7, #4
   1814c:	subs	r5, r5, #1
   18150:	bne	18124 <__assert_fail@plt+0x69b4>
   18154:	mov	r8, r4
   18158:	b	18264 <__assert_fail@plt+0x6af4>
   1815c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   18160:	mov	r0, r4
   18164:	mov	r1, r9
   18168:	add	r2, sp, #112	; 0x70
   1816c:	mov	r3, r5
   18170:	bl	1fff4 <__assert_fail@plt+0xe884>
   18174:	mov	r3, r5
   18178:	cmp	r0, #0
   1817c:	bne	181b4 <__assert_fail@plt+0x6a44>
   18180:	b	18188 <__assert_fail@plt+0x6a18>
   18184:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18188:	ldr	r0, [r4]
   1818c:	mov	r2, r3
   18190:	mov	r5, r3
   18194:	add	r1, r0, r9, lsl #3
   18198:	add	r0, sp, #112	; 0x70
   1819c:	bl	202ec <__assert_fail@plt+0xeb7c>
   181a0:	mov	r1, r0
   181a4:	mov	r3, r5
   181a8:	mov	r0, #1
   181ac:	cmp	r1, #0
   181b0:	beq	18208 <__assert_fail@plt+0x6a98>
   181b4:	ldr	r1, [r4, #12]
   181b8:	add	r3, r0, r3
   181bc:	ldr	r0, [sp, #108]	; 0x6c
   181c0:	ldr	r8, [r1, r9, lsl #2]
   181c4:	cmp	r0, #0
   181c8:	str	r3, [fp, #-36]	; 0xffffffdc
   181cc:	beq	18288 <__assert_fail@plt+0x6b18>
   181d0:	ldr	r0, [sp, #204]	; 0xcc
   181d4:	cmp	r3, r0
   181d8:	bgt	18208 <__assert_fail@plt+0x6a98>
   181dc:	ldr	r0, [sp, #212]	; 0xd4
   181e0:	ldr	r0, [r0, r3, lsl #2]
   181e4:	cmp	r0, #0
   181e8:	beq	18208 <__assert_fail@plt+0x6a98>
   181ec:	add	r0, r0, #4
   181f0:	mov	r1, r8
   181f4:	mov	r4, r3
   181f8:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   181fc:	mov	r3, r4
   18200:	cmp	r0, #0
   18204:	bne	18288 <__assert_fail@plt+0x6b18>
   18208:	ldr	r5, [sp, #84]	; 0x54
   1820c:	ldr	r4, [fp, #20]
   18210:	ldr	r6, [sp, #108]	; 0x6c
   18214:	ldr	r7, [sp, #100]	; 0x64
   18218:	sub	r0, fp, #48	; 0x30
   1821c:	sub	r1, fp, #36	; 0x24
   18220:	str	r0, [sp, #4]
   18224:	mov	r0, r6
   18228:	mov	r2, r5
   1822c:	mov	r3, r4
   18230:	str	r7, [sp]
   18234:	bl	2210c <__assert_fail@plt+0x1099c>
   18238:	cmp	r0, #0
   1823c:	bmi	185e8 <__assert_fail@plt+0x6e78>
   18240:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18244:	ldr	r8, [sp, #92]	; 0x5c
   18248:	mov	r9, r0
   1824c:	b	182b0 <__assert_fail@plt+0x6b40>
   18250:	sub	r0, fp, #48	; 0x30
   18254:	mov	r1, r4
   18258:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1825c:	cmp	r0, #0
   18260:	beq	182c0 <__assert_fail@plt+0x6b50>
   18264:	ldr	r3, [sp, #80]	; 0x50
   18268:	b	18290 <__assert_fail@plt+0x6b20>
   1826c:	cmp	r7, #0
   18270:	beq	18318 <__assert_fail@plt+0x6ba8>
   18274:	ldr	r0, [r4, #12]
   18278:	ldr	r8, [r0, r9, lsl #2]
   1827c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18280:	add	r3, r0, r7
   18284:	str	r3, [fp, #-36]	; 0xffffffdc
   18288:	mov	r0, #0
   1828c:	str	r0, [fp, #-44]	; 0xffffffd4
   18290:	cmn	r8, #1
   18294:	ble	183f4 <__assert_fail@plt+0x6c84>
   18298:	mov	r9, r8
   1829c:	ldr	r5, [sp, #84]	; 0x54
   182a0:	ldr	r4, [fp, #20]
   182a4:	ldr	r6, [sp, #108]	; 0x6c
   182a8:	ldr	r8, [sp, #92]	; 0x5c
   182ac:	ldr	r7, [sp, #100]	; 0x64
   182b0:	ldr	r0, [r4, #4]
   182b4:	cmp	r3, r0
   182b8:	ble	17eac <__assert_fail@plt+0x673c>
   182bc:	b	185d8 <__assert_fail@plt+0x6e68>
   182c0:	ldr	r7, [sp, #108]	; 0x6c
   182c4:	ldr	r3, [sp, #80]	; 0x50
   182c8:	cmp	r7, #0
   182cc:	beq	18368 <__assert_fail@plt+0x6bf8>
   182d0:	ldr	r5, [r7]
   182d4:	ldr	r0, [r7, #4]
   182d8:	add	r1, r5, #1
   182dc:	cmp	r1, r0
   182e0:	str	r1, [r7]
   182e4:	bne	18370 <__assert_fail@plt+0x6c00>
   182e8:	ldr	r0, [r7, #8]
   182ec:	add	r1, r1, r1, lsl #1
   182f0:	lsl	r1, r1, #4
   182f4:	bl	239c4 <__assert_fail@plt+0x12254>
   182f8:	cmp	r0, #0
   182fc:	beq	183ec <__assert_fail@plt+0x6c7c>
   18300:	str	r0, [r7, #8]
   18304:	ldr	r3, [sp, #80]	; 0x50
   18308:	ldr	r1, [r7, #4]
   1830c:	lsl	r1, r1, #1
   18310:	str	r1, [r7, #4]
   18314:	b	18374 <__assert_fail@plt+0x6c04>
   18318:	sub	r0, fp, #48	; 0x30
   1831c:	mov	r1, r9
   18320:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   18324:	cmp	r0, #0
   18328:	beq	183fc <__assert_fail@plt+0x6c8c>
   1832c:	ldr	r0, [r4, #20]
   18330:	add	r1, r9, r9, lsl #1
   18334:	ldr	r5, [fp, #-36]	; 0xffffffdc
   18338:	add	r0, r0, r1, lsl #2
   1833c:	ldr	r0, [r0, #8]
   18340:	ldr	r8, [r0]
   18344:	ldr	r0, [sp, #212]	; 0xd4
   18348:	ldr	r0, [r0, r5, lsl #2]
   1834c:	mov	r1, r8
   18350:	add	r0, r0, #4
   18354:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   18358:	mov	r3, r5
   1835c:	cmp	r0, #0
   18360:	bne	18290 <__assert_fail@plt+0x6b20>
   18364:	b	18188 <__assert_fail@plt+0x6a18>
   18368:	mov	r8, r4
   1836c:	b	18290 <__assert_fail@plt+0x6b20>
   18370:	ldr	r0, [r7, #8]
   18374:	add	r5, r5, r5, lsl #1
   18378:	str	r3, [r0, r5, lsl #3]!
   1837c:	str	r8, [r0, #4]
   18380:	ldr	r0, [sp, #88]	; 0x58
   18384:	bl	23994 <__assert_fail@plt+0x12224>
   18388:	ldr	r1, [r7, #8]
   1838c:	mvn	r8, #1
   18390:	cmp	r0, #0
   18394:	add	r6, r1, r5, lsl #3
   18398:	str	r0, [r6, #8]!
   1839c:	beq	18264 <__assert_fail@plt+0x6af4>
   183a0:	ldr	r9, [sp, #104]	; 0x68
   183a4:	ldr	r1, [fp, #20]
   183a8:	mov	r2, r9
   183ac:	bl	11488 <memcpy@plt>
   183b0:	ldr	r0, [r6]
   183b4:	ldr	r1, [sp, #84]	; 0x54
   183b8:	mov	r2, r9
   183bc:	add	r0, r0, r1, lsl #3
   183c0:	ldr	r1, [sp, #100]	; 0x64
   183c4:	bl	11488 <memcpy@plt>
   183c8:	ldr	r0, [r7, #8]
   183cc:	sub	r1, fp, #48	; 0x30
   183d0:	add	r0, r0, r5, lsl #3
   183d4:	add	r0, r0, #12
   183d8:	bl	1d678 <__assert_fail@plt+0xbf08>
   183dc:	ldr	r3, [sp, #80]	; 0x50
   183e0:	cmp	r0, #0
   183e4:	moveq	r8, r4
   183e8:	b	18290 <__assert_fail@plt+0x6b20>
   183ec:	mvn	r8, #1
   183f0:	b	18264 <__assert_fail@plt+0x6af4>
   183f4:	cmn	r8, #2
   183f8:	bne	18208 <__assert_fail@plt+0x6a98>
   183fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18400:	bl	13bd0 <__assert_fail@plt+0x2460>
   18404:	ldr	r0, [fp, #-200]	; 0xffffff38
   18408:	mov	r4, #12
   1840c:	cmp	r0, sl
   18410:	beq	18418 <__assert_fail@plt+0x6ca8>
   18414:	bl	13bd0 <__assert_fail@plt+0x2460>
   18418:	ldr	r6, [sp, #108]	; 0x6c
   1841c:	b	1843c <__assert_fail@plt+0x6ccc>
   18420:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18424:	bl	13bd0 <__assert_fail@plt+0x2460>
   18428:	mov	r4, #0
   1842c:	ldr	r0, [fp, #-200]	; 0xffffff38
   18430:	cmp	r0, sl
   18434:	beq	1843c <__assert_fail@plt+0x6ccc>
   18438:	bl	13bd0 <__assert_fail@plt+0x2460>
   1843c:	mov	r0, #16
   18440:	str	sl, [fp, #-200]	; 0xffffff38
   18444:	str	r0, [fp, #-204]	; 0xffffff34
   18448:	mov	r0, #0
   1844c:	str	r0, [fp, #-208]	; 0xffffff30
   18450:	mov	r0, r6
   18454:	bl	220a4 <__assert_fail@plt+0x10934>
   18458:	mov	r2, r4
   1845c:	cmp	r2, #0
   18460:	bne	18580 <__assert_fail@plt+0x6e10>
   18464:	ldr	r0, [fp, #20]
   18468:	ldrb	r1, [sp, #188]	; 0xbc
   1846c:	ldr	r2, [fp, #16]
   18470:	ldr	r8, [sp, #96]	; 0x60
   18474:	ldr	r4, [sp, #32]
   18478:	add	r0, r0, #4
   1847c:	ldr	r3, [r0, #-4]
   18480:	cmn	r3, #1
   18484:	beq	184a4 <__assert_fail@plt+0x6d34>
   18488:	cmp	r1, #0
   1848c:	bne	184b8 <__assert_fail@plt+0x6d48>
   18490:	ldr	r7, [r0]
   18494:	ldr	r6, [fp, #-212]	; 0xffffff2c
   18498:	add	r3, r3, r6
   1849c:	add	r7, r7, r6
   184a0:	stmda	r0, {r3, r7}
   184a4:	sub	r2, r2, #1
   184a8:	add	r0, r0, #8
   184ac:	cmp	r4, r2
   184b0:	bne	1847c <__assert_fail@plt+0x6d0c>
   184b4:	b	184f0 <__assert_fail@plt+0x6d80>
   184b8:	ldr	r7, [sp, #140]	; 0x8c
   184bc:	ldr	r6, [sp, #28]
   184c0:	ldr	ip, [sp, #124]	; 0x7c
   184c4:	cmp	r3, r7
   184c8:	mov	r5, r6
   184cc:	addne	r5, ip, r3, lsl #2
   184d0:	ldr	r3, [r5]
   184d4:	str	r3, [r0, #-4]
   184d8:	ldr	r5, [r0]
   184dc:	cmp	r5, r7
   184e0:	addne	r6, ip, r5, lsl #2
   184e4:	ldr	r7, [r6]
   184e8:	str	r7, [r0]
   184ec:	b	18494 <__assert_fail@plt+0x6d24>
   184f0:	cmp	r4, #1
   184f4:	blt	18510 <__assert_fail@plt+0x6da0>
   184f8:	ldr	r0, [sp, #84]	; 0x54
   184fc:	ldr	r1, [fp, #20]
   18500:	lsl	r2, r4, #3
   18504:	add	r0, r1, r0, lsl #3
   18508:	mov	r1, #255	; 0xff
   1850c:	bl	1165c <memset@plt>
   18510:	ldr	r0, [r8, #132]	; 0x84
   18514:	mov	r2, #0
   18518:	cmp	r0, #0
   1851c:	beq	18580 <__assert_fail@plt+0x6e10>
   18520:	ldr	r1, [sp, #84]	; 0x54
   18524:	cmp	r1, #2
   18528:	bcc	18580 <__assert_fail@plt+0x6e10>
   1852c:	ldr	r1, [sp, #32]
   18530:	ldr	r2, [fp, #16]
   18534:	ldr	r6, [fp, #20]
   18538:	mvn	r1, r1
   1853c:	add	r1, r1, r2
   18540:	mov	r2, #0
   18544:	ldr	r3, [r0, r2, lsl #2]
   18548:	cmp	r2, r3
   1854c:	beq	18570 <__assert_fail@plt+0x6e00>
   18550:	add	r3, r6, r3, lsl #3
   18554:	add	r7, r6, r2, lsl #3
   18558:	ldr	r3, [r3, #8]
   1855c:	str	r3, [r7, #8]
   18560:	ldr	r3, [r0, r2, lsl #2]
   18564:	add	r3, r6, r3, lsl #3
   18568:	ldr	r3, [r3, #12]
   1856c:	str	r3, [r7, #12]
   18570:	add	r2, r2, #1
   18574:	cmp	r1, r2
   18578:	bne	18544 <__assert_fail@plt+0x6dd4>
   1857c:	mov	r2, #0
   18580:	ldr	r0, [sp, #212]	; 0xd4
   18584:	mov	sl, r2
   18588:	bl	13bd0 <__assert_fail@plt+0x2460>
   1858c:	ldr	r0, [sp, #96]	; 0x60
   18590:	ldr	r0, [r0, #76]	; 0x4c
   18594:	cmp	r0, #0
   18598:	beq	185b4 <__assert_fail@plt+0x6e44>
   1859c:	add	r0, sp, #112	; 0x70
   185a0:	bl	1e32c <__assert_fail@plt+0xcbbc>
   185a4:	ldr	r0, [sp, #244]	; 0xf4
   185a8:	bl	13bd0 <__assert_fail@plt+0x2460>
   185ac:	ldr	r0, [sp, #228]	; 0xe4
   185b0:	bl	13bd0 <__assert_fail@plt+0x2460>
   185b4:	add	r0, sp, #112	; 0x70
   185b8:	bl	18c74 <__assert_fail@plt+0x7504>
   185bc:	mov	r0, sl
   185c0:	sub	sp, fp, #28
   185c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185c8:	mov	r4, #0
   185cc:	b	16ed4 <__assert_fail@plt+0x5764>
   185d0:	mov	r2, #12
   185d4:	b	1845c <__assert_fail@plt+0x6cec>
   185d8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   185dc:	b	17e8c <__assert_fail@plt+0x671c>
   185e0:	mov	r2, r0
   185e4:	b	18580 <__assert_fail@plt+0x6e10>
   185e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   185ec:	bl	13bd0 <__assert_fail@plt+0x2460>
   185f0:	mov	r4, #1
   185f4:	b	1842c <__assert_fail@plt+0x6cbc>
   185f8:	mov	r0, sl
   185fc:	bl	13bd0 <__assert_fail@plt+0x2460>
   18600:	mov	r0, #0
   18604:	bl	13bd0 <__assert_fail@plt+0x2460>
   18608:	mov	r2, #12
   1860c:	b	18580 <__assert_fail@plt+0x6e10>
   18610:	mov	r2, #1
   18614:	b	18580 <__assert_fail@plt+0x6e10>
   18618:	push	{fp, lr}
   1861c:	mov	fp, sp
   18620:	sub	sp, sp, #16
   18624:	mov	ip, #1
   18628:	str	r2, [sp, #4]
   1862c:	str	ip, [sp, #12]
   18630:	mov	ip, #0
   18634:	str	ip, [sp]
   18638:	ldr	ip, [fp, #8]
   1863c:	str	ip, [sp, #8]
   18640:	bl	1864c <__assert_fail@plt+0x6edc>
   18644:	mov	sp, fp
   18648:	pop	{fp, pc}
   1864c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18650:	add	fp, sp, #28
   18654:	sub	sp, sp, #44	; 0x2c
   18658:	mvn	r6, #0
   1865c:	cmp	r3, #0
   18660:	bmi	18910 <__assert_fail@plt+0x71a0>
   18664:	mov	r5, r3
   18668:	mov	r9, r2
   1866c:	cmp	r3, r2
   18670:	bgt	18910 <__assert_fail@plt+0x71a0>
   18674:	mov	r7, r0
   18678:	ldr	r0, [fp, #8]
   1867c:	mov	sl, r1
   18680:	movw	r1, #0
   18684:	mov	r8, r9
   18688:	ldr	r6, [r7]
   1868c:	movt	r1, #0
   18690:	add	r0, r0, r5
   18694:	cmp	r0, r9
   18698:	bicle	r8, r0, r0, asr #31
   1869c:	movw	r0, #0
   186a0:	movt	r0, #0
   186a4:	orrs	r4, r1, r0
   186a8:	beq	186b4 <__assert_fail@plt+0x6f44>
   186ac:	add	r0, r6, #136	; 0x88
   186b0:	bl	11470 <pthread_mutex_lock@plt>
   186b4:	ldrb	r0, [r7, #28]
   186b8:	str	r6, [sp, #24]
   186bc:	ldr	r6, [fp, #16]
   186c0:	cmp	r8, r5
   186c4:	ubfx	r1, r0, #5, #2
   186c8:	str	r4, [sp, #36]	; 0x24
   186cc:	str	sl, [sp, #32]
   186d0:	str	r1, [sp, #28]
   186d4:	ble	186f8 <__assert_fail@plt+0x6f88>
   186d8:	tst	r0, #8
   186dc:	bne	186f8 <__assert_fail@plt+0x6f88>
   186e0:	ldr	r1, [r7, #16]
   186e4:	cmp	r1, #0
   186e8:	beq	186f8 <__assert_fail@plt+0x6f88>
   186ec:	mov	r0, r7
   186f0:	bl	1656c <__assert_fail@plt+0x4dfc>
   186f4:	ldrb	r0, [r7, #28]
   186f8:	str	r7, [fp, #-32]	; 0xffffffe0
   186fc:	mov	sl, #1
   18700:	mov	r7, #0
   18704:	cmp	r6, #0
   18708:	beq	18754 <__assert_fail@plt+0x6fe4>
   1870c:	ands	r1, r0, #16
   18710:	bne	18754 <__assert_fail@plt+0x6fe4>
   18714:	and	r0, r0, #6
   18718:	cmp	r0, #4
   1871c:	bne	18744 <__assert_fail@plt+0x6fd4>
   18720:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18724:	ldr	sl, [r6]
   18728:	ldr	r0, [r0, #24]
   1872c:	cmp	sl, r0
   18730:	bhi	1874c <__assert_fail@plt+0x6fdc>
   18734:	cmp	sl, #1
   18738:	movwlt	r6, #0
   1873c:	movwlt	sl, #1
   18740:	b	18750 <__assert_fail@plt+0x6fe0>
   18744:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18748:	ldr	r0, [r0, #24]
   1874c:	add	sl, r0, #1
   18750:	mov	r7, r6
   18754:	lsl	r0, sl, #3
   18758:	bl	23994 <__assert_fail@plt+0x12224>
   1875c:	cmp	r0, #0
   18760:	beq	1891c <__assert_fail@plt+0x71ac>
   18764:	ldr	r1, [fp, #12]
   18768:	str	r8, [sp]
   1876c:	mov	r8, r0
   18770:	mov	r2, r9
   18774:	mov	r3, r5
   18778:	stmib	sp, {r1, sl}
   1877c:	str	r0, [sp, #12]
   18780:	ldr	r0, [sp, #28]
   18784:	ldr	r1, [sp, #32]
   18788:	str	r0, [sp, #16]
   1878c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18790:	bl	16dec <__assert_fail@plt+0x567c>
   18794:	cmp	r0, #0
   18798:	beq	187b4 <__assert_fail@plt+0x7044>
   1879c:	ldr	r4, [sp, #36]	; 0x24
   187a0:	cmp	r0, #1
   187a4:	mvn	r6, #1
   187a8:	mov	r5, r8
   187ac:	mvneq	r6, #0
   187b0:	b	188f4 <__assert_fail@plt+0x7184>
   187b4:	str	r5, [sp, #32]
   187b8:	cmp	r7, #0
   187bc:	mov	r5, r8
   187c0:	beq	188c8 <__assert_fail@plt+0x7158>
   187c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   187c8:	add	r9, sl, #1
   187cc:	ldrb	r0, [r0, #28]
   187d0:	ubfx	r0, r0, #1, #2
   187d4:	cmp	r0, #1
   187d8:	beq	18824 <__assert_fail@plt+0x70b4>
   187dc:	cmp	r0, #0
   187e0:	bne	1883c <__assert_fail@plt+0x70cc>
   187e4:	lsl	r5, r9, #2
   187e8:	mov	r0, r5
   187ec:	bl	23994 <__assert_fail@plt+0x12224>
   187f0:	mov	r6, #0
   187f4:	cmp	r0, #0
   187f8:	str	r0, [r7, #4]
   187fc:	beq	18974 <__assert_fail@plt+0x7204>
   18800:	mov	r0, r5
   18804:	bl	23994 <__assert_fail@plt+0x12224>
   18808:	cmp	r0, #0
   1880c:	str	r0, [r7, #8]
   18810:	beq	1896c <__assert_fail@plt+0x71fc>
   18814:	str	r9, [r7]
   18818:	mov	r4, #1
   1881c:	mov	r5, r8
   18820:	b	18844 <__assert_fail@plt+0x70d4>
   18824:	ldr	r0, [r7]
   18828:	mov	r4, #1
   1882c:	cmp	r9, r0
   18830:	bhi	18928 <__assert_fail@plt+0x71b8>
   18834:	mov	r9, r0
   18838:	b	18844 <__assert_fail@plt+0x70d4>
   1883c:	ldr	r9, [r7]
   18840:	mov	r4, #2
   18844:	cmp	sl, #1
   18848:	blt	1887c <__assert_fail@plt+0x710c>
   1884c:	ldmib	r7, {r1, r2}
   18850:	add	r0, r5, #4
   18854:	mov	r3, sl
   18858:	ldr	r6, [r0, #-4]
   1885c:	subs	r3, r3, #1
   18860:	str	r6, [r1], #4
   18864:	ldr	r6, [r0]
   18868:	add	r0, r0, #8
   1886c:	str	r6, [r2], #4
   18870:	bne	18858 <__assert_fail@plt+0x70e8>
   18874:	ldr	r9, [r7]
   18878:	b	18880 <__assert_fail@plt+0x7110>
   1887c:	mov	sl, #0
   18880:	cmp	sl, r9
   18884:	bcs	188a8 <__assert_fail@plt+0x7138>
   18888:	ldmib	r7, {r0, r1}
   1888c:	mvn	r2, #0
   18890:	str	r2, [r1, sl, lsl #2]
   18894:	str	r2, [r0, sl, lsl #2]
   18898:	add	sl, sl, #1
   1889c:	ldr	r3, [r7]
   188a0:	cmp	sl, r3
   188a4:	bcc	18890 <__assert_fail@plt+0x7120>
   188a8:	mov	r6, r4
   188ac:	ldr	r1, [fp, #-32]	; 0xffffffe0
   188b0:	cmp	r6, #0
   188b4:	ldrb	r0, [r1, #28]
   188b8:	and	r0, r0, #249	; 0xf9
   188bc:	orr	r0, r0, r6, lsl #1
   188c0:	strb	r0, [r1, #28]
   188c4:	beq	188ec <__assert_fail@plt+0x717c>
   188c8:	ldr	r0, [fp, #20]
   188cc:	cmp	r0, #0
   188d0:	beq	188e4 <__assert_fail@plt+0x7174>
   188d4:	ldr	r0, [r5, #4]
   188d8:	ldr	r1, [sp, #32]
   188dc:	sub	r6, r0, r1
   188e0:	b	188f0 <__assert_fail@plt+0x7180>
   188e4:	ldr	r6, [r5]
   188e8:	b	188f0 <__assert_fail@plt+0x7180>
   188ec:	mvn	r6, #1
   188f0:	ldr	r4, [sp, #36]	; 0x24
   188f4:	mov	r0, r5
   188f8:	bl	13bd0 <__assert_fail@plt+0x2460>
   188fc:	cmp	r4, #0
   18900:	beq	18910 <__assert_fail@plt+0x71a0>
   18904:	ldr	r0, [sp, #24]
   18908:	add	r0, r0, #136	; 0x88
   1890c:	bl	113bc <pthread_mutex_unlock@plt>
   18910:	mov	r0, r6
   18914:	sub	sp, fp, #28
   18918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1891c:	ldr	r4, [sp, #36]	; 0x24
   18920:	mvn	r6, #1
   18924:	b	188fc <__assert_fail@plt+0x718c>
   18928:	ldr	r0, [r7, #4]
   1892c:	lsl	r1, r9, #2
   18930:	str	r1, [sp, #28]
   18934:	bl	239c4 <__assert_fail@plt+0x12254>
   18938:	mov	r6, #0
   1893c:	cmp	r0, #0
   18940:	beq	18974 <__assert_fail@plt+0x7204>
   18944:	mov	r5, r0
   18948:	ldr	r0, [r7, #8]
   1894c:	ldr	r1, [sp, #28]
   18950:	bl	239c4 <__assert_fail@plt+0x12254>
   18954:	cmp	r0, #0
   18958:	beq	1897c <__assert_fail@plt+0x720c>
   1895c:	str	r9, [r7]
   18960:	str	r5, [r7, #4]
   18964:	str	r0, [r7, #8]
   18968:	b	1881c <__assert_fail@plt+0x70ac>
   1896c:	ldr	r0, [r7, #4]
   18970:	bl	13bd0 <__assert_fail@plt+0x2460>
   18974:	mov	r5, r8
   18978:	b	188ac <__assert_fail@plt+0x713c>
   1897c:	mov	r0, r5
   18980:	b	18970 <__assert_fail@plt+0x7200>
   18984:	push	{fp, lr}
   18988:	mov	fp, sp
   1898c:	sub	sp, sp, #16
   18990:	mov	ip, #0
   18994:	str	r2, [sp, #4]
   18998:	str	ip, [sp, #12]
   1899c:	ldr	ip, [fp, #12]
   189a0:	str	ip, [sp, #8]
   189a4:	ldr	ip, [fp, #8]
   189a8:	str	ip, [sp]
   189ac:	bl	1864c <__assert_fail@plt+0x6edc>
   189b0:	mov	sp, fp
   189b4:	pop	{fp, pc}
   189b8:	push	{fp, lr}
   189bc:	mov	fp, sp
   189c0:	sub	sp, sp, #24
   189c4:	mov	ip, #1
   189c8:	str	ip, [sp, #20]
   189cc:	mov	ip, #0
   189d0:	str	ip, [sp, #8]
   189d4:	ldr	ip, [fp, #20]
   189d8:	str	ip, [sp, #16]
   189dc:	ldr	ip, [fp, #16]
   189e0:	str	ip, [sp, #12]
   189e4:	ldr	ip, [fp, #12]
   189e8:	str	ip, [sp, #4]
   189ec:	ldr	ip, [fp, #8]
   189f0:	str	ip, [sp]
   189f4:	bl	18a00 <__assert_fail@plt+0x7290>
   189f8:	mov	sp, fp
   189fc:	pop	{fp, pc}
   18a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a04:	add	fp, sp, #28
   18a08:	sub	sp, sp, #20
   18a0c:	ldr	r4, [fp, #8]
   18a10:	mov	r8, r1
   18a14:	mov	r1, r0
   18a18:	mov	r6, r2
   18a1c:	orr	r0, r4, r2
   18a20:	ldr	r2, [fp, #24]
   18a24:	orrs	r0, r0, r2
   18a28:	bmi	18adc <__assert_fail@plt+0x736c>
   18a2c:	adds	sl, r6, r4
   18a30:	bvs	18adc <__assert_fail@plt+0x736c>
   18a34:	mov	r5, #0
   18a38:	cmp	r4, #1
   18a3c:	blt	18a90 <__assert_fail@plt+0x7320>
   18a40:	mov	r9, r3
   18a44:	cmp	r6, #1
   18a48:	blt	18a98 <__assert_fail@plt+0x7328>
   18a4c:	mov	r0, sl
   18a50:	mov	r5, r1
   18a54:	bl	23994 <__assert_fail@plt+0x12224>
   18a58:	cmp	r0, #0
   18a5c:	beq	18adc <__assert_fail@plt+0x736c>
   18a60:	mov	r1, r8
   18a64:	mov	r2, r6
   18a68:	mov	r7, r0
   18a6c:	bl	11488 <memcpy@plt>
   18a70:	add	r0, r7, r6
   18a74:	mov	r1, r9
   18a78:	mov	r2, r4
   18a7c:	bl	11488 <memcpy@plt>
   18a80:	ldr	r2, [fp, #24]
   18a84:	mov	r1, r5
   18a88:	mov	r5, r7
   18a8c:	b	18a9c <__assert_fail@plt+0x732c>
   18a90:	mov	r7, r8
   18a94:	b	18a9c <__assert_fail@plt+0x732c>
   18a98:	mov	r7, r9
   18a9c:	add	r6, fp, #12
   18aa0:	ldr	r0, [fp, #28]
   18aa4:	ldm	r6, {r3, r4, r6}
   18aa8:	str	r4, [sp]
   18aac:	stmib	sp, {r2, r6}
   18ab0:	mov	r2, sl
   18ab4:	str	r0, [sp, #12]
   18ab8:	mov	r0, r1
   18abc:	mov	r1, r7
   18ac0:	bl	1864c <__assert_fail@plt+0x6edc>
   18ac4:	mov	r4, r0
   18ac8:	mov	r0, r5
   18acc:	bl	13bd0 <__assert_fail@plt+0x2460>
   18ad0:	mov	r0, r4
   18ad4:	sub	sp, fp, #28
   18ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18adc:	mvn	r0, #1
   18ae0:	b	18ad4 <__assert_fail@plt+0x7364>
   18ae4:	push	{fp, lr}
   18ae8:	mov	fp, sp
   18aec:	sub	sp, sp, #24
   18af0:	mov	ip, #0
   18af4:	str	ip, [sp, #20]
   18af8:	ldr	ip, [fp, #24]
   18afc:	str	ip, [sp, #16]
   18b00:	ldr	ip, [fp, #20]
   18b04:	str	ip, [sp, #12]
   18b08:	ldr	ip, [fp, #16]
   18b0c:	str	ip, [sp, #8]
   18b10:	ldr	ip, [fp, #12]
   18b14:	str	ip, [sp, #4]
   18b18:	ldr	ip, [fp, #8]
   18b1c:	str	ip, [sp]
   18b20:	bl	18a00 <__assert_fail@plt+0x7290>
   18b24:	mov	sp, fp
   18b28:	pop	{fp, pc}
   18b2c:	ldrb	ip, [r0, #28]
   18b30:	cmp	r2, #0
   18b34:	bic	ip, ip, #6
   18b38:	orrne	ip, ip, #2
   18b3c:	strb	ip, [r0, #28]
   18b40:	ldr	r0, [sp]
   18b44:	moveq	r0, r2
   18b48:	cmp	r2, #0
   18b4c:	moveq	r3, r2
   18b50:	stm	r1, {r2, r3}
   18b54:	str	r0, [r1, #8]
   18b58:	bx	lr
   18b5c:	ldr	r1, [r0, #4]
   18b60:	movw	r2, #255	; 0xff
   18b64:	movt	r2, #4
   18b68:	and	r1, r1, r2
   18b6c:	cmp	r1, #3
   18b70:	beq	18b84 <__assert_fail@plt+0x7414>
   18b74:	cmp	r1, #6
   18b78:	bxne	lr
   18b7c:	ldr	r0, [r0]
   18b80:	b	18bec <__assert_fail@plt+0x747c>
   18b84:	ldr	r0, [r0]
   18b88:	b	13bd0 <__assert_fail@plt+0x2460>
   18b8c:	push	{r4, sl, fp, lr}
   18b90:	add	fp, sp, #8
   18b94:	mov	r4, r0
   18b98:	ldr	r0, [r0, #24]
   18b9c:	bl	13bd0 <__assert_fail@plt+0x2460>
   18ba0:	ldr	r0, [r4, #36]	; 0x24
   18ba4:	bl	13bd0 <__assert_fail@plt+0x2460>
   18ba8:	ldr	r0, [r4, #40]	; 0x28
   18bac:	add	r1, r4, #4
   18bb0:	cmp	r0, r1
   18bb4:	beq	18bc8 <__assert_fail@plt+0x7458>
   18bb8:	ldr	r0, [r0, #8]
   18bbc:	bl	13bd0 <__assert_fail@plt+0x2460>
   18bc0:	ldr	r0, [r4, #40]	; 0x28
   18bc4:	bl	13bd0 <__assert_fail@plt+0x2460>
   18bc8:	ldr	r0, [r4, #12]
   18bcc:	bl	13bd0 <__assert_fail@plt+0x2460>
   18bd0:	ldr	r0, [r4, #48]	; 0x30
   18bd4:	bl	13bd0 <__assert_fail@plt+0x2460>
   18bd8:	ldr	r0, [r4, #44]	; 0x2c
   18bdc:	bl	13bd0 <__assert_fail@plt+0x2460>
   18be0:	mov	r0, r4
   18be4:	pop	{r4, sl, fp, lr}
   18be8:	b	13bd0 <__assert_fail@plt+0x2460>
   18bec:	push	{r4, sl, fp, lr}
   18bf0:	add	fp, sp, #8
   18bf4:	mov	r4, r0
   18bf8:	ldr	r0, [r0]
   18bfc:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c00:	ldr	r0, [r4, #4]
   18c04:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c08:	ldr	r0, [r4, #8]
   18c0c:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c10:	ldr	r0, [r4, #12]
   18c14:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c18:	mov	r0, r4
   18c1c:	pop	{r4, sl, fp, lr}
   18c20:	b	13bd0 <__assert_fail@plt+0x2460>
   18c24:	push	{r4, r5, fp, lr}
   18c28:	add	fp, sp, #8
   18c2c:	ldr	r4, [r0]
   18c30:	ldr	r0, [r4, #56]	; 0x38
   18c34:	cmp	r0, #0
   18c38:	beq	18c50 <__assert_fail@plt+0x74e0>
   18c3c:	ldr	r5, [r0]
   18c40:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c44:	cmp	r5, #0
   18c48:	mov	r0, r5
   18c4c:	bne	18c3c <__assert_fail@plt+0x74cc>
   18c50:	mov	r0, #31
   18c54:	mov	r5, #0
   18c58:	str	r0, [r4, #64]	; 0x40
   18c5c:	str	r5, [r4, #52]	; 0x34
   18c60:	str	r5, [r4, #56]	; 0x38
   18c64:	ldr	r0, [r4, #16]
   18c68:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c6c:	str	r5, [r4, #16]
   18c70:	pop	{r4, r5, fp, pc}
   18c74:	push	{r4, sl, fp, lr}
   18c78:	add	fp, sp, #8
   18c7c:	mov	r4, r0
   18c80:	ldr	r0, [r0, #8]
   18c84:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c88:	ldr	r0, [r4, #12]
   18c8c:	bl	13bd0 <__assert_fail@plt+0x2460>
   18c90:	ldrb	r0, [r4, #75]	; 0x4b
   18c94:	cmp	r0, #0
   18c98:	popeq	{r4, sl, fp, pc}
   18c9c:	ldr	r0, [r4, #4]
   18ca0:	pop	{r4, sl, fp, lr}
   18ca4:	b	13bd0 <__assert_fail@plt+0x2460>
   18ca8:	push	{r4, r5, r6, r7, fp, lr}
   18cac:	add	fp, sp, #16
   18cb0:	mov	r5, r0
   18cb4:	ldr	r0, [r0, #80]	; 0x50
   18cb8:	mov	r4, r1
   18cbc:	cmp	r0, #2
   18cc0:	blt	18d0c <__assert_fail@plt+0x759c>
   18cc4:	mov	r6, #12
   18cc8:	cmn	r4, #-1073741823	; 0xc0000001
   18ccc:	bhi	18d38 <__assert_fail@plt+0x75c8>
   18cd0:	ldr	r0, [r5, #8]
   18cd4:	lsl	r7, r4, #2
   18cd8:	mov	r1, r7
   18cdc:	bl	239c4 <__assert_fail@plt+0x12254>
   18ce0:	cmp	r0, #0
   18ce4:	beq	18d38 <__assert_fail@plt+0x75c8>
   18ce8:	str	r0, [r5, #8]
   18cec:	ldr	r0, [r5, #12]
   18cf0:	cmp	r0, #0
   18cf4:	beq	18d0c <__assert_fail@plt+0x759c>
   18cf8:	mov	r1, r7
   18cfc:	bl	239c4 <__assert_fail@plt+0x12254>
   18d00:	cmp	r0, #0
   18d04:	beq	18d38 <__assert_fail@plt+0x75c8>
   18d08:	str	r0, [r5, #12]
   18d0c:	ldrb	r0, [r5, #75]	; 0x4b
   18d10:	cmp	r0, #0
   18d14:	beq	18d30 <__assert_fail@plt+0x75c0>
   18d18:	ldr	r0, [r5, #4]
   18d1c:	mov	r1, r4
   18d20:	bl	239c4 <__assert_fail@plt+0x12254>
   18d24:	cmp	r0, #0
   18d28:	beq	18d40 <__assert_fail@plt+0x75d0>
   18d2c:	str	r0, [r5, #4]
   18d30:	mov	r6, #0
   18d34:	str	r4, [r5, #36]	; 0x24
   18d38:	mov	r0, r6
   18d3c:	pop	{r4, r5, r6, r7, fp, pc}
   18d40:	mov	r6, #12
   18d44:	b	18d38 <__assert_fail@plt+0x75c8>
   18d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d4c:	add	fp, sp, #28
   18d50:	sub	sp, sp, #92	; 0x5c
   18d54:	mov	r6, r0
   18d58:	ldrb	r0, [r0, #74]	; 0x4a
   18d5c:	ldr	r8, [r6, #36]	; 0x24
   18d60:	ldr	r1, [r6, #48]	; 0x30
   18d64:	ldr	sl, [r6, #28]
   18d68:	str	r6, [sp]
   18d6c:	cmp	r8, r1
   18d70:	movgt	r8, r1
   18d74:	cmp	r0, #0
   18d78:	bne	18d94 <__assert_fail@plt+0x7624>
   18d7c:	ldr	r0, [r6, #64]	; 0x40
   18d80:	cmp	r0, #0
   18d84:	bne	18d94 <__assert_fail@plt+0x7624>
   18d88:	ldrb	r0, [r6, #76]	; 0x4c
   18d8c:	cmp	r0, #0
   18d90:	beq	18d9c <__assert_fail@plt+0x762c>
   18d94:	ldr	r7, [r6, #32]
   18d98:	b	18f8c <__assert_fail@plt+0x781c>
   18d9c:	cmp	r8, sl
   18da0:	ble	18f60 <__assert_fail@plt+0x77f0>
   18da4:	add	r9, r6, #16
   18da8:	str	r8, [sp, #4]
   18dac:	ldr	r7, [r6, #24]
   18db0:	ldr	r4, [r6]
   18db4:	mov	r5, sl
   18db8:	add	r0, r7, sl
   18dbc:	ldrb	r6, [r4, r0]
   18dc0:	tst	r6, #128	; 0x80
   18dc4:	bne	18e08 <__assert_fail@plt+0x7698>
   18dc8:	mov	r0, r9
   18dcc:	bl	114b8 <mbsinit@plt>
   18dd0:	cmp	r0, #0
   18dd4:	add	sl, sp, #16
   18dd8:	beq	18e1c <__assert_fail@plt+0x76ac>
   18ddc:	mov	r0, r6
   18de0:	bl	11728 <towupper@plt>
   18de4:	cmp	r0, #128	; 0x80
   18de8:	bcs	18e10 <__assert_fail@plt+0x76a0>
   18dec:	ldr	r2, [sp]
   18df0:	add	sl, r5, #1
   18df4:	ldr	r1, [r2, #4]
   18df8:	strb	r0, [r1, r5]
   18dfc:	ldr	r1, [r2, #8]
   18e00:	str	r0, [r1, r5, lsl #2]
   18e04:	b	18ef8 <__assert_fail@plt+0x7788>
   18e08:	add	sl, sp, #16
   18e0c:	b	18e1c <__assert_fail@plt+0x76ac>
   18e10:	ldr	r0, [sp]
   18e14:	ldr	r4, [r0]
   18e18:	ldr	r7, [r0, #24]
   18e1c:	ldm	r9, {r0, r1}
   18e20:	str	r1, [fp, #-36]	; 0xffffffdc
   18e24:	sub	r2, r8, r5
   18e28:	mov	r3, r9
   18e2c:	str	r0, [fp, #-40]	; 0xffffffd8
   18e30:	add	r0, r4, r7
   18e34:	mov	r7, r5
   18e38:	add	r1, r0, r5
   18e3c:	add	r0, sp, #12
   18e40:	bl	23d60 <__assert_fail@plt+0x125f0>
   18e44:	sub	r8, r0, #1
   18e48:	mov	r4, r0
   18e4c:	cmn	r8, #4
   18e50:	bhi	18f10 <__assert_fail@plt+0x77a0>
   18e54:	ldr	r0, [sp, #12]
   18e58:	bl	11728 <towupper@plt>
   18e5c:	mov	r6, r0
   18e60:	ldr	r0, [sp, #12]
   18e64:	cmp	r6, r0
   18e68:	bne	18e8c <__assert_fail@plt+0x771c>
   18e6c:	ldr	r5, [sp]
   18e70:	ldr	r1, [r5]
   18e74:	ldr	r2, [r5, #24]
   18e78:	ldr	r0, [r5, #4]
   18e7c:	add	r1, r1, r2
   18e80:	add	r0, r0, r7
   18e84:	add	r1, r1, r7
   18e88:	b	18eb4 <__assert_fail@plt+0x7744>
   18e8c:	mov	r0, sl
   18e90:	mov	r1, r6
   18e94:	sub	r2, fp, #40	; 0x28
   18e98:	bl	11404 <wcrtomb@plt>
   18e9c:	cmp	r4, r0
   18ea0:	bne	18f68 <__assert_fail@plt+0x77f8>
   18ea4:	ldr	r5, [sp]
   18ea8:	mov	r1, sl
   18eac:	ldr	r0, [r5, #4]
   18eb0:	add	r0, r0, r7
   18eb4:	mov	r2, r4
   18eb8:	bl	11488 <memcpy@plt>
   18ebc:	ldr	r0, [r5, #8]
   18ec0:	add	sl, r7, #1
   18ec4:	str	r6, [r0, r7, lsl #2]
   18ec8:	add	r6, r4, r7
   18ecc:	cmp	sl, r6
   18ed0:	bge	18ef8 <__assert_fail@plt+0x7788>
   18ed4:	add	r0, r0, r7, lsl #2
   18ed8:	mvn	r1, #3
   18edc:	add	r2, r1, r4, lsl #2
   18ee0:	mov	r1, #255	; 0xff
   18ee4:	add	r0, r0, #4
   18ee8:	bl	1165c <memset@plt>
   18eec:	subs	r8, r8, #1
   18ef0:	bne	18eec <__assert_fail@plt+0x777c>
   18ef4:	mov	sl, r6
   18ef8:	ldr	r8, [sp, #4]
   18efc:	ldr	r6, [sp]
   18f00:	mov	r7, sl
   18f04:	cmp	r8, sl
   18f08:	bgt	18dac <__assert_fail@plt+0x763c>
   18f0c:	b	192d8 <__assert_fail@plt+0x7b68>
   18f10:	add	r0, r4, #1
   18f14:	cmp	r0, #2
   18f18:	bcc	18f30 <__assert_fail@plt+0x77c0>
   18f1c:	ldr	r1, [sp]
   18f20:	ldr	r0, [r1, #36]	; 0x24
   18f24:	ldr	r1, [r1, #48]	; 0x30
   18f28:	cmp	r0, r1
   18f2c:	blt	18f74 <__assert_fail@plt+0x7804>
   18f30:	ldr	r1, [sp]
   18f34:	add	sl, r7, #1
   18f38:	cmn	r4, #1
   18f3c:	ldr	r0, [r1, #4]
   18f40:	strb	r6, [r0, r7]
   18f44:	ldr	r0, [r1, #8]
   18f48:	str	r6, [r0, r7, lsl #2]
   18f4c:	bne	18ef8 <__assert_fail@plt+0x7788>
   18f50:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18f54:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18f58:	stm	r9, {r0, r1}
   18f5c:	b	18ef8 <__assert_fail@plt+0x7788>
   18f60:	mov	r7, sl
   18f64:	b	192d8 <__assert_fail@plt+0x7b68>
   18f68:	ldm	sp, {r6, r8}
   18f6c:	mov	sl, r7
   18f70:	b	18f94 <__assert_fail@plt+0x7824>
   18f74:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18f78:	ldr	r1, [fp, #-36]	; 0xffffffdc
   18f7c:	mov	sl, r7
   18f80:	stm	r9, {r0, r1}
   18f84:	ldr	r6, [sp]
   18f88:	b	192d8 <__assert_fail@plt+0x7b68>
   18f8c:	cmp	sl, r8
   18f90:	bge	192d8 <__assert_fail@plt+0x7b68>
   18f94:	mov	r3, r6
   18f98:	ldr	r0, [r6, #16]!
   18f9c:	sub	r2, r8, sl
   18fa0:	str	r7, [sp, #4]
   18fa4:	ldr	r1, [r6, #4]
   18fa8:	str	r0, [fp, #-40]	; 0xffffffd8
   18fac:	str	r1, [fp, #-36]	; 0xffffffdc
   18fb0:	ldr	r0, [r6, #48]	; 0x30
   18fb4:	cmp	r0, #0
   18fb8:	bne	19098 <__assert_fail@plt+0x7928>
   18fbc:	ldr	r0, [r3]
   18fc0:	ldr	r1, [r3, #24]
   18fc4:	add	r0, r0, r1
   18fc8:	add	r4, r0, r7
   18fcc:	add	r0, sp, #8
   18fd0:	mov	r1, r4
   18fd4:	mov	r3, r6
   18fd8:	mov	r9, r8
   18fdc:	bl	23d60 <__assert_fail@plt+0x125f0>
   18fe0:	sub	r8, r0, #1
   18fe4:	mov	r5, r0
   18fe8:	cmn	r8, #4
   18fec:	bhi	190f8 <__assert_fail@plt+0x7988>
   18ff0:	ldr	r0, [sp, #8]
   18ff4:	bl	11728 <towupper@plt>
   18ff8:	mov	r7, r0
   18ffc:	ldr	r0, [sp, #8]
   19000:	cmp	r7, r0
   19004:	bne	19014 <__assert_fail@plt+0x78a4>
   19008:	ldr	r6, [sp]
   1900c:	mov	r1, r4
   19010:	b	19034 <__assert_fail@plt+0x78c4>
   19014:	add	r0, sp, #16
   19018:	sub	r2, fp, #40	; 0x28
   1901c:	mov	r1, r7
   19020:	bl	11404 <wcrtomb@plt>
   19024:	cmp	r0, r5
   19028:	bne	19174 <__assert_fail@plt+0x7a04>
   1902c:	ldr	r6, [sp]
   19030:	add	r1, sp, #16
   19034:	ldr	r0, [r6, #4]
   19038:	add	r0, r0, sl
   1903c:	mov	r2, r5
   19040:	bl	11488 <memcpy@plt>
   19044:	ldrb	r0, [r6, #76]	; 0x4c
   19048:	cmp	r0, #0
   1904c:	bne	192a0 <__assert_fail@plt+0x7b30>
   19050:	ldr	r0, [r6, #8]
   19054:	add	r4, r5, sl
   19058:	str	r7, [r0, sl, lsl #2]
   1905c:	ldr	r7, [sp, #4]
   19060:	add	sl, sl, #1
   19064:	cmp	sl, r4
   19068:	add	r7, r5, r7
   1906c:	bge	19090 <__assert_fail@plt+0x7920>
   19070:	mvn	r1, #3
   19074:	add	r0, r0, sl, lsl #2
   19078:	add	r2, r1, r5, lsl #2
   1907c:	mov	r1, #255	; 0xff
   19080:	bl	1165c <memset@plt>
   19084:	subs	r8, r8, #1
   19088:	bne	19084 <__assert_fail@plt+0x7914>
   1908c:	mov	sl, r4
   19090:	mov	r8, r9
   19094:	b	18f8c <__assert_fail@plt+0x781c>
   19098:	add	r4, sp, #16
   1909c:	cmp	r2, #1
   190a0:	blt	18fcc <__assert_fail@plt+0x785c>
   190a4:	ldr	r1, [sp]
   190a8:	ldr	r1, [r1, #80]	; 0x50
   190ac:	cmp	r1, #1
   190b0:	blt	18fcc <__assert_fail@plt+0x785c>
   190b4:	ldr	r4, [sp]
   190b8:	mov	r5, r7
   190bc:	ldr	r7, [r4, #24]
   190c0:	ldr	r3, [r4]
   190c4:	add	r4, sp, #16
   190c8:	add	r7, r5, r7
   190cc:	add	r3, r3, r7
   190d0:	mov	r7, #0
   190d4:	ldrb	r5, [r3, r7]
   190d8:	ldrb	r5, [r0, r5]
   190dc:	strb	r5, [r4, r7]
   190e0:	add	r7, r7, #1
   190e4:	cmp	r7, r2
   190e8:	bge	18fcc <__assert_fail@plt+0x785c>
   190ec:	cmp	r7, r1
   190f0:	blt	190d4 <__assert_fail@plt+0x7964>
   190f4:	b	18fcc <__assert_fail@plt+0x785c>
   190f8:	ldr	r3, [sp]
   190fc:	add	r0, r5, #1
   19100:	cmp	r0, #2
   19104:	bcc	19118 <__assert_fail@plt+0x79a8>
   19108:	ldr	r0, [r3, #36]	; 0x24
   1910c:	ldr	r1, [r3, #48]	; 0x30
   19110:	cmp	r0, r1
   19114:	blt	192c4 <__assert_fail@plt+0x7b54>
   19118:	ldr	r2, [r3, #24]
   1911c:	ldr	r7, [sp, #4]
   19120:	ldr	r0, [r3]
   19124:	ldr	r1, [r3, #64]	; 0x40
   19128:	add	r2, r2, r7
   1912c:	cmp	r1, #0
   19130:	ldrb	r0, [r0, r2]
   19134:	bne	192f4 <__assert_fail@plt+0x7b84>
   19138:	ldr	r2, [sp]
   1913c:	mov	r8, r9
   19140:	ldr	r1, [r2, #4]
   19144:	strb	r0, [r1, sl]
   19148:	ldrb	r1, [r2, #76]	; 0x4c
   1914c:	cmp	r1, #0
   19150:	bne	192fc <__assert_fail@plt+0x7b8c>
   19154:	ldr	r1, [r2, #8]
   19158:	add	r7, r7, #1
   1915c:	cmn	r5, #1
   19160:	str	r0, [r1, sl, lsl #2]
   19164:	add	sl, sl, #1
   19168:	beq	19308 <__assert_fail@plt+0x7b98>
   1916c:	ldr	r6, [sp]
   19170:	b	18f8c <__assert_fail@plt+0x781c>
   19174:	mov	r2, r0
   19178:	cmn	r0, #1
   1917c:	beq	19008 <__assert_fail@plt+0x7898>
   19180:	ldr	r3, [sp]
   19184:	add	r9, r2, sl
   19188:	ldr	r1, [r3, #36]	; 0x24
   1918c:	cmp	r9, r1
   19190:	bhi	192c4 <__assert_fail@plt+0x7b54>
   19194:	ldr	r0, [r3, #12]
   19198:	mov	r6, r3
   1919c:	cmp	r0, #0
   191a0:	bne	191c0 <__assert_fail@plt+0x7a50>
   191a4:	lsl	r0, r1, #2
   191a8:	mov	r4, r2
   191ac:	bl	23994 <__assert_fail@plt+0x12224>
   191b0:	mov	r2, r4
   191b4:	cmp	r0, #0
   191b8:	str	r0, [r6, #12]
   191bc:	beq	192ec <__assert_fail@plt+0x7b7c>
   191c0:	ldrb	r1, [r6, #76]	; 0x4c
   191c4:	cmp	r1, #0
   191c8:	bne	191f0 <__assert_fail@plt+0x7a80>
   191cc:	cmp	sl, #0
   191d0:	beq	191e8 <__assert_fail@plt+0x7a78>
   191d4:	mov	r1, #0
   191d8:	str	r1, [r0, r1, lsl #2]
   191dc:	add	r1, r1, #1
   191e0:	cmp	sl, r1
   191e4:	bne	191d8 <__assert_fail@plt+0x7a68>
   191e8:	mov	r0, #1
   191ec:	strb	r0, [r6, #76]	; 0x4c
   191f0:	ldr	r0, [r6, #4]
   191f4:	add	r1, sp, #16
   191f8:	mov	r4, r2
   191fc:	add	r0, r0, sl
   19200:	bl	11488 <memcpy@plt>
   19204:	ldr	r1, [r6, #8]
   19208:	cmp	r4, #2
   1920c:	str	r7, [r1, sl, lsl #2]
   19210:	ldr	r0, [r6, #12]
   19214:	ldr	r6, [sp, #4]
   19218:	str	r6, [r0, sl, lsl #2]
   1921c:	bcc	19254 <__assert_fail@plt+0x7ae4>
   19220:	add	r0, r0, sl, lsl #2
   19224:	add	r1, r1, sl, lsl #2
   19228:	mov	r2, #1
   1922c:	mvn	r3, #0
   19230:	cmp	r2, r5
   19234:	mov	r7, r8
   19238:	movcc	r7, r2
   1923c:	add	r7, r7, r6
   19240:	str	r7, [r0, r2, lsl #2]
   19244:	str	r3, [r1, r2, lsl #2]
   19248:	add	r2, r2, #1
   1924c:	cmp	r4, r2
   19250:	bne	19230 <__assert_fail@plt+0x7ac0>
   19254:	ldr	r3, [sp]
   19258:	sub	r1, r4, r5
   1925c:	mov	r7, r6
   19260:	ldr	r0, [r3, #48]	; 0x30
   19264:	ldr	r2, [r3, #52]	; 0x34
   19268:	add	r0, r0, r1
   1926c:	cmp	r2, r6
   19270:	mov	r6, r3
   19274:	str	r0, [r3, #48]	; 0x30
   19278:	ble	19288 <__assert_fail@plt+0x7b18>
   1927c:	ldr	r2, [r6, #56]	; 0x38
   19280:	add	r1, r2, r1
   19284:	str	r1, [r6, #56]	; 0x38
   19288:	ldr	r8, [r6, #36]	; 0x24
   1928c:	add	r7, r5, r7
   19290:	mov	sl, r9
   19294:	cmp	r8, r0
   19298:	movgt	r8, r0
   1929c:	b	18f8c <__assert_fail@plt+0x781c>
   192a0:	ldr	r0, [r6, #12]
   192a4:	ldr	r1, [sp, #4]
   192a8:	mov	r2, r5
   192ac:	add	r0, r0, sl, lsl #2
   192b0:	str	r1, [r0], #4
   192b4:	add	r1, r1, #1
   192b8:	subs	r2, r2, #1
   192bc:	bne	192b0 <__assert_fail@plt+0x7b40>
   192c0:	b	19050 <__assert_fail@plt+0x78e0>
   192c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   192c8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   192cc:	stm	r6, {r0, r1}
   192d0:	mov	r6, r3
   192d4:	ldr	r7, [sp, #4]
   192d8:	mov	r0, #0
   192dc:	str	sl, [r6, #28]
   192e0:	str	r7, [r6, #32]
   192e4:	sub	sp, fp, #28
   192e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192ec:	mov	r0, #12
   192f0:	b	192e4 <__assert_fail@plt+0x7b74>
   192f4:	ldrb	r0, [r1, r0]
   192f8:	b	19138 <__assert_fail@plt+0x79c8>
   192fc:	ldr	r1, [r2, #12]
   19300:	str	r7, [r1, sl, lsl #2]
   19304:	b	19154 <__assert_fail@plt+0x79e4>
   19308:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1930c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   19310:	stm	r6, {r0, r1}
   19314:	b	1916c <__assert_fail@plt+0x79fc>
   19318:	push	{r4, r5, r6, sl, fp, lr}
   1931c:	add	fp, sp, #16
   19320:	mov	r4, r0
   19324:	ldr	r5, [r0, #28]
   19328:	ldr	r6, [r0, #36]	; 0x24
   1932c:	ldr	r0, [r0, #48]	; 0x30
   19330:	cmp	r6, r0
   19334:	movgt	r6, r0
   19338:	cmp	r5, r6
   1933c:	bge	19378 <__assert_fail@plt+0x7c08>
   19340:	ldr	r0, [r4]
   19344:	ldr	r2, [r4, #24]
   19348:	ldr	r1, [r4, #64]	; 0x40
   1934c:	add	r0, r0, r2
   19350:	cmp	r1, #0
   19354:	ldrb	r0, [r0, r5]
   19358:	bne	19370 <__assert_fail@plt+0x7c00>
   1935c:	bl	116ec <toupper@plt>
   19360:	ldr	r1, [r4, #4]
   19364:	strb	r0, [r1, r5]
   19368:	add	r5, r5, #1
   1936c:	b	19338 <__assert_fail@plt+0x7bc8>
   19370:	ldrb	r0, [r1, r0]
   19374:	b	1935c <__assert_fail@plt+0x7bec>
   19378:	str	r5, [r4, #28]
   1937c:	str	r5, [r4, #32]
   19380:	pop	{r4, r5, r6, sl, fp, pc}
   19384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19388:	add	fp, sp, #28
   1938c:	sub	sp, sp, #76	; 0x4c
   19390:	mov	r4, r0
   19394:	ldr	sl, [r0, #28]
   19398:	ldr	r6, [r0, #36]	; 0x24
   1939c:	ldr	r0, [r0, #48]	; 0x30
   193a0:	cmp	r6, r0
   193a4:	movgt	r6, r0
   193a8:	cmp	r6, sl
   193ac:	ble	1955c <__assert_fail@plt+0x7dec>
   193b0:	add	r9, r4, #16
   193b4:	add	r0, sp, #8
   193b8:	ldr	r3, [r4, #64]	; 0x40
   193bc:	ldm	r9, {r1, r5}
   193c0:	sub	r2, r6, sl
   193c4:	str	r1, [sp, #4]
   193c8:	cmp	r3, #0
   193cc:	bne	1949c <__assert_fail@plt+0x7d2c>
   193d0:	ldr	r3, [r4]
   193d4:	ldr	r1, [r4, #24]
   193d8:	add	r1, r3, r1
   193dc:	add	r1, r1, sl
   193e0:	mov	r3, r9
   193e4:	mov	r8, r0
   193e8:	bl	23d60 <__assert_fail@plt+0x125f0>
   193ec:	mov	r7, r0
   193f0:	add	r0, r0, #1
   193f4:	cmp	r0, #2
   193f8:	bcc	19414 <__assert_fail@plt+0x7ca4>
   193fc:	cmn	r7, #2
   19400:	bne	19444 <__assert_fail@plt+0x7cd4>
   19404:	ldr	r0, [r4, #36]	; 0x24
   19408:	ldr	r1, [r4, #48]	; 0x30
   1940c:	cmp	r0, r1
   19410:	blt	19554 <__assert_fail@plt+0x7de4>
   19414:	ldr	r1, [r4, #24]
   19418:	ldr	r0, [r4]
   1941c:	add	r1, r1, sl
   19420:	ldrb	r0, [r0, r1]
   19424:	str	r0, [sp, #8]
   19428:	ldr	r1, [r4, #64]	; 0x40
   1942c:	cmp	r1, #0
   19430:	bne	19548 <__assert_fail@plt+0x7dd8>
   19434:	ldr	r1, [sp, #4]
   19438:	mov	r7, #1
   1943c:	stm	r9, {r1, r5}
   19440:	b	19448 <__assert_fail@plt+0x7cd8>
   19444:	ldr	r0, [sp, #8]
   19448:	ldr	r1, [r4, #8]
   1944c:	add	r5, r7, sl
   19450:	add	r2, sl, #1
   19454:	cmp	r2, r5
   19458:	str	r0, [r1, sl, lsl #2]
   1945c:	bge	19488 <__assert_fail@plt+0x7d18>
   19460:	mvn	r0, #3
   19464:	add	r2, r0, r7, lsl #2
   19468:	add	r0, r1, sl, lsl #2
   1946c:	mov	r1, #255	; 0xff
   19470:	add	r0, r0, #4
   19474:	bl	1165c <memset@plt>
   19478:	sub	r0, r7, #1
   1947c:	subs	r0, r0, #1
   19480:	bne	1947c <__assert_fail@plt+0x7d0c>
   19484:	mov	r2, r5
   19488:	cmp	r6, r2
   1948c:	mov	sl, r2
   19490:	mov	r0, r8
   19494:	bgt	193b8 <__assert_fail@plt+0x7c48>
   19498:	b	19560 <__assert_fail@plt+0x7df0>
   1949c:	cmp	r2, #1
   194a0:	add	r1, sp, #12
   194a4:	blt	193e0 <__assert_fail@plt+0x7c70>
   194a8:	ldr	r1, [r4, #80]	; 0x50
   194ac:	cmp	r1, #1
   194b0:	add	r1, sp, #12
   194b4:	blt	193e0 <__assert_fail@plt+0x7c70>
   194b8:	ldr	r7, [r4, #24]
   194bc:	ldm	r4, {r1, ip}
   194c0:	cmp	r2, #2
   194c4:	add	r7, sl, r7
   194c8:	ldrb	r1, [r1, r7]
   194cc:	ldrb	r1, [r3, r1]
   194d0:	strb	r1, [ip, sl]
   194d4:	strb	r1, [sp, #12]
   194d8:	add	r1, sp, #12
   194dc:	blt	193e0 <__assert_fail@plt+0x7c70>
   194e0:	ldr	r1, [r4, #80]	; 0x50
   194e4:	cmp	r1, #2
   194e8:	add	r1, sp, #12
   194ec:	blt	193e0 <__assert_fail@plt+0x7c70>
   194f0:	mov	lr, r0
   194f4:	mov	r0, #1
   194f8:	ldr	r7, [r4, #24]
   194fc:	ldm	r4, {r1, ip}
   19500:	ldr	r3, [r4, #64]	; 0x40
   19504:	add	r1, r1, r7
   19508:	add	r1, r1, sl
   1950c:	ldrb	r1, [r1, r0]
   19510:	ldrb	r1, [r3, r1]
   19514:	add	r3, ip, sl
   19518:	strb	r1, [r3, r0]
   1951c:	add	r3, sp, #12
   19520:	strb	r1, [r3, r0]
   19524:	add	r0, r0, #1
   19528:	cmp	r0, r2
   1952c:	bge	1953c <__assert_fail@plt+0x7dcc>
   19530:	ldr	r1, [r4, #80]	; 0x50
   19534:	cmp	r0, r1
   19538:	blt	194f8 <__assert_fail@plt+0x7d88>
   1953c:	add	r1, sp, #12
   19540:	mov	r0, lr
   19544:	b	193e0 <__assert_fail@plt+0x7c70>
   19548:	ldrb	r0, [r1, r0]
   1954c:	str	r0, [sp, #8]
   19550:	b	19434 <__assert_fail@plt+0x7cc4>
   19554:	ldr	r0, [sp, #4]
   19558:	stm	r9, {r0, r5}
   1955c:	mov	r2, sl
   19560:	str	r2, [r4, #28]
   19564:	str	r2, [r4, #32]
   19568:	sub	sp, fp, #28
   1956c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19570:	push	{r4, sl, fp, lr}
   19574:	add	fp, sp, #8
   19578:	ldr	ip, [r0, #36]	; 0x24
   1957c:	ldr	r3, [r0, #48]	; 0x30
   19580:	ldr	r1, [r0, #28]
   19584:	cmp	ip, r3
   19588:	movgt	ip, r3
   1958c:	cmp	r1, ip
   19590:	bge	195b8 <__assert_fail@plt+0x7e48>
   19594:	ldr	r2, [r0, #24]
   19598:	ldm	r0, {r3, lr}
   1959c:	ldr	r4, [r0, #64]	; 0x40
   195a0:	add	r2, r3, r2
   195a4:	ldrb	r2, [r2, r1]
   195a8:	ldrb	r2, [r4, r2]
   195ac:	strb	r2, [lr, r1]
   195b0:	add	r1, r1, #1
   195b4:	b	1958c <__assert_fail@plt+0x7e1c>
   195b8:	str	r1, [r0, #28]
   195bc:	str	r1, [r0, #32]
   195c0:	pop	{r4, sl, fp, pc}
   195c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195c8:	add	fp, sp, #28
   195cc:	sub	sp, sp, #28
   195d0:	ldr	r9, [r1]
   195d4:	mov	r5, r0
   195d8:	ldr	r8, [fp, #12]
   195dc:	mov	r6, r2
   195e0:	str	r1, [sp, #12]
   195e4:	str	r3, [sp, #16]
   195e8:	ldr	r0, [r9, #84]	; 0x54
   195ec:	str	r8, [sp, #4]
   195f0:	str	r0, [sp, #8]
   195f4:	ldr	r0, [fp, #8]
   195f8:	str	r0, [sp]
   195fc:	mov	r0, r5
   19600:	bl	19e04 <__assert_fail@plt+0x8694>
   19604:	mov	r4, r0
   19608:	cmp	r0, #0
   1960c:	bne	1961c <__assert_fail@plt+0x7eac>
   19610:	ldr	r0, [r8]
   19614:	cmp	r0, #0
   19618:	bne	1970c <__assert_fail@plt+0x7f9c>
   1961c:	ldr	r0, [sp, #16]
   19620:	ldr	r8, [fp, #8]
   19624:	mov	r7, #10
   19628:	orr	sl, r0, #8388608	; 0x800000
   1962c:	ldrb	r0, [r6, #4]
   19630:	cmp	r0, #10
   19634:	bne	19710 <__assert_fail@plt+0x7fa0>
   19638:	mov	r0, r6
   1963c:	mov	r1, r5
   19640:	mov	r2, sl
   19644:	bl	19774 <__assert_fail@plt+0x8004>
   19648:	ldr	r1, [r5, #40]	; 0x28
   1964c:	mov	r2, #0
   19650:	add	r0, r1, r0
   19654:	str	r0, [r5, #40]	; 0x28
   19658:	ldrb	r0, [r6, #4]
   1965c:	orr	r1, r0, #8
   19660:	cmp	r1, #10
   19664:	bne	19694 <__assert_fail@plt+0x7f24>
   19668:	mov	r0, #0
   1966c:	str	r7, [sp, #24]
   19670:	mov	r1, r4
   19674:	add	r3, sp, #20
   19678:	str	r0, [sp, #20]
   1967c:	mov	r0, r9
   19680:	bl	1b594 <__assert_fail@plt+0x9e24>
   19684:	mov	r4, r0
   19688:	cmp	r0, #0
   1968c:	bne	1962c <__assert_fail@plt+0x7ebc>
   19690:	b	19700 <__assert_fail@plt+0x7f90>
   19694:	cmp	r8, #0
   19698:	beq	196a4 <__assert_fail@plt+0x7f34>
   1969c:	cmp	r0, #9
   196a0:	beq	19668 <__assert_fail@plt+0x7ef8>
   196a4:	ldr	r0, [sp, #8]
   196a8:	ldr	r7, [r9, #84]	; 0x54
   196ac:	ldr	r1, [sp, #12]
   196b0:	ldr	r3, [sp, #16]
   196b4:	mov	r2, r6
   196b8:	str	r0, [r9, #84]	; 0x54
   196bc:	str	r8, [sp]
   196c0:	ldr	r8, [fp, #12]
   196c4:	mov	r0, r5
   196c8:	str	r8, [sp, #4]
   196cc:	bl	19e04 <__assert_fail@plt+0x8694>
   196d0:	mov	r2, r0
   196d4:	cmp	r0, #0
   196d8:	bne	196e8 <__assert_fail@plt+0x7f78>
   196dc:	ldr	r0, [r8]
   196e0:	cmp	r0, #0
   196e4:	bne	1971c <__assert_fail@plt+0x7fac>
   196e8:	ldr	r0, [r9, #84]	; 0x54
   196ec:	ldr	r8, [fp, #8]
   196f0:	orr	r0, r0, r7
   196f4:	mov	r7, #10
   196f8:	str	r0, [r9, #84]	; 0x54
   196fc:	b	19668 <__assert_fail@plt+0x7ef8>
   19700:	ldr	r1, [fp, #12]
   19704:	mov	r0, #12
   19708:	str	r0, [r1]
   1970c:	mov	r4, #0
   19710:	mov	r0, r4
   19714:	sub	sp, fp, #28
   19718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1971c:	cmp	r4, #0
   19720:	beq	1970c <__assert_fail@plt+0x7f9c>
   19724:	mov	r5, r4
   19728:	ldr	r4, [r4, #4]
   1972c:	cmp	r4, #0
   19730:	bne	19724 <__assert_fail@plt+0x7fb4>
   19734:	ldr	r4, [r5, #8]
   19738:	cmp	r4, #0
   1973c:	bne	19724 <__assert_fail@plt+0x7fb4>
   19740:	add	r0, r5, #20
   19744:	bl	18b5c <__assert_fail@plt+0x73ec>
   19748:	ldr	r0, [r5]
   1974c:	cmp	r0, #0
   19750:	beq	1970c <__assert_fail@plt+0x7f9c>
   19754:	ldr	r4, [r0, #8]
   19758:	cmp	r4, r5
   1975c:	mov	r5, r0
   19760:	beq	19740 <__assert_fail@plt+0x7fd0>
   19764:	cmp	r4, #0
   19768:	mov	r5, r0
   1976c:	beq	19740 <__assert_fail@plt+0x7fd0>
   19770:	b	19724 <__assert_fail@plt+0x7fb4>
   19774:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19778:	add	fp, sp, #24
   1977c:	sub	sp, sp, #8
   19780:	mov	r9, r0
   19784:	mov	r7, r1
   19788:	ldr	r0, [r1, #40]	; 0x28
   1978c:	ldr	r1, [r1, #56]	; 0x38
   19790:	cmp	r1, r0
   19794:	ble	1987c <__assert_fail@plt+0x810c>
   19798:	ldr	r1, [r7, #4]
   1979c:	mov	r5, r9
   197a0:	mov	r8, r2
   197a4:	ldrb	r6, [r1, r0]
   197a8:	strb	r6, [r5], #4
   197ac:	ldr	r0, [r5]
   197b0:	bic	r1, r0, #6291456	; 0x600000
   197b4:	str	r1, [r5]
   197b8:	ldr	r3, [r7, #80]	; 0x50
   197bc:	cmp	r3, #2
   197c0:	blt	197e4 <__assert_fail@plt+0x8074>
   197c4:	ldr	r2, [r7, #28]
   197c8:	ldr	r1, [r7, #40]	; 0x28
   197cc:	cmp	r1, r2
   197d0:	beq	197e4 <__assert_fail@plt+0x8074>
   197d4:	ldr	r2, [r7, #8]
   197d8:	ldr	r1, [r2, r1, lsl #2]
   197dc:	cmn	r1, #1
   197e0:	beq	19b38 <__assert_fail@plt+0x83c8>
   197e4:	movw	r1, #65280	; 0xff00
   197e8:	cmp	r6, #92	; 0x5c
   197ec:	movt	r1, #65439	; 0xff9f
   197f0:	bne	1988c <__assert_fail@plt+0x811c>
   197f4:	ldr	r6, [r7, #40]	; 0x28
   197f8:	ldr	r4, [r7, #48]	; 0x30
   197fc:	add	r2, r6, #1
   19800:	cmp	r2, r4
   19804:	bge	198e0 <__assert_fail@plt+0x8170>
   19808:	ldrb	r4, [r7, #75]	; 0x4b
   1980c:	cmp	r4, #0
   19810:	bne	19d90 <__assert_fail@plt+0x8620>
   19814:	ldr	r3, [r7, #4]
   19818:	ldrb	r6, [r3, r2]
   1981c:	and	r0, r0, r1
   19820:	strb	r6, [r9]
   19824:	orr	r4, r0, #1
   19828:	str	r4, [r9, #4]
   1982c:	ldr	r0, [r7, #80]	; 0x50
   19830:	cmp	r0, #2
   19834:	blt	199f0 <__assert_fail@plt+0x8280>
   19838:	ldr	r0, [r7, #8]
   1983c:	ldr	r1, [r7, #40]	; 0x28
   19840:	add	r0, r0, r1, lsl #2
   19844:	ldr	r4, [r0, #4]
   19848:	mov	r0, r4
   1984c:	bl	11638 <iswalnum@plt>
   19850:	sub	r1, r4, #95	; 0x5f
   19854:	cmp	r0, #0
   19858:	clz	r1, r1
   1985c:	movwne	r0, #1
   19860:	lsr	r1, r1, #5
   19864:	orr	r0, r1, r0
   19868:	ldr	r1, [r5]
   1986c:	bic	r1, r1, #4194304	; 0x400000
   19870:	orr	r0, r1, r0, lsl #22
   19874:	uxtb	r1, r6
   19878:	b	19a14 <__assert_fail@plt+0x82a4>
   1987c:	mov	r0, #2
   19880:	mov	r4, #0
   19884:	strb	r0, [r9, #4]
   19888:	b	19d64 <__assert_fail@plt+0x85f4>
   1988c:	and	r0, r0, r1
   19890:	orr	r4, r0, #1
   19894:	str	r4, [r5]
   19898:	ldr	r0, [r7, #80]	; 0x50
   1989c:	cmp	r0, #2
   198a0:	blt	198ec <__assert_fail@plt+0x817c>
   198a4:	ldr	r0, [r7, #8]
   198a8:	ldr	r1, [r7, #40]	; 0x28
   198ac:	ldr	r4, [r0, r1, lsl #2]
   198b0:	mov	r0, r4
   198b4:	bl	11638 <iswalnum@plt>
   198b8:	sub	r1, r4, #95	; 0x5f
   198bc:	cmp	r0, #0
   198c0:	clz	r1, r1
   198c4:	movwne	r0, #1
   198c8:	lsr	r1, r1, #5
   198cc:	orr	r0, r1, r0
   198d0:	ldr	r1, [r5]
   198d4:	bic	r1, r1, #4194304	; 0x400000
   198d8:	orr	r0, r1, r0, lsl #22
   198dc:	b	1990c <__assert_fail@plt+0x819c>
   198e0:	and	r0, r0, r1
   198e4:	orr	r0, r0, #36	; 0x24
   198e8:	b	19b4c <__assert_fail@plt+0x83dc>
   198ec:	bl	115f0 <__ctype_b_loc@plt>
   198f0:	ldr	r0, [r0]
   198f4:	cmp	r6, #95	; 0x5f
   198f8:	add	r0, r0, r6, lsl #1
   198fc:	ldrh	r0, [r0]
   19900:	ubfx	r0, r0, #3, #1
   19904:	movweq	r0, #1
   19908:	orr	r0, r4, r0, lsl #22
   1990c:	mov	r4, #1
   19910:	cmp	r6, #62	; 0x3e
   19914:	str	r0, [r5]
   19918:	bgt	199b4 <__assert_fail@plt+0x8244>
   1991c:	sub	r1, r6, #36	; 0x24
   19920:	cmp	r1, #10
   19924:	bhi	19ba8 <__assert_fail@plt+0x8438>
   19928:	add	r2, pc, #0
   1992c:	ldr	pc, [r2, r1, lsl #2]
   19930:	andeq	r9, r1, ip, asr r9
   19934:	andeq	r9, r1, r4, ror #26
   19938:	andeq	r9, r1, r4, ror #26
   1993c:	andeq	r9, r1, r4, ror #26
   19940:			; <UNDEFINED> instruction: 0x00019bbc
   19944:	andeq	r9, r1, ip, asr #23
   19948:	ldrdeq	r9, [r1], -ip
   1994c:	andeq	r9, r1, r4, ror #23
   19950:	andeq	r9, r1, r4, ror #26
   19954:	andeq	r9, r1, r4, ror #26
   19958:	strdeq	r9, [r1], -r4
   1995c:	tst	r8, #8
   19960:	bne	199ac <__assert_fail@plt+0x823c>
   19964:	ldr	r1, [r7, #40]	; 0x28
   19968:	ldr	r2, [r7, #48]	; 0x30
   1996c:	add	r1, r1, #1
   19970:	cmp	r1, r2
   19974:	beq	199ac <__assert_fail@plt+0x823c>
   19978:	str	r1, [r7, #40]	; 0x28
   1997c:	mov	r0, sp
   19980:	mov	r1, r7
   19984:	mov	r2, r8
   19988:	bl	19774 <__assert_fail@plt+0x8004>
   1998c:	ldr	r0, [r7, #40]	; 0x28
   19990:	sub	r0, r0, #1
   19994:	str	r0, [r7, #40]	; 0x28
   19998:	ldrb	r0, [sp, #4]
   1999c:	sub	r0, r0, #9
   199a0:	cmp	r0, #1
   199a4:	bhi	19d64 <__assert_fail@plt+0x85f4>
   199a8:	ldr	r0, [r5]
   199ac:	mov	r1, #32
   199b0:	b	199e8 <__assert_fail@plt+0x8278>
   199b4:	cmp	r6, #122	; 0x7a
   199b8:	bgt	19b10 <__assert_fail@plt+0x83a0>
   199bc:	cmp	r6, #63	; 0x3f
   199c0:	beq	19bfc <__assert_fail@plt+0x848c>
   199c4:	cmp	r6, #91	; 0x5b
   199c8:	beq	19c0c <__assert_fail@plt+0x849c>
   199cc:	cmp	r6, #94	; 0x5e
   199d0:	bne	19d64 <__assert_fail@plt+0x85f4>
   199d4:	movw	r1, #8
   199d8:	movt	r1, #128	; 0x80
   199dc:	tst	r8, r1
   199e0:	beq	19c54 <__assert_fail@plt+0x84e4>
   199e4:	mov	r1, #16
   199e8:	mov	r2, #12
   199ec:	b	19b00 <__assert_fail@plt+0x8390>
   199f0:	bl	115f0 <__ctype_b_loc@plt>
   199f4:	ldr	r0, [r0]
   199f8:	uxtb	r1, r6
   199fc:	cmp	r1, #95	; 0x5f
   19a00:	add	r0, r0, r1, lsl #1
   19a04:	ldrh	r0, [r0]
   19a08:	ubfx	r0, r0, #3, #1
   19a0c:	movweq	r0, #1
   19a10:	orr	r0, r4, r0, lsl #22
   19a14:	uxtb	r2, r6
   19a18:	mov	r4, #2
   19a1c:	str	r0, [r5]
   19a20:	cmp	r2, #95	; 0x5f
   19a24:	bgt	19b58 <__assert_fail@plt+0x83e8>
   19a28:	sub	r3, r2, #39	; 0x27
   19a2c:	cmp	r3, #44	; 0x2c
   19a30:	bhi	19c80 <__assert_fail@plt+0x8510>
   19a34:	add	r2, pc, #0
   19a38:	ldr	pc, [r2, r3, lsl #2]
   19a3c:	andeq	r9, r1, r8, ror #25
   19a40:	strdeq	r9, [r1], -r8
   19a44:	andeq	r9, r1, r4, lsl #26
   19a48:	andeq	r9, r1, r4, ror #26
   19a4c:	andeq	r9, r1, r0, lsl sp
   19a50:	andeq	r9, r1, r4, ror #26
   19a54:	andeq	r9, r1, r4, ror #26
   19a58:	andeq	r9, r1, r4, ror #26
   19a5c:	andeq	r9, r1, r4, ror #26
   19a60:	andeq	r9, r1, r4, ror #26
   19a64:	strdeq	r9, [r1], -r0
   19a68:	strdeq	r9, [r1], -r0
   19a6c:	strdeq	r9, [r1], -r0
   19a70:	strdeq	r9, [r1], -r0
   19a74:	strdeq	r9, [r1], -r0
   19a78:	strdeq	r9, [r1], -r0
   19a7c:	strdeq	r9, [r1], -r0
   19a80:	strdeq	r9, [r1], -r0
   19a84:	strdeq	r9, [r1], -r0
   19a88:	andeq	r9, r1, r4, ror #26
   19a8c:	andeq	r9, r1, r4, ror #26
   19a90:	andeq	r9, r1, r8, lsr #26
   19a94:	andeq	r9, r1, r4, ror #26
   19a98:	andeq	r9, r1, r8, lsr sp
   19a9c:	andeq	r9, r1, r8, asr #26
   19aa0:	andeq	r9, r1, r4, ror #26
   19aa4:	andeq	r9, r1, r4, ror #26
   19aa8:	andeq	r9, r1, r0, ror sp
   19aac:	andeq	r9, r1, r4, ror #26
   19ab0:	andeq	r9, r1, r4, ror #26
   19ab4:	andeq	r9, r1, r4, ror #26
   19ab8:	andeq	r9, r1, r4, ror #26
   19abc:	andeq	r9, r1, r4, ror #26
   19ac0:	andeq	r9, r1, r4, ror #26
   19ac4:	andeq	r9, r1, r4, ror #26
   19ac8:	andeq	r9, r1, r4, ror #26
   19acc:	andeq	r9, r1, r4, ror #26
   19ad0:	andeq	r9, r1, r4, ror #26
   19ad4:	andeq	r9, r1, r4, ror #26
   19ad8:	andeq	r9, r1, r4, ror #26
   19adc:	andeq	r9, r1, r4, ror #26
   19ae0:	andeq	r9, r1, r4, ror #26
   19ae4:	andeq	r9, r1, r4, ror #26
   19ae8:	andeq	r9, r1, r4, ror #26
   19aec:	andeq	r9, r1, r0, lsl #27
   19af0:	tst	r8, #16384	; 0x4000
   19af4:	bne	19d64 <__assert_fail@plt+0x85f4>
   19af8:	sub	r1, r1, #49	; 0x31
   19afc:	mov	r2, #4
   19b00:	bfi	r0, r2, #0, #8
   19b04:	str	r1, [r9]
   19b08:	str	r0, [r9, #4]
   19b0c:	b	19d64 <__assert_fail@plt+0x85f4>
   19b10:	cmp	r6, #123	; 0x7b
   19b14:	beq	19c14 <__assert_fail@plt+0x84a4>
   19b18:	cmp	r6, #124	; 0x7c
   19b1c:	beq	19c24 <__assert_fail@plt+0x84b4>
   19b20:	cmp	r6, #125	; 0x7d
   19b24:	bne	19d64 <__assert_fail@plt+0x85f4>
   19b28:	and	r1, r8, #4608	; 0x1200
   19b2c:	cmp	r1, #4608	; 0x1200
   19b30:	beq	19cd0 <__assert_fail@plt+0x8560>
   19b34:	b	19d64 <__assert_fail@plt+0x85f4>
   19b38:	movw	r1, #65280	; 0xff00
   19b3c:	movt	r1, #65439	; 0xff9f
   19b40:	and	r0, r0, r1
   19b44:	orr	r0, r0, #1
   19b48:	orr	r0, r0, #2097152	; 0x200000
   19b4c:	str	r0, [r5]
   19b50:	mov	r4, #1
   19b54:	b	19d64 <__assert_fail@plt+0x85f4>
   19b58:	sub	r1, r2, #115	; 0x73
   19b5c:	cmp	r1, #10
   19b60:	bhi	19c38 <__assert_fail@plt+0x84c8>
   19b64:	add	r2, pc, #0
   19b68:	ldr	pc, [r2, r1, lsl #2]
   19b6c:	muleq	r1, r8, fp
   19b70:	andeq	r9, r1, r4, ror #26
   19b74:	andeq	r9, r1, r4, ror #26
   19b78:	andeq	r9, r1, r4, ror #26
   19b7c:	muleq	r1, r4, ip
   19b80:	andeq	r9, r1, r4, ror #26
   19b84:	andeq	r9, r1, r4, ror #26
   19b88:	andeq	r9, r1, r4, ror #26
   19b8c:	andeq	r9, r1, r4, lsr #25
   19b90:			; <UNDEFINED> instruction: 0x00019cb8
   19b94:	andeq	r9, r1, r4, asr #25
   19b98:	tst	r8, #524288	; 0x80000
   19b9c:	bne	19d64 <__assert_fail@plt+0x85f4>
   19ba0:	mov	r1, #34	; 0x22
   19ba4:	b	19d5c <__assert_fail@plt+0x85ec>
   19ba8:	cmp	r6, #10
   19bac:	bne	19d64 <__assert_fail@plt+0x85f4>
   19bb0:	tst	r8, #2048	; 0x800
   19bb4:	bne	19c30 <__assert_fail@plt+0x84c0>
   19bb8:	b	19d64 <__assert_fail@plt+0x85f4>
   19bbc:	tst	r8, #8192	; 0x2000
   19bc0:	beq	19d64 <__assert_fail@plt+0x85f4>
   19bc4:	mov	r1, #8
   19bc8:	b	19d5c <__assert_fail@plt+0x85ec>
   19bcc:	tst	r8, #8192	; 0x2000
   19bd0:	beq	19d64 <__assert_fail@plt+0x85f4>
   19bd4:	mov	r1, #9
   19bd8:	b	19d5c <__assert_fail@plt+0x85ec>
   19bdc:	mov	r1, #11
   19be0:	b	19d5c <__assert_fail@plt+0x85ec>
   19be4:	movw	r1, #1026	; 0x402
   19be8:	tst	r8, r1
   19bec:	bne	19d64 <__assert_fail@plt+0x85f4>
   19bf0:	b	19d20 <__assert_fail@plt+0x85b0>
   19bf4:	mov	r1, #5
   19bf8:	b	19d5c <__assert_fail@plt+0x85ec>
   19bfc:	movw	r1, #1026	; 0x402
   19c00:	tst	r8, r1
   19c04:	bne	19d64 <__assert_fail@plt+0x85f4>
   19c08:	b	19d58 <__assert_fail@plt+0x85e8>
   19c0c:	mov	r1, #20
   19c10:	b	19d5c <__assert_fail@plt+0x85ec>
   19c14:	and	r1, r8, #4608	; 0x1200
   19c18:	cmp	r1, #4608	; 0x1200
   19c1c:	beq	19cb0 <__assert_fail@plt+0x8540>
   19c20:	b	19d64 <__assert_fail@plt+0x85f4>
   19c24:	and	r1, r8, #33792	; 0x8400
   19c28:	cmp	r1, #32768	; 0x8000
   19c2c:	bne	19d64 <__assert_fail@plt+0x85f4>
   19c30:	mov	r1, #10
   19c34:	b	19d5c <__assert_fail@plt+0x85ec>
   19c38:	cmp	r2, #96	; 0x60
   19c3c:	beq	19cd8 <__assert_fail@plt+0x8568>
   19c40:	cmp	r2, #98	; 0x62
   19c44:	tsteq	r8, #524288	; 0x80000
   19c48:	bne	19d64 <__assert_fail@plt+0x85f4>
   19c4c:	mov	r1, #256	; 0x100
   19c50:	b	199e8 <__assert_fail@plt+0x8278>
   19c54:	ldr	r1, [r7, #40]	; 0x28
   19c58:	cmp	r1, #0
   19c5c:	beq	199e4 <__assert_fail@plt+0x8274>
   19c60:	tst	r8, #2048	; 0x800
   19c64:	beq	19d64 <__assert_fail@plt+0x85f4>
   19c68:	ldr	r2, [r7, #4]
   19c6c:	add	r1, r1, r2
   19c70:	ldrb	r1, [r1, #-1]
   19c74:	cmp	r1, #10
   19c78:	beq	199e4 <__assert_fail@plt+0x8274>
   19c7c:	b	19d64 <__assert_fail@plt+0x85f4>
   19c80:	cmp	r2, #87	; 0x57
   19c84:	tsteq	r8, #524288	; 0x80000
   19c88:	bne	19d64 <__assert_fail@plt+0x85f4>
   19c8c:	mov	r1, #33	; 0x21
   19c90:	b	19d5c <__assert_fail@plt+0x85ec>
   19c94:	tst	r8, #524288	; 0x80000
   19c98:	bne	19d64 <__assert_fail@plt+0x85f4>
   19c9c:	mov	r1, #32
   19ca0:	b	19d5c <__assert_fail@plt+0x85ec>
   19ca4:	and	r1, r8, #4608	; 0x1200
   19ca8:	cmp	r1, #512	; 0x200
   19cac:	bne	19d64 <__assert_fail@plt+0x85f4>
   19cb0:	mov	r1, #23
   19cb4:	b	19d5c <__assert_fail@plt+0x85ec>
   19cb8:	tst	r8, #33792	; 0x8400
   19cbc:	bne	19d64 <__assert_fail@plt+0x85f4>
   19cc0:	b	19c30 <__assert_fail@plt+0x84c0>
   19cc4:	and	r1, r8, #4608	; 0x1200
   19cc8:	cmp	r1, #512	; 0x200
   19ccc:	bne	19d64 <__assert_fail@plt+0x85f4>
   19cd0:	mov	r1, #24
   19cd4:	b	19d5c <__assert_fail@plt+0x85ec>
   19cd8:	tst	r8, #524288	; 0x80000
   19cdc:	bne	19d64 <__assert_fail@plt+0x85f4>
   19ce0:	mov	r1, #64	; 0x40
   19ce4:	b	199e8 <__assert_fail@plt+0x8278>
   19ce8:	tst	r8, #524288	; 0x80000
   19cec:	bne	19d64 <__assert_fail@plt+0x85f4>
   19cf0:	mov	r1, #128	; 0x80
   19cf4:	b	199e8 <__assert_fail@plt+0x8278>
   19cf8:	tst	r8, #8192	; 0x2000
   19cfc:	beq	19bc4 <__assert_fail@plt+0x8454>
   19d00:	b	19d64 <__assert_fail@plt+0x85f4>
   19d04:	tst	r8, #8192	; 0x2000
   19d08:	beq	19bd4 <__assert_fail@plt+0x8464>
   19d0c:	b	19d64 <__assert_fail@plt+0x85f4>
   19d10:	movw	r1, #1026	; 0x402
   19d14:	and	r1, r8, r1
   19d18:	cmp	r1, #2
   19d1c:	bne	19d64 <__assert_fail@plt+0x85f4>
   19d20:	mov	r1, #18
   19d24:	b	19d5c <__assert_fail@plt+0x85ec>
   19d28:	tst	r8, #524288	; 0x80000
   19d2c:	bne	19d64 <__assert_fail@plt+0x85f4>
   19d30:	mov	r1, #6
   19d34:	b	199e8 <__assert_fail@plt+0x8278>
   19d38:	tst	r8, #524288	; 0x80000
   19d3c:	bne	19d64 <__assert_fail@plt+0x85f4>
   19d40:	mov	r1, #9
   19d44:	b	199e8 <__assert_fail@plt+0x8278>
   19d48:	movw	r1, #1026	; 0x402
   19d4c:	and	r1, r8, r1
   19d50:	cmp	r1, #2
   19d54:	bne	19d64 <__assert_fail@plt+0x85f4>
   19d58:	mov	r1, #19
   19d5c:	bfi	r0, r1, #0, #8
   19d60:	str	r0, [r5]
   19d64:	mov	r0, r4
   19d68:	sub	sp, fp, #24
   19d6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19d70:	tst	r8, #524288	; 0x80000
   19d74:	bne	19d64 <__assert_fail@plt+0x85f4>
   19d78:	mov	r1, #512	; 0x200
   19d7c:	b	199e8 <__assert_fail@plt+0x8278>
   19d80:	tst	r8, #524288	; 0x80000
   19d84:	bne	19d64 <__assert_fail@plt+0x85f4>
   19d88:	mov	r1, #35	; 0x23
   19d8c:	b	19d5c <__assert_fail@plt+0x85ec>
   19d90:	cmp	r3, #2
   19d94:	blt	19dc4 <__assert_fail@plt+0x8654>
   19d98:	ldr	r3, [r7, #8]
   19d9c:	ldr	r4, [r3, r2, lsl #2]
   19da0:	cmn	r4, #1
   19da4:	beq	19814 <__assert_fail@plt+0x80a4>
   19da8:	ldr	r4, [r7, #28]
   19dac:	add	r6, r6, #2
   19db0:	cmp	r4, r6
   19db4:	beq	19dc4 <__assert_fail@plt+0x8654>
   19db8:	ldr	r3, [r3, r6, lsl #2]
   19dbc:	cmn	r3, #1
   19dc0:	beq	19814 <__assert_fail@plt+0x80a4>
   19dc4:	ldrb	r3, [r7, #76]	; 0x4c
   19dc8:	mov	r6, r2
   19dcc:	cmp	r3, #0
   19dd0:	beq	19ddc <__assert_fail@plt+0x866c>
   19dd4:	ldr	r6, [r7, #12]
   19dd8:	ldr	r6, [r6, r2, lsl #2]
   19ddc:	ldr	r4, [r7, #24]
   19de0:	ldr	ip, [r7]
   19de4:	cmp	r3, #0
   19de8:	add	r6, r4, r6
   19dec:	add	r6, ip, r6
   19df0:	ldrsb	r6, [r6]
   19df4:	beq	1981c <__assert_fail@plt+0x80ac>
   19df8:	cmn	r6, #1
   19dfc:	ble	19814 <__assert_fail@plt+0x80a4>
   19e00:	b	1981c <__assert_fail@plt+0x80ac>
   19e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e08:	add	fp, sp, #28
   19e0c:	sub	sp, sp, #28
   19e10:	mov	r7, r1
   19e14:	mov	r1, r0
   19e18:	ldr	r4, [fp, #12]
   19e1c:	ldr	r5, [fp, #8]
   19e20:	mov	r6, r2
   19e24:	str	r3, [sp, #16]
   19e28:	ldr	r0, [r7]
   19e2c:	str	r1, [sp, #12]
   19e30:	str	r4, [sp, #4]
   19e34:	str	r5, [sp]
   19e38:	str	r0, [sp, #8]
   19e3c:	mov	r0, r1
   19e40:	mov	r1, r7
   19e44:	bl	1a090 <__assert_fail@plt+0x8920>
   19e48:	cmp	r0, #0
   19e4c:	bne	19e5c <__assert_fail@plt+0x86ec>
   19e50:	ldr	r1, [r4]
   19e54:	cmp	r1, #0
   19e58:	bne	19fb8 <__assert_fail@plt+0x8848>
   19e5c:	mov	r4, r0
   19e60:	ldrb	r0, [r6, #4]
   19e64:	orr	r1, r0, #8
   19e68:	cmp	r1, #10
   19e6c:	beq	19fbc <__assert_fail@plt+0x884c>
   19e70:	cmp	r5, #0
   19e74:	beq	19e80 <__assert_fail@plt+0x8710>
   19e78:	cmp	r0, #9
   19e7c:	beq	19fbc <__assert_fail@plt+0x884c>
   19e80:	ldr	r8, [fp, #12]
   19e84:	ldr	r0, [sp, #12]
   19e88:	ldr	r3, [sp, #16]
   19e8c:	mov	r1, r7
   19e90:	mov	r2, r6
   19e94:	mov	r9, r5
   19e98:	str	r5, [sp]
   19e9c:	str	r8, [sp, #4]
   19ea0:	bl	1a090 <__assert_fail@plt+0x8920>
   19ea4:	mov	sl, r0
   19ea8:	cmp	r0, #0
   19eac:	bne	19ebc <__assert_fail@plt+0x874c>
   19eb0:	ldr	r0, [r8]
   19eb4:	cmp	r0, #0
   19eb8:	bne	19fc8 <__assert_fail@plt+0x8858>
   19ebc:	cmp	r4, #0
   19ec0:	cmpne	sl, #0
   19ec4:	bne	19edc <__assert_fail@plt+0x876c>
   19ec8:	cmp	r4, #0
   19ecc:	mov	r5, r9
   19ed0:	movne	sl, r4
   19ed4:	mov	r0, sl
   19ed8:	b	19e5c <__assert_fail@plt+0x86ec>
   19edc:	mov	r0, #16
   19ee0:	mov	r1, r4
   19ee4:	mov	r2, sl
   19ee8:	add	r3, sp, #20
   19eec:	str	r0, [sp, #24]
   19ef0:	mov	r0, #0
   19ef4:	str	r0, [sp, #20]
   19ef8:	ldr	r0, [sp, #8]
   19efc:	bl	1b594 <__assert_fail@plt+0x9e24>
   19f00:	cmp	r0, #0
   19f04:	mov	r5, r9
   19f08:	bne	19e5c <__assert_fail@plt+0x86ec>
   19f0c:	mov	r5, sl
   19f10:	ldr	sl, [sl, #4]
   19f14:	cmp	sl, #0
   19f18:	bne	19f0c <__assert_fail@plt+0x879c>
   19f1c:	ldr	sl, [r5, #8]
   19f20:	cmp	sl, #0
   19f24:	bne	19f0c <__assert_fail@plt+0x879c>
   19f28:	add	r0, r5, #20
   19f2c:	bl	18b5c <__assert_fail@plt+0x73ec>
   19f30:	ldr	r0, [r5]
   19f34:	cmp	r0, #0
   19f38:	beq	19f5c <__assert_fail@plt+0x87ec>
   19f3c:	ldr	sl, [r0, #8]
   19f40:	cmp	sl, r5
   19f44:	mov	r5, r0
   19f48:	beq	19f28 <__assert_fail@plt+0x87b8>
   19f4c:	cmp	sl, #0
   19f50:	mov	r5, r0
   19f54:	beq	19f28 <__assert_fail@plt+0x87b8>
   19f58:	b	19f0c <__assert_fail@plt+0x879c>
   19f5c:	mov	r5, r4
   19f60:	ldr	r4, [r4, #4]
   19f64:	cmp	r4, #0
   19f68:	bne	19f5c <__assert_fail@plt+0x87ec>
   19f6c:	ldr	r4, [r5, #8]
   19f70:	cmp	r4, #0
   19f74:	bne	19f5c <__assert_fail@plt+0x87ec>
   19f78:	add	r0, r5, #20
   19f7c:	bl	18b5c <__assert_fail@plt+0x73ec>
   19f80:	ldr	r0, [r5]
   19f84:	cmp	r0, #0
   19f88:	beq	19fac <__assert_fail@plt+0x883c>
   19f8c:	ldr	r4, [r0, #8]
   19f90:	cmp	r4, r5
   19f94:	mov	r5, r0
   19f98:	beq	19f78 <__assert_fail@plt+0x8808>
   19f9c:	cmp	r4, #0
   19fa0:	mov	r5, r0
   19fa4:	beq	19f78 <__assert_fail@plt+0x8808>
   19fa8:	b	19f5c <__assert_fail@plt+0x87ec>
   19fac:	ldr	r1, [fp, #12]
   19fb0:	mov	r0, #12
   19fb4:	str	r0, [r1]
   19fb8:	mov	r4, #0
   19fbc:	mov	r0, r4
   19fc0:	sub	sp, fp, #28
   19fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc8:	cmp	r4, #0
   19fcc:	beq	19fb8 <__assert_fail@plt+0x8848>
   19fd0:	mov	r5, r4
   19fd4:	ldr	r4, [r4, #4]
   19fd8:	cmp	r4, #0
   19fdc:	bne	19fd0 <__assert_fail@plt+0x8860>
   19fe0:	ldr	r4, [r5, #8]
   19fe4:	cmp	r4, #0
   19fe8:	bne	19fd0 <__assert_fail@plt+0x8860>
   19fec:	add	r0, r5, #20
   19ff0:	bl	18b5c <__assert_fail@plt+0x73ec>
   19ff4:	ldr	r0, [r5]
   19ff8:	cmp	r0, #0
   19ffc:	beq	19fb8 <__assert_fail@plt+0x8848>
   1a000:	ldr	r4, [r0, #8]
   1a004:	cmp	r4, r5
   1a008:	mov	r5, r0
   1a00c:	beq	19fec <__assert_fail@plt+0x887c>
   1a010:	cmp	r4, #0
   1a014:	mov	r5, r0
   1a018:	beq	19fec <__assert_fail@plt+0x887c>
   1a01c:	b	19fd0 <__assert_fail@plt+0x8860>
   1a020:	push	{r4, r5, r6, sl, fp, lr}
   1a024:	add	fp, sp, #16
   1a028:	mov	r4, r2
   1a02c:	mov	r5, r1
   1a030:	mov	r6, r0
   1a034:	ldr	r0, [r0, #4]
   1a038:	cmp	r0, #0
   1a03c:	bne	1a030 <__assert_fail@plt+0x88c0>
   1a040:	ldr	r0, [r6, #8]
   1a044:	cmp	r0, #0
   1a048:	bne	1a030 <__assert_fail@plt+0x88c0>
   1a04c:	mov	r0, r4
   1a050:	mov	r1, r6
   1a054:	blx	r5
   1a058:	cmp	r0, #0
   1a05c:	bne	1a08c <__assert_fail@plt+0x891c>
   1a060:	ldr	r1, [r6]
   1a064:	cmp	r1, #0
   1a068:	beq	1a08c <__assert_fail@plt+0x891c>
   1a06c:	ldr	r0, [r1, #8]
   1a070:	cmp	r0, r6
   1a074:	mov	r6, r1
   1a078:	beq	1a04c <__assert_fail@plt+0x88dc>
   1a07c:	cmp	r0, #0
   1a080:	mov	r6, r1
   1a084:	beq	1a04c <__assert_fail@plt+0x88dc>
   1a088:	b	1a030 <__assert_fail@plt+0x88c0>
   1a08c:	pop	{r4, r5, r6, sl, fp, pc}
   1a090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a094:	add	fp, sp, #28
   1a098:	sub	sp, sp, #140	; 0x8c
   1a09c:	mov	r5, r1
   1a0a0:	mov	sl, r0
   1a0a4:	mov	r4, r2
   1a0a8:	ldr	r0, [r2, #4]
   1a0ac:	mvn	r1, #0
   1a0b0:	mov	r8, #0
   1a0b4:	ldr	r2, [r5]
   1a0b8:	uxtab	r1, r1, r0
   1a0bc:	str	r2, [sp, #44]	; 0x2c
   1a0c0:	ldr	r6, [fp, #12]
   1a0c4:	ldr	r7, [fp, #8]
   1a0c8:	add	r2, pc, #12
   1a0cc:	str	sl, [sp, #40]	; 0x28
   1a0d0:	str	r3, [sp, #36]	; 0x24
   1a0d4:	str	r4, [sp, #20]
   1a0d8:	ldr	pc, [r2, r1, lsl #2]
   1a0dc:	andeq	sl, r1, r4, lsr r3
   1a0e0:	andeq	fp, r1, r4, ror #4
   1a0e4:	muleq	r1, r4, r5
   1a0e8:	andeq	sl, r1, ip, lsl r4
   1a0ec:	andeq	sl, r1, r8, ror r4
   1a0f0:	muleq	r1, r4, r5
   1a0f4:	muleq	r1, r4, r5
   1a0f8:	andeq	sl, r1, r4, asr #9
   1a0fc:	andeq	sl, r1, ip, ror r1
   1a100:	andeq	fp, r1, r4, ror #4
   1a104:	andeq	sl, r1, ip, ror #2
   1a108:	andeq	sl, r1, ip, lsr r2
   1a10c:	muleq	r1, r4, r5
   1a110:	muleq	r1, r4, r5
   1a114:	muleq	r1, r4, r5
   1a118:	muleq	r1, r4, r5
   1a11c:	muleq	r1, r4, r5
   1a120:	andeq	sl, r1, ip, ror #2
   1a124:	andeq	sl, r1, ip, ror #2
   1a128:			; <UNDEFINED> instruction: 0x0001a2bc
   1a12c:	muleq	r1, r4, r5
   1a130:	muleq	r1, r4, r5
   1a134:	muleq	r1, r4, r5
   1a138:	andeq	sl, r1, ip, lsl #3
   1a13c:	muleq	r1, r4, r5
   1a140:	muleq	r1, r4, r5
   1a144:	muleq	r1, r4, r5
   1a148:	muleq	r1, r4, r5
   1a14c:	muleq	r1, r4, r5
   1a150:	muleq	r1, r4, r5
   1a154:	muleq	r1, r4, r5
   1a158:	andeq	sl, r1, r8, asr #3
   1a15c:	andeq	sl, r1, r8, asr #3
   1a160:	andeq	sl, r1, r8, ror #3
   1a164:	andeq	sl, r1, r8, ror #3
   1a168:	andeq	sl, r1, r4, lsr #11
   1a16c:	tst	r3, #32
   1a170:	bne	1a59c <__assert_fail@plt+0x8e2c>
   1a174:	tst	r3, #16
   1a178:	bne	1a5ac <__assert_fail@plt+0x8e3c>
   1a17c:	tst	r3, #131072	; 0x20000
   1a180:	uxtbeq	r1, r0
   1a184:	cmpeq	r1, #9
   1a188:	beq	1a5e8 <__assert_fail@plt+0x8e78>
   1a18c:	mov	r1, #1
   1a190:	mov	r2, #0
   1a194:	mov	r3, r4
   1a198:	mov	r8, #0
   1a19c:	bfi	r0, r1, #0, #8
   1a1a0:	mov	r1, #0
   1a1a4:	str	r0, [r4, #4]
   1a1a8:	ldr	r0, [sp, #44]	; 0x2c
   1a1ac:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a1b0:	ldr	r5, [sp, #20]
   1a1b4:	ldr	r2, [sp, #36]	; 0x24
   1a1b8:	mov	r9, r0
   1a1bc:	cmp	r0, #0
   1a1c0:	bne	1acbc <__assert_fail@plt+0x954c>
   1a1c4:	b	1b3d8 <__assert_fail@plt+0x9c68>
   1a1c8:	mvn	r2, #32
   1a1cc:	ldr	r1, [sl, #64]	; 0x40
   1a1d0:	movw	r3, #19465	; 0x4c09
   1a1d4:	uxtab	r0, r2, r0
   1a1d8:	movw	r2, #20686	; 0x50ce
   1a1dc:	movt	r3, #2
   1a1e0:	movt	r2, #2
   1a1e4:	b	1a204 <__assert_fail@plt+0x8a94>
   1a1e8:	mvn	r2, #34	; 0x22
   1a1ec:	ldr	r1, [sl, #64]	; 0x40
   1a1f0:	movw	r3, #18259	; 0x4753
   1a1f4:	uxtab	r0, r2, r0
   1a1f8:	movw	r2, #20692	; 0x50d4
   1a1fc:	movt	r3, #2
   1a200:	movt	r2, #2
   1a204:	clz	r0, r0
   1a208:	lsr	r0, r0, #5
   1a20c:	stm	sp, {r0, r6}
   1a210:	ldr	r0, [sp, #44]	; 0x2c
   1a214:	bl	1b63c <__assert_fail@plt+0x9ecc>
   1a218:	mov	r9, r0
   1a21c:	cmp	r0, #0
   1a220:	bne	1a4b8 <__assert_fail@plt+0x8d48>
   1a224:	ldr	r0, [r6]
   1a228:	ldr	r2, [sp, #36]	; 0x24
   1a22c:	ldr	r5, [sp, #20]
   1a230:	cmp	r0, #0
   1a234:	beq	1acbc <__assert_fail@plt+0x954c>
   1a238:	b	1b264 <__assert_fail@plt+0x9af4>
   1a23c:	ldr	r0, [r4]
   1a240:	movw	r1, #783	; 0x30f
   1a244:	tst	r0, r1
   1a248:	beq	1a298 <__assert_fail@plt+0x8b28>
   1a24c:	ldr	r0, [sp, #44]	; 0x2c
   1a250:	ldrb	r0, [r0, #88]	; 0x58
   1a254:	tst	r0, #16
   1a258:	bne	1a294 <__assert_fail@plt+0x8b24>
   1a25c:	ldr	r2, [sp, #44]	; 0x2c
   1a260:	orr	r1, r0, #16
   1a264:	tst	r0, #8
   1a268:	strb	r1, [r2, #88]	; 0x58
   1a26c:	bne	1b438 <__assert_fail@plt+0x9cc8>
   1a270:	add	r1, pc, #896	; 0x380
   1a274:	tst	r0, #4
   1a278:	vld1.64	{d16-d17}, [r1]
   1a27c:	add	r1, r2, #96	; 0x60
   1a280:	vst1.32	{d16-d17}, [r1]
   1a284:	beq	1b448 <__assert_fail@plt+0x9cd8>
   1a288:	vmov.i32	q8, #0	; 0x00000000
   1a28c:	add	r0, r2, #112	; 0x70
   1a290:	vst1.32	{d16-d17}, [r0]
   1a294:	ldr	r0, [r4]
   1a298:	mov	r9, r6
   1a29c:	ldr	r6, [sp, #44]	; 0x2c
   1a2a0:	cmp	r0, #256	; 0x100
   1a2a4:	beq	1b270 <__assert_fail@plt+0x9b00>
   1a2a8:	cmp	r0, #512	; 0x200
   1a2ac:	bne	1b2ec <__assert_fail@plt+0x9b7c>
   1a2b0:	mov	r5, #10
   1a2b4:	mov	r0, #5
   1a2b8:	b	1b278 <__assert_fail@plt+0x9b08>
   1a2bc:	mov	r0, #0
   1a2c0:	mov	r1, #1
   1a2c4:	str	r6, [sp, #16]
   1a2c8:	mov	r9, #0
   1a2cc:	str	r0, [fp, #-32]	; 0xffffffe0
   1a2d0:	mov	r0, #32
   1a2d4:	bl	23940 <__assert_fail@plt+0x121d0>
   1a2d8:	mov	r4, r0
   1a2dc:	mov	r0, #40	; 0x28
   1a2e0:	mov	r1, #1
   1a2e4:	bl	23940 <__assert_fail@plt+0x121d0>
   1a2e8:	mov	r8, r0
   1a2ec:	cmp	r4, #0
   1a2f0:	cmpne	r8, #0
   1a2f4:	beq	1b3f8 <__assert_fail@plt+0x9c88>
   1a2f8:	ldr	r6, [sp, #20]
   1a2fc:	ldr	r5, [sp, #36]	; 0x24
   1a300:	mov	r1, sl
   1a304:	mov	r0, r6
   1a308:	mov	r2, r5
   1a30c:	bl	1b868 <__assert_fail@plt+0xa0f8>
   1a310:	mov	r3, r0
   1a314:	ldr	r0, [r6, #4]
   1a318:	uxtb	r1, r0
   1a31c:	cmp	r1, #25
   1a320:	beq	1a608 <__assert_fail@plt+0x8e98>
   1a324:	cmp	r1, #2
   1a328:	beq	1b3f0 <__assert_fail@plt+0x9c80>
   1a32c:	mov	r9, #0
   1a330:	b	1a660 <__assert_fail@plt+0x8ef0>
   1a334:	ldr	r5, [sp, #44]	; 0x2c
   1a338:	mov	r1, #0
   1a33c:	mov	r2, #0
   1a340:	mov	r3, r4
   1a344:	mov	r8, #0
   1a348:	mov	r0, r5
   1a34c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a350:	cmp	r0, #0
   1a354:	beq	1b3d8 <__assert_fail@plt+0x9c68>
   1a358:	mov	r9, r0
   1a35c:	ldr	r0, [r5, #92]	; 0x5c
   1a360:	cmp	r0, #2
   1a364:	blt	1a4b8 <__assert_fail@plt+0x8d48>
   1a368:	mov	r7, #16
   1a36c:	sub	r4, fp, #80	; 0x50
   1a370:	ldr	r0, [sl, #40]	; 0x28
   1a374:	ldr	r1, [sl, #56]	; 0x38
   1a378:	cmp	r1, r0
   1a37c:	ble	1a4b8 <__assert_fail@plt+0x8d48>
   1a380:	ldr	r1, [sl, #28]
   1a384:	ldr	r2, [sp, #36]	; 0x24
   1a388:	ldr	r5, [sp, #20]
   1a38c:	cmp	r0, r1
   1a390:	beq	1acbc <__assert_fail@plt+0x954c>
   1a394:	ldr	r1, [sl, #8]
   1a398:	ldr	r0, [r1, r0, lsl #2]
   1a39c:	cmn	r0, #1
   1a3a0:	bne	1acbc <__assert_fail@plt+0x954c>
   1a3a4:	mov	r0, r5
   1a3a8:	mov	r1, sl
   1a3ac:	bl	19774 <__assert_fail@plt+0x8004>
   1a3b0:	ldr	r1, [sl, #40]	; 0x28
   1a3b4:	mov	r8, r6
   1a3b8:	ldr	r6, [sp, #44]	; 0x2c
   1a3bc:	mov	r2, #0
   1a3c0:	mov	r3, r5
   1a3c4:	add	r0, r1, r0
   1a3c8:	mov	r1, #0
   1a3cc:	str	r0, [sl, #40]	; 0x28
   1a3d0:	mov	r0, r6
   1a3d4:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a3d8:	mov	r5, r0
   1a3dc:	mov	r0, #0
   1a3e0:	str	r7, [fp, #-76]	; 0xffffffb4
   1a3e4:	mov	r1, r9
   1a3e8:	mov	r3, r4
   1a3ec:	str	r0, [fp, #-80]	; 0xffffffb0
   1a3f0:	mov	r0, r6
   1a3f4:	mov	r2, r5
   1a3f8:	mov	r6, r8
   1a3fc:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a400:	cmp	r5, #0
   1a404:	movne	r9, r0
   1a408:	cmpne	r0, #0
   1a40c:	bne	1a370 <__assert_fail@plt+0x8c00>
   1a410:	mov	r0, #12
   1a414:	str	r0, [r6]
   1a418:	b	1b260 <__assert_fail@plt+0x9af0>
   1a41c:	ldr	r5, [sp, #44]	; 0x2c
   1a420:	ldr	r0, [r4]
   1a424:	mov	r1, #1
   1a428:	ldr	r2, [r5, #84]	; 0x54
   1a42c:	tst	r2, r1, lsl r0
   1a430:	beq	1b418 <__assert_fail@plt+0x9ca8>
   1a434:	lsl	r0, r1, r0
   1a438:	ldr	r1, [r5, #80]	; 0x50
   1a43c:	mov	r2, #0
   1a440:	mov	r3, r4
   1a444:	mov	r8, #0
   1a448:	orr	r0, r1, r0
   1a44c:	mov	r1, #0
   1a450:	str	r0, [r5, #80]	; 0x50
   1a454:	mov	r0, r5
   1a458:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a45c:	cmp	r0, #0
   1a460:	beq	1b3d8 <__assert_fail@plt+0x9c68>
   1a464:	mov	r9, r0
   1a468:	ldr	r0, [r5, #76]	; 0x4c
   1a46c:	add	r0, r0, #1
   1a470:	str	r0, [r5, #76]	; 0x4c
   1a474:	b	1a4ac <__assert_fail@plt+0x8d3c>
   1a478:	ldr	r5, [sp, #44]	; 0x2c
   1a47c:	mov	r1, #0
   1a480:	mov	r2, #0
   1a484:	mov	r3, r4
   1a488:	mov	r8, #0
   1a48c:	mov	r0, r5
   1a490:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a494:	cmp	r0, #0
   1a498:	beq	1b3d8 <__assert_fail@plt+0x9c68>
   1a49c:	mov	r9, r0
   1a4a0:	ldr	r0, [r5, #92]	; 0x5c
   1a4a4:	cmp	r0, #2
   1a4a8:	blt	1a4b8 <__assert_fail@plt+0x8d48>
   1a4ac:	ldrb	r0, [r5, #88]	; 0x58
   1a4b0:	orr	r0, r0, #2
   1a4b4:	strb	r0, [r5, #88]	; 0x58
   1a4b8:	ldr	r2, [sp, #36]	; 0x24
   1a4bc:	ldr	r5, [sp, #20]
   1a4c0:	b	1acbc <__assert_fail@plt+0x954c>
   1a4c4:	str	r6, [sp, #16]
   1a4c8:	ldr	r6, [r5, #24]
   1a4cc:	orr	r2, r3, #8388608	; 0x800000
   1a4d0:	mov	r1, sl
   1a4d4:	add	r0, r6, #1
   1a4d8:	str	r0, [r5, #24]
   1a4dc:	mov	r0, r4
   1a4e0:	bl	19774 <__assert_fail@plt+0x8004>
   1a4e4:	ldr	r1, [sl, #40]	; 0x28
   1a4e8:	ldr	r2, [sp, #20]
   1a4ec:	add	r0, r1, r0
   1a4f0:	mov	r1, #0
   1a4f4:	str	r0, [sl, #40]	; 0x28
   1a4f8:	ldrb	r0, [r2, #4]
   1a4fc:	cmp	r0, #9
   1a500:	beq	1a548 <__assert_fail@plt+0x8dd8>
   1a504:	add	r0, r7, #1
   1a508:	mov	r1, r5
   1a50c:	mov	r4, r2
   1a510:	str	r0, [sp]
   1a514:	mov	r0, sl
   1a518:	ldr	r7, [sp, #16]
   1a51c:	str	r7, [sp, #4]
   1a520:	ldr	r3, [sp, #36]	; 0x24
   1a524:	bl	195c4 <__assert_fail@plt+0x7e54>
   1a528:	mov	r1, r0
   1a52c:	ldr	r0, [r7]
   1a530:	mov	r8, #0
   1a534:	cmp	r0, #0
   1a538:	bne	1b264 <__assert_fail@plt+0x9af4>
   1a53c:	ldrb	r0, [r4, #4]
   1a540:	cmp	r0, #9
   1a544:	bne	1b4d8 <__assert_fail@plt+0x9d68>
   1a548:	ldr	r0, [sp, #44]	; 0x2c
   1a54c:	cmp	r6, #8
   1a550:	bhi	1a564 <__assert_fail@plt+0x8df4>
   1a554:	ldr	r3, [r0, #84]	; 0x54
   1a558:	mov	r2, #1
   1a55c:	orr	r2, r3, r2, lsl r6
   1a560:	str	r2, [r0, #84]	; 0x54
   1a564:	mov	r2, #17
   1a568:	mov	r8, #0
   1a56c:	sub	r3, fp, #80	; 0x50
   1a570:	str	r2, [fp, #-76]	; 0xffffffb4
   1a574:	mov	r2, #0
   1a578:	str	r8, [fp, #-80]	; 0xffffffb0
   1a57c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1a580:	cmp	r0, #0
   1a584:	beq	1b428 <__assert_fail@plt+0x9cb8>
   1a588:	mov	r9, r0
   1a58c:	str	r6, [r0, #20]
   1a590:	b	1acb0 <__assert_fail@plt+0x9540>
   1a594:	tst	r3, #16777216	; 0x1000000
   1a598:	beq	1a16c <__assert_fail@plt+0x89fc>
   1a59c:	mov	r0, #13
   1a5a0:	b	1a5ec <__assert_fail@plt+0x8e7c>
   1a5a4:	mov	r0, #5
   1a5a8:	b	1a5ec <__assert_fail@plt+0x8e7c>
   1a5ac:	mov	r0, r4
   1a5b0:	mov	r1, sl
   1a5b4:	mov	r2, r3
   1a5b8:	mov	r6, r3
   1a5bc:	bl	19774 <__assert_fail@plt+0x8004>
   1a5c0:	ldr	r1, [sl, #40]	; 0x28
   1a5c4:	mov	r2, r4
   1a5c8:	mov	r3, r6
   1a5cc:	add	r0, r1, r0
   1a5d0:	mov	r1, r5
   1a5d4:	str	r0, [sl, #40]	; 0x28
   1a5d8:	mov	r0, sl
   1a5dc:	sub	sp, fp, #28
   1a5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5e4:	b	1a090 <__assert_fail@plt+0x8920>
   1a5e8:	mov	r0, #16
   1a5ec:	str	r0, [r6]
   1a5f0:	b	1b264 <__assert_fail@plt+0x9af4>
   1a5f4:	nop	{0}
   1a5f8:	andeq	r0, r0, r0
   1a5fc:	mvnseq	r0, #0
   1a600:			; <UNDEFINED> instruction: 0x87fffffe
   1a604:			; <UNDEFINED> instruction: 0x07fffffe
   1a608:	ldrb	r0, [r8, #16]
   1a60c:	tst	r5, #256	; 0x100
   1a610:	orr	r0, r0, #1
   1a614:	strb	r0, [r8, #16]
   1a618:	beq	1a628 <__assert_fail@plt+0x8eb8>
   1a61c:	ldr	r0, [r4]
   1a620:	orr	r0, r0, #1024	; 0x400
   1a624:	str	r0, [r4]
   1a628:	ldr	r0, [sl, #40]	; 0x28
   1a62c:	ldr	r2, [sp, #36]	; 0x24
   1a630:	mov	r1, sl
   1a634:	add	r0, r0, r3
   1a638:	str	r0, [sl, #40]	; 0x28
   1a63c:	mov	r0, r6
   1a640:	bl	1b868 <__assert_fail@plt+0xa0f8>
   1a644:	ldr	r6, [sp, #20]
   1a648:	mov	r3, r0
   1a64c:	ldr	r0, [r6, #4]
   1a650:	uxtb	r1, r0
   1a654:	cmp	r1, #2
   1a658:	beq	1b3f0 <__assert_fail@plt+0x9c80>
   1a65c:	mov	r9, #1
   1a660:	uxtb	r1, r0
   1a664:	str	r8, [sp, #32]
   1a668:	mov	r2, r6
   1a66c:	ldr	r5, [sp, #36]	; 0x24
   1a670:	cmp	r1, #21
   1a674:	moveq	r1, #1
   1a678:	bfieq	r0, r1, #0, #8
   1a67c:	mov	r1, sl
   1a680:	streq	r0, [r6, #4]
   1a684:	sub	r0, fp, #80	; 0x50
   1a688:	str	r0, [fp, #-36]	; 0xffffffdc
   1a68c:	mov	r0, #3
   1a690:	str	r0, [fp, #-40]	; 0xffffffd8
   1a694:	mov	r0, #1
   1a698:	str	r5, [sp]
   1a69c:	str	r0, [sp, #4]
   1a6a0:	sub	r0, fp, #40	; 0x28
   1a6a4:	bl	1b9d0 <__assert_fail@plt+0xa260>
   1a6a8:	cmp	r0, #0
   1a6ac:	bne	1b3e0 <__assert_fail@plt+0x9c70>
   1a6b0:	and	r0, r5, #65536	; 0x10000
   1a6b4:	mov	r2, r5
   1a6b8:	str	r0, [sp, #24]
   1a6bc:	mov	r0, #0
   1a6c0:	str	r0, [sp, #12]
   1a6c4:	mov	r0, #0
   1a6c8:	str	r0, [sp, #8]
   1a6cc:	ldr	r5, [sp, #20]
   1a6d0:	mov	r0, r5
   1a6d4:	mov	r1, sl
   1a6d8:	bl	1b868 <__assert_fail@plt+0xa0f8>
   1a6dc:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1a6e0:	ldr	r6, [sp, #16]
   1a6e4:	mov	r8, r0
   1a6e8:	cmp	r7, #2
   1a6ec:	beq	1a86c <__assert_fail@plt+0x90fc>
   1a6f0:	cmp	r7, #4
   1a6f4:	bne	1a730 <__assert_fail@plt+0x8fc0>
   1a6f8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a6fc:	ldr	r0, [sl, #64]	; 0x40
   1a700:	sub	r3, fp, #32
   1a704:	str	r1, [sp]
   1a708:	ldr	r1, [sp, #36]	; 0x24
   1a70c:	str	r1, [sp, #4]
   1a710:	mov	r1, r4
   1a714:	ldr	r2, [sp, #32]
   1a718:	bl	1bc94 <__assert_fail@plt+0xa524>
   1a71c:	ldr	r2, [sp, #20]
   1a720:	cmp	r0, #0
   1a724:	str	r0, [r6]
   1a728:	beq	1a8a8 <__assert_fail@plt+0x9138>
   1a72c:	b	1b54c <__assert_fail@plt+0x9ddc>
   1a730:	ldr	r0, [sp, #20]
   1a734:	mov	r6, #7
   1a738:	str	r9, [sp, #28]
   1a73c:	ldrb	r0, [r0, #4]
   1a740:	cmp	r0, #22
   1a744:	beq	1a754 <__assert_fail@plt+0x8fe4>
   1a748:	cmp	r0, #2
   1a74c:	bne	1a84c <__assert_fail@plt+0x90dc>
   1a750:	b	1b544 <__assert_fail@plt+0x9dd4>
   1a754:	ldr	r0, [sl, #40]	; 0x28
   1a758:	ldr	r2, [sp, #36]	; 0x24
   1a75c:	mov	r1, sl
   1a760:	add	r0, r0, r8
   1a764:	str	r0, [sl, #40]	; 0x28
   1a768:	add	r0, sp, #48	; 0x30
   1a76c:	bl	1b868 <__assert_fail@plt+0xa0f8>
   1a770:	mov	r3, r0
   1a774:	ldrb	r0, [sp, #52]	; 0x34
   1a778:	cmp	r0, #21
   1a77c:	beq	1a834 <__assert_fail@plt+0x90c4>
   1a780:	cmp	r0, #2
   1a784:	beq	1b544 <__assert_fail@plt+0x9dd4>
   1a788:	mov	r0, #3
   1a78c:	ldr	r5, [sp, #36]	; 0x24
   1a790:	mov	r1, sl
   1a794:	add	r2, sp, #48	; 0x30
   1a798:	str	r0, [fp, #-48]	; 0xffffffd0
   1a79c:	add	r0, sp, #56	; 0x38
   1a7a0:	str	r0, [fp, #-44]	; 0xffffffd4
   1a7a4:	mov	r0, #1
   1a7a8:	str	r0, [sp, #4]
   1a7ac:	sub	r0, fp, #48	; 0x30
   1a7b0:	str	r5, [sp]
   1a7b4:	bl	1b9d0 <__assert_fail@plt+0xa260>
   1a7b8:	cmp	r0, #0
   1a7bc:	bne	1b3e0 <__assert_fail@plt+0x9c70>
   1a7c0:	ldr	r0, [sp, #20]
   1a7c4:	mov	r1, sl
   1a7c8:	mov	r2, r5
   1a7cc:	bl	1b868 <__assert_fail@plt+0xa0f8>
   1a7d0:	ldr	sl, [fp, #-48]	; 0xffffffd0
   1a7d4:	mov	r6, #11
   1a7d8:	cmp	sl, #2
   1a7dc:	cmpne	sl, #4
   1a7e0:	beq	1b540 <__assert_fail@plt+0x9dd0>
   1a7e4:	mov	r8, r0
   1a7e8:	cmp	r7, #3
   1a7ec:	bne	1a800 <__assert_fail@plt+0x9090>
   1a7f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a7f4:	bl	11614 <strlen@plt>
   1a7f8:	cmp	r0, #1
   1a7fc:	bhi	1b53c <__assert_fail@plt+0x9dcc>
   1a800:	cmp	sl, #3
   1a804:	bne	1a818 <__assert_fail@plt+0x90a8>
   1a808:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a80c:	bl	11614 <strlen@plt>
   1a810:	cmp	r0, #1
   1a814:	bhi	1b53c <__assert_fail@plt+0x9dcc>
   1a818:	ldr	r2, [sp, #20]
   1a81c:	cmp	r7, #3
   1a820:	beq	1a95c <__assert_fail@plt+0x91ec>
   1a824:	cmp	r7, #0
   1a828:	mov	r5, #0
   1a82c:	ldrbeq	r5, [fp, #-36]	; 0xffffffdc
   1a830:	b	1a964 <__assert_fail@plt+0x91f4>
   1a834:	ldr	r0, [sl, #40]	; 0x28
   1a838:	mov	r1, #1
   1a83c:	sub	r0, r0, r8
   1a840:	str	r0, [sl, #40]	; 0x28
   1a844:	ldr	r0, [sp, #20]
   1a848:	strb	r1, [r0, #4]
   1a84c:	add	r0, pc, #8
   1a850:	ldr	r6, [sp, #16]
   1a854:	ldr	r9, [sp, #28]
   1a858:	ldr	pc, [r0, r7, lsl #2]
   1a85c:	andeq	sl, r1, r0, lsl #18
   1a860:	andeq	sl, r1, r4, lsr #18
   1a864:	andeq	sl, r1, ip, ror #16
   1a868:	andeq	sl, r1, ip, ror #16
   1a86c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a870:	mov	r0, r5
   1a874:	bl	11614 <strlen@plt>
   1a878:	cmp	r0, #1
   1a87c:	bne	1b420 <__assert_fail@plt+0x9cb0>
   1a880:	ldrb	r0, [r5]
   1a884:	mov	r3, #1
   1a888:	ubfx	r1, r0, #5, #3
   1a88c:	and	r0, r0, #31
   1a890:	ldr	r2, [r4, r1, lsl #2]
   1a894:	orr	r0, r2, r3, lsl r0
   1a898:	str	r0, [r4, r1, lsl #2]
   1a89c:	mov	r0, #0
   1a8a0:	ldr	r2, [sp, #20]
   1a8a4:	str	r0, [r6]
   1a8a8:	ldrb	r0, [r2, #4]
   1a8ac:	cmp	r0, #21
   1a8b0:	beq	1ab30 <__assert_fail@plt+0x93c0>
   1a8b4:	cmp	r0, #2
   1a8b8:	ldr	r0, [sp, #36]	; 0x24
   1a8bc:	beq	1b3e8 <__assert_fail@plt+0x9c78>
   1a8c0:	sub	r1, fp, #80	; 0x50
   1a8c4:	mov	r3, r8
   1a8c8:	mov	r5, r2
   1a8cc:	str	r1, [fp, #-36]	; 0xffffffdc
   1a8d0:	mov	r1, #3
   1a8d4:	str	r1, [fp, #-40]	; 0xffffffd8
   1a8d8:	str	r0, [sp]
   1a8dc:	mov	r0, #0
   1a8e0:	mov	r1, sl
   1a8e4:	str	r0, [sp, #4]
   1a8e8:	sub	r0, fp, #40	; 0x28
   1a8ec:	bl	1b9d0 <__assert_fail@plt+0xa260>
   1a8f0:	ldr	r2, [sp, #36]	; 0x24
   1a8f4:	cmp	r0, #0
   1a8f8:	beq	1a6d0 <__assert_fail@plt+0x8f60>
   1a8fc:	b	1b3e0 <__assert_fail@plt+0x9c70>
   1a900:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   1a904:	mov	r3, #1
   1a908:	ubfx	r1, r0, #5, #3
   1a90c:	and	r0, r0, #31
   1a910:	ldr	r2, [r4, r1, lsl #2]
   1a914:	orr	r0, r2, r3, lsl r0
   1a918:	ldr	r2, [sp, #20]
   1a91c:	str	r0, [r4, r1, lsl #2]
   1a920:	b	1a8a8 <__assert_fail@plt+0x9138>
   1a924:	ldr	r6, [sp, #32]
   1a928:	ldr	r0, [sp, #12]
   1a92c:	mov	r5, r9
   1a930:	ldr	r1, [r6, #20]
   1a934:	cmp	r0, r1
   1a938:	beq	1aa98 <__assert_fail@plt+0x9328>
   1a93c:	ldr	r0, [r6]
   1a940:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a944:	ldr	r2, [sp, #20]
   1a948:	add	r7, r1, #1
   1a94c:	mov	r9, r5
   1a950:	str	r7, [r6, #20]
   1a954:	str	r3, [r0, r1, lsl #2]
   1a958:	b	1a8a8 <__assert_fail@plt+0x9138>
   1a95c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a960:	ldrb	r5, [r0]
   1a964:	cmp	sl, #3
   1a968:	beq	1a97c <__assert_fail@plt+0x920c>
   1a96c:	cmp	sl, #0
   1a970:	mov	r9, #0
   1a974:	ldrbeq	r9, [fp, #-44]	; 0xffffffd4
   1a978:	b	1a984 <__assert_fail@plt+0x9214>
   1a97c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a980:	ldrb	r9, [r0]
   1a984:	cmp	r7, #3
   1a988:	cmpne	r7, #0
   1a98c:	bne	1a9b4 <__assert_fail@plt+0x9244>
   1a990:	ldr	r6, [sp, #44]	; 0x2c
   1a994:	ldr	r0, [r6, #92]	; 0x5c
   1a998:	cmp	r0, #2
   1a99c:	blt	1a9bc <__assert_fail@plt+0x924c>
   1a9a0:	mov	r0, r5
   1a9a4:	bl	11668 <btowc@plt>
   1a9a8:	ldr	r2, [sp, #20]
   1a9ac:	mov	r5, r0
   1a9b0:	b	1a9bc <__assert_fail@plt+0x924c>
   1a9b4:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1a9b8:	ldr	r6, [sp, #44]	; 0x2c
   1a9bc:	cmp	sl, #3
   1a9c0:	cmpne	sl, #0
   1a9c4:	bne	1a9e8 <__assert_fail@plt+0x9278>
   1a9c8:	ldr	r0, [r6, #92]	; 0x5c
   1a9cc:	cmp	r0, #2
   1a9d0:	blt	1a9ec <__assert_fail@plt+0x927c>
   1a9d4:	mov	r0, r9
   1a9d8:	bl	11668 <btowc@plt>
   1a9dc:	ldr	r2, [sp, #20]
   1a9e0:	mov	r9, r0
   1a9e4:	b	1a9ec <__assert_fail@plt+0x927c>
   1a9e8:	ldr	r9, [fp, #-44]	; 0xffffffd4
   1a9ec:	ldr	sl, [sp, #40]	; 0x28
   1a9f0:	cmn	r5, #1
   1a9f4:	mov	r6, #3
   1a9f8:	cmnne	r9, #1
   1a9fc:	beq	1b544 <__assert_fail@plt+0x9dd4>
   1aa00:	ldr	r0, [sp, #24]
   1aa04:	cmp	r0, #0
   1aa08:	beq	1aa18 <__assert_fail@plt+0x92a8>
   1aa0c:	cmp	r5, r9
   1aa10:	mov	r6, #11
   1aa14:	bhi	1b544 <__assert_fail@plt+0x9dd4>
   1aa18:	ldr	r0, [sp, #44]	; 0x2c
   1aa1c:	ldr	r0, [r0, #92]	; 0x5c
   1aa20:	cmp	r0, #2
   1aa24:	blt	1aa54 <__assert_fail@plt+0x92e4>
   1aa28:	ldr	r7, [sp, #32]
   1aa2c:	ldr	r1, [sp, #8]
   1aa30:	ldr	r0, [r7, #32]
   1aa34:	cmp	r1, r0
   1aa38:	beq	1aad0 <__assert_fail@plt+0x9360>
   1aa3c:	ldmib	r7, {r1, r6}
   1aa40:	str	r5, [r1, r0, lsl #2]
   1aa44:	ldr	r0, [r7, #32]
   1aa48:	add	r1, r0, #1
   1aa4c:	str	r1, [r7, #32]
   1aa50:	str	r9, [r6, r0, lsl #2]
   1aa54:	mov	r0, #0
   1aa58:	mov	r6, #1
   1aa5c:	cmp	r5, r0
   1aa60:	cmpls	r0, r9
   1aa64:	bhi	1aa7c <__assert_fail@plt+0x930c>
   1aa68:	ubfx	r1, r0, #5, #3
   1aa6c:	and	r3, r0, #31
   1aa70:	ldr	r7, [r4, r1, lsl #2]
   1aa74:	orr	r3, r7, r6, lsl r3
   1aa78:	str	r3, [r4, r1, lsl #2]
   1aa7c:	add	r0, r0, #1
   1aa80:	cmp	r0, #256	; 0x100
   1aa84:	bne	1aa5c <__assert_fail@plt+0x92ec>
   1aa88:	ldr	r6, [sp, #16]
   1aa8c:	ldr	r9, [sp, #28]
   1aa90:	mov	r0, #0
   1aa94:	b	1a8a4 <__assert_fail@plt+0x9134>
   1aa98:	ldr	r1, [sp, #12]
   1aa9c:	mov	r0, #1
   1aaa0:	orr	r1, r0, r1, lsl #1
   1aaa4:	ldr	r0, [r6]
   1aaa8:	str	r1, [sp, #12]
   1aaac:	lsl	r1, r1, #2
   1aab0:	bl	239c4 <__assert_fail@plt+0x12254>
   1aab4:	cmp	r0, #0
   1aab8:	beq	1b568 <__assert_fail@plt+0x9df8>
   1aabc:	ldr	r6, [sp, #32]
   1aac0:	ldr	sl, [sp, #40]	; 0x28
   1aac4:	str	r0, [r6]
   1aac8:	ldr	r1, [r6, #20]
   1aacc:	b	1a940 <__assert_fail@plt+0x91d0>
   1aad0:	ldr	r1, [sp, #8]
   1aad4:	mov	r0, #1
   1aad8:	orr	r1, r0, r1, lsl #1
   1aadc:	ldr	r0, [r7, #4]
   1aae0:	lsl	r6, r1, #2
   1aae4:	str	r1, [sp, #8]
   1aae8:	mov	r1, r6
   1aaec:	bl	239c4 <__assert_fail@plt+0x12254>
   1aaf0:	mov	sl, r0
   1aaf4:	ldr	r0, [r7, #8]
   1aaf8:	mov	r1, r6
   1aafc:	bl	239c4 <__assert_fail@plt+0x12254>
   1ab00:	mov	r6, r0
   1ab04:	cmp	sl, #0
   1ab08:	mov	r0, sl
   1ab0c:	cmpne	r6, #0
   1ab10:	beq	1b580 <__assert_fail@plt+0x9e10>
   1ab14:	ldr	r7, [sp, #32]
   1ab18:	mov	r1, r0
   1ab1c:	stmib	r7, {r0, r6}
   1ab20:	ldr	r0, [r7, #32]
   1ab24:	ldr	sl, [sp, #40]	; 0x28
   1ab28:	ldr	r2, [sp, #20]
   1ab2c:	b	1aa40 <__assert_fail@plt+0x92d0>
   1ab30:	ldr	r0, [sl, #40]	; 0x28
   1ab34:	ldr	r2, [sp, #44]	; 0x2c
   1ab38:	cmp	r9, #0
   1ab3c:	add	r0, r0, r8
   1ab40:	str	r0, [sl, #40]	; 0x28
   1ab44:	beq	1ab68 <__assert_fail@plt+0x93f8>
   1ab48:	mov	r0, #0
   1ab4c:	add	r1, r4, r0
   1ab50:	add	r0, r0, #16
   1ab54:	vld1.32	{d16-d17}, [r1]
   1ab58:	cmp	r0, #32
   1ab5c:	vmvn	q8, q8
   1ab60:	vst1.32	{d16-d17}, [r1]
   1ab64:	bne	1ab4c <__assert_fail@plt+0x93dc>
   1ab68:	ldr	r0, [r2, #92]	; 0x5c
   1ab6c:	ldr	r8, [sp, #32]
   1ab70:	cmp	r0, #2
   1ab74:	blt	1aba0 <__assert_fail@plt+0x9430>
   1ab78:	ldr	r1, [sp, #44]	; 0x2c
   1ab7c:	mov	r2, #0
   1ab80:	ldr	r1, [r1, #60]	; 0x3c
   1ab84:	ldr	r3, [r1, r2, lsl #2]
   1ab88:	ldr	r7, [r4, r2, lsl #2]
   1ab8c:	and	r3, r7, r3
   1ab90:	str	r3, [r4, r2, lsl #2]
   1ab94:	add	r2, r2, #1
   1ab98:	cmp	r2, #8
   1ab9c:	bne	1ab84 <__assert_fail@plt+0x9414>
   1aba0:	ldr	r1, [r8, #20]
   1aba4:	cmp	r1, #0
   1aba8:	bne	1abd0 <__assert_fail@plt+0x9460>
   1abac:	ldr	r1, [r8, #24]
   1abb0:	cmp	r1, #0
   1abb4:	bne	1abd0 <__assert_fail@plt+0x9460>
   1abb8:	ldr	r1, [r8, #28]
   1abbc:	cmp	r1, #0
   1abc0:	bne	1abd0 <__assert_fail@plt+0x9460>
   1abc4:	ldr	r1, [r8, #32]
   1abc8:	cmp	r1, #0
   1abcc:	beq	1b390 <__assert_fail@plt+0x9c20>
   1abd0:	ldr	r6, [sp, #44]	; 0x2c
   1abd4:	add	r3, sp, #56	; 0x38
   1abd8:	mov	r1, #0
   1abdc:	mov	r2, #0
   1abe0:	mov	r5, #0
   1abe4:	ldrb	r0, [r6, #88]	; 0x58
   1abe8:	orr	r0, r0, #2
   1abec:	strb	r0, [r6, #88]	; 0x58
   1abf0:	mov	r0, #6
   1abf4:	str	r8, [sp, #56]	; 0x38
   1abf8:	str	r0, [sp, #60]	; 0x3c
   1abfc:	mov	r0, r6
   1ac00:	bl	1b594 <__assert_fail@plt+0x9e24>
   1ac04:	cmp	r0, #0
   1ac08:	beq	1b570 <__assert_fail@plt+0x9e00>
   1ac0c:	mov	r9, r0
   1ac10:	ldr	r0, [r4, r5, lsl #2]
   1ac14:	cmp	r0, #0
   1ac18:	bne	1ac34 <__assert_fail@plt+0x94c4>
   1ac1c:	add	r5, r5, #1
   1ac20:	cmp	r5, #8
   1ac24:	bne	1ac10 <__assert_fail@plt+0x94a0>
   1ac28:	mov	r0, r4
   1ac2c:	bl	13bd0 <__assert_fail@plt+0x2460>
   1ac30:	b	1ac8c <__assert_fail@plt+0x951c>
   1ac34:	mov	r0, #3
   1ac38:	str	r4, [sp, #56]	; 0x38
   1ac3c:	add	r3, sp, #56	; 0x38
   1ac40:	mov	r1, #0
   1ac44:	mov	r2, #0
   1ac48:	mov	r5, #0
   1ac4c:	str	r0, [sp, #60]	; 0x3c
   1ac50:	mov	r0, r6
   1ac54:	bl	1b594 <__assert_fail@plt+0x9e24>
   1ac58:	cmp	r0, #0
   1ac5c:	beq	1b570 <__assert_fail@plt+0x9e00>
   1ac60:	mov	r1, r0
   1ac64:	mov	r0, #10
   1ac68:	sub	r3, fp, #80	; 0x50
   1ac6c:	mov	r2, r9
   1ac70:	str	r0, [fp, #-76]	; 0xffffffb4
   1ac74:	str	r5, [fp, #-80]	; 0xffffffb0
   1ac78:	mov	r0, r6
   1ac7c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1ac80:	mov	r9, r0
   1ac84:	cmp	r0, #0
   1ac88:	beq	1b570 <__assert_fail@plt+0x9e00>
   1ac8c:	cmp	r9, #0
   1ac90:	bne	1acb0 <__assert_fail@plt+0x9540>
   1ac94:	ldr	r6, [sp, #16]
   1ac98:	ldr	r2, [sp, #36]	; 0x24
   1ac9c:	ldr	r5, [sp, #20]
   1aca0:	ldr	r0, [r6]
   1aca4:	cmp	r0, #0
   1aca8:	beq	1acbc <__assert_fail@plt+0x954c>
   1acac:	b	1b260 <__assert_fail@plt+0x9af0>
   1acb0:	ldr	r2, [sp, #36]	; 0x24
   1acb4:	ldr	r5, [sp, #20]
   1acb8:	ldr	r6, [sp, #16]
   1acbc:	mov	r0, r5
   1acc0:	mov	r1, sl
   1acc4:	str	r6, [sp, #16]
   1acc8:	bl	19774 <__assert_fail@plt+0x8004>
   1accc:	ldr	r1, [sl, #40]	; 0x28
   1acd0:	ldr	r2, [sp, #36]	; 0x24
   1acd4:	ldr	r3, [sp, #20]
   1acd8:	mov	r7, #0
   1acdc:	sub	r4, fp, #80	; 0x50
   1ace0:	add	r0, r1, r0
   1ace4:	str	r0, [sl, #40]	; 0x28
   1ace8:	and	r0, r2, #16777216	; 0x1000000
   1acec:	str	r0, [sp, #24]
   1acf0:	and	r0, r2, #2097152	; 0x200000
   1acf4:	str	r0, [sp, #12]
   1acf8:	ldrb	r0, [r3, #4]
   1acfc:	cmp	r0, #23
   1ad00:	bhi	1b1f4 <__assert_fail@plt+0x9a84>
   1ad04:	movw	r6, #2048	; 0x800
   1ad08:	mov	r1, #1
   1ad0c:	movt	r6, #140	; 0x8c
   1ad10:	tst	r6, r1, lsl r0
   1ad14:	beq	1b1f4 <__assert_fail@plt+0x9a84>
   1ad18:	cmp	r0, #23
   1ad1c:	bne	1ad78 <__assert_fail@plt+0x9608>
   1ad20:	ldr	r0, [r3]
   1ad24:	ldr	r5, [r3, #4]
   1ad28:	mov	r1, r3
   1ad2c:	mov	r8, sl
   1ad30:	str	r0, [sp, #32]
   1ad34:	ldr	r0, [sl, #40]	; 0x28
   1ad38:	str	r0, [sp, #28]
   1ad3c:	mov	r0, sl
   1ad40:	mov	sl, r3
   1ad44:	bl	1c524 <__assert_fail@plt+0xadb4>
   1ad48:	cmn	r0, #1
   1ad4c:	bne	1ad94 <__assert_fail@plt+0x9624>
   1ad50:	ldrb	r0, [sl, #4]
   1ad54:	mov	r3, sl
   1ad58:	cmp	r0, #1
   1ad5c:	bne	1afd8 <__assert_fail@plt+0x9868>
   1ad60:	ldrb	r1, [r3]
   1ad64:	cmp	r1, #44	; 0x2c
   1ad68:	bne	1afd8 <__assert_fail@plt+0x9868>
   1ad6c:	ldr	r2, [sp, #36]	; 0x24
   1ad70:	mov	r6, #0
   1ad74:	b	1adac <__assert_fail@plt+0x963c>
   1ad78:	cmp	r0, #19
   1ad7c:	sub	r0, r0, #18
   1ad80:	mvn	sl, #0
   1ad84:	clz	r0, r0
   1ad88:	movweq	sl, #1
   1ad8c:	lsr	r6, r0, #5
   1ad90:	b	1ae20 <__assert_fail@plt+0x96b0>
   1ad94:	ldr	r2, [sp, #36]	; 0x24
   1ad98:	mov	r6, r0
   1ad9c:	cmn	r0, #2
   1ada0:	mov	r3, sl
   1ada4:	beq	1aff4 <__assert_fail@plt+0x9884>
   1ada8:	ldr	r0, [r3, #4]
   1adac:	uxtb	r0, r0
   1adb0:	mov	sl, r6
   1adb4:	cmp	r0, #24
   1adb8:	beq	1adf0 <__assert_fail@plt+0x9680>
   1adbc:	cmp	r0, #1
   1adc0:	bne	1aff4 <__assert_fail@plt+0x9884>
   1adc4:	ldrb	r0, [r3]
   1adc8:	cmp	r0, #44	; 0x2c
   1adcc:	bne	1aff4 <__assert_fail@plt+0x9884>
   1add0:	ldr	r0, [sp, #40]	; 0x28
   1add4:	mov	r1, r3
   1add8:	bl	1c524 <__assert_fail@plt+0xadb4>
   1addc:	ldr	r3, [sp, #20]
   1ade0:	ldr	r2, [sp, #36]	; 0x24
   1ade4:	mov	sl, r0
   1ade8:	cmn	r0, #2
   1adec:	beq	1aff4 <__assert_fail@plt+0x9884>
   1adf0:	cmn	sl, #1
   1adf4:	beq	1ae00 <__assert_fail@plt+0x9690>
   1adf8:	cmp	r6, sl
   1adfc:	bgt	1b1b4 <__assert_fail@plt+0x9a44>
   1ae00:	ldrb	r0, [r3, #4]
   1ae04:	cmp	r0, #24
   1ae08:	bne	1b1b4 <__assert_fail@plt+0x9a44>
   1ae0c:	cmn	sl, #1
   1ae10:	mov	r0, sl
   1ae14:	moveq	r0, r6
   1ae18:	cmp	r0, #32768	; 0x8000
   1ae1c:	bge	1b1dc <__assert_fail@plt+0x9a6c>
   1ae20:	ldr	r5, [sp, #40]	; 0x28
   1ae24:	mov	r0, r3
   1ae28:	mov	r1, r5
   1ae2c:	bl	19774 <__assert_fail@plt+0x8004>
   1ae30:	ldr	r1, [r5, #40]	; 0x28
   1ae34:	cmp	r9, #0
   1ae38:	add	r0, r1, r0
   1ae3c:	str	r0, [r5, #40]	; 0x28
   1ae40:	mov	r5, #0
   1ae44:	beq	1b038 <__assert_fail@plt+0x98c8>
   1ae48:	orrs	r0, sl, r6
   1ae4c:	beq	1b048 <__assert_fail@plt+0x98d8>
   1ae50:	mov	r0, #0
   1ae54:	cmp	r6, #1
   1ae58:	mov	r8, r9
   1ae5c:	str	r0, [sp, #32]
   1ae60:	str	r9, [sp, #28]
   1ae64:	bge	1b0ac <__assert_fail@plt+0x993c>
   1ae68:	ldrb	r0, [r8, #24]
   1ae6c:	cmp	r0, #17
   1ae70:	bne	1aee4 <__assert_fail@plt+0x9774>
   1ae74:	ldr	r0, [r8, #20]
   1ae78:	mov	r2, r8
   1ae7c:	mov	r1, r2
   1ae80:	ldr	r2, [r2, #4]
   1ae84:	cmp	r2, #0
   1ae88:	bne	1ae7c <__assert_fail@plt+0x970c>
   1ae8c:	ldr	r2, [r1, #8]
   1ae90:	cmp	r2, #0
   1ae94:	bne	1ae7c <__assert_fail@plt+0x970c>
   1ae98:	ldr	r2, [r1, #24]
   1ae9c:	uxtb	r3, r2
   1aea0:	cmp	r3, #17
   1aea4:	bne	1aeb8 <__assert_fail@plt+0x9748>
   1aea8:	ldr	r3, [r1, #20]
   1aeac:	cmp	r3, r0
   1aeb0:	orreq	r2, r2, #524288	; 0x80000
   1aeb4:	streq	r2, [r1, #24]
   1aeb8:	ldr	r3, [r1]
   1aebc:	cmp	r3, #0
   1aec0:	beq	1aee4 <__assert_fail@plt+0x9774>
   1aec4:	ldr	r2, [r3, #8]
   1aec8:	cmp	r2, r1
   1aecc:	mov	r1, r3
   1aed0:	beq	1ae98 <__assert_fail@plt+0x9728>
   1aed4:	cmp	r2, #0
   1aed8:	mov	r1, r3
   1aedc:	beq	1ae98 <__assert_fail@plt+0x9728>
   1aee0:	b	1ae7c <__assert_fail@plt+0x970c>
   1aee4:	cmn	sl, #1
   1aee8:	mov	r0, #10
   1aeec:	str	r7, [fp, #-80]	; 0xffffffb0
   1aef0:	mov	r1, r8
   1aef4:	mov	r2, #0
   1aef8:	mov	r3, r4
   1aefc:	movweq	r0, #11
   1af00:	str	r0, [fp, #-76]	; 0xffffffb4
   1af04:	ldr	r0, [sp, #44]	; 0x2c
   1af08:	bl	1b594 <__assert_fail@plt+0x9e24>
   1af0c:	cmp	r0, #0
   1af10:	beq	1b148 <__assert_fail@plt+0x99d8>
   1af14:	mov	r5, r0
   1af18:	add	r0, r6, #2
   1af1c:	cmp	r0, sl
   1af20:	ble	1af58 <__assert_fail@plt+0x97e8>
   1af24:	ldr	r1, [sp, #32]
   1af28:	ldr	sl, [sp, #40]	; 0x28
   1af2c:	cmp	r1, #0
   1af30:	beq	1b024 <__assert_fail@plt+0x98b4>
   1af34:	mov	r0, #16
   1af38:	mov	r2, r5
   1af3c:	mov	r3, r4
   1af40:	str	r0, [fp, #-76]	; 0xffffffb4
   1af44:	ldr	r0, [sp, #44]	; 0x2c
   1af48:	str	r7, [fp, #-80]	; 0xffffffb0
   1af4c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1af50:	mov	r5, r0
   1af54:	b	1b15c <__assert_fail@plt+0x99ec>
   1af58:	add	r6, r6, #1
   1af5c:	ldr	r9, [sp, #44]	; 0x2c
   1af60:	mov	r0, r8
   1af64:	mov	r1, r9
   1af68:	bl	1c5d0 <__assert_fail@plt+0xae60>
   1af6c:	mov	r8, r0
   1af70:	mov	r0, #16
   1af74:	mov	r1, r5
   1af78:	mov	r3, r4
   1af7c:	str	r0, [fp, #-76]	; 0xffffffb4
   1af80:	mov	r0, r9
   1af84:	mov	r2, r8
   1af88:	str	r7, [fp, #-80]	; 0xffffffb0
   1af8c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1af90:	cmp	r8, #0
   1af94:	movne	r1, r0
   1af98:	cmpne	r0, #0
   1af9c:	beq	1b148 <__assert_fail@plt+0x99d8>
   1afa0:	mov	r0, #10
   1afa4:	mov	r2, #0
   1afa8:	mov	r3, r4
   1afac:	str	r0, [fp, #-76]	; 0xffffffb4
   1afb0:	ldr	r0, [sp, #44]	; 0x2c
   1afb4:	str	r7, [fp, #-80]	; 0xffffffb0
   1afb8:	bl	1b594 <__assert_fail@plt+0x9e24>
   1afbc:	cmp	r0, #0
   1afc0:	beq	1b148 <__assert_fail@plt+0x99d8>
   1afc4:	add	r6, r6, #1
   1afc8:	mov	r5, r0
   1afcc:	cmp	r6, sl
   1afd0:	blt	1af5c <__assert_fail@plt+0x97ec>
   1afd4:	b	1af24 <__assert_fail@plt+0x97b4>
   1afd8:	ldr	r0, [sp, #16]
   1afdc:	ldr	r2, [sp, #36]	; 0x24
   1afe0:	mov	r1, #10
   1afe4:	mov	r5, #0
   1afe8:	mov	sl, r8
   1afec:	str	r1, [r0]
   1aff0:	b	1b168 <__assert_fail@plt+0x99f8>
   1aff4:	ldr	r0, [sp, #12]
   1aff8:	cmp	r0, #0
   1affc:	beq	1b1c0 <__assert_fail@plt+0x9a50>
   1b000:	ldr	sl, [sp, #40]	; 0x28
   1b004:	ldr	r0, [sp, #28]
   1b008:	str	r0, [sl, #40]	; 0x28
   1b00c:	mov	r0, #1
   1b010:	bfi	r5, r0, #0, #8
   1b014:	ldr	r0, [sp, #32]
   1b018:	stm	r3, {r0, r5}
   1b01c:	mov	r5, r9
   1b020:	b	1b168 <__assert_fail@plt+0x99f8>
   1b024:	ldr	r2, [sp, #36]	; 0x24
   1b028:	ldr	r3, [sp, #20]
   1b02c:	clz	r0, r5
   1b030:	lsr	r0, r0, #5
   1b034:	b	1b188 <__assert_fail@plt+0x9a18>
   1b038:	ldr	sl, [sp, #40]	; 0x28
   1b03c:	ldr	r2, [sp, #36]	; 0x24
   1b040:	ldr	r3, [sp, #20]
   1b044:	b	1b168 <__assert_fail@plt+0x99f8>
   1b048:	ldr	sl, [sp, #40]	; 0x28
   1b04c:	mov	r0, r9
   1b050:	mov	r5, r0
   1b054:	ldr	r0, [r0, #4]
   1b058:	cmp	r0, #0
   1b05c:	bne	1b050 <__assert_fail@plt+0x98e0>
   1b060:	ldr	r0, [r5, #8]
   1b064:	cmp	r0, #0
   1b068:	bne	1b050 <__assert_fail@plt+0x98e0>
   1b06c:	add	r0, r5, #20
   1b070:	bl	18b5c <__assert_fail@plt+0x73ec>
   1b074:	ldr	r1, [r5]
   1b078:	cmp	r1, #0
   1b07c:	beq	1b0a0 <__assert_fail@plt+0x9930>
   1b080:	ldr	r0, [r1, #8]
   1b084:	cmp	r0, r5
   1b088:	mov	r5, r1
   1b08c:	beq	1b06c <__assert_fail@plt+0x98fc>
   1b090:	cmp	r0, #0
   1b094:	mov	r5, r1
   1b098:	beq	1b06c <__assert_fail@plt+0x98fc>
   1b09c:	b	1b050 <__assert_fail@plt+0x98e0>
   1b0a0:	ldr	r2, [sp, #36]	; 0x24
   1b0a4:	ldr	r3, [sp, #20]
   1b0a8:	b	1b1ec <__assert_fail@plt+0x9a7c>
   1b0ac:	ldr	r9, [sp, #28]
   1b0b0:	str	r9, [sp, #32]
   1b0b4:	beq	1b118 <__assert_fail@plt+0x99a8>
   1b0b8:	ldr	r0, [sp, #28]
   1b0bc:	sub	r5, r6, #1
   1b0c0:	mov	r9, r0
   1b0c4:	str	r0, [sp, #32]
   1b0c8:	ldr	r8, [sp, #44]	; 0x2c
   1b0cc:	mov	r0, r9
   1b0d0:	mov	r1, r8
   1b0d4:	bl	1c5d0 <__assert_fail@plt+0xae60>
   1b0d8:	ldr	r1, [sp, #32]
   1b0dc:	mov	r9, r0
   1b0e0:	mov	r0, #16
   1b0e4:	mov	r3, r4
   1b0e8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b0ec:	mov	r0, r8
   1b0f0:	mov	r2, r9
   1b0f4:	str	r7, [fp, #-80]	; 0xffffffb0
   1b0f8:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b0fc:	str	r0, [sp, #32]
   1b100:	cmp	r9, #0
   1b104:	ldrne	r0, [sp, #32]
   1b108:	cmpne	r0, #0
   1b10c:	beq	1b148 <__assert_fail@plt+0x99d8>
   1b110:	subs	r5, r5, #1
   1b114:	bne	1b0c8 <__assert_fail@plt+0x9958>
   1b118:	cmp	r6, sl
   1b11c:	bne	1b130 <__assert_fail@plt+0x99c0>
   1b120:	ldr	sl, [sp, #40]	; 0x28
   1b124:	ldr	r2, [sp, #36]	; 0x24
   1b128:	ldr	r5, [sp, #32]
   1b12c:	b	1b028 <__assert_fail@plt+0x98b8>
   1b130:	ldr	r1, [sp, #44]	; 0x2c
   1b134:	mov	r0, r9
   1b138:	bl	1c5d0 <__assert_fail@plt+0xae60>
   1b13c:	mov	r8, r0
   1b140:	cmp	r0, #0
   1b144:	bne	1ae68 <__assert_fail@plt+0x96f8>
   1b148:	ldr	r0, [sp, #16]
   1b14c:	ldr	sl, [sp, #40]	; 0x28
   1b150:	mov	r1, #12
   1b154:	mov	r5, #0
   1b158:	str	r1, [r0]
   1b15c:	ldr	r2, [sp, #36]	; 0x24
   1b160:	ldr	r3, [sp, #20]
   1b164:	ldr	r9, [sp, #28]
   1b168:	clz	r0, r5
   1b16c:	cmp	r5, #0
   1b170:	lsr	r0, r0, #5
   1b174:	bne	1b188 <__assert_fail@plt+0x9a18>
   1b178:	ldr	r1, [sp, #16]
   1b17c:	ldr	r1, [r1]
   1b180:	cmp	r1, #0
   1b184:	bne	1b334 <__assert_fail@plt+0x9bc4>
   1b188:	ldr	r1, [sp, #24]
   1b18c:	mov	r9, r5
   1b190:	cmp	r1, #0
   1b194:	beq	1acf8 <__assert_fail@plt+0x9588>
   1b198:	ldrb	r1, [r3, #4]
   1b19c:	cmp	r1, #23
   1b1a0:	beq	1b1fc <__assert_fail@plt+0x9a8c>
   1b1a4:	cmp	r1, #11
   1b1a8:	mov	r9, r5
   1b1ac:	bne	1acf8 <__assert_fail@plt+0x9588>
   1b1b0:	b	1b1fc <__assert_fail@plt+0x9a8c>
   1b1b4:	ldr	r0, [sp, #16]
   1b1b8:	mov	r1, #10
   1b1bc:	b	1b1e4 <__assert_fail@plt+0x9a74>
   1b1c0:	ldrb	r0, [r3, #4]
   1b1c4:	ldr	r1, [sp, #16]
   1b1c8:	cmp	r0, #2
   1b1cc:	mov	r0, #10
   1b1d0:	movweq	r0, #9
   1b1d4:	str	r0, [r1]
   1b1d8:	b	1b1e8 <__assert_fail@plt+0x9a78>
   1b1dc:	ldr	r0, [sp, #16]
   1b1e0:	mov	r1, #15
   1b1e4:	str	r1, [r0]
   1b1e8:	ldr	sl, [sp, #40]	; 0x28
   1b1ec:	mov	r5, #0
   1b1f0:	b	1b168 <__assert_fail@plt+0x99f8>
   1b1f4:	mov	r8, r9
   1b1f8:	b	1b264 <__assert_fail@plt+0x9af4>
   1b1fc:	cmp	r0, #0
   1b200:	bne	1b254 <__assert_fail@plt+0x9ae4>
   1b204:	mov	r4, r5
   1b208:	ldr	r5, [r5, #4]
   1b20c:	cmp	r5, #0
   1b210:	bne	1b204 <__assert_fail@plt+0x9a94>
   1b214:	ldr	r5, [r4, #8]
   1b218:	cmp	r5, #0
   1b21c:	bne	1b204 <__assert_fail@plt+0x9a94>
   1b220:	add	r0, r4, #20
   1b224:	bl	18b5c <__assert_fail@plt+0x73ec>
   1b228:	ldr	r0, [r4]
   1b22c:	cmp	r0, #0
   1b230:	beq	1b254 <__assert_fail@plt+0x9ae4>
   1b234:	ldr	r5, [r0, #8]
   1b238:	cmp	r5, r4
   1b23c:	mov	r4, r0
   1b240:	beq	1b220 <__assert_fail@plt+0x9ab0>
   1b244:	cmp	r5, #0
   1b248:	mov	r4, r0
   1b24c:	beq	1b220 <__assert_fail@plt+0x9ab0>
   1b250:	b	1b204 <__assert_fail@plt+0x9a94>
   1b254:	ldr	r1, [sp, #16]
   1b258:	mov	r0, #13
   1b25c:	str	r0, [r1]
   1b260:	mov	r8, #0
   1b264:	mov	r0, r8
   1b268:	sub	sp, fp, #28
   1b26c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b270:	mov	r5, #9
   1b274:	mov	r0, #6
   1b278:	str	r0, [r4]
   1b27c:	mov	r0, r6
   1b280:	mov	r1, #0
   1b284:	mov	r2, #0
   1b288:	mov	r3, r4
   1b28c:	mov	r8, #0
   1b290:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b294:	mov	r7, r0
   1b298:	mov	r0, r6
   1b29c:	mov	r1, #0
   1b2a0:	mov	r2, #0
   1b2a4:	mov	r3, r4
   1b2a8:	str	r5, [r4]
   1b2ac:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b2b0:	mov	r4, r0
   1b2b4:	mov	r0, #10
   1b2b8:	sub	r3, fp, #80	; 0x50
   1b2bc:	mov	r1, r7
   1b2c0:	str	r0, [fp, #-76]	; 0xffffffb4
   1b2c4:	mov	r0, r6
   1b2c8:	mov	r2, r4
   1b2cc:	str	r8, [fp, #-80]	; 0xffffffb0
   1b2d0:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b2d4:	cmp	r7, #0
   1b2d8:	cmpne	r4, #0
   1b2dc:	bne	1b304 <__assert_fail@plt+0x9b94>
   1b2e0:	mov	r0, #12
   1b2e4:	str	r0, [r9]
   1b2e8:	b	1b264 <__assert_fail@plt+0x9af4>
   1b2ec:	mov	r0, r6
   1b2f0:	mov	r1, #0
   1b2f4:	mov	r2, #0
   1b2f8:	mov	r3, r4
   1b2fc:	mov	r8, #0
   1b300:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b304:	mov	r5, r0
   1b308:	cmp	r0, #0
   1b30c:	beq	1b2e0 <__assert_fail@plt+0x9b70>
   1b310:	ldr	r0, [sp, #20]
   1b314:	ldr	r2, [sp, #36]	; 0x24
   1b318:	mov	r1, sl
   1b31c:	bl	19774 <__assert_fail@plt+0x8004>
   1b320:	ldr	r1, [sl, #40]	; 0x28
   1b324:	mov	r8, r5
   1b328:	add	r0, r1, r0
   1b32c:	str	r0, [sl, #40]	; 0x28
   1b330:	b	1b264 <__assert_fail@plt+0x9af4>
   1b334:	mov	r8, #0
   1b338:	cmp	r9, #0
   1b33c:	beq	1b264 <__assert_fail@plt+0x9af4>
   1b340:	mov	r5, r9
   1b344:	ldr	r9, [r9, #4]
   1b348:	cmp	r9, #0
   1b34c:	bne	1b340 <__assert_fail@plt+0x9bd0>
   1b350:	ldr	r9, [r5, #8]
   1b354:	cmp	r9, #0
   1b358:	bne	1b340 <__assert_fail@plt+0x9bd0>
   1b35c:	add	r0, r5, #20
   1b360:	bl	18b5c <__assert_fail@plt+0x73ec>
   1b364:	ldr	r0, [r5]
   1b368:	cmp	r0, #0
   1b36c:	beq	1b264 <__assert_fail@plt+0x9af4>
   1b370:	ldr	r9, [r0, #8]
   1b374:	cmp	r9, r5
   1b378:	mov	r5, r0
   1b37c:	beq	1b35c <__assert_fail@plt+0x9bec>
   1b380:	cmp	r9, #0
   1b384:	mov	r5, r0
   1b388:	beq	1b35c <__assert_fail@plt+0x9bec>
   1b38c:	b	1b340 <__assert_fail@plt+0x9bd0>
   1b390:	cmp	r0, #2
   1b394:	blt	1b3b0 <__assert_fail@plt+0x9c40>
   1b398:	ldr	r0, [r8, #36]	; 0x24
   1b39c:	cmp	r0, #0
   1b3a0:	bne	1abd0 <__assert_fail@plt+0x9460>
   1b3a4:	ldrb	r0, [r8, #16]
   1b3a8:	tst	r0, #1
   1b3ac:	bne	1abd0 <__assert_fail@plt+0x9460>
   1b3b0:	mov	r0, r8
   1b3b4:	bl	18bec <__assert_fail@plt+0x747c>
   1b3b8:	mov	r0, #3
   1b3bc:	str	r4, [sp, #56]	; 0x38
   1b3c0:	add	r3, sp, #56	; 0x38
   1b3c4:	mov	r1, #0
   1b3c8:	mov	r2, #0
   1b3cc:	str	r0, [sp, #60]	; 0x3c
   1b3d0:	ldr	r0, [sp, #44]	; 0x2c
   1b3d4:	b	1ac7c <__assert_fail@plt+0x950c>
   1b3d8:	mov	r0, #12
   1b3dc:	b	1a5ec <__assert_fail@plt+0x8e7c>
   1b3e0:	mov	r6, r0
   1b3e4:	b	1b544 <__assert_fail@plt+0x9dd4>
   1b3e8:	mov	r6, #7
   1b3ec:	b	1b544 <__assert_fail@plt+0x9dd4>
   1b3f0:	mov	r0, #2
   1b3f4:	b	1b574 <__assert_fail@plt+0x9e04>
   1b3f8:	mov	r0, r4
   1b3fc:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b400:	mov	r0, r8
   1b404:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b408:	ldr	r1, [sp, #16]
   1b40c:	mov	r0, #12
   1b410:	str	r0, [r1]
   1b414:	b	1ac8c <__assert_fail@plt+0x951c>
   1b418:	mov	r0, #6
   1b41c:	b	1a5ec <__assert_fail@plt+0x8e7c>
   1b420:	mov	r6, #3
   1b424:	b	1b544 <__assert_fail@plt+0x9dd4>
   1b428:	ldr	r1, [sp, #16]
   1b42c:	mov	r0, #12
   1b430:	str	r0, [r1]
   1b434:	b	1b264 <__assert_fail@plt+0x9af4>
   1b438:	mov	r9, r6
   1b43c:	mov	r5, #0
   1b440:	mov	r8, #0
   1b444:	b	1b454 <__assert_fail@plt+0x9ce4>
   1b448:	mov	r9, r6
   1b44c:	mov	r8, #4
   1b450:	mov	r5, #128	; 0x80
   1b454:	bl	115f0 <__ctype_b_loc@plt>
   1b458:	ldr	r0, [r0]
   1b45c:	ldr	sl, [sp, #40]	; 0x28
   1b460:	ldr	r4, [sp, #20]
   1b464:	mov	r1, #1
   1b468:	mov	r6, r9
   1b46c:	add	r7, r0, r5, lsl #1
   1b470:	ldr	r0, [sp, #44]	; 0x2c
   1b474:	mov	ip, r6
   1b478:	mov	r3, #0
   1b47c:	add	r0, r0, r8, lsl #2
   1b480:	add	r2, r0, #96	; 0x60
   1b484:	mov	r0, r7
   1b488:	add	r6, r5, r3
   1b48c:	cmp	r6, #95	; 0x5f
   1b490:	beq	1b4a0 <__assert_fail@plt+0x9d30>
   1b494:	ldrh	r6, [r0]
   1b498:	ands	r6, r6, #8
   1b49c:	beq	1b4ac <__assert_fail@plt+0x9d3c>
   1b4a0:	ldr	r6, [r2]
   1b4a4:	orr	r6, r6, r1, lsl r3
   1b4a8:	str	r6, [r2]
   1b4ac:	add	r3, r3, #1
   1b4b0:	add	r0, r0, #2
   1b4b4:	cmp	r3, #32
   1b4b8:	bne	1b488 <__assert_fail@plt+0x9d18>
   1b4bc:	add	r8, r8, #1
   1b4c0:	add	r7, r7, #64	; 0x40
   1b4c4:	add	r5, r5, #32
   1b4c8:	mov	r6, ip
   1b4cc:	cmp	r8, #8
   1b4d0:	bne	1b470 <__assert_fail@plt+0x9d00>
   1b4d4:	b	1a294 <__assert_fail@plt+0x8b24>
   1b4d8:	ldr	r9, [sp, #16]
   1b4dc:	cmp	r1, #0
   1b4e0:	beq	1b534 <__assert_fail@plt+0x9dc4>
   1b4e4:	mov	r5, r1
   1b4e8:	ldr	r1, [r1, #4]
   1b4ec:	cmp	r1, #0
   1b4f0:	bne	1b4e4 <__assert_fail@plt+0x9d74>
   1b4f4:	ldr	r1, [r5, #8]
   1b4f8:	cmp	r1, #0
   1b4fc:	bne	1b4e4 <__assert_fail@plt+0x9d74>
   1b500:	add	r0, r5, #20
   1b504:	bl	18b5c <__assert_fail@plt+0x73ec>
   1b508:	ldr	r0, [r5]
   1b50c:	cmp	r0, #0
   1b510:	beq	1b534 <__assert_fail@plt+0x9dc4>
   1b514:	ldr	r1, [r0, #8]
   1b518:	cmp	r1, r5
   1b51c:	mov	r5, r0
   1b520:	beq	1b500 <__assert_fail@plt+0x9d90>
   1b524:	cmp	r1, #0
   1b528:	mov	r5, r0
   1b52c:	beq	1b500 <__assert_fail@plt+0x9d90>
   1b530:	b	1b4e4 <__assert_fail@plt+0x9d74>
   1b534:	mov	r0, #8
   1b538:	b	1b2e4 <__assert_fail@plt+0x9b74>
   1b53c:	mov	r6, #3
   1b540:	ldr	sl, [sp, #40]	; 0x28
   1b544:	ldr	r0, [sp, #16]
   1b548:	str	r6, [r0]
   1b54c:	ldr	r8, [sp, #32]
   1b550:	mov	r0, r4
   1b554:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b558:	mov	r0, r8
   1b55c:	bl	18bec <__assert_fail@plt+0x747c>
   1b560:	mov	r9, #0
   1b564:	b	1ac8c <__assert_fail@plt+0x951c>
   1b568:	ldr	sl, [sp, #40]	; 0x28
   1b56c:	ldr	r8, [sp, #32]
   1b570:	mov	r0, #12
   1b574:	ldr	r1, [sp, #16]
   1b578:	str	r0, [r1]
   1b57c:	b	1b550 <__assert_fail@plt+0x9de0>
   1b580:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b584:	mov	r0, r6
   1b588:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b58c:	mov	r6, #12
   1b590:	b	1b540 <__assert_fail@plt+0x9dd0>
   1b594:	push	{r4, r5, r6, r7, fp, lr}
   1b598:	add	fp, sp, #16
   1b59c:	mov	r5, r1
   1b5a0:	ldr	r1, [r0, #64]	; 0x40
   1b5a4:	mov	r6, r3
   1b5a8:	mov	r4, r2
   1b5ac:	mov	r7, r0
   1b5b0:	cmp	r1, #31
   1b5b4:	beq	1b60c <__assert_fail@plt+0x9e9c>
   1b5b8:	ldr	r0, [r7, #56]	; 0x38
   1b5bc:	add	r0, r0, r1, lsl #5
   1b5c0:	add	r2, r1, #1
   1b5c4:	mov	r1, #0
   1b5c8:	cmp	r5, #0
   1b5cc:	str	r2, [r7, #64]	; 0x40
   1b5d0:	mvn	r7, #0
   1b5d4:	str	r1, [r0, #4]!
   1b5d8:	str	r4, [r0, #8]
   1b5dc:	str	r5, [r0, #4]
   1b5e0:	ldm	r6, {r2, r3}
   1b5e4:	str	r7, [r0, #28]
   1b5e8:	str	r1, [r0, #16]
   1b5ec:	str	r1, [r0, #12]
   1b5f0:	bic	r1, r3, #786432	; 0xc0000
   1b5f4:	str	r2, [r0, #20]
   1b5f8:	str	r1, [r0, #24]
   1b5fc:	strne	r0, [r5]
   1b600:	cmp	r4, #0
   1b604:	strne	r0, [r4]
   1b608:	pop	{r4, r5, r6, r7, fp, pc}
   1b60c:	mov	r0, #996	; 0x3e4
   1b610:	bl	23994 <__assert_fail@plt+0x12224>
   1b614:	cmp	r0, #0
   1b618:	beq	1b634 <__assert_fail@plt+0x9ec4>
   1b61c:	ldr	r1, [r7, #56]	; 0x38
   1b620:	str	r1, [r0]
   1b624:	mov	r1, #0
   1b628:	str	r1, [r7, #64]	; 0x40
   1b62c:	str	r0, [r7, #56]	; 0x38
   1b630:	b	1b5bc <__assert_fail@plt+0x9e4c>
   1b634:	mov	r0, #0
   1b638:	pop	{r4, r5, r6, r7, fp, pc}
   1b63c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b640:	add	fp, sp, #28
   1b644:	sub	sp, sp, #28
   1b648:	mov	sl, r1
   1b64c:	mov	r9, r0
   1b650:	mov	r7, #0
   1b654:	mov	r0, #32
   1b658:	mov	r1, #1
   1b65c:	mov	r8, r3
   1b660:	mov	r4, r2
   1b664:	str	r7, [sp, #16]
   1b668:	bl	23940 <__assert_fail@plt+0x121d0>
   1b66c:	ldr	r1, [fp, #12]
   1b670:	cmp	r0, #0
   1b674:	beq	1b824 <__assert_fail@plt+0xa0b4>
   1b678:	mov	r5, r0
   1b67c:	mov	r0, #40	; 0x28
   1b680:	mov	r1, #1
   1b684:	bl	23940 <__assert_fail@plt+0x121d0>
   1b688:	cmp	r0, #0
   1b68c:	beq	1b82c <__assert_fail@plt+0xa0bc>
   1b690:	mov	r6, r0
   1b694:	ldrb	r0, [r0, #16]
   1b698:	ldr	r1, [fp, #8]
   1b69c:	add	r3, sp, #16
   1b6a0:	mov	r7, #0
   1b6a4:	stm	sp, {r4, r7}
   1b6a8:	mov	r2, r6
   1b6ac:	and	r0, r0, #254	; 0xfe
   1b6b0:	orr	r0, r0, r1
   1b6b4:	mov	r1, r5
   1b6b8:	strb	r0, [r6, #16]
   1b6bc:	mov	r0, sl
   1b6c0:	bl	1bc94 <__assert_fail@plt+0xa524>
   1b6c4:	cmp	r0, #0
   1b6c8:	bne	1b848 <__assert_fail@plt+0xa0d8>
   1b6cc:	ldrb	r0, [r8]
   1b6d0:	cmp	r0, #0
   1b6d4:	beq	1b700 <__assert_fail@plt+0x9f90>
   1b6d8:	add	r1, r8, #1
   1b6dc:	mov	r2, #1
   1b6e0:	ubfx	r3, r0, #5, #3
   1b6e4:	and	r0, r0, #31
   1b6e8:	ldr	r7, [r5, r3, lsl #2]
   1b6ec:	orr	r0, r7, r2, lsl r0
   1b6f0:	str	r0, [r5, r3, lsl #2]
   1b6f4:	ldrb	r0, [r1], #1
   1b6f8:	cmp	r0, #0
   1b6fc:	bne	1b6e0 <__assert_fail@plt+0x9f70>
   1b700:	ldr	r0, [fp, #8]
   1b704:	cmp	r0, #0
   1b708:	beq	1b72c <__assert_fail@plt+0x9fbc>
   1b70c:	mov	r0, #0
   1b710:	add	r1, r5, r0
   1b714:	add	r0, r0, #16
   1b718:	vld1.32	{d16-d17}, [r1]
   1b71c:	cmp	r0, #32
   1b720:	vmvn	q8, q8
   1b724:	vst1.32	{d16-d17}, [r1]
   1b728:	bne	1b710 <__assert_fail@plt+0x9fa0>
   1b72c:	ldr	r0, [r9, #92]	; 0x5c
   1b730:	cmp	r0, #2
   1b734:	blt	1b75c <__assert_fail@plt+0x9fec>
   1b738:	ldr	r0, [r9, #60]	; 0x3c
   1b73c:	mov	r1, #0
   1b740:	ldr	r2, [r0, r1, lsl #2]
   1b744:	ldr	r3, [r5, r1, lsl #2]
   1b748:	and	r2, r3, r2
   1b74c:	str	r2, [r5, r1, lsl #2]
   1b750:	add	r1, r1, #1
   1b754:	cmp	r1, #8
   1b758:	bne	1b740 <__assert_fail@plt+0x9fd0>
   1b75c:	mov	r0, #3
   1b760:	add	r3, sp, #8
   1b764:	mov	r1, #0
   1b768:	mov	r2, #0
   1b76c:	mov	r7, #0
   1b770:	str	r0, [sp, #12]
   1b774:	mov	r0, r9
   1b778:	str	r5, [sp, #8]
   1b77c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b780:	cmp	r0, #0
   1b784:	beq	1b810 <__assert_fail@plt+0xa0a0>
   1b788:	mov	r4, r0
   1b78c:	ldr	r0, [r9, #92]	; 0x5c
   1b790:	cmp	r0, #2
   1b794:	blt	1b7f8 <__assert_fail@plt+0xa088>
   1b798:	mov	r0, #6
   1b79c:	str	r6, [sp, #8]
   1b7a0:	add	r3, sp, #8
   1b7a4:	mov	r1, #0
   1b7a8:	mov	r2, #0
   1b7ac:	mov	r8, #0
   1b7b0:	str	r0, [sp, #12]
   1b7b4:	ldrb	r0, [r9, #88]	; 0x58
   1b7b8:	orr	r0, r0, #2
   1b7bc:	strb	r0, [r9, #88]	; 0x58
   1b7c0:	mov	r0, r9
   1b7c4:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b7c8:	cmp	r0, #0
   1b7cc:	beq	1b810 <__assert_fail@plt+0xa0a0>
   1b7d0:	mov	r2, r0
   1b7d4:	mov	r0, #10
   1b7d8:	add	r3, sp, #20
   1b7dc:	mov	r1, r4
   1b7e0:	str	r0, [sp, #24]
   1b7e4:	mov	r0, r9
   1b7e8:	str	r8, [sp, #20]
   1b7ec:	bl	1b594 <__assert_fail@plt+0x9e24>
   1b7f0:	mov	r7, r0
   1b7f4:	b	1b804 <__assert_fail@plt+0xa094>
   1b7f8:	mov	r0, r6
   1b7fc:	bl	18bec <__assert_fail@plt+0x747c>
   1b800:	mov	r7, r4
   1b804:	mov	r0, r7
   1b808:	sub	sp, fp, #28
   1b80c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b810:	mov	r0, r5
   1b814:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b818:	mov	r0, r6
   1b81c:	bl	18bec <__assert_fail@plt+0x747c>
   1b820:	ldr	r1, [fp, #12]
   1b824:	mov	r0, #12
   1b828:	b	1b840 <__assert_fail@plt+0xa0d0>
   1b82c:	mov	r0, r5
   1b830:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b834:	ldr	r1, [fp, #12]
   1b838:	mov	r0, #12
   1b83c:	mov	r7, #0
   1b840:	str	r0, [r1]
   1b844:	b	1b804 <__assert_fail@plt+0xa094>
   1b848:	mov	r4, r0
   1b84c:	mov	r0, r5
   1b850:	bl	13bd0 <__assert_fail@plt+0x2460>
   1b854:	mov	r0, r6
   1b858:	bl	18bec <__assert_fail@plt+0x747c>
   1b85c:	ldr	r0, [fp, #12]
   1b860:	str	r4, [r0]
   1b864:	b	1b804 <__assert_fail@plt+0xa094>
   1b868:	push	{fp, lr}
   1b86c:	mov	fp, sp
   1b870:	ldr	ip, [r1, #40]	; 0x28
   1b874:	ldr	r3, [r1, #56]	; 0x38
   1b878:	cmp	r3, ip
   1b87c:	ble	1b8f8 <__assert_fail@plt+0xa188>
   1b880:	ldr	r3, [r1, #4]
   1b884:	ldrb	lr, [r3, ip]
   1b888:	strb	lr, [r0]
   1b88c:	ldr	r3, [r1, #80]	; 0x50
   1b890:	cmp	r3, #2
   1b894:	blt	1b8b8 <__assert_fail@plt+0xa148>
   1b898:	ldr	r3, [r1, #28]
   1b89c:	ldr	ip, [r1, #40]	; 0x28
   1b8a0:	cmp	ip, r3
   1b8a4:	beq	1b8b8 <__assert_fail@plt+0xa148>
   1b8a8:	ldr	r3, [r1, #8]
   1b8ac:	ldr	r3, [r3, ip, lsl #2]
   1b8b0:	cmn	r3, #1
   1b8b4:	beq	1b9a0 <__assert_fail@plt+0xa230>
   1b8b8:	tst	r2, #1
   1b8bc:	beq	1b908 <__assert_fail@plt+0xa198>
   1b8c0:	cmp	lr, #92	; 0x5c
   1b8c4:	bne	1b908 <__assert_fail@plt+0xa198>
   1b8c8:	ldr	r2, [r1, #40]	; 0x28
   1b8cc:	ldr	r3, [r1, #48]	; 0x30
   1b8d0:	add	r2, r2, #1
   1b8d4:	cmp	r2, r3
   1b8d8:	bge	1b9a0 <__assert_fail@plt+0xa230>
   1b8dc:	str	r2, [r1, #40]	; 0x28
   1b8e0:	ldr	r1, [r1, #4]
   1b8e4:	ldrb	r2, [r1, r2]
   1b8e8:	mov	r1, #1
   1b8ec:	strb	r1, [r0, #4]
   1b8f0:	strb	r2, [r0]
   1b8f4:	b	1b9a8 <__assert_fail@plt+0xa238>
   1b8f8:	mov	r1, #2
   1b8fc:	strb	r1, [r0, #4]
   1b900:	mov	r1, #0
   1b904:	b	1b9a8 <__assert_fail@plt+0xa238>
   1b908:	cmp	lr, #92	; 0x5c
   1b90c:	bgt	1b960 <__assert_fail@plt+0xa1f0>
   1b910:	cmp	lr, #45	; 0x2d
   1b914:	beq	1b978 <__assert_fail@plt+0xa208>
   1b918:	cmp	lr, #91	; 0x5b
   1b91c:	bne	1b9a0 <__assert_fail@plt+0xa230>
   1b920:	ldr	r3, [r1, #40]	; 0x28
   1b924:	ldr	ip, [r1, #48]	; 0x30
   1b928:	add	r3, r3, #1
   1b92c:	cmp	r3, ip
   1b930:	bge	1b990 <__assert_fail@plt+0xa220>
   1b934:	ldr	r1, [r1, #4]
   1b938:	ldrb	r1, [r1, r3]
   1b93c:	cmp	r1, #61	; 0x3d
   1b940:	strb	r1, [r0]
   1b944:	beq	1b9b0 <__assert_fail@plt+0xa240>
   1b948:	cmp	r1, #58	; 0x3a
   1b94c:	beq	1b9b8 <__assert_fail@plt+0xa248>
   1b950:	cmp	r1, #46	; 0x2e
   1b954:	bne	1b998 <__assert_fail@plt+0xa228>
   1b958:	mov	r1, #26
   1b95c:	b	1b9c4 <__assert_fail@plt+0xa254>
   1b960:	cmp	lr, #93	; 0x5d
   1b964:	beq	1b980 <__assert_fail@plt+0xa210>
   1b968:	cmp	lr, #94	; 0x5e
   1b96c:	bne	1b9a0 <__assert_fail@plt+0xa230>
   1b970:	mov	r1, #25
   1b974:	b	1b984 <__assert_fail@plt+0xa214>
   1b978:	mov	r1, #22
   1b97c:	b	1b984 <__assert_fail@plt+0xa214>
   1b980:	mov	r1, #21
   1b984:	strb	r1, [r0, #4]
   1b988:	mov	r1, #1
   1b98c:	b	1b9a8 <__assert_fail@plt+0xa238>
   1b990:	mov	r1, #0
   1b994:	strb	r1, [r0]
   1b998:	mov	r1, #91	; 0x5b
   1b99c:	strb	r1, [r0]
   1b9a0:	mov	r1, #1
   1b9a4:	strb	r1, [r0, #4]
   1b9a8:	mov	r0, r1
   1b9ac:	pop	{fp, pc}
   1b9b0:	mov	r1, #28
   1b9b4:	b	1b9c4 <__assert_fail@plt+0xa254>
   1b9b8:	tst	r2, #4
   1b9bc:	beq	1b998 <__assert_fail@plt+0xa228>
   1b9c0:	mov	r1, #30
   1b9c4:	strb	r1, [r0, #4]
   1b9c8:	mov	r1, #2
   1b9cc:	b	1b9a8 <__assert_fail@plt+0xa238>
   1b9d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b9d4:	add	fp, sp, #24
   1b9d8:	sub	sp, sp, #8
   1b9dc:	mov	r5, r2
   1b9e0:	ldr	r2, [r1, #80]	; 0x50
   1b9e4:	mov	r9, r0
   1b9e8:	ldr	r0, [r1, #40]	; 0x28
   1b9ec:	cmp	r2, #1
   1b9f0:	beq	1ba64 <__assert_fail@plt+0xa2f4>
   1b9f4:	ldr	r2, [r1, #28]
   1b9f8:	add	r6, r0, #1
   1b9fc:	cmp	r6, r2
   1ba00:	bge	1ba64 <__assert_fail@plt+0xa2f4>
   1ba04:	ldr	lr, [r1, #8]
   1ba08:	sub	r4, r0, r2
   1ba0c:	sub	ip, r2, r0
   1ba10:	mvn	r2, #0
   1ba14:	add	r6, lr, r0, lsl #2
   1ba18:	ldr	r7, [r6, -r2, lsl #2]
   1ba1c:	cmn	r7, #1
   1ba20:	bne	1ba34 <__assert_fail@plt+0xa2c4>
   1ba24:	sub	r2, r2, #1
   1ba28:	cmp	r4, r2
   1ba2c:	bne	1ba18 <__assert_fail@plt+0xa2a8>
   1ba30:	b	1ba40 <__assert_fail@plt+0xa2d0>
   1ba34:	rsb	ip, r2, #0
   1ba38:	cmp	ip, #2
   1ba3c:	bcc	1ba64 <__assert_fail@plt+0xa2f4>
   1ba40:	mov	r2, #1
   1ba44:	str	r2, [r9]
   1ba48:	ldr	r0, [lr, r0, lsl #2]
   1ba4c:	str	r0, [r9, #4]
   1ba50:	ldr	r0, [r1, #40]	; 0x28
   1ba54:	add	r0, r0, ip
   1ba58:	str	r0, [r1, #40]	; 0x28
   1ba5c:	mov	r0, #0
   1ba60:	b	1bc8c <__assert_fail@plt+0xa51c>
   1ba64:	add	r2, r0, r3
   1ba68:	str	r2, [r1, #40]	; 0x28
   1ba6c:	ldrb	r6, [r5, #4]
   1ba70:	sub	r0, r6, #22
   1ba74:	cmp	r0, #8
   1ba78:	bhi	1bc7c <__assert_fail@plt+0xa50c>
   1ba7c:	add	r3, pc, #0
   1ba80:	ldr	pc, [r3, r0, lsl #2]
   1ba84:	andeq	fp, r1, r4, asr ip
   1ba88:	andeq	fp, r1, ip, ror ip
   1ba8c:	andeq	fp, r1, ip, ror ip
   1ba90:	andeq	fp, r1, ip, ror ip
   1ba94:	andeq	fp, r1, r8, lsr #21
   1ba98:	andeq	fp, r1, ip, ror ip
   1ba9c:	andeq	fp, r1, r8, lsr #21
   1baa0:	andeq	fp, r1, ip, ror ip
   1baa4:	andeq	fp, r1, r8, lsr #21
   1baa8:	ldr	r3, [r1, #56]	; 0x38
   1baac:	mov	r0, #7
   1bab0:	cmp	r3, r2
   1bab4:	ble	1bc8c <__assert_fail@plt+0xa51c>
   1bab8:	ldrb	r3, [r5]
   1babc:	mov	r2, #0
   1bac0:	uxtb	r7, r6
   1bac4:	cmp	r7, #30
   1bac8:	bne	1bad8 <__assert_fail@plt+0xa368>
   1bacc:	ldrb	r7, [r1, #75]	; 0x4b
   1bad0:	cmp	r7, #0
   1bad4:	bne	1bb30 <__assert_fail@plt+0xa3c0>
   1bad8:	ldr	r4, [r1, #40]	; 0x28
   1badc:	ldr	r7, [r1, #4]
   1bae0:	add	r6, r4, #1
   1bae4:	str	r6, [r1, #40]	; 0x28
   1bae8:	ldrb	r4, [r7, r4]
   1baec:	ldr	r7, [r1, #56]	; 0x38
   1baf0:	cmp	r7, r6
   1baf4:	ble	1bc8c <__assert_fail@plt+0xa51c>
   1baf8:	uxtb	r7, r4
   1bafc:	cmp	r7, r3
   1bb00:	bne	1bb14 <__assert_fail@plt+0xa3a4>
   1bb04:	ldr	r7, [r1, #4]
   1bb08:	ldrb	r7, [r7, r6]
   1bb0c:	cmp	r7, #93	; 0x5d
   1bb10:	beq	1bc08 <__assert_fail@plt+0xa498>
   1bb14:	ldr	r7, [r9, #4]
   1bb18:	strb	r4, [r7, r2]
   1bb1c:	add	r2, r2, #1
   1bb20:	cmp	r2, #32
   1bb24:	beq	1bc8c <__assert_fail@plt+0xa51c>
   1bb28:	ldrb	r6, [r5, #4]
   1bb2c:	b	1bac0 <__assert_fail@plt+0xa350>
   1bb30:	ldrb	r7, [r1, #76]	; 0x4c
   1bb34:	cmp	r7, #0
   1bb38:	beq	1bbd4 <__assert_fail@plt+0xa464>
   1bb3c:	ldr	lr, [r1, #28]
   1bb40:	ldr	ip, [r1, #40]	; 0x28
   1bb44:	cmp	lr, ip
   1bb48:	beq	1bb5c <__assert_fail@plt+0xa3ec>
   1bb4c:	ldr	r4, [r1, #8]
   1bb50:	ldr	r4, [r4, ip, lsl #2]
   1bb54:	cmn	r4, #1
   1bb58:	beq	1bbf4 <__assert_fail@plt+0xa484>
   1bb5c:	ldr	r6, [r1, #12]
   1bb60:	ldr	r7, [r1, #24]
   1bb64:	ldr	r4, [r1]
   1bb68:	ldr	r6, [r6, ip, lsl #2]
   1bb6c:	add	r6, r7, r6
   1bb70:	add	r4, r4, r6
   1bb74:	ldrsb	r4, [r4]
   1bb78:	cmn	r4, #1
   1bb7c:	ble	1bbf4 <__assert_fail@plt+0xa484>
   1bb80:	ldr	r7, [r1, #80]	; 0x50
   1bb84:	mov	r6, #1
   1bb88:	cmp	r7, #1
   1bb8c:	beq	1bbc8 <__assert_fail@plt+0xa458>
   1bb90:	add	r7, ip, #1
   1bb94:	cmp	r7, lr
   1bb98:	bge	1bbc8 <__assert_fail@plt+0xa458>
   1bb9c:	ldr	r6, [r1, #8]
   1bba0:	sub	lr, lr, ip
   1bba4:	add	r8, r6, ip, lsl #2
   1bba8:	mov	r6, #1
   1bbac:	ldr	r7, [r8, r6, lsl #2]
   1bbb0:	cmn	r7, #1
   1bbb4:	bne	1bbc8 <__assert_fail@plt+0xa458>
   1bbb8:	add	r6, r6, #1
   1bbbc:	cmp	lr, r6
   1bbc0:	bne	1bbac <__assert_fail@plt+0xa43c>
   1bbc4:	mov	r6, lr
   1bbc8:	add	r6, r6, ip
   1bbcc:	str	r6, [r1, #40]	; 0x28
   1bbd0:	b	1baec <__assert_fail@plt+0xa37c>
   1bbd4:	ldr	r7, [r1, #40]	; 0x28
   1bbd8:	ldr	r4, [r1, #24]
   1bbdc:	ldr	ip, [r1]
   1bbe0:	add	r6, r7, #1
   1bbe4:	add	r7, r7, r4
   1bbe8:	str	r6, [r1, #40]	; 0x28
   1bbec:	ldrb	r4, [ip, r7]
   1bbf0:	b	1baec <__assert_fail@plt+0xa37c>
   1bbf4:	add	r6, ip, #1
   1bbf8:	str	r6, [r1, #40]	; 0x28
   1bbfc:	ldr	r7, [r1, #4]
   1bc00:	ldrb	r4, [r7, ip]
   1bc04:	b	1baec <__assert_fail@plt+0xa37c>
   1bc08:	add	r0, r6, #1
   1bc0c:	str	r0, [r1, #40]	; 0x28
   1bc10:	mov	r0, #0
   1bc14:	ldr	r1, [r9, #4]
   1bc18:	strb	r0, [r1, r2]
   1bc1c:	ldrb	r1, [r5, #4]
   1bc20:	cmp	r1, #30
   1bc24:	beq	1bc40 <__assert_fail@plt+0xa4d0>
   1bc28:	cmp	r1, #28
   1bc2c:	beq	1bc48 <__assert_fail@plt+0xa4d8>
   1bc30:	cmp	r1, #26
   1bc34:	moveq	r1, #3
   1bc38:	streq	r1, [r9]
   1bc3c:	b	1bc8c <__assert_fail@plt+0xa51c>
   1bc40:	mov	r1, #4
   1bc44:	b	1bc4c <__assert_fail@plt+0xa4dc>
   1bc48:	mov	r1, #2
   1bc4c:	str	r1, [r9]
   1bc50:	b	1bc8c <__assert_fail@plt+0xa51c>
   1bc54:	ldr	r0, [fp, #12]
   1bc58:	cmp	r0, #0
   1bc5c:	bne	1bc7c <__assert_fail@plt+0xa50c>
   1bc60:	ldr	r2, [fp, #8]
   1bc64:	mov	r0, sp
   1bc68:	bl	1b868 <__assert_fail@plt+0xa0f8>
   1bc6c:	ldrb	r1, [sp, #4]
   1bc70:	mov	r0, #11
   1bc74:	cmp	r1, #21
   1bc78:	bne	1bc8c <__assert_fail@plt+0xa51c>
   1bc7c:	mov	r0, #0
   1bc80:	str	r0, [r9]
   1bc84:	ldrb	r1, [r5]
   1bc88:	strb	r1, [r9, #4]
   1bc8c:	sub	sp, fp, #24
   1bc90:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bc94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bc98:	add	fp, sp, #24
   1bc9c:	mov	r8, r0
   1bca0:	ldrb	r0, [fp, #14]
   1bca4:	ldr	r6, [fp, #8]
   1bca8:	mov	r5, r3
   1bcac:	mov	r7, r2
   1bcb0:	mov	r4, r1
   1bcb4:	tst	r0, #64	; 0x40
   1bcb8:	beq	1bcf4 <__assert_fail@plt+0xa584>
   1bcbc:	movw	r1, #20698	; 0x50da
   1bcc0:	mov	r0, r6
   1bcc4:	movt	r1, #2
   1bcc8:	bl	1141c <strcmp@plt>
   1bccc:	cmp	r0, #0
   1bcd0:	beq	1bcec <__assert_fail@plt+0xa57c>
   1bcd4:	movw	r1, #20704	; 0x50e0
   1bcd8:	mov	r0, r6
   1bcdc:	movt	r1, #2
   1bce0:	bl	1141c <strcmp@plt>
   1bce4:	cmp	r0, #0
   1bce8:	bne	1bcf4 <__assert_fail@plt+0xa584>
   1bcec:	movw	r6, #20710	; 0x50e6
   1bcf0:	movt	r6, #2
   1bcf4:	ldr	r0, [r5]
   1bcf8:	ldr	r1, [r7, #36]	; 0x24
   1bcfc:	cmp	r0, r1
   1bd00:	beq	1c1f4 <__assert_fail@plt+0xaa84>
   1bd04:	mov	r0, r6
   1bd08:	bl	113ec <wctype@plt>
   1bd0c:	ldr	r2, [r7, #36]	; 0x24
   1bd10:	ldr	r1, [r7, #12]
   1bd14:	add	r3, r2, #1
   1bd18:	str	r3, [r7, #36]	; 0x24
   1bd1c:	str	r0, [r1, r2, lsl #2]
   1bd20:	movw	r1, #20686	; 0x50ce
   1bd24:	mov	r0, r6
   1bd28:	movt	r1, #2
   1bd2c:	bl	1141c <strcmp@plt>
   1bd30:	cmp	r0, #0
   1bd34:	beq	1be98 <__assert_fail@plt+0xa728>
   1bd38:	movw	r1, #20716	; 0x50ec
   1bd3c:	mov	r0, r6
   1bd40:	movt	r1, #2
   1bd44:	bl	1141c <strcmp@plt>
   1bd48:	cmp	r0, #0
   1bd4c:	beq	1bee4 <__assert_fail@plt+0xa774>
   1bd50:	movw	r1, #20704	; 0x50e0
   1bd54:	mov	r0, r6
   1bd58:	movt	r1, #2
   1bd5c:	bl	1141c <strcmp@plt>
   1bd60:	cmp	r0, #0
   1bd64:	beq	1bf30 <__assert_fail@plt+0xa7c0>
   1bd68:	movw	r1, #20692	; 0x50d4
   1bd6c:	mov	r0, r6
   1bd70:	movt	r1, #2
   1bd74:	bl	1141c <strcmp@plt>
   1bd78:	cmp	r0, #0
   1bd7c:	beq	1bf7c <__assert_fail@plt+0xa80c>
   1bd80:	movw	r1, #20710	; 0x50e6
   1bd84:	mov	r0, r6
   1bd88:	movt	r1, #2
   1bd8c:	bl	1141c <strcmp@plt>
   1bd90:	cmp	r0, #0
   1bd94:	beq	1bfc8 <__assert_fail@plt+0xa858>
   1bd98:	movw	r1, #20747	; 0x510b
   1bd9c:	mov	r0, r6
   1bda0:	movt	r1, #2
   1bda4:	bl	1141c <strcmp@plt>
   1bda8:	cmp	r0, #0
   1bdac:	beq	1c014 <__assert_fail@plt+0xa8a4>
   1bdb0:	movw	r1, #20722	; 0x50f2
   1bdb4:	mov	r0, r6
   1bdb8:	movt	r1, #2
   1bdbc:	bl	1141c <strcmp@plt>
   1bdc0:	cmp	r0, #0
   1bdc4:	beq	1c064 <__assert_fail@plt+0xa8f4>
   1bdc8:	movw	r1, #20698	; 0x50da
   1bdcc:	mov	r0, r6
   1bdd0:	movt	r1, #2
   1bdd4:	bl	1141c <strcmp@plt>
   1bdd8:	cmp	r0, #0
   1bddc:	beq	1c0b4 <__assert_fail@plt+0xa944>
   1bde0:	movw	r1, #20728	; 0x50f8
   1bde4:	mov	r0, r6
   1bde8:	movt	r1, #2
   1bdec:	bl	1141c <strcmp@plt>
   1bdf0:	cmp	r0, #0
   1bdf4:	beq	1c104 <__assert_fail@plt+0xa994>
   1bdf8:	movw	r1, #20734	; 0x50fe
   1bdfc:	mov	r0, r6
   1be00:	movt	r1, #2
   1be04:	bl	1141c <strcmp@plt>
   1be08:	cmp	r0, #0
   1be0c:	beq	1c154 <__assert_fail@plt+0xa9e4>
   1be10:	movw	r1, #20740	; 0x5104
   1be14:	mov	r0, r6
   1be18:	movt	r1, #2
   1be1c:	bl	1141c <strcmp@plt>
   1be20:	cmp	r0, #0
   1be24:	beq	1c1a4 <__assert_fail@plt+0xaa34>
   1be28:	movw	r1, #20746	; 0x510a
   1be2c:	mov	r0, r6
   1be30:	movt	r1, #2
   1be34:	bl	1141c <strcmp@plt>
   1be38:	mov	r1, r0
   1be3c:	mov	r0, #4
   1be40:	cmp	r1, #0
   1be44:	bne	1c1f0 <__assert_fail@plt+0xaa80>
   1be48:	bl	115f0 <__ctype_b_loc@plt>
   1be4c:	ldr	r1, [r0]
   1be50:	mov	r2, #0
   1be54:	mov	r3, #1
   1be58:	cmp	r8, #0
   1be5c:	bne	1c458 <__assert_fail@plt+0xace8>
   1be60:	ldrb	r0, [r1, #1]
   1be64:	tst	r0, #16
   1be68:	beq	1be80 <__assert_fail@plt+0xa710>
   1be6c:	ubfx	r0, r2, #5, #3
   1be70:	and	r6, r2, #31
   1be74:	ldr	r7, [r4, r0, lsl #2]
   1be78:	orr	r7, r7, r3, lsl r6
   1be7c:	str	r7, [r4, r0, lsl #2]
   1be80:	add	r2, r2, #1
   1be84:	add	r1, r1, #2
   1be88:	mov	r0, #0
   1be8c:	cmp	r2, #256	; 0x100
   1be90:	bne	1be60 <__assert_fail@plt+0xa6f0>
   1be94:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1be98:	bl	115f0 <__ctype_b_loc@plt>
   1be9c:	ldr	r1, [r0]
   1bea0:	cmp	r8, #0
   1bea4:	bne	1c294 <__assert_fail@plt+0xab24>
   1bea8:	mov	r0, #0
   1beac:	mov	r2, #1
   1beb0:	ldrb	r3, [r1]
   1beb4:	tst	r3, #8
   1beb8:	beq	1bed0 <__assert_fail@plt+0xa760>
   1bebc:	ubfx	r3, r0, #5, #3
   1bec0:	and	r6, r0, #31
   1bec4:	ldr	r7, [r4, r3, lsl #2]
   1bec8:	orr	r7, r7, r2, lsl r6
   1becc:	str	r7, [r4, r3, lsl #2]
   1bed0:	add	r0, r0, #1
   1bed4:	add	r1, r1, #2
   1bed8:	cmp	r0, #256	; 0x100
   1bedc:	bne	1beb0 <__assert_fail@plt+0xa740>
   1bee0:	b	1c05c <__assert_fail@plt+0xa8ec>
   1bee4:	bl	115f0 <__ctype_b_loc@plt>
   1bee8:	ldr	r1, [r0]
   1beec:	cmp	r8, #0
   1bef0:	bne	1c314 <__assert_fail@plt+0xaba4>
   1bef4:	mov	r0, #0
   1bef8:	mov	r2, #1
   1befc:	ldrb	r3, [r1]
   1bf00:	tst	r3, #2
   1bf04:	beq	1bf1c <__assert_fail@plt+0xa7ac>
   1bf08:	ubfx	r3, r0, #5, #3
   1bf0c:	and	r6, r0, #31
   1bf10:	ldr	r7, [r4, r3, lsl #2]
   1bf14:	orr	r7, r7, r2, lsl r6
   1bf18:	str	r7, [r4, r3, lsl #2]
   1bf1c:	add	r0, r0, #1
   1bf20:	add	r1, r1, #2
   1bf24:	cmp	r0, #256	; 0x100
   1bf28:	bne	1befc <__assert_fail@plt+0xa78c>
   1bf2c:	b	1c05c <__assert_fail@plt+0xa8ec>
   1bf30:	bl	115f0 <__ctype_b_loc@plt>
   1bf34:	ldr	r1, [r0]
   1bf38:	cmp	r8, #0
   1bf3c:	bne	1c394 <__assert_fail@plt+0xac24>
   1bf40:	mov	r0, #0
   1bf44:	mov	r2, #1
   1bf48:	ldrb	r3, [r1, #1]
   1bf4c:	tst	r3, #2
   1bf50:	beq	1bf68 <__assert_fail@plt+0xa7f8>
   1bf54:	ubfx	r3, r0, #5, #3
   1bf58:	and	r6, r0, #31
   1bf5c:	ldr	r7, [r4, r3, lsl #2]
   1bf60:	orr	r7, r7, r2, lsl r6
   1bf64:	str	r7, [r4, r3, lsl #2]
   1bf68:	add	r0, r0, #1
   1bf6c:	add	r1, r1, #2
   1bf70:	cmp	r0, #256	; 0x100
   1bf74:	bne	1bf48 <__assert_fail@plt+0xa7d8>
   1bf78:	b	1c05c <__assert_fail@plt+0xa8ec>
   1bf7c:	bl	115f0 <__ctype_b_loc@plt>
   1bf80:	ldr	r1, [r0]
   1bf84:	cmp	r8, #0
   1bf88:	bne	1c414 <__assert_fail@plt+0xaca4>
   1bf8c:	mov	r0, #0
   1bf90:	mov	r2, #1
   1bf94:	ldrb	r3, [r1, #1]
   1bf98:	tst	r3, #32
   1bf9c:	beq	1bfb4 <__assert_fail@plt+0xa844>
   1bfa0:	ubfx	r3, r0, #5, #3
   1bfa4:	and	r6, r0, #31
   1bfa8:	ldr	r7, [r4, r3, lsl #2]
   1bfac:	orr	r7, r7, r2, lsl r6
   1bfb0:	str	r7, [r4, r3, lsl #2]
   1bfb4:	add	r0, r0, #1
   1bfb8:	add	r1, r1, #2
   1bfbc:	cmp	r0, #256	; 0x100
   1bfc0:	bne	1bf94 <__assert_fail@plt+0xa824>
   1bfc4:	b	1c05c <__assert_fail@plt+0xa8ec>
   1bfc8:	bl	115f0 <__ctype_b_loc@plt>
   1bfcc:	ldr	r1, [r0]
   1bfd0:	cmp	r8, #0
   1bfd4:	bne	1c494 <__assert_fail@plt+0xad24>
   1bfd8:	mov	r0, #0
   1bfdc:	mov	r2, #1
   1bfe0:	ldrb	r3, [r1, #1]
   1bfe4:	tst	r3, #4
   1bfe8:	beq	1c000 <__assert_fail@plt+0xa890>
   1bfec:	ubfx	r3, r0, #5, #3
   1bff0:	and	r6, r0, #31
   1bff4:	ldr	r7, [r4, r3, lsl #2]
   1bff8:	orr	r7, r7, r2, lsl r6
   1bffc:	str	r7, [r4, r3, lsl #2]
   1c000:	add	r0, r0, #1
   1c004:	add	r1, r1, #2
   1c008:	cmp	r0, #256	; 0x100
   1c00c:	bne	1bfe0 <__assert_fail@plt+0xa870>
   1c010:	b	1c05c <__assert_fail@plt+0xa8ec>
   1c014:	bl	115f0 <__ctype_b_loc@plt>
   1c018:	ldr	r1, [r0]
   1c01c:	cmp	r8, #0
   1c020:	bne	1c4d8 <__assert_fail@plt+0xad68>
   1c024:	mov	r0, #0
   1c028:	mov	r2, #1
   1c02c:	ldrb	r3, [r1, #1]
   1c030:	tst	r3, #8
   1c034:	beq	1c04c <__assert_fail@plt+0xa8dc>
   1c038:	ubfx	r3, r0, #5, #3
   1c03c:	and	r6, r0, #31
   1c040:	ldr	r7, [r4, r3, lsl #2]
   1c044:	orr	r7, r7, r2, lsl r6
   1c048:	str	r7, [r4, r3, lsl #2]
   1c04c:	add	r0, r0, #1
   1c050:	add	r1, r1, #2
   1c054:	cmp	r0, #256	; 0x100
   1c058:	bne	1c02c <__assert_fail@plt+0xa8bc>
   1c05c:	mov	r0, #0
   1c060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c064:	bl	115f0 <__ctype_b_loc@plt>
   1c068:	ldr	r1, [r0]
   1c06c:	mov	r2, #0
   1c070:	mov	r3, #1
   1c074:	cmp	r8, #0
   1c078:	bne	1c21c <__assert_fail@plt+0xaaac>
   1c07c:	ldrb	r0, [r1, #1]
   1c080:	tst	r0, #64	; 0x40
   1c084:	beq	1c09c <__assert_fail@plt+0xa92c>
   1c088:	ubfx	r0, r2, #5, #3
   1c08c:	and	r6, r2, #31
   1c090:	ldr	r7, [r4, r0, lsl #2]
   1c094:	orr	r7, r7, r3, lsl r6
   1c098:	str	r7, [r4, r0, lsl #2]
   1c09c:	add	r2, r2, #1
   1c0a0:	add	r1, r1, #2
   1c0a4:	mov	r0, #0
   1c0a8:	cmp	r2, #256	; 0x100
   1c0ac:	bne	1c07c <__assert_fail@plt+0xa90c>
   1c0b0:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c0b4:	bl	115f0 <__ctype_b_loc@plt>
   1c0b8:	ldr	r1, [r0]
   1c0bc:	mov	r2, #0
   1c0c0:	mov	r3, #1
   1c0c4:	cmp	r8, #0
   1c0c8:	bne	1c258 <__assert_fail@plt+0xaae8>
   1c0cc:	ldrb	r0, [r1, #1]
   1c0d0:	tst	r0, #1
   1c0d4:	beq	1c0ec <__assert_fail@plt+0xa97c>
   1c0d8:	ubfx	r0, r2, #5, #3
   1c0dc:	and	r6, r2, #31
   1c0e0:	ldr	r7, [r4, r0, lsl #2]
   1c0e4:	orr	r7, r7, r3, lsl r6
   1c0e8:	str	r7, [r4, r0, lsl #2]
   1c0ec:	add	r2, r2, #1
   1c0f0:	add	r1, r1, #2
   1c0f4:	mov	r0, #0
   1c0f8:	cmp	r2, #256	; 0x100
   1c0fc:	bne	1c0cc <__assert_fail@plt+0xa95c>
   1c100:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c104:	bl	115f0 <__ctype_b_loc@plt>
   1c108:	ldr	r1, [r0]
   1c10c:	mov	r2, #0
   1c110:	mov	r3, #1
   1c114:	cmp	r8, #0
   1c118:	bne	1c2d8 <__assert_fail@plt+0xab68>
   1c11c:	ldrb	r0, [r1]
   1c120:	tst	r0, #1
   1c124:	beq	1c13c <__assert_fail@plt+0xa9cc>
   1c128:	ubfx	r0, r2, #5, #3
   1c12c:	and	r6, r2, #31
   1c130:	ldr	r7, [r4, r0, lsl #2]
   1c134:	orr	r7, r7, r3, lsl r6
   1c138:	str	r7, [r4, r0, lsl #2]
   1c13c:	add	r2, r2, #1
   1c140:	add	r1, r1, #2
   1c144:	mov	r0, #0
   1c148:	cmp	r2, #256	; 0x100
   1c14c:	bne	1c11c <__assert_fail@plt+0xa9ac>
   1c150:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c154:	bl	115f0 <__ctype_b_loc@plt>
   1c158:	ldr	r1, [r0]
   1c15c:	mov	r2, #0
   1c160:	mov	r3, #1
   1c164:	cmp	r8, #0
   1c168:	bne	1c358 <__assert_fail@plt+0xabe8>
   1c16c:	ldrsh	r0, [r1]
   1c170:	cmn	r0, #1
   1c174:	bgt	1c18c <__assert_fail@plt+0xaa1c>
   1c178:	ubfx	r0, r2, #5, #3
   1c17c:	and	r6, r2, #31
   1c180:	ldr	r7, [r4, r0, lsl #2]
   1c184:	orr	r7, r7, r3, lsl r6
   1c188:	str	r7, [r4, r0, lsl #2]
   1c18c:	add	r2, r2, #1
   1c190:	add	r1, r1, #2
   1c194:	mov	r0, #0
   1c198:	cmp	r2, #256	; 0x100
   1c19c:	bne	1c16c <__assert_fail@plt+0xa9fc>
   1c1a0:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c1a4:	bl	115f0 <__ctype_b_loc@plt>
   1c1a8:	ldr	r1, [r0]
   1c1ac:	mov	r2, #0
   1c1b0:	mov	r3, #1
   1c1b4:	cmp	r8, #0
   1c1b8:	bne	1c3d8 <__assert_fail@plt+0xac68>
   1c1bc:	ldrb	r0, [r1]
   1c1c0:	tst	r0, #4
   1c1c4:	beq	1c1dc <__assert_fail@plt+0xaa6c>
   1c1c8:	ubfx	r0, r2, #5, #3
   1c1cc:	and	r6, r2, #31
   1c1d0:	ldr	r7, [r4, r0, lsl #2]
   1c1d4:	orr	r7, r7, r3, lsl r6
   1c1d8:	str	r7, [r4, r0, lsl #2]
   1c1dc:	add	r2, r2, #1
   1c1e0:	add	r1, r1, #2
   1c1e4:	mov	r0, #0
   1c1e8:	cmp	r2, #256	; 0x100
   1c1ec:	bne	1c1bc <__assert_fail@plt+0xaa4c>
   1c1f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c1f4:	mov	r1, #1
   1c1f8:	orr	r9, r1, r0, lsl #1
   1c1fc:	ldr	r0, [r7, #12]
   1c200:	lsl	r1, r9, #2
   1c204:	bl	239c4 <__assert_fail@plt+0x12254>
   1c208:	cmp	r0, #0
   1c20c:	beq	1c51c <__assert_fail@plt+0xadac>
   1c210:	str	r0, [r7, #12]
   1c214:	str	r9, [r5]
   1c218:	b	1bd04 <__assert_fail@plt+0xa594>
   1c21c:	ldrb	r0, [r1, #1]
   1c220:	tst	r0, #64	; 0x40
   1c224:	beq	1c240 <__assert_fail@plt+0xaad0>
   1c228:	ldrb	r0, [r8, r2]
   1c22c:	ubfx	r7, r0, #5, #3
   1c230:	and	r0, r0, #31
   1c234:	ldr	r6, [r4, r7, lsl #2]
   1c238:	orr	r0, r6, r3, lsl r0
   1c23c:	str	r0, [r4, r7, lsl #2]
   1c240:	add	r2, r2, #1
   1c244:	add	r1, r1, #2
   1c248:	mov	r0, #0
   1c24c:	cmp	r2, #256	; 0x100
   1c250:	bne	1c21c <__assert_fail@plt+0xaaac>
   1c254:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c258:	ldrb	r0, [r1, #1]
   1c25c:	tst	r0, #1
   1c260:	beq	1c27c <__assert_fail@plt+0xab0c>
   1c264:	ldrb	r0, [r8, r2]
   1c268:	ubfx	r7, r0, #5, #3
   1c26c:	and	r0, r0, #31
   1c270:	ldr	r6, [r4, r7, lsl #2]
   1c274:	orr	r0, r6, r3, lsl r0
   1c278:	str	r0, [r4, r7, lsl #2]
   1c27c:	add	r2, r2, #1
   1c280:	add	r1, r1, #2
   1c284:	mov	r0, #0
   1c288:	cmp	r2, #256	; 0x100
   1c28c:	bne	1c258 <__assert_fail@plt+0xaae8>
   1c290:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c294:	mov	r2, #0
   1c298:	mov	r3, #1
   1c29c:	ldrb	r0, [r1]
   1c2a0:	tst	r0, #8
   1c2a4:	beq	1c2c0 <__assert_fail@plt+0xab50>
   1c2a8:	ldrb	r0, [r8, r2]
   1c2ac:	ubfx	r7, r0, #5, #3
   1c2b0:	and	r0, r0, #31
   1c2b4:	ldr	r6, [r4, r7, lsl #2]
   1c2b8:	orr	r0, r6, r3, lsl r0
   1c2bc:	str	r0, [r4, r7, lsl #2]
   1c2c0:	add	r2, r2, #1
   1c2c4:	add	r1, r1, #2
   1c2c8:	mov	r0, #0
   1c2cc:	cmp	r2, #256	; 0x100
   1c2d0:	bne	1c29c <__assert_fail@plt+0xab2c>
   1c2d4:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c2d8:	ldrb	r0, [r1]
   1c2dc:	tst	r0, #1
   1c2e0:	beq	1c2fc <__assert_fail@plt+0xab8c>
   1c2e4:	ldrb	r0, [r8, r2]
   1c2e8:	ubfx	r7, r0, #5, #3
   1c2ec:	and	r0, r0, #31
   1c2f0:	ldr	r6, [r4, r7, lsl #2]
   1c2f4:	orr	r0, r6, r3, lsl r0
   1c2f8:	str	r0, [r4, r7, lsl #2]
   1c2fc:	add	r2, r2, #1
   1c300:	add	r1, r1, #2
   1c304:	mov	r0, #0
   1c308:	cmp	r2, #256	; 0x100
   1c30c:	bne	1c2d8 <__assert_fail@plt+0xab68>
   1c310:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c314:	mov	r2, #0
   1c318:	mov	r3, #1
   1c31c:	ldrb	r0, [r1]
   1c320:	tst	r0, #2
   1c324:	beq	1c340 <__assert_fail@plt+0xabd0>
   1c328:	ldrb	r0, [r8, r2]
   1c32c:	ubfx	r7, r0, #5, #3
   1c330:	and	r0, r0, #31
   1c334:	ldr	r6, [r4, r7, lsl #2]
   1c338:	orr	r0, r6, r3, lsl r0
   1c33c:	str	r0, [r4, r7, lsl #2]
   1c340:	add	r2, r2, #1
   1c344:	add	r1, r1, #2
   1c348:	mov	r0, #0
   1c34c:	cmp	r2, #256	; 0x100
   1c350:	bne	1c31c <__assert_fail@plt+0xabac>
   1c354:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c358:	ldrsh	r0, [r1]
   1c35c:	cmn	r0, #1
   1c360:	bgt	1c37c <__assert_fail@plt+0xac0c>
   1c364:	ldrb	r0, [r8, r2]
   1c368:	ubfx	r7, r0, #5, #3
   1c36c:	and	r0, r0, #31
   1c370:	ldr	r6, [r4, r7, lsl #2]
   1c374:	orr	r0, r6, r3, lsl r0
   1c378:	str	r0, [r4, r7, lsl #2]
   1c37c:	add	r2, r2, #1
   1c380:	add	r1, r1, #2
   1c384:	mov	r0, #0
   1c388:	cmp	r2, #256	; 0x100
   1c38c:	bne	1c358 <__assert_fail@plt+0xabe8>
   1c390:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c394:	mov	r2, #0
   1c398:	mov	r3, #1
   1c39c:	ldrb	r0, [r1, #1]
   1c3a0:	tst	r0, #2
   1c3a4:	beq	1c3c0 <__assert_fail@plt+0xac50>
   1c3a8:	ldrb	r0, [r8, r2]
   1c3ac:	ubfx	r7, r0, #5, #3
   1c3b0:	and	r0, r0, #31
   1c3b4:	ldr	r6, [r4, r7, lsl #2]
   1c3b8:	orr	r0, r6, r3, lsl r0
   1c3bc:	str	r0, [r4, r7, lsl #2]
   1c3c0:	add	r2, r2, #1
   1c3c4:	add	r1, r1, #2
   1c3c8:	mov	r0, #0
   1c3cc:	cmp	r2, #256	; 0x100
   1c3d0:	bne	1c39c <__assert_fail@plt+0xac2c>
   1c3d4:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c3d8:	ldrb	r0, [r1]
   1c3dc:	tst	r0, #4
   1c3e0:	beq	1c3fc <__assert_fail@plt+0xac8c>
   1c3e4:	ldrb	r0, [r8, r2]
   1c3e8:	ubfx	r7, r0, #5, #3
   1c3ec:	and	r0, r0, #31
   1c3f0:	ldr	r6, [r4, r7, lsl #2]
   1c3f4:	orr	r0, r6, r3, lsl r0
   1c3f8:	str	r0, [r4, r7, lsl #2]
   1c3fc:	add	r2, r2, #1
   1c400:	add	r1, r1, #2
   1c404:	mov	r0, #0
   1c408:	cmp	r2, #256	; 0x100
   1c40c:	bne	1c3d8 <__assert_fail@plt+0xac68>
   1c410:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c414:	mov	r2, #0
   1c418:	mov	r3, #1
   1c41c:	ldrb	r0, [r1, #1]
   1c420:	tst	r0, #32
   1c424:	beq	1c440 <__assert_fail@plt+0xacd0>
   1c428:	ldrb	r0, [r8, r2]
   1c42c:	ubfx	r7, r0, #5, #3
   1c430:	and	r0, r0, #31
   1c434:	ldr	r6, [r4, r7, lsl #2]
   1c438:	orr	r0, r6, r3, lsl r0
   1c43c:	str	r0, [r4, r7, lsl #2]
   1c440:	add	r2, r2, #1
   1c444:	add	r1, r1, #2
   1c448:	mov	r0, #0
   1c44c:	cmp	r2, #256	; 0x100
   1c450:	bne	1c41c <__assert_fail@plt+0xacac>
   1c454:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c458:	ldrb	r0, [r1, #1]
   1c45c:	tst	r0, #16
   1c460:	beq	1c47c <__assert_fail@plt+0xad0c>
   1c464:	ldrb	r0, [r8, r2]
   1c468:	ubfx	r7, r0, #5, #3
   1c46c:	and	r0, r0, #31
   1c470:	ldr	r6, [r4, r7, lsl #2]
   1c474:	orr	r0, r6, r3, lsl r0
   1c478:	str	r0, [r4, r7, lsl #2]
   1c47c:	add	r2, r2, #1
   1c480:	add	r1, r1, #2
   1c484:	mov	r0, #0
   1c488:	cmp	r2, #256	; 0x100
   1c48c:	bne	1c458 <__assert_fail@plt+0xace8>
   1c490:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c494:	mov	r2, #0
   1c498:	mov	r3, #1
   1c49c:	ldrb	r0, [r1, #1]
   1c4a0:	tst	r0, #4
   1c4a4:	beq	1c4c0 <__assert_fail@plt+0xad50>
   1c4a8:	ldrb	r0, [r8, r2]
   1c4ac:	ubfx	r7, r0, #5, #3
   1c4b0:	and	r0, r0, #31
   1c4b4:	ldr	r6, [r4, r7, lsl #2]
   1c4b8:	orr	r0, r6, r3, lsl r0
   1c4bc:	str	r0, [r4, r7, lsl #2]
   1c4c0:	add	r2, r2, #1
   1c4c4:	add	r1, r1, #2
   1c4c8:	mov	r0, #0
   1c4cc:	cmp	r2, #256	; 0x100
   1c4d0:	bne	1c49c <__assert_fail@plt+0xad2c>
   1c4d4:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c4d8:	mov	r2, #0
   1c4dc:	mov	r3, #1
   1c4e0:	ldrb	r0, [r1, #1]
   1c4e4:	tst	r0, #8
   1c4e8:	beq	1c504 <__assert_fail@plt+0xad94>
   1c4ec:	ldrb	r0, [r8, r2]
   1c4f0:	ubfx	r7, r0, #5, #3
   1c4f4:	and	r0, r0, #31
   1c4f8:	ldr	r6, [r4, r7, lsl #2]
   1c4fc:	orr	r0, r6, r3, lsl r0
   1c500:	str	r0, [r4, r7, lsl #2]
   1c504:	add	r2, r2, #1
   1c508:	add	r1, r1, #2
   1c50c:	mov	r0, #0
   1c510:	cmp	r2, #256	; 0x100
   1c514:	bne	1c4e0 <__assert_fail@plt+0xad70>
   1c518:	b	1c1f0 <__assert_fail@plt+0xaa80>
   1c51c:	mov	r0, #12
   1c520:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c524:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c528:	add	fp, sp, #24
   1c52c:	mov	r5, r1
   1c530:	mov	r4, r2
   1c534:	mov	r6, r0
   1c538:	mvn	r1, #0
   1c53c:	movw	r8, #32816	; 0x8030
   1c540:	mov	r7, r1
   1c544:	mov	r0, r5
   1c548:	mov	r1, r6
   1c54c:	mov	r2, r4
   1c550:	bl	19774 <__assert_fail@plt+0x8004>
   1c554:	ldr	r1, [r6, #40]	; 0x28
   1c558:	add	r0, r1, r0
   1c55c:	str	r0, [r6, #40]	; 0x28
   1c560:	ldrb	r2, [r5, #4]
   1c564:	cmp	r2, #24
   1c568:	beq	1c5c8 <__assert_fail@plt+0xae58>
   1c56c:	cmp	r2, #2
   1c570:	beq	1c5c4 <__assert_fail@plt+0xae54>
   1c574:	ldrb	r0, [r5]
   1c578:	cmp	r0, #44	; 0x2c
   1c57c:	beq	1c5c8 <__assert_fail@plt+0xae58>
   1c580:	mvn	r1, #1
   1c584:	cmp	r0, #48	; 0x30
   1c588:	bcc	1c540 <__assert_fail@plt+0xadd0>
   1c58c:	cmp	r2, #1
   1c590:	bne	1c540 <__assert_fail@plt+0xadd0>
   1c594:	cmn	r7, #2
   1c598:	beq	1c540 <__assert_fail@plt+0xadd0>
   1c59c:	cmp	r0, #57	; 0x39
   1c5a0:	bhi	1c540 <__assert_fail@plt+0xadd0>
   1c5a4:	cmn	r7, #1
   1c5a8:	beq	1c5bc <__assert_fail@plt+0xae4c>
   1c5ac:	add	r1, r7, r7, lsl #2
   1c5b0:	add	r0, r0, r1, lsl #1
   1c5b4:	cmp	r0, r8
   1c5b8:	movge	r0, r8
   1c5bc:	sub	r1, r0, #48	; 0x30
   1c5c0:	b	1c540 <__assert_fail@plt+0xadd0>
   1c5c4:	mvn	r7, #1
   1c5c8:	mov	r0, r7
   1c5cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c5d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c5d4:	add	fp, sp, #24
   1c5d8:	sub	sp, sp, #8
   1c5dc:	mov	r3, r0
   1c5e0:	mov	r5, r0
   1c5e4:	mov	r8, r1
   1c5e8:	mov	r0, r1
   1c5ec:	mov	r1, #0
   1c5f0:	mov	r2, #0
   1c5f4:	mov	r7, #0
   1c5f8:	ldr	r4, [r3], #20
   1c5fc:	bl	1b594 <__assert_fail@plt+0x9e24>
   1c600:	cmp	r0, #0
   1c604:	str	r0, [sp, #4]
   1c608:	beq	1c6a4 <__assert_fail@plt+0xaf34>
   1c60c:	mov	r9, r0
   1c610:	add	r6, sp, #4
   1c614:	mov	r7, #0
   1c618:	str	r4, [r0]
   1c61c:	ldr	r0, [r6]
   1c620:	ldr	r1, [r0, #24]
   1c624:	orr	r1, r1, #262144	; 0x40000
   1c628:	str	r1, [r0, #24]
   1c62c:	ldr	r0, [r5, #4]
   1c630:	ldr	r4, [r6]
   1c634:	cmp	r0, #0
   1c638:	beq	1c648 <__assert_fail@plt+0xaed8>
   1c63c:	add	r6, r4, #4
   1c640:	mov	r5, r0
   1c644:	b	1c67c <__assert_fail@plt+0xaf0c>
   1c648:	mov	r1, #0
   1c64c:	mov	r0, r5
   1c650:	ldr	r5, [r5, #8]
   1c654:	cmp	r5, r1
   1c658:	cmpne	r5, #0
   1c65c:	bne	1c678 <__assert_fail@plt+0xaf08>
   1c660:	ldr	r5, [r0]
   1c664:	ldr	r4, [r4]
   1c668:	mov	r1, r0
   1c66c:	cmp	r5, #0
   1c670:	bne	1c64c <__assert_fail@plt+0xaedc>
   1c674:	b	1c6a0 <__assert_fail@plt+0xaf30>
   1c678:	add	r6, r4, #8
   1c67c:	add	r3, r5, #20
   1c680:	mov	r0, r8
   1c684:	mov	r1, #0
   1c688:	mov	r2, #0
   1c68c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1c690:	cmp	r0, #0
   1c694:	str	r0, [r6]
   1c698:	bne	1c618 <__assert_fail@plt+0xaea8>
   1c69c:	b	1c6a4 <__assert_fail@plt+0xaf34>
   1c6a0:	mov	r7, r9
   1c6a4:	mov	r0, r7
   1c6a8:	sub	sp, fp, #24
   1c6ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c6b0:	push	{r4, r5, r6, r7, fp, lr}
   1c6b4:	add	fp, sp, #16
   1c6b8:	mov	r6, r0
   1c6bc:	mov	r5, r1
   1c6c0:	mov	r0, r2
   1c6c4:	mov	r4, r2
   1c6c8:	mov	r1, r6
   1c6cc:	blx	r5
   1c6d0:	cmp	r0, #0
   1c6d4:	bne	1c728 <__assert_fail@plt+0xafb8>
   1c6d8:	ldr	r7, [r6, #4]
   1c6dc:	cmp	r7, #0
   1c6e0:	bne	1c710 <__assert_fail@plt+0xafa0>
   1c6e4:	mov	r1, #0
   1c6e8:	ldr	r7, [r6, #8]
   1c6ec:	mov	r0, r6
   1c6f0:	cmp	r7, r1
   1c6f4:	cmpne	r7, #0
   1c6f8:	bne	1c710 <__assert_fail@plt+0xafa0>
   1c6fc:	ldr	r6, [r0]
   1c700:	mov	r1, r0
   1c704:	cmp	r6, #0
   1c708:	bne	1c6e8 <__assert_fail@plt+0xaf78>
   1c70c:	b	1c72c <__assert_fail@plt+0xafbc>
   1c710:	mov	r0, r4
   1c714:	mov	r1, r7
   1c718:	blx	r5
   1c71c:	cmp	r0, #0
   1c720:	mov	r6, r7
   1c724:	beq	1c6d8 <__assert_fail@plt+0xaf68>
   1c728:	pop	{r4, r5, r6, r7, fp, pc}
   1c72c:	mov	r0, #0
   1c730:	pop	{r4, r5, r6, r7, fp, pc}
   1c734:	ldrb	r2, [r1, #24]
   1c738:	cmp	r2, #17
   1c73c:	beq	1c770 <__assert_fail@plt+0xb000>
   1c740:	cmp	r2, #4
   1c744:	bne	1c7c4 <__assert_fail@plt+0xb054>
   1c748:	ldr	r2, [r0, #132]	; 0x84
   1c74c:	cmp	r2, #0
   1c750:	beq	1c7c4 <__assert_fail@plt+0xb054>
   1c754:	ldr	r3, [r1, #20]
   1c758:	ldr	r2, [r2, r3, lsl #2]
   1c75c:	mov	r3, #1
   1c760:	str	r2, [r1, #20]
   1c764:	ldr	r1, [r0, #80]	; 0x50
   1c768:	orr	r1, r1, r3, lsl r2
   1c76c:	b	1c7c0 <__assert_fail@plt+0xb050>
   1c770:	ldr	r2, [r1, #4]
   1c774:	cmp	r2, #0
   1c778:	beq	1c7c4 <__assert_fail@plt+0xb054>
   1c77c:	ldrb	r3, [r2, #24]
   1c780:	cmp	r3, #17
   1c784:	bne	1c7c4 <__assert_fail@plt+0xb054>
   1c788:	ldr	r3, [r2, #4]
   1c78c:	ldr	r2, [r2, #20]
   1c790:	cmp	r3, #0
   1c794:	str	r3, [r1, #4]
   1c798:	strne	r1, [r3]
   1c79c:	cmp	r2, #31
   1c7a0:	ldr	r1, [r1, #20]
   1c7a4:	ldr	r3, [r0, #132]	; 0x84
   1c7a8:	ldr	r1, [r3, r1, lsl #2]
   1c7ac:	str	r1, [r3, r2, lsl #2]
   1c7b0:	bgt	1c7c4 <__assert_fail@plt+0xb054>
   1c7b4:	ldr	r1, [r0, #80]	; 0x50
   1c7b8:	mov	r3, #1
   1c7bc:	bic	r1, r1, r3, lsl r2
   1c7c0:	str	r1, [r0, #80]	; 0x50
   1c7c4:	mov	r0, #0
   1c7c8:	bx	lr
   1c7cc:	push	{r4, r5, fp, lr}
   1c7d0:	add	fp, sp, #8
   1c7d4:	sub	sp, sp, #8
   1c7d8:	mov	r5, r0
   1c7dc:	mov	r0, #0
   1c7e0:	mov	r4, r1
   1c7e4:	str	r0, [sp, #4]
   1c7e8:	ldr	r2, [r1, #4]
   1c7ec:	cmp	r2, #0
   1c7f0:	beq	1c818 <__assert_fail@plt+0xb0a8>
   1c7f4:	ldrb	r0, [r2, #24]
   1c7f8:	cmp	r0, #17
   1c7fc:	bne	1c818 <__assert_fail@plt+0xb0a8>
   1c800:	add	r0, sp, #4
   1c804:	mov	r1, r5
   1c808:	bl	1cad0 <__assert_fail@plt+0xb360>
   1c80c:	cmp	r0, #0
   1c810:	str	r0, [r4, #4]
   1c814:	strne	r4, [r0]
   1c818:	ldr	r2, [r4, #8]
   1c81c:	cmp	r2, #0
   1c820:	beq	1c848 <__assert_fail@plt+0xb0d8>
   1c824:	ldrb	r0, [r2, #24]
   1c828:	cmp	r0, #17
   1c82c:	bne	1c848 <__assert_fail@plt+0xb0d8>
   1c830:	add	r0, sp, #4
   1c834:	mov	r1, r5
   1c838:	bl	1cad0 <__assert_fail@plt+0xb360>
   1c83c:	cmp	r0, #0
   1c840:	str	r0, [r4, #8]
   1c844:	strne	r4, [r0]
   1c848:	ldr	r0, [sp, #4]
   1c84c:	sub	sp, fp, #8
   1c850:	pop	{r4, r5, fp, pc}
   1c854:	push	{r4, r5, fp, lr}
   1c858:	add	fp, sp, #8
   1c85c:	ldr	r2, [r1, #24]
   1c860:	mov	r5, r0
   1c864:	mov	r4, r1
   1c868:	uxtb	r0, r2
   1c86c:	cmp	r0, #16
   1c870:	bne	1c890 <__assert_fail@plt+0xb120>
   1c874:	ldr	r0, [r4, #4]
   1c878:	ldr	r1, [r0, #12]
   1c87c:	str	r1, [r4, #12]
   1c880:	ldr	r0, [r0, #28]
   1c884:	str	r0, [r4, #28]
   1c888:	mov	r0, #0
   1c88c:	pop	{r4, r5, fp, pc}
   1c890:	str	r4, [r4, #12]
   1c894:	mov	r0, r5
   1c898:	ldr	r1, [r4, #20]
   1c89c:	bl	1cc24 <__assert_fail@plt+0xb4b4>
   1c8a0:	cmn	r0, #1
   1c8a4:	str	r0, [r4, #28]
   1c8a8:	beq	1c8dc <__assert_fail@plt+0xb16c>
   1c8ac:	ldrb	r2, [r4, #24]
   1c8b0:	mov	r1, r0
   1c8b4:	mov	r0, #0
   1c8b8:	cmp	r2, #12
   1c8bc:	popne	{r4, r5, fp, pc}
   1c8c0:	ldr	r2, [r5]
   1c8c4:	ldr	r3, [r4, #20]
   1c8c8:	add	r1, r2, r1, lsl #3
   1c8cc:	ldr	r2, [r1, #4]
   1c8d0:	bfi	r2, r3, #8, #10
   1c8d4:	str	r2, [r1, #4]
   1c8d8:	pop	{r4, r5, fp, pc}
   1c8dc:	mov	r0, #12
   1c8e0:	pop	{r4, r5, fp, pc}
   1c8e4:	ldrb	r0, [r1, #24]
   1c8e8:	cmp	r0, #16
   1c8ec:	beq	1c900 <__assert_fail@plt+0xb190>
   1c8f0:	cmp	r0, #11
   1c8f4:	bne	1c918 <__assert_fail@plt+0xb1a8>
   1c8f8:	ldr	r0, [r1, #4]
   1c8fc:	b	1c938 <__assert_fail@plt+0xb1c8>
   1c900:	ldmib	r1, {r0, r2}
   1c904:	ldr	r3, [r2, #12]
   1c908:	str	r3, [r0, #16]
   1c90c:	ldr	r0, [r1, #16]
   1c910:	str	r0, [r2, #16]
   1c914:	b	1c93c <__assert_fail@plt+0xb1cc>
   1c918:	ldr	r0, [r1, #4]
   1c91c:	cmp	r0, #0
   1c920:	ldrne	r2, [r1, #16]
   1c924:	strne	r2, [r0, #16]
   1c928:	ldr	r0, [r1, #8]
   1c92c:	cmp	r0, #0
   1c930:	beq	1c93c <__assert_fail@plt+0xb1cc>
   1c934:	ldr	r1, [r1, #16]
   1c938:	str	r1, [r0, #16]
   1c93c:	mov	r0, #0
   1c940:	bx	lr
   1c944:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c948:	add	fp, sp, #24
   1c94c:	ldr	r3, [r1, #24]
   1c950:	mvn	r7, #1
   1c954:	ldr	r2, [r1, #28]
   1c958:	mov	r4, #0
   1c95c:	uxtab	r3, r7, r3
   1c960:	cmp	r3, #14
   1c964:	bhi	1ca6c <__assert_fail@plt+0xb2fc>
   1c968:	add	r7, pc, #0
   1c96c:	ldr	pc, [r7, r3, lsl #2]
   1c970:			; <UNDEFINED> instruction: 0x0001cab4
   1c974:	andeq	ip, r1, ip, ror #20
   1c978:	andeq	ip, r1, r0, lsl #21
   1c97c:	andeq	ip, r1, ip, ror #20
   1c980:	andeq	ip, r1, ip, ror #20
   1c984:	andeq	ip, r1, ip, ror #20
   1c988:	andeq	ip, r1, ip, lsr #19
   1c98c:	andeq	ip, r1, ip, lsr #19
   1c990:	andeq	ip, r1, r8, ror #19
   1c994:	andeq	ip, r1, r8, ror #19
   1c998:	andeq	ip, r1, ip, lsr #19
   1c99c:	andeq	ip, r1, ip, ror #20
   1c9a0:	andeq	ip, r1, ip, ror #20
   1c9a4:	andeq	ip, r1, ip, ror #20
   1c9a8:			; <UNDEFINED> instruction: 0x0001cab4
   1c9ac:	ldr	r1, [r1, #16]
   1c9b0:	ldr	r5, [r1, #28]
   1c9b4:	ldr	r6, [r0, #20]
   1c9b8:	add	r0, r2, r2, lsl #1
   1c9bc:	mov	r1, #1
   1c9c0:	str	r1, [r6, r0, lsl #2]!
   1c9c4:	mov	r0, #4
   1c9c8:	mov	r7, r6
   1c9cc:	str	r1, [r7, #4]!
   1c9d0:	bl	23994 <__assert_fail@plt+0x12224>
   1c9d4:	cmp	r0, #0
   1c9d8:	str	r0, [r6, #8]
   1c9dc:	beq	1cabc <__assert_fail@plt+0xb34c>
   1c9e0:	str	r5, [r0]
   1c9e4:	b	1cab4 <__assert_fail@plt+0xb344>
   1c9e8:	ldrb	r3, [r0, #88]	; 0x58
   1c9ec:	add	r6, r1, #16
   1c9f0:	add	r5, r2, r2, lsl #1
   1c9f4:	orr	r3, r3, #1
   1c9f8:	strb	r3, [r0, #88]	; 0x58
   1c9fc:	mov	r3, r6
   1ca00:	ldr	r7, [r1, #4]
   1ca04:	ldr	r1, [r1, #8]
   1ca08:	cmp	r1, #0
   1ca0c:	addne	r3, r1, #12
   1ca10:	cmp	r7, #0
   1ca14:	ldr	r1, [r3]
   1ca18:	addne	r6, r7, #12
   1ca1c:	ldr	r8, [r1, #28]
   1ca20:	ldr	r1, [r6]
   1ca24:	ldr	r6, [r0, #20]
   1ca28:	mov	r0, #2
   1ca2c:	ldr	r9, [r1, #28]
   1ca30:	mov	r7, r6
   1ca34:	str	r0, [r7, r5, lsl #2]!
   1ca38:	mov	r0, #8
   1ca3c:	bl	23994 <__assert_fail@plt+0x12224>
   1ca40:	cmp	r0, #0
   1ca44:	str	r0, [r7, #8]
   1ca48:	beq	1cac8 <__assert_fail@plt+0xb358>
   1ca4c:	add	r1, r6, r5, lsl #2
   1ca50:	cmp	r9, r8
   1ca54:	add	r1, r1, #4
   1ca58:	bne	1caa0 <__assert_fail@plt+0xb330>
   1ca5c:	mov	r2, #1
   1ca60:	str	r2, [r1]
   1ca64:	str	r9, [r0]
   1ca68:	b	1cab4 <__assert_fail@plt+0xb344>
   1ca6c:	ldr	r1, [r1, #16]
   1ca70:	ldr	r0, [r0, #12]
   1ca74:	ldr	r1, [r1, #28]
   1ca78:	str	r1, [r0, r2, lsl #2]
   1ca7c:	b	1cab4 <__assert_fail@plt+0xb344>
   1ca80:	ldr	r7, [r1, #16]
   1ca84:	ldr	r3, [r0, #12]
   1ca88:	ldr	r5, [r7, #28]
   1ca8c:	str	r5, [r3, r2, lsl #2]
   1ca90:	ldrb	r1, [r1, #24]
   1ca94:	cmp	r1, #4
   1ca98:	beq	1c9b4 <__assert_fail@plt+0xb244>
   1ca9c:	b	1cab4 <__assert_fail@plt+0xb344>
   1caa0:	mov	r2, #2
   1caa4:	str	r2, [r1]
   1caa8:	stmcs	r0, {r8, r9}
   1caac:	strcc	r9, [r0]
   1cab0:	strcc	r8, [r0, #4]
   1cab4:	mov	r0, r4
   1cab8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1cabc:	mov	r0, #0
   1cac0:	str	r0, [r7]
   1cac4:	str	r0, [r6]
   1cac8:	mov	r4, #12
   1cacc:	b	1cab4 <__assert_fail@plt+0xb344>
   1cad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cad4:	add	fp, sp, #28
   1cad8:	sub	sp, sp, #12
   1cadc:	ldr	r5, [r2, #4]
   1cae0:	ldr	sl, [r1]
   1cae4:	mov	r9, r2
   1cae8:	cmp	r5, #0
   1caec:	ldrbne	r1, [r1, #28]
   1caf0:	andsne	r1, r1, #16
   1caf4:	bne	1cbfc <__assert_fail@plt+0xb48c>
   1caf8:	str	r0, [sp]
   1cafc:	mov	r0, #8
   1cb00:	mov	r8, #0
   1cb04:	add	r3, sp, #4
   1cb08:	mov	r1, #0
   1cb0c:	mov	r2, #0
   1cb10:	str	r0, [sp, #8]
   1cb14:	mov	r0, sl
   1cb18:	str	r8, [sp, #4]
   1cb1c:	bl	1b594 <__assert_fail@plt+0x9e24>
   1cb20:	mov	r7, r0
   1cb24:	mov	r0, #9
   1cb28:	add	r3, sp, #4
   1cb2c:	mov	r1, #0
   1cb30:	mov	r2, #0
   1cb34:	str	r0, [sp, #8]
   1cb38:	mov	r0, sl
   1cb3c:	str	r8, [sp, #4]
   1cb40:	bl	1b594 <__assert_fail@plt+0x9e24>
   1cb44:	mov	r4, r0
   1cb48:	cmp	r5, #0
   1cb4c:	mov	r6, r0
   1cb50:	beq	1cb78 <__assert_fail@plt+0xb408>
   1cb54:	mov	r0, #16
   1cb58:	add	r3, sp, #4
   1cb5c:	mov	r1, r5
   1cb60:	mov	r2, r4
   1cb64:	str	r0, [sp, #8]
   1cb68:	mov	r0, sl
   1cb6c:	str	r8, [sp, #4]
   1cb70:	bl	1b594 <__assert_fail@plt+0x9e24>
   1cb74:	mov	r6, r0
   1cb78:	mov	r0, #16
   1cb7c:	add	r3, sp, #4
   1cb80:	mov	r1, r7
   1cb84:	mov	r2, r6
   1cb88:	str	r0, [sp, #8]
   1cb8c:	mov	r0, sl
   1cb90:	str	r8, [sp, #4]
   1cb94:	bl	1b594 <__assert_fail@plt+0x9e24>
   1cb98:	cmp	r4, #0
   1cb9c:	beq	1cbac <__assert_fail@plt+0xb43c>
   1cba0:	cmp	r7, #0
   1cba4:	cmpne	r6, #0
   1cba8:	bne	1cbc0 <__assert_fail@plt+0xb450>
   1cbac:	ldr	r1, [sp]
   1cbb0:	mov	r0, #12
   1cbb4:	mov	r5, #0
   1cbb8:	str	r0, [r1]
   1cbbc:	b	1cc18 <__assert_fail@plt+0xb4a8>
   1cbc0:	mov	r5, r0
   1cbc4:	cmp	r0, #0
   1cbc8:	beq	1cbac <__assert_fail@plt+0xb43c>
   1cbcc:	ldr	r0, [r9, #20]
   1cbd0:	str	r0, [r4, #20]
   1cbd4:	str	r0, [r7, #20]
   1cbd8:	ldr	r1, [r9, #24]
   1cbdc:	ldr	r0, [r4, #24]
   1cbe0:	lsr	r1, r1, #19
   1cbe4:	bfi	r0, r1, #19, #1
   1cbe8:	str	r0, [r4, #24]
   1cbec:	ldr	r0, [r7, #24]
   1cbf0:	bfi	r0, r1, #19, #1
   1cbf4:	str	r0, [r7, #24]
   1cbf8:	b	1cc18 <__assert_fail@plt+0xb4a8>
   1cbfc:	ldr	r3, [r9, #20]
   1cc00:	cmp	r3, #31
   1cc04:	bgt	1cc18 <__assert_fail@plt+0xb4a8>
   1cc08:	ldr	r1, [sl, #80]	; 0x50
   1cc0c:	mov	r2, #1
   1cc10:	tst	r1, r2, lsl r3
   1cc14:	bne	1caf8 <__assert_fail@plt+0xb388>
   1cc18:	mov	r0, r5
   1cc1c:	sub	sp, fp, #28
   1cc20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cc24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc28:	add	fp, sp, #28
   1cc2c:	sub	sp, sp, #12
   1cc30:	mov	r4, r0
   1cc34:	ldr	r7, [r0, #4]
   1cc38:	ldr	r0, [r0, #8]
   1cc3c:	mov	r5, r2
   1cc40:	mov	r9, r1
   1cc44:	cmp	r0, r7
   1cc48:	bcs	1cd14 <__assert_fail@plt+0xb5a4>
   1cc4c:	ldr	r1, [r4]
   1cc50:	str	r9, [r1, r0, lsl #3]!
   1cc54:	str	r5, [r1, #4]
   1cc58:	ldr	r0, [r4]
   1cc5c:	ldr	r1, [r4, #8]
   1cc60:	add	r0, r0, r1, lsl #3
   1cc64:	ldr	r1, [r0, #4]
   1cc68:	bfc	r1, #8, #10
   1cc6c:	str	r1, [r0, #4]
   1cc70:	uxtb	r1, r5
   1cc74:	cmp	r1, #5
   1cc78:	bne	1cc8c <__assert_fail@plt+0xb51c>
   1cc7c:	ldr	r2, [r4, #92]	; 0x5c
   1cc80:	mov	r0, #1048576	; 0x100000
   1cc84:	cmp	r2, #1
   1cc88:	bgt	1cc9c <__assert_fail@plt+0xb52c>
   1cc8c:	sub	r0, r1, #6
   1cc90:	clz	r0, r0
   1cc94:	lsr	r0, r0, #5
   1cc98:	lsl	r0, r0, #20
   1cc9c:	ldr	r1, [r4]
   1cca0:	ldr	r2, [r4, #8]
   1cca4:	add	r1, r1, r2, lsl #3
   1cca8:	ldr	r2, [r1, #4]
   1ccac:	bic	r2, r2, #1048576	; 0x100000
   1ccb0:	orr	r0, r2, r0
   1ccb4:	mvn	r2, #0
   1ccb8:	str	r0, [r1, #4]
   1ccbc:	ldr	r0, [r4, #8]
   1ccc0:	ldr	r1, [r4, #12]
   1ccc4:	str	r2, [r1, r0, lsl #2]
   1ccc8:	mov	r2, #0
   1cccc:	ldr	r0, [r4, #8]
   1ccd0:	ldr	r1, [r4, #20]
   1ccd4:	add	r0, r0, r0, lsl #1
   1ccd8:	str	r2, [r1, r0, lsl #2]!
   1ccdc:	str	r2, [r1, #4]
   1cce0:	str	r2, [r1, #8]
   1cce4:	ldr	r0, [r4, #8]
   1cce8:	ldr	r1, [r4, #24]
   1ccec:	add	r0, r0, r0, lsl #1
   1ccf0:	str	r2, [r1, r0, lsl #2]!
   1ccf4:	str	r2, [r1, #4]
   1ccf8:	str	r2, [r1, #8]
   1ccfc:	ldr	r6, [r4, #8]
   1cd00:	add	r0, r6, #1
   1cd04:	str	r0, [r4, #8]
   1cd08:	mov	r0, r6
   1cd0c:	sub	sp, fp, #28
   1cd10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd14:	movw	r0, #21845	; 0x5555
   1cd18:	lsl	r1, r7, #1
   1cd1c:	mvn	r6, #0
   1cd20:	movt	r0, #5461	; 0x1555
   1cd24:	cmp	r1, r0
   1cd28:	bhi	1cd08 <__assert_fail@plt+0xb598>
   1cd2c:	ldr	r0, [r4]
   1cd30:	str	r1, [sp, #8]
   1cd34:	lsl	r1, r7, #4
   1cd38:	bl	239c4 <__assert_fail@plt+0x12254>
   1cd3c:	cmp	r0, #0
   1cd40:	beq	1cd08 <__assert_fail@plt+0xb598>
   1cd44:	str	r0, [r4]
   1cd48:	lsl	r8, r7, #3
   1cd4c:	ldr	r0, [r4, #12]
   1cd50:	mov	r1, r8
   1cd54:	bl	239c4 <__assert_fail@plt+0x12254>
   1cd58:	str	r0, [sp, #4]
   1cd5c:	ldr	r0, [r4, #16]
   1cd60:	mov	r1, r8
   1cd64:	bl	239c4 <__assert_fail@plt+0x12254>
   1cd68:	mov	r2, r0
   1cd6c:	add	r1, r7, r7, lsl #1
   1cd70:	ldr	r0, [r4, #20]
   1cd74:	mov	r7, r2
   1cd78:	lsl	r8, r1, #3
   1cd7c:	mov	r1, r8
   1cd80:	bl	239c4 <__assert_fail@plt+0x12254>
   1cd84:	mov	sl, r0
   1cd88:	ldr	r0, [r4, #24]
   1cd8c:	mov	r1, r8
   1cd90:	bl	239c4 <__assert_fail@plt+0x12254>
   1cd94:	mov	r8, r0
   1cd98:	ldr	r0, [sp, #4]
   1cd9c:	cmp	r0, #0
   1cda0:	beq	1cdb0 <__assert_fail@plt+0xb640>
   1cda4:	cmp	r7, #0
   1cda8:	cmpne	sl, #0
   1cdac:	bne	1cdd0 <__assert_fail@plt+0xb660>
   1cdb0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1cdb4:	mov	r0, r7
   1cdb8:	bl	13bd0 <__assert_fail@plt+0x2460>
   1cdbc:	mov	r0, sl
   1cdc0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1cdc4:	mov	r0, r8
   1cdc8:	bl	13bd0 <__assert_fail@plt+0x2460>
   1cdcc:	b	1cd08 <__assert_fail@plt+0xb598>
   1cdd0:	cmp	r8, #0
   1cdd4:	beq	1cdb0 <__assert_fail@plt+0xb640>
   1cdd8:	add	r1, r4, #12
   1cddc:	stm	r1, {r0, r7, sl}
   1cde0:	str	r8, [r4, #24]
   1cde4:	ldr	r0, [sp, #8]
   1cde8:	str	r0, [r4, #4]
   1cdec:	ldr	r0, [r4, #8]
   1cdf0:	b	1cc4c <__assert_fail@plt+0xb4dc>
   1cdf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdf8:	add	fp, sp, #28
   1cdfc:	sub	sp, sp, #44	; 0x2c
   1ce00:	mov	r8, r0
   1ce04:	ldr	r0, [r1, #20]
   1ce08:	add	r4, r2, r2, lsl #1
   1ce0c:	mov	r5, r1
   1ce10:	mov	r1, #0
   1ce14:	mov	r9, r3
   1ce18:	mov	r6, r2
   1ce1c:	add	r0, r0, r4, lsl #2
   1ce20:	ldr	r0, [r0, #4]
   1ce24:	str	r1, [sp, #36]	; 0x24
   1ce28:	add	r0, r0, #1
   1ce2c:	str	r0, [sp, #32]
   1ce30:	lsl	r0, r0, #2
   1ce34:	bl	23994 <__assert_fail@plt+0x12224>
   1ce38:	cmp	r0, #0
   1ce3c:	str	r0, [sp, #40]	; 0x28
   1ce40:	beq	1d008 <__assert_fail@plt+0xb898>
   1ce44:	mov	r1, #1
   1ce48:	str	r6, [r0]
   1ce4c:	str	r1, [sp, #36]	; 0x24
   1ce50:	mvn	r1, #0
   1ce54:	ldr	r0, [r5, #24]
   1ce58:	add	r0, r0, r4, lsl #2
   1ce5c:	str	r1, [r0, #4]
   1ce60:	ldr	r2, [r5]
   1ce64:	add	r0, r2, r6, lsl #3
   1ce68:	ldr	r0, [r0, #4]
   1ce6c:	ubfx	r1, r0, #8, #10
   1ce70:	cmp	r1, #0
   1ce74:	beq	1ced0 <__assert_fail@plt+0xb760>
   1ce78:	ldr	r3, [r5, #20]
   1ce7c:	add	r3, r3, r4, lsl #2
   1ce80:	ldr	r7, [r3, #4]
   1ce84:	cmp	r7, #0
   1ce88:	beq	1ced0 <__assert_fail@plt+0xb760>
   1ce8c:	ldr	r3, [r3, #8]
   1ce90:	ldr	r3, [r3]
   1ce94:	add	r2, r2, r3, lsl #3
   1ce98:	ldrb	r2, [r2, #6]
   1ce9c:	tst	r2, #4
   1cea0:	bne	1ced0 <__assert_fail@plt+0xb760>
   1cea4:	str	r1, [sp]
   1cea8:	mov	r0, r5
   1ceac:	mov	r1, r6
   1ceb0:	mov	r2, r6
   1ceb4:	mov	r3, r6
   1ceb8:	bl	1d010 <__assert_fail@plt+0xb8a0>
   1cebc:	cmp	r0, #0
   1cec0:	bne	1d000 <__assert_fail@plt+0xb890>
   1cec4:	ldr	r0, [r5]
   1cec8:	add	r0, r0, r6, lsl #3
   1cecc:	ldr	r0, [r0, #4]
   1ced0:	tst	r0, #8
   1ced4:	beq	1cfd4 <__assert_fail@plt+0xb864>
   1ced8:	ldr	r0, [r5, #20]
   1cedc:	add	r1, r0, r4, lsl #2
   1cee0:	ldr	r1, [r1, #4]
   1cee4:	cmp	r1, #1
   1cee8:	blt	1cfd4 <__assert_fail@plt+0xb864>
   1ceec:	str	r8, [sp, #12]
   1cef0:	mov	r8, #0
   1cef4:	add	r7, sp, #16
   1cef8:	add	sl, sp, #32
   1cefc:	mov	r6, #0
   1cf00:	str	r9, [sp, #8]
   1cf04:	add	r0, r0, r4, lsl #2
   1cf08:	ldr	r0, [r0, #8]
   1cf0c:	ldr	r2, [r0, r6, lsl #2]
   1cf10:	ldr	r0, [r5, #24]
   1cf14:	add	r9, r2, r2, lsl #1
   1cf18:	add	r0, r0, r9, lsl #2
   1cf1c:	ldr	r1, [r0, #4]
   1cf20:	cmn	r1, #1
   1cf24:	beq	1cf8c <__assert_fail@plt+0xb81c>
   1cf28:	cmp	r1, #0
   1cf2c:	bne	1cf4c <__assert_fail@plt+0xb7dc>
   1cf30:	mov	r0, r7
   1cf34:	mov	r1, r5
   1cf38:	mov	r3, #0
   1cf3c:	bl	1cdf4 <__assert_fail@plt+0xb684>
   1cf40:	cmp	r0, #0
   1cf44:	beq	1cf5c <__assert_fail@plt+0xb7ec>
   1cf48:	b	1d000 <__assert_fail@plt+0xb890>
   1cf4c:	vldr	d16, [r0]
   1cf50:	ldr	r0, [r0, #8]
   1cf54:	str	r0, [sp, #24]
   1cf58:	vstr	d16, [sp, #16]
   1cf5c:	mov	r0, sl
   1cf60:	mov	r1, r7
   1cf64:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   1cf68:	cmp	r0, #0
   1cf6c:	bne	1d000 <__assert_fail@plt+0xb890>
   1cf70:	ldr	r0, [r5, #24]
   1cf74:	add	r0, r0, r9, lsl #2
   1cf78:	ldr	r0, [r0, #4]
   1cf7c:	cmp	r0, #0
   1cf80:	bne	1cf90 <__assert_fail@plt+0xb820>
   1cf84:	ldr	r0, [sp, #24]
   1cf88:	bl	13bd0 <__assert_fail@plt+0x2460>
   1cf8c:	mov	r8, #1
   1cf90:	ldr	r0, [r5, #20]
   1cf94:	add	r6, r6, #1
   1cf98:	add	r1, r0, r4, lsl #2
   1cf9c:	ldr	r1, [r1, #4]
   1cfa0:	cmp	r6, r1
   1cfa4:	blt	1cf04 <__assert_fail@plt+0xb794>
   1cfa8:	tst	r8, #1
   1cfac:	ldr	r8, [sp, #12]
   1cfb0:	ldr	r0, [sp, #8]
   1cfb4:	beq	1cfd4 <__assert_fail@plt+0xb864>
   1cfb8:	cmp	r0, #0
   1cfbc:	bne	1cfd4 <__assert_fail@plt+0xb864>
   1cfc0:	ldr	r0, [r5, #24]
   1cfc4:	mov	r1, #0
   1cfc8:	add	r0, r0, r4, lsl #2
   1cfcc:	str	r1, [r0, #4]
   1cfd0:	b	1cfec <__assert_fail@plt+0xb87c>
   1cfd4:	ldr	r0, [r5, #24]
   1cfd8:	vldr	d16, [sp, #32]
   1cfdc:	ldr	r1, [sp, #40]	; 0x28
   1cfe0:	add	r0, r0, r4, lsl #2
   1cfe4:	str	r1, [r0, #8]
   1cfe8:	vstr	d16, [r0]
   1cfec:	ldr	r0, [sp, #40]	; 0x28
   1cff0:	vldr	d16, [sp, #32]
   1cff4:	str	r0, [r8, #8]
   1cff8:	mov	r0, #0
   1cffc:	vstr	d16, [r8]
   1d000:	sub	sp, fp, #28
   1d004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d008:	mov	r0, #12
   1d00c:	b	1d000 <__assert_fail@plt+0xb890>
   1d010:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d014:	add	fp, sp, #28
   1d018:	sub	sp, sp, #20
   1d01c:	mov	sl, r0
   1d020:	ldr	r0, [fp, #8]
   1d024:	mov	r8, r2
   1d028:	mov	r5, r1
   1d02c:	str	r3, [sp, #8]
   1d030:	str	r0, [sp, #16]
   1d034:	ldr	r2, [sl]
   1d038:	add	r1, r2, r5, lsl #3
   1d03c:	ldrb	r0, [r1, #4]!
   1d040:	cmp	r0, #4
   1d044:	bne	1d0b4 <__assert_fail@plt+0xb944>
   1d048:	ldr	r0, [sl, #12]
   1d04c:	ldr	r1, [sl, #20]
   1d050:	add	r6, r8, r8, lsl #1
   1d054:	ldr	r2, [sp, #16]
   1d058:	ldr	r7, [r0, r5, lsl #2]
   1d05c:	add	r0, r1, r6, lsl #2
   1d060:	mov	r1, #0
   1d064:	str	r1, [r0, #4]
   1d068:	mov	r0, sl
   1d06c:	mov	r1, r7
   1d070:	bl	1d454 <__assert_fail@plt+0xbce4>
   1d074:	mov	r9, #12
   1d078:	cmn	r0, #1
   1d07c:	beq	1d29c <__assert_fail@plt+0xbb2c>
   1d080:	mov	r4, r0
   1d084:	ldr	r0, [sl, #12]
   1d088:	ldr	r1, [r0, r5, lsl #2]
   1d08c:	str	r1, [r0, r8, lsl #2]
   1d090:	mov	r1, r4
   1d094:	ldr	r0, [sl, #20]
   1d098:	add	r0, r0, r6, lsl #2
   1d09c:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1d0a0:	cmp	r0, #0
   1d0a4:	mov	r5, r7
   1d0a8:	mov	r8, r4
   1d0ac:	bne	1d034 <__assert_fail@plt+0xb8c4>
   1d0b0:	b	1d29c <__assert_fail@plt+0xbb2c>
   1d0b4:	ldr	r0, [sl, #20]
   1d0b8:	add	ip, r5, r5, lsl #1
   1d0bc:	add	r7, r0, ip, lsl #2
   1d0c0:	ldr	r3, [r7, #4]
   1d0c4:	cmp	r3, #0
   1d0c8:	beq	1d284 <__assert_fail@plt+0xbb14>
   1d0cc:	ldr	r7, [r7, #8]
   1d0d0:	add	r6, r8, r8, lsl #1
   1d0d4:	cmp	r3, #1
   1d0d8:	add	r0, r0, r6, lsl #2
   1d0dc:	str	r6, [sp, #12]
   1d0e0:	mov	r6, #0
   1d0e4:	ldr	r7, [r7]
   1d0e8:	str	r6, [r0, #4]
   1d0ec:	beq	1d21c <__assert_fail@plt+0xbaac>
   1d0f0:	ldr	r1, [sl, #8]
   1d0f4:	ldr	r4, [sp, #16]
   1d0f8:	sub	r3, r1, #1
   1d0fc:	cmp	r3, #1
   1d100:	blt	1d150 <__assert_fail@plt+0xb9e0>
   1d104:	add	r3, r2, r3, lsl #3
   1d108:	ldr	r6, [r3, #4]
   1d10c:	ands	r3, r6, #262144	; 0x40000
   1d110:	beq	1d150 <__assert_fail@plt+0xb9e0>
   1d114:	ldr	r3, [sl, #16]
   1d118:	sub	r2, r2, #12
   1d11c:	sub	r3, r3, #4
   1d120:	ldr	r5, [r3, r1, lsl #2]
   1d124:	cmp	r5, r7
   1d128:	ubfxeq	r6, r6, #8, #10
   1d12c:	cmpeq	r6, r4
   1d130:	beq	1d200 <__assert_fail@plt+0xba90>
   1d134:	sub	r6, r1, #2
   1d138:	cmp	r6, #1
   1d13c:	blt	1d150 <__assert_fail@plt+0xb9e0>
   1d140:	ldr	r6, [r2, r1, lsl #3]
   1d144:	sub	r1, r1, #1
   1d148:	ands	r5, r6, #262144	; 0x40000
   1d14c:	bne	1d120 <__assert_fail@plt+0xb9b0>
   1d150:	mov	r0, sl
   1d154:	mov	r1, r7
   1d158:	mov	r2, r4
   1d15c:	mov	r8, ip
   1d160:	bl	1d454 <__assert_fail@plt+0xbce4>
   1d164:	mov	r9, #12
   1d168:	cmn	r0, #1
   1d16c:	beq	1d29c <__assert_fail@plt+0xbb2c>
   1d170:	mov	r5, r0
   1d174:	ldr	r0, [sl, #20]
   1d178:	ldr	r6, [sp, #12]
   1d17c:	mov	r1, r5
   1d180:	add	r0, r0, r6, lsl #2
   1d184:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1d188:	cmp	r0, #0
   1d18c:	beq	1d29c <__assert_fail@plt+0xbb2c>
   1d190:	ldr	r4, [sp, #16]
   1d194:	ldr	r3, [sp, #8]
   1d198:	mov	r0, sl
   1d19c:	mov	r1, r7
   1d1a0:	mov	r2, r5
   1d1a4:	str	r4, [sp]
   1d1a8:	bl	1d010 <__assert_fail@plt+0xb8a0>
   1d1ac:	cmp	r0, #0
   1d1b0:	bne	1d298 <__assert_fail@plt+0xbb28>
   1d1b4:	ldr	r0, [sl, #20]
   1d1b8:	mov	r2, r4
   1d1bc:	add	r0, r0, r8, lsl #2
   1d1c0:	ldr	r0, [r0, #8]
   1d1c4:	ldr	r5, [r0, #4]
   1d1c8:	mov	r0, sl
   1d1cc:	mov	r1, r5
   1d1d0:	bl	1d454 <__assert_fail@plt+0xbce4>
   1d1d4:	mov	r9, #12
   1d1d8:	cmn	r0, #1
   1d1dc:	beq	1d29c <__assert_fail@plt+0xbb2c>
   1d1e0:	mov	r8, r0
   1d1e4:	ldr	r0, [sl, #20]
   1d1e8:	mov	r1, r8
   1d1ec:	add	r0, r0, r6, lsl #2
   1d1f0:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1d1f4:	cmp	r0, #0
   1d1f8:	bne	1d034 <__assert_fail@plt+0xb8c4>
   1d1fc:	b	1d29c <__assert_fail@plt+0xbb2c>
   1d200:	sub	r1, r1, #1
   1d204:	mov	r8, ip
   1d208:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1d20c:	ldr	r6, [sp, #12]
   1d210:	cmp	r0, #0
   1d214:	bne	1d1b4 <__assert_fail@plt+0xba44>
   1d218:	b	1d2c8 <__assert_fail@plt+0xbb58>
   1d21c:	ldr	r2, [sp, #8]
   1d220:	cmp	r5, r2
   1d224:	bne	1d230 <__assert_fail@plt+0xbac0>
   1d228:	cmp	r8, r5
   1d22c:	bne	1d2a8 <__assert_fail@plt+0xbb38>
   1d230:	ldr	r0, [r1]
   1d234:	mov	r1, r7
   1d238:	ubfx	r0, r0, #8, #10
   1d23c:	ldr	r2, [sp, #16]
   1d240:	orr	r2, r0, r2
   1d244:	mov	r0, sl
   1d248:	str	r2, [sp, #16]
   1d24c:	bl	1d454 <__assert_fail@plt+0xbce4>
   1d250:	mov	r9, #12
   1d254:	cmn	r0, #1
   1d258:	beq	1d29c <__assert_fail@plt+0xbb2c>
   1d25c:	mov	r8, r0
   1d260:	ldr	r0, [sl, #20]
   1d264:	ldr	r1, [sp, #12]
   1d268:	add	r0, r0, r1, lsl #2
   1d26c:	mov	r1, r8
   1d270:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1d274:	cmp	r0, #0
   1d278:	mov	r5, r7
   1d27c:	bne	1d034 <__assert_fail@plt+0xb8c4>
   1d280:	b	1d29c <__assert_fail@plt+0xbb2c>
   1d284:	ldr	r0, [sl, #12]
   1d288:	ldr	r1, [r0, r5, lsl #2]
   1d28c:	str	r1, [r0, r8, lsl #2]
   1d290:	mov	r0, #0
   1d294:	b	1d2a0 <__assert_fail@plt+0xbb30>
   1d298:	mov	r9, r0
   1d29c:	mov	r0, r9
   1d2a0:	sub	sp, fp, #28
   1d2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2a8:	mov	r1, r7
   1d2ac:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1d2b0:	mov	r1, r0
   1d2b4:	mov	r9, #12
   1d2b8:	mov	r0, #0
   1d2bc:	cmp	r1, #0
   1d2c0:	moveq	r0, r9
   1d2c4:	b	1d2a0 <__assert_fail@plt+0xbb30>
   1d2c8:	mov	r9, #12
   1d2cc:	b	1d29c <__assert_fail@plt+0xbb2c>
   1d2d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d2d4:	add	fp, sp, #24
   1d2d8:	mov	r8, #0
   1d2dc:	cmp	r1, #0
   1d2e0:	beq	1d42c <__assert_fail@plt+0xbcbc>
   1d2e4:	mov	r6, r1
   1d2e8:	ldr	r1, [r1, #4]
   1d2ec:	cmp	r1, #0
   1d2f0:	beq	1d42c <__assert_fail@plt+0xbcbc>
   1d2f4:	mov	r9, r0
   1d2f8:	ldr	r2, [r0]
   1d2fc:	ldr	r0, [r0, #4]
   1d300:	add	r3, r0, r1, lsl #1
   1d304:	cmp	r2, r3
   1d308:	bge	1d334 <__assert_fail@plt+0xbbc4>
   1d30c:	ldr	r0, [r9, #8]
   1d310:	add	r7, r2, r1
   1d314:	lsl	r1, r7, #3
   1d318:	bl	239c4 <__assert_fail@plt+0x12254>
   1d31c:	cmp	r0, #0
   1d320:	beq	1d44c <__assert_fail@plt+0xbcdc>
   1d324:	str	r0, [r9, #8]
   1d328:	lsl	r0, r7, #1
   1d32c:	str	r0, [r9]
   1d330:	ldr	r0, [r9, #4]
   1d334:	cmp	r0, #0
   1d338:	beq	1d434 <__assert_fail@plt+0xbcc4>
   1d33c:	ldr	r2, [r6, #4]
   1d340:	sub	r1, r0, #1
   1d344:	add	r7, r0, r2, lsl #1
   1d348:	sub	r0, r2, #1
   1d34c:	orrs	r2, r0, r1
   1d350:	bmi	1d394 <__assert_fail@plt+0xbc24>
   1d354:	ldr	r2, [r6, #8]
   1d358:	ldr	r3, [r9, #8]
   1d35c:	ldr	r4, [r2, r0, lsl #2]
   1d360:	ldr	r5, [r3, r1, lsl #2]
   1d364:	cmp	r5, r4
   1d368:	bne	1d378 <__assert_fail@plt+0xbc08>
   1d36c:	sub	r1, r1, #1
   1d370:	sub	r0, r0, #1
   1d374:	b	1d388 <__assert_fail@plt+0xbc18>
   1d378:	sublt	r7, r7, #1
   1d37c:	subge	r1, r1, #1
   1d380:	sublt	r0, r0, #1
   1d384:	strlt	r4, [r3, r7, lsl #2]
   1d388:	orr	r5, r0, r1
   1d38c:	cmn	r5, #1
   1d390:	bgt	1d35c <__assert_fail@plt+0xbbec>
   1d394:	cmp	r0, #0
   1d398:	bmi	1d3b8 <__assert_fail@plt+0xbc48>
   1d39c:	add	r2, r0, #1
   1d3a0:	ldr	r0, [r9, #8]
   1d3a4:	ldr	r1, [r6, #8]
   1d3a8:	sub	r7, r7, r2
   1d3ac:	lsl	r2, r2, #2
   1d3b0:	add	r0, r0, r7, lsl #2
   1d3b4:	bl	11488 <memcpy@plt>
   1d3b8:	ldr	r0, [r9, #4]
   1d3bc:	ldr	r2, [r6, #4]
   1d3c0:	sub	r1, r0, #1
   1d3c4:	add	r3, r1, r2, lsl #1
   1d3c8:	sub	r2, r3, r7
   1d3cc:	adds	r2, r2, #1
   1d3d0:	bcs	1d42c <__assert_fail@plt+0xbcbc>
   1d3d4:	add	r0, r2, r0
   1d3d8:	str	r0, [r9, #4]
   1d3dc:	ldr	r0, [r9, #8]
   1d3e0:	ldr	r6, [r0, r1, lsl #2]
   1d3e4:	ldr	r5, [r0, r3, lsl #2]
   1d3e8:	cmp	r5, r6
   1d3ec:	ble	1d408 <__assert_fail@plt+0xbc98>
   1d3f0:	add	r6, r2, r1
   1d3f4:	subs	r2, r2, #1
   1d3f8:	sub	r3, r3, #1
   1d3fc:	str	r5, [r0, r6, lsl #2]
   1d400:	bne	1d3e0 <__assert_fail@plt+0xbc70>
   1d404:	b	1d42c <__assert_fail@plt+0xbcbc>
   1d408:	add	r5, r2, r1
   1d40c:	cmp	r1, #0
   1d410:	str	r6, [r0, r5, lsl #2]
   1d414:	sub	r6, r1, #1
   1d418:	mov	r1, r6
   1d41c:	bgt	1d3e0 <__assert_fail@plt+0xbc70>
   1d420:	add	r1, r0, r7, lsl #2
   1d424:	lsl	r2, r2, #2
   1d428:	bl	11488 <memcpy@plt>
   1d42c:	mov	r0, r8
   1d430:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d434:	ldr	r0, [r6, #4]
   1d438:	str	r0, [r9, #4]
   1d43c:	ldr	r0, [r9, #8]
   1d440:	ldr	r2, [r6, #4]
   1d444:	ldr	r1, [r6, #8]
   1d448:	b	1d424 <__assert_fail@plt+0xbcb4>
   1d44c:	mov	r8, #12
   1d450:	b	1d42c <__assert_fail@plt+0xbcbc>
   1d454:	push	{r4, r5, r6, sl, fp, lr}
   1d458:	add	fp, sp, #16
   1d45c:	mov	r5, r0
   1d460:	ldr	r0, [r0]
   1d464:	mov	r4, r1
   1d468:	mov	r6, r2
   1d46c:	ldr	r1, [r0, r1, lsl #3]!
   1d470:	ldr	r2, [r0, #4]
   1d474:	mov	r0, r5
   1d478:	bl	1cc24 <__assert_fail@plt+0xb4b4>
   1d47c:	cmn	r0, #1
   1d480:	ldrne	r1, [r5]
   1d484:	movwne	r3, #65280	; 0xff00
   1d488:	movtne	r3, #3
   1d48c:	addne	r1, r1, r0, lsl #3
   1d490:	ldrne	r2, [r1, #4]
   1d494:	bfine	r2, r6, #8, #10
   1d498:	strne	r2, [r1, #4]
   1d49c:	ldrne	r1, [r5]
   1d4a0:	addne	r2, r1, r4, lsl #3
   1d4a4:	addne	r1, r1, r0, lsl #3
   1d4a8:	ldrne	r2, [r2, #4]
   1d4ac:	andne	r2, r2, r3
   1d4b0:	ldrne	r3, [r1, #4]
   1d4b4:	orrne	r2, r2, r3
   1d4b8:	strne	r2, [r1, #4]
   1d4bc:	ldrne	r1, [r5]
   1d4c0:	addne	r1, r1, r0, lsl #3
   1d4c4:	ldrne	r2, [r1, #4]
   1d4c8:	orrne	r2, r2, #262144	; 0x40000
   1d4cc:	strne	r2, [r1, #4]
   1d4d0:	ldrne	r1, [r5, #16]
   1d4d4:	strne	r4, [r1, r0, lsl #2]
   1d4d8:	pop	{r4, r5, r6, sl, fp, pc}
   1d4dc:	push	{r4, r5, r6, sl, fp, lr}
   1d4e0:	add	fp, sp, #16
   1d4e4:	ldr	r2, [r0]
   1d4e8:	mov	r5, r1
   1d4ec:	mov	r4, r0
   1d4f0:	cmp	r2, #0
   1d4f4:	beq	1d520 <__assert_fail@plt+0xbdb0>
   1d4f8:	ldr	r1, [r4, #4]
   1d4fc:	cmp	r1, #0
   1d500:	bne	1d54c <__assert_fail@plt+0xbddc>
   1d504:	ldr	r0, [r4, #8]
   1d508:	str	r5, [r0]
   1d50c:	ldr	r0, [r4, #4]
   1d510:	mov	r6, #1
   1d514:	add	r0, r0, #1
   1d518:	str	r0, [r4, #4]
   1d51c:	b	1d544 <__assert_fail@plt+0xbdd4>
   1d520:	mov	r6, #1
   1d524:	mov	r0, #4
   1d528:	str	r6, [r4]
   1d52c:	str	r6, [r4, #4]
   1d530:	bl	23994 <__assert_fail@plt+0x12224>
   1d534:	cmp	r0, #0
   1d538:	str	r0, [r4, #8]
   1d53c:	beq	1d57c <__assert_fail@plt+0xbe0c>
   1d540:	str	r5, [r0]
   1d544:	mov	r0, r6
   1d548:	pop	{r4, r5, r6, sl, fp, pc}
   1d54c:	cmp	r2, r1
   1d550:	bne	1d58c <__assert_fail@plt+0xbe1c>
   1d554:	lsl	r0, r2, #1
   1d558:	lsl	r1, r2, #3
   1d55c:	str	r0, [r4]
   1d560:	ldr	r0, [r4, #8]
   1d564:	bl	239c4 <__assert_fail@plt+0x12254>
   1d568:	cmp	r0, #0
   1d56c:	beq	1d604 <__assert_fail@plt+0xbe94>
   1d570:	str	r0, [r4, #8]
   1d574:	ldr	r1, [r4, #4]
   1d578:	b	1d590 <__assert_fail@plt+0xbe20>
   1d57c:	mov	r6, #0
   1d580:	str	r6, [r4]
   1d584:	str	r6, [r4, #4]
   1d588:	b	1d544 <__assert_fail@plt+0xbdd4>
   1d58c:	ldr	r0, [r4, #8]
   1d590:	ldr	r2, [r0]
   1d594:	cmp	r2, r5
   1d598:	ble	1d5cc <__assert_fail@plt+0xbe5c>
   1d59c:	cmp	r1, #1
   1d5a0:	blt	1d5fc <__assert_fail@plt+0xbe8c>
   1d5a4:	add	r3, r0, r1, lsl #2
   1d5a8:	mov	r2, r3
   1d5ac:	ldr	r6, [r2, #-4]!
   1d5b0:	sub	r1, r1, #1
   1d5b4:	cmp	r1, #0
   1d5b8:	str	r6, [r3]
   1d5bc:	mov	r3, r2
   1d5c0:	bgt	1d5ac <__assert_fail@plt+0xbe3c>
   1d5c4:	mov	r1, #0
   1d5c8:	b	1d5fc <__assert_fail@plt+0xbe8c>
   1d5cc:	add	r2, r0, r1, lsl #2
   1d5d0:	ldr	r3, [r2, #-4]
   1d5d4:	cmp	r3, r5
   1d5d8:	ble	1d5fc <__assert_fail@plt+0xbe8c>
   1d5dc:	sub	r1, r1, #2
   1d5e0:	str	r3, [r2]
   1d5e4:	sub	r1, r1, #1
   1d5e8:	ldr	r3, [r2, #-8]
   1d5ec:	sub	r2, r2, #4
   1d5f0:	cmp	r3, r5
   1d5f4:	bgt	1d5e0 <__assert_fail@plt+0xbe70>
   1d5f8:	add	r1, r1, #2
   1d5fc:	str	r5, [r0, r1, lsl #2]
   1d600:	b	1d50c <__assert_fail@plt+0xbd9c>
   1d604:	mov	r6, #0
   1d608:	b	1d544 <__assert_fail@plt+0xbdd4>
   1d60c:	push	{r4, r5, fp, lr}
   1d610:	add	fp, sp, #8
   1d614:	mov	r5, r0
   1d618:	mov	r4, r1
   1d61c:	ldr	r0, [r0]
   1d620:	ldr	r1, [r5, #4]
   1d624:	cmp	r0, r1
   1d628:	bne	1d658 <__assert_fail@plt+0xbee8>
   1d62c:	mov	r1, #2
   1d630:	add	r0, r1, r0, lsl #1
   1d634:	str	r0, [r5]
   1d638:	lsl	r1, r0, #2
   1d63c:	ldr	r0, [r5, #8]
   1d640:	bl	239c4 <__assert_fail@plt+0x12254>
   1d644:	cmp	r0, #0
   1d648:	beq	1d670 <__assert_fail@plt+0xbf00>
   1d64c:	str	r0, [r5, #8]
   1d650:	ldr	r1, [r5, #4]
   1d654:	b	1d65c <__assert_fail@plt+0xbeec>
   1d658:	ldr	r0, [r5, #8]
   1d65c:	add	r2, r1, #1
   1d660:	str	r2, [r5, #4]
   1d664:	str	r4, [r0, r1, lsl #2]
   1d668:	mov	r0, #1
   1d66c:	pop	{r4, r5, fp, pc}
   1d670:	mov	r0, #0
   1d674:	pop	{r4, r5, fp, pc}
   1d678:	push	{r4, r5, fp, lr}
   1d67c:	add	fp, sp, #8
   1d680:	mov	r4, r0
   1d684:	ldr	r0, [r1, #4]
   1d688:	mov	r5, r1
   1d68c:	str	r0, [r4, #4]
   1d690:	ldr	r1, [r1, #4]
   1d694:	cmp	r1, #1
   1d698:	blt	1d6cc <__assert_fail@plt+0xbf5c>
   1d69c:	str	r0, [r4]
   1d6a0:	lsl	r0, r0, #2
   1d6a4:	bl	23994 <__assert_fail@plt+0x12224>
   1d6a8:	cmp	r0, #0
   1d6ac:	str	r0, [r4, #8]
   1d6b0:	beq	1d6e0 <__assert_fail@plt+0xbf70>
   1d6b4:	ldr	r2, [r5, #4]
   1d6b8:	ldr	r1, [r5, #8]
   1d6bc:	lsl	r2, r2, #2
   1d6c0:	bl	11488 <memcpy@plt>
   1d6c4:	mov	r0, #0
   1d6c8:	pop	{r4, r5, fp, pc}
   1d6cc:	mov	r0, #0
   1d6d0:	str	r0, [r4]
   1d6d4:	str	r0, [r4, #4]
   1d6d8:	str	r0, [r4, #8]
   1d6dc:	pop	{r4, r5, fp, pc}
   1d6e0:	mov	r0, #0
   1d6e4:	str	r0, [r4]
   1d6e8:	str	r0, [r4, #4]
   1d6ec:	mov	r0, #12
   1d6f0:	pop	{r4, r5, fp, pc}
   1d6f4:	push	{r4, r5, r6, sl, fp, lr}
   1d6f8:	add	fp, sp, #16
   1d6fc:	ldr	r2, [r0, #4]
   1d700:	cmp	r2, #1
   1d704:	blt	1d754 <__assert_fail@plt+0xbfe4>
   1d708:	ldr	ip, [r0, #8]
   1d70c:	subs	r2, r2, #1
   1d710:	mov	r0, #0
   1d714:	mov	r3, #0
   1d718:	beq	1d744 <__assert_fail@plt+0xbfd4>
   1d71c:	mov	r3, #0
   1d720:	mov	lr, #1
   1d724:	add	r4, r2, r3
   1d728:	lsr	r5, r4, #1
   1d72c:	ldr	r6, [ip, r5, lsl #2]
   1d730:	cmp	r6, r1
   1d734:	addlt	r3, lr, r4, lsr #1
   1d738:	movge	r2, r5
   1d73c:	cmp	r3, r2
   1d740:	bcc	1d724 <__assert_fail@plt+0xbfb4>
   1d744:	ldr	r2, [ip, r3, lsl #2]
   1d748:	cmp	r2, r1
   1d74c:	addeq	r0, r3, #1
   1d750:	pop	{r4, r5, r6, sl, fp, pc}
   1d754:	mov	r0, #0
   1d758:	pop	{r4, r5, r6, sl, fp, pc}
   1d75c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d760:	add	fp, sp, #28
   1d764:	sub	sp, sp, #20
   1d768:	ldr	lr, [r2, #4]
   1d76c:	cmp	lr, #0
   1d770:	beq	1da74 <__assert_fail@plt+0xc304>
   1d774:	mov	r8, r3
   1d778:	mov	sl, r2
   1d77c:	add	r7, lr, r3
   1d780:	cmp	lr, #1
   1d784:	str	r0, [sp, #4]
   1d788:	blt	1d7a4 <__assert_fail@plt+0xc034>
   1d78c:	ldr	r3, [sl, #8]
   1d790:	mov	r2, lr
   1d794:	ldr	r0, [r3], #4
   1d798:	subs	r2, r2, #1
   1d79c:	add	r7, r0, r7
   1d7a0:	bne	1d794 <__assert_fail@plt+0xc024>
   1d7a4:	ldr	r0, [r1, #32]
   1d7a8:	str	r1, [sp, #12]
   1d7ac:	ldr	r1, [r1, #68]	; 0x44
   1d7b0:	and	r1, r1, r7
   1d7b4:	add	r2, r1, r1, lsl #1
   1d7b8:	ldr	r1, [r0, r2, lsl #2]
   1d7bc:	cmp	r1, #1
   1d7c0:	blt	1d850 <__assert_fail@plt+0xc0e0>
   1d7c4:	add	r0, r0, r2, lsl #2
   1d7c8:	sub	ip, lr, #1
   1d7cc:	mov	r3, #0
   1d7d0:	ldr	r9, [r0, #8]
   1d7d4:	ldr	r4, [r9, r3, lsl #2]
   1d7d8:	ldr	r0, [r4]
   1d7dc:	cmp	r0, r7
   1d7e0:	bne	1d804 <__assert_fail@plt+0xc094>
   1d7e4:	ldrb	r0, [r4, #52]	; 0x34
   1d7e8:	and	r0, r0, #15
   1d7ec:	cmp	r0, r8
   1d7f0:	bne	1d804 <__assert_fail@plt+0xc094>
   1d7f4:	cmp	sl, #0
   1d7f8:	ldrne	r5, [r4, #40]	; 0x28
   1d7fc:	cmpne	r5, #0
   1d800:	bne	1d814 <__assert_fail@plt+0xc0a4>
   1d804:	add	r3, r3, #1
   1d808:	cmp	r3, r1
   1d80c:	blt	1d7d4 <__assert_fail@plt+0xc064>
   1d810:	b	1d850 <__assert_fail@plt+0xc0e0>
   1d814:	ldr	r0, [r5, #4]
   1d818:	cmp	r0, lr
   1d81c:	bne	1d804 <__assert_fail@plt+0xc094>
   1d820:	mov	r0, ip
   1d824:	add	r6, r0, #1
   1d828:	cmp	r6, #1
   1d82c:	blt	1da7c <__assert_fail@plt+0xc30c>
   1d830:	ldr	r6, [sl, #8]
   1d834:	ldr	r2, [r5, #8]
   1d838:	ldr	r6, [r6, r0, lsl #2]
   1d83c:	ldr	r2, [r2, r0, lsl #2]
   1d840:	sub	r0, r0, #1
   1d844:	cmp	r2, r6
   1d848:	beq	1d824 <__assert_fail@plt+0xc0b4>
   1d84c:	b	1d804 <__assert_fail@plt+0xc094>
   1d850:	mov	r0, #56	; 0x38
   1d854:	mov	r1, #1
   1d858:	bl	23940 <__assert_fail@plt+0x121d0>
   1d85c:	cmp	r0, #0
   1d860:	beq	1da60 <__assert_fail@plt+0xc2f0>
   1d864:	add	r5, r0, #4
   1d868:	mov	r4, r0
   1d86c:	mov	r1, sl
   1d870:	mov	r0, r5
   1d874:	bl	1d678 <__assert_fail@plt+0xbf08>
   1d878:	cmp	r0, #0
   1d87c:	bne	1da88 <__assert_fail@plt+0xc318>
   1d880:	str	r5, [r4, #40]	; 0x28
   1d884:	and	r0, r8, #15
   1d888:	ldr	r6, [sp, #12]
   1d88c:	ldrb	r1, [r4, #52]	; 0x34
   1d890:	and	r1, r1, #240	; 0xf0
   1d894:	orr	r0, r1, r0
   1d898:	strb	r0, [r4, #52]	; 0x34
   1d89c:	ldr	r0, [sl, #4]
   1d8a0:	cmp	r0, #1
   1d8a4:	blt	1da40 <__assert_fail@plt+0xc2d0>
   1d8a8:	movw	r9, #65280	; 0xff00
   1d8ac:	and	r0, r8, #4
   1d8b0:	mov	ip, r5
   1d8b4:	and	lr, r8, #1
   1d8b8:	movt	r9, #3
   1d8bc:	str	r0, [sp]
   1d8c0:	and	r0, r8, #2
   1d8c4:	mov	r8, #0
   1d8c8:	str	r0, [sp, #8]
   1d8cc:	mov	r0, #0
   1d8d0:	add	r3, r9, #255	; 0xff
   1d8d4:	str	r3, [sp, #16]
   1d8d8:	ldr	r1, [sl, #8]
   1d8dc:	ldr	r2, [r6]
   1d8e0:	ldr	r1, [r1, r8, lsl #2]
   1d8e4:	add	r1, r2, r1, lsl #3
   1d8e8:	ldr	r5, [r1, #4]
   1d8ec:	and	r1, r5, r3
   1d8f0:	cmp	r1, #1
   1d8f4:	beq	1da08 <__assert_fail@plt+0xc298>
   1d8f8:	ldrb	r3, [r4, #52]	; 0x34
   1d8fc:	mov	r2, #32
   1d900:	and	r1, r5, r9
   1d904:	and	r2, r2, r5, lsr #15
   1d908:	orr	r2, r3, r2
   1d90c:	uxtb	r3, r5
   1d910:	strb	r2, [r4, #52]	; 0x34
   1d914:	cmp	r3, #2
   1d918:	beq	1d92c <__assert_fail@plt+0xc1bc>
   1d91c:	cmp	r3, #4
   1d920:	bne	1d938 <__assert_fail@plt+0xc1c8>
   1d924:	mov	r3, #64	; 0x40
   1d928:	b	1d930 <__assert_fail@plt+0xc1c0>
   1d92c:	mov	r3, #16
   1d930:	orr	r2, r2, r3
   1d934:	strb	r2, [r4, #52]	; 0x34
   1d938:	cmp	r1, #0
   1d93c:	beq	1da04 <__assert_fail@plt+0xc294>
   1d940:	ldr	r1, [r4, #40]	; 0x28
   1d944:	cmp	r1, ip
   1d948:	bne	1d99c <__assert_fail@plt+0xc22c>
   1d94c:	mov	r0, #12
   1d950:	mov	r6, lr
   1d954:	mov	r9, ip
   1d958:	bl	23994 <__assert_fail@plt+0x12224>
   1d95c:	cmp	r0, #0
   1d960:	beq	1da58 <__assert_fail@plt+0xc2e8>
   1d964:	mov	r1, sl
   1d968:	str	r0, [r4, #40]	; 0x28
   1d96c:	bl	1d678 <__assert_fail@plt+0xbf08>
   1d970:	cmp	r0, #0
   1d974:	bne	1da58 <__assert_fail@plt+0xc2e8>
   1d978:	ldrb	r0, [r4, #52]	; 0x34
   1d97c:	mov	lr, r6
   1d980:	ldr	r6, [sp, #12]
   1d984:	mov	ip, r9
   1d988:	movw	r9, #65280	; 0xff00
   1d98c:	movt	r9, #3
   1d990:	orr	r0, r0, #128	; 0x80
   1d994:	strb	r0, [r4, #52]	; 0x34
   1d998:	mov	r0, #0
   1d99c:	cmp	lr, #0
   1d9a0:	bne	1d9ac <__assert_fail@plt+0xc23c>
   1d9a4:	ands	r1, r5, #256	; 0x100
   1d9a8:	bne	1d9e0 <__assert_fail@plt+0xc270>
   1d9ac:	cmp	lr, #0
   1d9b0:	andsne	r1, r5, #512	; 0x200
   1d9b4:	bne	1d9e0 <__assert_fail@plt+0xc270>
   1d9b8:	ldr	r1, [sp, #8]
   1d9bc:	cmp	r1, #0
   1d9c0:	bne	1d9cc <__assert_fail@plt+0xc25c>
   1d9c4:	ands	r1, r5, #4096	; 0x1000
   1d9c8:	bne	1d9e0 <__assert_fail@plt+0xc270>
   1d9cc:	ldr	r1, [sp]
   1d9d0:	cmp	r1, #0
   1d9d4:	bne	1da04 <__assert_fail@plt+0xc294>
   1d9d8:	ands	r1, r5, #16384	; 0x4000
   1d9dc:	beq	1da04 <__assert_fail@plt+0xc294>
   1d9e0:	subs	r1, r8, r0
   1d9e4:	bmi	1da00 <__assert_fail@plt+0xc290>
   1d9e8:	ldr	r2, [r4, #8]
   1d9ec:	cmp	r2, r1
   1d9f0:	subgt	r2, r2, #1
   1d9f4:	strgt	r2, [r4, #8]
   1d9f8:	cmpgt	r2, r1
   1d9fc:	bgt	1da1c <__assert_fail@plt+0xc2ac>
   1da00:	add	r0, r0, #1
   1da04:	ldr	r3, [sp, #16]
   1da08:	ldr	r1, [sl, #4]
   1da0c:	add	r8, r8, #1
   1da10:	cmp	r8, r1
   1da14:	blt	1d8d8 <__assert_fail@plt+0xc168>
   1da18:	b	1da40 <__assert_fail@plt+0xc2d0>
   1da1c:	ldr	r2, [r4, #12]
   1da20:	add	r3, r2, r1, lsl #2
   1da24:	ldr	r3, [r3, #4]
   1da28:	str	r3, [r2, r1, lsl #2]
   1da2c:	add	r1, r1, #1
   1da30:	ldr	r3, [r4, #8]
   1da34:	cmp	r1, r3
   1da38:	blt	1da20 <__assert_fail@plt+0xc2b0>
   1da3c:	b	1da00 <__assert_fail@plt+0xc290>
   1da40:	mov	r0, r6
   1da44:	mov	r1, r4
   1da48:	mov	r2, r7
   1da4c:	bl	1da94 <__assert_fail@plt+0xc324>
   1da50:	cmp	r0, #0
   1da54:	beq	1da7c <__assert_fail@plt+0xc30c>
   1da58:	mov	r0, r4
   1da5c:	bl	18b8c <__assert_fail@plt+0x741c>
   1da60:	ldr	r1, [sp, #4]
   1da64:	mov	r0, #12
   1da68:	mov	r4, #0
   1da6c:	str	r0, [r1]
   1da70:	b	1da7c <__assert_fail@plt+0xc30c>
   1da74:	mov	r4, #0
   1da78:	str	r4, [r0]
   1da7c:	mov	r0, r4
   1da80:	sub	sp, fp, #28
   1da84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da88:	mov	r0, r4
   1da8c:	bl	13bd0 <__assert_fail@plt+0x2460>
   1da90:	b	1da60 <__assert_fail@plt+0xc2f0>
   1da94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1da98:	add	fp, sp, #24
   1da9c:	mov	r7, r0
   1daa0:	mov	r0, #0
   1daa4:	str	r2, [r1]
   1daa8:	mov	r5, r1
   1daac:	mov	r9, r2
   1dab0:	mov	r4, r1
   1dab4:	str	r0, [r1, #20]
   1dab8:	ldr	r0, [r1, #8]
   1dabc:	str	r0, [r5, #16]!
   1dac0:	lsl	r0, r0, #2
   1dac4:	bl	23994 <__assert_fail@plt+0x12224>
   1dac8:	mov	r8, #12
   1dacc:	cmp	r0, #0
   1dad0:	str	r0, [r4, #24]
   1dad4:	beq	1db64 <__assert_fail@plt+0xc3f4>
   1dad8:	ldr	r0, [r4, #8]
   1dadc:	cmp	r0, #1
   1dae0:	blt	1db24 <__assert_fail@plt+0xc3b4>
   1dae4:	mov	r6, #0
   1dae8:	ldr	r1, [r4, #12]
   1daec:	ldr	r2, [r7]
   1daf0:	ldr	r1, [r1, r6, lsl #2]
   1daf4:	add	r2, r2, r1, lsl #3
   1daf8:	ldrb	r2, [r2, #4]
   1dafc:	tst	r2, #8
   1db00:	bne	1db18 <__assert_fail@plt+0xc3a8>
   1db04:	mov	r0, r5
   1db08:	bl	1d60c <__assert_fail@plt+0xbe9c>
   1db0c:	cmp	r0, #0
   1db10:	beq	1db64 <__assert_fail@plt+0xc3f4>
   1db14:	ldr	r0, [r4, #8]
   1db18:	add	r6, r6, #1
   1db1c:	cmp	r6, r0
   1db20:	blt	1dae8 <__assert_fail@plt+0xc378>
   1db24:	ldr	r1, [r7, #68]	; 0x44
   1db28:	ldr	r0, [r7, #32]
   1db2c:	and	r1, r1, r9
   1db30:	mov	r5, r0
   1db34:	add	r2, r1, r1, lsl #1
   1db38:	ldr	r1, [r5, r2, lsl #2]!
   1db3c:	mov	r6, r5
   1db40:	ldr	r3, [r6, #4]!
   1db44:	cmp	r3, r1
   1db48:	ble	1db6c <__assert_fail@plt+0xc3fc>
   1db4c:	add	r0, r0, r2, lsl #2
   1db50:	ldr	r0, [r0, #8]
   1db54:	add	r2, r1, #1
   1db58:	mov	r8, #0
   1db5c:	str	r2, [r5]
   1db60:	str	r4, [r0, r1, lsl #2]
   1db64:	mov	r0, r8
   1db68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1db6c:	add	r7, r0, r2, lsl #2
   1db70:	mov	r2, #2
   1db74:	add	r9, r2, r1, lsl #1
   1db78:	ldr	r0, [r7, #8]!
   1db7c:	lsl	r1, r9, #2
   1db80:	bl	239c4 <__assert_fail@plt+0x12254>
   1db84:	cmp	r0, #0
   1db88:	beq	1db64 <__assert_fail@plt+0xc3f4>
   1db8c:	str	r0, [r7]
   1db90:	str	r9, [r6]
   1db94:	ldr	r1, [r5]
   1db98:	b	1db54 <__assert_fail@plt+0xc3e4>
   1db9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dba0:	add	fp, sp, #28
   1dba4:	sub	sp, sp, #36	; 0x24
   1dba8:	mov	r4, r0
   1dbac:	ldr	r0, [r0, #24]
   1dbb0:	mov	r6, r2
   1dbb4:	mov	r9, r1
   1dbb8:	cmp	r0, r1
   1dbbc:	ble	1dd24 <__assert_fail@plt+0xc5b4>
   1dbc0:	ldr	r0, [r4, #80]	; 0x50
   1dbc4:	mov	r1, #4
   1dbc8:	cmp	r0, #2
   1dbcc:	movge	r0, #0
   1dbd0:	strge	r0, [r4, #16]
   1dbd4:	strge	r0, [r4, #20]
   1dbd8:	mov	r0, #0
   1dbdc:	tst	r6, #1
   1dbe0:	strb	r0, [r4, #76]	; 0x4c
   1dbe4:	str	r0, [r4, #24]
   1dbe8:	str	r0, [r4, #28]
   1dbec:	str	r0, [r4, #32]
   1dbf0:	movweq	r1, #6
   1dbf4:	ldr	r2, [r4, #44]	; 0x2c
   1dbf8:	ldr	r3, [r4, #52]	; 0x34
   1dbfc:	str	r2, [r4, #48]	; 0x30
   1dc00:	str	r3, [r4, #56]	; 0x38
   1dc04:	str	r1, [r4, #60]	; 0x3c
   1dc08:	ldrb	r1, [r4, #75]	; 0x4b
   1dc0c:	cmp	r1, #0
   1dc10:	bne	1dc1c <__assert_fail@plt+0xc4ac>
   1dc14:	ldr	r1, [r4]
   1dc18:	str	r1, [r4, #4]
   1dc1c:	mov	r5, r9
   1dc20:	cmp	r5, #0
   1dc24:	beq	1dcb0 <__assert_fail@plt+0xc540>
   1dc28:	ldr	r1, [r4, #32]
   1dc2c:	cmp	r5, r1
   1dc30:	bge	1dd2c <__assert_fail@plt+0xc5bc>
   1dc34:	ldrb	r0, [r4, #76]	; 0x4c
   1dc38:	cmp	r0, #0
   1dc3c:	bne	1dea4 <__assert_fail@plt+0xc734>
   1dc40:	sub	r1, r5, #1
   1dc44:	mov	r0, r4
   1dc48:	mov	r2, r6
   1dc4c:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1dc50:	str	r0, [r4, #60]	; 0x3c
   1dc54:	ldr	r0, [r4, #80]	; 0x50
   1dc58:	cmp	r0, #2
   1dc5c:	blt	1dc78 <__assert_fail@plt+0xc508>
   1dc60:	ldr	r2, [r4, #28]
   1dc64:	ldr	r0, [r4, #8]
   1dc68:	sub	r2, r2, r5
   1dc6c:	add	r1, r0, r5, lsl #2
   1dc70:	lsl	r2, r2, #2
   1dc74:	bl	11458 <memmove@plt>
   1dc78:	ldrb	r0, [r4, #75]	; 0x4b
   1dc7c:	cmp	r0, #0
   1dc80:	bne	1df94 <__assert_fail@plt+0xc824>
   1dc84:	ldr	r0, [r4, #28]
   1dc88:	ldr	r1, [r4, #32]
   1dc8c:	sub	r0, r0, r5
   1dc90:	sub	r1, r1, r5
   1dc94:	str	r0, [r4, #28]
   1dc98:	str	r1, [r4, #32]
   1dc9c:	ldrb	r0, [r4, #75]	; 0x4b
   1dca0:	cmp	r0, #0
   1dca4:	ldreq	r0, [r4, #4]
   1dca8:	addeq	r0, r0, r5
   1dcac:	streq	r0, [r4, #4]
   1dcb0:	str	r9, [r4, #24]
   1dcb4:	ldr	r0, [r4, #48]	; 0x30
   1dcb8:	ldr	r1, [r4, #56]	; 0x38
   1dcbc:	ldr	r2, [r4, #80]	; 0x50
   1dcc0:	sub	r0, r0, r5
   1dcc4:	cmp	r2, #2
   1dcc8:	sub	r1, r1, r5
   1dccc:	str	r0, [r4, #48]	; 0x30
   1dcd0:	str	r1, [r4, #56]	; 0x38
   1dcd4:	blt	1dcf8 <__assert_fail@plt+0xc588>
   1dcd8:	ldrb	r0, [r4, #72]	; 0x48
   1dcdc:	cmp	r0, #0
   1dce0:	beq	1dd0c <__assert_fail@plt+0xc59c>
   1dce4:	mov	r0, r4
   1dce8:	bl	18d48 <__assert_fail@plt+0x75d8>
   1dcec:	cmp	r0, #0
   1dcf0:	bne	1dd1c <__assert_fail@plt+0xc5ac>
   1dcf4:	b	1dd14 <__assert_fail@plt+0xc5a4>
   1dcf8:	ldrb	r1, [r4, #75]	; 0x4b
   1dcfc:	cmp	r1, #0
   1dd00:	bne	1e02c <__assert_fail@plt+0xc8bc>
   1dd04:	str	r0, [r4, #28]
   1dd08:	b	1dd14 <__assert_fail@plt+0xc5a4>
   1dd0c:	mov	r0, r4
   1dd10:	bl	19384 <__assert_fail@plt+0x7c14>
   1dd14:	mov	r0, #0
   1dd18:	str	r0, [r4, #40]	; 0x28
   1dd1c:	sub	sp, fp, #28
   1dd20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd24:	sub	r5, r9, r0
   1dd28:	b	1dc20 <__assert_fail@plt+0xc4b0>
   1dd2c:	ldrb	r2, [r4, #76]	; 0x4c
   1dd30:	ldr	lr, [r4, #28]
   1dd34:	cmp	r2, #0
   1dd38:	bne	1e18c <__assert_fail@plt+0xca1c>
   1dd3c:	mov	r2, #0
   1dd40:	str	r2, [r4, #28]
   1dd44:	ldr	r3, [r4, #80]	; 0x50
   1dd48:	cmp	r3, #2
   1dd4c:	blt	1e044 <__assert_fail@plt+0xc8d4>
   1dd50:	ldrb	r2, [r4, #73]	; 0x49
   1dd54:	cmp	r2, #0
   1dd58:	beq	1de14 <__assert_fail@plt+0xc6a4>
   1dd5c:	ldr	r7, [r4]
   1dd60:	sub	r3, r5, r3
   1dd64:	add	ip, r7, r0
   1dd68:	add	r3, ip, r3
   1dd6c:	add	r8, ip, r5
   1dd70:	cmp	r3, r7
   1dd74:	movcc	r3, r7
   1dd78:	mov	r7, r8
   1dd7c:	sub	r7, r7, #1
   1dd80:	cmp	r7, r3
   1dd84:	bcc	1de14 <__assert_fail@plt+0xc6a4>
   1dd88:	ldrb	r2, [r7]
   1dd8c:	and	r2, r2, #192	; 0xc0
   1dd90:	cmp	r2, #128	; 0x80
   1dd94:	beq	1dd7c <__assert_fail@plt+0xc60c>
   1dd98:	ldr	r0, [r4, #48]	; 0x30
   1dd9c:	mov	sl, lr
   1dda0:	mov	r1, r7
   1dda4:	add	r0, ip, r0
   1dda8:	sub	r2, r0, r7
   1ddac:	ldr	r0, [r4, #64]	; 0x40
   1ddb0:	cmp	r0, #0
   1ddb4:	bne	1e228 <__assert_fail@plt+0xcab8>
   1ddb8:	mov	r0, #0
   1ddbc:	add	r3, sp, #24
   1ddc0:	str	r0, [sp, #28]
   1ddc4:	str	r0, [sp, #24]
   1ddc8:	add	r0, sp, #20
   1ddcc:	bl	23d60 <__assert_fail@plt+0x125f0>
   1ddd0:	sub	r1, r8, r7
   1ddd4:	mvn	r2, #0
   1ddd8:	cmp	r0, r1
   1dddc:	bcc	1de00 <__assert_fail@plt+0xc690>
   1dde0:	cmn	r0, #3
   1dde4:	bhi	1de00 <__assert_fail@plt+0xc690>
   1dde8:	mov	r2, #0
   1ddec:	sub	r0, r0, r1
   1ddf0:	str	r2, [r4, #16]
   1ddf4:	str	r2, [r4, #20]
   1ddf8:	str	r0, [r4, #28]
   1ddfc:	ldr	r2, [sp, #20]
   1de00:	cmn	r2, #1
   1de04:	bne	1e0fc <__assert_fail@plt+0xc98c>
   1de08:	ldr	r0, [r4, #24]
   1de0c:	ldr	r1, [r4, #32]
   1de10:	mov	lr, sl
   1de14:	add	r8, r1, r0
   1de18:	cmp	r8, r9
   1de1c:	bge	1e0dc <__assert_fail@plt+0xc96c>
   1de20:	add	sl, r4, #16
   1de24:	str	lr, [sp]
   1de28:	ldr	r0, [r4]
   1de2c:	ldr	r2, [r4, #44]	; 0x2c
   1de30:	mov	r3, sl
   1de34:	add	r1, r0, r8
   1de38:	ldr	r0, [sl]
   1de3c:	sub	r7, r2, r8
   1de40:	mov	r2, r7
   1de44:	str	r0, [sp, #8]
   1de48:	ldr	r0, [sl, #4]
   1de4c:	str	r0, [sp, #4]
   1de50:	add	r0, sp, #24
   1de54:	bl	23d60 <__assert_fail@plt+0x125f0>
   1de58:	sub	r1, r0, #1
   1de5c:	cmn	r1, #3
   1de60:	bcs	1de78 <__assert_fail@plt+0xc708>
   1de64:	ldr	r2, [sp, #24]
   1de68:	add	r8, r0, r8
   1de6c:	cmp	r8, r9
   1de70:	blt	1de28 <__assert_fail@plt+0xc6b8>
   1de74:	b	1e0e8 <__assert_fail@plt+0xc978>
   1de78:	ldr	r3, [sp, #4]
   1de7c:	ldr	r1, [sp, #8]
   1de80:	cmp	r7, #0
   1de84:	mov	r2, #0
   1de88:	cmpne	r0, #0
   1de8c:	beq	1de98 <__assert_fail@plt+0xc728>
   1de90:	ldr	r0, [r4]
   1de94:	ldrb	r2, [r0, r8]
   1de98:	stm	sl, {r1, r3}
   1de9c:	mov	r0, #1
   1dea0:	b	1de68 <__assert_fail@plt+0xc6f8>
   1dea4:	ldr	r8, [r4, #28]
   1dea8:	ldr	sl, [r4, #12]
   1deac:	mov	r0, #0
   1deb0:	mov	r1, r8
   1deb4:	add	r2, r0, r1
   1deb8:	add	r2, r2, r2, lsr #31
   1debc:	asr	r7, r2, #1
   1dec0:	ldr	r2, [sl, r7, lsl #2]
   1dec4:	mov	r3, r7
   1dec8:	cmp	r2, r5
   1decc:	bgt	1dedc <__assert_fail@plt+0xc76c>
   1ded0:	bge	1dee8 <__assert_fail@plt+0xc778>
   1ded4:	add	r0, r7, #1
   1ded8:	mov	r3, r1
   1dedc:	cmp	r0, r3
   1dee0:	mov	r1, r3
   1dee4:	blt	1deb4 <__assert_fail@plt+0xc744>
   1dee8:	cmp	r2, r5
   1deec:	mov	r0, r4
   1def0:	mov	r2, r6
   1def4:	addlt	r7, r7, #1
   1def8:	sub	r1, r7, #1
   1defc:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1df00:	cmp	r8, r5
   1df04:	str	r0, [r4, #60]	; 0x3c
   1df08:	ble	1dfac <__assert_fail@plt+0xc83c>
   1df0c:	cmp	r7, r5
   1df10:	bne	1dfac <__assert_fail@plt+0xc83c>
   1df14:	ldr	r0, [sl, r5, lsl #2]
   1df18:	cmp	r0, r5
   1df1c:	bne	1dfac <__assert_fail@plt+0xc83c>
   1df20:	ldr	r0, [r4, #8]
   1df24:	sub	r2, r8, r5
   1df28:	lsl	r2, r2, #2
   1df2c:	add	r1, r0, r5, lsl #2
   1df30:	bl	11458 <memmove@plt>
   1df34:	ldr	r2, [r4, #28]
   1df38:	ldr	r0, [r4, #4]
   1df3c:	add	r1, r0, r5
   1df40:	sub	r2, r2, r5
   1df44:	bl	11458 <memmove@plt>
   1df48:	ldr	r0, [r4, #28]
   1df4c:	ldr	r1, [r4, #32]
   1df50:	sub	r0, r0, r5
   1df54:	sub	r1, r1, r5
   1df58:	cmp	r0, #1
   1df5c:	str	r0, [r4, #28]
   1df60:	str	r1, [r4, #32]
   1df64:	blt	1dc9c <__assert_fail@plt+0xc52c>
   1df68:	ldr	r0, [r4, #12]
   1df6c:	mov	r2, #0
   1df70:	add	r1, r0, r5, lsl #2
   1df74:	ldr	r3, [r1, r2, lsl #2]
   1df78:	sub	r3, r3, r5
   1df7c:	str	r3, [r0, r2, lsl #2]
   1df80:	add	r2, r2, #1
   1df84:	ldr	r3, [r4, #28]
   1df88:	cmp	r2, r3
   1df8c:	blt	1df74 <__assert_fail@plt+0xc804>
   1df90:	b	1dc9c <__assert_fail@plt+0xc52c>
   1df94:	ldr	r2, [r4, #28]
   1df98:	ldr	r0, [r4, #4]
   1df9c:	add	r1, r0, r5
   1dfa0:	sub	r2, r2, r5
   1dfa4:	bl	11458 <memmove@plt>
   1dfa8:	b	1dc84 <__assert_fail@plt+0xc514>
   1dfac:	mov	r0, #0
   1dfb0:	strb	r0, [r4, #76]	; 0x4c
   1dfb4:	sub	r0, r5, r9
   1dfb8:	ldr	r1, [r4, #44]	; 0x2c
   1dfbc:	ldr	r2, [r4, #52]	; 0x34
   1dfc0:	add	r1, r0, r1
   1dfc4:	add	r0, r0, r2
   1dfc8:	str	r1, [r4, #48]	; 0x30
   1dfcc:	sub	r1, sl, #4
   1dfd0:	str	r0, [r4, #56]	; 0x38
   1dfd4:	mov	r0, r7
   1dfd8:	cmp	r7, #1
   1dfdc:	blt	1dff0 <__assert_fail@plt+0xc880>
   1dfe0:	ldr	r2, [r1, r0, lsl #2]
   1dfe4:	sub	r7, r0, #1
   1dfe8:	cmp	r2, r5
   1dfec:	beq	1dfd4 <__assert_fail@plt+0xc864>
   1dff0:	cmp	r0, r8
   1dff4:	bge	1e018 <__assert_fail@plt+0xc8a8>
   1dff8:	ldr	r1, [r4, #8]
   1dffc:	ldr	r2, [r1, r0, lsl #2]
   1e000:	cmn	r2, #1
   1e004:	bne	1e018 <__assert_fail@plt+0xc8a8>
   1e008:	add	r0, r0, #1
   1e00c:	cmp	r8, r0
   1e010:	bne	1dffc <__assert_fail@plt+0xc88c>
   1e014:	b	1e020 <__assert_fail@plt+0xc8b0>
   1e018:	cmp	r0, r8
   1e01c:	bne	1e090 <__assert_fail@plt+0xc920>
   1e020:	mov	r0, #0
   1e024:	str	r0, [r4, #28]
   1e028:	b	1e150 <__assert_fail@plt+0xc9e0>
   1e02c:	ldrb	r0, [r4, #72]	; 0x48
   1e030:	cmp	r0, #0
   1e034:	beq	1e158 <__assert_fail@plt+0xc9e8>
   1e038:	mov	r0, r4
   1e03c:	bl	19318 <__assert_fail@plt+0x7ba8>
   1e040:	b	1dd14 <__assert_fail@plt+0xc5a4>
   1e044:	ldr	r3, [r4]
   1e048:	add	r0, r5, r0
   1e04c:	ldr	r1, [r4, #64]	; 0x40
   1e050:	add	r0, r0, r3
   1e054:	cmp	r1, #0
   1e058:	ldrb	r0, [r0, #-1]
   1e05c:	str	r2, [r4, #32]
   1e060:	ldrbne	r0, [r1, r0]
   1e064:	ldr	r1, [r4, #68]	; 0x44
   1e068:	ubfx	r2, r0, #5, #3
   1e06c:	and	r3, r0, #31
   1e070:	ldr	r2, [r1, r2, lsl #2]
   1e074:	mov	r1, #1
   1e078:	tst	r2, r1, lsl r3
   1e07c:	moveq	r1, #0
   1e080:	cmpeq	r0, #10
   1e084:	beq	1e178 <__assert_fail@plt+0xca08>
   1e088:	str	r1, [r4, #60]	; 0x3c
   1e08c:	b	1dc9c <__assert_fail@plt+0xc52c>
   1e090:	ldr	r0, [sl, r0, lsl #2]
   1e094:	subs	r2, r0, r5
   1e098:	str	r2, [r4, #28]
   1e09c:	beq	1e170 <__assert_fail@plt+0xca00>
   1e0a0:	cmp	r2, #1
   1e0a4:	blt	1e0c8 <__assert_fail@plt+0xc958>
   1e0a8:	ldr	r0, [r4, #8]
   1e0ac:	mov	r1, #0
   1e0b0:	mvn	r3, #0
   1e0b4:	str	r3, [r0, r1, lsl #2]
   1e0b8:	add	r1, r1, #1
   1e0bc:	ldr	r2, [r4, #28]
   1e0c0:	cmp	r1, r2
   1e0c4:	blt	1e0b4 <__assert_fail@plt+0xc944>
   1e0c8:	ldr	r0, [r4, #4]
   1e0cc:	mov	r1, #255	; 0xff
   1e0d0:	bl	1165c <memset@plt>
   1e0d4:	ldr	r0, [r4, #28]
   1e0d8:	b	1e150 <__assert_fail@plt+0xc9e0>
   1e0dc:	sub	r7, r8, r9
   1e0e0:	str	r7, [r4, #28]
   1e0e4:	b	1e130 <__assert_fail@plt+0xc9c0>
   1e0e8:	ldr	lr, [sp]
   1e0ec:	sub	r7, r8, r9
   1e0f0:	cmn	r2, #1
   1e0f4:	str	r7, [r4, #28]
   1e0f8:	beq	1e130 <__assert_fail@plt+0xc9c0>
   1e0fc:	ldrb	r0, [r4, #78]	; 0x4e
   1e100:	cmp	r0, #0
   1e104:	bne	1e1f8 <__assert_fail@plt+0xca88>
   1e108:	mov	r1, #0
   1e10c:	cmp	r2, #10
   1e110:	bne	1e124 <__assert_fail@plt+0xc9b4>
   1e114:	ldrb	r0, [r4, #77]	; 0x4d
   1e118:	cmp	r0, #0
   1e11c:	movwne	r0, #1
   1e120:	lsl	r1, r0, #1
   1e124:	str	r1, [r4, #60]	; 0x3c
   1e128:	ldr	r7, [r4, #28]
   1e12c:	b	1e144 <__assert_fail@plt+0xc9d4>
   1e130:	sub	r1, lr, #1
   1e134:	mov	r0, r4
   1e138:	mov	r2, r6
   1e13c:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1e140:	str	r0, [r4, #60]	; 0x3c
   1e144:	mov	r0, #0
   1e148:	cmp	r7, #0
   1e14c:	bne	1e1b4 <__assert_fail@plt+0xca44>
   1e150:	str	r0, [r4, #32]
   1e154:	b	1dc9c <__assert_fail@plt+0xc52c>
   1e158:	ldr	r0, [r4, #64]	; 0x40
   1e15c:	cmp	r0, #0
   1e160:	beq	1dd14 <__assert_fail@plt+0xc5a4>
   1e164:	mov	r0, r4
   1e168:	bl	19570 <__assert_fail@plt+0x7e00>
   1e16c:	b	1dd14 <__assert_fail@plt+0xc5a4>
   1e170:	mov	r0, #0
   1e174:	b	1e150 <__assert_fail@plt+0xc9e0>
   1e178:	ldrb	r0, [r4, #77]	; 0x4d
   1e17c:	cmp	r0, #0
   1e180:	movwne	r0, #1
   1e184:	lsl	r1, r0, #1
   1e188:	b	1e088 <__assert_fail@plt+0xc918>
   1e18c:	mov	r2, #0
   1e190:	strb	r2, [r4, #76]	; 0x4c
   1e194:	sub	r2, r5, r9
   1e198:	ldr	r3, [r4, #44]	; 0x2c
   1e19c:	ldr	r7, [r4, #52]	; 0x34
   1e1a0:	add	r3, r2, r3
   1e1a4:	add	r2, r2, r7
   1e1a8:	str	r3, [r4, #48]	; 0x30
   1e1ac:	str	r2, [r4, #56]	; 0x38
   1e1b0:	b	1dd3c <__assert_fail@plt+0xc5cc>
   1e1b4:	cmp	r7, #1
   1e1b8:	blt	1e1dc <__assert_fail@plt+0xca6c>
   1e1bc:	ldr	r0, [r4, #8]
   1e1c0:	mov	r1, #0
   1e1c4:	mvn	r2, #0
   1e1c8:	str	r2, [r0, r1, lsl #2]
   1e1cc:	add	r1, r1, #1
   1e1d0:	ldr	r7, [r4, #28]
   1e1d4:	cmp	r1, r7
   1e1d8:	blt	1e1c8 <__assert_fail@plt+0xca58>
   1e1dc:	ldrb	r0, [r4, #75]	; 0x4b
   1e1e0:	cmp	r0, #0
   1e1e4:	beq	1e220 <__assert_fail@plt+0xcab0>
   1e1e8:	ldr	r0, [r4, #4]
   1e1ec:	mov	r1, #255	; 0xff
   1e1f0:	mov	r2, r7
   1e1f4:	b	1e0d0 <__assert_fail@plt+0xc960>
   1e1f8:	mov	r0, r2
   1e1fc:	mov	r6, r2
   1e200:	bl	11638 <iswalnum@plt>
   1e204:	mov	r1, #1
   1e208:	cmp	r6, #95	; 0x5f
   1e20c:	beq	1e124 <__assert_fail@plt+0xc9b4>
   1e210:	mov	r2, r6
   1e214:	cmp	r0, #0
   1e218:	beq	1e108 <__assert_fail@plt+0xc998>
   1e21c:	b	1e124 <__assert_fail@plt+0xc9b4>
   1e220:	mov	r0, r7
   1e224:	b	1e150 <__assert_fail@plt+0xc9e0>
   1e228:	cmp	r2, #1
   1e22c:	blt	1e264 <__assert_fail@plt+0xcaf4>
   1e230:	cmp	r2, #6
   1e234:	mov	r1, r2
   1e238:	movge	r1, #6
   1e23c:	sub	ip, r1, #1
   1e240:	add	r1, sp, #14
   1e244:	ldrb	r3, [r7, ip]
   1e248:	cmp	ip, #0
   1e24c:	ldrb	r3, [r0, r3]
   1e250:	strb	r3, [r1, ip]
   1e254:	sub	r3, ip, #1
   1e258:	mov	ip, r3
   1e25c:	bgt	1e244 <__assert_fail@plt+0xcad4>
   1e260:	b	1ddb8 <__assert_fail@plt+0xc648>
   1e264:	add	r1, sp, #14
   1e268:	b	1ddb8 <__assert_fail@plt+0xc648>
   1e26c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e270:	add	fp, sp, #24
   1e274:	mov	r3, r2
   1e278:	ldr	r2, [r0, #88]	; 0x58
   1e27c:	mov	r5, r1
   1e280:	mov	r4, r0
   1e284:	mov	r1, r3
   1e288:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1e28c:	ldr	r1, [r5, #8]
   1e290:	cmp	r1, #1
   1e294:	blt	1e324 <__assert_fail@plt+0xcbb4>
   1e298:	and	ip, r0, #8
   1e29c:	and	lr, r0, #2
   1e2a0:	and	r2, r0, #1
   1e2a4:	ldr	r0, [r4, #84]	; 0x54
   1e2a8:	ldr	r5, [r5, #12]
   1e2ac:	movw	r8, #65280	; 0xff00
   1e2b0:	mov	r3, #0
   1e2b4:	movt	r8, #3
   1e2b8:	ldr	r4, [r0]
   1e2bc:	ldr	r0, [r5, r3, lsl #2]
   1e2c0:	add	r7, r4, r0, lsl #3
   1e2c4:	ldr	r7, [r7, #4]
   1e2c8:	uxtb	r6, r7
   1e2cc:	cmp	r6, #2
   1e2d0:	bne	1e318 <__assert_fail@plt+0xcba8>
   1e2d4:	tst	r7, r8
   1e2d8:	beq	1e328 <__assert_fail@plt+0xcbb8>
   1e2dc:	cmp	r2, #0
   1e2e0:	bne	1e2ec <__assert_fail@plt+0xcb7c>
   1e2e4:	ands	r6, r7, #1024	; 0x400
   1e2e8:	bne	1e318 <__assert_fail@plt+0xcba8>
   1e2ec:	cmp	r2, #0
   1e2f0:	andsne	r6, r7, #2048	; 0x800
   1e2f4:	bne	1e318 <__assert_fail@plt+0xcba8>
   1e2f8:	cmp	lr, #0
   1e2fc:	bne	1e308 <__assert_fail@plt+0xcb98>
   1e300:	ands	r6, r7, #8192	; 0x2000
   1e304:	bne	1e318 <__assert_fail@plt+0xcba8>
   1e308:	cmp	ip, #0
   1e30c:	bne	1e328 <__assert_fail@plt+0xcbb8>
   1e310:	ands	r6, r7, #32768	; 0x8000
   1e314:	beq	1e328 <__assert_fail@plt+0xcbb8>
   1e318:	add	r3, r3, #1
   1e31c:	cmp	r3, r1
   1e320:	blt	1e2bc <__assert_fail@plt+0xcb4c>
   1e324:	mov	r0, #0
   1e328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e32c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e330:	add	fp, sp, #24
   1e334:	mov	r8, r0
   1e338:	ldr	r0, [r0, #124]	; 0x7c
   1e33c:	cmp	r0, #1
   1e340:	blt	1e3c4 <__assert_fail@plt+0xcc54>
   1e344:	mov	r7, #0
   1e348:	ldr	r0, [r8, #132]	; 0x84
   1e34c:	ldr	r5, [r0, r7, lsl #2]
   1e350:	ldr	r0, [r5, #16]
   1e354:	cmp	r0, #1
   1e358:	blt	1e388 <__assert_fail@plt+0xcc18>
   1e35c:	mov	r4, #0
   1e360:	ldr	r0, [r5, #20]
   1e364:	ldr	r6, [r0, r4, lsl #2]
   1e368:	ldr	r0, [r6, #16]
   1e36c:	bl	13bd0 <__assert_fail@plt+0x2460>
   1e370:	mov	r0, r6
   1e374:	bl	13bd0 <__assert_fail@plt+0x2460>
   1e378:	ldr	r0, [r5, #16]
   1e37c:	add	r4, r4, #1
   1e380:	cmp	r4, r0
   1e384:	blt	1e360 <__assert_fail@plt+0xcbf0>
   1e388:	ldr	r0, [r5, #20]
   1e38c:	bl	13bd0 <__assert_fail@plt+0x2460>
   1e390:	ldr	r0, [r5, #8]
   1e394:	cmp	r0, #0
   1e398:	beq	1e3ac <__assert_fail@plt+0xcc3c>
   1e39c:	ldr	r0, [r0, #8]
   1e3a0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1e3a4:	ldr	r0, [r5, #8]
   1e3a8:	bl	13bd0 <__assert_fail@plt+0x2460>
   1e3ac:	mov	r0, r5
   1e3b0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1e3b4:	ldr	r0, [r8, #124]	; 0x7c
   1e3b8:	add	r7, r7, #1
   1e3bc:	cmp	r7, r0
   1e3c0:	blt	1e348 <__assert_fail@plt+0xcbd8>
   1e3c4:	mov	r0, #0
   1e3c8:	str	r0, [r8, #108]	; 0x6c
   1e3cc:	str	r0, [r8, #124]	; 0x7c
   1e3d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e3d4:	push	{r4, r5, fp, lr}
   1e3d8:	add	fp, sp, #8
   1e3dc:	mov	r4, r0
   1e3e0:	cmn	r1, #1
   1e3e4:	ble	1e41c <__assert_fail@plt+0xccac>
   1e3e8:	ldr	r0, [r4, #48]	; 0x30
   1e3ec:	cmp	r0, r1
   1e3f0:	beq	1e480 <__assert_fail@plt+0xcd10>
   1e3f4:	ldr	r0, [r4, #80]	; 0x50
   1e3f8:	cmp	r0, #2
   1e3fc:	blt	1e424 <__assert_fail@plt+0xccb4>
   1e400:	ldr	r0, [r4, #8]
   1e404:	ldr	r5, [r0, r1, lsl #2]
   1e408:	cmn	r5, #1
   1e40c:	bne	1e454 <__assert_fail@plt+0xcce4>
   1e410:	sub	r1, r1, #1
   1e414:	cmn	r1, #1
   1e418:	bne	1e404 <__assert_fail@plt+0xcc94>
   1e41c:	ldr	r0, [r4, #60]	; 0x3c
   1e420:	pop	{r4, r5, fp, pc}
   1e424:	ldr	r0, [r4, #4]
   1e428:	ldr	r2, [r4, #68]	; 0x44
   1e42c:	ldrb	r1, [r0, r1]
   1e430:	ubfx	r0, r1, #5, #3
   1e434:	and	r3, r1, #31
   1e438:	ldr	r2, [r2, r0, lsl #2]
   1e43c:	mov	r0, #1
   1e440:	tst	r2, r0, lsl r3
   1e444:	moveq	r0, #0
   1e448:	cmpeq	r1, #10
   1e44c:	bne	1e47c <__assert_fail@plt+0xcd0c>
   1e450:	b	1e46c <__assert_fail@plt+0xccfc>
   1e454:	ldrb	r0, [r4, #78]	; 0x4e
   1e458:	cmp	r0, #0
   1e45c:	bne	1e48c <__assert_fail@plt+0xcd1c>
   1e460:	mov	r0, #0
   1e464:	cmp	r5, #10
   1e468:	popne	{r4, r5, fp, pc}
   1e46c:	ldrb	r0, [r4, #77]	; 0x4d
   1e470:	cmp	r0, #0
   1e474:	movwne	r0, #1
   1e478:	lsl	r0, r0, #1
   1e47c:	pop	{r4, r5, fp, pc}
   1e480:	and	r0, r2, #2
   1e484:	eor	r0, r0, #10
   1e488:	pop	{r4, r5, fp, pc}
   1e48c:	mov	r0, r5
   1e490:	bl	11638 <iswalnum@plt>
   1e494:	mov	r1, r0
   1e498:	mov	r0, #1
   1e49c:	cmp	r5, #95	; 0x5f
   1e4a0:	beq	1e47c <__assert_fail@plt+0xcd0c>
   1e4a4:	cmp	r1, #0
   1e4a8:	beq	1e460 <__assert_fail@plt+0xccf0>
   1e4ac:	b	1e47c <__assert_fail@plt+0xcd0c>
   1e4b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e4b4:	add	fp, sp, #28
   1e4b8:	sub	sp, sp, #4
   1e4bc:	mov	sl, r0
   1e4c0:	ldr	r0, [r1, #4]
   1e4c4:	cmp	r0, #1
   1e4c8:	blt	1e594 <__assert_fail@plt+0xce24>
   1e4cc:	ldr	r7, [sl, #84]	; 0x54
   1e4d0:	mov	r8, r2
   1e4d4:	mov	r5, r1
   1e4d8:	mov	r4, #0
   1e4dc:	ldr	r1, [r5, #8]
   1e4e0:	ldr	r6, [r1, r4, lsl #2]
   1e4e4:	ldr	r1, [r7]
   1e4e8:	add	r2, r1, r6, lsl #3
   1e4ec:	ldrb	r2, [r2, #4]
   1e4f0:	cmp	r2, #8
   1e4f4:	bne	1e560 <__assert_fail@plt+0xcdf0>
   1e4f8:	ldr	r1, [r1, r6, lsl #3]
   1e4fc:	cmp	r1, #31
   1e500:	bgt	1e560 <__assert_fail@plt+0xcdf0>
   1e504:	ldr	r2, [r7, #80]	; 0x50
   1e508:	mov	r3, #1
   1e50c:	tst	r2, r3, lsl r1
   1e510:	beq	1e560 <__assert_fail@plt+0xcdf0>
   1e514:	ldr	r0, [sl, #124]	; 0x7c
   1e518:	ldr	r9, [sl, #128]	; 0x80
   1e51c:	cmp	r0, r9
   1e520:	beq	1e570 <__assert_fail@plt+0xce00>
   1e524:	mov	r0, #1
   1e528:	mov	r1, #24
   1e52c:	bl	23940 <__assert_fail@plt+0x121d0>
   1e530:	ldr	r1, [sl, #124]	; 0x7c
   1e534:	ldr	r2, [sl, #132]	; 0x84
   1e538:	str	r0, [r2, r1, lsl #2]
   1e53c:	ldr	r0, [sl, #132]	; 0x84
   1e540:	ldr	r0, [r0, r1, lsl #2]
   1e544:	cmp	r0, #0
   1e548:	beq	1e5a0 <__assert_fail@plt+0xce30>
   1e54c:	add	r1, r1, #1
   1e550:	str	r6, [r0, #4]
   1e554:	str	r1, [sl, #124]	; 0x7c
   1e558:	str	r8, [r0]
   1e55c:	ldr	r0, [r5, #4]
   1e560:	add	r4, r4, #1
   1e564:	cmp	r4, r0
   1e568:	blt	1e4dc <__assert_fail@plt+0xcd6c>
   1e56c:	b	1e594 <__assert_fail@plt+0xce24>
   1e570:	ldr	r0, [sl, #132]	; 0x84
   1e574:	lsl	r1, r9, #3
   1e578:	bl	239c4 <__assert_fail@plt+0x12254>
   1e57c:	cmp	r0, #0
   1e580:	beq	1e5a0 <__assert_fail@plt+0xce30>
   1e584:	lsl	r1, r9, #1
   1e588:	str	r1, [sl, #128]	; 0x80
   1e58c:	str	r0, [sl, #132]	; 0x84
   1e590:	b	1e524 <__assert_fail@plt+0xcdb4>
   1e594:	mov	r0, #0
   1e598:	sub	sp, fp, #28
   1e59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5a0:	mov	r0, #12
   1e5a4:	b	1e598 <__assert_fail@plt+0xce28>
   1e5a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5ac:	add	fp, sp, #28
   1e5b0:	sub	sp, sp, #76	; 0x4c
   1e5b4:	mov	r7, r0
   1e5b8:	ldr	r0, [r1, #4]
   1e5bc:	cmp	r0, #1
   1e5c0:	blt	1ec74 <__assert_fail@plt+0xd504>
   1e5c4:	ldr	r2, [r7, #84]	; 0x54
   1e5c8:	ldr	r0, [r7, #40]	; 0x28
   1e5cc:	mov	r3, #0
   1e5d0:	str	r7, [sp, #40]	; 0x28
   1e5d4:	str	r1, [sp, #12]
   1e5d8:	str	r0, [sp, #52]	; 0x34
   1e5dc:	str	r2, [sp, #24]
   1e5e0:	ldr	r0, [r1, #8]
   1e5e4:	str	r3, [sp, #20]
   1e5e8:	ldr	r3, [r0, r3, lsl #2]
   1e5ec:	ldr	r0, [r2]
   1e5f0:	add	r0, r0, r3, lsl #3
   1e5f4:	mov	r1, r3
   1e5f8:	str	r3, [sp, #48]	; 0x30
   1e5fc:	ldr	r4, [r0, #4]
   1e600:	uxtb	r0, r4
   1e604:	cmp	r0, #4
   1e608:	bne	1ec58 <__assert_fail@plt+0xd4e8>
   1e60c:	movw	r0, #65280	; 0xff00
   1e610:	movt	r0, #3
   1e614:	tst	r4, r0
   1e618:	beq	1e66c <__assert_fail@plt+0xcefc>
   1e61c:	ldr	r2, [r7, #88]	; 0x58
   1e620:	ldr	r1, [sp, #52]	; 0x34
   1e624:	mov	r0, r7
   1e628:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1e62c:	and	r1, r0, #1
   1e630:	tst	r4, #1024	; 0x400
   1e634:	beq	1e640 <__assert_fail@plt+0xced0>
   1e638:	cmp	r1, #0
   1e63c:	beq	1ec58 <__assert_fail@plt+0xd4e8>
   1e640:	tst	r4, #2048	; 0x800
   1e644:	cmpne	r1, #0
   1e648:	bne	1ec58 <__assert_fail@plt+0xd4e8>
   1e64c:	tst	r4, #8192	; 0x2000
   1e650:	beq	1e65c <__assert_fail@plt+0xceec>
   1e654:	ands	r1, r0, #2
   1e658:	beq	1ec58 <__assert_fail@plt+0xd4e8>
   1e65c:	tst	r4, #32768	; 0x8000
   1e660:	beq	1e66c <__assert_fail@plt+0xcefc>
   1e664:	ands	r0, r0, #8
   1e668:	beq	1ec58 <__assert_fail@plt+0xd4e8>
   1e66c:	ldr	r0, [r7, #84]	; 0x54
   1e670:	ldr	r1, [sp, #52]	; 0x34
   1e674:	ldr	r4, [r7, #4]
   1e678:	ldr	r8, [r7, #108]	; 0x6c
   1e67c:	str	r0, [sp, #36]	; 0x24
   1e680:	mov	r0, r7
   1e684:	bl	1f0e8 <__assert_fail@plt+0xd978>
   1e688:	cmn	r0, #1
   1e68c:	beq	1e6bc <__assert_fail@plt+0xcf4c>
   1e690:	ldr	r1, [r7, #116]	; 0x74
   1e694:	add	r0, r0, r0, lsl #1
   1e698:	add	r0, r1, r0, lsl #3
   1e69c:	ldr	r1, [r0]
   1e6a0:	ldr	r2, [sp, #48]	; 0x30
   1e6a4:	cmp	r1, r2
   1e6a8:	beq	1ea48 <__assert_fail@plt+0xd2d8>
   1e6ac:	ldrb	r1, [r0, #20]
   1e6b0:	add	r0, r0, #24
   1e6b4:	cmp	r1, #0
   1e6b8:	bne	1e69c <__assert_fail@plt+0xcf2c>
   1e6bc:	ldr	r0, [r7, #124]	; 0x7c
   1e6c0:	cmp	r0, #1
   1e6c4:	mov	r0, r8
   1e6c8:	blt	1ea4c <__assert_fail@plt+0xd2dc>
   1e6cc:	ldr	r0, [sp, #36]	; 0x24
   1e6d0:	ldr	r1, [sp, #48]	; 0x30
   1e6d4:	mov	r3, #0
   1e6d8:	mov	ip, r4
   1e6dc:	str	r8, [sp, #16]
   1e6e0:	ldr	r0, [r0]
   1e6e4:	ldr	r2, [r0, r1, lsl #3]
   1e6e8:	str	r2, [sp, #32]
   1e6ec:	ldr	r1, [r7, #132]	; 0x84
   1e6f0:	str	r3, [sp, #28]
   1e6f4:	ldr	r4, [r1, r3, lsl #2]
   1e6f8:	ldr	r1, [r4, #4]
   1e6fc:	ldr	r0, [r0, r1, lsl #3]
   1e700:	cmp	r0, r2
   1e704:	bne	1e814 <__assert_fail@plt+0xd0a4>
   1e708:	ldr	r0, [r4, #16]
   1e70c:	ldr	r2, [r4]
   1e710:	mov	r8, #0
   1e714:	str	r4, [sp, #44]	; 0x2c
   1e718:	cmp	r0, #1
   1e71c:	blt	1e7e4 <__assert_fail@plt+0xd074>
   1e720:	ldr	r6, [sp, #52]	; 0x34
   1e724:	mov	r5, r2
   1e728:	ldr	r1, [r4, #20]
   1e72c:	ldr	sl, [r1, r8, lsl #2]
   1e730:	ldr	r1, [sl, #4]
   1e734:	sub	r9, r1, r5
   1e738:	str	r1, [fp, #-48]	; 0xffffffd0
   1e73c:	cmp	r9, #1
   1e740:	blt	1e778 <__assert_fail@plt+0xd008>
   1e744:	ldr	r2, [r7, #28]
   1e748:	add	r1, r9, r6
   1e74c:	cmp	r1, r2
   1e750:	bgt	1e7c0 <__assert_fail@plt+0xd050>
   1e754:	add	r0, ip, r6
   1e758:	add	r1, ip, r5
   1e75c:	mov	r2, r9
   1e760:	mov	r4, ip
   1e764:	bl	11608 <bcmp@plt>
   1e768:	mov	ip, r4
   1e76c:	ldr	r4, [sp, #44]	; 0x2c
   1e770:	cmp	r0, #0
   1e774:	bne	1e7ec <__assert_fail@plt+0xd07c>
   1e778:	ldr	r0, [sp, #52]	; 0x34
   1e77c:	ldr	r3, [sp, #48]	; 0x30
   1e780:	mov	r1, r4
   1e784:	mov	r2, sl
   1e788:	str	r0, [sp]
   1e78c:	mov	r0, r7
   1e790:	bl	1f204 <__assert_fail@plt+0xda94>
   1e794:	cmp	r0, #1
   1e798:	bhi	1ec84 <__assert_fail@plt+0xd514>
   1e79c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1e7a0:	ldr	r0, [r4, #16]
   1e7a4:	ldr	ip, [r7, #4]
   1e7a8:	add	r8, r8, #1
   1e7ac:	add	r6, r9, r6
   1e7b0:	cmp	r8, r0
   1e7b4:	mov	r5, r2
   1e7b8:	blt	1e728 <__assert_fail@plt+0xcfb8>
   1e7bc:	b	1e7f4 <__assert_fail@plt+0xd084>
   1e7c0:	ldr	r2, [r7, #48]	; 0x30
   1e7c4:	cmp	r1, r2
   1e7c8:	bgt	1e7f0 <__assert_fail@plt+0xd080>
   1e7cc:	mov	r0, r7
   1e7d0:	bl	1f170 <__assert_fail@plt+0xda00>
   1e7d4:	cmp	r0, #0
   1e7d8:	bne	1ec84 <__assert_fail@plt+0xd514>
   1e7dc:	ldr	ip, [r7, #4]
   1e7e0:	b	1e754 <__assert_fail@plt+0xcfe4>
   1e7e4:	ldr	r6, [sp, #52]	; 0x34
   1e7e8:	b	1e7f4 <__assert_fail@plt+0xd084>
   1e7ec:	ldr	r0, [r4, #16]
   1e7f0:	mov	r2, r5
   1e7f4:	cmp	r8, r0
   1e7f8:	blt	1e810 <__assert_fail@plt+0xd0a0>
   1e7fc:	ldr	r0, [sp, #52]	; 0x34
   1e800:	cmp	r8, #0
   1e804:	addne	r2, r2, #1
   1e808:	cmp	r2, r0
   1e80c:	ble	1e838 <__assert_fail@plt+0xd0c8>
   1e810:	ldr	r8, [sp, #16]
   1e814:	ldr	r3, [sp, #28]
   1e818:	ldr	r0, [r7, #124]	; 0x7c
   1e81c:	add	r3, r3, #1
   1e820:	cmp	r3, r0
   1e824:	bge	1ea40 <__assert_fail@plt+0xd2d0>
   1e828:	ldr	r0, [sp, #36]	; 0x24
   1e82c:	ldr	r2, [sp, #32]
   1e830:	ldr	r0, [r0]
   1e834:	b	1e6ec <__assert_fail@plt+0xcf7c>
   1e838:	ldr	r8, [sp, #16]
   1e83c:	ldr	r0, [r4]
   1e840:	mov	sl, r2
   1e844:	cmp	r2, r0
   1e848:	ble	1e874 <__assert_fail@plt+0xd104>
   1e84c:	ldr	r0, [r7, #28]
   1e850:	cmp	r6, r0
   1e854:	bge	1e9e0 <__assert_fail@plt+0xd270>
   1e858:	add	r5, r6, #1
   1e85c:	add	r1, sl, ip
   1e860:	ldrb	r0, [ip, r6]
   1e864:	ldrb	r1, [r1, #-1]
   1e868:	cmp	r0, r1
   1e86c:	beq	1e878 <__assert_fail@plt+0xd108>
   1e870:	b	1e814 <__assert_fail@plt+0xd0a4>
   1e874:	mov	r5, r6
   1e878:	ldr	r0, [r7, #100]	; 0x64
   1e87c:	mov	r6, r5
   1e880:	ldr	r2, [r0, sl, lsl #2]
   1e884:	cmp	r2, #0
   1e888:	beq	1e8d4 <__assert_fail@plt+0xd164>
   1e88c:	ldr	r0, [r2, #8]
   1e890:	cmp	r0, #1
   1e894:	blt	1e8d4 <__assert_fail@plt+0xd164>
   1e898:	ldr	r1, [sp, #36]	; 0x24
   1e89c:	ldr	r2, [r2, #12]
   1e8a0:	ldr	r7, [sp, #32]
   1e8a4:	ldr	r1, [r1]
   1e8a8:	ldr	r5, [r2]
   1e8ac:	add	r3, r1, r5, lsl #3
   1e8b0:	ldrb	r3, [r3, #4]
   1e8b4:	cmp	r3, #9
   1e8b8:	bne	1e8c8 <__assert_fail@plt+0xd158>
   1e8bc:	ldr	r3, [r1, r5, lsl #3]
   1e8c0:	cmp	r3, r7
   1e8c4:	beq	1e8ec <__assert_fail@plt+0xd17c>
   1e8c8:	add	r2, r2, #4
   1e8cc:	subs	r0, r0, #1
   1e8d0:	bne	1e8a8 <__assert_fail@plt+0xd138>
   1e8d4:	ldr	r0, [sp, #52]	; 0x34
   1e8d8:	ldr	r7, [sp, #40]	; 0x28
   1e8dc:	add	r2, sl, #1
   1e8e0:	cmp	sl, r0
   1e8e4:	blt	1e83c <__assert_fail@plt+0xd0cc>
   1e8e8:	b	1e814 <__assert_fail@plt+0xd0a4>
   1e8ec:	cmn	r5, #1
   1e8f0:	beq	1e8d4 <__assert_fail@plt+0xd164>
   1e8f4:	ldr	r1, [r4, #8]
   1e8f8:	mov	r9, r6
   1e8fc:	mov	r6, ip
   1e900:	cmp	r1, #0
   1e904:	bne	1e934 <__assert_fail@plt+0xd1c4>
   1e908:	ldr	r0, [r4]
   1e90c:	mov	r7, #12
   1e910:	sub	r0, sl, r0
   1e914:	add	r1, r0, #1
   1e918:	mov	r0, #12
   1e91c:	bl	23940 <__assert_fail@plt+0x121d0>
   1e920:	ldr	r4, [sp, #44]	; 0x2c
   1e924:	mov	r1, r0
   1e928:	cmp	r0, #0
   1e92c:	str	r0, [r4, #8]
   1e930:	beq	1ec88 <__assert_fail@plt+0xd518>
   1e934:	mov	r0, #9
   1e938:	ldr	r3, [r4]
   1e93c:	ldr	r2, [r4, #4]
   1e940:	stm	sp, {r5, sl}
   1e944:	str	r0, [sp, #8]
   1e948:	ldr	r0, [sp, #40]	; 0x28
   1e94c:	bl	1f354 <__assert_fail@plt+0xdbe4>
   1e950:	ldr	r4, [sp, #44]	; 0x2c
   1e954:	mov	ip, r6
   1e958:	cmp	r0, #1
   1e95c:	mov	r6, r9
   1e960:	beq	1e8d4 <__assert_fail@plt+0xd164>
   1e964:	cmp	r0, #0
   1e968:	bne	1ec84 <__assert_fail@plt+0xd514>
   1e96c:	ldr	r1, [r4, #12]
   1e970:	ldr	r0, [r4, #16]
   1e974:	ldr	r7, [sp, #40]	; 0x28
   1e978:	cmp	r0, r1
   1e97c:	beq	1ea18 <__assert_fail@plt+0xd2a8>
   1e980:	mov	r0, #1
   1e984:	mov	r1, #20
   1e988:	bl	23940 <__assert_fail@plt+0x121d0>
   1e98c:	cmp	r0, #0
   1e990:	beq	1ecac <__assert_fail@plt+0xd53c>
   1e994:	ldr	r1, [sp, #44]	; 0x2c
   1e998:	mov	r2, r0
   1e99c:	ldr	r0, [r1, #16]
   1e9a0:	ldr	r3, [r1, #20]
   1e9a4:	str	r2, [r3, r0, lsl #2]
   1e9a8:	add	r0, r0, #1
   1e9ac:	stm	r2, {r5, sl}
   1e9b0:	ldr	r3, [sp, #48]	; 0x30
   1e9b4:	str	r0, [r1, #16]
   1e9b8:	ldr	r0, [sp, #52]	; 0x34
   1e9bc:	str	r0, [sp]
   1e9c0:	mov	r0, r7
   1e9c4:	bl	1f204 <__assert_fail@plt+0xda94>
   1e9c8:	cmp	r0, #1
   1e9cc:	bhi	1ec84 <__assert_fail@plt+0xd514>
   1e9d0:	ldr	ip, [r7, #4]
   1e9d4:	ldr	r4, [sp, #44]	; 0x2c
   1e9d8:	mov	r6, r9
   1e9dc:	b	1e8d4 <__assert_fail@plt+0xd164>
   1e9e0:	ldr	r0, [r7, #48]	; 0x30
   1e9e4:	cmp	r6, r0
   1e9e8:	bge	1e814 <__assert_fail@plt+0xd0a4>
   1e9ec:	add	r5, r6, #1
   1e9f0:	mov	r0, r7
   1e9f4:	mov	r9, r6
   1e9f8:	mov	r1, r5
   1e9fc:	bl	1ecb4 <__assert_fail@plt+0xd544>
   1ea00:	cmp	r0, #0
   1ea04:	bne	1ec84 <__assert_fail@plt+0xd514>
   1ea08:	ldr	ip, [r7, #4]
   1ea0c:	ldr	r4, [sp, #44]	; 0x2c
   1ea10:	mov	r6, r9
   1ea14:	b	1e85c <__assert_fail@plt+0xd0ec>
   1ea18:	mov	r1, #1
   1ea1c:	orr	r6, r1, r0, lsl #1
   1ea20:	ldr	r0, [r4, #20]
   1ea24:	lsl	r1, r6, #2
   1ea28:	bl	239c4 <__assert_fail@plt+0x12254>
   1ea2c:	cmp	r0, #0
   1ea30:	beq	1ecac <__assert_fail@plt+0xd53c>
   1ea34:	str	r6, [r4, #12]
   1ea38:	str	r0, [r4, #20]
   1ea3c:	b	1e980 <__assert_fail@plt+0xd210>
   1ea40:	ldr	r0, [r7, #108]	; 0x6c
   1ea44:	b	1ea4c <__assert_fail@plt+0xd2dc>
   1ea48:	mov	r0, r8
   1ea4c:	mov	r1, #0
   1ea50:	cmp	r8, r0
   1ea54:	str	r1, [fp, #-32]	; 0xffffffe0
   1ea58:	bge	1ec58 <__assert_fail@plt+0xd4e8>
   1ea5c:	add	r0, r8, r8, lsl #1
   1ea60:	lsl	r4, r0, #3
   1ea64:	ldr	r0, [r7, #116]	; 0x74
   1ea68:	ldr	r2, [sp, #48]	; 0x30
   1ea6c:	ldr	r1, [r0, r4]
   1ea70:	cmp	r1, r2
   1ea74:	bne	1ec40 <__assert_fail@plt+0xd4d0>
   1ea78:	add	r0, r0, r4
   1ea7c:	ldr	r2, [sp, #52]	; 0x34
   1ea80:	ldr	r1, [r0, #4]
   1ea84:	cmp	r1, r2
   1ea88:	bne	1ec40 <__assert_fail@plt+0xd4d0>
   1ea8c:	ldr	r2, [r0, #8]
   1ea90:	ldr	r3, [r0, #12]
   1ea94:	ldr	r0, [sp, #24]
   1ea98:	mov	r9, r8
   1ea9c:	ldr	r6, [r0, #24]
   1eaa0:	cmp	r3, r2
   1eaa4:	bne	1eac0 <__assert_fail@plt+0xd350>
   1eaa8:	ldr	r1, [sp, #48]	; 0x30
   1eaac:	ldr	r0, [r0, #20]
   1eab0:	add	r1, r1, r1, lsl #1
   1eab4:	add	r0, r0, r1, lsl #2
   1eab8:	ldr	r0, [r0, #8]
   1eabc:	b	1eacc <__assert_fail@plt+0xd35c>
   1eac0:	ldr	r0, [r0, #12]
   1eac4:	ldr	r1, [sp, #48]	; 0x30
   1eac8:	add	r0, r0, r1, lsl #2
   1eacc:	ldr	r0, [r0]
   1ead0:	ldr	r8, [sp, #52]	; 0x34
   1ead4:	ldr	r5, [sp, #40]	; 0x28
   1ead8:	str	r2, [fp, #-48]	; 0xffffffd0
   1eadc:	str	r3, [sp, #44]	; 0x2c
   1eae0:	add	r7, r0, r0, lsl #1
   1eae4:	add	r0, r3, r8
   1eae8:	sub	sl, r0, r2
   1eaec:	ldr	r2, [r5, #88]	; 0x58
   1eaf0:	mov	r0, r5
   1eaf4:	sub	r1, sl, #1
   1eaf8:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1eafc:	mov	r3, r0
   1eb00:	ldr	r0, [r5, #100]	; 0x64
   1eb04:	ldr	r1, [r0, r8, lsl #2]
   1eb08:	ldr	r2, [r0, sl, lsl #2]
   1eb0c:	cmp	r1, #0
   1eb10:	beq	1eb1c <__assert_fail@plt+0xd3ac>
   1eb14:	ldr	r0, [r1, #8]
   1eb18:	b	1eb20 <__assert_fail@plt+0xd3b0>
   1eb1c:	mov	r0, #0
   1eb20:	add	r7, r6, r7, lsl #2
   1eb24:	str	r0, [sp, #36]	; 0x24
   1eb28:	sub	r0, fp, #44	; 0x2c
   1eb2c:	cmp	r2, #0
   1eb30:	mov	r8, r9
   1eb34:	beq	1eba0 <__assert_fail@plt+0xd430>
   1eb38:	ldr	r1, [r2, #40]	; 0x28
   1eb3c:	mov	r2, r7
   1eb40:	mov	r6, r3
   1eb44:	mov	r5, r0
   1eb48:	bl	1eee0 <__assert_fail@plt+0xd770>
   1eb4c:	cmp	r0, #0
   1eb50:	str	r0, [fp, #-32]	; 0xffffffe0
   1eb54:	bne	1ec94 <__assert_fail@plt+0xd524>
   1eb58:	ldr	r1, [sp, #24]
   1eb5c:	sub	r0, fp, #32
   1eb60:	mov	r2, r5
   1eb64:	mov	r3, r6
   1eb68:	bl	1d75c <__assert_fail@plt+0xbfec>
   1eb6c:	ldr	r5, [sp, #40]	; 0x28
   1eb70:	ldr	r1, [r5, #100]	; 0x64
   1eb74:	str	r0, [r1, sl, lsl #2]
   1eb78:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1eb7c:	bl	13bd0 <__assert_fail@plt+0x2460>
   1eb80:	ldr	r3, [r5, #100]	; 0x64
   1eb84:	ldr	r1, [r3, sl, lsl #2]
   1eb88:	cmp	r1, #0
   1eb8c:	bne	1ebe0 <__assert_fail@plt+0xd470>
   1eb90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1eb94:	cmp	r0, #0
   1eb98:	beq	1ebe0 <__assert_fail@plt+0xd470>
   1eb9c:	b	1ec7c <__assert_fail@plt+0xd50c>
   1eba0:	ldr	r1, [sp, #24]
   1eba4:	sub	r0, fp, #32
   1eba8:	mov	r2, r7
   1ebac:	bl	1d75c <__assert_fail@plt+0xbfec>
   1ebb0:	ldr	r1, [r5, #100]	; 0x64
   1ebb4:	str	r0, [r1, sl, lsl #2]
   1ebb8:	ldr	r3, [r5, #100]	; 0x64
   1ebbc:	ldr	r1, [r3, sl, lsl #2]
   1ebc0:	cmp	r1, #0
   1ebc4:	bne	1ebe0 <__assert_fail@plt+0xd470>
   1ebc8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ebcc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1ebd0:	ldr	r2, [sp, #44]	; 0x2c
   1ebd4:	cmp	r0, #0
   1ebd8:	beq	1ebe8 <__assert_fail@plt+0xd478>
   1ebdc:	b	1ec7c <__assert_fail@plt+0xd50c>
   1ebe0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1ebe4:	ldr	r2, [sp, #44]	; 0x2c
   1ebe8:	cmp	r2, r1
   1ebec:	bne	1ec40 <__assert_fail@plt+0xd4d0>
   1ebf0:	ldr	r1, [sp, #52]	; 0x34
   1ebf4:	ldr	r0, [r3, r1, lsl #2]
   1ebf8:	ldr	r1, [sp, #36]	; 0x24
   1ebfc:	ldr	r0, [r0, #8]
   1ec00:	cmp	r0, r1
   1ec04:	ble	1ec40 <__assert_fail@plt+0xd4d0>
   1ec08:	ldr	r5, [sp, #40]	; 0x28
   1ec0c:	ldr	r2, [sp, #52]	; 0x34
   1ec10:	mov	r1, r7
   1ec14:	mov	r0, r5
   1ec18:	bl	1e4b0 <__assert_fail@plt+0xcd40>
   1ec1c:	cmp	r0, #0
   1ec20:	str	r0, [fp, #-32]	; 0xffffffe0
   1ec24:	bne	1ec7c <__assert_fail@plt+0xd50c>
   1ec28:	mov	r0, r5
   1ec2c:	mov	r1, r7
   1ec30:	bl	1e5a8 <__assert_fail@plt+0xce38>
   1ec34:	cmp	r0, #0
   1ec38:	str	r0, [fp, #-32]	; 0xffffffe0
   1ec3c:	bne	1ec7c <__assert_fail@plt+0xd50c>
   1ec40:	ldr	r7, [sp, #40]	; 0x28
   1ec44:	add	r8, r8, #1
   1ec48:	add	r4, r4, #24
   1ec4c:	ldr	r0, [r7, #108]	; 0x6c
   1ec50:	cmp	r8, r0
   1ec54:	blt	1ea64 <__assert_fail@plt+0xd2f4>
   1ec58:	ldr	r1, [sp, #12]
   1ec5c:	ldr	r3, [sp, #20]
   1ec60:	ldr	r2, [sp, #24]
   1ec64:	ldr	r0, [r1, #4]
   1ec68:	add	r3, r3, #1
   1ec6c:	cmp	r3, r0
   1ec70:	blt	1e5e0 <__assert_fail@plt+0xce70>
   1ec74:	mov	r0, #0
   1ec78:	str	r0, [fp, #-32]	; 0xffffffe0
   1ec7c:	sub	sp, fp, #28
   1ec80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec84:	mov	r7, r0
   1ec88:	str	r7, [fp, #-32]	; 0xffffffe0
   1ec8c:	mov	r0, r7
   1ec90:	b	1ec7c <__assert_fail@plt+0xd50c>
   1ec94:	mov	r1, r0
   1ec98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1ec9c:	mov	r4, r1
   1eca0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1eca4:	mov	r0, r4
   1eca8:	b	1ec7c <__assert_fail@plt+0xd50c>
   1ecac:	mov	r7, #12
   1ecb0:	b	1ec88 <__assert_fail@plt+0xd518>
   1ecb4:	push	{r4, r5, fp, lr}
   1ecb8:	add	fp, sp, #8
   1ecbc:	mov	r4, r0
   1ecc0:	ldr	r0, [r0, #36]	; 0x24
   1ecc4:	mov	r5, #12
   1ecc8:	cmn	r0, #-536870910	; 0xe0000002
   1eccc:	bhi	1ed84 <__assert_fail@plt+0xd614>
   1ecd0:	ldr	r2, [r4, #48]	; 0x30
   1ecd4:	cmp	r2, r0, lsl #1
   1ecd8:	lslge	r2, r0, #1
   1ecdc:	mov	r0, r4
   1ece0:	cmp	r2, r1
   1ece4:	movle	r2, r1
   1ece8:	mov	r1, r2
   1ecec:	bl	18ca8 <__assert_fail@plt+0x7538>
   1ecf0:	cmp	r0, #0
   1ecf4:	bne	1ed48 <__assert_fail@plt+0xd5d8>
   1ecf8:	ldr	r0, [r4, #100]	; 0x64
   1ecfc:	cmp	r0, #0
   1ed00:	beq	1ed20 <__assert_fail@plt+0xd5b0>
   1ed04:	ldr	r1, [r4, #36]	; 0x24
   1ed08:	mov	r2, #4
   1ed0c:	add	r1, r2, r1, lsl #2
   1ed10:	bl	239c4 <__assert_fail@plt+0x12254>
   1ed14:	cmp	r0, #0
   1ed18:	beq	1ed84 <__assert_fail@plt+0xd614>
   1ed1c:	str	r0, [r4, #100]	; 0x64
   1ed20:	ldrb	r1, [r4, #72]	; 0x48
   1ed24:	ldr	r0, [r4, #80]	; 0x50
   1ed28:	cmp	r1, #0
   1ed2c:	beq	1ed50 <__assert_fail@plt+0xd5e0>
   1ed30:	cmp	r0, #2
   1ed34:	blt	1ed64 <__assert_fail@plt+0xd5f4>
   1ed38:	mov	r0, r4
   1ed3c:	bl	18d48 <__assert_fail@plt+0x75d8>
   1ed40:	cmp	r0, #0
   1ed44:	beq	1ed80 <__assert_fail@plt+0xd610>
   1ed48:	mov	r5, r0
   1ed4c:	b	1ed84 <__assert_fail@plt+0xd614>
   1ed50:	cmp	r0, #2
   1ed54:	blt	1ed70 <__assert_fail@plt+0xd600>
   1ed58:	mov	r0, r4
   1ed5c:	bl	19384 <__assert_fail@plt+0x7c14>
   1ed60:	b	1ed80 <__assert_fail@plt+0xd610>
   1ed64:	mov	r0, r4
   1ed68:	bl	19318 <__assert_fail@plt+0x7ba8>
   1ed6c:	b	1ed80 <__assert_fail@plt+0xd610>
   1ed70:	ldr	r0, [r4, #64]	; 0x40
   1ed74:	cmp	r0, #0
   1ed78:	movne	r0, r4
   1ed7c:	blne	19570 <__assert_fail@plt+0x7e00>
   1ed80:	mov	r5, #0
   1ed84:	mov	r0, r5
   1ed88:	pop	{r4, r5, fp, pc}
   1ed8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ed90:	add	fp, sp, #24
   1ed94:	sub	sp, sp, #16
   1ed98:	mov	r8, r0
   1ed9c:	mov	r4, r1
   1eda0:	ldr	r5, [r1, #40]	; 0x28
   1eda4:	ldr	r7, [r1, #84]	; 0x54
   1eda8:	ldr	r0, [r1, #100]	; 0x64
   1edac:	ldr	r1, [r1, #104]	; 0x68
   1edb0:	mov	r6, r2
   1edb4:	cmp	r5, r1
   1edb8:	ble	1edc8 <__assert_fail@plt+0xd658>
   1edbc:	str	r6, [r0, r5, lsl #2]
   1edc0:	str	r5, [r4, #104]	; 0x68
   1edc4:	b	1ee6c <__assert_fail@plt+0xd6fc>
   1edc8:	ldr	r1, [r0, r5, lsl #2]
   1edcc:	cmp	r1, #0
   1edd0:	beq	1ee0c <__assert_fail@plt+0xd69c>
   1edd4:	ldr	r2, [r1, #40]	; 0x28
   1edd8:	cmp	r6, #0
   1eddc:	beq	1ee14 <__assert_fail@plt+0xd6a4>
   1ede0:	ldr	r6, [r6, #40]	; 0x28
   1ede4:	mov	r0, sp
   1ede8:	mov	r1, r6
   1edec:	bl	1eee0 <__assert_fail@plt+0xd770>
   1edf0:	cmp	r0, #0
   1edf4:	str	r0, [r8]
   1edf8:	bne	1eed8 <__assert_fail@plt+0xd768>
   1edfc:	ldr	r0, [r4, #40]	; 0x28
   1ee00:	clz	r1, r6
   1ee04:	lsr	r9, r1, #5
   1ee08:	b	1ee2c <__assert_fail@plt+0xd6bc>
   1ee0c:	str	r6, [r0, r5, lsl #2]
   1ee10:	b	1ee6c <__assert_fail@plt+0xd6fc>
   1ee14:	vldr	d16, [r2]
   1ee18:	ldr	r0, [r2, #8]
   1ee1c:	mov	r9, #1
   1ee20:	str	r0, [sp, #8]
   1ee24:	mov	r0, r5
   1ee28:	vstr	d16, [sp]
   1ee2c:	ldr	r2, [r4, #88]	; 0x58
   1ee30:	sub	r1, r0, #1
   1ee34:	mov	r0, r4
   1ee38:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1ee3c:	mov	r3, r0
   1ee40:	mov	r2, sp
   1ee44:	mov	r0, r8
   1ee48:	mov	r1, r7
   1ee4c:	bl	1d75c <__assert_fail@plt+0xbfec>
   1ee50:	mov	r6, r0
   1ee54:	ldr	r0, [r4, #100]	; 0x64
   1ee58:	cmp	r9, #0
   1ee5c:	str	r6, [r0, r5, lsl #2]
   1ee60:	bne	1ee6c <__assert_fail@plt+0xd6fc>
   1ee64:	ldr	r0, [sp, #8]
   1ee68:	bl	13bd0 <__assert_fail@plt+0x2460>
   1ee6c:	cmp	r6, #0
   1ee70:	ldrne	r0, [r7, #76]	; 0x4c
   1ee74:	cmpne	r0, #0
   1ee78:	bne	1ee88 <__assert_fail@plt+0xd718>
   1ee7c:	mov	r0, r6
   1ee80:	sub	sp, fp, #24
   1ee84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ee88:	add	r7, r6, #4
   1ee8c:	mov	r0, r4
   1ee90:	mov	r2, r5
   1ee94:	mov	r1, r7
   1ee98:	bl	1e4b0 <__assert_fail@plt+0xcd40>
   1ee9c:	cmp	r0, #0
   1eea0:	str	r0, [r8]
   1eea4:	bne	1eed8 <__assert_fail@plt+0xd768>
   1eea8:	ldrb	r0, [r6, #52]	; 0x34
   1eeac:	tst	r0, #64	; 0x40
   1eeb0:	beq	1ee7c <__assert_fail@plt+0xd70c>
   1eeb4:	mov	r0, r4
   1eeb8:	mov	r1, r7
   1eebc:	bl	1e5a8 <__assert_fail@plt+0xce38>
   1eec0:	str	r0, [r8]
   1eec4:	cmp	r0, #0
   1eec8:	mov	r6, #0
   1eecc:	ldreq	r0, [r4, #100]	; 0x64
   1eed0:	ldreq	r6, [r0, r5, lsl #2]
   1eed4:	b	1ee7c <__assert_fail@plt+0xd70c>
   1eed8:	mov	r6, #0
   1eedc:	b	1ee7c <__assert_fail@plt+0xd70c>
   1eee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eee4:	add	fp, sp, #28
   1eee8:	sub	sp, sp, #20
   1eeec:	mov	r8, r2
   1eef0:	cmp	r1, #0
   1eef4:	str	r0, [sp, #16]
   1eef8:	beq	1f034 <__assert_fail@plt+0xd8c4>
   1eefc:	ldr	r0, [r1, #4]
   1ef00:	mov	r6, r1
   1ef04:	cmp	r8, #0
   1ef08:	beq	1f020 <__assert_fail@plt+0xd8b0>
   1ef0c:	cmp	r0, #1
   1ef10:	blt	1f020 <__assert_fail@plt+0xd8b0>
   1ef14:	ldr	r1, [r8, #4]
   1ef18:	cmp	r1, #1
   1ef1c:	blt	1f020 <__assert_fail@plt+0xd8b0>
   1ef20:	ldr	r4, [sp, #16]
   1ef24:	add	r0, r1, r0
   1ef28:	str	r0, [r4]
   1ef2c:	lsl	r0, r0, #2
   1ef30:	bl	23994 <__assert_fail@plt+0x12224>
   1ef34:	cmp	r0, #0
   1ef38:	str	r0, [r4, #8]
   1ef3c:	beq	1f0e0 <__assert_fail@plt+0xd970>
   1ef40:	ldr	r9, [r8, #4]
   1ef44:	ldr	lr, [r6, #4]
   1ef48:	mov	r7, #0
   1ef4c:	mov	r1, #0
   1ef50:	cmp	r9, #0
   1ef54:	movwgt	r1, #1
   1ef58:	cmp	lr, #1
   1ef5c:	blt	1f074 <__assert_fail@plt+0xd904>
   1ef60:	mov	r2, #0
   1ef64:	mov	ip, #0
   1ef68:	str	r2, [sp, #8]
   1ef6c:	mov	r2, #0
   1ef70:	str	r2, [sp, #12]
   1ef74:	mov	r2, #0
   1ef78:	ldr	r4, [sp, #12]
   1ef7c:	mov	r7, ip
   1ef80:	tst	r1, #1
   1ef84:	beq	1f0a4 <__assert_fail@plt+0xd934>
   1ef88:	ldr	r1, [r8, #8]
   1ef8c:	ldr	r3, [r1, r7, lsl #2]
   1ef90:	ldr	r1, [r6, #8]
   1ef94:	ldr	sl, [r1, r2, lsl #2]
   1ef98:	cmp	sl, r3
   1ef9c:	ble	1efc4 <__assert_fail@plt+0xd854>
   1efa0:	add	r7, r7, #1
   1efa4:	str	r3, [r0, r4, lsl #2]
   1efa8:	mov	r1, #0
   1efac:	add	r4, r4, #1
   1efb0:	cmp	r9, r7
   1efb4:	movwgt	r1, #1
   1efb8:	cmp	lr, r2
   1efbc:	bgt	1ef80 <__assert_fail@plt+0xd810>
   1efc0:	b	1f078 <__assert_fail@plt+0xd908>
   1efc4:	add	r1, r7, #1
   1efc8:	str	sl, [r0, r4, lsl #2]
   1efcc:	mov	ip, r7
   1efd0:	add	r2, r2, #1
   1efd4:	str	r1, [sp, #4]
   1efd8:	ldr	r9, [r8, #4]
   1efdc:	ldr	lr, [r6, #4]
   1efe0:	moveq	ip, r1
   1efe4:	mov	r1, #0
   1efe8:	ldr	r5, [sp, #8]
   1efec:	cmp	r9, ip
   1eff0:	sub	r5, r5, #1
   1eff4:	movwgt	r1, #1
   1eff8:	cmp	lr, r2
   1effc:	str	r5, [sp, #8]
   1f000:	add	r5, r4, #1
   1f004:	str	r5, [sp, #12]
   1f008:	bgt	1ef78 <__assert_fail@plt+0xd808>
   1f00c:	ldr	r2, [sp, #4]
   1f010:	cmp	sl, r3
   1f014:	add	r4, r4, #1
   1f018:	moveq	r7, r2
   1f01c:	b	1f078 <__assert_fail@plt+0xd908>
   1f020:	cmp	r0, #1
   1f024:	blt	1f034 <__assert_fail@plt+0xd8c4>
   1f028:	ldr	r0, [sp, #16]
   1f02c:	mov	r1, r6
   1f030:	b	1f050 <__assert_fail@plt+0xd8e0>
   1f034:	cmp	r8, #0
   1f038:	beq	1f05c <__assert_fail@plt+0xd8ec>
   1f03c:	ldr	r0, [r8, #4]
   1f040:	cmp	r0, #1
   1f044:	blt	1f05c <__assert_fail@plt+0xd8ec>
   1f048:	ldr	r0, [sp, #16]
   1f04c:	mov	r1, r8
   1f050:	sub	sp, fp, #28
   1f054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f058:	b	1d678 <__assert_fail@plt+0xbf08>
   1f05c:	ldr	r1, [sp, #16]
   1f060:	mov	r0, #0
   1f064:	str	r0, [r1]
   1f068:	str	r0, [r1, #4]
   1f06c:	str	r0, [r1, #8]
   1f070:	b	1f0d8 <__assert_fail@plt+0xd968>
   1f074:	mov	r4, #0
   1f078:	cmp	r1, #0
   1f07c:	beq	1f0cc <__assert_fail@plt+0xd95c>
   1f080:	ldr	r1, [r8, #8]
   1f084:	sub	r2, r9, r7
   1f088:	add	r0, r0, r4, lsl #2
   1f08c:	lsl	r2, r2, #2
   1f090:	add	r1, r1, r7, lsl #2
   1f094:	bl	11488 <memcpy@plt>
   1f098:	sub	r0, r4, r7
   1f09c:	add	r4, r0, r9
   1f0a0:	b	1f0cc <__assert_fail@plt+0xd95c>
   1f0a4:	ldr	r1, [r6, #8]
   1f0a8:	add	r0, r0, r4, lsl #2
   1f0ac:	add	r1, r1, r2, lsl #2
   1f0b0:	sub	r2, lr, r2
   1f0b4:	lsl	r2, r2, #2
   1f0b8:	bl	11488 <memcpy@plt>
   1f0bc:	ldr	r0, [r6, #4]
   1f0c0:	ldr	r1, [sp, #8]
   1f0c4:	add	r0, r0, r1
   1f0c8:	add	r4, r0, r4
   1f0cc:	ldr	r0, [sp, #16]
   1f0d0:	str	r4, [r0, #4]
   1f0d4:	mov	r0, #0
   1f0d8:	sub	sp, fp, #28
   1f0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0e0:	mov	r0, #12
   1f0e4:	b	1f0d8 <__assert_fail@plt+0xd968>
   1f0e8:	push	{r4, r5, r6, r7, fp, lr}
   1f0ec:	add	fp, sp, #16
   1f0f0:	ldr	lr, [r0, #108]	; 0x6c
   1f0f4:	mov	ip, r0
   1f0f8:	cmp	lr, #1
   1f0fc:	blt	1f140 <__assert_fail@plt+0xd9d0>
   1f100:	ldr	r2, [ip, #116]	; 0x74
   1f104:	mov	r0, #0
   1f108:	mov	r3, #1
   1f10c:	mov	r4, lr
   1f110:	add	r5, r0, r4
   1f114:	add	r5, r5, r5, lsr #31
   1f118:	asr	r6, r5, #1
   1f11c:	add	r7, r6, r6, lsl #1
   1f120:	add	r7, r2, r7, lsl #3
   1f124:	ldr	r7, [r7, #4]
   1f128:	cmp	r7, r1
   1f12c:	addlt	r0, r3, r5, asr #1
   1f130:	movge	r4, r6
   1f134:	cmp	r0, r4
   1f138:	blt	1f110 <__assert_fail@plt+0xd9a0>
   1f13c:	b	1f144 <__assert_fail@plt+0xd9d4>
   1f140:	mov	r0, #0
   1f144:	cmp	r0, lr
   1f148:	bge	1f168 <__assert_fail@plt+0xd9f8>
   1f14c:	ldr	r2, [ip, #116]	; 0x74
   1f150:	add	r3, r0, r0, lsl #1
   1f154:	add	r2, r2, r3, lsl #3
   1f158:	ldr	r2, [r2, #4]
   1f15c:	cmp	r2, r1
   1f160:	mvnne	r0, #0
   1f164:	pop	{r4, r5, r6, r7, fp, pc}
   1f168:	mvn	r0, #0
   1f16c:	pop	{r4, r5, r6, r7, fp, pc}
   1f170:	push	{r4, r5, r6, r7, fp, lr}
   1f174:	add	fp, sp, #16
   1f178:	mov	r5, r0
   1f17c:	ldr	r0, [r0, #36]	; 0x24
   1f180:	mov	r4, r1
   1f184:	ldr	r7, [r5, #104]	; 0x68
   1f188:	cmp	r0, r1
   1f18c:	bgt	1f19c <__assert_fail@plt+0xda2c>
   1f190:	ldr	r1, [r5, #48]	; 0x30
   1f194:	cmp	r0, r1
   1f198:	blt	1f1b4 <__assert_fail@plt+0xda44>
   1f19c:	ldr	r0, [r5, #28]
   1f1a0:	cmp	r0, r4
   1f1a4:	bgt	1f1cc <__assert_fail@plt+0xda5c>
   1f1a8:	ldr	r1, [r5, #48]	; 0x30
   1f1ac:	cmp	r0, r1
   1f1b0:	bge	1f1cc <__assert_fail@plt+0xda5c>
   1f1b4:	add	r1, r4, #1
   1f1b8:	mov	r0, r5
   1f1bc:	bl	1ecb4 <__assert_fail@plt+0xd544>
   1f1c0:	mov	r6, r0
   1f1c4:	cmp	r0, #0
   1f1c8:	bne	1f1fc <__assert_fail@plt+0xda8c>
   1f1cc:	mov	r6, #0
   1f1d0:	cmp	r7, r4
   1f1d4:	bge	1f1fc <__assert_fail@plt+0xda8c>
   1f1d8:	sub	r0, r4, r7
   1f1dc:	mov	r1, #0
   1f1e0:	mov	r6, #0
   1f1e4:	lsl	r2, r0, #2
   1f1e8:	ldr	r0, [r5, #100]	; 0x64
   1f1ec:	add	r0, r0, r7, lsl #2
   1f1f0:	add	r0, r0, #4
   1f1f4:	bl	1165c <memset@plt>
   1f1f8:	str	r4, [r5, #104]	; 0x68
   1f1fc:	mov	r0, r6
   1f200:	pop	{r4, r5, r6, r7, fp, pc}
   1f204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f208:	add	fp, sp, #28
   1f20c:	sub	sp, sp, #12
   1f210:	mov	r6, r2
   1f214:	mov	r4, r0
   1f218:	mov	r0, #8
   1f21c:	mov	r7, r3
   1f220:	ldr	r2, [r2]
   1f224:	mov	r8, r1
   1f228:	ldr	r3, [r6, #4]
   1f22c:	str	r0, [sp, #8]
   1f230:	add	r1, r6, #8
   1f234:	mov	r0, r4
   1f238:	ldr	r5, [fp, #8]
   1f23c:	str	r7, [sp]
   1f240:	str	r5, [sp, #4]
   1f244:	bl	1f354 <__assert_fail@plt+0xdbe4>
   1f248:	cmp	r0, #0
   1f24c:	beq	1f258 <__assert_fail@plt+0xdae8>
   1f250:	sub	sp, fp, #28
   1f254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f258:	ldr	r0, [r4, #108]	; 0x6c
   1f25c:	ldr	r1, [r4, #112]	; 0x70
   1f260:	ldr	r9, [r6, #4]
   1f264:	ldr	sl, [r8]
   1f268:	cmp	r0, r1
   1f26c:	blt	1f2bc <__assert_fail@plt+0xdb4c>
   1f270:	ldr	r0, [r4, #116]	; 0x74
   1f274:	add	r1, r1, r1, lsl #1
   1f278:	lsl	r1, r1, #4
   1f27c:	bl	239c4 <__assert_fail@plt+0x12254>
   1f280:	cmp	r0, #0
   1f284:	beq	1f344 <__assert_fail@plt+0xdbd4>
   1f288:	str	r0, [r4, #116]	; 0x74
   1f28c:	ldr	r1, [r4, #108]	; 0x6c
   1f290:	ldr	r2, [r4, #112]	; 0x70
   1f294:	add	r1, r1, r1, lsl #1
   1f298:	add	r0, r0, r1, lsl #3
   1f29c:	add	r1, r2, r2, lsl #1
   1f2a0:	lsl	r2, r1, #3
   1f2a4:	mov	r1, #0
   1f2a8:	bl	1165c <memset@plt>
   1f2ac:	ldr	r1, [r4, #112]	; 0x70
   1f2b0:	ldr	r0, [r4, #108]	; 0x6c
   1f2b4:	lsl	r1, r1, #1
   1f2b8:	str	r1, [r4, #112]	; 0x70
   1f2bc:	ldr	r1, [r4, #116]	; 0x74
   1f2c0:	cmp	r0, #1
   1f2c4:	blt	1f2e4 <__assert_fail@plt+0xdb74>
   1f2c8:	sub	r2, r0, #1
   1f2cc:	add	r2, r2, r2, lsl #1
   1f2d0:	add	r2, r1, r2, lsl #3
   1f2d4:	ldr	r3, [r2, #4]
   1f2d8:	cmp	r3, r5
   1f2dc:	moveq	r3, #1
   1f2e0:	strbeq	r3, [r2, #20]
   1f2e4:	add	r2, r0, r0, lsl #1
   1f2e8:	cmp	r9, sl
   1f2ec:	mov	r3, #0
   1f2f0:	mov	ip, #0
   1f2f4:	add	r0, r0, #1
   1f2f8:	mvneq	r3, #0
   1f2fc:	str	r7, [r1, r2, lsl #3]!
   1f300:	stmib	r1, {r5, sl}
   1f304:	str	r9, [r1, #12]
   1f308:	str	r3, [r1, #16]
   1f30c:	str	r0, [r4, #108]	; 0x6c
   1f310:	strb	ip, [r1, #20]
   1f314:	sub	r0, r9, sl
   1f318:	ldr	r1, [r4, #120]	; 0x78
   1f31c:	cmp	r1, r0
   1f320:	strlt	r0, [r4, #120]	; 0x78
   1f324:	ldr	r0, [r6, #4]
   1f328:	ldr	r1, [r8]
   1f32c:	add	r0, r0, r5
   1f330:	sub	r1, r0, r1
   1f334:	mov	r0, r4
   1f338:	sub	sp, fp, #28
   1f33c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f340:	b	1f170 <__assert_fail@plt+0xda00>
   1f344:	ldr	r0, [r4, #116]	; 0x74
   1f348:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f34c:	mov	r0, #12
   1f350:	b	1f250 <__assert_fail@plt+0xdae0>
   1f354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f358:	add	fp, sp, #28
   1f35c:	sub	sp, sp, #84	; 0x54
   1f360:	ldr	sl, [r0, #84]	; 0x54
   1f364:	mov	r6, r3
   1f368:	mov	r3, r1
   1f36c:	mov	r1, #0
   1f370:	ldr	r5, [fp, #12]
   1f374:	mov	r8, r2
   1f378:	str	r0, [sp, #36]	; 0x24
   1f37c:	str	r1, [fp, #-52]	; 0xffffffcc
   1f380:	ldr	r4, [r3, #4]
   1f384:	ldr	r1, [sl]
   1f388:	str	sl, [sp, #20]
   1f38c:	ldr	r7, [r1, r2, lsl #3]
   1f390:	ldr	r1, [r0, #120]	; 0x78
   1f394:	add	r2, r1, r5
   1f398:	cmp	r4, r2
   1f39c:	str	r7, [sp, #24]
   1f3a0:	ble	1f85c <__assert_fail@plt+0xe0ec>
   1f3a4:	ldr	r1, [r0, #40]	; 0x28
   1f3a8:	ldr	r4, [r3]
   1f3ac:	ldr	r2, [r0, #88]	; 0x58
   1f3b0:	ldr	r9, [r3, #8]
   1f3b4:	str	r3, [sp, #16]
   1f3b8:	str	r1, [sp, #12]
   1f3bc:	ldr	r1, [r0, #100]	; 0x64
   1f3c0:	cmp	r4, #0
   1f3c4:	str	r9, [r0, #100]	; 0x64
   1f3c8:	moveq	r4, r6
   1f3cc:	str	r4, [r0, #40]	; 0x28
   1f3d0:	str	r1, [sp, #8]
   1f3d4:	sub	r1, r4, #1
   1f3d8:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1f3dc:	cmp	r4, r6
   1f3e0:	bne	1f4a8 <__assert_fail@plt+0xdd38>
   1f3e4:	str	r0, [sp, #44]	; 0x2c
   1f3e8:	mov	r0, #1
   1f3ec:	str	r0, [sp, #52]	; 0x34
   1f3f0:	str	r0, [sp, #48]	; 0x30
   1f3f4:	mov	r0, #4
   1f3f8:	bl	23994 <__assert_fail@plt+0x12224>
   1f3fc:	cmp	r0, #0
   1f400:	str	r0, [sp, #56]	; 0x38
   1f404:	beq	1f8d8 <__assert_fail@plt+0xe168>
   1f408:	ldr	r3, [fp, #16]
   1f40c:	str	r8, [r0]
   1f410:	mov	r0, #0
   1f414:	add	r1, sp, #48	; 0x30
   1f418:	mov	r2, r7
   1f41c:	str	r0, [fp, #-52]	; 0xffffffcc
   1f420:	mov	r0, sl
   1f424:	bl	1f8f8 <__assert_fail@plt+0xe188>
   1f428:	ldr	r8, [sp, #36]	; 0x24
   1f42c:	cmp	r0, #0
   1f430:	mov	r9, r5
   1f434:	str	r0, [fp, #-52]	; 0xffffffcc
   1f438:	bne	1f8c8 <__assert_fail@plt+0xe158>
   1f43c:	ldr	r0, [sp, #52]	; 0x34
   1f440:	cmp	r0, #0
   1f444:	beq	1f470 <__assert_fail@plt+0xdd00>
   1f448:	ldr	r0, [fp, #16]
   1f44c:	ldr	r3, [sp, #24]
   1f450:	add	r1, sp, #48	; 0x30
   1f454:	mov	r2, r4
   1f458:	str	r0, [sp]
   1f45c:	mov	r0, r8
   1f460:	bl	1fa28 <__assert_fail@plt+0xe2b8>
   1f464:	cmp	r0, #0
   1f468:	str	r0, [fp, #-52]	; 0xffffffcc
   1f46c:	bne	1f8c8 <__assert_fail@plt+0xe158>
   1f470:	ldr	r3, [sp, #44]	; 0x2c
   1f474:	sub	r0, fp, #52	; 0x34
   1f478:	add	r2, sp, #48	; 0x30
   1f47c:	mov	r1, sl
   1f480:	bl	1d75c <__assert_fail@plt+0xbfec>
   1f484:	mov	r6, r0
   1f488:	cmp	r0, #0
   1f48c:	bne	1f49c <__assert_fail@plt+0xdd2c>
   1f490:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f494:	cmp	r0, #0
   1f498:	bne	1f844 <__assert_fail@plt+0xe0d4>
   1f49c:	ldr	r0, [r8, #100]	; 0x64
   1f4a0:	str	r6, [r0, r4, lsl #2]
   1f4a4:	b	1f520 <__assert_fail@plt+0xddb0>
   1f4a8:	ldr	r6, [r9, r4, lsl #2]
   1f4ac:	cmp	r6, #0
   1f4b0:	beq	1f4dc <__assert_fail@plt+0xdd6c>
   1f4b4:	ldrb	r1, [r6, #52]	; 0x34
   1f4b8:	ldr	r8, [sp, #36]	; 0x24
   1f4bc:	mov	r9, r5
   1f4c0:	tst	r1, #64	; 0x40
   1f4c4:	bne	1f4f8 <__assert_fail@plt+0xdd88>
   1f4c8:	mov	r0, #0
   1f4cc:	str	r0, [sp, #52]	; 0x34
   1f4d0:	str	r0, [sp, #48]	; 0x30
   1f4d4:	str	r0, [sp, #56]	; 0x38
   1f4d8:	b	1f520 <__assert_fail@plt+0xddb0>
   1f4dc:	ldr	r8, [sp, #36]	; 0x24
   1f4e0:	mov	r6, #0
   1f4e4:	mov	r9, r5
   1f4e8:	str	r6, [sp, #52]	; 0x34
   1f4ec:	str	r6, [sp, #48]	; 0x30
   1f4f0:	str	r6, [sp, #56]	; 0x38
   1f4f4:	b	1f520 <__assert_fail@plt+0xddb0>
   1f4f8:	str	r0, [sp, #44]	; 0x2c
   1f4fc:	add	r1, r6, #4
   1f500:	add	r0, sp, #48	; 0x30
   1f504:	bl	1d678 <__assert_fail@plt+0xbf08>
   1f508:	cmp	r0, #0
   1f50c:	str	r0, [fp, #-52]	; 0xffffffcc
   1f510:	bne	1f8f0 <__assert_fail@plt+0xe180>
   1f514:	ldrb	r0, [r6, #52]	; 0x34
   1f518:	tst	r0, #64	; 0x40
   1f51c:	bne	1f43c <__assert_fail@plt+0xdccc>
   1f520:	cmp	r4, r9
   1f524:	bge	1f7d8 <__assert_fail@plt+0xe068>
   1f528:	str	r4, [sp, #44]	; 0x2c
   1f52c:	ldr	r4, [sp, #24]
   1f530:	add	r5, sp, #48	; 0x30
   1f534:	mov	r1, #0
   1f538:	ldr	r0, [r8, #120]	; 0x78
   1f53c:	cmp	r1, r0
   1f540:	bgt	1f7d4 <__assert_fail@plt+0xe064>
   1f544:	mov	r0, #0
   1f548:	str	r1, [sp, #32]
   1f54c:	ldr	r1, [sp, #44]	; 0x2c
   1f550:	str	r0, [sp, #52]	; 0x34
   1f554:	ldr	r0, [r8, #100]	; 0x64
   1f558:	add	r7, r1, #1
   1f55c:	ldr	r0, [r0, r7, lsl #2]
   1f560:	cmp	r0, #0
   1f564:	beq	1f580 <__assert_fail@plt+0xde10>
   1f568:	add	r1, r0, #4
   1f56c:	mov	r0, r5
   1f570:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   1f574:	cmp	r0, #0
   1f578:	str	r0, [fp, #-52]	; 0xffffffcc
   1f57c:	bne	1f844 <__assert_fail@plt+0xe0d4>
   1f580:	cmp	r6, #0
   1f584:	beq	1f70c <__assert_fail@plt+0xdf9c>
   1f588:	mov	r0, #0
   1f58c:	str	r7, [sp, #28]
   1f590:	ldr	r7, [r8, #84]	; 0x54
   1f594:	str	r0, [fp, #-32]	; 0xffffffe0
   1f598:	str	r0, [fp, #-44]	; 0xffffffd4
   1f59c:	str	r0, [fp, #-48]	; 0xffffffd0
   1f5a0:	str	r0, [fp, #-40]	; 0xffffffd8
   1f5a4:	ldr	r1, [r6, #20]
   1f5a8:	cmp	r1, #1
   1f5ac:	blt	1f6f8 <__assert_fail@plt+0xdf88>
   1f5b0:	ldr	r4, [sp, #44]	; 0x2c
   1f5b4:	mov	r5, #0
   1f5b8:	str	r6, [sp, #40]	; 0x28
   1f5bc:	ldr	r0, [r6, #24]
   1f5c0:	ldr	sl, [r0, r5, lsl #2]
   1f5c4:	ldr	r0, [r7]
   1f5c8:	add	r1, r0, sl, lsl #3
   1f5cc:	ldrb	r1, [r1, #6]
   1f5d0:	tst	r1, #16
   1f5d4:	bne	1f5f4 <__assert_fail@plt+0xde84>
   1f5d8:	add	r1, r0, sl, lsl #3
   1f5dc:	mov	r0, r8
   1f5e0:	mov	r2, r4
   1f5e4:	bl	202ec <__assert_fail@plt+0xeb7c>
   1f5e8:	cmp	r0, #0
   1f5ec:	bne	1f6b0 <__assert_fail@plt+0xdf40>
   1f5f0:	b	1f6c8 <__assert_fail@plt+0xdf58>
   1f5f4:	mov	r0, r7
   1f5f8:	mov	r1, sl
   1f5fc:	mov	r2, r8
   1f600:	mov	r3, r4
   1f604:	bl	1fff4 <__assert_fail@plt+0xe884>
   1f608:	cmp	r0, #2
   1f60c:	blt	1f6a8 <__assert_fail@plt+0xdf38>
   1f610:	add	r4, r0, r4
   1f614:	ldr	r0, [r8, #100]	; 0x64
   1f618:	ldr	r1, [r7, #12]
   1f61c:	sub	r8, fp, #48	; 0x30
   1f620:	ldr	r0, [r0, r4, lsl #2]
   1f624:	ldr	r6, [r1, sl, lsl #2]
   1f628:	mov	r1, #0
   1f62c:	str	r1, [fp, #-44]	; 0xffffffd4
   1f630:	cmp	r0, #0
   1f634:	beq	1f650 <__assert_fail@plt+0xdee0>
   1f638:	add	r1, r0, #4
   1f63c:	mov	r0, r8
   1f640:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   1f644:	cmp	r0, #0
   1f648:	str	r0, [fp, #-32]	; 0xffffffe0
   1f64c:	bne	1f854 <__assert_fail@plt+0xe0e4>
   1f650:	mov	r0, r8
   1f654:	mov	r1, r6
   1f658:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1f65c:	cmp	r0, #0
   1f660:	beq	1f834 <__assert_fail@plt+0xe0c4>
   1f664:	sub	r0, fp, #32
   1f668:	mov	r1, r7
   1f66c:	mov	r2, r8
   1f670:	bl	1fdfc <__assert_fail@plt+0xe68c>
   1f674:	ldr	r8, [sp, #36]	; 0x24
   1f678:	ldr	r6, [sp, #40]	; 0x28
   1f67c:	ldr	r1, [r8, #100]	; 0x64
   1f680:	str	r0, [r1, r4, lsl #2]
   1f684:	ldr	r0, [r8, #100]	; 0x64
   1f688:	ldr	r0, [r0, r4, lsl #2]
   1f68c:	ldr	r4, [sp, #44]	; 0x2c
   1f690:	cmp	r0, #0
   1f694:	bne	1f6b0 <__assert_fail@plt+0xdf40>
   1f698:	ldr	r9, [fp, #-32]	; 0xffffffe0
   1f69c:	cmp	r9, #0
   1f6a0:	beq	1f6b0 <__assert_fail@plt+0xdf40>
   1f6a4:	b	1f838 <__assert_fail@plt+0xe0c8>
   1f6a8:	cmp	r0, #0
   1f6ac:	beq	1f6dc <__assert_fail@plt+0xdf6c>
   1f6b0:	ldr	r0, [r7, #12]
   1f6b4:	ldr	r1, [r0, sl, lsl #2]
   1f6b8:	add	r0, sp, #48	; 0x30
   1f6bc:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1f6c0:	cmp	r0, #0
   1f6c4:	beq	1f834 <__assert_fail@plt+0xe0c4>
   1f6c8:	ldr	r0, [r6, #20]
   1f6cc:	add	r5, r5, #1
   1f6d0:	cmp	r5, r0
   1f6d4:	blt	1f5bc <__assert_fail@plt+0xde4c>
   1f6d8:	b	1f6e4 <__assert_fail@plt+0xdf74>
   1f6dc:	ldr	r0, [r7]
   1f6e0:	b	1f5d8 <__assert_fail@plt+0xde68>
   1f6e4:	ldr	r5, [fp, #12]
   1f6e8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f6ec:	ldr	sl, [sp, #20]
   1f6f0:	mov	r9, r5
   1f6f4:	add	r5, sp, #48	; 0x30
   1f6f8:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f6fc:	ldr	r4, [sp, #24]
   1f700:	ldr	r7, [sp, #28]
   1f704:	mov	r0, #0
   1f708:	str	r0, [fp, #-52]	; 0xffffffcc
   1f70c:	ldr	r0, [sp, #52]	; 0x34
   1f710:	cmp	r0, #0
   1f714:	beq	1f768 <__assert_fail@plt+0xdff8>
   1f718:	mov	r6, r7
   1f71c:	ldr	r7, [fp, #16]
   1f720:	mov	r0, sl
   1f724:	mov	r1, r5
   1f728:	mov	r2, r4
   1f72c:	mov	r3, r7
   1f730:	bl	1f8f8 <__assert_fail@plt+0xe188>
   1f734:	cmp	r0, #0
   1f738:	str	r0, [fp, #-52]	; 0xffffffcc
   1f73c:	bne	1f844 <__assert_fail@plt+0xe0d4>
   1f740:	mov	r0, r8
   1f744:	mov	r1, r5
   1f748:	mov	r2, r6
   1f74c:	mov	r3, r4
   1f750:	str	r7, [sp]
   1f754:	mov	r7, r6
   1f758:	bl	1fa28 <__assert_fail@plt+0xe2b8>
   1f75c:	cmp	r0, #0
   1f760:	str	r0, [fp, #-52]	; 0xffffffcc
   1f764:	bne	1f844 <__assert_fail@plt+0xe0d4>
   1f768:	ldr	r2, [r8, #88]	; 0x58
   1f76c:	ldr	r1, [sp, #44]	; 0x2c
   1f770:	mov	r0, r8
   1f774:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   1f778:	mov	r3, r0
   1f77c:	sub	r0, fp, #52	; 0x34
   1f780:	mov	r1, sl
   1f784:	mov	r2, r5
   1f788:	bl	1d75c <__assert_fail@plt+0xbfec>
   1f78c:	mov	r6, r0
   1f790:	cmp	r0, #0
   1f794:	bne	1f7a4 <__assert_fail@plt+0xe034>
   1f798:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f79c:	cmp	r0, #0
   1f7a0:	bne	1f844 <__assert_fail@plt+0xe0d4>
   1f7a4:	ldr	r0, [r8, #100]	; 0x64
   1f7a8:	ldr	r1, [sp, #32]
   1f7ac:	cmp	r6, #0
   1f7b0:	str	r7, [sp, #44]	; 0x2c
   1f7b4:	str	r6, [r0, r7, lsl #2]
   1f7b8:	mov	r0, #0
   1f7bc:	addeq	r0, r1, #1
   1f7c0:	cmp	r7, r9
   1f7c4:	mov	r1, r0
   1f7c8:	bne	1f538 <__assert_fail@plt+0xddc8>
   1f7cc:	mov	r4, r9
   1f7d0:	b	1f7d8 <__assert_fail@plt+0xe068>
   1f7d4:	ldr	r4, [sp, #44]	; 0x2c
   1f7d8:	ldr	r0, [sp, #56]	; 0x38
   1f7dc:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f7e0:	ldr	r0, [r8, #100]	; 0x64
   1f7e4:	ldr	r1, [sp, #16]
   1f7e8:	ldr	r0, [r0, r9, lsl #2]
   1f7ec:	str	r4, [r1]
   1f7f0:	ldr	r1, [sp, #12]
   1f7f4:	str	r1, [r8, #40]	; 0x28
   1f7f8:	ldr	r1, [sp, #8]
   1f7fc:	cmp	r0, #0
   1f800:	str	r1, [r8, #100]	; 0x64
   1f804:	beq	1f824 <__assert_fail@plt+0xe0b4>
   1f808:	ldr	r1, [fp, #8]
   1f80c:	add	r0, r0, #4
   1f810:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1f814:	cmp	r0, #0
   1f818:	mov	r7, #0
   1f81c:	moveq	r7, #1
   1f820:	b	1f828 <__assert_fail@plt+0xe0b8>
   1f824:	mov	r7, #1
   1f828:	mov	r0, r7
   1f82c:	sub	sp, fp, #28
   1f830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f834:	mov	r9, #12
   1f838:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1f83c:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f840:	str	r9, [fp, #-52]	; 0xffffffcc
   1f844:	ldr	r0, [sp, #56]	; 0x38
   1f848:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f84c:	ldr	r7, [fp, #-52]	; 0xffffffcc
   1f850:	b	1f828 <__assert_fail@plt+0xe0b8>
   1f854:	mov	r9, r0
   1f858:	b	1f838 <__assert_fail@plt+0xe0c8>
   1f85c:	mvn	r1, #-2147483648	; 0x80000000
   1f860:	mov	r7, #12
   1f864:	sub	r1, r1, r4
   1f868:	cmp	r1, r2
   1f86c:	ble	1f828 <__assert_fail@plt+0xe0b8>
   1f870:	add	r9, r2, #1
   1f874:	add	r5, r9, r4
   1f878:	cmn	r5, #-1073741823	; 0xc0000001
   1f87c:	bhi	1f828 <__assert_fail@plt+0xe0b8>
   1f880:	ldr	r0, [r3, #8]
   1f884:	lsl	r1, r5, #2
   1f888:	mov	sl, r3
   1f88c:	bl	239c4 <__assert_fail@plt+0x12254>
   1f890:	cmp	r0, #0
   1f894:	beq	1f828 <__assert_fail@plt+0xe0b8>
   1f898:	str	r5, [sl, #4]
   1f89c:	str	r0, [sl, #8]
   1f8a0:	add	r0, r0, r4, lsl #2
   1f8a4:	lsl	r2, r9, #2
   1f8a8:	mov	r1, #0
   1f8ac:	bl	1165c <memset@plt>
   1f8b0:	mov	r3, sl
   1f8b4:	ldr	r0, [sp, #36]	; 0x24
   1f8b8:	ldr	r5, [fp, #12]
   1f8bc:	ldr	sl, [sp, #20]
   1f8c0:	ldr	r7, [sp, #24]
   1f8c4:	b	1f3a4 <__assert_fail@plt+0xdc34>
   1f8c8:	mov	r7, r0
   1f8cc:	ldr	r0, [sp, #56]	; 0x38
   1f8d0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f8d4:	b	1f828 <__assert_fail@plt+0xe0b8>
   1f8d8:	mov	r0, #0
   1f8dc:	mov	r7, #12
   1f8e0:	str	r0, [sp, #48]	; 0x30
   1f8e4:	str	r0, [sp, #52]	; 0x34
   1f8e8:	str	r7, [fp, #-52]	; 0xffffffcc
   1f8ec:	b	1f828 <__assert_fail@plt+0xe0b8>
   1f8f0:	mov	r7, r0
   1f8f4:	b	1f828 <__assert_fail@plt+0xe0b8>
   1f8f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8fc:	add	fp, sp, #28
   1f900:	sub	sp, sp, #20
   1f904:	str	r0, [sp, #4]
   1f908:	ldr	r0, [r1, #4]
   1f90c:	mov	sl, r1
   1f910:	mov	r1, #0
   1f914:	mov	r5, r3
   1f918:	mov	r8, r2
   1f91c:	str	r1, [sp, #12]
   1f920:	str	r0, [sp, #8]
   1f924:	lsl	r0, r0, #2
   1f928:	bl	23994 <__assert_fail@plt+0x12224>
   1f92c:	cmp	r0, #0
   1f930:	str	r0, [sp, #16]
   1f934:	beq	1fa20 <__assert_fail@plt+0xe2b0>
   1f938:	ldr	r0, [sl, #4]
   1f93c:	cmp	r0, #1
   1f940:	blt	1f9e8 <__assert_fail@plt+0xe278>
   1f944:	mov	r9, #0
   1f948:	ldr	r0, [sl, #8]
   1f94c:	ldr	r1, [sp, #4]
   1f950:	ldr	r2, [r0, r9, lsl #2]
   1f954:	ldr	r1, [r1, #24]
   1f958:	add	r0, r2, r2, lsl #1
   1f95c:	add	r1, r1, r0, lsl #2
   1f960:	ldr	r0, [r1, #4]
   1f964:	cmp	r0, #1
   1f968:	blt	1f9a4 <__assert_fail@plt+0xe234>
   1f96c:	ldr	r7, [sp, #4]
   1f970:	ldr	r3, [r1, #8]
   1f974:	ldr	r7, [r7]
   1f978:	ldr	r6, [r3]
   1f97c:	add	r4, r7, r6, lsl #3
   1f980:	ldrb	r4, [r4, #4]
   1f984:	cmp	r4, r5
   1f988:	bne	1f998 <__assert_fail@plt+0xe228>
   1f98c:	ldr	r4, [r7, r6, lsl #3]
   1f990:	cmp	r4, r8
   1f994:	beq	1f9c8 <__assert_fail@plt+0xe258>
   1f998:	add	r3, r3, #4
   1f99c:	subs	r0, r0, #1
   1f9a0:	bne	1f978 <__assert_fail@plt+0xe208>
   1f9a4:	add	r0, sp, #8
   1f9a8:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   1f9ac:	cmp	r0, #0
   1f9b0:	bne	1fa10 <__assert_fail@plt+0xe2a0>
   1f9b4:	ldr	r0, [sl, #4]
   1f9b8:	add	r9, r9, #1
   1f9bc:	cmp	r9, r0
   1f9c0:	blt	1f948 <__assert_fail@plt+0xe1d8>
   1f9c4:	b	1f9e8 <__assert_fail@plt+0xe278>
   1f9c8:	cmn	r6, #1
   1f9cc:	beq	1f9a4 <__assert_fail@plt+0xe234>
   1f9d0:	ldr	r0, [sp, #4]
   1f9d4:	add	r1, sp, #8
   1f9d8:	mov	r3, r8
   1f9dc:	str	r5, [sp]
   1f9e0:	bl	1fcf4 <__assert_fail@plt+0xe584>
   1f9e4:	b	1f9ac <__assert_fail@plt+0xe23c>
   1f9e8:	ldr	r0, [sl, #8]
   1f9ec:	bl	13bd0 <__assert_fail@plt+0x2460>
   1f9f0:	vldr	d16, [sp, #8]
   1f9f4:	ldr	r0, [sp, #16]
   1f9f8:	mov	r7, #0
   1f9fc:	str	r0, [sl, #8]
   1fa00:	vstr	d16, [sl]
   1fa04:	mov	r0, r7
   1fa08:	sub	sp, fp, #28
   1fa0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa10:	mov	r7, r0
   1fa14:	ldr	r0, [sp, #16]
   1fa18:	bl	13bd0 <__assert_fail@plt+0x2460>
   1fa1c:	b	1fa04 <__assert_fail@plt+0xe294>
   1fa20:	mov	r7, #12
   1fa24:	b	1fa04 <__assert_fail@plt+0xe294>
   1fa28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa2c:	add	fp, sp, #28
   1fa30:	sub	sp, sp, #36	; 0x24
   1fa34:	mov	r6, r1
   1fa38:	ldr	r1, [r0, #84]	; 0x54
   1fa3c:	str	r3, [sp, #4]
   1fa40:	mov	r4, r2
   1fa44:	str	r0, [sp, #12]
   1fa48:	str	r1, [sp, #16]
   1fa4c:	mov	r1, r2
   1fa50:	bl	1f0e8 <__assert_fail@plt+0xd978>
   1fa54:	cmn	r0, #1
   1fa58:	beq	1fce0 <__assert_fail@plt+0xe570>
   1fa5c:	add	r1, r0, r0, lsl #1
   1fa60:	str	r1, [sp]
   1fa64:	ldr	r0, [sp, #12]
   1fa68:	ldr	r0, [r0, #116]	; 0x74
   1fa6c:	add	r0, r0, r1, lsl #3
   1fa70:	add	r0, r0, #8
   1fa74:	ldr	r7, [r0, #-8]
   1fa78:	mov	sl, r0
   1fa7c:	mov	r0, r6
   1fa80:	mov	r1, r7
   1fa84:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1fa88:	cmp	r0, #0
   1fa8c:	beq	1fc88 <__assert_fail@plt+0xe518>
   1fa90:	ldm	sl, {r0, r1}
   1fa94:	add	r1, r1, r4
   1fa98:	sub	r9, r1, r0
   1fa9c:	cmp	r9, r4
   1faa0:	bne	1fb64 <__assert_fail@plt+0xe3f4>
   1faa4:	ldr	r0, [sp, #16]
   1faa8:	add	r1, r7, r7, lsl #1
   1faac:	ldr	r0, [r0, #20]
   1fab0:	add	r0, r0, r1, lsl #2
   1fab4:	ldr	r0, [r0, #8]
   1fab8:	ldr	r7, [r0]
   1fabc:	mov	r0, r6
   1fac0:	mov	r1, r7
   1fac4:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1fac8:	mov	r1, #4
   1facc:	cmp	r0, #0
   1fad0:	bne	1fc7c <__assert_fail@plt+0xe50c>
   1fad4:	mov	r0, #1
   1fad8:	str	r0, [sp, #24]
   1fadc:	str	r0, [sp, #20]
   1fae0:	mov	r0, #4
   1fae4:	bl	23994 <__assert_fail@plt+0x12224>
   1fae8:	cmp	r0, #0
   1faec:	str	r0, [sp, #28]
   1faf0:	beq	1fc9c <__assert_fail@plt+0xe52c>
   1faf4:	mov	r5, #0
   1faf8:	str	r7, [r0]
   1fafc:	ldr	r0, [sp, #16]
   1fb00:	ldr	r2, [sp, #4]
   1fb04:	ldr	r3, [fp, #8]
   1fb08:	add	r7, sp, #20
   1fb0c:	str	r5, [sp, #32]
   1fb10:	mov	r1, r7
   1fb14:	bl	1f8f8 <__assert_fail@plt+0xe188>
   1fb18:	mov	r9, r0
   1fb1c:	mov	r0, r6
   1fb20:	mov	r1, r7
   1fb24:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   1fb28:	mov	r8, r0
   1fb2c:	ldr	r0, [sp, #28]
   1fb30:	bl	13bd0 <__assert_fail@plt+0x2460>
   1fb34:	orr	r0, r9, r5
   1fb38:	mov	r1, #2
   1fb3c:	orrs	r0, r0, r8
   1fb40:	beq	1fc7c <__assert_fail@plt+0xe50c>
   1fb44:	cmp	r9, #0
   1fb48:	mov	r1, #1
   1fb4c:	movne	r8, r9
   1fb50:	cmp	r5, #0
   1fb54:	movne	r8, r5
   1fb58:	str	r8, [sp, #32]
   1fb5c:	str	r8, [sp, #8]
   1fb60:	b	1fc7c <__assert_fail@plt+0xe50c>
   1fb64:	ldr	r0, [sp, #12]
   1fb68:	ldr	r1, [sp, #16]
   1fb6c:	mov	r5, r4
   1fb70:	ldr	r0, [r0, #100]	; 0x64
   1fb74:	ldr	r1, [r1, #12]
   1fb78:	ldr	r0, [r0, r9, lsl #2]
   1fb7c:	ldr	r8, [r1, r7, lsl #2]
   1fb80:	cmp	r0, #0
   1fb84:	beq	1fbf8 <__assert_fail@plt+0xe488>
   1fb88:	add	r4, r0, #4
   1fb8c:	mov	r1, r8
   1fb90:	mov	r0, r4
   1fb94:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1fb98:	mov	r1, #4
   1fb9c:	cmp	r0, #0
   1fba0:	bne	1fc78 <__assert_fail@plt+0xe508>
   1fba4:	add	r7, sp, #20
   1fba8:	mov	r1, r4
   1fbac:	mov	r0, r7
   1fbb0:	bl	1d678 <__assert_fail@plt+0xbf08>
   1fbb4:	mov	r4, r0
   1fbb8:	str	r0, [sp, #32]
   1fbbc:	mov	r0, r7
   1fbc0:	mov	r1, r8
   1fbc4:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1fbc8:	cmp	r4, #0
   1fbcc:	bne	1fbd8 <__assert_fail@plt+0xe468>
   1fbd0:	cmp	r0, #0
   1fbd4:	bne	1fc24 <__assert_fail@plt+0xe4b4>
   1fbd8:	ldr	r0, [sp, #28]
   1fbdc:	bl	13bd0 <__assert_fail@plt+0x2460>
   1fbe0:	cmp	r4, #0
   1fbe4:	mov	r1, #1
   1fbe8:	movweq	r4, #12
   1fbec:	str	r4, [sp, #32]
   1fbf0:	str	r4, [sp, #8]
   1fbf4:	b	1fc78 <__assert_fail@plt+0xe508>
   1fbf8:	mov	r0, #1
   1fbfc:	str	r0, [sp, #24]
   1fc00:	str	r0, [sp, #20]
   1fc04:	mov	r0, #4
   1fc08:	bl	23994 <__assert_fail@plt+0x12224>
   1fc0c:	cmp	r0, #0
   1fc10:	str	r0, [sp, #28]
   1fc14:	beq	1fcb0 <__assert_fail@plt+0xe540>
   1fc18:	str	r8, [r0]
   1fc1c:	mov	r0, #0
   1fc20:	str	r0, [sp, #32]
   1fc24:	ldr	r1, [sp, #16]
   1fc28:	add	r0, sp, #32
   1fc2c:	add	r2, sp, #20
   1fc30:	bl	1fdfc <__assert_fail@plt+0xe68c>
   1fc34:	ldr	r4, [sp, #12]
   1fc38:	ldr	r1, [r4, #100]	; 0x64
   1fc3c:	str	r0, [r1, r9, lsl #2]
   1fc40:	ldr	r0, [sp, #28]
   1fc44:	bl	13bd0 <__assert_fail@plt+0x2460>
   1fc48:	ldr	r0, [r4, #100]	; 0x64
   1fc4c:	ldr	r2, [sp, #32]
   1fc50:	ldr	r0, [r0, r9, lsl #2]
   1fc54:	cmp	r2, #0
   1fc58:	mov	r1, r2
   1fc5c:	movwne	r1, #1
   1fc60:	clz	r0, r0
   1fc64:	lsr	r0, r0, #5
   1fc68:	ands	r1, r0, r1
   1fc6c:	ldr	r0, [sp, #8]
   1fc70:	movne	r0, r2
   1fc74:	str	r0, [sp, #8]
   1fc78:	mov	r4, r5
   1fc7c:	cmp	r1, #0
   1fc80:	cmpne	r1, #4
   1fc84:	bne	1fcd0 <__assert_fail@plt+0xe560>
   1fc88:	ldrb	r1, [sl, #12]
   1fc8c:	add	r0, sl, #24
   1fc90:	cmp	r1, #0
   1fc94:	bne	1fa74 <__assert_fail@plt+0xe304>
   1fc98:	b	1fce0 <__assert_fail@plt+0xe570>
   1fc9c:	mov	r0, #0
   1fca0:	mov	r5, #12
   1fca4:	str	r0, [sp, #20]
   1fca8:	str	r0, [sp, #24]
   1fcac:	b	1fafc <__assert_fail@plt+0xe38c>
   1fcb0:	mov	r0, #0
   1fcb4:	mov	r1, #12
   1fcb8:	str	r0, [sp, #20]
   1fcbc:	str	r0, [sp, #24]
   1fcc0:	mov	r0, #12
   1fcc4:	str	r1, [sp, #32]
   1fcc8:	mov	r1, #1
   1fccc:	b	1fc74 <__assert_fail@plt+0xe504>
   1fcd0:	cmp	r1, #2
   1fcd4:	bne	1fcec <__assert_fail@plt+0xe57c>
   1fcd8:	ldr	r1, [sp]
   1fcdc:	b	1fa64 <__assert_fail@plt+0xe2f4>
   1fce0:	mov	r0, #0
   1fce4:	sub	sp, fp, #28
   1fce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fcec:	ldr	r0, [sp, #8]
   1fcf0:	b	1fce4 <__assert_fail@plt+0xe574>
   1fcf4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fcf8:	add	fp, sp, #24
   1fcfc:	sub	sp, sp, #8
   1fd00:	mov	r6, r0
   1fd04:	mov	r4, r1
   1fd08:	mov	r0, r1
   1fd0c:	mov	r1, r2
   1fd10:	mov	r5, r3
   1fd14:	mov	r7, r2
   1fd18:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1fd1c:	cmp	r0, #0
   1fd20:	beq	1fd30 <__assert_fail@plt+0xe5c0>
   1fd24:	mov	r0, #0
   1fd28:	sub	sp, fp, #24
   1fd2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fd30:	ldr	r8, [fp, #8]
   1fd34:	ldr	r0, [r6]
   1fd38:	add	r1, r0, r7, lsl #3
   1fd3c:	ldrb	r1, [r1, #4]
   1fd40:	cmp	r1, r8
   1fd44:	bne	1fd54 <__assert_fail@plt+0xe5e4>
   1fd48:	ldr	r0, [r0, r7, lsl #3]
   1fd4c:	cmp	r0, r5
   1fd50:	beq	1fdd8 <__assert_fail@plt+0xe668>
   1fd54:	mov	r0, r4
   1fd58:	mov	r1, r7
   1fd5c:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1fd60:	cmp	r0, #0
   1fd64:	beq	1fdf4 <__assert_fail@plt+0xe684>
   1fd68:	ldr	r0, [r6, #20]
   1fd6c:	add	r7, r7, r7, lsl #1
   1fd70:	add	r1, r0, r7, lsl #2
   1fd74:	ldr	r2, [r1, #4]
   1fd78:	cmp	r2, #2
   1fd7c:	beq	1fd8c <__assert_fail@plt+0xe61c>
   1fd80:	cmp	r2, #0
   1fd84:	bne	1fdb4 <__assert_fail@plt+0xe644>
   1fd88:	b	1fd24 <__assert_fail@plt+0xe5b4>
   1fd8c:	ldr	r0, [r1, #8]
   1fd90:	mov	r1, r4
   1fd94:	mov	r3, r5
   1fd98:	ldr	r2, [r0, #4]
   1fd9c:	mov	r0, r6
   1fda0:	str	r8, [sp]
   1fda4:	bl	1fcf4 <__assert_fail@plt+0xe584>
   1fda8:	cmp	r0, #0
   1fdac:	bne	1fd28 <__assert_fail@plt+0xe5b8>
   1fdb0:	ldr	r0, [r6, #20]
   1fdb4:	add	r0, r0, r7, lsl #2
   1fdb8:	ldr	r0, [r0, #8]
   1fdbc:	ldr	r7, [r0]
   1fdc0:	mov	r0, r4
   1fdc4:	mov	r1, r7
   1fdc8:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   1fdcc:	cmp	r0, #0
   1fdd0:	beq	1fd34 <__assert_fail@plt+0xe5c4>
   1fdd4:	b	1fd24 <__assert_fail@plt+0xe5b4>
   1fdd8:	cmp	r8, #9
   1fddc:	bne	1fd24 <__assert_fail@plt+0xe5b4>
   1fde0:	mov	r0, r4
   1fde4:	mov	r1, r7
   1fde8:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   1fdec:	cmp	r0, #0
   1fdf0:	bne	1fd24 <__assert_fail@plt+0xe5b4>
   1fdf4:	mov	r0, #12
   1fdf8:	b	1fd28 <__assert_fail@plt+0xe5b8>
   1fdfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe00:	add	fp, sp, #28
   1fe04:	sub	sp, sp, #4
   1fe08:	ldr	sl, [r2, #4]
   1fe0c:	cmp	sl, #0
   1fe10:	beq	1ffc0 <__assert_fail@plt+0xe850>
   1fe14:	mov	r4, r2
   1fe18:	mov	r9, r1
   1fe1c:	cmp	sl, #1
   1fe20:	mov	r6, sl
   1fe24:	str	r0, [sp]
   1fe28:	blt	1fe48 <__assert_fail@plt+0xe6d8>
   1fe2c:	ldr	r1, [r4, #8]
   1fe30:	mov	r2, sl
   1fe34:	mov	r6, sl
   1fe38:	ldr	r3, [r1], #4
   1fe3c:	subs	r2, r2, #1
   1fe40:	add	r6, r3, r6
   1fe44:	bne	1fe38 <__assert_fail@plt+0xe6c8>
   1fe48:	ldr	r1, [r9, #68]	; 0x44
   1fe4c:	ldr	r2, [r9, #32]
   1fe50:	and	r1, r1, r6
   1fe54:	add	r3, r1, r1, lsl #1
   1fe58:	ldr	r1, [r2, r3, lsl #2]
   1fe5c:	cmp	r1, #1
   1fe60:	blt	1fed0 <__assert_fail@plt+0xe760>
   1fe64:	add	r2, r2, r3, lsl #2
   1fe68:	sub	ip, sl, #1
   1fe6c:	mov	r5, #0
   1fe70:	ldr	lr, [r2, #8]
   1fe74:	cmp	r4, #0
   1fe78:	beq	1fec4 <__assert_fail@plt+0xe754>
   1fe7c:	ldr	r7, [lr, r5, lsl #2]
   1fe80:	ldr	r3, [r7]
   1fe84:	cmp	r6, r3
   1fe88:	bne	1fec4 <__assert_fail@plt+0xe754>
   1fe8c:	ldr	r3, [r7, #8]
   1fe90:	cmp	r3, sl
   1fe94:	bne	1fec4 <__assert_fail@plt+0xe754>
   1fe98:	mov	r3, ip
   1fe9c:	add	r2, r3, #1
   1fea0:	cmp	r2, #1
   1fea4:	blt	1ffb4 <__assert_fail@plt+0xe844>
   1fea8:	ldr	r2, [r4, #8]
   1feac:	ldr	r0, [r7, #12]
   1feb0:	ldr	r2, [r2, r3, lsl #2]
   1feb4:	ldr	r0, [r0, r3, lsl #2]
   1feb8:	sub	r3, r3, #1
   1febc:	cmp	r0, r2
   1fec0:	beq	1fe9c <__assert_fail@plt+0xe72c>
   1fec4:	add	r5, r5, #1
   1fec8:	cmp	r5, r1
   1fecc:	blt	1fe74 <__assert_fail@plt+0xe704>
   1fed0:	mov	r0, #56	; 0x38
   1fed4:	mov	r1, #1
   1fed8:	bl	23940 <__assert_fail@plt+0x121d0>
   1fedc:	cmp	r0, #0
   1fee0:	beq	1ffe0 <__assert_fail@plt+0xe870>
   1fee4:	add	r5, r0, #4
   1fee8:	mov	r7, r0
   1feec:	mov	r1, r4
   1fef0:	mov	r0, r5
   1fef4:	bl	1d678 <__assert_fail@plt+0xbf08>
   1fef8:	cmp	r0, #0
   1fefc:	bne	1ffcc <__assert_fail@plt+0xe85c>
   1ff00:	str	r5, [r7, #40]	; 0x28
   1ff04:	ldr	r0, [r4, #4]
   1ff08:	cmp	r0, #1
   1ff0c:	blt	1ff9c <__assert_fail@plt+0xe82c>
   1ff10:	movw	ip, #65280	; 0xff00
   1ff14:	ldr	r1, [r4, #8]
   1ff18:	ldr	sl, [r9]
   1ff1c:	mov	lr, #32
   1ff20:	movt	ip, #3
   1ff24:	add	r5, ip, #255	; 0xff
   1ff28:	ldr	r2, [r1]
   1ff2c:	add	r3, sl, r2, lsl #3
   1ff30:	ldr	r2, [r3, #4]!
   1ff34:	and	r4, r2, r5
   1ff38:	cmp	r4, #1
   1ff3c:	beq	1ff90 <__assert_fail@plt+0xe820>
   1ff40:	ldrb	r8, [r7, #52]	; 0x34
   1ff44:	and	r4, lr, r2, lsr #15
   1ff48:	uxtb	r2, r2
   1ff4c:	cmp	r2, #12
   1ff50:	orr	r4, r8, r4
   1ff54:	strb	r4, [r7, #52]	; 0x34
   1ff58:	beq	1ff88 <__assert_fail@plt+0xe818>
   1ff5c:	cmp	r2, #4
   1ff60:	beq	1ff74 <__assert_fail@plt+0xe804>
   1ff64:	cmp	r2, #2
   1ff68:	bne	1ff7c <__assert_fail@plt+0xe80c>
   1ff6c:	orr	r2, r4, #16
   1ff70:	b	1ff8c <__assert_fail@plt+0xe81c>
   1ff74:	orr	r2, r4, #64	; 0x40
   1ff78:	b	1ff8c <__assert_fail@plt+0xe81c>
   1ff7c:	ldr	r2, [r3]
   1ff80:	tst	r2, ip
   1ff84:	beq	1ff90 <__assert_fail@plt+0xe820>
   1ff88:	orr	r2, r4, #128	; 0x80
   1ff8c:	strb	r2, [r7, #52]	; 0x34
   1ff90:	add	r1, r1, #4
   1ff94:	subs	r0, r0, #1
   1ff98:	bne	1ff28 <__assert_fail@plt+0xe7b8>
   1ff9c:	mov	r0, r9
   1ffa0:	mov	r1, r7
   1ffa4:	mov	r2, r6
   1ffa8:	bl	1da94 <__assert_fail@plt+0xc324>
   1ffac:	cmp	r0, #0
   1ffb0:	bne	1ffd8 <__assert_fail@plt+0xe868>
   1ffb4:	mov	r0, r7
   1ffb8:	sub	sp, fp, #28
   1ffbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffc0:	mov	r7, #0
   1ffc4:	str	r7, [r0]
   1ffc8:	b	1ffb4 <__assert_fail@plt+0xe844>
   1ffcc:	mov	r0, r7
   1ffd0:	bl	13bd0 <__assert_fail@plt+0x2460>
   1ffd4:	b	1ffe0 <__assert_fail@plt+0xe870>
   1ffd8:	mov	r0, r7
   1ffdc:	bl	18b8c <__assert_fail@plt+0x741c>
   1ffe0:	ldr	r1, [sp]
   1ffe4:	mov	r0, #12
   1ffe8:	mov	r7, #0
   1ffec:	str	r0, [r1]
   1fff0:	b	1ffb4 <__assert_fail@plt+0xe844>
   1fff4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fff8:	add	fp, sp, #24
   1fffc:	ldr	lr, [r0]
   20000:	add	r7, lr, r1, lsl #3
   20004:	ldrb	r9, [r7, #4]
   20008:	cmp	r9, #7
   2000c:	beq	201e0 <__assert_fail@plt+0xea70>
   20010:	ldr	ip, [r2, #80]	; 0x50
   20014:	mov	r6, #1
   20018:	cmp	ip, #1
   2001c:	beq	2005c <__assert_fail@plt+0xe8ec>
   20020:	ldr	r5, [r2, #28]
   20024:	add	r7, r3, #1
   20028:	cmp	r7, r5
   2002c:	bge	2005c <__assert_fail@plt+0xe8ec>
   20030:	ldr	r6, [r2, #8]
   20034:	sub	r5, r5, r3
   20038:	add	r7, r6, r3, lsl #2
   2003c:	mov	r6, #1
   20040:	ldr	r4, [r7, r6, lsl #2]
   20044:	cmn	r4, #1
   20048:	bne	2005c <__assert_fail@plt+0xe8ec>
   2004c:	add	r6, r6, #1
   20050:	cmp	r5, r6
   20054:	bne	20040 <__assert_fail@plt+0xe8d0>
   20058:	mov	r6, r5
   2005c:	mov	r8, #0
   20060:	cmp	r9, #5
   20064:	bne	200a8 <__assert_fail@plt+0xe938>
   20068:	cmp	r6, #2
   2006c:	blt	201d0 <__assert_fail@plt+0xea60>
   20070:	ldr	r0, [r0, #128]	; 0x80
   20074:	tst	r0, #64	; 0x40
   20078:	bne	2008c <__assert_fail@plt+0xe91c>
   2007c:	ldr	r1, [r2, #4]
   20080:	ldrb	r1, [r1, r3]
   20084:	cmp	r1, #10
   20088:	beq	201d0 <__assert_fail@plt+0xea60>
   2008c:	tst	r0, #128	; 0x80
   20090:	beq	201cc <__assert_fail@plt+0xea5c>
   20094:	ldr	r0, [r2, #4]
   20098:	ldrb	r0, [r0, r3]
   2009c:	cmp	r0, #0
   200a0:	movne	r8, r6
   200a4:	b	201d0 <__assert_fail@plt+0xea60>
   200a8:	cmp	r9, #6
   200ac:	bne	201d0 <__assert_fail@plt+0xea60>
   200b0:	cmp	r6, #2
   200b4:	blt	201d0 <__assert_fail@plt+0xea60>
   200b8:	ldr	r7, [lr, r1, lsl #3]
   200bc:	ldr	r0, [r7, #32]
   200c0:	cmp	r0, #0
   200c4:	bne	200e0 <__assert_fail@plt+0xe970>
   200c8:	ldr	r1, [r7, #36]	; 0x24
   200cc:	cmp	r1, #0
   200d0:	bne	200e0 <__assert_fail@plt+0xe970>
   200d4:	ldr	r1, [r7, #20]
   200d8:	cmp	r1, #0
   200dc:	beq	201d8 <__assert_fail@plt+0xea68>
   200e0:	cmp	ip, #1
   200e4:	bne	200f4 <__assert_fail@plt+0xe984>
   200e8:	ldr	r1, [r2, #4]
   200ec:	ldrb	r5, [r1, r3]
   200f0:	b	200fc <__assert_fail@plt+0xe98c>
   200f4:	ldr	r1, [r2, #8]
   200f8:	ldr	r5, [r1, r3, lsl #2]
   200fc:	ldr	r1, [r7, #20]
   20100:	cmp	r1, #1
   20104:	blt	20128 <__assert_fail@plt+0xe9b8>
   20108:	ldr	r2, [r7]
   2010c:	mov	r3, #0
   20110:	ldr	r4, [r2, r3, lsl #2]
   20114:	cmp	r5, r4
   20118:	beq	201a4 <__assert_fail@plt+0xea34>
   2011c:	add	r3, r3, #1
   20120:	cmp	r3, r1
   20124:	blt	20110 <__assert_fail@plt+0xe9a0>
   20128:	ldr	r1, [r7, #36]	; 0x24
   2012c:	cmp	r1, #1
   20130:	blt	20164 <__assert_fail@plt+0xe9f4>
   20134:	mov	r4, #0
   20138:	ldr	r0, [r7, #12]
   2013c:	ldr	r1, [r0, r4, lsl #2]
   20140:	mov	r0, r5
   20144:	bl	11410 <iswctype@plt>
   20148:	cmp	r0, #0
   2014c:	bne	201a4 <__assert_fail@plt+0xea34>
   20150:	ldr	r0, [r7, #36]	; 0x24
   20154:	add	r4, r4, #1
   20158:	cmp	r4, r0
   2015c:	blt	20138 <__assert_fail@plt+0xe9c8>
   20160:	ldr	r0, [r7, #32]
   20164:	cmp	r0, #1
   20168:	blt	2019c <__assert_fail@plt+0xea2c>
   2016c:	ldr	r1, [r7, #4]
   20170:	mov	r2, #0
   20174:	ldr	r3, [r1, r2, lsl #2]
   20178:	cmp	r3, r5
   2017c:	bhi	20190 <__assert_fail@plt+0xea20>
   20180:	ldr	r3, [r7, #8]
   20184:	ldr	r3, [r3, r2, lsl #2]
   20188:	cmp	r5, r3
   2018c:	bls	201a4 <__assert_fail@plt+0xea34>
   20190:	add	r2, r2, #1
   20194:	cmp	r2, r0
   20198:	blt	20174 <__assert_fail@plt+0xea04>
   2019c:	mov	r0, #0
   201a0:	b	201a8 <__assert_fail@plt+0xea38>
   201a4:	mov	r0, r6
   201a8:	ldrb	r1, [r7, #16]
   201ac:	tst	r1, #1
   201b0:	bne	201bc <__assert_fail@plt+0xea4c>
   201b4:	mov	r8, r0
   201b8:	b	201d0 <__assert_fail@plt+0xea60>
   201bc:	cmp	r0, #0
   201c0:	bgt	201d0 <__assert_fail@plt+0xea60>
   201c4:	cmp	r6, #1
   201c8:	movle	r6, #1
   201cc:	mov	r8, r6
   201d0:	mov	r0, r8
   201d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   201d8:	mov	r5, #0
   201dc:	b	200fc <__assert_fail@plt+0xe98c>
   201e0:	ldr	r0, [r2, #4]
   201e4:	mov	r8, #0
   201e8:	ldrb	r6, [r0, r3]
   201ec:	cmp	r6, #194	; 0xc2
   201f0:	bcc	201d0 <__assert_fail@plt+0xea60>
   201f4:	ldr	r1, [r2, #48]	; 0x30
   201f8:	add	r2, r3, #2
   201fc:	cmp	r2, r1
   20200:	bgt	201d0 <__assert_fail@plt+0xea60>
   20204:	add	r0, r3, r0
   20208:	cmp	r6, #223	; 0xdf
   2020c:	ldrb	r7, [r0, #1]
   20210:	bhi	20234 <__assert_fail@plt+0xeac4>
   20214:	cmp	r7, #192	; 0xc0
   20218:	mov	r0, #0
   2021c:	movwcc	r0, #1
   20220:	lsl	r8, r0, #1
   20224:	sxtb	r0, r7
   20228:	cmn	r0, #1
   2022c:	movwgt	r8, #0
   20230:	b	201d0 <__assert_fail@plt+0xea60>
   20234:	cmp	r6, #239	; 0xef
   20238:	bhi	20254 <__assert_fail@plt+0xeae4>
   2023c:	mov	r2, #3
   20240:	cmp	r6, #224	; 0xe0
   20244:	bne	202b0 <__assert_fail@plt+0xeb40>
   20248:	cmp	r7, #160	; 0xa0
   2024c:	bcc	201d0 <__assert_fail@plt+0xea60>
   20250:	b	202b0 <__assert_fail@plt+0xeb40>
   20254:	cmp	r6, #247	; 0xf7
   20258:	bhi	20274 <__assert_fail@plt+0xeb04>
   2025c:	mov	r2, #4
   20260:	cmp	r6, #240	; 0xf0
   20264:	bne	202b0 <__assert_fail@plt+0xeb40>
   20268:	cmp	r7, #144	; 0x90
   2026c:	bcc	201d0 <__assert_fail@plt+0xea60>
   20270:	b	202b0 <__assert_fail@plt+0xeb40>
   20274:	cmp	r6, #251	; 0xfb
   20278:	bhi	20294 <__assert_fail@plt+0xeb24>
   2027c:	mov	r2, #5
   20280:	cmp	r6, #248	; 0xf8
   20284:	bne	202b0 <__assert_fail@plt+0xeb40>
   20288:	cmp	r7, #136	; 0x88
   2028c:	bcc	201d0 <__assert_fail@plt+0xea60>
   20290:	b	202b0 <__assert_fail@plt+0xeb40>
   20294:	cmp	r6, #253	; 0xfd
   20298:	bhi	201d0 <__assert_fail@plt+0xea60>
   2029c:	mov	r2, #6
   202a0:	cmp	r6, #252	; 0xfc
   202a4:	bne	202b0 <__assert_fail@plt+0xeb40>
   202a8:	cmp	r7, #132	; 0x84
   202ac:	bcc	201d0 <__assert_fail@plt+0xea60>
   202b0:	add	r3, r2, r3
   202b4:	cmp	r3, r1
   202b8:	bgt	201d0 <__assert_fail@plt+0xea60>
   202bc:	mov	r1, #1
   202c0:	ldrb	r3, [r0, r1]
   202c4:	sxtb	r7, r3
   202c8:	cmn	r7, #1
   202cc:	bgt	201d0 <__assert_fail@plt+0xea60>
   202d0:	cmp	r3, #191	; 0xbf
   202d4:	bhi	201d0 <__assert_fail@plt+0xea60>
   202d8:	add	r1, r1, #1
   202dc:	cmp	r2, r1
   202e0:	bne	202c0 <__assert_fail@plt+0xeb50>
   202e4:	mov	r8, r2
   202e8:	b	201d0 <__assert_fail@plt+0xea60>
   202ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   202f0:	add	fp, sp, #24
   202f4:	ldr	r5, [r1, #4]
   202f8:	mvn	r3, #0
   202fc:	mov	r8, #0
   20300:	uxtab	r4, r3, r5
   20304:	cmp	r4, #6
   20308:	bhi	20418 <__assert_fail@plt+0xeca8>
   2030c:	ldr	r3, [r0, #4]
   20310:	ldrb	r3, [r3, r2]
   20314:	add	r7, pc, #4
   20318:	sxtb	r6, r3
   2031c:	ldr	pc, [r7, r4, lsl #2]
   20320:	andeq	r0, r2, ip, lsr r3
   20324:	andeq	r0, r2, r8, lsl r4
   20328:	andeq	r0, r2, r0, asr r3
   2032c:	andeq	r0, r2, r8, lsl r4
   20330:	andeq	r0, r2, r8, ror r3
   20334:	andeq	r0, r2, r8, lsl r4
   20338:	andeq	r0, r2, r0, ror r3
   2033c:	ldrb	r1, [r1]
   20340:	uxtb	r3, r6
   20344:	cmp	r1, r3
   20348:	beq	203ac <__assert_fail@plt+0xec3c>
   2034c:	b	20418 <__assert_fail@plt+0xeca8>
   20350:	ldr	r1, [r1]
   20354:	ubfx	r7, r3, #5, #3
   20358:	and	r3, r3, #31
   2035c:	ldr	r1, [r1, r7, lsl #2]
   20360:	mov	r7, #1
   20364:	tst	r1, r7, lsl r3
   20368:	bne	203ac <__assert_fail@plt+0xec3c>
   2036c:	b	20418 <__assert_fail@plt+0xeca8>
   20370:	cmp	r6, #0
   20374:	bmi	20418 <__assert_fail@plt+0xeca8>
   20378:	cmp	r3, #0
   2037c:	beq	2039c <__assert_fail@plt+0xec2c>
   20380:	cmp	r3, #10
   20384:	bne	203ac <__assert_fail@plt+0xec3c>
   20388:	ldr	r1, [r0, #84]	; 0x54
   2038c:	ldrb	r1, [r1, #128]	; 0x80
   20390:	tst	r1, #64	; 0x40
   20394:	bne	203ac <__assert_fail@plt+0xec3c>
   20398:	b	20418 <__assert_fail@plt+0xeca8>
   2039c:	ldr	r1, [r0, #84]	; 0x54
   203a0:	ldrb	r1, [r1, #128]	; 0x80
   203a4:	tst	r1, #128	; 0x80
   203a8:	bne	20418 <__assert_fail@plt+0xeca8>
   203ac:	movw	r1, #65280	; 0xff00
   203b0:	movt	r1, #3
   203b4:	tst	r5, r1
   203b8:	beq	20414 <__assert_fail@plt+0xeca4>
   203bc:	ldr	r3, [r0, #88]	; 0x58
   203c0:	mov	r1, r2
   203c4:	mov	r2, r3
   203c8:	bl	1e3d4 <__assert_fail@plt+0xcc64>
   203cc:	and	r1, r0, #1
   203d0:	tst	r5, #1024	; 0x400
   203d4:	beq	203e0 <__assert_fail@plt+0xec70>
   203d8:	cmp	r1, #0
   203dc:	beq	20418 <__assert_fail@plt+0xeca8>
   203e0:	tst	r5, #2048	; 0x800
   203e4:	cmpne	r1, #0
   203e8:	bne	20418 <__assert_fail@plt+0xeca8>
   203ec:	tst	r5, #8192	; 0x2000
   203f0:	beq	203fc <__assert_fail@plt+0xec8c>
   203f4:	ands	r1, r0, #2
   203f8:	beq	20418 <__assert_fail@plt+0xeca8>
   203fc:	uxth	r1, r5
   20400:	mov	r2, #1
   20404:	and	r0, r0, #8
   20408:	eor	r1, r2, r1, lsr #15
   2040c:	orr	r0, r1, r0, lsr #3
   20410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20414:	mov	r8, #1
   20418:	mov	r0, r8
   2041c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20424:	add	fp, sp, #28
   20428:	sub	sp, sp, #4
   2042c:	vpush	{d8-d11}
   20430:	sub	sp, sp, #88	; 0x58
   20434:	sub	sp, sp, #14336	; 0x3800
   20438:	sub	lr, fp, #1024	; 0x400
   2043c:	vmov.i32	q4, #0	; 0x00000000
   20440:	mov	sl, r1
   20444:	mov	r1, #0
   20448:	mov	ip, r0
   2044c:	sub	r9, lr, #72	; 0x48
   20450:	str	r1, [sl, #44]	; 0x2c
   20454:	str	r1, [sl, #48]	; 0x30
   20458:	mov	r0, r9
   2045c:	vst1.64	{d8-d9}, [r0]!
   20460:	vst1.64	{d8-d9}, [r0]
   20464:	ldr	r0, [sl, #8]
   20468:	cmp	r0, #0
   2046c:	ble	20e18 <__assert_fail@plt+0xf6a8>
   20470:	sub	lr, fp, #2048	; 0x800
   20474:	add	r0, ip, #96	; 0x60
   20478:	mov	r6, #0
   2047c:	str	ip, [sp, #28]
   20480:	str	sl, [sp, #16]
   20484:	sub	r4, lr, #72	; 0x48
   20488:	sub	lr, fp, #3072	; 0xc00
   2048c:	str	r0, [sp, #4]
   20490:	sub	r8, lr, #72	; 0x48
   20494:	sub	lr, fp, #6144	; 0x1800
   20498:	sub	r5, lr, #120	; 0x78
   2049c:	ldr	r0, [sl, #12]
   204a0:	str	r1, [sp, #24]
   204a4:	ldr	lr, [r0, r1, lsl #2]
   204a8:	ldr	r1, [ip]
   204ac:	add	r0, r1, lr, lsl #3
   204b0:	str	lr, [sp, #12]
   204b4:	ldr	r7, [r0, #4]
   204b8:	uxtb	r0, r7
   204bc:	cmp	r0, #1
   204c0:	str	r0, [sp, #20]
   204c4:	bne	205a0 <__assert_fail@plt+0xee30>
   204c8:	ldrb	r0, [r1, lr, lsl #3]
   204cc:	str	r1, [sp, #8]
   204d0:	mov	r3, #1
   204d4:	ubfx	r1, r0, #5, #3
   204d8:	and	r0, r0, #31
   204dc:	ldr	r2, [r9, r1, lsl #2]
   204e0:	orr	r0, r2, r3, lsl r0
   204e4:	str	r0, [r9, r1, lsl #2]
   204e8:	movw	r0, #65280	; 0xff00
   204ec:	ldr	r3, [sp, #20]
   204f0:	movt	r0, #3
   204f4:	ands	r0, r7, r0
   204f8:	beq	207e0 <__assert_fail@plt+0xf070>
   204fc:	tst	r7, #8192	; 0x2000
   20500:	beq	20524 <__assert_fail@plt+0xedb4>
   20504:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   20508:	mov	r1, r9
   2050c:	vst1.64	{d8-d9}, [r1]!
   20510:	vst1.64	{d8-d9}, [r1]
   20514:	tst	r0, #1024	; 0x400
   20518:	beq	20a10 <__assert_fail@plt+0xf2a0>
   2051c:	mov	r0, #1024	; 0x400
   20520:	str	r0, [fp, #-1096]	; 0xfffffbb8
   20524:	tst	r7, #32768	; 0x8000
   20528:	bne	20734 <__assert_fail@plt+0xefc4>
   2052c:	tst	r7, #1024	; 0x400
   20530:	beq	2071c <__assert_fail@plt+0xefac>
   20534:	movw	r0, #255	; 0xff
   20538:	movt	r0, #64	; 0x40
   2053c:	and	r0, r7, r0
   20540:	cmp	r0, #1
   20544:	beq	20734 <__assert_fail@plt+0xefc4>
   20548:	ldr	r0, [ip, #92]	; 0x5c
   2054c:	vmov.i32	q8, #0	; 0x00000000
   20550:	mov	lr, r5
   20554:	cmp	r0, #1
   20558:	ble	206c4 <__assert_fail@plt+0xef54>
   2055c:	ldr	r0, [ip, #60]	; 0x3c
   20560:	ldr	r5, [sp, #4]
   20564:	mov	r1, #0
   20568:	add	r2, r5, r1
   2056c:	add	r3, r0, r1
   20570:	vld1.32	{d20-d21}, [r2]
   20574:	vld1.32	{d18-d19}, [r3]
   20578:	add	r2, r9, r1
   2057c:	add	r1, r1, #16
   20580:	vld1.32	{d22-d23}, [r2]
   20584:	cmp	r1, #32
   20588:	vorn	q9, q10, q9
   2058c:	vand	q9, q11, q9
   20590:	vorr	q8, q9, q8
   20594:	vst1.32	{d18-d19}, [r2]
   20598:	bne	20568 <__assert_fail@plt+0xedf8>
   2059c:	b	206f4 <__assert_fail@plt+0xef84>
   205a0:	cmp	r0, #7
   205a4:	beq	205ec <__assert_fail@plt+0xee7c>
   205a8:	cmp	r0, #5
   205ac:	beq	2063c <__assert_fail@plt+0xeecc>
   205b0:	cmp	r0, #3
   205b4:	bne	20a10 <__assert_fail@plt+0xf2a0>
   205b8:	ldr	r0, [r1, lr, lsl #3]
   205bc:	str	r1, [sp, #8]
   205c0:	mov	r1, #0
   205c4:	add	r2, r9, r1
   205c8:	add	r3, r0, r1
   205cc:	add	r1, r1, #16
   205d0:	vld1.32	{d16-d17}, [r3]
   205d4:	vld1.32	{d18-d19}, [r2]
   205d8:	cmp	r1, #32
   205dc:	vorr	q8, q9, q8
   205e0:	vst1.32	{d16-d17}, [r2]
   205e4:	bne	205c4 <__assert_fail@plt+0xee54>
   205e8:	b	204e8 <__assert_fail@plt+0xed78>
   205ec:	mvn	r0, #0
   205f0:	str	r1, [sp, #8]
   205f4:	str	r0, [fp, #-1084]	; 0xfffffbc4
   205f8:	str	r0, [fp, #-1088]	; 0xfffffbc0
   205fc:	str	r0, [fp, #-1092]	; 0xfffffbbc
   20600:	str	r0, [fp, #-1096]	; 0xfffffbb8
   20604:	ldr	r1, [ip, #128]	; 0x80
   20608:	and	r0, r1, #128	; 0x80
   2060c:	ands	r1, r1, #64	; 0x40
   20610:	beq	2061c <__assert_fail@plt+0xeeac>
   20614:	cmp	r0, #0
   20618:	beq	204e8 <__assert_fail@plt+0xed78>
   2061c:	cmp	r1, #0
   20620:	mvn	r1, #1
   20624:	movweq	r1, #64510	; 0xfbfe
   20628:	movteq	r1, #65535	; 0xffff
   2062c:	cmp	r0, #0
   20630:	mvneq	r1, #1024	; 0x400
   20634:	str	r1, [fp, #-1096]	; 0xfffffbb8
   20638:	b	204e8 <__assert_fail@plt+0xed78>
   2063c:	ldr	r0, [ip, #92]	; 0x5c
   20640:	str	r1, [sp, #8]
   20644:	cmp	r0, #2
   20648:	blt	2067c <__assert_fail@plt+0xef0c>
   2064c:	ldr	r0, [ip, #60]	; 0x3c
   20650:	mov	r1, #0
   20654:	add	r2, r9, r1
   20658:	add	r3, r0, r1
   2065c:	add	r1, r1, #16
   20660:	vld1.32	{d16-d17}, [r3]
   20664:	vld1.32	{d18-d19}, [r2]
   20668:	cmp	r1, #32
   2066c:	vorr	q8, q9, q8
   20670:	vst1.32	{d16-d17}, [r2]
   20674:	bne	20654 <__assert_fail@plt+0xeee4>
   20678:	b	20694 <__assert_fail@plt+0xef24>
   2067c:	mov	r0, r9
   20680:	mov	r1, #255	; 0xff
   20684:	mov	r2, #32
   20688:	bl	1165c <memset@plt>
   2068c:	ldr	lr, [sp, #12]
   20690:	ldr	ip, [sp, #28]
   20694:	ldr	r0, [ip, #128]	; 0x80
   20698:	tst	r0, #64	; 0x40
   2069c:	bne	206ac <__assert_fail@plt+0xef3c>
   206a0:	ldr	r1, [fp, #-1096]	; 0xfffffbb8
   206a4:	bic	r1, r1, #1024	; 0x400
   206a8:	str	r1, [fp, #-1096]	; 0xfffffbb8
   206ac:	tst	r0, #128	; 0x80
   206b0:	beq	204e8 <__assert_fail@plt+0xed78>
   206b4:	ldr	r0, [fp, #-1096]	; 0xfffffbb8
   206b8:	bic	r0, r0, #1
   206bc:	str	r0, [fp, #-1096]	; 0xfffffbb8
   206c0:	b	204e8 <__assert_fail@plt+0xed78>
   206c4:	ldr	r3, [sp, #4]
   206c8:	mov	r0, #0
   206cc:	add	r1, r9, r0
   206d0:	add	r2, r3, r0
   206d4:	add	r0, r0, #16
   206d8:	vld1.32	{d18-d19}, [r2]
   206dc:	vld1.32	{d20-d21}, [r1]
   206e0:	cmp	r0, #32
   206e4:	vand	q9, q10, q9
   206e8:	vorr	q8, q9, q8
   206ec:	vst1.32	{d18-d19}, [r1]
   206f0:	bne	206cc <__assert_fail@plt+0xef5c>
   206f4:	vext.8	q9, q8, q8, #8
   206f8:	mov	r5, lr
   206fc:	ldr	lr, [sp, #12]
   20700:	ldr	r3, [sp, #20]
   20704:	vorr	q8, q8, q9
   20708:	vdup.32	q9, d16[1]
   2070c:	vorr	q8, q8, q9
   20710:	vmov.32	r0, d16[0]
   20714:	cmp	r0, #0
   20718:	beq	20a10 <__assert_fail@plt+0xf2a0>
   2071c:	tst	r7, #2048	; 0x800
   20720:	beq	207e0 <__assert_fail@plt+0xf070>
   20724:	tst	r7, #4194304	; 0x400000
   20728:	beq	20740 <__assert_fail@plt+0xefd0>
   2072c:	cmp	r3, #1
   20730:	bne	20740 <__assert_fail@plt+0xefd0>
   20734:	mov	r0, r9
   20738:	vst1.64	{d8-d9}, [r0]!
   2073c:	b	20a0c <__assert_fail@plt+0xf29c>
   20740:	ldr	r0, [ip, #92]	; 0x5c
   20744:	ldr	r7, [sp, #4]
   20748:	vmov.i32	q8, #0	; 0x00000000
   2074c:	cmp	r0, #1
   20750:	ble	20794 <__assert_fail@plt+0xf024>
   20754:	ldr	r0, [ip, #60]	; 0x3c
   20758:	mov	r1, #0
   2075c:	add	r2, r0, r1
   20760:	add	r3, r7, r1
   20764:	vld1.32	{d20-d21}, [r2]
   20768:	vld1.32	{d18-d19}, [r3]
   2076c:	add	r2, r9, r1
   20770:	add	r1, r1, #16
   20774:	vld1.32	{d22-d23}, [r2]
   20778:	cmp	r1, #32
   2077c:	vand	q9, q10, q9
   20780:	vbic	q9, q11, q9
   20784:	vorr	q8, q9, q8
   20788:	vst1.32	{d18-d19}, [r2]
   2078c:	bne	2075c <__assert_fail@plt+0xefec>
   20790:	b	207c0 <__assert_fail@plt+0xf050>
   20794:	mov	r0, #0
   20798:	add	r1, r9, r0
   2079c:	add	r2, r7, r0
   207a0:	add	r0, r0, #16
   207a4:	vld1.32	{d18-d19}, [r2]
   207a8:	vld1.32	{d20-d21}, [r1]
   207ac:	cmp	r0, #32
   207b0:	vbic	q9, q10, q9
   207b4:	vorr	q8, q9, q8
   207b8:	vst1.32	{d18-d19}, [r1]
   207bc:	bne	20798 <__assert_fail@plt+0xf028>
   207c0:	vext.8	q9, q8, q8, #8
   207c4:	ldr	r3, [sp, #20]
   207c8:	vorr	q8, q8, q9
   207cc:	vdup.32	q9, d16[1]
   207d0:	vorr	q8, q8, q9
   207d4:	vmov.32	r0, d16[0]
   207d8:	cmp	r0, #0
   207dc:	beq	20a10 <__assert_fail@plt+0xf2a0>
   207e0:	mov	r7, #0
   207e4:	cmp	r6, #1
   207e8:	blt	2098c <__assert_fail@plt+0xf21c>
   207ec:	add	sl, sp, #32
   207f0:	cmp	r3, #1
   207f4:	bne	20820 <__assert_fail@plt+0xf0b0>
   207f8:	ldr	r1, [sp, #8]
   207fc:	add	r0, sp, #32
   20800:	add	r0, r0, r7, lsl #5
   20804:	ldrb	r1, [r1, lr, lsl #3]
   20808:	ubfx	r2, r1, #5, #3
   2080c:	and	r1, r1, #31
   20810:	ldr	r0, [r0, r2, lsl #2]
   20814:	mov	r2, #1
   20818:	tst	r0, r2, lsl r1
   2081c:	beq	20974 <__assert_fail@plt+0xf204>
   20820:	vmov.i32	q8, #0	; 0x00000000
   20824:	mov	r0, #0
   20828:	add	r1, sl, r0
   2082c:	add	r2, r9, r0
   20830:	vld1.32	{d20-d21}, [r1]
   20834:	vld1.32	{d18-d19}, [r2]
   20838:	add	r1, r4, r0
   2083c:	add	r0, r0, #16
   20840:	cmp	r0, #32
   20844:	vand	q9, q10, q9
   20848:	vorr	q8, q9, q8
   2084c:	vst1.32	{d18-d19}, [r1]
   20850:	bne	20828 <__assert_fail@plt+0xf0b8>
   20854:	vext.8	q9, q8, q8, #8
   20858:	vorr	q8, q8, q9
   2085c:	vdup.32	q9, d16[1]
   20860:	vorr	q8, q8, q9
   20864:	vmov.32	r0, d16[0]
   20868:	cmp	r0, #0
   2086c:	beq	20974 <__assert_fail@plt+0xf204>
   20870:	vmov.i32	q5, #0	; 0x00000000
   20874:	vmov.i32	q8, #0	; 0x00000000
   20878:	mov	r0, #0
   2087c:	add	r1, r9, r0
   20880:	add	r2, sl, r0
   20884:	vld1.32	{d18-d19}, [r2]
   20888:	vld1.32	{d20-d21}, [r1]
   2088c:	add	r2, r8, r0
   20890:	add	r0, r0, #16
   20894:	cmp	r0, #32
   20898:	vbic	q11, q10, q9
   2089c:	vbic	q9, q9, q10
   208a0:	vorr	q5, q11, q5
   208a4:	vorr	q8, q9, q8
   208a8:	vst1.32	{d18-d19}, [r2]
   208ac:	vst1.32	{d22-d23}, [r1]
   208b0:	bne	2087c <__assert_fail@plt+0xf10c>
   208b4:	vext.8	q9, q8, q8, #8
   208b8:	vorr	q8, q8, q9
   208bc:	vdup.32	q9, d16[1]
   208c0:	vorr	q8, q8, q9
   208c4:	vmov.32	r0, d16[0]
   208c8:	cmp	r0, #0
   208cc:	beq	20928 <__assert_fail@plt+0xf1b8>
   208d0:	mov	r0, r8
   208d4:	add	r2, sp, #32
   208d8:	mov	r1, r4
   208dc:	vld1.32	{d16-d17}, [r0]!
   208e0:	mov	r3, r2
   208e4:	add	r2, r2, r6, lsl #5
   208e8:	vld1.32	{d18-d19}, [r1]!
   208ec:	vld1.64	{d20-d21}, [r0]
   208f0:	add	r0, r3, r7, lsl #5
   208f4:	vst1.32	{d16-d17}, [r2]!
   208f8:	vld1.64	{d16-d17}, [r1]
   208fc:	add	r1, r7, r7, lsl #1
   20900:	vst1.32	{d20-d21}, [r2]
   20904:	vst1.32	{d18-d19}, [r0]!
   20908:	add	r1, r5, r1, lsl #2
   2090c:	vst1.32	{d16-d17}, [r0]
   20910:	add	r0, r6, r6, lsl #1
   20914:	add	r0, r5, r0, lsl #2
   20918:	bl	1d678 <__assert_fail@plt+0xbf08>
   2091c:	cmp	r0, #0
   20920:	bne	20dd4 <__assert_fail@plt+0xf664>
   20924:	add	r6, r6, #1
   20928:	ldr	r0, [sp, #16]
   2092c:	ldr	r1, [sp, #24]
   20930:	ldr	r0, [r0, #12]
   20934:	ldr	r1, [r0, r1, lsl #2]
   20938:	add	r0, r7, r7, lsl #1
   2093c:	add	r0, r5, r0, lsl #2
   20940:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   20944:	cmp	r0, #0
   20948:	beq	20dd4 <__assert_fail@plt+0xf664>
   2094c:	vext.8	q8, q5, q8, #8
   20950:	vorr	q8, q5, q8
   20954:	vdup.32	q9, d16[1]
   20958:	vorr	q8, q8, q9
   2095c:	vmov.32	r0, d16[0]
   20960:	cmp	r0, #0
   20964:	beq	20988 <__assert_fail@plt+0xf218>
   20968:	ldr	ip, [sp, #28]
   2096c:	ldr	lr, [sp, #12]
   20970:	ldr	r3, [sp, #20]
   20974:	add	r7, r7, #1
   20978:	add	sl, sl, #32
   2097c:	cmp	r7, r6
   20980:	blt	207f0 <__assert_fail@plt+0xf080>
   20984:	b	2098c <__assert_fail@plt+0xf21c>
   20988:	ldr	ip, [sp, #28]
   2098c:	ldr	sl, [sp, #16]
   20990:	cmp	r7, r6
   20994:	bne	20a10 <__assert_fail@plt+0xf2a0>
   20998:	mov	r0, r9
   2099c:	ldr	r1, [sp, #24]
   209a0:	vld1.32	{d16-d17}, [r0]!
   209a4:	vld1.64	{d18-d19}, [r0]
   209a8:	add	r0, sp, #32
   209ac:	add	r0, r0, r7, lsl #5
   209b0:	vst1.32	{d16-d17}, [r0]!
   209b4:	vst1.32	{d18-d19}, [r0]
   209b8:	ldr	r0, [sl, #12]
   209bc:	ldr	sl, [r0, r1, lsl #2]
   209c0:	add	r0, r7, r7, lsl #1
   209c4:	mov	r1, #1
   209c8:	str	r1, [r5, r0, lsl #2]
   209cc:	add	r5, r5, r0, lsl #2
   209d0:	mov	r0, #4
   209d4:	mov	r6, r5
   209d8:	str	r1, [r6, #4]!
   209dc:	bl	23994 <__assert_fail@plt+0x12224>
   209e0:	cmp	r0, #0
   209e4:	str	r0, [r5, #8]
   209e8:	beq	20dfc <__assert_fail@plt+0xf68c>
   209ec:	str	sl, [r0]
   209f0:	ldr	ip, [sp, #28]
   209f4:	ldr	sl, [sp, #16]
   209f8:	mov	r0, r9
   209fc:	sub	lr, fp, #6144	; 0x1800
   20a00:	add	r6, r7, #1
   20a04:	vst1.64	{d8-d9}, [r0]!
   20a08:	sub	r5, lr, #120	; 0x78
   20a0c:	vst1.64	{d8-d9}, [r0]
   20a10:	ldr	r1, [sp, #24]
   20a14:	ldr	r0, [sl, #8]
   20a18:	add	r1, r1, #1
   20a1c:	cmp	r1, r0
   20a20:	blt	2049c <__assert_fail@plt+0xed2c>
   20a24:	mov	r0, #0
   20a28:	cmp	r6, #0
   20a2c:	ble	20e14 <__assert_fail@plt+0xf6a4>
   20a30:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20a34:	add	r0, r6, #1
   20a38:	str	r6, [sp, #20]
   20a3c:	str	r0, [fp, #-3156]	; 0xfffff3ac
   20a40:	lsl	r0, r0, #2
   20a44:	bl	23994 <__assert_fail@plt+0x12224>
   20a48:	cmp	r0, #0
   20a4c:	str	r0, [fp, #-3148]	; 0xfffff3b4
   20a50:	mov	r0, #0
   20a54:	movweq	r0, #12
   20a58:	str	r0, [fp, #-72]	; 0xffffffb8
   20a5c:	beq	20e40 <__assert_fail@plt+0xf6d0>
   20a60:	vmov.i32	q8, #0	; 0x00000000
   20a64:	sub	lr, fp, #3072	; 0xc00
   20a68:	ldr	r1, [sp, #28]
   20a6c:	add	r7, sp, #32
   20a70:	mov	r4, #0
   20a74:	mov	r2, #0
   20a78:	sub	r0, lr, #120	; 0x78
   20a7c:	vst1.64	{d16-d17}, [r0]!
   20a80:	vst1.64	{d16-d17}, [r0]
   20a84:	mov	r0, #0
   20a88:	str	r0, [sp, #12]
   20a8c:	mov	r0, #0
   20a90:	str	r2, [sp, #24]
   20a94:	str	r0, [fp, #-3152]	; 0xfffff3b0
   20a98:	add	r0, r2, r2, lsl #1
   20a9c:	add	r0, r5, r0, lsl #2
   20aa0:	ldr	r6, [r0, #4]
   20aa4:	cmp	r6, #1
   20aa8:	blt	20b0c <__assert_fail@plt+0xf39c>
   20aac:	ldr	sl, [r0, #8]
   20ab0:	mov	r5, #0
   20ab4:	ldr	r0, [sl, r5, lsl #2]
   20ab8:	ldr	r2, [r1, #12]
   20abc:	ldr	r0, [r2, r0, lsl #2]
   20ac0:	cmn	r0, #1
   20ac4:	beq	20af0 <__assert_fail@plt+0xf380>
   20ac8:	ldr	r1, [r1, #24]
   20acc:	add	r0, r0, r0, lsl #1
   20ad0:	sub	lr, fp, #3072	; 0xc00
   20ad4:	add	r1, r1, r0, lsl #2
   20ad8:	sub	r0, lr, #84	; 0x54
   20adc:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   20ae0:	ldr	r1, [sp, #28]
   20ae4:	mov	r4, #0
   20ae8:	cmp	r0, #0
   20aec:	bne	20d94 <__assert_fail@plt+0xf624>
   20af0:	add	r5, r5, #1
   20af4:	cmp	r5, r6
   20af8:	blt	20ab4 <__assert_fail@plt+0xf344>
   20afc:	ldr	sl, [sp, #16]
   20b00:	sub	lr, fp, #6144	; 0x1800
   20b04:	str	r4, [fp, #-72]	; 0xffffffb8
   20b08:	sub	r5, lr, #120	; 0x78
   20b0c:	sub	lr, fp, #3072	; 0xc00
   20b10:	sub	r0, fp, #72	; 0x48
   20b14:	mov	r3, #0
   20b18:	sub	r2, lr, #84	; 0x54
   20b1c:	bl	1d75c <__assert_fail@plt+0xbfec>
   20b20:	ldr	r1, [sp, #24]
   20b24:	ldr	r4, [fp, #-72]	; 0xffffffb8
   20b28:	mov	r6, r0
   20b2c:	cmp	r0, #0
   20b30:	str	r0, [r9, r1, lsl #2]
   20b34:	bne	20b40 <__assert_fail@plt+0xf3d0>
   20b38:	cmp	r4, #0
   20b3c:	bne	20da0 <__assert_fail@plt+0xf630>
   20b40:	ldrsb	r0, [r6, #52]	; 0x34
   20b44:	cmn	r0, #1
   20b48:	ble	20b60 <__assert_fail@plt+0xf3f0>
   20b4c:	sub	lr, fp, #2048	; 0x800
   20b50:	str	r6, [r8, r1, lsl #2]
   20b54:	sub	r0, lr, #72	; 0x48
   20b58:	str	r6, [r0, r1, lsl #2]
   20b5c:	b	20bfc <__assert_fail@plt+0xf48c>
   20b60:	ldr	r1, [sp, #28]
   20b64:	sub	lr, fp, #3072	; 0xc00
   20b68:	sub	r0, fp, #72	; 0x48
   20b6c:	mov	r3, #1
   20b70:	sub	r2, lr, #84	; 0x54
   20b74:	bl	1d75c <__assert_fail@plt+0xbfec>
   20b78:	ldr	r2, [sp, #24]
   20b7c:	sub	lr, fp, #2048	; 0x800
   20b80:	cmp	r0, #0
   20b84:	sub	r1, lr, #72	; 0x48
   20b88:	str	r0, [r1, r2, lsl #2]
   20b8c:	bne	20b9c <__assert_fail@plt+0xf42c>
   20b90:	ldr	r1, [fp, #-72]	; 0xffffffb8
   20b94:	cmp	r1, #0
   20b98:	bne	20da0 <__assert_fail@plt+0xf630>
   20b9c:	cmp	r6, r0
   20ba0:	beq	20bc8 <__assert_fail@plt+0xf458>
   20ba4:	ldr	r1, [sp, #28]
   20ba8:	ldr	r2, [sp, #12]
   20bac:	ldr	r0, [r1, #92]	; 0x5c
   20bb0:	cmp	r0, #1
   20bb4:	mov	r0, #0
   20bb8:	movwgt	r0, #1
   20bbc:	orr	r2, r2, r0
   20bc0:	str	r2, [sp, #12]
   20bc4:	b	20bcc <__assert_fail@plt+0xf45c>
   20bc8:	ldr	r1, [sp, #28]
   20bcc:	sub	lr, fp, #3072	; 0xc00
   20bd0:	sub	r0, fp, #72	; 0x48
   20bd4:	mov	r3, #2
   20bd8:	sub	r2, lr, #84	; 0x54
   20bdc:	bl	1d75c <__assert_fail@plt+0xbfec>
   20be0:	ldr	r1, [sp, #24]
   20be4:	ldr	r4, [fp, #-72]	; 0xffffffb8
   20be8:	cmp	r0, #0
   20bec:	str	r0, [r8, r1, lsl #2]
   20bf0:	bne	20bfc <__assert_fail@plt+0xf48c>
   20bf4:	cmp	r4, #0
   20bf8:	bne	20da0 <__assert_fail@plt+0xf630>
   20bfc:	sub	lr, fp, #3072	; 0xc00
   20c00:	mov	r0, #0
   20c04:	sub	r1, lr, #120	; 0x78
   20c08:	add	r2, r1, r0
   20c0c:	add	r3, r7, r0
   20c10:	add	r0, r0, #16
   20c14:	vld1.32	{d16-d17}, [r3]
   20c18:	vld1.32	{d18-d19}, [r2]
   20c1c:	cmp	r0, #32
   20c20:	vorr	q8, q9, q8
   20c24:	vst1.32	{d16-d17}, [r2]
   20c28:	bne	20c08 <__assert_fail@plt+0xf498>
   20c2c:	ldr	r2, [sp, #24]
   20c30:	ldr	r0, [sp, #20]
   20c34:	ldr	r1, [sp, #28]
   20c38:	add	r7, r7, #32
   20c3c:	add	r2, r2, #1
   20c40:	cmp	r2, r0
   20c44:	bne	20a8c <__assert_fail@plt+0xf31c>
   20c48:	ldr	r0, [sp, #12]
   20c4c:	tst	r0, #1
   20c50:	bne	20e50 <__assert_fail@plt+0xf6e0>
   20c54:	mov	r0, #4
   20c58:	mov	r1, #256	; 0x100
   20c5c:	bl	23940 <__assert_fail@plt+0x121d0>
   20c60:	cmp	r0, #0
   20c64:	str	r0, [sl, #44]	; 0x2c
   20c68:	beq	20da0 <__assert_fail@plt+0xf630>
   20c6c:	ldr	r4, [sp, #28]
   20c70:	mov	sl, r0
   20c74:	mov	r1, #0
   20c78:	add	ip, sp, #32
   20c7c:	mov	r3, #0
   20c80:	sub	lr, fp, #3072	; 0xc00
   20c84:	sub	r0, lr, #120	; 0x78
   20c88:	ldr	r7, [r0, r3, lsl #2]
   20c8c:	cmp	r7, #0
   20c90:	beq	20d0c <__assert_fail@plt+0xf59c>
   20c94:	add	r6, r4, r3, lsl #2
   20c98:	lsl	r5, r3, #5
   20c9c:	add	r0, r6, #96	; 0x60
   20ca0:	mov	r6, #1
   20ca4:	tst	r7, #1
   20ca8:	bne	20cc8 <__assert_fail@plt+0xf558>
   20cac:	lsr	r2, r7, #1
   20cb0:	cmp	r1, r7, lsr #1
   20cb4:	add	r5, r5, #1
   20cb8:	lsl	r6, r6, #1
   20cbc:	mov	r7, r2
   20cc0:	bne	20ca4 <__assert_fail@plt+0xf534>
   20cc4:	b	20d0c <__assert_fail@plt+0xf59c>
   20cc8:	mov	r4, sl
   20ccc:	mov	lr, #0
   20cd0:	ldr	sl, [ip, lr, lsl #3]
   20cd4:	add	lr, lr, #4
   20cd8:	tst	sl, r6
   20cdc:	beq	20cd0 <__assert_fail@plt+0xf560>
   20ce0:	ldr	r2, [r0]
   20ce4:	mov	sl, r4
   20ce8:	tst	r2, r6
   20cec:	sub	r2, fp, #2048	; 0x800
   20cf0:	sub	r2, r2, #72	; 0x48
   20cf4:	moveq	r2, r9
   20cf8:	add	r2, r2, lr
   20cfc:	ldr	r2, [r2, #-4]
   20d00:	str	r2, [r4, r5, lsl #2]
   20d04:	ldr	r4, [sp, #28]
   20d08:	b	20cac <__assert_fail@plt+0xf53c>
   20d0c:	add	r3, r3, #1
   20d10:	add	ip, ip, #4
   20d14:	cmp	r3, #8
   20d18:	bne	20c80 <__assert_fail@plt+0xf510>
   20d1c:	ldrb	r0, [fp, #-3191]	; 0xfffff389
   20d20:	ldr	r5, [sp, #20]
   20d24:	sub	lr, fp, #6144	; 0x1800
   20d28:	sub	r4, lr, #120	; 0x78
   20d2c:	tst	r0, #4
   20d30:	beq	20d70 <__assert_fail@plt+0xf600>
   20d34:	add	r1, sp, #32
   20d38:	mov	r2, r5
   20d3c:	ldrb	r0, [r1, #1]
   20d40:	tst	r0, #4
   20d44:	bne	20d5c <__assert_fail@plt+0xf5ec>
   20d48:	add	r1, r1, #32
   20d4c:	subs	r2, r2, #1
   20d50:	add	r8, r8, #4
   20d54:	bne	20d3c <__assert_fail@plt+0xf5cc>
   20d58:	b	20d70 <__assert_fail@plt+0xf600>
   20d5c:	ldr	r0, [sp, #12]
   20d60:	ldr	r1, [r8]
   20d64:	tst	r0, #1
   20d68:	str	r1, [sl, #40]	; 0x28
   20d6c:	strne	r1, [sl, #1064]	; 0x428
   20d70:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20d74:	bl	13bd0 <__assert_fail@plt+0x2460>
   20d78:	add	r4, r4, #8
   20d7c:	ldr	r0, [r4], #12
   20d80:	bl	13bd0 <__assert_fail@plt+0x2460>
   20d84:	subs	r5, r5, #1
   20d88:	bne	20d7c <__assert_fail@plt+0xf60c>
   20d8c:	mov	r0, #1
   20d90:	b	20e30 <__assert_fail@plt+0xf6c0>
   20d94:	sub	lr, fp, #6144	; 0x1800
   20d98:	str	r0, [fp, #-72]	; 0xffffffb8
   20d9c:	sub	r5, lr, #120	; 0x78
   20da0:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20da4:	bl	13bd0 <__assert_fail@plt+0x2460>
   20da8:	ldr	r1, [sp, #20]
   20dac:	cmp	r1, #1
   20db0:	blt	20df4 <__assert_fail@plt+0xf684>
   20db4:	add	r4, r5, #8
   20db8:	ldr	r0, [r4], #12
   20dbc:	mov	r5, r1
   20dc0:	bl	13bd0 <__assert_fail@plt+0x2460>
   20dc4:	mov	r1, r5
   20dc8:	subs	r1, r5, #1
   20dcc:	bne	20db8 <__assert_fail@plt+0xf648>
   20dd0:	b	20df4 <__assert_fail@plt+0xf684>
   20dd4:	mov	r7, r6
   20dd8:	cmp	r7, #1
   20ddc:	blt	20df4 <__assert_fail@plt+0xf684>
   20de0:	add	r4, r5, #8
   20de4:	ldr	r0, [r4], #12
   20de8:	bl	13bd0 <__assert_fail@plt+0x2460>
   20dec:	subs	r7, r7, #1
   20df0:	bne	20de4 <__assert_fail@plt+0xf674>
   20df4:	mov	r0, #0
   20df8:	b	20e30 <__assert_fail@plt+0xf6c0>
   20dfc:	mov	r0, #0
   20e00:	sub	lr, fp, #6144	; 0x1800
   20e04:	str	r0, [r6]
   20e08:	str	r0, [r5]
   20e0c:	sub	r5, lr, #120	; 0x78
   20e10:	b	20dd8 <__assert_fail@plt+0xf668>
   20e14:	bne	20e30 <__assert_fail@plt+0xf6c0>
   20e18:	mov	r0, #4
   20e1c:	mov	r1, #256	; 0x100
   20e20:	bl	23940 <__assert_fail@plt+0x121d0>
   20e24:	cmp	r0, #0
   20e28:	str	r0, [sl, #44]	; 0x2c
   20e2c:	movwne	r0, #1
   20e30:	sub	sp, fp, #64	; 0x40
   20e34:	vpop	{d8-d11}
   20e38:	add	sp, sp, #4
   20e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e40:	ldr	r0, [fp, #-3148]	; 0xfffff3b4
   20e44:	bl	13bd0 <__assert_fail@plt+0x2460>
   20e48:	ldr	r1, [sp, #20]
   20e4c:	b	20db4 <__assert_fail@plt+0xf644>
   20e50:	mov	r0, #4
   20e54:	mov	r1, #512	; 0x200
   20e58:	bl	23940 <__assert_fail@plt+0x121d0>
   20e5c:	cmp	r0, #0
   20e60:	str	r0, [sl, #48]	; 0x30
   20e64:	beq	20da0 <__assert_fail@plt+0xf630>
   20e68:	sub	lr, fp, #2048	; 0x800
   20e6c:	mov	sl, r0
   20e70:	sub	ip, r9, #4
   20e74:	mov	r3, #0
   20e78:	add	r7, sp, #32
   20e7c:	mov	r6, #0
   20e80:	sub	r0, lr, #72	; 0x48
   20e84:	sub	lr, r0, #4
   20e88:	sub	r0, fp, #3072	; 0xc00
   20e8c:	sub	r0, r0, #120	; 0x78
   20e90:	ldr	r5, [r0, r6, lsl #2]
   20e94:	cmp	r5, #0
   20e98:	beq	20f08 <__assert_fail@plt+0xf798>
   20e9c:	lsl	r4, r6, #5
   20ea0:	mov	r1, #1
   20ea4:	tst	r5, #1
   20ea8:	bne	20ec8 <__assert_fail@plt+0xf758>
   20eac:	lsr	r0, r5, #1
   20eb0:	cmp	r3, r5, lsr #1
   20eb4:	add	r4, r4, #1
   20eb8:	lsl	r1, r1, #1
   20ebc:	mov	r5, r0
   20ec0:	bne	20ea4 <__assert_fail@plt+0xf734>
   20ec4:	b	20f08 <__assert_fail@plt+0xf798>
   20ec8:	str	sl, [sp, #28]
   20ecc:	mov	r2, r7
   20ed0:	mov	sl, ip
   20ed4:	mov	r9, lr
   20ed8:	ldr	r0, [r2], #32
   20edc:	add	sl, sl, #4
   20ee0:	add	r9, r9, #4
   20ee4:	tst	r0, r1
   20ee8:	beq	20ed8 <__assert_fail@plt+0xf768>
   20eec:	ldr	r0, [sl]
   20ef0:	ldr	sl, [sp, #28]
   20ef4:	mov	r2, sl
   20ef8:	str	r0, [r2, r4, lsl #2]!
   20efc:	ldr	r0, [r9]
   20f00:	str	r0, [r2, #1024]	; 0x400
   20f04:	b	20eac <__assert_fail@plt+0xf73c>
   20f08:	add	r6, r6, #1
   20f0c:	add	r7, r7, #4
   20f10:	cmp	r6, #8
   20f14:	bne	20e88 <__assert_fail@plt+0xf718>
   20f18:	b	20d1c <__assert_fail@plt+0xf5ac>
   20f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f20:	add	fp, sp, #28
   20f24:	sub	sp, sp, #44	; 0x2c
   20f28:	ldr	r4, [r1, #8]
   20f2c:	ldr	r6, [r1, #12]
   20f30:	mov	r9, r0
   20f34:	mov	r0, #1
   20f38:	mov	sl, r1
   20f3c:	str	r0, [sp, #36]	; 0x24
   20f40:	str	r0, [sp, #32]
   20f44:	mov	r0, #4
   20f48:	bl	23994 <__assert_fail@plt+0x12224>
   20f4c:	cmp	r0, #0
   20f50:	str	r0, [sp, #40]	; 0x28
   20f54:	beq	211a0 <__assert_fail@plt+0xfa30>
   20f58:	str	r4, [r0]
   20f5c:	add	r3, sp, #32
   20f60:	mov	r0, r9
   20f64:	mov	r1, sl
   20f68:	mov	r2, r6
   20f6c:	bl	21260 <__assert_fail@plt+0xfaf0>
   20f70:	cmp	r0, #0
   20f74:	bne	21164 <__assert_fail@plt+0xf9f4>
   20f78:	add	r0, sl, #16
   20f7c:	mov	r1, #0
   20f80:	str	r0, [sp, #12]
   20f84:	cmp	r6, #1
   20f88:	blt	21174 <__assert_fail@plt+0xfa04>
   20f8c:	ldr	r0, [sl]
   20f90:	ldr	r2, [r0, r6, lsl #2]
   20f94:	cmp	r2, #0
   20f98:	mov	r2, #0
   20f9c:	addeq	r2, r1, #1
   20fa0:	ldr	r1, [r9, #120]	; 0x78
   20fa4:	cmp	r2, r1
   20fa8:	bgt	2117c <__assert_fail@plt+0xfa0c>
   20fac:	mov	r0, #0
   20fb0:	str	r6, [sp, #16]
   20fb4:	sub	r6, r6, #1
   20fb8:	str	r2, [sp, #8]
   20fbc:	str	r0, [sp, #36]	; 0x24
   20fc0:	ldr	r0, [r9, #100]	; 0x64
   20fc4:	ldr	r1, [r0, r6, lsl #2]
   20fc8:	cmp	r1, #0
   20fcc:	beq	21144 <__assert_fail@plt+0xf9d4>
   20fd0:	ldr	r0, [r1, #20]
   20fd4:	cmp	r0, #1
   20fd8:	blt	21144 <__assert_fail@plt+0xf9d4>
   20fdc:	ldr	r0, [r9, #84]	; 0x54
   20fe0:	mov	r5, #0
   20fe4:	str	r1, [sp, #24]
   20fe8:	str	r0, [sp, #28]
   20fec:	ldr	r0, [r1, #24]
   20ff0:	ldr	r7, [r0, r5, lsl #2]
   20ff4:	ldr	r0, [sp, #28]
   20ff8:	ldr	r0, [r0]
   20ffc:	add	r0, r0, r7, lsl #3
   21000:	ldrb	r0, [r0, #6]
   21004:	tst	r0, #16
   21008:	bne	21064 <__assert_fail@plt+0xf8f4>
   2100c:	ldr	r0, [sp, #28]
   21010:	mov	r2, r6
   21014:	ldr	r0, [r0]
   21018:	add	r1, r0, r7, lsl #3
   2101c:	mov	r0, r9
   21020:	bl	202ec <__assert_fail@plt+0xeb7c>
   21024:	cmp	r0, #0
   21028:	beq	21130 <__assert_fail@plt+0xf9c0>
   2102c:	ldr	r0, [sl]
   21030:	ldr	r1, [sp, #16]
   21034:	ldr	r0, [r0, r1, lsl #2]
   21038:	cmp	r0, #0
   2103c:	beq	21130 <__assert_fail@plt+0xf9c0>
   21040:	ldr	r1, [sp, #28]
   21044:	add	r0, r0, #4
   21048:	ldr	r1, [r1, #12]
   2104c:	ldr	r1, [r1, r7, lsl #2]
   21050:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21054:	mov	r4, #1
   21058:	cmp	r0, #0
   2105c:	bne	210e4 <__assert_fail@plt+0xf974>
   21060:	b	21130 <__assert_fail@plt+0xf9c0>
   21064:	ldr	r0, [sl, #12]
   21068:	ldr	r8, [r9, #84]	; 0x54
   2106c:	mov	r2, r9
   21070:	mov	r1, r7
   21074:	mov	r3, r6
   21078:	str	r0, [sp, #20]
   2107c:	mov	r0, r8
   21080:	bl	1fff4 <__assert_fail@plt+0xe884>
   21084:	mov	r4, r0
   21088:	cmp	r0, #1
   2108c:	blt	210ac <__assert_fail@plt+0xf93c>
   21090:	ldr	r1, [sp, #20]
   21094:	add	r0, r4, r6
   21098:	mov	r2, r6
   2109c:	cmp	r0, r1
   210a0:	ble	210b8 <__assert_fail@plt+0xf948>
   210a4:	mov	r6, r2
   210a8:	b	210e4 <__assert_fail@plt+0xf974>
   210ac:	cmp	r4, #0
   210b0:	bne	210e4 <__assert_fail@plt+0xf974>
   210b4:	b	2100c <__assert_fail@plt+0xf89c>
   210b8:	ldr	r1, [sl]
   210bc:	mov	r6, r2
   210c0:	ldr	r0, [r1, r0, lsl #2]
   210c4:	cmp	r0, #0
   210c8:	beq	2100c <__assert_fail@plt+0xf89c>
   210cc:	ldr	r1, [r8, #12]
   210d0:	add	r0, r0, #4
   210d4:	ldr	r1, [r1, r7, lsl #2]
   210d8:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   210dc:	cmp	r0, #0
   210e0:	beq	2100c <__assert_fail@plt+0xf89c>
   210e4:	ldr	r0, [sl, #20]
   210e8:	cmp	r0, #0
   210ec:	beq	2111c <__assert_fail@plt+0xf9ac>
   210f0:	ldr	r0, [sp, #28]
   210f4:	ldr	r1, [sp, #12]
   210f8:	add	r3, r4, r6
   210fc:	ldr	r0, [r0, #12]
   21100:	ldr	r2, [r0, r7, lsl #2]
   21104:	mov	r0, r9
   21108:	str	r7, [sp]
   2110c:	str	r6, [sp, #4]
   21110:	bl	21d54 <__assert_fail@plt+0x105e4>
   21114:	cmp	r0, #0
   21118:	bne	21130 <__assert_fail@plt+0xf9c0>
   2111c:	add	r0, sp, #32
   21120:	mov	r1, r7
   21124:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   21128:	cmp	r0, #0
   2112c:	beq	2116c <__assert_fail@plt+0xf9fc>
   21130:	ldr	r1, [sp, #24]
   21134:	add	r5, r5, #1
   21138:	ldr	r0, [r1, #20]
   2113c:	cmp	r5, r0
   21140:	blt	20fec <__assert_fail@plt+0xf87c>
   21144:	mov	r0, r9
   21148:	mov	r1, sl
   2114c:	mov	r2, r6
   21150:	add	r3, sp, #32
   21154:	bl	21260 <__assert_fail@plt+0xfaf0>
   21158:	ldr	r1, [sp, #8]
   2115c:	cmp	r0, #0
   21160:	beq	20f84 <__assert_fail@plt+0xf814>
   21164:	mov	r4, r0
   21168:	b	2118c <__assert_fail@plt+0xfa1c>
   2116c:	mov	r4, #12
   21170:	b	2118c <__assert_fail@plt+0xfa1c>
   21174:	mov	r4, #0
   21178:	b	2118c <__assert_fail@plt+0xfa1c>
   2117c:	lsl	r2, r6, #2
   21180:	mov	r1, #0
   21184:	mov	r4, #0
   21188:	bl	1165c <memset@plt>
   2118c:	ldr	r0, [sp, #40]	; 0x28
   21190:	bl	13bd0 <__assert_fail@plt+0x2460>
   21194:	mov	r0, r4
   21198:	sub	sp, fp, #28
   2119c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211a0:	mov	r0, #0
   211a4:	mov	r4, #12
   211a8:	str	r0, [sp, #32]
   211ac:	str	r0, [sp, #36]	; 0x24
   211b0:	b	21194 <__assert_fail@plt+0xfa24>
   211b4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   211b8:	add	fp, sp, #24
   211bc:	sub	sp, sp, #16
   211c0:	cmp	r3, #1
   211c4:	blt	21254 <__assert_fail@plt+0xfae4>
   211c8:	mov	r4, r3
   211cc:	mov	r5, r2
   211d0:	mov	r6, r1
   211d4:	mov	r7, r0
   211d8:	mov	r8, sp
   211dc:	add	r9, sp, #12
   211e0:	ldr	r1, [r6]
   211e4:	ldr	r0, [r5]
   211e8:	cmp	r1, #0
   211ec:	beq	21240 <__assert_fail@plt+0xfad0>
   211f0:	cmp	r0, #0
   211f4:	beq	21244 <__assert_fail@plt+0xfad4>
   211f8:	add	r2, r0, #4
   211fc:	add	r1, r1, #4
   21200:	mov	r0, r8
   21204:	bl	1eee0 <__assert_fail@plt+0xd770>
   21208:	cmp	r0, #0
   2120c:	str	r0, [sp, #12]
   21210:	bne	21258 <__assert_fail@plt+0xfae8>
   21214:	mov	r0, r9
   21218:	mov	r1, r7
   2121c:	mov	r2, r8
   21220:	bl	1fdfc <__assert_fail@plt+0xe68c>
   21224:	str	r0, [r6]
   21228:	ldr	r0, [sp, #8]
   2122c:	bl	13bd0 <__assert_fail@plt+0x2460>
   21230:	ldr	r0, [sp, #12]
   21234:	cmp	r0, #0
   21238:	beq	21244 <__assert_fail@plt+0xfad4>
   2123c:	b	21258 <__assert_fail@plt+0xfae8>
   21240:	str	r0, [r6]
   21244:	add	r6, r6, #4
   21248:	add	r5, r5, #4
   2124c:	subs	r4, r4, #1
   21250:	bne	211e0 <__assert_fail@plt+0xfa70>
   21254:	mov	r0, #0
   21258:	sub	sp, fp, #24
   2125c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21264:	add	fp, sp, #28
   21268:	sub	sp, sp, #84	; 0x54
   2126c:	mov	r6, r3
   21270:	mov	r3, #0
   21274:	ldr	r7, [r0, #84]	; 0x54
   21278:	mov	r4, r2
   2127c:	str	r0, [sp, #44]	; 0x2c
   21280:	str	r1, [sp, #48]	; 0x30
   21284:	str	r3, [sp, #52]	; 0x34
   21288:	str	r4, [sp, #40]	; 0x28
   2128c:	ldr	r2, [r0, #100]	; 0x64
   21290:	ldr	r8, [r2, r4, lsl #2]
   21294:	ldr	r2, [r6, #4]
   21298:	cmp	r8, #0
   2129c:	mov	r0, r8
   212a0:	addne	r0, r0, #4
   212a4:	cmp	r2, #0
   212a8:	str	r0, [sp, #36]	; 0x24
   212ac:	beq	21628 <__assert_fail@plt+0xfeb8>
   212b0:	cmp	r8, #0
   212b4:	beq	215fc <__assert_fail@plt+0xfe8c>
   212b8:	mov	r0, #0
   212bc:	mov	r1, r7
   212c0:	mov	r2, r6
   212c4:	str	r7, [sp, #28]
   212c8:	str	r6, [sp, #20]
   212cc:	str	r0, [sp, #56]	; 0x38
   212d0:	add	r0, sp, #56	; 0x38
   212d4:	bl	1fdfc <__assert_fail@plt+0xe68c>
   212d8:	ldr	r9, [sp, #56]	; 0x38
   212dc:	cmp	r9, #0
   212e0:	bne	21944 <__assert_fail@plt+0x101d4>
   212e4:	mov	r6, r0
   212e8:	mov	r5, r0
   212ec:	ldr	r2, [sp, #20]
   212f0:	ldr	r0, [r6, #28]!
   212f4:	cmp	r0, #0
   212f8:	bne	2138c <__assert_fail@plt+0xfc1c>
   212fc:	ldr	r0, [r2, #4]
   21300:	mov	r4, #0
   21304:	mov	r7, r2
   21308:	str	r0, [r5, #28]
   2130c:	lsl	r0, r0, #2
   21310:	str	r4, [r5, #32]
   21314:	bl	23994 <__assert_fail@plt+0x12224>
   21318:	cmp	r0, #0
   2131c:	mov	r9, #12
   21320:	str	r0, [r5, #36]	; 0x24
   21324:	movweq	r4, #12
   21328:	str	r4, [sp, #56]	; 0x38
   2132c:	beq	21944 <__assert_fail@plt+0x101d4>
   21330:	ldr	r0, [r7, #4]
   21334:	mov	r2, r7
   21338:	cmp	r0, #1
   2133c:	blt	2138c <__assert_fail@plt+0xfc1c>
   21340:	mov	r5, #0
   21344:	ldr	r0, [r2, #8]
   21348:	ldr	r1, [sp, #28]
   2134c:	mov	r4, r2
   21350:	ldr	r0, [r0, r5, lsl #2]
   21354:	ldr	r1, [r1, #28]
   21358:	add	r0, r0, r0, lsl #1
   2135c:	add	r1, r1, r0, lsl #2
   21360:	mov	r0, r6
   21364:	bl	1d2d0 <__assert_fail@plt+0xbb60>
   21368:	cmp	r0, #0
   2136c:	bne	21954 <__assert_fail@plt+0x101e4>
   21370:	ldr	r0, [r4, #4]
   21374:	add	r5, r5, #1
   21378:	mov	r2, r4
   2137c:	cmp	r5, r0
   21380:	blt	21344 <__assert_fail@plt+0xfbd4>
   21384:	mov	r0, #0
   21388:	str	r0, [sp, #56]	; 0x38
   2138c:	ldr	r1, [sp, #36]	; 0x24
   21390:	mov	r0, r2
   21394:	mov	r2, r6
   21398:	bl	21970 <__assert_fail@plt+0x10200>
   2139c:	cmp	r0, #0
   213a0:	str	r0, [sp, #52]	; 0x34
   213a4:	bne	21968 <__assert_fail@plt+0x101f8>
   213a8:	ldr	ip, [sp, #48]	; 0x30
   213ac:	ldr	r4, [sp, #40]	; 0x28
   213b0:	ldr	r7, [sp, #28]
   213b4:	ldr	r6, [sp, #20]
   213b8:	ldr	r0, [ip, #20]
   213bc:	cmp	r0, #0
   213c0:	beq	215fc <__assert_fail@plt+0xfe8c>
   213c4:	cmp	r0, #1
   213c8:	str	r8, [sp, #12]
   213cc:	blt	215f0 <__assert_fail@plt+0xfe80>
   213d0:	ldr	r0, [sp, #44]	; 0x2c
   213d4:	mov	r8, #0
   213d8:	ldr	r0, [r0, #116]	; 0x74
   213dc:	str	r0, [sp, #24]
   213e0:	ldr	r0, [ip, #24]
   213e4:	ldr	r1, [sp, #24]
   213e8:	ldr	r0, [r0, r8, lsl #2]
   213ec:	add	r0, r0, r0, lsl #1
   213f0:	add	r1, r1, r0, lsl #3
   213f4:	ldr	r2, [r1, #8]
   213f8:	cmp	r2, r4
   213fc:	bge	215e0 <__assert_fail@plt+0xfe70>
   21400:	ldr	r1, [r1, #4]
   21404:	cmp	r1, r4
   21408:	blt	215e0 <__assert_fail@plt+0xfe70>
   2140c:	ldr	r1, [sp, #24]
   21410:	ldr	r2, [r7]
   21414:	ldr	r0, [r1, r0, lsl #3]!
   21418:	ldr	r1, [r1, #12]
   2141c:	ldr	sl, [r2, r0, lsl #3]
   21420:	ldr	r0, [r6, #4]
   21424:	cmp	r1, r4
   21428:	bne	21570 <__assert_fail@plt+0xfe00>
   2142c:	cmp	r0, #1
   21430:	blt	215e0 <__assert_fail@plt+0xfe70>
   21434:	ldr	r3, [r6, #8]
   21438:	mvn	r1, #0
   2143c:	str	r1, [sp, #32]
   21440:	mvn	r1, #0
   21444:	ldr	r5, [r3]
   21448:	add	r4, r2, r5, lsl #3
   2144c:	ldrb	r4, [r4, #4]
   21450:	cmp	r4, #9
   21454:	beq	21470 <__assert_fail@plt+0xfd00>
   21458:	cmp	r4, #8
   2145c:	bne	21484 <__assert_fail@plt+0xfd14>
   21460:	ldr	r4, [r2, r5, lsl #3]
   21464:	cmp	sl, r4
   21468:	moveq	r1, r5
   2146c:	b	21484 <__assert_fail@plt+0xfd14>
   21470:	ldr	r4, [r2, r5, lsl #3]
   21474:	cmp	sl, r4
   21478:	ldr	r4, [sp, #32]
   2147c:	moveq	r4, r5
   21480:	str	r4, [sp, #32]
   21484:	add	r3, r3, #4
   21488:	subs	r0, r0, #1
   2148c:	bne	21444 <__assert_fail@plt+0xfcd4>
   21490:	cmp	r1, #0
   21494:	bmi	214bc <__assert_fail@plt+0xfd4c>
   21498:	ldr	r3, [sp, #36]	; 0x24
   2149c:	mov	r0, r7
   214a0:	mov	r2, r6
   214a4:	bl	21b50 <__assert_fail@plt+0x103e0>
   214a8:	ldr	r6, [sp, #20]
   214ac:	ldr	r7, [sp, #28]
   214b0:	ldr	ip, [sp, #48]	; 0x30
   214b4:	cmp	r0, #0
   214b8:	bne	21940 <__assert_fail@plt+0x101d0>
   214bc:	ldr	sl, [sp, #32]
   214c0:	ldr	r4, [sp, #40]	; 0x28
   214c4:	cmp	sl, #0
   214c8:	bmi	215e0 <__assert_fail@plt+0xfe70>
   214cc:	ldr	r0, [r6, #4]
   214d0:	cmp	r0, #1
   214d4:	str	r0, [sp, #16]
   214d8:	blt	215e0 <__assert_fail@plt+0xfe70>
   214dc:	mov	r5, #0
   214e0:	ldr	r0, [r6, #8]
   214e4:	mov	r1, sl
   214e8:	ldr	r6, [r0, r5, lsl #2]
   214ec:	ldr	r0, [r7, #28]
   214f0:	add	r9, r6, r6, lsl #1
   214f4:	add	r0, r0, r9, lsl #2
   214f8:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   214fc:	cmp	r0, #0
   21500:	bne	2151c <__assert_fail@plt+0xfdac>
   21504:	ldr	r0, [r7, #24]
   21508:	mov	r1, sl
   2150c:	add	r0, r0, r9, lsl #2
   21510:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21514:	cmp	r0, #0
   21518:	beq	2153c <__assert_fail@plt+0xfdcc>
   2151c:	ldr	r6, [sp, #20]
   21520:	ldr	r0, [sp, #16]
   21524:	ldr	r4, [sp, #40]	; 0x28
   21528:	ldr	ip, [sp, #48]	; 0x30
   2152c:	add	r5, r5, #1
   21530:	cmp	r5, r0
   21534:	blt	214e0 <__assert_fail@plt+0xfd70>
   21538:	b	215e0 <__assert_fail@plt+0xfe70>
   2153c:	mov	r1, r6
   21540:	ldr	r6, [sp, #20]
   21544:	ldr	r3, [sp, #36]	; 0x24
   21548:	mov	r0, r7
   2154c:	mov	r2, r6
   21550:	bl	21b50 <__assert_fail@plt+0x103e0>
   21554:	cmp	r0, #0
   21558:	bne	21940 <__assert_fail@plt+0x101d0>
   2155c:	ldr	r0, [r6, #4]
   21560:	ldr	r7, [sp, #28]
   21564:	sub	r5, r5, #1
   21568:	str	r0, [sp, #16]
   2156c:	b	21520 <__assert_fail@plt+0xfdb0>
   21570:	cmp	r0, #1
   21574:	blt	215e0 <__assert_fail@plt+0xfe70>
   21578:	mov	r5, #0
   2157c:	ldr	r1, [r6, #8]
   21580:	ldr	r1, [r1, r5, lsl #2]
   21584:	add	r3, r2, r1, lsl #3
   21588:	ldrb	r3, [r3, #4]
   2158c:	orr	r3, r3, #1
   21590:	cmp	r3, #9
   21594:	bne	215cc <__assert_fail@plt+0xfe5c>
   21598:	ldr	r2, [r2, r1, lsl #3]
   2159c:	cmp	sl, r2
   215a0:	bne	215cc <__assert_fail@plt+0xfe5c>
   215a4:	ldr	r3, [sp, #36]	; 0x24
   215a8:	mov	r0, r7
   215ac:	mov	r2, r6
   215b0:	bl	21b50 <__assert_fail@plt+0x103e0>
   215b4:	cmp	r0, #0
   215b8:	bne	21940 <__assert_fail@plt+0x101d0>
   215bc:	ldr	r0, [r6, #4]
   215c0:	ldr	r4, [sp, #40]	; 0x28
   215c4:	ldr	ip, [sp, #48]	; 0x30
   215c8:	ldr	r7, [sp, #28]
   215cc:	add	r5, r5, #1
   215d0:	cmp	r5, r0
   215d4:	bge	215e0 <__assert_fail@plt+0xfe70>
   215d8:	ldr	r2, [r7]
   215dc:	b	2157c <__assert_fail@plt+0xfe0c>
   215e0:	ldr	r0, [ip, #20]
   215e4:	add	r8, r8, #1
   215e8:	cmp	r8, r0
   215ec:	blt	213e0 <__assert_fail@plt+0xfc70>
   215f0:	ldr	r8, [sp, #12]
   215f4:	mov	r0, #0
   215f8:	str	r0, [sp, #52]	; 0x34
   215fc:	add	r0, sp, #52	; 0x34
   21600:	mov	r1, r7
   21604:	mov	r2, r6
   21608:	bl	1fdfc <__assert_fail@plt+0xe68c>
   2160c:	ldr	r1, [sp, #48]	; 0x30
   21610:	ldr	r1, [r1]
   21614:	str	r0, [r1, r4, lsl #2]
   21618:	ldr	r9, [sp, #52]	; 0x34
   2161c:	cmp	r9, #0
   21620:	beq	21630 <__assert_fail@plt+0xfec0>
   21624:	b	21934 <__assert_fail@plt+0x101c4>
   21628:	ldr	r1, [r1]
   2162c:	str	r3, [r1, r4, lsl #2]
   21630:	cmp	r8, #0
   21634:	beq	21930 <__assert_fail@plt+0x101c0>
   21638:	ldr	r0, [sp, #44]	; 0x2c
   2163c:	ldr	r1, [sp, #40]	; 0x28
   21640:	ldr	r0, [r0, #100]	; 0x64
   21644:	ldr	r0, [r0, r1, lsl #2]
   21648:	ldrb	r0, [r0, #52]	; 0x34
   2164c:	tst	r0, #64	; 0x40
   21650:	beq	21930 <__assert_fail@plt+0x101c0>
   21654:	ldr	r0, [sp, #44]	; 0x2c
   21658:	ldr	r9, [sp, #40]	; 0x28
   2165c:	ldr	r8, [r0, #84]	; 0x54
   21660:	mov	r1, r9
   21664:	bl	1f0e8 <__assert_fail@plt+0xd978>
   21668:	cmn	r0, #1
   2166c:	str	r0, [sp, #16]
   21670:	beq	21920 <__assert_fail@plt+0x101b0>
   21674:	ldr	r0, [sp, #36]	; 0x24
   21678:	mov	r6, #0
   2167c:	str	r6, [sp, #56]	; 0x38
   21680:	ldr	r0, [r0, #4]
   21684:	cmp	r0, #0
   21688:	ble	2192c <__assert_fail@plt+0x101bc>
   2168c:	ldr	r3, [sp, #48]	; 0x30
   21690:	add	r1, r9, #1
   21694:	mov	r7, #0
   21698:	str	r1, [sp, #8]
   2169c:	add	r1, sp, #56	; 0x38
   216a0:	add	r1, r1, #16
   216a4:	str	r1, [sp, #24]
   216a8:	add	r1, r3, #16
   216ac:	str	r1, [sp, #28]
   216b0:	ldr	r1, [sp, #16]
   216b4:	add	r1, r1, r1, lsl #1
   216b8:	str	r1, [sp, #12]
   216bc:	ldr	r1, [sp, #36]	; 0x24
   216c0:	ldr	r2, [r3, #8]
   216c4:	ldr	r1, [r1, #8]
   216c8:	ldr	sl, [r1, r7, lsl #2]
   216cc:	ldr	r1, [r8]
   216d0:	add	r1, r1, sl, lsl #3
   216d4:	cmp	sl, r2
   216d8:	ldrb	r1, [r1, #4]
   216dc:	bne	216f8 <__assert_fail@plt+0xff88>
   216e0:	cmp	r1, #4
   216e4:	bne	218f0 <__assert_fail@plt+0x10180>
   216e8:	ldr	r1, [r3, #12]
   216ec:	cmp	r1, r9
   216f0:	bne	21700 <__assert_fail@plt+0xff90>
   216f4:	b	218f0 <__assert_fail@plt+0x10180>
   216f8:	cmp	r1, #4
   216fc:	bne	218f0 <__assert_fail@plt+0x10180>
   21700:	ldr	r0, [sp, #44]	; 0x2c
   21704:	ldr	r1, [sp, #12]
   21708:	str	r7, [sp, #20]
   2170c:	ldr	r7, [sp, #16]
   21710:	str	r6, [sp, #32]
   21714:	ldr	r0, [r0, #116]	; 0x74
   21718:	add	r5, r0, r1, lsl #3
   2171c:	ldr	r0, [r5]
   21720:	cmp	r0, sl
   21724:	bne	217b4 <__assert_fail@plt+0x10044>
   21728:	ldr	r0, [r5, #8]
   2172c:	ldr	r1, [r5, #12]
   21730:	subs	r0, r1, r0
   21734:	add	r6, r0, r9
   21738:	beq	21748 <__assert_fail@plt+0xffd8>
   2173c:	ldr	r0, [r8, #12]
   21740:	add	r0, r0, sl, lsl #2
   21744:	b	21758 <__assert_fail@plt+0xffe8>
   21748:	ldr	r0, [r8, #20]
   2174c:	add	r1, sl, sl, lsl #1
   21750:	add	r0, r0, r1, lsl #2
   21754:	ldr	r0, [r0, #8]
   21758:	ldr	r1, [r3, #12]
   2175c:	cmp	r6, r1
   21760:	bgt	217b4 <__assert_fail@plt+0x10044>
   21764:	ldr	r1, [r3]
   21768:	ldr	r1, [r1, r6, lsl #2]
   2176c:	cmp	r1, #0
   21770:	beq	217b4 <__assert_fail@plt+0x10044>
   21774:	ldr	r4, [r0]
   21778:	add	r0, r1, #4
   2177c:	mov	r1, r4
   21780:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21784:	cmp	r0, #0
   21788:	beq	217ac <__assert_fail@plt+0x1003c>
   2178c:	ldr	r0, [sp, #44]	; 0x2c
   21790:	ldr	r1, [sp, #28]
   21794:	mov	r2, sl
   21798:	mov	r3, r9
   2179c:	stm	sp, {r4, r6}
   217a0:	bl	21d54 <__assert_fail@plt+0x105e4>
   217a4:	cmp	r0, #0
   217a8:	beq	217d0 <__assert_fail@plt+0x10060>
   217ac:	mov	r0, r5
   217b0:	b	218b4 <__assert_fail@plt+0x10144>
   217b4:	mov	r0, r5
   217b8:	add	r5, r0, #24
   217bc:	ldrb	r0, [r0, #20]
   217c0:	add	r7, r7, #1
   217c4:	cmp	r0, #0
   217c8:	bne	2171c <__assert_fail@plt+0xffac>
   217cc:	b	218e0 <__assert_fail@plt+0x10170>
   217d0:	ldr	r0, [sp, #32]
   217d4:	cmp	r0, #0
   217d8:	bne	2180c <__assert_fail@plt+0x1009c>
   217dc:	ldr	r0, [sp, #48]	; 0x30
   217e0:	mov	r1, #12
   217e4:	vld1.32	{d16-d17}, [r0], r1
   217e8:	vld1.32	{d18-d19}, [r0]
   217ec:	add	r0, sp, #56	; 0x38
   217f0:	vst1.64	{d16-d17}, [r0], r1
   217f4:	ldr	r1, [sp, #28]
   217f8:	vst1.32	{d18-d19}, [r0]
   217fc:	ldr	r0, [sp, #24]
   21800:	bl	1d678 <__assert_fail@plt+0xbf08>
   21804:	cmp	r0, #0
   21808:	bne	2194c <__assert_fail@plt+0x101dc>
   2180c:	ldr	r4, [sp, #40]	; 0x28
   21810:	ldr	r0, [sp, #24]
   21814:	mov	r1, r7
   21818:	str	r4, [sp, #68]	; 0x44
   2181c:	str	sl, [sp, #64]	; 0x40
   21820:	bl	1d4dc <__assert_fail@plt+0xbd6c>
   21824:	cmp	r0, #0
   21828:	beq	2195c <__assert_fail@plt+0x101ec>
   2182c:	ldr	r5, [sp, #56]	; 0x38
   21830:	ldr	r0, [sp, #44]	; 0x2c
   21834:	add	r1, sp, #56	; 0x38
   21838:	ldr	r4, [r5, r4, lsl #2]
   2183c:	bl	20f1c <__assert_fail@plt+0xf7ac>
   21840:	cmp	r0, #0
   21844:	bne	2194c <__assert_fail@plt+0x101dc>
   21848:	ldr	r0, [sp, #48]	; 0x30
   2184c:	ldr	r1, [r0, #4]
   21850:	cmp	r1, #0
   21854:	beq	21870 <__assert_fail@plt+0x10100>
   21858:	ldr	r3, [sp, #8]
   2185c:	mov	r0, r8
   21860:	mov	r2, r5
   21864:	bl	211b4 <__assert_fail@plt+0xfa44>
   21868:	cmp	r0, #0
   2186c:	bne	2194c <__assert_fail@plt+0x101dc>
   21870:	ldr	r9, [sp, #40]	; 0x28
   21874:	ldr	r0, [sp, #24]
   21878:	mov	r1, r7
   2187c:	str	r5, [sp, #32]
   21880:	str	r4, [r5, r9, lsl #2]
   21884:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21888:	subs	r1, r0, #1
   2188c:	blt	218a4 <__assert_fail@plt+0x10134>
   21890:	ldr	r2, [sp, #76]	; 0x4c
   21894:	cmp	r2, r0
   21898:	subge	r2, r2, #1
   2189c:	strge	r2, [sp, #76]	; 0x4c
   218a0:	bgt	218bc <__assert_fail@plt+0x1014c>
   218a4:	ldr	r0, [sp, #44]	; 0x2c
   218a8:	add	r1, r7, r7, lsl #1
   218ac:	ldr	r0, [r0, #116]	; 0x74
   218b0:	add	r0, r0, r1, lsl #3
   218b4:	ldr	r3, [sp, #48]	; 0x30
   218b8:	b	217b8 <__assert_fail@plt+0x10048>
   218bc:	ldr	r3, [sp, #80]	; 0x50
   218c0:	add	r0, r3, r0, lsl #2
   218c4:	ldr	r3, [r0]
   218c8:	add	r1, r1, #1
   218cc:	cmp	r1, r2
   218d0:	str	r3, [r0, #-4]
   218d4:	add	r0, r0, #4
   218d8:	blt	218c4 <__assert_fail@plt+0x10154>
   218dc:	b	218a4 <__assert_fail@plt+0x10134>
   218e0:	ldr	r0, [sp, #36]	; 0x24
   218e4:	ldr	r7, [sp, #20]
   218e8:	ldr	r6, [sp, #32]
   218ec:	ldr	r0, [r0, #4]
   218f0:	add	r7, r7, #1
   218f4:	cmp	r7, r0
   218f8:	blt	216bc <__assert_fail@plt+0xff4c>
   218fc:	mov	r9, #0
   21900:	cmp	r6, #0
   21904:	beq	21910 <__assert_fail@plt+0x101a0>
   21908:	ldr	r0, [sp, #80]	; 0x50
   2190c:	bl	13bd0 <__assert_fail@plt+0x2460>
   21910:	cmp	r9, #0
   21914:	str	r9, [sp, #52]	; 0x34
   21918:	moveq	r9, #0
   2191c:	b	21934 <__assert_fail@plt+0x101c4>
   21920:	mov	r0, #0
   21924:	str	r0, [sp, #52]	; 0x34
   21928:	b	21930 <__assert_fail@plt+0x101c0>
   2192c:	str	r6, [sp, #52]	; 0x34
   21930:	mov	r9, #0
   21934:	mov	r0, r9
   21938:	sub	sp, fp, #28
   2193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21940:	mov	r9, r0
   21944:	str	r9, [sp, #52]	; 0x34
   21948:	b	21934 <__assert_fail@plt+0x101c4>
   2194c:	mov	r9, r0
   21950:	b	21960 <__assert_fail@plt+0x101f0>
   21954:	str	r0, [sp, #56]	; 0x38
   21958:	b	21944 <__assert_fail@plt+0x101d4>
   2195c:	mov	r9, #12
   21960:	ldr	r6, [sp, #56]	; 0x38
   21964:	b	21900 <__assert_fail@plt+0x10190>
   21968:	mov	r9, r0
   2196c:	b	21934 <__assert_fail@plt+0x101c4>
   21970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21974:	add	fp, sp, #28
   21978:	sub	sp, sp, #4
   2197c:	mov	r9, r0
   21980:	ldr	r0, [r1, #4]
   21984:	mov	r8, #0
   21988:	cmp	r0, #0
   2198c:	beq	21b3c <__assert_fail@plt+0x103cc>
   21990:	mov	r5, r2
   21994:	ldr	r2, [r2, #4]
   21998:	cmp	r2, #0
   2199c:	beq	21b3c <__assert_fail@plt+0x103cc>
   219a0:	mov	sl, r1
   219a4:	ldr	r1, [r9, #4]
   219a8:	ldr	r7, [r9]
   219ac:	add	r3, r2, r0
   219b0:	add	r6, r1, r3
   219b4:	cmp	r6, r7
   219b8:	ble	219e8 <__assert_fail@plt+0x10278>
   219bc:	ldr	r0, [r9, #8]
   219c0:	add	r4, r7, r3
   219c4:	lsl	r1, r4, #2
   219c8:	bl	239c4 <__assert_fail@plt+0x12254>
   219cc:	cmp	r0, #0
   219d0:	beq	21b48 <__assert_fail@plt+0x103d8>
   219d4:	str	r4, [r9]
   219d8:	str	r0, [r9, #8]
   219dc:	ldr	r1, [r9, #4]
   219e0:	ldr	r2, [r5, #4]
   219e4:	ldr	r0, [sl, #4]
   219e8:	ldr	lr, [r5, #8]
   219ec:	ldr	r4, [sl, #8]
   219f0:	add	r3, r0, r1
   219f4:	sub	r7, r1, #1
   219f8:	add	ip, r3, r2
   219fc:	sub	r0, r0, #1
   21a00:	sub	r3, r2, #1
   21a04:	ldr	r1, [lr, r3, lsl #2]
   21a08:	ldr	r6, [r4, r0, lsl #2]
   21a0c:	cmp	r6, r1
   21a10:	beq	21a3c <__assert_fail@plt+0x102cc>
   21a14:	blt	21a2c <__assert_fail@plt+0x102bc>
   21a18:	sub	r6, r0, #1
   21a1c:	cmp	r0, #0
   21a20:	mov	r0, r6
   21a24:	bgt	21a08 <__assert_fail@plt+0x10298>
   21a28:	b	21aa0 <__assert_fail@plt+0x10330>
   21a2c:	cmp	r2, #2
   21a30:	mov	r2, r3
   21a34:	bge	21a00 <__assert_fail@plt+0x10290>
   21a38:	b	21aa0 <__assert_fail@plt+0x10330>
   21a3c:	cmp	r7, #0
   21a40:	bmi	21a7c <__assert_fail@plt+0x1030c>
   21a44:	ldr	r8, [r9, #8]
   21a48:	mov	r1, r7
   21a4c:	ldr	r7, [r8, r1, lsl #2]
   21a50:	cmp	r7, r6
   21a54:	ble	21a6c <__assert_fail@plt+0x102fc>
   21a58:	sub	r7, r1, #1
   21a5c:	cmp	r1, #0
   21a60:	mov	r1, r7
   21a64:	bgt	21a4c <__assert_fail@plt+0x102dc>
   21a68:	b	21a7c <__assert_fail@plt+0x1030c>
   21a6c:	mov	r7, r1
   21a70:	bne	21a7c <__assert_fail@plt+0x1030c>
   21a74:	mov	r7, r1
   21a78:	b	21a88 <__assert_fail@plt+0x10318>
   21a7c:	ldr	r1, [r9, #8]
   21a80:	sub	ip, ip, #1
   21a84:	str	r6, [r1, ip, lsl #2]
   21a88:	cmp	r0, #1
   21a8c:	mov	r8, #0
   21a90:	blt	21aa0 <__assert_fail@plt+0x10330>
   21a94:	cmp	r2, #2
   21a98:	mov	r2, r3
   21a9c:	bge	219fc <__assert_fail@plt+0x1028c>
   21aa0:	ldr	r2, [r9, #4]
   21aa4:	ldr	lr, [sl, #4]
   21aa8:	ldr	r4, [r5, #4]
   21aac:	ldr	r0, [r9, #8]
   21ab0:	subs	r1, r2, #1
   21ab4:	add	r3, r1, lr
   21ab8:	add	r3, r3, r4
   21abc:	sub	r7, r3, ip
   21ac0:	add	r6, r7, #1
   21ac4:	add	r5, r6, r2
   21ac8:	str	r5, [r9, #4]
   21acc:	blt	21b2c <__assert_fail@plt+0x103bc>
   21ad0:	cmp	r7, #0
   21ad4:	bmi	21b2c <__assert_fail@plt+0x103bc>
   21ad8:	add	r2, r2, r4
   21adc:	add	r2, r2, lr
   21ae0:	sub	r2, r2, ip
   21ae4:	add	r7, r0, r2, lsl #2
   21ae8:	ldr	r2, [r0, r1, lsl #2]
   21aec:	ldr	r5, [r0, r3, lsl #2]
   21af0:	cmp	r5, r2
   21af4:	bgt	21b10 <__assert_fail@plt+0x103a0>
   21af8:	str	r2, [r7, r1, lsl #2]
   21afc:	sub	r2, r1, #1
   21b00:	cmp	r1, #0
   21b04:	mov	r1, r2
   21b08:	bgt	21ae8 <__assert_fail@plt+0x10378>
   21b0c:	b	21b2c <__assert_fail@plt+0x103bc>
   21b10:	str	r5, [r7, r1, lsl #2]
   21b14:	sub	r7, r7, #4
   21b18:	subs	r6, r6, #1
   21b1c:	sub	r3, r3, #1
   21b20:	mov	r2, #0
   21b24:	bne	21ae8 <__assert_fail@plt+0x10378>
   21b28:	b	21b30 <__assert_fail@plt+0x103c0>
   21b2c:	mov	r2, r6
   21b30:	add	r1, r0, ip, lsl #2
   21b34:	lsl	r2, r2, #2
   21b38:	bl	11488 <memcpy@plt>
   21b3c:	mov	r0, r8
   21b40:	sub	sp, fp, #28
   21b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b48:	mov	r8, #12
   21b4c:	b	21b3c <__assert_fail@plt+0x103cc>
   21b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b54:	add	fp, sp, #28
   21b58:	sub	sp, sp, #36	; 0x24
   21b5c:	mov	r4, r2
   21b60:	mov	r2, r0
   21b64:	ldr	r0, [r0, #28]
   21b68:	str	r1, [sp, #20]
   21b6c:	add	r1, r1, r1, lsl #1
   21b70:	mov	r5, #0
   21b74:	str	r3, [sp, #4]
   21b78:	str	r5, [sp, #28]
   21b7c:	str	r5, [sp, #24]
   21b80:	str	r5, [sp, #32]
   21b84:	add	r1, r0, r1, lsl #2
   21b88:	mov	r0, r1
   21b8c:	ldr	r7, [r0, #4]!
   21b90:	cmp	r7, #1
   21b94:	blt	21d38 <__assert_fail@plt+0x105c8>
   21b98:	add	r8, r1, #8
   21b9c:	mov	sl, #0
   21ba0:	str	r0, [sp, #8]
   21ba4:	str	r1, [sp, #16]
   21ba8:	ldr	r0, [r8]
   21bac:	ldr	r1, [sp, #20]
   21bb0:	ldr	r0, [r0, sl, lsl #2]
   21bb4:	cmp	r0, r1
   21bb8:	beq	21c90 <__assert_fail@plt+0x10520>
   21bbc:	ldr	r1, [r2]
   21bc0:	add	r1, r1, r0, lsl #3
   21bc4:	ldrb	r1, [r1, #4]
   21bc8:	tst	r1, #8
   21bcc:	beq	21c90 <__assert_fail@plt+0x10520>
   21bd0:	ldr	r1, [r2, #20]
   21bd4:	add	r0, r0, r0, lsl #1
   21bd8:	mvn	r5, #0
   21bdc:	mov	r6, r2
   21be0:	str	r0, [sp, #12]
   21be4:	add	r0, r1, r0, lsl #2
   21be8:	ldr	r1, [r0, #4]
   21bec:	ldr	r0, [r0, #8]
   21bf0:	cmp	r1, #2
   21bf4:	ldr	r9, [r0]
   21bf8:	ldrge	r5, [r0, #4]
   21bfc:	ldr	r0, [sp, #16]
   21c00:	mov	r1, r9
   21c04:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21c08:	cmp	r0, #0
   21c0c:	mov	r2, r6
   21c10:	beq	21c4c <__assert_fail@plt+0x104dc>
   21c14:	cmp	r5, #1
   21c18:	blt	21c90 <__assert_fail@plt+0x10520>
   21c1c:	ldr	r0, [sp, #16]
   21c20:	mov	r1, r5
   21c24:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21c28:	cmp	r0, #0
   21c2c:	bne	21c8c <__assert_fail@plt+0x1051c>
   21c30:	mov	r0, r4
   21c34:	mov	r1, r5
   21c38:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21c3c:	cmp	r0, #0
   21c40:	mov	r2, r6
   21c44:	bne	21c64 <__assert_fail@plt+0x104f4>
   21c48:	b	21c90 <__assert_fail@plt+0x10520>
   21c4c:	mov	r0, r4
   21c50:	mov	r1, r9
   21c54:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21c58:	mov	r2, r6
   21c5c:	cmp	r0, #0
   21c60:	beq	21c14 <__assert_fail@plt+0x104a4>
   21c64:	ldr	r0, [r2, #28]
   21c68:	ldr	r1, [sp, #12]
   21c6c:	add	r2, r0, r1, lsl #2
   21c70:	ldr	r1, [sp, #4]
   21c74:	add	r0, sp, #24
   21c78:	bl	21970 <__assert_fail@plt+0x10200>
   21c7c:	cmp	r0, #0
   21c80:	bne	21d4c <__assert_fail@plt+0x105dc>
   21c84:	ldr	r0, [sp, #8]
   21c88:	ldr	r7, [r0]
   21c8c:	mov	r2, r6
   21c90:	add	sl, sl, #1
   21c94:	cmp	sl, r7
   21c98:	blt	21ba8 <__assert_fail@plt+0x10438>
   21c9c:	cmp	r7, #1
   21ca0:	blt	21d34 <__assert_fail@plt+0x105c4>
   21ca4:	ldr	r0, [sp, #16]
   21ca8:	ldr	r7, [sp, #8]
   21cac:	mov	r5, #0
   21cb0:	add	r8, sp, #24
   21cb4:	ldr	r9, [r0, #8]
   21cb8:	ldr	r6, [r9, r5, lsl #2]
   21cbc:	mov	r0, r8
   21cc0:	mov	r1, r6
   21cc4:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21cc8:	cmp	r0, #0
   21ccc:	bne	21cf8 <__assert_fail@plt+0x10588>
   21cd0:	mov	r0, r4
   21cd4:	mov	r1, r6
   21cd8:	bl	1d6f4 <__assert_fail@plt+0xbf84>
   21cdc:	subs	r1, r0, #1
   21ce0:	blt	21cf8 <__assert_fail@plt+0x10588>
   21ce4:	ldr	r2, [r4, #4]
   21ce8:	cmp	r2, r0
   21cec:	subge	r2, r2, #1
   21cf0:	strge	r2, [r4, #4]
   21cf4:	bgt	21d0c <__assert_fail@plt+0x1059c>
   21cf8:	ldr	r0, [r7]
   21cfc:	add	r5, r5, #1
   21d00:	cmp	r5, r0
   21d04:	blt	21cb8 <__assert_fail@plt+0x10548>
   21d08:	b	21d34 <__assert_fail@plt+0x105c4>
   21d0c:	ldr	r2, [r4, #8]
   21d10:	add	r0, r2, r0, lsl #2
   21d14:	ldr	r2, [r0]
   21d18:	add	r1, r1, #1
   21d1c:	str	r2, [r0, #-4]
   21d20:	add	r0, r0, #4
   21d24:	ldr	r2, [r4, #4]
   21d28:	cmp	r1, r2
   21d2c:	blt	21d14 <__assert_fail@plt+0x105a4>
   21d30:	b	21cf8 <__assert_fail@plt+0x10588>
   21d34:	mov	r5, #0
   21d38:	ldr	r0, [sp, #32]
   21d3c:	bl	13bd0 <__assert_fail@plt+0x2460>
   21d40:	mov	r0, r5
   21d44:	sub	sp, fp, #28
   21d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d4c:	mov	r5, r0
   21d50:	b	21d38 <__assert_fail@plt+0x105c8>
   21d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d58:	add	fp, sp, #28
   21d5c:	sub	sp, sp, #20
   21d60:	mov	r6, r1
   21d64:	mov	r1, r3
   21d68:	str	r2, [sp, #12]
   21d6c:	mov	r7, r0
   21d70:	str	r3, [sp, #16]
   21d74:	bl	1f0e8 <__assert_fail@plt+0xd978>
   21d78:	ldr	r1, [fp, #12]
   21d7c:	str	r0, [sp, #8]
   21d80:	mov	r0, r7
   21d84:	bl	1f0e8 <__assert_fail@plt+0xd978>
   21d88:	mov	r4, r0
   21d8c:	ldr	r0, [r6, #4]
   21d90:	cmp	r0, #1
   21d94:	blt	21e18 <__assert_fail@plt+0x106a8>
   21d98:	ldr	sl, [r7, #84]	; 0x54
   21d9c:	mov	r5, #0
   21da0:	ldr	r0, [r6, #8]
   21da4:	ldr	r2, [r7, #116]	; 0x74
   21da8:	ldr	r3, [sp, #12]
   21dac:	ldr	r1, [r0, r5, lsl #2]
   21db0:	add	r0, r1, r1, lsl #1
   21db4:	ldr	r0, [r2, r0, lsl #3]
   21db8:	ldr	r2, [sl]
   21dbc:	ldr	r9, [r2, r0, lsl #3]
   21dc0:	ldr	r0, [sp, #16]
   21dc4:	str	r0, [sp]
   21dc8:	ldr	r0, [sp, #8]
   21dcc:	mov	r2, r9
   21dd0:	str	r0, [sp, #4]
   21dd4:	mov	r0, r7
   21dd8:	bl	21e2c <__assert_fail@plt+0x106bc>
   21ddc:	mov	r8, r0
   21de0:	ldr	r0, [r6, #8]
   21de4:	ldr	r3, [fp, #8]
   21de8:	mov	r2, r9
   21dec:	ldr	r1, [r0, r5, lsl #2]
   21df0:	ldr	r0, [fp, #12]
   21df4:	stm	sp, {r0, r4}
   21df8:	mov	r0, r7
   21dfc:	bl	21e2c <__assert_fail@plt+0x106bc>
   21e00:	cmp	r0, r8
   21e04:	bne	21e20 <__assert_fail@plt+0x106b0>
   21e08:	ldr	r0, [r6, #4]
   21e0c:	add	r5, r5, #1
   21e10:	cmp	r5, r0
   21e14:	blt	21da0 <__assert_fail@plt+0x10630>
   21e18:	mov	r0, #0
   21e1c:	b	21e24 <__assert_fail@plt+0x106b4>
   21e20:	mov	r0, #1
   21e24:	sub	sp, fp, #28
   21e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e2c:	push	{r4, r5, fp, lr}
   21e30:	add	fp, sp, #8
   21e34:	sub	sp, sp, #8
   21e38:	ldr	r4, [r0, #116]	; 0x74
   21e3c:	add	r1, r1, r1, lsl #1
   21e40:	ldr	lr, [fp, #8]
   21e44:	add	r4, r4, r1, lsl #3
   21e48:	mvn	r1, #0
   21e4c:	ldr	ip, [r4, #8]
   21e50:	cmp	ip, lr
   21e54:	bgt	21ea0 <__assert_fail@plt+0x10730>
   21e58:	ldr	r4, [r4, #12]
   21e5c:	mov	r1, #1
   21e60:	cmp	r4, lr
   21e64:	blt	21ea0 <__assert_fail@plt+0x10730>
   21e68:	sub	r1, r4, lr
   21e6c:	mov	r5, #1
   21e70:	cmp	ip, lr
   21e74:	clz	r1, r1
   21e78:	lsr	r4, r1, #5
   21e7c:	lsl	r1, r4, #1
   21e80:	orreq	r1, r5, r4, lsl #1
   21e84:	cmp	r1, #0
   21e88:	beq	21e9c <__assert_fail@plt+0x1072c>
   21e8c:	ldr	r5, [fp, #12]
   21e90:	str	r5, [sp]
   21e94:	bl	21eac <__assert_fail@plt+0x1073c>
   21e98:	b	21ea4 <__assert_fail@plt+0x10734>
   21e9c:	mov	r1, #0
   21ea0:	mov	r0, r1
   21ea4:	sub	sp, fp, #8
   21ea8:	pop	{r4, r5, fp, pc}
   21eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21eb0:	add	fp, sp, #28
   21eb4:	sub	sp, sp, #36	; 0x24
   21eb8:	ldr	r4, [r0, #84]	; 0x54
   21ebc:	mov	r7, r0
   21ec0:	mov	r5, r1
   21ec4:	add	r1, r3, r3, lsl #1
   21ec8:	str	r3, [sp, #32]
   21ecc:	ldr	r0, [r4, #24]
   21ed0:	add	r1, r0, r1, lsl #2
   21ed4:	mov	lr, r1
   21ed8:	ldr	r0, [lr, #4]!
   21edc:	cmp	r0, #1
   21ee0:	blt	2207c <__assert_fail@plt+0x1090c>
   21ee4:	mov	ip, #1
   21ee8:	mov	r6, r2
   21eec:	and	r3, r5, #2
   21ef0:	mov	sl, #0
   21ef4:	mvn	r2, ip, lsl r2
   21ef8:	cmp	r6, #31
   21efc:	str	r3, [sp, #16]
   21f00:	str	r2, [sp, #24]
   21f04:	lsl	r2, ip, r6
   21f08:	and	ip, r5, #1
   21f0c:	str	r2, [sp, #28]
   21f10:	mov	r2, #0
   21f14:	movwgt	r2, #1
   21f18:	str	ip, [sp, #12]
   21f1c:	orr	r2, r2, r3, lsr #1
   21f20:	add	r3, r1, #8
   21f24:	stmib	sp, {r3, lr}
   21f28:	str	r2, [sp, #20]
   21f2c:	ldr	r1, [r3]
   21f30:	ldr	r9, [r1, sl, lsl #2]
   21f34:	ldr	r1, [r4]
   21f38:	add	r2, r1, r9, lsl #3
   21f3c:	ldrb	r2, [r2, #4]
   21f40:	cmp	r2, #9
   21f44:	beq	22040 <__assert_fail@plt+0x108d0>
   21f48:	cmp	r2, #8
   21f4c:	beq	2205c <__assert_fail@plt+0x108ec>
   21f50:	cmp	r2, #4
   21f54:	bne	22070 <__assert_fail@plt+0x10900>
   21f58:	ldr	r1, [fp, #8]
   21f5c:	cmn	r1, #1
   21f60:	beq	22070 <__assert_fail@plt+0x10900>
   21f64:	ldr	r1, [fp, #8]
   21f68:	ldr	r0, [r7, #116]	; 0x74
   21f6c:	add	r1, r1, r1, lsl #1
   21f70:	add	r0, r0, r1, lsl #3
   21f74:	add	r8, r0, #16
   21f78:	ldr	r0, [r8, #-16]
   21f7c:	cmp	r0, r9
   21f80:	bne	2201c <__assert_fail@plt+0x108ac>
   21f84:	cmp	r6, #31
   21f88:	bgt	21f9c <__assert_fail@plt+0x1082c>
   21f8c:	ldr	r0, [r8]
   21f90:	ldr	r1, [sp, #28]
   21f94:	tst	r0, r1
   21f98:	beq	2201c <__assert_fail@plt+0x108ac>
   21f9c:	ldr	r0, [r4, #20]
   21fa0:	add	r1, r9, r9, lsl #1
   21fa4:	add	r0, r0, r1, lsl #2
   21fa8:	ldr	r0, [r0, #8]
   21fac:	ldr	r3, [r0]
   21fb0:	ldr	r0, [sp, #32]
   21fb4:	cmp	r3, r0
   21fb8:	beq	22084 <__assert_fail@plt+0x10914>
   21fbc:	ldr	r0, [fp, #8]
   21fc0:	mov	r1, r5
   21fc4:	mov	r2, r6
   21fc8:	str	r0, [sp]
   21fcc:	mov	r0, r7
   21fd0:	bl	21eac <__assert_fail@plt+0x1073c>
   21fd4:	cmp	r0, #0
   21fd8:	beq	21ff0 <__assert_fail@plt+0x10880>
   21fdc:	cmn	r0, #1
   21fe0:	beq	2209c <__assert_fail@plt+0x1092c>
   21fe4:	cmp	r6, #31
   21fe8:	ble	2200c <__assert_fail@plt+0x1089c>
   21fec:	b	2201c <__assert_fail@plt+0x108ac>
   21ff0:	ldr	r0, [sp, #20]
   21ff4:	cmp	r0, #0
   21ff8:	beq	2200c <__assert_fail@plt+0x1089c>
   21ffc:	ldr	r0, [sp, #16]
   22000:	cmp	r0, #0
   22004:	beq	2201c <__assert_fail@plt+0x108ac>
   22008:	b	22090 <__assert_fail@plt+0x10920>
   2200c:	ldr	r0, [r8]
   22010:	ldr	r1, [sp, #24]
   22014:	and	r0, r0, r1
   22018:	str	r0, [r8]
   2201c:	ldrb	r0, [r8, #4]
   22020:	add	r8, r8, #24
   22024:	cmp	r0, #0
   22028:	bne	21f78 <__assert_fail@plt+0x10808>
   2202c:	ldr	lr, [sp, #8]
   22030:	ldr	ip, [sp, #12]
   22034:	ldr	r3, [sp, #4]
   22038:	ldr	r0, [lr]
   2203c:	b	22070 <__assert_fail@plt+0x10900>
   22040:	ldr	r2, [sp, #16]
   22044:	cmp	r2, #0
   22048:	beq	22070 <__assert_fail@plt+0x10900>
   2204c:	ldr	r1, [r1, r9, lsl #3]
   22050:	cmp	r1, r6
   22054:	bne	22070 <__assert_fail@plt+0x10900>
   22058:	b	22090 <__assert_fail@plt+0x10920>
   2205c:	cmp	ip, #0
   22060:	beq	22070 <__assert_fail@plt+0x10900>
   22064:	ldr	r1, [r1, r9, lsl #3]
   22068:	cmp	r1, r6
   2206c:	beq	22098 <__assert_fail@plt+0x10928>
   22070:	add	sl, sl, #1
   22074:	cmp	sl, r0
   22078:	blt	21f2c <__assert_fail@plt+0x107bc>
   2207c:	ubfx	r0, r5, #1, #1
   22080:	b	2209c <__assert_fail@plt+0x1092c>
   22084:	ldr	r0, [sp, #12]
   22088:	rsb	r0, r0, #0
   2208c:	b	2209c <__assert_fail@plt+0x1092c>
   22090:	mov	r0, #0
   22094:	b	2209c <__assert_fail@plt+0x1092c>
   22098:	mvn	r0, #0
   2209c:	sub	sp, fp, #28
   220a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220a4:	cmp	r0, #0
   220a8:	bxeq	lr
   220ac:	push	{r4, r5, r6, sl, fp, lr}
   220b0:	add	fp, sp, #16
   220b4:	ldr	r1, [r0]
   220b8:	mov	r4, r0
   220bc:	ldr	r0, [r0, #8]
   220c0:	cmp	r1, #1
   220c4:	blt	22104 <__assert_fail@plt+0x10994>
   220c8:	mov	r5, #0
   220cc:	mov	r6, #0
   220d0:	add	r0, r0, r5
   220d4:	ldr	r0, [r0, #20]
   220d8:	bl	13bd0 <__assert_fail@plt+0x2460>
   220dc:	ldr	r0, [r4, #8]
   220e0:	add	r0, r0, r5
   220e4:	ldr	r0, [r0, #8]
   220e8:	bl	13bd0 <__assert_fail@plt+0x2460>
   220ec:	ldr	r1, [r4]
   220f0:	ldr	r0, [r4, #8]
   220f4:	add	r6, r6, #1
   220f8:	add	r5, r5, #24
   220fc:	cmp	r6, r1
   22100:	blt	220d0 <__assert_fail@plt+0x10960>
   22104:	pop	{r4, r5, r6, sl, fp, lr}
   22108:	b	13bd0 <__assert_fail@plt+0x2460>
   2210c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22110:	add	fp, sp, #24
   22114:	mov	r4, r0
   22118:	mvn	r0, #0
   2211c:	cmp	r4, #0
   22120:	beq	221c0 <__assert_fail@plt+0x10a50>
   22124:	mov	r5, r2
   22128:	ldr	r2, [r4]
   2212c:	cmp	r2, #0
   22130:	beq	221c0 <__assert_fail@plt+0x10a50>
   22134:	sub	r0, r2, #1
   22138:	ldr	r9, [fp, #12]
   2213c:	ldr	r8, [fp, #8]
   22140:	lsl	r7, r5, #3
   22144:	str	r0, [r4]
   22148:	add	r6, r0, r0, lsl #1
   2214c:	ldr	r2, [r4, #8]
   22150:	ldr	r0, [r2, r6, lsl #3]!
   22154:	str	r0, [r1]
   22158:	mov	r0, r3
   2215c:	ldr	r1, [r2, #8]
   22160:	mov	r2, r7
   22164:	bl	11488 <memcpy@plt>
   22168:	ldr	r0, [r4, #8]
   2216c:	mov	r2, r7
   22170:	add	r0, r0, r6, lsl #3
   22174:	ldr	r0, [r0, #8]
   22178:	add	r1, r0, r5, lsl #3
   2217c:	mov	r0, r8
   22180:	bl	11488 <memcpy@plt>
   22184:	ldr	r0, [r9, #8]
   22188:	bl	13bd0 <__assert_fail@plt+0x2460>
   2218c:	ldr	r0, [r4, #8]
   22190:	add	r0, r0, r6, lsl #3
   22194:	ldr	r0, [r0, #8]
   22198:	bl	13bd0 <__assert_fail@plt+0x2460>
   2219c:	ldr	r0, [r4, #8]
   221a0:	add	r0, r0, r6, lsl #3
   221a4:	vldr	d16, [r0, #12]
   221a8:	ldr	r0, [r0, #20]
   221ac:	str	r0, [r9, #8]
   221b0:	vstr	d16, [r9]
   221b4:	ldr	r0, [r4, #8]
   221b8:	add	r0, r0, r6, lsl #3
   221bc:	ldr	r0, [r0, #4]
   221c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   221c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   221c8:	add	fp, sp, #24
   221cc:	movw	r8, #0
   221d0:	mov	r6, r2
   221d4:	mov	r4, r1
   221d8:	mov	r5, r0
   221dc:	movt	r8, #32752	; 0x7ff0
   221e0:	mov	r0, r5
   221e4:	mov	r1, r4
   221e8:	mov	r2, r6
   221ec:	bl	11428 <read@plt>
   221f0:	mov	r7, r0
   221f4:	cmn	r0, #1
   221f8:	bgt	22220 <__assert_fail@plt+0x10ab0>
   221fc:	bl	1162c <__errno_location@plt>
   22200:	ldr	r0, [r0]
   22204:	cmp	r0, #4
   22208:	beq	221e0 <__assert_fail@plt+0x10a70>
   2220c:	cmp	r6, r8
   22210:	bls	22220 <__assert_fail@plt+0x10ab0>
   22214:	cmp	r0, #22
   22218:	mov	r6, r8
   2221c:	beq	221e0 <__assert_fail@plt+0x10a70>
   22220:	mov	r0, r7
   22224:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22228:	mov	r1, #0
   2222c:	mov	r2, #3
   22230:	b	23b50 <__assert_fail@plt+0x123e0>
   22234:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22238:	add	fp, sp, #24
   2223c:	sub	sp, sp, #32
   22240:	ldr	r6, [fp, #12]
   22244:	ldr	r7, [fp, #8]
   22248:	mov	r4, r2
   2224c:	mov	r8, r0
   22250:	cmp	r1, #0
   22254:	beq	2227c <__assert_fail@plt+0x10b0c>
   22258:	movw	r2, #20753	; 0x5111
   2225c:	mov	r5, r1
   22260:	str	r3, [sp, #4]
   22264:	str	r4, [sp]
   22268:	mov	r0, r8
   2226c:	mov	r1, #1
   22270:	movt	r2, #2
   22274:	mov	r3, r5
   22278:	b	22294 <__assert_fail@plt+0x10b24>
   2227c:	movw	r2, #20765	; 0x511d
   22280:	str	r3, [sp]
   22284:	mov	r0, r8
   22288:	mov	r1, #1
   2228c:	mov	r3, r4
   22290:	movt	r2, #2
   22294:	bl	11698 <__fprintf_chk@plt>
   22298:	movw	r1, #20772	; 0x5124
   2229c:	mov	r0, #0
   222a0:	mov	r2, #5
   222a4:	movt	r1, #2
   222a8:	bl	114dc <dcgettext@plt>
   222ac:	movw	r2, #21490	; 0x53f2
   222b0:	mov	r3, r0
   222b4:	movw	r0, #2022	; 0x7e6
   222b8:	mov	r1, #1
   222bc:	movt	r2, #2
   222c0:	str	r0, [sp]
   222c4:	mov	r0, r8
   222c8:	bl	11698 <__fprintf_chk@plt>
   222cc:	movw	r4, #18258	; 0x4752
   222d0:	mov	r1, r8
   222d4:	movt	r4, #2
   222d8:	mov	r0, r4
   222dc:	bl	113e0 <fputs_unlocked@plt>
   222e0:	movw	r1, #20776	; 0x5128
   222e4:	mov	r0, #0
   222e8:	mov	r2, #5
   222ec:	movt	r1, #2
   222f0:	bl	114dc <dcgettext@plt>
   222f4:	movw	r3, #20947	; 0x51d3
   222f8:	mov	r2, r0
   222fc:	mov	r0, r8
   22300:	mov	r1, #1
   22304:	movt	r3, #2
   22308:	bl	11698 <__fprintf_chk@plt>
   2230c:	mov	r0, r4
   22310:	mov	r1, r8
   22314:	bl	113e0 <fputs_unlocked@plt>
   22318:	cmp	r6, #9
   2231c:	bhi	22380 <__assert_fail@plt+0x10c10>
   22320:	add	r0, pc, #0
   22324:	ldr	pc, [r0, r6, lsl #2]
   22328:	andeq	r2, r2, r8, asr r5
   2232c:	andeq	r2, r2, r0, asr r3
   22330:	andeq	r2, r2, ip, lsl #7
   22334:			; <UNDEFINED> instruction: 0x000223b4
   22338:	ldrdeq	r2, [r2], -ip
   2233c:	andeq	r2, r2, r4, lsl #8
   22340:	andeq	r2, r2, ip, lsr #8
   22344:	andeq	r2, r2, r4, ror #8
   22348:	andeq	r2, r2, r4, lsl #10
   2234c:	andeq	r2, r2, ip, lsr #9
   22350:	movw	r1, #20981	; 0x51f5
   22354:	mov	r0, #0
   22358:	mov	r2, #5
   2235c:	movt	r1, #2
   22360:	bl	114dc <dcgettext@plt>
   22364:	ldr	r3, [r7]
   22368:	mov	r2, r0
   2236c:	mov	r0, r8
   22370:	mov	r1, #1
   22374:	sub	sp, fp, #24
   22378:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2237c:	b	11698 <__fprintf_chk@plt>
   22380:	movw	r1, #21300	; 0x5334
   22384:	movt	r1, #2
   22388:	b	224b4 <__assert_fail@plt+0x10d44>
   2238c:	movw	r1, #20997	; 0x5205
   22390:	mov	r0, #0
   22394:	mov	r2, #5
   22398:	movt	r1, #2
   2239c:	bl	114dc <dcgettext@plt>
   223a0:	mov	r2, r0
   223a4:	ldr	r3, [r7]
   223a8:	ldr	r0, [r7, #4]
   223ac:	str	r0, [sp]
   223b0:	b	224a0 <__assert_fail@plt+0x10d30>
   223b4:	movw	r1, #21020	; 0x521c
   223b8:	mov	r0, #0
   223bc:	mov	r2, #5
   223c0:	movt	r1, #2
   223c4:	bl	114dc <dcgettext@plt>
   223c8:	mov	r2, r0
   223cc:	ldr	r3, [r7]
   223d0:	ldmib	r7, {r0, r1}
   223d4:	stm	sp, {r0, r1}
   223d8:	b	224a0 <__assert_fail@plt+0x10d30>
   223dc:	movw	r1, #21048	; 0x5238
   223e0:	mov	r0, #0
   223e4:	mov	r2, #5
   223e8:	movt	r1, #2
   223ec:	bl	114dc <dcgettext@plt>
   223f0:	ldr	r3, [r7]
   223f4:	mov	r2, r0
   223f8:	ldmib	r7, {r0, r1, r7}
   223fc:	stm	sp, {r0, r1, r7}
   22400:	b	224a0 <__assert_fail@plt+0x10d30>
   22404:	movw	r1, #21080	; 0x5258
   22408:	mov	r0, #0
   2240c:	mov	r2, #5
   22410:	movt	r1, #2
   22414:	bl	114dc <dcgettext@plt>
   22418:	ldr	r3, [r7]
   2241c:	mov	r2, r0
   22420:	ldmib	r7, {r0, r1, r6, r7}
   22424:	stm	sp, {r0, r1, r6, r7}
   22428:	b	224a0 <__assert_fail@plt+0x10d30>
   2242c:	movw	r1, #21116	; 0x527c
   22430:	mov	r0, #0
   22434:	mov	r2, #5
   22438:	movt	r1, #2
   2243c:	bl	114dc <dcgettext@plt>
   22440:	mov	r2, r0
   22444:	ldr	r3, [r7]
   22448:	ldmib	r7, {r0, r1, r6}
   2244c:	ldr	r5, [r7, #16]
   22450:	ldr	r7, [r7, #20]
   22454:	stm	sp, {r0, r1, r6}
   22458:	str	r5, [sp, #12]
   2245c:	str	r7, [sp, #16]
   22460:	b	224a0 <__assert_fail@plt+0x10d30>
   22464:	movw	r1, #21156	; 0x52a4
   22468:	mov	r0, #0
   2246c:	mov	r2, #5
   22470:	movt	r1, #2
   22474:	bl	114dc <dcgettext@plt>
   22478:	mov	r2, r0
   2247c:	ldr	r3, [r7]
   22480:	ldmib	r7, {r0, r1, r6}
   22484:	ldr	r5, [r7, #16]
   22488:	ldr	r4, [r7, #20]
   2248c:	ldr	r7, [r7, #24]
   22490:	stm	sp, {r0, r1, r6}
   22494:	str	r5, [sp, #12]
   22498:	str	r4, [sp, #16]
   2249c:	str	r7, [sp, #20]
   224a0:	mov	r0, r8
   224a4:	mov	r1, #1
   224a8:	b	22554 <__assert_fail@plt+0x10de4>
   224ac:	movw	r1, #21248	; 0x5300
   224b0:	movt	r1, #2
   224b4:	mov	r0, #0
   224b8:	mov	r2, #5
   224bc:	bl	114dc <dcgettext@plt>
   224c0:	mov	ip, r0
   224c4:	ldr	r3, [r7]
   224c8:	ldr	r0, [r7, #4]
   224cc:	ldr	r1, [r7, #8]
   224d0:	ldr	r6, [r7, #12]
   224d4:	ldr	r5, [r7, #16]
   224d8:	ldr	r4, [r7, #20]
   224dc:	ldr	r2, [r7, #24]
   224e0:	ldr	lr, [r7, #28]
   224e4:	ldr	r7, [r7, #32]
   224e8:	stm	sp, {r0, r1, r6}
   224ec:	str	r5, [sp, #12]
   224f0:	str	r4, [sp, #16]
   224f4:	str	r2, [sp, #20]
   224f8:	str	lr, [sp, #24]
   224fc:	str	r7, [sp, #28]
   22500:	b	22548 <__assert_fail@plt+0x10dd8>
   22504:	movw	r1, #21200	; 0x52d0
   22508:	mov	r0, #0
   2250c:	mov	r2, #5
   22510:	movt	r1, #2
   22514:	bl	114dc <dcgettext@plt>
   22518:	mov	ip, r0
   2251c:	ldr	r3, [r7]
   22520:	ldmib	r7, {r0, r1, r6}
   22524:	ldr	r5, [r7, #16]
   22528:	ldr	r4, [r7, #20]
   2252c:	ldr	r2, [r7, #24]
   22530:	ldr	r7, [r7, #28]
   22534:	stm	sp, {r0, r1, r6}
   22538:	str	r5, [sp, #12]
   2253c:	str	r4, [sp, #16]
   22540:	str	r2, [sp, #20]
   22544:	str	r7, [sp, #24]
   22548:	mov	r0, r8
   2254c:	mov	r1, #1
   22550:	mov	r2, ip
   22554:	bl	11698 <__fprintf_chk@plt>
   22558:	sub	sp, fp, #24
   2255c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22560:	push	{r4, sl, fp, lr}
   22564:	add	fp, sp, #8
   22568:	sub	sp, sp, #8
   2256c:	ldr	ip, [fp, #8]
   22570:	mov	lr, #0
   22574:	ldr	r4, [ip, lr, lsl #2]
   22578:	add	lr, lr, #1
   2257c:	cmp	r4, #0
   22580:	bne	22574 <__assert_fail@plt+0x10e04>
   22584:	sub	r4, lr, #1
   22588:	str	ip, [sp]
   2258c:	str	r4, [sp, #4]
   22590:	bl	22234 <__assert_fail@plt+0x10ac4>
   22594:	sub	sp, fp, #8
   22598:	pop	{r4, sl, fp, pc}
   2259c:	push	{r4, r5, fp, lr}
   225a0:	add	fp, sp, #8
   225a4:	sub	sp, sp, #48	; 0x30
   225a8:	ldr	r4, [fp, #8]
   225ac:	mov	ip, #0
   225b0:	add	lr, sp, #8
   225b4:	ldr	r5, [r4]
   225b8:	cmp	r5, #0
   225bc:	str	r5, [lr, ip, lsl #2]
   225c0:	beq	225d8 <__assert_fail@plt+0x10e68>
   225c4:	add	ip, ip, #1
   225c8:	add	r4, r4, #4
   225cc:	cmp	ip, #10
   225d0:	bne	225b4 <__assert_fail@plt+0x10e44>
   225d4:	mov	ip, #10
   225d8:	str	lr, [sp]
   225dc:	str	ip, [sp, #4]
   225e0:	bl	22234 <__assert_fail@plt+0x10ac4>
   225e4:	sub	sp, fp, #8
   225e8:	pop	{r4, r5, fp, pc}
   225ec:	push	{fp, lr}
   225f0:	mov	fp, sp
   225f4:	sub	sp, sp, #8
   225f8:	add	ip, fp, #8
   225fc:	str	ip, [sp, #4]
   22600:	str	ip, [sp]
   22604:	bl	2259c <__assert_fail@plt+0x10e2c>
   22608:	mov	sp, fp
   2260c:	pop	{fp, pc}
   22610:	push	{fp, lr}
   22614:	mov	fp, sp
   22618:	movw	r0, #25020	; 0x61bc
   2261c:	movt	r0, #3
   22620:	ldr	r1, [r0]
   22624:	movw	r0, #18258	; 0x4752
   22628:	movt	r0, #2
   2262c:	bl	113e0 <fputs_unlocked@plt>
   22630:	movw	r1, #21360	; 0x5370
   22634:	mov	r0, #0
   22638:	mov	r2, #5
   2263c:	movt	r1, #2
   22640:	bl	114dc <dcgettext@plt>
   22644:	movw	r2, #21380	; 0x5384
   22648:	mov	r1, r0
   2264c:	mov	r0, #1
   22650:	movt	r2, #2
   22654:	bl	11674 <__printf_chk@plt>
   22658:	movw	r1, #21402	; 0x539a
   2265c:	mov	r0, #0
   22660:	mov	r2, #5
   22664:	movt	r1, #2
   22668:	bl	114dc <dcgettext@plt>
   2266c:	movw	r2, #16929	; 0x4221
   22670:	movw	r3, #19423	; 0x4bdf
   22674:	mov	r1, r0
   22678:	mov	r0, #1
   2267c:	movt	r2, #2
   22680:	movt	r3, #2
   22684:	bl	11674 <__printf_chk@plt>
   22688:	movw	r1, #21422	; 0x53ae
   2268c:	mov	r0, #0
   22690:	mov	r2, #5
   22694:	movt	r1, #2
   22698:	bl	114dc <dcgettext@plt>
   2269c:	movw	r2, #21461	; 0x53d5
   226a0:	mov	r1, r0
   226a4:	mov	r0, #1
   226a8:	movt	r2, #2
   226ac:	pop	{fp, lr}
   226b0:	b	11674 <__printf_chk@plt>
   226b4:	b	226b8 <__assert_fail@plt+0x10f48>
   226b8:	push	{r4, r5, r6, sl, fp, lr}
   226bc:	add	fp, sp, #16
   226c0:	mov	r4, r2
   226c4:	mov	r5, r1
   226c8:	mov	r6, r0
   226cc:	bl	23dc4 <__assert_fail@plt+0x12654>
   226d0:	cmp	r0, #0
   226d4:	popne	{r4, r5, r6, sl, fp, pc}
   226d8:	cmp	r6, #0
   226dc:	beq	226f0 <__assert_fail@plt+0x10f80>
   226e0:	cmp	r5, #0
   226e4:	cmpne	r4, #0
   226e8:	bne	226f0 <__assert_fail@plt+0x10f80>
   226ec:	pop	{r4, r5, r6, sl, fp, pc}
   226f0:	bl	11870 <__assert_fail@plt+0x100>
   226f4:	push	{fp, lr}
   226f8:	mov	fp, sp
   226fc:	bl	23994 <__assert_fail@plt+0x12224>
   22700:	cmp	r0, #0
   22704:	popne	{fp, pc}
   22708:	bl	11870 <__assert_fail@plt+0x100>
   2270c:	push	{fp, lr}
   22710:	mov	fp, sp
   22714:	bl	23994 <__assert_fail@plt+0x12224>
   22718:	cmp	r0, #0
   2271c:	popne	{fp, pc}
   22720:	bl	11870 <__assert_fail@plt+0x100>
   22724:	push	{fp, lr}
   22728:	mov	fp, sp
   2272c:	bl	23994 <__assert_fail@plt+0x12224>
   22730:	cmp	r0, #0
   22734:	popne	{fp, pc}
   22738:	bl	11870 <__assert_fail@plt+0x100>
   2273c:	push	{r4, r5, fp, lr}
   22740:	add	fp, sp, #8
   22744:	mov	r4, r1
   22748:	mov	r5, r0
   2274c:	bl	239c4 <__assert_fail@plt+0x12254>
   22750:	cmp	r0, #0
   22754:	popne	{r4, r5, fp, pc}
   22758:	cmp	r5, #0
   2275c:	beq	2276c <__assert_fail@plt+0x10ffc>
   22760:	cmp	r4, #0
   22764:	bne	2276c <__assert_fail@plt+0x10ffc>
   22768:	pop	{r4, r5, fp, pc}
   2276c:	bl	11870 <__assert_fail@plt+0x100>
   22770:	push	{fp, lr}
   22774:	mov	fp, sp
   22778:	cmp	r1, #0
   2277c:	orreq	r1, r1, #1
   22780:	bl	239c4 <__assert_fail@plt+0x12254>
   22784:	cmp	r0, #0
   22788:	popne	{fp, pc}
   2278c:	bl	11870 <__assert_fail@plt+0x100>
   22790:	push	{fp, lr}
   22794:	mov	fp, sp
   22798:	clz	r3, r2
   2279c:	lsr	ip, r3, #5
   227a0:	clz	r3, r1
   227a4:	lsr	r3, r3, #5
   227a8:	orrs	r3, r3, ip
   227ac:	movwne	r1, #1
   227b0:	movwne	r2, #1
   227b4:	bl	23dc4 <__assert_fail@plt+0x12654>
   227b8:	cmp	r0, #0
   227bc:	popne	{fp, pc}
   227c0:	bl	11870 <__assert_fail@plt+0x100>
   227c4:	push	{fp, lr}
   227c8:	mov	fp, sp
   227cc:	mov	r2, r1
   227d0:	mov	r1, r0
   227d4:	mov	r0, #0
   227d8:	bl	23dc4 <__assert_fail@plt+0x12654>
   227dc:	cmp	r0, #0
   227e0:	popne	{fp, pc}
   227e4:	bl	11870 <__assert_fail@plt+0x100>
   227e8:	mov	r2, r1
   227ec:	mov	r1, r0
   227f0:	mov	r0, #0
   227f4:	b	22790 <__assert_fail@plt+0x11020>
   227f8:	mov	r2, #1
   227fc:	b	22800 <__assert_fail@plt+0x11090>
   22800:	push	{r4, r5, fp, lr}
   22804:	add	fp, sp, #8
   22808:	ldr	r5, [r1]
   2280c:	mov	r4, r1
   22810:	cmp	r0, #0
   22814:	beq	2282c <__assert_fail@plt+0x110bc>
   22818:	mov	r1, #1
   2281c:	add	r1, r1, r5, lsr #1
   22820:	adds	r5, r5, r1
   22824:	bcc	22844 <__assert_fail@plt+0x110d4>
   22828:	bl	11870 <__assert_fail@plt+0x100>
   2282c:	cmp	r5, #0
   22830:	bne	22844 <__assert_fail@plt+0x110d4>
   22834:	mov	r1, #64	; 0x40
   22838:	cmp	r2, #64	; 0x40
   2283c:	udiv	r5, r1, r2
   22840:	addhi	r5, r5, #1
   22844:	mov	r1, r5
   22848:	bl	226b8 <__assert_fail@plt+0x10f48>
   2284c:	str	r5, [r4]
   22850:	pop	{r4, r5, fp, pc}
   22854:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22858:	add	fp, sp, #24
   2285c:	ldr	r6, [r1]
   22860:	mov	r8, r1
   22864:	ldr	r4, [fp, #8]
   22868:	add	r1, r6, r6, asr #1
   2286c:	cmp	r1, r6
   22870:	mvnvs	r1, #-2147483648	; 0x80000000
   22874:	cmp	r1, r3
   22878:	mov	r5, r1
   2287c:	movgt	r5, r3
   22880:	cmn	r3, #1
   22884:	movle	r5, r1
   22888:	cmn	r4, #1
   2288c:	ble	228ac <__assert_fail@plt+0x1113c>
   22890:	cmp	r4, #0
   22894:	beq	22900 <__assert_fail@plt+0x11190>
   22898:	cmn	r5, #1
   2289c:	ble	228d4 <__assert_fail@plt+0x11164>
   228a0:	mvn	r7, #-2147483648	; 0x80000000
   228a4:	udiv	r1, r7, r4
   228a8:	b	228c8 <__assert_fail@plt+0x11158>
   228ac:	cmn	r5, #1
   228b0:	ble	228f0 <__assert_fail@plt+0x11180>
   228b4:	cmn	r4, #1
   228b8:	beq	22900 <__assert_fail@plt+0x11190>
   228bc:	mov	r1, #-2147483648	; 0x80000000
   228c0:	mvn	r7, #-2147483648	; 0x80000000
   228c4:	sdiv	r1, r1, r4
   228c8:	cmp	r1, r5
   228cc:	bge	22900 <__assert_fail@plt+0x11190>
   228d0:	b	22910 <__assert_fail@plt+0x111a0>
   228d4:	beq	22900 <__assert_fail@plt+0x11190>
   228d8:	mov	r1, #-2147483648	; 0x80000000
   228dc:	mvn	r7, #-2147483648	; 0x80000000
   228e0:	sdiv	r1, r1, r5
   228e4:	cmp	r1, r4
   228e8:	bge	22900 <__assert_fail@plt+0x11190>
   228ec:	b	22910 <__assert_fail@plt+0x111a0>
   228f0:	mvn	r7, #-2147483648	; 0x80000000
   228f4:	sdiv	r1, r7, r4
   228f8:	cmp	r5, r1
   228fc:	blt	22910 <__assert_fail@plt+0x111a0>
   22900:	mul	r1, r5, r4
   22904:	mov	r7, #64	; 0x40
   22908:	cmp	r1, #63	; 0x3f
   2290c:	bgt	22918 <__assert_fail@plt+0x111a8>
   22910:	sdiv	r5, r7, r4
   22914:	mul	r1, r5, r4
   22918:	cmp	r0, #0
   2291c:	moveq	r7, #0
   22920:	streq	r7, [r8]
   22924:	sub	r7, r5, r6
   22928:	cmp	r7, r2
   2292c:	bge	229d0 <__assert_fail@plt+0x11260>
   22930:	add	r5, r6, r2
   22934:	mov	r2, #0
   22938:	mov	r1, #0
   2293c:	cmp	r5, r3
   22940:	movwgt	r2, #1
   22944:	cmn	r3, #1
   22948:	movwgt	r1, #1
   2294c:	cmp	r5, r6
   22950:	bvs	229b8 <__assert_fail@plt+0x11248>
   22954:	ands	r1, r1, r2
   22958:	bne	229b8 <__assert_fail@plt+0x11248>
   2295c:	cmn	r4, #1
   22960:	ble	22980 <__assert_fail@plt+0x11210>
   22964:	cmp	r4, #0
   22968:	beq	229cc <__assert_fail@plt+0x1125c>
   2296c:	cmn	r5, #1
   22970:	ble	229a4 <__assert_fail@plt+0x11234>
   22974:	mvn	r1, #-2147483648	; 0x80000000
   22978:	udiv	r1, r1, r4
   2297c:	b	22998 <__assert_fail@plt+0x11228>
   22980:	cmn	r5, #1
   22984:	ble	229bc <__assert_fail@plt+0x1124c>
   22988:	cmn	r4, #1
   2298c:	beq	229cc <__assert_fail@plt+0x1125c>
   22990:	mov	r1, #-2147483648	; 0x80000000
   22994:	sdiv	r1, r1, r4
   22998:	cmp	r1, r5
   2299c:	bge	229cc <__assert_fail@plt+0x1125c>
   229a0:	b	229b8 <__assert_fail@plt+0x11248>
   229a4:	beq	229cc <__assert_fail@plt+0x1125c>
   229a8:	mov	r1, #-2147483648	; 0x80000000
   229ac:	sdiv	r1, r1, r5
   229b0:	cmp	r1, r4
   229b4:	bge	229cc <__assert_fail@plt+0x1125c>
   229b8:	bl	11870 <__assert_fail@plt+0x100>
   229bc:	mvn	r1, #-2147483648	; 0x80000000
   229c0:	sdiv	r1, r1, r4
   229c4:	cmp	r5, r1
   229c8:	blt	229b8 <__assert_fail@plt+0x11248>
   229cc:	mul	r1, r5, r4
   229d0:	bl	2273c <__assert_fail@plt+0x10fcc>
   229d4:	str	r5, [r8]
   229d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   229dc:	push	{fp, lr}
   229e0:	mov	fp, sp
   229e4:	mov	r1, #1
   229e8:	bl	23940 <__assert_fail@plt+0x121d0>
   229ec:	cmp	r0, #0
   229f0:	popne	{fp, pc}
   229f4:	bl	11870 <__assert_fail@plt+0x100>
   229f8:	push	{fp, lr}
   229fc:	mov	fp, sp
   22a00:	bl	23940 <__assert_fail@plt+0x121d0>
   22a04:	cmp	r0, #0
   22a08:	popne	{fp, pc}
   22a0c:	bl	11870 <__assert_fail@plt+0x100>
   22a10:	push	{fp, lr}
   22a14:	mov	fp, sp
   22a18:	mov	r1, #1
   22a1c:	bl	23940 <__assert_fail@plt+0x121d0>
   22a20:	cmp	r0, #0
   22a24:	popne	{fp, pc}
   22a28:	bl	11870 <__assert_fail@plt+0x100>
   22a2c:	push	{fp, lr}
   22a30:	mov	fp, sp
   22a34:	bl	23940 <__assert_fail@plt+0x121d0>
   22a38:	cmp	r0, #0
   22a3c:	popne	{fp, pc}
   22a40:	bl	11870 <__assert_fail@plt+0x100>
   22a44:	push	{r4, r5, fp, lr}
   22a48:	add	fp, sp, #8
   22a4c:	mov	r5, r0
   22a50:	mov	r0, r1
   22a54:	mov	r4, r1
   22a58:	bl	23994 <__assert_fail@plt+0x12224>
   22a5c:	cmp	r0, #0
   22a60:	beq	22a74 <__assert_fail@plt+0x11304>
   22a64:	mov	r1, r5
   22a68:	mov	r2, r4
   22a6c:	pop	{r4, r5, fp, lr}
   22a70:	b	11488 <memcpy@plt>
   22a74:	bl	11870 <__assert_fail@plt+0x100>
   22a78:	push	{r4, r5, fp, lr}
   22a7c:	add	fp, sp, #8
   22a80:	mov	r5, r0
   22a84:	mov	r0, r1
   22a88:	mov	r4, r1
   22a8c:	bl	23994 <__assert_fail@plt+0x12224>
   22a90:	cmp	r0, #0
   22a94:	beq	22aa8 <__assert_fail@plt+0x11338>
   22a98:	mov	r1, r5
   22a9c:	mov	r2, r4
   22aa0:	pop	{r4, r5, fp, lr}
   22aa4:	b	11488 <memcpy@plt>
   22aa8:	bl	11870 <__assert_fail@plt+0x100>
   22aac:	push	{r4, r5, fp, lr}
   22ab0:	add	fp, sp, #8
   22ab4:	mov	r5, r0
   22ab8:	add	r0, r1, #1
   22abc:	mov	r4, r1
   22ac0:	bl	23994 <__assert_fail@plt+0x12224>
   22ac4:	cmp	r0, #0
   22ac8:	beq	22ae4 <__assert_fail@plt+0x11374>
   22acc:	mov	r1, #0
   22ad0:	mov	r2, r4
   22ad4:	strb	r1, [r0, r4]
   22ad8:	mov	r1, r5
   22adc:	pop	{r4, r5, fp, lr}
   22ae0:	b	11488 <memcpy@plt>
   22ae4:	bl	11870 <__assert_fail@plt+0x100>
   22ae8:	push	{r4, r5, fp, lr}
   22aec:	add	fp, sp, #8
   22af0:	mov	r4, r0
   22af4:	bl	11614 <strlen@plt>
   22af8:	add	r5, r0, #1
   22afc:	mov	r0, r5
   22b00:	bl	23994 <__assert_fail@plt+0x12224>
   22b04:	cmp	r0, #0
   22b08:	beq	22b1c <__assert_fail@plt+0x113ac>
   22b0c:	mov	r1, r4
   22b10:	mov	r2, r5
   22b14:	pop	{r4, r5, fp, lr}
   22b18:	b	11488 <memcpy@plt>
   22b1c:	bl	11870 <__assert_fail@plt+0x100>
   22b20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22b24:	add	fp, sp, #24
   22b28:	sub	sp, sp, #16
   22b2c:	mov	r8, r0
   22b30:	ldr	r0, [fp, #16]
   22b34:	mov	r7, r3
   22b38:	mov	r4, r2
   22b3c:	mov	r2, r1
   22b40:	add	r3, sp, #8
   22b44:	mov	r1, #0
   22b48:	str	r0, [sp]
   22b4c:	mov	r0, r8
   22b50:	bl	22c34 <__assert_fail@plt+0x114c4>
   22b54:	cmp	r0, #0
   22b58:	bne	22c08 <__assert_fail@plt+0x11498>
   22b5c:	ldr	r6, [sp, #8]
   22b60:	ldr	r5, [sp, #12]
   22b64:	subs	r0, r6, r4
   22b68:	sbcs	r0, r5, r7
   22b6c:	blt	22b90 <__assert_fail@plt+0x11420>
   22b70:	ldr	r1, [fp, #8]
   22b74:	ldr	r0, [fp, #12]
   22b78:	subs	r1, r1, r6
   22b7c:	sbcs	r0, r0, r5
   22b80:	movge	r0, r6
   22b84:	movge	r1, r5
   22b88:	subge	sp, fp, #24
   22b8c:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   22b90:	subs	r0, r6, #1073741824	; 0x40000000
   22b94:	sbcs	r0, r5, #0
   22b98:	blt	22ba4 <__assert_fail@plt+0x11434>
   22b9c:	bl	1162c <__errno_location@plt>
   22ba0:	b	22bbc <__assert_fail@plt+0x1144c>
   22ba4:	bl	1162c <__errno_location@plt>
   22ba8:	mvn	r2, #1073741824	; 0x40000000
   22bac:	mvn	r1, #0
   22bb0:	subs	r2, r2, r6
   22bb4:	sbcs	r1, r1, r5
   22bb8:	blt	22bc4 <__assert_fail@plt+0x11454>
   22bbc:	mov	r1, #75	; 0x4b
   22bc0:	b	22bc8 <__assert_fail@plt+0x11458>
   22bc4:	mov	r1, #34	; 0x22
   22bc8:	str	r1, [r0]
   22bcc:	ldr	r6, [r0]
   22bd0:	ldr	r4, [fp, #24]
   22bd4:	ldr	r5, [fp, #20]
   22bd8:	mov	r0, r8
   22bdc:	bl	15744 <__assert_fail@plt+0x3fd4>
   22be0:	subs	r1, r6, #22
   22be4:	movw	r2, #19923	; 0x4dd3
   22be8:	str	r0, [sp]
   22bec:	mov	r3, r5
   22bf0:	movne	r1, r6
   22bf4:	cmp	r4, #0
   22bf8:	movt	r2, #2
   22bfc:	movweq	r4, #1
   22c00:	mov	r0, r4
   22c04:	bl	11590 <error@plt>
   22c08:	cmp	r0, #1
   22c0c:	beq	22b9c <__assert_fail@plt+0x1142c>
   22c10:	cmp	r0, #3
   22c14:	bne	22c24 <__assert_fail@plt+0x114b4>
   22c18:	bl	1162c <__errno_location@plt>
   22c1c:	mov	r1, #0
   22c20:	b	22bc8 <__assert_fail@plt+0x11458>
   22c24:	bl	1162c <__errno_location@plt>
   22c28:	b	22bcc <__assert_fail@plt+0x1145c>
   22c2c:	mov	r1, #10
   22c30:	b	22b20 <__assert_fail@plt+0x113b0>
   22c34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c38:	add	fp, sp, #28
   22c3c:	sub	sp, sp, #28
   22c40:	cmp	r2, #37	; 0x25
   22c44:	str	r3, [sp, #12]
   22c48:	bcs	2315c <__assert_fail@plt+0x119ec>
   22c4c:	ldr	sl, [fp, #8]
   22c50:	mov	r4, r2
   22c54:	mov	r6, r1
   22c58:	mov	r5, r0
   22c5c:	bl	1162c <__errno_location@plt>
   22c60:	cmp	r6, #0
   22c64:	add	r8, sp, #24
   22c68:	mov	r7, r0
   22c6c:	mov	r0, #0
   22c70:	mov	r2, r4
   22c74:	movne	r8, r6
   22c78:	str	r0, [r7]
   22c7c:	mov	r0, r5
   22c80:	mov	r1, r8
   22c84:	bl	116a4 <strtoimax@plt>
   22c88:	str	r1, [sp, #20]
   22c8c:	str	r0, [sp, #16]
   22c90:	ldr	r4, [r8]
   22c94:	cmp	r4, r5
   22c98:	beq	22cc4 <__assert_fail@plt+0x11554>
   22c9c:	mov	r6, r0
   22ca0:	ldr	r0, [r7]
   22ca4:	mov	r9, r1
   22ca8:	cmp	r0, #0
   22cac:	beq	22d04 <__assert_fail@plt+0x11594>
   22cb0:	mov	r7, #4
   22cb4:	cmp	r0, #34	; 0x22
   22cb8:	bne	23150 <__assert_fail@plt+0x119e0>
   22cbc:	mov	r7, #1
   22cc0:	b	22d08 <__assert_fail@plt+0x11598>
   22cc4:	mov	r7, #4
   22cc8:	cmp	sl, #0
   22ccc:	beq	23150 <__assert_fail@plt+0x119e0>
   22cd0:	ldrb	r1, [r5]
   22cd4:	cmp	r1, #0
   22cd8:	beq	23150 <__assert_fail@plt+0x119e0>
   22cdc:	mov	r0, sl
   22ce0:	bl	11620 <strchr@plt>
   22ce4:	cmp	r0, #0
   22ce8:	beq	23150 <__assert_fail@plt+0x119e0>
   22cec:	mov	r9, #0
   22cf0:	mov	r6, #1
   22cf4:	mov	r7, #0
   22cf8:	str	r9, [sp, #20]
   22cfc:	str	r6, [sp, #16]
   22d00:	b	22d10 <__assert_fail@plt+0x115a0>
   22d04:	mov	r7, r0
   22d08:	cmp	sl, #0
   22d0c:	beq	22db4 <__assert_fail@plt+0x11644>
   22d10:	ldrb	r5, [r4]
   22d14:	cmp	r5, #0
   22d18:	beq	22dbc <__assert_fail@plt+0x1164c>
   22d1c:	mov	r0, sl
   22d20:	mov	r1, r5
   22d24:	bl	11620 <strchr@plt>
   22d28:	cmp	r0, #0
   22d2c:	beq	22dc4 <__assert_fail@plt+0x11654>
   22d30:	sub	r0, r5, #69	; 0x45
   22d34:	str	r7, [sp, #4]
   22d38:	mov	r1, #1
   22d3c:	mov	r7, #1024	; 0x400
   22d40:	cmp	r0, #21
   22d44:	str	r1, [sp, #8]
   22d48:	bhi	22d60 <__assert_fail@plt+0x115f0>
   22d4c:	movw	r2, #35141	; 0x8945
   22d50:	mov	r1, #1
   22d54:	movt	r2, #48	; 0x30
   22d58:	tst	r2, r1, lsl r0
   22d5c:	bne	22d7c <__assert_fail@plt+0x1160c>
   22d60:	sub	r0, r5, #103	; 0x67
   22d64:	cmp	r0, #13
   22d68:	bhi	22dd4 <__assert_fail@plt+0x11664>
   22d6c:	mov	r1, #1
   22d70:	movw	r2, #8273	; 0x2051
   22d74:	tst	r2, r1, lsl r0
   22d78:	beq	22dd4 <__assert_fail@plt+0x11664>
   22d7c:	ldr	r0, [fp, #8]
   22d80:	mov	r1, #48	; 0x30
   22d84:	bl	11620 <strchr@plt>
   22d88:	cmp	r0, #0
   22d8c:	beq	22dd4 <__assert_fail@plt+0x11664>
   22d90:	ldrb	r0, [r4, #1]
   22d94:	ldr	sl, [sp, #12]
   22d98:	cmp	r0, #66	; 0x42
   22d9c:	cmpne	r0, #68	; 0x44
   22da0:	bne	22ea8 <__assert_fail@plt+0x11738>
   22da4:	mov	r0, #2
   22da8:	mov	r7, #1000	; 0x3e8
   22dac:	str	r0, [sp, #8]
   22db0:	b	22dd8 <__assert_fail@plt+0x11668>
   22db4:	ldr	r0, [sp, #12]
   22db8:	b	22dcc <__assert_fail@plt+0x1165c>
   22dbc:	ldr	sl, [sp, #12]
   22dc0:	b	2314c <__assert_fail@plt+0x119dc>
   22dc4:	ldr	r0, [sp, #12]
   22dc8:	orr	r7, r7, #2
   22dcc:	stm	r0, {r6, r9}
   22dd0:	b	23150 <__assert_fail@plt+0x119e0>
   22dd4:	ldr	sl, [sp, #12]
   22dd8:	cmp	r5, #89	; 0x59
   22ddc:	bgt	22e44 <__assert_fail@plt+0x116d4>
   22de0:	sub	r0, r5, #66	; 0x42
   22de4:	cmp	r0, #14
   22de8:	bhi	22ec8 <__assert_fail@plt+0x11758>
   22dec:	add	r1, pc, #0
   22df0:	ldr	pc, [r1, r0, lsl #2]
   22df4:	andeq	r2, r2, r0, lsr lr
   22df8:	andeq	r2, r2, r0, ror #31
   22dfc:	andeq	r2, r2, r0, ror #31
   22e00:	strdeq	r2, [r2], -r0
   22e04:	andeq	r2, r2, r0, ror #31
   22e08:	andeq	r2, r2, r4, lsr #30
   22e0c:	andeq	r2, r2, r0, ror #31
   22e10:	andeq	r2, r2, r0, ror #31
   22e14:	andeq	r2, r2, r0, ror #31
   22e18:	andeq	r2, r2, ip, asr #30
   22e1c:	andeq	r2, r2, r0, ror #31
   22e20:	andeq	r2, r2, r0, ror #30
   22e24:	andeq	r2, r2, r0, ror #31
   22e28:	andeq	r2, r2, r0, ror #31
   22e2c:	andeq	r3, r2, r8, lsl r0
   22e30:	cmn	r9, #1
   22e34:	ble	23040 <__assert_fail@plt+0x118d0>
   22e38:	cmp	r9, #2097152	; 0x200000
   22e3c:	blt	2306c <__assert_fail@plt+0x118fc>
   22e40:	b	230ec <__assert_fail@plt+0x1197c>
   22e44:	cmp	r5, #115	; 0x73
   22e48:	bgt	22f00 <__assert_fail@plt+0x11790>
   22e4c:	sub	r0, r5, #98	; 0x62
   22e50:	cmp	r0, #11
   22e54:	bhi	22fb0 <__assert_fail@plt+0x11840>
   22e58:	add	r1, pc, #4
   22e5c:	mov	r4, #0
   22e60:	ldr	pc, [r1, r0, lsl #2]
   22e64:	muleq	r2, r4, lr
   22e68:	andeq	r3, r2, r0, lsr #2
   22e6c:	andeq	r2, r2, r0, ror #31
   22e70:	andeq	r2, r2, r0, ror #31
   22e74:	andeq	r2, r2, r0, ror #31
   22e78:	andeq	r2, r2, r4, lsr #30
   22e7c:	andeq	r2, r2, r0, ror #31
   22e80:	andeq	r2, r2, r0, ror #31
   22e84:	andeq	r2, r2, r0, ror #31
   22e88:	andeq	r2, r2, ip, asr #30
   22e8c:	andeq	r2, r2, r0, ror #31
   22e90:	andeq	r2, r2, r0, ror #30
   22e94:	cmn	r9, #1
   22e98:	ble	23080 <__assert_fail@plt+0x11910>
   22e9c:	cmp	r9, #4194304	; 0x400000
   22ea0:	blt	230ac <__assert_fail@plt+0x1193c>
   22ea4:	b	230ec <__assert_fail@plt+0x1197c>
   22ea8:	cmp	r0, #105	; 0x69
   22eac:	bne	22dd8 <__assert_fail@plt+0x11668>
   22eb0:	ldrb	r0, [r4, #2]
   22eb4:	mov	r1, #1
   22eb8:	cmp	r0, #66	; 0x42
   22ebc:	movweq	r1, #3
   22ec0:	str	r1, [sp, #8]
   22ec4:	b	22dd8 <__assert_fail@plt+0x11668>
   22ec8:	cmp	r5, #84	; 0x54
   22ecc:	beq	22f88 <__assert_fail@plt+0x11818>
   22ed0:	cmp	r5, #89	; 0x59
   22ed4:	bne	22fe0 <__assert_fail@plt+0x11870>
   22ed8:	mov	r4, #0
   22edc:	mvn	r6, #7
   22ee0:	add	r5, sp, #16
   22ee4:	mov	r0, r5
   22ee8:	mov	r1, r7
   22eec:	bl	2317c <__assert_fail@plt+0x11a0c>
   22ef0:	orr	r4, r0, r4
   22ef4:	adds	r6, r6, #1
   22ef8:	bcc	22ee4 <__assert_fail@plt+0x11774>
   22efc:	b	23120 <__assert_fail@plt+0x119b0>
   22f00:	cmp	r5, #116	; 0x74
   22f04:	beq	22f88 <__assert_fail@plt+0x11818>
   22f08:	cmp	r5, #119	; 0x77
   22f0c:	bne	22fe0 <__assert_fail@plt+0x11870>
   22f10:	cmn	r9, #1
   22f14:	ble	230c0 <__assert_fail@plt+0x11950>
   22f18:	cmp	r9, #1073741824	; 0x40000000
   22f1c:	bge	230ec <__assert_fail@plt+0x1197c>
   22f20:	b	23108 <__assert_fail@plt+0x11998>
   22f24:	mov	r4, #0
   22f28:	mvn	r6, #2
   22f2c:	add	r5, sp, #16
   22f30:	mov	r0, r5
   22f34:	mov	r1, r7
   22f38:	bl	2317c <__assert_fail@plt+0x11a0c>
   22f3c:	orr	r4, r0, r4
   22f40:	adds	r6, r6, #1
   22f44:	bcc	22f30 <__assert_fail@plt+0x117c0>
   22f48:	b	23120 <__assert_fail@plt+0x119b0>
   22f4c:	add	r0, sp, #16
   22f50:	mov	r1, r7
   22f54:	bl	2317c <__assert_fail@plt+0x11a0c>
   22f58:	mov	r4, r0
   22f5c:	b	23120 <__assert_fail@plt+0x119b0>
   22f60:	mov	r4, #0
   22f64:	mvn	r6, #1
   22f68:	add	r5, sp, #16
   22f6c:	mov	r0, r5
   22f70:	mov	r1, r7
   22f74:	bl	2317c <__assert_fail@plt+0x11a0c>
   22f78:	orr	r4, r0, r4
   22f7c:	adds	r6, r6, #1
   22f80:	bcc	22f6c <__assert_fail@plt+0x117fc>
   22f84:	b	23120 <__assert_fail@plt+0x119b0>
   22f88:	mov	r4, #0
   22f8c:	mvn	r6, #3
   22f90:	add	r5, sp, #16
   22f94:	mov	r0, r5
   22f98:	mov	r1, r7
   22f9c:	bl	2317c <__assert_fail@plt+0x11a0c>
   22fa0:	orr	r4, r0, r4
   22fa4:	adds	r6, r6, #1
   22fa8:	bcc	22f94 <__assert_fail@plt+0x11824>
   22fac:	b	23120 <__assert_fail@plt+0x119b0>
   22fb0:	cmp	r5, #90	; 0x5a
   22fb4:	bne	22fe0 <__assert_fail@plt+0x11870>
   22fb8:	mov	r4, #0
   22fbc:	mvn	r6, #6
   22fc0:	add	r5, sp, #16
   22fc4:	mov	r0, r5
   22fc8:	mov	r1, r7
   22fcc:	bl	2317c <__assert_fail@plt+0x11a0c>
   22fd0:	orr	r4, r0, r4
   22fd4:	adds	r6, r6, #1
   22fd8:	bcc	22fc4 <__assert_fail@plt+0x11854>
   22fdc:	b	23120 <__assert_fail@plt+0x119b0>
   22fe0:	stm	sl, {r6, r9}
   22fe4:	ldr	r7, [sp, #4]
   22fe8:	orr	r7, r7, #2
   22fec:	b	23150 <__assert_fail@plt+0x119e0>
   22ff0:	mov	r4, #0
   22ff4:	mvn	r6, #5
   22ff8:	add	r5, sp, #16
   22ffc:	mov	r0, r5
   23000:	mov	r1, r7
   23004:	bl	2317c <__assert_fail@plt+0x11a0c>
   23008:	orr	r4, r0, r4
   2300c:	adds	r6, r6, #1
   23010:	bcc	22ffc <__assert_fail@plt+0x1188c>
   23014:	b	23120 <__assert_fail@plt+0x119b0>
   23018:	mov	r4, #0
   2301c:	mvn	r6, #4
   23020:	add	r5, sp, #16
   23024:	mov	r0, r5
   23028:	mov	r1, r7
   2302c:	bl	2317c <__assert_fail@plt+0x11a0c>
   23030:	orr	r4, r0, r4
   23034:	adds	r6, r6, #1
   23038:	bcc	23024 <__assert_fail@plt+0x118b4>
   2303c:	b	23120 <__assert_fail@plt+0x119b0>
   23040:	and	r0, r6, r9
   23044:	cmn	r0, #1
   23048:	beq	2306c <__assert_fail@plt+0x118fc>
   2304c:	mov	r0, #0
   23050:	mov	r1, #-2147483648	; 0x80000000
   23054:	mov	r2, r6
   23058:	mov	r3, r9
   2305c:	bl	23f00 <__assert_fail@plt+0x12790>
   23060:	subs	r0, r0, #1024	; 0x400
   23064:	sbcs	r0, r1, #0
   23068:	blt	230ec <__assert_fail@plt+0x1197c>
   2306c:	lsl	r0, r9, #10
   23070:	lsl	r1, r6, #10
   23074:	mov	r4, #0
   23078:	orr	r0, r0, r6, lsr #22
   2307c:	b	23118 <__assert_fail@plt+0x119a8>
   23080:	and	r0, r6, r9
   23084:	cmn	r0, #1
   23088:	beq	230ac <__assert_fail@plt+0x1193c>
   2308c:	mov	r0, #0
   23090:	mov	r1, #-2147483648	; 0x80000000
   23094:	mov	r2, r6
   23098:	mov	r3, r9
   2309c:	bl	23f00 <__assert_fail@plt+0x12790>
   230a0:	subs	r0, r0, #512	; 0x200
   230a4:	sbcs	r0, r1, #0
   230a8:	blt	230ec <__assert_fail@plt+0x1197c>
   230ac:	lsl	r0, r9, #9
   230b0:	lsl	r1, r6, #9
   230b4:	mov	r4, #0
   230b8:	orr	r0, r0, r6, lsr #23
   230bc:	b	23118 <__assert_fail@plt+0x119a8>
   230c0:	and	r0, r6, r9
   230c4:	cmn	r0, #1
   230c8:	beq	23108 <__assert_fail@plt+0x11998>
   230cc:	mov	r0, #0
   230d0:	mov	r1, #-2147483648	; 0x80000000
   230d4:	mov	r2, r6
   230d8:	mov	r3, r9
   230dc:	bl	23f00 <__assert_fail@plt+0x12790>
   230e0:	subs	r0, r0, #2
   230e4:	sbcs	r0, r1, #0
   230e8:	bge	23108 <__assert_fail@plt+0x11998>
   230ec:	cmp	r9, #0
   230f0:	mvn	r0, #-2147483648	; 0x80000000
   230f4:	mvn	r1, #0
   230f8:	mov	r4, #1
   230fc:	movmi	r0, #-2147483648	; 0x80000000
   23100:	movwmi	r1, #0
   23104:	b	23118 <__assert_fail@plt+0x119a8>
   23108:	lsl	r0, r9, #1
   2310c:	lsl	r1, r6, #1
   23110:	mov	r4, #0
   23114:	orr	r0, r0, r6, lsr #31
   23118:	str	r1, [sp, #16]
   2311c:	str	r0, [sp, #20]
   23120:	ldr	r0, [r8]
   23124:	ldr	r2, [sp, #8]
   23128:	ldr	r7, [sp, #4]
   2312c:	add	r1, r0, r2
   23130:	orr	r7, r4, r7
   23134:	str	r1, [r8]
   23138:	ldrb	r0, [r0, r2]
   2313c:	ldr	r6, [sp, #16]
   23140:	ldr	r9, [sp, #20]
   23144:	cmp	r0, #0
   23148:	orrne	r7, r7, #2
   2314c:	stm	sl, {r6, r9}
   23150:	mov	r0, r7
   23154:	sub	sp, fp, #28
   23158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2315c:	movw	r0, #21537	; 0x5421
   23160:	movw	r1, #21575	; 0x5447
   23164:	movw	r3, #21591	; 0x5457
   23168:	mov	r2, #85	; 0x55
   2316c:	movt	r0, #2
   23170:	movt	r1, #2
   23174:	movt	r3, #2
   23178:	bl	11770 <__assert_fail@plt>
   2317c:	push	{r4, r5, r6, r7, fp, lr}
   23180:	add	fp, sp, #16
   23184:	mov	r5, r1
   23188:	mov	r4, r0
   2318c:	cmn	r1, #1
   23190:	ble	231b8 <__assert_fail@plt+0x11a48>
   23194:	ldrd	r6, [r4]
   23198:	cmp	r5, #0
   2319c:	beq	23264 <__assert_fail@plt+0x11af4>
   231a0:	cmn	r7, #1
   231a4:	ble	231f0 <__assert_fail@plt+0x11a80>
   231a8:	asr	r3, r5, #31
   231ac:	mvn	r0, #0
   231b0:	mvn	r1, #-2147483648	; 0x80000000
   231b4:	b	231d8 <__assert_fail@plt+0x11a68>
   231b8:	ldrd	r6, [r4]
   231bc:	cmn	r7, #1
   231c0:	ble	23220 <__assert_fail@plt+0x11ab0>
   231c4:	cmn	r5, #1
   231c8:	beq	23264 <__assert_fail@plt+0x11af4>
   231cc:	asr	r3, r5, #31
   231d0:	mov	r0, #0
   231d4:	mov	r1, #-2147483648	; 0x80000000
   231d8:	mov	r2, r5
   231dc:	bl	23f00 <__assert_fail@plt+0x12790>
   231e0:	subs	r0, r0, r6
   231e4:	sbcs	r0, r1, r7
   231e8:	blt	23240 <__assert_fail@plt+0x11ad0>
   231ec:	b	23264 <__assert_fail@plt+0x11af4>
   231f0:	and	r0, r6, r7
   231f4:	cmn	r0, #1
   231f8:	beq	2325c <__assert_fail@plt+0x11aec>
   231fc:	mov	r0, #0
   23200:	mov	r1, #-2147483648	; 0x80000000
   23204:	mov	r2, r6
   23208:	mov	r3, r7
   2320c:	bl	23f00 <__assert_fail@plt+0x12790>
   23210:	subs	r0, r0, r5
   23214:	sbcs	r0, r1, r5, asr #31
   23218:	blt	23240 <__assert_fail@plt+0x11ad0>
   2321c:	b	23264 <__assert_fail@plt+0x11af4>
   23220:	asr	r3, r5, #31
   23224:	mvn	r0, #0
   23228:	mvn	r1, #-2147483648	; 0x80000000
   2322c:	mov	r2, r5
   23230:	bl	23f00 <__assert_fail@plt+0x12790>
   23234:	subs	r0, r6, r0
   23238:	sbcs	r0, r7, r1
   2323c:	bge	23264 <__assert_fail@plt+0x11af4>
   23240:	cmp	r7, #0
   23244:	mvn	r1, #-2147483648	; 0x80000000
   23248:	mvn	r2, #0
   2324c:	mov	r0, #1
   23250:	movmi	r1, #-2147483648	; 0x80000000
   23254:	movwmi	r2, #0
   23258:	b	23278 <__assert_fail@plt+0x11b08>
   2325c:	mvn	r6, #0
   23260:	mvn	r7, #0
   23264:	umull	r2, r0, r6, r5
   23268:	asr	r1, r5, #31
   2326c:	mla	r0, r6, r1, r0
   23270:	mla	r1, r7, r5, r0
   23274:	mov	r0, #0
   23278:	str	r2, [r4]
   2327c:	str	r1, [r4, #4]
   23280:	pop	{r4, r5, r6, r7, fp, pc}
   23284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23288:	add	fp, sp, #28
   2328c:	sub	sp, sp, #20
   23290:	cmp	r2, #37	; 0x25
   23294:	bcs	23920 <__assert_fail@plt+0x121b0>
   23298:	mov	r8, r3
   2329c:	mov	r5, r2
   232a0:	mov	r6, r1
   232a4:	mov	r4, r0
   232a8:	bl	1162c <__errno_location@plt>
   232ac:	mov	r7, r0
   232b0:	mov	r0, #0
   232b4:	str	r0, [r7]
   232b8:	bl	115f0 <__ctype_b_loc@plt>
   232bc:	ldr	r1, [r0]
   232c0:	mov	r2, r4
   232c4:	ldrb	r0, [r2], #1
   232c8:	add	r3, r1, r0, lsl #1
   232cc:	ldrb	r3, [r3, #1]
   232d0:	tst	r3, #32
   232d4:	bne	232c4 <__assert_fail@plt+0x11b54>
   232d8:	cmp	r6, #0
   232dc:	add	sl, sp, #16
   232e0:	movne	sl, r6
   232e4:	mov	r6, #4
   232e8:	cmp	r0, #45	; 0x2d
   232ec:	beq	23914 <__assert_fail@plt+0x121a4>
   232f0:	mov	r0, r4
   232f4:	mov	r1, sl
   232f8:	mov	r2, r5
   232fc:	str	r8, [sp, #12]
   23300:	bl	1168c <strtoumax@plt>
   23304:	ldr	r5, [sl]
   23308:	cmp	r5, r4
   2330c:	beq	23334 <__assert_fail@plt+0x11bc4>
   23310:	mov	r8, r0
   23314:	ldr	r0, [r7]
   23318:	mov	r9, r1
   2331c:	cmp	r0, #0
   23320:	beq	23368 <__assert_fail@plt+0x11bf8>
   23324:	cmp	r0, #34	; 0x22
   23328:	bne	23914 <__assert_fail@plt+0x121a4>
   2332c:	mov	r6, #1
   23330:	b	2336c <__assert_fail@plt+0x11bfc>
   23334:	ldr	r0, [fp, #8]
   23338:	cmp	r0, #0
   2333c:	beq	23914 <__assert_fail@plt+0x121a4>
   23340:	ldrb	r1, [r4]
   23344:	cmp	r1, #0
   23348:	beq	23914 <__assert_fail@plt+0x121a4>
   2334c:	bl	11620 <strchr@plt>
   23350:	cmp	r0, #0
   23354:	beq	23914 <__assert_fail@plt+0x121a4>
   23358:	mov	r6, #0
   2335c:	mov	r8, #1
   23360:	mov	r9, #0
   23364:	b	23378 <__assert_fail@plt+0x11c08>
   23368:	mov	r6, r0
   2336c:	ldr	r0, [fp, #8]
   23370:	cmp	r0, #0
   23374:	beq	2390c <__assert_fail@plt+0x1219c>
   23378:	ldrb	r7, [r5]
   2337c:	cmp	r7, #0
   23380:	beq	2390c <__assert_fail@plt+0x1219c>
   23384:	ldr	r0, [fp, #8]
   23388:	mov	r1, r7
   2338c:	bl	11620 <strchr@plt>
   23390:	cmp	r0, #0
   23394:	beq	2349c <__assert_fail@plt+0x11d2c>
   23398:	sub	r0, r7, #69	; 0x45
   2339c:	mov	r1, #1
   233a0:	mov	r3, #0
   233a4:	mov	r4, #1024	; 0x400
   233a8:	cmp	r0, #21
   233ac:	str	r1, [sp, #8]
   233b0:	bhi	233c8 <__assert_fail@plt+0x11c58>
   233b4:	movw	r2, #35141	; 0x8945
   233b8:	mov	r1, #1
   233bc:	movt	r2, #48	; 0x30
   233c0:	tst	r2, r1, lsl r0
   233c4:	bne	233e4 <__assert_fail@plt+0x11c74>
   233c8:	sub	r0, r7, #103	; 0x67
   233cc:	cmp	r0, #13
   233d0:	bhi	23418 <__assert_fail@plt+0x11ca8>
   233d4:	mov	r1, #1
   233d8:	movw	r2, #8273	; 0x2051
   233dc:	tst	r2, r1, lsl r0
   233e0:	beq	23418 <__assert_fail@plt+0x11ca8>
   233e4:	ldr	r0, [fp, #8]
   233e8:	mov	r1, #48	; 0x30
   233ec:	bl	11620 <strchr@plt>
   233f0:	cmp	r0, #0
   233f4:	beq	23414 <__assert_fail@plt+0x11ca4>
   233f8:	ldrb	r0, [r5, #1]
   233fc:	cmp	r0, #66	; 0x42
   23400:	cmpne	r0, #68	; 0x44
   23404:	bne	2352c <__assert_fail@plt+0x11dbc>
   23408:	mov	r4, #1000	; 0x3e8
   2340c:	mov	r0, #2
   23410:	str	r0, [sp, #8]
   23414:	mov	r3, #0
   23418:	cmp	r7, #89	; 0x59
   2341c:	stm	sp, {r5, r6}
   23420:	bgt	234a8 <__assert_fail@plt+0x11d38>
   23424:	sub	r0, r7, #66	; 0x42
   23428:	cmp	r0, #14
   2342c:	bhi	23550 <__assert_fail@plt+0x11de0>
   23430:	add	r1, pc, #0
   23434:	ldr	pc, [r1, r0, lsl #2]
   23438:	andeq	r3, r2, r4, ror r4
   2343c:	andeq	r3, r2, r0, lsl #16
   23440:	andeq	r3, r2, r0, lsl #16
   23444:	andeq	r3, r2, r4, lsl r8
   23448:	andeq	r3, r2, r0, lsl #16
   2344c:	andeq	r3, r2, r4, lsl #12
   23450:	andeq	r3, r2, r0, lsl #16
   23454:	andeq	r3, r2, r0, lsl #16
   23458:	andeq	r3, r2, r0, lsl #16
   2345c:	andeq	r3, r2, r0, ror r6
   23460:	andeq	r3, r2, r0, lsl #16
   23464:			; <UNDEFINED> instruction: 0x000236b4
   23468:	andeq	r3, r2, r0, lsl #16
   2346c:	andeq	r3, r2, r0, lsl #16
   23470:	andeq	r3, r2, r0, lsl #17
   23474:	mov	r1, #0
   23478:	lsl	r3, r9, #10
   2347c:	lsl	r0, r8, #10
   23480:	lsr	r2, r9, #22
   23484:	cmp	r1, r9, lsr #22
   23488:	orr	r3, r3, r8, lsr #22
   2348c:	mvnne	r0, #0
   23490:	movwne	r2, #1
   23494:	cmp	r1, r9, lsr #22
   23498:	b	2351c <__assert_fail@plt+0x11dac>
   2349c:	ldr	r0, [sp, #12]
   234a0:	orr	r6, r6, #2
   234a4:	b	23910 <__assert_fail@plt+0x121a0>
   234a8:	cmp	r7, #115	; 0x73
   234ac:	bgt	235cc <__assert_fail@plt+0x11e5c>
   234b0:	sub	r0, r7, #98	; 0x62
   234b4:	cmp	r0, #11
   234b8:	bhi	2378c <__assert_fail@plt+0x1201c>
   234bc:	add	r1, pc, #4
   234c0:	mov	r2, #0
   234c4:	ldr	pc, [r1, r0, lsl #2]
   234c8:	strdeq	r3, [r2], -r8
   234cc:	andeq	r3, r2, r8, ror #17
   234d0:	andeq	r3, r2, r0, lsl #16
   234d4:	andeq	r3, r2, r0, lsl #16
   234d8:	andeq	r3, r2, r0, lsl #16
   234dc:	andeq	r3, r2, r4, lsl #12
   234e0:	andeq	r3, r2, r0, lsl #16
   234e4:	andeq	r3, r2, r0, lsl #16
   234e8:	andeq	r3, r2, r0, lsl #16
   234ec:	andeq	r3, r2, r0, ror r6
   234f0:	andeq	r3, r2, r0, lsl #16
   234f4:			; <UNDEFINED> instruction: 0x000236b4
   234f8:	mov	r1, #0
   234fc:	lsl	r3, r9, #9
   23500:	lsl	r0, r8, #9
   23504:	lsr	r2, r9, #23
   23508:	cmp	r1, r9, lsr #23
   2350c:	orr	r3, r3, r8, lsr #23
   23510:	mvnne	r0, #0
   23514:	movwne	r2, #1
   23518:	cmp	r1, r9, lsr #23
   2351c:	mvnne	r3, #0
   23520:	mov	r8, r0
   23524:	mov	r9, r3
   23528:	b	238e8 <__assert_fail@plt+0x12178>
   2352c:	cmp	r0, #105	; 0x69
   23530:	mov	r3, #0
   23534:	bne	23418 <__assert_fail@plt+0x11ca8>
   23538:	ldrb	r0, [r5, #2]
   2353c:	mov	r1, #1
   23540:	cmp	r0, #66	; 0x42
   23544:	movweq	r1, #3
   23548:	str	r1, [sp, #8]
   2354c:	b	23418 <__assert_fail@plt+0x11ca8>
   23550:	cmp	r7, #84	; 0x54
   23554:	beq	23720 <__assert_fail@plt+0x11fb0>
   23558:	cmp	r7, #89	; 0x59
   2355c:	bne	23800 <__assert_fail@plt+0x12090>
   23560:	mvn	r0, #0
   23564:	mvn	r1, #0
   23568:	mov	r2, r4
   2356c:	mov	r5, r3
   23570:	bl	23fd4 <__assert_fail@plt+0x12864>
   23574:	mov	ip, r5
   23578:	mvn	lr, #0
   2357c:	mov	r2, #0
   23580:	mvn	r3, #7
   23584:	mov	r5, r8
   23588:	mov	r7, r9
   2358c:	umull	r8, r6, r5, r4
   23590:	mvn	r9, #0
   23594:	mla	r6, r5, ip, r6
   23598:	subs	r5, r0, r5
   2359c:	sbcs	r5, r1, r7
   235a0:	mov	r5, #0
   235a4:	movwcc	r5, #1
   235a8:	cmp	r5, #0
   235ac:	mlaeq	r9, r7, r4, r6
   235b0:	movne	r8, lr
   235b4:	orrne	r2, r2, #1
   235b8:	adds	r3, r3, #1
   235bc:	mov	r5, r8
   235c0:	mov	r7, r9
   235c4:	bcc	2358c <__assert_fail@plt+0x11e1c>
   235c8:	b	238e8 <__assert_fail@plt+0x12178>
   235cc:	cmp	r7, #116	; 0x74
   235d0:	beq	23720 <__assert_fail@plt+0x11fb0>
   235d4:	cmp	r7, #119	; 0x77
   235d8:	bne	23800 <__assert_fail@plt+0x12090>
   235dc:	lsl	r1, r9, #1
   235e0:	cmp	r9, #0
   235e4:	lsl	r0, r8, #1
   235e8:	lsr	r2, r9, #31
   235ec:	orr	r1, r1, r8, lsr #31
   235f0:	mvnmi	r0, #0
   235f4:	mvnmi	r1, #0
   235f8:	mov	r8, r0
   235fc:	mov	r9, r1
   23600:	b	238e8 <__assert_fail@plt+0x12178>
   23604:	mvn	r0, #0
   23608:	mvn	r1, #0
   2360c:	mov	r2, r4
   23610:	mov	r5, r3
   23614:	bl	23fd4 <__assert_fail@plt+0x12864>
   23618:	mov	ip, r5
   2361c:	mvn	lr, #0
   23620:	mov	r2, #0
   23624:	mvn	r3, #2
   23628:	mov	r6, r8
   2362c:	mov	r5, r9
   23630:	umull	r8, r7, r6, r4
   23634:	mvn	r9, #0
   23638:	mla	r7, r6, ip, r7
   2363c:	subs	r6, r0, r6
   23640:	sbcs	r6, r1, r5
   23644:	mov	r6, #0
   23648:	movwcc	r6, #1
   2364c:	cmp	r6, #0
   23650:	mlaeq	r9, r5, r4, r7
   23654:	movne	r8, lr
   23658:	orrne	r2, r2, #1
   2365c:	adds	r3, r3, #1
   23660:	mov	r6, r8
   23664:	mov	r5, r9
   23668:	bcc	23630 <__assert_fail@plt+0x11ec0>
   2366c:	b	238e8 <__assert_fail@plt+0x12178>
   23670:	mvn	r0, #0
   23674:	mvn	r1, #0
   23678:	mov	r2, r4
   2367c:	mov	r5, r3
   23680:	bl	23fd4 <__assert_fail@plt+0x12864>
   23684:	subs	r0, r0, r8
   23688:	mov	r2, #0
   2368c:	sbcs	r0, r1, r9
   23690:	umull	r0, r1, r8, r4
   23694:	movwcc	r2, #1
   23698:	cmp	r2, #0
   2369c:	mla	r1, r8, r5, r1
   236a0:	mvnne	r0, #0
   236a4:	mla	r9, r9, r4, r1
   236a8:	mvnne	r9, #0
   236ac:	mov	r8, r0
   236b0:	b	238e8 <__assert_fail@plt+0x12178>
   236b4:	mvn	r0, #0
   236b8:	mvn	r1, #0
   236bc:	mov	r2, r4
   236c0:	mov	r5, r3
   236c4:	bl	23fd4 <__assert_fail@plt+0x12864>
   236c8:	mov	ip, r5
   236cc:	mvn	lr, #0
   236d0:	mov	r2, #0
   236d4:	mvn	r3, #1
   236d8:	mov	r6, r8
   236dc:	mov	r5, r9
   236e0:	umull	r8, r7, r6, r4
   236e4:	mvn	r9, #0
   236e8:	mla	r7, r6, ip, r7
   236ec:	subs	r6, r0, r6
   236f0:	sbcs	r6, r1, r5
   236f4:	mov	r6, #0
   236f8:	movwcc	r6, #1
   236fc:	cmp	r6, #0
   23700:	mlaeq	r9, r5, r4, r7
   23704:	movne	r8, lr
   23708:	orrne	r2, r2, #1
   2370c:	adds	r3, r3, #1
   23710:	mov	r6, r8
   23714:	mov	r5, r9
   23718:	bcc	236e0 <__assert_fail@plt+0x11f70>
   2371c:	b	238e8 <__assert_fail@plt+0x12178>
   23720:	mvn	r0, #0
   23724:	mvn	r1, #0
   23728:	mov	r2, r4
   2372c:	mov	r5, r3
   23730:	bl	23fd4 <__assert_fail@plt+0x12864>
   23734:	mov	ip, r5
   23738:	mvn	lr, #0
   2373c:	mov	r2, #0
   23740:	mvn	r3, #3
   23744:	mov	r6, r8
   23748:	mov	r5, r9
   2374c:	umull	r8, r7, r6, r4
   23750:	mvn	r9, #0
   23754:	mla	r7, r6, ip, r7
   23758:	subs	r6, r0, r6
   2375c:	sbcs	r6, r1, r5
   23760:	mov	r6, #0
   23764:	movwcc	r6, #1
   23768:	cmp	r6, #0
   2376c:	mlaeq	r9, r5, r4, r7
   23770:	movne	r8, lr
   23774:	orrne	r2, r2, #1
   23778:	adds	r3, r3, #1
   2377c:	mov	r6, r8
   23780:	mov	r5, r9
   23784:	bcc	2374c <__assert_fail@plt+0x11fdc>
   23788:	b	238e8 <__assert_fail@plt+0x12178>
   2378c:	cmp	r7, #90	; 0x5a
   23790:	bne	23800 <__assert_fail@plt+0x12090>
   23794:	mvn	r0, #0
   23798:	mvn	r1, #0
   2379c:	mov	r2, r4
   237a0:	mov	r5, r3
   237a4:	bl	23fd4 <__assert_fail@plt+0x12864>
   237a8:	mov	ip, r5
   237ac:	mvn	lr, #0
   237b0:	mov	r2, #0
   237b4:	mvn	r3, #6
   237b8:	mov	r5, r8
   237bc:	mov	r7, r9
   237c0:	umull	r8, r6, r5, r4
   237c4:	mvn	r9, #0
   237c8:	mla	r6, r5, ip, r6
   237cc:	subs	r5, r0, r5
   237d0:	sbcs	r5, r1, r7
   237d4:	mov	r5, #0
   237d8:	movwcc	r5, #1
   237dc:	cmp	r5, #0
   237e0:	mlaeq	r9, r7, r4, r6
   237e4:	movne	r8, lr
   237e8:	orrne	r2, r2, #1
   237ec:	adds	r3, r3, #1
   237f0:	mov	r5, r8
   237f4:	mov	r7, r9
   237f8:	bcc	237c0 <__assert_fail@plt+0x12050>
   237fc:	b	238e8 <__assert_fail@plt+0x12178>
   23800:	ldr	r0, [sp, #12]
   23804:	strd	r8, [r0]
   23808:	ldr	r6, [sp, #4]
   2380c:	orr	r6, r6, #2
   23810:	b	23914 <__assert_fail@plt+0x121a4>
   23814:	mvn	r0, #0
   23818:	mvn	r1, #0
   2381c:	mov	r2, r4
   23820:	mov	r5, r3
   23824:	bl	23fd4 <__assert_fail@plt+0x12864>
   23828:	mov	ip, r5
   2382c:	mvn	lr, #0
   23830:	mov	r2, #0
   23834:	mvn	r3, #5
   23838:	mov	r5, r8
   2383c:	mov	r7, r9
   23840:	umull	r8, r6, r5, r4
   23844:	mvn	r9, #0
   23848:	mla	r6, r5, ip, r6
   2384c:	subs	r5, r0, r5
   23850:	sbcs	r5, r1, r7
   23854:	mov	r5, #0
   23858:	movwcc	r5, #1
   2385c:	cmp	r5, #0
   23860:	mlaeq	r9, r7, r4, r6
   23864:	movne	r8, lr
   23868:	orrne	r2, r2, #1
   2386c:	adds	r3, r3, #1
   23870:	mov	r5, r8
   23874:	mov	r7, r9
   23878:	bcc	23840 <__assert_fail@plt+0x120d0>
   2387c:	b	238e8 <__assert_fail@plt+0x12178>
   23880:	mvn	r0, #0
   23884:	mvn	r1, #0
   23888:	mov	r2, r4
   2388c:	mov	r5, r3
   23890:	bl	23fd4 <__assert_fail@plt+0x12864>
   23894:	mov	ip, r5
   23898:	mvn	lr, #0
   2389c:	mov	r2, #0
   238a0:	mvn	r3, #4
   238a4:	mov	r5, r8
   238a8:	mov	r7, r9
   238ac:	umull	r8, r6, r5, r4
   238b0:	mvn	r9, #0
   238b4:	mla	r6, r5, ip, r6
   238b8:	subs	r5, r0, r5
   238bc:	sbcs	r5, r1, r7
   238c0:	mov	r5, #0
   238c4:	movwcc	r5, #1
   238c8:	cmp	r5, #0
   238cc:	mlaeq	r9, r7, r4, r6
   238d0:	movne	r8, lr
   238d4:	orrne	r2, r2, #1
   238d8:	adds	r3, r3, #1
   238dc:	mov	r5, r8
   238e0:	mov	r7, r9
   238e4:	bcc	238ac <__assert_fail@plt+0x1213c>
   238e8:	ldr	r1, [sp]
   238ec:	ldr	r3, [sp, #8]
   238f0:	ldr	r6, [sp, #4]
   238f4:	add	r0, r1, r3
   238f8:	orr	r6, r2, r6
   238fc:	str	r0, [sl]
   23900:	ldrb	r0, [r1, r3]
   23904:	cmp	r0, #0
   23908:	orrne	r6, r6, #2
   2390c:	ldr	r0, [sp, #12]
   23910:	strd	r8, [r0]
   23914:	mov	r0, r6
   23918:	sub	sp, fp, #28
   2391c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23920:	movw	r0, #21537	; 0x5421
   23924:	movw	r1, #21575	; 0x5447
   23928:	movw	r3, #21669	; 0x54a5
   2392c:	mov	r2, #85	; 0x55
   23930:	movt	r0, #2
   23934:	movt	r1, #2
   23938:	movt	r3, #2
   2393c:	bl	11770 <__assert_fail@plt>
   23940:	clz	r2, r1
   23944:	clz	r3, r0
   23948:	lsr	r2, r2, #5
   2394c:	lsr	r3, r3, #5
   23950:	orrs	r2, r3, r2
   23954:	movwne	r1, #1
   23958:	movwne	r0, #1
   2395c:	cmp	r1, #0
   23960:	beq	23990 <__assert_fail@plt+0x12220>
   23964:	mvn	r2, #-2147483648	; 0x80000000
   23968:	udiv	r2, r2, r1
   2396c:	cmp	r2, r0
   23970:	bcs	23990 <__assert_fail@plt+0x12220>
   23974:	push	{fp, lr}
   23978:	mov	fp, sp
   2397c:	bl	1162c <__errno_location@plt>
   23980:	mov	r1, #12
   23984:	str	r1, [r0]
   23988:	mov	r0, #0
   2398c:	pop	{fp, pc}
   23990:	b	113d4 <calloc@plt>
   23994:	cmp	r0, #0
   23998:	movweq	r0, #1
   2399c:	cmn	r0, #1
   239a0:	ble	239a8 <__assert_fail@plt+0x12238>
   239a4:	b	115a8 <malloc@plt>
   239a8:	push	{fp, lr}
   239ac:	mov	fp, sp
   239b0:	bl	1162c <__errno_location@plt>
   239b4:	mov	r1, #12
   239b8:	str	r1, [r0]
   239bc:	mov	r0, #0
   239c0:	pop	{fp, pc}
   239c4:	push	{fp, lr}
   239c8:	mov	fp, sp
   239cc:	cmp	r0, #0
   239d0:	beq	239ec <__assert_fail@plt+0x1227c>
   239d4:	cmp	r1, #0
   239d8:	beq	239f8 <__assert_fail@plt+0x12288>
   239dc:	cmn	r1, #1
   239e0:	ble	23a00 <__assert_fail@plt+0x12290>
   239e4:	pop	{fp, lr}
   239e8:	b	11500 <realloc@plt>
   239ec:	mov	r0, r1
   239f0:	pop	{fp, lr}
   239f4:	b	23994 <__assert_fail@plt+0x12224>
   239f8:	bl	13bd0 <__assert_fail@plt+0x2460>
   239fc:	b	23a0c <__assert_fail@plt+0x1229c>
   23a00:	bl	1162c <__errno_location@plt>
   23a04:	mov	r1, #12
   23a08:	str	r1, [r0]
   23a0c:	mov	r0, #0
   23a10:	pop	{fp, pc}
   23a14:	push	{r4, r5, r6, sl, fp, lr}
   23a18:	add	fp, sp, #16
   23a1c:	mov	r4, r0
   23a20:	bl	1156c <__fpending@plt>
   23a24:	mov	r5, r0
   23a28:	mov	r0, r4
   23a2c:	bl	11578 <ferror_unlocked@plt>
   23a30:	mov	r6, r0
   23a34:	mov	r0, r4
   23a38:	bl	139c4 <__assert_fail@plt+0x2254>
   23a3c:	cmp	r6, #0
   23a40:	beq	23a60 <__assert_fail@plt+0x122f0>
   23a44:	mvn	r4, #0
   23a48:	cmp	r0, #0
   23a4c:	bne	23a8c <__assert_fail@plt+0x1231c>
   23a50:	bl	1162c <__errno_location@plt>
   23a54:	mov	r1, #0
   23a58:	str	r1, [r0]
   23a5c:	b	23a8c <__assert_fail@plt+0x1231c>
   23a60:	cmp	r0, #0
   23a64:	mov	r4, r0
   23a68:	mvnne	r4, #0
   23a6c:	cmp	r5, #0
   23a70:	bne	23a8c <__assert_fail@plt+0x1231c>
   23a74:	cmp	r0, #0
   23a78:	beq	23a8c <__assert_fail@plt+0x1231c>
   23a7c:	bl	1162c <__errno_location@plt>
   23a80:	ldr	r0, [r0]
   23a84:	subs	r4, r0, #9
   23a88:	mvnne	r4, #0
   23a8c:	mov	r0, r4
   23a90:	pop	{r4, r5, r6, sl, fp, pc}
   23a94:	push	{r4, r5, r6, r7, fp, lr}
   23a98:	add	fp, sp, #16
   23a9c:	mov	r4, r0
   23aa0:	ldr	r0, [r0, #4]
   23aa4:	mov	r5, r1
   23aa8:	cmp	r0, r1
   23aac:	bcs	23adc <__assert_fail@plt+0x1236c>
   23ab0:	mov	r6, r3
   23ab4:	cmp	r3, #0
   23ab8:	beq	23ae4 <__assert_fail@plt+0x12374>
   23abc:	mvn	r0, #0
   23ac0:	udiv	r0, r0, r6
   23ac4:	cmp	r0, r5
   23ac8:	bcs	23ae4 <__assert_fail@plt+0x12374>
   23acc:	bl	1162c <__errno_location@plt>
   23ad0:	mov	r1, #12
   23ad4:	str	r1, [r0]
   23ad8:	b	23b48 <__assert_fail@plt+0x123d8>
   23adc:	str	r5, [r4]
   23ae0:	b	23b40 <__assert_fail@plt+0x123d0>
   23ae4:	ldr	r0, [r4, #8]
   23ae8:	mul	r1, r6, r5
   23aec:	cmp	r0, r2
   23af0:	beq	23b08 <__assert_fail@plt+0x12398>
   23af4:	bl	239c4 <__assert_fail@plt+0x12254>
   23af8:	mov	r7, r0
   23afc:	cmp	r0, #0
   23b00:	bne	23b38 <__assert_fail@plt+0x123c8>
   23b04:	b	23b48 <__assert_fail@plt+0x123d8>
   23b08:	mov	r0, r1
   23b0c:	bl	23994 <__assert_fail@plt+0x12224>
   23b10:	cmp	r0, #0
   23b14:	beq	23b48 <__assert_fail@plt+0x123d8>
   23b18:	ldr	r1, [r4, #8]
   23b1c:	mov	r7, r0
   23b20:	cmp	r1, #0
   23b24:	beq	23b38 <__assert_fail@plt+0x123c8>
   23b28:	ldr	r0, [r4]
   23b2c:	mul	r2, r0, r6
   23b30:	mov	r0, r7
   23b34:	bl	11488 <memcpy@plt>
   23b38:	str	r5, [r4]
   23b3c:	stmib	r4, {r5, r7}
   23b40:	mov	r0, #1
   23b44:	pop	{r4, r5, r6, r7, fp, pc}
   23b48:	mov	r0, #0
   23b4c:	pop	{r4, r5, r6, r7, fp, pc}
   23b50:	sub	sp, sp, #8
   23b54:	push	{r4, r5, r6, r7, fp, lr}
   23b58:	add	fp, sp, #16
   23b5c:	sub	sp, sp, #8
   23b60:	mov	r5, r0
   23b64:	add	r0, fp, #8
   23b68:	cmp	r1, #11
   23b6c:	str	r2, [fp, #8]
   23b70:	str	r3, [fp, #12]
   23b74:	str	r0, [sp, #4]
   23b78:	bhi	23bb4 <__assert_fail@plt+0x12444>
   23b7c:	mov	r0, #1
   23b80:	movw	r2, #1300	; 0x514
   23b84:	tst	r2, r0, lsl r1
   23b88:	bne	23c6c <__assert_fail@plt+0x124fc>
   23b8c:	movw	r2, #2570	; 0xa0a
   23b90:	tst	r2, r0, lsl r1
   23b94:	bne	23bdc <__assert_fail@plt+0x1246c>
   23b98:	cmp	r1, #0
   23b9c:	bne	23bb4 <__assert_fail@plt+0x12444>
   23ba0:	ldr	r0, [sp, #4]
   23ba4:	add	r1, r0, #4
   23ba8:	str	r1, [sp, #4]
   23bac:	mov	r1, #0
   23bb0:	b	23c78 <__assert_fail@plt+0x12508>
   23bb4:	sub	r0, r1, #1024	; 0x400
   23bb8:	cmp	r0, #10
   23bbc:	bhi	23c6c <__assert_fail@plt+0x124fc>
   23bc0:	mov	r2, #1
   23bc4:	movw	r3, #645	; 0x285
   23bc8:	tst	r3, r2, lsl r0
   23bcc:	bne	23c6c <__assert_fail@plt+0x124fc>
   23bd0:	movw	r3, #1282	; 0x502
   23bd4:	tst	r3, r2, lsl r0
   23bd8:	beq	23be8 <__assert_fail@plt+0x12478>
   23bdc:	mov	r0, r5
   23be0:	bl	116c8 <fcntl64@plt>
   23be4:	b	23c84 <__assert_fail@plt+0x12514>
   23be8:	cmp	r0, #6
   23bec:	bne	23c6c <__assert_fail@plt+0x124fc>
   23bf0:	ldr	r0, [sp, #4]
   23bf4:	movw	r7, #25584	; 0x63f0
   23bf8:	movt	r7, #3
   23bfc:	add	r1, r0, #4
   23c00:	str	r1, [sp, #4]
   23c04:	ldr	r6, [r0]
   23c08:	ldr	r0, [r7]
   23c0c:	cmp	r0, #0
   23c10:	bmi	23ca8 <__assert_fail@plt+0x12538>
   23c14:	mov	r0, r5
   23c18:	movw	r1, #1030	; 0x406
   23c1c:	mov	r2, r6
   23c20:	bl	116c8 <fcntl64@plt>
   23c24:	mov	r4, r0
   23c28:	cmn	r0, #1
   23c2c:	bgt	23c9c <__assert_fail@plt+0x1252c>
   23c30:	bl	1162c <__errno_location@plt>
   23c34:	ldr	r0, [r0]
   23c38:	cmp	r0, #22
   23c3c:	bne	23c9c <__assert_fail@plt+0x1252c>
   23c40:	mov	r0, r5
   23c44:	mov	r1, #0
   23c48:	mov	r2, r6
   23c4c:	bl	116c8 <fcntl64@plt>
   23c50:	mov	r4, r0
   23c54:	cmp	r0, #0
   23c58:	bmi	23c88 <__assert_fail@plt+0x12518>
   23c5c:	mvn	r0, #0
   23c60:	str	r0, [r7]
   23c64:	mov	r0, #1
   23c68:	b	23ccc <__assert_fail@plt+0x1255c>
   23c6c:	ldr	r0, [sp, #4]
   23c70:	add	r2, r0, #4
   23c74:	str	r2, [sp, #4]
   23c78:	ldr	r2, [r0]
   23c7c:	mov	r0, r5
   23c80:	bl	116c8 <fcntl64@plt>
   23c84:	mov	r4, r0
   23c88:	mov	r0, r4
   23c8c:	sub	sp, fp, #16
   23c90:	pop	{r4, r5, r6, r7, fp, lr}
   23c94:	add	sp, sp, #8
   23c98:	bx	lr
   23c9c:	mov	r0, #1
   23ca0:	str	r0, [r7]
   23ca4:	b	23c88 <__assert_fail@plt+0x12518>
   23ca8:	mov	r0, r5
   23cac:	mov	r1, #0
   23cb0:	mov	r2, r6
   23cb4:	bl	116c8 <fcntl64@plt>
   23cb8:	mov	r4, r0
   23cbc:	ldr	r0, [r7]
   23cc0:	add	r0, r0, #1
   23cc4:	clz	r0, r0
   23cc8:	lsr	r0, r0, #5
   23ccc:	cmp	r0, #0
   23cd0:	beq	23c88 <__assert_fail@plt+0x12518>
   23cd4:	cmp	r4, #0
   23cd8:	bmi	23c88 <__assert_fail@plt+0x12518>
   23cdc:	mov	r0, r4
   23ce0:	mov	r1, #1
   23ce4:	bl	116c8 <fcntl64@plt>
   23ce8:	cmp	r0, #0
   23cec:	bmi	23d08 <__assert_fail@plt+0x12598>
   23cf0:	orr	r2, r0, #1
   23cf4:	mov	r0, r4
   23cf8:	mov	r1, #2
   23cfc:	bl	116c8 <fcntl64@plt>
   23d00:	cmn	r0, #1
   23d04:	bne	23c88 <__assert_fail@plt+0x12518>
   23d08:	bl	1162c <__errno_location@plt>
   23d0c:	ldr	r6, [r0]
   23d10:	mov	r5, r0
   23d14:	mov	r0, r4
   23d18:	bl	11758 <close@plt>
   23d1c:	str	r6, [r5]
   23d20:	mvn	r4, #0
   23d24:	b	23c88 <__assert_fail@plt+0x12518>
   23d28:	push	{fp, lr}
   23d2c:	mov	fp, sp
   23d30:	mov	r0, #14
   23d34:	bl	11704 <nl_langinfo@plt>
   23d38:	movw	r1, #18259	; 0x4753
   23d3c:	cmp	r0, #0
   23d40:	movt	r1, #2
   23d44:	movne	r1, r0
   23d48:	movw	r0, #21748	; 0x54f4
   23d4c:	ldrb	r2, [r1]
   23d50:	movt	r0, #2
   23d54:	cmp	r2, #0
   23d58:	movne	r0, r1
   23d5c:	pop	{fp, pc}
   23d60:	push	{r4, r5, r6, r7, fp, lr}
   23d64:	add	fp, sp, #16
   23d68:	sub	sp, sp, #8
   23d6c:	cmp	r0, #0
   23d70:	add	r5, sp, #4
   23d74:	mov	r7, r2
   23d78:	mov	r4, r1
   23d7c:	movne	r5, r0
   23d80:	mov	r0, r5
   23d84:	bl	11584 <mbrtowc@plt>
   23d88:	mov	r6, r0
   23d8c:	cmp	r7, #0
   23d90:	beq	23db8 <__assert_fail@plt+0x12648>
   23d94:	cmn	r6, #2
   23d98:	bcc	23db8 <__assert_fail@plt+0x12648>
   23d9c:	mov	r0, #0
   23da0:	bl	23e00 <__assert_fail@plt+0x12690>
   23da4:	cmp	r0, #0
   23da8:	bne	23db8 <__assert_fail@plt+0x12648>
   23dac:	ldrb	r0, [r4]
   23db0:	mov	r6, #1
   23db4:	str	r0, [r5]
   23db8:	mov	r0, r6
   23dbc:	sub	sp, fp, #16
   23dc0:	pop	{r4, r5, r6, r7, fp, pc}
   23dc4:	cmp	r2, #0
   23dc8:	beq	23df8 <__assert_fail@plt+0x12688>
   23dcc:	mvn	r3, #0
   23dd0:	udiv	r3, r3, r2
   23dd4:	cmp	r3, r1
   23dd8:	bcs	23df8 <__assert_fail@plt+0x12688>
   23ddc:	push	{fp, lr}
   23de0:	mov	fp, sp
   23de4:	bl	1162c <__errno_location@plt>
   23de8:	mov	r1, #12
   23dec:	str	r1, [r0]
   23df0:	mov	r0, #0
   23df4:	pop	{fp, pc}
   23df8:	mul	r1, r2, r1
   23dfc:	b	239c4 <__assert_fail@plt+0x12254>
   23e00:	push	{r4, sl, fp, lr}
   23e04:	add	fp, sp, #8
   23e08:	sub	sp, sp, #264	; 0x108
   23e0c:	add	r1, sp, #7
   23e10:	movw	r2, #257	; 0x101
   23e14:	bl	23e6c <__assert_fail@plt+0x126fc>
   23e18:	mov	r4, #0
   23e1c:	cmp	r0, #0
   23e20:	bne	23e60 <__assert_fail@plt+0x126f0>
   23e24:	movw	r1, #21754	; 0x54fa
   23e28:	add	r0, sp, #7
   23e2c:	mov	r2, #2
   23e30:	movt	r1, #2
   23e34:	bl	11608 <bcmp@plt>
   23e38:	cmp	r0, #0
   23e3c:	beq	23e60 <__assert_fail@plt+0x126f0>
   23e40:	movw	r1, #21756	; 0x54fc
   23e44:	add	r0, sp, #7
   23e48:	mov	r2, #6
   23e4c:	movt	r1, #2
   23e50:	bl	11608 <bcmp@plt>
   23e54:	cmp	r0, #0
   23e58:	mov	r4, r0
   23e5c:	movwne	r4, #1
   23e60:	mov	r0, r4
   23e64:	sub	sp, fp, #8
   23e68:	pop	{r4, sl, fp, pc}
   23e6c:	push	{r4, r5, r6, r7, fp, lr}
   23e70:	add	fp, sp, #16
   23e74:	mov	r4, r1
   23e78:	mov	r1, #0
   23e7c:	mov	r6, r2
   23e80:	bl	116d4 <setlocale@plt>
   23e84:	cmp	r0, #0
   23e88:	beq	23eb4 <__assert_fail@plt+0x12744>
   23e8c:	mov	r7, r0
   23e90:	bl	11614 <strlen@plt>
   23e94:	cmp	r0, r6
   23e98:	bcs	23ec8 <__assert_fail@plt+0x12758>
   23e9c:	add	r2, r0, #1
   23ea0:	mov	r0, r4
   23ea4:	mov	r1, r7
   23ea8:	bl	11488 <memcpy@plt>
   23eac:	mov	r5, #0
   23eb0:	b	23ef0 <__assert_fail@plt+0x12780>
   23eb4:	cmp	r6, #0
   23eb8:	mov	r5, #22
   23ebc:	movne	r0, #0
   23ec0:	strbne	r0, [r4]
   23ec4:	b	23ef0 <__assert_fail@plt+0x12780>
   23ec8:	mov	r5, #34	; 0x22
   23ecc:	cmp	r6, #0
   23ed0:	beq	23ef0 <__assert_fail@plt+0x12780>
   23ed4:	sub	r6, r6, #1
   23ed8:	mov	r0, r4
   23edc:	mov	r1, r7
   23ee0:	mov	r2, r6
   23ee4:	bl	11488 <memcpy@plt>
   23ee8:	mov	r0, #0
   23eec:	strb	r0, [r4, r6]
   23ef0:	mov	r0, r5
   23ef4:	pop	{r4, r5, r6, r7, fp, pc}
   23ef8:	mov	r1, #0
   23efc:	b	116d4 <setlocale@plt>
   23f00:	cmp	r3, #0
   23f04:	cmpeq	r2, #0
   23f08:	bne	23f2c <__assert_fail@plt+0x127bc>
   23f0c:	cmp	r1, #0
   23f10:	movlt	r1, #-2147483648	; 0x80000000
   23f14:	movlt	r0, #0
   23f18:	blt	23f28 <__assert_fail@plt+0x127b8>
   23f1c:	cmpeq	r0, #0
   23f20:	mvnne	r1, #-2147483648	; 0x80000000
   23f24:	mvnne	r0, #0
   23f28:	b	24010 <__assert_fail@plt+0x128a0>
   23f2c:	sub	sp, sp, #8
   23f30:	push	{sp, lr}
   23f34:	cmp	r1, #0
   23f38:	blt	23f58 <__assert_fail@plt+0x127e8>
   23f3c:	cmp	r3, #0
   23f40:	blt	23f8c <__assert_fail@plt+0x1281c>
   23f44:	bl	24020 <__assert_fail@plt+0x128b0>
   23f48:	ldr	lr, [sp, #4]
   23f4c:	add	sp, sp, #8
   23f50:	pop	{r2, r3}
   23f54:	bx	lr
   23f58:	rsbs	r0, r0, #0
   23f5c:	sbc	r1, r1, r1, lsl #1
   23f60:	cmp	r3, #0
   23f64:	blt	23fb0 <__assert_fail@plt+0x12840>
   23f68:	bl	24020 <__assert_fail@plt+0x128b0>
   23f6c:	ldr	lr, [sp, #4]
   23f70:	add	sp, sp, #8
   23f74:	pop	{r2, r3}
   23f78:	rsbs	r0, r0, #0
   23f7c:	sbc	r1, r1, r1, lsl #1
   23f80:	rsbs	r2, r2, #0
   23f84:	sbc	r3, r3, r3, lsl #1
   23f88:	bx	lr
   23f8c:	rsbs	r2, r2, #0
   23f90:	sbc	r3, r3, r3, lsl #1
   23f94:	bl	24020 <__assert_fail@plt+0x128b0>
   23f98:	ldr	lr, [sp, #4]
   23f9c:	add	sp, sp, #8
   23fa0:	pop	{r2, r3}
   23fa4:	rsbs	r0, r0, #0
   23fa8:	sbc	r1, r1, r1, lsl #1
   23fac:	bx	lr
   23fb0:	rsbs	r2, r2, #0
   23fb4:	sbc	r3, r3, r3, lsl #1
   23fb8:	bl	24020 <__assert_fail@plt+0x128b0>
   23fbc:	ldr	lr, [sp, #4]
   23fc0:	add	sp, sp, #8
   23fc4:	pop	{r2, r3}
   23fc8:	rsbs	r2, r2, #0
   23fcc:	sbc	r3, r3, r3, lsl #1
   23fd0:	bx	lr
   23fd4:	cmp	r3, #0
   23fd8:	cmpeq	r2, #0
   23fdc:	bne	23ff4 <__assert_fail@plt+0x12884>
   23fe0:	cmp	r1, #0
   23fe4:	cmpeq	r0, #0
   23fe8:	mvnne	r1, #0
   23fec:	mvnne	r0, #0
   23ff0:	b	24010 <__assert_fail@plt+0x128a0>
   23ff4:	sub	sp, sp, #8
   23ff8:	push	{sp, lr}
   23ffc:	bl	24020 <__assert_fail@plt+0x128b0>
   24000:	ldr	lr, [sp, #4]
   24004:	add	sp, sp, #8
   24008:	pop	{r2, r3}
   2400c:	bx	lr
   24010:	push	{r1, lr}
   24014:	mov	r0, #8
   24018:	bl	113f8 <raise@plt>
   2401c:	pop	{r1, pc}
   24020:	cmp	r1, r3
   24024:	cmpeq	r0, r2
   24028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2402c:	mov	r4, r0
   24030:	movcc	r0, #0
   24034:	mov	r5, r1
   24038:	ldr	lr, [sp, #36]	; 0x24
   2403c:	movcc	r1, r0
   24040:	bcc	2413c <__assert_fail@plt+0x129cc>
   24044:	cmp	r3, #0
   24048:	clzeq	ip, r2
   2404c:	clzne	ip, r3
   24050:	addeq	ip, ip, #32
   24054:	cmp	r5, #0
   24058:	clzeq	r1, r4
   2405c:	addeq	r1, r1, #32
   24060:	clzne	r1, r5
   24064:	sub	ip, ip, r1
   24068:	sub	sl, ip, #32
   2406c:	lsl	r9, r3, ip
   24070:	rsb	fp, ip, #32
   24074:	orr	r9, r9, r2, lsl sl
   24078:	orr	r9, r9, r2, lsr fp
   2407c:	lsl	r8, r2, ip
   24080:	cmp	r5, r9
   24084:	cmpeq	r4, r8
   24088:	movcc	r0, #0
   2408c:	movcc	r1, r0
   24090:	bcc	240ac <__assert_fail@plt+0x1293c>
   24094:	mov	r0, #1
   24098:	subs	r4, r4, r8
   2409c:	lsl	r1, r0, sl
   240a0:	orr	r1, r1, r0, lsr fp
   240a4:	lsl	r0, r0, ip
   240a8:	sbc	r5, r5, r9
   240ac:	cmp	ip, #0
   240b0:	beq	2413c <__assert_fail@plt+0x129cc>
   240b4:	lsr	r6, r8, #1
   240b8:	orr	r6, r6, r9, lsl #31
   240bc:	lsr	r7, r9, #1
   240c0:	mov	r2, ip
   240c4:	b	240e8 <__assert_fail@plt+0x12978>
   240c8:	subs	r3, r4, r6
   240cc:	sbc	r8, r5, r7
   240d0:	adds	r3, r3, r3
   240d4:	adc	r8, r8, r8
   240d8:	adds	r4, r3, #1
   240dc:	adc	r5, r8, #0
   240e0:	subs	r2, r2, #1
   240e4:	beq	24104 <__assert_fail@plt+0x12994>
   240e8:	cmp	r5, r7
   240ec:	cmpeq	r4, r6
   240f0:	bcs	240c8 <__assert_fail@plt+0x12958>
   240f4:	adds	r4, r4, r4
   240f8:	adc	r5, r5, r5
   240fc:	subs	r2, r2, #1
   24100:	bne	240e8 <__assert_fail@plt+0x12978>
   24104:	lsr	r3, r4, ip
   24108:	orr	r3, r3, r5, lsl fp
   2410c:	lsr	r2, r5, ip
   24110:	orr	r3, r3, r5, lsr sl
   24114:	adds	r0, r0, r4
   24118:	mov	r4, r3
   2411c:	lsl	r3, r2, ip
   24120:	orr	r3, r3, r4, lsl sl
   24124:	lsl	ip, r4, ip
   24128:	orr	r3, r3, r4, lsr fp
   2412c:	adc	r1, r1, r5
   24130:	subs	r0, r0, ip
   24134:	mov	r5, r2
   24138:	sbc	r1, r1, r3
   2413c:	cmp	lr, #0
   24140:	strdne	r4, [lr]
   24144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24148:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2414c:	mov	r7, r0
   24150:	ldr	r6, [pc, #72]	; 241a0 <__assert_fail@plt+0x12a30>
   24154:	ldr	r5, [pc, #72]	; 241a4 <__assert_fail@plt+0x12a34>
   24158:	add	r6, pc, r6
   2415c:	add	r5, pc, r5
   24160:	sub	r6, r6, r5
   24164:	mov	r8, r1
   24168:	mov	r9, r2
   2416c:	bl	1139c <pthread_mutex_unlock@plt-0x20>
   24170:	asrs	r6, r6, #2
   24174:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   24178:	mov	r4, #0
   2417c:	add	r4, r4, #1
   24180:	ldr	r3, [r5], #4
   24184:	mov	r2, r9
   24188:	mov	r1, r8
   2418c:	mov	r0, r7
   24190:	blx	r3
   24194:	cmp	r6, r4
   24198:	bne	2417c <__assert_fail@plt+0x12a0c>
   2419c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   241a0:	andeq	r1, r1, ip, lsr #27
   241a4:	andeq	r1, r1, r4, lsr #27
   241a8:	bx	lr
   241ac:	ldr	r3, [pc, #12]	; 241c0 <__assert_fail@plt+0x12a50>
   241b0:	mov	r1, #0
   241b4:	add	r3, pc, r3
   241b8:	ldr	r2, [r3]
   241bc:	b	11650 <__cxa_atexit@plt>
   241c0:	muleq	r1, r8, pc	; <UNPREDICTABLE>

Disassembly of section .fini:

000241c4 <.fini>:
   241c4:	push	{r3, lr}
   241c8:	pop	{r3, pc}
