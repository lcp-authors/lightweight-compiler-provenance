
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010c1c <.init>:
   10c1c:	push	{r3, lr}
   10c20:	bl	10ed4 <__assert_fail@plt+0x4c>
   10c24:	pop	{r3, pc}

Disassembly of section .plt:

00010c28 <calloc@plt-0x14>:
   10c28:	push	{lr}		; (str lr, [sp, #-4]!)
   10c2c:	ldr	lr, [pc, #4]	; 10c38 <calloc@plt-0x4>
   10c30:	add	lr, pc, lr
   10c34:	ldr	pc, [lr, #8]!
   10c38:	andeq	r6, r1, r8, asr #7

00010c3c <calloc@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #90112	; 0x16000
   10c44:	ldr	pc, [ip, #968]!	; 0x3c8

00010c48 <fputs_unlocked@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #90112	; 0x16000
   10c50:	ldr	pc, [ip, #960]!	; 0x3c0

00010c54 <raise@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #90112	; 0x16000
   10c5c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c60 <strcmp@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #90112	; 0x16000
   10c68:	ldr	pc, [ip, #944]!	; 0x3b0

00010c6c <posix_fadvise64@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #90112	; 0x16000
   10c74:	ldr	pc, [ip, #936]!	; 0x3a8

00010c78 <fflush@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #90112	; 0x16000
   10c80:	ldr	pc, [ip, #928]!	; 0x3a0

00010c84 <free@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #90112	; 0x16000
   10c8c:	ldr	pc, [ip, #920]!	; 0x398

00010c90 <_exit@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #90112	; 0x16000
   10c98:	ldr	pc, [ip, #912]!	; 0x390

00010c9c <memcpy@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #904]!	; 0x388

00010ca8 <mbsinit@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #896]!	; 0x380

00010cb4 <memcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #888]!	; 0x378

00010cc0 <fputc_unlocked@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #880]!	; 0x370

00010ccc <dcgettext@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #872]!	; 0x368

00010cd8 <realloc@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #864]!	; 0x360

00010ce4 <textdomain@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #856]!	; 0x358

00010cf0 <iswprint@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #848]!	; 0x350

00010cfc <fwrite@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #840]!	; 0x348

00010d08 <lseek64@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #832]!	; 0x340

00010d14 <__ctype_get_mb_cur_max@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #824]!	; 0x338

00010d20 <__fpending@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #816]!	; 0x330

00010d2c <mbrtowc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #808]!	; 0x328

00010d38 <error@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #800]!	; 0x320

00010d44 <malloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #792]!	; 0x318

00010d50 <__libc_start_main@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #784]!	; 0x310

00010d5c <__freading@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #776]!	; 0x308

00010d68 <__gmon_start__@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #768]!	; 0x300

00010d74 <getopt_long@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d80 <__ctype_b_loc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #752]!	; 0x2f0

00010d8c <exit@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #744]!	; 0x2e8

00010d98 <strlen@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #736]!	; 0x2e0

00010da4 <__errno_location@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #728]!	; 0x2d8

00010db0 <__cxa_atexit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #720]!	; 0x2d0

00010dbc <memset@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc8 <__printf_chk@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd4 <fileno@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #696]!	; 0x2b8

00010de0 <__fprintf_chk@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dec <fclose@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #680]!	; 0x2a8

00010df8 <fseeko64@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #672]!	; 0x2a0

00010e04 <__uflow@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #664]!	; 0x298

00010e10 <__overflow@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #656]!	; 0x290

00010e1c <setlocale@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #648]!	; 0x288

00010e28 <strrchr@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #640]!	; 0x280

00010e34 <nl_langinfo@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #632]!	; 0x278

00010e40 <clearerr_unlocked@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #624]!	; 0x270

00010e4c <fopen64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #616]!	; 0x268

00010e58 <bindtextdomain@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #608]!	; 0x260

00010e64 <strncmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #600]!	; 0x258

00010e70 <abort@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #592]!	; 0x250

00010e7c <strspn@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #584]!	; 0x248

00010e88 <__assert_fail@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x40>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x44>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x48>
   10ec0:	bl	10d50 <__libc_start_main@plt>
   10ec4:	bl	10e70 <abort@plt>
   10ec8:	andeq	r5, r1, r4, ror #20
   10ecc:	andeq	r1, r1, r0, asr r3
   10ed0:	andeq	r5, r1, r4, lsl #20
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x68>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x6c>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d68 <__gmon_start__@plt>
   10ef0:	andeq	r6, r1, ip, lsl r1
   10ef4:	ldrdeq	r0, [r0], -r4
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x90>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x94>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x98>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r7, r2, r0, lsr r1
   10f1c:	andeq	r7, r2, r0, lsr r1
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc8>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xcc>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xd0>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r7, r2, r0, lsr r1
   10f54:	andeq	r7, r2, r0, lsr r1
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf8>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x70>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r7, r2, r4, asr r1
   10f84:	b	10f24 <__assert_fail@plt+0x9c>
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	sub	sp, sp, #60	; 0x3c
   10f90:	subs	r4, r0, #0
   10f94:	beq	10fdc <__assert_fail@plt+0x154>
   10f98:	movw	r3, #28992	; 0x7140
   10f9c:	movt	r3, #2
   10fa0:	ldr	r5, [r3]
   10fa4:	mov	r2, #5
   10fa8:	movw	r1, #23360	; 0x5b40
   10fac:	movt	r1, #1
   10fb0:	mov	r0, #0
   10fb4:	bl	10ccc <dcgettext@plt>
   10fb8:	movw	r3, #29084	; 0x719c
   10fbc:	movt	r3, #2
   10fc0:	ldr	r3, [r3]
   10fc4:	mov	r2, r0
   10fc8:	mov	r1, #1
   10fcc:	mov	r0, r5
   10fd0:	bl	10de0 <__fprintf_chk@plt>
   10fd4:	mov	r0, r4
   10fd8:	bl	10d8c <exit@plt>
   10fdc:	mov	r2, #5
   10fe0:	movw	r1, #23400	; 0x5b68
   10fe4:	movt	r1, #1
   10fe8:	mov	r0, #0
   10fec:	bl	10ccc <dcgettext@plt>
   10ff0:	movw	r3, #29084	; 0x719c
   10ff4:	movt	r3, #2
   10ff8:	ldr	r2, [r3]
   10ffc:	mov	r1, r0
   11000:	mov	r0, #1
   11004:	bl	10dc8 <__printf_chk@plt>
   11008:	mov	r2, #5
   1100c:	movw	r1, #23436	; 0x5b8c
   11010:	movt	r1, #1
   11014:	mov	r0, #0
   11018:	bl	10ccc <dcgettext@plt>
   1101c:	movw	r5, #29004	; 0x714c
   11020:	movt	r5, #2
   11024:	ldr	r1, [r5]
   11028:	bl	10c48 <fputs_unlocked@plt>
   1102c:	mov	r2, #5
   11030:	movw	r1, #23504	; 0x5bd0
   11034:	movt	r1, #1
   11038:	mov	r0, #0
   1103c:	bl	10ccc <dcgettext@plt>
   11040:	ldr	r1, [r5]
   11044:	bl	10c48 <fputs_unlocked@plt>
   11048:	mov	r2, #5
   1104c:	movw	r1, #23560	; 0x5c08
   11050:	movt	r1, #1
   11054:	mov	r0, #0
   11058:	bl	10ccc <dcgettext@plt>
   1105c:	ldr	r1, [r5]
   11060:	bl	10c48 <fputs_unlocked@plt>
   11064:	mov	r2, #5
   11068:	movw	r1, #23636	; 0x5c54
   1106c:	movt	r1, #1
   11070:	mov	r0, #0
   11074:	bl	10ccc <dcgettext@plt>
   11078:	ldr	r1, [r5]
   1107c:	bl	10c48 <fputs_unlocked@plt>
   11080:	bl	12304 <__assert_fail@plt+0x147c>
   11084:	mov	r2, #5
   11088:	movw	r1, #23748	; 0x5cc4
   1108c:	movt	r1, #1
   11090:	mov	r0, #0
   11094:	bl	10ccc <dcgettext@plt>
   11098:	ldr	r1, [r5]
   1109c:	bl	10c48 <fputs_unlocked@plt>
   110a0:	mov	r2, #5
   110a4:	movw	r1, #23796	; 0x5cf4
   110a8:	movt	r1, #1
   110ac:	mov	r0, #0
   110b0:	bl	10ccc <dcgettext@plt>
   110b4:	ldr	r1, [r5]
   110b8:	bl	10c48 <fputs_unlocked@plt>
   110bc:	movw	r0, #23180	; 0x5a8c
   110c0:	movt	r0, #1
   110c4:	ldr	r1, [r0]
   110c8:	ldr	r3, [r0, #4]
   110cc:	str	r1, [sp]
   110d0:	str	r3, [sp, #4]
   110d4:	ldrd	r2, [r0, #8]
   110d8:	strd	r2, [sp, #8]
   110dc:	ldrd	r2, [r0, #16]
   110e0:	strd	r2, [sp, #16]
   110e4:	ldrd	r2, [r0, #24]
   110e8:	strd	r2, [sp, #24]
   110ec:	ldrd	r2, [r0, #32]
   110f0:	strd	r2, [sp, #32]
   110f4:	ldrd	r2, [r0, #40]	; 0x28
   110f8:	strd	r2, [sp, #40]	; 0x28
   110fc:	ldrd	r2, [r0, #48]	; 0x30
   11100:	strd	r2, [sp, #48]	; 0x30
   11104:	cmp	r1, #0
   11108:	moveq	r5, sp
   1110c:	beq	11138 <__assert_fail@plt+0x2b0>
   11110:	mov	r5, sp
   11114:	movw	r6, #23352	; 0x5b38
   11118:	movt	r6, #1
   1111c:	mov	r0, r6
   11120:	bl	10c60 <strcmp@plt>
   11124:	cmp	r0, #0
   11128:	beq	11138 <__assert_fail@plt+0x2b0>
   1112c:	ldr	r1, [r5, #8]!
   11130:	cmp	r1, #0
   11134:	bne	1111c <__assert_fail@plt+0x294>
   11138:	ldr	r5, [r5, #4]
   1113c:	cmp	r5, #0
   11140:	beq	1129c <__assert_fail@plt+0x414>
   11144:	mov	r2, #5
   11148:	movw	r1, #23852	; 0x5d2c
   1114c:	movt	r1, #1
   11150:	mov	r0, #0
   11154:	bl	10ccc <dcgettext@plt>
   11158:	movw	r3, #23876	; 0x5d44
   1115c:	movt	r3, #1
   11160:	movw	r2, #23916	; 0x5d6c
   11164:	movt	r2, #1
   11168:	mov	r1, r0
   1116c:	mov	r0, #1
   11170:	bl	10dc8 <__printf_chk@plt>
   11174:	mov	r1, #0
   11178:	mov	r0, #5
   1117c:	bl	10e1c <setlocale@plt>
   11180:	cmp	r0, #0
   11184:	beq	111a0 <__assert_fail@plt+0x318>
   11188:	mov	r2, #3
   1118c:	movw	r1, #23932	; 0x5d7c
   11190:	movt	r1, #1
   11194:	bl	10e64 <strncmp@plt>
   11198:	cmp	r0, #0
   1119c:	bne	1121c <__assert_fail@plt+0x394>
   111a0:	mov	r2, #5
   111a4:	movw	r1, #24008	; 0x5dc8
   111a8:	movt	r1, #1
   111ac:	mov	r0, #0
   111b0:	bl	10ccc <dcgettext@plt>
   111b4:	movw	r6, #23352	; 0x5b38
   111b8:	movt	r6, #1
   111bc:	mov	r3, r6
   111c0:	movw	r2, #23876	; 0x5d44
   111c4:	movt	r2, #1
   111c8:	mov	r1, r0
   111cc:	mov	r0, #1
   111d0:	bl	10dc8 <__printf_chk@plt>
   111d4:	mov	r2, #5
   111d8:	movw	r1, #24036	; 0x5de4
   111dc:	movt	r1, #1
   111e0:	mov	r0, #0
   111e4:	bl	10ccc <dcgettext@plt>
   111e8:	mov	r1, r0
   111ec:	movw	r2, #24172	; 0x5e6c
   111f0:	movt	r2, #1
   111f4:	movw	r3, #23432	; 0x5b88
   111f8:	movt	r3, #1
   111fc:	cmp	r5, r6
   11200:	moveq	r3, r2
   11204:	mov	r2, r5
   11208:	mov	r0, #1
   1120c:	bl	10dc8 <__printf_chk@plt>
   11210:	b	10fd4 <__assert_fail@plt+0x14c>
   11214:	movw	r5, #23352	; 0x5b38
   11218:	movt	r5, #1
   1121c:	mov	r2, #5
   11220:	movw	r1, #23936	; 0x5d80
   11224:	movt	r1, #1
   11228:	mov	r0, #0
   1122c:	bl	10ccc <dcgettext@plt>
   11230:	movw	r3, #29004	; 0x714c
   11234:	movt	r3, #2
   11238:	ldr	r1, [r3]
   1123c:	bl	10c48 <fputs_unlocked@plt>
   11240:	b	111a0 <__assert_fail@plt+0x318>
   11244:	mov	r2, #5
   11248:	movw	r1, #24008	; 0x5dc8
   1124c:	movt	r1, #1
   11250:	mov	r0, #0
   11254:	bl	10ccc <dcgettext@plt>
   11258:	movw	r5, #23352	; 0x5b38
   1125c:	movt	r5, #1
   11260:	mov	r3, r5
   11264:	movw	r2, #23876	; 0x5d44
   11268:	movt	r2, #1
   1126c:	mov	r1, r0
   11270:	mov	r0, #1
   11274:	bl	10dc8 <__printf_chk@plt>
   11278:	mov	r2, #5
   1127c:	movw	r1, #24036	; 0x5de4
   11280:	movt	r1, #1
   11284:	mov	r0, #0
   11288:	bl	10ccc <dcgettext@plt>
   1128c:	mov	r1, r0
   11290:	movw	r3, #24172	; 0x5e6c
   11294:	movt	r3, #1
   11298:	b	11204 <__assert_fail@plt+0x37c>
   1129c:	mov	r2, #5
   112a0:	movw	r1, #23852	; 0x5d2c
   112a4:	movt	r1, #1
   112a8:	mov	r0, #0
   112ac:	bl	10ccc <dcgettext@plt>
   112b0:	movw	r3, #23876	; 0x5d44
   112b4:	movt	r3, #1
   112b8:	movw	r2, #23916	; 0x5d6c
   112bc:	movt	r2, #1
   112c0:	mov	r1, r0
   112c4:	mov	r0, #1
   112c8:	bl	10dc8 <__printf_chk@plt>
   112cc:	mov	r1, #0
   112d0:	mov	r0, #5
   112d4:	bl	10e1c <setlocale@plt>
   112d8:	cmp	r0, #0
   112dc:	beq	11244 <__assert_fail@plt+0x3bc>
   112e0:	mov	r2, #3
   112e4:	movw	r1, #23932	; 0x5d7c
   112e8:	movt	r1, #1
   112ec:	bl	10e64 <strncmp@plt>
   112f0:	cmp	r0, #0
   112f4:	bne	11214 <__assert_fail@plt+0x38c>
   112f8:	mov	r2, #5
   112fc:	movw	r1, #24008	; 0x5dc8
   11300:	movt	r1, #1
   11304:	mov	r0, #0
   11308:	bl	10ccc <dcgettext@plt>
   1130c:	movw	r5, #23352	; 0x5b38
   11310:	movt	r5, #1
   11314:	mov	r3, r5
   11318:	movw	r2, #23876	; 0x5d44
   1131c:	movt	r2, #1
   11320:	mov	r1, r0
   11324:	mov	r0, #1
   11328:	bl	10dc8 <__printf_chk@plt>
   1132c:	mov	r2, #5
   11330:	movw	r1, #24036	; 0x5de4
   11334:	movt	r1, #1
   11338:	mov	r0, #0
   1133c:	bl	10ccc <dcgettext@plt>
   11340:	mov	r1, r0
   11344:	movw	r3, #24172	; 0x5e6c
   11348:	movt	r3, #1
   1134c:	b	11204 <__assert_fail@plt+0x37c>
   11350:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11354:	strd	r6, [sp, #8]
   11358:	strd	r8, [sp, #16]
   1135c:	str	sl, [sp, #24]
   11360:	str	lr, [sp, #28]
   11364:	sub	sp, sp, #16
   11368:	mov	r6, r0
   1136c:	mov	r5, r1
   11370:	ldr	r0, [r1]
   11374:	bl	12744 <__assert_fail@plt+0x18bc>
   11378:	movw	r1, #23432	; 0x5b88
   1137c:	movt	r1, #1
   11380:	mov	r0, #6
   11384:	bl	10e1c <setlocale@plt>
   11388:	movw	r4, #23920	; 0x5d70
   1138c:	movt	r4, #1
   11390:	movw	r1, #24088	; 0x5e18
   11394:	movt	r1, #1
   11398:	mov	r0, r4
   1139c:	bl	10e58 <bindtextdomain@plt>
   113a0:	mov	r0, r4
   113a4:	bl	10ce4 <textdomain@plt>
   113a8:	movw	r0, #9080	; 0x2378
   113ac:	movt	r0, #1
   113b0:	bl	15a68 <__assert_fail@plt+0x4be0>
   113b4:	movw	r3, #29072	; 0x7190
   113b8:	movt	r3, #2
   113bc:	mov	r2, #1
   113c0:	strb	r2, [r3]
   113c4:	movw	r4, #23180	; 0x5a8c
   113c8:	movt	r4, #1
   113cc:	add	r7, r4, #56	; 0x38
   113d0:	mov	r8, r3
   113d4:	mov	r3, #0
   113d8:	str	r3, [sp]
   113dc:	mov	r3, r7
   113e0:	add	r2, r4, #136	; 0x88
   113e4:	mov	r1, r5
   113e8:	mov	r0, r6
   113ec:	bl	10d74 <getopt_long@plt>
   113f0:	cmn	r0, #1
   113f4:	beq	114d8 <__assert_fail@plt+0x650>
   113f8:	cmp	r0, #57	; 0x39
   113fc:	bgt	11468 <__assert_fail@plt+0x5e0>
   11400:	cmp	r0, #48	; 0x30
   11404:	bge	11498 <__assert_fail@plt+0x610>
   11408:	cmn	r0, #3
   1140c:	bne	11458 <__assert_fail@plt+0x5d0>
   11410:	movw	r3, #28904	; 0x70e8
   11414:	movt	r3, #2
   11418:	movw	r0, #29004	; 0x714c
   1141c:	movt	r0, #2
   11420:	mov	r4, #0
   11424:	str	r4, [sp, #4]
   11428:	movw	r2, #24112	; 0x5e30
   1142c:	movt	r2, #1
   11430:	str	r2, [sp]
   11434:	ldr	r3, [r3]
   11438:	movw	r2, #23916	; 0x5d6c
   1143c:	movt	r2, #1
   11440:	movw	r1, #23352	; 0x5b38
   11444:	movt	r1, #1
   11448:	ldr	r0, [r0]
   1144c:	bl	14f3c <__assert_fail@plt+0x40b4>
   11450:	mov	r0, r4
   11454:	bl	10d8c <exit@plt>
   11458:	cmn	r0, #2
   1145c:	bne	114d0 <__assert_fail@plt+0x648>
   11460:	mov	r0, #0
   11464:	bl	10f88 <__assert_fail@plt+0x100>
   11468:	cmp	r0, #105	; 0x69
   1146c:	beq	1148c <__assert_fail@plt+0x604>
   11470:	cmp	r0, #116	; 0x74
   11474:	bne	114d0 <__assert_fail@plt+0x648>
   11478:	movw	r3, #29008	; 0x7150
   1147c:	movt	r3, #2
   11480:	ldr	r0, [r3]
   11484:	bl	119d4 <__assert_fail@plt+0xb4c>
   11488:	b	113d4 <__assert_fail@plt+0x54c>
   1148c:	mov	r3, #0
   11490:	strb	r3, [r8]
   11494:	b	113d4 <__assert_fail@plt+0x54c>
   11498:	movw	r3, #29008	; 0x7150
   1149c:	movt	r3, #2
   114a0:	ldr	r3, [r3]
   114a4:	cmp	r3, #0
   114a8:	beq	114b8 <__assert_fail@plt+0x630>
   114ac:	sub	r0, r3, #1
   114b0:	bl	119d4 <__assert_fail@plt+0xb4c>
   114b4:	b	113d4 <__assert_fail@plt+0x54c>
   114b8:	strb	r0, [sp, #12]
   114bc:	mov	r3, #0
   114c0:	strb	r3, [sp, #13]
   114c4:	add	r0, sp, #12
   114c8:	bl	119d4 <__assert_fail@plt+0xb4c>
   114cc:	b	113d4 <__assert_fail@plt+0x54c>
   114d0:	mov	r0, #1
   114d4:	bl	10f88 <__assert_fail@plt+0x100>
   114d8:	bl	11d70 <__assert_fail@plt+0xee8>
   114dc:	movw	r3, #28984	; 0x7138
   114e0:	movt	r3, #2
   114e4:	ldr	r0, [r3]
   114e8:	cmp	r0, r6
   114ec:	addlt	r0, r5, r0, lsl #2
   114f0:	movge	r0, #0
   114f4:	bl	1209c <__assert_fail@plt+0x1214>
   114f8:	mov	r0, #0
   114fc:	bl	120cc <__assert_fail@plt+0x1244>
   11500:	subs	r6, r0, #0
   11504:	beq	1176c <__assert_fail@plt+0x8e4>
   11508:	movw	r7, #29004	; 0x714c
   1150c:	movt	r7, #2
   11510:	mov	r3, #0
   11514:	str	r3, [sp, #12]
   11518:	mov	r4, #0
   1151c:	mov	r5, #0
   11520:	mov	r9, #1
   11524:	b	115bc <__assert_fail@plt+0x734>
   11528:	mov	r0, r6
   1152c:	bl	10e04 <__uflow@plt>
   11530:	subs	r8, r0, #0
   11534:	bge	115d8 <__assert_fail@plt+0x750>
   11538:	mov	r0, r6
   1153c:	bl	120cc <__assert_fail@plt+0x1244>
   11540:	subs	r6, r0, #0
   11544:	bne	115bc <__assert_fail@plt+0x734>
   11548:	cmp	r9, #0
   1154c:	beq	1176c <__assert_fail@plt+0x8e4>
   11550:	adds	r4, r4, #1
   11554:	adc	r5, r5, #0
   11558:	orrs	r3, r4, r5
   1155c:	beq	1170c <__assert_fail@plt+0x884>
   11560:	movw	r3, #29072	; 0x7190
   11564:	movt	r3, #2
   11568:	ldrb	r3, [r3]
   1156c:	cmp	r3, #0
   11570:	movne	r9, #1
   11574:	bne	1158c <__assert_fail@plt+0x704>
   11578:	bl	10d80 <__ctype_b_loc@plt>
   1157c:	ldr	r2, [r0]
   11580:	lsl	r3, r8, #1
   11584:	ldrh	r9, [r2, r3]
   11588:	and	r9, r9, #1
   1158c:	cmp	r8, #0
   11590:	blt	1176c <__assert_fail@plt+0x8e4>
   11594:	ldr	r0, [r7]
   11598:	ldr	r3, [r0, #20]
   1159c:	ldr	r2, [r0, #24]
   115a0:	cmp	r3, r2
   115a4:	addcc	r2, r3, #1
   115a8:	strcc	r2, [r0, #20]
   115ac:	strbcc	r8, [r3]
   115b0:	bcs	11730 <__assert_fail@plt+0x8a8>
   115b4:	cmp	r8, #10
   115b8:	beq	11510 <__assert_fail@plt+0x688>
   115bc:	ldr	r3, [r6, #4]
   115c0:	ldr	r2, [r6, #8]
   115c4:	cmp	r3, r2
   115c8:	bcs	11528 <__assert_fail@plt+0x6a0>
   115cc:	add	r2, r3, #1
   115d0:	str	r2, [r6, #4]
   115d4:	ldrb	r8, [r3]
   115d8:	cmp	r9, #0
   115dc:	beq	11594 <__assert_fail@plt+0x70c>
   115e0:	cmp	r8, #9
   115e4:	beq	1161c <__assert_fail@plt+0x794>
   115e8:	cmp	r8, #8
   115ec:	bne	11550 <__assert_fail@plt+0x6c8>
   115f0:	orrs	r3, r4, r5
   115f4:	movne	r3, #1
   115f8:	moveq	r3, #0
   115fc:	mov	r2, #0
   11600:	subs	r4, r4, r3
   11604:	sbc	r5, r5, r2
   11608:	ldr	r3, [sp, #12]
   1160c:	cmp	r3, r2
   11610:	subne	r3, r3, #1
   11614:	str	r3, [sp, #12]
   11618:	b	11560 <__assert_fail@plt+0x6d8>
   1161c:	add	r3, sp, #11
   11620:	add	r2, sp, #12
   11624:	mov	r0, r4
   11628:	mov	r1, r5
   1162c:	bl	11f24 <__assert_fail@plt+0x109c>
   11630:	mov	r8, r0
   11634:	mov	r9, r1
   11638:	ldrb	r3, [sp, #11]
   1163c:	cmp	r3, #0
   11640:	beq	11668 <__assert_fail@plt+0x7e0>
   11644:	mvn	r2, #0
   11648:	mvn	r3, #0
   1164c:	cmp	r5, r3
   11650:	cmpeq	r4, r2
   11654:	beq	116e8 <__assert_fail@plt+0x860>
   11658:	adds	r4, r4, #1
   1165c:	adc	r5, r5, #0
   11660:	mov	r8, #32
   11664:	b	11560 <__assert_fail@plt+0x6d8>
   11668:	cmp	r5, r1
   1166c:	cmpeq	r4, r0
   11670:	bhi	116e8 <__assert_fail@plt+0x860>
   11674:	mov	sl, #32
   11678:	adds	r4, r4, #1
   1167c:	adc	r5, r5, #0
   11680:	cmp	r9, r5
   11684:	cmpeq	r8, r4
   11688:	bls	11660 <__assert_fail@plt+0x7d8>
   1168c:	ldr	r0, [r7]
   11690:	ldr	r3, [r0, #20]
   11694:	ldr	r2, [r0, #24]
   11698:	cmp	r3, r2
   1169c:	addcc	r2, r3, #1
   116a0:	strcc	r2, [r0, #20]
   116a4:	strbcc	sl, [r3]
   116a8:	bcc	11678 <__assert_fail@plt+0x7f0>
   116ac:	mov	r1, sl
   116b0:	bl	10e10 <__overflow@plt>
   116b4:	cmp	r0, #0
   116b8:	bge	11678 <__assert_fail@plt+0x7f0>
   116bc:	bl	10da4 <__errno_location@plt>
   116c0:	ldr	r4, [r0]
   116c4:	mov	r2, #5
   116c8:	movw	r1, #24152	; 0x5e58
   116cc:	movt	r1, #1
   116d0:	mov	r0, #0
   116d4:	bl	10ccc <dcgettext@plt>
   116d8:	mov	r2, r0
   116dc:	mov	r1, r4
   116e0:	mov	r0, #1
   116e4:	bl	10d38 <error@plt>
   116e8:	mov	r2, #5
   116ec:	movw	r1, #24128	; 0x5e40
   116f0:	movt	r1, #1
   116f4:	mov	r0, #0
   116f8:	bl	10ccc <dcgettext@plt>
   116fc:	mov	r2, r0
   11700:	mov	r1, #0
   11704:	mov	r0, #1
   11708:	bl	10d38 <error@plt>
   1170c:	mov	r2, #5
   11710:	movw	r1, #24128	; 0x5e40
   11714:	movt	r1, #1
   11718:	mov	r0, #0
   1171c:	bl	10ccc <dcgettext@plt>
   11720:	mov	r2, r0
   11724:	mov	r1, #0
   11728:	mov	r0, #1
   1172c:	bl	10d38 <error@plt>
   11730:	uxtb	r1, r8
   11734:	bl	10e10 <__overflow@plt>
   11738:	cmp	r0, #0
   1173c:	bge	115b4 <__assert_fail@plt+0x72c>
   11740:	bl	10da4 <__errno_location@plt>
   11744:	ldr	r4, [r0]
   11748:	mov	r2, #5
   1174c:	movw	r1, #24152	; 0x5e58
   11750:	movt	r1, #1
   11754:	mov	r0, #0
   11758:	bl	10ccc <dcgettext@plt>
   1175c:	mov	r2, r0
   11760:	mov	r1, r4
   11764:	mov	r0, #1
   11768:	bl	10d38 <error@plt>
   1176c:	bl	122ac <__assert_fail@plt+0x1424>
   11770:	movw	r3, #29068	; 0x718c
   11774:	movt	r3, #2
   11778:	ldr	r0, [r3]
   1177c:	add	sp, sp, #16
   11780:	ldrd	r4, [sp]
   11784:	ldrd	r6, [sp, #8]
   11788:	ldrd	r8, [sp, #16]
   1178c:	ldr	sl, [sp, #24]
   11790:	add	sp, sp, #28
   11794:	pop	{pc}		; (ldr pc, [sp], #4)
   11798:	strd	r4, [sp, #-16]!
   1179c:	str	r6, [sp, #8]
   117a0:	str	lr, [sp, #12]
   117a4:	mov	r4, r0
   117a8:	mov	r5, r1
   117ac:	movw	r3, #29016	; 0x7158
   117b0:	movt	r3, #2
   117b4:	ldrd	r2, [r3]
   117b8:	orrs	r3, r2, r3
   117bc:	moveq	r0, #1
   117c0:	bne	117e0 <__assert_fail@plt+0x958>
   117c4:	movw	r3, #29016	; 0x7158
   117c8:	movt	r3, #2
   117cc:	strd	r4, [r3]
   117d0:	ldrd	r4, [sp]
   117d4:	ldr	r6, [sp, #8]
   117d8:	add	sp, sp, #12
   117dc:	pop	{pc}		; (ldr pc, [sp], #4)
   117e0:	mov	r2, #5
   117e4:	movw	r1, #24316	; 0x5efc
   117e8:	movt	r1, #1
   117ec:	mov	r0, #0
   117f0:	bl	10ccc <dcgettext@plt>
   117f4:	mov	r2, r0
   117f8:	mov	r1, #0
   117fc:	mov	r0, r1
   11800:	bl	10d38 <error@plt>
   11804:	mov	r0, #0
   11808:	b	117c4 <__assert_fail@plt+0x93c>
   1180c:	strd	r4, [sp, #-16]!
   11810:	str	r6, [sp, #8]
   11814:	str	lr, [sp, #12]
   11818:	mov	r4, r0
   1181c:	mov	r5, r1
   11820:	movw	r3, #29016	; 0x7158
   11824:	movt	r3, #2
   11828:	ldrd	r2, [r3, #8]
   1182c:	orrs	r3, r2, r3
   11830:	moveq	r0, #1
   11834:	bne	11854 <__assert_fail@plt+0x9cc>
   11838:	movw	r3, #29016	; 0x7158
   1183c:	movt	r3, #2
   11840:	strd	r4, [r3, #8]
   11844:	ldrd	r4, [sp]
   11848:	ldr	r6, [sp, #8]
   1184c:	add	sp, sp, #12
   11850:	pop	{pc}		; (ldr pc, [sp], #4)
   11854:	mov	r2, #5
   11858:	movw	r1, #24364	; 0x5f2c
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	bl	10ccc <dcgettext@plt>
   11868:	mov	r2, r0
   1186c:	mov	r1, #0
   11870:	mov	r0, r1
   11874:	bl	10d38 <error@plt>
   11878:	mov	r0, #0
   1187c:	b	11838 <__assert_fail@plt+0x9b0>
   11880:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11884:	strd	r6, [sp, #8]
   11888:	str	r8, [sp, #16]
   1188c:	str	lr, [sp, #20]
   11890:	mov	r4, r0
   11894:	mov	r5, r1
   11898:	movw	r3, #29016	; 0x7158
   1189c:	movt	r3, #2
   118a0:	ldr	r3, [r3, #16]
   118a4:	cmp	r3, #0
   118a8:	beq	118fc <__assert_fail@plt+0xa74>
   118ac:	movw	r2, #29016	; 0x7158
   118b0:	movt	r2, #2
   118b4:	ldr	ip, [r2, #20]
   118b8:	add	r2, ip, r3, lsl #3
   118bc:	ldrd	r0, [r2, #-8]
   118c0:	cmp	r1, r5
   118c4:	cmpeq	r0, r4
   118c8:	bls	11904 <__assert_fail@plt+0xa7c>
   118cc:	movw	r2, #29016	; 0x7158
   118d0:	movt	r2, #2
   118d4:	ldr	r2, [r2, #24]
   118d8:	cmp	r3, r2
   118dc:	beq	11988 <__assert_fail@plt+0xb00>
   118e0:	movw	r2, #29016	; 0x7158
   118e4:	movt	r2, #2
   118e8:	add	r1, r3, #1
   118ec:	str	r1, [r2, #16]
   118f0:	lsl	r3, r3, #3
   118f4:	strd	r4, [ip, r3]
   118f8:	b	11974 <__assert_fail@plt+0xaec>
   118fc:	mov	r0, #0
   11900:	mov	r1, #0
   11904:	subs	r6, r4, r0
   11908:	sbc	r7, r5, r1
   1190c:	movw	r2, #29016	; 0x7158
   11910:	movt	r2, #2
   11914:	ldr	r2, [r2, #24]
   11918:	cmp	r3, r2
   1191c:	beq	11990 <__assert_fail@plt+0xb08>
   11920:	movw	r3, #29016	; 0x7158
   11924:	movt	r3, #2
   11928:	ldr	r1, [r3, #20]
   1192c:	ldr	r2, [r3, #16]
   11930:	add	r0, r2, #1
   11934:	str	r0, [r3, #16]
   11938:	lsl	r2, r2, #3
   1193c:	strd	r4, [r1, r2]
   11940:	ldr	r2, [r3, #28]
   11944:	mov	r3, #0
   11948:	cmp	r3, r7
   1194c:	cmpeq	r2, r6
   11950:	bcs	11974 <__assert_fail@plt+0xaec>
   11954:	mvn	r2, #0
   11958:	mov	r3, #0
   1195c:	cmp	r7, r3
   11960:	cmpeq	r6, r2
   11964:	movwls	r3, #29016	; 0x7158
   11968:	movtls	r3, #2
   1196c:	strls	r6, [r3, #28]
   11970:	bhi	119b0 <__assert_fail@plt+0xb28>
   11974:	ldrd	r4, [sp]
   11978:	ldrd	r6, [sp, #8]
   1197c:	ldr	r8, [sp, #16]
   11980:	add	sp, sp, #20
   11984:	pop	{pc}		; (ldr pc, [sp], #4)
   11988:	mov	r6, #0
   1198c:	mov	r7, #0
   11990:	movw	r8, #29016	; 0x7158
   11994:	movt	r8, #2
   11998:	mov	r2, #8
   1199c:	add	r1, r8, #24
   119a0:	ldr	r0, [r8, #20]
   119a4:	bl	151dc <__assert_fail@plt+0x4354>
   119a8:	str	r0, [r8, #20]
   119ac:	b	11920 <__assert_fail@plt+0xa98>
   119b0:	mov	r2, #5
   119b4:	movw	r1, #24412	; 0x5f5c
   119b8:	movt	r1, #1
   119bc:	mov	r0, #0
   119c0:	bl	10ccc <dcgettext@plt>
   119c4:	mov	r2, r0
   119c8:	mov	r1, #0
   119cc:	mov	r0, #1
   119d0:	bl	10d38 <error@plt>
   119d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   119d8:	strd	r6, [sp, #8]
   119dc:	strd	r8, [sp, #16]
   119e0:	strd	sl, [sp, #24]
   119e4:	str	lr, [sp, #32]
   119e8:	sub	sp, sp, #28
   119ec:	ldrb	r4, [r0]
   119f0:	cmp	r4, #0
   119f4:	beq	11d0c <__assert_fail@plt+0xe84>
   119f8:	mov	r5, r0
   119fc:	mov	sl, #0
   11a00:	mov	fp, #0
   11a04:	mov	r3, #1
   11a08:	str	r3, [sp, #4]
   11a0c:	mov	r9, #0
   11a10:	mov	r8, r9
   11a14:	mov	r7, r9
   11a18:	mov	r6, r9
   11a1c:	movw	r3, #24524	; 0x5fcc
   11a20:	movt	r3, #1
   11a24:	str	r3, [sp, #16]
   11a28:	movw	r3, #24536	; 0x5fd8
   11a2c:	movt	r3, #1
   11a30:	str	r3, [sp, #20]
   11a34:	b	11c68 <__assert_fail@plt+0xde0>
   11a38:	mov	r0, sl
   11a3c:	mov	r1, fp
   11a40:	bl	11798 <__assert_fail@plt+0x910>
   11a44:	subs	r7, r0, #0
   11a48:	beq	11c4c <__assert_fail@plt+0xdc4>
   11a4c:	mov	r4, r5
   11a50:	mov	r6, #0
   11a54:	b	11c58 <__assert_fail@plt+0xdd0>
   11a58:	mov	r0, sl
   11a5c:	mov	r1, fp
   11a60:	bl	11880 <__assert_fail@plt+0x9f8>
   11a64:	mov	r7, r8
   11a68:	mov	r6, r8
   11a6c:	mov	r4, r5
   11a70:	b	11c58 <__assert_fail@plt+0xdd0>
   11a74:	cmp	r4, #47	; 0x2f
   11a78:	beq	11b58 <__assert_fail@plt+0xcd0>
   11a7c:	cmp	r4, #43	; 0x2b
   11a80:	beq	11bb8 <__assert_fail@plt+0xd30>
   11a84:	sub	r1, r4, #48	; 0x30
   11a88:	cmp	r1, #9
   11a8c:	bhi	11c18 <__assert_fail@plt+0xd90>
   11a90:	cmp	r6, #0
   11a94:	beq	11d4c <__assert_fail@plt+0xec4>
   11a98:	add	r3, pc, #712	; 0x2c8
   11a9c:	ldrd	r2, [r3]
   11aa0:	cmp	fp, r3
   11aa4:	cmpeq	sl, r2
   11aa8:	bhi	11aec <__assert_fail@plt+0xc64>
   11aac:	lsl	r1, fp, #2
   11ab0:	lsl	r3, sl, #2
   11ab4:	orr	r2, r1, sl, lsr #30
   11ab8:	adds	r3, r3, sl
   11abc:	adc	r2, r2, fp
   11ac0:	adds	r3, r3, r3
   11ac4:	str	r3, [sp, #8]
   11ac8:	adc	r3, r2, r2
   11acc:	str	r3, [sp, #12]
   11ad0:	sub	r4, r4, #48	; 0x30
   11ad4:	ldrd	r2, [sp, #8]
   11ad8:	adds	r2, r2, r4
   11adc:	adc	r3, r3, r4, asr #31
   11ae0:	cmp	r3, fp
   11ae4:	cmpeq	r2, sl
   11ae8:	bcs	11cc0 <__assert_fail@plt+0xe38>
   11aec:	ldr	r1, [sp, #16]
   11af0:	mov	r0, r9
   11af4:	bl	10e7c <strspn@plt>
   11af8:	mov	r4, r0
   11afc:	mov	r1, r0
   11b00:	mov	r0, r9
   11b04:	bl	15440 <__assert_fail@plt+0x45b8>
   11b08:	mov	r5, r0
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [sp, #20]
   11b14:	mov	r0, #0
   11b18:	bl	10ccc <dcgettext@plt>
   11b1c:	str	r0, [sp, #4]
   11b20:	mov	r0, r5
   11b24:	bl	14a40 <__assert_fail@plt+0x3bb8>
   11b28:	mov	r3, r0
   11b2c:	ldr	r2, [sp, #4]
   11b30:	mov	r1, #0
   11b34:	mov	r0, r1
   11b38:	bl	10d38 <error@plt>
   11b3c:	mov	r0, r5
   11b40:	bl	12624 <__assert_fail@plt+0x179c>
   11b44:	sub	r4, r4, #1
   11b48:	add	r4, r9, r4
   11b4c:	mov	r3, #0
   11b50:	str	r3, [sp, #4]
   11b54:	b	11c58 <__assert_fail@plt+0xdd0>
   11b58:	cmp	r6, #0
   11b5c:	moveq	r8, r6
   11b60:	moveq	r4, r5
   11b64:	moveq	r7, #1
   11b68:	beq	11c58 <__assert_fail@plt+0xdd0>
   11b6c:	mov	r2, #5
   11b70:	movw	r1, #24436	; 0x5f74
   11b74:	movt	r1, #1
   11b78:	mov	r0, #0
   11b7c:	bl	10ccc <dcgettext@plt>
   11b80:	mov	r4, r0
   11b84:	mov	r0, r5
   11b88:	bl	14a40 <__assert_fail@plt+0x3bb8>
   11b8c:	mov	r3, r0
   11b90:	mov	r2, r4
   11b94:	mov	r1, #0
   11b98:	mov	r0, r1
   11b9c:	bl	10d38 <error@plt>
   11ba0:	mov	r7, r6
   11ba4:	mov	r4, r5
   11ba8:	mov	r3, #0
   11bac:	str	r3, [sp, #4]
   11bb0:	mov	r8, r3
   11bb4:	b	11c58 <__assert_fail@plt+0xdd0>
   11bb8:	cmp	r6, #0
   11bbc:	moveq	r7, r6
   11bc0:	moveq	r4, r5
   11bc4:	moveq	r8, #1
   11bc8:	beq	11c58 <__assert_fail@plt+0xdd0>
   11bcc:	mov	r2, #5
   11bd0:	movw	r1, #24480	; 0x5fa0
   11bd4:	movt	r1, #1
   11bd8:	mov	r0, #0
   11bdc:	bl	10ccc <dcgettext@plt>
   11be0:	mov	r4, r0
   11be4:	mov	r0, r5
   11be8:	bl	14a40 <__assert_fail@plt+0x3bb8>
   11bec:	mov	r3, r0
   11bf0:	mov	r2, r4
   11bf4:	mov	r1, #0
   11bf8:	mov	r0, r1
   11bfc:	bl	10d38 <error@plt>
   11c00:	mov	r8, r6
   11c04:	mov	r4, r5
   11c08:	mov	r3, #0
   11c0c:	str	r3, [sp, #4]
   11c10:	mov	r7, r3
   11c14:	b	11c58 <__assert_fail@plt+0xdd0>
   11c18:	mov	r2, #5
   11c1c:	movw	r1, #24564	; 0x5ff4
   11c20:	movt	r1, #1
   11c24:	mov	r0, #0
   11c28:	bl	10ccc <dcgettext@plt>
   11c2c:	mov	r4, r0
   11c30:	mov	r0, r5
   11c34:	bl	14a40 <__assert_fail@plt+0x3bb8>
   11c38:	mov	r3, r0
   11c3c:	mov	r2, r4
   11c40:	mov	r1, #0
   11c44:	mov	r0, r1
   11c48:	bl	10d38 <error@plt>
   11c4c:	mov	r0, #1
   11c50:	bl	10d8c <exit@plt>
   11c54:	mov	r4, r5
   11c58:	add	r5, r4, #1
   11c5c:	ldrb	r4, [r4, #1]
   11c60:	cmp	r4, #0
   11c64:	beq	11cd0 <__assert_fail@plt+0xe48>
   11c68:	cmp	r4, #44	; 0x2c
   11c6c:	beq	11c88 <__assert_fail@plt+0xe00>
   11c70:	bl	10d80 <__ctype_b_loc@plt>
   11c74:	ldr	r2, [r0]
   11c78:	lsl	r3, r4, #1
   11c7c:	ldrh	r3, [r2, r3]
   11c80:	tst	r3, #1
   11c84:	beq	11a74 <__assert_fail@plt+0xbec>
   11c88:	cmp	r6, #0
   11c8c:	beq	11c54 <__assert_fail@plt+0xdcc>
   11c90:	cmp	r7, #0
   11c94:	bne	11a38 <__assert_fail@plt+0xbb0>
   11c98:	cmp	r8, #0
   11c9c:	beq	11a58 <__assert_fail@plt+0xbd0>
   11ca0:	mov	r0, sl
   11ca4:	mov	r1, fp
   11ca8:	bl	1180c <__assert_fail@plt+0x984>
   11cac:	subs	r8, r0, #0
   11cb0:	beq	11c4c <__assert_fail@plt+0xdc4>
   11cb4:	mov	r6, r7
   11cb8:	mov	r4, r5
   11cbc:	b	11c58 <__assert_fail@plt+0xdd0>
   11cc0:	mov	sl, r2
   11cc4:	mov	fp, r3
   11cc8:	mov	r4, r5
   11ccc:	b	11c58 <__assert_fail@plt+0xdd0>
   11cd0:	ldr	r3, [sp, #4]
   11cd4:	and	r6, r6, r3
   11cd8:	tst	r6, #255	; 0xff
   11cdc:	beq	11d00 <__assert_fail@plt+0xe78>
   11ce0:	cmp	r7, #0
   11ce4:	bne	11d28 <__assert_fail@plt+0xea0>
   11ce8:	cmp	r8, #0
   11cec:	beq	11d3c <__assert_fail@plt+0xeb4>
   11cf0:	mov	r0, sl
   11cf4:	mov	r1, fp
   11cf8:	bl	1180c <__assert_fail@plt+0x984>
   11cfc:	str	r0, [sp, #4]
   11d00:	ldr	r3, [sp, #4]
   11d04:	cmp	r3, #0
   11d08:	beq	11c4c <__assert_fail@plt+0xdc4>
   11d0c:	add	sp, sp, #28
   11d10:	ldrd	r4, [sp]
   11d14:	ldrd	r6, [sp, #8]
   11d18:	ldrd	r8, [sp, #16]
   11d1c:	ldrd	sl, [sp, #24]
   11d20:	add	sp, sp, #32
   11d24:	pop	{pc}		; (ldr pc, [sp], #4)
   11d28:	mov	r0, sl
   11d2c:	mov	r1, fp
   11d30:	bl	11798 <__assert_fail@plt+0x910>
   11d34:	str	r0, [sp, #4]
   11d38:	b	11d00 <__assert_fail@plt+0xe78>
   11d3c:	mov	r0, sl
   11d40:	mov	r1, fp
   11d44:	bl	11880 <__assert_fail@plt+0x9f8>
   11d48:	b	11d0c <__assert_fail@plt+0xe84>
   11d4c:	sub	r4, r4, #48	; 0x30
   11d50:	mov	sl, r4
   11d54:	asr	fp, r4, #31
   11d58:	mov	r9, r5
   11d5c:	mov	r4, r5
   11d60:	mov	r6, #1
   11d64:	b	11c58 <__assert_fail@plt+0xdd0>
   11d68:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11d6c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11d70:	strd	r4, [sp, #-16]!
   11d74:	str	r6, [sp, #8]
   11d78:	str	lr, [sp, #12]
   11d7c:	movw	r3, #29016	; 0x7158
   11d80:	movt	r3, #2
   11d84:	ldr	ip, [r3, #20]
   11d88:	ldr	r0, [r3, #16]
   11d8c:	cmp	r0, #0
   11d90:	beq	11e54 <__assert_fail@plt+0xfcc>
   11d94:	ldrd	r4, [ip]
   11d98:	orrs	r3, r4, r5
   11d9c:	movne	lr, ip
   11da0:	movne	r1, #0
   11da4:	beq	11dd8 <__assert_fail@plt+0xf50>
   11da8:	add	r1, r1, #1
   11dac:	cmp	r0, r1
   11db0:	beq	11ea4 <__assert_fail@plt+0x101c>
   11db4:	ldrd	r2, [lr, #8]!
   11db8:	orrs	r6, r2, r3
   11dbc:	beq	11dd8 <__assert_fail@plt+0xf50>
   11dc0:	cmp	r3, r5
   11dc4:	cmpeq	r2, r4
   11dc8:	bls	11dfc <__assert_fail@plt+0xf74>
   11dcc:	mov	r4, r2
   11dd0:	mov	r5, r3
   11dd4:	b	11da8 <__assert_fail@plt+0xf20>
   11dd8:	mov	r2, #5
   11ddc:	movw	r1, #24608	; 0x6020
   11de0:	movt	r1, #1
   11de4:	mov	r0, #0
   11de8:	bl	10ccc <dcgettext@plt>
   11dec:	mov	r2, r0
   11df0:	mov	r1, #0
   11df4:	mov	r0, #1
   11df8:	bl	10d38 <error@plt>
   11dfc:	mov	r2, #5
   11e00:	movw	r1, #24632	; 0x6038
   11e04:	movt	r1, #1
   11e08:	mov	r0, #0
   11e0c:	bl	10ccc <dcgettext@plt>
   11e10:	mov	r2, r0
   11e14:	mov	r1, #0
   11e18:	mov	r0, #1
   11e1c:	bl	10d38 <error@plt>
   11e20:	movw	r1, #29016	; 0x7158
   11e24:	movt	r1, #2
   11e28:	ldr	r4, [r1]
   11e2c:	ldr	lr, [r1, #4]
   11e30:	orr	r0, r2, r4
   11e34:	orr	r1, r3, lr
   11e38:	orrs	r3, r0, r1
   11e3c:	bne	11ed4 <__assert_fail@plt+0x104c>
   11e40:	movw	r3, #29016	; 0x7158
   11e44:	movt	r3, #2
   11e48:	ldrd	r0, [ip]
   11e4c:	strd	r0, [r3, #32]
   11e50:	b	11e94 <__assert_fail@plt+0x100c>
   11e54:	movw	r3, #29016	; 0x7158
   11e58:	movt	r3, #2
   11e5c:	ldrd	r2, [r3, #8]
   11e60:	orrs	r1, r2, r3
   11e64:	bne	11eec <__assert_fail@plt+0x1064>
   11e68:	movw	r3, #29016	; 0x7158
   11e6c:	movt	r3, #2
   11e70:	ldrd	r2, [r3]
   11e74:	orrs	r1, r2, r3
   11e78:	moveq	r2, #8
   11e7c:	movw	r3, #29016	; 0x7158
   11e80:	movt	r3, #2
   11e84:	str	r2, [r3, #28]
   11e88:	str	r2, [r3, #32]
   11e8c:	mov	r2, #0
   11e90:	str	r2, [r3, #36]	; 0x24
   11e94:	ldrd	r4, [sp]
   11e98:	ldr	r6, [sp, #8]
   11e9c:	add	sp, sp, #12
   11ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   11ea4:	movw	r3, #29016	; 0x7158
   11ea8:	movt	r3, #2
   11eac:	ldrd	r2, [r3, #8]
   11eb0:	orrs	r1, r2, r3
   11eb4:	beq	11ecc <__assert_fail@plt+0x1044>
   11eb8:	movw	r1, #29016	; 0x7158
   11ebc:	movt	r1, #2
   11ec0:	ldrd	r4, [r1]
   11ec4:	orrs	r1, r4, r5
   11ec8:	bne	11f00 <__assert_fail@plt+0x1078>
   11ecc:	cmp	r0, #1
   11ed0:	beq	11e20 <__assert_fail@plt+0xf98>
   11ed4:	movw	r3, #29016	; 0x7158
   11ed8:	movt	r3, #2
   11edc:	mov	r0, #0
   11ee0:	mov	r1, #0
   11ee4:	strd	r0, [r3, #32]
   11ee8:	b	11e94 <__assert_fail@plt+0x100c>
   11eec:	movw	r1, #29016	; 0x7158
   11ef0:	movt	r1, #2
   11ef4:	ldrd	r0, [r1]
   11ef8:	orrs	r1, r0, r1
   11efc:	beq	11e7c <__assert_fail@plt+0xff4>
   11f00:	mov	r2, #5
   11f04:	movw	r1, #24660	; 0x6054
   11f08:	movt	r1, #1
   11f0c:	mov	r0, #0
   11f10:	bl	10ccc <dcgettext@plt>
   11f14:	mov	r2, r0
   11f18:	mov	r1, #0
   11f1c:	mov	r0, #1
   11f20:	bl	10d38 <error@plt>
   11f24:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11f28:	strd	r6, [sp, #8]
   11f2c:	strd	r8, [sp, #16]
   11f30:	str	sl, [sp, #24]
   11f34:	str	lr, [sp, #28]
   11f38:	mov	r6, r0
   11f3c:	mov	r7, r1
   11f40:	mov	r1, #0
   11f44:	strb	r1, [r3]
   11f48:	movw	r1, #29016	; 0x7158
   11f4c:	movt	r1, #2
   11f50:	ldrd	r0, [r1, #32]
   11f54:	orrs	ip, r0, r1
   11f58:	bne	11fc0 <__assert_fail@plt+0x1138>
   11f5c:	ldr	r1, [r2]
   11f60:	movw	r0, #29016	; 0x7158
   11f64:	movt	r0, #2
   11f68:	ldr	ip, [r0, #16]
   11f6c:	cmp	r1, ip
   11f70:	bcs	12004 <__assert_fail@plt+0x117c>
   11f74:	movw	r0, #29016	; 0x7158
   11f78:	movt	r0, #2
   11f7c:	lsl	lr, r1, #3
   11f80:	ldr	r4, [r0, #20]
   11f84:	add	r0, r4, lr
   11f88:	ldrd	r4, [r4, lr]
   11f8c:	cmp	r7, r5
   11f90:	cmpeq	r6, r4
   11f94:	bcc	11fe4 <__assert_fail@plt+0x115c>
   11f98:	add	r1, r1, #1
   11f9c:	str	r1, [r2]
   11fa0:	cmp	r1, ip
   11fa4:	beq	12004 <__assert_fail@plt+0x117c>
   11fa8:	ldrd	r4, [r0, #8]!
   11fac:	add	r1, r1, #1
   11fb0:	cmp	r7, r5
   11fb4:	cmpeq	r6, r4
   11fb8:	bcs	11f9c <__assert_fail@plt+0x1114>
   11fbc:	b	11fe4 <__assert_fail@plt+0x115c>
   11fc0:	adds	r8, r0, r6
   11fc4:	adc	r9, r1, r7
   11fc8:	mov	r2, r0
   11fcc:	mov	r3, r1
   11fd0:	mov	r0, r6
   11fd4:	mov	r1, r7
   11fd8:	bl	15890 <__assert_fail@plt+0x4a08>
   11fdc:	subs	r4, r8, r2
   11fe0:	sbc	r5, r9, r3
   11fe4:	mov	r0, r4
   11fe8:	mov	r1, r5
   11fec:	ldrd	r4, [sp]
   11ff0:	ldrd	r6, [sp, #8]
   11ff4:	ldrd	r8, [sp, #16]
   11ff8:	ldr	sl, [sp, #24]
   11ffc:	add	sp, sp, #28
   12000:	pop	{pc}		; (ldr pc, [sp], #4)
   12004:	movw	r2, #29016	; 0x7158
   12008:	movt	r2, #2
   1200c:	ldrd	r0, [r2]
   12010:	orrs	r2, r0, r1
   12014:	bne	12074 <__assert_fail@plt+0x11ec>
   12018:	movw	r2, #29016	; 0x7158
   1201c:	movt	r2, #2
   12020:	ldrd	r4, [r2, #8]
   12024:	orrs	r2, r4, r5
   12028:	moveq	r2, #1
   1202c:	strbeq	r2, [r3]
   12030:	beq	11fe4 <__assert_fail@plt+0x115c>
   12034:	adds	r8, r4, r6
   12038:	adc	r9, r5, r7
   1203c:	movw	r3, #29016	; 0x7158
   12040:	movt	r3, #2
   12044:	ldr	r3, [r3, #20]
   12048:	add	ip, r3, ip, lsl #3
   1204c:	ldr	r0, [ip, #-8]
   12050:	ldr	r1, [ip, #-4]
   12054:	mov	r2, r4
   12058:	mov	r3, r5
   1205c:	subs	r0, r6, r0
   12060:	sbc	r1, r7, r1
   12064:	bl	15890 <__assert_fail@plt+0x4a08>
   12068:	subs	r4, r8, r2
   1206c:	sbc	r5, r9, r3
   12070:	b	11fe4 <__assert_fail@plt+0x115c>
   12074:	adds	r8, r0, r6
   12078:	adc	r9, r1, r7
   1207c:	mov	r2, r0
   12080:	mov	r3, r1
   12084:	mov	r0, r6
   12088:	mov	r1, r7
   1208c:	bl	15890 <__assert_fail@plt+0x4a08>
   12090:	subs	r4, r8, r2
   12094:	sbc	r5, r9, r3
   12098:	b	11fe4 <__assert_fail@plt+0x115c>
   1209c:	movw	r3, #29016	; 0x7158
   120a0:	movt	r3, #2
   120a4:	mov	r2, #0
   120a8:	strb	r2, [r3, #40]	; 0x28
   120ac:	movw	r3, #28896	; 0x70e0
   120b0:	movt	r3, #2
   120b4:	cmp	r0, r2
   120b8:	moveq	r0, r3
   120bc:	movw	r3, #29016	; 0x7158
   120c0:	movt	r3, #2
   120c4:	str	r0, [r3, #44]	; 0x2c
   120c8:	bx	lr
   120cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   120d0:	strd	r6, [sp, #8]
   120d4:	str	r8, [sp, #16]
   120d8:	str	lr, [sp, #20]
   120dc:	subs	r5, r0, #0
   120e0:	beq	1213c <__assert_fail@plt+0x12b4>
   120e4:	movw	r3, #29016	; 0x7158
   120e8:	movt	r3, #2
   120ec:	ldr	r6, [r3, #48]	; 0x30
   120f0:	cmp	r6, #0
   120f4:	beq	12174 <__assert_fail@plt+0x12ec>
   120f8:	bl	10da4 <__errno_location@plt>
   120fc:	mov	r7, r0
   12100:	ldr	r4, [r0]
   12104:	ldr	r3, [r5]
   12108:	and	r3, r3, #32
   1210c:	cmp	r3, #0
   12110:	moveq	r4, r3
   12114:	movw	r1, #24740	; 0x60a4
   12118:	movt	r1, #1
   1211c:	mov	r0, r6
   12120:	bl	10c60 <strcmp@plt>
   12124:	cmp	r0, #0
   12128:	bne	12194 <__assert_fail@plt+0x130c>
   1212c:	mov	r0, r5
   12130:	bl	10e40 <clearerr_unlocked@plt>
   12134:	cmp	r4, #0
   12138:	bne	121a8 <__assert_fail@plt+0x1320>
   1213c:	movw	r3, #29016	; 0x7158
   12140:	movt	r3, #2
   12144:	ldr	r2, [r3, #44]	; 0x2c
   12148:	add	r1, r2, #4
   1214c:	str	r1, [r3, #44]	; 0x2c
   12150:	ldr	r4, [r2]
   12154:	cmp	r4, #0
   12158:	beq	12294 <__assert_fail@plt+0x140c>
   1215c:	movw	r7, #24740	; 0x60a4
   12160:	movt	r7, #1
   12164:	movw	r8, #24744	; 0x60a8
   12168:	movt	r8, #1
   1216c:	mov	r5, r3
   12170:	b	1224c <__assert_fail@plt+0x13c4>
   12174:	movw	r3, #24304	; 0x5ef0
   12178:	movt	r3, #1
   1217c:	mov	r2, #340	; 0x154
   12180:	movw	r1, #24708	; 0x6084
   12184:	movt	r1, #1
   12188:	movw	r0, #24728	; 0x6098
   1218c:	movt	r0, #1
   12190:	bl	10e88 <__assert_fail@plt>
   12194:	mov	r0, r5
   12198:	bl	124f8 <__assert_fail@plt+0x1670>
   1219c:	cmp	r0, #0
   121a0:	ldrne	r4, [r7]
   121a4:	b	12134 <__assert_fail@plt+0x12ac>
   121a8:	movw	r5, #29016	; 0x7158
   121ac:	movt	r5, #2
   121b0:	ldr	r2, [r5, #48]	; 0x30
   121b4:	mov	r1, #3
   121b8:	mov	r0, #0
   121bc:	bl	14874 <__assert_fail@plt+0x39ec>
   121c0:	mov	r3, r0
   121c4:	movw	r2, #24604	; 0x601c
   121c8:	movt	r2, #1
   121cc:	mov	r1, r4
   121d0:	mov	r0, #0
   121d4:	bl	10d38 <error@plt>
   121d8:	mov	r3, #1
   121dc:	str	r3, [r5, #52]	; 0x34
   121e0:	b	1213c <__assert_fail@plt+0x12b4>
   121e4:	mov	r1, r8
   121e8:	mov	r0, r4
   121ec:	bl	10e4c <fopen64@plt>
   121f0:	mov	r6, r0
   121f4:	cmp	r6, #0
   121f8:	bne	12278 <__assert_fail@plt+0x13f0>
   121fc:	bl	10da4 <__errno_location@plt>
   12200:	ldr	r6, [r0]
   12204:	mov	r2, r4
   12208:	mov	r1, #3
   1220c:	mov	r0, #0
   12210:	bl	14874 <__assert_fail@plt+0x39ec>
   12214:	mov	r3, r0
   12218:	movw	r2, #24604	; 0x601c
   1221c:	movt	r2, #1
   12220:	mov	r1, r6
   12224:	mov	r0, #0
   12228:	bl	10d38 <error@plt>
   1222c:	mov	r3, #1
   12230:	str	r3, [r5, #52]	; 0x34
   12234:	ldr	r3, [r5, #44]	; 0x2c
   12238:	add	r2, r3, #4
   1223c:	str	r2, [r5, #44]	; 0x2c
   12240:	ldr	r4, [r3]
   12244:	cmp	r4, #0
   12248:	beq	12294 <__assert_fail@plt+0x140c>
   1224c:	mov	r1, r7
   12250:	mov	r0, r4
   12254:	bl	10c60 <strcmp@plt>
   12258:	cmp	r0, #0
   1225c:	bne	121e4 <__assert_fail@plt+0x135c>
   12260:	mov	r3, #1
   12264:	strb	r3, [r5, #40]	; 0x28
   12268:	movw	r3, #29000	; 0x7148
   1226c:	movt	r3, #2
   12270:	ldr	r6, [r3]
   12274:	b	121f4 <__assert_fail@plt+0x136c>
   12278:	movw	r3, #29016	; 0x7158
   1227c:	movt	r3, #2
   12280:	str	r4, [r3, #48]	; 0x30
   12284:	mov	r1, #2
   12288:	mov	r0, r6
   1228c:	bl	124b8 <__assert_fail@plt+0x1630>
   12290:	mov	r4, r6
   12294:	mov	r0, r4
   12298:	ldrd	r4, [sp]
   1229c:	ldrd	r6, [sp, #8]
   122a0:	ldr	r8, [sp, #16]
   122a4:	add	sp, sp, #20
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	movw	r3, #29016	; 0x7158
   122b0:	movt	r3, #2
   122b4:	ldrb	r3, [r3, #40]	; 0x28
   122b8:	cmp	r3, #0
   122bc:	bxeq	lr
   122c0:	str	r4, [sp, #-8]!
   122c4:	str	lr, [sp, #4]
   122c8:	movw	r3, #29000	; 0x7148
   122cc:	movt	r3, #2
   122d0:	ldr	r0, [r3]
   122d4:	bl	124f8 <__assert_fail@plt+0x1670>
   122d8:	cmp	r0, #0
   122dc:	bne	122ec <__assert_fail@plt+0x1464>
   122e0:	ldr	r4, [sp]
   122e4:	add	sp, sp, #4
   122e8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ec:	bl	10da4 <__errno_location@plt>
   122f0:	movw	r2, #24740	; 0x60a4
   122f4:	movt	r2, #1
   122f8:	ldr	r1, [r0]
   122fc:	mov	r0, #1
   12300:	bl	10d38 <error@plt>
   12304:	str	r4, [sp, #-8]!
   12308:	str	lr, [sp, #4]
   1230c:	mov	r2, #5
   12310:	movw	r1, #24748	; 0x60ac
   12314:	movt	r1, #1
   12318:	mov	r0, #0
   1231c:	bl	10ccc <dcgettext@plt>
   12320:	movw	r4, #29004	; 0x714c
   12324:	movt	r4, #2
   12328:	ldr	r1, [r4]
   1232c:	bl	10c48 <fputs_unlocked@plt>
   12330:	mov	r2, #5
   12334:	movw	r1, #24812	; 0x60ec
   12338:	movt	r1, #1
   1233c:	mov	r0, #0
   12340:	bl	10ccc <dcgettext@plt>
   12344:	ldr	r1, [r4]
   12348:	bl	10c48 <fputs_unlocked@plt>
   1234c:	ldr	r4, [sp]
   12350:	add	sp, sp, #4
   12354:	pop	{pc}		; (ldr pc, [sp], #4)
   12358:	movw	r3, #29076	; 0x7194
   1235c:	movt	r3, #2
   12360:	str	r0, [r3]
   12364:	bx	lr
   12368:	movw	r3, #29076	; 0x7194
   1236c:	movt	r3, #2
   12370:	strb	r0, [r3, #4]
   12374:	bx	lr
   12378:	strd	r4, [sp, #-16]!
   1237c:	str	r6, [sp, #8]
   12380:	str	lr, [sp, #12]
   12384:	sub	sp, sp, #8
   12388:	movw	r3, #29004	; 0x714c
   1238c:	movt	r3, #2
   12390:	ldr	r0, [r3]
   12394:	bl	155f8 <__assert_fail@plt+0x4770>
   12398:	cmp	r0, #0
   1239c:	beq	123c4 <__assert_fail@plt+0x153c>
   123a0:	movw	r3, #29076	; 0x7194
   123a4:	movt	r3, #2
   123a8:	ldrb	r3, [r3, #4]
   123ac:	cmp	r3, #0
   123b0:	beq	123f0 <__assert_fail@plt+0x1568>
   123b4:	bl	10da4 <__errno_location@plt>
   123b8:	ldr	r3, [r0]
   123bc:	cmp	r3, #32
   123c0:	bne	123f0 <__assert_fail@plt+0x1568>
   123c4:	movw	r3, #28992	; 0x7140
   123c8:	movt	r3, #2
   123cc:	ldr	r0, [r3]
   123d0:	bl	155f8 <__assert_fail@plt+0x4770>
   123d4:	cmp	r0, #0
   123d8:	bne	12478 <__assert_fail@plt+0x15f0>
   123dc:	add	sp, sp, #8
   123e0:	ldrd	r4, [sp]
   123e4:	ldr	r6, [sp, #8]
   123e8:	add	sp, sp, #12
   123ec:	pop	{pc}		; (ldr pc, [sp], #4)
   123f0:	mov	r2, #5
   123f4:	movw	r1, #24152	; 0x5e58
   123f8:	movt	r1, #1
   123fc:	mov	r0, #0
   12400:	bl	10ccc <dcgettext@plt>
   12404:	mov	r4, r0
   12408:	movw	r3, #29076	; 0x7194
   1240c:	movt	r3, #2
   12410:	ldr	r5, [r3]
   12414:	cmp	r5, #0
   12418:	beq	12458 <__assert_fail@plt+0x15d0>
   1241c:	bl	10da4 <__errno_location@plt>
   12420:	ldr	r6, [r0]
   12424:	mov	r0, r5
   12428:	bl	1483c <__assert_fail@plt+0x39b4>
   1242c:	str	r4, [sp]
   12430:	mov	r3, r0
   12434:	movw	r2, #25196	; 0x626c
   12438:	movt	r2, #1
   1243c:	mov	r1, r6
   12440:	mov	r0, #0
   12444:	bl	10d38 <error@plt>
   12448:	movw	r3, #28908	; 0x70ec
   1244c:	movt	r3, #2
   12450:	ldr	r0, [r3]
   12454:	bl	10c90 <_exit@plt>
   12458:	bl	10da4 <__errno_location@plt>
   1245c:	mov	r3, r4
   12460:	movw	r2, #24604	; 0x601c
   12464:	movt	r2, #1
   12468:	ldr	r1, [r0]
   1246c:	mov	r0, #0
   12470:	bl	10d38 <error@plt>
   12474:	b	12448 <__assert_fail@plt+0x15c0>
   12478:	movw	r3, #28908	; 0x70ec
   1247c:	movt	r3, #2
   12480:	ldr	r0, [r3]
   12484:	bl	10c90 <_exit@plt>
   12488:	strd	r4, [sp, #-12]!
   1248c:	str	lr, [sp, #8]
   12490:	sub	sp, sp, #20
   12494:	ldr	r1, [sp, #40]	; 0x28
   12498:	str	r1, [sp, #8]
   1249c:	ldrd	r4, [sp, #32]
   124a0:	strd	r4, [sp]
   124a4:	bl	10c6c <posix_fadvise64@plt>
   124a8:	add	sp, sp, #20
   124ac:	ldrd	r4, [sp]
   124b0:	add	sp, sp, #8
   124b4:	pop	{pc}		; (ldr pc, [sp], #4)
   124b8:	cmp	r0, #0
   124bc:	bxeq	lr
   124c0:	str	r4, [sp, #-8]!
   124c4:	str	lr, [sp, #4]
   124c8:	sub	sp, sp, #16
   124cc:	mov	r4, r1
   124d0:	bl	10dd4 <fileno@plt>
   124d4:	str	r4, [sp, #8]
   124d8:	mov	r2, #0
   124dc:	mov	r3, #0
   124e0:	strd	r2, [sp]
   124e4:	bl	10c6c <posix_fadvise64@plt>
   124e8:	add	sp, sp, #16
   124ec:	ldr	r4, [sp]
   124f0:	add	sp, sp, #4
   124f4:	pop	{pc}		; (ldr pc, [sp], #4)
   124f8:	strd	r4, [sp, #-16]!
   124fc:	str	r6, [sp, #8]
   12500:	str	lr, [sp, #12]
   12504:	sub	sp, sp, #8
   12508:	mov	r4, r0
   1250c:	bl	10dd4 <fileno@plt>
   12510:	cmp	r0, #0
   12514:	blt	1258c <__assert_fail@plt+0x1704>
   12518:	mov	r0, r4
   1251c:	bl	10d5c <__freading@plt>
   12520:	cmp	r0, #0
   12524:	beq	12558 <__assert_fail@plt+0x16d0>
   12528:	mov	r0, r4
   1252c:	bl	10dd4 <fileno@plt>
   12530:	mov	r3, #1
   12534:	str	r3, [sp]
   12538:	mov	r2, #0
   1253c:	mov	r3, #0
   12540:	bl	10d08 <lseek64@plt>
   12544:	mvn	r2, #0
   12548:	mvn	r3, #0
   1254c:	cmp	r1, r3
   12550:	cmpeq	r0, r2
   12554:	beq	12598 <__assert_fail@plt+0x1710>
   12558:	mov	r0, r4
   1255c:	bl	125b4 <__assert_fail@plt+0x172c>
   12560:	cmp	r0, #0
   12564:	beq	12598 <__assert_fail@plt+0x1710>
   12568:	bl	10da4 <__errno_location@plt>
   1256c:	mov	r5, r0
   12570:	ldr	r6, [r0]
   12574:	mov	r0, r4
   12578:	bl	10dec <fclose@plt>
   1257c:	cmp	r6, #0
   12580:	strne	r6, [r5]
   12584:	mvnne	r0, #0
   12588:	b	125a0 <__assert_fail@plt+0x1718>
   1258c:	mov	r0, r4
   12590:	bl	10dec <fclose@plt>
   12594:	b	125a0 <__assert_fail@plt+0x1718>
   12598:	mov	r0, r4
   1259c:	bl	10dec <fclose@plt>
   125a0:	add	sp, sp, #8
   125a4:	ldrd	r4, [sp]
   125a8:	ldr	r6, [sp, #8]
   125ac:	add	sp, sp, #12
   125b0:	pop	{pc}		; (ldr pc, [sp], #4)
   125b4:	str	r4, [sp, #-8]!
   125b8:	str	lr, [sp, #4]
   125bc:	sub	sp, sp, #8
   125c0:	subs	r4, r0, #0
   125c4:	beq	125d8 <__assert_fail@plt+0x1750>
   125c8:	mov	r0, r4
   125cc:	bl	10d5c <__freading@plt>
   125d0:	cmp	r0, #0
   125d4:	bne	125f0 <__assert_fail@plt+0x1768>
   125d8:	mov	r0, r4
   125dc:	bl	10c78 <fflush@plt>
   125e0:	add	sp, sp, #8
   125e4:	ldr	r4, [sp]
   125e8:	add	sp, sp, #4
   125ec:	pop	{pc}		; (ldr pc, [sp], #4)
   125f0:	ldr	r3, [r4]
   125f4:	tst	r3, #256	; 0x100
   125f8:	bne	12608 <__assert_fail@plt+0x1780>
   125fc:	mov	r0, r4
   12600:	bl	10c78 <fflush@plt>
   12604:	b	125e0 <__assert_fail@plt+0x1758>
   12608:	mov	r3, #1
   1260c:	str	r3, [sp]
   12610:	mov	r2, #0
   12614:	mov	r3, #0
   12618:	mov	r0, r4
   1261c:	bl	12684 <__assert_fail@plt+0x17fc>
   12620:	b	125fc <__assert_fail@plt+0x1774>
   12624:	strd	r4, [sp, #-12]!
   12628:	str	lr, [sp, #8]
   1262c:	sub	sp, sp, #12
   12630:	mov	r5, r0
   12634:	bl	10da4 <__errno_location@plt>
   12638:	mov	r4, r0
   1263c:	ldr	r3, [r0]
   12640:	str	r3, [sp]
   12644:	str	r3, [sp, #4]
   12648:	mov	r3, #0
   1264c:	str	r3, [r0]
   12650:	mov	r0, r5
   12654:	bl	10c84 <free@plt>
   12658:	ldr	r3, [r4]
   1265c:	clz	r3, r3
   12660:	lsr	r3, r3, #5
   12664:	add	r2, sp, #8
   12668:	add	r3, r2, r3, lsl #2
   1266c:	ldr	r3, [r3, #-8]
   12670:	str	r3, [r4]
   12674:	add	sp, sp, #12
   12678:	ldrd	r4, [sp]
   1267c:	add	sp, sp, #8
   12680:	pop	{pc}		; (ldr pc, [sp], #4)
   12684:	str	r4, [sp, #-16]!
   12688:	strd	r6, [sp, #4]
   1268c:	str	lr, [sp, #12]
   12690:	sub	sp, sp, #8
   12694:	mov	r4, r0
   12698:	mov	r6, r2
   1269c:	mov	r7, r3
   126a0:	ldr	r2, [r0, #8]
   126a4:	ldr	r3, [r0, #4]
   126a8:	cmp	r2, r3
   126ac:	beq	126dc <__assert_fail@plt+0x1854>
   126b0:	ldr	r3, [sp, #24]
   126b4:	str	r3, [sp]
   126b8:	mov	r2, r6
   126bc:	mov	r3, r7
   126c0:	mov	r0, r4
   126c4:	bl	10df8 <fseeko64@plt>
   126c8:	add	sp, sp, #8
   126cc:	ldr	r4, [sp]
   126d0:	ldrd	r6, [sp, #4]
   126d4:	add	sp, sp, #12
   126d8:	pop	{pc}		; (ldr pc, [sp], #4)
   126dc:	ldr	r2, [r0, #20]
   126e0:	ldr	r3, [r0, #16]
   126e4:	cmp	r2, r3
   126e8:	bne	126b0 <__assert_fail@plt+0x1828>
   126ec:	ldr	r3, [r0, #36]	; 0x24
   126f0:	cmp	r3, #0
   126f4:	bne	126b0 <__assert_fail@plt+0x1828>
   126f8:	bl	10dd4 <fileno@plt>
   126fc:	ldr	r3, [sp, #24]
   12700:	str	r3, [sp]
   12704:	mov	r2, r6
   12708:	mov	r3, r7
   1270c:	bl	10d08 <lseek64@plt>
   12710:	mvn	r2, #0
   12714:	mvn	r3, #0
   12718:	cmp	r1, r3
   1271c:	cmpeq	r0, r2
   12720:	beq	1273c <__assert_fail@plt+0x18b4>
   12724:	ldr	r3, [r4]
   12728:	bic	r3, r3, #16
   1272c:	str	r3, [r4]
   12730:	strd	r0, [r4, #80]	; 0x50
   12734:	mov	r0, #0
   12738:	b	126c8 <__assert_fail@plt+0x1840>
   1273c:	mvn	r0, #0
   12740:	b	126c8 <__assert_fail@plt+0x1840>
   12744:	strd	r4, [sp, #-16]!
   12748:	str	r6, [sp, #8]
   1274c:	str	lr, [sp, #12]
   12750:	subs	r4, r0, #0
   12754:	beq	127f0 <__assert_fail@plt+0x1968>
   12758:	mov	r1, #47	; 0x2f
   1275c:	mov	r0, r4
   12760:	bl	10e28 <strrchr@plt>
   12764:	subs	r5, r0, #0
   12768:	beq	127c8 <__assert_fail@plt+0x1940>
   1276c:	add	r6, r5, #1
   12770:	sub	r3, r6, r4
   12774:	cmp	r3, #6
   12778:	ble	127c8 <__assert_fail@plt+0x1940>
   1277c:	mov	r2, #7
   12780:	movw	r1, #25260	; 0x62ac
   12784:	movt	r1, #1
   12788:	sub	r0, r5, #6
   1278c:	bl	10e64 <strncmp@plt>
   12790:	cmp	r0, #0
   12794:	bne	127c8 <__assert_fail@plt+0x1940>
   12798:	mov	r2, #3
   1279c:	movw	r1, #25268	; 0x62b4
   127a0:	movt	r1, #1
   127a4:	mov	r0, r6
   127a8:	bl	10e64 <strncmp@plt>
   127ac:	cmp	r0, #0
   127b0:	movne	r4, r6
   127b4:	bne	127c8 <__assert_fail@plt+0x1940>
   127b8:	add	r4, r5, #4
   127bc:	movw	r3, #28976	; 0x7130
   127c0:	movt	r3, #2
   127c4:	str	r4, [r3]
   127c8:	movw	r3, #29084	; 0x719c
   127cc:	movt	r3, #2
   127d0:	str	r4, [r3]
   127d4:	movw	r3, #28980	; 0x7134
   127d8:	movt	r3, #2
   127dc:	str	r4, [r3]
   127e0:	ldrd	r4, [sp]
   127e4:	ldr	r6, [sp, #8]
   127e8:	add	sp, sp, #12
   127ec:	pop	{pc}		; (ldr pc, [sp], #4)
   127f0:	movw	r3, #28992	; 0x7140
   127f4:	movt	r3, #2
   127f8:	ldr	r3, [r3]
   127fc:	mov	r2, #55	; 0x37
   12800:	mov	r1, #1
   12804:	movw	r0, #25204	; 0x6274
   12808:	movt	r0, #1
   1280c:	bl	10cfc <fwrite@plt>
   12810:	bl	10e70 <abort@plt>
   12814:	mov	r2, #0
   12818:	mov	r3, #0
   1281c:	strd	r2, [r0]
   12820:	strd	r2, [r0, #8]
   12824:	strd	r2, [r0, #16]
   12828:	strd	r2, [r0, #24]
   1282c:	strd	r2, [r0, #32]
   12830:	strd	r2, [r0, #40]	; 0x28
   12834:	cmp	r1, #10
   12838:	beq	12844 <__assert_fail@plt+0x19bc>
   1283c:	str	r1, [r0]
   12840:	bx	lr
   12844:	str	r4, [sp, #-8]!
   12848:	str	lr, [sp, #4]
   1284c:	bl	10e70 <abort@plt>
   12850:	strd	r4, [sp, #-16]!
   12854:	str	r6, [sp, #8]
   12858:	str	lr, [sp, #12]
   1285c:	mov	r5, r0
   12860:	mov	r6, r1
   12864:	mov	r2, #5
   12868:	mov	r1, r0
   1286c:	mov	r0, #0
   12870:	bl	10ccc <dcgettext@plt>
   12874:	mov	r4, r0
   12878:	cmp	r5, r0
   1287c:	beq	12894 <__assert_fail@plt+0x1a0c>
   12880:	mov	r0, r4
   12884:	ldrd	r4, [sp]
   12888:	ldr	r6, [sp, #8]
   1288c:	add	sp, sp, #12
   12890:	pop	{pc}		; (ldr pc, [sp], #4)
   12894:	bl	15684 <__assert_fail@plt+0x47fc>
   12898:	ldrb	r3, [r0]
   1289c:	bic	r3, r3, #32
   128a0:	cmp	r3, #85	; 0x55
   128a4:	bne	12928 <__assert_fail@plt+0x1aa0>
   128a8:	ldrb	r3, [r0, #1]
   128ac:	bic	r3, r3, #32
   128b0:	cmp	r3, #84	; 0x54
   128b4:	bne	128ec <__assert_fail@plt+0x1a64>
   128b8:	ldrb	r3, [r0, #2]
   128bc:	bic	r3, r3, #32
   128c0:	cmp	r3, #70	; 0x46
   128c4:	bne	128ec <__assert_fail@plt+0x1a64>
   128c8:	ldrb	r3, [r0, #3]
   128cc:	cmp	r3, #45	; 0x2d
   128d0:	bne	128ec <__assert_fail@plt+0x1a64>
   128d4:	ldrb	r3, [r0, #4]
   128d8:	cmp	r3, #56	; 0x38
   128dc:	bne	128ec <__assert_fail@plt+0x1a64>
   128e0:	ldrb	r3, [r0, #5]
   128e4:	cmp	r3, #0
   128e8:	beq	12908 <__assert_fail@plt+0x1a80>
   128ec:	movw	r4, #25356	; 0x630c
   128f0:	movt	r4, #1
   128f4:	movw	r3, #25376	; 0x6320
   128f8:	movt	r3, #1
   128fc:	cmp	r6, #9
   12900:	movne	r4, r3
   12904:	b	12880 <__assert_fail@plt+0x19f8>
   12908:	ldrb	r2, [r4]
   1290c:	movw	r4, #25372	; 0x631c
   12910:	movt	r4, #1
   12914:	movw	r3, #25360	; 0x6310
   12918:	movt	r3, #1
   1291c:	cmp	r2, #96	; 0x60
   12920:	movne	r4, r3
   12924:	b	12880 <__assert_fail@plt+0x19f8>
   12928:	cmp	r3, #71	; 0x47
   1292c:	bne	128ec <__assert_fail@plt+0x1a64>
   12930:	ldrb	r3, [r0, #1]
   12934:	bic	r3, r3, #32
   12938:	cmp	r3, #66	; 0x42
   1293c:	bne	128ec <__assert_fail@plt+0x1a64>
   12940:	ldrb	r3, [r0, #2]
   12944:	cmp	r3, #49	; 0x31
   12948:	bne	128ec <__assert_fail@plt+0x1a64>
   1294c:	ldrb	r3, [r0, #3]
   12950:	cmp	r3, #56	; 0x38
   12954:	bne	128ec <__assert_fail@plt+0x1a64>
   12958:	ldrb	r3, [r0, #4]
   1295c:	cmp	r3, #48	; 0x30
   12960:	bne	128ec <__assert_fail@plt+0x1a64>
   12964:	ldrb	r3, [r0, #5]
   12968:	cmp	r3, #51	; 0x33
   1296c:	bne	128ec <__assert_fail@plt+0x1a64>
   12970:	ldrb	r3, [r0, #6]
   12974:	cmp	r3, #48	; 0x30
   12978:	bne	128ec <__assert_fail@plt+0x1a64>
   1297c:	ldrb	r3, [r0, #7]
   12980:	cmp	r3, #0
   12984:	bne	128ec <__assert_fail@plt+0x1a64>
   12988:	ldrb	r2, [r4]
   1298c:	movw	r4, #25368	; 0x6318
   12990:	movt	r4, #1
   12994:	movw	r3, #25364	; 0x6314
   12998:	movt	r3, #1
   1299c:	cmp	r2, #96	; 0x60
   129a0:	movne	r4, r3
   129a4:	b	12880 <__assert_fail@plt+0x19f8>
   129a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129ac:	strd	r6, [sp, #8]
   129b0:	strd	r8, [sp, #16]
   129b4:	strd	sl, [sp, #24]
   129b8:	str	lr, [sp, #32]
   129bc:	sub	sp, sp, #116	; 0x74
   129c0:	str	r0, [sp, #64]	; 0x40
   129c4:	mov	r8, r1
   129c8:	str	r2, [sp, #48]	; 0x30
   129cc:	str	r3, [sp, #24]
   129d0:	ldr	r7, [sp, #152]	; 0x98
   129d4:	bl	10d14 <__ctype_get_mb_cur_max@plt>
   129d8:	str	r0, [sp, #76]	; 0x4c
   129dc:	ldr	r3, [sp, #156]	; 0x9c
   129e0:	ubfx	r3, r3, #1, #1
   129e4:	str	r3, [sp, #32]
   129e8:	mov	r3, #1
   129ec:	str	r3, [sp, #40]	; 0x28
   129f0:	mov	r3, #0
   129f4:	str	r3, [sp, #68]	; 0x44
   129f8:	str	r3, [sp, #36]	; 0x24
   129fc:	str	r3, [sp, #28]
   12a00:	str	r3, [sp, #52]	; 0x34
   12a04:	str	r3, [sp, #60]	; 0x3c
   12a08:	str	r3, [sp, #72]	; 0x48
   12a0c:	movw	r3, #25380	; 0x6324
   12a10:	movt	r3, #1
   12a14:	str	r3, [sp, #80]	; 0x50
   12a18:	mov	r9, r8
   12a1c:	mov	sl, r7
   12a20:	cmp	sl, #10
   12a24:	ldrls	pc, [pc, sl, lsl #2]
   12a28:	b	12bec <__assert_fail@plt+0x1d64>
   12a2c:	andeq	r2, r1, ip, lsl #21
   12a30:	andeq	r2, r1, r0, ror #20
   12a34:	andeq	r2, r1, r4, asr #23
   12a38:	andeq	r2, r1, r8, asr sl
   12a3c:	andeq	r2, r1, r8, ror fp
   12a40:	muleq	r1, ip, sl
   12a44:	andeq	r3, r1, r8, ror #28
   12a48:	strdeq	r2, [r1], -r0
   12a4c:	ldrdeq	r2, [r1], -r8
   12a50:	ldrdeq	r2, [r1], -r8
   12a54:	ldrdeq	r2, [r1], -r8
   12a58:	mov	r3, #1
   12a5c:	str	r3, [sp, #28]
   12a60:	mov	r3, #1
   12a64:	str	r3, [sp, #32]
   12a68:	str	r3, [sp, #52]	; 0x34
   12a6c:	movw	r3, #25376	; 0x6320
   12a70:	movt	r3, #1
   12a74:	str	r3, [sp, #60]	; 0x3c
   12a78:	mov	fp, #0
   12a7c:	mov	sl, #2
   12a80:	mov	r6, #0
   12a84:	ldr	r8, [sp, #64]	; 0x40
   12a88:	b	13300 <__assert_fail@plt+0x2478>
   12a8c:	mov	fp, sl
   12a90:	mov	r3, #0
   12a94:	str	r3, [sp, #32]
   12a98:	b	12a80 <__assert_fail@plt+0x1bf8>
   12a9c:	ldr	r3, [sp, #32]
   12aa0:	cmp	r3, #0
   12aa4:	bne	12c04 <__assert_fail@plt+0x1d7c>
   12aa8:	cmp	r9, #0
   12aac:	beq	12c28 <__assert_fail@plt+0x1da0>
   12ab0:	mov	r3, #34	; 0x22
   12ab4:	ldr	r2, [sp, #64]	; 0x40
   12ab8:	strb	r3, [r2]
   12abc:	mov	fp, #1
   12ac0:	str	fp, [sp, #28]
   12ac4:	str	fp, [sp, #52]	; 0x34
   12ac8:	movw	r3, #25356	; 0x630c
   12acc:	movt	r3, #1
   12ad0:	str	r3, [sp, #60]	; 0x3c
   12ad4:	b	12a80 <__assert_fail@plt+0x1bf8>
   12ad8:	cmp	sl, #10
   12adc:	bne	12b10 <__assert_fail@plt+0x1c88>
   12ae0:	ldr	r3, [sp, #32]
   12ae4:	cmp	r3, #0
   12ae8:	movne	fp, #0
   12aec:	beq	12b38 <__assert_fail@plt+0x1cb0>
   12af0:	ldr	r0, [sp, #168]	; 0xa8
   12af4:	bl	10d98 <strlen@plt>
   12af8:	str	r0, [sp, #52]	; 0x34
   12afc:	ldr	r3, [sp, #168]	; 0xa8
   12b00:	str	r3, [sp, #60]	; 0x3c
   12b04:	mov	r3, #1
   12b08:	str	r3, [sp, #28]
   12b0c:	b	12a80 <__assert_fail@plt+0x1bf8>
   12b10:	mov	r1, sl
   12b14:	ldr	r0, [sp, #80]	; 0x50
   12b18:	bl	12850 <__assert_fail@plt+0x19c8>
   12b1c:	str	r0, [sp, #164]	; 0xa4
   12b20:	mov	r1, sl
   12b24:	movw	r0, #25376	; 0x6320
   12b28:	movt	r0, #1
   12b2c:	bl	12850 <__assert_fail@plt+0x19c8>
   12b30:	str	r0, [sp, #168]	; 0xa8
   12b34:	b	12ae0 <__assert_fail@plt+0x1c58>
   12b38:	ldr	r3, [sp, #164]	; 0xa4
   12b3c:	ldrb	r3, [r3]
   12b40:	cmp	r3, #0
   12b44:	beq	12b70 <__assert_fail@plt+0x1ce8>
   12b48:	ldr	r2, [sp, #164]	; 0xa4
   12b4c:	mov	fp, #0
   12b50:	ldr	r1, [sp, #64]	; 0x40
   12b54:	cmp	r9, fp
   12b58:	strbhi	r3, [r1, fp]
   12b5c:	add	fp, fp, #1
   12b60:	ldrb	r3, [r2, #1]!
   12b64:	cmp	r3, #0
   12b68:	bne	12b54 <__assert_fail@plt+0x1ccc>
   12b6c:	b	12af0 <__assert_fail@plt+0x1c68>
   12b70:	mov	fp, #0
   12b74:	b	12af0 <__assert_fail@plt+0x1c68>
   12b78:	ldr	r3, [sp, #32]
   12b7c:	cmp	r3, #0
   12b80:	bne	12a60 <__assert_fail@plt+0x1bd8>
   12b84:	mov	r3, #1
   12b88:	str	r3, [sp, #28]
   12b8c:	cmp	r9, #0
   12b90:	beq	12c44 <__assert_fail@plt+0x1dbc>
   12b94:	mov	r3, #39	; 0x27
   12b98:	ldr	r2, [sp, #64]	; 0x40
   12b9c:	strb	r3, [r2]
   12ba0:	mov	r3, #0
   12ba4:	str	r3, [sp, #32]
   12ba8:	mov	fp, #1
   12bac:	str	fp, [sp, #52]	; 0x34
   12bb0:	movw	r3, #25376	; 0x6320
   12bb4:	movt	r3, #1
   12bb8:	str	r3, [sp, #60]	; 0x3c
   12bbc:	mov	sl, #2
   12bc0:	b	12a80 <__assert_fail@plt+0x1bf8>
   12bc4:	ldr	r3, [sp, #32]
   12bc8:	cmp	r3, #0
   12bcc:	beq	12b8c <__assert_fail@plt+0x1d04>
   12bd0:	mov	r3, #1
   12bd4:	str	r3, [sp, #52]	; 0x34
   12bd8:	movw	r3, #25376	; 0x6320
   12bdc:	movt	r3, #1
   12be0:	str	r3, [sp, #60]	; 0x3c
   12be4:	mov	fp, #0
   12be8:	b	12a80 <__assert_fail@plt+0x1bf8>
   12bec:	bl	10e70 <abort@plt>
   12bf0:	mov	fp, #0
   12bf4:	str	fp, [sp, #32]
   12bf8:	mov	r3, #1
   12bfc:	str	r3, [sp, #28]
   12c00:	b	12a80 <__assert_fail@plt+0x1bf8>
   12c04:	ldr	r3, [sp, #32]
   12c08:	str	r3, [sp, #28]
   12c0c:	mov	r3, #1
   12c10:	str	r3, [sp, #52]	; 0x34
   12c14:	movw	r3, #25356	; 0x630c
   12c18:	movt	r3, #1
   12c1c:	str	r3, [sp, #60]	; 0x3c
   12c20:	mov	fp, #0
   12c24:	b	12a80 <__assert_fail@plt+0x1bf8>
   12c28:	mov	fp, #1
   12c2c:	str	fp, [sp, #28]
   12c30:	str	fp, [sp, #52]	; 0x34
   12c34:	movw	r3, #25356	; 0x630c
   12c38:	movt	r3, #1
   12c3c:	str	r3, [sp, #60]	; 0x3c
   12c40:	b	12a80 <__assert_fail@plt+0x1bf8>
   12c44:	mov	r3, #0
   12c48:	str	r3, [sp, #32]
   12c4c:	mov	fp, #1
   12c50:	str	fp, [sp, #52]	; 0x34
   12c54:	movw	r3, #25376	; 0x6320
   12c58:	movt	r3, #1
   12c5c:	str	r3, [sp, #60]	; 0x3c
   12c60:	mov	sl, #2
   12c64:	b	12a80 <__assert_fail@plt+0x1bf8>
   12c68:	mov	r3, r2
   12c6c:	add	r4, r6, r2
   12c70:	ldr	r2, [sp, #24]
   12c74:	cmp	r3, #1
   12c78:	movls	r3, #0
   12c7c:	movhi	r3, #1
   12c80:	cmn	r2, #1
   12c84:	movne	r3, #0
   12c88:	cmp	r3, #0
   12c8c:	beq	12c9c <__assert_fail@plt+0x1e14>
   12c90:	ldr	r0, [sp, #48]	; 0x30
   12c94:	bl	10d98 <strlen@plt>
   12c98:	str	r0, [sp, #24]
   12c9c:	ldr	r3, [sp, #24]
   12ca0:	cmp	r4, r3
   12ca4:	bhi	13e90 <__assert_fail@plt+0x3008>
   12ca8:	ldr	r3, [sp, #48]	; 0x30
   12cac:	add	r4, r3, r6
   12cb0:	ldr	r2, [sp, #52]	; 0x34
   12cb4:	ldr	r1, [sp, #60]	; 0x3c
   12cb8:	mov	r0, r4
   12cbc:	bl	10cb4 <memcmp@plt>
   12cc0:	cmp	r0, #0
   12cc4:	bne	13e90 <__assert_fail@plt+0x3008>
   12cc8:	ldr	r3, [sp, #32]
   12ccc:	cmp	r3, #0
   12cd0:	bne	12ee0 <__assert_fail@plt+0x2058>
   12cd4:	ldrb	r4, [r4]
   12cd8:	cmp	r4, #126	; 0x7e
   12cdc:	ldrls	pc, [pc, r4, lsl #2]
   12ce0:	b	13794 <__assert_fail@plt+0x290c>
   12ce4:	andeq	r2, r1, r4, lsr #30
   12ce8:	muleq	r1, r4, r7
   12cec:	muleq	r1, r4, r7
   12cf0:	muleq	r1, r4, r7
   12cf4:	muleq	r1, r4, r7
   12cf8:	muleq	r1, r4, r7
   12cfc:	muleq	r1, r4, r7
   12d00:	andeq	r3, r1, ip, lsr r6
   12d04:	andeq	r3, r1, r0, asr #3
   12d08:	andeq	r3, r1, r4, ror #10
   12d0c:	andeq	r3, r1, r0, lsl r6
   12d10:	andeq	r3, r1, r8, ror r5
   12d14:	ldrdeq	r3, [r1], -r4
   12d18:	andeq	r3, r1, r8, ror #3
   12d1c:	muleq	r1, r4, r7
   12d20:	muleq	r1, r4, r7
   12d24:	muleq	r1, r4, r7
   12d28:	muleq	r1, r4, r7
   12d2c:	muleq	r1, r4, r7
   12d30:	muleq	r1, r4, r7
   12d34:	muleq	r1, r4, r7
   12d38:	muleq	r1, r4, r7
   12d3c:	muleq	r1, r4, r7
   12d40:	muleq	r1, r4, r7
   12d44:	muleq	r1, r4, r7
   12d48:	muleq	r1, r4, r7
   12d4c:	muleq	r1, r4, r7
   12d50:	muleq	r1, r4, r7
   12d54:	muleq	r1, r4, r7
   12d58:	muleq	r1, r4, r7
   12d5c:	muleq	r1, r4, r7
   12d60:	muleq	r1, r4, r7
   12d64:			; <UNDEFINED> instruction: 0x000136b0
   12d68:	ldrdeq	r3, [r1], -r4
   12d6c:	ldrdeq	r3, [r1], -r4
   12d70:	andeq	r3, r1, ip, ror #12
   12d74:	ldrdeq	r3, [r1], -r4
   12d78:	strdeq	r3, [r1], -r4
   12d7c:	ldrdeq	r3, [r1], -r4
   12d80:	strdeq	r3, [r1], -r4
   12d84:	ldrdeq	r3, [r1], -r4
   12d88:	ldrdeq	r3, [r1], -r4
   12d8c:	ldrdeq	r3, [r1], -r4
   12d90:	strdeq	r3, [r1], -r4
   12d94:	strdeq	r3, [r1], -r4
   12d98:	strdeq	r3, [r1], -r4
   12d9c:	strdeq	r3, [r1], -r4
   12da0:	strdeq	r3, [r1], -r4
   12da4:	strdeq	r3, [r1], -r4
   12da8:	strdeq	r3, [r1], -r4
   12dac:	strdeq	r3, [r1], -r4
   12db0:	strdeq	r3, [r1], -r4
   12db4:	strdeq	r3, [r1], -r4
   12db8:	strdeq	r3, [r1], -r4
   12dbc:	strdeq	r3, [r1], -r4
   12dc0:	strdeq	r3, [r1], -r4
   12dc4:	strdeq	r3, [r1], -r4
   12dc8:	strdeq	r3, [r1], -r4
   12dcc:	strdeq	r3, [r1], -r4
   12dd0:	ldrdeq	r3, [r1], -r4
   12dd4:	ldrdeq	r3, [r1], -r4
   12dd8:	ldrdeq	r3, [r1], -r4
   12ddc:	ldrdeq	r3, [r1], -r4
   12de0:	andeq	r3, r1, r4, asr r0
   12de4:	muleq	r1, r4, r7
   12de8:	strdeq	r3, [r1], -r4
   12dec:	strdeq	r3, [r1], -r4
   12df0:	strdeq	r3, [r1], -r4
   12df4:	strdeq	r3, [r1], -r4
   12df8:	strdeq	r3, [r1], -r4
   12dfc:	strdeq	r3, [r1], -r4
   12e00:	strdeq	r3, [r1], -r4
   12e04:	strdeq	r3, [r1], -r4
   12e08:	strdeq	r3, [r1], -r4
   12e0c:	strdeq	r3, [r1], -r4
   12e10:	strdeq	r3, [r1], -r4
   12e14:	strdeq	r3, [r1], -r4
   12e18:	strdeq	r3, [r1], -r4
   12e1c:	strdeq	r3, [r1], -r4
   12e20:	strdeq	r3, [r1], -r4
   12e24:	strdeq	r3, [r1], -r4
   12e28:	strdeq	r3, [r1], -r4
   12e2c:	strdeq	r3, [r1], -r4
   12e30:	strdeq	r3, [r1], -r4
   12e34:	strdeq	r3, [r1], -r4
   12e38:	strdeq	r3, [r1], -r4
   12e3c:	strdeq	r3, [r1], -r4
   12e40:	strdeq	r3, [r1], -r4
   12e44:	strdeq	r3, [r1], -r4
   12e48:	strdeq	r3, [r1], -r4
   12e4c:	strdeq	r3, [r1], -r4
   12e50:	ldrdeq	r3, [r1], -r4
   12e54:	andeq	r3, r1, ip, lsl #11
   12e58:	strdeq	r3, [r1], -r4
   12e5c:	ldrdeq	r3, [r1], -r4
   12e60:	strdeq	r3, [r1], -r4
   12e64:	ldrdeq	r3, [r1], -r4
   12e68:	strdeq	r3, [r1], -r4
   12e6c:	strdeq	r3, [r1], -r4
   12e70:	strdeq	r3, [r1], -r4
   12e74:	strdeq	r3, [r1], -r4
   12e78:	strdeq	r3, [r1], -r4
   12e7c:	strdeq	r3, [r1], -r4
   12e80:	strdeq	r3, [r1], -r4
   12e84:	strdeq	r3, [r1], -r4
   12e88:	strdeq	r3, [r1], -r4
   12e8c:	strdeq	r3, [r1], -r4
   12e90:	strdeq	r3, [r1], -r4
   12e94:	strdeq	r3, [r1], -r4
   12e98:	strdeq	r3, [r1], -r4
   12e9c:	strdeq	r3, [r1], -r4
   12ea0:	strdeq	r3, [r1], -r4
   12ea4:	strdeq	r3, [r1], -r4
   12ea8:	strdeq	r3, [r1], -r4
   12eac:	strdeq	r3, [r1], -r4
   12eb0:	strdeq	r3, [r1], -r4
   12eb4:	strdeq	r3, [r1], -r4
   12eb8:	strdeq	r3, [r1], -r4
   12ebc:	strdeq	r3, [r1], -r4
   12ec0:	strdeq	r3, [r1], -r4
   12ec4:	strdeq	r3, [r1], -r4
   12ec8:	strdeq	r3, [r1], -r4
   12ecc:	strdeq	r3, [r1], -r4
   12ed0:	andeq	r3, r1, ip, asr #12
   12ed4:	ldrdeq	r3, [r1], -r4
   12ed8:	andeq	r3, r1, ip, asr #12
   12edc:	andeq	r3, r1, ip, ror #12
   12ee0:	mov	r8, r9
   12ee4:	mov	r7, sl
   12ee8:	b	13de8 <__assert_fail@plt+0x2f60>
   12eec:	ldr	r3, [sp, #28]
   12ef0:	cmp	r3, #0
   12ef4:	bne	12f14 <__assert_fail@plt+0x208c>
   12ef8:	ldr	r3, [sp, #156]	; 0x9c
   12efc:	tst	r3, #1
   12f00:	bne	132fc <__assert_fail@plt+0x2474>
   12f04:	ldr	r3, [sp, #28]
   12f08:	str	r3, [sp, #44]	; 0x2c
   12f0c:	mov	r5, r3
   12f10:	b	1321c <__assert_fail@plt+0x2394>
   12f14:	ldr	r3, [sp, #32]
   12f18:	cmp	r3, #0
   12f1c:	bne	13d98 <__assert_fail@plt+0x2f10>
   12f20:	str	r3, [sp, #44]	; 0x2c
   12f24:	ldr	r3, [sp, #36]	; 0x24
   12f28:	eor	r3, r3, #1
   12f2c:	cmp	sl, #2
   12f30:	movne	r3, #0
   12f34:	andeq	r3, r3, #1
   12f38:	cmp	r3, #0
   12f3c:	beq	12f94 <__assert_fail@plt+0x210c>
   12f40:	cmp	r9, fp
   12f44:	movhi	r2, #39	; 0x27
   12f48:	strbhi	r2, [r8, fp]
   12f4c:	add	r2, fp, #1
   12f50:	cmp	r9, r2
   12f54:	movhi	r1, #36	; 0x24
   12f58:	strbhi	r1, [r8, r2]
   12f5c:	add	r2, fp, #2
   12f60:	cmp	r9, r2
   12f64:	movhi	r1, #39	; 0x27
   12f68:	strbhi	r1, [r8, r2]
   12f6c:	add	r2, fp, #3
   12f70:	cmp	r9, r2
   12f74:	bls	13e54 <__assert_fail@plt+0x2fcc>
   12f78:	mov	r1, #92	; 0x5c
   12f7c:	strb	r1, [r8, r2]
   12f80:	add	fp, fp, #4
   12f84:	str	r3, [sp, #36]	; 0x24
   12f88:	mov	r5, #0
   12f8c:	mov	r4, #48	; 0x30
   12f90:	b	13268 <__assert_fail@plt+0x23e0>
   12f94:	cmp	r9, fp
   12f98:	bhi	12fc0 <__assert_fail@plt+0x2138>
   12f9c:	add	r1, fp, #1
   12fa0:	ldr	r2, [sp, #56]	; 0x38
   12fa4:	cmp	r2, #0
   12fa8:	bne	12fe8 <__assert_fail@plt+0x2160>
   12fac:	mov	r3, r5
   12fb0:	ldr	r5, [sp, #56]	; 0x38
   12fb4:	mov	fp, r1
   12fb8:	mov	r4, #48	; 0x30
   12fbc:	b	1321c <__assert_fail@plt+0x2394>
   12fc0:	mov	r2, #92	; 0x5c
   12fc4:	strb	r2, [r8, fp]
   12fc8:	add	r1, fp, #1
   12fcc:	ldr	r2, [sp, #56]	; 0x38
   12fd0:	cmp	r2, #0
   12fd4:	moveq	r3, r5
   12fd8:	moveq	r5, r2
   12fdc:	moveq	fp, r1
   12fe0:	moveq	r4, #48	; 0x30
   12fe4:	beq	13268 <__assert_fail@plt+0x23e0>
   12fe8:	add	r2, r6, #1
   12fec:	ldr	r0, [sp, #24]
   12ff0:	cmp	r2, r0
   12ff4:	bcs	13010 <__assert_fail@plt+0x2188>
   12ff8:	ldr	r0, [sp, #48]	; 0x30
   12ffc:	ldrb	r2, [r0, r2]
   13000:	sub	r2, r2, #48	; 0x30
   13004:	uxtb	r2, r2
   13008:	cmp	r2, #9
   1300c:	bls	13028 <__assert_fail@plt+0x21a0>
   13010:	mov	r2, r3
   13014:	mov	r3, r5
   13018:	mov	r5, r2
   1301c:	mov	fp, r1
   13020:	mov	r4, #48	; 0x30
   13024:	b	13240 <__assert_fail@plt+0x23b8>
   13028:	cmp	r9, r1
   1302c:	movhi	r2, #48	; 0x30
   13030:	strbhi	r2, [r8, r1]
   13034:	add	r2, fp, #2
   13038:	cmp	r9, r2
   1303c:	movhi	r1, #48	; 0x30
   13040:	strbhi	r1, [r8, r2]
   13044:	add	r1, fp, #3
   13048:	b	13010 <__assert_fail@plt+0x2188>
   1304c:	mov	r3, #0
   13050:	str	r3, [sp, #44]	; 0x2c
   13054:	cmp	sl, #2
   13058:	beq	13074 <__assert_fail@plt+0x21ec>
   1305c:	cmp	sl, #5
   13060:	beq	1308c <__assert_fail@plt+0x2204>
   13064:	mov	r5, #0
   13068:	mov	r3, r5
   1306c:	mov	r4, #63	; 0x3f
   13070:	b	1321c <__assert_fail@plt+0x2394>
   13074:	ldr	r3, [sp, #32]
   13078:	cmp	r3, #0
   1307c:	bne	13da4 <__assert_fail@plt+0x2f1c>
   13080:	mov	r5, r3
   13084:	mov	r4, #63	; 0x3f
   13088:	b	13784 <__assert_fail@plt+0x28fc>
   1308c:	ldr	r3, [sp, #156]	; 0x9c
   13090:	tst	r3, #4
   13094:	beq	13bbc <__assert_fail@plt+0x2d34>
   13098:	add	r2, r6, #2
   1309c:	ldr	r3, [sp, #24]
   130a0:	cmp	r2, r3
   130a4:	bcs	13bcc <__assert_fail@plt+0x2d44>
   130a8:	ldr	r3, [sp, #48]	; 0x30
   130ac:	add	r3, r3, r6
   130b0:	ldrb	r4, [r3, #1]
   130b4:	cmp	r4, #63	; 0x3f
   130b8:	movne	r5, #0
   130bc:	movne	r3, r5
   130c0:	movne	r4, #63	; 0x3f
   130c4:	bne	1321c <__assert_fail@plt+0x2394>
   130c8:	ldr	r3, [sp, #48]	; 0x30
   130cc:	ldrb	r1, [r3, r2]
   130d0:	sub	r3, r1, #33	; 0x21
   130d4:	cmp	r3, #29
   130d8:	ldrls	pc, [pc, r3, lsl #2]
   130dc:	b	13bdc <__assert_fail@plt+0x2d54>
   130e0:	andeq	r3, r1, r8, asr r1
   130e4:	ldrdeq	r3, [r1], -ip
   130e8:	ldrdeq	r3, [r1], -ip
   130ec:	ldrdeq	r3, [r1], -ip
   130f0:	ldrdeq	r3, [r1], -ip
   130f4:	ldrdeq	r3, [r1], -ip
   130f8:	andeq	r3, r1, r8, asr r1
   130fc:	andeq	r3, r1, r8, asr r1
   13100:	andeq	r3, r1, r8, asr r1
   13104:	ldrdeq	r3, [r1], -ip
   13108:	ldrdeq	r3, [r1], -ip
   1310c:	ldrdeq	r3, [r1], -ip
   13110:	andeq	r3, r1, r8, asr r1
   13114:	ldrdeq	r3, [r1], -ip
   13118:	andeq	r3, r1, r8, asr r1
   1311c:	ldrdeq	r3, [r1], -ip
   13120:	ldrdeq	r3, [r1], -ip
   13124:	ldrdeq	r3, [r1], -ip
   13128:	ldrdeq	r3, [r1], -ip
   1312c:	ldrdeq	r3, [r1], -ip
   13130:	ldrdeq	r3, [r1], -ip
   13134:	ldrdeq	r3, [r1], -ip
   13138:	ldrdeq	r3, [r1], -ip
   1313c:	ldrdeq	r3, [r1], -ip
   13140:	ldrdeq	r3, [r1], -ip
   13144:	ldrdeq	r3, [r1], -ip
   13148:	ldrdeq	r3, [r1], -ip
   1314c:	andeq	r3, r1, r8, asr r1
   13150:	andeq	r3, r1, r8, asr r1
   13154:	andeq	r3, r1, r8, asr r1
   13158:	ldr	r3, [sp, #32]
   1315c:	cmp	r3, #0
   13160:	bne	13e48 <__assert_fail@plt+0x2fc0>
   13164:	cmp	r9, fp
   13168:	movhi	r3, #63	; 0x3f
   1316c:	strbhi	r3, [r8, fp]
   13170:	add	r3, fp, #1
   13174:	cmp	r9, r3
   13178:	movhi	r0, #34	; 0x22
   1317c:	strbhi	r0, [r8, r3]
   13180:	add	r3, fp, #2
   13184:	cmp	r9, r3
   13188:	movhi	r0, #34	; 0x22
   1318c:	strbhi	r0, [r8, r3]
   13190:	add	r3, fp, #3
   13194:	cmp	r9, r3
   13198:	movhi	r0, #63	; 0x3f
   1319c:	strbhi	r0, [r8, r3]
   131a0:	add	fp, fp, #4
   131a4:	ldr	r3, [sp, #32]
   131a8:	mov	r5, r3
   131ac:	mov	r4, r1
   131b0:	mov	r6, r2
   131b4:	b	1321c <__assert_fail@plt+0x2394>
   131b8:	mov	r3, #0
   131bc:	str	r3, [sp, #44]	; 0x2c
   131c0:	mov	r4, #8
   131c4:	mov	r3, #98	; 0x62
   131c8:	b	13208 <__assert_fail@plt+0x2380>
   131cc:	mov	r3, #0
   131d0:	str	r3, [sp, #44]	; 0x2c
   131d4:	mov	r4, #12
   131d8:	mov	r3, #102	; 0x66
   131dc:	b	13208 <__assert_fail@plt+0x2380>
   131e0:	mov	r3, #0
   131e4:	str	r3, [sp, #44]	; 0x2c
   131e8:	mov	r4, #13
   131ec:	mov	r3, #114	; 0x72
   131f0:	ldr	r2, [sp, #32]
   131f4:	cmp	sl, #2
   131f8:	movne	r2, #0
   131fc:	andeq	r2, r2, #1
   13200:	cmp	r2, #0
   13204:	bne	13628 <__assert_fail@plt+0x27a0>
   13208:	ldr	r2, [sp, #28]
   1320c:	cmp	r2, #0
   13210:	bne	13c10 <__assert_fail@plt+0x2d88>
   13214:	mov	r5, r2
   13218:	mov	r3, r2
   1321c:	ldr	r2, [sp, #28]
   13220:	eor	r2, r2, #1
   13224:	cmp	sl, #2
   13228:	orreq	r2, r2, #1
   1322c:	eor	r2, r2, #1
   13230:	ldr	r1, [sp, #32]
   13234:	orr	r2, r1, r2
   13238:	tst	r2, #255	; 0xff
   1323c:	beq	13268 <__assert_fail@plt+0x23e0>
   13240:	ldr	r2, [sp, #160]	; 0xa0
   13244:	cmp	r2, #0
   13248:	beq	13268 <__assert_fail@plt+0x23e0>
   1324c:	ubfx	r1, r4, #5, #8
   13250:	and	r2, r4, #31
   13254:	ldr	r0, [sp, #160]	; 0xa0
   13258:	ldr	r1, [r0, r1, lsl #2]
   1325c:	lsr	r2, r1, r2
   13260:	tst	r2, #1
   13264:	bne	13274 <__assert_fail@plt+0x23ec>
   13268:	ldr	r2, [sp, #44]	; 0x2c
   1326c:	cmp	r2, #0
   13270:	beq	135c8 <__assert_fail@plt+0x2740>
   13274:	ldr	r3, [sp, #32]
   13278:	cmp	r3, #0
   1327c:	bne	13dc8 <__assert_fail@plt+0x2f40>
   13280:	ldr	r3, [sp, #36]	; 0x24
   13284:	eor	r3, r3, #1
   13288:	cmp	sl, #2
   1328c:	movne	r3, #0
   13290:	andeq	r3, r3, #1
   13294:	cmp	r3, #0
   13298:	beq	132d0 <__assert_fail@plt+0x2448>
   1329c:	cmp	r9, fp
   132a0:	movhi	r2, #39	; 0x27
   132a4:	strbhi	r2, [r8, fp]
   132a8:	add	r2, fp, #1
   132ac:	cmp	r9, r2
   132b0:	movhi	r1, #36	; 0x24
   132b4:	strbhi	r1, [r8, r2]
   132b8:	add	r2, fp, #2
   132bc:	cmp	r9, r2
   132c0:	movhi	r1, #39	; 0x27
   132c4:	strbhi	r1, [r8, r2]
   132c8:	add	fp, fp, #3
   132cc:	str	r3, [sp, #36]	; 0x24
   132d0:	cmp	r9, fp
   132d4:	movhi	r3, #92	; 0x5c
   132d8:	strbhi	r3, [r8, fp]
   132dc:	add	fp, fp, #1
   132e0:	cmp	fp, r9
   132e4:	strbcc	r4, [r8, fp]
   132e8:	add	fp, fp, #1
   132ec:	cmp	r5, #0
   132f0:	ldr	r3, [sp, #40]	; 0x28
   132f4:	moveq	r3, r5
   132f8:	str	r3, [sp, #40]	; 0x28
   132fc:	add	r6, r6, #1
   13300:	ldr	r3, [sp, #24]
   13304:	cmn	r3, #1
   13308:	beq	13c38 <__assert_fail@plt+0x2db0>
   1330c:	ldr	r3, [sp, #24]
   13310:	subs	r5, r3, r6
   13314:	movne	r5, #1
   13318:	cmp	r5, #0
   1331c:	beq	13c4c <__assert_fail@plt+0x2dc4>
   13320:	ldr	r3, [sp, #28]
   13324:	cmp	sl, #2
   13328:	moveq	r3, #0
   1332c:	andne	r3, r3, #1
   13330:	str	r3, [sp, #56]	; 0x38
   13334:	ldr	r2, [sp, #52]	; 0x34
   13338:	adds	r7, r2, #0
   1333c:	movne	r7, #1
   13340:	ands	r3, r3, r7
   13344:	str	r3, [sp, #44]	; 0x2c
   13348:	bne	12c68 <__assert_fail@plt+0x1de0>
   1334c:	ldr	r3, [sp, #48]	; 0x30
   13350:	ldrb	r4, [r3, r6]
   13354:	cmp	r4, #126	; 0x7e
   13358:	ldrls	pc, [pc, r4, lsl #2]
   1335c:	b	13794 <__assert_fail@plt+0x290c>
   13360:	andeq	r2, r1, ip, ror #29
   13364:	muleq	r1, r4, r7
   13368:	muleq	r1, r4, r7
   1336c:	muleq	r1, r4, r7
   13370:	muleq	r1, r4, r7
   13374:	muleq	r1, r4, r7
   13378:	muleq	r1, r4, r7
   1337c:	andeq	r3, r1, r4, lsr r6
   13380:	andeq	r3, r1, r0, asr #3
   13384:	andeq	r3, r1, r4, ror #10
   13388:	andeq	r3, r1, r8, lsl #12
   1338c:	andeq	r3, r1, r8, ror r5
   13390:	ldrdeq	r3, [r1], -r4
   13394:	andeq	r3, r1, r8, ror #3
   13398:	muleq	r1, r4, r7
   1339c:	muleq	r1, r4, r7
   133a0:	muleq	r1, r4, r7
   133a4:	muleq	r1, r4, r7
   133a8:	muleq	r1, r4, r7
   133ac:	muleq	r1, r4, r7
   133b0:	muleq	r1, r4, r7
   133b4:	muleq	r1, r4, r7
   133b8:	muleq	r1, r4, r7
   133bc:	muleq	r1, r4, r7
   133c0:	muleq	r1, r4, r7
   133c4:	muleq	r1, r4, r7
   133c8:	muleq	r1, r4, r7
   133cc:	muleq	r1, r4, r7
   133d0:	muleq	r1, r4, r7
   133d4:	muleq	r1, r4, r7
   133d8:	muleq	r1, r4, r7
   133dc:	muleq	r1, r4, r7
   133e0:			; <UNDEFINED> instruction: 0x000136b0
   133e4:	andeq	r3, r1, ip, lsr #13
   133e8:	andeq	r3, r1, ip, lsr #13
   133ec:	andeq	r3, r1, ip, ror #12
   133f0:	andeq	r3, r1, ip, lsr #13
   133f4:			; <UNDEFINED> instruction: 0x00013bb4
   133f8:	andeq	r3, r1, ip, lsr #13
   133fc:	strdeq	r3, [r1], -r4
   13400:	andeq	r3, r1, ip, lsr #13
   13404:	andeq	r3, r1, ip, lsr #13
   13408:	andeq	r3, r1, ip, lsr #13
   1340c:			; <UNDEFINED> instruction: 0x00013bb4
   13410:			; <UNDEFINED> instruction: 0x00013bb4
   13414:			; <UNDEFINED> instruction: 0x00013bb4
   13418:			; <UNDEFINED> instruction: 0x00013bb4
   1341c:			; <UNDEFINED> instruction: 0x00013bb4
   13420:			; <UNDEFINED> instruction: 0x00013bb4
   13424:			; <UNDEFINED> instruction: 0x00013bb4
   13428:			; <UNDEFINED> instruction: 0x00013bb4
   1342c:			; <UNDEFINED> instruction: 0x00013bb4
   13430:			; <UNDEFINED> instruction: 0x00013bb4
   13434:			; <UNDEFINED> instruction: 0x00013bb4
   13438:			; <UNDEFINED> instruction: 0x00013bb4
   1343c:			; <UNDEFINED> instruction: 0x00013bb4
   13440:			; <UNDEFINED> instruction: 0x00013bb4
   13444:			; <UNDEFINED> instruction: 0x00013bb4
   13448:			; <UNDEFINED> instruction: 0x00013bb4
   1344c:	andeq	r3, r1, ip, lsr #13
   13450:	andeq	r3, r1, ip, lsr #13
   13454:	andeq	r3, r1, ip, lsr #13
   13458:	andeq	r3, r1, ip, lsr #13
   1345c:	andeq	r3, r1, r4, asr r0
   13460:	muleq	r1, r4, r7
   13464:			; <UNDEFINED> instruction: 0x00013bb4
   13468:			; <UNDEFINED> instruction: 0x00013bb4
   1346c:			; <UNDEFINED> instruction: 0x00013bb4
   13470:			; <UNDEFINED> instruction: 0x00013bb4
   13474:			; <UNDEFINED> instruction: 0x00013bb4
   13478:			; <UNDEFINED> instruction: 0x00013bb4
   1347c:			; <UNDEFINED> instruction: 0x00013bb4
   13480:			; <UNDEFINED> instruction: 0x00013bb4
   13484:			; <UNDEFINED> instruction: 0x00013bb4
   13488:			; <UNDEFINED> instruction: 0x00013bb4
   1348c:			; <UNDEFINED> instruction: 0x00013bb4
   13490:			; <UNDEFINED> instruction: 0x00013bb4
   13494:			; <UNDEFINED> instruction: 0x00013bb4
   13498:			; <UNDEFINED> instruction: 0x00013bb4
   1349c:			; <UNDEFINED> instruction: 0x00013bb4
   134a0:			; <UNDEFINED> instruction: 0x00013bb4
   134a4:			; <UNDEFINED> instruction: 0x00013bb4
   134a8:			; <UNDEFINED> instruction: 0x00013bb4
   134ac:			; <UNDEFINED> instruction: 0x00013bb4
   134b0:			; <UNDEFINED> instruction: 0x00013bb4
   134b4:			; <UNDEFINED> instruction: 0x00013bb4
   134b8:			; <UNDEFINED> instruction: 0x00013bb4
   134bc:			; <UNDEFINED> instruction: 0x00013bb4
   134c0:			; <UNDEFINED> instruction: 0x00013bb4
   134c4:			; <UNDEFINED> instruction: 0x00013bb4
   134c8:			; <UNDEFINED> instruction: 0x00013bb4
   134cc:	andeq	r3, r1, ip, lsr #13
   134d0:	andeq	r3, r1, ip, lsl #11
   134d4:			; <UNDEFINED> instruction: 0x00013bb4
   134d8:	andeq	r3, r1, ip, lsr #13
   134dc:			; <UNDEFINED> instruction: 0x00013bb4
   134e0:	andeq	r3, r1, ip, lsr #13
   134e4:			; <UNDEFINED> instruction: 0x00013bb4
   134e8:			; <UNDEFINED> instruction: 0x00013bb4
   134ec:			; <UNDEFINED> instruction: 0x00013bb4
   134f0:			; <UNDEFINED> instruction: 0x00013bb4
   134f4:			; <UNDEFINED> instruction: 0x00013bb4
   134f8:			; <UNDEFINED> instruction: 0x00013bb4
   134fc:			; <UNDEFINED> instruction: 0x00013bb4
   13500:			; <UNDEFINED> instruction: 0x00013bb4
   13504:			; <UNDEFINED> instruction: 0x00013bb4
   13508:			; <UNDEFINED> instruction: 0x00013bb4
   1350c:			; <UNDEFINED> instruction: 0x00013bb4
   13510:			; <UNDEFINED> instruction: 0x00013bb4
   13514:			; <UNDEFINED> instruction: 0x00013bb4
   13518:			; <UNDEFINED> instruction: 0x00013bb4
   1351c:			; <UNDEFINED> instruction: 0x00013bb4
   13520:			; <UNDEFINED> instruction: 0x00013bb4
   13524:			; <UNDEFINED> instruction: 0x00013bb4
   13528:			; <UNDEFINED> instruction: 0x00013bb4
   1352c:			; <UNDEFINED> instruction: 0x00013bb4
   13530:			; <UNDEFINED> instruction: 0x00013bb4
   13534:			; <UNDEFINED> instruction: 0x00013bb4
   13538:			; <UNDEFINED> instruction: 0x00013bb4
   1353c:			; <UNDEFINED> instruction: 0x00013bb4
   13540:			; <UNDEFINED> instruction: 0x00013bb4
   13544:			; <UNDEFINED> instruction: 0x00013bb4
   13548:			; <UNDEFINED> instruction: 0x00013bb4
   1354c:	andeq	r3, r1, ip, asr #12
   13550:	andeq	r3, r1, ip, lsr #13
   13554:	andeq	r3, r1, ip, asr #12
   13558:	andeq	r3, r1, ip, ror #12
   1355c:	mov	r3, #0
   13560:	str	r3, [sp, #44]	; 0x2c
   13564:	mov	r4, #9
   13568:	mov	r3, #116	; 0x74
   1356c:	b	131f0 <__assert_fail@plt+0x2368>
   13570:	mov	r3, #0
   13574:	str	r3, [sp, #44]	; 0x2c
   13578:	mov	r4, #11
   1357c:	mov	r3, #118	; 0x76
   13580:	b	13208 <__assert_fail@plt+0x2380>
   13584:	mov	r3, #0
   13588:	str	r3, [sp, #44]	; 0x2c
   1358c:	cmp	sl, #2
   13590:	beq	135b4 <__assert_fail@plt+0x272c>
   13594:	ldr	r3, [sp, #28]
   13598:	ldr	r2, [sp, #32]
   1359c:	and	r3, r3, r2
   135a0:	tst	r7, r3
   135a4:	bne	13c28 <__assert_fail@plt+0x2da0>
   135a8:	mov	r4, #92	; 0x5c
   135ac:	mov	r3, r4
   135b0:	b	13208 <__assert_fail@plt+0x2380>
   135b4:	ldr	r3, [sp, #32]
   135b8:	cmp	r3, #0
   135bc:	bne	13db0 <__assert_fail@plt+0x2f28>
   135c0:	mov	r5, r3
   135c4:	mov	r4, #92	; 0x5c
   135c8:	eor	r3, r3, #1
   135cc:	ldr	r2, [sp, #36]	; 0x24
   135d0:	and	r3, r3, r2
   135d4:	tst	r3, #255	; 0xff
   135d8:	beq	132e0 <__assert_fail@plt+0x2458>
   135dc:	cmp	r9, fp
   135e0:	movhi	r3, #39	; 0x27
   135e4:	strbhi	r3, [r8, fp]
   135e8:	add	r3, fp, #1
   135ec:	cmp	r9, r3
   135f0:	movhi	r2, #39	; 0x27
   135f4:	strbhi	r2, [r8, r3]
   135f8:	add	fp, fp, #2
   135fc:	mov	r3, #0
   13600:	str	r3, [sp, #36]	; 0x24
   13604:	b	132e0 <__assert_fail@plt+0x2458>
   13608:	mov	r3, #110	; 0x6e
   1360c:	b	131f0 <__assert_fail@plt+0x2368>
   13610:	mov	r3, #110	; 0x6e
   13614:	b	131f0 <__assert_fail@plt+0x2368>
   13618:	mov	r3, #0
   1361c:	str	r3, [sp, #44]	; 0x2c
   13620:	mov	r3, #110	; 0x6e
   13624:	b	131f0 <__assert_fail@plt+0x2368>
   13628:	mov	r8, r9
   1362c:	mov	r7, #2
   13630:	b	13dd0 <__assert_fail@plt+0x2f48>
   13634:	mov	r3, #97	; 0x61
   13638:	b	13208 <__assert_fail@plt+0x2380>
   1363c:	mov	r3, #97	; 0x61
   13640:	b	13208 <__assert_fail@plt+0x2380>
   13644:	mov	r3, #0
   13648:	str	r3, [sp, #44]	; 0x2c
   1364c:	ldr	r3, [sp, #24]
   13650:	cmn	r3, #1
   13654:	beq	13680 <__assert_fail@plt+0x27f8>
   13658:	ldr	r3, [sp, #24]
   1365c:	subs	r3, r3, #1
   13660:	movne	r3, #1
   13664:	cmp	r3, #0
   13668:	bne	13be8 <__assert_fail@plt+0x2d60>
   1366c:	cmp	r6, #0
   13670:	beq	136b0 <__assert_fail@plt+0x2828>
   13674:	mov	r5, #0
   13678:	mov	r3, r5
   1367c:	b	1321c <__assert_fail@plt+0x2394>
   13680:	ldr	r3, [sp, #48]	; 0x30
   13684:	ldrb	r3, [r3, #1]
   13688:	adds	r3, r3, #0
   1368c:	movne	r3, #1
   13690:	b	13664 <__assert_fail@plt+0x27dc>
   13694:	mov	r3, #0
   13698:	str	r3, [sp, #44]	; 0x2c
   1369c:	b	1366c <__assert_fail@plt+0x27e4>
   136a0:	mov	r3, #0
   136a4:	str	r3, [sp, #44]	; 0x2c
   136a8:	b	136b0 <__assert_fail@plt+0x2828>
   136ac:	ldr	r5, [sp, #44]	; 0x2c
   136b0:	ldr	r3, [sp, #32]
   136b4:	cmp	sl, #2
   136b8:	movne	r3, #0
   136bc:	andeq	r3, r3, #1
   136c0:	cmp	r3, #0
   136c4:	beq	1321c <__assert_fail@plt+0x2394>
   136c8:	mov	r8, r9
   136cc:	mov	r7, #2
   136d0:	b	13dd0 <__assert_fail@plt+0x2f48>
   136d4:	ldr	r5, [sp, #32]
   136d8:	b	136b0 <__assert_fail@plt+0x2828>
   136dc:	mov	r3, #0
   136e0:	str	r3, [sp, #44]	; 0x2c
   136e4:	mov	r5, r3
   136e8:	b	136b0 <__assert_fail@plt+0x2828>
   136ec:	mov	r3, #0
   136f0:	str	r3, [sp, #44]	; 0x2c
   136f4:	cmp	sl, #2
   136f8:	strne	r5, [sp, #68]	; 0x44
   136fc:	movne	r3, #0
   13700:	movne	r4, #39	; 0x27
   13704:	bne	1321c <__assert_fail@plt+0x2394>
   13708:	ldr	r3, [sp, #32]
   1370c:	cmp	r3, #0
   13710:	bne	13dbc <__assert_fail@plt+0x2f34>
   13714:	ldr	r3, [sp, #72]	; 0x48
   13718:	clz	r3, r3
   1371c:	lsr	r3, r3, #5
   13720:	cmp	r9, #0
   13724:	moveq	r3, #0
   13728:	cmp	r3, #0
   1372c:	movne	r3, #0
   13730:	bne	13758 <__assert_fail@plt+0x28d0>
   13734:	cmp	r9, fp
   13738:	movhi	r3, #39	; 0x27
   1373c:	strbhi	r3, [r8, fp]
   13740:	add	r3, fp, #1
   13744:	cmp	r9, r3
   13748:	movhi	r2, #92	; 0x5c
   1374c:	strbhi	r2, [r8, r3]
   13750:	mov	r3, r9
   13754:	ldr	r9, [sp, #72]	; 0x48
   13758:	add	r2, fp, #2
   1375c:	cmp	r2, r3
   13760:	movcc	r1, #39	; 0x27
   13764:	strbcc	r1, [r8, r2]
   13768:	add	fp, fp, #3
   1376c:	str	r5, [sp, #68]	; 0x44
   13770:	ldr	r2, [sp, #32]
   13774:	str	r2, [sp, #36]	; 0x24
   13778:	str	r9, [sp, #72]	; 0x48
   1377c:	mov	r9, r3
   13780:	mov	r4, #39	; 0x27
   13784:	mov	r3, #0
   13788:	b	13268 <__assert_fail@plt+0x23e0>
   1378c:	mov	r3, #0
   13790:	str	r3, [sp, #44]	; 0x2c
   13794:	ldr	r7, [sp, #76]	; 0x4c
   13798:	cmp	r7, #1
   1379c:	bne	137d4 <__assert_fail@plt+0x294c>
   137a0:	bl	10d80 <__ctype_b_loc@plt>
   137a4:	ldr	r2, [r0]
   137a8:	lsl	r3, r4, #1
   137ac:	ldrh	r5, [r2, r3]
   137b0:	ubfx	r5, r5, #14, #1
   137b4:	mov	ip, r7
   137b8:	eor	r3, r5, #1
   137bc:	ldr	r2, [sp, #28]
   137c0:	and	r3, r3, r2
   137c4:	ands	r3, r3, #255	; 0xff
   137c8:	beq	1321c <__assert_fail@plt+0x2394>
   137cc:	mov	r5, #0
   137d0:	b	13a30 <__assert_fail@plt+0x2ba8>
   137d4:	mov	r2, #0
   137d8:	mov	r3, #0
   137dc:	strd	r2, [sp, #104]	; 0x68
   137e0:	ldr	r3, [sp, #24]
   137e4:	cmn	r3, #1
   137e8:	beq	1380c <__assert_fail@plt+0x2984>
   137ec:	mov	r3, #0
   137f0:	str	r4, [sp, #88]	; 0x58
   137f4:	str	fp, [sp, #92]	; 0x5c
   137f8:	str	r8, [sp, #56]	; 0x38
   137fc:	mov	r8, r3
   13800:	str	r9, [sp, #84]	; 0x54
   13804:	ldr	r9, [sp, #48]	; 0x30
   13808:	b	13958 <__assert_fail@plt+0x2ad0>
   1380c:	ldr	r0, [sp, #48]	; 0x30
   13810:	bl	10d98 <strlen@plt>
   13814:	str	r0, [sp, #24]
   13818:	b	137ec <__assert_fail@plt+0x2964>
   1381c:	mov	r1, fp
   13820:	ldr	r4, [sp, #88]	; 0x58
   13824:	mov	r2, r8
   13828:	mov	ip, r8
   1382c:	ldr	fp, [sp, #92]	; 0x5c
   13830:	ldr	r8, [sp, #56]	; 0x38
   13834:	ldr	r9, [sp, #84]	; 0x54
   13838:	ldr	r0, [sp, #24]
   1383c:	cmp	r7, r0
   13840:	bcs	139f8 <__assert_fail@plt+0x2b70>
   13844:	ldrb	r3, [r1]
   13848:	cmp	r3, #0
   1384c:	beq	13a00 <__assert_fail@plt+0x2b78>
   13850:	mov	r3, r1
   13854:	add	r2, r2, #1
   13858:	add	r1, r6, r2
   1385c:	cmp	r0, r1
   13860:	bls	13a08 <__assert_fail@plt+0x2b80>
   13864:	ldrb	r1, [r3, #1]!
   13868:	cmp	r1, #0
   1386c:	bne	13854 <__assert_fail@plt+0x29cc>
   13870:	mov	ip, r2
   13874:	mov	r5, #0
   13878:	b	13a28 <__assert_fail@plt+0x2ba0>
   1387c:	ldr	r3, [sp, #56]	; 0x38
   13880:	str	r3, [sp, #64]	; 0x40
   13884:	ldr	r8, [sp, #84]	; 0x54
   13888:	mov	r7, #2
   1388c:	b	13dd0 <__assert_fail@plt+0x2f48>
   13890:	cmp	r2, r7
   13894:	beq	13934 <__assert_fail@plt+0x2aac>
   13898:	ldrb	r3, [r2], #1
   1389c:	sub	r3, r3, #91	; 0x5b
   138a0:	cmp	r3, #33	; 0x21
   138a4:	ldrls	pc, [pc, r3, lsl #2]
   138a8:	b	13890 <__assert_fail@plt+0x2a08>
   138ac:	andeq	r3, r1, ip, ror r8
   138b0:	andeq	r3, r1, ip, ror r8
   138b4:	muleq	r1, r0, r8
   138b8:	andeq	r3, r1, ip, ror r8
   138bc:	muleq	r1, r0, r8
   138c0:	andeq	r3, r1, ip, ror r8
   138c4:	muleq	r1, r0, r8
   138c8:	muleq	r1, r0, r8
   138cc:	muleq	r1, r0, r8
   138d0:	muleq	r1, r0, r8
   138d4:	muleq	r1, r0, r8
   138d8:	muleq	r1, r0, r8
   138dc:	muleq	r1, r0, r8
   138e0:	muleq	r1, r0, r8
   138e4:	muleq	r1, r0, r8
   138e8:	muleq	r1, r0, r8
   138ec:	muleq	r1, r0, r8
   138f0:	muleq	r1, r0, r8
   138f4:	muleq	r1, r0, r8
   138f8:	muleq	r1, r0, r8
   138fc:	muleq	r1, r0, r8
   13900:	muleq	r1, r0, r8
   13904:	muleq	r1, r0, r8
   13908:	muleq	r1, r0, r8
   1390c:	muleq	r1, r0, r8
   13910:	muleq	r1, r0, r8
   13914:	muleq	r1, r0, r8
   13918:	muleq	r1, r0, r8
   1391c:	muleq	r1, r0, r8
   13920:	muleq	r1, r0, r8
   13924:	muleq	r1, r0, r8
   13928:	muleq	r1, r0, r8
   1392c:	muleq	r1, r0, r8
   13930:	andeq	r3, r1, ip, ror r8
   13934:	ldr	r0, [sp, #100]	; 0x64
   13938:	bl	10cf0 <iswprint@plt>
   1393c:	cmp	r0, #0
   13940:	moveq	r5, #0
   13944:	add	r8, r8, r4
   13948:	add	r0, sp, #104	; 0x68
   1394c:	bl	10ca8 <mbsinit@plt>
   13950:	cmp	r0, #0
   13954:	bne	139c4 <__assert_fail@plt+0x2b3c>
   13958:	add	r7, r6, r8
   1395c:	add	fp, r9, r7
   13960:	add	r3, sp, #104	; 0x68
   13964:	ldr	r2, [sp, #24]
   13968:	sub	r2, r2, r7
   1396c:	mov	r1, fp
   13970:	add	r0, sp, #100	; 0x64
   13974:	bl	156c8 <__assert_fail@plt+0x4840>
   13978:	subs	r4, r0, #0
   1397c:	beq	13a14 <__assert_fail@plt+0x2b8c>
   13980:	cmn	r4, #1
   13984:	beq	139dc <__assert_fail@plt+0x2b54>
   13988:	cmn	r4, #2
   1398c:	beq	1381c <__assert_fail@plt+0x2994>
   13990:	ldr	r3, [sp, #32]
   13994:	cmp	sl, #2
   13998:	movne	r3, #0
   1399c:	andeq	r3, r3, #1
   139a0:	cmp	r3, #0
   139a4:	beq	13934 <__assert_fail@plt+0x2aac>
   139a8:	cmp	r4, #1
   139ac:	bls	13934 <__assert_fail@plt+0x2aac>
   139b0:	add	r2, r7, #1
   139b4:	add	r2, r9, r2
   139b8:	add	r3, r9, r4
   139bc:	add	r7, r3, r7
   139c0:	b	13898 <__assert_fail@plt+0x2a10>
   139c4:	ldr	r4, [sp, #88]	; 0x58
   139c8:	mov	ip, r8
   139cc:	ldr	fp, [sp, #92]	; 0x5c
   139d0:	ldr	r8, [sp, #56]	; 0x38
   139d4:	ldr	r9, [sp, #84]	; 0x54
   139d8:	b	13a28 <__assert_fail@plt+0x2ba0>
   139dc:	ldr	r4, [sp, #88]	; 0x58
   139e0:	mov	ip, r8
   139e4:	ldr	fp, [sp, #92]	; 0x5c
   139e8:	ldr	r8, [sp, #56]	; 0x38
   139ec:	ldr	r9, [sp, #84]	; 0x54
   139f0:	mov	r5, #0
   139f4:	b	13a28 <__assert_fail@plt+0x2ba0>
   139f8:	mov	r5, #0
   139fc:	b	13a28 <__assert_fail@plt+0x2ba0>
   13a00:	mov	r5, #0
   13a04:	b	13a28 <__assert_fail@plt+0x2ba0>
   13a08:	mov	ip, r2
   13a0c:	mov	r5, #0
   13a10:	b	13a28 <__assert_fail@plt+0x2ba0>
   13a14:	ldr	r4, [sp, #88]	; 0x58
   13a18:	mov	ip, r8
   13a1c:	ldr	fp, [sp, #92]	; 0x5c
   13a20:	ldr	r8, [sp, #56]	; 0x38
   13a24:	ldr	r9, [sp, #84]	; 0x54
   13a28:	cmp	ip, #1
   13a2c:	bls	137b8 <__assert_fail@plt+0x2930>
   13a30:	add	lr, r6, ip
   13a34:	ldr	r3, [sp, #48]	; 0x30
   13a38:	add	r1, r3, r6
   13a3c:	mov	r3, #0
   13a40:	eor	r0, r5, #1
   13a44:	ldr	r2, [sp, #28]
   13a48:	and	r0, r0, r2
   13a4c:	uxtb	r0, r0
   13a50:	str	r0, [sp, #56]	; 0x38
   13a54:	mov	r7, #92	; 0x5c
   13a58:	ldr	ip, [sp, #36]	; 0x24
   13a5c:	str	r5, [sp, #84]	; 0x54
   13a60:	ldr	r2, [sp, #44]	; 0x2c
   13a64:	b	13ad4 <__assert_fail@plt+0x2c4c>
   13a68:	cmp	r2, #0
   13a6c:	beq	13a7c <__assert_fail@plt+0x2bf4>
   13a70:	cmp	r9, fp
   13a74:	strbhi	r7, [r8, fp]
   13a78:	add	fp, fp, #1
   13a7c:	add	r5, r6, #1
   13a80:	cmp	r5, lr
   13a84:	bcs	13b90 <__assert_fail@plt+0x2d08>
   13a88:	eor	r2, r3, #1
   13a8c:	and	r2, r2, ip
   13a90:	ands	r2, r2, #255	; 0xff
   13a94:	beq	13bac <__assert_fail@plt+0x2d24>
   13a98:	cmp	r9, fp
   13a9c:	movhi	r2, #39	; 0x27
   13aa0:	strbhi	r2, [r8, fp]
   13aa4:	add	r2, fp, #1
   13aa8:	cmp	r9, r2
   13aac:	movhi	ip, #39	; 0x27
   13ab0:	strbhi	ip, [r8, r2]
   13ab4:	add	fp, fp, #2
   13ab8:	ldr	ip, [sp, #56]	; 0x38
   13abc:	mov	r2, ip
   13ac0:	mov	r6, r5
   13ac4:	cmp	r9, fp
   13ac8:	strbhi	r4, [r8, fp]
   13acc:	add	fp, fp, #1
   13ad0:	ldrb	r4, [r1, #1]!
   13ad4:	cmp	r0, #0
   13ad8:	beq	13a68 <__assert_fail@plt+0x2be0>
   13adc:	ldr	r3, [sp, #32]
   13ae0:	cmp	r3, #0
   13ae4:	bne	13d78 <__assert_fail@plt+0x2ef0>
   13ae8:	eor	r3, ip, #1
   13aec:	cmp	sl, #2
   13af0:	movne	r3, #0
   13af4:	andeq	r3, r3, #1
   13af8:	cmp	r3, #0
   13afc:	beq	13b34 <__assert_fail@plt+0x2cac>
   13b00:	cmp	r9, fp
   13b04:	movhi	ip, #39	; 0x27
   13b08:	strbhi	ip, [r8, fp]
   13b0c:	add	ip, fp, #1
   13b10:	cmp	r9, ip
   13b14:	movhi	r5, #36	; 0x24
   13b18:	strbhi	r5, [r8, ip]
   13b1c:	add	ip, fp, #2
   13b20:	cmp	r9, ip
   13b24:	movhi	r5, #39	; 0x27
   13b28:	strbhi	r5, [r8, ip]
   13b2c:	add	fp, fp, #3
   13b30:	mov	ip, r3
   13b34:	cmp	r9, fp
   13b38:	strbhi	r7, [r8, fp]
   13b3c:	add	r3, fp, #1
   13b40:	cmp	r9, r3
   13b44:	bls	13b54 <__assert_fail@plt+0x2ccc>
   13b48:	lsr	r5, r4, #6
   13b4c:	add	r5, r5, #48	; 0x30
   13b50:	strb	r5, [r8, r3]
   13b54:	add	r3, fp, #2
   13b58:	cmp	r9, r3
   13b5c:	bls	13b6c <__assert_fail@plt+0x2ce4>
   13b60:	ubfx	r5, r4, #3, #3
   13b64:	add	r5, r5, #48	; 0x30
   13b68:	strb	r5, [r8, r3]
   13b6c:	add	fp, fp, #3
   13b70:	and	r4, r4, #7
   13b74:	add	r4, r4, #48	; 0x30
   13b78:	add	r5, r6, #1
   13b7c:	cmp	r5, lr
   13b80:	bcs	13b9c <__assert_fail@plt+0x2d14>
   13b84:	ldr	r3, [sp, #56]	; 0x38
   13b88:	mov	r6, r5
   13b8c:	b	13ac4 <__assert_fail@plt+0x2c3c>
   13b90:	str	ip, [sp, #36]	; 0x24
   13b94:	ldr	r5, [sp, #84]	; 0x54
   13b98:	b	135c8 <__assert_fail@plt+0x2740>
   13b9c:	str	ip, [sp, #36]	; 0x24
   13ba0:	ldr	r5, [sp, #84]	; 0x54
   13ba4:	mov	r3, r0
   13ba8:	b	135c8 <__assert_fail@plt+0x2740>
   13bac:	mov	r6, r5
   13bb0:	b	13ac4 <__assert_fail@plt+0x2c3c>
   13bb4:	ldr	r3, [sp, #44]	; 0x2c
   13bb8:	b	1321c <__assert_fail@plt+0x2394>
   13bbc:	mov	r5, #0
   13bc0:	mov	r3, r5
   13bc4:	mov	r4, #63	; 0x3f
   13bc8:	b	1321c <__assert_fail@plt+0x2394>
   13bcc:	mov	r5, #0
   13bd0:	mov	r3, r5
   13bd4:	mov	r4, #63	; 0x3f
   13bd8:	b	1321c <__assert_fail@plt+0x2394>
   13bdc:	mov	r5, #0
   13be0:	mov	r3, r5
   13be4:	b	1321c <__assert_fail@plt+0x2394>
   13be8:	mov	r5, #0
   13bec:	mov	r3, r5
   13bf0:	b	1321c <__assert_fail@plt+0x2394>
   13bf4:	ldr	r5, [sp, #44]	; 0x2c
   13bf8:	ldr	r3, [sp, #32]
   13bfc:	b	1321c <__assert_fail@plt+0x2394>
   13c00:	ldr	r5, [sp, #44]	; 0x2c
   13c04:	mov	r3, #0
   13c08:	str	r3, [sp, #44]	; 0x2c
   13c0c:	b	1321c <__assert_fail@plt+0x2394>
   13c10:	mov	r4, r3
   13c14:	mov	r5, #0
   13c18:	b	13274 <__assert_fail@plt+0x23ec>
   13c1c:	mov	r5, #0
   13c20:	mov	r4, #97	; 0x61
   13c24:	b	13274 <__assert_fail@plt+0x23ec>
   13c28:	mov	r5, #0
   13c2c:	mov	r3, r5
   13c30:	mov	r4, #92	; 0x5c
   13c34:	b	135c8 <__assert_fail@plt+0x2740>
   13c38:	ldr	r3, [sp, #48]	; 0x30
   13c3c:	ldrb	r5, [r3, r6]
   13c40:	adds	r5, r5, #0
   13c44:	movne	r5, #1
   13c48:	b	13318 <__assert_fail@plt+0x2490>
   13c4c:	cmp	sl, #2
   13c50:	movne	r3, #0
   13c54:	moveq	r3, #1
   13c58:	ldr	r1, [sp, #32]
   13c5c:	cmp	fp, #0
   13c60:	andeq	r2, r3, r1
   13c64:	movne	r2, #0
   13c68:	cmp	r2, #0
   13c6c:	bne	13d8c <__assert_fail@plt+0x2f04>
   13c70:	eor	r2, r1, #1
   13c74:	uxtb	r2, r2
   13c78:	and	r3, r3, r2
   13c7c:	ldr	r1, [sp, #68]	; 0x44
   13c80:	ands	r3, r1, r3
   13c84:	beq	13d18 <__assert_fail@plt+0x2e90>
   13c88:	ldr	r2, [sp, #40]	; 0x28
   13c8c:	cmp	r2, #0
   13c90:	bne	13cc8 <__assert_fail@plt+0x2e40>
   13c94:	ldr	r2, [sp, #72]	; 0x48
   13c98:	adds	r2, r2, #0
   13c9c:	movne	r2, #1
   13ca0:	cmp	r9, #0
   13ca4:	movne	r2, #0
   13ca8:	str	r2, [sp, #68]	; 0x44
   13cac:	mov	sl, #2
   13cb0:	ldr	r1, [sp, #40]	; 0x28
   13cb4:	str	r1, [sp, #32]
   13cb8:	cmp	r2, #0
   13cbc:	beq	13d0c <__assert_fail@plt+0x2e84>
   13cc0:	ldr	r9, [sp, #72]	; 0x48
   13cc4:	b	12a20 <__assert_fail@plt+0x1b98>
   13cc8:	ldr	r3, [sp, #168]	; 0xa8
   13ccc:	str	r3, [sp, #16]
   13cd0:	ldr	r3, [sp, #164]	; 0xa4
   13cd4:	str	r3, [sp, #12]
   13cd8:	ldr	r3, [sp, #160]	; 0xa0
   13cdc:	str	r3, [sp, #8]
   13ce0:	ldr	r3, [sp, #156]	; 0x9c
   13ce4:	str	r3, [sp, #4]
   13ce8:	mov	r3, #5
   13cec:	str	r3, [sp]
   13cf0:	ldr	r3, [sp, #24]
   13cf4:	ldr	r2, [sp, #48]	; 0x30
   13cf8:	ldr	r1, [sp, #72]	; 0x48
   13cfc:	ldr	r0, [sp, #64]	; 0x40
   13d00:	bl	129a8 <__assert_fail@plt+0x1b20>
   13d04:	mov	fp, r0
   13d08:	b	13e28 <__assert_fail@plt+0x2fa0>
   13d0c:	mov	r8, r9
   13d10:	mov	r2, r3
   13d14:	b	13d1c <__assert_fail@plt+0x2e94>
   13d18:	mov	r8, r9
   13d1c:	ldr	r3, [sp, #60]	; 0x3c
   13d20:	cmp	r3, #0
   13d24:	moveq	r2, #0
   13d28:	andne	r2, r2, #1
   13d2c:	cmp	r2, #0
   13d30:	beq	13d60 <__assert_fail@plt+0x2ed8>
   13d34:	mov	r2, r3
   13d38:	ldrb	r3, [r3]
   13d3c:	cmp	r3, #0
   13d40:	beq	13d60 <__assert_fail@plt+0x2ed8>
   13d44:	ldr	r1, [sp, #64]	; 0x40
   13d48:	cmp	r8, fp
   13d4c:	strbhi	r3, [r1, fp]
   13d50:	add	fp, fp, #1
   13d54:	ldrb	r3, [r2, #1]!
   13d58:	cmp	r3, #0
   13d5c:	bne	13d48 <__assert_fail@plt+0x2ec0>
   13d60:	cmp	r8, fp
   13d64:	bls	13e28 <__assert_fail@plt+0x2fa0>
   13d68:	mov	r3, #0
   13d6c:	ldr	r2, [sp, #64]	; 0x40
   13d70:	strb	r3, [r2, fp]
   13d74:	b	13e28 <__assert_fail@plt+0x2fa0>
   13d78:	mov	r8, r9
   13d7c:	mov	r7, sl
   13d80:	ldr	r3, [sp, #32]
   13d84:	str	r3, [sp, #28]
   13d88:	b	13dd0 <__assert_fail@plt+0x2f48>
   13d8c:	mov	r8, r9
   13d90:	mov	r7, #2
   13d94:	b	13dd0 <__assert_fail@plt+0x2f48>
   13d98:	mov	r8, r9
   13d9c:	mov	r7, sl
   13da0:	b	13dd0 <__assert_fail@plt+0x2f48>
   13da4:	mov	r8, r9
   13da8:	mov	r7, sl
   13dac:	b	13dd0 <__assert_fail@plt+0x2f48>
   13db0:	mov	r8, r9
   13db4:	mov	r7, sl
   13db8:	b	13dd0 <__assert_fail@plt+0x2f48>
   13dbc:	mov	r8, r9
   13dc0:	mov	r7, sl
   13dc4:	b	13dd0 <__assert_fail@plt+0x2f48>
   13dc8:	mov	r8, r9
   13dcc:	mov	r7, sl
   13dd0:	ldr	r3, [sp, #28]
   13dd4:	cmp	r7, #2
   13dd8:	movne	r3, #0
   13ddc:	andeq	r3, r3, #1
   13de0:	cmp	r3, #0
   13de4:	movne	r7, #4
   13de8:	ldr	r3, [sp, #168]	; 0xa8
   13dec:	str	r3, [sp, #16]
   13df0:	ldr	r3, [sp, #164]	; 0xa4
   13df4:	str	r3, [sp, #12]
   13df8:	mov	r3, #0
   13dfc:	str	r3, [sp, #8]
   13e00:	ldr	r3, [sp, #156]	; 0x9c
   13e04:	bic	r3, r3, #2
   13e08:	str	r3, [sp, #4]
   13e0c:	str	r7, [sp]
   13e10:	ldr	r3, [sp, #24]
   13e14:	ldr	r2, [sp, #48]	; 0x30
   13e18:	mov	r1, r8
   13e1c:	ldr	r0, [sp, #64]	; 0x40
   13e20:	bl	129a8 <__assert_fail@plt+0x1b20>
   13e24:	mov	fp, r0
   13e28:	mov	r0, fp
   13e2c:	add	sp, sp, #116	; 0x74
   13e30:	ldrd	r4, [sp]
   13e34:	ldrd	r6, [sp, #8]
   13e38:	ldrd	r8, [sp, #16]
   13e3c:	ldrd	sl, [sp, #24]
   13e40:	add	sp, sp, #32
   13e44:	pop	{pc}		; (ldr pc, [sp], #4)
   13e48:	mov	r8, r9
   13e4c:	mov	r7, sl
   13e50:	b	13de8 <__assert_fail@plt+0x2f60>
   13e54:	add	fp, fp, #4
   13e58:	str	r3, [sp, #36]	; 0x24
   13e5c:	mov	r5, #0
   13e60:	mov	r4, #48	; 0x30
   13e64:	b	1321c <__assert_fail@plt+0x2394>
   13e68:	mov	r3, #1
   13e6c:	str	r3, [sp, #32]
   13e70:	str	r3, [sp, #28]
   13e74:	str	r3, [sp, #52]	; 0x34
   13e78:	movw	r3, #25356	; 0x630c
   13e7c:	movt	r3, #1
   13e80:	str	r3, [sp, #60]	; 0x3c
   13e84:	mov	fp, #0
   13e88:	mov	sl, #5
   13e8c:	b	12a80 <__assert_fail@plt+0x1bf8>
   13e90:	ldr	r3, [sp, #48]	; 0x30
   13e94:	ldrb	r4, [r3, r6]
   13e98:	cmp	r4, #126	; 0x7e
   13e9c:	ldrls	pc, [pc, r4, lsl #2]
   13ea0:	b	1378c <__assert_fail@plt+0x2904>
   13ea4:	andeq	r2, r1, r4, lsl pc
   13ea8:	andeq	r3, r1, ip, lsl #15
   13eac:	andeq	r3, r1, ip, lsl #15
   13eb0:	andeq	r3, r1, ip, lsl #15
   13eb4:	andeq	r3, r1, ip, lsl #15
   13eb8:	andeq	r3, r1, ip, lsl #15
   13ebc:	andeq	r3, r1, ip, lsl #15
   13ec0:	andeq	r3, r1, ip, lsl ip
   13ec4:			; <UNDEFINED> instruction: 0x000131b8
   13ec8:	andeq	r3, r1, ip, asr r5
   13ecc:	andeq	r3, r1, r8, lsl r6
   13ed0:	andeq	r3, r1, r0, ror r5
   13ed4:	andeq	r3, r1, ip, asr #3
   13ed8:	andeq	r3, r1, r0, ror #3
   13edc:	andeq	r3, r1, ip, lsl #15
   13ee0:	andeq	r3, r1, ip, lsl #15
   13ee4:	andeq	r3, r1, ip, lsl #15
   13ee8:	andeq	r3, r1, ip, lsl #15
   13eec:	andeq	r3, r1, ip, lsl #15
   13ef0:	andeq	r3, r1, ip, lsl #15
   13ef4:	andeq	r3, r1, ip, lsl #15
   13ef8:	andeq	r3, r1, ip, lsl #15
   13efc:	andeq	r3, r1, ip, lsl #15
   13f00:	andeq	r3, r1, ip, lsl #15
   13f04:	andeq	r3, r1, ip, lsl #15
   13f08:	andeq	r3, r1, ip, lsl #15
   13f0c:	andeq	r3, r1, ip, lsl #15
   13f10:	andeq	r3, r1, ip, lsl #15
   13f14:	andeq	r3, r1, ip, lsl #15
   13f18:	andeq	r3, r1, ip, lsl #15
   13f1c:	andeq	r3, r1, ip, lsl #15
   13f20:	andeq	r3, r1, ip, lsl #15
   13f24:	andeq	r3, r1, r0, lsr #13
   13f28:	ldrdeq	r3, [r1], -ip
   13f2c:	ldrdeq	r3, [r1], -ip
   13f30:	muleq	r1, r4, r6
   13f34:	ldrdeq	r3, [r1], -ip
   13f38:	andeq	r3, r1, r0, lsl #24
   13f3c:	ldrdeq	r3, [r1], -ip
   13f40:	andeq	r3, r1, ip, ror #13
   13f44:	ldrdeq	r3, [r1], -ip
   13f48:	ldrdeq	r3, [r1], -ip
   13f4c:	ldrdeq	r3, [r1], -ip
   13f50:	andeq	r3, r1, r0, lsl #24
   13f54:	andeq	r3, r1, r0, lsl #24
   13f58:	andeq	r3, r1, r0, lsl #24
   13f5c:	andeq	r3, r1, r0, lsl #24
   13f60:	andeq	r3, r1, r0, lsl #24
   13f64:	andeq	r3, r1, r0, lsl #24
   13f68:	andeq	r3, r1, r0, lsl #24
   13f6c:	andeq	r3, r1, r0, lsl #24
   13f70:	andeq	r3, r1, r0, lsl #24
   13f74:	andeq	r3, r1, r0, lsl #24
   13f78:	andeq	r3, r1, r0, lsl #24
   13f7c:	andeq	r3, r1, r0, lsl #24
   13f80:	andeq	r3, r1, r0, lsl #24
   13f84:	andeq	r3, r1, r0, lsl #24
   13f88:	andeq	r3, r1, r0, lsl #24
   13f8c:	andeq	r3, r1, r0, lsl #24
   13f90:	ldrdeq	r3, [r1], -ip
   13f94:	ldrdeq	r3, [r1], -ip
   13f98:	ldrdeq	r3, [r1], -ip
   13f9c:	ldrdeq	r3, [r1], -ip
   13fa0:	andeq	r3, r1, ip, asr #32
   13fa4:	andeq	r3, r1, ip, lsl #15
   13fa8:	andeq	r3, r1, r0, lsl #24
   13fac:	andeq	r3, r1, r0, lsl #24
   13fb0:	andeq	r3, r1, r0, lsl #24
   13fb4:	andeq	r3, r1, r0, lsl #24
   13fb8:	andeq	r3, r1, r0, lsl #24
   13fbc:	andeq	r3, r1, r0, lsl #24
   13fc0:	andeq	r3, r1, r0, lsl #24
   13fc4:	andeq	r3, r1, r0, lsl #24
   13fc8:	andeq	r3, r1, r0, lsl #24
   13fcc:	andeq	r3, r1, r0, lsl #24
   13fd0:	andeq	r3, r1, r0, lsl #24
   13fd4:	andeq	r3, r1, r0, lsl #24
   13fd8:	andeq	r3, r1, r0, lsl #24
   13fdc:	andeq	r3, r1, r0, lsl #24
   13fe0:	andeq	r3, r1, r0, lsl #24
   13fe4:	andeq	r3, r1, r0, lsl #24
   13fe8:	andeq	r3, r1, r0, lsl #24
   13fec:	andeq	r3, r1, r0, lsl #24
   13ff0:	andeq	r3, r1, r0, lsl #24
   13ff4:	andeq	r3, r1, r0, lsl #24
   13ff8:	andeq	r3, r1, r0, lsl #24
   13ffc:	andeq	r3, r1, r0, lsl #24
   14000:	andeq	r3, r1, r0, lsl #24
   14004:	andeq	r3, r1, r0, lsl #24
   14008:	andeq	r3, r1, r0, lsl #24
   1400c:	andeq	r3, r1, r0, lsl #24
   14010:	ldrdeq	r3, [r1], -ip
   14014:	andeq	r3, r1, r4, lsl #11
   14018:	andeq	r3, r1, r0, lsl #24
   1401c:	ldrdeq	r3, [r1], -ip
   14020:	andeq	r3, r1, r0, lsl #24
   14024:	ldrdeq	r3, [r1], -ip
   14028:	andeq	r3, r1, r0, lsl #24
   1402c:	andeq	r3, r1, r0, lsl #24
   14030:	andeq	r3, r1, r0, lsl #24
   14034:	andeq	r3, r1, r0, lsl #24
   14038:	andeq	r3, r1, r0, lsl #24
   1403c:	andeq	r3, r1, r0, lsl #24
   14040:	andeq	r3, r1, r0, lsl #24
   14044:	andeq	r3, r1, r0, lsl #24
   14048:	andeq	r3, r1, r0, lsl #24
   1404c:	andeq	r3, r1, r0, lsl #24
   14050:	andeq	r3, r1, r0, lsl #24
   14054:	andeq	r3, r1, r0, lsl #24
   14058:	andeq	r3, r1, r0, lsl #24
   1405c:	andeq	r3, r1, r0, lsl #24
   14060:	andeq	r3, r1, r0, lsl #24
   14064:	andeq	r3, r1, r0, lsl #24
   14068:	andeq	r3, r1, r0, lsl #24
   1406c:	andeq	r3, r1, r0, lsl #24
   14070:	andeq	r3, r1, r0, lsl #24
   14074:	andeq	r3, r1, r0, lsl #24
   14078:	andeq	r3, r1, r0, lsl #24
   1407c:	andeq	r3, r1, r0, lsl #24
   14080:	andeq	r3, r1, r0, lsl #24
   14084:	andeq	r3, r1, r0, lsl #24
   14088:	andeq	r3, r1, r0, lsl #24
   1408c:	andeq	r3, r1, r0, lsl #24
   14090:	andeq	r3, r1, r4, asr #12
   14094:	ldrdeq	r3, [r1], -ip
   14098:	andeq	r3, r1, r4, asr #12
   1409c:	muleq	r1, r4, r6
   140a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   140a4:	strd	r6, [sp, #8]
   140a8:	strd	r8, [sp, #16]
   140ac:	strd	sl, [sp, #24]
   140b0:	str	lr, [sp, #32]
   140b4:	sub	sp, sp, #52	; 0x34
   140b8:	mov	r5, r0
   140bc:	str	r1, [sp, #24]
   140c0:	str	r2, [sp, #28]
   140c4:	mov	r4, r3
   140c8:	bl	10da4 <__errno_location@plt>
   140cc:	str	r0, [sp, #32]
   140d0:	ldr	r3, [r0]
   140d4:	str	r3, [sp, #36]	; 0x24
   140d8:	movw	r3, #28912	; 0x70f0
   140dc:	movt	r3, #2
   140e0:	ldr	r6, [r3]
   140e4:	cmn	r5, #-2147483647	; 0x80000001
   140e8:	movne	r3, #0
   140ec:	moveq	r3, #1
   140f0:	orrs	r3, r3, r5, lsr #31
   140f4:	bne	14258 <__assert_fail@plt+0x33d0>
   140f8:	movw	r3, #28912	; 0x70f0
   140fc:	movt	r3, #2
   14100:	ldr	r2, [r3, #4]
   14104:	cmp	r2, r5
   14108:	bgt	14178 <__assert_fail@plt+0x32f0>
   1410c:	str	r2, [sp, #44]	; 0x2c
   14110:	add	r3, r3, #8
   14114:	cmp	r6, r3
   14118:	beq	1425c <__assert_fail@plt+0x33d4>
   1411c:	sub	r2, r5, r2
   14120:	mov	r3, #8
   14124:	str	r3, [sp]
   14128:	mvn	r3, #-2147483648	; 0x80000000
   1412c:	add	r2, r2, #1
   14130:	add	r1, sp, #44	; 0x2c
   14134:	mov	r0, r6
   14138:	bl	15260 <__assert_fail@plt+0x43d8>
   1413c:	mov	r6, r0
   14140:	movw	r3, #28912	; 0x70f0
   14144:	movt	r3, #2
   14148:	str	r0, [r3]
   1414c:	movw	r7, #28912	; 0x70f0
   14150:	movt	r7, #2
   14154:	ldr	r0, [r7, #4]
   14158:	ldr	r2, [sp, #44]	; 0x2c
   1415c:	sub	r2, r2, r0
   14160:	lsl	r2, r2, #3
   14164:	mov	r1, #0
   14168:	add	r0, r6, r0, lsl #3
   1416c:	bl	10dbc <memset@plt>
   14170:	ldr	r3, [sp, #44]	; 0x2c
   14174:	str	r3, [r7, #4]
   14178:	add	fp, r6, r5, lsl #3
   1417c:	ldr	r8, [r6, r5, lsl #3]
   14180:	ldr	r7, [fp, #4]
   14184:	ldr	r3, [r4, #4]
   14188:	orr	r9, r3, #1
   1418c:	add	sl, r4, #8
   14190:	ldr	r3, [r4, #44]	; 0x2c
   14194:	str	r3, [sp, #16]
   14198:	ldr	r3, [r4, #40]	; 0x28
   1419c:	str	r3, [sp, #12]
   141a0:	str	sl, [sp, #8]
   141a4:	str	r9, [sp, #4]
   141a8:	ldr	r3, [r4]
   141ac:	str	r3, [sp]
   141b0:	ldr	r3, [sp, #28]
   141b4:	ldr	r2, [sp, #24]
   141b8:	mov	r1, r8
   141bc:	mov	r0, r7
   141c0:	bl	129a8 <__assert_fail@plt+0x1b20>
   141c4:	cmp	r8, r0
   141c8:	bhi	1422c <__assert_fail@plt+0x33a4>
   141cc:	add	r8, r0, #1
   141d0:	str	r8, [r6, r5, lsl #3]
   141d4:	movw	r3, #29088	; 0x71a0
   141d8:	movt	r3, #2
   141dc:	cmp	r7, r3
   141e0:	beq	141ec <__assert_fail@plt+0x3364>
   141e4:	mov	r0, r7
   141e8:	bl	12624 <__assert_fail@plt+0x179c>
   141ec:	mov	r0, r8
   141f0:	bl	1505c <__assert_fail@plt+0x41d4>
   141f4:	mov	r7, r0
   141f8:	str	r0, [fp, #4]
   141fc:	ldr	r3, [r4, #44]	; 0x2c
   14200:	str	r3, [sp, #16]
   14204:	ldr	r3, [r4, #40]	; 0x28
   14208:	str	r3, [sp, #12]
   1420c:	str	sl, [sp, #8]
   14210:	str	r9, [sp, #4]
   14214:	ldr	r3, [r4]
   14218:	str	r3, [sp]
   1421c:	ldr	r3, [sp, #28]
   14220:	ldr	r2, [sp, #24]
   14224:	mov	r1, r8
   14228:	bl	129a8 <__assert_fail@plt+0x1b20>
   1422c:	ldr	r3, [sp, #32]
   14230:	ldr	r2, [sp, #36]	; 0x24
   14234:	str	r2, [r3]
   14238:	mov	r0, r7
   1423c:	add	sp, sp, #52	; 0x34
   14240:	ldrd	r4, [sp]
   14244:	ldrd	r6, [sp, #8]
   14248:	ldrd	r8, [sp, #16]
   1424c:	ldrd	sl, [sp, #24]
   14250:	add	sp, sp, #32
   14254:	pop	{pc}		; (ldr pc, [sp], #4)
   14258:	bl	10e70 <abort@plt>
   1425c:	sub	r2, r5, r2
   14260:	mov	r3, #8
   14264:	str	r3, [sp]
   14268:	mvn	r3, #-2147483648	; 0x80000000
   1426c:	add	r2, r2, #1
   14270:	add	r1, sp, #44	; 0x2c
   14274:	mov	r0, #0
   14278:	bl	15260 <__assert_fail@plt+0x43d8>
   1427c:	mov	r6, r0
   14280:	movw	r3, #28912	; 0x70f0
   14284:	movt	r3, #2
   14288:	str	r0, [r3]
   1428c:	ldrd	r2, [r3, #8]
   14290:	strd	r2, [r0]
   14294:	b	1414c <__assert_fail@plt+0x32c4>
   14298:	strd	r4, [sp, #-16]!
   1429c:	str	r6, [sp, #8]
   142a0:	str	lr, [sp, #12]
   142a4:	mov	r4, r0
   142a8:	bl	10da4 <__errno_location@plt>
   142ac:	mov	r5, r0
   142b0:	ldr	r6, [r0]
   142b4:	cmp	r4, #0
   142b8:	ldr	r3, [pc, #32]	; 142e0 <__assert_fail@plt+0x3458>
   142bc:	moveq	r4, r3
   142c0:	mov	r1, #48	; 0x30
   142c4:	mov	r0, r4
   142c8:	bl	153d0 <__assert_fail@plt+0x4548>
   142cc:	str	r6, [r5]
   142d0:	ldrd	r4, [sp]
   142d4:	ldr	r6, [sp, #8]
   142d8:	add	sp, sp, #12
   142dc:	pop	{pc}		; (ldr pc, [sp], #4)
   142e0:	andeq	r7, r2, r0, lsr #5
   142e4:	subs	r3, r0, #0
   142e8:	ldr	r2, [pc, #8]	; 142f8 <__assert_fail@plt+0x3470>
   142ec:	moveq	r3, r2
   142f0:	ldr	r0, [r3]
   142f4:	bx	lr
   142f8:	andeq	r7, r2, r0, lsr #5
   142fc:	subs	r3, r0, #0
   14300:	ldr	r2, [pc, #8]	; 14310 <__assert_fail@plt+0x3488>
   14304:	moveq	r3, r2
   14308:	str	r1, [r3]
   1430c:	bx	lr
   14310:	andeq	r7, r2, r0, lsr #5
   14314:	push	{lr}		; (str lr, [sp, #-4]!)
   14318:	subs	r3, r0, #0
   1431c:	ldr	r0, [pc, #44]	; 14350 <__assert_fail@plt+0x34c8>
   14320:	moveq	r3, r0
   14324:	add	r3, r3, #8
   14328:	lsr	lr, r1, #5
   1432c:	and	r1, r1, #31
   14330:	ldr	ip, [r3, lr, lsl #2]
   14334:	lsr	r0, ip, r1
   14338:	eor	r2, r2, r0
   1433c:	and	r2, r2, #1
   14340:	eor	r1, ip, r2, lsl r1
   14344:	str	r1, [r3, lr, lsl #2]
   14348:	and	r0, r0, #1
   1434c:	pop	{pc}		; (ldr pc, [sp], #4)
   14350:	andeq	r7, r2, r0, lsr #5
   14354:	subs	r3, r0, #0
   14358:	ldr	r2, [pc, #12]	; 1436c <__assert_fail@plt+0x34e4>
   1435c:	moveq	r3, r2
   14360:	ldr	r0, [r3, #4]
   14364:	str	r1, [r3, #4]
   14368:	bx	lr
   1436c:	andeq	r7, r2, r0, lsr #5
   14370:	subs	r3, r0, #0
   14374:	ldr	r0, [pc, #44]	; 143a8 <__assert_fail@plt+0x3520>
   14378:	moveq	r3, r0
   1437c:	mov	r0, #10
   14380:	str	r0, [r3]
   14384:	cmp	r2, #0
   14388:	cmpne	r1, #0
   1438c:	beq	1439c <__assert_fail@plt+0x3514>
   14390:	str	r1, [r3, #40]	; 0x28
   14394:	str	r2, [r3, #44]	; 0x2c
   14398:	bx	lr
   1439c:	str	r4, [sp, #-8]!
   143a0:	str	lr, [sp, #4]
   143a4:	bl	10e70 <abort@plt>
   143a8:	andeq	r7, r2, r0, lsr #5
   143ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   143b0:	strd	r6, [sp, #8]
   143b4:	strd	r8, [sp, #16]
   143b8:	str	sl, [sp, #24]
   143bc:	str	lr, [sp, #28]
   143c0:	sub	sp, sp, #24
   143c4:	mov	r7, r0
   143c8:	mov	r8, r1
   143cc:	mov	r9, r2
   143d0:	mov	sl, r3
   143d4:	ldr	r4, [sp, #56]	; 0x38
   143d8:	cmp	r4, #0
   143dc:	ldr	r3, [pc, #104]	; 1444c <__assert_fail@plt+0x35c4>
   143e0:	moveq	r4, r3
   143e4:	bl	10da4 <__errno_location@plt>
   143e8:	mov	r5, r0
   143ec:	ldr	r6, [r0]
   143f0:	ldr	r3, [r4, #44]	; 0x2c
   143f4:	str	r3, [sp, #16]
   143f8:	ldr	r3, [r4, #40]	; 0x28
   143fc:	str	r3, [sp, #12]
   14400:	add	r3, r4, #8
   14404:	str	r3, [sp, #8]
   14408:	ldr	r3, [r4, #4]
   1440c:	str	r3, [sp, #4]
   14410:	ldr	r3, [r4]
   14414:	str	r3, [sp]
   14418:	mov	r3, sl
   1441c:	mov	r2, r9
   14420:	mov	r1, r8
   14424:	mov	r0, r7
   14428:	bl	129a8 <__assert_fail@plt+0x1b20>
   1442c:	str	r6, [r5]
   14430:	add	sp, sp, #24
   14434:	ldrd	r4, [sp]
   14438:	ldrd	r6, [sp, #8]
   1443c:	ldrd	r8, [sp, #16]
   14440:	ldr	sl, [sp, #24]
   14444:	add	sp, sp, #28
   14448:	pop	{pc}		; (ldr pc, [sp], #4)
   1444c:	andeq	r7, r2, r0, lsr #5
   14450:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14454:	strd	r6, [sp, #8]
   14458:	strd	r8, [sp, #16]
   1445c:	strd	sl, [sp, #24]
   14460:	str	lr, [sp, #32]
   14464:	sub	sp, sp, #44	; 0x2c
   14468:	mov	r8, r0
   1446c:	mov	sl, r1
   14470:	mov	r6, r2
   14474:	subs	r4, r3, #0
   14478:	ldr	r3, [pc, #200]	; 14548 <__assert_fail@plt+0x36c0>
   1447c:	moveq	r4, r3
   14480:	bl	10da4 <__errno_location@plt>
   14484:	mov	r7, r0
   14488:	ldr	fp, [r0]
   1448c:	ldr	r5, [r4, #4]
   14490:	cmp	r6, #0
   14494:	orreq	r5, r5, #1
   14498:	add	r9, r4, #8
   1449c:	ldr	r3, [r4, #44]	; 0x2c
   144a0:	str	r3, [sp, #16]
   144a4:	ldr	r3, [r4, #40]	; 0x28
   144a8:	str	r3, [sp, #12]
   144ac:	str	r9, [sp, #8]
   144b0:	str	r5, [sp, #4]
   144b4:	ldr	r3, [r4]
   144b8:	str	r3, [sp]
   144bc:	str	sl, [sp, #36]	; 0x24
   144c0:	mov	r3, sl
   144c4:	str	r8, [sp, #32]
   144c8:	mov	r2, r8
   144cc:	mov	r1, #0
   144d0:	mov	r0, r1
   144d4:	bl	129a8 <__assert_fail@plt+0x1b20>
   144d8:	mov	sl, r0
   144dc:	add	r8, r0, #1
   144e0:	mov	r0, r8
   144e4:	bl	1505c <__assert_fail@plt+0x41d4>
   144e8:	str	r0, [sp, #28]
   144ec:	ldr	r3, [r4, #44]	; 0x2c
   144f0:	str	r3, [sp, #16]
   144f4:	ldr	r3, [r4, #40]	; 0x28
   144f8:	str	r3, [sp, #12]
   144fc:	str	r9, [sp, #8]
   14500:	str	r5, [sp, #4]
   14504:	ldr	r3, [r4]
   14508:	str	r3, [sp]
   1450c:	ldr	r3, [sp, #36]	; 0x24
   14510:	ldr	r2, [sp, #32]
   14514:	mov	r1, r8
   14518:	bl	129a8 <__assert_fail@plt+0x1b20>
   1451c:	str	fp, [r7]
   14520:	cmp	r6, #0
   14524:	strne	sl, [r6]
   14528:	ldr	r0, [sp, #28]
   1452c:	add	sp, sp, #44	; 0x2c
   14530:	ldrd	r4, [sp]
   14534:	ldrd	r6, [sp, #8]
   14538:	ldrd	r8, [sp, #16]
   1453c:	ldrd	sl, [sp, #24]
   14540:	add	sp, sp, #32
   14544:	pop	{pc}		; (ldr pc, [sp], #4)
   14548:	andeq	r7, r2, r0, lsr #5
   1454c:	str	r4, [sp, #-8]!
   14550:	str	lr, [sp, #4]
   14554:	mov	r3, r2
   14558:	mov	r2, #0
   1455c:	bl	14450 <__assert_fail@plt+0x35c8>
   14560:	ldr	r4, [sp]
   14564:	add	sp, sp, #4
   14568:	pop	{pc}		; (ldr pc, [sp], #4)
   1456c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14570:	strd	r6, [sp, #8]
   14574:	str	r8, [sp, #16]
   14578:	str	lr, [sp, #20]
   1457c:	movw	r3, #28912	; 0x70f0
   14580:	movt	r3, #2
   14584:	ldr	r7, [r3]
   14588:	ldr	r3, [r3, #4]
   1458c:	cmp	r3, #1
   14590:	ble	145bc <__assert_fail@plt+0x3734>
   14594:	mov	r4, #1
   14598:	add	r6, r7, #4
   1459c:	movw	r5, #28912	; 0x70f0
   145a0:	movt	r5, #2
   145a4:	ldr	r0, [r6, r4, lsl #3]
   145a8:	bl	12624 <__assert_fail@plt+0x179c>
   145ac:	add	r4, r4, #1
   145b0:	ldr	r3, [r5, #4]
   145b4:	cmp	r3, r4
   145b8:	bgt	145a4 <__assert_fail@plt+0x371c>
   145bc:	ldr	r0, [r7, #4]
   145c0:	movw	r3, #29088	; 0x71a0
   145c4:	movt	r3, #2
   145c8:	cmp	r0, r3
   145cc:	beq	145f0 <__assert_fail@plt+0x3768>
   145d0:	bl	12624 <__assert_fail@plt+0x179c>
   145d4:	movw	r3, #28912	; 0x70f0
   145d8:	movt	r3, #2
   145dc:	mov	r2, #256	; 0x100
   145e0:	str	r2, [r3, #8]
   145e4:	movw	r2, #29088	; 0x71a0
   145e8:	movt	r2, #2
   145ec:	str	r2, [r3, #12]
   145f0:	ldr	r3, [pc, #64]	; 14638 <__assert_fail@plt+0x37b0>
   145f4:	cmp	r7, r3
   145f8:	beq	14614 <__assert_fail@plt+0x378c>
   145fc:	mov	r0, r7
   14600:	bl	12624 <__assert_fail@plt+0x179c>
   14604:	movw	r3, #28912	; 0x70f0
   14608:	movt	r3, #2
   1460c:	add	r2, r3, #8
   14610:	str	r2, [r3]
   14614:	movw	r3, #28912	; 0x70f0
   14618:	movt	r3, #2
   1461c:	mov	r2, #1
   14620:	str	r2, [r3, #4]
   14624:	ldrd	r4, [sp]
   14628:	ldrd	r6, [sp, #8]
   1462c:	ldr	r8, [sp, #16]
   14630:	add	sp, sp, #20
   14634:	pop	{pc}		; (ldr pc, [sp], #4)
   14638:	strdeq	r7, [r2], -r8
   1463c:	str	r4, [sp, #-8]!
   14640:	str	lr, [sp, #4]
   14644:	ldr	r3, [pc, #16]	; 1465c <__assert_fail@plt+0x37d4>
   14648:	mvn	r2, #0
   1464c:	bl	140a0 <__assert_fail@plt+0x3218>
   14650:	ldr	r4, [sp]
   14654:	add	sp, sp, #4
   14658:	pop	{pc}		; (ldr pc, [sp], #4)
   1465c:	andeq	r7, r2, r0, lsr #5
   14660:	str	r4, [sp, #-8]!
   14664:	str	lr, [sp, #4]
   14668:	ldr	r3, [pc, #12]	; 1467c <__assert_fail@plt+0x37f4>
   1466c:	bl	140a0 <__assert_fail@plt+0x3218>
   14670:	ldr	r4, [sp]
   14674:	add	sp, sp, #4
   14678:	pop	{pc}		; (ldr pc, [sp], #4)
   1467c:	andeq	r7, r2, r0, lsr #5
   14680:	str	r4, [sp, #-8]!
   14684:	str	lr, [sp, #4]
   14688:	mov	r1, r0
   1468c:	mov	r0, #0
   14690:	bl	1463c <__assert_fail@plt+0x37b4>
   14694:	ldr	r4, [sp]
   14698:	add	sp, sp, #4
   1469c:	pop	{pc}		; (ldr pc, [sp], #4)
   146a0:	str	r4, [sp, #-8]!
   146a4:	str	lr, [sp, #4]
   146a8:	mov	r2, r1
   146ac:	mov	r1, r0
   146b0:	mov	r0, #0
   146b4:	bl	14660 <__assert_fail@plt+0x37d8>
   146b8:	ldr	r4, [sp]
   146bc:	add	sp, sp, #4
   146c0:	pop	{pc}		; (ldr pc, [sp], #4)
   146c4:	strd	r4, [sp, #-12]!
   146c8:	str	lr, [sp, #8]
   146cc:	sub	sp, sp, #52	; 0x34
   146d0:	mov	r4, r0
   146d4:	mov	r5, r2
   146d8:	mov	r0, sp
   146dc:	bl	12814 <__assert_fail@plt+0x198c>
   146e0:	mov	r3, sp
   146e4:	mvn	r2, #0
   146e8:	mov	r1, r5
   146ec:	mov	r0, r4
   146f0:	bl	140a0 <__assert_fail@plt+0x3218>
   146f4:	add	sp, sp, #52	; 0x34
   146f8:	ldrd	r4, [sp]
   146fc:	add	sp, sp, #8
   14700:	pop	{pc}		; (ldr pc, [sp], #4)
   14704:	strd	r4, [sp, #-16]!
   14708:	str	r6, [sp, #8]
   1470c:	str	lr, [sp, #12]
   14710:	sub	sp, sp, #48	; 0x30
   14714:	mov	r4, r0
   14718:	mov	r5, r2
   1471c:	mov	r6, r3
   14720:	mov	r0, sp
   14724:	bl	12814 <__assert_fail@plt+0x198c>
   14728:	mov	r3, sp
   1472c:	mov	r2, r6
   14730:	mov	r1, r5
   14734:	mov	r0, r4
   14738:	bl	140a0 <__assert_fail@plt+0x3218>
   1473c:	add	sp, sp, #48	; 0x30
   14740:	ldrd	r4, [sp]
   14744:	ldr	r6, [sp, #8]
   14748:	add	sp, sp, #12
   1474c:	pop	{pc}		; (ldr pc, [sp], #4)
   14750:	str	r4, [sp, #-8]!
   14754:	str	lr, [sp, #4]
   14758:	mov	r2, r1
   1475c:	mov	r1, r0
   14760:	mov	r0, #0
   14764:	bl	146c4 <__assert_fail@plt+0x383c>
   14768:	ldr	r4, [sp]
   1476c:	add	sp, sp, #4
   14770:	pop	{pc}		; (ldr pc, [sp], #4)
   14774:	str	r4, [sp, #-8]!
   14778:	str	lr, [sp, #4]
   1477c:	mov	r3, r2
   14780:	mov	r2, r1
   14784:	mov	r1, r0
   14788:	mov	r0, #0
   1478c:	bl	14704 <__assert_fail@plt+0x387c>
   14790:	ldr	r4, [sp]
   14794:	add	sp, sp, #4
   14798:	pop	{pc}		; (ldr pc, [sp], #4)
   1479c:	strd	r4, [sp, #-12]!
   147a0:	str	lr, [sp, #8]
   147a4:	sub	sp, sp, #52	; 0x34
   147a8:	mov	r4, r0
   147ac:	mov	r5, r1
   147b0:	mov	r1, r2
   147b4:	ldr	r0, [pc, #92]	; 14818 <__assert_fail@plt+0x3990>
   147b8:	ldrd	r2, [r0]
   147bc:	strd	r2, [sp]
   147c0:	ldrd	r2, [r0, #8]
   147c4:	strd	r2, [sp, #8]
   147c8:	ldrd	r2, [r0, #16]
   147cc:	strd	r2, [sp, #16]
   147d0:	ldrd	r2, [r0, #24]
   147d4:	strd	r2, [sp, #24]
   147d8:	ldrd	r2, [r0, #32]
   147dc:	strd	r2, [sp, #32]
   147e0:	ldrd	r2, [r0, #40]	; 0x28
   147e4:	strd	r2, [sp, #40]	; 0x28
   147e8:	mov	r2, #1
   147ec:	mov	r0, sp
   147f0:	bl	14314 <__assert_fail@plt+0x348c>
   147f4:	mov	r3, sp
   147f8:	mov	r2, r5
   147fc:	mov	r1, r4
   14800:	mov	r0, #0
   14804:	bl	140a0 <__assert_fail@plt+0x3218>
   14808:	add	sp, sp, #52	; 0x34
   1480c:	ldrd	r4, [sp]
   14810:	add	sp, sp, #8
   14814:	pop	{pc}		; (ldr pc, [sp], #4)
   14818:	andeq	r7, r2, r0, lsr #5
   1481c:	str	r4, [sp, #-8]!
   14820:	str	lr, [sp, #4]
   14824:	mov	r2, r1
   14828:	mvn	r1, #0
   1482c:	bl	1479c <__assert_fail@plt+0x3914>
   14830:	ldr	r4, [sp]
   14834:	add	sp, sp, #4
   14838:	pop	{pc}		; (ldr pc, [sp], #4)
   1483c:	str	r4, [sp, #-8]!
   14840:	str	lr, [sp, #4]
   14844:	mov	r1, #58	; 0x3a
   14848:	bl	1481c <__assert_fail@plt+0x3994>
   1484c:	ldr	r4, [sp]
   14850:	add	sp, sp, #4
   14854:	pop	{pc}		; (ldr pc, [sp], #4)
   14858:	str	r4, [sp, #-8]!
   1485c:	str	lr, [sp, #4]
   14860:	mov	r2, #58	; 0x3a
   14864:	bl	1479c <__assert_fail@plt+0x3914>
   14868:	ldr	r4, [sp]
   1486c:	add	sp, sp, #4
   14870:	pop	{pc}		; (ldr pc, [sp], #4)
   14874:	strd	r4, [sp, #-12]!
   14878:	str	lr, [sp, #8]
   1487c:	sub	sp, sp, #100	; 0x64
   14880:	mov	r4, r0
   14884:	mov	r5, r2
   14888:	mov	r0, sp
   1488c:	bl	12814 <__assert_fail@plt+0x198c>
   14890:	ldrd	r2, [sp]
   14894:	strd	r2, [sp, #48]	; 0x30
   14898:	ldrd	r2, [sp, #8]
   1489c:	strd	r2, [sp, #56]	; 0x38
   148a0:	ldrd	r2, [sp, #16]
   148a4:	strd	r2, [sp, #64]	; 0x40
   148a8:	ldrd	r2, [sp, #24]
   148ac:	strd	r2, [sp, #72]	; 0x48
   148b0:	ldrd	r2, [sp, #32]
   148b4:	strd	r2, [sp, #80]	; 0x50
   148b8:	ldrd	r2, [sp, #40]	; 0x28
   148bc:	strd	r2, [sp, #88]	; 0x58
   148c0:	mov	r2, #1
   148c4:	mov	r1, #58	; 0x3a
   148c8:	add	r0, sp, #48	; 0x30
   148cc:	bl	14314 <__assert_fail@plt+0x348c>
   148d0:	add	r3, sp, #48	; 0x30
   148d4:	mvn	r2, #0
   148d8:	mov	r1, r5
   148dc:	mov	r0, r4
   148e0:	bl	140a0 <__assert_fail@plt+0x3218>
   148e4:	add	sp, sp, #100	; 0x64
   148e8:	ldrd	r4, [sp]
   148ec:	add	sp, sp, #8
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   148f8:	strd	r6, [sp, #8]
   148fc:	str	lr, [sp, #16]
   14900:	sub	sp, sp, #52	; 0x34
   14904:	mov	r4, r0
   14908:	mov	r5, r3
   1490c:	ldr	r3, [pc, #92]	; 14970 <__assert_fail@plt+0x3ae8>
   14910:	ldrd	r6, [r3]
   14914:	strd	r6, [sp]
   14918:	ldrd	r6, [r3, #8]
   1491c:	strd	r6, [sp, #8]
   14920:	ldrd	r6, [r3, #16]
   14924:	strd	r6, [sp, #16]
   14928:	ldrd	r6, [r3, #24]
   1492c:	strd	r6, [sp, #24]
   14930:	ldrd	r6, [r3, #32]
   14934:	strd	r6, [sp, #32]
   14938:	ldrd	r6, [r3, #40]	; 0x28
   1493c:	strd	r6, [sp, #40]	; 0x28
   14940:	mov	r0, sp
   14944:	bl	14370 <__assert_fail@plt+0x34e8>
   14948:	mov	r3, sp
   1494c:	ldr	r2, [sp, #72]	; 0x48
   14950:	mov	r1, r5
   14954:	mov	r0, r4
   14958:	bl	140a0 <__assert_fail@plt+0x3218>
   1495c:	add	sp, sp, #52	; 0x34
   14960:	ldrd	r4, [sp]
   14964:	ldrd	r6, [sp, #8]
   14968:	add	sp, sp, #16
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	andeq	r7, r2, r0, lsr #5
   14974:	push	{lr}		; (str lr, [sp, #-4]!)
   14978:	sub	sp, sp, #12
   1497c:	mvn	ip, #0
   14980:	str	ip, [sp]
   14984:	bl	148f4 <__assert_fail@plt+0x3a6c>
   14988:	add	sp, sp, #12
   1498c:	pop	{pc}		; (ldr pc, [sp], #4)
   14990:	str	r4, [sp, #-8]!
   14994:	str	lr, [sp, #4]
   14998:	mov	r3, r2
   1499c:	mov	r2, r1
   149a0:	mov	r1, r0
   149a4:	mov	r0, #0
   149a8:	bl	14974 <__assert_fail@plt+0x3aec>
   149ac:	ldr	r4, [sp]
   149b0:	add	sp, sp, #4
   149b4:	pop	{pc}		; (ldr pc, [sp], #4)
   149b8:	push	{lr}		; (str lr, [sp, #-4]!)
   149bc:	sub	sp, sp, #12
   149c0:	str	r3, [sp]
   149c4:	mov	r3, r2
   149c8:	mov	r2, r1
   149cc:	mov	r1, r0
   149d0:	mov	r0, #0
   149d4:	bl	148f4 <__assert_fail@plt+0x3a6c>
   149d8:	add	sp, sp, #12
   149dc:	pop	{pc}		; (ldr pc, [sp], #4)
   149e0:	str	r4, [sp, #-8]!
   149e4:	str	lr, [sp, #4]
   149e8:	ldr	r3, [pc, #12]	; 149fc <__assert_fail@plt+0x3b74>
   149ec:	bl	140a0 <__assert_fail@plt+0x3218>
   149f0:	ldr	r4, [sp]
   149f4:	add	sp, sp, #4
   149f8:	pop	{pc}		; (ldr pc, [sp], #4)
   149fc:	andeq	r7, r2, r0, lsl #2
   14a00:	str	r4, [sp, #-8]!
   14a04:	str	lr, [sp, #4]
   14a08:	mov	r2, r1
   14a0c:	mov	r1, r0
   14a10:	mov	r0, #0
   14a14:	bl	149e0 <__assert_fail@plt+0x3b58>
   14a18:	ldr	r4, [sp]
   14a1c:	add	sp, sp, #4
   14a20:	pop	{pc}		; (ldr pc, [sp], #4)
   14a24:	str	r4, [sp, #-8]!
   14a28:	str	lr, [sp, #4]
   14a2c:	mvn	r2, #0
   14a30:	bl	149e0 <__assert_fail@plt+0x3b58>
   14a34:	ldr	r4, [sp]
   14a38:	add	sp, sp, #4
   14a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a40:	str	r4, [sp, #-8]!
   14a44:	str	lr, [sp, #4]
   14a48:	mov	r1, r0
   14a4c:	mov	r0, #0
   14a50:	bl	14a24 <__assert_fail@plt+0x3b9c>
   14a54:	ldr	r4, [sp]
   14a58:	add	sp, sp, #4
   14a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a60:	strd	r4, [sp, #-16]!
   14a64:	str	r6, [sp, #8]
   14a68:	str	lr, [sp, #12]
   14a6c:	sub	sp, sp, #32
   14a70:	mov	r4, r0
   14a74:	ldr	r5, [sp, #48]	; 0x30
   14a78:	ldr	r6, [sp, #52]	; 0x34
   14a7c:	cmp	r1, #0
   14a80:	beq	14b4c <__assert_fail@plt+0x3cc4>
   14a84:	str	r3, [sp, #4]
   14a88:	str	r2, [sp]
   14a8c:	mov	r3, r1
   14a90:	movw	r2, #25488	; 0x6390
   14a94:	movt	r2, #1
   14a98:	mov	r1, #1
   14a9c:	bl	10de0 <__fprintf_chk@plt>
   14aa0:	mov	r2, #5
   14aa4:	movw	r1, #25508	; 0x63a4
   14aa8:	movt	r1, #1
   14aac:	mov	r0, #0
   14ab0:	bl	10ccc <dcgettext@plt>
   14ab4:	movw	r3, #2022	; 0x7e6
   14ab8:	str	r3, [sp]
   14abc:	mov	r3, r0
   14ac0:	movw	r2, #26236	; 0x667c
   14ac4:	movt	r2, #1
   14ac8:	mov	r1, #1
   14acc:	mov	r0, r4
   14ad0:	bl	10de0 <__fprintf_chk@plt>
   14ad4:	mov	r1, r4
   14ad8:	mov	r0, #10
   14adc:	bl	10cc0 <fputc_unlocked@plt>
   14ae0:	mov	r2, #5
   14ae4:	movw	r1, #25512	; 0x63a8
   14ae8:	movt	r1, #1
   14aec:	mov	r0, #0
   14af0:	bl	10ccc <dcgettext@plt>
   14af4:	movw	r3, #25684	; 0x6454
   14af8:	movt	r3, #1
   14afc:	mov	r2, r0
   14b00:	mov	r1, #1
   14b04:	mov	r0, r4
   14b08:	bl	10de0 <__fprintf_chk@plt>
   14b0c:	mov	r1, r4
   14b10:	mov	r0, #10
   14b14:	bl	10cc0 <fputc_unlocked@plt>
   14b18:	cmp	r6, #9
   14b1c:	ldrls	pc, [pc, r6, lsl #2]
   14b20:	b	14e24 <__assert_fail@plt+0x3f9c>
   14b24:	muleq	r1, r0, fp
   14b28:	andeq	r4, r1, r8, ror #22
   14b2c:	andeq	r4, r1, r4, lsr #23
   14b30:	ldrdeq	r4, [r1], -r8
   14b34:	andeq	r4, r1, r4, lsl ip
   14b38:	andeq	r4, r1, r8, asr ip
   14b3c:	andeq	r4, r1, r4, lsr #25
   14b40:	strdeq	r4, [r1], -r8
   14b44:	andeq	r4, r1, r4, asr sp
   14b48:			; <UNDEFINED> instruction: 0x00014db8
   14b4c:	str	r3, [sp]
   14b50:	mov	r3, r2
   14b54:	movw	r2, #25500	; 0x639c
   14b58:	movt	r2, #1
   14b5c:	mov	r1, #1
   14b60:	bl	10de0 <__fprintf_chk@plt>
   14b64:	b	14aa0 <__assert_fail@plt+0x3c18>
   14b68:	mov	r2, #5
   14b6c:	movw	r1, #25720	; 0x6478
   14b70:	movt	r1, #1
   14b74:	mov	r0, #0
   14b78:	bl	10ccc <dcgettext@plt>
   14b7c:	ldr	r3, [r5]
   14b80:	mov	r2, r0
   14b84:	mov	r1, #1
   14b88:	mov	r0, r4
   14b8c:	bl	10de0 <__fprintf_chk@plt>
   14b90:	add	sp, sp, #32
   14b94:	ldrd	r4, [sp]
   14b98:	ldr	r6, [sp, #8]
   14b9c:	add	sp, sp, #12
   14ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba4:	mov	r2, #5
   14ba8:	movw	r1, #25736	; 0x6488
   14bac:	movt	r1, #1
   14bb0:	mov	r0, #0
   14bb4:	bl	10ccc <dcgettext@plt>
   14bb8:	ldr	r3, [r5, #4]
   14bbc:	str	r3, [sp]
   14bc0:	ldr	r3, [r5]
   14bc4:	mov	r2, r0
   14bc8:	mov	r1, #1
   14bcc:	mov	r0, r4
   14bd0:	bl	10de0 <__fprintf_chk@plt>
   14bd4:	b	14b90 <__assert_fail@plt+0x3d08>
   14bd8:	mov	r2, #5
   14bdc:	movw	r1, #25760	; 0x64a0
   14be0:	movt	r1, #1
   14be4:	mov	r0, #0
   14be8:	bl	10ccc <dcgettext@plt>
   14bec:	ldr	r3, [r5, #8]
   14bf0:	str	r3, [sp, #4]
   14bf4:	ldr	r3, [r5, #4]
   14bf8:	str	r3, [sp]
   14bfc:	ldr	r3, [r5]
   14c00:	mov	r2, r0
   14c04:	mov	r1, #1
   14c08:	mov	r0, r4
   14c0c:	bl	10de0 <__fprintf_chk@plt>
   14c10:	b	14b90 <__assert_fail@plt+0x3d08>
   14c14:	mov	r2, #5
   14c18:	movw	r1, #25788	; 0x64bc
   14c1c:	movt	r1, #1
   14c20:	mov	r0, #0
   14c24:	bl	10ccc <dcgettext@plt>
   14c28:	ldr	r3, [r5, #12]
   14c2c:	str	r3, [sp, #8]
   14c30:	ldr	r3, [r5, #8]
   14c34:	str	r3, [sp, #4]
   14c38:	ldr	r3, [r5, #4]
   14c3c:	str	r3, [sp]
   14c40:	ldr	r3, [r5]
   14c44:	mov	r2, r0
   14c48:	mov	r1, #1
   14c4c:	mov	r0, r4
   14c50:	bl	10de0 <__fprintf_chk@plt>
   14c54:	b	14b90 <__assert_fail@plt+0x3d08>
   14c58:	mov	r2, #5
   14c5c:	movw	r1, #25820	; 0x64dc
   14c60:	movt	r1, #1
   14c64:	mov	r0, #0
   14c68:	bl	10ccc <dcgettext@plt>
   14c6c:	ldr	r3, [r5, #16]
   14c70:	str	r3, [sp, #12]
   14c74:	ldr	r3, [r5, #12]
   14c78:	str	r3, [sp, #8]
   14c7c:	ldr	r3, [r5, #8]
   14c80:	str	r3, [sp, #4]
   14c84:	ldr	r3, [r5, #4]
   14c88:	str	r3, [sp]
   14c8c:	ldr	r3, [r5]
   14c90:	mov	r2, r0
   14c94:	mov	r1, #1
   14c98:	mov	r0, r4
   14c9c:	bl	10de0 <__fprintf_chk@plt>
   14ca0:	b	14b90 <__assert_fail@plt+0x3d08>
   14ca4:	mov	r2, #5
   14ca8:	movw	r1, #25856	; 0x6500
   14cac:	movt	r1, #1
   14cb0:	mov	r0, #0
   14cb4:	bl	10ccc <dcgettext@plt>
   14cb8:	ldr	r3, [r5, #20]
   14cbc:	str	r3, [sp, #16]
   14cc0:	ldr	r3, [r5, #16]
   14cc4:	str	r3, [sp, #12]
   14cc8:	ldr	r3, [r5, #12]
   14ccc:	str	r3, [sp, #8]
   14cd0:	ldr	r3, [r5, #8]
   14cd4:	str	r3, [sp, #4]
   14cd8:	ldr	r3, [r5, #4]
   14cdc:	str	r3, [sp]
   14ce0:	ldr	r3, [r5]
   14ce4:	mov	r2, r0
   14ce8:	mov	r1, #1
   14cec:	mov	r0, r4
   14cf0:	bl	10de0 <__fprintf_chk@plt>
   14cf4:	b	14b90 <__assert_fail@plt+0x3d08>
   14cf8:	mov	r2, #5
   14cfc:	movw	r1, #25896	; 0x6528
   14d00:	movt	r1, #1
   14d04:	mov	r0, #0
   14d08:	bl	10ccc <dcgettext@plt>
   14d0c:	ldr	r3, [r5, #24]
   14d10:	str	r3, [sp, #20]
   14d14:	ldr	r3, [r5, #20]
   14d18:	str	r3, [sp, #16]
   14d1c:	ldr	r3, [r5, #16]
   14d20:	str	r3, [sp, #12]
   14d24:	ldr	r3, [r5, #12]
   14d28:	str	r3, [sp, #8]
   14d2c:	ldr	r3, [r5, #8]
   14d30:	str	r3, [sp, #4]
   14d34:	ldr	r3, [r5, #4]
   14d38:	str	r3, [sp]
   14d3c:	ldr	r3, [r5]
   14d40:	mov	r2, r0
   14d44:	mov	r1, #1
   14d48:	mov	r0, r4
   14d4c:	bl	10de0 <__fprintf_chk@plt>
   14d50:	b	14b90 <__assert_fail@plt+0x3d08>
   14d54:	mov	r2, #5
   14d58:	movw	r1, #25940	; 0x6554
   14d5c:	movt	r1, #1
   14d60:	mov	r0, #0
   14d64:	bl	10ccc <dcgettext@plt>
   14d68:	ldr	r3, [r5, #28]
   14d6c:	str	r3, [sp, #24]
   14d70:	ldr	r3, [r5, #24]
   14d74:	str	r3, [sp, #20]
   14d78:	ldr	r3, [r5, #20]
   14d7c:	str	r3, [sp, #16]
   14d80:	ldr	r3, [r5, #16]
   14d84:	str	r3, [sp, #12]
   14d88:	ldr	r3, [r5, #12]
   14d8c:	str	r3, [sp, #8]
   14d90:	ldr	r3, [r5, #8]
   14d94:	str	r3, [sp, #4]
   14d98:	ldr	r3, [r5, #4]
   14d9c:	str	r3, [sp]
   14da0:	ldr	r3, [r5]
   14da4:	mov	r2, r0
   14da8:	mov	r1, #1
   14dac:	mov	r0, r4
   14db0:	bl	10de0 <__fprintf_chk@plt>
   14db4:	b	14b90 <__assert_fail@plt+0x3d08>
   14db8:	mov	r2, #5
   14dbc:	movw	r1, #25988	; 0x6584
   14dc0:	movt	r1, #1
   14dc4:	mov	r0, #0
   14dc8:	bl	10ccc <dcgettext@plt>
   14dcc:	ldr	r3, [r5, #32]
   14dd0:	str	r3, [sp, #28]
   14dd4:	ldr	r3, [r5, #28]
   14dd8:	str	r3, [sp, #24]
   14ddc:	ldr	r3, [r5, #24]
   14de0:	str	r3, [sp, #20]
   14de4:	ldr	r3, [r5, #20]
   14de8:	str	r3, [sp, #16]
   14dec:	ldr	r3, [r5, #16]
   14df0:	str	r3, [sp, #12]
   14df4:	ldr	r3, [r5, #12]
   14df8:	str	r3, [sp, #8]
   14dfc:	ldr	r3, [r5, #8]
   14e00:	str	r3, [sp, #4]
   14e04:	ldr	r3, [r5, #4]
   14e08:	str	r3, [sp]
   14e0c:	ldr	r3, [r5]
   14e10:	mov	r2, r0
   14e14:	mov	r1, #1
   14e18:	mov	r0, r4
   14e1c:	bl	10de0 <__fprintf_chk@plt>
   14e20:	b	14b90 <__assert_fail@plt+0x3d08>
   14e24:	mov	r2, #5
   14e28:	movw	r1, #26040	; 0x65b8
   14e2c:	movt	r1, #1
   14e30:	mov	r0, #0
   14e34:	bl	10ccc <dcgettext@plt>
   14e38:	ldr	r3, [r5, #32]
   14e3c:	str	r3, [sp, #28]
   14e40:	ldr	r3, [r5, #28]
   14e44:	str	r3, [sp, #24]
   14e48:	ldr	r3, [r5, #24]
   14e4c:	str	r3, [sp, #20]
   14e50:	ldr	r3, [r5, #20]
   14e54:	str	r3, [sp, #16]
   14e58:	ldr	r3, [r5, #16]
   14e5c:	str	r3, [sp, #12]
   14e60:	ldr	r3, [r5, #12]
   14e64:	str	r3, [sp, #8]
   14e68:	ldr	r3, [r5, #8]
   14e6c:	str	r3, [sp, #4]
   14e70:	ldr	r3, [r5, #4]
   14e74:	str	r3, [sp]
   14e78:	ldr	r3, [r5]
   14e7c:	mov	r2, r0
   14e80:	mov	r1, #1
   14e84:	mov	r0, r4
   14e88:	bl	10de0 <__fprintf_chk@plt>
   14e8c:	b	14b90 <__assert_fail@plt+0x3d08>
   14e90:	strd	r4, [sp, #-12]!
   14e94:	str	lr, [sp, #8]
   14e98:	sub	sp, sp, #12
   14e9c:	ldr	r5, [sp, #24]
   14ea0:	ldr	ip, [r5]
   14ea4:	cmp	ip, #0
   14ea8:	beq	14ee0 <__assert_fail@plt+0x4058>
   14eac:	mov	lr, r5
   14eb0:	mov	ip, #0
   14eb4:	add	ip, ip, #1
   14eb8:	ldr	r4, [lr, #4]!
   14ebc:	cmp	r4, #0
   14ec0:	bne	14eb4 <__assert_fail@plt+0x402c>
   14ec4:	str	ip, [sp, #4]
   14ec8:	str	r5, [sp]
   14ecc:	bl	14a60 <__assert_fail@plt+0x3bd8>
   14ed0:	add	sp, sp, #12
   14ed4:	ldrd	r4, [sp]
   14ed8:	add	sp, sp, #8
   14edc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee0:	mov	ip, #0
   14ee4:	b	14ec4 <__assert_fail@plt+0x403c>
   14ee8:	strd	r4, [sp, #-12]!
   14eec:	str	lr, [sp, #8]
   14ef0:	sub	sp, sp, #52	; 0x34
   14ef4:	ldr	r5, [sp, #64]	; 0x40
   14ef8:	add	r4, sp, #8
   14efc:	mov	ip, #0
   14f00:	ldr	lr, [r5], #4
   14f04:	str	lr, [r4], #4
   14f08:	cmp	lr, #0
   14f0c:	beq	14f1c <__assert_fail@plt+0x4094>
   14f10:	add	ip, ip, #1
   14f14:	cmp	ip, #10
   14f18:	bne	14f00 <__assert_fail@plt+0x4078>
   14f1c:	str	ip, [sp, #4]
   14f20:	add	ip, sp, #8
   14f24:	str	ip, [sp]
   14f28:	bl	14a60 <__assert_fail@plt+0x3bd8>
   14f2c:	add	sp, sp, #52	; 0x34
   14f30:	ldrd	r4, [sp]
   14f34:	add	sp, sp, #8
   14f38:	pop	{pc}		; (ldr pc, [sp], #4)
   14f3c:	push	{r3}		; (str r3, [sp, #-4]!)
   14f40:	push	{lr}		; (str lr, [sp, #-4]!)
   14f44:	sub	sp, sp, #16
   14f48:	add	r3, sp, #24
   14f4c:	str	r3, [sp, #12]
   14f50:	str	r3, [sp]
   14f54:	ldr	r3, [sp, #20]
   14f58:	bl	14ee8 <__assert_fail@plt+0x4060>
   14f5c:	add	sp, sp, #16
   14f60:	pop	{lr}		; (ldr lr, [sp], #4)
   14f64:	add	sp, sp, #4
   14f68:	bx	lr
   14f6c:	str	r4, [sp, #-8]!
   14f70:	str	lr, [sp, #4]
   14f74:	movw	r3, #29004	; 0x714c
   14f78:	movt	r3, #2
   14f7c:	ldr	r1, [r3]
   14f80:	mov	r0, #10
   14f84:	bl	10cc0 <fputc_unlocked@plt>
   14f88:	mov	r2, #5
   14f8c:	movw	r1, #26100	; 0x65f4
   14f90:	movt	r1, #1
   14f94:	mov	r0, #0
   14f98:	bl	10ccc <dcgettext@plt>
   14f9c:	movw	r2, #26120	; 0x6608
   14fa0:	movt	r2, #1
   14fa4:	mov	r1, r0
   14fa8:	mov	r0, #1
   14fac:	bl	10dc8 <__printf_chk@plt>
   14fb0:	mov	r2, #5
   14fb4:	movw	r1, #26144	; 0x6620
   14fb8:	movt	r1, #1
   14fbc:	mov	r0, #0
   14fc0:	bl	10ccc <dcgettext@plt>
   14fc4:	movw	r3, #23876	; 0x5d44
   14fc8:	movt	r3, #1
   14fcc:	movw	r2, #23916	; 0x5d6c
   14fd0:	movt	r2, #1
   14fd4:	mov	r1, r0
   14fd8:	mov	r0, #1
   14fdc:	bl	10dc8 <__printf_chk@plt>
   14fe0:	mov	r2, #5
   14fe4:	movw	r1, #26164	; 0x6634
   14fe8:	movt	r1, #1
   14fec:	mov	r0, #0
   14ff0:	bl	10ccc <dcgettext@plt>
   14ff4:	movw	r2, #26204	; 0x665c
   14ff8:	movt	r2, #1
   14ffc:	mov	r1, r0
   15000:	mov	r0, #1
   15004:	bl	10dc8 <__printf_chk@plt>
   15008:	ldr	r4, [sp]
   1500c:	add	sp, sp, #4
   15010:	pop	{pc}		; (ldr pc, [sp], #4)
   15014:	str	r4, [sp, #-8]!
   15018:	str	lr, [sp, #4]
   1501c:	bl	15560 <__assert_fail@plt+0x46d8>
   15020:	cmp	r0, #0
   15024:	beq	15034 <__assert_fail@plt+0x41ac>
   15028:	ldr	r4, [sp]
   1502c:	add	sp, sp, #4
   15030:	pop	{pc}		; (ldr pc, [sp], #4)
   15034:	bl	154a8 <__assert_fail@plt+0x4620>
   15038:	str	r4, [sp, #-8]!
   1503c:	str	lr, [sp, #4]
   15040:	bl	15560 <__assert_fail@plt+0x46d8>
   15044:	cmp	r0, #0
   15048:	beq	15058 <__assert_fail@plt+0x41d0>
   1504c:	ldr	r4, [sp]
   15050:	add	sp, sp, #4
   15054:	pop	{pc}		; (ldr pc, [sp], #4)
   15058:	bl	154a8 <__assert_fail@plt+0x4620>
   1505c:	str	r4, [sp, #-8]!
   15060:	str	lr, [sp, #4]
   15064:	bl	15014 <__assert_fail@plt+0x418c>
   15068:	ldr	r4, [sp]
   1506c:	add	sp, sp, #4
   15070:	pop	{pc}		; (ldr pc, [sp], #4)
   15074:	strd	r4, [sp, #-16]!
   15078:	str	r6, [sp, #8]
   1507c:	str	lr, [sp, #12]
   15080:	mov	r5, r0
   15084:	mov	r4, r1
   15088:	bl	1559c <__assert_fail@plt+0x4714>
   1508c:	cmp	r0, #0
   15090:	beq	150a4 <__assert_fail@plt+0x421c>
   15094:	ldrd	r4, [sp]
   15098:	ldr	r6, [sp, #8]
   1509c:	add	sp, sp, #12
   150a0:	pop	{pc}		; (ldr pc, [sp], #4)
   150a4:	adds	r4, r4, #0
   150a8:	movne	r4, #1
   150ac:	cmp	r5, #0
   150b0:	moveq	r4, #1
   150b4:	cmp	r4, #0
   150b8:	beq	15094 <__assert_fail@plt+0x420c>
   150bc:	bl	154a8 <__assert_fail@plt+0x4620>
   150c0:	str	r4, [sp, #-8]!
   150c4:	str	lr, [sp, #4]
   150c8:	cmp	r1, #0
   150cc:	orreq	r1, r1, #1
   150d0:	bl	1559c <__assert_fail@plt+0x4714>
   150d4:	cmp	r0, #0
   150d8:	beq	150e8 <__assert_fail@plt+0x4260>
   150dc:	ldr	r4, [sp]
   150e0:	add	sp, sp, #4
   150e4:	pop	{pc}		; (ldr pc, [sp], #4)
   150e8:	bl	154a8 <__assert_fail@plt+0x4620>
   150ec:	strd	r4, [sp, #-16]!
   150f0:	str	r6, [sp, #8]
   150f4:	str	lr, [sp, #12]
   150f8:	mov	r4, r0
   150fc:	mov	r6, r1
   15100:	mov	r5, r2
   15104:	bl	15738 <__assert_fail@plt+0x48b0>
   15108:	cmp	r0, #0
   1510c:	beq	15120 <__assert_fail@plt+0x4298>
   15110:	ldrd	r4, [sp]
   15114:	ldr	r6, [sp, #8]
   15118:	add	sp, sp, #12
   1511c:	pop	{pc}		; (ldr pc, [sp], #4)
   15120:	cmp	r4, #0
   15124:	beq	15134 <__assert_fail@plt+0x42ac>
   15128:	cmp	r6, #0
   1512c:	cmpne	r5, #0
   15130:	beq	15110 <__assert_fail@plt+0x4288>
   15134:	bl	154a8 <__assert_fail@plt+0x4620>
   15138:	str	r4, [sp, #-8]!
   1513c:	str	lr, [sp, #4]
   15140:	bl	150ec <__assert_fail@plt+0x4264>
   15144:	ldr	r4, [sp]
   15148:	add	sp, sp, #4
   1514c:	pop	{pc}		; (ldr pc, [sp], #4)
   15150:	str	r4, [sp, #-8]!
   15154:	str	lr, [sp, #4]
   15158:	mov	ip, r1
   1515c:	mov	r3, r2
   15160:	cmp	r2, #0
   15164:	cmpne	r1, #0
   15168:	moveq	r3, #1
   1516c:	moveq	ip, r3
   15170:	mov	r2, r3
   15174:	mov	r1, ip
   15178:	bl	15738 <__assert_fail@plt+0x48b0>
   1517c:	cmp	r0, #0
   15180:	beq	15190 <__assert_fail@plt+0x4308>
   15184:	ldr	r4, [sp]
   15188:	add	sp, sp, #4
   1518c:	pop	{pc}		; (ldr pc, [sp], #4)
   15190:	bl	154a8 <__assert_fail@plt+0x4620>
   15194:	str	r4, [sp, #-8]!
   15198:	str	lr, [sp, #4]
   1519c:	mov	r2, r1
   151a0:	mov	r1, r0
   151a4:	mov	r0, #0
   151a8:	bl	150ec <__assert_fail@plt+0x4264>
   151ac:	ldr	r4, [sp]
   151b0:	add	sp, sp, #4
   151b4:	pop	{pc}		; (ldr pc, [sp], #4)
   151b8:	str	r4, [sp, #-8]!
   151bc:	str	lr, [sp, #4]
   151c0:	mov	r2, r1
   151c4:	mov	r1, r0
   151c8:	mov	r0, #0
   151cc:	bl	15150 <__assert_fail@plt+0x42c8>
   151d0:	ldr	r4, [sp]
   151d4:	add	sp, sp, #4
   151d8:	pop	{pc}		; (ldr pc, [sp], #4)
   151dc:	strd	r4, [sp, #-16]!
   151e0:	str	r6, [sp, #8]
   151e4:	str	lr, [sp, #12]
   151e8:	mov	r5, r1
   151ec:	ldr	r4, [r1]
   151f0:	cmp	r0, #0
   151f4:	beq	15224 <__assert_fail@plt+0x439c>
   151f8:	lsr	r3, r4, #1
   151fc:	add	r3, r3, #1
   15200:	adds	r4, r4, r3
   15204:	bcs	15240 <__assert_fail@plt+0x43b8>
   15208:	mov	r1, r4
   1520c:	bl	150ec <__assert_fail@plt+0x4264>
   15210:	str	r4, [r5]
   15214:	ldrd	r4, [sp]
   15218:	ldr	r6, [sp, #8]
   1521c:	add	sp, sp, #12
   15220:	pop	{pc}		; (ldr pc, [sp], #4)
   15224:	cmp	r4, #0
   15228:	bne	15208 <__assert_fail@plt+0x4380>
   1522c:	mov	r4, #64	; 0x40
   15230:	udiv	r4, r4, r2
   15234:	cmp	r2, #64	; 0x40
   15238:	addhi	r4, r4, #1
   1523c:	b	15208 <__assert_fail@plt+0x4380>
   15240:	bl	154a8 <__assert_fail@plt+0x4620>
   15244:	str	r4, [sp, #-8]!
   15248:	str	lr, [sp, #4]
   1524c:	mov	r2, #1
   15250:	bl	151dc <__assert_fail@plt+0x4354>
   15254:	ldr	r4, [sp]
   15258:	add	sp, sp, #4
   1525c:	pop	{pc}		; (ldr pc, [sp], #4)
   15260:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15264:	strd	r6, [sp, #8]
   15268:	str	r8, [sp, #16]
   1526c:	str	lr, [sp, #20]
   15270:	mov	r5, r1
   15274:	ldr	lr, [sp, #24]
   15278:	ldr	ip, [r1]
   1527c:	asr	r4, ip, #1
   15280:	adds	r4, ip, r4
   15284:	movvs	r1, #1
   15288:	movvc	r1, #0
   1528c:	cmp	r1, #0
   15290:	mvnne	r4, #-2147483648	; 0x80000000
   15294:	mvn	r8, r3
   15298:	lsr	r8, r8, #31
   1529c:	cmp	r3, r4
   152a0:	movge	r1, #0
   152a4:	andlt	r1, r8, #1
   152a8:	cmp	r1, #0
   152ac:	movne	r4, r3
   152b0:	smull	r6, r7, r4, lr
   152b4:	asr	r1, r6, #31
   152b8:	cmp	r1, r7
   152bc:	bne	152d4 <__assert_fail@plt+0x444c>
   152c0:	mov	r1, r6
   152c4:	cmp	r6, #63	; 0x3f
   152c8:	movle	r1, #64	; 0x40
   152cc:	ble	152d8 <__assert_fail@plt+0x4450>
   152d0:	b	152e4 <__assert_fail@plt+0x445c>
   152d4:	mvn	r1, #-2147483648	; 0x80000000
   152d8:	sdiv	r4, r1, lr
   152dc:	mls	r6, lr, r4, r1
   152e0:	sub	r1, r1, r6
   152e4:	cmp	r0, #0
   152e8:	moveq	r6, #0
   152ec:	streq	r6, [r5]
   152f0:	sub	r6, r4, ip
   152f4:	cmp	r6, r2
   152f8:	bge	15330 <__assert_fail@plt+0x44a8>
   152fc:	adds	r2, ip, r2
   15300:	mov	r4, r2
   15304:	bvs	1534c <__assert_fail@plt+0x44c4>
   15308:	cmp	r2, r3
   1530c:	movle	r3, #0
   15310:	andgt	r3, r8, #1
   15314:	cmp	r3, #0
   15318:	bne	1534c <__assert_fail@plt+0x44c4>
   1531c:	smull	r2, r3, r2, lr
   15320:	asr	ip, r2, #31
   15324:	mov	r1, r2
   15328:	cmp	ip, r3
   1532c:	bne	1534c <__assert_fail@plt+0x44c4>
   15330:	bl	15074 <__assert_fail@plt+0x41ec>
   15334:	str	r4, [r5]
   15338:	ldrd	r4, [sp]
   1533c:	ldrd	r6, [sp, #8]
   15340:	ldr	r8, [sp, #16]
   15344:	add	sp, sp, #20
   15348:	pop	{pc}		; (ldr pc, [sp], #4)
   1534c:	bl	154a8 <__assert_fail@plt+0x4620>
   15350:	str	r4, [sp, #-8]!
   15354:	str	lr, [sp, #4]
   15358:	bl	154ec <__assert_fail@plt+0x4664>
   1535c:	cmp	r0, #0
   15360:	beq	15370 <__assert_fail@plt+0x44e8>
   15364:	ldr	r4, [sp]
   15368:	add	sp, sp, #4
   1536c:	pop	{pc}		; (ldr pc, [sp], #4)
   15370:	bl	154a8 <__assert_fail@plt+0x4620>
   15374:	str	r4, [sp, #-8]!
   15378:	str	lr, [sp, #4]
   1537c:	mov	r1, #1
   15380:	bl	15350 <__assert_fail@plt+0x44c8>
   15384:	ldr	r4, [sp]
   15388:	add	sp, sp, #4
   1538c:	pop	{pc}		; (ldr pc, [sp], #4)
   15390:	str	r4, [sp, #-8]!
   15394:	str	lr, [sp, #4]
   15398:	bl	154ec <__assert_fail@plt+0x4664>
   1539c:	cmp	r0, #0
   153a0:	beq	153b0 <__assert_fail@plt+0x4528>
   153a4:	ldr	r4, [sp]
   153a8:	add	sp, sp, #4
   153ac:	pop	{pc}		; (ldr pc, [sp], #4)
   153b0:	bl	154a8 <__assert_fail@plt+0x4620>
   153b4:	str	r4, [sp, #-8]!
   153b8:	str	lr, [sp, #4]
   153bc:	mov	r1, #1
   153c0:	bl	15390 <__assert_fail@plt+0x4508>
   153c4:	ldr	r4, [sp]
   153c8:	add	sp, sp, #4
   153cc:	pop	{pc}		; (ldr pc, [sp], #4)
   153d0:	strd	r4, [sp, #-16]!
   153d4:	str	r6, [sp, #8]
   153d8:	str	lr, [sp, #12]
   153dc:	mov	r5, r0
   153e0:	mov	r4, r1
   153e4:	mov	r0, r1
   153e8:	bl	15014 <__assert_fail@plt+0x418c>
   153ec:	mov	r2, r4
   153f0:	mov	r1, r5
   153f4:	bl	10c9c <memcpy@plt>
   153f8:	ldrd	r4, [sp]
   153fc:	ldr	r6, [sp, #8]
   15400:	add	sp, sp, #12
   15404:	pop	{pc}		; (ldr pc, [sp], #4)
   15408:	strd	r4, [sp, #-16]!
   1540c:	str	r6, [sp, #8]
   15410:	str	lr, [sp, #12]
   15414:	mov	r5, r0
   15418:	mov	r4, r1
   1541c:	mov	r0, r1
   15420:	bl	15038 <__assert_fail@plt+0x41b0>
   15424:	mov	r2, r4
   15428:	mov	r1, r5
   1542c:	bl	10c9c <memcpy@plt>
   15430:	ldrd	r4, [sp]
   15434:	ldr	r6, [sp, #8]
   15438:	add	sp, sp, #12
   1543c:	pop	{pc}		; (ldr pc, [sp], #4)
   15440:	strd	r4, [sp, #-16]!
   15444:	str	r6, [sp, #8]
   15448:	str	lr, [sp, #12]
   1544c:	mov	r5, r0
   15450:	mov	r4, r1
   15454:	add	r0, r1, #1
   15458:	bl	15038 <__assert_fail@plt+0x41b0>
   1545c:	mov	r2, #0
   15460:	strb	r2, [r0, r4]
   15464:	mov	r2, r4
   15468:	mov	r1, r5
   1546c:	bl	10c9c <memcpy@plt>
   15470:	ldrd	r4, [sp]
   15474:	ldr	r6, [sp, #8]
   15478:	add	sp, sp, #12
   1547c:	pop	{pc}		; (ldr pc, [sp], #4)
   15480:	str	r4, [sp, #-8]!
   15484:	str	lr, [sp, #4]
   15488:	mov	r4, r0
   1548c:	bl	10d98 <strlen@plt>
   15490:	add	r1, r0, #1
   15494:	mov	r0, r4
   15498:	bl	153d0 <__assert_fail@plt+0x4548>
   1549c:	ldr	r4, [sp]
   154a0:	add	sp, sp, #4
   154a4:	pop	{pc}		; (ldr pc, [sp], #4)
   154a8:	str	r4, [sp, #-8]!
   154ac:	str	lr, [sp, #4]
   154b0:	movw	r3, #28908	; 0x70ec
   154b4:	movt	r3, #2
   154b8:	ldr	r4, [r3]
   154bc:	mov	r2, #5
   154c0:	movw	r1, #26284	; 0x66ac
   154c4:	movt	r1, #1
   154c8:	mov	r0, #0
   154cc:	bl	10ccc <dcgettext@plt>
   154d0:	mov	r3, r0
   154d4:	movw	r2, #24604	; 0x601c
   154d8:	movt	r2, #1
   154dc:	mov	r1, #0
   154e0:	mov	r0, r4
   154e4:	bl	10d38 <error@plt>
   154e8:	bl	10e70 <abort@plt>
   154ec:	strd	r4, [sp, #-16]!
   154f0:	str	r6, [sp, #8]
   154f4:	str	lr, [sp, #12]
   154f8:	cmp	r1, #0
   154fc:	cmpne	r0, #0
   15500:	beq	1553c <__assert_fail@plt+0x46b4>
   15504:	mov	r2, r0
   15508:	mov	r3, r1
   1550c:	umull	r4, r5, r0, r1
   15510:	adds	r1, r5, #0
   15514:	movne	r1, #1
   15518:	cmp	r4, #0
   1551c:	movlt	r1, #1
   15520:	cmp	r1, #0
   15524:	beq	15544 <__assert_fail@plt+0x46bc>
   15528:	bl	10da4 <__errno_location@plt>
   1552c:	mov	r3, #12
   15530:	str	r3, [r0]
   15534:	mov	r0, #0
   15538:	b	15550 <__assert_fail@plt+0x46c8>
   1553c:	mov	r3, #1
   15540:	mov	r2, r3
   15544:	mov	r1, r3
   15548:	mov	r0, r2
   1554c:	bl	10c3c <calloc@plt>
   15550:	ldrd	r4, [sp]
   15554:	ldr	r6, [sp, #8]
   15558:	add	sp, sp, #12
   1555c:	pop	{pc}		; (ldr pc, [sp], #4)
   15560:	str	r4, [sp, #-8]!
   15564:	str	lr, [sp, #4]
   15568:	cmp	r0, #0
   1556c:	beq	15588 <__assert_fail@plt+0x4700>
   15570:	bge	1558c <__assert_fail@plt+0x4704>
   15574:	bl	10da4 <__errno_location@plt>
   15578:	mov	r3, #12
   1557c:	str	r3, [r0]
   15580:	mov	r0, #0
   15584:	b	15590 <__assert_fail@plt+0x4708>
   15588:	mov	r0, #1
   1558c:	bl	10d44 <malloc@plt>
   15590:	ldr	r4, [sp]
   15594:	add	sp, sp, #4
   15598:	pop	{pc}		; (ldr pc, [sp], #4)
   1559c:	str	r4, [sp, #-8]!
   155a0:	str	lr, [sp, #4]
   155a4:	cmp	r0, #0
   155a8:	beq	155cc <__assert_fail@plt+0x4744>
   155ac:	cmp	r1, #0
   155b0:	beq	155d8 <__assert_fail@plt+0x4750>
   155b4:	cmp	r1, #0
   155b8:	blt	155e4 <__assert_fail@plt+0x475c>
   155bc:	bl	10cd8 <realloc@plt>
   155c0:	ldr	r4, [sp]
   155c4:	add	sp, sp, #4
   155c8:	pop	{pc}		; (ldr pc, [sp], #4)
   155cc:	mov	r0, r1
   155d0:	bl	15560 <__assert_fail@plt+0x46d8>
   155d4:	b	155c0 <__assert_fail@plt+0x4738>
   155d8:	bl	12624 <__assert_fail@plt+0x179c>
   155dc:	mov	r0, #0
   155e0:	b	155c0 <__assert_fail@plt+0x4738>
   155e4:	bl	10da4 <__errno_location@plt>
   155e8:	mov	r3, #12
   155ec:	str	r3, [r0]
   155f0:	mov	r0, #0
   155f4:	b	155c0 <__assert_fail@plt+0x4738>
   155f8:	strd	r4, [sp, #-16]!
   155fc:	str	r6, [sp, #8]
   15600:	str	lr, [sp, #12]
   15604:	mov	r5, r0
   15608:	bl	10d20 <__fpending@plt>
   1560c:	mov	r6, r0
   15610:	ldr	r4, [r5]
   15614:	and	r4, r4, #32
   15618:	mov	r0, r5
   1561c:	bl	124f8 <__assert_fail@plt+0x1670>
   15620:	cmp	r4, #0
   15624:	bne	15658 <__assert_fail@plt+0x47d0>
   15628:	cmp	r0, #0
   1562c:	beq	15648 <__assert_fail@plt+0x47c0>
   15630:	cmp	r6, #0
   15634:	bne	15674 <__assert_fail@plt+0x47ec>
   15638:	bl	10da4 <__errno_location@plt>
   1563c:	ldr	r0, [r0]
   15640:	subs	r0, r0, #9
   15644:	mvnne	r0, #0
   15648:	ldrd	r4, [sp]
   1564c:	ldr	r6, [sp, #8]
   15650:	add	sp, sp, #12
   15654:	pop	{pc}		; (ldr pc, [sp], #4)
   15658:	cmp	r0, #0
   1565c:	bne	1567c <__assert_fail@plt+0x47f4>
   15660:	bl	10da4 <__errno_location@plt>
   15664:	mov	r3, #0
   15668:	str	r3, [r0]
   1566c:	mvn	r0, #0
   15670:	b	15648 <__assert_fail@plt+0x47c0>
   15674:	mvn	r0, #0
   15678:	b	15648 <__assert_fail@plt+0x47c0>
   1567c:	mvn	r0, #0
   15680:	b	15648 <__assert_fail@plt+0x47c0>
   15684:	str	r4, [sp, #-8]!
   15688:	str	lr, [sp, #4]
   1568c:	mov	r0, #14
   15690:	bl	10e34 <nl_langinfo@plt>
   15694:	cmp	r0, #0
   15698:	beq	156bc <__assert_fail@plt+0x4834>
   1569c:	ldrb	r2, [r0]
   156a0:	movw	r3, #26304	; 0x66c0
   156a4:	movt	r3, #1
   156a8:	cmp	r2, #0
   156ac:	moveq	r0, r3
   156b0:	ldr	r4, [sp]
   156b4:	add	sp, sp, #4
   156b8:	pop	{pc}		; (ldr pc, [sp], #4)
   156bc:	movw	r0, #26304	; 0x66c0
   156c0:	movt	r0, #1
   156c4:	b	156b0 <__assert_fail@plt+0x4828>
   156c8:	strd	r4, [sp, #-20]!	; 0xffffffec
   156cc:	strd	r6, [sp, #8]
   156d0:	str	lr, [sp, #16]
   156d4:	sub	sp, sp, #12
   156d8:	mov	r7, r1
   156dc:	mov	r5, r2
   156e0:	subs	r6, r0, #0
   156e4:	addeq	r6, sp, #4
   156e8:	mov	r0, r6
   156ec:	bl	10d2c <mbrtowc@plt>
   156f0:	mov	r4, r0
   156f4:	cmp	r5, #0
   156f8:	cmnne	r0, #3
   156fc:	bhi	15718 <__assert_fail@plt+0x4890>
   15700:	mov	r0, r4
   15704:	add	sp, sp, #12
   15708:	ldrd	r4, [sp]
   1570c:	ldrd	r6, [sp, #8]
   15710:	add	sp, sp, #16
   15714:	pop	{pc}		; (ldr pc, [sp], #4)
   15718:	mov	r0, #0
   1571c:	bl	15774 <__assert_fail@plt+0x48ec>
   15720:	cmp	r0, #0
   15724:	bne	15700 <__assert_fail@plt+0x4878>
   15728:	ldrb	r3, [r7]
   1572c:	str	r3, [r6]
   15730:	mov	r4, #1
   15734:	b	15700 <__assert_fail@plt+0x4878>
   15738:	str	r4, [sp, #-8]!
   1573c:	str	lr, [sp, #4]
   15740:	umull	r2, r3, r1, r2
   15744:	cmp	r3, #0
   15748:	bne	15760 <__assert_fail@plt+0x48d8>
   1574c:	mov	r1, r2
   15750:	bl	1559c <__assert_fail@plt+0x4714>
   15754:	ldr	r4, [sp]
   15758:	add	sp, sp, #4
   1575c:	pop	{pc}		; (ldr pc, [sp], #4)
   15760:	bl	10da4 <__errno_location@plt>
   15764:	mov	r3, #12
   15768:	str	r3, [r0]
   1576c:	mov	r0, #0
   15770:	b	15754 <__assert_fail@plt+0x48cc>
   15774:	push	{lr}		; (str lr, [sp, #-4]!)
   15778:	sub	sp, sp, #268	; 0x10c
   1577c:	movw	r2, #257	; 0x101
   15780:	add	r1, sp, #4
   15784:	bl	157d0 <__assert_fail@plt+0x4948>
   15788:	cmp	r0, #0
   1578c:	movne	r0, #0
   15790:	bne	157c8 <__assert_fail@plt+0x4940>
   15794:	movw	r1, #26312	; 0x66c8
   15798:	movt	r1, #1
   1579c:	add	r0, sp, #4
   157a0:	bl	10c60 <strcmp@plt>
   157a4:	cmp	r0, #0
   157a8:	beq	157c4 <__assert_fail@plt+0x493c>
   157ac:	movw	r1, #26316	; 0x66cc
   157b0:	movt	r1, #1
   157b4:	add	r0, sp, #4
   157b8:	bl	10c60 <strcmp@plt>
   157bc:	adds	r0, r0, #0
   157c0:	movne	r0, #1
   157c4:	and	r0, r0, #1
   157c8:	add	sp, sp, #268	; 0x10c
   157cc:	pop	{pc}		; (ldr pc, [sp], #4)
   157d0:	strd	r4, [sp, #-16]!
   157d4:	str	r6, [sp, #8]
   157d8:	str	lr, [sp, #12]
   157dc:	mov	r6, r1
   157e0:	mov	r4, r2
   157e4:	mov	r1, #0
   157e8:	bl	10e1c <setlocale@plt>
   157ec:	subs	r5, r0, #0
   157f0:	beq	15834 <__assert_fail@plt+0x49ac>
   157f4:	mov	r0, r5
   157f8:	bl	10d98 <strlen@plt>
   157fc:	cmp	r4, r0
   15800:	bhi	15850 <__assert_fail@plt+0x49c8>
   15804:	cmp	r4, #0
   15808:	moveq	r0, #34	; 0x22
   1580c:	beq	15864 <__assert_fail@plt+0x49dc>
   15810:	sub	r4, r4, #1
   15814:	mov	r2, r4
   15818:	mov	r1, r5
   1581c:	mov	r0, r6
   15820:	bl	10c9c <memcpy@plt>
   15824:	mov	r3, #0
   15828:	strb	r3, [r6, r4]
   1582c:	mov	r0, #34	; 0x22
   15830:	b	15864 <__assert_fail@plt+0x49dc>
   15834:	cmp	r4, #0
   15838:	moveq	r0, #22
   1583c:	beq	15864 <__assert_fail@plt+0x49dc>
   15840:	mov	r3, #0
   15844:	strb	r3, [r6]
   15848:	mov	r0, #22
   1584c:	b	15864 <__assert_fail@plt+0x49dc>
   15850:	add	r2, r0, #1
   15854:	mov	r1, r5
   15858:	mov	r0, r6
   1585c:	bl	10c9c <memcpy@plt>
   15860:	mov	r0, #0
   15864:	ldrd	r4, [sp]
   15868:	ldr	r6, [sp, #8]
   1586c:	add	sp, sp, #12
   15870:	pop	{pc}		; (ldr pc, [sp], #4)
   15874:	str	r4, [sp, #-8]!
   15878:	str	lr, [sp, #4]
   1587c:	mov	r1, #0
   15880:	bl	10e1c <setlocale@plt>
   15884:	ldr	r4, [sp]
   15888:	add	sp, sp, #4
   1588c:	pop	{pc}		; (ldr pc, [sp], #4)
   15890:	cmp	r3, #0
   15894:	cmpeq	r2, #0
   15898:	bne	158b0 <__assert_fail@plt+0x4a28>
   1589c:	cmp	r1, #0
   158a0:	cmpeq	r0, #0
   158a4:	mvnne	r1, #0
   158a8:	mvnne	r0, #0
   158ac:	b	158cc <__assert_fail@plt+0x4a44>
   158b0:	sub	sp, sp, #8
   158b4:	push	{sp, lr}
   158b8:	bl	158dc <__assert_fail@plt+0x4a54>
   158bc:	ldr	lr, [sp, #4]
   158c0:	add	sp, sp, #8
   158c4:	pop	{r2, r3}
   158c8:	bx	lr
   158cc:	push	{r1, lr}
   158d0:	mov	r0, #8
   158d4:	bl	10c54 <raise@plt>
   158d8:	pop	{r1, pc}
   158dc:	cmp	r1, r3
   158e0:	cmpeq	r0, r2
   158e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158e8:	mov	r4, r0
   158ec:	movcc	r0, #0
   158f0:	mov	r5, r1
   158f4:	ldr	lr, [sp, #36]	; 0x24
   158f8:	movcc	r1, r0
   158fc:	bcc	159f8 <__assert_fail@plt+0x4b70>
   15900:	cmp	r3, #0
   15904:	clzeq	ip, r2
   15908:	clzne	ip, r3
   1590c:	addeq	ip, ip, #32
   15910:	cmp	r5, #0
   15914:	clzeq	r1, r4
   15918:	addeq	r1, r1, #32
   1591c:	clzne	r1, r5
   15920:	sub	ip, ip, r1
   15924:	sub	sl, ip, #32
   15928:	lsl	r9, r3, ip
   1592c:	rsb	fp, ip, #32
   15930:	orr	r9, r9, r2, lsl sl
   15934:	orr	r9, r9, r2, lsr fp
   15938:	lsl	r8, r2, ip
   1593c:	cmp	r5, r9
   15940:	cmpeq	r4, r8
   15944:	movcc	r0, #0
   15948:	movcc	r1, r0
   1594c:	bcc	15968 <__assert_fail@plt+0x4ae0>
   15950:	mov	r0, #1
   15954:	subs	r4, r4, r8
   15958:	lsl	r1, r0, sl
   1595c:	orr	r1, r1, r0, lsr fp
   15960:	lsl	r0, r0, ip
   15964:	sbc	r5, r5, r9
   15968:	cmp	ip, #0
   1596c:	beq	159f8 <__assert_fail@plt+0x4b70>
   15970:	lsr	r6, r8, #1
   15974:	orr	r6, r6, r9, lsl #31
   15978:	lsr	r7, r9, #1
   1597c:	mov	r2, ip
   15980:	b	159a4 <__assert_fail@plt+0x4b1c>
   15984:	subs	r3, r4, r6
   15988:	sbc	r8, r5, r7
   1598c:	adds	r3, r3, r3
   15990:	adc	r8, r8, r8
   15994:	adds	r4, r3, #1
   15998:	adc	r5, r8, #0
   1599c:	subs	r2, r2, #1
   159a0:	beq	159c0 <__assert_fail@plt+0x4b38>
   159a4:	cmp	r5, r7
   159a8:	cmpeq	r4, r6
   159ac:	bcs	15984 <__assert_fail@plt+0x4afc>
   159b0:	adds	r4, r4, r4
   159b4:	adc	r5, r5, r5
   159b8:	subs	r2, r2, #1
   159bc:	bne	159a4 <__assert_fail@plt+0x4b1c>
   159c0:	lsr	r3, r4, ip
   159c4:	orr	r3, r3, r5, lsl fp
   159c8:	lsr	r2, r5, ip
   159cc:	orr	r3, r3, r5, lsr sl
   159d0:	adds	r0, r0, r4
   159d4:	mov	r4, r3
   159d8:	lsl	r3, r2, ip
   159dc:	orr	r3, r3, r4, lsl sl
   159e0:	lsl	ip, r4, ip
   159e4:	orr	r3, r3, r4, lsr fp
   159e8:	adc	r1, r1, r5
   159ec:	subs	r0, r0, ip
   159f0:	mov	r5, r2
   159f4:	sbc	r1, r1, r3
   159f8:	cmp	lr, #0
   159fc:	strdne	r4, [lr]
   15a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a08:	mov	r7, r0
   15a0c:	ldr	r6, [pc, #72]	; 15a5c <__assert_fail@plt+0x4bd4>
   15a10:	ldr	r5, [pc, #72]	; 15a60 <__assert_fail@plt+0x4bd8>
   15a14:	add	r6, pc, r6
   15a18:	add	r5, pc, r5
   15a1c:	sub	r6, r6, r5
   15a20:	mov	r8, r1
   15a24:	mov	r9, r2
   15a28:	bl	10c1c <calloc@plt-0x20>
   15a2c:	asrs	r6, r6, #2
   15a30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a34:	mov	r4, #0
   15a38:	add	r4, r4, #1
   15a3c:	ldr	r3, [r5], #4
   15a40:	mov	r2, r9
   15a44:	mov	r1, r8
   15a48:	mov	r0, r7
   15a4c:	blx	r3
   15a50:	cmp	r6, r4
   15a54:	bne	15a38 <__assert_fail@plt+0x4bb0>
   15a58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a5c:	strdeq	r1, [r1], -r8
   15a60:	strdeq	r1, [r1], -r0
   15a64:	bx	lr
   15a68:	ldr	r3, [pc, #12]	; 15a7c <__assert_fail@plt+0x4bf4>
   15a6c:	mov	r1, #0
   15a70:	add	r3, pc, r3
   15a74:	ldr	r2, [r3]
   15a78:	b	10db0 <__cxa_atexit@plt>
   15a7c:	andeq	r1, r1, r4, ror #12

Disassembly of section .fini:

00015a80 <.fini>:
   15a80:	push	{r3, lr}
   15a84:	pop	{r3, pc}
