
../repos/prog2/0.2:     file format elf32-littlearm


Disassembly of section .init:

000105c4 <.init>:
   105c4:	push	{r3, lr}
   105c8:	bl	107a4 <_start@@Base+0x3c>
   105cc:	pop	{r3, pc}

Disassembly of section .plt:

000105d0 <printf@plt-0x14>:
   105d0:	push	{lr}		; (str lr, [sp, #-4]!)
   105d4:	ldr	lr, [pc, #4]	; 105e0 <printf@plt-0x4>
   105d8:	add	lr, pc, lr
   105dc:	ldr	pc, [lr, #8]!
   105e0:	andeq	r0, r1, r0, lsr #20

000105e4 <printf@plt>:
   105e4:	add	ip, pc, #0, 12
   105e8:	add	ip, ip, #16, 20	; 0x10000
   105ec:	ldr	pc, [ip, #2592]!	; 0xa20

000105f0 <puts@plt>:
   105f0:	add	ip, pc, #0, 12
   105f4:	add	ip, ip, #16, 20	; 0x10000
   105f8:	ldr	pc, [ip, #2584]!	; 0xa18

000105fc <__libc_start_main@plt>:
   105fc:	add	ip, pc, #0, 12
   10600:	add	ip, ip, #16, 20	; 0x10000
   10604:	ldr	pc, [ip, #2576]!	; 0xa10

00010608 <__gmon_start__@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2568]!	; 0xa08

00010614 <memset@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2560]!	; 0xa00

00010620 <putchar@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2552]!	; 0x9f8

0001062c <__isoc99_scanf@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2544]!	; 0x9f0

00010638 <abort@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2536]!	; 0x9e8

Disassembly of section .text:

00010644 <main@@Base>:
   10644:	push	{r4, r5, r6, r7, r8, lr}
   10648:	sub	sp, sp, #40	; 0x28
   1064c:	mov	r2, #20
   10650:	mov	r1, #0
   10654:	mov	r0, sp
   10658:	mov	r5, sp
   1065c:	mov	r4, #0
   10660:	ldr	r8, [pc, #232]	; 10750 <main@@Base+0x10c>
   10664:	mov	r6, r5
   10668:	bl	10614 <memset@plt>
   1066c:	ldr	r7, [pc, #224]	; 10754 <main@@Base+0x110>
   10670:	mov	r2, #20
   10674:	mov	r1, #0
   10678:	add	r0, sp, r2
   1067c:	bl	10614 <memset@plt>
   10680:	ldr	r0, [pc, #208]	; 10758 <main@@Base+0x114>
   10684:	bl	105f0 <puts@plt>
   10688:	add	r4, r4, #1
   1068c:	mov	r0, r8
   10690:	mov	r1, r4
   10694:	bl	105e4 <printf@plt>
   10698:	mov	r1, r6
   1069c:	mov	r0, r7
   106a0:	bl	1062c <__isoc99_scanf@plt>
   106a4:	cmp	r4, #5
   106a8:	add	r6, r6, #4
   106ac:	bne	10688 <main@@Base+0x44>
   106b0:	ldr	r8, [pc, #152]	; 10750 <main@@Base+0x10c>
   106b4:	add	r6, sp, #20
   106b8:	mov	r4, #0
   106bc:	ldr	r7, [pc, #144]	; 10754 <main@@Base+0x110>
   106c0:	ldr	r0, [pc, #148]	; 1075c <main@@Base+0x118>
   106c4:	bl	105f0 <puts@plt>
   106c8:	add	r4, r4, #1
   106cc:	mov	r0, r8
   106d0:	mov	r1, r4
   106d4:	bl	105e4 <printf@plt>
   106d8:	mov	r1, r6
   106dc:	mov	r0, r7
   106e0:	bl	1062c <__isoc99_scanf@plt>
   106e4:	cmp	r4, #5
   106e8:	add	r6, r6, #4
   106ec:	bne	106c8 <main@@Base+0x84>
   106f0:	ldr	r8, [pc, #104]	; 10760 <main@@Base+0x11c>
   106f4:	mov	r0, #10
   106f8:	bl	10620 <putchar@plt>
   106fc:	ldr	r0, [pc, #96]	; 10764 <main@@Base+0x120>
   10700:	bl	105e4 <printf@plt>
   10704:	add	r7, sp, #20
   10708:	mov	r6, #0
   1070c:	ldr	r3, [r7], #4
   10710:	ldr	r1, [r5]
   10714:	cmp	r1, r3
   10718:	bne	10724 <main@@Base+0xe0>
   1071c:	mov	r0, r8
   10720:	bl	105e4 <printf@plt>
   10724:	add	r6, r6, #1
   10728:	cmp	r6, #5
   1072c:	bne	1070c <main@@Base+0xc8>
   10730:	subs	r4, r4, #1
   10734:	add	r5, r5, #4
   10738:	bne	10704 <main@@Base+0xc0>
   1073c:	mov	r0, #10
   10740:	bl	10620 <putchar@plt>
   10744:	mov	r0, r4
   10748:	add	sp, sp, #40	; 0x28
   1074c:	pop	{r4, r5, r6, r7, r8, pc}
   10750:	ldrdeq	r0, [r1], -r1
   10754:	strdeq	r0, [r1], -r9
   10758:	andeq	r0, r1, r8, asr #17
   1075c:	andeq	r0, r1, r7, ror #17
   10760:	strdeq	r0, [r1], -r8
   10764:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>

00010768 <_start@@Base>:
   10768:	mov	fp, #0
   1076c:	mov	lr, #0
   10770:	pop	{r1}		; (ldr r1, [sp], #4)
   10774:	mov	r2, sp
   10778:	push	{r2}		; (str r2, [sp, #-4]!)
   1077c:	push	{r0}		; (str r0, [sp, #-4]!)
   10780:	ldr	ip, [pc, #16]	; 10798 <_start@@Base+0x30>
   10784:	push	{ip}		; (str ip, [sp, #-4]!)
   10788:	ldr	r0, [pc, #12]	; 1079c <_start@@Base+0x34>
   1078c:	ldr	r3, [pc, #12]	; 107a0 <_start@@Base+0x38>
   10790:	bl	105fc <__libc_start_main@plt>
   10794:	bl	10638 <abort@plt>
   10798:			; <UNDEFINED> instruction: 0x000108b8
   1079c:	andeq	r0, r1, r4, asr #12
   107a0:	andeq	r0, r1, r8, asr r8
   107a4:	ldr	r3, [pc, #20]	; 107c0 <_start@@Base+0x58>
   107a8:	ldr	r2, [pc, #20]	; 107c4 <_start@@Base+0x5c>
   107ac:	add	r3, pc, r3
   107b0:	ldr	r2, [r3, r2]
   107b4:	cmp	r2, #0
   107b8:	bxeq	lr
   107bc:	b	10608 <__gmon_start__@plt>
   107c0:	andeq	r0, r1, ip, asr #16
   107c4:	andeq	r0, r0, ip, lsr #32
   107c8:	ldr	r0, [pc, #24]	; 107e8 <_start@@Base+0x80>
   107cc:	ldr	r3, [pc, #24]	; 107ec <_start@@Base+0x84>
   107d0:	cmp	r3, r0
   107d4:	bxeq	lr
   107d8:	ldr	r3, [pc, #16]	; 107f0 <_start@@Base+0x88>
   107dc:	cmp	r3, #0
   107e0:	bxeq	lr
   107e4:	bx	r3
   107e8:	andeq	r1, r2, r8, lsr r0
   107ec:	andeq	r1, r2, r8, lsr r0
   107f0:	andeq	r0, r0, r0
   107f4:	ldr	r0, [pc, #36]	; 10820 <_start@@Base+0xb8>
   107f8:	ldr	r1, [pc, #36]	; 10824 <_start@@Base+0xbc>
   107fc:	sub	r1, r1, r0
   10800:	asr	r1, r1, #2
   10804:	add	r1, r1, r1, lsr #31
   10808:	asrs	r1, r1, #1
   1080c:	bxeq	lr
   10810:	ldr	r3, [pc, #16]	; 10828 <_start@@Base+0xc0>
   10814:	cmp	r3, #0
   10818:	bxeq	lr
   1081c:	bx	r3
   10820:	andeq	r1, r2, r8, lsr r0
   10824:	andeq	r1, r2, r8, lsr r0
   10828:	andeq	r0, r0, r0
   1082c:	push	{r4, lr}
   10830:	ldr	r4, [pc, #24]	; 10850 <_start@@Base+0xe8>
   10834:	ldrb	r3, [r4]
   10838:	cmp	r3, #0
   1083c:	popne	{r4, pc}
   10840:	bl	107c8 <_start@@Base+0x60>
   10844:	mov	r3, #1
   10848:	strb	r3, [r4]
   1084c:	pop	{r4, pc}
   10850:	andeq	r1, r2, r8, lsr r0
   10854:	b	107f4 <_start@@Base+0x8c>

00010858 <__libc_csu_init@@Base>:
   10858:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1085c:	mov	r7, r0
   10860:	ldr	r6, [pc, #72]	; 108b0 <__libc_csu_init@@Base+0x58>
   10864:	ldr	r5, [pc, #72]	; 108b4 <__libc_csu_init@@Base+0x5c>
   10868:	add	r6, pc, r6
   1086c:	add	r5, pc, r5
   10870:	sub	r6, r6, r5
   10874:	mov	r8, r1
   10878:	mov	r9, r2
   1087c:	bl	105c4 <printf@plt-0x20>
   10880:	asrs	r6, r6, #2
   10884:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10888:	mov	r4, #0
   1088c:	add	r4, r4, #1
   10890:	ldr	r3, [r5], #4
   10894:	mov	r2, r9
   10898:	mov	r1, r8
   1089c:	mov	r0, r7
   108a0:	blx	r3
   108a4:	cmp	r6, r4
   108a8:	bne	1088c <__libc_csu_init@@Base+0x34>
   108ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b0:	andeq	r0, r1, r4, lsr #13
   108b4:	muleq	r1, ip, r6

000108b8 <__libc_csu_fini@@Base>:
   108b8:	bx	lr

Disassembly of section .fini:

000108bc <.fini>:
   108bc:	push	{r3, lr}
   108c0:	pop	{r3, pc}
