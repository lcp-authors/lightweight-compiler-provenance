
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11194 <__assert_fail@plt+0x48>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <calloc@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <calloc@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	r7, r1, ip, asr #2

00010eb8 <calloc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <fputs_unlocked@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <strcmp@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <posix_fadvise64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <fflush@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <memmove@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <free@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <ferror@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <fwrite_unlocked@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <iswprint@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <fwrite@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <lseek64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <__ctype_get_mb_cur_max@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <fread@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__fpending@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <mbrtowc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <error@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <malloc@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <__libc_start_main@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <__freading@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__gmon_start__@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <getopt_long@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__ctype_b_loc@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <exit@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <strlen@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <ungetc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <__errno_location@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <__cxa_atexit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <memset@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <fgetc@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__printf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <fileno@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #28]!

0001108c <__fprintf_chk@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #20]!

00011098 <memchr@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fclose@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <fseeko64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <__uflow@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <__overflow@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <setlocale@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <strrchr@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <nl_langinfo@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <clearerr_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <fopen64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <qsort@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <bindtextdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <strncmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <abort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <strspn@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <__assert_fail@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

Disassembly of section .text:

00011158 <.text>:
   11158:	mov	fp, #0
   1115c:	mov	lr, #0
   11160:	pop	{r1}		; (ldr r1, [sp], #4)
   11164:	mov	r2, sp
   11168:	push	{r2}		; (str r2, [sp, #-4]!)
   1116c:	push	{r0}		; (str r0, [sp, #-4]!)
   11170:	ldr	ip, [pc, #16]	; 11188 <__assert_fail@plt+0x3c>
   11174:	push	{ip}		; (str ip, [sp, #-4]!)
   11178:	ldr	r0, [pc, #12]	; 1118c <__assert_fail@plt+0x40>
   1117c:	ldr	r3, [pc, #12]	; 11190 <__assert_fail@plt+0x44>
   11180:	bl	10fe4 <__libc_start_main@plt>
   11184:	bl	11134 <abort@plt>
   11188:	andeq	r6, r1, ip, lsr #10
   1118c:	andeq	r1, r1, r8, lsl #11
   11190:	andeq	r6, r1, ip, asr #9
   11194:	ldr	r3, [pc, #20]	; 111b0 <__assert_fail@plt+0x64>
   11198:	ldr	r2, [pc, #20]	; 111b4 <__assert_fail@plt+0x68>
   1119c:	add	r3, pc, r3
   111a0:	ldr	r2, [r3, r2]
   111a4:	cmp	r2, #0
   111a8:	bxeq	lr
   111ac:	b	10ffc <__gmon_start__@plt>
   111b0:	andeq	r6, r1, ip, asr lr
   111b4:	andeq	r0, r0, ip, ror #1
   111b8:	ldr	r0, [pc, #24]	; 111d8 <__assert_fail@plt+0x8c>
   111bc:	ldr	r3, [pc, #24]	; 111dc <__assert_fail@plt+0x90>
   111c0:	cmp	r3, r0
   111c4:	bxeq	lr
   111c8:	ldr	r3, [pc, #16]	; 111e0 <__assert_fail@plt+0x94>
   111cc:	cmp	r3, #0
   111d0:	bxeq	lr
   111d4:	bx	r3
   111d8:	andeq	r8, r2, r0, asr #2
   111dc:	andeq	r8, r2, r0, asr #2
   111e0:	andeq	r0, r0, r0
   111e4:	ldr	r0, [pc, #36]	; 11210 <__assert_fail@plt+0xc4>
   111e8:	ldr	r1, [pc, #36]	; 11214 <__assert_fail@plt+0xc8>
   111ec:	sub	r1, r1, r0
   111f0:	asr	r1, r1, #2
   111f4:	add	r1, r1, r1, lsr #31
   111f8:	asrs	r1, r1, #1
   111fc:	bxeq	lr
   11200:	ldr	r3, [pc, #16]	; 11218 <__assert_fail@plt+0xcc>
   11204:	cmp	r3, #0
   11208:	bxeq	lr
   1120c:	bx	r3
   11210:	andeq	r8, r2, r0, asr #2
   11214:	andeq	r8, r2, r0, asr #2
   11218:	andeq	r0, r0, r0
   1121c:	push	{r4, lr}
   11220:	ldr	r4, [pc, #24]	; 11240 <__assert_fail@plt+0xf4>
   11224:	ldrb	r3, [r4]
   11228:	cmp	r3, #0
   1122c:	popne	{r4, pc}
   11230:	bl	111b8 <__assert_fail@plt+0x6c>
   11234:	mov	r3, #1
   11238:	strb	r3, [r4]
   1123c:	pop	{r4, pc}
   11240:	andeq	r8, r2, r4, ror #2
   11244:	b	111e4 <__assert_fail@plt+0x98>
   11248:	push	{fp, lr}
   1124c:	mov	fp, sp
   11250:	sub	sp, sp, #56	; 0x38
   11254:	mov	r4, r0
   11258:	cmp	r0, #0
   1125c:	bne	11544 <__assert_fail@plt+0x3f8>
   11260:	movw	r1, #25979	; 0x657b
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f54 <dcgettext@plt>
   11274:	mov	r1, r0
   11278:	movw	r0, #33172	; 0x8194
   1127c:	movt	r0, #2
   11280:	ldr	r2, [r0]
   11284:	mov	r0, #1
   11288:	bl	11074 <__printf_chk@plt>
   1128c:	movw	r1, #26010	; 0x659a
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10f54 <dcgettext@plt>
   112a0:	movw	r7, #33116	; 0x815c
   112a4:	movt	r7, #2
   112a8:	ldr	r1, [r7]
   112ac:	bl	10ec4 <fputs_unlocked@plt>
   112b0:	movw	r1, #27810	; 0x6ca2
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10f54 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10ec4 <fputs_unlocked@plt>
   112cc:	movw	r1, #27866	; 0x6cda
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10f54 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10ec4 <fputs_unlocked@plt>
   112e8:	movw	r1, #26076	; 0x65dc
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10f54 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10ec4 <fputs_unlocked@plt>
   11304:	movw	r1, #26253	; 0x668d
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10f54 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10ec4 <fputs_unlocked@plt>
   11320:	movw	r1, #26491	; 0x677b
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10f54 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10ec4 <fputs_unlocked@plt>
   1133c:	movw	r1, #26605	; 0x67ed
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10f54 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10ec4 <fputs_unlocked@plt>
   11358:	movw	r1, #26815	; 0x68bf
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10f54 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10ec4 <fputs_unlocked@plt>
   11374:	movw	r1, #26878	; 0x68fe
   11378:	mov	r0, #0
   1137c:	mov	r2, #5
   11380:	movt	r1, #1
   11384:	bl	10f54 <dcgettext@plt>
   11388:	ldr	r1, [r7]
   1138c:	bl	10ec4 <fputs_unlocked@plt>
   11390:	movw	r1, #26923	; 0x692b
   11394:	mov	r0, #0
   11398:	mov	r2, #5
   1139c:	movt	r1, #1
   113a0:	bl	10f54 <dcgettext@plt>
   113a4:	ldr	r1, [r7]
   113a8:	bl	10ec4 <fputs_unlocked@plt>
   113ac:	movw	r1, #26977	; 0x6961
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	movt	r1, #1
   113bc:	bl	10f54 <dcgettext@plt>
   113c0:	ldr	r1, [r7]
   113c4:	bl	10ec4 <fputs_unlocked@plt>
   113c8:	movw	r1, #27181	; 0x6a2d
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	10f54 <dcgettext@plt>
   113dc:	ldr	r1, [r7]
   113e0:	bl	10ec4 <fputs_unlocked@plt>
   113e4:	movw	r0, #28568	; 0x6f98
   113e8:	mov	r2, #48	; 0x30
   113ec:	mov	r6, sp
   113f0:	movw	r5, #27443	; 0x6b33
   113f4:	movt	r0, #1
   113f8:	movt	r5, #1
   113fc:	add	r1, r0, #32
   11400:	add	r3, r0, #16
   11404:	vld1.64	{d18-d19}, [r0], r2
   11408:	vld1.64	{d16-d17}, [r1]
   1140c:	vld1.64	{d20-d21}, [r3]
   11410:	add	r1, r6, #32
   11414:	vldr	d22, [r0]
   11418:	add	r0, r6, #16
   1141c:	vst1.64	{d16-d17}, [r1]
   11420:	movw	r1, #27941	; 0x6d25
   11424:	vst1.64	{d20-d21}, [r0]
   11428:	mov	r0, r6
   1142c:	vst1.64	{d18-d19}, [r0], r2
   11430:	movt	r1, #1
   11434:	vstr	d22, [r0]
   11438:	mov	r0, r5
   1143c:	bl	10ed0 <strcmp@plt>
   11440:	cmp	r0, #0
   11444:	ldrne	r1, [r6, #8]!
   11448:	cmpne	r1, #0
   1144c:	bne	11438 <__assert_fail@plt+0x2ec>
   11450:	ldr	r6, [r6, #4]
   11454:	movw	r1, #28036	; 0x6d84
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	movt	r1, #1
   11464:	bl	10f54 <dcgettext@plt>
   11468:	movw	r2, #27555	; 0x6ba3
   1146c:	movw	r3, #28059	; 0x6d9b
   11470:	mov	r1, r0
   11474:	mov	r0, #1
   11478:	movt	r2, #1
   1147c:	movt	r3, #1
   11480:	bl	11074 <__printf_chk@plt>
   11484:	cmp	r6, #0
   11488:	mov	r0, #5
   1148c:	mov	r1, #0
   11490:	moveq	r6, r5
   11494:	bl	110d4 <setlocale@plt>
   11498:	cmp	r0, #0
   1149c:	beq	114d4 <__assert_fail@plt+0x388>
   114a0:	movw	r1, #28099	; 0x6dc3
   114a4:	mov	r2, #3
   114a8:	movt	r1, #1
   114ac:	bl	11128 <strncmp@plt>
   114b0:	cmp	r0, #0
   114b4:	beq	114d4 <__assert_fail@plt+0x388>
   114b8:	movw	r1, #28103	; 0x6dc7
   114bc:	mov	r0, #0
   114c0:	mov	r2, #5
   114c4:	movt	r1, #1
   114c8:	bl	10f54 <dcgettext@plt>
   114cc:	ldr	r1, [r7]
   114d0:	bl	10ec4 <fputs_unlocked@plt>
   114d4:	movw	r1, #28174	; 0x6e0e
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	movt	r1, #1
   114e4:	bl	10f54 <dcgettext@plt>
   114e8:	movw	r2, #28059	; 0x6d9b
   114ec:	mov	r1, r0
   114f0:	mov	r0, #1
   114f4:	mov	r3, r5
   114f8:	movt	r2, #1
   114fc:	bl	11074 <__printf_chk@plt>
   11500:	movw	r1, #28201	; 0x6e29
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	10f54 <dcgettext@plt>
   11514:	movw	r3, #28251	; 0x6e5b
   11518:	mov	r1, r0
   1151c:	movw	r0, #27969	; 0x6d41
   11520:	cmp	r6, r5
   11524:	mov	r2, r6
   11528:	movt	r0, #1
   1152c:	movt	r3, #1
   11530:	moveq	r3, r0
   11534:	mov	r0, #1
   11538:	bl	11074 <__printf_chk@plt>
   1153c:	mov	r0, r4
   11540:	bl	11020 <exit@plt>
   11544:	movw	r0, #33104	; 0x8150
   11548:	movw	r1, #25940	; 0x6554
   1154c:	mov	r2, #5
   11550:	movt	r0, #2
   11554:	movt	r1, #1
   11558:	ldr	r5, [r0]
   1155c:	mov	r0, #0
   11560:	bl	10f54 <dcgettext@plt>
   11564:	mov	r2, r0
   11568:	movw	r0, #33172	; 0x8194
   1156c:	mov	r1, #1
   11570:	movt	r0, #2
   11574:	ldr	r3, [r0]
   11578:	mov	r0, r5
   1157c:	bl	1108c <__fprintf_chk@plt>
   11580:	mov	r0, r4
   11584:	bl	11020 <exit@plt>
   11588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1158c:	add	fp, sp, #28
   11590:	sub	sp, sp, #20
   11594:	mov	r5, r0
   11598:	ldr	r0, [r1]
   1159c:	mov	r8, r1
   115a0:	bl	133d8 <__assert_fail@plt+0x228c>
   115a4:	movw	r1, #28251	; 0x6e5b
   115a8:	mov	r0, #6
   115ac:	movt	r1, #1
   115b0:	bl	110d4 <setlocale@plt>
   115b4:	movw	r6, #27559	; 0x6ba7
   115b8:	movw	r1, #27447	; 0x6b37
   115bc:	movt	r6, #1
   115c0:	movt	r1, #1
   115c4:	mov	r0, r6
   115c8:	bl	1111c <bindtextdomain@plt>
   115cc:	mov	r0, r6
   115d0:	bl	10f6c <textdomain@plt>
   115d4:	movw	r0, #11020	; 0x2b0c
   115d8:	movt	r0, #1
   115dc:	bl	16530 <__assert_fail@plt+0x53e4>
   115e0:	movw	sl, #33128	; 0x8168
   115e4:	movw	r7, #27471	; 0x6b4f
   115e8:	movw	r3, #28392	; 0x6ee8
   115ec:	mov	r2, #0
   115f0:	mov	r4, #0
   115f4:	mov	r9, #0
   115f8:	mov	r6, #0
   115fc:	movt	sl, #2
   11600:	movt	r7, #1
   11604:	movt	r3, #1
   11608:	strh	r2, [sl]
   1160c:	strb	r2, [sl, #2]
   11610:	b	11620 <__assert_fail@plt+0x4d4>
   11614:	movw	r0, #33120	; 0x8160
   11618:	movt	r0, #2
   1161c:	ldr	r6, [r0]
   11620:	str	r2, [sp]
   11624:	mov	r0, r5
   11628:	mov	r1, r8
   1162c:	mov	r2, r7
   11630:	bl	11008 <getopt_long@plt>
   11634:	cmp	r0, #97	; 0x61
   11638:	ble	117a0 <__assert_fail@plt+0x654>
   1163c:	sub	r1, r0, #98	; 0x62
   11640:	cmp	r1, #24
   11644:	bhi	116d8 <__assert_fail@plt+0x58c>
   11648:	movw	r7, #27471	; 0x6b4f
   1164c:	movw	r3, #28392	; 0x6ee8
   11650:	add	r0, pc, #12
   11654:	mov	r2, #0
   11658:	movt	r7, #1
   1165c:	movt	r3, #1
   11660:	ldr	pc, [r0, r1, lsl #2]
   11664:	andeq	r1, r1, r8, asr #13
   11668:	andeq	r1, r1, r8, asr #13
   1166c:	andeq	r1, r1, r0, asr #14
   11670:	andeq	r1, r1, r8, lsl #19
   11674:	andeq	r1, r1, ip, asr #13
   11678:	andeq	r1, r1, r8, lsl #19
   1167c:	andeq	r1, r1, r8, lsl #19
   11680:	andeq	r1, r1, r8, lsl #19
   11684:	andeq	r1, r1, r8, lsl #19
   11688:	andeq	r1, r1, r8, lsl #19
   1168c:	andeq	r1, r1, r8, lsl #19
   11690:	andeq	r1, r1, r8, lsl #19
   11694:	andeq	r1, r1, r0, lsr #12
   11698:	andeq	r1, r1, r8, lsl #19
   1169c:	andeq	r1, r1, r8, lsl #19
   116a0:	andeq	r1, r1, r8, lsl #19
   116a4:	andeq	r1, r1, r8, lsl #19
   116a8:	andeq	r1, r1, ip, ror #14
   116ac:	andeq	r1, r1, r8, lsl #19
   116b0:	andeq	r1, r1, r8, lsl #19
   116b4:	andeq	r1, r1, r8, lsl #19
   116b8:	andeq	r1, r1, r8, lsl #19
   116bc:	andeq	r1, r1, r8, lsl #19
   116c0:	andeq	r1, r1, r8, lsl #19
   116c4:	andeq	r1, r1, r4, lsr r7
   116c8:	mov	r9, #1
   116cc:	cmp	r6, #0
   116d0:	beq	11614 <__assert_fail@plt+0x4c8>
   116d4:	b	11964 <__assert_fail@plt+0x818>
   116d8:	movw	r7, #27471	; 0x6b4f
   116dc:	movw	r3, #28392	; 0x6ee8
   116e0:	cmp	r0, #256	; 0x100
   116e4:	mov	r2, #0
   116e8:	movt	r7, #1
   116ec:	movt	r3, #1
   116f0:	bne	11778 <__assert_fail@plt+0x62c>
   116f4:	movw	r0, #33120	; 0x8160
   116f8:	movt	r0, #2
   116fc:	ldr	r1, [r0]
   11700:	ldrb	r0, [r1]
   11704:	cmp	r0, #0
   11708:	beq	11790 <__assert_fail@plt+0x644>
   1170c:	mov	r0, r1
   11710:	mov	r7, r1
   11714:	bl	1102c <strlen@plt>
   11718:	movw	r3, #28392	; 0x6ee8
   1171c:	mov	r1, r7
   11720:	movw	r7, #27471	; 0x6b4f
   11724:	mov	r2, #0
   11728:	movt	r3, #1
   1172c:	movt	r7, #1
   11730:	b	11794 <__assert_fail@plt+0x648>
   11734:	mov	r0, #1
   11738:	strb	r0, [sl, #3]
   1173c:	b	11620 <__assert_fail@plt+0x4d4>
   11740:	movw	r0, #33120	; 0x8160
   11744:	movt	r0, #2
   11748:	ldr	r1, [r0]
   1174c:	ldrb	r0, [r1]
   11750:	cmp	r0, #0
   11754:	ldrbne	r1, [r1, #1]
   11758:	cmpne	r1, #0
   1175c:	bne	11970 <__assert_fail@plt+0x824>
   11760:	strb	r0, [sl, #1]
   11764:	mov	r4, #1
   11768:	b	11620 <__assert_fail@plt+0x4d4>
   1176c:	mov	r0, #1
   11770:	strb	r0, [sl]
   11774:	b	11620 <__assert_fail@plt+0x4d4>
   11778:	movw	r1, #257	; 0x101
   1177c:	cmp	r0, r1
   11780:	bne	11988 <__assert_fail@plt+0x83c>
   11784:	mov	r0, #1
   11788:	strb	r0, [sl, #4]
   1178c:	b	11620 <__assert_fail@plt+0x4d4>
   11790:	mov	r0, #1
   11794:	str	r0, [sl, #8]
   11798:	str	r1, [sl, #12]
   1179c:	b	11620 <__assert_fail@plt+0x4d4>
   117a0:	cmn	r0, #1
   117a4:	bne	118f0 <__assert_fail@plt+0x7a4>
   117a8:	cmp	r6, #0
   117ac:	beq	1197c <__assert_fail@plt+0x830>
   117b0:	tst	r9, #1
   117b4:	beq	117cc <__assert_fail@plt+0x680>
   117b8:	tst	r4, #1
   117bc:	bne	11990 <__assert_fail@plt+0x844>
   117c0:	ldrb	r0, [sl]
   117c4:	cmp	r0, #1
   117c8:	beq	1199c <__assert_fail@plt+0x850>
   117cc:	ldrb	r0, [sl, #4]
   117d0:	ands	r1, r9, #1
   117d4:	movwne	r1, #4
   117d8:	bfi	r1, r0, #1, #1
   117dc:	mov	r0, r6
   117e0:	bl	122d0 <__assert_fail@plt+0x1184>
   117e4:	tst	r4, #1
   117e8:	moveq	r0, #9
   117ec:	strbeq	r0, [sl, #1]
   117f0:	ldr	r0, [sl, #12]
   117f4:	cmp	r0, #0
   117f8:	bne	11818 <__assert_fail@plt+0x6cc>
   117fc:	movw	r0, #33480	; 0x82c8
   11800:	mov	r1, #1
   11804:	movt	r0, #2
   11808:	str	r1, [sl, #8]
   1180c:	str	r0, [sl, #12]
   11810:	ldrb	r1, [sl, #1]
   11814:	strb	r1, [r0]
   11818:	movw	r4, #33096	; 0x8148
   1181c:	movw	r0, #6600	; 0x19c8
   11820:	movw	r7, #7136	; 0x1be0
   11824:	tst	r9, #1
   11828:	movt	r4, #2
   1182c:	movt	r0, #1
   11830:	movt	r7, #1
   11834:	ldr	r1, [r4]
   11838:	movne	r7, r0
   1183c:	cmp	r1, r5
   11840:	bne	11868 <__assert_fail@plt+0x71c>
   11844:	movw	r0, #28780	; 0x706c
   11848:	mov	r1, r7
   1184c:	movt	r0, #1
   11850:	bl	121c4 <__assert_fail@plt+0x1078>
   11854:	mov	r6, r0
   11858:	ldrb	r0, [sl, #2]
   1185c:	cmp	r0, #1
   11860:	beq	118a4 <__assert_fail@plt+0x758>
   11864:	b	118bc <__assert_fail@plt+0x770>
   11868:	mov	r6, #1
   1186c:	bge	11898 <__assert_fail@plt+0x74c>
   11870:	mov	r6, #1
   11874:	ldr	r0, [r8, r1, lsl #2]
   11878:	mov	r1, r7
   1187c:	bl	121c4 <__assert_fail@plt+0x1078>
   11880:	ldr	r1, [r4]
   11884:	and	r6, r6, r0
   11888:	add	r1, r1, #1
   1188c:	cmp	r1, r5
   11890:	str	r1, [r4]
   11894:	blt	11874 <__assert_fail@plt+0x728>
   11898:	ldrb	r0, [sl, #2]
   1189c:	cmp	r0, #1
   118a0:	bne	118bc <__assert_fail@plt+0x770>
   118a4:	movw	r0, #33112	; 0x8158
   118a8:	movt	r0, #2
   118ac:	ldr	r0, [r0]
   118b0:	bl	12c38 <__assert_fail@plt+0x1aec>
   118b4:	cmn	r0, #1
   118b8:	beq	118c8 <__assert_fail@plt+0x77c>
   118bc:	eor	r0, r6, #1
   118c0:	sub	sp, fp, #28
   118c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118c8:	bl	11044 <__errno_location@plt>
   118cc:	ldr	r1, [r0]
   118d0:	movw	r2, #28780	; 0x706c
   118d4:	mov	r0, #0
   118d8:	mov	r6, #0
   118dc:	movt	r2, #1
   118e0:	bl	10fcc <error@plt>
   118e4:	eor	r0, r6, #1
   118e8:	sub	sp, fp, #28
   118ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118f0:	cmn	r0, #3
   118f4:	bne	11954 <__assert_fail@plt+0x808>
   118f8:	movw	r0, #33016	; 0x80f8
   118fc:	movw	r2, #27600	; 0x6bd0
   11900:	movw	r7, #27584	; 0x6bc0
   11904:	movw	r6, #27569	; 0x6bb1
   11908:	mov	r1, #0
   1190c:	movt	r0, #2
   11910:	movt	r2, #1
   11914:	movt	r7, #1
   11918:	movt	r6, #1
   1191c:	ldr	r3, [r0]
   11920:	movw	r0, #33116	; 0x815c
   11924:	movt	r0, #2
   11928:	ldr	r0, [r0]
   1192c:	stm	sp, {r6, r7}
   11930:	str	r2, [sp, #8]
   11934:	movw	r2, #27555	; 0x6ba3
   11938:	str	r1, [sp, #12]
   1193c:	movw	r1, #27443	; 0x6b33
   11940:	movt	r1, #1
   11944:	movt	r2, #1
   11948:	bl	157f8 <__assert_fail@plt+0x46ac>
   1194c:	mov	r0, #0
   11950:	bl	11020 <exit@plt>
   11954:	cmn	r0, #2
   11958:	bne	11988 <__assert_fail@plt+0x83c>
   1195c:	mov	r0, #0
   11960:	bl	11248 <__assert_fail@plt+0xfc>
   11964:	movw	r1, #27483	; 0x6b5b
   11968:	movt	r1, #1
   1196c:	b	119a4 <__assert_fail@plt+0x858>
   11970:	movw	r1, #27514	; 0x6b7a
   11974:	movt	r1, #1
   11978:	b	119a4 <__assert_fail@plt+0x858>
   1197c:	movw	r1, #27613	; 0x6bdd
   11980:	movt	r1, #1
   11984:	b	119a4 <__assert_fail@plt+0x858>
   11988:	mov	r0, #1
   1198c:	bl	11248 <__assert_fail@plt+0xfc>
   11990:	movw	r1, #27669	; 0x6c15
   11994:	movt	r1, #1
   11998:	b	119a4 <__assert_fail@plt+0x858>
   1199c:	movw	r1, #27735	; 0x6c57
   119a0:	movt	r1, #1
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	bl	10f54 <dcgettext@plt>
   119b0:	mov	r2, r0
   119b4:	mov	r0, #0
   119b8:	mov	r1, #0
   119bc:	bl	10fcc <error@plt>
   119c0:	mov	r0, #1
   119c4:	bl	11248 <__assert_fail@plt+0xfc>
   119c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119cc:	add	fp, sp, #28
   119d0:	sub	sp, sp, #4
   119d4:	movw	ip, #33484	; 0x82cc
   119d8:	mov	r4, r0
   119dc:	movw	r6, #33128	; 0x8168
   119e0:	movw	sl, #33116	; 0x815c
   119e4:	movw	r9, #33480	; 0x82c8
   119e8:	mov	r7, #0
   119ec:	movt	ip, #2
   119f0:	movt	r6, #2
   119f4:	movt	sl, #2
   119f8:	movt	r9, #2
   119fc:	ldr	r0, [ip]
   11a00:	str	r0, [r6, #16]
   11a04:	b	11a14 <__assert_fail@plt+0x8c8>
   11a08:	ldr	r0, [ip]
   11a0c:	mov	r7, #0
   11a10:	str	r0, [r6, #16]
   11a14:	mov	r8, #0
   11a18:	mov	lr, #0
   11a1c:	b	11a2c <__assert_fail@plt+0x8e0>
   11a20:	add	r2, r1, #1
   11a24:	str	r2, [r0, #20]
   11a28:	strb	r5, [r1]
   11a2c:	ldmib	r4, {r0, r1}
   11a30:	cmp	r0, r1
   11a34:	bcs	11b34 <__assert_fail@plt+0x9e8>
   11a38:	add	r1, r0, #1
   11a3c:	str	r1, [r4, #4]
   11a40:	ldrb	r5, [r0]
   11a44:	ldrb	r0, [r6, #3]
   11a48:	mov	r1, #10
   11a4c:	cmp	r0, #0
   11a50:	movwne	r1, #0
   11a54:	cmp	r5, r1
   11a58:	beq	11b6c <__assert_fail@plt+0xa20>
   11a5c:	cmn	r5, #1
   11a60:	beq	11ba4 <__assert_fail@plt+0xa58>
   11a64:	ldr	r0, [r6, #16]
   11a68:	adds	r7, r7, #1
   11a6c:	adc	r8, r8, #0
   11a70:	ldrd	r2, [r0, #8]
   11a74:	subs	r1, r2, r7
   11a78:	sbcs	r1, r3, r8
   11a7c:	addcc	r0, r0, #16
   11a80:	strcc	r0, [r6, #16]
   11a84:	ldr	r2, [r0]
   11a88:	ldr	r1, [r0, #4]
   11a8c:	subs	r0, r7, r2
   11a90:	sbcs	r0, r8, r1
   11a94:	bcc	11a2c <__assert_fail@plt+0x8e0>
   11a98:	ldr	r0, [r6, #12]
   11a9c:	cmp	r0, r9
   11aa0:	bne	11ad4 <__assert_fail@plt+0x988>
   11aa4:	ldr	r0, [sl]
   11aa8:	ldr	r1, [r0, #20]
   11aac:	ldr	r2, [r0, #24]
   11ab0:	cmp	r1, r2
   11ab4:	bcc	11a20 <__assert_fail@plt+0x8d4>
   11ab8:	uxtb	r1, r5
   11abc:	mov	r5, lr
   11ac0:	bl	110c8 <__overflow@plt>
   11ac4:	movw	ip, #33484	; 0x82cc
   11ac8:	mov	lr, r5
   11acc:	movt	ip, #2
   11ad0:	b	11a2c <__assert_fail@plt+0x8e0>
   11ad4:	eor	r2, r2, r7
   11ad8:	eor	r1, r1, r8
   11adc:	orrs	r1, r2, r1
   11ae0:	mvn	r2, lr
   11ae4:	movwne	r1, #1
   11ae8:	orr	r1, r2, r1
   11aec:	tst	r1, #1
   11af0:	bne	11b0c <__assert_fail@plt+0x9c0>
   11af4:	ldr	r3, [sl]
   11af8:	ldr	r2, [r6, #8]
   11afc:	mov	r1, #1
   11b00:	bl	10f3c <fwrite_unlocked@plt>
   11b04:	movw	ip, #33484	; 0x82cc
   11b08:	movt	ip, #2
   11b0c:	ldr	r0, [sl]
   11b10:	ldr	r1, [r0, #20]
   11b14:	ldr	r2, [r0, #24]
   11b18:	cmp	r1, r2
   11b1c:	bcs	11b54 <__assert_fail@plt+0xa08>
   11b20:	add	r2, r1, #1
   11b24:	mov	lr, #1
   11b28:	str	r2, [r0, #20]
   11b2c:	strb	r5, [r1]
   11b30:	b	11a2c <__assert_fail@plt+0x8e0>
   11b34:	mov	r0, r4
   11b38:	mov	r5, lr
   11b3c:	bl	110bc <__uflow@plt>
   11b40:	movw	ip, #33484	; 0x82cc
   11b44:	mov	lr, r5
   11b48:	mov	r5, r0
   11b4c:	movt	ip, #2
   11b50:	b	11a44 <__assert_fail@plt+0x8f8>
   11b54:	uxtb	r1, r5
   11b58:	mov	r5, ip
   11b5c:	bl	110c8 <__overflow@plt>
   11b60:	mov	ip, r5
   11b64:	mov	lr, #1
   11b68:	b	11a2c <__assert_fail@plt+0x8e0>
   11b6c:	ldr	r0, [sl]
   11b70:	ldr	r1, [r0, #20]
   11b74:	ldr	r2, [r0, #24]
   11b78:	cmp	r1, r2
   11b7c:	bcs	11b90 <__assert_fail@plt+0xa44>
   11b80:	add	r2, r1, #1
   11b84:	str	r2, [r0, #20]
   11b88:	strb	r5, [r1]
   11b8c:	b	11a08 <__assert_fail@plt+0x8bc>
   11b90:	uxtb	r1, r5
   11b94:	mov	r5, ip
   11b98:	bl	110c8 <__overflow@plt>
   11b9c:	mov	ip, r5
   11ba0:	b	11a08 <__assert_fail@plt+0x8bc>
   11ba4:	orrs	r0, r7, r8
   11ba8:	beq	11bcc <__assert_fail@plt+0xa80>
   11bac:	ldr	r0, [sl]
   11bb0:	ldr	r2, [r0, #20]
   11bb4:	ldr	r3, [r0, #24]
   11bb8:	cmp	r2, r3
   11bbc:	bcs	11bd4 <__assert_fail@plt+0xa88>
   11bc0:	add	r3, r2, #1
   11bc4:	str	r3, [r0, #20]
   11bc8:	strb	r1, [r2]
   11bcc:	sub	sp, fp, #28
   11bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd4:	sub	sp, fp, #28
   11bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bdc:	b	110c8 <__overflow@plt>
   11be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11be4:	add	fp, sp, #28
   11be8:	sub	sp, sp, #20
   11bec:	mov	r4, r0
   11bf0:	movw	r0, #33484	; 0x82cc
   11bf4:	movw	r8, #33128	; 0x8168
   11bf8:	movt	r0, #2
   11bfc:	movt	r8, #2
   11c00:	ldr	r0, [r0]
   11c04:	str	r0, [r8, #16]
   11c08:	ldmib	r4, {r0, r1}
   11c0c:	cmp	r0, r1
   11c10:	bcs	1218c <__assert_fail@plt+0x1040>
   11c14:	add	r1, r0, #1
   11c18:	str	r1, [r4, #4]
   11c1c:	ldrb	r0, [r0]
   11c20:	mov	r1, r4
   11c24:	bl	11038 <ungetc@plt>
   11c28:	ldr	r0, [r8, #16]
   11c2c:	movw	r9, #33116	; 0x815c
   11c30:	mov	ip, #0
   11c34:	mov	lr, #1
   11c38:	mov	sl, #0
   11c3c:	mov	r5, #0
   11c40:	movt	r9, #2
   11c44:	ldrd	r0, [r0]
   11c48:	rsbs	r0, r0, #1
   11c4c:	rscs	r0, r1, #0
   11c50:	ldrb	r1, [r8]
   11c54:	mov	r0, #0
   11c58:	movwcc	r0, #1
   11c5c:	eor	r0, r1, r0
   11c60:	eor	r0, r0, #1
   11c64:	str	r0, [sp, #16]
   11c68:	b	11c8c <__assert_fail@plt+0xb40>
   11c6c:	ldr	r0, [r8, #16]
   11c70:	adds	lr, lr, #1
   11c74:	adc	ip, ip, #0
   11c78:	ldrd	r2, [r0, #8]
   11c7c:	subs	r1, r2, lr
   11c80:	sbcs	r1, r3, ip
   11c84:	addcc	r0, r0, #16
   11c88:	strcc	r0, [r8, #16]
   11c8c:	ldr	r1, [sp, #16]
   11c90:	eor	r0, lr, #1
   11c94:	orrs	r0, r0, ip
   11c98:	movwne	r0, #1
   11c9c:	orr	r0, r0, r1
   11ca0:	tst	r0, #1
   11ca4:	beq	11d30 <__assert_fail@plt+0xbe4>
   11ca8:	ldr	r0, [r8, #16]
   11cac:	ldrd	r0, [r0]
   11cb0:	subs	r0, lr, r0
   11cb4:	sbcs	r0, ip, r1
   11cb8:	bcs	11eb0 <__assert_fail@plt+0xd64>
   11cbc:	ldmib	r4, {r0, r1}
   11cc0:	mov	r7, r5
   11cc4:	cmp	r0, r1
   11cc8:	bcs	11d04 <__assert_fail@plt+0xbb8>
   11ccc:	add	r1, r0, #1
   11cd0:	str	r1, [r4, #4]
   11cd4:	ldrb	r5, [r0]
   11cd8:	ldrb	r0, [r8, #1]
   11cdc:	cmp	r5, r0
   11ce0:	beq	11fb0 <__assert_fail@plt+0xe64>
   11ce4:	ldrb	r1, [r8, #3]
   11ce8:	cmp	r1, #0
   11cec:	mov	r1, #10
   11cf0:	movwne	r1, #0
   11cf4:	cmn	r5, #1
   11cf8:	cmpne	r5, r1
   11cfc:	bne	11cbc <__assert_fail@plt+0xb70>
   11d00:	b	11fb0 <__assert_fail@plt+0xe64>
   11d04:	mov	r0, r4
   11d08:	mov	r5, ip
   11d0c:	mov	r6, lr
   11d10:	bl	110bc <__uflow@plt>
   11d14:	mov	ip, r5
   11d18:	mov	lr, r6
   11d1c:	mov	r5, r0
   11d20:	ldrb	r0, [r8, #1]
   11d24:	cmp	r5, r0
   11d28:	bne	11ce4 <__assert_fail@plt+0xb98>
   11d2c:	b	11fb0 <__assert_fail@plt+0xe64>
   11d30:	ldrb	r1, [r8, #3]
   11d34:	ldrb	r0, [r8, #1]
   11d38:	add	r5, r8, #20
   11d3c:	add	r6, r8, #24
   11d40:	cmp	r1, #0
   11d44:	mov	r1, #10
   11d48:	movwne	r1, #0
   11d4c:	stm	sp, {r0, r1, r4}
   11d50:	b	11d6c <__assert_fail@plt+0xc20>
   11d54:	ldrb	r1, [r8, #3]
   11d58:	ldrb	r0, [r8, #1]
   11d5c:	cmp	r1, #0
   11d60:	mov	r1, #10
   11d64:	movwne	r1, #0
   11d68:	stm	sp, {r0, r1, r4}
   11d6c:	mov	r0, r5
   11d70:	mov	r1, r6
   11d74:	mov	r2, #0
   11d78:	mvn	r3, #0
   11d7c:	bl	12e08 <__assert_fail@plt+0x1cbc>
   11d80:	mov	r2, r0
   11d84:	cmp	r0, #0
   11d88:	blt	12168 <__assert_fail@plt+0x101c>
   11d8c:	cmp	r2, #0
   11d90:	beq	121a0 <__assert_fail@plt+0x1054>
   11d94:	ldr	r0, [r8, #20]
   11d98:	sub	r7, r2, #1
   11d9c:	ldrb	r3, [r8, #1]
   11da0:	ldrb	r1, [r0, r7]
   11da4:	cmp	r1, r3
   11da8:	beq	11e10 <__assert_fail@plt+0xcc4>
   11dac:	ldrb	r1, [r8]
   11db0:	cmp	r1, #0
   11db4:	bne	11d54 <__assert_fail@plt+0xc08>
   11db8:	ldr	r3, [r9]
   11dbc:	mov	r1, #1
   11dc0:	bl	10f3c <fwrite_unlocked@plt>
   11dc4:	ldrb	r0, [r8, #3]
   11dc8:	mov	r1, #10
   11dcc:	cmp	r0, #0
   11dd0:	ldr	r0, [r8, #20]
   11dd4:	movwne	r1, #0
   11dd8:	ldrb	r0, [r0, r7]
   11ddc:	cmp	r1, r0
   11de0:	beq	11d54 <__assert_fail@plt+0xc08>
   11de4:	ldr	r0, [r9]
   11de8:	ldr	r2, [r0, #20]
   11dec:	ldr	r3, [r0, #24]
   11df0:	cmp	r2, r3
   11df4:	bcs	11e08 <__assert_fail@plt+0xcbc>
   11df8:	add	r3, r2, #1
   11dfc:	str	r3, [r0, #20]
   11e00:	strb	r1, [r2]
   11e04:	b	11d54 <__assert_fail@plt+0xc08>
   11e08:	bl	110c8 <__overflow@plt>
   11e0c:	b	11d54 <__assert_fail@plt+0xc08>
   11e10:	ldr	r1, [r8, #16]
   11e14:	ldrd	r2, [r1]
   11e18:	rsbs	r1, r2, #1
   11e1c:	rscs	r1, r3, #0
   11e20:	bcc	11e74 <__assert_fail@plt+0xd28>
   11e24:	ldr	r3, [r9]
   11e28:	mov	r1, #1
   11e2c:	mov	r2, r7
   11e30:	bl	10f3c <fwrite_unlocked@plt>
   11e34:	ldrb	r1, [r8, #3]
   11e38:	ldrb	r0, [r8, #1]
   11e3c:	cmp	r1, #0
   11e40:	mov	r1, #10
   11e44:	movwne	r1, #0
   11e48:	cmp	r1, r0
   11e4c:	bne	11e70 <__assert_fail@plt+0xd24>
   11e50:	ldmib	r4, {r0, r1}
   11e54:	cmp	r0, r1
   11e58:	bcs	12154 <__assert_fail@plt+0x1008>
   11e5c:	add	r1, r0, #1
   11e60:	str	r1, [r4, #4]
   11e64:	ldrb	r0, [r0]
   11e68:	mov	r1, r4
   11e6c:	bl	11038 <ungetc@plt>
   11e70:	mov	sl, #1
   11e74:	ldr	r0, [r8, #16]
   11e78:	mov	ip, #0
   11e7c:	mov	lr, #2
   11e80:	ldrd	r2, [r0, #8]
   11e84:	rsbs	r1, r2, #1
   11e88:	rscs	r1, r3, #0
   11e8c:	bcc	120a8 <__assert_fail@plt+0xf5c>
   11e90:	add	r0, r0, #16
   11e94:	mov	ip, #0
   11e98:	mov	r5, #0
   11e9c:	str	r0, [r8, #16]
   11ea0:	ldrd	r0, [r0]
   11ea4:	subs	r0, lr, r0
   11ea8:	sbcs	r0, ip, r1
   11eac:	bcc	11cbc <__assert_fail@plt+0xb70>
   11eb0:	tst	sl, #1
   11eb4:	beq	11efc <__assert_fail@plt+0xdb0>
   11eb8:	ldr	r3, [r9]
   11ebc:	ldr	r2, [r8, #8]
   11ec0:	ldr	r0, [r8, #12]
   11ec4:	mov	r1, #1
   11ec8:	mov	r6, ip
   11ecc:	mov	r7, lr
   11ed0:	bl	10f3c <fwrite_unlocked@plt>
   11ed4:	mov	lr, r7
   11ed8:	mov	ip, r6
   11edc:	ldmib	r4, {r0, r1}
   11ee0:	cmp	r0, r1
   11ee4:	bcc	11f08 <__assert_fail@plt+0xdbc>
   11ee8:	b	11f7c <__assert_fail@plt+0xe30>
   11eec:	add	r2, r1, #1
   11ef0:	mov	r5, r6
   11ef4:	str	r2, [r0, #20]
   11ef8:	strb	r6, [r1]
   11efc:	ldmib	r4, {r0, r1}
   11f00:	cmp	r0, r1
   11f04:	bcs	11f7c <__assert_fail@plt+0xe30>
   11f08:	add	r1, r0, #1
   11f0c:	str	r1, [r4, #4]
   11f10:	ldrb	r6, [r0]
   11f14:	ldrb	r0, [r8, #1]
   11f18:	mov	sl, #1
   11f1c:	cmp	r6, r0
   11f20:	beq	11fa8 <__assert_fail@plt+0xe5c>
   11f24:	ldrb	r1, [r8, #3]
   11f28:	cmp	r1, #0
   11f2c:	mov	r1, #10
   11f30:	movwne	r1, #0
   11f34:	cmn	r6, #1
   11f38:	cmpne	r6, r1
   11f3c:	beq	11fa8 <__assert_fail@plt+0xe5c>
   11f40:	ldr	r0, [r9]
   11f44:	ldr	r1, [r0, #20]
   11f48:	ldr	r2, [r0, #24]
   11f4c:	cmp	r1, r2
   11f50:	bcc	11eec <__assert_fail@plt+0xda0>
   11f54:	uxtb	r1, r6
   11f58:	mov	r5, ip
   11f5c:	mov	r7, lr
   11f60:	bl	110c8 <__overflow@plt>
   11f64:	mov	ip, r5
   11f68:	mov	lr, r7
   11f6c:	mov	r5, r6
   11f70:	ldmib	r4, {r0, r1}
   11f74:	cmp	r0, r1
   11f78:	bcc	11f08 <__assert_fail@plt+0xdbc>
   11f7c:	mov	r0, r4
   11f80:	mov	r6, ip
   11f84:	mov	r7, lr
   11f88:	bl	110bc <__uflow@plt>
   11f8c:	mov	ip, r6
   11f90:	mov	lr, r7
   11f94:	mov	r6, r0
   11f98:	ldrb	r0, [r8, #1]
   11f9c:	mov	sl, #1
   11fa0:	cmp	r6, r0
   11fa4:	bne	11f24 <__assert_fail@plt+0xdd8>
   11fa8:	mov	r7, r5
   11fac:	mov	r5, r6
   11fb0:	ldrb	r1, [r8, #3]
   11fb4:	cmp	r1, #0
   11fb8:	mov	r1, #10
   11fbc:	movwne	r1, #0
   11fc0:	cmp	r5, r0
   11fc4:	cmpeq	r1, r0
   11fc8:	beq	11fdc <__assert_fail@plt+0xe90>
   11fcc:	ldrb	r0, [r8, #1]
   11fd0:	cmp	r5, r0
   11fd4:	beq	11c6c <__assert_fail@plt+0xb20>
   11fd8:	b	12020 <__assert_fail@plt+0xed4>
   11fdc:	ldmib	r4, {r0, r1}
   11fe0:	mov	r9, lr
   11fe4:	mov	r6, ip
   11fe8:	cmp	r0, r1
   11fec:	bcs	120c0 <__assert_fail@plt+0xf74>
   11ff0:	add	r1, r0, #1
   11ff4:	str	r1, [r4, #4]
   11ff8:	ldrb	r0, [r0]
   11ffc:	mov	r1, r4
   12000:	bl	11038 <ungetc@plt>
   12004:	mov	lr, r9
   12008:	movw	r9, #33116	; 0x815c
   1200c:	mov	ip, r6
   12010:	movt	r9, #2
   12014:	ldrb	r0, [r8, #1]
   12018:	cmp	r5, r0
   1201c:	beq	11c6c <__assert_fail@plt+0xb20>
   12020:	ldrb	r1, [r8, #3]
   12024:	add	r3, r5, #1
   12028:	clz	r3, r3
   1202c:	lsr	r6, r3, #5
   12030:	cmp	r1, #0
   12034:	mov	r1, #10
   12038:	movwne	r1, #0
   1203c:	cmn	r5, #1
   12040:	sub	r2, r5, r1
   12044:	cmpne	r5, r1
   12048:	clz	r2, r2
   1204c:	lsr	r2, r2, #5
   12050:	bne	11c8c <__assert_fail@plt+0xb40>
   12054:	tst	sl, #1
   12058:	eoreq	r3, lr, #1
   1205c:	orrseq	r3, r3, ip
   12060:	beq	12110 <__assert_fail@plt+0xfc4>
   12064:	subs	r3, r7, r1
   12068:	movwne	r3, #1
   1206c:	cmp	r1, r0
   12070:	beq	1207c <__assert_fail@plt+0xf30>
   12074:	orrs	r0, r3, r2
   12078:	beq	1211c <__assert_fail@plt+0xfd0>
   1207c:	ldr	r0, [r9]
   12080:	ldr	r2, [r0, #20]
   12084:	ldr	r3, [r0, #24]
   12088:	cmp	r2, r3
   1208c:	bcs	12144 <__assert_fail@plt+0xff8>
   12090:	add	r3, r2, #1
   12094:	str	r3, [r0, #20]
   12098:	strb	r1, [r2]
   1209c:	cmp	r6, #0
   120a0:	beq	12124 <__assert_fail@plt+0xfd8>
   120a4:	b	12184 <__assert_fail@plt+0x1038>
   120a8:	mov	r5, #0
   120ac:	ldrd	r0, [r0]
   120b0:	subs	r0, lr, r0
   120b4:	sbcs	r0, ip, r1
   120b8:	bcc	11cbc <__assert_fail@plt+0xb70>
   120bc:	b	11eb0 <__assert_fail@plt+0xd64>
   120c0:	mov	r0, r4
   120c4:	bl	110bc <__uflow@plt>
   120c8:	cmn	r0, #1
   120cc:	bne	11ffc <__assert_fail@plt+0xeb0>
   120d0:	ldrb	r1, [r8, #3]
   120d4:	ldrb	r0, [r8, #1]
   120d8:	mov	lr, r9
   120dc:	movw	r9, #33116	; 0x815c
   120e0:	mov	ip, r6
   120e4:	mvn	r5, #0
   120e8:	mov	r2, #0
   120ec:	mov	r6, #1
   120f0:	movt	r9, #2
   120f4:	cmp	r1, #0
   120f8:	mov	r1, #10
   120fc:	movwne	r1, #0
   12100:	tst	sl, #1
   12104:	eoreq	r3, lr, #1
   12108:	orrseq	r3, r3, ip
   1210c:	bne	12064 <__assert_fail@plt+0xf18>
   12110:	ldrb	r3, [r8]
   12114:	cmp	r3, #0
   12118:	beq	12064 <__assert_fail@plt+0xf18>
   1211c:	cmp	r6, #0
   12120:	bne	12184 <__assert_fail@plt+0x1038>
   12124:	movw	r0, #33484	; 0x82cc
   12128:	mov	ip, #0
   1212c:	mov	lr, #1
   12130:	mov	sl, #0
   12134:	movt	r0, #2
   12138:	ldr	r0, [r0]
   1213c:	str	r0, [r8, #16]
   12140:	b	11c8c <__assert_fail@plt+0xb40>
   12144:	bl	110c8 <__overflow@plt>
   12148:	cmp	r6, #0
   1214c:	beq	12124 <__assert_fail@plt+0xfd8>
   12150:	b	12184 <__assert_fail@plt+0x1038>
   12154:	mov	r0, r4
   12158:	bl	110bc <__uflow@plt>
   1215c:	cmn	r0, #1
   12160:	bne	11e68 <__assert_fail@plt+0xd1c>
   12164:	b	11e74 <__assert_fail@plt+0xd28>
   12168:	ldr	r0, [r8, #20]
   1216c:	bl	12d3c <__assert_fail@plt+0x1bf0>
   12170:	mov	r0, #0
   12174:	str	r0, [r8, #20]
   12178:	ldrb	r0, [r4]
   1217c:	tst	r0, #48	; 0x30
   12180:	beq	121c0 <__assert_fail@plt+0x1074>
   12184:	sub	sp, fp, #28
   12188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1218c:	mov	r0, r4
   12190:	bl	110bc <__uflow@plt>
   12194:	cmn	r0, #1
   12198:	bne	11c20 <__assert_fail@plt+0xad4>
   1219c:	b	12184 <__assert_fail@plt+0x1038>
   121a0:	movw	r0, #28341	; 0x6eb5
   121a4:	movw	r1, #28354	; 0x6ec2
   121a8:	movw	r3, #28364	; 0x6ecc
   121ac:	movw	r2, #315	; 0x13b
   121b0:	movt	r0, #1
   121b4:	movt	r1, #1
   121b8:	movt	r3, #1
   121bc:	bl	1114c <__assert_fail@plt>
   121c0:	bl	15f8c <__assert_fail@plt+0x4e40>
   121c4:	push	{r4, r5, r6, r7, fp, lr}
   121c8:	add	fp, sp, #16
   121cc:	mov	r5, r1
   121d0:	movw	r1, #28780	; 0x706c
   121d4:	mov	r4, r0
   121d8:	movt	r1, #1
   121dc:	bl	10ed0 <strcmp@plt>
   121e0:	cmp	r0, #0
   121e4:	beq	12210 <__assert_fail@plt+0x10c4>
   121e8:	movw	r1, #27553	; 0x6ba1
   121ec:	mov	r0, r4
   121f0:	movt	r1, #1
   121f4:	bl	11104 <fopen64@plt>
   121f8:	mov	r6, r0
   121fc:	cmp	r0, #0
   12200:	bne	1222c <__assert_fail@plt+0x10e0>
   12204:	bl	11044 <__errno_location@plt>
   12208:	ldr	r5, [r0]
   1220c:	b	1229c <__assert_fail@plt+0x1150>
   12210:	movw	r0, #33128	; 0x8168
   12214:	mov	r1, #1
   12218:	movt	r0, #2
   1221c:	strb	r1, [r0, #2]
   12220:	movw	r0, #33112	; 0x8158
   12224:	movt	r0, #2
   12228:	ldr	r6, [r0]
   1222c:	mov	r0, r6
   12230:	mov	r1, #2
   12234:	bl	12bfc <__assert_fail@plt+0x1ab0>
   12238:	mov	r0, r6
   1223c:	blx	r5
   12240:	bl	11044 <__errno_location@plt>
   12244:	ldr	r1, [r6]
   12248:	mov	r7, r0
   1224c:	ldr	r0, [r0]
   12250:	lsl	r1, r1, #26
   12254:	and	r5, r0, r1, asr #31
   12258:	movw	r1, #28780	; 0x706c
   1225c:	mov	r0, r4
   12260:	movt	r1, #1
   12264:	bl	10ed0 <strcmp@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12284 <__assert_fail@plt+0x1138>
   12270:	mov	r0, r6
   12274:	bl	12c38 <__assert_fail@plt+0x1aec>
   12278:	cmn	r0, #1
   1227c:	ldreq	r5, [r7]
   12280:	b	1228c <__assert_fail@plt+0x1140>
   12284:	mov	r0, r6
   12288:	bl	110f8 <clearerr_unlocked@plt>
   1228c:	cmp	r5, #0
   12290:	moveq	r6, #1
   12294:	moveq	r0, r6
   12298:	popeq	{r4, r5, r6, r7, fp, pc}
   1229c:	mov	r0, #0
   122a0:	mov	r1, #3
   122a4:	mov	r2, r4
   122a8:	mov	r6, #0
   122ac:	bl	150a8 <__assert_fail@plt+0x3f5c>
   122b0:	movw	r2, #29038	; 0x716e
   122b4:	mov	r3, r0
   122b8:	mov	r0, #0
   122bc:	mov	r1, r5
   122c0:	movt	r2, #1
   122c4:	bl	10fcc <error@plt>
   122c8:	mov	r0, r6
   122cc:	pop	{r4, r5, r6, r7, fp, pc}
   122d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122d4:	add	fp, sp, #28
   122d8:	sub	sp, sp, #20
   122dc:	mov	r5, r0
   122e0:	ands	r0, r1, #1
   122e4:	mov	r2, #0
   122e8:	str	r1, [sp]
   122ec:	str	r0, [sp, #4]
   122f0:	beq	12324 <__assert_fail@plt+0x11d8>
   122f4:	movw	r1, #28780	; 0x706c
   122f8:	mov	r0, r5
   122fc:	movt	r1, #1
   12300:	bl	10ed0 <strcmp@plt>
   12304:	cmp	r0, #0
   12308:	clz	r0, r0
   1230c:	mov	r2, #0
   12310:	mov	r8, #0
   12314:	lsr	r9, r0, #5
   12318:	addeq	r5, r5, #1
   1231c:	mov	r1, r9
   12320:	b	12330 <__assert_fail@plt+0x11e4>
   12324:	mov	r9, #0
   12328:	mov	r8, #0
   1232c:	mov	r1, #0
   12330:	movw	ip, #33488	; 0x82d0
   12334:	movw	lr, #33156	; 0x8184
   12338:	mov	r0, #1
   1233c:	mov	r7, r1
   12340:	mov	r4, #0
   12344:	mov	r3, #0
   12348:	movt	ip, #2
   1234c:	movt	lr, #2
   12350:	str	r0, [sp, #12]
   12354:	ldrb	r6, [r5]
   12358:	str	r5, [sp, #16]
   1235c:	cmp	r6, #44	; 0x2c
   12360:	beq	124d0 <__assert_fail@plt+0x1384>
   12364:	cmp	r6, #45	; 0x2d
   12368:	bne	123c0 <__assert_fail@plt+0x1274>
   1236c:	tst	r7, #1
   12370:	bne	12a14 <__assert_fail@plt+0x18c8>
   12374:	ldr	r5, [sp, #16]
   12378:	orrs	r0, r9, r8
   1237c:	eoreq	r0, r1, #1
   12380:	tsteq	r0, #1
   12384:	beq	12988 <__assert_fail@plt+0x183c>
   12388:	ands	r3, r1, #1
   1238c:	mov	r7, #1
   12390:	mov	r4, #0
   12394:	add	r5, r5, #1
   12398:	moveq	r9, r7
   1239c:	movne	r3, r8
   123a0:	mov	r8, #0
   123a4:	str	r9, [sp, #12]
   123a8:	mov	r9, #0
   123ac:	ldrb	r6, [r5]
   123b0:	str	r5, [sp, #16]
   123b4:	cmp	r6, #44	; 0x2c
   123b8:	bne	12364 <__assert_fail@plt+0x1218>
   123bc:	b	124d0 <__assert_fail@plt+0x1384>
   123c0:	str	r3, [sp, #8]
   123c4:	mov	r5, r2
   123c8:	mov	sl, r1
   123cc:	bl	11014 <__ctype_b_loc@plt>
   123d0:	ldr	r3, [sp, #8]
   123d4:	movw	lr, #33156	; 0x8184
   123d8:	movw	ip, #33488	; 0x82d0
   123dc:	mov	r1, sl
   123e0:	mov	r2, r5
   123e4:	cmp	r6, #0
   123e8:	movt	lr, #2
   123ec:	movt	ip, #2
   123f0:	beq	124d0 <__assert_fail@plt+0x1384>
   123f4:	ldr	r0, [r0]
   123f8:	add	r0, r0, r6, lsl #1
   123fc:	ldrh	r0, [r0]
   12400:	ands	r0, r0, #1
   12404:	bne	124d0 <__assert_fail@plt+0x1384>
   12408:	sub	r0, r6, #48	; 0x30
   1240c:	cmp	r0, #9
   12410:	bhi	12a40 <__assert_fail@plt+0x18f4>
   12414:	ldr	r6, [lr]
   12418:	cmp	r6, #0
   1241c:	mov	r1, r6
   12420:	movwne	r1, #1
   12424:	tst	r4, r1
   12428:	movw	r1, #39321	; 0x9999
   1242c:	ldreq	r6, [sp, #16]
   12430:	movt	r1, #39321	; 0x9999
   12434:	streq	r6, [lr]
   12438:	subs	r1, r1, r9
   1243c:	movw	r1, #39321	; 0x9999
   12440:	movt	r1, #6553	; 0x1999
   12444:	sbcs	r1, r1, r8
   12448:	bcc	1299c <__assert_fail@plt+0x1850>
   1244c:	mov	r1, #10
   12450:	add	r3, r8, r8, lsl #2
   12454:	umull	r1, r2, r9, r1
   12458:	add	r2, r2, r3, lsl #1
   1245c:	adds	r1, r1, r0
   12460:	adc	r0, r2, r0, asr #31
   12464:	subs	r2, r1, r9
   12468:	sbcs	r2, r0, r8
   1246c:	mov	r2, #0
   12470:	movwcc	r2, #1
   12474:	cmp	r2, #0
   12478:	moveq	r8, r0
   1247c:	moveq	r9, r1
   12480:	cmp	r2, #0
   12484:	bne	1299c <__assert_fail@plt+0x1850>
   12488:	mvn	r1, #0
   1248c:	eor	r0, r9, r1
   12490:	eor	r1, r8, r1
   12494:	orrs	r0, r0, r1
   12498:	beq	1299c <__assert_fail@plt+0x1850>
   1249c:	mov	r2, r5
   124a0:	ldr	r3, [sp, #8]
   124a4:	eor	r0, r7, #1
   124a8:	mov	r1, sl
   124ac:	mov	r4, #1
   124b0:	orr	r2, r5, r7
   124b4:	ldr	r5, [sp, #16]
   124b8:	orr	r1, sl, r0
   124bc:	add	r5, r5, #1
   124c0:	ldrb	r6, [r5]
   124c4:	str	r5, [sp, #16]
   124c8:	cmp	r6, #44	; 0x2c
   124cc:	bne	12364 <__assert_fail@plt+0x1218>
   124d0:	tst	r7, #1
   124d4:	beq	12564 <__assert_fail@plt+0x1418>
   124d8:	orr	r0, r1, r2
   124dc:	ldr	r1, [sp, #12]
   124e0:	mov	sl, #1
   124e4:	movw	r4, #33484	; 0x82cc
   124e8:	ands	r6, r0, #1
   124ec:	movt	r4, #2
   124f0:	movne	r6, r3
   124f4:	movne	sl, r1
   124f8:	ldr	r1, [sp, #4]
   124fc:	cmp	r1, #0
   12500:	tsteq	r0, #1
   12504:	beq	12a34 <__assert_fail@plt+0x18e8>
   12508:	ldr	r5, [sp, #16]
   1250c:	tst	r2, #1
   12510:	beq	125b8 <__assert_fail@plt+0x146c>
   12514:	subs	r0, r9, sl
   12518:	sbcs	r0, r8, r6
   1251c:	bcc	12a90 <__assert_fail@plt+0x1944>
   12520:	ldr	r1, [ip]
   12524:	ldr	r0, [lr, #4]
   12528:	cmp	r1, r0
   1252c:	bne	12638 <__assert_fail@plt+0x14ec>
   12530:	ldr	r0, [r4]
   12534:	add	r1, lr, #4
   12538:	mov	r2, #16
   1253c:	mov	r7, r3
   12540:	bl	15bd8 <__assert_fail@plt+0x4a8c>
   12544:	movw	ip, #33488	; 0x82d0
   12548:	movw	lr, #33156	; 0x8184
   1254c:	mov	r3, r7
   12550:	str	r0, [r4]
   12554:	movt	ip, #2
   12558:	movt	lr, #2
   1255c:	ldr	r1, [ip]
   12560:	b	1263c <__assert_fail@plt+0x14f0>
   12564:	movw	r4, #33484	; 0x82cc
   12568:	orrs	r0, r9, r8
   1256c:	movt	r4, #2
   12570:	beq	12988 <__assert_fail@plt+0x183c>
   12574:	ldr	r1, [ip]
   12578:	ldr	r0, [lr, #4]
   1257c:	cmp	r1, r0
   12580:	bne	125f4 <__assert_fail@plt+0x14a8>
   12584:	ldr	r0, [r4]
   12588:	add	r1, lr, #4
   1258c:	mov	r2, #16
   12590:	mov	r6, r3
   12594:	bl	15bd8 <__assert_fail@plt+0x4a8c>
   12598:	movw	ip, #33488	; 0x82d0
   1259c:	movw	lr, #33156	; 0x8184
   125a0:	mov	r3, r6
   125a4:	str	r0, [r4]
   125a8:	movt	ip, #2
   125ac:	movt	lr, #2
   125b0:	ldr	r1, [ip]
   125b4:	b	125f8 <__assert_fail@plt+0x14ac>
   125b8:	ldr	r1, [ip]
   125bc:	ldr	r0, [lr, #4]
   125c0:	cmp	r1, r0
   125c4:	bne	12618 <__assert_fail@plt+0x14cc>
   125c8:	ldr	r0, [r4]
   125cc:	add	r1, lr, #4
   125d0:	mov	r2, #16
   125d4:	bl	15bd8 <__assert_fail@plt+0x4a8c>
   125d8:	movw	ip, #33488	; 0x82d0
   125dc:	movw	lr, #33156	; 0x8184
   125e0:	str	r0, [r4]
   125e4:	movt	ip, #2
   125e8:	movt	lr, #2
   125ec:	ldr	r1, [ip]
   125f0:	b	1261c <__assert_fail@plt+0x14d0>
   125f4:	ldr	r0, [r4]
   125f8:	ldr	r5, [sp, #16]
   125fc:	ldr	sl, [sp, #12]
   12600:	vmov.32	d16[0], r9
   12604:	add	r2, r0, r1, lsl #4
   12608:	vmov.32	d16[1], r8
   1260c:	vorr	d17, d16, d16
   12610:	vst1.64	{d16-d17}, [r2]
   12614:	b	12650 <__assert_fail@plt+0x1504>
   12618:	ldr	r0, [r4]
   1261c:	mov	r2, r0
   12620:	mvn	r3, #0
   12624:	str	sl, [r2, r1, lsl #4]!
   12628:	str	r6, [r2, #4]
   1262c:	str	r3, [r2, #8]
   12630:	str	r3, [r2, #12]
   12634:	b	12654 <__assert_fail@plt+0x1508>
   12638:	ldr	r0, [r4]
   1263c:	mov	r2, r0
   12640:	str	sl, [r2, r1, lsl #4]!
   12644:	stmib	r2, {r6, r9}
   12648:	str	r8, [r2, #12]
   1264c:	ldr	sl, [sp, #12]
   12650:	mov	r6, r3
   12654:	add	r1, r1, #1
   12658:	str	r1, [ip]
   1265c:	ldrb	r2, [r5]
   12660:	cmp	r2, #0
   12664:	beq	1268c <__assert_fail@plt+0x1540>
   12668:	mov	r9, #0
   1266c:	mov	r8, #0
   12670:	mov	r1, #0
   12674:	mov	r2, #0
   12678:	mov	r7, #0
   1267c:	mov	r4, #0
   12680:	str	sl, [sp, #12]
   12684:	mov	r3, r6
   12688:	b	124bc <__assert_fail@plt+0x1370>
   1268c:	cmp	r1, #0
   12690:	beq	12abc <__assert_fail@plt+0x1970>
   12694:	movw	r3, #10960	; 0x2ad0
   12698:	mov	r2, #16
   1269c:	movt	r3, #1
   126a0:	bl	11110 <qsort@plt>
   126a4:	movw	lr, #33488	; 0x82d0
   126a8:	movt	lr, #2
   126ac:	ldr	r8, [lr]
   126b0:	cmp	r8, #0
   126b4:	beq	12770 <__assert_fail@plt+0x1624>
   126b8:	mov	r6, #0
   126bc:	mov	sl, r6
   126c0:	add	r6, r6, #1
   126c4:	cmp	r6, r8
   126c8:	bcs	12758 <__assert_fail@plt+0x160c>
   126cc:	mvn	r0, #-268435455	; 0xf0000001
   126d0:	sub	r9, r0, sl
   126d4:	ldr	r5, [r4]
   126d8:	add	r1, r5, sl, lsl #4
   126dc:	mov	r0, r5
   126e0:	ldr	r7, [r0, r6, lsl #4]!
   126e4:	ldr	r2, [r1, #8]!
   126e8:	ldr	r3, [r1, #4]
   126ec:	ldr	r0, [r0, #4]
   126f0:	subs	r7, r2, r7
   126f4:	sbcs	r0, r3, r0
   126f8:	bcc	12758 <__assert_fail@plt+0x160c>
   126fc:	add	r0, r5, r6, lsl #4
   12700:	ldrd	r4, [r0, #8]
   12704:	subs	r7, r2, r4
   12708:	sbcs	r7, r3, r5
   1270c:	mov	r7, #0
   12710:	movwcc	r7, #1
   12714:	cmp	r7, #0
   12718:	movne	r2, r4
   1271c:	movne	r3, r5
   12720:	movw	r4, #33484	; 0x82cc
   12724:	strd	r2, [r1]
   12728:	add	r2, r9, r8
   1272c:	add	r1, r0, #16
   12730:	movt	r4, #2
   12734:	lsl	r2, r2, #4
   12738:	bl	10ef4 <memmove@plt>
   1273c:	movw	lr, #33488	; 0x82d0
   12740:	movt	lr, #2
   12744:	ldr	r0, [lr]
   12748:	sub	r8, r0, #1
   1274c:	cmp	r6, r8
   12750:	str	r8, [lr]
   12754:	bcc	126d4 <__assert_fail@plt+0x1588>
   12758:	cmp	r6, r8
   1275c:	bcc	126bc <__assert_fail@plt+0x1570>
   12760:	ldr	r0, [sp]
   12764:	tst	r0, #2
   12768:	bne	12780 <__assert_fail@plt+0x1634>
   1276c:	b	12944 <__assert_fail@plt+0x17f8>
   12770:	mov	r8, #0
   12774:	ldr	r0, [sp]
   12778:	tst	r0, #2
   1277c:	beq	12944 <__assert_fail@plt+0x17f8>
   12780:	ldr	r7, [r4]
   12784:	movw	r2, #33156	; 0x8184
   12788:	mov	r0, #0
   1278c:	movt	r2, #2
   12790:	str	r0, [lr]
   12794:	str	r0, [r4]
   12798:	str	r0, [r2, #4]
   1279c:	ldr	r6, [r7]
   127a0:	ldr	r5, [r7, #4]
   127a4:	subs	r1, r6, #2
   127a8:	sbcs	r1, r5, #0
   127ac:	bcc	1280c <__assert_fail@plt+0x16c0>
   127b0:	add	r1, r2, #4
   127b4:	mov	r0, #0
   127b8:	mov	r2, #16
   127bc:	mov	r9, #0
   127c0:	bl	15bd8 <__assert_fail@plt+0x4a8c>
   127c4:	movw	lr, #33488	; 0x82d0
   127c8:	mov	r2, #1
   127cc:	mov	r3, r0
   127d0:	str	r0, [r4]
   127d4:	movt	lr, #2
   127d8:	ldr	r1, [lr]
   127dc:	str	r2, [r3, r1, lsl #4]!
   127e0:	subs	r2, r6, #1
   127e4:	add	ip, r1, #1
   127e8:	sbc	r6, r5, #0
   127ec:	str	r9, [r3, #4]
   127f0:	str	r2, [r3, #8]
   127f4:	str	r6, [r3, #12]
   127f8:	str	ip, [lr]
   127fc:	cmp	r8, #2
   12800:	str	r7, [sp, #16]
   12804:	bcs	1281c <__assert_fail@plt+0x16d0>
   12808:	b	128ac <__assert_fail@plt+0x1760>
   1280c:	mov	ip, #0
   12810:	cmp	r8, #2
   12814:	str	r7, [sp, #16]
   12818:	bcc	128ac <__assert_fail@plt+0x1760>
   1281c:	add	r6, r7, #16
   12820:	sub	r7, r8, #1
   12824:	ldr	r5, [r6, #-8]
   12828:	ldr	r4, [r6, #-4]
   1282c:	ldm	r6, {r2, r3}
   12830:	adds	r9, r5, #1
   12834:	adc	r5, r4, #0
   12838:	eor	r1, r9, r2
   1283c:	eor	r4, r5, r3
   12840:	orrs	r1, r1, r4
   12844:	beq	128a0 <__assert_fail@plt+0x1754>
   12848:	subs	sl, r2, #1
   1284c:	movw	r2, #33156	; 0x8184
   12850:	movt	r2, #2
   12854:	sbc	r4, r3, #0
   12858:	ldr	r1, [r2, #4]
   1285c:	cmp	ip, r1
   12860:	bne	12888 <__assert_fail@plt+0x173c>
   12864:	add	r1, r2, #4
   12868:	mov	r2, #16
   1286c:	bl	15bd8 <__assert_fail@plt+0x4a8c>
   12870:	movw	lr, #33488	; 0x82d0
   12874:	movw	r1, #33484	; 0x82cc
   12878:	movt	lr, #2
   1287c:	movt	r1, #2
   12880:	ldr	ip, [lr]
   12884:	str	r0, [r1]
   12888:	mov	r1, r0
   1288c:	str	r9, [r1, ip, lsl #4]!
   12890:	add	ip, ip, #1
   12894:	stmib	r1, {r5, sl}
   12898:	str	r4, [r1, #12]
   1289c:	str	ip, [lr]
   128a0:	add	r6, r6, #16
   128a4:	subs	r7, r7, #1
   128a8:	bne	12824 <__assert_fail@plt+0x16d8>
   128ac:	ldr	r4, [sp, #16]
   128b0:	mvn	r1, #0
   128b4:	add	r2, r4, r8, lsl #4
   128b8:	ldrd	r2, [r2, #-8]
   128bc:	eor	r7, r3, r1
   128c0:	eor	r6, r2, r1
   128c4:	orrs	r7, r6, r7
   128c8:	beq	12928 <__assert_fail@plt+0x17dc>
   128cc:	adds	r6, r2, #1
   128d0:	movw	r2, #33156	; 0x8184
   128d4:	movt	r2, #2
   128d8:	adc	r5, r3, #0
   128dc:	ldr	r1, [r2, #4]
   128e0:	cmp	ip, r1
   128e4:	bne	1290c <__assert_fail@plt+0x17c0>
   128e8:	add	r1, r2, #4
   128ec:	mov	r2, #16
   128f0:	bl	15bd8 <__assert_fail@plt+0x4a8c>
   128f4:	movw	lr, #33488	; 0x82d0
   128f8:	movw	r1, #33484	; 0x82cc
   128fc:	movt	lr, #2
   12900:	movt	r1, #2
   12904:	ldr	ip, [lr]
   12908:	str	r0, [r1]
   1290c:	str	r6, [r0, ip, lsl #4]!
   12910:	mvn	r1, #0
   12914:	str	r5, [r0, #4]
   12918:	str	r1, [r0, #8]
   1291c:	str	r1, [r0, #12]
   12920:	add	r0, ip, #1
   12924:	str	r0, [lr]
   12928:	mov	r0, r4
   1292c:	bl	12d3c <__assert_fail@plt+0x1bf0>
   12930:	movw	lr, #33488	; 0x82d0
   12934:	movw	r4, #33484	; 0x82cc
   12938:	movt	lr, #2
   1293c:	movt	r4, #2
   12940:	ldr	r8, [lr]
   12944:	ldr	r0, [r4]
   12948:	add	r1, r8, #1
   1294c:	mov	r5, r4
   12950:	mov	r4, lr
   12954:	str	r1, [lr]
   12958:	lsl	r1, r1, #4
   1295c:	bl	15a74 <__assert_fail@plt+0x4928>
   12960:	ldr	r1, [r4]
   12964:	str	r0, [r5]
   12968:	add	r0, r0, r1, lsl #4
   1296c:	mvn	r1, #0
   12970:	str	r1, [r0, #-16]
   12974:	str	r1, [r0, #-12]
   12978:	str	r1, [r0, #-8]
   1297c:	str	r1, [r0, #-4]
   12980:	sub	sp, fp, #28
   12984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12988:	movw	r0, #28721	; 0x7031
   1298c:	movw	r1, #28676	; 0x7004
   12990:	movt	r0, #1
   12994:	movt	r1, #1
   12998:	b	12a24 <__assert_fail@plt+0x18d8>
   1299c:	movw	r1, #28807	; 0x7087
   129a0:	mov	r0, r6
   129a4:	movt	r1, #1
   129a8:	bl	11140 <strspn@plt>
   129ac:	mov	r1, r0
   129b0:	mov	r0, r6
   129b4:	bl	15f04 <__assert_fail@plt+0x4db8>
   129b8:	ldr	r2, [sp]
   129bc:	movw	r1, #28818	; 0x7092
   129c0:	mov	r5, r0
   129c4:	movw	r0, #28856	; 0x70b8
   129c8:	movt	r0, #1
   129cc:	movt	r1, #1
   129d0:	tst	r2, #4
   129d4:	mov	r2, #5
   129d8:	moveq	r1, r0
   129dc:	mov	r0, #0
   129e0:	bl	10f54 <dcgettext@plt>
   129e4:	mov	r4, r0
   129e8:	mov	r0, r5
   129ec:	bl	15354 <__assert_fail@plt+0x4208>
   129f0:	mov	r3, r0
   129f4:	mov	r0, #0
   129f8:	mov	r1, #0
   129fc:	mov	r2, r4
   12a00:	bl	10fcc <error@plt>
   12a04:	mov	r0, r5
   12a08:	bl	12d3c <__assert_fail@plt+0x1bf0>
   12a0c:	mov	r0, #1
   12a10:	bl	11248 <__assert_fail@plt+0xfc>
   12a14:	movw	r0, #28656	; 0x6ff0
   12a18:	movw	r1, #28624	; 0x6fd0
   12a1c:	movt	r0, #1
   12a20:	movt	r1, #1
   12a24:	ldr	r2, [sp]
   12a28:	tst	r2, #4
   12a2c:	moveq	r1, r0
   12a30:	b	12a98 <__assert_fail@plt+0x194c>
   12a34:	movw	r1, #28748	; 0x704c
   12a38:	movt	r1, #1
   12a3c:	b	12a98 <__assert_fail@plt+0x194c>
   12a40:	ldr	r2, [sp]
   12a44:	movw	r0, #28920	; 0x70f8
   12a48:	movw	r1, #28885	; 0x70d5
   12a4c:	movt	r0, #1
   12a50:	movt	r1, #1
   12a54:	tst	r2, #4
   12a58:	mov	r2, #5
   12a5c:	moveq	r1, r0
   12a60:	mov	r0, #0
   12a64:	bl	10f54 <dcgettext@plt>
   12a68:	mov	r4, r0
   12a6c:	ldr	r0, [sp, #16]
   12a70:	bl	15354 <__assert_fail@plt+0x4208>
   12a74:	mov	r3, r0
   12a78:	mov	r0, #0
   12a7c:	mov	r1, #0
   12a80:	mov	r2, r4
   12a84:	bl	10fcc <error@plt>
   12a88:	mov	r0, #1
   12a8c:	bl	11248 <__assert_fail@plt+0xfc>
   12a90:	movw	r1, #28782	; 0x706e
   12a94:	movt	r1, #1
   12a98:	mov	r0, #0
   12a9c:	mov	r2, #5
   12aa0:	bl	10f54 <dcgettext@plt>
   12aa4:	mov	r2, r0
   12aa8:	mov	r0, #0
   12aac:	mov	r1, #0
   12ab0:	bl	10fcc <error@plt>
   12ab4:	mov	r0, #1
   12ab8:	bl	11248 <__assert_fail@plt+0xfc>
   12abc:	movw	r0, #28984	; 0x7138
   12ac0:	movw	r1, #28943	; 0x710f
   12ac4:	movt	r0, #1
   12ac8:	movt	r1, #1
   12acc:	b	12a24 <__assert_fail@plt+0x18d8>
   12ad0:	ldr	r2, [r0]
   12ad4:	ldr	r1, [r1]
   12ad8:	mov	r0, #0
   12adc:	cmp	r2, r1
   12ae0:	movwgt	r0, #1
   12ae4:	mvnlt	r0, #0
   12ae8:	bx	lr
   12aec:	movw	r1, #33164	; 0x818c
   12af0:	movt	r1, #2
   12af4:	str	r0, [r1, #4]
   12af8:	bx	lr
   12afc:	movw	r1, #33164	; 0x818c
   12b00:	movt	r1, #2
   12b04:	strb	r0, [r1]
   12b08:	bx	lr
   12b0c:	push	{r4, r5, r6, sl, fp, lr}
   12b10:	add	fp, sp, #16
   12b14:	sub	sp, sp, #8
   12b18:	movw	r0, #33116	; 0x815c
   12b1c:	movt	r0, #2
   12b20:	ldr	r0, [r0]
   12b24:	bl	160a8 <__assert_fail@plt+0x4f5c>
   12b28:	cmp	r0, #0
   12b2c:	beq	12b54 <__assert_fail@plt+0x1a08>
   12b30:	movw	r5, #33164	; 0x818c
   12b34:	movt	r5, #2
   12b38:	ldrb	r0, [r5]
   12b3c:	cmp	r0, #0
   12b40:	beq	12b80 <__assert_fail@plt+0x1a34>
   12b44:	bl	11044 <__errno_location@plt>
   12b48:	ldr	r0, [r0]
   12b4c:	cmp	r0, #32
   12b50:	bne	12b80 <__assert_fail@plt+0x1a34>
   12b54:	movw	r0, #33104	; 0x8150
   12b58:	movt	r0, #2
   12b5c:	ldr	r0, [r0]
   12b60:	bl	160a8 <__assert_fail@plt+0x4f5c>
   12b64:	cmp	r0, #0
   12b68:	subeq	sp, fp, #16
   12b6c:	popeq	{r4, r5, r6, sl, fp, pc}
   12b70:	movw	r0, #33020	; 0x80fc
   12b74:	movt	r0, #2
   12b78:	ldr	r0, [r0]
   12b7c:	bl	10f18 <_exit@plt>
   12b80:	movw	r1, #29022	; 0x715e
   12b84:	mov	r0, #0
   12b88:	mov	r2, #5
   12b8c:	movt	r1, #1
   12b90:	bl	10f54 <dcgettext@plt>
   12b94:	ldr	r6, [r5, #4]
   12b98:	mov	r4, r0
   12b9c:	bl	11044 <__errno_location@plt>
   12ba0:	ldr	r5, [r0]
   12ba4:	cmp	r6, #0
   12ba8:	bne	12bc4 <__assert_fail@plt+0x1a78>
   12bac:	movw	r2, #29038	; 0x716e
   12bb0:	mov	r0, #0
   12bb4:	mov	r1, r5
   12bb8:	mov	r3, r4
   12bbc:	movt	r2, #1
   12bc0:	b	12be4 <__assert_fail@plt+0x1a98>
   12bc4:	mov	r0, r6
   12bc8:	bl	14fcc <__assert_fail@plt+0x3e80>
   12bcc:	movw	r2, #29034	; 0x716a
   12bd0:	mov	r3, r0
   12bd4:	str	r4, [sp]
   12bd8:	mov	r0, #0
   12bdc:	mov	r1, r5
   12be0:	movt	r2, #1
   12be4:	bl	10fcc <error@plt>
   12be8:	movw	r0, #33020	; 0x80fc
   12bec:	movt	r0, #2
   12bf0:	ldr	r0, [r0]
   12bf4:	bl	10f18 <_exit@plt>
   12bf8:	b	10edc <posix_fadvise64@plt>
   12bfc:	cmp	r0, #0
   12c00:	bxeq	lr
   12c04:	push	{r4, sl, fp, lr}
   12c08:	add	fp, sp, #8
   12c0c:	sub	sp, sp, #16
   12c10:	mov	r4, r1
   12c14:	bl	11080 <fileno@plt>
   12c18:	mov	r1, #0
   12c1c:	mov	r2, #0
   12c20:	mov	r3, #0
   12c24:	str	r1, [sp]
   12c28:	stmib	sp, {r1, r4}
   12c2c:	bl	10edc <posix_fadvise64@plt>
   12c30:	sub	sp, fp, #8
   12c34:	pop	{r4, sl, fp, pc}
   12c38:	push	{r4, r5, r6, sl, fp, lr}
   12c3c:	add	fp, sp, #16
   12c40:	sub	sp, sp, #8
   12c44:	mov	r4, r0
   12c48:	bl	11080 <fileno@plt>
   12c4c:	cmn	r0, #1
   12c50:	ble	12cc4 <__assert_fail@plt+0x1b78>
   12c54:	mov	r0, r4
   12c58:	bl	10ff0 <__freading@plt>
   12c5c:	cmp	r0, #0
   12c60:	beq	12c8c <__assert_fail@plt+0x1b40>
   12c64:	mov	r0, r4
   12c68:	bl	11080 <fileno@plt>
   12c6c:	mov	r1, #1
   12c70:	mov	r2, #0
   12c74:	mov	r3, #0
   12c78:	str	r1, [sp]
   12c7c:	bl	10f90 <lseek64@plt>
   12c80:	and	r0, r0, r1
   12c84:	cmn	r0, #1
   12c88:	beq	12cc4 <__assert_fail@plt+0x1b78>
   12c8c:	mov	r0, r4
   12c90:	bl	12cd4 <__assert_fail@plt+0x1b88>
   12c94:	cmp	r0, #0
   12c98:	beq	12cc4 <__assert_fail@plt+0x1b78>
   12c9c:	bl	11044 <__errno_location@plt>
   12ca0:	ldr	r6, [r0]
   12ca4:	mov	r5, r0
   12ca8:	mov	r0, r4
   12cac:	bl	110a4 <fclose@plt>
   12cb0:	cmp	r6, #0
   12cb4:	strne	r6, [r5]
   12cb8:	mvnne	r0, #0
   12cbc:	sub	sp, fp, #16
   12cc0:	pop	{r4, r5, r6, sl, fp, pc}
   12cc4:	mov	r0, r4
   12cc8:	sub	sp, fp, #16
   12ccc:	pop	{r4, r5, r6, sl, fp, lr}
   12cd0:	b	110a4 <fclose@plt>
   12cd4:	push	{r4, sl, fp, lr}
   12cd8:	add	fp, sp, #8
   12cdc:	sub	sp, sp, #8
   12ce0:	mov	r4, r0
   12ce4:	cmp	r0, #0
   12ce8:	beq	12d04 <__assert_fail@plt+0x1bb8>
   12cec:	mov	r0, r4
   12cf0:	bl	10ff0 <__freading@plt>
   12cf4:	cmp	r0, #0
   12cf8:	ldrbne	r0, [r4, #1]
   12cfc:	tstne	r0, #1
   12d00:	bne	12d14 <__assert_fail@plt+0x1bc8>
   12d04:	mov	r0, r4
   12d08:	sub	sp, fp, #8
   12d0c:	pop	{r4, sl, fp, lr}
   12d10:	b	10ee8 <fflush@plt>
   12d14:	mov	r0, #1
   12d18:	mov	r2, #0
   12d1c:	mov	r3, #0
   12d20:	str	r0, [sp]
   12d24:	mov	r0, r4
   12d28:	bl	12d64 <__assert_fail@plt+0x1c18>
   12d2c:	mov	r0, r4
   12d30:	sub	sp, fp, #8
   12d34:	pop	{r4, sl, fp, lr}
   12d38:	b	10ee8 <fflush@plt>
   12d3c:	push	{r4, r5, r6, sl, fp, lr}
   12d40:	add	fp, sp, #16
   12d44:	mov	r4, r0
   12d48:	bl	11044 <__errno_location@plt>
   12d4c:	ldr	r6, [r0]
   12d50:	mov	r5, r0
   12d54:	mov	r0, r4
   12d58:	bl	10f00 <free@plt>
   12d5c:	str	r6, [r5]
   12d60:	pop	{r4, r5, r6, sl, fp, pc}
   12d64:	push	{r4, r5, r6, r7, fp, lr}
   12d68:	add	fp, sp, #16
   12d6c:	sub	sp, sp, #8
   12d70:	mov	r4, r0
   12d74:	ldr	r0, [r0, #4]
   12d78:	mov	r5, r3
   12d7c:	mov	r6, r2
   12d80:	ldr	r1, [r4, #8]
   12d84:	cmp	r1, r0
   12d88:	bne	12da4 <__assert_fail@plt+0x1c58>
   12d8c:	ldrd	r0, [r4, #16]
   12d90:	cmp	r1, r0
   12d94:	bne	12da4 <__assert_fail@plt+0x1c58>
   12d98:	ldr	r0, [r4, #36]	; 0x24
   12d9c:	cmp	r0, #0
   12da0:	beq	12dbc <__assert_fail@plt+0x1c70>
   12da4:	mov	r0, r4
   12da8:	mov	r2, r6
   12dac:	mov	r3, r5
   12db0:	sub	sp, fp, #16
   12db4:	pop	{r4, r5, r6, r7, fp, lr}
   12db8:	b	110b0 <fseeko64@plt>
   12dbc:	ldr	r7, [fp, #8]
   12dc0:	mov	r0, r4
   12dc4:	bl	11080 <fileno@plt>
   12dc8:	mov	r2, r6
   12dcc:	mov	r3, r5
   12dd0:	str	r7, [sp]
   12dd4:	bl	10f90 <lseek64@plt>
   12dd8:	and	r2, r0, r1
   12ddc:	cmn	r2, #1
   12de0:	mvneq	r0, #0
   12de4:	subeq	sp, fp, #16
   12de8:	popeq	{r4, r5, r6, r7, fp, pc}
   12dec:	strd	r0, [r4, #80]	; 0x50
   12df0:	ldr	r0, [r4]
   12df4:	bic	r0, r0, #16
   12df8:	str	r0, [r4]
   12dfc:	mov	r0, #0
   12e00:	sub	sp, fp, #16
   12e04:	pop	{r4, r5, r6, r7, fp, pc}
   12e08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e0c:	add	fp, sp, #28
   12e10:	sub	sp, sp, #44	; 0x2c
   12e14:	mov	r5, r0
   12e18:	ldr	r0, [r0]
   12e1c:	mov	r7, r3
   12e20:	mov	r6, r2
   12e24:	mov	r4, r1
   12e28:	cmp	r0, #0
   12e2c:	beq	12e38 <__assert_fail@plt+0x1cec>
   12e30:	ldr	r8, [r4]
   12e34:	b	12e54 <__assert_fail@plt+0x1d08>
   12e38:	cmp	r7, #64	; 0x40
   12e3c:	mov	r8, r7
   12e40:	movcs	r8, #64	; 0x40
   12e44:	mov	r0, r8
   12e48:	bl	16024 <__assert_fail@plt+0x4ed8>
   12e4c:	cmp	r0, #0
   12e50:	beq	12e94 <__assert_fail@plt+0x1d48>
   12e54:	cmp	r8, r6
   12e58:	str	r0, [sp, #32]
   12e5c:	str	r5, [sp, #8]
   12e60:	str	r4, [sp, #12]
   12e64:	bcc	12e80 <__assert_fail@plt+0x1d34>
   12e68:	sub	r9, r8, r6
   12e6c:	cmp	r8, r7
   12e70:	str	r6, [sp, #20]
   12e74:	bcc	12ea0 <__assert_fail@plt+0x1d54>
   12e78:	cmp	r9, #0
   12e7c:	bne	12ea0 <__assert_fail@plt+0x1d54>
   12e80:	ldr	r0, [sp, #8]
   12e84:	ldr	r1, [sp, #32]
   12e88:	str	r1, [r0]
   12e8c:	ldr	r0, [sp, #12]
   12e90:	str	r8, [r0]
   12e94:	mvn	r0, #0
   12e98:	sub	sp, fp, #28
   12e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea0:	ldr	r0, [fp, #12]
   12ea4:	ldr	r2, [fp, #8]
   12ea8:	ldr	r5, [fp, #16]
   12eac:	str	r7, [sp, #4]
   12eb0:	cmn	r0, #1
   12eb4:	mov	r1, r0
   12eb8:	moveq	r1, r2
   12ebc:	cmn	r2, #1
   12ec0:	moveq	r1, r0
   12ec4:	moveq	r2, r0
   12ec8:	ldr	r0, [sp, #32]
   12ecc:	str	r1, [sp, #24]
   12ed0:	ldr	r1, [sp, #20]
   12ed4:	cmn	r2, #1
   12ed8:	str	r2, [sp, #16]
   12edc:	add	r0, r0, r1
   12ee0:	str	r0, [sp, #36]	; 0x24
   12ee4:	eor	r0, r1, #-2147483648	; 0x80000000
   12ee8:	str	r0, [sp]
   12eec:	beq	130dc <__assert_fail@plt+0x1f90>
   12ef0:	mov	r0, r5
   12ef4:	sub	r1, fp, #32
   12ef8:	bl	1612c <__assert_fail@plt+0x4fe0>
   12efc:	mov	r4, r0
   12f00:	cmp	r0, #0
   12f04:	beq	12f3c <__assert_fail@plt+0x1df0>
   12f08:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12f0c:	ldr	r1, [sp, #16]
   12f10:	ldr	r2, [sp, #24]
   12f14:	mov	r0, r4
   12f18:	mov	r3, sl
   12f1c:	bl	132f0 <__assert_fail@plt+0x21a4>
   12f20:	cmp	r0, #0
   12f24:	beq	12f84 <__assert_fail@plt+0x1e38>
   12f28:	rsb	r1, r4, #1
   12f2c:	add	sl, r1, r0
   12f30:	mov	r0, #1
   12f34:	str	sl, [fp, #-32]	; 0xffffffe0
   12f38:	b	12f88 <__assert_fail@plt+0x1e3c>
   12f3c:	ldmib	r5, {r0, r1}
   12f40:	cmp	r0, r1
   12f44:	bcs	130c4 <__assert_fail@plt+0x1f78>
   12f48:	add	r1, r0, #1
   12f4c:	str	r1, [r5, #4]
   12f50:	ldrb	r6, [r0]
   12f54:	ldr	r0, [sp, #24]
   12f58:	ldr	r1, [sp, #16]
   12f5c:	mov	sl, #1
   12f60:	str	sl, [fp, #-32]	; 0xffffffe0
   12f64:	sub	r0, r6, r0
   12f68:	sub	r1, r6, r1
   12f6c:	clz	r0, r0
   12f70:	clz	r1, r1
   12f74:	lsr	r0, r0, #5
   12f78:	lsr	r1, r1, #5
   12f7c:	orr	r0, r1, r0
   12f80:	b	12f88 <__assert_fail@plt+0x1e3c>
   12f84:	mov	r0, #0
   12f88:	cmp	r8, r7
   12f8c:	str	r0, [sp, #28]
   12f90:	addcc	r0, sl, #1
   12f94:	cmpcc	r9, r0
   12f98:	bcc	12fb0 <__assert_fail@plt+0x1e64>
   12f9c:	cmp	r9, #2
   12fa0:	bcs	13048 <__assert_fail@plt+0x1efc>
   12fa4:	cmp	r4, #0
   12fa8:	bne	130a0 <__assert_fail@plt+0x1f54>
   12fac:	b	130b4 <__assert_fail@plt+0x1f68>
   12fb0:	mov	sl, r6
   12fb4:	ldr	r6, [sp, #32]
   12fb8:	ldr	r2, [sp, #36]	; 0x24
   12fbc:	lsl	r1, r8, #1
   12fc0:	cmp	r8, #64	; 0x40
   12fc4:	mov	r3, r7
   12fc8:	addcc	r1, r8, #64	; 0x40
   12fcc:	sub	r7, r2, r6
   12fd0:	sub	r2, r1, r7
   12fd4:	cmp	r2, r0
   12fd8:	addcc	r1, r0, r7
   12fdc:	ldr	r0, [sp, #20]
   12fe0:	cmp	r1, r3
   12fe4:	mov	r5, r1
   12fe8:	movhi	r5, r3
   12fec:	cmp	r8, r1
   12ff0:	movcs	r5, r3
   12ff4:	sub	r0, r5, r0
   12ff8:	cmn	r0, #1
   12ffc:	bgt	1300c <__assert_fail@plt+0x1ec0>
   13000:	ldr	r5, [sp]
   13004:	cmp	r8, r5
   13008:	beq	132e8 <__assert_fail@plt+0x219c>
   1300c:	mov	r0, r6
   13010:	mov	r1, r5
   13014:	bl	16054 <__assert_fail@plt+0x4f08>
   13018:	cmp	r0, #0
   1301c:	beq	132e0 <__assert_fail@plt+0x2194>
   13020:	add	r1, r0, r7
   13024:	sub	r9, r5, r7
   13028:	mov	r8, r5
   1302c:	ldr	r7, [sp, #4]
   13030:	ldr	r5, [fp, #16]
   13034:	mov	r6, sl
   13038:	str	r0, [sp, #32]
   1303c:	str	r1, [sp, #36]	; 0x24
   13040:	cmp	r9, #2
   13044:	bcc	12fa4 <__assert_fail@plt+0x1e58>
   13048:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1304c:	sub	r5, r9, #1
   13050:	mov	sl, r7
   13054:	cmp	r0, r5
   13058:	movcc	r5, r0
   1305c:	cmp	r4, #0
   13060:	beq	1307c <__assert_fail@plt+0x1f30>
   13064:	ldr	r7, [sp, #36]	; 0x24
   13068:	mov	r1, r4
   1306c:	mov	r2, r5
   13070:	mov	r0, r7
   13074:	bl	10f24 <memcpy@plt>
   13078:	b	13084 <__assert_fail@plt+0x1f38>
   1307c:	ldr	r7, [sp, #36]	; 0x24
   13080:	strb	r6, [r7]
   13084:	add	r7, r7, r5
   13088:	sub	r9, r9, r5
   1308c:	ldr	r5, [fp, #16]
   13090:	str	r7, [sp, #36]	; 0x24
   13094:	mov	r7, sl
   13098:	cmp	r4, #0
   1309c:	beq	130b4 <__assert_fail@plt+0x1f68>
   130a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   130a4:	mov	r0, r5
   130a8:	bl	16160 <__assert_fail@plt+0x5014>
   130ac:	cmp	r0, #0
   130b0:	bne	12e80 <__assert_fail@plt+0x1d34>
   130b4:	ldr	r0, [sp, #28]
   130b8:	cmp	r0, #0
   130bc:	beq	12ef0 <__assert_fail@plt+0x1da4>
   130c0:	b	132a4 <__assert_fail@plt+0x2158>
   130c4:	mov	r0, r5
   130c8:	bl	110bc <__uflow@plt>
   130cc:	mov	r6, r0
   130d0:	cmn	r0, #1
   130d4:	bne	12f54 <__assert_fail@plt+0x1e08>
   130d8:	b	13294 <__assert_fail@plt+0x2148>
   130dc:	mov	r0, r5
   130e0:	sub	r1, fp, #32
   130e4:	bl	1612c <__assert_fail@plt+0x4fe0>
   130e8:	mov	sl, r0
   130ec:	cmp	r0, #0
   130f0:	beq	13100 <__assert_fail@plt+0x1fb4>
   130f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   130f8:	mov	r4, #0
   130fc:	b	13140 <__assert_fail@plt+0x1ff4>
   13100:	ldmib	r5, {r0, r1}
   13104:	cmp	r0, r1
   13108:	bcs	13280 <__assert_fail@plt+0x2134>
   1310c:	add	r1, r0, #1
   13110:	str	r1, [r5, #4]
   13114:	ldrb	r6, [r0]
   13118:	ldr	r1, [sp, #24]
   1311c:	add	r2, r6, #1
   13120:	mov	r0, #1
   13124:	clz	r2, r2
   13128:	str	r0, [fp, #-32]	; 0xffffffe0
   1312c:	lsr	r2, r2, #5
   13130:	sub	r1, r6, r1
   13134:	clz	r1, r1
   13138:	lsr	r1, r1, #5
   1313c:	orr	r4, r2, r1
   13140:	cmp	r8, r7
   13144:	str	r4, [sp, #28]
   13148:	addcc	r0, r0, #1
   1314c:	cmpcc	r9, r0
   13150:	bcc	13168 <__assert_fail@plt+0x201c>
   13154:	cmp	r9, #2
   13158:	bcs	13204 <__assert_fail@plt+0x20b8>
   1315c:	cmp	sl, #0
   13160:	bne	13260 <__assert_fail@plt+0x2114>
   13164:	b	13274 <__assert_fail@plt+0x2128>
   13168:	mov	r4, r6
   1316c:	ldr	r6, [sp, #32]
   13170:	ldr	r2, [sp, #36]	; 0x24
   13174:	lsl	r1, r8, #1
   13178:	cmp	r8, #64	; 0x40
   1317c:	addcc	r1, r8, #64	; 0x40
   13180:	sub	r5, r2, r6
   13184:	sub	r2, r1, r5
   13188:	cmp	r2, r0
   1318c:	addcc	r1, r0, r5
   13190:	mov	r0, r7
   13194:	cmp	r1, r7
   13198:	mov	r7, r1
   1319c:	movhi	r7, r0
   131a0:	cmp	r8, r1
   131a4:	movcs	r7, r0
   131a8:	ldr	r0, [sp, #20]
   131ac:	sub	r0, r7, r0
   131b0:	cmn	r0, #1
   131b4:	bgt	131c4 <__assert_fail@plt+0x2078>
   131b8:	ldr	r7, [sp]
   131bc:	cmp	r8, r7
   131c0:	beq	132e8 <__assert_fail@plt+0x219c>
   131c4:	mov	r0, r6
   131c8:	mov	r1, r7
   131cc:	bl	16054 <__assert_fail@plt+0x4f08>
   131d0:	cmp	r0, #0
   131d4:	beq	132e0 <__assert_fail@plt+0x2194>
   131d8:	add	r1, r0, r5
   131dc:	sub	r9, r7, r5
   131e0:	mov	r8, r7
   131e4:	mov	r6, r4
   131e8:	ldr	r7, [sp, #4]
   131ec:	ldr	r5, [fp, #16]
   131f0:	ldr	r4, [sp, #28]
   131f4:	str	r0, [sp, #32]
   131f8:	str	r1, [sp, #36]	; 0x24
   131fc:	cmp	r9, #2
   13200:	bcc	1315c <__assert_fail@plt+0x2010>
   13204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13208:	sub	r5, r9, #1
   1320c:	mov	r4, r7
   13210:	cmp	r0, r5
   13214:	movcc	r5, r0
   13218:	cmp	sl, #0
   1321c:	beq	13238 <__assert_fail@plt+0x20ec>
   13220:	ldr	r7, [sp, #36]	; 0x24
   13224:	mov	r1, sl
   13228:	mov	r2, r5
   1322c:	mov	r0, r7
   13230:	bl	10f24 <memcpy@plt>
   13234:	b	13240 <__assert_fail@plt+0x20f4>
   13238:	ldr	r7, [sp, #36]	; 0x24
   1323c:	strb	r6, [r7]
   13240:	add	r7, r7, r5
   13244:	sub	r9, r9, r5
   13248:	ldr	r5, [fp, #16]
   1324c:	str	r7, [sp, #36]	; 0x24
   13250:	mov	r7, r4
   13254:	ldr	r4, [sp, #28]
   13258:	cmp	sl, #0
   1325c:	beq	13274 <__assert_fail@plt+0x2128>
   13260:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13264:	mov	r0, r5
   13268:	bl	16160 <__assert_fail@plt+0x5014>
   1326c:	cmp	r0, #0
   13270:	bne	12e80 <__assert_fail@plt+0x1d34>
   13274:	cmp	r4, #0
   13278:	beq	130dc <__assert_fail@plt+0x1f90>
   1327c:	b	132a4 <__assert_fail@plt+0x2158>
   13280:	mov	r0, r5
   13284:	bl	110bc <__uflow@plt>
   13288:	mov	r6, r0
   1328c:	cmn	r0, #1
   13290:	bne	13118 <__assert_fail@plt+0x1fcc>
   13294:	ldr	r0, [sp, #32]
   13298:	ldr	r1, [sp, #36]	; 0x24
   1329c:	cmp	r1, r0
   132a0:	beq	12e80 <__assert_fail@plt+0x1d34>
   132a4:	ldr	r2, [sp, #32]
   132a8:	ldr	r0, [sp, #20]
   132ac:	ldr	r3, [sp, #36]	; 0x24
   132b0:	mov	r1, #0
   132b4:	add	r0, r2, r0
   132b8:	strb	r1, [r3], -r0
   132bc:	ldr	r0, [sp, #8]
   132c0:	cmp	r3, #0
   132c4:	mvneq	r3, #0
   132c8:	str	r2, [r0]
   132cc:	ldr	r0, [sp, #12]
   132d0:	str	r8, [r0]
   132d4:	mov	r0, r3
   132d8:	sub	sp, fp, #28
   132dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132e0:	str	r6, [sp, #32]
   132e4:	b	12e80 <__assert_fail@plt+0x1d34>
   132e8:	ldr	r8, [sp]
   132ec:	b	12e80 <__assert_fail@plt+0x1d34>
   132f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   132f4:	add	fp, sp, #24
   132f8:	uxtb	ip, r2
   132fc:	uxtb	r1, r1
   13300:	cmp	r1, ip
   13304:	bne	13314 <__assert_fail@plt+0x21c8>
   13308:	mov	r2, r3
   1330c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   13310:	b	11098 <memchr@plt>
   13314:	cmp	r3, #0
   13318:	beq	13340 <__assert_fail@plt+0x21f4>
   1331c:	ands	r2, r0, #3
   13320:	beq	13340 <__assert_fail@plt+0x21f4>
   13324:	ldrb	r2, [r0]
   13328:	cmp	r1, r2
   1332c:	cmpne	ip, r2
   13330:	beq	133d4 <__assert_fail@plt+0x2288>
   13334:	subs	r3, r3, #1
   13338:	add	r0, r0, #1
   1333c:	bne	1331c <__assert_fail@plt+0x21d0>
   13340:	cmp	r3, #4
   13344:	bcc	133ac <__assert_fail@plt+0x2260>
   13348:	orr	r2, ip, ip, lsl #8
   1334c:	movw	r4, #32896	; 0x8080
   13350:	movw	r9, #65279	; 0xfeff
   13354:	orr	lr, r2, r2, lsl #16
   13358:	orr	r2, r1, r1, lsl #8
   1335c:	movt	r4, #32896	; 0x8080
   13360:	movt	r9, #65278	; 0xfefe
   13364:	orr	r8, r2, r2, lsl #16
   13368:	mov	r6, r0
   1336c:	ldr	r7, [r6], #4
   13370:	eor	r2, r7, lr
   13374:	eor	r5, r2, r4
   13378:	add	r2, r2, r9
   1337c:	and	r2, r2, r5
   13380:	eor	r5, r7, r8
   13384:	eor	r7, r5, r4
   13388:	add	r5, r5, r9
   1338c:	and	r5, r5, r7
   13390:	orr	r2, r5, r2
   13394:	ands	r2, r2, r4
   13398:	subeq	r3, r3, #4
   1339c:	moveq	r0, r6
   133a0:	bne	133ac <__assert_fail@plt+0x2260>
   133a4:	cmp	r3, #3
   133a8:	bhi	13368 <__assert_fail@plt+0x221c>
   133ac:	cmp	r3, #0
   133b0:	beq	133d0 <__assert_fail@plt+0x2284>
   133b4:	ldrb	r2, [r0]
   133b8:	cmp	r1, r2
   133bc:	cmpne	ip, r2
   133c0:	beq	133d4 <__assert_fail@plt+0x2288>
   133c4:	add	r0, r0, #1
   133c8:	subs	r3, r3, #1
   133cc:	bne	133b4 <__assert_fail@plt+0x2268>
   133d0:	mov	r0, #0
   133d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   133d8:	push	{r4, r5, fp, lr}
   133dc:	add	fp, sp, #8
   133e0:	cmp	r0, #0
   133e4:	beq	13478 <__assert_fail@plt+0x232c>
   133e8:	mov	r1, #47	; 0x2f
   133ec:	mov	r4, r0
   133f0:	bl	110e0 <strrchr@plt>
   133f4:	cmp	r0, #0
   133f8:	mov	r5, r4
   133fc:	addne	r5, r0, #1
   13400:	sub	r0, r5, r4
   13404:	cmp	r0, #7
   13408:	blt	1345c <__assert_fail@plt+0x2310>
   1340c:	movw	r1, #29097	; 0x71a9
   13410:	sub	r0, r5, #7
   13414:	mov	r2, #7
   13418:	movt	r1, #1
   1341c:	bl	11128 <strncmp@plt>
   13420:	cmp	r0, #0
   13424:	bne	1345c <__assert_fail@plt+0x2310>
   13428:	movw	r1, #29105	; 0x71b1
   1342c:	mov	r0, r5
   13430:	mov	r2, #3
   13434:	movt	r1, #1
   13438:	bl	11128 <strncmp@plt>
   1343c:	cmp	r0, #0
   13440:	beq	1344c <__assert_fail@plt+0x2300>
   13444:	mov	r4, r5
   13448:	b	1345c <__assert_fail@plt+0x2310>
   1344c:	movw	r0, #33088	; 0x8140
   13450:	add	r4, r5, #3
   13454:	movt	r0, #2
   13458:	str	r4, [r0]
   1345c:	movw	r0, #33092	; 0x8144
   13460:	movt	r0, #2
   13464:	str	r4, [r0]
   13468:	movw	r0, #33172	; 0x8194
   1346c:	movt	r0, #2
   13470:	str	r4, [r0]
   13474:	pop	{r4, r5, fp, pc}
   13478:	movw	r0, #33104	; 0x8150
   1347c:	mov	r1, #55	; 0x37
   13480:	mov	r2, #1
   13484:	movt	r0, #2
   13488:	ldr	r3, [r0]
   1348c:	movw	r0, #29041	; 0x7171
   13490:	movt	r0, #1
   13494:	bl	10f84 <fwrite@plt>
   13498:	bl	11134 <abort@plt>
   1349c:	push	{r4, r5, r6, sl, fp, lr}
   134a0:	add	fp, sp, #16
   134a4:	mov	r4, r0
   134a8:	movw	r0, #33176	; 0x8198
   134ac:	movt	r0, #2
   134b0:	cmp	r4, #0
   134b4:	moveq	r4, r0
   134b8:	bl	11044 <__errno_location@plt>
   134bc:	ldr	r6, [r0]
   134c0:	mov	r5, r0
   134c4:	mov	r0, r4
   134c8:	mov	r1, #48	; 0x30
   134cc:	bl	15e8c <__assert_fail@plt+0x4d40>
   134d0:	str	r6, [r5]
   134d4:	pop	{r4, r5, r6, sl, fp, pc}
   134d8:	movw	r1, #33176	; 0x8198
   134dc:	cmp	r0, #0
   134e0:	movt	r1, #2
   134e4:	movne	r1, r0
   134e8:	ldr	r0, [r1]
   134ec:	bx	lr
   134f0:	movw	r2, #33176	; 0x8198
   134f4:	cmp	r0, #0
   134f8:	movt	r2, #2
   134fc:	movne	r2, r0
   13500:	str	r1, [r2]
   13504:	bx	lr
   13508:	movw	r3, #33176	; 0x8198
   1350c:	cmp	r0, #0
   13510:	movt	r3, #2
   13514:	movne	r3, r0
   13518:	ubfx	r0, r1, #5, #3
   1351c:	and	r1, r1, #31
   13520:	add	r0, r3, r0, lsl #2
   13524:	ldr	r3, [r0, #8]
   13528:	eor	r2, r2, r3, lsr r1
   1352c:	and	r2, r2, #1
   13530:	eor	r2, r3, r2, lsl r1
   13534:	str	r2, [r0, #8]
   13538:	mov	r0, #1
   1353c:	and	r0, r0, r3, lsr r1
   13540:	bx	lr
   13544:	movw	r2, #33176	; 0x8198
   13548:	cmp	r0, #0
   1354c:	movt	r2, #2
   13550:	movne	r2, r0
   13554:	ldr	r0, [r2, #4]
   13558:	str	r1, [r2, #4]
   1355c:	bx	lr
   13560:	movw	r3, #33176	; 0x8198
   13564:	cmp	r0, #0
   13568:	movt	r3, #2
   1356c:	movne	r3, r0
   13570:	cmp	r1, #0
   13574:	mov	r0, #10
   13578:	cmpne	r2, #0
   1357c:	str	r0, [r3]
   13580:	bne	13590 <__assert_fail@plt+0x2444>
   13584:	push	{fp, lr}
   13588:	mov	fp, sp
   1358c:	bl	11134 <abort@plt>
   13590:	str	r1, [r3, #40]	; 0x28
   13594:	str	r2, [r3, #44]	; 0x2c
   13598:	bx	lr
   1359c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a0:	add	fp, sp, #28
   135a4:	sub	sp, sp, #20
   135a8:	mov	r7, r0
   135ac:	ldr	r0, [fp, #8]
   135b0:	movw	r5, #33176	; 0x8198
   135b4:	mov	r8, r3
   135b8:	mov	r9, r2
   135bc:	mov	sl, r1
   135c0:	movt	r5, #2
   135c4:	cmp	r0, #0
   135c8:	movne	r5, r0
   135cc:	bl	11044 <__errno_location@plt>
   135d0:	mov	r4, r0
   135d4:	ldm	r5, {r0, r1}
   135d8:	ldr	r2, [r5, #40]	; 0x28
   135dc:	ldr	r3, [r5, #44]	; 0x2c
   135e0:	add	r5, r5, #8
   135e4:	ldr	r6, [r4]
   135e8:	stm	sp, {r0, r1, r5}
   135ec:	str	r2, [sp, #12]
   135f0:	str	r3, [sp, #16]
   135f4:	mov	r0, r7
   135f8:	mov	r1, sl
   135fc:	mov	r2, r9
   13600:	mov	r3, r8
   13604:	bl	13614 <__assert_fail@plt+0x24c8>
   13608:	str	r6, [r4]
   1360c:	sub	sp, fp, #28
   13610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13618:	add	fp, sp, #28
   1361c:	sub	sp, sp, #156	; 0x9c
   13620:	str	r0, [sp, #76]	; 0x4c
   13624:	ldr	r0, [fp, #12]
   13628:	mov	r6, r1
   1362c:	str	r3, [sp, #84]	; 0x54
   13630:	str	r2, [fp, #-84]	; 0xffffffac
   13634:	and	r1, r0, #4
   13638:	str	r1, [sp, #24]
   1363c:	and	r1, r0, #1
   13640:	str	r1, [sp, #28]
   13644:	ubfx	r8, r0, #1, #1
   13648:	bl	10f9c <__ctype_get_mb_cur_max@plt>
   1364c:	str	r0, [sp, #32]
   13650:	ldr	r0, [fp, #24]
   13654:	ldr	r7, [fp, #8]
   13658:	mov	r1, #0
   1365c:	mov	r2, #0
   13660:	mov	r4, #1
   13664:	str	r1, [sp, #52]	; 0x34
   13668:	str	r0, [sp, #72]	; 0x48
   1366c:	ldr	r0, [fp, #20]
   13670:	str	r0, [sp, #68]	; 0x44
   13674:	mov	r0, #0
   13678:	str	r0, [sp, #48]	; 0x30
   1367c:	mov	r0, #0
   13680:	str	r0, [sp, #92]	; 0x5c
   13684:	mov	r0, #0
   13688:	str	r0, [fp, #-76]	; 0xffffffb4
   1368c:	mov	r0, #0
   13690:	cmp	r7, #10
   13694:	bhi	1497c <__assert_fail@plt+0x3830>
   13698:	add	r1, pc, #28
   1369c:	mov	sl, r6
   136a0:	ldr	r6, [sp, #76]	; 0x4c
   136a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   136a8:	ldr	lr, [sp, #84]	; 0x54
   136ac:	mov	r9, #0
   136b0:	mov	r3, #1
   136b4:	mov	r5, #0
   136b8:	ldr	pc, [r1, r7, lsl #2]
   136bc:	andeq	r3, r1, ip, lsl #15
   136c0:	andeq	r3, r1, r8, asr #15
   136c4:	muleq	r1, ip, r7
   136c8:	andeq	r3, r1, r4, lsl #15
   136cc:			; <UNDEFINED> instruction: 0x000137bc
   136d0:	strdeq	r3, [r1], -r0
   136d4:	andeq	r3, r1, ip, lsr #15
   136d8:	strdeq	r3, [r1], -ip
   136dc:	andeq	r3, r1, r8, ror #13
   136e0:	andeq	r3, r1, r8, ror #13
   136e4:	muleq	r1, r0, r9
   136e8:	mov	r9, r4
   136ec:	movw	r4, #29187	; 0x7203
   136f0:	mov	r5, r8
   136f4:	mov	r8, r2
   136f8:	mov	r0, #0
   136fc:	mov	r2, #5
   13700:	movt	r4, #1
   13704:	mov	r1, r4
   13708:	bl	10f54 <dcgettext@plt>
   1370c:	cmp	r0, r4
   13710:	str	r0, [sp, #68]	; 0x44
   13714:	bne	138a4 <__assert_fail@plt+0x2758>
   13718:	bl	162b4 <__assert_fail@plt+0x5168>
   1371c:	ldrb	r1, [r0]
   13720:	and	r1, r1, #223	; 0xdf
   13724:	cmp	r1, #71	; 0x47
   13728:	beq	13870 <__assert_fail@plt+0x2724>
   1372c:	cmp	r1, #85	; 0x55
   13730:	bne	13888 <__assert_fail@plt+0x273c>
   13734:	ldrb	r1, [r0, #1]
   13738:	and	r1, r1, #223	; 0xdf
   1373c:	cmp	r1, #84	; 0x54
   13740:	bne	13888 <__assert_fail@plt+0x273c>
   13744:	ldrb	r1, [r0, #2]
   13748:	and	r1, r1, #223	; 0xdf
   1374c:	cmp	r1, #70	; 0x46
   13750:	bne	13888 <__assert_fail@plt+0x273c>
   13754:	ldrb	r1, [r0, #3]
   13758:	cmp	r1, #45	; 0x2d
   1375c:	ldrbeq	r1, [r0, #4]
   13760:	cmpeq	r1, #56	; 0x38
   13764:	bne	13888 <__assert_fail@plt+0x273c>
   13768:	ldrb	r0, [r0, #5]
   1376c:	cmp	r0, #0
   13770:	movw	r0, #29191	; 0x7207
   13774:	movt	r0, #1
   13778:	str	r0, [sp, #68]	; 0x44
   1377c:	bne	13888 <__assert_fail@plt+0x273c>
   13780:	b	138a4 <__assert_fail@plt+0x2758>
   13784:	mov	r0, #1
   13788:	b	137c8 <__assert_fail@plt+0x267c>
   1378c:	mov	r7, #0
   13790:	mov	r9, #0
   13794:	mov	r3, r0
   13798:	b	13868 <__assert_fail@plt+0x271c>
   1379c:	tst	r8, #1
   137a0:	bne	137c8 <__assert_fail@plt+0x267c>
   137a4:	mov	r3, r0
   137a8:	b	13820 <__assert_fail@plt+0x26d4>
   137ac:	mov	r0, #1
   137b0:	mov	r9, #0
   137b4:	mov	r7, #5
   137b8:	b	13804 <__assert_fail@plt+0x26b8>
   137bc:	mov	r3, #1
   137c0:	tst	r8, #1
   137c4:	beq	13820 <__assert_fail@plt+0x26d4>
   137c8:	mov	r1, #1
   137cc:	mov	r9, #0
   137d0:	mov	r7, #2
   137d4:	mov	r3, r0
   137d8:	mov	r5, #1
   137dc:	str	r1, [fp, #-76]	; 0xffffffb4
   137e0:	movw	r1, #29189	; 0x7205
   137e4:	movt	r1, #1
   137e8:	str	r1, [sp, #92]	; 0x5c
   137ec:	b	139fc <__assert_fail@plt+0x28b0>
   137f0:	mov	r7, #5
   137f4:	tst	r8, #1
   137f8:	beq	13840 <__assert_fail@plt+0x26f4>
   137fc:	mov	r0, #1
   13800:	mov	r9, #0
   13804:	str	r0, [fp, #-76]	; 0xffffffb4
   13808:	movw	r0, #29185	; 0x7201
   1380c:	mov	r3, #1
   13810:	mov	r5, #1
   13814:	movt	r0, #1
   13818:	str	r0, [sp, #92]	; 0x5c
   1381c:	b	139fc <__assert_fail@plt+0x28b0>
   13820:	cmp	sl, #0
   13824:	mov	r9, #1
   13828:	mov	r7, #2
   1382c:	movne	r0, #39	; 0x27
   13830:	strbne	r0, [r6]
   13834:	movw	r0, #29189	; 0x7205
   13838:	movt	r0, #1
   1383c:	b	1385c <__assert_fail@plt+0x2710>
   13840:	cmp	sl, #0
   13844:	mov	r9, #1
   13848:	mov	r3, #1
   1384c:	movne	r0, #34	; 0x22
   13850:	strbne	r0, [r6]
   13854:	movw	r0, #29185	; 0x7201
   13858:	movt	r0, #1
   1385c:	str	r0, [sp, #92]	; 0x5c
   13860:	mov	r0, #1
   13864:	str	r0, [fp, #-76]	; 0xffffffb4
   13868:	mov	r5, #0
   1386c:	b	139fc <__assert_fail@plt+0x28b0>
   13870:	ldrb	r1, [r0, #1]
   13874:	and	r1, r1, #223	; 0xdf
   13878:	cmp	r1, #66	; 0x42
   1387c:	ldrbeq	r1, [r0, #2]
   13880:	cmpeq	r1, #49	; 0x31
   13884:	beq	147a4 <__assert_fail@plt+0x3658>
   13888:	movw	r0, #29189	; 0x7205
   1388c:	movw	r1, #29185	; 0x7201
   13890:	cmp	r7, #9
   13894:	movt	r0, #1
   13898:	movt	r1, #1
   1389c:	moveq	r0, r1
   138a0:	str	r0, [sp, #68]	; 0x44
   138a4:	movw	r4, #29189	; 0x7205
   138a8:	mov	r0, #0
   138ac:	mov	r2, #5
   138b0:	movt	r4, #1
   138b4:	mov	r1, r4
   138b8:	bl	10f54 <dcgettext@plt>
   138bc:	cmp	r0, r4
   138c0:	str	r0, [sp, #72]	; 0x48
   138c4:	beq	138d4 <__assert_fail@plt+0x2788>
   138c8:	mov	r4, r9
   138cc:	mov	r2, r8
   138d0:	b	1398c <__assert_fail@plt+0x2840>
   138d4:	bl	162b4 <__assert_fail@plt+0x5168>
   138d8:	ldrb	r1, [r0]
   138dc:	mov	r4, r9
   138e0:	and	r1, r1, #223	; 0xdf
   138e4:	cmp	r1, #71	; 0x47
   138e8:	beq	13944 <__assert_fail@plt+0x27f8>
   138ec:	cmp	r1, #85	; 0x55
   138f0:	mov	r2, r8
   138f4:	bne	1396c <__assert_fail@plt+0x2820>
   138f8:	ldrb	r1, [r0, #1]
   138fc:	and	r1, r1, #223	; 0xdf
   13900:	cmp	r1, #84	; 0x54
   13904:	bne	1396c <__assert_fail@plt+0x2820>
   13908:	ldrb	r1, [r0, #2]
   1390c:	and	r1, r1, #223	; 0xdf
   13910:	cmp	r1, #70	; 0x46
   13914:	ldrbeq	r1, [r0, #3]
   13918:	cmpeq	r1, #45	; 0x2d
   1391c:	bne	1396c <__assert_fail@plt+0x2820>
   13920:	ldrb	r1, [r0, #4]
   13924:	cmp	r1, #56	; 0x38
   13928:	ldrbeq	r0, [r0, #5]
   1392c:	cmpeq	r0, #0
   13930:	bne	1396c <__assert_fail@plt+0x2820>
   13934:	movw	r0, #29195	; 0x720b
   13938:	movt	r0, #1
   1393c:	str	r0, [sp, #72]	; 0x48
   13940:	b	1398c <__assert_fail@plt+0x2840>
   13944:	ldrb	r1, [r0, #1]
   13948:	mov	r2, r8
   1394c:	and	r1, r1, #223	; 0xdf
   13950:	cmp	r1, #66	; 0x42
   13954:	bne	1396c <__assert_fail@plt+0x2820>
   13958:	ldrb	r1, [r0, #2]
   1395c:	cmp	r1, #49	; 0x31
   13960:	ldrbeq	r1, [r0, #3]
   13964:	cmpeq	r1, #56	; 0x38
   13968:	beq	147e8 <__assert_fail@plt+0x369c>
   1396c:	movw	r0, #29189	; 0x7205
   13970:	cmp	r7, #9
   13974:	movt	r0, #1
   13978:	mov	r1, r0
   1397c:	movw	r0, #29185	; 0x7201
   13980:	movt	r0, #1
   13984:	moveq	r1, r0
   13988:	str	r1, [sp, #72]	; 0x48
   1398c:	mov	r8, r5
   13990:	mov	r9, #0
   13994:	tst	r8, #1
   13998:	mov	r5, r8
   1399c:	str	r2, [fp, #-48]	; 0xffffffd0
   139a0:	bne	139d8 <__assert_fail@plt+0x288c>
   139a4:	ldr	r0, [sp, #68]	; 0x44
   139a8:	ldrb	r0, [r0]
   139ac:	cmp	r0, #0
   139b0:	beq	139d8 <__assert_fail@plt+0x288c>
   139b4:	ldr	r1, [sp, #68]	; 0x44
   139b8:	mov	r9, #0
   139bc:	add	r1, r1, #1
   139c0:	cmp	r9, sl
   139c4:	strbcc	r0, [r6, r9]
   139c8:	ldrb	r0, [r1, r9]
   139cc:	add	r9, r9, #1
   139d0:	cmp	r0, #0
   139d4:	bne	139c0 <__assert_fail@plt+0x2874>
   139d8:	ldr	r8, [sp, #72]	; 0x48
   139dc:	mov	r0, r8
   139e0:	bl	1102c <strlen@plt>
   139e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139e8:	ldr	lr, [sp, #84]	; 0x54
   139ec:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139f0:	str	r0, [fp, #-76]	; 0xffffffb4
   139f4:	str	r8, [sp, #92]	; 0x5c
   139f8:	mov	r3, #1
   139fc:	ldr	r0, [fp, #16]
   13a00:	str	r7, [fp, #-64]	; 0xffffffc0
   13a04:	str	r5, [fp, #-72]	; 0xffffffb8
   13a08:	str	r3, [sp, #80]	; 0x50
   13a0c:	cmp	r0, #0
   13a10:	movwne	r0, #1
   13a14:	and	r0, r0, r5
   13a18:	str	r0, [fp, #-88]	; 0xffffffa8
   13a1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13a20:	cmp	r0, #0
   13a24:	movwne	r0, #1
   13a28:	subs	r7, r7, #2
   13a2c:	and	r1, r0, r5
   13a30:	str	r7, [fp, #-80]	; 0xffffffb0
   13a34:	and	r1, r3, r1
   13a38:	str	r1, [sp, #40]	; 0x28
   13a3c:	clz	r1, r7
   13a40:	lsr	r1, r1, #5
   13a44:	and	r1, r1, r5
   13a48:	eor	r5, r5, #1
   13a4c:	str	r1, [sp, #36]	; 0x24
   13a50:	mov	r1, r7
   13a54:	str	r5, [sp, #88]	; 0x58
   13a58:	mov	r7, #0
   13a5c:	movwne	r1, #1
   13a60:	orr	r5, r1, r5
   13a64:	and	r1, r1, r3
   13a68:	and	r0, r0, r1
   13a6c:	str	r5, [sp, #60]	; 0x3c
   13a70:	str	r1, [fp, #-68]	; 0xffffffbc
   13a74:	str	r0, [fp, #-60]	; 0xffffffc4
   13a78:	eor	r0, r3, #1
   13a7c:	str	r0, [sp, #44]	; 0x2c
   13a80:	cmn	lr, #1
   13a84:	beq	13a94 <__assert_fail@plt+0x2948>
   13a88:	cmp	r7, lr
   13a8c:	bne	13aa0 <__assert_fail@plt+0x2954>
   13a90:	b	14718 <__assert_fail@plt+0x35cc>
   13a94:	ldrb	r0, [ip, r7]
   13a98:	cmp	r0, #0
   13a9c:	beq	14720 <__assert_fail@plt+0x35d4>
   13aa0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13aa4:	mov	r8, #0
   13aa8:	str	r4, [fp, #-52]	; 0xffffffcc
   13aac:	str	r2, [fp, #-48]	; 0xffffffd0
   13ab0:	cmp	r0, #0
   13ab4:	beq	13ae8 <__assert_fail@plt+0x299c>
   13ab8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13abc:	add	r4, r7, r0
   13ac0:	cmp	r0, #2
   13ac4:	bcc	13ae0 <__assert_fail@plt+0x2994>
   13ac8:	cmn	lr, #1
   13acc:	bne	13ae0 <__assert_fail@plt+0x2994>
   13ad0:	mov	r0, ip
   13ad4:	bl	1102c <strlen@plt>
   13ad8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13adc:	mov	lr, r0
   13ae0:	cmp	r4, lr
   13ae4:	bls	13b00 <__assert_fail@plt+0x29b4>
   13ae8:	mov	r0, #0
   13aec:	str	r0, [fp, #-56]	; 0xffffffc8
   13af0:	ldrb	r5, [ip, r7]
   13af4:	cmp	r5, #126	; 0x7e
   13af8:	bls	13b50 <__assert_fail@plt+0x2a04>
   13afc:	b	13f58 <__assert_fail@plt+0x2e0c>
   13b00:	ldr	r1, [sp, #92]	; 0x5c
   13b04:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b08:	add	r0, ip, r7
   13b0c:	mov	r4, lr
   13b10:	bl	10f48 <memcmp@plt>
   13b14:	ldr	r2, [sp, #88]	; 0x58
   13b18:	cmp	r0, #0
   13b1c:	mov	r1, r0
   13b20:	movwne	r1, #1
   13b24:	orr	r1, r1, r2
   13b28:	tst	r1, #1
   13b2c:	beq	1482c <__assert_fail@plt+0x36e0>
   13b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   13b34:	clz	r0, r0
   13b38:	mov	lr, r4
   13b3c:	lsr	r0, r0, #5
   13b40:	str	r0, [fp, #-56]	; 0xffffffc8
   13b44:	ldrb	r5, [ip, r7]
   13b48:	cmp	r5, #126	; 0x7e
   13b4c:	bhi	13f58 <__assert_fail@plt+0x2e0c>
   13b50:	add	r3, pc, #16
   13b54:	mov	r4, #1
   13b58:	mov	r2, #110	; 0x6e
   13b5c:	mov	r0, #97	; 0x61
   13b60:	mov	r1, #0
   13b64:	ldr	pc, [r3, r5, lsl #2]
   13b68:	andeq	r3, r1, r8, lsr lr
   13b6c:	andeq	r3, r1, r8, asr pc
   13b70:	andeq	r3, r1, r8, asr pc
   13b74:	andeq	r3, r1, r8, asr pc
   13b78:	andeq	r3, r1, r8, asr pc
   13b7c:	andeq	r3, r1, r8, asr pc
   13b80:	andeq	r3, r1, r8, asr pc
   13b84:	andeq	r4, r1, r4, lsr r0
   13b88:	andeq	r3, r1, r8, lsl lr
   13b8c:	andeq	r3, r1, r0, lsl #28
   13b90:	andeq	r3, r1, r4, lsr #28
   13b94:			; <UNDEFINED> instruction: 0x00013eb4
   13b98:	strdeq	r3, [r1], -r8
   13b9c:	andeq	r3, r1, r0, lsr #28
   13ba0:	andeq	r3, r1, r8, asr pc
   13ba4:	andeq	r3, r1, r8, asr pc
   13ba8:	andeq	r3, r1, r8, asr pc
   13bac:	andeq	r3, r1, r8, asr pc
   13bb0:	andeq	r3, r1, r8, asr pc
   13bb4:	andeq	r3, r1, r8, asr pc
   13bb8:	andeq	r3, r1, r8, asr pc
   13bbc:	andeq	r3, r1, r8, asr pc
   13bc0:	andeq	r3, r1, r8, asr pc
   13bc4:	andeq	r3, r1, r8, asr pc
   13bc8:	andeq	r3, r1, r8, asr pc
   13bcc:	andeq	r3, r1, r8, asr pc
   13bd0:	andeq	r3, r1, r8, asr pc
   13bd4:	andeq	r3, r1, r8, asr pc
   13bd8:	andeq	r3, r1, r8, asr pc
   13bdc:	andeq	r3, r1, r8, asr pc
   13be0:	andeq	r3, r1, r8, asr pc
   13be4:	andeq	r3, r1, r8, asr pc
   13be8:			; <UNDEFINED> instruction: 0x00013fb0
   13bec:			; <UNDEFINED> instruction: 0x00013fb4
   13bf0:			; <UNDEFINED> instruction: 0x00013fb4
   13bf4:	andeq	r3, r1, r4, lsl #27
   13bf8:			; <UNDEFINED> instruction: 0x00013fb4
   13bfc:	andeq	r3, r1, r4, ror #26
   13c00:			; <UNDEFINED> instruction: 0x00013fb4
   13c04:			; <UNDEFINED> instruction: 0x00013ebc
   13c08:			; <UNDEFINED> instruction: 0x00013fb4
   13c0c:			; <UNDEFINED> instruction: 0x00013fb4
   13c10:			; <UNDEFINED> instruction: 0x00013fb4
   13c14:	andeq	r3, r1, r4, ror #26
   13c18:	andeq	r3, r1, r4, ror #26
   13c1c:	andeq	r3, r1, r4, ror #26
   13c20:	andeq	r3, r1, r4, ror #26
   13c24:	andeq	r3, r1, r4, ror #26
   13c28:	andeq	r3, r1, r4, ror #26
   13c2c:	andeq	r3, r1, r4, ror #26
   13c30:	andeq	r3, r1, r4, ror #26
   13c34:	andeq	r3, r1, r4, ror #26
   13c38:	andeq	r3, r1, r4, ror #26
   13c3c:	andeq	r3, r1, r4, ror #26
   13c40:	andeq	r3, r1, r4, ror #26
   13c44:	andeq	r3, r1, r4, ror #26
   13c48:	andeq	r3, r1, r4, ror #26
   13c4c:	andeq	r3, r1, r4, ror #26
   13c50:	andeq	r3, r1, r4, ror #26
   13c54:			; <UNDEFINED> instruction: 0x00013fb4
   13c58:			; <UNDEFINED> instruction: 0x00013fb4
   13c5c:			; <UNDEFINED> instruction: 0x00013fb4
   13c60:			; <UNDEFINED> instruction: 0x00013fb4
   13c64:	andeq	r3, r1, r8, ror lr
   13c68:	andeq	r3, r1, r8, asr pc
   13c6c:	andeq	r3, r1, r4, ror #26
   13c70:	andeq	r3, r1, r4, ror #26
   13c74:	andeq	r3, r1, r4, ror #26
   13c78:	andeq	r3, r1, r4, ror #26
   13c7c:	andeq	r3, r1, r4, ror #26
   13c80:	andeq	r3, r1, r4, ror #26
   13c84:	andeq	r3, r1, r4, ror #26
   13c88:	andeq	r3, r1, r4, ror #26
   13c8c:	andeq	r3, r1, r4, ror #26
   13c90:	andeq	r3, r1, r4, ror #26
   13c94:	andeq	r3, r1, r4, ror #26
   13c98:	andeq	r3, r1, r4, ror #26
   13c9c:	andeq	r3, r1, r4, ror #26
   13ca0:	andeq	r3, r1, r4, ror #26
   13ca4:	andeq	r3, r1, r4, ror #26
   13ca8:	andeq	r3, r1, r4, ror #26
   13cac:	andeq	r3, r1, r4, ror #26
   13cb0:	andeq	r3, r1, r4, ror #26
   13cb4:	andeq	r3, r1, r4, ror #26
   13cb8:	andeq	r3, r1, r4, ror #26
   13cbc:	andeq	r3, r1, r4, ror #26
   13cc0:	andeq	r3, r1, r4, ror #26
   13cc4:	andeq	r3, r1, r4, ror #26
   13cc8:	andeq	r3, r1, r4, ror #26
   13ccc:	andeq	r3, r1, r4, ror #26
   13cd0:	andeq	r3, r1, r4, ror #26
   13cd4:			; <UNDEFINED> instruction: 0x00013fb4
   13cd8:	andeq	r3, r1, r4, asr #27
   13cdc:	andeq	r3, r1, r4, ror #26
   13ce0:			; <UNDEFINED> instruction: 0x00013fb4
   13ce4:	andeq	r3, r1, r4, ror #26
   13ce8:			; <UNDEFINED> instruction: 0x00013fb4
   13cec:	andeq	r3, r1, r4, ror #26
   13cf0:	andeq	r3, r1, r4, ror #26
   13cf4:	andeq	r3, r1, r4, ror #26
   13cf8:	andeq	r3, r1, r4, ror #26
   13cfc:	andeq	r3, r1, r4, ror #26
   13d00:	andeq	r3, r1, r4, ror #26
   13d04:	andeq	r3, r1, r4, ror #26
   13d08:	andeq	r3, r1, r4, ror #26
   13d0c:	andeq	r3, r1, r4, ror #26
   13d10:	andeq	r3, r1, r4, ror #26
   13d14:	andeq	r3, r1, r4, ror #26
   13d18:	andeq	r3, r1, r4, ror #26
   13d1c:	andeq	r3, r1, r4, ror #26
   13d20:	andeq	r3, r1, r4, ror #26
   13d24:	andeq	r3, r1, r4, ror #26
   13d28:	andeq	r3, r1, r4, ror #26
   13d2c:	andeq	r3, r1, r4, ror #26
   13d30:	andeq	r3, r1, r4, ror #26
   13d34:	andeq	r3, r1, r4, ror #26
   13d38:	andeq	r3, r1, r4, ror #26
   13d3c:	andeq	r3, r1, r4, ror #26
   13d40:	andeq	r3, r1, r4, ror #26
   13d44:	andeq	r3, r1, r4, ror #26
   13d48:	andeq	r3, r1, r4, ror #26
   13d4c:	andeq	r3, r1, r4, ror #26
   13d50:	andeq	r3, r1, r4, ror #26
   13d54:	andeq	r3, r1, r4, lsr #27
   13d58:			; <UNDEFINED> instruction: 0x00013fb4
   13d5c:	andeq	r3, r1, r4, lsr #27
   13d60:	andeq	r3, r1, r4, lsl #27
   13d64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d68:	cmp	r0, #0
   13d6c:	beq	14048 <__assert_fail@plt+0x2efc>
   13d70:	ldr	r0, [fp, #16]
   13d74:	cmp	r0, #0
   13d78:	mov	r0, r5
   13d7c:	bne	14058 <__assert_fail@plt+0x2f0c>
   13d80:	b	14078 <__assert_fail@plt+0x2f2c>
   13d84:	mov	r4, #0
   13d88:	cmp	r7, #0
   13d8c:	beq	13fb0 <__assert_fail@plt+0x2e64>
   13d90:	mov	r8, #0
   13d94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d98:	cmp	r0, #0
   13d9c:	bne	13d70 <__assert_fail@plt+0x2c24>
   13da0:	b	14048 <__assert_fail@plt+0x2efc>
   13da4:	mov	r4, #0
   13da8:	cmn	lr, #1
   13dac:	beq	13f88 <__assert_fail@plt+0x2e3c>
   13db0:	cmp	r7, #0
   13db4:	bne	13d90 <__assert_fail@plt+0x2c44>
   13db8:	cmp	lr, #1
   13dbc:	beq	13fb0 <__assert_fail@plt+0x2e64>
   13dc0:	b	13d90 <__assert_fail@plt+0x2c44>
   13dc4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13dc8:	cmp	r0, #2
   13dcc:	bne	13fe0 <__assert_fail@plt+0x2e94>
   13dd0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13dd4:	tst	r0, #1
   13dd8:	bne	14840 <__assert_fail@plt+0x36f4>
   13ddc:	mov	r8, #0
   13de0:	mov	r0, #92	; 0x5c
   13de4:	mov	r4, #0
   13de8:	cmp	r8, #0
   13dec:	beq	14000 <__assert_fail@plt+0x2eb4>
   13df0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13df4:	b	140f4 <__assert_fail@plt+0x2fa8>
   13df8:	mov	r0, #102	; 0x66
   13dfc:	b	14034 <__assert_fail@plt+0x2ee8>
   13e00:	mov	r2, #116	; 0x74
   13e04:	ldr	r0, [sp, #60]	; 0x3c
   13e08:	tst	r0, #1
   13e0c:	mov	r0, r2
   13e10:	bne	14034 <__assert_fail@plt+0x2ee8>
   13e14:	b	14840 <__assert_fail@plt+0x36f4>
   13e18:	mov	r0, #98	; 0x62
   13e1c:	b	14034 <__assert_fail@plt+0x2ee8>
   13e20:	mov	r2, #114	; 0x72
   13e24:	ldr	r0, [sp, #60]	; 0x3c
   13e28:	tst	r0, #1
   13e2c:	mov	r0, r2
   13e30:	bne	14034 <__assert_fail@plt+0x2ee8>
   13e34:	b	14840 <__assert_fail@plt+0x36f4>
   13e38:	ldr	r0, [sp, #80]	; 0x50
   13e3c:	tst	r0, #1
   13e40:	beq	1411c <__assert_fail@plt+0x2fd0>
   13e44:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e48:	tst	r0, #1
   13e4c:	bne	14968 <__assert_fail@plt+0x381c>
   13e50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e54:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13e58:	cmp	r0, #2
   13e5c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13e60:	movwne	r0, #1
   13e64:	orr	r0, r0, r2
   13e68:	tst	r0, #1
   13e6c:	beq	14414 <__assert_fail@plt+0x32c8>
   13e70:	mov	r0, r9
   13e74:	b	14448 <__assert_fail@plt+0x32fc>
   13e78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e7c:	mov	r8, #0
   13e80:	mov	r5, #63	; 0x3f
   13e84:	cmp	r0, #5
   13e88:	beq	142d0 <__assert_fail@plt+0x3184>
   13e8c:	cmp	r0, #2
   13e90:	bne	14380 <__assert_fail@plt+0x3234>
   13e94:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13e98:	tst	r0, #1
   13e9c:	bne	14840 <__assert_fail@plt+0x36f4>
   13ea0:	mov	r4, #0
   13ea4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ea8:	cmp	r0, #0
   13eac:	bne	13d70 <__assert_fail@plt+0x2c24>
   13eb0:	b	14048 <__assert_fail@plt+0x2efc>
   13eb4:	mov	r0, #118	; 0x76
   13eb8:	b	14034 <__assert_fail@plt+0x2ee8>
   13ebc:	mov	r0, #1
   13ec0:	mov	r5, #39	; 0x27
   13ec4:	str	r0, [sp, #52]	; 0x34
   13ec8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ecc:	cmp	r0, #2
   13ed0:	bne	13f44 <__assert_fail@plt+0x2df8>
   13ed4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ed8:	tst	r0, #1
   13edc:	bne	14840 <__assert_fail@plt+0x36f4>
   13ee0:	ldr	r2, [sp, #48]	; 0x30
   13ee4:	clz	r1, sl
   13ee8:	mov	r8, #0
   13eec:	lsr	r1, r1, #5
   13ef0:	cmp	r2, #0
   13ef4:	mov	r0, r2
   13ef8:	movwne	r0, #1
   13efc:	orrs	r0, r0, r1
   13f00:	moveq	r2, sl
   13f04:	moveq	sl, r0
   13f08:	cmp	r9, sl
   13f0c:	str	r2, [sp, #48]	; 0x30
   13f10:	movcc	r0, #39	; 0x27
   13f14:	strbcc	r0, [r6, r9]
   13f18:	add	r0, r9, #1
   13f1c:	cmp	r0, sl
   13f20:	movcc	r1, #92	; 0x5c
   13f24:	strbcc	r1, [r6, r0]
   13f28:	add	r0, r9, #2
   13f2c:	add	r9, r9, #3
   13f30:	cmp	r0, sl
   13f34:	movcc	r1, #39	; 0x27
   13f38:	strbcc	r1, [r6, r0]
   13f3c:	mov	r0, #0
   13f40:	str	r0, [fp, #-48]	; 0xffffffd0
   13f44:	mov	r4, #1
   13f48:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f4c:	cmp	r0, #0
   13f50:	bne	13d70 <__assert_fail@plt+0x2c24>
   13f54:	b	14048 <__assert_fail@plt+0x2efc>
   13f58:	ldr	r0, [sp, #32]
   13f5c:	cmp	r0, #1
   13f60:	bne	1414c <__assert_fail@plt+0x3000>
   13f64:	str	lr, [sp, #84]	; 0x54
   13f68:	bl	11014 <__ctype_b_loc@plt>
   13f6c:	ldr	r0, [r0]
   13f70:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f74:	mov	r1, #1
   13f78:	add	r0, r0, r5, lsl #1
   13f7c:	ldrb	r0, [r0, #1]
   13f80:	ubfx	r4, r0, #6, #1
   13f84:	b	14544 <__assert_fail@plt+0x33f8>
   13f88:	cmp	r7, #0
   13f8c:	ldrbeq	r0, [ip, #1]
   13f90:	cmpeq	r0, #0
   13f94:	beq	13fb0 <__assert_fail@plt+0x2e64>
   13f98:	mvn	lr, #0
   13f9c:	mov	r8, #0
   13fa0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13fa4:	cmp	r0, #0
   13fa8:	bne	13d70 <__assert_fail@plt+0x2c24>
   13fac:	b	14048 <__assert_fail@plt+0x2efc>
   13fb0:	mov	r1, #1
   13fb4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fb8:	cmp	r0, #2
   13fbc:	bne	13fcc <__assert_fail@plt+0x2e80>
   13fc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13fc4:	tst	r0, #1
   13fc8:	bne	14840 <__assert_fail@plt+0x36f4>
   13fcc:	mov	r4, r1
   13fd0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13fd4:	cmp	r0, #0
   13fd8:	bne	13d70 <__assert_fail@plt+0x2c24>
   13fdc:	b	14048 <__assert_fail@plt+0x2efc>
   13fe0:	ldr	r1, [sp, #40]	; 0x28
   13fe4:	mov	r8, #0
   13fe8:	mov	r0, #92	; 0x5c
   13fec:	cmp	r1, #0
   13ff0:	beq	14034 <__assert_fail@plt+0x2ee8>
   13ff4:	mov	r4, #0
   13ff8:	cmp	r8, #0
   13ffc:	bne	13df0 <__assert_fail@plt+0x2ca4>
   14000:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14004:	tst	r2, #1
   14008:	beq	140f4 <__assert_fail@plt+0x2fa8>
   1400c:	cmp	r9, sl
   14010:	movcc	r1, #39	; 0x27
   14014:	strbcc	r1, [r6, r9]
   14018:	add	r1, r9, #1
   1401c:	add	r9, r9, #2
   14020:	cmp	r1, sl
   14024:	movcc	r2, #39	; 0x27
   14028:	strbcc	r2, [r6, r1]
   1402c:	mov	r2, #0
   14030:	b	140f4 <__assert_fail@plt+0x2fa8>
   14034:	ldr	r1, [sp, #80]	; 0x50
   14038:	mov	r4, #0
   1403c:	mov	r8, #0
   14040:	tst	r1, #1
   14044:	bne	14084 <__assert_fail@plt+0x2f38>
   14048:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1404c:	cmp	r0, #0
   14050:	mov	r0, r5
   14054:	beq	14078 <__assert_fail@plt+0x2f2c>
   14058:	ldr	r1, [fp, #16]
   1405c:	ubfx	r0, r5, #5, #3
   14060:	mov	r2, #1
   14064:	ldr	r0, [r1, r0, lsl #2]
   14068:	and	r1, r5, #31
   1406c:	tst	r0, r2, lsl r1
   14070:	mov	r0, r5
   14074:	bne	14084 <__assert_fail@plt+0x2f38>
   14078:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1407c:	cmp	r1, #0
   14080:	beq	144dc <__assert_fail@plt+0x3390>
   14084:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14088:	tst	r1, #1
   1408c:	bne	14820 <__assert_fail@plt+0x36d4>
   14090:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14094:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14098:	cmp	r1, #2
   1409c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   140a0:	movwne	r1, #1
   140a4:	orr	r1, r1, r2
   140a8:	tst	r1, #1
   140ac:	bne	140e4 <__assert_fail@plt+0x2f98>
   140b0:	cmp	r9, sl
   140b4:	movcc	r1, #39	; 0x27
   140b8:	strbcc	r1, [r6, r9]
   140bc:	add	r1, r9, #1
   140c0:	cmp	r1, sl
   140c4:	movcc	r2, #36	; 0x24
   140c8:	strbcc	r2, [r6, r1]
   140cc:	add	r1, r9, #2
   140d0:	add	r9, r9, #3
   140d4:	cmp	r1, sl
   140d8:	movcc	r2, #39	; 0x27
   140dc:	strbcc	r2, [r6, r1]
   140e0:	mov	r2, #1
   140e4:	cmp	r9, sl
   140e8:	movcc	r1, #92	; 0x5c
   140ec:	strbcc	r1, [r6, r9]
   140f0:	add	r9, r9, #1
   140f4:	cmp	r9, sl
   140f8:	add	r7, r7, #1
   140fc:	strbcc	r0, [r6, r9]
   14100:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14104:	add	r9, r9, #1
   14108:	and	r0, r0, r4
   1410c:	mov	r4, r0
   14110:	cmn	lr, #1
   14114:	bne	13a88 <__assert_fail@plt+0x293c>
   14118:	b	13a94 <__assert_fail@plt+0x2948>
   1411c:	ldr	r0, [sp, #28]
   14120:	mov	r4, #0
   14124:	mov	r8, #0
   14128:	mov	r5, #0
   1412c:	cmp	r0, #0
   14130:	beq	14048 <__assert_fail@plt+0x2efc>
   14134:	ldr	r4, [fp, #-52]	; 0xffffffcc
   14138:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1413c:	add	r7, r7, #1
   14140:	cmn	lr, #1
   14144:	bne	13a88 <__assert_fail@plt+0x293c>
   14148:	b	13a94 <__assert_fail@plt+0x2948>
   1414c:	mov	r0, #0
   14150:	cmn	lr, #1
   14154:	str	r0, [fp, #-36]	; 0xffffffdc
   14158:	str	r0, [fp, #-40]	; 0xffffffd8
   1415c:	bne	14170 <__assert_fail@plt+0x3024>
   14160:	mov	r0, ip
   14164:	bl	1102c <strlen@plt>
   14168:	ldr	ip, [fp, #-84]	; 0xffffffac
   1416c:	mov	lr, r0
   14170:	ldr	r0, [sp, #36]	; 0x24
   14174:	str	sl, [sp, #56]	; 0x38
   14178:	str	lr, [sp, #84]	; 0x54
   1417c:	cmp	r0, #0
   14180:	beq	14398 <__assert_fail@plt+0x324c>
   14184:	add	r0, ip, r7
   14188:	mov	r4, #1
   1418c:	mov	r6, #0
   14190:	sub	sl, fp, #40	; 0x28
   14194:	str	r0, [sp, #20]
   14198:	str	r6, [sp, #64]	; 0x40
   1419c:	add	r6, r6, r7
   141a0:	sub	r0, fp, #44	; 0x2c
   141a4:	mov	r3, sl
   141a8:	add	r1, ip, r6
   141ac:	sub	r2, lr, r6
   141b0:	bl	162ec <__assert_fail@plt+0x51a0>
   141b4:	cmn	r0, #2
   141b8:	beq	144f4 <__assert_fail@plt+0x33a8>
   141bc:	ldr	sl, [sp, #56]	; 0x38
   141c0:	cmn	r0, #1
   141c4:	beq	144e8 <__assert_fail@plt+0x339c>
   141c8:	cmp	r0, #0
   141cc:	beq	144ec <__assert_fail@plt+0x33a0>
   141d0:	cmp	r0, #2
   141d4:	bcc	14294 <__assert_fail@plt+0x3148>
   141d8:	ldr	r1, [sp, #64]	; 0x40
   141dc:	ldr	r2, [sp, #20]
   141e0:	add	r1, r2, r1
   141e4:	mov	r2, #1
   141e8:	ldrb	r3, [r1, r2]
   141ec:	sub	r3, r3, #91	; 0x5b
   141f0:	cmp	r3, #33	; 0x21
   141f4:	bhi	14288 <__assert_fail@plt+0x313c>
   141f8:	add	r6, pc, #0
   141fc:	ldr	pc, [r6, r3, lsl #2]
   14200:	andeq	r4, r1, ip, asr #16
   14204:	andeq	r4, r1, ip, asr #16
   14208:	andeq	r4, r1, r8, lsl #5
   1420c:	andeq	r4, r1, ip, asr #16
   14210:	andeq	r4, r1, r8, lsl #5
   14214:	andeq	r4, r1, ip, asr #16
   14218:	andeq	r4, r1, r8, lsl #5
   1421c:	andeq	r4, r1, r8, lsl #5
   14220:	andeq	r4, r1, r8, lsl #5
   14224:	andeq	r4, r1, r8, lsl #5
   14228:	andeq	r4, r1, r8, lsl #5
   1422c:	andeq	r4, r1, r8, lsl #5
   14230:	andeq	r4, r1, r8, lsl #5
   14234:	andeq	r4, r1, r8, lsl #5
   14238:	andeq	r4, r1, r8, lsl #5
   1423c:	andeq	r4, r1, r8, lsl #5
   14240:	andeq	r4, r1, r8, lsl #5
   14244:	andeq	r4, r1, r8, lsl #5
   14248:	andeq	r4, r1, r8, lsl #5
   1424c:	andeq	r4, r1, r8, lsl #5
   14250:	andeq	r4, r1, r8, lsl #5
   14254:	andeq	r4, r1, r8, lsl #5
   14258:	andeq	r4, r1, r8, lsl #5
   1425c:	andeq	r4, r1, r8, lsl #5
   14260:	andeq	r4, r1, r8, lsl #5
   14264:	andeq	r4, r1, r8, lsl #5
   14268:	andeq	r4, r1, r8, lsl #5
   1426c:	andeq	r4, r1, r8, lsl #5
   14270:	andeq	r4, r1, r8, lsl #5
   14274:	andeq	r4, r1, r8, lsl #5
   14278:	andeq	r4, r1, r8, lsl #5
   1427c:	andeq	r4, r1, r8, lsl #5
   14280:	andeq	r4, r1, r8, lsl #5
   14284:	andeq	r4, r1, ip, asr #16
   14288:	add	r2, r2, #1
   1428c:	cmp	r2, r0
   14290:	bcc	141e8 <__assert_fail@plt+0x309c>
   14294:	ldr	r6, [sp, #64]	; 0x40
   14298:	add	r6, r0, r6
   1429c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   142a0:	bl	10f78 <iswprint@plt>
   142a4:	cmp	r0, #0
   142a8:	sub	sl, fp, #40	; 0x28
   142ac:	movwne	r0, #1
   142b0:	and	r4, r4, r0
   142b4:	mov	r0, sl
   142b8:	bl	10f30 <mbsinit@plt>
   142bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   142c0:	ldr	lr, [sp, #84]	; 0x54
   142c4:	cmp	r0, #0
   142c8:	beq	14198 <__assert_fail@plt+0x304c>
   142cc:	b	14538 <__assert_fail@plt+0x33ec>
   142d0:	ldr	r0, [sp, #24]
   142d4:	cmp	r0, #0
   142d8:	beq	14380 <__assert_fail@plt+0x3234>
   142dc:	add	r0, r7, #2
   142e0:	cmp	r0, lr
   142e4:	bcs	14380 <__assert_fail@plt+0x3234>
   142e8:	add	r1, ip, r7
   142ec:	ldrb	r1, [r1, #1]
   142f0:	cmp	r1, #63	; 0x3f
   142f4:	bne	14380 <__assert_fail@plt+0x3234>
   142f8:	ldrb	r5, [ip, r0]
   142fc:	sub	r1, r5, #33	; 0x21
   14300:	cmp	r1, #29
   14304:	bhi	14380 <__assert_fail@plt+0x3234>
   14308:	movw	r3, #20929	; 0x51c1
   1430c:	mov	r2, #1
   14310:	movt	r3, #14336	; 0x3800
   14314:	tst	r3, r2, lsl r1
   14318:	beq	14380 <__assert_fail@plt+0x3234>
   1431c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14320:	tst	r1, #1
   14324:	bne	14970 <__assert_fail@plt+0x3824>
   14328:	cmp	r9, sl
   1432c:	mov	r7, r0
   14330:	mov	r4, #0
   14334:	movcc	r1, #63	; 0x3f
   14338:	strbcc	r1, [r6, r9]
   1433c:	add	r1, r9, #1
   14340:	cmp	r1, sl
   14344:	movcc	r2, #34	; 0x22
   14348:	strbcc	r2, [r6, r1]
   1434c:	add	r1, r9, #2
   14350:	cmp	r1, sl
   14354:	movcc	r2, #34	; 0x22
   14358:	strbcc	r2, [r6, r1]
   1435c:	add	r1, r9, #3
   14360:	add	r9, r9, #4
   14364:	cmp	r1, sl
   14368:	movcc	r2, #63	; 0x3f
   1436c:	strbcc	r2, [r6, r1]
   14370:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14374:	cmp	r0, #0
   14378:	bne	13d70 <__assert_fail@plt+0x2c24>
   1437c:	b	14048 <__assert_fail@plt+0x2efc>
   14380:	mov	r5, #63	; 0x3f
   14384:	mov	r4, #0
   14388:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1438c:	cmp	r0, #0
   14390:	bne	13d70 <__assert_fail@plt+0x2c24>
   14394:	b	14048 <__assert_fail@plt+0x2efc>
   14398:	mov	r4, #1
   1439c:	mov	r6, #0
   143a0:	sub	sl, fp, #40	; 0x28
   143a4:	str	r6, [sp, #64]	; 0x40
   143a8:	add	r6, r6, r7
   143ac:	sub	r0, fp, #44	; 0x2c
   143b0:	mov	r3, sl
   143b4:	add	r1, ip, r6
   143b8:	sub	r2, lr, r6
   143bc:	bl	162ec <__assert_fail@plt+0x51a0>
   143c0:	cmn	r0, #2
   143c4:	beq	144f4 <__assert_fail@plt+0x33a8>
   143c8:	cmn	r0, #1
   143cc:	beq	144e8 <__assert_fail@plt+0x339c>
   143d0:	ldr	r6, [sp, #64]	; 0x40
   143d4:	cmp	r0, #0
   143d8:	beq	14534 <__assert_fail@plt+0x33e8>
   143dc:	add	r6, r0, r6
   143e0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   143e4:	bl	10f78 <iswprint@plt>
   143e8:	cmp	r0, #0
   143ec:	sub	sl, fp, #40	; 0x28
   143f0:	movwne	r0, #1
   143f4:	and	r4, r4, r0
   143f8:	mov	r0, sl
   143fc:	bl	10f30 <mbsinit@plt>
   14400:	ldr	ip, [fp, #-84]	; 0xffffffac
   14404:	ldr	lr, [sp, #84]	; 0x54
   14408:	cmp	r0, #0
   1440c:	beq	143a4 <__assert_fail@plt+0x3258>
   14410:	b	14538 <__assert_fail@plt+0x33ec>
   14414:	cmp	r9, sl
   14418:	mov	r2, #1
   1441c:	movcc	r0, #39	; 0x27
   14420:	strbcc	r0, [r6, r9]
   14424:	add	r0, r9, #1
   14428:	cmp	r0, sl
   1442c:	movcc	r1, #36	; 0x24
   14430:	strbcc	r1, [r6, r0]
   14434:	add	r0, r9, #2
   14438:	cmp	r0, sl
   1443c:	movcc	r1, #39	; 0x27
   14440:	strbcc	r1, [r6, r0]
   14444:	add	r0, r9, #3
   14448:	cmp	r0, sl
   1444c:	add	r9, r0, #1
   14450:	str	r2, [fp, #-48]	; 0xffffffd0
   14454:	movcc	r1, #92	; 0x5c
   14458:	strbcc	r1, [r6, r0]
   1445c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14460:	cmp	r1, #2
   14464:	beq	144c4 <__assert_fail@plt+0x3378>
   14468:	add	r1, r7, #1
   1446c:	mov	r4, #0
   14470:	mov	r8, #1
   14474:	mov	r5, #48	; 0x30
   14478:	cmp	r1, lr
   1447c:	bcs	13d64 <__assert_fail@plt+0x2c18>
   14480:	ldrb	r1, [ip, r1]
   14484:	sub	r1, r1, #48	; 0x30
   14488:	uxtb	r1, r1
   1448c:	cmp	r1, #9
   14490:	bhi	13d64 <__assert_fail@plt+0x2c18>
   14494:	cmp	r9, sl
   14498:	movcc	r1, #48	; 0x30
   1449c:	strbcc	r1, [r6, r9]
   144a0:	add	r1, r0, #2
   144a4:	add	r9, r0, #3
   144a8:	cmp	r1, sl
   144ac:	movcc	r2, #48	; 0x30
   144b0:	strbcc	r2, [r6, r1]
   144b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144b8:	cmp	r0, #0
   144bc:	bne	13d70 <__assert_fail@plt+0x2c24>
   144c0:	b	14048 <__assert_fail@plt+0x2efc>
   144c4:	mov	r0, #48	; 0x30
   144c8:	mov	r8, #1
   144cc:	mov	r4, #0
   144d0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   144d4:	cmp	r1, #0
   144d8:	bne	14084 <__assert_fail@plt+0x2f38>
   144dc:	cmp	r8, #0
   144e0:	beq	14000 <__assert_fail@plt+0x2eb4>
   144e4:	b	13df0 <__assert_fail@plt+0x2ca4>
   144e8:	mov	r4, #0
   144ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   144f0:	b	1452c <__assert_fail@plt+0x33e0>
   144f4:	ldr	r1, [sp, #84]	; 0x54
   144f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   144fc:	mov	r4, #0
   14500:	cmp	r6, r1
   14504:	bcs	1452c <__assert_fail@plt+0x33e0>
   14508:	ldrb	r0, [ip, r6]
   1450c:	cmp	r0, #0
   14510:	beq	1452c <__assert_fail@plt+0x33e0>
   14514:	ldr	r0, [sp, #64]	; 0x40
   14518:	add	r0, r0, #1
   1451c:	add	r6, r0, r7
   14520:	str	r0, [sp, #64]	; 0x40
   14524:	cmp	r6, r1
   14528:	bcc	14508 <__assert_fail@plt+0x33bc>
   1452c:	ldr	r6, [sp, #64]	; 0x40
   14530:	b	14538 <__assert_fail@plt+0x33ec>
   14534:	ldr	ip, [fp, #-84]	; 0xffffffac
   14538:	mov	r1, r6
   1453c:	ldr	r6, [sp, #76]	; 0x4c
   14540:	ldr	sl, [sp, #56]	; 0x38
   14544:	ldr	r0, [sp, #44]	; 0x2c
   14548:	cmp	r1, #1
   1454c:	orr	r2, r4, r0
   14550:	mov	r0, r1
   14554:	bhi	14574 <__assert_fail@plt+0x3428>
   14558:	tst	r2, #1
   1455c:	beq	14574 <__assert_fail@plt+0x3428>
   14560:	ldr	lr, [sp, #84]	; 0x54
   14564:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14568:	cmp	r0, #0
   1456c:	bne	13d70 <__assert_fail@plt+0x2c24>
   14570:	b	14048 <__assert_fail@plt+0x2efc>
   14574:	str	r2, [sp, #64]	; 0x40
   14578:	add	r0, r0, r7
   1457c:	add	r1, r7, #1
   14580:	ldr	lr, [sp, #84]	; 0x54
   14584:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14588:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1458c:	mov	r3, #0
   14590:	str	r0, [sp, #56]	; 0x38
   14594:	ldr	r0, [sp, #64]	; 0x40
   14598:	tst	r0, #1
   1459c:	bne	14684 <__assert_fail@plt+0x3538>
   145a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   145a4:	tst	r0, #1
   145a8:	bne	14824 <__assert_fail@plt+0x36d8>
   145ac:	ldr	r3, [fp, #-80]	; 0xffffffb0
   145b0:	cmp	r7, #2
   145b4:	movwne	r3, #1
   145b8:	orr	r3, r3, r2
   145bc:	tst	r3, #1
   145c0:	bne	145f8 <__assert_fail@plt+0x34ac>
   145c4:	cmp	r9, sl
   145c8:	add	r3, r9, #1
   145cc:	movcc	r2, #39	; 0x27
   145d0:	strbcc	r2, [r6, r9]
   145d4:	cmp	r3, sl
   145d8:	movcc	r2, #36	; 0x24
   145dc:	strbcc	r2, [r6, r3]
   145e0:	add	r3, r9, #2
   145e4:	add	r9, r9, #3
   145e8:	cmp	r3, sl
   145ec:	movcc	r2, #39	; 0x27
   145f0:	strbcc	r2, [r6, r3]
   145f4:	mov	r2, #1
   145f8:	cmp	r9, sl
   145fc:	mov	r0, r2
   14600:	movcc	r3, #92	; 0x5c
   14604:	strbcc	r3, [r6, r9]
   14608:	add	r3, r9, #1
   1460c:	cmp	r3, sl
   14610:	andcc	r7, r5, #192	; 0xc0
   14614:	movcc	r2, #48	; 0x30
   14618:	orrcc	r7, r2, r7, lsr #6
   1461c:	strbcc	r7, [r6, r3]
   14620:	add	r3, r9, #2
   14624:	add	r9, r9, #3
   14628:	cmp	r3, sl
   1462c:	lsrcc	r7, r5, #3
   14630:	movcc	r2, #6
   14634:	bficc	r7, r2, #3, #29
   14638:	mov	r2, #6
   1463c:	strbcc	r7, [r6, r3]
   14640:	bfi	r5, r2, #3, #29
   14644:	mov	r3, #1
   14648:	mov	r2, r0
   1464c:	ldr	r0, [sp, #56]	; 0x38
   14650:	and	r8, r3, #1
   14654:	cmp	r0, r1
   14658:	bhi	146b8 <__assert_fail@plt+0x356c>
   1465c:	b	146f8 <__assert_fail@plt+0x35ac>
   14660:	cmp	r9, sl
   14664:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14668:	strbcc	r5, [r6, r9]
   1466c:	add	r9, r9, #1
   14670:	ldrb	r5, [ip, r1]
   14674:	add	r1, r1, #1
   14678:	ldr	r0, [sp, #64]	; 0x40
   1467c:	tst	r0, #1
   14680:	beq	145a0 <__assert_fail@plt+0x3454>
   14684:	ldr	r7, [fp, #-56]	; 0xffffffc8
   14688:	tst	r7, #1
   1468c:	beq	146a0 <__assert_fail@plt+0x3554>
   14690:	cmp	r9, sl
   14694:	movcc	r7, #92	; 0x5c
   14698:	strbcc	r7, [r6, r9]
   1469c:	add	r9, r9, #1
   146a0:	mov	r7, #0
   146a4:	str	r7, [fp, #-56]	; 0xffffffc8
   146a8:	ldr	r0, [sp, #56]	; 0x38
   146ac:	and	r8, r3, #1
   146b0:	cmp	r0, r1
   146b4:	bls	146f8 <__assert_fail@plt+0x35ac>
   146b8:	cmp	r8, #0
   146bc:	mvn	r7, r2
   146c0:	movwne	r8, #1
   146c4:	orr	r7, r7, r8
   146c8:	tst	r7, #1
   146cc:	bne	14660 <__assert_fail@plt+0x3514>
   146d0:	cmp	r9, sl
   146d4:	movcc	r7, #39	; 0x27
   146d8:	strbcc	r7, [r6, r9]
   146dc:	add	r7, r9, #1
   146e0:	add	r9, r9, #2
   146e4:	cmp	r7, sl
   146e8:	movcc	r2, #39	; 0x27
   146ec:	strbcc	r2, [r6, r7]
   146f0:	mov	r2, #0
   146f4:	b	14660 <__assert_fail@plt+0x3514>
   146f8:	cmp	r8, #0
   146fc:	sub	r7, r1, #1
   14700:	mov	r0, r5
   14704:	str	r2, [fp, #-48]	; 0xffffffd0
   14708:	movwne	r8, #1
   1470c:	cmp	r8, #0
   14710:	beq	14000 <__assert_fail@plt+0x2eb4>
   14714:	b	13df0 <__assert_fail@plt+0x2ca4>
   14718:	mov	lr, r7
   1471c:	b	14724 <__assert_fail@plt+0x35d8>
   14720:	mvn	lr, #0
   14724:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14728:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1472c:	eor	r0, r7, #2
   14730:	orr	r0, r0, r9
   14734:	clz	r0, r0
   14738:	lsr	r0, r0, #5
   1473c:	tst	r1, r0
   14740:	bne	14840 <__assert_fail@plt+0x36f4>
   14744:	mov	r0, r1
   14748:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1474c:	cmp	r7, #2
   14750:	movwne	r1, #1
   14754:	orr	r0, r0, r1
   14758:	tst	r0, #1
   1475c:	ldreq	r0, [sp, #52]	; 0x34
   14760:	streq	lr, [sp, #84]	; 0x54
   14764:	eoreq	r0, r0, #1
   14768:	tsteq	r0, #1
   1476c:	bne	14904 <__assert_fail@plt+0x37b8>
   14770:	tst	r4, #1
   14774:	bne	148c0 <__assert_fail@plt+0x3774>
   14778:	ldr	r6, [sp, #48]	; 0x30
   1477c:	mov	r8, #0
   14780:	cmp	r6, #0
   14784:	beq	148fc <__assert_fail@plt+0x37b0>
   14788:	ldr	r0, [sp, #80]	; 0x50
   1478c:	mov	r1, #0
   14790:	cmp	sl, #0
   14794:	mov	r4, #0
   14798:	str	r1, [fp, #-72]	; 0xffffffb8
   1479c:	beq	13690 <__assert_fail@plt+0x2544>
   147a0:	b	14904 <__assert_fail@plt+0x37b8>
   147a4:	ldrb	r1, [r0, #3]
   147a8:	cmp	r1, #56	; 0x38
   147ac:	ldrbeq	r1, [r0, #4]
   147b0:	cmpeq	r1, #48	; 0x30
   147b4:	bne	13888 <__assert_fail@plt+0x273c>
   147b8:	ldrb	r1, [r0, #5]
   147bc:	cmp	r1, #51	; 0x33
   147c0:	ldrbeq	r1, [r0, #6]
   147c4:	cmpeq	r1, #48	; 0x30
   147c8:	bne	13888 <__assert_fail@plt+0x273c>
   147cc:	ldrb	r0, [r0, #7]
   147d0:	cmp	r0, #0
   147d4:	movw	r0, #29199	; 0x720f
   147d8:	movt	r0, #1
   147dc:	str	r0, [sp, #68]	; 0x44
   147e0:	bne	13888 <__assert_fail@plt+0x273c>
   147e4:	b	138a4 <__assert_fail@plt+0x2758>
   147e8:	ldrb	r1, [r0, #4]
   147ec:	cmp	r1, #48	; 0x30
   147f0:	ldrbeq	r1, [r0, #5]
   147f4:	cmpeq	r1, #51	; 0x33
   147f8:	bne	1396c <__assert_fail@plt+0x2820>
   147fc:	ldrb	r1, [r0, #6]
   14800:	cmp	r1, #48	; 0x30
   14804:	ldrbeq	r0, [r0, #7]
   14808:	cmpeq	r0, #0
   1480c:	bne	1396c <__assert_fail@plt+0x2820>
   14810:	movw	r0, #29203	; 0x7213
   14814:	movt	r0, #1
   14818:	str	r0, [sp, #72]	; 0x48
   1481c:	b	1398c <__assert_fail@plt+0x2840>
   14820:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14824:	ldr	r2, [sp, #80]	; 0x50
   14828:	b	14860 <__assert_fail@plt+0x3714>
   1482c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14830:	mov	r2, #1
   14834:	mov	lr, r4
   14838:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1483c:	b	14860 <__assert_fail@plt+0x3714>
   14840:	ldr	r2, [sp, #80]	; 0x50
   14844:	mov	r7, #2
   14848:	b	14860 <__assert_fail@plt+0x3714>
   1484c:	ldr	r6, [sp, #76]	; 0x4c
   14850:	ldr	ip, [fp, #-84]	; 0xffffffac
   14854:	ldr	lr, [sp, #84]	; 0x54
   14858:	ldr	r2, [sp, #80]	; 0x50
   1485c:	mov	r7, #2
   14860:	mov	r0, #0
   14864:	ldr	r1, [fp, #12]
   14868:	tst	r2, #1
   1486c:	mov	r2, r7
   14870:	mov	r3, lr
   14874:	str	r0, [sp, #8]
   14878:	ldr	r0, [sp, #68]	; 0x44
   1487c:	movwne	r2, #4
   14880:	cmp	r7, #2
   14884:	movne	r2, r7
   14888:	str	r2, [sp]
   1488c:	mov	r2, ip
   14890:	bic	r1, r1, #2
   14894:	str	r0, [sp, #12]
   14898:	ldr	r0, [sp, #72]	; 0x48
   1489c:	str	r1, [sp, #4]
   148a0:	mov	r1, sl
   148a4:	str	r0, [sp, #16]
   148a8:	mov	r0, r6
   148ac:	bl	13614 <__assert_fail@plt+0x24c8>
   148b0:	mov	r9, r0
   148b4:	mov	r0, r9
   148b8:	sub	sp, fp, #28
   148bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c0:	mov	r0, #5
   148c4:	ldr	r1, [sp, #48]	; 0x30
   148c8:	ldr	r2, [fp, #-84]	; 0xffffffac
   148cc:	ldr	r3, [sp, #84]	; 0x54
   148d0:	str	r0, [sp]
   148d4:	ldr	r0, [fp, #12]
   148d8:	str	r0, [sp, #4]
   148dc:	ldr	r0, [fp, #16]
   148e0:	str	r0, [sp, #8]
   148e4:	ldr	r0, [sp, #68]	; 0x44
   148e8:	str	r0, [sp, #12]
   148ec:	ldr	r0, [sp, #72]	; 0x48
   148f0:	str	r0, [sp, #16]
   148f4:	ldr	r0, [sp, #76]	; 0x4c
   148f8:	b	148ac <__assert_fail@plt+0x3760>
   148fc:	mov	r0, #0
   14900:	str	r0, [fp, #-72]	; 0xffffffb8
   14904:	ldr	r1, [sp, #92]	; 0x5c
   14908:	cmp	r1, #0
   1490c:	beq	1494c <__assert_fail@plt+0x3800>
   14910:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14914:	ldr	r2, [sp, #76]	; 0x4c
   14918:	tst	r0, #1
   1491c:	bne	14950 <__assert_fail@plt+0x3804>
   14920:	ldrb	r0, [r1]
   14924:	cmp	r0, #0
   14928:	beq	14950 <__assert_fail@plt+0x3804>
   1492c:	add	r1, r1, #1
   14930:	cmp	r9, sl
   14934:	strbcc	r0, [r2, r9]
   14938:	add	r9, r9, #1
   1493c:	ldrb	r0, [r1], #1
   14940:	cmp	r0, #0
   14944:	bne	14930 <__assert_fail@plt+0x37e4>
   14948:	b	14950 <__assert_fail@plt+0x3804>
   1494c:	ldr	r2, [sp, #76]	; 0x4c
   14950:	cmp	r9, sl
   14954:	movcc	r0, #0
   14958:	strbcc	r0, [r2, r9]
   1495c:	mov	r0, r9
   14960:	sub	sp, fp, #28
   14964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14968:	mov	r2, #1
   1496c:	b	14838 <__assert_fail@plt+0x36ec>
   14970:	ldr	r2, [sp, #80]	; 0x50
   14974:	mov	r7, #5
   14978:	b	14860 <__assert_fail@plt+0x3714>
   1497c:	bl	11134 <abort@plt>
   14980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14984:	add	fp, sp, #28
   14988:	sub	sp, sp, #28
   1498c:	movw	r5, #33176	; 0x8198
   14990:	cmp	r2, #0
   14994:	mov	r4, r1
   14998:	mov	r7, r0
   1499c:	str	r0, [sp, #20]
   149a0:	movt	r5, #2
   149a4:	movne	r5, r2
   149a8:	bl	11044 <__errno_location@plt>
   149ac:	mov	sl, r0
   149b0:	ldm	r5, {r0, r1}
   149b4:	ldr	r2, [r5, #40]	; 0x28
   149b8:	ldr	r3, [r5, #44]	; 0x2c
   149bc:	add	r9, r5, #8
   149c0:	ldr	r6, [sl]
   149c4:	orr	r8, r1, #1
   149c8:	mov	r1, #0
   149cc:	str	r6, [sp, #24]
   149d0:	stm	sp, {r0, r8, r9}
   149d4:	str	r2, [sp, #12]
   149d8:	str	r3, [sp, #16]
   149dc:	mov	r0, #0
   149e0:	mov	r2, r7
   149e4:	mov	r3, r4
   149e8:	mov	r6, r4
   149ec:	bl	13614 <__assert_fail@plt+0x24c8>
   149f0:	add	r7, r0, #1
   149f4:	mov	r0, r7
   149f8:	bl	15a5c <__assert_fail@plt+0x4910>
   149fc:	mov	r4, r0
   14a00:	ldr	r0, [r5]
   14a04:	ldr	r2, [r5, #44]	; 0x2c
   14a08:	ldr	r1, [r5, #40]	; 0x28
   14a0c:	mov	r3, r6
   14a10:	stm	sp, {r0, r8, r9}
   14a14:	str	r2, [sp, #16]
   14a18:	str	r1, [sp, #12]
   14a1c:	mov	r0, r4
   14a20:	mov	r1, r7
   14a24:	ldr	r2, [sp, #20]
   14a28:	bl	13614 <__assert_fail@plt+0x24c8>
   14a2c:	ldr	r0, [sp, #24]
   14a30:	str	r0, [sl]
   14a34:	mov	r0, r4
   14a38:	sub	sp, fp, #28
   14a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a44:	add	fp, sp, #28
   14a48:	sub	sp, sp, #36	; 0x24
   14a4c:	movw	r8, #33176	; 0x8198
   14a50:	cmp	r3, #0
   14a54:	mov	r4, r2
   14a58:	str	r2, [sp, #24]
   14a5c:	mov	r5, r1
   14a60:	mov	r6, r0
   14a64:	str	r0, [sp, #20]
   14a68:	movt	r8, #2
   14a6c:	movne	r8, r3
   14a70:	bl	11044 <__errno_location@plt>
   14a74:	str	r0, [sp, #28]
   14a78:	cmp	r4, #0
   14a7c:	add	sl, r8, #8
   14a80:	ldm	r8, {r3, r9}
   14a84:	ldr	r7, [r0]
   14a88:	ldr	r1, [r8, #40]	; 0x28
   14a8c:	ldr	r2, [r8, #44]	; 0x2c
   14a90:	mov	r0, #0
   14a94:	orreq	r9, r9, #1
   14a98:	str	r7, [sp, #32]
   14a9c:	mov	r7, r5
   14aa0:	stm	sp, {r3, r9, sl}
   14aa4:	str	r1, [sp, #12]
   14aa8:	str	r2, [sp, #16]
   14aac:	mov	r1, #0
   14ab0:	mov	r2, r6
   14ab4:	mov	r3, r5
   14ab8:	bl	13614 <__assert_fail@plt+0x24c8>
   14abc:	add	r4, r0, #1
   14ac0:	mov	r5, r0
   14ac4:	mov	r0, r4
   14ac8:	bl	15a5c <__assert_fail@plt+0x4910>
   14acc:	mov	r6, r0
   14ad0:	ldr	r0, [r8]
   14ad4:	ldr	r2, [r8, #44]	; 0x2c
   14ad8:	ldr	r1, [r8, #40]	; 0x28
   14adc:	mov	r3, r7
   14ae0:	stm	sp, {r0, r9, sl}
   14ae4:	str	r2, [sp, #16]
   14ae8:	str	r1, [sp, #12]
   14aec:	mov	r0, r6
   14af0:	mov	r1, r4
   14af4:	ldr	r2, [sp, #20]
   14af8:	bl	13614 <__assert_fail@plt+0x24c8>
   14afc:	ldr	r0, [sp, #24]
   14b00:	ldr	r1, [sp, #32]
   14b04:	ldr	r2, [sp, #28]
   14b08:	cmp	r0, #0
   14b0c:	str	r1, [r2]
   14b10:	strne	r5, [r0]
   14b14:	mov	r0, r6
   14b18:	sub	sp, fp, #28
   14b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b20:	push	{r4, r5, r6, r7, fp, lr}
   14b24:	add	fp, sp, #16
   14b28:	movw	r4, #33072	; 0x8130
   14b2c:	movt	r4, #2
   14b30:	ldrd	r6, [r4]
   14b34:	cmp	r7, #2
   14b38:	blt	14b64 <__assert_fail@plt+0x3a18>
   14b3c:	add	r5, r6, #12
   14b40:	mov	r7, #0
   14b44:	ldr	r0, [r5, r7, lsl #3]
   14b48:	bl	12d3c <__assert_fail@plt+0x1bf0>
   14b4c:	ldr	r1, [r4, #4]
   14b50:	add	r2, r7, #2
   14b54:	add	r0, r7, #1
   14b58:	mov	r7, r0
   14b5c:	cmp	r2, r1
   14b60:	blt	14b44 <__assert_fail@plt+0x39f8>
   14b64:	ldr	r0, [r6, #4]
   14b68:	movw	r5, #33224	; 0x81c8
   14b6c:	movt	r5, #2
   14b70:	cmp	r0, r5
   14b74:	beq	14b88 <__assert_fail@plt+0x3a3c>
   14b78:	bl	12d3c <__assert_fail@plt+0x1bf0>
   14b7c:	mov	r0, #256	; 0x100
   14b80:	str	r0, [r4, #8]
   14b84:	str	r5, [r4, #12]
   14b88:	add	r5, r4, #8
   14b8c:	cmp	r6, r5
   14b90:	beq	14ba0 <__assert_fail@plt+0x3a54>
   14b94:	mov	r0, r6
   14b98:	bl	12d3c <__assert_fail@plt+0x1bf0>
   14b9c:	str	r5, [r4]
   14ba0:	mov	r0, #1
   14ba4:	str	r0, [r4, #4]
   14ba8:	pop	{r4, r5, r6, r7, fp, pc}
   14bac:	movw	r3, #33176	; 0x8198
   14bb0:	mvn	r2, #0
   14bb4:	movt	r3, #2
   14bb8:	b	14bbc <__assert_fail@plt+0x3a70>
   14bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bc0:	add	fp, sp, #28
   14bc4:	sub	sp, sp, #44	; 0x2c
   14bc8:	mov	r7, r3
   14bcc:	str	r2, [sp, #36]	; 0x24
   14bd0:	str	r1, [sp, #32]
   14bd4:	mov	r5, r0
   14bd8:	bl	11044 <__errno_location@plt>
   14bdc:	cmp	r5, #0
   14be0:	blt	14d44 <__assert_fail@plt+0x3bf8>
   14be4:	cmn	r5, #-2147483647	; 0x80000001
   14be8:	beq	14d44 <__assert_fail@plt+0x3bf8>
   14bec:	movw	r8, #33072	; 0x8130
   14bf0:	mov	r4, r0
   14bf4:	movt	r8, #2
   14bf8:	ldr	r6, [r8]
   14bfc:	ldr	r1, [r8, #4]
   14c00:	ldr	r0, [r0]
   14c04:	str	r4, [sp, #28]
   14c08:	cmp	r1, r5
   14c0c:	str	r0, [sp, #24]
   14c10:	ble	14c1c <__assert_fail@plt+0x3ad0>
   14c14:	mov	sl, r6
   14c18:	b	14c80 <__assert_fail@plt+0x3b34>
   14c1c:	mov	r0, #8
   14c20:	add	r9, r8, #8
   14c24:	add	r2, r5, #1
   14c28:	str	r1, [fp, #-32]	; 0xffffffe0
   14c2c:	mvn	r3, #-2147483648	; 0x80000000
   14c30:	str	r0, [sp]
   14c34:	subs	r0, r6, r9
   14c38:	sub	r2, r2, r1
   14c3c:	sub	r1, fp, #32
   14c40:	movne	r0, r6
   14c44:	bl	15c5c <__assert_fail@plt+0x4b10>
   14c48:	str	r0, [r8]
   14c4c:	cmp	r6, r9
   14c50:	mov	sl, r0
   14c54:	ldrdeq	r0, [r8, #8]
   14c58:	stmeq	sl, {r0, r1}
   14c5c:	ldr	r1, [r8, #4]
   14c60:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c64:	add	r0, sl, r1, lsl #3
   14c68:	sub	r1, r2, r1
   14c6c:	lsl	r2, r1, #3
   14c70:	mov	r1, #0
   14c74:	bl	1105c <memset@plt>
   14c78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c7c:	str	r0, [r8, #4]
   14c80:	mov	r9, sl
   14c84:	ldr	r6, [r9, r5, lsl #3]!
   14c88:	ldr	r4, [r9, #4]!
   14c8c:	ldm	r7, {r0, r1}
   14c90:	ldr	r2, [r7, #40]	; 0x28
   14c94:	ldr	r3, [r7, #44]	; 0x2c
   14c98:	orr	r8, r1, #1
   14c9c:	add	r1, r7, #8
   14ca0:	stm	sp, {r0, r8}
   14ca4:	add	r0, sp, #8
   14ca8:	str	r1, [sp, #20]
   14cac:	stm	r0, {r1, r2, r3}
   14cb0:	mov	r0, r4
   14cb4:	mov	r1, r6
   14cb8:	ldr	r2, [sp, #32]
   14cbc:	ldr	r3, [sp, #36]	; 0x24
   14cc0:	bl	13614 <__assert_fail@plt+0x24c8>
   14cc4:	cmp	r6, r0
   14cc8:	bhi	14d2c <__assert_fail@plt+0x3be0>
   14ccc:	add	r6, r0, #1
   14cd0:	movw	r0, #33224	; 0x81c8
   14cd4:	movt	r0, #2
   14cd8:	str	r6, [sl, r5, lsl #3]
   14cdc:	cmp	r4, r0
   14ce0:	beq	14cec <__assert_fail@plt+0x3ba0>
   14ce4:	mov	r0, r4
   14ce8:	bl	12d3c <__assert_fail@plt+0x1bf0>
   14cec:	mov	r0, r6
   14cf0:	bl	15a5c <__assert_fail@plt+0x4910>
   14cf4:	str	r0, [r9]
   14cf8:	mov	r4, r0
   14cfc:	add	r3, sp, #8
   14d00:	ldr	r0, [r7]
   14d04:	ldr	r1, [r7, #40]	; 0x28
   14d08:	ldr	r2, [r7, #44]	; 0x2c
   14d0c:	stm	sp, {r0, r8}
   14d10:	ldr	r0, [sp, #20]
   14d14:	stm	r3, {r0, r1, r2}
   14d18:	mov	r0, r4
   14d1c:	mov	r1, r6
   14d20:	ldr	r2, [sp, #32]
   14d24:	ldr	r3, [sp, #36]	; 0x24
   14d28:	bl	13614 <__assert_fail@plt+0x24c8>
   14d2c:	ldr	r1, [sp, #24]
   14d30:	ldr	r0, [sp, #28]
   14d34:	str	r1, [r0]
   14d38:	mov	r0, r4
   14d3c:	sub	sp, fp, #28
   14d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d44:	bl	11134 <abort@plt>
   14d48:	movw	r3, #33176	; 0x8198
   14d4c:	movt	r3, #2
   14d50:	b	14bbc <__assert_fail@plt+0x3a70>
   14d54:	movw	r3, #33176	; 0x8198
   14d58:	mov	r1, r0
   14d5c:	mov	r0, #0
   14d60:	mvn	r2, #0
   14d64:	movt	r3, #2
   14d68:	b	14bbc <__assert_fail@plt+0x3a70>
   14d6c:	movw	r3, #33176	; 0x8198
   14d70:	mov	r2, r1
   14d74:	mov	r1, r0
   14d78:	mov	r0, #0
   14d7c:	movt	r3, #2
   14d80:	b	14bbc <__assert_fail@plt+0x3a70>
   14d84:	push	{fp, lr}
   14d88:	mov	fp, sp
   14d8c:	sub	sp, sp, #48	; 0x30
   14d90:	vmov.i32	q8, #0	; 0x00000000
   14d94:	mov	ip, #32
   14d98:	mov	r3, sp
   14d9c:	mov	lr, r2
   14da0:	cmp	r1, #10
   14da4:	add	r2, r3, #16
   14da8:	vst1.64	{d16-d17}, [r3], ip
   14dac:	vst1.64	{d16-d17}, [r3]
   14db0:	vst1.64	{d16-d17}, [r2]
   14db4:	beq	14dd4 <__assert_fail@plt+0x3c88>
   14db8:	str	r1, [sp]
   14dbc:	mov	r3, sp
   14dc0:	mov	r1, lr
   14dc4:	mvn	r2, #0
   14dc8:	bl	14bbc <__assert_fail@plt+0x3a70>
   14dcc:	mov	sp, fp
   14dd0:	pop	{fp, pc}
   14dd4:	bl	11134 <abort@plt>
   14dd8:	push	{r4, sl, fp, lr}
   14ddc:	add	fp, sp, #8
   14de0:	sub	sp, sp, #48	; 0x30
   14de4:	mov	ip, r3
   14de8:	mov	r3, sp
   14dec:	vmov.i32	q8, #0	; 0x00000000
   14df0:	mov	lr, #32
   14df4:	cmp	r1, #10
   14df8:	add	r4, r3, #16
   14dfc:	vst1.64	{d16-d17}, [r3], lr
   14e00:	vst1.64	{d16-d17}, [r3]
   14e04:	vst1.64	{d16-d17}, [r4]
   14e08:	beq	14e28 <__assert_fail@plt+0x3cdc>
   14e0c:	str	r1, [sp]
   14e10:	mov	r1, r2
   14e14:	mov	r3, sp
   14e18:	mov	r2, ip
   14e1c:	bl	14bbc <__assert_fail@plt+0x3a70>
   14e20:	sub	sp, fp, #8
   14e24:	pop	{r4, sl, fp, pc}
   14e28:	bl	11134 <abort@plt>
   14e2c:	push	{fp, lr}
   14e30:	mov	fp, sp
   14e34:	sub	sp, sp, #48	; 0x30
   14e38:	mov	r3, sp
   14e3c:	vmov.i32	q8, #0	; 0x00000000
   14e40:	mov	ip, #32
   14e44:	cmp	r0, #10
   14e48:	add	r2, r3, #16
   14e4c:	vst1.64	{d16-d17}, [r3], ip
   14e50:	vst1.64	{d16-d17}, [r3]
   14e54:	vst1.64	{d16-d17}, [r2]
   14e58:	beq	14e78 <__assert_fail@plt+0x3d2c>
   14e5c:	str	r0, [sp]
   14e60:	mov	r3, sp
   14e64:	mov	r0, #0
   14e68:	mvn	r2, #0
   14e6c:	bl	14bbc <__assert_fail@plt+0x3a70>
   14e70:	mov	sp, fp
   14e74:	pop	{fp, pc}
   14e78:	bl	11134 <abort@plt>
   14e7c:	push	{fp, lr}
   14e80:	mov	fp, sp
   14e84:	sub	sp, sp, #48	; 0x30
   14e88:	mov	r3, sp
   14e8c:	vmov.i32	q8, #0	; 0x00000000
   14e90:	mov	ip, #32
   14e94:	cmp	r0, #10
   14e98:	add	lr, r3, #16
   14e9c:	vst1.64	{d16-d17}, [r3], ip
   14ea0:	vst1.64	{d16-d17}, [r3]
   14ea4:	vst1.64	{d16-d17}, [lr]
   14ea8:	beq	14ec4 <__assert_fail@plt+0x3d78>
   14eac:	str	r0, [sp]
   14eb0:	mov	r3, sp
   14eb4:	mov	r0, #0
   14eb8:	bl	14bbc <__assert_fail@plt+0x3a70>
   14ebc:	mov	sp, fp
   14ec0:	pop	{fp, pc}
   14ec4:	bl	11134 <abort@plt>
   14ec8:	push	{r4, sl, fp, lr}
   14ecc:	add	fp, sp, #8
   14ed0:	sub	sp, sp, #48	; 0x30
   14ed4:	mov	lr, r0
   14ed8:	movw	r0, #33176	; 0x8198
   14edc:	mov	r3, #32
   14ee0:	mov	ip, r1
   14ee4:	mov	r4, #1
   14ee8:	movt	r0, #2
   14eec:	add	r1, r0, #16
   14ef0:	vld1.64	{d16-d17}, [r0], r3
   14ef4:	mov	r3, sp
   14ef8:	vld1.64	{d18-d19}, [r1]
   14efc:	add	r1, r3, #16
   14f00:	vld1.64	{d20-d21}, [r0]
   14f04:	add	r0, r3, #32
   14f08:	vst1.64	{d18-d19}, [r1]
   14f0c:	mov	r1, r3
   14f10:	vst1.64	{d20-d21}, [r0]
   14f14:	mov	r0, #28
   14f18:	and	r0, r0, r2, lsr #3
   14f1c:	and	r2, r2, #31
   14f20:	vst1.64	{d16-d17}, [r1], r0
   14f24:	ldr	r0, [r1, #8]
   14f28:	bic	r4, r4, r0, lsr r2
   14f2c:	eor	r0, r0, r4, lsl r2
   14f30:	mov	r2, ip
   14f34:	str	r0, [r1, #8]
   14f38:	mov	r0, #0
   14f3c:	mov	r1, lr
   14f40:	bl	14bbc <__assert_fail@plt+0x3a70>
   14f44:	sub	sp, fp, #8
   14f48:	pop	{r4, sl, fp, pc}
   14f4c:	push	{fp, lr}
   14f50:	mov	fp, sp
   14f54:	sub	sp, sp, #48	; 0x30
   14f58:	mov	ip, r0
   14f5c:	movw	r0, #33176	; 0x8198
   14f60:	mov	r3, #32
   14f64:	movt	r0, #2
   14f68:	add	r2, r0, #16
   14f6c:	vld1.64	{d16-d17}, [r0], r3
   14f70:	mov	r3, sp
   14f74:	vld1.64	{d18-d19}, [r2]
   14f78:	add	r2, r3, #16
   14f7c:	vld1.64	{d20-d21}, [r0]
   14f80:	add	r0, r3, #32
   14f84:	vst1.64	{d18-d19}, [r2]
   14f88:	mov	r2, r3
   14f8c:	vst1.64	{d20-d21}, [r0]
   14f90:	mov	r0, #28
   14f94:	and	r0, r0, r1, lsr #3
   14f98:	and	r1, r1, #31
   14f9c:	vst1.64	{d16-d17}, [r2], r0
   14fa0:	mov	r0, #1
   14fa4:	ldr	lr, [r2, #8]
   14fa8:	bic	r0, r0, lr, lsr r1
   14fac:	eor	r0, lr, r0, lsl r1
   14fb0:	mov	r1, ip
   14fb4:	str	r0, [r2, #8]
   14fb8:	mov	r0, #0
   14fbc:	mvn	r2, #0
   14fc0:	bl	14bbc <__assert_fail@plt+0x3a70>
   14fc4:	mov	sp, fp
   14fc8:	pop	{fp, pc}
   14fcc:	push	{fp, lr}
   14fd0:	mov	fp, sp
   14fd4:	sub	sp, sp, #48	; 0x30
   14fd8:	movw	r2, #33176	; 0x8198
   14fdc:	mov	r3, #32
   14fe0:	mov	r1, r0
   14fe4:	movt	r2, #2
   14fe8:	add	r0, r2, #16
   14fec:	vld1.64	{d16-d17}, [r2], r3
   14ff0:	mov	r3, sp
   14ff4:	vld1.64	{d18-d19}, [r0]
   14ff8:	add	r0, r3, #16
   14ffc:	vld1.64	{d20-d21}, [r2]
   15000:	mov	r2, r3
   15004:	vst1.64	{d18-d19}, [r0]
   15008:	add	r0, r3, #32
   1500c:	vst1.64	{d20-d21}, [r0]
   15010:	mov	r0, #12
   15014:	vst1.64	{d16-d17}, [r2], r0
   15018:	ldr	r0, [r2]
   1501c:	orr	r0, r0, #67108864	; 0x4000000
   15020:	str	r0, [r2]
   15024:	mov	r0, #0
   15028:	mvn	r2, #0
   1502c:	bl	14bbc <__assert_fail@plt+0x3a70>
   15030:	mov	sp, fp
   15034:	pop	{fp, pc}
   15038:	push	{fp, lr}
   1503c:	mov	fp, sp
   15040:	sub	sp, sp, #48	; 0x30
   15044:	mov	ip, r1
   15048:	mov	r1, r0
   1504c:	movw	r0, #33176	; 0x8198
   15050:	mov	r3, #32
   15054:	movt	r0, #2
   15058:	add	r2, r0, #16
   1505c:	vld1.64	{d16-d17}, [r0], r3
   15060:	mov	r3, sp
   15064:	vld1.64	{d18-d19}, [r2]
   15068:	add	r2, r3, #16
   1506c:	vld1.64	{d20-d21}, [r0]
   15070:	add	r0, r3, #32
   15074:	vst1.64	{d18-d19}, [r2]
   15078:	mov	r2, r3
   1507c:	vst1.64	{d20-d21}, [r0]
   15080:	mov	r0, #12
   15084:	vst1.64	{d16-d17}, [r2], r0
   15088:	ldr	r0, [r2]
   1508c:	orr	r0, r0, #67108864	; 0x4000000
   15090:	str	r0, [r2]
   15094:	mov	r0, #0
   15098:	mov	r2, ip
   1509c:	bl	14bbc <__assert_fail@plt+0x3a70>
   150a0:	mov	sp, fp
   150a4:	pop	{fp, pc}
   150a8:	push	{r4, sl, fp, lr}
   150ac:	add	fp, sp, #8
   150b0:	sub	sp, sp, #96	; 0x60
   150b4:	mov	ip, r2
   150b8:	mov	r2, sp
   150bc:	vmov.i32	q8, #0	; 0x00000000
   150c0:	mov	r4, #28
   150c4:	cmp	r1, #10
   150c8:	mov	r3, r2
   150cc:	add	lr, r2, #16
   150d0:	vst1.64	{d16-d17}, [r3], r4
   150d4:	vst1.64	{d16-d17}, [lr]
   150d8:	vst1.32	{d16-d17}, [r3]
   150dc:	beq	1512c <__assert_fail@plt+0x3fe0>
   150e0:	vld1.64	{d16-d17}, [r2], r4
   150e4:	vld1.64	{d18-d19}, [lr]
   150e8:	add	r3, sp, #48	; 0x30
   150ec:	add	r4, r3, #4
   150f0:	vld1.32	{d20-d21}, [r2]
   150f4:	add	r2, r3, #20
   150f8:	vst1.32	{d16-d17}, [r4]
   150fc:	vst1.32	{d18-d19}, [r2]
   15100:	add	r2, r3, #32
   15104:	vst1.32	{d20-d21}, [r2]
   15108:	str	r1, [sp, #48]	; 0x30
   1510c:	mvn	r2, #0
   15110:	ldr	r1, [sp, #60]	; 0x3c
   15114:	orr	r1, r1, #67108864	; 0x4000000
   15118:	str	r1, [sp, #60]	; 0x3c
   1511c:	mov	r1, ip
   15120:	bl	14bbc <__assert_fail@plt+0x3a70>
   15124:	sub	sp, fp, #8
   15128:	pop	{r4, sl, fp, pc}
   1512c:	bl	11134 <abort@plt>
   15130:	push	{r4, r5, fp, lr}
   15134:	add	fp, sp, #8
   15138:	sub	sp, sp, #48	; 0x30
   1513c:	mov	ip, r3
   15140:	movw	r3, #33176	; 0x8198
   15144:	mov	lr, #32
   15148:	cmp	r1, #0
   1514c:	mov	r5, sp
   15150:	movt	r3, #2
   15154:	cmpne	r2, #0
   15158:	add	r4, r3, #16
   1515c:	vld1.64	{d16-d17}, [r3], lr
   15160:	vld1.64	{d18-d19}, [r4]
   15164:	add	r4, r5, #16
   15168:	vld1.64	{d20-d21}, [r3]
   1516c:	vst1.64	{d16-d17}, [r5], lr
   15170:	mov	r3, #10
   15174:	vst1.64	{d18-d19}, [r4]
   15178:	vst1.64	{d20-d21}, [r5]
   1517c:	str	r3, [sp]
   15180:	bne	15188 <__assert_fail@plt+0x403c>
   15184:	bl	11134 <abort@plt>
   15188:	str	r2, [sp, #44]	; 0x2c
   1518c:	str	r1, [sp, #40]	; 0x28
   15190:	mov	r3, sp
   15194:	mov	r1, ip
   15198:	mvn	r2, #0
   1519c:	bl	14bbc <__assert_fail@plt+0x3a70>
   151a0:	sub	sp, fp, #8
   151a4:	pop	{r4, r5, fp, pc}
   151a8:	push	{r4, r5, fp, lr}
   151ac:	add	fp, sp, #8
   151b0:	sub	sp, sp, #48	; 0x30
   151b4:	mov	lr, r3
   151b8:	movw	r3, #33176	; 0x8198
   151bc:	mov	ip, #32
   151c0:	cmp	r1, #0
   151c4:	mov	r5, sp
   151c8:	movt	r3, #2
   151cc:	cmpne	r2, #0
   151d0:	add	r4, r3, #16
   151d4:	vld1.64	{d16-d17}, [r3], ip
   151d8:	vld1.64	{d18-d19}, [r4]
   151dc:	add	r4, r5, #16
   151e0:	vld1.64	{d20-d21}, [r3]
   151e4:	vst1.64	{d16-d17}, [r5], ip
   151e8:	mov	r3, #10
   151ec:	vst1.64	{d18-d19}, [r4]
   151f0:	vst1.64	{d20-d21}, [r5]
   151f4:	str	r3, [sp]
   151f8:	bne	15200 <__assert_fail@plt+0x40b4>
   151fc:	bl	11134 <abort@plt>
   15200:	ldr	ip, [fp, #8]
   15204:	str	r2, [sp, #44]	; 0x2c
   15208:	str	r1, [sp, #40]	; 0x28
   1520c:	mov	r3, sp
   15210:	mov	r1, lr
   15214:	mov	r2, ip
   15218:	bl	14bbc <__assert_fail@plt+0x3a70>
   1521c:	sub	sp, fp, #8
   15220:	pop	{r4, r5, fp, pc}
   15224:	push	{r4, sl, fp, lr}
   15228:	add	fp, sp, #8
   1522c:	sub	sp, sp, #48	; 0x30
   15230:	mov	ip, r2
   15234:	movw	r2, #33176	; 0x8198
   15238:	mov	lr, #32
   1523c:	cmp	r0, #0
   15240:	mov	r4, sp
   15244:	movt	r2, #2
   15248:	cmpne	r1, #0
   1524c:	add	r3, r2, #16
   15250:	vld1.64	{d16-d17}, [r2], lr
   15254:	vld1.64	{d18-d19}, [r3]
   15258:	add	r3, r4, #16
   1525c:	vld1.64	{d20-d21}, [r2]
   15260:	vst1.64	{d16-d17}, [r4], lr
   15264:	mov	r2, #10
   15268:	vst1.64	{d18-d19}, [r3]
   1526c:	vst1.64	{d20-d21}, [r4]
   15270:	str	r2, [sp]
   15274:	bne	1527c <__assert_fail@plt+0x4130>
   15278:	bl	11134 <abort@plt>
   1527c:	str	r1, [sp, #44]	; 0x2c
   15280:	str	r0, [sp, #40]	; 0x28
   15284:	mov	r3, sp
   15288:	mov	r0, #0
   1528c:	mov	r1, ip
   15290:	mvn	r2, #0
   15294:	bl	14bbc <__assert_fail@plt+0x3a70>
   15298:	sub	sp, fp, #8
   1529c:	pop	{r4, sl, fp, pc}
   152a0:	push	{r4, r5, fp, lr}
   152a4:	add	fp, sp, #8
   152a8:	sub	sp, sp, #48	; 0x30
   152ac:	mov	lr, r2
   152b0:	movw	r2, #33176	; 0x8198
   152b4:	mov	ip, r3
   152b8:	mov	r3, #32
   152bc:	cmp	r0, #0
   152c0:	mov	r5, sp
   152c4:	movt	r2, #2
   152c8:	cmpne	r1, #0
   152cc:	add	r4, r2, #16
   152d0:	vld1.64	{d16-d17}, [r2], r3
   152d4:	vld1.64	{d18-d19}, [r4]
   152d8:	add	r4, r5, #16
   152dc:	vld1.64	{d20-d21}, [r2]
   152e0:	vst1.64	{d16-d17}, [r5], r3
   152e4:	mov	r2, #10
   152e8:	vst1.64	{d18-d19}, [r4]
   152ec:	vst1.64	{d20-d21}, [r5]
   152f0:	str	r2, [sp]
   152f4:	bne	152fc <__assert_fail@plt+0x41b0>
   152f8:	bl	11134 <abort@plt>
   152fc:	str	r1, [sp, #44]	; 0x2c
   15300:	str	r0, [sp, #40]	; 0x28
   15304:	mov	r3, sp
   15308:	mov	r0, #0
   1530c:	mov	r1, lr
   15310:	mov	r2, ip
   15314:	bl	14bbc <__assert_fail@plt+0x3a70>
   15318:	sub	sp, fp, #8
   1531c:	pop	{r4, r5, fp, pc}
   15320:	movw	r3, #33024	; 0x8100
   15324:	movt	r3, #2
   15328:	b	14bbc <__assert_fail@plt+0x3a70>
   1532c:	movw	r3, #33024	; 0x8100
   15330:	mov	r2, r1
   15334:	mov	r1, r0
   15338:	mov	r0, #0
   1533c:	movt	r3, #2
   15340:	b	14bbc <__assert_fail@plt+0x3a70>
   15344:	movw	r3, #33024	; 0x8100
   15348:	mvn	r2, #0
   1534c:	movt	r3, #2
   15350:	b	14bbc <__assert_fail@plt+0x3a70>
   15354:	movw	r3, #33024	; 0x8100
   15358:	mov	r1, r0
   1535c:	mov	r0, #0
   15360:	mvn	r2, #0
   15364:	movt	r3, #2
   15368:	b	14bbc <__assert_fail@plt+0x3a70>
   1536c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15370:	add	fp, sp, #24
   15374:	sub	sp, sp, #32
   15378:	ldr	r6, [fp, #12]
   1537c:	ldr	r7, [fp, #8]
   15380:	mov	r4, r2
   15384:	mov	r8, r0
   15388:	cmp	r1, #0
   1538c:	beq	153b4 <__assert_fail@plt+0x4268>
   15390:	movw	r2, #29292	; 0x726c
   15394:	mov	r5, r1
   15398:	str	r3, [sp, #4]
   1539c:	str	r4, [sp]
   153a0:	mov	r0, r8
   153a4:	mov	r1, #1
   153a8:	movt	r2, #1
   153ac:	mov	r3, r5
   153b0:	b	153cc <__assert_fail@plt+0x4280>
   153b4:	movw	r2, #29304	; 0x7278
   153b8:	str	r3, [sp]
   153bc:	mov	r0, r8
   153c0:	mov	r1, #1
   153c4:	mov	r3, r4
   153c8:	movt	r2, #1
   153cc:	bl	1108c <__fprintf_chk@plt>
   153d0:	movw	r1, #29311	; 0x727f
   153d4:	mov	r0, #0
   153d8:	mov	r2, #5
   153dc:	movt	r1, #1
   153e0:	bl	10f54 <dcgettext@plt>
   153e4:	movw	r2, #30029	; 0x754d
   153e8:	mov	r3, r0
   153ec:	movw	r0, #2022	; 0x7e6
   153f0:	mov	r1, #1
   153f4:	str	r0, [sp]
   153f8:	movt	r2, #1
   153fc:	mov	r0, r8
   15400:	bl	1108c <__fprintf_chk@plt>
   15404:	movw	r4, #28250	; 0x6e5a
   15408:	mov	r1, r8
   1540c:	movt	r4, #1
   15410:	mov	r0, r4
   15414:	bl	10ec4 <fputs_unlocked@plt>
   15418:	movw	r1, #29315	; 0x7283
   1541c:	mov	r0, #0
   15420:	mov	r2, #5
   15424:	movt	r1, #1
   15428:	bl	10f54 <dcgettext@plt>
   1542c:	movw	r3, #29486	; 0x732e
   15430:	mov	r2, r0
   15434:	mov	r0, r8
   15438:	mov	r1, #1
   1543c:	movt	r3, #1
   15440:	bl	1108c <__fprintf_chk@plt>
   15444:	mov	r0, r4
   15448:	mov	r1, r8
   1544c:	bl	10ec4 <fputs_unlocked@plt>
   15450:	cmp	r6, #9
   15454:	bhi	15490 <__assert_fail@plt+0x4344>
   15458:	add	r0, pc, #0
   1545c:	ldr	pc, [r0, r6, lsl #2]
   15460:	andeq	r5, r1, r8, lsl #9
   15464:	muleq	r1, ip, r4
   15468:	andeq	r5, r1, ip, asr #9
   1546c:	strdeq	r5, [r1], -r4
   15470:	andeq	r5, r1, ip, lsl r5
   15474:	andeq	r5, r1, r4, asr #10
   15478:	andeq	r5, r1, ip, ror #10
   1547c:	andeq	r5, r1, r4, lsr #11
   15480:	andeq	r5, r1, ip, asr #12
   15484:	strdeq	r5, [r1], -r4
   15488:	sub	sp, fp, #24
   1548c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15490:	movw	r1, #29839	; 0x748f
   15494:	movt	r1, #1
   15498:	b	155fc <__assert_fail@plt+0x44b0>
   1549c:	movw	r1, #29520	; 0x7350
   154a0:	mov	r0, #0
   154a4:	mov	r2, #5
   154a8:	movt	r1, #1
   154ac:	bl	10f54 <dcgettext@plt>
   154b0:	ldr	r3, [r7]
   154b4:	mov	r2, r0
   154b8:	mov	r0, r8
   154bc:	mov	r1, #1
   154c0:	sub	sp, fp, #24
   154c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   154c8:	b	1108c <__fprintf_chk@plt>
   154cc:	movw	r1, #29536	; 0x7360
   154d0:	mov	r0, #0
   154d4:	mov	r2, #5
   154d8:	movt	r1, #1
   154dc:	bl	10f54 <dcgettext@plt>
   154e0:	mov	r2, r0
   154e4:	ldr	r3, [r7]
   154e8:	ldr	r0, [r7, #4]
   154ec:	str	r0, [sp]
   154f0:	b	155e0 <__assert_fail@plt+0x4494>
   154f4:	movw	r1, #29559	; 0x7377
   154f8:	mov	r0, #0
   154fc:	mov	r2, #5
   15500:	movt	r1, #1
   15504:	bl	10f54 <dcgettext@plt>
   15508:	ldr	r3, [r7]
   1550c:	mov	r2, r0
   15510:	ldmib	r7, {r0, r1}
   15514:	stm	sp, {r0, r1}
   15518:	b	155e0 <__assert_fail@plt+0x4494>
   1551c:	movw	r1, #29587	; 0x7393
   15520:	mov	r0, #0
   15524:	mov	r2, #5
   15528:	movt	r1, #1
   1552c:	bl	10f54 <dcgettext@plt>
   15530:	ldr	r3, [r7]
   15534:	mov	r2, r0
   15538:	ldmib	r7, {r0, r1, r7}
   1553c:	stm	sp, {r0, r1, r7}
   15540:	b	155e0 <__assert_fail@plt+0x4494>
   15544:	movw	r1, #29619	; 0x73b3
   15548:	mov	r0, #0
   1554c:	mov	r2, #5
   15550:	movt	r1, #1
   15554:	bl	10f54 <dcgettext@plt>
   15558:	ldr	r3, [r7]
   1555c:	mov	r2, r0
   15560:	ldmib	r7, {r0, r1, r6, r7}
   15564:	stm	sp, {r0, r1, r6, r7}
   15568:	b	155e0 <__assert_fail@plt+0x4494>
   1556c:	movw	r1, #29655	; 0x73d7
   15570:	mov	r0, #0
   15574:	mov	r2, #5
   15578:	movt	r1, #1
   1557c:	bl	10f54 <dcgettext@plt>
   15580:	ldr	r3, [r7]
   15584:	mov	r2, r0
   15588:	ldmib	r7, {r0, r1, r6}
   1558c:	ldr	r5, [r7, #16]
   15590:	ldr	r7, [r7, #20]
   15594:	stm	sp, {r0, r1, r6}
   15598:	str	r5, [sp, #12]
   1559c:	str	r7, [sp, #16]
   155a0:	b	155e0 <__assert_fail@plt+0x4494>
   155a4:	movw	r1, #29695	; 0x73ff
   155a8:	mov	r0, #0
   155ac:	mov	r2, #5
   155b0:	movt	r1, #1
   155b4:	bl	10f54 <dcgettext@plt>
   155b8:	ldr	r3, [r7]
   155bc:	mov	r2, r0
   155c0:	ldmib	r7, {r0, r1, r6}
   155c4:	ldr	r5, [r7, #16]
   155c8:	ldr	r4, [r7, #20]
   155cc:	ldr	r7, [r7, #24]
   155d0:	stm	sp, {r0, r1, r6}
   155d4:	str	r5, [sp, #12]
   155d8:	str	r4, [sp, #16]
   155dc:	str	r7, [sp, #20]
   155e0:	mov	r0, r8
   155e4:	mov	r1, #1
   155e8:	bl	1108c <__fprintf_chk@plt>
   155ec:	sub	sp, fp, #24
   155f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155f4:	movw	r1, #29787	; 0x745b
   155f8:	movt	r1, #1
   155fc:	mov	r0, #0
   15600:	mov	r2, #5
   15604:	bl	10f54 <dcgettext@plt>
   15608:	mov	ip, r0
   1560c:	ldr	r3, [r7]
   15610:	ldr	r0, [r7, #4]
   15614:	ldr	r1, [r7, #8]
   15618:	ldr	r6, [r7, #12]
   1561c:	ldr	r5, [r7, #16]
   15620:	ldr	r4, [r7, #20]
   15624:	ldr	r2, [r7, #24]
   15628:	ldr	lr, [r7, #28]
   1562c:	ldr	r7, [r7, #32]
   15630:	stm	sp, {r0, r1, r6}
   15634:	str	r5, [sp, #12]
   15638:	str	r4, [sp, #16]
   1563c:	str	r2, [sp, #20]
   15640:	str	lr, [sp, #24]
   15644:	str	r7, [sp, #28]
   15648:	b	15690 <__assert_fail@plt+0x4544>
   1564c:	movw	r1, #29739	; 0x742b
   15650:	mov	r0, #0
   15654:	mov	r2, #5
   15658:	movt	r1, #1
   1565c:	bl	10f54 <dcgettext@plt>
   15660:	mov	ip, r0
   15664:	ldr	r3, [r7]
   15668:	ldmib	r7, {r0, r1, r6}
   1566c:	ldr	r5, [r7, #16]
   15670:	ldr	r4, [r7, #20]
   15674:	ldr	r2, [r7, #24]
   15678:	ldr	r7, [r7, #28]
   1567c:	stm	sp, {r0, r1, r6}
   15680:	str	r5, [sp, #12]
   15684:	str	r4, [sp, #16]
   15688:	str	r2, [sp, #20]
   1568c:	str	r7, [sp, #24]
   15690:	mov	r0, r8
   15694:	mov	r1, #1
   15698:	mov	r2, ip
   1569c:	bl	1108c <__fprintf_chk@plt>
   156a0:	sub	sp, fp, #24
   156a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156a8:	push	{r4, sl, fp, lr}
   156ac:	add	fp, sp, #8
   156b0:	sub	sp, sp, #8
   156b4:	ldr	ip, [fp, #8]
   156b8:	mov	lr, #0
   156bc:	ldr	r4, [ip, lr, lsl #2]
   156c0:	add	lr, lr, #1
   156c4:	cmp	r4, #0
   156c8:	bne	156bc <__assert_fail@plt+0x4570>
   156cc:	sub	r4, lr, #1
   156d0:	str	ip, [sp]
   156d4:	str	r4, [sp, #4]
   156d8:	bl	1536c <__assert_fail@plt+0x4220>
   156dc:	sub	sp, fp, #8
   156e0:	pop	{r4, sl, fp, pc}
   156e4:	push	{fp, lr}
   156e8:	mov	fp, sp
   156ec:	sub	sp, sp, #48	; 0x30
   156f0:	ldr	ip, [fp, #8]
   156f4:	ldr	lr, [ip]
   156f8:	cmp	lr, #0
   156fc:	str	lr, [sp, #8]
   15700:	beq	1579c <__assert_fail@plt+0x4650>
   15704:	ldr	lr, [ip, #4]
   15708:	cmp	lr, #0
   1570c:	str	lr, [sp, #12]
   15710:	beq	157a4 <__assert_fail@plt+0x4658>
   15714:	ldr	lr, [ip, #8]
   15718:	cmp	lr, #0
   1571c:	str	lr, [sp, #16]
   15720:	beq	157ac <__assert_fail@plt+0x4660>
   15724:	ldr	lr, [ip, #12]
   15728:	cmp	lr, #0
   1572c:	str	lr, [sp, #20]
   15730:	beq	157b4 <__assert_fail@plt+0x4668>
   15734:	ldr	lr, [ip, #16]
   15738:	cmp	lr, #0
   1573c:	str	lr, [sp, #24]
   15740:	beq	157bc <__assert_fail@plt+0x4670>
   15744:	ldr	lr, [ip, #20]
   15748:	cmp	lr, #0
   1574c:	str	lr, [sp, #28]
   15750:	beq	157c4 <__assert_fail@plt+0x4678>
   15754:	ldr	lr, [ip, #24]
   15758:	cmp	lr, #0
   1575c:	str	lr, [sp, #32]
   15760:	beq	157cc <__assert_fail@plt+0x4680>
   15764:	ldr	lr, [ip, #28]
   15768:	cmp	lr, #0
   1576c:	str	lr, [sp, #36]	; 0x24
   15770:	beq	157d4 <__assert_fail@plt+0x4688>
   15774:	ldr	lr, [ip, #32]
   15778:	cmp	lr, #0
   1577c:	str	lr, [sp, #40]	; 0x28
   15780:	beq	157dc <__assert_fail@plt+0x4690>
   15784:	ldr	lr, [ip, #36]	; 0x24
   15788:	mov	ip, #10
   1578c:	cmp	lr, #0
   15790:	str	lr, [sp, #44]	; 0x2c
   15794:	movweq	ip, #9
   15798:	b	157e0 <__assert_fail@plt+0x4694>
   1579c:	mov	ip, #0
   157a0:	b	157e0 <__assert_fail@plt+0x4694>
   157a4:	mov	ip, #1
   157a8:	b	157e0 <__assert_fail@plt+0x4694>
   157ac:	mov	ip, #2
   157b0:	b	157e0 <__assert_fail@plt+0x4694>
   157b4:	mov	ip, #3
   157b8:	b	157e0 <__assert_fail@plt+0x4694>
   157bc:	mov	ip, #4
   157c0:	b	157e0 <__assert_fail@plt+0x4694>
   157c4:	mov	ip, #5
   157c8:	b	157e0 <__assert_fail@plt+0x4694>
   157cc:	mov	ip, #6
   157d0:	b	157e0 <__assert_fail@plt+0x4694>
   157d4:	mov	ip, #7
   157d8:	b	157e0 <__assert_fail@plt+0x4694>
   157dc:	mov	ip, #8
   157e0:	add	lr, sp, #8
   157e4:	str	ip, [sp, #4]
   157e8:	str	lr, [sp]
   157ec:	bl	1536c <__assert_fail@plt+0x4220>
   157f0:	mov	sp, fp
   157f4:	pop	{fp, pc}
   157f8:	push	{fp, lr}
   157fc:	mov	fp, sp
   15800:	sub	sp, sp, #56	; 0x38
   15804:	add	ip, fp, #8
   15808:	str	ip, [sp, #12]
   1580c:	ldr	lr, [fp, #8]
   15810:	cmp	lr, #0
   15814:	str	lr, [sp, #16]
   15818:	beq	158b4 <__assert_fail@plt+0x4768>
   1581c:	ldr	lr, [ip, #4]
   15820:	cmp	lr, #0
   15824:	str	lr, [sp, #20]
   15828:	beq	158bc <__assert_fail@plt+0x4770>
   1582c:	ldr	lr, [ip, #8]
   15830:	cmp	lr, #0
   15834:	str	lr, [sp, #24]
   15838:	beq	158c4 <__assert_fail@plt+0x4778>
   1583c:	ldr	lr, [ip, #12]
   15840:	cmp	lr, #0
   15844:	str	lr, [sp, #28]
   15848:	beq	158cc <__assert_fail@plt+0x4780>
   1584c:	ldr	lr, [ip, #16]
   15850:	cmp	lr, #0
   15854:	str	lr, [sp, #32]
   15858:	beq	158d4 <__assert_fail@plt+0x4788>
   1585c:	ldr	lr, [ip, #20]
   15860:	cmp	lr, #0
   15864:	str	lr, [sp, #36]	; 0x24
   15868:	beq	158dc <__assert_fail@plt+0x4790>
   1586c:	ldr	lr, [ip, #24]
   15870:	cmp	lr, #0
   15874:	str	lr, [sp, #40]	; 0x28
   15878:	beq	158e4 <__assert_fail@plt+0x4798>
   1587c:	ldr	lr, [ip, #28]
   15880:	cmp	lr, #0
   15884:	str	lr, [sp, #44]	; 0x2c
   15888:	beq	158ec <__assert_fail@plt+0x47a0>
   1588c:	ldr	lr, [ip, #32]
   15890:	cmp	lr, #0
   15894:	str	lr, [sp, #48]	; 0x30
   15898:	beq	158f4 <__assert_fail@plt+0x47a8>
   1589c:	ldr	lr, [ip, #36]	; 0x24
   158a0:	mov	ip, #10
   158a4:	cmp	lr, #0
   158a8:	str	lr, [sp, #52]	; 0x34
   158ac:	movweq	ip, #9
   158b0:	b	158f8 <__assert_fail@plt+0x47ac>
   158b4:	mov	ip, #0
   158b8:	b	158f8 <__assert_fail@plt+0x47ac>
   158bc:	mov	ip, #1
   158c0:	b	158f8 <__assert_fail@plt+0x47ac>
   158c4:	mov	ip, #2
   158c8:	b	158f8 <__assert_fail@plt+0x47ac>
   158cc:	mov	ip, #3
   158d0:	b	158f8 <__assert_fail@plt+0x47ac>
   158d4:	mov	ip, #4
   158d8:	b	158f8 <__assert_fail@plt+0x47ac>
   158dc:	mov	ip, #5
   158e0:	b	158f8 <__assert_fail@plt+0x47ac>
   158e4:	mov	ip, #6
   158e8:	b	158f8 <__assert_fail@plt+0x47ac>
   158ec:	mov	ip, #7
   158f0:	b	158f8 <__assert_fail@plt+0x47ac>
   158f4:	mov	ip, #8
   158f8:	add	lr, sp, #16
   158fc:	str	ip, [sp, #4]
   15900:	str	lr, [sp]
   15904:	bl	1536c <__assert_fail@plt+0x4220>
   15908:	mov	sp, fp
   1590c:	pop	{fp, pc}
   15910:	push	{fp, lr}
   15914:	mov	fp, sp
   15918:	movw	r0, #33116	; 0x815c
   1591c:	movt	r0, #2
   15920:	ldr	r1, [r0]
   15924:	movw	r0, #28250	; 0x6e5a
   15928:	movt	r0, #1
   1592c:	bl	10ec4 <fputs_unlocked@plt>
   15930:	movw	r1, #29899	; 0x74cb
   15934:	mov	r0, #0
   15938:	mov	r2, #5
   1593c:	movt	r1, #1
   15940:	bl	10f54 <dcgettext@plt>
   15944:	movw	r2, #29919	; 0x74df
   15948:	mov	r1, r0
   1594c:	mov	r0, #1
   15950:	movt	r2, #1
   15954:	bl	11074 <__printf_chk@plt>
   15958:	movw	r1, #29941	; 0x74f5
   1595c:	mov	r0, #0
   15960:	mov	r2, #5
   15964:	movt	r1, #1
   15968:	bl	10f54 <dcgettext@plt>
   1596c:	movw	r2, #27555	; 0x6ba3
   15970:	movw	r3, #28059	; 0x6d9b
   15974:	mov	r1, r0
   15978:	mov	r0, #1
   1597c:	movt	r2, #1
   15980:	movt	r3, #1
   15984:	bl	11074 <__printf_chk@plt>
   15988:	movw	r1, #29961	; 0x7509
   1598c:	mov	r0, #0
   15990:	mov	r2, #5
   15994:	movt	r1, #1
   15998:	bl	10f54 <dcgettext@plt>
   1599c:	movw	r2, #30000	; 0x7530
   159a0:	mov	r1, r0
   159a4:	mov	r0, #1
   159a8:	movt	r2, #1
   159ac:	pop	{fp, lr}
   159b0:	b	11074 <__printf_chk@plt>
   159b4:	push	{r4, r5, r6, sl, fp, lr}
   159b8:	add	fp, sp, #16
   159bc:	mov	r4, r2
   159c0:	mov	r5, r1
   159c4:	mov	r6, r0
   159c8:	bl	1634c <__assert_fail@plt+0x5200>
   159cc:	cmp	r0, #0
   159d0:	popne	{r4, r5, r6, sl, fp, pc}
   159d4:	cmp	r6, #0
   159d8:	beq	159ec <__assert_fail@plt+0x48a0>
   159dc:	cmp	r5, #0
   159e0:	cmpne	r4, #0
   159e4:	bne	159ec <__assert_fail@plt+0x48a0>
   159e8:	pop	{r4, r5, r6, sl, fp, pc}
   159ec:	bl	15f8c <__assert_fail@plt+0x4e40>
   159f0:	push	{r4, r5, r6, sl, fp, lr}
   159f4:	add	fp, sp, #16
   159f8:	mov	r4, r2
   159fc:	mov	r5, r1
   15a00:	mov	r6, r0
   15a04:	bl	1634c <__assert_fail@plt+0x5200>
   15a08:	cmp	r0, #0
   15a0c:	popne	{r4, r5, r6, sl, fp, pc}
   15a10:	cmp	r6, #0
   15a14:	beq	15a28 <__assert_fail@plt+0x48dc>
   15a18:	cmp	r5, #0
   15a1c:	cmpne	r4, #0
   15a20:	bne	15a28 <__assert_fail@plt+0x48dc>
   15a24:	pop	{r4, r5, r6, sl, fp, pc}
   15a28:	bl	15f8c <__assert_fail@plt+0x4e40>
   15a2c:	push	{fp, lr}
   15a30:	mov	fp, sp
   15a34:	bl	16024 <__assert_fail@plt+0x4ed8>
   15a38:	cmp	r0, #0
   15a3c:	popne	{fp, pc}
   15a40:	bl	15f8c <__assert_fail@plt+0x4e40>
   15a44:	push	{fp, lr}
   15a48:	mov	fp, sp
   15a4c:	bl	16024 <__assert_fail@plt+0x4ed8>
   15a50:	cmp	r0, #0
   15a54:	popne	{fp, pc}
   15a58:	bl	15f8c <__assert_fail@plt+0x4e40>
   15a5c:	push	{fp, lr}
   15a60:	mov	fp, sp
   15a64:	bl	16024 <__assert_fail@plt+0x4ed8>
   15a68:	cmp	r0, #0
   15a6c:	popne	{fp, pc}
   15a70:	bl	15f8c <__assert_fail@plt+0x4e40>
   15a74:	push	{r4, r5, fp, lr}
   15a78:	add	fp, sp, #8
   15a7c:	mov	r4, r1
   15a80:	mov	r5, r0
   15a84:	bl	16054 <__assert_fail@plt+0x4f08>
   15a88:	cmp	r0, #0
   15a8c:	popne	{r4, r5, fp, pc}
   15a90:	cmp	r5, #0
   15a94:	beq	15aa4 <__assert_fail@plt+0x4958>
   15a98:	cmp	r4, #0
   15a9c:	bne	15aa4 <__assert_fail@plt+0x4958>
   15aa0:	pop	{r4, r5, fp, pc}
   15aa4:	bl	15f8c <__assert_fail@plt+0x4e40>
   15aa8:	push	{fp, lr}
   15aac:	mov	fp, sp
   15ab0:	cmp	r1, #0
   15ab4:	orreq	r1, r1, #1
   15ab8:	bl	16054 <__assert_fail@plt+0x4f08>
   15abc:	cmp	r0, #0
   15ac0:	popne	{fp, pc}
   15ac4:	bl	15f8c <__assert_fail@plt+0x4e40>
   15ac8:	push	{fp, lr}
   15acc:	mov	fp, sp
   15ad0:	clz	r3, r2
   15ad4:	lsr	ip, r3, #5
   15ad8:	clz	r3, r1
   15adc:	lsr	r3, r3, #5
   15ae0:	orrs	r3, r3, ip
   15ae4:	movwne	r1, #1
   15ae8:	movwne	r2, #1
   15aec:	bl	1634c <__assert_fail@plt+0x5200>
   15af0:	cmp	r0, #0
   15af4:	popne	{fp, pc}
   15af8:	bl	15f8c <__assert_fail@plt+0x4e40>
   15afc:	push	{fp, lr}
   15b00:	mov	fp, sp
   15b04:	mov	r2, r1
   15b08:	mov	r1, r0
   15b0c:	mov	r0, #0
   15b10:	bl	1634c <__assert_fail@plt+0x5200>
   15b14:	cmp	r0, #0
   15b18:	popne	{fp, pc}
   15b1c:	bl	15f8c <__assert_fail@plt+0x4e40>
   15b20:	push	{fp, lr}
   15b24:	mov	fp, sp
   15b28:	mov	r2, r1
   15b2c:	mov	r1, r0
   15b30:	clz	r0, r2
   15b34:	clz	r3, r1
   15b38:	lsr	r0, r0, #5
   15b3c:	lsr	r3, r3, #5
   15b40:	orrs	r0, r3, r0
   15b44:	movwne	r1, #1
   15b48:	movwne	r2, #1
   15b4c:	mov	r0, #0
   15b50:	bl	1634c <__assert_fail@plt+0x5200>
   15b54:	cmp	r0, #0
   15b58:	popne	{fp, pc}
   15b5c:	bl	15f8c <__assert_fail@plt+0x4e40>
   15b60:	push	{r4, r5, r6, sl, fp, lr}
   15b64:	add	fp, sp, #16
   15b68:	ldr	r5, [r1]
   15b6c:	mov	r4, r1
   15b70:	mov	r6, r0
   15b74:	cmp	r0, #0
   15b78:	beq	15b90 <__assert_fail@plt+0x4a44>
   15b7c:	mov	r0, #1
   15b80:	add	r0, r0, r5, lsr #1
   15b84:	adds	r5, r5, r0
   15b88:	bcc	15b98 <__assert_fail@plt+0x4a4c>
   15b8c:	b	15bd4 <__assert_fail@plt+0x4a88>
   15b90:	cmp	r5, #0
   15b94:	movweq	r5, #64	; 0x40
   15b98:	mov	r0, r6
   15b9c:	mov	r1, r5
   15ba0:	mov	r2, #1
   15ba4:	bl	1634c <__assert_fail@plt+0x5200>
   15ba8:	cmp	r5, #0
   15bac:	mov	r1, r5
   15bb0:	movwne	r1, #1
   15bb4:	cmp	r0, #0
   15bb8:	bne	15bcc <__assert_fail@plt+0x4a80>
   15bbc:	clz	r2, r6
   15bc0:	lsr	r2, r2, #5
   15bc4:	orrs	r1, r2, r1
   15bc8:	bne	15bd4 <__assert_fail@plt+0x4a88>
   15bcc:	str	r5, [r4]
   15bd0:	pop	{r4, r5, r6, sl, fp, pc}
   15bd4:	bl	15f8c <__assert_fail@plt+0x4e40>
   15bd8:	push	{r4, r5, r6, r7, fp, lr}
   15bdc:	add	fp, sp, #16
   15be0:	ldr	r5, [r1]
   15be4:	mov	r6, r2
   15be8:	mov	r4, r1
   15bec:	mov	r7, r0
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c0c <__assert_fail@plt+0x4ac0>
   15bf8:	mov	r0, #1
   15bfc:	add	r0, r0, r5, lsr #1
   15c00:	adds	r5, r5, r0
   15c04:	bcc	15c24 <__assert_fail@plt+0x4ad8>
   15c08:	b	15c58 <__assert_fail@plt+0x4b0c>
   15c0c:	cmp	r5, #0
   15c10:	bne	15c24 <__assert_fail@plt+0x4ad8>
   15c14:	mov	r0, #64	; 0x40
   15c18:	cmp	r6, #64	; 0x40
   15c1c:	udiv	r5, r0, r6
   15c20:	addhi	r5, r5, #1
   15c24:	mov	r0, r7
   15c28:	mov	r1, r5
   15c2c:	mov	r2, r6
   15c30:	bl	1634c <__assert_fail@plt+0x5200>
   15c34:	cmp	r0, #0
   15c38:	bne	15c50 <__assert_fail@plt+0x4b04>
   15c3c:	cmp	r7, #0
   15c40:	beq	15c58 <__assert_fail@plt+0x4b0c>
   15c44:	cmp	r6, #0
   15c48:	cmpne	r5, #0
   15c4c:	bne	15c58 <__assert_fail@plt+0x4b0c>
   15c50:	str	r5, [r4]
   15c54:	pop	{r4, r5, r6, r7, fp, pc}
   15c58:	bl	15f8c <__assert_fail@plt+0x4e40>
   15c5c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c60:	add	fp, sp, #24
   15c64:	mov	r8, r1
   15c68:	ldr	r1, [r1]
   15c6c:	mov	r5, r0
   15c70:	add	r0, r1, r1, asr #1
   15c74:	cmp	r0, r1
   15c78:	mvnvs	r0, #-2147483648	; 0x80000000
   15c7c:	cmp	r0, r3
   15c80:	mov	r7, r0
   15c84:	movgt	r7, r3
   15c88:	cmn	r3, #1
   15c8c:	movle	r7, r0
   15c90:	ldr	r0, [fp, #8]
   15c94:	cmn	r0, #1
   15c98:	ble	15cc0 <__assert_fail@plt+0x4b74>
   15c9c:	cmp	r0, #0
   15ca0:	beq	15d14 <__assert_fail@plt+0x4bc8>
   15ca4:	cmn	r7, #1
   15ca8:	ble	15ce8 <__assert_fail@plt+0x4b9c>
   15cac:	mvn	r4, #-2147483648	; 0x80000000
   15cb0:	udiv	r6, r4, r0
   15cb4:	cmp	r6, r7
   15cb8:	bge	15d14 <__assert_fail@plt+0x4bc8>
   15cbc:	b	15d24 <__assert_fail@plt+0x4bd8>
   15cc0:	cmn	r7, #1
   15cc4:	ble	15d04 <__assert_fail@plt+0x4bb8>
   15cc8:	cmn	r0, #1
   15ccc:	beq	15d14 <__assert_fail@plt+0x4bc8>
   15cd0:	mov	r6, #-2147483648	; 0x80000000
   15cd4:	mvn	r4, #-2147483648	; 0x80000000
   15cd8:	sdiv	r6, r6, r0
   15cdc:	cmp	r6, r7
   15ce0:	bge	15d14 <__assert_fail@plt+0x4bc8>
   15ce4:	b	15d24 <__assert_fail@plt+0x4bd8>
   15ce8:	beq	15d14 <__assert_fail@plt+0x4bc8>
   15cec:	mov	r6, #-2147483648	; 0x80000000
   15cf0:	mvn	r4, #-2147483648	; 0x80000000
   15cf4:	sdiv	r6, r6, r7
   15cf8:	cmp	r6, r0
   15cfc:	bge	15d14 <__assert_fail@plt+0x4bc8>
   15d00:	b	15d24 <__assert_fail@plt+0x4bd8>
   15d04:	mvn	r4, #-2147483648	; 0x80000000
   15d08:	sdiv	r6, r4, r0
   15d0c:	cmp	r7, r6
   15d10:	blt	15d24 <__assert_fail@plt+0x4bd8>
   15d14:	mul	r6, r7, r0
   15d18:	mov	r4, #64	; 0x40
   15d1c:	cmp	r6, #63	; 0x3f
   15d20:	bgt	15d2c <__assert_fail@plt+0x4be0>
   15d24:	sdiv	r7, r4, r0
   15d28:	mul	r6, r7, r0
   15d2c:	cmp	r5, #0
   15d30:	moveq	r4, #0
   15d34:	streq	r4, [r8]
   15d38:	sub	r4, r7, r1
   15d3c:	cmp	r4, r2
   15d40:	bge	15dec <__assert_fail@plt+0x4ca0>
   15d44:	add	r7, r1, r2
   15d48:	mov	r6, #0
   15d4c:	mov	r2, #0
   15d50:	cmp	r7, r3
   15d54:	movwgt	r6, #1
   15d58:	cmn	r3, #1
   15d5c:	movwgt	r2, #1
   15d60:	cmp	r7, r1
   15d64:	bvs	15e20 <__assert_fail@plt+0x4cd4>
   15d68:	ands	r1, r2, r6
   15d6c:	bne	15e20 <__assert_fail@plt+0x4cd4>
   15d70:	cmn	r0, #1
   15d74:	ble	15d9c <__assert_fail@plt+0x4c50>
   15d78:	cmp	r0, #0
   15d7c:	beq	15de8 <__assert_fail@plt+0x4c9c>
   15d80:	cmn	r7, #1
   15d84:	ble	15dc0 <__assert_fail@plt+0x4c74>
   15d88:	mvn	r1, #-2147483648	; 0x80000000
   15d8c:	udiv	r1, r1, r0
   15d90:	cmp	r1, r7
   15d94:	bge	15de8 <__assert_fail@plt+0x4c9c>
   15d98:	b	15e20 <__assert_fail@plt+0x4cd4>
   15d9c:	cmn	r7, #1
   15da0:	ble	15dd8 <__assert_fail@plt+0x4c8c>
   15da4:	cmn	r0, #1
   15da8:	beq	15de8 <__assert_fail@plt+0x4c9c>
   15dac:	mov	r1, #-2147483648	; 0x80000000
   15db0:	sdiv	r1, r1, r0
   15db4:	cmp	r1, r7
   15db8:	bge	15de8 <__assert_fail@plt+0x4c9c>
   15dbc:	b	15e20 <__assert_fail@plt+0x4cd4>
   15dc0:	beq	15de8 <__assert_fail@plt+0x4c9c>
   15dc4:	mov	r1, #-2147483648	; 0x80000000
   15dc8:	sdiv	r1, r1, r7
   15dcc:	cmp	r1, r0
   15dd0:	bge	15de8 <__assert_fail@plt+0x4c9c>
   15dd4:	b	15e20 <__assert_fail@plt+0x4cd4>
   15dd8:	mvn	r1, #-2147483648	; 0x80000000
   15ddc:	sdiv	r1, r1, r0
   15de0:	cmp	r7, r1
   15de4:	blt	15e20 <__assert_fail@plt+0x4cd4>
   15de8:	mul	r6, r7, r0
   15dec:	mov	r0, r5
   15df0:	mov	r1, r6
   15df4:	bl	16054 <__assert_fail@plt+0x4f08>
   15df8:	cmp	r6, #0
   15dfc:	movwne	r6, #1
   15e00:	cmp	r0, #0
   15e04:	bne	15e18 <__assert_fail@plt+0x4ccc>
   15e08:	clz	r1, r5
   15e0c:	lsr	r1, r1, #5
   15e10:	orrs	r1, r1, r6
   15e14:	bne	15e20 <__assert_fail@plt+0x4cd4>
   15e18:	str	r7, [r8]
   15e1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e20:	bl	15f8c <__assert_fail@plt+0x4e40>
   15e24:	push	{fp, lr}
   15e28:	mov	fp, sp
   15e2c:	mov	r1, #1
   15e30:	bl	15fd0 <__assert_fail@plt+0x4e84>
   15e34:	cmp	r0, #0
   15e38:	popne	{fp, pc}
   15e3c:	bl	15f8c <__assert_fail@plt+0x4e40>
   15e40:	push	{fp, lr}
   15e44:	mov	fp, sp
   15e48:	bl	15fd0 <__assert_fail@plt+0x4e84>
   15e4c:	cmp	r0, #0
   15e50:	popne	{fp, pc}
   15e54:	bl	15f8c <__assert_fail@plt+0x4e40>
   15e58:	push	{fp, lr}
   15e5c:	mov	fp, sp
   15e60:	mov	r1, #1
   15e64:	bl	15fd0 <__assert_fail@plt+0x4e84>
   15e68:	cmp	r0, #0
   15e6c:	popne	{fp, pc}
   15e70:	bl	15f8c <__assert_fail@plt+0x4e40>
   15e74:	push	{fp, lr}
   15e78:	mov	fp, sp
   15e7c:	bl	15fd0 <__assert_fail@plt+0x4e84>
   15e80:	cmp	r0, #0
   15e84:	popne	{fp, pc}
   15e88:	bl	15f8c <__assert_fail@plt+0x4e40>
   15e8c:	push	{r4, r5, r6, sl, fp, lr}
   15e90:	add	fp, sp, #16
   15e94:	mov	r5, r0
   15e98:	mov	r0, r1
   15e9c:	mov	r4, r1
   15ea0:	bl	16024 <__assert_fail@plt+0x4ed8>
   15ea4:	cmp	r0, #0
   15ea8:	beq	15ec4 <__assert_fail@plt+0x4d78>
   15eac:	mov	r1, r5
   15eb0:	mov	r2, r4
   15eb4:	mov	r6, r0
   15eb8:	bl	10f24 <memcpy@plt>
   15ebc:	mov	r0, r6
   15ec0:	pop	{r4, r5, r6, sl, fp, pc}
   15ec4:	bl	15f8c <__assert_fail@plt+0x4e40>
   15ec8:	push	{r4, r5, r6, sl, fp, lr}
   15ecc:	add	fp, sp, #16
   15ed0:	mov	r5, r0
   15ed4:	mov	r0, r1
   15ed8:	mov	r4, r1
   15edc:	bl	16024 <__assert_fail@plt+0x4ed8>
   15ee0:	cmp	r0, #0
   15ee4:	beq	15f00 <__assert_fail@plt+0x4db4>
   15ee8:	mov	r1, r5
   15eec:	mov	r2, r4
   15ef0:	mov	r6, r0
   15ef4:	bl	10f24 <memcpy@plt>
   15ef8:	mov	r0, r6
   15efc:	pop	{r4, r5, r6, sl, fp, pc}
   15f00:	bl	15f8c <__assert_fail@plt+0x4e40>
   15f04:	push	{r4, r5, r6, sl, fp, lr}
   15f08:	add	fp, sp, #16
   15f0c:	mov	r5, r0
   15f10:	add	r0, r1, #1
   15f14:	mov	r4, r1
   15f18:	bl	16024 <__assert_fail@plt+0x4ed8>
   15f1c:	cmp	r0, #0
   15f20:	beq	15f48 <__assert_fail@plt+0x4dfc>
   15f24:	mov	r6, r0
   15f28:	mov	r0, #0
   15f2c:	mov	r1, r5
   15f30:	mov	r2, r4
   15f34:	strb	r0, [r6, r4]
   15f38:	mov	r0, r6
   15f3c:	bl	10f24 <memcpy@plt>
   15f40:	mov	r0, r6
   15f44:	pop	{r4, r5, r6, sl, fp, pc}
   15f48:	bl	15f8c <__assert_fail@plt+0x4e40>
   15f4c:	push	{r4, r5, r6, sl, fp, lr}
   15f50:	add	fp, sp, #16
   15f54:	mov	r4, r0
   15f58:	bl	1102c <strlen@plt>
   15f5c:	add	r5, r0, #1
   15f60:	mov	r0, r5
   15f64:	bl	16024 <__assert_fail@plt+0x4ed8>
   15f68:	cmp	r0, #0
   15f6c:	beq	15f88 <__assert_fail@plt+0x4e3c>
   15f70:	mov	r1, r4
   15f74:	mov	r2, r5
   15f78:	mov	r6, r0
   15f7c:	bl	10f24 <memcpy@plt>
   15f80:	mov	r0, r6
   15f84:	pop	{r4, r5, r6, sl, fp, pc}
   15f88:	bl	15f8c <__assert_fail@plt+0x4e40>
   15f8c:	push	{fp, lr}
   15f90:	mov	fp, sp
   15f94:	movw	r0, #33020	; 0x80fc
   15f98:	movw	r1, #30076	; 0x757c
   15f9c:	mov	r2, #5
   15fa0:	movt	r0, #2
   15fa4:	movt	r1, #1
   15fa8:	ldr	r4, [r0]
   15fac:	mov	r0, #0
   15fb0:	bl	10f54 <dcgettext@plt>
   15fb4:	movw	r2, #29038	; 0x716e
   15fb8:	mov	r3, r0
   15fbc:	mov	r0, r4
   15fc0:	mov	r1, #0
   15fc4:	movt	r2, #1
   15fc8:	bl	10fcc <error@plt>
   15fcc:	bl	11134 <abort@plt>
   15fd0:	clz	r2, r1
   15fd4:	clz	r3, r0
   15fd8:	lsr	r2, r2, #5
   15fdc:	lsr	r3, r3, #5
   15fe0:	orrs	r2, r3, r2
   15fe4:	movwne	r1, #1
   15fe8:	movwne	r0, #1
   15fec:	cmp	r1, #0
   15ff0:	beq	16020 <__assert_fail@plt+0x4ed4>
   15ff4:	mvn	r2, #-2147483648	; 0x80000000
   15ff8:	udiv	r2, r2, r1
   15ffc:	cmp	r2, r0
   16000:	bcs	16020 <__assert_fail@plt+0x4ed4>
   16004:	push	{fp, lr}
   16008:	mov	fp, sp
   1600c:	bl	11044 <__errno_location@plt>
   16010:	mov	r1, #12
   16014:	str	r1, [r0]
   16018:	mov	r0, #0
   1601c:	pop	{fp, pc}
   16020:	b	10eb8 <calloc@plt>
   16024:	cmp	r0, #0
   16028:	movweq	r0, #1
   1602c:	cmn	r0, #1
   16030:	ble	16038 <__assert_fail@plt+0x4eec>
   16034:	b	10fd8 <malloc@plt>
   16038:	push	{fp, lr}
   1603c:	mov	fp, sp
   16040:	bl	11044 <__errno_location@plt>
   16044:	mov	r1, #12
   16048:	str	r1, [r0]
   1604c:	mov	r0, #0
   16050:	pop	{fp, pc}
   16054:	push	{fp, lr}
   16058:	mov	fp, sp
   1605c:	cmp	r0, #0
   16060:	beq	1607c <__assert_fail@plt+0x4f30>
   16064:	cmp	r1, #0
   16068:	beq	16088 <__assert_fail@plt+0x4f3c>
   1606c:	cmn	r1, #1
   16070:	ble	16094 <__assert_fail@plt+0x4f48>
   16074:	pop	{fp, lr}
   16078:	b	10f60 <realloc@plt>
   1607c:	mov	r0, r1
   16080:	pop	{fp, lr}
   16084:	b	16024 <__assert_fail@plt+0x4ed8>
   16088:	bl	12d3c <__assert_fail@plt+0x1bf0>
   1608c:	mov	r0, #0
   16090:	pop	{fp, pc}
   16094:	bl	11044 <__errno_location@plt>
   16098:	mov	r1, #12
   1609c:	str	r1, [r0]
   160a0:	mov	r0, #0
   160a4:	pop	{fp, pc}
   160a8:	push	{r4, r5, r6, sl, fp, lr}
   160ac:	add	fp, sp, #16
   160b0:	mov	r4, r0
   160b4:	bl	10fb4 <__fpending@plt>
   160b8:	ldr	r6, [r4]
   160bc:	mov	r5, r0
   160c0:	mov	r0, r4
   160c4:	bl	12c38 <__assert_fail@plt+0x1aec>
   160c8:	tst	r6, #32
   160cc:	bne	16104 <__assert_fail@plt+0x4fb8>
   160d0:	cmp	r0, #0
   160d4:	mov	r4, r0
   160d8:	mvnne	r4, #0
   160dc:	cmp	r5, #0
   160e0:	bne	16110 <__assert_fail@plt+0x4fc4>
   160e4:	cmp	r0, #0
   160e8:	beq	16110 <__assert_fail@plt+0x4fc4>
   160ec:	bl	11044 <__errno_location@plt>
   160f0:	ldr	r0, [r0]
   160f4:	subs	r4, r0, #9
   160f8:	mvnne	r4, #0
   160fc:	mov	r0, r4
   16100:	pop	{r4, r5, r6, sl, fp, pc}
   16104:	mvn	r4, #0
   16108:	cmp	r0, #0
   1610c:	beq	16118 <__assert_fail@plt+0x4fcc>
   16110:	mov	r0, r4
   16114:	pop	{r4, r5, r6, sl, fp, pc}
   16118:	bl	11044 <__errno_location@plt>
   1611c:	mov	r1, #0
   16120:	str	r1, [r0]
   16124:	mov	r0, r4
   16128:	pop	{r4, r5, r6, sl, fp, pc}
   1612c:	push	{r4, r5, fp, lr}
   16130:	add	fp, sp, #8
   16134:	ldrd	r4, [r0, #16]
   16138:	mov	r2, r0
   1613c:	mov	r0, #0
   16140:	cmp	r5, r4
   16144:	pophi	{r4, r5, fp, pc}
   16148:	ldr	r3, [r2, #4]
   1614c:	ldr	r2, [r2, #8]
   16150:	subs	r2, r2, r3
   16154:	movne	r0, r3
   16158:	strne	r2, [r1]
   1615c:	pop	{r4, r5, fp, pc}
   16160:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16164:	add	fp, sp, #24
   16168:	sub	sp, sp, #8
   1616c:	sub	sp, sp, #4096	; 0x1000
   16170:	mov	r8, #0
   16174:	cmp	r1, #0
   16178:	beq	16288 <__assert_fail@plt+0x513c>
   1617c:	mov	r6, r1
   16180:	mov	r5, r0
   16184:	bl	16388 <__assert_fail@plt+0x523c>
   16188:	mov	r7, r0
   1618c:	add	r4, sp, #8
   16190:	cmp	r7, #0
   16194:	beq	16200 <__assert_fail@plt+0x50b4>
   16198:	mov	r0, r5
   1619c:	mov	r1, r4
   161a0:	bl	1612c <__assert_fail@plt+0x4fe0>
   161a4:	cmp	r0, #0
   161a8:	ldrne	r0, [sp, #8]
   161ac:	cmpne	r0, #0
   161b0:	beq	161d8 <__assert_fail@plt+0x508c>
   161b4:	ldr	r1, [r5, #4]
   161b8:	cmp	r0, r6
   161bc:	movcs	r0, r6
   161c0:	subs	r6, r6, r0
   161c4:	add	r1, r1, r0
   161c8:	str	r1, [r5, #4]
   161cc:	beq	16288 <__assert_fail@plt+0x513c>
   161d0:	subs	r7, r7, r0
   161d4:	beq	16200 <__assert_fail@plt+0x50b4>
   161d8:	mov	r0, r5
   161dc:	bl	11068 <fgetc@plt>
   161e0:	cmn	r0, #1
   161e4:	beq	16294 <__assert_fail@plt+0x5148>
   161e8:	subs	r6, r6, #1
   161ec:	mov	r0, r6
   161f0:	movwne	r0, #1
   161f4:	sub	r7, r7, r0
   161f8:	bne	16190 <__assert_fail@plt+0x5044>
   161fc:	b	16288 <__assert_fail@plt+0x513c>
   16200:	mov	r0, r5
   16204:	bl	11080 <fileno@plt>
   16208:	cmp	r0, #0
   1620c:	blt	16250 <__assert_fail@plt+0x5104>
   16210:	mov	r4, #1
   16214:	mov	r2, #0
   16218:	mov	r3, #0
   1621c:	str	r4, [sp]
   16220:	bl	10f90 <lseek64@plt>
   16224:	cmp	r1, #0
   16228:	blt	16250 <__assert_fail@plt+0x5104>
   1622c:	mov	r0, r5
   16230:	mov	r2, r6
   16234:	mov	r3, #0
   16238:	str	r4, [sp]
   1623c:	bl	12d64 <__assert_fail@plt+0x1c18>
   16240:	mov	r8, r0
   16244:	mov	r0, r8
   16248:	sub	sp, fp, #24
   1624c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16250:	add	r4, sp, #8
   16254:	cmp	r6, #4096	; 0x1000
   16258:	mov	r7, r6
   1625c:	mov	r0, r4
   16260:	mov	r1, #1
   16264:	mov	r3, r5
   16268:	movcs	r7, #4096	; 0x1000
   1626c:	mov	r2, r7
   16270:	bl	10fa8 <fread@plt>
   16274:	cmp	r0, r7
   16278:	subcs	r6, r6, r7
   1627c:	bcc	16294 <__assert_fail@plt+0x5148>
   16280:	cmp	r6, #0
   16284:	bne	16254 <__assert_fail@plt+0x5108>
   16288:	mov	r0, r8
   1628c:	sub	sp, fp, #24
   16290:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16294:	mov	r0, r5
   16298:	bl	10f0c <ferror@plt>
   1629c:	mov	r8, r0
   162a0:	cmp	r0, #0
   162a4:	mvnne	r8, #0
   162a8:	mov	r0, r8
   162ac:	sub	sp, fp, #24
   162b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162b4:	push	{fp, lr}
   162b8:	mov	fp, sp
   162bc:	mov	r0, #14
   162c0:	bl	110ec <nl_langinfo@plt>
   162c4:	movw	r1, #28251	; 0x6e5b
   162c8:	cmp	r0, #0
   162cc:	movt	r1, #1
   162d0:	movne	r1, r0
   162d4:	movw	r0, #30093	; 0x758d
   162d8:	ldrb	r2, [r1]
   162dc:	movt	r0, #1
   162e0:	cmp	r2, #0
   162e4:	movne	r0, r1
   162e8:	pop	{fp, pc}
   162ec:	push	{r4, r5, r6, r7, fp, lr}
   162f0:	add	fp, sp, #16
   162f4:	sub	sp, sp, #8
   162f8:	add	r5, sp, #4
   162fc:	cmp	r0, #0
   16300:	mov	r7, r2
   16304:	mov	r4, r1
   16308:	movne	r5, r0
   1630c:	mov	r0, r5
   16310:	bl	10fc0 <mbrtowc@plt>
   16314:	mov	r6, r0
   16318:	cmp	r7, #0
   1631c:	beq	16340 <__assert_fail@plt+0x51f4>
   16320:	cmn	r6, #2
   16324:	bcc	16340 <__assert_fail@plt+0x51f4>
   16328:	mov	r0, #0
   1632c:	bl	163c4 <__assert_fail@plt+0x5278>
   16330:	cmp	r0, #0
   16334:	ldrbeq	r0, [r4]
   16338:	moveq	r6, #1
   1633c:	streq	r0, [r5]
   16340:	mov	r0, r6
   16344:	sub	sp, fp, #16
   16348:	pop	{r4, r5, r6, r7, fp, pc}
   1634c:	cmp	r2, #0
   16350:	beq	16380 <__assert_fail@plt+0x5234>
   16354:	mvn	r3, #0
   16358:	udiv	r3, r3, r2
   1635c:	cmp	r3, r1
   16360:	bcs	16380 <__assert_fail@plt+0x5234>
   16364:	push	{fp, lr}
   16368:	mov	fp, sp
   1636c:	bl	11044 <__errno_location@plt>
   16370:	mov	r1, #12
   16374:	str	r1, [r0]
   16378:	mov	r0, #0
   1637c:	pop	{fp, pc}
   16380:	mul	r1, r2, r1
   16384:	b	16054 <__assert_fail@plt+0x4f08>
   16388:	ldrd	r2, [r0, #16]
   1638c:	mov	r1, #0
   16390:	cmp	r3, r2
   16394:	bhi	163bc <__assert_fail@plt+0x5270>
   16398:	ldmib	r0, {r1, r2}
   1639c:	ldrb	r3, [r0, #1]
   163a0:	sub	r1, r2, r1
   163a4:	mov	r2, #0
   163a8:	tst	r3, #1
   163ac:	ldrne	r2, [r0, #36]	; 0x24
   163b0:	ldrne	r0, [r0, #44]	; 0x2c
   163b4:	subne	r2, r0, r2
   163b8:	add	r1, r1, r2
   163bc:	mov	r0, r1
   163c0:	bx	lr
   163c4:	push	{r4, sl, fp, lr}
   163c8:	add	fp, sp, #8
   163cc:	sub	sp, sp, #264	; 0x108
   163d0:	add	r1, sp, #7
   163d4:	movw	r2, #257	; 0x101
   163d8:	bl	16428 <__assert_fail@plt+0x52dc>
   163dc:	mov	r4, #0
   163e0:	cmp	r0, #0
   163e4:	bne	1641c <__assert_fail@plt+0x52d0>
   163e8:	movw	r1, #30099	; 0x7593
   163ec:	add	r0, sp, #7
   163f0:	movt	r1, #1
   163f4:	bl	10ed0 <strcmp@plt>
   163f8:	cmp	r0, #0
   163fc:	beq	1641c <__assert_fail@plt+0x52d0>
   16400:	movw	r1, #30101	; 0x7595
   16404:	add	r0, sp, #7
   16408:	movt	r1, #1
   1640c:	bl	10ed0 <strcmp@plt>
   16410:	mov	r4, r0
   16414:	cmp	r0, #0
   16418:	movwne	r4, #1
   1641c:	mov	r0, r4
   16420:	sub	sp, fp, #8
   16424:	pop	{r4, sl, fp, pc}
   16428:	push	{r4, r5, r6, r7, fp, lr}
   1642c:	add	fp, sp, #16
   16430:	mov	r4, r1
   16434:	mov	r1, #0
   16438:	mov	r6, r2
   1643c:	bl	110d4 <setlocale@plt>
   16440:	cmp	r0, #0
   16444:	beq	16474 <__assert_fail@plt+0x5328>
   16448:	mov	r7, r0
   1644c:	bl	1102c <strlen@plt>
   16450:	cmp	r0, r6
   16454:	bcs	16494 <__assert_fail@plt+0x5348>
   16458:	add	r2, r0, #1
   1645c:	mov	r0, r4
   16460:	mov	r1, r7
   16464:	bl	10f24 <memcpy@plt>
   16468:	mov	r5, #0
   1646c:	mov	r0, r5
   16470:	pop	{r4, r5, r6, r7, fp, pc}
   16474:	cmp	r6, #0
   16478:	mov	r5, #22
   1647c:	movne	r0, #0
   16480:	strbne	r0, [r4]
   16484:	movne	r0, r5
   16488:	popne	{r4, r5, r6, r7, fp, pc}
   1648c:	mov	r0, r5
   16490:	pop	{r4, r5, r6, r7, fp, pc}
   16494:	mov	r5, #34	; 0x22
   16498:	cmp	r6, #0
   1649c:	beq	164bc <__assert_fail@plt+0x5370>
   164a0:	sub	r6, r6, #1
   164a4:	mov	r0, r4
   164a8:	mov	r1, r7
   164ac:	mov	r2, r6
   164b0:	bl	10f24 <memcpy@plt>
   164b4:	mov	r0, #0
   164b8:	strb	r0, [r4, r6]
   164bc:	mov	r0, r5
   164c0:	pop	{r4, r5, r6, r7, fp, pc}
   164c4:	mov	r1, #0
   164c8:	b	110d4 <setlocale@plt>
   164cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164d0:	mov	r7, r0
   164d4:	ldr	r6, [pc, #72]	; 16524 <__assert_fail@plt+0x53d8>
   164d8:	ldr	r5, [pc, #72]	; 16528 <__assert_fail@plt+0x53dc>
   164dc:	add	r6, pc, r6
   164e0:	add	r5, pc, r5
   164e4:	sub	r6, r6, r5
   164e8:	mov	r8, r1
   164ec:	mov	r9, r2
   164f0:	bl	10e98 <calloc@plt-0x20>
   164f4:	asrs	r6, r6, #2
   164f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   164fc:	mov	r4, #0
   16500:	add	r4, r4, #1
   16504:	ldr	r3, [r5], #4
   16508:	mov	r2, r9
   1650c:	mov	r1, r8
   16510:	mov	r0, r7
   16514:	blx	r3
   16518:	cmp	r6, r4
   1651c:	bne	16500 <__assert_fail@plt+0x53b4>
   16520:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16524:	andeq	r1, r1, r8, lsr #20
   16528:	andeq	r1, r1, r0, lsr #20
   1652c:	bx	lr
   16530:	ldr	r3, [pc, #12]	; 16544 <__assert_fail@plt+0x53f8>
   16534:	mov	r1, #0
   16538:	add	r3, pc, r3
   1653c:	ldr	r2, [r3]
   16540:	b	11050 <__cxa_atexit@plt>
   16544:			; <UNDEFINED> instruction: 0x00011bb4

Disassembly of section .fini:

00016548 <.fini>:
   16548:	push	{r3, lr}
   1654c:	pop	{r3, pc}
