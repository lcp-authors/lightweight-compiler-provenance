
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00011040 <.init>:
   11040:	push	{r3, lr}
   11044:	bl	1136c <__assert_fail@plt+0x48>
   11048:	pop	{r3, pc}

Disassembly of section .plt:

0001104c <calloc@plt-0x14>:
   1104c:	push	{lr}		; (str lr, [sp, #-4]!)
   11050:	ldr	lr, [pc, #4]	; 1105c <calloc@plt-0x4>
   11054:	add	lr, pc, lr
   11058:	ldr	pc, [lr, #8]!
   1105c:	andeq	fp, r1, r4, lsr #31

00011060 <calloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #4004]!	; 0xfa4

0001106c <fputs_unlocked@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #3996]!	; 0xf9c

00011078 <raise@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #3988]!	; 0xf94

00011084 <__strncat_chk@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011090 <strcmp@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #3972]!	; 0xf84

0001109c <strtol@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a8 <fflush@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #3956]!	; 0xf74

000110b4 <wcwidth@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #3948]!	; 0xf6c

000110c0 <memmove@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #3940]!	; 0xf64

000110cc <free@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d8 <_exit@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3924]!	; 0xf54

000110e4 <memcpy@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3916]!	; 0xf4c

000110f0 <__strtoull_internal@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3908]!	; 0xf44

000110fc <mbsinit@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3900]!	; 0xf3c

00011108 <dcgettext@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3892]!	; 0xf34

00011114 <realloc@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011120 <textdomain@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3876]!	; 0xf24

0001112c <iswprint@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3868]!	; 0xf1c

00011138 <fwrite@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3860]!	; 0xf14

00011144 <lseek64@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011150 <__ctype_get_mb_cur_max@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3844]!	; 0xf04

0001115c <strcpy@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3836]!	; 0xefc

00011168 <__fpending@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3828]!	; 0xef4

00011174 <mbrtowc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3820]!	; 0xeec

00011180 <wcstombs@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3812]!	; 0xee4

0001118c <error@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3804]!	; 0xedc

00011198 <malloc@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3796]!	; 0xed4

000111a4 <__libc_start_main@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3788]!	; 0xecc

000111b0 <__freading@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3780]!	; 0xec4

000111bc <__gmon_start__@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3772]!	; 0xebc

000111c8 <getopt_long@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111d4 <__ctype_b_loc@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3756]!	; 0xeac

000111e0 <exit@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3748]!	; 0xea4

000111ec <bcmp@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f8 <strlen@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3732]!	; 0xe94

00011204 <strchr@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011210 <__errno_location@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3716]!	; 0xe84

0001121c <__cxa_atexit@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3708]!	; 0xe7c

00011228 <memset@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3700]!	; 0xe74

00011234 <__printf_chk@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011240 <fileno@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3684]!	; 0xe64

0001124c <__fprintf_chk@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3676]!	; 0xe5c

00011258 <memchr@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3668]!	; 0xe54

00011264 <fclose@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011270 <fseeko64@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3652]!	; 0xe44

0001127c <__overflow@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3644]!	; 0xe3c

00011288 <setlocale@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3636]!	; 0xe34

00011294 <wcswidth@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3628]!	; 0xe2c

000112a0 <strrchr@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3620]!	; 0xe24

000112ac <nl_langinfo@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b8 <mbstowcs@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3604]!	; 0xe14

000112c4 <qsort@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112d0 <bindtextdomain@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3588]!	; 0xe04

000112dc <getdelim@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e8 <strncmp@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112f4 <abort@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3564]!	; 0xdec

00011300 <__snprintf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3556]!	; 0xde4

0001130c <strspn@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3548]!	; 0xddc

00011318 <__mempcpy_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3540]!	; 0xdd4

00011324 <__assert_fail@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3532]!	; 0xdcc

Disassembly of section .text:

00011330 <.text>:
   11330:	mov	fp, #0
   11334:	mov	lr, #0
   11338:	pop	{r1}		; (ldr r1, [sp], #4)
   1133c:	mov	r2, sp
   11340:	push	{r2}		; (str r2, [sp, #-4]!)
   11344:	push	{r0}		; (str r0, [sp, #-4]!)
   11348:	ldr	ip, [pc, #16]	; 11360 <__assert_fail@plt+0x3c>
   1134c:	push	{ip}		; (str ip, [sp, #-4]!)
   11350:	ldr	r0, [pc, #12]	; 11364 <__assert_fail@plt+0x40>
   11354:	ldr	r3, [pc, #12]	; 11368 <__assert_fail@plt+0x44>
   11358:	bl	111a4 <__libc_start_main@plt>
   1135c:	bl	112f4 <abort@plt>
   11360:	andeq	sl, r1, r0, asr #5
   11364:	andeq	r1, r1, ip, ror #18
   11368:	andeq	sl, r1, r0, ror #4
   1136c:	ldr	r3, [pc, #20]	; 11388 <__assert_fail@plt+0x64>
   11370:	ldr	r2, [pc, #20]	; 1138c <__assert_fail@plt+0x68>
   11374:	add	r3, pc, r3
   11378:	ldr	r2, [r3, r2]
   1137c:	cmp	r2, #0
   11380:	bxeq	lr
   11384:	b	111bc <__gmon_start__@plt>
   11388:	andeq	fp, r1, r4, lsl #25
   1138c:	strdeq	r0, [r0], -ip
   11390:	ldr	r0, [pc, #24]	; 113b0 <__assert_fail@plt+0x8c>
   11394:	ldr	r3, [pc, #24]	; 113b4 <__assert_fail@plt+0x90>
   11398:	cmp	r3, r0
   1139c:	bxeq	lr
   113a0:	ldr	r3, [pc, #16]	; 113b8 <__assert_fail@plt+0x94>
   113a4:	cmp	r3, #0
   113a8:	bxeq	lr
   113ac:	bx	r3
   113b0:	andeq	sp, r2, r8, ror r1
   113b4:	andeq	sp, r2, r8, ror r1
   113b8:	andeq	r0, r0, r0
   113bc:	ldr	r0, [pc, #36]	; 113e8 <__assert_fail@plt+0xc4>
   113c0:	ldr	r1, [pc, #36]	; 113ec <__assert_fail@plt+0xc8>
   113c4:	sub	r1, r1, r0
   113c8:	asr	r1, r1, #2
   113cc:	add	r1, r1, r1, lsr #31
   113d0:	asrs	r1, r1, #1
   113d4:	bxeq	lr
   113d8:	ldr	r3, [pc, #16]	; 113f0 <__assert_fail@plt+0xcc>
   113dc:	cmp	r3, #0
   113e0:	bxeq	lr
   113e4:	bx	r3
   113e8:	andeq	sp, r2, r8, ror r1
   113ec:	andeq	sp, r2, r8, ror r1
   113f0:	andeq	r0, r0, r0
   113f4:	push	{r4, lr}
   113f8:	ldr	r4, [pc, #24]	; 11418 <__assert_fail@plt+0xf4>
   113fc:	ldrb	r3, [r4]
   11400:	cmp	r3, #0
   11404:	popne	{r4, pc}
   11408:	bl	11390 <__assert_fail@plt+0x6c>
   1140c:	mov	r3, #1
   11410:	strb	r3, [r4]
   11414:	pop	{r4, pc}
   11418:	muleq	r2, ip, r1
   1141c:	b	113bc <__assert_fail@plt+0x98>
   11420:	push	{fp, lr}
   11424:	mov	fp, sp
   11428:	sub	sp, sp, #88	; 0x58
   1142c:	mov	r4, r0
   11430:	cmp	r0, #0
   11434:	bne	11928 <__assert_fail@plt+0x604>
   11438:	movw	r1, #41747	; 0xa313
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #1
   11448:	bl	11108 <dcgettext@plt>
   1144c:	movw	r5, #53760	; 0xd200
   11450:	mov	r1, r0
   11454:	mov	r0, #1
   11458:	movt	r5, #2
   1145c:	ldr	r2, [r5]
   11460:	bl	11234 <__printf_chk@plt>
   11464:	movw	r1, #41782	; 0xa336
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	11108 <dcgettext@plt>
   11478:	movw	r7, #53652	; 0xd194
   1147c:	movt	r7, #2
   11480:	ldr	r1, [r7]
   11484:	bl	1106c <fputs_unlocked@plt>
   11488:	movw	r1, #46384	; 0xb530
   1148c:	mov	r0, #0
   11490:	mov	r2, #5
   11494:	movt	r1, #1
   11498:	bl	11108 <dcgettext@plt>
   1149c:	ldr	r1, [r7]
   114a0:	bl	1106c <fputs_unlocked@plt>
   114a4:	movw	r1, #41861	; 0xa385
   114a8:	mov	r0, #0
   114ac:	mov	r2, #5
   114b0:	movt	r1, #1
   114b4:	bl	11108 <dcgettext@plt>
   114b8:	ldr	r1, [r7]
   114bc:	bl	1106c <fputs_unlocked@plt>
   114c0:	movw	r1, #41920	; 0xa3c0
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	11108 <dcgettext@plt>
   114d4:	ldr	r1, [r7]
   114d8:	bl	1106c <fputs_unlocked@plt>
   114dc:	movw	r1, #41992	; 0xa408
   114e0:	mov	r0, #0
   114e4:	mov	r2, #5
   114e8:	movt	r1, #1
   114ec:	bl	11108 <dcgettext@plt>
   114f0:	ldr	r1, [r7]
   114f4:	bl	1106c <fputs_unlocked@plt>
   114f8:	movw	r1, #42113	; 0xa481
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11108 <dcgettext@plt>
   1150c:	ldr	r1, [r7]
   11510:	bl	1106c <fputs_unlocked@plt>
   11514:	movw	r1, #42231	; 0xa4f7
   11518:	mov	r0, #0
   1151c:	mov	r2, #5
   11520:	movt	r1, #1
   11524:	bl	11108 <dcgettext@plt>
   11528:	ldr	r1, [r7]
   1152c:	bl	1106c <fputs_unlocked@plt>
   11530:	movw	r1, #42349	; 0xa56d
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	movt	r1, #1
   11540:	bl	11108 <dcgettext@plt>
   11544:	ldr	r1, [r7]
   11548:	bl	1106c <fputs_unlocked@plt>
   1154c:	movw	r1, #42428	; 0xa5bc
   11550:	mov	r0, #0
   11554:	mov	r2, #5
   11558:	movt	r1, #1
   1155c:	bl	11108 <dcgettext@plt>
   11560:	ldr	r1, [r7]
   11564:	bl	1106c <fputs_unlocked@plt>
   11568:	movw	r1, #42584	; 0xa658
   1156c:	mov	r0, #0
   11570:	mov	r2, #5
   11574:	movt	r1, #1
   11578:	bl	11108 <dcgettext@plt>
   1157c:	ldr	r1, [r7]
   11580:	bl	1106c <fputs_unlocked@plt>
   11584:	movw	r1, #42719	; 0xa6df
   11588:	mov	r0, #0
   1158c:	mov	r2, #5
   11590:	movt	r1, #1
   11594:	bl	11108 <dcgettext@plt>
   11598:	ldr	r1, [r7]
   1159c:	bl	1106c <fputs_unlocked@plt>
   115a0:	movw	r1, #42851	; 0xa763
   115a4:	mov	r0, #0
   115a8:	mov	r2, #5
   115ac:	movt	r1, #1
   115b0:	bl	11108 <dcgettext@plt>
   115b4:	ldr	r1, [r7]
   115b8:	bl	1106c <fputs_unlocked@plt>
   115bc:	movw	r1, #43175	; 0xa8a7
   115c0:	mov	r0, #0
   115c4:	mov	r2, #5
   115c8:	movt	r1, #1
   115cc:	bl	11108 <dcgettext@plt>
   115d0:	ldr	r1, [r7]
   115d4:	bl	1106c <fputs_unlocked@plt>
   115d8:	movw	r1, #43330	; 0xa942
   115dc:	mov	r0, #0
   115e0:	mov	r2, #5
   115e4:	movt	r1, #1
   115e8:	bl	11108 <dcgettext@plt>
   115ec:	ldr	r1, [r7]
   115f0:	bl	1106c <fputs_unlocked@plt>
   115f4:	movw	r1, #43453	; 0xa9bd
   115f8:	mov	r0, #0
   115fc:	mov	r2, #5
   11600:	movt	r1, #1
   11604:	bl	11108 <dcgettext@plt>
   11608:	ldr	r1, [r7]
   1160c:	bl	1106c <fputs_unlocked@plt>
   11610:	movw	r1, #43528	; 0xaa08
   11614:	mov	r0, #0
   11618:	mov	r2, #5
   1161c:	movt	r1, #1
   11620:	bl	11108 <dcgettext@plt>
   11624:	ldr	r1, [r7]
   11628:	bl	1106c <fputs_unlocked@plt>
   1162c:	movw	r1, #43600	; 0xaa50
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	11108 <dcgettext@plt>
   11640:	ldr	r1, [r7]
   11644:	bl	1106c <fputs_unlocked@plt>
   11648:	movw	r1, #43663	; 0xaa8f
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11108 <dcgettext@plt>
   1165c:	ldr	r1, [r7]
   11660:	bl	1106c <fputs_unlocked@plt>
   11664:	movw	r1, #43708	; 0xaabc
   11668:	mov	r0, #0
   1166c:	mov	r2, #5
   11670:	movt	r1, #1
   11674:	bl	11108 <dcgettext@plt>
   11678:	ldr	r1, [r7]
   1167c:	bl	1106c <fputs_unlocked@plt>
   11680:	movw	r1, #43762	; 0xaaf2
   11684:	mov	r0, #0
   11688:	mov	r2, #5
   1168c:	movt	r1, #1
   11690:	bl	11108 <dcgettext@plt>
   11694:	ldr	r1, [r7]
   11698:	bl	1106c <fputs_unlocked@plt>
   1169c:	movw	r1, #43778	; 0xab02
   116a0:	mov	r0, #0
   116a4:	mov	r2, #5
   116a8:	movt	r1, #1
   116ac:	bl	11108 <dcgettext@plt>
   116b0:	ldr	r1, [r7]
   116b4:	bl	1106c <fputs_unlocked@plt>
   116b8:	movw	r1, #43848	; 0xab48
   116bc:	mov	r0, #0
   116c0:	mov	r2, #5
   116c4:	movt	r1, #1
   116c8:	bl	11108 <dcgettext@plt>
   116cc:	ldr	r1, [r7]
   116d0:	bl	1106c <fputs_unlocked@plt>
   116d4:	movw	r1, #44016	; 0xabf0
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	11108 <dcgettext@plt>
   116e8:	ldr	r1, [r7]
   116ec:	bl	1106c <fputs_unlocked@plt>
   116f0:	movw	r1, #44142	; 0xac6e
   116f4:	mov	r0, #0
   116f8:	mov	r2, #5
   116fc:	movt	r1, #1
   11700:	bl	11108 <dcgettext@plt>
   11704:	ldr	r1, [r7]
   11708:	bl	1106c <fputs_unlocked@plt>
   1170c:	movw	r1, #44268	; 0xacec
   11710:	mov	r0, #0
   11714:	mov	r2, #5
   11718:	movt	r1, #1
   1171c:	bl	11108 <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	1106c <fputs_unlocked@plt>
   11728:	movw	r1, #44393	; 0xad69
   1172c:	mov	r0, #0
   11730:	mov	r2, #5
   11734:	movt	r1, #1
   11738:	bl	11108 <dcgettext@plt>
   1173c:	ldr	r1, [r7]
   11740:	bl	1106c <fputs_unlocked@plt>
   11744:	movw	r1, #44668	; 0xae7c
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	11108 <dcgettext@plt>
   11758:	ldr	r1, [r7]
   1175c:	bl	1106c <fputs_unlocked@plt>
   11760:	movw	r1, #45040	; 0xaff0
   11764:	mov	r0, #0
   11768:	mov	r2, #5
   1176c:	movt	r1, #1
   11770:	bl	11108 <dcgettext@plt>
   11774:	ldr	r2, [r5]
   11778:	mov	r1, r0
   1177c:	mov	r0, #1
   11780:	bl	11234 <__printf_chk@plt>
   11784:	movw	r1, #45451	; 0xb18b
   11788:	mov	r0, #0
   1178c:	mov	r2, #5
   11790:	movt	r1, #1
   11794:	bl	11108 <dcgettext@plt>
   11798:	ldr	r2, [r5]
   1179c:	mov	r1, r0
   117a0:	mov	r0, #1
   117a4:	mov	r3, r2
   117a8:	str	r2, [sp]
   117ac:	str	r2, [sp, #4]
   117b0:	str	r2, [sp, #8]
   117b4:	str	r2, [sp, #12]
   117b8:	str	r2, [sp, #16]
   117bc:	str	r2, [sp, #20]
   117c0:	str	r2, [sp, #24]
   117c4:	bl	11234 <__printf_chk@plt>
   117c8:	movw	r0, #48984	; 0xbf58
   117cc:	mov	r2, #48	; 0x30
   117d0:	add	r6, sp, #32
   117d4:	movw	r5, #45898	; 0xb34a
   117d8:	movt	r0, #1
   117dc:	movt	r5, #1
   117e0:	add	r1, r0, #32
   117e4:	add	r3, r0, #16
   117e8:	vld1.64	{d18-d19}, [r0], r2
   117ec:	vld1.64	{d16-d17}, [r1]
   117f0:	vld1.64	{d20-d21}, [r3]
   117f4:	vldr	d22, [r0]
   117f8:	add	r1, r6, #32
   117fc:	add	r0, r6, #16
   11800:	vst1.64	{d16-d17}, [r1]
   11804:	movw	r1, #46459	; 0xb57b
   11808:	vst1.64	{d20-d21}, [r0]
   1180c:	mov	r0, r6
   11810:	movt	r1, #1
   11814:	vst1.64	{d18-d19}, [r0], r2
   11818:	vstr	d22, [r0]
   1181c:	mov	r0, r5
   11820:	bl	11090 <strcmp@plt>
   11824:	cmp	r0, #0
   11828:	ldrne	r1, [r6, #8]!
   1182c:	cmpne	r1, #0
   11830:	bne	1181c <__assert_fail@plt+0x4f8>
   11834:	movw	r1, #46554	; 0xb5da
   11838:	ldr	r6, [r6, #4]
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	11108 <dcgettext@plt>
   1184c:	movw	r2, #46080	; 0xb400
   11850:	movw	r3, #46577	; 0xb5f1
   11854:	mov	r1, r0
   11858:	mov	r0, #1
   1185c:	movt	r2, #1
   11860:	movt	r3, #1
   11864:	bl	11234 <__printf_chk@plt>
   11868:	cmp	r6, #0
   1186c:	mov	r0, #5
   11870:	mov	r1, #0
   11874:	moveq	r6, r5
   11878:	bl	11288 <setlocale@plt>
   1187c:	cmp	r0, #0
   11880:	beq	118b8 <__assert_fail@plt+0x594>
   11884:	movw	r1, #46617	; 0xb619
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	112e8 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118b8 <__assert_fail@plt+0x594>
   1189c:	movw	r1, #46621	; 0xb61d
   118a0:	mov	r0, #0
   118a4:	mov	r2, #5
   118a8:	movt	r1, #1
   118ac:	bl	11108 <dcgettext@plt>
   118b0:	ldr	r1, [r7]
   118b4:	bl	1106c <fputs_unlocked@plt>
   118b8:	movw	r1, #46692	; 0xb664
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	11108 <dcgettext@plt>
   118cc:	movw	r2, #46577	; 0xb5f1
   118d0:	mov	r1, r0
   118d4:	mov	r0, #1
   118d8:	mov	r3, r5
   118dc:	movt	r2, #1
   118e0:	bl	11234 <__printf_chk@plt>
   118e4:	movw	r1, #46719	; 0xb67f
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11108 <dcgettext@plt>
   118f8:	mov	r1, r0
   118fc:	movw	r0, #46487	; 0xb597
   11900:	movw	r3, #46769	; 0xb6b1
   11904:	cmp	r6, r5
   11908:	mov	r2, r6
   1190c:	movt	r0, #1
   11910:	movt	r3, #1
   11914:	moveq	r3, r0
   11918:	mov	r0, #1
   1191c:	bl	11234 <__printf_chk@plt>
   11920:	mov	r0, r4
   11924:	bl	111e0 <exit@plt>
   11928:	movw	r0, #53640	; 0xd188
   1192c:	movw	r1, #41708	; 0xa2ec
   11930:	mov	r2, #5
   11934:	movt	r0, #2
   11938:	movt	r1, #1
   1193c:	ldr	r5, [r0]
   11940:	mov	r0, #0
   11944:	bl	11108 <dcgettext@plt>
   11948:	mov	r2, r0
   1194c:	movw	r0, #53760	; 0xd200
   11950:	mov	r1, #1
   11954:	movt	r0, #2
   11958:	ldr	r3, [r0]
   1195c:	mov	r0, r5
   11960:	bl	1124c <__fprintf_chk@plt>
   11964:	mov	r0, r4
   11968:	bl	111e0 <exit@plt>
   1196c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11970:	add	fp, sp, #28
   11974:	sub	sp, sp, #44	; 0x2c
   11978:	str	r0, [sp, #28]
   1197c:	ldr	r0, [r1]
   11980:	mov	sl, r1
   11984:	bl	15384 <__assert_fail@plt+0x4060>
   11988:	movw	r1, #46769	; 0xb6b1
   1198c:	mov	r0, #6
   11990:	movt	r1, #1
   11994:	bl	11288 <setlocale@plt>
   11998:	movw	r4, #46084	; 0xb404
   1199c:	movw	r1, #45905	; 0xb351
   119a0:	str	r0, [sp, #24]
   119a4:	movt	r4, #1
   119a8:	movt	r1, #1
   119ac:	mov	r0, r4
   119b0:	bl	112d0 <bindtextdomain@plt>
   119b4:	mov	r0, r4
   119b8:	bl	11120 <textdomain@plt>
   119bc:	mov	r0, #65536	; 0x10000
   119c0:	bl	112ac <nl_langinfo@plt>
   119c4:	movw	r8, #53664	; 0xd1a0
   119c8:	cmp	r0, #0
   119cc:	movt	r8, #2
   119d0:	str	r0, [r8, #12]
   119d4:	beq	119e4 <__assert_fail@plt+0x6c0>
   119d8:	ldrb	r1, [r0]
   119dc:	cmp	r1, #0
   119e0:	bne	119f0 <__assert_fail@plt+0x6cc>
   119e4:	movw	r0, #45929	; 0xb369
   119e8:	movt	r0, #1
   119ec:	str	r0, [r8, #12]
   119f0:	bl	111f8 <strlen@plt>
   119f4:	str	r0, [r8, #16]
   119f8:	movw	r0, #19944	; 0x4de8
   119fc:	movt	r0, #1
   11a00:	bl	1a2c4 <__assert_fail@plt+0x8fa0>
   11a04:	movw	r7, #45931	; 0xb36b
   11a08:	movw	r6, #48520	; 0xbd88
   11a0c:	movw	r9, #48868	; 0xbee4
   11a10:	mov	r5, #0
   11a14:	movt	r7, #1
   11a18:	movt	r6, #1
   11a1c:	movt	r9, #1
   11a20:	ldr	r0, [sp, #28]
   11a24:	mov	r1, sl
   11a28:	mov	r2, r7
   11a2c:	mov	r3, r6
   11a30:	str	r5, [sp]
   11a34:	bl	111c8 <getopt_long@plt>
   11a38:	cmp	r0, #99	; 0x63
   11a3c:	ble	11fb8 <__assert_fail@plt+0xc94>
   11a40:	sub	r1, r0, #122	; 0x7a
   11a44:	cmp	r1, #147	; 0x93
   11a48:	bhi	11d3c <__assert_fail@plt+0xa18>
   11a4c:	add	r0, pc, #0
   11a50:	ldr	pc, [r0, r1, lsl #2]
   11a54:	andeq	r1, r1, r4, lsr #25
   11a58:	muleq	r1, r8, r7
   11a5c:	muleq	r1, r8, r7
   11a60:	muleq	r1, r8, r7
   11a64:	muleq	r1, r8, r7
   11a68:	muleq	r1, r8, r7
   11a6c:	muleq	r1, r8, r7
   11a70:	muleq	r1, r8, r7
   11a74:	muleq	r1, r8, r7
   11a78:	muleq	r1, r8, r7
   11a7c:	muleq	r1, r8, r7
   11a80:	muleq	r1, r8, r7
   11a84:	muleq	r1, r8, r7
   11a88:	muleq	r1, r8, r7
   11a8c:	muleq	r1, r8, r7
   11a90:	muleq	r1, r8, r7
   11a94:	muleq	r1, r8, r7
   11a98:	muleq	r1, r8, r7
   11a9c:	muleq	r1, r8, r7
   11aa0:	muleq	r1, r8, r7
   11aa4:	muleq	r1, r8, r7
   11aa8:	muleq	r1, r8, r7
   11aac:	muleq	r1, r8, r7
   11ab0:	muleq	r1, r8, r7
   11ab4:	muleq	r1, r8, r7
   11ab8:	muleq	r1, r8, r7
   11abc:	muleq	r1, r8, r7
   11ac0:	muleq	r1, r8, r7
   11ac4:	muleq	r1, r8, r7
   11ac8:	muleq	r1, r8, r7
   11acc:	muleq	r1, r8, r7
   11ad0:	muleq	r1, r8, r7
   11ad4:	muleq	r1, r8, r7
   11ad8:	muleq	r1, r8, r7
   11adc:	muleq	r1, r8, r7
   11ae0:	muleq	r1, r8, r7
   11ae4:	muleq	r1, r8, r7
   11ae8:	muleq	r1, r8, r7
   11aec:	muleq	r1, r8, r7
   11af0:	muleq	r1, r8, r7
   11af4:	muleq	r1, r8, r7
   11af8:	muleq	r1, r8, r7
   11afc:	muleq	r1, r8, r7
   11b00:	muleq	r1, r8, r7
   11b04:	muleq	r1, r8, r7
   11b08:	muleq	r1, r8, r7
   11b0c:	muleq	r1, r8, r7
   11b10:	muleq	r1, r8, r7
   11b14:	muleq	r1, r8, r7
   11b18:	muleq	r1, r8, r7
   11b1c:	muleq	r1, r8, r7
   11b20:	muleq	r1, r8, r7
   11b24:	muleq	r1, r8, r7
   11b28:	muleq	r1, r8, r7
   11b2c:	muleq	r1, r8, r7
   11b30:	muleq	r1, r8, r7
   11b34:	muleq	r1, r8, r7
   11b38:	muleq	r1, r8, r7
   11b3c:	muleq	r1, r8, r7
   11b40:	muleq	r1, r8, r7
   11b44:	muleq	r1, r8, r7
   11b48:	muleq	r1, r8, r7
   11b4c:	muleq	r1, r8, r7
   11b50:	muleq	r1, r8, r7
   11b54:	muleq	r1, r8, r7
   11b58:	muleq	r1, r8, r7
   11b5c:	muleq	r1, r8, r7
   11b60:	muleq	r1, r8, r7
   11b64:	muleq	r1, r8, r7
   11b68:	muleq	r1, r8, r7
   11b6c:	muleq	r1, r8, r7
   11b70:	muleq	r1, r8, r7
   11b74:	muleq	r1, r8, r7
   11b78:	muleq	r1, r8, r7
   11b7c:	muleq	r1, r8, r7
   11b80:	muleq	r1, r8, r7
   11b84:	muleq	r1, r8, r7
   11b88:	muleq	r1, r8, r7
   11b8c:	muleq	r1, r8, r7
   11b90:	muleq	r1, r8, r7
   11b94:	muleq	r1, r8, r7
   11b98:	muleq	r1, r8, r7
   11b9c:	muleq	r1, r8, r7
   11ba0:	muleq	r1, r8, r7
   11ba4:	muleq	r1, r8, r7
   11ba8:	muleq	r1, r8, r7
   11bac:	muleq	r1, r8, r7
   11bb0:	muleq	r1, r8, r7
   11bb4:	muleq	r1, r8, r7
   11bb8:	muleq	r1, r8, r7
   11bbc:	muleq	r1, r8, r7
   11bc0:	muleq	r1, r8, r7
   11bc4:	muleq	r1, r8, r7
   11bc8:	muleq	r1, r8, r7
   11bcc:	muleq	r1, r8, r7
   11bd0:	muleq	r1, r8, r7
   11bd4:	muleq	r1, r8, r7
   11bd8:	muleq	r1, r8, r7
   11bdc:	muleq	r1, r8, r7
   11be0:	muleq	r1, r8, r7
   11be4:	muleq	r1, r8, r7
   11be8:	muleq	r1, r8, r7
   11bec:	muleq	r1, r8, r7
   11bf0:	muleq	r1, r8, r7
   11bf4:	muleq	r1, r8, r7
   11bf8:	muleq	r1, r8, r7
   11bfc:	muleq	r1, r8, r7
   11c00:	muleq	r1, r8, r7
   11c04:	muleq	r1, r8, r7
   11c08:	muleq	r1, r8, r7
   11c0c:	muleq	r1, r8, r7
   11c10:	muleq	r1, r8, r7
   11c14:	muleq	r1, r8, r7
   11c18:	muleq	r1, r8, r7
   11c1c:	muleq	r1, r8, r7
   11c20:	muleq	r1, r8, r7
   11c24:	muleq	r1, r8, r7
   11c28:	muleq	r1, r8, r7
   11c2c:	muleq	r1, r8, r7
   11c30:	muleq	r1, r8, r7
   11c34:	muleq	r1, r8, r7
   11c38:	muleq	r1, r8, r7
   11c3c:	muleq	r1, r8, r7
   11c40:	muleq	r1, r8, r7
   11c44:	muleq	r1, r8, r7
   11c48:	muleq	r1, r8, r7
   11c4c:	muleq	r1, r8, r7
   11c50:	muleq	r1, r8, r7
   11c54:	muleq	r1, r8, r7
   11c58:	muleq	r1, r8, r7
   11c5c:	muleq	r1, r8, r7
   11c60:	muleq	r1, r8, r7
   11c64:	muleq	r1, r8, r7
   11c68:	muleq	r1, r8, r7
   11c6c:	strdeq	r1, [r1], -r4
   11c70:	andeq	r1, r1, r0, lsl #28
   11c74:	andeq	r1, r1, r4, lsr #29
   11c78:	andeq	r1, r1, r0, lsr #28
   11c7c:	andeq	r1, r1, r8, ror sp
   11c80:	andeq	r1, r1, ip, ror #27
   11c84:	andeq	r1, r1, r0, lsr sp
   11c88:	andeq	r1, r1, r0, asr #28
   11c8c:	andeq	r1, r1, r4, lsl #26
   11c90:	muleq	r1, r8, lr
   11c94:			; <UNDEFINED> instruction: 0x00011cb0
   11c98:			; <UNDEFINED> instruction: 0x00011cbc
   11c9c:	ldrdeq	r1, [r1], -r8
   11ca0:	andeq	r1, r1, r0, asr pc
   11ca4:	mov	r0, #1
   11ca8:	strb	r0, [r8, #5]
   11cac:	b	11a20 <__assert_fail@plt+0x6fc>
   11cb0:	movw	r0, #257	; 0x101
   11cb4:	strh	r0, [r8, #6]
   11cb8:	b	11a20 <__assert_fail@plt+0x6fc>
   11cbc:	movw	r0, #53656	; 0xd198
   11cc0:	movt	r0, #2
   11cc4:	ldr	r0, [r0]
   11cc8:	cmp	r0, #0
   11ccc:	beq	11fa8 <__assert_fail@plt+0xc84>
   11cd0:	movw	r1, #46769	; 0xb6b1
   11cd4:	add	r3, r8, #72	; 0x48
   11cd8:	mov	r2, #10
   11cdc:	movt	r1, #1
   11ce0:	str	r1, [sp]
   11ce4:	mov	r1, #0
   11ce8:	bl	18b2c <__assert_fail@plt+0x7808>
   11cec:	cmp	r0, #0
   11cf0:	bne	127ac <__assert_fail@plt+0x1488>
   11cf4:	ldrd	r0, [r8, #72]	; 0x48
   11cf8:	orrs	r0, r0, r1
   11cfc:	bne	11a20 <__assert_fail@plt+0x6fc>
   11d00:	b	127ac <__assert_fail@plt+0x1488>
   11d04:	movw	r0, #54076	; 0xd33c
   11d08:	movt	r0, #2
   11d0c:	ldr	r0, [r0]
   11d10:	cmp	r0, #0
   11d14:	bne	127b8 <__assert_fail@plt+0x1494>
   11d18:	movw	r0, #53656	; 0xd198
   11d1c:	mov	r1, #1
   11d20:	movt	r0, #2
   11d24:	ldr	r0, [r0]
   11d28:	bl	14060 <__assert_fail@plt+0x2d3c>
   11d2c:	b	11a20 <__assert_fail@plt+0x6fc>
   11d30:	mov	r0, #1
   11d34:	strb	r0, [r8]
   11d38:	b	11a20 <__assert_fail@plt+0x6fc>
   11d3c:	cmp	r0, #100	; 0x64
   11d40:	bne	12798 <__assert_fail@plt+0x1474>
   11d44:	movw	r0, #53656	; 0xd198
   11d48:	movt	r0, #2
   11d4c:	ldr	r1, [r0]
   11d50:	ldrb	r0, [r1]
   11d54:	cmp	r0, #0
   11d58:	beq	11d68 <__assert_fail@plt+0xa44>
   11d5c:	ldrb	r1, [r1, #1]
   11d60:	cmp	r1, #0
   11d64:	bne	127c4 <__assert_fail@plt+0x14a0>
   11d68:	movw	r1, #53512	; 0xd108
   11d6c:	movt	r1, #2
   11d70:	str	r0, [r1, #4]
   11d74:	b	11a20 <__assert_fail@plt+0x6fc>
   11d78:	movw	r0, #53656	; 0xd198
   11d7c:	movw	r4, #48904	; 0xbf08
   11d80:	mov	r2, #4
   11d84:	movt	r0, #2
   11d88:	str	r2, [sp]
   11d8c:	movw	r2, #48924	; 0xbf1c
   11d90:	movt	r4, #1
   11d94:	movt	r2, #1
   11d98:	ldr	r1, [r0]
   11d9c:	movw	r0, #53548	; 0xd12c
   11da0:	mov	r3, r4
   11da4:	movt	r0, #2
   11da8:	ldr	r0, [r0]
   11dac:	str	r0, [sp, #4]
   11db0:	mov	r0, #1
   11db4:	str	r0, [sp, #8]
   11db8:	movw	r0, #45942	; 0xb376
   11dbc:	movt	r0, #1
   11dc0:	bl	14c14 <__assert_fail@plt+0x38f0>
   11dc4:	ldr	r0, [r4, r0, lsl #2]
   11dc8:	movw	r1, #53512	; 0xd108
   11dcc:	movt	r1, #2
   11dd0:	str	r0, [r1]
   11dd4:	b	11a20 <__assert_fail@plt+0x6fc>
   11dd8:	movw	r0, #53656	; 0xd198
   11ddc:	movt	r0, #2
   11de0:	ldr	r0, [r0]
   11de4:	str	r0, [r8, #36]	; 0x24
   11de8:	b	11a20 <__assert_fail@plt+0x6fc>
   11dec:	movw	r0, #53656	; 0xd198
   11df0:	movt	r0, #2
   11df4:	ldr	r0, [r0]
   11df8:	str	r0, [r8, #32]
   11dfc:	b	11a20 <__assert_fail@plt+0x6fc>
   11e00:	movw	r0, #53656	; 0xd198
   11e04:	movt	r0, #2
   11e08:	ldr	r0, [r0]
   11e0c:	bl	12854 <__assert_fail@plt+0x1530>
   11e10:	movw	r2, #53512	; 0xd108
   11e14:	movt	r2, #2
   11e18:	strd	r0, [r2, #16]
   11e1c:	b	11a20 <__assert_fail@plt+0x6fc>
   11e20:	movw	r0, #53656	; 0xd198
   11e24:	movt	r0, #2
   11e28:	ldr	r0, [r0]
   11e2c:	bl	12854 <__assert_fail@plt+0x1530>
   11e30:	movw	r2, #53512	; 0xd108
   11e34:	movt	r2, #2
   11e38:	strd	r0, [r2, #24]
   11e3c:	b	11a20 <__assert_fail@plt+0x6fc>
   11e40:	movw	r0, #53656	; 0xd198
   11e44:	movw	r1, #46769	; 0xb6b1
   11e48:	add	r3, r8, #28
   11e4c:	mov	r2, #10
   11e50:	movt	r0, #2
   11e54:	movt	r1, #1
   11e58:	ldr	r0, [r0]
   11e5c:	str	r1, [sp]
   11e60:	mov	r1, #0
   11e64:	bl	17fa0 <__assert_fail@plt+0x6c7c>
   11e68:	cmp	r0, #0
   11e6c:	bne	127d0 <__assert_fail@plt+0x14ac>
   11e70:	ldr	r0, [r8, #28]
   11e74:	bic	r1, r0, #-2147483648	; 0x80000000
   11e78:	cmp	r1, #0
   11e7c:	beq	127d0 <__assert_fail@plt+0x14ac>
   11e80:	cmn	r0, #1
   11e84:	movle	r1, #1
   11e88:	rsble	r0, r0, #0
   11e8c:	strble	r1, [r8, #4]
   11e90:	strle	r0, [r8, #28]
   11e94:	b	11a20 <__assert_fail@plt+0x6fc>
   11e98:	mov	r0, #1
   11e9c:	strb	r0, [r8, #6]
   11ea0:	b	11a20 <__assert_fail@plt+0x6fc>
   11ea4:	movw	r0, #53656	; 0xd198
   11ea8:	mov	r2, #4
   11eac:	mov	r3, r9
   11eb0:	movt	r0, #2
   11eb4:	str	r2, [sp]
   11eb8:	movw	r2, #48884	; 0xbef4
   11ebc:	movt	r2, #1
   11ec0:	ldr	r1, [r0]
   11ec4:	movw	r0, #53548	; 0xd12c
   11ec8:	movt	r0, #2
   11ecc:	ldr	r0, [r0]
   11ed0:	str	r0, [sp, #4]
   11ed4:	mov	r0, #1
   11ed8:	str	r0, [sp, #8]
   11edc:	movw	r0, #46236	; 0xb49c
   11ee0:	movt	r0, #1
   11ee4:	bl	14c14 <__assert_fail@plt+0x38f0>
   11ee8:	ldr	r0, [r9, r0, lsl #2]
   11eec:	str	r0, [r8, #24]
   11ef0:	b	11a20 <__assert_fail@plt+0x6fc>
   11ef4:	movw	r0, #53656	; 0xd198
   11ef8:	movw	r4, #48824	; 0xbeb8
   11efc:	mov	r2, #4
   11f00:	movt	r0, #2
   11f04:	str	r2, [sp]
   11f08:	movw	r2, #48844	; 0xbecc
   11f0c:	movt	r4, #1
   11f10:	movt	r2, #1
   11f14:	ldr	r1, [r0]
   11f18:	movw	r0, #53548	; 0xd12c
   11f1c:	mov	r3, r4
   11f20:	movt	r0, #2
   11f24:	ldr	r0, [r0]
   11f28:	str	r0, [sp, #4]
   11f2c:	mov	r0, #1
   11f30:	str	r0, [sp, #8]
   11f34:	movw	r0, #45935	; 0xb36f
   11f38:	movt	r0, #1
   11f3c:	bl	14c14 <__assert_fail@plt+0x38f0>
   11f40:	ldr	r0, [r4, r0, lsl #2]
   11f44:	mov	r5, #0
   11f48:	str	r0, [r8, #20]
   11f4c:	b	11a20 <__assert_fail@plt+0x6fc>
   11f50:	movw	r0, #53656	; 0xd198
   11f54:	movw	r4, #48948	; 0xbf34
   11f58:	mov	r2, #4
   11f5c:	movt	r0, #2
   11f60:	str	r2, [sp]
   11f64:	movw	r2, #48964	; 0xbf44
   11f68:	movt	r4, #1
   11f6c:	movt	r2, #1
   11f70:	ldr	r1, [r0]
   11f74:	movw	r0, #53548	; 0xd12c
   11f78:	mov	r3, r4
   11f7c:	movt	r0, #2
   11f80:	ldr	r0, [r0]
   11f84:	str	r0, [sp, #4]
   11f88:	mov	r0, #1
   11f8c:	str	r0, [sp, #8]
   11f90:	movw	r0, #46070	; 0xb3f6
   11f94:	movt	r0, #1
   11f98:	bl	14c14 <__assert_fail@plt+0x38f0>
   11f9c:	ldr	r0, [r4, r0, lsl #2]
   11fa0:	str	r0, [r8, #40]	; 0x28
   11fa4:	b	11a20 <__assert_fail@plt+0x6fc>
   11fa8:	mov	r0, #1
   11fac:	str	r0, [r8, #72]	; 0x48
   11fb0:	str	r5, [r8, #76]	; 0x4c
   11fb4:	b	11a20 <__assert_fail@plt+0x6fc>
   11fb8:	cmn	r0, #1
   11fbc:	bne	126f8 <__assert_fail@plt+0x13d4>
   11fc0:	ldr	r7, [r8, #36]	; 0x24
   11fc4:	ldrb	r0, [r8]
   11fc8:	cmp	r7, #0
   11fcc:	cmpne	r0, #0
   11fd0:	bne	1280c <__assert_fail@plt+0x14e8>
   11fd4:	ldr	r2, [sp, #24]
   11fd8:	ldrb	r1, [r8, #6]
   11fdc:	cmp	r2, #0
   11fe0:	bne	1201c <__assert_fail@plt+0xcf8>
   11fe4:	cmp	r1, #0
   11fe8:	beq	1201c <__assert_fail@plt+0xcf8>
   11fec:	movw	r1, #46151	; 0xb447
   11ff0:	mov	r0, #0
   11ff4:	mov	r2, #5
   11ff8:	movt	r1, #1
   11ffc:	bl	11108 <dcgettext@plt>
   12000:	mov	r2, r0
   12004:	mov	r0, #0
   12008:	mov	r1, #0
   1200c:	bl	1118c <error@plt>
   12010:	ldr	r7, [r8, #36]	; 0x24
   12014:	ldrb	r0, [r8]
   12018:	ldrb	r1, [r8, #6]
   1201c:	cmp	r7, #0
   12020:	ldreq	r2, [r8, #28]
   12024:	cmpeq	r2, #0
   12028:	bne	12070 <__assert_fail@plt+0xd4c>
   1202c:	cmp	r1, #0
   12030:	beq	12070 <__assert_fail@plt+0xd4c>
   12034:	ldr	r1, [r8, #20]
   12038:	ldr	r2, [r8, #24]
   1203c:	orrs	r1, r2, r1
   12040:	cmpeq	r0, #0
   12044:	bne	12070 <__assert_fail@plt+0xd4c>
   12048:	movw	r1, #46172	; 0xb45c
   1204c:	mov	r0, #0
   12050:	mov	r2, #5
   12054:	movt	r1, #1
   12058:	bl	11108 <dcgettext@plt>
   1205c:	mov	r2, r0
   12060:	mov	r0, #0
   12064:	mov	r1, #0
   12068:	bl	1118c <error@plt>
   1206c:	ldr	r7, [r8, #36]	; 0x24
   12070:	cmp	r7, #0
   12074:	beq	12398 <__assert_fail@plt+0x1074>
   12078:	mov	r6, #0
   1207c:	mov	r0, #0
   12080:	str	r6, [fp, #-32]	; 0xffffffe0
   12084:	ldrb	r1, [r7, r0]
   12088:	cmp	r1, #37	; 0x25
   1208c:	beq	120b8 <__assert_fail@plt+0xd94>
   12090:	cmp	r1, #0
   12094:	beq	12748 <__assert_fail@plt+0x1424>
   12098:	cmp	r1, #37	; 0x25
   1209c:	mov	r1, #1
   120a0:	add	r6, r6, #1
   120a4:	movweq	r1, #2
   120a8:	add	r0, r1, r0
   120ac:	ldrb	r1, [r7, r0]
   120b0:	cmp	r1, #37	; 0x25
   120b4:	bne	12090 <__assert_fail@plt+0xd6c>
   120b8:	add	r5, r0, #1
   120bc:	ldrb	r2, [r7, r5]
   120c0:	cmp	r2, #37	; 0x25
   120c4:	beq	12098 <__assert_fail@plt+0xd74>
   120c8:	movw	r4, #47019	; 0xb7ab
   120cc:	mov	r0, #0
   120d0:	str	sl, [sp, #20]
   120d4:	mov	sl, #1
   120d8:	str	r0, [sp, #24]
   120dc:	movt	r4, #1
   120e0:	b	120f0 <__assert_fail@plt+0xdcc>
   120e4:	mov	r0, #1
   120e8:	add	r5, r5, #1
   120ec:	str	r0, [sp, #24]
   120f0:	add	r0, r7, r5
   120f4:	mov	r1, r4
   120f8:	bl	1130c <strspn@plt>
   120fc:	add	r5, r0, r5
   12100:	ldrb	r1, [r7, r5]
   12104:	cmp	r1, #39	; 0x27
   12108:	beq	12120 <__assert_fail@plt+0xdfc>
   1210c:	cmp	r1, #48	; 0x30
   12110:	beq	120e4 <__assert_fail@plt+0xdc0>
   12114:	cmp	r0, #0
   12118:	bne	120f0 <__assert_fail@plt+0xdcc>
   1211c:	b	1212c <__assert_fail@plt+0xe08>
   12120:	add	r5, r5, #1
   12124:	strb	sl, [r8]
   12128:	b	120f0 <__assert_fail@plt+0xdcc>
   1212c:	bl	11210 <__errno_location@plt>
   12130:	mov	r4, r0
   12134:	mov	r0, #0
   12138:	add	r5, r7, r5
   1213c:	sub	r1, fp, #32
   12140:	mov	r2, #10
   12144:	str	r0, [r4]
   12148:	mov	r0, r5
   1214c:	bl	1109c <strtol@plt>
   12150:	cmp	r0, #-2147483648	; 0x80000000
   12154:	movne	r9, r0
   12158:	ldrne	r0, [r4]
   1215c:	cmpne	r0, #34	; 0x22
   12160:	beq	12818 <__assert_fail@plt+0x14f4>
   12164:	ldr	sl, [fp, #-32]	; 0xffffffe0
   12168:	cmp	r9, #0
   1216c:	cmpne	sl, r5
   12170:	bne	12194 <__assert_fail@plt+0xe70>
   12174:	ldrb	r0, [sl], -r7
   12178:	cmp	r0, #46	; 0x2e
   1217c:	beq	121e0 <__assert_fail@plt+0xebc>
   12180:	cmp	r0, #0
   12184:	bne	12250 <__assert_fail@plt+0xf2c>
   12188:	movw	r1, #47094	; 0xb7f6
   1218c:	movt	r1, #1
   12190:	b	1276c <__assert_fail@plt+0x1448>
   12194:	ldr	r5, [sp, #24]
   12198:	cmp	r9, #0
   1219c:	mov	r0, #0
   121a0:	movwgt	r0, #1
   121a4:	tst	r5, r0
   121a8:	bne	121c0 <__assert_fail@plt+0xe9c>
   121ac:	ldrb	r0, [r8, #6]
   121b0:	cmp	r0, #0
   121b4:	ldrne	r0, [r8, #28]
   121b8:	cmpne	r0, #0
   121bc:	bne	126ac <__assert_fail@plt+0x1388>
   121c0:	cmn	r9, #1
   121c4:	ble	126d8 <__assert_fail@plt+0x13b4>
   121c8:	tst	r5, #1
   121cc:	streq	r9, [r8, #28]
   121d0:	strne	r9, [r8, #48]	; 0x30
   121d4:	ldrb	r0, [sl], -r7
   121d8:	cmp	r0, #46	; 0x2e
   121dc:	bne	12180 <__assert_fail@plt+0xe5c>
   121e0:	mov	r0, #0
   121e4:	mov	r5, r4
   121e8:	sub	r1, fp, #32
   121ec:	mov	r2, #10
   121f0:	str	r0, [r4]
   121f4:	add	r0, sl, r7
   121f8:	add	r4, r0, #1
   121fc:	mov	r0, r4
   12200:	bl	1109c <strtol@plt>
   12204:	movw	r1, #53512	; 0xd108
   12208:	cmp	r0, #0
   1220c:	movt	r1, #2
   12210:	str	r0, [r1, #8]
   12214:	bmi	127a0 <__assert_fail@plt+0x147c>
   12218:	ldr	r0, [r5]
   1221c:	cmp	r0, #34	; 0x22
   12220:	beq	127a0 <__assert_fail@plt+0x147c>
   12224:	bl	111d4 <__ctype_b_loc@plt>
   12228:	ldrb	r1, [r4]
   1222c:	cmp	r1, #43	; 0x2b
   12230:	beq	127a0 <__assert_fail@plt+0x147c>
   12234:	ldr	r0, [r0]
   12238:	add	r0, r0, r1, lsl #1
   1223c:	ldrh	r0, [r0]
   12240:	ands	r0, r0, #1
   12244:	bne	127a0 <__assert_fail@plt+0x147c>
   12248:	ldr	sl, [fp, #-32]	; 0xffffffe0
   1224c:	ldrb	r0, [sl], -r7
   12250:	cmp	r0, #102	; 0x66
   12254:	bne	12824 <__assert_fail@plt+0x1500>
   12258:	add	r4, sl, #1
   1225c:	ldr	sl, [sp, #20]
   12260:	mov	r0, r4
   12264:	ldrb	r1, [r7, r0]
   12268:	cmp	r1, #37	; 0x25
   1226c:	bne	1229c <__assert_fail@plt+0xf78>
   12270:	add	r2, r0, r7
   12274:	ldrb	r2, [r2, #1]
   12278:	cmp	r2, #37	; 0x25
   1227c:	bne	12764 <__assert_fail@plt+0x1440>
   12280:	cmp	r1, #37	; 0x25
   12284:	mov	r1, #1
   12288:	movweq	r1, #2
   1228c:	add	r0, r1, r0
   12290:	ldrb	r1, [r7, r0]
   12294:	cmp	r1, #37	; 0x25
   12298:	beq	12270 <__assert_fail@plt+0xf4c>
   1229c:	cmp	r1, #0
   122a0:	bne	12280 <__assert_fail@plt+0xf5c>
   122a4:	cmp	r6, #0
   122a8:	beq	122bc <__assert_fail@plt+0xf98>
   122ac:	mov	r0, r7
   122b0:	mov	r1, r6
   122b4:	bl	17ee8 <__assert_fail@plt+0x6bc4>
   122b8:	str	r0, [r8, #52]	; 0x34
   122bc:	mov	r0, r7
   122c0:	ldrb	r1, [r0, r4]!
   122c4:	cmp	r1, #0
   122c8:	beq	122d4 <__assert_fail@plt+0xfb0>
   122cc:	bl	17f24 <__assert_fail@plt+0x6c00>
   122d0:	str	r0, [r8, #56]	; 0x38
   122d4:	ldrb	r0, [r8, #7]
   122d8:	cmp	r0, #1
   122dc:	bne	12398 <__assert_fail@plt+0x1074>
   122e0:	movw	r0, #53640	; 0xd188
   122e4:	mov	r1, r7
   122e8:	movt	r0, #2
   122ec:	ldr	r9, [r0]
   122f0:	mov	r0, #0
   122f4:	bl	17338 <__assert_fail@plt+0x6014>
   122f8:	ldr	r1, [r8, #52]	; 0x34
   122fc:	movw	r6, #46769	; 0xb6b1
   12300:	ldr	r7, [r8, #28]
   12304:	ldrb	r4, [r8]
   12308:	ldrb	sl, [r8, #4]
   1230c:	str	r0, [sp, #24]
   12310:	mov	r0, #1
   12314:	movt	r6, #1
   12318:	cmp	r1, #0
   1231c:	moveq	r1, r6
   12320:	bl	17338 <__assert_fail@plt+0x6014>
   12324:	ldr	r1, [r8, #56]	; 0x38
   12328:	mov	r5, r0
   1232c:	mov	r0, #2
   12330:	cmp	r1, #0
   12334:	moveq	r1, r6
   12338:	bl	17338 <__assert_fail@plt+0x6014>
   1233c:	movw	r1, #47355	; 0xb8fb
   12340:	movw	r2, #47360	; 0xb900
   12344:	cmp	sl, #0
   12348:	movw	r3, #47352	; 0xb8f8
   1234c:	ldr	sl, [sp, #20]
   12350:	movt	r1, #1
   12354:	movt	r2, #1
   12358:	movt	r3, #1
   1235c:	movne	r2, r1
   12360:	movw	r1, #47348	; 0xb8f4
   12364:	cmp	r4, #0
   12368:	movt	r1, #1
   1236c:	movne	r3, r1
   12370:	mov	r1, #1
   12374:	stm	sp, {r3, r7}
   12378:	ldr	r3, [sp, #24]
   1237c:	str	r2, [sp, #8]
   12380:	movw	r2, #47242	; 0xb88a
   12384:	str	r0, [sp, #16]
   12388:	mov	r0, r9
   1238c:	str	r5, [sp, #12]
   12390:	movt	r2, #1
   12394:	bl	1124c <__fprintf_chk@plt>
   12398:	ldrb	r0, [r8]
   1239c:	cmp	r0, #1
   123a0:	bne	123f8 <__assert_fail@plt+0x10d4>
   123a4:	ldr	r0, [r8, #24]
   123a8:	cmp	r0, #0
   123ac:	bne	12830 <__assert_fail@plt+0x150c>
   123b0:	ldrb	r0, [r8, #6]
   123b4:	cmp	r0, #1
   123b8:	bne	123f8 <__assert_fail@plt+0x10d4>
   123bc:	movw	r0, #1
   123c0:	movt	r0, #1
   123c4:	bl	112ac <nl_langinfo@plt>
   123c8:	ldrb	r0, [r0]
   123cc:	cmp	r0, #0
   123d0:	bne	123f8 <__assert_fail@plt+0x10d4>
   123d4:	movw	r1, #46241	; 0xb4a1
   123d8:	mov	r0, #0
   123dc:	mov	r2, #5
   123e0:	movt	r1, #1
   123e4:	bl	11108 <dcgettext@plt>
   123e8:	mov	r2, r0
   123ec:	mov	r0, #0
   123f0:	mov	r1, #0
   123f4:	bl	1118c <error@plt>
   123f8:	ldr	r0, [r8, #28]
   123fc:	ldr	r1, [r8, #60]	; 0x3c
   12400:	cmp	r1, r0
   12404:	bhi	12420 <__assert_fail@plt+0x10fc>
   12408:	add	r1, r0, #1
   1240c:	str	r1, [r8, #60]	; 0x3c
   12410:	ldr	r0, [r8, #64]	; 0x40
   12414:	bl	17a68 <__assert_fail@plt+0x6744>
   12418:	str	r0, [r8, #64]	; 0x40
   1241c:	ldr	r0, [r8, #28]
   12420:	movw	r1, #53512	; 0xd108
   12424:	movw	r4, #53632	; 0xd180
   12428:	movt	r1, #2
   1242c:	movt	r4, #2
   12430:	ldr	r1, [r1, #4]
   12434:	eor	r1, r1, #256	; 0x100
   12438:	orr	r0, r0, r1
   1243c:	ldr	r1, [r4]
   12440:	clz	r0, r0
   12444:	lsr	r0, r0, #5
   12448:	str	r0, [r8, #44]	; 0x2c
   1244c:	ldr	r0, [r8, #40]	; 0x28
   12450:	cmp	r0, #0
   12454:	movne	r0, #1
   12458:	strbne	r0, [r8, #8]
   1245c:	ldr	r0, [sp, #28]
   12460:	cmp	r1, r0
   12464:	bge	124ec <__assert_fail@plt+0x11c8>
   12468:	ldrb	r0, [r8, #6]
   1246c:	cmp	r0, #1
   12470:	bne	124ac <__assert_fail@plt+0x1188>
   12474:	ldr	r0, [r8, #72]	; 0x48
   12478:	ldr	r3, [r8, #76]	; 0x4c
   1247c:	orrs	r0, r0, r3
   12480:	beq	124ac <__assert_fail@plt+0x1188>
   12484:	movw	r1, #46279	; 0xb4c7
   12488:	mov	r0, #0
   1248c:	mov	r2, #5
   12490:	movt	r1, #1
   12494:	bl	11108 <dcgettext@plt>
   12498:	mov	r2, r0
   1249c:	mov	r0, #0
   124a0:	mov	r1, #0
   124a4:	bl	1118c <error@plt>
   124a8:	ldr	r1, [r4]
   124ac:	ldr	r0, [sp, #28]
   124b0:	mov	r6, #1
   124b4:	cmp	r1, r0
   124b8:	bge	12688 <__assert_fail@plt+0x1364>
   124bc:	mov	r6, #1
   124c0:	ldr	r0, [sl, r1, lsl #2]
   124c4:	mov	r1, #1
   124c8:	bl	129a4 <__assert_fail@plt+0x1680>
   124cc:	ldr	r1, [r4]
   124d0:	and	r6, r0, r6
   124d4:	ldr	r0, [sp, #28]
   124d8:	add	r1, r1, #1
   124dc:	cmp	r1, r0
   124e0:	str	r1, [r4]
   124e4:	blt	124c0 <__assert_fail@plt+0x119c>
   124e8:	b	1264c <__assert_fail@plt+0x1328>
   124ec:	ldrd	r0, [r8, #72]	; 0x48
   124f0:	movw	r7, #53648	; 0xd190
   124f4:	movt	r7, #2
   124f8:	subs	r2, r0, #1
   124fc:	sbc	r3, r1, #0
   12500:	orrs	r0, r0, r1
   12504:	strd	r2, [r8, #72]	; 0x48
   12508:	mov	r2, #0
   1250c:	str	r2, [sp, #36]	; 0x24
   12510:	str	r2, [sp, #32]
   12514:	beq	12574 <__assert_fail@plt+0x1250>
   12518:	movw	r6, #53652	; 0xd194
   1251c:	add	r4, sp, #36	; 0x24
   12520:	add	r5, sp, #32
   12524:	movt	r6, #2
   12528:	ldrb	r0, [r8, #5]
   1252c:	ldr	r3, [r7]
   12530:	mov	r2, #10
   12534:	mov	r1, r5
   12538:	cmp	r0, #0
   1253c:	mov	r0, r4
   12540:	movwne	r2, #0
   12544:	bl	112dc <getdelim@plt>
   12548:	cmp	r0, #1
   1254c:	blt	12574 <__assert_fail@plt+0x1250>
   12550:	ldr	r1, [r6]
   12554:	ldr	r0, [sp, #36]	; 0x24
   12558:	bl	1106c <fputs_unlocked@plt>
   1255c:	ldrd	r0, [r8, #72]	; 0x48
   12560:	subs	r2, r0, #1
   12564:	sbc	r3, r1, #0
   12568:	orrs	r0, r0, r1
   1256c:	strd	r2, [r8, #72]	; 0x48
   12570:	bne	12528 <__assert_fail@plt+0x1204>
   12574:	ldrb	r0, [r8, #5]
   12578:	ldr	r3, [r7]
   1257c:	mov	r2, #10
   12580:	add	r1, sp, #32
   12584:	cmp	r0, #0
   12588:	add	r0, sp, #36	; 0x24
   1258c:	movwne	r2, #0
   12590:	bl	112dc <getdelim@plt>
   12594:	mov	r6, #1
   12598:	cmp	r0, #1
   1259c:	blt	12610 <__assert_fail@plt+0x12ec>
   125a0:	mov	r9, #0
   125a4:	add	r4, sp, #36	; 0x24
   125a8:	add	r5, sp, #32
   125ac:	sub	r3, r0, #1
   125b0:	ldr	r0, [sp, #36]	; 0x24
   125b4:	ldrb	r2, [r8, #5]
   125b8:	ldrb	r1, [r0, r3]
   125bc:	cmp	r2, #0
   125c0:	mov	r2, #10
   125c4:	movwne	r2, #0
   125c8:	cmp	r2, r1
   125cc:	sub	r1, r2, r1
   125d0:	strbeq	r9, [r0, r3]
   125d4:	clz	r1, r1
   125d8:	ldreq	r0, [sp, #36]	; 0x24
   125dc:	lsr	r1, r1, #5
   125e0:	bl	129a4 <__assert_fail@plt+0x1680>
   125e4:	and	r6, r0, r6
   125e8:	ldrb	r0, [r8, #5]
   125ec:	ldr	r3, [r7]
   125f0:	mov	r2, #10
   125f4:	mov	r1, r5
   125f8:	cmp	r0, #0
   125fc:	mov	r0, r4
   12600:	movwne	r2, #0
   12604:	bl	112dc <getdelim@plt>
   12608:	cmp	r0, #0
   1260c:	bgt	125ac <__assert_fail@plt+0x1288>
   12610:	ldr	r0, [r7]
   12614:	ldrb	r0, [r0]
   12618:	tst	r0, #32
   1261c:	beq	1264c <__assert_fail@plt+0x1328>
   12620:	bl	11210 <__errno_location@plt>
   12624:	movw	r1, #46320	; 0xb4f0
   12628:	ldr	r4, [r0]
   1262c:	mov	r0, #0
   12630:	mov	r2, #5
   12634:	movt	r1, #1
   12638:	bl	11108 <dcgettext@plt>
   1263c:	mov	r2, r0
   12640:	mov	r0, #0
   12644:	mov	r1, r4
   12648:	bl	1118c <error@plt>
   1264c:	cmp	r6, #0
   12650:	bne	12688 <__assert_fail@plt+0x1364>
   12654:	ldrb	r0, [r8, #6]
   12658:	cmp	r0, #0
   1265c:	beq	12688 <__assert_fail@plt+0x1364>
   12660:	movw	r1, #46340	; 0xb504
   12664:	mov	r0, #0
   12668:	mov	r2, #5
   1266c:	mov	r6, #0
   12670:	movt	r1, #1
   12674:	bl	11108 <dcgettext@plt>
   12678:	mov	r2, r0
   1267c:	mov	r0, #0
   12680:	mov	r1, #0
   12684:	bl	1118c <error@plt>
   12688:	ldr	r0, [r8, #40]	; 0x28
   1268c:	orr	r0, r0, #1
   12690:	subs	r1, r0, #3
   12694:	mov	r0, #0
   12698:	movwne	r1, #1
   1269c:	cmp	r6, #0
   126a0:	lsleq	r0, r1, #1
   126a4:	sub	sp, fp, #28
   126a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ac:	movw	r1, #47056	; 0xb7d0
   126b0:	mov	r0, #0
   126b4:	mov	r2, #5
   126b8:	movt	r1, #1
   126bc:	bl	11108 <dcgettext@plt>
   126c0:	mov	r2, r0
   126c4:	mov	r0, #0
   126c8:	mov	r1, #0
   126cc:	bl	1118c <error@plt>
   126d0:	cmn	r9, #1
   126d4:	bgt	121c8 <__assert_fail@plt+0xea4>
   126d8:	mov	r0, #1
   126dc:	strb	r0, [r8, #4]
   126e0:	rsb	r0, r9, #0
   126e4:	str	r0, [r8, #28]
   126e8:	ldrb	r0, [sl], -r7
   126ec:	cmp	r0, #46	; 0x2e
   126f0:	bne	12180 <__assert_fail@plt+0xe5c>
   126f4:	b	121e0 <__assert_fail@plt+0xebc>
   126f8:	cmn	r0, #3
   126fc:	bne	12754 <__assert_fail@plt+0x1430>
   12700:	movw	r0, #53544	; 0xd128
   12704:	movw	r2, #46094	; 0xb40e
   12708:	mov	r1, #0
   1270c:	movt	r0, #2
   12710:	movt	r2, #1
   12714:	str	r1, [sp, #4]
   12718:	movw	r1, #45898	; 0xb34a
   1271c:	movt	r1, #1
   12720:	ldr	r3, [r0]
   12724:	movw	r0, #53652	; 0xd194
   12728:	str	r2, [sp]
   1272c:	movw	r2, #46080	; 0xb400
   12730:	movt	r0, #2
   12734:	movt	r2, #1
   12738:	ldr	r0, [r0]
   1273c:	bl	177ec <__assert_fail@plt+0x64c8>
   12740:	mov	r0, #0
   12744:	bl	111e0 <exit@plt>
   12748:	movw	r1, #46989	; 0xb78d
   1274c:	movt	r1, #1
   12750:	b	1276c <__assert_fail@plt+0x1448>
   12754:	cmn	r0, #2
   12758:	bne	12798 <__assert_fail@plt+0x1474>
   1275c:	mov	r0, #0
   12760:	bl	11420 <__assert_fail@plt+0xfc>
   12764:	movw	r1, #47205	; 0xb865
   12768:	movt	r1, #1
   1276c:	mov	r0, #0
   12770:	mov	r2, #5
   12774:	bl	11108 <dcgettext@plt>
   12778:	mov	r4, r0
   1277c:	mov	r0, r7
   12780:	bl	17348 <__assert_fail@plt+0x6024>
   12784:	mov	r3, r0
   12788:	mov	r0, #1
   1278c:	mov	r1, #0
   12790:	mov	r2, r4
   12794:	bl	1118c <error@plt>
   12798:	mov	r0, #1
   1279c:	bl	11420 <__assert_fail@plt+0xfc>
   127a0:	movw	r1, #47115	; 0xb80b
   127a4:	movt	r1, #1
   127a8:	b	1276c <__assert_fail@plt+0x1448>
   127ac:	movw	r1, #46046	; 0xb3de
   127b0:	movt	r1, #1
   127b4:	b	127d8 <__assert_fail@plt+0x14b4>
   127b8:	movw	r1, #45975	; 0xb397
   127bc:	movt	r1, #1
   127c0:	b	12838 <__assert_fail@plt+0x1514>
   127c4:	movw	r1, #46005	; 0xb3b5
   127c8:	movt	r1, #1
   127cc:	b	12838 <__assert_fail@plt+0x1514>
   127d0:	movw	r1, #45950	; 0xb37e
   127d4:	movt	r1, #1
   127d8:	mov	r0, #0
   127dc:	mov	r2, #5
   127e0:	bl	11108 <dcgettext@plt>
   127e4:	mov	r5, r0
   127e8:	movw	r0, #53656	; 0xd198
   127ec:	movt	r0, #2
   127f0:	ldr	r0, [r0]
   127f4:	bl	17348 <__assert_fail@plt+0x6024>
   127f8:	mov	r3, r0
   127fc:	mov	r0, #1
   12800:	mov	r1, #0
   12804:	mov	r2, r5
   12808:	bl	1118c <error@plt>
   1280c:	movw	r1, #46107	; 0xb41b
   12810:	movt	r1, #1
   12814:	b	12838 <__assert_fail@plt+0x1514>
   12818:	movw	r1, #47021	; 0xb7ad
   1281c:	movt	r1, #1
   12820:	b	1276c <__assert_fail@plt+0x1448>
   12824:	movw	r1, #47146	; 0xb82a
   12828:	movt	r1, #1
   1282c:	b	1276c <__assert_fail@plt+0x1448>
   12830:	movw	r1, #46203	; 0xb47b
   12834:	movt	r1, #1
   12838:	mov	r0, #0
   1283c:	mov	r2, #5
   12840:	bl	11108 <dcgettext@plt>
   12844:	mov	r2, r0
   12848:	mov	r0, #1
   1284c:	mov	r1, #0
   12850:	bl	1118c <error@plt>
   12854:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12858:	add	fp, sp, #24
   1285c:	sub	sp, sp, #24
   12860:	mov	r4, r0
   12864:	bl	111f8 <strlen@plt>
   12868:	movw	r8, #46886	; 0xb726
   1286c:	mov	r5, #0
   12870:	cmp	r0, #0
   12874:	movt	r8, #1
   12878:	str	r5, [sp, #20]
   1287c:	beq	12898 <__assert_fail@plt+0x1574>
   12880:	mov	r6, r0
   12884:	add	r0, r0, r4
   12888:	ldrb	r0, [r0, #-1]
   1288c:	sub	r0, r0, #48	; 0x30
   12890:	cmp	r0, #10
   12894:	bcs	128a0 <__assert_fail@plt+0x157c>
   12898:	mov	r0, r4
   1289c:	b	12918 <__assert_fail@plt+0x15f4>
   128a0:	add	r0, r6, #2
   128a4:	bl	17a20 <__assert_fail@plt+0x66fc>
   128a8:	add	r9, r0, r6
   128ac:	mov	r1, r4
   128b0:	mov	r2, r6
   128b4:	mov	r5, r0
   128b8:	sub	r7, r9, #1
   128bc:	str	r7, [sp, #20]
   128c0:	bl	110e4 <memcpy@plt>
   128c4:	cmp	r6, #2
   128c8:	bcc	128e8 <__assert_fail@plt+0x15c4>
   128cc:	ldrb	r0, [r9, #-1]
   128d0:	cmp	r0, #105	; 0x69
   128d4:	bne	128e8 <__assert_fail@plt+0x15c4>
   128d8:	ldrb	r0, [r7, #-1]
   128dc:	sub	r0, r0, #48	; 0x30
   128e0:	cmp	r0, #10
   128e4:	bcs	1290c <__assert_fail@plt+0x15e8>
   128e8:	movw	r8, #46895	; 0xb72f
   128ec:	mov	r0, #66	; 0x42
   128f0:	strb	r0, [r7, #1]
   128f4:	add	r0, r7, #2
   128f8:	movt	r8, #1
   128fc:	str	r0, [sp, #20]
   12900:	mov	r0, #0
   12904:	strb	r0, [r7, #2]
   12908:	b	12914 <__assert_fail@plt+0x15f0>
   1290c:	mov	r0, #0
   12910:	strb	r0, [r7]
   12914:	mov	r0, r5
   12918:	add	r1, sp, #20
   1291c:	add	r3, sp, #8
   12920:	mov	r2, #10
   12924:	str	r8, [sp]
   12928:	bl	18b2c <__assert_fail@plt+0x7808>
   1292c:	cmp	r0, #0
   12930:	ldreq	r0, [sp, #20]
   12934:	ldrbeq	r0, [r0]
   12938:	cmpeq	r0, #0
   1293c:	beq	1297c <__assert_fail@plt+0x1658>
   12940:	mov	r0, r5
   12944:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   12948:	movw	r1, #46905	; 0xb739
   1294c:	mov	r0, #0
   12950:	mov	r2, #5
   12954:	movt	r1, #1
   12958:	bl	11108 <dcgettext@plt>
   1295c:	mov	r5, r0
   12960:	mov	r0, r4
   12964:	bl	17348 <__assert_fail@plt+0x6024>
   12968:	mov	r3, r0
   1296c:	mov	r0, #1
   12970:	mov	r1, #0
   12974:	mov	r2, r5
   12978:	bl	1118c <error@plt>
   1297c:	ldr	r0, [sp, #8]
   12980:	ldr	r1, [sp, #12]
   12984:	orrs	r0, r0, r1
   12988:	beq	12940 <__assert_fail@plt+0x161c>
   1298c:	mov	r0, r5
   12990:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   12994:	ldr	r0, [sp, #8]
   12998:	ldr	r1, [sp, #12]
   1299c:	sub	sp, fp, #24
   129a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   129a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129a8:	add	fp, sp, #28
   129ac:	push	{r1}		; (str r1, [sp, #-4]!)
   129b0:	movw	sl, #53512	; 0xd108
   129b4:	mov	r8, r0
   129b8:	mov	r4, #1
   129bc:	mov	r5, #0
   129c0:	mov	r6, #0
   129c4:	movt	sl, #2
   129c8:	ldr	r0, [sl, #4]
   129cc:	ldrb	r9, [r8]
   129d0:	adds	r5, r5, #1
   129d4:	adc	r6, r6, #0
   129d8:	cmp	r0, #256	; 0x100
   129dc:	bne	12a58 <__assert_fail@plt+0x1734>
   129e0:	cmp	r9, #0
   129e4:	beq	12b00 <__assert_fail@plt+0x17dc>
   129e8:	bl	111d4 <__ctype_b_loc@plt>
   129ec:	ldr	r0, [r0]
   129f0:	mov	r7, r8
   129f4:	uxtb	r1, r9
   129f8:	cmp	r1, #10
   129fc:	bne	12a18 <__assert_fail@plt+0x16f4>
   12a00:	ldrb	r9, [r7, #1]!
   12a04:	cmp	r9, #0
   12a08:	beq	12b00 <__assert_fail@plt+0x17dc>
   12a0c:	uxtb	r1, r9
   12a10:	cmp	r1, #10
   12a14:	beq	12a00 <__assert_fail@plt+0x16dc>
   12a18:	add	r1, r0, r1, lsl #1
   12a1c:	ldrh	r1, [r1]
   12a20:	ands	r2, r1, #1
   12a24:	bne	12a00 <__assert_fail@plt+0x16dc>
   12a28:	tst	r1, #1
   12a2c:	bne	12a98 <__assert_fail@plt+0x1774>
   12a30:	ldrb	r1, [r7, #1]!
   12a34:	cmp	r1, #0
   12a38:	beq	12b00 <__assert_fail@plt+0x17dc>
   12a3c:	cmp	r1, #10
   12a40:	beq	12a98 <__assert_fail@plt+0x1774>
   12a44:	add	r1, r0, r1, lsl #1
   12a48:	ldrh	r1, [r1]
   12a4c:	ands	r1, r1, #1
   12a50:	beq	12a30 <__assert_fail@plt+0x170c>
   12a54:	b	12a98 <__assert_fail@plt+0x1774>
   12a58:	cmp	r9, #0
   12a5c:	beq	12a8c <__assert_fail@plt+0x1768>
   12a60:	cmp	r0, r9
   12a64:	mov	r7, r8
   12a68:	beq	12a80 <__assert_fail@plt+0x175c>
   12a6c:	mov	r7, r8
   12a70:	ldrb	r9, [r7, #1]!
   12a74:	cmp	r9, #0
   12a78:	cmpne	r0, r9
   12a7c:	bne	12a70 <__assert_fail@plt+0x174c>
   12a80:	cmp	r9, #0
   12a84:	bne	12a98 <__assert_fail@plt+0x1774>
   12a88:	b	12b00 <__assert_fail@plt+0x17dc>
   12a8c:	mov	r7, r8
   12a90:	cmp	r9, #0
   12a94:	beq	12b00 <__assert_fail@plt+0x17dc>
   12a98:	mov	r0, #0
   12a9c:	mov	r2, r5
   12aa0:	mov	r3, r6
   12aa4:	strb	r0, [r7]
   12aa8:	mov	r0, r8
   12aac:	bl	12b80 <__assert_fail@plt+0x185c>
   12ab0:	and	r4, r4, r0
   12ab4:	movw	r0, #53652	; 0xd194
   12ab8:	ldr	r1, [sl, #4]
   12abc:	movt	r0, #2
   12ac0:	ldr	r0, [r0]
   12ac4:	cmp	r1, #256	; 0x100
   12ac8:	movweq	r1, #32
   12acc:	ldr	r2, [r0, #20]
   12ad0:	ldr	r3, [r0, #24]
   12ad4:	cmp	r2, r3
   12ad8:	bcs	12af0 <__assert_fail@plt+0x17cc>
   12adc:	add	r3, r2, #1
   12ae0:	add	r8, r7, #1
   12ae4:	str	r3, [r0, #20]
   12ae8:	strb	r1, [r2]
   12aec:	b	129c8 <__assert_fail@plt+0x16a4>
   12af0:	uxtb	r1, r1
   12af4:	bl	1127c <__overflow@plt>
   12af8:	add	r8, r7, #1
   12afc:	b	129c8 <__assert_fail@plt+0x16a4>
   12b00:	mov	r0, r8
   12b04:	mov	r2, r5
   12b08:	mov	r3, r6
   12b0c:	bl	12b80 <__assert_fail@plt+0x185c>
   12b10:	and	r5, r4, r0
   12b14:	ldr	r0, [sp]
   12b18:	cmp	r0, #0
   12b1c:	beq	12b60 <__assert_fail@plt+0x183c>
   12b20:	movw	r0, #53664	; 0xd1a0
   12b24:	mov	r1, #10
   12b28:	movt	r0, #2
   12b2c:	ldrb	r0, [r0, #5]
   12b30:	cmp	r0, #0
   12b34:	movw	r0, #53652	; 0xd194
   12b38:	movt	r0, #2
   12b3c:	movwne	r1, #0
   12b40:	ldr	r0, [r0]
   12b44:	ldr	r2, [r0, #20]
   12b48:	ldr	r3, [r0, #24]
   12b4c:	cmp	r2, r3
   12b50:	bcs	12b6c <__assert_fail@plt+0x1848>
   12b54:	add	r3, r2, #1
   12b58:	str	r3, [r0, #20]
   12b5c:	strb	r1, [r2]
   12b60:	mov	r0, r5
   12b64:	sub	sp, fp, #28
   12b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b6c:	bl	1127c <__overflow@plt>
   12b70:	mov	r0, r5
   12b74:	sub	sp, fp, #28
   12b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b7c:	nop	{0}
   12b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	add	fp, sp, #28
   12b88:	sub	sp, sp, #4
   12b8c:	vpush	{d8-d11}
   12b90:	sub	sp, sp, #240	; 0xf0
   12b94:	mov	r8, r0
   12b98:	movw	r0, #54072	; 0xd338
   12b9c:	mov	r5, r2
   12ba0:	movt	r0, #2
   12ba4:	ldr	r1, [r0]
   12ba8:	cmp	r1, #0
   12bac:	beq	12c10 <__assert_fail@plt+0x18ec>
   12bb0:	ldrd	r6, [r1]
   12bb4:	and	r0, r6, r7
   12bb8:	cmn	r0, #1
   12bbc:	beq	12ca4 <__assert_fail@plt+0x1980>
   12bc0:	mvn	r0, #0
   12bc4:	add	r1, r1, #16
   12bc8:	subs	r2, r5, r6
   12bcc:	sbcs	r2, r3, r7
   12bd0:	bcs	12bf8 <__assert_fail@plt+0x18d4>
   12bd4:	ldrd	r6, [r1]
   12bd8:	add	r1, r1, #16
   12bdc:	eor	r2, r7, r0
   12be0:	eor	r4, r6, r0
   12be4:	orrs	r2, r4, r2
   12be8:	beq	12ca4 <__assert_fail@plt+0x1980>
   12bec:	subs	r2, r5, r6
   12bf0:	sbcs	r2, r3, r7
   12bf4:	bcc	12bd4 <__assert_fail@plt+0x18b0>
   12bf8:	ldr	r2, [r1, #-8]
   12bfc:	ldr	r7, [r1, #-4]
   12c00:	subs	r2, r2, r5
   12c04:	sbcs	r2, r7, r3
   12c08:	bcc	12bd4 <__assert_fail@plt+0x18b0>
   12c0c:	b	12c1c <__assert_fail@plt+0x18f8>
   12c10:	eor	r0, r5, #1
   12c14:	orrs	r0, r0, r3
   12c18:	bne	12ca4 <__assert_fail@plt+0x1980>
   12c1c:	movw	r9, #53664	; 0xd1a0
   12c20:	movt	r9, #2
   12c24:	ldr	r4, [r9, #32]
   12c28:	cmp	r4, #0
   12c2c:	beq	12d00 <__assert_fail@plt+0x19dc>
   12c30:	mov	r0, r8
   12c34:	bl	111f8 <strlen@plt>
   12c38:	mov	r6, r0
   12c3c:	mov	r0, r4
   12c40:	bl	111f8 <strlen@plt>
   12c44:	cmp	r6, r0
   12c48:	bls	12d00 <__assert_fail@plt+0x19dc>
   12c4c:	add	r1, r8, r6
   12c50:	sub	r6, r1, r0
   12c54:	mov	r0, r4
   12c58:	mov	r1, r6
   12c5c:	bl	11090 <strcmp@plt>
   12c60:	cmp	r0, #0
   12c64:	beq	12cc0 <__assert_fail@plt+0x199c>
   12c68:	ldrb	r0, [r9, #7]
   12c6c:	cmp	r0, #1
   12c70:	bne	12d00 <__assert_fail@plt+0x19dc>
   12c74:	movw	r0, #53640	; 0xd188
   12c78:	movw	r2, #47386	; 0xb91a
   12c7c:	mov	r1, #1
   12c80:	movt	r0, #2
   12c84:	movt	r2, #1
   12c88:	ldr	r0, [r0]
   12c8c:	bl	1124c <__fprintf_chk@plt>
   12c90:	ldrb	r6, [r8]
   12c94:	mov	r4, r8
   12c98:	cmp	r6, #0
   12c9c:	bne	12d10 <__assert_fail@plt+0x19ec>
   12ca0:	b	12d34 <__assert_fail@plt+0x1a10>
   12ca4:	movw	r0, #53652	; 0xd194
   12ca8:	movt	r0, #2
   12cac:	ldr	r1, [r0]
   12cb0:	mov	r0, r8
   12cb4:	bl	1106c <fputs_unlocked@plt>
   12cb8:	mov	r4, #1
   12cbc:	b	138e4 <__assert_fail@plt+0x25c0>
   12cc0:	mov	r0, #0
   12cc4:	strb	r0, [r6]
   12cc8:	ldrb	r0, [r9, #7]
   12ccc:	cmp	r0, #1
   12cd0:	bne	12d00 <__assert_fail@plt+0x19dc>
   12cd4:	movw	r0, #53640	; 0xd188
   12cd8:	movt	r0, #2
   12cdc:	ldr	r6, [r0]
   12ce0:	mov	r0, r4
   12ce4:	bl	17348 <__assert_fail@plt+0x6024>
   12ce8:	movw	r2, #47366	; 0xb906
   12cec:	mov	r3, r0
   12cf0:	mov	r0, r6
   12cf4:	mov	r1, #1
   12cf8:	movt	r2, #1
   12cfc:	bl	1124c <__fprintf_chk@plt>
   12d00:	ldrb	r6, [r8]
   12d04:	mov	r4, r8
   12d08:	cmp	r6, #0
   12d0c:	beq	12d34 <__assert_fail@plt+0x1a10>
   12d10:	bl	111d4 <__ctype_b_loc@plt>
   12d14:	ldr	r0, [r0]
   12d18:	mov	r4, r8
   12d1c:	uxtb	r1, r6
   12d20:	ldrb	r1, [r0, r1, lsl #1]
   12d24:	tst	r1, #1
   12d28:	ldrbne	r6, [r4, #1]!
   12d2c:	cmpne	r6, #0
   12d30:	bne	12d1c <__assert_fail@plt+0x19f8>
   12d34:	ldr	r0, [r9, #44]	; 0x2c
   12d38:	str	r8, [sp, #40]	; 0x28
   12d3c:	cmp	r0, #0
   12d40:	beq	12dc4 <__assert_fail@plt+0x1aa0>
   12d44:	cmp	r5, #1
   12d48:	bgt	12d6c <__assert_fail@plt+0x1a48>
   12d4c:	cmp	r4, r8
   12d50:	bne	12d6c <__assert_fail@plt+0x1a48>
   12d54:	mov	r0, #0
   12d58:	str	r0, [r9, #28]
   12d5c:	ldrb	r0, [r9, #7]
   12d60:	cmp	r0, #0
   12d64:	bne	12da4 <__assert_fail@plt+0x1a80>
   12d68:	b	12e30 <__assert_fail@plt+0x1b0c>
   12d6c:	mov	r0, r8
   12d70:	bl	111f8 <strlen@plt>
   12d74:	str	r0, [r9, #28]
   12d78:	ldr	r1, [r9, #60]	; 0x3c
   12d7c:	cmp	r1, r0
   12d80:	bhi	12d98 <__assert_fail@plt+0x1a74>
   12d84:	add	r1, r0, #1
   12d88:	str	r1, [r9, #60]	; 0x3c
   12d8c:	ldr	r0, [r9, #64]	; 0x40
   12d90:	bl	17a68 <__assert_fail@plt+0x6744>
   12d94:	str	r0, [r9, #64]	; 0x40
   12d98:	ldrb	r0, [r9, #7]
   12d9c:	cmp	r0, #0
   12da0:	beq	12e30 <__assert_fail@plt+0x1b0c>
   12da4:	movw	r0, #53640	; 0xd188
   12da8:	ldr	r3, [r9, #28]
   12dac:	movw	r2, #47409	; 0xb931
   12db0:	mov	r1, #1
   12db4:	movt	r0, #2
   12db8:	movt	r2, #1
   12dbc:	ldr	r0, [r0]
   12dc0:	bl	1124c <__fprintf_chk@plt>
   12dc4:	ldr	r8, [r9, #20]
   12dc8:	mov	sl, #1000	; 0x3e8
   12dcc:	sub	r0, r8, #3
   12dd0:	cmp	r0, #2
   12dd4:	ldrb	r0, [r9, #7]
   12dd8:	movwcc	sl, #1024	; 0x400
   12ddc:	cmp	r0, #1
   12de0:	bne	12e44 <__assert_fail@plt+0x1b20>
   12de4:	movw	r0, #53640	; 0xd188
   12de8:	mov	r1, r4
   12dec:	movt	r0, #2
   12df0:	ldr	r7, [r0]
   12df4:	mov	r0, #0
   12df8:	bl	17338 <__assert_fail@plt+0x6014>
   12dfc:	ldr	r1, [r9, #12]
   12e00:	mov	r6, r0
   12e04:	mov	r0, #1
   12e08:	bl	17338 <__assert_fail@plt+0x6014>
   12e0c:	movw	r2, #47526	; 0xb9a6
   12e10:	mov	r1, #15
   12e14:	stm	sp, {r0, r1}
   12e18:	mov	r0, r7
   12e1c:	mov	r1, #1
   12e20:	mov	r3, r6
   12e24:	movt	r2, #1
   12e28:	bl	1124c <__fprintf_chk@plt>
   12e2c:	b	12e44 <__assert_fail@plt+0x1b20>
   12e30:	ldr	r8, [r9, #20]
   12e34:	mov	sl, #1000	; 0x3e8
   12e38:	sub	r0, r8, #3
   12e3c:	cmp	r0, #2
   12e40:	movwcc	sl, #1024	; 0x400
   12e44:	mov	r6, r4
   12e48:	ldrb	r5, [r6], #1
   12e4c:	cmp	r5, #45	; 0x2d
   12e50:	movne	r6, r4
   12e54:	ldrb	r7, [r6]
   12e58:	sub	r0, r7, #48	; 0x30
   12e5c:	cmp	r0, #9
   12e60:	bhi	12f0c <__assert_fail@plt+0x1be8>
   12e64:	str	r8, [sp, #32]
   12e68:	ldr	r8, [sp, #40]	; 0x28
   12e6c:	vmov.i32	d9, #0	; 0x00000000
   12e70:	vmov.f64	d16, #36	; 0x41200000  10.0
   12e74:	vmov.i32	d17, #0	; 0x00000000
   12e78:	mov	r1, #0
   12e7c:	str	sl, [sp, #24]
   12e80:	mov	sl, #0
   12e84:	str	r1, [sp, #36]	; 0x24
   12e88:	mov	r1, #0
   12e8c:	vcmp.f64	d17, #0.0
   12e90:	mov	r2, #0
   12e94:	mov	r3, r0
   12e98:	vmrs	APSR_nzcv, fpscr
   12e9c:	movwne	r2, #1
   12ea0:	cmp	r0, #0
   12ea4:	movwne	r3, #1
   12ea8:	orr	r2, r3, r2
   12eac:	add	r1, r1, r2
   12eb0:	cmp	r1, #27
   12eb4:	bhi	13470 <__assert_fail@plt+0x214c>
   12eb8:	vmov	s0, r0
   12ebc:	ldrb	r7, [r6, #1]!
   12ec0:	cmp	r1, #15
   12ec4:	movwhi	sl, #1
   12ec8:	sub	r0, r7, #48	; 0x30
   12ecc:	vcvt.f64.s32	d18, s0
   12ed0:	cmp	r0, #10
   12ed4:	vmla.f64	d18, d17, d16
   12ed8:	vmov.f64	d17, d18
   12edc:	bcc	12e8c <__assert_fail@plt+0x1b68>
   12ee0:	vneg.f64	d16, d18
   12ee4:	cmp	r5, #45	; 0x2d
   12ee8:	mov	r0, #0
   12eec:	str	r0, [sp, #36]	; 0x24
   12ef0:	vseleq.f64	d9, d16, d18
   12ef4:	cmp	sl, #1
   12ef8:	bhi	13440 <__assert_fail@plt+0x211c>
   12efc:	str	r5, [sp, #28]
   12f00:	ldr	r5, [r9, #12]
   12f04:	ldr	r9, [r9, #16]
   12f08:	b	12f84 <__assert_fail@plt+0x1c60>
   12f0c:	str	r5, [sp, #28]
   12f10:	ldr	r5, [r9, #12]
   12f14:	ldr	r9, [r9, #16]
   12f18:	mov	r0, r6
   12f1c:	mov	r1, r5
   12f20:	mov	r2, r9
   12f24:	bl	112e8 <strncmp@plt>
   12f28:	cmp	r0, #0
   12f2c:	beq	12f64 <__assert_fail@plt+0x1c40>
   12f30:	mov	r0, #0
   12f34:	vmov.i32	d9, #0	; 0x00000000
   12f38:	str	r0, [sp, #36]	; 0x24
   12f3c:	movw	r9, #53664	; 0xd1a0
   12f40:	movt	r9, #2
   12f44:	ldr	r8, [sp, #40]	; 0x28
   12f48:	movw	r1, #47815	; 0xbac7
   12f4c:	mov	sl, #3
   12f50:	movt	r1, #1
   12f54:	ldr	r0, [r9, #40]	; 0x28
   12f58:	cmp	r0, #3
   12f5c:	bne	13574 <__assert_fail@plt+0x2250>
   12f60:	b	135b0 <__assert_fail@plt+0x228c>
   12f64:	str	sl, [sp, #24]
   12f68:	str	r8, [sp, #32]
   12f6c:	add	r0, pc, #932	; 0x3a4
   12f70:	ldr	r1, [sp, #28]
   12f74:	mov	sl, #0
   12f78:	cmp	r1, #45	; 0x2d
   12f7c:	addeq	r0, r0, #8
   12f80:	vldr	d9, [r0]
   12f84:	mov	r0, r6
   12f88:	mov	r1, r5
   12f8c:	mov	r2, r9
   12f90:	bl	112e8 <strncmp@plt>
   12f94:	mov	r1, #0
   12f98:	cmp	r0, #0
   12f9c:	str	r1, [sp, #36]	; 0x24
   12fa0:	beq	130b4 <__assert_fail@plt+0x1d90>
   12fa4:	movw	r9, #53664	; 0xd1a0
   12fa8:	mov	r8, r6
   12fac:	movt	r9, #2
   12fb0:	ldrb	r0, [r9, #7]
   12fb4:	cmp	r0, #1
   12fb8:	bne	12fe8 <__assert_fail@plt+0x1cc4>
   12fbc:	movw	r0, #53640	; 0xd188
   12fc0:	ldr	r1, [sp, #36]	; 0x24
   12fc4:	movw	r2, #47620	; 0xba04
   12fc8:	vstr	d9, [sp]
   12fcc:	movt	r0, #2
   12fd0:	movt	r2, #1
   12fd4:	ldr	r0, [r0]
   12fd8:	str	r1, [sp, #8]
   12fdc:	mov	r1, #1
   12fe0:	bl	1124c <__fprintf_chk@plt>
   12fe4:	ldrb	r7, [r8]
   12fe8:	cmp	r7, #0
   12fec:	beq	13170 <__assert_fail@plt+0x1e4c>
   12ff0:	bl	111d4 <__ctype_b_loc@plt>
   12ff4:	ldr	r0, [r0]
   12ff8:	ldrb	r1, [r0, r7, lsl #1]
   12ffc:	tst	r1, #1
   13000:	beq	13014 <__assert_fail@plt+0x1cf0>
   13004:	ldrb	r7, [r8, #1]!
   13008:	ldrb	r1, [r0, r7, lsl #1]
   1300c:	tst	r1, #1
   13010:	bne	13004 <__assert_fail@plt+0x1ce0>
   13014:	movw	r0, #46886	; 0xb726
   13018:	mov	r1, r7
   1301c:	mov	r2, #9
   13020:	movt	r0, #1
   13024:	bl	11258 <memchr@plt>
   13028:	cmp	r0, #0
   1302c:	beq	131e8 <__assert_fail@plt+0x1ec4>
   13030:	ldr	r0, [sp, #32]
   13034:	cmp	r0, #0
   13038:	beq	131f0 <__assert_fail@plt+0x1ecc>
   1303c:	sub	r0, r7, #69	; 0x45
   13040:	cmp	r0, #21
   13044:	bhi	13270 <__assert_fail@plt+0x1f4c>
   13048:	add	r1, pc, #4
   1304c:	mov	r7, #1
   13050:	ldr	pc, [r1, r0, lsl #2]
   13054:	andeq	r3, r1, ip, lsr #1
   13058:	andeq	r3, r1, r0, ror r2
   1305c:	andeq	r3, r1, r0, lsl #5
   13060:	andeq	r3, r1, r0, ror r2
   13064:	andeq	r3, r1, r0, ror r2
   13068:	andeq	r3, r1, r0, ror r2
   1306c:	andeq	r3, r1, r4, lsr #5
   13070:	andeq	r3, r1, r0, ror r2
   13074:	muleq	r1, r8, r2
   13078:	andeq	r3, r1, r0, ror r2
   1307c:	andeq	r3, r1, r0, ror r2
   13080:	andeq	r3, r1, r0, lsr #5
   13084:	andeq	r3, r1, r0, ror r2
   13088:	andeq	r3, r1, r0, ror r2
   1308c:	andeq	r3, r1, r0, ror r2
   13090:	andeq	r3, r1, r8, ror r2
   13094:	andeq	r3, r1, r0, ror r2
   13098:	andeq	r3, r1, r0, ror r2
   1309c:	andeq	r3, r1, r0, ror r2
   130a0:	andeq	r3, r1, r0, ror r2
   130a4:	andeq	r3, r1, r8, lsl #5
   130a8:	muleq	r1, r0, r2
   130ac:	mov	r7, #6
   130b0:	b	132a4 <__assert_fail@plt+0x1f80>
   130b4:	ldrb	lr, [r6, r9]!
   130b8:	mov	r1, r5
   130bc:	mov	r8, r6
   130c0:	cmp	lr, #45	; 0x2d
   130c4:	addeq	r8, r8, #1
   130c8:	ldrb	r7, [r8]
   130cc:	sub	r5, r7, #48	; 0x30
   130d0:	cmp	r5, #9
   130d4:	bhi	13194 <__assert_fail@plt+0x1e70>
   130d8:	ldr	ip, [sp, #28]
   130dc:	movw	r9, #53664	; 0xd1a0
   130e0:	vmov.i32	d17, #0	; 0x00000000
   130e4:	vmov.f64	d16, #36	; 0x41200000  10.0
   130e8:	mov	r0, #0
   130ec:	mov	r2, #0
   130f0:	movt	r9, #2
   130f4:	str	r0, [sp, #36]	; 0x24
   130f8:	mov	r0, #0
   130fc:	vcmp.f64	d17, #0.0
   13100:	mov	r3, #0
   13104:	mov	r1, r5
   13108:	vmrs	APSR_nzcv, fpscr
   1310c:	movwne	r3, #1
   13110:	cmp	r5, #0
   13114:	movwne	r1, #1
   13118:	orr	r1, r1, r3
   1311c:	add	r2, r2, r1
   13120:	cmp	r2, #27
   13124:	bhi	131f8 <__assert_fail@plt+0x1ed4>
   13128:	vmov	s0, r5
   1312c:	ldrb	r7, [r8, #1]!
   13130:	cmp	r2, #15
   13134:	movwhi	r0, #1
   13138:	sub	r5, r7, #48	; 0x30
   1313c:	vcvt.f64.s32	d18, s0
   13140:	cmp	r5, #10
   13144:	vmla.f64	d18, d17, d16
   13148:	vmov.f64	d17, d18
   1314c:	bcc	130fc <__assert_fail@plt+0x1dd8>
   13150:	mov	r1, #0
   13154:	cmp	r0, #1
   13158:	str	r1, [sp, #36]	; 0x24
   1315c:	bls	13208 <__assert_fail@plt+0x1ee4>
   13160:	mov	sl, r0
   13164:	cmp	sl, #6
   13168:	bls	13448 <__assert_fail@plt+0x2124>
   1316c:	b	13560 <__assert_fail@plt+0x223c>
   13170:	mov	r7, #0
   13174:	ldr	r0, [sp, #32]
   13178:	cmp	r0, #4
   1317c:	bne	13348 <__assert_fail@plt+0x2024>
   13180:	ldrb	r0, [r8]
   13184:	cmp	r0, #105	; 0x69
   13188:	bne	13200 <__assert_fail@plt+0x1edc>
   1318c:	add	r6, r8, #1
   13190:	b	1334c <__assert_fail@plt+0x2028>
   13194:	mov	r0, r8
   13198:	mov	r2, r9
   1319c:	mov	r5, lr
   131a0:	bl	112e8 <strncmp@plt>
   131a4:	mov	r1, #0
   131a8:	cmp	r0, #0
   131ac:	str	r1, [sp, #36]	; 0x24
   131b0:	bne	12f3c <__assert_fail@plt+0x1c18>
   131b4:	add	r0, pc, #348	; 0x15c
   131b8:	cmp	r5, #45	; 0x2d
   131bc:	ldr	ip, [sp, #28]
   131c0:	movw	r9, #53664	; 0xd1a0
   131c4:	mov	lr, r5
   131c8:	addeq	r0, r0, #8
   131cc:	movt	r9, #2
   131d0:	vldr	d16, [r0]
   131d4:	mov	r0, #0
   131d8:	cmp	lr, #45	; 0x2d
   131dc:	str	r0, [sp, #36]	; 0x24
   131e0:	beq	12f44 <__assert_fail@plt+0x1c20>
   131e4:	b	13228 <__assert_fail@plt+0x1f04>
   131e8:	ldr	r8, [sp, #40]	; 0x28
   131ec:	b	1348c <__assert_fail@plt+0x2168>
   131f0:	ldr	r8, [sp, #40]	; 0x28
   131f4:	b	134a8 <__assert_fail@plt+0x2184>
   131f8:	ldr	r8, [sp, #40]	; 0x28
   131fc:	b	13470 <__assert_fail@plt+0x214c>
   13200:	ldr	r8, [sp, #40]	; 0x28
   13204:	b	134c4 <__assert_fail@plt+0x21a0>
   13208:	vneg.f64	d16, d18
   1320c:	moveq	sl, r0
   13210:	cmp	lr, #45	; 0x2d
   13214:	vseleq.f64	d16, d16, d18
   13218:	mov	r0, #0
   1321c:	cmp	lr, #45	; 0x2d
   13220:	str	r0, [sp, #36]	; 0x24
   13224:	beq	12f44 <__assert_fail@plt+0x1c20>
   13228:	subs	r0, r8, r6
   1322c:	str	r0, [sp, #36]	; 0x24
   13230:	beq	13268 <__assert_fail@plt+0x1f44>
   13234:	subs	r0, r0, #1
   13238:	beq	13ea8 <__assert_fail@plt+0x2b84>
   1323c:	sub	r1, r8, r6
   13240:	ands	r2, r0, #3
   13244:	sub	r1, r1, #2
   13248:	beq	13eb0 <__assert_fail@plt+0x2b8c>
   1324c:	vmov.f64	d18, #36	; 0x41200000  10.0
   13250:	vmov.f64	d17, d18
   13254:	vmul.f64	d17, d17, d18
   13258:	subs	r2, r2, #1
   1325c:	sub	r0, r0, #1
   13260:	bne	13254 <__assert_fail@plt+0x1f30>
   13264:	b	13eb4 <__assert_fail@plt+0x2b90>
   13268:	vmov.f64	d17, #112	; 0x3f800000  1.0
   1326c:	b	13ed8 <__assert_fail@plt+0x2bb4>
   13270:	mov	r7, #0
   13274:	b	132a4 <__assert_fail@plt+0x1f80>
   13278:	mov	r7, #4
   1327c:	b	132a4 <__assert_fail@plt+0x1f80>
   13280:	mov	r7, #3
   13284:	b	132a4 <__assert_fail@plt+0x1f80>
   13288:	mov	r7, #8
   1328c:	b	132a4 <__assert_fail@plt+0x1f80>
   13290:	mov	r7, #7
   13294:	b	132a4 <__assert_fail@plt+0x1f80>
   13298:	mov	r7, #2
   1329c:	b	132a4 <__assert_fail@plt+0x1f80>
   132a0:	mov	r7, #5
   132a4:	mov	r0, #0
   132a8:	add	r6, r8, #1
   132ac:	str	r0, [sp, #36]	; 0x24
   132b0:	ldr	r0, [sp, #32]
   132b4:	cmp	r0, #1
   132b8:	bne	13338 <__assert_fail@plt+0x2014>
   132bc:	ldrb	r0, [r6]
   132c0:	cmp	r0, #105	; 0x69
   132c4:	bne	13308 <__assert_fail@plt+0x1fe4>
   132c8:	ldrb	r0, [r9, #7]
   132cc:	mov	r1, #1024	; 0x400
   132d0:	add	r6, r8, #2
   132d4:	str	r1, [sp, #24]
   132d8:	cmp	r0, #1
   132dc:	bne	13308 <__assert_fail@plt+0x1fe4>
   132e0:	movw	r0, #53640	; 0xd188
   132e4:	movw	r2, #47672	; 0xba38
   132e8:	mov	r1, #1024	; 0x400
   132ec:	mov	r3, #1024	; 0x400
   132f0:	movt	r0, #2
   132f4:	movt	r2, #1
   132f8:	str	r1, [sp, #24]
   132fc:	mov	r1, #1
   13300:	ldr	r0, [r0]
   13304:	bl	1124c <__fprintf_chk@plt>
   13308:	mov	r0, #0
   1330c:	str	r0, [sp, #36]	; 0x24
   13310:	b	1334c <__assert_fail@plt+0x2028>
   13314:	nop	{0}
	...
   13324:	andhi	r0, r0, r0
   13328:			; <UNDEFINED> instruction: 0xffffffff
   1332c:	svcvc	0x00efffff
   13330:			; <UNDEFINED> instruction: 0xffffffff
   13334:			; <UNDEFINED> instruction: 0xffefffff
   13338:	mov	r8, r6
   1333c:	ldr	r0, [sp, #32]
   13340:	cmp	r0, #4
   13344:	beq	13180 <__assert_fail@plt+0x1e5c>
   13348:	mov	r6, r8
   1334c:	ldr	r0, [sp, #24]
   13350:	cmp	r7, #0
   13354:	vmov	s0, r0
   13358:	vcvt.f64.s32	d16, s0
   1335c:	ldr	r8, [sp, #40]	; 0x28
   13360:	beq	133b0 <__assert_fail@plt+0x208c>
   13364:	subs	r0, r7, #1
   13368:	beq	133c4 <__assert_fail@plt+0x20a0>
   1336c:	vmov.f64	d8, d16
   13370:	ands	r2, r0, #3
   13374:	sub	r1, r7, #2
   13378:	beq	1338c <__assert_fail@plt+0x2068>
   1337c:	vmul.f64	d8, d8, d16
   13380:	subs	r2, r2, #1
   13384:	sub	r0, r0, #1
   13388:	bne	1337c <__assert_fail@plt+0x2058>
   1338c:	cmp	r1, #3
   13390:	bcc	133c8 <__assert_fail@plt+0x20a4>
   13394:	vmul.f64	d17, d8, d16
   13398:	subs	r0, r0, #4
   1339c:	vmul.f64	d17, d17, d16
   133a0:	vmul.f64	d17, d17, d16
   133a4:	vmul.f64	d8, d17, d16
   133a8:	bne	13394 <__assert_fail@plt+0x2070>
   133ac:	b	133c8 <__assert_fail@plt+0x20a4>
   133b0:	vmov.f64	d8, #112	; 0x3f800000  1.0
   133b4:	ldrb	r0, [r9, #7]
   133b8:	cmp	r0, #0
   133bc:	bne	133d4 <__assert_fail@plt+0x20b0>
   133c0:	b	13434 <__assert_fail@plt+0x2110>
   133c4:	vmov.f64	d8, d16
   133c8:	ldrb	r0, [r9, #7]
   133cc:	cmp	r0, #0
   133d0:	beq	13434 <__assert_fail@plt+0x2110>
   133d4:	movw	r5, #53640	; 0xd188
   133d8:	ldr	r3, [sp, #24]
   133dc:	movw	r2, #47721	; 0xba69
   133e0:	mov	r1, #1
   133e4:	vstr	d8, [sp, #8]
   133e8:	str	r7, [sp]
   133ec:	movt	r5, #2
   133f0:	movt	r2, #1
   133f4:	ldr	r0, [r5]
   133f8:	bl	1124c <__fprintf_chk@plt>
   133fc:	ldrb	r0, [r9, #7]
   13400:	vmul.f64	d9, d9, d8
   13404:	cmp	r0, #1
   13408:	bne	13438 <__assert_fail@plt+0x2114>
   1340c:	ldr	r0, [r5]
   13410:	movw	r2, #47749	; 0xba85
   13414:	mov	r1, #1
   13418:	vstr	d9, [sp]
   1341c:	vstr	d9, [sp, #8]
   13420:	movt	r2, #1
   13424:	bl	1124c <__fprintf_chk@plt>
   13428:	cmp	sl, #2
   1342c:	bcs	13440 <__assert_fail@plt+0x211c>
   13430:	b	134e0 <__assert_fail@plt+0x21bc>
   13434:	vmul.f64	d9, d9, d8
   13438:	cmp	sl, #2
   1343c:	bcc	134e0 <__assert_fail@plt+0x21bc>
   13440:	cmp	sl, #6
   13444:	bhi	13560 <__assert_fail@plt+0x223c>
   13448:	add	r0, pc, #4
   1344c:	ldr	r8, [sp, #40]	; 0x28
   13450:	ldr	pc, [r0, sl, lsl #2]
   13454:	strdeq	r3, [r1], -r8
   13458:	strdeq	r3, [r1], -r8
   1345c:	andeq	r3, r1, r0, ror r4
   13460:	andeq	r2, r1, r8, asr #30
   13464:	andeq	r3, r1, r8, lsr #9
   13468:	andeq	r3, r1, ip, lsl #9
   1346c:	andeq	r3, r1, r4, asr #9
   13470:	movw	r1, #47779	; 0xbaa3
   13474:	mov	sl, #2
   13478:	movt	r1, #1
   1347c:	ldr	r0, [r9, #40]	; 0x28
   13480:	cmp	r0, #3
   13484:	bne	13574 <__assert_fail@plt+0x2250>
   13488:	b	135b0 <__assert_fail@plt+0x228c>
   1348c:	movw	r1, #47888	; 0xbb10
   13490:	mov	sl, #5
   13494:	movt	r1, #1
   13498:	ldr	r0, [r9, #40]	; 0x28
   1349c:	cmp	r0, #3
   134a0:	bne	13574 <__assert_fail@plt+0x2250>
   134a4:	b	135b0 <__assert_fail@plt+0x228c>
   134a8:	movw	r1, #47834	; 0xbada
   134ac:	mov	sl, #4
   134b0:	movt	r1, #1
   134b4:	ldr	r0, [r9, #40]	; 0x28
   134b8:	cmp	r0, #3
   134bc:	bne	13574 <__assert_fail@plt+0x2250>
   134c0:	b	135b0 <__assert_fail@plt+0x228c>
   134c4:	movw	r1, #47916	; 0xbb2c
   134c8:	mov	sl, #6
   134cc:	movt	r1, #1
   134d0:	ldr	r0, [r9, #40]	; 0x28
   134d4:	cmp	r0, #3
   134d8:	bne	13574 <__assert_fail@plt+0x2250>
   134dc:	b	135b0 <__assert_fail@plt+0x228c>
   134e0:	cmp	r6, #0
   134e4:	beq	13984 <__assert_fail@plt+0x2660>
   134e8:	ldrb	r0, [r6]
   134ec:	cmp	r0, #0
   134f0:	beq	13984 <__assert_fail@plt+0x2660>
   134f4:	ldr	r0, [r9, #40]	; 0x28
   134f8:	mov	sl, #5
   134fc:	cmp	r0, #3
   13500:	beq	135b0 <__assert_fail@plt+0x228c>
   13504:	movw	r1, #47495	; 0xb987
   13508:	ldrb	r7, [r9, #8]
   1350c:	mov	r0, #0
   13510:	mov	r2, #5
   13514:	mov	sl, #5
   13518:	movt	r1, #1
   1351c:	bl	11108 <dcgettext@plt>
   13520:	mov	r5, r0
   13524:	mov	r0, #0
   13528:	mov	r1, r4
   1352c:	bl	17338 <__assert_fail@plt+0x6014>
   13530:	mov	r4, r0
   13534:	mov	r0, #1
   13538:	mov	r1, r6
   1353c:	bl	17338 <__assert_fail@plt+0x6014>
   13540:	cmp	r7, #0
   13544:	str	r0, [sp]
   13548:	mov	r0, #2
   1354c:	mov	r1, #0
   13550:	mov	r2, r5
   13554:	mov	r3, r4
   13558:	movwne	r0, #0
   1355c:	b	135ac <__assert_fail@plt+0x2288>
   13560:	ldr	r8, [sp, #40]	; 0x28
   13564:	mov	r1, #0
   13568:	ldr	r0, [r9, #40]	; 0x28
   1356c:	cmp	r0, #3
   13570:	beq	135b0 <__assert_fail@plt+0x228c>
   13574:	ldrb	r7, [r9, #8]
   13578:	mov	r0, #0
   1357c:	mov	r2, #5
   13580:	bl	11108 <dcgettext@plt>
   13584:	mov	r5, r0
   13588:	mov	r0, r4
   1358c:	cmp	r7, #0
   13590:	mov	r6, #2
   13594:	movwne	r6, #0
   13598:	bl	17348 <__assert_fail@plt+0x6024>
   1359c:	mov	r3, r0
   135a0:	mov	r0, r6
   135a4:	mov	r1, #0
   135a8:	mov	r2, r5
   135ac:	bl	1118c <error@plt>
   135b0:	movw	r7, #53512	; 0xd108
   135b4:	movt	r7, #2
   135b8:	add	r5, r7, #16
   135bc:	ldm	r5, {r0, r1, r4, r5}
   135c0:	eor	r2, r0, #1
   135c4:	orrs	r2, r2, r1
   135c8:	eoreq	r2, r4, #1
   135cc:	orrseq	r2, r2, r5
   135d0:	beq	135f4 <__assert_fail@plt+0x22d0>
   135d4:	bl	1a00c <__assert_fail@plt+0x8ce8>
   135d8:	vmov	d8, r0, r1
   135dc:	mov	r0, r4
   135e0:	mov	r1, r5
   135e4:	bl	1a00c <__assert_fail@plt+0x8ce8>
   135e8:	vmov	d16, r0, r1
   135ec:	vmul.f64	d17, d9, d8
   135f0:	vdiv.f64	d9, d17, d16
   135f4:	cmp	sl, #1
   135f8:	bhi	138cc <__assert_fail@plt+0x25a8>
   135fc:	vldr	d16, [pc, #-732]	; 13328 <__assert_fail@plt+0x2004>
   13600:	vldr	d17, [pc, #-728]	; 13330 <__assert_fail@plt+0x200c>
   13604:	mov	r1, #0
   13608:	mov	r2, #0
   1360c:	mov	r3, r8
   13610:	mov	r0, #0
   13614:	ldr	r6, [sp, #36]	; 0x24
   13618:	vcmpe.f64	d9, d16
   1361c:	vmrs	APSR_nzcv, fpscr
   13620:	vcmpe.f64	d9, d17
   13624:	movwls	r1, #1
   13628:	vmrs	APSR_nzcv, fpscr
   1362c:	movwge	r2, #1
   13630:	and	r8, r2, r1
   13634:	ldr	r1, [r7, #8]
   13638:	cmn	r1, #1
   1363c:	movne	r6, r1
   13640:	cmp	r8, #1
   13644:	bne	1369c <__assert_fail@plt+0x2378>
   13648:	vcmpe.f64	d9, #0.0
   1364c:	vneg.f64	d17, d9
   13650:	vmov.f64	d16, #36	; 0x41200000  10.0
   13654:	vmov.f64	d18, d9
   13658:	vmrs	APSR_nzcv, fpscr
   1365c:	vmovmi.f64	d18, d17
   13660:	vcmpe.f64	d18, d16
   13664:	vmrs	APSR_nzcv, fpscr
   13668:	blt	1369c <__assert_fail@plt+0x2378>
   1366c:	vmov.f64	d17, d9
   13670:	mov	r0, #0
   13674:	vdiv.f64	d17, d17, d16
   13678:	add	r0, r0, #1
   1367c:	vcmpe.f64	d17, #0.0
   13680:	vneg.f64	d18, d17
   13684:	vmov.f64	d19, d17
   13688:	vmrs	APSR_nzcv, fpscr
   1368c:	vmovmi.f64	d19, d18
   13690:	vcmpe.f64	d19, d16
   13694:	vmrs	APSR_nzcv, fpscr
   13698:	bge	13674 <__assert_fail@plt+0x2350>
   1369c:	ldr	r5, [r9, #24]
   136a0:	cmp	r5, #0
   136a4:	bne	13704 <__assert_fail@plt+0x23e0>
   136a8:	add	r1, r0, r6
   136ac:	cmp	r1, #16
   136b0:	bcc	13704 <__assert_fail@plt+0x23e0>
   136b4:	ldr	r0, [r9, #40]	; 0x28
   136b8:	mov	r8, r3
   136bc:	cmp	r0, #3
   136c0:	beq	138cc <__assert_fail@plt+0x25a8>
   136c4:	ldrb	r0, [r9, #8]
   136c8:	mov	r4, #2
   136cc:	cmp	r0, #0
   136d0:	movwne	r4, #0
   136d4:	cmp	r6, #0
   136d8:	beq	138a4 <__assert_fail@plt+0x2580>
   136dc:	movw	r1, #47963	; 0xbb5b
   136e0:	mov	r0, #0
   136e4:	mov	r2, #5
   136e8:	mov	r5, #0
   136ec:	movt	r1, #1
   136f0:	bl	11108 <dcgettext@plt>
   136f4:	mov	r2, r0
   136f8:	str	r6, [sp, #8]
   136fc:	str	r5, [sp, #12]
   13700:	b	138bc <__assert_fail@plt+0x2598>
   13704:	cmp	r0, #27
   13708:	bcc	1374c <__assert_fail@plt+0x2428>
   1370c:	ldr	r0, [r9, #40]	; 0x28
   13710:	mov	r8, r3
   13714:	cmp	r0, #3
   13718:	beq	138cc <__assert_fail@plt+0x25a8>
   1371c:	movw	r1, #48096	; 0xbbe0
   13720:	ldrb	r4, [r9, #8]
   13724:	mov	r0, #0
   13728:	mov	r2, #5
   1372c:	movt	r1, #1
   13730:	bl	11108 <dcgettext@plt>
   13734:	cmp	r4, #0
   13738:	mov	r2, r0
   1373c:	mov	r0, #2
   13740:	vstr	d9, [sp]
   13744:	movwne	r0, #0
   13748:	b	138c4 <__assert_fail@plt+0x25a0>
   1374c:	ldrb	r4, [r9]
   13750:	mov	r0, r9
   13754:	mov	r0, #37	; 0x25
   13758:	ldr	r1, [r7]
   1375c:	strb	r0, [fp, #-132]	; 0xffffff7c
   13760:	cmp	r4, #1
   13764:	str	r1, [sp, #40]	; 0x28
   13768:	sub	r1, fp, #132	; 0x84
   1376c:	moveq	r0, #39	; 0x27
   13770:	addne	sl, r1, #1
   13774:	addeq	sl, r1, #2
   13778:	strbeq	r0, [fp, #-131]	; 0xffffff7d
   1377c:	ldr	r0, [r9, #48]	; 0x30
   13780:	cmp	r0, #0
   13784:	beq	137b0 <__assert_fail@plt+0x248c>
   13788:	movw	r1, #48233	; 0xbc69
   1378c:	str	r0, [sp, #4]
   13790:	mov	r0, sl
   13794:	mov	r2, #1
   13798:	mvn	r3, #0
   1379c:	movt	r1, #1
   137a0:	str	r1, [sp]
   137a4:	mov	r1, #62	; 0x3e
   137a8:	bl	11300 <__snprintf_chk@plt>
   137ac:	add	sl, sl, r0
   137b0:	ldrb	r0, [r9, #7]
   137b4:	cmp	r0, #1
   137b8:	bne	137d8 <__assert_fail@plt+0x24b4>
   137bc:	movw	r0, #53640	; 0xd188
   137c0:	movw	r2, #48238	; 0xbc6e
   137c4:	mov	r1, #1
   137c8:	movt	r0, #2
   137cc:	movt	r2, #1
   137d0:	ldr	r0, [r0]
   137d4:	bl	1124c <__fprintf_chk@plt>
   137d8:	cmp	r5, #0
   137dc:	beq	13864 <__assert_fail@plt+0x2540>
   137e0:	sub	r1, r5, #3
   137e4:	mov	r0, #1000	; 0x3e8
   137e8:	mov	r6, #0
   137ec:	cmp	r1, #2
   137f0:	movwcc	r0, #1024	; 0x400
   137f4:	cmp	r8, #0
   137f8:	vmov	s0, r0
   137fc:	vcvt.f64.s32	d10, s0
   13800:	beq	138f8 <__assert_fail@plt+0x25d4>
   13804:	vmov	s0, r0
   13808:	vcmpe.f64	d9, #0.0
   1380c:	vneg.f64	d17, d9
   13810:	vmov.f64	d18, d9
   13814:	vmov.f64	d8, d9
   13818:	vmrs	APSR_nzcv, fpscr
   1381c:	vmovmi.f64	d18, d17
   13820:	vcvt.f64.u32	d16, s0
   13824:	vcmpe.f64	d18, d16
   13828:	vmrs	APSR_nzcv, fpscr
   1382c:	blt	138fc <__assert_fail@plt+0x25d8>
   13830:	vmov.f64	d8, d9
   13834:	mov	r6, #0
   13838:	vdiv.f64	d8, d8, d16
   1383c:	add	r6, r6, #1
   13840:	vcmpe.f64	d8, #0.0
   13844:	vneg.f64	d17, d8
   13848:	vmov.f64	d18, d8
   1384c:	vmrs	APSR_nzcv, fpscr
   13850:	vmovmi.f64	d18, d17
   13854:	vcmpe.f64	d18, d16
   13858:	vmrs	APSR_nzcv, fpscr
   1385c:	bge	13838 <__assert_fail@plt+0x2514>
   13860:	b	138fc <__assert_fail@plt+0x25d8>
   13864:	cmp	r6, #0
   13868:	beq	13a00 <__assert_fail@plt+0x26dc>
   1386c:	mov	r1, r6
   13870:	subs	r0, r6, #1
   13874:	beq	13a14 <__assert_fail@plt+0x26f0>
   13878:	ands	r3, r0, #3
   1387c:	sub	r1, r1, #2
   13880:	beq	13c28 <__assert_fail@plt+0x2904>
   13884:	vmov.f64	d17, #36	; 0x41200000  10.0
   13888:	mov	r2, r0
   1388c:	vmov.f64	d16, d17
   13890:	vmul.f64	d16, d16, d17
   13894:	subs	r3, r3, #1
   13898:	sub	r2, r2, #1
   1389c:	bne	13890 <__assert_fail@plt+0x256c>
   138a0:	b	13c30 <__assert_fail@plt+0x290c>
   138a4:	movw	r1, #48037	; 0xbba5
   138a8:	mov	r0, #0
   138ac:	mov	r2, #5
   138b0:	movt	r1, #1
   138b4:	bl	11108 <dcgettext@plt>
   138b8:	mov	r2, r0
   138bc:	mov	r0, r4
   138c0:	vstr	d9, [sp]
   138c4:	mov	r1, #0
   138c8:	bl	1118c <error@plt>
   138cc:	movw	r0, #53652	; 0xd194
   138d0:	movt	r0, #2
   138d4:	ldr	r1, [r0]
   138d8:	mov	r0, r8
   138dc:	bl	1106c <fputs_unlocked@plt>
   138e0:	mov	r4, #0
   138e4:	mov	r0, r4
   138e8:	sub	sp, fp, #64	; 0x40
   138ec:	vpop	{d8-d11}
   138f0:	add	sp, sp, #4
   138f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f8:	vmov.f64	d8, d9
   138fc:	ldrb	r0, [r9, #7]
   13900:	cmp	r0, #1
   13904:	bne	13930 <__assert_fail@plt+0x260c>
   13908:	movw	r0, #53640	; 0xd188
   1390c:	movw	r2, #48391	; 0xbd07
   13910:	mov	r1, #1
   13914:	str	r6, [sp, #16]
   13918:	vstr	d8, [sp]
   1391c:	vstr	d10, [sp, #8]
   13920:	movt	r0, #2
   13924:	movt	r2, #1
   13928:	ldr	r0, [r0]
   1392c:	bl	1124c <__fprintf_chk@plt>
   13930:	ldr	r8, [r7, #8]
   13934:	cmn	r8, #1
   13938:	beq	139c8 <__assert_fail@plt+0x26a4>
   1393c:	add	r1, r6, r6, lsl #1
   13940:	cmp	r1, r8
   13944:	movcs	r1, r8
   13948:	cmp	r1, #0
   1394c:	beq	139f8 <__assert_fail@plt+0x26d4>
   13950:	subs	r0, r1, #1
   13954:	beq	139ec <__assert_fail@plt+0x26c8>
   13958:	ands	r3, r0, #3
   1395c:	sub	r1, r1, #2
   13960:	beq	13a20 <__assert_fail@plt+0x26fc>
   13964:	vmov.f64	d17, #36	; 0x41200000  10.0
   13968:	mov	r2, r0
   1396c:	vmov.f64	d16, d17
   13970:	vmul.f64	d16, d16, d17
   13974:	subs	r3, r3, #1
   13978:	sub	r2, r2, #1
   1397c:	bne	13970 <__assert_fail@plt+0x264c>
   13980:	b	13a28 <__assert_fail@plt+0x2704>
   13984:	cmp	sl, #1
   13988:	bne	13a0c <__assert_fail@plt+0x26e8>
   1398c:	ldrb	r0, [r9, #6]
   13990:	mov	sl, #1
   13994:	cmp	r0, #1
   13998:	bne	135b0 <__assert_fail@plt+0x228c>
   1399c:	movw	r1, #47449	; 0xb959
   139a0:	mov	r0, #0
   139a4:	mov	r2, #5
   139a8:	movt	r1, #1
   139ac:	bl	11108 <dcgettext@plt>
   139b0:	mov	r5, r0
   139b4:	mov	r0, r4
   139b8:	bl	17348 <__assert_fail@plt+0x6024>
   139bc:	mov	r3, r0
   139c0:	mov	r0, #0
   139c4:	b	135a4 <__assert_fail@plt+0x2280>
   139c8:	vcmpe.f64	d8, #0.0
   139cc:	vneg.f64	d16, d8
   139d0:	vmov.f64	d17, #36	; 0x41200000  10.0
   139d4:	vmov.f64	d18, d8
   139d8:	vmrs	APSR_nzcv, fpscr
   139dc:	vmovmi.f64	d18, d16
   139e0:	vcmpe.f64	d18, d17
   139e4:	vmrs	APSR_nzcv, fpscr
   139e8:	bpl	139f8 <__assert_fail@plt+0x26d4>
   139ec:	vmov.f64	d11, #36	; 0x41200000  10.0
   139f0:	vmul.f64	d8, d8, d11
   139f4:	b	13a9c <__assert_fail@plt+0x2778>
   139f8:	vmov.f64	d11, #112	; 0x3f800000  1.0
   139fc:	b	13a9c <__assert_fail@plt+0x2778>
   13a00:	vmov.f64	d8, #112	; 0x3f800000  1.0
   13a04:	vmov.f64	d0, d9
   13a08:	b	13ca4 <__assert_fail@plt+0x2980>
   13a0c:	mov	sl, #0
   13a10:	b	135b0 <__assert_fail@plt+0x228c>
   13a14:	vmov.f64	d8, #36	; 0x41200000  10.0
   13a18:	vmul.f64	d0, d9, d8
   13a1c:	b	13ca4 <__assert_fail@plt+0x2980>
   13a20:	vmov.f64	d16, #36	; 0x41200000  10.0
   13a24:	mov	r2, r0
   13a28:	cmp	r1, #3
   13a2c:	bcc	13a4c <__assert_fail@plt+0x2728>
   13a30:	vmov.f64	d17, #36	; 0x41200000  10.0
   13a34:	vmul.f64	d16, d16, d17
   13a38:	subs	r2, r2, #4
   13a3c:	vmul.f64	d16, d16, d17
   13a40:	vmul.f64	d16, d16, d17
   13a44:	vmul.f64	d16, d16, d17
   13a48:	bne	13a34 <__assert_fail@plt+0x2710>
   13a4c:	ands	r2, r0, #3
   13a50:	beq	13a70 <__assert_fail@plt+0x274c>
   13a54:	vmov.f64	d17, #36	; 0x41200000  10.0
   13a58:	vmov.f64	d11, d17
   13a5c:	vmul.f64	d11, d11, d17
   13a60:	subs	r2, r2, #1
   13a64:	sub	r0, r0, #1
   13a68:	bne	13a5c <__assert_fail@plt+0x2738>
   13a6c:	b	13a74 <__assert_fail@plt+0x2750>
   13a70:	vmov.f64	d11, #36	; 0x41200000  10.0
   13a74:	cmp	r1, #3
   13a78:	bcc	13a98 <__assert_fail@plt+0x2774>
   13a7c:	vmov.f64	d17, #36	; 0x41200000  10.0
   13a80:	vmul.f64	d18, d11, d17
   13a84:	subs	r0, r0, #4
   13a88:	vmul.f64	d18, d18, d17
   13a8c:	vmul.f64	d18, d18, d17
   13a90:	vmul.f64	d11, d18, d17
   13a94:	bne	13a80 <__assert_fail@plt+0x275c>
   13a98:	vmul.f64	d8, d8, d16
   13a9c:	ldr	r0, [sp, #40]	; 0x28
   13aa0:	vmov.f64	d0, d8
   13aa4:	bl	13f28 <__assert_fail@plt+0x2c04>
   13aa8:	vdiv.f64	d8, d0, d11
   13aac:	vcmpe.f64	d8, #0.0
   13ab0:	vneg.f64	d16, d8
   13ab4:	vmov.f64	d17, d8
   13ab8:	vmrs	APSR_nzcv, fpscr
   13abc:	vmovmi.f64	d17, d16
   13ac0:	vcmpe.f64	d17, d10
   13ac4:	vmrs	APSR_nzcv, fpscr
   13ac8:	blt	13ad4 <__assert_fail@plt+0x27b0>
   13acc:	vdiv.f64	d8, d8, d10
   13ad0:	add	r6, r6, #1
   13ad4:	vcmp.f64	d8, #0.0
   13ad8:	mov	r4, #0
   13adc:	vmrs	APSR_nzcv, fpscr
   13ae0:	beq	13b14 <__assert_fail@plt+0x27f0>
   13ae4:	vcmpe.f64	d8, #0.0
   13ae8:	vneg.f64	d16, d8
   13aec:	vmov.f64	d17, #36	; 0x41200000  10.0
   13af0:	vmov.f64	d18, d8
   13af4:	vmrs	APSR_nzcv, fpscr
   13af8:	vmovmi.f64	d18, d16
   13afc:	vcmpe.f64	d18, d17
   13b00:	vmrs	APSR_nzcv, fpscr
   13b04:	bpl	13b14 <__assert_fail@plt+0x27f0>
   13b08:	cmp	r6, #0
   13b0c:	mov	r4, r6
   13b10:	movwne	r4, #1
   13b14:	ldrb	r0, [r9, #7]
   13b18:	cmp	r0, #1
   13b1c:	bne	13b4c <__assert_fail@plt+0x2828>
   13b20:	movw	r0, #53640	; 0xd188
   13b24:	movw	r2, #48426	; 0xbd2a
   13b28:	mov	r1, #1
   13b2c:	str	r6, [sp, #16]
   13b30:	vstr	d8, [sp]
   13b34:	vstr	d10, [sp, #8]
   13b38:	movt	r0, #2
   13b3c:	movt	r2, #1
   13b40:	ldr	r0, [r0]
   13b44:	bl	1124c <__fprintf_chk@plt>
   13b48:	ldr	r8, [r7, #8]
   13b4c:	movw	r0, #9574	; 0x2566
   13b50:	cmn	r8, #1
   13b54:	movt	r0, #115	; 0x73
   13b58:	movne	r4, r8
   13b5c:	cmp	r6, #8
   13b60:	str	r0, [sl, #3]
   13b64:	movw	r0, #10798	; 0x2a2e
   13b68:	movt	r0, #26188	; 0x664c
   13b6c:	str	r0, [sl]
   13b70:	bhi	13b84 <__assert_fail@plt+0x2860>
   13b74:	movw	r0, #49040	; 0xbf90
   13b78:	movt	r0, #1
   13b7c:	ldr	r0, [r0, r6, lsl #2]
   13b80:	b	13b8c <__assert_fail@plt+0x2868>
   13b84:	movw	r0, #48511	; 0xbd7f
   13b88:	movt	r0, #1
   13b8c:	sub	r1, fp, #132	; 0x84
   13b90:	str	r0, [sp, #16]
   13b94:	vstr	d8, [sp, #8]
   13b98:	add	r0, sp, #44	; 0x2c
   13b9c:	mov	r2, #1
   13ba0:	mov	r3, #128	; 0x80
   13ba4:	stm	sp, {r1, r4}
   13ba8:	mov	r1, #127	; 0x7f
   13bac:	bl	11300 <__snprintf_chk@plt>
   13bb0:	cmp	r0, #127	; 0x7f
   13bb4:	bcs	13efc <__assert_fail@plt+0x2bd8>
   13bb8:	cmp	r5, #4
   13bbc:	bne	13be0 <__assert_fail@plt+0x28bc>
   13bc0:	cmp	r6, #0
   13bc4:	beq	13be0 <__assert_fail@plt+0x28bc>
   13bc8:	movw	r1, #46884	; 0xb724
   13bcc:	rsb	r2, r0, #127	; 0x7f
   13bd0:	add	r0, sp, #44	; 0x2c
   13bd4:	mov	r3, #128	; 0x80
   13bd8:	movt	r1, #1
   13bdc:	bl	11084 <__strncat_chk@plt>
   13be0:	ldrb	r0, [r9, #7]
   13be4:	cmp	r0, #1
   13be8:	bne	13d2c <__assert_fail@plt+0x2a08>
   13bec:	movw	r0, #53640	; 0xd188
   13bf0:	movt	r0, #2
   13bf4:	ldr	r4, [r0]
   13bf8:	add	r0, sp, #44	; 0x2c
   13bfc:	bl	17348 <__assert_fail@plt+0x6024>
   13c00:	movw	r2, #48474	; 0xbd5a
   13c04:	mov	r3, r0
   13c08:	mov	r0, r4
   13c0c:	mov	r1, #1
   13c10:	movt	r2, #1
   13c14:	bl	1124c <__fprintf_chk@plt>
   13c18:	ldr	r4, [r9, #32]
   13c1c:	cmp	r4, #0
   13c20:	bne	13d38 <__assert_fail@plt+0x2a14>
   13c24:	b	13d58 <__assert_fail@plt+0x2a34>
   13c28:	vmov.f64	d16, #36	; 0x41200000  10.0
   13c2c:	mov	r2, r0
   13c30:	cmp	r1, #3
   13c34:	bcc	13c54 <__assert_fail@plt+0x2930>
   13c38:	vmov.f64	d17, #36	; 0x41200000  10.0
   13c3c:	vmul.f64	d16, d16, d17
   13c40:	subs	r2, r2, #4
   13c44:	vmul.f64	d16, d16, d17
   13c48:	vmul.f64	d16, d16, d17
   13c4c:	vmul.f64	d16, d16, d17
   13c50:	bne	13c3c <__assert_fail@plt+0x2918>
   13c54:	ands	r2, r0, #3
   13c58:	beq	13c78 <__assert_fail@plt+0x2954>
   13c5c:	vmov.f64	d17, #36	; 0x41200000  10.0
   13c60:	vmov.f64	d8, d17
   13c64:	vmul.f64	d8, d8, d17
   13c68:	subs	r2, r2, #1
   13c6c:	sub	r0, r0, #1
   13c70:	bne	13c64 <__assert_fail@plt+0x2940>
   13c74:	b	13c7c <__assert_fail@plt+0x2958>
   13c78:	vmov.f64	d8, #36	; 0x41200000  10.0
   13c7c:	cmp	r1, #3
   13c80:	bcc	13ca0 <__assert_fail@plt+0x297c>
   13c84:	vmov.f64	d17, #36	; 0x41200000  10.0
   13c88:	vmul.f64	d18, d8, d17
   13c8c:	subs	r0, r0, #4
   13c90:	vmul.f64	d18, d18, d17
   13c94:	vmul.f64	d18, d18, d17
   13c98:	vmul.f64	d8, d18, d17
   13c9c:	bne	13c88 <__assert_fail@plt+0x2964>
   13ca0:	vmul.f64	d0, d9, d16
   13ca4:	ldr	r0, [sp, #40]	; 0x28
   13ca8:	bl	13f28 <__assert_fail@plt+0x2c04>
   13cac:	vdiv.f64	d8, d0, d8
   13cb0:	ldrb	r0, [r9, #7]
   13cb4:	cmp	r0, #1
   13cb8:	bne	13cf0 <__assert_fail@plt+0x29cc>
   13cbc:	movw	r0, #53640	; 0xd188
   13cc0:	movw	r1, #48256	; 0xbc80
   13cc4:	movw	r2, #48305	; 0xbcb1
   13cc8:	cmp	r4, #0
   13ccc:	mov	r3, r6
   13cd0:	vstr	d8, [sp]
   13cd4:	movt	r0, #2
   13cd8:	movt	r1, #1
   13cdc:	movt	r2, #1
   13ce0:	ldr	r0, [r0]
   13ce4:	movne	r2, r1
   13ce8:	mov	r1, #1
   13cec:	bl	1124c <__fprintf_chk@plt>
   13cf0:	mov	r0, #0
   13cf4:	vstr	d8, [sp, #8]
   13cf8:	mov	r1, #128	; 0x80
   13cfc:	mov	r2, #1
   13d00:	mov	r3, #128	; 0x80
   13d04:	strb	r0, [sl, #4]
   13d08:	movw	r0, #10798	; 0x2a2e
   13d0c:	movt	r0, #26188	; 0x664c
   13d10:	str	r0, [sl]
   13d14:	sub	r0, fp, #132	; 0x84
   13d18:	stm	sp, {r0, r6}
   13d1c:	add	r0, sp, #44	; 0x2c
   13d20:	bl	11300 <__snprintf_chk@plt>
   13d24:	cmp	r0, #128	; 0x80
   13d28:	bcs	13efc <__assert_fail@plt+0x2bd8>
   13d2c:	ldr	r4, [r9, #32]
   13d30:	cmp	r4, #0
   13d34:	beq	13d58 <__assert_fail@plt+0x2a34>
   13d38:	add	r5, sp, #44	; 0x2c
   13d3c:	mov	r0, r5
   13d40:	bl	111f8 <strlen@plt>
   13d44:	rsb	r2, r0, #127	; 0x7f
   13d48:	mov	r0, r5
   13d4c:	mov	r1, r4
   13d50:	mov	r3, #128	; 0x80
   13d54:	bl	11084 <__strncat_chk@plt>
   13d58:	ldrb	r0, [r9, #7]
   13d5c:	cmp	r0, #1
   13d60:	bne	13d94 <__assert_fail@plt+0x2a70>
   13d64:	movw	r0, #53640	; 0xd188
   13d68:	movt	r0, #2
   13d6c:	ldr	r4, [r0]
   13d70:	add	r0, sp, #44	; 0x2c
   13d74:	bl	17348 <__assert_fail@plt+0x6024>
   13d78:	movw	r2, #48163	; 0xbc23
   13d7c:	str	r0, [sp, #8]
   13d80:	mov	r0, r4
   13d84:	mov	r1, #1
   13d88:	vstr	d9, [sp]
   13d8c:	movt	r2, #1
   13d90:	bl	1124c <__fprintf_chk@plt>
   13d94:	ldr	r4, [r9, #28]
   13d98:	cmp	r4, #0
   13d9c:	beq	13e20 <__assert_fail@plt+0x2afc>
   13da0:	add	r0, sp, #44	; 0x2c
   13da4:	bl	111f8 <strlen@plt>
   13da8:	cmp	r0, r4
   13dac:	bcs	13e20 <__assert_fail@plt+0x2afc>
   13db0:	ldrb	r0, [r9, #4]
   13db4:	ldr	r2, [r9, #60]	; 0x3c
   13db8:	ldr	r1, [r9, #64]	; 0x40
   13dbc:	mov	r3, #2
   13dc0:	str	r4, [fp, #-132]	; 0xffffff7c
   13dc4:	eor	r0, r0, #1
   13dc8:	stm	sp, {r0, r3}
   13dcc:	add	r0, sp, #44	; 0x2c
   13dd0:	sub	r3, fp, #132	; 0x84
   13dd4:	bl	14efc <__assert_fail@plt+0x3bd8>
   13dd8:	ldrb	r0, [r9, #7]
   13ddc:	cmp	r0, #1
   13de0:	bne	13e5c <__assert_fail@plt+0x2b38>
   13de4:	movw	r0, #53640	; 0xd188
   13de8:	movt	r0, #2
   13dec:	ldr	r4, [r0]
   13df0:	ldr	r0, [r9, #64]	; 0x40
   13df4:	bl	17348 <__assert_fail@plt+0x6024>
   13df8:	movw	r2, #48212	; 0xbc54
   13dfc:	mov	r3, r0
   13e00:	mov	r0, r4
   13e04:	mov	r1, #1
   13e08:	movt	r2, #1
   13e0c:	bl	1124c <__fprintf_chk@plt>
   13e10:	ldr	r0, [r9, #52]	; 0x34
   13e14:	cmp	r0, #0
   13e18:	bne	13e68 <__assert_fail@plt+0x2b44>
   13e1c:	b	13e78 <__assert_fail@plt+0x2b54>
   13e20:	add	r0, sp, #44	; 0x2c
   13e24:	bl	111f8 <strlen@plt>
   13e28:	ldr	r1, [r9, #60]	; 0x3c
   13e2c:	add	r2, r0, #1
   13e30:	cmp	r1, r2
   13e34:	bls	13e40 <__assert_fail@plt+0x2b1c>
   13e38:	ldr	r0, [r9, #64]	; 0x40
   13e3c:	b	13e54 <__assert_fail@plt+0x2b30>
   13e40:	add	r1, r0, #2
   13e44:	str	r1, [r9, #60]	; 0x3c
   13e48:	ldr	r0, [r9, #64]	; 0x40
   13e4c:	bl	17a68 <__assert_fail@plt+0x6744>
   13e50:	str	r0, [r9, #64]	; 0x40
   13e54:	add	r1, sp, #44	; 0x2c
   13e58:	bl	1115c <strcpy@plt>
   13e5c:	ldr	r0, [r9, #52]	; 0x34
   13e60:	cmp	r0, #0
   13e64:	beq	13e78 <__assert_fail@plt+0x2b54>
   13e68:	movw	r1, #53652	; 0xd194
   13e6c:	movt	r1, #2
   13e70:	ldr	r1, [r1]
   13e74:	bl	1106c <fputs_unlocked@plt>
   13e78:	movw	r5, #53652	; 0xd194
   13e7c:	ldr	r0, [r9, #64]	; 0x40
   13e80:	movt	r5, #2
   13e84:	ldr	r1, [r5]
   13e88:	bl	1106c <fputs_unlocked@plt>
   13e8c:	ldr	r0, [r9, #56]	; 0x38
   13e90:	mov	r4, #1
   13e94:	cmp	r0, #0
   13e98:	beq	138e4 <__assert_fail@plt+0x25c0>
   13e9c:	ldr	r1, [r5]
   13ea0:	bl	1106c <fputs_unlocked@plt>
   13ea4:	b	138e4 <__assert_fail@plt+0x25c0>
   13ea8:	vmov.f64	d17, #36	; 0x41200000  10.0
   13eac:	b	13ed8 <__assert_fail@plt+0x2bb4>
   13eb0:	vmov.f64	d17, #36	; 0x41200000  10.0
   13eb4:	cmp	r1, #3
   13eb8:	bcc	13ed8 <__assert_fail@plt+0x2bb4>
   13ebc:	vmov.f64	d18, #36	; 0x41200000  10.0
   13ec0:	vmul.f64	d17, d17, d18
   13ec4:	subs	r0, r0, #4
   13ec8:	vmul.f64	d17, d17, d18
   13ecc:	vmul.f64	d17, d17, d18
   13ed0:	vmul.f64	d17, d17, d18
   13ed4:	bne	13ec0 <__assert_fail@plt+0x2b9c>
   13ed8:	vdiv.f64	d16, d16, d17
   13edc:	cmp	ip, #45	; 0x2d
   13ee0:	vneg.f64	d17, d16
   13ee4:	vseleq.f64	d16, d17, d16
   13ee8:	cmp	sl, #1
   13eec:	vadd.f64	d9, d9, d16
   13ef0:	bls	12fb0 <__assert_fail@plt+0x1c8c>
   13ef4:	b	13440 <__assert_fail@plt+0x211c>
   13ef8:	bl	112f4 <abort@plt>
   13efc:	movw	r1, #48348	; 0xbcdc
   13f00:	mov	r0, #0
   13f04:	mov	r2, #5
   13f08:	movt	r1, #1
   13f0c:	bl	11108 <dcgettext@plt>
   13f10:	mov	r2, r0
   13f14:	mov	r0, #1
   13f18:	mov	r1, #0
   13f1c:	vstr	d8, [sp]
   13f20:	bl	1118c <error@plt>
   13f24:	nop	{0}
   13f28:	push	{r4, r5, fp, lr}
   13f2c:	add	fp, sp, #8
   13f30:	vpush	{d8-d9}
   13f34:	vldr	d16, [pc, #276]	; 14050 <__assert_fail@plt+0x2d2c>
   13f38:	mov	r4, r0
   13f3c:	vmov.f64	d8, d0
   13f40:	vmul.f64	d16, d0, d16
   13f44:	vmov	r0, r1, d16
   13f48:	bl	1a0cc <__assert_fail@plt+0x8da8>
   13f4c:	bl	1a020 <__assert_fail@plt+0x8cfc>
   13f50:	cmp	r4, #4
   13f54:	bhi	14008 <__assert_fail@plt+0x2ce4>
   13f58:	vmov	d17, r0, r1
   13f5c:	vldr	d16, [pc, #244]	; 14058 <__assert_fail@plt+0x2d34>
   13f60:	add	r0, pc, #8
   13f64:	vmul.f64	d9, d17, d16
   13f68:	vsub.f64	d8, d8, d9
   13f6c:	ldr	pc, [r0, r4, lsl #2]
   13f70:	ldrdeq	r3, [r1], -r0
   13f74:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13f78:	andeq	r3, r1, r4, lsl #31
   13f7c:	andeq	r4, r1, r4, lsl r0
   13f80:	andeq	r4, r1, ip, lsl r0
   13f84:	vcmpe.f64	d8, #0.0
   13f88:	vmrs	APSR_nzcv, fpscr
   13f8c:	bpl	13fd0 <__assert_fail@plt+0x2cac>
   13f90:	vneg.f64	d8, d8
   13f94:	vmov	r0, r1, d8
   13f98:	bl	1a0cc <__assert_fail@plt+0x8da8>
   13f9c:	mov	r4, r0
   13fa0:	mov	r5, r1
   13fa4:	bl	1a020 <__assert_fail@plt+0x8cfc>
   13fa8:	vmov	d16, r0, r1
   13fac:	adds	r2, r4, #1
   13fb0:	adc	r1, r5, #0
   13fb4:	vcmpe.f64	d16, d8
   13fb8:	vmrs	APSR_nzcv, fpscr
   13fbc:	movpl	r2, r4
   13fc0:	movpl	r1, r5
   13fc4:	rsbs	r0, r2, #0
   13fc8:	rsc	r1, r1, #0
   13fcc:	b	1403c <__assert_fail@plt+0x2d18>
   13fd0:	vmov	r0, r1, d8
   13fd4:	bl	1a0cc <__assert_fail@plt+0x8da8>
   13fd8:	mov	r4, r0
   13fdc:	mov	r5, r1
   13fe0:	bl	1a020 <__assert_fail@plt+0x8cfc>
   13fe4:	mov	r2, r0
   13fe8:	adds	r0, r4, #1
   13fec:	vmov	d16, r2, r1
   13ff0:	adc	r1, r5, #0
   13ff4:	vcmpe.f64	d8, d16
   13ff8:	vmrs	APSR_nzcv, fpscr
   13ffc:	movle	r0, r4
   14000:	movle	r1, r5
   14004:	b	1403c <__assert_fail@plt+0x2d18>
   14008:	vmov.i32	d0, #0	; 0x00000000
   1400c:	vpop	{d8-d9}
   14010:	pop	{r4, r5, fp, pc}
   14014:	vmov	r0, r1, d8
   14018:	b	14038 <__assert_fail@plt+0x2d14>
   1401c:	vcmpe.f64	d8, #0.0
   14020:	vmov.f64	d16, #224	; 0xbf000000 -0.5
   14024:	vmov.f64	d17, #96	; 0x3f000000  0.5
   14028:	vmrs	APSR_nzcv, fpscr
   1402c:	vmovmi.f64	d17, d16
   14030:	vadd.f64	d16, d8, d17
   14034:	vmov	r0, r1, d16
   14038:	bl	1a0cc <__assert_fail@plt+0x8da8>
   1403c:	bl	1a020 <__assert_fail@plt+0x8cfc>
   14040:	vmov	d16, r0, r1
   14044:	vadd.f64	d0, d9, d16
   14048:	vpop	{d8-d9}
   1404c:	pop	{r4, r5, fp, pc}
   14050:	andeq	r0, r0, r0
   14054:	stccc	0, cr0, [r0], {-0}
   14058:	andeq	r0, r0, r0
   1405c:	mvnmi	r0, #0
   14060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14064:	add	fp, sp, #28
   14068:	sub	sp, sp, #20
   1406c:	mov	r5, r0
   14070:	ands	r0, r1, #1
   14074:	mov	r2, #0
   14078:	str	r1, [sp]
   1407c:	str	r0, [sp, #4]
   14080:	beq	140b4 <__assert_fail@plt+0x2d90>
   14084:	movw	r1, #49232	; 0xc050
   14088:	mov	r0, r5
   1408c:	movt	r1, #1
   14090:	bl	11090 <strcmp@plt>
   14094:	cmp	r0, #0
   14098:	clz	r0, r0
   1409c:	mov	r2, #0
   140a0:	mov	r8, #0
   140a4:	lsr	r9, r0, #5
   140a8:	addeq	r5, r5, #1
   140ac:	mov	r1, r9
   140b0:	b	140c0 <__assert_fail@plt+0x2d9c>
   140b4:	mov	r9, #0
   140b8:	mov	r8, #0
   140bc:	mov	r1, #0
   140c0:	movw	ip, #54076	; 0xd33c
   140c4:	movw	lr, #53744	; 0xd1f0
   140c8:	mov	r0, #1
   140cc:	mov	r7, r1
   140d0:	mov	r4, #0
   140d4:	mov	r3, #0
   140d8:	movt	ip, #2
   140dc:	movt	lr, #2
   140e0:	str	r0, [sp, #12]
   140e4:	ldrb	r6, [r5]
   140e8:	str	r5, [sp, #16]
   140ec:	cmp	r6, #44	; 0x2c
   140f0:	beq	14260 <__assert_fail@plt+0x2f3c>
   140f4:	cmp	r6, #45	; 0x2d
   140f8:	bne	14150 <__assert_fail@plt+0x2e2c>
   140fc:	tst	r7, #1
   14100:	bne	147b0 <__assert_fail@plt+0x348c>
   14104:	ldr	r5, [sp, #16]
   14108:	orrs	r0, r9, r8
   1410c:	eoreq	r0, r1, #1
   14110:	tsteq	r0, #1
   14114:	beq	14724 <__assert_fail@plt+0x3400>
   14118:	ands	r3, r1, #1
   1411c:	mov	r7, #1
   14120:	mov	r4, #0
   14124:	add	r5, r5, #1
   14128:	moveq	r9, r7
   1412c:	movne	r3, r8
   14130:	mov	r8, #0
   14134:	str	r9, [sp, #12]
   14138:	mov	r9, #0
   1413c:	ldrb	r6, [r5]
   14140:	str	r5, [sp, #16]
   14144:	cmp	r6, #44	; 0x2c
   14148:	bne	140f4 <__assert_fail@plt+0x2dd0>
   1414c:	b	14260 <__assert_fail@plt+0x2f3c>
   14150:	str	r3, [sp, #8]
   14154:	mov	r5, r2
   14158:	mov	sl, r1
   1415c:	bl	111d4 <__ctype_b_loc@plt>
   14160:	ldr	r3, [sp, #8]
   14164:	movw	lr, #53744	; 0xd1f0
   14168:	movw	ip, #54076	; 0xd33c
   1416c:	mov	r1, sl
   14170:	mov	r2, r5
   14174:	cmp	r6, #0
   14178:	movt	lr, #2
   1417c:	movt	ip, #2
   14180:	beq	14260 <__assert_fail@plt+0x2f3c>
   14184:	ldr	r0, [r0]
   14188:	add	r0, r0, r6, lsl #1
   1418c:	ldrh	r0, [r0]
   14190:	ands	r0, r0, #1
   14194:	bne	14260 <__assert_fail@plt+0x2f3c>
   14198:	sub	r0, r6, #48	; 0x30
   1419c:	cmp	r0, #9
   141a0:	bhi	147dc <__assert_fail@plt+0x34b8>
   141a4:	ldr	r6, [lr]
   141a8:	cmp	r6, #0
   141ac:	mov	r1, r6
   141b0:	movwne	r1, #1
   141b4:	tst	r4, r1
   141b8:	movw	r1, #39321	; 0x9999
   141bc:	ldreq	r6, [sp, #16]
   141c0:	movt	r1, #39321	; 0x9999
   141c4:	streq	r6, [lr]
   141c8:	subs	r1, r1, r9
   141cc:	movw	r1, #39321	; 0x9999
   141d0:	movt	r1, #6553	; 0x1999
   141d4:	sbcs	r1, r1, r8
   141d8:	bcc	14738 <__assert_fail@plt+0x3414>
   141dc:	mov	r1, #10
   141e0:	add	r3, r8, r8, lsl #2
   141e4:	umull	r1, r2, r9, r1
   141e8:	add	r2, r2, r3, lsl #1
   141ec:	adds	r1, r1, r0
   141f0:	adc	r0, r2, r0, asr #31
   141f4:	subs	r2, r1, r9
   141f8:	sbcs	r2, r0, r8
   141fc:	mov	r2, #0
   14200:	movwcc	r2, #1
   14204:	cmp	r2, #0
   14208:	moveq	r8, r0
   1420c:	moveq	r9, r1
   14210:	cmp	r2, #0
   14214:	bne	14738 <__assert_fail@plt+0x3414>
   14218:	mvn	r1, #0
   1421c:	eor	r0, r9, r1
   14220:	eor	r1, r8, r1
   14224:	orrs	r0, r0, r1
   14228:	beq	14738 <__assert_fail@plt+0x3414>
   1422c:	mov	r2, r5
   14230:	orr	r2, r5, r7
   14234:	ldr	r5, [sp, #16]
   14238:	ldr	r3, [sp, #8]
   1423c:	eor	r0, r7, #1
   14240:	mov	r1, sl
   14244:	mov	r4, #1
   14248:	orr	r1, sl, r0
   1424c:	add	r5, r5, #1
   14250:	ldrb	r6, [r5]
   14254:	str	r5, [sp, #16]
   14258:	cmp	r6, #44	; 0x2c
   1425c:	bne	140f4 <__assert_fail@plt+0x2dd0>
   14260:	tst	r7, #1
   14264:	beq	142f4 <__assert_fail@plt+0x2fd0>
   14268:	orr	r0, r1, r2
   1426c:	ldr	r1, [sp, #12]
   14270:	mov	sl, #1
   14274:	movw	r4, #54072	; 0xd338
   14278:	ands	r6, r0, #1
   1427c:	movt	r4, #2
   14280:	movne	r6, r3
   14284:	movne	sl, r1
   14288:	ldr	r1, [sp, #4]
   1428c:	cmp	r1, #0
   14290:	tsteq	r0, #1
   14294:	beq	147d0 <__assert_fail@plt+0x34ac>
   14298:	ldr	r5, [sp, #16]
   1429c:	tst	r2, #1
   142a0:	beq	14348 <__assert_fail@plt+0x3024>
   142a4:	subs	r0, r9, sl
   142a8:	sbcs	r0, r8, r6
   142ac:	bcc	1482c <__assert_fail@plt+0x3508>
   142b0:	ldr	r1, [ip]
   142b4:	ldr	r0, [lr, #4]
   142b8:	cmp	r1, r0
   142bc:	bne	143c8 <__assert_fail@plt+0x30a4>
   142c0:	ldr	r0, [r4]
   142c4:	add	r1, lr, #4
   142c8:	mov	r2, #16
   142cc:	mov	r7, r3
   142d0:	bl	17bcc <__assert_fail@plt+0x68a8>
   142d4:	movw	ip, #54076	; 0xd33c
   142d8:	movw	lr, #53744	; 0xd1f0
   142dc:	mov	r3, r7
   142e0:	str	r0, [r4]
   142e4:	movt	ip, #2
   142e8:	movt	lr, #2
   142ec:	ldr	r1, [ip]
   142f0:	b	143cc <__assert_fail@plt+0x30a8>
   142f4:	movw	r4, #54072	; 0xd338
   142f8:	orrs	r0, r9, r8
   142fc:	movt	r4, #2
   14300:	beq	14724 <__assert_fail@plt+0x3400>
   14304:	ldr	r1, [ip]
   14308:	ldr	r0, [lr, #4]
   1430c:	cmp	r1, r0
   14310:	bne	14384 <__assert_fail@plt+0x3060>
   14314:	ldr	r0, [r4]
   14318:	add	r1, lr, #4
   1431c:	mov	r2, #16
   14320:	mov	r6, r3
   14324:	bl	17bcc <__assert_fail@plt+0x68a8>
   14328:	movw	ip, #54076	; 0xd33c
   1432c:	movw	lr, #53744	; 0xd1f0
   14330:	mov	r3, r6
   14334:	str	r0, [r4]
   14338:	movt	ip, #2
   1433c:	movt	lr, #2
   14340:	ldr	r1, [ip]
   14344:	b	14388 <__assert_fail@plt+0x3064>
   14348:	ldr	r1, [ip]
   1434c:	ldr	r0, [lr, #4]
   14350:	cmp	r1, r0
   14354:	bne	143a8 <__assert_fail@plt+0x3084>
   14358:	ldr	r0, [r4]
   1435c:	add	r1, lr, #4
   14360:	mov	r2, #16
   14364:	bl	17bcc <__assert_fail@plt+0x68a8>
   14368:	movw	ip, #54076	; 0xd33c
   1436c:	movw	lr, #53744	; 0xd1f0
   14370:	str	r0, [r4]
   14374:	movt	ip, #2
   14378:	movt	lr, #2
   1437c:	ldr	r1, [ip]
   14380:	b	143ac <__assert_fail@plt+0x3088>
   14384:	ldr	r0, [r4]
   14388:	vmov.32	d16[0], r9
   1438c:	ldr	r5, [sp, #16]
   14390:	ldr	sl, [sp, #12]
   14394:	add	r2, r0, r1, lsl #4
   14398:	vmov.32	d16[1], r8
   1439c:	vorr	d17, d16, d16
   143a0:	vst1.64	{d16-d17}, [r2]
   143a4:	b	143e0 <__assert_fail@plt+0x30bc>
   143a8:	ldr	r0, [r4]
   143ac:	mov	r2, r0
   143b0:	mvn	r3, #0
   143b4:	str	sl, [r2, r1, lsl #4]!
   143b8:	str	r6, [r2, #4]
   143bc:	str	r3, [r2, #8]
   143c0:	str	r3, [r2, #12]
   143c4:	b	143e4 <__assert_fail@plt+0x30c0>
   143c8:	ldr	r0, [r4]
   143cc:	mov	r2, r0
   143d0:	str	sl, [r2, r1, lsl #4]!
   143d4:	stmib	r2, {r6, r9}
   143d8:	str	r8, [r2, #12]
   143dc:	ldr	sl, [sp, #12]
   143e0:	mov	r6, r3
   143e4:	add	r1, r1, #1
   143e8:	str	r1, [ip]
   143ec:	ldrb	r2, [r5]
   143f0:	cmp	r2, #0
   143f4:	beq	1441c <__assert_fail@plt+0x30f8>
   143f8:	mov	r9, #0
   143fc:	mov	r8, #0
   14400:	mov	r1, #0
   14404:	mov	r2, #0
   14408:	mov	r7, #0
   1440c:	mov	r4, #0
   14410:	str	sl, [sp, #12]
   14414:	mov	r3, r6
   14418:	b	1424c <__assert_fail@plt+0x2f28>
   1441c:	cmp	r1, #0
   14420:	beq	14858 <__assert_fail@plt+0x3534>
   14424:	movw	r3, #18540	; 0x486c
   14428:	mov	r2, #16
   1442c:	movt	r3, #1
   14430:	bl	112c4 <qsort@plt>
   14434:	movw	lr, #54076	; 0xd33c
   14438:	movt	lr, #2
   1443c:	ldr	r8, [lr]
   14440:	cmp	r8, #0
   14444:	beq	14504 <__assert_fail@plt+0x31e0>
   14448:	mov	r6, #0
   1444c:	mov	sl, r6
   14450:	add	r6, r6, #1
   14454:	cmp	r6, r8
   14458:	bcc	14474 <__assert_fail@plt+0x3150>
   1445c:	cmp	r6, r8
   14460:	bcs	14508 <__assert_fail@plt+0x31e4>
   14464:	mov	sl, r6
   14468:	add	r6, r6, #1
   1446c:	cmp	r6, r8
   14470:	bcs	1445c <__assert_fail@plt+0x3138>
   14474:	mvn	r0, #-268435455	; 0xf0000001
   14478:	sub	r9, r0, sl
   1447c:	ldr	r5, [r4]
   14480:	add	r1, r5, sl, lsl #4
   14484:	mov	r0, r5
   14488:	ldr	r7, [r0, r6, lsl #4]!
   1448c:	ldr	r2, [r1, #8]!
   14490:	ldr	r3, [r1, #4]
   14494:	ldr	r0, [r0, #4]
   14498:	subs	r7, r2, r7
   1449c:	sbcs	r0, r3, r0
   144a0:	bcc	1445c <__assert_fail@plt+0x3138>
   144a4:	add	r0, r5, r6, lsl #4
   144a8:	ldrd	r4, [r0, #8]
   144ac:	subs	r7, r2, r4
   144b0:	sbcs	r7, r3, r5
   144b4:	mov	r7, #0
   144b8:	movwcc	r7, #1
   144bc:	cmp	r7, #0
   144c0:	movne	r2, r4
   144c4:	movne	r3, r5
   144c8:	movw	r4, #54072	; 0xd338
   144cc:	strd	r2, [r1]
   144d0:	add	r2, r9, r8
   144d4:	add	r1, r0, #16
   144d8:	movt	r4, #2
   144dc:	lsl	r2, r2, #4
   144e0:	bl	110c0 <memmove@plt>
   144e4:	movw	lr, #54076	; 0xd33c
   144e8:	movt	lr, #2
   144ec:	ldr	r0, [lr]
   144f0:	sub	r8, r0, #1
   144f4:	cmp	r6, r8
   144f8:	str	r8, [lr]
   144fc:	bcc	1447c <__assert_fail@plt+0x3158>
   14500:	b	1445c <__assert_fail@plt+0x3138>
   14504:	mov	r8, #0
   14508:	ldr	r0, [sp]
   1450c:	tst	r0, #2
   14510:	beq	146e0 <__assert_fail@plt+0x33bc>
   14514:	movw	r2, #53744	; 0xd1f0
   14518:	ldr	r7, [r4]
   1451c:	mov	r0, #0
   14520:	movt	r2, #2
   14524:	str	r0, [lr]
   14528:	str	r0, [r4]
   1452c:	str	r0, [r2, #4]
   14530:	ldr	r6, [r7]
   14534:	ldr	r5, [r7, #4]
   14538:	subs	r1, r6, #2
   1453c:	sbcs	r1, r5, #0
   14540:	bcc	145a0 <__assert_fail@plt+0x327c>
   14544:	add	r1, r2, #4
   14548:	mov	r0, #0
   1454c:	mov	r2, #16
   14550:	mov	r9, #0
   14554:	bl	17bcc <__assert_fail@plt+0x68a8>
   14558:	movw	lr, #54076	; 0xd33c
   1455c:	mov	r2, #1
   14560:	mov	r3, r0
   14564:	str	r0, [r4]
   14568:	movt	lr, #2
   1456c:	ldr	r1, [lr]
   14570:	str	r2, [r3, r1, lsl #4]!
   14574:	subs	r2, r6, #1
   14578:	add	ip, r1, #1
   1457c:	sbc	r6, r5, #0
   14580:	str	r9, [r3, #4]
   14584:	str	r2, [r3, #8]
   14588:	str	r6, [r3, #12]
   1458c:	str	ip, [lr]
   14590:	cmp	r8, #2
   14594:	str	r7, [sp, #16]
   14598:	bcs	145b0 <__assert_fail@plt+0x328c>
   1459c:	b	14648 <__assert_fail@plt+0x3324>
   145a0:	mov	ip, #0
   145a4:	cmp	r8, #2
   145a8:	str	r7, [sp, #16]
   145ac:	bcc	14648 <__assert_fail@plt+0x3324>
   145b0:	add	r6, r7, #16
   145b4:	sub	r7, r8, #1
   145b8:	b	145e0 <__assert_fail@plt+0x32bc>
   145bc:	mov	r1, r0
   145c0:	str	r9, [r1, ip, lsl #4]!
   145c4:	add	ip, ip, #1
   145c8:	stmib	r1, {r5, sl}
   145cc:	str	r4, [r1, #12]
   145d0:	str	ip, [lr]
   145d4:	add	r6, r6, #16
   145d8:	subs	r7, r7, #1
   145dc:	beq	14648 <__assert_fail@plt+0x3324>
   145e0:	ldr	r5, [r6, #-8]
   145e4:	ldr	r4, [r6, #-4]
   145e8:	ldm	r6, {r2, r3}
   145ec:	adds	r9, r5, #1
   145f0:	adc	r5, r4, #0
   145f4:	eor	r1, r9, r2
   145f8:	eor	r4, r5, r3
   145fc:	orrs	r1, r1, r4
   14600:	beq	145d4 <__assert_fail@plt+0x32b0>
   14604:	subs	sl, r2, #1
   14608:	movw	r2, #53744	; 0xd1f0
   1460c:	movt	r2, #2
   14610:	sbc	r4, r3, #0
   14614:	ldr	r1, [r2, #4]
   14618:	cmp	ip, r1
   1461c:	bne	145bc <__assert_fail@plt+0x3298>
   14620:	add	r1, r2, #4
   14624:	mov	r2, #16
   14628:	bl	17bcc <__assert_fail@plt+0x68a8>
   1462c:	movw	lr, #54076	; 0xd33c
   14630:	movw	r1, #54072	; 0xd338
   14634:	movt	lr, #2
   14638:	movt	r1, #2
   1463c:	ldr	ip, [lr]
   14640:	str	r0, [r1]
   14644:	b	145bc <__assert_fail@plt+0x3298>
   14648:	ldr	r4, [sp, #16]
   1464c:	mvn	r1, #0
   14650:	add	r2, r4, r8, lsl #4
   14654:	ldrd	r2, [r2, #-8]
   14658:	eor	r7, r3, r1
   1465c:	eor	r6, r2, r1
   14660:	orrs	r7, r6, r7
   14664:	beq	146c4 <__assert_fail@plt+0x33a0>
   14668:	adds	r6, r2, #1
   1466c:	movw	r2, #53744	; 0xd1f0
   14670:	movt	r2, #2
   14674:	adc	r5, r3, #0
   14678:	ldr	r1, [r2, #4]
   1467c:	cmp	ip, r1
   14680:	bne	146a8 <__assert_fail@plt+0x3384>
   14684:	add	r1, r2, #4
   14688:	mov	r2, #16
   1468c:	bl	17bcc <__assert_fail@plt+0x68a8>
   14690:	movw	lr, #54076	; 0xd33c
   14694:	movw	r1, #54072	; 0xd338
   14698:	movt	lr, #2
   1469c:	movt	r1, #2
   146a0:	ldr	ip, [lr]
   146a4:	str	r0, [r1]
   146a8:	str	r6, [r0, ip, lsl #4]!
   146ac:	mvn	r1, #0
   146b0:	str	r5, [r0, #4]
   146b4:	str	r1, [r0, #8]
   146b8:	str	r1, [r0, #12]
   146bc:	add	r0, ip, #1
   146c0:	str	r0, [lr]
   146c4:	mov	r0, r4
   146c8:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   146cc:	movw	lr, #54076	; 0xd33c
   146d0:	movw	r4, #54072	; 0xd338
   146d4:	movt	lr, #2
   146d8:	movt	r4, #2
   146dc:	ldr	r8, [lr]
   146e0:	ldr	r0, [r4]
   146e4:	add	r1, r8, #1
   146e8:	mov	r5, r4
   146ec:	mov	r4, lr
   146f0:	str	r1, [lr]
   146f4:	lsl	r1, r1, #4
   146f8:	bl	17a68 <__assert_fail@plt+0x6744>
   146fc:	ldr	r1, [r4]
   14700:	str	r0, [r5]
   14704:	add	r0, r0, r1, lsl #4
   14708:	mvn	r1, #0
   1470c:	str	r1, [r0, #-16]
   14710:	str	r1, [r0, #-12]
   14714:	str	r1, [r0, #-8]
   14718:	str	r1, [r0, #-4]
   1471c:	sub	sp, fp, #28
   14720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14724:	movw	r0, #49173	; 0xc015
   14728:	movw	r1, #49128	; 0xbfe8
   1472c:	movt	r0, #1
   14730:	movt	r1, #1
   14734:	b	147c0 <__assert_fail@plt+0x349c>
   14738:	movw	r1, #49259	; 0xc06b
   1473c:	mov	r0, r6
   14740:	movt	r1, #1
   14744:	bl	1130c <strspn@plt>
   14748:	mov	r1, r0
   1474c:	mov	r0, r6
   14750:	bl	17ee8 <__assert_fail@plt+0x6bc4>
   14754:	ldr	r2, [sp]
   14758:	mov	r5, r0
   1475c:	movw	r0, #49308	; 0xc09c
   14760:	movw	r1, #49270	; 0xc076
   14764:	movt	r0, #1
   14768:	movt	r1, #1
   1476c:	tst	r2, #4
   14770:	mov	r2, #5
   14774:	moveq	r1, r0
   14778:	mov	r0, #0
   1477c:	bl	11108 <dcgettext@plt>
   14780:	mov	r4, r0
   14784:	mov	r0, r5
   14788:	bl	17348 <__assert_fail@plt+0x6024>
   1478c:	mov	r3, r0
   14790:	mov	r0, #0
   14794:	mov	r1, #0
   14798:	mov	r2, r4
   1479c:	bl	1118c <error@plt>
   147a0:	mov	r0, r5
   147a4:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   147a8:	mov	r0, #1
   147ac:	bl	11420 <__assert_fail@plt+0xfc>
   147b0:	movw	r0, #49108	; 0xbfd4
   147b4:	movw	r1, #49076	; 0xbfb4
   147b8:	movt	r0, #1
   147bc:	movt	r1, #1
   147c0:	ldr	r2, [sp]
   147c4:	tst	r2, #4
   147c8:	moveq	r1, r0
   147cc:	b	14834 <__assert_fail@plt+0x3510>
   147d0:	movw	r1, #49200	; 0xc030
   147d4:	movt	r1, #1
   147d8:	b	14834 <__assert_fail@plt+0x3510>
   147dc:	ldr	r2, [sp]
   147e0:	movw	r0, #49372	; 0xc0dc
   147e4:	movw	r1, #49337	; 0xc0b9
   147e8:	movt	r0, #1
   147ec:	movt	r1, #1
   147f0:	tst	r2, #4
   147f4:	mov	r2, #5
   147f8:	moveq	r1, r0
   147fc:	mov	r0, #0
   14800:	bl	11108 <dcgettext@plt>
   14804:	mov	r4, r0
   14808:	ldr	r0, [sp, #16]
   1480c:	bl	17348 <__assert_fail@plt+0x6024>
   14810:	mov	r3, r0
   14814:	mov	r0, #0
   14818:	mov	r1, #0
   1481c:	mov	r2, r4
   14820:	bl	1118c <error@plt>
   14824:	mov	r0, #1
   14828:	bl	11420 <__assert_fail@plt+0xfc>
   1482c:	movw	r1, #49234	; 0xc052
   14830:	movt	r1, #1
   14834:	mov	r0, #0
   14838:	mov	r2, #5
   1483c:	bl	11108 <dcgettext@plt>
   14840:	mov	r2, r0
   14844:	mov	r0, #0
   14848:	mov	r1, #0
   1484c:	bl	1118c <error@plt>
   14850:	mov	r0, #1
   14854:	bl	11420 <__assert_fail@plt+0xfc>
   14858:	movw	r0, #49436	; 0xc11c
   1485c:	movw	r1, #49395	; 0xc0f3
   14860:	movt	r0, #1
   14864:	movt	r1, #1
   14868:	b	147c0 <__assert_fail@plt+0x349c>
   1486c:	ldr	r2, [r0]
   14870:	ldr	r1, [r1]
   14874:	mov	r0, #0
   14878:	cmp	r2, r1
   1487c:	movwgt	r0, #1
   14880:	mvnlt	r0, #0
   14884:	bx	lr
   14888:	mov	r0, #1
   1488c:	b	11420 <__assert_fail@plt+0xfc>
   14890:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14894:	add	fp, sp, #28
   14898:	sub	sp, sp, #12
   1489c:	mov	r4, r3
   148a0:	mov	r9, r2
   148a4:	mov	r7, r1
   148a8:	mov	r8, r0
   148ac:	bl	111f8 <strlen@plt>
   148b0:	ldr	r6, [r7]
   148b4:	cmp	r6, #0
   148b8:	beq	14964 <__assert_fail@plt+0x3640>
   148bc:	mov	r5, r0
   148c0:	cmp	r9, #0
   148c4:	beq	14974 <__assert_fail@plt+0x3650>
   148c8:	add	r0, r7, #4
   148cc:	mvn	sl, #0
   148d0:	mov	r7, #0
   148d4:	str	r9, [sp]
   148d8:	str	r0, [sp, #8]
   148dc:	mov	r0, #0
   148e0:	str	r0, [sp, #4]
   148e4:	mov	r0, r9
   148e8:	b	1492c <__assert_fail@plt+0x3608>
   148ec:	ldr	r0, [sp]
   148f0:	mov	r1, r9
   148f4:	mov	r2, r4
   148f8:	mla	r0, sl, r4, r0
   148fc:	bl	111ec <bcmp@plt>
   14900:	ldr	r1, [sp, #4]
   14904:	cmp	r0, #0
   14908:	movwne	r0, #1
   1490c:	orr	r1, r1, r0
   14910:	str	r1, [sp, #4]
   14914:	ldr	r0, [sp, #8]
   14918:	add	r9, r9, r4
   1491c:	ldr	r6, [r0, r7, lsl #2]
   14920:	add	r7, r7, #1
   14924:	cmp	r6, #0
   14928:	beq	149e8 <__assert_fail@plt+0x36c4>
   1492c:	mov	r0, r6
   14930:	mov	r1, r8
   14934:	mov	r2, r5
   14938:	bl	112e8 <strncmp@plt>
   1493c:	cmp	r0, #0
   14940:	bne	14914 <__assert_fail@plt+0x35f0>
   14944:	mov	r0, r6
   14948:	bl	111f8 <strlen@plt>
   1494c:	cmp	r0, r5
   14950:	beq	14968 <__assert_fail@plt+0x3644>
   14954:	cmn	sl, #1
   14958:	bne	148ec <__assert_fail@plt+0x35c8>
   1495c:	mov	sl, r7
   14960:	b	14914 <__assert_fail@plt+0x35f0>
   14964:	mvn	r7, #0
   14968:	mov	r0, r7
   1496c:	sub	sp, fp, #28
   14970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14974:	add	r4, r7, #4
   14978:	mov	r0, #0
   1497c:	mvn	r9, #0
   14980:	mvn	sl, #0
   14984:	mov	r7, #0
   14988:	str	r0, [sp, #4]
   1498c:	b	149bc <__assert_fail@plt+0x3698>
   14990:	ldr	r1, [sp, #4]
   14994:	subs	r0, sl, r9
   14998:	movwne	r0, #1
   1499c:	cmn	sl, #1
   149a0:	moveq	sl, r7
   149a4:	orr	r1, r1, r0
   149a8:	str	r1, [sp, #4]
   149ac:	ldr	r6, [r4, r7, lsl #2]
   149b0:	add	r7, r7, #1
   149b4:	cmp	r6, #0
   149b8:	beq	149e8 <__assert_fail@plt+0x36c4>
   149bc:	mov	r0, r6
   149c0:	mov	r1, r8
   149c4:	mov	r2, r5
   149c8:	bl	112e8 <strncmp@plt>
   149cc:	cmp	r0, #0
   149d0:	bne	149ac <__assert_fail@plt+0x3688>
   149d4:	mov	r0, r6
   149d8:	bl	111f8 <strlen@plt>
   149dc:	cmp	r0, r5
   149e0:	bne	14990 <__assert_fail@plt+0x366c>
   149e4:	b	14968 <__assert_fail@plt+0x3644>
   149e8:	ldr	r0, [sp, #4]
   149ec:	tst	r0, #1
   149f0:	mvnne	sl, #1
   149f4:	mov	r0, sl
   149f8:	sub	sp, fp, #28
   149fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a00:	push	{r4, r5, r6, r7, fp, lr}
   14a04:	add	fp, sp, #16
   14a08:	mov	r5, r0
   14a0c:	ldr	r0, [r1]
   14a10:	mvn	r4, #0
   14a14:	cmp	r0, #0
   14a18:	beq	14a44 <__assert_fail@plt+0x3720>
   14a1c:	add	r7, r1, #4
   14a20:	mov	r6, #0
   14a24:	mov	r1, r5
   14a28:	bl	11090 <strcmp@plt>
   14a2c:	cmp	r0, #0
   14a30:	beq	14a4c <__assert_fail@plt+0x3728>
   14a34:	ldr	r0, [r7, r6, lsl #2]
   14a38:	add	r6, r6, #1
   14a3c:	cmp	r0, #0
   14a40:	bne	14a24 <__assert_fail@plt+0x3700>
   14a44:	mov	r0, r4
   14a48:	pop	{r4, r5, r6, r7, fp, pc}
   14a4c:	mov	r0, r6
   14a50:	pop	{r4, r5, r6, r7, fp, pc}
   14a54:	push	{r4, r5, r6, sl, fp, lr}
   14a58:	add	fp, sp, #16
   14a5c:	sub	sp, sp, #8
   14a60:	mov	r5, r0
   14a64:	movw	r0, #49474	; 0xc142
   14a68:	mov	r4, r1
   14a6c:	movw	r1, #49501	; 0xc15d
   14a70:	cmn	r2, #1
   14a74:	mov	r2, #5
   14a78:	movt	r0, #1
   14a7c:	movt	r1, #1
   14a80:	moveq	r1, r0
   14a84:	mov	r0, #0
   14a88:	bl	11108 <dcgettext@plt>
   14a8c:	mov	r6, r0
   14a90:	mov	r0, #0
   14a94:	mov	r1, #8
   14a98:	mov	r2, r4
   14a9c:	bl	16d78 <__assert_fail@plt+0x5a54>
   14aa0:	mov	r4, r0
   14aa4:	mov	r0, #1
   14aa8:	mov	r1, r5
   14aac:	bl	17338 <__assert_fail@plt+0x6014>
   14ab0:	str	r0, [sp]
   14ab4:	mov	r0, #0
   14ab8:	mov	r1, #0
   14abc:	mov	r2, r6
   14ac0:	mov	r3, r4
   14ac4:	bl	1118c <error@plt>
   14ac8:	sub	sp, fp, #16
   14acc:	pop	{r4, r5, r6, sl, fp, pc}
   14ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad4:	add	fp, sp, #28
   14ad8:	sub	sp, sp, #4
   14adc:	mov	sl, r1
   14ae0:	movw	r1, #49530	; 0xc17a
   14ae4:	mov	r4, r2
   14ae8:	mov	r6, r0
   14aec:	mov	r0, #0
   14af0:	mov	r2, #5
   14af4:	mov	r8, #0
   14af8:	movt	r1, #1
   14afc:	bl	11108 <dcgettext@plt>
   14b00:	movw	r1, #53640	; 0xd188
   14b04:	movt	r1, #2
   14b08:	ldr	r1, [r1]
   14b0c:	bl	1106c <fputs_unlocked@plt>
   14b10:	ldr	r7, [r6]
   14b14:	cmp	r7, #0
   14b18:	beq	14bd4 <__assert_fail@plt+0x38b0>
   14b1c:	add	r0, r6, #4
   14b20:	mov	r9, #0
   14b24:	mov	r6, #0
   14b28:	str	r0, [sp]
   14b2c:	cmp	r9, #0
   14b30:	bne	14b88 <__assert_fail@plt+0x3864>
   14b34:	mov	r5, #0
   14b38:	movw	r0, #53640	; 0xd188
   14b3c:	movt	r0, #2
   14b40:	ldr	r6, [r0]
   14b44:	mov	r0, r7
   14b48:	bl	17348 <__assert_fail@plt+0x6024>
   14b4c:	movw	r2, #49551	; 0xc18f
   14b50:	mov	r3, r0
   14b54:	mov	r0, r6
   14b58:	mov	r1, #1
   14b5c:	movt	r2, #1
   14b60:	bl	1124c <__fprintf_chk@plt>
   14b64:	add	r6, sl, r5
   14b68:	ldr	r0, [sp]
   14b6c:	add	r8, r8, r4
   14b70:	ldr	r7, [r0, -r9, lsl #2]
   14b74:	sub	r9, r9, #1
   14b78:	cmp	r7, #0
   14b7c:	beq	14bd4 <__assert_fail@plt+0x38b0>
   14b80:	cmp	r9, #0
   14b84:	beq	14b34 <__assert_fail@plt+0x3810>
   14b88:	add	r1, sl, r8
   14b8c:	mov	r0, r6
   14b90:	mov	r2, r4
   14b94:	bl	111ec <bcmp@plt>
   14b98:	cmp	r0, #0
   14b9c:	mov	r5, r8
   14ba0:	bne	14b38 <__assert_fail@plt+0x3814>
   14ba4:	movw	r0, #53640	; 0xd188
   14ba8:	movt	r0, #2
   14bac:	ldr	r5, [r0]
   14bb0:	mov	r0, r7
   14bb4:	bl	17348 <__assert_fail@plt+0x6024>
   14bb8:	movw	r2, #49559	; 0xc197
   14bbc:	mov	r3, r0
   14bc0:	mov	r0, r5
   14bc4:	mov	r1, #1
   14bc8:	movt	r2, #1
   14bcc:	bl	1124c <__fprintf_chk@plt>
   14bd0:	b	14b68 <__assert_fail@plt+0x3844>
   14bd4:	movw	r0, #53640	; 0xd188
   14bd8:	movt	r0, #2
   14bdc:	ldr	r0, [r0]
   14be0:	ldr	r1, [r0, #20]
   14be4:	ldr	r2, [r0, #24]
   14be8:	cmp	r1, r2
   14bec:	addcc	r2, r1, #1
   14bf0:	strcc	r2, [r0, #20]
   14bf4:	movcc	r0, #10
   14bf8:	strbcc	r0, [r1]
   14bfc:	subcc	sp, fp, #28
   14c00:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c04:	mov	r1, #10
   14c08:	sub	sp, fp, #28
   14c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c10:	b	1127c <__overflow@plt>
   14c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c18:	add	fp, sp, #28
   14c1c:	sub	sp, sp, #12
   14c20:	mov	sl, r0
   14c24:	ldr	r0, [fp, #16]
   14c28:	ldr	r9, [fp, #8]
   14c2c:	mov	r5, r3
   14c30:	mov	r8, r2
   14c34:	mov	r6, r1
   14c38:	cmp	r0, #0
   14c3c:	beq	14c6c <__assert_fail@plt+0x3948>
   14c40:	mov	r0, r6
   14c44:	mov	r1, r8
   14c48:	mov	r2, r5
   14c4c:	mov	r3, r9
   14c50:	bl	14890 <__assert_fail@plt+0x356c>
   14c54:	mov	r4, r0
   14c58:	cmn	r4, #1
   14c5c:	ble	14cbc <__assert_fail@plt+0x3998>
   14c60:	mov	r0, r4
   14c64:	sub	sp, fp, #28
   14c68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c6c:	ldr	r0, [r8]
   14c70:	movw	r7, #49474	; 0xc142
   14c74:	str	r5, [sp, #8]
   14c78:	movt	r7, #1
   14c7c:	cmp	r0, #0
   14c80:	beq	14cd4 <__assert_fail@plt+0x39b0>
   14c84:	add	r5, r8, #4
   14c88:	mov	r4, #0
   14c8c:	mov	r1, r6
   14c90:	bl	11090 <strcmp@plt>
   14c94:	cmp	r0, #0
   14c98:	beq	14cb0 <__assert_fail@plt+0x398c>
   14c9c:	ldr	r0, [r5, r4, lsl #2]
   14ca0:	add	r4, r4, #1
   14ca4:	cmp	r0, #0
   14ca8:	bne	14c8c <__assert_fail@plt+0x3968>
   14cac:	b	14cd4 <__assert_fail@plt+0x39b0>
   14cb0:	ldr	r5, [sp, #8]
   14cb4:	cmn	r4, #1
   14cb8:	bgt	14c60 <__assert_fail@plt+0x393c>
   14cbc:	movw	r0, #49474	; 0xc142
   14cc0:	movw	r7, #49501	; 0xc15d
   14cc4:	str	r5, [sp, #8]
   14cc8:	movt	r0, #1
   14ccc:	movt	r7, #1
   14cd0:	moveq	r7, r0
   14cd4:	ldr	r5, [fp, #12]
   14cd8:	mov	r0, #0
   14cdc:	mov	r1, r7
   14ce0:	mov	r2, #5
   14ce4:	bl	11108 <dcgettext@plt>
   14ce8:	mov	r4, r0
   14cec:	mov	r0, #0
   14cf0:	mov	r1, #8
   14cf4:	mov	r2, r6
   14cf8:	bl	16d78 <__assert_fail@plt+0x5a54>
   14cfc:	mov	r6, r0
   14d00:	mov	r0, #1
   14d04:	mov	r1, sl
   14d08:	bl	17338 <__assert_fail@plt+0x6014>
   14d0c:	str	r0, [sp]
   14d10:	mov	r0, #0
   14d14:	mov	r1, #0
   14d18:	mov	r2, r4
   14d1c:	mov	r3, r6
   14d20:	bl	1118c <error@plt>
   14d24:	ldr	r1, [sp, #8]
   14d28:	mov	r0, r8
   14d2c:	mov	r2, r9
   14d30:	bl	14ad0 <__assert_fail@plt+0x37ac>
   14d34:	blx	r5
   14d38:	mvn	r4, #0
   14d3c:	mov	r0, r4
   14d40:	sub	sp, fp, #28
   14d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14d4c:	add	fp, sp, #24
   14d50:	ldr	r6, [r1]
   14d54:	cmp	r6, #0
   14d58:	beq	14dbc <__assert_fail@plt+0x3a98>
   14d5c:	mov	r8, r1
   14d60:	mov	r7, r2
   14d64:	mov	r1, r2
   14d68:	mov	r2, r3
   14d6c:	mov	r4, r3
   14d70:	mov	r9, r0
   14d74:	bl	111ec <bcmp@plt>
   14d78:	cmp	r0, #0
   14d7c:	beq	14db4 <__assert_fail@plt+0x3a90>
   14d80:	add	r7, r7, r4
   14d84:	add	r5, r8, #4
   14d88:	ldr	r6, [r5]
   14d8c:	cmp	r6, #0
   14d90:	beq	14dbc <__assert_fail@plt+0x3a98>
   14d94:	mov	r0, r9
   14d98:	mov	r1, r7
   14d9c:	mov	r2, r4
   14da0:	bl	111ec <bcmp@plt>
   14da4:	add	r7, r7, r4
   14da8:	add	r5, r5, #4
   14dac:	cmp	r0, #0
   14db0:	bne	14d88 <__assert_fail@plt+0x3a64>
   14db4:	mov	r0, r6
   14db8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14dbc:	mov	r6, #0
   14dc0:	mov	r0, r6
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14dc8:	movw	r1, #53752	; 0xd1f8
   14dcc:	movt	r1, #2
   14dd0:	str	r0, [r1, #4]
   14dd4:	bx	lr
   14dd8:	movw	r1, #53752	; 0xd1f8
   14ddc:	movt	r1, #2
   14de0:	strb	r0, [r1]
   14de4:	bx	lr
   14de8:	push	{r4, r5, r6, sl, fp, lr}
   14dec:	add	fp, sp, #16
   14df0:	sub	sp, sp, #8
   14df4:	movw	r0, #53652	; 0xd194
   14df8:	movt	r0, #2
   14dfc:	ldr	r0, [r0]
   14e00:	bl	198b8 <__assert_fail@plt+0x8594>
   14e04:	cmp	r0, #0
   14e08:	beq	14e30 <__assert_fail@plt+0x3b0c>
   14e0c:	movw	r5, #53752	; 0xd1f8
   14e10:	movt	r5, #2
   14e14:	ldrb	r0, [r5]
   14e18:	cmp	r0, #0
   14e1c:	beq	14e5c <__assert_fail@plt+0x3b38>
   14e20:	bl	11210 <__errno_location@plt>
   14e24:	ldr	r0, [r0]
   14e28:	cmp	r0, #32
   14e2c:	bne	14e5c <__assert_fail@plt+0x3b38>
   14e30:	movw	r0, #53640	; 0xd188
   14e34:	movt	r0, #2
   14e38:	ldr	r0, [r0]
   14e3c:	bl	198b8 <__assert_fail@plt+0x8594>
   14e40:	cmp	r0, #0
   14e44:	subeq	sp, fp, #16
   14e48:	popeq	{r4, r5, r6, sl, fp, pc}
   14e4c:	movw	r0, #53552	; 0xd130
   14e50:	movt	r0, #2
   14e54:	ldr	r0, [r0]
   14e58:	bl	110d8 <_exit@plt>
   14e5c:	movw	r1, #49564	; 0xc19c
   14e60:	mov	r0, #0
   14e64:	mov	r2, #5
   14e68:	movt	r1, #1
   14e6c:	bl	11108 <dcgettext@plt>
   14e70:	ldr	r6, [r5, #4]
   14e74:	mov	r4, r0
   14e78:	bl	11210 <__errno_location@plt>
   14e7c:	ldr	r5, [r0]
   14e80:	cmp	r6, #0
   14e84:	bne	14ea0 <__assert_fail@plt+0x3b7c>
   14e88:	movw	r2, #49561	; 0xc199
   14e8c:	mov	r0, #0
   14e90:	mov	r1, r5
   14e94:	mov	r3, r4
   14e98:	movt	r2, #1
   14e9c:	b	14ec0 <__assert_fail@plt+0x3b9c>
   14ea0:	mov	r0, r6
   14ea4:	bl	16fc0 <__assert_fail@plt+0x5c9c>
   14ea8:	movw	r2, #47519	; 0xb99f
   14eac:	mov	r3, r0
   14eb0:	str	r4, [sp]
   14eb4:	mov	r0, #0
   14eb8:	mov	r1, r5
   14ebc:	movt	r2, #1
   14ec0:	bl	1118c <error@plt>
   14ec4:	movw	r0, #53552	; 0xd130
   14ec8:	movt	r0, #2
   14ecc:	ldr	r0, [r0]
   14ed0:	bl	110d8 <_exit@plt>
   14ed4:	push	{r4, r5, r6, sl, fp, lr}
   14ed8:	add	fp, sp, #16
   14edc:	mov	r4, r0
   14ee0:	bl	11210 <__errno_location@plt>
   14ee4:	ldr	r6, [r0]
   14ee8:	mov	r5, r0
   14eec:	mov	r0, r4
   14ef0:	bl	110cc <free@plt>
   14ef4:	str	r6, [r5]
   14ef8:	pop	{r4, r5, r6, sl, fp, pc}
   14efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f00:	add	fp, sp, #28
   14f04:	sub	sp, sp, #20
   14f08:	mov	r4, r3
   14f0c:	str	r2, [sp, #16]
   14f10:	str	r1, [sp, #12]
   14f14:	mov	r5, r0
   14f18:	bl	111f8 <strlen@plt>
   14f1c:	ldr	r3, [fp, #12]
   14f20:	mov	r8, r0
   14f24:	mov	sl, #0
   14f28:	tst	r3, #2
   14f2c:	bne	15000 <__assert_fail@plt+0x3cdc>
   14f30:	bl	11150 <__ctype_get_mb_cur_max@plt>
   14f34:	mov	r6, #0
   14f38:	cmp	r0, #2
   14f3c:	bcc	15010 <__assert_fail@plt+0x3cec>
   14f40:	mov	r0, #0
   14f44:	mov	r1, r5
   14f48:	mov	r2, #0
   14f4c:	bl	112b8 <mbstowcs@plt>
   14f50:	cmn	r0, #1
   14f54:	beq	151b8 <__assert_fail@plt+0x3e94>
   14f58:	add	r9, r0, #1
   14f5c:	mov	r7, r0
   14f60:	lsl	r0, r9, #2
   14f64:	bl	19834 <__assert_fail@plt+0x8510>
   14f68:	cmp	r0, #0
   14f6c:	beq	151b4 <__assert_fail@plt+0x3e90>
   14f70:	mov	r1, r5
   14f74:	mov	r2, r9
   14f78:	mov	r6, r0
   14f7c:	bl	112b8 <mbstowcs@plt>
   14f80:	cmp	r0, #0
   14f84:	beq	151d8 <__assert_fail@plt+0x3eb4>
   14f88:	str	r5, [sp, #4]
   14f8c:	mov	r5, #0
   14f90:	mov	r1, r6
   14f94:	str	r6, [sp]
   14f98:	str	r5, [r6, r7, lsl #2]
   14f9c:	ldr	r0, [r6]
   14fa0:	cmp	r0, #0
   14fa4:	beq	151e8 <__assert_fail@plt+0x3ec4>
   14fa8:	add	r6, r1, #4
   14fac:	movw	r7, #65533	; 0xfffd
   14fb0:	bl	1112c <iswprint@plt>
   14fb4:	cmp	r0, #0
   14fb8:	streq	r7, [r6, #-4]
   14fbc:	moveq	r5, #1
   14fc0:	ldr	r0, [r6], #4
   14fc4:	cmp	r0, #0
   14fc8:	bne	14fb0 <__assert_fail@plt+0x3c8c>
   14fcc:	ldr	r6, [sp]
   14fd0:	mov	r1, r9
   14fd4:	mov	r0, r6
   14fd8:	bl	11294 <wcswidth@plt>
   14fdc:	mov	r7, r0
   14fe0:	tst	r5, #1
   14fe4:	beq	151f8 <__assert_fail@plt+0x3ed4>
   14fe8:	mov	r0, #0
   14fec:	mov	r1, r6
   14ff0:	mov	r2, #0
   14ff4:	bl	11180 <wcstombs@plt>
   14ff8:	ldr	r5, [sp, #4]
   14ffc:	b	15210 <__assert_fail@plt+0x3eec>
   15000:	mov	r6, #0
   15004:	mov	r2, #0
   15008:	mov	r7, r8
   1500c:	b	1501c <__assert_fail@plt+0x3cf8>
   15010:	mov	r2, #0
   15014:	mov	r7, r8
   15018:	ldr	r3, [fp, #12]
   1501c:	ldr	r0, [r4]
   15020:	str	r5, [sp, #4]
   15024:	ldr	r5, [fp, #8]
   15028:	mov	r1, r7
   1502c:	str	r6, [sp, #8]
   15030:	cmp	r7, r0
   15034:	movhi	r1, r0
   15038:	movhi	r8, r0
   1503c:	cmp	r0, r7
   15040:	subhi	sl, r0, r1
   15044:	cmp	r5, #0
   15048:	str	r1, [r4]
   1504c:	beq	15064 <__assert_fail@plt+0x3d40>
   15050:	cmp	r5, #1
   15054:	bne	1506c <__assert_fail@plt+0x3d48>
   15058:	mov	r9, #0
   1505c:	mov	r5, sl
   15060:	b	15078 <__assert_fail@plt+0x3d54>
   15064:	mov	r9, sl
   15068:	b	15078 <__assert_fail@plt+0x3d54>
   1506c:	and	r0, sl, #1
   15070:	lsr	r9, sl, #1
   15074:	add	r5, r0, sl, lsr #1
   15078:	ldr	r0, [sp, #16]
   1507c:	ldr	r4, [sp, #12]
   15080:	tst	r3, #8
   15084:	mov	r6, #0
   15088:	mov	r7, #0
   1508c:	moveq	r6, r9
   15090:	tst	r3, #4
   15094:	moveq	r7, r5
   15098:	cmp	r0, #0
   1509c:	beq	1518c <__assert_fail@plt+0x3e68>
   150a0:	add	r0, r4, r0
   150a4:	str	r2, [sp]
   150a8:	sub	sl, r0, #1
   150ac:	mov	r0, r4
   150b0:	cmp	sl, r4
   150b4:	bls	15104 <__assert_fail@plt+0x3de0>
   150b8:	cmp	r7, #0
   150bc:	mov	r0, r4
   150c0:	beq	15104 <__assert_fail@plt+0x3de0>
   150c4:	mvn	r0, r4
   150c8:	sub	r1, r7, #1
   150cc:	add	r0, sl, r0
   150d0:	cmp	r1, r0
   150d4:	movhi	r1, r0
   150d8:	mov	r0, r4
   150dc:	add	r2, r1, #1
   150e0:	mov	r1, #32
   150e4:	bl	11228 <memset@plt>
   150e8:	ldr	r1, [sp, #16]
   150ec:	sub	r0, r5, #1
   150f0:	sub	r1, r1, #2
   150f4:	cmp	r0, r1
   150f8:	movcc	r1, r0
   150fc:	add	r0, r1, r4
   15100:	add	r0, r0, #1
   15104:	ldr	r1, [sp, #4]
   15108:	sub	r2, sl, r0
   1510c:	mov	r4, #0
   15110:	mvn	r3, #0
   15114:	cmp	r8, r2
   15118:	strb	r4, [r0]
   1511c:	movcc	r2, r8
   15120:	bl	11318 <__mempcpy_chk@plt>
   15124:	mov	r5, r0
   15128:	cmp	r6, #0
   1512c:	beq	15184 <__assert_fail@plt+0x3e60>
   15130:	cmp	r5, sl
   15134:	bcs	15184 <__assert_fail@plt+0x3e60>
   15138:	mvn	r0, r5
   1513c:	sub	r1, r6, #1
   15140:	add	r0, sl, r0
   15144:	cmp	r1, r0
   15148:	movhi	r1, r0
   1514c:	mov	r0, r5
   15150:	add	r2, r1, #1
   15154:	mov	r1, #32
   15158:	bl	11228 <memset@plt>
   1515c:	ldr	r0, [sp, #16]
   15160:	ldr	r1, [sp, #12]
   15164:	sub	r0, r0, r5
   15168:	add	r0, r0, r1
   1516c:	sub	r1, r9, #1
   15170:	sub	r0, r0, #2
   15174:	cmp	r1, r0
   15178:	movhi	r1, r0
   1517c:	add	r0, r1, r5
   15180:	add	r5, r0, #1
   15184:	ldr	r2, [sp]
   15188:	strb	r4, [r5]
   1518c:	add	r0, r7, r8
   15190:	add	r9, r0, r6
   15194:	ldr	r6, [sp, #8]
   15198:	mov	r0, r2
   1519c:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   151a0:	mov	r0, r6
   151a4:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   151a8:	mov	r0, r9
   151ac:	sub	sp, fp, #28
   151b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151b4:	mov	r6, #0
   151b8:	ldr	r3, [fp, #12]
   151bc:	mvn	r9, #0
   151c0:	mov	r2, #0
   151c4:	mov	r7, r8
   151c8:	mov	r0, #0
   151cc:	tst	r3, #1
   151d0:	bne	1501c <__assert_fail@plt+0x3cf8>
   151d4:	b	1519c <__assert_fail@plt+0x3e78>
   151d8:	mov	r2, r6
   151dc:	mov	r7, r8
   151e0:	mov	r6, #0
   151e4:	b	15018 <__assert_fail@plt+0x3cf4>
   151e8:	mov	r0, r1
   151ec:	mov	r1, r9
   151f0:	bl	11294 <wcswidth@plt>
   151f4:	mov	r7, r0
   151f8:	ldr	r0, [r4]
   151fc:	ldr	r5, [sp, #4]
   15200:	mov	r6, #0
   15204:	cmp	r7, r0
   15208:	mov	r0, r8
   1520c:	bls	1527c <__assert_fail@plt+0x3f58>
   15210:	add	r6, r0, #1
   15214:	mov	r0, r6
   15218:	bl	19834 <__assert_fail@plt+0x8510>
   1521c:	cmp	r0, #0
   15220:	beq	15284 <__assert_fail@plt+0x3f60>
   15224:	ldr	r1, [sp]
   15228:	str	r0, [sp, #8]
   1522c:	str	r6, [sp, #4]
   15230:	ldr	r0, [r1]
   15234:	cmp	r0, #0
   15238:	beq	152a4 <__assert_fail@plt+0x3f80>
   1523c:	ldr	r5, [r4]
   15240:	mov	r8, #0
   15244:	movw	r9, #65533	; 0xfffd
   15248:	mov	r6, r1
   1524c:	bl	110b4 <wcwidth@plt>
   15250:	cmn	r0, #1
   15254:	moveq	r0, #1
   15258:	streq	r9, [r6]
   1525c:	add	r7, r0, r8
   15260:	cmp	r7, r5
   15264:	bhi	152b0 <__assert_fail@plt+0x3f8c>
   15268:	ldr	r0, [r6, #4]!
   1526c:	mov	r8, r7
   15270:	cmp	r0, #0
   15274:	bne	1524c <__assert_fail@plt+0x3f28>
   15278:	b	152b4 <__assert_fail@plt+0x3f90>
   1527c:	ldr	r2, [sp]
   15280:	b	15018 <__assert_fail@plt+0x3cf4>
   15284:	ldr	r3, [fp, #12]
   15288:	ldr	r2, [sp]
   1528c:	mov	r6, #0
   15290:	mvn	r9, #0
   15294:	tst	r3, #1
   15298:	mov	r0, r2
   1529c:	bne	1501c <__assert_fail@plt+0x3cf8>
   152a0:	b	1519c <__assert_fail@plt+0x3e78>
   152a4:	mov	r6, r1
   152a8:	mov	r7, #0
   152ac:	b	152b4 <__assert_fail@plt+0x3f90>
   152b0:	mov	r7, r8
   152b4:	mov	r0, #0
   152b8:	ldr	r5, [sp]
   152bc:	ldr	r2, [sp, #4]
   152c0:	str	r0, [r6]
   152c4:	ldr	r6, [sp, #8]
   152c8:	mov	r1, r5
   152cc:	mov	r0, r6
   152d0:	bl	11180 <wcstombs@plt>
   152d4:	mov	r2, r5
   152d8:	mov	r8, r0
   152dc:	mov	r5, r6
   152e0:	b	15018 <__assert_fail@plt+0x3cf4>
   152e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152e8:	add	fp, sp, #28
   152ec:	sub	sp, sp, #12
   152f0:	ldr	r8, [r1]
   152f4:	mov	sl, r0
   152f8:	mov	r9, r2
   152fc:	mov	r6, r1
   15300:	mov	r7, #0
   15304:	str	r3, [sp, #8]
   15308:	mov	r0, r8
   1530c:	mov	r5, r8
   15310:	cmp	r0, r5
   15314:	bcc	15378 <__assert_fail@plt+0x4054>
   15318:	add	r5, r0, #1
   1531c:	mov	r0, r7
   15320:	mov	r1, r5
   15324:	bl	19864 <__assert_fail@plt+0x8540>
   15328:	cmp	r0, #0
   1532c:	beq	1536c <__assert_fail@plt+0x4048>
   15330:	mov	r4, r0
   15334:	ldr	r0, [sp, #8]
   15338:	str	r8, [r6]
   1533c:	mov	r2, r5
   15340:	mov	r3, r6
   15344:	str	r9, [sp]
   15348:	mov	r1, r4
   1534c:	str	r0, [sp, #4]
   15350:	mov	r0, sl
   15354:	bl	14efc <__assert_fail@plt+0x3bd8>
   15358:	cmn	r0, #1
   1535c:	mov	r7, r4
   15360:	bne	15310 <__assert_fail@plt+0x3fec>
   15364:	mov	r0, r4
   15368:	b	15370 <__assert_fail@plt+0x404c>
   1536c:	mov	r0, r7
   15370:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   15374:	mov	r7, #0
   15378:	mov	r0, r7
   1537c:	sub	sp, fp, #28
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	push	{r4, r5, fp, lr}
   15388:	add	fp, sp, #8
   1538c:	cmp	r0, #0
   15390:	beq	15424 <__assert_fail@plt+0x4100>
   15394:	mov	r1, #47	; 0x2f
   15398:	mov	r4, r0
   1539c:	bl	112a0 <strrchr@plt>
   153a0:	cmp	r0, #0
   153a4:	mov	r5, r4
   153a8:	addne	r5, r0, #1
   153ac:	sub	r0, r5, r4
   153b0:	cmp	r0, #7
   153b4:	blt	15408 <__assert_fail@plt+0x40e4>
   153b8:	movw	r1, #49632	; 0xc1e0
   153bc:	sub	r0, r5, #7
   153c0:	mov	r2, #7
   153c4:	movt	r1, #1
   153c8:	bl	112e8 <strncmp@plt>
   153cc:	cmp	r0, #0
   153d0:	bne	15408 <__assert_fail@plt+0x40e4>
   153d4:	movw	r1, #49640	; 0xc1e8
   153d8:	mov	r0, r5
   153dc:	mov	r2, #3
   153e0:	movt	r1, #1
   153e4:	bl	112e8 <strncmp@plt>
   153e8:	cmp	r0, #0
   153ec:	beq	153f8 <__assert_fail@plt+0x40d4>
   153f0:	mov	r4, r5
   153f4:	b	15408 <__assert_fail@plt+0x40e4>
   153f8:	movw	r0, #53624	; 0xd178
   153fc:	add	r4, r5, #3
   15400:	movt	r0, #2
   15404:	str	r4, [r0]
   15408:	movw	r0, #53628	; 0xd17c
   1540c:	movt	r0, #2
   15410:	str	r4, [r0]
   15414:	movw	r0, #53760	; 0xd200
   15418:	movt	r0, #2
   1541c:	str	r4, [r0]
   15420:	pop	{r4, r5, fp, pc}
   15424:	movw	r0, #53640	; 0xd188
   15428:	mov	r1, #55	; 0x37
   1542c:	mov	r2, #1
   15430:	movt	r0, #2
   15434:	ldr	r3, [r0]
   15438:	movw	r0, #49576	; 0xc1a8
   1543c:	movt	r0, #1
   15440:	bl	11138 <fwrite@plt>
   15444:	bl	112f4 <abort@plt>
   15448:	push	{r4, r5, r6, sl, fp, lr}
   1544c:	add	fp, sp, #16
   15450:	mov	r4, r0
   15454:	movw	r0, #53768	; 0xd208
   15458:	movt	r0, #2
   1545c:	cmp	r4, #0
   15460:	moveq	r4, r0
   15464:	bl	11210 <__errno_location@plt>
   15468:	ldr	r6, [r0]
   1546c:	mov	r5, r0
   15470:	mov	r0, r4
   15474:	mov	r1, #48	; 0x30
   15478:	bl	17e80 <__assert_fail@plt+0x6b5c>
   1547c:	str	r6, [r5]
   15480:	pop	{r4, r5, r6, sl, fp, pc}
   15484:	movw	r1, #53768	; 0xd208
   15488:	cmp	r0, #0
   1548c:	movt	r1, #2
   15490:	movne	r1, r0
   15494:	ldr	r0, [r1]
   15498:	bx	lr
   1549c:	movw	r2, #53768	; 0xd208
   154a0:	cmp	r0, #0
   154a4:	movt	r2, #2
   154a8:	movne	r2, r0
   154ac:	str	r1, [r2]
   154b0:	bx	lr
   154b4:	movw	r3, #53768	; 0xd208
   154b8:	cmp	r0, #0
   154bc:	and	r2, r2, #1
   154c0:	movt	r3, #2
   154c4:	movne	r3, r0
   154c8:	ubfx	r0, r1, #5, #3
   154cc:	and	r1, r1, #31
   154d0:	add	ip, r3, r0, lsl #2
   154d4:	mov	r0, #1
   154d8:	ldr	r3, [ip, #8]
   154dc:	and	r0, r0, r3, lsr r1
   154e0:	eor	r2, r0, r2
   154e4:	eor	r1, r3, r2, lsl r1
   154e8:	str	r1, [ip, #8]
   154ec:	bx	lr
   154f0:	movw	r2, #53768	; 0xd208
   154f4:	cmp	r0, #0
   154f8:	movt	r2, #2
   154fc:	movne	r2, r0
   15500:	ldr	r0, [r2, #4]
   15504:	str	r1, [r2, #4]
   15508:	bx	lr
   1550c:	push	{fp, lr}
   15510:	mov	fp, sp
   15514:	movw	r3, #53768	; 0xd208
   15518:	cmp	r0, #0
   1551c:	movt	r3, #2
   15520:	movne	r3, r0
   15524:	cmp	r1, #0
   15528:	mov	r0, #10
   1552c:	cmpne	r2, #0
   15530:	str	r0, [r3]
   15534:	bne	1553c <__assert_fail@plt+0x4218>
   15538:	bl	112f4 <abort@plt>
   1553c:	str	r1, [r3, #40]	; 0x28
   15540:	str	r2, [r3, #44]	; 0x2c
   15544:	pop	{fp, pc}
   15548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1554c:	add	fp, sp, #28
   15550:	sub	sp, sp, #20
   15554:	mov	r7, r0
   15558:	ldr	r0, [fp, #8]
   1555c:	movw	r5, #53768	; 0xd208
   15560:	mov	r8, r3
   15564:	mov	r9, r2
   15568:	mov	sl, r1
   1556c:	movt	r5, #2
   15570:	cmp	r0, #0
   15574:	movne	r5, r0
   15578:	bl	11210 <__errno_location@plt>
   1557c:	ldr	r2, [r5, #40]	; 0x28
   15580:	ldr	r3, [r5, #44]	; 0x2c
   15584:	mov	r4, r0
   15588:	ldm	r5, {r0, r1}
   1558c:	add	r5, r5, #8
   15590:	ldr	r6, [r4]
   15594:	stm	sp, {r0, r1, r5}
   15598:	mov	r0, r7
   1559c:	mov	r1, sl
   155a0:	str	r2, [sp, #12]
   155a4:	str	r3, [sp, #16]
   155a8:	mov	r2, r9
   155ac:	mov	r3, r8
   155b0:	bl	155c0 <__assert_fail@plt+0x429c>
   155b4:	str	r6, [r4]
   155b8:	sub	sp, fp, #28
   155bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c4:	add	fp, sp, #28
   155c8:	sub	sp, sp, #156	; 0x9c
   155cc:	str	r0, [fp, #-84]	; 0xffffffac
   155d0:	add	r0, r2, #1
   155d4:	mov	r6, r1
   155d8:	mov	r7, r3
   155dc:	str	r2, [fp, #-80]	; 0xffffffb0
   155e0:	str	r0, [sp, #80]	; 0x50
   155e4:	ldr	r0, [fp, #12]
   155e8:	and	r1, r0, #1
   155ec:	str	r1, [sp, #36]	; 0x24
   155f0:	and	r1, r0, #4
   155f4:	str	r1, [sp, #32]
   155f8:	ubfx	r8, r0, #1, #1
   155fc:	bl	11150 <__ctype_get_mb_cur_max@plt>
   15600:	str	r0, [sp, #40]	; 0x28
   15604:	ldr	r0, [fp, #24]
   15608:	ldr	r4, [fp, #8]
   1560c:	mov	r1, #0
   15610:	str	r1, [fp, #-52]	; 0xffffffcc
   15614:	mov	r1, #0
   15618:	str	r1, [sp, #60]	; 0x3c
   1561c:	mov	r1, #1
   15620:	str	r1, [sp, #84]	; 0x54
   15624:	str	r0, [sp, #76]	; 0x4c
   15628:	ldr	r0, [fp, #20]
   1562c:	str	r0, [sp, #72]	; 0x48
   15630:	mov	r0, #0
   15634:	str	r0, [sp, #56]	; 0x38
   15638:	mov	r0, #0
   1563c:	str	r0, [fp, #-88]	; 0xffffffa8
   15640:	mov	r0, #0
   15644:	str	r0, [fp, #-72]	; 0xffffffb8
   15648:	mov	r0, #0
   1564c:	cmp	r4, #10
   15650:	bhi	1696c <__assert_fail@plt+0x5648>
   15654:	add	r1, pc, #24
   15658:	ldr	ip, [fp, #-84]	; 0xffffffac
   1565c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15660:	mov	r5, r6
   15664:	mov	r9, #0
   15668:	mov	r2, #1
   1566c:	mov	r3, #0
   15670:	ldr	pc, [r1, r4, lsl #2]
   15674:	andeq	r5, r1, ip, lsr r7
   15678:	andeq	r5, r1, r8, ror r7
   1567c:	andeq	r5, r1, ip, asr #14
   15680:	andeq	r5, r1, r4, lsr r7
   15684:	andeq	r5, r1, ip, ror #14
   15688:	ldrdeq	r5, [r1], -r0
   1568c:	andeq	r5, r1, ip, asr r7
   15690:	andeq	r5, r1, r8, asr #20
   15694:	andeq	r5, r1, r0, lsr #13
   15698:	andeq	r5, r1, r0, lsr #13
   1569c:	ldrdeq	r5, [r1], -r8
   156a0:	movw	r6, #49722	; 0xc23a
   156a4:	mov	r0, #0
   156a8:	mov	r2, #5
   156ac:	movt	r6, #1
   156b0:	mov	r1, r6
   156b4:	bl	11108 <dcgettext@plt>
   156b8:	cmp	r0, r6
   156bc:	str	r0, [sp, #72]	; 0x48
   156c0:	bne	158b0 <__assert_fail@plt+0x458c>
   156c4:	bl	19adc <__assert_fail@plt+0x87b8>
   156c8:	ldrb	r1, [r0]
   156cc:	and	r1, r1, #223	; 0xdf
   156d0:	cmp	r1, #71	; 0x47
   156d4:	beq	15830 <__assert_fail@plt+0x450c>
   156d8:	cmp	r1, #85	; 0x55
   156dc:	bne	15894 <__assert_fail@plt+0x4570>
   156e0:	ldrb	r1, [r0, #1]
   156e4:	and	r1, r1, #223	; 0xdf
   156e8:	cmp	r1, #84	; 0x54
   156ec:	bne	15894 <__assert_fail@plt+0x4570>
   156f0:	ldrb	r1, [r0, #2]
   156f4:	and	r1, r1, #223	; 0xdf
   156f8:	cmp	r1, #70	; 0x46
   156fc:	bne	15894 <__assert_fail@plt+0x4570>
   15700:	ldrb	r1, [r0, #3]
   15704:	cmp	r1, #45	; 0x2d
   15708:	bne	15894 <__assert_fail@plt+0x4570>
   1570c:	ldrb	r1, [r0, #4]
   15710:	cmp	r1, #56	; 0x38
   15714:	bne	15894 <__assert_fail@plt+0x4570>
   15718:	ldrb	r0, [r0, #5]
   1571c:	cmp	r0, #0
   15720:	movw	r0, #49726	; 0xc23e
   15724:	movt	r0, #1
   15728:	str	r0, [sp, #72]	; 0x48
   1572c:	bne	15894 <__assert_fail@plt+0x4570>
   15730:	b	158b0 <__assert_fail@plt+0x458c>
   15734:	mov	r0, #1
   15738:	b	15778 <__assert_fail@plt+0x4454>
   1573c:	mov	r4, #0
   15740:	mov	r9, #0
   15744:	mov	r2, r0
   15748:	b	157c8 <__assert_fail@plt+0x44a4>
   1574c:	tst	r8, #1
   15750:	bne	15778 <__assert_fail@plt+0x4454>
   15754:	mov	r2, r0
   15758:	b	157a0 <__assert_fail@plt+0x447c>
   1575c:	mov	r0, #1
   15760:	mov	r9, #0
   15764:	mov	r4, #5
   15768:	b	157e4 <__assert_fail@plt+0x44c0>
   1576c:	mov	r2, #1
   15770:	tst	r8, #1
   15774:	beq	157a0 <__assert_fail@plt+0x447c>
   15778:	mov	r1, #1
   1577c:	mov	r9, #0
   15780:	mov	r4, #2
   15784:	mov	r2, r0
   15788:	mov	r3, #1
   1578c:	str	r1, [fp, #-72]	; 0xffffffb8
   15790:	movw	r1, #49724	; 0xc23c
   15794:	movt	r1, #1
   15798:	str	r1, [fp, #-88]	; 0xffffffa8
   1579c:	b	15a48 <__assert_fail@plt+0x4724>
   157a0:	cmp	r5, #0
   157a4:	mov	r9, #1
   157a8:	mov	r4, #2
   157ac:	movne	r0, #39	; 0x27
   157b0:	strbne	r0, [ip]
   157b4:	movw	r0, #49724	; 0xc23c
   157b8:	movt	r0, #1
   157bc:	str	r0, [fp, #-88]	; 0xffffffa8
   157c0:	mov	r0, #1
   157c4:	str	r0, [fp, #-72]	; 0xffffffb8
   157c8:	mov	r3, #0
   157cc:	b	15a48 <__assert_fail@plt+0x4724>
   157d0:	mov	r4, #5
   157d4:	tst	r8, #1
   157d8:	beq	15800 <__assert_fail@plt+0x44dc>
   157dc:	mov	r0, #1
   157e0:	mov	r9, #0
   157e4:	str	r0, [fp, #-72]	; 0xffffffb8
   157e8:	movw	r0, #49720	; 0xc238
   157ec:	mov	r2, #1
   157f0:	mov	r3, #1
   157f4:	movt	r0, #1
   157f8:	str	r0, [fp, #-88]	; 0xffffffa8
   157fc:	b	15a48 <__assert_fail@plt+0x4724>
   15800:	cmp	r5, #0
   15804:	mov	r3, #0
   15808:	mov	r9, #1
   1580c:	mov	r2, #1
   15810:	movne	r0, #34	; 0x22
   15814:	strbne	r0, [ip]
   15818:	movw	r0, #49720	; 0xc238
   1581c:	movt	r0, #1
   15820:	str	r0, [fp, #-88]	; 0xffffffa8
   15824:	mov	r0, #1
   15828:	str	r0, [fp, #-72]	; 0xffffffb8
   1582c:	b	15a48 <__assert_fail@plt+0x4724>
   15830:	ldrb	r1, [r0, #1]
   15834:	and	r1, r1, #223	; 0xdf
   15838:	cmp	r1, #66	; 0x42
   1583c:	bne	15894 <__assert_fail@plt+0x4570>
   15840:	ldrb	r1, [r0, #2]
   15844:	cmp	r1, #49	; 0x31
   15848:	bne	15894 <__assert_fail@plt+0x4570>
   1584c:	ldrb	r1, [r0, #3]
   15850:	cmp	r1, #56	; 0x38
   15854:	bne	15894 <__assert_fail@plt+0x4570>
   15858:	ldrb	r1, [r0, #4]
   1585c:	cmp	r1, #48	; 0x30
   15860:	bne	15894 <__assert_fail@plt+0x4570>
   15864:	ldrb	r1, [r0, #5]
   15868:	cmp	r1, #51	; 0x33
   1586c:	bne	15894 <__assert_fail@plt+0x4570>
   15870:	ldrb	r1, [r0, #6]
   15874:	cmp	r1, #48	; 0x30
   15878:	bne	15894 <__assert_fail@plt+0x4570>
   1587c:	ldrb	r0, [r0, #7]
   15880:	cmp	r0, #0
   15884:	movw	r0, #49734	; 0xc246
   15888:	movt	r0, #1
   1588c:	str	r0, [sp, #72]	; 0x48
   15890:	beq	158b0 <__assert_fail@plt+0x458c>
   15894:	movw	r1, #49720	; 0xc238
   15898:	movw	r0, #49724	; 0xc23c
   1589c:	cmp	r4, #9
   158a0:	movt	r1, #1
   158a4:	movt	r0, #1
   158a8:	moveq	r0, r1
   158ac:	str	r0, [sp, #72]	; 0x48
   158b0:	movw	r6, #49724	; 0xc23c
   158b4:	mov	r0, #0
   158b8:	mov	r2, #5
   158bc:	movt	r6, #1
   158c0:	mov	r1, r6
   158c4:	bl	11108 <dcgettext@plt>
   158c8:	cmp	r0, r6
   158cc:	str	r0, [sp, #76]	; 0x4c
   158d0:	beq	1591c <__assert_fail@plt+0x45f8>
   158d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   158d8:	mov	r9, #0
   158dc:	tst	r8, #1
   158e0:	bne	15a24 <__assert_fail@plt+0x4700>
   158e4:	ldr	r0, [sp, #72]	; 0x48
   158e8:	ldrb	r0, [r0]
   158ec:	cmp	r0, #0
   158f0:	beq	15a24 <__assert_fail@plt+0x4700>
   158f4:	ldr	r1, [sp, #72]	; 0x48
   158f8:	mov	r9, #0
   158fc:	add	r1, r1, #1
   15900:	cmp	r9, r5
   15904:	strbcc	r0, [ip, r9]
   15908:	ldrb	r0, [r1, r9]
   1590c:	add	r9, r9, #1
   15910:	cmp	r0, #0
   15914:	bne	15900 <__assert_fail@plt+0x45dc>
   15918:	b	15a24 <__assert_fail@plt+0x4700>
   1591c:	bl	19adc <__assert_fail@plt+0x87b8>
   15920:	ldrb	r1, [r0]
   15924:	and	r1, r1, #223	; 0xdf
   15928:	cmp	r1, #71	; 0x47
   1592c:	beq	1599c <__assert_fail@plt+0x4678>
   15930:	ldr	ip, [fp, #-84]	; 0xffffffac
   15934:	cmp	r1, #85	; 0x55
   15938:	bne	159f8 <__assert_fail@plt+0x46d4>
   1593c:	ldrb	r1, [r0, #1]
   15940:	and	r1, r1, #223	; 0xdf
   15944:	cmp	r1, #84	; 0x54
   15948:	bne	159f8 <__assert_fail@plt+0x46d4>
   1594c:	ldrb	r1, [r0, #2]
   15950:	and	r1, r1, #223	; 0xdf
   15954:	cmp	r1, #70	; 0x46
   15958:	bne	159f8 <__assert_fail@plt+0x46d4>
   1595c:	ldrb	r1, [r0, #3]
   15960:	cmp	r1, #45	; 0x2d
   15964:	bne	159f8 <__assert_fail@plt+0x46d4>
   15968:	ldrb	r1, [r0, #4]
   1596c:	cmp	r1, #56	; 0x38
   15970:	bne	159f8 <__assert_fail@plt+0x46d4>
   15974:	ldrb	r0, [r0, #5]
   15978:	cmp	r0, #0
   1597c:	bne	159f8 <__assert_fail@plt+0x46d4>
   15980:	movw	r0, #49730	; 0xc242
   15984:	movt	r0, #1
   15988:	str	r0, [sp, #76]	; 0x4c
   1598c:	mov	r9, #0
   15990:	tst	r8, #1
   15994:	beq	158e4 <__assert_fail@plt+0x45c0>
   15998:	b	15a24 <__assert_fail@plt+0x4700>
   1599c:	ldrb	r1, [r0, #1]
   159a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   159a4:	and	r1, r1, #223	; 0xdf
   159a8:	cmp	r1, #66	; 0x42
   159ac:	bne	159f8 <__assert_fail@plt+0x46d4>
   159b0:	ldrb	r1, [r0, #2]
   159b4:	cmp	r1, #49	; 0x31
   159b8:	bne	159f8 <__assert_fail@plt+0x46d4>
   159bc:	ldrb	r1, [r0, #3]
   159c0:	cmp	r1, #56	; 0x38
   159c4:	bne	159f8 <__assert_fail@plt+0x46d4>
   159c8:	ldrb	r1, [r0, #4]
   159cc:	cmp	r1, #48	; 0x30
   159d0:	bne	159f8 <__assert_fail@plt+0x46d4>
   159d4:	ldrb	r1, [r0, #5]
   159d8:	cmp	r1, #51	; 0x33
   159dc:	bne	159f8 <__assert_fail@plt+0x46d4>
   159e0:	ldrb	r1, [r0, #6]
   159e4:	cmp	r1, #48	; 0x30
   159e8:	bne	159f8 <__assert_fail@plt+0x46d4>
   159ec:	ldrb	r0, [r0, #7]
   159f0:	cmp	r0, #0
   159f4:	beq	1680c <__assert_fail@plt+0x54e8>
   159f8:	movw	r0, #49724	; 0xc23c
   159fc:	cmp	r4, #9
   15a00:	movt	r0, #1
   15a04:	mov	r1, r0
   15a08:	movw	r0, #49720	; 0xc238
   15a0c:	movt	r0, #1
   15a10:	moveq	r1, r0
   15a14:	str	r1, [sp, #76]	; 0x4c
   15a18:	mov	r9, #0
   15a1c:	tst	r8, #1
   15a20:	beq	158e4 <__assert_fail@plt+0x45c0>
   15a24:	ldr	r6, [sp, #76]	; 0x4c
   15a28:	mov	r0, r6
   15a2c:	bl	111f8 <strlen@plt>
   15a30:	ldr	ip, [fp, #-84]	; 0xffffffac
   15a34:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15a38:	str	r0, [fp, #-72]	; 0xffffffb8
   15a3c:	str	r6, [fp, #-88]	; 0xffffffa8
   15a40:	mov	r2, #1
   15a44:	mov	r3, r8
   15a48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15a4c:	str	r4, [fp, #-64]	; 0xffffffc0
   15a50:	mov	sl, #0
   15a54:	str	r3, [fp, #-76]	; 0xffffffb4
   15a58:	str	r2, [sp, #88]	; 0x58
   15a5c:	cmp	r0, #0
   15a60:	movwne	r0, #1
   15a64:	and	r1, r0, r3
   15a68:	and	r1, r2, r1
   15a6c:	str	r1, [sp, #48]	; 0x30
   15a70:	sub	r1, r4, #2
   15a74:	clz	r1, r1
   15a78:	lsr	r1, r1, #5
   15a7c:	and	r1, r1, r3
   15a80:	str	r1, [sp, #44]	; 0x2c
   15a84:	subs	r1, r4, #2
   15a88:	eor	r4, r3, #1
   15a8c:	movwne	r1, #1
   15a90:	str	r4, [sp, #92]	; 0x5c
   15a94:	orr	r4, r1, r4
   15a98:	and	r1, r1, r2
   15a9c:	and	r0, r0, r1
   15aa0:	str	r4, [sp, #64]	; 0x40
   15aa4:	ldr	r4, [sp, #84]	; 0x54
   15aa8:	str	r0, [fp, #-60]	; 0xffffffc4
   15aac:	orr	r0, r1, r3
   15ab0:	ldr	r1, [fp, #16]
   15ab4:	eor	r0, r0, #1
   15ab8:	clz	r1, r1
   15abc:	lsr	r1, r1, #5
   15ac0:	orr	r0, r1, r0
   15ac4:	str	r0, [fp, #-68]	; 0xffffffbc
   15ac8:	eor	r0, r2, #1
   15acc:	str	r0, [sp, #52]	; 0x34
   15ad0:	cmn	r7, #1
   15ad4:	beq	15ae4 <__assert_fail@plt+0x47c0>
   15ad8:	cmp	sl, r7
   15adc:	bne	15af0 <__assert_fail@plt+0x47cc>
   15ae0:	b	16784 <__assert_fail@plt+0x5460>
   15ae4:	ldrb	r0, [lr, sl]
   15ae8:	cmp	r0, #0
   15aec:	beq	1678c <__assert_fail@plt+0x5468>
   15af0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15af4:	cmp	r0, #0
   15af8:	beq	15b58 <__assert_fail@plt+0x4834>
   15afc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15b00:	mov	r6, r5
   15b04:	add	r5, sl, r0
   15b08:	cmp	r0, #2
   15b0c:	bcc	15b78 <__assert_fail@plt+0x4854>
   15b10:	mov	r0, #0
   15b14:	cmn	r7, #1
   15b18:	str	r0, [fp, #-56]	; 0xffffffc8
   15b1c:	bne	15b34 <__assert_fail@plt+0x4810>
   15b20:	mov	r0, lr
   15b24:	bl	111f8 <strlen@plt>
   15b28:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15b2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b30:	mov	r7, r0
   15b34:	cmp	r5, r7
   15b38:	bls	15b88 <__assert_fail@plt+0x4864>
   15b3c:	mov	r0, #0
   15b40:	mov	r5, r6
   15b44:	str	r0, [fp, #-48]	; 0xffffffd0
   15b48:	ldrb	r6, [lr, sl]
   15b4c:	cmp	r6, #126	; 0x7e
   15b50:	bls	15bd8 <__assert_fail@plt+0x48b4>
   15b54:	b	16134 <__assert_fail@plt+0x4e10>
   15b58:	mov	r0, #0
   15b5c:	str	r0, [fp, #-56]	; 0xffffffc8
   15b60:	mov	r0, #0
   15b64:	str	r0, [fp, #-48]	; 0xffffffd0
   15b68:	ldrb	r6, [lr, sl]
   15b6c:	cmp	r6, #126	; 0x7e
   15b70:	bls	15bd8 <__assert_fail@plt+0x48b4>
   15b74:	b	16134 <__assert_fail@plt+0x4e10>
   15b78:	mov	r0, #0
   15b7c:	str	r0, [fp, #-56]	; 0xffffffc8
   15b80:	cmp	r5, r7
   15b84:	bhi	15b3c <__assert_fail@plt+0x4818>
   15b88:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15b8c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15b90:	add	r0, lr, sl
   15b94:	bl	111ec <bcmp@plt>
   15b98:	ldr	r2, [sp, #92]	; 0x5c
   15b9c:	cmp	r0, #0
   15ba0:	mov	r1, r0
   15ba4:	mov	r5, r6
   15ba8:	movwne	r1, #1
   15bac:	orr	r1, r1, r2
   15bb0:	tst	r1, #1
   15bb4:	beq	1684c <__assert_fail@plt+0x5528>
   15bb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   15bbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   15bc0:	clz	r0, r0
   15bc4:	lsr	r0, r0, #5
   15bc8:	str	r0, [fp, #-48]	; 0xffffffd0
   15bcc:	ldrb	r6, [lr, sl]
   15bd0:	cmp	r6, #126	; 0x7e
   15bd4:	bhi	16134 <__assert_fail@plt+0x4e10>
   15bd8:	add	r3, pc, #16
   15bdc:	mov	r8, #1
   15be0:	mov	r2, #110	; 0x6e
   15be4:	mov	r0, #97	; 0x61
   15be8:	mov	r1, #0
   15bec:	ldr	pc, [r3, r6, lsl #2]
   15bf0:	andeq	r5, r1, ip, ror #29
   15bf4:	andeq	r6, r1, r4, lsr r1
   15bf8:	andeq	r6, r1, r4, lsr r1
   15bfc:	andeq	r6, r1, r4, lsr r1
   15c00:	andeq	r6, r1, r4, lsr r1
   15c04:	andeq	r6, r1, r4, lsr r1
   15c08:	andeq	r6, r1, r4, lsr r1
   15c0c:	andeq	r6, r1, r8, ror #3
   15c10:	andeq	r5, r1, ip, asr #29
   15c14:	andeq	r5, r1, r4, asr #29
   15c18:	ldrdeq	r5, [r1], -r8
   15c1c:	andeq	r6, r1, r8
   15c20:			; <UNDEFINED> instruction: 0x00015ebc
   15c24:	ldrdeq	r5, [r1], -r4
   15c28:	andeq	r6, r1, r4, lsr r1
   15c2c:	andeq	r6, r1, r4, lsr r1
   15c30:	andeq	r6, r1, r4, lsr r1
   15c34:	andeq	r6, r1, r4, lsr r1
   15c38:	andeq	r6, r1, r4, lsr r1
   15c3c:	andeq	r6, r1, r4, lsr r1
   15c40:	andeq	r6, r1, r4, lsr r1
   15c44:	andeq	r6, r1, r4, lsr r1
   15c48:	andeq	r6, r1, r4, lsr r1
   15c4c:	andeq	r6, r1, r4, lsr r1
   15c50:	andeq	r6, r1, r4, lsr r1
   15c54:	andeq	r6, r1, r4, lsr r1
   15c58:	andeq	r6, r1, r4, lsr r1
   15c5c:	andeq	r6, r1, r4, lsr r1
   15c60:	andeq	r6, r1, r4, lsr r1
   15c64:	andeq	r6, r1, r4, lsr r1
   15c68:	andeq	r6, r1, r4, lsr r1
   15c6c:	andeq	r6, r1, r4, lsr r1
   15c70:	andeq	r5, r1, r0, ror #28
   15c74:	andeq	r5, r1, r4, ror #28
   15c78:	andeq	r5, r1, r4, ror #28
   15c7c:	andeq	r5, r1, r4, asr lr
   15c80:	andeq	r5, r1, r4, ror #28
   15c84:	andeq	r5, r1, ip, ror #27
   15c88:	andeq	r5, r1, r4, ror #28
   15c8c:	andeq	r6, r1, r0, lsl r0
   15c90:	andeq	r5, r1, r4, ror #28
   15c94:	andeq	r5, r1, r4, ror #28
   15c98:	andeq	r5, r1, r4, ror #28
   15c9c:	andeq	r5, r1, ip, ror #27
   15ca0:	andeq	r5, r1, ip, ror #27
   15ca4:	andeq	r5, r1, ip, ror #27
   15ca8:	andeq	r5, r1, ip, ror #27
   15cac:	andeq	r5, r1, ip, ror #27
   15cb0:	andeq	r5, r1, ip, ror #27
   15cb4:	andeq	r5, r1, ip, ror #27
   15cb8:	andeq	r5, r1, ip, ror #27
   15cbc:	andeq	r5, r1, ip, ror #27
   15cc0:	andeq	r5, r1, ip, ror #27
   15cc4:	andeq	r5, r1, ip, ror #27
   15cc8:	andeq	r5, r1, ip, ror #27
   15ccc:	andeq	r5, r1, ip, ror #27
   15cd0:	andeq	r5, r1, ip, ror #27
   15cd4:	andeq	r5, r1, ip, ror #27
   15cd8:	andeq	r5, r1, ip, ror #27
   15cdc:	andeq	r5, r1, r4, ror #28
   15ce0:	andeq	r5, r1, r4, ror #28
   15ce4:	andeq	r5, r1, r4, ror #28
   15ce8:	andeq	r5, r1, r4, ror #28
   15cec:	ldrdeq	r5, [r1], -r4
   15cf0:	andeq	r6, r1, r4, lsr r1
   15cf4:	andeq	r5, r1, ip, ror #27
   15cf8:	andeq	r5, r1, ip, ror #27
   15cfc:	andeq	r5, r1, ip, ror #27
   15d00:	andeq	r5, r1, ip, ror #27
   15d04:	andeq	r5, r1, ip, ror #27
   15d08:	andeq	r5, r1, ip, ror #27
   15d0c:	andeq	r5, r1, ip, ror #27
   15d10:	andeq	r5, r1, ip, ror #27
   15d14:	andeq	r5, r1, ip, ror #27
   15d18:	andeq	r5, r1, ip, ror #27
   15d1c:	andeq	r5, r1, ip, ror #27
   15d20:	andeq	r5, r1, ip, ror #27
   15d24:	andeq	r5, r1, ip, ror #27
   15d28:	andeq	r5, r1, ip, ror #27
   15d2c:	andeq	r5, r1, ip, ror #27
   15d30:	andeq	r5, r1, ip, ror #27
   15d34:	andeq	r5, r1, ip, ror #27
   15d38:	andeq	r5, r1, ip, ror #27
   15d3c:	andeq	r5, r1, ip, ror #27
   15d40:	andeq	r5, r1, ip, ror #27
   15d44:	andeq	r5, r1, ip, ror #27
   15d48:	andeq	r5, r1, ip, ror #27
   15d4c:	andeq	r5, r1, ip, ror #27
   15d50:	andeq	r5, r1, ip, ror #27
   15d54:	andeq	r5, r1, ip, ror #27
   15d58:	andeq	r5, r1, ip, ror #27
   15d5c:	andeq	r5, r1, r4, ror #28
   15d60:	muleq	r1, r8, lr
   15d64:	andeq	r5, r1, ip, ror #27
   15d68:	andeq	r5, r1, r4, ror #28
   15d6c:	andeq	r5, r1, ip, ror #27
   15d70:	andeq	r5, r1, r4, ror #28
   15d74:	andeq	r5, r1, ip, ror #27
   15d78:	andeq	r5, r1, ip, ror #27
   15d7c:	andeq	r5, r1, ip, ror #27
   15d80:	andeq	r5, r1, ip, ror #27
   15d84:	andeq	r5, r1, ip, ror #27
   15d88:	andeq	r5, r1, ip, ror #27
   15d8c:	andeq	r5, r1, ip, ror #27
   15d90:	andeq	r5, r1, ip, ror #27
   15d94:	andeq	r5, r1, ip, ror #27
   15d98:	andeq	r5, r1, ip, ror #27
   15d9c:	andeq	r5, r1, ip, ror #27
   15da0:	andeq	r5, r1, ip, ror #27
   15da4:	andeq	r5, r1, ip, ror #27
   15da8:	andeq	r5, r1, ip, ror #27
   15dac:	andeq	r5, r1, ip, ror #27
   15db0:	andeq	r5, r1, ip, ror #27
   15db4:	andeq	r5, r1, ip, ror #27
   15db8:	andeq	r5, r1, ip, ror #27
   15dbc:	andeq	r5, r1, ip, ror #27
   15dc0:	andeq	r5, r1, ip, ror #27
   15dc4:	andeq	r5, r1, ip, ror #27
   15dc8:	andeq	r5, r1, ip, ror #27
   15dcc:	andeq	r5, r1, ip, ror #27
   15dd0:	andeq	r5, r1, ip, ror #27
   15dd4:	andeq	r5, r1, ip, ror #27
   15dd8:	andeq	r5, r1, ip, ror #27
   15ddc:	andeq	r5, r1, ip, lsr #28
   15de0:	andeq	r5, r1, r4, ror #28
   15de4:	andeq	r5, r1, ip, lsr #28
   15de8:	andeq	r5, r1, r4, asr lr
   15dec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15df0:	tst	r0, #1
   15df4:	bne	160ac <__assert_fail@plt+0x4d88>
   15df8:	ldr	r1, [fp, #16]
   15dfc:	ubfx	r0, r6, #5, #3
   15e00:	mov	r2, #1
   15e04:	ldr	r0, [r1, r0, lsl #2]
   15e08:	and	r1, r6, #31
   15e0c:	tst	r0, r2, lsl r1
   15e10:	beq	160ac <__assert_fail@plt+0x4d88>
   15e14:	mov	r0, r6
   15e18:	mov	r1, r8
   15e1c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15e20:	tst	r2, #1
   15e24:	beq	160cc <__assert_fail@plt+0x4da8>
   15e28:	b	16828 <__assert_fail@plt+0x5504>
   15e2c:	cmp	r7, #1
   15e30:	beq	15e54 <__assert_fail@plt+0x4b30>
   15e34:	mov	r8, #0
   15e38:	cmn	r7, #1
   15e3c:	bne	16098 <__assert_fail@plt+0x4d74>
   15e40:	ldrb	r0, [lr, #1]
   15e44:	cmp	r0, #0
   15e48:	beq	15e54 <__assert_fail@plt+0x4b30>
   15e4c:	mvn	r7, #0
   15e50:	b	16098 <__assert_fail@plt+0x4d74>
   15e54:	mov	r8, #0
   15e58:	cmp	sl, #0
   15e5c:	bne	16098 <__assert_fail@plt+0x4d74>
   15e60:	mov	r1, #1
   15e64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15e68:	cmp	r0, #2
   15e6c:	bne	15e84 <__assert_fail@plt+0x4b60>
   15e70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15e74:	mov	r8, r1
   15e78:	tst	r0, #1
   15e7c:	beq	15dec <__assert_fail@plt+0x4ac8>
   15e80:	b	16828 <__assert_fail@plt+0x5504>
   15e84:	mov	r8, r1
   15e88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15e8c:	tst	r0, #1
   15e90:	beq	15df8 <__assert_fail@plt+0x4ad4>
   15e94:	b	160ac <__assert_fail@plt+0x4d88>
   15e98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15e9c:	cmp	r0, #2
   15ea0:	bne	16160 <__assert_fail@plt+0x4e3c>
   15ea4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15ea8:	tst	r0, #1
   15eac:	bne	16828 <__assert_fail@plt+0x5504>
   15eb0:	mov	r0, #0
   15eb4:	str	r0, [fp, #-56]	; 0xffffffc8
   15eb8:	b	16178 <__assert_fail@plt+0x4e54>
   15ebc:	mov	r0, #102	; 0x66
   15ec0:	b	161e8 <__assert_fail@plt+0x4ec4>
   15ec4:	mov	r2, #116	; 0x74
   15ec8:	b	15ed8 <__assert_fail@plt+0x4bb4>
   15ecc:	mov	r0, #98	; 0x62
   15ed0:	b	161e8 <__assert_fail@plt+0x4ec4>
   15ed4:	mov	r2, #114	; 0x72
   15ed8:	ldr	r0, [sp, #64]	; 0x40
   15edc:	tst	r0, #1
   15ee0:	mov	r0, r2
   15ee4:	bne	161e8 <__assert_fail@plt+0x4ec4>
   15ee8:	b	16828 <__assert_fail@plt+0x5504>
   15eec:	ldr	r0, [sp, #88]	; 0x58
   15ef0:	tst	r0, #1
   15ef4:	beq	16208 <__assert_fail@plt+0x4ee4>
   15ef8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15efc:	tst	r0, #1
   15f00:	bne	16964 <__assert_fail@plt+0x5640>
   15f04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15f08:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15f0c:	subs	r0, r0, #2
   15f10:	movwne	r0, #1
   15f14:	orr	r0, r0, r1
   15f18:	tst	r0, #1
   15f1c:	bne	15f58 <__assert_fail@plt+0x4c34>
   15f20:	cmp	r9, r5
   15f24:	movcc	r0, #39	; 0x27
   15f28:	strbcc	r0, [ip, r9]
   15f2c:	add	r0, r9, #1
   15f30:	cmp	r0, r5
   15f34:	movcc	r1, #36	; 0x24
   15f38:	strbcc	r1, [ip, r0]
   15f3c:	add	r0, r9, #2
   15f40:	add	r9, r9, #3
   15f44:	cmp	r0, r5
   15f48:	movcc	r1, #39	; 0x27
   15f4c:	strbcc	r1, [ip, r0]
   15f50:	mov	r0, #1
   15f54:	str	r0, [fp, #-52]	; 0xffffffcc
   15f58:	mov	r1, #1
   15f5c:	cmp	r9, r5
   15f60:	mov	r8, #0
   15f64:	mov	r6, #48	; 0x30
   15f68:	str	r1, [fp, #-56]	; 0xffffffc8
   15f6c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15f70:	movcc	r0, #92	; 0x5c
   15f74:	strbcc	r0, [ip, r9]
   15f78:	add	r0, r9, #1
   15f7c:	cmp	r1, #2
   15f80:	beq	163d4 <__assert_fail@plt+0x50b0>
   15f84:	add	r1, sl, #1
   15f88:	cmp	r1, r7
   15f8c:	bcs	163d4 <__assert_fail@plt+0x50b0>
   15f90:	ldrb	r1, [lr, r1]
   15f94:	sub	r1, r1, #48	; 0x30
   15f98:	uxtb	r1, r1
   15f9c:	cmp	r1, #9
   15fa0:	bhi	163d4 <__assert_fail@plt+0x50b0>
   15fa4:	cmp	r0, r5
   15fa8:	movcc	r1, #48	; 0x30
   15fac:	strbcc	r1, [ip, r0]
   15fb0:	add	r0, r9, #2
   15fb4:	add	r9, r9, #3
   15fb8:	cmp	r0, r5
   15fbc:	movcc	r1, #48	; 0x30
   15fc0:	strbcc	r1, [ip, r0]
   15fc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fc8:	tst	r0, #1
   15fcc:	beq	15df8 <__assert_fail@plt+0x4ad4>
   15fd0:	b	160ac <__assert_fail@plt+0x4d88>
   15fd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15fd8:	mov	r6, #63	; 0x3f
   15fdc:	cmp	r0, #5
   15fe0:	beq	163e8 <__assert_fail@plt+0x50c4>
   15fe4:	mov	r1, #0
   15fe8:	cmp	r0, #2
   15fec:	str	r1, [fp, #-56]	; 0xffffffc8
   15ff0:	bne	164b0 <__assert_fail@plt+0x518c>
   15ff4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15ff8:	mov	r8, #0
   15ffc:	tst	r0, #1
   16000:	beq	15dec <__assert_fail@plt+0x4ac8>
   16004:	b	16828 <__assert_fail@plt+0x5504>
   16008:	mov	r0, #118	; 0x76
   1600c:	b	161e8 <__assert_fail@plt+0x4ec4>
   16010:	mov	r0, #1
   16014:	mov	r6, #39	; 0x27
   16018:	str	r0, [sp, #60]	; 0x3c
   1601c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16020:	cmp	r0, #2
   16024:	bne	16228 <__assert_fail@plt+0x4f04>
   16028:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1602c:	tst	r0, #1
   16030:	bne	16828 <__assert_fail@plt+0x5504>
   16034:	ldr	r2, [sp, #56]	; 0x38
   16038:	clz	r1, r5
   1603c:	mov	r8, #1
   16040:	lsr	r1, r1, #5
   16044:	cmp	r2, #0
   16048:	mov	r0, r2
   1604c:	movwne	r0, #1
   16050:	orrs	r0, r0, r1
   16054:	moveq	r2, r5
   16058:	moveq	r5, r0
   1605c:	cmp	r9, r5
   16060:	str	r2, [sp, #56]	; 0x38
   16064:	movcc	r0, #39	; 0x27
   16068:	strbcc	r0, [ip, r9]
   1606c:	add	r0, r9, #1
   16070:	cmp	r0, r5
   16074:	movcc	r1, #92	; 0x5c
   16078:	strbcc	r1, [ip, r0]
   1607c:	add	r0, r9, #2
   16080:	add	r9, r9, #3
   16084:	cmp	r0, r5
   16088:	movcc	r1, #39	; 0x27
   1608c:	strbcc	r1, [ip, r0]
   16090:	mov	r0, #0
   16094:	str	r0, [fp, #-52]	; 0xffffffcc
   16098:	mov	r0, #0
   1609c:	str	r0, [fp, #-56]	; 0xffffffc8
   160a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   160a4:	tst	r0, #1
   160a8:	beq	15df8 <__assert_fail@plt+0x4ad4>
   160ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   160b0:	mov	r1, r8
   160b4:	cmp	r0, #0
   160b8:	mov	r0, r6
   160bc:	beq	16180 <__assert_fail@plt+0x4e5c>
   160c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   160c4:	tst	r2, #1
   160c8:	bne	16828 <__assert_fail@plt+0x5504>
   160cc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   160d0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   160d4:	subs	r2, r2, #2
   160d8:	movwne	r2, #1
   160dc:	orr	r2, r2, r3
   160e0:	tst	r2, #1
   160e4:	bne	16120 <__assert_fail@plt+0x4dfc>
   160e8:	cmp	r9, r5
   160ec:	movcc	r2, #39	; 0x27
   160f0:	strbcc	r2, [ip, r9]
   160f4:	add	r2, r9, #1
   160f8:	cmp	r2, r5
   160fc:	movcc	r3, #36	; 0x24
   16100:	strbcc	r3, [ip, r2]
   16104:	add	r2, r9, #2
   16108:	add	r9, r9, #3
   1610c:	cmp	r2, r5
   16110:	movcc	r3, #39	; 0x27
   16114:	strbcc	r3, [ip, r2]
   16118:	mov	r2, #1
   1611c:	str	r2, [fp, #-52]	; 0xffffffcc
   16120:	cmp	r9, r5
   16124:	movcc	r2, #92	; 0x5c
   16128:	strbcc	r2, [ip, r9]
   1612c:	add	r9, r9, #1
   16130:	b	161c8 <__assert_fail@plt+0x4ea4>
   16134:	ldr	r0, [sp, #40]	; 0x28
   16138:	cmp	r0, #1
   1613c:	bne	1623c <__assert_fail@plt+0x4f18>
   16140:	bl	111d4 <__ctype_b_loc@plt>
   16144:	ldr	r0, [r0]
   16148:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1614c:	mov	r1, #1
   16150:	add	r0, r0, r6, lsl #1
   16154:	ldrb	r0, [r0, #1]
   16158:	ubfx	r8, r0, #6, #1
   1615c:	b	16594 <__assert_fail@plt+0x5270>
   16160:	ldr	r1, [sp, #48]	; 0x30
   16164:	mov	r0, #0
   16168:	str	r0, [fp, #-56]	; 0xffffffc8
   1616c:	mov	r0, #92	; 0x5c
   16170:	cmp	r1, #0
   16174:	beq	161e8 <__assert_fail@plt+0x4ec4>
   16178:	mov	r6, #92	; 0x5c
   1617c:	mov	r8, #0
   16180:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16184:	cmp	r0, #0
   16188:	bne	161c0 <__assert_fail@plt+0x4e9c>
   1618c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16190:	tst	r0, #1
   16194:	beq	161c0 <__assert_fail@plt+0x4e9c>
   16198:	cmp	r9, r5
   1619c:	movcc	r0, #39	; 0x27
   161a0:	strbcc	r0, [ip, r9]
   161a4:	add	r0, r9, #1
   161a8:	add	r9, r9, #2
   161ac:	cmp	r0, r5
   161b0:	movcc	r1, #39	; 0x27
   161b4:	strbcc	r1, [ip, r0]
   161b8:	mov	r0, #0
   161bc:	str	r0, [fp, #-52]	; 0xffffffcc
   161c0:	mov	r1, r8
   161c4:	mov	r0, r6
   161c8:	cmp	r9, r5
   161cc:	and	r4, r4, r1
   161d0:	strbcc	r0, [ip, r9]
   161d4:	add	r9, r9, #1
   161d8:	add	sl, sl, #1
   161dc:	cmn	r7, #1
   161e0:	bne	15ad8 <__assert_fail@plt+0x47b4>
   161e4:	b	15ae4 <__assert_fail@plt+0x47c0>
   161e8:	mov	r1, #0
   161ec:	mov	r8, #0
   161f0:	str	r1, [fp, #-56]	; 0xffffffc8
   161f4:	ldr	r1, [sp, #88]	; 0x58
   161f8:	tst	r1, #1
   161fc:	mov	r1, #0
   16200:	beq	15dec <__assert_fail@plt+0x4ac8>
   16204:	b	160c0 <__assert_fail@plt+0x4d9c>
   16208:	ldr	r0, [sp, #36]	; 0x24
   1620c:	mov	r6, #0
   16210:	mov	r8, #0
   16214:	cmp	r0, #0
   16218:	mov	r0, #0
   1621c:	str	r0, [fp, #-56]	; 0xffffffc8
   16220:	bne	161d8 <__assert_fail@plt+0x4eb4>
   16224:	b	15dec <__assert_fail@plt+0x4ac8>
   16228:	mov	r8, #1
   1622c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16230:	tst	r0, #1
   16234:	beq	15df8 <__assert_fail@plt+0x4ad4>
   16238:	b	160ac <__assert_fail@plt+0x4d88>
   1623c:	mov	r0, #0
   16240:	cmn	r7, #1
   16244:	str	r0, [fp, #-36]	; 0xffffffdc
   16248:	str	r0, [fp, #-40]	; 0xffffffd8
   1624c:	bne	16260 <__assert_fail@plt+0x4f3c>
   16250:	mov	r0, lr
   16254:	bl	111f8 <strlen@plt>
   16258:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1625c:	mov	r7, r0
   16260:	ldr	r0, [sp, #44]	; 0x2c
   16264:	str	r4, [sp, #84]	; 0x54
   16268:	str	r5, [sp, #28]
   1626c:	cmp	r0, #0
   16270:	beq	164c4 <__assert_fail@plt+0x51a0>
   16274:	ldr	r0, [sp, #80]	; 0x50
   16278:	mov	r8, #1
   1627c:	mov	r5, #0
   16280:	add	r0, r0, sl
   16284:	str	r0, [sp, #24]
   16288:	sub	r0, fp, #40	; 0x28
   1628c:	mov	r3, r0
   16290:	b	162cc <__assert_fail@plt+0x4fa8>
   16294:	ldr	r5, [sp, #68]	; 0x44
   16298:	add	r5, r0, r5
   1629c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   162a0:	bl	1112c <iswprint@plt>
   162a4:	cmp	r0, #0
   162a8:	sub	r4, fp, #40	; 0x28
   162ac:	movwne	r0, #1
   162b0:	and	r8, r8, r0
   162b4:	mov	r0, r4
   162b8:	bl	110fc <mbsinit@plt>
   162bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   162c0:	mov	r3, r4
   162c4:	cmp	r0, #0
   162c8:	bne	16588 <__assert_fail@plt+0x5264>
   162cc:	str	r5, [sp, #68]	; 0x44
   162d0:	add	r5, r5, sl
   162d4:	sub	r0, fp, #44	; 0x2c
   162d8:	add	r1, lr, r5
   162dc:	sub	r2, r7, r5
   162e0:	bl	19b14 <__assert_fail@plt+0x87f0>
   162e4:	cmn	r0, #2
   162e8:	beq	16548 <__assert_fail@plt+0x5224>
   162ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   162f0:	cmn	r0, #1
   162f4:	beq	1653c <__assert_fail@plt+0x5218>
   162f8:	cmp	r0, #0
   162fc:	beq	16540 <__assert_fail@plt+0x521c>
   16300:	cmp	r0, #2
   16304:	bcc	16294 <__assert_fail@plt+0x4f70>
   16308:	ldr	r1, [sp, #68]	; 0x44
   1630c:	ldr	r2, [sp, #24]
   16310:	add	r1, r2, r1
   16314:	sub	r2, r0, #1
   16318:	ldrb	r3, [r1]
   1631c:	sub	r3, r3, #91	; 0x5b
   16320:	cmp	r3, #33	; 0x21
   16324:	bls	16344 <__assert_fail@plt+0x5020>
   16328:	add	r1, r1, #1
   1632c:	subs	r2, r2, #1
   16330:	beq	16294 <__assert_fail@plt+0x4f70>
   16334:	ldrb	r3, [r1]
   16338:	sub	r3, r3, #91	; 0x5b
   1633c:	cmp	r3, #33	; 0x21
   16340:	bhi	16328 <__assert_fail@plt+0x5004>
   16344:	add	r5, pc, #0
   16348:	ldr	pc, [r5, r3, lsl #2]
   1634c:	andeq	r6, r1, r0, ror #16
   16350:	andeq	r6, r1, r0, ror #16
   16354:	andeq	r6, r1, r8, lsr #6
   16358:	andeq	r6, r1, r0, ror #16
   1635c:	andeq	r6, r1, r8, lsr #6
   16360:	andeq	r6, r1, r0, ror #16
   16364:	andeq	r6, r1, r8, lsr #6
   16368:	andeq	r6, r1, r8, lsr #6
   1636c:	andeq	r6, r1, r8, lsr #6
   16370:	andeq	r6, r1, r8, lsr #6
   16374:	andeq	r6, r1, r8, lsr #6
   16378:	andeq	r6, r1, r8, lsr #6
   1637c:	andeq	r6, r1, r8, lsr #6
   16380:	andeq	r6, r1, r8, lsr #6
   16384:	andeq	r6, r1, r8, lsr #6
   16388:	andeq	r6, r1, r8, lsr #6
   1638c:	andeq	r6, r1, r8, lsr #6
   16390:	andeq	r6, r1, r8, lsr #6
   16394:	andeq	r6, r1, r8, lsr #6
   16398:	andeq	r6, r1, r8, lsr #6
   1639c:	andeq	r6, r1, r8, lsr #6
   163a0:	andeq	r6, r1, r8, lsr #6
   163a4:	andeq	r6, r1, r8, lsr #6
   163a8:	andeq	r6, r1, r8, lsr #6
   163ac:	andeq	r6, r1, r8, lsr #6
   163b0:	andeq	r6, r1, r8, lsr #6
   163b4:	andeq	r6, r1, r8, lsr #6
   163b8:	andeq	r6, r1, r8, lsr #6
   163bc:	andeq	r6, r1, r8, lsr #6
   163c0:	andeq	r6, r1, r8, lsr #6
   163c4:	andeq	r6, r1, r8, lsr #6
   163c8:	andeq	r6, r1, r8, lsr #6
   163cc:	andeq	r6, r1, r8, lsr #6
   163d0:	andeq	r6, r1, r0, ror #16
   163d4:	mov	r9, r0
   163d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   163dc:	tst	r0, #1
   163e0:	beq	15df8 <__assert_fail@plt+0x4ad4>
   163e4:	b	160ac <__assert_fail@plt+0x4d88>
   163e8:	mov	r0, #0
   163ec:	str	r0, [fp, #-56]	; 0xffffffc8
   163f0:	ldr	r0, [sp, #32]
   163f4:	cmp	r0, #0
   163f8:	beq	164b0 <__assert_fail@plt+0x518c>
   163fc:	add	r0, sl, #2
   16400:	mov	r1, r7
   16404:	cmp	r0, r7
   16408:	bcs	164b0 <__assert_fail@plt+0x518c>
   1640c:	add	r1, sl, lr
   16410:	ldrb	r1, [r1, #1]
   16414:	cmp	r1, #63	; 0x3f
   16418:	bne	164b0 <__assert_fail@plt+0x518c>
   1641c:	ldrb	r8, [lr, r0]
   16420:	sub	r2, r8, #33	; 0x21
   16424:	cmp	r2, #29
   16428:	bhi	164b0 <__assert_fail@plt+0x518c>
   1642c:	mov	r1, r4
   16430:	movw	r4, #20929	; 0x51c1
   16434:	mov	r3, #1
   16438:	movt	r4, #14336	; 0x3800
   1643c:	tst	r4, r3, lsl r2
   16440:	beq	1676c <__assert_fail@plt+0x5448>
   16444:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16448:	tst	r2, #1
   1644c:	bne	16828 <__assert_fail@plt+0x5504>
   16450:	cmp	r9, r5
   16454:	mov	r6, r8
   16458:	mov	r4, r1
   1645c:	mov	sl, r0
   16460:	mov	r8, #0
   16464:	movcc	r2, #63	; 0x3f
   16468:	strbcc	r2, [ip, r9]
   1646c:	add	r2, r9, #1
   16470:	cmp	r2, r5
   16474:	movcc	r3, #34	; 0x22
   16478:	strbcc	r3, [ip, r2]
   1647c:	add	r2, r9, #2
   16480:	cmp	r2, r5
   16484:	movcc	r3, #34	; 0x22
   16488:	strbcc	r3, [ip, r2]
   1648c:	add	r2, r9, #3
   16490:	add	r9, r9, #4
   16494:	cmp	r2, r5
   16498:	movcc	r3, #63	; 0x3f
   1649c:	strbcc	r3, [ip, r2]
   164a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   164a4:	tst	r0, #1
   164a8:	beq	15df8 <__assert_fail@plt+0x4ad4>
   164ac:	b	160ac <__assert_fail@plt+0x4d88>
   164b0:	mov	r8, #0
   164b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   164b8:	tst	r0, #1
   164bc:	beq	15df8 <__assert_fail@plt+0x4ad4>
   164c0:	b	160ac <__assert_fail@plt+0x4d88>
   164c4:	mov	r8, #1
   164c8:	mov	r5, #0
   164cc:	sub	r4, fp, #40	; 0x28
   164d0:	str	r5, [sp, #68]	; 0x44
   164d4:	add	r5, r5, sl
   164d8:	sub	r0, fp, #44	; 0x2c
   164dc:	mov	r3, r4
   164e0:	add	r1, lr, r5
   164e4:	sub	r2, r7, r5
   164e8:	bl	19b14 <__assert_fail@plt+0x87f0>
   164ec:	cmn	r0, #2
   164f0:	beq	16548 <__assert_fail@plt+0x5224>
   164f4:	cmn	r0, #1
   164f8:	beq	1653c <__assert_fail@plt+0x5218>
   164fc:	ldr	r5, [sp, #68]	; 0x44
   16500:	cmp	r0, #0
   16504:	beq	16584 <__assert_fail@plt+0x5260>
   16508:	add	r5, r0, r5
   1650c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16510:	bl	1112c <iswprint@plt>
   16514:	cmp	r0, #0
   16518:	sub	r4, fp, #40	; 0x28
   1651c:	movwne	r0, #1
   16520:	and	r8, r8, r0
   16524:	mov	r0, r4
   16528:	bl	110fc <mbsinit@plt>
   1652c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16530:	cmp	r0, #0
   16534:	beq	164d0 <__assert_fail@plt+0x51ac>
   16538:	b	16588 <__assert_fail@plt+0x5264>
   1653c:	mov	r8, #0
   16540:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16544:	b	1657c <__assert_fail@plt+0x5258>
   16548:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1654c:	mov	r8, #0
   16550:	cmp	r5, r7
   16554:	bcs	1657c <__assert_fail@plt+0x5258>
   16558:	ldrb	r0, [lr, r5]
   1655c:	cmp	r0, #0
   16560:	beq	1657c <__assert_fail@plt+0x5258>
   16564:	ldr	r0, [sp, #68]	; 0x44
   16568:	add	r0, r0, #1
   1656c:	add	r5, r0, sl
   16570:	str	r0, [sp, #68]	; 0x44
   16574:	cmp	r5, r7
   16578:	bcc	16558 <__assert_fail@plt+0x5234>
   1657c:	ldr	r5, [sp, #68]	; 0x44
   16580:	b	16588 <__assert_fail@plt+0x5264>
   16584:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16588:	mov	r1, r5
   1658c:	ldr	r5, [sp, #28]
   16590:	ldr	r4, [sp, #84]	; 0x54
   16594:	ldr	r0, [sp, #52]	; 0x34
   16598:	ldr	ip, [fp, #-84]	; 0xffffffac
   1659c:	cmp	r1, #1
   165a0:	orr	r2, r8, r0
   165a4:	mov	r0, r1
   165a8:	bhi	165b4 <__assert_fail@plt+0x5290>
   165ac:	tst	r2, #1
   165b0:	bne	15dec <__assert_fail@plt+0x4ac8>
   165b4:	add	r0, r0, sl
   165b8:	str	r2, [sp, #84]	; 0x54
   165bc:	str	r0, [fp, #-56]	; 0xffffffc8
   165c0:	mov	r0, #0
   165c4:	tst	r2, #1
   165c8:	bne	166a8 <__assert_fail@plt+0x5384>
   165cc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   165d0:	tst	r1, #1
   165d4:	bne	16828 <__assert_fail@plt+0x5504>
   165d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   165dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   165e0:	subs	r2, r1, #2
   165e4:	movwne	r2, #1
   165e8:	orr	r2, r2, r0
   165ec:	tst	r2, #1
   165f0:	bne	1662c <__assert_fail@plt+0x5308>
   165f4:	cmp	r9, r5
   165f8:	add	r2, r9, #1
   165fc:	mov	r0, #1
   16600:	movcc	r1, #39	; 0x27
   16604:	str	r0, [fp, #-52]	; 0xffffffcc
   16608:	strbcc	r1, [ip, r9]
   1660c:	cmp	r2, r5
   16610:	movcc	r1, #36	; 0x24
   16614:	strbcc	r1, [ip, r2]
   16618:	add	r2, r9, #2
   1661c:	add	r9, r9, #3
   16620:	cmp	r2, r5
   16624:	movcc	r1, #39	; 0x27
   16628:	strbcc	r1, [ip, r2]
   1662c:	cmp	r9, r5
   16630:	add	r2, r9, #1
   16634:	movcc	r1, #92	; 0x5c
   16638:	strbcc	r1, [ip, r9]
   1663c:	cmp	r2, r5
   16640:	bcs	16654 <__assert_fail@plt+0x5330>
   16644:	uxtb	r3, r6
   16648:	mov	r1, #48	; 0x30
   1664c:	orr	r3, r1, r3, lsr #6
   16650:	strb	r3, [ip, r2]
   16654:	add	r2, r9, #2
   16658:	add	r9, r9, #3
   1665c:	cmp	r2, r5
   16660:	lsrcc	r3, r6, #3
   16664:	movcc	r1, #6
   16668:	bficc	r3, r1, #3, #29
   1666c:	mov	r1, #6
   16670:	bfi	r6, r1, #3, #29
   16674:	strbcc	r3, [ip, r2]
   16678:	mov	r2, #1
   1667c:	b	166dc <__assert_fail@plt+0x53b8>
   16680:	ldr	r1, [sp, #80]	; 0x50
   16684:	cmp	r9, r2
   16688:	mov	r5, r2
   1668c:	ldr	r2, [sp, #84]	; 0x54
   16690:	strbcc	r6, [ip, r9]
   16694:	add	r9, r9, #1
   16698:	ldrb	r6, [r1, sl]
   1669c:	mov	sl, r3
   166a0:	tst	r2, #1
   166a4:	beq	165cc <__assert_fail@plt+0x52a8>
   166a8:	ldr	r1, [fp, #-48]	; 0xffffffd0
   166ac:	tst	r1, #1
   166b0:	beq	166d0 <__assert_fail@plt+0x53ac>
   166b4:	cmp	r9, r5
   166b8:	mov	r2, r0
   166bc:	movcc	r1, #92	; 0x5c
   166c0:	strbcc	r1, [ip, r9]
   166c4:	add	r9, r9, #1
   166c8:	mov	r1, #0
   166cc:	b	166d8 <__assert_fail@plt+0x53b4>
   166d0:	mov	r1, #0
   166d4:	mov	r2, r0
   166d8:	str	r1, [fp, #-48]	; 0xffffffd0
   166dc:	mov	r0, r2
   166e0:	and	r1, r2, #1
   166e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   166e8:	add	r3, sl, #1
   166ec:	cmp	r2, r3
   166f0:	bls	16750 <__assert_fail@plt+0x542c>
   166f4:	mov	r2, r5
   166f8:	ldr	r5, [fp, #-52]	; 0xffffffcc
   166fc:	cmp	r1, #0
   16700:	movwne	r1, #1
   16704:	mvn	r5, r5
   16708:	orr	r5, r5, r1
   1670c:	tst	r5, #1
   16710:	bne	16680 <__assert_fail@plt+0x535c>
   16714:	cmp	r9, r2
   16718:	movcc	r5, r4
   1671c:	movcc	r4, #39	; 0x27
   16720:	strbcc	r4, [ip, r9]
   16724:	movcc	r4, r5
   16728:	add	r5, r9, #1
   1672c:	add	r9, r9, #2
   16730:	cmp	r5, r2
   16734:	movcc	r1, r4
   16738:	movcc	r4, #39	; 0x27
   1673c:	strbcc	r4, [ip, r5]
   16740:	movcc	r4, r1
   16744:	mov	r1, #0
   16748:	str	r1, [fp, #-52]	; 0xffffffcc
   1674c:	b	16680 <__assert_fail@plt+0x535c>
   16750:	cmp	r1, #0
   16754:	movwne	r1, #1
   16758:	str	r1, [fp, #-56]	; 0xffffffc8
   1675c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16760:	cmp	r0, #0
   16764:	beq	1618c <__assert_fail@plt+0x4e68>
   16768:	b	161c0 <__assert_fail@plt+0x4e9c>
   1676c:	mov	r8, #0
   16770:	mov	r4, r1
   16774:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16778:	tst	r0, #1
   1677c:	beq	15df8 <__assert_fail@plt+0x4ad4>
   16780:	b	160ac <__assert_fail@plt+0x4d88>
   16784:	mov	r7, sl
   16788:	b	16790 <__assert_fail@plt+0x546c>
   1678c:	mvn	r7, #0
   16790:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16794:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16798:	ldr	r2, [sp, #88]	; 0x58
   1679c:	eor	r0, r1, #2
   167a0:	orr	r0, r0, r9
   167a4:	clz	r0, r0
   167a8:	lsr	r0, r0, #5
   167ac:	tst	r3, r0
   167b0:	bne	16828 <__assert_fail@plt+0x5504>
   167b4:	subs	r0, r1, #2
   167b8:	movwne	r0, #1
   167bc:	orr	r0, r3, r0
   167c0:	tst	r0, #1
   167c4:	ldreq	r0, [sp, #60]	; 0x3c
   167c8:	eoreq	r0, r0, #1
   167cc:	tsteq	r0, #1
   167d0:	bne	16904 <__assert_fail@plt+0x55e0>
   167d4:	tst	r4, #1
   167d8:	bne	168c8 <__assert_fail@plt+0x55a4>
   167dc:	ldr	r6, [sp, #56]	; 0x38
   167e0:	mov	r8, #0
   167e4:	cmp	r6, #0
   167e8:	beq	16900 <__assert_fail@plt+0x55dc>
   167ec:	mov	r1, #0
   167f0:	mov	r4, #2
   167f4:	cmp	r5, #0
   167f8:	mov	r0, r2
   167fc:	mov	r3, #0
   16800:	str	r1, [sp, #84]	; 0x54
   16804:	beq	1564c <__assert_fail@plt+0x4328>
   16808:	b	16904 <__assert_fail@plt+0x55e0>
   1680c:	movw	r0, #49738	; 0xc24a
   16810:	movt	r0, #1
   16814:	str	r0, [sp, #76]	; 0x4c
   16818:	mov	r9, #0
   1681c:	tst	r8, #1
   16820:	beq	158e4 <__assert_fail@plt+0x45c0>
   16824:	b	15a24 <__assert_fail@plt+0x4700>
   16828:	ldr	r1, [sp, #88]	; 0x58
   1682c:	mov	r0, #2
   16830:	tst	r1, #1
   16834:	movwne	r0, #4
   16838:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1683c:	ldr	r1, [fp, #12]
   16840:	cmp	r2, #2
   16844:	moveq	r2, r0
   16848:	b	16880 <__assert_fail@plt+0x555c>
   1684c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16850:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16854:	ldr	r1, [fp, #12]
   16858:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1685c:	b	16880 <__assert_fail@plt+0x555c>
   16860:	ldr	r1, [sp, #88]	; 0x58
   16864:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16868:	ldr	r5, [sp, #28]
   1686c:	mov	r0, #2
   16870:	tst	r1, #1
   16874:	ldr	r1, [fp, #12]
   16878:	movwne	r0, #4
   1687c:	mov	r2, r0
   16880:	mov	r0, #0
   16884:	bic	r1, r1, #2
   16888:	str	r2, [sp]
   1688c:	mov	r2, lr
   16890:	str	r0, [sp, #8]
   16894:	ldr	r0, [sp, #72]	; 0x48
   16898:	str	r1, [sp, #4]
   1689c:	mov	r1, r5
   168a0:	str	r0, [sp, #12]
   168a4:	ldr	r0, [sp, #76]	; 0x4c
   168a8:	str	r0, [sp, #16]
   168ac:	mov	r0, ip
   168b0:	mov	r3, r7
   168b4:	bl	155c0 <__assert_fail@plt+0x429c>
   168b8:	mov	r9, r0
   168bc:	mov	r0, r9
   168c0:	sub	sp, fp, #28
   168c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c8:	mov	r0, #5
   168cc:	ldr	r1, [sp, #56]	; 0x38
   168d0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   168d4:	str	r0, [sp]
   168d8:	ldr	r0, [fp, #12]
   168dc:	str	r0, [sp, #4]
   168e0:	ldr	r0, [fp, #16]
   168e4:	str	r0, [sp, #8]
   168e8:	ldr	r0, [sp, #72]	; 0x48
   168ec:	str	r0, [sp, #12]
   168f0:	ldr	r0, [sp, #76]	; 0x4c
   168f4:	str	r0, [sp, #16]
   168f8:	ldr	r0, [fp, #-84]	; 0xffffffac
   168fc:	b	168b0 <__assert_fail@plt+0x558c>
   16900:	mov	r3, #0
   16904:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16908:	cmp	r1, #0
   1690c:	beq	16948 <__assert_fail@plt+0x5624>
   16910:	ldr	r2, [fp, #-84]	; 0xffffffac
   16914:	tst	r3, #1
   16918:	bne	1694c <__assert_fail@plt+0x5628>
   1691c:	ldrb	r0, [r1]
   16920:	cmp	r0, #0
   16924:	beq	1694c <__assert_fail@plt+0x5628>
   16928:	add	r1, r1, #1
   1692c:	cmp	r9, r5
   16930:	strbcc	r0, [r2, r9]
   16934:	add	r9, r9, #1
   16938:	ldrb	r0, [r1], #1
   1693c:	cmp	r0, #0
   16940:	bne	1692c <__assert_fail@plt+0x5608>
   16944:	b	1694c <__assert_fail@plt+0x5628>
   16948:	ldr	r2, [fp, #-84]	; 0xffffffac
   1694c:	cmp	r9, r5
   16950:	movcc	r0, #0
   16954:	strbcc	r0, [r2, r9]
   16958:	mov	r0, r9
   1695c:	sub	sp, fp, #28
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	mov	r0, #4
   16968:	b	16838 <__assert_fail@plt+0x5514>
   1696c:	bl	112f4 <abort@plt>
   16970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16974:	add	fp, sp, #28
   16978:	sub	sp, sp, #28
   1697c:	movw	r5, #53768	; 0xd208
   16980:	cmp	r2, #0
   16984:	mov	r4, r1
   16988:	mov	r7, r0
   1698c:	str	r0, [sp, #20]
   16990:	movt	r5, #2
   16994:	movne	r5, r2
   16998:	bl	11210 <__errno_location@plt>
   1699c:	mov	sl, r0
   169a0:	ldr	r2, [r5, #40]	; 0x28
   169a4:	ldr	r3, [r5, #44]	; 0x2c
   169a8:	ldm	r5, {r0, r1}
   169ac:	orr	r8, r1, #1
   169b0:	add	r9, r5, #8
   169b4:	mov	r1, #0
   169b8:	ldr	r6, [sl]
   169bc:	stm	sp, {r0, r8, r9}
   169c0:	mov	r0, #0
   169c4:	str	r2, [sp, #12]
   169c8:	str	r3, [sp, #16]
   169cc:	mov	r2, r7
   169d0:	mov	r3, r4
   169d4:	str	r6, [sp, #24]
   169d8:	mov	r6, r4
   169dc:	bl	155c0 <__assert_fail@plt+0x429c>
   169e0:	add	r7, r0, #1
   169e4:	mov	r0, r7
   169e8:	bl	17a50 <__assert_fail@plt+0x672c>
   169ec:	mov	r4, r0
   169f0:	ldr	r0, [r5]
   169f4:	ldr	r2, [r5, #44]	; 0x2c
   169f8:	ldr	r1, [r5, #40]	; 0x28
   169fc:	mov	r3, r6
   16a00:	stm	sp, {r0, r8, r9}
   16a04:	str	r2, [sp, #16]
   16a08:	ldr	r2, [sp, #20]
   16a0c:	str	r1, [sp, #12]
   16a10:	mov	r0, r4
   16a14:	mov	r1, r7
   16a18:	bl	155c0 <__assert_fail@plt+0x429c>
   16a1c:	ldr	r0, [sp, #24]
   16a20:	str	r0, [sl]
   16a24:	mov	r0, r4
   16a28:	sub	sp, fp, #28
   16a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a34:	add	fp, sp, #28
   16a38:	sub	sp, sp, #36	; 0x24
   16a3c:	movw	r8, #53768	; 0xd208
   16a40:	cmp	r3, #0
   16a44:	mov	r4, r2
   16a48:	str	r2, [sp, #24]
   16a4c:	mov	r5, r1
   16a50:	mov	r6, r0
   16a54:	str	r0, [sp, #20]
   16a58:	movt	r8, #2
   16a5c:	movne	r8, r3
   16a60:	bl	11210 <__errno_location@plt>
   16a64:	str	r0, [sp, #28]
   16a68:	ldr	r1, [r8, #40]	; 0x28
   16a6c:	ldr	r2, [r8, #44]	; 0x2c
   16a70:	ldr	r7, [r0]
   16a74:	cmp	r4, #0
   16a78:	add	sl, r8, #8
   16a7c:	mov	r0, #0
   16a80:	ldm	r8, {r3, r9}
   16a84:	orreq	r9, r9, #1
   16a88:	stm	sp, {r3, r9, sl}
   16a8c:	str	r1, [sp, #12]
   16a90:	str	r2, [sp, #16]
   16a94:	mov	r1, #0
   16a98:	mov	r2, r6
   16a9c:	mov	r3, r5
   16aa0:	str	r7, [sp, #32]
   16aa4:	mov	r7, r5
   16aa8:	bl	155c0 <__assert_fail@plt+0x429c>
   16aac:	add	r4, r0, #1
   16ab0:	mov	r5, r0
   16ab4:	mov	r0, r4
   16ab8:	bl	17a50 <__assert_fail@plt+0x672c>
   16abc:	mov	r6, r0
   16ac0:	ldr	r0, [r8]
   16ac4:	ldr	r2, [r8, #44]	; 0x2c
   16ac8:	ldr	r1, [r8, #40]	; 0x28
   16acc:	mov	r3, r7
   16ad0:	stm	sp, {r0, r9, sl}
   16ad4:	str	r2, [sp, #16]
   16ad8:	ldr	r2, [sp, #20]
   16adc:	str	r1, [sp, #12]
   16ae0:	mov	r0, r6
   16ae4:	mov	r1, r4
   16ae8:	bl	155c0 <__assert_fail@plt+0x429c>
   16aec:	ldr	r0, [sp, #24]
   16af0:	ldr	r1, [sp, #32]
   16af4:	ldr	r2, [sp, #28]
   16af8:	cmp	r0, #0
   16afc:	str	r1, [r2]
   16b00:	strne	r5, [r0]
   16b04:	mov	r0, r6
   16b08:	sub	sp, fp, #28
   16b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b10:	push	{r4, r5, r6, r7, fp, lr}
   16b14:	add	fp, sp, #16
   16b18:	movw	r4, #53608	; 0xd168
   16b1c:	movt	r4, #2
   16b20:	ldrd	r6, [r4]
   16b24:	cmp	r7, #2
   16b28:	blt	16b54 <__assert_fail@plt+0x5830>
   16b2c:	add	r5, r6, #12
   16b30:	mov	r7, #0
   16b34:	ldr	r0, [r5, r7, lsl #3]
   16b38:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   16b3c:	ldr	r1, [r4, #4]
   16b40:	add	r2, r7, #2
   16b44:	add	r0, r7, #1
   16b48:	mov	r7, r0
   16b4c:	cmp	r2, r1
   16b50:	blt	16b34 <__assert_fail@plt+0x5810>
   16b54:	ldr	r0, [r6, #4]
   16b58:	movw	r5, #53816	; 0xd238
   16b5c:	movt	r5, #2
   16b60:	cmp	r0, r5
   16b64:	beq	16b78 <__assert_fail@plt+0x5854>
   16b68:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   16b6c:	mov	r0, #256	; 0x100
   16b70:	str	r0, [r4, #8]
   16b74:	str	r5, [r4, #12]
   16b78:	add	r5, r4, #8
   16b7c:	cmp	r6, r5
   16b80:	beq	16b90 <__assert_fail@plt+0x586c>
   16b84:	mov	r0, r6
   16b88:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   16b8c:	str	r5, [r4]
   16b90:	mov	r0, #1
   16b94:	str	r0, [r4, #4]
   16b98:	pop	{r4, r5, r6, r7, fp, pc}
   16b9c:	movw	r3, #53768	; 0xd208
   16ba0:	mvn	r2, #0
   16ba4:	movt	r3, #2
   16ba8:	b	16bac <__assert_fail@plt+0x5888>
   16bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bb0:	add	fp, sp, #28
   16bb4:	sub	sp, sp, #44	; 0x2c
   16bb8:	mov	r7, r3
   16bbc:	str	r2, [sp, #36]	; 0x24
   16bc0:	str	r1, [sp, #32]
   16bc4:	mov	r5, r0
   16bc8:	bl	11210 <__errno_location@plt>
   16bcc:	cmp	r5, #0
   16bd0:	bmi	16d38 <__assert_fail@plt+0x5a14>
   16bd4:	cmn	r5, #-2147483647	; 0x80000001
   16bd8:	beq	16d38 <__assert_fail@plt+0x5a14>
   16bdc:	movw	r8, #53608	; 0xd168
   16be0:	mov	r4, r0
   16be4:	ldr	r0, [r0]
   16be8:	movt	r8, #2
   16bec:	str	r4, [sp, #28]
   16bf0:	ldr	r1, [r8, #4]
   16bf4:	ldr	r6, [r8]
   16bf8:	str	r0, [sp, #24]
   16bfc:	cmp	r1, r5
   16c00:	ble	16c0c <__assert_fail@plt+0x58e8>
   16c04:	mov	sl, r6
   16c08:	b	16c74 <__assert_fail@plt+0x5950>
   16c0c:	mov	r0, #8
   16c10:	add	r9, r8, #8
   16c14:	str	r1, [fp, #-32]	; 0xffffffe0
   16c18:	sub	r1, r5, r1
   16c1c:	mvn	r3, #-2147483648	; 0x80000000
   16c20:	str	r0, [sp]
   16c24:	subs	r0, r6, r9
   16c28:	add	r2, r1, #1
   16c2c:	sub	r1, fp, #32
   16c30:	movne	r0, r6
   16c34:	bl	17c50 <__assert_fail@plt+0x692c>
   16c38:	mov	sl, r0
   16c3c:	cmp	r6, r9
   16c40:	str	r0, [r8]
   16c44:	bne	16c50 <__assert_fail@plt+0x592c>
   16c48:	ldrd	r0, [r8, #8]
   16c4c:	stm	sl, {r0, r1}
   16c50:	ldr	r1, [r8, #4]
   16c54:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16c58:	add	r0, sl, r1, lsl #3
   16c5c:	sub	r1, r2, r1
   16c60:	lsl	r2, r1, #3
   16c64:	mov	r1, #0
   16c68:	bl	11228 <memset@plt>
   16c6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16c70:	str	r0, [r8, #4]
   16c74:	mov	r9, sl
   16c78:	ldm	r7, {r0, r1}
   16c7c:	orr	r8, r1, #1
   16c80:	add	r1, r7, #8
   16c84:	ldr	r2, [r7, #40]	; 0x28
   16c88:	ldr	r3, [r7, #44]	; 0x2c
   16c8c:	ldr	r6, [r9, r5, lsl #3]!
   16c90:	str	r1, [sp, #20]
   16c94:	ldr	r4, [r9, #4]!
   16c98:	stm	sp, {r0, r8}
   16c9c:	add	r0, sp, #8
   16ca0:	stm	r0, {r1, r2, r3}
   16ca4:	ldr	r2, [sp, #32]
   16ca8:	ldr	r3, [sp, #36]	; 0x24
   16cac:	mov	r1, r6
   16cb0:	mov	r0, r4
   16cb4:	bl	155c0 <__assert_fail@plt+0x429c>
   16cb8:	cmp	r6, r0
   16cbc:	bhi	16d20 <__assert_fail@plt+0x59fc>
   16cc0:	add	r6, r0, #1
   16cc4:	movw	r0, #53816	; 0xd238
   16cc8:	movt	r0, #2
   16ccc:	str	r6, [sl, r5, lsl #3]
   16cd0:	cmp	r4, r0
   16cd4:	beq	16ce0 <__assert_fail@plt+0x59bc>
   16cd8:	mov	r0, r4
   16cdc:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   16ce0:	mov	r0, r6
   16ce4:	bl	17a50 <__assert_fail@plt+0x672c>
   16ce8:	str	r0, [r9]
   16cec:	mov	r4, r0
   16cf0:	add	r3, sp, #8
   16cf4:	ldr	r0, [r7]
   16cf8:	ldr	r1, [r7, #40]	; 0x28
   16cfc:	ldr	r2, [r7, #44]	; 0x2c
   16d00:	stm	sp, {r0, r8}
   16d04:	ldr	r0, [sp, #20]
   16d08:	stm	r3, {r0, r1, r2}
   16d0c:	ldr	r2, [sp, #32]
   16d10:	ldr	r3, [sp, #36]	; 0x24
   16d14:	mov	r0, r4
   16d18:	mov	r1, r6
   16d1c:	bl	155c0 <__assert_fail@plt+0x429c>
   16d20:	ldr	r1, [sp, #24]
   16d24:	ldr	r0, [sp, #28]
   16d28:	str	r1, [r0]
   16d2c:	mov	r0, r4
   16d30:	sub	sp, fp, #28
   16d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d38:	bl	112f4 <abort@plt>
   16d3c:	movw	r3, #53768	; 0xd208
   16d40:	movt	r3, #2
   16d44:	b	16bac <__assert_fail@plt+0x5888>
   16d48:	movw	r3, #53768	; 0xd208
   16d4c:	mov	r1, r0
   16d50:	mov	r0, #0
   16d54:	mvn	r2, #0
   16d58:	movt	r3, #2
   16d5c:	b	16bac <__assert_fail@plt+0x5888>
   16d60:	movw	r3, #53768	; 0xd208
   16d64:	mov	r2, r1
   16d68:	mov	r1, r0
   16d6c:	mov	r0, #0
   16d70:	movt	r3, #2
   16d74:	b	16bac <__assert_fail@plt+0x5888>
   16d78:	push	{fp, lr}
   16d7c:	mov	fp, sp
   16d80:	sub	sp, sp, #48	; 0x30
   16d84:	vmov.i32	q8, #0	; 0x00000000
   16d88:	mov	ip, #32
   16d8c:	mov	r3, sp
   16d90:	mov	lr, r2
   16d94:	cmp	r1, #10
   16d98:	add	r2, r3, #16
   16d9c:	vst1.64	{d16-d17}, [r3], ip
   16da0:	vst1.64	{d16-d17}, [r2]
   16da4:	vst1.64	{d16-d17}, [r3]
   16da8:	beq	16dc8 <__assert_fail@plt+0x5aa4>
   16dac:	str	r1, [sp]
   16db0:	mov	r3, sp
   16db4:	mov	r1, lr
   16db8:	mvn	r2, #0
   16dbc:	bl	16bac <__assert_fail@plt+0x5888>
   16dc0:	mov	sp, fp
   16dc4:	pop	{fp, pc}
   16dc8:	bl	112f4 <abort@plt>
   16dcc:	push	{r4, sl, fp, lr}
   16dd0:	add	fp, sp, #8
   16dd4:	sub	sp, sp, #48	; 0x30
   16dd8:	vmov.i32	q8, #0	; 0x00000000
   16ddc:	mov	ip, r3
   16de0:	mov	r3, sp
   16de4:	mov	lr, #32
   16de8:	cmp	r1, #10
   16dec:	add	r4, r3, #16
   16df0:	vst1.64	{d16-d17}, [r3], lr
   16df4:	vst1.64	{d16-d17}, [r4]
   16df8:	vst1.64	{d16-d17}, [r3]
   16dfc:	beq	16e1c <__assert_fail@plt+0x5af8>
   16e00:	str	r1, [sp]
   16e04:	mov	r1, r2
   16e08:	mov	r3, sp
   16e0c:	mov	r2, ip
   16e10:	bl	16bac <__assert_fail@plt+0x5888>
   16e14:	sub	sp, fp, #8
   16e18:	pop	{r4, sl, fp, pc}
   16e1c:	bl	112f4 <abort@plt>
   16e20:	push	{fp, lr}
   16e24:	mov	fp, sp
   16e28:	sub	sp, sp, #48	; 0x30
   16e2c:	vmov.i32	q8, #0	; 0x00000000
   16e30:	mov	r3, sp
   16e34:	mov	ip, #32
   16e38:	cmp	r0, #10
   16e3c:	add	r2, r3, #16
   16e40:	vst1.64	{d16-d17}, [r3], ip
   16e44:	vst1.64	{d16-d17}, [r2]
   16e48:	vst1.64	{d16-d17}, [r3]
   16e4c:	beq	16e6c <__assert_fail@plt+0x5b48>
   16e50:	str	r0, [sp]
   16e54:	mov	r3, sp
   16e58:	mov	r0, #0
   16e5c:	mvn	r2, #0
   16e60:	bl	16bac <__assert_fail@plt+0x5888>
   16e64:	mov	sp, fp
   16e68:	pop	{fp, pc}
   16e6c:	bl	112f4 <abort@plt>
   16e70:	push	{fp, lr}
   16e74:	mov	fp, sp
   16e78:	sub	sp, sp, #48	; 0x30
   16e7c:	vmov.i32	q8, #0	; 0x00000000
   16e80:	mov	r3, sp
   16e84:	mov	ip, #32
   16e88:	cmp	r0, #10
   16e8c:	add	lr, r3, #16
   16e90:	vst1.64	{d16-d17}, [r3], ip
   16e94:	vst1.64	{d16-d17}, [lr]
   16e98:	vst1.64	{d16-d17}, [r3]
   16e9c:	beq	16eb8 <__assert_fail@plt+0x5b94>
   16ea0:	str	r0, [sp]
   16ea4:	mov	r3, sp
   16ea8:	mov	r0, #0
   16eac:	bl	16bac <__assert_fail@plt+0x5888>
   16eb0:	mov	sp, fp
   16eb4:	pop	{fp, pc}
   16eb8:	bl	112f4 <abort@plt>
   16ebc:	push	{r4, sl, fp, lr}
   16ec0:	add	fp, sp, #8
   16ec4:	sub	sp, sp, #48	; 0x30
   16ec8:	mov	lr, r0
   16ecc:	movw	r0, #53768	; 0xd208
   16ed0:	mov	ip, r1
   16ed4:	mov	r1, #32
   16ed8:	mov	r4, #1
   16edc:	movt	r0, #2
   16ee0:	add	r3, r0, #16
   16ee4:	vld1.64	{d16-d17}, [r0], r1
   16ee8:	vld1.64	{d20-d21}, [r0]
   16eec:	vld1.64	{d18-d19}, [r3]
   16ef0:	mov	r3, sp
   16ef4:	add	r0, r3, #32
   16ef8:	add	r1, r3, #16
   16efc:	vst1.64	{d20-d21}, [r0]
   16f00:	mov	r0, #28
   16f04:	vst1.64	{d18-d19}, [r1]
   16f08:	mov	r1, r3
   16f0c:	and	r0, r0, r2, lsr #3
   16f10:	and	r2, r2, #31
   16f14:	vst1.64	{d16-d17}, [r1], r0
   16f18:	ldr	r0, [r1, #8]
   16f1c:	bic	r4, r4, r0, lsr r2
   16f20:	eor	r0, r0, r4, lsl r2
   16f24:	mov	r2, ip
   16f28:	str	r0, [r1, #8]
   16f2c:	mov	r0, #0
   16f30:	mov	r1, lr
   16f34:	bl	16bac <__assert_fail@plt+0x5888>
   16f38:	sub	sp, fp, #8
   16f3c:	pop	{r4, sl, fp, pc}
   16f40:	push	{fp, lr}
   16f44:	mov	fp, sp
   16f48:	sub	sp, sp, #48	; 0x30
   16f4c:	mov	ip, r0
   16f50:	movw	r0, #53768	; 0xd208
   16f54:	mov	r2, #32
   16f58:	movt	r0, #2
   16f5c:	add	r3, r0, #16
   16f60:	vld1.64	{d16-d17}, [r0], r2
   16f64:	vld1.64	{d20-d21}, [r0]
   16f68:	vld1.64	{d18-d19}, [r3]
   16f6c:	mov	r3, sp
   16f70:	add	r0, r3, #32
   16f74:	add	r2, r3, #16
   16f78:	vst1.64	{d20-d21}, [r0]
   16f7c:	mov	r0, #28
   16f80:	vst1.64	{d18-d19}, [r2]
   16f84:	mov	r2, r3
   16f88:	and	r0, r0, r1, lsr #3
   16f8c:	and	r1, r1, #31
   16f90:	vst1.64	{d16-d17}, [r2], r0
   16f94:	mov	r0, #1
   16f98:	ldr	lr, [r2, #8]
   16f9c:	bic	r0, r0, lr, lsr r1
   16fa0:	eor	r0, lr, r0, lsl r1
   16fa4:	mov	r1, ip
   16fa8:	str	r0, [r2, #8]
   16fac:	mov	r0, #0
   16fb0:	mvn	r2, #0
   16fb4:	bl	16bac <__assert_fail@plt+0x5888>
   16fb8:	mov	sp, fp
   16fbc:	pop	{fp, pc}
   16fc0:	push	{fp, lr}
   16fc4:	mov	fp, sp
   16fc8:	sub	sp, sp, #48	; 0x30
   16fcc:	mov	r1, r0
   16fd0:	movw	r0, #53768	; 0xd208
   16fd4:	mov	r3, #32
   16fd8:	movt	r0, #2
   16fdc:	add	r2, r0, #16
   16fe0:	vld1.64	{d16-d17}, [r0], r3
   16fe4:	mov	r3, sp
   16fe8:	vld1.64	{d18-d19}, [r2]
   16fec:	vld1.64	{d20-d21}, [r0]
   16ff0:	add	r2, r3, #16
   16ff4:	add	r0, r3, #32
   16ff8:	vst1.64	{d18-d19}, [r2]
   16ffc:	vst1.64	{d20-d21}, [r0]
   17000:	mov	r0, #12
   17004:	mov	r2, r3
   17008:	vst1.64	{d16-d17}, [r2], r0
   1700c:	ldr	r0, [r2]
   17010:	orr	r0, r0, #67108864	; 0x4000000
   17014:	str	r0, [r2]
   17018:	mov	r0, #0
   1701c:	mvn	r2, #0
   17020:	bl	16bac <__assert_fail@plt+0x5888>
   17024:	mov	sp, fp
   17028:	pop	{fp, pc}
   1702c:	push	{fp, lr}
   17030:	mov	fp, sp
   17034:	sub	sp, sp, #48	; 0x30
   17038:	mov	ip, r1
   1703c:	mov	r1, r0
   17040:	movw	r0, #53768	; 0xd208
   17044:	mov	r2, #32
   17048:	movt	r0, #2
   1704c:	add	r3, r0, #16
   17050:	vld1.64	{d16-d17}, [r0], r2
   17054:	vld1.64	{d18-d19}, [r3]
   17058:	vld1.64	{d20-d21}, [r0]
   1705c:	mov	r3, sp
   17060:	add	r2, r3, #16
   17064:	add	r0, r3, #32
   17068:	vst1.64	{d18-d19}, [r2]
   1706c:	vst1.64	{d20-d21}, [r0]
   17070:	mov	r0, #12
   17074:	mov	r2, r3
   17078:	vst1.64	{d16-d17}, [r2], r0
   1707c:	ldr	r0, [r2]
   17080:	orr	r0, r0, #67108864	; 0x4000000
   17084:	str	r0, [r2]
   17088:	mov	r0, #0
   1708c:	mov	r2, ip
   17090:	bl	16bac <__assert_fail@plt+0x5888>
   17094:	mov	sp, fp
   17098:	pop	{fp, pc}
   1709c:	push	{r4, sl, fp, lr}
   170a0:	add	fp, sp, #8
   170a4:	sub	sp, sp, #96	; 0x60
   170a8:	vmov.i32	q8, #0	; 0x00000000
   170ac:	mov	ip, r2
   170b0:	mov	r2, sp
   170b4:	mov	r4, #28
   170b8:	cmp	r1, #10
   170bc:	mov	r3, r2
   170c0:	add	lr, r2, #16
   170c4:	vst1.64	{d16-d17}, [r3], r4
   170c8:	vst1.64	{d16-d17}, [lr]
   170cc:	vst1.32	{d16-d17}, [r3]
   170d0:	beq	17120 <__assert_fail@plt+0x5dfc>
   170d4:	vld1.64	{d16-d17}, [r2], r4
   170d8:	vld1.64	{d18-d19}, [lr]
   170dc:	add	r3, sp, #48	; 0x30
   170e0:	vld1.32	{d20-d21}, [r2]
   170e4:	add	r2, r3, #20
   170e8:	add	r4, r3, #4
   170ec:	vst1.32	{d18-d19}, [r2]
   170f0:	add	r2, r3, #32
   170f4:	vst1.32	{d16-d17}, [r4]
   170f8:	vst1.32	{d20-d21}, [r2]
   170fc:	str	r1, [sp, #48]	; 0x30
   17100:	mvn	r2, #0
   17104:	ldr	r1, [sp, #60]	; 0x3c
   17108:	orr	r1, r1, #67108864	; 0x4000000
   1710c:	str	r1, [sp, #60]	; 0x3c
   17110:	mov	r1, ip
   17114:	bl	16bac <__assert_fail@plt+0x5888>
   17118:	sub	sp, fp, #8
   1711c:	pop	{r4, sl, fp, pc}
   17120:	bl	112f4 <abort@plt>
   17124:	push	{r4, r5, r6, sl, fp, lr}
   17128:	add	fp, sp, #16
   1712c:	sub	sp, sp, #48	; 0x30
   17130:	mov	ip, r3
   17134:	movw	r3, #53768	; 0xd208
   17138:	mov	r6, #32
   1713c:	cmp	r1, #0
   17140:	mov	r4, sp
   17144:	movt	r3, #2
   17148:	cmpne	r2, #0
   1714c:	add	r5, r4, #16
   17150:	add	lr, r3, #16
   17154:	vld1.64	{d16-d17}, [r3], r6
   17158:	vld1.64	{d18-d19}, [lr]
   1715c:	vld1.64	{d20-d21}, [r3]
   17160:	mov	r3, #10
   17164:	vst1.64	{d16-d17}, [r4], r6
   17168:	vst1.64	{d18-d19}, [r5]
   1716c:	vst1.64	{d20-d21}, [r4]
   17170:	str	r3, [sp]
   17174:	bne	1717c <__assert_fail@plt+0x5e58>
   17178:	bl	112f4 <abort@plt>
   1717c:	str	r2, [sp, #44]	; 0x2c
   17180:	str	r1, [sp, #40]	; 0x28
   17184:	mov	r3, sp
   17188:	mov	r1, ip
   1718c:	mvn	r2, #0
   17190:	bl	16bac <__assert_fail@plt+0x5888>
   17194:	sub	sp, fp, #16
   17198:	pop	{r4, r5, r6, sl, fp, pc}
   1719c:	push	{r4, r5, r6, sl, fp, lr}
   171a0:	add	fp, sp, #16
   171a4:	sub	sp, sp, #48	; 0x30
   171a8:	mov	lr, r3
   171ac:	movw	r3, #53768	; 0xd208
   171b0:	mov	r6, #32
   171b4:	cmp	r1, #0
   171b8:	mov	r4, sp
   171bc:	movt	r3, #2
   171c0:	cmpne	r2, #0
   171c4:	add	r5, r4, #16
   171c8:	add	ip, r3, #16
   171cc:	vld1.64	{d16-d17}, [r3], r6
   171d0:	vld1.64	{d18-d19}, [ip]
   171d4:	vld1.64	{d20-d21}, [r3]
   171d8:	mov	r3, #10
   171dc:	vst1.64	{d16-d17}, [r4], r6
   171e0:	vst1.64	{d18-d19}, [r5]
   171e4:	vst1.64	{d20-d21}, [r4]
   171e8:	str	r3, [sp]
   171ec:	bne	171f4 <__assert_fail@plt+0x5ed0>
   171f0:	bl	112f4 <abort@plt>
   171f4:	ldr	ip, [fp, #8]
   171f8:	str	r2, [sp, #44]	; 0x2c
   171fc:	str	r1, [sp, #40]	; 0x28
   17200:	mov	r3, sp
   17204:	mov	r1, lr
   17208:	mov	r2, ip
   1720c:	bl	16bac <__assert_fail@plt+0x5888>
   17210:	sub	sp, fp, #16
   17214:	pop	{r4, r5, r6, sl, fp, pc}
   17218:	push	{r4, sl, fp, lr}
   1721c:	add	fp, sp, #8
   17220:	sub	sp, sp, #48	; 0x30
   17224:	movw	r3, #53768	; 0xd208
   17228:	mov	lr, #32
   1722c:	mov	ip, r2
   17230:	cmp	r0, #0
   17234:	movt	r3, #2
   17238:	cmpne	r1, #0
   1723c:	add	r2, r3, #16
   17240:	vld1.64	{d16-d17}, [r3], lr
   17244:	vld1.64	{d20-d21}, [r3]
   17248:	vld1.64	{d18-d19}, [r2]
   1724c:	mov	r2, sp
   17250:	add	r4, r2, #16
   17254:	vst1.64	{d16-d17}, [r2], lr
   17258:	vst1.64	{d20-d21}, [r2]
   1725c:	mov	r2, #10
   17260:	vst1.64	{d18-d19}, [r4]
   17264:	str	r2, [sp]
   17268:	bne	17270 <__assert_fail@plt+0x5f4c>
   1726c:	bl	112f4 <abort@plt>
   17270:	str	r1, [sp, #44]	; 0x2c
   17274:	str	r0, [sp, #40]	; 0x28
   17278:	mov	r3, sp
   1727c:	mov	r0, #0
   17280:	mov	r1, ip
   17284:	mvn	r2, #0
   17288:	bl	16bac <__assert_fail@plt+0x5888>
   1728c:	sub	sp, fp, #8
   17290:	pop	{r4, sl, fp, pc}
   17294:	push	{r4, r5, fp, lr}
   17298:	add	fp, sp, #8
   1729c:	sub	sp, sp, #48	; 0x30
   172a0:	mov	ip, r3
   172a4:	movw	r3, #53768	; 0xd208
   172a8:	mov	r4, #32
   172ac:	mov	lr, r2
   172b0:	cmp	r0, #0
   172b4:	movt	r3, #2
   172b8:	cmpne	r1, #0
   172bc:	add	r2, r3, #16
   172c0:	vld1.64	{d16-d17}, [r3], r4
   172c4:	vld1.64	{d20-d21}, [r3]
   172c8:	vld1.64	{d18-d19}, [r2]
   172cc:	mov	r2, sp
   172d0:	add	r5, r2, #16
   172d4:	vst1.64	{d16-d17}, [r2], r4
   172d8:	vst1.64	{d20-d21}, [r2]
   172dc:	mov	r2, #10
   172e0:	vst1.64	{d18-d19}, [r5]
   172e4:	str	r2, [sp]
   172e8:	bne	172f0 <__assert_fail@plt+0x5fcc>
   172ec:	bl	112f4 <abort@plt>
   172f0:	str	r1, [sp, #44]	; 0x2c
   172f4:	str	r0, [sp, #40]	; 0x28
   172f8:	mov	r3, sp
   172fc:	mov	r0, #0
   17300:	mov	r1, lr
   17304:	mov	r2, ip
   17308:	bl	16bac <__assert_fail@plt+0x5888>
   1730c:	sub	sp, fp, #8
   17310:	pop	{r4, r5, fp, pc}
   17314:	movw	r3, #53560	; 0xd138
   17318:	movt	r3, #2
   1731c:	b	16bac <__assert_fail@plt+0x5888>
   17320:	movw	r3, #53560	; 0xd138
   17324:	mov	r2, r1
   17328:	mov	r1, r0
   1732c:	mov	r0, #0
   17330:	movt	r3, #2
   17334:	b	16bac <__assert_fail@plt+0x5888>
   17338:	movw	r3, #53560	; 0xd138
   1733c:	mvn	r2, #0
   17340:	movt	r3, #2
   17344:	b	16bac <__assert_fail@plt+0x5888>
   17348:	movw	r3, #53560	; 0xd138
   1734c:	mov	r1, r0
   17350:	mov	r0, #0
   17354:	mvn	r2, #0
   17358:	movt	r3, #2
   1735c:	b	16bac <__assert_fail@plt+0x5888>
   17360:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17364:	add	fp, sp, #24
   17368:	sub	sp, sp, #32
   1736c:	ldr	r6, [fp, #12]
   17370:	ldr	r7, [fp, #8]
   17374:	mov	r4, r2
   17378:	mov	r8, r0
   1737c:	cmp	r1, #0
   17380:	beq	173a8 <__assert_fail@plt+0x6084>
   17384:	movw	r2, #49828	; 0xc2a4
   17388:	mov	r5, r1
   1738c:	str	r3, [sp, #4]
   17390:	str	r4, [sp]
   17394:	mov	r0, r8
   17398:	mov	r1, #1
   1739c:	movt	r2, #1
   173a0:	mov	r3, r5
   173a4:	b	173c0 <__assert_fail@plt+0x609c>
   173a8:	movw	r2, #49840	; 0xc2b0
   173ac:	str	r3, [sp]
   173b0:	mov	r0, r8
   173b4:	mov	r1, #1
   173b8:	mov	r3, r4
   173bc:	movt	r2, #1
   173c0:	bl	1124c <__fprintf_chk@plt>
   173c4:	movw	r1, #49847	; 0xc2b7
   173c8:	mov	r0, #0
   173cc:	mov	r2, #5
   173d0:	movt	r1, #1
   173d4:	bl	11108 <dcgettext@plt>
   173d8:	movw	r2, #50565	; 0xc585
   173dc:	mov	r3, r0
   173e0:	movw	r0, #2022	; 0x7e6
   173e4:	mov	r1, #1
   173e8:	movt	r2, #1
   173ec:	str	r0, [sp]
   173f0:	mov	r0, r8
   173f4:	bl	1124c <__fprintf_chk@plt>
   173f8:	movw	r4, #46768	; 0xb6b0
   173fc:	mov	r1, r8
   17400:	movt	r4, #1
   17404:	mov	r0, r4
   17408:	bl	1106c <fputs_unlocked@plt>
   1740c:	movw	r1, #49851	; 0xc2bb
   17410:	mov	r0, #0
   17414:	mov	r2, #5
   17418:	movt	r1, #1
   1741c:	bl	11108 <dcgettext@plt>
   17420:	movw	r3, #50022	; 0xc366
   17424:	mov	r2, r0
   17428:	mov	r0, r8
   1742c:	mov	r1, #1
   17430:	movt	r3, #1
   17434:	bl	1124c <__fprintf_chk@plt>
   17438:	mov	r0, r4
   1743c:	mov	r1, r8
   17440:	bl	1106c <fputs_unlocked@plt>
   17444:	cmp	r6, #9
   17448:	bhi	17484 <__assert_fail@plt+0x6160>
   1744c:	add	r0, pc, #0
   17450:	ldr	pc, [r0, r6, lsl #2]
   17454:	andeq	r7, r1, ip, ror r4
   17458:	muleq	r1, r0, r4
   1745c:	andeq	r7, r1, r0, asr #9
   17460:	andeq	r7, r1, r8, ror #9
   17464:	andeq	r7, r1, r0, lsl r5
   17468:	andeq	r7, r1, r8, lsr r5
   1746c:	andeq	r7, r1, r0, ror #10
   17470:	muleq	r1, r8, r5
   17474:	andeq	r7, r1, r0, asr #12
   17478:	andeq	r7, r1, r8, ror #11
   1747c:	sub	sp, fp, #24
   17480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17484:	movw	r1, #50375	; 0xc4c7
   17488:	movt	r1, #1
   1748c:	b	175f0 <__assert_fail@plt+0x62cc>
   17490:	movw	r1, #50056	; 0xc388
   17494:	mov	r0, #0
   17498:	mov	r2, #5
   1749c:	movt	r1, #1
   174a0:	bl	11108 <dcgettext@plt>
   174a4:	ldr	r3, [r7]
   174a8:	mov	r2, r0
   174ac:	mov	r0, r8
   174b0:	mov	r1, #1
   174b4:	sub	sp, fp, #24
   174b8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   174bc:	b	1124c <__fprintf_chk@plt>
   174c0:	movw	r1, #50072	; 0xc398
   174c4:	mov	r0, #0
   174c8:	mov	r2, #5
   174cc:	movt	r1, #1
   174d0:	bl	11108 <dcgettext@plt>
   174d4:	mov	r2, r0
   174d8:	ldr	r3, [r7]
   174dc:	ldr	r0, [r7, #4]
   174e0:	str	r0, [sp]
   174e4:	b	175d4 <__assert_fail@plt+0x62b0>
   174e8:	movw	r1, #50095	; 0xc3af
   174ec:	mov	r0, #0
   174f0:	mov	r2, #5
   174f4:	movt	r1, #1
   174f8:	bl	11108 <dcgettext@plt>
   174fc:	mov	r2, r0
   17500:	ldr	r3, [r7]
   17504:	ldmib	r7, {r0, r1}
   17508:	stm	sp, {r0, r1}
   1750c:	b	175d4 <__assert_fail@plt+0x62b0>
   17510:	movw	r1, #50123	; 0xc3cb
   17514:	mov	r0, #0
   17518:	mov	r2, #5
   1751c:	movt	r1, #1
   17520:	bl	11108 <dcgettext@plt>
   17524:	ldr	r3, [r7]
   17528:	mov	r2, r0
   1752c:	ldmib	r7, {r0, r1, r7}
   17530:	stm	sp, {r0, r1, r7}
   17534:	b	175d4 <__assert_fail@plt+0x62b0>
   17538:	movw	r1, #50155	; 0xc3eb
   1753c:	mov	r0, #0
   17540:	mov	r2, #5
   17544:	movt	r1, #1
   17548:	bl	11108 <dcgettext@plt>
   1754c:	ldr	r3, [r7]
   17550:	mov	r2, r0
   17554:	ldmib	r7, {r0, r1, r6, r7}
   17558:	stm	sp, {r0, r1, r6, r7}
   1755c:	b	175d4 <__assert_fail@plt+0x62b0>
   17560:	movw	r1, #50191	; 0xc40f
   17564:	mov	r0, #0
   17568:	mov	r2, #5
   1756c:	movt	r1, #1
   17570:	bl	11108 <dcgettext@plt>
   17574:	mov	r2, r0
   17578:	ldr	r3, [r7]
   1757c:	ldmib	r7, {r0, r1, r6}
   17580:	ldr	r5, [r7, #16]
   17584:	ldr	r7, [r7, #20]
   17588:	stm	sp, {r0, r1, r6}
   1758c:	str	r5, [sp, #12]
   17590:	str	r7, [sp, #16]
   17594:	b	175d4 <__assert_fail@plt+0x62b0>
   17598:	movw	r1, #50231	; 0xc437
   1759c:	mov	r0, #0
   175a0:	mov	r2, #5
   175a4:	movt	r1, #1
   175a8:	bl	11108 <dcgettext@plt>
   175ac:	mov	r2, r0
   175b0:	ldr	r3, [r7]
   175b4:	ldmib	r7, {r0, r1, r6}
   175b8:	ldr	r5, [r7, #16]
   175bc:	ldr	r4, [r7, #20]
   175c0:	ldr	r7, [r7, #24]
   175c4:	stm	sp, {r0, r1, r6}
   175c8:	str	r5, [sp, #12]
   175cc:	str	r4, [sp, #16]
   175d0:	str	r7, [sp, #20]
   175d4:	mov	r0, r8
   175d8:	mov	r1, #1
   175dc:	bl	1124c <__fprintf_chk@plt>
   175e0:	sub	sp, fp, #24
   175e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   175e8:	movw	r1, #50323	; 0xc493
   175ec:	movt	r1, #1
   175f0:	mov	r0, #0
   175f4:	mov	r2, #5
   175f8:	bl	11108 <dcgettext@plt>
   175fc:	mov	ip, r0
   17600:	ldr	r3, [r7]
   17604:	ldr	r0, [r7, #4]
   17608:	ldr	r1, [r7, #8]
   1760c:	ldr	r6, [r7, #12]
   17610:	ldr	r5, [r7, #16]
   17614:	ldr	r4, [r7, #20]
   17618:	ldr	r2, [r7, #24]
   1761c:	ldr	lr, [r7, #28]
   17620:	ldr	r7, [r7, #32]
   17624:	stm	sp, {r0, r1, r6}
   17628:	str	r5, [sp, #12]
   1762c:	str	r4, [sp, #16]
   17630:	str	r2, [sp, #20]
   17634:	str	lr, [sp, #24]
   17638:	str	r7, [sp, #28]
   1763c:	b	17684 <__assert_fail@plt+0x6360>
   17640:	movw	r1, #50275	; 0xc463
   17644:	mov	r0, #0
   17648:	mov	r2, #5
   1764c:	movt	r1, #1
   17650:	bl	11108 <dcgettext@plt>
   17654:	mov	ip, r0
   17658:	ldr	r3, [r7]
   1765c:	ldmib	r7, {r0, r1, r6}
   17660:	ldr	r5, [r7, #16]
   17664:	ldr	r4, [r7, #20]
   17668:	ldr	r2, [r7, #24]
   1766c:	ldr	r7, [r7, #28]
   17670:	stm	sp, {r0, r1, r6}
   17674:	str	r5, [sp, #12]
   17678:	str	r4, [sp, #16]
   1767c:	str	r2, [sp, #20]
   17680:	str	r7, [sp, #24]
   17684:	mov	r0, r8
   17688:	mov	r1, #1
   1768c:	mov	r2, ip
   17690:	bl	1124c <__fprintf_chk@plt>
   17694:	sub	sp, fp, #24
   17698:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1769c:	push	{r4, sl, fp, lr}
   176a0:	add	fp, sp, #8
   176a4:	sub	sp, sp, #8
   176a8:	ldr	ip, [fp, #8]
   176ac:	mov	lr, #0
   176b0:	ldr	r4, [ip, lr, lsl #2]
   176b4:	add	lr, lr, #1
   176b8:	cmp	r4, #0
   176bc:	bne	176b0 <__assert_fail@plt+0x638c>
   176c0:	sub	r4, lr, #1
   176c4:	str	ip, [sp]
   176c8:	str	r4, [sp, #4]
   176cc:	bl	17360 <__assert_fail@plt+0x603c>
   176d0:	sub	sp, fp, #8
   176d4:	pop	{r4, sl, fp, pc}
   176d8:	push	{fp, lr}
   176dc:	mov	fp, sp
   176e0:	sub	sp, sp, #48	; 0x30
   176e4:	ldr	ip, [fp, #8]
   176e8:	ldr	lr, [ip]
   176ec:	cmp	lr, #0
   176f0:	str	lr, [sp, #8]
   176f4:	beq	17790 <__assert_fail@plt+0x646c>
   176f8:	ldr	lr, [ip, #4]
   176fc:	cmp	lr, #0
   17700:	str	lr, [sp, #12]
   17704:	beq	17798 <__assert_fail@plt+0x6474>
   17708:	ldr	lr, [ip, #8]
   1770c:	cmp	lr, #0
   17710:	str	lr, [sp, #16]
   17714:	beq	177a0 <__assert_fail@plt+0x647c>
   17718:	ldr	lr, [ip, #12]
   1771c:	cmp	lr, #0
   17720:	str	lr, [sp, #20]
   17724:	beq	177a8 <__assert_fail@plt+0x6484>
   17728:	ldr	lr, [ip, #16]
   1772c:	cmp	lr, #0
   17730:	str	lr, [sp, #24]
   17734:	beq	177b0 <__assert_fail@plt+0x648c>
   17738:	ldr	lr, [ip, #20]
   1773c:	cmp	lr, #0
   17740:	str	lr, [sp, #28]
   17744:	beq	177b8 <__assert_fail@plt+0x6494>
   17748:	ldr	lr, [ip, #24]
   1774c:	cmp	lr, #0
   17750:	str	lr, [sp, #32]
   17754:	beq	177c0 <__assert_fail@plt+0x649c>
   17758:	ldr	lr, [ip, #28]
   1775c:	cmp	lr, #0
   17760:	str	lr, [sp, #36]	; 0x24
   17764:	beq	177c8 <__assert_fail@plt+0x64a4>
   17768:	ldr	lr, [ip, #32]
   1776c:	cmp	lr, #0
   17770:	str	lr, [sp, #40]	; 0x28
   17774:	beq	177d0 <__assert_fail@plt+0x64ac>
   17778:	ldr	lr, [ip, #36]	; 0x24
   1777c:	mov	ip, #10
   17780:	cmp	lr, #0
   17784:	str	lr, [sp, #44]	; 0x2c
   17788:	movweq	ip, #9
   1778c:	b	177d4 <__assert_fail@plt+0x64b0>
   17790:	mov	ip, #0
   17794:	b	177d4 <__assert_fail@plt+0x64b0>
   17798:	mov	ip, #1
   1779c:	b	177d4 <__assert_fail@plt+0x64b0>
   177a0:	mov	ip, #2
   177a4:	b	177d4 <__assert_fail@plt+0x64b0>
   177a8:	mov	ip, #3
   177ac:	b	177d4 <__assert_fail@plt+0x64b0>
   177b0:	mov	ip, #4
   177b4:	b	177d4 <__assert_fail@plt+0x64b0>
   177b8:	mov	ip, #5
   177bc:	b	177d4 <__assert_fail@plt+0x64b0>
   177c0:	mov	ip, #6
   177c4:	b	177d4 <__assert_fail@plt+0x64b0>
   177c8:	mov	ip, #7
   177cc:	b	177d4 <__assert_fail@plt+0x64b0>
   177d0:	mov	ip, #8
   177d4:	add	lr, sp, #8
   177d8:	str	ip, [sp, #4]
   177dc:	str	lr, [sp]
   177e0:	bl	17360 <__assert_fail@plt+0x603c>
   177e4:	mov	sp, fp
   177e8:	pop	{fp, pc}
   177ec:	push	{fp, lr}
   177f0:	mov	fp, sp
   177f4:	sub	sp, sp, #56	; 0x38
   177f8:	add	ip, fp, #8
   177fc:	str	ip, [sp, #12]
   17800:	ldr	lr, [fp, #8]
   17804:	cmp	lr, #0
   17808:	str	lr, [sp, #16]
   1780c:	beq	178a8 <__assert_fail@plt+0x6584>
   17810:	ldr	lr, [ip, #4]
   17814:	cmp	lr, #0
   17818:	str	lr, [sp, #20]
   1781c:	beq	178b0 <__assert_fail@plt+0x658c>
   17820:	ldr	lr, [ip, #8]
   17824:	cmp	lr, #0
   17828:	str	lr, [sp, #24]
   1782c:	beq	178b8 <__assert_fail@plt+0x6594>
   17830:	ldr	lr, [ip, #12]
   17834:	cmp	lr, #0
   17838:	str	lr, [sp, #28]
   1783c:	beq	178c0 <__assert_fail@plt+0x659c>
   17840:	ldr	lr, [ip, #16]
   17844:	cmp	lr, #0
   17848:	str	lr, [sp, #32]
   1784c:	beq	178c8 <__assert_fail@plt+0x65a4>
   17850:	ldr	lr, [ip, #20]
   17854:	cmp	lr, #0
   17858:	str	lr, [sp, #36]	; 0x24
   1785c:	beq	178d0 <__assert_fail@plt+0x65ac>
   17860:	ldr	lr, [ip, #24]
   17864:	cmp	lr, #0
   17868:	str	lr, [sp, #40]	; 0x28
   1786c:	beq	178d8 <__assert_fail@plt+0x65b4>
   17870:	ldr	lr, [ip, #28]
   17874:	cmp	lr, #0
   17878:	str	lr, [sp, #44]	; 0x2c
   1787c:	beq	178e0 <__assert_fail@plt+0x65bc>
   17880:	ldr	lr, [ip, #32]
   17884:	cmp	lr, #0
   17888:	str	lr, [sp, #48]	; 0x30
   1788c:	beq	178e8 <__assert_fail@plt+0x65c4>
   17890:	ldr	lr, [ip, #36]	; 0x24
   17894:	mov	ip, #10
   17898:	cmp	lr, #0
   1789c:	str	lr, [sp, #52]	; 0x34
   178a0:	movweq	ip, #9
   178a4:	b	178ec <__assert_fail@plt+0x65c8>
   178a8:	mov	ip, #0
   178ac:	b	178ec <__assert_fail@plt+0x65c8>
   178b0:	mov	ip, #1
   178b4:	b	178ec <__assert_fail@plt+0x65c8>
   178b8:	mov	ip, #2
   178bc:	b	178ec <__assert_fail@plt+0x65c8>
   178c0:	mov	ip, #3
   178c4:	b	178ec <__assert_fail@plt+0x65c8>
   178c8:	mov	ip, #4
   178cc:	b	178ec <__assert_fail@plt+0x65c8>
   178d0:	mov	ip, #5
   178d4:	b	178ec <__assert_fail@plt+0x65c8>
   178d8:	mov	ip, #6
   178dc:	b	178ec <__assert_fail@plt+0x65c8>
   178e0:	mov	ip, #7
   178e4:	b	178ec <__assert_fail@plt+0x65c8>
   178e8:	mov	ip, #8
   178ec:	add	lr, sp, #16
   178f0:	str	ip, [sp, #4]
   178f4:	str	lr, [sp]
   178f8:	bl	17360 <__assert_fail@plt+0x603c>
   178fc:	mov	sp, fp
   17900:	pop	{fp, pc}
   17904:	push	{fp, lr}
   17908:	mov	fp, sp
   1790c:	movw	r0, #53652	; 0xd194
   17910:	movt	r0, #2
   17914:	ldr	r1, [r0]
   17918:	movw	r0, #46768	; 0xb6b0
   1791c:	movt	r0, #1
   17920:	bl	1106c <fputs_unlocked@plt>
   17924:	movw	r1, #50435	; 0xc503
   17928:	mov	r0, #0
   1792c:	mov	r2, #5
   17930:	movt	r1, #1
   17934:	bl	11108 <dcgettext@plt>
   17938:	movw	r2, #50455	; 0xc517
   1793c:	mov	r1, r0
   17940:	mov	r0, #1
   17944:	movt	r2, #1
   17948:	bl	11234 <__printf_chk@plt>
   1794c:	movw	r1, #50477	; 0xc52d
   17950:	mov	r0, #0
   17954:	mov	r2, #5
   17958:	movt	r1, #1
   1795c:	bl	11108 <dcgettext@plt>
   17960:	movw	r2, #46080	; 0xb400
   17964:	movw	r3, #46577	; 0xb5f1
   17968:	mov	r1, r0
   1796c:	mov	r0, #1
   17970:	movt	r2, #1
   17974:	movt	r3, #1
   17978:	bl	11234 <__printf_chk@plt>
   1797c:	movw	r1, #50497	; 0xc541
   17980:	mov	r0, #0
   17984:	mov	r2, #5
   17988:	movt	r1, #1
   1798c:	bl	11108 <dcgettext@plt>
   17990:	movw	r2, #50536	; 0xc568
   17994:	mov	r1, r0
   17998:	mov	r0, #1
   1799c:	movt	r2, #1
   179a0:	pop	{fp, lr}
   179a4:	b	11234 <__printf_chk@plt>
   179a8:	push	{r4, r5, r6, sl, fp, lr}
   179ac:	add	fp, sp, #16
   179b0:	mov	r4, r2
   179b4:	mov	r5, r1
   179b8:	mov	r6, r0
   179bc:	bl	19b78 <__assert_fail@plt+0x8854>
   179c0:	cmp	r0, #0
   179c4:	popne	{r4, r5, r6, sl, fp, pc}
   179c8:	cmp	r6, #0
   179cc:	beq	179e0 <__assert_fail@plt+0x66bc>
   179d0:	cmp	r5, #0
   179d4:	cmpne	r4, #0
   179d8:	bne	179e0 <__assert_fail@plt+0x66bc>
   179dc:	pop	{r4, r5, r6, sl, fp, pc}
   179e0:	bl	17f5c <__assert_fail@plt+0x6c38>
   179e4:	push	{r4, r5, r6, sl, fp, lr}
   179e8:	add	fp, sp, #16
   179ec:	mov	r4, r2
   179f0:	mov	r5, r1
   179f4:	mov	r6, r0
   179f8:	bl	19b78 <__assert_fail@plt+0x8854>
   179fc:	cmp	r0, #0
   17a00:	popne	{r4, r5, r6, sl, fp, pc}
   17a04:	cmp	r6, #0
   17a08:	beq	17a1c <__assert_fail@plt+0x66f8>
   17a0c:	cmp	r5, #0
   17a10:	cmpne	r4, #0
   17a14:	bne	17a1c <__assert_fail@plt+0x66f8>
   17a18:	pop	{r4, r5, r6, sl, fp, pc}
   17a1c:	bl	17f5c <__assert_fail@plt+0x6c38>
   17a20:	push	{fp, lr}
   17a24:	mov	fp, sp
   17a28:	bl	19834 <__assert_fail@plt+0x8510>
   17a2c:	cmp	r0, #0
   17a30:	popne	{fp, pc}
   17a34:	bl	17f5c <__assert_fail@plt+0x6c38>
   17a38:	push	{fp, lr}
   17a3c:	mov	fp, sp
   17a40:	bl	19834 <__assert_fail@plt+0x8510>
   17a44:	cmp	r0, #0
   17a48:	popne	{fp, pc}
   17a4c:	bl	17f5c <__assert_fail@plt+0x6c38>
   17a50:	push	{fp, lr}
   17a54:	mov	fp, sp
   17a58:	bl	19834 <__assert_fail@plt+0x8510>
   17a5c:	cmp	r0, #0
   17a60:	popne	{fp, pc}
   17a64:	bl	17f5c <__assert_fail@plt+0x6c38>
   17a68:	push	{r4, r5, fp, lr}
   17a6c:	add	fp, sp, #8
   17a70:	mov	r4, r1
   17a74:	mov	r5, r0
   17a78:	bl	19864 <__assert_fail@plt+0x8540>
   17a7c:	cmp	r0, #0
   17a80:	popne	{r4, r5, fp, pc}
   17a84:	cmp	r5, #0
   17a88:	beq	17a98 <__assert_fail@plt+0x6774>
   17a8c:	cmp	r4, #0
   17a90:	bne	17a98 <__assert_fail@plt+0x6774>
   17a94:	pop	{r4, r5, fp, pc}
   17a98:	bl	17f5c <__assert_fail@plt+0x6c38>
   17a9c:	push	{fp, lr}
   17aa0:	mov	fp, sp
   17aa4:	cmp	r1, #0
   17aa8:	orreq	r1, r1, #1
   17aac:	bl	19864 <__assert_fail@plt+0x8540>
   17ab0:	cmp	r0, #0
   17ab4:	popne	{fp, pc}
   17ab8:	bl	17f5c <__assert_fail@plt+0x6c38>
   17abc:	push	{fp, lr}
   17ac0:	mov	fp, sp
   17ac4:	clz	r3, r2
   17ac8:	lsr	ip, r3, #5
   17acc:	clz	r3, r1
   17ad0:	lsr	r3, r3, #5
   17ad4:	orrs	r3, r3, ip
   17ad8:	movwne	r1, #1
   17adc:	movwne	r2, #1
   17ae0:	bl	19b78 <__assert_fail@plt+0x8854>
   17ae4:	cmp	r0, #0
   17ae8:	popne	{fp, pc}
   17aec:	bl	17f5c <__assert_fail@plt+0x6c38>
   17af0:	push	{fp, lr}
   17af4:	mov	fp, sp
   17af8:	mov	r2, r1
   17afc:	mov	r1, r0
   17b00:	mov	r0, #0
   17b04:	bl	19b78 <__assert_fail@plt+0x8854>
   17b08:	cmp	r0, #0
   17b0c:	popne	{fp, pc}
   17b10:	bl	17f5c <__assert_fail@plt+0x6c38>
   17b14:	push	{fp, lr}
   17b18:	mov	fp, sp
   17b1c:	mov	r2, r1
   17b20:	mov	r1, r0
   17b24:	clz	r0, r2
   17b28:	clz	r3, r1
   17b2c:	lsr	r0, r0, #5
   17b30:	lsr	r3, r3, #5
   17b34:	orrs	r0, r3, r0
   17b38:	mov	r0, #0
   17b3c:	movwne	r1, #1
   17b40:	movwne	r2, #1
   17b44:	bl	19b78 <__assert_fail@plt+0x8854>
   17b48:	cmp	r0, #0
   17b4c:	popne	{fp, pc}
   17b50:	bl	17f5c <__assert_fail@plt+0x6c38>
   17b54:	push	{r4, r5, r6, sl, fp, lr}
   17b58:	add	fp, sp, #16
   17b5c:	ldr	r5, [r1]
   17b60:	mov	r4, r1
   17b64:	mov	r6, r0
   17b68:	cmp	r0, #0
   17b6c:	beq	17b84 <__assert_fail@plt+0x6860>
   17b70:	mov	r0, #1
   17b74:	add	r0, r0, r5, lsr #1
   17b78:	adds	r5, r5, r0
   17b7c:	bcc	17b8c <__assert_fail@plt+0x6868>
   17b80:	b	17bc8 <__assert_fail@plt+0x68a4>
   17b84:	cmp	r5, #0
   17b88:	movweq	r5, #64	; 0x40
   17b8c:	mov	r0, r6
   17b90:	mov	r1, r5
   17b94:	mov	r2, #1
   17b98:	bl	19b78 <__assert_fail@plt+0x8854>
   17b9c:	cmp	r5, #0
   17ba0:	mov	r1, r5
   17ba4:	movwne	r1, #1
   17ba8:	cmp	r0, #0
   17bac:	bne	17bc0 <__assert_fail@plt+0x689c>
   17bb0:	clz	r2, r6
   17bb4:	lsr	r2, r2, #5
   17bb8:	orrs	r1, r2, r1
   17bbc:	bne	17bc8 <__assert_fail@plt+0x68a4>
   17bc0:	str	r5, [r4]
   17bc4:	pop	{r4, r5, r6, sl, fp, pc}
   17bc8:	bl	17f5c <__assert_fail@plt+0x6c38>
   17bcc:	push	{r4, r5, r6, r7, fp, lr}
   17bd0:	add	fp, sp, #16
   17bd4:	ldr	r5, [r1]
   17bd8:	mov	r6, r2
   17bdc:	mov	r4, r1
   17be0:	mov	r7, r0
   17be4:	cmp	r0, #0
   17be8:	beq	17c00 <__assert_fail@plt+0x68dc>
   17bec:	mov	r0, #1
   17bf0:	add	r0, r0, r5, lsr #1
   17bf4:	adds	r5, r5, r0
   17bf8:	bcc	17c18 <__assert_fail@plt+0x68f4>
   17bfc:	b	17c4c <__assert_fail@plt+0x6928>
   17c00:	cmp	r5, #0
   17c04:	bne	17c18 <__assert_fail@plt+0x68f4>
   17c08:	mov	r0, #64	; 0x40
   17c0c:	cmp	r6, #64	; 0x40
   17c10:	udiv	r5, r0, r6
   17c14:	addhi	r5, r5, #1
   17c18:	mov	r0, r7
   17c1c:	mov	r1, r5
   17c20:	mov	r2, r6
   17c24:	bl	19b78 <__assert_fail@plt+0x8854>
   17c28:	cmp	r0, #0
   17c2c:	bne	17c44 <__assert_fail@plt+0x6920>
   17c30:	cmp	r7, #0
   17c34:	beq	17c4c <__assert_fail@plt+0x6928>
   17c38:	cmp	r6, #0
   17c3c:	cmpne	r5, #0
   17c40:	bne	17c4c <__assert_fail@plt+0x6928>
   17c44:	str	r5, [r4]
   17c48:	pop	{r4, r5, r6, r7, fp, pc}
   17c4c:	bl	17f5c <__assert_fail@plt+0x6c38>
   17c50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c54:	add	fp, sp, #24
   17c58:	mov	r8, r1
   17c5c:	ldr	r1, [r1]
   17c60:	mov	r5, r0
   17c64:	add	r0, r1, r1, asr #1
   17c68:	cmp	r0, r1
   17c6c:	mvnvs	r0, #-2147483648	; 0x80000000
   17c70:	cmp	r0, r3
   17c74:	mov	r7, r0
   17c78:	movgt	r7, r3
   17c7c:	cmn	r3, #1
   17c80:	movle	r7, r0
   17c84:	ldr	r0, [fp, #8]
   17c88:	cmn	r0, #1
   17c8c:	ble	17cb4 <__assert_fail@plt+0x6990>
   17c90:	cmp	r0, #0
   17c94:	beq	17d08 <__assert_fail@plt+0x69e4>
   17c98:	cmn	r7, #1
   17c9c:	ble	17cdc <__assert_fail@plt+0x69b8>
   17ca0:	mvn	r4, #-2147483648	; 0x80000000
   17ca4:	udiv	r6, r4, r0
   17ca8:	cmp	r6, r7
   17cac:	bge	17d08 <__assert_fail@plt+0x69e4>
   17cb0:	b	17d18 <__assert_fail@plt+0x69f4>
   17cb4:	cmn	r7, #1
   17cb8:	ble	17cf8 <__assert_fail@plt+0x69d4>
   17cbc:	cmn	r0, #1
   17cc0:	beq	17d08 <__assert_fail@plt+0x69e4>
   17cc4:	mov	r6, #-2147483648	; 0x80000000
   17cc8:	mvn	r4, #-2147483648	; 0x80000000
   17ccc:	sdiv	r6, r6, r0
   17cd0:	cmp	r6, r7
   17cd4:	bge	17d08 <__assert_fail@plt+0x69e4>
   17cd8:	b	17d18 <__assert_fail@plt+0x69f4>
   17cdc:	beq	17d08 <__assert_fail@plt+0x69e4>
   17ce0:	mov	r6, #-2147483648	; 0x80000000
   17ce4:	mvn	r4, #-2147483648	; 0x80000000
   17ce8:	sdiv	r6, r6, r7
   17cec:	cmp	r6, r0
   17cf0:	bge	17d08 <__assert_fail@plt+0x69e4>
   17cf4:	b	17d18 <__assert_fail@plt+0x69f4>
   17cf8:	mvn	r4, #-2147483648	; 0x80000000
   17cfc:	sdiv	r6, r4, r0
   17d00:	cmp	r7, r6
   17d04:	blt	17d18 <__assert_fail@plt+0x69f4>
   17d08:	mul	r6, r7, r0
   17d0c:	mov	r4, #64	; 0x40
   17d10:	cmp	r6, #63	; 0x3f
   17d14:	bgt	17d20 <__assert_fail@plt+0x69fc>
   17d18:	sdiv	r7, r4, r0
   17d1c:	mul	r6, r7, r0
   17d20:	cmp	r5, #0
   17d24:	moveq	r4, #0
   17d28:	streq	r4, [r8]
   17d2c:	sub	r4, r7, r1
   17d30:	cmp	r4, r2
   17d34:	bge	17de0 <__assert_fail@plt+0x6abc>
   17d38:	add	r7, r1, r2
   17d3c:	mov	r6, #0
   17d40:	mov	r2, #0
   17d44:	cmp	r7, r3
   17d48:	movwgt	r6, #1
   17d4c:	cmn	r3, #1
   17d50:	movwgt	r2, #1
   17d54:	cmp	r7, r1
   17d58:	bvs	17e14 <__assert_fail@plt+0x6af0>
   17d5c:	ands	r1, r2, r6
   17d60:	bne	17e14 <__assert_fail@plt+0x6af0>
   17d64:	cmn	r0, #1
   17d68:	ble	17d90 <__assert_fail@plt+0x6a6c>
   17d6c:	cmp	r0, #0
   17d70:	beq	17ddc <__assert_fail@plt+0x6ab8>
   17d74:	cmn	r7, #1
   17d78:	ble	17db4 <__assert_fail@plt+0x6a90>
   17d7c:	mvn	r1, #-2147483648	; 0x80000000
   17d80:	udiv	r1, r1, r0
   17d84:	cmp	r1, r7
   17d88:	bge	17ddc <__assert_fail@plt+0x6ab8>
   17d8c:	b	17e14 <__assert_fail@plt+0x6af0>
   17d90:	cmn	r7, #1
   17d94:	ble	17dcc <__assert_fail@plt+0x6aa8>
   17d98:	cmn	r0, #1
   17d9c:	beq	17ddc <__assert_fail@plt+0x6ab8>
   17da0:	mov	r1, #-2147483648	; 0x80000000
   17da4:	sdiv	r1, r1, r0
   17da8:	cmp	r1, r7
   17dac:	bge	17ddc <__assert_fail@plt+0x6ab8>
   17db0:	b	17e14 <__assert_fail@plt+0x6af0>
   17db4:	beq	17ddc <__assert_fail@plt+0x6ab8>
   17db8:	mov	r1, #-2147483648	; 0x80000000
   17dbc:	sdiv	r1, r1, r7
   17dc0:	cmp	r1, r0
   17dc4:	bge	17ddc <__assert_fail@plt+0x6ab8>
   17dc8:	b	17e14 <__assert_fail@plt+0x6af0>
   17dcc:	mvn	r1, #-2147483648	; 0x80000000
   17dd0:	sdiv	r1, r1, r0
   17dd4:	cmp	r7, r1
   17dd8:	blt	17e14 <__assert_fail@plt+0x6af0>
   17ddc:	mul	r6, r7, r0
   17de0:	mov	r0, r5
   17de4:	mov	r1, r6
   17de8:	bl	19864 <__assert_fail@plt+0x8540>
   17dec:	cmp	r6, #0
   17df0:	movwne	r6, #1
   17df4:	cmp	r0, #0
   17df8:	bne	17e0c <__assert_fail@plt+0x6ae8>
   17dfc:	clz	r1, r5
   17e00:	lsr	r1, r1, #5
   17e04:	orrs	r1, r1, r6
   17e08:	bne	17e14 <__assert_fail@plt+0x6af0>
   17e0c:	str	r7, [r8]
   17e10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17e14:	bl	17f5c <__assert_fail@plt+0x6c38>
   17e18:	push	{fp, lr}
   17e1c:	mov	fp, sp
   17e20:	mov	r1, #1
   17e24:	bl	197e0 <__assert_fail@plt+0x84bc>
   17e28:	cmp	r0, #0
   17e2c:	popne	{fp, pc}
   17e30:	bl	17f5c <__assert_fail@plt+0x6c38>
   17e34:	push	{fp, lr}
   17e38:	mov	fp, sp
   17e3c:	bl	197e0 <__assert_fail@plt+0x84bc>
   17e40:	cmp	r0, #0
   17e44:	popne	{fp, pc}
   17e48:	bl	17f5c <__assert_fail@plt+0x6c38>
   17e4c:	push	{fp, lr}
   17e50:	mov	fp, sp
   17e54:	mov	r1, #1
   17e58:	bl	197e0 <__assert_fail@plt+0x84bc>
   17e5c:	cmp	r0, #0
   17e60:	popne	{fp, pc}
   17e64:	bl	17f5c <__assert_fail@plt+0x6c38>
   17e68:	push	{fp, lr}
   17e6c:	mov	fp, sp
   17e70:	bl	197e0 <__assert_fail@plt+0x84bc>
   17e74:	cmp	r0, #0
   17e78:	popne	{fp, pc}
   17e7c:	bl	17f5c <__assert_fail@plt+0x6c38>
   17e80:	push	{r4, r5, fp, lr}
   17e84:	add	fp, sp, #8
   17e88:	mov	r5, r0
   17e8c:	mov	r0, r1
   17e90:	mov	r4, r1
   17e94:	bl	19834 <__assert_fail@plt+0x8510>
   17e98:	cmp	r0, #0
   17e9c:	beq	17eb0 <__assert_fail@plt+0x6b8c>
   17ea0:	mov	r1, r5
   17ea4:	mov	r2, r4
   17ea8:	pop	{r4, r5, fp, lr}
   17eac:	b	110e4 <memcpy@plt>
   17eb0:	bl	17f5c <__assert_fail@plt+0x6c38>
   17eb4:	push	{r4, r5, fp, lr}
   17eb8:	add	fp, sp, #8
   17ebc:	mov	r5, r0
   17ec0:	mov	r0, r1
   17ec4:	mov	r4, r1
   17ec8:	bl	19834 <__assert_fail@plt+0x8510>
   17ecc:	cmp	r0, #0
   17ed0:	beq	17ee4 <__assert_fail@plt+0x6bc0>
   17ed4:	mov	r1, r5
   17ed8:	mov	r2, r4
   17edc:	pop	{r4, r5, fp, lr}
   17ee0:	b	110e4 <memcpy@plt>
   17ee4:	bl	17f5c <__assert_fail@plt+0x6c38>
   17ee8:	push	{r4, r5, fp, lr}
   17eec:	add	fp, sp, #8
   17ef0:	mov	r5, r0
   17ef4:	add	r0, r1, #1
   17ef8:	mov	r4, r1
   17efc:	bl	19834 <__assert_fail@plt+0x8510>
   17f00:	cmp	r0, #0
   17f04:	beq	17f20 <__assert_fail@plt+0x6bfc>
   17f08:	mov	r1, #0
   17f0c:	mov	r2, r4
   17f10:	strb	r1, [r0, r4]
   17f14:	mov	r1, r5
   17f18:	pop	{r4, r5, fp, lr}
   17f1c:	b	110e4 <memcpy@plt>
   17f20:	bl	17f5c <__assert_fail@plt+0x6c38>
   17f24:	push	{r4, r5, fp, lr}
   17f28:	add	fp, sp, #8
   17f2c:	mov	r4, r0
   17f30:	bl	111f8 <strlen@plt>
   17f34:	add	r5, r0, #1
   17f38:	mov	r0, r5
   17f3c:	bl	19834 <__assert_fail@plt+0x8510>
   17f40:	cmp	r0, #0
   17f44:	beq	17f58 <__assert_fail@plt+0x6c34>
   17f48:	mov	r1, r4
   17f4c:	mov	r2, r5
   17f50:	pop	{r4, r5, fp, lr}
   17f54:	b	110e4 <memcpy@plt>
   17f58:	bl	17f5c <__assert_fail@plt+0x6c38>
   17f5c:	push	{fp, lr}
   17f60:	mov	fp, sp
   17f64:	movw	r0, #53552	; 0xd130
   17f68:	movw	r1, #50612	; 0xc5b4
   17f6c:	mov	r2, #5
   17f70:	movt	r0, #2
   17f74:	movt	r1, #1
   17f78:	ldr	r4, [r0]
   17f7c:	mov	r0, #0
   17f80:	bl	11108 <dcgettext@plt>
   17f84:	movw	r2, #49561	; 0xc199
   17f88:	mov	r3, r0
   17f8c:	mov	r0, r4
   17f90:	mov	r1, #0
   17f94:	movt	r2, #1
   17f98:	bl	1118c <error@plt>
   17f9c:	bl	112f4 <abort@plt>
   17fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa4:	add	fp, sp, #28
   17fa8:	sub	sp, sp, #12
   17fac:	cmp	r2, #37	; 0x25
   17fb0:	bcs	18b0c <__assert_fail@plt+0x77e8>
   17fb4:	ldr	r8, [fp, #8]
   17fb8:	mov	r9, r3
   17fbc:	mov	r7, r2
   17fc0:	mov	r4, r1
   17fc4:	mov	r5, r0
   17fc8:	bl	11210 <__errno_location@plt>
   17fcc:	cmp	r4, #0
   17fd0:	add	sl, sp, #8
   17fd4:	mov	r6, r0
   17fd8:	mov	r0, #0
   17fdc:	mov	r2, r7
   17fe0:	movne	sl, r4
   17fe4:	str	r0, [r6]
   17fe8:	mov	r0, r5
   17fec:	mov	r1, sl
   17ff0:	bl	1109c <strtol@plt>
   17ff4:	ldr	r4, [sl]
   17ff8:	str	r9, [sp, #4]
   17ffc:	cmp	r4, r5
   18000:	beq	1803c <__assert_fail@plt+0x6d18>
   18004:	mov	r7, r0
   18008:	ldr	r0, [r6]
   1800c:	cmp	r0, #0
   18010:	beq	181a4 <__assert_fail@plt+0x6e80>
   18014:	mov	r9, #4
   18018:	cmp	r0, #34	; 0x22
   1801c:	bne	18368 <__assert_fail@plt+0x7044>
   18020:	mov	r9, #1
   18024:	cmp	r8, #0
   18028:	beq	18ae0 <__assert_fail@plt+0x77bc>
   1802c:	ldrb	r5, [r4]
   18030:	cmp	r5, #0
   18034:	bne	18078 <__assert_fail@plt+0x6d54>
   18038:	b	18ae0 <__assert_fail@plt+0x77bc>
   1803c:	mov	r9, #4
   18040:	cmp	r8, #0
   18044:	beq	18368 <__assert_fail@plt+0x7044>
   18048:	ldrb	r1, [r5]
   1804c:	cmp	r1, #0
   18050:	beq	18368 <__assert_fail@plt+0x7044>
   18054:	mov	r0, r8
   18058:	bl	11204 <strchr@plt>
   1805c:	cmp	r0, #0
   18060:	beq	18368 <__assert_fail@plt+0x7044>
   18064:	mov	r7, #1
   18068:	mov	r9, #0
   1806c:	ldrb	r5, [r4]
   18070:	cmp	r5, #0
   18074:	beq	18ae0 <__assert_fail@plt+0x77bc>
   18078:	mov	r0, r8
   1807c:	mov	r1, r5
   18080:	bl	11204 <strchr@plt>
   18084:	cmp	r0, #0
   18088:	beq	1835c <__assert_fail@plt+0x7038>
   1808c:	sub	r0, r5, #69	; 0x45
   18090:	mov	ip, #1
   18094:	mov	r6, #1024	; 0x400
   18098:	cmp	r0, #47	; 0x2f
   1809c:	bhi	181b8 <__assert_fail@plt+0x6e94>
   180a0:	add	r1, pc, #0
   180a4:	ldr	pc, [r1, r0, lsl #2]
   180a8:	andeq	r8, r1, r8, ror #2
   180ac:			; <UNDEFINED> instruction: 0x000181b8
   180b0:	andeq	r8, r1, r8, ror #2
   180b4:			; <UNDEFINED> instruction: 0x000181b8
   180b8:			; <UNDEFINED> instruction: 0x000181b8
   180bc:			; <UNDEFINED> instruction: 0x000181b8
   180c0:	andeq	r8, r1, r8, ror #2
   180c4:			; <UNDEFINED> instruction: 0x000181b8
   180c8:	andeq	r8, r1, r8, ror #2
   180cc:			; <UNDEFINED> instruction: 0x000181b8
   180d0:			; <UNDEFINED> instruction: 0x000181b8
   180d4:	andeq	r8, r1, r8, ror #2
   180d8:			; <UNDEFINED> instruction: 0x000181b8
   180dc:			; <UNDEFINED> instruction: 0x000181b8
   180e0:			; <UNDEFINED> instruction: 0x000181b8
   180e4:	andeq	r8, r1, r8, ror #2
   180e8:			; <UNDEFINED> instruction: 0x000181b8
   180ec:			; <UNDEFINED> instruction: 0x000181b8
   180f0:			; <UNDEFINED> instruction: 0x000181b8
   180f4:			; <UNDEFINED> instruction: 0x000181b8
   180f8:	andeq	r8, r1, r8, ror #2
   180fc:	andeq	r8, r1, r8, ror #2
   18100:			; <UNDEFINED> instruction: 0x000181b8
   18104:			; <UNDEFINED> instruction: 0x000181b8
   18108:			; <UNDEFINED> instruction: 0x000181b8
   1810c:			; <UNDEFINED> instruction: 0x000181b8
   18110:			; <UNDEFINED> instruction: 0x000181b8
   18114:			; <UNDEFINED> instruction: 0x000181b8
   18118:			; <UNDEFINED> instruction: 0x000181b8
   1811c:			; <UNDEFINED> instruction: 0x000181b8
   18120:			; <UNDEFINED> instruction: 0x000181b8
   18124:			; <UNDEFINED> instruction: 0x000181b8
   18128:			; <UNDEFINED> instruction: 0x000181b8
   1812c:			; <UNDEFINED> instruction: 0x000181b8
   18130:	andeq	r8, r1, r8, ror #2
   18134:			; <UNDEFINED> instruction: 0x000181b8
   18138:			; <UNDEFINED> instruction: 0x000181b8
   1813c:			; <UNDEFINED> instruction: 0x000181b8
   18140:	andeq	r8, r1, r8, ror #2
   18144:			; <UNDEFINED> instruction: 0x000181b8
   18148:	andeq	r8, r1, r8, ror #2
   1814c:			; <UNDEFINED> instruction: 0x000181b8
   18150:			; <UNDEFINED> instruction: 0x000181b8
   18154:			; <UNDEFINED> instruction: 0x000181b8
   18158:			; <UNDEFINED> instruction: 0x000181b8
   1815c:			; <UNDEFINED> instruction: 0x000181b8
   18160:			; <UNDEFINED> instruction: 0x000181b8
   18164:	andeq	r8, r1, r8, ror #2
   18168:	mov	r0, r8
   1816c:	mov	r1, #48	; 0x30
   18170:	bl	11204 <strchr@plt>
   18174:	cmp	r0, #0
   18178:	beq	181b4 <__assert_fail@plt+0x6e90>
   1817c:	ldrb	r0, [r4, #1]
   18180:	cmp	r0, #66	; 0x42
   18184:	cmpne	r0, #68	; 0x44
   18188:	bne	182c8 <__assert_fail@plt+0x6fa4>
   1818c:	mov	ip, #2
   18190:	mov	r6, #1000	; 0x3e8
   18194:	sub	r1, r5, #66	; 0x42
   18198:	cmp	r1, #53	; 0x35
   1819c:	bls	181c4 <__assert_fail@plt+0x6ea0>
   181a0:	b	1835c <__assert_fail@plt+0x7038>
   181a4:	mov	r9, r0
   181a8:	cmp	r8, #0
   181ac:	bne	1802c <__assert_fail@plt+0x6d08>
   181b0:	b	18ae0 <__assert_fail@plt+0x77bc>
   181b4:	mov	ip, #1
   181b8:	sub	r1, r5, #66	; 0x42
   181bc:	cmp	r1, #53	; 0x35
   181c0:	bhi	1835c <__assert_fail@plt+0x7038>
   181c4:	add	r2, pc, #4
   181c8:	mov	r0, #0
   181cc:	ldr	pc, [r2, r1, lsl #2]
   181d0:	muleq	r1, r4, r3
   181d4:	andeq	r8, r1, ip, asr r3
   181d8:	andeq	r8, r1, ip, asr r3
   181dc:	andeq	r8, r1, r8, lsr #7
   181e0:	andeq	r8, r1, ip, asr r3
   181e4:	andeq	r8, r1, r8, lsr #5
   181e8:	andeq	r8, r1, ip, asr r3
   181ec:	andeq	r8, r1, ip, asr r3
   181f0:	andeq	r8, r1, ip, asr r3
   181f4:	strdeq	r8, [r1], -r0
   181f8:	andeq	r8, r1, ip, asr r3
   181fc:	andeq	r8, r1, ip, lsl #6
   18200:	andeq	r8, r1, ip, asr r3
   18204:	andeq	r8, r1, ip, asr r3
   18208:	andeq	r8, r1, r8, asr #7
   1820c:	andeq	r8, r1, ip, asr r3
   18210:	andeq	r8, r1, ip, asr r3
   18214:	andeq	r8, r1, ip, asr r3
   18218:	andeq	r8, r1, ip, lsr #6
   1821c:	andeq	r8, r1, ip, asr r3
   18220:	andeq	r8, r1, ip, asr r3
   18224:	andeq	r8, r1, ip, asr r3
   18228:	andeq	r8, r1, ip, asr r3
   1822c:	andeq	r8, r1, r8, ror #7
   18230:	andeq	r8, r1, r4, ror r3
   18234:	andeq	r8, r1, ip, asr r3
   18238:	andeq	r8, r1, ip, asr r3
   1823c:	andeq	r8, r1, ip, asr r3
   18240:	andeq	r8, r1, ip, asr r3
   18244:	andeq	r8, r1, ip, asr r3
   18248:	andeq	r8, r1, ip, asr r3
   1824c:	andeq	r8, r1, ip, asr r3
   18250:	andeq	r8, r1, r8, lsl #8
   18254:	andeq	r8, r1, r8, asr #21
   18258:	andeq	r8, r1, ip, asr r3
   1825c:	andeq	r8, r1, ip, asr r3
   18260:	andeq	r8, r1, ip, asr r3
   18264:	andeq	r8, r1, r8, lsr #5
   18268:	andeq	r8, r1, ip, asr r3
   1826c:	andeq	r8, r1, ip, asr r3
   18270:	andeq	r8, r1, ip, asr r3
   18274:	strdeq	r8, [r1], -r0
   18278:	andeq	r8, r1, ip, asr r3
   1827c:	andeq	r8, r1, ip, lsl #6
   18280:	andeq	r8, r1, ip, asr r3
   18284:	andeq	r8, r1, ip, asr r3
   18288:	andeq	r8, r1, ip, asr r3
   1828c:	andeq	r8, r1, ip, asr r3
   18290:	andeq	r8, r1, ip, asr r3
   18294:	andeq	r8, r1, ip, asr r3
   18298:	andeq	r8, r1, ip, lsr #6
   1829c:	andeq	r8, r1, ip, asr r3
   182a0:	andeq	r8, r1, ip, asr r3
   182a4:	andeq	r8, r1, r8, lsr #8
   182a8:	cmn	r7, #1
   182ac:	ble	1843c <__assert_fail@plt+0x7118>
   182b0:	mvn	r2, #-2147483648	; 0x80000000
   182b4:	mov	r3, #1
   182b8:	udiv	r0, r2, r6
   182bc:	cmp	r0, r7
   182c0:	bge	18454 <__assert_fail@plt+0x7130>
   182c4:	b	18514 <__assert_fail@plt+0x71f0>
   182c8:	cmp	r0, #105	; 0x69
   182cc:	bne	1834c <__assert_fail@plt+0x7028>
   182d0:	ldrb	r0, [r4, #2]
   182d4:	mov	ip, #1
   182d8:	cmp	r0, #66	; 0x42
   182dc:	movweq	ip, #3
   182e0:	sub	r1, r5, #66	; 0x42
   182e4:	cmp	r1, #53	; 0x35
   182e8:	bls	181c4 <__assert_fail@plt+0x6ea0>
   182ec:	b	1835c <__assert_fail@plt+0x7038>
   182f0:	cmn	r7, #1
   182f4:	ble	18468 <__assert_fail@plt+0x7144>
   182f8:	mvn	r1, #-2147483648	; 0x80000000
   182fc:	udiv	r1, r1, r6
   18300:	cmp	r1, r7
   18304:	bge	1847c <__assert_fail@plt+0x7158>
   18308:	b	186e4 <__assert_fail@plt+0x73c0>
   1830c:	cmn	r7, #1
   18310:	ble	18484 <__assert_fail@plt+0x7160>
   18314:	mvn	r1, #-2147483648	; 0x80000000
   18318:	mov	r0, #1
   1831c:	udiv	r2, r1, r6
   18320:	cmp	r2, r7
   18324:	bge	1849c <__assert_fail@plt+0x7178>
   18328:	b	18550 <__assert_fail@plt+0x722c>
   1832c:	cmn	r7, #1
   18330:	ble	184b0 <__assert_fail@plt+0x718c>
   18334:	mvn	r0, #-2147483648	; 0x80000000
   18338:	mov	r1, #1
   1833c:	udiv	r2, r0, r6
   18340:	cmp	r2, r7
   18344:	bge	184c8 <__assert_fail@plt+0x71a4>
   18348:	b	184d8 <__assert_fail@plt+0x71b4>
   1834c:	mov	ip, #1
   18350:	sub	r1, r5, #66	; 0x42
   18354:	cmp	r1, #53	; 0x35
   18358:	bls	181c4 <__assert_fail@plt+0x6ea0>
   1835c:	ldr	r0, [sp, #4]
   18360:	orr	r9, r9, #2
   18364:	str	r7, [r0]
   18368:	mov	r0, r9
   1836c:	sub	sp, fp, #28
   18370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18374:	cmp	r7, #0
   18378:	bmi	18588 <__assert_fail@plt+0x7264>
   1837c:	mvn	r0, #-2147483648	; 0x80000000
   18380:	mov	r3, #1
   18384:	udiv	r1, r0, r6
   18388:	cmp	r1, r7
   1838c:	bge	185a4 <__assert_fail@plt+0x7280>
   18390:	b	185b4 <__assert_fail@plt+0x7290>
   18394:	cmn	r7, #1
   18398:	ble	185cc <__assert_fail@plt+0x72a8>
   1839c:	cmp	r7, #2097152	; 0x200000
   183a0:	blt	185e0 <__assert_fail@plt+0x72bc>
   183a4:	b	186e4 <__assert_fail@plt+0x73c0>
   183a8:	cmp	r7, #0
   183ac:	bmi	185e8 <__assert_fail@plt+0x72c4>
   183b0:	mvn	r0, #-2147483648	; 0x80000000
   183b4:	mov	r3, #1
   183b8:	udiv	r1, r0, r6
   183bc:	cmp	r1, r7
   183c0:	bge	18604 <__assert_fail@plt+0x72e0>
   183c4:	b	18614 <__assert_fail@plt+0x72f0>
   183c8:	cmp	r7, #0
   183cc:	bmi	1862c <__assert_fail@plt+0x7308>
   183d0:	mvn	r0, #-2147483648	; 0x80000000
   183d4:	mov	r3, #1
   183d8:	udiv	r1, r0, r6
   183dc:	cmp	r1, r7
   183e0:	bge	18648 <__assert_fail@plt+0x7324>
   183e4:	b	18658 <__assert_fail@plt+0x7334>
   183e8:	cmp	r7, #0
   183ec:	bmi	18670 <__assert_fail@plt+0x734c>
   183f0:	mvn	r0, #-2147483648	; 0x80000000
   183f4:	mov	r3, #1
   183f8:	udiv	r1, r0, r6
   183fc:	cmp	r1, r7
   18400:	bge	1868c <__assert_fail@plt+0x7368>
   18404:	b	1869c <__assert_fail@plt+0x7378>
   18408:	cmn	r7, #1
   1840c:	ble	186b4 <__assert_fail@plt+0x7390>
   18410:	movw	r1, #65535	; 0xffff
   18414:	movt	r1, #31
   18418:	orr	r1, r1, #2097152	; 0x200000
   1841c:	cmp	r7, r1
   18420:	ble	186c8 <__assert_fail@plt+0x73a4>
   18424:	b	186e4 <__assert_fail@plt+0x73c0>
   18428:	cmn	r7, #1
   1842c:	ble	186d0 <__assert_fail@plt+0x73ac>
   18430:	cmp	r7, #1073741824	; 0x40000000
   18434:	bge	186e4 <__assert_fail@plt+0x73c0>
   18438:	b	186fc <__assert_fail@plt+0x73d8>
   1843c:	beq	18454 <__assert_fail@plt+0x7130>
   18440:	mov	r2, #-2147483648	; 0x80000000
   18444:	mov	r3, #1
   18448:	sdiv	r0, r2, r7
   1844c:	cmp	r0, r6
   18450:	blt	1852c <__assert_fail@plt+0x7208>
   18454:	mul	r2, r7, r6
   18458:	mov	r3, #0
   1845c:	cmp	r2, #0
   18460:	bpl	18514 <__assert_fail@plt+0x71f0>
   18464:	b	1852c <__assert_fail@plt+0x7208>
   18468:	beq	1847c <__assert_fail@plt+0x7158>
   1846c:	mov	r1, #-2147483648	; 0x80000000
   18470:	sdiv	r1, r1, r7
   18474:	cmp	r1, r6
   18478:	blt	186e4 <__assert_fail@plt+0x73c0>
   1847c:	mul	r7, r7, r6
   18480:	b	18ac8 <__assert_fail@plt+0x77a4>
   18484:	beq	1849c <__assert_fail@plt+0x7178>
   18488:	mov	r1, #-2147483648	; 0x80000000
   1848c:	mov	r0, #1
   18490:	sdiv	r2, r1, r7
   18494:	cmp	r2, r6
   18498:	blt	18568 <__assert_fail@plt+0x7244>
   1849c:	mul	r1, r7, r6
   184a0:	mov	r0, #0
   184a4:	cmp	r1, #0
   184a8:	bpl	18550 <__assert_fail@plt+0x722c>
   184ac:	b	18568 <__assert_fail@plt+0x7244>
   184b0:	beq	184c8 <__assert_fail@plt+0x71a4>
   184b4:	mov	r0, #-2147483648	; 0x80000000
   184b8:	mov	r1, #1
   184bc:	sdiv	r2, r0, r7
   184c0:	cmp	r2, r6
   184c4:	blt	184f0 <__assert_fail@plt+0x71cc>
   184c8:	mul	r0, r7, r6
   184cc:	mov	r1, #0
   184d0:	cmp	r0, #0
   184d4:	bmi	184f0 <__assert_fail@plt+0x71cc>
   184d8:	mvn	r2, #-2147483648	; 0x80000000
   184dc:	mov	r3, #1
   184e0:	udiv	r7, r2, r6
   184e4:	cmp	r7, r0
   184e8:	blt	18514 <__assert_fail@plt+0x71f0>
   184ec:	b	18504 <__assert_fail@plt+0x71e0>
   184f0:	mov	r2, #-2147483648	; 0x80000000
   184f4:	mov	r3, #1
   184f8:	sdiv	r7, r2, r0
   184fc:	cmp	r7, r6
   18500:	blt	1852c <__assert_fail@plt+0x7208>
   18504:	mul	r2, r0, r6
   18508:	mov	r3, r1
   1850c:	cmp	r2, #0
   18510:	bmi	1852c <__assert_fail@plt+0x7208>
   18514:	mvn	r1, #-2147483648	; 0x80000000
   18518:	mov	r0, #1
   1851c:	udiv	r7, r1, r6
   18520:	cmp	r7, r2
   18524:	blt	18550 <__assert_fail@plt+0x722c>
   18528:	b	18540 <__assert_fail@plt+0x721c>
   1852c:	mov	r1, #-2147483648	; 0x80000000
   18530:	mov	r0, #1
   18534:	sdiv	r7, r1, r2
   18538:	cmp	r7, r6
   1853c:	blt	18568 <__assert_fail@plt+0x7244>
   18540:	mul	r1, r2, r6
   18544:	mov	r0, r3
   18548:	cmp	r1, #0
   1854c:	bmi	18568 <__assert_fail@plt+0x7244>
   18550:	mvn	r7, #-2147483648	; 0x80000000
   18554:	mov	r2, #1
   18558:	udiv	r3, r7, r6
   1855c:	cmp	r3, r1
   18560:	blt	18ac4 <__assert_fail@plt+0x77a0>
   18564:	b	1857c <__assert_fail@plt+0x7258>
   18568:	mov	r7, #-2147483648	; 0x80000000
   1856c:	mov	r2, #1
   18570:	sdiv	r3, r7, r1
   18574:	cmp	r3, r6
   18578:	blt	18ac4 <__assert_fail@plt+0x77a0>
   1857c:	mov	r2, #0
   18580:	mul	r7, r1, r6
   18584:	b	18ac4 <__assert_fail@plt+0x77a0>
   18588:	cmn	r7, #1
   1858c:	beq	185a4 <__assert_fail@plt+0x7280>
   18590:	mov	r0, #-2147483648	; 0x80000000
   18594:	mov	r3, #1
   18598:	sdiv	r1, r0, r7
   1859c:	cmp	r1, r6
   185a0:	blt	18704 <__assert_fail@plt+0x73e0>
   185a4:	mul	r0, r7, r6
   185a8:	mov	r3, #0
   185ac:	cmp	r0, #0
   185b0:	bmi	18704 <__assert_fail@plt+0x73e0>
   185b4:	mvn	r1, #-2147483648	; 0x80000000
   185b8:	mov	r2, #1
   185bc:	udiv	r7, r1, r6
   185c0:	cmp	r7, r0
   185c4:	bge	18718 <__assert_fail@plt+0x73f4>
   185c8:	b	18728 <__assert_fail@plt+0x7404>
   185cc:	beq	185e0 <__assert_fail@plt+0x72bc>
   185d0:	mov	r1, #-2147483648	; 0x80000000
   185d4:	sdiv	r1, r1, r7
   185d8:	cmp	r1, #1024	; 0x400
   185dc:	blt	186e4 <__assert_fail@plt+0x73c0>
   185e0:	lsl	r7, r7, #10
   185e4:	b	18ac8 <__assert_fail@plt+0x77a4>
   185e8:	cmn	r7, #1
   185ec:	beq	18604 <__assert_fail@plt+0x72e0>
   185f0:	mov	r0, #-2147483648	; 0x80000000
   185f4:	mov	r3, #1
   185f8:	sdiv	r1, r0, r7
   185fc:	cmp	r1, r6
   18600:	blt	187e4 <__assert_fail@plt+0x74c0>
   18604:	mul	r0, r7, r6
   18608:	mov	r3, #0
   1860c:	cmp	r0, #0
   18610:	bmi	187e4 <__assert_fail@plt+0x74c0>
   18614:	mvn	r1, #-2147483648	; 0x80000000
   18618:	mov	r2, #1
   1861c:	udiv	r7, r1, r6
   18620:	cmp	r7, r0
   18624:	bge	187f8 <__assert_fail@plt+0x74d4>
   18628:	b	18808 <__assert_fail@plt+0x74e4>
   1862c:	cmn	r7, #1
   18630:	beq	18648 <__assert_fail@plt+0x7324>
   18634:	mov	r0, #-2147483648	; 0x80000000
   18638:	mov	r3, #1
   1863c:	sdiv	r1, r0, r7
   18640:	cmp	r1, r6
   18644:	blt	188c4 <__assert_fail@plt+0x75a0>
   18648:	mul	r0, r7, r6
   1864c:	mov	r3, #0
   18650:	cmp	r0, #0
   18654:	bmi	188c4 <__assert_fail@plt+0x75a0>
   18658:	mvn	r1, #-2147483648	; 0x80000000
   1865c:	mov	r2, #1
   18660:	udiv	r7, r1, r6
   18664:	cmp	r7, r0
   18668:	bge	188d8 <__assert_fail@plt+0x75b4>
   1866c:	b	188e8 <__assert_fail@plt+0x75c4>
   18670:	cmn	r7, #1
   18674:	beq	1868c <__assert_fail@plt+0x7368>
   18678:	mov	r0, #-2147483648	; 0x80000000
   1867c:	mov	r3, #1
   18680:	sdiv	r1, r0, r7
   18684:	cmp	r1, r6
   18688:	blt	18928 <__assert_fail@plt+0x7604>
   1868c:	mul	r0, r7, r6
   18690:	mov	r3, #0
   18694:	cmp	r0, #0
   18698:	bmi	18928 <__assert_fail@plt+0x7604>
   1869c:	mvn	r1, #-2147483648	; 0x80000000
   186a0:	mov	r2, #1
   186a4:	udiv	r7, r1, r6
   186a8:	cmp	r7, r0
   186ac:	bge	1893c <__assert_fail@plt+0x7618>
   186b0:	b	1894c <__assert_fail@plt+0x7628>
   186b4:	beq	186c8 <__assert_fail@plt+0x73a4>
   186b8:	mov	r1, #-2147483648	; 0x80000000
   186bc:	sdiv	r1, r1, r7
   186c0:	cmp	r1, #512	; 0x200
   186c4:	blt	186e4 <__assert_fail@plt+0x73c0>
   186c8:	lsl	r7, r7, #9
   186cc:	b	18ac8 <__assert_fail@plt+0x77a4>
   186d0:	beq	186fc <__assert_fail@plt+0x73d8>
   186d4:	mov	r1, #-2147483648	; 0x80000000
   186d8:	sdiv	r1, r1, r7
   186dc:	cmp	r1, #2
   186e0:	bge	186fc <__assert_fail@plt+0x73d8>
   186e4:	cmp	r7, #0
   186e8:	mvn	r1, #-2147483648	; 0x80000000
   186ec:	mov	r0, #1
   186f0:	movmi	r1, #-2147483648	; 0x80000000
   186f4:	mov	r7, r1
   186f8:	b	18ac8 <__assert_fail@plt+0x77a4>
   186fc:	lsl	r7, r7, #1
   18700:	b	18ac8 <__assert_fail@plt+0x77a4>
   18704:	mov	r1, #-2147483648	; 0x80000000
   18708:	mov	r2, #1
   1870c:	sdiv	r7, r1, r0
   18710:	cmp	r7, r6
   18714:	blt	18740 <__assert_fail@plt+0x741c>
   18718:	mul	r1, r0, r6
   1871c:	mov	r2, r3
   18720:	cmp	r1, #0
   18724:	bmi	18740 <__assert_fail@plt+0x741c>
   18728:	mvn	r3, #-2147483648	; 0x80000000
   1872c:	mov	r0, #1
   18730:	udiv	r7, r3, r6
   18734:	cmp	r7, r1
   18738:	bge	18754 <__assert_fail@plt+0x7430>
   1873c:	b	18764 <__assert_fail@plt+0x7440>
   18740:	mov	r3, #-2147483648	; 0x80000000
   18744:	mov	r0, #1
   18748:	sdiv	r7, r3, r1
   1874c:	cmp	r7, r6
   18750:	blt	1878c <__assert_fail@plt+0x7468>
   18754:	mul	r3, r1, r6
   18758:	mov	r0, r2
   1875c:	cmp	r3, #0
   18760:	bmi	1878c <__assert_fail@plt+0x7468>
   18764:	mvn	r1, #-2147483648	; 0x80000000
   18768:	udiv	r2, r1, r6
   1876c:	cmp	r2, r3
   18770:	bge	187a4 <__assert_fail@plt+0x7480>
   18774:	mov	r0, #1
   18778:	mvn	r2, #-2147483648	; 0x80000000
   1877c:	udiv	r3, r2, r6
   18780:	cmp	r3, r1
   18784:	blt	18854 <__assert_fail@plt+0x7530>
   18788:	b	187d4 <__assert_fail@plt+0x74b0>
   1878c:	mov	r1, #-2147483648	; 0x80000000
   18790:	sdiv	r2, r1, r3
   18794:	cmp	r2, r6
   18798:	bge	187a4 <__assert_fail@plt+0x7480>
   1879c:	mov	r0, #1
   187a0:	b	187c4 <__assert_fail@plt+0x74a0>
   187a4:	mul	r1, r3, r6
   187a8:	cmp	r1, #0
   187ac:	bmi	187c4 <__assert_fail@plt+0x74a0>
   187b0:	mvn	r2, #-2147483648	; 0x80000000
   187b4:	udiv	r3, r2, r6
   187b8:	cmp	r3, r1
   187bc:	bge	187d4 <__assert_fail@plt+0x74b0>
   187c0:	b	18854 <__assert_fail@plt+0x7530>
   187c4:	mov	r2, #-2147483648	; 0x80000000
   187c8:	sdiv	r3, r2, r1
   187cc:	cmp	r3, r6
   187d0:	blt	1887c <__assert_fail@plt+0x7558>
   187d4:	mul	r2, r1, r6
   187d8:	cmp	r2, #0
   187dc:	bpl	18890 <__assert_fail@plt+0x756c>
   187e0:	b	188a4 <__assert_fail@plt+0x7580>
   187e4:	mov	r1, #-2147483648	; 0x80000000
   187e8:	mov	r2, #1
   187ec:	sdiv	r7, r1, r0
   187f0:	cmp	r7, r6
   187f4:	blt	18820 <__assert_fail@plt+0x74fc>
   187f8:	mul	r1, r0, r6
   187fc:	mov	r2, r3
   18800:	cmp	r1, #0
   18804:	bmi	18820 <__assert_fail@plt+0x74fc>
   18808:	mvn	r3, #-2147483648	; 0x80000000
   1880c:	mov	r0, #1
   18810:	udiv	r7, r3, r6
   18814:	cmp	r7, r1
   18818:	bge	18834 <__assert_fail@plt+0x7510>
   1881c:	b	18844 <__assert_fail@plt+0x7520>
   18820:	mov	r3, #-2147483648	; 0x80000000
   18824:	mov	r0, #1
   18828:	sdiv	r7, r3, r1
   1882c:	cmp	r7, r6
   18830:	blt	1886c <__assert_fail@plt+0x7548>
   18834:	mul	r3, r1, r6
   18838:	mov	r0, r2
   1883c:	cmp	r3, #0
   18840:	bmi	1886c <__assert_fail@plt+0x7548>
   18844:	mvn	r2, #-2147483648	; 0x80000000
   18848:	udiv	r1, r2, r6
   1884c:	cmp	r1, r3
   18850:	bge	18884 <__assert_fail@plt+0x7560>
   18854:	mov	r0, #1
   18858:	mvn	r1, #-2147483648	; 0x80000000
   1885c:	udiv	r3, r1, r6
   18860:	cmp	r3, r2
   18864:	bge	188b4 <__assert_fail@plt+0x7590>
   18868:	b	18a7c <__assert_fail@plt+0x7758>
   1886c:	mov	r2, #-2147483648	; 0x80000000
   18870:	sdiv	r1, r2, r3
   18874:	cmp	r1, r6
   18878:	bge	18884 <__assert_fail@plt+0x7560>
   1887c:	mov	r0, #1
   18880:	b	188a4 <__assert_fail@plt+0x7580>
   18884:	mul	r2, r3, r6
   18888:	cmp	r2, #0
   1888c:	bmi	188a4 <__assert_fail@plt+0x7580>
   18890:	mvn	r1, #-2147483648	; 0x80000000
   18894:	udiv	r3, r1, r6
   18898:	cmp	r3, r2
   1889c:	blt	18a7c <__assert_fail@plt+0x7758>
   188a0:	b	188b4 <__assert_fail@plt+0x7590>
   188a4:	mov	r1, #-2147483648	; 0x80000000
   188a8:	sdiv	r3, r1, r2
   188ac:	cmp	r3, r6
   188b0:	blt	18a94 <__assert_fail@plt+0x7770>
   188b4:	mul	r1, r2, r6
   188b8:	cmp	r1, #0
   188bc:	bpl	18aa8 <__assert_fail@plt+0x7784>
   188c0:	b	18af4 <__assert_fail@plt+0x77d0>
   188c4:	mov	r1, #-2147483648	; 0x80000000
   188c8:	mov	r2, #1
   188cc:	sdiv	r7, r1, r0
   188d0:	cmp	r7, r6
   188d4:	blt	18900 <__assert_fail@plt+0x75dc>
   188d8:	mul	r1, r0, r6
   188dc:	mov	r2, r3
   188e0:	cmp	r1, #0
   188e4:	bmi	18900 <__assert_fail@plt+0x75dc>
   188e8:	mvn	r3, #-2147483648	; 0x80000000
   188ec:	mov	r0, #1
   188f0:	udiv	r7, r3, r6
   188f4:	cmp	r7, r1
   188f8:	bge	18914 <__assert_fail@plt+0x75f0>
   188fc:	b	18a6c <__assert_fail@plt+0x7748>
   18900:	mov	r3, #-2147483648	; 0x80000000
   18904:	mov	r0, #1
   18908:	sdiv	r7, r3, r1
   1890c:	cmp	r7, r6
   18910:	blt	18a84 <__assert_fail@plt+0x7760>
   18914:	mul	r3, r1, r6
   18918:	mov	r0, r2
   1891c:	cmp	r3, #0
   18920:	bpl	18a6c <__assert_fail@plt+0x7748>
   18924:	b	18a84 <__assert_fail@plt+0x7760>
   18928:	mov	r1, #-2147483648	; 0x80000000
   1892c:	mov	r2, #1
   18930:	sdiv	r7, r1, r0
   18934:	cmp	r7, r6
   18938:	blt	18964 <__assert_fail@plt+0x7640>
   1893c:	mul	r1, r0, r6
   18940:	mov	r2, r3
   18944:	cmp	r1, #0
   18948:	bmi	18964 <__assert_fail@plt+0x7640>
   1894c:	mvn	r3, #-2147483648	; 0x80000000
   18950:	mov	r0, #1
   18954:	udiv	r7, r3, r6
   18958:	cmp	r7, r1
   1895c:	bge	18978 <__assert_fail@plt+0x7654>
   18960:	b	18988 <__assert_fail@plt+0x7664>
   18964:	mov	r3, #-2147483648	; 0x80000000
   18968:	mov	r0, #1
   1896c:	sdiv	r7, r3, r1
   18970:	cmp	r7, r6
   18974:	blt	189b0 <__assert_fail@plt+0x768c>
   18978:	mul	r3, r1, r6
   1897c:	mov	r0, r2
   18980:	cmp	r3, #0
   18984:	bmi	189b0 <__assert_fail@plt+0x768c>
   18988:	mvn	r1, #-2147483648	; 0x80000000
   1898c:	udiv	r2, r1, r6
   18990:	cmp	r2, r3
   18994:	bge	189c8 <__assert_fail@plt+0x76a4>
   18998:	mov	r0, #1
   1899c:	mvn	r2, #-2147483648	; 0x80000000
   189a0:	udiv	r3, r2, r6
   189a4:	cmp	r3, r1
   189a8:	blt	189e4 <__assert_fail@plt+0x76c0>
   189ac:	b	18a14 <__assert_fail@plt+0x76f0>
   189b0:	mov	r1, #-2147483648	; 0x80000000
   189b4:	sdiv	r2, r1, r3
   189b8:	cmp	r2, r6
   189bc:	bge	189c8 <__assert_fail@plt+0x76a4>
   189c0:	mov	r0, #1
   189c4:	b	189fc <__assert_fail@plt+0x76d8>
   189c8:	mul	r1, r3, r6
   189cc:	cmp	r1, #0
   189d0:	bmi	189fc <__assert_fail@plt+0x76d8>
   189d4:	mvn	r2, #-2147483648	; 0x80000000
   189d8:	udiv	r3, r2, r6
   189dc:	cmp	r3, r1
   189e0:	bge	18a14 <__assert_fail@plt+0x76f0>
   189e4:	mov	r0, #1
   189e8:	mvn	r3, #-2147483648	; 0x80000000
   189ec:	udiv	r1, r3, r6
   189f0:	cmp	r1, r2
   189f4:	bge	18a60 <__assert_fail@plt+0x773c>
   189f8:	b	18a30 <__assert_fail@plt+0x770c>
   189fc:	mov	r2, #-2147483648	; 0x80000000
   18a00:	sdiv	r3, r2, r1
   18a04:	cmp	r3, r6
   18a08:	bge	18a14 <__assert_fail@plt+0x76f0>
   18a0c:	mov	r0, #1
   18a10:	b	18a48 <__assert_fail@plt+0x7724>
   18a14:	mul	r2, r1, r6
   18a18:	cmp	r2, #0
   18a1c:	bmi	18a48 <__assert_fail@plt+0x7724>
   18a20:	mvn	r3, #-2147483648	; 0x80000000
   18a24:	udiv	r1, r3, r6
   18a28:	cmp	r1, r2
   18a2c:	bge	18a60 <__assert_fail@plt+0x773c>
   18a30:	mov	r0, #1
   18a34:	mvn	r1, #-2147483648	; 0x80000000
   18a38:	udiv	r2, r1, r6
   18a3c:	cmp	r2, r3
   18a40:	bge	18a9c <__assert_fail@plt+0x7778>
   18a44:	b	18a7c <__assert_fail@plt+0x7758>
   18a48:	mov	r3, #-2147483648	; 0x80000000
   18a4c:	sdiv	r1, r3, r2
   18a50:	cmp	r1, r6
   18a54:	bge	18a60 <__assert_fail@plt+0x773c>
   18a58:	mov	r0, #1
   18a5c:	b	18a84 <__assert_fail@plt+0x7760>
   18a60:	mul	r3, r2, r6
   18a64:	cmp	r3, #0
   18a68:	bmi	18a84 <__assert_fail@plt+0x7760>
   18a6c:	mvn	r1, #-2147483648	; 0x80000000
   18a70:	udiv	r2, r1, r6
   18a74:	cmp	r2, r3
   18a78:	bge	18a9c <__assert_fail@plt+0x7778>
   18a7c:	mov	r0, #1
   18a80:	b	18aa8 <__assert_fail@plt+0x7784>
   18a84:	mov	r1, #-2147483648	; 0x80000000
   18a88:	sdiv	r2, r1, r3
   18a8c:	cmp	r2, r6
   18a90:	bge	18a9c <__assert_fail@plt+0x7778>
   18a94:	mov	r0, #1
   18a98:	b	18af4 <__assert_fail@plt+0x77d0>
   18a9c:	mul	r1, r3, r6
   18aa0:	cmp	r1, #0
   18aa4:	bmi	18af4 <__assert_fail@plt+0x77d0>
   18aa8:	mvn	r7, #-2147483648	; 0x80000000
   18aac:	mov	r2, #1
   18ab0:	udiv	r3, r7, r6
   18ab4:	cmp	r3, r1
   18ab8:	blt	18ac4 <__assert_fail@plt+0x77a0>
   18abc:	mul	r7, r1, r6
   18ac0:	mov	r2, #0
   18ac4:	orr	r0, r2, r0
   18ac8:	add	r1, r4, ip
   18acc:	orr	r9, r0, r9
   18ad0:	str	r1, [sl]
   18ad4:	ldrb	r1, [r4, ip]
   18ad8:	cmp	r1, #0
   18adc:	orrne	r9, r9, #2
   18ae0:	ldr	r0, [sp, #4]
   18ae4:	str	r7, [r0]
   18ae8:	mov	r0, r9
   18aec:	sub	sp, fp, #28
   18af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18af4:	mov	r7, #-2147483648	; 0x80000000
   18af8:	mov	r2, #1
   18afc:	sdiv	r3, r7, r1
   18b00:	cmp	r3, r6
   18b04:	bge	18abc <__assert_fail@plt+0x7798>
   18b08:	b	18ac4 <__assert_fail@plt+0x77a0>
   18b0c:	movw	r0, #50629	; 0xc5c5
   18b10:	movw	r1, #50740	; 0xc634
   18b14:	movw	r3, #50667	; 0xc5eb
   18b18:	mov	r2, #85	; 0x55
   18b1c:	movt	r0, #1
   18b20:	movt	r1, #1
   18b24:	movt	r3, #1
   18b28:	bl	11324 <__assert_fail@plt>
   18b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b30:	add	fp, sp, #28
   18b34:	sub	sp, sp, #44	; 0x2c
   18b38:	cmp	r2, #37	; 0x25
   18b3c:	bcs	197c0 <__assert_fail@plt+0x849c>
   18b40:	ldr	sl, [fp, #8]
   18b44:	mov	r6, r2
   18b48:	mov	r7, r1
   18b4c:	mov	r4, r0
   18b50:	str	r3, [sp, #36]	; 0x24
   18b54:	bl	11210 <__errno_location@plt>
   18b58:	mov	r5, r0
   18b5c:	mov	r0, #0
   18b60:	str	r0, [r5]
   18b64:	bl	111d4 <__ctype_b_loc@plt>
   18b68:	ldr	r1, [r0]
   18b6c:	mov	r2, r4
   18b70:	ldrb	r0, [r2], #1
   18b74:	add	r3, r1, r0, lsl #1
   18b78:	ldrb	r3, [r3, #1]
   18b7c:	tst	r3, #32
   18b80:	bne	18b70 <__assert_fail@plt+0x784c>
   18b84:	cmp	r7, #0
   18b88:	sub	r9, fp, #32
   18b8c:	mov	r8, #4
   18b90:	movne	r9, r7
   18b94:	cmp	r0, #45	; 0x2d
   18b98:	beq	18f58 <__assert_fail@plt+0x7c34>
   18b9c:	mov	r0, r4
   18ba0:	mov	r1, r9
   18ba4:	mov	r2, r6
   18ba8:	mov	r3, #0
   18bac:	bl	110f0 <__strtoull_internal@plt>
   18bb0:	mov	r7, r1
   18bb4:	ldr	r1, [r9]
   18bb8:	cmp	r1, r4
   18bbc:	beq	18bf4 <__assert_fail@plt+0x78d0>
   18bc0:	mov	r6, r0
   18bc4:	ldr	r0, [r5]
   18bc8:	cmp	r0, #0
   18bcc:	beq	18f10 <__assert_fail@plt+0x7bec>
   18bd0:	cmp	r0, #34	; 0x22
   18bd4:	bne	18f58 <__assert_fail@plt+0x7c34>
   18bd8:	mov	r8, #1
   18bdc:	cmp	sl, #0
   18be0:	beq	197ac <__assert_fail@plt+0x8488>
   18be4:	ldrb	r4, [r1]
   18be8:	cmp	r4, #0
   18bec:	bne	18c38 <__assert_fail@plt+0x7914>
   18bf0:	b	197ac <__assert_fail@plt+0x8488>
   18bf4:	cmp	sl, #0
   18bf8:	beq	18f58 <__assert_fail@plt+0x7c34>
   18bfc:	mov	r5, r1
   18c00:	ldrb	r1, [r4]
   18c04:	cmp	r1, #0
   18c08:	beq	18f58 <__assert_fail@plt+0x7c34>
   18c0c:	mov	r0, sl
   18c10:	bl	11204 <strchr@plt>
   18c14:	cmp	r0, #0
   18c18:	beq	18f58 <__assert_fail@plt+0x7c34>
   18c1c:	mov	r1, r5
   18c20:	mov	r8, #0
   18c24:	mov	r6, #1
   18c28:	mov	r7, #0
   18c2c:	ldrb	r4, [r1]
   18c30:	cmp	r4, #0
   18c34:	beq	197ac <__assert_fail@plt+0x8488>
   18c38:	str	r1, [sp, #32]
   18c3c:	mov	r0, sl
   18c40:	mov	r1, r4
   18c44:	bl	11204 <strchr@plt>
   18c48:	cmp	r0, #0
   18c4c:	beq	18f4c <__assert_fail@plt+0x7c28>
   18c50:	sub	r0, r4, #69	; 0x45
   18c54:	mov	r1, #1
   18c58:	mov	r3, #0
   18c5c:	mov	r5, #1024	; 0x400
   18c60:	cmp	r0, #47	; 0x2f
   18c64:	str	r1, [sp, #28]
   18c68:	bhi	18d6c <__assert_fail@plt+0x7a48>
   18c6c:	add	r1, pc, #0
   18c70:	ldr	pc, [r1, r0, lsl #2]
   18c74:	andeq	r8, r1, r4, lsr sp
   18c78:	andeq	r8, r1, ip, ror #26
   18c7c:	andeq	r8, r1, r4, lsr sp
   18c80:	andeq	r8, r1, ip, ror #26
   18c84:	andeq	r8, r1, ip, ror #26
   18c88:	andeq	r8, r1, ip, ror #26
   18c8c:	andeq	r8, r1, r4, lsr sp
   18c90:	andeq	r8, r1, ip, ror #26
   18c94:	andeq	r8, r1, r4, lsr sp
   18c98:	andeq	r8, r1, ip, ror #26
   18c9c:	andeq	r8, r1, ip, ror #26
   18ca0:	andeq	r8, r1, r4, lsr sp
   18ca4:	andeq	r8, r1, ip, ror #26
   18ca8:	andeq	r8, r1, ip, ror #26
   18cac:	andeq	r8, r1, ip, ror #26
   18cb0:	andeq	r8, r1, r4, lsr sp
   18cb4:	andeq	r8, r1, ip, ror #26
   18cb8:	andeq	r8, r1, ip, ror #26
   18cbc:	andeq	r8, r1, ip, ror #26
   18cc0:	andeq	r8, r1, ip, ror #26
   18cc4:	andeq	r8, r1, r4, lsr sp
   18cc8:	andeq	r8, r1, r4, lsr sp
   18ccc:	andeq	r8, r1, ip, ror #26
   18cd0:	andeq	r8, r1, ip, ror #26
   18cd4:	andeq	r8, r1, ip, ror #26
   18cd8:	andeq	r8, r1, ip, ror #26
   18cdc:	andeq	r8, r1, ip, ror #26
   18ce0:	andeq	r8, r1, ip, ror #26
   18ce4:	andeq	r8, r1, ip, ror #26
   18ce8:	andeq	r8, r1, ip, ror #26
   18cec:	andeq	r8, r1, ip, ror #26
   18cf0:	andeq	r8, r1, ip, ror #26
   18cf4:	andeq	r8, r1, ip, ror #26
   18cf8:	andeq	r8, r1, ip, ror #26
   18cfc:	andeq	r8, r1, r4, lsr sp
   18d00:	andeq	r8, r1, ip, ror #26
   18d04:	andeq	r8, r1, ip, ror #26
   18d08:	andeq	r8, r1, ip, ror #26
   18d0c:	andeq	r8, r1, r4, lsr sp
   18d10:	andeq	r8, r1, ip, ror #26
   18d14:	andeq	r8, r1, r4, lsr sp
   18d18:	andeq	r8, r1, ip, ror #26
   18d1c:	andeq	r8, r1, ip, ror #26
   18d20:	andeq	r8, r1, ip, ror #26
   18d24:	andeq	r8, r1, ip, ror #26
   18d28:	andeq	r8, r1, ip, ror #26
   18d2c:	andeq	r8, r1, ip, ror #26
   18d30:	andeq	r8, r1, r4, lsr sp
   18d34:	mov	r0, sl
   18d38:	mov	r1, #48	; 0x30
   18d3c:	bl	11204 <strchr@plt>
   18d40:	cmp	r0, #0
   18d44:	beq	18d68 <__assert_fail@plt+0x7a44>
   18d48:	ldr	r1, [sp, #32]
   18d4c:	ldrb	r0, [r1, #1]
   18d50:	cmp	r0, #66	; 0x42
   18d54:	cmpne	r0, #68	; 0x44
   18d58:	bne	18f20 <__assert_fail@plt+0x7bfc>
   18d5c:	mov	r5, #1000	; 0x3e8
   18d60:	mov	r0, #2
   18d64:	str	r0, [sp, #28]
   18d68:	mov	r3, #0
   18d6c:	sub	r0, r4, #66	; 0x42
   18d70:	cmp	r0, #53	; 0x35
   18d74:	bhi	18f4c <__assert_fail@plt+0x7c28>
   18d78:	add	r1, pc, #0
   18d7c:	ldr	pc, [r1, r0, lsl #2]
   18d80:			; <UNDEFINED> instruction: 0x000192bc
   18d84:	andeq	r8, r1, ip, asr #30
   18d88:	andeq	r8, r1, ip, asr #30
   18d8c:	andeq	r9, r1, r4, ror #5
   18d90:	andeq	r8, r1, ip, asr #30
   18d94:	andeq	r8, r1, r8, asr lr
   18d98:	andeq	r8, r1, ip, asr #30
   18d9c:	andeq	r8, r1, ip, asr #30
   18da0:	andeq	r8, r1, ip, asr #30
   18da4:	andeq	r8, r1, r4, ror #30
   18da8:	andeq	r8, r1, ip, asr #30
   18dac:	andeq	r8, r1, ip, lsr #31
   18db0:	andeq	r8, r1, ip, asr #30
   18db4:	andeq	r8, r1, ip, asr #30
   18db8:	andeq	r9, r1, r8, lsr r4
   18dbc:	andeq	r8, r1, ip, asr #30
   18dc0:	andeq	r8, r1, ip, asr #30
   18dc4:	andeq	r8, r1, ip, asr #30
   18dc8:	andeq	r9, r1, r8, lsr r0
   18dcc:	andeq	r8, r1, ip, asr #30
   18dd0:	andeq	r8, r1, ip, asr #30
   18dd4:	andeq	r8, r1, ip, asr #30
   18dd8:	andeq	r8, r1, ip, asr #30
   18ddc:	andeq	r9, r1, r0, ror #10
   18de0:	andeq	r9, r1, r0, lsr #2
   18de4:	andeq	r8, r1, ip, asr #30
   18de8:	andeq	r8, r1, ip, asr #30
   18dec:	andeq	r8, r1, ip, asr #30
   18df0:	andeq	r8, r1, ip, asr #30
   18df4:	andeq	r8, r1, ip, asr #30
   18df8:	andeq	r8, r1, ip, asr #30
   18dfc:	andeq	r8, r1, ip, asr #30
   18e00:	andeq	r9, r1, r4, lsr r7
   18e04:	andeq	r9, r1, ip, lsl #15
   18e08:	andeq	r8, r1, ip, asr #30
   18e0c:	andeq	r8, r1, ip, asr #30
   18e10:	andeq	r8, r1, ip, asr #30
   18e14:	andeq	r8, r1, r8, asr lr
   18e18:	andeq	r8, r1, ip, asr #30
   18e1c:	andeq	r8, r1, ip, asr #30
   18e20:	andeq	r8, r1, ip, asr #30
   18e24:	andeq	r8, r1, r4, ror #30
   18e28:	andeq	r8, r1, ip, asr #30
   18e2c:	andeq	r8, r1, ip, lsr #31
   18e30:	andeq	r8, r1, ip, asr #30
   18e34:	andeq	r8, r1, ip, asr #30
   18e38:	andeq	r8, r1, ip, asr #30
   18e3c:	andeq	r8, r1, ip, asr #30
   18e40:	andeq	r8, r1, ip, asr #30
   18e44:	andeq	r8, r1, ip, asr #30
   18e48:	andeq	r9, r1, r8, lsr r0
   18e4c:	andeq	r8, r1, ip, asr #30
   18e50:	andeq	r8, r1, ip, asr #30
   18e54:	andeq	r9, r1, r8, ror #14
   18e58:	mvn	r0, #0
   18e5c:	mvn	r1, #0
   18e60:	mov	r2, r5
   18e64:	mov	sl, r3
   18e68:	bl	1a080 <__assert_fail@plt+0x8d5c>
   18e6c:	subs	r3, r0, r6
   18e70:	umull	r4, r2, r6, r5
   18e74:	mov	lr, #0
   18e78:	str	r1, [sp, #20]
   18e7c:	sbcs	r3, r1, r7
   18e80:	movwcc	lr, #1
   18e84:	mla	ip, r6, sl, r2
   18e88:	mov	r2, r1
   18e8c:	mov	r2, #0
   18e90:	cmp	lr, #0
   18e94:	mla	r7, r7, r5, ip
   18e98:	mvnne	r4, #0
   18e9c:	mvnne	r7, #0
   18ea0:	subs	r6, r0, r4
   18ea4:	sbcs	r6, r1, r7
   18ea8:	umull	r3, r6, r4, r5
   18eac:	movwcc	r2, #1
   18eb0:	cmp	r2, #0
   18eb4:	mvnne	r3, #0
   18eb8:	cmp	r2, #0
   18ebc:	str	r6, [sp, #16]
   18ec0:	umull	r6, ip, r3, r5
   18ec4:	mla	r1, r3, sl, ip
   18ec8:	ldr	ip, [sp, #16]
   18ecc:	str	r1, [sp, #12]
   18ed0:	mla	r4, r4, sl, ip
   18ed4:	mla	r4, r7, r5, r4
   18ed8:	mvnne	r4, #0
   18edc:	subs	r0, r0, r3
   18ee0:	ldr	r0, [sp, #20]
   18ee4:	ldr	r7, [sp, #12]
   18ee8:	sbcs	r0, r0, r4
   18eec:	mov	r0, #0
   18ef0:	mla	r7, r4, r5, r7
   18ef4:	movwcc	r0, #1
   18ef8:	cmp	r0, #0
   18efc:	mov	r1, r0
   18f00:	orr	r0, lr, r2
   18f04:	mvnne	r7, #0
   18f08:	mvnne	r6, #0
   18f0c:	b	19558 <__assert_fail@plt+0x8234>
   18f10:	mov	r8, r0
   18f14:	cmp	sl, #0
   18f18:	bne	18be4 <__assert_fail@plt+0x78c0>
   18f1c:	b	197ac <__assert_fail@plt+0x8488>
   18f20:	cmp	r0, #105	; 0x69
   18f24:	mov	r3, #0
   18f28:	bne	18d6c <__assert_fail@plt+0x7a48>
   18f2c:	ldrb	r0, [r1, #2]
   18f30:	mov	r1, #1
   18f34:	cmp	r0, #66	; 0x42
   18f38:	movweq	r1, #3
   18f3c:	str	r1, [sp, #28]
   18f40:	sub	r0, r4, #66	; 0x42
   18f44:	cmp	r0, #53	; 0x35
   18f48:	bls	18d78 <__assert_fail@plt+0x7a54>
   18f4c:	ldr	r0, [sp, #36]	; 0x24
   18f50:	orr	r8, r8, #2
   18f54:	strd	r6, [r0]
   18f58:	mov	r0, r8
   18f5c:	sub	sp, fp, #28
   18f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f64:	mvn	r0, #0
   18f68:	mvn	r1, #0
   18f6c:	mov	r2, r5
   18f70:	mov	r4, r3
   18f74:	bl	1a080 <__assert_fail@plt+0x8d5c>
   18f78:	subs	r0, r0, r6
   18f7c:	mov	r2, #0
   18f80:	sbcs	r0, r1, r7
   18f84:	umull	r0, r1, r6, r5
   18f88:	movwcc	r2, #1
   18f8c:	cmp	r2, #0
   18f90:	mla	r1, r6, r4, r1
   18f94:	mov	r3, r2
   18f98:	mvnne	r0, #0
   18f9c:	mla	r7, r7, r5, r1
   18fa0:	mvnne	r7, #0
   18fa4:	mov	r6, r0
   18fa8:	b	1978c <__assert_fail@plt+0x8468>
   18fac:	mvn	r0, #0
   18fb0:	mvn	r1, #0
   18fb4:	mov	r2, r5
   18fb8:	str	r3, [sp, #24]
   18fbc:	bl	1a080 <__assert_fail@plt+0x8d5c>
   18fc0:	subs	r3, r0, r6
   18fc4:	mov	ip, r0
   18fc8:	umull	r4, r0, r6, r5
   18fcc:	mov	sl, #0
   18fd0:	sbcs	r3, r1, r7
   18fd4:	mov	r3, #0
   18fd8:	movwcc	r3, #1
   18fdc:	cmp	r3, #0
   18fe0:	str	r0, [sp, #20]
   18fe4:	ldr	r0, [sp, #24]
   18fe8:	mvnne	r4, #0
   18fec:	cmp	r3, #0
   18ff0:	umull	lr, r2, r4, r5
   18ff4:	mla	r2, r4, r0, r2
   18ff8:	str	r2, [sp, #16]
   18ffc:	ldr	r2, [sp, #20]
   19000:	mla	r6, r6, r0, r2
   19004:	ldr	r0, [sp, #16]
   19008:	mla	r6, r7, r5, r6
   1900c:	mvnne	r6, #0
   19010:	mla	r7, r6, r5, r0
   19014:	subs	r0, ip, r4
   19018:	sbcs	r0, r1, r6
   1901c:	movwcc	sl, #1
   19020:	cmp	sl, #0
   19024:	orr	r3, r3, sl
   19028:	mvnne	lr, #0
   1902c:	mvnne	r7, #0
   19030:	mov	r6, lr
   19034:	b	1978c <__assert_fail@plt+0x8468>
   19038:	mvn	r0, #0
   1903c:	mvn	r1, #0
   19040:	mov	r2, r5
   19044:	mov	sl, r3
   19048:	bl	1a080 <__assert_fail@plt+0x8d5c>
   1904c:	subs	r3, r0, r6
   19050:	mov	ip, r1
   19054:	umull	r2, lr, r6, r5
   19058:	str	r0, [sp, #20]
   1905c:	sbcs	r3, r1, r7
   19060:	mov	r1, #0
   19064:	str	ip, [sp, #16]
   19068:	movwcc	r1, #1
   1906c:	mla	r6, r6, sl, lr
   19070:	mov	lr, #0
   19074:	cmp	r1, #0
   19078:	mla	r7, r7, r5, r6
   1907c:	mvnne	r2, #0
   19080:	cmp	r1, #0
   19084:	umull	r3, r4, r2, r5
   19088:	mvnne	r7, #0
   1908c:	mla	r4, r2, sl, r4
   19090:	subs	r2, r0, r2
   19094:	sbcs	r2, ip, r7
   19098:	mla	r4, r7, r5, r4
   1909c:	mov	r2, #0
   190a0:	movwcc	lr, #1
   190a4:	cmp	lr, #0
   190a8:	mvnne	r3, #0
   190ac:	mvnne	r4, #0
   190b0:	subs	r7, r0, r3
   190b4:	mov	r0, r5
   190b8:	sbcs	r7, ip, r4
   190bc:	umull	r5, r7, r3, r5
   190c0:	movwcc	r2, #1
   190c4:	cmp	r2, #0
   190c8:	mla	r3, r3, sl, r7
   190cc:	mvnne	r5, #0
   190d0:	cmp	r2, #0
   190d4:	mla	r3, r4, r0, r3
   190d8:	umull	r6, ip, r5, r0
   190dc:	mvnne	r3, #0
   190e0:	mla	ip, r5, sl, ip
   190e4:	mla	r7, r3, r0, ip
   190e8:	ldr	r0, [sp, #20]
   190ec:	subs	r0, r0, r5
   190f0:	ldr	r0, [sp, #16]
   190f4:	sbcs	r0, r0, r3
   190f8:	mov	r0, #0
   190fc:	movwcc	r0, #1
   19100:	cmp	r0, #0
   19104:	mov	r3, r0
   19108:	orr	r0, r1, lr
   1910c:	orr	r0, r0, r2
   19110:	mvnne	r7, #0
   19114:	mvnne	r6, #0
   19118:	orr	r3, r0, r3
   1911c:	b	1978c <__assert_fail@plt+0x8468>
   19120:	mvn	r0, #0
   19124:	mvn	r1, #0
   19128:	mov	r2, r5
   1912c:	mov	r4, r3
   19130:	str	r3, [sp, #24]
   19134:	bl	1a080 <__assert_fail@plt+0x8d5c>
   19138:	umull	r3, r2, r6, r5
   1913c:	mla	r2, r6, r4, r2
   19140:	subs	r6, r0, r6
   19144:	sbcs	r6, r1, r7
   19148:	mov	r6, #0
   1914c:	mla	r2, r7, r5, r2
   19150:	mov	r7, #0
   19154:	movwcc	r6, #1
   19158:	cmp	r6, #0
   1915c:	str	r6, [sp, #20]
   19160:	mvnne	r3, #0
   19164:	mvnne	r2, #0
   19168:	subs	r4, r0, r3
   1916c:	umull	r6, ip, r3, r5
   19170:	sbcs	r4, r1, r2
   19174:	ldr	r4, [sp, #24]
   19178:	movwcc	r7, #1
   1917c:	cmp	r7, #0
   19180:	mov	lr, r7
   19184:	str	r7, [sp, #16]
   19188:	mvnne	r6, #0
   1918c:	cmp	lr, #0
   19190:	mov	lr, #0
   19194:	umull	sl, r7, r6, r5
   19198:	mla	r3, r3, r4, ip
   1919c:	mla	r2, r2, r5, r3
   191a0:	mvnne	r2, #0
   191a4:	subs	r3, r0, r6
   191a8:	mla	r7, r6, r4, r7
   191ac:	mov	r4, r0
   191b0:	mov	r0, #0
   191b4:	mla	r7, r2, r5, r7
   191b8:	sbcs	r2, r1, r2
   191bc:	mov	r3, r4
   191c0:	movwcc	r0, #1
   191c4:	str	r3, [sp, #4]
   191c8:	cmp	r0, #0
   191cc:	str	r0, [sp, #12]
   191d0:	mov	r0, r1
   191d4:	mvnne	sl, #0
   191d8:	mvnne	r7, #0
   191dc:	str	r0, [sp, #8]
   191e0:	subs	r2, r4, sl
   191e4:	ldr	r4, [sp, #24]
   191e8:	sbcs	r2, r1, r7
   191ec:	umull	r6, r2, sl, r5
   191f0:	movwcc	lr, #1
   191f4:	cmp	lr, #0
   191f8:	mvnne	r6, #0
   191fc:	mla	r2, sl, r4, r2
   19200:	cmp	lr, #0
   19204:	umull	r1, ip, r6, r5
   19208:	mla	r2, r7, r5, r2
   1920c:	mvnne	r2, #0
   19210:	mla	ip, r6, r4, ip
   19214:	subs	r6, r3, r6
   19218:	mla	r7, r2, r5, ip
   1921c:	sbcs	r2, r0, r2
   19220:	mov	ip, #0
   19224:	mov	r2, #0
   19228:	movwcc	ip, #1
   1922c:	cmp	ip, #0
   19230:	mvnne	r1, #0
   19234:	mvnne	r7, #0
   19238:	subs	r6, r3, r1
   1923c:	ldr	r3, [sp, #24]
   19240:	sbcs	r6, r0, r7
   19244:	umull	r0, sl, r1, r5
   19248:	movwcc	r2, #1
   1924c:	cmp	r2, #0
   19250:	mvnne	r0, #0
   19254:	mla	r1, r1, r3, sl
   19258:	cmp	r2, #0
   1925c:	umull	r6, r4, r0, r5
   19260:	mla	r1, r7, r5, r1
   19264:	mvnne	r1, #0
   19268:	mla	r4, r0, r3, r4
   1926c:	ldr	r3, [sp, #4]
   19270:	mla	r7, r1, r5, r4
   19274:	ldr	r5, [sp, #16]
   19278:	subs	r0, r3, r0
   1927c:	ldr	r0, [sp, #8]
   19280:	sbcs	r0, r0, r1
   19284:	mov	r0, #0
   19288:	movwcc	r0, #1
   1928c:	cmp	r0, #0
   19290:	mov	r1, r0
   19294:	ldr	r0, [sp, #20]
   19298:	mvnne	r7, #0
   1929c:	mvnne	r6, #0
   192a0:	orr	r0, r0, r5
   192a4:	ldr	r5, [sp, #12]
   192a8:	orr	r0, r0, r5
   192ac:	orr	r0, r0, lr
   192b0:	orr	r0, r0, ip
   192b4:	orr	r0, r0, r2
   192b8:	b	19728 <__assert_fail@plt+0x8404>
   192bc:	mov	r1, #0
   192c0:	lsl	r2, r7, #10
   192c4:	lsl	r0, r6, #10
   192c8:	lsr	r3, r7, #22
   192cc:	cmp	r1, r7, lsr #22
   192d0:	orr	r2, r2, r6, lsr #22
   192d4:	mvnne	r0, #0
   192d8:	movwne	r3, #1
   192dc:	cmp	r1, r7, lsr #22
   192e0:	b	19758 <__assert_fail@plt+0x8434>
   192e4:	mvn	r0, #0
   192e8:	mvn	r1, #0
   192ec:	mov	r2, r5
   192f0:	mov	sl, r3
   192f4:	bl	1a080 <__assert_fail@plt+0x8d5c>
   192f8:	subs	r2, r0, r6
   192fc:	mov	ip, r0
   19300:	mov	r0, #0
   19304:	sbcs	r2, r1, r7
   19308:	umull	r4, r2, r6, r5
   1930c:	movwcc	r0, #1
   19310:	cmp	r0, #0
   19314:	mla	r2, r6, sl, r2
   19318:	str	r0, [sp, #20]
   1931c:	mvnne	r4, #0
   19320:	cmp	r0, #0
   19324:	mla	r2, r7, r5, r2
   19328:	mov	r0, #0
   1932c:	umull	lr, r3, r4, r5
   19330:	mvnne	r2, #0
   19334:	mla	r3, r4, sl, r3
   19338:	mla	r6, r2, r5, r3
   1933c:	subs	r3, ip, r4
   19340:	mov	r3, r1
   19344:	sbcs	r2, r1, r2
   19348:	str	r3, [sp, #8]
   1934c:	movwcc	r0, #1
   19350:	cmp	r0, #0
   19354:	str	r0, [sp, #16]
   19358:	mov	r0, ip
   1935c:	mvnne	lr, #0
   19360:	mvnne	r6, #0
   19364:	str	r0, [sp, #12]
   19368:	subs	r2, ip, lr
   1936c:	umull	r7, r4, lr, r5
   19370:	sbcs	r2, r1, r6
   19374:	mov	r2, #0
   19378:	movwcc	r2, #1
   1937c:	mla	r4, lr, sl, r4
   19380:	cmp	r2, #0
   19384:	mla	r6, r6, r5, r4
   19388:	mov	r4, #0
   1938c:	mvnne	r7, #0
   19390:	cmp	r2, #0
   19394:	umull	r1, ip, r7, r5
   19398:	mvnne	r6, #0
   1939c:	mla	ip, r7, sl, ip
   193a0:	subs	r7, r0, r7
   193a4:	sbcs	r7, r3, r6
   193a8:	mla	lr, r6, r5, ip
   193ac:	mov	ip, #0
   193b0:	movwcc	ip, #1
   193b4:	cmp	ip, #0
   193b8:	mvnne	r1, #0
   193bc:	mvnne	lr, #0
   193c0:	subs	r7, r0, r1
   193c4:	sbcs	r7, r3, lr
   193c8:	umull	r0, r7, r1, r5
   193cc:	movwcc	r4, #1
   193d0:	cmp	r4, #0
   193d4:	mla	r1, r1, sl, r7
   193d8:	mvnne	r0, #0
   193dc:	cmp	r4, #0
   193e0:	mla	r1, lr, r5, r1
   193e4:	umull	r6, r3, r0, r5
   193e8:	mvnne	r1, #0
   193ec:	mla	r3, r0, sl, r3
   193f0:	mla	r7, r1, r5, r3
   193f4:	ldr	r3, [sp, #12]
   193f8:	subs	r0, r3, r0
   193fc:	ldr	r0, [sp, #8]
   19400:	ldr	r3, [sp, #16]
   19404:	sbcs	r0, r0, r1
   19408:	mov	r0, #0
   1940c:	movwcc	r0, #1
   19410:	cmp	r0, #0
   19414:	mov	r1, r0
   19418:	ldr	r0, [sp, #20]
   1941c:	mvnne	r7, #0
   19420:	mvnne	r6, #0
   19424:	orr	r0, r0, r3
   19428:	orr	r0, r0, r2
   1942c:	orr	r0, r0, ip
   19430:	orr	r0, r0, r4
   19434:	b	19558 <__assert_fail@plt+0x8234>
   19438:	mvn	r0, #0
   1943c:	mvn	r1, #0
   19440:	mov	r2, r5
   19444:	mov	sl, r3
   19448:	bl	1a080 <__assert_fail@plt+0x8d5c>
   1944c:	umull	r3, r2, r6, r5
   19450:	mov	lr, r1
   19454:	mov	r1, r0
   19458:	mla	r2, r6, sl, r2
   1945c:	subs	r6, r0, r6
   19460:	mov	r0, #0
   19464:	sbcs	r6, lr, r7
   19468:	mla	r2, r7, r5, r2
   1946c:	movwcc	r0, #1
   19470:	cmp	r0, #0
   19474:	str	r0, [sp, #20]
   19478:	mov	r0, r1
   1947c:	mvnne	r3, #0
   19480:	mvnne	r2, #0
   19484:	str	r0, [sp, #16]
   19488:	subs	r4, r1, r3
   1948c:	umull	r7, ip, r3, r5
   19490:	sbcs	r4, lr, r2
   19494:	mov	r4, #0
   19498:	movwcc	r4, #1
   1949c:	mla	r3, r3, sl, ip
   194a0:	mov	ip, #0
   194a4:	cmp	r4, #0
   194a8:	mla	r2, r2, r5, r3
   194ac:	mvnne	r7, #0
   194b0:	cmp	r4, #0
   194b4:	umull	r1, r6, r7, r5
   194b8:	mvnne	r2, #0
   194bc:	mla	r6, r7, sl, r6
   194c0:	mla	r3, r2, r5, r6
   194c4:	subs	r6, r0, r7
   194c8:	sbcs	r2, lr, r2
   194cc:	mov	r2, #0
   194d0:	movwcc	ip, #1
   194d4:	cmp	ip, #0
   194d8:	mvnne	r1, #0
   194dc:	mvnne	r3, #0
   194e0:	subs	r6, r0, r1
   194e4:	sbcs	r6, lr, r3
   194e8:	umull	r0, r6, r1, r5
   194ec:	movwcc	r2, #1
   194f0:	cmp	r2, #0
   194f4:	mvnne	r0, #0
   194f8:	cmp	r2, #0
   194fc:	str	r6, [sp, #12]
   19500:	umull	r6, r7, r0, r5
   19504:	mla	r7, r0, sl, r7
   19508:	str	r7, [sp, #8]
   1950c:	ldr	r7, [sp, #12]
   19510:	mla	r1, r1, sl, r7
   19514:	mla	r1, r3, r5, r1
   19518:	ldr	r3, [sp, #8]
   1951c:	mvnne	r1, #0
   19520:	mla	r7, r1, r5, r3
   19524:	ldr	r3, [sp, #16]
   19528:	subs	r0, r3, r0
   1952c:	sbcs	r0, lr, r1
   19530:	mov	r0, #0
   19534:	movwcc	r0, #1
   19538:	cmp	r0, #0
   1953c:	mov	r1, r0
   19540:	ldr	r0, [sp, #20]
   19544:	mvnne	r7, #0
   19548:	mvnne	r6, #0
   1954c:	orr	r0, r0, r4
   19550:	orr	r0, r0, ip
   19554:	orr	r0, r0, r2
   19558:	orr	r3, r0, r1
   1955c:	b	1978c <__assert_fail@plt+0x8468>
   19560:	mvn	r0, #0
   19564:	mvn	r1, #0
   19568:	mov	r2, r5
   1956c:	mov	sl, r3
   19570:	bl	1a080 <__assert_fail@plt+0x8d5c>
   19574:	mov	ip, r1
   19578:	subs	r1, r0, r6
   1957c:	umull	r3, lr, r6, r5
   19580:	mov	r2, r5
   19584:	sbcs	r1, ip, r7
   19588:	mov	r1, #0
   1958c:	str	ip, [sp, #4]
   19590:	movwcc	r1, #1
   19594:	mla	r6, r6, sl, lr
   19598:	cmp	r1, #0
   1959c:	mla	r7, r7, r2, r6
   195a0:	str	r1, [sp, #20]
   195a4:	mvnne	r3, #0
   195a8:	cmp	r1, #0
   195ac:	mov	r1, r0
   195b0:	umull	r4, r5, r3, r5
   195b4:	mvnne	r7, #0
   195b8:	mov	lr, r1
   195bc:	mla	r5, r3, sl, r5
   195c0:	subs	r3, r0, r3
   195c4:	sbcs	r0, ip, r7
   195c8:	mov	r0, #0
   195cc:	mla	r5, r7, r2, r5
   195d0:	movwcc	r0, #1
   195d4:	cmp	r0, #0
   195d8:	str	r0, [sp, #16]
   195dc:	mvnne	r4, #0
   195e0:	mvnne	r5, #0
   195e4:	subs	r0, r1, r4
   195e8:	mov	r1, #0
   195ec:	sbcs	r0, ip, r5
   195f0:	umull	r3, r0, r4, r2
   195f4:	movwcc	r1, #1
   195f8:	cmp	r1, #0
   195fc:	mla	r0, r4, sl, r0
   19600:	mov	r4, lr
   19604:	str	r1, [sp, #12]
   19608:	mvnne	r3, #0
   1960c:	cmp	r1, #0
   19610:	mla	r0, r5, r2, r0
   19614:	str	r4, [sp]
   19618:	umull	r7, r6, r3, r2
   1961c:	mvnne	r0, #0
   19620:	mla	r6, r3, sl, r6
   19624:	subs	r3, lr, r3
   19628:	mov	r3, #0
   1962c:	mla	r5, r0, r2, r6
   19630:	sbcs	r0, ip, r0
   19634:	mov	r0, #0
   19638:	movwcc	r0, #1
   1963c:	cmp	r0, #0
   19640:	str	r0, [sp, #8]
   19644:	mvnne	r7, #0
   19648:	mvnne	r5, #0
   1964c:	subs	r0, lr, r7
   19650:	sbcs	r0, ip, r5
   19654:	umull	r6, r0, r7, r2
   19658:	movwcc	r3, #1
   1965c:	cmp	r3, #0
   19660:	mla	r7, r7, sl, r0
   19664:	mov	r0, ip
   19668:	mvnne	r6, #0
   1966c:	cmp	r3, #0
   19670:	mla	r7, r5, r2, r7
   19674:	mov	r5, #0
   19678:	umull	r1, lr, r6, r2
   1967c:	mvnne	r7, #0
   19680:	mla	lr, r6, sl, lr
   19684:	subs	r6, r4, r6
   19688:	mla	lr, r7, r2, lr
   1968c:	sbcs	r7, ip, r7
   19690:	mov	ip, #0
   19694:	movwcc	ip, #1
   19698:	cmp	ip, #0
   1969c:	mvnne	r1, #0
   196a0:	mvnne	lr, #0
   196a4:	subs	r7, r4, r1
   196a8:	sbcs	r7, r0, lr
   196ac:	umull	r0, r7, r1, r2
   196b0:	movwcc	r5, #1
   196b4:	cmp	r5, #0
   196b8:	mla	r1, r1, sl, r7
   196bc:	mvnne	r0, #0
   196c0:	cmp	r5, #0
   196c4:	mla	r1, lr, r2, r1
   196c8:	umull	r6, r4, r0, r2
   196cc:	mvnne	r1, #0
   196d0:	mla	r4, r0, sl, r4
   196d4:	mla	r7, r1, r2, r4
   196d8:	ldr	r2, [sp]
   196dc:	subs	r0, r2, r0
   196e0:	ldr	r0, [sp, #4]
   196e4:	ldr	r2, [sp, #16]
   196e8:	sbcs	r0, r0, r1
   196ec:	mov	r0, #0
   196f0:	movwcc	r0, #1
   196f4:	cmp	r0, #0
   196f8:	mov	r1, r0
   196fc:	ldr	r0, [sp, #20]
   19700:	mvnne	r7, #0
   19704:	mvnne	r6, #0
   19708:	orr	r0, r0, r2
   1970c:	ldr	r2, [sp, #12]
   19710:	orr	r0, r0, r2
   19714:	ldr	r2, [sp, #8]
   19718:	orr	r0, r0, r2
   1971c:	orr	r0, r0, r3
   19720:	orr	r0, r0, ip
   19724:	orr	r0, r0, r5
   19728:	orr	r0, r0, r1
   1972c:	and	r3, r0, #1
   19730:	b	1978c <__assert_fail@plt+0x8468>
   19734:	mov	r1, #0
   19738:	lsl	r2, r7, #9
   1973c:	lsl	r0, r6, #9
   19740:	lsr	r3, r7, #23
   19744:	cmp	r1, r7, lsr #23
   19748:	orr	r2, r2, r6, lsr #23
   1974c:	mvnne	r0, #0
   19750:	movwne	r3, #1
   19754:	cmp	r1, r7, lsr #23
   19758:	mvnne	r2, #0
   1975c:	mov	r6, r0
   19760:	mov	r7, r2
   19764:	b	1978c <__assert_fail@plt+0x8468>
   19768:	lsl	r1, r7, #1
   1976c:	cmp	r7, #0
   19770:	lsl	r0, r6, #1
   19774:	lsr	r3, r7, #31
   19778:	orr	r1, r1, r6, lsr #31
   1977c:	mvnmi	r0, #0
   19780:	mvnmi	r1, #0
   19784:	mov	r6, r0
   19788:	mov	r7, r1
   1978c:	ldr	r1, [sp, #32]
   19790:	ldr	r2, [sp, #28]
   19794:	orr	r8, r3, r8
   19798:	add	r0, r1, r2
   1979c:	str	r0, [r9]
   197a0:	ldrb	r0, [r1, r2]
   197a4:	cmp	r0, #0
   197a8:	orrne	r8, r8, #2
   197ac:	ldr	r0, [sp, #36]	; 0x24
   197b0:	strd	r6, [r0]
   197b4:	mov	r0, r8
   197b8:	sub	sp, fp, #28
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	movw	r0, #50629	; 0xc5c5
   197c4:	movw	r1, #50738	; 0xc632
   197c8:	movw	r3, #50754	; 0xc642
   197cc:	mov	r2, #85	; 0x55
   197d0:	movt	r0, #1
   197d4:	movt	r1, #1
   197d8:	movt	r3, #1
   197dc:	bl	11324 <__assert_fail@plt>
   197e0:	clz	r2, r1
   197e4:	clz	r3, r0
   197e8:	lsr	r2, r2, #5
   197ec:	lsr	r3, r3, #5
   197f0:	orrs	r2, r3, r2
   197f4:	movwne	r1, #1
   197f8:	movwne	r0, #1
   197fc:	cmp	r1, #0
   19800:	beq	19830 <__assert_fail@plt+0x850c>
   19804:	mvn	r2, #-2147483648	; 0x80000000
   19808:	udiv	r2, r2, r1
   1980c:	cmp	r2, r0
   19810:	bcs	19830 <__assert_fail@plt+0x850c>
   19814:	push	{fp, lr}
   19818:	mov	fp, sp
   1981c:	bl	11210 <__errno_location@plt>
   19820:	mov	r1, #12
   19824:	str	r1, [r0]
   19828:	mov	r0, #0
   1982c:	pop	{fp, pc}
   19830:	b	11060 <calloc@plt>
   19834:	cmp	r0, #0
   19838:	movweq	r0, #1
   1983c:	cmn	r0, #1
   19840:	ble	19848 <__assert_fail@plt+0x8524>
   19844:	b	11198 <malloc@plt>
   19848:	push	{fp, lr}
   1984c:	mov	fp, sp
   19850:	bl	11210 <__errno_location@plt>
   19854:	mov	r1, #12
   19858:	str	r1, [r0]
   1985c:	mov	r0, #0
   19860:	pop	{fp, pc}
   19864:	push	{fp, lr}
   19868:	mov	fp, sp
   1986c:	cmp	r0, #0
   19870:	beq	1988c <__assert_fail@plt+0x8568>
   19874:	cmp	r1, #0
   19878:	beq	19898 <__assert_fail@plt+0x8574>
   1987c:	cmn	r1, #1
   19880:	ble	198a4 <__assert_fail@plt+0x8580>
   19884:	pop	{fp, lr}
   19888:	b	11114 <realloc@plt>
   1988c:	mov	r0, r1
   19890:	pop	{fp, lr}
   19894:	b	19834 <__assert_fail@plt+0x8510>
   19898:	bl	14ed4 <__assert_fail@plt+0x3bb0>
   1989c:	mov	r0, #0
   198a0:	pop	{fp, pc}
   198a4:	bl	11210 <__errno_location@plt>
   198a8:	mov	r1, #12
   198ac:	str	r1, [r0]
   198b0:	mov	r0, #0
   198b4:	pop	{fp, pc}
   198b8:	push	{r4, r5, r6, sl, fp, lr}
   198bc:	add	fp, sp, #16
   198c0:	mov	r4, r0
   198c4:	bl	11168 <__fpending@plt>
   198c8:	ldr	r6, [r4]
   198cc:	mov	r5, r0
   198d0:	mov	r0, r4
   198d4:	bl	1993c <__assert_fail@plt+0x8618>
   198d8:	tst	r6, #32
   198dc:	bne	19914 <__assert_fail@plt+0x85f0>
   198e0:	cmp	r0, #0
   198e4:	mov	r4, r0
   198e8:	mvnne	r4, #0
   198ec:	cmp	r5, #0
   198f0:	bne	19920 <__assert_fail@plt+0x85fc>
   198f4:	cmp	r0, #0
   198f8:	beq	19920 <__assert_fail@plt+0x85fc>
   198fc:	bl	11210 <__errno_location@plt>
   19900:	ldr	r0, [r0]
   19904:	subs	r4, r0, #9
   19908:	mvnne	r4, #0
   1990c:	mov	r0, r4
   19910:	pop	{r4, r5, r6, sl, fp, pc}
   19914:	mvn	r4, #0
   19918:	cmp	r0, #0
   1991c:	beq	19928 <__assert_fail@plt+0x8604>
   19920:	mov	r0, r4
   19924:	pop	{r4, r5, r6, sl, fp, pc}
   19928:	bl	11210 <__errno_location@plt>
   1992c:	mov	r1, #0
   19930:	str	r1, [r0]
   19934:	mov	r0, r4
   19938:	pop	{r4, r5, r6, sl, fp, pc}
   1993c:	push	{r4, r5, r6, sl, fp, lr}
   19940:	add	fp, sp, #16
   19944:	sub	sp, sp, #8
   19948:	mov	r4, r0
   1994c:	bl	11240 <fileno@plt>
   19950:	cmn	r0, #1
   19954:	ble	199c8 <__assert_fail@plt+0x86a4>
   19958:	mov	r0, r4
   1995c:	bl	111b0 <__freading@plt>
   19960:	cmp	r0, #0
   19964:	beq	19990 <__assert_fail@plt+0x866c>
   19968:	mov	r0, r4
   1996c:	bl	11240 <fileno@plt>
   19970:	mov	r1, #1
   19974:	mov	r2, #0
   19978:	mov	r3, #0
   1997c:	str	r1, [sp]
   19980:	bl	11144 <lseek64@plt>
   19984:	and	r0, r0, r1
   19988:	cmn	r0, #1
   1998c:	beq	199c8 <__assert_fail@plt+0x86a4>
   19990:	mov	r0, r4
   19994:	bl	199d8 <__assert_fail@plt+0x86b4>
   19998:	cmp	r0, #0
   1999c:	beq	199c8 <__assert_fail@plt+0x86a4>
   199a0:	bl	11210 <__errno_location@plt>
   199a4:	ldr	r6, [r0]
   199a8:	mov	r5, r0
   199ac:	mov	r0, r4
   199b0:	bl	11264 <fclose@plt>
   199b4:	cmp	r6, #0
   199b8:	strne	r6, [r5]
   199bc:	mvnne	r0, #0
   199c0:	sub	sp, fp, #16
   199c4:	pop	{r4, r5, r6, sl, fp, pc}
   199c8:	mov	r0, r4
   199cc:	sub	sp, fp, #16
   199d0:	pop	{r4, r5, r6, sl, fp, lr}
   199d4:	b	11264 <fclose@plt>
   199d8:	push	{r4, sl, fp, lr}
   199dc:	add	fp, sp, #8
   199e0:	sub	sp, sp, #8
   199e4:	mov	r4, r0
   199e8:	cmp	r0, #0
   199ec:	beq	19a24 <__assert_fail@plt+0x8700>
   199f0:	mov	r0, r4
   199f4:	bl	111b0 <__freading@plt>
   199f8:	cmp	r0, #0
   199fc:	beq	19a24 <__assert_fail@plt+0x8700>
   19a00:	ldrb	r0, [r4, #1]
   19a04:	tst	r0, #1
   19a08:	beq	19a24 <__assert_fail@plt+0x8700>
   19a0c:	mov	r0, #1
   19a10:	mov	r2, #0
   19a14:	mov	r3, #0
   19a18:	str	r0, [sp]
   19a1c:	mov	r0, r4
   19a20:	bl	19a34 <__assert_fail@plt+0x8710>
   19a24:	mov	r0, r4
   19a28:	sub	sp, fp, #8
   19a2c:	pop	{r4, sl, fp, lr}
   19a30:	b	110a8 <fflush@plt>
   19a34:	push	{r4, r5, r6, r7, fp, lr}
   19a38:	add	fp, sp, #16
   19a3c:	sub	sp, sp, #8
   19a40:	mov	r4, r0
   19a44:	ldr	r0, [r0, #4]
   19a48:	mov	r5, r3
   19a4c:	mov	r6, r2
   19a50:	ldr	r1, [r4, #8]
   19a54:	cmp	r1, r0
   19a58:	bne	19a74 <__assert_fail@plt+0x8750>
   19a5c:	ldrd	r0, [r4, #16]
   19a60:	cmp	r1, r0
   19a64:	bne	19a74 <__assert_fail@plt+0x8750>
   19a68:	ldr	r0, [r4, #36]	; 0x24
   19a6c:	cmp	r0, #0
   19a70:	beq	19a8c <__assert_fail@plt+0x8768>
   19a74:	mov	r0, r4
   19a78:	mov	r2, r6
   19a7c:	mov	r3, r5
   19a80:	sub	sp, fp, #16
   19a84:	pop	{r4, r5, r6, r7, fp, lr}
   19a88:	b	11270 <fseeko64@plt>
   19a8c:	ldr	r7, [fp, #8]
   19a90:	mov	r0, r4
   19a94:	bl	11240 <fileno@plt>
   19a98:	mov	r2, r6
   19a9c:	mov	r3, r5
   19aa0:	str	r7, [sp]
   19aa4:	bl	11144 <lseek64@plt>
   19aa8:	and	r2, r0, r1
   19aac:	cmn	r2, #1
   19ab0:	beq	19ad0 <__assert_fail@plt+0x87ac>
   19ab4:	strd	r0, [r4, #80]	; 0x50
   19ab8:	ldr	r0, [r4]
   19abc:	bic	r0, r0, #16
   19ac0:	str	r0, [r4]
   19ac4:	mov	r0, #0
   19ac8:	sub	sp, fp, #16
   19acc:	pop	{r4, r5, r6, r7, fp, pc}
   19ad0:	mvn	r0, #0
   19ad4:	sub	sp, fp, #16
   19ad8:	pop	{r4, r5, r6, r7, fp, pc}
   19adc:	push	{fp, lr}
   19ae0:	mov	fp, sp
   19ae4:	mov	r0, #14
   19ae8:	bl	112ac <nl_langinfo@plt>
   19aec:	movw	r1, #46769	; 0xb6b1
   19af0:	cmp	r0, #0
   19af4:	movt	r1, #1
   19af8:	movne	r1, r0
   19afc:	movw	r0, #50833	; 0xc691
   19b00:	ldrb	r2, [r1]
   19b04:	movt	r0, #1
   19b08:	cmp	r2, #0
   19b0c:	movne	r0, r1
   19b10:	pop	{fp, pc}
   19b14:	push	{r4, r5, r6, r7, fp, lr}
   19b18:	add	fp, sp, #16
   19b1c:	sub	sp, sp, #8
   19b20:	cmp	r0, #0
   19b24:	add	r5, sp, #4
   19b28:	mov	r7, r2
   19b2c:	mov	r4, r1
   19b30:	movne	r5, r0
   19b34:	mov	r0, r5
   19b38:	bl	11174 <mbrtowc@plt>
   19b3c:	mov	r6, r0
   19b40:	cmp	r7, #0
   19b44:	beq	19b6c <__assert_fail@plt+0x8848>
   19b48:	cmn	r6, #2
   19b4c:	bcc	19b6c <__assert_fail@plt+0x8848>
   19b50:	mov	r0, #0
   19b54:	bl	19bb4 <__assert_fail@plt+0x8890>
   19b58:	cmp	r0, #0
   19b5c:	bne	19b6c <__assert_fail@plt+0x8848>
   19b60:	ldrb	r0, [r4]
   19b64:	mov	r6, #1
   19b68:	str	r0, [r5]
   19b6c:	mov	r0, r6
   19b70:	sub	sp, fp, #16
   19b74:	pop	{r4, r5, r6, r7, fp, pc}
   19b78:	cmp	r2, #0
   19b7c:	beq	19bac <__assert_fail@plt+0x8888>
   19b80:	mvn	r3, #0
   19b84:	udiv	r3, r3, r2
   19b88:	cmp	r3, r1
   19b8c:	bcs	19bac <__assert_fail@plt+0x8888>
   19b90:	push	{fp, lr}
   19b94:	mov	fp, sp
   19b98:	bl	11210 <__errno_location@plt>
   19b9c:	mov	r1, #12
   19ba0:	str	r1, [r0]
   19ba4:	mov	r0, #0
   19ba8:	pop	{fp, pc}
   19bac:	mul	r1, r2, r1
   19bb0:	b	19864 <__assert_fail@plt+0x8540>
   19bb4:	push	{r4, sl, fp, lr}
   19bb8:	add	fp, sp, #8
   19bbc:	sub	sp, sp, #264	; 0x108
   19bc0:	add	r1, sp, #7
   19bc4:	movw	r2, #257	; 0x101
   19bc8:	bl	19c20 <__assert_fail@plt+0x88fc>
   19bcc:	mov	r4, #0
   19bd0:	cmp	r0, #0
   19bd4:	bne	19c14 <__assert_fail@plt+0x88f0>
   19bd8:	movw	r1, #50839	; 0xc697
   19bdc:	add	r0, sp, #7
   19be0:	mov	r2, #2
   19be4:	movt	r1, #1
   19be8:	bl	111ec <bcmp@plt>
   19bec:	cmp	r0, #0
   19bf0:	beq	19c14 <__assert_fail@plt+0x88f0>
   19bf4:	movw	r1, #50841	; 0xc699
   19bf8:	add	r0, sp, #7
   19bfc:	mov	r2, #6
   19c00:	movt	r1, #1
   19c04:	bl	111ec <bcmp@plt>
   19c08:	cmp	r0, #0
   19c0c:	mov	r4, r0
   19c10:	movwne	r4, #1
   19c14:	mov	r0, r4
   19c18:	sub	sp, fp, #8
   19c1c:	pop	{r4, sl, fp, pc}
   19c20:	push	{r4, r5, r6, r7, fp, lr}
   19c24:	add	fp, sp, #16
   19c28:	mov	r4, r1
   19c2c:	mov	r1, #0
   19c30:	mov	r6, r2
   19c34:	bl	11288 <setlocale@plt>
   19c38:	cmp	r0, #0
   19c3c:	beq	19c6c <__assert_fail@plt+0x8948>
   19c40:	mov	r7, r0
   19c44:	bl	111f8 <strlen@plt>
   19c48:	cmp	r0, r6
   19c4c:	bcs	19c88 <__assert_fail@plt+0x8964>
   19c50:	add	r2, r0, #1
   19c54:	mov	r0, r4
   19c58:	mov	r1, r7
   19c5c:	bl	110e4 <memcpy@plt>
   19c60:	mov	r5, #0
   19c64:	mov	r0, r5
   19c68:	pop	{r4, r5, r6, r7, fp, pc}
   19c6c:	mov	r5, #22
   19c70:	cmp	r6, #0
   19c74:	beq	19cb0 <__assert_fail@plt+0x898c>
   19c78:	mov	r0, #0
   19c7c:	strb	r0, [r4]
   19c80:	mov	r0, r5
   19c84:	pop	{r4, r5, r6, r7, fp, pc}
   19c88:	mov	r5, #34	; 0x22
   19c8c:	cmp	r6, #0
   19c90:	beq	19cb0 <__assert_fail@plt+0x898c>
   19c94:	sub	r6, r6, #1
   19c98:	mov	r0, r4
   19c9c:	mov	r1, r7
   19ca0:	mov	r2, r6
   19ca4:	bl	110e4 <memcpy@plt>
   19ca8:	mov	r0, #0
   19cac:	strb	r0, [r4, r6]
   19cb0:	mov	r0, r5
   19cb4:	pop	{r4, r5, r6, r7, fp, pc}
   19cb8:	mov	r1, #0
   19cbc:	b	11288 <setlocale@plt>
   19cc0:	eor	r1, r1, #-2147483648	; 0x80000000
   19cc4:	b	19ccc <__assert_fail@plt+0x89a8>
   19cc8:	eor	r3, r3, #-2147483648	; 0x80000000
   19ccc:	push	{r4, r5, lr}
   19cd0:	lsl	r4, r1, #1
   19cd4:	lsl	r5, r3, #1
   19cd8:	teq	r4, r5
   19cdc:	teqeq	r0, r2
   19ce0:	orrsne	ip, r4, r0
   19ce4:	orrsne	ip, r5, r2
   19ce8:	mvnsne	ip, r4, asr #21
   19cec:	mvnsne	ip, r5, asr #21
   19cf0:	beq	19edc <__assert_fail@plt+0x8bb8>
   19cf4:	lsr	r4, r4, #21
   19cf8:	rsbs	r5, r4, r5, lsr #21
   19cfc:	rsblt	r5, r5, #0
   19d00:	ble	19d20 <__assert_fail@plt+0x89fc>
   19d04:	add	r4, r4, r5
   19d08:	eor	r2, r0, r2
   19d0c:	eor	r3, r1, r3
   19d10:	eor	r0, r2, r0
   19d14:	eor	r1, r3, r1
   19d18:	eor	r2, r0, r2
   19d1c:	eor	r3, r1, r3
   19d20:	cmp	r5, #54	; 0x36
   19d24:	pophi	{r4, r5, pc}
   19d28:	tst	r1, #-2147483648	; 0x80000000
   19d2c:	lsl	r1, r1, #12
   19d30:	mov	ip, #1048576	; 0x100000
   19d34:	orr	r1, ip, r1, lsr #12
   19d38:	beq	19d44 <__assert_fail@plt+0x8a20>
   19d3c:	rsbs	r0, r0, #0
   19d40:	rsc	r1, r1, #0
   19d44:	tst	r3, #-2147483648	; 0x80000000
   19d48:	lsl	r3, r3, #12
   19d4c:	orr	r3, ip, r3, lsr #12
   19d50:	beq	19d5c <__assert_fail@plt+0x8a38>
   19d54:	rsbs	r2, r2, #0
   19d58:	rsc	r3, r3, #0
   19d5c:	teq	r4, r5
   19d60:	beq	19ec4 <__assert_fail@plt+0x8ba0>
   19d64:	sub	r4, r4, #1
   19d68:	rsbs	lr, r5, #32
   19d6c:	blt	19d88 <__assert_fail@plt+0x8a64>
   19d70:	lsl	ip, r2, lr
   19d74:	adds	r0, r0, r2, lsr r5
   19d78:	adc	r1, r1, #0
   19d7c:	adds	r0, r0, r3, lsl lr
   19d80:	adcs	r1, r1, r3, asr r5
   19d84:	b	19da4 <__assert_fail@plt+0x8a80>
   19d88:	sub	r5, r5, #32
   19d8c:	add	lr, lr, #32
   19d90:	cmp	r2, #1
   19d94:	lsl	ip, r3, lr
   19d98:	orrcs	ip, ip, #2
   19d9c:	adds	r0, r0, r3, asr r5
   19da0:	adcs	r1, r1, r3, asr #31
   19da4:	and	r5, r1, #-2147483648	; 0x80000000
   19da8:	bpl	19db8 <__assert_fail@plt+0x8a94>
   19dac:	rsbs	ip, ip, #0
   19db0:	rscs	r0, r0, #0
   19db4:	rsc	r1, r1, #0
   19db8:	cmp	r1, #1048576	; 0x100000
   19dbc:	bcc	19dfc <__assert_fail@plt+0x8ad8>
   19dc0:	cmp	r1, #2097152	; 0x200000
   19dc4:	bcc	19de4 <__assert_fail@plt+0x8ac0>
   19dc8:	lsrs	r1, r1, #1
   19dcc:	rrxs	r0, r0
   19dd0:	rrx	ip, ip
   19dd4:	add	r4, r4, #1
   19dd8:	lsl	r2, r4, #21
   19ddc:	cmn	r2, #4194304	; 0x400000
   19de0:	bcs	19f3c <__assert_fail@plt+0x8c18>
   19de4:	cmp	ip, #-2147483648	; 0x80000000
   19de8:	lsrseq	ip, r0, #1
   19dec:	adcs	r0, r0, #0
   19df0:	adc	r1, r1, r4, lsl #20
   19df4:	orr	r1, r1, r5
   19df8:	pop	{r4, r5, pc}
   19dfc:	lsls	ip, ip, #1
   19e00:	adcs	r0, r0, r0
   19e04:	adc	r1, r1, r1
   19e08:	tst	r1, #1048576	; 0x100000
   19e0c:	sub	r4, r4, #1
   19e10:	bne	19de4 <__assert_fail@plt+0x8ac0>
   19e14:	teq	r1, #0
   19e18:	moveq	r1, r0
   19e1c:	moveq	r0, #0
   19e20:	clz	r3, r1
   19e24:	addeq	r3, r3, #32
   19e28:	sub	r3, r3, #11
   19e2c:	subs	r2, r3, #32
   19e30:	bge	19e54 <__assert_fail@plt+0x8b30>
   19e34:	adds	r2, r2, #12
   19e38:	ble	19e50 <__assert_fail@plt+0x8b2c>
   19e3c:	add	ip, r2, #20
   19e40:	rsb	r2, r2, #12
   19e44:	lsl	r0, r1, ip
   19e48:	lsr	r1, r1, r2
   19e4c:	b	19e64 <__assert_fail@plt+0x8b40>
   19e50:	add	r2, r2, #20
   19e54:	rsble	ip, r2, #32
   19e58:	lsl	r1, r1, r2
   19e5c:	orrle	r1, r1, r0, lsr ip
   19e60:	lslle	r0, r0, r2
   19e64:	subs	r4, r4, r3
   19e68:	addge	r1, r1, r4, lsl #20
   19e6c:	orrge	r1, r1, r5
   19e70:	popge	{r4, r5, pc}
   19e74:	mvn	r4, r4
   19e78:	subs	r4, r4, #31
   19e7c:	bge	19eb8 <__assert_fail@plt+0x8b94>
   19e80:	adds	r4, r4, #12
   19e84:	bgt	19ea0 <__assert_fail@plt+0x8b7c>
   19e88:	add	r4, r4, #20
   19e8c:	rsb	r2, r4, #32
   19e90:	lsr	r0, r0, r4
   19e94:	orr	r0, r0, r1, lsl r2
   19e98:	orr	r1, r5, r1, lsr r4
   19e9c:	pop	{r4, r5, pc}
   19ea0:	rsb	r4, r4, #12
   19ea4:	rsb	r2, r4, #32
   19ea8:	lsr	r0, r0, r2
   19eac:	orr	r0, r0, r1, lsl r4
   19eb0:	mov	r1, r5
   19eb4:	pop	{r4, r5, pc}
   19eb8:	lsr	r0, r1, r4
   19ebc:	mov	r1, r5
   19ec0:	pop	{r4, r5, pc}
   19ec4:	teq	r4, #0
   19ec8:	eor	r3, r3, #1048576	; 0x100000
   19ecc:	eoreq	r1, r1, #1048576	; 0x100000
   19ed0:	addeq	r4, r4, #1
   19ed4:	subne	r5, r5, #1
   19ed8:	b	19d64 <__assert_fail@plt+0x8a40>
   19edc:	mvns	ip, r4, asr #21
   19ee0:	mvnsne	ip, r5, asr #21
   19ee4:	beq	19f4c <__assert_fail@plt+0x8c28>
   19ee8:	teq	r4, r5
   19eec:	teqeq	r0, r2
   19ef0:	beq	19f04 <__assert_fail@plt+0x8be0>
   19ef4:	orrs	ip, r4, r0
   19ef8:	moveq	r1, r3
   19efc:	moveq	r0, r2
   19f00:	pop	{r4, r5, pc}
   19f04:	teq	r1, r3
   19f08:	movne	r1, #0
   19f0c:	movne	r0, #0
   19f10:	popne	{r4, r5, pc}
   19f14:	lsrs	ip, r4, #21
   19f18:	bne	19f2c <__assert_fail@plt+0x8c08>
   19f1c:	lsls	r0, r0, #1
   19f20:	adcs	r1, r1, r1
   19f24:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19f28:	pop	{r4, r5, pc}
   19f2c:	adds	r4, r4, #4194304	; 0x400000
   19f30:	addcc	r1, r1, #1048576	; 0x100000
   19f34:	popcc	{r4, r5, pc}
   19f38:	and	r5, r1, #-2147483648	; 0x80000000
   19f3c:	orr	r1, r5, #2130706432	; 0x7f000000
   19f40:	orr	r1, r1, #15728640	; 0xf00000
   19f44:	mov	r0, #0
   19f48:	pop	{r4, r5, pc}
   19f4c:	mvns	ip, r4, asr #21
   19f50:	movne	r1, r3
   19f54:	movne	r0, r2
   19f58:	mvnseq	ip, r5, asr #21
   19f5c:	movne	r3, r1
   19f60:	movne	r2, r0
   19f64:	orrs	r4, r0, r1, lsl #12
   19f68:	orrseq	r5, r2, r3, lsl #12
   19f6c:	teqeq	r1, r3
   19f70:	orrne	r1, r1, #524288	; 0x80000
   19f74:	pop	{r4, r5, pc}
   19f78:	teq	r0, #0
   19f7c:	moveq	r1, #0
   19f80:	bxeq	lr
   19f84:	push	{r4, r5, lr}
   19f88:	mov	r4, #1024	; 0x400
   19f8c:	add	r4, r4, #50	; 0x32
   19f90:	mov	r5, #0
   19f94:	mov	r1, #0
   19f98:	b	19e14 <__assert_fail@plt+0x8af0>
   19f9c:	teq	r0, #0
   19fa0:	moveq	r1, #0
   19fa4:	bxeq	lr
   19fa8:	push	{r4, r5, lr}
   19fac:	mov	r4, #1024	; 0x400
   19fb0:	add	r4, r4, #50	; 0x32
   19fb4:	ands	r5, r0, #-2147483648	; 0x80000000
   19fb8:	rsbmi	r0, r0, #0
   19fbc:	mov	r1, #0
   19fc0:	b	19e14 <__assert_fail@plt+0x8af0>
   19fc4:	lsls	r2, r0, #1
   19fc8:	asr	r1, r2, #3
   19fcc:	rrx	r1, r1
   19fd0:	lsl	r0, r2, #28
   19fd4:	andsne	r3, r2, #-16777216	; 0xff000000
   19fd8:	teqne	r3, #-16777216	; 0xff000000
   19fdc:	eorne	r1, r1, #939524096	; 0x38000000
   19fe0:	bxne	lr
   19fe4:	bics	r2, r2, #-16777216	; 0xff000000
   19fe8:	bxeq	lr
   19fec:	teq	r3, #-16777216	; 0xff000000
   19ff0:	orreq	r1, r1, #524288	; 0x80000
   19ff4:	bxeq	lr
   19ff8:	push	{r4, r5, lr}
   19ffc:	mov	r4, #896	; 0x380
   1a000:	and	r5, r1, #-2147483648	; 0x80000000
   1a004:	bic	r1, r1, #-2147483648	; 0x80000000
   1a008:	b	19e14 <__assert_fail@plt+0x8af0>
   1a00c:	orrs	r2, r0, r1
   1a010:	bxeq	lr
   1a014:	push	{r4, r5, lr}
   1a018:	mov	r5, #0
   1a01c:	b	1a03c <__assert_fail@plt+0x8d18>
   1a020:	orrs	r2, r0, r1
   1a024:	bxeq	lr
   1a028:	push	{r4, r5, lr}
   1a02c:	ands	r5, r1, #-2147483648	; 0x80000000
   1a030:	bpl	1a03c <__assert_fail@plt+0x8d18>
   1a034:	rsbs	r0, r0, #0
   1a038:	rsc	r1, r1, #0
   1a03c:	mov	r4, #1024	; 0x400
   1a040:	add	r4, r4, #50	; 0x32
   1a044:	lsrs	ip, r1, #22
   1a048:	beq	19db8 <__assert_fail@plt+0x8a94>
   1a04c:	mov	r2, #3
   1a050:	lsrs	ip, ip, #3
   1a054:	addne	r2, r2, #3
   1a058:	lsrs	ip, ip, #3
   1a05c:	addne	r2, r2, #3
   1a060:	add	r2, r2, ip, lsr #3
   1a064:	rsb	r3, r2, #32
   1a068:	lsl	ip, r0, r3
   1a06c:	lsr	r0, r0, r2
   1a070:	orr	r0, r0, r1, lsl r3
   1a074:	lsr	r1, r1, r2
   1a078:	add	r4, r4, r2
   1a07c:	b	19db8 <__assert_fail@plt+0x8a94>
   1a080:	cmp	r3, #0
   1a084:	cmpeq	r2, #0
   1a088:	bne	1a0a0 <__assert_fail@plt+0x8d7c>
   1a08c:	cmp	r1, #0
   1a090:	cmpeq	r0, #0
   1a094:	mvnne	r1, #0
   1a098:	mvnne	r0, #0
   1a09c:	b	1a0bc <__assert_fail@plt+0x8d98>
   1a0a0:	sub	sp, sp, #8
   1a0a4:	push	{sp, lr}
   1a0a8:	bl	1a138 <__assert_fail@plt+0x8e14>
   1a0ac:	ldr	lr, [sp, #4]
   1a0b0:	add	sp, sp, #8
   1a0b4:	pop	{r2, r3}
   1a0b8:	bx	lr
   1a0bc:	push	{r1, lr}
   1a0c0:	mov	r0, #8
   1a0c4:	bl	11078 <raise@plt>
   1a0c8:	pop	{r1, pc}
   1a0cc:	vmov	d7, r0, r1
   1a0d0:	vcmpe.f64	d7, #0.0
   1a0d4:	vmrs	APSR_nzcv, fpscr
   1a0d8:	bmi	1a0e0 <__assert_fail@plt+0x8dbc>
   1a0dc:	b	1a0f8 <__assert_fail@plt+0x8dd4>
   1a0e0:	push	{r4, lr}
   1a0e4:	eor	r1, r1, #-2147483648	; 0x80000000
   1a0e8:	bl	1a0f8 <__assert_fail@plt+0x8dd4>
   1a0ec:	rsbs	r0, r0, #0
   1a0f0:	rsc	r1, r1, #0
   1a0f4:	pop	{r4, pc}
   1a0f8:	vmov	d6, r0, r1
   1a0fc:	vldr	d7, [pc, #36]	; 1a128 <__assert_fail@plt+0x8e04>
   1a100:	vldr	d5, [pc, #40]	; 1a130 <__assert_fail@plt+0x8e0c>
   1a104:	vmul.f64	d7, d6, d7
   1a108:	vcvt.u32.f64	s14, d7
   1a10c:	vcvt.f64.u32	d4, s14
   1a110:	vmov	r1, s14
   1a114:	vmls.f64	d6, d4, d5
   1a118:	vcvt.u32.f64	s15, d6
   1a11c:	vmov	r0, s15
   1a120:	bx	lr
   1a124:	nop			; (mov r0, r0)
   1a128:	andeq	r0, r0, r0
   1a12c:	ldclcc	0, cr0, [r0]
   1a130:	andeq	r0, r0, r0
   1a134:	mvnsmi	r0, r0
   1a138:	cmp	r1, r3
   1a13c:	cmpeq	r0, r2
   1a140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a144:	mov	r4, r0
   1a148:	movcc	r0, #0
   1a14c:	mov	r5, r1
   1a150:	ldr	lr, [sp, #36]	; 0x24
   1a154:	movcc	r1, r0
   1a158:	bcc	1a254 <__assert_fail@plt+0x8f30>
   1a15c:	cmp	r3, #0
   1a160:	clzeq	ip, r2
   1a164:	clzne	ip, r3
   1a168:	addeq	ip, ip, #32
   1a16c:	cmp	r5, #0
   1a170:	clzeq	r1, r4
   1a174:	addeq	r1, r1, #32
   1a178:	clzne	r1, r5
   1a17c:	sub	ip, ip, r1
   1a180:	sub	sl, ip, #32
   1a184:	lsl	r9, r3, ip
   1a188:	rsb	fp, ip, #32
   1a18c:	orr	r9, r9, r2, lsl sl
   1a190:	orr	r9, r9, r2, lsr fp
   1a194:	lsl	r8, r2, ip
   1a198:	cmp	r5, r9
   1a19c:	cmpeq	r4, r8
   1a1a0:	movcc	r0, #0
   1a1a4:	movcc	r1, r0
   1a1a8:	bcc	1a1c4 <__assert_fail@plt+0x8ea0>
   1a1ac:	mov	r0, #1
   1a1b0:	subs	r4, r4, r8
   1a1b4:	lsl	r1, r0, sl
   1a1b8:	orr	r1, r1, r0, lsr fp
   1a1bc:	lsl	r0, r0, ip
   1a1c0:	sbc	r5, r5, r9
   1a1c4:	cmp	ip, #0
   1a1c8:	beq	1a254 <__assert_fail@plt+0x8f30>
   1a1cc:	lsr	r6, r8, #1
   1a1d0:	orr	r6, r6, r9, lsl #31
   1a1d4:	lsr	r7, r9, #1
   1a1d8:	mov	r2, ip
   1a1dc:	b	1a200 <__assert_fail@plt+0x8edc>
   1a1e0:	subs	r3, r4, r6
   1a1e4:	sbc	r8, r5, r7
   1a1e8:	adds	r3, r3, r3
   1a1ec:	adc	r8, r8, r8
   1a1f0:	adds	r4, r3, #1
   1a1f4:	adc	r5, r8, #0
   1a1f8:	subs	r2, r2, #1
   1a1fc:	beq	1a21c <__assert_fail@plt+0x8ef8>
   1a200:	cmp	r5, r7
   1a204:	cmpeq	r4, r6
   1a208:	bcs	1a1e0 <__assert_fail@plt+0x8ebc>
   1a20c:	adds	r4, r4, r4
   1a210:	adc	r5, r5, r5
   1a214:	subs	r2, r2, #1
   1a218:	bne	1a200 <__assert_fail@plt+0x8edc>
   1a21c:	lsr	r3, r4, ip
   1a220:	orr	r3, r3, r5, lsl fp
   1a224:	lsr	r2, r5, ip
   1a228:	orr	r3, r3, r5, lsr sl
   1a22c:	adds	r0, r0, r4
   1a230:	mov	r4, r3
   1a234:	lsl	r3, r2, ip
   1a238:	orr	r3, r3, r4, lsl sl
   1a23c:	lsl	ip, r4, ip
   1a240:	orr	r3, r3, r4, lsr fp
   1a244:	adc	r1, r1, r5
   1a248:	subs	r0, r0, ip
   1a24c:	mov	r5, r2
   1a250:	sbc	r1, r1, r3
   1a254:	cmp	lr, #0
   1a258:	strdne	r4, [lr]
   1a25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a260:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a264:	mov	r7, r0
   1a268:	ldr	r6, [pc, #72]	; 1a2b8 <__assert_fail@plt+0x8f94>
   1a26c:	ldr	r5, [pc, #72]	; 1a2bc <__assert_fail@plt+0x8f98>
   1a270:	add	r6, pc, r6
   1a274:	add	r5, pc, r5
   1a278:	sub	r6, r6, r5
   1a27c:	mov	r8, r1
   1a280:	mov	r9, r2
   1a284:	bl	11040 <calloc@plt-0x20>
   1a288:	asrs	r6, r6, #2
   1a28c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a290:	mov	r4, #0
   1a294:	add	r4, r4, #1
   1a298:	ldr	r3, [r5], #4
   1a29c:	mov	r2, r9
   1a2a0:	mov	r1, r8
   1a2a4:	mov	r0, r7
   1a2a8:	blx	r3
   1a2ac:	cmp	r6, r4
   1a2b0:	bne	1a294 <__assert_fail@plt+0x8f70>
   1a2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2b8:	muleq	r1, r4, ip
   1a2bc:	andeq	r2, r1, ip, lsl #25
   1a2c0:	bx	lr
   1a2c4:	ldr	r3, [pc, #12]	; 1a2d8 <__assert_fail@plt+0x8fb4>
   1a2c8:	mov	r1, #0
   1a2cc:	add	r3, pc, r3
   1a2d0:	ldr	r2, [r3]
   1a2d4:	b	1121c <__cxa_atexit@plt>
   1a2d8:	andeq	r2, r1, r0, lsr lr

Disassembly of section .fini:

0001a2dc <.fini>:
   1a2dc:	push	{r3, lr}
   1a2e0:	pop	{r3, pc}
