
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010bdc <.init>:
   10bdc:	push	{r3, lr}
   10be0:	bl	10e90 <__assert_fail@plt+0x48>
   10be4:	pop	{r3, pc}

Disassembly of section .plt:

00010be8 <calloc@plt-0x14>:
   10be8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bec:	ldr	lr, [pc, #4]	; 10bf8 <calloc@plt-0x4>
   10bf0:	add	lr, pc, lr
   10bf4:	ldr	pc, [lr, #8]!
   10bf8:	andeq	r7, r1, r8, lsl #8

00010bfc <calloc@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1032]!	; 0x408

00010c08 <fputs_unlocked@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1024]!	; 0x400

00010c14 <raise@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c20 <strcmp@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c2c <strtol@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c38 <printf@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #992]!	; 0x3e0

00010c44 <fflush@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #984]!	; 0x3d8

00010c50 <free@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #976]!	; 0x3d0

00010c5c <_exit@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #968]!	; 0x3c8

00010c68 <memcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #960]!	; 0x3c0

00010c74 <execvp@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #952]!	; 0x3b8

00010c80 <mbsinit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #944]!	; 0x3b0

00010c8c <memcmp@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #936]!	; 0x3a8

00010c98 <fputc_unlocked@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #928]!	; 0x3a0

00010ca4 <realloc@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #920]!	; 0x398

00010cb0 <getpriority@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #912]!	; 0x390

00010cbc <textdomain@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #904]!	; 0x388

00010cc8 <iswprint@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #896]!	; 0x380

00010cd4 <fwrite@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #888]!	; 0x378

00010ce0 <lseek64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #880]!	; 0x370

00010cec <__ctype_get_mb_cur_max@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #872]!	; 0x368

00010cf8 <__fpending@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #864]!	; 0x360

00010d04 <ferror_unlocked@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #856]!	; 0x358

00010d10 <mbrtowc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #848]!	; 0x350

00010d1c <error@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #840]!	; 0x348

00010d28 <setpriority@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #832]!	; 0x340

00010d34 <malloc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #824]!	; 0x338

00010d40 <__libc_start_main@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #816]!	; 0x330

00010d4c <__freading@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #808]!	; 0x328

00010d58 <__gmon_start__@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #800]!	; 0x320

00010d64 <getopt_long@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #792]!	; 0x318

00010d70 <__ctype_b_loc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #784]!	; 0x310

00010d7c <exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #776]!	; 0x308

00010d88 <gettext@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #768]!	; 0x300

00010d94 <strlen@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #760]!	; 0x2f8

00010da0 <strchr@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #752]!	; 0x2f0

00010dac <fprintf@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #744]!	; 0x2e8

00010db8 <__errno_location@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #736]!	; 0x2e0

00010dc4 <__cxa_atexit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #728]!	; 0x2d8

00010dd0 <memset@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #720]!	; 0x2d0

00010ddc <fileno@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #712]!	; 0x2c8

00010de8 <fclose@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #704]!	; 0x2c0

00010df4 <fseeko64@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #696]!	; 0x2b8

00010e00 <setlocale@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #688]!	; 0x2b0

00010e0c <strrchr@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #680]!	; 0x2a8

00010e18 <nl_langinfo@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #672]!	; 0x2a0

00010e24 <bindtextdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #664]!	; 0x298

00010e30 <strncmp@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #656]!	; 0x290

00010e3c <abort@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #648]!	; 0x288

00010e48 <__assert_fail@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #640]!	; 0x280

Disassembly of section .text:

00010e54 <.text>:
   10e54:	mov	fp, #0
   10e58:	mov	lr, #0
   10e5c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e60:	mov	r2, sp
   10e64:	push	{r2}		; (str r2, [sp, #-4]!)
   10e68:	push	{r0}		; (str r0, [sp, #-4]!)
   10e6c:	ldr	ip, [pc, #16]	; 10e84 <__assert_fail@plt+0x3c>
   10e70:	push	{ip}		; (str ip, [sp, #-4]!)
   10e74:	ldr	r0, [pc, #12]	; 10e88 <__assert_fail@plt+0x40>
   10e78:	ldr	r3, [pc, #12]	; 10e8c <__assert_fail@plt+0x44>
   10e7c:	bl	10d40 <__libc_start_main@plt>
   10e80:	bl	10e3c <abort@plt>
   10e84:	andeq	r7, r1, r8, ror r2
   10e88:	andeq	r1, r1, r8, lsl r3
   10e8c:	andeq	r7, r1, r8, lsl r2
   10e90:	ldr	r3, [pc, #20]	; 10eac <__assert_fail@plt+0x64>
   10e94:	ldr	r2, [pc, #20]	; 10eb0 <__assert_fail@plt+0x68>
   10e98:	add	r3, pc, r3
   10e9c:	ldr	r2, [r3, r2]
   10ea0:	cmp	r2, #0
   10ea4:	bxeq	lr
   10ea8:	b	10d58 <__gmon_start__@plt>
   10eac:	andeq	r7, r1, r0, ror #2
   10eb0:	ldrdeq	r0, [r0], -r4
   10eb4:	ldr	r3, [pc, #28]	; 10ed8 <__assert_fail@plt+0x90>
   10eb8:	ldr	r0, [pc, #28]	; 10edc <__assert_fail@plt+0x94>
   10ebc:	sub	r3, r3, r0
   10ec0:	cmp	r3, #6
   10ec4:	bxls	lr
   10ec8:	ldr	r3, [pc, #16]	; 10ee0 <__assert_fail@plt+0x98>
   10ecc:	cmp	r3, #0
   10ed0:	bxeq	lr
   10ed4:	bx	r3
   10ed8:	andeq	r8, r2, fp, lsr #2
   10edc:	andeq	r8, r2, r8, lsr #2
   10ee0:	andeq	r0, r0, r0
   10ee4:	ldr	r1, [pc, #36]	; 10f10 <__assert_fail@plt+0xc8>
   10ee8:	ldr	r0, [pc, #36]	; 10f14 <__assert_fail@plt+0xcc>
   10eec:	sub	r1, r1, r0
   10ef0:	asr	r1, r1, #2
   10ef4:	add	r1, r1, r1, lsr #31
   10ef8:	asrs	r1, r1, #1
   10efc:	bxeq	lr
   10f00:	ldr	r3, [pc, #16]	; 10f18 <__assert_fail@plt+0xd0>
   10f04:	cmp	r3, #0
   10f08:	bxeq	lr
   10f0c:	bx	r3
   10f10:	andeq	r8, r2, r8, lsr #2
   10f14:	andeq	r8, r2, r8, lsr #2
   10f18:	andeq	r0, r0, r0
   10f1c:	push	{r4, lr}
   10f20:	ldr	r4, [pc, #24]	; 10f40 <__assert_fail@plt+0xf8>
   10f24:	ldrb	r3, [r4]
   10f28:	cmp	r3, #0
   10f2c:	popne	{r4, pc}
   10f30:	bl	10eb4 <__assert_fail@plt+0x6c>
   10f34:	mov	r3, #1
   10f38:	strb	r3, [r4]
   10f3c:	pop	{r4, pc}
   10f40:	andeq	r8, r2, r4, asr #2
   10f44:	ldr	r0, [pc, #40]	; 10f74 <__assert_fail@plt+0x12c>
   10f48:	ldr	r3, [r0]
   10f4c:	cmp	r3, #0
   10f50:	bne	10f58 <__assert_fail@plt+0x110>
   10f54:	b	10ee4 <__assert_fail@plt+0x9c>
   10f58:	ldr	r3, [pc, #24]	; 10f78 <__assert_fail@plt+0x130>
   10f5c:	cmp	r3, #0
   10f60:	beq	10f54 <__assert_fail@plt+0x10c>
   10f64:	push	{r4, lr}
   10f68:	blx	r3
   10f6c:	pop	{r4, lr}
   10f70:	b	10ee4 <__assert_fail@plt+0x9c>
   10f74:	andeq	r7, r2, r4, lsl pc
   10f78:	andeq	r0, r0, r0
   10f7c:	push	{fp}		; (str fp, [sp, #-4]!)
   10f80:	add	fp, sp, #0
   10f84:	sub	sp, sp, #12
   10f88:	str	r0, [fp, #-8]
   10f8c:	ldr	r3, [fp, #-8]
   10f90:	cmp	r3, #1
   10f94:	beq	10fa4 <__assert_fail@plt+0x15c>
   10f98:	ldr	r2, [pc, #20]	; 10fb4 <__assert_fail@plt+0x16c>
   10f9c:	ldr	r3, [fp, #-8]
   10fa0:	str	r3, [r2]
   10fa4:	nop			; (mov r0, r0)
   10fa8:	add	sp, fp, #0
   10fac:	pop	{fp}		; (ldr fp, [sp], #4)
   10fb0:	bx	lr
   10fb4:	andeq	r8, r2, r4, ror #1
   10fb8:	push	{fp, lr}
   10fbc:	add	fp, sp, #4
   10fc0:	ldr	r0, [pc, #32]	; 10fe8 <__assert_fail@plt+0x1a0>
   10fc4:	bl	10d88 <gettext@plt>
   10fc8:	mov	r2, r0
   10fcc:	ldr	r3, [pc, #24]	; 10fec <__assert_fail@plt+0x1a4>
   10fd0:	ldr	r3, [r3]
   10fd4:	mov	r1, r3
   10fd8:	mov	r0, r2
   10fdc:	bl	10c08 <fputs_unlocked@plt>
   10fe0:	nop			; (mov r0, r0)
   10fe4:	pop	{fp, pc}
   10fe8:	andeq	r7, r1, r0, lsr #5
   10fec:	andeq	r8, r2, ip, lsr r1
   10ff0:	push	{fp, lr}
   10ff4:	add	fp, sp, #4
   10ff8:	sub	sp, sp, #80	; 0x50
   10ffc:	str	r0, [fp, #-80]	; 0xffffffb0
   11000:	ldr	r3, [pc, #348]	; 11164 <__assert_fail@plt+0x31c>
   11004:	sub	ip, fp, #72	; 0x48
   11008:	mov	lr, r3
   1100c:	ldm	lr!, {r0, r1, r2, r3}
   11010:	stmia	ip!, {r0, r1, r2, r3}
   11014:	ldm	lr!, {r0, r1, r2, r3}
   11018:	stmia	ip!, {r0, r1, r2, r3}
   1101c:	ldm	lr!, {r0, r1, r2, r3}
   11020:	stmia	ip!, {r0, r1, r2, r3}
   11024:	ldm	lr, {r0, r1}
   11028:	stm	ip, {r0, r1}
   1102c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11030:	str	r3, [fp, #-8]
   11034:	sub	r3, fp, #72	; 0x48
   11038:	str	r3, [fp, #-12]
   1103c:	b	1104c <__assert_fail@plt+0x204>
   11040:	ldr	r3, [fp, #-12]
   11044:	add	r3, r3, #8
   11048:	str	r3, [fp, #-12]
   1104c:	ldr	r3, [fp, #-12]
   11050:	ldr	r3, [r3]
   11054:	cmp	r3, #0
   11058:	beq	1107c <__assert_fail@plt+0x234>
   1105c:	ldr	r3, [fp, #-12]
   11060:	ldr	r3, [r3]
   11064:	mov	r1, r3
   11068:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1106c:	bl	10c20 <strcmp@plt>
   11070:	mov	r3, r0
   11074:	cmp	r3, #0
   11078:	bne	11040 <__assert_fail@plt+0x1f8>
   1107c:	ldr	r3, [fp, #-12]
   11080:	ldr	r3, [r3, #4]
   11084:	cmp	r3, #0
   11088:	beq	11098 <__assert_fail@plt+0x250>
   1108c:	ldr	r3, [fp, #-12]
   11090:	ldr	r3, [r3, #4]
   11094:	str	r3, [fp, #-8]
   11098:	ldr	r0, [pc, #200]	; 11168 <__assert_fail@plt+0x320>
   1109c:	bl	10d88 <gettext@plt>
   110a0:	mov	r3, r0
   110a4:	ldr	r2, [pc, #192]	; 1116c <__assert_fail@plt+0x324>
   110a8:	ldr	r1, [pc, #192]	; 11170 <__assert_fail@plt+0x328>
   110ac:	mov	r0, r3
   110b0:	bl	10c38 <printf@plt>
   110b4:	mov	r1, #0
   110b8:	mov	r0, #5
   110bc:	bl	10e00 <setlocale@plt>
   110c0:	str	r0, [fp, #-16]
   110c4:	ldr	r3, [fp, #-16]
   110c8:	cmp	r3, #0
   110cc:	beq	1110c <__assert_fail@plt+0x2c4>
   110d0:	mov	r2, #3
   110d4:	ldr	r1, [pc, #152]	; 11174 <__assert_fail@plt+0x32c>
   110d8:	ldr	r0, [fp, #-16]
   110dc:	bl	10e30 <strncmp@plt>
   110e0:	mov	r3, r0
   110e4:	cmp	r3, #0
   110e8:	beq	1110c <__assert_fail@plt+0x2c4>
   110ec:	ldr	r0, [pc, #132]	; 11178 <__assert_fail@plt+0x330>
   110f0:	bl	10d88 <gettext@plt>
   110f4:	mov	r2, r0
   110f8:	ldr	r3, [pc, #124]	; 1117c <__assert_fail@plt+0x334>
   110fc:	ldr	r3, [r3]
   11100:	mov	r1, r3
   11104:	mov	r0, r2
   11108:	bl	10c08 <fputs_unlocked@plt>
   1110c:	ldr	r0, [pc, #108]	; 11180 <__assert_fail@plt+0x338>
   11110:	bl	10d88 <gettext@plt>
   11114:	mov	r3, r0
   11118:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1111c:	ldr	r1, [pc, #72]	; 1116c <__assert_fail@plt+0x324>
   11120:	mov	r0, r3
   11124:	bl	10c38 <printf@plt>
   11128:	ldr	r0, [pc, #84]	; 11184 <__assert_fail@plt+0x33c>
   1112c:	bl	10d88 <gettext@plt>
   11130:	ldr	r2, [fp, #-8]
   11134:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11138:	cmp	r2, r3
   1113c:	bne	11148 <__assert_fail@plt+0x300>
   11140:	ldr	r3, [pc, #64]	; 11188 <__assert_fail@plt+0x340>
   11144:	b	1114c <__assert_fail@plt+0x304>
   11148:	ldr	r3, [pc, #60]	; 1118c <__assert_fail@plt+0x344>
   1114c:	mov	r2, r3
   11150:	ldr	r1, [fp, #-8]
   11154:	bl	10c38 <printf@plt>
   11158:	nop			; (mov r0, r0)
   1115c:	sub	sp, fp, #4
   11160:	pop	{fp, pc}
   11164:	andeq	r7, r1, r0, ror #8
   11168:	andeq	r7, r1, ip, ror #5
   1116c:	andeq	r7, r1, r4, lsl #6
   11170:	andeq	r7, r1, ip, lsr #6
   11174:	andeq	r7, r1, ip, lsr r3
   11178:	andeq	r7, r1, r0, asr #6
   1117c:	andeq	r8, r2, ip, lsr r1
   11180:	andeq	r7, r1, r8, lsl #7
   11184:	andeq	r7, r1, r4, lsr #7
   11188:	ldrdeq	r7, [r1], -r8
   1118c:	andeq	r7, r1, r4, ror #7
   11190:	push	{r4, fp, lr}
   11194:	add	fp, sp, #8
   11198:	sub	sp, sp, #12
   1119c:	str	r0, [fp, #-16]
   111a0:	ldr	r3, [fp, #-16]
   111a4:	cmp	r3, #0
   111a8:	beq	111d8 <__assert_fail@plt+0x390>
   111ac:	ldr	r3, [pc, #236]	; 112a0 <__assert_fail@plt+0x458>
   111b0:	ldr	r4, [r3]
   111b4:	ldr	r0, [pc, #232]	; 112a4 <__assert_fail@plt+0x45c>
   111b8:	bl	10d88 <gettext@plt>
   111bc:	mov	r1, r0
   111c0:	ldr	r3, [pc, #224]	; 112a8 <__assert_fail@plt+0x460>
   111c4:	ldr	r3, [r3]
   111c8:	mov	r2, r3
   111cc:	mov	r0, r4
   111d0:	bl	10dac <fprintf@plt>
   111d4:	b	11298 <__assert_fail@plt+0x450>
   111d8:	ldr	r0, [pc, #204]	; 112ac <__assert_fail@plt+0x464>
   111dc:	bl	10d88 <gettext@plt>
   111e0:	mov	r2, r0
   111e4:	ldr	r3, [pc, #188]	; 112a8 <__assert_fail@plt+0x460>
   111e8:	ldr	r3, [r3]
   111ec:	mov	r1, r3
   111f0:	mov	r0, r2
   111f4:	bl	10c38 <printf@plt>
   111f8:	ldr	r0, [pc, #176]	; 112b0 <__assert_fail@plt+0x468>
   111fc:	bl	10d88 <gettext@plt>
   11200:	mov	r3, r0
   11204:	mov	r2, #19
   11208:	mvn	r1, #19
   1120c:	mov	r0, r3
   11210:	bl	10c38 <printf@plt>
   11214:	bl	10fb8 <__assert_fail@plt+0x170>
   11218:	ldr	r0, [pc, #148]	; 112b4 <__assert_fail@plt+0x46c>
   1121c:	bl	10d88 <gettext@plt>
   11220:	mov	r2, r0
   11224:	ldr	r3, [pc, #140]	; 112b8 <__assert_fail@plt+0x470>
   11228:	ldr	r3, [r3]
   1122c:	mov	r1, r3
   11230:	mov	r0, r2
   11234:	bl	10c08 <fputs_unlocked@plt>
   11238:	ldr	r0, [pc, #124]	; 112bc <__assert_fail@plt+0x474>
   1123c:	bl	10d88 <gettext@plt>
   11240:	mov	r2, r0
   11244:	ldr	r3, [pc, #108]	; 112b8 <__assert_fail@plt+0x470>
   11248:	ldr	r3, [r3]
   1124c:	mov	r1, r3
   11250:	mov	r0, r2
   11254:	bl	10c08 <fputs_unlocked@plt>
   11258:	ldr	r0, [pc, #96]	; 112c0 <__assert_fail@plt+0x478>
   1125c:	bl	10d88 <gettext@plt>
   11260:	mov	r2, r0
   11264:	ldr	r3, [pc, #76]	; 112b8 <__assert_fail@plt+0x470>
   11268:	ldr	r3, [r3]
   1126c:	mov	r1, r3
   11270:	mov	r0, r2
   11274:	bl	10c08 <fputs_unlocked@plt>
   11278:	ldr	r0, [pc, #68]	; 112c4 <__assert_fail@plt+0x47c>
   1127c:	bl	10d88 <gettext@plt>
   11280:	mov	r3, r0
   11284:	ldr	r1, [pc, #60]	; 112c8 <__assert_fail@plt+0x480>
   11288:	mov	r0, r3
   1128c:	bl	10c38 <printf@plt>
   11290:	ldr	r0, [pc, #48]	; 112c8 <__assert_fail@plt+0x480>
   11294:	bl	10ff0 <__assert_fail@plt+0x1a8>
   11298:	ldr	r0, [fp, #-16]
   1129c:	bl	10d7c <exit@plt>
   112a0:	andeq	r8, r2, r8, lsr r1
   112a4:	strdeq	r7, [r1], -r4
   112a8:	andeq	r8, r2, r0, asr r1
   112ac:	andeq	r7, r1, ip, lsl r5
   112b0:	andeq	r7, r1, r4, asr #10
   112b4:	andeq	r7, r1, r4, lsr #12
   112b8:	andeq	r8, r2, ip, lsr r1
   112bc:	andeq	r7, r1, r8, ror #12
   112c0:	muleq	r1, r8, r6
   112c4:	ldrdeq	r7, [r1], -r0
   112c8:	muleq	r1, r0, r7
   112cc:	push	{fp}		; (str fp, [sp, #-4]!)
   112d0:	add	fp, sp, #0
   112d4:	sub	sp, sp, #12
   112d8:	str	r0, [fp, #-8]
   112dc:	ldr	r3, [fp, #-8]
   112e0:	cmp	r3, #13
   112e4:	beq	112f4 <__assert_fail@plt+0x4ac>
   112e8:	ldr	r3, [fp, #-8]
   112ec:	cmp	r3, #1
   112f0:	bne	112fc <__assert_fail@plt+0x4b4>
   112f4:	mov	r3, #1
   112f8:	b	11300 <__assert_fail@plt+0x4b8>
   112fc:	mov	r3, #0
   11300:	and	r3, r3, #1
   11304:	uxtb	r3, r3
   11308:	mov	r0, r3
   1130c:	add	sp, fp, #0
   11310:	pop	{fp}		; (ldr fp, [sp], #4)
   11314:	bx	lr
   11318:	push	{r4, r5, fp, lr}
   1131c:	add	fp, sp, #12
   11320:	sub	sp, sp, #64	; 0x40
   11324:	str	r0, [fp, #-64]	; 0xffffffc0
   11328:	str	r1, [fp, #-68]	; 0xffffffbc
   1132c:	mov	r3, #10
   11330:	str	r3, [fp, #-16]
   11334:	mov	r3, #0
   11338:	str	r3, [fp, #-20]	; 0xffffffec
   1133c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11340:	ldr	r3, [r3]
   11344:	mov	r0, r3
   11348:	bl	11a48 <__assert_fail@plt+0xc00>
   1134c:	ldr	r1, [pc, #1292]	; 11860 <__assert_fail@plt+0xa18>
   11350:	mov	r0, #6
   11354:	bl	10e00 <setlocale@plt>
   11358:	ldr	r1, [pc, #1284]	; 11864 <__assert_fail@plt+0xa1c>
   1135c:	ldr	r0, [pc, #1284]	; 11868 <__assert_fail@plt+0xa20>
   11360:	bl	10e24 <bindtextdomain@plt>
   11364:	ldr	r0, [pc, #1276]	; 11868 <__assert_fail@plt+0xa20>
   11368:	bl	10cbc <textdomain@plt>
   1136c:	mov	r0, #125	; 0x7d
   11370:	bl	10f7c <__assert_fail@plt+0x134>
   11374:	ldr	r0, [pc, #1264]	; 1186c <__assert_fail@plt+0xa24>
   11378:	bl	1727c <__assert_fail@plt+0x6434>
   1137c:	mov	r3, #1
   11380:	str	r3, [fp, #-24]	; 0xffffffe8
   11384:	b	11538 <__assert_fail@plt+0x6f0>
   11388:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1138c:	lsl	r3, r3, #2
   11390:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11394:	add	r3, r2, r3
   11398:	ldr	r3, [r3]
   1139c:	str	r3, [fp, #-28]	; 0xffffffe4
   113a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113a4:	ldrb	r3, [r3]
   113a8:	cmp	r3, #45	; 0x2d
   113ac:	bne	11420 <__assert_fail@plt+0x5d8>
   113b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113b4:	add	r3, r3, #1
   113b8:	ldrb	r3, [r3]
   113bc:	cmp	r3, #45	; 0x2d
   113c0:	beq	113d8 <__assert_fail@plt+0x590>
   113c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113c8:	add	r3, r3, #1
   113cc:	ldrb	r3, [r3]
   113d0:	cmp	r3, #43	; 0x2b
   113d4:	bne	113e0 <__assert_fail@plt+0x598>
   113d8:	mov	r3, #1
   113dc:	b	113e4 <__assert_fail@plt+0x59c>
   113e0:	mov	r3, #0
   113e4:	add	r3, r3, #1
   113e8:	mov	r2, r3
   113ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   113f0:	add	r3, r3, r2
   113f4:	ldrb	r3, [r3]
   113f8:	sub	r3, r3, #48	; 0x30
   113fc:	cmp	r3, #9
   11400:	bhi	11420 <__assert_fail@plt+0x5d8>
   11404:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11408:	add	r3, r3, #1
   1140c:	str	r3, [fp, #-20]	; 0xffffffec
   11410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11414:	add	r3, r3, #1
   11418:	str	r3, [fp, #-24]	; 0xffffffe8
   1141c:	b	11538 <__assert_fail@plt+0x6f0>
   11420:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11424:	sub	r3, r3, #1
   11428:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1142c:	sub	r3, r2, r3
   11430:	str	r3, [fp, #-32]	; 0xffffffe0
   11434:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11438:	sub	r3, r3, #-1073741823	; 0xc0000001
   1143c:	lsl	r3, r3, #2
   11440:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11444:	add	r3, r2, r3
   11448:	str	r3, [fp, #-36]	; 0xffffffdc
   1144c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11450:	ldr	r2, [r3]
   11454:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11458:	str	r2, [r3]
   1145c:	ldr	r3, [pc, #1036]	; 11870 <__assert_fail@plt+0xa28>
   11460:	mov	r2, #0
   11464:	str	r2, [r3]
   11468:	mov	r3, #0
   1146c:	str	r3, [sp]
   11470:	ldr	r3, [pc, #1020]	; 11874 <__assert_fail@plt+0xa2c>
   11474:	ldr	r2, [pc, #1020]	; 11878 <__assert_fail@plt+0xa30>
   11478:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1147c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11480:	bl	10d64 <getopt_long@plt>
   11484:	str	r0, [fp, #-40]	; 0xffffffd8
   11488:	ldr	r3, [pc, #992]	; 11870 <__assert_fail@plt+0xa28>
   1148c:	ldr	r3, [r3]
   11490:	sub	r3, r3, #1
   11494:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11498:	add	r3, r2, r3
   1149c:	str	r3, [fp, #-24]	; 0xffffffe8
   114a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   114a4:	cmn	r3, #2
   114a8:	beq	114e0 <__assert_fail@plt+0x698>
   114ac:	cmn	r3, #2
   114b0:	bgt	114c0 <__assert_fail@plt+0x678>
   114b4:	cmn	r3, #3
   114b8:	beq	114e8 <__assert_fail@plt+0x6a0>
   114bc:	b	11520 <__assert_fail@plt+0x6d8>
   114c0:	cmn	r3, #1
   114c4:	beq	11528 <__assert_fail@plt+0x6e0>
   114c8:	cmp	r3, #110	; 0x6e
   114cc:	bne	11520 <__assert_fail@plt+0x6d8>
   114d0:	ldr	r3, [pc, #932]	; 1187c <__assert_fail@plt+0xa34>
   114d4:	ldr	r3, [r3]
   114d8:	str	r3, [fp, #-20]	; 0xffffffec
   114dc:	b	1152c <__assert_fail@plt+0x6e4>
   114e0:	mov	r0, #0
   114e4:	bl	11190 <__assert_fail@plt+0x348>
   114e8:	ldr	r3, [pc, #912]	; 11880 <__assert_fail@plt+0xa38>
   114ec:	ldr	r0, [r3]
   114f0:	ldr	r3, [pc, #908]	; 11884 <__assert_fail@plt+0xa3c>
   114f4:	ldr	r2, [r3]
   114f8:	mov	r3, #0
   114fc:	str	r3, [sp, #4]
   11500:	ldr	r3, [pc, #896]	; 11888 <__assert_fail@plt+0xa40>
   11504:	str	r3, [sp]
   11508:	mov	r3, r2
   1150c:	ldr	r2, [pc, #888]	; 1188c <__assert_fail@plt+0xa44>
   11510:	ldr	r1, [pc, #888]	; 11890 <__assert_fail@plt+0xa48>
   11514:	bl	14844 <__assert_fail@plt+0x39fc>
   11518:	mov	r0, #0
   1151c:	bl	10d7c <exit@plt>
   11520:	mov	r0, #125	; 0x7d
   11524:	bl	11190 <__assert_fail@plt+0x348>
   11528:	nop			; (mov r0, r0)
   1152c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11530:	cmn	r3, #1
   11534:	beq	1154c <__assert_fail@plt+0x704>
   11538:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1153c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11540:	cmp	r2, r3
   11544:	blt	11388 <__assert_fail@plt+0x540>
   11548:	b	11550 <__assert_fail@plt+0x708>
   1154c:	nop			; (mov r0, r0)
   11550:	ldr	r3, [fp, #-20]	; 0xffffffec
   11554:	cmp	r3, #0
   11558:	beq	115e4 <__assert_fail@plt+0x79c>
   1155c:	sub	r2, fp, #56	; 0x38
   11560:	ldr	r3, [pc, #760]	; 11860 <__assert_fail@plt+0xa18>
   11564:	str	r3, [sp]
   11568:	mov	r3, r2
   1156c:	mov	r2, #10
   11570:	mov	r1, #0
   11574:	ldr	r0, [fp, #-20]	; 0xffffffec
   11578:	bl	15748 <__assert_fail@plt+0x4900>
   1157c:	mov	r3, r0
   11580:	cmp	r3, #1
   11584:	bls	115b0 <__assert_fail@plt+0x768>
   11588:	ldr	r0, [pc, #772]	; 11894 <__assert_fail@plt+0xa4c>
   1158c:	bl	10d88 <gettext@plt>
   11590:	mov	r4, r0
   11594:	ldr	r0, [fp, #-20]	; 0xffffffec
   11598:	bl	14178 <__assert_fail@plt+0x3330>
   1159c:	mov	r3, r0
   115a0:	mov	r2, r4
   115a4:	mov	r1, #0
   115a8:	mov	r0, #125	; 0x7d
   115ac:	bl	10d1c <error@plt>
   115b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   115b4:	cmn	r3, #39	; 0x27
   115b8:	beq	115c8 <__assert_fail@plt+0x780>
   115bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   115c0:	cmn	r3, #38	; 0x26
   115c4:	blt	115dc <__assert_fail@plt+0x794>
   115c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   115cc:	cmp	r3, #39	; 0x27
   115d0:	movlt	r3, r3
   115d4:	movge	r3, #39	; 0x27
   115d8:	b	115e0 <__assert_fail@plt+0x798>
   115dc:	mvn	r3, #38	; 0x26
   115e0:	str	r3, [fp, #-16]
   115e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   115e8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   115ec:	cmp	r2, r3
   115f0:	bne	116a0 <__assert_fail@plt+0x858>
   115f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   115f8:	cmp	r3, #0
   115fc:	beq	11624 <__assert_fail@plt+0x7dc>
   11600:	ldr	r0, [pc, #656]	; 11898 <__assert_fail@plt+0xa50>
   11604:	bl	10d88 <gettext@plt>
   11608:	mov	r3, r0
   1160c:	mov	r2, r3
   11610:	mov	r1, #0
   11614:	mov	r0, #0
   11618:	bl	10d1c <error@plt>
   1161c:	mov	r0, #125	; 0x7d
   11620:	bl	11190 <__assert_fail@plt+0x348>
   11624:	bl	10db8 <__errno_location@plt>
   11628:	mov	r2, r0
   1162c:	mov	r3, #0
   11630:	str	r3, [r2]
   11634:	mov	r1, #0
   11638:	mov	r0, #0
   1163c:	bl	10cb0 <getpriority@plt>
   11640:	str	r0, [fp, #-44]	; 0xffffffd4
   11644:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11648:	cmn	r3, #1
   1164c:	bne	1168c <__assert_fail@plt+0x844>
   11650:	bl	10db8 <__errno_location@plt>
   11654:	mov	r3, r0
   11658:	ldr	r3, [r3]
   1165c:	cmp	r3, #0
   11660:	beq	1168c <__assert_fail@plt+0x844>
   11664:	bl	10db8 <__errno_location@plt>
   11668:	mov	r3, r0
   1166c:	ldr	r4, [r3]
   11670:	ldr	r0, [pc, #548]	; 1189c <__assert_fail@plt+0xa54>
   11674:	bl	10d88 <gettext@plt>
   11678:	mov	r3, r0
   1167c:	mov	r2, r3
   11680:	mov	r1, r4
   11684:	mov	r0, #125	; 0x7d
   11688:	bl	10d1c <error@plt>
   1168c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11690:	ldr	r0, [pc, #520]	; 118a0 <__assert_fail@plt+0xa58>
   11694:	bl	10c38 <printf@plt>
   11698:	mov	r3, #0
   1169c:	b	11854 <__assert_fail@plt+0xa0c>
   116a0:	bl	10db8 <__errno_location@plt>
   116a4:	mov	r2, r0
   116a8:	mov	r3, #0
   116ac:	str	r3, [r2]
   116b0:	mov	r1, #0
   116b4:	mov	r0, #0
   116b8:	bl	10cb0 <getpriority@plt>
   116bc:	str	r0, [fp, #-44]	; 0xffffffd4
   116c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   116c4:	cmn	r3, #1
   116c8:	bne	11708 <__assert_fail@plt+0x8c0>
   116cc:	bl	10db8 <__errno_location@plt>
   116d0:	mov	r3, r0
   116d4:	ldr	r3, [r3]
   116d8:	cmp	r3, #0
   116dc:	beq	11708 <__assert_fail@plt+0x8c0>
   116e0:	bl	10db8 <__errno_location@plt>
   116e4:	mov	r3, r0
   116e8:	ldr	r4, [r3]
   116ec:	ldr	r0, [pc, #424]	; 1189c <__assert_fail@plt+0xa54>
   116f0:	bl	10d88 <gettext@plt>
   116f4:	mov	r3, r0
   116f8:	mov	r2, r3
   116fc:	mov	r1, r4
   11700:	mov	r0, #125	; 0x7d
   11704:	bl	10d1c <error@plt>
   11708:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1170c:	ldr	r3, [fp, #-16]
   11710:	add	r3, r2, r3
   11714:	mov	r2, r3
   11718:	mov	r1, #0
   1171c:	mov	r0, #0
   11720:	bl	10d28 <setpriority@plt>
   11724:	mov	r3, r0
   11728:	cmp	r3, #0
   1172c:	moveq	r3, #1
   11730:	movne	r3, #0
   11734:	strb	r3, [fp, #-45]	; 0xffffffd3
   11738:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   1173c:	eor	r3, r3, #1
   11740:	uxtb	r3, r3
   11744:	cmp	r3, #0
   11748:	beq	117c4 <__assert_fail@plt+0x97c>
   1174c:	bl	10db8 <__errno_location@plt>
   11750:	mov	r3, r0
   11754:	ldr	r3, [r3]
   11758:	mov	r0, r3
   1175c:	bl	112cc <__assert_fail@plt+0x484>
   11760:	mov	r3, r0
   11764:	cmp	r3, #0
   11768:	beq	11774 <__assert_fail@plt+0x92c>
   1176c:	mov	r4, #0
   11770:	b	11778 <__assert_fail@plt+0x930>
   11774:	mov	r4, #125	; 0x7d
   11778:	bl	10db8 <__errno_location@plt>
   1177c:	mov	r3, r0
   11780:	ldr	r5, [r3]
   11784:	ldr	r0, [pc, #280]	; 118a4 <__assert_fail@plt+0xa5c>
   11788:	bl	10d88 <gettext@plt>
   1178c:	mov	r3, r0
   11790:	mov	r2, r3
   11794:	mov	r1, r5
   11798:	mov	r0, r4
   1179c:	bl	10d1c <error@plt>
   117a0:	ldr	r3, [pc, #256]	; 118a8 <__assert_fail@plt+0xa60>
   117a4:	ldr	r3, [r3]
   117a8:	mov	r0, r3
   117ac:	bl	10d04 <ferror_unlocked@plt>
   117b0:	mov	r3, r0
   117b4:	cmp	r3, #0
   117b8:	beq	117c4 <__assert_fail@plt+0x97c>
   117bc:	mov	r3, #125	; 0x7d
   117c0:	b	11854 <__assert_fail@plt+0xa0c>
   117c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117c8:	lsl	r3, r3, #2
   117cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   117d0:	add	r3, r2, r3
   117d4:	ldr	r0, [r3]
   117d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   117dc:	lsl	r3, r3, #2
   117e0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   117e4:	add	r3, r2, r3
   117e8:	mov	r1, r3
   117ec:	bl	10c74 <execvp@plt>
   117f0:	bl	10db8 <__errno_location@plt>
   117f4:	mov	r3, r0
   117f8:	ldr	r3, [r3]
   117fc:	cmp	r3, #2
   11800:	bne	1180c <__assert_fail@plt+0x9c4>
   11804:	mov	r3, #127	; 0x7f
   11808:	b	11810 <__assert_fail@plt+0x9c8>
   1180c:	mov	r3, #126	; 0x7e
   11810:	str	r3, [fp, #-52]	; 0xffffffcc
   11814:	bl	10db8 <__errno_location@plt>
   11818:	mov	r3, r0
   1181c:	ldr	r4, [r3]
   11820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11824:	lsl	r3, r3, #2
   11828:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1182c:	add	r3, r2, r3
   11830:	ldr	r3, [r3]
   11834:	mov	r0, r3
   11838:	bl	14178 <__assert_fail@plt+0x3330>
   1183c:	mov	r3, r0
   11840:	ldr	r2, [pc, #100]	; 118ac <__assert_fail@plt+0xa64>
   11844:	mov	r1, r4
   11848:	mov	r0, #0
   1184c:	bl	10d1c <error@plt>
   11850:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11854:	mov	r0, r3
   11858:	sub	sp, fp, #12
   1185c:	pop	{r4, r5, fp, pc}
   11860:	andeq	r7, r1, r4, ror #7
   11864:	muleq	r1, r8, r7
   11868:	strdeq	r7, [r1], -ip
   1186c:	andeq	r1, r1, r4, lsl r9
   11870:	andeq	r8, r2, r0, lsr r1
   11874:			; <UNDEFINED> instruction: 0x000174b4
   11878:			; <UNDEFINED> instruction: 0x000177b0
   1187c:	andeq	r8, r2, r0, asr #2
   11880:	andeq	r8, r2, ip, lsr r1
   11884:	andeq	r8, r2, r0, ror #1
   11888:			; <UNDEFINED> instruction: 0x000177b4
   1188c:	andeq	r7, r1, ip, lsr #6
   11890:	muleq	r1, r0, r7
   11894:	andeq	r7, r1, r4, asr #15
   11898:	ldrdeq	r7, [r1], -ip
   1189c:	andeq	r7, r1, r8, lsl #16
   118a0:	andeq	r7, r1, ip, lsl r8
   118a4:	andeq	r7, r1, r0, lsr #16
   118a8:	andeq	r8, r2, r8, lsr r1
   118ac:	andeq	r7, r1, r4, lsr r8
   118b0:	push	{fp}		; (str fp, [sp, #-4]!)
   118b4:	add	fp, sp, #0
   118b8:	sub	sp, sp, #12
   118bc:	str	r0, [fp, #-8]
   118c0:	ldr	r2, [pc, #20]	; 118dc <__assert_fail@plt+0xa94>
   118c4:	ldr	r3, [fp, #-8]
   118c8:	str	r3, [r2]
   118cc:	nop			; (mov r0, r0)
   118d0:	add	sp, fp, #0
   118d4:	pop	{fp}		; (ldr fp, [sp], #4)
   118d8:	bx	lr
   118dc:	andeq	r8, r2, r8, asr #2
   118e0:	push	{fp}		; (str fp, [sp, #-4]!)
   118e4:	add	fp, sp, #0
   118e8:	sub	sp, sp, #12
   118ec:	mov	r3, r0
   118f0:	strb	r3, [fp, #-5]
   118f4:	ldr	r2, [pc, #20]	; 11910 <__assert_fail@plt+0xac8>
   118f8:	ldrb	r3, [fp, #-5]
   118fc:	strb	r3, [r2]
   11900:	nop			; (mov r0, r0)
   11904:	add	sp, fp, #0
   11908:	pop	{fp}		; (ldr fp, [sp], #4)
   1190c:	bx	lr
   11910:	andeq	r8, r2, ip, asr #2
   11914:	push	{r4, fp, lr}
   11918:	add	fp, sp, #8
   1191c:	sub	sp, sp, #20
   11920:	ldr	r3, [pc, #256]	; 11a28 <__assert_fail@plt+0xbe0>
   11924:	ldr	r3, [r3]
   11928:	mov	r0, r3
   1192c:	bl	15fe8 <__assert_fail@plt+0x51a0>
   11930:	mov	r3, r0
   11934:	cmp	r3, #0
   11938:	beq	119f0 <__assert_fail@plt+0xba8>
   1193c:	ldr	r3, [pc, #232]	; 11a2c <__assert_fail@plt+0xbe4>
   11940:	ldrb	r3, [r3]
   11944:	eor	r3, r3, #1
   11948:	uxtb	r3, r3
   1194c:	cmp	r3, #0
   11950:	bne	11968 <__assert_fail@plt+0xb20>
   11954:	bl	10db8 <__errno_location@plt>
   11958:	mov	r3, r0
   1195c:	ldr	r3, [r3]
   11960:	cmp	r3, #32
   11964:	beq	119f0 <__assert_fail@plt+0xba8>
   11968:	ldr	r0, [pc, #192]	; 11a30 <__assert_fail@plt+0xbe8>
   1196c:	bl	10d88 <gettext@plt>
   11970:	str	r0, [fp, #-16]
   11974:	ldr	r3, [pc, #184]	; 11a34 <__assert_fail@plt+0xbec>
   11978:	ldr	r3, [r3]
   1197c:	cmp	r3, #0
   11980:	beq	119c4 <__assert_fail@plt+0xb7c>
   11984:	bl	10db8 <__errno_location@plt>
   11988:	mov	r3, r0
   1198c:	ldr	r4, [r3]
   11990:	ldr	r3, [pc, #156]	; 11a34 <__assert_fail@plt+0xbec>
   11994:	ldr	r3, [r3]
   11998:	mov	r0, r3
   1199c:	bl	13ea8 <__assert_fail@plt+0x3060>
   119a0:	mov	r2, r0
   119a4:	ldr	r3, [fp, #-16]
   119a8:	str	r3, [sp]
   119ac:	mov	r3, r2
   119b0:	ldr	r2, [pc, #128]	; 11a38 <__assert_fail@plt+0xbf0>
   119b4:	mov	r1, r4
   119b8:	mov	r0, #0
   119bc:	bl	10d1c <error@plt>
   119c0:	b	119e0 <__assert_fail@plt+0xb98>
   119c4:	bl	10db8 <__errno_location@plt>
   119c8:	mov	r3, r0
   119cc:	ldr	r1, [r3]
   119d0:	ldr	r3, [fp, #-16]
   119d4:	ldr	r2, [pc, #96]	; 11a3c <__assert_fail@plt+0xbf4>
   119d8:	mov	r0, #0
   119dc:	bl	10d1c <error@plt>
   119e0:	ldr	r3, [pc, #88]	; 11a40 <__assert_fail@plt+0xbf8>
   119e4:	ldr	r3, [r3]
   119e8:	mov	r0, r3
   119ec:	bl	10c5c <_exit@plt>
   119f0:	ldr	r3, [pc, #76]	; 11a44 <__assert_fail@plt+0xbfc>
   119f4:	ldr	r3, [r3]
   119f8:	mov	r0, r3
   119fc:	bl	15fe8 <__assert_fail@plt+0x51a0>
   11a00:	mov	r3, r0
   11a04:	cmp	r3, #0
   11a08:	beq	11a1c <__assert_fail@plt+0xbd4>
   11a0c:	ldr	r3, [pc, #44]	; 11a40 <__assert_fail@plt+0xbf8>
   11a10:	ldr	r3, [r3]
   11a14:	mov	r0, r3
   11a18:	bl	10c5c <_exit@plt>
   11a1c:	nop			; (mov r0, r0)
   11a20:	sub	sp, fp, #8
   11a24:	pop	{r4, fp, pc}
   11a28:	andeq	r8, r2, ip, lsr r1
   11a2c:	andeq	r8, r2, ip, asr #2
   11a30:	andeq	r7, r1, r8, asr #16
   11a34:	andeq	r8, r2, r8, asr #2
   11a38:	andeq	r7, r1, r4, asr r8
   11a3c:	andeq	r7, r1, ip, asr r8
   11a40:	andeq	r8, r2, r4, ror #1
   11a44:	andeq	r8, r2, r8, lsr r1
   11a48:	push	{fp, lr}
   11a4c:	add	fp, sp, #4
   11a50:	sub	sp, sp, #16
   11a54:	str	r0, [fp, #-16]
   11a58:	ldr	r3, [fp, #-16]
   11a5c:	cmp	r3, #0
   11a60:	bne	11a80 <__assert_fail@plt+0xc38>
   11a64:	ldr	r3, [pc, #220]	; 11b48 <__assert_fail@plt+0xd00>
   11a68:	ldr	r3, [r3]
   11a6c:	mov	r2, #55	; 0x37
   11a70:	mov	r1, #1
   11a74:	ldr	r0, [pc, #208]	; 11b4c <__assert_fail@plt+0xd04>
   11a78:	bl	10cd4 <fwrite@plt>
   11a7c:	bl	10e3c <abort@plt>
   11a80:	mov	r1, #47	; 0x2f
   11a84:	ldr	r0, [fp, #-16]
   11a88:	bl	10e0c <strrchr@plt>
   11a8c:	str	r0, [fp, #-8]
   11a90:	ldr	r3, [fp, #-8]
   11a94:	cmp	r3, #0
   11a98:	beq	11aa8 <__assert_fail@plt+0xc60>
   11a9c:	ldr	r3, [fp, #-8]
   11aa0:	add	r3, r3, #1
   11aa4:	b	11aac <__assert_fail@plt+0xc64>
   11aa8:	ldr	r3, [fp, #-16]
   11aac:	str	r3, [fp, #-12]
   11ab0:	ldr	r2, [fp, #-12]
   11ab4:	ldr	r3, [fp, #-16]
   11ab8:	sub	r3, r2, r3
   11abc:	cmp	r3, #6
   11ac0:	ble	11b24 <__assert_fail@plt+0xcdc>
   11ac4:	ldr	r3, [fp, #-12]
   11ac8:	sub	r3, r3, #7
   11acc:	mov	r2, #7
   11ad0:	ldr	r1, [pc, #120]	; 11b50 <__assert_fail@plt+0xd08>
   11ad4:	mov	r0, r3
   11ad8:	bl	10e30 <strncmp@plt>
   11adc:	mov	r3, r0
   11ae0:	cmp	r3, #0
   11ae4:	bne	11b24 <__assert_fail@plt+0xcdc>
   11ae8:	ldr	r3, [fp, #-12]
   11aec:	str	r3, [fp, #-16]
   11af0:	mov	r2, #3
   11af4:	ldr	r1, [pc, #88]	; 11b54 <__assert_fail@plt+0xd0c>
   11af8:	ldr	r0, [fp, #-12]
   11afc:	bl	10e30 <strncmp@plt>
   11b00:	mov	r3, r0
   11b04:	cmp	r3, #0
   11b08:	bne	11b24 <__assert_fail@plt+0xcdc>
   11b0c:	ldr	r3, [fp, #-12]
   11b10:	add	r3, r3, #3
   11b14:	str	r3, [fp, #-16]
   11b18:	ldr	r2, [pc, #56]	; 11b58 <__assert_fail@plt+0xd10>
   11b1c:	ldr	r3, [fp, #-16]
   11b20:	str	r3, [r2]
   11b24:	ldr	r2, [pc, #48]	; 11b5c <__assert_fail@plt+0xd14>
   11b28:	ldr	r3, [fp, #-16]
   11b2c:	str	r3, [r2]
   11b30:	ldr	r2, [pc, #40]	; 11b60 <__assert_fail@plt+0xd18>
   11b34:	ldr	r3, [fp, #-16]
   11b38:	str	r3, [r2]
   11b3c:	nop			; (mov r0, r0)
   11b40:	sub	sp, fp, #4
   11b44:	pop	{fp, pc}
   11b48:	andeq	r8, r2, r8, lsr r1
   11b4c:	andeq	r7, r1, r0, ror #16
   11b50:	muleq	r1, r8, r8
   11b54:	andeq	r7, r1, r0, lsr #17
   11b58:	andeq	r8, r2, r8, lsr #2
   11b5c:	andeq	r8, r2, r0, asr r1
   11b60:	andeq	r8, r2, ip, lsr #2
   11b64:	push	{fp, lr}
   11b68:	add	fp, sp, #4
   11b6c:	sub	sp, sp, #16
   11b70:	str	r0, [fp, #-16]
   11b74:	bl	10db8 <__errno_location@plt>
   11b78:	mov	r3, r0
   11b7c:	ldr	r3, [r3]
   11b80:	str	r3, [fp, #-8]
   11b84:	ldr	r3, [fp, #-16]
   11b88:	cmp	r3, #0
   11b8c:	beq	11b98 <__assert_fail@plt+0xd50>
   11b90:	ldr	r3, [fp, #-16]
   11b94:	b	11b9c <__assert_fail@plt+0xd54>
   11b98:	ldr	r3, [pc, #48]	; 11bd0 <__assert_fail@plt+0xd88>
   11b9c:	mov	r1, #48	; 0x30
   11ba0:	mov	r0, r3
   11ba4:	bl	15388 <__assert_fail@plt+0x4540>
   11ba8:	mov	r3, r0
   11bac:	str	r3, [fp, #-12]
   11bb0:	bl	10db8 <__errno_location@plt>
   11bb4:	mov	r2, r0
   11bb8:	ldr	r3, [fp, #-8]
   11bbc:	str	r3, [r2]
   11bc0:	ldr	r3, [fp, #-12]
   11bc4:	mov	r0, r3
   11bc8:	sub	sp, fp, #4
   11bcc:	pop	{fp, pc}
   11bd0:	andeq	r8, r2, r4, asr r1
   11bd4:	push	{fp}		; (str fp, [sp, #-4]!)
   11bd8:	add	fp, sp, #0
   11bdc:	sub	sp, sp, #12
   11be0:	str	r0, [fp, #-8]
   11be4:	ldr	r3, [fp, #-8]
   11be8:	cmp	r3, #0
   11bec:	beq	11bf8 <__assert_fail@plt+0xdb0>
   11bf0:	ldr	r3, [fp, #-8]
   11bf4:	b	11bfc <__assert_fail@plt+0xdb4>
   11bf8:	ldr	r3, [pc, #16]	; 11c10 <__assert_fail@plt+0xdc8>
   11bfc:	ldr	r3, [r3]
   11c00:	mov	r0, r3
   11c04:	add	sp, fp, #0
   11c08:	pop	{fp}		; (ldr fp, [sp], #4)
   11c0c:	bx	lr
   11c10:	andeq	r8, r2, r4, asr r1
   11c14:	push	{fp}		; (str fp, [sp, #-4]!)
   11c18:	add	fp, sp, #0
   11c1c:	sub	sp, sp, #12
   11c20:	str	r0, [fp, #-8]
   11c24:	str	r1, [fp, #-12]
   11c28:	ldr	r3, [fp, #-8]
   11c2c:	cmp	r3, #0
   11c30:	beq	11c3c <__assert_fail@plt+0xdf4>
   11c34:	ldr	r3, [fp, #-8]
   11c38:	b	11c40 <__assert_fail@plt+0xdf8>
   11c3c:	ldr	r3, [pc, #20]	; 11c58 <__assert_fail@plt+0xe10>
   11c40:	ldr	r2, [fp, #-12]
   11c44:	str	r2, [r3]
   11c48:	nop			; (mov r0, r0)
   11c4c:	add	sp, fp, #0
   11c50:	pop	{fp}		; (ldr fp, [sp], #4)
   11c54:	bx	lr
   11c58:	andeq	r8, r2, r4, asr r1
   11c5c:	push	{fp}		; (str fp, [sp, #-4]!)
   11c60:	add	fp, sp, #0
   11c64:	sub	sp, sp, #36	; 0x24
   11c68:	str	r0, [fp, #-24]	; 0xffffffe8
   11c6c:	mov	r3, r1
   11c70:	str	r2, [fp, #-32]	; 0xffffffe0
   11c74:	strb	r3, [fp, #-25]	; 0xffffffe7
   11c78:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11c7c:	strb	r3, [fp, #-5]
   11c80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c84:	cmp	r3, #0
   11c88:	beq	11c94 <__assert_fail@plt+0xe4c>
   11c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c90:	b	11c98 <__assert_fail@plt+0xe50>
   11c94:	ldr	r3, [pc, #124]	; 11d18 <__assert_fail@plt+0xed0>
   11c98:	add	r2, r3, #8
   11c9c:	ldrb	r3, [fp, #-5]
   11ca0:	lsr	r3, r3, #5
   11ca4:	uxtb	r3, r3
   11ca8:	lsl	r3, r3, #2
   11cac:	add	r3, r2, r3
   11cb0:	str	r3, [fp, #-12]
   11cb4:	ldrb	r3, [fp, #-5]
   11cb8:	and	r3, r3, #31
   11cbc:	str	r3, [fp, #-16]
   11cc0:	ldr	r3, [fp, #-12]
   11cc4:	ldr	r2, [r3]
   11cc8:	ldr	r3, [fp, #-16]
   11ccc:	lsr	r3, r2, r3
   11cd0:	and	r3, r3, #1
   11cd4:	str	r3, [fp, #-20]	; 0xffffffec
   11cd8:	ldr	r3, [fp, #-12]
   11cdc:	ldr	r3, [r3]
   11ce0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11ce4:	and	r1, r2, #1
   11ce8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11cec:	eor	r1, r1, r2
   11cf0:	ldr	r2, [fp, #-16]
   11cf4:	lsl	r2, r1, r2
   11cf8:	eor	r2, r2, r3
   11cfc:	ldr	r3, [fp, #-12]
   11d00:	str	r2, [r3]
   11d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   11d08:	mov	r0, r3
   11d0c:	add	sp, fp, #0
   11d10:	pop	{fp}		; (ldr fp, [sp], #4)
   11d14:	bx	lr
   11d18:	andeq	r8, r2, r4, asr r1
   11d1c:	push	{fp}		; (str fp, [sp, #-4]!)
   11d20:	add	fp, sp, #0
   11d24:	sub	sp, sp, #20
   11d28:	str	r0, [fp, #-16]
   11d2c:	str	r1, [fp, #-20]	; 0xffffffec
   11d30:	ldr	r3, [fp, #-16]
   11d34:	cmp	r3, #0
   11d38:	bne	11d44 <__assert_fail@plt+0xefc>
   11d3c:	ldr	r3, [pc, #44]	; 11d70 <__assert_fail@plt+0xf28>
   11d40:	str	r3, [fp, #-16]
   11d44:	ldr	r3, [fp, #-16]
   11d48:	ldr	r3, [r3, #4]
   11d4c:	str	r3, [fp, #-8]
   11d50:	ldr	r3, [fp, #-16]
   11d54:	ldr	r2, [fp, #-20]	; 0xffffffec
   11d58:	str	r2, [r3, #4]
   11d5c:	ldr	r3, [fp, #-8]
   11d60:	mov	r0, r3
   11d64:	add	sp, fp, #0
   11d68:	pop	{fp}		; (ldr fp, [sp], #4)
   11d6c:	bx	lr
   11d70:	andeq	r8, r2, r4, asr r1
   11d74:	push	{fp, lr}
   11d78:	add	fp, sp, #4
   11d7c:	sub	sp, sp, #16
   11d80:	str	r0, [fp, #-8]
   11d84:	str	r1, [fp, #-12]
   11d88:	str	r2, [fp, #-16]
   11d8c:	ldr	r3, [fp, #-8]
   11d90:	cmp	r3, #0
   11d94:	bne	11da0 <__assert_fail@plt+0xf58>
   11d98:	ldr	r3, [pc, #76]	; 11dec <__assert_fail@plt+0xfa4>
   11d9c:	str	r3, [fp, #-8]
   11da0:	ldr	r3, [fp, #-8]
   11da4:	mov	r2, #10
   11da8:	str	r2, [r3]
   11dac:	ldr	r3, [fp, #-12]
   11db0:	cmp	r3, #0
   11db4:	beq	11dc4 <__assert_fail@plt+0xf7c>
   11db8:	ldr	r3, [fp, #-16]
   11dbc:	cmp	r3, #0
   11dc0:	bne	11dc8 <__assert_fail@plt+0xf80>
   11dc4:	bl	10e3c <abort@plt>
   11dc8:	ldr	r3, [fp, #-8]
   11dcc:	ldr	r2, [fp, #-12]
   11dd0:	str	r2, [r3, #40]	; 0x28
   11dd4:	ldr	r3, [fp, #-8]
   11dd8:	ldr	r2, [fp, #-16]
   11ddc:	str	r2, [r3, #44]	; 0x2c
   11de0:	nop			; (mov r0, r0)
   11de4:	sub	sp, fp, #4
   11de8:	pop	{fp, pc}
   11dec:	andeq	r8, r2, r4, asr r1
   11df0:	push	{fp, lr}
   11df4:	add	fp, sp, #4
   11df8:	sub	sp, sp, #56	; 0x38
   11dfc:	str	r0, [fp, #-56]	; 0xffffffc8
   11e00:	str	r1, [fp, #-60]	; 0xffffffc4
   11e04:	sub	r3, fp, #52	; 0x34
   11e08:	mov	r2, #48	; 0x30
   11e0c:	mov	r1, #0
   11e10:	mov	r0, r3
   11e14:	bl	10dd0 <memset@plt>
   11e18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e1c:	cmp	r3, #10
   11e20:	bne	11e28 <__assert_fail@plt+0xfe0>
   11e24:	bl	10e3c <abort@plt>
   11e28:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e2c:	str	r3, [fp, #-52]	; 0xffffffcc
   11e30:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11e34:	mov	lr, r3
   11e38:	sub	ip, fp, #52	; 0x34
   11e3c:	ldm	ip!, {r0, r1, r2, r3}
   11e40:	stmia	lr!, {r0, r1, r2, r3}
   11e44:	ldm	ip!, {r0, r1, r2, r3}
   11e48:	stmia	lr!, {r0, r1, r2, r3}
   11e4c:	ldm	ip, {r0, r1, r2, r3}
   11e50:	stm	lr, {r0, r1, r2, r3}
   11e54:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11e58:	sub	sp, fp, #4
   11e5c:	pop	{fp, pc}
   11e60:	push	{fp, lr}
   11e64:	add	fp, sp, #4
   11e68:	sub	sp, sp, #16
   11e6c:	str	r0, [fp, #-16]
   11e70:	str	r1, [fp, #-20]	; 0xffffffec
   11e74:	ldr	r0, [fp, #-16]
   11e78:	bl	10d88 <gettext@plt>
   11e7c:	str	r0, [fp, #-8]
   11e80:	ldr	r2, [fp, #-8]
   11e84:	ldr	r3, [fp, #-16]
   11e88:	cmp	r2, r3
   11e8c:	beq	11e98 <__assert_fail@plt+0x1050>
   11e90:	ldr	r3, [fp, #-8]
   11e94:	b	11f28 <__assert_fail@plt+0x10e0>
   11e98:	bl	1650c <__assert_fail@plt+0x56c4>
   11e9c:	str	r0, [fp, #-12]
   11ea0:	ldr	r1, [pc, #140]	; 11f34 <__assert_fail@plt+0x10ec>
   11ea4:	ldr	r0, [fp, #-12]
   11ea8:	bl	15f50 <__assert_fail@plt+0x5108>
   11eac:	mov	r3, r0
   11eb0:	cmp	r3, #0
   11eb4:	bne	11ed8 <__assert_fail@plt+0x1090>
   11eb8:	ldr	r3, [fp, #-16]
   11ebc:	ldrb	r3, [r3]
   11ec0:	cmp	r3, #96	; 0x60
   11ec4:	bne	11ed0 <__assert_fail@plt+0x1088>
   11ec8:	ldr	r3, [pc, #104]	; 11f38 <__assert_fail@plt+0x10f0>
   11ecc:	b	11f28 <__assert_fail@plt+0x10e0>
   11ed0:	ldr	r3, [pc, #100]	; 11f3c <__assert_fail@plt+0x10f4>
   11ed4:	b	11f28 <__assert_fail@plt+0x10e0>
   11ed8:	ldr	r1, [pc, #96]	; 11f40 <__assert_fail@plt+0x10f8>
   11edc:	ldr	r0, [fp, #-12]
   11ee0:	bl	15f50 <__assert_fail@plt+0x5108>
   11ee4:	mov	r3, r0
   11ee8:	cmp	r3, #0
   11eec:	bne	11f10 <__assert_fail@plt+0x10c8>
   11ef0:	ldr	r3, [fp, #-16]
   11ef4:	ldrb	r3, [r3]
   11ef8:	cmp	r3, #96	; 0x60
   11efc:	bne	11f08 <__assert_fail@plt+0x10c0>
   11f00:	ldr	r3, [pc, #60]	; 11f44 <__assert_fail@plt+0x10fc>
   11f04:	b	11f28 <__assert_fail@plt+0x10e0>
   11f08:	ldr	r3, [pc, #56]	; 11f48 <__assert_fail@plt+0x1100>
   11f0c:	b	11f28 <__assert_fail@plt+0x10e0>
   11f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f14:	cmp	r3, #9
   11f18:	bne	11f24 <__assert_fail@plt+0x10dc>
   11f1c:	ldr	r3, [pc, #40]	; 11f4c <__assert_fail@plt+0x1104>
   11f20:	b	11f28 <__assert_fail@plt+0x10e0>
   11f24:	ldr	r3, [pc, #36]	; 11f50 <__assert_fail@plt+0x1108>
   11f28:	mov	r0, r3
   11f2c:	sub	sp, fp, #4
   11f30:	pop	{fp, pc}
   11f34:	andeq	r7, r1, r0, ror #18
   11f38:	andeq	r7, r1, r8, ror #18
   11f3c:	andeq	r7, r1, ip, ror #18
   11f40:	andeq	r7, r1, r0, ror r9
   11f44:	andeq	r7, r1, r8, ror r9
   11f48:	andeq	r7, r1, ip, ror r9
   11f4c:	andeq	r7, r1, r0, lsl #19
   11f50:	andeq	r7, r1, r4, lsl #19
   11f54:	push	{r4, fp, lr}
   11f58:	add	fp, sp, #8
   11f5c:	sub	sp, sp, #116	; 0x74
   11f60:	str	r0, [fp, #-88]	; 0xffffffa8
   11f64:	str	r1, [fp, #-92]	; 0xffffffa4
   11f68:	str	r2, [fp, #-96]	; 0xffffffa0
   11f6c:	str	r3, [fp, #-100]	; 0xffffff9c
   11f70:	mov	r3, #0
   11f74:	str	r3, [fp, #-20]	; 0xffffffec
   11f78:	mov	r3, #0
   11f7c:	str	r3, [fp, #-24]	; 0xffffffe8
   11f80:	mov	r3, #0
   11f84:	str	r3, [fp, #-28]	; 0xffffffe4
   11f88:	mov	r3, #0
   11f8c:	str	r3, [fp, #-32]	; 0xffffffe0
   11f90:	mov	r3, #0
   11f94:	strb	r3, [fp, #-33]	; 0xffffffdf
   11f98:	bl	10cec <__ctype_get_mb_cur_max@plt>
   11f9c:	mov	r3, r0
   11fa0:	cmp	r3, #1
   11fa4:	moveq	r3, #1
   11fa8:	movne	r3, #0
   11fac:	strb	r3, [fp, #-57]	; 0xffffffc7
   11fb0:	ldr	r3, [fp, #8]
   11fb4:	and	r3, r3, #2
   11fb8:	cmp	r3, #0
   11fbc:	movne	r3, #1
   11fc0:	moveq	r3, #0
   11fc4:	strb	r3, [fp, #-34]	; 0xffffffde
   11fc8:	mov	r3, #0
   11fcc:	strb	r3, [fp, #-35]	; 0xffffffdd
   11fd0:	mov	r3, #0
   11fd4:	strb	r3, [fp, #-36]	; 0xffffffdc
   11fd8:	mov	r3, #1
   11fdc:	strb	r3, [fp, #-37]	; 0xffffffdb
   11fe0:	ldr	r3, [fp, #4]
   11fe4:	cmp	r3, #10
   11fe8:	ldrls	pc, [pc, r3, lsl #2]
   11fec:	b	121f4 <__assert_fail@plt+0x13ac>
   11ff0:	andeq	r2, r1, r8, ror #3
   11ff4:	andeq	r2, r1, r4, ror #2
   11ff8:	andeq	r2, r1, r8, lsl #3
   11ffc:	andeq	r2, r1, ip, asr r1
   12000:	andeq	r2, r1, ip, ror #2
   12004:	andeq	r2, r1, ip, lsr #32
   12008:	andeq	r2, r1, ip, lsl r0
   1200c:	andeq	r2, r1, ip, lsl #1
   12010:	andeq	r2, r1, r0, lsr #1
   12014:	andeq	r2, r1, r0, lsr #1
   12018:	andeq	r2, r1, r0, lsr #1
   1201c:	mov	r3, #5
   12020:	str	r3, [fp, #4]
   12024:	mov	r3, #1
   12028:	strb	r3, [fp, #-34]	; 0xffffffde
   1202c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12030:	eor	r3, r3, #1
   12034:	uxtb	r3, r3
   12038:	cmp	r3, #0
   1203c:	beq	12070 <__assert_fail@plt+0x1228>
   12040:	ldr	r2, [fp, #-20]	; 0xffffffec
   12044:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12048:	cmp	r2, r3
   1204c:	bcs	12064 <__assert_fail@plt+0x121c>
   12050:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12054:	ldr	r3, [fp, #-20]	; 0xffffffec
   12058:	add	r3, r2, r3
   1205c:	mov	r2, #34	; 0x22
   12060:	strb	r2, [r3]
   12064:	ldr	r3, [fp, #-20]	; 0xffffffec
   12068:	add	r3, r3, #1
   1206c:	str	r3, [fp, #-20]	; 0xffffffec
   12070:	mov	r3, #1
   12074:	strb	r3, [fp, #-33]	; 0xffffffdf
   12078:	ldr	r3, [pc, #3872]	; 12fa0 <__assert_fail@plt+0x2158>
   1207c:	str	r3, [fp, #-28]	; 0xffffffe4
   12080:	mov	r3, #1
   12084:	str	r3, [fp, #-32]	; 0xffffffe0
   12088:	b	121f8 <__assert_fail@plt+0x13b0>
   1208c:	mov	r3, #1
   12090:	strb	r3, [fp, #-33]	; 0xffffffdf
   12094:	mov	r3, #0
   12098:	strb	r3, [fp, #-34]	; 0xffffffde
   1209c:	b	121f8 <__assert_fail@plt+0x13b0>
   120a0:	ldr	r3, [fp, #4]
   120a4:	cmp	r3, #10
   120a8:	beq	120cc <__assert_fail@plt+0x1284>
   120ac:	ldr	r1, [fp, #4]
   120b0:	ldr	r0, [pc, #3820]	; 12fa4 <__assert_fail@plt+0x215c>
   120b4:	bl	11e60 <__assert_fail@plt+0x1018>
   120b8:	str	r0, [fp, #16]
   120bc:	ldr	r1, [fp, #4]
   120c0:	ldr	r0, [pc, #3808]	; 12fa8 <__assert_fail@plt+0x2160>
   120c4:	bl	11e60 <__assert_fail@plt+0x1018>
   120c8:	str	r0, [fp, #20]
   120cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   120d0:	eor	r3, r3, #1
   120d4:	uxtb	r3, r3
   120d8:	cmp	r3, #0
   120dc:	beq	1213c <__assert_fail@plt+0x12f4>
   120e0:	ldr	r3, [fp, #16]
   120e4:	str	r3, [fp, #-28]	; 0xffffffe4
   120e8:	b	1212c <__assert_fail@plt+0x12e4>
   120ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   120f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   120f4:	cmp	r2, r3
   120f8:	bcs	12114 <__assert_fail@plt+0x12cc>
   120fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12100:	ldr	r3, [fp, #-20]	; 0xffffffec
   12104:	add	r3, r2, r3
   12108:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1210c:	ldrb	r2, [r2]
   12110:	strb	r2, [r3]
   12114:	ldr	r3, [fp, #-20]	; 0xffffffec
   12118:	add	r3, r3, #1
   1211c:	str	r3, [fp, #-20]	; 0xffffffec
   12120:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12124:	add	r3, r3, #1
   12128:	str	r3, [fp, #-28]	; 0xffffffe4
   1212c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12130:	ldrb	r3, [r3]
   12134:	cmp	r3, #0
   12138:	bne	120ec <__assert_fail@plt+0x12a4>
   1213c:	mov	r3, #1
   12140:	strb	r3, [fp, #-33]	; 0xffffffdf
   12144:	ldr	r3, [fp, #20]
   12148:	str	r3, [fp, #-28]	; 0xffffffe4
   1214c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12150:	bl	10d94 <strlen@plt>
   12154:	str	r0, [fp, #-32]	; 0xffffffe0
   12158:	b	121f8 <__assert_fail@plt+0x13b0>
   1215c:	mov	r3, #1
   12160:	strb	r3, [fp, #-33]	; 0xffffffdf
   12164:	mov	r3, #1
   12168:	strb	r3, [fp, #-34]	; 0xffffffde
   1216c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12170:	eor	r3, r3, #1
   12174:	uxtb	r3, r3
   12178:	cmp	r3, #0
   1217c:	beq	12188 <__assert_fail@plt+0x1340>
   12180:	mov	r3, #1
   12184:	strb	r3, [fp, #-33]	; 0xffffffdf
   12188:	mov	r3, #2
   1218c:	str	r3, [fp, #4]
   12190:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12194:	eor	r3, r3, #1
   12198:	uxtb	r3, r3
   1219c:	cmp	r3, #0
   121a0:	beq	121d4 <__assert_fail@plt+0x138c>
   121a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   121a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   121ac:	cmp	r2, r3
   121b0:	bcs	121c8 <__assert_fail@plt+0x1380>
   121b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   121b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   121bc:	add	r3, r2, r3
   121c0:	mov	r2, #39	; 0x27
   121c4:	strb	r2, [r3]
   121c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   121cc:	add	r3, r3, #1
   121d0:	str	r3, [fp, #-20]	; 0xffffffec
   121d4:	ldr	r3, [pc, #3532]	; 12fa8 <__assert_fail@plt+0x2160>
   121d8:	str	r3, [fp, #-28]	; 0xffffffe4
   121dc:	mov	r3, #1
   121e0:	str	r3, [fp, #-32]	; 0xffffffe0
   121e4:	b	121f8 <__assert_fail@plt+0x13b0>
   121e8:	mov	r3, #0
   121ec:	strb	r3, [fp, #-34]	; 0xffffffde
   121f0:	b	121f8 <__assert_fail@plt+0x13b0>
   121f4:	bl	10e3c <abort@plt>
   121f8:	mov	r3, #0
   121fc:	str	r3, [fp, #-16]
   12200:	b	13390 <__assert_fail@plt+0x2548>
   12204:	mov	r3, #0
   12208:	strb	r3, [fp, #-40]	; 0xffffffd8
   1220c:	mov	r3, #0
   12210:	strb	r3, [fp, #-41]	; 0xffffffd7
   12214:	mov	r3, #0
   12218:	strb	r3, [fp, #-42]	; 0xffffffd6
   1221c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12220:	cmp	r3, #0
   12224:	beq	122c0 <__assert_fail@plt+0x1478>
   12228:	ldr	r3, [fp, #4]
   1222c:	cmp	r3, #2
   12230:	beq	122c0 <__assert_fail@plt+0x1478>
   12234:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12238:	cmp	r3, #0
   1223c:	beq	122c0 <__assert_fail@plt+0x1478>
   12240:	ldr	r2, [fp, #-16]
   12244:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12248:	add	r4, r2, r3
   1224c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12250:	cmn	r3, #1
   12254:	bne	12278 <__assert_fail@plt+0x1430>
   12258:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1225c:	cmp	r3, #1
   12260:	bls	12278 <__assert_fail@plt+0x1430>
   12264:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12268:	bl	10d94 <strlen@plt>
   1226c:	str	r0, [fp, #-100]	; 0xffffff9c
   12270:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12274:	b	1227c <__assert_fail@plt+0x1434>
   12278:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1227c:	cmp	r4, r3
   12280:	bhi	122c0 <__assert_fail@plt+0x1478>
   12284:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12288:	ldr	r3, [fp, #-16]
   1228c:	add	r3, r2, r3
   12290:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12294:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12298:	mov	r0, r3
   1229c:	bl	10c8c <memcmp@plt>
   122a0:	mov	r3, r0
   122a4:	cmp	r3, #0
   122a8:	bne	122c0 <__assert_fail@plt+0x1478>
   122ac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   122b0:	cmp	r3, #0
   122b4:	bne	1354c <__assert_fail@plt+0x2704>
   122b8:	mov	r3, #1
   122bc:	strb	r3, [fp, #-40]	; 0xffffffd8
   122c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   122c4:	ldr	r3, [fp, #-16]
   122c8:	add	r3, r2, r3
   122cc:	ldrb	r3, [r3]
   122d0:	strb	r3, [fp, #-38]	; 0xffffffda
   122d4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   122d8:	cmp	r3, #126	; 0x7e
   122dc:	ldrls	pc, [pc, r3, lsl #2]
   122e0:	b	12b0c <__assert_fail@plt+0x1cc4>
   122e4:	andeq	r2, r1, r0, ror #9
   122e8:	andeq	r2, r1, ip, lsl #22
   122ec:	andeq	r2, r1, ip, lsl #22
   122f0:	andeq	r2, r1, ip, lsl #22
   122f4:	andeq	r2, r1, ip, lsl #22
   122f8:	andeq	r2, r1, ip, lsl #22
   122fc:	andeq	r2, r1, ip, lsl #22
   12300:	ldrdeq	r2, [r1], -r0
   12304:	ldrdeq	r2, [r1], -ip
   12308:	andeq	r2, r1, ip, lsl #18
   1230c:	strdeq	r2, [r1], -r4
   12310:	andeq	r2, r1, r8, lsl r9
   12314:	andeq	r2, r1, r8, ror #17
   12318:	andeq	r2, r1, r0, lsl #18
   1231c:	andeq	r2, r1, ip, lsl #22
   12320:	andeq	r2, r1, ip, lsl #22
   12324:	andeq	r2, r1, ip, lsl #22
   12328:	andeq	r2, r1, ip, lsl #22
   1232c:	andeq	r2, r1, ip, lsl #22
   12330:	andeq	r2, r1, ip, lsl #22
   12334:	andeq	r2, r1, ip, lsl #22
   12338:	andeq	r2, r1, ip, lsl #22
   1233c:	andeq	r2, r1, ip, lsl #22
   12340:	andeq	r2, r1, ip, lsl #22
   12344:	andeq	r2, r1, ip, lsl #22
   12348:	andeq	r2, r1, ip, lsl #22
   1234c:	andeq	r2, r1, ip, lsl #22
   12350:	andeq	r2, r1, ip, lsl #22
   12354:	andeq	r2, r1, ip, lsl #22
   12358:	andeq	r2, r1, ip, lsl #22
   1235c:	andeq	r2, r1, ip, lsl #22
   12360:	andeq	r2, r1, ip, lsl #22
   12364:	strdeq	r2, [r1], -r0
   12368:	strdeq	r2, [r1], -r8
   1236c:	strdeq	r2, [r1], -r8
   12370:	andeq	r2, r1, r4, ror #19
   12374:	strdeq	r2, [r1], -r8
   12378:	andeq	r2, r1, r0, lsl #22
   1237c:	strdeq	r2, [r1], -r8
   12380:	andeq	r2, r1, r4, lsl sl
   12384:	strdeq	r2, [r1], -r8
   12388:	strdeq	r2, [r1], -r8
   1238c:	strdeq	r2, [r1], -r8
   12390:	andeq	r2, r1, r0, lsl #22
   12394:	andeq	r2, r1, r0, lsl #22
   12398:	andeq	r2, r1, r0, lsl #22
   1239c:	andeq	r2, r1, r0, lsl #22
   123a0:	andeq	r2, r1, r0, lsl #22
   123a4:	andeq	r2, r1, r0, lsl #22
   123a8:	andeq	r2, r1, r0, lsl #22
   123ac:	andeq	r2, r1, r0, lsl #22
   123b0:	andeq	r2, r1, r0, lsl #22
   123b4:	andeq	r2, r1, r0, lsl #22
   123b8:	andeq	r2, r1, r0, lsl #22
   123bc:	andeq	r2, r1, r0, lsl #22
   123c0:	andeq	r2, r1, r0, lsl #22
   123c4:	andeq	r2, r1, r0, lsl #22
   123c8:	andeq	r2, r1, r0, lsl #22
   123cc:	andeq	r2, r1, r0, lsl #22
   123d0:	strdeq	r2, [r1], -r8
   123d4:	strdeq	r2, [r1], -r8
   123d8:	strdeq	r2, [r1], -r8
   123dc:	strdeq	r2, [r1], -r8
   123e0:	andeq	r2, r1, r0, asr #13
   123e4:	andeq	r2, r1, ip, lsl #22
   123e8:	andeq	r2, r1, r0, lsl #22
   123ec:	andeq	r2, r1, r0, lsl #22
   123f0:	andeq	r2, r1, r0, lsl #22
   123f4:	andeq	r2, r1, r0, lsl #22
   123f8:	andeq	r2, r1, r0, lsl #22
   123fc:	andeq	r2, r1, r0, lsl #22
   12400:	andeq	r2, r1, r0, lsl #22
   12404:	andeq	r2, r1, r0, lsl #22
   12408:	andeq	r2, r1, r0, lsl #22
   1240c:	andeq	r2, r1, r0, lsl #22
   12410:	andeq	r2, r1, r0, lsl #22
   12414:	andeq	r2, r1, r0, lsl #22
   12418:	andeq	r2, r1, r0, lsl #22
   1241c:	andeq	r2, r1, r0, lsl #22
   12420:	andeq	r2, r1, r0, lsl #22
   12424:	andeq	r2, r1, r0, lsl #22
   12428:	andeq	r2, r1, r0, lsl #22
   1242c:	andeq	r2, r1, r0, lsl #22
   12430:	andeq	r2, r1, r0, lsl #22
   12434:	andeq	r2, r1, r0, lsl #22
   12438:	andeq	r2, r1, r0, lsl #22
   1243c:	andeq	r2, r1, r0, lsl #22
   12440:	andeq	r2, r1, r0, lsl #22
   12444:	andeq	r2, r1, r0, lsl #22
   12448:	andeq	r2, r1, r0, lsl #22
   1244c:	andeq	r2, r1, r0, lsl #22
   12450:	strdeq	r2, [r1], -r8
   12454:	andeq	r2, r1, r4, lsr #18
   12458:	andeq	r2, r1, r0, lsl #22
   1245c:	strdeq	r2, [r1], -r8
   12460:	andeq	r2, r1, r0, lsl #22
   12464:	strdeq	r2, [r1], -r8
   12468:	andeq	r2, r1, r0, lsl #22
   1246c:	andeq	r2, r1, r0, lsl #22
   12470:	andeq	r2, r1, r0, lsl #22
   12474:	andeq	r2, r1, r0, lsl #22
   12478:	andeq	r2, r1, r0, lsl #22
   1247c:	andeq	r2, r1, r0, lsl #22
   12480:	andeq	r2, r1, r0, lsl #22
   12484:	andeq	r2, r1, r0, lsl #22
   12488:	andeq	r2, r1, r0, lsl #22
   1248c:	andeq	r2, r1, r0, lsl #22
   12490:	andeq	r2, r1, r0, lsl #22
   12494:	andeq	r2, r1, r0, lsl #22
   12498:	andeq	r2, r1, r0, lsl #22
   1249c:	andeq	r2, r1, r0, lsl #22
   124a0:	andeq	r2, r1, r0, lsl #22
   124a4:	andeq	r2, r1, r0, lsl #22
   124a8:	andeq	r2, r1, r0, lsl #22
   124ac:	andeq	r2, r1, r0, lsl #22
   124b0:	andeq	r2, r1, r0, lsl #22
   124b4:	andeq	r2, r1, r0, lsl #22
   124b8:	andeq	r2, r1, r0, lsl #22
   124bc:	andeq	r2, r1, r0, lsl #22
   124c0:	andeq	r2, r1, r0, lsl #22
   124c4:	andeq	r2, r1, r0, lsl #22
   124c8:	andeq	r2, r1, r0, lsl #22
   124cc:	andeq	r2, r1, r0, lsl #22
   124d0:	muleq	r1, ip, r9
   124d4:	strdeq	r2, [r1], -r8
   124d8:	muleq	r1, ip, r9
   124dc:	andeq	r2, r1, r4, ror #19
   124e0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   124e4:	cmp	r3, #0
   124e8:	beq	126ac <__assert_fail@plt+0x1864>
   124ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   124f0:	cmp	r3, #0
   124f4:	bne	13554 <__assert_fail@plt+0x270c>
   124f8:	mov	r3, #1
   124fc:	strb	r3, [fp, #-41]	; 0xffffffd7
   12500:	ldr	r3, [fp, #4]
   12504:	cmp	r3, #2
   12508:	bne	125b8 <__assert_fail@plt+0x1770>
   1250c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12510:	eor	r3, r3, #1
   12514:	uxtb	r3, r3
   12518:	cmp	r3, #0
   1251c:	beq	125b8 <__assert_fail@plt+0x1770>
   12520:	ldr	r2, [fp, #-20]	; 0xffffffec
   12524:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12528:	cmp	r2, r3
   1252c:	bcs	12544 <__assert_fail@plt+0x16fc>
   12530:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12534:	ldr	r3, [fp, #-20]	; 0xffffffec
   12538:	add	r3, r2, r3
   1253c:	mov	r2, #39	; 0x27
   12540:	strb	r2, [r3]
   12544:	ldr	r3, [fp, #-20]	; 0xffffffec
   12548:	add	r3, r3, #1
   1254c:	str	r3, [fp, #-20]	; 0xffffffec
   12550:	ldr	r2, [fp, #-20]	; 0xffffffec
   12554:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12558:	cmp	r2, r3
   1255c:	bcs	12574 <__assert_fail@plt+0x172c>
   12560:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12564:	ldr	r3, [fp, #-20]	; 0xffffffec
   12568:	add	r3, r2, r3
   1256c:	mov	r2, #36	; 0x24
   12570:	strb	r2, [r3]
   12574:	ldr	r3, [fp, #-20]	; 0xffffffec
   12578:	add	r3, r3, #1
   1257c:	str	r3, [fp, #-20]	; 0xffffffec
   12580:	ldr	r2, [fp, #-20]	; 0xffffffec
   12584:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12588:	cmp	r2, r3
   1258c:	bcs	125a4 <__assert_fail@plt+0x175c>
   12590:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12594:	ldr	r3, [fp, #-20]	; 0xffffffec
   12598:	add	r3, r2, r3
   1259c:	mov	r2, #39	; 0x27
   125a0:	strb	r2, [r3]
   125a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125a8:	add	r3, r3, #1
   125ac:	str	r3, [fp, #-20]	; 0xffffffec
   125b0:	mov	r3, #1
   125b4:	strb	r3, [fp, #-35]	; 0xffffffdd
   125b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   125bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125c0:	cmp	r2, r3
   125c4:	bcs	125dc <__assert_fail@plt+0x1794>
   125c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   125cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   125d0:	add	r3, r2, r3
   125d4:	mov	r2, #92	; 0x5c
   125d8:	strb	r2, [r3]
   125dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   125e0:	add	r3, r3, #1
   125e4:	str	r3, [fp, #-20]	; 0xffffffec
   125e8:	ldr	r3, [fp, #4]
   125ec:	cmp	r3, #2
   125f0:	beq	126a0 <__assert_fail@plt+0x1858>
   125f4:	ldr	r3, [fp, #-16]
   125f8:	add	r2, r3, #1
   125fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12600:	cmp	r2, r3
   12604:	bcs	126a0 <__assert_fail@plt+0x1858>
   12608:	ldr	r3, [fp, #-16]
   1260c:	add	r3, r3, #1
   12610:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12614:	add	r3, r2, r3
   12618:	ldrb	r3, [r3]
   1261c:	cmp	r3, #47	; 0x2f
   12620:	bls	126a0 <__assert_fail@plt+0x1858>
   12624:	ldr	r3, [fp, #-16]
   12628:	add	r3, r3, #1
   1262c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12630:	add	r3, r2, r3
   12634:	ldrb	r3, [r3]
   12638:	cmp	r3, #57	; 0x39
   1263c:	bhi	126a0 <__assert_fail@plt+0x1858>
   12640:	ldr	r2, [fp, #-20]	; 0xffffffec
   12644:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12648:	cmp	r2, r3
   1264c:	bcs	12664 <__assert_fail@plt+0x181c>
   12650:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12654:	ldr	r3, [fp, #-20]	; 0xffffffec
   12658:	add	r3, r2, r3
   1265c:	mov	r2, #48	; 0x30
   12660:	strb	r2, [r3]
   12664:	ldr	r3, [fp, #-20]	; 0xffffffec
   12668:	add	r3, r3, #1
   1266c:	str	r3, [fp, #-20]	; 0xffffffec
   12670:	ldr	r2, [fp, #-20]	; 0xffffffec
   12674:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12678:	cmp	r2, r3
   1267c:	bcs	12694 <__assert_fail@plt+0x184c>
   12680:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12684:	ldr	r3, [fp, #-20]	; 0xffffffec
   12688:	add	r3, r2, r3
   1268c:	mov	r2, #48	; 0x30
   12690:	strb	r2, [r3]
   12694:	ldr	r3, [fp, #-20]	; 0xffffffec
   12698:	add	r3, r3, #1
   1269c:	str	r3, [fp, #-20]	; 0xffffffec
   126a0:	mov	r3, #48	; 0x30
   126a4:	strb	r3, [fp, #-38]	; 0xffffffda
   126a8:	b	130e8 <__assert_fail@plt+0x22a0>
   126ac:	ldr	r3, [fp, #8]
   126b0:	and	r3, r3, #1
   126b4:	cmp	r3, #0
   126b8:	beq	130e8 <__assert_fail@plt+0x22a0>
   126bc:	b	13384 <__assert_fail@plt+0x253c>
   126c0:	ldr	r3, [fp, #4]
   126c4:	cmp	r3, #2
   126c8:	beq	126d8 <__assert_fail@plt+0x1890>
   126cc:	cmp	r3, #5
   126d0:	beq	126e8 <__assert_fail@plt+0x18a0>
   126d4:	b	128cc <__assert_fail@plt+0x1a84>
   126d8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   126dc:	cmp	r3, #0
   126e0:	beq	128c0 <__assert_fail@plt+0x1a78>
   126e4:	b	13590 <__assert_fail@plt+0x2748>
   126e8:	ldr	r3, [fp, #8]
   126ec:	and	r3, r3, #4
   126f0:	cmp	r3, #0
   126f4:	beq	128c8 <__assert_fail@plt+0x1a80>
   126f8:	ldr	r3, [fp, #-16]
   126fc:	add	r2, r3, #2
   12700:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12704:	cmp	r2, r3
   12708:	bcs	128c8 <__assert_fail@plt+0x1a80>
   1270c:	ldr	r3, [fp, #-16]
   12710:	add	r3, r3, #1
   12714:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12718:	add	r3, r2, r3
   1271c:	ldrb	r3, [r3]
   12720:	cmp	r3, #63	; 0x3f
   12724:	bne	128c8 <__assert_fail@plt+0x1a80>
   12728:	ldr	r3, [fp, #-16]
   1272c:	add	r3, r3, #2
   12730:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12734:	add	r3, r2, r3
   12738:	ldrb	r3, [r3]
   1273c:	sub	r3, r3, #33	; 0x21
   12740:	cmp	r3, #29
   12744:	ldrls	pc, [pc, r3, lsl #2]
   12748:	b	128b8 <__assert_fail@plt+0x1a70>
   1274c:	andeq	r2, r1, r4, asr #15
   12750:			; <UNDEFINED> instruction: 0x000128b8
   12754:			; <UNDEFINED> instruction: 0x000128b8
   12758:			; <UNDEFINED> instruction: 0x000128b8
   1275c:			; <UNDEFINED> instruction: 0x000128b8
   12760:			; <UNDEFINED> instruction: 0x000128b8
   12764:	andeq	r2, r1, r4, asr #15
   12768:	andeq	r2, r1, r4, asr #15
   1276c:	andeq	r2, r1, r4, asr #15
   12770:			; <UNDEFINED> instruction: 0x000128b8
   12774:			; <UNDEFINED> instruction: 0x000128b8
   12778:			; <UNDEFINED> instruction: 0x000128b8
   1277c:	andeq	r2, r1, r4, asr #15
   12780:			; <UNDEFINED> instruction: 0x000128b8
   12784:	andeq	r2, r1, r4, asr #15
   12788:			; <UNDEFINED> instruction: 0x000128b8
   1278c:			; <UNDEFINED> instruction: 0x000128b8
   12790:			; <UNDEFINED> instruction: 0x000128b8
   12794:			; <UNDEFINED> instruction: 0x000128b8
   12798:			; <UNDEFINED> instruction: 0x000128b8
   1279c:			; <UNDEFINED> instruction: 0x000128b8
   127a0:			; <UNDEFINED> instruction: 0x000128b8
   127a4:			; <UNDEFINED> instruction: 0x000128b8
   127a8:			; <UNDEFINED> instruction: 0x000128b8
   127ac:			; <UNDEFINED> instruction: 0x000128b8
   127b0:			; <UNDEFINED> instruction: 0x000128b8
   127b4:			; <UNDEFINED> instruction: 0x000128b8
   127b8:	andeq	r2, r1, r4, asr #15
   127bc:	andeq	r2, r1, r4, asr #15
   127c0:	andeq	r2, r1, r4, asr #15
   127c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   127c8:	cmp	r3, #0
   127cc:	bne	1355c <__assert_fail@plt+0x2714>
   127d0:	ldr	r3, [fp, #-16]
   127d4:	add	r3, r3, #2
   127d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   127dc:	add	r3, r2, r3
   127e0:	ldrb	r3, [r3]
   127e4:	strb	r3, [fp, #-38]	; 0xffffffda
   127e8:	ldr	r3, [fp, #-16]
   127ec:	add	r3, r3, #2
   127f0:	str	r3, [fp, #-16]
   127f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   127f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   127fc:	cmp	r2, r3
   12800:	bcs	12818 <__assert_fail@plt+0x19d0>
   12804:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1280c:	add	r3, r2, r3
   12810:	mov	r2, #63	; 0x3f
   12814:	strb	r2, [r3]
   12818:	ldr	r3, [fp, #-20]	; 0xffffffec
   1281c:	add	r3, r3, #1
   12820:	str	r3, [fp, #-20]	; 0xffffffec
   12824:	ldr	r2, [fp, #-20]	; 0xffffffec
   12828:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1282c:	cmp	r2, r3
   12830:	bcs	12848 <__assert_fail@plt+0x1a00>
   12834:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1283c:	add	r3, r2, r3
   12840:	mov	r2, #34	; 0x22
   12844:	strb	r2, [r3]
   12848:	ldr	r3, [fp, #-20]	; 0xffffffec
   1284c:	add	r3, r3, #1
   12850:	str	r3, [fp, #-20]	; 0xffffffec
   12854:	ldr	r2, [fp, #-20]	; 0xffffffec
   12858:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1285c:	cmp	r2, r3
   12860:	bcs	12878 <__assert_fail@plt+0x1a30>
   12864:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1286c:	add	r3, r2, r3
   12870:	mov	r2, #34	; 0x22
   12874:	strb	r2, [r3]
   12878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1287c:	add	r3, r3, #1
   12880:	str	r3, [fp, #-20]	; 0xffffffec
   12884:	ldr	r2, [fp, #-20]	; 0xffffffec
   12888:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1288c:	cmp	r2, r3
   12890:	bcs	128a8 <__assert_fail@plt+0x1a60>
   12894:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1289c:	add	r3, r2, r3
   128a0:	mov	r2, #63	; 0x3f
   128a4:	strb	r2, [r3]
   128a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   128ac:	add	r3, r3, #1
   128b0:	str	r3, [fp, #-20]	; 0xffffffec
   128b4:	b	128bc <__assert_fail@plt+0x1a74>
   128b8:	nop			; (mov r0, r0)
   128bc:	b	128c8 <__assert_fail@plt+0x1a80>
   128c0:	nop			; (mov r0, r0)
   128c4:	b	13114 <__assert_fail@plt+0x22cc>
   128c8:	nop			; (mov r0, r0)
   128cc:	b	13114 <__assert_fail@plt+0x22cc>
   128d0:	mov	r3, #97	; 0x61
   128d4:	strb	r3, [fp, #-39]	; 0xffffffd9
   128d8:	b	12984 <__assert_fail@plt+0x1b3c>
   128dc:	mov	r3, #98	; 0x62
   128e0:	strb	r3, [fp, #-39]	; 0xffffffd9
   128e4:	b	12984 <__assert_fail@plt+0x1b3c>
   128e8:	mov	r3, #102	; 0x66
   128ec:	strb	r3, [fp, #-39]	; 0xffffffd9
   128f0:	b	12984 <__assert_fail@plt+0x1b3c>
   128f4:	mov	r3, #110	; 0x6e
   128f8:	strb	r3, [fp, #-39]	; 0xffffffd9
   128fc:	b	1296c <__assert_fail@plt+0x1b24>
   12900:	mov	r3, #114	; 0x72
   12904:	strb	r3, [fp, #-39]	; 0xffffffd9
   12908:	b	1296c <__assert_fail@plt+0x1b24>
   1290c:	mov	r3, #116	; 0x74
   12910:	strb	r3, [fp, #-39]	; 0xffffffd9
   12914:	b	1296c <__assert_fail@plt+0x1b24>
   12918:	mov	r3, #118	; 0x76
   1291c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12920:	b	12984 <__assert_fail@plt+0x1b3c>
   12924:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12928:	strb	r3, [fp, #-39]	; 0xffffffd9
   1292c:	ldr	r3, [fp, #4]
   12930:	cmp	r3, #2
   12934:	bne	12948 <__assert_fail@plt+0x1b00>
   12938:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1293c:	cmp	r3, #0
   12940:	beq	1329c <__assert_fail@plt+0x2454>
   12944:	b	13590 <__assert_fail@plt+0x2748>
   12948:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1294c:	cmp	r3, #0
   12950:	beq	1296c <__assert_fail@plt+0x1b24>
   12954:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12958:	cmp	r3, #0
   1295c:	beq	1296c <__assert_fail@plt+0x1b24>
   12960:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12964:	cmp	r3, #0
   12968:	bne	132a4 <__assert_fail@plt+0x245c>
   1296c:	ldr	r3, [fp, #4]
   12970:	cmp	r3, #2
   12974:	bne	12984 <__assert_fail@plt+0x1b3c>
   12978:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1297c:	cmp	r3, #0
   12980:	bne	13564 <__assert_fail@plt+0x271c>
   12984:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12988:	cmp	r3, #0
   1298c:	beq	130f0 <__assert_fail@plt+0x22a8>
   12990:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   12994:	strb	r3, [fp, #-38]	; 0xffffffda
   12998:	b	1319c <__assert_fail@plt+0x2354>
   1299c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   129a0:	cmn	r3, #1
   129a4:	bne	129c8 <__assert_fail@plt+0x1b80>
   129a8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   129ac:	add	r3, r3, #1
   129b0:	ldrb	r3, [r3]
   129b4:	cmp	r3, #0
   129b8:	movne	r3, #1
   129bc:	moveq	r3, #0
   129c0:	uxtb	r3, r3
   129c4:	b	129dc <__assert_fail@plt+0x1b94>
   129c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   129cc:	cmp	r3, #1
   129d0:	movne	r3, #1
   129d4:	moveq	r3, #0
   129d8:	uxtb	r3, r3
   129dc:	cmp	r3, #0
   129e0:	bne	130f8 <__assert_fail@plt+0x22b0>
   129e4:	ldr	r3, [fp, #-16]
   129e8:	cmp	r3, #0
   129ec:	bne	13100 <__assert_fail@plt+0x22b8>
   129f0:	mov	r3, #1
   129f4:	strb	r3, [fp, #-42]	; 0xffffffd6
   129f8:	ldr	r3, [fp, #4]
   129fc:	cmp	r3, #2
   12a00:	bne	13108 <__assert_fail@plt+0x22c0>
   12a04:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a08:	cmp	r3, #0
   12a0c:	beq	13108 <__assert_fail@plt+0x22c0>
   12a10:	b	13590 <__assert_fail@plt+0x2748>
   12a14:	mov	r3, #1
   12a18:	strb	r3, [fp, #-36]	; 0xffffffdc
   12a1c:	mov	r3, #1
   12a20:	strb	r3, [fp, #-42]	; 0xffffffd6
   12a24:	ldr	r3, [fp, #4]
   12a28:	cmp	r3, #2
   12a2c:	bne	13110 <__assert_fail@plt+0x22c8>
   12a30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a34:	cmp	r3, #0
   12a38:	bne	1356c <__assert_fail@plt+0x2724>
   12a3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a40:	cmp	r3, #0
   12a44:	beq	12a64 <__assert_fail@plt+0x1c1c>
   12a48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a4c:	cmp	r3, #0
   12a50:	bne	12a64 <__assert_fail@plt+0x1c1c>
   12a54:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a58:	str	r3, [fp, #-24]	; 0xffffffe8
   12a5c:	mov	r3, #0
   12a60:	str	r3, [fp, #-92]	; 0xffffffa4
   12a64:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a6c:	cmp	r2, r3
   12a70:	bcs	12a88 <__assert_fail@plt+0x1c40>
   12a74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a7c:	add	r3, r2, r3
   12a80:	mov	r2, #39	; 0x27
   12a84:	strb	r2, [r3]
   12a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a8c:	add	r3, r3, #1
   12a90:	str	r3, [fp, #-20]	; 0xffffffec
   12a94:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12a9c:	cmp	r2, r3
   12aa0:	bcs	12ab8 <__assert_fail@plt+0x1c70>
   12aa4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12aac:	add	r3, r2, r3
   12ab0:	mov	r2, #92	; 0x5c
   12ab4:	strb	r2, [r3]
   12ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12abc:	add	r3, r3, #1
   12ac0:	str	r3, [fp, #-20]	; 0xffffffec
   12ac4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ac8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12acc:	cmp	r2, r3
   12ad0:	bcs	12ae8 <__assert_fail@plt+0x1ca0>
   12ad4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12adc:	add	r3, r2, r3
   12ae0:	mov	r2, #39	; 0x27
   12ae4:	strb	r2, [r3]
   12ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12aec:	add	r3, r3, #1
   12af0:	str	r3, [fp, #-20]	; 0xffffffec
   12af4:	mov	r3, #0
   12af8:	strb	r3, [fp, #-35]	; 0xffffffdd
   12afc:	b	13110 <__assert_fail@plt+0x22c8>
   12b00:	mov	r3, #1
   12b04:	strb	r3, [fp, #-42]	; 0xffffffd6
   12b08:	b	13114 <__assert_fail@plt+0x22cc>
   12b0c:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12b10:	cmp	r3, #0
   12b14:	beq	12b54 <__assert_fail@plt+0x1d0c>
   12b18:	mov	r3, #1
   12b1c:	str	r3, [fp, #-48]	; 0xffffffd0
   12b20:	bl	10d70 <__ctype_b_loc@plt>
   12b24:	mov	r3, r0
   12b28:	ldr	r2, [r3]
   12b2c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12b30:	lsl	r3, r3, #1
   12b34:	add	r3, r2, r3
   12b38:	ldrh	r3, [r3]
   12b3c:	and	r3, r3, #16384	; 0x4000
   12b40:	cmp	r3, #0
   12b44:	movne	r3, #1
   12b48:	moveq	r3, #0
   12b4c:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b50:	b	12da0 <__assert_fail@plt+0x1f58>
   12b54:	sub	r3, fp, #76	; 0x4c
   12b58:	mov	r2, #8
   12b5c:	mov	r1, #0
   12b60:	mov	r0, r3
   12b64:	bl	10dd0 <memset@plt>
   12b68:	mov	r3, #0
   12b6c:	str	r3, [fp, #-48]	; 0xffffffd0
   12b70:	mov	r3, #1
   12b74:	strb	r3, [fp, #-49]	; 0xffffffcf
   12b78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12b7c:	cmn	r3, #1
   12b80:	bne	12b90 <__assert_fail@plt+0x1d48>
   12b84:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12b88:	bl	10d94 <strlen@plt>
   12b8c:	str	r0, [fp, #-100]	; 0xffffff9c
   12b90:	ldr	r2, [fp, #-16]
   12b94:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12b98:	add	r3, r2, r3
   12b9c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12ba0:	add	r1, r2, r3
   12ba4:	ldr	r2, [fp, #-16]
   12ba8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12bac:	add	r3, r2, r3
   12bb0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12bb4:	sub	r2, r2, r3
   12bb8:	sub	r3, fp, #76	; 0x4c
   12bbc:	sub	r0, fp, #80	; 0x50
   12bc0:	bl	16568 <__assert_fail@plt+0x5720>
   12bc4:	str	r0, [fp, #-64]	; 0xffffffc0
   12bc8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12bcc:	cmp	r3, #0
   12bd0:	beq	12d94 <__assert_fail@plt+0x1f4c>
   12bd4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12bd8:	cmn	r3, #1
   12bdc:	bne	12bec <__assert_fail@plt+0x1da4>
   12be0:	mov	r3, #0
   12be4:	strb	r3, [fp, #-49]	; 0xffffffcf
   12be8:	b	12da0 <__assert_fail@plt+0x1f58>
   12bec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12bf0:	cmn	r3, #2
   12bf4:	bne	12c4c <__assert_fail@plt+0x1e04>
   12bf8:	mov	r3, #0
   12bfc:	strb	r3, [fp, #-49]	; 0xffffffcf
   12c00:	b	12c10 <__assert_fail@plt+0x1dc8>
   12c04:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c08:	add	r3, r3, #1
   12c0c:	str	r3, [fp, #-48]	; 0xffffffd0
   12c10:	ldr	r2, [fp, #-16]
   12c14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c18:	add	r2, r2, r3
   12c1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12c20:	cmp	r2, r3
   12c24:	bcs	12d9c <__assert_fail@plt+0x1f54>
   12c28:	ldr	r2, [fp, #-16]
   12c2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c30:	add	r3, r2, r3
   12c34:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12c38:	add	r3, r2, r3
   12c3c:	ldrb	r3, [r3]
   12c40:	cmp	r3, #0
   12c44:	bne	12c04 <__assert_fail@plt+0x1dbc>
   12c48:	b	12d9c <__assert_fail@plt+0x1f54>
   12c4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12c50:	cmp	r3, #0
   12c54:	beq	12d48 <__assert_fail@plt+0x1f00>
   12c58:	ldr	r3, [fp, #4]
   12c5c:	cmp	r3, #2
   12c60:	bne	12d48 <__assert_fail@plt+0x1f00>
   12c64:	mov	r3, #1
   12c68:	str	r3, [fp, #-56]	; 0xffffffc8
   12c6c:	b	12d38 <__assert_fail@plt+0x1ef0>
   12c70:	ldr	r2, [fp, #-16]
   12c74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c78:	add	r2, r2, r3
   12c7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12c80:	add	r3, r2, r3
   12c84:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12c88:	add	r3, r2, r3
   12c8c:	ldrb	r3, [r3]
   12c90:	sub	r3, r3, #91	; 0x5b
   12c94:	cmp	r3, #33	; 0x21
   12c98:	ldrls	pc, [pc, r3, lsl #2]
   12c9c:	b	12d28 <__assert_fail@plt+0x1ee0>
   12ca0:	andeq	r3, r1, r4, ror r5
   12ca4:	andeq	r3, r1, r4, ror r5
   12ca8:	andeq	r2, r1, r8, lsr #26
   12cac:	andeq	r3, r1, r4, ror r5
   12cb0:	andeq	r2, r1, r8, lsr #26
   12cb4:	andeq	r3, r1, r4, ror r5
   12cb8:	andeq	r2, r1, r8, lsr #26
   12cbc:	andeq	r2, r1, r8, lsr #26
   12cc0:	andeq	r2, r1, r8, lsr #26
   12cc4:	andeq	r2, r1, r8, lsr #26
   12cc8:	andeq	r2, r1, r8, lsr #26
   12ccc:	andeq	r2, r1, r8, lsr #26
   12cd0:	andeq	r2, r1, r8, lsr #26
   12cd4:	andeq	r2, r1, r8, lsr #26
   12cd8:	andeq	r2, r1, r8, lsr #26
   12cdc:	andeq	r2, r1, r8, lsr #26
   12ce0:	andeq	r2, r1, r8, lsr #26
   12ce4:	andeq	r2, r1, r8, lsr #26
   12ce8:	andeq	r2, r1, r8, lsr #26
   12cec:	andeq	r2, r1, r8, lsr #26
   12cf0:	andeq	r2, r1, r8, lsr #26
   12cf4:	andeq	r2, r1, r8, lsr #26
   12cf8:	andeq	r2, r1, r8, lsr #26
   12cfc:	andeq	r2, r1, r8, lsr #26
   12d00:	andeq	r2, r1, r8, lsr #26
   12d04:	andeq	r2, r1, r8, lsr #26
   12d08:	andeq	r2, r1, r8, lsr #26
   12d0c:	andeq	r2, r1, r8, lsr #26
   12d10:	andeq	r2, r1, r8, lsr #26
   12d14:	andeq	r2, r1, r8, lsr #26
   12d18:	andeq	r2, r1, r8, lsr #26
   12d1c:	andeq	r2, r1, r8, lsr #26
   12d20:	andeq	r2, r1, r8, lsr #26
   12d24:	andeq	r3, r1, r4, ror r5
   12d28:	nop			; (mov r0, r0)
   12d2c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d30:	add	r3, r3, #1
   12d34:	str	r3, [fp, #-56]	; 0xffffffc8
   12d38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d3c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12d40:	cmp	r2, r3
   12d44:	bcc	12c70 <__assert_fail@plt+0x1e28>
   12d48:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12d4c:	mov	r0, r3
   12d50:	bl	10cc8 <iswprint@plt>
   12d54:	mov	r3, r0
   12d58:	cmp	r3, #0
   12d5c:	bne	12d68 <__assert_fail@plt+0x1f20>
   12d60:	mov	r3, #0
   12d64:	strb	r3, [fp, #-49]	; 0xffffffcf
   12d68:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12d6c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12d70:	add	r3, r2, r3
   12d74:	str	r3, [fp, #-48]	; 0xffffffd0
   12d78:	sub	r3, fp, #76	; 0x4c
   12d7c:	mov	r0, r3
   12d80:	bl	10c80 <mbsinit@plt>
   12d84:	mov	r3, r0
   12d88:	cmp	r3, #0
   12d8c:	beq	12b90 <__assert_fail@plt+0x1d48>
   12d90:	b	12da0 <__assert_fail@plt+0x1f58>
   12d94:	nop			; (mov r0, r0)
   12d98:	b	12da0 <__assert_fail@plt+0x1f58>
   12d9c:	nop			; (mov r0, r0)
   12da0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12da4:	strb	r3, [fp, #-42]	; 0xffffffd6
   12da8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dac:	cmp	r3, #1
   12db0:	bhi	12dd4 <__assert_fail@plt+0x1f8c>
   12db4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12db8:	cmp	r3, #0
   12dbc:	beq	13114 <__assert_fail@plt+0x22cc>
   12dc0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12dc4:	eor	r3, r3, #1
   12dc8:	uxtb	r3, r3
   12dcc:	cmp	r3, #0
   12dd0:	beq	13114 <__assert_fail@plt+0x22cc>
   12dd4:	ldr	r2, [fp, #-16]
   12dd8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ddc:	add	r3, r2, r3
   12de0:	str	r3, [fp, #-68]	; 0xffffffbc
   12de4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12de8:	cmp	r3, #0
   12dec:	beq	12fac <__assert_fail@plt+0x2164>
   12df0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12df4:	eor	r3, r3, #1
   12df8:	uxtb	r3, r3
   12dfc:	cmp	r3, #0
   12e00:	beq	12fac <__assert_fail@plt+0x2164>
   12e04:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12e08:	cmp	r3, #0
   12e0c:	bne	1357c <__assert_fail@plt+0x2734>
   12e10:	mov	r3, #1
   12e14:	strb	r3, [fp, #-41]	; 0xffffffd7
   12e18:	ldr	r3, [fp, #4]
   12e1c:	cmp	r3, #2
   12e20:	bne	12ed0 <__assert_fail@plt+0x2088>
   12e24:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12e28:	eor	r3, r3, #1
   12e2c:	uxtb	r3, r3
   12e30:	cmp	r3, #0
   12e34:	beq	12ed0 <__assert_fail@plt+0x2088>
   12e38:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e40:	cmp	r2, r3
   12e44:	bcs	12e5c <__assert_fail@plt+0x2014>
   12e48:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e50:	add	r3, r2, r3
   12e54:	mov	r2, #39	; 0x27
   12e58:	strb	r2, [r3]
   12e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e60:	add	r3, r3, #1
   12e64:	str	r3, [fp, #-20]	; 0xffffffec
   12e68:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12e70:	cmp	r2, r3
   12e74:	bcs	12e8c <__assert_fail@plt+0x2044>
   12e78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e80:	add	r3, r2, r3
   12e84:	mov	r2, #36	; 0x24
   12e88:	strb	r2, [r3]
   12e8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e90:	add	r3, r3, #1
   12e94:	str	r3, [fp, #-20]	; 0xffffffec
   12e98:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ea0:	cmp	r2, r3
   12ea4:	bcs	12ebc <__assert_fail@plt+0x2074>
   12ea8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12eac:	ldr	r3, [fp, #-20]	; 0xffffffec
   12eb0:	add	r3, r2, r3
   12eb4:	mov	r2, #39	; 0x27
   12eb8:	strb	r2, [r3]
   12ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ec0:	add	r3, r3, #1
   12ec4:	str	r3, [fp, #-20]	; 0xffffffec
   12ec8:	mov	r3, #1
   12ecc:	strb	r3, [fp, #-35]	; 0xffffffdd
   12ed0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ed4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ed8:	cmp	r2, r3
   12edc:	bcs	12ef4 <__assert_fail@plt+0x20ac>
   12ee0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ee8:	add	r3, r2, r3
   12eec:	mov	r2, #92	; 0x5c
   12ef0:	strb	r2, [r3]
   12ef4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ef8:	add	r3, r3, #1
   12efc:	str	r3, [fp, #-20]	; 0xffffffec
   12f00:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f08:	cmp	r2, r3
   12f0c:	bcs	12f34 <__assert_fail@plt+0x20ec>
   12f10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f18:	add	r3, r2, r3
   12f1c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12f20:	lsr	r2, r2, #6
   12f24:	uxtb	r2, r2
   12f28:	add	r2, r2, #48	; 0x30
   12f2c:	uxtb	r2, r2
   12f30:	strb	r2, [r3]
   12f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f38:	add	r3, r3, #1
   12f3c:	str	r3, [fp, #-20]	; 0xffffffec
   12f40:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f48:	cmp	r2, r3
   12f4c:	bcs	12f7c <__assert_fail@plt+0x2134>
   12f50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f54:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f58:	add	r3, r2, r3
   12f5c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   12f60:	lsr	r2, r2, #3
   12f64:	uxtb	r2, r2
   12f68:	and	r2, r2, #7
   12f6c:	uxtb	r2, r2
   12f70:	add	r2, r2, #48	; 0x30
   12f74:	uxtb	r2, r2
   12f78:	strb	r2, [r3]
   12f7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f80:	add	r3, r3, #1
   12f84:	str	r3, [fp, #-20]	; 0xffffffec
   12f88:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12f8c:	and	r3, r3, #7
   12f90:	uxtb	r3, r3
   12f94:	add	r3, r3, #48	; 0x30
   12f98:	strb	r3, [fp, #-38]	; 0xffffffda
   12f9c:	b	12ff0 <__assert_fail@plt+0x21a8>
   12fa0:	andeq	r7, r1, r0, lsl #19
   12fa4:	andeq	r7, r1, r8, lsl #19
   12fa8:	andeq	r7, r1, r4, lsl #19
   12fac:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   12fb0:	cmp	r3, #0
   12fb4:	beq	12ff0 <__assert_fail@plt+0x21a8>
   12fb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12fc0:	cmp	r2, r3
   12fc4:	bcs	12fdc <__assert_fail@plt+0x2194>
   12fc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fd0:	add	r3, r2, r3
   12fd4:	mov	r2, #92	; 0x5c
   12fd8:	strb	r2, [r3]
   12fdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fe0:	add	r3, r3, #1
   12fe4:	str	r3, [fp, #-20]	; 0xffffffec
   12fe8:	mov	r3, #0
   12fec:	strb	r3, [fp, #-40]	; 0xffffffd8
   12ff0:	ldr	r3, [fp, #-16]
   12ff4:	add	r2, r3, #1
   12ff8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12ffc:	cmp	r2, r3
   13000:	bcs	130e0 <__assert_fail@plt+0x2298>
   13004:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13008:	cmp	r3, #0
   1300c:	beq	1308c <__assert_fail@plt+0x2244>
   13010:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13014:	eor	r3, r3, #1
   13018:	uxtb	r3, r3
   1301c:	cmp	r3, #0
   13020:	beq	1308c <__assert_fail@plt+0x2244>
   13024:	ldr	r2, [fp, #-20]	; 0xffffffec
   13028:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1302c:	cmp	r2, r3
   13030:	bcs	13048 <__assert_fail@plt+0x2200>
   13034:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13038:	ldr	r3, [fp, #-20]	; 0xffffffec
   1303c:	add	r3, r2, r3
   13040:	mov	r2, #39	; 0x27
   13044:	strb	r2, [r3]
   13048:	ldr	r3, [fp, #-20]	; 0xffffffec
   1304c:	add	r3, r3, #1
   13050:	str	r3, [fp, #-20]	; 0xffffffec
   13054:	ldr	r2, [fp, #-20]	; 0xffffffec
   13058:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1305c:	cmp	r2, r3
   13060:	bcs	13078 <__assert_fail@plt+0x2230>
   13064:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13068:	ldr	r3, [fp, #-20]	; 0xffffffec
   1306c:	add	r3, r2, r3
   13070:	mov	r2, #39	; 0x27
   13074:	strb	r2, [r3]
   13078:	ldr	r3, [fp, #-20]	; 0xffffffec
   1307c:	add	r3, r3, #1
   13080:	str	r3, [fp, #-20]	; 0xffffffec
   13084:	mov	r3, #0
   13088:	strb	r3, [fp, #-35]	; 0xffffffdd
   1308c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13090:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13094:	cmp	r2, r3
   13098:	bcs	130b0 <__assert_fail@plt+0x2268>
   1309c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130a4:	add	r3, r2, r3
   130a8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   130ac:	strb	r2, [r3]
   130b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   130b4:	add	r3, r3, #1
   130b8:	str	r3, [fp, #-20]	; 0xffffffec
   130bc:	ldr	r3, [fp, #-16]
   130c0:	add	r3, r3, #1
   130c4:	str	r3, [fp, #-16]
   130c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   130cc:	ldr	r3, [fp, #-16]
   130d0:	add	r3, r2, r3
   130d4:	ldrb	r3, [r3]
   130d8:	strb	r3, [fp, #-38]	; 0xffffffda
   130dc:	b	12de4 <__assert_fail@plt+0x1f9c>
   130e0:	nop			; (mov r0, r0)
   130e4:	b	132b0 <__assert_fail@plt+0x2468>
   130e8:	nop			; (mov r0, r0)
   130ec:	b	13114 <__assert_fail@plt+0x22cc>
   130f0:	nop			; (mov r0, r0)
   130f4:	b	13114 <__assert_fail@plt+0x22cc>
   130f8:	nop			; (mov r0, r0)
   130fc:	b	13114 <__assert_fail@plt+0x22cc>
   13100:	nop			; (mov r0, r0)
   13104:	b	13114 <__assert_fail@plt+0x22cc>
   13108:	nop			; (mov r0, r0)
   1310c:	b	13114 <__assert_fail@plt+0x22cc>
   13110:	nop			; (mov r0, r0)
   13114:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13118:	eor	r3, r3, #1
   1311c:	uxtb	r3, r3
   13120:	cmp	r3, #0
   13124:	bne	13134 <__assert_fail@plt+0x22ec>
   13128:	ldr	r3, [fp, #4]
   1312c:	cmp	r3, #2
   13130:	bne	13148 <__assert_fail@plt+0x2300>
   13134:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13138:	eor	r3, r3, #1
   1313c:	uxtb	r3, r3
   13140:	cmp	r3, #0
   13144:	bne	13188 <__assert_fail@plt+0x2340>
   13148:	ldr	r3, [fp, #12]
   1314c:	cmp	r3, #0
   13150:	beq	13188 <__assert_fail@plt+0x2340>
   13154:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13158:	lsr	r3, r3, #5
   1315c:	uxtb	r3, r3
   13160:	lsl	r3, r3, #2
   13164:	ldr	r2, [fp, #12]
   13168:	add	r3, r2, r3
   1316c:	ldr	r2, [r3]
   13170:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13174:	and	r3, r3, #31
   13178:	lsr	r3, r2, r3
   1317c:	and	r3, r3, #1
   13180:	cmp	r3, #0
   13184:	bne	1319c <__assert_fail@plt+0x2354>
   13188:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1318c:	eor	r3, r3, #1
   13190:	uxtb	r3, r3
   13194:	cmp	r3, #0
   13198:	bne	132ac <__assert_fail@plt+0x2464>
   1319c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131a0:	cmp	r3, #0
   131a4:	bne	13584 <__assert_fail@plt+0x273c>
   131a8:	mov	r3, #1
   131ac:	strb	r3, [fp, #-41]	; 0xffffffd7
   131b0:	ldr	r3, [fp, #4]
   131b4:	cmp	r3, #2
   131b8:	bne	13268 <__assert_fail@plt+0x2420>
   131bc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   131c0:	eor	r3, r3, #1
   131c4:	uxtb	r3, r3
   131c8:	cmp	r3, #0
   131cc:	beq	13268 <__assert_fail@plt+0x2420>
   131d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   131d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131d8:	cmp	r2, r3
   131dc:	bcs	131f4 <__assert_fail@plt+0x23ac>
   131e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131e8:	add	r3, r2, r3
   131ec:	mov	r2, #39	; 0x27
   131f0:	strb	r2, [r3]
   131f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131f8:	add	r3, r3, #1
   131fc:	str	r3, [fp, #-20]	; 0xffffffec
   13200:	ldr	r2, [fp, #-20]	; 0xffffffec
   13204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13208:	cmp	r2, r3
   1320c:	bcs	13224 <__assert_fail@plt+0x23dc>
   13210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13214:	ldr	r3, [fp, #-20]	; 0xffffffec
   13218:	add	r3, r2, r3
   1321c:	mov	r2, #36	; 0x24
   13220:	strb	r2, [r3]
   13224:	ldr	r3, [fp, #-20]	; 0xffffffec
   13228:	add	r3, r3, #1
   1322c:	str	r3, [fp, #-20]	; 0xffffffec
   13230:	ldr	r2, [fp, #-20]	; 0xffffffec
   13234:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13238:	cmp	r2, r3
   1323c:	bcs	13254 <__assert_fail@plt+0x240c>
   13240:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13244:	ldr	r3, [fp, #-20]	; 0xffffffec
   13248:	add	r3, r2, r3
   1324c:	mov	r2, #39	; 0x27
   13250:	strb	r2, [r3]
   13254:	ldr	r3, [fp, #-20]	; 0xffffffec
   13258:	add	r3, r3, #1
   1325c:	str	r3, [fp, #-20]	; 0xffffffec
   13260:	mov	r3, #1
   13264:	strb	r3, [fp, #-35]	; 0xffffffdd
   13268:	ldr	r2, [fp, #-20]	; 0xffffffec
   1326c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13270:	cmp	r2, r3
   13274:	bcs	1328c <__assert_fail@plt+0x2444>
   13278:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1327c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13280:	add	r3, r2, r3
   13284:	mov	r2, #92	; 0x5c
   13288:	strb	r2, [r3]
   1328c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13290:	add	r3, r3, #1
   13294:	str	r3, [fp, #-20]	; 0xffffffec
   13298:	b	132b0 <__assert_fail@plt+0x2468>
   1329c:	nop			; (mov r0, r0)
   132a0:	b	132b0 <__assert_fail@plt+0x2468>
   132a4:	nop			; (mov r0, r0)
   132a8:	b	132b0 <__assert_fail@plt+0x2468>
   132ac:	nop			; (mov r0, r0)
   132b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   132b4:	cmp	r3, #0
   132b8:	beq	13338 <__assert_fail@plt+0x24f0>
   132bc:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   132c0:	eor	r3, r3, #1
   132c4:	uxtb	r3, r3
   132c8:	cmp	r3, #0
   132cc:	beq	13338 <__assert_fail@plt+0x24f0>
   132d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   132d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132d8:	cmp	r2, r3
   132dc:	bcs	132f4 <__assert_fail@plt+0x24ac>
   132e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e8:	add	r3, r2, r3
   132ec:	mov	r2, #39	; 0x27
   132f0:	strb	r2, [r3]
   132f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132f8:	add	r3, r3, #1
   132fc:	str	r3, [fp, #-20]	; 0xffffffec
   13300:	ldr	r2, [fp, #-20]	; 0xffffffec
   13304:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13308:	cmp	r2, r3
   1330c:	bcs	13324 <__assert_fail@plt+0x24dc>
   13310:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13314:	ldr	r3, [fp, #-20]	; 0xffffffec
   13318:	add	r3, r2, r3
   1331c:	mov	r2, #39	; 0x27
   13320:	strb	r2, [r3]
   13324:	ldr	r3, [fp, #-20]	; 0xffffffec
   13328:	add	r3, r3, #1
   1332c:	str	r3, [fp, #-20]	; 0xffffffec
   13330:	mov	r3, #0
   13334:	strb	r3, [fp, #-35]	; 0xffffffdd
   13338:	ldr	r2, [fp, #-20]	; 0xffffffec
   1333c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13340:	cmp	r2, r3
   13344:	bcs	1335c <__assert_fail@plt+0x2514>
   13348:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1334c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13350:	add	r3, r2, r3
   13354:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13358:	strb	r2, [r3]
   1335c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13360:	add	r3, r3, #1
   13364:	str	r3, [fp, #-20]	; 0xffffffec
   13368:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1336c:	eor	r3, r3, #1
   13370:	uxtb	r3, r3
   13374:	cmp	r3, #0
   13378:	beq	13384 <__assert_fail@plt+0x253c>
   1337c:	mov	r3, #0
   13380:	strb	r3, [fp, #-37]	; 0xffffffdb
   13384:	ldr	r3, [fp, #-16]
   13388:	add	r3, r3, #1
   1338c:	str	r3, [fp, #-16]
   13390:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13394:	cmn	r3, #1
   13398:	bne	133c0 <__assert_fail@plt+0x2578>
   1339c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133a0:	ldr	r3, [fp, #-16]
   133a4:	add	r3, r2, r3
   133a8:	ldrb	r3, [r3]
   133ac:	cmp	r3, #0
   133b0:	movne	r3, #1
   133b4:	moveq	r3, #0
   133b8:	uxtb	r3, r3
   133bc:	b	133d8 <__assert_fail@plt+0x2590>
   133c0:	ldr	r2, [fp, #-16]
   133c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   133c8:	cmp	r2, r3
   133cc:	movne	r3, #1
   133d0:	moveq	r3, #0
   133d4:	uxtb	r3, r3
   133d8:	cmp	r3, #0
   133dc:	bne	12204 <__assert_fail@plt+0x13bc>
   133e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   133e4:	cmp	r3, #0
   133e8:	bne	13404 <__assert_fail@plt+0x25bc>
   133ec:	ldr	r3, [fp, #4]
   133f0:	cmp	r3, #2
   133f4:	bne	13404 <__assert_fail@plt+0x25bc>
   133f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133fc:	cmp	r3, #0
   13400:	bne	1358c <__assert_fail@plt+0x2744>
   13404:	ldr	r3, [fp, #4]
   13408:	cmp	r3, #2
   1340c:	bne	134ac <__assert_fail@plt+0x2664>
   13410:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13414:	eor	r3, r3, #1
   13418:	uxtb	r3, r3
   1341c:	cmp	r3, #0
   13420:	beq	134ac <__assert_fail@plt+0x2664>
   13424:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   13428:	cmp	r3, #0
   1342c:	beq	134ac <__assert_fail@plt+0x2664>
   13430:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13434:	cmp	r3, #0
   13438:	beq	13480 <__assert_fail@plt+0x2638>
   1343c:	ldr	r3, [fp, #20]
   13440:	str	r3, [sp, #16]
   13444:	ldr	r3, [fp, #16]
   13448:	str	r3, [sp, #12]
   1344c:	ldr	r3, [fp, #12]
   13450:	str	r3, [sp, #8]
   13454:	ldr	r3, [fp, #8]
   13458:	str	r3, [sp, #4]
   1345c:	mov	r3, #5
   13460:	str	r3, [sp]
   13464:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13468:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1346c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13470:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13474:	bl	11f54 <__assert_fail@plt+0x110c>
   13478:	mov	r3, r0
   1347c:	b	135f4 <__assert_fail@plt+0x27ac>
   13480:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13484:	cmp	r3, #0
   13488:	bne	134ac <__assert_fail@plt+0x2664>
   1348c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13490:	cmp	r3, #0
   13494:	beq	134ac <__assert_fail@plt+0x2664>
   13498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1349c:	str	r3, [fp, #-92]	; 0xffffffa4
   134a0:	mov	r3, #0
   134a4:	str	r3, [fp, #-20]	; 0xffffffec
   134a8:	b	11fe0 <__assert_fail@plt+0x1198>
   134ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134b0:	cmp	r3, #0
   134b4:	beq	13520 <__assert_fail@plt+0x26d8>
   134b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   134bc:	eor	r3, r3, #1
   134c0:	uxtb	r3, r3
   134c4:	cmp	r3, #0
   134c8:	beq	13520 <__assert_fail@plt+0x26d8>
   134cc:	b	13510 <__assert_fail@plt+0x26c8>
   134d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   134d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134d8:	cmp	r2, r3
   134dc:	bcs	134f8 <__assert_fail@plt+0x26b0>
   134e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   134e8:	add	r3, r2, r3
   134ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   134f0:	ldrb	r2, [r2]
   134f4:	strb	r2, [r3]
   134f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   134fc:	add	r3, r3, #1
   13500:	str	r3, [fp, #-20]	; 0xffffffec
   13504:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13508:	add	r3, r3, #1
   1350c:	str	r3, [fp, #-28]	; 0xffffffe4
   13510:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13514:	ldrb	r3, [r3]
   13518:	cmp	r3, #0
   1351c:	bne	134d0 <__assert_fail@plt+0x2688>
   13520:	ldr	r2, [fp, #-20]	; 0xffffffec
   13524:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13528:	cmp	r2, r3
   1352c:	bcs	13544 <__assert_fail@plt+0x26fc>
   13530:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13534:	ldr	r3, [fp, #-20]	; 0xffffffec
   13538:	add	r3, r2, r3
   1353c:	mov	r2, #0
   13540:	strb	r2, [r3]
   13544:	ldr	r3, [fp, #-20]	; 0xffffffec
   13548:	b	135f4 <__assert_fail@plt+0x27ac>
   1354c:	nop			; (mov r0, r0)
   13550:	b	13590 <__assert_fail@plt+0x2748>
   13554:	nop			; (mov r0, r0)
   13558:	b	13590 <__assert_fail@plt+0x2748>
   1355c:	nop			; (mov r0, r0)
   13560:	b	13590 <__assert_fail@plt+0x2748>
   13564:	nop			; (mov r0, r0)
   13568:	b	13590 <__assert_fail@plt+0x2748>
   1356c:	nop			; (mov r0, r0)
   13570:	b	13590 <__assert_fail@plt+0x2748>
   13574:	nop			; (mov r0, r0)
   13578:	b	13590 <__assert_fail@plt+0x2748>
   1357c:	nop			; (mov r0, r0)
   13580:	b	13590 <__assert_fail@plt+0x2748>
   13584:	nop			; (mov r0, r0)
   13588:	b	13590 <__assert_fail@plt+0x2748>
   1358c:	nop			; (mov r0, r0)
   13590:	ldr	r3, [fp, #4]
   13594:	cmp	r3, #2
   13598:	bne	135b0 <__assert_fail@plt+0x2768>
   1359c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   135a0:	cmp	r3, #0
   135a4:	beq	135b0 <__assert_fail@plt+0x2768>
   135a8:	mov	r3, #4
   135ac:	str	r3, [fp, #4]
   135b0:	ldr	r3, [fp, #8]
   135b4:	bic	r3, r3, #2
   135b8:	ldr	r2, [fp, #20]
   135bc:	str	r2, [sp, #16]
   135c0:	ldr	r2, [fp, #16]
   135c4:	str	r2, [sp, #12]
   135c8:	mov	r2, #0
   135cc:	str	r2, [sp, #8]
   135d0:	str	r3, [sp, #4]
   135d4:	ldr	r3, [fp, #4]
   135d8:	str	r3, [sp]
   135dc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   135e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   135e4:	ldr	r1, [fp, #-92]	; 0xffffffa4
   135e8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   135ec:	bl	11f54 <__assert_fail@plt+0x110c>
   135f0:	mov	r3, r0
   135f4:	mov	r0, r3
   135f8:	sub	sp, fp, #8
   135fc:	pop	{r4, fp, pc}
   13600:	push	{fp, lr}
   13604:	add	fp, sp, #4
   13608:	sub	sp, sp, #56	; 0x38
   1360c:	str	r0, [fp, #-24]	; 0xffffffe8
   13610:	str	r1, [fp, #-28]	; 0xffffffe4
   13614:	str	r2, [fp, #-32]	; 0xffffffe0
   13618:	str	r3, [fp, #-36]	; 0xffffffdc
   1361c:	ldr	r3, [fp, #4]
   13620:	cmp	r3, #0
   13624:	beq	13630 <__assert_fail@plt+0x27e8>
   13628:	ldr	r3, [fp, #4]
   1362c:	b	13634 <__assert_fail@plt+0x27ec>
   13630:	ldr	r3, [pc, #132]	; 136bc <__assert_fail@plt+0x2874>
   13634:	str	r3, [fp, #-8]
   13638:	bl	10db8 <__errno_location@plt>
   1363c:	mov	r3, r0
   13640:	ldr	r3, [r3]
   13644:	str	r3, [fp, #-12]
   13648:	ldr	r3, [fp, #-8]
   1364c:	ldr	r3, [r3]
   13650:	ldr	r2, [fp, #-8]
   13654:	ldr	r2, [r2, #4]
   13658:	ldr	r1, [fp, #-8]
   1365c:	add	r1, r1, #8
   13660:	ldr	r0, [fp, #-8]
   13664:	ldr	r0, [r0, #40]	; 0x28
   13668:	ldr	ip, [fp, #-8]
   1366c:	ldr	ip, [ip, #44]	; 0x2c
   13670:	str	ip, [sp, #16]
   13674:	str	r0, [sp, #12]
   13678:	str	r1, [sp, #8]
   1367c:	str	r2, [sp, #4]
   13680:	str	r3, [sp]
   13684:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13688:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1368c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13690:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13694:	bl	11f54 <__assert_fail@plt+0x110c>
   13698:	str	r0, [fp, #-16]
   1369c:	bl	10db8 <__errno_location@plt>
   136a0:	mov	r2, r0
   136a4:	ldr	r3, [fp, #-12]
   136a8:	str	r3, [r2]
   136ac:	ldr	r3, [fp, #-16]
   136b0:	mov	r0, r3
   136b4:	sub	sp, fp, #4
   136b8:	pop	{fp, pc}
   136bc:	andeq	r8, r2, r4, asr r1
   136c0:	push	{fp, lr}
   136c4:	add	fp, sp, #4
   136c8:	sub	sp, sp, #16
   136cc:	str	r0, [fp, #-8]
   136d0:	str	r1, [fp, #-12]
   136d4:	str	r2, [fp, #-16]
   136d8:	ldr	r3, [fp, #-16]
   136dc:	mov	r2, #0
   136e0:	ldr	r1, [fp, #-12]
   136e4:	ldr	r0, [fp, #-8]
   136e8:	bl	136fc <__assert_fail@plt+0x28b4>
   136ec:	mov	r3, r0
   136f0:	mov	r0, r3
   136f4:	sub	sp, fp, #4
   136f8:	pop	{fp, pc}
   136fc:	push	{fp, lr}
   13700:	add	fp, sp, #4
   13704:	sub	sp, sp, #64	; 0x40
   13708:	str	r0, [fp, #-32]	; 0xffffffe0
   1370c:	str	r1, [fp, #-36]	; 0xffffffdc
   13710:	str	r2, [fp, #-40]	; 0xffffffd8
   13714:	str	r3, [fp, #-44]	; 0xffffffd4
   13718:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1371c:	cmp	r3, #0
   13720:	beq	1372c <__assert_fail@plt+0x28e4>
   13724:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13728:	b	13730 <__assert_fail@plt+0x28e8>
   1372c:	ldr	r3, [pc, #292]	; 13858 <__assert_fail@plt+0x2a10>
   13730:	str	r3, [fp, #-8]
   13734:	bl	10db8 <__errno_location@plt>
   13738:	mov	r3, r0
   1373c:	ldr	r3, [r3]
   13740:	str	r3, [fp, #-12]
   13744:	ldr	r3, [fp, #-8]
   13748:	ldr	r3, [r3, #4]
   1374c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13750:	cmp	r2, #0
   13754:	moveq	r2, #1
   13758:	movne	r2, #0
   1375c:	uxtb	r2, r2
   13760:	orr	r3, r3, r2
   13764:	str	r3, [fp, #-16]
   13768:	ldr	r3, [fp, #-8]
   1376c:	ldr	r3, [r3]
   13770:	ldr	r2, [fp, #-8]
   13774:	add	r2, r2, #8
   13778:	ldr	r1, [fp, #-8]
   1377c:	ldr	r1, [r1, #40]	; 0x28
   13780:	ldr	r0, [fp, #-8]
   13784:	ldr	r0, [r0, #44]	; 0x2c
   13788:	str	r0, [sp, #16]
   1378c:	str	r1, [sp, #12]
   13790:	str	r2, [sp, #8]
   13794:	ldr	r2, [fp, #-16]
   13798:	str	r2, [sp, #4]
   1379c:	str	r3, [sp]
   137a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   137a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   137a8:	mov	r1, #0
   137ac:	mov	r0, #0
   137b0:	bl	11f54 <__assert_fail@plt+0x110c>
   137b4:	mov	r3, r0
   137b8:	add	r3, r3, #1
   137bc:	str	r3, [fp, #-20]	; 0xffffffec
   137c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   137c4:	bl	149f8 <__assert_fail@plt+0x3bb0>
   137c8:	mov	r3, r0
   137cc:	str	r3, [fp, #-24]	; 0xffffffe8
   137d0:	ldr	r3, [fp, #-8]
   137d4:	ldr	r3, [r3]
   137d8:	ldr	r2, [fp, #-8]
   137dc:	add	r2, r2, #8
   137e0:	ldr	r1, [fp, #-8]
   137e4:	ldr	r1, [r1, #40]	; 0x28
   137e8:	ldr	r0, [fp, #-8]
   137ec:	ldr	r0, [r0, #44]	; 0x2c
   137f0:	str	r0, [sp, #16]
   137f4:	str	r1, [sp, #12]
   137f8:	str	r2, [sp, #8]
   137fc:	ldr	r2, [fp, #-16]
   13800:	str	r2, [sp, #4]
   13804:	str	r3, [sp]
   13808:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1380c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13810:	ldr	r1, [fp, #-20]	; 0xffffffec
   13814:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13818:	bl	11f54 <__assert_fail@plt+0x110c>
   1381c:	bl	10db8 <__errno_location@plt>
   13820:	mov	r2, r0
   13824:	ldr	r3, [fp, #-12]
   13828:	str	r3, [r2]
   1382c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13830:	cmp	r3, #0
   13834:	beq	13848 <__assert_fail@plt+0x2a00>
   13838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1383c:	sub	r2, r3, #1
   13840:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13844:	str	r2, [r3]
   13848:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1384c:	mov	r0, r3
   13850:	sub	sp, fp, #4
   13854:	pop	{fp, pc}
   13858:	andeq	r8, r2, r4, asr r1
   1385c:	push	{fp, lr}
   13860:	add	fp, sp, #4
   13864:	sub	sp, sp, #8
   13868:	ldr	r3, [pc, #196]	; 13934 <__assert_fail@plt+0x2aec>
   1386c:	ldr	r3, [r3]
   13870:	str	r3, [fp, #-12]
   13874:	mov	r3, #1
   13878:	str	r3, [fp, #-8]
   1387c:	b	138a8 <__assert_fail@plt+0x2a60>
   13880:	ldr	r3, [fp, #-8]
   13884:	lsl	r3, r3, #3
   13888:	ldr	r2, [fp, #-12]
   1388c:	add	r3, r2, r3
   13890:	ldr	r3, [r3, #4]
   13894:	mov	r0, r3
   13898:	bl	16260 <__assert_fail@plt+0x5418>
   1389c:	ldr	r3, [fp, #-8]
   138a0:	add	r3, r3, #1
   138a4:	str	r3, [fp, #-8]
   138a8:	ldr	r3, [pc, #136]	; 13938 <__assert_fail@plt+0x2af0>
   138ac:	ldr	r3, [r3]
   138b0:	ldr	r2, [fp, #-8]
   138b4:	cmp	r2, r3
   138b8:	blt	13880 <__assert_fail@plt+0x2a38>
   138bc:	ldr	r3, [fp, #-12]
   138c0:	ldr	r3, [r3, #4]
   138c4:	ldr	r2, [pc, #112]	; 1393c <__assert_fail@plt+0x2af4>
   138c8:	cmp	r3, r2
   138cc:	beq	138f8 <__assert_fail@plt+0x2ab0>
   138d0:	ldr	r3, [fp, #-12]
   138d4:	ldr	r3, [r3, #4]
   138d8:	mov	r0, r3
   138dc:	bl	16260 <__assert_fail@plt+0x5418>
   138e0:	ldr	r3, [pc, #88]	; 13940 <__assert_fail@plt+0x2af8>
   138e4:	mov	r2, #256	; 0x100
   138e8:	str	r2, [r3]
   138ec:	ldr	r3, [pc, #76]	; 13940 <__assert_fail@plt+0x2af8>
   138f0:	ldr	r2, [pc, #68]	; 1393c <__assert_fail@plt+0x2af4>
   138f4:	str	r2, [r3, #4]
   138f8:	ldr	r3, [fp, #-12]
   138fc:	ldr	r2, [pc, #60]	; 13940 <__assert_fail@plt+0x2af8>
   13900:	cmp	r3, r2
   13904:	beq	1391c <__assert_fail@plt+0x2ad4>
   13908:	ldr	r0, [fp, #-12]
   1390c:	bl	16260 <__assert_fail@plt+0x5418>
   13910:	ldr	r3, [pc, #28]	; 13934 <__assert_fail@plt+0x2aec>
   13914:	ldr	r2, [pc, #36]	; 13940 <__assert_fail@plt+0x2af8>
   13918:	str	r2, [r3]
   1391c:	ldr	r3, [pc, #20]	; 13938 <__assert_fail@plt+0x2af0>
   13920:	mov	r2, #1
   13924:	str	r2, [r3]
   13928:	nop			; (mov r0, r0)
   1392c:	sub	sp, fp, #4
   13930:	pop	{fp, pc}
   13934:	strdeq	r8, [r2], -r4
   13938:	andeq	r8, r2, r8, ror #1
   1393c:	andeq	r8, r2, r4, lsl #3
   13940:	andeq	r8, r2, ip, ror #1
   13944:	push	{r4, fp, lr}
   13948:	add	fp, sp, #8
   1394c:	sub	sp, sp, #84	; 0x54
   13950:	str	r0, [fp, #-56]	; 0xffffffc8
   13954:	str	r1, [fp, #-60]	; 0xffffffc4
   13958:	str	r2, [fp, #-64]	; 0xffffffc0
   1395c:	str	r3, [fp, #-68]	; 0xffffffbc
   13960:	bl	10db8 <__errno_location@plt>
   13964:	mov	r3, r0
   13968:	ldr	r3, [r3]
   1396c:	str	r3, [fp, #-24]	; 0xffffffe8
   13970:	ldr	r3, [pc, #640]	; 13bf8 <__assert_fail@plt+0x2db0>
   13974:	ldr	r3, [r3]
   13978:	str	r3, [fp, #-16]
   1397c:	mvn	r3, #-2147483648	; 0x80000000
   13980:	str	r3, [fp, #-28]	; 0xffffffe4
   13984:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13988:	cmp	r3, #0
   1398c:	blt	139a0 <__assert_fail@plt+0x2b58>
   13990:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13994:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13998:	cmp	r2, r3
   1399c:	blt	139a4 <__assert_fail@plt+0x2b5c>
   139a0:	bl	10e3c <abort@plt>
   139a4:	ldr	r3, [pc, #592]	; 13bfc <__assert_fail@plt+0x2db4>
   139a8:	ldr	r2, [r3]
   139ac:	ldr	r3, [fp, #-56]	; 0xffffffc8
   139b0:	cmp	r2, r3
   139b4:	bgt	13a88 <__assert_fail@plt+0x2c40>
   139b8:	ldr	r3, [fp, #-16]
   139bc:	ldr	r2, [pc, #572]	; 13c00 <__assert_fail@plt+0x2db8>
   139c0:	cmp	r3, r2
   139c4:	moveq	r3, #1
   139c8:	movne	r3, #0
   139cc:	strb	r3, [fp, #-29]	; 0xffffffe3
   139d0:	ldr	r3, [pc, #548]	; 13bfc <__assert_fail@plt+0x2db4>
   139d4:	ldr	r3, [r3]
   139d8:	str	r3, [fp, #-48]	; 0xffffffd0
   139dc:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   139e0:	cmp	r3, #0
   139e4:	beq	139f0 <__assert_fail@plt+0x2ba8>
   139e8:	mov	r0, #0
   139ec:	b	139f4 <__assert_fail@plt+0x2bac>
   139f0:	ldr	r0, [fp, #-16]
   139f4:	ldr	r3, [pc, #512]	; 13bfc <__assert_fail@plt+0x2db4>
   139f8:	ldr	r3, [r3]
   139fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13a00:	sub	r3, r2, r3
   13a04:	add	r2, r3, #1
   13a08:	sub	r1, fp, #48	; 0x30
   13a0c:	mov	r3, #8
   13a10:	str	r3, [sp]
   13a14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13a18:	bl	14d18 <__assert_fail@plt+0x3ed0>
   13a1c:	str	r0, [fp, #-16]
   13a20:	ldr	r2, [pc, #464]	; 13bf8 <__assert_fail@plt+0x2db0>
   13a24:	ldr	r3, [fp, #-16]
   13a28:	str	r3, [r2]
   13a2c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13a30:	cmp	r3, #0
   13a34:	beq	13a48 <__assert_fail@plt+0x2c00>
   13a38:	ldr	r3, [fp, #-16]
   13a3c:	ldr	r2, [pc, #444]	; 13c00 <__assert_fail@plt+0x2db8>
   13a40:	ldm	r2, {r0, r1}
   13a44:	stm	r3, {r0, r1}
   13a48:	ldr	r3, [pc, #428]	; 13bfc <__assert_fail@plt+0x2db4>
   13a4c:	ldr	r3, [r3]
   13a50:	lsl	r3, r3, #3
   13a54:	ldr	r2, [fp, #-16]
   13a58:	add	r0, r2, r3
   13a5c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a60:	ldr	r3, [pc, #404]	; 13bfc <__assert_fail@plt+0x2db4>
   13a64:	ldr	r3, [r3]
   13a68:	sub	r3, r2, r3
   13a6c:	lsl	r3, r3, #3
   13a70:	mov	r2, r3
   13a74:	mov	r1, #0
   13a78:	bl	10dd0 <memset@plt>
   13a7c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a80:	ldr	r2, [pc, #372]	; 13bfc <__assert_fail@plt+0x2db4>
   13a84:	str	r3, [r2]
   13a88:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a8c:	lsl	r3, r3, #3
   13a90:	ldr	r2, [fp, #-16]
   13a94:	add	r3, r2, r3
   13a98:	ldr	r3, [r3]
   13a9c:	str	r3, [fp, #-36]	; 0xffffffdc
   13aa0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13aa4:	lsl	r3, r3, #3
   13aa8:	ldr	r2, [fp, #-16]
   13aac:	add	r3, r2, r3
   13ab0:	ldr	r3, [r3, #4]
   13ab4:	str	r3, [fp, #-20]	; 0xffffffec
   13ab8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13abc:	ldr	r3, [r3, #4]
   13ac0:	orr	r3, r3, #1
   13ac4:	str	r3, [fp, #-40]	; 0xffffffd8
   13ac8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13acc:	ldr	r3, [r3]
   13ad0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13ad4:	add	r2, r2, #8
   13ad8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13adc:	ldr	r1, [r1, #40]	; 0x28
   13ae0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ae4:	ldr	r0, [r0, #44]	; 0x2c
   13ae8:	str	r0, [sp, #16]
   13aec:	str	r1, [sp, #12]
   13af0:	str	r2, [sp, #8]
   13af4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13af8:	str	r2, [sp, #4]
   13afc:	str	r3, [sp]
   13b00:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13b04:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13b08:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13b0c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b10:	bl	11f54 <__assert_fail@plt+0x110c>
   13b14:	str	r0, [fp, #-44]	; 0xffffffd4
   13b18:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13b1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13b20:	cmp	r2, r3
   13b24:	bhi	13bd8 <__assert_fail@plt+0x2d90>
   13b28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b2c:	lsl	r3, r3, #3
   13b30:	ldr	r2, [fp, #-16]
   13b34:	add	r3, r2, r3
   13b38:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13b3c:	add	r2, r2, #1
   13b40:	str	r2, [fp, #-36]	; 0xffffffdc
   13b44:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13b48:	str	r2, [r3]
   13b4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b50:	ldr	r2, [pc, #172]	; 13c04 <__assert_fail@plt+0x2dbc>
   13b54:	cmp	r3, r2
   13b58:	beq	13b64 <__assert_fail@plt+0x2d1c>
   13b5c:	ldr	r0, [fp, #-20]	; 0xffffffec
   13b60:	bl	16260 <__assert_fail@plt+0x5418>
   13b64:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13b68:	lsl	r3, r3, #3
   13b6c:	ldr	r2, [fp, #-16]
   13b70:	add	r4, r2, r3
   13b74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13b78:	bl	149f8 <__assert_fail@plt+0x3bb0>
   13b7c:	mov	r3, r0
   13b80:	str	r3, [fp, #-20]	; 0xffffffec
   13b84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b88:	str	r3, [r4, #4]
   13b8c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13b90:	ldr	r3, [r3]
   13b94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13b98:	add	r2, r2, #8
   13b9c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13ba0:	ldr	r1, [r1, #40]	; 0x28
   13ba4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ba8:	ldr	r0, [r0, #44]	; 0x2c
   13bac:	str	r0, [sp, #16]
   13bb0:	str	r1, [sp, #12]
   13bb4:	str	r2, [sp, #8]
   13bb8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13bbc:	str	r2, [sp, #4]
   13bc0:	str	r3, [sp]
   13bc4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13bc8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13bcc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   13bd4:	bl	11f54 <__assert_fail@plt+0x110c>
   13bd8:	bl	10db8 <__errno_location@plt>
   13bdc:	mov	r2, r0
   13be0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13be4:	str	r3, [r2]
   13be8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bec:	mov	r0, r3
   13bf0:	sub	sp, fp, #8
   13bf4:	pop	{r4, fp, pc}
   13bf8:	strdeq	r8, [r2], -r4
   13bfc:	andeq	r8, r2, r8, ror #1
   13c00:	andeq	r8, r2, ip, ror #1
   13c04:	andeq	r8, r2, r4, lsl #3
   13c08:	push	{fp, lr}
   13c0c:	add	fp, sp, #4
   13c10:	sub	sp, sp, #8
   13c14:	str	r0, [fp, #-8]
   13c18:	str	r1, [fp, #-12]
   13c1c:	ldr	r3, [pc, #28]	; 13c40 <__assert_fail@plt+0x2df8>
   13c20:	mvn	r2, #0
   13c24:	ldr	r1, [fp, #-12]
   13c28:	ldr	r0, [fp, #-8]
   13c2c:	bl	13944 <__assert_fail@plt+0x2afc>
   13c30:	mov	r3, r0
   13c34:	mov	r0, r3
   13c38:	sub	sp, fp, #4
   13c3c:	pop	{fp, pc}
   13c40:	andeq	r8, r2, r4, asr r1
   13c44:	push	{fp, lr}
   13c48:	add	fp, sp, #4
   13c4c:	sub	sp, sp, #16
   13c50:	str	r0, [fp, #-8]
   13c54:	str	r1, [fp, #-12]
   13c58:	str	r2, [fp, #-16]
   13c5c:	ldr	r3, [pc, #28]	; 13c80 <__assert_fail@plt+0x2e38>
   13c60:	ldr	r2, [fp, #-16]
   13c64:	ldr	r1, [fp, #-12]
   13c68:	ldr	r0, [fp, #-8]
   13c6c:	bl	13944 <__assert_fail@plt+0x2afc>
   13c70:	mov	r3, r0
   13c74:	mov	r0, r3
   13c78:	sub	sp, fp, #4
   13c7c:	pop	{fp, pc}
   13c80:	andeq	r8, r2, r4, asr r1
   13c84:	push	{fp, lr}
   13c88:	add	fp, sp, #4
   13c8c:	sub	sp, sp, #8
   13c90:	str	r0, [fp, #-8]
   13c94:	ldr	r1, [fp, #-8]
   13c98:	mov	r0, #0
   13c9c:	bl	13c08 <__assert_fail@plt+0x2dc0>
   13ca0:	mov	r3, r0
   13ca4:	mov	r0, r3
   13ca8:	sub	sp, fp, #4
   13cac:	pop	{fp, pc}
   13cb0:	push	{fp, lr}
   13cb4:	add	fp, sp, #4
   13cb8:	sub	sp, sp, #8
   13cbc:	str	r0, [fp, #-8]
   13cc0:	str	r1, [fp, #-12]
   13cc4:	ldr	r2, [fp, #-12]
   13cc8:	ldr	r1, [fp, #-8]
   13ccc:	mov	r0, #0
   13cd0:	bl	13c44 <__assert_fail@plt+0x2dfc>
   13cd4:	mov	r3, r0
   13cd8:	mov	r0, r3
   13cdc:	sub	sp, fp, #4
   13ce0:	pop	{fp, pc}
   13ce4:	push	{fp, lr}
   13ce8:	add	fp, sp, #4
   13cec:	sub	sp, sp, #64	; 0x40
   13cf0:	str	r0, [fp, #-56]	; 0xffffffc8
   13cf4:	str	r1, [fp, #-60]	; 0xffffffc4
   13cf8:	str	r2, [fp, #-64]	; 0xffffffc0
   13cfc:	sub	r3, fp, #52	; 0x34
   13d00:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13d04:	mov	r0, r3
   13d08:	bl	11df0 <__assert_fail@plt+0xfa8>
   13d0c:	sub	r3, fp, #52	; 0x34
   13d10:	mvn	r2, #0
   13d14:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d18:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d1c:	bl	13944 <__assert_fail@plt+0x2afc>
   13d20:	mov	r3, r0
   13d24:	mov	r0, r3
   13d28:	sub	sp, fp, #4
   13d2c:	pop	{fp, pc}
   13d30:	push	{fp, lr}
   13d34:	add	fp, sp, #4
   13d38:	sub	sp, sp, #64	; 0x40
   13d3c:	str	r0, [fp, #-56]	; 0xffffffc8
   13d40:	str	r1, [fp, #-60]	; 0xffffffc4
   13d44:	str	r2, [fp, #-64]	; 0xffffffc0
   13d48:	str	r3, [fp, #-68]	; 0xffffffbc
   13d4c:	sub	r3, fp, #52	; 0x34
   13d50:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13d54:	mov	r0, r3
   13d58:	bl	11df0 <__assert_fail@plt+0xfa8>
   13d5c:	sub	r3, fp, #52	; 0x34
   13d60:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13d64:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d68:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13d6c:	bl	13944 <__assert_fail@plt+0x2afc>
   13d70:	mov	r3, r0
   13d74:	mov	r0, r3
   13d78:	sub	sp, fp, #4
   13d7c:	pop	{fp, pc}
   13d80:	push	{fp, lr}
   13d84:	add	fp, sp, #4
   13d88:	sub	sp, sp, #8
   13d8c:	str	r0, [fp, #-8]
   13d90:	str	r1, [fp, #-12]
   13d94:	ldr	r2, [fp, #-12]
   13d98:	ldr	r1, [fp, #-8]
   13d9c:	mov	r0, #0
   13da0:	bl	13ce4 <__assert_fail@plt+0x2e9c>
   13da4:	mov	r3, r0
   13da8:	mov	r0, r3
   13dac:	sub	sp, fp, #4
   13db0:	pop	{fp, pc}
   13db4:	push	{fp, lr}
   13db8:	add	fp, sp, #4
   13dbc:	sub	sp, sp, #16
   13dc0:	str	r0, [fp, #-8]
   13dc4:	str	r1, [fp, #-12]
   13dc8:	str	r2, [fp, #-16]
   13dcc:	ldr	r3, [fp, #-16]
   13dd0:	ldr	r2, [fp, #-12]
   13dd4:	ldr	r1, [fp, #-8]
   13dd8:	mov	r0, #0
   13ddc:	bl	13d30 <__assert_fail@plt+0x2ee8>
   13de0:	mov	r3, r0
   13de4:	mov	r0, r3
   13de8:	sub	sp, fp, #4
   13dec:	pop	{fp, pc}
   13df0:	push	{fp, lr}
   13df4:	add	fp, sp, #4
   13df8:	sub	sp, sp, #64	; 0x40
   13dfc:	str	r0, [fp, #-56]	; 0xffffffc8
   13e00:	str	r1, [fp, #-60]	; 0xffffffc4
   13e04:	mov	r3, r2
   13e08:	strb	r3, [fp, #-61]	; 0xffffffc3
   13e0c:	ldr	r3, [pc, #84]	; 13e68 <__assert_fail@plt+0x3020>
   13e10:	sub	ip, fp, #52	; 0x34
   13e14:	mov	lr, r3
   13e18:	ldm	lr!, {r0, r1, r2, r3}
   13e1c:	stmia	ip!, {r0, r1, r2, r3}
   13e20:	ldm	lr!, {r0, r1, r2, r3}
   13e24:	stmia	ip!, {r0, r1, r2, r3}
   13e28:	ldm	lr, {r0, r1, r2, r3}
   13e2c:	stm	ip, {r0, r1, r2, r3}
   13e30:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   13e34:	sub	r3, fp, #52	; 0x34
   13e38:	mov	r2, #1
   13e3c:	mov	r0, r3
   13e40:	bl	11c5c <__assert_fail@plt+0xe14>
   13e44:	sub	r3, fp, #52	; 0x34
   13e48:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13e4c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e50:	mov	r0, #0
   13e54:	bl	13944 <__assert_fail@plt+0x2afc>
   13e58:	mov	r3, r0
   13e5c:	mov	r0, r3
   13e60:	sub	sp, fp, #4
   13e64:	pop	{fp, pc}
   13e68:	andeq	r8, r2, r4, asr r1
   13e6c:	push	{fp, lr}
   13e70:	add	fp, sp, #4
   13e74:	sub	sp, sp, #8
   13e78:	str	r0, [fp, #-8]
   13e7c:	mov	r3, r1
   13e80:	strb	r3, [fp, #-9]
   13e84:	ldrb	r3, [fp, #-9]
   13e88:	mov	r2, r3
   13e8c:	mvn	r1, #0
   13e90:	ldr	r0, [fp, #-8]
   13e94:	bl	13df0 <__assert_fail@plt+0x2fa8>
   13e98:	mov	r3, r0
   13e9c:	mov	r0, r3
   13ea0:	sub	sp, fp, #4
   13ea4:	pop	{fp, pc}
   13ea8:	push	{fp, lr}
   13eac:	add	fp, sp, #4
   13eb0:	sub	sp, sp, #8
   13eb4:	str	r0, [fp, #-8]
   13eb8:	mov	r1, #58	; 0x3a
   13ebc:	ldr	r0, [fp, #-8]
   13ec0:	bl	13e6c <__assert_fail@plt+0x3024>
   13ec4:	mov	r3, r0
   13ec8:	mov	r0, r3
   13ecc:	sub	sp, fp, #4
   13ed0:	pop	{fp, pc}
   13ed4:	push	{fp, lr}
   13ed8:	add	fp, sp, #4
   13edc:	sub	sp, sp, #8
   13ee0:	str	r0, [fp, #-8]
   13ee4:	str	r1, [fp, #-12]
   13ee8:	mov	r2, #58	; 0x3a
   13eec:	ldr	r1, [fp, #-12]
   13ef0:	ldr	r0, [fp, #-8]
   13ef4:	bl	13df0 <__assert_fail@plt+0x2fa8>
   13ef8:	mov	r3, r0
   13efc:	mov	r0, r3
   13f00:	sub	sp, fp, #4
   13f04:	pop	{fp, pc}
   13f08:	push	{fp, lr}
   13f0c:	add	fp, sp, #4
   13f10:	sub	sp, sp, #112	; 0x70
   13f14:	str	r0, [fp, #-56]	; 0xffffffc8
   13f18:	str	r1, [fp, #-60]	; 0xffffffc4
   13f1c:	str	r2, [fp, #-64]	; 0xffffffc0
   13f20:	sub	r3, fp, #116	; 0x74
   13f24:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13f28:	mov	r0, r3
   13f2c:	bl	11df0 <__assert_fail@plt+0xfa8>
   13f30:	sub	ip, fp, #52	; 0x34
   13f34:	sub	lr, fp, #116	; 0x74
   13f38:	ldm	lr!, {r0, r1, r2, r3}
   13f3c:	stmia	ip!, {r0, r1, r2, r3}
   13f40:	ldm	lr!, {r0, r1, r2, r3}
   13f44:	stmia	ip!, {r0, r1, r2, r3}
   13f48:	ldm	lr, {r0, r1, r2, r3}
   13f4c:	stm	ip, {r0, r1, r2, r3}
   13f50:	sub	r3, fp, #52	; 0x34
   13f54:	mov	r2, #1
   13f58:	mov	r1, #58	; 0x3a
   13f5c:	mov	r0, r3
   13f60:	bl	11c5c <__assert_fail@plt+0xe14>
   13f64:	sub	r3, fp, #52	; 0x34
   13f68:	mvn	r2, #0
   13f6c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13f70:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f74:	bl	13944 <__assert_fail@plt+0x2afc>
   13f78:	mov	r3, r0
   13f7c:	mov	r0, r3
   13f80:	sub	sp, fp, #4
   13f84:	pop	{fp, pc}
   13f88:	push	{fp, lr}
   13f8c:	add	fp, sp, #4
   13f90:	sub	sp, sp, #24
   13f94:	str	r0, [fp, #-8]
   13f98:	str	r1, [fp, #-12]
   13f9c:	str	r2, [fp, #-16]
   13fa0:	str	r3, [fp, #-20]	; 0xffffffec
   13fa4:	mvn	r3, #0
   13fa8:	str	r3, [sp]
   13fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fb0:	ldr	r2, [fp, #-16]
   13fb4:	ldr	r1, [fp, #-12]
   13fb8:	ldr	r0, [fp, #-8]
   13fbc:	bl	13fd0 <__assert_fail@plt+0x3188>
   13fc0:	mov	r3, r0
   13fc4:	mov	r0, r3
   13fc8:	sub	sp, fp, #4
   13fcc:	pop	{fp, pc}
   13fd0:	push	{fp, lr}
   13fd4:	add	fp, sp, #4
   13fd8:	sub	sp, sp, #64	; 0x40
   13fdc:	str	r0, [fp, #-56]	; 0xffffffc8
   13fe0:	str	r1, [fp, #-60]	; 0xffffffc4
   13fe4:	str	r2, [fp, #-64]	; 0xffffffc0
   13fe8:	str	r3, [fp, #-68]	; 0xffffffbc
   13fec:	ldr	r3, [pc, #84]	; 14048 <__assert_fail@plt+0x3200>
   13ff0:	sub	ip, fp, #52	; 0x34
   13ff4:	mov	lr, r3
   13ff8:	ldm	lr!, {r0, r1, r2, r3}
   13ffc:	stmia	ip!, {r0, r1, r2, r3}
   14000:	ldm	lr!, {r0, r1, r2, r3}
   14004:	stmia	ip!, {r0, r1, r2, r3}
   14008:	ldm	lr, {r0, r1, r2, r3}
   1400c:	stm	ip, {r0, r1, r2, r3}
   14010:	sub	r3, fp, #52	; 0x34
   14014:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14018:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1401c:	mov	r0, r3
   14020:	bl	11d74 <__assert_fail@plt+0xf2c>
   14024:	sub	r3, fp, #52	; 0x34
   14028:	ldr	r2, [fp, #4]
   1402c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14030:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14034:	bl	13944 <__assert_fail@plt+0x2afc>
   14038:	mov	r3, r0
   1403c:	mov	r0, r3
   14040:	sub	sp, fp, #4
   14044:	pop	{fp, pc}
   14048:	andeq	r8, r2, r4, asr r1
   1404c:	push	{fp, lr}
   14050:	add	fp, sp, #4
   14054:	sub	sp, sp, #16
   14058:	str	r0, [fp, #-8]
   1405c:	str	r1, [fp, #-12]
   14060:	str	r2, [fp, #-16]
   14064:	ldr	r3, [fp, #-16]
   14068:	ldr	r2, [fp, #-12]
   1406c:	ldr	r1, [fp, #-8]
   14070:	mov	r0, #0
   14074:	bl	13f88 <__assert_fail@plt+0x3140>
   14078:	mov	r3, r0
   1407c:	mov	r0, r3
   14080:	sub	sp, fp, #4
   14084:	pop	{fp, pc}
   14088:	push	{fp, lr}
   1408c:	add	fp, sp, #4
   14090:	sub	sp, sp, #24
   14094:	str	r0, [fp, #-8]
   14098:	str	r1, [fp, #-12]
   1409c:	str	r2, [fp, #-16]
   140a0:	str	r3, [fp, #-20]	; 0xffffffec
   140a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140a8:	str	r3, [sp]
   140ac:	ldr	r3, [fp, #-16]
   140b0:	ldr	r2, [fp, #-12]
   140b4:	ldr	r1, [fp, #-8]
   140b8:	mov	r0, #0
   140bc:	bl	13fd0 <__assert_fail@plt+0x3188>
   140c0:	mov	r3, r0
   140c4:	mov	r0, r3
   140c8:	sub	sp, fp, #4
   140cc:	pop	{fp, pc}
   140d0:	push	{fp, lr}
   140d4:	add	fp, sp, #4
   140d8:	sub	sp, sp, #16
   140dc:	str	r0, [fp, #-8]
   140e0:	str	r1, [fp, #-12]
   140e4:	str	r2, [fp, #-16]
   140e8:	ldr	r3, [pc, #28]	; 1410c <__assert_fail@plt+0x32c4>
   140ec:	ldr	r2, [fp, #-16]
   140f0:	ldr	r1, [fp, #-12]
   140f4:	ldr	r0, [fp, #-8]
   140f8:	bl	13944 <__assert_fail@plt+0x2afc>
   140fc:	mov	r3, r0
   14100:	mov	r0, r3
   14104:	sub	sp, fp, #4
   14108:	pop	{fp, pc}
   1410c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14110:	push	{fp, lr}
   14114:	add	fp, sp, #4
   14118:	sub	sp, sp, #8
   1411c:	str	r0, [fp, #-8]
   14120:	str	r1, [fp, #-12]
   14124:	ldr	r2, [fp, #-12]
   14128:	ldr	r1, [fp, #-8]
   1412c:	mov	r0, #0
   14130:	bl	140d0 <__assert_fail@plt+0x3288>
   14134:	mov	r3, r0
   14138:	mov	r0, r3
   1413c:	sub	sp, fp, #4
   14140:	pop	{fp, pc}
   14144:	push	{fp, lr}
   14148:	add	fp, sp, #4
   1414c:	sub	sp, sp, #8
   14150:	str	r0, [fp, #-8]
   14154:	str	r1, [fp, #-12]
   14158:	mvn	r2, #0
   1415c:	ldr	r1, [fp, #-12]
   14160:	ldr	r0, [fp, #-8]
   14164:	bl	140d0 <__assert_fail@plt+0x3288>
   14168:	mov	r3, r0
   1416c:	mov	r0, r3
   14170:	sub	sp, fp, #4
   14174:	pop	{fp, pc}
   14178:	push	{fp, lr}
   1417c:	add	fp, sp, #4
   14180:	sub	sp, sp, #8
   14184:	str	r0, [fp, #-8]
   14188:	ldr	r1, [fp, #-8]
   1418c:	mov	r0, #0
   14190:	bl	14144 <__assert_fail@plt+0x32fc>
   14194:	mov	r3, r0
   14198:	mov	r0, r3
   1419c:	sub	sp, fp, #4
   141a0:	pop	{fp, pc}
   141a4:	push	{r4, r5, r6, r7, fp, lr}
   141a8:	add	fp, sp, #20
   141ac:	sub	sp, sp, #48	; 0x30
   141b0:	str	r0, [fp, #-24]	; 0xffffffe8
   141b4:	str	r1, [fp, #-28]	; 0xffffffe4
   141b8:	str	r2, [fp, #-32]	; 0xffffffe0
   141bc:	str	r3, [fp, #-36]	; 0xffffffdc
   141c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   141c4:	cmp	r3, #0
   141c8:	beq	141ec <__assert_fail@plt+0x33a4>
   141cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   141d0:	str	r3, [sp]
   141d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   141d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   141dc:	ldr	r1, [pc, #1260]	; 146d0 <__assert_fail@plt+0x3888>
   141e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141e4:	bl	10dac <fprintf@plt>
   141e8:	b	14200 <__assert_fail@plt+0x33b8>
   141ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   141f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   141f4:	ldr	r1, [pc, #1240]	; 146d4 <__assert_fail@plt+0x388c>
   141f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   141fc:	bl	10dac <fprintf@plt>
   14200:	ldr	r0, [pc, #1232]	; 146d8 <__assert_fail@plt+0x3890>
   14204:	bl	10d88 <gettext@plt>
   14208:	mov	r2, r0
   1420c:	ldr	r3, [pc, #1224]	; 146dc <__assert_fail@plt+0x3894>
   14210:	ldr	r1, [pc, #1224]	; 146e0 <__assert_fail@plt+0x3898>
   14214:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14218:	bl	10dac <fprintf@plt>
   1421c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14220:	mov	r0, #10
   14224:	bl	10c98 <fputc_unlocked@plt>
   14228:	ldr	r0, [pc, #1204]	; 146e4 <__assert_fail@plt+0x389c>
   1422c:	bl	10d88 <gettext@plt>
   14230:	mov	r3, r0
   14234:	ldr	r2, [pc, #1196]	; 146e8 <__assert_fail@plt+0x38a0>
   14238:	mov	r1, r3
   1423c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14240:	bl	10dac <fprintf@plt>
   14244:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14248:	mov	r0, #10
   1424c:	bl	10c98 <fputc_unlocked@plt>
   14250:	ldr	r3, [fp, #8]
   14254:	cmp	r3, #9
   14258:	ldrls	pc, [pc, r3, lsl #2]
   1425c:	b	14618 <__assert_fail@plt+0x37d0>
   14260:	andeq	r4, r1, r0, asr #13
   14264:	andeq	r4, r1, r8, lsl #5
   14268:	andeq	r4, r1, ip, lsr #5
   1426c:	ldrdeq	r4, [r1], -r8
   14270:	andeq	r4, r1, r8, lsl r3
   14274:	andeq	r4, r1, r0, ror r3
   14278:	ldrdeq	r4, [r1], -r8
   1427c:	andeq	r4, r1, r0, asr r4
   14280:	ldrdeq	r4, [r1], -r8
   14284:	andeq	r4, r1, r0, ror r5
   14288:	ldr	r0, [pc, #1116]	; 146ec <__assert_fail@plt+0x38a4>
   1428c:	bl	10d88 <gettext@plt>
   14290:	mov	r1, r0
   14294:	ldr	r3, [fp, #4]
   14298:	ldr	r3, [r3]
   1429c:	mov	r2, r3
   142a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142a4:	bl	10dac <fprintf@plt>
   142a8:	b	146c4 <__assert_fail@plt+0x387c>
   142ac:	ldr	r0, [pc, #1084]	; 146f0 <__assert_fail@plt+0x38a8>
   142b0:	bl	10d88 <gettext@plt>
   142b4:	mov	r1, r0
   142b8:	ldr	r3, [fp, #4]
   142bc:	ldr	r2, [r3]
   142c0:	ldr	r3, [fp, #4]
   142c4:	add	r3, r3, #4
   142c8:	ldr	r3, [r3]
   142cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142d0:	bl	10dac <fprintf@plt>
   142d4:	b	146c4 <__assert_fail@plt+0x387c>
   142d8:	ldr	r0, [pc, #1044]	; 146f4 <__assert_fail@plt+0x38ac>
   142dc:	bl	10d88 <gettext@plt>
   142e0:	ldr	r3, [fp, #4]
   142e4:	ldr	r2, [r3]
   142e8:	ldr	r3, [fp, #4]
   142ec:	add	r3, r3, #4
   142f0:	ldr	r1, [r3]
   142f4:	ldr	r3, [fp, #4]
   142f8:	add	r3, r3, #8
   142fc:	ldr	r3, [r3]
   14300:	str	r3, [sp]
   14304:	mov	r3, r1
   14308:	mov	r1, r0
   1430c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14310:	bl	10dac <fprintf@plt>
   14314:	b	146c4 <__assert_fail@plt+0x387c>
   14318:	ldr	r0, [pc, #984]	; 146f8 <__assert_fail@plt+0x38b0>
   1431c:	bl	10d88 <gettext@plt>
   14320:	mov	ip, r0
   14324:	ldr	r3, [fp, #4]
   14328:	ldr	r1, [r3]
   1432c:	ldr	r3, [fp, #4]
   14330:	add	r3, r3, #4
   14334:	ldr	r0, [r3]
   14338:	ldr	r3, [fp, #4]
   1433c:	add	r3, r3, #8
   14340:	ldr	r3, [r3]
   14344:	ldr	r2, [fp, #4]
   14348:	add	r2, r2, #12
   1434c:	ldr	r2, [r2]
   14350:	str	r2, [sp, #4]
   14354:	str	r3, [sp]
   14358:	mov	r3, r0
   1435c:	mov	r2, r1
   14360:	mov	r1, ip
   14364:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14368:	bl	10dac <fprintf@plt>
   1436c:	b	146c4 <__assert_fail@plt+0x387c>
   14370:	ldr	r0, [pc, #900]	; 146fc <__assert_fail@plt+0x38b4>
   14374:	bl	10d88 <gettext@plt>
   14378:	mov	lr, r0
   1437c:	ldr	r3, [fp, #4]
   14380:	ldr	r0, [r3]
   14384:	ldr	r3, [fp, #4]
   14388:	add	r3, r3, #4
   1438c:	ldr	ip, [r3]
   14390:	ldr	r3, [fp, #4]
   14394:	add	r3, r3, #8
   14398:	ldr	r3, [r3]
   1439c:	ldr	r2, [fp, #4]
   143a0:	add	r2, r2, #12
   143a4:	ldr	r2, [r2]
   143a8:	ldr	r1, [fp, #4]
   143ac:	add	r1, r1, #16
   143b0:	ldr	r1, [r1]
   143b4:	str	r1, [sp, #8]
   143b8:	str	r2, [sp, #4]
   143bc:	str	r3, [sp]
   143c0:	mov	r3, ip
   143c4:	mov	r2, r0
   143c8:	mov	r1, lr
   143cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143d0:	bl	10dac <fprintf@plt>
   143d4:	b	146c4 <__assert_fail@plt+0x387c>
   143d8:	ldr	r0, [pc, #800]	; 14700 <__assert_fail@plt+0x38b8>
   143dc:	bl	10d88 <gettext@plt>
   143e0:	mov	r4, r0
   143e4:	ldr	r3, [fp, #4]
   143e8:	ldr	ip, [r3]
   143ec:	ldr	r3, [fp, #4]
   143f0:	add	r3, r3, #4
   143f4:	ldr	lr, [r3]
   143f8:	ldr	r3, [fp, #4]
   143fc:	add	r3, r3, #8
   14400:	ldr	r3, [r3]
   14404:	ldr	r2, [fp, #4]
   14408:	add	r2, r2, #12
   1440c:	ldr	r2, [r2]
   14410:	ldr	r1, [fp, #4]
   14414:	add	r1, r1, #16
   14418:	ldr	r1, [r1]
   1441c:	ldr	r0, [fp, #4]
   14420:	add	r0, r0, #20
   14424:	ldr	r0, [r0]
   14428:	str	r0, [sp, #12]
   1442c:	str	r1, [sp, #8]
   14430:	str	r2, [sp, #4]
   14434:	str	r3, [sp]
   14438:	mov	r3, lr
   1443c:	mov	r2, ip
   14440:	mov	r1, r4
   14444:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14448:	bl	10dac <fprintf@plt>
   1444c:	b	146c4 <__assert_fail@plt+0x387c>
   14450:	ldr	r0, [pc, #684]	; 14704 <__assert_fail@plt+0x38bc>
   14454:	bl	10d88 <gettext@plt>
   14458:	mov	r5, r0
   1445c:	ldr	r3, [fp, #4]
   14460:	ldr	lr, [r3]
   14464:	ldr	r3, [fp, #4]
   14468:	add	r3, r3, #4
   1446c:	ldr	r4, [r3]
   14470:	ldr	r3, [fp, #4]
   14474:	add	r3, r3, #8
   14478:	ldr	r3, [r3]
   1447c:	ldr	r2, [fp, #4]
   14480:	add	r2, r2, #12
   14484:	ldr	r2, [r2]
   14488:	ldr	r1, [fp, #4]
   1448c:	add	r1, r1, #16
   14490:	ldr	r1, [r1]
   14494:	ldr	r0, [fp, #4]
   14498:	add	r0, r0, #20
   1449c:	ldr	r0, [r0]
   144a0:	ldr	ip, [fp, #4]
   144a4:	add	ip, ip, #24
   144a8:	ldr	ip, [ip]
   144ac:	str	ip, [sp, #16]
   144b0:	str	r0, [sp, #12]
   144b4:	str	r1, [sp, #8]
   144b8:	str	r2, [sp, #4]
   144bc:	str	r3, [sp]
   144c0:	mov	r3, r4
   144c4:	mov	r2, lr
   144c8:	mov	r1, r5
   144cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144d0:	bl	10dac <fprintf@plt>
   144d4:	b	146c4 <__assert_fail@plt+0x387c>
   144d8:	ldr	r0, [pc, #552]	; 14708 <__assert_fail@plt+0x38c0>
   144dc:	bl	10d88 <gettext@plt>
   144e0:	mov	r6, r0
   144e4:	ldr	r3, [fp, #4]
   144e8:	ldr	r4, [r3]
   144ec:	ldr	r3, [fp, #4]
   144f0:	add	r3, r3, #4
   144f4:	ldr	r5, [r3]
   144f8:	ldr	r3, [fp, #4]
   144fc:	add	r3, r3, #8
   14500:	ldr	r3, [r3]
   14504:	ldr	r2, [fp, #4]
   14508:	add	r2, r2, #12
   1450c:	ldr	r2, [r2]
   14510:	ldr	r1, [fp, #4]
   14514:	add	r1, r1, #16
   14518:	ldr	r1, [r1]
   1451c:	ldr	r0, [fp, #4]
   14520:	add	r0, r0, #20
   14524:	ldr	r0, [r0]
   14528:	ldr	ip, [fp, #4]
   1452c:	add	ip, ip, #24
   14530:	ldr	ip, [ip]
   14534:	ldr	lr, [fp, #4]
   14538:	add	lr, lr, #28
   1453c:	ldr	lr, [lr]
   14540:	str	lr, [sp, #20]
   14544:	str	ip, [sp, #16]
   14548:	str	r0, [sp, #12]
   1454c:	str	r1, [sp, #8]
   14550:	str	r2, [sp, #4]
   14554:	str	r3, [sp]
   14558:	mov	r3, r5
   1455c:	mov	r2, r4
   14560:	mov	r1, r6
   14564:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14568:	bl	10dac <fprintf@plt>
   1456c:	b	146c4 <__assert_fail@plt+0x387c>
   14570:	ldr	r0, [pc, #404]	; 1470c <__assert_fail@plt+0x38c4>
   14574:	bl	10d88 <gettext@plt>
   14578:	mov	r7, r0
   1457c:	ldr	r3, [fp, #4]
   14580:	ldr	r5, [r3]
   14584:	ldr	r3, [fp, #4]
   14588:	add	r3, r3, #4
   1458c:	ldr	r6, [r3]
   14590:	ldr	r3, [fp, #4]
   14594:	add	r3, r3, #8
   14598:	ldr	r3, [r3]
   1459c:	ldr	r2, [fp, #4]
   145a0:	add	r2, r2, #12
   145a4:	ldr	r2, [r2]
   145a8:	ldr	r1, [fp, #4]
   145ac:	add	r1, r1, #16
   145b0:	ldr	r1, [r1]
   145b4:	ldr	r0, [fp, #4]
   145b8:	add	r0, r0, #20
   145bc:	ldr	r0, [r0]
   145c0:	ldr	ip, [fp, #4]
   145c4:	add	ip, ip, #24
   145c8:	ldr	ip, [ip]
   145cc:	ldr	lr, [fp, #4]
   145d0:	add	lr, lr, #28
   145d4:	ldr	lr, [lr]
   145d8:	ldr	r4, [fp, #4]
   145dc:	add	r4, r4, #32
   145e0:	ldr	r4, [r4]
   145e4:	str	r4, [sp, #24]
   145e8:	str	lr, [sp, #20]
   145ec:	str	ip, [sp, #16]
   145f0:	str	r0, [sp, #12]
   145f4:	str	r1, [sp, #8]
   145f8:	str	r2, [sp, #4]
   145fc:	str	r3, [sp]
   14600:	mov	r3, r6
   14604:	mov	r2, r5
   14608:	mov	r1, r7
   1460c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14610:	bl	10dac <fprintf@plt>
   14614:	b	146c4 <__assert_fail@plt+0x387c>
   14618:	ldr	r0, [pc, #240]	; 14710 <__assert_fail@plt+0x38c8>
   1461c:	bl	10d88 <gettext@plt>
   14620:	mov	r7, r0
   14624:	ldr	r3, [fp, #4]
   14628:	ldr	r5, [r3]
   1462c:	ldr	r3, [fp, #4]
   14630:	add	r3, r3, #4
   14634:	ldr	r6, [r3]
   14638:	ldr	r3, [fp, #4]
   1463c:	add	r3, r3, #8
   14640:	ldr	r3, [r3]
   14644:	ldr	r2, [fp, #4]
   14648:	add	r2, r2, #12
   1464c:	ldr	r2, [r2]
   14650:	ldr	r1, [fp, #4]
   14654:	add	r1, r1, #16
   14658:	ldr	r1, [r1]
   1465c:	ldr	r0, [fp, #4]
   14660:	add	r0, r0, #20
   14664:	ldr	r0, [r0]
   14668:	ldr	ip, [fp, #4]
   1466c:	add	ip, ip, #24
   14670:	ldr	ip, [ip]
   14674:	ldr	lr, [fp, #4]
   14678:	add	lr, lr, #28
   1467c:	ldr	lr, [lr]
   14680:	ldr	r4, [fp, #4]
   14684:	add	r4, r4, #32
   14688:	ldr	r4, [r4]
   1468c:	str	r4, [sp, #24]
   14690:	str	lr, [sp, #20]
   14694:	str	ip, [sp, #16]
   14698:	str	r0, [sp, #12]
   1469c:	str	r1, [sp, #8]
   146a0:	str	r2, [sp, #4]
   146a4:	str	r3, [sp]
   146a8:	mov	r3, r6
   146ac:	mov	r2, r5
   146b0:	mov	r1, r7
   146b4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   146b8:	bl	10dac <fprintf@plt>
   146bc:	b	146c4 <__assert_fail@plt+0x387c>
   146c0:	nop			; (mov r0, r0)
   146c4:	nop			; (mov r0, r0)
   146c8:	sub	sp, fp, #20
   146cc:	pop	{r4, r5, r6, r7, fp, pc}
   146d0:	andeq	r7, r1, ip, lsl #19
   146d4:	muleq	r1, r8, r9
   146d8:	andeq	r7, r1, r0, lsr #19
   146dc:	andeq	r0, r0, r6, ror #15
   146e0:			; <UNDEFINED> instruction: 0x00017cb0
   146e4:	andeq	r7, r1, r4, lsr #19
   146e8:	andeq	r7, r1, r0, asr sl
   146ec:	andeq	r7, r1, r4, ror sl
   146f0:	andeq	r7, r1, r4, lsl #21
   146f4:	muleq	r1, ip, sl
   146f8:			; <UNDEFINED> instruction: 0x00017ab8
   146fc:	ldrdeq	r7, [r1], -r8
   14700:	strdeq	r7, [r1], -ip
   14704:	andeq	r7, r1, r4, lsr #22
   14708:	andeq	r7, r1, r0, asr fp
   1470c:	andeq	r7, r1, r0, lsl #23
   14710:			; <UNDEFINED> instruction: 0x00017bb4
   14714:	push	{fp, lr}
   14718:	add	fp, sp, #4
   1471c:	sub	sp, sp, #32
   14720:	str	r0, [fp, #-16]
   14724:	str	r1, [fp, #-20]	; 0xffffffec
   14728:	str	r2, [fp, #-24]	; 0xffffffe8
   1472c:	str	r3, [fp, #-28]	; 0xffffffe4
   14730:	mov	r3, #0
   14734:	str	r3, [fp, #-8]
   14738:	b	14748 <__assert_fail@plt+0x3900>
   1473c:	ldr	r3, [fp, #-8]
   14740:	add	r3, r3, #1
   14744:	str	r3, [fp, #-8]
   14748:	ldr	r3, [fp, #-8]
   1474c:	lsl	r3, r3, #2
   14750:	ldr	r2, [fp, #4]
   14754:	add	r3, r2, r3
   14758:	ldr	r3, [r3]
   1475c:	cmp	r3, #0
   14760:	bne	1473c <__assert_fail@plt+0x38f4>
   14764:	ldr	r3, [fp, #-8]
   14768:	str	r3, [sp, #4]
   1476c:	ldr	r3, [fp, #4]
   14770:	str	r3, [sp]
   14774:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14778:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1477c:	ldr	r1, [fp, #-20]	; 0xffffffec
   14780:	ldr	r0, [fp, #-16]
   14784:	bl	141a4 <__assert_fail@plt+0x335c>
   14788:	nop			; (mov r0, r0)
   1478c:	sub	sp, fp, #4
   14790:	pop	{fp, pc}
   14794:	push	{fp, lr}
   14798:	add	fp, sp, #4
   1479c:	sub	sp, sp, #72	; 0x48
   147a0:	str	r0, [fp, #-56]	; 0xffffffc8
   147a4:	str	r1, [fp, #-60]	; 0xffffffc4
   147a8:	str	r2, [fp, #-64]	; 0xffffffc0
   147ac:	str	r3, [fp, #-68]	; 0xffffffbc
   147b0:	mov	r3, #0
   147b4:	str	r3, [fp, #-8]
   147b8:	b	147c8 <__assert_fail@plt+0x3980>
   147bc:	ldr	r3, [fp, #-8]
   147c0:	add	r3, r3, #1
   147c4:	str	r3, [fp, #-8]
   147c8:	ldr	r3, [fp, #-8]
   147cc:	cmp	r3, #9
   147d0:	bhi	14814 <__assert_fail@plt+0x39cc>
   147d4:	ldr	r3, [fp, #4]
   147d8:	add	r2, r3, #4
   147dc:	str	r2, [fp, #4]
   147e0:	ldr	r2, [r3]
   147e4:	ldr	r3, [fp, #-8]
   147e8:	lsl	r3, r3, #2
   147ec:	sub	r1, fp, #4
   147f0:	add	r3, r1, r3
   147f4:	str	r2, [r3, #-44]	; 0xffffffd4
   147f8:	ldr	r3, [fp, #-8]
   147fc:	lsl	r3, r3, #2
   14800:	sub	r2, fp, #4
   14804:	add	r3, r2, r3
   14808:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1480c:	cmp	r3, #0
   14810:	bne	147bc <__assert_fail@plt+0x3974>
   14814:	ldr	r3, [fp, #-8]
   14818:	str	r3, [sp, #4]
   1481c:	sub	r3, fp, #48	; 0x30
   14820:	str	r3, [sp]
   14824:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14828:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1482c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14830:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14834:	bl	141a4 <__assert_fail@plt+0x335c>
   14838:	nop			; (mov r0, r0)
   1483c:	sub	sp, fp, #4
   14840:	pop	{fp, pc}
   14844:	push	{r3}		; (str r3, [sp, #-4]!)
   14848:	push	{fp, lr}
   1484c:	add	fp, sp, #4
   14850:	sub	sp, sp, #36	; 0x24
   14854:	str	r0, [fp, #-20]	; 0xffffffec
   14858:	str	r1, [fp, #-24]	; 0xffffffe8
   1485c:	str	r2, [fp, #-28]	; 0xffffffe4
   14860:	add	r3, fp, #8
   14864:	str	r3, [fp, #-12]
   14868:	ldr	r3, [fp, #-12]
   1486c:	str	r3, [sp]
   14870:	ldr	r3, [fp, #4]
   14874:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14878:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1487c:	ldr	r0, [fp, #-20]	; 0xffffffec
   14880:	bl	14794 <__assert_fail@plt+0x394c>
   14884:	nop			; (mov r0, r0)
   14888:	sub	sp, fp, #4
   1488c:	pop	{fp, lr}
   14890:	add	sp, sp, #4
   14894:	bx	lr
   14898:	push	{fp, lr}
   1489c:	add	fp, sp, #4
   148a0:	ldr	r3, [pc, #96]	; 14908 <__assert_fail@plt+0x3ac0>
   148a4:	ldr	r3, [r3]
   148a8:	mov	r1, r3
   148ac:	mov	r0, #10
   148b0:	bl	10c98 <fputc_unlocked@plt>
   148b4:	ldr	r0, [pc, #80]	; 1490c <__assert_fail@plt+0x3ac4>
   148b8:	bl	10d88 <gettext@plt>
   148bc:	mov	r3, r0
   148c0:	ldr	r1, [pc, #72]	; 14910 <__assert_fail@plt+0x3ac8>
   148c4:	mov	r0, r3
   148c8:	bl	10c38 <printf@plt>
   148cc:	ldr	r0, [pc, #64]	; 14914 <__assert_fail@plt+0x3acc>
   148d0:	bl	10d88 <gettext@plt>
   148d4:	mov	r3, r0
   148d8:	ldr	r2, [pc, #56]	; 14918 <__assert_fail@plt+0x3ad0>
   148dc:	ldr	r1, [pc, #56]	; 1491c <__assert_fail@plt+0x3ad4>
   148e0:	mov	r0, r3
   148e4:	bl	10c38 <printf@plt>
   148e8:	ldr	r0, [pc, #48]	; 14920 <__assert_fail@plt+0x3ad8>
   148ec:	bl	10d88 <gettext@plt>
   148f0:	mov	r3, r0
   148f4:	ldr	r1, [pc, #40]	; 14924 <__assert_fail@plt+0x3adc>
   148f8:	mov	r0, r3
   148fc:	bl	10c38 <printf@plt>
   14900:	nop			; (mov r0, r0)
   14904:	pop	{fp, pc}
   14908:	andeq	r8, r2, ip, lsr r1
   1490c:	strdeq	r7, [r1], -r0
   14910:	andeq	r7, r1, r4, lsl #24
   14914:	andeq	r7, r1, ip, lsl ip
   14918:	andeq	r7, r1, r0, lsr ip
   1491c:	andeq	r7, r1, r8, asr ip
   14920:	andeq	r7, r1, r8, ror #24
   14924:	muleq	r1, r0, ip
   14928:	push	{fp, lr}
   1492c:	add	fp, sp, #4
   14930:	sub	sp, sp, #16
   14934:	str	r0, [fp, #-8]
   14938:	str	r1, [fp, #-12]
   1493c:	str	r2, [fp, #-16]
   14940:	ldr	r2, [fp, #-16]
   14944:	ldr	r1, [fp, #-12]
   14948:	ldr	r0, [fp, #-8]
   1494c:	bl	14ab8 <__assert_fail@plt+0x3c70>
   14950:	mov	r3, r0
   14954:	mov	r0, r3
   14958:	sub	sp, fp, #4
   1495c:	pop	{fp, pc}
   14960:	push	{fp, lr}
   14964:	add	fp, sp, #4
   14968:	sub	sp, sp, #8
   1496c:	str	r0, [fp, #-8]
   14970:	ldr	r3, [fp, #-8]
   14974:	cmp	r3, #0
   14978:	bne	14980 <__assert_fail@plt+0x3b38>
   1497c:	bl	154ac <__assert_fail@plt+0x4664>
   14980:	ldr	r3, [fp, #-8]
   14984:	mov	r0, r3
   14988:	sub	sp, fp, #4
   1498c:	pop	{fp, pc}
   14990:	push	{fp, lr}
   14994:	add	fp, sp, #4
   14998:	sub	sp, sp, #8
   1499c:	str	r0, [fp, #-8]
   149a0:	ldr	r0, [fp, #-8]
   149a4:	bl	15dd8 <__assert_fail@plt+0x4f90>
   149a8:	mov	r3, r0
   149ac:	mov	r0, r3
   149b0:	bl	14960 <__assert_fail@plt+0x3b18>
   149b4:	mov	r3, r0
   149b8:	mov	r0, r3
   149bc:	sub	sp, fp, #4
   149c0:	pop	{fp, pc}
   149c4:	push	{fp, lr}
   149c8:	add	fp, sp, #4
   149cc:	sub	sp, sp, #8
   149d0:	str	r0, [fp, #-8]
   149d4:	ldr	r0, [fp, #-8]
   149d8:	bl	163f4 <__assert_fail@plt+0x55ac>
   149dc:	mov	r3, r0
   149e0:	mov	r0, r3
   149e4:	bl	14960 <__assert_fail@plt+0x3b18>
   149e8:	mov	r3, r0
   149ec:	mov	r0, r3
   149f0:	sub	sp, fp, #4
   149f4:	pop	{fp, pc}
   149f8:	push	{fp, lr}
   149fc:	add	fp, sp, #4
   14a00:	sub	sp, sp, #8
   14a04:	str	r0, [fp, #-8]
   14a08:	ldr	r0, [fp, #-8]
   14a0c:	bl	14990 <__assert_fail@plt+0x3b48>
   14a10:	mov	r3, r0
   14a14:	mov	r0, r3
   14a18:	sub	sp, fp, #4
   14a1c:	pop	{fp, pc}
   14a20:	push	{fp, lr}
   14a24:	add	fp, sp, #4
   14a28:	sub	sp, sp, #16
   14a2c:	str	r0, [fp, #-16]
   14a30:	str	r1, [fp, #-20]	; 0xffffffec
   14a34:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a38:	ldr	r0, [fp, #-16]
   14a3c:	bl	15e80 <__assert_fail@plt+0x5038>
   14a40:	str	r0, [fp, #-8]
   14a44:	ldr	r3, [fp, #-8]
   14a48:	cmp	r3, #0
   14a4c:	bne	14a6c <__assert_fail@plt+0x3c24>
   14a50:	ldr	r3, [fp, #-16]
   14a54:	cmp	r3, #0
   14a58:	beq	14a68 <__assert_fail@plt+0x3c20>
   14a5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a60:	cmp	r3, #0
   14a64:	beq	14a6c <__assert_fail@plt+0x3c24>
   14a68:	bl	154ac <__assert_fail@plt+0x4664>
   14a6c:	ldr	r3, [fp, #-8]
   14a70:	mov	r0, r3
   14a74:	sub	sp, fp, #4
   14a78:	pop	{fp, pc}
   14a7c:	push	{fp, lr}
   14a80:	add	fp, sp, #4
   14a84:	sub	sp, sp, #8
   14a88:	str	r0, [fp, #-8]
   14a8c:	str	r1, [fp, #-12]
   14a90:	ldr	r1, [fp, #-12]
   14a94:	ldr	r0, [fp, #-8]
   14a98:	bl	16420 <__assert_fail@plt+0x55d8>
   14a9c:	mov	r3, r0
   14aa0:	mov	r0, r3
   14aa4:	bl	14960 <__assert_fail@plt+0x3b18>
   14aa8:	mov	r3, r0
   14aac:	mov	r0, r3
   14ab0:	sub	sp, fp, #4
   14ab4:	pop	{fp, pc}
   14ab8:	push	{fp, lr}
   14abc:	add	fp, sp, #4
   14ac0:	sub	sp, sp, #24
   14ac4:	str	r0, [fp, #-16]
   14ac8:	str	r1, [fp, #-20]	; 0xffffffec
   14acc:	str	r2, [fp, #-24]	; 0xffffffe8
   14ad0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14ad4:	ldr	r1, [fp, #-20]	; 0xffffffec
   14ad8:	ldr	r0, [fp, #-16]
   14adc:	bl	16614 <__assert_fail@plt+0x57cc>
   14ae0:	str	r0, [fp, #-8]
   14ae4:	ldr	r3, [fp, #-8]
   14ae8:	cmp	r3, #0
   14aec:	bne	14b18 <__assert_fail@plt+0x3cd0>
   14af0:	ldr	r3, [fp, #-16]
   14af4:	cmp	r3, #0
   14af8:	beq	14b14 <__assert_fail@plt+0x3ccc>
   14afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b00:	cmp	r3, #0
   14b04:	beq	14b18 <__assert_fail@plt+0x3cd0>
   14b08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14b0c:	cmp	r3, #0
   14b10:	beq	14b18 <__assert_fail@plt+0x3cd0>
   14b14:	bl	154ac <__assert_fail@plt+0x4664>
   14b18:	ldr	r3, [fp, #-8]
   14b1c:	mov	r0, r3
   14b20:	sub	sp, fp, #4
   14b24:	pop	{fp, pc}
   14b28:	push	{fp, lr}
   14b2c:	add	fp, sp, #4
   14b30:	sub	sp, sp, #16
   14b34:	str	r0, [fp, #-8]
   14b38:	str	r1, [fp, #-12]
   14b3c:	str	r2, [fp, #-16]
   14b40:	ldr	r2, [fp, #-16]
   14b44:	ldr	r1, [fp, #-12]
   14b48:	ldr	r0, [fp, #-8]
   14b4c:	bl	164a8 <__assert_fail@plt+0x5660>
   14b50:	mov	r3, r0
   14b54:	mov	r0, r3
   14b58:	bl	14960 <__assert_fail@plt+0x3b18>
   14b5c:	mov	r3, r0
   14b60:	mov	r0, r3
   14b64:	sub	sp, fp, #4
   14b68:	pop	{fp, pc}
   14b6c:	push	{fp, lr}
   14b70:	add	fp, sp, #4
   14b74:	sub	sp, sp, #8
   14b78:	str	r0, [fp, #-8]
   14b7c:	str	r1, [fp, #-12]
   14b80:	ldr	r2, [fp, #-12]
   14b84:	ldr	r1, [fp, #-8]
   14b88:	mov	r0, #0
   14b8c:	bl	14ab8 <__assert_fail@plt+0x3c70>
   14b90:	mov	r3, r0
   14b94:	mov	r0, r3
   14b98:	sub	sp, fp, #4
   14b9c:	pop	{fp, pc}
   14ba0:	push	{fp, lr}
   14ba4:	add	fp, sp, #4
   14ba8:	sub	sp, sp, #8
   14bac:	str	r0, [fp, #-8]
   14bb0:	str	r1, [fp, #-12]
   14bb4:	ldr	r2, [fp, #-12]
   14bb8:	ldr	r1, [fp, #-8]
   14bbc:	mov	r0, #0
   14bc0:	bl	14b28 <__assert_fail@plt+0x3ce0>
   14bc4:	mov	r3, r0
   14bc8:	mov	r0, r3
   14bcc:	sub	sp, fp, #4
   14bd0:	pop	{fp, pc}
   14bd4:	push	{fp, lr}
   14bd8:	add	fp, sp, #4
   14bdc:	sub	sp, sp, #8
   14be0:	str	r0, [fp, #-8]
   14be4:	str	r1, [fp, #-12]
   14be8:	mov	r2, #1
   14bec:	ldr	r1, [fp, #-12]
   14bf0:	ldr	r0, [fp, #-8]
   14bf4:	bl	14c08 <__assert_fail@plt+0x3dc0>
   14bf8:	mov	r3, r0
   14bfc:	mov	r0, r3
   14c00:	sub	sp, fp, #4
   14c04:	pop	{fp, pc}
   14c08:	push	{fp, lr}
   14c0c:	add	fp, sp, #4
   14c10:	sub	sp, sp, #24
   14c14:	str	r0, [fp, #-16]
   14c18:	str	r1, [fp, #-20]	; 0xffffffec
   14c1c:	str	r2, [fp, #-24]	; 0xffffffe8
   14c20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c24:	ldr	r3, [r3]
   14c28:	str	r3, [fp, #-8]
   14c2c:	ldr	r3, [fp, #-16]
   14c30:	cmp	r3, #0
   14c34:	bne	14c80 <__assert_fail@plt+0x3e38>
   14c38:	ldr	r3, [fp, #-8]
   14c3c:	cmp	r3, #0
   14c40:	bne	14ce4 <__assert_fail@plt+0x3e9c>
   14c44:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14c48:	mov	r0, #64	; 0x40
   14c4c:	bl	16dbc <__assert_fail@plt+0x5f74>
   14c50:	mov	r3, r0
   14c54:	str	r3, [fp, #-8]
   14c58:	ldr	r3, [fp, #-8]
   14c5c:	cmp	r3, #0
   14c60:	moveq	r3, #1
   14c64:	movne	r3, #0
   14c68:	uxtb	r3, r3
   14c6c:	mov	r2, r3
   14c70:	ldr	r3, [fp, #-8]
   14c74:	add	r3, r2, r3
   14c78:	str	r3, [fp, #-8]
   14c7c:	b	14ce4 <__assert_fail@plt+0x3e9c>
   14c80:	ldr	r3, [fp, #-8]
   14c84:	lsr	r3, r3, #1
   14c88:	add	r3, r3, #1
   14c8c:	mvn	r2, r3
   14c90:	ldr	r3, [fp, #-8]
   14c94:	cmp	r2, r3
   14c98:	bcs	14cbc <__assert_fail@plt+0x3e74>
   14c9c:	ldr	r3, [fp, #-8]
   14ca0:	lsr	r2, r3, #1
   14ca4:	ldr	r3, [fp, #-8]
   14ca8:	add	r3, r2, r3
   14cac:	add	r3, r3, #1
   14cb0:	str	r3, [fp, #-8]
   14cb4:	mov	r3, #1
   14cb8:	b	14cd8 <__assert_fail@plt+0x3e90>
   14cbc:	ldr	r3, [fp, #-8]
   14cc0:	lsr	r2, r3, #1
   14cc4:	ldr	r3, [fp, #-8]
   14cc8:	add	r3, r2, r3
   14ccc:	add	r3, r3, #1
   14cd0:	str	r3, [fp, #-8]
   14cd4:	mov	r3, #0
   14cd8:	cmp	r3, #0
   14cdc:	beq	14ce4 <__assert_fail@plt+0x3e9c>
   14ce0:	bl	154ac <__assert_fail@plt+0x4664>
   14ce4:	ldr	r3, [fp, #-8]
   14ce8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14cec:	mov	r1, r3
   14cf0:	ldr	r0, [fp, #-16]
   14cf4:	bl	14ab8 <__assert_fail@plt+0x3c70>
   14cf8:	str	r0, [fp, #-16]
   14cfc:	ldr	r2, [fp, #-8]
   14d00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d04:	str	r2, [r3]
   14d08:	ldr	r3, [fp, #-16]
   14d0c:	mov	r0, r3
   14d10:	sub	sp, fp, #4
   14d14:	pop	{fp, pc}
   14d18:	push	{fp, lr}
   14d1c:	add	fp, sp, #4
   14d20:	sub	sp, sp, #32
   14d24:	str	r0, [fp, #-24]	; 0xffffffe8
   14d28:	str	r1, [fp, #-28]	; 0xffffffe4
   14d2c:	str	r2, [fp, #-32]	; 0xffffffe0
   14d30:	str	r3, [fp, #-36]	; 0xffffffdc
   14d34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d38:	ldr	r3, [r3]
   14d3c:	str	r3, [fp, #-8]
   14d40:	ldr	r3, [fp, #-8]
   14d44:	asr	r3, r3, #1
   14d48:	cmp	r3, #0
   14d4c:	bge	14d74 <__assert_fail@plt+0x3f2c>
   14d50:	ldr	r3, [fp, #-8]
   14d54:	asr	r3, r3, #1
   14d58:	rsb	r2, r3, #-2147483648	; 0x80000000
   14d5c:	ldr	r3, [fp, #-8]
   14d60:	cmp	r2, r3
   14d64:	movgt	r3, #1
   14d68:	movle	r3, #0
   14d6c:	uxtb	r3, r3
   14d70:	b	14dc8 <__assert_fail@plt+0x3f80>
   14d74:	ldr	r3, [fp, #-8]
   14d78:	cmp	r3, #0
   14d7c:	bge	14da4 <__assert_fail@plt+0x3f5c>
   14d80:	ldr	r3, [fp, #-8]
   14d84:	asr	r2, r3, #1
   14d88:	ldr	r3, [fp, #-8]
   14d8c:	rsb	r3, r3, #-2147483648	; 0x80000000
   14d90:	cmp	r2, r3
   14d94:	movlt	r3, #1
   14d98:	movge	r3, #0
   14d9c:	uxtb	r3, r3
   14da0:	b	14dc8 <__assert_fail@plt+0x3f80>
   14da4:	ldr	r3, [fp, #-8]
   14da8:	asr	r2, r3, #1
   14dac:	mvn	r3, #-2147483648	; 0x80000000
   14db0:	sub	r3, r3, r2
   14db4:	ldr	r2, [fp, #-8]
   14db8:	cmp	r3, r2
   14dbc:	movlt	r3, #1
   14dc0:	movge	r3, #0
   14dc4:	uxtb	r3, r3
   14dc8:	cmp	r3, #0
   14dcc:	beq	14df0 <__assert_fail@plt+0x3fa8>
   14dd0:	ldr	r3, [fp, #-8]
   14dd4:	asr	r3, r3, #1
   14dd8:	mov	r2, r3
   14ddc:	ldr	r3, [fp, #-8]
   14de0:	add	r3, r2, r3
   14de4:	str	r3, [fp, #-16]
   14de8:	mov	r3, #1
   14dec:	b	14e0c <__assert_fail@plt+0x3fc4>
   14df0:	ldr	r3, [fp, #-8]
   14df4:	asr	r3, r3, #1
   14df8:	mov	r2, r3
   14dfc:	ldr	r3, [fp, #-8]
   14e00:	add	r3, r2, r3
   14e04:	str	r3, [fp, #-16]
   14e08:	mov	r3, #0
   14e0c:	cmp	r3, #0
   14e10:	beq	14e1c <__assert_fail@plt+0x3fd4>
   14e14:	mvn	r3, #-2147483648	; 0x80000000
   14e18:	str	r3, [fp, #-16]
   14e1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14e20:	cmp	r3, #0
   14e24:	blt	14e40 <__assert_fail@plt+0x3ff8>
   14e28:	ldr	r3, [fp, #-16]
   14e2c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14e30:	cmp	r2, r3
   14e34:	bge	14e40 <__assert_fail@plt+0x3ff8>
   14e38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14e3c:	str	r3, [fp, #-16]
   14e40:	ldr	r3, [fp, #4]
   14e44:	cmp	r3, #0
   14e48:	bge	14ed8 <__assert_fail@plt+0x4090>
   14e4c:	ldr	r3, [fp, #-16]
   14e50:	cmp	r3, #0
   14e54:	bge	14e84 <__assert_fail@plt+0x403c>
   14e58:	ldr	r1, [fp, #4]
   14e5c:	mvn	r0, #-2147483648	; 0x80000000
   14e60:	bl	16fc8 <__assert_fail@plt+0x6180>
   14e64:	mov	r3, r0
   14e68:	mov	r2, r3
   14e6c:	ldr	r3, [fp, #-16]
   14e70:	cmp	r2, r3
   14e74:	movgt	r3, #1
   14e78:	movle	r3, #0
   14e7c:	uxtb	r3, r3
   14e80:	b	14f78 <__assert_fail@plt+0x4130>
   14e84:	ldr	r3, [fp, #4]
   14e88:	cmn	r3, #1
   14e8c:	bne	14eac <__assert_fail@plt+0x4064>
   14e90:	ldr	r3, [fp, #-16]
   14e94:	add	r3, r3, #-2147483648	; 0x80000000
   14e98:	cmp	r3, #0
   14e9c:	movgt	r3, #1
   14ea0:	movle	r3, #0
   14ea4:	uxtb	r3, r3
   14ea8:	b	14f78 <__assert_fail@plt+0x4130>
   14eac:	ldr	r1, [fp, #4]
   14eb0:	mov	r0, #-2147483648	; 0x80000000
   14eb4:	bl	16fc8 <__assert_fail@plt+0x6180>
   14eb8:	mov	r3, r0
   14ebc:	mov	r2, r3
   14ec0:	ldr	r3, [fp, #-16]
   14ec4:	cmp	r2, r3
   14ec8:	movlt	r3, #1
   14ecc:	movge	r3, #0
   14ed0:	uxtb	r3, r3
   14ed4:	b	14f78 <__assert_fail@plt+0x4130>
   14ed8:	ldr	r3, [fp, #4]
   14edc:	cmp	r3, #0
   14ee0:	beq	14f74 <__assert_fail@plt+0x412c>
   14ee4:	ldr	r3, [fp, #-16]
   14ee8:	cmp	r3, #0
   14eec:	bge	14f48 <__assert_fail@plt+0x4100>
   14ef0:	ldr	r3, [fp, #-16]
   14ef4:	cmn	r3, #1
   14ef8:	bne	14f18 <__assert_fail@plt+0x40d0>
   14efc:	ldr	r3, [fp, #4]
   14f00:	add	r3, r3, #-2147483648	; 0x80000000
   14f04:	cmp	r3, #0
   14f08:	movgt	r3, #1
   14f0c:	movle	r3, #0
   14f10:	uxtb	r3, r3
   14f14:	b	14f78 <__assert_fail@plt+0x4130>
   14f18:	ldr	r3, [fp, #-16]
   14f1c:	mov	r1, r3
   14f20:	mov	r0, #-2147483648	; 0x80000000
   14f24:	bl	16fc8 <__assert_fail@plt+0x6180>
   14f28:	mov	r3, r0
   14f2c:	mov	r2, r3
   14f30:	ldr	r3, [fp, #4]
   14f34:	cmp	r2, r3
   14f38:	movlt	r3, #1
   14f3c:	movge	r3, #0
   14f40:	uxtb	r3, r3
   14f44:	b	14f78 <__assert_fail@plt+0x4130>
   14f48:	ldr	r1, [fp, #4]
   14f4c:	mvn	r0, #-2147483648	; 0x80000000
   14f50:	bl	16fc8 <__assert_fail@plt+0x6180>
   14f54:	mov	r3, r0
   14f58:	mov	r2, r3
   14f5c:	ldr	r3, [fp, #-16]
   14f60:	cmp	r2, r3
   14f64:	movlt	r3, #1
   14f68:	movge	r3, #0
   14f6c:	uxtb	r3, r3
   14f70:	b	14f78 <__assert_fail@plt+0x4130>
   14f74:	mov	r3, #0
   14f78:	cmp	r3, #0
   14f7c:	beq	14f9c <__assert_fail@plt+0x4154>
   14f80:	ldr	r3, [fp, #-16]
   14f84:	mov	r2, r3
   14f88:	ldr	r3, [fp, #4]
   14f8c:	mul	r3, r3, r2
   14f90:	str	r3, [fp, #-20]	; 0xffffffec
   14f94:	mov	r3, #1
   14f98:	b	14fb4 <__assert_fail@plt+0x416c>
   14f9c:	ldr	r3, [fp, #-16]
   14fa0:	mov	r2, r3
   14fa4:	ldr	r3, [fp, #4]
   14fa8:	mul	r3, r3, r2
   14fac:	str	r3, [fp, #-20]	; 0xffffffec
   14fb0:	mov	r3, #0
   14fb4:	cmp	r3, #0
   14fb8:	beq	14fc4 <__assert_fail@plt+0x417c>
   14fbc:	mvn	r3, #-2147483648	; 0x80000000
   14fc0:	b	14fdc <__assert_fail@plt+0x4194>
   14fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc8:	cmp	r3, #63	; 0x3f
   14fcc:	bgt	14fd8 <__assert_fail@plt+0x4190>
   14fd0:	mov	r3, #64	; 0x40
   14fd4:	b	14fdc <__assert_fail@plt+0x4194>
   14fd8:	mov	r3, #0
   14fdc:	str	r3, [fp, #-12]
   14fe0:	ldr	r3, [fp, #-12]
   14fe4:	cmp	r3, #0
   14fe8:	beq	15024 <__assert_fail@plt+0x41dc>
   14fec:	ldr	r1, [fp, #4]
   14ff0:	ldr	r0, [fp, #-12]
   14ff4:	bl	16fc8 <__assert_fail@plt+0x6180>
   14ff8:	mov	r3, r0
   14ffc:	str	r3, [fp, #-16]
   15000:	ldr	r3, [fp, #-12]
   15004:	ldr	r1, [fp, #4]
   15008:	mov	r0, r3
   1500c:	bl	171e8 <__assert_fail@plt+0x63a0>
   15010:	mov	r3, r1
   15014:	mov	r2, r3
   15018:	ldr	r3, [fp, #-12]
   1501c:	sub	r3, r3, r2
   15020:	str	r3, [fp, #-20]	; 0xffffffec
   15024:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15028:	cmp	r3, #0
   1502c:	bne	1503c <__assert_fail@plt+0x41f4>
   15030:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15034:	mov	r2, #0
   15038:	str	r2, [r3]
   1503c:	ldr	r2, [fp, #-16]
   15040:	ldr	r3, [fp, #-8]
   15044:	sub	r2, r2, r3
   15048:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1504c:	cmp	r2, r3
   15050:	bge	15288 <__assert_fail@plt+0x4440>
   15054:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15058:	cmp	r3, #0
   1505c:	bge	15080 <__assert_fail@plt+0x4238>
   15060:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15064:	rsb	r2, r3, #-2147483648	; 0x80000000
   15068:	ldr	r3, [fp, #-8]
   1506c:	cmp	r2, r3
   15070:	movgt	r3, #1
   15074:	movle	r3, #0
   15078:	uxtb	r3, r3
   1507c:	b	150cc <__assert_fail@plt+0x4284>
   15080:	ldr	r3, [fp, #-8]
   15084:	cmp	r3, #0
   15088:	bge	150ac <__assert_fail@plt+0x4264>
   1508c:	ldr	r3, [fp, #-8]
   15090:	rsb	r2, r3, #-2147483648	; 0x80000000
   15094:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15098:	cmp	r2, r3
   1509c:	movgt	r3, #1
   150a0:	movle	r3, #0
   150a4:	uxtb	r3, r3
   150a8:	b	150cc <__assert_fail@plt+0x4284>
   150ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   150b0:	mvn	r3, #-2147483648	; 0x80000000
   150b4:	sub	r3, r3, r2
   150b8:	ldr	r2, [fp, #-8]
   150bc:	cmp	r3, r2
   150c0:	movlt	r3, #1
   150c4:	movge	r3, #0
   150c8:	uxtb	r3, r3
   150cc:	cmp	r3, #0
   150d0:	beq	150e8 <__assert_fail@plt+0x42a0>
   150d4:	ldr	r2, [fp, #-8]
   150d8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   150dc:	add	r3, r2, r3
   150e0:	str	r3, [fp, #-16]
   150e4:	b	15284 <__assert_fail@plt+0x443c>
   150e8:	ldr	r2, [fp, #-8]
   150ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   150f0:	add	r3, r2, r3
   150f4:	str	r3, [fp, #-16]
   150f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   150fc:	cmp	r3, #0
   15100:	blt	15114 <__assert_fail@plt+0x42cc>
   15104:	ldr	r3, [fp, #-16]
   15108:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1510c:	cmp	r2, r3
   15110:	blt	15284 <__assert_fail@plt+0x443c>
   15114:	ldr	r3, [fp, #4]
   15118:	cmp	r3, #0
   1511c:	bge	151ac <__assert_fail@plt+0x4364>
   15120:	ldr	r3, [fp, #-16]
   15124:	cmp	r3, #0
   15128:	bge	15158 <__assert_fail@plt+0x4310>
   1512c:	ldr	r1, [fp, #4]
   15130:	mvn	r0, #-2147483648	; 0x80000000
   15134:	bl	16fc8 <__assert_fail@plt+0x6180>
   15138:	mov	r3, r0
   1513c:	mov	r2, r3
   15140:	ldr	r3, [fp, #-16]
   15144:	cmp	r2, r3
   15148:	movgt	r3, #1
   1514c:	movle	r3, #0
   15150:	uxtb	r3, r3
   15154:	b	1524c <__assert_fail@plt+0x4404>
   15158:	ldr	r3, [fp, #4]
   1515c:	cmn	r3, #1
   15160:	bne	15180 <__assert_fail@plt+0x4338>
   15164:	ldr	r3, [fp, #-16]
   15168:	add	r3, r3, #-2147483648	; 0x80000000
   1516c:	cmp	r3, #0
   15170:	movgt	r3, #1
   15174:	movle	r3, #0
   15178:	uxtb	r3, r3
   1517c:	b	1524c <__assert_fail@plt+0x4404>
   15180:	ldr	r1, [fp, #4]
   15184:	mov	r0, #-2147483648	; 0x80000000
   15188:	bl	16fc8 <__assert_fail@plt+0x6180>
   1518c:	mov	r3, r0
   15190:	mov	r2, r3
   15194:	ldr	r3, [fp, #-16]
   15198:	cmp	r2, r3
   1519c:	movlt	r3, #1
   151a0:	movge	r3, #0
   151a4:	uxtb	r3, r3
   151a8:	b	1524c <__assert_fail@plt+0x4404>
   151ac:	ldr	r3, [fp, #4]
   151b0:	cmp	r3, #0
   151b4:	beq	15248 <__assert_fail@plt+0x4400>
   151b8:	ldr	r3, [fp, #-16]
   151bc:	cmp	r3, #0
   151c0:	bge	1521c <__assert_fail@plt+0x43d4>
   151c4:	ldr	r3, [fp, #-16]
   151c8:	cmn	r3, #1
   151cc:	bne	151ec <__assert_fail@plt+0x43a4>
   151d0:	ldr	r3, [fp, #4]
   151d4:	add	r3, r3, #-2147483648	; 0x80000000
   151d8:	cmp	r3, #0
   151dc:	movgt	r3, #1
   151e0:	movle	r3, #0
   151e4:	uxtb	r3, r3
   151e8:	b	1524c <__assert_fail@plt+0x4404>
   151ec:	ldr	r3, [fp, #-16]
   151f0:	mov	r1, r3
   151f4:	mov	r0, #-2147483648	; 0x80000000
   151f8:	bl	16fc8 <__assert_fail@plt+0x6180>
   151fc:	mov	r3, r0
   15200:	mov	r2, r3
   15204:	ldr	r3, [fp, #4]
   15208:	cmp	r2, r3
   1520c:	movlt	r3, #1
   15210:	movge	r3, #0
   15214:	uxtb	r3, r3
   15218:	b	1524c <__assert_fail@plt+0x4404>
   1521c:	ldr	r1, [fp, #4]
   15220:	mvn	r0, #-2147483648	; 0x80000000
   15224:	bl	16fc8 <__assert_fail@plt+0x6180>
   15228:	mov	r3, r0
   1522c:	mov	r2, r3
   15230:	ldr	r3, [fp, #-16]
   15234:	cmp	r2, r3
   15238:	movlt	r3, #1
   1523c:	movge	r3, #0
   15240:	uxtb	r3, r3
   15244:	b	1524c <__assert_fail@plt+0x4404>
   15248:	mov	r3, #0
   1524c:	cmp	r3, #0
   15250:	beq	1526c <__assert_fail@plt+0x4424>
   15254:	ldr	r3, [fp, #-16]
   15258:	mov	r2, r3
   1525c:	ldr	r3, [fp, #4]
   15260:	mul	r3, r3, r2
   15264:	str	r3, [fp, #-20]	; 0xffffffec
   15268:	b	15284 <__assert_fail@plt+0x443c>
   1526c:	ldr	r3, [fp, #-16]
   15270:	mov	r2, r3
   15274:	ldr	r3, [fp, #4]
   15278:	mul	r3, r3, r2
   1527c:	str	r3, [fp, #-20]	; 0xffffffec
   15280:	b	15288 <__assert_fail@plt+0x4440>
   15284:	bl	154ac <__assert_fail@plt+0x4664>
   15288:	ldr	r3, [fp, #-20]	; 0xffffffec
   1528c:	mov	r1, r3
   15290:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15294:	bl	14a20 <__assert_fail@plt+0x3bd8>
   15298:	str	r0, [fp, #-24]	; 0xffffffe8
   1529c:	ldr	r2, [fp, #-16]
   152a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   152a4:	str	r2, [r3]
   152a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   152ac:	mov	r0, r3
   152b0:	sub	sp, fp, #4
   152b4:	pop	{fp, pc}
   152b8:	push	{fp, lr}
   152bc:	add	fp, sp, #4
   152c0:	sub	sp, sp, #8
   152c4:	str	r0, [fp, #-8]
   152c8:	mov	r1, #1
   152cc:	ldr	r0, [fp, #-8]
   152d0:	bl	15310 <__assert_fail@plt+0x44c8>
   152d4:	mov	r3, r0
   152d8:	mov	r0, r3
   152dc:	sub	sp, fp, #4
   152e0:	pop	{fp, pc}
   152e4:	push	{fp, lr}
   152e8:	add	fp, sp, #4
   152ec:	sub	sp, sp, #8
   152f0:	str	r0, [fp, #-8]
   152f4:	mov	r1, #1
   152f8:	ldr	r0, [fp, #-8]
   152fc:	bl	1534c <__assert_fail@plt+0x4504>
   15300:	mov	r3, r0
   15304:	mov	r0, r3
   15308:	sub	sp, fp, #4
   1530c:	pop	{fp, pc}
   15310:	push	{fp, lr}
   15314:	add	fp, sp, #4
   15318:	sub	sp, sp, #8
   1531c:	str	r0, [fp, #-8]
   15320:	str	r1, [fp, #-12]
   15324:	ldr	r1, [fp, #-12]
   15328:	ldr	r0, [fp, #-8]
   1532c:	bl	15d14 <__assert_fail@plt+0x4ecc>
   15330:	mov	r3, r0
   15334:	mov	r0, r3
   15338:	bl	14960 <__assert_fail@plt+0x3b18>
   1533c:	mov	r3, r0
   15340:	mov	r0, r3
   15344:	sub	sp, fp, #4
   15348:	pop	{fp, pc}
   1534c:	push	{fp, lr}
   15350:	add	fp, sp, #4
   15354:	sub	sp, sp, #8
   15358:	str	r0, [fp, #-8]
   1535c:	str	r1, [fp, #-12]
   15360:	ldr	r1, [fp, #-12]
   15364:	ldr	r0, [fp, #-8]
   15368:	bl	16470 <__assert_fail@plt+0x5628>
   1536c:	mov	r3, r0
   15370:	mov	r0, r3
   15374:	bl	14960 <__assert_fail@plt+0x3b18>
   15378:	mov	r3, r0
   1537c:	mov	r0, r3
   15380:	sub	sp, fp, #4
   15384:	pop	{fp, pc}
   15388:	push	{fp, lr}
   1538c:	add	fp, sp, #4
   15390:	sub	sp, sp, #8
   15394:	str	r0, [fp, #-8]
   15398:	str	r1, [fp, #-12]
   1539c:	ldr	r0, [fp, #-12]
   153a0:	bl	14990 <__assert_fail@plt+0x3b48>
   153a4:	mov	r3, r0
   153a8:	ldr	r2, [fp, #-12]
   153ac:	ldr	r1, [fp, #-8]
   153b0:	mov	r0, r3
   153b4:	bl	10c68 <memcpy@plt>
   153b8:	mov	r3, r0
   153bc:	mov	r0, r3
   153c0:	sub	sp, fp, #4
   153c4:	pop	{fp, pc}
   153c8:	push	{fp, lr}
   153cc:	add	fp, sp, #4
   153d0:	sub	sp, sp, #8
   153d4:	str	r0, [fp, #-8]
   153d8:	str	r1, [fp, #-12]
   153dc:	ldr	r0, [fp, #-12]
   153e0:	bl	149c4 <__assert_fail@plt+0x3b7c>
   153e4:	mov	r3, r0
   153e8:	mov	r0, r3
   153ec:	ldr	r3, [fp, #-12]
   153f0:	mov	r2, r3
   153f4:	ldr	r1, [fp, #-8]
   153f8:	bl	10c68 <memcpy@plt>
   153fc:	mov	r3, r0
   15400:	mov	r0, r3
   15404:	sub	sp, fp, #4
   15408:	pop	{fp, pc}
   1540c:	push	{fp, lr}
   15410:	add	fp, sp, #4
   15414:	sub	sp, sp, #16
   15418:	str	r0, [fp, #-16]
   1541c:	str	r1, [fp, #-20]	; 0xffffffec
   15420:	ldr	r3, [fp, #-20]	; 0xffffffec
   15424:	add	r3, r3, #1
   15428:	mov	r0, r3
   1542c:	bl	149c4 <__assert_fail@plt+0x3b7c>
   15430:	mov	r3, r0
   15434:	str	r3, [fp, #-8]
   15438:	ldr	r3, [fp, #-20]	; 0xffffffec
   1543c:	ldr	r2, [fp, #-8]
   15440:	add	r3, r2, r3
   15444:	mov	r2, #0
   15448:	strb	r2, [r3]
   1544c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15450:	mov	r2, r3
   15454:	ldr	r1, [fp, #-16]
   15458:	ldr	r0, [fp, #-8]
   1545c:	bl	10c68 <memcpy@plt>
   15460:	mov	r3, r0
   15464:	mov	r0, r3
   15468:	sub	sp, fp, #4
   1546c:	pop	{fp, pc}
   15470:	push	{fp, lr}
   15474:	add	fp, sp, #4
   15478:	sub	sp, sp, #8
   1547c:	str	r0, [fp, #-8]
   15480:	ldr	r0, [fp, #-8]
   15484:	bl	10d94 <strlen@plt>
   15488:	mov	r3, r0
   1548c:	add	r3, r3, #1
   15490:	mov	r1, r3
   15494:	ldr	r0, [fp, #-8]
   15498:	bl	15388 <__assert_fail@plt+0x4540>
   1549c:	mov	r3, r0
   154a0:	mov	r0, r3
   154a4:	sub	sp, fp, #4
   154a8:	pop	{fp, pc}
   154ac:	push	{r4, r5, fp, lr}
   154b0:	add	fp, sp, #12
   154b4:	ldr	r3, [pc, #32]	; 154dc <__assert_fail@plt+0x4694>
   154b8:	ldr	r4, [r3]
   154bc:	ldr	r0, [pc, #28]	; 154e0 <__assert_fail@plt+0x4698>
   154c0:	bl	10d88 <gettext@plt>
   154c4:	mov	r3, r0
   154c8:	ldr	r2, [pc, #20]	; 154e4 <__assert_fail@plt+0x469c>
   154cc:	mov	r1, #0
   154d0:	mov	r0, r4
   154d4:	bl	10d1c <error@plt>
   154d8:	bl	10e3c <abort@plt>
   154dc:	andeq	r8, r2, r4, ror #1
   154e0:	andeq	r7, r1, r0, ror #25
   154e4:	strdeq	r7, [r1], -r4
   154e8:	push	{r4, fp, lr}
   154ec:	add	fp, sp, #8
   154f0:	sub	sp, sp, #20
   154f4:	str	r0, [fp, #-24]	; 0xffffffe8
   154f8:	str	r1, [fp, #-28]	; 0xffffffe4
   154fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15500:	cmp	r3, #0
   15504:	bge	155a0 <__assert_fail@plt+0x4758>
   15508:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1550c:	ldr	r3, [r3]
   15510:	cmp	r3, #0
   15514:	bge	15544 <__assert_fail@plt+0x46fc>
   15518:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1551c:	ldr	r4, [r3]
   15520:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15524:	mvn	r0, #-2147483648	; 0x80000000
   15528:	bl	16fc8 <__assert_fail@plt+0x6180>
   1552c:	mov	r3, r0
   15530:	cmp	r4, r3
   15534:	movlt	r3, #1
   15538:	movge	r3, #0
   1553c:	uxtb	r3, r3
   15540:	b	15650 <__assert_fail@plt+0x4808>
   15544:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15548:	cmn	r3, #1
   1554c:	bne	15570 <__assert_fail@plt+0x4728>
   15550:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15554:	ldr	r3, [r3]
   15558:	add	r3, r3, #-2147483648	; 0x80000000
   1555c:	cmp	r3, #0
   15560:	movgt	r3, #1
   15564:	movle	r3, #0
   15568:	uxtb	r3, r3
   1556c:	b	15650 <__assert_fail@plt+0x4808>
   15570:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15574:	mov	r0, #-2147483648	; 0x80000000
   15578:	bl	16fc8 <__assert_fail@plt+0x6180>
   1557c:	mov	r3, r0
   15580:	mov	r2, r3
   15584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15588:	ldr	r3, [r3]
   1558c:	cmp	r2, r3
   15590:	movlt	r3, #1
   15594:	movge	r3, #0
   15598:	uxtb	r3, r3
   1559c:	b	15650 <__assert_fail@plt+0x4808>
   155a0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   155a4:	cmp	r3, #0
   155a8:	beq	1564c <__assert_fail@plt+0x4804>
   155ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155b0:	ldr	r3, [r3]
   155b4:	cmp	r3, #0
   155b8:	bge	1561c <__assert_fail@plt+0x47d4>
   155bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155c0:	ldr	r3, [r3]
   155c4:	cmn	r3, #1
   155c8:	bne	155e8 <__assert_fail@plt+0x47a0>
   155cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   155d0:	add	r3, r3, #-2147483648	; 0x80000000
   155d4:	cmp	r3, #0
   155d8:	movgt	r3, #1
   155dc:	movle	r3, #0
   155e0:	uxtb	r3, r3
   155e4:	b	15650 <__assert_fail@plt+0x4808>
   155e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   155ec:	ldr	r3, [r3]
   155f0:	mov	r1, r3
   155f4:	mov	r0, #-2147483648	; 0x80000000
   155f8:	bl	16fc8 <__assert_fail@plt+0x6180>
   155fc:	mov	r3, r0
   15600:	mov	r2, r3
   15604:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15608:	cmp	r2, r3
   1560c:	movlt	r3, #1
   15610:	movge	r3, #0
   15614:	uxtb	r3, r3
   15618:	b	15650 <__assert_fail@plt+0x4808>
   1561c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15620:	mvn	r0, #-2147483648	; 0x80000000
   15624:	bl	16fc8 <__assert_fail@plt+0x6180>
   15628:	mov	r3, r0
   1562c:	mov	r2, r3
   15630:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15634:	ldr	r3, [r3]
   15638:	cmp	r2, r3
   1563c:	movlt	r3, #1
   15640:	movge	r3, #0
   15644:	uxtb	r3, r3
   15648:	b	15650 <__assert_fail@plt+0x4808>
   1564c:	mov	r3, #0
   15650:	cmp	r3, #0
   15654:	beq	15678 <__assert_fail@plt+0x4830>
   15658:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1565c:	ldr	r3, [r3]
   15660:	mov	r2, r3
   15664:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15668:	mul	r3, r3, r2
   1566c:	str	r3, [fp, #-16]
   15670:	mov	r3, #1
   15674:	b	15694 <__assert_fail@plt+0x484c>
   15678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1567c:	ldr	r3, [r3]
   15680:	mov	r2, r3
   15684:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15688:	mul	r3, r3, r2
   1568c:	str	r3, [fp, #-16]
   15690:	mov	r3, #0
   15694:	cmp	r3, #0
   15698:	beq	156c8 <__assert_fail@plt+0x4880>
   1569c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156a0:	ldr	r3, [r3]
   156a4:	cmp	r3, #0
   156a8:	bge	156b4 <__assert_fail@plt+0x486c>
   156ac:	mov	r2, #-2147483648	; 0x80000000
   156b0:	b	156b8 <__assert_fail@plt+0x4870>
   156b4:	mvn	r2, #-2147483648	; 0x80000000
   156b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156bc:	str	r2, [r3]
   156c0:	mov	r3, #1
   156c4:	b	156d8 <__assert_fail@plt+0x4890>
   156c8:	ldr	r2, [fp, #-16]
   156cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156d0:	str	r2, [r3]
   156d4:	mov	r3, #0
   156d8:	mov	r0, r3
   156dc:	sub	sp, fp, #8
   156e0:	pop	{r4, fp, pc}
   156e4:	push	{fp, lr}
   156e8:	add	fp, sp, #4
   156ec:	sub	sp, sp, #24
   156f0:	str	r0, [fp, #-16]
   156f4:	str	r1, [fp, #-20]	; 0xffffffec
   156f8:	str	r2, [fp, #-24]	; 0xffffffe8
   156fc:	mov	r3, #0
   15700:	str	r3, [fp, #-8]
   15704:	b	15724 <__assert_fail@plt+0x48dc>
   15708:	ldr	r1, [fp, #-20]	; 0xffffffec
   1570c:	ldr	r0, [fp, #-16]
   15710:	bl	154e8 <__assert_fail@plt+0x46a0>
   15714:	mov	r2, r0
   15718:	ldr	r3, [fp, #-8]
   1571c:	orr	r3, r3, r2
   15720:	str	r3, [fp, #-8]
   15724:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15728:	sub	r2, r3, #1
   1572c:	str	r2, [fp, #-24]	; 0xffffffe8
   15730:	cmp	r3, #0
   15734:	bne	15708 <__assert_fail@plt+0x48c0>
   15738:	ldr	r3, [fp, #-8]
   1573c:	mov	r0, r3
   15740:	sub	sp, fp, #4
   15744:	pop	{fp, pc}
   15748:	push	{fp, lr}
   1574c:	add	fp, sp, #4
   15750:	sub	sp, sp, #48	; 0x30
   15754:	str	r0, [fp, #-40]	; 0xffffffd8
   15758:	str	r1, [fp, #-44]	; 0xffffffd4
   1575c:	str	r2, [fp, #-48]	; 0xffffffd0
   15760:	str	r3, [fp, #-52]	; 0xffffffcc
   15764:	mov	r3, #0
   15768:	str	r3, [fp, #-8]
   1576c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15770:	cmp	r3, #0
   15774:	blt	15784 <__assert_fail@plt+0x493c>
   15778:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1577c:	cmp	r3, #36	; 0x24
   15780:	ble	15798 <__assert_fail@plt+0x4950>
   15784:	ldr	r3, [pc, #1404]	; 15d08 <__assert_fail@plt+0x4ec0>
   15788:	mov	r2, #85	; 0x55
   1578c:	ldr	r1, [pc, #1400]	; 15d0c <__assert_fail@plt+0x4ec4>
   15790:	ldr	r0, [pc, #1400]	; 15d10 <__assert_fail@plt+0x4ec8>
   15794:	bl	10e48 <__assert_fail@plt>
   15798:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1579c:	cmp	r3, #0
   157a0:	bne	157ac <__assert_fail@plt+0x4964>
   157a4:	sub	r3, fp, #28
   157a8:	b	157b0 <__assert_fail@plt+0x4968>
   157ac:	ldr	r3, [fp, #-44]	; 0xffffffd4
   157b0:	str	r3, [fp, #-24]	; 0xffffffe8
   157b4:	bl	10db8 <__errno_location@plt>
   157b8:	mov	r2, r0
   157bc:	mov	r3, #0
   157c0:	str	r3, [r2]
   157c4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   157c8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   157cc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   157d0:	bl	10c2c <strtol@plt>
   157d4:	mov	r3, r0
   157d8:	str	r3, [fp, #-32]	; 0xffffffe0
   157dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157e0:	ldr	r2, [r3]
   157e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   157e8:	cmp	r2, r3
   157ec:	bne	15848 <__assert_fail@plt+0x4a00>
   157f0:	ldr	r3, [fp, #4]
   157f4:	cmp	r3, #0
   157f8:	beq	15840 <__assert_fail@plt+0x49f8>
   157fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15800:	ldr	r3, [r3]
   15804:	ldrb	r3, [r3]
   15808:	cmp	r3, #0
   1580c:	beq	15840 <__assert_fail@plt+0x49f8>
   15810:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15814:	ldr	r3, [r3]
   15818:	ldrb	r3, [r3]
   1581c:	mov	r1, r3
   15820:	ldr	r0, [fp, #4]
   15824:	bl	10da0 <strchr@plt>
   15828:	mov	r3, r0
   1582c:	cmp	r3, #0
   15830:	beq	15840 <__assert_fail@plt+0x49f8>
   15834:	mov	r3, #1
   15838:	str	r3, [fp, #-32]	; 0xffffffe0
   1583c:	b	15880 <__assert_fail@plt+0x4a38>
   15840:	mov	r3, #4
   15844:	b	15cfc <__assert_fail@plt+0x4eb4>
   15848:	bl	10db8 <__errno_location@plt>
   1584c:	mov	r3, r0
   15850:	ldr	r3, [r3]
   15854:	cmp	r3, #0
   15858:	beq	15880 <__assert_fail@plt+0x4a38>
   1585c:	bl	10db8 <__errno_location@plt>
   15860:	mov	r3, r0
   15864:	ldr	r3, [r3]
   15868:	cmp	r3, #34	; 0x22
   1586c:	beq	15878 <__assert_fail@plt+0x4a30>
   15870:	mov	r3, #4
   15874:	b	15cfc <__assert_fail@plt+0x4eb4>
   15878:	mov	r3, #1
   1587c:	str	r3, [fp, #-8]
   15880:	ldr	r3, [fp, #4]
   15884:	cmp	r3, #0
   15888:	bne	158a0 <__assert_fail@plt+0x4a58>
   1588c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15890:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15894:	str	r2, [r3]
   15898:	ldr	r3, [fp, #-8]
   1589c:	b	15cfc <__assert_fail@plt+0x4eb4>
   158a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158a4:	ldr	r3, [r3]
   158a8:	ldrb	r3, [r3]
   158ac:	cmp	r3, #0
   158b0:	beq	15cec <__assert_fail@plt+0x4ea4>
   158b4:	mov	r3, #1024	; 0x400
   158b8:	str	r3, [fp, #-12]
   158bc:	mov	r3, #1
   158c0:	str	r3, [fp, #-16]
   158c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158c8:	ldr	r3, [r3]
   158cc:	ldrb	r3, [r3]
   158d0:	mov	r1, r3
   158d4:	ldr	r0, [fp, #4]
   158d8:	bl	10da0 <strchr@plt>
   158dc:	mov	r3, r0
   158e0:	cmp	r3, #0
   158e4:	bne	15900 <__assert_fail@plt+0x4ab8>
   158e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   158f0:	str	r2, [r3]
   158f4:	ldr	r3, [fp, #-8]
   158f8:	orr	r3, r3, #2
   158fc:	b	15cfc <__assert_fail@plt+0x4eb4>
   15900:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15904:	ldr	r3, [r3]
   15908:	ldrb	r3, [r3]
   1590c:	sub	r3, r3, #69	; 0x45
   15910:	cmp	r3, #47	; 0x2f
   15914:	ldrls	pc, [pc, r3, lsl #2]
   15918:	b	15a64 <__assert_fail@plt+0x4c1c>
   1591c:	ldrdeq	r5, [r1], -ip
   15920:	andeq	r5, r1, r4, ror #20
   15924:	ldrdeq	r5, [r1], -ip
   15928:	andeq	r5, r1, r4, ror #20
   1592c:	andeq	r5, r1, r4, ror #20
   15930:	andeq	r5, r1, r4, ror #20
   15934:	ldrdeq	r5, [r1], -ip
   15938:	andeq	r5, r1, r4, ror #20
   1593c:	ldrdeq	r5, [r1], -ip
   15940:	andeq	r5, r1, r4, ror #20
   15944:	andeq	r5, r1, r4, ror #20
   15948:	ldrdeq	r5, [r1], -ip
   1594c:	andeq	r5, r1, r4, ror #20
   15950:	andeq	r5, r1, r4, ror #20
   15954:	andeq	r5, r1, r4, ror #20
   15958:	ldrdeq	r5, [r1], -ip
   1595c:	andeq	r5, r1, r4, ror #20
   15960:	andeq	r5, r1, r4, ror #20
   15964:	andeq	r5, r1, r4, ror #20
   15968:	andeq	r5, r1, r4, ror #20
   1596c:	ldrdeq	r5, [r1], -ip
   15970:	ldrdeq	r5, [r1], -ip
   15974:	andeq	r5, r1, r4, ror #20
   15978:	andeq	r5, r1, r4, ror #20
   1597c:	andeq	r5, r1, r4, ror #20
   15980:	andeq	r5, r1, r4, ror #20
   15984:	andeq	r5, r1, r4, ror #20
   15988:	andeq	r5, r1, r4, ror #20
   1598c:	andeq	r5, r1, r4, ror #20
   15990:	andeq	r5, r1, r4, ror #20
   15994:	andeq	r5, r1, r4, ror #20
   15998:	andeq	r5, r1, r4, ror #20
   1599c:	andeq	r5, r1, r4, ror #20
   159a0:	andeq	r5, r1, r4, ror #20
   159a4:	ldrdeq	r5, [r1], -ip
   159a8:	andeq	r5, r1, r4, ror #20
   159ac:	andeq	r5, r1, r4, ror #20
   159b0:	andeq	r5, r1, r4, ror #20
   159b4:	ldrdeq	r5, [r1], -ip
   159b8:	andeq	r5, r1, r4, ror #20
   159bc:	ldrdeq	r5, [r1], -ip
   159c0:	andeq	r5, r1, r4, ror #20
   159c4:	andeq	r5, r1, r4, ror #20
   159c8:	andeq	r5, r1, r4, ror #20
   159cc:	andeq	r5, r1, r4, ror #20
   159d0:	andeq	r5, r1, r4, ror #20
   159d4:	andeq	r5, r1, r4, ror #20
   159d8:	ldrdeq	r5, [r1], -ip
   159dc:	mov	r1, #48	; 0x30
   159e0:	ldr	r0, [fp, #4]
   159e4:	bl	10da0 <strchr@plt>
   159e8:	mov	r3, r0
   159ec:	cmp	r3, #0
   159f0:	beq	15a64 <__assert_fail@plt+0x4c1c>
   159f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159f8:	ldr	r3, [r3]
   159fc:	add	r3, r3, #1
   15a00:	ldrb	r3, [r3]
   15a04:	cmp	r3, #68	; 0x44
   15a08:	beq	15a48 <__assert_fail@plt+0x4c00>
   15a0c:	cmp	r3, #105	; 0x69
   15a10:	beq	15a20 <__assert_fail@plt+0x4bd8>
   15a14:	cmp	r3, #66	; 0x42
   15a18:	beq	15a48 <__assert_fail@plt+0x4c00>
   15a1c:	b	15a64 <__assert_fail@plt+0x4c1c>
   15a20:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a24:	ldr	r3, [r3]
   15a28:	add	r3, r3, #2
   15a2c:	ldrb	r3, [r3]
   15a30:	cmp	r3, #66	; 0x42
   15a34:	bne	15a60 <__assert_fail@plt+0x4c18>
   15a38:	ldr	r3, [fp, #-16]
   15a3c:	add	r3, r3, #2
   15a40:	str	r3, [fp, #-16]
   15a44:	b	15a60 <__assert_fail@plt+0x4c18>
   15a48:	mov	r3, #1000	; 0x3e8
   15a4c:	str	r3, [fp, #-12]
   15a50:	ldr	r3, [fp, #-16]
   15a54:	add	r3, r3, #1
   15a58:	str	r3, [fp, #-16]
   15a5c:	b	15a64 <__assert_fail@plt+0x4c1c>
   15a60:	nop			; (mov r0, r0)
   15a64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15a68:	ldr	r3, [r3]
   15a6c:	ldrb	r3, [r3]
   15a70:	sub	r3, r3, #66	; 0x42
   15a74:	cmp	r3, #53	; 0x35
   15a78:	ldrls	pc, [pc, r3, lsl #2]
   15a7c:	b	15c8c <__assert_fail@plt+0x4e44>
   15a80:	andeq	r5, r1, r0, ror fp
   15a84:	andeq	r5, r1, ip, lsl #25
   15a88:	andeq	r5, r1, ip, lsl #25
   15a8c:	muleq	r1, r4, fp
   15a90:	andeq	r5, r1, ip, lsl #25
   15a94:			; <UNDEFINED> instruction: 0x00015bb0
   15a98:	andeq	r5, r1, ip, lsl #25
   15a9c:	andeq	r5, r1, ip, lsl #25
   15aa0:	andeq	r5, r1, ip, lsl #25
   15aa4:	andeq	r5, r1, ip, asr #23
   15aa8:	andeq	r5, r1, ip, lsl #25
   15aac:	andeq	r5, r1, r8, ror #23
   15ab0:	andeq	r5, r1, ip, lsl #25
   15ab4:	andeq	r5, r1, ip, lsl #25
   15ab8:	andeq	r5, r1, r4, lsl #24
   15abc:	andeq	r5, r1, ip, lsl #25
   15ac0:	andeq	r5, r1, ip, lsl #25
   15ac4:	andeq	r5, r1, ip, lsl #25
   15ac8:	andeq	r5, r1, r0, lsr #24
   15acc:	andeq	r5, r1, ip, lsl #25
   15ad0:	andeq	r5, r1, ip, lsl #25
   15ad4:	andeq	r5, r1, ip, lsl #25
   15ad8:	andeq	r5, r1, ip, lsl #25
   15adc:	andeq	r5, r1, r4, asr ip
   15ae0:	andeq	r5, r1, r0, ror ip
   15ae4:	andeq	r5, r1, ip, lsl #25
   15ae8:	andeq	r5, r1, ip, lsl #25
   15aec:	andeq	r5, r1, ip, lsl #25
   15af0:	andeq	r5, r1, ip, lsl #25
   15af4:	andeq	r5, r1, ip, lsl #25
   15af8:	andeq	r5, r1, ip, lsl #25
   15afc:	andeq	r5, r1, ip, lsl #25
   15b00:	andeq	r5, r1, r8, asr fp
   15b04:	andeq	r5, r1, r8, lsl #23
   15b08:	andeq	r5, r1, ip, lsl #25
   15b0c:	andeq	r5, r1, ip, lsl #25
   15b10:	andeq	r5, r1, ip, lsl #25
   15b14:			; <UNDEFINED> instruction: 0x00015bb0
   15b18:	andeq	r5, r1, ip, lsl #25
   15b1c:	andeq	r5, r1, ip, lsl #25
   15b20:	andeq	r5, r1, ip, lsl #25
   15b24:	andeq	r5, r1, ip, asr #23
   15b28:	andeq	r5, r1, ip, lsl #25
   15b2c:	andeq	r5, r1, r8, ror #23
   15b30:	andeq	r5, r1, ip, lsl #25
   15b34:	andeq	r5, r1, ip, lsl #25
   15b38:	andeq	r5, r1, ip, lsl #25
   15b3c:	andeq	r5, r1, ip, lsl #25
   15b40:	andeq	r5, r1, ip, lsl #25
   15b44:	andeq	r5, r1, ip, lsl #25
   15b48:	andeq	r5, r1, r0, lsr #24
   15b4c:	andeq	r5, r1, ip, lsl #25
   15b50:	andeq	r5, r1, ip, lsl #25
   15b54:	andeq	r5, r1, ip, lsr ip
   15b58:	sub	r3, fp, #32
   15b5c:	mov	r1, #512	; 0x200
   15b60:	mov	r0, r3
   15b64:	bl	154e8 <__assert_fail@plt+0x46a0>
   15b68:	str	r0, [fp, #-20]	; 0xffffffec
   15b6c:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15b70:	sub	r3, fp, #32
   15b74:	mov	r1, #1024	; 0x400
   15b78:	mov	r0, r3
   15b7c:	bl	154e8 <__assert_fail@plt+0x46a0>
   15b80:	str	r0, [fp, #-20]	; 0xffffffec
   15b84:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15b88:	mov	r3, #0
   15b8c:	str	r3, [fp, #-20]	; 0xffffffec
   15b90:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15b94:	sub	r3, fp, #32
   15b98:	mov	r2, #6
   15b9c:	ldr	r1, [fp, #-12]
   15ba0:	mov	r0, r3
   15ba4:	bl	156e4 <__assert_fail@plt+0x489c>
   15ba8:	str	r0, [fp, #-20]	; 0xffffffec
   15bac:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15bb0:	sub	r3, fp, #32
   15bb4:	mov	r2, #3
   15bb8:	ldr	r1, [fp, #-12]
   15bbc:	mov	r0, r3
   15bc0:	bl	156e4 <__assert_fail@plt+0x489c>
   15bc4:	str	r0, [fp, #-20]	; 0xffffffec
   15bc8:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15bcc:	sub	r3, fp, #32
   15bd0:	mov	r2, #1
   15bd4:	ldr	r1, [fp, #-12]
   15bd8:	mov	r0, r3
   15bdc:	bl	156e4 <__assert_fail@plt+0x489c>
   15be0:	str	r0, [fp, #-20]	; 0xffffffec
   15be4:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15be8:	sub	r3, fp, #32
   15bec:	mov	r2, #2
   15bf0:	ldr	r1, [fp, #-12]
   15bf4:	mov	r0, r3
   15bf8:	bl	156e4 <__assert_fail@plt+0x489c>
   15bfc:	str	r0, [fp, #-20]	; 0xffffffec
   15c00:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15c04:	sub	r3, fp, #32
   15c08:	mov	r2, #5
   15c0c:	ldr	r1, [fp, #-12]
   15c10:	mov	r0, r3
   15c14:	bl	156e4 <__assert_fail@plt+0x489c>
   15c18:	str	r0, [fp, #-20]	; 0xffffffec
   15c1c:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15c20:	sub	r3, fp, #32
   15c24:	mov	r2, #4
   15c28:	ldr	r1, [fp, #-12]
   15c2c:	mov	r0, r3
   15c30:	bl	156e4 <__assert_fail@plt+0x489c>
   15c34:	str	r0, [fp, #-20]	; 0xffffffec
   15c38:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15c3c:	sub	r3, fp, #32
   15c40:	mov	r1, #2
   15c44:	mov	r0, r3
   15c48:	bl	154e8 <__assert_fail@plt+0x46a0>
   15c4c:	str	r0, [fp, #-20]	; 0xffffffec
   15c50:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15c54:	sub	r3, fp, #32
   15c58:	mov	r2, #8
   15c5c:	ldr	r1, [fp, #-12]
   15c60:	mov	r0, r3
   15c64:	bl	156e4 <__assert_fail@plt+0x489c>
   15c68:	str	r0, [fp, #-20]	; 0xffffffec
   15c6c:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15c70:	sub	r3, fp, #32
   15c74:	mov	r2, #7
   15c78:	ldr	r1, [fp, #-12]
   15c7c:	mov	r0, r3
   15c80:	bl	156e4 <__assert_fail@plt+0x489c>
   15c84:	str	r0, [fp, #-20]	; 0xffffffec
   15c88:	b	15ca4 <__assert_fail@plt+0x4e5c>
   15c8c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c90:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15c94:	str	r2, [r3]
   15c98:	ldr	r3, [fp, #-8]
   15c9c:	orr	r3, r3, #2
   15ca0:	b	15cfc <__assert_fail@plt+0x4eb4>
   15ca4:	ldr	r2, [fp, #-8]
   15ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cac:	orr	r3, r2, r3
   15cb0:	str	r3, [fp, #-8]
   15cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cb8:	ldr	r2, [r3]
   15cbc:	ldr	r3, [fp, #-16]
   15cc0:	add	r2, r2, r3
   15cc4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cc8:	str	r2, [r3]
   15ccc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cd0:	ldr	r3, [r3]
   15cd4:	ldrb	r3, [r3]
   15cd8:	cmp	r3, #0
   15cdc:	beq	15cec <__assert_fail@plt+0x4ea4>
   15ce0:	ldr	r3, [fp, #-8]
   15ce4:	orr	r3, r3, #2
   15ce8:	str	r3, [fp, #-8]
   15cec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15cf0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15cf4:	str	r2, [r3]
   15cf8:	ldr	r3, [fp, #-8]
   15cfc:	mov	r0, r3
   15d00:	sub	sp, fp, #4
   15d04:	pop	{fp, pc}
   15d08:	andeq	r7, r1, r0, lsr sp
   15d0c:	strdeq	r7, [r1], -r8
   15d10:	andeq	r7, r1, r8, lsl #26
   15d14:	push	{r4, r5, fp, lr}
   15d18:	add	fp, sp, #12
   15d1c:	sub	sp, sp, #16
   15d20:	str	r0, [fp, #-24]	; 0xffffffe8
   15d24:	str	r1, [fp, #-28]	; 0xffffffe4
   15d28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d2c:	cmp	r3, #0
   15d30:	beq	15d40 <__assert_fail@plt+0x4ef8>
   15d34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d38:	cmp	r3, #0
   15d3c:	bne	15d50 <__assert_fail@plt+0x4f08>
   15d40:	mov	r3, #1
   15d44:	str	r3, [fp, #-28]	; 0xffffffe4
   15d48:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d4c:	str	r3, [fp, #-24]	; 0xffffffe8
   15d50:	mov	r1, #0
   15d54:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15d58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d5c:	umull	r2, r3, r2, r3
   15d60:	mov	r4, r3
   15d64:	mov	r5, #0
   15d68:	cmp	r4, #0
   15d6c:	beq	15d74 <__assert_fail@plt+0x4f2c>
   15d70:	mov	r1, #1
   15d74:	cmp	r2, #0
   15d78:	bge	15d80 <__assert_fail@plt+0x4f38>
   15d7c:	mov	r1, #1
   15d80:	mov	r3, r2
   15d84:	str	r3, [fp, #-20]	; 0xffffffec
   15d88:	mov	r3, r1
   15d8c:	and	r3, r3, #1
   15d90:	uxtb	r3, r3
   15d94:	cmp	r3, #0
   15d98:	beq	15db4 <__assert_fail@plt+0x4f6c>
   15d9c:	bl	10db8 <__errno_location@plt>
   15da0:	mov	r2, r0
   15da4:	mov	r3, #12
   15da8:	str	r3, [r2]
   15dac:	mov	r3, #0
   15db0:	b	15dcc <__assert_fail@plt+0x4f84>
   15db4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15db8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15dbc:	bl	10bfc <calloc@plt>
   15dc0:	mov	r3, r0
   15dc4:	str	r3, [fp, #-16]
   15dc8:	ldr	r3, [fp, #-16]
   15dcc:	mov	r0, r3
   15dd0:	sub	sp, fp, #12
   15dd4:	pop	{r4, r5, fp, pc}
   15dd8:	push	{r4, r5, fp, lr}
   15ddc:	add	fp, sp, #12
   15de0:	sub	sp, sp, #16
   15de4:	str	r0, [fp, #-24]	; 0xffffffe8
   15de8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15dec:	cmp	r3, #0
   15df0:	bne	15dfc <__assert_fail@plt+0x4fb4>
   15df4:	mov	r3, #1
   15df8:	str	r3, [fp, #-24]	; 0xffffffe8
   15dfc:	mov	r1, #0
   15e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e04:	mov	r2, r3
   15e08:	mov	r3, #0
   15e0c:	mov	r4, r3
   15e10:	mov	r5, #0
   15e14:	cmp	r4, #0
   15e18:	beq	15e20 <__assert_fail@plt+0x4fd8>
   15e1c:	mov	r1, #1
   15e20:	cmp	r2, #0
   15e24:	bge	15e2c <__assert_fail@plt+0x4fe4>
   15e28:	mov	r1, #1
   15e2c:	mov	r3, r2
   15e30:	str	r3, [fp, #-20]	; 0xffffffec
   15e34:	mov	r3, r1
   15e38:	and	r3, r3, #1
   15e3c:	uxtb	r3, r3
   15e40:	cmp	r3, #0
   15e44:	beq	15e60 <__assert_fail@plt+0x5018>
   15e48:	bl	10db8 <__errno_location@plt>
   15e4c:	mov	r2, r0
   15e50:	mov	r3, #12
   15e54:	str	r3, [r2]
   15e58:	mov	r3, #0
   15e5c:	b	15e74 <__assert_fail@plt+0x502c>
   15e60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e64:	bl	10d34 <malloc@plt>
   15e68:	mov	r3, r0
   15e6c:	str	r3, [fp, #-16]
   15e70:	ldr	r3, [fp, #-16]
   15e74:	mov	r0, r3
   15e78:	sub	sp, fp, #12
   15e7c:	pop	{r4, r5, fp, pc}
   15e80:	push	{r4, r5, fp, lr}
   15e84:	add	fp, sp, #12
   15e88:	sub	sp, sp, #16
   15e8c:	str	r0, [fp, #-24]	; 0xffffffe8
   15e90:	str	r1, [fp, #-28]	; 0xffffffe4
   15e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e98:	cmp	r3, #0
   15e9c:	bne	15eb0 <__assert_fail@plt+0x5068>
   15ea0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15ea4:	bl	15dd8 <__assert_fail@plt+0x4f90>
   15ea8:	mov	r3, r0
   15eac:	b	15f44 <__assert_fail@plt+0x50fc>
   15eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15eb4:	cmp	r3, #0
   15eb8:	bne	15ecc <__assert_fail@plt+0x5084>
   15ebc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15ec0:	bl	16260 <__assert_fail@plt+0x5418>
   15ec4:	mov	r3, #0
   15ec8:	b	15f44 <__assert_fail@plt+0x50fc>
   15ecc:	mov	r1, #0
   15ed0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ed4:	mov	r2, r3
   15ed8:	mov	r3, #0
   15edc:	mov	r4, r3
   15ee0:	mov	r5, #0
   15ee4:	cmp	r4, #0
   15ee8:	beq	15ef0 <__assert_fail@plt+0x50a8>
   15eec:	mov	r1, #1
   15ef0:	cmp	r2, #0
   15ef4:	bge	15efc <__assert_fail@plt+0x50b4>
   15ef8:	mov	r1, #1
   15efc:	mov	r3, r2
   15f00:	str	r3, [fp, #-20]	; 0xffffffec
   15f04:	mov	r3, r1
   15f08:	and	r3, r3, #1
   15f0c:	uxtb	r3, r3
   15f10:	cmp	r3, #0
   15f14:	beq	15f30 <__assert_fail@plt+0x50e8>
   15f18:	bl	10db8 <__errno_location@plt>
   15f1c:	mov	r2, r0
   15f20:	mov	r3, #12
   15f24:	str	r3, [r2]
   15f28:	mov	r3, #0
   15f2c:	b	15f44 <__assert_fail@plt+0x50fc>
   15f30:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15f34:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15f38:	bl	10ca4 <realloc@plt>
   15f3c:	str	r0, [fp, #-16]
   15f40:	ldr	r3, [fp, #-16]
   15f44:	mov	r0, r3
   15f48:	sub	sp, fp, #12
   15f4c:	pop	{r4, r5, fp, pc}
   15f50:	push	{r4, r5, fp, lr}
   15f54:	add	fp, sp, #12
   15f58:	sub	sp, sp, #16
   15f5c:	str	r0, [fp, #-24]	; 0xffffffe8
   15f60:	str	r1, [fp, #-28]	; 0xffffffe4
   15f64:	ldr	r5, [fp, #-24]	; 0xffffffe8
   15f68:	ldr	r4, [fp, #-28]	; 0xffffffe4
   15f6c:	cmp	r5, r4
   15f70:	bne	15f7c <__assert_fail@plt+0x5134>
   15f74:	mov	r3, #0
   15f78:	b	15fdc <__assert_fail@plt+0x5194>
   15f7c:	ldrb	r3, [r5]
   15f80:	mov	r0, r3
   15f84:	bl	16b38 <__assert_fail@plt+0x5cf0>
   15f88:	mov	r3, r0
   15f8c:	strb	r3, [fp, #-13]
   15f90:	ldrb	r3, [r4]
   15f94:	mov	r0, r3
   15f98:	bl	16b38 <__assert_fail@plt+0x5cf0>
   15f9c:	mov	r3, r0
   15fa0:	strb	r3, [fp, #-14]
   15fa4:	ldrb	r3, [fp, #-13]
   15fa8:	cmp	r3, #0
   15fac:	beq	15fcc <__assert_fail@plt+0x5184>
   15fb0:	add	r5, r5, #1
   15fb4:	add	r4, r4, #1
   15fb8:	ldrb	r2, [fp, #-13]
   15fbc:	ldrb	r3, [fp, #-14]
   15fc0:	cmp	r2, r3
   15fc4:	beq	15f7c <__assert_fail@plt+0x5134>
   15fc8:	b	15fd0 <__assert_fail@plt+0x5188>
   15fcc:	nop			; (mov r0, r0)
   15fd0:	ldrb	r2, [fp, #-13]
   15fd4:	ldrb	r3, [fp, #-14]
   15fd8:	sub	r3, r2, r3
   15fdc:	mov	r0, r3
   15fe0:	sub	sp, fp, #12
   15fe4:	pop	{r4, r5, fp, pc}
   15fe8:	push	{fp, lr}
   15fec:	add	fp, sp, #4
   15ff0:	sub	sp, sp, #16
   15ff4:	str	r0, [fp, #-16]
   15ff8:	ldr	r0, [fp, #-16]
   15ffc:	bl	10cf8 <__fpending@plt>
   16000:	mov	r3, r0
   16004:	cmp	r3, #0
   16008:	movne	r3, #1
   1600c:	moveq	r3, #0
   16010:	strb	r3, [fp, #-5]
   16014:	ldr	r0, [fp, #-16]
   16018:	bl	10d04 <ferror_unlocked@plt>
   1601c:	mov	r3, r0
   16020:	cmp	r3, #0
   16024:	movne	r3, #1
   16028:	moveq	r3, #0
   1602c:	strb	r3, [fp, #-6]
   16030:	ldr	r0, [fp, #-16]
   16034:	bl	160c0 <__assert_fail@plt+0x5278>
   16038:	mov	r3, r0
   1603c:	cmp	r3, #0
   16040:	movne	r3, #1
   16044:	moveq	r3, #0
   16048:	strb	r3, [fp, #-7]
   1604c:	ldrb	r3, [fp, #-6]
   16050:	cmp	r3, #0
   16054:	bne	16084 <__assert_fail@plt+0x523c>
   16058:	ldrb	r3, [fp, #-7]
   1605c:	cmp	r3, #0
   16060:	beq	160b0 <__assert_fail@plt+0x5268>
   16064:	ldrb	r3, [fp, #-5]
   16068:	cmp	r3, #0
   1606c:	bne	16084 <__assert_fail@plt+0x523c>
   16070:	bl	10db8 <__errno_location@plt>
   16074:	mov	r3, r0
   16078:	ldr	r3, [r3]
   1607c:	cmp	r3, #9
   16080:	beq	160b0 <__assert_fail@plt+0x5268>
   16084:	ldrb	r3, [fp, #-7]
   16088:	eor	r3, r3, #1
   1608c:	uxtb	r3, r3
   16090:	cmp	r3, #0
   16094:	beq	160a8 <__assert_fail@plt+0x5260>
   16098:	bl	10db8 <__errno_location@plt>
   1609c:	mov	r2, r0
   160a0:	mov	r3, #0
   160a4:	str	r3, [r2]
   160a8:	mvn	r3, #0
   160ac:	b	160b4 <__assert_fail@plt+0x526c>
   160b0:	mov	r3, #0
   160b4:	mov	r0, r3
   160b8:	sub	sp, fp, #4
   160bc:	pop	{fp, pc}
   160c0:	push	{fp, lr}
   160c4:	add	fp, sp, #4
   160c8:	sub	sp, sp, #32
   160cc:	str	r0, [fp, #-24]	; 0xffffffe8
   160d0:	mov	r3, #0
   160d4:	str	r3, [fp, #-8]
   160d8:	mov	r3, #0
   160dc:	str	r3, [fp, #-12]
   160e0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160e4:	bl	10ddc <fileno@plt>
   160e8:	str	r0, [fp, #-16]
   160ec:	ldr	r3, [fp, #-16]
   160f0:	cmp	r3, #0
   160f4:	bge	16108 <__assert_fail@plt+0x52c0>
   160f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160fc:	bl	10de8 <fclose@plt>
   16100:	mov	r3, r0
   16104:	b	161ac <__assert_fail@plt+0x5364>
   16108:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1610c:	bl	10d4c <__freading@plt>
   16110:	mov	r3, r0
   16114:	cmp	r3, #0
   16118:	beq	16154 <__assert_fail@plt+0x530c>
   1611c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16120:	bl	10ddc <fileno@plt>
   16124:	mov	r1, r0
   16128:	mov	r3, #1
   1612c:	str	r3, [sp]
   16130:	mov	r2, #0
   16134:	mov	r3, #0
   16138:	mov	r0, r1
   1613c:	bl	10ce0 <lseek64@plt>
   16140:	mvn	r2, #0
   16144:	mvn	r3, #0
   16148:	cmp	r1, r3
   1614c:	cmpeq	r0, r2
   16150:	beq	16178 <__assert_fail@plt+0x5330>
   16154:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16158:	bl	16200 <__assert_fail@plt+0x53b8>
   1615c:	mov	r3, r0
   16160:	cmp	r3, #0
   16164:	beq	16178 <__assert_fail@plt+0x5330>
   16168:	bl	10db8 <__errno_location@plt>
   1616c:	mov	r3, r0
   16170:	ldr	r3, [r3]
   16174:	str	r3, [fp, #-8]
   16178:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1617c:	bl	10de8 <fclose@plt>
   16180:	str	r0, [fp, #-12]
   16184:	ldr	r3, [fp, #-8]
   16188:	cmp	r3, #0
   1618c:	beq	161a8 <__assert_fail@plt+0x5360>
   16190:	bl	10db8 <__errno_location@plt>
   16194:	mov	r2, r0
   16198:	ldr	r3, [fp, #-8]
   1619c:	str	r3, [r2]
   161a0:	mvn	r3, #0
   161a4:	str	r3, [fp, #-12]
   161a8:	ldr	r3, [fp, #-12]
   161ac:	mov	r0, r3
   161b0:	sub	sp, fp, #4
   161b4:	pop	{fp, pc}
   161b8:	push	{fp, lr}
   161bc:	add	fp, sp, #4
   161c0:	sub	sp, sp, #16
   161c4:	str	r0, [fp, #-8]
   161c8:	ldr	r3, [fp, #-8]
   161cc:	ldr	r3, [r3]
   161d0:	and	r3, r3, #256	; 0x100
   161d4:	cmp	r3, #0
   161d8:	beq	161f4 <__assert_fail@plt+0x53ac>
   161dc:	mov	r3, #1
   161e0:	str	r3, [sp]
   161e4:	mov	r2, #0
   161e8:	mov	r3, #0
   161ec:	ldr	r0, [fp, #-8]
   161f0:	bl	162ec <__assert_fail@plt+0x54a4>
   161f4:	nop			; (mov r0, r0)
   161f8:	sub	sp, fp, #4
   161fc:	pop	{fp, pc}
   16200:	push	{fp, lr}
   16204:	add	fp, sp, #4
   16208:	sub	sp, sp, #8
   1620c:	str	r0, [fp, #-8]
   16210:	ldr	r3, [fp, #-8]
   16214:	cmp	r3, #0
   16218:	beq	16230 <__assert_fail@plt+0x53e8>
   1621c:	ldr	r0, [fp, #-8]
   16220:	bl	10d4c <__freading@plt>
   16224:	mov	r3, r0
   16228:	cmp	r3, #0
   1622c:	bne	16240 <__assert_fail@plt+0x53f8>
   16230:	ldr	r0, [fp, #-8]
   16234:	bl	10c44 <fflush@plt>
   16238:	mov	r3, r0
   1623c:	b	16254 <__assert_fail@plt+0x540c>
   16240:	ldr	r0, [fp, #-8]
   16244:	bl	161b8 <__assert_fail@plt+0x5370>
   16248:	ldr	r0, [fp, #-8]
   1624c:	bl	10c44 <fflush@plt>
   16250:	mov	r3, r0
   16254:	mov	r0, r3
   16258:	sub	sp, fp, #4
   1625c:	pop	{fp, pc}
   16260:	push	{r4, fp, lr}
   16264:	add	fp, sp, #8
   16268:	sub	sp, sp, #20
   1626c:	str	r0, [fp, #-24]	; 0xffffffe8
   16270:	bl	10db8 <__errno_location@plt>
   16274:	mov	r3, r0
   16278:	ldr	r3, [r3]
   1627c:	str	r3, [fp, #-20]	; 0xffffffec
   16280:	bl	10db8 <__errno_location@plt>
   16284:	mov	r3, r0
   16288:	ldr	r3, [r3]
   1628c:	str	r3, [fp, #-16]
   16290:	bl	10db8 <__errno_location@plt>
   16294:	mov	r2, r0
   16298:	mov	r3, #0
   1629c:	str	r3, [r2]
   162a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162a4:	bl	10c50 <free@plt>
   162a8:	bl	10db8 <__errno_location@plt>
   162ac:	mov	r4, r0
   162b0:	bl	10db8 <__errno_location@plt>
   162b4:	mov	r3, r0
   162b8:	ldr	r3, [r3]
   162bc:	cmp	r3, #0
   162c0:	moveq	r3, #1
   162c4:	movne	r3, #0
   162c8:	uxtb	r3, r3
   162cc:	lsl	r3, r3, #2
   162d0:	sub	r2, fp, #12
   162d4:	add	r3, r2, r3
   162d8:	ldr	r3, [r3, #-8]
   162dc:	str	r3, [r4]
   162e0:	nop			; (mov r0, r0)
   162e4:	sub	sp, fp, #8
   162e8:	pop	{r4, fp, pc}
   162ec:	push	{fp, lr}
   162f0:	add	fp, sp, #4
   162f4:	sub	sp, sp, #32
   162f8:	str	r0, [fp, #-16]
   162fc:	strd	r2, [fp, #-28]	; 0xffffffe4
   16300:	ldr	r3, [fp, #-16]
   16304:	ldr	r2, [r3, #8]
   16308:	ldr	r3, [fp, #-16]
   1630c:	ldr	r3, [r3, #4]
   16310:	cmp	r2, r3
   16314:	bne	163ac <__assert_fail@plt+0x5564>
   16318:	ldr	r3, [fp, #-16]
   1631c:	ldr	r2, [r3, #20]
   16320:	ldr	r3, [fp, #-16]
   16324:	ldr	r3, [r3, #16]
   16328:	cmp	r2, r3
   1632c:	bne	163ac <__assert_fail@plt+0x5564>
   16330:	ldr	r3, [fp, #-16]
   16334:	ldr	r3, [r3, #36]	; 0x24
   16338:	cmp	r3, #0
   1633c:	bne	163ac <__assert_fail@plt+0x5564>
   16340:	ldr	r0, [fp, #-16]
   16344:	bl	10ddc <fileno@plt>
   16348:	mov	r1, r0
   1634c:	ldr	r3, [fp, #4]
   16350:	str	r3, [sp]
   16354:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16358:	mov	r0, r1
   1635c:	bl	10ce0 <lseek64@plt>
   16360:	strd	r0, [fp, #-12]
   16364:	ldrd	r2, [fp, #-12]
   16368:	mvn	r0, #0
   1636c:	mvn	r1, #0
   16370:	cmp	r3, r1
   16374:	cmpeq	r2, r0
   16378:	bne	16384 <__assert_fail@plt+0x553c>
   1637c:	mvn	r3, #0
   16380:	b	163c4 <__assert_fail@plt+0x557c>
   16384:	ldr	r3, [fp, #-16]
   16388:	ldr	r3, [r3]
   1638c:	bic	r2, r3, #16
   16390:	ldr	r3, [fp, #-16]
   16394:	str	r2, [r3]
   16398:	ldr	r1, [fp, #-16]
   1639c:	ldrd	r2, [fp, #-12]
   163a0:	strd	r2, [r1, #80]	; 0x50
   163a4:	mov	r3, #0
   163a8:	b	163c4 <__assert_fail@plt+0x557c>
   163ac:	ldr	r3, [fp, #4]
   163b0:	str	r3, [sp]
   163b4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   163b8:	ldr	r0, [fp, #-16]
   163bc:	bl	10df4 <fseeko64@plt>
   163c0:	mov	r3, r0
   163c4:	mov	r0, r3
   163c8:	sub	sp, fp, #4
   163cc:	pop	{fp, pc}
   163d0:	push	{fp, lr}
   163d4:	add	fp, sp, #4
   163d8:	bl	10db8 <__errno_location@plt>
   163dc:	mov	r2, r0
   163e0:	mov	r3, #12
   163e4:	str	r3, [r2]
   163e8:	mov	r3, #0
   163ec:	mov	r0, r3
   163f0:	pop	{fp, pc}
   163f4:	push	{fp, lr}
   163f8:	add	fp, sp, #4
   163fc:	sub	sp, sp, #8
   16400:	str	r0, [fp, #-8]
   16404:	ldr	r3, [fp, #-8]
   16408:	mov	r0, r3
   1640c:	bl	15dd8 <__assert_fail@plt+0x4f90>
   16410:	mov	r3, r0
   16414:	mov	r0, r3
   16418:	sub	sp, fp, #4
   1641c:	pop	{fp, pc}
   16420:	push	{fp, lr}
   16424:	add	fp, sp, #4
   16428:	sub	sp, sp, #8
   1642c:	str	r0, [fp, #-8]
   16430:	str	r1, [fp, #-12]
   16434:	ldr	r3, [fp, #-12]
   16438:	cmp	r3, #0
   1643c:	moveq	r3, #1
   16440:	movne	r3, #0
   16444:	uxtb	r3, r3
   16448:	mov	r2, r3
   1644c:	ldr	r3, [fp, #-12]
   16450:	orr	r3, r2, r3
   16454:	mov	r1, r3
   16458:	ldr	r0, [fp, #-8]
   1645c:	bl	15e80 <__assert_fail@plt+0x5038>
   16460:	mov	r3, r0
   16464:	mov	r0, r3
   16468:	sub	sp, fp, #4
   1646c:	pop	{fp, pc}
   16470:	push	{fp, lr}
   16474:	add	fp, sp, #4
   16478:	sub	sp, sp, #8
   1647c:	str	r0, [fp, #-8]
   16480:	str	r1, [fp, #-12]
   16484:	ldr	r3, [fp, #-8]
   16488:	ldr	r2, [fp, #-12]
   1648c:	mov	r1, r2
   16490:	mov	r0, r3
   16494:	bl	15d14 <__assert_fail@plt+0x4ecc>
   16498:	mov	r3, r0
   1649c:	mov	r0, r3
   164a0:	sub	sp, fp, #4
   164a4:	pop	{fp, pc}
   164a8:	push	{fp, lr}
   164ac:	add	fp, sp, #4
   164b0:	sub	sp, sp, #16
   164b4:	str	r0, [fp, #-8]
   164b8:	str	r1, [fp, #-12]
   164bc:	str	r2, [fp, #-16]
   164c0:	ldr	r3, [fp, #-12]
   164c4:	cmp	r3, #0
   164c8:	beq	164d8 <__assert_fail@plt+0x5690>
   164cc:	ldr	r3, [fp, #-16]
   164d0:	cmp	r3, #0
   164d4:	bne	164e8 <__assert_fail@plt+0x56a0>
   164d8:	mov	r3, #1
   164dc:	str	r3, [fp, #-16]
   164e0:	ldr	r3, [fp, #-16]
   164e4:	str	r3, [fp, #-12]
   164e8:	ldr	r3, [fp, #-12]
   164ec:	ldr	r2, [fp, #-16]
   164f0:	mov	r1, r3
   164f4:	ldr	r0, [fp, #-8]
   164f8:	bl	16614 <__assert_fail@plt+0x57cc>
   164fc:	mov	r3, r0
   16500:	mov	r0, r3
   16504:	sub	sp, fp, #4
   16508:	pop	{fp, pc}
   1650c:	push	{fp, lr}
   16510:	add	fp, sp, #4
   16514:	sub	sp, sp, #8
   16518:	mov	r0, #14
   1651c:	bl	10e18 <nl_langinfo@plt>
   16520:	str	r0, [fp, #-8]
   16524:	ldr	r3, [fp, #-8]
   16528:	cmp	r3, #0
   1652c:	bne	16538 <__assert_fail@plt+0x56f0>
   16530:	ldr	r3, [pc, #40]	; 16560 <__assert_fail@plt+0x5718>
   16534:	str	r3, [fp, #-8]
   16538:	ldr	r3, [fp, #-8]
   1653c:	ldrb	r3, [r3]
   16540:	cmp	r3, #0
   16544:	bne	16550 <__assert_fail@plt+0x5708>
   16548:	ldr	r3, [pc, #20]	; 16564 <__assert_fail@plt+0x571c>
   1654c:	str	r3, [fp, #-8]
   16550:	ldr	r3, [fp, #-8]
   16554:	mov	r0, r3
   16558:	sub	sp, fp, #4
   1655c:	pop	{fp, pc}
   16560:	andeq	r7, r1, r8, lsr sp
   16564:	andeq	r7, r1, ip, lsr sp
   16568:	push	{fp, lr}
   1656c:	add	fp, sp, #4
   16570:	sub	sp, sp, #32
   16574:	str	r0, [fp, #-24]	; 0xffffffe8
   16578:	str	r1, [fp, #-28]	; 0xffffffe4
   1657c:	str	r2, [fp, #-32]	; 0xffffffe0
   16580:	str	r3, [fp, #-36]	; 0xffffffdc
   16584:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16588:	cmp	r3, #0
   1658c:	bne	16598 <__assert_fail@plt+0x5750>
   16590:	sub	r3, fp, #16
   16594:	str	r3, [fp, #-24]	; 0xffffffe8
   16598:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1659c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   165a0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   165a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   165a8:	bl	10d10 <mbrtowc@plt>
   165ac:	str	r0, [fp, #-8]
   165b0:	ldr	r3, [fp, #-8]
   165b4:	cmn	r3, #3
   165b8:	bls	16604 <__assert_fail@plt+0x57bc>
   165bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   165c0:	cmp	r3, #0
   165c4:	beq	16604 <__assert_fail@plt+0x57bc>
   165c8:	mov	r0, #0
   165cc:	bl	16bb8 <__assert_fail@plt+0x5d70>
   165d0:	mov	r3, r0
   165d4:	eor	r3, r3, #1
   165d8:	uxtb	r3, r3
   165dc:	cmp	r3, #0
   165e0:	beq	16604 <__assert_fail@plt+0x57bc>
   165e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   165e8:	ldrb	r3, [r3]
   165ec:	strb	r3, [fp, #-9]
   165f0:	ldrb	r2, [fp, #-9]
   165f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165f8:	str	r2, [r3]
   165fc:	mov	r3, #1
   16600:	b	16608 <__assert_fail@plt+0x57c0>
   16604:	ldr	r3, [fp, #-8]
   16608:	mov	r0, r3
   1660c:	sub	sp, fp, #4
   16610:	pop	{fp, pc}
   16614:	push	{fp, lr}
   16618:	add	fp, sp, #4
   1661c:	sub	sp, sp, #24
   16620:	str	r0, [fp, #-16]
   16624:	str	r1, [fp, #-20]	; 0xffffffec
   16628:	str	r2, [fp, #-24]	; 0xffffffe8
   1662c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16630:	cmp	r3, #0
   16634:	beq	16670 <__assert_fail@plt+0x5828>
   16638:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1663c:	mvn	r0, #0
   16640:	bl	16dbc <__assert_fail@plt+0x5f74>
   16644:	mov	r3, r0
   16648:	mov	r2, r3
   1664c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16650:	cmp	r2, r3
   16654:	bcs	16670 <__assert_fail@plt+0x5828>
   16658:	ldr	r3, [fp, #-20]	; 0xffffffec
   1665c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16660:	mul	r3, r2, r3
   16664:	str	r3, [fp, #-8]
   16668:	mov	r3, #1
   1666c:	b	16684 <__assert_fail@plt+0x583c>
   16670:	ldr	r3, [fp, #-20]	; 0xffffffec
   16674:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16678:	mul	r3, r2, r3
   1667c:	str	r3, [fp, #-8]
   16680:	mov	r3, #0
   16684:	cmp	r3, #0
   16688:	beq	166a4 <__assert_fail@plt+0x585c>
   1668c:	bl	10db8 <__errno_location@plt>
   16690:	mov	r2, r0
   16694:	mov	r3, #12
   16698:	str	r3, [r2]
   1669c:	mov	r3, #0
   166a0:	b	166b8 <__assert_fail@plt+0x5870>
   166a4:	ldr	r3, [fp, #-8]
   166a8:	mov	r1, r3
   166ac:	ldr	r0, [fp, #-16]
   166b0:	bl	15e80 <__assert_fail@plt+0x5038>
   166b4:	mov	r3, r0
   166b8:	mov	r0, r3
   166bc:	sub	sp, fp, #4
   166c0:	pop	{fp, pc}
   166c4:	push	{fp}		; (str fp, [sp, #-4]!)
   166c8:	add	fp, sp, #0
   166cc:	sub	sp, sp, #12
   166d0:	str	r0, [fp, #-8]
   166d4:	ldr	r3, [fp, #-8]
   166d8:	cmp	r3, #90	; 0x5a
   166dc:	bgt	166f8 <__assert_fail@plt+0x58b0>
   166e0:	cmp	r3, #65	; 0x41
   166e4:	bge	16704 <__assert_fail@plt+0x58bc>
   166e8:	sub	r3, r3, #48	; 0x30
   166ec:	cmp	r3, #9
   166f0:	bhi	1670c <__assert_fail@plt+0x58c4>
   166f4:	b	16704 <__assert_fail@plt+0x58bc>
   166f8:	sub	r3, r3, #97	; 0x61
   166fc:	cmp	r3, #25
   16700:	bhi	1670c <__assert_fail@plt+0x58c4>
   16704:	mov	r3, #1
   16708:	b	16710 <__assert_fail@plt+0x58c8>
   1670c:	mov	r3, #0
   16710:	mov	r0, r3
   16714:	add	sp, fp, #0
   16718:	pop	{fp}		; (ldr fp, [sp], #4)
   1671c:	bx	lr
   16720:	push	{fp}		; (str fp, [sp, #-4]!)
   16724:	add	fp, sp, #0
   16728:	sub	sp, sp, #12
   1672c:	str	r0, [fp, #-8]
   16730:	ldr	r3, [fp, #-8]
   16734:	cmp	r3, #65	; 0x41
   16738:	blt	16758 <__assert_fail@plt+0x5910>
   1673c:	cmp	r3, #90	; 0x5a
   16740:	ble	16750 <__assert_fail@plt+0x5908>
   16744:	sub	r3, r3, #97	; 0x61
   16748:	cmp	r3, #25
   1674c:	bhi	16758 <__assert_fail@plt+0x5910>
   16750:	mov	r3, #1
   16754:	b	1675c <__assert_fail@plt+0x5914>
   16758:	mov	r3, #0
   1675c:	mov	r0, r3
   16760:	add	sp, fp, #0
   16764:	pop	{fp}		; (ldr fp, [sp], #4)
   16768:	bx	lr
   1676c:	push	{fp}		; (str fp, [sp, #-4]!)
   16770:	add	fp, sp, #0
   16774:	sub	sp, sp, #12
   16778:	str	r0, [fp, #-8]
   1677c:	ldr	r3, [fp, #-8]
   16780:	add	r3, r3, #0
   16784:	cmp	r3, #127	; 0x7f
   16788:	bhi	16794 <__assert_fail@plt+0x594c>
   1678c:	mov	r3, #1
   16790:	b	16798 <__assert_fail@plt+0x5950>
   16794:	mov	r3, #0
   16798:	mov	r0, r3
   1679c:	add	sp, fp, #0
   167a0:	pop	{fp}		; (ldr fp, [sp], #4)
   167a4:	bx	lr
   167a8:	push	{fp}		; (str fp, [sp, #-4]!)
   167ac:	add	fp, sp, #0
   167b0:	sub	sp, sp, #12
   167b4:	str	r0, [fp, #-8]
   167b8:	ldr	r3, [fp, #-8]
   167bc:	cmp	r3, #32
   167c0:	beq	167d0 <__assert_fail@plt+0x5988>
   167c4:	ldr	r3, [fp, #-8]
   167c8:	cmp	r3, #9
   167cc:	bne	167d8 <__assert_fail@plt+0x5990>
   167d0:	mov	r3, #1
   167d4:	b	167dc <__assert_fail@plt+0x5994>
   167d8:	mov	r3, #0
   167dc:	and	r3, r3, #1
   167e0:	uxtb	r3, r3
   167e4:	mov	r0, r3
   167e8:	add	sp, fp, #0
   167ec:	pop	{fp}		; (ldr fp, [sp], #4)
   167f0:	bx	lr
   167f4:	push	{fp}		; (str fp, [sp, #-4]!)
   167f8:	add	fp, sp, #0
   167fc:	sub	sp, sp, #12
   16800:	str	r0, [fp, #-8]
   16804:	ldr	r3, [fp, #-8]
   16808:	cmp	r3, #0
   1680c:	blt	16828 <__assert_fail@plt+0x59e0>
   16810:	cmp	r3, #31
   16814:	ble	16820 <__assert_fail@plt+0x59d8>
   16818:	cmp	r3, #127	; 0x7f
   1681c:	bne	16828 <__assert_fail@plt+0x59e0>
   16820:	mov	r3, #1
   16824:	b	1682c <__assert_fail@plt+0x59e4>
   16828:	mov	r3, #0
   1682c:	mov	r0, r3
   16830:	add	sp, fp, #0
   16834:	pop	{fp}		; (ldr fp, [sp], #4)
   16838:	bx	lr
   1683c:	push	{fp}		; (str fp, [sp, #-4]!)
   16840:	add	fp, sp, #0
   16844:	sub	sp, sp, #12
   16848:	str	r0, [fp, #-8]
   1684c:	ldr	r3, [fp, #-8]
   16850:	sub	r3, r3, #48	; 0x30
   16854:	cmp	r3, #9
   16858:	bhi	16864 <__assert_fail@plt+0x5a1c>
   1685c:	mov	r3, #1
   16860:	b	16868 <__assert_fail@plt+0x5a20>
   16864:	mov	r3, #0
   16868:	mov	r0, r3
   1686c:	add	sp, fp, #0
   16870:	pop	{fp}		; (ldr fp, [sp], #4)
   16874:	bx	lr
   16878:	push	{fp}		; (str fp, [sp, #-4]!)
   1687c:	add	fp, sp, #0
   16880:	sub	sp, sp, #12
   16884:	str	r0, [fp, #-8]
   16888:	ldr	r3, [fp, #-8]
   1688c:	sub	r3, r3, #33	; 0x21
   16890:	cmp	r3, #93	; 0x5d
   16894:	bhi	168a0 <__assert_fail@plt+0x5a58>
   16898:	mov	r3, #1
   1689c:	b	168a4 <__assert_fail@plt+0x5a5c>
   168a0:	mov	r3, #0
   168a4:	mov	r0, r3
   168a8:	add	sp, fp, #0
   168ac:	pop	{fp}		; (ldr fp, [sp], #4)
   168b0:	bx	lr
   168b4:	push	{fp}		; (str fp, [sp, #-4]!)
   168b8:	add	fp, sp, #0
   168bc:	sub	sp, sp, #12
   168c0:	str	r0, [fp, #-8]
   168c4:	ldr	r3, [fp, #-8]
   168c8:	sub	r3, r3, #97	; 0x61
   168cc:	cmp	r3, #25
   168d0:	bhi	168dc <__assert_fail@plt+0x5a94>
   168d4:	mov	r3, #1
   168d8:	b	168e0 <__assert_fail@plt+0x5a98>
   168dc:	mov	r3, #0
   168e0:	mov	r0, r3
   168e4:	add	sp, fp, #0
   168e8:	pop	{fp}		; (ldr fp, [sp], #4)
   168ec:	bx	lr
   168f0:	push	{fp}		; (str fp, [sp, #-4]!)
   168f4:	add	fp, sp, #0
   168f8:	sub	sp, sp, #12
   168fc:	str	r0, [fp, #-8]
   16900:	ldr	r3, [fp, #-8]
   16904:	sub	r3, r3, #32
   16908:	cmp	r3, #94	; 0x5e
   1690c:	bhi	16918 <__assert_fail@plt+0x5ad0>
   16910:	mov	r3, #1
   16914:	b	1691c <__assert_fail@plt+0x5ad4>
   16918:	mov	r3, #0
   1691c:	mov	r0, r3
   16920:	add	sp, fp, #0
   16924:	pop	{fp}		; (ldr fp, [sp], #4)
   16928:	bx	lr
   1692c:	push	{fp}		; (str fp, [sp, #-4]!)
   16930:	add	fp, sp, #0
   16934:	sub	sp, sp, #12
   16938:	str	r0, [fp, #-8]
   1693c:	ldr	r3, [fp, #-8]
   16940:	cmp	r3, #64	; 0x40
   16944:	bgt	16960 <__assert_fail@plt+0x5b18>
   16948:	cmp	r3, #58	; 0x3a
   1694c:	bge	1697c <__assert_fail@plt+0x5b34>
   16950:	sub	r3, r3, #33	; 0x21
   16954:	cmp	r3, #14
   16958:	bhi	16984 <__assert_fail@plt+0x5b3c>
   1695c:	b	1697c <__assert_fail@plt+0x5b34>
   16960:	cmp	r3, #91	; 0x5b
   16964:	blt	16984 <__assert_fail@plt+0x5b3c>
   16968:	cmp	r3, #96	; 0x60
   1696c:	ble	1697c <__assert_fail@plt+0x5b34>
   16970:	sub	r3, r3, #123	; 0x7b
   16974:	cmp	r3, #3
   16978:	bhi	16984 <__assert_fail@plt+0x5b3c>
   1697c:	mov	r3, #1
   16980:	b	16988 <__assert_fail@plt+0x5b40>
   16984:	mov	r3, #0
   16988:	mov	r0, r3
   1698c:	add	sp, fp, #0
   16990:	pop	{fp}		; (ldr fp, [sp], #4)
   16994:	bx	lr
   16998:	push	{fp}		; (str fp, [sp, #-4]!)
   1699c:	add	fp, sp, #0
   169a0:	sub	sp, sp, #12
   169a4:	str	r0, [fp, #-8]
   169a8:	ldr	r3, [fp, #-8]
   169ac:	cmp	r3, #9
   169b0:	blt	169cc <__assert_fail@plt+0x5b84>
   169b4:	cmp	r3, #13
   169b8:	ble	169c4 <__assert_fail@plt+0x5b7c>
   169bc:	cmp	r3, #32
   169c0:	bne	169cc <__assert_fail@plt+0x5b84>
   169c4:	mov	r3, #1
   169c8:	b	169d0 <__assert_fail@plt+0x5b88>
   169cc:	mov	r3, #0
   169d0:	mov	r0, r3
   169d4:	add	sp, fp, #0
   169d8:	pop	{fp}		; (ldr fp, [sp], #4)
   169dc:	bx	lr
   169e0:	push	{fp}		; (str fp, [sp, #-4]!)
   169e4:	add	fp, sp, #0
   169e8:	sub	sp, sp, #12
   169ec:	str	r0, [fp, #-8]
   169f0:	ldr	r3, [fp, #-8]
   169f4:	sub	r3, r3, #65	; 0x41
   169f8:	cmp	r3, #25
   169fc:	bhi	16a08 <__assert_fail@plt+0x5bc0>
   16a00:	mov	r3, #1
   16a04:	b	16a0c <__assert_fail@plt+0x5bc4>
   16a08:	mov	r3, #0
   16a0c:	mov	r0, r3
   16a10:	add	sp, fp, #0
   16a14:	pop	{fp}		; (ldr fp, [sp], #4)
   16a18:	bx	lr
   16a1c:	push	{fp}		; (str fp, [sp, #-4]!)
   16a20:	add	fp, sp, #0
   16a24:	sub	sp, sp, #12
   16a28:	str	r0, [fp, #-8]
   16a2c:	ldr	r3, [fp, #-8]
   16a30:	sub	r3, r3, #48	; 0x30
   16a34:	cmp	r3, #54	; 0x36
   16a38:	addls	pc, pc, r3, lsl #2
   16a3c:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a40:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a44:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a48:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a4c:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a50:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a54:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a58:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a5c:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a60:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a64:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a68:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a6c:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a70:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a74:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a78:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a7c:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a80:	b	16b24 <__assert_fail@plt+0x5cdc>
   16a84:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a88:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a8c:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a90:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a94:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a98:	b	16b1c <__assert_fail@plt+0x5cd4>
   16a9c:	b	16b24 <__assert_fail@plt+0x5cdc>
   16aa0:	b	16b24 <__assert_fail@plt+0x5cdc>
   16aa4:	b	16b24 <__assert_fail@plt+0x5cdc>
   16aa8:	b	16b24 <__assert_fail@plt+0x5cdc>
   16aac:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ab0:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ab4:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ab8:	b	16b24 <__assert_fail@plt+0x5cdc>
   16abc:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ac0:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ac4:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ac8:	b	16b24 <__assert_fail@plt+0x5cdc>
   16acc:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ad0:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ad4:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ad8:	b	16b24 <__assert_fail@plt+0x5cdc>
   16adc:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ae0:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ae4:	b	16b24 <__assert_fail@plt+0x5cdc>
   16ae8:	b	16b24 <__assert_fail@plt+0x5cdc>
   16aec:	b	16b24 <__assert_fail@plt+0x5cdc>
   16af0:	b	16b24 <__assert_fail@plt+0x5cdc>
   16af4:	b	16b24 <__assert_fail@plt+0x5cdc>
   16af8:	b	16b24 <__assert_fail@plt+0x5cdc>
   16afc:	b	16b24 <__assert_fail@plt+0x5cdc>
   16b00:	b	16b24 <__assert_fail@plt+0x5cdc>
   16b04:	b	16b1c <__assert_fail@plt+0x5cd4>
   16b08:	b	16b1c <__assert_fail@plt+0x5cd4>
   16b0c:	b	16b1c <__assert_fail@plt+0x5cd4>
   16b10:	b	16b1c <__assert_fail@plt+0x5cd4>
   16b14:	b	16b1c <__assert_fail@plt+0x5cd4>
   16b18:	b	16b1c <__assert_fail@plt+0x5cd4>
   16b1c:	mov	r3, #1
   16b20:	b	16b28 <__assert_fail@plt+0x5ce0>
   16b24:	mov	r3, #0
   16b28:	mov	r0, r3
   16b2c:	add	sp, fp, #0
   16b30:	pop	{fp}		; (ldr fp, [sp], #4)
   16b34:	bx	lr
   16b38:	push	{fp}		; (str fp, [sp, #-4]!)
   16b3c:	add	fp, sp, #0
   16b40:	sub	sp, sp, #12
   16b44:	str	r0, [fp, #-8]
   16b48:	ldr	r3, [fp, #-8]
   16b4c:	sub	r3, r3, #65	; 0x41
   16b50:	cmp	r3, #25
   16b54:	bhi	16b64 <__assert_fail@plt+0x5d1c>
   16b58:	ldr	r3, [fp, #-8]
   16b5c:	add	r3, r3, #32
   16b60:	b	16b68 <__assert_fail@plt+0x5d20>
   16b64:	ldr	r3, [fp, #-8]
   16b68:	mov	r0, r3
   16b6c:	add	sp, fp, #0
   16b70:	pop	{fp}		; (ldr fp, [sp], #4)
   16b74:	bx	lr
   16b78:	push	{fp}		; (str fp, [sp, #-4]!)
   16b7c:	add	fp, sp, #0
   16b80:	sub	sp, sp, #12
   16b84:	str	r0, [fp, #-8]
   16b88:	ldr	r3, [fp, #-8]
   16b8c:	sub	r3, r3, #97	; 0x61
   16b90:	cmp	r3, #25
   16b94:	bhi	16ba4 <__assert_fail@plt+0x5d5c>
   16b98:	ldr	r3, [fp, #-8]
   16b9c:	sub	r3, r3, #32
   16ba0:	b	16ba8 <__assert_fail@plt+0x5d60>
   16ba4:	ldr	r3, [fp, #-8]
   16ba8:	mov	r0, r3
   16bac:	add	sp, fp, #0
   16bb0:	pop	{fp}		; (ldr fp, [sp], #4)
   16bb4:	bx	lr
   16bb8:	push	{fp, lr}
   16bbc:	add	fp, sp, #4
   16bc0:	sub	sp, sp, #272	; 0x110
   16bc4:	str	r0, [fp, #-272]	; 0xfffffef0
   16bc8:	sub	r3, fp, #264	; 0x108
   16bcc:	ldr	r2, [pc, #116]	; 16c48 <__assert_fail@plt+0x5e00>
   16bd0:	mov	r1, r3
   16bd4:	ldr	r0, [fp, #-272]	; 0xfffffef0
   16bd8:	bl	16d5c <__assert_fail@plt+0x5f14>
   16bdc:	mov	r3, r0
   16be0:	cmp	r3, #0
   16be4:	beq	16bf0 <__assert_fail@plt+0x5da8>
   16be8:	mov	r3, #0
   16bec:	b	16c3c <__assert_fail@plt+0x5df4>
   16bf0:	sub	r3, fp, #264	; 0x108
   16bf4:	ldr	r1, [pc, #80]	; 16c4c <__assert_fail@plt+0x5e04>
   16bf8:	mov	r0, r3
   16bfc:	bl	10c20 <strcmp@plt>
   16c00:	mov	r3, r0
   16c04:	cmp	r3, #0
   16c08:	beq	16c30 <__assert_fail@plt+0x5de8>
   16c0c:	sub	r3, fp, #264	; 0x108
   16c10:	ldr	r1, [pc, #56]	; 16c50 <__assert_fail@plt+0x5e08>
   16c14:	mov	r0, r3
   16c18:	bl	10c20 <strcmp@plt>
   16c1c:	mov	r3, r0
   16c20:	cmp	r3, #0
   16c24:	beq	16c30 <__assert_fail@plt+0x5de8>
   16c28:	mov	r3, #1
   16c2c:	b	16c34 <__assert_fail@plt+0x5dec>
   16c30:	mov	r3, #0
   16c34:	and	r3, r3, #1
   16c38:	uxtb	r3, r3
   16c3c:	mov	r0, r3
   16c40:	sub	sp, fp, #4
   16c44:	pop	{fp, pc}
   16c48:	andeq	r0, r0, r1, lsl #2
   16c4c:	andeq	r7, r1, r4, asr #26
   16c50:	andeq	r7, r1, r8, asr #26
   16c54:	push	{fp, lr}
   16c58:	add	fp, sp, #4
   16c5c:	sub	sp, sp, #16
   16c60:	str	r0, [fp, #-16]
   16c64:	mov	r1, #0
   16c68:	ldr	r0, [fp, #-16]
   16c6c:	bl	10e00 <setlocale@plt>
   16c70:	str	r0, [fp, #-8]
   16c74:	ldr	r3, [fp, #-8]
   16c78:	mov	r0, r3
   16c7c:	sub	sp, fp, #4
   16c80:	pop	{fp, pc}
   16c84:	push	{fp, lr}
   16c88:	add	fp, sp, #4
   16c8c:	sub	sp, sp, #24
   16c90:	str	r0, [fp, #-16]
   16c94:	str	r1, [fp, #-20]	; 0xffffffec
   16c98:	str	r2, [fp, #-24]	; 0xffffffe8
   16c9c:	ldr	r0, [fp, #-16]
   16ca0:	bl	16c54 <__assert_fail@plt+0x5e0c>
   16ca4:	str	r0, [fp, #-8]
   16ca8:	ldr	r3, [fp, #-8]
   16cac:	cmp	r3, #0
   16cb0:	bne	16cd4 <__assert_fail@plt+0x5e8c>
   16cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16cb8:	cmp	r3, #0
   16cbc:	beq	16ccc <__assert_fail@plt+0x5e84>
   16cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cc4:	mov	r2, #0
   16cc8:	strb	r2, [r3]
   16ccc:	mov	r3, #22
   16cd0:	b	16d50 <__assert_fail@plt+0x5f08>
   16cd4:	ldr	r0, [fp, #-8]
   16cd8:	bl	10d94 <strlen@plt>
   16cdc:	str	r0, [fp, #-12]
   16ce0:	ldr	r2, [fp, #-12]
   16ce4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ce8:	cmp	r2, r3
   16cec:	bcs	16d10 <__assert_fail@plt+0x5ec8>
   16cf0:	ldr	r3, [fp, #-12]
   16cf4:	add	r3, r3, #1
   16cf8:	mov	r2, r3
   16cfc:	ldr	r1, [fp, #-8]
   16d00:	ldr	r0, [fp, #-20]	; 0xffffffec
   16d04:	bl	10c68 <memcpy@plt>
   16d08:	mov	r3, #0
   16d0c:	b	16d50 <__assert_fail@plt+0x5f08>
   16d10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d14:	cmp	r3, #0
   16d18:	beq	16d4c <__assert_fail@plt+0x5f04>
   16d1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d20:	sub	r3, r3, #1
   16d24:	mov	r2, r3
   16d28:	ldr	r1, [fp, #-8]
   16d2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16d30:	bl	10c68 <memcpy@plt>
   16d34:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d38:	sub	r3, r3, #1
   16d3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16d40:	add	r3, r2, r3
   16d44:	mov	r2, #0
   16d48:	strb	r2, [r3]
   16d4c:	mov	r3, #34	; 0x22
   16d50:	mov	r0, r3
   16d54:	sub	sp, fp, #4
   16d58:	pop	{fp, pc}
   16d5c:	push	{fp, lr}
   16d60:	add	fp, sp, #4
   16d64:	sub	sp, sp, #16
   16d68:	str	r0, [fp, #-8]
   16d6c:	str	r1, [fp, #-12]
   16d70:	str	r2, [fp, #-16]
   16d74:	ldr	r2, [fp, #-16]
   16d78:	ldr	r1, [fp, #-12]
   16d7c:	ldr	r0, [fp, #-8]
   16d80:	bl	16c84 <__assert_fail@plt+0x5e3c>
   16d84:	mov	r3, r0
   16d88:	mov	r0, r3
   16d8c:	sub	sp, fp, #4
   16d90:	pop	{fp, pc}
   16d94:	push	{fp, lr}
   16d98:	add	fp, sp, #4
   16d9c:	sub	sp, sp, #8
   16da0:	str	r0, [fp, #-8]
   16da4:	ldr	r0, [fp, #-8]
   16da8:	bl	16c54 <__assert_fail@plt+0x5e0c>
   16dac:	mov	r3, r0
   16db0:	mov	r0, r3
   16db4:	sub	sp, fp, #4
   16db8:	pop	{fp, pc}
   16dbc:	subs	r2, r1, #1
   16dc0:	bxeq	lr
   16dc4:	bcc	16f9c <__assert_fail@plt+0x6154>
   16dc8:	cmp	r0, r1
   16dcc:	bls	16f80 <__assert_fail@plt+0x6138>
   16dd0:	tst	r1, r2
   16dd4:	beq	16f8c <__assert_fail@plt+0x6144>
   16dd8:	clz	r3, r0
   16ddc:	clz	r2, r1
   16de0:	sub	r3, r2, r3
   16de4:	rsbs	r3, r3, #31
   16de8:	addne	r3, r3, r3, lsl #1
   16dec:	mov	r2, #0
   16df0:	addne	pc, pc, r3, lsl #2
   16df4:	nop			; (mov r0, r0)
   16df8:	cmp	r0, r1, lsl #31
   16dfc:	adc	r2, r2, r2
   16e00:	subcs	r0, r0, r1, lsl #31
   16e04:	cmp	r0, r1, lsl #30
   16e08:	adc	r2, r2, r2
   16e0c:	subcs	r0, r0, r1, lsl #30
   16e10:	cmp	r0, r1, lsl #29
   16e14:	adc	r2, r2, r2
   16e18:	subcs	r0, r0, r1, lsl #29
   16e1c:	cmp	r0, r1, lsl #28
   16e20:	adc	r2, r2, r2
   16e24:	subcs	r0, r0, r1, lsl #28
   16e28:	cmp	r0, r1, lsl #27
   16e2c:	adc	r2, r2, r2
   16e30:	subcs	r0, r0, r1, lsl #27
   16e34:	cmp	r0, r1, lsl #26
   16e38:	adc	r2, r2, r2
   16e3c:	subcs	r0, r0, r1, lsl #26
   16e40:	cmp	r0, r1, lsl #25
   16e44:	adc	r2, r2, r2
   16e48:	subcs	r0, r0, r1, lsl #25
   16e4c:	cmp	r0, r1, lsl #24
   16e50:	adc	r2, r2, r2
   16e54:	subcs	r0, r0, r1, lsl #24
   16e58:	cmp	r0, r1, lsl #23
   16e5c:	adc	r2, r2, r2
   16e60:	subcs	r0, r0, r1, lsl #23
   16e64:	cmp	r0, r1, lsl #22
   16e68:	adc	r2, r2, r2
   16e6c:	subcs	r0, r0, r1, lsl #22
   16e70:	cmp	r0, r1, lsl #21
   16e74:	adc	r2, r2, r2
   16e78:	subcs	r0, r0, r1, lsl #21
   16e7c:	cmp	r0, r1, lsl #20
   16e80:	adc	r2, r2, r2
   16e84:	subcs	r0, r0, r1, lsl #20
   16e88:	cmp	r0, r1, lsl #19
   16e8c:	adc	r2, r2, r2
   16e90:	subcs	r0, r0, r1, lsl #19
   16e94:	cmp	r0, r1, lsl #18
   16e98:	adc	r2, r2, r2
   16e9c:	subcs	r0, r0, r1, lsl #18
   16ea0:	cmp	r0, r1, lsl #17
   16ea4:	adc	r2, r2, r2
   16ea8:	subcs	r0, r0, r1, lsl #17
   16eac:	cmp	r0, r1, lsl #16
   16eb0:	adc	r2, r2, r2
   16eb4:	subcs	r0, r0, r1, lsl #16
   16eb8:	cmp	r0, r1, lsl #15
   16ebc:	adc	r2, r2, r2
   16ec0:	subcs	r0, r0, r1, lsl #15
   16ec4:	cmp	r0, r1, lsl #14
   16ec8:	adc	r2, r2, r2
   16ecc:	subcs	r0, r0, r1, lsl #14
   16ed0:	cmp	r0, r1, lsl #13
   16ed4:	adc	r2, r2, r2
   16ed8:	subcs	r0, r0, r1, lsl #13
   16edc:	cmp	r0, r1, lsl #12
   16ee0:	adc	r2, r2, r2
   16ee4:	subcs	r0, r0, r1, lsl #12
   16ee8:	cmp	r0, r1, lsl #11
   16eec:	adc	r2, r2, r2
   16ef0:	subcs	r0, r0, r1, lsl #11
   16ef4:	cmp	r0, r1, lsl #10
   16ef8:	adc	r2, r2, r2
   16efc:	subcs	r0, r0, r1, lsl #10
   16f00:	cmp	r0, r1, lsl #9
   16f04:	adc	r2, r2, r2
   16f08:	subcs	r0, r0, r1, lsl #9
   16f0c:	cmp	r0, r1, lsl #8
   16f10:	adc	r2, r2, r2
   16f14:	subcs	r0, r0, r1, lsl #8
   16f18:	cmp	r0, r1, lsl #7
   16f1c:	adc	r2, r2, r2
   16f20:	subcs	r0, r0, r1, lsl #7
   16f24:	cmp	r0, r1, lsl #6
   16f28:	adc	r2, r2, r2
   16f2c:	subcs	r0, r0, r1, lsl #6
   16f30:	cmp	r0, r1, lsl #5
   16f34:	adc	r2, r2, r2
   16f38:	subcs	r0, r0, r1, lsl #5
   16f3c:	cmp	r0, r1, lsl #4
   16f40:	adc	r2, r2, r2
   16f44:	subcs	r0, r0, r1, lsl #4
   16f48:	cmp	r0, r1, lsl #3
   16f4c:	adc	r2, r2, r2
   16f50:	subcs	r0, r0, r1, lsl #3
   16f54:	cmp	r0, r1, lsl #2
   16f58:	adc	r2, r2, r2
   16f5c:	subcs	r0, r0, r1, lsl #2
   16f60:	cmp	r0, r1, lsl #1
   16f64:	adc	r2, r2, r2
   16f68:	subcs	r0, r0, r1, lsl #1
   16f6c:	cmp	r0, r1
   16f70:	adc	r2, r2, r2
   16f74:	subcs	r0, r0, r1
   16f78:	mov	r0, r2
   16f7c:	bx	lr
   16f80:	moveq	r0, #1
   16f84:	movne	r0, #0
   16f88:	bx	lr
   16f8c:	clz	r2, r1
   16f90:	rsb	r2, r2, #31
   16f94:	lsr	r0, r0, r2
   16f98:	bx	lr
   16f9c:	cmp	r0, #0
   16fa0:	mvnne	r0, #0
   16fa4:	b	17208 <__assert_fail@plt+0x63c0>
   16fa8:	cmp	r1, #0
   16fac:	beq	16f9c <__assert_fail@plt+0x6154>
   16fb0:	push	{r0, r1, lr}
   16fb4:	bl	16dbc <__assert_fail@plt+0x5f74>
   16fb8:	pop	{r1, r2, lr}
   16fbc:	mul	r3, r2, r0
   16fc0:	sub	r1, r1, r3
   16fc4:	bx	lr
   16fc8:	cmp	r1, #0
   16fcc:	beq	171d8 <__assert_fail@plt+0x6390>
   16fd0:	eor	ip, r0, r1
   16fd4:	rsbmi	r1, r1, #0
   16fd8:	subs	r2, r1, #1
   16fdc:	beq	171a4 <__assert_fail@plt+0x635c>
   16fe0:	movs	r3, r0
   16fe4:	rsbmi	r3, r0, #0
   16fe8:	cmp	r3, r1
   16fec:	bls	171b0 <__assert_fail@plt+0x6368>
   16ff0:	tst	r1, r2
   16ff4:	beq	171c0 <__assert_fail@plt+0x6378>
   16ff8:	clz	r2, r3
   16ffc:	clz	r0, r1
   17000:	sub	r2, r0, r2
   17004:	rsbs	r2, r2, #31
   17008:	addne	r2, r2, r2, lsl #1
   1700c:	mov	r0, #0
   17010:	addne	pc, pc, r2, lsl #2
   17014:	nop			; (mov r0, r0)
   17018:	cmp	r3, r1, lsl #31
   1701c:	adc	r0, r0, r0
   17020:	subcs	r3, r3, r1, lsl #31
   17024:	cmp	r3, r1, lsl #30
   17028:	adc	r0, r0, r0
   1702c:	subcs	r3, r3, r1, lsl #30
   17030:	cmp	r3, r1, lsl #29
   17034:	adc	r0, r0, r0
   17038:	subcs	r3, r3, r1, lsl #29
   1703c:	cmp	r3, r1, lsl #28
   17040:	adc	r0, r0, r0
   17044:	subcs	r3, r3, r1, lsl #28
   17048:	cmp	r3, r1, lsl #27
   1704c:	adc	r0, r0, r0
   17050:	subcs	r3, r3, r1, lsl #27
   17054:	cmp	r3, r1, lsl #26
   17058:	adc	r0, r0, r0
   1705c:	subcs	r3, r3, r1, lsl #26
   17060:	cmp	r3, r1, lsl #25
   17064:	adc	r0, r0, r0
   17068:	subcs	r3, r3, r1, lsl #25
   1706c:	cmp	r3, r1, lsl #24
   17070:	adc	r0, r0, r0
   17074:	subcs	r3, r3, r1, lsl #24
   17078:	cmp	r3, r1, lsl #23
   1707c:	adc	r0, r0, r0
   17080:	subcs	r3, r3, r1, lsl #23
   17084:	cmp	r3, r1, lsl #22
   17088:	adc	r0, r0, r0
   1708c:	subcs	r3, r3, r1, lsl #22
   17090:	cmp	r3, r1, lsl #21
   17094:	adc	r0, r0, r0
   17098:	subcs	r3, r3, r1, lsl #21
   1709c:	cmp	r3, r1, lsl #20
   170a0:	adc	r0, r0, r0
   170a4:	subcs	r3, r3, r1, lsl #20
   170a8:	cmp	r3, r1, lsl #19
   170ac:	adc	r0, r0, r0
   170b0:	subcs	r3, r3, r1, lsl #19
   170b4:	cmp	r3, r1, lsl #18
   170b8:	adc	r0, r0, r0
   170bc:	subcs	r3, r3, r1, lsl #18
   170c0:	cmp	r3, r1, lsl #17
   170c4:	adc	r0, r0, r0
   170c8:	subcs	r3, r3, r1, lsl #17
   170cc:	cmp	r3, r1, lsl #16
   170d0:	adc	r0, r0, r0
   170d4:	subcs	r3, r3, r1, lsl #16
   170d8:	cmp	r3, r1, lsl #15
   170dc:	adc	r0, r0, r0
   170e0:	subcs	r3, r3, r1, lsl #15
   170e4:	cmp	r3, r1, lsl #14
   170e8:	adc	r0, r0, r0
   170ec:	subcs	r3, r3, r1, lsl #14
   170f0:	cmp	r3, r1, lsl #13
   170f4:	adc	r0, r0, r0
   170f8:	subcs	r3, r3, r1, lsl #13
   170fc:	cmp	r3, r1, lsl #12
   17100:	adc	r0, r0, r0
   17104:	subcs	r3, r3, r1, lsl #12
   17108:	cmp	r3, r1, lsl #11
   1710c:	adc	r0, r0, r0
   17110:	subcs	r3, r3, r1, lsl #11
   17114:	cmp	r3, r1, lsl #10
   17118:	adc	r0, r0, r0
   1711c:	subcs	r3, r3, r1, lsl #10
   17120:	cmp	r3, r1, lsl #9
   17124:	adc	r0, r0, r0
   17128:	subcs	r3, r3, r1, lsl #9
   1712c:	cmp	r3, r1, lsl #8
   17130:	adc	r0, r0, r0
   17134:	subcs	r3, r3, r1, lsl #8
   17138:	cmp	r3, r1, lsl #7
   1713c:	adc	r0, r0, r0
   17140:	subcs	r3, r3, r1, lsl #7
   17144:	cmp	r3, r1, lsl #6
   17148:	adc	r0, r0, r0
   1714c:	subcs	r3, r3, r1, lsl #6
   17150:	cmp	r3, r1, lsl #5
   17154:	adc	r0, r0, r0
   17158:	subcs	r3, r3, r1, lsl #5
   1715c:	cmp	r3, r1, lsl #4
   17160:	adc	r0, r0, r0
   17164:	subcs	r3, r3, r1, lsl #4
   17168:	cmp	r3, r1, lsl #3
   1716c:	adc	r0, r0, r0
   17170:	subcs	r3, r3, r1, lsl #3
   17174:	cmp	r3, r1, lsl #2
   17178:	adc	r0, r0, r0
   1717c:	subcs	r3, r3, r1, lsl #2
   17180:	cmp	r3, r1, lsl #1
   17184:	adc	r0, r0, r0
   17188:	subcs	r3, r3, r1, lsl #1
   1718c:	cmp	r3, r1
   17190:	adc	r0, r0, r0
   17194:	subcs	r3, r3, r1
   17198:	cmp	ip, #0
   1719c:	rsbmi	r0, r0, #0
   171a0:	bx	lr
   171a4:	teq	ip, r0
   171a8:	rsbmi	r0, r0, #0
   171ac:	bx	lr
   171b0:	movcc	r0, #0
   171b4:	asreq	r0, ip, #31
   171b8:	orreq	r0, r0, #1
   171bc:	bx	lr
   171c0:	clz	r2, r1
   171c4:	rsb	r2, r2, #31
   171c8:	cmp	ip, #0
   171cc:	lsr	r0, r3, r2
   171d0:	rsbmi	r0, r0, #0
   171d4:	bx	lr
   171d8:	cmp	r0, #0
   171dc:	mvngt	r0, #-2147483648	; 0x80000000
   171e0:	movlt	r0, #-2147483648	; 0x80000000
   171e4:	b	17208 <__assert_fail@plt+0x63c0>
   171e8:	cmp	r1, #0
   171ec:	beq	171d8 <__assert_fail@plt+0x6390>
   171f0:	push	{r0, r1, lr}
   171f4:	bl	16fd0 <__assert_fail@plt+0x6188>
   171f8:	pop	{r1, r2, lr}
   171fc:	mul	r3, r2, r0
   17200:	sub	r1, r1, r3
   17204:	bx	lr
   17208:	push	{r1, lr}
   1720c:	mov	r0, #8
   17210:	bl	10c14 <raise@plt>
   17214:	pop	{r1, pc}
   17218:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1721c:	mov	r7, r0
   17220:	ldr	r6, [pc, #72]	; 17270 <__assert_fail@plt+0x6428>
   17224:	ldr	r5, [pc, #72]	; 17274 <__assert_fail@plt+0x642c>
   17228:	add	r6, pc, r6
   1722c:	add	r5, pc, r5
   17230:	sub	r6, r6, r5
   17234:	mov	r8, r1
   17238:	mov	r9, r2
   1723c:	bl	10bdc <calloc@plt-0x20>
   17240:	asrs	r6, r6, #2
   17244:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17248:	mov	r4, #0
   1724c:	add	r4, r4, #1
   17250:	ldr	r3, [r5], #4
   17254:	mov	r2, r9
   17258:	mov	r1, r8
   1725c:	mov	r0, r7
   17260:	blx	r3
   17264:	cmp	r6, r4
   17268:	bne	1724c <__assert_fail@plt+0x6404>
   1726c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17270:	andeq	r0, r1, r0, ror #25
   17274:	ldrdeq	r0, [r1], -r8
   17278:	bx	lr
   1727c:	ldr	r3, [pc, #12]	; 17290 <__assert_fail@plt+0x6448>
   17280:	mov	r1, #0
   17284:	add	r3, pc, r3
   17288:	ldr	r2, [r3]
   1728c:	b	10dc4 <__cxa_atexit@plt>
   17290:	andeq	r0, r1, r0, asr lr

Disassembly of section .fini:

00017294 <.fini>:
   17294:	push	{r3, lr}
   17298:	pop	{r3, pc}
