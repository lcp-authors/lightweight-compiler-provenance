
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010d20 <.init>:
   10d20:	push	{r3, lr}
   10d24:	bl	10fbc <__assert_fail@plt+0x48>
   10d28:	pop	{r3, pc}

Disassembly of section .plt:

00010d2c <calloc@plt-0x14>:
   10d2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10d30:	ldr	lr, [pc, #4]	; 10d3c <calloc@plt-0x4>
   10d34:	add	lr, pc, lr
   10d38:	ldr	pc, [lr, #8]!
   10d3c:	andeq	r5, r1, r4, asr #5

00010d40 <calloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #86016	; 0x15000
   10d48:	ldr	pc, [ip, #708]!	; 0x2c4

00010d4c <fputs_unlocked@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #86016	; 0x15000
   10d54:	ldr	pc, [ip, #700]!	; 0x2bc

00010d58 <strcmp@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #86016	; 0x15000
   10d60:	ldr	pc, [ip, #692]!	; 0x2b4

00010d64 <strtol@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #86016	; 0x15000
   10d6c:	ldr	pc, [ip, #684]!	; 0x2ac

00010d70 <fflush@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #86016	; 0x15000
   10d78:	ldr	pc, [ip, #676]!	; 0x2a4

00010d7c <free@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #86016	; 0x15000
   10d84:	ldr	pc, [ip, #668]!	; 0x29c

00010d88 <_exit@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #86016	; 0x15000
   10d90:	ldr	pc, [ip, #660]!	; 0x294

00010d94 <memcpy@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #86016	; 0x15000
   10d9c:	ldr	pc, [ip, #652]!	; 0x28c

00010da0 <execvp@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #86016	; 0x15000
   10da8:	ldr	pc, [ip, #644]!	; 0x284

00010dac <mbsinit@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #86016	; 0x15000
   10db4:	ldr	pc, [ip, #636]!	; 0x27c

00010db8 <dcgettext@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #86016	; 0x15000
   10dc0:	ldr	pc, [ip, #628]!	; 0x274

00010dc4 <realloc@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #86016	; 0x15000
   10dcc:	ldr	pc, [ip, #620]!	; 0x26c

00010dd0 <getpriority@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #86016	; 0x15000
   10dd8:	ldr	pc, [ip, #612]!	; 0x264

00010ddc <textdomain@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #86016	; 0x15000
   10de4:	ldr	pc, [ip, #604]!	; 0x25c

00010de8 <iswprint@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #86016	; 0x15000
   10df0:	ldr	pc, [ip, #596]!	; 0x254

00010df4 <lseek64@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #86016	; 0x15000
   10dfc:	ldr	pc, [ip, #588]!	; 0x24c

00010e00 <__ctype_get_mb_cur_max@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #86016	; 0x15000
   10e08:	ldr	pc, [ip, #580]!	; 0x244

00010e0c <__fpending@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #86016	; 0x15000
   10e14:	ldr	pc, [ip, #572]!	; 0x23c

00010e18 <ferror_unlocked@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #86016	; 0x15000
   10e20:	ldr	pc, [ip, #564]!	; 0x234

00010e24 <mbrtowc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #86016	; 0x15000
   10e2c:	ldr	pc, [ip, #556]!	; 0x22c

00010e30 <error@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #86016	; 0x15000
   10e38:	ldr	pc, [ip, #548]!	; 0x224

00010e3c <setpriority@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #86016	; 0x15000
   10e44:	ldr	pc, [ip, #540]!	; 0x21c

00010e48 <malloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #86016	; 0x15000
   10e50:	ldr	pc, [ip, #532]!	; 0x214

00010e54 <__libc_start_main@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #86016	; 0x15000
   10e5c:	ldr	pc, [ip, #524]!	; 0x20c

00010e60 <__freading@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #516]!	; 0x204

00010e6c <__gmon_start__@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #508]!	; 0x1fc

00010e78 <getopt_long@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #500]!	; 0x1f4

00010e84 <__ctype_b_loc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #492]!	; 0x1ec

00010e90 <exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #484]!	; 0x1e4

00010e9c <bcmp@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ea8 <strlen@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #468]!	; 0x1d4

00010eb4 <strchr@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec0 <__errno_location@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #452]!	; 0x1c4

00010ecc <__cxa_atexit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #444]!	; 0x1bc

00010ed8 <memset@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #436]!	; 0x1b4

00010ee4 <__printf_chk@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef0 <fileno@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #420]!	; 0x1a4

00010efc <__fprintf_chk@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #412]!	; 0x19c

00010f08 <fclose@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #404]!	; 0x194

00010f14 <fseeko64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #396]!	; 0x18c

00010f20 <setlocale@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #388]!	; 0x184

00010f2c <strrchr@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #380]!	; 0x17c

00010f38 <nl_langinfo@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #372]!	; 0x174

00010f44 <bindtextdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #364]!	; 0x16c

00010f50 <fputs@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #356]!	; 0x164

00010f5c <strncmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #348]!	; 0x15c

00010f68 <abort@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #340]!	; 0x154

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #332]!	; 0x14c

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e54 <__libc_start_main@plt>
   10fac:	bl	10f68 <abort@plt>
   10fb0:	strdeq	r4, [r1], -r0
   10fb4:	strdeq	r1, [r1], -ip
   10fb8:	muleq	r1, r0, r6
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e6c <__gmon_start__@plt>
   10fd8:	andeq	r5, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, ip, asr #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	r6, r2, r0, lsr #2
   11004:	andeq	r6, r2, r0, lsr #2
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	r6, r2, r0, lsr #2
   1103c:	andeq	r6, r2, r0, lsr #2
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	r6, r2, ip, lsr r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	push	{fp, lr}
   11074:	mov	fp, sp
   11078:	sub	sp, sp, #56	; 0x38
   1107c:	mov	r8, r0
   11080:	cmp	r0, #0
   11084:	bne	112bc <__assert_fail@plt+0x348>
   11088:	movw	r1, #18243	; 0x4743
   1108c:	mov	r0, #0
   11090:	mov	r2, #5
   11094:	movt	r1, #1
   11098:	bl	10db8 <dcgettext@plt>
   1109c:	mov	r1, r0
   110a0:	movw	r0, #24904	; 0x6148
   110a4:	movt	r0, #2
   110a8:	ldr	r2, [r0]
   110ac:	mov	r0, #1
   110b0:	bl	10ee4 <__printf_chk@plt>
   110b4:	movw	r1, #18282	; 0x476a
   110b8:	mov	r0, #0
   110bc:	mov	r2, #5
   110c0:	movt	r1, #1
   110c4:	bl	10db8 <dcgettext@plt>
   110c8:	mov	r1, r0
   110cc:	mov	r0, #1
   110d0:	mvn	r2, #19
   110d4:	mov	r3, #19
   110d8:	bl	10ee4 <__printf_chk@plt>
   110dc:	movw	r1, #19033	; 0x4a59
   110e0:	mov	r0, #0
   110e4:	mov	r2, #5
   110e8:	movt	r1, #1
   110ec:	bl	10db8 <dcgettext@plt>
   110f0:	movw	r9, #24884	; 0x6134
   110f4:	movt	r9, #2
   110f8:	ldr	r1, [r9]
   110fc:	bl	10d4c <fputs_unlocked@plt>
   11100:	movw	r1, #18504	; 0x4848
   11104:	mov	r0, #0
   11108:	mov	r2, #5
   1110c:	movt	r1, #1
   11110:	bl	10db8 <dcgettext@plt>
   11114:	ldr	r1, [r9]
   11118:	bl	10d4c <fputs_unlocked@plt>
   1111c:	movw	r1, #18571	; 0x488b
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10db8 <dcgettext@plt>
   11130:	ldr	r1, [r9]
   11134:	bl	10d4c <fputs_unlocked@plt>
   11138:	movw	r1, #18616	; 0x48b8
   1113c:	mov	r0, #0
   11140:	mov	r2, #5
   11144:	movt	r1, #1
   11148:	bl	10db8 <dcgettext@plt>
   1114c:	ldr	r1, [r9]
   11150:	bl	10d4c <fputs_unlocked@plt>
   11154:	movw	r1, #18670	; 0x48ee
   11158:	mov	r0, #0
   1115c:	mov	r2, #5
   11160:	movt	r1, #1
   11164:	bl	10db8 <dcgettext@plt>
   11168:	movw	r5, #18861	; 0x49ad
   1116c:	mov	r1, r0
   11170:	mov	r0, #1
   11174:	movt	r5, #1
   11178:	mov	r2, r5
   1117c:	bl	10ee4 <__printf_chk@plt>
   11180:	movw	ip, #19496	; 0x4c28
   11184:	mov	r6, sp
   11188:	movt	ip, #1
   1118c:	mov	r1, r6
   11190:	ldm	ip!, {r2, r3, r4, r7}
   11194:	stmia	r1!, {r2, r3, r4, r7}
   11198:	ldm	ip!, {r0, r2, r3, r4, r7}
   1119c:	stmia	r1!, {r0, r2, r3, r4, r7}
   111a0:	ldm	ip, {r0, r2, r3, r4, r7}
   111a4:	stm	r1, {r0, r2, r3, r4, r7}
   111a8:	movw	r1, #19108	; 0x4aa4
   111ac:	movt	r1, #1
   111b0:	mov	r0, r5
   111b4:	bl	10d58 <strcmp@plt>
   111b8:	cmp	r0, #0
   111bc:	ldrne	r1, [r6, #8]!
   111c0:	cmpne	r1, #0
   111c4:	bne	111b0 <__assert_fail@plt+0x23c>
   111c8:	movw	r1, #19203	; 0x4b03
   111cc:	ldr	r6, [r6, #4]
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	movt	r1, #1
   111dc:	bl	10db8 <dcgettext@plt>
   111e0:	movw	r2, #18894	; 0x49ce
   111e4:	movw	r3, #19226	; 0x4b1a
   111e8:	mov	r1, r0
   111ec:	mov	r0, #1
   111f0:	movt	r2, #1
   111f4:	movt	r3, #1
   111f8:	bl	10ee4 <__printf_chk@plt>
   111fc:	cmp	r6, #0
   11200:	mov	r0, #5
   11204:	mov	r1, #0
   11208:	moveq	r6, r5
   1120c:	bl	10f20 <setlocale@plt>
   11210:	cmp	r0, #0
   11214:	beq	1124c <__assert_fail@plt+0x2d8>
   11218:	movw	r1, #19266	; 0x4b42
   1121c:	mov	r2, #3
   11220:	movt	r1, #1
   11224:	bl	10f5c <strncmp@plt>
   11228:	cmp	r0, #0
   1122c:	beq	1124c <__assert_fail@plt+0x2d8>
   11230:	movw	r1, #19270	; 0x4b46
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10db8 <dcgettext@plt>
   11244:	ldr	r1, [r9]
   11248:	bl	10d4c <fputs_unlocked@plt>
   1124c:	movw	r1, #19341	; 0x4b8d
   11250:	mov	r0, #0
   11254:	mov	r2, #5
   11258:	movt	r1, #1
   1125c:	bl	10db8 <dcgettext@plt>
   11260:	movw	r2, #19226	; 0x4b1a
   11264:	mov	r1, r0
   11268:	mov	r0, #1
   1126c:	mov	r3, r5
   11270:	movt	r2, #1
   11274:	bl	10ee4 <__printf_chk@plt>
   11278:	movw	r1, #19368	; 0x4ba8
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10db8 <dcgettext@plt>
   1128c:	mov	r1, r0
   11290:	movw	r0, #19136	; 0x4ac0
   11294:	movw	r3, #19418	; 0x4bda
   11298:	cmp	r6, r5
   1129c:	mov	r2, r6
   112a0:	movt	r0, #1
   112a4:	movt	r3, #1
   112a8:	moveq	r3, r0
   112ac:	mov	r0, #1
   112b0:	bl	10ee4 <__printf_chk@plt>
   112b4:	mov	r0, r8
   112b8:	bl	10e90 <exit@plt>
   112bc:	movw	r0, #24880	; 0x6130
   112c0:	movw	r1, #18204	; 0x471c
   112c4:	mov	r2, #5
   112c8:	movt	r0, #2
   112cc:	movt	r1, #1
   112d0:	ldr	r5, [r0]
   112d4:	mov	r0, #0
   112d8:	bl	10db8 <dcgettext@plt>
   112dc:	mov	r2, r0
   112e0:	movw	r0, #24904	; 0x6148
   112e4:	mov	r1, #1
   112e8:	movt	r0, #2
   112ec:	ldr	r3, [r0]
   112f0:	mov	r0, r5
   112f4:	bl	10efc <__fprintf_chk@plt>
   112f8:	b	112b4 <__assert_fail@plt+0x340>
   112fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11300:	add	fp, sp, #28
   11304:	sub	sp, sp, #12
   11308:	mov	r9, r0
   1130c:	ldr	r0, [r1]
   11310:	mov	r8, r1
   11314:	bl	11800 <__assert_fail@plt+0x88c>
   11318:	movw	r1, #19418	; 0x4bda
   1131c:	mov	r0, #6
   11320:	movt	r1, #1
   11324:	bl	10f20 <setlocale@plt>
   11328:	movw	r7, #18898	; 0x49d2
   1132c:	movw	r1, #18866	; 0x49b2
   11330:	movt	r7, #1
   11334:	movt	r1, #1
   11338:	mov	r0, r7
   1133c:	bl	10f44 <bindtextdomain@plt>
   11340:	mov	r0, r7
   11344:	bl	10ddc <textdomain@plt>
   11348:	movw	r0, #24796	; 0x60dc
   1134c:	mov	r1, #125	; 0x7d
   11350:	movt	r0, #2
   11354:	str	r1, [r0]
   11358:	movw	r0, #5912	; 0x1718
   1135c:	movt	r0, #1
   11360:	bl	146f4 <__assert_fail@plt+0x3780>
   11364:	mov	r4, #10
   11368:	mov	r7, #1
   1136c:	cmp	r9, #2
   11370:	blt	1144c <__assert_fail@plt+0x4d8>
   11374:	movw	r2, #18890	; 0x49ca
   11378:	movw	r3, #19432	; 0x4be8
   1137c:	movw	sl, #24872	; 0x6128
   11380:	mov	ip, #0
   11384:	mov	r4, #0
   11388:	movt	r2, #1
   1138c:	movt	r3, #1
   11390:	movt	sl, #2
   11394:	ldr	r1, [r8, r7, lsl #2]
   11398:	ldrb	r0, [r1]
   1139c:	cmp	r0, #45	; 0x2d
   113a0:	bne	113d8 <__assert_fail@plt+0x464>
   113a4:	mov	r0, r1
   113a8:	ldrb	r5, [r0, #1]!
   113ac:	sub	r5, r5, #43	; 0x2b
   113b0:	tst	r5, #253	; 0xfd
   113b4:	mov	r5, #1
   113b8:	movweq	r5, #2
   113bc:	ldrb	r1, [r1, r5]
   113c0:	sub	r1, r1, #48	; 0x30
   113c4:	cmp	r1, #9
   113c8:	bhi	113d8 <__assert_fail@plt+0x464>
   113cc:	add	r7, r7, #1
   113d0:	mov	r4, r0
   113d4:	b	11440 <__assert_fail@plt+0x4cc>
   113d8:	ldr	r0, [r8]
   113dc:	sub	r7, r7, #1
   113e0:	mov	r5, r8
   113e4:	mov	r6, r9
   113e8:	str	r0, [r8, r7, lsl #2]!
   113ec:	sub	r0, r9, r7
   113f0:	str	ip, [sl]
   113f4:	str	ip, [sp]
   113f8:	mov	r9, r2
   113fc:	mov	r1, r8
   11400:	mov	r8, r3
   11404:	bl	10e78 <getopt_long@plt>
   11408:	ldr	r1, [sl]
   1140c:	cmp	r0, #109	; 0x6d
   11410:	add	r7, r7, r1
   11414:	ble	11454 <__assert_fail@plt+0x4e0>
   11418:	cmp	r0, #110	; 0x6e
   1141c:	bne	11674 <__assert_fail@plt+0x700>
   11420:	movw	r0, #24888	; 0x6138
   11424:	mov	r2, r9
   11428:	mov	r3, r8
   1142c:	mov	ip, #0
   11430:	mov	r8, r5
   11434:	mov	r9, r6
   11438:	movt	r0, #2
   1143c:	ldr	r4, [r0]
   11440:	cmp	r7, r9
   11444:	blt	11394 <__assert_fail@plt+0x420>
   11448:	b	11464 <__assert_fail@plt+0x4f0>
   1144c:	mov	r0, #0
   11450:	b	114b8 <__assert_fail@plt+0x544>
   11454:	cmn	r0, #1
   11458:	mov	r8, r5
   1145c:	mov	r9, r6
   11460:	bne	115f0 <__assert_fail@plt+0x67c>
   11464:	cmp	r4, #0
   11468:	beq	114b0 <__assert_fail@plt+0x53c>
   1146c:	movw	r0, #19418	; 0x4bda
   11470:	add	r3, sp, #8
   11474:	mov	r1, #0
   11478:	mov	r2, #10
   1147c:	movt	r0, #1
   11480:	str	r0, [sp]
   11484:	mov	r0, r4
   11488:	bl	13c68 <__assert_fail@plt+0x2cf4>
   1148c:	cmp	r0, #2
   11490:	bcs	1167c <__assert_fail@plt+0x708>
   11494:	ldr	r4, [sp, #8]
   11498:	mov	r0, #1
   1149c:	cmp	r4, #39	; 0x27
   114a0:	movge	r4, #39	; 0x27
   114a4:	cmn	r4, #39	; 0x27
   114a8:	mvnle	r4, #38	; 0x26
   114ac:	b	114b8 <__assert_fail@plt+0x544>
   114b0:	mov	r0, #0
   114b4:	mov	r4, #10
   114b8:	cmp	r7, r9
   114bc:	bne	11510 <__assert_fail@plt+0x59c>
   114c0:	cmp	r0, #0
   114c4:	bne	11650 <__assert_fail@plt+0x6dc>
   114c8:	bl	10ec0 <__errno_location@plt>
   114cc:	mov	r6, #0
   114d0:	mov	r4, r0
   114d4:	mov	r1, #0
   114d8:	str	r6, [r0]
   114dc:	mov	r0, #0
   114e0:	bl	10dd0 <getpriority@plt>
   114e4:	mov	r2, r0
   114e8:	cmn	r0, #1
   114ec:	bne	114fc <__assert_fail@plt+0x588>
   114f0:	ldr	r4, [r4]
   114f4:	cmp	r4, #0
   114f8:	bne	116b0 <__assert_fail@plt+0x73c>
   114fc:	movw	r1, #19009	; 0x4a41
   11500:	mov	r0, #1
   11504:	movt	r1, #1
   11508:	bl	10ee4 <__printf_chk@plt>
   1150c:	b	115e4 <__assert_fail@plt+0x670>
   11510:	bl	10ec0 <__errno_location@plt>
   11514:	mov	r5, r0
   11518:	mov	r0, #0
   1151c:	mov	r1, #0
   11520:	str	r0, [r5]
   11524:	mov	r0, #0
   11528:	bl	10dd0 <getpriority@plt>
   1152c:	cmn	r0, #1
   11530:	bne	11540 <__assert_fail@plt+0x5cc>
   11534:	ldr	r6, [r5]
   11538:	cmp	r6, #0
   1153c:	bne	116d4 <__assert_fail@plt+0x760>
   11540:	add	r2, r0, r4
   11544:	mov	r0, #0
   11548:	mov	r1, #0
   1154c:	bl	10e3c <setpriority@plt>
   11550:	cmp	r0, #0
   11554:	beq	115a8 <__assert_fail@plt+0x634>
   11558:	movw	r1, #19013	; 0x4a45
   1155c:	ldr	r6, [r5]
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	movt	r1, #1
   1156c:	bl	10db8 <dcgettext@plt>
   11570:	subs	r1, r6, #1
   11574:	mov	r2, r0
   11578:	movwne	r1, #125	; 0x7d
   1157c:	subs	r0, r6, #13
   11580:	movne	r0, r1
   11584:	mov	r1, r6
   11588:	bl	10e30 <error@plt>
   1158c:	movw	r0, #24880	; 0x6130
   11590:	movt	r0, #2
   11594:	ldr	r0, [r0]
   11598:	bl	10e18 <ferror_unlocked@plt>
   1159c:	mov	r6, #125	; 0x7d
   115a0:	cmp	r0, #0
   115a4:	bne	115e4 <__assert_fail@plt+0x670>
   115a8:	ldr	r0, [r8, r7, lsl #2]!
   115ac:	mov	r1, r8
   115b0:	bl	10da0 <execvp@plt>
   115b4:	ldr	r0, [r8]
   115b8:	ldr	r4, [r5]
   115bc:	bl	131ec <__assert_fail@plt+0x2278>
   115c0:	movw	r2, #19583	; 0x4c7f
   115c4:	mov	r3, r0
   115c8:	mov	r0, #0
   115cc:	mov	r1, r4
   115d0:	movt	r2, #1
   115d4:	bl	10e30 <error@plt>
   115d8:	cmp	r4, #2
   115dc:	mov	r6, #126	; 0x7e
   115e0:	movweq	r6, #127	; 0x7f
   115e4:	mov	r0, r6
   115e8:	sub	sp, fp, #28
   115ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115f0:	cmn	r0, #3
   115f4:	bne	11640 <__assert_fail@plt+0x6cc>
   115f8:	movw	r0, #24792	; 0x60d8
   115fc:	movw	r2, #18908	; 0x49dc
   11600:	mov	r1, #0
   11604:	movt	r0, #2
   11608:	movt	r2, #1
   1160c:	str	r1, [sp, #4]
   11610:	movw	r1, #18861	; 0x49ad
   11614:	movt	r1, #1
   11618:	ldr	r3, [r0]
   1161c:	movw	r0, #24884	; 0x6134
   11620:	str	r2, [sp]
   11624:	movw	r2, #18894	; 0x49ce
   11628:	movt	r0, #2
   1162c:	movt	r2, #1
   11630:	ldr	r0, [r0]
   11634:	bl	136f0 <__assert_fail@plt+0x277c>
   11638:	mov	r0, #0
   1163c:	bl	10e90 <exit@plt>
   11640:	cmn	r0, #2
   11644:	bne	11674 <__assert_fail@plt+0x700>
   11648:	mov	r0, #0
   1164c:	bl	11070 <__assert_fail@plt+0xfc>
   11650:	movw	r1, #18946	; 0x4a02
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #1
   11660:	bl	10db8 <dcgettext@plt>
   11664:	mov	r2, r0
   11668:	mov	r0, #0
   1166c:	mov	r1, #0
   11670:	bl	10e30 <error@plt>
   11674:	mov	r0, #125	; 0x7d
   11678:	bl	11070 <__assert_fail@plt+0xfc>
   1167c:	movw	r1, #18924	; 0x49ec
   11680:	mov	r0, #0
   11684:	mov	r2, #5
   11688:	movt	r1, #1
   1168c:	bl	10db8 <dcgettext@plt>
   11690:	mov	r5, r0
   11694:	mov	r0, r4
   11698:	bl	131ec <__assert_fail@plt+0x2278>
   1169c:	mov	r3, r0
   116a0:	mov	r0, #125	; 0x7d
   116a4:	mov	r1, #0
   116a8:	mov	r2, r5
   116ac:	bl	10e30 <error@plt>
   116b0:	movw	r1, #18989	; 0x4a2d
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	10db8 <dcgettext@plt>
   116c4:	mov	r2, r0
   116c8:	mov	r0, #125	; 0x7d
   116cc:	mov	r1, r4
   116d0:	bl	10e30 <error@plt>
   116d4:	movw	r1, #18989	; 0x4a2d
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	movt	r1, #1
   116e4:	bl	10db8 <dcgettext@plt>
   116e8:	mov	r2, r0
   116ec:	mov	r0, #125	; 0x7d
   116f0:	mov	r1, r6
   116f4:	bl	10e30 <error@plt>
   116f8:	movw	r1, #24896	; 0x6140
   116fc:	movt	r1, #2
   11700:	str	r0, [r1]
   11704:	bx	lr
   11708:	movw	r1, #24900	; 0x6144
   1170c:	movt	r1, #2
   11710:	strb	r0, [r1]
   11714:	bx	lr
   11718:	push	{r4, r5, r6, sl, fp, lr}
   1171c:	add	fp, sp, #16
   11720:	sub	sp, sp, #8
   11724:	movw	r0, #24884	; 0x6134
   11728:	movt	r0, #2
   1172c:	ldr	r0, [r0]
   11730:	bl	14274 <__assert_fail@plt+0x3300>
   11734:	cmp	r0, #0
   11738:	beq	11760 <__assert_fail@plt+0x7ec>
   1173c:	movw	r0, #24900	; 0x6144
   11740:	movt	r0, #2
   11744:	ldrb	r0, [r0]
   11748:	cmp	r0, #0
   1174c:	beq	11780 <__assert_fail@plt+0x80c>
   11750:	bl	10ec0 <__errno_location@plt>
   11754:	ldr	r0, [r0]
   11758:	cmp	r0, #32
   1175c:	bne	11780 <__assert_fail@plt+0x80c>
   11760:	movw	r0, #24880	; 0x6130
   11764:	movt	r0, #2
   11768:	ldr	r0, [r0]
   1176c:	bl	14274 <__assert_fail@plt+0x3300>
   11770:	cmp	r0, #0
   11774:	subeq	sp, fp, #16
   11778:	popeq	{r4, r5, r6, sl, fp, pc}
   1177c:	b	117f0 <__assert_fail@plt+0x87c>
   11780:	movw	r1, #19567	; 0x4c6f
   11784:	mov	r0, #0
   11788:	mov	r2, #5
   1178c:	movt	r1, #1
   11790:	bl	10db8 <dcgettext@plt>
   11794:	mov	r4, r0
   11798:	movw	r0, #24896	; 0x6140
   1179c:	movt	r0, #2
   117a0:	ldr	r6, [r0]
   117a4:	bl	10ec0 <__errno_location@plt>
   117a8:	ldr	r5, [r0]
   117ac:	cmp	r6, #0
   117b0:	bne	117cc <__assert_fail@plt+0x858>
   117b4:	movw	r2, #19583	; 0x4c7f
   117b8:	mov	r0, #0
   117bc:	mov	r1, r5
   117c0:	mov	r3, r4
   117c4:	movt	r2, #1
   117c8:	b	117ec <__assert_fail@plt+0x878>
   117cc:	mov	r0, r6
   117d0:	bl	12fac <__assert_fail@plt+0x2038>
   117d4:	movw	r2, #19579	; 0x4c7b
   117d8:	mov	r3, r0
   117dc:	str	r4, [sp]
   117e0:	mov	r0, #0
   117e4:	mov	r1, r5
   117e8:	movt	r2, #1
   117ec:	bl	10e30 <error@plt>
   117f0:	movw	r0, #24796	; 0x60dc
   117f4:	movt	r0, #2
   117f8:	ldr	r0, [r0]
   117fc:	bl	10d88 <_exit@plt>
   11800:	push	{r4, r5, fp, lr}
   11804:	add	fp, sp, #8
   11808:	cmp	r0, #0
   1180c:	beq	118a0 <__assert_fail@plt+0x92c>
   11810:	mov	r1, #47	; 0x2f
   11814:	mov	r4, r0
   11818:	bl	10f2c <strrchr@plt>
   1181c:	cmp	r0, #0
   11820:	mov	r5, r4
   11824:	addne	r5, r0, #1
   11828:	sub	r0, r5, r4
   1182c:	cmp	r0, #7
   11830:	blt	11884 <__assert_fail@plt+0x910>
   11834:	movw	r1, #19642	; 0x4cba
   11838:	sub	r0, r5, #7
   1183c:	mov	r2, #7
   11840:	movt	r1, #1
   11844:	bl	10f5c <strncmp@plt>
   11848:	cmp	r0, #0
   1184c:	bne	11884 <__assert_fail@plt+0x910>
   11850:	movw	r1, #19650	; 0x4cc2
   11854:	mov	r0, r5
   11858:	mov	r2, #3
   1185c:	movt	r1, #1
   11860:	bl	10f5c <strncmp@plt>
   11864:	cmp	r0, #0
   11868:	beq	11874 <__assert_fail@plt+0x900>
   1186c:	mov	r4, r5
   11870:	b	11884 <__assert_fail@plt+0x910>
   11874:	movw	r0, #24864	; 0x6120
   11878:	add	r4, r5, #3
   1187c:	movt	r0, #2
   11880:	str	r4, [r0]
   11884:	movw	r0, #24868	; 0x6124
   11888:	movt	r0, #2
   1188c:	str	r4, [r0]
   11890:	movw	r0, #24904	; 0x6148
   11894:	movt	r0, #2
   11898:	str	r4, [r0]
   1189c:	pop	{r4, r5, fp, pc}
   118a0:	movw	r0, #24880	; 0x6130
   118a4:	movt	r0, #2
   118a8:	ldr	r1, [r0]
   118ac:	movw	r0, #19586	; 0x4c82
   118b0:	movt	r0, #1
   118b4:	bl	10f50 <fputs@plt>
   118b8:	bl	10f68 <abort@plt>
   118bc:	push	{r4, r5, r6, sl, fp, lr}
   118c0:	add	fp, sp, #16
   118c4:	mov	r4, r0
   118c8:	movw	r0, #24912	; 0x6150
   118cc:	movt	r0, #2
   118d0:	cmp	r4, #0
   118d4:	moveq	r4, r0
   118d8:	bl	10ec0 <__errno_location@plt>
   118dc:	ldr	r6, [r0]
   118e0:	mov	r5, r0
   118e4:	mov	r0, r4
   118e8:	mov	r1, #48	; 0x30
   118ec:	bl	13b48 <__assert_fail@plt+0x2bd4>
   118f0:	str	r6, [r5]
   118f4:	pop	{r4, r5, r6, sl, fp, pc}
   118f8:	movw	r1, #24912	; 0x6150
   118fc:	cmp	r0, #0
   11900:	movt	r1, #2
   11904:	movne	r1, r0
   11908:	ldr	r0, [r1]
   1190c:	bx	lr
   11910:	movw	r2, #24912	; 0x6150
   11914:	cmp	r0, #0
   11918:	movt	r2, #2
   1191c:	movne	r2, r0
   11920:	str	r1, [r2]
   11924:	bx	lr
   11928:	movw	r3, #24912	; 0x6150
   1192c:	cmp	r0, #0
   11930:	and	r2, r2, #1
   11934:	movt	r3, #2
   11938:	movne	r3, r0
   1193c:	ubfx	r0, r1, #5, #3
   11940:	and	r1, r1, #31
   11944:	add	ip, r3, r0, lsl #2
   11948:	mov	r0, #1
   1194c:	ldr	r3, [ip, #8]
   11950:	and	r0, r0, r3, lsr r1
   11954:	eor	r2, r0, r2
   11958:	eor	r1, r3, r2, lsl r1
   1195c:	str	r1, [ip, #8]
   11960:	bx	lr
   11964:	movw	r2, #24912	; 0x6150
   11968:	cmp	r0, #0
   1196c:	movt	r2, #2
   11970:	movne	r2, r0
   11974:	ldr	r0, [r2, #4]
   11978:	str	r1, [r2, #4]
   1197c:	bx	lr
   11980:	push	{fp, lr}
   11984:	mov	fp, sp
   11988:	movw	r3, #24912	; 0x6150
   1198c:	cmp	r0, #0
   11990:	movt	r3, #2
   11994:	movne	r3, r0
   11998:	cmp	r1, #0
   1199c:	mov	r0, #10
   119a0:	cmpne	r2, #0
   119a4:	str	r0, [r3]
   119a8:	bne	119b0 <__assert_fail@plt+0xa3c>
   119ac:	bl	10f68 <abort@plt>
   119b0:	str	r1, [r3, #40]	; 0x28
   119b4:	str	r2, [r3, #44]	; 0x2c
   119b8:	pop	{fp, pc}
   119bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119c0:	add	fp, sp, #28
   119c4:	sub	sp, sp, #20
   119c8:	mov	r7, r0
   119cc:	ldr	r0, [fp, #8]
   119d0:	movw	r5, #24912	; 0x6150
   119d4:	mov	r8, r3
   119d8:	mov	r9, r2
   119dc:	mov	sl, r1
   119e0:	movt	r5, #2
   119e4:	cmp	r0, #0
   119e8:	movne	r5, r0
   119ec:	bl	10ec0 <__errno_location@plt>
   119f0:	ldr	r2, [r5, #40]	; 0x28
   119f4:	ldr	r3, [r5, #44]	; 0x2c
   119f8:	mov	r4, r0
   119fc:	ldm	r5, {r0, r1}
   11a00:	add	r5, r5, #8
   11a04:	ldr	r6, [r4]
   11a08:	stm	sp, {r0, r1, r5}
   11a0c:	mov	r0, r7
   11a10:	mov	r1, sl
   11a14:	str	r2, [sp, #12]
   11a18:	str	r3, [sp, #16]
   11a1c:	mov	r2, r9
   11a20:	mov	r3, r8
   11a24:	bl	11a34 <__assert_fail@plt+0xac0>
   11a28:	str	r6, [r4]
   11a2c:	sub	sp, fp, #28
   11a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a38:	add	fp, sp, #28
   11a3c:	sub	sp, sp, #156	; 0x9c
   11a40:	mov	r5, r0
   11a44:	add	r0, r2, #1
   11a48:	mov	r6, r1
   11a4c:	mov	sl, r3
   11a50:	str	r2, [fp, #-80]	; 0xffffffb0
   11a54:	str	r0, [sp, #72]	; 0x48
   11a58:	ldr	r0, [fp, #12]
   11a5c:	and	r1, r0, #1
   11a60:	str	r1, [sp, #32]
   11a64:	and	r1, r0, #4
   11a68:	str	r1, [sp, #28]
   11a6c:	ubfx	r9, r0, #1, #1
   11a70:	bl	10e00 <__ctype_get_mb_cur_max@plt>
   11a74:	str	r0, [sp, #40]	; 0x28
   11a78:	ldr	r0, [fp, #24]
   11a7c:	ldr	r7, [fp, #8]
   11a80:	mov	r1, #0
   11a84:	mov	lr, #0
   11a88:	str	r5, [fp, #-84]	; 0xffffffac
   11a8c:	str	r1, [sp, #60]	; 0x3c
   11a90:	mov	r1, #1
   11a94:	str	r1, [fp, #-48]	; 0xffffffd0
   11a98:	str	r0, [sp, #80]	; 0x50
   11a9c:	ldr	r0, [fp, #20]
   11aa0:	str	r0, [sp, #76]	; 0x4c
   11aa4:	mov	r0, #0
   11aa8:	str	r0, [sp, #56]	; 0x38
   11aac:	mov	r0, #0
   11ab0:	str	r0, [fp, #-88]	; 0xffffffa8
   11ab4:	mov	r0, #0
   11ab8:	str	r0, [fp, #-72]	; 0xffffffb8
   11abc:	mov	r0, #0
   11ac0:	cmp	r7, #10
   11ac4:	bhi	12aa0 <__assert_fail@plt+0x1b2c>
   11ac8:	add	r1, pc, #24
   11acc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11ad0:	mov	ip, r6
   11ad4:	mov	r8, #0
   11ad8:	mov	r2, #1
   11adc:	mov	r6, #0
   11ae0:	mov	r3, sl
   11ae4:	ldr	pc, [r1, r7, lsl #2]
   11ae8:	ldrdeq	r1, [r1], -r4
   11aec:	andeq	r1, r1, r8, lsr #24
   11af0:	andeq	r1, r1, r8, ror #23
   11af4:	andeq	r1, r1, ip, asr #23
   11af8:	andeq	r1, r1, ip, lsl ip
   11afc:	andeq	r1, r1, r0, asr ip
   11b00:	strdeq	r1, [r1], -r8
   11b04:	ldrdeq	r1, [r1], -r4
   11b08:	andeq	r1, r1, r4, lsl fp
   11b0c:	andeq	r1, r1, r4, lsl fp
   11b10:	andeq	r1, r1, r4, asr fp
   11b14:	movw	r0, #19732	; 0x4d14
   11b18:	mov	r1, r7
   11b1c:	mov	r6, r5
   11b20:	mov	r4, ip
   11b24:	mov	r5, lr
   11b28:	movt	r0, #1
   11b2c:	bl	13204 <__assert_fail@plt+0x2290>
   11b30:	str	r0, [sp, #76]	; 0x4c
   11b34:	movw	r0, #19734	; 0x4d16
   11b38:	mov	r1, r7
   11b3c:	movt	r0, #1
   11b40:	bl	13204 <__assert_fail@plt+0x2290>
   11b44:	mov	lr, r5
   11b48:	mov	r5, r6
   11b4c:	mov	ip, r4
   11b50:	str	r0, [sp, #80]	; 0x50
   11b54:	mov	r8, #0
   11b58:	tst	r9, #1
   11b5c:	str	lr, [sp, #44]	; 0x2c
   11b60:	bne	11b98 <__assert_fail@plt+0xc24>
   11b64:	ldr	r0, [sp, #76]	; 0x4c
   11b68:	ldrb	r0, [r0]
   11b6c:	cmp	r0, #0
   11b70:	beq	11b98 <__assert_fail@plt+0xc24>
   11b74:	ldr	r1, [sp, #76]	; 0x4c
   11b78:	mov	r8, #0
   11b7c:	add	r1, r1, #1
   11b80:	cmp	r8, ip
   11b84:	strbcc	r0, [r5, r8]
   11b88:	ldrb	r0, [r1, r8]
   11b8c:	add	r8, r8, #1
   11b90:	cmp	r0, #0
   11b94:	bne	11b80 <__assert_fail@plt+0xc0c>
   11b98:	ldr	r6, [sp, #80]	; 0x50
   11b9c:	mov	r4, ip
   11ba0:	mov	r0, r6
   11ba4:	bl	10ea8 <strlen@plt>
   11ba8:	mov	ip, r4
   11bac:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11bb0:	ldr	lr, [sp, #44]	; 0x2c
   11bb4:	str	r6, [fp, #-88]	; 0xffffffa8
   11bb8:	str	r0, [fp, #-72]	; 0xffffffb8
   11bbc:	mov	r2, #1
   11bc0:	mov	r6, r9
   11bc4:	mov	r3, sl
   11bc8:	b	11cd4 <__assert_fail@plt+0xd60>
   11bcc:	mov	r0, #1
   11bd0:	b	11c28 <__assert_fail@plt+0xcb4>
   11bd4:	mov	r7, #0
   11bd8:	mov	r8, #0
   11bdc:	mov	r2, r0
   11be0:	mov	r6, #0
   11be4:	b	11cd4 <__assert_fail@plt+0xd60>
   11be8:	tst	r9, #1
   11bec:	bne	11c28 <__assert_fail@plt+0xcb4>
   11bf0:	mov	r2, r0
   11bf4:	b	11c80 <__assert_fail@plt+0xd0c>
   11bf8:	mov	r0, #1
   11bfc:	mov	r8, #0
   11c00:	mov	r7, #5
   11c04:	mov	r2, #1
   11c08:	str	r0, [fp, #-72]	; 0xffffffb8
   11c0c:	movw	r0, #19730	; 0x4d12
   11c10:	movt	r0, #1
   11c14:	str	r0, [fp, #-88]	; 0xffffffa8
   11c18:	b	11c48 <__assert_fail@plt+0xcd4>
   11c1c:	mov	r2, #1
   11c20:	tst	r9, #1
   11c24:	beq	11c80 <__assert_fail@plt+0xd0c>
   11c28:	mov	r1, #1
   11c2c:	mov	r8, #0
   11c30:	mov	r7, #2
   11c34:	mov	r2, r0
   11c38:	str	r1, [fp, #-72]	; 0xffffffb8
   11c3c:	movw	r1, #19734	; 0x4d16
   11c40:	movt	r1, #1
   11c44:	str	r1, [fp, #-88]	; 0xffffffa8
   11c48:	mov	r6, #1
   11c4c:	b	11cd4 <__assert_fail@plt+0xd60>
   11c50:	tst	r9, #1
   11c54:	beq	11ca4 <__assert_fail@plt+0xd30>
   11c58:	mov	r0, #1
   11c5c:	mov	r8, #0
   11c60:	mov	r2, #1
   11c64:	mov	r6, #1
   11c68:	mov	r7, #5
   11c6c:	str	r0, [fp, #-72]	; 0xffffffb8
   11c70:	movw	r0, #19730	; 0x4d12
   11c74:	movt	r0, #1
   11c78:	str	r0, [fp, #-88]	; 0xffffffa8
   11c7c:	b	11cd4 <__assert_fail@plt+0xd60>
   11c80:	cmp	ip, #0
   11c84:	mov	r8, #1
   11c88:	mov	r6, #0
   11c8c:	mov	r7, #2
   11c90:	movne	r0, #39	; 0x27
   11c94:	strbne	r0, [r5]
   11c98:	movw	r0, #19734	; 0x4d16
   11c9c:	movt	r0, #1
   11ca0:	b	11cc8 <__assert_fail@plt+0xd54>
   11ca4:	cmp	ip, #0
   11ca8:	mov	r8, #1
   11cac:	mov	r2, #1
   11cb0:	mov	r7, #5
   11cb4:	mov	r6, #0
   11cb8:	movne	r0, #34	; 0x22
   11cbc:	strbne	r0, [r5]
   11cc0:	movw	r0, #19730	; 0x4d12
   11cc4:	movt	r0, #1
   11cc8:	str	r0, [fp, #-88]	; 0xffffffa8
   11ccc:	mov	r0, #1
   11cd0:	str	r0, [fp, #-72]	; 0xffffffb8
   11cd4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11cd8:	str	r7, [fp, #-68]	; 0xffffffbc
   11cdc:	str	r6, [fp, #-76]	; 0xffffffb4
   11ce0:	str	r2, [sp, #84]	; 0x54
   11ce4:	cmp	r0, #0
   11ce8:	movwne	r0, #1
   11cec:	and	r1, r0, r6
   11cf0:	and	r1, r2, r1
   11cf4:	str	r1, [sp, #48]	; 0x30
   11cf8:	sub	r1, r7, #2
   11cfc:	clz	r1, r1
   11d00:	lsr	r1, r1, #5
   11d04:	and	r1, r1, r6
   11d08:	str	r1, [sp, #64]	; 0x40
   11d0c:	subs	r1, r7, #2
   11d10:	eor	r7, r6, #1
   11d14:	movwne	r1, #1
   11d18:	str	r7, [sp, #92]	; 0x5c
   11d1c:	orr	r7, r1, r7
   11d20:	and	r1, r1, r2
   11d24:	and	r0, r0, r1
   11d28:	str	r7, [sp, #68]	; 0x44
   11d2c:	mov	r7, #0
   11d30:	str	r0, [fp, #-60]	; 0xffffffc4
   11d34:	orr	r0, r1, r6
   11d38:	ldr	r1, [fp, #16]
   11d3c:	eor	r0, r0, #1
   11d40:	clz	r1, r1
   11d44:	lsr	r1, r1, #5
   11d48:	orr	r0, r1, r0
   11d4c:	str	r0, [fp, #-64]	; 0xffffffc0
   11d50:	eor	r0, r2, #1
   11d54:	str	r0, [sp, #52]	; 0x34
   11d58:	cmn	r3, #1
   11d5c:	beq	11d6c <__assert_fail@plt+0xdf8>
   11d60:	cmp	r7, r3
   11d64:	bne	11d78 <__assert_fail@plt+0xe04>
   11d68:	b	128d4 <__assert_fail@plt+0x1960>
   11d6c:	ldrb	r0, [r4, r7]
   11d70:	cmp	r0, #0
   11d74:	beq	128dc <__assert_fail@plt+0x1968>
   11d78:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d7c:	cmp	r0, #0
   11d80:	beq	11dc8 <__assert_fail@plt+0xe54>
   11d84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d88:	add	r5, r7, r0
   11d8c:	cmp	r0, #2
   11d90:	bcc	11ddc <__assert_fail@plt+0xe68>
   11d94:	mov	r0, #0
   11d98:	cmn	r3, #1
   11d9c:	str	r0, [fp, #-56]	; 0xffffffc8
   11da0:	bne	11de4 <__assert_fail@plt+0xe70>
   11da4:	mov	r0, r4
   11da8:	mov	r4, ip
   11dac:	mov	r6, lr
   11db0:	bl	10ea8 <strlen@plt>
   11db4:	mov	ip, r4
   11db8:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11dbc:	mov	lr, r6
   11dc0:	mov	r3, r0
   11dc4:	b	11de4 <__assert_fail@plt+0xe70>
   11dc8:	mov	r0, #0
   11dcc:	mov	sl, r3
   11dd0:	str	r0, [fp, #-56]	; 0xffffffc8
   11dd4:	mov	r0, #0
   11dd8:	b	11e50 <__assert_fail@plt+0xedc>
   11ddc:	mov	r0, #0
   11de0:	str	r0, [fp, #-56]	; 0xffffffc8
   11de4:	cmp	r5, r3
   11de8:	bls	11dfc <__assert_fail@plt+0xe88>
   11dec:	ldr	r5, [fp, #-84]	; 0xffffffac
   11df0:	mov	r0, #0
   11df4:	mov	sl, r3
   11df8:	b	11e50 <__assert_fail@plt+0xedc>
   11dfc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11e00:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11e04:	add	r0, r4, r7
   11e08:	mov	r5, lr
   11e0c:	mov	r6, ip
   11e10:	mov	sl, r3
   11e14:	bl	10e9c <bcmp@plt>
   11e18:	ldr	r2, [sp, #92]	; 0x5c
   11e1c:	cmp	r0, #0
   11e20:	ldr	r3, [fp, #-84]	; 0xffffffac
   11e24:	mov	r1, r0
   11e28:	movwne	r1, #1
   11e2c:	orr	r1, r1, r2
   11e30:	tst	r1, #1
   11e34:	beq	12960 <__assert_fail@plt+0x19ec>
   11e38:	ldr	r4, [fp, #-80]	; 0xffffffb0
   11e3c:	clz	r0, r0
   11e40:	mov	lr, r5
   11e44:	mov	ip, r6
   11e48:	mov	r5, r3
   11e4c:	lsr	r0, r0, #5
   11e50:	str	r0, [fp, #-52]	; 0xffffffcc
   11e54:	ldrb	r6, [r4, r7]
   11e58:	cmp	r6, #126	; 0x7e
   11e5c:	bhi	12384 <__assert_fail@plt+0x1410>
   11e60:	add	r3, pc, #16
   11e64:	mov	r9, #1
   11e68:	mov	r2, #110	; 0x6e
   11e6c:	mov	r0, #97	; 0x61
   11e70:	mov	r1, #0
   11e74:	ldr	pc, [r3, r6, lsl #2]
   11e78:	andeq	r2, r1, r8, ror #3
   11e7c:	andeq	r2, r1, r4, lsl #7
   11e80:	andeq	r2, r1, r4, lsl #7
   11e84:	andeq	r2, r1, r4, lsl #7
   11e88:	andeq	r2, r1, r4, lsl #7
   11e8c:	andeq	r2, r1, r4, lsl #7
   11e90:	andeq	r2, r1, r4, lsl #7
   11e94:	andeq	r2, r1, r4, lsl #8
   11e98:	andeq	r2, r1, r8, asr #3
   11e9c:	andeq	r2, r1, r0, asr #3
   11ea0:	ldrdeq	r2, [r1], -r4
   11ea4:	andeq	r2, r1, ip, ror #5
   11ea8:			; <UNDEFINED> instruction: 0x000121b8
   11eac:	ldrdeq	r2, [r1], -r0
   11eb0:	andeq	r2, r1, r4, lsl #7
   11eb4:	andeq	r2, r1, r4, lsl #7
   11eb8:	andeq	r2, r1, r4, lsl #7
   11ebc:	andeq	r2, r1, r4, lsl #7
   11ec0:	andeq	r2, r1, r4, lsl #7
   11ec4:	andeq	r2, r1, r4, lsl #7
   11ec8:	andeq	r2, r1, r4, lsl #7
   11ecc:	andeq	r2, r1, r4, lsl #7
   11ed0:	andeq	r2, r1, r4, lsl #7
   11ed4:	andeq	r2, r1, r4, lsl #7
   11ed8:	andeq	r2, r1, r4, lsl #7
   11edc:	andeq	r2, r1, r4, lsl #7
   11ee0:	andeq	r2, r1, r4, lsl #7
   11ee4:	andeq	r2, r1, r4, lsl #7
   11ee8:	andeq	r2, r1, r4, lsl #7
   11eec:	andeq	r2, r1, r4, lsl #7
   11ef0:	andeq	r2, r1, r4, lsl #7
   11ef4:	andeq	r2, r1, r4, lsl #7
   11ef8:	andeq	r2, r1, r8, ror #2
   11efc:	andeq	r2, r1, ip, ror #2
   11f00:	andeq	r2, r1, ip, ror #2
   11f04:	andeq	r2, r1, r0, asr r1
   11f08:	andeq	r2, r1, ip, ror #2
   11f0c:	andeq	r2, r1, r4, ror r0
   11f10:	andeq	r2, r1, ip, ror #2
   11f14:	strdeq	r2, [r1], -r4
   11f18:	andeq	r2, r1, ip, ror #2
   11f1c:	andeq	r2, r1, ip, ror #2
   11f20:	andeq	r2, r1, ip, ror #2
   11f24:	andeq	r2, r1, r4, ror r0
   11f28:	andeq	r2, r1, r4, ror r0
   11f2c:	andeq	r2, r1, r4, ror r0
   11f30:	andeq	r2, r1, r4, ror r0
   11f34:	andeq	r2, r1, r4, ror r0
   11f38:	andeq	r2, r1, r4, ror r0
   11f3c:	andeq	r2, r1, r4, ror r0
   11f40:	andeq	r2, r1, r4, ror r0
   11f44:	andeq	r2, r1, r4, ror r0
   11f48:	andeq	r2, r1, r4, ror r0
   11f4c:	andeq	r2, r1, r4, ror r0
   11f50:	andeq	r2, r1, r4, ror r0
   11f54:	andeq	r2, r1, r4, ror r0
   11f58:	andeq	r2, r1, r4, ror r0
   11f5c:	andeq	r2, r1, r4, ror r0
   11f60:	andeq	r2, r1, r4, ror r0
   11f64:	andeq	r2, r1, ip, ror #2
   11f68:	andeq	r2, r1, ip, ror #2
   11f6c:	andeq	r2, r1, ip, ror #2
   11f70:	andeq	r2, r1, ip, ror #2
   11f74:	andeq	r2, r1, r0, asr #5
   11f78:	andeq	r2, r1, r4, lsl #7
   11f7c:	andeq	r2, r1, r4, ror r0
   11f80:	andeq	r2, r1, r4, ror r0
   11f84:	andeq	r2, r1, r4, ror r0
   11f88:	andeq	r2, r1, r4, ror r0
   11f8c:	andeq	r2, r1, r4, ror r0
   11f90:	andeq	r2, r1, r4, ror r0
   11f94:	andeq	r2, r1, r4, ror r0
   11f98:	andeq	r2, r1, r4, ror r0
   11f9c:	andeq	r2, r1, r4, ror r0
   11fa0:	andeq	r2, r1, r4, ror r0
   11fa4:	andeq	r2, r1, r4, ror r0
   11fa8:	andeq	r2, r1, r4, ror r0
   11fac:	andeq	r2, r1, r4, ror r0
   11fb0:	andeq	r2, r1, r4, ror r0
   11fb4:	andeq	r2, r1, r4, ror r0
   11fb8:	andeq	r2, r1, r4, ror r0
   11fbc:	andeq	r2, r1, r4, ror r0
   11fc0:	andeq	r2, r1, r4, ror r0
   11fc4:	andeq	r2, r1, r4, ror r0
   11fc8:	andeq	r2, r1, r4, ror r0
   11fcc:	andeq	r2, r1, r4, ror r0
   11fd0:	andeq	r2, r1, r4, ror r0
   11fd4:	andeq	r2, r1, r4, ror r0
   11fd8:	andeq	r2, r1, r4, ror r0
   11fdc:	andeq	r2, r1, r4, ror r0
   11fe0:	andeq	r2, r1, r4, ror r0
   11fe4:	andeq	r2, r1, ip, ror #2
   11fe8:	muleq	r1, r4, r1
   11fec:	andeq	r2, r1, r4, ror r0
   11ff0:	andeq	r2, r1, ip, ror #2
   11ff4:	andeq	r2, r1, r4, ror r0
   11ff8:	andeq	r2, r1, ip, ror #2
   11ffc:	andeq	r2, r1, r4, ror r0
   12000:	andeq	r2, r1, r4, ror r0
   12004:	andeq	r2, r1, r4, ror r0
   12008:	andeq	r2, r1, r4, ror r0
   1200c:	andeq	r2, r1, r4, ror r0
   12010:	andeq	r2, r1, r4, ror r0
   12014:	andeq	r2, r1, r4, ror r0
   12018:	andeq	r2, r1, r4, ror r0
   1201c:	andeq	r2, r1, r4, ror r0
   12020:	andeq	r2, r1, r4, ror r0
   12024:	andeq	r2, r1, r4, ror r0
   12028:	andeq	r2, r1, r4, ror r0
   1202c:	andeq	r2, r1, r4, ror r0
   12030:	andeq	r2, r1, r4, ror r0
   12034:	andeq	r2, r1, r4, ror r0
   12038:	andeq	r2, r1, r4, ror r0
   1203c:	andeq	r2, r1, r4, ror r0
   12040:	andeq	r2, r1, r4, ror r0
   12044:	andeq	r2, r1, r4, ror r0
   12048:	andeq	r2, r1, r4, ror r0
   1204c:	andeq	r2, r1, r4, ror r0
   12050:	andeq	r2, r1, r4, ror r0
   12054:	andeq	r2, r1, r4, ror r0
   12058:	andeq	r2, r1, r4, ror r0
   1205c:	andeq	r2, r1, r4, ror r0
   12060:	andeq	r2, r1, r4, ror r0
   12064:	andeq	r2, r1, r8, lsr #2
   12068:	andeq	r2, r1, ip, ror #2
   1206c:	andeq	r2, r1, r8, lsr #2
   12070:	andeq	r2, r1, r0, asr r1
   12074:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12078:	tst	r0, #1
   1207c:	bne	120a8 <__assert_fail@plt+0x1134>
   12080:	ldr	r1, [fp, #16]
   12084:	ubfx	r0, r6, #5, #3
   12088:	mov	r2, #1
   1208c:	ldr	r0, [r1, r0, lsl #2]
   12090:	and	r1, r6, #31
   12094:	tst	r0, r2, lsl r1
   12098:	beq	120a8 <__assert_fail@plt+0x1134>
   1209c:	mov	r0, r6
   120a0:	mov	r1, r9
   120a4:	b	120bc <__assert_fail@plt+0x1148>
   120a8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   120ac:	mov	r1, r9
   120b0:	cmp	r0, #0
   120b4:	mov	r0, r6
   120b8:	beq	12808 <__assert_fail@plt+0x1894>
   120bc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   120c0:	tst	r2, #1
   120c4:	bne	129a4 <__assert_fail@plt+0x1a30>
   120c8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   120cc:	subs	r2, r2, #2
   120d0:	movwne	r2, #1
   120d4:	orr	r2, r2, lr
   120d8:	tst	r2, #1
   120dc:	bne	12114 <__assert_fail@plt+0x11a0>
   120e0:	cmp	r8, ip
   120e4:	mov	lr, #1
   120e8:	movcc	r2, #39	; 0x27
   120ec:	strbcc	r2, [r5, r8]
   120f0:	add	r2, r8, #1
   120f4:	cmp	r2, ip
   120f8:	movcc	r3, #36	; 0x24
   120fc:	strbcc	r3, [r5, r2]
   12100:	add	r2, r8, #2
   12104:	add	r8, r8, #3
   12108:	cmp	r2, ip
   1210c:	movcc	r3, #39	; 0x27
   12110:	strbcc	r3, [r5, r2]
   12114:	cmp	r8, ip
   12118:	movcc	r2, #92	; 0x5c
   1211c:	strbcc	r2, [r5, r8]
   12120:	add	r8, r8, #1
   12124:	b	12848 <__assert_fail@plt+0x18d4>
   12128:	cmp	sl, #1
   1212c:	beq	12150 <__assert_fail@plt+0x11dc>
   12130:	mov	r9, #0
   12134:	cmn	sl, #1
   12138:	bne	1215c <__assert_fail@plt+0x11e8>
   1213c:	ldrb	r0, [r4, #1]
   12140:	cmp	r0, #0
   12144:	beq	12150 <__assert_fail@plt+0x11dc>
   12148:	mvn	sl, #0
   1214c:	b	1215c <__assert_fail@plt+0x11e8>
   12150:	mov	r9, #0
   12154:	cmp	r7, #0
   12158:	beq	12168 <__assert_fail@plt+0x11f4>
   1215c:	mov	r0, #0
   12160:	str	r0, [fp, #-56]	; 0xffffffc8
   12164:	b	12074 <__assert_fail@plt+0x1100>
   12168:	mov	r1, #1
   1216c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12170:	cmp	r0, #2
   12174:	bne	1218c <__assert_fail@plt+0x1218>
   12178:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1217c:	mov	r9, r1
   12180:	tst	r0, #1
   12184:	beq	12074 <__assert_fail@plt+0x1100>
   12188:	b	129a4 <__assert_fail@plt+0x1a30>
   1218c:	mov	r9, r1
   12190:	b	12074 <__assert_fail@plt+0x1100>
   12194:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12198:	cmp	r0, #2
   1219c:	bne	123e0 <__assert_fail@plt+0x146c>
   121a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121a4:	tst	r0, #1
   121a8:	bne	129a4 <__assert_fail@plt+0x1a30>
   121ac:	mov	r0, #0
   121b0:	str	r0, [fp, #-56]	; 0xffffffc8
   121b4:	b	123f8 <__assert_fail@plt+0x1484>
   121b8:	mov	r0, #102	; 0x66
   121bc:	b	12404 <__assert_fail@plt+0x1490>
   121c0:	mov	r2, #116	; 0x74
   121c4:	b	121d4 <__assert_fail@plt+0x1260>
   121c8:	mov	r0, #98	; 0x62
   121cc:	b	12404 <__assert_fail@plt+0x1490>
   121d0:	mov	r2, #114	; 0x72
   121d4:	ldr	r0, [sp, #68]	; 0x44
   121d8:	tst	r0, #1
   121dc:	mov	r0, r2
   121e0:	bne	12404 <__assert_fail@plt+0x1490>
   121e4:	b	129a4 <__assert_fail@plt+0x1a30>
   121e8:	ldr	r0, [sp, #84]	; 0x54
   121ec:	tst	r0, #1
   121f0:	beq	12424 <__assert_fail@plt+0x14b0>
   121f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   121f8:	tst	r0, #1
   121fc:	bne	12a90 <__assert_fail@plt+0x1b1c>
   12200:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12204:	mov	r2, sl
   12208:	subs	r0, r0, #2
   1220c:	movwne	r0, #1
   12210:	orr	r0, r0, lr
   12214:	tst	r0, #1
   12218:	bne	12250 <__assert_fail@plt+0x12dc>
   1221c:	cmp	r8, ip
   12220:	mov	lr, #1
   12224:	movcc	r0, #39	; 0x27
   12228:	strbcc	r0, [r5, r8]
   1222c:	add	r0, r8, #1
   12230:	cmp	r0, ip
   12234:	movcc	r1, #36	; 0x24
   12238:	strbcc	r1, [r5, r0]
   1223c:	add	r0, r8, #2
   12240:	add	r8, r8, #3
   12244:	cmp	r0, ip
   12248:	movcc	r1, #39	; 0x27
   1224c:	strbcc	r1, [r5, r0]
   12250:	mov	r1, #1
   12254:	cmp	r8, ip
   12258:	mov	r9, #0
   1225c:	mov	r6, #48	; 0x30
   12260:	str	r1, [fp, #-56]	; 0xffffffc8
   12264:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12268:	movcc	r0, #92	; 0x5c
   1226c:	strbcc	r0, [r5, r8]
   12270:	add	r0, r8, #1
   12274:	cmp	r1, #2
   12278:	beq	12580 <__assert_fail@plt+0x160c>
   1227c:	add	r1, r7, #1
   12280:	cmp	r1, r2
   12284:	bcs	12580 <__assert_fail@plt+0x160c>
   12288:	ldrb	r1, [r4, r1]
   1228c:	sub	r1, r1, #48	; 0x30
   12290:	uxtb	r1, r1
   12294:	cmp	r1, #9
   12298:	bhi	12580 <__assert_fail@plt+0x160c>
   1229c:	cmp	r0, ip
   122a0:	movcc	r1, #48	; 0x30
   122a4:	strbcc	r1, [r5, r0]
   122a8:	add	r0, r8, #2
   122ac:	add	r8, r8, #3
   122b0:	cmp	r0, ip
   122b4:	movcc	r1, #48	; 0x30
   122b8:	strbcc	r1, [r5, r0]
   122bc:	b	12074 <__assert_fail@plt+0x1100>
   122c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122c4:	mov	r6, #63	; 0x3f
   122c8:	cmp	r0, #5
   122cc:	beq	12588 <__assert_fail@plt+0x1614>
   122d0:	mov	r1, #0
   122d4:	cmp	r0, #2
   122d8:	str	r1, [fp, #-56]	; 0xffffffc8
   122dc:	bne	1263c <__assert_fail@plt+0x16c8>
   122e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122e4:	mov	r9, #0
   122e8:	b	12180 <__assert_fail@plt+0x120c>
   122ec:	mov	r0, #118	; 0x76
   122f0:	b	12404 <__assert_fail@plt+0x1490>
   122f4:	mov	r0, #1
   122f8:	mov	r6, #39	; 0x27
   122fc:	str	r0, [sp, #60]	; 0x3c
   12300:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12304:	cmp	r0, #2
   12308:	bne	1237c <__assert_fail@plt+0x1408>
   1230c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12310:	tst	r0, #1
   12314:	bne	129a4 <__assert_fail@plt+0x1a30>
   12318:	ldr	r2, [sp, #56]	; 0x38
   1231c:	clz	r1, ip
   12320:	mov	lr, #0
   12324:	lsr	r1, r1, #5
   12328:	cmp	r2, #0
   1232c:	mov	r0, r2
   12330:	movwne	r0, #1
   12334:	orrs	r0, r0, r1
   12338:	moveq	r2, ip
   1233c:	moveq	ip, r0
   12340:	cmp	r8, ip
   12344:	str	r2, [sp, #56]	; 0x38
   12348:	movcc	r0, #39	; 0x27
   1234c:	strbcc	r0, [r5, r8]
   12350:	add	r0, r8, #1
   12354:	cmp	r0, ip
   12358:	movcc	r1, #92	; 0x5c
   1235c:	strbcc	r1, [r5, r0]
   12360:	add	r0, r8, #2
   12364:	add	r8, r8, #3
   12368:	cmp	r0, ip
   1236c:	movcc	r1, #39	; 0x27
   12370:	strbcc	r1, [r5, r0]
   12374:	mov	r0, #0
   12378:	str	r0, [fp, #-56]	; 0xffffffc8
   1237c:	mov	r9, #1
   12380:	b	12074 <__assert_fail@plt+0x1100>
   12384:	ldr	r0, [sp, #40]	; 0x28
   12388:	str	lr, [sp, #44]	; 0x2c
   1238c:	str	ip, [sp, #88]	; 0x58
   12390:	cmp	r0, #1
   12394:	bne	12444 <__assert_fail@plt+0x14d0>
   12398:	str	sl, [sp, #36]	; 0x24
   1239c:	bl	10e84 <__ctype_b_loc@plt>
   123a0:	ldr	r0, [r0]
   123a4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   123a8:	mov	r1, #1
   123ac:	add	r0, r0, r6, lsl #1
   123b0:	ldrb	r0, [r0, #1]
   123b4:	ubfx	r9, r0, #6, #1
   123b8:	ldr	r0, [sp, #52]	; 0x34
   123bc:	ldr	lr, [sp, #44]	; 0x2c
   123c0:	cmp	r1, #1
   123c4:	orr	r3, r9, r0
   123c8:	bhi	12644 <__assert_fail@plt+0x16d0>
   123cc:	tst	r3, #1
   123d0:	beq	12644 <__assert_fail@plt+0x16d0>
   123d4:	ldr	sl, [sp, #36]	; 0x24
   123d8:	ldr	ip, [sp, #88]	; 0x58
   123dc:	b	12074 <__assert_fail@plt+0x1100>
   123e0:	ldr	r1, [sp, #48]	; 0x30
   123e4:	mov	r0, #0
   123e8:	str	r0, [fp, #-56]	; 0xffffffc8
   123ec:	mov	r0, #92	; 0x5c
   123f0:	cmp	r1, #0
   123f4:	beq	12404 <__assert_fail@plt+0x1490>
   123f8:	mov	r6, #92	; 0x5c
   123fc:	mov	r9, #0
   12400:	b	12808 <__assert_fail@plt+0x1894>
   12404:	mov	r1, #0
   12408:	mov	r9, #0
   1240c:	str	r1, [fp, #-56]	; 0xffffffc8
   12410:	ldr	r1, [sp, #84]	; 0x54
   12414:	tst	r1, #1
   12418:	mov	r1, #0
   1241c:	beq	12074 <__assert_fail@plt+0x1100>
   12420:	b	120bc <__assert_fail@plt+0x1148>
   12424:	ldr	r0, [sp, #32]
   12428:	mov	r6, #0
   1242c:	mov	r9, #0
   12430:	cmp	r0, #0
   12434:	mov	r0, #0
   12438:	str	r0, [fp, #-56]	; 0xffffffc8
   1243c:	beq	12074 <__assert_fail@plt+0x1100>
   12440:	b	12860 <__assert_fail@plt+0x18ec>
   12444:	mov	r0, #0
   12448:	cmn	sl, #1
   1244c:	sub	r3, fp, #40	; 0x28
   12450:	str	r0, [fp, #-36]	; 0xffffffdc
   12454:	str	r0, [fp, #-40]	; 0xffffffd8
   12458:	bne	12470 <__assert_fail@plt+0x14fc>
   1245c:	mov	r0, r4
   12460:	bl	10ea8 <strlen@plt>
   12464:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12468:	sub	r3, fp, #40	; 0x28
   1246c:	mov	sl, r0
   12470:	ldr	r0, [sp, #72]	; 0x48
   12474:	mov	r9, #1
   12478:	mov	r1, #0
   1247c:	str	sl, [sp, #36]	; 0x24
   12480:	add	r0, r0, r7
   12484:	str	r0, [sp, #20]
   12488:	add	r0, r1, r7
   1248c:	str	r1, [sp, #24]
   12490:	add	r1, r4, r0
   12494:	mov	r4, r0
   12498:	sub	r2, sl, r0
   1249c:	sub	r0, fp, #44	; 0x2c
   124a0:	bl	144f0 <__assert_fail@plt+0x357c>
   124a4:	cmp	r0, #0
   124a8:	beq	128b4 <__assert_fail@plt+0x1940>
   124ac:	cmn	r0, #1
   124b0:	beq	1286c <__assert_fail@plt+0x18f8>
   124b4:	ldr	r2, [sp, #36]	; 0x24
   124b8:	cmn	r0, #2
   124bc:	beq	12874 <__assert_fail@plt+0x1900>
   124c0:	ldr	r2, [sp, #64]	; 0x40
   124c4:	ldr	ip, [sp, #88]	; 0x58
   124c8:	ldr	r4, [sp, #84]	; 0x54
   124cc:	ldr	lr, [fp, #-48]	; 0xffffffd0
   124d0:	cmp	r0, #2
   124d4:	mov	r1, #0
   124d8:	movwcc	r1, #1
   124dc:	eor	r2, r2, #1
   124e0:	orrs	r1, r2, r1
   124e4:	bne	12534 <__assert_fail@plt+0x15c0>
   124e8:	ldr	r1, [sp, #24]
   124ec:	ldr	r2, [sp, #20]
   124f0:	add	r1, r2, r1
   124f4:	sub	r2, r0, #1
   124f8:	ldrb	r3, [r1]
   124fc:	sub	r5, r3, #94	; 0x5e
   12500:	cmp	r5, #30
   12504:	bhi	1251c <__assert_fail@plt+0x15a8>
   12508:	mov	r4, #1
   1250c:	mov	sl, #1073741829	; 0x40000005
   12510:	tst	sl, r4, lsl r5
   12514:	ldr	r4, [sp, #84]	; 0x54
   12518:	bne	1297c <__assert_fail@plt+0x1a08>
   1251c:	sub	r3, r3, #91	; 0x5b
   12520:	cmp	r3, #2
   12524:	bcc	1297c <__assert_fail@plt+0x1a08>
   12528:	add	r1, r1, #1
   1252c:	subs	r2, r2, #1
   12530:	bne	124f8 <__assert_fail@plt+0x1584>
   12534:	ldr	r5, [sp, #24]
   12538:	str	lr, [fp, #-48]	; 0xffffffd0
   1253c:	add	r5, r0, r5
   12540:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12544:	bl	10de8 <iswprint@plt>
   12548:	cmp	r0, #0
   1254c:	sub	r4, fp, #40	; 0x28
   12550:	movwne	r0, #1
   12554:	and	r9, r9, r0
   12558:	mov	r0, r4
   1255c:	bl	10dac <mbsinit@plt>
   12560:	mov	r1, r5
   12564:	mov	r3, r4
   12568:	ldr	sl, [sp, #36]	; 0x24
   1256c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12570:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12574:	cmp	r0, #0
   12578:	beq	12488 <__assert_fail@plt+0x1514>
   1257c:	b	123b8 <__assert_fail@plt+0x1444>
   12580:	mov	r8, r0
   12584:	b	12074 <__assert_fail@plt+0x1100>
   12588:	mov	r0, #0
   1258c:	str	r0, [fp, #-56]	; 0xffffffc8
   12590:	ldr	r0, [sp, #28]
   12594:	cmp	r0, #0
   12598:	beq	1263c <__assert_fail@plt+0x16c8>
   1259c:	add	r0, r7, #2
   125a0:	mov	r1, sl
   125a4:	cmp	r0, sl
   125a8:	bcs	1263c <__assert_fail@plt+0x16c8>
   125ac:	add	r1, r7, r4
   125b0:	ldrb	r1, [r1, #1]
   125b4:	cmp	r1, #63	; 0x3f
   125b8:	bne	1263c <__assert_fail@plt+0x16c8>
   125bc:	ldrb	r9, [r4, r0]
   125c0:	sub	r2, r9, #33	; 0x21
   125c4:	cmp	r2, #29
   125c8:	bhi	1263c <__assert_fail@plt+0x16c8>
   125cc:	mov	r1, r4
   125d0:	movw	r4, #20929	; 0x51c1
   125d4:	mov	r3, #1
   125d8:	movt	r4, #14336	; 0x3800
   125dc:	tst	r4, r3, lsl r2
   125e0:	beq	128c8 <__assert_fail@plt+0x1954>
   125e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   125e8:	tst	r2, #1
   125ec:	bne	12a98 <__assert_fail@plt+0x1b24>
   125f0:	cmp	r8, ip
   125f4:	mov	r4, r1
   125f8:	mov	r7, r0
   125fc:	mov	r6, r9
   12600:	movcc	r2, #63	; 0x3f
   12604:	strbcc	r2, [r5, r8]
   12608:	add	r2, r8, #1
   1260c:	cmp	r2, ip
   12610:	movcc	r3, #34	; 0x22
   12614:	strbcc	r3, [r5, r2]
   12618:	add	r2, r8, #2
   1261c:	cmp	r2, ip
   12620:	movcc	r3, #34	; 0x22
   12624:	strbcc	r3, [r5, r2]
   12628:	add	r2, r8, #3
   1262c:	add	r8, r8, #4
   12630:	cmp	r2, ip
   12634:	movcc	r3, #63	; 0x3f
   12638:	strbcc	r3, [r5, r2]
   1263c:	mov	r9, #0
   12640:	b	12074 <__assert_fail@plt+0x1100>
   12644:	ldr	sl, [sp, #36]	; 0x24
   12648:	add	r0, r1, r7
   1264c:	mov	r2, #0
   12650:	str	r3, [sp, #24]
   12654:	str	r0, [fp, #-56]	; 0xffffffc8
   12658:	tst	r3, #1
   1265c:	beq	12688 <__assert_fail@plt+0x1714>
   12660:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12664:	tst	r0, #1
   12668:	beq	12750 <__assert_fail@plt+0x17dc>
   1266c:	ldr	r1, [sp, #88]	; 0x58
   12670:	mov	r0, r3
   12674:	cmp	r8, r1
   12678:	movcc	r1, #92	; 0x5c
   1267c:	strbcc	r1, [r5, r8]
   12680:	add	r8, r8, #1
   12684:	b	12754 <__assert_fail@plt+0x17e0>
   12688:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1268c:	tst	r1, #1
   12690:	bne	129a0 <__assert_fail@plt+0x1a2c>
   12694:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12698:	subs	r2, r1, #2
   1269c:	movwne	r2, #1
   126a0:	orr	r2, r2, lr
   126a4:	tst	r2, #1
   126a8:	bne	126ec <__assert_fail@plt+0x1778>
   126ac:	ldr	r1, [sp, #88]	; 0x58
   126b0:	add	r2, r8, #1
   126b4:	mov	lr, #1
   126b8:	cmp	r8, r1
   126bc:	movcc	r1, #39	; 0x27
   126c0:	strbcc	r1, [r5, r8]
   126c4:	ldr	r1, [sp, #88]	; 0x58
   126c8:	cmp	r2, r1
   126cc:	movcc	r1, #36	; 0x24
   126d0:	strbcc	r1, [r5, r2]
   126d4:	ldr	r1, [sp, #88]	; 0x58
   126d8:	add	r2, r8, #2
   126dc:	add	r8, r8, #3
   126e0:	cmp	r2, r1
   126e4:	movcc	r1, #39	; 0x27
   126e8:	strbcc	r1, [r5, r2]
   126ec:	ldr	r1, [sp, #88]	; 0x58
   126f0:	add	r2, r8, #1
   126f4:	mov	r0, r3
   126f8:	cmp	r8, r1
   126fc:	movcc	r1, #92	; 0x5c
   12700:	strbcc	r1, [r5, r8]
   12704:	ldr	r1, [sp, #88]	; 0x58
   12708:	cmp	r2, r1
   1270c:	bcs	12720 <__assert_fail@plt+0x17ac>
   12710:	uxtb	r3, r6
   12714:	mov	r1, #48	; 0x30
   12718:	orr	r3, r1, r3, lsr #6
   1271c:	strb	r3, [r5, r2]
   12720:	ldr	r1, [sp, #88]	; 0x58
   12724:	add	r2, r8, #2
   12728:	add	r8, r8, #3
   1272c:	cmp	r2, r1
   12730:	lsrcc	r3, r6, #3
   12734:	movcc	r1, #6
   12738:	bficc	r3, r1, #3, #29
   1273c:	mov	r1, #6
   12740:	bfi	r6, r1, #3, #29
   12744:	strbcc	r3, [r5, r2]
   12748:	mov	r2, #1
   1274c:	b	1275c <__assert_fail@plt+0x17e8>
   12750:	mov	r0, r3
   12754:	mov	r1, #0
   12758:	str	r1, [fp, #-52]	; 0xffffffcc
   1275c:	mov	ip, r2
   12760:	and	r1, r2, #1
   12764:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12768:	add	r3, r7, #1
   1276c:	cmp	r2, r3
   12770:	bls	127f8 <__assert_fail@plt+0x1884>
   12774:	cmp	r1, #0
   12778:	mvn	r5, lr
   1277c:	movwne	r1, #1
   12780:	orr	r5, r5, r1
   12784:	tst	r5, #1
   12788:	bne	127cc <__assert_fail@plt+0x1858>
   1278c:	ldr	r1, [sp, #88]	; 0x58
   12790:	ldr	r5, [fp, #-84]	; 0xffffffac
   12794:	mov	r2, r4
   12798:	ldr	r4, [sp, #88]	; 0x58
   1279c:	ldr	r0, [sp, #24]
   127a0:	mov	lr, #0
   127a4:	cmp	r8, r1
   127a8:	movcc	r1, #39	; 0x27
   127ac:	strbcc	r1, [r5, r8]
   127b0:	add	r1, r8, #1
   127b4:	add	r8, r8, #2
   127b8:	cmp	r1, r4
   127bc:	movcc	r4, #39	; 0x27
   127c0:	strbcc	r4, [r5, r1]
   127c4:	mov	r4, r2
   127c8:	b	127d0 <__assert_fail@plt+0x185c>
   127cc:	ldr	r5, [fp, #-84]	; 0xffffffac
   127d0:	ldr	r1, [sp, #88]	; 0x58
   127d4:	mov	r2, ip
   127d8:	cmp	r8, r1
   127dc:	ldr	r1, [sp, #72]	; 0x48
   127e0:	strbcc	r6, [r5, r8]
   127e4:	add	r8, r8, #1
   127e8:	ldrb	r6, [r1, r7]
   127ec:	mov	r7, r3
   127f0:	mov	r3, r0
   127f4:	b	12658 <__assert_fail@plt+0x16e4>
   127f8:	ldr	ip, [sp, #88]	; 0x58
   127fc:	cmp	r1, #0
   12800:	movwne	r1, #1
   12804:	str	r1, [fp, #-56]	; 0xffffffc8
   12808:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1280c:	cmp	r0, #0
   12810:	bne	12840 <__assert_fail@plt+0x18cc>
   12814:	tst	lr, #1
   12818:	beq	12840 <__assert_fail@plt+0x18cc>
   1281c:	cmp	r8, ip
   12820:	mov	lr, #0
   12824:	movcc	r0, #39	; 0x27
   12828:	strbcc	r0, [r5, r8]
   1282c:	add	r0, r8, #1
   12830:	add	r8, r8, #2
   12834:	cmp	r0, ip
   12838:	movcc	r1, #39	; 0x27
   1283c:	strbcc	r1, [r5, r0]
   12840:	mov	r1, r9
   12844:	mov	r0, r6
   12848:	cmp	r8, ip
   1284c:	strbcc	r0, [r5, r8]
   12850:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12854:	add	r8, r8, #1
   12858:	and	r0, r0, r1
   1285c:	str	r0, [fp, #-48]	; 0xffffffd0
   12860:	mov	r3, sl
   12864:	add	r7, r7, #1
   12868:	b	11d58 <__assert_fail@plt+0xde4>
   1286c:	mov	r9, #0
   12870:	b	128b4 <__assert_fail@plt+0x1940>
   12874:	mov	r9, #0
   12878:	cmp	r2, r4
   1287c:	bls	128b4 <__assert_fail@plt+0x1940>
   12880:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12884:	ldr	r1, [sp, #24]
   12888:	add	r0, r4, r7
   1288c:	mov	r3, r1
   12890:	ldrb	r1, [r0, r1]
   12894:	cmp	r1, #0
   12898:	beq	128c0 <__assert_fail@plt+0x194c>
   1289c:	add	r3, r3, #1
   128a0:	add	r1, r7, r3
   128a4:	cmp	r1, r2
   128a8:	mov	r1, r3
   128ac:	bcc	1288c <__assert_fail@plt+0x1918>
   128b0:	b	123b8 <__assert_fail@plt+0x1444>
   128b4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   128b8:	ldr	r1, [sp, #24]
   128bc:	b	123b8 <__assert_fail@plt+0x1444>
   128c0:	mov	r1, r3
   128c4:	b	123b8 <__assert_fail@plt+0x1444>
   128c8:	mov	r9, #0
   128cc:	mov	r4, r1
   128d0:	b	12074 <__assert_fail@plt+0x1100>
   128d4:	mov	sl, r7
   128d8:	b	128e0 <__assert_fail@plt+0x196c>
   128dc:	mvn	sl, #0
   128e0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128e8:	eor	r0, r1, #2
   128ec:	orr	r0, r0, r8
   128f0:	clz	r0, r0
   128f4:	lsr	r0, r0, #5
   128f8:	tst	r2, r0
   128fc:	bne	129a4 <__assert_fail@plt+0x1a30>
   12900:	subs	r0, r1, #2
   12904:	movwne	r0, #1
   12908:	orr	r0, r2, r0
   1290c:	tst	r0, #1
   12910:	ldreq	r0, [sp, #60]	; 0x3c
   12914:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   12918:	eoreq	r0, r0, #1
   1291c:	tsteq	r0, #1
   12920:	bne	12a38 <__assert_fail@plt+0x1ac4>
   12924:	tst	r1, #1
   12928:	bne	12a04 <__assert_fail@plt+0x1a90>
   1292c:	ldr	r6, [sp, #56]	; 0x38
   12930:	mov	r9, #0
   12934:	cmp	r6, #0
   12938:	beq	12a30 <__assert_fail@plt+0x1abc>
   1293c:	ldr	r0, [sp, #84]	; 0x54
   12940:	mov	r1, #0
   12944:	mov	r7, #2
   12948:	cmp	ip, #0
   1294c:	str	r1, [fp, #-48]	; 0xffffffd0
   12950:	mov	r1, #0
   12954:	str	r1, [fp, #-76]	; 0xffffffb4
   12958:	beq	11ac0 <__assert_fail@plt+0xb4c>
   1295c:	b	12a38 <__assert_fail@plt+0x1ac4>
   12960:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12964:	ldr	r1, [fp, #12]
   12968:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1296c:	mov	r5, r3
   12970:	mov	ip, r6
   12974:	mov	r3, sl
   12978:	b	129c8 <__assert_fail@plt+0x1a54>
   1297c:	tst	r4, #1
   12980:	ldr	r5, [fp, #-84]	; 0xffffffac
   12984:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12988:	ldr	r1, [fp, #12]
   1298c:	ldr	r3, [sp, #36]	; 0x24
   12990:	mov	r0, #2
   12994:	movwne	r0, #4
   12998:	mov	r2, r0
   1299c:	b	129c8 <__assert_fail@plt+0x1a54>
   129a0:	ldr	ip, [sp, #88]	; 0x58
   129a4:	ldr	r1, [sp, #84]	; 0x54
   129a8:	mov	r0, #2
   129ac:	tst	r1, #1
   129b0:	movwne	r0, #4
   129b4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   129b8:	ldr	r1, [fp, #12]
   129bc:	mov	r3, sl
   129c0:	cmp	r2, #2
   129c4:	moveq	r2, r0
   129c8:	mov	r0, #0
   129cc:	bic	r1, r1, #2
   129d0:	str	r2, [sp]
   129d4:	mov	r2, r4
   129d8:	str	r0, [sp, #8]
   129dc:	ldr	r0, [sp, #76]	; 0x4c
   129e0:	str	r1, [sp, #4]
   129e4:	mov	r1, ip
   129e8:	str	r0, [sp, #12]
   129ec:	ldr	r0, [sp, #80]	; 0x50
   129f0:	str	r0, [sp, #16]
   129f4:	mov	r0, r5
   129f8:	bl	11a34 <__assert_fail@plt+0xac0>
   129fc:	mov	r8, r0
   12a00:	b	12a84 <__assert_fail@plt+0x1b10>
   12a04:	mov	r0, #5
   12a08:	ldr	r1, [sp, #56]	; 0x38
   12a0c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12a10:	mov	r3, sl
   12a14:	str	r0, [sp]
   12a18:	ldr	r0, [fp, #12]
   12a1c:	str	r0, [sp, #4]
   12a20:	ldr	r0, [fp, #16]
   12a24:	str	r0, [sp, #8]
   12a28:	ldr	r0, [sp, #76]	; 0x4c
   12a2c:	b	129e8 <__assert_fail@plt+0x1a74>
   12a30:	mov	r0, #0
   12a34:	str	r0, [fp, #-76]	; 0xffffffb4
   12a38:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12a3c:	cmp	r1, #0
   12a40:	beq	12a78 <__assert_fail@plt+0x1b04>
   12a44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a48:	tst	r0, #1
   12a4c:	bne	12a78 <__assert_fail@plt+0x1b04>
   12a50:	ldrb	r0, [r1]
   12a54:	cmp	r0, #0
   12a58:	beq	12a78 <__assert_fail@plt+0x1b04>
   12a5c:	add	r1, r1, #1
   12a60:	cmp	r8, ip
   12a64:	strbcc	r0, [r5, r8]
   12a68:	add	r8, r8, #1
   12a6c:	ldrb	r0, [r1], #1
   12a70:	cmp	r0, #0
   12a74:	bne	12a60 <__assert_fail@plt+0x1aec>
   12a78:	cmp	r8, ip
   12a7c:	movcc	r0, #0
   12a80:	strbcc	r0, [r5, r8]
   12a84:	mov	r0, r8
   12a88:	sub	sp, fp, #28
   12a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a90:	mov	r0, #4
   12a94:	b	129b4 <__assert_fail@plt+0x1a40>
   12a98:	mov	r4, r1
   12a9c:	b	129a4 <__assert_fail@plt+0x1a30>
   12aa0:	bl	10f68 <abort@plt>
   12aa4:	mov	r3, r2
   12aa8:	mov	r2, #0
   12aac:	b	12ab0 <__assert_fail@plt+0x1b3c>
   12ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab4:	add	fp, sp, #28
   12ab8:	sub	sp, sp, #36	; 0x24
   12abc:	movw	r8, #24912	; 0x6150
   12ac0:	cmp	r3, #0
   12ac4:	mov	r4, r2
   12ac8:	str	r2, [sp, #24]
   12acc:	mov	r5, r1
   12ad0:	mov	r6, r0
   12ad4:	str	r0, [sp, #20]
   12ad8:	movt	r8, #2
   12adc:	movne	r8, r3
   12ae0:	bl	10ec0 <__errno_location@plt>
   12ae4:	str	r0, [sp, #28]
   12ae8:	ldr	r1, [r8, #40]	; 0x28
   12aec:	ldr	r2, [r8, #44]	; 0x2c
   12af0:	ldr	r7, [r0]
   12af4:	cmp	r4, #0
   12af8:	add	sl, r8, #8
   12afc:	mov	r0, #0
   12b00:	ldm	r8, {r3, r9}
   12b04:	orreq	r9, r9, #1
   12b08:	stm	sp, {r3, r9, sl}
   12b0c:	str	r1, [sp, #12]
   12b10:	str	r2, [sp, #16]
   12b14:	mov	r1, #0
   12b18:	mov	r2, r6
   12b1c:	mov	r3, r5
   12b20:	str	r7, [sp, #32]
   12b24:	mov	r7, r5
   12b28:	bl	11a34 <__assert_fail@plt+0xac0>
   12b2c:	add	r4, r0, #1
   12b30:	mov	r5, r0
   12b34:	mov	r0, r4
   12b38:	bl	13828 <__assert_fail@plt+0x28b4>
   12b3c:	mov	r6, r0
   12b40:	ldr	r0, [r8]
   12b44:	ldr	r2, [r8, #44]	; 0x2c
   12b48:	ldr	r1, [r8, #40]	; 0x28
   12b4c:	mov	r3, r7
   12b50:	stm	sp, {r0, r9, sl}
   12b54:	str	r2, [sp, #16]
   12b58:	ldr	r2, [sp, #20]
   12b5c:	str	r1, [sp, #12]
   12b60:	mov	r0, r6
   12b64:	mov	r1, r4
   12b68:	bl	11a34 <__assert_fail@plt+0xac0>
   12b6c:	ldr	r0, [sp, #24]
   12b70:	ldr	r1, [sp, #32]
   12b74:	ldr	r2, [sp, #28]
   12b78:	cmp	r0, #0
   12b7c:	str	r1, [r2]
   12b80:	strne	r5, [r0]
   12b84:	mov	r0, r6
   12b88:	sub	sp, fp, #28
   12b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b94:	add	fp, sp, #24
   12b98:	movw	r5, #24804	; 0x60e4
   12b9c:	movw	r8, #24800	; 0x60e0
   12ba0:	movt	r5, #2
   12ba4:	movt	r8, #2
   12ba8:	ldr	r0, [r5]
   12bac:	ldr	r4, [r8]
   12bb0:	cmp	r0, #2
   12bb4:	blt	12be0 <__assert_fail@plt+0x1c6c>
   12bb8:	add	r7, r4, #12
   12bbc:	mov	r6, #0
   12bc0:	ldr	r0, [r7, r6, lsl #3]
   12bc4:	bl	143ec <__assert_fail@plt+0x3478>
   12bc8:	ldr	r1, [r5]
   12bcc:	add	r2, r6, #2
   12bd0:	add	r0, r6, #1
   12bd4:	mov	r6, r0
   12bd8:	cmp	r2, r1
   12bdc:	blt	12bc0 <__assert_fail@plt+0x1c4c>
   12be0:	ldr	r0, [r4, #4]
   12be4:	movw	r9, #24960	; 0x6180
   12be8:	movw	r7, #24808	; 0x60e8
   12bec:	movt	r9, #2
   12bf0:	movt	r7, #2
   12bf4:	cmp	r0, r9
   12bf8:	beq	12c08 <__assert_fail@plt+0x1c94>
   12bfc:	bl	143ec <__assert_fail@plt+0x3478>
   12c00:	mov	r0, #256	; 0x100
   12c04:	stm	r7, {r0, r9}
   12c08:	cmp	r4, r7
   12c0c:	beq	12c1c <__assert_fail@plt+0x1ca8>
   12c10:	mov	r0, r4
   12c14:	bl	143ec <__assert_fail@plt+0x3478>
   12c18:	str	r7, [r8]
   12c1c:	mov	r0, #1
   12c20:	str	r0, [r5]
   12c24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c28:	movw	r3, #24912	; 0x6150
   12c2c:	mvn	r2, #0
   12c30:	movt	r3, #2
   12c34:	b	12c38 <__assert_fail@plt+0x1cc4>
   12c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c3c:	add	fp, sp, #28
   12c40:	sub	sp, sp, #44	; 0x2c
   12c44:	mov	r7, r3
   12c48:	str	r2, [sp, #36]	; 0x24
   12c4c:	str	r1, [sp, #32]
   12c50:	mov	r5, r0
   12c54:	bl	10ec0 <__errno_location@plt>
   12c58:	cmp	r5, #0
   12c5c:	bmi	12dcc <__assert_fail@plt+0x1e58>
   12c60:	cmn	r5, #-2147483647	; 0x80000001
   12c64:	beq	12dcc <__assert_fail@plt+0x1e58>
   12c68:	movw	r8, #24804	; 0x60e4
   12c6c:	movw	r4, #24800	; 0x60e0
   12c70:	str	r0, [sp, #28]
   12c74:	ldr	r0, [r0]
   12c78:	movt	r8, #2
   12c7c:	movt	r4, #2
   12c80:	ldr	r1, [r8]
   12c84:	ldr	r6, [r4]
   12c88:	str	r0, [sp, #24]
   12c8c:	cmp	r1, r5
   12c90:	ble	12c9c <__assert_fail@plt+0x1d28>
   12c94:	mov	sl, r6
   12c98:	b	12d08 <__assert_fail@plt+0x1d94>
   12c9c:	movw	r9, #24808	; 0x60e8
   12ca0:	mov	r0, #8
   12ca4:	str	r1, [fp, #-32]	; 0xffffffe0
   12ca8:	sub	r1, r5, r1
   12cac:	mvn	r3, #-2147483648	; 0x80000000
   12cb0:	movt	r9, #2
   12cb4:	str	r0, [sp]
   12cb8:	add	r2, r1, #1
   12cbc:	sub	r1, fp, #32
   12cc0:	subs	r0, r6, r9
   12cc4:	movne	r0, r6
   12cc8:	bl	13958 <__assert_fail@plt+0x29e4>
   12ccc:	mov	sl, r0
   12cd0:	cmp	r6, r9
   12cd4:	str	r0, [r4]
   12cd8:	bne	12ce4 <__assert_fail@plt+0x1d70>
   12cdc:	ldrd	r0, [r9]
   12ce0:	stm	sl, {r0, r1}
   12ce4:	ldr	r1, [r8]
   12ce8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12cec:	add	r0, sl, r1, lsl #3
   12cf0:	sub	r1, r2, r1
   12cf4:	lsl	r2, r1, #3
   12cf8:	mov	r1, #0
   12cfc:	bl	10ed8 <memset@plt>
   12d00:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d04:	str	r0, [r8]
   12d08:	mov	r9, sl
   12d0c:	ldm	r7, {r0, r1}
   12d10:	orr	r8, r1, #1
   12d14:	add	r1, r7, #8
   12d18:	ldr	r2, [r7, #40]	; 0x28
   12d1c:	ldr	r3, [r7, #44]	; 0x2c
   12d20:	ldr	r6, [r9, r5, lsl #3]!
   12d24:	str	r1, [sp, #20]
   12d28:	ldr	r4, [r9, #4]!
   12d2c:	stm	sp, {r0, r8}
   12d30:	add	r0, sp, #8
   12d34:	stm	r0, {r1, r2, r3}
   12d38:	ldr	r2, [sp, #32]
   12d3c:	ldr	r3, [sp, #36]	; 0x24
   12d40:	mov	r1, r6
   12d44:	mov	r0, r4
   12d48:	bl	11a34 <__assert_fail@plt+0xac0>
   12d4c:	cmp	r6, r0
   12d50:	bhi	12db4 <__assert_fail@plt+0x1e40>
   12d54:	add	r6, r0, #1
   12d58:	movw	r0, #24960	; 0x6180
   12d5c:	movt	r0, #2
   12d60:	str	r6, [sl, r5, lsl #3]
   12d64:	cmp	r4, r0
   12d68:	beq	12d74 <__assert_fail@plt+0x1e00>
   12d6c:	mov	r0, r4
   12d70:	bl	143ec <__assert_fail@plt+0x3478>
   12d74:	mov	r0, r6
   12d78:	bl	13828 <__assert_fail@plt+0x28b4>
   12d7c:	str	r0, [r9]
   12d80:	mov	r4, r0
   12d84:	add	r3, sp, #8
   12d88:	ldr	r0, [r7]
   12d8c:	ldr	r1, [r7, #40]	; 0x28
   12d90:	ldr	r2, [r7, #44]	; 0x2c
   12d94:	stm	sp, {r0, r8}
   12d98:	ldr	r0, [sp, #20]
   12d9c:	stm	r3, {r0, r1, r2}
   12da0:	ldr	r2, [sp, #32]
   12da4:	ldr	r3, [sp, #36]	; 0x24
   12da8:	mov	r0, r4
   12dac:	mov	r1, r6
   12db0:	bl	11a34 <__assert_fail@plt+0xac0>
   12db4:	ldr	r0, [sp, #28]
   12db8:	ldr	r1, [sp, #24]
   12dbc:	str	r1, [r0]
   12dc0:	mov	r0, r4
   12dc4:	sub	sp, fp, #28
   12dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dcc:	bl	10f68 <abort@plt>
   12dd0:	movw	r3, #24912	; 0x6150
   12dd4:	movt	r3, #2
   12dd8:	b	12c38 <__assert_fail@plt+0x1cc4>
   12ddc:	movw	r3, #24912	; 0x6150
   12de0:	mov	r1, r0
   12de4:	mov	r0, #0
   12de8:	mvn	r2, #0
   12dec:	movt	r3, #2
   12df0:	b	12c38 <__assert_fail@plt+0x1cc4>
   12df4:	movw	r3, #24912	; 0x6150
   12df8:	mov	r2, r1
   12dfc:	mov	r1, r0
   12e00:	mov	r0, #0
   12e04:	movt	r3, #2
   12e08:	b	12c38 <__assert_fail@plt+0x1cc4>
   12e0c:	push	{fp, lr}
   12e10:	mov	fp, sp
   12e14:	sub	sp, sp, #48	; 0x30
   12e18:	vmov.i32	q8, #0	; 0x00000000
   12e1c:	mov	ip, #32
   12e20:	mov	r3, sp
   12e24:	mov	lr, r2
   12e28:	cmp	r1, #10
   12e2c:	add	r2, r3, #16
   12e30:	vst1.64	{d16-d17}, [r3], ip
   12e34:	vst1.64	{d16-d17}, [r2]
   12e38:	vst1.64	{d16-d17}, [r3]
   12e3c:	beq	12e5c <__assert_fail@plt+0x1ee8>
   12e40:	str	r1, [sp]
   12e44:	mov	r3, sp
   12e48:	mov	r1, lr
   12e4c:	mvn	r2, #0
   12e50:	bl	12c38 <__assert_fail@plt+0x1cc4>
   12e54:	mov	sp, fp
   12e58:	pop	{fp, pc}
   12e5c:	bl	10f68 <abort@plt>
   12e60:	push	{r4, sl, fp, lr}
   12e64:	add	fp, sp, #8
   12e68:	sub	sp, sp, #48	; 0x30
   12e6c:	vmov.i32	q8, #0	; 0x00000000
   12e70:	mov	ip, r3
   12e74:	mov	r3, sp
   12e78:	mov	lr, #32
   12e7c:	cmp	r1, #10
   12e80:	add	r4, r3, #16
   12e84:	vst1.64	{d16-d17}, [r3], lr
   12e88:	vst1.64	{d16-d17}, [r4]
   12e8c:	vst1.64	{d16-d17}, [r3]
   12e90:	beq	12eb0 <__assert_fail@plt+0x1f3c>
   12e94:	str	r1, [sp]
   12e98:	mov	r1, r2
   12e9c:	mov	r3, sp
   12ea0:	mov	r2, ip
   12ea4:	bl	12c38 <__assert_fail@plt+0x1cc4>
   12ea8:	sub	sp, fp, #8
   12eac:	pop	{r4, sl, fp, pc}
   12eb0:	bl	10f68 <abort@plt>
   12eb4:	mov	r2, r1
   12eb8:	mov	r1, r0
   12ebc:	mov	r0, #0
   12ec0:	b	12e0c <__assert_fail@plt+0x1e98>
   12ec4:	mov	r3, r2
   12ec8:	mov	r2, r1
   12ecc:	mov	r1, r0
   12ed0:	mov	r0, #0
   12ed4:	b	12e60 <__assert_fail@plt+0x1eec>
   12ed8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12edc:	add	fp, sp, #24
   12ee0:	sub	sp, sp, #48	; 0x30
   12ee4:	movw	r8, #24912	; 0x6150
   12ee8:	mov	lr, r0
   12eec:	mov	r3, sp
   12ef0:	mov	ip, r1
   12ef4:	movt	r8, #2
   12ef8:	mov	r1, r3
   12efc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f00:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f04:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f08:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f0c:	ubfx	r0, r2, #5, #3
   12f10:	and	r2, r2, #31
   12f14:	mov	r4, #1
   12f18:	add	r0, r3, r0, lsl #2
   12f1c:	ldr	r1, [r0, #8]
   12f20:	bic	r4, r4, r1, lsr r2
   12f24:	eor	r1, r1, r4, lsl r2
   12f28:	mov	r2, ip
   12f2c:	str	r1, [r0, #8]
   12f30:	mov	r0, #0
   12f34:	mov	r1, lr
   12f38:	bl	12c38 <__assert_fail@plt+0x1cc4>
   12f3c:	sub	sp, fp, #24
   12f40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f48:	add	fp, sp, #24
   12f4c:	sub	sp, sp, #48	; 0x30
   12f50:	movw	lr, #24912	; 0x6150
   12f54:	mov	ip, r0
   12f58:	mov	r3, sp
   12f5c:	movt	lr, #2
   12f60:	mov	r2, r3
   12f64:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12f68:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12f6c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12f70:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12f74:	ubfx	r0, r1, #5, #3
   12f78:	and	r1, r1, #31
   12f7c:	mov	r7, #1
   12f80:	add	r0, r3, r0, lsl #2
   12f84:	ldr	r2, [r0, #8]
   12f88:	bic	r7, r7, r2, lsr r1
   12f8c:	eor	r1, r2, r7, lsl r1
   12f90:	mvn	r2, #0
   12f94:	str	r1, [r0, #8]
   12f98:	mov	r0, #0
   12f9c:	mov	r1, ip
   12fa0:	bl	12c38 <__assert_fail@plt+0x1cc4>
   12fa4:	sub	sp, fp, #24
   12fa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fac:	push	{r4, r5, r6, r7, fp, lr}
   12fb0:	add	fp, sp, #16
   12fb4:	sub	sp, sp, #48	; 0x30
   12fb8:	movw	lr, #24912	; 0x6150
   12fbc:	mov	ip, r0
   12fc0:	mov	r3, sp
   12fc4:	movt	lr, #2
   12fc8:	mov	r2, r3
   12fcc:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   12fd0:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   12fd4:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   12fd8:	stm	r2, {r0, r1, r4, r5, r6, r7}
   12fdc:	mov	r1, ip
   12fe0:	mvn	r2, #0
   12fe4:	ldr	r0, [sp, #12]
   12fe8:	orr	r0, r0, #67108864	; 0x4000000
   12fec:	str	r0, [sp, #12]
   12ff0:	mov	r0, #0
   12ff4:	bl	12c38 <__assert_fail@plt+0x1cc4>
   12ff8:	sub	sp, fp, #16
   12ffc:	pop	{r4, r5, r6, r7, fp, pc}
   13000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13004:	add	fp, sp, #24
   13008:	sub	sp, sp, #48	; 0x30
   1300c:	movw	r8, #24912	; 0x6150
   13010:	mov	ip, r1
   13014:	mov	lr, r0
   13018:	mov	r3, sp
   1301c:	movt	r8, #2
   13020:	mov	r2, r3
   13024:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13028:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   1302c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13030:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13034:	mov	r1, lr
   13038:	mov	r2, ip
   1303c:	ldr	r0, [sp, #12]
   13040:	orr	r0, r0, #67108864	; 0x4000000
   13044:	str	r0, [sp, #12]
   13048:	mov	r0, #0
   1304c:	bl	12c38 <__assert_fail@plt+0x1cc4>
   13050:	sub	sp, fp, #24
   13054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13058:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1305c:	add	fp, sp, #24
   13060:	sub	sp, sp, #96	; 0x60
   13064:	vmov.i32	q8, #0	; 0x00000000
   13068:	mov	lr, sp
   1306c:	mov	ip, r2
   13070:	cmp	r1, #10
   13074:	add	r3, lr, #16
   13078:	mov	r2, lr
   1307c:	vst1.64	{d16-d17}, [r3]
   13080:	mov	r3, #28
   13084:	vst1.64	{d16-d17}, [r2], r3
   13088:	vst1.32	{d16-d17}, [r2]
   1308c:	beq	130cc <__assert_fail@plt+0x2158>
   13090:	str	r1, [sp, #48]	; 0x30
   13094:	add	r3, sp, #48	; 0x30
   13098:	ldm	lr!, {r2, r4, r5, r6, r7}
   1309c:	add	r1, r3, #4
   130a0:	stmia	r1!, {r2, r4, r5, r6, r7}
   130a4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   130a8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   130ac:	mvn	r2, #0
   130b0:	ldr	r1, [sp, #60]	; 0x3c
   130b4:	orr	r1, r1, #67108864	; 0x4000000
   130b8:	str	r1, [sp, #60]	; 0x3c
   130bc:	mov	r1, ip
   130c0:	bl	12c38 <__assert_fail@plt+0x1cc4>
   130c4:	sub	sp, fp, #24
   130c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130cc:	bl	10f68 <abort@plt>
   130d0:	push	{fp, lr}
   130d4:	mov	fp, sp
   130d8:	sub	sp, sp, #8
   130dc:	mvn	ip, #0
   130e0:	str	ip, [sp]
   130e4:	bl	130f0 <__assert_fail@plt+0x217c>
   130e8:	mov	sp, fp
   130ec:	pop	{fp, pc}
   130f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130f4:	add	fp, sp, #24
   130f8:	sub	sp, sp, #48	; 0x30
   130fc:	movw	ip, #24912	; 0x6150
   13100:	mov	lr, r3
   13104:	mov	r3, sp
   13108:	cmp	r1, #0
   1310c:	movt	ip, #2
   13110:	cmpne	r2, #0
   13114:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13118:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1311c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13120:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13124:	mov	r3, #10
   13128:	str	r3, [sp]
   1312c:	bne	13134 <__assert_fail@plt+0x21c0>
   13130:	bl	10f68 <abort@plt>
   13134:	ldr	ip, [fp, #8]
   13138:	str	r2, [sp, #44]	; 0x2c
   1313c:	str	r1, [sp, #40]	; 0x28
   13140:	mov	r3, sp
   13144:	mov	r1, lr
   13148:	mov	r2, ip
   1314c:	bl	12c38 <__assert_fail@plt+0x1cc4>
   13150:	sub	sp, fp, #24
   13154:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13158:	push	{fp, lr}
   1315c:	mov	fp, sp
   13160:	sub	sp, sp, #8
   13164:	mov	r3, r2
   13168:	mov	r2, r1
   1316c:	mov	r1, r0
   13170:	mvn	r0, #0
   13174:	str	r0, [sp]
   13178:	mov	r0, #0
   1317c:	bl	130f0 <__assert_fail@plt+0x217c>
   13180:	mov	sp, fp
   13184:	pop	{fp, pc}
   13188:	push	{fp, lr}
   1318c:	mov	fp, sp
   13190:	sub	sp, sp, #8
   13194:	mov	ip, r2
   13198:	mov	r2, r1
   1319c:	mov	r1, r0
   131a0:	str	r3, [sp]
   131a4:	mov	r0, #0
   131a8:	mov	r3, ip
   131ac:	bl	130f0 <__assert_fail@plt+0x217c>
   131b0:	mov	sp, fp
   131b4:	pop	{fp, pc}
   131b8:	movw	r3, #24816	; 0x60f0
   131bc:	movt	r3, #2
   131c0:	b	12c38 <__assert_fail@plt+0x1cc4>
   131c4:	movw	r3, #24816	; 0x60f0
   131c8:	mov	r2, r1
   131cc:	mov	r1, r0
   131d0:	mov	r0, #0
   131d4:	movt	r3, #2
   131d8:	b	12c38 <__assert_fail@plt+0x1cc4>
   131dc:	movw	r3, #24816	; 0x60f0
   131e0:	mvn	r2, #0
   131e4:	movt	r3, #2
   131e8:	b	12c38 <__assert_fail@plt+0x1cc4>
   131ec:	movw	r3, #24816	; 0x60f0
   131f0:	mov	r1, r0
   131f4:	mov	r0, #0
   131f8:	mvn	r2, #0
   131fc:	movt	r3, #2
   13200:	b	12c38 <__assert_fail@plt+0x1cc4>
   13204:	push	{r4, r5, fp, lr}
   13208:	add	fp, sp, #8
   1320c:	mov	r5, r0
   13210:	mov	r4, r1
   13214:	mov	r0, #0
   13218:	mov	r2, #5
   1321c:	mov	r1, r5
   13220:	bl	10db8 <dcgettext@plt>
   13224:	cmp	r0, r5
   13228:	popne	{r4, r5, fp, pc}
   1322c:	bl	144b8 <__assert_fail@plt+0x3544>
   13230:	ldrb	r1, [r0]
   13234:	and	r1, r1, #223	; 0xdf
   13238:	cmp	r1, #71	; 0x47
   1323c:	beq	132a4 <__assert_fail@plt+0x2330>
   13240:	cmp	r1, #85	; 0x55
   13244:	bne	132fc <__assert_fail@plt+0x2388>
   13248:	ldrb	r1, [r0, #1]
   1324c:	and	r1, r1, #223	; 0xdf
   13250:	cmp	r1, #84	; 0x54
   13254:	bne	132fc <__assert_fail@plt+0x2388>
   13258:	ldrb	r1, [r0, #2]
   1325c:	and	r1, r1, #223	; 0xdf
   13260:	cmp	r1, #70	; 0x46
   13264:	bne	132fc <__assert_fail@plt+0x2388>
   13268:	ldrb	r1, [r0, #3]
   1326c:	cmp	r1, #45	; 0x2d
   13270:	bne	132fc <__assert_fail@plt+0x2388>
   13274:	ldrb	r1, [r0, #4]
   13278:	cmp	r1, #56	; 0x38
   1327c:	bne	132fc <__assert_fail@plt+0x2388>
   13280:	ldrb	r0, [r0, #5]
   13284:	cmp	r0, #0
   13288:	bne	132fc <__assert_fail@plt+0x2388>
   1328c:	ldrb	r1, [r5]
   13290:	movw	r2, #19736	; 0x4d18
   13294:	movw	r0, #19740	; 0x4d1c
   13298:	movt	r2, #1
   1329c:	movt	r0, #1
   132a0:	b	1332c <__assert_fail@plt+0x23b8>
   132a4:	ldrb	r1, [r0, #1]
   132a8:	and	r1, r1, #223	; 0xdf
   132ac:	cmp	r1, #66	; 0x42
   132b0:	bne	132fc <__assert_fail@plt+0x2388>
   132b4:	ldrb	r1, [r0, #2]
   132b8:	cmp	r1, #49	; 0x31
   132bc:	bne	132fc <__assert_fail@plt+0x2388>
   132c0:	ldrb	r1, [r0, #3]
   132c4:	cmp	r1, #56	; 0x38
   132c8:	bne	132fc <__assert_fail@plt+0x2388>
   132cc:	ldrb	r1, [r0, #4]
   132d0:	cmp	r1, #48	; 0x30
   132d4:	bne	132fc <__assert_fail@plt+0x2388>
   132d8:	ldrb	r1, [r0, #5]
   132dc:	cmp	r1, #51	; 0x33
   132e0:	bne	132fc <__assert_fail@plt+0x2388>
   132e4:	ldrb	r1, [r0, #6]
   132e8:	cmp	r1, #48	; 0x30
   132ec:	bne	132fc <__assert_fail@plt+0x2388>
   132f0:	ldrb	r0, [r0, #7]
   132f4:	cmp	r0, #0
   132f8:	beq	13318 <__assert_fail@plt+0x23a4>
   132fc:	movw	r1, #19730	; 0x4d12
   13300:	movw	r0, #19734	; 0x4d16
   13304:	cmp	r4, #9
   13308:	movt	r1, #1
   1330c:	movt	r0, #1
   13310:	moveq	r0, r1
   13314:	pop	{r4, r5, fp, pc}
   13318:	ldrb	r1, [r5]
   1331c:	movw	r2, #19744	; 0x4d20
   13320:	movw	r0, #19748	; 0x4d24
   13324:	movt	r2, #1
   13328:	movt	r0, #1
   1332c:	cmp	r1, #96	; 0x60
   13330:	moveq	r0, r2
   13334:	pop	{r4, r5, fp, pc}
   13338:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1333c:	add	fp, sp, #24
   13340:	sub	sp, sp, #32
   13344:	ldr	r6, [fp, #12]
   13348:	ldr	r7, [fp, #8]
   1334c:	mov	r4, r2
   13350:	mov	r8, r0
   13354:	cmp	r1, #0
   13358:	beq	13380 <__assert_fail@plt+0x240c>
   1335c:	movw	r2, #19836	; 0x4d7c
   13360:	mov	r5, r1
   13364:	str	r3, [sp, #4]
   13368:	str	r4, [sp]
   1336c:	mov	r0, r8
   13370:	mov	r1, #1
   13374:	movt	r2, #1
   13378:	mov	r3, r5
   1337c:	b	13398 <__assert_fail@plt+0x2424>
   13380:	movw	r2, #19848	; 0x4d88
   13384:	str	r3, [sp]
   13388:	mov	r0, r8
   1338c:	mov	r1, #1
   13390:	mov	r3, r4
   13394:	movt	r2, #1
   13398:	bl	10efc <__fprintf_chk@plt>
   1339c:	movw	r1, #19855	; 0x4d8f
   133a0:	mov	r0, #0
   133a4:	mov	r2, #5
   133a8:	movt	r1, #1
   133ac:	bl	10db8 <dcgettext@plt>
   133b0:	movw	r2, #20573	; 0x505d
   133b4:	mov	r3, r0
   133b8:	movw	r0, #2022	; 0x7e6
   133bc:	mov	r1, #1
   133c0:	movt	r2, #1
   133c4:	str	r0, [sp]
   133c8:	mov	r0, r8
   133cc:	bl	10efc <__fprintf_chk@plt>
   133d0:	movw	r4, #19417	; 0x4bd9
   133d4:	mov	r1, r8
   133d8:	movt	r4, #1
   133dc:	mov	r0, r4
   133e0:	bl	10d4c <fputs_unlocked@plt>
   133e4:	movw	r1, #19859	; 0x4d93
   133e8:	mov	r0, #0
   133ec:	mov	r2, #5
   133f0:	movt	r1, #1
   133f4:	bl	10db8 <dcgettext@plt>
   133f8:	movw	r3, #20030	; 0x4e3e
   133fc:	mov	r2, r0
   13400:	mov	r0, r8
   13404:	mov	r1, #1
   13408:	movt	r3, #1
   1340c:	bl	10efc <__fprintf_chk@plt>
   13410:	mov	r0, r4
   13414:	mov	r1, r8
   13418:	bl	10d4c <fputs_unlocked@plt>
   1341c:	cmp	r6, #9
   13420:	bhi	13484 <__assert_fail@plt+0x2510>
   13424:	add	r0, pc, #0
   13428:	ldr	pc, [r0, r6, lsl #2]
   1342c:	andeq	r3, r1, ip, asr r6
   13430:	andeq	r3, r1, r4, asr r4
   13434:	muleq	r1, r0, r4
   13438:			; <UNDEFINED> instruction: 0x000134b8
   1343c:	andeq	r3, r1, r0, ror #9
   13440:	andeq	r3, r1, r8, lsl #10
   13444:	andeq	r3, r1, r0, lsr r5
   13448:	andeq	r3, r1, r8, ror #10
   1344c:	andeq	r3, r1, r8, lsl #12
   13450:			; <UNDEFINED> instruction: 0x000135b0
   13454:	movw	r1, #20064	; 0x4e60
   13458:	mov	r0, #0
   1345c:	mov	r2, #5
   13460:	movt	r1, #1
   13464:	bl	10db8 <dcgettext@plt>
   13468:	ldr	r3, [r7]
   1346c:	mov	r2, r0
   13470:	mov	r0, r8
   13474:	mov	r1, #1
   13478:	sub	sp, fp, #24
   1347c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13480:	b	10efc <__fprintf_chk@plt>
   13484:	movw	r1, #20383	; 0x4f9f
   13488:	movt	r1, #1
   1348c:	b	135b8 <__assert_fail@plt+0x2644>
   13490:	movw	r1, #20080	; 0x4e70
   13494:	mov	r0, #0
   13498:	mov	r2, #5
   1349c:	movt	r1, #1
   134a0:	bl	10db8 <dcgettext@plt>
   134a4:	mov	r2, r0
   134a8:	ldr	r3, [r7]
   134ac:	ldr	r0, [r7, #4]
   134b0:	str	r0, [sp]
   134b4:	b	135a4 <__assert_fail@plt+0x2630>
   134b8:	movw	r1, #20103	; 0x4e87
   134bc:	mov	r0, #0
   134c0:	mov	r2, #5
   134c4:	movt	r1, #1
   134c8:	bl	10db8 <dcgettext@plt>
   134cc:	mov	r2, r0
   134d0:	ldr	r3, [r7]
   134d4:	ldmib	r7, {r0, r1}
   134d8:	stm	sp, {r0, r1}
   134dc:	b	135a4 <__assert_fail@plt+0x2630>
   134e0:	movw	r1, #20131	; 0x4ea3
   134e4:	mov	r0, #0
   134e8:	mov	r2, #5
   134ec:	movt	r1, #1
   134f0:	bl	10db8 <dcgettext@plt>
   134f4:	ldr	r3, [r7]
   134f8:	mov	r2, r0
   134fc:	ldmib	r7, {r0, r1, r7}
   13500:	stm	sp, {r0, r1, r7}
   13504:	b	135a4 <__assert_fail@plt+0x2630>
   13508:	movw	r1, #20163	; 0x4ec3
   1350c:	mov	r0, #0
   13510:	mov	r2, #5
   13514:	movt	r1, #1
   13518:	bl	10db8 <dcgettext@plt>
   1351c:	ldr	r3, [r7]
   13520:	mov	r2, r0
   13524:	ldmib	r7, {r0, r1, r6, r7}
   13528:	stm	sp, {r0, r1, r6, r7}
   1352c:	b	135a4 <__assert_fail@plt+0x2630>
   13530:	movw	r1, #20199	; 0x4ee7
   13534:	mov	r0, #0
   13538:	mov	r2, #5
   1353c:	movt	r1, #1
   13540:	bl	10db8 <dcgettext@plt>
   13544:	mov	r2, r0
   13548:	ldr	r3, [r7]
   1354c:	ldmib	r7, {r0, r1, r6}
   13550:	ldr	r5, [r7, #16]
   13554:	ldr	r7, [r7, #20]
   13558:	stm	sp, {r0, r1, r6}
   1355c:	str	r5, [sp, #12]
   13560:	str	r7, [sp, #16]
   13564:	b	135a4 <__assert_fail@plt+0x2630>
   13568:	movw	r1, #20239	; 0x4f0f
   1356c:	mov	r0, #0
   13570:	mov	r2, #5
   13574:	movt	r1, #1
   13578:	bl	10db8 <dcgettext@plt>
   1357c:	mov	r2, r0
   13580:	ldr	r3, [r7]
   13584:	ldmib	r7, {r0, r1, r6}
   13588:	ldr	r5, [r7, #16]
   1358c:	ldr	r4, [r7, #20]
   13590:	ldr	r7, [r7, #24]
   13594:	stm	sp, {r0, r1, r6}
   13598:	str	r5, [sp, #12]
   1359c:	str	r4, [sp, #16]
   135a0:	str	r7, [sp, #20]
   135a4:	mov	r0, r8
   135a8:	mov	r1, #1
   135ac:	b	13658 <__assert_fail@plt+0x26e4>
   135b0:	movw	r1, #20331	; 0x4f6b
   135b4:	movt	r1, #1
   135b8:	mov	r0, #0
   135bc:	mov	r2, #5
   135c0:	bl	10db8 <dcgettext@plt>
   135c4:	mov	ip, r0
   135c8:	ldr	r3, [r7]
   135cc:	ldr	r0, [r7, #4]
   135d0:	ldr	r1, [r7, #8]
   135d4:	ldr	r6, [r7, #12]
   135d8:	ldr	r5, [r7, #16]
   135dc:	ldr	r4, [r7, #20]
   135e0:	ldr	r2, [r7, #24]
   135e4:	ldr	lr, [r7, #28]
   135e8:	ldr	r7, [r7, #32]
   135ec:	stm	sp, {r0, r1, r6}
   135f0:	str	r5, [sp, #12]
   135f4:	str	r4, [sp, #16]
   135f8:	str	r2, [sp, #20]
   135fc:	str	lr, [sp, #24]
   13600:	str	r7, [sp, #28]
   13604:	b	1364c <__assert_fail@plt+0x26d8>
   13608:	movw	r1, #20283	; 0x4f3b
   1360c:	mov	r0, #0
   13610:	mov	r2, #5
   13614:	movt	r1, #1
   13618:	bl	10db8 <dcgettext@plt>
   1361c:	mov	ip, r0
   13620:	ldr	r3, [r7]
   13624:	ldmib	r7, {r0, r1, r6}
   13628:	ldr	r5, [r7, #16]
   1362c:	ldr	r4, [r7, #20]
   13630:	ldr	r2, [r7, #24]
   13634:	ldr	r7, [r7, #28]
   13638:	stm	sp, {r0, r1, r6}
   1363c:	str	r5, [sp, #12]
   13640:	str	r4, [sp, #16]
   13644:	str	r2, [sp, #20]
   13648:	str	r7, [sp, #24]
   1364c:	mov	r0, r8
   13650:	mov	r1, #1
   13654:	mov	r2, ip
   13658:	bl	10efc <__fprintf_chk@plt>
   1365c:	sub	sp, fp, #24
   13660:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13664:	push	{r4, sl, fp, lr}
   13668:	add	fp, sp, #8
   1366c:	sub	sp, sp, #8
   13670:	ldr	ip, [fp, #8]
   13674:	mov	lr, #0
   13678:	ldr	r4, [ip, lr, lsl #2]
   1367c:	add	lr, lr, #1
   13680:	cmp	r4, #0
   13684:	bne	13678 <__assert_fail@plt+0x2704>
   13688:	sub	r4, lr, #1
   1368c:	str	ip, [sp]
   13690:	str	r4, [sp, #4]
   13694:	bl	13338 <__assert_fail@plt+0x23c4>
   13698:	sub	sp, fp, #8
   1369c:	pop	{r4, sl, fp, pc}
   136a0:	push	{r4, r5, fp, lr}
   136a4:	add	fp, sp, #8
   136a8:	sub	sp, sp, #48	; 0x30
   136ac:	ldr	r4, [fp, #8]
   136b0:	mov	ip, #0
   136b4:	add	lr, sp, #8
   136b8:	ldr	r5, [r4]
   136bc:	cmp	r5, #0
   136c0:	str	r5, [lr, ip, lsl #2]
   136c4:	beq	136dc <__assert_fail@plt+0x2768>
   136c8:	add	ip, ip, #1
   136cc:	add	r4, r4, #4
   136d0:	cmp	ip, #10
   136d4:	bne	136b8 <__assert_fail@plt+0x2744>
   136d8:	mov	ip, #10
   136dc:	str	lr, [sp]
   136e0:	str	ip, [sp, #4]
   136e4:	bl	13338 <__assert_fail@plt+0x23c4>
   136e8:	sub	sp, fp, #8
   136ec:	pop	{r4, r5, fp, pc}
   136f0:	push	{fp, lr}
   136f4:	mov	fp, sp
   136f8:	sub	sp, sp, #8
   136fc:	add	ip, fp, #8
   13700:	str	ip, [sp, #4]
   13704:	str	ip, [sp]
   13708:	bl	136a0 <__assert_fail@plt+0x272c>
   1370c:	mov	sp, fp
   13710:	pop	{fp, pc}
   13714:	push	{fp, lr}
   13718:	mov	fp, sp
   1371c:	movw	r0, #24884	; 0x6134
   13720:	movt	r0, #2
   13724:	ldr	r1, [r0]
   13728:	movw	r0, #19417	; 0x4bd9
   1372c:	movt	r0, #1
   13730:	bl	10d4c <fputs_unlocked@plt>
   13734:	movw	r1, #20443	; 0x4fdb
   13738:	mov	r0, #0
   1373c:	mov	r2, #5
   13740:	movt	r1, #1
   13744:	bl	10db8 <dcgettext@plt>
   13748:	movw	r2, #20463	; 0x4fef
   1374c:	mov	r1, r0
   13750:	mov	r0, #1
   13754:	movt	r2, #1
   13758:	bl	10ee4 <__printf_chk@plt>
   1375c:	movw	r1, #20485	; 0x5005
   13760:	mov	r0, #0
   13764:	mov	r2, #5
   13768:	movt	r1, #1
   1376c:	bl	10db8 <dcgettext@plt>
   13770:	movw	r2, #18894	; 0x49ce
   13774:	movw	r3, #19226	; 0x4b1a
   13778:	mov	r1, r0
   1377c:	mov	r0, #1
   13780:	movt	r2, #1
   13784:	movt	r3, #1
   13788:	bl	10ee4 <__printf_chk@plt>
   1378c:	movw	r1, #20505	; 0x5019
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	movt	r1, #1
   1379c:	bl	10db8 <dcgettext@plt>
   137a0:	movw	r2, #20544	; 0x5040
   137a4:	mov	r1, r0
   137a8:	mov	r0, #1
   137ac:	movt	r2, #1
   137b0:	pop	{fp, lr}
   137b4:	b	10ee4 <__printf_chk@plt>
   137b8:	b	137bc <__assert_fail@plt+0x2848>
   137bc:	push	{r4, r5, r6, sl, fp, lr}
   137c0:	add	fp, sp, #16
   137c4:	mov	r4, r2
   137c8:	mov	r5, r1
   137cc:	mov	r6, r0
   137d0:	bl	14554 <__assert_fail@plt+0x35e0>
   137d4:	cmp	r0, #0
   137d8:	popne	{r4, r5, r6, sl, fp, pc}
   137dc:	cmp	r6, #0
   137e0:	beq	137f4 <__assert_fail@plt+0x2880>
   137e4:	cmp	r5, #0
   137e8:	cmpne	r4, #0
   137ec:	bne	137f4 <__assert_fail@plt+0x2880>
   137f0:	pop	{r4, r5, r6, sl, fp, pc}
   137f4:	bl	13c24 <__assert_fail@plt+0x2cb0>
   137f8:	push	{fp, lr}
   137fc:	mov	fp, sp
   13800:	bl	141f4 <__assert_fail@plt+0x3280>
   13804:	cmp	r0, #0
   13808:	popne	{fp, pc}
   1380c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13810:	push	{fp, lr}
   13814:	mov	fp, sp
   13818:	bl	141f4 <__assert_fail@plt+0x3280>
   1381c:	cmp	r0, #0
   13820:	popne	{fp, pc}
   13824:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13828:	push	{fp, lr}
   1382c:	mov	fp, sp
   13830:	bl	141f4 <__assert_fail@plt+0x3280>
   13834:	cmp	r0, #0
   13838:	popne	{fp, pc}
   1383c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13840:	push	{r4, r5, fp, lr}
   13844:	add	fp, sp, #8
   13848:	mov	r4, r1
   1384c:	mov	r5, r0
   13850:	bl	14224 <__assert_fail@plt+0x32b0>
   13854:	cmp	r0, #0
   13858:	popne	{r4, r5, fp, pc}
   1385c:	cmp	r5, #0
   13860:	beq	13870 <__assert_fail@plt+0x28fc>
   13864:	cmp	r4, #0
   13868:	bne	13870 <__assert_fail@plt+0x28fc>
   1386c:	pop	{r4, r5, fp, pc}
   13870:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13874:	push	{fp, lr}
   13878:	mov	fp, sp
   1387c:	cmp	r1, #0
   13880:	orreq	r1, r1, #1
   13884:	bl	14224 <__assert_fail@plt+0x32b0>
   13888:	cmp	r0, #0
   1388c:	popne	{fp, pc}
   13890:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13894:	push	{fp, lr}
   13898:	mov	fp, sp
   1389c:	clz	r3, r2
   138a0:	lsr	ip, r3, #5
   138a4:	clz	r3, r1
   138a8:	lsr	r3, r3, #5
   138ac:	orrs	r3, r3, ip
   138b0:	movwne	r1, #1
   138b4:	movwne	r2, #1
   138b8:	bl	14554 <__assert_fail@plt+0x35e0>
   138bc:	cmp	r0, #0
   138c0:	popne	{fp, pc}
   138c4:	bl	13c24 <__assert_fail@plt+0x2cb0>
   138c8:	push	{fp, lr}
   138cc:	mov	fp, sp
   138d0:	mov	r2, r1
   138d4:	mov	r1, r0
   138d8:	mov	r0, #0
   138dc:	bl	14554 <__assert_fail@plt+0x35e0>
   138e0:	cmp	r0, #0
   138e4:	popne	{fp, pc}
   138e8:	bl	13c24 <__assert_fail@plt+0x2cb0>
   138ec:	mov	r2, r1
   138f0:	mov	r1, r0
   138f4:	mov	r0, #0
   138f8:	b	13894 <__assert_fail@plt+0x2920>
   138fc:	mov	r2, #1
   13900:	b	13904 <__assert_fail@plt+0x2990>
   13904:	push	{r4, r5, fp, lr}
   13908:	add	fp, sp, #8
   1390c:	ldr	r5, [r1]
   13910:	mov	r4, r1
   13914:	cmp	r0, #0
   13918:	beq	13930 <__assert_fail@plt+0x29bc>
   1391c:	mov	r1, #1
   13920:	add	r1, r1, r5, lsr #1
   13924:	adds	r5, r5, r1
   13928:	bcc	13948 <__assert_fail@plt+0x29d4>
   1392c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13930:	cmp	r5, #0
   13934:	bne	13948 <__assert_fail@plt+0x29d4>
   13938:	mov	r1, #64	; 0x40
   1393c:	cmp	r2, #64	; 0x40
   13940:	udiv	r5, r1, r2
   13944:	addhi	r5, r5, #1
   13948:	mov	r1, r5
   1394c:	bl	137bc <__assert_fail@plt+0x2848>
   13950:	str	r5, [r4]
   13954:	pop	{r4, r5, fp, pc}
   13958:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1395c:	add	fp, sp, #24
   13960:	ldr	r6, [r1]
   13964:	mov	r8, r1
   13968:	ldr	r4, [fp, #8]
   1396c:	add	r1, r6, r6, asr #1
   13970:	cmp	r1, r6
   13974:	mvnvs	r1, #-2147483648	; 0x80000000
   13978:	cmp	r1, r3
   1397c:	mov	r5, r1
   13980:	movgt	r5, r3
   13984:	cmn	r3, #1
   13988:	movle	r5, r1
   1398c:	cmn	r4, #1
   13990:	ble	139b0 <__assert_fail@plt+0x2a3c>
   13994:	cmp	r4, #0
   13998:	beq	13a04 <__assert_fail@plt+0x2a90>
   1399c:	cmn	r5, #1
   139a0:	ble	139d8 <__assert_fail@plt+0x2a64>
   139a4:	mvn	r7, #-2147483648	; 0x80000000
   139a8:	udiv	r1, r7, r4
   139ac:	b	139cc <__assert_fail@plt+0x2a58>
   139b0:	cmn	r5, #1
   139b4:	ble	139f4 <__assert_fail@plt+0x2a80>
   139b8:	cmn	r4, #1
   139bc:	beq	13a04 <__assert_fail@plt+0x2a90>
   139c0:	mov	r1, #-2147483648	; 0x80000000
   139c4:	mvn	r7, #-2147483648	; 0x80000000
   139c8:	sdiv	r1, r1, r4
   139cc:	cmp	r1, r5
   139d0:	bge	13a04 <__assert_fail@plt+0x2a90>
   139d4:	b	13a14 <__assert_fail@plt+0x2aa0>
   139d8:	beq	13a04 <__assert_fail@plt+0x2a90>
   139dc:	mov	r1, #-2147483648	; 0x80000000
   139e0:	mvn	r7, #-2147483648	; 0x80000000
   139e4:	sdiv	r1, r1, r5
   139e8:	cmp	r1, r4
   139ec:	bge	13a04 <__assert_fail@plt+0x2a90>
   139f0:	b	13a14 <__assert_fail@plt+0x2aa0>
   139f4:	mvn	r7, #-2147483648	; 0x80000000
   139f8:	sdiv	r1, r7, r4
   139fc:	cmp	r5, r1
   13a00:	blt	13a14 <__assert_fail@plt+0x2aa0>
   13a04:	mul	r1, r5, r4
   13a08:	mov	r7, #64	; 0x40
   13a0c:	cmp	r1, #63	; 0x3f
   13a10:	bgt	13a1c <__assert_fail@plt+0x2aa8>
   13a14:	sdiv	r5, r7, r4
   13a18:	mul	r1, r5, r4
   13a1c:	cmp	r0, #0
   13a20:	moveq	r7, #0
   13a24:	streq	r7, [r8]
   13a28:	sub	r7, r5, r6
   13a2c:	cmp	r7, r2
   13a30:	bge	13ad4 <__assert_fail@plt+0x2b60>
   13a34:	add	r5, r6, r2
   13a38:	mov	r2, #0
   13a3c:	mov	r1, #0
   13a40:	cmp	r5, r3
   13a44:	movwgt	r2, #1
   13a48:	cmn	r3, #1
   13a4c:	movwgt	r1, #1
   13a50:	cmp	r5, r6
   13a54:	bvs	13abc <__assert_fail@plt+0x2b48>
   13a58:	ands	r1, r1, r2
   13a5c:	bne	13abc <__assert_fail@plt+0x2b48>
   13a60:	cmn	r4, #1
   13a64:	ble	13a84 <__assert_fail@plt+0x2b10>
   13a68:	cmp	r4, #0
   13a6c:	beq	13ad0 <__assert_fail@plt+0x2b5c>
   13a70:	cmn	r5, #1
   13a74:	ble	13aa8 <__assert_fail@plt+0x2b34>
   13a78:	mvn	r1, #-2147483648	; 0x80000000
   13a7c:	udiv	r1, r1, r4
   13a80:	b	13a9c <__assert_fail@plt+0x2b28>
   13a84:	cmn	r5, #1
   13a88:	ble	13ac0 <__assert_fail@plt+0x2b4c>
   13a8c:	cmn	r4, #1
   13a90:	beq	13ad0 <__assert_fail@plt+0x2b5c>
   13a94:	mov	r1, #-2147483648	; 0x80000000
   13a98:	sdiv	r1, r1, r4
   13a9c:	cmp	r1, r5
   13aa0:	bge	13ad0 <__assert_fail@plt+0x2b5c>
   13aa4:	b	13abc <__assert_fail@plt+0x2b48>
   13aa8:	beq	13ad0 <__assert_fail@plt+0x2b5c>
   13aac:	mov	r1, #-2147483648	; 0x80000000
   13ab0:	sdiv	r1, r1, r5
   13ab4:	cmp	r1, r4
   13ab8:	bge	13ad0 <__assert_fail@plt+0x2b5c>
   13abc:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13ac0:	mvn	r1, #-2147483648	; 0x80000000
   13ac4:	sdiv	r1, r1, r4
   13ac8:	cmp	r5, r1
   13acc:	blt	13abc <__assert_fail@plt+0x2b48>
   13ad0:	mul	r1, r5, r4
   13ad4:	bl	13840 <__assert_fail@plt+0x28cc>
   13ad8:	str	r5, [r8]
   13adc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ae0:	push	{fp, lr}
   13ae4:	mov	fp, sp
   13ae8:	mov	r1, #1
   13aec:	bl	141a0 <__assert_fail@plt+0x322c>
   13af0:	cmp	r0, #0
   13af4:	popne	{fp, pc}
   13af8:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13afc:	push	{fp, lr}
   13b00:	mov	fp, sp
   13b04:	bl	141a0 <__assert_fail@plt+0x322c>
   13b08:	cmp	r0, #0
   13b0c:	popne	{fp, pc}
   13b10:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13b14:	push	{fp, lr}
   13b18:	mov	fp, sp
   13b1c:	mov	r1, #1
   13b20:	bl	141a0 <__assert_fail@plt+0x322c>
   13b24:	cmp	r0, #0
   13b28:	popne	{fp, pc}
   13b2c:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13b30:	push	{fp, lr}
   13b34:	mov	fp, sp
   13b38:	bl	141a0 <__assert_fail@plt+0x322c>
   13b3c:	cmp	r0, #0
   13b40:	popne	{fp, pc}
   13b44:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13b48:	push	{r4, r5, fp, lr}
   13b4c:	add	fp, sp, #8
   13b50:	mov	r5, r0
   13b54:	mov	r0, r1
   13b58:	mov	r4, r1
   13b5c:	bl	141f4 <__assert_fail@plt+0x3280>
   13b60:	cmp	r0, #0
   13b64:	beq	13b78 <__assert_fail@plt+0x2c04>
   13b68:	mov	r1, r5
   13b6c:	mov	r2, r4
   13b70:	pop	{r4, r5, fp, lr}
   13b74:	b	10d94 <memcpy@plt>
   13b78:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13b7c:	push	{r4, r5, fp, lr}
   13b80:	add	fp, sp, #8
   13b84:	mov	r5, r0
   13b88:	mov	r0, r1
   13b8c:	mov	r4, r1
   13b90:	bl	141f4 <__assert_fail@plt+0x3280>
   13b94:	cmp	r0, #0
   13b98:	beq	13bac <__assert_fail@plt+0x2c38>
   13b9c:	mov	r1, r5
   13ba0:	mov	r2, r4
   13ba4:	pop	{r4, r5, fp, lr}
   13ba8:	b	10d94 <memcpy@plt>
   13bac:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13bb0:	push	{r4, r5, fp, lr}
   13bb4:	add	fp, sp, #8
   13bb8:	mov	r5, r0
   13bbc:	add	r0, r1, #1
   13bc0:	mov	r4, r1
   13bc4:	bl	141f4 <__assert_fail@plt+0x3280>
   13bc8:	cmp	r0, #0
   13bcc:	beq	13be8 <__assert_fail@plt+0x2c74>
   13bd0:	mov	r1, #0
   13bd4:	mov	r2, r4
   13bd8:	strb	r1, [r0, r4]
   13bdc:	mov	r1, r5
   13be0:	pop	{r4, r5, fp, lr}
   13be4:	b	10d94 <memcpy@plt>
   13be8:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13bec:	push	{r4, r5, fp, lr}
   13bf0:	add	fp, sp, #8
   13bf4:	mov	r4, r0
   13bf8:	bl	10ea8 <strlen@plt>
   13bfc:	add	r5, r0, #1
   13c00:	mov	r0, r5
   13c04:	bl	141f4 <__assert_fail@plt+0x3280>
   13c08:	cmp	r0, #0
   13c0c:	beq	13c20 <__assert_fail@plt+0x2cac>
   13c10:	mov	r1, r4
   13c14:	mov	r2, r5
   13c18:	pop	{r4, r5, fp, lr}
   13c1c:	b	10d94 <memcpy@plt>
   13c20:	bl	13c24 <__assert_fail@plt+0x2cb0>
   13c24:	push	{fp, lr}
   13c28:	mov	fp, sp
   13c2c:	movw	r0, #24796	; 0x60dc
   13c30:	movw	r1, #20620	; 0x508c
   13c34:	mov	r2, #5
   13c38:	movt	r0, #2
   13c3c:	movt	r1, #1
   13c40:	ldr	r4, [r0]
   13c44:	mov	r0, #0
   13c48:	bl	10db8 <dcgettext@plt>
   13c4c:	movw	r2, #19583	; 0x4c7f
   13c50:	mov	r3, r0
   13c54:	mov	r0, r4
   13c58:	mov	r1, #0
   13c5c:	movt	r2, #1
   13c60:	bl	10e30 <error@plt>
   13c64:	bl	10f68 <abort@plt>
   13c68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c6c:	add	fp, sp, #28
   13c70:	sub	sp, sp, #12
   13c74:	cmp	r2, #37	; 0x25
   13c78:	bcs	140dc <__assert_fail@plt+0x3168>
   13c7c:	ldr	sl, [fp, #8]
   13c80:	mov	r9, r3
   13c84:	mov	r4, r2
   13c88:	mov	r6, r1
   13c8c:	mov	r5, r0
   13c90:	bl	10ec0 <__errno_location@plt>
   13c94:	cmp	r6, #0
   13c98:	add	r8, sp, #8
   13c9c:	mov	r7, r0
   13ca0:	mov	r0, #0
   13ca4:	mov	r2, r4
   13ca8:	movne	r8, r6
   13cac:	str	r0, [r7]
   13cb0:	mov	r0, r5
   13cb4:	mov	r1, r8
   13cb8:	bl	10d64 <strtol@plt>
   13cbc:	str	r0, [sp, #4]
   13cc0:	str	r9, [sp]
   13cc4:	ldr	r6, [r8]
   13cc8:	cmp	r6, r5
   13ccc:	beq	13cf4 <__assert_fail@plt+0x2d80>
   13cd0:	mov	r4, r0
   13cd4:	ldr	r0, [r7]
   13cd8:	cmp	r0, #0
   13cdc:	beq	13d2c <__assert_fail@plt+0x2db8>
   13ce0:	mov	r9, #4
   13ce4:	cmp	r0, #34	; 0x22
   13ce8:	bne	140d0 <__assert_fail@plt+0x315c>
   13cec:	mov	r9, #1
   13cf0:	b	13d30 <__assert_fail@plt+0x2dbc>
   13cf4:	mov	r9, #4
   13cf8:	cmp	sl, #0
   13cfc:	beq	140d0 <__assert_fail@plt+0x315c>
   13d00:	ldrb	r1, [r5]
   13d04:	cmp	r1, #0
   13d08:	beq	140d0 <__assert_fail@plt+0x315c>
   13d0c:	mov	r0, sl
   13d10:	bl	10eb4 <strchr@plt>
   13d14:	cmp	r0, #0
   13d18:	beq	140d0 <__assert_fail@plt+0x315c>
   13d1c:	mov	r4, #1
   13d20:	mov	r9, #0
   13d24:	str	r4, [sp, #4]
   13d28:	b	13d38 <__assert_fail@plt+0x2dc4>
   13d2c:	mov	r9, r0
   13d30:	cmp	sl, #0
   13d34:	beq	140c8 <__assert_fail@plt+0x3154>
   13d38:	ldrb	r5, [r6]
   13d3c:	cmp	r5, #0
   13d40:	beq	140c8 <__assert_fail@plt+0x3154>
   13d44:	mov	r0, sl
   13d48:	mov	r1, r5
   13d4c:	bl	10eb4 <strchr@plt>
   13d50:	cmp	r0, #0
   13d54:	beq	13fe0 <__assert_fail@plt+0x306c>
   13d58:	sub	r0, r5, #69	; 0x45
   13d5c:	mov	r7, #1024	; 0x400
   13d60:	cmp	r0, #21
   13d64:	bhi	13d7c <__assert_fail@plt+0x2e08>
   13d68:	movw	r2, #35141	; 0x8945
   13d6c:	mov	r1, #1
   13d70:	movt	r2, #48	; 0x30
   13d74:	tst	r2, r1, lsl r0
   13d78:	bne	13d98 <__assert_fail@plt+0x2e24>
   13d7c:	sub	r0, r5, #103	; 0x67
   13d80:	cmp	r0, #13
   13d84:	bhi	13dcc <__assert_fail@plt+0x2e58>
   13d88:	mov	r1, #1
   13d8c:	movw	r2, #8273	; 0x2051
   13d90:	tst	r2, r1, lsl r0
   13d94:	beq	13dcc <__assert_fail@plt+0x2e58>
   13d98:	mov	r0, sl
   13d9c:	mov	r1, #48	; 0x30
   13da0:	bl	10eb4 <strchr@plt>
   13da4:	cmp	r0, #0
   13da8:	beq	13dcc <__assert_fail@plt+0x2e58>
   13dac:	ldrb	r0, [r6, #1]
   13db0:	mov	sl, #1
   13db4:	cmp	r0, #66	; 0x42
   13db8:	cmpne	r0, #68	; 0x44
   13dbc:	bne	13eac <__assert_fail@plt+0x2f38>
   13dc0:	mov	sl, #2
   13dc4:	mov	r7, #1000	; 0x3e8
   13dc8:	b	13dd0 <__assert_fail@plt+0x2e5c>
   13dcc:	mov	sl, #1
   13dd0:	cmp	r5, #89	; 0x59
   13dd4:	bgt	13e3c <__assert_fail@plt+0x2ec8>
   13dd8:	sub	r0, r5, #66	; 0x42
   13ddc:	cmp	r0, #14
   13de0:	bhi	13ec8 <__assert_fail@plt+0x2f54>
   13de4:	add	r1, pc, #0
   13de8:	ldr	pc, [r1, r0, lsl #2]
   13dec:	andeq	r3, r1, r8, lsr #28
   13df0:	andeq	r3, r1, r0, ror #31
   13df4:	andeq	r3, r1, r0, ror #31
   13df8:	andeq	r3, r1, ip, ror #31
   13dfc:	andeq	r3, r1, r0, ror #31
   13e00:	andeq	r3, r1, r4, lsr #30
   13e04:	andeq	r3, r1, r0, ror #31
   13e08:	andeq	r3, r1, r0, ror #31
   13e0c:	andeq	r3, r1, r0, ror #31
   13e10:	andeq	r3, r1, ip, asr #30
   13e14:	andeq	r3, r1, r0, ror #31
   13e18:	andeq	r3, r1, r0, ror #30
   13e1c:	andeq	r3, r1, r0, ror #31
   13e20:	andeq	r3, r1, r0, ror #31
   13e24:	andeq	r4, r1, r4, lsl r0
   13e28:	cmn	r4, #1
   13e2c:	ble	1403c <__assert_fail@plt+0x30c8>
   13e30:	cmp	r4, #2097152	; 0x200000
   13e34:	blt	14050 <__assert_fail@plt+0x30dc>
   13e38:	b	14088 <__assert_fail@plt+0x3114>
   13e3c:	cmp	r5, #115	; 0x73
   13e40:	bgt	13f00 <__assert_fail@plt+0x2f8c>
   13e44:	sub	r0, r5, #98	; 0x62
   13e48:	cmp	r0, #11
   13e4c:	bhi	13fb0 <__assert_fail@plt+0x303c>
   13e50:	add	r1, pc, #4
   13e54:	mov	r5, #0
   13e58:	ldr	pc, [r1, r0, lsl #2]
   13e5c:	andeq	r3, r1, ip, lsl #29
   13e60:	andeq	r4, r1, r8, lsr #1
   13e64:	andeq	r3, r1, r0, ror #31
   13e68:	andeq	r3, r1, r0, ror #31
   13e6c:	andeq	r3, r1, r0, ror #31
   13e70:	andeq	r3, r1, r4, lsr #30
   13e74:	andeq	r3, r1, r0, ror #31
   13e78:	andeq	r3, r1, r0, ror #31
   13e7c:	andeq	r3, r1, r0, ror #31
   13e80:	andeq	r3, r1, ip, asr #30
   13e84:	andeq	r3, r1, r0, ror #31
   13e88:	andeq	r3, r1, r0, ror #30
   13e8c:	cmn	r4, #1
   13e90:	ble	14058 <__assert_fail@plt+0x30e4>
   13e94:	movw	r0, #65535	; 0xffff
   13e98:	movt	r0, #31
   13e9c:	orr	r0, r0, #2097152	; 0x200000
   13ea0:	cmp	r4, r0
   13ea4:	ble	1406c <__assert_fail@plt+0x30f8>
   13ea8:	b	14088 <__assert_fail@plt+0x3114>
   13eac:	cmp	r0, #105	; 0x69
   13eb0:	bne	13dd0 <__assert_fail@plt+0x2e5c>
   13eb4:	ldrb	r0, [r6, #2]
   13eb8:	mov	sl, #1
   13ebc:	cmp	r0, #66	; 0x42
   13ec0:	movweq	sl, #3
   13ec4:	b	13dd0 <__assert_fail@plt+0x2e5c>
   13ec8:	cmp	r5, #84	; 0x54
   13ecc:	beq	13f88 <__assert_fail@plt+0x3014>
   13ed0:	cmp	r5, #89	; 0x59
   13ed4:	bne	13fe0 <__assert_fail@plt+0x306c>
   13ed8:	mov	r5, #0
   13edc:	mvn	r6, #7
   13ee0:	add	r4, sp, #4
   13ee4:	mov	r0, r4
   13ee8:	mov	r1, r7
   13eec:	bl	140fc <__assert_fail@plt+0x3188>
   13ef0:	orr	r5, r0, r5
   13ef4:	adds	r6, r6, #1
   13ef8:	bcc	13ee4 <__assert_fail@plt+0x2f70>
   13efc:	b	140a8 <__assert_fail@plt+0x3134>
   13f00:	cmp	r5, #116	; 0x74
   13f04:	beq	13f88 <__assert_fail@plt+0x3014>
   13f08:	cmp	r5, #119	; 0x77
   13f0c:	bne	13fe0 <__assert_fail@plt+0x306c>
   13f10:	cmn	r4, #1
   13f14:	ble	14074 <__assert_fail@plt+0x3100>
   13f18:	cmp	r4, #1073741824	; 0x40000000
   13f1c:	bge	14088 <__assert_fail@plt+0x3114>
   13f20:	b	1409c <__assert_fail@plt+0x3128>
   13f24:	mov	r5, #0
   13f28:	mvn	r6, #2
   13f2c:	add	r4, sp, #4
   13f30:	mov	r0, r4
   13f34:	mov	r1, r7
   13f38:	bl	140fc <__assert_fail@plt+0x3188>
   13f3c:	orr	r5, r0, r5
   13f40:	adds	r6, r6, #1
   13f44:	bcc	13f30 <__assert_fail@plt+0x2fbc>
   13f48:	b	140a8 <__assert_fail@plt+0x3134>
   13f4c:	add	r0, sp, #4
   13f50:	mov	r1, r7
   13f54:	bl	140fc <__assert_fail@plt+0x3188>
   13f58:	mov	r5, r0
   13f5c:	b	140a8 <__assert_fail@plt+0x3134>
   13f60:	mov	r5, #0
   13f64:	mvn	r6, #1
   13f68:	add	r4, sp, #4
   13f6c:	mov	r0, r4
   13f70:	mov	r1, r7
   13f74:	bl	140fc <__assert_fail@plt+0x3188>
   13f78:	orr	r5, r0, r5
   13f7c:	adds	r6, r6, #1
   13f80:	bcc	13f6c <__assert_fail@plt+0x2ff8>
   13f84:	b	140a8 <__assert_fail@plt+0x3134>
   13f88:	mov	r5, #0
   13f8c:	mvn	r6, #3
   13f90:	add	r4, sp, #4
   13f94:	mov	r0, r4
   13f98:	mov	r1, r7
   13f9c:	bl	140fc <__assert_fail@plt+0x3188>
   13fa0:	orr	r5, r0, r5
   13fa4:	adds	r6, r6, #1
   13fa8:	bcc	13f94 <__assert_fail@plt+0x3020>
   13fac:	b	140a8 <__assert_fail@plt+0x3134>
   13fb0:	cmp	r5, #90	; 0x5a
   13fb4:	bne	13fe0 <__assert_fail@plt+0x306c>
   13fb8:	mov	r5, #0
   13fbc:	mvn	r6, #6
   13fc0:	add	r4, sp, #4
   13fc4:	mov	r0, r4
   13fc8:	mov	r1, r7
   13fcc:	bl	140fc <__assert_fail@plt+0x3188>
   13fd0:	orr	r5, r0, r5
   13fd4:	adds	r6, r6, #1
   13fd8:	bcc	13fc4 <__assert_fail@plt+0x3050>
   13fdc:	b	140a8 <__assert_fail@plt+0x3134>
   13fe0:	ldr	r0, [sp]
   13fe4:	orr	r9, r9, #2
   13fe8:	b	140cc <__assert_fail@plt+0x3158>
   13fec:	mov	r5, #0
   13ff0:	mvn	r6, #5
   13ff4:	add	r4, sp, #4
   13ff8:	mov	r0, r4
   13ffc:	mov	r1, r7
   14000:	bl	140fc <__assert_fail@plt+0x3188>
   14004:	orr	r5, r0, r5
   14008:	adds	r6, r6, #1
   1400c:	bcc	13ff8 <__assert_fail@plt+0x3084>
   14010:	b	140a8 <__assert_fail@plt+0x3134>
   14014:	mov	r5, #0
   14018:	mvn	r6, #4
   1401c:	add	r4, sp, #4
   14020:	mov	r0, r4
   14024:	mov	r1, r7
   14028:	bl	140fc <__assert_fail@plt+0x3188>
   1402c:	orr	r5, r0, r5
   14030:	adds	r6, r6, #1
   14034:	bcc	14020 <__assert_fail@plt+0x30ac>
   14038:	b	140a8 <__assert_fail@plt+0x3134>
   1403c:	beq	14050 <__assert_fail@plt+0x30dc>
   14040:	mov	r0, #-2147483648	; 0x80000000
   14044:	sdiv	r0, r0, r4
   14048:	cmp	r0, #1024	; 0x400
   1404c:	blt	14088 <__assert_fail@plt+0x3114>
   14050:	lsl	r0, r4, #10
   14054:	b	140a0 <__assert_fail@plt+0x312c>
   14058:	beq	1406c <__assert_fail@plt+0x30f8>
   1405c:	mov	r0, #-2147483648	; 0x80000000
   14060:	sdiv	r0, r0, r4
   14064:	cmp	r0, #512	; 0x200
   14068:	blt	14088 <__assert_fail@plt+0x3114>
   1406c:	lsl	r0, r4, #9
   14070:	b	140a0 <__assert_fail@plt+0x312c>
   14074:	beq	1409c <__assert_fail@plt+0x3128>
   14078:	mov	r0, #-2147483648	; 0x80000000
   1407c:	sdiv	r0, r0, r4
   14080:	cmp	r0, #2
   14084:	bge	1409c <__assert_fail@plt+0x3128>
   14088:	cmp	r4, #0
   1408c:	mvn	r0, #-2147483648	; 0x80000000
   14090:	mov	r5, #1
   14094:	movmi	r0, #-2147483648	; 0x80000000
   14098:	b	140a4 <__assert_fail@plt+0x3130>
   1409c:	lsl	r0, r4, #1
   140a0:	mov	r5, #0
   140a4:	str	r0, [sp, #4]
   140a8:	ldr	r0, [r8]
   140ac:	orr	r9, r5, r9
   140b0:	add	r1, r0, sl
   140b4:	str	r1, [r8]
   140b8:	ldrb	r0, [r0, sl]
   140bc:	ldr	r4, [sp, #4]
   140c0:	cmp	r0, #0
   140c4:	orrne	r9, r9, #2
   140c8:	ldr	r0, [sp]
   140cc:	str	r4, [r0]
   140d0:	mov	r0, r9
   140d4:	sub	sp, fp, #28
   140d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140dc:	movw	r0, #20637	; 0x509d
   140e0:	movw	r1, #20675	; 0x50c3
   140e4:	movw	r3, #20689	; 0x50d1
   140e8:	mov	r2, #85	; 0x55
   140ec:	movt	r0, #1
   140f0:	movt	r1, #1
   140f4:	movt	r3, #1
   140f8:	bl	10f74 <__assert_fail@plt>
   140fc:	cmn	r1, #1
   14100:	ble	14124 <__assert_fail@plt+0x31b0>
   14104:	ldr	r2, [r0]
   14108:	cmp	r1, #0
   1410c:	beq	1418c <__assert_fail@plt+0x3218>
   14110:	cmn	r2, #1
   14114:	ble	1414c <__assert_fail@plt+0x31d8>
   14118:	mvn	r3, #-2147483648	; 0x80000000
   1411c:	udiv	r3, r3, r1
   14120:	b	14140 <__assert_fail@plt+0x31cc>
   14124:	ldr	r2, [r0]
   14128:	cmn	r2, #1
   1412c:	ble	14164 <__assert_fail@plt+0x31f0>
   14130:	cmn	r1, #1
   14134:	beq	1418c <__assert_fail@plt+0x3218>
   14138:	mov	r3, #-2147483648	; 0x80000000
   1413c:	sdiv	r3, r3, r1
   14140:	cmp	r3, r2
   14144:	blt	14174 <__assert_fail@plt+0x3200>
   14148:	b	1418c <__assert_fail@plt+0x3218>
   1414c:	beq	14188 <__assert_fail@plt+0x3214>
   14150:	mov	r3, #-2147483648	; 0x80000000
   14154:	sdiv	r3, r3, r2
   14158:	cmp	r3, r1
   1415c:	blt	14174 <__assert_fail@plt+0x3200>
   14160:	b	1418c <__assert_fail@plt+0x3218>
   14164:	mvn	r3, #-2147483648	; 0x80000000
   14168:	sdiv	r3, r3, r1
   1416c:	cmp	r2, r3
   14170:	bge	1418c <__assert_fail@plt+0x3218>
   14174:	cmp	r2, #0
   14178:	mvn	r3, #-2147483648	; 0x80000000
   1417c:	mov	r1, #1
   14180:	movmi	r3, #-2147483648	; 0x80000000
   14184:	b	14194 <__assert_fail@plt+0x3220>
   14188:	mvn	r2, #0
   1418c:	mul	r3, r2, r1
   14190:	mov	r1, #0
   14194:	str	r3, [r0]
   14198:	mov	r0, r1
   1419c:	bx	lr
   141a0:	clz	r2, r1
   141a4:	clz	r3, r0
   141a8:	lsr	r2, r2, #5
   141ac:	lsr	r3, r3, #5
   141b0:	orrs	r2, r3, r2
   141b4:	movwne	r1, #1
   141b8:	movwne	r0, #1
   141bc:	cmp	r1, #0
   141c0:	beq	141f0 <__assert_fail@plt+0x327c>
   141c4:	mvn	r2, #-2147483648	; 0x80000000
   141c8:	udiv	r2, r2, r1
   141cc:	cmp	r2, r0
   141d0:	bcs	141f0 <__assert_fail@plt+0x327c>
   141d4:	push	{fp, lr}
   141d8:	mov	fp, sp
   141dc:	bl	10ec0 <__errno_location@plt>
   141e0:	mov	r1, #12
   141e4:	str	r1, [r0]
   141e8:	mov	r0, #0
   141ec:	pop	{fp, pc}
   141f0:	b	10d40 <calloc@plt>
   141f4:	cmp	r0, #0
   141f8:	movweq	r0, #1
   141fc:	cmn	r0, #1
   14200:	ble	14208 <__assert_fail@plt+0x3294>
   14204:	b	10e48 <malloc@plt>
   14208:	push	{fp, lr}
   1420c:	mov	fp, sp
   14210:	bl	10ec0 <__errno_location@plt>
   14214:	mov	r1, #12
   14218:	str	r1, [r0]
   1421c:	mov	r0, #0
   14220:	pop	{fp, pc}
   14224:	push	{fp, lr}
   14228:	mov	fp, sp
   1422c:	cmp	r0, #0
   14230:	beq	1424c <__assert_fail@plt+0x32d8>
   14234:	cmp	r1, #0
   14238:	beq	14258 <__assert_fail@plt+0x32e4>
   1423c:	cmn	r1, #1
   14240:	ble	14260 <__assert_fail@plt+0x32ec>
   14244:	pop	{fp, lr}
   14248:	b	10dc4 <realloc@plt>
   1424c:	mov	r0, r1
   14250:	pop	{fp, lr}
   14254:	b	141f4 <__assert_fail@plt+0x3280>
   14258:	bl	143ec <__assert_fail@plt+0x3478>
   1425c:	b	1426c <__assert_fail@plt+0x32f8>
   14260:	bl	10ec0 <__errno_location@plt>
   14264:	mov	r1, #12
   14268:	str	r1, [r0]
   1426c:	mov	r0, #0
   14270:	pop	{fp, pc}
   14274:	push	{r4, r5, r6, sl, fp, lr}
   14278:	add	fp, sp, #16
   1427c:	mov	r4, r0
   14280:	bl	10e0c <__fpending@plt>
   14284:	mov	r5, r0
   14288:	mov	r0, r4
   1428c:	bl	10e18 <ferror_unlocked@plt>
   14290:	mov	r6, r0
   14294:	mov	r0, r4
   14298:	bl	142f4 <__assert_fail@plt+0x3380>
   1429c:	cmp	r6, #0
   142a0:	beq	142c0 <__assert_fail@plt+0x334c>
   142a4:	mvn	r4, #0
   142a8:	cmp	r0, #0
   142ac:	bne	142ec <__assert_fail@plt+0x3378>
   142b0:	bl	10ec0 <__errno_location@plt>
   142b4:	mov	r1, #0
   142b8:	str	r1, [r0]
   142bc:	b	142ec <__assert_fail@plt+0x3378>
   142c0:	cmp	r0, #0
   142c4:	mov	r4, r0
   142c8:	mvnne	r4, #0
   142cc:	cmp	r5, #0
   142d0:	bne	142ec <__assert_fail@plt+0x3378>
   142d4:	cmp	r0, #0
   142d8:	beq	142ec <__assert_fail@plt+0x3378>
   142dc:	bl	10ec0 <__errno_location@plt>
   142e0:	ldr	r0, [r0]
   142e4:	subs	r4, r0, #9
   142e8:	mvnne	r4, #0
   142ec:	mov	r0, r4
   142f0:	pop	{r4, r5, r6, sl, fp, pc}
   142f4:	push	{r4, r5, r6, sl, fp, lr}
   142f8:	add	fp, sp, #16
   142fc:	sub	sp, sp, #8
   14300:	mov	r4, r0
   14304:	bl	10ef0 <fileno@plt>
   14308:	cmn	r0, #1
   1430c:	ble	14380 <__assert_fail@plt+0x340c>
   14310:	mov	r0, r4
   14314:	bl	10e60 <__freading@plt>
   14318:	cmp	r0, #0
   1431c:	beq	14348 <__assert_fail@plt+0x33d4>
   14320:	mov	r0, r4
   14324:	bl	10ef0 <fileno@plt>
   14328:	mov	r1, #1
   1432c:	mov	r2, #0
   14330:	mov	r3, #0
   14334:	str	r1, [sp]
   14338:	bl	10df4 <lseek64@plt>
   1433c:	and	r0, r0, r1
   14340:	cmn	r0, #1
   14344:	beq	14380 <__assert_fail@plt+0x340c>
   14348:	mov	r0, r4
   1434c:	bl	14390 <__assert_fail@plt+0x341c>
   14350:	cmp	r0, #0
   14354:	beq	14380 <__assert_fail@plt+0x340c>
   14358:	bl	10ec0 <__errno_location@plt>
   1435c:	ldr	r6, [r0]
   14360:	mov	r5, r0
   14364:	mov	r0, r4
   14368:	bl	10f08 <fclose@plt>
   1436c:	cmp	r6, #0
   14370:	strne	r6, [r5]
   14374:	mvnne	r0, #0
   14378:	sub	sp, fp, #16
   1437c:	pop	{r4, r5, r6, sl, fp, pc}
   14380:	mov	r0, r4
   14384:	sub	sp, fp, #16
   14388:	pop	{r4, r5, r6, sl, fp, lr}
   1438c:	b	10f08 <fclose@plt>
   14390:	push	{r4, sl, fp, lr}
   14394:	add	fp, sp, #8
   14398:	sub	sp, sp, #8
   1439c:	mov	r4, r0
   143a0:	cmp	r0, #0
   143a4:	beq	143dc <__assert_fail@plt+0x3468>
   143a8:	mov	r0, r4
   143ac:	bl	10e60 <__freading@plt>
   143b0:	cmp	r0, #0
   143b4:	beq	143dc <__assert_fail@plt+0x3468>
   143b8:	ldrb	r0, [r4, #1]
   143bc:	tst	r0, #1
   143c0:	beq	143dc <__assert_fail@plt+0x3468>
   143c4:	mov	r0, #1
   143c8:	mov	r2, #0
   143cc:	mov	r3, #0
   143d0:	str	r0, [sp]
   143d4:	mov	r0, r4
   143d8:	bl	14414 <__assert_fail@plt+0x34a0>
   143dc:	mov	r0, r4
   143e0:	sub	sp, fp, #8
   143e4:	pop	{r4, sl, fp, lr}
   143e8:	b	10d70 <fflush@plt>
   143ec:	push	{r4, r5, r6, sl, fp, lr}
   143f0:	add	fp, sp, #16
   143f4:	mov	r4, r0
   143f8:	bl	10ec0 <__errno_location@plt>
   143fc:	ldr	r6, [r0]
   14400:	mov	r5, r0
   14404:	mov	r0, r4
   14408:	bl	10d7c <free@plt>
   1440c:	str	r6, [r5]
   14410:	pop	{r4, r5, r6, sl, fp, pc}
   14414:	push	{r4, r5, r6, r7, fp, lr}
   14418:	add	fp, sp, #16
   1441c:	sub	sp, sp, #8
   14420:	mov	r4, r0
   14424:	ldr	r0, [r0, #4]
   14428:	mov	r5, r3
   1442c:	mov	r6, r2
   14430:	ldr	r1, [r4, #8]
   14434:	cmp	r1, r0
   14438:	bne	14454 <__assert_fail@plt+0x34e0>
   1443c:	ldrd	r0, [r4, #16]
   14440:	cmp	r1, r0
   14444:	bne	14454 <__assert_fail@plt+0x34e0>
   14448:	ldr	r0, [r4, #36]	; 0x24
   1444c:	cmp	r0, #0
   14450:	beq	1446c <__assert_fail@plt+0x34f8>
   14454:	mov	r0, r4
   14458:	mov	r2, r6
   1445c:	mov	r3, r5
   14460:	sub	sp, fp, #16
   14464:	pop	{r4, r5, r6, r7, fp, lr}
   14468:	b	10f14 <fseeko64@plt>
   1446c:	ldr	r7, [fp, #8]
   14470:	mov	r0, r4
   14474:	bl	10ef0 <fileno@plt>
   14478:	mov	r2, r6
   1447c:	mov	r3, r5
   14480:	str	r7, [sp]
   14484:	bl	10df4 <lseek64@plt>
   14488:	and	r2, r0, r1
   1448c:	cmn	r2, #1
   14490:	beq	144ac <__assert_fail@plt+0x3538>
   14494:	strd	r0, [r4, #80]	; 0x50
   14498:	ldr	r0, [r4]
   1449c:	bic	r0, r0, #16
   144a0:	str	r0, [r4]
   144a4:	mov	r0, #0
   144a8:	b	144b0 <__assert_fail@plt+0x353c>
   144ac:	mvn	r0, #0
   144b0:	sub	sp, fp, #16
   144b4:	pop	{r4, r5, r6, r7, fp, pc}
   144b8:	push	{fp, lr}
   144bc:	mov	fp, sp
   144c0:	mov	r0, #14
   144c4:	bl	10f38 <nl_langinfo@plt>
   144c8:	movw	r1, #19418	; 0x4bda
   144cc:	cmp	r0, #0
   144d0:	movt	r1, #1
   144d4:	movne	r1, r0
   144d8:	movw	r0, #20760	; 0x5118
   144dc:	ldrb	r2, [r1]
   144e0:	movt	r0, #1
   144e4:	cmp	r2, #0
   144e8:	movne	r0, r1
   144ec:	pop	{fp, pc}
   144f0:	push	{r4, r5, r6, r7, fp, lr}
   144f4:	add	fp, sp, #16
   144f8:	sub	sp, sp, #8
   144fc:	cmp	r0, #0
   14500:	add	r5, sp, #4
   14504:	mov	r7, r2
   14508:	mov	r4, r1
   1450c:	movne	r5, r0
   14510:	mov	r0, r5
   14514:	bl	10e24 <mbrtowc@plt>
   14518:	mov	r6, r0
   1451c:	cmp	r7, #0
   14520:	beq	14548 <__assert_fail@plt+0x35d4>
   14524:	cmn	r6, #2
   14528:	bcc	14548 <__assert_fail@plt+0x35d4>
   1452c:	mov	r0, #0
   14530:	bl	14590 <__assert_fail@plt+0x361c>
   14534:	cmp	r0, #0
   14538:	bne	14548 <__assert_fail@plt+0x35d4>
   1453c:	ldrb	r0, [r4]
   14540:	mov	r6, #1
   14544:	str	r0, [r5]
   14548:	mov	r0, r6
   1454c:	sub	sp, fp, #16
   14550:	pop	{r4, r5, r6, r7, fp, pc}
   14554:	cmp	r2, #0
   14558:	beq	14588 <__assert_fail@plt+0x3614>
   1455c:	mvn	r3, #0
   14560:	udiv	r3, r3, r2
   14564:	cmp	r3, r1
   14568:	bcs	14588 <__assert_fail@plt+0x3614>
   1456c:	push	{fp, lr}
   14570:	mov	fp, sp
   14574:	bl	10ec0 <__errno_location@plt>
   14578:	mov	r1, #12
   1457c:	str	r1, [r0]
   14580:	mov	r0, #0
   14584:	pop	{fp, pc}
   14588:	mul	r1, r2, r1
   1458c:	b	14224 <__assert_fail@plt+0x32b0>
   14590:	push	{r4, sl, fp, lr}
   14594:	add	fp, sp, #8
   14598:	sub	sp, sp, #264	; 0x108
   1459c:	add	r1, sp, #7
   145a0:	movw	r2, #257	; 0x101
   145a4:	bl	145fc <__assert_fail@plt+0x3688>
   145a8:	mov	r4, #0
   145ac:	cmp	r0, #0
   145b0:	bne	145f0 <__assert_fail@plt+0x367c>
   145b4:	movw	r1, #20766	; 0x511e
   145b8:	add	r0, sp, #7
   145bc:	mov	r2, #2
   145c0:	movt	r1, #1
   145c4:	bl	10e9c <bcmp@plt>
   145c8:	cmp	r0, #0
   145cc:	beq	145f0 <__assert_fail@plt+0x367c>
   145d0:	movw	r1, #20768	; 0x5120
   145d4:	add	r0, sp, #7
   145d8:	mov	r2, #6
   145dc:	movt	r1, #1
   145e0:	bl	10e9c <bcmp@plt>
   145e4:	cmp	r0, #0
   145e8:	mov	r4, r0
   145ec:	movwne	r4, #1
   145f0:	mov	r0, r4
   145f4:	sub	sp, fp, #8
   145f8:	pop	{r4, sl, fp, pc}
   145fc:	push	{r4, r5, r6, r7, fp, lr}
   14600:	add	fp, sp, #16
   14604:	mov	r4, r1
   14608:	mov	r1, #0
   1460c:	mov	r6, r2
   14610:	bl	10f20 <setlocale@plt>
   14614:	cmp	r0, #0
   14618:	beq	14644 <__assert_fail@plt+0x36d0>
   1461c:	mov	r7, r0
   14620:	bl	10ea8 <strlen@plt>
   14624:	cmp	r0, r6
   14628:	bcs	14658 <__assert_fail@plt+0x36e4>
   1462c:	add	r2, r0, #1
   14630:	mov	r0, r4
   14634:	mov	r1, r7
   14638:	bl	10d94 <memcpy@plt>
   1463c:	mov	r5, #0
   14640:	b	14680 <__assert_fail@plt+0x370c>
   14644:	cmp	r6, #0
   14648:	mov	r5, #22
   1464c:	movne	r0, #0
   14650:	strbne	r0, [r4]
   14654:	b	14680 <__assert_fail@plt+0x370c>
   14658:	mov	r5, #34	; 0x22
   1465c:	cmp	r6, #0
   14660:	beq	14680 <__assert_fail@plt+0x370c>
   14664:	sub	r6, r6, #1
   14668:	mov	r0, r4
   1466c:	mov	r1, r7
   14670:	mov	r2, r6
   14674:	bl	10d94 <memcpy@plt>
   14678:	mov	r0, #0
   1467c:	strb	r0, [r4, r6]
   14680:	mov	r0, r5
   14684:	pop	{r4, r5, r6, r7, fp, pc}
   14688:	mov	r1, #0
   1468c:	b	10f20 <setlocale@plt>
   14690:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14694:	mov	r7, r0
   14698:	ldr	r6, [pc, #72]	; 146e8 <__assert_fail@plt+0x3774>
   1469c:	ldr	r5, [pc, #72]	; 146ec <__assert_fail@plt+0x3778>
   146a0:	add	r6, pc, r6
   146a4:	add	r5, pc, r5
   146a8:	sub	r6, r6, r5
   146ac:	mov	r8, r1
   146b0:	mov	r9, r2
   146b4:	bl	10d20 <calloc@plt-0x20>
   146b8:	asrs	r6, r6, #2
   146bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   146c0:	mov	r4, #0
   146c4:	add	r4, r4, #1
   146c8:	ldr	r3, [r5], #4
   146cc:	mov	r2, r9
   146d0:	mov	r1, r8
   146d4:	mov	r0, r7
   146d8:	blx	r3
   146dc:	cmp	r6, r4
   146e0:	bne	146c4 <__assert_fail@plt+0x3750>
   146e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146e8:	andeq	r1, r1, r4, ror #16
   146ec:	andeq	r1, r1, ip, asr r8
   146f0:	bx	lr
   146f4:	ldr	r3, [pc, #12]	; 14708 <__assert_fail@plt+0x3794>
   146f8:	mov	r1, #0
   146fc:	add	r3, pc, r3
   14700:	ldr	r2, [r3]
   14704:	b	10ecc <__cxa_atexit@plt>
   14708:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

0001470c <.fini>:
   1470c:	push	{r3, lr}
   14710:	pop	{r3, pc}
