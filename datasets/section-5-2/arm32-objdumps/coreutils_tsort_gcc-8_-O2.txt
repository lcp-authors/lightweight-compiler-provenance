
../repos/coreutils/src/tsort:     file format elf32-littlearm


Disassembly of section .init:

00010c00 <.init>:
   10c00:	push	{r3, lr}
   10c04:	bl	115f0 <__assert_fail@plt+0x784>
   10c08:	pop	{r3, pc}

Disassembly of section .plt:

00010c0c <calloc@plt-0x14>:
   10c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c10:	ldr	lr, [pc, #4]	; 10c1c <calloc@plt-0x4>
   10c14:	add	lr, pc, lr
   10c18:	ldr	pc, [lr, #8]!
   10c1c:	andeq	r6, r1, r4, ror #7

00010c20 <calloc@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #90112	; 0x16000
   10c28:	ldr	pc, [ip, #996]!	; 0x3e4

00010c2c <fputs_unlocked@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #90112	; 0x16000
   10c34:	ldr	pc, [ip, #988]!	; 0x3dc

00010c38 <strcmp@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #90112	; 0x16000
   10c40:	ldr	pc, [ip, #980]!	; 0x3d4

00010c44 <posix_fadvise64@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #90112	; 0x16000
   10c4c:	ldr	pc, [ip, #972]!	; 0x3cc

00010c50 <fflush@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #90112	; 0x16000
   10c58:	ldr	pc, [ip, #964]!	; 0x3c4

00010c5c <free@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #90112	; 0x16000
   10c64:	ldr	pc, [ip, #956]!	; 0x3bc

00010c68 <_exit@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #90112	; 0x16000
   10c70:	ldr	pc, [ip, #948]!	; 0x3b4

00010c74 <memcpy@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #90112	; 0x16000
   10c7c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c80 <mbsinit@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #90112	; 0x16000
   10c88:	ldr	pc, [ip, #932]!	; 0x3a4

00010c8c <memcmp@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #90112	; 0x16000
   10c94:	ldr	pc, [ip, #924]!	; 0x39c

00010c98 <fputc_unlocked@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #90112	; 0x16000
   10ca0:	ldr	pc, [ip, #916]!	; 0x394

00010ca4 <dcgettext@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #90112	; 0x16000
   10cac:	ldr	pc, [ip, #908]!	; 0x38c

00010cb0 <dup2@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #90112	; 0x16000
   10cb8:	ldr	pc, [ip, #900]!	; 0x384

00010cbc <realloc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #90112	; 0x16000
   10cc4:	ldr	pc, [ip, #892]!	; 0x37c

00010cc8 <textdomain@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #90112	; 0x16000
   10cd0:	ldr	pc, [ip, #884]!	; 0x374

00010cd4 <iswprint@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #90112	; 0x16000
   10cdc:	ldr	pc, [ip, #876]!	; 0x36c

00010ce0 <fwrite@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #90112	; 0x16000
   10ce8:	ldr	pc, [ip, #868]!	; 0x364

00010cec <lseek64@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #90112	; 0x16000
   10cf4:	ldr	pc, [ip, #860]!	; 0x35c

00010cf8 <__ctype_get_mb_cur_max@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #852]!	; 0x354

00010d04 <__fpending@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #844]!	; 0x34c

00010d10 <mbrtowc@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #836]!	; 0x344

00010d1c <error@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #828]!	; 0x33c

00010d28 <open64@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #820]!	; 0x334

00010d34 <puts@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #812]!	; 0x32c

00010d40 <malloc@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #804]!	; 0x324

00010d4c <__libc_start_main@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #796]!	; 0x31c

00010d58 <__freading@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #788]!	; 0x314

00010d64 <__gmon_start__@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #780]!	; 0x30c

00010d70 <freopen64@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #772]!	; 0x304

00010d7c <getopt_long@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #764]!	; 0x2fc

00010d88 <__ctype_b_loc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #756]!	; 0x2f4

00010d94 <exit@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #748]!	; 0x2ec

00010da0 <strlen@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #740]!	; 0x2e4

00010dac <__errno_location@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #732]!	; 0x2dc

00010db8 <__cxa_atexit@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #724]!	; 0x2d4

00010dc4 <memset@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dd0 <__printf_chk@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #708]!	; 0x2c4

00010ddc <fileno@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #700]!	; 0x2bc

00010de8 <__fprintf_chk@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #692]!	; 0x2b4

00010df4 <fclose@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #684]!	; 0x2ac

00010e00 <fseeko64@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #676]!	; 0x2a4

00010e0c <__uflow@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #668]!	; 0x29c

00010e18 <setlocale@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #660]!	; 0x294

00010e24 <strrchr@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #652]!	; 0x28c

00010e30 <nl_langinfo@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #644]!	; 0x284

00010e3c <bindtextdomain@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #636]!	; 0x27c

00010e48 <strncmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #628]!	; 0x274

00010e54 <abort@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #620]!	; 0x26c

00010e60 <close@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #612]!	; 0x264

00010e6c <__assert_fail@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #604]!	; 0x25c

Disassembly of section .text:

00010e78 <.text>:
   10e78:	str	r7, [sp, #-12]!
   10e7c:	mov	r7, r0
   10e80:	mov	r6, r1
   10e84:	ldr	r0, [r1]
   10e88:	mov	r5, #1
   10e8c:	mov	r8, #0
   10e90:	stmib	sp, {fp, lr}
   10e94:	sub	sp, sp, #60	; 0x3c
   10e98:	movw	r4, #28976	; 0x7130
   10e9c:	movt	r4, #2
   10ea0:	bl	12390 <__assert_fail@plt+0x1524>
   10ea4:	movw	r1, #22928	; 0x5990
   10ea8:	movt	r1, #1
   10eac:	mov	r0, #6
   10eb0:	bl	10e18 <setlocale@plt>
   10eb4:	movw	r1, #23228	; 0x5abc
   10eb8:	movt	r1, #1
   10ebc:	movw	r0, #23056	; 0x5a10
   10ec0:	movt	r0, #1
   10ec4:	bl	10e3c <bindtextdomain@plt>
   10ec8:	movw	r0, #23056	; 0x5a10
   10ecc:	movt	r0, #1
   10ed0:	bl	10cc8 <textdomain@plt>
   10ed4:	movw	r0, #7240	; 0x1c48
   10ed8:	movt	r0, #1
   10edc:	bl	15828 <__assert_fail@plt+0x49bc>
   10ee0:	movw	r3, #28896	; 0x70e0
   10ee4:	movt	r3, #2
   10ee8:	str	r5, [sp, #4]
   10eec:	ldr	ip, [r3]
   10ef0:	movw	r2, #23252	; 0x5ad4
   10ef4:	movt	r2, #1
   10ef8:	movw	r3, #6388	; 0x18f4
   10efc:	movt	r3, #1
   10f00:	mov	r1, r6
   10f04:	mov	r0, r7
   10f08:	str	ip, [sp]
   10f0c:	str	r3, [sp, #8]
   10f10:	movw	r3, #23052	; 0x5a0c
   10f14:	movt	r3, #1
   10f18:	str	r2, [sp, #12]
   10f1c:	movw	r2, #22680	; 0x5898
   10f20:	movt	r2, #1
   10f24:	str	r8, [sp, #16]
   10f28:	bl	122a8 <__assert_fail@plt+0x143c>
   10f2c:	ldr	r3, [r4]
   10f30:	sub	r2, r7, r3
   10f34:	cmp	r2, r5
   10f38:	bgt	1123c <__assert_fail@plt+0x3d0>
   10f3c:	cmp	r3, r7
   10f40:	beq	11460 <__assert_fail@plt+0x5f4>
   10f44:	ldr	r3, [r6, r3, lsl #2]
   10f48:	movw	r1, #23224	; 0x5ab8
   10f4c:	movt	r1, #1
   10f50:	movw	sl, #28992	; 0x7140
   10f54:	movt	sl, #2
   10f58:	mov	r0, r3
   10f5c:	str	r3, [sp, #40]	; 0x28
   10f60:	bl	10c38 <strcmp@plt>
   10f64:	mov	r4, r0
   10f68:	mov	r0, #28
   10f6c:	str	r4, [sp, #44]	; 0x2c
   10f70:	bl	15240 <__assert_fail@plt+0x43d4>
   10f74:	cmp	r4, #0
   10f78:	str	r0, [sp, #28]
   10f7c:	beq	10f9c <__assert_fail@plt+0x130>
   10f80:	movw	r1, #23288	; 0x5af8
   10f84:	movt	r1, #1
   10f88:	ldr	r2, [sl]
   10f8c:	ldr	r0, [sp, #40]	; 0x28
   10f90:	bl	11f68 <__assert_fail@plt+0x10fc>
   10f94:	subs	r4, r0, #0
   10f98:	beq	11568 <__assert_fail@plt+0x6fc>
   10f9c:	mov	r1, #2
   10fa0:	ldr	r0, [sl]
   10fa4:	bl	11d38 <__assert_fail@plt+0xecc>
   10fa8:	add	r0, sp, #48	; 0x30
   10fac:	bl	14698 <__assert_fail@plt+0x382c>
   10fb0:	str	sl, [sp, #32]
   10fb4:	movw	sl, #23292	; 0x5afc
   10fb8:	movt	sl, #1
   10fbc:	str	sl, [sp, #36]	; 0x24
   10fc0:	mov	fp, #0
   10fc4:	ldr	r1, [sp, #32]
   10fc8:	add	r3, sp, #48	; 0x30
   10fcc:	mov	r2, #3
   10fd0:	ldr	r0, [r1]
   10fd4:	ldr	r1, [sp, #36]	; 0x24
   10fd8:	bl	146a8 <__assert_fail@plt+0x383c>
   10fdc:	cmn	r0, #1
   10fe0:	beq	112c4 <__assert_fail@plt+0x458>
   10fe4:	cmp	r0, #0
   10fe8:	beq	11444 <__assert_fail@plt+0x5d8>
   10fec:	ldr	r3, [sp, #28]
   10ff0:	ldr	r8, [sp, #52]	; 0x34
   10ff4:	ldr	r5, [r3, #8]
   10ff8:	cmp	r5, #0
   10ffc:	beq	11210 <__assert_fail@plt+0x3a4>
   11000:	mov	r4, r5
   11004:	ldr	r9, [sp, #28]
   11008:	b	11030 <__assert_fail@plt+0x1c4>
   1100c:	ldrd	r2, [r5, #4]
   11010:	movlt	r3, r2
   11014:	cmp	r3, #0
   11018:	beq	11064 <__assert_fail@plt+0x1f8>
   1101c:	ldrsb	r2, [r3, #12]
   11020:	cmp	r2, #0
   11024:	movne	r9, r5
   11028:	movne	r4, r3
   1102c:	mov	r5, r3
   11030:	cmp	r8, #0
   11034:	beq	114b4 <__assert_fail@plt+0x648>
   11038:	ldr	r1, [r5]
   1103c:	cmp	r1, #0
   11040:	beq	114b4 <__assert_fail@plt+0x648>
   11044:	mov	r0, r8
   11048:	bl	10c38 <strcmp@plt>
   1104c:	cmp	r0, #0
   11050:	bne	1100c <__assert_fail@plt+0x1a0>
   11054:	cmp	fp, #0
   11058:	bne	111c4 <__assert_fail@plt+0x358>
   1105c:	mov	fp, r5
   11060:	b	10fc4 <__assert_fail@plt+0x158>
   11064:	mov	r6, r0
   11068:	mov	r0, #28
   1106c:	bl	15240 <__assert_fail@plt+0x43d4>
   11070:	mov	r7, r0
   11074:	mov	r0, r8
   11078:	bl	153b8 <__assert_fail@plt+0x454c>
   1107c:	str	r0, [r7]
   11080:	cmp	r6, #0
   11084:	ldr	r1, [r4]
   11088:	strlt	r7, [r5, #4]
   1108c:	strge	r7, [r5, #8]
   11090:	cmp	r1, #0
   11094:	beq	114d0 <__assert_fail@plt+0x664>
   11098:	mov	r0, r8
   1109c:	bl	10c38 <strcmp@plt>
   110a0:	cmp	r0, #0
   110a4:	beq	114d0 <__assert_fail@plt+0x664>
   110a8:	movge	sl, #1
   110ac:	ldr	r5, [r4, #4]
   110b0:	ldr	r3, [r4, #8]
   110b4:	movge	r5, r3
   110b8:	mvnlt	sl, #0
   110bc:	cmp	r5, r7
   110c0:	beq	11130 <__assert_fail@plt+0x2c4>
   110c4:	cmp	r5, #0
   110c8:	beq	11498 <__assert_fail@plt+0x62c>
   110cc:	ldr	r1, [r5]
   110d0:	cmp	r1, #0
   110d4:	beq	11498 <__assert_fail@plt+0x62c>
   110d8:	mov	r6, r5
   110dc:	b	11108 <__assert_fail@plt+0x29c>
   110e0:	mov	r3, #1
   110e4:	strb	r3, [r6, #12]
   110e8:	ldr	r6, [r6, #8]
   110ec:	cmp	r7, r6
   110f0:	beq	11130 <__assert_fail@plt+0x2c4>
   110f4:	cmp	r6, #0
   110f8:	beq	11498 <__assert_fail@plt+0x62c>
   110fc:	ldr	r1, [r6]
   11100:	cmp	r1, #0
   11104:	beq	11498 <__assert_fail@plt+0x62c>
   11108:	mov	r0, r8
   1110c:	bl	10c38 <strcmp@plt>
   11110:	cmp	r0, #0
   11114:	beq	11498 <__assert_fail@plt+0x62c>
   11118:	mvn	r2, #0
   1111c:	bge	110e0 <__assert_fail@plt+0x274>
   11120:	strb	r2, [r6, #12]
   11124:	ldr	r6, [r6, #4]
   11128:	cmp	r7, r6
   1112c:	bne	110f4 <__assert_fail@plt+0x288>
   11130:	ldrsb	r2, [r4, #12]
   11134:	cmp	r2, #0
   11138:	beq	11200 <__assert_fail@plt+0x394>
   1113c:	rsb	r1, sl, #0
   11140:	cmp	r2, r1
   11144:	beq	11200 <__assert_fail@plt+0x394>
   11148:	ldrsb	r2, [r5, #12]
   1114c:	cmp	sl, r2
   11150:	beq	11280 <__assert_fail@plt+0x414>
   11154:	cmp	sl, #0
   11158:	ldmib	r5, {r0, r2}
   1115c:	blt	112a8 <__assert_fail@plt+0x43c>
   11160:	ldr	ip, [r0, #8]
   11164:	mov	r2, r0
   11168:	str	ip, [r5, #4]
   1116c:	ldr	ip, [r0, #4]
   11170:	str	r5, [r0, #8]
   11174:	str	ip, [r4, #8]
   11178:	str	r4, [r0, #4]
   1117c:	mov	r0, #0
   11180:	strb	r0, [r4, #12]
   11184:	strb	r0, [r5, #12]
   11188:	ldrsb	r0, [r2, #12]
   1118c:	cmp	sl, r0
   11190:	strbeq	r1, [r4, #12]
   11194:	beq	111a0 <__assert_fail@plt+0x334>
   11198:	cmp	r1, r0
   1119c:	strbeq	sl, [r5, #12]
   111a0:	mov	r3, #0
   111a4:	strb	r3, [r2, #12]
   111a8:	ldr	r3, [r9, #8]
   111ac:	mov	r5, r7
   111b0:	cmp	r3, r4
   111b4:	streq	r2, [r9, #8]
   111b8:	strne	r2, [r9, #4]
   111bc:	cmp	fp, #0
   111c0:	beq	1105c <__assert_fail@plt+0x1f0>
   111c4:	ldr	r1, [r5]
   111c8:	ldr	r0, [fp]
   111cc:	bl	10c38 <strcmp@plt>
   111d0:	cmp	r0, #0
   111d4:	beq	10fc0 <__assert_fail@plt+0x154>
   111d8:	ldr	r3, [r5, #16]
   111dc:	mov	r0, #8
   111e0:	add	r3, r3, #1
   111e4:	str	r3, [r5, #16]
   111e8:	bl	14f68 <__assert_fail@plt+0x40fc>
   111ec:	ldr	r3, [fp, #24]
   111f0:	str	r5, [r0]
   111f4:	str	r3, [r0, #4]
   111f8:	str	r0, [fp, #24]
   111fc:	b	10fb4 <__assert_fail@plt+0x148>
   11200:	add	r3, r2, sl
   11204:	mov	r5, r7
   11208:	strb	r3, [r4, #12]
   1120c:	b	11054 <__assert_fail@plt+0x1e8>
   11210:	mov	r0, #28
   11214:	bl	15240 <__assert_fail@plt+0x43d4>
   11218:	cmp	r8, #0
   1121c:	mov	r5, r0
   11220:	beq	11230 <__assert_fail@plt+0x3c4>
   11224:	mov	r0, r8
   11228:	bl	153b8 <__assert_fail@plt+0x454c>
   1122c:	str	r0, [r5]
   11230:	ldr	r3, [sp, #28]
   11234:	str	r5, [r3, #8]
   11238:	b	11054 <__assert_fail@plt+0x1e8>
   1123c:	mov	r2, #5
   11240:	movw	r1, #23268	; 0x5ae4
   11244:	movt	r1, #1
   11248:	mov	r0, r8
   1124c:	bl	10ca4 <dcgettext@plt>
   11250:	ldr	r3, [r4]
   11254:	mov	r7, r0
   11258:	add	r3, r3, r5
   1125c:	ldr	r0, [r6, r3, lsl #2]
   11260:	bl	14680 <__assert_fail@plt+0x3814>
   11264:	mov	r3, r0
   11268:	mov	r2, r7
   1126c:	mov	r0, r8
   11270:	mov	r1, r8
   11274:	bl	10d1c <error@plt>
   11278:	mov	r0, r5
   1127c:	bl	118f4 <__assert_fail@plt+0xa88>
   11280:	cmn	sl, #1
   11284:	beq	11488 <__assert_fail@plt+0x61c>
   11288:	ldr	r3, [r5, #4]
   1128c:	str	r3, [r4, #8]
   11290:	str	r4, [r5, #4]
   11294:	mov	r3, #0
   11298:	mov	r2, r5
   1129c:	strb	r3, [r5, #12]
   112a0:	strb	r3, [r4, #12]
   112a4:	b	111a8 <__assert_fail@plt+0x33c>
   112a8:	ldr	r0, [r2, #4]
   112ac:	str	r0, [r5, #8]
   112b0:	ldr	r0, [r2, #8]
   112b4:	str	r5, [r2, #4]
   112b8:	str	r0, [r4, #4]
   112bc:	str	r4, [r2, #8]
   112c0:	b	1117c <__assert_fail@plt+0x310>
   112c4:	cmp	fp, #0
   112c8:	ldr	sl, [sp, #32]
   112cc:	bne	1152c <__assert_fail@plt+0x6c0>
   112d0:	ldr	r3, [sp, #28]
   112d4:	ldr	r5, [r3, #8]
   112d8:	cmp	r5, #0
   112dc:	beq	112f0 <__assert_fail@plt+0x484>
   112e0:	movw	r1, #5796	; 0x16a4
   112e4:	movt	r1, #1
   112e8:	mov	r0, r5
   112ec:	bl	116c0 <__assert_fail@plt+0x854>
   112f0:	mov	r7, #1
   112f4:	movw	r4, #29008	; 0x7150
   112f8:	movt	r4, #2
   112fc:	mov	r6, r7
   11300:	ldr	r3, [r4]
   11304:	cmp	r3, #0
   11308:	beq	113ac <__assert_fail@plt+0x540>
   1130c:	cmp	r5, #0
   11310:	beq	113c4 <__assert_fail@plt+0x558>
   11314:	movw	r1, #5972	; 0x1754
   11318:	movt	r1, #1
   1131c:	mov	r0, r5
   11320:	bl	116c0 <__assert_fail@plt+0x854>
   11324:	ldr	r3, [r4, #4]
   11328:	cmp	r3, #0
   1132c:	beq	1143c <__assert_fail@plt+0x5d0>
   11330:	ldr	r0, [r3]
   11334:	ldr	r8, [r3, #24]
   11338:	bl	10d34 <puts@plt>
   1133c:	ldm	r4, {r2, ip}
   11340:	cmp	r8, #0
   11344:	sub	r2, r2, #1
   11348:	strb	r6, [ip, #13]
   1134c:	str	r2, [r4]
   11350:	beq	11394 <__assert_fail@plt+0x528>
   11354:	ldr	r0, [r4, #8]
   11358:	mov	lr, #0
   1135c:	ldr	r3, [r8]
   11360:	ldr	r1, [r3, #16]
   11364:	sub	r1, r1, #1
   11368:	cmp	r1, #0
   1136c:	str	r1, [r3, #16]
   11370:	bne	11380 <__assert_fail@plt+0x514>
   11374:	mov	lr, #1
   11378:	str	r3, [r0, #20]
   1137c:	mov	r0, r3
   11380:	ldr	r8, [r8, #4]
   11384:	cmp	r8, #0
   11388:	bne	1135c <__assert_fail@plt+0x4f0>
   1138c:	cmp	lr, #0
   11390:	strne	r0, [r4, #8]
   11394:	ldr	r3, [ip, #20]
   11398:	cmp	r3, #0
   1139c:	str	r3, [r4, #4]
   113a0:	bne	11330 <__assert_fail@plt+0x4c4>
   113a4:	cmp	r2, #0
   113a8:	bne	113d0 <__assert_fail@plt+0x564>
   113ac:	ldr	r0, [sl]
   113b0:	bl	11d88 <__assert_fail@plt+0xf1c>
   113b4:	cmp	r0, #0
   113b8:	bne	114ec <__assert_fail@plt+0x680>
   113bc:	eor	r0, r7, #1
   113c0:	bl	10d94 <exit@plt>
   113c4:	ldr	r3, [r4, #4]
   113c8:	cmp	r3, #0
   113cc:	bne	11330 <__assert_fail@plt+0x4c4>
   113d0:	mov	r2, #5
   113d4:	movw	r1, #23472	; 0x5bb0
   113d8:	movt	r1, #1
   113dc:	mov	r0, #0
   113e0:	bl	10ca4 <dcgettext@plt>
   113e4:	mov	r7, r0
   113e8:	mov	r1, #3
   113ec:	ldr	r2, [sp, #40]	; 0x28
   113f0:	mov	r0, #0
   113f4:	movw	r8, #6036	; 0x1794
   113f8:	movt	r8, #1
   113fc:	bl	144a8 <__assert_fail@plt+0x363c>
   11400:	mov	r1, #0
   11404:	mov	r3, r0
   11408:	mov	r2, r7
   1140c:	mov	r0, r1
   11410:	mov	r7, #0
   11414:	bl	10d1c <error@plt>
   11418:	cmp	r5, #0
   1141c:	beq	1142c <__assert_fail@plt+0x5c0>
   11420:	mov	r1, r8
   11424:	mov	r0, r5
   11428:	bl	116c0 <__assert_fail@plt+0x854>
   1142c:	ldr	r3, [r4, #12]
   11430:	cmp	r3, #0
   11434:	bne	11418 <__assert_fail@plt+0x5ac>
   11438:	b	11300 <__assert_fail@plt+0x494>
   1143c:	ldr	r2, [r4]
   11440:	b	113a4 <__assert_fail@plt+0x538>
   11444:	movw	r1, #23296	; 0x5b00
   11448:	movt	r1, #1
   1144c:	ldr	r3, [pc, #344]	; 115ac <__assert_fail@plt+0x740>
   11450:	movw	r0, #23308	; 0x5b0c
   11454:	movt	r0, #1
   11458:	movw	r2, #458	; 0x1ca
   1145c:	bl	10e6c <__assert_fail@plt>
   11460:	mov	r0, #28
   11464:	str	r8, [sp, #44]	; 0x2c
   11468:	movw	sl, #28992	; 0x7140
   1146c:	movt	sl, #2
   11470:	bl	15240 <__assert_fail@plt+0x43d4>
   11474:	movw	r3, #23224	; 0x5ab8
   11478:	movt	r3, #1
   1147c:	str	r0, [sp, #28]
   11480:	str	r3, [sp, #40]	; 0x28
   11484:	b	10f9c <__assert_fail@plt+0x130>
   11488:	ldr	r3, [r5, #8]
   1148c:	str	r3, [r4, #4]
   11490:	str	r4, [r5, #8]
   11494:	b	11294 <__assert_fail@plt+0x428>
   11498:	movw	r1, #23296	; 0x5b00
   1149c:	movt	r1, #1
   114a0:	ldr	r3, [pc, #264]	; 115b0 <__assert_fail@plt+0x744>
   114a4:	movw	r0, #23384	; 0x5b58
   114a8:	movt	r0, #1
   114ac:	mov	r2, #177	; 0xb1
   114b0:	bl	10e6c <__assert_fail@plt>
   114b4:	movw	r1, #23296	; 0x5b00
   114b8:	movt	r1, #1
   114bc:	ldr	r3, [pc, #236]	; 115b0 <__assert_fail@plt+0x744>
   114c0:	movw	r0, #23320	; 0x5b18
   114c4:	movt	r0, #1
   114c8:	mov	r2, #140	; 0x8c
   114cc:	bl	10e6c <__assert_fail@plt>
   114d0:	movw	r1, #23296	; 0x5b00
   114d4:	movt	r1, #1
   114d8:	ldr	r3, [pc, #208]	; 115b0 <__assert_fail@plt+0x744>
   114dc:	movw	r0, #23340	; 0x5b2c
   114e0:	movt	r0, #1
   114e4:	mov	r2, #163	; 0xa3
   114e8:	bl	10e6c <__assert_fail@plt>
   114ec:	bl	10dac <__errno_location@plt>
   114f0:	ldr	r3, [sp, #44]	; 0x2c
   114f4:	ldr	r4, [r0]
   114f8:	cmp	r3, #0
   114fc:	bne	11598 <__assert_fail@plt+0x72c>
   11500:	movw	r1, #23500	; 0x5bcc
   11504:	movt	r1, #1
   11508:	mov	r0, r3
   1150c:	mov	r2, #5
   11510:	bl	10ca4 <dcgettext@plt>
   11514:	mov	r3, r0
   11518:	movw	r2, #23656	; 0x5c68
   1151c:	movt	r2, #1
   11520:	mov	r1, r4
   11524:	mov	r0, #1
   11528:	bl	10d1c <error@plt>
   1152c:	mov	r2, #5
   11530:	movw	r1, #23428	; 0x5b84
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	bl	10ca4 <dcgettext@plt>
   11540:	mov	r4, r0
   11544:	mov	r1, #3
   11548:	ldr	r2, [sp, #40]	; 0x28
   1154c:	mov	r0, #0
   11550:	bl	144a8 <__assert_fail@plt+0x363c>
   11554:	mov	r3, r0
   11558:	mov	r2, r4
   1155c:	mov	r1, #0
   11560:	mov	r0, #1
   11564:	bl	10d1c <error@plt>
   11568:	bl	10dac <__errno_location@plt>
   1156c:	ldr	r6, [r0]
   11570:	mov	r1, #3
   11574:	mov	r0, r4
   11578:	ldr	r2, [sp, #40]	; 0x28
   1157c:	bl	144a8 <__assert_fail@plt+0x363c>
   11580:	mov	r3, r0
   11584:	movw	r2, #23656	; 0x5c68
   11588:	movt	r2, #1
   1158c:	mov	r0, r5
   11590:	mov	r1, r6
   11594:	bl	10d1c <error@plt>
   11598:	mov	r1, #3
   1159c:	mov	r0, #0
   115a0:	ldr	r2, [sp, #40]	; 0x28
   115a4:	bl	144a8 <__assert_fail@plt+0x363c>
   115a8:	b	11514 <__assert_fail@plt+0x6a8>
   115ac:	andeq	r5, r1, r4, lsl #17
   115b0:	andeq	r5, r1, ip, lsl #17
   115b4:	mov	fp, #0
   115b8:	mov	lr, #0
   115bc:	pop	{r1}		; (ldr r1, [sp], #4)
   115c0:	mov	r2, sp
   115c4:	push	{r2}		; (str r2, [sp, #-4]!)
   115c8:	push	{r0}		; (str r0, [sp, #-4]!)
   115cc:	ldr	ip, [pc, #16]	; 115e4 <__assert_fail@plt+0x778>
   115d0:	push	{ip}		; (str ip, [sp, #-4]!)
   115d4:	ldr	r0, [pc, #12]	; 115e8 <__assert_fail@plt+0x77c>
   115d8:	ldr	r3, [pc, #12]	; 115ec <__assert_fail@plt+0x780>
   115dc:	bl	10d4c <__libc_start_main@plt>
   115e0:	bl	10e54 <abort@plt>
   115e4:	andeq	r5, r1, r4, lsr #16
   115e8:	andeq	r0, r1, r8, ror lr
   115ec:	andeq	r5, r1, r4, asr #15
   115f0:	ldr	r3, [pc, #20]	; 1160c <__assert_fail@plt+0x7a0>
   115f4:	ldr	r2, [pc, #20]	; 11610 <__assert_fail@plt+0x7a4>
   115f8:	add	r3, pc, r3
   115fc:	ldr	r2, [r3, r2]
   11600:	cmp	r2, #0
   11604:	bxeq	lr
   11608:	b	10d64 <__gmon_start__@plt>
   1160c:	andeq	r5, r1, r0, lsl #20
   11610:	ldrdeq	r0, [r0], -r4
   11614:	ldr	r0, [pc, #24]	; 11634 <__assert_fail@plt+0x7c8>
   11618:	ldr	r3, [pc, #24]	; 11638 <__assert_fail@plt+0x7cc>
   1161c:	cmp	r3, r0
   11620:	bxeq	lr
   11624:	ldr	r3, [pc, #16]	; 1163c <__assert_fail@plt+0x7d0>
   11628:	cmp	r3, #0
   1162c:	bxeq	lr
   11630:	bx	r3
   11634:	andeq	r7, r2, r8, lsr #2
   11638:	andeq	r7, r2, r8, lsr #2
   1163c:	andeq	r0, r0, r0
   11640:	ldr	r0, [pc, #36]	; 1166c <__assert_fail@plt+0x800>
   11644:	ldr	r1, [pc, #36]	; 11670 <__assert_fail@plt+0x804>
   11648:	sub	r1, r1, r0
   1164c:	asr	r1, r1, #2
   11650:	add	r1, r1, r1, lsr #31
   11654:	asrs	r1, r1, #1
   11658:	bxeq	lr
   1165c:	ldr	r3, [pc, #16]	; 11674 <__assert_fail@plt+0x808>
   11660:	cmp	r3, #0
   11664:	bxeq	lr
   11668:	bx	r3
   1166c:	andeq	r7, r2, r8, lsr #2
   11670:	andeq	r7, r2, r8, lsr #2
   11674:	andeq	r0, r0, r0
   11678:	push	{r4, lr}
   1167c:	ldr	r4, [pc, #24]	; 1169c <__assert_fail@plt+0x830>
   11680:	ldrb	r3, [r4]
   11684:	cmp	r3, #0
   11688:	popne	{r4, pc}
   1168c:	bl	11614 <__assert_fail@plt+0x7a8>
   11690:	mov	r3, #1
   11694:	strb	r3, [r4]
   11698:	pop	{r4, pc}
   1169c:	andeq	r7, r2, ip, asr #2
   116a0:	b	11640 <__assert_fail@plt+0x7d4>
   116a4:	movw	r3, #29008	; 0x7150
   116a8:	movt	r3, #2
   116ac:	ldr	r2, [r3]
   116b0:	mov	r0, #0
   116b4:	add	r2, r2, #1
   116b8:	str	r2, [r3]
   116bc:	bx	lr
   116c0:	strd	r4, [sp, #-16]!
   116c4:	mov	r4, r0
   116c8:	mov	r5, r1
   116cc:	str	r6, [sp, #8]
   116d0:	str	lr, [sp, #12]
   116d4:	ldr	r3, [r4, #4]
   116d8:	mov	r1, r5
   116dc:	subs	r0, r3, #0
   116e0:	beq	11730 <__assert_fail@plt+0x8c4>
   116e4:	bl	116c0 <__assert_fail@plt+0x854>
   116e8:	cmp	r0, #0
   116ec:	bne	1171c <__assert_fail@plt+0x8b0>
   116f0:	mov	r0, r4
   116f4:	blx	r5
   116f8:	cmp	r0, #0
   116fc:	bne	1171c <__assert_fail@plt+0x8b0>
   11700:	ldr	r4, [r4, #8]
   11704:	cmp	r4, #0
   11708:	bne	116d4 <__assert_fail@plt+0x868>
   1170c:	ldrd	r4, [sp]
   11710:	ldr	r6, [sp, #8]
   11714:	add	sp, sp, #12
   11718:	pop	{pc}		; (ldr pc, [sp], #4)
   1171c:	ldrd	r4, [sp]
   11720:	mov	r0, #1
   11724:	ldr	r6, [sp, #8]
   11728:	add	sp, sp, #12
   1172c:	pop	{pc}		; (ldr pc, [sp], #4)
   11730:	ldr	r3, [r4, #8]
   11734:	cmp	r3, #0
   11738:	bne	116f0 <__assert_fail@plt+0x884>
   1173c:	mov	r0, r4
   11740:	ldrd	r4, [sp]
   11744:	ldr	r6, [sp, #8]
   11748:	ldr	lr, [sp, #12]
   1174c:	add	sp, sp, #16
   11750:	bx	r1
   11754:	ldr	r3, [r0, #16]
   11758:	cmp	r3, #0
   1175c:	bne	1178c <__assert_fail@plt+0x920>
   11760:	ldrb	r3, [r0, #13]
   11764:	cmp	r3, #0
   11768:	bne	1178c <__assert_fail@plt+0x920>
   1176c:	movw	r3, #29008	; 0x7150
   11770:	movt	r3, #2
   11774:	ldr	r2, [r3, #4]
   11778:	cmp	r2, #0
   1177c:	ldrne	r2, [r3, #8]
   11780:	streq	r0, [r3, #4]
   11784:	str	r0, [r3, #8]
   11788:	strne	r0, [r2, #20]
   1178c:	mov	r0, #0
   11790:	bx	lr
   11794:	ldr	r3, [r0, #16]
   11798:	cmp	r3, #0
   1179c:	beq	11824 <__assert_fail@plt+0x9b8>
   117a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   117a4:	movw	r5, #29008	; 0x7150
   117a8:	movt	r5, #2
   117ac:	ldr	ip, [r5, #12]
   117b0:	strd	r6, [sp, #8]
   117b4:	strd	r8, [sp, #16]
   117b8:	str	sl, [sp, #24]
   117bc:	str	lr, [sp, #28]
   117c0:	cmp	ip, #0
   117c4:	moveq	r3, ip
   117c8:	streq	r0, [r5, #12]
   117cc:	beq	11808 <__assert_fail@plt+0x99c>
   117d0:	ldr	r2, [r0, #24]
   117d4:	cmp	r2, #0
   117d8:	beq	118e4 <__assert_fail@plt+0xa78>
   117dc:	ldr	r3, [r2]
   117e0:	cmp	ip, r3
   117e4:	bne	117fc <__assert_fail@plt+0x990>
   117e8:	b	118ec <__assert_fail@plt+0xa80>
   117ec:	ldr	r1, [r3]
   117f0:	cmp	ip, r1
   117f4:	beq	1182c <__assert_fail@plt+0x9c0>
   117f8:	mov	r2, r3
   117fc:	ldr	r3, [r2, #4]
   11800:	cmp	r3, #0
   11804:	bne	117ec <__assert_fail@plt+0x980>
   11808:	ldrd	r4, [sp]
   1180c:	mov	r0, r3
   11810:	ldrd	r6, [sp, #8]
   11814:	ldrd	r8, [sp, #16]
   11818:	ldr	sl, [sp, #24]
   1181c:	add	sp, sp, #28
   11820:	pop	{pc}		; (ldr pc, [sp], #4)
   11824:	mov	r0, r3
   11828:	bx	lr
   1182c:	add	r4, r2, #4
   11830:	ldr	r3, [r0, #20]
   11834:	cmp	r3, #0
   11838:	streq	ip, [r0, #20]
   1183c:	streq	r0, [r5, #12]
   11840:	beq	11808 <__assert_fail@plt+0x99c>
   11844:	movw	r8, #23656	; 0x5c68
   11848:	movt	r8, #1
   1184c:	mov	r6, r0
   11850:	mov	r9, #0
   11854:	b	11868 <__assert_fail@plt+0x9fc>
   11858:	subs	ip, r7, #0
   1185c:	str	r7, [r5, #12]
   11860:	str	r9, [r3, #20]
   11864:	beq	118dc <__assert_fail@plt+0xa70>
   11868:	mov	r1, #0
   1186c:	mov	r2, r8
   11870:	ldr	r3, [ip]
   11874:	mov	r0, r1
   11878:	ldr	r7, [ip, #20]
   1187c:	bl	10d1c <error@plt>
   11880:	ldr	r3, [r5, #12]
   11884:	cmp	r6, r3
   11888:	bne	11858 <__assert_fail@plt+0x9ec>
   1188c:	ldr	r3, [r4]
   11890:	ldr	r2, [r3]
   11894:	mov	r0, r3
   11898:	ldr	r1, [r3, #4]
   1189c:	ldr	r3, [r2, #16]
   118a0:	sub	r3, r3, #1
   118a4:	str	r3, [r2, #16]
   118a8:	str	r1, [r4]
   118ac:	bl	11e9c <__assert_fail@plt+0x1030>
   118b0:	ldr	r2, [r5, #12]
   118b4:	cmp	r2, #0
   118b8:	beq	118dc <__assert_fail@plt+0xa70>
   118bc:	mov	r1, #0
   118c0:	ldr	r3, [r2, #20]
   118c4:	str	r1, [r2, #20]
   118c8:	subs	r2, r3, #0
   118cc:	bne	118c0 <__assert_fail@plt+0xa54>
   118d0:	mov	r3, #1
   118d4:	str	r2, [r5, #12]
   118d8:	b	11808 <__assert_fail@plt+0x99c>
   118dc:	mov	r3, #1
   118e0:	b	11808 <__assert_fail@plt+0x99c>
   118e4:	mov	r3, r2
   118e8:	b	11808 <__assert_fail@plt+0x99c>
   118ec:	add	r4, r0, #24
   118f0:	b	11830 <__assert_fail@plt+0x9c4>
   118f4:	subs	r6, r0, #0
   118f8:	str	r7, [sp, #-8]!
   118fc:	str	lr, [sp, #4]
   11900:	sub	sp, sp, #56	; 0x38
   11904:	beq	1194c <__assert_fail@plt+0xae0>
   11908:	movw	r3, #28984	; 0x7138
   1190c:	movt	r3, #2
   11910:	ldr	r4, [r3]
   11914:	mov	r2, #5
   11918:	movw	r1, #22688	; 0x58a0
   1191c:	movt	r1, #1
   11920:	mov	r0, #0
   11924:	bl	10ca4 <dcgettext@plt>
   11928:	movw	r3, #29032	; 0x7168
   1192c:	movt	r3, #2
   11930:	mov	r2, r0
   11934:	mov	r1, #1
   11938:	ldr	r3, [r3]
   1193c:	mov	r0, r4
   11940:	bl	10de8 <__fprintf_chk@plt>
   11944:	mov	r0, r6
   11948:	bl	10d94 <exit@plt>
   1194c:	mov	r2, #5
   11950:	movw	r1, #22728	; 0x58c8
   11954:	movt	r1, #1
   11958:	movw	r7, #28996	; 0x7144
   1195c:	movt	r7, #2
   11960:	bl	10ca4 <dcgettext@plt>
   11964:	movw	r3, #29032	; 0x7168
   11968:	movt	r3, #2
   1196c:	mov	r1, r0
   11970:	mov	r0, #1
   11974:	ldr	r2, [r3]
   11978:	bl	10dd0 <__printf_chk@plt>
   1197c:	mov	r2, #5
   11980:	movw	r1, #22828	; 0x592c
   11984:	movt	r1, #1
   11988:	mov	r0, r6
   1198c:	bl	10ca4 <dcgettext@plt>
   11990:	ldr	r1, [r7]
   11994:	bl	10c2c <fputs_unlocked@plt>
   11998:	mov	r2, #5
   1199c:	movw	r1, #22984	; 0x59c8
   119a0:	movt	r1, #1
   119a4:	mov	r0, r6
   119a8:	bl	10ca4 <dcgettext@plt>
   119ac:	ldr	r1, [r7]
   119b0:	bl	10c2c <fputs_unlocked@plt>
   119b4:	mov	r2, #5
   119b8:	movw	r1, #22884	; 0x5964
   119bc:	movt	r1, #1
   119c0:	mov	r0, r6
   119c4:	bl	10ca4 <dcgettext@plt>
   119c8:	ldr	r1, [r7]
   119cc:	bl	10c2c <fputs_unlocked@plt>
   119d0:	mov	r2, #5
   119d4:	movw	r1, #22932	; 0x5994
   119d8:	movt	r1, #1
   119dc:	mov	r0, r6
   119e0:	bl	10ca4 <dcgettext@plt>
   119e4:	ldr	r1, [r7]
   119e8:	bl	10c2c <fputs_unlocked@plt>
   119ec:	movw	lr, #22604	; 0x584c
   119f0:	movt	lr, #1
   119f4:	ldr	ip, [lr]
   119f8:	ldr	r4, [lr, #4]
   119fc:	ldrd	r8, [lr, #8]
   11a00:	subs	r1, ip, #0
   11a04:	str	ip, [sp]
   11a08:	ldrd	r2, [lr, #16]
   11a0c:	str	r4, [sp, #4]
   11a10:	ldrd	r4, [lr, #24]
   11a14:	strd	r8, [sp, #8]
   11a18:	ldrd	r8, [lr, #32]
   11a1c:	strd	r2, [sp, #16]
   11a20:	ldrd	r2, [lr, #40]	; 0x28
   11a24:	strd	r4, [sp, #24]
   11a28:	ldrd	r4, [lr, #48]	; 0x30
   11a2c:	strd	r8, [sp, #32]
   11a30:	strd	r2, [sp, #40]	; 0x28
   11a34:	strd	r4, [sp, #48]	; 0x30
   11a38:	movwne	r5, #22680	; 0x5898
   11a3c:	mov	r4, sp
   11a40:	movtne	r5, #1
   11a44:	bne	11b3c <__assert_fail@plt+0xcd0>
   11a48:	ldr	r4, [r4, #4]
   11a4c:	movw	r1, #22988	; 0x59cc
   11a50:	movt	r1, #1
   11a54:	mov	r2, #5
   11a58:	cmp	r4, #0
   11a5c:	beq	11b50 <__assert_fail@plt+0xce4>
   11a60:	mov	r0, #0
   11a64:	bl	10ca4 <dcgettext@plt>
   11a68:	mov	r1, r0
   11a6c:	movw	r3, #23012	; 0x59e4
   11a70:	movt	r3, #1
   11a74:	movw	r2, #23052	; 0x5a0c
   11a78:	movt	r2, #1
   11a7c:	mov	r0, #1
   11a80:	bl	10dd0 <__printf_chk@plt>
   11a84:	mov	r1, #0
   11a88:	mov	r0, #5
   11a8c:	bl	10e18 <setlocale@plt>
   11a90:	cmp	r0, #0
   11a94:	movweq	r5, #22680	; 0x5898
   11a98:	movteq	r5, #1
   11a9c:	beq	11ac0 <__assert_fail@plt+0xc54>
   11aa0:	movw	r1, #23068	; 0x5a1c
   11aa4:	movt	r1, #1
   11aa8:	mov	r2, #3
   11aac:	movw	r5, #22680	; 0x5898
   11ab0:	movt	r5, #1
   11ab4:	bl	10e48 <strncmp@plt>
   11ab8:	cmp	r0, #0
   11abc:	bne	11c08 <__assert_fail@plt+0xd9c>
   11ac0:	mov	r2, #5
   11ac4:	movw	r1, #23144	; 0x5a68
   11ac8:	movt	r1, #1
   11acc:	mov	r0, #0
   11ad0:	bl	10ca4 <dcgettext@plt>
   11ad4:	mov	r1, r0
   11ad8:	movw	r3, #22680	; 0x5898
   11adc:	movt	r3, #1
   11ae0:	movw	r2, #23012	; 0x59e4
   11ae4:	movt	r2, #1
   11ae8:	mov	r0, #1
   11aec:	bl	10dd0 <__printf_chk@plt>
   11af0:	mov	r2, #5
   11af4:	movw	r1, #23172	; 0x5a84
   11af8:	movt	r1, #1
   11afc:	mov	r0, #0
   11b00:	bl	10ca4 <dcgettext@plt>
   11b04:	movw	r2, #23524	; 0x5be4
   11b08:	movt	r2, #1
   11b0c:	cmp	r4, r5
   11b10:	movw	r3, #22928	; 0x5990
   11b14:	movt	r3, #1
   11b18:	mov	r1, r0
   11b1c:	moveq	r3, r2
   11b20:	mov	r2, r4
   11b24:	mov	r0, #1
   11b28:	bl	10dd0 <__printf_chk@plt>
   11b2c:	b	11944 <__assert_fail@plt+0xad8>
   11b30:	ldr	r1, [r4, #8]!
   11b34:	cmp	r1, #0
   11b38:	beq	11a48 <__assert_fail@plt+0xbdc>
   11b3c:	mov	r0, r5
   11b40:	bl	10c38 <strcmp@plt>
   11b44:	cmp	r0, #0
   11b48:	bne	11b30 <__assert_fail@plt+0xcc4>
   11b4c:	b	11a48 <__assert_fail@plt+0xbdc>
   11b50:	mov	r0, r4
   11b54:	bl	10ca4 <dcgettext@plt>
   11b58:	mov	r1, r0
   11b5c:	movw	r3, #23012	; 0x59e4
   11b60:	movt	r3, #1
   11b64:	movw	r2, #23052	; 0x5a0c
   11b68:	movt	r2, #1
   11b6c:	mov	r0, #1
   11b70:	bl	10dd0 <__printf_chk@plt>
   11b74:	mov	r1, r4
   11b78:	mov	r0, #5
   11b7c:	bl	10e18 <setlocale@plt>
   11b80:	cmp	r0, #0
   11b84:	beq	11ba0 <__assert_fail@plt+0xd34>
   11b88:	movw	r1, #23068	; 0x5a1c
   11b8c:	movt	r1, #1
   11b90:	mov	r2, #3
   11b94:	bl	10e48 <strncmp@plt>
   11b98:	cmp	r0, #0
   11b9c:	bne	11bfc <__assert_fail@plt+0xd90>
   11ba0:	mov	r2, #5
   11ba4:	movw	r1, #23144	; 0x5a68
   11ba8:	movt	r1, #1
   11bac:	mov	r0, #0
   11bb0:	bl	10ca4 <dcgettext@plt>
   11bb4:	mov	r1, r0
   11bb8:	movw	r3, #22680	; 0x5898
   11bbc:	movt	r3, #1
   11bc0:	movw	r2, #23012	; 0x59e4
   11bc4:	movt	r2, #1
   11bc8:	mov	r0, #1
   11bcc:	bl	10dd0 <__printf_chk@plt>
   11bd0:	movw	r1, #23172	; 0x5a84
   11bd4:	movt	r1, #1
   11bd8:	mov	r2, #5
   11bdc:	mov	r0, #0
   11be0:	bl	10ca4 <dcgettext@plt>
   11be4:	movw	r4, #22680	; 0x5898
   11be8:	movt	r4, #1
   11bec:	movw	r3, #23524	; 0x5be4
   11bf0:	movt	r3, #1
   11bf4:	mov	r1, r0
   11bf8:	b	11b20 <__assert_fail@plt+0xcb4>
   11bfc:	movw	r5, #22680	; 0x5898
   11c00:	movt	r5, #1
   11c04:	mov	r4, r5
   11c08:	mov	r2, #5
   11c0c:	movw	r1, #23072	; 0x5a20
   11c10:	movt	r1, #1
   11c14:	mov	r0, #0
   11c18:	bl	10ca4 <dcgettext@plt>
   11c1c:	ldr	r1, [r7]
   11c20:	bl	10c2c <fputs_unlocked@plt>
   11c24:	b	11ac0 <__assert_fail@plt+0xc54>
   11c28:	movw	r3, #29024	; 0x7160
   11c2c:	movt	r3, #2
   11c30:	str	r0, [r3]
   11c34:	bx	lr
   11c38:	movw	r3, #29024	; 0x7160
   11c3c:	movt	r3, #2
   11c40:	strb	r0, [r3, #4]
   11c44:	bx	lr
   11c48:	movw	r3, #28996	; 0x7144
   11c4c:	movt	r3, #2
   11c50:	strd	r4, [sp, #-16]!
   11c54:	ldr	r0, [r3]
   11c58:	str	r6, [sp, #8]
   11c5c:	str	lr, [sp, #12]
   11c60:	sub	sp, sp, #8
   11c64:	bl	1552c <__assert_fail@plt+0x46c0>
   11c68:	cmp	r0, #0
   11c6c:	beq	11c98 <__assert_fail@plt+0xe2c>
   11c70:	movw	r4, #29024	; 0x7160
   11c74:	movt	r4, #2
   11c78:	ldrb	r6, [r4, #4]
   11c7c:	bl	10dac <__errno_location@plt>
   11c80:	mov	r5, r0
   11c84:	cmp	r6, #0
   11c88:	beq	11cc4 <__assert_fail@plt+0xe58>
   11c8c:	ldr	r3, [r0]
   11c90:	cmp	r3, #32
   11c94:	bne	11cc4 <__assert_fail@plt+0xe58>
   11c98:	movw	r3, #28984	; 0x7138
   11c9c:	movt	r3, #2
   11ca0:	ldr	r0, [r3]
   11ca4:	bl	1552c <__assert_fail@plt+0x46c0>
   11ca8:	cmp	r0, #0
   11cac:	bne	11d0c <__assert_fail@plt+0xea0>
   11cb0:	add	sp, sp, #8
   11cb4:	ldrd	r4, [sp]
   11cb8:	ldr	r6, [sp, #8]
   11cbc:	add	sp, sp, #12
   11cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11cc4:	movw	r1, #23640	; 0x5c58
   11cc8:	movt	r1, #1
   11ccc:	mov	r2, #5
   11cd0:	mov	r0, #0
   11cd4:	bl	10ca4 <dcgettext@plt>
   11cd8:	mov	r6, r0
   11cdc:	ldr	r0, [r4]
   11ce0:	cmp	r0, #0
   11ce4:	beq	11d1c <__assert_fail@plt+0xeb0>
   11ce8:	ldr	r4, [r5]
   11cec:	bl	14494 <__assert_fail@plt+0x3628>
   11cf0:	mov	r3, r0
   11cf4:	movw	r2, #23652	; 0x5c64
   11cf8:	movt	r2, #1
   11cfc:	mov	r0, #0
   11d00:	str	r6, [sp]
   11d04:	mov	r1, r4
   11d08:	bl	10d1c <error@plt>
   11d0c:	movw	r3, #28900	; 0x70e4
   11d10:	movt	r3, #2
   11d14:	ldr	r0, [r3]
   11d18:	bl	10c68 <_exit@plt>
   11d1c:	mov	r3, r6
   11d20:	movw	r2, #23656	; 0x5c68
   11d24:	movt	r2, #1
   11d28:	ldr	r1, [r5]
   11d2c:	bl	10d1c <error@plt>
   11d30:	b	11d0c <__assert_fail@plt+0xea0>
   11d34:	b	10c44 <posix_fadvise64@plt>
   11d38:	cmp	r0, #0
   11d3c:	bxeq	lr
   11d40:	str	r4, [sp, #-16]!
   11d44:	mov	r4, r1
   11d48:	strd	r6, [sp, #4]
   11d4c:	mov	r6, #0
   11d50:	mov	r7, #0
   11d54:	str	lr, [sp, #12]
   11d58:	sub	sp, sp, #16
   11d5c:	bl	10ddc <fileno@plt>
   11d60:	mov	r2, r6
   11d64:	mov	r3, r7
   11d68:	strd	r6, [sp]
   11d6c:	str	r4, [sp, #8]
   11d70:	bl	10c44 <posix_fadvise64@plt>
   11d74:	add	sp, sp, #16
   11d78:	ldr	r4, [sp]
   11d7c:	ldrd	r6, [sp, #4]
   11d80:	add	sp, sp, #12
   11d84:	pop	{pc}		; (ldr pc, [sp], #4)
   11d88:	strd	r4, [sp, #-12]!
   11d8c:	mov	r4, r0
   11d90:	str	lr, [sp, #8]
   11d94:	sub	sp, sp, #12
   11d98:	bl	10ddc <fileno@plt>
   11d9c:	cmp	r0, #0
   11da0:	mov	r0, r4
   11da4:	blt	11e28 <__assert_fail@plt+0xfbc>
   11da8:	bl	10d58 <__freading@plt>
   11dac:	cmp	r0, #0
   11db0:	bne	11df4 <__assert_fail@plt+0xf88>
   11db4:	mov	r0, r4
   11db8:	bl	11e3c <__assert_fail@plt+0xfd0>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11e24 <__assert_fail@plt+0xfb8>
   11dc4:	bl	10dac <__errno_location@plt>
   11dc8:	mov	r5, r0
   11dcc:	mov	r0, r4
   11dd0:	ldr	r4, [r5]
   11dd4:	bl	10df4 <fclose@plt>
   11dd8:	cmp	r4, #0
   11ddc:	mvnne	r0, #0
   11de0:	strne	r4, [r5]
   11de4:	add	sp, sp, #12
   11de8:	ldrd	r4, [sp]
   11dec:	add	sp, sp, #8
   11df0:	pop	{pc}		; (ldr pc, [sp], #4)
   11df4:	mov	r0, r4
   11df8:	bl	10ddc <fileno@plt>
   11dfc:	mov	r1, #1
   11e00:	mov	r2, #0
   11e04:	mov	r3, #0
   11e08:	str	r1, [sp]
   11e0c:	bl	10cec <lseek64@plt>
   11e10:	mvn	r3, #0
   11e14:	mvn	r2, #0
   11e18:	cmp	r1, r3
   11e1c:	cmpeq	r0, r2
   11e20:	bne	11db4 <__assert_fail@plt+0xf48>
   11e24:	mov	r0, r4
   11e28:	add	sp, sp, #12
   11e2c:	ldrd	r4, [sp]
   11e30:	ldr	lr, [sp, #8]
   11e34:	add	sp, sp, #12
   11e38:	b	10df4 <fclose@plt>
   11e3c:	str	r4, [sp, #-8]!
   11e40:	subs	r4, r0, #0
   11e44:	str	lr, [sp, #4]
   11e48:	sub	sp, sp, #8
   11e4c:	beq	11e68 <__assert_fail@plt+0xffc>
   11e50:	bl	10d58 <__freading@plt>
   11e54:	cmp	r0, #0
   11e58:	beq	11e68 <__assert_fail@plt+0xffc>
   11e5c:	ldr	r3, [r4]
   11e60:	tst	r3, #256	; 0x100
   11e64:	bne	11e80 <__assert_fail@plt+0x1014>
   11e68:	mov	r0, r4
   11e6c:	add	sp, sp, #8
   11e70:	ldr	r4, [sp]
   11e74:	ldr	lr, [sp, #4]
   11e78:	add	sp, sp, #8
   11e7c:	b	10c50 <fflush@plt>
   11e80:	mov	r1, #1
   11e84:	mov	r2, #0
   11e88:	mov	r3, #0
   11e8c:	mov	r0, r4
   11e90:	str	r1, [sp]
   11e94:	bl	12104 <__assert_fail@plt+0x1298>
   11e98:	b	11e68 <__assert_fail@plt+0xffc>
   11e9c:	strd	r4, [sp, #-12]!
   11ea0:	mov	r5, r0
   11ea4:	str	lr, [sp, #8]
   11ea8:	sub	sp, sp, #12
   11eac:	bl	10dac <__errno_location@plt>
   11eb0:	mov	r4, r0
   11eb4:	mov	r2, #0
   11eb8:	ldr	r3, [r4]
   11ebc:	mov	r0, r5
   11ec0:	str	r2, [r4]
   11ec4:	str	r3, [sp]
   11ec8:	str	r3, [sp, #4]
   11ecc:	bl	10c5c <free@plt>
   11ed0:	ldr	r3, [r4]
   11ed4:	add	r2, sp, #8
   11ed8:	clz	r3, r3
   11edc:	lsr	r3, r3, #5
   11ee0:	add	r3, r2, r3, lsl #2
   11ee4:	ldr	r3, [r3, #-8]
   11ee8:	str	r3, [r4]
   11eec:	add	sp, sp, #12
   11ef0:	ldrd	r4, [sp]
   11ef4:	add	sp, sp, #8
   11ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   11efc:	mov	r1, #0
   11f00:	str	r4, [sp, #-8]!
   11f04:	mov	r4, r0
   11f08:	movw	r0, #23660	; 0x5c6c
   11f0c:	movt	r0, #1
   11f10:	str	lr, [sp, #4]
   11f14:	bl	10d28 <open64@plt>
   11f18:	cmp	r4, r0
   11f1c:	moveq	r3, #1
   11f20:	beq	11f34 <__assert_fail@plt+0x10c8>
   11f24:	cmp	r0, #0
   11f28:	mov	r3, r0
   11f2c:	movlt	r3, #0
   11f30:	bge	11f44 <__assert_fail@plt+0x10d8>
   11f34:	ldr	r4, [sp]
   11f38:	add	sp, sp, #4
   11f3c:	mov	r0, r3
   11f40:	pop	{pc}		; (ldr pc, [sp], #4)
   11f44:	bl	10e60 <close@plt>
   11f48:	bl	10dac <__errno_location@plt>
   11f4c:	mov	r2, #9
   11f50:	mov	r3, #0
   11f54:	ldr	r4, [sp]
   11f58:	add	sp, sp, #4
   11f5c:	str	r2, [r0]
   11f60:	mov	r0, r3
   11f64:	pop	{pc}		; (ldr pc, [sp], #4)
   11f68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11f6c:	strd	r6, [sp, #8]
   11f70:	strd	r8, [sp, #16]
   11f74:	mov	r8, r2
   11f78:	strd	sl, [sp, #24]
   11f7c:	mov	sl, r0
   11f80:	mov	r0, r2
   11f84:	str	lr, [sp, #32]
   11f88:	sub	sp, sp, #4
   11f8c:	mov	fp, r1
   11f90:	bl	10ddc <fileno@plt>
   11f94:	mov	r4, r0
   11f98:	bl	10dac <__errno_location@plt>
   11f9c:	cmp	r4, #1
   11fa0:	mov	r9, r0
   11fa4:	beq	120f0 <__assert_fail@plt+0x1284>
   11fa8:	cmp	r4, #2
   11fac:	beq	12090 <__assert_fail@plt+0x1224>
   11fb0:	cmp	r4, #0
   11fb4:	beq	12084 <__assert_fail@plt+0x1218>
   11fb8:	mov	r1, #2
   11fbc:	mov	r0, r1
   11fc0:	bl	10cb0 <dup2@plt>
   11fc4:	subs	r4, r0, #2
   11fc8:	movne	r4, #1
   11fcc:	mov	r1, #1
   11fd0:	mov	r0, r1
   11fd4:	bl	10cb0 <dup2@plt>
   11fd8:	subs	r7, r0, #1
   11fdc:	movne	r7, #1
   11fe0:	mov	r1, #0
   11fe4:	mov	r0, r1
   11fe8:	bl	10cb0 <dup2@plt>
   11fec:	subs	r5, r0, #0
   11ff0:	beq	1200c <__assert_fail@plt+0x11a0>
   11ff4:	mov	r0, #0
   11ff8:	bl	11efc <__assert_fail@plt+0x1090>
   11ffc:	cmp	r0, #0
   12000:	mov	r5, r0
   12004:	mov	r6, r0
   12008:	beq	120fc <__assert_fail@plt+0x1290>
   1200c:	cmp	r7, #0
   12010:	bne	120a4 <__assert_fail@plt+0x1238>
   12014:	cmp	r4, #0
   12018:	beq	1202c <__assert_fail@plt+0x11c0>
   1201c:	mov	r0, #2
   12020:	bl	11efc <__assert_fail@plt+0x1090>
   12024:	subs	r4, r0, #0
   12028:	beq	120dc <__assert_fail@plt+0x1270>
   1202c:	mov	r2, r8
   12030:	mov	r1, fp
   12034:	mov	r0, sl
   12038:	bl	10d70 <freopen64@plt>
   1203c:	mov	r6, r0
   12040:	cmp	r4, #0
   12044:	ldr	r8, [r9]
   12048:	bne	120e4 <__assert_fail@plt+0x1278>
   1204c:	cmp	r7, #0
   12050:	bne	120d0 <__assert_fail@plt+0x1264>
   12054:	cmp	r5, #0
   12058:	bne	12098 <__assert_fail@plt+0x122c>
   1205c:	cmp	r6, #0
   12060:	mov	r0, r6
   12064:	streq	r8, [r9]
   12068:	add	sp, sp, #4
   1206c:	ldrd	r4, [sp]
   12070:	ldrd	r6, [sp, #8]
   12074:	ldrd	r8, [sp, #16]
   12078:	ldrd	sl, [sp, #24]
   1207c:	add	sp, sp, #32
   12080:	pop	{pc}		; (ldr pc, [sp], #4)
   12084:	mov	r7, r4
   12088:	mov	r5, r4
   1208c:	b	1202c <__assert_fail@plt+0x11c0>
   12090:	mov	r4, #0
   12094:	b	11fcc <__assert_fail@plt+0x1160>
   12098:	mov	r0, #0
   1209c:	bl	10e60 <close@plt>
   120a0:	b	1205c <__assert_fail@plt+0x11f0>
   120a4:	mov	r0, #1
   120a8:	bl	11efc <__assert_fail@plt+0x1090>
   120ac:	subs	r7, r0, #0
   120b0:	bne	12014 <__assert_fail@plt+0x11a8>
   120b4:	cmp	r4, #0
   120b8:	ldr	r8, [r9]
   120bc:	moveq	r6, r4
   120c0:	beq	120d0 <__assert_fail@plt+0x1264>
   120c4:	mov	r0, #2
   120c8:	mov	r6, r7
   120cc:	bl	10e60 <close@plt>
   120d0:	mov	r0, #1
   120d4:	bl	10e60 <close@plt>
   120d8:	b	12054 <__assert_fail@plt+0x11e8>
   120dc:	ldr	r8, [r9]
   120e0:	mov	r6, r4
   120e4:	mov	r0, #2
   120e8:	bl	10e60 <close@plt>
   120ec:	b	1204c <__assert_fail@plt+0x11e0>
   120f0:	mov	r4, #0
   120f4:	mov	r7, r4
   120f8:	b	11fe0 <__assert_fail@plt+0x1174>
   120fc:	mov	r5, #1
   12100:	b	12040 <__assert_fail@plt+0x11d4>
   12104:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12108:	mov	r4, r0
   1210c:	ldr	ip, [r0, #4]
   12110:	strd	r6, [sp, #8]
   12114:	str	lr, [sp, #20]
   12118:	ldr	lr, [r0, #8]
   1211c:	str	r8, [sp, #16]
   12120:	sub	sp, sp, #8
   12124:	ldr	r5, [sp, #32]
   12128:	cmp	lr, ip
   1212c:	beq	12154 <__assert_fail@plt+0x12e8>
   12130:	mov	r0, r4
   12134:	str	r5, [sp, #32]
   12138:	add	sp, sp, #8
   1213c:	ldrd	r4, [sp]
   12140:	ldrd	r6, [sp, #8]
   12144:	ldr	r8, [sp, #16]
   12148:	ldr	lr, [sp, #20]
   1214c:	add	sp, sp, #24
   12150:	b	10e00 <fseeko64@plt>
   12154:	ldr	ip, [r0, #16]
   12158:	ldr	lr, [r0, #20]
   1215c:	cmp	lr, ip
   12160:	bne	12130 <__assert_fail@plt+0x12c4>
   12164:	ldr	r8, [r0, #36]	; 0x24
   12168:	cmp	r8, #0
   1216c:	bne	12130 <__assert_fail@plt+0x12c4>
   12170:	mov	r6, r2
   12174:	mov	r7, r3
   12178:	bl	10ddc <fileno@plt>
   1217c:	mov	r2, r6
   12180:	mov	r3, r7
   12184:	str	r5, [sp]
   12188:	bl	10cec <lseek64@plt>
   1218c:	mvn	r3, #0
   12190:	mvn	r2, #0
   12194:	cmp	r1, r3
   12198:	cmpeq	r0, r2
   1219c:	beq	121cc <__assert_fail@plt+0x1360>
   121a0:	ldr	r3, [r4]
   121a4:	strd	r0, [r4, #80]	; 0x50
   121a8:	bic	r3, r3, #16
   121ac:	str	r3, [r4]
   121b0:	mov	r0, r8
   121b4:	add	sp, sp, #8
   121b8:	ldrd	r4, [sp]
   121bc:	ldrd	r6, [sp, #8]
   121c0:	ldr	r8, [sp, #16]
   121c4:	add	sp, sp, #20
   121c8:	pop	{pc}		; (ldr pc, [sp], #4)
   121cc:	mvn	r8, #0
   121d0:	b	121b0 <__assert_fail@plt+0x1344>
   121d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   121d8:	movw	r4, #29000	; 0x7148
   121dc:	movt	r4, #2
   121e0:	mov	r5, #0
   121e4:	cmp	r0, #2
   121e8:	strd	r6, [sp, #8]
   121ec:	str	r8, [sp, #16]
   121f0:	str	lr, [sp, #20]
   121f4:	sub	sp, sp, #16
   121f8:	ldr	r6, [r4]
   121fc:	str	r5, [r4]
   12200:	beq	12230 <__assert_fail@plt+0x13c4>
   12204:	mov	r2, #0
   12208:	movw	r3, #28976	; 0x7130
   1220c:	movt	r3, #2
   12210:	str	r6, [r4]
   12214:	str	r2, [r3]
   12218:	add	sp, sp, #16
   1221c:	ldrd	r4, [sp]
   12220:	ldrd	r6, [sp, #8]
   12224:	ldr	r8, [sp, #16]
   12228:	add	sp, sp, #20
   1222c:	pop	{pc}		; (ldr pc, [sp], #4)
   12230:	mov	r8, r3
   12234:	mov	r7, r2
   12238:	str	r5, [sp]
   1223c:	movw	r3, #23672	; 0x5c78
   12240:	movt	r3, #1
   12244:	movw	r2, #23720	; 0x5ca8
   12248:	movt	r2, #1
   1224c:	bl	10d7c <getopt_long@plt>
   12250:	cmn	r0, #1
   12254:	beq	12204 <__assert_fail@plt+0x1398>
   12258:	cmp	r0, #104	; 0x68
   1225c:	beq	12298 <__assert_fail@plt+0x142c>
   12260:	cmp	r0, #118	; 0x76
   12264:	bne	12204 <__assert_fail@plt+0x1398>
   12268:	add	ip, sp, #48	; 0x30
   1226c:	movw	r0, #28996	; 0x7144
   12270:	movt	r0, #2
   12274:	mov	r2, r8
   12278:	ldr	r3, [sp, #40]	; 0x28
   1227c:	mov	r1, r7
   12280:	str	ip, [sp]
   12284:	ldr	r0, [r0]
   12288:	str	ip, [sp, #12]
   1228c:	bl	14e00 <__assert_fail@plt+0x3f94>
   12290:	mov	r0, r5
   12294:	bl	10d94 <exit@plt>
   12298:	mov	r0, r5
   1229c:	ldr	r3, [sp, #44]	; 0x2c
   122a0:	blx	r3
   122a4:	b	12204 <__assert_fail@plt+0x1398>
   122a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   122ac:	mov	r5, #0
   122b0:	movw	r4, #29000	; 0x7148
   122b4:	movt	r4, #2
   122b8:	strd	r6, [sp, #8]
   122bc:	movw	ip, #22928	; 0x5990
   122c0:	movt	ip, #1
   122c4:	strd	r8, [sp, #16]
   122c8:	mov	r9, #1
   122cc:	str	lr, [sp, #24]
   122d0:	sub	sp, sp, #20
   122d4:	mov	r8, r3
   122d8:	ldrb	lr, [sp, #52]	; 0x34
   122dc:	mov	r7, r2
   122e0:	movw	r3, #23672	; 0x5c78
   122e4:	movt	r3, #1
   122e8:	movw	r2, #23720	; 0x5ca8
   122ec:	movt	r2, #1
   122f0:	str	r5, [sp]
   122f4:	ldr	r6, [r4]
   122f8:	str	r9, [r4]
   122fc:	cmp	lr, r5
   12300:	movne	r2, ip
   12304:	bl	10d7c <getopt_long@plt>
   12308:	cmn	r0, #1
   1230c:	beq	12334 <__assert_fail@plt+0x14c8>
   12310:	cmp	r0, #104	; 0x68
   12314:	beq	12380 <__assert_fail@plt+0x1514>
   12318:	cmp	r0, #118	; 0x76
   1231c:	beq	12350 <__assert_fail@plt+0x14e4>
   12320:	movw	r3, #28900	; 0x70e4
   12324:	movt	r3, #2
   12328:	ldr	r0, [r3]
   1232c:	ldr	r3, [sp, #56]	; 0x38
   12330:	blx	r3
   12334:	str	r6, [r4]
   12338:	add	sp, sp, #20
   1233c:	ldrd	r4, [sp]
   12340:	ldrd	r6, [sp, #8]
   12344:	ldrd	r8, [sp, #16]
   12348:	add	sp, sp, #24
   1234c:	pop	{pc}		; (ldr pc, [sp], #4)
   12350:	add	ip, sp, #60	; 0x3c
   12354:	movw	r0, #28996	; 0x7144
   12358:	movt	r0, #2
   1235c:	mov	r2, r8
   12360:	ldr	r3, [sp, #48]	; 0x30
   12364:	mov	r1, r7
   12368:	str	ip, [sp]
   1236c:	ldr	r0, [r0]
   12370:	str	ip, [sp, #12]
   12374:	bl	14e00 <__assert_fail@plt+0x3f94>
   12378:	mov	r0, r5
   1237c:	bl	10d94 <exit@plt>
   12380:	mov	r0, r5
   12384:	ldr	r3, [sp, #56]	; 0x38
   12388:	blx	r3
   1238c:	b	12334 <__assert_fail@plt+0x14c8>
   12390:	strd	r4, [sp, #-16]!
   12394:	subs	r4, r0, #0
   12398:	str	r6, [sp, #8]
   1239c:	str	lr, [sp, #12]
   123a0:	beq	12438 <__assert_fail@plt+0x15cc>
   123a4:	mov	r1, #47	; 0x2f
   123a8:	bl	10e24 <strrchr@plt>
   123ac:	subs	r5, r0, #0
   123b0:	beq	12410 <__assert_fail@plt+0x15a4>
   123b4:	add	r6, r5, #1
   123b8:	sub	r3, r6, r4
   123bc:	cmp	r3, #6
   123c0:	ble	12410 <__assert_fail@plt+0x15a4>
   123c4:	movw	r1, #23796	; 0x5cf4
   123c8:	movt	r1, #1
   123cc:	mov	r2, #7
   123d0:	sub	r0, r5, #6
   123d4:	bl	10e48 <strncmp@plt>
   123d8:	cmp	r0, #0
   123dc:	bne	12410 <__assert_fail@plt+0x15a4>
   123e0:	movw	r1, #23804	; 0x5cfc
   123e4:	movt	r1, #1
   123e8:	mov	r2, #3
   123ec:	mov	r0, r6
   123f0:	bl	10e48 <strncmp@plt>
   123f4:	cmp	r0, #0
   123f8:	movne	r4, r6
   123fc:	bne	12410 <__assert_fail@plt+0x15a4>
   12400:	add	r4, r5, #4
   12404:	movw	r3, #28968	; 0x7128
   12408:	movt	r3, #2
   1240c:	str	r4, [r3]
   12410:	movw	r2, #29032	; 0x7168
   12414:	movt	r2, #2
   12418:	ldr	r6, [sp, #8]
   1241c:	movw	r3, #28972	; 0x712c
   12420:	movt	r3, #2
   12424:	str	r4, [r2]
   12428:	str	r4, [r3]
   1242c:	ldrd	r4, [sp]
   12430:	add	sp, sp, #12
   12434:	pop	{pc}		; (ldr pc, [sp], #4)
   12438:	movw	r3, #28984	; 0x7138
   1243c:	movt	r3, #2
   12440:	movw	r0, #23740	; 0x5cbc
   12444:	movt	r0, #1
   12448:	ldr	r3, [r3]
   1244c:	mov	r2, #55	; 0x37
   12450:	mov	r1, #1
   12454:	bl	10ce0 <fwrite@plt>
   12458:	bl	10e54 <abort@plt>
   1245c:	strd	r4, [sp, #-16]!
   12460:	mov	r4, #0
   12464:	mov	r5, #0
   12468:	cmp	r1, #10
   1246c:	str	r6, [sp, #8]
   12470:	strd	r4, [r0]
   12474:	strd	r4, [r0, #8]
   12478:	str	lr, [sp, #12]
   1247c:	strd	r4, [r0, #16]
   12480:	strd	r4, [r0, #24]
   12484:	strd	r4, [r0, #32]
   12488:	strd	r4, [r0, #40]	; 0x28
   1248c:	beq	124a4 <__assert_fail@plt+0x1638>
   12490:	ldrd	r4, [sp]
   12494:	str	r1, [r0]
   12498:	ldr	r6, [sp, #8]
   1249c:	add	sp, sp, #12
   124a0:	pop	{pc}		; (ldr pc, [sp], #4)
   124a4:	bl	10e54 <abort@plt>
   124a8:	mov	r2, #5
   124ac:	strd	r4, [sp, #-16]!
   124b0:	mov	r5, r0
   124b4:	str	r6, [sp, #8]
   124b8:	mov	r6, r1
   124bc:	mov	r1, r0
   124c0:	mov	r0, #0
   124c4:	str	lr, [sp, #12]
   124c8:	bl	10ca4 <dcgettext@plt>
   124cc:	cmp	r5, r0
   124d0:	mov	r4, r0
   124d4:	beq	124ec <__assert_fail@plt+0x1680>
   124d8:	mov	r0, r4
   124dc:	ldrd	r4, [sp]
   124e0:	ldr	r6, [sp, #8]
   124e4:	add	sp, sp, #12
   124e8:	pop	{pc}		; (ldr pc, [sp], #4)
   124ec:	bl	155b4 <__assert_fail@plt+0x4748>
   124f0:	ldrb	r3, [r0]
   124f4:	bic	r3, r3, #32
   124f8:	cmp	r3, #85	; 0x55
   124fc:	bne	12564 <__assert_fail@plt+0x16f8>
   12500:	ldrb	r3, [r0, #1]
   12504:	bic	r3, r3, #32
   12508:	cmp	r3, #84	; 0x54
   1250c:	bne	125e4 <__assert_fail@plt+0x1778>
   12510:	ldrb	r3, [r0, #2]
   12514:	bic	r3, r3, #32
   12518:	cmp	r3, #70	; 0x46
   1251c:	bne	125e4 <__assert_fail@plt+0x1778>
   12520:	ldrb	r3, [r0, #3]
   12524:	cmp	r3, #45	; 0x2d
   12528:	bne	125e4 <__assert_fail@plt+0x1778>
   1252c:	ldrb	r3, [r0, #4]
   12530:	cmp	r3, #56	; 0x38
   12534:	bne	125e4 <__assert_fail@plt+0x1778>
   12538:	ldrb	r3, [r0, #5]
   1253c:	cmp	r3, #0
   12540:	bne	125e4 <__assert_fail@plt+0x1778>
   12544:	ldrb	r2, [r4]
   12548:	movw	r3, #23896	; 0x5d58
   1254c:	movt	r3, #1
   12550:	movw	r4, #23908	; 0x5d64
   12554:	movt	r4, #1
   12558:	cmp	r2, #96	; 0x60
   1255c:	movne	r4, r3
   12560:	b	124d8 <__assert_fail@plt+0x166c>
   12564:	cmp	r3, #71	; 0x47
   12568:	bne	125e4 <__assert_fail@plt+0x1778>
   1256c:	ldrb	r3, [r0, #1]
   12570:	bic	r3, r3, #32
   12574:	cmp	r3, #66	; 0x42
   12578:	bne	125e4 <__assert_fail@plt+0x1778>
   1257c:	ldrb	r3, [r0, #2]
   12580:	cmp	r3, #49	; 0x31
   12584:	bne	125e4 <__assert_fail@plt+0x1778>
   12588:	ldrb	r3, [r0, #3]
   1258c:	cmp	r3, #56	; 0x38
   12590:	bne	125e4 <__assert_fail@plt+0x1778>
   12594:	ldrb	r3, [r0, #4]
   12598:	cmp	r3, #48	; 0x30
   1259c:	bne	125e4 <__assert_fail@plt+0x1778>
   125a0:	ldrb	r3, [r0, #5]
   125a4:	cmp	r3, #51	; 0x33
   125a8:	bne	125e4 <__assert_fail@plt+0x1778>
   125ac:	ldrb	r3, [r0, #6]
   125b0:	cmp	r3, #48	; 0x30
   125b4:	bne	125e4 <__assert_fail@plt+0x1778>
   125b8:	ldrb	r3, [r0, #7]
   125bc:	cmp	r3, #0
   125c0:	bne	125e4 <__assert_fail@plt+0x1778>
   125c4:	ldrb	r2, [r4]
   125c8:	movw	r3, #23900	; 0x5d5c
   125cc:	movt	r3, #1
   125d0:	movw	r4, #23904	; 0x5d60
   125d4:	movt	r4, #1
   125d8:	cmp	r2, #96	; 0x60
   125dc:	movne	r4, r3
   125e0:	b	124d8 <__assert_fail@plt+0x166c>
   125e4:	movw	r3, #23912	; 0x5d68
   125e8:	movt	r3, #1
   125ec:	cmp	r6, #9
   125f0:	movw	r4, #23892	; 0x5d54
   125f4:	movt	r4, #1
   125f8:	movne	r4, r3
   125fc:	b	124d8 <__assert_fail@plt+0x166c>
   12600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12604:	strd	r6, [sp, #8]
   12608:	strd	r8, [sp, #16]
   1260c:	strd	sl, [sp, #24]
   12610:	mov	fp, r0
   12614:	mov	sl, r1
   12618:	str	lr, [sp, #32]
   1261c:	sub	sp, sp, #116	; 0x74
   12620:	ldr	r8, [sp, #152]	; 0x98
   12624:	str	r3, [sp, #28]
   12628:	ldr	r3, [sp, #156]	; 0x9c
   1262c:	str	r2, [sp, #32]
   12630:	and	r4, r3, #2
   12634:	ubfx	r3, r3, #1, #1
   12638:	str	r3, [sp, #44]	; 0x2c
   1263c:	bl	10cf8 <__ctype_get_mb_cur_max@plt>
   12640:	str	r0, [sp, #64]	; 0x40
   12644:	cmp	r8, #10
   12648:	ldrls	pc, [pc, r8, lsl #2]
   1264c:	b	13dbc <__assert_fail@plt+0x2f50>
   12650:	andeq	r2, r1, r4, asr sl
   12654:	strdeq	r2, [r1], -r0
   12658:	andeq	r3, r1, ip, asr #1
   1265c:	andeq	r2, r1, r0, lsl fp
   12660:			; <UNDEFINED> instruction: 0x000129b8
   12664:	andeq	r2, r1, r4, lsl #20
   12668:	andeq	r2, r1, r4, lsl #21
   1266c:	andeq	r2, r1, r0, asr #21
   12670:	andeq	r2, r1, ip, ror r6
   12674:	andeq	r2, r1, ip, ror r6
   12678:	andeq	r2, r1, ip, ror r6
   1267c:	cmp	r8, #10
   12680:	beq	126ac <__assert_fail@plt+0x1840>
   12684:	mov	r1, r8
   12688:	movw	r0, #23916	; 0x5d6c
   1268c:	movt	r0, #1
   12690:	bl	124a8 <__assert_fail@plt+0x163c>
   12694:	mov	r1, r8
   12698:	str	r0, [sp, #164]	; 0xa4
   1269c:	movw	r0, #23912	; 0x5d68
   126a0:	movt	r0, #1
   126a4:	bl	124a8 <__assert_fail@plt+0x163c>
   126a8:	str	r0, [sp, #168]	; 0xa8
   126ac:	cmp	r4, #0
   126b0:	movne	r4, #0
   126b4:	beq	13a98 <__assert_fail@plt+0x2c2c>
   126b8:	mov	r3, #1
   126bc:	mov	r5, #0
   126c0:	ldr	r0, [sp, #168]	; 0xa8
   126c4:	str	r3, [sp, #36]	; 0x24
   126c8:	str	r3, [sp, #40]	; 0x28
   126cc:	str	r5, [sp, #68]	; 0x44
   126d0:	bl	10da0 <strlen@plt>
   126d4:	ldr	r3, [sp, #168]	; 0xa8
   126d8:	str	r5, [sp, #48]	; 0x30
   126dc:	str	r0, [sp, #56]	; 0x38
   126e0:	str	r3, [sp, #60]	; 0x3c
   126e4:	str	r5, [sp, #72]	; 0x48
   126e8:	str	r8, [sp, #152]	; 0x98
   126ec:	mov	r8, fp
   126f0:	mov	r9, #0
   126f4:	ldr	fp, [sp, #152]	; 0x98
   126f8:	ldr	r3, [sp, #28]
   126fc:	cmn	r3, #1
   12700:	beq	12c60 <__assert_fail@plt+0x1df4>
   12704:	ldr	r3, [sp, #28]
   12708:	subs	r6, r3, r9
   1270c:	movne	r6, #1
   12710:	cmp	r6, #0
   12714:	beq	12c78 <__assert_fail@plt+0x1e0c>
   12718:	ldr	r0, [sp, #32]
   1271c:	ldr	r7, [sp, #40]	; 0x28
   12720:	add	r3, r0, r9
   12724:	cmp	fp, #2
   12728:	moveq	r7, #0
   1272c:	andne	r7, r7, #1
   12730:	str	r3, [sp, #52]	; 0x34
   12734:	cmp	r7, #0
   12738:	beq	13114 <__assert_fail@plt+0x22a8>
   1273c:	ldr	r2, [sp, #56]	; 0x38
   12740:	cmp	r2, #0
   12744:	beq	133b0 <__assert_fail@plt+0x2544>
   12748:	ldr	r1, [sp, #28]
   1274c:	cmp	r2, #1
   12750:	mov	r3, r2
   12754:	movls	r3, #0
   12758:	movhi	r3, #1
   1275c:	add	r5, r9, r2
   12760:	cmn	r1, #1
   12764:	movne	r3, #0
   12768:	cmp	r3, #0
   1276c:	beq	12778 <__assert_fail@plt+0x190c>
   12770:	bl	10da0 <strlen@plt>
   12774:	str	r0, [sp, #28]
   12778:	ldr	r3, [sp, #28]
   1277c:	cmp	r5, r3
   12780:	bhi	133b0 <__assert_fail@plt+0x2544>
   12784:	ldr	r0, [sp, #52]	; 0x34
   12788:	ldr	r2, [sp, #56]	; 0x38
   1278c:	ldr	r1, [sp, #60]	; 0x3c
   12790:	bl	10c8c <memcmp@plt>
   12794:	cmp	r0, #0
   12798:	bne	133b0 <__assert_fail@plt+0x2544>
   1279c:	ldr	r3, [sp, #44]	; 0x2c
   127a0:	cmp	r3, #0
   127a4:	bne	13ce0 <__assert_fail@plt+0x2e74>
   127a8:	ldr	r3, [sp, #52]	; 0x34
   127ac:	ldrb	r5, [r3]
   127b0:	cmp	r5, #126	; 0x7e
   127b4:	ldrls	pc, [pc, r5, lsl #2]
   127b8:	b	13070 <__assert_fail@plt+0x2204>
   127bc:	andeq	r2, r1, r4, ror pc
   127c0:	andeq	r3, r1, r0, ror r0
   127c4:	andeq	r3, r1, r0, ror r0
   127c8:	andeq	r3, r1, r0, ror r0
   127cc:	andeq	r3, r1, r0, ror r0
   127d0:	andeq	r3, r1, r0, ror r0
   127d4:	andeq	r3, r1, r0, ror r0
   127d8:	andeq	r2, r1, r8, asr #30
   127dc:	andeq	r2, r1, r0, asr #30
   127e0:	andeq	r2, r1, r8, lsl #29
   127e4:	andeq	r2, r1, r4, lsr pc
   127e8:	andeq	r2, r1, r0, lsl #29
   127ec:	andeq	r2, r1, r0, lsl pc
   127f0:	andeq	r2, r1, ip, asr pc
   127f4:	andeq	r3, r1, r0, ror r0
   127f8:	andeq	r3, r1, r0, ror r0
   127fc:	andeq	r3, r1, r0, ror r0
   12800:	andeq	r3, r1, r0, ror r0
   12804:	andeq	r3, r1, r0, ror r0
   12808:	andeq	r3, r1, r0, ror r0
   1280c:	andeq	r3, r1, r0, ror r0
   12810:	andeq	r3, r1, r0, ror r0
   12814:	andeq	r3, r1, r0, ror r0
   12818:	andeq	r3, r1, r0, ror r0
   1281c:	andeq	r3, r1, r0, ror r0
   12820:	andeq	r3, r1, r0, ror r0
   12824:	andeq	r3, r1, r0, ror r0
   12828:	andeq	r3, r1, r0, ror r0
   1282c:	andeq	r3, r1, r0, ror r0
   12830:	andeq	r3, r1, r0, ror r0
   12834:	andeq	r3, r1, r0, ror r0
   12838:	andeq	r3, r1, r0, ror r0
   1283c:	andeq	r3, r1, ip, asr #32
   12840:	andeq	r2, r1, r4, asr pc
   12844:	andeq	r2, r1, r4, asr pc
   12848:	andeq	r3, r1, r0, lsr r0
   1284c:	andeq	r2, r1, r4, asr pc
   12850:	andeq	r3, r1, r4, rrx
   12854:	andeq	r2, r1, r4, asr pc
   12858:			; <UNDEFINED> instruction: 0x00012db0
   1285c:	andeq	r2, r1, r4, asr pc
   12860:	andeq	r2, r1, r4, asr pc
   12864:	andeq	r2, r1, r4, asr pc
   12868:	andeq	r3, r1, r4, rrx
   1286c:	andeq	r3, r1, r4, rrx
   12870:	andeq	r3, r1, r4, rrx
   12874:	andeq	r3, r1, r4, rrx
   12878:	andeq	r3, r1, r4, rrx
   1287c:	andeq	r3, r1, r4, rrx
   12880:	andeq	r3, r1, r4, rrx
   12884:	andeq	r3, r1, r4, rrx
   12888:	andeq	r3, r1, r4, rrx
   1288c:	andeq	r3, r1, r4, rrx
   12890:	andeq	r3, r1, r4, rrx
   12894:	andeq	r3, r1, r4, rrx
   12898:	andeq	r3, r1, r4, rrx
   1289c:	andeq	r3, r1, r4, rrx
   128a0:	andeq	r3, r1, r4, rrx
   128a4:	andeq	r3, r1, r4, rrx
   128a8:	andeq	r2, r1, r4, asr pc
   128ac:	andeq	r2, r1, r4, asr pc
   128b0:	andeq	r2, r1, r4, asr pc
   128b4:	andeq	r2, r1, r4, asr pc
   128b8:	andeq	r2, r1, r4, lsl #27
   128bc:	andeq	r3, r1, r0, ror r0
   128c0:	andeq	r3, r1, r4, rrx
   128c4:	andeq	r3, r1, r4, rrx
   128c8:	andeq	r3, r1, r4, rrx
   128cc:	andeq	r3, r1, r4, rrx
   128d0:	andeq	r3, r1, r4, rrx
   128d4:	andeq	r3, r1, r4, rrx
   128d8:	andeq	r3, r1, r4, rrx
   128dc:	andeq	r3, r1, r4, rrx
   128e0:	andeq	r3, r1, r4, rrx
   128e4:	andeq	r3, r1, r4, rrx
   128e8:	andeq	r3, r1, r4, rrx
   128ec:	andeq	r3, r1, r4, rrx
   128f0:	andeq	r3, r1, r4, rrx
   128f4:	andeq	r3, r1, r4, rrx
   128f8:	andeq	r3, r1, r4, rrx
   128fc:	andeq	r3, r1, r4, rrx
   12900:	andeq	r3, r1, r4, rrx
   12904:	andeq	r3, r1, r4, rrx
   12908:	andeq	r3, r1, r4, rrx
   1290c:	andeq	r3, r1, r4, rrx
   12910:	andeq	r3, r1, r4, rrx
   12914:	andeq	r3, r1, r4, rrx
   12918:	andeq	r3, r1, r4, rrx
   1291c:	andeq	r3, r1, r4, rrx
   12920:	andeq	r3, r1, r4, rrx
   12924:	andeq	r3, r1, r4, rrx
   12928:	andeq	r2, r1, r4, asr pc
   1292c:	andeq	r2, r1, ip, lsr #26
   12930:	andeq	r3, r1, r4, rrx
   12934:	andeq	r2, r1, r4, asr pc
   12938:	andeq	r3, r1, r4, rrx
   1293c:	andeq	r2, r1, r4, asr pc
   12940:	andeq	r3, r1, r4, rrx
   12944:	andeq	r3, r1, r4, rrx
   12948:	andeq	r3, r1, r4, rrx
   1294c:	andeq	r3, r1, r4, rrx
   12950:	andeq	r3, r1, r4, rrx
   12954:	andeq	r3, r1, r4, rrx
   12958:	andeq	r3, r1, r4, rrx
   1295c:	andeq	r3, r1, r4, rrx
   12960:	andeq	r3, r1, r4, rrx
   12964:	andeq	r3, r1, r4, rrx
   12968:	andeq	r3, r1, r4, rrx
   1296c:	andeq	r3, r1, r4, rrx
   12970:	andeq	r3, r1, r4, rrx
   12974:	andeq	r3, r1, r4, rrx
   12978:	andeq	r3, r1, r4, rrx
   1297c:	andeq	r3, r1, r4, rrx
   12980:	andeq	r3, r1, r4, rrx
   12984:	andeq	r3, r1, r4, rrx
   12988:	andeq	r3, r1, r4, rrx
   1298c:	andeq	r3, r1, r4, rrx
   12990:	andeq	r3, r1, r4, rrx
   12994:	andeq	r3, r1, r4, rrx
   12998:	andeq	r3, r1, r4, rrx
   1299c:	andeq	r3, r1, r4, rrx
   129a0:	andeq	r3, r1, r4, rrx
   129a4:	andeq	r3, r1, r4, rrx
   129a8:	andeq	r2, r1, r0, asr fp
   129ac:	andeq	r2, r1, r4, asr pc
   129b0:	andeq	r2, r1, r0, asr fp
   129b4:	andeq	r3, r1, r0, lsr r0
   129b8:	cmp	r4, #0
   129bc:	moveq	r3, #1
   129c0:	streq	r3, [sp, #40]	; 0x28
   129c4:	beq	130d8 <__assert_fail@plt+0x226c>
   129c8:	mov	r3, #0
   129cc:	mov	r2, #1
   129d0:	mov	r4, r3
   129d4:	str	r2, [sp, #36]	; 0x24
   129d8:	str	r2, [sp, #44]	; 0x2c
   129dc:	str	r2, [sp, #56]	; 0x38
   129e0:	str	r3, [sp, #68]	; 0x44
   129e4:	movw	r3, #23912	; 0x5d68
   129e8:	movt	r3, #1
   129ec:	str	r4, [sp, #40]	; 0x28
   129f0:	mov	r8, #2
   129f4:	str	r4, [sp, #48]	; 0x30
   129f8:	str	r3, [sp, #60]	; 0x3c
   129fc:	str	r4, [sp, #72]	; 0x48
   12a00:	b	126e8 <__assert_fail@plt+0x187c>
   12a04:	cmp	r4, #0
   12a08:	bne	13c54 <__assert_fail@plt+0x2de8>
   12a0c:	cmp	sl, #0
   12a10:	beq	13a14 <__assert_fail@plt+0x2ba8>
   12a14:	mov	r3, #34	; 0x22
   12a18:	mov	r1, r4
   12a1c:	mov	r2, #1
   12a20:	strb	r3, [fp]
   12a24:	movw	r3, #23892	; 0x5d54
   12a28:	movt	r3, #1
   12a2c:	mov	r4, r2
   12a30:	str	r2, [sp, #36]	; 0x24
   12a34:	str	r2, [sp, #40]	; 0x28
   12a38:	str	r1, [sp, #44]	; 0x2c
   12a3c:	str	r1, [sp, #48]	; 0x30
   12a40:	str	r2, [sp, #56]	; 0x38
   12a44:	str	r3, [sp, #60]	; 0x3c
   12a48:	str	r1, [sp, #68]	; 0x44
   12a4c:	str	r1, [sp, #72]	; 0x48
   12a50:	b	126e8 <__assert_fail@plt+0x187c>
   12a54:	mov	r3, #0
   12a58:	mov	r4, r8
   12a5c:	str	r3, [sp, #40]	; 0x28
   12a60:	str	r3, [sp, #44]	; 0x2c
   12a64:	str	r3, [sp, #48]	; 0x30
   12a68:	str	r8, [sp, #56]	; 0x38
   12a6c:	str	r3, [sp, #60]	; 0x3c
   12a70:	str	r3, [sp, #68]	; 0x44
   12a74:	mov	r3, #1
   12a78:	str	r3, [sp, #36]	; 0x24
   12a7c:	str	r8, [sp, #72]	; 0x48
   12a80:	b	126e8 <__assert_fail@plt+0x187c>
   12a84:	mov	r3, #1
   12a88:	mov	r2, #0
   12a8c:	mov	r4, r2
   12a90:	mov	r8, #5
   12a94:	str	r3, [sp, #36]	; 0x24
   12a98:	str	r3, [sp, #40]	; 0x28
   12a9c:	str	r3, [sp, #44]	; 0x2c
   12aa0:	str	r2, [sp, #48]	; 0x30
   12aa4:	str	r3, [sp, #56]	; 0x38
   12aa8:	movw	r3, #23892	; 0x5d54
   12aac:	movt	r3, #1
   12ab0:	str	r3, [sp, #60]	; 0x3c
   12ab4:	str	r2, [sp, #68]	; 0x44
   12ab8:	str	r2, [sp, #72]	; 0x48
   12abc:	b	126e8 <__assert_fail@plt+0x187c>
   12ac0:	mov	r3, #0
   12ac4:	mov	r2, #1
   12ac8:	mov	r4, r3
   12acc:	str	r2, [sp, #36]	; 0x24
   12ad0:	str	r2, [sp, #40]	; 0x28
   12ad4:	str	r3, [sp, #44]	; 0x2c
   12ad8:	str	r3, [sp, #48]	; 0x30
   12adc:	str	r3, [sp, #56]	; 0x38
   12ae0:	str	r3, [sp, #60]	; 0x3c
   12ae4:	str	r3, [sp, #68]	; 0x44
   12ae8:	str	r3, [sp, #72]	; 0x48
   12aec:	b	126e8 <__assert_fail@plt+0x187c>
   12af0:	mov	r2, #1
   12af4:	mov	r3, #0
   12af8:	mov	r4, r3
   12afc:	str	r2, [sp, #36]	; 0x24
   12b00:	str	r2, [sp, #44]	; 0x2c
   12b04:	str	r8, [sp, #56]	; 0x38
   12b08:	str	r3, [sp, #68]	; 0x44
   12b0c:	b	129e4 <__assert_fail@plt+0x1b78>
   12b10:	mov	r3, #1
   12b14:	mov	r2, #0
   12b18:	mov	r4, r2
   12b1c:	mov	r8, #2
   12b20:	str	r3, [sp, #36]	; 0x24
   12b24:	str	r3, [sp, #40]	; 0x28
   12b28:	str	r3, [sp, #44]	; 0x2c
   12b2c:	str	r2, [sp, #48]	; 0x30
   12b30:	str	r3, [sp, #56]	; 0x38
   12b34:	movw	r3, #23912	; 0x5d68
   12b38:	movt	r3, #1
   12b3c:	str	r3, [sp, #60]	; 0x3c
   12b40:	str	r2, [sp, #68]	; 0x44
   12b44:	str	r2, [sp, #72]	; 0x48
   12b48:	b	126e8 <__assert_fail@plt+0x187c>
   12b4c:	mov	r7, #0
   12b50:	ldr	r3, [sp, #28]
   12b54:	cmn	r3, #1
   12b58:	beq	13630 <__assert_fail@plt+0x27c4>
   12b5c:	ldr	r3, [sp, #28]
   12b60:	subs	r2, r3, #1
   12b64:	movne	r2, #1
   12b68:	sub	r3, fp, #2
   12b6c:	cmp	r2, #0
   12b70:	clz	r3, r3
   12b74:	lsr	r3, r3, #5
   12b78:	bne	12b84 <__assert_fail@plt+0x1d18>
   12b7c:	cmp	r9, #0
   12b80:	beq	13390 <__assert_fail@plt+0x2524>
   12b84:	mov	r6, #0
   12b88:	ldr	r2, [sp, #40]	; 0x28
   12b8c:	eor	r2, r2, #1
   12b90:	orrs	r3, r3, r2
   12b94:	bne	12d6c <__assert_fail@plt+0x1f00>
   12b98:	ldr	r2, [sp, #160]	; 0xa0
   12b9c:	cmp	r2, #0
   12ba0:	beq	12bc0 <__assert_fail@plt+0x1d54>
   12ba4:	ldr	r0, [sp, #160]	; 0xa0
   12ba8:	ubfx	r1, r5, #5, #8
   12bac:	and	r2, r5, #31
   12bb0:	ldr	r1, [r0, r1, lsl #2]
   12bb4:	lsr	r2, r1, r2
   12bb8:	tst	r2, #1
   12bbc:	bne	12bc8 <__assert_fail@plt+0x1d5c>
   12bc0:	cmp	r7, #0
   12bc4:	beq	12e38 <__assert_fail@plt+0x1fcc>
   12bc8:	ldr	r2, [sp, #44]	; 0x2c
   12bcc:	sub	r3, fp, #2
   12bd0:	clz	r3, r3
   12bd4:	lsr	r3, r3, #5
   12bd8:	cmp	r2, #0
   12bdc:	bne	13984 <__assert_fail@plt+0x2b18>
   12be0:	ldr	r2, [sp, #48]	; 0x30
   12be4:	eor	r2, r2, #1
   12be8:	ands	r3, r3, r2
   12bec:	beq	12c24 <__assert_fail@plt+0x1db8>
   12bf0:	cmp	sl, r4
   12bf4:	str	r3, [sp, #48]	; 0x30
   12bf8:	movhi	r2, #39	; 0x27
   12bfc:	strbhi	r2, [r8, r4]
   12c00:	add	r2, r4, #1
   12c04:	cmp	sl, r2
   12c08:	movhi	r1, #36	; 0x24
   12c0c:	strbhi	r1, [r8, r2]
   12c10:	add	r2, r4, #2
   12c14:	add	r4, r4, #3
   12c18:	cmp	sl, r2
   12c1c:	movhi	r1, #39	; 0x27
   12c20:	strbhi	r1, [r8, r2]
   12c24:	cmp	r4, sl
   12c28:	add	r9, r9, #1
   12c2c:	movcc	r3, #92	; 0x5c
   12c30:	strbcc	r3, [r8, r4]
   12c34:	add	r4, r4, #1
   12c38:	cmp	r4, sl
   12c3c:	ldr	r3, [sp, #36]	; 0x24
   12c40:	strbcc	r5, [r8, r4]
   12c44:	cmp	r6, #0
   12c48:	add	r4, r4, #1
   12c4c:	moveq	r3, #0
   12c50:	str	r3, [sp, #36]	; 0x24
   12c54:	ldr	r3, [sp, #28]
   12c58:	cmn	r3, #1
   12c5c:	bne	12704 <__assert_fail@plt+0x1898>
   12c60:	ldr	r3, [sp, #32]
   12c64:	ldrb	r6, [r3, r9]
   12c68:	adds	r6, r6, #0
   12c6c:	movne	r6, #1
   12c70:	cmp	r6, #0
   12c74:	bne	12718 <__assert_fail@plt+0x18ac>
   12c78:	str	fp, [sp, #152]	; 0x98
   12c7c:	mov	fp, r8
   12c80:	cmp	r4, #0
   12c84:	ldr	r1, [sp, #44]	; 0x2c
   12c88:	movne	r3, #0
   12c8c:	ldr	r8, [sp, #152]	; 0x98
   12c90:	sub	r2, r8, #2
   12c94:	clz	r2, r2
   12c98:	lsr	r2, r2, #5
   12c9c:	andeq	r3, r2, r1
   12ca0:	cmp	r3, #0
   12ca4:	bne	13d60 <__assert_fail@plt+0x2ef4>
   12ca8:	eor	r3, r1, #1
   12cac:	ands	r2, r2, r3
   12cb0:	beq	13c8c <__assert_fail@plt+0x2e20>
   12cb4:	ldr	r3, [sp, #68]	; 0x44
   12cb8:	cmp	r3, #0
   12cbc:	beq	13c90 <__assert_fail@plt+0x2e24>
   12cc0:	ldr	r3, [sp, #36]	; 0x24
   12cc4:	cmp	r3, #0
   12cc8:	bne	13d1c <__assert_fail@plt+0x2eb0>
   12ccc:	ldr	r3, [sp, #72]	; 0x48
   12cd0:	adds	r3, r3, #0
   12cd4:	movne	r3, #1
   12cd8:	cmp	sl, #0
   12cdc:	movne	r3, #0
   12ce0:	cmp	r3, #0
   12ce4:	ldreq	r2, [sp, #68]	; 0x44
   12ce8:	beq	13c90 <__assert_fail@plt+0x2e24>
   12cec:	ldr	r2, [sp, #72]	; 0x48
   12cf0:	str	r3, [sp, #68]	; 0x44
   12cf4:	movw	r3, #23912	; 0x5d68
   12cf8:	movt	r3, #1
   12cfc:	mov	r1, #39	; 0x27
   12d00:	mov	r4, #1
   12d04:	ldr	sl, [sp, #72]	; 0x48
   12d08:	mov	r8, #2
   12d0c:	str	r3, [sp, #60]	; 0x3c
   12d10:	mov	r3, #0
   12d14:	strb	r1, [fp]
   12d18:	str	r3, [sp, #44]	; 0x2c
   12d1c:	str	r4, [sp, #56]	; 0x38
   12d20:	str	r2, [sp, #72]	; 0x48
   12d24:	b	126e8 <__assert_fail@plt+0x187c>
   12d28:	mov	r7, #0
   12d2c:	cmp	fp, #2
   12d30:	beq	13610 <__assert_fail@plt+0x27a4>
   12d34:	ldr	r2, [sp, #40]	; 0x28
   12d38:	ldr	r3, [sp, #56]	; 0x38
   12d3c:	ldr	r1, [sp, #44]	; 0x2c
   12d40:	cmp	r3, #0
   12d44:	moveq	r3, #0
   12d48:	andne	r3, r2, r1
   12d4c:	cmp	r3, #0
   12d50:	moveq	r5, #92	; 0x5c
   12d54:	moveq	r3, r5
   12d58:	bne	1361c <__assert_fail@plt+0x27b0>
   12d5c:	ldr	r2, [sp, #40]	; 0x28
   12d60:	cmp	r2, #0
   12d64:	bne	13a58 <__assert_fail@plt+0x2bec>
   12d68:	mov	r6, #0
   12d6c:	ldr	r3, [sp, #44]	; 0x2c
   12d70:	cmp	r3, #0
   12d74:	beq	13608 <__assert_fail@plt+0x279c>
   12d78:	mov	r3, #0
   12d7c:	b	12b98 <__assert_fail@plt+0x1d2c>
   12d80:	mov	r7, #0
   12d84:	cmp	fp, #2
   12d88:	beq	13680 <__assert_fail@plt+0x2814>
   12d8c:	cmp	fp, #5
   12d90:	beq	13644 <__assert_fail@plt+0x27d8>
   12d94:	sub	r3, fp, #2
   12d98:	mov	r6, #0
   12d9c:	clz	r3, r3
   12da0:	mov	r5, #63	; 0x3f
   12da4:	lsr	r3, r3, #5
   12da8:	b	12b88 <__assert_fail@plt+0x1d1c>
   12dac:	mov	r7, #0
   12db0:	cmp	fp, #2
   12db4:	movne	r3, #0
   12db8:	movne	r5, #39	; 0x27
   12dbc:	strne	r6, [sp, #68]	; 0x44
   12dc0:	bne	12b88 <__assert_fail@plt+0x1d1c>
   12dc4:	ldr	r3, [sp, #44]	; 0x2c
   12dc8:	cmp	r3, #0
   12dcc:	bne	13a88 <__assert_fail@plt+0x2c1c>
   12dd0:	ldr	r3, [sp, #72]	; 0x48
   12dd4:	cmp	sl, #0
   12dd8:	clz	r3, r3
   12ddc:	lsr	r3, r3, #5
   12de0:	moveq	r3, #0
   12de4:	cmp	r3, #0
   12de8:	bne	139b4 <__assert_fail@plt+0x2b48>
   12dec:	cmp	sl, r4
   12df0:	movhi	r3, #39	; 0x27
   12df4:	strbhi	r3, [r8, r4]
   12df8:	add	r3, r4, #1
   12dfc:	cmp	sl, r3
   12e00:	movhi	r2, #92	; 0x5c
   12e04:	strbhi	r2, [r8, r3]
   12e08:	add	r3, r4, #2
   12e0c:	cmp	sl, r3
   12e10:	bls	12e1c <__assert_fail@plt+0x1fb0>
   12e14:	mov	r2, #39	; 0x27
   12e18:	strb	r2, [r8, r3]
   12e1c:	mov	r3, #0
   12e20:	cmp	r7, #0
   12e24:	add	r4, r4, #3
   12e28:	mov	r5, #39	; 0x27
   12e2c:	str	r3, [sp, #48]	; 0x30
   12e30:	str	r6, [sp, #68]	; 0x44
   12e34:	bne	12bc8 <__assert_fail@plt+0x1d5c>
   12e38:	ldr	r2, [sp, #48]	; 0x30
   12e3c:	eor	r3, r3, #1
   12e40:	add	r9, r9, #1
   12e44:	and	r3, r3, r2
   12e48:	uxtb	r3, r3
   12e4c:	cmp	r3, #0
   12e50:	beq	12c38 <__assert_fail@plt+0x1dcc>
   12e54:	cmp	sl, r4
   12e58:	movhi	r3, #39	; 0x27
   12e5c:	strbhi	r3, [r8, r4]
   12e60:	add	r3, r4, #1
   12e64:	add	r4, r4, #2
   12e68:	cmp	sl, r3
   12e6c:	movhi	r2, #39	; 0x27
   12e70:	strbhi	r2, [r8, r3]
   12e74:	mov	r3, #0
   12e78:	str	r3, [sp, #48]	; 0x30
   12e7c:	b	12c38 <__assert_fail@plt+0x1dcc>
   12e80:	mov	r3, #118	; 0x76
   12e84:	b	12d5c <__assert_fail@plt+0x1ef0>
   12e88:	mov	r3, #116	; 0x74
   12e8c:	ldr	r2, [sp, #44]	; 0x2c
   12e90:	cmp	fp, #2
   12e94:	movne	r2, #0
   12e98:	andeq	r2, r2, #1
   12e9c:	cmp	r2, #0
   12ea0:	beq	12d5c <__assert_fail@plt+0x1ef0>
   12ea4:	mov	fp, r8
   12ea8:	mov	r8, #2
   12eac:	ldr	r3, [sp, #40]	; 0x28
   12eb0:	cmp	r3, #0
   12eb4:	movne	r8, #4
   12eb8:	mov	lr, #0
   12ebc:	mov	r0, fp
   12ec0:	ldr	r2, [sp, #32]
   12ec4:	ldr	r3, [sp, #156]	; 0x9c
   12ec8:	ldr	r1, [sp, #164]	; 0xa4
   12ecc:	bic	ip, r3, #2
   12ed0:	ldr	r3, [sp, #28]
   12ed4:	stm	sp, {r8, ip, lr}
   12ed8:	ldr	ip, [sp, #168]	; 0xa8
   12edc:	str	r1, [sp, #12]
   12ee0:	mov	r1, sl
   12ee4:	str	ip, [sp, #16]
   12ee8:	bl	12600 <__assert_fail@plt+0x1794>
   12eec:	mov	r4, r0
   12ef0:	mov	r0, r4
   12ef4:	add	sp, sp, #116	; 0x74
   12ef8:	ldrd	r4, [sp]
   12efc:	ldrd	r6, [sp, #8]
   12f00:	ldrd	r8, [sp, #16]
   12f04:	ldrd	sl, [sp, #24]
   12f08:	add	sp, sp, #32
   12f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f10:	mov	r5, #102	; 0x66
   12f14:	ldr	r2, [sp, #44]	; 0x2c
   12f18:	sub	r3, fp, #2
   12f1c:	clz	r3, r3
   12f20:	lsr	r3, r3, #5
   12f24:	cmp	r2, #0
   12f28:	bne	13984 <__assert_fail@plt+0x2b18>
   12f2c:	mov	r6, r2
   12f30:	b	12c24 <__assert_fail@plt+0x1db8>
   12f34:	mov	r5, #110	; 0x6e
   12f38:	mov	r6, #0
   12f3c:	b	12bc8 <__assert_fail@plt+0x1d5c>
   12f40:	mov	r5, #98	; 0x62
   12f44:	b	12f14 <__assert_fail@plt+0x20a8>
   12f48:	mov	r5, #97	; 0x61
   12f4c:	b	12f14 <__assert_fail@plt+0x20a8>
   12f50:	mov	r7, #0
   12f54:	mov	r6, #0
   12f58:	b	12d78 <__assert_fail@plt+0x1f0c>
   12f5c:	mov	r5, #114	; 0x72
   12f60:	b	12f38 <__assert_fail@plt+0x20cc>
   12f64:	ldr	r3, [sp, #44]	; 0x2c
   12f68:	cmp	r3, #0
   12f6c:	bne	13cfc <__assert_fail@plt+0x2e90>
   12f70:	mov	r7, r3
   12f74:	ldr	r3, [sp, #48]	; 0x30
   12f78:	sub	r2, fp, #2
   12f7c:	clz	r2, r2
   12f80:	lsr	r2, r2, #5
   12f84:	eor	r3, r3, #1
   12f88:	ands	r3, r2, r3
   12f8c:	beq	139a0 <__assert_fail@plt+0x2b34>
   12f90:	cmp	sl, r4
   12f94:	movhi	r1, #39	; 0x27
   12f98:	strbhi	r1, [r8, r4]
   12f9c:	add	r1, r4, #1
   12fa0:	cmp	sl, r1
   12fa4:	movhi	r0, #36	; 0x24
   12fa8:	strbhi	r0, [r8, r1]
   12fac:	add	r1, r4, #2
   12fb0:	cmp	sl, r1
   12fb4:	movhi	r0, #39	; 0x27
   12fb8:	strbhi	r0, [r8, r1]
   12fbc:	add	r1, r4, #3
   12fc0:	cmp	sl, r1
   12fc4:	bls	139f8 <__assert_fail@plt+0x2b8c>
   12fc8:	mov	r4, r1
   12fcc:	mov	r1, #92	; 0x5c
   12fd0:	mov	r0, r4
   12fd4:	str	r3, [sp, #48]	; 0x30
   12fd8:	strb	r1, [r8, r4]
   12fdc:	cmp	fp, #2
   12fe0:	add	r4, r4, #1
   12fe4:	beq	13a48 <__assert_fail@plt+0x2bdc>
   12fe8:	ldr	r1, [sp, #28]
   12fec:	add	r3, r9, #1
   12ff0:	cmp	r3, r1
   12ff4:	bcs	1300c <__assert_fail@plt+0x21a0>
   12ff8:	ldr	r1, [sp, #32]
   12ffc:	ldrb	r3, [r1, r3]
   13000:	sub	r3, r3, #48	; 0x30
   13004:	cmp	r3, #9
   13008:	bls	13a60 <__assert_fail@plt+0x2bf4>
   1300c:	mov	r5, #48	; 0x30
   13010:	ldr	r3, [sp, #40]	; 0x28
   13014:	eor	r3, r3, #1
   13018:	orrs	r2, r2, r3
   1301c:	mov	r3, r6
   13020:	moveq	r6, r2
   13024:	beq	12b98 <__assert_fail@plt+0x1d2c>
   13028:	mov	r6, #0
   1302c:	b	12bc0 <__assert_fail@plt+0x1d54>
   13030:	cmp	r9, #0
   13034:	mov	r2, r7
   13038:	bne	135d8 <__assert_fail@plt+0x276c>
   1303c:	mov	r6, r7
   13040:	mov	r3, r9
   13044:	mov	r7, r2
   13048:	b	12b88 <__assert_fail@plt+0x1d1c>
   1304c:	mov	r2, r7
   13050:	mov	r6, r7
   13054:	mov	r3, #0
   13058:	mov	r7, r2
   1305c:	mov	r5, #32
   13060:	b	12b88 <__assert_fail@plt+0x1d1c>
   13064:	mov	r6, r7
   13068:	b	12d78 <__assert_fail@plt+0x1f0c>
   1306c:	mov	r7, #0
   13070:	ldr	r3, [sp, #64]	; 0x40
   13074:	cmp	r3, #1
   13078:	bne	13698 <__assert_fail@plt+0x282c>
   1307c:	bl	10d88 <__ctype_b_loc@plt>
   13080:	ldr	r2, [r0]
   13084:	sxth	r3, r5
   13088:	lsl	r3, r3, #1
   1308c:	ldr	r1, [sp, #64]	; 0x40
   13090:	ldrh	r3, [r2, r3]
   13094:	mov	ip, r1
   13098:	and	r3, r3, #16384	; 0x4000
   1309c:	cmp	r3, #0
   130a0:	ldr	r3, [sp, #40]	; 0x28
   130a4:	movne	r6, #1
   130a8:	moveq	r6, #0
   130ac:	movne	r2, #0
   130b0:	andeq	r2, r3, #1
   130b4:	cmp	r2, #0
   130b8:	bne	139e0 <__assert_fail@plt+0x2b74>
   130bc:	sub	r3, fp, #2
   130c0:	clz	r3, r3
   130c4:	lsr	r3, r3, #5
   130c8:	b	12b88 <__assert_fail@plt+0x1d1c>
   130cc:	cmp	r4, #0
   130d0:	bne	13d70 <__assert_fail@plt+0x2f04>
   130d4:	str	r4, [sp, #40]	; 0x28
   130d8:	cmp	sl, #0
   130dc:	bne	13da0 <__assert_fail@plt+0x2f34>
   130e0:	mov	r3, #1
   130e4:	movw	r2, #23912	; 0x5d68
   130e8:	movt	r2, #1
   130ec:	mov	r4, r3
   130f0:	mov	r8, #2
   130f4:	str	r3, [sp, #36]	; 0x24
   130f8:	str	sl, [sp, #44]	; 0x2c
   130fc:	str	sl, [sp, #48]	; 0x30
   13100:	str	r3, [sp, #56]	; 0x38
   13104:	str	r2, [sp, #60]	; 0x3c
   13108:	str	sl, [sp, #68]	; 0x44
   1310c:	str	sl, [sp, #72]	; 0x48
   13110:	b	126e8 <__assert_fail@plt+0x187c>
   13114:	ldr	r3, [sp, #32]
   13118:	ldrb	r5, [r3, r9]
   1311c:	cmp	r5, #126	; 0x7e
   13120:	ldrls	pc, [pc, r5, lsl #2]
   13124:	b	13070 <__assert_fail@plt+0x2204>
   13128:	andeq	r3, r1, ip, asr #6
   1312c:	andeq	r3, r1, r0, ror r0
   13130:	andeq	r3, r1, r0, ror r0
   13134:	andeq	r3, r1, r0, ror r0
   13138:	andeq	r3, r1, r0, ror r0
   1313c:	andeq	r3, r1, r0, ror r0
   13140:	andeq	r3, r1, r0, ror r0
   13144:	andeq	r3, r1, r4, asr #6
   13148:	andeq	r3, r1, ip, lsr r3
   1314c:	andeq	r2, r1, r8, lsl #29
   13150:	andeq	r3, r1, r4, lsr r3
   13154:	andeq	r2, r1, r0, lsl #29
   13158:	andeq	r3, r1, ip, lsr #6
   1315c:	andeq	r3, r1, r4, lsr #6
   13160:	andeq	r3, r1, r0, ror r0
   13164:	andeq	r3, r1, r0, ror r0
   13168:	andeq	r3, r1, r0, ror r0
   1316c:	andeq	r3, r1, r0, ror r0
   13170:	andeq	r3, r1, r0, ror r0
   13174:	andeq	r3, r1, r0, ror r0
   13178:	andeq	r3, r1, r0, ror r0
   1317c:	andeq	r3, r1, r0, ror r0
   13180:	andeq	r3, r1, r0, ror r0
   13184:	andeq	r3, r1, r0, ror r0
   13188:	andeq	r3, r1, r0, ror r0
   1318c:	andeq	r3, r1, r0, ror r0
   13190:	andeq	r3, r1, r0, ror r0
   13194:	andeq	r3, r1, r0, ror r0
   13198:	andeq	r3, r1, r0, ror r0
   1319c:	andeq	r3, r1, r0, ror r0
   131a0:	andeq	r3, r1, r0, ror r0
   131a4:	andeq	r3, r1, r0, ror r0
   131a8:	andeq	r3, r1, r0, lsr #7
   131ac:	andeq	r3, r1, r0, lsl #7
   131b0:	andeq	r3, r1, r0, lsl #7
   131b4:	andeq	r3, r1, r0, ror r3
   131b8:	andeq	r3, r1, r0, lsl #7
   131bc:	strheq	r3, [r1], -ip
   131c0:	andeq	r3, r1, r0, lsl #7
   131c4:			; <UNDEFINED> instruction: 0x00012db0
   131c8:	andeq	r3, r1, r0, lsl #7
   131cc:	andeq	r3, r1, r0, lsl #7
   131d0:	andeq	r3, r1, r0, lsl #7
   131d4:	strheq	r3, [r1], -ip
   131d8:	strheq	r3, [r1], -ip
   131dc:	strheq	r3, [r1], -ip
   131e0:	strheq	r3, [r1], -ip
   131e4:	strheq	r3, [r1], -ip
   131e8:	strheq	r3, [r1], -ip
   131ec:	strheq	r3, [r1], -ip
   131f0:	strheq	r3, [r1], -ip
   131f4:	strheq	r3, [r1], -ip
   131f8:	strheq	r3, [r1], -ip
   131fc:	strheq	r3, [r1], -ip
   13200:	strheq	r3, [r1], -ip
   13204:	strheq	r3, [r1], -ip
   13208:	strheq	r3, [r1], -ip
   1320c:	strheq	r3, [r1], -ip
   13210:	strheq	r3, [r1], -ip
   13214:	andeq	r3, r1, r0, lsl #7
   13218:	andeq	r3, r1, r0, lsl #7
   1321c:	andeq	r3, r1, r0, lsl #7
   13220:	andeq	r3, r1, r0, lsl #7
   13224:	andeq	r2, r1, r4, lsl #27
   13228:	andeq	r3, r1, r0, ror r0
   1322c:	strheq	r3, [r1], -ip
   13230:	strheq	r3, [r1], -ip
   13234:	strheq	r3, [r1], -ip
   13238:	strheq	r3, [r1], -ip
   1323c:	strheq	r3, [r1], -ip
   13240:	strheq	r3, [r1], -ip
   13244:	strheq	r3, [r1], -ip
   13248:	strheq	r3, [r1], -ip
   1324c:	strheq	r3, [r1], -ip
   13250:	strheq	r3, [r1], -ip
   13254:	strheq	r3, [r1], -ip
   13258:	strheq	r3, [r1], -ip
   1325c:	strheq	r3, [r1], -ip
   13260:	strheq	r3, [r1], -ip
   13264:	strheq	r3, [r1], -ip
   13268:	strheq	r3, [r1], -ip
   1326c:	strheq	r3, [r1], -ip
   13270:	strheq	r3, [r1], -ip
   13274:	strheq	r3, [r1], -ip
   13278:	strheq	r3, [r1], -ip
   1327c:	strheq	r3, [r1], -ip
   13280:	strheq	r3, [r1], -ip
   13284:	strheq	r3, [r1], -ip
   13288:	strheq	r3, [r1], -ip
   1328c:	strheq	r3, [r1], -ip
   13290:	strheq	r3, [r1], -ip
   13294:	andeq	r3, r1, r0, lsl #7
   13298:	andeq	r2, r1, ip, lsr #26
   1329c:	strheq	r3, [r1], -ip
   132a0:	andeq	r3, r1, r0, lsl #7
   132a4:	strheq	r3, [r1], -ip
   132a8:	andeq	r3, r1, r0, lsl #7
   132ac:	strheq	r3, [r1], -ip
   132b0:	strheq	r3, [r1], -ip
   132b4:	strheq	r3, [r1], -ip
   132b8:	strheq	r3, [r1], -ip
   132bc:	strheq	r3, [r1], -ip
   132c0:	strheq	r3, [r1], -ip
   132c4:	strheq	r3, [r1], -ip
   132c8:	strheq	r3, [r1], -ip
   132cc:	strheq	r3, [r1], -ip
   132d0:	strheq	r3, [r1], -ip
   132d4:	strheq	r3, [r1], -ip
   132d8:	strheq	r3, [r1], -ip
   132dc:	strheq	r3, [r1], -ip
   132e0:	strheq	r3, [r1], -ip
   132e4:	strheq	r3, [r1], -ip
   132e8:	strheq	r3, [r1], -ip
   132ec:	strheq	r3, [r1], -ip
   132f0:	strheq	r3, [r1], -ip
   132f4:	strheq	r3, [r1], -ip
   132f8:	strheq	r3, [r1], -ip
   132fc:	strheq	r3, [r1], -ip
   13300:	strheq	r3, [r1], -ip
   13304:	strheq	r3, [r1], -ip
   13308:	strheq	r3, [r1], -ip
   1330c:	strheq	r3, [r1], -ip
   13310:	strheq	r3, [r1], -ip
   13314:	andeq	r2, r1, r0, asr fp
   13318:	andeq	r3, r1, r0, lsl #7
   1331c:	andeq	r2, r1, r0, asr fp
   13320:	andeq	r3, r1, r0, ror r3
   13324:	mov	r3, #114	; 0x72
   13328:	b	12e8c <__assert_fail@plt+0x2020>
   1332c:	mov	r3, #102	; 0x66
   13330:	b	12d5c <__assert_fail@plt+0x1ef0>
   13334:	mov	r3, #110	; 0x6e
   13338:	b	12e8c <__assert_fail@plt+0x2020>
   1333c:	mov	r3, #98	; 0x62
   13340:	b	12d5c <__assert_fail@plt+0x1ef0>
   13344:	mov	r3, #97	; 0x61
   13348:	b	12d5c <__assert_fail@plt+0x1ef0>
   1334c:	ldr	r3, [sp, #40]	; 0x28
   13350:	cmp	r3, #0
   13354:	bne	12f64 <__assert_fail@plt+0x20f8>
   13358:	ldr	r3, [sp, #156]	; 0x9c
   1335c:	tst	r3, #1
   13360:	addne	r9, r9, #1
   13364:	bne	126f8 <__assert_fail@plt+0x188c>
   13368:	ldr	r7, [sp, #40]	; 0x28
   1336c:	b	12d68 <__assert_fail@plt+0x1efc>
   13370:	sub	r3, fp, #2
   13374:	clz	r3, r3
   13378:	lsr	r3, r3, #5
   1337c:	b	12b7c <__assert_fail@plt+0x1d10>
   13380:	sub	r3, fp, #2
   13384:	mov	r6, #0
   13388:	clz	r3, r3
   1338c:	lsr	r3, r3, #5
   13390:	ldr	r2, [sp, #44]	; 0x2c
   13394:	tst	r2, r3
   13398:	beq	12b88 <__assert_fail@plt+0x1d1c>
   1339c:	b	12ea4 <__assert_fail@plt+0x2038>
   133a0:	sub	r3, fp, #2
   133a4:	clz	r3, r3
   133a8:	lsr	r3, r3, #5
   133ac:	b	13390 <__assert_fail@plt+0x2524>
   133b0:	ldr	r3, [sp, #52]	; 0x34
   133b4:	ldrb	r5, [r3]
   133b8:	cmp	r5, #126	; 0x7e
   133bc:	ldrls	pc, [pc, r5, lsl #2]
   133c0:	b	1306c <__assert_fail@plt+0x2200>
   133c4:	andeq	r2, r1, r4, ror #30
   133c8:	andeq	r3, r1, ip, rrx
   133cc:	andeq	r3, r1, ip, rrx
   133d0:	andeq	r3, r1, ip, rrx
   133d4:	andeq	r3, r1, ip, rrx
   133d8:	andeq	r3, r1, ip, rrx
   133dc:	andeq	r3, r1, ip, rrx
   133e0:	andeq	r2, r1, r8, asr #30
   133e4:	andeq	r2, r1, r0, asr #30
   133e8:	strdeq	r3, [r1], -ip
   133ec:	andeq	r2, r1, r4, lsr pc
   133f0:	strdeq	r3, [r1], -r0
   133f4:	andeq	r2, r1, r0, lsl pc
   133f8:	andeq	r2, r1, ip, asr pc
   133fc:	andeq	r3, r1, ip, rrx
   13400:	andeq	r3, r1, ip, rrx
   13404:	andeq	r3, r1, ip, rrx
   13408:	andeq	r3, r1, ip, rrx
   1340c:	andeq	r3, r1, ip, rrx
   13410:	andeq	r3, r1, ip, rrx
   13414:	andeq	r3, r1, ip, rrx
   13418:	andeq	r3, r1, ip, rrx
   1341c:	andeq	r3, r1, ip, rrx
   13420:	andeq	r3, r1, ip, rrx
   13424:	andeq	r3, r1, ip, rrx
   13428:	andeq	r3, r1, ip, rrx
   1342c:	andeq	r3, r1, ip, rrx
   13430:	andeq	r3, r1, ip, rrx
   13434:	andeq	r3, r1, ip, rrx
   13438:	andeq	r3, r1, ip, rrx
   1343c:	andeq	r3, r1, ip, rrx
   13440:	andeq	r3, r1, ip, rrx
   13444:	andeq	r3, r1, r8, ror #11
   13448:	andeq	r2, r1, r0, asr pc
   1344c:	andeq	r2, r1, r0, asr pc
   13450:	andeq	r3, r1, ip, asr #11
   13454:	andeq	r2, r1, r0, asr pc
   13458:	andeq	r3, r1, r0, asr #11
   1345c:	andeq	r2, r1, r0, asr pc
   13460:	andeq	r2, r1, ip, lsr #27
   13464:	andeq	r2, r1, r0, asr pc
   13468:	andeq	r2, r1, r0, asr pc
   1346c:	andeq	r2, r1, r0, asr pc
   13470:	andeq	r3, r1, r0, asr #11
   13474:	andeq	r3, r1, r0, asr #11
   13478:	andeq	r3, r1, r0, asr #11
   1347c:	andeq	r3, r1, r0, asr #11
   13480:	andeq	r3, r1, r0, asr #11
   13484:	andeq	r3, r1, r0, asr #11
   13488:	andeq	r3, r1, r0, asr #11
   1348c:	andeq	r3, r1, r0, asr #11
   13490:	andeq	r3, r1, r0, asr #11
   13494:	andeq	r3, r1, r0, asr #11
   13498:	andeq	r3, r1, r0, asr #11
   1349c:	andeq	r3, r1, r0, asr #11
   134a0:	andeq	r3, r1, r0, asr #11
   134a4:	andeq	r3, r1, r0, asr #11
   134a8:	andeq	r3, r1, r0, asr #11
   134ac:	andeq	r3, r1, r0, asr #11
   134b0:	andeq	r2, r1, r0, asr pc
   134b4:	andeq	r2, r1, r0, asr pc
   134b8:	andeq	r2, r1, r0, asr pc
   134bc:	andeq	r2, r1, r0, asr pc
   134c0:	andeq	r2, r1, r0, lsl #27
   134c4:	andeq	r3, r1, ip, rrx
   134c8:	andeq	r3, r1, r0, asr #11
   134cc:	andeq	r3, r1, r0, asr #11
   134d0:	andeq	r3, r1, r0, asr #11
   134d4:	andeq	r3, r1, r0, asr #11
   134d8:	andeq	r3, r1, r0, asr #11
   134dc:	andeq	r3, r1, r0, asr #11
   134e0:	andeq	r3, r1, r0, asr #11
   134e4:	andeq	r3, r1, r0, asr #11
   134e8:	andeq	r3, r1, r0, asr #11
   134ec:	andeq	r3, r1, r0, asr #11
   134f0:	andeq	r3, r1, r0, asr #11
   134f4:	andeq	r3, r1, r0, asr #11
   134f8:	andeq	r3, r1, r0, asr #11
   134fc:	andeq	r3, r1, r0, asr #11
   13500:	andeq	r3, r1, r0, asr #11
   13504:	andeq	r3, r1, r0, asr #11
   13508:	andeq	r3, r1, r0, asr #11
   1350c:	andeq	r3, r1, r0, asr #11
   13510:	andeq	r3, r1, r0, asr #11
   13514:	andeq	r3, r1, r0, asr #11
   13518:	andeq	r3, r1, r0, asr #11
   1351c:	andeq	r3, r1, r0, asr #11
   13520:	andeq	r3, r1, r0, asr #11
   13524:	andeq	r3, r1, r0, asr #11
   13528:	andeq	r3, r1, r0, asr #11
   1352c:	andeq	r3, r1, r0, asr #11
   13530:	andeq	r2, r1, r0, asr pc
   13534:	andeq	r2, r1, r8, lsr #26
   13538:	andeq	r3, r1, r0, asr #11
   1353c:	andeq	r2, r1, r0, asr pc
   13540:	andeq	r3, r1, r0, asr #11
   13544:	andeq	r2, r1, r0, asr pc
   13548:	andeq	r3, r1, r0, asr #11
   1354c:	andeq	r3, r1, r0, asr #11
   13550:	andeq	r3, r1, r0, asr #11
   13554:	andeq	r3, r1, r0, asr #11
   13558:	andeq	r3, r1, r0, asr #11
   1355c:	andeq	r3, r1, r0, asr #11
   13560:	andeq	r3, r1, r0, asr #11
   13564:	andeq	r3, r1, r0, asr #11
   13568:	andeq	r3, r1, r0, asr #11
   1356c:	andeq	r3, r1, r0, asr #11
   13570:	andeq	r3, r1, r0, asr #11
   13574:	andeq	r3, r1, r0, asr #11
   13578:	andeq	r3, r1, r0, asr #11
   1357c:	andeq	r3, r1, r0, asr #11
   13580:	andeq	r3, r1, r0, asr #11
   13584:	andeq	r3, r1, r0, asr #11
   13588:	andeq	r3, r1, r0, asr #11
   1358c:	andeq	r3, r1, r0, asr #11
   13590:	andeq	r3, r1, r0, asr #11
   13594:	andeq	r3, r1, r0, asr #11
   13598:	andeq	r3, r1, r0, asr #11
   1359c:	andeq	r3, r1, r0, asr #11
   135a0:	andeq	r3, r1, r0, asr #11
   135a4:	andeq	r3, r1, r0, asr #11
   135a8:	andeq	r3, r1, r0, asr #11
   135ac:	andeq	r3, r1, r0, asr #11
   135b0:	andeq	r2, r1, ip, asr #22
   135b4:	andeq	r2, r1, r0, asr pc
   135b8:	andeq	r2, r1, ip, asr #22
   135bc:	andeq	r3, r1, ip, asr #11
   135c0:	mov	r6, r7
   135c4:	mov	r7, #0
   135c8:	b	12d78 <__assert_fail@plt+0x1f0c>
   135cc:	cmp	r9, #0
   135d0:	mov	r2, #0
   135d4:	beq	1303c <__assert_fail@plt+0x21d0>
   135d8:	mov	r6, #0
   135dc:	mov	r7, r2
   135e0:	mov	r3, r6
   135e4:	b	12b98 <__assert_fail@plt+0x1d2c>
   135e8:	mov	r2, #0
   135ec:	b	13050 <__assert_fail@plt+0x21e4>
   135f0:	mov	r7, #0
   135f4:	mov	r3, #118	; 0x76
   135f8:	b	12d5c <__assert_fail@plt+0x1ef0>
   135fc:	mov	r7, #0
   13600:	mov	r3, #116	; 0x74
   13604:	b	12e8c <__assert_fail@plt+0x2020>
   13608:	ldr	r3, [sp, #44]	; 0x2c
   1360c:	b	12bc0 <__assert_fail@plt+0x1d54>
   13610:	ldr	r3, [sp, #44]	; 0x2c
   13614:	cmp	r3, #0
   13618:	bne	13a88 <__assert_fail@plt+0x2c1c>
   1361c:	add	r9, r9, #1
   13620:	mov	r6, #0
   13624:	ldr	r3, [sp, #48]	; 0x30
   13628:	mov	r5, #92	; 0x5c
   1362c:	b	12e4c <__assert_fail@plt+0x1fe0>
   13630:	ldr	r3, [sp, #32]
   13634:	ldrb	r2, [r3, #1]
   13638:	adds	r2, r2, #0
   1363c:	movne	r2, #1
   13640:	b	12b68 <__assert_fail@plt+0x1cfc>
   13644:	ldr	r3, [sp, #156]	; 0x9c
   13648:	ands	r3, r3, #4
   1364c:	beq	13674 <__assert_fail@plt+0x2808>
   13650:	ldr	r2, [sp, #28]
   13654:	add	r3, r9, #2
   13658:	cmp	r3, r2
   1365c:	bcs	13670 <__assert_fail@plt+0x2804>
   13660:	ldr	r2, [sp, #52]	; 0x34
   13664:	ldrb	r5, [r2, #1]
   13668:	cmp	r5, #63	; 0x3f
   1366c:	beq	13aec <__assert_fail@plt+0x2c80>
   13670:	mov	r3, #0
   13674:	mov	r5, #63	; 0x3f
   13678:	mov	r6, r3
   1367c:	b	12b88 <__assert_fail@plt+0x1d1c>
   13680:	ldr	r3, [sp, #44]	; 0x2c
   13684:	cmp	r3, #0
   13688:	bne	13a88 <__assert_fail@plt+0x2c1c>
   1368c:	mov	r6, r3
   13690:	mov	r5, #63	; 0x3f
   13694:	b	12bc0 <__assert_fail@plt+0x1d54>
   13698:	ldr	r1, [sp, #28]
   1369c:	mov	r2, #0
   136a0:	mov	r3, #0
   136a4:	strd	r2, [sp, #104]	; 0x68
   136a8:	cmn	r1, #1
   136ac:	bne	136bc <__assert_fail@plt+0x2850>
   136b0:	ldr	r0, [sp, #32]
   136b4:	bl	10da0 <strlen@plt>
   136b8:	str	r0, [sp, #28]
   136bc:	str	r8, [sp, #76]	; 0x4c
   136c0:	mov	r3, #0
   136c4:	str	sl, [sp, #80]	; 0x50
   136c8:	ldr	sl, [sp, #32]
   136cc:	str	r5, [sp, #84]	; 0x54
   136d0:	mov	r5, r3
   136d4:	ldr	r8, [sp, #44]	; 0x2c
   136d8:	str	r7, [sp, #88]	; 0x58
   136dc:	str	r4, [sp, #92]	; 0x5c
   136e0:	ldr	r2, [sp, #28]
   136e4:	add	r4, r9, r5
   136e8:	add	r3, sp, #104	; 0x68
   136ec:	add	r7, sl, r4
   136f0:	add	r0, sp, #100	; 0x64
   136f4:	mov	r1, r7
   136f8:	sub	r2, r2, r4
   136fc:	bl	15600 <__assert_fail@plt+0x4794>
   13700:	subs	r1, r0, #0
   13704:	beq	13750 <__assert_fail@plt+0x28e4>
   13708:	cmn	r1, #1
   1370c:	beq	13ac8 <__assert_fail@plt+0x2c5c>
   13710:	cmn	r1, #2
   13714:	beq	13be8 <__assert_fail@plt+0x2d7c>
   13718:	cmp	fp, #2
   1371c:	movne	r3, #0
   13720:	andeq	r3, r8, #1
   13724:	cmp	r3, #0
   13728:	bne	138b4 <__assert_fail@plt+0x2a48>
   1372c:	ldr	r0, [sp, #100]	; 0x64
   13730:	add	r5, r5, r1
   13734:	bl	10cd4 <iswprint@plt>
   13738:	cmp	r0, #0
   1373c:	add	r0, sp, #104	; 0x68
   13740:	moveq	r6, #0
   13744:	bl	10c80 <mbsinit@plt>
   13748:	cmp	r0, #0
   1374c:	beq	136e0 <__assert_fail@plt+0x2874>
   13750:	ldr	r3, [sp, #40]	; 0x28
   13754:	mov	ip, r5
   13758:	eor	r2, r6, #1
   1375c:	ldr	r8, [sp, #76]	; 0x4c
   13760:	ldr	sl, [sp, #80]	; 0x50
   13764:	and	r2, r2, r3
   13768:	ldr	r5, [sp, #84]	; 0x54
   1376c:	ldr	r7, [sp, #88]	; 0x58
   13770:	ldr	r4, [sp, #92]	; 0x5c
   13774:	cmp	ip, #1
   13778:	bls	130b4 <__assert_fail@plt+0x2248>
   1377c:	add	r1, ip, r9
   13780:	mov	r0, #39	; 0x27
   13784:	ldr	lr, [sp, #52]	; 0x34
   13788:	mov	ip, #0
   1378c:	str	r6, [sp, #52]	; 0x34
   13790:	ldr	r6, [sp, #48]	; 0x30
   13794:	b	13850 <__assert_fail@plt+0x29e4>
   13798:	ldr	ip, [sp, #44]	; 0x2c
   1379c:	sub	r3, fp, #2
   137a0:	clz	r3, r3
   137a4:	lsr	r3, r3, #5
   137a8:	cmp	ip, #0
   137ac:	bne	139c0 <__assert_fail@plt+0x2b54>
   137b0:	eor	ip, r6, #1
   137b4:	ands	r3, r3, ip
   137b8:	beq	137e8 <__assert_fail@plt+0x297c>
   137bc:	cmp	sl, r4
   137c0:	add	ip, r4, #1
   137c4:	strbhi	r0, [r8, r4]
   137c8:	cmp	sl, ip
   137cc:	movhi	r6, #36	; 0x24
   137d0:	strbhi	r6, [r8, ip]
   137d4:	add	ip, r4, #2
   137d8:	mov	r6, r3
   137dc:	cmp	sl, ip
   137e0:	add	r4, r4, #3
   137e4:	strbhi	r0, [r8, ip]
   137e8:	cmp	sl, r4
   137ec:	movhi	r3, #92	; 0x5c
   137f0:	strbhi	r3, [r8, r4]
   137f4:	add	r3, r4, #1
   137f8:	cmp	sl, r3
   137fc:	bls	1380c <__assert_fail@plt+0x29a0>
   13800:	lsr	ip, r5, #6
   13804:	add	ip, ip, #48	; 0x30
   13808:	strb	ip, [r8, r3]
   1380c:	add	r3, r4, #2
   13810:	cmp	sl, r3
   13814:	bls	13824 <__assert_fail@plt+0x29b8>
   13818:	ubfx	ip, r5, #3, #3
   1381c:	add	ip, ip, #48	; 0x30
   13820:	strb	ip, [r8, r3]
   13824:	add	r9, r9, #1
   13828:	and	r5, r5, #7
   1382c:	cmp	r9, r1
   13830:	add	r5, r5, #48	; 0x30
   13834:	add	r4, r4, #3
   13838:	bcs	139ec <__assert_fail@plt+0x2b80>
   1383c:	mov	ip, r2
   13840:	cmp	sl, r4
   13844:	strbhi	r5, [r8, r4]
   13848:	add	r4, r4, #1
   1384c:	ldrb	r5, [lr, #1]!
   13850:	cmp	r2, #0
   13854:	bne	13798 <__assert_fail@plt+0x292c>
   13858:	eor	r3, ip, #1
   1385c:	cmp	r7, #0
   13860:	and	r3, r3, r6
   13864:	uxtb	r3, r3
   13868:	beq	1387c <__assert_fail@plt+0x2a10>
   1386c:	cmp	sl, r4
   13870:	movhi	r7, #92	; 0x5c
   13874:	strbhi	r7, [r8, r4]
   13878:	add	r4, r4, #1
   1387c:	add	r9, r9, #1
   13880:	cmp	r9, r1
   13884:	bcs	139d4 <__assert_fail@plt+0x2b68>
   13888:	cmp	r3, #0
   1388c:	beq	13a0c <__assert_fail@plt+0x2ba0>
   13890:	cmp	sl, r4
   13894:	add	r3, r4, #1
   13898:	mov	r7, #0
   1389c:	strbhi	r0, [r8, r4]
   138a0:	cmp	sl, r3
   138a4:	add	r4, r4, #2
   138a8:	mov	r6, r7
   138ac:	strbhi	r0, [r8, r3]
   138b0:	b	13840 <__assert_fail@plt+0x29d4>
   138b4:	cmp	r1, #1
   138b8:	beq	1372c <__assert_fail@plt+0x28c0>
   138bc:	add	r2, r4, #1
   138c0:	add	r3, sl, r1
   138c4:	add	r2, sl, r2
   138c8:	add	r4, r3, r4
   138cc:	ldrb	r3, [r2], #1
   138d0:	sub	r3, r3, #91	; 0x5b
   138d4:	cmp	r3, #33	; 0x21
   138d8:	ldrls	pc, [pc, r3, lsl #2]
   138dc:	b	13968 <__assert_fail@plt+0x2afc>
   138e0:	andeq	r3, r1, r4, ror r9
   138e4:	andeq	r3, r1, r4, ror r9
   138e8:	andeq	r3, r1, r8, ror #18
   138ec:	andeq	r3, r1, r4, ror r9
   138f0:	andeq	r3, r1, r8, ror #18
   138f4:	andeq	r3, r1, r4, ror r9
   138f8:	andeq	r3, r1, r8, ror #18
   138fc:	andeq	r3, r1, r8, ror #18
   13900:	andeq	r3, r1, r8, ror #18
   13904:	andeq	r3, r1, r8, ror #18
   13908:	andeq	r3, r1, r8, ror #18
   1390c:	andeq	r3, r1, r8, ror #18
   13910:	andeq	r3, r1, r8, ror #18
   13914:	andeq	r3, r1, r8, ror #18
   13918:	andeq	r3, r1, r8, ror #18
   1391c:	andeq	r3, r1, r8, ror #18
   13920:	andeq	r3, r1, r8, ror #18
   13924:	andeq	r3, r1, r8, ror #18
   13928:	andeq	r3, r1, r8, ror #18
   1392c:	andeq	r3, r1, r8, ror #18
   13930:	andeq	r3, r1, r8, ror #18
   13934:	andeq	r3, r1, r8, ror #18
   13938:	andeq	r3, r1, r8, ror #18
   1393c:	andeq	r3, r1, r8, ror #18
   13940:	andeq	r3, r1, r8, ror #18
   13944:	andeq	r3, r1, r8, ror #18
   13948:	andeq	r3, r1, r8, ror #18
   1394c:	andeq	r3, r1, r8, ror #18
   13950:	andeq	r3, r1, r8, ror #18
   13954:	andeq	r3, r1, r8, ror #18
   13958:	andeq	r3, r1, r8, ror #18
   1395c:	andeq	r3, r1, r8, ror #18
   13960:	andeq	r3, r1, r8, ror #18
   13964:	andeq	r3, r1, r4, ror r9
   13968:	cmp	r4, r2
   1396c:	bne	138cc <__assert_fail@plt+0x2a60>
   13970:	b	1372c <__assert_fail@plt+0x28c0>
   13974:	mov	r8, #2
   13978:	ldr	fp, [sp, #76]	; 0x4c
   1397c:	ldr	sl, [sp, #80]	; 0x50
   13980:	b	12eac <__assert_fail@plt+0x2040>
   13984:	ldr	r2, [sp, #40]	; 0x28
   13988:	str	fp, [sp, #152]	; 0x98
   1398c:	mov	fp, r8
   13990:	ldr	r8, [sp, #152]	; 0x98
   13994:	and	r2, r2, r3
   13998:	str	r2, [sp, #40]	; 0x28
   1399c:	b	12eac <__assert_fail@plt+0x2040>
   139a0:	cmp	sl, r4
   139a4:	movls	r0, r4
   139a8:	bls	12fdc <__assert_fail@plt+0x2170>
   139ac:	ldr	r3, [sp, #48]	; 0x30
   139b0:	b	12fcc <__assert_fail@plt+0x2160>
   139b4:	str	sl, [sp, #72]	; 0x48
   139b8:	ldr	sl, [sp, #44]	; 0x2c
   139bc:	b	12e1c <__assert_fail@plt+0x1fb0>
   139c0:	str	r3, [sp, #40]	; 0x28
   139c4:	str	fp, [sp, #152]	; 0x98
   139c8:	mov	fp, r8
   139cc:	ldr	r8, [sp, #152]	; 0x98
   139d0:	b	12eac <__assert_fail@plt+0x2040>
   139d4:	str	r6, [sp, #48]	; 0x30
   139d8:	ldr	r6, [sp, #52]	; 0x34
   139dc:	b	12e4c <__assert_fail@plt+0x1fe0>
   139e0:	mov	r6, #0
   139e4:	ldr	r2, [sp, #40]	; 0x28
   139e8:	b	1377c <__assert_fail@plt+0x2910>
   139ec:	str	r6, [sp, #48]	; 0x30
   139f0:	ldr	r6, [sp, #52]	; 0x34
   139f4:	b	12c38 <__assert_fail@plt+0x1dcc>
   139f8:	add	r4, r4, #4
   139fc:	mov	r6, #0
   13a00:	str	r3, [sp, #48]	; 0x30
   13a04:	mov	r5, #48	; 0x30
   13a08:	b	12bc0 <__assert_fail@plt+0x1d54>
   13a0c:	mov	r7, r3
   13a10:	b	13840 <__assert_fail@plt+0x29d4>
   13a14:	mov	r3, #1
   13a18:	movw	r2, #23892	; 0x5d54
   13a1c:	movt	r2, #1
   13a20:	mov	r4, r3
   13a24:	str	r3, [sp, #36]	; 0x24
   13a28:	str	r3, [sp, #40]	; 0x28
   13a2c:	str	sl, [sp, #44]	; 0x2c
   13a30:	str	sl, [sp, #48]	; 0x30
   13a34:	str	r3, [sp, #56]	; 0x38
   13a38:	str	r2, [sp, #60]	; 0x3c
   13a3c:	str	sl, [sp, #68]	; 0x44
   13a40:	str	sl, [sp, #72]	; 0x48
   13a44:	b	126e8 <__assert_fail@plt+0x187c>
   13a48:	mov	r3, r6
   13a4c:	mov	r5, #48	; 0x30
   13a50:	mov	r6, #0
   13a54:	b	12bc0 <__assert_fail@plt+0x1d54>
   13a58:	mov	r5, r3
   13a5c:	b	12f38 <__assert_fail@plt+0x20cc>
   13a60:	cmp	sl, r4
   13a64:	mov	r5, #48	; 0x30
   13a68:	movhi	r3, #48	; 0x30
   13a6c:	strbhi	r3, [r8, r4]
   13a70:	add	r3, r0, #2
   13a74:	add	r4, r0, #3
   13a78:	cmp	sl, r3
   13a7c:	movhi	r1, #48	; 0x30
   13a80:	strbhi	r1, [r8, r3]
   13a84:	b	13010 <__assert_fail@plt+0x21a4>
   13a88:	str	fp, [sp, #152]	; 0x98
   13a8c:	mov	fp, r8
   13a90:	ldr	r8, [sp, #152]	; 0x98
   13a94:	b	12eac <__assert_fail@plt+0x2040>
   13a98:	ldr	r3, [sp, #164]	; 0xa4
   13a9c:	ldrb	r3, [r3]
   13aa0:	cmp	r3, #0
   13aa4:	beq	126b8 <__assert_fail@plt+0x184c>
   13aa8:	ldr	r2, [sp, #164]	; 0xa4
   13aac:	cmp	sl, r4
   13ab0:	strbhi	r3, [fp, r4]
   13ab4:	add	r4, r4, #1
   13ab8:	ldrb	r3, [r2, #1]!
   13abc:	cmp	r3, #0
   13ac0:	bne	13aac <__assert_fail@plt+0x2c40>
   13ac4:	b	126b8 <__assert_fail@plt+0x184c>
   13ac8:	mov	ip, r5
   13acc:	mov	r6, #0
   13ad0:	ldr	r2, [sp, #40]	; 0x28
   13ad4:	ldr	r8, [sp, #76]	; 0x4c
   13ad8:	ldr	sl, [sp, #80]	; 0x50
   13adc:	ldr	r5, [sp, #84]	; 0x54
   13ae0:	ldr	r7, [sp, #88]	; 0x58
   13ae4:	ldr	r4, [sp, #92]	; 0x5c
   13ae8:	b	13774 <__assert_fail@plt+0x2908>
   13aec:	ldr	r2, [sp, #32]
   13af0:	ldrb	r1, [r2, r3]
   13af4:	sub	r2, r1, #33	; 0x21
   13af8:	cmp	r2, #29
   13afc:	ldrls	pc, [pc, r2, lsl #2]
   13b00:	b	13bdc <__assert_fail@plt+0x2d70>
   13b04:	andeq	r3, r1, ip, ror fp
   13b08:	ldrdeq	r3, [r1], -ip
   13b0c:	ldrdeq	r3, [r1], -ip
   13b10:	ldrdeq	r3, [r1], -ip
   13b14:	ldrdeq	r3, [r1], -ip
   13b18:	ldrdeq	r3, [r1], -ip
   13b1c:	andeq	r3, r1, ip, ror fp
   13b20:	andeq	r3, r1, ip, ror fp
   13b24:	andeq	r3, r1, ip, ror fp
   13b28:	ldrdeq	r3, [r1], -ip
   13b2c:	ldrdeq	r3, [r1], -ip
   13b30:	ldrdeq	r3, [r1], -ip
   13b34:	andeq	r3, r1, ip, ror fp
   13b38:	ldrdeq	r3, [r1], -ip
   13b3c:	andeq	r3, r1, ip, ror fp
   13b40:	ldrdeq	r3, [r1], -ip
   13b44:	ldrdeq	r3, [r1], -ip
   13b48:	ldrdeq	r3, [r1], -ip
   13b4c:	ldrdeq	r3, [r1], -ip
   13b50:	ldrdeq	r3, [r1], -ip
   13b54:	ldrdeq	r3, [r1], -ip
   13b58:	ldrdeq	r3, [r1], -ip
   13b5c:	ldrdeq	r3, [r1], -ip
   13b60:	ldrdeq	r3, [r1], -ip
   13b64:	ldrdeq	r3, [r1], -ip
   13b68:	ldrdeq	r3, [r1], -ip
   13b6c:	ldrdeq	r3, [r1], -ip
   13b70:	andeq	r3, r1, ip, ror fp
   13b74:	andeq	r3, r1, ip, ror fp
   13b78:	andeq	r3, r1, ip, ror fp
   13b7c:	ldr	r2, [sp, #44]	; 0x2c
   13b80:	cmp	r2, #0
   13b84:	bne	13ce0 <__assert_fail@plt+0x2e74>
   13b88:	cmp	sl, r4
   13b8c:	mov	r5, r1
   13b90:	movhi	r2, #63	; 0x3f
   13b94:	mov	r9, r3
   13b98:	strbhi	r2, [r8, r4]
   13b9c:	add	r2, r4, #1
   13ba0:	cmp	sl, r2
   13ba4:	movhi	r0, #34	; 0x22
   13ba8:	strbhi	r0, [r8, r2]
   13bac:	add	r2, r4, #2
   13bb0:	cmp	sl, r2
   13bb4:	movhi	r0, #34	; 0x22
   13bb8:	strbhi	r0, [r8, r2]
   13bbc:	add	r2, r4, #3
   13bc0:	add	r4, r4, #4
   13bc4:	cmp	sl, r2
   13bc8:	movhi	r0, #63	; 0x3f
   13bcc:	strbhi	r0, [r8, r2]
   13bd0:	mov	r2, #0
   13bd4:	mov	r6, r2
   13bd8:	b	13010 <__assert_fail@plt+0x21a4>
   13bdc:	mov	r3, #0
   13be0:	mov	r6, r3
   13be4:	b	12b88 <__assert_fail@plt+0x1d1c>
   13be8:	ldr	r0, [sp, #28]
   13bec:	mov	r1, r4
   13bf0:	mov	r2, r7
   13bf4:	mov	r3, r5
   13bf8:	mov	ip, r5
   13bfc:	ldr	r8, [sp, #76]	; 0x4c
   13c00:	ldr	sl, [sp, #80]	; 0x50
   13c04:	cmp	r1, r0
   13c08:	ldr	r5, [sp, #84]	; 0x54
   13c0c:	ldr	r7, [sp, #88]	; 0x58
   13c10:	ldr	r4, [sp, #92]	; 0x5c
   13c14:	bcs	13c48 <__assert_fail@plt+0x2ddc>
   13c18:	ldrb	r6, [r2]
   13c1c:	cmp	r6, #0
   13c20:	bne	13c34 <__assert_fail@plt+0x2dc8>
   13c24:	b	13d68 <__assert_fail@plt+0x2efc>
   13c28:	ldrb	r6, [r2, #1]!
   13c2c:	cmp	r6, #0
   13c30:	beq	13cf0 <__assert_fail@plt+0x2e84>
   13c34:	add	r3, r3, #1
   13c38:	add	r1, r9, r3
   13c3c:	cmp	r1, r0
   13c40:	bcc	13c28 <__assert_fail@plt+0x2dbc>
   13c44:	mov	ip, r3
   13c48:	mov	r6, #0
   13c4c:	ldr	r2, [sp, #40]	; 0x28
   13c50:	b	13774 <__assert_fail@plt+0x2908>
   13c54:	mov	r3, #1
   13c58:	mov	r2, #0
   13c5c:	mov	r4, r2
   13c60:	str	r3, [sp, #36]	; 0x24
   13c64:	str	r3, [sp, #40]	; 0x28
   13c68:	str	r3, [sp, #44]	; 0x2c
   13c6c:	str	r2, [sp, #48]	; 0x30
   13c70:	str	r3, [sp, #56]	; 0x38
   13c74:	movw	r3, #23892	; 0x5d54
   13c78:	movt	r3, #1
   13c7c:	str	r3, [sp, #60]	; 0x3c
   13c80:	str	r2, [sp, #68]	; 0x44
   13c84:	str	r2, [sp, #72]	; 0x48
   13c88:	b	126e8 <__assert_fail@plt+0x187c>
   13c8c:	mov	r2, r3
   13c90:	ldr	r3, [sp, #60]	; 0x3c
   13c94:	cmp	r3, #0
   13c98:	moveq	r2, #0
   13c9c:	andne	r2, r2, #1
   13ca0:	cmp	r2, #0
   13ca4:	beq	13cd0 <__assert_fail@plt+0x2e64>
   13ca8:	mov	r2, r3
   13cac:	ldrb	r3, [r3]
   13cb0:	cmp	r3, #0
   13cb4:	beq	13cd0 <__assert_fail@plt+0x2e64>
   13cb8:	cmp	sl, r4
   13cbc:	strbhi	r3, [fp, r4]
   13cc0:	add	r4, r4, #1
   13cc4:	ldrb	r3, [r2, #1]!
   13cc8:	cmp	r3, #0
   13ccc:	bne	13cb8 <__assert_fail@plt+0x2e4c>
   13cd0:	cmp	sl, r4
   13cd4:	movhi	r3, #0
   13cd8:	strbhi	r3, [fp, r4]
   13cdc:	b	12ef0 <__assert_fail@plt+0x2084>
   13ce0:	str	fp, [sp, #152]	; 0x98
   13ce4:	mov	fp, r8
   13ce8:	ldr	r8, [sp, #152]	; 0x98
   13cec:	b	12eb8 <__assert_fail@plt+0x204c>
   13cf0:	mov	ip, r3
   13cf4:	ldr	r2, [sp, #40]	; 0x28
   13cf8:	b	13774 <__assert_fail@plt+0x2908>
   13cfc:	str	fp, [sp, #152]	; 0x98
   13d00:	mov	fp, r8
   13d04:	ldr	r8, [sp, #152]	; 0x98
   13d08:	sub	r3, r8, #2
   13d0c:	clz	r3, r3
   13d10:	lsr	r3, r3, #5
   13d14:	str	r3, [sp, #40]	; 0x28
   13d18:	b	12eac <__assert_fail@plt+0x2040>
   13d1c:	mov	ip, #5
   13d20:	ldr	r3, [sp, #28]
   13d24:	str	ip, [sp]
   13d28:	ldr	r2, [sp, #156]	; 0x9c
   13d2c:	ldr	ip, [sp, #164]	; 0xa4
   13d30:	ldr	r0, [sp, #160]	; 0xa0
   13d34:	str	r2, [sp, #4]
   13d38:	ldr	r2, [sp, #32]
   13d3c:	ldr	r1, [sp, #72]	; 0x48
   13d40:	str	ip, [sp, #12]
   13d44:	ldr	ip, [sp, #168]	; 0xa8
   13d48:	str	r0, [sp, #8]
   13d4c:	mov	r0, fp
   13d50:	str	ip, [sp, #16]
   13d54:	bl	12600 <__assert_fail@plt+0x1794>
   13d58:	mov	r4, r0
   13d5c:	b	12ef0 <__assert_fail@plt+0x2084>
   13d60:	mov	r8, #2
   13d64:	b	12eac <__assert_fail@plt+0x2040>
   13d68:	ldr	r2, [sp, #40]	; 0x28
   13d6c:	b	13774 <__assert_fail@plt+0x2908>
   13d70:	mov	r3, #0
   13d74:	mov	r2, #1
   13d78:	mov	r4, r3
   13d7c:	strd	r2, [sp, #36]	; 0x24
   13d80:	strd	r2, [sp, #44]	; 0x2c
   13d84:	str	r2, [sp, #56]	; 0x38
   13d88:	str	r3, [sp, #68]	; 0x44
   13d8c:	str	r3, [sp, #72]	; 0x48
   13d90:	movw	r3, #23912	; 0x5d68
   13d94:	movt	r3, #1
   13d98:	str	r3, [sp, #60]	; 0x3c
   13d9c:	b	126e8 <__assert_fail@plt+0x187c>
   13da0:	mov	r3, #0
   13da4:	mov	r1, #1
   13da8:	mov	r2, r3
   13dac:	str	r1, [sp, #36]	; 0x24
   13db0:	str	r3, [sp, #48]	; 0x30
   13db4:	str	sl, [sp, #72]	; 0x48
   13db8:	b	12cf0 <__assert_fail@plt+0x1e84>
   13dbc:	bl	10e54 <abort@plt>
   13dc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13dc4:	mov	r4, r0
   13dc8:	mov	r5, r3
   13dcc:	strd	r6, [sp, #8]
   13dd0:	movw	r7, #28904	; 0x70e8
   13dd4:	movt	r7, #2
   13dd8:	strd	r8, [sp, #16]
   13ddc:	strd	sl, [sp, #24]
   13de0:	mov	sl, r1
   13de4:	mov	fp, r2
   13de8:	str	lr, [sp, #32]
   13dec:	sub	sp, sp, #60	; 0x3c
   13df0:	bl	10dac <__errno_location@plt>
   13df4:	mov	r8, r0
   13df8:	cmn	r4, #-2147483647	; 0x80000001
   13dfc:	ldr	r6, [r7]
   13e00:	movne	r0, #0
   13e04:	moveq	r0, #1
   13e08:	ldr	r3, [r8]
   13e0c:	orrs	r0, r0, r4, lsr #31
   13e10:	str	r3, [sp, #28]
   13e14:	bne	13fa4 <__assert_fail@plt+0x3138>
   13e18:	ldr	r3, [r7, #4]
   13e1c:	cmp	r3, r4
   13e20:	bgt	13e80 <__assert_fail@plt+0x3014>
   13e24:	add	r1, r7, #8
   13e28:	sub	r2, r4, r3
   13e2c:	str	r3, [sp, #52]	; 0x34
   13e30:	cmp	r6, r1
   13e34:	add	r2, r2, #1
   13e38:	beq	13f7c <__assert_fail@plt+0x3110>
   13e3c:	mov	r1, #8
   13e40:	mov	r0, r6
   13e44:	mvn	r3, #-2147483648	; 0x80000000
   13e48:	str	r1, [sp]
   13e4c:	add	r1, sp, #52	; 0x34
   13e50:	bl	15160 <__assert_fail@plt+0x42f4>
   13e54:	mov	r6, r0
   13e58:	str	r0, [r7]
   13e5c:	ldr	r0, [r7, #4]
   13e60:	mov	r1, #0
   13e64:	ldr	r2, [sp, #52]	; 0x34
   13e68:	sub	r2, r2, r0
   13e6c:	add	r0, r6, r0, lsl #3
   13e70:	lsl	r2, r2, #3
   13e74:	bl	10dc4 <memset@plt>
   13e78:	ldr	r3, [sp, #52]	; 0x34
   13e7c:	str	r3, [r7, #4]
   13e80:	ldr	r1, [r5, #4]
   13e84:	add	r0, r6, r4, lsl #3
   13e88:	add	ip, r5, #8
   13e8c:	mov	r3, fp
   13e90:	mov	r2, sl
   13e94:	ldr	r7, [r0, #4]
   13e98:	str	r0, [sp, #36]	; 0x24
   13e9c:	str	ip, [sp, #40]	; 0x28
   13ea0:	orr	r0, r1, #1
   13ea4:	ldr	r9, [r6, r4, lsl #3]
   13ea8:	str	ip, [sp, #8]
   13eac:	ldr	lr, [r5, #44]	; 0x2c
   13eb0:	str	r0, [sp, #4]
   13eb4:	ldr	ip, [r5]
   13eb8:	mov	r1, r9
   13ebc:	str	ip, [sp, #32]
   13ec0:	ldr	ip, [r5, #40]	; 0x28
   13ec4:	str	ip, [sp, #12]
   13ec8:	ldr	ip, [sp, #32]
   13ecc:	str	lr, [sp, #16]
   13ed0:	str	r0, [sp, #44]	; 0x2c
   13ed4:	mov	r0, r7
   13ed8:	str	ip, [sp]
   13edc:	bl	12600 <__assert_fail@plt+0x1794>
   13ee0:	cmp	r9, r0
   13ee4:	bhi	13f54 <__assert_fail@plt+0x30e8>
   13ee8:	add	r9, r0, #1
   13eec:	movw	r3, #29036	; 0x716c
   13ef0:	movt	r3, #2
   13ef4:	cmp	r7, r3
   13ef8:	str	r9, [r6, r4, lsl #3]
   13efc:	beq	13f08 <__assert_fail@plt+0x309c>
   13f00:	mov	r0, r7
   13f04:	bl	11e9c <__assert_fail@plt+0x1030>
   13f08:	mov	r0, r9
   13f0c:	bl	14fb0 <__assert_fail@plt+0x4144>
   13f10:	ldr	ip, [r5]
   13f14:	mov	r3, fp
   13f18:	mov	r2, sl
   13f1c:	mov	r1, r9
   13f20:	mov	r7, r0
   13f24:	ldr	lr, [sp, #36]	; 0x24
   13f28:	ldr	r4, [r5, #40]	; 0x28
   13f2c:	str	r0, [lr, #4]
   13f30:	ldr	lr, [r5, #44]	; 0x2c
   13f34:	str	ip, [sp]
   13f38:	ldr	ip, [sp, #44]	; 0x2c
   13f3c:	str	ip, [sp, #4]
   13f40:	ldr	ip, [sp, #40]	; 0x28
   13f44:	str	r4, [sp, #12]
   13f48:	str	lr, [sp, #16]
   13f4c:	str	ip, [sp, #8]
   13f50:	bl	12600 <__assert_fail@plt+0x1794>
   13f54:	ldr	r3, [sp, #28]
   13f58:	mov	r0, r7
   13f5c:	str	r3, [r8]
   13f60:	add	sp, sp, #60	; 0x3c
   13f64:	ldrd	r4, [sp]
   13f68:	ldrd	r6, [sp, #8]
   13f6c:	ldrd	r8, [sp, #16]
   13f70:	ldrd	sl, [sp, #24]
   13f74:	add	sp, sp, #32
   13f78:	pop	{pc}		; (ldr pc, [sp], #4)
   13f7c:	mov	r1, #8
   13f80:	mvn	r3, #-2147483648	; 0x80000000
   13f84:	str	r1, [sp]
   13f88:	add	r1, sp, #52	; 0x34
   13f8c:	bl	15160 <__assert_fail@plt+0x42f4>
   13f90:	ldrd	r2, [r7, #8]
   13f94:	mov	r6, r0
   13f98:	str	r0, [r7]
   13f9c:	strd	r2, [r0]
   13fa0:	b	13e5c <__assert_fail@plt+0x2ff0>
   13fa4:	bl	10e54 <abort@plt>
   13fa8:	strd	r4, [sp, #-16]!
   13fac:	mov	r5, r0
   13fb0:	str	r6, [sp, #8]
   13fb4:	str	lr, [sp, #12]
   13fb8:	bl	10dac <__errno_location@plt>
   13fbc:	mov	r4, r0
   13fc0:	cmp	r5, #0
   13fc4:	ldr	r0, [pc, #32]	; 13fec <__assert_fail@plt+0x3180>
   13fc8:	mov	r1, #48	; 0x30
   13fcc:	movne	r0, r5
   13fd0:	ldr	r6, [r4]
   13fd4:	bl	152d8 <__assert_fail@plt+0x446c>
   13fd8:	str	r6, [r4]
   13fdc:	ldrd	r4, [sp]
   13fe0:	ldr	r6, [sp, #8]
   13fe4:	add	sp, sp, #12
   13fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fec:	andeq	r7, r2, ip, ror #4
   13ff0:	ldr	r3, [pc, #12]	; 14004 <__assert_fail@plt+0x3198>
   13ff4:	cmp	r0, #0
   13ff8:	moveq	r0, r3
   13ffc:	ldr	r0, [r0]
   14000:	bx	lr
   14004:	andeq	r7, r2, ip, ror #4
   14008:	ldr	r3, [pc, #12]	; 1401c <__assert_fail@plt+0x31b0>
   1400c:	cmp	r0, #0
   14010:	moveq	r0, r3
   14014:	str	r1, [r0]
   14018:	bx	lr
   1401c:	andeq	r7, r2, ip, ror #4
   14020:	ldr	r3, [pc, #52]	; 1405c <__assert_fail@plt+0x31f0>
   14024:	cmp	r0, #0
   14028:	push	{lr}		; (str lr, [sp, #-4]!)
   1402c:	lsr	lr, r1, #5
   14030:	and	r1, r1, #31
   14034:	moveq	r0, r3
   14038:	add	r3, r0, #8
   1403c:	ldr	ip, [r3, lr, lsl #2]
   14040:	lsr	r0, ip, r1
   14044:	eor	r2, r2, r0
   14048:	and	r0, r0, #1
   1404c:	and	r2, r2, #1
   14050:	eor	r1, ip, r2, lsl r1
   14054:	str	r1, [r3, lr, lsl #2]
   14058:	pop	{pc}		; (ldr pc, [sp], #4)
   1405c:	andeq	r7, r2, ip, ror #4
   14060:	ldr	r3, [pc, #16]	; 14078 <__assert_fail@plt+0x320c>
   14064:	cmp	r0, #0
   14068:	movne	r3, r0
   1406c:	ldr	r0, [r3, #4]
   14070:	str	r1, [r3, #4]
   14074:	bx	lr
   14078:	andeq	r7, r2, ip, ror #4
   1407c:	ldr	r3, [pc, #48]	; 140b4 <__assert_fail@plt+0x3248>
   14080:	cmp	r0, #0
   14084:	mov	ip, #10
   14088:	moveq	r0, r3
   1408c:	cmp	r2, #0
   14090:	cmpne	r1, #0
   14094:	str	ip, [r0]
   14098:	beq	140a8 <__assert_fail@plt+0x323c>
   1409c:	str	r1, [r0, #40]	; 0x28
   140a0:	str	r2, [r0, #44]	; 0x2c
   140a4:	bx	lr
   140a8:	str	r4, [sp, #-8]!
   140ac:	str	lr, [sp, #4]
   140b0:	bl	10e54 <abort@plt>
   140b4:	andeq	r7, r2, ip, ror #4
   140b8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   140bc:	strd	r6, [sp, #8]
   140c0:	mov	r7, r0
   140c4:	mov	r6, r1
   140c8:	strd	r8, [sp, #16]
   140cc:	mov	r8, r2
   140d0:	mov	r9, r3
   140d4:	str	lr, [sp, #24]
   140d8:	sub	sp, sp, #28
   140dc:	ldr	r4, [sp, #56]	; 0x38
   140e0:	ldr	ip, [pc, #104]	; 14150 <__assert_fail@plt+0x32e4>
   140e4:	cmp	r4, #0
   140e8:	moveq	r4, ip
   140ec:	bl	10dac <__errno_location@plt>
   140f0:	ldr	ip, [r4, #44]	; 0x2c
   140f4:	mov	r5, r0
   140f8:	mov	r1, r6
   140fc:	add	lr, r4, #8
   14100:	mov	r3, r9
   14104:	ldr	r6, [r5]
   14108:	mov	r2, r8
   1410c:	mov	r0, r7
   14110:	str	ip, [sp, #16]
   14114:	ldr	ip, [r4, #40]	; 0x28
   14118:	str	lr, [sp, #8]
   1411c:	str	ip, [sp, #12]
   14120:	ldr	ip, [r4, #4]
   14124:	str	ip, [sp, #4]
   14128:	ldr	ip, [r4]
   1412c:	str	ip, [sp]
   14130:	bl	12600 <__assert_fail@plt+0x1794>
   14134:	str	r6, [r5]
   14138:	add	sp, sp, #28
   1413c:	ldrd	r4, [sp]
   14140:	ldrd	r6, [sp, #8]
   14144:	ldrd	r8, [sp, #16]
   14148:	add	sp, sp, #24
   1414c:	pop	{pc}		; (ldr pc, [sp], #4)
   14150:	andeq	r7, r2, ip, ror #4
   14154:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14158:	cmp	r3, #0
   1415c:	ldr	r4, [pc, #220]	; 14240 <__assert_fail@plt+0x33d4>
   14160:	movne	r4, r3
   14164:	strd	r6, [sp, #8]
   14168:	mov	r6, r2
   1416c:	strd	r8, [sp, #16]
   14170:	mov	r9, r0
   14174:	strd	sl, [sp, #24]
   14178:	mov	sl, r1
   1417c:	str	lr, [sp, #32]
   14180:	sub	sp, sp, #44	; 0x2c
   14184:	bl	10dac <__errno_location@plt>
   14188:	ldr	r5, [r4, #4]
   1418c:	mov	r7, r0
   14190:	mov	r1, #0
   14194:	add	r8, r4, #8
   14198:	mov	r3, sl
   1419c:	ldr	ip, [r4, #44]	; 0x2c
   141a0:	mov	r2, r9
   141a4:	mov	r0, r1
   141a8:	ldr	lr, [r7]
   141ac:	cmp	r6, r1
   141b0:	orreq	r5, r5, #1
   141b4:	str	ip, [sp, #16]
   141b8:	ldr	ip, [r4, #40]	; 0x28
   141bc:	stmib	sp, {r5, r8, ip}
   141c0:	ldr	ip, [r4]
   141c4:	str	lr, [sp, #28]
   141c8:	str	ip, [sp]
   141cc:	bl	12600 <__assert_fail@plt+0x1794>
   141d0:	add	r1, r0, #1
   141d4:	mov	fp, r0
   141d8:	mov	r0, r1
   141dc:	str	r1, [sp, #36]	; 0x24
   141e0:	bl	14fb0 <__assert_fail@plt+0x4144>
   141e4:	ldr	ip, [r4, #44]	; 0x2c
   141e8:	mov	r3, sl
   141ec:	mov	r2, r9
   141f0:	ldr	r1, [sp, #36]	; 0x24
   141f4:	str	ip, [sp, #16]
   141f8:	ldr	ip, [r4, #40]	; 0x28
   141fc:	str	r0, [sp, #32]
   14200:	stmib	sp, {r5, r8, ip}
   14204:	ldr	ip, [r4]
   14208:	str	ip, [sp]
   1420c:	bl	12600 <__assert_fail@plt+0x1794>
   14210:	ldr	lr, [sp, #28]
   14214:	cmp	r6, #0
   14218:	ldr	r0, [sp, #32]
   1421c:	str	lr, [r7]
   14220:	strne	fp, [r6]
   14224:	add	sp, sp, #44	; 0x2c
   14228:	ldrd	r4, [sp]
   1422c:	ldrd	r6, [sp, #8]
   14230:	ldrd	r8, [sp, #16]
   14234:	ldrd	sl, [sp, #24]
   14238:	add	sp, sp, #32
   1423c:	pop	{pc}		; (ldr pc, [sp], #4)
   14240:	andeq	r7, r2, ip, ror #4
   14244:	mov	r3, r2
   14248:	mov	r2, #0
   1424c:	b	14154 <__assert_fail@plt+0x32e8>
   14250:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14254:	movw	r5, #28904	; 0x70e8
   14258:	movt	r5, #2
   1425c:	ldr	r3, [r5, #4]
   14260:	strd	r6, [sp, #8]
   14264:	str	r8, [sp, #16]
   14268:	str	lr, [sp, #20]
   1426c:	ldr	r7, [r5]
   14270:	cmp	r3, #1
   14274:	ble	14298 <__assert_fail@plt+0x342c>
   14278:	mov	r4, #1
   1427c:	add	r6, r7, #4
   14280:	ldr	r0, [r6, r4, lsl #3]
   14284:	add	r4, r4, #1
   14288:	bl	11e9c <__assert_fail@plt+0x1030>
   1428c:	ldr	r3, [r5, #4]
   14290:	cmp	r3, r4
   14294:	bgt	14280 <__assert_fail@plt+0x3414>
   14298:	ldr	r0, [r7, #4]
   1429c:	movw	r4, #29036	; 0x716c
   142a0:	movt	r4, #2
   142a4:	cmp	r0, r4
   142a8:	beq	142bc <__assert_fail@plt+0x3450>
   142ac:	bl	11e9c <__assert_fail@plt+0x1030>
   142b0:	mov	r3, #256	; 0x100
   142b4:	str	r3, [r5, #8]
   142b8:	str	r4, [r5, #12]
   142bc:	ldr	r4, [pc, #44]	; 142f0 <__assert_fail@plt+0x3484>
   142c0:	cmp	r7, r4
   142c4:	beq	142d4 <__assert_fail@plt+0x3468>
   142c8:	mov	r0, r7
   142cc:	bl	11e9c <__assert_fail@plt+0x1030>
   142d0:	str	r4, [r5]
   142d4:	mov	r3, #1
   142d8:	ldrd	r6, [sp, #8]
   142dc:	str	r3, [r5, #4]
   142e0:	ldrd	r4, [sp]
   142e4:	ldr	r8, [sp, #16]
   142e8:	add	sp, sp, #20
   142ec:	pop	{pc}		; (ldr pc, [sp], #4)
   142f0:	strdeq	r7, [r2], -r0
   142f4:	ldr	r3, [pc, #4]	; 14300 <__assert_fail@plt+0x3494>
   142f8:	mvn	r2, #0
   142fc:	b	13dc0 <__assert_fail@plt+0x2f54>
   14300:	andeq	r7, r2, ip, ror #4
   14304:	ldr	r3, [pc]	; 1430c <__assert_fail@plt+0x34a0>
   14308:	b	13dc0 <__assert_fail@plt+0x2f54>
   1430c:	andeq	r7, r2, ip, ror #4
   14310:	mov	r1, r0
   14314:	ldr	r3, [pc, #8]	; 14324 <__assert_fail@plt+0x34b8>
   14318:	mvn	r2, #0
   1431c:	mov	r0, #0
   14320:	b	13dc0 <__assert_fail@plt+0x2f54>
   14324:	andeq	r7, r2, ip, ror #4
   14328:	mov	r2, r1
   1432c:	ldr	r3, [pc, #8]	; 1433c <__assert_fail@plt+0x34d0>
   14330:	mov	r1, r0
   14334:	mov	r0, #0
   14338:	b	13dc0 <__assert_fail@plt+0x2f54>
   1433c:	andeq	r7, r2, ip, ror #4
   14340:	strd	r4, [sp, #-12]!
   14344:	mov	r5, r2
   14348:	mov	r4, r0
   1434c:	str	lr, [sp, #8]
   14350:	sub	sp, sp, #52	; 0x34
   14354:	mov	r0, sp
   14358:	bl	1245c <__assert_fail@plt+0x15f0>
   1435c:	mov	r3, sp
   14360:	mov	r1, r5
   14364:	mov	r0, r4
   14368:	mvn	r2, #0
   1436c:	bl	13dc0 <__assert_fail@plt+0x2f54>
   14370:	add	sp, sp, #52	; 0x34
   14374:	ldrd	r4, [sp]
   14378:	add	sp, sp, #8
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	strd	r4, [sp, #-16]!
   14384:	mov	r5, r2
   14388:	mov	r4, r0
   1438c:	str	r6, [sp, #8]
   14390:	mov	r6, r3
   14394:	str	lr, [sp, #12]
   14398:	sub	sp, sp, #48	; 0x30
   1439c:	mov	r0, sp
   143a0:	bl	1245c <__assert_fail@plt+0x15f0>
   143a4:	mov	r3, sp
   143a8:	mov	r2, r6
   143ac:	mov	r1, r5
   143b0:	mov	r0, r4
   143b4:	bl	13dc0 <__assert_fail@plt+0x2f54>
   143b8:	add	sp, sp, #48	; 0x30
   143bc:	ldrd	r4, [sp]
   143c0:	ldr	r6, [sp, #8]
   143c4:	add	sp, sp, #12
   143c8:	pop	{pc}		; (ldr pc, [sp], #4)
   143cc:	mov	r2, r1
   143d0:	mov	r1, r0
   143d4:	mov	r0, #0
   143d8:	b	14340 <__assert_fail@plt+0x34d4>
   143dc:	mov	r3, r2
   143e0:	mov	r2, r1
   143e4:	mov	r1, r0
   143e8:	mov	r0, #0
   143ec:	b	14380 <__assert_fail@plt+0x3514>
   143f0:	ldr	ip, [pc, #140]	; 14484 <__assert_fail@plt+0x3618>
   143f4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   143f8:	ldrd	r4, [ip]
   143fc:	strd	r6, [sp, #8]
   14400:	ldrd	r6, [ip, #8]
   14404:	strd	r8, [sp, #16]
   14408:	lsr	r9, r2, #5
   1440c:	str	lr, [sp, #24]
   14410:	sub	sp, sp, #52	; 0x34
   14414:	and	lr, r2, #31
   14418:	add	r8, sp, #8
   1441c:	mov	r2, r1
   14420:	strd	r4, [sp]
   14424:	mov	r1, r0
   14428:	mov	r3, sp
   1442c:	strd	r6, [sp, #8]
   14430:	mov	r0, #0
   14434:	ldrd	r4, [ip, #16]
   14438:	ldrd	r6, [ip, #24]
   1443c:	strd	r4, [sp, #16]
   14440:	ldrd	r4, [ip, #32]
   14444:	strd	r6, [sp, #24]
   14448:	ldrd	r6, [ip, #40]	; 0x28
   1444c:	strd	r4, [sp, #32]
   14450:	strd	r6, [sp, #40]	; 0x28
   14454:	ldr	ip, [r8, r9, lsl #2]
   14458:	mvn	r4, ip, lsr lr
   1445c:	and	r4, r4, #1
   14460:	eor	lr, ip, r4, lsl lr
   14464:	str	lr, [r8, r9, lsl #2]
   14468:	bl	13dc0 <__assert_fail@plt+0x2f54>
   1446c:	add	sp, sp, #52	; 0x34
   14470:	ldrd	r4, [sp]
   14474:	ldrd	r6, [sp, #8]
   14478:	ldrd	r8, [sp, #16]
   1447c:	add	sp, sp, #24
   14480:	pop	{pc}		; (ldr pc, [sp], #4)
   14484:	andeq	r7, r2, ip, ror #4
   14488:	mov	r2, r1
   1448c:	mvn	r1, #0
   14490:	b	143f0 <__assert_fail@plt+0x3584>
   14494:	mov	r2, #58	; 0x3a
   14498:	mvn	r1, #0
   1449c:	b	143f0 <__assert_fail@plt+0x3584>
   144a0:	mov	r2, #58	; 0x3a
   144a4:	b	143f0 <__assert_fail@plt+0x3584>
   144a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   144ac:	strd	r6, [sp, #8]
   144b0:	mov	r6, r0
   144b4:	mov	r7, r2
   144b8:	str	lr, [sp, #16]
   144bc:	sub	sp, sp, #100	; 0x64
   144c0:	mov	r0, sp
   144c4:	bl	1245c <__assert_fail@plt+0x15f0>
   144c8:	ldrd	r4, [sp, #8]
   144cc:	mov	r1, r7
   144d0:	mov	r0, r6
   144d4:	add	r3, sp, #48	; 0x30
   144d8:	mvn	r2, #0
   144dc:	ldrd	r6, [sp]
   144e0:	strd	r4, [sp, #56]	; 0x38
   144e4:	ldrd	r4, [sp, #16]
   144e8:	strd	r6, [sp, #48]	; 0x30
   144ec:	ldrd	r6, [sp, #32]
   144f0:	ldr	lr, [sp, #60]	; 0x3c
   144f4:	strd	r4, [sp, #64]	; 0x40
   144f8:	ldrd	r4, [sp, #24]
   144fc:	mvn	ip, lr
   14500:	and	ip, ip, #67108864	; 0x4000000
   14504:	strd	r4, [sp, #72]	; 0x48
   14508:	eor	ip, ip, lr
   1450c:	ldrd	r4, [sp, #40]	; 0x28
   14510:	str	ip, [sp, #60]	; 0x3c
   14514:	strd	r6, [sp, #80]	; 0x50
   14518:	strd	r4, [sp, #88]	; 0x58
   1451c:	bl	13dc0 <__assert_fail@plt+0x2f54>
   14520:	add	sp, sp, #100	; 0x64
   14524:	ldrd	r4, [sp]
   14528:	ldrd	r6, [sp, #8]
   1452c:	add	sp, sp, #16
   14530:	pop	{pc}		; (ldr pc, [sp], #4)
   14534:	ldr	ip, [pc, #156]	; 145d8 <__assert_fail@plt+0x376c>
   14538:	cmp	r2, #0
   1453c:	cmpne	r1, #0
   14540:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14544:	strd	r6, [sp, #8]
   14548:	mov	r6, r2
   1454c:	str	r8, [sp, #16]
   14550:	mov	r8, r3
   14554:	strd	sl, [sp, #20]
   14558:	ldrd	r4, [ip]
   1455c:	str	lr, [sp, #28]
   14560:	sub	sp, sp, #48	; 0x30
   14564:	mov	lr, #10
   14568:	ldrd	r2, [ip, #8]
   1456c:	ldrd	sl, [ip, #16]
   14570:	strd	r4, [sp]
   14574:	ldrd	r4, [ip, #32]
   14578:	str	lr, [sp]
   1457c:	strd	r2, [sp, #8]
   14580:	strd	sl, [sp, #16]
   14584:	ldrd	r2, [ip, #24]
   14588:	ldrd	sl, [ip, #40]	; 0x28
   1458c:	strd	r2, [sp, #24]
   14590:	strd	r4, [sp, #32]
   14594:	strd	sl, [sp, #40]	; 0x28
   14598:	beq	145d4 <__assert_fail@plt+0x3768>
   1459c:	ldr	r2, [sp, #80]	; 0x50
   145a0:	mov	r7, r1
   145a4:	mov	r3, sp
   145a8:	mov	r1, r8
   145ac:	str	r7, [sp, #40]	; 0x28
   145b0:	str	r6, [sp, #44]	; 0x2c
   145b4:	bl	13dc0 <__assert_fail@plt+0x2f54>
   145b8:	add	sp, sp, #48	; 0x30
   145bc:	ldrd	r4, [sp]
   145c0:	ldrd	r6, [sp, #8]
   145c4:	ldr	r8, [sp, #16]
   145c8:	ldrd	sl, [sp, #20]
   145cc:	add	sp, sp, #28
   145d0:	pop	{pc}		; (ldr pc, [sp], #4)
   145d4:	bl	10e54 <abort@plt>
   145d8:	andeq	r7, r2, ip, ror #4
   145dc:	mvn	ip, #0
   145e0:	push	{lr}		; (str lr, [sp, #-4]!)
   145e4:	sub	sp, sp, #12
   145e8:	str	ip, [sp]
   145ec:	bl	14534 <__assert_fail@plt+0x36c8>
   145f0:	add	sp, sp, #12
   145f4:	pop	{pc}		; (ldr pc, [sp], #4)
   145f8:	mvn	ip, #0
   145fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14600:	sub	sp, sp, #12
   14604:	mov	r3, r2
   14608:	mov	r2, r1
   1460c:	mov	r1, r0
   14610:	mov	r0, #0
   14614:	str	ip, [sp]
   14618:	bl	14534 <__assert_fail@plt+0x36c8>
   1461c:	add	sp, sp, #12
   14620:	pop	{pc}		; (ldr pc, [sp], #4)
   14624:	push	{lr}		; (str lr, [sp, #-4]!)
   14628:	sub	sp, sp, #12
   1462c:	str	r3, [sp]
   14630:	mov	r3, r2
   14634:	mov	r2, r1
   14638:	mov	r1, r0
   1463c:	mov	r0, #0
   14640:	bl	14534 <__assert_fail@plt+0x36c8>
   14644:	add	sp, sp, #12
   14648:	pop	{pc}		; (ldr pc, [sp], #4)
   1464c:	ldr	r3, [pc]	; 14654 <__assert_fail@plt+0x37e8>
   14650:	b	13dc0 <__assert_fail@plt+0x2f54>
   14654:	strdeq	r7, [r2], -r8
   14658:	mov	r2, r1
   1465c:	ldr	r3, [pc, #8]	; 1466c <__assert_fail@plt+0x3800>
   14660:	mov	r1, r0
   14664:	mov	r0, #0
   14668:	b	13dc0 <__assert_fail@plt+0x2f54>
   1466c:	strdeq	r7, [r2], -r8
   14670:	ldr	r3, [pc, #4]	; 1467c <__assert_fail@plt+0x3810>
   14674:	mvn	r2, #0
   14678:	b	13dc0 <__assert_fail@plt+0x2f54>
   1467c:	strdeq	r7, [r2], -r8
   14680:	mov	r1, r0
   14684:	ldr	r3, [pc, #8]	; 14694 <__assert_fail@plt+0x3828>
   14688:	mvn	r2, #0
   1468c:	mov	r0, #0
   14690:	b	13dc0 <__assert_fail@plt+0x2f54>
   14694:	strdeq	r7, [r2], -r8
   14698:	mov	r3, #0
   1469c:	str	r3, [r0]
   146a0:	str	r3, [r0, #4]
   146a4:	bx	lr
   146a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   146ac:	cmp	r2, #0
   146b0:	mov	r5, r0
   146b4:	strd	r6, [sp, #8]
   146b8:	addne	r2, r1, r2
   146bc:	mov	r6, r3
   146c0:	strd	r8, [sp, #16]
   146c4:	mov	r8, #0
   146c8:	mov	r9, #0
   146cc:	str	lr, [sp, #24]
   146d0:	sub	sp, sp, #52	; 0x34
   146d4:	subne	r1, r1, #1
   146d8:	add	ip, sp, #16
   146dc:	subne	lr, r2, #1
   146e0:	movne	r4, #1
   146e4:	strd	r8, [sp, #16]
   146e8:	strd	r8, [ip, #8]
   146ec:	strd	r8, [ip, #16]
   146f0:	strd	r8, [ip, #24]
   146f4:	beq	14718 <__assert_fail@plt+0x38ac>
   146f8:	ldrb	r3, [r1, #1]!
   146fc:	lsr	r0, r3, #5
   14700:	and	r3, r3, #31
   14704:	cmp	lr, r1
   14708:	ldr	r2, [ip, r0, lsl #2]
   1470c:	orr	r3, r2, r4, lsl r3
   14710:	str	r3, [ip, r0, lsl #2]
   14714:	bne	146f8 <__assert_fail@plt+0x388c>
   14718:	ldr	r3, [r5, #4]
   1471c:	ldr	r2, [r5, #8]
   14720:	cmp	r3, r2
   14724:	bcs	14774 <__assert_fail@plt+0x3908>
   14728:	add	r2, r3, #1
   1472c:	str	r2, [r5, #4]
   14730:	ldrb	r4, [r3]
   14734:	b	14740 <__assert_fail@plt+0x38d4>
   14738:	str	r1, [r5, #4]
   1473c:	ldrb	r4, [r3]
   14740:	lsr	r3, r4, #5
   14744:	add	r2, sp, #48	; 0x30
   14748:	and	r1, r4, #31
   1474c:	add	r3, r2, r3, lsl #2
   14750:	ldr	r2, [r3, #-32]	; 0xffffffe0
   14754:	lsr	r3, r2, r1
   14758:	tst	r3, #1
   1475c:	beq	14784 <__assert_fail@plt+0x3918>
   14760:	ldr	r3, [r5, #4]
   14764:	ldr	r2, [r5, #8]
   14768:	add	r1, r3, #1
   1476c:	cmp	r3, r2
   14770:	bcc	14738 <__assert_fail@plt+0x38cc>
   14774:	mov	r0, r5
   14778:	bl	10e0c <__uflow@plt>
   1477c:	subs	r4, r0, #0
   14780:	bge	14740 <__assert_fail@plt+0x38d4>
   14784:	ldm	r6, {r3, r9}
   14788:	mov	r7, #0
   1478c:	mov	r8, #1
   14790:	str	r3, [sp, #12]
   14794:	b	147ec <__assert_fail@plt+0x3980>
   14798:	lsr	r3, r4, #5
   1479c:	mov	r0, r7
   147a0:	add	r2, sp, #48	; 0x30
   147a4:	cmp	r4, #0
   147a8:	and	r1, r4, #31
   147ac:	add	r3, r2, r3, lsl #2
   147b0:	add	r7, r7, #1
   147b4:	add	r2, r9, r0
   147b8:	blt	1484c <__assert_fail@plt+0x39e0>
   147bc:	ldr	r3, [r3, #-32]	; 0xffffffe0
   147c0:	lsr	r3, r3, r1
   147c4:	tst	r3, #1
   147c8:	bne	1484c <__assert_fail@plt+0x39e0>
   147cc:	strb	r4, [r2]
   147d0:	ldr	r3, [r5, #4]
   147d4:	ldr	r2, [r5, #8]
   147d8:	add	r1, r3, #1
   147dc:	cmp	r3, r2
   147e0:	bcs	14828 <__assert_fail@plt+0x39bc>
   147e4:	str	r1, [r5, #4]
   147e8:	ldrb	r4, [r3]
   147ec:	clz	r3, r7
   147f0:	lsr	r3, r3, #5
   147f4:	ands	r3, r3, r4, lsr #31
   147f8:	bne	14844 <__assert_fail@plt+0x39d8>
   147fc:	ldr	r3, [sp, #12]
   14800:	cmp	r3, r7
   14804:	bne	14798 <__assert_fail@plt+0x392c>
   14808:	mov	r0, r9
   1480c:	mvn	r3, #0
   14810:	str	r8, [sp]
   14814:	mov	r2, #1
   14818:	add	r1, sp, #12
   1481c:	bl	15160 <__assert_fail@plt+0x42f4>
   14820:	mov	r9, r0
   14824:	b	14798 <__assert_fail@plt+0x392c>
   14828:	mov	r0, r5
   1482c:	bl	10e0c <__uflow@plt>
   14830:	clz	r3, r7
   14834:	mov	r4, r0
   14838:	lsr	r3, r3, #5
   1483c:	ands	r3, r3, r4, lsr #31
   14840:	beq	147fc <__assert_fail@plt+0x3990>
   14844:	mvn	r0, #0
   14848:	b	1485c <__assert_fail@plt+0x39f0>
   1484c:	mov	r3, #0
   14850:	strb	r3, [r2]
   14854:	ldr	r3, [sp, #12]
   14858:	stm	r6, {r3, r9}
   1485c:	add	sp, sp, #52	; 0x34
   14860:	ldrd	r4, [sp]
   14864:	ldrd	r6, [sp, #8]
   14868:	ldrd	r8, [sp, #16]
   1486c:	add	sp, sp, #24
   14870:	pop	{pc}		; (ldr pc, [sp], #4)
   14874:	cmp	r1, #0
   14878:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1487c:	strd	r6, [sp, #8]
   14880:	strd	r8, [sp, #16]
   14884:	mov	r9, r0
   14888:	addne	r0, r1, #1
   1488c:	strd	sl, [sp, #24]
   14890:	mov	fp, r3
   14894:	moveq	r3, #64	; 0x40
   14898:	movne	r3, r0
   1489c:	str	lr, [sp, #32]
   148a0:	sub	sp, sp, #28
   148a4:	moveq	r0, r3
   148a8:	mov	r1, #4
   148ac:	mov	sl, r2
   148b0:	str	r3, [sp, #12]
   148b4:	bl	150d0 <__assert_fail@plt+0x4264>
   148b8:	mov	r7, r0
   148bc:	mov	r1, #4
   148c0:	ldr	r0, [sp, #12]
   148c4:	bl	150d0 <__assert_fail@plt+0x4264>
   148c8:	mov	r3, #0
   148cc:	mov	r8, r0
   148d0:	mov	r4, r3
   148d4:	str	r3, [sp, #16]
   148d8:	str	r3, [sp, #20]
   148dc:	b	14918 <__assert_fail@plt+0x3aac>
   148e0:	lsl	r3, r4, #2
   148e4:	cmn	r5, #1
   148e8:	mov	r1, #1
   148ec:	mov	r0, r6
   148f0:	add	r2, r8, r3
   148f4:	add	r3, r7, r3
   148f8:	beq	14978 <__assert_fail@plt+0x3b0c>
   148fc:	bl	150d0 <__assert_fail@plt+0x4264>
   14900:	mov	r2, r6
   14904:	str	r5, [r8, r4, lsl #2]
   14908:	ldr	r1, [sp, #20]
   1490c:	bl	10c74 <memcpy@plt>
   14910:	str	r0, [r7, r4, lsl #2]
   14914:	add	r4, r4, #1
   14918:	add	r3, sp, #16
   1491c:	mov	r2, fp
   14920:	mov	r1, sl
   14924:	mov	r0, r9
   14928:	bl	146a8 <__assert_fail@plt+0x383c>
   1492c:	ldr	r3, [sp, #12]
   14930:	mov	r5, r0
   14934:	add	r6, r0, #1
   14938:	cmp	r3, r4
   1493c:	bgt	148e0 <__assert_fail@plt+0x3a74>
   14940:	mov	r2, #4
   14944:	mov	r0, r7
   14948:	mvn	r3, #0
   1494c:	add	r1, sp, #12
   14950:	str	r2, [sp]
   14954:	mov	r2, #1
   14958:	bl	15160 <__assert_fail@plt+0x42f4>
   1495c:	mov	r7, r0
   14960:	mov	r2, #4
   14964:	ldr	r1, [sp, #12]
   14968:	mov	r0, r8
   1496c:	bl	1504c <__assert_fail@plt+0x41e0>
   14970:	mov	r8, r0
   14974:	b	148e0 <__assert_fail@plt+0x3a74>
   14978:	mov	r1, #0
   1497c:	str	r1, [r3]
   14980:	str	r1, [r2]
   14984:	ldr	r0, [sp, #20]
   14988:	bl	11e9c <__assert_fail@plt+0x1030>
   1498c:	ldr	r3, [sp, #68]	; 0x44
   14990:	cmp	r3, #0
   14994:	ldr	r3, [sp, #64]	; 0x40
   14998:	str	r7, [r3]
   1499c:	beq	149c8 <__assert_fail@plt+0x3b5c>
   149a0:	ldr	r3, [sp, #68]	; 0x44
   149a4:	str	r8, [r3]
   149a8:	mov	r0, r4
   149ac:	add	sp, sp, #28
   149b0:	ldrd	r4, [sp]
   149b4:	ldrd	r6, [sp, #8]
   149b8:	ldrd	r8, [sp, #16]
   149bc:	ldrd	sl, [sp, #24]
   149c0:	add	sp, sp, #32
   149c4:	pop	{pc}		; (ldr pc, [sp], #4)
   149c8:	mov	r0, r8
   149cc:	bl	11e9c <__assert_fail@plt+0x1030>
   149d0:	b	149a8 <__assert_fail@plt+0x3b3c>
   149d4:	cmp	r1, #0
   149d8:	strd	r4, [sp, #-16]!
   149dc:	mov	ip, r3
   149e0:	str	r6, [sp, #8]
   149e4:	mov	r4, r0
   149e8:	str	lr, [sp, #12]
   149ec:	sub	sp, sp, #32
   149f0:	ldr	r5, [sp, #48]	; 0x30
   149f4:	ldr	r6, [sp, #52]	; 0x34
   149f8:	beq	14b3c <__assert_fail@plt+0x3cd0>
   149fc:	mov	r3, r1
   14a00:	mov	r1, #1
   14a04:	stm	sp, {r2, ip}
   14a08:	movw	r2, #24024	; 0x5dd8
   14a0c:	movt	r2, #1
   14a10:	bl	10de8 <__fprintf_chk@plt>
   14a14:	mov	r2, #5
   14a18:	movw	r1, #24044	; 0x5dec
   14a1c:	movt	r1, #1
   14a20:	mov	r0, #0
   14a24:	bl	10ca4 <dcgettext@plt>
   14a28:	movw	ip, #2022	; 0x7e6
   14a2c:	mov	r3, r0
   14a30:	mov	r1, #1
   14a34:	movw	r2, #24772	; 0x60c4
   14a38:	movt	r2, #1
   14a3c:	mov	r0, r4
   14a40:	str	ip, [sp]
   14a44:	bl	10de8 <__fprintf_chk@plt>
   14a48:	mov	r1, r4
   14a4c:	mov	r0, #10
   14a50:	bl	10c98 <fputc_unlocked@plt>
   14a54:	mov	r2, #5
   14a58:	movw	r1, #24048	; 0x5df0
   14a5c:	movt	r1, #1
   14a60:	mov	r0, #0
   14a64:	bl	10ca4 <dcgettext@plt>
   14a68:	mov	r2, r0
   14a6c:	mov	r1, #1
   14a70:	movw	r3, #24220	; 0x5e9c
   14a74:	movt	r3, #1
   14a78:	mov	r0, r4
   14a7c:	bl	10de8 <__fprintf_chk@plt>
   14a80:	mov	r1, r4
   14a84:	mov	r0, #10
   14a88:	bl	10c98 <fputc_unlocked@plt>
   14a8c:	cmp	r6, #9
   14a90:	ldrls	pc, [pc, r6, lsl #2]
   14a94:	b	14da8 <__assert_fail@plt+0x3f3c>
   14a98:	andeq	r4, r1, r8, lsr #22
   14a9c:	andeq	r4, r1, r8, asr fp
   14aa0:	muleq	r1, r4, fp
   14aa4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14aa8:	andeq	r4, r1, ip, lsl ip
   14aac:	andeq	r4, r1, r4, asr ip
   14ab0:	muleq	r1, ip, ip
   14ab4:	strdeq	r4, [r1], -r0
   14ab8:	andeq	r4, r1, r8, asr #26
   14abc:	andeq	r4, r1, r0, asr #21
   14ac0:	movw	r1, #24524	; 0x5fcc
   14ac4:	movt	r1, #1
   14ac8:	mov	r2, #5
   14acc:	mov	r0, #0
   14ad0:	bl	10ca4 <dcgettext@plt>
   14ad4:	ldr	lr, [r5, #4]
   14ad8:	mov	r2, r0
   14adc:	mov	r1, #1
   14ae0:	mov	r0, r4
   14ae4:	ldr	r3, [r5, #8]
   14ae8:	ldr	ip, [r5, #32]
   14aec:	str	lr, [sp]
   14af0:	ldr	lr, [r5, #12]
   14af4:	str	ip, [sp, #28]
   14af8:	ldr	ip, [r5, #28]
   14afc:	str	r3, [sp, #4]
   14b00:	ldr	r3, [r5, #16]
   14b04:	str	lr, [sp, #8]
   14b08:	ldr	lr, [r5, #20]
   14b0c:	str	ip, [sp, #24]
   14b10:	ldr	ip, [r5, #24]
   14b14:	str	r3, [sp, #12]
   14b18:	ldr	r3, [r5]
   14b1c:	str	lr, [sp, #16]
   14b20:	str	ip, [sp, #20]
   14b24:	bl	10de8 <__fprintf_chk@plt>
   14b28:	add	sp, sp, #32
   14b2c:	ldrd	r4, [sp]
   14b30:	ldr	r6, [sp, #8]
   14b34:	add	sp, sp, #12
   14b38:	pop	{pc}		; (ldr pc, [sp], #4)
   14b3c:	mov	r3, r2
   14b40:	mov	r1, #1
   14b44:	str	ip, [sp]
   14b48:	movw	r2, #24036	; 0x5de4
   14b4c:	movt	r2, #1
   14b50:	bl	10de8 <__fprintf_chk@plt>
   14b54:	b	14a14 <__assert_fail@plt+0x3ba8>
   14b58:	mov	r2, #5
   14b5c:	movw	r1, #24256	; 0x5ec0
   14b60:	movt	r1, #1
   14b64:	mov	r0, #0
   14b68:	bl	10ca4 <dcgettext@plt>
   14b6c:	ldr	r3, [r5]
   14b70:	mov	r2, r0
   14b74:	mov	r1, #1
   14b78:	mov	r0, r4
   14b7c:	add	sp, sp, #32
   14b80:	ldrd	r4, [sp]
   14b84:	ldr	r6, [sp, #8]
   14b88:	ldr	lr, [sp, #12]
   14b8c:	add	sp, sp, #16
   14b90:	b	10de8 <__fprintf_chk@plt>
   14b94:	mov	r2, #5
   14b98:	movw	r1, #24272	; 0x5ed0
   14b9c:	movt	r1, #1
   14ba0:	mov	r0, #0
   14ba4:	bl	10ca4 <dcgettext@plt>
   14ba8:	ldm	r5, {r3, ip}
   14bac:	mov	r2, r0
   14bb0:	mov	r1, #1
   14bb4:	mov	r0, r4
   14bb8:	str	ip, [sp, #48]	; 0x30
   14bbc:	add	sp, sp, #32
   14bc0:	ldrd	r4, [sp]
   14bc4:	ldr	r6, [sp, #8]
   14bc8:	ldr	lr, [sp, #12]
   14bcc:	add	sp, sp, #16
   14bd0:	b	10de8 <__fprintf_chk@plt>
   14bd4:	mov	r2, #5
   14bd8:	movw	r1, #24296	; 0x5ee8
   14bdc:	movt	r1, #1
   14be0:	mov	r0, #0
   14be4:	bl	10ca4 <dcgettext@plt>
   14be8:	ldm	r5, {r3, lr}
   14bec:	mov	r2, r0
   14bf0:	mov	r1, #1
   14bf4:	mov	r0, r4
   14bf8:	ldr	ip, [r5, #8]
   14bfc:	str	lr, [sp, #48]	; 0x30
   14c00:	str	ip, [sp, #52]	; 0x34
   14c04:	add	sp, sp, #32
   14c08:	ldrd	r4, [sp]
   14c0c:	ldr	r6, [sp, #8]
   14c10:	ldr	lr, [sp, #12]
   14c14:	add	sp, sp, #16
   14c18:	b	10de8 <__fprintf_chk@plt>
   14c1c:	mov	r2, #5
   14c20:	movw	r1, #24324	; 0x5f04
   14c24:	movt	r1, #1
   14c28:	mov	r0, #0
   14c2c:	bl	10ca4 <dcgettext@plt>
   14c30:	ldmib	r5, {r3, ip, lr}
   14c34:	mov	r2, r0
   14c38:	mov	r1, #1
   14c3c:	mov	r0, r4
   14c40:	str	r3, [sp]
   14c44:	ldr	r3, [r5]
   14c48:	stmib	sp, {ip, lr}
   14c4c:	bl	10de8 <__fprintf_chk@plt>
   14c50:	b	14b28 <__assert_fail@plt+0x3cbc>
   14c54:	mov	r2, #5
   14c58:	movw	r1, #24356	; 0x5f24
   14c5c:	movt	r1, #1
   14c60:	mov	r0, #0
   14c64:	bl	10ca4 <dcgettext@plt>
   14c68:	ldmib	r5, {ip, lr}
   14c6c:	mov	r2, r0
   14c70:	mov	r1, #1
   14c74:	mov	r0, r4
   14c78:	ldr	r3, [r5, #16]
   14c7c:	str	ip, [sp]
   14c80:	ldr	ip, [r5, #12]
   14c84:	str	r3, [sp, #12]
   14c88:	ldr	r3, [r5]
   14c8c:	str	lr, [sp, #4]
   14c90:	str	ip, [sp, #8]
   14c94:	bl	10de8 <__fprintf_chk@plt>
   14c98:	b	14b28 <__assert_fail@plt+0x3cbc>
   14c9c:	mov	r2, #5
   14ca0:	movw	r1, #24392	; 0x5f48
   14ca4:	movt	r1, #1
   14ca8:	mov	r0, #0
   14cac:	bl	10ca4 <dcgettext@plt>
   14cb0:	ldr	lr, [r5, #4]
   14cb4:	mov	r2, r0
   14cb8:	mov	r1, #1
   14cbc:	mov	r0, r4
   14cc0:	ldr	r3, [r5, #8]
   14cc4:	ldr	ip, [r5, #20]
   14cc8:	str	lr, [sp]
   14ccc:	ldr	lr, [r5, #12]
   14cd0:	str	ip, [sp, #16]
   14cd4:	ldr	ip, [r5, #16]
   14cd8:	str	r3, [sp, #4]
   14cdc:	ldr	r3, [r5]
   14ce0:	str	lr, [sp, #8]
   14ce4:	str	ip, [sp, #12]
   14ce8:	bl	10de8 <__fprintf_chk@plt>
   14cec:	b	14b28 <__assert_fail@plt+0x3cbc>
   14cf0:	mov	r2, #5
   14cf4:	movw	r1, #24432	; 0x5f70
   14cf8:	movt	r1, #1
   14cfc:	mov	r0, #0
   14d00:	bl	10ca4 <dcgettext@plt>
   14d04:	ldmib	r5, {r3, ip}
   14d08:	mov	r2, r0
   14d0c:	mov	r1, #1
   14d10:	mov	r0, r4
   14d14:	ldr	lr, [r5, #24]
   14d18:	str	r3, [sp]
   14d1c:	ldr	r3, [r5, #12]
   14d20:	str	lr, [sp, #20]
   14d24:	ldr	lr, [r5, #20]
   14d28:	str	ip, [sp, #4]
   14d2c:	ldr	ip, [r5, #16]
   14d30:	str	r3, [sp, #8]
   14d34:	ldr	r3, [r5]
   14d38:	str	ip, [sp, #12]
   14d3c:	str	lr, [sp, #16]
   14d40:	bl	10de8 <__fprintf_chk@plt>
   14d44:	b	14b28 <__assert_fail@plt+0x3cbc>
   14d48:	mov	r2, #5
   14d4c:	movw	r1, #24476	; 0x5f9c
   14d50:	movt	r1, #1
   14d54:	mov	r0, #0
   14d58:	bl	10ca4 <dcgettext@plt>
   14d5c:	ldmib	r5, {ip, lr}
   14d60:	mov	r2, r0
   14d64:	mov	r1, #1
   14d68:	mov	r0, r4
   14d6c:	ldr	r3, [r5, #28]
   14d70:	str	ip, [sp]
   14d74:	ldr	ip, [r5, #12]
   14d78:	str	r3, [sp, #24]
   14d7c:	ldr	r3, [r5, #24]
   14d80:	str	lr, [sp, #4]
   14d84:	ldr	lr, [r5, #16]
   14d88:	str	ip, [sp, #8]
   14d8c:	ldr	ip, [r5, #20]
   14d90:	str	r3, [sp, #20]
   14d94:	ldr	r3, [r5]
   14d98:	str	lr, [sp, #12]
   14d9c:	str	ip, [sp, #16]
   14da0:	bl	10de8 <__fprintf_chk@plt>
   14da4:	b	14b28 <__assert_fail@plt+0x3cbc>
   14da8:	movw	r1, #24576	; 0x6000
   14dac:	movt	r1, #1
   14db0:	b	14ac8 <__assert_fail@plt+0x3c5c>
   14db4:	strd	r4, [sp, #-12]!
   14db8:	str	lr, [sp, #8]
   14dbc:	sub	sp, sp, #12
   14dc0:	ldr	r5, [sp, #24]
   14dc4:	ldr	ip, [r5]
   14dc8:	cmp	ip, #0
   14dcc:	beq	14de8 <__assert_fail@plt+0x3f7c>
   14dd0:	mov	lr, r5
   14dd4:	mov	ip, #0
   14dd8:	ldr	r4, [lr, #4]!
   14ddc:	add	ip, ip, #1
   14de0:	cmp	r4, #0
   14de4:	bne	14dd8 <__assert_fail@plt+0x3f6c>
   14de8:	stm	sp, {r5, ip}
   14dec:	bl	149d4 <__assert_fail@plt+0x3b68>
   14df0:	add	sp, sp, #12
   14df4:	ldrd	r4, [sp]
   14df8:	add	sp, sp, #8
   14dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   14e00:	strd	r4, [sp, #-16]!
   14e04:	mov	ip, #0
   14e08:	str	r6, [sp, #8]
   14e0c:	str	lr, [sp, #12]
   14e10:	sub	sp, sp, #48	; 0x30
   14e14:	ldr	r5, [sp, #64]	; 0x40
   14e18:	add	r6, sp, #8
   14e1c:	mov	r4, r6
   14e20:	ldr	lr, [r5], #4
   14e24:	cmp	lr, #0
   14e28:	str	lr, [r4], #4
   14e2c:	beq	14e3c <__assert_fail@plt+0x3fd0>
   14e30:	add	ip, ip, #1
   14e34:	cmp	ip, #10
   14e38:	bne	14e20 <__assert_fail@plt+0x3fb4>
   14e3c:	stm	sp, {r6, ip}
   14e40:	bl	149d4 <__assert_fail@plt+0x3b68>
   14e44:	add	sp, sp, #48	; 0x30
   14e48:	ldrd	r4, [sp]
   14e4c:	ldr	r6, [sp, #8]
   14e50:	add	sp, sp, #12
   14e54:	pop	{pc}		; (ldr pc, [sp], #4)
   14e58:	push	{r3}		; (str r3, [sp, #-4]!)
   14e5c:	mov	ip, #0
   14e60:	strd	r4, [sp, #-12]!
   14e64:	str	lr, [sp, #8]
   14e68:	sub	sp, sp, #56	; 0x38
   14e6c:	add	r3, sp, #72	; 0x48
   14e70:	add	r5, sp, #16
   14e74:	mov	r4, r3
   14e78:	mov	lr, r5
   14e7c:	str	r3, [sp, #12]
   14e80:	ldr	r3, [r4], #4
   14e84:	cmp	r3, #0
   14e88:	str	r3, [lr], #4
   14e8c:	beq	14e9c <__assert_fail@plt+0x4030>
   14e90:	add	ip, ip, #1
   14e94:	cmp	ip, #10
   14e98:	bne	14e80 <__assert_fail@plt+0x4014>
   14e9c:	ldr	r3, [sp, #68]	; 0x44
   14ea0:	stm	sp, {r5, ip}
   14ea4:	bl	149d4 <__assert_fail@plt+0x3b68>
   14ea8:	add	sp, sp, #56	; 0x38
   14eac:	ldrd	r4, [sp]
   14eb0:	ldr	lr, [sp, #8]
   14eb4:	add	sp, sp, #12
   14eb8:	add	sp, sp, #4
   14ebc:	bx	lr
   14ec0:	movw	r3, #28996	; 0x7144
   14ec4:	movt	r3, #2
   14ec8:	str	r4, [sp, #-8]!
   14ecc:	mov	r0, #10
   14ed0:	ldr	r1, [r3]
   14ed4:	str	lr, [sp, #4]
   14ed8:	bl	10c98 <fputc_unlocked@plt>
   14edc:	mov	r2, #5
   14ee0:	movw	r1, #24636	; 0x603c
   14ee4:	movt	r1, #1
   14ee8:	mov	r0, #0
   14eec:	bl	10ca4 <dcgettext@plt>
   14ef0:	mov	r1, r0
   14ef4:	movw	r2, #24656	; 0x6050
   14ef8:	movt	r2, #1
   14efc:	mov	r0, #1
   14f00:	bl	10dd0 <__printf_chk@plt>
   14f04:	mov	r2, #5
   14f08:	movw	r1, #24680	; 0x6068
   14f0c:	movt	r1, #1
   14f10:	mov	r0, #0
   14f14:	bl	10ca4 <dcgettext@plt>
   14f18:	mov	r1, r0
   14f1c:	movw	r3, #23012	; 0x59e4
   14f20:	movt	r3, #1
   14f24:	movw	r2, #23052	; 0x5a0c
   14f28:	movt	r2, #1
   14f2c:	mov	r0, #1
   14f30:	bl	10dd0 <__printf_chk@plt>
   14f34:	mov	r2, #5
   14f38:	movw	r1, #24700	; 0x607c
   14f3c:	movt	r1, #1
   14f40:	mov	r0, #0
   14f44:	bl	10ca4 <dcgettext@plt>
   14f48:	mov	r1, r0
   14f4c:	movw	r2, #24740	; 0x60a4
   14f50:	movt	r2, #1
   14f54:	mov	r0, #1
   14f58:	ldr	r4, [sp]
   14f5c:	ldr	lr, [sp, #4]
   14f60:	add	sp, sp, #8
   14f64:	b	10dd0 <__printf_chk@plt>
   14f68:	str	r4, [sp, #-8]!
   14f6c:	str	lr, [sp, #4]
   14f70:	bl	15498 <__assert_fail@plt+0x462c>
   14f74:	cmp	r0, #0
   14f78:	beq	14f88 <__assert_fail@plt+0x411c>
   14f7c:	ldr	r4, [sp]
   14f80:	add	sp, sp, #4
   14f84:	pop	{pc}		; (ldr pc, [sp], #4)
   14f88:	bl	153e0 <__assert_fail@plt+0x4574>
   14f8c:	str	r4, [sp, #-8]!
   14f90:	str	lr, [sp, #4]
   14f94:	bl	15498 <__assert_fail@plt+0x462c>
   14f98:	cmp	r0, #0
   14f9c:	beq	14fac <__assert_fail@plt+0x4140>
   14fa0:	ldr	r4, [sp]
   14fa4:	add	sp, sp, #4
   14fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   14fac:	bl	153e0 <__assert_fail@plt+0x4574>
   14fb0:	str	r4, [sp, #-8]!
   14fb4:	str	lr, [sp, #4]
   14fb8:	bl	15498 <__assert_fail@plt+0x462c>
   14fbc:	cmp	r0, #0
   14fc0:	beq	14fd0 <__assert_fail@plt+0x4164>
   14fc4:	ldr	r4, [sp]
   14fc8:	add	sp, sp, #4
   14fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd0:	bl	153e0 <__assert_fail@plt+0x4574>
   14fd4:	strd	r4, [sp, #-16]!
   14fd8:	mov	r5, r0
   14fdc:	mov	r4, r1
   14fe0:	str	r6, [sp, #8]
   14fe4:	str	lr, [sp, #12]
   14fe8:	bl	154d4 <__assert_fail@plt+0x4668>
   14fec:	cmp	r0, #0
   14ff0:	beq	15004 <__assert_fail@plt+0x4198>
   14ff4:	ldrd	r4, [sp]
   14ff8:	ldr	r6, [sp, #8]
   14ffc:	add	sp, sp, #12
   15000:	pop	{pc}		; (ldr pc, [sp], #4)
   15004:	adds	r4, r4, #0
   15008:	movne	r4, #1
   1500c:	cmp	r5, #0
   15010:	moveq	r4, #1
   15014:	cmp	r4, #0
   15018:	beq	14ff4 <__assert_fail@plt+0x4188>
   1501c:	bl	153e0 <__assert_fail@plt+0x4574>
   15020:	cmp	r1, #0
   15024:	orreq	r1, r1, #1
   15028:	str	r4, [sp, #-8]!
   1502c:	str	lr, [sp, #4]
   15030:	bl	154d4 <__assert_fail@plt+0x4668>
   15034:	cmp	r0, #0
   15038:	beq	15048 <__assert_fail@plt+0x41dc>
   1503c:	ldr	r4, [sp]
   15040:	add	sp, sp, #4
   15044:	pop	{pc}		; (ldr pc, [sp], #4)
   15048:	bl	153e0 <__assert_fail@plt+0x4574>
   1504c:	strd	r4, [sp, #-16]!
   15050:	mov	r4, r0
   15054:	mov	r5, r2
   15058:	str	r6, [sp, #8]
   1505c:	mov	r6, r1
   15060:	str	lr, [sp, #12]
   15064:	bl	15670 <__assert_fail@plt+0x4804>
   15068:	cmp	r0, #0
   1506c:	beq	15080 <__assert_fail@plt+0x4214>
   15070:	ldrd	r4, [sp]
   15074:	ldr	r6, [sp, #8]
   15078:	add	sp, sp, #12
   1507c:	pop	{pc}		; (ldr pc, [sp], #4)
   15080:	cmp	r4, #0
   15084:	beq	15094 <__assert_fail@plt+0x4228>
   15088:	cmp	r6, #0
   1508c:	cmpne	r5, #0
   15090:	beq	15070 <__assert_fail@plt+0x4204>
   15094:	bl	153e0 <__assert_fail@plt+0x4574>
   15098:	b	1504c <__assert_fail@plt+0x41e0>
   1509c:	cmp	r2, #0
   150a0:	cmpne	r1, #0
   150a4:	str	r4, [sp, #-8]!
   150a8:	moveq	r2, #1
   150ac:	str	lr, [sp, #4]
   150b0:	moveq	r1, r2
   150b4:	bl	15670 <__assert_fail@plt+0x4804>
   150b8:	cmp	r0, #0
   150bc:	beq	150cc <__assert_fail@plt+0x4260>
   150c0:	ldr	r4, [sp]
   150c4:	add	sp, sp, #4
   150c8:	pop	{pc}		; (ldr pc, [sp], #4)
   150cc:	bl	153e0 <__assert_fail@plt+0x4574>
   150d0:	mov	r2, r1
   150d4:	mov	r1, r0
   150d8:	mov	r0, #0
   150dc:	b	1504c <__assert_fail@plt+0x41e0>
   150e0:	mov	r2, r1
   150e4:	mov	r1, r0
   150e8:	mov	r0, #0
   150ec:	b	1509c <__assert_fail@plt+0x4230>
   150f0:	cmp	r0, #0
   150f4:	strd	r4, [sp, #-16]!
   150f8:	mov	r5, r1
   150fc:	ldr	r4, [r1]
   15100:	str	r6, [sp, #8]
   15104:	str	lr, [sp, #12]
   15108:	beq	15138 <__assert_fail@plt+0x42cc>
   1510c:	lsr	r3, r4, #1
   15110:	add	r3, r3, #1
   15114:	adds	r4, r4, r3
   15118:	bcs	15154 <__assert_fail@plt+0x42e8>
   1511c:	mov	r1, r4
   15120:	bl	1504c <__assert_fail@plt+0x41e0>
   15124:	ldr	r6, [sp, #8]
   15128:	str	r4, [r5]
   1512c:	ldrd	r4, [sp]
   15130:	add	sp, sp, #12
   15134:	pop	{pc}		; (ldr pc, [sp], #4)
   15138:	cmp	r4, #0
   1513c:	bne	1511c <__assert_fail@plt+0x42b0>
   15140:	mov	r4, #64	; 0x40
   15144:	udiv	r4, r4, r2
   15148:	cmp	r2, #64	; 0x40
   1514c:	addhi	r4, r4, #1
   15150:	b	1511c <__assert_fail@plt+0x42b0>
   15154:	bl	153e0 <__assert_fail@plt+0x4574>
   15158:	mov	r2, #1
   1515c:	b	150f0 <__assert_fail@plt+0x4284>
   15160:	ldr	ip, [r1]
   15164:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15168:	mov	r5, r1
   1516c:	strd	r6, [sp, #8]
   15170:	str	lr, [sp, #28]
   15174:	strd	r8, [sp, #16]
   15178:	asr	lr, ip, #1
   1517c:	ldr	r8, [sp, #32]
   15180:	str	sl, [sp, #24]
   15184:	adds	r4, ip, lr
   15188:	mvn	lr, r3
   1518c:	lsr	lr, lr, #31
   15190:	mvnvs	r4, #-2147483648	; 0x80000000
   15194:	cmp	r3, r4
   15198:	movge	r1, #0
   1519c:	andlt	r1, lr, #1
   151a0:	cmp	r1, #0
   151a4:	movne	r4, r3
   151a8:	smull	r6, r7, r4, r8
   151ac:	cmp	r7, r6, asr #31
   151b0:	bne	15238 <__assert_fail@plt+0x43cc>
   151b4:	cmp	r6, #63	; 0x3f
   151b8:	mov	r1, r6
   151bc:	ble	15220 <__assert_fail@plt+0x43b4>
   151c0:	cmp	r0, #0
   151c4:	sub	r6, r4, ip
   151c8:	streq	r0, [r5]
   151cc:	cmp	r6, r2
   151d0:	bge	15200 <__assert_fail@plt+0x4394>
   151d4:	adds	r4, ip, r2
   151d8:	bvs	15234 <__assert_fail@plt+0x43c8>
   151dc:	cmp	r4, r3
   151e0:	movle	r3, #0
   151e4:	andgt	r3, lr, #1
   151e8:	cmp	r3, #0
   151ec:	bne	15234 <__assert_fail@plt+0x43c8>
   151f0:	smull	r8, r9, r4, r8
   151f4:	cmp	r9, r8, asr #31
   151f8:	mov	r1, r8
   151fc:	bne	15234 <__assert_fail@plt+0x43c8>
   15200:	bl	14fd4 <__assert_fail@plt+0x4168>
   15204:	ldrd	r6, [sp, #8]
   15208:	ldrd	r8, [sp, #16]
   1520c:	ldr	sl, [sp, #24]
   15210:	str	r4, [r5]
   15214:	ldrd	r4, [sp]
   15218:	add	sp, sp, #28
   1521c:	pop	{pc}		; (ldr pc, [sp], #4)
   15220:	mov	r6, #64	; 0x40
   15224:	sdiv	r4, r6, r8
   15228:	mls	r1, r8, r4, r6
   1522c:	sub	r1, r6, r1
   15230:	b	151c0 <__assert_fail@plt+0x4354>
   15234:	bl	153e0 <__assert_fail@plt+0x4574>
   15238:	mvn	r6, #-2147483648	; 0x80000000
   1523c:	b	15224 <__assert_fail@plt+0x43b8>
   15240:	mov	r1, #1
   15244:	str	r4, [sp, #-8]!
   15248:	str	lr, [sp, #4]
   1524c:	bl	15424 <__assert_fail@plt+0x45b8>
   15250:	cmp	r0, #0
   15254:	beq	15264 <__assert_fail@plt+0x43f8>
   15258:	ldr	r4, [sp]
   1525c:	add	sp, sp, #4
   15260:	pop	{pc}		; (ldr pc, [sp], #4)
   15264:	bl	153e0 <__assert_fail@plt+0x4574>
   15268:	mov	r1, #1
   1526c:	str	r4, [sp, #-8]!
   15270:	str	lr, [sp, #4]
   15274:	bl	15424 <__assert_fail@plt+0x45b8>
   15278:	cmp	r0, #0
   1527c:	beq	1528c <__assert_fail@plt+0x4420>
   15280:	ldr	r4, [sp]
   15284:	add	sp, sp, #4
   15288:	pop	{pc}		; (ldr pc, [sp], #4)
   1528c:	bl	153e0 <__assert_fail@plt+0x4574>
   15290:	str	r4, [sp, #-8]!
   15294:	str	lr, [sp, #4]
   15298:	bl	15424 <__assert_fail@plt+0x45b8>
   1529c:	cmp	r0, #0
   152a0:	beq	152b0 <__assert_fail@plt+0x4444>
   152a4:	ldr	r4, [sp]
   152a8:	add	sp, sp, #4
   152ac:	pop	{pc}		; (ldr pc, [sp], #4)
   152b0:	bl	153e0 <__assert_fail@plt+0x4574>
   152b4:	str	r4, [sp, #-8]!
   152b8:	str	lr, [sp, #4]
   152bc:	bl	15424 <__assert_fail@plt+0x45b8>
   152c0:	cmp	r0, #0
   152c4:	beq	152d4 <__assert_fail@plt+0x4468>
   152c8:	ldr	r4, [sp]
   152cc:	add	sp, sp, #4
   152d0:	pop	{pc}		; (ldr pc, [sp], #4)
   152d4:	bl	153e0 <__assert_fail@plt+0x4574>
   152d8:	strd	r4, [sp, #-16]!
   152dc:	mov	r4, r1
   152e0:	str	r6, [sp, #8]
   152e4:	mov	r6, r0
   152e8:	mov	r0, r1
   152ec:	str	lr, [sp, #12]
   152f0:	bl	15498 <__assert_fail@plt+0x462c>
   152f4:	subs	r5, r0, #0
   152f8:	beq	1531c <__assert_fail@plt+0x44b0>
   152fc:	mov	r2, r4
   15300:	mov	r1, r6
   15304:	bl	10c74 <memcpy@plt>
   15308:	mov	r0, r5
   1530c:	ldrd	r4, [sp]
   15310:	ldr	r6, [sp, #8]
   15314:	add	sp, sp, #12
   15318:	pop	{pc}		; (ldr pc, [sp], #4)
   1531c:	bl	153e0 <__assert_fail@plt+0x4574>
   15320:	strd	r4, [sp, #-16]!
   15324:	mov	r4, r1
   15328:	str	r6, [sp, #8]
   1532c:	mov	r6, r0
   15330:	mov	r0, r1
   15334:	str	lr, [sp, #12]
   15338:	bl	15498 <__assert_fail@plt+0x462c>
   1533c:	subs	r5, r0, #0
   15340:	beq	15364 <__assert_fail@plt+0x44f8>
   15344:	mov	r2, r4
   15348:	mov	r1, r6
   1534c:	bl	10c74 <memcpy@plt>
   15350:	mov	r0, r5
   15354:	ldrd	r4, [sp]
   15358:	ldr	r6, [sp, #8]
   1535c:	add	sp, sp, #12
   15360:	pop	{pc}		; (ldr pc, [sp], #4)
   15364:	bl	153e0 <__assert_fail@plt+0x4574>
   15368:	strd	r4, [sp, #-16]!
   1536c:	mov	r4, r1
   15370:	str	r6, [sp, #8]
   15374:	mov	r6, r0
   15378:	add	r0, r1, #1
   1537c:	str	lr, [sp, #12]
   15380:	bl	15498 <__assert_fail@plt+0x462c>
   15384:	subs	r5, r0, #0
   15388:	beq	153b4 <__assert_fail@plt+0x4548>
   1538c:	mov	r3, #0
   15390:	mov	r1, r6
   15394:	mov	r2, r4
   15398:	strb	r3, [r5, r4]
   1539c:	bl	10c74 <memcpy@plt>
   153a0:	mov	r0, r5
   153a4:	ldrd	r4, [sp]
   153a8:	ldr	r6, [sp, #8]
   153ac:	add	sp, sp, #12
   153b0:	pop	{pc}		; (ldr pc, [sp], #4)
   153b4:	bl	153e0 <__assert_fail@plt+0x4574>
   153b8:	str	r4, [sp, #-8]!
   153bc:	mov	r4, r0
   153c0:	str	lr, [sp, #4]
   153c4:	bl	10da0 <strlen@plt>
   153c8:	add	r1, r0, #1
   153cc:	mov	r0, r4
   153d0:	ldr	r4, [sp]
   153d4:	ldr	lr, [sp, #4]
   153d8:	add	sp, sp, #8
   153dc:	b	152d8 <__assert_fail@plt+0x446c>
   153e0:	movw	r3, #28900	; 0x70e4
   153e4:	movt	r3, #2
   153e8:	str	r4, [sp, #-8]!
   153ec:	ldr	r4, [r3]
   153f0:	mov	r2, #5
   153f4:	movw	r1, #24820	; 0x60f4
   153f8:	movt	r1, #1
   153fc:	mov	r0, #0
   15400:	str	lr, [sp, #4]
   15404:	bl	10ca4 <dcgettext@plt>
   15408:	mov	r3, r0
   1540c:	movw	r2, #23656	; 0x5c68
   15410:	movt	r2, #1
   15414:	mov	r1, #0
   15418:	mov	r0, r4
   1541c:	bl	10d1c <error@plt>
   15420:	bl	10e54 <abort@plt>
   15424:	cmp	r1, #0
   15428:	cmpne	r0, #0
   1542c:	beq	15478 <__assert_fail@plt+0x460c>
   15430:	strd	r4, [sp, #-16]!
   15434:	umull	r4, r5, r0, r1
   15438:	str	r6, [sp, #8]
   1543c:	str	lr, [sp, #12]
   15440:	adds	r3, r5, #0
   15444:	movne	r3, #1
   15448:	cmp	r4, #0
   1544c:	blt	15458 <__assert_fail@plt+0x45ec>
   15450:	cmp	r3, #0
   15454:	beq	15484 <__assert_fail@plt+0x4618>
   15458:	bl	10dac <__errno_location@plt>
   1545c:	mov	r3, #12
   15460:	ldrd	r4, [sp]
   15464:	ldr	r6, [sp, #8]
   15468:	add	sp, sp, #12
   1546c:	str	r3, [r0]
   15470:	mov	r0, #0
   15474:	pop	{pc}		; (ldr pc, [sp], #4)
   15478:	mov	r1, #1
   1547c:	mov	r0, r1
   15480:	b	10c20 <calloc@plt>
   15484:	ldrd	r4, [sp]
   15488:	ldr	r6, [sp, #8]
   1548c:	ldr	lr, [sp, #12]
   15490:	add	sp, sp, #16
   15494:	b	10c20 <calloc@plt>
   15498:	cmp	r0, #0
   1549c:	beq	154a8 <__assert_fail@plt+0x463c>
   154a0:	blt	154b0 <__assert_fail@plt+0x4644>
   154a4:	b	10d40 <malloc@plt>
   154a8:	mov	r0, #1
   154ac:	b	10d40 <malloc@plt>
   154b0:	str	r4, [sp, #-8]!
   154b4:	str	lr, [sp, #4]
   154b8:	bl	10dac <__errno_location@plt>
   154bc:	mov	r3, #12
   154c0:	ldr	r4, [sp]
   154c4:	add	sp, sp, #4
   154c8:	str	r3, [r0]
   154cc:	mov	r0, #0
   154d0:	pop	{pc}		; (ldr pc, [sp], #4)
   154d4:	cmp	r0, #0
   154d8:	beq	15500 <__assert_fail@plt+0x4694>
   154dc:	cmp	r1, #0
   154e0:	str	r4, [sp, #-8]!
   154e4:	str	lr, [sp, #4]
   154e8:	beq	15508 <__assert_fail@plt+0x469c>
   154ec:	blt	1551c <__assert_fail@plt+0x46b0>
   154f0:	ldr	r4, [sp]
   154f4:	ldr	lr, [sp, #4]
   154f8:	add	sp, sp, #8
   154fc:	b	10cbc <realloc@plt>
   15500:	mov	r0, r1
   15504:	b	15498 <__assert_fail@plt+0x462c>
   15508:	bl	11e9c <__assert_fail@plt+0x1030>
   1550c:	ldr	r4, [sp]
   15510:	add	sp, sp, #4
   15514:	mov	r0, #0
   15518:	pop	{pc}		; (ldr pc, [sp], #4)
   1551c:	bl	10dac <__errno_location@plt>
   15520:	mov	r3, #12
   15524:	str	r3, [r0]
   15528:	b	1550c <__assert_fail@plt+0x46a0>
   1552c:	strd	r4, [sp, #-16]!
   15530:	mov	r4, r0
   15534:	str	r6, [sp, #8]
   15538:	str	lr, [sp, #12]
   1553c:	bl	10d04 <__fpending@plt>
   15540:	ldr	r5, [r4]
   15544:	mov	r6, r0
   15548:	mov	r0, r4
   1554c:	bl	11d88 <__assert_fail@plt+0xf1c>
   15550:	mov	r4, r0
   15554:	and	r5, r5, #32
   15558:	cmp	r5, #0
   1555c:	bne	15594 <__assert_fail@plt+0x4728>
   15560:	cmp	r0, #0
   15564:	beq	15580 <__assert_fail@plt+0x4714>
   15568:	cmp	r6, #0
   1556c:	bne	155ac <__assert_fail@plt+0x4740>
   15570:	bl	10dac <__errno_location@plt>
   15574:	ldr	r4, [r0]
   15578:	subs	r4, r4, #9
   1557c:	mvnne	r4, #0
   15580:	mov	r0, r4
   15584:	ldrd	r4, [sp]
   15588:	ldr	r6, [sp, #8]
   1558c:	add	sp, sp, #12
   15590:	pop	{pc}		; (ldr pc, [sp], #4)
   15594:	cmp	r0, #0
   15598:	bne	155ac <__assert_fail@plt+0x4740>
   1559c:	bl	10dac <__errno_location@plt>
   155a0:	str	r4, [r0]
   155a4:	mvn	r4, #0
   155a8:	b	15580 <__assert_fail@plt+0x4714>
   155ac:	mvn	r4, #0
   155b0:	b	15580 <__assert_fail@plt+0x4714>
   155b4:	mov	r0, #14
   155b8:	str	r4, [sp, #-8]!
   155bc:	str	lr, [sp, #4]
   155c0:	bl	10e30 <nl_langinfo@plt>
   155c4:	cmp	r0, #0
   155c8:	beq	155ec <__assert_fail@plt+0x4780>
   155cc:	ldrb	r2, [r0]
   155d0:	movw	r3, #24840	; 0x6108
   155d4:	movt	r3, #1
   155d8:	ldr	r4, [sp]
   155dc:	add	sp, sp, #4
   155e0:	cmp	r2, #0
   155e4:	moveq	r0, r3
   155e8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ec:	ldr	r4, [sp]
   155f0:	add	sp, sp, #4
   155f4:	movw	r0, #24840	; 0x6108
   155f8:	movt	r0, #1
   155fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15600:	strd	r4, [sp, #-20]!	; 0xffffffec
   15604:	mov	r5, r2
   15608:	strd	r6, [sp, #8]
   1560c:	subs	r6, r0, #0
   15610:	mov	r7, r1
   15614:	str	lr, [sp, #16]
   15618:	sub	sp, sp, #12
   1561c:	addeq	r6, sp, #4
   15620:	mov	r0, r6
   15624:	bl	10d10 <mbrtowc@plt>
   15628:	cmp	r5, #0
   1562c:	cmnne	r0, #3
   15630:	mov	r4, r0
   15634:	bhi	15650 <__assert_fail@plt+0x47e4>
   15638:	mov	r0, r4
   1563c:	add	sp, sp, #12
   15640:	ldrd	r4, [sp]
   15644:	ldrd	r6, [sp, #8]
   15648:	add	sp, sp, #16
   1564c:	pop	{pc}		; (ldr pc, [sp], #4)
   15650:	mov	r0, #0
   15654:	bl	156a8 <__assert_fail@plt+0x483c>
   15658:	cmp	r0, #0
   1565c:	bne	15638 <__assert_fail@plt+0x47cc>
   15660:	ldrb	r3, [r7]
   15664:	mov	r4, #1
   15668:	str	r3, [r6]
   1566c:	b	15638 <__assert_fail@plt+0x47cc>
   15670:	umull	r2, r3, r1, r2
   15674:	cmp	r3, #0
   15678:	bne	15684 <__assert_fail@plt+0x4818>
   1567c:	mov	r1, r2
   15680:	b	154d4 <__assert_fail@plt+0x4668>
   15684:	str	r4, [sp, #-8]!
   15688:	str	lr, [sp, #4]
   1568c:	bl	10dac <__errno_location@plt>
   15690:	mov	r3, #12
   15694:	ldr	r4, [sp]
   15698:	add	sp, sp, #4
   1569c:	str	r3, [r0]
   156a0:	mov	r0, #0
   156a4:	pop	{pc}		; (ldr pc, [sp], #4)
   156a8:	push	{lr}		; (str lr, [sp, #-4]!)
   156ac:	sub	sp, sp, #268	; 0x10c
   156b0:	movw	r2, #257	; 0x101
   156b4:	add	r1, sp, #4
   156b8:	bl	15700 <__assert_fail@plt+0x4894>
   156bc:	cmp	r0, #0
   156c0:	movne	r0, #0
   156c4:	bne	156f8 <__assert_fail@plt+0x488c>
   156c8:	movw	r1, #24848	; 0x6110
   156cc:	movt	r1, #1
   156d0:	add	r0, sp, #4
   156d4:	bl	10c38 <strcmp@plt>
   156d8:	cmp	r0, #0
   156dc:	beq	156f8 <__assert_fail@plt+0x488c>
   156e0:	add	r0, sp, #4
   156e4:	movw	r1, #24852	; 0x6114
   156e8:	movt	r1, #1
   156ec:	bl	10c38 <strcmp@plt>
   156f0:	adds	r0, r0, #0
   156f4:	movne	r0, #1
   156f8:	add	sp, sp, #268	; 0x10c
   156fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15700:	strd	r4, [sp, #-16]!
   15704:	mov	r5, r1
   15708:	mov	r1, #0
   1570c:	mov	r4, r2
   15710:	str	r6, [sp, #8]
   15714:	str	lr, [sp, #12]
   15718:	bl	10e18 <setlocale@plt>
   1571c:	subs	r6, r0, #0
   15720:	beq	157a0 <__assert_fail@plt+0x4934>
   15724:	bl	10da0 <strlen@plt>
   15728:	cmp	r4, r0
   1572c:	bhi	1574c <__assert_fail@plt+0x48e0>
   15730:	cmp	r4, #0
   15734:	moveq	r0, #34	; 0x22
   15738:	bne	15770 <__assert_fail@plt+0x4904>
   1573c:	ldrd	r4, [sp]
   15740:	ldr	r6, [sp, #8]
   15744:	add	sp, sp, #12
   15748:	pop	{pc}		; (ldr pc, [sp], #4)
   1574c:	add	r2, r0, #1
   15750:	mov	r1, r6
   15754:	mov	r0, r5
   15758:	bl	10c74 <memcpy@plt>
   1575c:	ldrd	r4, [sp]
   15760:	mov	r0, #0
   15764:	ldr	r6, [sp, #8]
   15768:	add	sp, sp, #12
   1576c:	pop	{pc}		; (ldr pc, [sp], #4)
   15770:	sub	r4, r4, #1
   15774:	mov	r1, r6
   15778:	mov	r2, r4
   1577c:	mov	r0, r5
   15780:	bl	10c74 <memcpy@plt>
   15784:	mov	r3, #0
   15788:	mov	r0, #34	; 0x22
   1578c:	strb	r3, [r5, r4]
   15790:	ldrd	r4, [sp]
   15794:	ldr	r6, [sp, #8]
   15798:	add	sp, sp, #12
   1579c:	pop	{pc}		; (ldr pc, [sp], #4)
   157a0:	cmp	r4, #0
   157a4:	mov	r0, #22
   157a8:	strbne	r6, [r5]
   157ac:	ldrd	r4, [sp]
   157b0:	ldr	r6, [sp, #8]
   157b4:	add	sp, sp, #12
   157b8:	pop	{pc}		; (ldr pc, [sp], #4)
   157bc:	mov	r1, #0
   157c0:	b	10e18 <setlocale@plt>
   157c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157c8:	mov	r7, r0
   157cc:	ldr	r6, [pc, #72]	; 1581c <__assert_fail@plt+0x49b0>
   157d0:	ldr	r5, [pc, #72]	; 15820 <__assert_fail@plt+0x49b4>
   157d4:	add	r6, pc, r6
   157d8:	add	r5, pc, r5
   157dc:	sub	r6, r6, r5
   157e0:	mov	r8, r1
   157e4:	mov	r9, r2
   157e8:	bl	10c00 <calloc@plt-0x20>
   157ec:	asrs	r6, r6, #2
   157f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   157f4:	mov	r4, #0
   157f8:	add	r4, r4, #1
   157fc:	ldr	r3, [r5], #4
   15800:	mov	r2, r9
   15804:	mov	r1, r8
   15808:	mov	r0, r7
   1580c:	blx	r3
   15810:	cmp	r6, r4
   15814:	bne	157f8 <__assert_fail@plt+0x498c>
   15818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1581c:	andeq	r1, r1, r8, lsr r7
   15820:	andeq	r1, r1, r0, lsr r7
   15824:	bx	lr
   15828:	ldr	r3, [pc, #12]	; 1583c <__assert_fail@plt+0x49d0>
   1582c:	mov	r1, #0
   15830:	add	r3, pc, r3
   15834:	ldr	r2, [r3]
   15838:	b	10db8 <__cxa_atexit@plt>
   1583c:	andeq	r1, r1, r4, lsr #17

Disassembly of section .fini:

00015840 <.fini>:
   15840:	push	{r3, lr}
   15844:	pop	{r3, pc}
