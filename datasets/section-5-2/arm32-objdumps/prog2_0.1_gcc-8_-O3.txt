
../repos/prog2/0.1:     file format elf32-littlearm


Disassembly of section .init:

00010554 <.init>:
   10554:	push	{r3, lr}
   10558:	bl	106d8 <_start@@Base+0x3c>
   1055c:	pop	{r3, pc}

Disassembly of section .plt:

00010560 <printf@plt-0x14>:
   10560:	push	{lr}		; (str lr, [sp, #-4]!)
   10564:	ldr	lr, [pc, #4]	; 10570 <printf@plt-0x4>
   10568:	add	lr, pc, lr
   1056c:	ldr	pc, [lr, #8]!
   10570:	muleq	r1, r0, sl

00010574 <printf@plt>:
   10574:	add	ip, pc, #0, 12
   10578:	add	ip, ip, #16, 20	; 0x10000
   1057c:	ldr	pc, [ip, #2704]!	; 0xa90

00010580 <__libc_start_main@plt>:
   10580:	add	ip, pc, #0, 12
   10584:	add	ip, ip, #16, 20	; 0x10000
   10588:	ldr	pc, [ip, #2696]!	; 0xa88

0001058c <__gmon_start__@plt>:
   1058c:	add	ip, pc, #0, 12
   10590:	add	ip, ip, #16, 20	; 0x10000
   10594:	ldr	pc, [ip, #2688]!	; 0xa80

00010598 <__isoc99_scanf@plt>:
   10598:	add	ip, pc, #0, 12
   1059c:	add	ip, ip, #16, 20	; 0x10000
   105a0:	ldr	pc, [ip, #2680]!	; 0xa78

000105a4 <abort@plt>:
   105a4:	add	ip, pc, #0, 12
   105a8:	add	ip, ip, #16, 20	; 0x10000
   105ac:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000105b0 <main@@Base>:
   105b0:	movw	r0, #2044	; 0x7fc
   105b4:	movt	r0, #1
   105b8:	str	r4, [sp, #-8]!
   105bc:	str	lr, [sp, #4]
   105c0:	sub	sp, sp, #24
   105c4:	bl	10574 <printf@plt>
   105c8:	add	r1, sp, #20
   105cc:	movw	r0, #2064	; 0x810
   105d0:	movt	r0, #1
   105d4:	bl	10598 <__isoc99_scanf@plt>
   105d8:	movw	r0, #2068	; 0x814
   105dc:	movt	r0, #1
   105e0:	bl	10574 <printf@plt>
   105e4:	add	r1, sp, #8
   105e8:	movw	r0, #2064	; 0x810
   105ec:	movt	r0, #1
   105f0:	bl	10598 <__isoc99_scanf@plt>
   105f4:	add	r1, sp, #12
   105f8:	movw	r0, #2064	; 0x810
   105fc:	movt	r0, #1
   10600:	bl	10598 <__isoc99_scanf@plt>
   10604:	movw	r0, #2088	; 0x828
   10608:	movt	r0, #1
   1060c:	bl	10574 <printf@plt>
   10610:	movw	r0, #2064	; 0x810
   10614:	movt	r0, #1
   10618:	add	r1, sp, #16
   1061c:	bl	10598 <__isoc99_scanf@plt>
   10620:	vldr	s15, [pc, #112]	; 10698 <main@@Base+0xe8>
   10624:	vldr	s14, [sp, #12]
   10628:	vstr	s15, [sp, #8]
   1062c:	vcmpe.f32	s14, s15
   10630:	vmrs	APSR_nzcv, fpscr
   10634:	blt	10684 <main@@Base+0xd4>
   10638:	movw	r4, #2108	; 0x83c
   1063c:	movt	r4, #1
   10640:	vldr	s14, [sp, #20]
   10644:	vcvt.f64.f32	d6, s15
   10648:	mov	r0, r4
   1064c:	vmul.f32	s14, s15, s14
   10650:	vmov	r2, r3, d6
   10654:	vmul.f32	s15, s14, s15
   10658:	vcvt.f64.f32	d7, s15
   1065c:	vstr	d7, [sp]
   10660:	bl	10574 <printf@plt>
   10664:	vldr	s15, [sp, #8]
   10668:	vldr	s14, [sp, #12]
   1066c:	vldr	s13, [sp, #16]
   10670:	vadd.f32	s15, s15, s13
   10674:	vcmpe.f32	s15, s14
   10678:	vstr	s15, [sp, #8]
   1067c:	vmrs	APSR_nzcv, fpscr
   10680:	bls	10640 <main@@Base+0x90>
   10684:	mov	r0, #0
   10688:	add	sp, sp, #24
   1068c:	ldr	r4, [sp]
   10690:	add	sp, sp, #4
   10694:	pop	{pc}		; (ldr pc, [sp], #4)
   10698:	andeq	r0, r0, r0

0001069c <_start@@Base>:
   1069c:	mov	fp, #0
   106a0:	mov	lr, #0
   106a4:	pop	{r1}		; (ldr r1, [sp], #4)
   106a8:	mov	r2, sp
   106ac:	push	{r2}		; (str r2, [sp, #-4]!)
   106b0:	push	{r0}		; (str r0, [sp, #-4]!)
   106b4:	ldr	ip, [pc, #16]	; 106cc <_start@@Base+0x30>
   106b8:	push	{ip}		; (str ip, [sp, #-4]!)
   106bc:	ldr	r0, [pc, #12]	; 106d0 <_start@@Base+0x34>
   106c0:	ldr	r3, [pc, #12]	; 106d4 <_start@@Base+0x38>
   106c4:	bl	10580 <__libc_start_main@plt>
   106c8:	bl	105a4 <abort@plt>
   106cc:	andeq	r0, r1, ip, ror #15
   106d0:			; <UNDEFINED> instruction: 0x000105b0
   106d4:	andeq	r0, r1, ip, lsl #15
   106d8:	ldr	r3, [pc, #20]	; 106f4 <_start@@Base+0x58>
   106dc:	ldr	r2, [pc, #20]	; 106f8 <_start@@Base+0x5c>
   106e0:	add	r3, pc, r3
   106e4:	ldr	r2, [r3, r2]
   106e8:	cmp	r2, #0
   106ec:	bxeq	lr
   106f0:	b	1058c <__gmon_start__@plt>
   106f4:	andeq	r0, r1, r8, lsl r9
   106f8:	andeq	r0, r0, r0, lsr #32
   106fc:	ldr	r0, [pc, #24]	; 1071c <_start@@Base+0x80>
   10700:	ldr	r3, [pc, #24]	; 10720 <_start@@Base+0x84>
   10704:	cmp	r3, r0
   10708:	bxeq	lr
   1070c:	ldr	r3, [pc, #16]	; 10724 <_start@@Base+0x88>
   10710:	cmp	r3, #0
   10714:	bxeq	lr
   10718:	bx	r3
   1071c:	andeq	r1, r2, ip, lsr #32
   10720:	andeq	r1, r2, ip, lsr #32
   10724:	andeq	r0, r0, r0
   10728:	ldr	r0, [pc, #36]	; 10754 <_start@@Base+0xb8>
   1072c:	ldr	r1, [pc, #36]	; 10758 <_start@@Base+0xbc>
   10730:	sub	r1, r1, r0
   10734:	asr	r1, r1, #2
   10738:	add	r1, r1, r1, lsr #31
   1073c:	asrs	r1, r1, #1
   10740:	bxeq	lr
   10744:	ldr	r3, [pc, #16]	; 1075c <_start@@Base+0xc0>
   10748:	cmp	r3, #0
   1074c:	bxeq	lr
   10750:	bx	r3
   10754:	andeq	r1, r2, ip, lsr #32
   10758:	andeq	r1, r2, ip, lsr #32
   1075c:	andeq	r0, r0, r0
   10760:	push	{r4, lr}
   10764:	ldr	r4, [pc, #24]	; 10784 <_start@@Base+0xe8>
   10768:	ldrb	r3, [r4]
   1076c:	cmp	r3, #0
   10770:	popne	{r4, pc}
   10774:	bl	106fc <_start@@Base+0x60>
   10778:	mov	r3, #1
   1077c:	strb	r3, [r4]
   10780:	pop	{r4, pc}
   10784:	andeq	r1, r2, ip, lsr #32
   10788:	b	10728 <_start@@Base+0x8c>

0001078c <__libc_csu_init@@Base>:
   1078c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10790:	mov	r7, r0
   10794:	ldr	r6, [pc, #72]	; 107e4 <__libc_csu_init@@Base+0x58>
   10798:	ldr	r5, [pc, #72]	; 107e8 <__libc_csu_init@@Base+0x5c>
   1079c:	add	r6, pc, r6
   107a0:	add	r5, pc, r5
   107a4:	sub	r6, r6, r5
   107a8:	mov	r8, r1
   107ac:	mov	r9, r2
   107b0:	bl	10554 <printf@plt-0x20>
   107b4:	asrs	r6, r6, #2
   107b8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107bc:	mov	r4, #0
   107c0:	add	r4, r4, #1
   107c4:	ldr	r3, [r5], #4
   107c8:	mov	r2, r9
   107cc:	mov	r1, r8
   107d0:	mov	r0, r7
   107d4:	blx	r3
   107d8:	cmp	r6, r4
   107dc:	bne	107c0 <__libc_csu_init@@Base+0x34>
   107e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107e4:	andeq	r0, r1, r0, ror r7
   107e8:	andeq	r0, r1, r8, ror #14

000107ec <__libc_csu_fini@@Base>:
   107ec:	bx	lr

Disassembly of section .fini:

000107f0 <.fini>:
   107f0:	push	{r3, lr}
   107f4:	pop	{r3, pc}
