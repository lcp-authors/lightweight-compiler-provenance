
../repos/stcorp-coda-3a25f25/CMakeFiles/CheckTypeSize/SIZEOF_DOUBLE.bin:     file format elf32-littlearm


Disassembly of section .init:

000104d8 <.init>:
   104d8:	push	{r3, lr}
   104dc:	bl	10558 <_start@@Base+0x3c>
   104e0:	pop	{r3, pc}

Disassembly of section .plt:

000104e4 <__libc_start_main@plt-0x14>:
   104e4:	push	{lr}		; (str lr, [sp, #-4]!)
   104e8:	ldr	lr, [pc, #4]	; 104f4 <__libc_start_main@plt-0x4>
   104ec:	add	lr, pc, lr
   104f0:	ldr	pc, [lr, #8]!
   104f4:	andeq	r0, r1, ip, lsl #22

000104f8 <__libc_start_main@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2828]!	; 0xb0c

00010504 <__gmon_start__@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2820]!	; 0xb04

00010510 <abort@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2812]!	; 0xafc

Disassembly of section .text:

0001051c <_start@@Base>:
   1051c:	mov	fp, #0
   10520:	mov	lr, #0
   10524:	pop	{r1}		; (ldr r1, [sp], #4)
   10528:	mov	r2, sp
   1052c:	push	{r2}		; (str r2, [sp, #-4]!)
   10530:	push	{r0}		; (str r0, [sp, #-4]!)
   10534:	ldr	ip, [pc, #16]	; 1054c <_start@@Base+0x30>
   10538:	push	{ip}		; (str ip, [sp, #-4]!)
   1053c:	ldr	r0, [pc, #12]	; 10550 <_start@@Base+0x34>
   10540:	ldr	r3, [pc, #12]	; 10554 <_start@@Base+0x38>
   10544:	bl	104f8 <__libc_start_main@plt>
   10548:	bl	10510 <abort@plt>
   1054c:			; <UNDEFINED> instruction: 0x000106b4
   10550:	andeq	r0, r1, r4, asr #12
   10554:	andeq	r0, r1, r4, asr r6
   10558:	ldr	r3, [pc, #20]	; 10574 <_start@@Base+0x58>
   1055c:	ldr	r2, [pc, #20]	; 10578 <_start@@Base+0x5c>
   10560:	add	r3, pc, r3
   10564:	ldr	r2, [r3, r2]
   10568:	cmp	r2, #0
   1056c:	bxeq	lr
   10570:	b	10504 <__gmon_start__@plt>
   10574:	muleq	r1, r8, sl
   10578:	andeq	r0, r0, r8, lsl r0
   1057c:	ldr	r3, [pc, #28]	; 105a0 <_start@@Base+0x84>
   10580:	ldr	r0, [pc, #28]	; 105a4 <_start@@Base+0x88>
   10584:	sub	r3, r3, r0
   10588:	cmp	r3, #6
   1058c:	bxls	lr
   10590:	ldr	r3, [pc, #16]	; 105a8 <_start@@Base+0x8c>
   10594:	cmp	r3, #0
   10598:	bxeq	lr
   1059c:	bx	r3
   105a0:	andeq	r1, r2, r7, lsr #32
   105a4:	andeq	r1, r2, r4, lsr #32
   105a8:	andeq	r0, r0, r0
   105ac:	ldr	r1, [pc, #36]	; 105d8 <_start@@Base+0xbc>
   105b0:	ldr	r0, [pc, #36]	; 105dc <_start@@Base+0xc0>
   105b4:	sub	r1, r1, r0
   105b8:	asr	r1, r1, #2
   105bc:	add	r1, r1, r1, lsr #31
   105c0:	asrs	r1, r1, #1
   105c4:	bxeq	lr
   105c8:	ldr	r3, [pc, #16]	; 105e0 <_start@@Base+0xc4>
   105cc:	cmp	r3, #0
   105d0:	bxeq	lr
   105d4:	bx	r3
   105d8:	andeq	r1, r2, r4, lsr #32
   105dc:	andeq	r1, r2, r4, lsr #32
   105e0:	andeq	r0, r0, r0
   105e4:	push	{r4, lr}
   105e8:	ldr	r4, [pc, #24]	; 10608 <_start@@Base+0xec>
   105ec:	ldrb	r3, [r4]
   105f0:	cmp	r3, #0
   105f4:	popne	{r4, pc}
   105f8:	bl	1057c <_start@@Base+0x60>
   105fc:	mov	r3, #1
   10600:	strb	r3, [r4]
   10604:	pop	{r4, pc}
   10608:	andeq	r1, r2, r4, lsr #32
   1060c:	ldr	r0, [pc, #40]	; 1063c <_start@@Base+0x120>
   10610:	ldr	r3, [r0]
   10614:	cmp	r3, #0
   10618:	bne	10620 <_start@@Base+0x104>
   1061c:	b	105ac <_start@@Base+0x90>
   10620:	ldr	r3, [pc, #24]	; 10640 <_start@@Base+0x124>
   10624:	cmp	r3, #0
   10628:	beq	1061c <_start@@Base+0x100>
   1062c:	push	{r4, lr}
   10630:	blx	r3
   10634:	pop	{r4, lr}
   10638:	b	105ac <_start@@Base+0x90>
   1063c:	andeq	r0, r2, r4, lsl pc
   10640:	andeq	r0, r0, r0

00010644 <main@@Base>:
   10644:	ldr	r3, [pc, #4]	; 10650 <main@@Base+0xc>
   10648:	ldrb	r0, [r3, r0]
   1064c:	bx	lr
   10650:	andeq	r0, r1, r4, asr #13

00010654 <__libc_csu_init@@Base>:
   10654:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10658:	mov	r7, r0
   1065c:	ldr	r6, [pc, #72]	; 106ac <__libc_csu_init@@Base+0x58>
   10660:	ldr	r5, [pc, #72]	; 106b0 <__libc_csu_init@@Base+0x5c>
   10664:	add	r6, pc, r6
   10668:	add	r5, pc, r5
   1066c:	sub	r6, r6, r5
   10670:	mov	r8, r1
   10674:	mov	r9, r2
   10678:	bl	104d8 <__libc_start_main@plt-0x20>
   1067c:	asrs	r6, r6, #2
   10680:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10684:	mov	r4, #0
   10688:	add	r4, r4, #1
   1068c:	ldr	r3, [r5], #4
   10690:	mov	r2, r9
   10694:	mov	r1, r8
   10698:	mov	r0, r7
   1069c:	blx	r3
   106a0:	cmp	r6, r4
   106a4:	bne	10688 <__libc_csu_init@@Base+0x34>
   106a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   106ac:	andeq	r0, r1, r4, lsr #17
   106b0:	muleq	r1, ip, r8

000106b4 <__libc_csu_fini@@Base>:
   106b4:	bx	lr

Disassembly of section .fini:

000106b8 <.fini>:
   106b8:	push	{r3, lr}
   106bc:	pop	{r3, pc}
