
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011380 <.init>:
   11380:	push	{r3, lr}
   11384:	bl	11790 <__assert_fail@plt+0x48>
   11388:	pop	{r3, pc}

Disassembly of section .plt:

0001138c <fdopen@plt-0x14>:
   1138c:	push	{lr}		; (str lr, [sp, #-4]!)
   11390:	ldr	lr, [pc, #4]	; 1139c <fdopen@plt-0x4>
   11394:	add	lr, pc, lr
   11398:	ldr	pc, [lr, #8]!
   1139c:	andeq	r9, r1, r4, ror #24

000113a0 <fdopen@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #102400	; 0x19000
   113a8:	ldr	pc, [ip, #3172]!	; 0xc64

000113ac <calloc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #102400	; 0x19000
   113b4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113b8 <fputs_unlocked@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #102400	; 0x19000
   113c0:	ldr	pc, [ip, #3156]!	; 0xc54

000113c4 <raise@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #102400	; 0x19000
   113cc:	ldr	pc, [ip, #3148]!	; 0xc4c

000113d0 <strcmp@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #102400	; 0x19000
   113d8:	ldr	pc, [ip, #3140]!	; 0xc44

000113dc <strtol@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #102400	; 0x19000
   113e4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113e8 <read@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #102400	; 0x19000
   113f0:	ldr	pc, [ip, #3124]!	; 0xc34

000113f4 <fflush@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #102400	; 0x19000
   113fc:	ldr	pc, [ip, #3116]!	; 0xc2c

00011400 <sigprocmask@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #102400	; 0x19000
   11408:	ldr	pc, [ip, #3108]!	; 0xc24

0001140c <memmove@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #102400	; 0x19000
   11414:	ldr	pc, [ip, #3100]!	; 0xc1c

00011418 <free@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #102400	; 0x19000
   11420:	ldr	pc, [ip, #3092]!	; 0xc14

00011424 <_exit@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #102400	; 0x19000
   1142c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011430 <memcpy@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #102400	; 0x19000
   11438:	ldr	pc, [ip, #3076]!	; 0xc04

0001143c <mbsinit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #102400	; 0x19000
   11444:	ldr	pc, [ip, #3068]!	; 0xbfc

00011448 <ftruncate64@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #102400	; 0x19000
   11450:	ldr	pc, [ip, #3060]!	; 0xbf4

00011454 <fwrite_unlocked@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #102400	; 0x19000
   1145c:	ldr	pc, [ip, #3052]!	; 0xbec

00011460 <dcgettext@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #102400	; 0x19000
   11468:	ldr	pc, [ip, #3044]!	; 0xbe4

0001146c <dup2@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #102400	; 0x19000
   11474:	ldr	pc, [ip, #3036]!	; 0xbdc

00011478 <realloc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #102400	; 0x19000
   11480:	ldr	pc, [ip, #3028]!	; 0xbd4

00011484 <textdomain@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #102400	; 0x19000
   1148c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011490 <rawmemchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #102400	; 0x19000
   11498:	ldr	pc, [ip, #3012]!	; 0xbc4

0001149c <iswprint@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #102400	; 0x19000
   114a4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114a8 <__fxstat64@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #102400	; 0x19000
   114b0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114b4 <sigaction@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #102400	; 0x19000
   114bc:	ldr	pc, [ip, #2988]!	; 0xbac

000114c0 <fwrite@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #102400	; 0x19000
   114c8:	ldr	pc, [ip, #2980]!	; 0xba4

000114cc <lseek64@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #102400	; 0x19000
   114d4:	ldr	pc, [ip, #2972]!	; 0xb9c

000114d8 <waitpid@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #102400	; 0x19000
   114e0:	ldr	pc, [ip, #2964]!	; 0xb94

000114e4 <__ctype_get_mb_cur_max@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #102400	; 0x19000
   114ec:	ldr	pc, [ip, #2956]!	; 0xb8c

000114f0 <strcpy@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #102400	; 0x19000
   114f8:	ldr	pc, [ip, #2948]!	; 0xb84

000114fc <__fpending@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #102400	; 0x19000
   11504:	ldr	pc, [ip, #2940]!	; 0xb7c

00011508 <ferror_unlocked@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #102400	; 0x19000
   11510:	ldr	pc, [ip, #2932]!	; 0xb74

00011514 <mbrtowc@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #102400	; 0x19000
   1151c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011520 <error@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #102400	; 0x19000
   11528:	ldr	pc, [ip, #2916]!	; 0xb64

0001152c <open64@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #102400	; 0x19000
   11534:	ldr	pc, [ip, #2908]!	; 0xb5c

00011538 <getenv@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #102400	; 0x19000
   11540:	ldr	pc, [ip, #2900]!	; 0xb54

00011544 <malloc@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #102400	; 0x19000
   1154c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011550 <sigaddset@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #102400	; 0x19000
   11558:	ldr	pc, [ip, #2884]!	; 0xb44

0001155c <__libc_start_main@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #102400	; 0x19000
   11564:	ldr	pc, [ip, #2876]!	; 0xb3c

00011568 <__freading@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #102400	; 0x19000
   11570:	ldr	pc, [ip, #2868]!	; 0xb34

00011574 <__gmon_start__@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #102400	; 0x19000
   1157c:	ldr	pc, [ip, #2860]!	; 0xb2c

00011580 <getopt_long@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #102400	; 0x19000
   11588:	ldr	pc, [ip, #2852]!	; 0xb24

0001158c <__ctype_b_loc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #102400	; 0x19000
   11594:	ldr	pc, [ip, #2844]!	; 0xb1c

00011598 <exit@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #102400	; 0x19000
   115a0:	ldr	pc, [ip, #2836]!	; 0xb14

000115a4 <bcmp@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #102400	; 0x19000
   115ac:	ldr	pc, [ip, #2828]!	; 0xb0c

000115b0 <strlen@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #102400	; 0x19000
   115b8:	ldr	pc, [ip, #2820]!	; 0xb04

000115bc <__libc_current_sigrtmax@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #102400	; 0x19000
   115c4:	ldr	pc, [ip, #2812]!	; 0xafc

000115c8 <strchr@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #102400	; 0x19000
   115d0:	ldr	pc, [ip, #2804]!	; 0xaf4

000115d4 <setenv@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #102400	; 0x19000
   115dc:	ldr	pc, [ip, #2796]!	; 0xaec

000115e0 <memrchr@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #102400	; 0x19000
   115e8:	ldr	pc, [ip, #2788]!	; 0xae4

000115ec <getpagesize@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #102400	; 0x19000
   115f4:	ldr	pc, [ip, #2780]!	; 0xadc

000115f8 <__errno_location@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #102400	; 0x19000
   11600:	ldr	pc, [ip, #2772]!	; 0xad4

00011604 <__sprintf_chk@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #102400	; 0x19000
   1160c:	ldr	pc, [ip, #2764]!	; 0xacc

00011610 <__cxa_atexit@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #102400	; 0x19000
   11618:	ldr	pc, [ip, #2756]!	; 0xac4

0001161c <memset@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #102400	; 0x19000
   11624:	ldr	pc, [ip, #2748]!	; 0xabc

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #102400	; 0x19000
   11630:	ldr	pc, [ip, #2740]!	; 0xab4

00011634 <write@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #102400	; 0x19000
   1163c:	ldr	pc, [ip, #2732]!	; 0xaac

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #102400	; 0x19000
   11648:	ldr	pc, [ip, #2724]!	; 0xaa4

0001164c <strtoumax@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #102400	; 0x19000
   11654:	ldr	pc, [ip, #2716]!	; 0xa9c

00011658 <__fprintf_chk@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #102400	; 0x19000
   11660:	ldr	pc, [ip, #2708]!	; 0xa94

00011664 <memchr@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #102400	; 0x19000
   1166c:	ldr	pc, [ip, #2700]!	; 0xa8c

00011670 <fclose@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #102400	; 0x19000
   11678:	ldr	pc, [ip, #2692]!	; 0xa84

0001167c <pipe@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #102400	; 0x19000
   11684:	ldr	pc, [ip, #2684]!	; 0xa7c

00011688 <fseeko64@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #102400	; 0x19000
   11690:	ldr	pc, [ip, #2676]!	; 0xa74

00011694 <fcntl64@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #102400	; 0x19000
   1169c:	ldr	pc, [ip, #2668]!	; 0xa6c

000116a0 <setlocale@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #102400	; 0x19000
   116a8:	ldr	pc, [ip, #2660]!	; 0xa64

000116ac <sigemptyset@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #102400	; 0x19000
   116b4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116b8 <fork@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #102400	; 0x19000
   116c0:	ldr	pc, [ip, #2644]!	; 0xa54

000116c4 <execl@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #102400	; 0x19000
   116cc:	ldr	pc, [ip, #2636]!	; 0xa4c

000116d0 <strrchr@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #102400	; 0x19000
   116d8:	ldr	pc, [ip, #2628]!	; 0xa44

000116dc <nl_langinfo@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #102400	; 0x19000
   116e4:	ldr	pc, [ip, #2620]!	; 0xa3c

000116e8 <clearerr_unlocked@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #102400	; 0x19000
   116f0:	ldr	pc, [ip, #2612]!	; 0xa34

000116f4 <bindtextdomain@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #102400	; 0x19000
   116fc:	ldr	pc, [ip, #2604]!	; 0xa2c

00011700 <aligned_alloc@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #102400	; 0x19000
   11708:	ldr	pc, [ip, #2596]!	; 0xa24

0001170c <__libc_current_sigrtmin@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #102400	; 0x19000
   11714:	ldr	pc, [ip, #2588]!	; 0xa1c

00011718 <strncmp@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #102400	; 0x19000
   11720:	ldr	pc, [ip, #2580]!	; 0xa14

00011724 <abort@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #102400	; 0x19000
   1172c:	ldr	pc, [ip, #2572]!	; 0xa0c

00011730 <close@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #102400	; 0x19000
   11738:	ldr	pc, [ip, #2564]!	; 0xa04

0001173c <strspn@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #102400	; 0x19000
   11744:	ldr	pc, [ip, #2556]!	; 0x9fc

00011748 <__assert_fail@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #102400	; 0x19000
   11750:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00011754 <.text>:
   11754:	mov	fp, #0
   11758:	mov	lr, #0
   1175c:	pop	{r1}		; (ldr r1, [sp], #4)
   11760:	mov	r2, sp
   11764:	push	{r2}		; (str r2, [sp, #-4]!)
   11768:	push	{r0}		; (str r0, [sp, #-4]!)
   1176c:	ldr	ip, [pc, #16]	; 11784 <__assert_fail@plt+0x3c>
   11770:	push	{ip}		; (str ip, [sp, #-4]!)
   11774:	ldr	r0, [pc, #12]	; 11788 <__assert_fail@plt+0x40>
   11778:	ldr	r3, [pc, #12]	; 1178c <__assert_fail@plt+0x44>
   1177c:	bl	1155c <__libc_start_main@plt>
   11780:	bl	11724 <abort@plt>
   11784:	andeq	r9, r1, ip, lsl #2
   11788:			; <UNDEFINED> instruction: 0x00011bb8
   1178c:	andeq	r9, r1, ip, lsr #1
   11790:	ldr	r3, [pc, #20]	; 117ac <__assert_fail@plt+0x64>
   11794:	ldr	r2, [pc, #20]	; 117b0 <__assert_fail@plt+0x68>
   11798:	add	r3, pc, r3
   1179c:	ldr	r2, [r3, r2]
   117a0:	cmp	r2, #0
   117a4:	bxeq	lr
   117a8:	b	11574 <__gmon_start__@plt>
   117ac:	andeq	r9, r1, r0, ror #16
   117b0:	andeq	r0, r0, r8, asr #2
   117b4:	ldr	r0, [pc, #24]	; 117d4 <__assert_fail@plt+0x8c>
   117b8:	ldr	r3, [pc, #24]	; 117d8 <__assert_fail@plt+0x90>
   117bc:	cmp	r3, r0
   117c0:	bxeq	lr
   117c4:	ldr	r3, [pc, #16]	; 117dc <__assert_fail@plt+0x94>
   117c8:	cmp	r3, #0
   117cc:	bxeq	lr
   117d0:	bx	r3
   117d4:	andeq	fp, r2, r4, asr r3
   117d8:	andeq	fp, r2, r4, asr r3
   117dc:	andeq	r0, r0, r0
   117e0:	ldr	r0, [pc, #36]	; 1180c <__assert_fail@plt+0xc4>
   117e4:	ldr	r1, [pc, #36]	; 11810 <__assert_fail@plt+0xc8>
   117e8:	sub	r1, r1, r0
   117ec:	asr	r1, r1, #2
   117f0:	add	r1, r1, r1, lsr #31
   117f4:	asrs	r1, r1, #1
   117f8:	bxeq	lr
   117fc:	ldr	r3, [pc, #16]	; 11814 <__assert_fail@plt+0xcc>
   11800:	cmp	r3, #0
   11804:	bxeq	lr
   11808:	bx	r3
   1180c:	andeq	fp, r2, r4, asr r3
   11810:	andeq	fp, r2, r4, asr r3
   11814:	andeq	r0, r0, r0
   11818:	push	{r4, lr}
   1181c:	ldr	r4, [pc, #24]	; 1183c <__assert_fail@plt+0xf4>
   11820:	ldrb	r3, [r4]
   11824:	cmp	r3, #0
   11828:	popne	{r4, pc}
   1182c:	bl	117b4 <__assert_fail@plt+0x6c>
   11830:	mov	r3, #1
   11834:	strb	r3, [r4]
   11838:	pop	{r4, pc}
   1183c:	andeq	fp, r2, r4, ror r3
   11840:	b	117e0 <__assert_fail@plt+0x98>
   11844:	push	{fp, lr}
   11848:	mov	fp, sp
   1184c:	mov	r4, r0
   11850:	cmp	r0, #0
   11854:	bne	1195c <__assert_fail@plt+0x214>
   11858:	movw	r1, #37227	; 0x916b
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	bl	11460 <dcgettext@plt>
   1186c:	mov	r1, r0
   11870:	movw	r0, #46396	; 0xb53c
   11874:	movt	r0, #2
   11878:	ldr	r2, [r0]
   1187c:	mov	r0, #1
   11880:	bl	11628 <__printf_chk@plt>
   11884:	movw	r1, #37266	; 0x9192
   11888:	movt	r1, #1
   1188c:	mov	r0, #0
   11890:	mov	r2, #5
   11894:	bl	11460 <dcgettext@plt>
   11898:	movw	r6, #45932	; 0xb36c
   1189c:	movt	r6, #2
   118a0:	ldr	r1, [r6]
   118a4:	bl	113b8 <fputs_unlocked@plt>
   118a8:	bl	119a0 <__assert_fail@plt+0x258>
   118ac:	bl	119d0 <__assert_fail@plt+0x288>
   118b0:	ldr	r5, [r6]
   118b4:	movw	r1, #37372	; 0x91fc
   118b8:	movt	r1, #1
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	bl	11460 <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	mov	r1, #1
   118d4:	mov	r3, #2
   118d8:	bl	11658 <__fprintf_chk@plt>
   118dc:	movw	r1, #38462	; 0x963e
   118e0:	movt	r1, #1
   118e4:	mov	r0, #0
   118e8:	mov	r2, #5
   118ec:	bl	11460 <dcgettext@plt>
   118f0:	ldr	r1, [r6]
   118f4:	bl	113b8 <fputs_unlocked@plt>
   118f8:	movw	r1, #38575	; 0x96af
   118fc:	movt	r1, #1
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	bl	11460 <dcgettext@plt>
   1190c:	ldr	r1, [r6]
   11910:	bl	113b8 <fputs_unlocked@plt>
   11914:	movw	r1, #38620	; 0x96dc
   11918:	movt	r1, #1
   1191c:	mov	r0, #0
   11920:	mov	r2, #5
   11924:	bl	11460 <dcgettext@plt>
   11928:	ldr	r1, [r6]
   1192c:	bl	113b8 <fputs_unlocked@plt>
   11930:	bl	11a00 <__assert_fail@plt+0x2b8>
   11934:	movw	r1, #38674	; 0x9712
   11938:	movt	r1, #1
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	bl	11460 <dcgettext@plt>
   11948:	ldr	r1, [r6]
   1194c:	bl	113b8 <fputs_unlocked@plt>
   11950:	bl	11a30 <__assert_fail@plt+0x2e8>
   11954:	mov	r0, r4
   11958:	bl	11598 <exit@plt>
   1195c:	movw	r0, #45928	; 0xb368
   11960:	movt	r0, #2
   11964:	ldr	r5, [r0]
   11968:	movw	r1, #37188	; 0x9144
   1196c:	movt	r1, #1
   11970:	mov	r0, #0
   11974:	mov	r2, #5
   11978:	bl	11460 <dcgettext@plt>
   1197c:	mov	r2, r0
   11980:	movw	r0, #46396	; 0xb53c
   11984:	movt	r0, #2
   11988:	ldr	r3, [r0]
   1198c:	mov	r0, r5
   11990:	mov	r1, #1
   11994:	bl	11658 <__fprintf_chk@plt>
   11998:	mov	r0, r4
   1199c:	bl	11598 <exit@plt>
   119a0:	push	{fp, lr}
   119a4:	mov	fp, sp
   119a8:	movw	r1, #39783	; 0x9b67
   119ac:	movt	r1, #1
   119b0:	mov	r0, #0
   119b4:	mov	r2, #5
   119b8:	bl	11460 <dcgettext@plt>
   119bc:	movw	r1, #45932	; 0xb36c
   119c0:	movt	r1, #2
   119c4:	ldr	r1, [r1]
   119c8:	pop	{fp, lr}
   119cc:	b	113b8 <fputs_unlocked@plt>
   119d0:	push	{fp, lr}
   119d4:	mov	fp, sp
   119d8:	movw	r1, #39839	; 0x9b9f
   119dc:	movt	r1, #1
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	bl	11460 <dcgettext@plt>
   119ec:	movw	r1, #45932	; 0xb36c
   119f0:	movt	r1, #2
   119f4:	ldr	r1, [r1]
   119f8:	pop	{fp, lr}
   119fc:	b	113b8 <fputs_unlocked@plt>
   11a00:	push	{fp, lr}
   11a04:	mov	fp, sp
   11a08:	movw	r1, #39914	; 0x9bea
   11a0c:	movt	r1, #1
   11a10:	mov	r0, #0
   11a14:	mov	r2, #5
   11a18:	bl	11460 <dcgettext@plt>
   11a1c:	movw	r1, #45932	; 0xb36c
   11a20:	movt	r1, #2
   11a24:	ldr	r1, [r1]
   11a28:	pop	{fp, lr}
   11a2c:	b	113b8 <fputs_unlocked@plt>
   11a30:	push	{r4, r5, r6, sl, fp, lr}
   11a34:	add	fp, sp, #16
   11a38:	sub	sp, sp, #56	; 0x38
   11a3c:	movw	r0, #41744	; 0xa310
   11a40:	movt	r0, #1
   11a44:	add	r1, r0, #32
   11a48:	mov	r2, #48	; 0x30
   11a4c:	vld1.64	{d16-d17}, [r1]
   11a50:	mov	r6, sp
   11a54:	add	r1, r6, #32
   11a58:	add	r3, r0, #16
   11a5c:	vld1.64	{d18-d19}, [r0], r2
   11a60:	vld1.64	{d20-d21}, [r3]
   11a64:	vldr	d22, [r0]
   11a68:	vst1.64	{d16-d17}, [r1]
   11a6c:	add	r0, r6, #16
   11a70:	vst1.64	{d20-d21}, [r0]
   11a74:	mov	r0, r6
   11a78:	vst1.64	{d18-d19}, [r0], r2
   11a7c:	vstr	d22, [r0]
   11a80:	ldr	r1, [sp]
   11a84:	cmp	r1, #0
   11a88:	movw	r4, #39014	; 0x9866
   11a8c:	movt	r4, #1
   11a90:	beq	11ab8 <__assert_fail@plt+0x370>
   11a94:	mov	r6, sp
   11a98:	movw	r5, #39014	; 0x9866
   11a9c:	movt	r5, #1
   11aa0:	mov	r0, r5
   11aa4:	bl	113d0 <strcmp@plt>
   11aa8:	cmp	r0, #0
   11aac:	ldrne	r1, [r6, #8]!
   11ab0:	cmpne	r1, #0
   11ab4:	bne	11aa0 <__assert_fail@plt+0x358>
   11ab8:	ldr	r5, [r6, #4]
   11abc:	movw	r1, #40221	; 0x9d1d
   11ac0:	movt	r1, #1
   11ac4:	mov	r0, #0
   11ac8:	mov	r2, #5
   11acc:	bl	11460 <dcgettext@plt>
   11ad0:	mov	r1, r0
   11ad4:	movw	r2, #39531	; 0x9a6b
   11ad8:	movt	r2, #1
   11adc:	movw	r3, #40244	; 0x9d34
   11ae0:	movt	r3, #1
   11ae4:	mov	r0, #1
   11ae8:	bl	11628 <__printf_chk@plt>
   11aec:	cmp	r5, #0
   11af0:	moveq	r5, r4
   11af4:	mov	r0, #5
   11af8:	mov	r1, #0
   11afc:	bl	116a0 <setlocale@plt>
   11b00:	cmp	r0, #0
   11b04:	beq	11b44 <__assert_fail@plt+0x3fc>
   11b08:	movw	r1, #40284	; 0x9d5c
   11b0c:	movt	r1, #1
   11b10:	mov	r2, #3
   11b14:	bl	11718 <strncmp@plt>
   11b18:	cmp	r0, #0
   11b1c:	beq	11b44 <__assert_fail@plt+0x3fc>
   11b20:	movw	r1, #40288	; 0x9d60
   11b24:	movt	r1, #1
   11b28:	mov	r0, #0
   11b2c:	mov	r2, #5
   11b30:	bl	11460 <dcgettext@plt>
   11b34:	movw	r1, #45932	; 0xb36c
   11b38:	movt	r1, #2
   11b3c:	ldr	r1, [r1]
   11b40:	bl	113b8 <fputs_unlocked@plt>
   11b44:	movw	r1, #40359	; 0x9da7
   11b48:	movt	r1, #1
   11b4c:	mov	r0, #0
   11b50:	mov	r2, #5
   11b54:	bl	11460 <dcgettext@plt>
   11b58:	mov	r1, r0
   11b5c:	movw	r2, #40244	; 0x9d34
   11b60:	movt	r2, #1
   11b64:	mov	r0, #1
   11b68:	mov	r3, r4
   11b6c:	bl	11628 <__printf_chk@plt>
   11b70:	movw	r0, #40154	; 0x9cda
   11b74:	movt	r0, #1
   11b78:	movw	r6, #38461	; 0x963d
   11b7c:	movt	r6, #1
   11b80:	cmp	r5, r4
   11b84:	moveq	r6, r0
   11b88:	movw	r1, #40386	; 0x9dc2
   11b8c:	movt	r1, #1
   11b90:	mov	r0, #0
   11b94:	mov	r2, #5
   11b98:	bl	11460 <dcgettext@plt>
   11b9c:	mov	r1, r0
   11ba0:	mov	r0, #1
   11ba4:	mov	r2, r5
   11ba8:	mov	r3, r6
   11bac:	sub	sp, fp, #16
   11bb0:	pop	{r4, r5, r6, sl, fp, lr}
   11bb4:	b	11628 <__printf_chk@plt>
   11bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bbc:	add	fp, sp, #28
   11bc0:	sub	sp, sp, #268	; 0x10c
   11bc4:	mov	r6, r1
   11bc8:	str	r0, [sp, #104]	; 0x68
   11bcc:	bl	115ec <getpagesize@plt>
   11bd0:	str	r0, [sp, #88]	; 0x58
   11bd4:	mov	r0, #0
   11bd8:	str	r0, [fp, #-36]	; 0xffffffdc
   11bdc:	str	r0, [fp, #-40]	; 0xffffffd8
   11be0:	str	r0, [fp, #-44]	; 0xffffffd4
   11be4:	str	r0, [fp, #-48]	; 0xffffffd0
   11be8:	ldr	r0, [r6]
   11bec:	bl	157a0 <__assert_fail@plt+0x4058>
   11bf0:	movw	r1, #38461	; 0x963d
   11bf4:	movt	r1, #1
   11bf8:	mov	r0, #6
   11bfc:	bl	116a0 <setlocale@plt>
   11c00:	movw	r4, #39535	; 0x9a6f
   11c04:	movt	r4, #1
   11c08:	movw	r1, #39020	; 0x986c
   11c0c:	movt	r1, #1
   11c10:	mov	r0, r4
   11c14:	bl	116f4 <bindtextdomain@plt>
   11c18:	mov	r0, r4
   11c1c:	bl	11484 <textdomain@plt>
   11c20:	movw	r0, #21352	; 0x5368
   11c24:	movt	r0, #1
   11c28:	bl	19110 <__assert_fail@plt+0x79c8>
   11c2c:	movw	r0, #41881	; 0xa399
   11c30:	movt	r0, #1
   11c34:	bl	12da4 <__assert_fail@plt+0x165c>
   11c38:	movw	r1, #45944	; 0xb378
   11c3c:	movt	r1, #2
   11c40:	str	r0, [r1]
   11c44:	movw	r0, #39460	; 0x9a24
   11c48:	movt	r0, #1
   11c4c:	bl	12da4 <__assert_fail@plt+0x165c>
   11c50:	movw	r1, #45948	; 0xb37c
   11c54:	movt	r1, #2
   11c58:	str	r0, [r1]
   11c5c:	movw	r7, #39044	; 0x9884
   11c60:	movt	r7, #1
   11c64:	mov	r0, #0
   11c68:	str	r0, [sp, #100]	; 0x64
   11c6c:	mov	r0, #0
   11c70:	str	r0, [sp, #92]	; 0x5c
   11c74:	mov	r8, #0
   11c78:	str	r6, [sp, #96]	; 0x60
   11c7c:	b	11ca0 <__assert_fail@plt+0x558>
   11c80:	mov	r0, #0
   11c84:	str	r0, [fp, #-44]	; 0xffffffd4
   11c88:	str	r0, [fp, #-48]	; 0xffffffd0
   11c8c:	sub	r0, r9, #48	; 0x30
   11c90:	asr	r1, r0, #31
   11c94:	str	r0, [fp, #-48]	; 0xffffffd0
   11c98:	str	r1, [fp, #-44]	; 0xffffffd4
   11c9c:	str	r4, [sp, #100]	; 0x64
   11ca0:	movw	r5, #45920	; 0xb360
   11ca4:	movt	r5, #2
   11ca8:	ldr	r4, [r5]
   11cac:	mov	r0, #0
   11cb0:	str	r0, [sp]
   11cb4:	ldr	r0, [sp, #104]	; 0x68
   11cb8:	mov	r1, r6
   11cbc:	mov	r2, r7
   11cc0:	movw	r3, #41472	; 0xa200
   11cc4:	movt	r3, #1
   11cc8:	bl	11580 <getopt_long@plt>
   11ccc:	mov	r9, r0
   11cd0:	add	r0, r0, #3
   11cd4:	cmp	r4, #0
   11cd8:	movweq	r4, #1
   11cdc:	movw	r1, #262	; 0x106
   11ce0:	cmp	r0, r1
   11ce4:	bhi	12ad4 <__assert_fail@plt+0x138c>
   11ce8:	add	r1, pc, #0
   11cec:	ldr	pc, [r1, r0, lsl #2]
   11cf0:	ldrdeq	r2, [r1], -ip
   11cf4:	andeq	r2, r1, r0, lsr fp
   11cf8:	andeq	r2, r1, r4, ror r6
   11cfc:	ldrdeq	r2, [r1], -r4
   11d00:	ldrdeq	r2, [r1], -r4
   11d04:	ldrdeq	r2, [r1], -r4
   11d08:	ldrdeq	r2, [r1], -r4
   11d0c:	ldrdeq	r2, [r1], -r4
   11d10:	ldrdeq	r2, [r1], -r4
   11d14:	ldrdeq	r2, [r1], -r4
   11d18:	ldrdeq	r2, [r1], -r4
   11d1c:	ldrdeq	r2, [r1], -r4
   11d20:	ldrdeq	r2, [r1], -r4
   11d24:	ldrdeq	r2, [r1], -r4
   11d28:	ldrdeq	r2, [r1], -r4
   11d2c:	ldrdeq	r2, [r1], -r4
   11d30:	ldrdeq	r2, [r1], -r4
   11d34:	ldrdeq	r2, [r1], -r4
   11d38:	ldrdeq	r2, [r1], -r4
   11d3c:	ldrdeq	r2, [r1], -r4
   11d40:	ldrdeq	r2, [r1], -r4
   11d44:	ldrdeq	r2, [r1], -r4
   11d48:	ldrdeq	r2, [r1], -r4
   11d4c:	ldrdeq	r2, [r1], -r4
   11d50:	ldrdeq	r2, [r1], -r4
   11d54:	ldrdeq	r2, [r1], -r4
   11d58:	ldrdeq	r2, [r1], -r4
   11d5c:	ldrdeq	r2, [r1], -r4
   11d60:	ldrdeq	r2, [r1], -r4
   11d64:	ldrdeq	r2, [r1], -r4
   11d68:	ldrdeq	r2, [r1], -r4
   11d6c:	ldrdeq	r2, [r1], -r4
   11d70:	ldrdeq	r2, [r1], -r4
   11d74:	ldrdeq	r2, [r1], -r4
   11d78:	ldrdeq	r2, [r1], -r4
   11d7c:	ldrdeq	r2, [r1], -r4
   11d80:	ldrdeq	r2, [r1], -r4
   11d84:	ldrdeq	r2, [r1], -r4
   11d88:	ldrdeq	r2, [r1], -r4
   11d8c:	ldrdeq	r2, [r1], -r4
   11d90:	ldrdeq	r2, [r1], -r4
   11d94:	ldrdeq	r2, [r1], -r4
   11d98:	ldrdeq	r2, [r1], -r4
   11d9c:	ldrdeq	r2, [r1], -r4
   11da0:	ldrdeq	r2, [r1], -r4
   11da4:	ldrdeq	r2, [r1], -r4
   11da8:	ldrdeq	r2, [r1], -r4
   11dac:	ldrdeq	r2, [r1], -r4
   11db0:	ldrdeq	r2, [r1], -r4
   11db4:	ldrdeq	r2, [r1], -r4
   11db8:	ldrdeq	r2, [r1], -r4
   11dbc:	andeq	r2, r1, ip, lsl #2
   11dc0:	andeq	r2, r1, ip, lsl #2
   11dc4:	andeq	r2, r1, ip, lsl #2
   11dc8:	andeq	r2, r1, ip, lsl #2
   11dcc:	andeq	r2, r1, ip, lsl #2
   11dd0:	andeq	r2, r1, ip, lsl #2
   11dd4:	andeq	r2, r1, ip, lsl #2
   11dd8:	andeq	r2, r1, ip, lsl #2
   11ddc:	andeq	r2, r1, ip, lsl #2
   11de0:	andeq	r2, r1, ip, lsl #2
   11de4:	ldrdeq	r2, [r1], -r4
   11de8:	ldrdeq	r2, [r1], -r4
   11dec:	ldrdeq	r2, [r1], -r4
   11df0:	ldrdeq	r2, [r1], -r4
   11df4:	ldrdeq	r2, [r1], -r4
   11df8:	ldrdeq	r2, [r1], -r4
   11dfc:	ldrdeq	r2, [r1], -r4
   11e00:	ldrdeq	r2, [r1], -r4
   11e04:	ldrdeq	r2, [r1], -r4
   11e08:	andeq	r2, r1, ip, asr #4
   11e0c:	ldrdeq	r2, [r1], -r4
   11e10:	ldrdeq	r2, [r1], -r4
   11e14:	ldrdeq	r2, [r1], -r4
   11e18:	ldrdeq	r2, [r1], -r4
   11e1c:	ldrdeq	r2, [r1], -r4
   11e20:	ldrdeq	r2, [r1], -r4
   11e24:	ldrdeq	r2, [r1], -r4
   11e28:	ldrdeq	r2, [r1], -r4
   11e2c:	ldrdeq	r2, [r1], -r4
   11e30:	ldrdeq	r2, [r1], -r4
   11e34:	ldrdeq	r2, [r1], -r4
   11e38:	ldrdeq	r2, [r1], -r4
   11e3c:	ldrdeq	r2, [r1], -r4
   11e40:	ldrdeq	r2, [r1], -r4
   11e44:	ldrdeq	r2, [r1], -r4
   11e48:	ldrdeq	r2, [r1], -r4
   11e4c:	ldrdeq	r2, [r1], -r4
   11e50:	ldrdeq	r2, [r1], -r4
   11e54:	ldrdeq	r2, [r1], -r4
   11e58:	ldrdeq	r2, [r1], -r4
   11e5c:	ldrdeq	r2, [r1], -r4
   11e60:	ldrdeq	r2, [r1], -r4
   11e64:	ldrdeq	r2, [r1], -r4
   11e68:	ldrdeq	r2, [r1], -r4
   11e6c:	ldrdeq	r2, [r1], -r4
   11e70:	ldrdeq	r2, [r1], -r4
   11e74:	ldrdeq	r2, [r1], -r4
   11e78:	ldrdeq	r2, [r1], -r4
   11e7c:	ldrdeq	r2, [r1], -r4
   11e80:			; <UNDEFINED> instruction: 0x000122b8
   11e84:			; <UNDEFINED> instruction: 0x000123b4
   11e88:	ldrdeq	r2, [r1], -r4
   11e8c:	muleq	r1, ip, r1
   11e90:	andeq	r2, r1, r8, lsr r2
   11e94:	ldrdeq	r2, [r1], -r4
   11e98:	ldrdeq	r2, [r1], -r4
   11e9c:	ldrdeq	r2, [r1], -r4
   11ea0:	ldrdeq	r2, [r1], -r4
   11ea4:	ldrdeq	r2, [r1], -r4
   11ea8:	ldrdeq	r2, [r1], -r4
   11eac:	andeq	r2, r1, r8, asr #6
   11eb0:	ldrdeq	r2, [r1], -r4
   11eb4:	andeq	r2, r1, ip, asr #8
   11eb8:	ldrdeq	r2, [r1], -r4
   11ebc:	ldrdeq	r2, [r1], -r4
   11ec0:	ldrdeq	r2, [r1], -r4
   11ec4:	ldrdeq	r2, [r1], -r4
   11ec8:	ldrdeq	r2, [r1], -r4
   11ecc:	andeq	r2, r1, r0, lsl r5
   11ed0:	andeq	r2, r1, r4, lsr #8
   11ed4:	ldrdeq	r2, [r1], -r4
   11ed8:	ldrdeq	r2, [r1], -r4
   11edc:	muleq	r1, ip, r1
   11ee0:	ldrdeq	r2, [r1], -r4
   11ee4:	ldrdeq	r2, [r1], -r4
   11ee8:	ldrdeq	r2, [r1], -r4
   11eec:	ldrdeq	r2, [r1], -r4
   11ef0:	ldrdeq	r2, [r1], -r4
   11ef4:	ldrdeq	r2, [r1], -r4
   11ef8:	ldrdeq	r2, [r1], -r4
   11efc:	ldrdeq	r2, [r1], -r4
   11f00:	ldrdeq	r2, [r1], -r4
   11f04:	ldrdeq	r2, [r1], -r4
   11f08:	ldrdeq	r2, [r1], -r4
   11f0c:	ldrdeq	r2, [r1], -r4
   11f10:	ldrdeq	r2, [r1], -r4
   11f14:	ldrdeq	r2, [r1], -r4
   11f18:	ldrdeq	r2, [r1], -r4
   11f1c:	ldrdeq	r2, [r1], -r4
   11f20:	ldrdeq	r2, [r1], -r4
   11f24:	ldrdeq	r2, [r1], -r4
   11f28:	ldrdeq	r2, [r1], -r4
   11f2c:	ldrdeq	r2, [r1], -r4
   11f30:	ldrdeq	r2, [r1], -r4
   11f34:	ldrdeq	r2, [r1], -r4
   11f38:	ldrdeq	r2, [r1], -r4
   11f3c:	ldrdeq	r2, [r1], -r4
   11f40:	ldrdeq	r2, [r1], -r4
   11f44:	ldrdeq	r2, [r1], -r4
   11f48:	ldrdeq	r2, [r1], -r4
   11f4c:	ldrdeq	r2, [r1], -r4
   11f50:	ldrdeq	r2, [r1], -r4
   11f54:	ldrdeq	r2, [r1], -r4
   11f58:	ldrdeq	r2, [r1], -r4
   11f5c:	ldrdeq	r2, [r1], -r4
   11f60:	ldrdeq	r2, [r1], -r4
   11f64:	ldrdeq	r2, [r1], -r4
   11f68:	ldrdeq	r2, [r1], -r4
   11f6c:	ldrdeq	r2, [r1], -r4
   11f70:	ldrdeq	r2, [r1], -r4
   11f74:	ldrdeq	r2, [r1], -r4
   11f78:	ldrdeq	r2, [r1], -r4
   11f7c:	ldrdeq	r2, [r1], -r4
   11f80:	ldrdeq	r2, [r1], -r4
   11f84:	ldrdeq	r2, [r1], -r4
   11f88:	ldrdeq	r2, [r1], -r4
   11f8c:	ldrdeq	r2, [r1], -r4
   11f90:	ldrdeq	r2, [r1], -r4
   11f94:	ldrdeq	r2, [r1], -r4
   11f98:	ldrdeq	r2, [r1], -r4
   11f9c:	ldrdeq	r2, [r1], -r4
   11fa0:	ldrdeq	r2, [r1], -r4
   11fa4:	ldrdeq	r2, [r1], -r4
   11fa8:	ldrdeq	r2, [r1], -r4
   11fac:	ldrdeq	r2, [r1], -r4
   11fb0:	ldrdeq	r2, [r1], -r4
   11fb4:	ldrdeq	r2, [r1], -r4
   11fb8:	ldrdeq	r2, [r1], -r4
   11fbc:	ldrdeq	r2, [r1], -r4
   11fc0:	ldrdeq	r2, [r1], -r4
   11fc4:	ldrdeq	r2, [r1], -r4
   11fc8:	ldrdeq	r2, [r1], -r4
   11fcc:	ldrdeq	r2, [r1], -r4
   11fd0:	ldrdeq	r2, [r1], -r4
   11fd4:	ldrdeq	r2, [r1], -r4
   11fd8:	ldrdeq	r2, [r1], -r4
   11fdc:	ldrdeq	r2, [r1], -r4
   11fe0:	ldrdeq	r2, [r1], -r4
   11fe4:	ldrdeq	r2, [r1], -r4
   11fe8:	ldrdeq	r2, [r1], -r4
   11fec:	ldrdeq	r2, [r1], -r4
   11ff0:	ldrdeq	r2, [r1], -r4
   11ff4:	ldrdeq	r2, [r1], -r4
   11ff8:	ldrdeq	r2, [r1], -r4
   11ffc:	ldrdeq	r2, [r1], -r4
   12000:	ldrdeq	r2, [r1], -r4
   12004:	ldrdeq	r2, [r1], -r4
   12008:	ldrdeq	r2, [r1], -r4
   1200c:	ldrdeq	r2, [r1], -r4
   12010:	ldrdeq	r2, [r1], -r4
   12014:	ldrdeq	r2, [r1], -r4
   12018:	ldrdeq	r2, [r1], -r4
   1201c:	ldrdeq	r2, [r1], -r4
   12020:	ldrdeq	r2, [r1], -r4
   12024:	ldrdeq	r2, [r1], -r4
   12028:	ldrdeq	r2, [r1], -r4
   1202c:	ldrdeq	r2, [r1], -r4
   12030:	ldrdeq	r2, [r1], -r4
   12034:	ldrdeq	r2, [r1], -r4
   12038:	ldrdeq	r2, [r1], -r4
   1203c:	ldrdeq	r2, [r1], -r4
   12040:	ldrdeq	r2, [r1], -r4
   12044:	ldrdeq	r2, [r1], -r4
   12048:	ldrdeq	r2, [r1], -r4
   1204c:	ldrdeq	r2, [r1], -r4
   12050:	ldrdeq	r2, [r1], -r4
   12054:	ldrdeq	r2, [r1], -r4
   12058:	ldrdeq	r2, [r1], -r4
   1205c:	ldrdeq	r2, [r1], -r4
   12060:	ldrdeq	r2, [r1], -r4
   12064:	ldrdeq	r2, [r1], -r4
   12068:	ldrdeq	r2, [r1], -r4
   1206c:	ldrdeq	r2, [r1], -r4
   12070:	ldrdeq	r2, [r1], -r4
   12074:	ldrdeq	r2, [r1], -r4
   12078:	ldrdeq	r2, [r1], -r4
   1207c:	ldrdeq	r2, [r1], -r4
   12080:	ldrdeq	r2, [r1], -r4
   12084:	ldrdeq	r2, [r1], -r4
   12088:	ldrdeq	r2, [r1], -r4
   1208c:	ldrdeq	r2, [r1], -r4
   12090:	ldrdeq	r2, [r1], -r4
   12094:	ldrdeq	r2, [r1], -r4
   12098:	ldrdeq	r2, [r1], -r4
   1209c:	ldrdeq	r2, [r1], -r4
   120a0:	ldrdeq	r2, [r1], -r4
   120a4:	ldrdeq	r2, [r1], -r4
   120a8:	ldrdeq	r2, [r1], -r4
   120ac:	ldrdeq	r2, [r1], -r4
   120b0:	ldrdeq	r2, [r1], -r4
   120b4:	ldrdeq	r2, [r1], -r4
   120b8:	ldrdeq	r2, [r1], -r4
   120bc:	ldrdeq	r2, [r1], -r4
   120c0:	ldrdeq	r2, [r1], -r4
   120c4:	ldrdeq	r2, [r1], -r4
   120c8:	ldrdeq	r2, [r1], -r4
   120cc:	ldrdeq	r2, [r1], -r4
   120d0:	ldrdeq	r2, [r1], -r4
   120d4:	ldrdeq	r2, [r1], -r4
   120d8:	ldrdeq	r2, [r1], -r4
   120dc:	ldrdeq	r2, [r1], -r4
   120e0:	ldrdeq	r2, [r1], -r4
   120e4:	ldrdeq	r2, [r1], -r4
   120e8:	ldrdeq	r2, [r1], -r4
   120ec:	ldrdeq	r2, [r1], -r4
   120f0:	ldrdeq	r2, [r1], -r4
   120f4:	ldrdeq	r2, [r1], -r4
   120f8:	ldrdeq	r2, [r1], -r4
   120fc:	andeq	r2, r1, r8, lsr r4
   12100:	strdeq	r2, [r1], -r4
   12104:	andeq	r2, r1, r0, ror r5
   12108:	andeq	r2, r1, ip, lsl r3
   1210c:	cmp	r8, #0
   12110:	beq	12124 <__assert_fail@plt+0x9dc>
   12114:	mvn	r0, #4
   12118:	tst	r8, r0
   1211c:	beq	12134 <__assert_fail@plt+0x9ec>
   12120:	b	12b78 <__assert_fail@plt+0x1430>
   12124:	mov	r0, #0
   12128:	str	r0, [fp, #-44]	; 0xffffffd4
   1212c:	str	r0, [fp, #-48]	; 0xffffffd0
   12130:	mov	r8, #4
   12134:	ldr	r0, [sp, #100]	; 0x64
   12138:	cmp	r0, #0
   1213c:	cmpne	r0, r4
   12140:	bne	11c80 <__assert_fail@plt+0x538>
   12144:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12148:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1214c:	movw	r0, #39321	; 0x9999
   12150:	movt	r0, #39321	; 0x9999
   12154:	subs	r0, r0, r2
   12158:	movw	r0, #39321	; 0x9999
   1215c:	movt	r0, #6553	; 0x1999
   12160:	sbcs	r0, r0, r3
   12164:	bcc	12b38 <__assert_fail@plt+0x13f0>
   12168:	mov	r0, #10
   1216c:	umull	r0, r1, r2, r0
   12170:	add	r7, r3, r3, lsl #2
   12174:	add	r1, r1, r7, lsl #1
   12178:	sub	r7, r9, #48	; 0x30
   1217c:	adds	r0, r0, r7
   12180:	adc	r1, r1, r7, asr #31
   12184:	movw	r7, #39044	; 0x9884
   12188:	movt	r7, #1
   1218c:	subs	r2, r0, r2
   12190:	sbcs	r2, r1, r3
   12194:	bcs	11c94 <__assert_fail@plt+0x54c>
   12198:	b	12b38 <__assert_fail@plt+0x13f0>
   1219c:	cmp	r9, #100	; 0x64
   121a0:	movw	r4, #39400	; 0x99e8
   121a4:	movt	r4, #1
   121a8:	movw	r0, #39389	; 0x99dd
   121ac:	movt	r0, #1
   121b0:	moveq	r4, r0
   121b4:	movw	r0, #45404	; 0xb15c
   121b8:	movt	r0, #2
   121bc:	str	r4, [r0]
   121c0:	movw	r0, #45936	; 0xb370
   121c4:	movt	r0, #2
   121c8:	ldr	sl, [r0]
   121cc:	cmp	sl, #0
   121d0:	beq	11ca0 <__assert_fail@plt+0x558>
   121d4:	mov	r0, sl
   121d8:	bl	115b0 <strlen@plt>
   121dc:	mov	r5, r0
   121e0:	mov	r0, sl
   121e4:	mov	r1, r4
   121e8:	bl	1173c <strspn@plt>
   121ec:	cmp	r5, r0
   121f0:	bne	12ba4 <__assert_fail@plt+0x145c>
   121f4:	movw	r2, #45936	; 0xb370
   121f8:	movt	r2, #2
   121fc:	ldr	r0, [r2]
   12200:	ldrb	r1, [r0]
   12204:	cmp	r1, #48	; 0x30
   12208:	bne	125cc <__assert_fail@plt+0xe84>
   1220c:	add	r0, r0, #1
   12210:	ldr	r6, [sp, #96]	; 0x60
   12214:	ldrb	r1, [r0]
   12218:	cmp	r1, #0
   1221c:	beq	12230 <__assert_fail@plt+0xae8>
   12220:	str	r0, [r2]
   12224:	ldrb	r1, [r0], #1
   12228:	cmp	r1, #48	; 0x30
   1222c:	beq	12214 <__assert_fail@plt+0xacc>
   12230:	sub	r0, r0, #1
   12234:	b	125d0 <__assert_fail@plt+0xe88>
   12238:	mov	r0, #1
   1223c:	movw	r1, #45968	; 0xb390
   12240:	movt	r1, #2
   12244:	strb	r0, [r1]
   12248:	b	11ca0 <__assert_fail@plt+0x558>
   1224c:	cmp	r8, #0
   12250:	bne	12b78 <__assert_fail@plt+0x1430>
   12254:	movw	r0, #45936	; 0xb370
   12258:	movt	r0, #2
   1225c:	ldr	r4, [r0]
   12260:	mov	r0, #0
   12264:	movw	r1, #39175	; 0x9907
   12268:	movt	r1, #1
   1226c:	mov	r2, #5
   12270:	bl	11460 <dcgettext@plt>
   12274:	mvn	r1, #0
   12278:	str	r1, [sp]
   1227c:	mov	r1, #0
   12280:	str	r1, [sp, #4]
   12284:	movw	r2, #41456	; 0xa1f0
   12288:	movt	r2, #1
   1228c:	str	r2, [sp, #8]
   12290:	str	r0, [sp, #12]
   12294:	str	r1, [sp, #16]
   12298:	mov	r0, r4
   1229c:	mov	r2, #1
   122a0:	mov	r3, #0
   122a4:	bl	18134 <__assert_fail@plt+0x69ec>
   122a8:	str	r1, [fp, #-44]	; 0xffffffd4
   122ac:	str	r0, [fp, #-48]	; 0xffffffd0
   122b0:	mov	r8, #2
   122b4:	b	11ca0 <__assert_fail@plt+0x558>
   122b8:	movw	r0, #45936	; 0xb370
   122bc:	movt	r0, #2
   122c0:	ldr	r4, [r0]
   122c4:	mov	r0, #0
   122c8:	movw	r1, #39071	; 0x989f
   122cc:	movt	r1, #1
   122d0:	mov	r2, #5
   122d4:	bl	11460 <dcgettext@plt>
   122d8:	mvn	r1, #-1073741824	; 0xc0000000
   122dc:	str	r1, [sp]
   122e0:	mov	r1, #0
   122e4:	str	r1, [sp, #4]
   122e8:	movw	r2, #38461	; 0x963d
   122ec:	movt	r2, #1
   122f0:	str	r2, [sp, #8]
   122f4:	str	r0, [sp, #12]
   122f8:	str	r1, [sp, #16]
   122fc:	mov	r0, r4
   12300:	mov	r2, #0
   12304:	mov	r3, #0
   12308:	bl	18134 <__assert_fail@plt+0x69ec>
   1230c:	movw	r1, #45952	; 0xb380
   12310:	movt	r1, #2
   12314:	str	r0, [r1]
   12318:	b	11ca0 <__assert_fail@plt+0x558>
   1231c:	movw	r0, #45936	; 0xb370
   12320:	movt	r0, #2
   12324:	ldr	r4, [r0]
   12328:	mov	r0, r4
   1232c:	bl	152c4 <__assert_fail@plt+0x3b7c>
   12330:	cmp	r0, r4
   12334:	bne	12bc0 <__assert_fail@plt+0x1478>
   12338:	movw	r0, #45956	; 0xb384
   1233c:	movt	r0, #2
   12340:	str	r4, [r0]
   12344:	b	11ca0 <__assert_fail@plt+0x558>
   12348:	cmp	r8, #0
   1234c:	bne	12b78 <__assert_fail@plt+0x1430>
   12350:	movw	r0, #45936	; 0xb370
   12354:	movt	r0, #2
   12358:	ldr	r4, [r0]
   1235c:	mov	r0, #0
   12360:	movw	r1, #39199	; 0x991f
   12364:	movt	r1, #1
   12368:	mov	r2, #5
   1236c:	bl	11460 <dcgettext@plt>
   12370:	mvn	r1, #0
   12374:	str	r1, [sp]
   12378:	str	r1, [sp, #4]
   1237c:	movw	r1, #38461	; 0x963d
   12380:	movt	r1, #1
   12384:	str	r1, [sp, #8]
   12388:	str	r0, [sp, #12]
   1238c:	mov	r0, #0
   12390:	str	r0, [sp, #16]
   12394:	mov	r0, r4
   12398:	mov	r2, #1
   1239c:	mov	r3, #0
   123a0:	bl	18134 <__assert_fail@plt+0x69ec>
   123a4:	str	r1, [fp, #-44]	; 0xffffffd4
   123a8:	str	r0, [fp, #-48]	; 0xffffffd0
   123ac:	mov	r8, #3
   123b0:	b	11ca0 <__assert_fail@plt+0x558>
   123b4:	cmp	r8, #0
   123b8:	bne	12b78 <__assert_fail@plt+0x1430>
   123bc:	movw	r0, #45936	; 0xb370
   123c0:	movt	r0, #2
   123c4:	ldr	r4, [r0]
   123c8:	mov	r0, #0
   123cc:	movw	r1, #39175	; 0x9907
   123d0:	movt	r1, #1
   123d4:	mov	r2, #5
   123d8:	bl	11460 <dcgettext@plt>
   123dc:	mvn	r1, #0
   123e0:	str	r1, [sp]
   123e4:	mvn	r1, #-2147483648	; 0x80000000
   123e8:	str	r1, [sp, #4]
   123ec:	movw	r1, #41456	; 0xa1f0
   123f0:	movt	r1, #1
   123f4:	str	r1, [sp, #8]
   123f8:	str	r0, [sp, #12]
   123fc:	mov	r0, #0
   12400:	str	r0, [sp, #16]
   12404:	mov	r8, #1
   12408:	mov	r0, r4
   1240c:	mov	r2, #1
   12410:	mov	r3, #0
   12414:	bl	18134 <__assert_fail@plt+0x69ec>
   12418:	str	r1, [fp, #-44]	; 0xffffffd4
   1241c:	str	r0, [fp, #-48]	; 0xffffffd0
   12420:	b	11ca0 <__assert_fail@plt+0x558>
   12424:	mov	r0, #1
   12428:	movw	r1, #45960	; 0xb388
   1242c:	movt	r1, #2
   12430:	strb	r0, [r1]
   12434:	b	11ca0 <__assert_fail@plt+0x558>
   12438:	mov	r0, #1
   1243c:	movw	r1, #45976	; 0xb398
   12440:	movt	r1, #2
   12444:	strb	r0, [r1]
   12448:	b	11ca0 <__assert_fail@plt+0x558>
   1244c:	cmp	r8, #0
   12450:	bne	12b78 <__assert_fail@plt+0x1430>
   12454:	bl	1158c <__ctype_b_loc@plt>
   12458:	mov	r5, r0
   1245c:	ldr	r6, [r0]
   12460:	movw	r7, #45936	; 0xb370
   12464:	movt	r7, #2
   12468:	ldr	r4, [r7]
   1246c:	ldrb	r0, [r4]
   12470:	bl	12da8 <__assert_fail@plt+0x1660>
   12474:	add	r0, r6, r0, lsl #1
   12478:	ldrb	r0, [r0, #1]
   1247c:	tst	r0, #32
   12480:	beq	124ac <__assert_fail@plt+0xd64>
   12484:	add	r4, r4, #1
   12488:	str	r4, [r7]
   1248c:	ldr	r6, [r5]
   12490:	ldrb	r0, [r4], #1
   12494:	bl	12da8 <__assert_fail@plt+0x1660>
   12498:	add	r0, r6, r0, lsl #1
   1249c:	ldrb	r0, [r0, #1]
   124a0:	tst	r0, #32
   124a4:	bne	12488 <__assert_fail@plt+0xd40>
   124a8:	sub	r4, r4, #1
   124ac:	mov	r0, r4
   124b0:	movw	r1, #39223	; 0x9937
   124b4:	movt	r1, #1
   124b8:	mov	r2, #2
   124bc:	bl	11718 <strncmp@plt>
   124c0:	cmp	r0, #0
   124c4:	ldr	r6, [sp, #96]	; 0x60
   124c8:	beq	125e0 <__assert_fail@plt+0xe98>
   124cc:	mov	r0, r4
   124d0:	movw	r1, #39226	; 0x993a
   124d4:	movt	r1, #1
   124d8:	mov	r2, #2
   124dc:	bl	11718 <strncmp@plt>
   124e0:	mov	r8, #5
   124e4:	cmp	r0, #0
   124e8:	bne	125ec <__assert_fail@plt+0xea4>
   124ec:	mov	r8, #6
   124f0:	b	125e4 <__assert_fail@plt+0xe9c>
   124f4:	movw	r0, #45936	; 0xb370
   124f8:	movt	r0, #2
   124fc:	ldr	r0, [r0]
   12500:	movw	r1, #45972	; 0xb394
   12504:	movt	r1, #2
   12508:	str	r0, [r1]
   1250c:	b	11ca0 <__assert_fail@plt+0x558>
   12510:	movw	r5, #45936	; 0xb370
   12514:	movt	r5, #2
   12518:	ldr	r0, [r5]
   1251c:	ldrb	r1, [r0]
   12520:	cmp	r1, #0
   12524:	beq	12be8 <__assert_fail@plt+0x14a0>
   12528:	ldrb	r2, [r0, #1]
   1252c:	cmp	r2, #0
   12530:	beq	1254c <__assert_fail@plt+0xe04>
   12534:	movw	r1, #39277	; 0x996d
   12538:	movt	r1, #1
   1253c:	bl	113d0 <strcmp@plt>
   12540:	mov	r1, #0
   12544:	cmp	r0, #0
   12548:	bne	12bf4 <__assert_fail@plt+0x14ac>
   1254c:	movw	r2, #45400	; 0xb158
   12550:	movt	r2, #2
   12554:	ldr	r0, [r2]
   12558:	cmp	r0, #0
   1255c:	bmi	12568 <__assert_fail@plt+0xe20>
   12560:	cmp	r0, r1
   12564:	bne	12c1c <__assert_fail@plt+0x14d4>
   12568:	str	r1, [r2]
   1256c:	b	11ca0 <__assert_fail@plt+0x558>
   12570:	movw	r0, #45936	; 0xb370
   12574:	movt	r0, #2
   12578:	ldr	r4, [r0]
   1257c:	mov	r0, #0
   12580:	movw	r1, #39509	; 0x9a55
   12584:	movt	r1, #1
   12588:	mov	r2, #5
   1258c:	bl	11460 <dcgettext@plt>
   12590:	mvn	r1, #-2147483647	; 0x80000001
   12594:	str	r1, [sp]
   12598:	mov	r1, #0
   1259c:	str	r1, [sp, #4]
   125a0:	movw	r2, #41456	; 0xa1f0
   125a4:	movt	r2, #1
   125a8:	str	r2, [sp, #8]
   125ac:	str	r0, [sp, #12]
   125b0:	str	r1, [sp, #16]
   125b4:	mov	r0, r4
   125b8:	mov	r2, #1
   125bc:	mov	r3, #0
   125c0:	bl	18134 <__assert_fail@plt+0x69ec>
   125c4:	str	r0, [sp, #92]	; 0x5c
   125c8:	b	11ca0 <__assert_fail@plt+0x558>
   125cc:	ldr	r6, [sp, #96]	; 0x60
   125d0:	movw	r1, #45964	; 0xb38c
   125d4:	movt	r1, #2
   125d8:	str	r0, [r1]
   125dc:	b	11ca0 <__assert_fail@plt+0x558>
   125e0:	mov	r8, #7
   125e4:	add	r0, r4, #2
   125e8:	str	r0, [r7]
   125ec:	ldr	r4, [r7]
   125f0:	mov	r0, r4
   125f4:	mov	r1, #47	; 0x2f
   125f8:	bl	115c8 <strchr@plt>
   125fc:	cmp	r0, #0
   12600:	beq	12618 <__assert_fail@plt+0xed0>
   12604:	mov	r2, r0
   12608:	sub	r0, fp, #40	; 0x28
   1260c:	sub	r1, fp, #48	; 0x30
   12610:	bl	12dac <__assert_fail@plt+0x1664>
   12614:	b	12668 <__assert_fail@plt+0xf20>
   12618:	mov	r0, #0
   1261c:	movw	r1, #39229	; 0x993d
   12620:	movt	r1, #1
   12624:	mov	r2, #5
   12628:	bl	11460 <dcgettext@plt>
   1262c:	mvn	r1, #0
   12630:	str	r1, [sp]
   12634:	str	r1, [sp, #4]
   12638:	movw	r1, #38461	; 0x963d
   1263c:	movt	r1, #1
   12640:	str	r1, [sp, #8]
   12644:	str	r0, [sp, #12]
   12648:	mov	r0, #0
   1264c:	str	r0, [sp, #16]
   12650:	mov	r0, r4
   12654:	mov	r2, #1
   12658:	mov	r3, #0
   1265c:	bl	18134 <__assert_fail@plt+0x69ec>
   12660:	str	r1, [fp, #-44]	; 0xffffffd4
   12664:	str	r0, [fp, #-48]	; 0xffffffd0
   12668:	movw	r7, #39044	; 0x9884
   1266c:	movt	r7, #1
   12670:	b	11ca0 <__assert_fail@plt+0x558>
   12674:	ldr	r9, [fp, #-40]	; 0xffffffd8
   12678:	ldr	sl, [fp, #-36]	; 0xffffffdc
   1267c:	orrs	r4, r9, sl
   12680:	beq	12698 <__assert_fail@plt+0xf50>
   12684:	movw	r0, #45972	; 0xb394
   12688:	movt	r0, #2
   1268c:	ldr	r0, [r0]
   12690:	cmp	r0, #0
   12694:	bne	12c78 <__assert_fail@plt+0x1530>
   12698:	cmp	r8, #0
   1269c:	movw	r3, #45400	; 0xb158
   126a0:	movt	r3, #2
   126a4:	beq	126fc <__assert_fail@plt+0xfb4>
   126a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   126ac:	ldr	r1, [fp, #-44]	; 0xffffffd4
   126b0:	orrs	r2, r0, r1
   126b4:	ldr	r6, [sp, #92]	; 0x5c
   126b8:	bne	12714 <__assert_fail@plt+0xfcc>
   126bc:	movw	r1, #39199	; 0x991f
   126c0:	movt	r1, #1
   126c4:	mov	r0, #0
   126c8:	mov	r2, #5
   126cc:	bl	11460 <dcgettext@plt>
   126d0:	mov	r4, r0
   126d4:	movw	r0, #39278	; 0x996e
   126d8:	movt	r0, #1
   126dc:	bl	16f94 <__assert_fail@plt+0x584c>
   126e0:	str	r0, [sp]
   126e4:	movw	r2, #39637	; 0x9ad5
   126e8:	movt	r2, #1
   126ec:	mov	r0, #0
   126f0:	mov	r1, #0
   126f4:	mov	r3, r4
   126f8:	b	12cbc <__assert_fail@plt+0x1574>
   126fc:	mov	r1, #0
   12700:	str	r1, [fp, #-44]	; 0xffffffd4
   12704:	mov	r0, #1000	; 0x3e8
   12708:	str	r0, [fp, #-48]	; 0xffffffd0
   1270c:	mov	r8, #3
   12710:	ldr	r6, [sp, #92]	; 0x5c
   12714:	ldr	r2, [r3]
   12718:	cmn	r2, #1
   1271c:	movle	r2, #10
   12720:	strle	r2, [r3]
   12724:	mov	r2, r8
   12728:	bl	12e6c <__assert_fail@plt+0x1724>
   1272c:	ldr	r0, [r5]
   12730:	ldr	r1, [sp, #104]	; 0x68
   12734:	cmp	r0, r1
   12738:	bge	12758 <__assert_fail@plt+0x1010>
   1273c:	add	r1, r0, #1
   12740:	str	r1, [r5]
   12744:	ldr	r1, [sp, #96]	; 0x60
   12748:	ldr	r0, [r1, r0, lsl #2]
   1274c:	movw	r1, #45944	; 0xb378
   12750:	movt	r1, #2
   12754:	str	r0, [r1]
   12758:	ldr	r0, [r5]
   1275c:	ldr	r1, [sp, #104]	; 0x68
   12760:	cmp	r0, r1
   12764:	bge	12784 <__assert_fail@plt+0x103c>
   12768:	add	r1, r0, #1
   1276c:	str	r1, [r5]
   12770:	ldr	r1, [sp, #96]	; 0x60
   12774:	ldr	r0, [r1, r0, lsl #2]
   12778:	movw	r1, #45948	; 0xb37c
   1277c:	movt	r1, #2
   12780:	str	r0, [r1]
   12784:	ldr	r0, [r5]
   12788:	ldr	r1, [sp, #104]	; 0x68
   1278c:	cmp	r0, r1
   12790:	blt	12c84 <__assert_fail@plt+0x153c>
   12794:	str	r4, [sp, #96]	; 0x60
   12798:	movw	r0, #45964	; 0xb38c
   1279c:	movt	r0, #2
   127a0:	ldr	r0, [r0]
   127a4:	cmp	r0, #0
   127a8:	beq	127c4 <__assert_fail@plt+0x107c>
   127ac:	bl	115b0 <strlen@plt>
   127b0:	movw	r1, #45952	; 0xb380
   127b4:	movt	r1, #2
   127b8:	ldr	r1, [r1]
   127bc:	cmp	r0, r1
   127c0:	bhi	12ccc <__assert_fail@plt+0x1584>
   127c4:	movw	r0, #45944	; 0xb378
   127c8:	movt	r0, #2
   127cc:	ldr	r4, [r0]
   127d0:	movw	r1, #41881	; 0xa399
   127d4:	movt	r1, #1
   127d8:	mov	r0, r4
   127dc:	bl	113d0 <strcmp@plt>
   127e0:	cmp	r0, #0
   127e4:	beq	12804 <__assert_fail@plt+0x10bc>
   127e8:	mov	r0, #0
   127ec:	mov	r1, r4
   127f0:	mov	r2, #0
   127f4:	mov	r3, #0
   127f8:	bl	1552c <__assert_fail@plt+0x3de4>
   127fc:	cmn	r0, #1
   12800:	ble	12cd8 <__assert_fail@plt+0x1590>
   12804:	mov	r0, #0
   12808:	mov	r1, #0
   1280c:	bl	18040 <__assert_fail@plt+0x68f8>
   12810:	movw	r4, #45984	; 0xb3a0
   12814:	movt	r4, #2
   12818:	mov	r0, #0
   1281c:	mov	r1, r4
   12820:	bl	19128 <__assert_fail@plt+0x79e0>
   12824:	cmp	r0, #0
   12828:	bne	12c40 <__assert_fail@plt+0x14f8>
   1282c:	cmp	r6, #0
   12830:	bne	1285c <__assert_fail@plt+0x1114>
   12834:	add	r0, r4, #16
   12838:	movw	r1, #88	; 0x58
   1283c:	mov	r2, sp
   12840:	vld1.32	{d16}, [r0]!
   12844:	vst1.32	{d16}, [r2]!
   12848:	subs	r1, r1, #8
   1284c:	bne	12840 <__assert_fail@plt+0x10f8>
   12850:	ldm	r4, {r0, r1, r2, r3}
   12854:	bl	13000 <__assert_fail@plt+0x18b8>
   12858:	mov	r6, r0
   1285c:	str	r9, [sp, #104]	; 0x68
   12860:	add	r1, r6, #1
   12864:	ldr	r0, [sp, #88]	; 0x58
   12868:	bl	17c18 <__assert_fail@plt+0x64d0>
   1286c:	mov	r9, r0
   12870:	sub	r0, r8, #5
   12874:	cmp	r0, #1
   12878:	str	sl, [sp, #100]	; 0x64
   1287c:	bhi	128dc <__assert_fail@plt+0x1194>
   12880:	mov	r0, r9
   12884:	mov	r1, r6
   12888:	bl	1304c <__assert_fail@plt+0x1904>
   1288c:	cmn	r1, #1
   12890:	ble	12d10 <__assert_fail@plt+0x15c8>
   12894:	ldr	r7, [fp, #-44]	; 0xffffffd4
   12898:	cmn	r7, #1
   1289c:	ble	12d5c <__assert_fail@plt+0x1614>
   128a0:	mov	r5, r8
   128a4:	ldr	r4, [fp, #-48]	; 0xffffffd0
   128a8:	subs	r2, r0, r6
   128ac:	sbcs	r2, r1, r6, asr #31
   128b0:	mov	r8, r6
   128b4:	mov	sl, r6
   128b8:	movlt	sl, r0
   128bc:	mov	r2, #0
   128c0:	subs	r3, r4, r0
   128c4:	sbcs	r3, r7, r1
   128c8:	movwcc	r2, #1
   128cc:	cmp	r2, #0
   128d0:	movne	r7, r1
   128d4:	movne	r4, r0
   128d8:	b	128f0 <__assert_fail@plt+0x11a8>
   128dc:	mov	r5, r8
   128e0:	mov	r8, r6
   128e4:	mvn	r7, #-2147483648	; 0x80000000
   128e8:	mvn	r4, #0
   128ec:	mvn	sl, #0
   128f0:	movw	r0, #45972	; 0xb394
   128f4:	movt	r0, #2
   128f8:	ldr	r0, [r0]
   128fc:	cmp	r0, #0
   12900:	beq	12954 <__assert_fail@plt+0x120c>
   12904:	movw	r0, #46088	; 0xb408
   12908:	movt	r0, #2
   1290c:	bl	116ac <sigemptyset@plt>
   12910:	add	r2, sp, #108	; 0x6c
   12914:	mov	r0, #13
   12918:	mov	r1, #0
   1291c:	bl	114b4 <sigaction@plt>
   12920:	ldr	r0, [sp, #108]	; 0x6c
   12924:	cmp	r0, #1
   12928:	beq	1293c <__assert_fail@plt+0x11f4>
   1292c:	movw	r0, #46088	; 0xb408
   12930:	movt	r0, #2
   12934:	mov	r1, #13
   12938:	bl	11550 <sigaddset@plt>
   1293c:	movw	r1, #46088	; 0xb408
   12940:	movt	r1, #2
   12944:	movw	r2, #46216	; 0xb488
   12948:	movt	r2, #2
   1294c:	mov	r0, #0
   12950:	bl	11400 <sigprocmask@plt>
   12954:	sub	r0, r5, #1
   12958:	cmp	r0, #6
   1295c:	bhi	12cc8 <__assert_fail@plt+0x1580>
   12960:	add	r1, pc, #0
   12964:	ldr	pc, [r1, r0, lsl #2]
   12968:	muleq	r1, ip, r9
   1296c:			; <UNDEFINED> instruction: 0x000129bc
   12970:	andeq	r2, r1, r4, lsl #19
   12974:	andeq	r2, r1, r4, lsl #19
   12978:	strdeq	r2, [r1], -ip
   1297c:	ldrdeq	r2, [r1], -r4
   12980:	andeq	r2, r1, r8, lsr sl
   12984:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12988:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1298c:	mov	r2, r9
   12990:	mov	r3, r8
   12994:	bl	131e8 <__assert_fail@plt+0x1aa0>
   12998:	b	12a8c <__assert_fail@plt+0x1344>
   1299c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129a0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   129a4:	mov	r2, #0
   129a8:	str	r2, [sp, #8]
   129ac:	str	r2, [sp, #12]
   129b0:	mvn	r2, #0
   129b4:	str	r2, [sp]
   129b8:	b	12a80 <__assert_fail@plt+0x1338>
   129bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   129c0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   129c4:	mov	r2, r9
   129c8:	mov	r3, r8
   129cc:	bl	13584 <__assert_fail@plt+0x1e3c>
   129d0:	b	12a8c <__assert_fail@plt+0x1344>
   129d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   129d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   129dc:	str	r4, [sp, #16]
   129e0:	str	r7, [sp, #20]
   129e4:	str	r9, [sp]
   129e8:	stmib	sp, {r8, sl}
   129ec:	ldr	r0, [sp, #104]	; 0x68
   129f0:	ldr	r1, [sp, #100]	; 0x64
   129f4:	bl	13b2c <__assert_fail@plt+0x23e4>
   129f8:	b	12a8c <__assert_fail@plt+0x1344>
   129fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a00:	ldr	r6, [fp, #-44]	; 0xffffffd4
   12a04:	ldr	r0, [sp, #96]	; 0x60
   12a08:	cmp	r0, #0
   12a0c:	beq	12a60 <__assert_fail@plt+0x1318>
   12a10:	str	r4, [sp, #16]
   12a14:	str	r7, [sp, #20]
   12a18:	str	r9, [sp]
   12a1c:	stmib	sp, {r8, sl}
   12a20:	ldr	r0, [sp, #104]	; 0x68
   12a24:	ldr	r1, [sp, #100]	; 0x64
   12a28:	mov	r2, r5
   12a2c:	mov	r3, r6
   12a30:	bl	13938 <__assert_fail@plt+0x21f0>
   12a34:	b	12a8c <__assert_fail@plt+0x1344>
   12a38:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12a3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12a40:	add	r0, sp, #108	; 0x6c
   12a44:	str	r9, [sp]
   12a48:	str	r8, [sp, #4]
   12a4c:	str	r0, [sp, #8]
   12a50:	ldr	r0, [sp, #104]	; 0x68
   12a54:	ldr	r1, [sp, #100]	; 0x64
   12a58:	bl	140c0 <__assert_fail@plt+0x2978>
   12a5c:	b	12a8c <__assert_fail@plt+0x1344>
   12a60:	mov	r0, r4
   12a64:	mov	r1, r7
   12a68:	mov	r2, r5
   12a6c:	mov	r3, r6
   12a70:	bl	18f38 <__assert_fail@plt+0x77f0>
   12a74:	str	r5, [sp, #8]
   12a78:	str	r6, [sp, #12]
   12a7c:	str	sl, [sp]
   12a80:	mov	r2, r9
   12a84:	mov	r3, r8
   12a88:	bl	13320 <__assert_fail@plt+0x1bd8>
   12a8c:	mov	r0, #0
   12a90:	bl	11730 <close@plt>
   12a94:	cmp	r0, #0
   12a98:	bne	12c40 <__assert_fail@plt+0x14f8>
   12a9c:	movw	r0, #46348	; 0xb50c
   12aa0:	movt	r0, #2
   12aa4:	ldr	r3, [r0]
   12aa8:	movw	r0, #46344	; 0xb508
   12aac:	movt	r0, #2
   12ab0:	ldr	r2, [r0]
   12ab4:	movw	r0, #45408	; 0xb160
   12ab8:	movt	r0, #2
   12abc:	ldr	r1, [r0]
   12ac0:	mov	r0, #0
   12ac4:	bl	14554 <__assert_fail@plt+0x2e0c>
   12ac8:	mov	r0, #0
   12acc:	sub	sp, fp, #28
   12ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ad4:	mov	r0, #1
   12ad8:	bl	11844 <__assert_fail@plt+0xfc>
   12adc:	movw	r0, #45412	; 0xb164
   12ae0:	movt	r0, #2
   12ae4:	ldr	r3, [r0]
   12ae8:	movw	r0, #45932	; 0xb36c
   12aec:	movt	r0, #2
   12af0:	ldr	r0, [r0]
   12af4:	mov	r1, #0
   12af8:	movw	r2, #39563	; 0x9a8b
   12afc:	movt	r2, #1
   12b00:	movw	r7, #39545	; 0x9a79
   12b04:	movt	r7, #1
   12b08:	str	r7, [sp]
   12b0c:	str	r2, [sp, #4]
   12b10:	str	r1, [sp, #8]
   12b14:	movw	r1, #39014	; 0x9866
   12b18:	movt	r1, #1
   12b1c:	movw	r2, #39531	; 0x9a6b
   12b20:	movt	r2, #1
   12b24:	bl	17b50 <__assert_fail@plt+0x6408>
   12b28:	mov	r0, #0
   12b2c:	bl	11598 <exit@plt>
   12b30:	mov	r0, #0
   12b34:	bl	11844 <__assert_fail@plt+0xfc>
   12b38:	movw	r1, #39349	; 0x99b5
   12b3c:	movt	r1, #1
   12b40:	mov	r0, #0
   12b44:	mov	r2, #5
   12b48:	bl	11460 <dcgettext@plt>
   12b4c:	mov	r4, r0
   12b50:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b54:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12b58:	add	r2, sp, #108	; 0x6c
   12b5c:	bl	15744 <__assert_fail@plt+0x3ffc>
   12b60:	mov	r3, r0
   12b64:	str	r9, [sp]
   12b68:	mov	r0, #1
   12b6c:	mov	r1, #0
   12b70:	mov	r2, r4
   12b74:	bl	11520 <error@plt>
   12b78:	movw	r1, #39141	; 0x98e5
   12b7c:	movt	r1, #1
   12b80:	mov	r0, #0
   12b84:	mov	r2, #5
   12b88:	bl	11460 <dcgettext@plt>
   12b8c:	mov	r2, r0
   12b90:	mov	r0, #0
   12b94:	mov	r1, #0
   12b98:	bl	11520 <error@plt>
   12b9c:	mov	r0, #1
   12ba0:	bl	11844 <__assert_fail@plt+0xfc>
   12ba4:	movw	r0, #39417	; 0x99f9
   12ba8:	movt	r0, #1
   12bac:	movw	r1, #39462	; 0x9a26
   12bb0:	movt	r1, #1
   12bb4:	cmp	r9, #100	; 0x64
   12bb8:	moveq	r1, r0
   12bbc:	b	12bc8 <__assert_fail@plt+0x1480>
   12bc0:	movw	r1, #39093	; 0x98b5
   12bc4:	movt	r1, #1
   12bc8:	mov	r0, #0
   12bcc:	mov	r2, #5
   12bd0:	bl	11460 <dcgettext@plt>
   12bd4:	mov	r4, r0
   12bd8:	movw	r0, #45936	; 0xb370
   12bdc:	movt	r0, #2
   12be0:	ldr	r0, [r0]
   12be4:	b	12ca8 <__assert_fail@plt+0x1560>
   12be8:	movw	r1, #39254	; 0x9956
   12bec:	movt	r1, #1
   12bf0:	b	12c24 <__assert_fail@plt+0x14dc>
   12bf4:	movw	r1, #39280	; 0x9970
   12bf8:	movt	r1, #1
   12bfc:	mov	r0, #0
   12c00:	mov	r2, #5
   12c04:	bl	11460 <dcgettext@plt>
   12c08:	mov	r4, r0
   12c0c:	ldr	r0, [r5]
   12c10:	bl	16f94 <__assert_fail@plt+0x584c>
   12c14:	mov	r3, r0
   12c18:	b	12b68 <__assert_fail@plt+0x1420>
   12c1c:	movw	r1, #39309	; 0x998d
   12c20:	movt	r1, #1
   12c24:	mov	r0, #0
   12c28:	mov	r2, #5
   12c2c:	bl	11460 <dcgettext@plt>
   12c30:	mov	r2, r0
   12c34:	mov	r0, #1
   12c38:	mov	r1, #0
   12c3c:	bl	11520 <error@plt>
   12c40:	bl	115f8 <__errno_location@plt>
   12c44:	ldr	r4, [r0]
   12c48:	movw	r0, #45944	; 0xb378
   12c4c:	movt	r0, #2
   12c50:	ldr	r2, [r0]
   12c54:	mov	r0, #0
   12c58:	mov	r1, #3
   12c5c:	bl	16e54 <__assert_fail@plt+0x570c>
   12c60:	mov	r3, r0
   12c64:	movw	r2, #41418	; 0xa1ca
   12c68:	movt	r2, #1
   12c6c:	mov	r0, #1
   12c70:	mov	r1, r4
   12c74:	bl	11520 <error@plt>
   12c78:	movw	r1, #39583	; 0x9a9f
   12c7c:	movt	r1, #1
   12c80:	b	12b80 <__assert_fail@plt+0x1438>
   12c84:	movw	r1, #39644	; 0x9adc
   12c88:	movt	r1, #1
   12c8c:	mov	r0, #0
   12c90:	mov	r2, #5
   12c94:	bl	11460 <dcgettext@plt>
   12c98:	mov	r4, r0
   12c9c:	ldr	r0, [r5]
   12ca0:	ldr	r1, [sp, #96]	; 0x60
   12ca4:	ldr	r0, [r1, r0, lsl #2]
   12ca8:	bl	16f94 <__assert_fail@plt+0x584c>
   12cac:	mov	r3, r0
   12cb0:	mov	r0, #0
   12cb4:	mov	r1, #0
   12cb8:	mov	r2, r4
   12cbc:	bl	11520 <error@plt>
   12cc0:	mov	r0, #1
   12cc4:	bl	11844 <__assert_fail@plt+0xfc>
   12cc8:	bl	11724 <abort@plt>
   12ccc:	movw	r1, #39661	; 0x9aed
   12cd0:	movt	r1, #1
   12cd4:	b	12b80 <__assert_fail@plt+0x1438>
   12cd8:	bl	115f8 <__errno_location@plt>
   12cdc:	ldr	r4, [r0]
   12ce0:	movw	r1, #39725	; 0x9b2d
   12ce4:	movt	r1, #1
   12ce8:	mov	r0, #0
   12cec:	mov	r2, #5
   12cf0:	bl	11460 <dcgettext@plt>
   12cf4:	mov	r5, r0
   12cf8:	movw	r0, #45944	; 0xb378
   12cfc:	movt	r0, #2
   12d00:	ldr	r1, [r0]
   12d04:	mov	r0, #4
   12d08:	bl	16da0 <__assert_fail@plt+0x5658>
   12d0c:	b	12d48 <__assert_fail@plt+0x1600>
   12d10:	bl	115f8 <__errno_location@plt>
   12d14:	ldr	r4, [r0]
   12d18:	movw	r1, #39752	; 0x9b48
   12d1c:	movt	r1, #1
   12d20:	mov	r0, #0
   12d24:	mov	r2, #5
   12d28:	bl	11460 <dcgettext@plt>
   12d2c:	mov	r5, r0
   12d30:	movw	r0, #45944	; 0xb378
   12d34:	movt	r0, #2
   12d38:	ldr	r2, [r0]
   12d3c:	mov	r0, #0
   12d40:	mov	r1, #3
   12d44:	bl	16e54 <__assert_fail@plt+0x570c>
   12d48:	mov	r3, r0
   12d4c:	mov	r0, #1
   12d50:	mov	r1, r4
   12d54:	mov	r2, r5
   12d58:	bl	11520 <error@plt>
   12d5c:	movw	r1, #39229	; 0x993d
   12d60:	movt	r1, #1
   12d64:	mov	r0, #0
   12d68:	mov	r2, #5
   12d6c:	bl	11460 <dcgettext@plt>
   12d70:	mov	r4, r0
   12d74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12d78:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12d7c:	add	r2, sp, #108	; 0x6c
   12d80:	bl	15744 <__assert_fail@plt+0x3ffc>
   12d84:	bl	16f94 <__assert_fail@plt+0x584c>
   12d88:	str	r0, [sp]
   12d8c:	movw	r2, #39637	; 0x9ad5
   12d90:	movt	r2, #1
   12d94:	mov	r0, #1
   12d98:	mov	r1, #75	; 0x4b
   12d9c:	mov	r3, r4
   12da0:	bl	11520 <error@plt>
   12da4:	bx	lr
   12da8:	bx	lr
   12dac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12db0:	add	fp, sp, #24
   12db4:	sub	sp, sp, #24
   12db8:	mov	r6, r2
   12dbc:	mov	r5, r1
   12dc0:	mov	r8, r0
   12dc4:	mov	r7, #0
   12dc8:	movw	r1, #39229	; 0x993d
   12dcc:	movt	r1, #1
   12dd0:	mov	r0, #0
   12dd4:	mov	r2, #5
   12dd8:	bl	11460 <dcgettext@plt>
   12ddc:	movw	r4, #38461	; 0x963d
   12de0:	movt	r4, #1
   12de4:	mvn	r1, #0
   12de8:	str	r1, [sp]
   12dec:	stmib	sp, {r1, r4}
   12df0:	str	r0, [sp, #12]
   12df4:	str	r7, [sp, #16]
   12df8:	add	r0, r6, #1
   12dfc:	mov	r2, #1
   12e00:	mov	r3, #0
   12e04:	bl	18134 <__assert_fail@plt+0x69ec>
   12e08:	strd	r0, [r5]
   12e0c:	movw	r0, #45936	; 0xb370
   12e10:	movt	r0, #2
   12e14:	ldr	r1, [r0]
   12e18:	cmp	r1, r6
   12e1c:	beq	12e64 <__assert_fail@plt+0x171c>
   12e20:	strb	r7, [r6]
   12e24:	ldr	r6, [r0]
   12e28:	ldm	r5, {r5, r9}
   12e2c:	movw	r1, #40579	; 0x9e83
   12e30:	movt	r1, #1
   12e34:	mov	r0, #0
   12e38:	mov	r2, #5
   12e3c:	bl	11460 <dcgettext@plt>
   12e40:	stm	sp, {r5, r9}
   12e44:	str	r4, [sp, #8]
   12e48:	str	r0, [sp, #12]
   12e4c:	str	r7, [sp, #16]
   12e50:	mov	r0, r6
   12e54:	mov	r2, #1
   12e58:	mov	r3, #0
   12e5c:	bl	18134 <__assert_fail@plt+0x69ec>
   12e60:	strd	r0, [r8]
   12e64:	sub	sp, fp, #24
   12e68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e70:	add	fp, sp, #24
   12e74:	sub	sp, sp, #16
   12e78:	mov	r5, r1
   12e7c:	mov	r4, r0
   12e80:	movw	r0, #45964	; 0xb38c
   12e84:	movt	r0, #2
   12e88:	ldr	r0, [r0]
   12e8c:	cmp	r0, #0
   12e90:	movw	r8, #46352	; 0xb510
   12e94:	movt	r8, #2
   12e98:	movne	r1, #1
   12e9c:	strbne	r1, [r8]
   12ea0:	sub	r1, r2, #5
   12ea4:	mov	r7, #0
   12ea8:	cmp	r1, #2
   12eac:	mov	r6, #0
   12eb0:	bhi	12f90 <__assert_fail@plt+0x1848>
   12eb4:	subs	r6, r4, #1
   12eb8:	sbc	r7, r5, #0
   12ebc:	cmp	r0, #0
   12ec0:	beq	12eec <__assert_fail@plt+0x17a4>
   12ec4:	movw	r1, #38461	; 0x963d
   12ec8:	movt	r1, #1
   12ecc:	str	r1, [sp]
   12ed0:	mov	r9, #0
   12ed4:	add	r3, sp, #8
   12ed8:	mov	r1, #0
   12edc:	mov	r2, #10
   12ee0:	bl	1813c <__assert_fail@plt+0x69f4>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12ef8 <__assert_fail@plt+0x17b0>
   12eec:	mov	r4, r6
   12ef0:	mov	r5, r7
   12ef4:	b	12f3c <__assert_fail@plt+0x17f4>
   12ef8:	ldr	r0, [sp, #8]
   12efc:	ldr	r1, [sp, #12]
   12f00:	subs	r2, r0, r4
   12f04:	sbcs	r2, r1, r5
   12f08:	mov	r2, #0
   12f0c:	movwcc	r2, #1
   12f10:	mvn	r3, r5
   12f14:	mvn	r5, r4
   12f18:	subs	r5, r5, r0
   12f1c:	sbcs	r3, r3, r1
   12f20:	movwcs	r9, #1
   12f24:	and	r2, r9, r2
   12f28:	adds	r4, r6, r0
   12f2c:	adc	r5, r7, r1
   12f30:	cmp	r2, #0
   12f34:	moveq	r5, r7
   12f38:	moveq	r4, r6
   12f3c:	movw	r0, #45404	; 0xb15c
   12f40:	movt	r0, #2
   12f44:	ldr	r0, [r0]
   12f48:	bl	115b0 <strlen@plt>
   12f4c:	mov	r9, r0
   12f50:	mov	r7, #0
   12f54:	mov	r6, #0
   12f58:	mov	r0, r4
   12f5c:	mov	r1, r5
   12f60:	mov	r2, r9
   12f64:	mov	r3, #0
   12f68:	bl	18f38 <__assert_fail@plt+0x77f0>
   12f6c:	adds	r7, r7, #1
   12f70:	adc	r6, r6, #0
   12f74:	subs	r2, r4, r9
   12f78:	sbcs	r2, r5, #0
   12f7c:	mov	r4, r0
   12f80:	mov	r5, r1
   12f84:	bcs	12f58 <__assert_fail@plt+0x1810>
   12f88:	mov	r0, #1
   12f8c:	strb	r0, [r8]
   12f90:	movw	r0, #45952	; 0xb380
   12f94:	movt	r0, #2
   12f98:	ldr	r1, [r0]
   12f9c:	cmp	r1, #0
   12fa0:	beq	12fe8 <__assert_fail@plt+0x18a0>
   12fa4:	subs	r0, r1, r7
   12fa8:	rscs	r0, r6, #0
   12fac:	movcs	r0, #1
   12fb0:	strbcs	r0, [r8]
   12fb4:	subcs	sp, fp, #24
   12fb8:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   12fbc:	movw	r1, #40627	; 0x9eb3
   12fc0:	movt	r1, #1
   12fc4:	mov	r0, #0
   12fc8:	mov	r2, #5
   12fcc:	bl	11460 <dcgettext@plt>
   12fd0:	mov	r2, r0
   12fd4:	str	r7, [sp]
   12fd8:	str	r6, [sp, #4]
   12fdc:	mov	r0, #1
   12fe0:	mov	r1, #0
   12fe4:	bl	11520 <error@plt>
   12fe8:	rsbs	r1, r7, #2
   12fec:	rscs	r1, r6, #0
   12ff0:	movcs	r7, #2
   12ff4:	str	r7, [r0]
   12ff8:	sub	sp, fp, #24
   12ffc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13000:	sub	sp, sp, #16
   13004:	stm	sp, {r0, r1, r2, r3}
   13008:	ldr	r1, [sp, #56]	; 0x38
   1300c:	cmp	r1, #131072	; 0x20000
   13010:	cmpge	r1, #1
   13014:	bge	13024 <__assert_fail@plt+0x18dc>
   13018:	mov	r0, #131072	; 0x20000
   1301c:	add	sp, sp, #16
   13020:	bx	lr
   13024:	cmp	r1, #536870912	; 0x20000000
   13028:	bhi	13018 <__assert_fail@plt+0x18d0>
   1302c:	mov	r2, #512	; 0x200
   13030:	cmp	r1, #536870913	; 0x20000001
   13034:	mov	r0, #512	; 0x200
   13038:	movcc	r0, r1
   1303c:	cmp	r1, #0
   13040:	movle	r0, r2
   13044:	add	sp, sp, #16
   13048:	bx	lr
   1304c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13050:	add	fp, sp, #28
   13054:	sub	sp, sp, #4
   13058:	mov	r4, r1
   1305c:	mov	r5, r0
   13060:	mov	r0, #1
   13064:	str	r0, [sp]
   13068:	mov	r6, #0
   1306c:	mov	r0, #0
   13070:	mov	r2, #0
   13074:	mov	r3, #0
   13078:	bl	114cc <lseek64@plt>
   1307c:	cmp	r1, #0
   13080:	bmi	131b0 <__assert_fail@plt+0x1a68>
   13084:	mov	r8, r0
   13088:	mov	r9, r1
   1308c:	mov	r7, #0
   13090:	add	r1, r5, r6
   13094:	sub	r2, r4, r6
   13098:	mov	r0, #0
   1309c:	bl	173ac <__assert_fail@plt+0x5c64>
   130a0:	cmn	r0, #1
   130a4:	beq	131a8 <__assert_fail@plt+0x1a60>
   130a8:	cmp	r0, #0
   130ac:	beq	131dc <__assert_fail@plt+0x1a94>
   130b0:	adds	r6, r6, r0
   130b4:	adc	r7, r7, #0
   130b8:	subs	r0, r6, r4
   130bc:	sbcs	r0, r7, #0
   130c0:	bcc	13090 <__assert_fail@plt+0x1948>
   130c4:	movw	r0, #45984	; 0xb3a0
   130c8:	movt	r0, #2
   130cc:	ldr	sl, [r0, #48]	; 0x30
   130d0:	ldr	r5, [r0, #52]	; 0x34
   130d4:	orrs	r0, sl, r5
   130d8:	beq	1319c <__assert_fail@plt+0x1a54>
   130dc:	adds	r8, r6, r8
   130e0:	adc	r9, r7, r9
   130e4:	bl	147e0 <__assert_fail@plt+0x3098>
   130e8:	subs	r1, sl, r8
   130ec:	sbcs	r1, r5, r9
   130f0:	blt	130fc <__assert_fail@plt+0x19b4>
   130f4:	cmp	r0, #0
   130f8:	bne	13178 <__assert_fail@plt+0x1a30>
   130fc:	mov	r0, #2
   13100:	str	r0, [sp]
   13104:	mov	r0, #0
   13108:	mov	r2, #0
   1310c:	mov	r3, #0
   13110:	bl	114cc <lseek64@plt>
   13114:	mvn	r4, #0
   13118:	cmp	r1, #0
   1311c:	bmi	131cc <__assert_fail@plt+0x1a84>
   13120:	mov	sl, r0
   13124:	mov	r5, r1
   13128:	eor	r0, r0, r8
   1312c:	eor	r1, r1, r9
   13130:	orrs	r0, r0, r1
   13134:	beq	13178 <__assert_fail@plt+0x1a30>
   13138:	mov	r0, #0
   1313c:	str	r0, [sp]
   13140:	mov	r0, #0
   13144:	mov	r2, r8
   13148:	mov	r3, r9
   1314c:	bl	114cc <lseek64@plt>
   13150:	cmp	r1, #0
   13154:	mvn	r1, #0
   13158:	bmi	131d0 <__assert_fail@plt+0x1a88>
   1315c:	subs	r0, sl, r8
   13160:	sbcs	r0, r5, r9
   13164:	mov	r0, #0
   13168:	movwlt	r0, #1
   1316c:	cmp	r0, #0
   13170:	movne	r5, r9
   13174:	movne	sl, r8
   13178:	subs	r0, sl, r8
   1317c:	sbc	r1, r5, r9
   13180:	adds	r4, r0, r6
   13184:	adc	r1, r1, r7
   13188:	mvn	r0, #-2147483648	; 0x80000000
   1318c:	eor	r0, r1, r0
   13190:	mvn	r2, r4
   13194:	orrs	r0, r2, r0
   13198:	bne	131d0 <__assert_fail@plt+0x1a88>
   1319c:	bl	115f8 <__errno_location@plt>
   131a0:	mov	r1, #75	; 0x4b
   131a4:	str	r1, [r0]
   131a8:	mvn	r4, #0
   131ac:	b	131cc <__assert_fail@plt+0x1a84>
   131b0:	bl	115f8 <__errno_location@plt>
   131b4:	ldr	r1, [r0]
   131b8:	mvn	r4, #0
   131bc:	cmp	r1, #29
   131c0:	bne	131cc <__assert_fail@plt+0x1a84>
   131c4:	mov	r1, #0
   131c8:	str	r1, [r0]
   131cc:	mvn	r1, #0
   131d0:	mov	r0, r4
   131d4:	sub	sp, fp, #28
   131d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131dc:	mov	r4, r6
   131e0:	mov	r1, r7
   131e4:	b	131d0 <__assert_fail@plt+0x1a88>
   131e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	add	fp, sp, #28
   131f0:	sub	sp, sp, #20
   131f4:	str	r3, [sp, #8]
   131f8:	mov	r4, r2
   131fc:	str	r1, [sp, #16]
   13200:	mov	r7, r0
   13204:	mov	r9, #0
   13208:	mov	sl, #1
   1320c:	mov	r8, #0
   13210:	str	r2, [sp, #4]
   13214:	b	13228 <__assert_fail@plt+0x1ae0>
   13218:	ldr	r4, [sp, #4]
   1321c:	ldr	r0, [sp, #12]
   13220:	cmp	r0, #0
   13224:	beq	132e0 <__assert_fail@plt+0x1b98>
   13228:	mov	r0, #0
   1322c:	mov	r1, r4
   13230:	ldr	r2, [sp, #8]
   13234:	bl	173ac <__assert_fail@plt+0x5c64>
   13238:	cmn	r0, #1
   1323c:	beq	132e8 <__assert_fail@plt+0x1ba0>
   13240:	mov	r2, r0
   13244:	movw	r0, #45400	; 0xb158
   13248:	movt	r0, #2
   1324c:	ldr	r1, [r0]
   13250:	mov	r6, r4
   13254:	str	r2, [sp, #12]
   13258:	strb	r1, [r6, r2]!
   1325c:	mov	r0, r4
   13260:	b	13274 <__assert_fail@plt+0x1b2c>
   13264:	movw	r0, #45400	; 0xb158
   13268:	movt	r0, #2
   1326c:	ldr	r1, [r0]
   13270:	mov	r0, r5
   13274:	bl	11490 <rawmemchr@plt>
   13278:	cmp	r0, r6
   1327c:	beq	132c0 <__assert_fail@plt+0x1b78>
   13280:	adds	r9, r9, #1
   13284:	adc	r8, r8, #0
   13288:	add	r5, r0, #1
   1328c:	subs	r0, r9, r7
   13290:	ldr	r0, [sp, #16]
   13294:	sbcs	r0, r8, r0
   13298:	bcc	13264 <__assert_fail@plt+0x1b1c>
   1329c:	sub	r2, r5, r4
   132a0:	and	r0, sl, #1
   132a4:	mov	r1, r4
   132a8:	bl	14804 <__assert_fail@plt+0x30bc>
   132ac:	mov	r9, #0
   132b0:	mov	sl, #1
   132b4:	mov	r4, r5
   132b8:	mov	r8, #0
   132bc:	b	13264 <__assert_fail@plt+0x1b1c>
   132c0:	cmp	r6, r4
   132c4:	beq	13218 <__assert_fail@plt+0x1ad0>
   132c8:	sub	r2, r6, r4
   132cc:	and	r0, sl, #1
   132d0:	mov	r1, r4
   132d4:	bl	14804 <__assert_fail@plt+0x30bc>
   132d8:	mov	sl, #0
   132dc:	b	13218 <__assert_fail@plt+0x1ad0>
   132e0:	sub	sp, fp, #28
   132e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132e8:	bl	115f8 <__errno_location@plt>
   132ec:	ldr	r4, [r0]
   132f0:	movw	r0, #45944	; 0xb378
   132f4:	movt	r0, #2
   132f8:	ldr	r2, [r0]
   132fc:	mov	r0, #0
   13300:	mov	r1, #3
   13304:	bl	16e54 <__assert_fail@plt+0x570c>
   13308:	mov	r3, r0
   1330c:	movw	r2, #41418	; 0xa1ca
   13310:	movt	r2, #1
   13314:	mov	r0, #1
   13318:	mov	r1, r4
   1331c:	bl	11520 <error@plt>
   13320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13324:	add	fp, sp, #28
   13328:	sub	sp, sp, #36	; 0x24
   1332c:	str	r3, [sp, #4]
   13330:	str	r2, [sp, #12]
   13334:	mov	r9, r1
   13338:	mov	r7, r0
   1333c:	ldr	r0, [fp, #20]
   13340:	ldr	r2, [fp, #16]
   13344:	subs	r2, r2, #1
   13348:	str	r2, [sp, #24]
   1334c:	sbc	r0, r0, #0
   13350:	str	r0, [sp, #20]
   13354:	mov	r8, #0
   13358:	ldr	r6, [fp, #8]
   1335c:	mov	r4, #1
   13360:	mov	r5, #1
   13364:	str	r7, [sp, #28]
   13368:	str	r1, [sp, #32]
   1336c:	mov	sl, #0
   13370:	cmn	r6, #1
   13374:	beq	1338c <__assert_fail@plt+0x1c44>
   13378:	ldr	r0, [sp, #4]
   1337c:	cmp	r6, r0
   13380:	mov	r0, #0
   13384:	movwcc	r0, #1
   13388:	b	133f8 <__assert_fail@plt+0x1cb0>
   1338c:	tst	r5, #1
   13390:	bne	133d4 <__assert_fail@plt+0x1c8c>
   13394:	mov	r0, #1
   13398:	str	r0, [sp]
   1339c:	mov	r0, #0
   133a0:	mov	r2, r7
   133a4:	mov	r3, r9
   133a8:	bl	114cc <lseek64@plt>
   133ac:	and	r0, r0, r1
   133b0:	mvn	r1, #0
   133b4:	subs	r1, r0, r1
   133b8:	movwne	r1, #1
   133bc:	orr	r4, r4, r1
   133c0:	cmn	r0, #1
   133c4:	ldr	r0, [sp, #32]
   133c8:	movne	r9, r0
   133cc:	ldr	r0, [sp, #28]
   133d0:	movne	r7, r0
   133d4:	mov	r0, #0
   133d8:	ldr	r1, [sp, #12]
   133dc:	ldr	r2, [sp, #4]
   133e0:	bl	173ac <__assert_fail@plt+0x5c64>
   133e4:	cmn	r0, #1
   133e8:	beq	1354c <__assert_fail@plt+0x1e04>
   133ec:	mov	r6, r0
   133f0:	clz	r0, r0
   133f4:	lsr	r0, r0, #5
   133f8:	str	r0, [sp, #16]
   133fc:	subs	r0, r6, r7
   13400:	rscs	r0, r9, #0
   13404:	bcs	13474 <__assert_fail@plt+0x1d2c>
   13408:	str	r9, [sp, #8]
   1340c:	ldr	r9, [sp, #12]
   13410:	cmp	r6, #0
   13414:	beq	134f8 <__assert_fail@plt+0x1db0>
   13418:	orr	r0, r4, r5
   1341c:	tst	r0, #1
   13420:	beq	13438 <__assert_fail@plt+0x1cf0>
   13424:	and	r0, r4, #1
   13428:	mov	r1, r9
   1342c:	mov	r2, r6
   13430:	bl	14804 <__assert_fail@plt+0x30bc>
   13434:	mov	r5, r0
   13438:	and	r0, r4, #1
   1343c:	adds	r8, r8, r0
   13440:	ldr	r0, [fp, #16]
   13444:	eor	r0, r8, r0
   13448:	adc	sl, sl, #0
   1344c:	ldr	r1, [fp, #20]
   13450:	eor	r1, sl, r1
   13454:	orrs	r0, r0, r1
   13458:	tsteq	r5, #1
   1345c:	beq	1350c <__assert_fail@plt+0x1dc4>
   13460:	subs	r7, r7, r6
   13464:	ldr	r9, [sp, #8]
   13468:	sbc	r9, r9, #0
   1346c:	mov	r4, #0
   13470:	b	134fc <__assert_fail@plt+0x1db4>
   13474:	ldr	r9, [sp, #12]
   13478:	tst	r4, #1
   1347c:	tsteq	r5, #1
   13480:	beq	13498 <__assert_fail@plt+0x1d50>
   13484:	and	r0, r4, #1
   13488:	mov	r1, r9
   1348c:	mov	r2, r7
   13490:	bl	14804 <__assert_fail@plt+0x30bc>
   13494:	mov	r5, r0
   13498:	and	r0, r4, #1
   1349c:	adds	r8, r8, r0
   134a0:	adc	sl, sl, #0
   134a4:	ldr	r0, [sp, #24]
   134a8:	subs	r0, r0, r8
   134ac:	ldr	r0, [sp, #20]
   134b0:	sbcs	r0, r0, sl
   134b4:	mov	r4, #0
   134b8:	movwcs	r4, #1
   134bc:	cmp	r4, #0
   134c0:	tsteq	r5, #1
   134c4:	beq	1350c <__assert_fail@plt+0x1dc4>
   134c8:	add	r9, r9, r7
   134cc:	sub	r6, r6, r7
   134d0:	ldr	r7, [sp, #28]
   134d4:	subs	r0, r6, r7
   134d8:	ldr	r0, [sp, #32]
   134dc:	rscs	r0, r0, #0
   134e0:	bcs	13478 <__assert_fail@plt+0x1d30>
   134e4:	ldr	r7, [sp, #28]
   134e8:	ldr	r0, [sp, #32]
   134ec:	str	r0, [sp, #8]
   134f0:	cmp	r6, #0
   134f4:	bne	13418 <__assert_fail@plt+0x1cd0>
   134f8:	ldr	r9, [sp, #8]
   134fc:	mvn	r6, #0
   13500:	ldr	r0, [sp, #16]
   13504:	cmp	r0, #0
   13508:	beq	13370 <__assert_fail@plt+0x1c28>
   1350c:	ldr	r5, [fp, #16]
   13510:	subs	r0, r8, r5
   13514:	ldr	r4, [fp, #20]
   13518:	sbcs	r0, sl, r4
   1351c:	bcs	13544 <__assert_fail@plt+0x1dfc>
   13520:	mov	r0, #1
   13524:	mov	r1, #0
   13528:	mov	r2, #0
   1352c:	bl	14804 <__assert_fail@plt+0x30bc>
   13530:	adds	r8, r8, #1
   13534:	adc	sl, sl, #0
   13538:	subs	r0, r8, r5
   1353c:	sbcs	r0, sl, r4
   13540:	bcc	13520 <__assert_fail@plt+0x1dd8>
   13544:	sub	sp, fp, #28
   13548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1354c:	bl	115f8 <__errno_location@plt>
   13550:	ldr	r4, [r0]
   13554:	movw	r0, #45944	; 0xb378
   13558:	movt	r0, #2
   1355c:	ldr	r2, [r0]
   13560:	mov	r0, #0
   13564:	mov	r1, #3
   13568:	bl	16e54 <__assert_fail@plt+0x570c>
   1356c:	mov	r3, r0
   13570:	movw	r2, #41418	; 0xa1ca
   13574:	movt	r2, #1
   13578:	mov	r0, #1
   1357c:	mov	r1, r4
   13580:	bl	11520 <error@plt>
   13584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13588:	add	fp, sp, #28
   1358c:	sub	sp, sp, #60	; 0x3c
   13590:	mov	r8, r2
   13594:	str	r1, [sp, #24]
   13598:	str	r0, [sp, #20]
   1359c:	mvn	r0, r3
   135a0:	str	r0, [sp, #12]
   135a4:	mov	sl, #0
   135a8:	mov	r7, #0
   135ac:	mov	r0, #0
   135b0:	str	r0, [sp, #32]
   135b4:	mov	r9, #0
   135b8:	mov	r4, #0
   135bc:	mov	r5, #0
   135c0:	str	r3, [sp, #16]
   135c4:	mov	r0, #0
   135c8:	mov	r1, r8
   135cc:	mov	r2, r3
   135d0:	bl	173ac <__assert_fail@plt+0x5c64>
   135d4:	cmp	r0, #0
   135d8:	beq	138c4 <__assert_fail@plt+0x217c>
   135dc:	cmn	r0, #1
   135e0:	str	r8, [sp, #8]
   135e4:	str	r8, [fp, #-32]	; 0xffffffe0
   135e8:	str	r0, [sp, #4]
   135ec:	mov	r6, r0
   135f0:	bne	13628 <__assert_fail@plt+0x1ee0>
   135f4:	b	13900 <__assert_fail@plt+0x21b8>
   135f8:	mov	r6, r4
   135fc:	ldr	sl, [sp, #44]	; 0x2c
   13600:	ldr	r9, [fp, #-36]	; 0xffffffdc
   13604:	cmp	r8, #0
   13608:	ldr	r4, [fp, #-40]	; 0xffffffd8
   1360c:	movwne	r4, #0
   13610:	movwne	r5, #0
   13614:	clz	r0, r8
   13618:	lsr	r0, r0, #5
   1361c:	and	r7, r7, r0
   13620:	cmp	r6, #0
   13624:	beq	138b0 <__assert_fail@plt+0x2168>
   13628:	str	r7, [sp, #28]
   1362c:	str	sl, [sp, #44]	; 0x2c
   13630:	ldr	r0, [sp, #20]
   13634:	subs	r0, r0, r4
   13638:	ldr	r1, [sp, #24]
   1363c:	sbc	r1, r1, r5
   13640:	mov	r7, r9
   13644:	subs	sl, r0, r9
   13648:	sbc	r1, r1, #0
   1364c:	subs	r0, r6, sl
   13650:	str	r1, [sp, #36]	; 0x24
   13654:	rscs	r0, r1, #0
   13658:	mov	r0, #0
   1365c:	movwcc	r0, #1
   13660:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13664:	add	r1, r3, sl
   13668:	sub	r8, r1, #1
   1366c:	cmp	r0, #0
   13670:	movwne	r8, #0
   13674:	mov	r9, sl
   13678:	movwne	r9, #0
   1367c:	mov	r2, sl
   13680:	str	r6, [sp, #40]	; 0x28
   13684:	movne	r2, r6
   13688:	movw	r0, #45400	; 0xb158
   1368c:	movt	r0, #2
   13690:	ldr	r1, [r0]
   13694:	mov	r0, r3
   13698:	bl	115e0 <memrchr@plt>
   1369c:	mov	r6, r0
   136a0:	str	r7, [fp, #-36]	; 0xffffffdc
   136a4:	cmp	r7, #0
   136a8:	beq	13704 <__assert_fail@plt+0x1fbc>
   136ac:	orrs	r0, r4, r5
   136b0:	beq	136bc <__assert_fail@plt+0x1f74>
   136b4:	cmp	r6, #0
   136b8:	beq	13774 <__assert_fail@plt+0x202c>
   136bc:	clz	r0, r0
   136c0:	lsr	r0, r0, #5
   136c4:	ldr	r1, [sp, #32]
   136c8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   136cc:	mov	r2, r7
   136d0:	bl	14804 <__assert_fail@plt+0x30bc>
   136d4:	adds	r4, r4, r7
   136d8:	str	r4, [fp, #-40]	; 0xffffffd8
   136dc:	adc	r5, r5, #0
   136e0:	ldr	r4, [sp, #16]
   136e4:	cmp	r7, r4
   136e8:	bls	136fc <__assert_fail@plt+0x1fb4>
   136ec:	ldr	r0, [sp, #32]
   136f0:	mov	r1, r4
   136f4:	bl	17cb0 <__assert_fail@plt+0x6568>
   136f8:	str	r0, [sp, #32]
   136fc:	str	r4, [sp, #44]	; 0x2c
   13700:	ldr	r4, [fp, #-40]	; 0xffffffd8
   13704:	cmp	r6, #0
   13708:	beq	1376c <__assert_fail@plt+0x2024>
   1370c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13710:	sub	r0, r6, r1
   13714:	add	r7, r0, #1
   13718:	orr	r0, r4, r5
   1371c:	clz	r0, r0
   13720:	lsr	r0, r0, #5
   13724:	mov	r2, r7
   13728:	bl	14804 <__assert_fail@plt+0x30bc>
   1372c:	ldr	r1, [sp, #40]	; 0x28
   13730:	subs	r0, r1, sl
   13734:	ldr	r2, [sp, #36]	; 0x24
   13738:	rscs	r0, r2, #0
   1373c:	subcs	r9, r9, r7
   13740:	mov	r0, r4
   13744:	sub	r4, r1, r7
   13748:	adds	r0, r0, r7
   1374c:	str	r0, [fp, #-40]	; 0xffffffd8
   13750:	adc	r5, r5, #0
   13754:	add	r0, r6, #1
   13758:	str	r0, [fp, #-32]	; 0xffffffe0
   1375c:	mov	r0, #0
   13760:	str	r0, [fp, #-36]	; 0xffffffdc
   13764:	mov	r7, #1
   13768:	b	137ec <__assert_fail@plt+0x20a4>
   1376c:	mov	r0, #0
   13770:	str	r0, [fp, #-36]	; 0xffffffdc
   13774:	mov	r7, #1
   13778:	ldr	r0, [sp, #28]
   1377c:	tst	r0, #1
   13780:	ldr	r1, [sp, #40]	; 0x28
   13784:	beq	13794 <__assert_fail@plt+0x204c>
   13788:	str	r4, [fp, #-40]	; 0xffffffd8
   1378c:	mov	r4, r1
   13790:	b	137e8 <__assert_fail@plt+0x20a0>
   13794:	cmp	r8, #0
   13798:	mov	r6, r1
   1379c:	movne	r6, r9
   137a0:	orr	r0, r4, r5
   137a4:	clz	r0, r0
   137a8:	lsr	r0, r0, #5
   137ac:	ldr	r7, [fp, #-32]	; 0xffffffe0
   137b0:	mov	r1, r7
   137b4:	mov	r2, r6
   137b8:	bl	14804 <__assert_fail@plt+0x30bc>
   137bc:	ldr	r1, [sp, #40]	; 0x28
   137c0:	add	r7, r7, r6
   137c4:	str	r7, [fp, #-32]	; 0xffffffe0
   137c8:	mov	r0, r4
   137cc:	sub	r4, r1, r6
   137d0:	adds	r0, r0, r6
   137d4:	str	r0, [fp, #-40]	; 0xffffffd8
   137d8:	adc	r5, r5, #0
   137dc:	cmp	r8, #0
   137e0:	movwne	r9, #0
   137e4:	mov	r7, #0
   137e8:	ldr	r2, [sp, #36]	; 0x24
   137ec:	subs	r0, r1, sl
   137f0:	rscs	r0, r2, #0
   137f4:	mov	r0, #0
   137f8:	movwcc	r0, #1
   137fc:	cmp	r4, #0
   13800:	mov	r1, r4
   13804:	movwne	r1, #1
   13808:	cmp	r9, #0
   1380c:	mov	r2, r9
   13810:	movwne	r2, #1
   13814:	cmp	r8, #0
   13818:	mov	r3, r8
   1381c:	movwne	r3, #1
   13820:	tst	r3, r2
   13824:	andseq	r0, r0, r1
   13828:	beq	135f8 <__assert_fail@plt+0x1eb0>
   1382c:	cmp	r8, #0
   13830:	moveq	r9, r4
   13834:	ldr	sl, [sp, #44]	; 0x2c
   13838:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1383c:	mov	r6, r0
   13840:	sub	r0, sl, r0
   13844:	cmp	r0, r9
   13848:	str	r7, [sp, #40]	; 0x28
   1384c:	bcs	13874 <__assert_fail@plt+0x212c>
   13850:	ldr	r0, [sp, #12]
   13854:	cmp	sl, r0
   13858:	ldr	r0, [sp, #32]
   1385c:	bhi	138fc <__assert_fail@plt+0x21b4>
   13860:	ldr	r1, [sp, #16]
   13864:	add	sl, sl, r1
   13868:	mov	r1, sl
   1386c:	bl	17cb0 <__assert_fail@plt+0x6568>
   13870:	b	13878 <__assert_fail@plt+0x2130>
   13874:	ldr	r0, [sp, #32]
   13878:	str	r0, [sp, #32]
   1387c:	mov	r7, r6
   13880:	add	r0, r0, r6
   13884:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13888:	mov	r1, r6
   1388c:	mov	r2, r9
   13890:	bl	11430 <memcpy@plt>
   13894:	add	r6, r6, r9
   13898:	str	r6, [fp, #-32]	; 0xffffffe0
   1389c:	sub	r6, r4, r9
   138a0:	add	r7, r9, r7
   138a4:	mov	r9, r7
   138a8:	ldr	r7, [sp, #40]	; 0x28
   138ac:	b	13604 <__assert_fail@plt+0x1ebc>
   138b0:	ldr	r0, [sp, #4]
   138b4:	cmp	r0, #0
   138b8:	ldr	r3, [sp, #16]
   138bc:	ldr	r8, [sp, #8]
   138c0:	bne	135c4 <__assert_fail@plt+0x1e7c>
   138c4:	mov	r0, r4
   138c8:	cmp	r9, #0
   138cc:	ldr	r4, [sp, #32]
   138d0:	beq	138ec <__assert_fail@plt+0x21a4>
   138d4:	orr	r0, r0, r5
   138d8:	clz	r0, r0
   138dc:	lsr	r0, r0, #5
   138e0:	mov	r1, r4
   138e4:	mov	r2, r9
   138e8:	bl	14804 <__assert_fail@plt+0x30bc>
   138ec:	mov	r0, r4
   138f0:	sub	sp, fp, #28
   138f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f8:	b	155fc <__assert_fail@plt+0x3eb4>
   138fc:	bl	17ff8 <__assert_fail@plt+0x68b0>
   13900:	bl	115f8 <__errno_location@plt>
   13904:	ldr	r4, [r0]
   13908:	movw	r0, #45944	; 0xb378
   1390c:	movt	r0, #2
   13910:	ldr	r2, [r0]
   13914:	mov	r0, #0
   13918:	mov	r1, #3
   1391c:	bl	16e54 <__assert_fail@plt+0x570c>
   13920:	mov	r3, r0
   13924:	movw	r2, #41418	; 0xa1ca
   13928:	movt	r2, #1
   1392c:	mov	r0, #1
   13930:	mov	r1, r4
   13934:	bl	11520 <error@plt>
   13938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1393c:	add	fp, sp, #28
   13940:	sub	sp, sp, #4
   13944:	mov	sl, r1
   13948:	mov	r7, r0
   1394c:	subs	r0, r0, #1
   13950:	sbc	r1, r1, #0
   13954:	subs	r0, r0, r2
   13958:	sbcs	r0, r1, r3
   1395c:	bcs	13b0c <__assert_fail@plt+0x23c4>
   13960:	mov	r5, r3
   13964:	mov	r6, r2
   13968:	ldr	r4, [fp, #28]
   1396c:	ldr	r0, [fp, #24]
   13970:	subs	r1, r0, r2
   13974:	sbcs	r1, r4, r3
   13978:	bcc	13b0c <__assert_fail@plt+0x23c4>
   1397c:	ldr	r8, [fp, #8]
   13980:	mov	r1, r4
   13984:	mov	r2, r6
   13988:	mov	r3, r5
   1398c:	bl	18f38 <__assert_fail@plt+0x77f0>
   13990:	umull	r9, r2, r0, r7
   13994:	mla	r2, r0, sl, r2
   13998:	eor	r3, r7, r6
   1399c:	eor	r6, sl, r5
   139a0:	orrs	r3, r3, r6
   139a4:	mlane	r4, r1, r7, r2
   139a8:	subs	r2, r7, #1
   139ac:	sbc	r7, sl, #0
   139b0:	umull	r6, r5, r0, r2
   139b4:	mla	r0, r0, r7, r5
   139b8:	mla	sl, r1, r2, r0
   139bc:	ldr	r2, [fp, #16]
   139c0:	cmp	r3, #0
   139c4:	ldr	r0, [fp, #24]
   139c8:	moveq	r9, r0
   139cc:	subs	r0, r6, r2
   139d0:	sbcs	r0, sl, #0
   139d4:	bge	139f0 <__assert_fail@plt+0x22a8>
   139d8:	add	r1, r8, r6
   139dc:	sub	r7, r2, r6
   139e0:	mov	r0, r8
   139e4:	mov	r2, r7
   139e8:	bl	1140c <memmove@plt>
   139ec:	b	13a24 <__assert_fail@plt+0x22dc>
   139f0:	mov	r0, #1
   139f4:	str	r0, [sp]
   139f8:	subs	r2, r6, r2
   139fc:	sbc	r3, sl, #0
   13a00:	mov	r0, #0
   13a04:	bl	114cc <lseek64@plt>
   13a08:	mvn	r7, #0
   13a0c:	cmn	r1, #1
   13a10:	bgt	13a24 <__assert_fail@plt+0x22dc>
   13a14:	b	13ad4 <__assert_fail@plt+0x238c>
   13a18:	adds	r6, r6, r5
   13a1c:	adc	sl, sl, #0
   13a20:	mvn	r7, #0
   13a24:	subs	r0, r6, r9
   13a28:	sbcs	r0, sl, r4
   13a2c:	bge	13acc <__assert_fail@plt+0x2384>
   13a30:	cmn	r7, #1
   13a34:	bne	13a54 <__assert_fail@plt+0x230c>
   13a38:	mov	r0, #0
   13a3c:	mov	r1, r8
   13a40:	ldr	r2, [fp, #12]
   13a44:	bl	173ac <__assert_fail@plt+0x5c64>
   13a48:	mov	r7, r0
   13a4c:	cmn	r0, #1
   13a50:	beq	13ad4 <__assert_fail@plt+0x238c>
   13a54:	cmp	r7, #0
   13a58:	beq	13acc <__assert_fail@plt+0x2384>
   13a5c:	subs	r5, r9, r6
   13a60:	sbc	r0, r4, sl
   13a64:	subs	r1, r7, r5
   13a68:	rscs	r0, r0, #0
   13a6c:	movlt	r5, r7
   13a70:	mov	r0, #1
   13a74:	mov	r1, r8
   13a78:	mov	r2, r5
   13a7c:	bl	156cc <__assert_fail@plt+0x3f84>
   13a80:	cmp	r0, r5
   13a84:	beq	13a18 <__assert_fail@plt+0x22d0>
   13a88:	bl	115f8 <__errno_location@plt>
   13a8c:	ldr	r7, [r0]
   13a90:	mov	r0, r7
   13a94:	bl	15120 <__assert_fail@plt+0x39d8>
   13a98:	cmp	r0, #0
   13a9c:	bne	13a18 <__assert_fail@plt+0x22d0>
   13aa0:	movw	r2, #41881	; 0xa399
   13aa4:	movt	r2, #1
   13aa8:	mov	r0, #0
   13aac:	mov	r1, #3
   13ab0:	bl	16e54 <__assert_fail@plt+0x570c>
   13ab4:	mov	r3, r0
   13ab8:	movw	r2, #41418	; 0xa1ca
   13abc:	movt	r2, #1
   13ac0:	mov	r0, #1
   13ac4:	mov	r1, r7
   13ac8:	bl	11520 <error@plt>
   13acc:	sub	sp, fp, #28
   13ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad4:	bl	115f8 <__errno_location@plt>
   13ad8:	ldr	r4, [r0]
   13adc:	movw	r0, #45944	; 0xb378
   13ae0:	movt	r0, #2
   13ae4:	ldr	r2, [r0]
   13ae8:	mov	r0, #0
   13aec:	mov	r1, #3
   13af0:	bl	16e54 <__assert_fail@plt+0x570c>
   13af4:	mov	r3, r0
   13af8:	movw	r2, #41418	; 0xa1ca
   13afc:	movt	r2, #1
   13b00:	mov	r0, #1
   13b04:	mov	r1, r4
   13b08:	bl	11520 <error@plt>
   13b0c:	movw	r0, #41109	; 0xa095
   13b10:	movt	r0, #1
   13b14:	movw	r1, #40679	; 0x9ee7
   13b18:	movt	r1, #1
   13b1c:	movw	r3, #41144	; 0xa0b8
   13b20:	movt	r3, #1
   13b24:	mov	r2, #996	; 0x3e4
   13b28:	bl	11748 <__assert_fail@plt>
   13b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b30:	add	fp, sp, #28
   13b34:	sub	sp, sp, #84	; 0x54
   13b38:	subs	r6, r2, #1
   13b3c:	sbc	r7, r3, #0
   13b40:	str	r2, [fp, #-44]	; 0xffffffd4
   13b44:	str	r0, [sp, #44]	; 0x2c
   13b48:	subs	r2, r2, r0
   13b4c:	str	r1, [sp, #48]	; 0x30
   13b50:	sbcs	r2, r3, r1
   13b54:	bcc	14048 <__assert_fail@plt+0x2900>
   13b58:	ldr	r9, [fp, #28]
   13b5c:	ldr	r4, [fp, #24]
   13b60:	subs	r0, r6, r4
   13b64:	sbcs	r0, r7, r9
   13b68:	bcs	14048 <__assert_fail@plt+0x2900>
   13b6c:	ldr	r6, [fp, #16]
   13b70:	mov	r0, r4
   13b74:	mov	r1, r9
   13b78:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13b7c:	str	r3, [sp, #56]	; 0x38
   13b80:	bl	18f38 <__assert_fail@plt+0x77f0>
   13b84:	subs	r2, r0, #1
   13b88:	str	r2, [sp, #28]
   13b8c:	sbc	r8, r1, #0
   13b90:	mov	ip, #0
   13b94:	ldr	r7, [sp, #44]	; 0x2c
   13b98:	subs	r2, r7, #2
   13b9c:	ldr	r2, [sp, #48]	; 0x30
   13ba0:	sbcs	r3, r2, #0
   13ba4:	str	r0, [sp, #52]	; 0x34
   13ba8:	str	r1, [sp, #32]
   13bac:	bcc	13c10 <__assert_fail@plt+0x24c8>
   13bb0:	subs	r3, r7, #1
   13bb4:	umull	r5, r7, r0, r3
   13bb8:	sbc	r2, r2, #0
   13bbc:	str	r2, [fp, #-32]	; 0xffffffe0
   13bc0:	mla	r0, r0, r2, r7
   13bc4:	str	r3, [sp, #24]
   13bc8:	mla	r1, r1, r3, r0
   13bcc:	subs	sl, r5, #1
   13bd0:	sbc	r5, r1, #0
   13bd4:	subs	r0, sl, r6
   13bd8:	sbcs	r0, r5, #0
   13bdc:	bge	13c28 <__assert_fail@plt+0x24e0>
   13be0:	ldr	r0, [fp, #8]
   13be4:	add	r1, r0, sl
   13be8:	sub	r6, r6, sl
   13bec:	mov	r2, r6
   13bf0:	bl	1140c <memmove@plt>
   13bf4:	str	sl, [sp, #28]
   13bf8:	mov	r8, r5
   13bfc:	ldr	r2, [sp, #48]	; 0x30
   13c00:	ldr	r7, [sp, #44]	; 0x2c
   13c04:	ldr	r3, [sp, #24]
   13c08:	mov	ip, #0
   13c0c:	b	13c64 <__assert_fail@plt+0x251c>
   13c10:	mov	r3, #1
   13c14:	mov	sl, #0
   13c18:	mov	r5, #0
   13c1c:	mov	r0, #0
   13c20:	str	r0, [fp, #-32]	; 0xffffffe0
   13c24:	b	13c64 <__assert_fail@plt+0x251c>
   13c28:	mov	r0, #1
   13c2c:	str	r0, [sp]
   13c30:	subs	r2, sl, r6
   13c34:	sbc	r3, r5, #0
   13c38:	mov	r0, #0
   13c3c:	bl	114cc <lseek64@plt>
   13c40:	mvn	r6, #0
   13c44:	cmn	r1, #1
   13c48:	str	sl, [sp, #28]
   13c4c:	mov	r8, r5
   13c50:	ldr	r2, [sp, #48]	; 0x30
   13c54:	ldr	r7, [sp, #44]	; 0x2c
   13c58:	ldr	r3, [sp, #24]
   13c5c:	mov	ip, #0
   13c60:	ble	14088 <__assert_fail@plt+0x2940>
   13c64:	str	sl, [fp, #-40]	; 0xffffffd8
   13c68:	subs	r0, sl, r4
   13c6c:	sbcs	r0, r5, r9
   13c70:	bge	13ff4 <__assert_fail@plt+0x28ac>
   13c74:	subs	r0, r4, #1
   13c78:	str	r0, [sp, #40]	; 0x28
   13c7c:	sbc	r0, r9, #0
   13c80:	str	r0, [sp, #36]	; 0x24
   13c84:	mov	ip, #0
   13c88:	mov	lr, #1
   13c8c:	mov	sl, #0
   13c90:	cmn	r6, #1
   13c94:	bne	13cdc <__assert_fail@plt+0x2594>
   13c98:	mov	r0, #0
   13c9c:	ldr	r1, [fp, #8]
   13ca0:	ldr	r2, [fp, #12]
   13ca4:	mov	r6, r3
   13ca8:	mov	r7, r5
   13cac:	str	lr, [sp, #12]
   13cb0:	mov	r5, ip
   13cb4:	bl	173ac <__assert_fail@plt+0x5c64>
   13cb8:	mov	ip, r5
   13cbc:	ldr	lr, [sp, #12]
   13cc0:	mov	r5, r7
   13cc4:	mov	r3, r6
   13cc8:	ldr	r7, [sp, #44]	; 0x2c
   13ccc:	ldr	r2, [sp, #48]	; 0x30
   13cd0:	mov	r6, r0
   13cd4:	cmn	r0, #1
   13cd8:	beq	14088 <__assert_fail@plt+0x2940>
   13cdc:	cmp	r6, #0
   13ce0:	beq	13ff8 <__assert_fail@plt+0x28b0>
   13ce4:	str	r3, [sp, #24]
   13ce8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13cec:	subs	r3, r4, r2
   13cf0:	sbc	r0, r9, r5
   13cf4:	subs	r1, r6, r3
   13cf8:	rscs	r0, r0, #0
   13cfc:	movlt	r3, r6
   13d00:	cmp	r3, #0
   13d04:	beq	13fac <__assert_fail@plt+0x2864>
   13d08:	ldr	sl, [fp, #8]
   13d0c:	add	r4, sl, r3
   13d10:	mov	r0, #0
   13d14:	str	r0, [sp, #8]
   13d18:	mov	r9, sl
   13d1c:	ldr	r6, [sp, #28]
   13d20:	str	r4, [fp, #-52]	; 0xffffffcc
   13d24:	b	13d48 <__assert_fail@plt+0x2600>
   13d28:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13d2c:	ldr	r3, [sp, #20]
   13d30:	ldr	r0, [sp, #16]
   13d34:	sub	r3, r3, r0
   13d38:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13d3c:	cmp	r9, r4
   13d40:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13d44:	beq	13fb8 <__assert_fail@plt+0x2870>
   13d48:	str	lr, [fp, #-36]	; 0xffffffdc
   13d4c:	mov	r7, r9
   13d50:	mov	sl, r2
   13d54:	str	r6, [sp, #28]
   13d58:	subs	r0, r6, r2
   13d5c:	mov	r9, r5
   13d60:	sbc	r1, r8, r5
   13d64:	rsbs	r2, r0, #0
   13d68:	rscs	r2, r1, #0
   13d6c:	mov	r2, #0
   13d70:	movwlt	r2, #1
   13d74:	cmp	r2, #0
   13d78:	moveq	r1, r2
   13d7c:	movne	r2, r0
   13d80:	subs	r0, r3, r2
   13d84:	rscs	r0, r1, #0
   13d88:	movlt	r2, r3
   13d8c:	add	r0, r7, r2
   13d90:	str	r3, [sp, #20]
   13d94:	sub	r2, r3, r2
   13d98:	movw	r1, #45400	; 0xb158
   13d9c:	movt	r1, #2
   13da0:	ldr	r1, [r1]
   13da4:	bl	11664 <memchr@plt>
   13da8:	mov	lr, r0
   13dac:	cmp	r0, #0
   13db0:	addne	r4, r0, #1
   13db4:	str	r4, [fp, #-48]	; 0xffffffd0
   13db8:	sub	r6, r4, r7
   13dbc:	movwne	lr, #1
   13dc0:	ldr	ip, [sp, #44]	; 0x2c
   13dc4:	ldr	r4, [sp, #24]
   13dc8:	eor	r0, r4, ip
   13dcc:	ldr	r3, [sp, #48]	; 0x30
   13dd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13dd4:	eor	r1, r2, r3
   13dd8:	orrs	r0, r0, r1
   13ddc:	bne	13e14 <__assert_fail@plt+0x26cc>
   13de0:	mov	r0, #1
   13de4:	mov	r1, r7
   13de8:	mov	r2, r6
   13dec:	mov	r4, lr
   13df0:	bl	156cc <__assert_fail@plt+0x3f84>
   13df4:	mov	lr, r4
   13df8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13dfc:	ldr	r4, [sp, #24]
   13e00:	ldr	ip, [sp, #44]	; 0x2c
   13e04:	ldr	r3, [sp, #48]	; 0x30
   13e08:	cmp	r0, r6
   13e0c:	beq	13e48 <__assert_fail@plt+0x2700>
   13e10:	b	14068 <__assert_fail@plt+0x2920>
   13e14:	orrs	r0, ip, r3
   13e18:	bne	13e48 <__assert_fail@plt+0x2700>
   13e1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13e20:	and	r0, r0, #1
   13e24:	mov	r1, r7
   13e28:	mov	r2, r6
   13e2c:	mov	r4, lr
   13e30:	bl	14804 <__assert_fail@plt+0x30bc>
   13e34:	mov	lr, r4
   13e38:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13e3c:	ldr	r4, [sp, #24]
   13e40:	ldr	ip, [sp, #44]	; 0x2c
   13e44:	ldr	r3, [sp, #48]	; 0x30
   13e48:	mov	r0, sl
   13e4c:	str	r6, [sp, #16]
   13e50:	adds	r0, sl, r6
   13e54:	mov	r5, r9
   13e58:	adc	r5, r9, #0
   13e5c:	str	r0, [fp, #-40]	; 0xffffffd8
   13e60:	ldr	r6, [sp, #28]
   13e64:	subs	r0, r6, r0
   13e68:	sbcs	r0, r8, r5
   13e6c:	mov	r0, #0
   13e70:	movwge	r0, #1
   13e74:	eor	r1, lr, #1
   13e78:	tst	r0, r1
   13e7c:	bne	13d28 <__assert_fail@plt+0x25e0>
   13e80:	str	r5, [fp, #-36]	; 0xffffffdc
   13e84:	str	lr, [sp, #12]
   13e88:	mov	r7, lr
   13e8c:	ldr	lr, [sp, #32]
   13e90:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13e94:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13e98:	cmp	r9, r0
   13e9c:	tsteq	r7, #1
   13ea0:	beq	13f90 <__assert_fail@plt+0x2848>
   13ea4:	adds	r4, r4, #1
   13ea8:	adc	r2, r2, #0
   13eac:	orrs	r1, ip, r3
   13eb0:	beq	13ec0 <__assert_fail@plt+0x2778>
   13eb4:	subs	r0, ip, r4
   13eb8:	sbcs	r0, r3, r2
   13ebc:	bcc	14040 <__assert_fail@plt+0x28f8>
   13ec0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ec4:	eor	r0, r4, r0
   13ec8:	str	r2, [fp, #-32]	; 0xffffffe0
   13ecc:	ldr	r5, [sp, #56]	; 0x38
   13ed0:	eor	r2, r2, r5
   13ed4:	orr	r0, r0, r2
   13ed8:	ldr	r2, [sp, #52]	; 0x34
   13edc:	adds	r6, r6, r2
   13ee0:	adc	r8, r8, lr
   13ee4:	cmp	r0, #0
   13ee8:	ldr	r0, [sp, #36]	; 0x24
   13eec:	moveq	r8, r0
   13ef0:	ldr	r0, [sp, #40]	; 0x28
   13ef4:	moveq	r6, r0
   13ef8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13efc:	subs	r0, r6, r2
   13f00:	ldr	r9, [fp, #-36]	; 0xffffffdc
   13f04:	sbcs	r0, r8, r9
   13f08:	mov	r0, #0
   13f0c:	movwlt	r0, #1
   13f10:	and	r0, r7, r0
   13f14:	cmp	r1, #0
   13f18:	bne	13f58 <__assert_fail@plt+0x2810>
   13f1c:	mov	sl, r6
   13f20:	subs	r1, r6, r2
   13f24:	sbcs	r1, r8, r9
   13f28:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13f2c:	bge	13f60 <__assert_fail@plt+0x2818>
   13f30:	mov	r0, #1
   13f34:	mov	r1, #0
   13f38:	mov	r2, #0
   13f3c:	bl	14804 <__assert_fail@plt+0x30bc>
   13f40:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13f44:	ldr	lr, [sp, #32]
   13f48:	ldr	ip, [sp, #44]	; 0x2c
   13f4c:	ldr	r3, [sp, #48]	; 0x30
   13f50:	mov	r0, r7
   13f54:	b	13f60 <__assert_fail@plt+0x2818>
   13f58:	mov	sl, r6
   13f5c:	ldr	r9, [fp, #-48]	; 0xffffffd0
   13f60:	mov	r6, sl
   13f64:	subs	r1, sl, r2
   13f68:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13f6c:	sbcs	r1, r8, r1
   13f70:	mov	r7, r0
   13f74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f78:	blt	13e94 <__assert_fail@plt+0x274c>
   13f7c:	tst	r0, #1
   13f80:	mov	r7, r0
   13f84:	bne	13e94 <__assert_fail@plt+0x274c>
   13f88:	str	r4, [sp, #24]
   13f8c:	b	13fa0 <__assert_fail@plt+0x2858>
   13f90:	str	r2, [fp, #-32]	; 0xffffffe0
   13f94:	str	r4, [sp, #24]
   13f98:	mov	r0, #1
   13f9c:	str	r0, [sp, #8]
   13fa0:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13fa4:	ldr	lr, [sp, #12]
   13fa8:	b	13d2c <__assert_fail@plt+0x25e4>
   13fac:	mov	r0, #0
   13fb0:	str	r0, [sp, #8]
   13fb4:	ldr	r6, [sp, #28]
   13fb8:	str	r6, [sp, #28]
   13fbc:	ldr	r0, [sp, #8]
   13fc0:	and	ip, r0, #1
   13fc4:	mvn	r6, #0
   13fc8:	ldr	r4, [fp, #24]
   13fcc:	str	r2, [fp, #-40]	; 0xffffffd8
   13fd0:	subs	r0, r2, r4
   13fd4:	ldr	r9, [fp, #28]
   13fd8:	sbcs	r0, r5, r9
   13fdc:	ldr	r2, [sp, #48]	; 0x30
   13fe0:	ldr	r7, [sp, #44]	; 0x2c
   13fe4:	ldr	r3, [sp, #24]
   13fe8:	mov	sl, #0
   13fec:	blt	13c90 <__assert_fail@plt+0x2548>
   13ff0:	b	13ff8 <__assert_fail@plt+0x28b0>
   13ff4:	mov	sl, #0
   13ff8:	adds	r4, r3, ip
   13ffc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14000:	adc	r5, r0, sl
   14004:	orrs	r6, r7, r2
   14008:	ldr	r7, [sp, #56]	; 0x38
   1400c:	bne	14040 <__assert_fail@plt+0x28f8>
   14010:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14014:	subs	r0, r0, r4
   14018:	sbcs	r0, r7, r5
   1401c:	bcc	14040 <__assert_fail@plt+0x28f8>
   14020:	mov	r0, #1
   14024:	mov	r1, #0
   14028:	mov	r2, #0
   1402c:	bl	14804 <__assert_fail@plt+0x30bc>
   14030:	adds	r4, r4, #1
   14034:	adc	r5, r5, #0
   14038:	cmp	r6, #0
   1403c:	beq	14010 <__assert_fail@plt+0x28c8>
   14040:	sub	sp, fp, #28
   14044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14048:	movw	r0, #41114	; 0xa09a
   1404c:	movt	r0, #1
   14050:	movw	r1, #40679	; 0x9ee7
   14054:	movt	r1, #1
   14058:	movw	r3, #41222	; 0xa106
   1405c:	movt	r3, #1
   14060:	movw	r2, #867	; 0x363
   14064:	bl	11748 <__assert_fail@plt>
   14068:	bl	115f8 <__errno_location@plt>
   1406c:	ldr	r4, [r0]
   14070:	movw	r1, #41298	; 0xa152
   14074:	movt	r1, #1
   14078:	mov	r0, #0
   1407c:	mov	r2, #5
   14080:	bl	11460 <dcgettext@plt>
   14084:	b	140a8 <__assert_fail@plt+0x2960>
   14088:	bl	115f8 <__errno_location@plt>
   1408c:	ldr	r4, [r0]
   14090:	movw	r0, #45944	; 0xb378
   14094:	movt	r0, #2
   14098:	ldr	r2, [r0]
   1409c:	mov	r0, #0
   140a0:	mov	r1, #3
   140a4:	bl	16e54 <__assert_fail@plt+0x570c>
   140a8:	mov	r3, r0
   140ac:	movw	r2, #41418	; 0xa1ca
   140b0:	movt	r2, #1
   140b4:	mov	r0, #1
   140b8:	mov	r1, r4
   140bc:	bl	11520 <error@plt>
   140c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140c4:	add	fp, sp, #28
   140c8:	sub	sp, sp, #60	; 0x3c
   140cc:	mov	sl, r3
   140d0:	mov	r6, r2
   140d4:	str	r1, [sp, #16]
   140d8:	str	r0, [sp, #12]
   140dc:	orrs	r0, r0, r1
   140e0:	str	r0, [sp, #44]	; 0x2c
   140e4:	bne	14158 <__assert_fail@plt+0x2a10>
   140e8:	cmp	sl, #0
   140ec:	bne	14550 <__assert_fail@plt+0x2e08>
   140f0:	ldr	r4, [fp, #16]
   140f4:	mov	r0, r6
   140f8:	mov	r1, #16
   140fc:	bl	17d0c <__assert_fail@plt+0x65c4>
   14100:	str	r0, [sp, #40]	; 0x28
   14104:	str	r0, [r4]
   14108:	orrs	r0, r6, sl
   1410c:	beq	14158 <__assert_fail@plt+0x2a10>
   14110:	mov	r4, #0
   14114:	movw	r8, #46348	; 0xb50c
   14118:	movt	r8, #2
   1411c:	mvn	r9, #0
   14120:	mov	r7, #0
   14124:	ldr	r5, [sp, #40]	; 0x28
   14128:	bl	1490c <__assert_fail@plt+0x31c4>
   1412c:	ldr	r0, [r8]
   14130:	bl	17fd8 <__assert_fail@plt+0x6890>
   14134:	mov	r1, r5
   14138:	str	r0, [r1, r7, lsl #4]!
   1413c:	str	r9, [r1, #4]
   14140:	str	r4, [r1, #8]
   14144:	str	r4, [r1, #12]
   14148:	add	r7, r7, #1
   1414c:	subs	r0, r7, r6
   14150:	rscs	r0, sl, #0
   14154:	bcc	14128 <__assert_fail@plt+0x29e0>
   14158:	str	sl, [sp, #20]
   1415c:	mov	r0, #1
   14160:	str	r0, [fp, #-32]	; 0xffffffe0
   14164:	mov	r0, #0
   14168:	str	r0, [fp, #-36]	; 0xffffffdc
   1416c:	mov	r0, #0
   14170:	str	r0, [fp, #-40]	; 0xffffffd8
   14174:	mov	r0, #0
   14178:	str	r0, [sp, #32]
   1417c:	mov	r0, #0
   14180:	str	r0, [sp, #28]
   14184:	mov	r0, #0
   14188:	str	r0, [sp, #4]
   1418c:	str	r6, [sp, #36]	; 0x24
   14190:	ldr	r5, [sp, #40]	; 0x28
   14194:	mov	r0, #0
   14198:	ldr	r1, [fp, #8]
   1419c:	ldr	r2, [fp, #12]
   141a0:	bl	173ac <__assert_fail@plt+0x5c64>
   141a4:	cmp	r0, #0
   141a8:	beq	14414 <__assert_fail@plt+0x2ccc>
   141ac:	cmn	r0, #1
   141b0:	beq	14518 <__assert_fail@plt+0x2dd0>
   141b4:	ldr	r9, [fp, #8]
   141b8:	add	r8, r9, r0
   141bc:	str	r8, [sp, #8]
   141c0:	b	141d0 <__assert_fail@plt+0x2a88>
   141c4:	str	r2, [sp, #28]
   141c8:	cmp	r9, r8
   141cc:	beq	14194 <__assert_fail@plt+0x2a4c>
   141d0:	mov	r7, r9
   141d4:	sub	r2, r8, r9
   141d8:	movw	r0, #45400	; 0xb158
   141dc:	movt	r0, #2
   141e0:	ldr	r1, [r0]
   141e4:	mov	r0, r9
   141e8:	bl	11664 <memchr@plt>
   141ec:	mov	sl, r0
   141f0:	cmp	r0, #0
   141f4:	mov	r9, r8
   141f8:	addne	r9, r0, #1
   141fc:	sub	r4, r9, r7
   14200:	ldr	r0, [sp, #44]	; 0x2c
   14204:	cmp	r0, #0
   14208:	beq	1425c <__assert_fail@plt+0x2b14>
   1420c:	ldr	r0, [sp, #12]
   14210:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14214:	eor	r0, r1, r0
   14218:	ldr	r1, [sp, #16]
   1421c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14220:	eor	r1, r2, r1
   14224:	orrs	r0, r0, r1
   14228:	bne	143c8 <__assert_fail@plt+0x2c80>
   1422c:	movw	r0, #45960	; 0xb388
   14230:	movt	r0, #2
   14234:	ldrb	r0, [r0]
   14238:	cmp	r0, #1
   1423c:	bne	143a4 <__assert_fail@plt+0x2c5c>
   14240:	mov	r0, #1
   14244:	mov	r1, r7
   14248:	mov	r2, r4
   1424c:	bl	156cc <__assert_fail@plt+0x3f84>
   14250:	cmp	r0, r4
   14254:	beq	143c8 <__assert_fail@plt+0x2c80>
   14258:	b	144f8 <__assert_fail@plt+0x2db0>
   1425c:	mov	r0, r5
   14260:	mov	r8, r5
   14264:	ldr	r5, [fp, #-40]	; 0xffffffd8
   14268:	mov	r1, r5
   1426c:	mov	r2, r6
   14270:	bl	15148 <__assert_fail@plt+0x3a00>
   14274:	mov	r2, r0
   14278:	movw	r0, #45960	; 0xb388
   1427c:	movt	r0, #2
   14280:	ldrb	r0, [r0]
   14284:	cmp	r0, #1
   14288:	str	r2, [sp, #24]
   1428c:	add	r0, r8, r5, lsl #4
   14290:	bne	142b4 <__assert_fail@plt+0x2b6c>
   14294:	ldr	r0, [r0, #4]
   14298:	mov	r1, r7
   1429c:	mov	r2, r4
   142a0:	bl	156cc <__assert_fail@plt+0x3f84>
   142a4:	cmp	r0, r4
   142a8:	ldr	r8, [sp, #8]
   142ac:	bne	142d4 <__assert_fail@plt+0x2b8c>
   142b0:	b	142ec <__assert_fail@plt+0x2ba4>
   142b4:	ldr	r3, [r0, #8]
   142b8:	mov	r0, r7
   142bc:	mov	r1, r4
   142c0:	mov	r2, #1
   142c4:	bl	11454 <fwrite_unlocked@plt>
   142c8:	cmp	r0, #1
   142cc:	ldr	r8, [sp, #8]
   142d0:	beq	142ec <__assert_fail@plt+0x2ba4>
   142d4:	bl	115f8 <__errno_location@plt>
   142d8:	ldr	r4, [r0]
   142dc:	mov	r0, r4
   142e0:	bl	15120 <__assert_fail@plt+0x39d8>
   142e4:	cmp	r0, #0
   142e8:	beq	144c4 <__assert_fail@plt+0x2d7c>
   142ec:	ldr	r6, [sp, #32]
   142f0:	ldr	r0, [sp, #24]
   142f4:	orr	r6, r6, r0
   142f8:	bl	115f8 <__errno_location@plt>
   142fc:	mov	r4, r0
   14300:	ldr	r0, [r0]
   14304:	bl	15120 <__assert_fail@plt+0x39d8>
   14308:	mov	r7, r0
   1430c:	str	r6, [sp, #32]
   14310:	tst	r6, #1
   14314:	ldr	r6, [sp, #36]	; 0x24
   14318:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1431c:	beq	14354 <__assert_fail@plt+0x2c0c>
   14320:	ldr	r0, [sp, #40]	; 0x28
   14324:	add	r5, r0, r1, lsl #4
   14328:	mov	r6, r5
   1432c:	ldr	r0, [r6, #8]!
   14330:	bl	15450 <__assert_fail@plt+0x3d08>
   14334:	cmp	r0, #0
   14338:	bne	144d4 <__assert_fail@plt+0x2d8c>
   1433c:	mov	r0, #0
   14340:	str	r0, [r6]
   14344:	mvn	r0, #1
   14348:	str	r0, [r5, #4]
   1434c:	ldr	r6, [sp, #36]	; 0x24
   14350:	ldr	r1, [fp, #-40]	; 0xffffffd8
   14354:	eor	r0, r7, #1
   14358:	ldr	r2, [sp, #28]
   1435c:	orr	r2, r2, r0
   14360:	cmp	sl, #0
   14364:	ldr	r5, [sp, #40]	; 0x28
   14368:	beq	141c4 <__assert_fail@plt+0x2a7c>
   1436c:	add	r7, r1, #1
   14370:	eor	r0, r7, r6
   14374:	ldr	r1, [sp, #20]
   14378:	orrs	r0, r0, r1
   1437c:	bne	14408 <__assert_fail@plt+0x2cc0>
   14380:	mov	r0, #1
   14384:	str	r0, [sp, #4]
   14388:	mov	r0, #0
   1438c:	str	r0, [fp, #-40]	; 0xffffffd8
   14390:	tst	r2, #1
   14394:	mov	r0, #0
   14398:	str	r0, [sp, #28]
   1439c:	bne	141c8 <__assert_fail@plt+0x2a80>
   143a0:	b	14418 <__assert_fail@plt+0x2cd0>
   143a4:	movw	r0, #45932	; 0xb36c
   143a8:	movt	r0, #2
   143ac:	ldr	r3, [r0]
   143b0:	mov	r0, r7
   143b4:	mov	r1, r4
   143b8:	mov	r2, #1
   143bc:	bl	11454 <fwrite_unlocked@plt>
   143c0:	cmp	r0, #1
   143c4:	bne	144e8 <__assert_fail@plt+0x2da0>
   143c8:	cmp	sl, #0
   143cc:	beq	141c8 <__assert_fail@plt+0x2a80>
   143d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143d4:	eor	r0, r2, r6
   143d8:	ldr	r1, [sp, #20]
   143dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143e0:	eor	r1, r3, r1
   143e4:	orr	r0, r0, r1
   143e8:	adds	r2, r2, #1
   143ec:	adc	r3, r3, #0
   143f0:	cmp	r0, #0
   143f4:	moveq	r3, r0
   143f8:	str	r3, [fp, #-36]	; 0xffffffdc
   143fc:	movweq	r2, #1
   14400:	str	r2, [fp, #-32]	; 0xffffffe0
   14404:	b	141c8 <__assert_fail@plt+0x2a80>
   14408:	str	r2, [sp, #28]
   1440c:	str	r7, [fp, #-40]	; 0xffffffd8
   14410:	b	141c8 <__assert_fail@plt+0x2a80>
   14414:	ldr	r7, [fp, #-40]	; 0xffffffd8
   14418:	ldr	r0, [sp, #44]	; 0x2c
   1441c:	cmp	r0, #0
   14420:	ldr	r5, [sp, #20]
   14424:	bne	144bc <__assert_fail@plt+0x2d74>
   14428:	ldr	r0, [sp, #4]
   1442c:	tst	r0, #1
   14430:	movne	r7, r6
   14434:	orrs	r0, r6, r5
   14438:	beq	144bc <__assert_fail@plt+0x2d74>
   1443c:	mov	r4, #0
   14440:	mvn	r9, #1
   14444:	movw	r8, #45968	; 0xb390
   14448:	movt	r8, #2
   1444c:	cmp	r4, r7
   14450:	bcc	14494 <__assert_fail@plt+0x2d4c>
   14454:	b	14478 <__assert_fail@plt+0x2d30>
   14458:	str	r9, [r6, #4]
   1445c:	add	r4, r4, #1
   14460:	ldr	r6, [sp, #36]	; 0x24
   14464:	subs	r0, r4, r6
   14468:	rscs	r0, r5, #0
   1446c:	bcs	144bc <__assert_fail@plt+0x2d74>
   14470:	cmp	r4, r7
   14474:	bcc	14494 <__assert_fail@plt+0x2d4c>
   14478:	ldrb	r0, [r8]
   1447c:	cmp	r0, #0
   14480:	bne	14494 <__assert_fail@plt+0x2d4c>
   14484:	ldr	r0, [sp, #40]	; 0x28
   14488:	mov	r1, r4
   1448c:	mov	r2, r6
   14490:	bl	15148 <__assert_fail@plt+0x3a00>
   14494:	ldr	r2, [sp, #40]	; 0x28
   14498:	add	r6, r2, r4, lsl #4
   1449c:	ldr	r1, [r6, #4]
   144a0:	cmp	r1, #0
   144a4:	bmi	14458 <__assert_fail@plt+0x2d10>
   144a8:	ldr	r3, [r2, r4, lsl #4]!
   144ac:	ldr	r0, [r2, #8]
   144b0:	ldr	r2, [r2, #12]
   144b4:	bl	14554 <__assert_fail@plt+0x2e0c>
   144b8:	b	14458 <__assert_fail@plt+0x2d10>
   144bc:	sub	sp, fp, #28
   144c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c4:	ldr	r0, [sp, #40]	; 0x28
   144c8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   144cc:	ldr	r2, [r0, r1, lsl #4]
   144d0:	b	1452c <__assert_fail@plt+0x2de4>
   144d4:	ldr	r0, [sp, #40]	; 0x28
   144d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   144dc:	ldr	r2, [r0, r1, lsl #4]
   144e0:	ldr	r4, [r4]
   144e4:	b	1452c <__assert_fail@plt+0x2de4>
   144e8:	movw	r0, #45932	; 0xb36c
   144ec:	movt	r0, #2
   144f0:	ldr	r0, [r0]
   144f4:	bl	116e8 <clearerr_unlocked@plt>
   144f8:	bl	115f8 <__errno_location@plt>
   144fc:	ldr	r4, [r0]
   14500:	movw	r1, #41298	; 0xa152
   14504:	movt	r1, #1
   14508:	mov	r0, #0
   1450c:	mov	r2, #5
   14510:	bl	11460 <dcgettext@plt>
   14514:	b	14538 <__assert_fail@plt+0x2df0>
   14518:	bl	115f8 <__errno_location@plt>
   1451c:	ldr	r4, [r0]
   14520:	movw	r0, #45944	; 0xb378
   14524:	movt	r0, #2
   14528:	ldr	r2, [r0]
   1452c:	mov	r0, #0
   14530:	mov	r1, #3
   14534:	bl	16e54 <__assert_fail@plt+0x570c>
   14538:	mov	r3, r0
   1453c:	movw	r2, #41418	; 0xa1ca
   14540:	movt	r2, #1
   14544:	mov	r0, #1
   14548:	mov	r1, r4
   1454c:	bl	11520 <error@plt>
   14550:	bl	17ff8 <__assert_fail@plt+0x68b0>
   14554:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14558:	add	fp, sp, #24
   1455c:	sub	sp, sp, #32
   14560:	mov	r8, r3
   14564:	mov	r5, r2
   14568:	mov	r6, r1
   1456c:	mov	r7, r0
   14570:	cmp	r0, #0
   14574:	beq	145a0 <__assert_fail@plt+0x2e58>
   14578:	mov	r0, r7
   1457c:	bl	15450 <__assert_fail@plt+0x3d08>
   14580:	cmp	r0, #0
   14584:	beq	145a0 <__assert_fail@plt+0x2e58>
   14588:	bl	115f8 <__errno_location@plt>
   1458c:	ldr	r4, [r0]
   14590:	mov	r0, r4
   14594:	bl	15120 <__assert_fail@plt+0x39d8>
   14598:	cmp	r0, #0
   1459c:	beq	14794 <__assert_fail@plt+0x304c>
   145a0:	cmp	r6, #0
   145a4:	bmi	14624 <__assert_fail@plt+0x2edc>
   145a8:	cmp	r7, #0
   145ac:	bne	145c0 <__assert_fail@plt+0x2e78>
   145b0:	mov	r0, r6
   145b4:	bl	11730 <close@plt>
   145b8:	cmn	r0, #1
   145bc:	ble	1478c <__assert_fail@plt+0x3044>
   145c0:	movw	r0, #46376	; 0xb528
   145c4:	movt	r0, #2
   145c8:	ldr	r1, [r0]
   145cc:	cmp	r1, #0
   145d0:	beq	14624 <__assert_fail@plt+0x2edc>
   145d4:	movw	r2, #46380	; 0xb52c
   145d8:	movt	r2, #2
   145dc:	ldr	r2, [r2]
   145e0:	ldr	r7, [r2]
   145e4:	mov	r3, #0
   145e8:	cmp	r7, r6
   145ec:	beq	14614 <__assert_fail@plt+0x2ecc>
   145f0:	ldr	r1, [r0]
   145f4:	mov	r3, #1
   145f8:	cmp	r3, r1
   145fc:	bcs	14624 <__assert_fail@plt+0x2edc>
   14600:	ldr	r7, [r2, r3, lsl #2]
   14604:	add	r3, r3, #1
   14608:	cmp	r7, r6
   1460c:	bne	145f8 <__assert_fail@plt+0x2eb0>
   14610:	sub	r3, r3, #1
   14614:	sub	r1, r1, #1
   14618:	str	r1, [r0]
   1461c:	ldr	r0, [r2, r1, lsl #2]
   14620:	str	r0, [r2, r3, lsl #2]
   14624:	cmp	r5, #1
   14628:	blt	1475c <__assert_fail@plt+0x3014>
   1462c:	mov	r0, #0
   14630:	str	r0, [sp, #28]
   14634:	add	r1, sp, #28
   14638:	mov	r0, r5
   1463c:	mov	r2, #0
   14640:	bl	114d8 <waitpid@plt>
   14644:	cmn	r0, #1
   14648:	bne	1465c <__assert_fail@plt+0x2f14>
   1464c:	bl	115f8 <__errno_location@plt>
   14650:	ldr	r4, [r0]
   14654:	cmp	r4, #10
   14658:	bne	147bc <__assert_fail@plt+0x3074>
   1465c:	ldr	r0, [sp, #28]
   14660:	and	r5, r0, #127	; 0x7f
   14664:	mov	r1, #16777216	; 0x1000000
   14668:	add	r1, r1, r5, lsl #24
   1466c:	cmp	r1, #33554432	; 0x2000000
   14670:	blt	146f8 <__assert_fail@plt+0x2fb0>
   14674:	cmp	r5, #13
   14678:	beq	1475c <__assert_fail@plt+0x3014>
   1467c:	add	r6, sp, #9
   14680:	mov	r0, r5
   14684:	mov	r1, r6
   14688:	bl	17660 <__assert_fail@plt+0x5f18>
   1468c:	cmp	r0, #0
   14690:	beq	146b0 <__assert_fail@plt+0x2f68>
   14694:	str	r5, [sp]
   14698:	add	r0, sp, #9
   1469c:	movw	r3, #41338	; 0xa17a
   146a0:	movt	r3, #1
   146a4:	mov	r1, #1
   146a8:	mov	r2, #19
   146ac:	bl	11604 <__sprintf_chk@plt>
   146b0:	movw	r1, #41341	; 0xa17d
   146b4:	movt	r1, #1
   146b8:	mov	r0, #0
   146bc:	mov	r2, #5
   146c0:	bl	11460 <dcgettext@plt>
   146c4:	mov	r4, r0
   146c8:	mov	r0, #0
   146cc:	mov	r1, #3
   146d0:	mov	r2, r8
   146d4:	bl	16e54 <__assert_fail@plt+0x570c>
   146d8:	mov	r3, r0
   146dc:	movw	r0, #45972	; 0xb394
   146e0:	movt	r0, #2
   146e4:	ldr	r0, [r0]
   146e8:	str	r6, [sp]
   146ec:	str	r0, [sp, #4]
   146f0:	orr	r0, r5, #128	; 0x80
   146f4:	b	14750 <__assert_fail@plt+0x3008>
   146f8:	cmp	r5, #0
   146fc:	bne	14764 <__assert_fail@plt+0x301c>
   14700:	ubfx	r5, r0, #8, #8
   14704:	cmp	r5, #0
   14708:	beq	1475c <__assert_fail@plt+0x3014>
   1470c:	movw	r1, #41382	; 0xa1a6
   14710:	movt	r1, #1
   14714:	mov	r0, #0
   14718:	mov	r2, #5
   1471c:	bl	11460 <dcgettext@plt>
   14720:	mov	r4, r0
   14724:	mov	r0, #0
   14728:	mov	r1, #3
   1472c:	mov	r2, r8
   14730:	bl	16e54 <__assert_fail@plt+0x570c>
   14734:	mov	r3, r0
   14738:	movw	r0, #45972	; 0xb394
   1473c:	movt	r0, #2
   14740:	ldr	r0, [r0]
   14744:	str	r5, [sp]
   14748:	str	r0, [sp, #4]
   1474c:	mov	r0, r5
   14750:	mov	r1, #0
   14754:	mov	r2, r4
   14758:	bl	11520 <error@plt>
   1475c:	sub	sp, fp, #24
   14760:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14764:	movw	r1, #41421	; 0xa1cd
   14768:	movt	r1, #1
   1476c:	mov	r0, #0
   14770:	mov	r2, #5
   14774:	bl	11460 <dcgettext@plt>
   14778:	mov	r2, r0
   1477c:	ldr	r3, [sp, #28]
   14780:	mov	r0, #1
   14784:	mov	r1, #0
   14788:	bl	11520 <error@plt>
   1478c:	bl	115f8 <__errno_location@plt>
   14790:	ldr	r4, [r0]
   14794:	mov	r0, #0
   14798:	mov	r1, #3
   1479c:	mov	r2, r8
   147a0:	bl	16e54 <__assert_fail@plt+0x570c>
   147a4:	mov	r3, r0
   147a8:	movw	r2, #41418	; 0xa1ca
   147ac:	movt	r2, #1
   147b0:	mov	r0, #1
   147b4:	mov	r1, r4
   147b8:	bl	11520 <error@plt>
   147bc:	movw	r1, #41312	; 0xa160
   147c0:	movt	r1, #1
   147c4:	mov	r0, #0
   147c8:	mov	r2, #5
   147cc:	bl	11460 <dcgettext@plt>
   147d0:	mov	r2, r0
   147d4:	mov	r0, #1
   147d8:	mov	r1, r4
   147dc:	bl	11520 <error@plt>
   147e0:	movw	r0, #45984	; 0xb3a0
   147e4:	movt	r0, #2
   147e8:	ldr	r0, [r0, #16]
   147ec:	and	r0, r0, #53248	; 0xd000
   147f0:	orr	r0, r0, #8192	; 0x2000
   147f4:	cmp	r0, #40960	; 0xa000
   147f8:	moveq	r0, #1
   147fc:	movne	r0, #0
   14800:	bx	lr
   14804:	push	{r4, r5, r6, r7, fp, lr}
   14808:	add	fp, sp, #16
   1480c:	mov	r4, r2
   14810:	mov	r5, r1
   14814:	cmp	r0, #0
   14818:	movw	r6, #45408	; 0xb160
   1481c:	movt	r6, #2
   14820:	beq	1486c <__assert_fail@plt+0x3124>
   14824:	cmp	r5, #0
   14828:	cmpeq	r4, #0
   1482c:	beq	148e0 <__assert_fail@plt+0x3198>
   14830:	movw	r7, #46348	; 0xb50c
   14834:	movt	r7, #2
   14838:	ldr	r3, [r7]
   1483c:	movw	r0, #46344	; 0xb508
   14840:	movt	r0, #2
   14844:	ldr	r2, [r0]
   14848:	ldr	r1, [r6]
   1484c:	mov	r0, #0
   14850:	bl	14554 <__assert_fail@plt+0x2e0c>
   14854:	bl	1490c <__assert_fail@plt+0x31c4>
   14858:	ldr	r0, [r7]
   1485c:	bl	14c6c <__assert_fail@plt+0x3524>
   14860:	str	r0, [r6]
   14864:	cmn	r0, #1
   14868:	ble	148fc <__assert_fail@plt+0x31b4>
   1486c:	ldr	r0, [r6]
   14870:	mov	r1, r5
   14874:	mov	r2, r4
   14878:	bl	156cc <__assert_fail@plt+0x3f84>
   1487c:	mov	r1, r0
   14880:	mov	r0, #1
   14884:	cmp	r1, r4
   14888:	bne	14890 <__assert_fail@plt+0x3148>
   1488c:	pop	{r4, r5, r6, r7, fp, pc}
   14890:	bl	115f8 <__errno_location@plt>
   14894:	ldr	r4, [r0]
   14898:	mov	r0, r4
   1489c:	bl	15120 <__assert_fail@plt+0x39d8>
   148a0:	mov	r1, r0
   148a4:	mov	r0, #0
   148a8:	cmp	r1, #0
   148ac:	popne	{r4, r5, r6, r7, fp, pc}
   148b0:	movw	r0, #46348	; 0xb50c
   148b4:	movt	r0, #2
   148b8:	ldr	r2, [r0]
   148bc:	mov	r0, #0
   148c0:	mov	r1, #3
   148c4:	bl	16e54 <__assert_fail@plt+0x570c>
   148c8:	mov	r3, r0
   148cc:	movw	r2, #41418	; 0xa1ca
   148d0:	movt	r2, #1
   148d4:	mov	r0, #1
   148d8:	mov	r1, r4
   148dc:	bl	11520 <error@plt>
   148e0:	movw	r0, #45968	; 0xb390
   148e4:	movt	r0, #2
   148e8:	ldrb	r1, [r0]
   148ec:	mov	r0, #1
   148f0:	cmp	r1, #0
   148f4:	beq	14830 <__assert_fail@plt+0x30e8>
   148f8:	b	1488c <__assert_fail@plt+0x3144>
   148fc:	bl	115f8 <__errno_location@plt>
   14900:	ldr	r4, [r0]
   14904:	ldr	r2, [r7]
   14908:	b	148bc <__assert_fail@plt+0x3174>
   1490c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14910:	add	fp, sp, #28
   14914:	sub	sp, sp, #4
   14918:	movw	r0, #46348	; 0xb50c
   1491c:	movt	r0, #2
   14920:	ldr	sl, [r0]
   14924:	cmp	sl, #0
   14928:	movw	r1, #46372	; 0xb524
   1492c:	movt	r1, #2
   14930:	movw	r2, #45404	; 0xb15c
   14934:	movt	r2, #2
   14938:	movw	r3, #46356	; 0xb514
   1493c:	movt	r3, #2
   14940:	beq	14a08 <__assert_fail@plt+0x32c0>
   14944:	movw	r0, #45952	; 0xb380
   14948:	movt	r0, #2
   1494c:	ldr	r0, [r0]
   14950:	cmp	r0, #0
   14954:	beq	149e4 <__assert_fail@plt+0x329c>
   14958:	rsb	r4, r0, #1
   1495c:	ldr	r1, [r1]
   14960:	ldr	r2, [r2]
   14964:	ldr	r3, [r3]
   14968:	movw	r7, #46352	; 0xb510
   1496c:	movt	r7, #2
   14970:	ldrb	r7, [r7]
   14974:	eor	r7, r7, #1
   14978:	mvn	r5, r7
   1497c:	mov	r6, #0
   14980:	ldr	r7, [r3, -r4, lsl #2]
   14984:	add	r7, r7, #1
   14988:	str	r7, [r3, -r4, lsl #2]
   1498c:	cmp	r4, #0
   14990:	mov	r0, r4
   14994:	movwne	r0, #1
   14998:	orr	r0, r0, r5
   1499c:	tst	r0, #1
   149a0:	bne	149b8 <__assert_fail@plt+0x3270>
   149a4:	ldr	r0, [r3]
   149a8:	add	r0, r0, r2
   149ac:	ldrb	r0, [r0, #1]
   149b0:	cmp	r0, #0
   149b4:	beq	14a08 <__assert_fail@plt+0x32c0>
   149b8:	ldrb	r0, [r2, r7]
   149bc:	strb	r0, [r1, -r4]
   149c0:	cmp	r0, #0
   149c4:	bne	14c40 <__assert_fail@plt+0x34f8>
   149c8:	rsb	r0, r4, #0
   149cc:	str	r6, [r3, r0, lsl #2]
   149d0:	ldrb	r0, [r2]
   149d4:	strb	r0, [r1, -r4]
   149d8:	add	r4, r4, #1
   149dc:	cmp	r4, #1
   149e0:	bne	14980 <__assert_fail@plt+0x3238>
   149e4:	movw	r1, #40717	; 0x9f0d
   149e8:	movt	r1, #1
   149ec:	mov	r0, #0
   149f0:	mov	r2, #5
   149f4:	bl	11460 <dcgettext@plt>
   149f8:	mov	r2, r0
   149fc:	mov	r0, #1
   14a00:	mov	r1, #0
   14a04:	bl	11520 <error@plt>
   14a08:	movw	r4, #46364	; 0xb51c
   14a0c:	movt	r4, #2
   14a10:	ldr	r8, [r4]
   14a14:	cmp	r8, #0
   14a18:	movw	r9, #46360	; 0xb518
   14a1c:	movt	r9, #2
   14a20:	movw	r6, #45956	; 0xb384
   14a24:	movt	r6, #2
   14a28:	beq	14a54 <__assert_fail@plt+0x330c>
   14a2c:	mov	r7, r6
   14a30:	add	r0, r8, #2
   14a34:	movw	r1, #46364	; 0xb51c
   14a38:	movt	r1, #2
   14a3c:	str	r0, [r1]
   14a40:	movw	r1, #45952	; 0xb380
   14a44:	movt	r1, #2
   14a48:	ldr	r0, [r1]
   14a4c:	add	r0, r0, #1
   14a50:	b	14aac <__assert_fail@plt+0x3364>
   14a54:	movw	r0, #45948	; 0xb37c
   14a58:	movt	r0, #2
   14a5c:	ldr	r0, [r0]
   14a60:	bl	115b0 <strlen@plt>
   14a64:	mov	r5, r0
   14a68:	str	r0, [r9]
   14a6c:	mov	r7, r6
   14a70:	ldr	r0, [r6]
   14a74:	cmp	r0, #0
   14a78:	beq	14a84 <__assert_fail@plt+0x333c>
   14a7c:	bl	115b0 <strlen@plt>
   14a80:	b	14a88 <__assert_fail@plt+0x3340>
   14a84:	mov	r0, #0
   14a88:	movw	r1, #46368	; 0xb520
   14a8c:	movt	r1, #2
   14a90:	str	r0, [r1]
   14a94:	add	r0, r0, r5
   14a98:	movw	r1, #45952	; 0xb380
   14a9c:	movt	r1, #2
   14aa0:	ldr	r1, [r1]
   14aa4:	add	r0, r0, r1
   14aa8:	mov	r1, r4
   14aac:	str	r0, [r1]
   14ab0:	ldr	r0, [r9]
   14ab4:	ldr	r1, [r4]
   14ab8:	add	r1, r1, #1
   14abc:	cmp	r1, r0
   14ac0:	bcc	14c48 <__assert_fail@plt+0x3500>
   14ac4:	mov	r0, sl
   14ac8:	bl	17cb0 <__assert_fail@plt+0x6568>
   14acc:	mov	r4, r0
   14ad0:	movw	r0, #46348	; 0xb50c
   14ad4:	movt	r0, #2
   14ad8:	str	r4, [r0]
   14adc:	cmp	r8, #0
   14ae0:	beq	14b18 <__assert_fail@plt+0x33d0>
   14ae4:	movw	r2, #45404	; 0xb15c
   14ae8:	movt	r2, #2
   14aec:	ldr	r0, [r2]
   14af0:	movw	r1, #46356	; 0xb514
   14af4:	movt	r1, #2
   14af8:	ldr	r1, [r1]
   14afc:	ldr	r1, [r1]
   14b00:	ldrb	r0, [r0, r1]
   14b04:	ldr	r1, [r9]
   14b08:	strb	r0, [r4, r1]
   14b0c:	add	r0, r1, #1
   14b10:	str	r0, [r9]
   14b14:	b	14b38 <__assert_fail@plt+0x33f0>
   14b18:	ldr	r2, [r9]
   14b1c:	movw	r0, #45948	; 0xb37c
   14b20:	movt	r0, #2
   14b24:	ldr	r1, [r0]
   14b28:	mov	r0, r4
   14b2c:	bl	11430 <memcpy@plt>
   14b30:	movw	r2, #45404	; 0xb15c
   14b34:	movt	r2, #2
   14b38:	ldr	r0, [r9]
   14b3c:	add	r5, r4, r0
   14b40:	movw	r9, #46372	; 0xb524
   14b44:	movt	r9, #2
   14b48:	str	r5, [r9]
   14b4c:	movw	r0, #45952	; 0xb380
   14b50:	movt	r0, #2
   14b54:	ldr	r6, [r0]
   14b58:	ldr	r0, [r2]
   14b5c:	ldrb	r1, [r0]
   14b60:	mov	r0, r5
   14b64:	mov	r2, r6
   14b68:	bl	1161c <memset@plt>
   14b6c:	ldr	r1, [r7]
   14b70:	cmp	r1, #0
   14b74:	beq	14b8c <__assert_fail@plt+0x3444>
   14b78:	add	r0, r5, r6
   14b7c:	movw	r2, #46368	; 0xb520
   14b80:	movt	r2, #2
   14b84:	ldr	r2, [r2]
   14b88:	bl	11430 <memcpy@plt>
   14b8c:	movw	r0, #46364	; 0xb51c
   14b90:	movt	r0, #2
   14b94:	ldr	r0, [r0]
   14b98:	mov	r1, #0
   14b9c:	strb	r1, [r4, r0]
   14ba0:	movw	r7, #46356	; 0xb514
   14ba4:	movt	r7, #2
   14ba8:	ldr	r0, [r7]
   14bac:	bl	155fc <__assert_fail@plt+0x3eb4>
   14bb0:	movw	r0, #45952	; 0xb380
   14bb4:	movt	r0, #2
   14bb8:	ldr	r0, [r0]
   14bbc:	mov	r1, #4
   14bc0:	bl	17f28 <__assert_fail@plt+0x67e0>
   14bc4:	str	r0, [r7]
   14bc8:	movw	r0, #45964	; 0xb38c
   14bcc:	movt	r0, #2
   14bd0:	ldr	r5, [r0]
   14bd4:	cmp	r5, #0
   14bd8:	beq	14c40 <__assert_fail@plt+0x34f8>
   14bdc:	cmp	r8, #0
   14be0:	bne	14c4c <__assert_fail@plt+0x3504>
   14be4:	mov	r0, r5
   14be8:	bl	115b0 <strlen@plt>
   14bec:	mov	r4, r0
   14bf0:	movw	r0, #45952	; 0xb380
   14bf4:	movt	r0, #2
   14bf8:	ldr	r6, [r0]
   14bfc:	ldr	r0, [r9]
   14c00:	add	r0, r0, r6
   14c04:	sub	r0, r0, r4
   14c08:	mov	r1, r5
   14c0c:	mov	r2, r4
   14c10:	bl	11430 <memcpy@plt>
   14c14:	cmp	r4, #0
   14c18:	beq	14c40 <__assert_fail@plt+0x34f8>
   14c1c:	ldr	r0, [r7]
   14c20:	add	r0, r0, r6, lsl #2
   14c24:	sub	r0, r0, #4
   14c28:	sub	r1, r5, #1
   14c2c:	ldrb	r2, [r1, r4]
   14c30:	sub	r2, r2, #48	; 0x30
   14c34:	str	r2, [r0], #-4
   14c38:	subs	r4, r4, #1
   14c3c:	bne	14c2c <__assert_fail@plt+0x34e4>
   14c40:	sub	sp, fp, #28
   14c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c48:	bl	17ff8 <__assert_fail@plt+0x68b0>
   14c4c:	movw	r0, #40671	; 0x9edf
   14c50:	movt	r0, #1
   14c54:	movw	r1, #40679	; 0x9ee7
   14c58:	movt	r1, #1
   14c5c:	movw	r3, #40691	; 0x9ef3
   14c60:	movt	r3, #1
   14c64:	movw	r2, #409	; 0x199
   14c68:	bl	11748 <__assert_fail@plt>
   14c6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c70:	add	fp, sp, #24
   14c74:	sub	sp, sp, #112	; 0x70
   14c78:	mov	r4, r0
   14c7c:	movw	r8, #45972	; 0xb394
   14c80:	movt	r8, #2
   14c84:	ldr	r0, [r8]
   14c88:	cmp	r0, #0
   14c8c:	beq	14dcc <__assert_fail@plt+0x3684>
   14c90:	movw	r0, #40840	; 0x9f88
   14c94:	movt	r0, #1
   14c98:	bl	11538 <getenv@plt>
   14c9c:	mov	r6, r0
   14ca0:	movw	r0, #40854	; 0x9f96
   14ca4:	movt	r0, #1
   14ca8:	mov	r1, r4
   14cac:	mov	r2, #1
   14cb0:	bl	115d4 <setenv@plt>
   14cb4:	movw	r5, #40846	; 0x9f8e
   14cb8:	movt	r5, #1
   14cbc:	cmp	r6, #0
   14cc0:	movne	r5, r6
   14cc4:	cmp	r0, #0
   14cc8:	bne	15024 <__assert_fail@plt+0x38dc>
   14ccc:	movw	r0, #45976	; 0xb398
   14cd0:	movt	r0, #2
   14cd4:	ldrb	r0, [r0]
   14cd8:	cmp	r0, #1
   14cdc:	bne	14d28 <__assert_fail@plt+0x35e0>
   14ce0:	movw	r0, #45932	; 0xb36c
   14ce4:	movt	r0, #2
   14ce8:	ldr	r6, [r0]
   14cec:	movw	r1, #40899	; 0x9fc3
   14cf0:	movt	r1, #1
   14cf4:	mov	r0, #0
   14cf8:	mov	r2, #5
   14cfc:	bl	11460 <dcgettext@plt>
   14d00:	mov	r7, r0
   14d04:	mov	r0, #0
   14d08:	mov	r1, #3
   14d0c:	mov	r2, r4
   14d10:	bl	16e54 <__assert_fail@plt+0x570c>
   14d14:	mov	r3, r0
   14d18:	mov	r0, r6
   14d1c:	mov	r1, #1
   14d20:	mov	r2, r7
   14d24:	bl	11658 <__fprintf_chk@plt>
   14d28:	add	r0, sp, #8
   14d2c:	bl	1167c <pipe@plt>
   14d30:	cmp	r0, #0
   14d34:	bne	15038 <__assert_fail@plt+0x38f0>
   14d38:	bl	116b8 <fork@plt>
   14d3c:	cmp	r0, #0
   14d40:	beq	14ec8 <__assert_fail@plt+0x3780>
   14d44:	mov	r4, r0
   14d48:	cmn	r0, #1
   14d4c:	beq	1504c <__assert_fail@plt+0x3904>
   14d50:	ldr	r0, [sp, #8]
   14d54:	bl	11730 <close@plt>
   14d58:	cmp	r0, #0
   14d5c:	bne	15060 <__assert_fail@plt+0x3918>
   14d60:	movw	r0, #46344	; 0xb508
   14d64:	movt	r0, #2
   14d68:	str	r4, [r0]
   14d6c:	movw	r0, #46384	; 0xb530
   14d70:	movt	r0, #2
   14d74:	ldr	r0, [r0]
   14d78:	movw	r4, #46376	; 0xb528
   14d7c:	movt	r4, #2
   14d80:	ldr	r1, [r4]
   14d84:	cmp	r1, r0
   14d88:	movw	r5, #46380	; 0xb52c
   14d8c:	movt	r5, #2
   14d90:	bne	14dac <__assert_fail@plt+0x3664>
   14d94:	ldr	r0, [r5]
   14d98:	movw	r1, #46384	; 0xb530
   14d9c:	movt	r1, #2
   14da0:	mov	r2, #4
   14da4:	bl	17d34 <__assert_fail@plt+0x65ec>
   14da8:	str	r0, [r5]
   14dac:	ldr	r0, [r4]
   14db0:	add	r1, r0, #1
   14db4:	str	r1, [r4]
   14db8:	ldr	r1, [r5]
   14dbc:	ldr	r2, [sp, #12]
   14dc0:	str	r2, [r1, r0, lsl #2]
   14dc4:	ldr	r5, [sp, #12]
   14dc8:	b	14ebc <__assert_fail@plt+0x3774>
   14dcc:	movw	r0, #45976	; 0xb398
   14dd0:	movt	r0, #2
   14dd4:	ldrb	r0, [r0]
   14dd8:	cmp	r0, #1
   14ddc:	bne	14e24 <__assert_fail@plt+0x36dc>
   14de0:	movw	r0, #45932	; 0xb36c
   14de4:	movt	r0, #2
   14de8:	ldr	r5, [r0]
   14dec:	movw	r1, #40748	; 0x9f2c
   14df0:	movt	r1, #1
   14df4:	mov	r0, #0
   14df8:	mov	r2, #5
   14dfc:	bl	11460 <dcgettext@plt>
   14e00:	mov	r6, r0
   14e04:	mov	r0, #4
   14e08:	mov	r1, r4
   14e0c:	bl	16da0 <__assert_fail@plt+0x5658>
   14e10:	mov	r3, r0
   14e14:	mov	r0, r5
   14e18:	mov	r1, #1
   14e1c:	mov	r2, r6
   14e20:	bl	11658 <__fprintf_chk@plt>
   14e24:	mov	r0, r4
   14e28:	mov	r1, #65	; 0x41
   14e2c:	movw	r2, #438	; 0x1b6
   14e30:	bl	154f0 <__assert_fail@plt+0x3da8>
   14e34:	mov	r5, r0
   14e38:	cmp	r0, #0
   14e3c:	bmi	14ebc <__assert_fail@plt+0x3774>
   14e40:	add	r1, sp, #8
   14e44:	mov	r0, r5
   14e48:	bl	19128 <__assert_fail@plt+0x79e0>
   14e4c:	cmp	r0, #0
   14e50:	bne	15074 <__assert_fail@plt+0x392c>
   14e54:	movw	r0, #45984	; 0xb3a0
   14e58:	movt	r0, #2
   14e5c:	ldrd	r2, [r0, #96]	; 0x60
   14e60:	ldr	r1, [sp, #104]	; 0x68
   14e64:	ldr	r7, [sp, #108]	; 0x6c
   14e68:	eor	r3, r3, r7
   14e6c:	eor	r1, r2, r1
   14e70:	orrs	r1, r1, r3
   14e74:	bne	14e94 <__assert_fail@plt+0x374c>
   14e78:	ldrd	r0, [r0]
   14e7c:	ldr	r2, [sp, #8]
   14e80:	ldr	r3, [sp, #12]
   14e84:	eor	r1, r1, r3
   14e88:	eor	r0, r0, r2
   14e8c:	orrs	r0, r0, r1
   14e90:	beq	150a4 <__assert_fail@plt+0x395c>
   14e94:	mov	r0, r5
   14e98:	mov	r2, #0
   14e9c:	mov	r3, #0
   14ea0:	bl	11448 <ftruncate64@plt>
   14ea4:	cmp	r0, #0
   14ea8:	beq	14ebc <__assert_fail@plt+0x3774>
   14eac:	ldr	r0, [sp, #24]
   14eb0:	and	r0, r0, #61440	; 0xf000
   14eb4:	cmp	r0, #32768	; 0x8000
   14eb8:	beq	150dc <__assert_fail@plt+0x3994>
   14ebc:	mov	r0, r5
   14ec0:	sub	sp, fp, #24
   14ec4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ec8:	movw	r4, #46376	; 0xb528
   14ecc:	movt	r4, #2
   14ed0:	ldr	r0, [r4]
   14ed4:	cmp	r0, #0
   14ed8:	beq	14f0c <__assert_fail@plt+0x37c4>
   14edc:	mov	r6, #0
   14ee0:	movw	r7, #46380	; 0xb52c
   14ee4:	movt	r7, #2
   14ee8:	ldr	r0, [r7]
   14eec:	ldr	r0, [r0, r6, lsl #2]
   14ef0:	bl	11730 <close@plt>
   14ef4:	cmp	r0, #0
   14ef8:	bne	14f9c <__assert_fail@plt+0x3854>
   14efc:	add	r6, r6, #1
   14f00:	ldr	r0, [r4]
   14f04:	cmp	r6, r0
   14f08:	bcc	14ee8 <__assert_fail@plt+0x37a0>
   14f0c:	ldr	r0, [sp, #12]
   14f10:	bl	11730 <close@plt>
   14f14:	cmp	r0, #0
   14f18:	bne	14fb0 <__assert_fail@plt+0x3868>
   14f1c:	ldr	r0, [sp, #8]
   14f20:	cmp	r0, #0
   14f24:	bne	14fdc <__assert_fail@plt+0x3894>
   14f28:	movw	r1, #46216	; 0xb488
   14f2c:	movt	r1, #2
   14f30:	mov	r4, #0
   14f34:	mov	r0, #2
   14f38:	mov	r2, #0
   14f3c:	bl	11400 <sigprocmask@plt>
   14f40:	mov	r0, r5
   14f44:	bl	152c4 <__assert_fail@plt+0x3b7c>
   14f48:	mov	r1, r0
   14f4c:	ldr	r3, [r8]
   14f50:	str	r4, [sp]
   14f54:	movw	r2, #41021	; 0xa03d
   14f58:	movt	r2, #1
   14f5c:	mov	r0, r5
   14f60:	bl	116c4 <execl@plt>
   14f64:	bl	115f8 <__errno_location@plt>
   14f68:	ldr	r4, [r0]
   14f6c:	movw	r1, #41024	; 0xa040
   14f70:	movt	r1, #1
   14f74:	mov	r0, #0
   14f78:	mov	r2, #5
   14f7c:	bl	11460 <dcgettext@plt>
   14f80:	mov	r2, r0
   14f84:	ldr	r0, [r8]
   14f88:	str	r0, [sp]
   14f8c:	mov	r0, #1
   14f90:	mov	r1, r4
   14f94:	mov	r3, r5
   14f98:	bl	11520 <error@plt>
   14f9c:	bl	115f8 <__errno_location@plt>
   14fa0:	ldr	r4, [r0]
   14fa4:	movw	r1, #40945	; 0x9ff1
   14fa8:	movt	r1, #1
   14fac:	b	14fc0 <__assert_fail@plt+0x3878>
   14fb0:	bl	115f8 <__errno_location@plt>
   14fb4:	ldr	r4, [r0]
   14fb8:	movw	r1, #40964	; 0xa004
   14fbc:	movt	r1, #1
   14fc0:	mov	r0, #0
   14fc4:	mov	r2, #5
   14fc8:	bl	11460 <dcgettext@plt>
   14fcc:	mov	r2, r0
   14fd0:	mov	r0, #1
   14fd4:	mov	r1, r4
   14fd8:	bl	11520 <error@plt>
   14fdc:	mov	r1, #0
   14fe0:	bl	1146c <dup2@plt>
   14fe4:	cmp	r0, #0
   14fe8:	bne	15010 <__assert_fail@plt+0x38c8>
   14fec:	ldr	r0, [sp, #8]
   14ff0:	bl	11730 <close@plt>
   14ff4:	cmp	r0, #0
   14ff8:	beq	14f28 <__assert_fail@plt+0x37e0>
   14ffc:	bl	115f8 <__errno_location@plt>
   15000:	ldr	r4, [r0]
   15004:	movw	r1, #41002	; 0xa02a
   15008:	movt	r1, #1
   1500c:	b	14fc0 <__assert_fail@plt+0x3878>
   15010:	bl	115f8 <__errno_location@plt>
   15014:	ldr	r4, [r0]
   15018:	movw	r1, #40984	; 0xa018
   1501c:	movt	r1, #1
   15020:	b	14fc0 <__assert_fail@plt+0x3878>
   15024:	bl	115f8 <__errno_location@plt>
   15028:	ldr	r4, [r0]
   1502c:	movw	r1, #40859	; 0x9f9b
   15030:	movt	r1, #1
   15034:	b	14fc0 <__assert_fail@plt+0x3878>
   15038:	bl	115f8 <__errno_location@plt>
   1503c:	ldr	r4, [r0]
   15040:	movw	r1, #40923	; 0x9fdb
   15044:	movt	r1, #1
   15048:	b	14fc0 <__assert_fail@plt+0x3878>
   1504c:	bl	115f8 <__errno_location@plt>
   15050:	ldr	r4, [r0]
   15054:	movw	r1, #41058	; 0xa062
   15058:	movt	r1, #1
   1505c:	b	14fc0 <__assert_fail@plt+0x3878>
   15060:	bl	115f8 <__errno_location@plt>
   15064:	ldr	r4, [r0]
   15068:	movw	r1, #41082	; 0xa07a
   1506c:	movt	r1, #1
   15070:	b	14fc0 <__assert_fail@plt+0x3878>
   15074:	bl	115f8 <__errno_location@plt>
   15078:	ldr	r5, [r0]
   1507c:	movw	r1, #40766	; 0x9f3e
   15080:	movt	r1, #1
   15084:	mov	r0, #0
   15088:	mov	r2, #5
   1508c:	bl	11460 <dcgettext@plt>
   15090:	mov	r6, r0
   15094:	mov	r0, #4
   15098:	mov	r1, r4
   1509c:	bl	16da0 <__assert_fail@plt+0x5658>
   150a0:	b	1510c <__assert_fail@plt+0x39c4>
   150a4:	movw	r1, #40784	; 0x9f50
   150a8:	movt	r1, #1
   150ac:	mov	r0, #0
   150b0:	mov	r2, #5
   150b4:	bl	11460 <dcgettext@plt>
   150b8:	mov	r5, r0
   150bc:	mov	r0, #4
   150c0:	mov	r1, r4
   150c4:	bl	16da0 <__assert_fail@plt+0x5658>
   150c8:	mov	r3, r0
   150cc:	mov	r0, #1
   150d0:	mov	r1, #0
   150d4:	mov	r2, r5
   150d8:	bl	11520 <error@plt>
   150dc:	bl	115f8 <__errno_location@plt>
   150e0:	ldr	r5, [r0]
   150e4:	movw	r1, #40819	; 0x9f73
   150e8:	movt	r1, #1
   150ec:	mov	r0, #0
   150f0:	mov	r2, #5
   150f4:	bl	11460 <dcgettext@plt>
   150f8:	mov	r6, r0
   150fc:	mov	r0, #0
   15100:	mov	r1, #3
   15104:	mov	r2, r4
   15108:	bl	16e54 <__assert_fail@plt+0x570c>
   1510c:	mov	r3, r0
   15110:	mov	r0, #1
   15114:	mov	r1, r5
   15118:	mov	r2, r6
   1511c:	bl	11520 <error@plt>
   15120:	sub	r0, r0, #32
   15124:	clz	r0, r0
   15128:	lsr	r0, r0, #5
   1512c:	movw	r1, #45972	; 0xb394
   15130:	movt	r1, #2
   15134:	ldr	r1, [r1]
   15138:	cmp	r1, #0
   1513c:	movwne	r1, #1
   15140:	and	r0, r0, r1
   15144:	bx	lr
   15148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1514c:	add	fp, sp, #28
   15150:	sub	sp, sp, #12
   15154:	mov	r5, r1
   15158:	mov	r4, r0
   1515c:	add	r1, r0, r1, lsl #4
   15160:	mov	r7, r1
   15164:	ldr	r0, [r7, #4]!
   15168:	mov	r9, #0
   1516c:	cmn	r0, #1
   15170:	bgt	1526c <__assert_fail@plt+0x3b24>
   15174:	str	r1, [sp, #4]
   15178:	sub	r8, r2, #1
   1517c:	cmp	r5, #0
   15180:	mov	r6, r8
   15184:	subne	r6, r5, #1
   15188:	mov	r9, #0
   1518c:	str	r7, [sp, #8]
   15190:	ldr	r0, [r4, r5, lsl #4]
   15194:	ldr	r1, [r7]
   15198:	cmn	r1, #1
   1519c:	beq	151b4 <__assert_fail@plt+0x3a6c>
   151a0:	movw	r1, #3073	; 0xc01
   151a4:	bl	154f0 <__assert_fail@plt+0x3da8>
   151a8:	cmn	r0, #1
   151ac:	ble	151c0 <__assert_fail@plt+0x3a78>
   151b0:	b	15234 <__assert_fail@plt+0x3aec>
   151b4:	bl	14c6c <__assert_fail@plt+0x3524>
   151b8:	cmn	r0, #1
   151bc:	bgt	15234 <__assert_fail@plt+0x3aec>
   151c0:	bl	115f8 <__errno_location@plt>
   151c4:	mov	r7, r0
   151c8:	ldr	r1, [r0]
   151cc:	sub	r0, r1, #23
   151d0:	cmp	r0, #1
   151d4:	bhi	15278 <__assert_fail@plt+0x3b30>
   151d8:	add	sl, r4, r6, lsl #4
   151dc:	mov	r9, sl
   151e0:	ldr	r0, [r9, #4]!
   151e4:	cmn	r0, #1
   151e8:	bgt	15208 <__assert_fail@plt+0x3ac0>
   151ec:	cmp	r6, #0
   151f0:	mov	r0, r8
   151f4:	subne	r0, r6, #1
   151f8:	cmp	r0, r5
   151fc:	mov	r6, r0
   15200:	bne	151d8 <__assert_fail@plt+0x3a90>
   15204:	b	15278 <__assert_fail@plt+0x3b30>
   15208:	ldr	r0, [sl, #8]!
   1520c:	bl	15450 <__assert_fail@plt+0x3d08>
   15210:	cmp	r0, #0
   15214:	bne	152a4 <__assert_fail@plt+0x3b5c>
   15218:	mov	r0, #0
   1521c:	str	r0, [sl]
   15220:	mvn	r0, #1
   15224:	str	r0, [r9]
   15228:	mov	r9, #1
   1522c:	ldr	r7, [sp, #8]
   15230:	b	15190 <__assert_fail@plt+0x3a48>
   15234:	str	r0, [r7]
   15238:	movw	r1, #41310	; 0xa15e
   1523c:	movt	r1, #1
   15240:	bl	113a0 <fdopen@plt>
   15244:	ldr	r2, [sp, #4]
   15248:	str	r0, [r2, #8]
   1524c:	cmp	r0, #0
   15250:	beq	152b4 <__assert_fail@plt+0x3b6c>
   15254:	movw	r0, #46344	; 0xb508
   15258:	movt	r0, #2
   1525c:	ldr	r1, [r0]
   15260:	str	r1, [r2, #12]
   15264:	mov	r1, #0
   15268:	str	r1, [r0]
   1526c:	and	r0, r9, #1
   15270:	sub	sp, fp, #28
   15274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15278:	ldr	r2, [r4, r5, lsl #4]
   1527c:	mov	r0, #0
   15280:	mov	r4, r1
   15284:	mov	r1, #3
   15288:	bl	16e54 <__assert_fail@plt+0x570c>
   1528c:	mov	r3, r0
   15290:	movw	r2, #41418	; 0xa1ca
   15294:	movt	r2, #1
   15298:	mov	r0, #1
   1529c:	mov	r1, r4
   152a0:	bl	11520 <error@plt>
   152a4:	ldr	r2, [r4, r6, lsl #4]
   152a8:	ldr	r4, [r7]
   152ac:	mov	r0, #0
   152b0:	b	15284 <__assert_fail@plt+0x3b3c>
   152b4:	bl	115f8 <__errno_location@plt>
   152b8:	ldr	r2, [r4, r5, lsl #4]
   152bc:	ldr	r4, [r0]
   152c0:	b	152ac <__assert_fail@plt+0x3b64>
   152c4:	sub	r0, r0, #1
   152c8:	ldrb	r3, [r0, #1]!
   152cc:	cmp	r3, #47	; 0x2f
   152d0:	beq	152c8 <__assert_fail@plt+0x3b80>
   152d4:	mov	r2, #0
   152d8:	mov	r1, r0
   152dc:	b	152e8 <__assert_fail@plt+0x3ba0>
   152e0:	mov	r2, #1
   152e4:	ldrb	r3, [r1, #1]!
   152e8:	uxtb	r3, r3
   152ec:	cmp	r3, #47	; 0x2f
   152f0:	beq	152e0 <__assert_fail@plt+0x3b98>
   152f4:	cmp	r3, #0
   152f8:	bxeq	lr
   152fc:	tst	r2, #1
   15300:	movne	r0, r1
   15304:	mov	r2, #0
   15308:	ldrb	r3, [r1, #1]!
   1530c:	b	152e8 <__assert_fail@plt+0x3ba0>
   15310:	push	{r4, sl, fp, lr}
   15314:	add	fp, sp, #8
   15318:	mov	r4, r0
   1531c:	bl	115b0 <strlen@plt>
   15320:	mov	r1, r0
   15324:	sub	r2, r4, #1
   15328:	mov	r0, r1
   1532c:	cmp	r1, #2
   15330:	bcc	15344 <__assert_fail@plt+0x3bfc>
   15334:	ldrb	r3, [r2, r0]
   15338:	sub	r1, r0, #1
   1533c:	cmp	r3, #47	; 0x2f
   15340:	beq	15328 <__assert_fail@plt+0x3be0>
   15344:	pop	{r4, sl, fp, pc}
   15348:	movw	r1, #46388	; 0xb534
   1534c:	movt	r1, #2
   15350:	str	r0, [r1]
   15354:	bx	lr
   15358:	movw	r1, #46392	; 0xb538
   1535c:	movt	r1, #2
   15360:	strb	r0, [r1]
   15364:	bx	lr
   15368:	push	{r4, r5, r6, sl, fp, lr}
   1536c:	add	fp, sp, #16
   15370:	sub	sp, sp, #8
   15374:	movw	r0, #45932	; 0xb36c
   15378:	movt	r0, #2
   1537c:	ldr	r0, [r0]
   15380:	bl	18a8c <__assert_fail@plt+0x7344>
   15384:	cmp	r0, #0
   15388:	beq	153b0 <__assert_fail@plt+0x3c68>
   1538c:	movw	r0, #46392	; 0xb538
   15390:	movt	r0, #2
   15394:	ldrb	r0, [r0]
   15398:	cmp	r0, #0
   1539c:	beq	153d0 <__assert_fail@plt+0x3c88>
   153a0:	bl	115f8 <__errno_location@plt>
   153a4:	ldr	r0, [r0]
   153a8:	cmp	r0, #32
   153ac:	bne	153d0 <__assert_fail@plt+0x3c88>
   153b0:	movw	r0, #45928	; 0xb368
   153b4:	movt	r0, #2
   153b8:	ldr	r0, [r0]
   153bc:	bl	18a8c <__assert_fail@plt+0x7344>
   153c0:	cmp	r0, #0
   153c4:	subeq	sp, fp, #16
   153c8:	popeq	{r4, r5, r6, sl, fp, pc}
   153cc:	b	15440 <__assert_fail@plt+0x3cf8>
   153d0:	movw	r1, #41298	; 0xa152
   153d4:	movt	r1, #1
   153d8:	mov	r0, #0
   153dc:	mov	r2, #5
   153e0:	bl	11460 <dcgettext@plt>
   153e4:	mov	r4, r0
   153e8:	movw	r0, #46388	; 0xb534
   153ec:	movt	r0, #2
   153f0:	ldr	r6, [r0]
   153f4:	bl	115f8 <__errno_location@plt>
   153f8:	ldr	r5, [r0]
   153fc:	cmp	r6, #0
   15400:	bne	1541c <__assert_fail@plt+0x3cd4>
   15404:	movw	r2, #41418	; 0xa1ca
   15408:	movt	r2, #1
   1540c:	mov	r0, #0
   15410:	mov	r1, r5
   15414:	mov	r3, r4
   15418:	b	1543c <__assert_fail@plt+0x3cf4>
   1541c:	mov	r0, r6
   15420:	bl	16e44 <__assert_fail@plt+0x56fc>
   15424:	mov	r3, r0
   15428:	str	r4, [sp]
   1542c:	movw	r2, #39637	; 0x9ad5
   15430:	movt	r2, #1
   15434:	mov	r0, #0
   15438:	mov	r1, r5
   1543c:	bl	11520 <error@plt>
   15440:	movw	r0, #45416	; 0xb168
   15444:	movt	r0, #2
   15448:	ldr	r0, [r0]
   1544c:	bl	11424 <_exit@plt>
   15450:	push	{r4, r5, fp, lr}
   15454:	add	fp, sp, #8
   15458:	sub	sp, sp, #8
   1545c:	mov	r4, r0
   15460:	bl	11640 <fileno@plt>
   15464:	cmn	r0, #1
   15468:	ble	154e0 <__assert_fail@plt+0x3d98>
   1546c:	mov	r0, r4
   15470:	bl	11568 <__freading@plt>
   15474:	cmp	r0, #0
   15478:	beq	154a4 <__assert_fail@plt+0x3d5c>
   1547c:	mov	r0, r4
   15480:	bl	11640 <fileno@plt>
   15484:	mov	r1, #1
   15488:	str	r1, [sp]
   1548c:	mov	r2, #0
   15490:	mov	r3, #0
   15494:	bl	114cc <lseek64@plt>
   15498:	and	r0, r0, r1
   1549c:	cmn	r0, #1
   154a0:	beq	154e0 <__assert_fail@plt+0x3d98>
   154a4:	mov	r0, r4
   154a8:	bl	15594 <__assert_fail@plt+0x3e4c>
   154ac:	cmp	r0, #0
   154b0:	beq	154e0 <__assert_fail@plt+0x3d98>
   154b4:	bl	115f8 <__errno_location@plt>
   154b8:	ldr	r5, [r0]
   154bc:	mov	r0, r4
   154c0:	bl	11670 <fclose@plt>
   154c4:	cmp	r5, #0
   154c8:	beq	154d8 <__assert_fail@plt+0x3d90>
   154cc:	bl	115f8 <__errno_location@plt>
   154d0:	str	r5, [r0]
   154d4:	mvn	r0, #0
   154d8:	sub	sp, fp, #8
   154dc:	pop	{r4, r5, fp, pc}
   154e0:	mov	r0, r4
   154e4:	sub	sp, fp, #8
   154e8:	pop	{r4, r5, fp, lr}
   154ec:	b	11670 <fclose@plt>
   154f0:	sub	sp, sp, #8
   154f4:	push	{fp, lr}
   154f8:	mov	fp, sp
   154fc:	sub	sp, sp, #8
   15500:	str	r2, [fp, #8]
   15504:	str	r3, [fp, #12]
   15508:	mov	r2, #0
   1550c:	tst	r1, #64	; 0x40
   15510:	ldrne	r2, [fp, #8]
   15514:	bl	1152c <open64@plt>
   15518:	bl	17748 <__assert_fail@plt+0x6000>
   1551c:	mov	sp, fp
   15520:	pop	{fp, lr}
   15524:	add	sp, sp, #8
   15528:	bx	lr
   1552c:	push	{r4, r5, r6, r7, fp, lr}
   15530:	add	fp, sp, #16
   15534:	mov	r5, r0
   15538:	mov	r0, r1
   1553c:	mov	r1, r2
   15540:	mov	r2, r3
   15544:	bl	1152c <open64@plt>
   15548:	mov	r4, r0
   1554c:	cmp	r0, r5
   15550:	beq	1558c <__assert_fail@plt+0x3e44>
   15554:	cmp	r4, #0
   15558:	bmi	1558c <__assert_fail@plt+0x3e44>
   1555c:	mov	r0, r4
   15560:	mov	r1, r5
   15564:	bl	1146c <dup2@plt>
   15568:	mov	r5, r0
   1556c:	bl	115f8 <__errno_location@plt>
   15570:	mov	r6, r0
   15574:	ldr	r7, [r0]
   15578:	mov	r0, r4
   1557c:	bl	11730 <close@plt>
   15580:	str	r7, [r6]
   15584:	mov	r0, r5
   15588:	pop	{r4, r5, r6, r7, fp, pc}
   1558c:	mov	r0, r4
   15590:	pop	{r4, r5, r6, r7, fp, pc}
   15594:	push	{r4, sl, fp, lr}
   15598:	add	fp, sp, #8
   1559c:	mov	r4, r0
   155a0:	cmp	r0, #0
   155a4:	beq	155bc <__assert_fail@plt+0x3e74>
   155a8:	mov	r0, r4
   155ac:	bl	11568 <__freading@plt>
   155b0:	cmp	r0, #0
   155b4:	movne	r0, r4
   155b8:	blne	155c8 <__assert_fail@plt+0x3e80>
   155bc:	mov	r0, r4
   155c0:	pop	{r4, sl, fp, lr}
   155c4:	b	113f4 <fflush@plt>
   155c8:	push	{fp, lr}
   155cc:	mov	fp, sp
   155d0:	sub	sp, sp, #8
   155d4:	ldrb	r1, [r0, #1]
   155d8:	tst	r1, #1
   155dc:	beq	155f4 <__assert_fail@plt+0x3eac>
   155e0:	mov	r1, #1
   155e4:	str	r1, [sp]
   155e8:	mov	r2, #0
   155ec:	mov	r3, #0
   155f0:	bl	15624 <__assert_fail@plt+0x3edc>
   155f4:	mov	sp, fp
   155f8:	pop	{fp, pc}
   155fc:	push	{r4, r5, r6, sl, fp, lr}
   15600:	add	fp, sp, #16
   15604:	mov	r4, r0
   15608:	bl	115f8 <__errno_location@plt>
   1560c:	mov	r5, r0
   15610:	ldr	r6, [r0]
   15614:	mov	r0, r4
   15618:	bl	11418 <free@plt>
   1561c:	str	r6, [r5]
   15620:	pop	{r4, r5, r6, sl, fp, pc}
   15624:	push	{r4, r5, r6, r7, fp, lr}
   15628:	add	fp, sp, #16
   1562c:	sub	sp, sp, #8
   15630:	mov	r5, r3
   15634:	mov	r6, r2
   15638:	mov	r4, r0
   1563c:	ldr	r0, [r0, #4]
   15640:	ldr	r1, [r4, #8]
   15644:	cmp	r1, r0
   15648:	bne	15664 <__assert_fail@plt+0x3f1c>
   1564c:	ldrd	r0, [r4, #16]
   15650:	cmp	r1, r0
   15654:	bne	15664 <__assert_fail@plt+0x3f1c>
   15658:	ldr	r0, [r4, #36]	; 0x24
   1565c:	cmp	r0, #0
   15660:	beq	1567c <__assert_fail@plt+0x3f34>
   15664:	mov	r0, r4
   15668:	mov	r2, r6
   1566c:	mov	r3, r5
   15670:	sub	sp, fp, #16
   15674:	pop	{r4, r5, r6, r7, fp, lr}
   15678:	b	11688 <fseeko64@plt>
   1567c:	ldr	r7, [fp, #8]
   15680:	mov	r0, r4
   15684:	bl	11640 <fileno@plt>
   15688:	str	r7, [sp]
   1568c:	mov	r2, r6
   15690:	mov	r3, r5
   15694:	bl	114cc <lseek64@plt>
   15698:	and	r2, r0, r1
   1569c:	cmn	r2, #1
   156a0:	beq	156c0 <__assert_fail@plt+0x3f78>
   156a4:	strd	r0, [r4, #80]	; 0x50
   156a8:	ldr	r0, [r4]
   156ac:	bic	r0, r0, #16
   156b0:	str	r0, [r4]
   156b4:	mov	r0, #0
   156b8:	sub	sp, fp, #16
   156bc:	pop	{r4, r5, r6, r7, fp, pc}
   156c0:	mvn	r0, #0
   156c4:	sub	sp, fp, #16
   156c8:	pop	{r4, r5, r6, r7, fp, pc}
   156cc:	push	{r4, r5, r6, r7, fp, lr}
   156d0:	add	fp, sp, #16
   156d4:	cmp	r2, #0
   156d8:	beq	15724 <__assert_fail@plt+0x3fdc>
   156dc:	mov	r5, r2
   156e0:	mov	r6, r1
   156e4:	mov	r7, r0
   156e8:	mov	r4, #0
   156ec:	mov	r0, r7
   156f0:	mov	r1, r6
   156f4:	mov	r2, r5
   156f8:	bl	17444 <__assert_fail@plt+0x5cfc>
   156fc:	cmn	r0, #1
   15700:	beq	1571c <__assert_fail@plt+0x3fd4>
   15704:	cmp	r0, #0
   15708:	beq	15730 <__assert_fail@plt+0x3fe8>
   1570c:	subs	r5, r5, r0
   15710:	add	r6, r6, r0
   15714:	add	r4, r0, r4
   15718:	bne	156ec <__assert_fail@plt+0x3fa4>
   1571c:	mov	r0, r4
   15720:	pop	{r4, r5, r6, r7, fp, pc}
   15724:	mov	r4, #0
   15728:	mov	r0, r4
   1572c:	pop	{r4, r5, r6, r7, fp, pc}
   15730:	bl	115f8 <__errno_location@plt>
   15734:	mov	r1, #28
   15738:	str	r1, [r0]
   1573c:	mov	r0, r4
   15740:	pop	{r4, r5, r6, r7, fp, pc}
   15744:	push	{r4, r5, r6, sl, fp, lr}
   15748:	add	fp, sp, #16
   1574c:	mov	r4, r1
   15750:	mov	r5, r0
   15754:	mov	r0, #0
   15758:	strb	r0, [r2, #20]
   1575c:	add	r6, r2, #19
   15760:	mov	r0, r5
   15764:	mov	r1, r4
   15768:	mov	r2, #10
   1576c:	mov	r3, #0
   15770:	bl	18f38 <__assert_fail@plt+0x77f0>
   15774:	add	r2, r0, r0, lsl #2
   15778:	sub	r2, r5, r2, lsl #1
   1577c:	orr	r2, r2, #48	; 0x30
   15780:	strb	r2, [r6], #-1
   15784:	rsbs	r2, r5, #9
   15788:	rscs	r2, r4, #0
   1578c:	mov	r5, r0
   15790:	mov	r4, r1
   15794:	bcc	15760 <__assert_fail@plt+0x4018>
   15798:	add	r0, r6, #1
   1579c:	pop	{r4, r5, r6, sl, fp, pc}
   157a0:	push	{r4, r5, fp, lr}
   157a4:	add	fp, sp, #8
   157a8:	cmp	r0, #0
   157ac:	beq	15840 <__assert_fail@plt+0x40f8>
   157b0:	mov	r4, r0
   157b4:	mov	r1, #47	; 0x2f
   157b8:	bl	116d0 <strrchr@plt>
   157bc:	cmp	r0, #0
   157c0:	mov	r5, r4
   157c4:	addne	r5, r0, #1
   157c8:	sub	r0, r5, r4
   157cc:	cmp	r0, #7
   157d0:	blt	15824 <__assert_fail@plt+0x40dc>
   157d4:	sub	r0, r5, #7
   157d8:	movw	r1, #41871	; 0xa38f
   157dc:	movt	r1, #1
   157e0:	mov	r2, #7
   157e4:	bl	11718 <strncmp@plt>
   157e8:	cmp	r0, #0
   157ec:	bne	15824 <__assert_fail@plt+0x40dc>
   157f0:	movw	r1, #41879	; 0xa397
   157f4:	movt	r1, #1
   157f8:	mov	r0, r5
   157fc:	mov	r2, #3
   15800:	bl	11718 <strncmp@plt>
   15804:	cmp	r0, #0
   15808:	beq	15814 <__assert_fail@plt+0x40cc>
   1580c:	mov	r4, r5
   15810:	b	15824 <__assert_fail@plt+0x40dc>
   15814:	add	r4, r5, #3
   15818:	movw	r0, #45912	; 0xb358
   1581c:	movt	r0, #2
   15820:	str	r4, [r0]
   15824:	movw	r0, #45916	; 0xb35c
   15828:	movt	r0, #2
   1582c:	str	r4, [r0]
   15830:	movw	r0, #46396	; 0xb53c
   15834:	movt	r0, #2
   15838:	str	r4, [r0]
   1583c:	pop	{r4, r5, fp, pc}
   15840:	movw	r0, #45928	; 0xb368
   15844:	movt	r0, #2
   15848:	ldr	r3, [r0]
   1584c:	movw	r0, #41815	; 0xa357
   15850:	movt	r0, #1
   15854:	mov	r1, #55	; 0x37
   15858:	mov	r2, #1
   1585c:	bl	114c0 <fwrite@plt>
   15860:	bl	11724 <abort@plt>
   15864:	push	{r4, r5, r6, sl, fp, lr}
   15868:	add	fp, sp, #16
   1586c:	mov	r4, r0
   15870:	movw	r0, #46400	; 0xb540
   15874:	movt	r0, #2
   15878:	cmp	r4, #0
   1587c:	moveq	r4, r0
   15880:	bl	115f8 <__errno_location@plt>
   15884:	mov	r5, r0
   15888:	ldr	r6, [r0]
   1588c:	mov	r0, r4
   15890:	mov	r1, #48	; 0x30
   15894:	bl	17f58 <__assert_fail@plt+0x6810>
   15898:	str	r6, [r5]
   1589c:	pop	{r4, r5, r6, sl, fp, pc}
   158a0:	movw	r1, #46400	; 0xb540
   158a4:	movt	r1, #2
   158a8:	cmp	r0, #0
   158ac:	movne	r1, r0
   158b0:	ldr	r0, [r1]
   158b4:	bx	lr
   158b8:	movw	r2, #46400	; 0xb540
   158bc:	movt	r2, #2
   158c0:	cmp	r0, #0
   158c4:	movne	r2, r0
   158c8:	str	r1, [r2]
   158cc:	bx	lr
   158d0:	movw	r3, #46400	; 0xb540
   158d4:	movt	r3, #2
   158d8:	cmp	r0, #0
   158dc:	movne	r3, r0
   158e0:	ubfx	r0, r1, #5, #3
   158e4:	add	ip, r3, r0, lsl #2
   158e8:	ldr	r3, [ip, #8]
   158ec:	and	r1, r1, #31
   158f0:	mov	r0, #1
   158f4:	and	r0, r0, r3, lsr r1
   158f8:	and	r2, r2, #1
   158fc:	eor	r2, r0, r2
   15900:	eor	r1, r3, r2, lsl r1
   15904:	str	r1, [ip, #8]
   15908:	bx	lr
   1590c:	movw	r2, #46400	; 0xb540
   15910:	movt	r2, #2
   15914:	cmp	r0, #0
   15918:	movne	r2, r0
   1591c:	ldr	r0, [r2, #4]
   15920:	str	r1, [r2, #4]
   15924:	bx	lr
   15928:	push	{fp, lr}
   1592c:	mov	fp, sp
   15930:	movw	r3, #46400	; 0xb540
   15934:	movt	r3, #2
   15938:	cmp	r0, #0
   1593c:	movne	r3, r0
   15940:	mov	r0, #10
   15944:	str	r0, [r3]
   15948:	cmp	r1, #0
   1594c:	cmpne	r2, #0
   15950:	bne	15958 <__assert_fail@plt+0x4210>
   15954:	bl	11724 <abort@plt>
   15958:	str	r1, [r3, #40]	; 0x28
   1595c:	str	r2, [r3, #44]	; 0x2c
   15960:	pop	{fp, pc}
   15964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15968:	add	fp, sp, #28
   1596c:	sub	sp, sp, #20
   15970:	mov	r8, r3
   15974:	mov	r9, r2
   15978:	mov	sl, r1
   1597c:	mov	r7, r0
   15980:	ldr	r0, [fp, #8]
   15984:	movw	r5, #46400	; 0xb540
   15988:	movt	r5, #2
   1598c:	cmp	r0, #0
   15990:	movne	r5, r0
   15994:	bl	115f8 <__errno_location@plt>
   15998:	mov	r4, r0
   1599c:	ldm	r5, {r0, r1}
   159a0:	ldr	r2, [r5, #40]	; 0x28
   159a4:	ldr	r3, [r5, #44]	; 0x2c
   159a8:	ldr	r6, [r4]
   159ac:	add	r5, r5, #8
   159b0:	stm	sp, {r0, r1, r5}
   159b4:	str	r2, [sp, #12]
   159b8:	str	r3, [sp, #16]
   159bc:	mov	r0, r7
   159c0:	mov	r1, sl
   159c4:	mov	r2, r9
   159c8:	mov	r3, r8
   159cc:	bl	159dc <__assert_fail@plt+0x4294>
   159d0:	str	r6, [r4]
   159d4:	sub	sp, fp, #28
   159d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159e0:	add	fp, sp, #28
   159e4:	sub	sp, sp, #156	; 0x9c
   159e8:	mov	r9, r3
   159ec:	mov	r7, r1
   159f0:	mov	r6, r0
   159f4:	str	r2, [fp, #-80]	; 0xffffffb0
   159f8:	add	r0, r2, #1
   159fc:	str	r0, [sp, #76]	; 0x4c
   15a00:	ldr	r0, [fp, #12]
   15a04:	and	r1, r0, #1
   15a08:	str	r1, [sp, #40]	; 0x28
   15a0c:	and	r1, r0, #4
   15a10:	str	r1, [sp, #36]	; 0x24
   15a14:	ubfx	r4, r0, #1, #1
   15a18:	bl	114e4 <__ctype_get_mb_cur_max@plt>
   15a1c:	str	r0, [sp, #44]	; 0x2c
   15a20:	ldr	r0, [fp, #24]
   15a24:	str	r0, [sp, #88]	; 0x58
   15a28:	ldr	r0, [fp, #20]
   15a2c:	str	r0, [sp, #80]	; 0x50
   15a30:	ldr	r1, [fp, #8]
   15a34:	mov	r0, #0
   15a38:	str	r0, [sp, #84]	; 0x54
   15a3c:	mov	r0, #0
   15a40:	str	r0, [fp, #-84]	; 0xffffffac
   15a44:	mov	r0, #0
   15a48:	str	r0, [fp, #-72]	; 0xffffffb8
   15a4c:	mov	r0, #0
   15a50:	mov	r2, #0
   15a54:	str	r2, [fp, #-56]	; 0xffffffc8
   15a58:	mov	r2, #0
   15a5c:	str	r2, [sp, #64]	; 0x40
   15a60:	mov	r2, #1
   15a64:	str	r2, [fp, #-48]	; 0xffffffd0
   15a68:	cmp	r1, #10
   15a6c:	bhi	16998 <__assert_fail@plt+0x5250>
   15a70:	mov	sl, r7
   15a74:	mov	r7, r1
   15a78:	add	r1, pc, #24
   15a7c:	mov	r8, #0
   15a80:	mov	r2, #1
   15a84:	mov	r3, #0
   15a88:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15a8c:	mov	lr, r9
   15a90:	mov	r5, r6
   15a94:	ldr	pc, [r1, r7, lsl #2]
   15a98:	andeq	r5, r1, ip, ror #22
   15a9c:	andeq	r5, r1, ip, lsr #23
   15aa0:	andeq	r5, r1, ip, ror fp
   15aa4:	andeq	r5, r1, r4, ror #22
   15aa8:	andeq	r5, r1, r0, lsr #23
   15aac:	andeq	r5, r1, r0, lsl #24
   15ab0:	andeq	r5, r1, ip, lsl #23
   15ab4:	andeq	r5, r1, ip, asr ip
   15ab8:	andeq	r5, r1, r4, asr #21
   15abc:	andeq	r5, r1, r4, asr #21
   15ac0:	strdeq	r5, [r1], -r0
   15ac4:	movw	r0, #41959	; 0xa3e7
   15ac8:	movt	r0, #1
   15acc:	mov	r1, r7
   15ad0:	bl	16fa0 <__assert_fail@plt+0x5858>
   15ad4:	str	r0, [sp, #80]	; 0x50
   15ad8:	movw	r0, #41961	; 0xa3e9
   15adc:	movt	r0, #1
   15ae0:	mov	r1, r7
   15ae4:	bl	16fa0 <__assert_fail@plt+0x5858>
   15ae8:	mov	r5, r6
   15aec:	str	r0, [sp, #88]	; 0x58
   15af0:	mov	r8, #0
   15af4:	tst	r4, #1
   15af8:	str	r7, [fp, #-64]	; 0xffffffc0
   15afc:	bne	15b34 <__assert_fail@plt+0x43ec>
   15b00:	ldr	r0, [sp, #80]	; 0x50
   15b04:	ldrb	r0, [r0]
   15b08:	cmp	r0, #0
   15b0c:	beq	15b34 <__assert_fail@plt+0x43ec>
   15b10:	ldr	r1, [sp, #80]	; 0x50
   15b14:	add	r1, r1, #1
   15b18:	mov	r8, #0
   15b1c:	cmp	r8, sl
   15b20:	strbcc	r0, [r5, r8]
   15b24:	ldrb	r0, [r1, r8]
   15b28:	add	r8, r8, #1
   15b2c:	cmp	r0, #0
   15b30:	bne	15b1c <__assert_fail@plt+0x43d4>
   15b34:	ldr	r7, [sp, #88]	; 0x58
   15b38:	mov	r0, r7
   15b3c:	bl	115b0 <strlen@plt>
   15b40:	mov	r5, r6
   15b44:	str	r0, [fp, #-72]	; 0xffffffb8
   15b48:	str	r7, [fp, #-84]	; 0xffffffac
   15b4c:	mov	r2, #1
   15b50:	mov	r3, r4
   15b54:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15b58:	mov	lr, r9
   15b5c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15b60:	b	15c5c <__assert_fail@plt+0x4514>
   15b64:	mov	r0, #1
   15b68:	b	15bac <__assert_fail@plt+0x4464>
   15b6c:	mov	r7, #0
   15b70:	mov	r8, #0
   15b74:	mov	r2, r0
   15b78:	b	15c58 <__assert_fail@plt+0x4510>
   15b7c:	tst	r4, #1
   15b80:	bne	15bac <__assert_fail@plt+0x4464>
   15b84:	mov	r2, r0
   15b88:	b	15bd4 <__assert_fail@plt+0x448c>
   15b8c:	mov	r0, #1
   15b90:	str	r0, [fp, #-72]	; 0xffffffb8
   15b94:	mov	r8, #0
   15b98:	mov	r7, #5
   15b9c:	b	15c18 <__assert_fail@plt+0x44d0>
   15ba0:	mov	r2, #1
   15ba4:	tst	r4, #1
   15ba8:	beq	15bd4 <__assert_fail@plt+0x448c>
   15bac:	mov	r1, #1
   15bb0:	str	r1, [fp, #-72]	; 0xffffffb8
   15bb4:	mov	r8, #0
   15bb8:	mov	r7, #2
   15bbc:	movw	r1, #41961	; 0xa3e9
   15bc0:	movt	r1, #1
   15bc4:	str	r1, [fp, #-84]	; 0xffffffac
   15bc8:	mov	r2, r0
   15bcc:	mov	r3, #1
   15bd0:	b	15c5c <__assert_fail@plt+0x4514>
   15bd4:	mov	r8, #1
   15bd8:	mov	r7, #2
   15bdc:	cmp	sl, #0
   15be0:	movne	r0, #39	; 0x27
   15be4:	strbne	r0, [r5]
   15be8:	movw	r0, #41961	; 0xa3e9
   15bec:	movt	r0, #1
   15bf0:	str	r0, [fp, #-84]	; 0xffffffac
   15bf4:	mov	r0, #1
   15bf8:	str	r0, [fp, #-72]	; 0xffffffb8
   15bfc:	b	15c58 <__assert_fail@plt+0x4510>
   15c00:	mov	r7, #5
   15c04:	tst	r4, #1
   15c08:	beq	15c30 <__assert_fail@plt+0x44e8>
   15c0c:	mov	r0, #1
   15c10:	str	r0, [fp, #-72]	; 0xffffffb8
   15c14:	mov	r8, #0
   15c18:	movw	r0, #41056	; 0xa060
   15c1c:	movt	r0, #1
   15c20:	str	r0, [fp, #-84]	; 0xffffffac
   15c24:	mov	r2, #1
   15c28:	mov	r3, #1
   15c2c:	b	15c5c <__assert_fail@plt+0x4514>
   15c30:	cmp	sl, #0
   15c34:	movne	r0, #34	; 0x22
   15c38:	strbne	r0, [r5]
   15c3c:	mov	r8, #1
   15c40:	movw	r0, #41056	; 0xa060
   15c44:	movt	r0, #1
   15c48:	str	r0, [fp, #-84]	; 0xffffffac
   15c4c:	mov	r0, #1
   15c50:	str	r0, [fp, #-72]	; 0xffffffb8
   15c54:	mov	r2, #1
   15c58:	mov	r3, #0
   15c5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15c60:	cmp	r0, #0
   15c64:	movwne	r0, #1
   15c68:	and	r1, r0, r3
   15c6c:	and	r1, r2, r1
   15c70:	str	r1, [sp, #56]	; 0x38
   15c74:	sub	r1, r7, #2
   15c78:	clz	r1, r1
   15c7c:	lsr	r1, r1, #5
   15c80:	and	r1, r1, r3
   15c84:	str	r1, [sp, #68]	; 0x44
   15c88:	str	r7, [fp, #-64]	; 0xffffffc0
   15c8c:	subs	r1, r7, #2
   15c90:	movwne	r1, #1
   15c94:	eor	r4, r3, #1
   15c98:	str	r4, [fp, #-88]	; 0xffffffa8
   15c9c:	orr	r4, r1, r4
   15ca0:	str	r4, [sp, #72]	; 0x48
   15ca4:	and	r1, r1, r2
   15ca8:	and	r0, r0, r1
   15cac:	str	r0, [fp, #-60]	; 0xffffffc4
   15cb0:	str	r3, [fp, #-76]	; 0xffffffb4
   15cb4:	orr	r0, r1, r3
   15cb8:	eor	r0, r0, #1
   15cbc:	ldr	r1, [fp, #16]
   15cc0:	clz	r1, r1
   15cc4:	lsr	r1, r1, #5
   15cc8:	orr	r0, r1, r0
   15ccc:	str	r0, [fp, #-68]	; 0xffffffbc
   15cd0:	str	r2, [sp, #92]	; 0x5c
   15cd4:	eor	r0, r2, #1
   15cd8:	str	r0, [sp, #60]	; 0x3c
   15cdc:	mov	r7, #0
   15ce0:	cmn	lr, #1
   15ce4:	beq	15cf4 <__assert_fail@plt+0x45ac>
   15ce8:	cmp	r7, lr
   15cec:	bne	15d00 <__assert_fail@plt+0x45b8>
   15cf0:	b	1680c <__assert_fail@plt+0x50c4>
   15cf4:	ldrb	r0, [ip, r7]
   15cf8:	cmp	r0, #0
   15cfc:	beq	1680c <__assert_fail@plt+0x50c4>
   15d00:	mov	r9, #0
   15d04:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15d08:	cmp	r0, #0
   15d0c:	beq	15d40 <__assert_fail@plt+0x45f8>
   15d10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15d14:	add	r4, r7, r0
   15d18:	cmp	r0, #2
   15d1c:	bcc	15d38 <__assert_fail@plt+0x45f0>
   15d20:	cmn	lr, #1
   15d24:	bne	15d38 <__assert_fail@plt+0x45f0>
   15d28:	mov	r0, ip
   15d2c:	bl	115b0 <strlen@plt>
   15d30:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15d34:	mov	lr, r0
   15d38:	cmp	r4, lr
   15d3c:	bls	15d4c <__assert_fail@plt+0x4604>
   15d40:	mov	r0, #0
   15d44:	str	r0, [fp, #-52]	; 0xffffffcc
   15d48:	b	15d90 <__assert_fail@plt+0x4648>
   15d4c:	mov	r4, lr
   15d50:	add	r0, ip, r7
   15d54:	ldr	r1, [fp, #-84]	; 0xffffffac
   15d58:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15d5c:	bl	115a4 <bcmp@plt>
   15d60:	cmp	r0, #0
   15d64:	mov	r1, r0
   15d68:	movwne	r1, #1
   15d6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15d70:	orr	r1, r1, r2
   15d74:	tst	r1, #1
   15d78:	beq	168e0 <__assert_fail@plt+0x5198>
   15d7c:	clz	r0, r0
   15d80:	lsr	r0, r0, #5
   15d84:	str	r0, [fp, #-52]	; 0xffffffcc
   15d88:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15d8c:	mov	lr, r4
   15d90:	ldrb	r4, [ip, r7]
   15d94:	cmp	r4, #126	; 0x7e
   15d98:	bhi	162c8 <__assert_fail@plt+0x4b80>
   15d9c:	mov	r6, #1
   15da0:	mov	r2, #110	; 0x6e
   15da4:	mov	r0, #97	; 0x61
   15da8:	add	r3, pc, #4
   15dac:	mov	r1, #0
   15db0:	ldr	pc, [r3, r4, lsl #2]
   15db4:	andeq	r6, r1, r8, lsr #2
   15db8:	andeq	r6, r1, r8, asr #5
   15dbc:	andeq	r6, r1, r8, asr #5
   15dc0:	andeq	r6, r1, r8, asr #5
   15dc4:	andeq	r6, r1, r8, asr #5
   15dc8:	andeq	r6, r1, r8, asr #5
   15dcc:	andeq	r6, r1, r8, asr #5
   15dd0:	muleq	r1, ip, r3
   15dd4:	andeq	r6, r1, r8, lsl #2
   15dd8:	andeq	r6, r1, r0, lsl #2
   15ddc:	andeq	r6, r1, r4, lsl r1
   15de0:	andeq	r6, r1, r0, lsr r2
   15de4:	strdeq	r6, [r1], -r8
   15de8:	andeq	r6, r1, r0, lsl r1
   15dec:	andeq	r6, r1, r8, asr #5
   15df0:	andeq	r6, r1, r8, asr #5
   15df4:	andeq	r6, r1, r8, asr #5
   15df8:	andeq	r6, r1, r8, asr #5
   15dfc:	andeq	r6, r1, r8, asr #5
   15e00:	andeq	r6, r1, r8, asr #5
   15e04:	andeq	r6, r1, r8, asr #5
   15e08:	andeq	r6, r1, r8, asr #5
   15e0c:	andeq	r6, r1, r8, asr #5
   15e10:	andeq	r6, r1, r8, asr #5
   15e14:	andeq	r6, r1, r8, asr #5
   15e18:	andeq	r6, r1, r8, asr #5
   15e1c:	andeq	r6, r1, r8, asr #5
   15e20:	andeq	r6, r1, r8, asr #5
   15e24:	andeq	r6, r1, r8, asr #5
   15e28:	andeq	r6, r1, r8, asr #5
   15e2c:	andeq	r6, r1, r8, asr #5
   15e30:	andeq	r6, r1, r8, asr #5
   15e34:	andeq	r6, r1, ip, lsr #1
   15e38:	strheq	r6, [r1], -r0
   15e3c:	strheq	r6, [r1], -r0
   15e40:	muleq	r1, r8, r0
   15e44:	strheq	r6, [r1], -r0
   15e48:			; <UNDEFINED> instruction: 0x00015fb0
   15e4c:	strheq	r6, [r1], -r0
   15e50:	andeq	r6, r1, r8, lsr r2
   15e54:	strheq	r6, [r1], -r0
   15e58:	strheq	r6, [r1], -r0
   15e5c:	strheq	r6, [r1], -r0
   15e60:			; <UNDEFINED> instruction: 0x00015fb0
   15e64:			; <UNDEFINED> instruction: 0x00015fb0
   15e68:			; <UNDEFINED> instruction: 0x00015fb0
   15e6c:			; <UNDEFINED> instruction: 0x00015fb0
   15e70:			; <UNDEFINED> instruction: 0x00015fb0
   15e74:			; <UNDEFINED> instruction: 0x00015fb0
   15e78:			; <UNDEFINED> instruction: 0x00015fb0
   15e7c:			; <UNDEFINED> instruction: 0x00015fb0
   15e80:			; <UNDEFINED> instruction: 0x00015fb0
   15e84:			; <UNDEFINED> instruction: 0x00015fb0
   15e88:			; <UNDEFINED> instruction: 0x00015fb0
   15e8c:			; <UNDEFINED> instruction: 0x00015fb0
   15e90:			; <UNDEFINED> instruction: 0x00015fb0
   15e94:			; <UNDEFINED> instruction: 0x00015fb0
   15e98:			; <UNDEFINED> instruction: 0x00015fb0
   15e9c:			; <UNDEFINED> instruction: 0x00015fb0
   15ea0:	strheq	r6, [r1], -r0
   15ea4:	strheq	r6, [r1], -r0
   15ea8:	strheq	r6, [r1], -r0
   15eac:	strheq	r6, [r1], -r0
   15eb0:	andeq	r6, r1, r0, lsl #4
   15eb4:	andeq	r6, r1, r8, asr #5
   15eb8:			; <UNDEFINED> instruction: 0x00015fb0
   15ebc:			; <UNDEFINED> instruction: 0x00015fb0
   15ec0:			; <UNDEFINED> instruction: 0x00015fb0
   15ec4:			; <UNDEFINED> instruction: 0x00015fb0
   15ec8:			; <UNDEFINED> instruction: 0x00015fb0
   15ecc:			; <UNDEFINED> instruction: 0x00015fb0
   15ed0:			; <UNDEFINED> instruction: 0x00015fb0
   15ed4:			; <UNDEFINED> instruction: 0x00015fb0
   15ed8:			; <UNDEFINED> instruction: 0x00015fb0
   15edc:			; <UNDEFINED> instruction: 0x00015fb0
   15ee0:			; <UNDEFINED> instruction: 0x00015fb0
   15ee4:			; <UNDEFINED> instruction: 0x00015fb0
   15ee8:			; <UNDEFINED> instruction: 0x00015fb0
   15eec:			; <UNDEFINED> instruction: 0x00015fb0
   15ef0:			; <UNDEFINED> instruction: 0x00015fb0
   15ef4:			; <UNDEFINED> instruction: 0x00015fb0
   15ef8:			; <UNDEFINED> instruction: 0x00015fb0
   15efc:			; <UNDEFINED> instruction: 0x00015fb0
   15f00:			; <UNDEFINED> instruction: 0x00015fb0
   15f04:			; <UNDEFINED> instruction: 0x00015fb0
   15f08:			; <UNDEFINED> instruction: 0x00015fb0
   15f0c:			; <UNDEFINED> instruction: 0x00015fb0
   15f10:			; <UNDEFINED> instruction: 0x00015fb0
   15f14:			; <UNDEFINED> instruction: 0x00015fb0
   15f18:			; <UNDEFINED> instruction: 0x00015fb0
   15f1c:			; <UNDEFINED> instruction: 0x00015fb0
   15f20:	strheq	r6, [r1], -r0
   15f24:	ldrdeq	r6, [r1], -r8
   15f28:			; <UNDEFINED> instruction: 0x00015fb0
   15f2c:	strheq	r6, [r1], -r0
   15f30:			; <UNDEFINED> instruction: 0x00015fb0
   15f34:	strheq	r6, [r1], -r0
   15f38:			; <UNDEFINED> instruction: 0x00015fb0
   15f3c:			; <UNDEFINED> instruction: 0x00015fb0
   15f40:			; <UNDEFINED> instruction: 0x00015fb0
   15f44:			; <UNDEFINED> instruction: 0x00015fb0
   15f48:			; <UNDEFINED> instruction: 0x00015fb0
   15f4c:			; <UNDEFINED> instruction: 0x00015fb0
   15f50:			; <UNDEFINED> instruction: 0x00015fb0
   15f54:			; <UNDEFINED> instruction: 0x00015fb0
   15f58:			; <UNDEFINED> instruction: 0x00015fb0
   15f5c:			; <UNDEFINED> instruction: 0x00015fb0
   15f60:			; <UNDEFINED> instruction: 0x00015fb0
   15f64:			; <UNDEFINED> instruction: 0x00015fb0
   15f68:			; <UNDEFINED> instruction: 0x00015fb0
   15f6c:			; <UNDEFINED> instruction: 0x00015fb0
   15f70:			; <UNDEFINED> instruction: 0x00015fb0
   15f74:			; <UNDEFINED> instruction: 0x00015fb0
   15f78:			; <UNDEFINED> instruction: 0x00015fb0
   15f7c:			; <UNDEFINED> instruction: 0x00015fb0
   15f80:			; <UNDEFINED> instruction: 0x00015fb0
   15f84:			; <UNDEFINED> instruction: 0x00015fb0
   15f88:			; <UNDEFINED> instruction: 0x00015fb0
   15f8c:			; <UNDEFINED> instruction: 0x00015fb0
   15f90:			; <UNDEFINED> instruction: 0x00015fb0
   15f94:			; <UNDEFINED> instruction: 0x00015fb0
   15f98:			; <UNDEFINED> instruction: 0x00015fb0
   15f9c:			; <UNDEFINED> instruction: 0x00015fb0
   15fa0:	andeq	r6, r1, ip, rrx
   15fa4:	strheq	r6, [r1], -r0
   15fa8:	andeq	r6, r1, ip, rrx
   15fac:	muleq	r1, r8, r0
   15fb0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15fb4:	tst	r0, #1
   15fb8:	bne	15fe4 <__assert_fail@plt+0x489c>
   15fbc:	ubfx	r0, r4, #5, #3
   15fc0:	ldr	r1, [fp, #16]
   15fc4:	ldr	r0, [r1, r0, lsl #2]
   15fc8:	and	r1, r4, #31
   15fcc:	mov	r2, #1
   15fd0:	tst	r0, r2, lsl r1
   15fd4:	beq	15fe4 <__assert_fail@plt+0x489c>
   15fd8:	mov	r0, r4
   15fdc:	mov	r1, r6
   15fe0:	b	15ff8 <__assert_fail@plt+0x48b0>
   15fe4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15fe8:	cmp	r0, #0
   15fec:	mov	r0, r4
   15ff0:	mov	r1, r6
   15ff4:	beq	16330 <__assert_fail@plt+0x4be8>
   15ff8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15ffc:	tst	r2, #1
   16000:	bne	168f4 <__assert_fail@plt+0x51ac>
   16004:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16008:	subs	r2, r2, #2
   1600c:	movwne	r2, #1
   16010:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16014:	orr	r2, r2, r3
   16018:	tst	r2, #1
   1601c:	bne	16058 <__assert_fail@plt+0x4910>
   16020:	cmp	r8, sl
   16024:	movcc	r2, #39	; 0x27
   16028:	strbcc	r2, [r5, r8]
   1602c:	add	r2, r8, #1
   16030:	cmp	r2, sl
   16034:	movcc	r3, #36	; 0x24
   16038:	strbcc	r3, [r5, r2]
   1603c:	add	r2, r8, #2
   16040:	cmp	r2, sl
   16044:	movcc	r3, #39	; 0x27
   16048:	strbcc	r3, [r5, r2]
   1604c:	add	r8, r8, #3
   16050:	mov	r2, #1
   16054:	str	r2, [fp, #-56]	; 0xffffffc8
   16058:	cmp	r8, sl
   1605c:	movcc	r2, #92	; 0x5c
   16060:	strbcc	r2, [r5, r8]
   16064:	add	r8, r8, #1
   16068:	b	16374 <__assert_fail@plt+0x4c2c>
   1606c:	cmp	lr, #1
   16070:	beq	16098 <__assert_fail@plt+0x4950>
   16074:	mov	r6, #0
   16078:	cmn	lr, #1
   1607c:	bne	160a4 <__assert_fail@plt+0x495c>
   16080:	ldrb	r0, [ip, #1]
   16084:	cmp	r0, #0
   16088:	beq	16098 <__assert_fail@plt+0x4950>
   1608c:	mvn	lr, #0
   16090:	mov	r9, #0
   16094:	b	15fb0 <__assert_fail@plt+0x4868>
   16098:	mov	r6, #0
   1609c:	cmp	r7, #0
   160a0:	beq	160ac <__assert_fail@plt+0x4964>
   160a4:	mov	r9, #0
   160a8:	b	15fb0 <__assert_fail@plt+0x4868>
   160ac:	mov	r1, #1
   160b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   160b4:	cmp	r0, #2
   160b8:	bne	160d0 <__assert_fail@plt+0x4988>
   160bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   160c0:	tst	r0, #1
   160c4:	mov	r6, r1
   160c8:	beq	15fb0 <__assert_fail@plt+0x4868>
   160cc:	b	168f4 <__assert_fail@plt+0x51ac>
   160d0:	mov	r6, r1
   160d4:	b	15fb0 <__assert_fail@plt+0x4868>
   160d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   160dc:	cmp	r0, #2
   160e0:	bne	16314 <__assert_fail@plt+0x4bcc>
   160e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   160e8:	tst	r0, #1
   160ec:	bne	168f4 <__assert_fail@plt+0x51ac>
   160f0:	mov	r9, #0
   160f4:	b	16328 <__assert_fail@plt+0x4be0>
   160f8:	mov	r0, #102	; 0x66
   160fc:	b	1639c <__assert_fail@plt+0x4c54>
   16100:	mov	r2, #116	; 0x74
   16104:	b	16114 <__assert_fail@plt+0x49cc>
   16108:	mov	r0, #98	; 0x62
   1610c:	b	1639c <__assert_fail@plt+0x4c54>
   16110:	mov	r2, #114	; 0x72
   16114:	ldr	r0, [sp, #72]	; 0x48
   16118:	tst	r0, #1
   1611c:	mov	r0, r2
   16120:	bne	1639c <__assert_fail@plt+0x4c54>
   16124:	b	168f4 <__assert_fail@plt+0x51ac>
   16128:	ldr	r0, [sp, #92]	; 0x5c
   1612c:	tst	r0, #1
   16130:	beq	163b8 <__assert_fail@plt+0x4c70>
   16134:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16138:	tst	r0, #1
   1613c:	bne	168f4 <__assert_fail@plt+0x51ac>
   16140:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16144:	subs	r0, r0, #2
   16148:	movwne	r0, #1
   1614c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16150:	orr	r0, r0, r1
   16154:	tst	r0, #1
   16158:	bne	16194 <__assert_fail@plt+0x4a4c>
   1615c:	cmp	r8, sl
   16160:	movcc	r0, #39	; 0x27
   16164:	strbcc	r0, [r5, r8]
   16168:	add	r0, r8, #1
   1616c:	cmp	r0, sl
   16170:	movcc	r1, #36	; 0x24
   16174:	strbcc	r1, [r5, r0]
   16178:	add	r0, r8, #2
   1617c:	cmp	r0, sl
   16180:	movcc	r1, #39	; 0x27
   16184:	strbcc	r1, [r5, r0]
   16188:	add	r8, r8, #3
   1618c:	mov	r0, #1
   16190:	str	r0, [fp, #-56]	; 0xffffffc8
   16194:	cmp	r8, sl
   16198:	movcc	r0, #92	; 0x5c
   1619c:	strbcc	r0, [r5, r8]
   161a0:	add	r0, r8, #1
   161a4:	mov	r6, #0
   161a8:	mov	r9, #1
   161ac:	mov	r4, #48	; 0x30
   161b0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   161b4:	cmp	r1, #2
   161b8:	beq	1657c <__assert_fail@plt+0x4e34>
   161bc:	add	r1, r7, #1
   161c0:	cmp	r1, lr
   161c4:	bcs	1657c <__assert_fail@plt+0x4e34>
   161c8:	ldrb	r1, [ip, r1]
   161cc:	sub	r1, r1, #48	; 0x30
   161d0:	uxtb	r1, r1
   161d4:	cmp	r1, #9
   161d8:	bhi	1657c <__assert_fail@plt+0x4e34>
   161dc:	cmp	r0, sl
   161e0:	movcc	r1, #48	; 0x30
   161e4:	strbcc	r1, [r5, r0]
   161e8:	add	r0, r8, #2
   161ec:	cmp	r0, sl
   161f0:	movcc	r1, #48	; 0x30
   161f4:	strbcc	r1, [r5, r0]
   161f8:	add	r8, r8, #3
   161fc:	b	15fb0 <__assert_fail@plt+0x4868>
   16200:	mov	r9, #0
   16204:	mov	r4, #63	; 0x3f
   16208:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1620c:	cmp	r0, #5
   16210:	beq	16584 <__assert_fail@plt+0x4e3c>
   16214:	cmp	r0, #2
   16218:	bne	1662c <__assert_fail@plt+0x4ee4>
   1621c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16220:	tst	r0, #1
   16224:	mov	r6, #0
   16228:	beq	15fb0 <__assert_fail@plt+0x4868>
   1622c:	b	168f4 <__assert_fail@plt+0x51ac>
   16230:	mov	r0, #118	; 0x76
   16234:	b	1639c <__assert_fail@plt+0x4c54>
   16238:	mov	r4, #39	; 0x27
   1623c:	mov	r0, #1
   16240:	str	r0, [sp, #64]	; 0x40
   16244:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16248:	cmp	r0, #2
   1624c:	bne	163d4 <__assert_fail@plt+0x4c8c>
   16250:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16254:	tst	r0, #1
   16258:	bne	168f4 <__assert_fail@plt+0x51ac>
   1625c:	ldr	r2, [sp, #84]	; 0x54
   16260:	cmp	r2, #0
   16264:	mov	r0, r2
   16268:	movwne	r0, #1
   1626c:	clz	r1, sl
   16270:	lsr	r1, r1, #5
   16274:	orrs	r0, r0, r1
   16278:	moveq	r2, sl
   1627c:	str	r2, [sp, #84]	; 0x54
   16280:	moveq	sl, r0
   16284:	cmp	r8, sl
   16288:	movcc	r0, #39	; 0x27
   1628c:	strbcc	r0, [r5, r8]
   16290:	add	r0, r8, #1
   16294:	cmp	r0, sl
   16298:	movcc	r1, #92	; 0x5c
   1629c:	strbcc	r1, [r5, r0]
   162a0:	add	r0, r8, #2
   162a4:	cmp	r0, sl
   162a8:	movcc	r1, #39	; 0x27
   162ac:	strbcc	r1, [r5, r0]
   162b0:	add	r8, r8, #3
   162b4:	mov	r0, #0
   162b8:	str	r0, [fp, #-56]	; 0xffffffc8
   162bc:	mov	r9, #0
   162c0:	mov	r6, #1
   162c4:	b	15fb0 <__assert_fail@plt+0x4868>
   162c8:	ldr	r0, [sp, #44]	; 0x2c
   162cc:	cmp	r0, #1
   162d0:	bne	163dc <__assert_fail@plt+0x4c94>
   162d4:	str	lr, [sp, #32]
   162d8:	bl	1158c <__ctype_b_loc@plt>
   162dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   162e0:	ldr	r0, [r0]
   162e4:	add	r0, r0, r4, lsl #1
   162e8:	ldrb	r0, [r0, #1]
   162ec:	ubfx	r6, r0, #6, #1
   162f0:	mov	r2, #1
   162f4:	ldr	r0, [sp, #60]	; 0x3c
   162f8:	orr	r1, r6, r0
   162fc:	cmp	r2, #1
   16300:	bhi	16634 <__assert_fail@plt+0x4eec>
   16304:	tst	r1, #1
   16308:	beq	16634 <__assert_fail@plt+0x4eec>
   1630c:	ldr	lr, [sp, #32]
   16310:	b	15fb0 <__assert_fail@plt+0x4868>
   16314:	mov	r9, #0
   16318:	mov	r0, #92	; 0x5c
   1631c:	ldr	r1, [sp, #56]	; 0x38
   16320:	cmp	r1, #0
   16324:	beq	1639c <__assert_fail@plt+0x4c54>
   16328:	mov	r4, #92	; 0x5c
   1632c:	mov	r6, #0
   16330:	cmp	r9, #0
   16334:	bne	1636c <__assert_fail@plt+0x4c24>
   16338:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1633c:	tst	r0, #1
   16340:	beq	1636c <__assert_fail@plt+0x4c24>
   16344:	cmp	r8, sl
   16348:	movcc	r0, #39	; 0x27
   1634c:	strbcc	r0, [r5, r8]
   16350:	add	r0, r8, #1
   16354:	cmp	r0, sl
   16358:	movcc	r1, #39	; 0x27
   1635c:	strbcc	r1, [r5, r0]
   16360:	add	r8, r8, #2
   16364:	mov	r0, #0
   16368:	str	r0, [fp, #-56]	; 0xffffffc8
   1636c:	mov	r1, r6
   16370:	mov	r0, r4
   16374:	cmp	r8, sl
   16378:	strbcc	r0, [r5, r8]
   1637c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16380:	and	r0, r0, r1
   16384:	str	r0, [fp, #-48]	; 0xffffffd0
   16388:	add	r8, r8, #1
   1638c:	add	r7, r7, #1
   16390:	cmn	lr, #1
   16394:	bne	15ce8 <__assert_fail@plt+0x45a0>
   16398:	b	15cf4 <__assert_fail@plt+0x45ac>
   1639c:	mov	r9, #0
   163a0:	ldr	r1, [sp, #92]	; 0x5c
   163a4:	tst	r1, #1
   163a8:	mov	r6, #0
   163ac:	mov	r1, #0
   163b0:	beq	15fb0 <__assert_fail@plt+0x4868>
   163b4:	b	15ff8 <__assert_fail@plt+0x48b0>
   163b8:	mov	r4, #0
   163bc:	ldr	r0, [sp, #40]	; 0x28
   163c0:	cmp	r0, #0
   163c4:	mov	r9, #0
   163c8:	mov	r6, #0
   163cc:	beq	15fb0 <__assert_fail@plt+0x4868>
   163d0:	b	1638c <__assert_fail@plt+0x4c44>
   163d4:	mov	r6, #1
   163d8:	b	15fb0 <__assert_fail@plt+0x4868>
   163dc:	mov	r0, #0
   163e0:	str	r0, [fp, #-36]	; 0xffffffdc
   163e4:	str	r0, [fp, #-40]	; 0xffffffd8
   163e8:	cmn	lr, #1
   163ec:	bne	16400 <__assert_fail@plt+0x4cb8>
   163f0:	mov	r0, ip
   163f4:	bl	115b0 <strlen@plt>
   163f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   163fc:	mov	lr, r0
   16400:	ldr	r0, [sp, #76]	; 0x4c
   16404:	add	r0, r0, r7
   16408:	str	r0, [sp, #24]
   1640c:	mov	r6, #1
   16410:	mov	r2, #0
   16414:	sub	r0, fp, #40	; 0x28
   16418:	mov	r3, r0
   1641c:	str	r5, [sp, #28]
   16420:	str	lr, [sp, #32]
   16424:	b	16468 <__assert_fail@plt+0x4d20>
   16428:	ldr	r5, [sp, #52]	; 0x34
   1642c:	add	r5, r0, r5
   16430:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16434:	bl	1149c <iswprint@plt>
   16438:	cmp	r0, #0
   1643c:	movwne	r0, #1
   16440:	and	r6, r6, r0
   16444:	sub	r0, fp, #40	; 0x28
   16448:	bl	1143c <mbsinit@plt>
   1644c:	sub	r3, fp, #40	; 0x28
   16450:	mov	r2, r5
   16454:	ldr	lr, [sp, #32]
   16458:	cmp	r0, #0
   1645c:	ldr	r5, [sp, #28]
   16460:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16464:	bne	162f4 <__assert_fail@plt+0x4bac>
   16468:	str	r2, [sp, #52]	; 0x34
   1646c:	add	r0, r2, r7
   16470:	add	r1, ip, r0
   16474:	str	r0, [sp, #48]	; 0x30
   16478:	sub	r2, lr, r0
   1647c:	sub	r0, fp, #44	; 0x2c
   16480:	bl	18b98 <__assert_fail@plt+0x7450>
   16484:	cmp	r0, #0
   16488:	beq	16800 <__assert_fail@plt+0x50b8>
   1648c:	cmn	r0, #1
   16490:	beq	167bc <__assert_fail@plt+0x5074>
   16494:	cmn	r0, #2
   16498:	ldr	lr, [sp, #32]
   1649c:	beq	167c4 <__assert_fail@plt+0x507c>
   164a0:	cmp	r0, #2
   164a4:	mov	r1, #0
   164a8:	movwcc	r1, #1
   164ac:	ldr	r2, [sp, #68]	; 0x44
   164b0:	eor	r2, r2, #1
   164b4:	orrs	r1, r2, r1
   164b8:	bne	16428 <__assert_fail@plt+0x4ce0>
   164bc:	ldr	r1, [sp, #52]	; 0x34
   164c0:	ldr	r2, [sp, #24]
   164c4:	add	r1, r2, r1
   164c8:	sub	r2, r0, #1
   164cc:	b	164dc <__assert_fail@plt+0x4d94>
   164d0:	add	r1, r1, #1
   164d4:	subs	r2, r2, #1
   164d8:	beq	16428 <__assert_fail@plt+0x4ce0>
   164dc:	ldrb	r3, [r1]
   164e0:	sub	r3, r3, #91	; 0x5b
   164e4:	cmp	r3, #33	; 0x21
   164e8:	bhi	164d0 <__assert_fail@plt+0x4d88>
   164ec:	add	r5, pc, #0
   164f0:	ldr	pc, [r5, r3, lsl #2]
   164f4:	andeq	r6, r1, ip, ror #17
   164f8:	andeq	r6, r1, ip, ror #17
   164fc:	ldrdeq	r6, [r1], -r0
   16500:	andeq	r6, r1, ip, ror #17
   16504:	ldrdeq	r6, [r1], -r0
   16508:	andeq	r6, r1, ip, ror #17
   1650c:	ldrdeq	r6, [r1], -r0
   16510:	ldrdeq	r6, [r1], -r0
   16514:	ldrdeq	r6, [r1], -r0
   16518:	ldrdeq	r6, [r1], -r0
   1651c:	ldrdeq	r6, [r1], -r0
   16520:	ldrdeq	r6, [r1], -r0
   16524:	ldrdeq	r6, [r1], -r0
   16528:	ldrdeq	r6, [r1], -r0
   1652c:	ldrdeq	r6, [r1], -r0
   16530:	ldrdeq	r6, [r1], -r0
   16534:	ldrdeq	r6, [r1], -r0
   16538:	ldrdeq	r6, [r1], -r0
   1653c:	ldrdeq	r6, [r1], -r0
   16540:	ldrdeq	r6, [r1], -r0
   16544:	ldrdeq	r6, [r1], -r0
   16548:	ldrdeq	r6, [r1], -r0
   1654c:	ldrdeq	r6, [r1], -r0
   16550:	ldrdeq	r6, [r1], -r0
   16554:	ldrdeq	r6, [r1], -r0
   16558:	ldrdeq	r6, [r1], -r0
   1655c:	ldrdeq	r6, [r1], -r0
   16560:	ldrdeq	r6, [r1], -r0
   16564:	ldrdeq	r6, [r1], -r0
   16568:	ldrdeq	r6, [r1], -r0
   1656c:	ldrdeq	r6, [r1], -r0
   16570:	ldrdeq	r6, [r1], -r0
   16574:	ldrdeq	r6, [r1], -r0
   16578:	andeq	r6, r1, ip, ror #17
   1657c:	mov	r8, r0
   16580:	b	15fb0 <__assert_fail@plt+0x4868>
   16584:	ldr	r0, [sp, #36]	; 0x24
   16588:	cmp	r0, #0
   1658c:	beq	1662c <__assert_fail@plt+0x4ee4>
   16590:	add	r0, r7, #2
   16594:	cmp	r0, lr
   16598:	bcs	1662c <__assert_fail@plt+0x4ee4>
   1659c:	add	r1, r7, ip
   165a0:	ldrb	r1, [r1, #1]
   165a4:	cmp	r1, #63	; 0x3f
   165a8:	bne	1662c <__assert_fail@plt+0x4ee4>
   165ac:	ldrb	r1, [ip, r0]
   165b0:	sub	r2, r1, #33	; 0x21
   165b4:	cmp	r2, #29
   165b8:	bhi	1662c <__assert_fail@plt+0x4ee4>
   165bc:	mov	r3, #1
   165c0:	movw	r6, #20929	; 0x51c1
   165c4:	movt	r6, #14336	; 0x3800
   165c8:	tst	r6, r3, lsl r2
   165cc:	beq	1662c <__assert_fail@plt+0x4ee4>
   165d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   165d4:	tst	r2, #1
   165d8:	bne	168f4 <__assert_fail@plt+0x51ac>
   165dc:	cmp	r8, sl
   165e0:	movcc	r2, #63	; 0x3f
   165e4:	strbcc	r2, [r5, r8]
   165e8:	add	r2, r8, #1
   165ec:	cmp	r2, sl
   165f0:	movcc	r3, #34	; 0x22
   165f4:	strbcc	r3, [r5, r2]
   165f8:	add	r2, r8, #2
   165fc:	cmp	r2, sl
   16600:	movcc	r3, #34	; 0x22
   16604:	strbcc	r3, [r5, r2]
   16608:	add	r2, r8, #3
   1660c:	cmp	r2, sl
   16610:	movcc	r3, #63	; 0x3f
   16614:	strbcc	r3, [r5, r2]
   16618:	add	r8, r8, #4
   1661c:	mov	r7, r0
   16620:	mov	r4, r1
   16624:	mov	r6, #0
   16628:	b	15fb0 <__assert_fail@plt+0x4868>
   1662c:	mov	r6, #0
   16630:	b	15fb0 <__assert_fail@plt+0x4868>
   16634:	add	r0, r2, r7
   16638:	str	r0, [sp, #52]	; 0x34
   1663c:	mov	r2, #0
   16640:	ldr	lr, [sp, #32]
   16644:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16648:	str	r1, [sp, #48]	; 0x30
   1664c:	tst	r1, #1
   16650:	bne	1672c <__assert_fail@plt+0x4fe4>
   16654:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16658:	tst	r1, #1
   1665c:	bne	168f4 <__assert_fail@plt+0x51ac>
   16660:	mov	r3, r0
   16664:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16668:	subs	r1, r0, #2
   1666c:	movwne	r1, #1
   16670:	orr	r1, r1, r3
   16674:	tst	r1, #1
   16678:	bne	166b0 <__assert_fail@plt+0x4f68>
   1667c:	cmp	r8, sl
   16680:	movcc	r0, #39	; 0x27
   16684:	strbcc	r0, [r5, r8]
   16688:	add	r2, r8, #1
   1668c:	cmp	r2, sl
   16690:	movcc	r0, #36	; 0x24
   16694:	strbcc	r0, [r5, r2]
   16698:	add	r2, r8, #2
   1669c:	cmp	r2, sl
   166a0:	movcc	r0, #39	; 0x27
   166a4:	strbcc	r0, [r5, r2]
   166a8:	add	r8, r8, #3
   166ac:	mov	r3, #1
   166b0:	cmp	r8, sl
   166b4:	movcc	r1, #92	; 0x5c
   166b8:	strbcc	r1, [r5, r8]
   166bc:	add	r2, r8, #1
   166c0:	cmp	r2, sl
   166c4:	bcs	166d8 <__assert_fail@plt+0x4f90>
   166c8:	uxtb	r1, r4
   166cc:	mov	r0, #48	; 0x30
   166d0:	orr	r1, r0, r1, lsr #6
   166d4:	strb	r1, [r5, r2]
   166d8:	add	r2, r8, #2
   166dc:	cmp	r2, sl
   166e0:	lsrcc	r1, r4, #3
   166e4:	movcc	r0, #6
   166e8:	bficc	r1, r0, #3, #29
   166ec:	strbcc	r1, [r5, r2]
   166f0:	mov	r0, #6
   166f4:	bfi	r4, r0, #3, #29
   166f8:	add	r8, r8, #3
   166fc:	mov	r2, #1
   16700:	mov	r0, r3
   16704:	b	16750 <__assert_fail@plt+0x5008>
   16708:	cmp	r8, sl
   1670c:	strbcc	r4, [r5, r8]
   16710:	ldr	r1, [sp, #76]	; 0x4c
   16714:	ldrb	r4, [r1, r7]
   16718:	add	r8, r8, #1
   1671c:	mov	r7, r3
   16720:	ldr	r1, [sp, #48]	; 0x30
   16724:	tst	r1, #1
   16728:	beq	16654 <__assert_fail@plt+0x4f0c>
   1672c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16730:	tst	r1, #1
   16734:	beq	16748 <__assert_fail@plt+0x5000>
   16738:	cmp	r8, sl
   1673c:	movcc	r1, #92	; 0x5c
   16740:	strbcc	r1, [r5, r8]
   16744:	add	r8, r8, #1
   16748:	mov	r1, #0
   1674c:	str	r1, [fp, #-52]	; 0xffffffcc
   16750:	and	r9, r2, #1
   16754:	add	r3, r7, #1
   16758:	ldr	r1, [sp, #52]	; 0x34
   1675c:	cmp	r1, r3
   16760:	bls	167a4 <__assert_fail@plt+0x505c>
   16764:	cmp	r9, #0
   16768:	movwne	r9, #1
   1676c:	mvn	r1, r0
   16770:	orr	r1, r1, r9
   16774:	tst	r1, #1
   16778:	bne	16708 <__assert_fail@plt+0x4fc0>
   1677c:	cmp	r8, sl
   16780:	movcc	r1, #39	; 0x27
   16784:	strbcc	r1, [r5, r8]
   16788:	add	r1, r8, #1
   1678c:	cmp	r1, sl
   16790:	movcc	r0, #39	; 0x27
   16794:	strbcc	r0, [r5, r1]
   16798:	add	r8, r8, #2
   1679c:	mov	r0, #0
   167a0:	b	16708 <__assert_fail@plt+0x4fc0>
   167a4:	str	r0, [fp, #-56]	; 0xffffffc8
   167a8:	cmp	r9, #0
   167ac:	movwne	r9, #1
   167b0:	cmp	r9, #0
   167b4:	beq	16338 <__assert_fail@plt+0x4bf0>
   167b8:	b	1636c <__assert_fail@plt+0x4c24>
   167bc:	mov	r6, #0
   167c0:	b	16800 <__assert_fail@plt+0x50b8>
   167c4:	mov	r6, #0
   167c8:	ldr	r0, [sp, #48]	; 0x30
   167cc:	cmp	r0, lr
   167d0:	bcs	16800 <__assert_fail@plt+0x50b8>
   167d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   167d8:	add	r0, ip, r7
   167dc:	ldr	r2, [sp, #52]	; 0x34
   167e0:	ldrb	r1, [r0, r2]
   167e4:	cmp	r1, #0
   167e8:	beq	162f4 <__assert_fail@plt+0x4bac>
   167ec:	add	r2, r2, #1
   167f0:	add	r1, r7, r2
   167f4:	cmp	r1, lr
   167f8:	bcc	167e0 <__assert_fail@plt+0x5098>
   167fc:	b	162f4 <__assert_fail@plt+0x4bac>
   16800:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16804:	ldr	r2, [sp, #52]	; 0x34
   16808:	b	162f4 <__assert_fail@plt+0x4bac>
   1680c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16810:	eor	r0, r1, #2
   16814:	orr	r0, r0, r8
   16818:	clz	r0, r0
   1681c:	lsr	r0, r0, #5
   16820:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16824:	tst	r3, r0
   16828:	bne	168f4 <__assert_fail@plt+0x51ac>
   1682c:	mov	r6, r5
   16830:	subs	r0, r1, #2
   16834:	movwne	r0, #1
   16838:	orr	r0, r3, r0
   1683c:	tst	r0, #1
   16840:	ldr	r2, [sp, #92]	; 0x5c
   16844:	ldreq	r0, [sp, #64]	; 0x40
   16848:	eoreq	r0, r0, #1
   1684c:	tsteq	r0, #1
   16850:	bne	16890 <__assert_fail@plt+0x5148>
   16854:	mov	r9, lr
   16858:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1685c:	tst	r0, #1
   16860:	bne	1695c <__assert_fail@plt+0x5214>
   16864:	ldr	r0, [sp, #84]	; 0x54
   16868:	cmp	r0, #0
   1686c:	beq	16890 <__assert_fail@plt+0x5148>
   16870:	mov	r0, #0
   16874:	str	r0, [fp, #-48]	; 0xffffffd0
   16878:	mov	r1, #2
   1687c:	cmp	sl, #0
   16880:	mov	r0, r2
   16884:	mov	r4, r3
   16888:	ldr	r7, [sp, #84]	; 0x54
   1688c:	beq	15a68 <__assert_fail@plt+0x4320>
   16890:	ldr	r1, [fp, #-84]	; 0xffffffac
   16894:	clz	r0, r1
   16898:	lsr	r0, r0, #5
   1689c:	orr	r0, r0, r3
   168a0:	tst	r0, #1
   168a4:	bne	168d0 <__assert_fail@plt+0x5188>
   168a8:	ldrb	r0, [r1]
   168ac:	cmp	r0, #0
   168b0:	beq	168d0 <__assert_fail@plt+0x5188>
   168b4:	add	r1, r1, #1
   168b8:	cmp	r8, sl
   168bc:	strbcc	r0, [r6, r8]
   168c0:	add	r8, r8, #1
   168c4:	ldrb	r0, [r1], #1
   168c8:	cmp	r0, #0
   168cc:	bne	168b8 <__assert_fail@plt+0x5170>
   168d0:	cmp	r8, sl
   168d4:	movcc	r0, #0
   168d8:	strbcc	r0, [r6, r8]
   168dc:	b	16950 <__assert_fail@plt+0x5208>
   168e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   168e4:	mov	lr, r4
   168e8:	b	168f4 <__assert_fail@plt+0x51ac>
   168ec:	ldr	r5, [sp, #28]
   168f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   168f4:	mov	r0, #0
   168f8:	ldr	r1, [fp, #12]
   168fc:	bic	r1, r1, #2
   16900:	mov	r2, #2
   16904:	ldr	r3, [sp, #92]	; 0x5c
   16908:	tst	r3, #1
   1690c:	movwne	r2, #4
   16910:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16914:	cmp	r3, #2
   16918:	movne	r2, r3
   1691c:	str	r2, [sp]
   16920:	str	r1, [sp, #4]
   16924:	str	r0, [sp, #8]
   16928:	ldr	r0, [sp, #80]	; 0x50
   1692c:	str	r0, [sp, #12]
   16930:	ldr	r0, [sp, #88]	; 0x58
   16934:	str	r0, [sp, #16]
   16938:	mov	r0, r5
   1693c:	mov	r1, sl
   16940:	mov	r2, ip
   16944:	mov	r3, lr
   16948:	bl	159dc <__assert_fail@plt+0x4294>
   1694c:	mov	r8, r0
   16950:	mov	r0, r8
   16954:	sub	sp, fp, #28
   16958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1695c:	mov	r0, #5
   16960:	str	r0, [sp]
   16964:	ldr	r0, [fp, #12]
   16968:	str	r0, [sp, #4]
   1696c:	ldr	r0, [fp, #16]
   16970:	str	r0, [sp, #8]
   16974:	ldr	r0, [sp, #80]	; 0x50
   16978:	str	r0, [sp, #12]
   1697c:	ldr	r0, [sp, #88]	; 0x58
   16980:	str	r0, [sp, #16]
   16984:	mov	r0, r6
   16988:	ldr	r1, [sp, #84]	; 0x54
   1698c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16990:	mov	r3, r9
   16994:	b	16948 <__assert_fail@plt+0x5200>
   16998:	bl	11724 <abort@plt>
   1699c:	mov	r3, r2
   169a0:	mov	r2, #0
   169a4:	b	169a8 <__assert_fail@plt+0x5260>
   169a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169ac:	add	fp, sp, #28
   169b0:	sub	sp, sp, #36	; 0x24
   169b4:	mov	r4, r2
   169b8:	str	r2, [sp, #24]
   169bc:	mov	r5, r1
   169c0:	mov	r6, r0
   169c4:	str	r0, [sp, #20]
   169c8:	movw	r8, #46400	; 0xb540
   169cc:	movt	r8, #2
   169d0:	cmp	r3, #0
   169d4:	movne	r8, r3
   169d8:	bl	115f8 <__errno_location@plt>
   169dc:	str	r0, [sp, #28]
   169e0:	ldm	r8, {r3, r9}
   169e4:	ldr	r1, [r8, #40]	; 0x28
   169e8:	ldr	r2, [r8, #44]	; 0x2c
   169ec:	ldr	r7, [r0]
   169f0:	str	r7, [sp, #32]
   169f4:	add	sl, r8, #8
   169f8:	cmp	r4, #0
   169fc:	orreq	r9, r9, #1
   16a00:	stm	sp, {r3, r9, sl}
   16a04:	str	r1, [sp, #12]
   16a08:	str	r2, [sp, #16]
   16a0c:	mov	r0, #0
   16a10:	mov	r1, #0
   16a14:	mov	r2, r6
   16a18:	mov	r3, r5
   16a1c:	mov	r7, r5
   16a20:	bl	159dc <__assert_fail@plt+0x4294>
   16a24:	mov	r5, r0
   16a28:	add	r4, r0, #1
   16a2c:	mov	r0, r4
   16a30:	bl	17cac <__assert_fail@plt+0x6564>
   16a34:	mov	r6, r0
   16a38:	ldr	r0, [r8]
   16a3c:	ldr	r1, [r8, #40]	; 0x28
   16a40:	ldr	r2, [r8, #44]	; 0x2c
   16a44:	stm	sp, {r0, r9, sl}
   16a48:	str	r1, [sp, #12]
   16a4c:	str	r2, [sp, #16]
   16a50:	mov	r0, r6
   16a54:	mov	r1, r4
   16a58:	ldr	r2, [sp, #20]
   16a5c:	mov	r3, r7
   16a60:	bl	159dc <__assert_fail@plt+0x4294>
   16a64:	ldr	r0, [sp, #24]
   16a68:	ldr	r1, [sp, #32]
   16a6c:	ldr	r2, [sp, #28]
   16a70:	str	r1, [r2]
   16a74:	cmp	r0, #0
   16a78:	strne	r5, [r0]
   16a7c:	mov	r0, r6
   16a80:	sub	sp, fp, #28
   16a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a8c:	add	fp, sp, #24
   16a90:	movw	r8, #45424	; 0xb170
   16a94:	movt	r8, #2
   16a98:	ldr	r4, [r8]
   16a9c:	movw	r5, #45428	; 0xb174
   16aa0:	movt	r5, #2
   16aa4:	ldr	r0, [r5]
   16aa8:	cmp	r0, #2
   16aac:	blt	16ad8 <__assert_fail@plt+0x5390>
   16ab0:	add	r7, r4, #12
   16ab4:	mov	r6, #0
   16ab8:	ldr	r0, [r7, r6, lsl #3]
   16abc:	bl	155fc <__assert_fail@plt+0x3eb4>
   16ac0:	add	r0, r6, #1
   16ac4:	ldr	r1, [r5]
   16ac8:	add	r2, r6, #2
   16acc:	cmp	r2, r1
   16ad0:	mov	r6, r0
   16ad4:	blt	16ab8 <__assert_fail@plt+0x5370>
   16ad8:	ldr	r0, [r4, #4]
   16adc:	movw	r9, #46448	; 0xb570
   16ae0:	movt	r9, #2
   16ae4:	cmp	r0, r9
   16ae8:	movw	r7, #45432	; 0xb178
   16aec:	movt	r7, #2
   16af0:	beq	16b00 <__assert_fail@plt+0x53b8>
   16af4:	bl	155fc <__assert_fail@plt+0x3eb4>
   16af8:	mov	r0, #256	; 0x100
   16afc:	stm	r7, {r0, r9}
   16b00:	cmp	r4, r7
   16b04:	beq	16b14 <__assert_fail@plt+0x53cc>
   16b08:	mov	r0, r4
   16b0c:	bl	155fc <__assert_fail@plt+0x3eb4>
   16b10:	str	r7, [r8]
   16b14:	mov	r0, #1
   16b18:	str	r0, [r5]
   16b1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b20:	movw	r3, #46400	; 0xb540
   16b24:	movt	r3, #2
   16b28:	mvn	r2, #0
   16b2c:	b	16b30 <__assert_fail@plt+0x53e8>
   16b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b34:	add	fp, sp, #28
   16b38:	sub	sp, sp, #44	; 0x2c
   16b3c:	mov	r7, r3
   16b40:	str	r2, [sp, #36]	; 0x24
   16b44:	str	r1, [sp, #32]
   16b48:	mov	r5, r0
   16b4c:	bl	115f8 <__errno_location@plt>
   16b50:	cmp	r5, #0
   16b54:	bmi	16cc4 <__assert_fail@plt+0x557c>
   16b58:	cmn	r5, #-2147483647	; 0x80000001
   16b5c:	beq	16cc4 <__assert_fail@plt+0x557c>
   16b60:	movw	r4, #45424	; 0xb170
   16b64:	movt	r4, #2
   16b68:	ldr	r6, [r4]
   16b6c:	str	r0, [sp, #28]
   16b70:	ldr	r0, [r0]
   16b74:	str	r0, [sp, #24]
   16b78:	movw	r8, #45428	; 0xb174
   16b7c:	movt	r8, #2
   16b80:	ldr	r1, [r8]
   16b84:	cmp	r1, r5
   16b88:	ble	16b94 <__assert_fail@plt+0x544c>
   16b8c:	mov	sl, r6
   16b90:	b	16c00 <__assert_fail@plt+0x54b8>
   16b94:	str	r1, [fp, #-32]	; 0xffffffe0
   16b98:	mov	r0, #8
   16b9c:	str	r0, [sp]
   16ba0:	movw	r9, #45432	; 0xb178
   16ba4:	movt	r9, #2
   16ba8:	subs	r0, r6, r9
   16bac:	movne	r0, r6
   16bb0:	sub	r1, r5, r1
   16bb4:	add	r2, r1, #1
   16bb8:	sub	r1, fp, #32
   16bbc:	mvn	r3, #-2147483648	; 0x80000000
   16bc0:	bl	17d88 <__assert_fail@plt+0x6640>
   16bc4:	mov	sl, r0
   16bc8:	str	r0, [r4]
   16bcc:	cmp	r6, r9
   16bd0:	bne	16bdc <__assert_fail@plt+0x5494>
   16bd4:	ldrd	r0, [r9]
   16bd8:	stm	sl, {r0, r1}
   16bdc:	ldr	r1, [r8]
   16be0:	add	r0, sl, r1, lsl #3
   16be4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16be8:	sub	r1, r2, r1
   16bec:	lsl	r2, r1, #3
   16bf0:	mov	r1, #0
   16bf4:	bl	1161c <memset@plt>
   16bf8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16bfc:	str	r0, [r8]
   16c00:	mov	r9, sl
   16c04:	ldr	r6, [r9, r5, lsl #3]!
   16c08:	ldr	r4, [r9, #4]!
   16c0c:	ldm	r7, {r0, r1}
   16c10:	ldr	r2, [r7, #40]	; 0x28
   16c14:	ldr	r3, [r7, #44]	; 0x2c
   16c18:	orr	r8, r1, #1
   16c1c:	add	r1, r7, #8
   16c20:	stm	sp, {r0, r8}
   16c24:	str	r1, [sp, #20]
   16c28:	add	r0, sp, #8
   16c2c:	stm	r0, {r1, r2, r3}
   16c30:	mov	r0, r4
   16c34:	mov	r1, r6
   16c38:	ldr	r2, [sp, #32]
   16c3c:	ldr	r3, [sp, #36]	; 0x24
   16c40:	bl	159dc <__assert_fail@plt+0x4294>
   16c44:	cmp	r6, r0
   16c48:	bhi	16cac <__assert_fail@plt+0x5564>
   16c4c:	add	r6, r0, #1
   16c50:	str	r6, [sl, r5, lsl #3]
   16c54:	movw	r0, #46448	; 0xb570
   16c58:	movt	r0, #2
   16c5c:	cmp	r4, r0
   16c60:	beq	16c6c <__assert_fail@plt+0x5524>
   16c64:	mov	r0, r4
   16c68:	bl	155fc <__assert_fail@plt+0x3eb4>
   16c6c:	mov	r0, r6
   16c70:	bl	17cac <__assert_fail@plt+0x6564>
   16c74:	mov	r4, r0
   16c78:	str	r0, [r9]
   16c7c:	ldr	r0, [r7]
   16c80:	ldr	r1, [r7, #40]	; 0x28
   16c84:	ldr	r2, [r7, #44]	; 0x2c
   16c88:	stm	sp, {r0, r8}
   16c8c:	ldr	r0, [sp, #20]
   16c90:	add	r3, sp, #8
   16c94:	stm	r3, {r0, r1, r2}
   16c98:	mov	r0, r4
   16c9c:	mov	r1, r6
   16ca0:	ldr	r2, [sp, #32]
   16ca4:	ldr	r3, [sp, #36]	; 0x24
   16ca8:	bl	159dc <__assert_fail@plt+0x4294>
   16cac:	ldr	r0, [sp, #28]
   16cb0:	ldr	r1, [sp, #24]
   16cb4:	str	r1, [r0]
   16cb8:	mov	r0, r4
   16cbc:	sub	sp, fp, #28
   16cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cc4:	bl	11724 <abort@plt>
   16cc8:	movw	r3, #46400	; 0xb540
   16ccc:	movt	r3, #2
   16cd0:	b	16b30 <__assert_fail@plt+0x53e8>
   16cd4:	mov	r1, r0
   16cd8:	mov	r0, #0
   16cdc:	b	16b20 <__assert_fail@plt+0x53d8>
   16ce0:	mov	r2, r1
   16ce4:	mov	r1, r0
   16ce8:	mov	r0, #0
   16cec:	b	16cc8 <__assert_fail@plt+0x5580>
   16cf0:	push	{r4, r5, r6, sl, fp, lr}
   16cf4:	add	fp, sp, #16
   16cf8:	sub	sp, sp, #48	; 0x30
   16cfc:	mov	r4, r2
   16d00:	mov	r5, r0
   16d04:	mov	r6, sp
   16d08:	mov	r0, r6
   16d0c:	bl	16d2c <__assert_fail@plt+0x55e4>
   16d10:	mov	r0, r5
   16d14:	mov	r1, r4
   16d18:	mvn	r2, #0
   16d1c:	mov	r3, r6
   16d20:	bl	16b30 <__assert_fail@plt+0x53e8>
   16d24:	sub	sp, fp, #16
   16d28:	pop	{r4, r5, r6, sl, fp, pc}
   16d2c:	push	{fp, lr}
   16d30:	mov	fp, sp
   16d34:	vmov.i32	q8, #0	; 0x00000000
   16d38:	mov	r2, #32
   16d3c:	mov	r3, r0
   16d40:	vst1.32	{d16-d17}, [r3], r2
   16d44:	vst1.32	{d16-d17}, [r3]
   16d48:	add	r2, r0, #16
   16d4c:	vst1.32	{d16-d17}, [r2]
   16d50:	cmp	r1, #10
   16d54:	strne	r1, [r0]
   16d58:	popne	{fp, pc}
   16d5c:	bl	11724 <abort@plt>
   16d60:	push	{r4, r5, r6, r7, fp, lr}
   16d64:	add	fp, sp, #16
   16d68:	sub	sp, sp, #48	; 0x30
   16d6c:	mov	r4, r3
   16d70:	mov	r5, r2
   16d74:	mov	r6, r0
   16d78:	mov	r7, sp
   16d7c:	mov	r0, r7
   16d80:	bl	16d2c <__assert_fail@plt+0x55e4>
   16d84:	mov	r0, r6
   16d88:	mov	r1, r5
   16d8c:	mov	r2, r4
   16d90:	mov	r3, r7
   16d94:	bl	16b30 <__assert_fail@plt+0x53e8>
   16d98:	sub	sp, fp, #16
   16d9c:	pop	{r4, r5, r6, r7, fp, pc}
   16da0:	mov	r2, r1
   16da4:	mov	r1, r0
   16da8:	mov	r0, #0
   16dac:	b	16cf0 <__assert_fail@plt+0x55a8>
   16db0:	mov	r3, r2
   16db4:	mov	r2, r1
   16db8:	mov	r1, r0
   16dbc:	mov	r0, #0
   16dc0:	b	16d60 <__assert_fail@plt+0x5618>
   16dc4:	push	{r4, r5, r6, sl, fp, lr}
   16dc8:	add	fp, sp, #16
   16dcc:	sub	sp, sp, #48	; 0x30
   16dd0:	mov	r4, r1
   16dd4:	mov	r5, r0
   16dd8:	movw	r0, #46400	; 0xb540
   16ddc:	movt	r0, #2
   16de0:	add	r1, r0, #16
   16de4:	mov	r3, #32
   16de8:	vld1.64	{d16-d17}, [r0], r3
   16dec:	vld1.64	{d18-d19}, [r1]
   16df0:	mov	r6, sp
   16df4:	add	r1, r6, #16
   16df8:	vld1.64	{d20-d21}, [r0]
   16dfc:	vst1.64	{d18-d19}, [r1]
   16e00:	mov	r0, r6
   16e04:	vst1.64	{d16-d17}, [r0], r3
   16e08:	vst1.64	{d20-d21}, [r0]
   16e0c:	mov	r0, r6
   16e10:	mov	r1, r2
   16e14:	mov	r2, #1
   16e18:	bl	158d0 <__assert_fail@plt+0x4188>
   16e1c:	mov	r0, #0
   16e20:	mov	r1, r5
   16e24:	mov	r2, r4
   16e28:	mov	r3, r6
   16e2c:	bl	16b30 <__assert_fail@plt+0x53e8>
   16e30:	sub	sp, fp, #16
   16e34:	pop	{r4, r5, r6, sl, fp, pc}
   16e38:	mov	r2, r1
   16e3c:	mvn	r1, #0
   16e40:	b	16dc4 <__assert_fail@plt+0x567c>
   16e44:	mov	r1, #58	; 0x3a
   16e48:	b	16e38 <__assert_fail@plt+0x56f0>
   16e4c:	mov	r2, #58	; 0x3a
   16e50:	b	16dc4 <__assert_fail@plt+0x567c>
   16e54:	push	{r4, r5, r6, sl, fp, lr}
   16e58:	add	fp, sp, #16
   16e5c:	sub	sp, sp, #48	; 0x30
   16e60:	mov	r4, r2
   16e64:	mov	r5, r0
   16e68:	mov	r6, sp
   16e6c:	mov	r0, r6
   16e70:	bl	16d2c <__assert_fail@plt+0x55e4>
   16e74:	mov	r0, r6
   16e78:	mov	r1, #58	; 0x3a
   16e7c:	mov	r2, #1
   16e80:	bl	158d0 <__assert_fail@plt+0x4188>
   16e84:	mov	r0, r5
   16e88:	mov	r1, r4
   16e8c:	mvn	r2, #0
   16e90:	mov	r3, r6
   16e94:	bl	16b30 <__assert_fail@plt+0x53e8>
   16e98:	sub	sp, fp, #16
   16e9c:	pop	{r4, r5, r6, sl, fp, pc}
   16ea0:	push	{fp, lr}
   16ea4:	mov	fp, sp
   16ea8:	sub	sp, sp, #8
   16eac:	mvn	ip, #0
   16eb0:	str	ip, [sp]
   16eb4:	bl	16ec0 <__assert_fail@plt+0x5778>
   16eb8:	mov	sp, fp
   16ebc:	pop	{fp, pc}
   16ec0:	push	{r4, r5, r6, r7, fp, lr}
   16ec4:	add	fp, sp, #16
   16ec8:	sub	sp, sp, #48	; 0x30
   16ecc:	mov	r7, r3
   16ed0:	mov	r5, r0
   16ed4:	movw	r0, #46400	; 0xb540
   16ed8:	movt	r0, #2
   16edc:	add	r3, r0, #16
   16ee0:	mov	r4, #32
   16ee4:	vld1.64	{d16-d17}, [r0], r4
   16ee8:	vld1.64	{d18-d19}, [r3]
   16eec:	mov	r6, sp
   16ef0:	add	r3, r6, #16
   16ef4:	vld1.64	{d20-d21}, [r0]
   16ef8:	vst1.64	{d18-d19}, [r3]
   16efc:	mov	r0, r6
   16f00:	vst1.64	{d16-d17}, [r0], r4
   16f04:	vst1.64	{d20-d21}, [r0]
   16f08:	mov	r0, r6
   16f0c:	bl	15928 <__assert_fail@plt+0x41e0>
   16f10:	ldr	r2, [fp, #8]
   16f14:	mov	r0, r5
   16f18:	mov	r1, r7
   16f1c:	mov	r3, r6
   16f20:	bl	16b30 <__assert_fail@plt+0x53e8>
   16f24:	sub	sp, fp, #16
   16f28:	pop	{r4, r5, r6, r7, fp, pc}
   16f2c:	mov	r3, r2
   16f30:	mov	r2, r1
   16f34:	mov	r1, r0
   16f38:	mov	r0, #0
   16f3c:	b	16ea0 <__assert_fail@plt+0x5758>
   16f40:	push	{fp, lr}
   16f44:	mov	fp, sp
   16f48:	sub	sp, sp, #8
   16f4c:	mov	ip, r2
   16f50:	mov	r2, r1
   16f54:	mov	r1, r0
   16f58:	str	r3, [sp]
   16f5c:	mov	r0, #0
   16f60:	mov	r3, ip
   16f64:	bl	16ec0 <__assert_fail@plt+0x5778>
   16f68:	mov	sp, fp
   16f6c:	pop	{fp, pc}
   16f70:	movw	r3, #45440	; 0xb180
   16f74:	movt	r3, #2
   16f78:	b	16b30 <__assert_fail@plt+0x53e8>
   16f7c:	mov	r2, r1
   16f80:	mov	r1, r0
   16f84:	mov	r0, #0
   16f88:	b	16f70 <__assert_fail@plt+0x5828>
   16f8c:	mvn	r2, #0
   16f90:	b	16f70 <__assert_fail@plt+0x5828>
   16f94:	mov	r1, r0
   16f98:	mov	r0, #0
   16f9c:	b	16f8c <__assert_fail@plt+0x5844>
   16fa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16fa4:	add	fp, sp, #24
   16fa8:	sub	sp, sp, #16
   16fac:	mov	r4, r1
   16fb0:	mov	r5, r0
   16fb4:	mov	r7, #0
   16fb8:	mov	r0, #0
   16fbc:	mov	r1, r5
   16fc0:	mov	r2, #5
   16fc4:	bl	11460 <dcgettext@plt>
   16fc8:	cmp	r0, r5
   16fcc:	beq	16fd8 <__assert_fail@plt+0x5890>
   16fd0:	sub	sp, fp, #24
   16fd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16fd8:	bl	18b60 <__assert_fail@plt+0x7418>
   16fdc:	mov	r6, r0
   16fe0:	mov	r8, #56	; 0x38
   16fe4:	mov	r0, #45	; 0x2d
   16fe8:	stm	sp, {r0, r8}
   16fec:	str	r7, [sp, #8]
   16ff0:	str	r7, [sp, #12]
   16ff4:	mov	r0, r6
   16ff8:	mov	r1, #85	; 0x55
   16ffc:	mov	r2, #84	; 0x54
   17000:	mov	r3, #70	; 0x46
   17004:	bl	1709c <__assert_fail@plt+0x5954>
   17008:	cmp	r0, #0
   1700c:	beq	17028 <__assert_fail@plt+0x58e0>
   17010:	ldrb	r1, [r5]
   17014:	movw	r2, #41963	; 0xa3eb
   17018:	movt	r2, #1
   1701c:	movw	r0, #41967	; 0xa3ef
   17020:	movt	r0, #1
   17024:	b	1706c <__assert_fail@plt+0x5924>
   17028:	mov	r0, #48	; 0x30
   1702c:	mov	r1, #51	; 0x33
   17030:	str	r8, [sp]
   17034:	stmib	sp, {r0, r1}
   17038:	str	r0, [sp, #12]
   1703c:	mov	r0, r6
   17040:	mov	r1, #71	; 0x47
   17044:	mov	r2, #66	; 0x42
   17048:	mov	r3, #49	; 0x31
   1704c:	bl	1709c <__assert_fail@plt+0x5954>
   17050:	cmp	r0, #0
   17054:	beq	1707c <__assert_fail@plt+0x5934>
   17058:	ldrb	r1, [r5]
   1705c:	movw	r2, #41971	; 0xa3f3
   17060:	movt	r2, #1
   17064:	movw	r0, #41975	; 0xa3f7
   17068:	movt	r0, #1
   1706c:	cmp	r1, #96	; 0x60
   17070:	moveq	r0, r2
   17074:	sub	sp, fp, #24
   17078:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1707c:	movw	r1, #41056	; 0xa060
   17080:	movt	r1, #1
   17084:	movw	r0, #41961	; 0xa3e9
   17088:	movt	r0, #1
   1708c:	cmp	r4, #9
   17090:	moveq	r0, r1
   17094:	sub	sp, fp, #24
   17098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1709c:	push	{r4, r5, r6, r7, fp, lr}
   170a0:	add	fp, sp, #16
   170a4:	sub	sp, sp, #16
   170a8:	mov	r4, r3
   170ac:	mov	r5, r2
   170b0:	mov	r7, r1
   170b4:	mov	r6, r0
   170b8:	mov	r0, r1
   170bc:	bl	18a1c <__assert_fail@plt+0x72d4>
   170c0:	ldrb	r1, [r6]
   170c4:	cmp	r0, #0
   170c8:	andne	r1, r1, #223	; 0xdf
   170cc:	mov	r0, #0
   170d0:	cmp	r1, r7
   170d4:	bne	1710c <__assert_fail@plt+0x59c4>
   170d8:	cmp	r7, #0
   170dc:	beq	17114 <__assert_fail@plt+0x59cc>
   170e0:	ldr	r0, [fp, #20]
   170e4:	ldr	r1, [fp, #16]
   170e8:	ldr	r2, [fp, #12]
   170ec:	ldr	r3, [fp, #8]
   170f0:	str	r2, [sp]
   170f4:	str	r1, [sp, #4]
   170f8:	str	r0, [sp, #8]
   170fc:	mov	r0, r6
   17100:	mov	r1, r5
   17104:	mov	r2, r4
   17108:	bl	17120 <__assert_fail@plt+0x59d8>
   1710c:	sub	sp, fp, #16
   17110:	pop	{r4, r5, r6, r7, fp, pc}
   17114:	mov	r0, #1
   17118:	sub	sp, fp, #16
   1711c:	pop	{r4, r5, r6, r7, fp, pc}
   17120:	push	{r4, r5, r6, r7, fp, lr}
   17124:	add	fp, sp, #16
   17128:	sub	sp, sp, #8
   1712c:	mov	r4, r3
   17130:	mov	r5, r2
   17134:	mov	r7, r1
   17138:	mov	r6, r0
   1713c:	mov	r0, r1
   17140:	bl	18a1c <__assert_fail@plt+0x72d4>
   17144:	ldrb	r1, [r6, #1]
   17148:	cmp	r0, #0
   1714c:	andne	r1, r1, #223	; 0xdf
   17150:	mov	r0, #0
   17154:	cmp	r1, r7
   17158:	bne	17188 <__assert_fail@plt+0x5a40>
   1715c:	cmp	r7, #0
   17160:	beq	17190 <__assert_fail@plt+0x5a48>
   17164:	ldr	r0, [fp, #16]
   17168:	ldr	r1, [fp, #12]
   1716c:	ldr	r3, [fp, #8]
   17170:	str	r1, [sp]
   17174:	str	r0, [sp, #4]
   17178:	mov	r0, r6
   1717c:	mov	r1, r5
   17180:	mov	r2, r4
   17184:	bl	1719c <__assert_fail@plt+0x5a54>
   17188:	sub	sp, fp, #16
   1718c:	pop	{r4, r5, r6, r7, fp, pc}
   17190:	mov	r0, #1
   17194:	sub	sp, fp, #16
   17198:	pop	{r4, r5, r6, r7, fp, pc}
   1719c:	push	{r4, r5, r6, r7, fp, lr}
   171a0:	add	fp, sp, #16
   171a4:	sub	sp, sp, #8
   171a8:	mov	r4, r3
   171ac:	mov	r5, r2
   171b0:	mov	r7, r1
   171b4:	mov	r6, r0
   171b8:	mov	r0, r1
   171bc:	bl	18a1c <__assert_fail@plt+0x72d4>
   171c0:	ldrb	r1, [r6, #2]
   171c4:	cmp	r0, #0
   171c8:	andne	r1, r1, #223	; 0xdf
   171cc:	mov	r0, #0
   171d0:	cmp	r1, r7
   171d4:	bne	171fc <__assert_fail@plt+0x5ab4>
   171d8:	cmp	r7, #0
   171dc:	beq	17204 <__assert_fail@plt+0x5abc>
   171e0:	ldr	r0, [fp, #12]
   171e4:	ldr	r3, [fp, #8]
   171e8:	str	r0, [sp]
   171ec:	mov	r0, r6
   171f0:	mov	r1, r5
   171f4:	mov	r2, r4
   171f8:	bl	17210 <__assert_fail@plt+0x5ac8>
   171fc:	sub	sp, fp, #16
   17200:	pop	{r4, r5, r6, r7, fp, pc}
   17204:	mov	r0, #1
   17208:	sub	sp, fp, #16
   1720c:	pop	{r4, r5, r6, r7, fp, pc}
   17210:	push	{r4, r5, r6, r7, fp, lr}
   17214:	add	fp, sp, #16
   17218:	mov	r4, r3
   1721c:	mov	r5, r2
   17220:	mov	r7, r1
   17224:	mov	r6, r0
   17228:	mov	r0, r1
   1722c:	bl	18a1c <__assert_fail@plt+0x72d4>
   17230:	ldrb	r1, [r6, #3]
   17234:	ldr	r3, [fp, #8]
   17238:	cmp	r0, #0
   1723c:	andne	r1, r1, #223	; 0xdf
   17240:	mov	r0, #0
   17244:	cmp	r1, r7
   17248:	bne	1726c <__assert_fail@plt+0x5b24>
   1724c:	cmp	r7, #0
   17250:	beq	17268 <__assert_fail@plt+0x5b20>
   17254:	mov	r0, r6
   17258:	mov	r1, r5
   1725c:	mov	r2, r4
   17260:	pop	{r4, r5, r6, r7, fp, lr}
   17264:	b	17270 <__assert_fail@plt+0x5b28>
   17268:	mov	r0, #1
   1726c:	pop	{r4, r5, r6, r7, fp, pc}
   17270:	push	{r4, r5, r6, r7, fp, lr}
   17274:	add	fp, sp, #16
   17278:	mov	r4, r3
   1727c:	mov	r5, r2
   17280:	mov	r7, r1
   17284:	mov	r6, r0
   17288:	mov	r0, r1
   1728c:	bl	18a1c <__assert_fail@plt+0x72d4>
   17290:	ldrb	r1, [r6, #4]
   17294:	cmp	r0, #0
   17298:	andne	r1, r1, #223	; 0xdf
   1729c:	mov	r0, #0
   172a0:	cmp	r1, r7
   172a4:	bne	172c8 <__assert_fail@plt+0x5b80>
   172a8:	cmp	r7, #0
   172ac:	beq	172c4 <__assert_fail@plt+0x5b7c>
   172b0:	mov	r0, r6
   172b4:	mov	r1, r5
   172b8:	mov	r2, r4
   172bc:	pop	{r4, r5, r6, r7, fp, lr}
   172c0:	b	172cc <__assert_fail@plt+0x5b84>
   172c4:	mov	r0, #1
   172c8:	pop	{r4, r5, r6, r7, fp, pc}
   172cc:	push	{r4, r5, r6, sl, fp, lr}
   172d0:	add	fp, sp, #16
   172d4:	mov	r4, r2
   172d8:	mov	r6, r1
   172dc:	mov	r5, r0
   172e0:	mov	r0, r1
   172e4:	bl	18a1c <__assert_fail@plt+0x72d4>
   172e8:	ldrb	r1, [r5, #5]
   172ec:	cmp	r0, #0
   172f0:	andne	r1, r1, #223	; 0xdf
   172f4:	mov	r0, #0
   172f8:	cmp	r1, r6
   172fc:	bne	1731c <__assert_fail@plt+0x5bd4>
   17300:	cmp	r6, #0
   17304:	beq	17318 <__assert_fail@plt+0x5bd0>
   17308:	mov	r0, r5
   1730c:	mov	r1, r4
   17310:	pop	{r4, r5, r6, sl, fp, lr}
   17314:	b	17320 <__assert_fail@plt+0x5bd8>
   17318:	mov	r0, #1
   1731c:	pop	{r4, r5, r6, sl, fp, pc}
   17320:	push	{r4, r5, fp, lr}
   17324:	add	fp, sp, #8
   17328:	mov	r5, r1
   1732c:	mov	r4, r0
   17330:	mov	r0, r1
   17334:	bl	18a1c <__assert_fail@plt+0x72d4>
   17338:	ldrb	r1, [r4, #6]
   1733c:	cmp	r0, #0
   17340:	andne	r1, r1, #223	; 0xdf
   17344:	mov	r0, #0
   17348:	cmp	r1, r5
   1734c:	popne	{r4, r5, fp, pc}
   17350:	cmp	r5, #0
   17354:	beq	17364 <__assert_fail@plt+0x5c1c>
   17358:	mov	r0, r4
   1735c:	pop	{r4, r5, fp, lr}
   17360:	b	1736c <__assert_fail@plt+0x5c24>
   17364:	mov	r0, #1
   17368:	pop	{r4, r5, fp, pc}
   1736c:	push	{r4, sl, fp, lr}
   17370:	add	fp, sp, #8
   17374:	mov	r4, r0
   17378:	mov	r0, #0
   1737c:	bl	18a1c <__assert_fail@plt+0x72d4>
   17380:	ldrb	r1, [r4, #7]
   17384:	cmp	r0, #0
   17388:	beq	1739c <__assert_fail@plt+0x5c54>
   1738c:	tst	r1, #223	; 0xdf
   17390:	bne	173a4 <__assert_fail@plt+0x5c5c>
   17394:	mov	r0, #1
   17398:	pop	{r4, sl, fp, pc}
   1739c:	cmp	r1, #0
   173a0:	beq	17394 <__assert_fail@plt+0x5c4c>
   173a4:	mov	r0, #0
   173a8:	pop	{r4, sl, fp, pc}
   173ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   173b0:	add	fp, sp, #24
   173b4:	mov	r7, r2
   173b8:	mov	r5, r1
   173bc:	mov	r6, r0
   173c0:	movw	r9, #0
   173c4:	movt	r9, #32752	; 0x7ff0
   173c8:	mov	r0, r6
   173cc:	mov	r1, r5
   173d0:	mov	r2, r7
   173d4:	bl	113e8 <read@plt>
   173d8:	mov	r4, r0
   173dc:	cmn	r0, #1
   173e0:	bgt	1743c <__assert_fail@plt+0x5cf4>
   173e4:	bl	115f8 <__errno_location@plt>
   173e8:	ldr	r0, [r0]
   173ec:	cmp	r0, #4
   173f0:	beq	173c8 <__assert_fail@plt+0x5c80>
   173f4:	cmp	r7, r9
   173f8:	mov	r1, #0
   173fc:	movwhi	r1, #1
   17400:	sub	r2, r0, #22
   17404:	clz	r2, r2
   17408:	lsr	r2, r2, #5
   1740c:	ands	r1, r1, r2
   17410:	moveq	r8, r4
   17414:	mov	r1, r7
   17418:	movwne	r1, #0
   1741c:	movtne	r1, #32752	; 0x7ff0
   17420:	cmp	r7, r9
   17424:	bls	17434 <__assert_fail@plt+0x5cec>
   17428:	cmp	r0, #22
   1742c:	mov	r7, r1
   17430:	beq	173c8 <__assert_fail@plt+0x5c80>
   17434:	mov	r0, r8
   17438:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1743c:	mov	r0, r4
   17440:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17444:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17448:	add	fp, sp, #24
   1744c:	mov	r7, r2
   17450:	mov	r5, r1
   17454:	mov	r6, r0
   17458:	movw	r9, #0
   1745c:	movt	r9, #32752	; 0x7ff0
   17460:	mov	r0, r6
   17464:	mov	r1, r5
   17468:	mov	r2, r7
   1746c:	bl	11634 <write@plt>
   17470:	mov	r4, r0
   17474:	cmn	r0, #1
   17478:	bgt	174d4 <__assert_fail@plt+0x5d8c>
   1747c:	bl	115f8 <__errno_location@plt>
   17480:	ldr	r0, [r0]
   17484:	cmp	r0, #4
   17488:	beq	17460 <__assert_fail@plt+0x5d18>
   1748c:	cmp	r7, r9
   17490:	mov	r1, #0
   17494:	movwhi	r1, #1
   17498:	sub	r2, r0, #22
   1749c:	clz	r2, r2
   174a0:	lsr	r2, r2, #5
   174a4:	ands	r1, r1, r2
   174a8:	moveq	r8, r4
   174ac:	mov	r1, r7
   174b0:	movwne	r1, #0
   174b4:	movtne	r1, #32752	; 0x7ff0
   174b8:	cmp	r7, r9
   174bc:	bls	174cc <__assert_fail@plt+0x5d84>
   174c0:	cmp	r0, #22
   174c4:	mov	r7, r1
   174c8:	beq	17460 <__assert_fail@plt+0x5d18>
   174cc:	mov	r0, r8
   174d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174d4:	mov	r0, r4
   174d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   174dc:	push	{r4, sl, fp, lr}
   174e0:	add	fp, sp, #8
   174e4:	mov	r4, r1
   174e8:	bl	174f8 <__assert_fail@plt+0x5db0>
   174ec:	str	r0, [r4]
   174f0:	asr	r0, r0, #31
   174f4:	pop	{r4, sl, fp, pc}
   174f8:	push	{r4, r5, r6, sl, fp, lr}
   174fc:	add	fp, sp, #16
   17500:	sub	sp, sp, #8
   17504:	mov	r5, r0
   17508:	ldrb	r0, [r0]
   1750c:	sub	r0, r0, #48	; 0x30
   17510:	cmp	r0, #10
   17514:	bcs	17548 <__assert_fail@plt+0x5e00>
   17518:	add	r1, sp, #4
   1751c:	mov	r0, r5
   17520:	mov	r2, #10
   17524:	bl	113dc <strtol@plt>
   17528:	cmp	r0, #64	; 0x40
   1752c:	bgt	17654 <__assert_fail@plt+0x5f0c>
   17530:	ldr	r1, [sp, #4]
   17534:	ldrb	r1, [r1]
   17538:	cmp	r1, #0
   1753c:	bne	17654 <__assert_fail@plt+0x5f0c>
   17540:	sub	sp, fp, #16
   17544:	pop	{r4, r5, r6, sl, fp, pc}
   17548:	mov	r4, #0
   1754c:	movw	r6, #45488	; 0xb1b0
   17550:	movt	r6, #2
   17554:	add	r0, r6, r4
   17558:	add	r0, r0, #4
   1755c:	mov	r1, r5
   17560:	bl	113d0 <strcmp@plt>
   17564:	cmp	r0, #0
   17568:	beq	1760c <__assert_fail@plt+0x5ec4>
   1756c:	add	r4, r4, #12
   17570:	cmp	r4, #420	; 0x1a4
   17574:	bne	17554 <__assert_fail@plt+0x5e0c>
   17578:	bl	1170c <__libc_current_sigrtmin@plt>
   1757c:	mov	r4, r0
   17580:	bl	115bc <__libc_current_sigrtmax@plt>
   17584:	mov	r6, r0
   17588:	cmp	r4, #1
   1758c:	blt	175ac <__assert_fail@plt+0x5e64>
   17590:	movw	r1, #42064	; 0xa450
   17594:	movt	r1, #1
   17598:	mov	r0, r5
   1759c:	mov	r2, #5
   175a0:	bl	11718 <strncmp@plt>
   175a4:	cmp	r0, #0
   175a8:	beq	17618 <__assert_fail@plt+0x5ed0>
   175ac:	cmp	r6, #1
   175b0:	blt	17654 <__assert_fail@plt+0x5f0c>
   175b4:	movw	r1, #42070	; 0xa456
   175b8:	movt	r1, #1
   175bc:	mov	r0, r5
   175c0:	mov	r2, #5
   175c4:	bl	11718 <strncmp@plt>
   175c8:	cmp	r0, #0
   175cc:	bne	17654 <__assert_fail@plt+0x5f0c>
   175d0:	add	r0, r5, #5
   175d4:	mov	r1, sp
   175d8:	mov	r2, #10
   175dc:	bl	113dc <strtol@plt>
   175e0:	ldr	r1, [sp]
   175e4:	ldrb	r1, [r1]
   175e8:	cmp	r1, #0
   175ec:	bne	17654 <__assert_fail@plt+0x5f0c>
   175f0:	sub	r1, r4, r6
   175f4:	cmp	r1, r0
   175f8:	cmple	r0, #0
   175fc:	bgt	17654 <__assert_fail@plt+0x5f0c>
   17600:	add	r0, r0, r6
   17604:	sub	sp, fp, #16
   17608:	pop	{r4, r5, r6, sl, fp, pc}
   1760c:	ldr	r0, [r6, r4]
   17610:	sub	sp, fp, #16
   17614:	pop	{r4, r5, r6, sl, fp, pc}
   17618:	add	r0, r5, #5
   1761c:	mov	r1, sp
   17620:	mov	r2, #10
   17624:	bl	113dc <strtol@plt>
   17628:	sub	r1, r6, r4
   1762c:	cmp	r0, r1
   17630:	bgt	17654 <__assert_fail@plt+0x5f0c>
   17634:	cmp	r0, #0
   17638:	bmi	17654 <__assert_fail@plt+0x5f0c>
   1763c:	ldr	r1, [sp]
   17640:	ldrb	r1, [r1]
   17644:	cmp	r1, #0
   17648:	addeq	r0, r0, r4
   1764c:	subeq	sp, fp, #16
   17650:	popeq	{r4, r5, r6, sl, fp, pc}
   17654:	mvn	r0, #0
   17658:	sub	sp, fp, #16
   1765c:	pop	{r4, r5, r6, sl, fp, pc}
   17660:	push	{r4, r5, r6, r7, fp, lr}
   17664:	add	fp, sp, #16
   17668:	sub	sp, sp, #8
   1766c:	mov	r4, r1
   17670:	mov	r5, r0
   17674:	mov	r0, #0
   17678:	movw	r1, #45488	; 0xb1b0
   1767c:	movt	r1, #2
   17680:	ldr	r2, [r1, -r0]
   17684:	cmp	r2, r5
   17688:	beq	176e8 <__assert_fail@plt+0x5fa0>
   1768c:	sub	r0, r0, #12
   17690:	cmn	r0, #420	; 0x1a4
   17694:	bne	17680 <__assert_fail@plt+0x5f38>
   17698:	bl	1170c <__libc_current_sigrtmin@plt>
   1769c:	mov	r7, r0
   176a0:	mvn	r6, #0
   176a4:	bl	115bc <__libc_current_sigrtmax@plt>
   176a8:	cmp	r7, r5
   176ac:	bgt	1773c <__assert_fail@plt+0x5ff4>
   176b0:	cmp	r0, r5
   176b4:	blt	1773c <__assert_fail@plt+0x5ff4>
   176b8:	sub	r1, r0, r7
   176bc:	add	r1, r1, r1, lsr #31
   176c0:	add	r1, r7, r1, asr #1
   176c4:	cmp	r1, r5
   176c8:	bge	17700 <__assert_fail@plt+0x5fb8>
   176cc:	mov	r1, #88	; 0x58
   176d0:	strh	r1, [r4, #4]
   176d4:	movw	r1, #21586	; 0x5452
   176d8:	movt	r1, #16717	; 0x414d
   176dc:	str	r1, [r4]
   176e0:	mov	r7, r0
   176e4:	b	17714 <__assert_fail@plt+0x5fcc>
   176e8:	sub	r0, r1, r0
   176ec:	add	r1, r0, #4
   176f0:	mov	r0, r4
   176f4:	bl	114f0 <strcpy@plt>
   176f8:	mov	r6, #0
   176fc:	b	1773c <__assert_fail@plt+0x5ff4>
   17700:	mov	r0, #78	; 0x4e
   17704:	strh	r0, [r4, #4]
   17708:	movw	r0, #21586	; 0x5452
   1770c:	movt	r0, #18765	; 0x494d
   17710:	str	r0, [r4]
   17714:	subs	r0, r5, r7
   17718:	mov	r6, #0
   1771c:	beq	1773c <__assert_fail@plt+0x5ff4>
   17720:	str	r0, [sp]
   17724:	add	r0, r4, #5
   17728:	movw	r3, #42076	; 0xa45c
   1772c:	movt	r3, #1
   17730:	mov	r1, #1
   17734:	mvn	r2, #0
   17738:	bl	11604 <__sprintf_chk@plt>
   1773c:	mov	r0, r6
   17740:	sub	sp, fp, #16
   17744:	pop	{r4, r5, r6, r7, fp, pc}
   17748:	push	{r4, r5, r6, r7, fp, lr}
   1774c:	add	fp, sp, #16
   17750:	mov	r4, r0
   17754:	cmp	r0, #2
   17758:	bhi	17788 <__assert_fail@plt+0x6040>
   1775c:	mov	r0, r4
   17760:	bl	18c38 <__assert_fail@plt+0x74f0>
   17764:	mov	r5, r0
   17768:	bl	115f8 <__errno_location@plt>
   1776c:	mov	r6, r0
   17770:	ldr	r7, [r0]
   17774:	mov	r0, r4
   17778:	bl	11730 <close@plt>
   1777c:	str	r7, [r6]
   17780:	mov	r0, r5
   17784:	pop	{r4, r5, r6, r7, fp, pc}
   17788:	mov	r0, r4
   1778c:	pop	{r4, r5, r6, r7, fp, pc}
   17790:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17794:	add	fp, sp, #24
   17798:	sub	sp, sp, #32
   1779c:	mov	r4, r2
   177a0:	mov	r8, r0
   177a4:	ldr	r6, [fp, #12]
   177a8:	ldr	r7, [fp, #8]
   177ac:	cmp	r1, #0
   177b0:	beq	177d8 <__assert_fail@plt+0x6090>
   177b4:	mov	r5, r1
   177b8:	str	r4, [sp]
   177bc:	str	r3, [sp, #4]
   177c0:	movw	r2, #42080	; 0xa460
   177c4:	movt	r2, #1
   177c8:	mov	r0, r8
   177cc:	mov	r1, #1
   177d0:	mov	r3, r5
   177d4:	b	177f0 <__assert_fail@plt+0x60a8>
   177d8:	str	r3, [sp]
   177dc:	movw	r2, #42092	; 0xa46c
   177e0:	movt	r2, #1
   177e4:	mov	r0, r8
   177e8:	mov	r1, #1
   177ec:	mov	r3, r4
   177f0:	bl	11658 <__fprintf_chk@plt>
   177f4:	movw	r1, #42099	; 0xa473
   177f8:	movt	r1, #1
   177fc:	mov	r0, #0
   17800:	mov	r2, #5
   17804:	bl	11460 <dcgettext@plt>
   17808:	mov	r3, r0
   1780c:	movw	r0, #2022	; 0x7e6
   17810:	str	r0, [sp]
   17814:	movw	r2, #42817	; 0xa741
   17818:	movt	r2, #1
   1781c:	mov	r0, r8
   17820:	mov	r1, #1
   17824:	bl	11658 <__fprintf_chk@plt>
   17828:	movw	r4, #38460	; 0x963c
   1782c:	movt	r4, #1
   17830:	mov	r0, r4
   17834:	mov	r1, r8
   17838:	bl	113b8 <fputs_unlocked@plt>
   1783c:	movw	r1, #42103	; 0xa477
   17840:	movt	r1, #1
   17844:	mov	r0, #0
   17848:	mov	r2, #5
   1784c:	bl	11460 <dcgettext@plt>
   17850:	mov	r2, r0
   17854:	movw	r3, #42274	; 0xa522
   17858:	movt	r3, #1
   1785c:	mov	r0, r8
   17860:	mov	r1, #1
   17864:	bl	11658 <__fprintf_chk@plt>
   17868:	mov	r0, r4
   1786c:	mov	r1, r8
   17870:	bl	113b8 <fputs_unlocked@plt>
   17874:	cmp	r6, #9
   17878:	bhi	178b4 <__assert_fail@plt+0x616c>
   1787c:	add	r0, pc, #0
   17880:	ldr	pc, [r0, r6, lsl #2]
   17884:	andeq	r7, r1, ip, lsr #17
   17888:	andeq	r7, r1, r0, asr #17
   1788c:	strdeq	r7, [r1], -r0
   17890:	andeq	r7, r1, r8, lsl r9
   17894:	andeq	r7, r1, r0, asr #18
   17898:	andeq	r7, r1, r8, ror #18
   1789c:	muleq	r1, r0, r9
   178a0:	andeq	r7, r1, r8, asr #19
   178a4:	andeq	r7, r1, r8, ror #20
   178a8:	andeq	r7, r1, r0, lsl sl
   178ac:	sub	sp, fp, #24
   178b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178b4:	movw	r1, #42627	; 0xa683
   178b8:	movt	r1, #1
   178bc:	b	17a18 <__assert_fail@plt+0x62d0>
   178c0:	movw	r1, #42308	; 0xa544
   178c4:	movt	r1, #1
   178c8:	mov	r0, #0
   178cc:	mov	r2, #5
   178d0:	bl	11460 <dcgettext@plt>
   178d4:	mov	r2, r0
   178d8:	ldr	r3, [r7]
   178dc:	mov	r0, r8
   178e0:	mov	r1, #1
   178e4:	sub	sp, fp, #24
   178e8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   178ec:	b	11658 <__fprintf_chk@plt>
   178f0:	movw	r1, #42324	; 0xa554
   178f4:	movt	r1, #1
   178f8:	mov	r0, #0
   178fc:	mov	r2, #5
   17900:	bl	11460 <dcgettext@plt>
   17904:	mov	r2, r0
   17908:	ldr	r3, [r7]
   1790c:	ldr	r0, [r7, #4]
   17910:	str	r0, [sp]
   17914:	b	17a04 <__assert_fail@plt+0x62bc>
   17918:	movw	r1, #42347	; 0xa56b
   1791c:	movt	r1, #1
   17920:	mov	r0, #0
   17924:	mov	r2, #5
   17928:	bl	11460 <dcgettext@plt>
   1792c:	mov	r2, r0
   17930:	ldr	r3, [r7]
   17934:	ldmib	r7, {r0, r1}
   17938:	stm	sp, {r0, r1}
   1793c:	b	17a04 <__assert_fail@plt+0x62bc>
   17940:	movw	r1, #42375	; 0xa587
   17944:	movt	r1, #1
   17948:	mov	r0, #0
   1794c:	mov	r2, #5
   17950:	bl	11460 <dcgettext@plt>
   17954:	mov	r2, r0
   17958:	ldr	r3, [r7]
   1795c:	ldmib	r7, {r0, r1, r7}
   17960:	stm	sp, {r0, r1, r7}
   17964:	b	17a04 <__assert_fail@plt+0x62bc>
   17968:	movw	r1, #42407	; 0xa5a7
   1796c:	movt	r1, #1
   17970:	mov	r0, #0
   17974:	mov	r2, #5
   17978:	bl	11460 <dcgettext@plt>
   1797c:	mov	r2, r0
   17980:	ldr	r3, [r7]
   17984:	ldmib	r7, {r0, r1, r6, r7}
   17988:	stm	sp, {r0, r1, r6, r7}
   1798c:	b	17a04 <__assert_fail@plt+0x62bc>
   17990:	movw	r1, #42443	; 0xa5cb
   17994:	movt	r1, #1
   17998:	mov	r0, #0
   1799c:	mov	r2, #5
   179a0:	bl	11460 <dcgettext@plt>
   179a4:	mov	r2, r0
   179a8:	ldr	r3, [r7]
   179ac:	ldmib	r7, {r0, r1, r6}
   179b0:	ldr	r5, [r7, #16]
   179b4:	ldr	r7, [r7, #20]
   179b8:	stm	sp, {r0, r1, r6}
   179bc:	str	r5, [sp, #12]
   179c0:	str	r7, [sp, #16]
   179c4:	b	17a04 <__assert_fail@plt+0x62bc>
   179c8:	movw	r1, #42483	; 0xa5f3
   179cc:	movt	r1, #1
   179d0:	mov	r0, #0
   179d4:	mov	r2, #5
   179d8:	bl	11460 <dcgettext@plt>
   179dc:	mov	r2, r0
   179e0:	ldr	r3, [r7]
   179e4:	ldmib	r7, {r0, r1, r6}
   179e8:	ldr	r5, [r7, #16]
   179ec:	ldr	r4, [r7, #20]
   179f0:	ldr	r7, [r7, #24]
   179f4:	stm	sp, {r0, r1, r6}
   179f8:	str	r5, [sp, #12]
   179fc:	str	r4, [sp, #16]
   17a00:	str	r7, [sp, #20]
   17a04:	mov	r0, r8
   17a08:	mov	r1, #1
   17a0c:	b	17ab8 <__assert_fail@plt+0x6370>
   17a10:	movw	r1, #42575	; 0xa64f
   17a14:	movt	r1, #1
   17a18:	mov	r0, #0
   17a1c:	mov	r2, #5
   17a20:	bl	11460 <dcgettext@plt>
   17a24:	mov	ip, r0
   17a28:	ldr	r3, [r7]
   17a2c:	ldr	r0, [r7, #4]
   17a30:	ldr	r1, [r7, #8]
   17a34:	ldr	r6, [r7, #12]
   17a38:	ldr	r5, [r7, #16]
   17a3c:	ldr	r4, [r7, #20]
   17a40:	ldr	r2, [r7, #24]
   17a44:	ldr	lr, [r7, #28]
   17a48:	ldr	r7, [r7, #32]
   17a4c:	stm	sp, {r0, r1, r6}
   17a50:	str	r5, [sp, #12]
   17a54:	str	r4, [sp, #16]
   17a58:	str	r2, [sp, #20]
   17a5c:	str	lr, [sp, #24]
   17a60:	str	r7, [sp, #28]
   17a64:	b	17aac <__assert_fail@plt+0x6364>
   17a68:	movw	r1, #42527	; 0xa61f
   17a6c:	movt	r1, #1
   17a70:	mov	r0, #0
   17a74:	mov	r2, #5
   17a78:	bl	11460 <dcgettext@plt>
   17a7c:	mov	ip, r0
   17a80:	ldr	r3, [r7]
   17a84:	ldmib	r7, {r0, r1, r6}
   17a88:	ldr	r5, [r7, #16]
   17a8c:	ldr	r4, [r7, #20]
   17a90:	ldr	r2, [r7, #24]
   17a94:	ldr	r7, [r7, #28]
   17a98:	stm	sp, {r0, r1, r6}
   17a9c:	str	r5, [sp, #12]
   17aa0:	str	r4, [sp, #16]
   17aa4:	str	r2, [sp, #20]
   17aa8:	str	r7, [sp, #24]
   17aac:	mov	r0, r8
   17ab0:	mov	r1, #1
   17ab4:	mov	r2, ip
   17ab8:	bl	11658 <__fprintf_chk@plt>
   17abc:	sub	sp, fp, #24
   17ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ac4:	push	{r4, sl, fp, lr}
   17ac8:	add	fp, sp, #8
   17acc:	sub	sp, sp, #8
   17ad0:	mov	lr, #0
   17ad4:	ldr	ip, [fp, #8]
   17ad8:	ldr	r4, [ip, lr, lsl #2]
   17adc:	add	lr, lr, #1
   17ae0:	cmp	r4, #0
   17ae4:	bne	17ad8 <__assert_fail@plt+0x6390>
   17ae8:	sub	r4, lr, #1
   17aec:	str	ip, [sp]
   17af0:	str	r4, [sp, #4]
   17af4:	bl	17790 <__assert_fail@plt+0x6048>
   17af8:	sub	sp, fp, #8
   17afc:	pop	{r4, sl, fp, pc}
   17b00:	push	{r4, r5, fp, lr}
   17b04:	add	fp, sp, #8
   17b08:	sub	sp, sp, #48	; 0x30
   17b0c:	mov	ip, #0
   17b10:	ldr	r4, [fp, #8]
   17b14:	add	lr, sp, #8
   17b18:	ldr	r5, [r4]
   17b1c:	str	r5, [lr, ip, lsl #2]
   17b20:	cmp	r5, #0
   17b24:	beq	17b3c <__assert_fail@plt+0x63f4>
   17b28:	add	ip, ip, #1
   17b2c:	add	r4, r4, #4
   17b30:	cmp	ip, #10
   17b34:	bne	17b18 <__assert_fail@plt+0x63d0>
   17b38:	mov	ip, #10
   17b3c:	str	lr, [sp]
   17b40:	str	ip, [sp, #4]
   17b44:	bl	17790 <__assert_fail@plt+0x6048>
   17b48:	sub	sp, fp, #8
   17b4c:	pop	{r4, r5, fp, pc}
   17b50:	push	{fp, lr}
   17b54:	mov	fp, sp
   17b58:	sub	sp, sp, #8
   17b5c:	add	ip, fp, #8
   17b60:	str	ip, [sp, #4]
   17b64:	str	ip, [sp]
   17b68:	bl	17b00 <__assert_fail@plt+0x63b8>
   17b6c:	mov	sp, fp
   17b70:	pop	{fp, pc}
   17b74:	push	{fp, lr}
   17b78:	mov	fp, sp
   17b7c:	movw	r0, #45932	; 0xb36c
   17b80:	movt	r0, #2
   17b84:	ldr	r1, [r0]
   17b88:	movw	r0, #38460	; 0x963c
   17b8c:	movt	r0, #1
   17b90:	bl	113b8 <fputs_unlocked@plt>
   17b94:	movw	r1, #42687	; 0xa6bf
   17b98:	movt	r1, #1
   17b9c:	mov	r0, #0
   17ba0:	mov	r2, #5
   17ba4:	bl	11460 <dcgettext@plt>
   17ba8:	mov	r1, r0
   17bac:	movw	r2, #42707	; 0xa6d3
   17bb0:	movt	r2, #1
   17bb4:	mov	r0, #1
   17bb8:	bl	11628 <__printf_chk@plt>
   17bbc:	movw	r1, #42729	; 0xa6e9
   17bc0:	movt	r1, #1
   17bc4:	mov	r0, #0
   17bc8:	mov	r2, #5
   17bcc:	bl	11460 <dcgettext@plt>
   17bd0:	mov	r1, r0
   17bd4:	movw	r2, #39531	; 0x9a6b
   17bd8:	movt	r2, #1
   17bdc:	movw	r3, #40244	; 0x9d34
   17be0:	movt	r3, #1
   17be4:	mov	r0, #1
   17be8:	bl	11628 <__printf_chk@plt>
   17bec:	movw	r1, #42749	; 0xa6fd
   17bf0:	movt	r1, #1
   17bf4:	mov	r0, #0
   17bf8:	mov	r2, #5
   17bfc:	bl	11460 <dcgettext@plt>
   17c00:	mov	r1, r0
   17c04:	movw	r2, #42788	; 0xa724
   17c08:	movt	r2, #1
   17c0c:	mov	r0, #1
   17c10:	pop	{fp, lr}
   17c14:	b	11628 <__printf_chk@plt>
   17c18:	push	{fp, lr}
   17c1c:	mov	fp, sp
   17c20:	bl	18754 <__assert_fail@plt+0x700c>
   17c24:	cmp	r0, #0
   17c28:	popne	{fp, pc}
   17c2c:	bl	17ff8 <__assert_fail@plt+0x68b0>
   17c30:	b	17c34 <__assert_fail@plt+0x64ec>
   17c34:	push	{r4, r5, r6, sl, fp, lr}
   17c38:	add	fp, sp, #16
   17c3c:	mov	r4, r2
   17c40:	mov	r5, r1
   17c44:	mov	r6, r0
   17c48:	bl	18bfc <__assert_fail@plt+0x74b4>
   17c4c:	cmp	r0, #0
   17c50:	popne	{r4, r5, r6, sl, fp, pc}
   17c54:	cmp	r6, #0
   17c58:	beq	17c6c <__assert_fail@plt+0x6524>
   17c5c:	cmp	r5, #0
   17c60:	cmpne	r4, #0
   17c64:	bne	17c6c <__assert_fail@plt+0x6524>
   17c68:	pop	{r4, r5, r6, sl, fp, pc}
   17c6c:	bl	17ff8 <__assert_fail@plt+0x68b0>
   17c70:	push	{fp, lr}
   17c74:	mov	fp, sp
   17c78:	bl	186cc <__assert_fail@plt+0x6f84>
   17c7c:	pop	{fp, lr}
   17c80:	b	17c84 <__assert_fail@plt+0x653c>
   17c84:	cmp	r0, #0
   17c88:	bxne	lr
   17c8c:	push	{fp, lr}
   17c90:	mov	fp, sp
   17c94:	bl	17ff8 <__assert_fail@plt+0x68b0>
   17c98:	push	{fp, lr}
   17c9c:	mov	fp, sp
   17ca0:	bl	18b2c <__assert_fail@plt+0x73e4>
   17ca4:	pop	{fp, lr}
   17ca8:	b	17c84 <__assert_fail@plt+0x653c>
   17cac:	b	17c70 <__assert_fail@plt+0x6528>
   17cb0:	push	{r4, r5, fp, lr}
   17cb4:	add	fp, sp, #8
   17cb8:	mov	r4, r1
   17cbc:	mov	r5, r0
   17cc0:	bl	186fc <__assert_fail@plt+0x6fb4>
   17cc4:	cmp	r0, #0
   17cc8:	popne	{r4, r5, fp, pc}
   17ccc:	cmp	r5, #0
   17cd0:	beq	17ce0 <__assert_fail@plt+0x6598>
   17cd4:	cmp	r4, #0
   17cd8:	bne	17ce0 <__assert_fail@plt+0x6598>
   17cdc:	pop	{r4, r5, fp, pc}
   17ce0:	bl	17ff8 <__assert_fail@plt+0x68b0>
   17ce4:	push	{fp, lr}
   17ce8:	mov	fp, sp
   17cec:	bl	18b30 <__assert_fail@plt+0x73e8>
   17cf0:	pop	{fp, lr}
   17cf4:	b	17c84 <__assert_fail@plt+0x653c>
   17cf8:	push	{fp, lr}
   17cfc:	mov	fp, sp
   17d00:	bl	18b40 <__assert_fail@plt+0x73f8>
   17d04:	pop	{fp, lr}
   17d08:	b	17c84 <__assert_fail@plt+0x653c>
   17d0c:	mov	r2, r1
   17d10:	mov	r1, r0
   17d14:	mov	r0, #0
   17d18:	b	17c34 <__assert_fail@plt+0x64ec>
   17d1c:	mov	r2, r1
   17d20:	mov	r1, r0
   17d24:	mov	r0, #0
   17d28:	b	17cf8 <__assert_fail@plt+0x65b0>
   17d2c:	mov	r2, #1
   17d30:	b	17d34 <__assert_fail@plt+0x65ec>
   17d34:	push	{r4, r5, fp, lr}
   17d38:	add	fp, sp, #8
   17d3c:	mov	r4, r1
   17d40:	ldr	r5, [r1]
   17d44:	cmp	r0, #0
   17d48:	beq	17d60 <__assert_fail@plt+0x6618>
   17d4c:	mov	r1, #1
   17d50:	add	r1, r1, r5, lsr #1
   17d54:	adds	r5, r5, r1
   17d58:	bcc	17d78 <__assert_fail@plt+0x6630>
   17d5c:	bl	17ff8 <__assert_fail@plt+0x68b0>
   17d60:	cmp	r5, #0
   17d64:	bne	17d78 <__assert_fail@plt+0x6630>
   17d68:	mov	r1, #64	; 0x40
   17d6c:	udiv	r5, r1, r2
   17d70:	cmp	r2, #64	; 0x40
   17d74:	addhi	r5, r5, #1
   17d78:	mov	r1, r5
   17d7c:	bl	17c34 <__assert_fail@plt+0x64ec>
   17d80:	str	r5, [r4]
   17d84:	pop	{r4, r5, fp, pc}
   17d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17d8c:	add	fp, sp, #24
   17d90:	mov	r8, r1
   17d94:	ldr	r6, [r1]
   17d98:	add	r1, r6, r6, asr #1
   17d9c:	cmp	r1, r6
   17da0:	mvnvs	r1, #-2147483648	; 0x80000000
   17da4:	cmp	r1, r3
   17da8:	mov	r5, r1
   17dac:	movgt	r5, r3
   17db0:	cmn	r3, #1
   17db4:	movle	r5, r1
   17db8:	ldr	r4, [fp, #8]
   17dbc:	cmn	r4, #1
   17dc0:	ble	17de8 <__assert_fail@plt+0x66a0>
   17dc4:	cmp	r4, #0
   17dc8:	beq	17e3c <__assert_fail@plt+0x66f4>
   17dcc:	cmn	r5, #1
   17dd0:	ble	17e10 <__assert_fail@plt+0x66c8>
   17dd4:	mvn	r7, #-2147483648	; 0x80000000
   17dd8:	udiv	r1, r7, r4
   17ddc:	cmp	r1, r5
   17de0:	bge	17e3c <__assert_fail@plt+0x66f4>
   17de4:	b	17e4c <__assert_fail@plt+0x6704>
   17de8:	cmn	r5, #1
   17dec:	ble	17e2c <__assert_fail@plt+0x66e4>
   17df0:	cmn	r4, #1
   17df4:	beq	17e3c <__assert_fail@plt+0x66f4>
   17df8:	mov	r1, #-2147483648	; 0x80000000
   17dfc:	sdiv	r1, r1, r4
   17e00:	mvn	r7, #-2147483648	; 0x80000000
   17e04:	cmp	r1, r5
   17e08:	bge	17e3c <__assert_fail@plt+0x66f4>
   17e0c:	b	17e4c <__assert_fail@plt+0x6704>
   17e10:	beq	17e3c <__assert_fail@plt+0x66f4>
   17e14:	mov	r1, #-2147483648	; 0x80000000
   17e18:	sdiv	r1, r1, r5
   17e1c:	mvn	r7, #-2147483648	; 0x80000000
   17e20:	cmp	r1, r4
   17e24:	bge	17e3c <__assert_fail@plt+0x66f4>
   17e28:	b	17e4c <__assert_fail@plt+0x6704>
   17e2c:	mvn	r7, #-2147483648	; 0x80000000
   17e30:	sdiv	r1, r7, r4
   17e34:	cmp	r5, r1
   17e38:	blt	17e4c <__assert_fail@plt+0x6704>
   17e3c:	mul	r1, r5, r4
   17e40:	mov	r7, #64	; 0x40
   17e44:	cmp	r1, #63	; 0x3f
   17e48:	bgt	17e54 <__assert_fail@plt+0x670c>
   17e4c:	sdiv	r5, r7, r4
   17e50:	mul	r1, r5, r4
   17e54:	cmp	r0, #0
   17e58:	moveq	r7, #0
   17e5c:	streq	r7, [r8]
   17e60:	sub	r7, r5, r6
   17e64:	cmp	r7, r2
   17e68:	bge	17f14 <__assert_fail@plt+0x67cc>
   17e6c:	add	r5, r6, r2
   17e70:	mov	r1, #0
   17e74:	cmp	r5, r3
   17e78:	mov	r2, #0
   17e7c:	movwgt	r2, #1
   17e80:	cmn	r3, #1
   17e84:	movwgt	r1, #1
   17e88:	cmp	r5, r6
   17e8c:	bvs	17efc <__assert_fail@plt+0x67b4>
   17e90:	ands	r1, r1, r2
   17e94:	bne	17efc <__assert_fail@plt+0x67b4>
   17e98:	cmn	r4, #1
   17e9c:	ble	17ec4 <__assert_fail@plt+0x677c>
   17ea0:	cmp	r4, #0
   17ea4:	beq	17f10 <__assert_fail@plt+0x67c8>
   17ea8:	cmn	r5, #1
   17eac:	ble	17ee8 <__assert_fail@plt+0x67a0>
   17eb0:	mvn	r1, #-2147483648	; 0x80000000
   17eb4:	udiv	r1, r1, r4
   17eb8:	cmp	r1, r5
   17ebc:	bge	17f10 <__assert_fail@plt+0x67c8>
   17ec0:	b	17efc <__assert_fail@plt+0x67b4>
   17ec4:	cmn	r5, #1
   17ec8:	ble	17f00 <__assert_fail@plt+0x67b8>
   17ecc:	cmn	r4, #1
   17ed0:	beq	17f10 <__assert_fail@plt+0x67c8>
   17ed4:	mov	r1, #-2147483648	; 0x80000000
   17ed8:	sdiv	r1, r1, r4
   17edc:	cmp	r1, r5
   17ee0:	bge	17f10 <__assert_fail@plt+0x67c8>
   17ee4:	b	17efc <__assert_fail@plt+0x67b4>
   17ee8:	beq	17f10 <__assert_fail@plt+0x67c8>
   17eec:	mov	r1, #-2147483648	; 0x80000000
   17ef0:	sdiv	r1, r1, r5
   17ef4:	cmp	r1, r4
   17ef8:	bge	17f10 <__assert_fail@plt+0x67c8>
   17efc:	bl	17ff8 <__assert_fail@plt+0x68b0>
   17f00:	mvn	r1, #-2147483648	; 0x80000000
   17f04:	sdiv	r1, r1, r4
   17f08:	cmp	r5, r1
   17f0c:	blt	17efc <__assert_fail@plt+0x67b4>
   17f10:	mul	r1, r5, r4
   17f14:	bl	17cb0 <__assert_fail@plt+0x6568>
   17f18:	str	r5, [r8]
   17f1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f20:	mov	r1, #1
   17f24:	b	17f28 <__assert_fail@plt+0x67e0>
   17f28:	push	{fp, lr}
   17f2c:	mov	fp, sp
   17f30:	bl	18678 <__assert_fail@plt+0x6f30>
   17f34:	pop	{fp, lr}
   17f38:	b	17c84 <__assert_fail@plt+0x653c>
   17f3c:	mov	r1, #1
   17f40:	b	17f44 <__assert_fail@plt+0x67fc>
   17f44:	push	{fp, lr}
   17f48:	mov	fp, sp
   17f4c:	bl	18b3c <__assert_fail@plt+0x73f4>
   17f50:	pop	{fp, lr}
   17f54:	b	17c84 <__assert_fail@plt+0x653c>
   17f58:	push	{r4, r5, fp, lr}
   17f5c:	add	fp, sp, #8
   17f60:	mov	r4, r1
   17f64:	mov	r5, r0
   17f68:	mov	r0, r1
   17f6c:	bl	17c70 <__assert_fail@plt+0x6528>
   17f70:	mov	r1, r5
   17f74:	mov	r2, r4
   17f78:	pop	{r4, r5, fp, lr}
   17f7c:	b	11430 <memcpy@plt>
   17f80:	push	{r4, r5, fp, lr}
   17f84:	add	fp, sp, #8
   17f88:	mov	r4, r1
   17f8c:	mov	r5, r0
   17f90:	mov	r0, r1
   17f94:	bl	17c98 <__assert_fail@plt+0x6550>
   17f98:	mov	r1, r5
   17f9c:	mov	r2, r4
   17fa0:	pop	{r4, r5, fp, lr}
   17fa4:	b	11430 <memcpy@plt>
   17fa8:	push	{r4, r5, fp, lr}
   17fac:	add	fp, sp, #8
   17fb0:	mov	r4, r1
   17fb4:	mov	r5, r0
   17fb8:	add	r0, r1, #1
   17fbc:	bl	17c98 <__assert_fail@plt+0x6550>
   17fc0:	mov	r1, #0
   17fc4:	strb	r1, [r0, r4]
   17fc8:	mov	r1, r5
   17fcc:	mov	r2, r4
   17fd0:	pop	{r4, r5, fp, lr}
   17fd4:	b	11430 <memcpy@plt>
   17fd8:	push	{r4, sl, fp, lr}
   17fdc:	add	fp, sp, #8
   17fe0:	mov	r4, r0
   17fe4:	bl	115b0 <strlen@plt>
   17fe8:	add	r1, r0, #1
   17fec:	mov	r0, r4
   17ff0:	pop	{r4, sl, fp, lr}
   17ff4:	b	17f58 <__assert_fail@plt+0x6810>
   17ff8:	push	{fp, lr}
   17ffc:	mov	fp, sp
   18000:	movw	r0, #45416	; 0xb168
   18004:	movt	r0, #2
   18008:	ldr	r4, [r0]
   1800c:	movw	r1, #42864	; 0xa770
   18010:	movt	r1, #1
   18014:	mov	r0, #0
   18018:	mov	r2, #5
   1801c:	bl	11460 <dcgettext@plt>
   18020:	mov	r3, r0
   18024:	movw	r2, #41418	; 0xa1ca
   18028:	movt	r2, #1
   1802c:	mov	r0, r4
   18030:	mov	r1, #0
   18034:	bl	11520 <error@plt>
   18038:	bl	11724 <abort@plt>
   1803c:	bx	lr
   18040:	b	18760 <__assert_fail@plt+0x7018>
   18044:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18048:	add	fp, sp, #24
   1804c:	sub	sp, sp, #16
   18050:	mov	r5, r3
   18054:	mov	r6, r2
   18058:	mov	r2, r1
   1805c:	mov	r8, r0
   18060:	ldr	r0, [fp, #16]
   18064:	str	r0, [sp]
   18068:	add	r3, sp, #8
   1806c:	mov	r0, r8
   18070:	mov	r1, #0
   18074:	bl	1813c <__assert_fail@plt+0x69f4>
   18078:	cmp	r0, #0
   1807c:	bne	1810c <__assert_fail@plt+0x69c4>
   18080:	ldr	r7, [sp, #8]
   18084:	ldr	r4, [sp, #12]
   18088:	subs	r0, r7, r6
   1808c:	sbcs	r0, r4, r5
   18090:	bcc	180b4 <__assert_fail@plt+0x696c>
   18094:	ldr	r0, [fp, #12]
   18098:	ldr	r1, [fp, #8]
   1809c:	subs	r1, r1, r7
   180a0:	sbcs	r0, r0, r4
   180a4:	ldrcs	r0, [sp, #8]
   180a8:	ldrcs	r1, [sp, #12]
   180ac:	subcs	sp, fp, #24
   180b0:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   180b4:	bl	115f8 <__errno_location@plt>
   180b8:	subs	r1, r7, #1073741824	; 0x40000000
   180bc:	sbcs	r1, r4, #0
   180c0:	movcc	r1, #34	; 0x22
   180c4:	movcs	r1, #75	; 0x4b
   180c8:	str	r1, [r0]
   180cc:	ldr	r5, [fp, #24]
   180d0:	ldr	r6, [fp, #20]
   180d4:	bl	115f8 <__errno_location@plt>
   180d8:	ldr	r4, [r0]
   180dc:	mov	r0, r8
   180e0:	bl	16f94 <__assert_fail@plt+0x584c>
   180e4:	str	r0, [sp]
   180e8:	subs	r1, r4, #22
   180ec:	movne	r1, r4
   180f0:	cmp	r5, #0
   180f4:	movweq	r5, #1
   180f8:	movw	r2, #39637	; 0x9ad5
   180fc:	movt	r2, #1
   18100:	mov	r0, r5
   18104:	mov	r3, r6
   18108:	bl	11520 <error@plt>
   1810c:	cmp	r0, #1
   18110:	beq	18128 <__assert_fail@plt+0x69e0>
   18114:	cmp	r0, #3
   18118:	bne	180cc <__assert_fail@plt+0x6984>
   1811c:	bl	115f8 <__errno_location@plt>
   18120:	mov	r1, #0
   18124:	b	180c8 <__assert_fail@plt+0x6980>
   18128:	bl	115f8 <__errno_location@plt>
   1812c:	mov	r1, #75	; 0x4b
   18130:	b	180c8 <__assert_fail@plt+0x6980>
   18134:	mov	r1, #10
   18138:	b	18044 <__assert_fail@plt+0x68fc>
   1813c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18140:	add	fp, sp, #28
   18144:	sub	sp, sp, #20
   18148:	cmp	r2, #37	; 0x25
   1814c:	bcs	18580 <__assert_fail@plt+0x6e38>
   18150:	mov	r5, r2
   18154:	mov	r6, r1
   18158:	mov	r4, r0
   1815c:	str	r3, [sp, #4]
   18160:	ldr	sl, [fp, #8]
   18164:	bl	115f8 <__errno_location@plt>
   18168:	mov	r7, r0
   1816c:	mov	r0, #0
   18170:	str	r0, [r7]
   18174:	bl	1158c <__ctype_b_loc@plt>
   18178:	ldr	r1, [r0]
   1817c:	mov	r2, r4
   18180:	ldrb	r0, [r2], #1
   18184:	add	r3, r1, r0, lsl #1
   18188:	ldrb	r3, [r3, #1]
   1818c:	tst	r3, #32
   18190:	bne	18180 <__assert_fail@plt+0x6a38>
   18194:	add	r9, sp, #16
   18198:	cmp	r6, #0
   1819c:	movne	r9, r6
   181a0:	mov	r8, #4
   181a4:	cmp	r0, #45	; 0x2d
   181a8:	beq	18574 <__assert_fail@plt+0x6e2c>
   181ac:	mov	r0, r4
   181b0:	mov	r1, r9
   181b4:	mov	r2, r5
   181b8:	bl	1164c <strtoumax@plt>
   181bc:	str	r1, [sp, #12]
   181c0:	str	r0, [sp, #8]
   181c4:	ldr	r6, [r9]
   181c8:	cmp	r6, r4
   181cc:	beq	181f4 <__assert_fail@plt+0x6aac>
   181d0:	ldr	r0, [r7]
   181d4:	cmp	r0, #0
   181d8:	beq	1822c <__assert_fail@plt+0x6ae4>
   181dc:	cmp	r0, #34	; 0x22
   181e0:	bne	18574 <__assert_fail@plt+0x6e2c>
   181e4:	mov	r8, #1
   181e8:	cmp	sl, #0
   181ec:	bne	18238 <__assert_fail@plt+0x6af0>
   181f0:	b	18564 <__assert_fail@plt+0x6e1c>
   181f4:	cmp	sl, #0
   181f8:	beq	18574 <__assert_fail@plt+0x6e2c>
   181fc:	ldrb	r1, [r6]
   18200:	cmp	r1, #0
   18204:	beq	18574 <__assert_fail@plt+0x6e2c>
   18208:	mov	r0, sl
   1820c:	bl	115c8 <strchr@plt>
   18210:	cmp	r0, #0
   18214:	beq	18574 <__assert_fail@plt+0x6e2c>
   18218:	mov	r8, #0
   1821c:	str	r8, [sp, #12]
   18220:	mov	r0, #1
   18224:	str	r0, [sp, #8]
   18228:	b	18238 <__assert_fail@plt+0x6af0>
   1822c:	mov	r8, r0
   18230:	cmp	sl, #0
   18234:	beq	18564 <__assert_fail@plt+0x6e1c>
   18238:	ldrb	r4, [r6]
   1823c:	cmp	r4, #0
   18240:	beq	18564 <__assert_fail@plt+0x6e1c>
   18244:	mov	r0, sl
   18248:	mov	r1, r4
   1824c:	bl	115c8 <strchr@plt>
   18250:	cmp	r0, #0
   18254:	beq	18480 <__assert_fail@plt+0x6d38>
   18258:	sub	r0, r4, #69	; 0x45
   1825c:	mov	r7, #1
   18260:	mov	r5, #1024	; 0x400
   18264:	cmp	r0, #47	; 0x2f
   18268:	bhi	1837c <__assert_fail@plt+0x6c34>
   1826c:	add	r1, pc, #0
   18270:	ldr	pc, [r1, r0, lsl #2]
   18274:	andeq	r8, r1, r4, lsr r3
   18278:	andeq	r8, r1, ip, ror r3
   1827c:	andeq	r8, r1, r4, lsr r3
   18280:	andeq	r8, r1, ip, ror r3
   18284:	andeq	r8, r1, ip, ror r3
   18288:	andeq	r8, r1, ip, ror r3
   1828c:	andeq	r8, r1, r4, lsr r3
   18290:	andeq	r8, r1, ip, ror r3
   18294:	andeq	r8, r1, r4, lsr r3
   18298:	andeq	r8, r1, ip, ror r3
   1829c:	andeq	r8, r1, ip, ror r3
   182a0:	andeq	r8, r1, r4, lsr r3
   182a4:	andeq	r8, r1, ip, ror r3
   182a8:	andeq	r8, r1, ip, ror r3
   182ac:	andeq	r8, r1, ip, ror r3
   182b0:	andeq	r8, r1, r4, lsr r3
   182b4:	andeq	r8, r1, ip, ror r3
   182b8:	andeq	r8, r1, ip, ror r3
   182bc:	andeq	r8, r1, ip, ror r3
   182c0:	andeq	r8, r1, ip, ror r3
   182c4:	andeq	r8, r1, r4, lsr r3
   182c8:	andeq	r8, r1, r4, lsr r3
   182cc:	andeq	r8, r1, ip, ror r3
   182d0:	andeq	r8, r1, ip, ror r3
   182d4:	andeq	r8, r1, ip, ror r3
   182d8:	andeq	r8, r1, ip, ror r3
   182dc:	andeq	r8, r1, ip, ror r3
   182e0:	andeq	r8, r1, ip, ror r3
   182e4:	andeq	r8, r1, ip, ror r3
   182e8:	andeq	r8, r1, ip, ror r3
   182ec:	andeq	r8, r1, ip, ror r3
   182f0:	andeq	r8, r1, ip, ror r3
   182f4:	andeq	r8, r1, ip, ror r3
   182f8:	andeq	r8, r1, ip, ror r3
   182fc:	andeq	r8, r1, r4, lsr r3
   18300:	andeq	r8, r1, ip, ror r3
   18304:	andeq	r8, r1, ip, ror r3
   18308:	andeq	r8, r1, ip, ror r3
   1830c:	andeq	r8, r1, r4, lsr r3
   18310:	andeq	r8, r1, ip, ror r3
   18314:	andeq	r8, r1, r4, lsr r3
   18318:	andeq	r8, r1, ip, ror r3
   1831c:	andeq	r8, r1, ip, ror r3
   18320:	andeq	r8, r1, ip, ror r3
   18324:	andeq	r8, r1, ip, ror r3
   18328:	andeq	r8, r1, ip, ror r3
   1832c:	andeq	r8, r1, ip, ror r3
   18330:	andeq	r8, r1, r4, lsr r3
   18334:	mov	r0, sl
   18338:	mov	r1, #48	; 0x30
   1833c:	bl	115c8 <strchr@plt>
   18340:	cmp	r0, #0
   18344:	beq	1837c <__assert_fail@plt+0x6c34>
   18348:	ldrb	r0, [r6, #1]
   1834c:	cmp	r0, #66	; 0x42
   18350:	cmpne	r0, #68	; 0x44
   18354:	bne	18364 <__assert_fail@plt+0x6c1c>
   18358:	mov	r7, #2
   1835c:	mov	r5, #1000	; 0x3e8
   18360:	b	1837c <__assert_fail@plt+0x6c34>
   18364:	cmp	r0, #105	; 0x69
   18368:	bne	1837c <__assert_fail@plt+0x6c34>
   1836c:	ldrb	r0, [r6, #2]
   18370:	mov	r7, #1
   18374:	cmp	r0, #66	; 0x42
   18378:	movweq	r7, #3
   1837c:	sub	r1, r4, #66	; 0x42
   18380:	cmp	r1, #53	; 0x35
   18384:	bhi	18480 <__assert_fail@plt+0x6d38>
   18388:	mov	r0, #0
   1838c:	add	r2, pc, #0
   18390:	ldr	pc, [r2, r1, lsl #2]
   18394:	andeq	r8, r1, r8, ror #9
   18398:	andeq	r8, r1, r0, lsl #9
   1839c:	andeq	r8, r1, r0, lsl #9
   183a0:	strdeq	r8, [r1], -r4
   183a4:	andeq	r8, r1, r0, lsl #9
   183a8:	andeq	r8, r1, ip, ror #8
   183ac:	andeq	r8, r1, r0, lsl #9
   183b0:	andeq	r8, r1, r0, lsl #9
   183b4:	andeq	r8, r1, r0, lsl #9
   183b8:	muleq	r1, r8, r4
   183bc:	andeq	r8, r1, r0, lsl #9
   183c0:	andeq	r8, r1, ip, lsr #9
   183c4:	andeq	r8, r1, r0, lsl #9
   183c8:	andeq	r8, r1, r0, lsl #9
   183cc:	andeq	r8, r1, r8, lsl #10
   183d0:	andeq	r8, r1, r0, lsl #9
   183d4:	andeq	r8, r1, r0, lsl #9
   183d8:	andeq	r8, r1, r0, lsl #9
   183dc:	andeq	r8, r1, r0, asr #9
   183e0:	andeq	r8, r1, r0, lsl #9
   183e4:	andeq	r8, r1, r0, lsl #9
   183e8:	andeq	r8, r1, r0, lsl #9
   183ec:	andeq	r8, r1, r0, lsl #9
   183f0:	andeq	r8, r1, ip, lsl r5
   183f4:	ldrdeq	r8, [r1], -r4
   183f8:	andeq	r8, r1, r0, lsl #9
   183fc:	andeq	r8, r1, r0, lsl #9
   18400:	andeq	r8, r1, r0, lsl #9
   18404:	andeq	r8, r1, r0, lsl #9
   18408:	andeq	r8, r1, r0, lsl #9
   1840c:	andeq	r8, r1, r0, lsl #9
   18410:	andeq	r8, r1, r0, lsl #9
   18414:	andeq	r8, r1, r0, lsr r5
   18418:	andeq	r8, r1, r8, asr #10
   1841c:	andeq	r8, r1, r0, lsl #9
   18420:	andeq	r8, r1, r0, lsl #9
   18424:	andeq	r8, r1, r0, lsl #9
   18428:	andeq	r8, r1, ip, ror #8
   1842c:	andeq	r8, r1, r0, lsl #9
   18430:	andeq	r8, r1, r0, lsl #9
   18434:	andeq	r8, r1, r0, lsl #9
   18438:	muleq	r1, r8, r4
   1843c:	andeq	r8, r1, r0, lsl #9
   18440:	andeq	r8, r1, ip, lsr #9
   18444:	andeq	r8, r1, r0, lsl #9
   18448:	andeq	r8, r1, r0, lsl #9
   1844c:	andeq	r8, r1, r0, lsl #9
   18450:	andeq	r8, r1, r0, lsl #9
   18454:	andeq	r8, r1, r0, lsl #9
   18458:	andeq	r8, r1, r0, lsl #9
   1845c:	andeq	r8, r1, r0, asr #9
   18460:	andeq	r8, r1, r0, lsl #9
   18464:	andeq	r8, r1, r0, lsl #9
   18468:	andeq	r8, r1, ip, lsr r5
   1846c:	add	r0, sp, #8
   18470:	mov	r1, r5
   18474:	mov	r2, #3
   18478:	bl	1862c <__assert_fail@plt+0x6ee4>
   1847c:	b	18548 <__assert_fail@plt+0x6e00>
   18480:	ldr	r0, [sp, #8]
   18484:	ldr	r1, [sp, #12]
   18488:	ldr	r2, [sp, #4]
   1848c:	strd	r0, [r2]
   18490:	orr	r8, r8, #2
   18494:	b	18574 <__assert_fail@plt+0x6e2c>
   18498:	add	r0, sp, #8
   1849c:	mov	r1, r5
   184a0:	mov	r2, #1
   184a4:	bl	1862c <__assert_fail@plt+0x6ee4>
   184a8:	b	18548 <__assert_fail@plt+0x6e00>
   184ac:	add	r0, sp, #8
   184b0:	mov	r1, r5
   184b4:	mov	r2, #2
   184b8:	bl	1862c <__assert_fail@plt+0x6ee4>
   184bc:	b	18548 <__assert_fail@plt+0x6e00>
   184c0:	add	r0, sp, #8
   184c4:	mov	r1, r5
   184c8:	mov	r2, #4
   184cc:	bl	1862c <__assert_fail@plt+0x6ee4>
   184d0:	b	18548 <__assert_fail@plt+0x6e00>
   184d4:	add	r0, sp, #8
   184d8:	mov	r1, r5
   184dc:	mov	r2, #7
   184e0:	bl	1862c <__assert_fail@plt+0x6ee4>
   184e4:	b	18548 <__assert_fail@plt+0x6e00>
   184e8:	add	r0, sp, #8
   184ec:	mov	r1, #1024	; 0x400
   184f0:	b	18544 <__assert_fail@plt+0x6dfc>
   184f4:	add	r0, sp, #8
   184f8:	mov	r1, r5
   184fc:	mov	r2, #6
   18500:	bl	1862c <__assert_fail@plt+0x6ee4>
   18504:	b	18548 <__assert_fail@plt+0x6e00>
   18508:	add	r0, sp, #8
   1850c:	mov	r1, r5
   18510:	mov	r2, #5
   18514:	bl	1862c <__assert_fail@plt+0x6ee4>
   18518:	b	18548 <__assert_fail@plt+0x6e00>
   1851c:	add	r0, sp, #8
   18520:	mov	r1, r5
   18524:	mov	r2, #8
   18528:	bl	1862c <__assert_fail@plt+0x6ee4>
   1852c:	b	18548 <__assert_fail@plt+0x6e00>
   18530:	add	r0, sp, #8
   18534:	mov	r1, #512	; 0x200
   18538:	b	18544 <__assert_fail@plt+0x6dfc>
   1853c:	add	r0, sp, #8
   18540:	mov	r1, #2
   18544:	bl	185a0 <__assert_fail@plt+0x6e58>
   18548:	ldr	r1, [r9]
   1854c:	add	r2, r1, r7
   18550:	str	r2, [r9]
   18554:	ldrb	r1, [r1, r7]
   18558:	orr	r8, r0, r8
   1855c:	cmp	r1, #0
   18560:	orrne	r8, r8, #2
   18564:	ldr	r0, [sp, #8]
   18568:	ldr	r1, [sp, #12]
   1856c:	ldr	r2, [sp, #4]
   18570:	strd	r0, [r2]
   18574:	mov	r0, r8
   18578:	sub	sp, fp, #28
   1857c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18580:	movw	r0, #42881	; 0xa781
   18584:	movt	r0, #1
   18588:	movw	r1, #42919	; 0xa7a7
   1858c:	movt	r1, #1
   18590:	movw	r3, #42935	; 0xa7b7
   18594:	movt	r3, #1
   18598:	mov	r2, #85	; 0x55
   1859c:	bl	11748 <__assert_fail@plt>
   185a0:	push	{r4, r5, r6, r7, fp, lr}
   185a4:	add	fp, sp, #16
   185a8:	mov	r5, r1
   185ac:	mov	r4, r0
   185b0:	cmn	r1, #1
   185b4:	ble	185ec <__assert_fail@plt+0x6ea4>
   185b8:	cmp	r5, #0
   185bc:	beq	1860c <__assert_fail@plt+0x6ec4>
   185c0:	asr	r3, r5, #31
   185c4:	mvn	r6, #0
   185c8:	mvn	r0, #0
   185cc:	mvn	r1, #0
   185d0:	mov	r2, r5
   185d4:	bl	18f38 <__assert_fail@plt+0x77f0>
   185d8:	ldrd	r2, [r4]
   185dc:	subs	r0, r0, r2
   185e0:	sbcs	r0, r1, r3
   185e4:	bcc	185fc <__assert_fail@plt+0x6eb4>
   185e8:	b	1860c <__assert_fail@plt+0x6ec4>
   185ec:	ldrd	r0, [r4]
   185f0:	orrs	r0, r0, r1
   185f4:	beq	1860c <__assert_fail@plt+0x6ec4>
   185f8:	mvn	r6, #0
   185fc:	mov	r0, #1
   18600:	mvn	r7, #0
   18604:	strd	r6, [r4]
   18608:	pop	{r4, r5, r6, r7, fp, pc}
   1860c:	ldrd	r0, [r4]
   18610:	umull	r6, r2, r0, r5
   18614:	asr	r3, r5, #31
   18618:	mla	r0, r0, r3, r2
   1861c:	mla	r7, r1, r5, r0
   18620:	mov	r0, #0
   18624:	strd	r6, [r4]
   18628:	pop	{r4, r5, r6, r7, fp, pc}
   1862c:	push	{r4, r5, r6, r7, fp, lr}
   18630:	add	fp, sp, #16
   18634:	cmp	r2, #0
   18638:	beq	1866c <__assert_fail@plt+0x6f24>
   1863c:	mov	r4, r2
   18640:	mov	r5, r1
   18644:	mov	r7, r0
   18648:	mov	r6, #0
   1864c:	mov	r0, r7
   18650:	mov	r1, r5
   18654:	bl	185a0 <__assert_fail@plt+0x6e58>
   18658:	orr	r6, r0, r6
   1865c:	subs	r4, r4, #1
   18660:	bne	1864c <__assert_fail@plt+0x6f04>
   18664:	mov	r0, r6
   18668:	pop	{r4, r5, r6, r7, fp, pc}
   1866c:	mov	r6, #0
   18670:	mov	r0, r6
   18674:	pop	{r4, r5, r6, r7, fp, pc}
   18678:	clz	r2, r1
   1867c:	lsr	r2, r2, #5
   18680:	clz	r3, r0
   18684:	lsr	r3, r3, #5
   18688:	orrs	r2, r3, r2
   1868c:	movwne	r1, #1
   18690:	movwne	r0, #1
   18694:	cmp	r1, #0
   18698:	beq	186c8 <__assert_fail@plt+0x6f80>
   1869c:	mvn	r2, #-2147483648	; 0x80000000
   186a0:	udiv	r2, r2, r1
   186a4:	cmp	r2, r0
   186a8:	bcs	186c8 <__assert_fail@plt+0x6f80>
   186ac:	push	{fp, lr}
   186b0:	mov	fp, sp
   186b4:	bl	115f8 <__errno_location@plt>
   186b8:	mov	r1, #12
   186bc:	str	r1, [r0]
   186c0:	mov	r0, #0
   186c4:	pop	{fp, pc}
   186c8:	b	113ac <calloc@plt>
   186cc:	cmp	r0, #0
   186d0:	movweq	r0, #1
   186d4:	cmn	r0, #1
   186d8:	ble	186e0 <__assert_fail@plt+0x6f98>
   186dc:	b	11544 <malloc@plt>
   186e0:	push	{fp, lr}
   186e4:	mov	fp, sp
   186e8:	bl	115f8 <__errno_location@plt>
   186ec:	mov	r1, #12
   186f0:	str	r1, [r0]
   186f4:	mov	r0, #0
   186f8:	pop	{fp, pc}
   186fc:	push	{fp, lr}
   18700:	mov	fp, sp
   18704:	cmp	r0, #0
   18708:	beq	18724 <__assert_fail@plt+0x6fdc>
   1870c:	cmp	r1, #0
   18710:	beq	18730 <__assert_fail@plt+0x6fe8>
   18714:	cmn	r1, #1
   18718:	ble	1873c <__assert_fail@plt+0x6ff4>
   1871c:	pop	{fp, lr}
   18720:	b	11478 <realloc@plt>
   18724:	mov	r0, r1
   18728:	pop	{fp, lr}
   1872c:	b	186cc <__assert_fail@plt+0x6f84>
   18730:	bl	155fc <__assert_fail@plt+0x3eb4>
   18734:	mov	r0, #0
   18738:	pop	{fp, pc}
   1873c:	bl	115f8 <__errno_location@plt>
   18740:	mov	r1, #12
   18744:	str	r1, [r0]
   18748:	mov	r0, #0
   1874c:	pop	{fp, pc}
   18750:	b	155fc <__assert_fail@plt+0x3eb4>
   18754:	b	11700 <aligned_alloc@plt>
   18758:	mov	r0, #0
   1875c:	bx	lr
   18760:	mov	r0, #0
   18764:	bx	lr
   18768:	mov	r1, r0
   1876c:	sub	r2, r0, #65	; 0x41
   18770:	mov	r0, #1
   18774:	cmp	r2, #26
   18778:	subcs	r2, r1, #97	; 0x61
   1877c:	cmpcs	r2, #26
   18780:	bcs	18788 <__assert_fail@plt+0x7040>
   18784:	bx	lr
   18788:	sub	r1, r1, #48	; 0x30
   1878c:	cmp	r1, #10
   18790:	movcs	r0, #0
   18794:	bx	lr
   18798:	mov	r1, r0
   1879c:	sub	r2, r0, #65	; 0x41
   187a0:	mov	r0, #1
   187a4:	cmp	r2, #26
   187a8:	subcs	r1, r1, #97	; 0x61
   187ac:	cmpcs	r1, #26
   187b0:	movcs	r0, #0
   187b4:	bx	lr
   187b8:	mov	r1, #0
   187bc:	cmp	r0, #128	; 0x80
   187c0:	movwcc	r1, #1
   187c4:	mov	r0, r1
   187c8:	bx	lr
   187cc:	sub	r1, r0, #9
   187d0:	clz	r1, r1
   187d4:	lsr	r1, r1, #5
   187d8:	sub	r0, r0, #32
   187dc:	clz	r0, r0
   187e0:	lsr	r0, r0, #5
   187e4:	orr	r0, r0, r1
   187e8:	bx	lr
   187ec:	mov	r1, r0
   187f0:	mov	r0, #1
   187f4:	cmp	r1, #32
   187f8:	bxcc	lr
   187fc:	cmp	r1, #127	; 0x7f
   18800:	movne	r0, #0
   18804:	bx	lr
   18808:	sub	r1, r0, #48	; 0x30
   1880c:	mov	r0, #0
   18810:	cmp	r1, #10
   18814:	movwcc	r0, #1
   18818:	bx	lr
   1881c:	sub	r1, r0, #33	; 0x21
   18820:	mov	r0, #0
   18824:	cmp	r1, #94	; 0x5e
   18828:	movwcc	r0, #1
   1882c:	bx	lr
   18830:	sub	r1, r0, #97	; 0x61
   18834:	mov	r0, #0
   18838:	cmp	r1, #26
   1883c:	movwcc	r0, #1
   18840:	bx	lr
   18844:	sub	r1, r0, #32
   18848:	mov	r0, #0
   1884c:	cmp	r1, #95	; 0x5f
   18850:	movwcc	r0, #1
   18854:	bx	lr
   18858:	sub	r1, r0, #33	; 0x21
   1885c:	cmp	r1, #93	; 0x5d
   18860:	bhi	189ec <__assert_fail@plt+0x72a4>
   18864:	mov	r0, #1
   18868:	add	r2, pc, #0
   1886c:	ldr	pc, [r2, r1, lsl #2]
   18870:	andeq	r8, r1, r8, ror #19
   18874:	andeq	r8, r1, r8, ror #19
   18878:	andeq	r8, r1, r8, ror #19
   1887c:	andeq	r8, r1, r8, ror #19
   18880:	andeq	r8, r1, r8, ror #19
   18884:	andeq	r8, r1, r8, ror #19
   18888:	andeq	r8, r1, r8, ror #19
   1888c:	andeq	r8, r1, r8, ror #19
   18890:	andeq	r8, r1, r8, ror #19
   18894:	andeq	r8, r1, r8, ror #19
   18898:	andeq	r8, r1, r8, ror #19
   1889c:	andeq	r8, r1, r8, ror #19
   188a0:	andeq	r8, r1, r8, ror #19
   188a4:	andeq	r8, r1, r8, ror #19
   188a8:	andeq	r8, r1, r8, ror #19
   188ac:	andeq	r8, r1, ip, ror #19
   188b0:	andeq	r8, r1, ip, ror #19
   188b4:	andeq	r8, r1, ip, ror #19
   188b8:	andeq	r8, r1, ip, ror #19
   188bc:	andeq	r8, r1, ip, ror #19
   188c0:	andeq	r8, r1, ip, ror #19
   188c4:	andeq	r8, r1, ip, ror #19
   188c8:	andeq	r8, r1, ip, ror #19
   188cc:	andeq	r8, r1, ip, ror #19
   188d0:	andeq	r8, r1, ip, ror #19
   188d4:	andeq	r8, r1, r8, ror #19
   188d8:	andeq	r8, r1, r8, ror #19
   188dc:	andeq	r8, r1, r8, ror #19
   188e0:	andeq	r8, r1, r8, ror #19
   188e4:	andeq	r8, r1, r8, ror #19
   188e8:	andeq	r8, r1, r8, ror #19
   188ec:	andeq	r8, r1, r8, ror #19
   188f0:	andeq	r8, r1, ip, ror #19
   188f4:	andeq	r8, r1, ip, ror #19
   188f8:	andeq	r8, r1, ip, ror #19
   188fc:	andeq	r8, r1, ip, ror #19
   18900:	andeq	r8, r1, ip, ror #19
   18904:	andeq	r8, r1, ip, ror #19
   18908:	andeq	r8, r1, ip, ror #19
   1890c:	andeq	r8, r1, ip, ror #19
   18910:	andeq	r8, r1, ip, ror #19
   18914:	andeq	r8, r1, ip, ror #19
   18918:	andeq	r8, r1, ip, ror #19
   1891c:	andeq	r8, r1, ip, ror #19
   18920:	andeq	r8, r1, ip, ror #19
   18924:	andeq	r8, r1, ip, ror #19
   18928:	andeq	r8, r1, ip, ror #19
   1892c:	andeq	r8, r1, ip, ror #19
   18930:	andeq	r8, r1, ip, ror #19
   18934:	andeq	r8, r1, ip, ror #19
   18938:	andeq	r8, r1, ip, ror #19
   1893c:	andeq	r8, r1, ip, ror #19
   18940:	andeq	r8, r1, ip, ror #19
   18944:	andeq	r8, r1, ip, ror #19
   18948:	andeq	r8, r1, ip, ror #19
   1894c:	andeq	r8, r1, ip, ror #19
   18950:	andeq	r8, r1, ip, ror #19
   18954:	andeq	r8, r1, ip, ror #19
   18958:	andeq	r8, r1, r8, ror #19
   1895c:	andeq	r8, r1, r8, ror #19
   18960:	andeq	r8, r1, r8, ror #19
   18964:	andeq	r8, r1, r8, ror #19
   18968:	andeq	r8, r1, r8, ror #19
   1896c:	andeq	r8, r1, r8, ror #19
   18970:	andeq	r8, r1, ip, ror #19
   18974:	andeq	r8, r1, ip, ror #19
   18978:	andeq	r8, r1, ip, ror #19
   1897c:	andeq	r8, r1, ip, ror #19
   18980:	andeq	r8, r1, ip, ror #19
   18984:	andeq	r8, r1, ip, ror #19
   18988:	andeq	r8, r1, ip, ror #19
   1898c:	andeq	r8, r1, ip, ror #19
   18990:	andeq	r8, r1, ip, ror #19
   18994:	andeq	r8, r1, ip, ror #19
   18998:	andeq	r8, r1, ip, ror #19
   1899c:	andeq	r8, r1, ip, ror #19
   189a0:	andeq	r8, r1, ip, ror #19
   189a4:	andeq	r8, r1, ip, ror #19
   189a8:	andeq	r8, r1, ip, ror #19
   189ac:	andeq	r8, r1, ip, ror #19
   189b0:	andeq	r8, r1, ip, ror #19
   189b4:	andeq	r8, r1, ip, ror #19
   189b8:	andeq	r8, r1, ip, ror #19
   189bc:	andeq	r8, r1, ip, ror #19
   189c0:	andeq	r8, r1, ip, ror #19
   189c4:	andeq	r8, r1, ip, ror #19
   189c8:	andeq	r8, r1, ip, ror #19
   189cc:	andeq	r8, r1, ip, ror #19
   189d0:	andeq	r8, r1, ip, ror #19
   189d4:	andeq	r8, r1, ip, ror #19
   189d8:	andeq	r8, r1, r8, ror #19
   189dc:	andeq	r8, r1, r8, ror #19
   189e0:	andeq	r8, r1, r8, ror #19
   189e4:	andeq	r8, r1, r8, ror #19
   189e8:	bx	lr
   189ec:	mov	r0, #0
   189f0:	bx	lr
   189f4:	sub	r0, r0, #9
   189f8:	cmp	r0, #23
   189fc:	movhi	r0, #0
   18a00:	bxhi	lr
   18a04:	bic	r0, r0, #-16777216	; 0xff000000
   18a08:	movw	r1, #31
   18a0c:	movt	r1, #128	; 0x80
   18a10:	mov	r2, #1
   18a14:	and	r0, r2, r1, lsr r0
   18a18:	bx	lr
   18a1c:	sub	r1, r0, #65	; 0x41
   18a20:	mov	r0, #0
   18a24:	cmp	r1, #26
   18a28:	movwcc	r0, #1
   18a2c:	bx	lr
   18a30:	mov	r1, r0
   18a34:	sub	r2, r0, #48	; 0x30
   18a38:	mov	r0, #1
   18a3c:	cmp	r2, #22
   18a40:	bhi	18a58 <__assert_fail@plt+0x7310>
   18a44:	mov	ip, #1
   18a48:	movw	r3, #1023	; 0x3ff
   18a4c:	movt	r3, #126	; 0x7e
   18a50:	tst	r3, ip, lsl r2
   18a54:	bxne	lr
   18a58:	sub	r1, r1, #97	; 0x61
   18a5c:	cmp	r1, #6
   18a60:	movcs	r0, #0
   18a64:	bxcs	lr
   18a68:	bx	lr
   18a6c:	sub	r1, r0, #65	; 0x41
   18a70:	cmp	r1, #26
   18a74:	addcc	r0, r0, #32
   18a78:	bx	lr
   18a7c:	sub	r1, r0, #97	; 0x61
   18a80:	cmp	r1, #26
   18a84:	subcc	r0, r0, #32
   18a88:	bx	lr
   18a8c:	push	{r4, r5, r6, sl, fp, lr}
   18a90:	add	fp, sp, #16
   18a94:	mov	r4, r0
   18a98:	bl	114fc <__fpending@plt>
   18a9c:	mov	r5, r0
   18aa0:	mov	r0, r4
   18aa4:	bl	11508 <ferror_unlocked@plt>
   18aa8:	mov	r6, r0
   18aac:	mov	r0, r4
   18ab0:	bl	15450 <__assert_fail@plt+0x3d08>
   18ab4:	cmp	r6, #0
   18ab8:	beq	18adc <__assert_fail@plt+0x7394>
   18abc:	mvn	r4, #0
   18ac0:	cmp	r0, #0
   18ac4:	bne	18b08 <__assert_fail@plt+0x73c0>
   18ac8:	bl	115f8 <__errno_location@plt>
   18acc:	mov	r1, #0
   18ad0:	str	r1, [r0]
   18ad4:	mov	r0, r4
   18ad8:	pop	{r4, r5, r6, sl, fp, pc}
   18adc:	cmp	r0, #0
   18ae0:	mov	r4, r0
   18ae4:	mvnne	r4, #0
   18ae8:	cmp	r5, #0
   18aec:	bne	18b08 <__assert_fail@plt+0x73c0>
   18af0:	cmp	r0, #0
   18af4:	beq	18b08 <__assert_fail@plt+0x73c0>
   18af8:	bl	115f8 <__errno_location@plt>
   18afc:	ldr	r0, [r0]
   18b00:	subs	r4, r0, #9
   18b04:	mvnne	r4, #0
   18b08:	mov	r0, r4
   18b0c:	pop	{r4, r5, r6, sl, fp, pc}
   18b10:	push	{fp, lr}
   18b14:	mov	fp, sp
   18b18:	bl	115f8 <__errno_location@plt>
   18b1c:	mov	r1, #12
   18b20:	str	r1, [r0]
   18b24:	mov	r0, #0
   18b28:	pop	{fp, pc}
   18b2c:	b	186cc <__assert_fail@plt+0x6f84>
   18b30:	cmp	r1, #0
   18b34:	orreq	r1, r1, #1
   18b38:	b	186fc <__assert_fail@plt+0x6fb4>
   18b3c:	b	18678 <__assert_fail@plt+0x6f30>
   18b40:	clz	r3, r2
   18b44:	lsr	ip, r3, #5
   18b48:	clz	r3, r1
   18b4c:	lsr	r3, r3, #5
   18b50:	orrs	r3, r3, ip
   18b54:	movwne	r1, #1
   18b58:	movwne	r2, #1
   18b5c:	b	18bfc <__assert_fail@plt+0x74b4>
   18b60:	push	{fp, lr}
   18b64:	mov	fp, sp
   18b68:	mov	r0, #14
   18b6c:	bl	116dc <nl_langinfo@plt>
   18b70:	movw	r1, #38461	; 0x963d
   18b74:	movt	r1, #1
   18b78:	cmp	r0, #0
   18b7c:	movne	r1, r0
   18b80:	ldrb	r2, [r1]
   18b84:	movw	r0, #43014	; 0xa806
   18b88:	movt	r0, #1
   18b8c:	cmp	r2, #0
   18b90:	movne	r0, r1
   18b94:	pop	{fp, pc}
   18b98:	push	{r4, r5, r6, r7, fp, lr}
   18b9c:	add	fp, sp, #16
   18ba0:	sub	sp, sp, #8
   18ba4:	mov	r7, r2
   18ba8:	mov	r4, r1
   18bac:	add	r5, sp, #4
   18bb0:	cmp	r0, #0
   18bb4:	movne	r5, r0
   18bb8:	mov	r0, r5
   18bbc:	bl	11514 <mbrtowc@plt>
   18bc0:	mov	r6, r0
   18bc4:	cmp	r7, #0
   18bc8:	beq	18bf0 <__assert_fail@plt+0x74a8>
   18bcc:	cmn	r6, #2
   18bd0:	bcc	18bf0 <__assert_fail@plt+0x74a8>
   18bd4:	mov	r0, #0
   18bd8:	bl	18e28 <__assert_fail@plt+0x76e0>
   18bdc:	cmp	r0, #0
   18be0:	bne	18bf0 <__assert_fail@plt+0x74a8>
   18be4:	ldrb	r0, [r4]
   18be8:	str	r0, [r5]
   18bec:	mov	r6, #1
   18bf0:	mov	r0, r6
   18bf4:	sub	sp, fp, #16
   18bf8:	pop	{r4, r5, r6, r7, fp, pc}
   18bfc:	cmp	r2, #0
   18c00:	beq	18c30 <__assert_fail@plt+0x74e8>
   18c04:	mvn	r3, #0
   18c08:	udiv	r3, r3, r2
   18c0c:	cmp	r3, r1
   18c10:	bcs	18c30 <__assert_fail@plt+0x74e8>
   18c14:	push	{fp, lr}
   18c18:	mov	fp, sp
   18c1c:	bl	115f8 <__errno_location@plt>
   18c20:	mov	r1, #12
   18c24:	str	r1, [r0]
   18c28:	mov	r0, #0
   18c2c:	pop	{fp, pc}
   18c30:	mul	r1, r2, r1
   18c34:	b	186fc <__assert_fail@plt+0x6fb4>
   18c38:	mov	r1, #0
   18c3c:	mov	r2, #3
   18c40:	b	18c44 <__assert_fail@plt+0x74fc>
   18c44:	sub	sp, sp, #8
   18c48:	push	{fp, lr}
   18c4c:	mov	fp, sp
   18c50:	sub	sp, sp, #8
   18c54:	str	r2, [fp, #8]
   18c58:	str	r3, [fp, #12]
   18c5c:	add	r2, fp, #8
   18c60:	str	r2, [sp, #4]
   18c64:	cmp	r1, #11
   18c68:	bhi	18ca8 <__assert_fail@plt+0x7560>
   18c6c:	mov	r2, #1
   18c70:	movw	r3, #1300	; 0x514
   18c74:	tst	r3, r2, lsl r1
   18c78:	bne	18cf8 <__assert_fail@plt+0x75b0>
   18c7c:	movw	r3, #2570	; 0xa0a
   18c80:	tst	r3, r2, lsl r1
   18c84:	bne	18cd0 <__assert_fail@plt+0x7588>
   18c88:	cmp	r1, #0
   18c8c:	bne	18ca8 <__assert_fail@plt+0x7560>
   18c90:	ldr	r1, [sp, #4]
   18c94:	add	r2, r1, #4
   18c98:	str	r2, [sp, #4]
   18c9c:	ldr	r1, [r1]
   18ca0:	bl	18d1c <__assert_fail@plt+0x75d4>
   18ca4:	b	18d0c <__assert_fail@plt+0x75c4>
   18ca8:	sub	r2, r1, #1024	; 0x400
   18cac:	cmp	r2, #10
   18cb0:	bhi	18cf8 <__assert_fail@plt+0x75b0>
   18cb4:	mov	ip, #1
   18cb8:	movw	r3, #645	; 0x285
   18cbc:	tst	r3, ip, lsl r2
   18cc0:	bne	18cf8 <__assert_fail@plt+0x75b0>
   18cc4:	movw	r3, #1282	; 0x502
   18cc8:	tst	r3, ip, lsl r2
   18ccc:	beq	18cd8 <__assert_fail@plt+0x7590>
   18cd0:	bl	11694 <fcntl64@plt>
   18cd4:	b	18d0c <__assert_fail@plt+0x75c4>
   18cd8:	cmp	r2, #6
   18cdc:	bne	18cf8 <__assert_fail@plt+0x75b0>
   18ce0:	ldr	r1, [sp, #4]
   18ce4:	add	r2, r1, #4
   18ce8:	str	r2, [sp, #4]
   18cec:	ldr	r1, [r1]
   18cf0:	bl	18d28 <__assert_fail@plt+0x75e0>
   18cf4:	b	18d0c <__assert_fail@plt+0x75c4>
   18cf8:	ldr	r2, [sp, #4]
   18cfc:	add	r3, r2, #4
   18d00:	str	r3, [sp, #4]
   18d04:	ldr	r2, [r2]
   18d08:	bl	11694 <fcntl64@plt>
   18d0c:	mov	sp, fp
   18d10:	pop	{fp, lr}
   18d14:	add	sp, sp, #8
   18d18:	bx	lr
   18d1c:	mov	r2, r1
   18d20:	mov	r1, #0
   18d24:	b	11694 <fcntl64@plt>
   18d28:	push	{r4, r5, r6, r7, fp, lr}
   18d2c:	add	fp, sp, #16
   18d30:	mov	r5, r1
   18d34:	mov	r6, r0
   18d38:	movw	r7, #46704	; 0xb670
   18d3c:	movt	r7, #2
   18d40:	ldr	r0, [r7]
   18d44:	cmp	r0, #0
   18d48:	bmi	18dac <__assert_fail@plt+0x7664>
   18d4c:	mov	r0, r6
   18d50:	movw	r1, #1030	; 0x406
   18d54:	mov	r2, r5
   18d58:	bl	11694 <fcntl64@plt>
   18d5c:	mov	r4, r0
   18d60:	cmn	r0, #1
   18d64:	bgt	18d98 <__assert_fail@plt+0x7650>
   18d68:	bl	115f8 <__errno_location@plt>
   18d6c:	ldr	r0, [r0]
   18d70:	cmp	r0, #22
   18d74:	bne	18d98 <__assert_fail@plt+0x7650>
   18d78:	mov	r0, r6
   18d7c:	mov	r1, r5
   18d80:	bl	18d1c <__assert_fail@plt+0x75d4>
   18d84:	mov	r4, r0
   18d88:	cmp	r0, #0
   18d8c:	bmi	18dfc <__assert_fail@plt+0x76b4>
   18d90:	mvn	r0, #0
   18d94:	b	18d9c <__assert_fail@plt+0x7654>
   18d98:	mov	r0, #1
   18d9c:	str	r0, [r7]
   18da0:	cmp	r4, #0
   18da4:	bpl	18dc4 <__assert_fail@plt+0x767c>
   18da8:	b	18dfc <__assert_fail@plt+0x76b4>
   18dac:	mov	r0, r6
   18db0:	mov	r1, r5
   18db4:	bl	18d1c <__assert_fail@plt+0x75d4>
   18db8:	mov	r4, r0
   18dbc:	cmp	r4, #0
   18dc0:	bmi	18dfc <__assert_fail@plt+0x76b4>
   18dc4:	ldr	r0, [r7]
   18dc8:	cmn	r0, #1
   18dcc:	bne	18dfc <__assert_fail@plt+0x76b4>
   18dd0:	mov	r0, r4
   18dd4:	mov	r1, #1
   18dd8:	bl	11694 <fcntl64@plt>
   18ddc:	cmp	r0, #0
   18de0:	bmi	18e04 <__assert_fail@plt+0x76bc>
   18de4:	orr	r2, r0, #1
   18de8:	mov	r0, r4
   18dec:	mov	r1, #2
   18df0:	bl	11694 <fcntl64@plt>
   18df4:	cmn	r0, #1
   18df8:	beq	18e04 <__assert_fail@plt+0x76bc>
   18dfc:	mov	r0, r4
   18e00:	pop	{r4, r5, r6, r7, fp, pc}
   18e04:	bl	115f8 <__errno_location@plt>
   18e08:	mov	r5, r0
   18e0c:	ldr	r6, [r0]
   18e10:	mov	r0, r4
   18e14:	bl	11730 <close@plt>
   18e18:	str	r6, [r5]
   18e1c:	mvn	r4, #0
   18e20:	mov	r0, r4
   18e24:	pop	{r4, r5, r6, r7, fp, pc}
   18e28:	push	{r4, sl, fp, lr}
   18e2c:	add	fp, sp, #8
   18e30:	sub	sp, sp, #264	; 0x108
   18e34:	add	r1, sp, #7
   18e38:	movw	r2, #257	; 0x101
   18e3c:	bl	18e94 <__assert_fail@plt+0x774c>
   18e40:	mov	r4, #0
   18e44:	cmp	r0, #0
   18e48:	bne	18e88 <__assert_fail@plt+0x7740>
   18e4c:	add	r0, sp, #7
   18e50:	movw	r1, #43020	; 0xa80c
   18e54:	movt	r1, #1
   18e58:	mov	r2, #2
   18e5c:	bl	115a4 <bcmp@plt>
   18e60:	cmp	r0, #0
   18e64:	beq	18e88 <__assert_fail@plt+0x7740>
   18e68:	add	r0, sp, #7
   18e6c:	movw	r1, #43022	; 0xa80e
   18e70:	movt	r1, #1
   18e74:	mov	r2, #6
   18e78:	bl	115a4 <bcmp@plt>
   18e7c:	mov	r4, r0
   18e80:	cmp	r0, #0
   18e84:	movwne	r4, #1
   18e88:	mov	r0, r4
   18e8c:	sub	sp, fp, #8
   18e90:	pop	{r4, sl, fp, pc}
   18e94:	b	18e98 <__assert_fail@plt+0x7750>
   18e98:	push	{r4, r5, r6, r7, fp, lr}
   18e9c:	add	fp, sp, #16
   18ea0:	mov	r6, r2
   18ea4:	mov	r4, r1
   18ea8:	bl	18f30 <__assert_fail@plt+0x77e8>
   18eac:	cmp	r0, #0
   18eb0:	beq	18ee0 <__assert_fail@plt+0x7798>
   18eb4:	mov	r7, r0
   18eb8:	bl	115b0 <strlen@plt>
   18ebc:	cmp	r0, r6
   18ec0:	bcs	18efc <__assert_fail@plt+0x77b4>
   18ec4:	add	r2, r0, #1
   18ec8:	mov	r0, r4
   18ecc:	mov	r1, r7
   18ed0:	bl	11430 <memcpy@plt>
   18ed4:	mov	r5, #0
   18ed8:	mov	r0, r5
   18edc:	pop	{r4, r5, r6, r7, fp, pc}
   18ee0:	mov	r5, #22
   18ee4:	cmp	r6, #0
   18ee8:	beq	18f24 <__assert_fail@plt+0x77dc>
   18eec:	mov	r0, #0
   18ef0:	strb	r0, [r4]
   18ef4:	mov	r0, r5
   18ef8:	pop	{r4, r5, r6, r7, fp, pc}
   18efc:	mov	r5, #34	; 0x22
   18f00:	cmp	r6, #0
   18f04:	beq	18f24 <__assert_fail@plt+0x77dc>
   18f08:	sub	r6, r6, #1
   18f0c:	mov	r0, r4
   18f10:	mov	r1, r7
   18f14:	mov	r2, r6
   18f18:	bl	11430 <memcpy@plt>
   18f1c:	mov	r0, #0
   18f20:	strb	r0, [r4, r6]
   18f24:	mov	r0, r5
   18f28:	pop	{r4, r5, r6, r7, fp, pc}
   18f2c:	b	18f30 <__assert_fail@plt+0x77e8>
   18f30:	mov	r1, #0
   18f34:	b	116a0 <setlocale@plt>
   18f38:	cmp	r3, #0
   18f3c:	cmpeq	r2, #0
   18f40:	bne	18f58 <__assert_fail@plt+0x7810>
   18f44:	cmp	r1, #0
   18f48:	cmpeq	r0, #0
   18f4c:	mvnne	r1, #0
   18f50:	mvnne	r0, #0
   18f54:	b	18f74 <__assert_fail@plt+0x782c>
   18f58:	sub	sp, sp, #8
   18f5c:	push	{sp, lr}
   18f60:	bl	18f84 <__assert_fail@plt+0x783c>
   18f64:	ldr	lr, [sp, #4]
   18f68:	add	sp, sp, #8
   18f6c:	pop	{r2, r3}
   18f70:	bx	lr
   18f74:	push	{r1, lr}
   18f78:	mov	r0, #8
   18f7c:	bl	113c4 <raise@plt>
   18f80:	pop	{r1, pc}
   18f84:	cmp	r1, r3
   18f88:	cmpeq	r0, r2
   18f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f90:	mov	r4, r0
   18f94:	movcc	r0, #0
   18f98:	mov	r5, r1
   18f9c:	ldr	lr, [sp, #36]	; 0x24
   18fa0:	movcc	r1, r0
   18fa4:	bcc	190a0 <__assert_fail@plt+0x7958>
   18fa8:	cmp	r3, #0
   18fac:	clzeq	ip, r2
   18fb0:	clzne	ip, r3
   18fb4:	addeq	ip, ip, #32
   18fb8:	cmp	r5, #0
   18fbc:	clzeq	r1, r4
   18fc0:	addeq	r1, r1, #32
   18fc4:	clzne	r1, r5
   18fc8:	sub	ip, ip, r1
   18fcc:	sub	sl, ip, #32
   18fd0:	lsl	r9, r3, ip
   18fd4:	rsb	fp, ip, #32
   18fd8:	orr	r9, r9, r2, lsl sl
   18fdc:	orr	r9, r9, r2, lsr fp
   18fe0:	lsl	r8, r2, ip
   18fe4:	cmp	r5, r9
   18fe8:	cmpeq	r4, r8
   18fec:	movcc	r0, #0
   18ff0:	movcc	r1, r0
   18ff4:	bcc	19010 <__assert_fail@plt+0x78c8>
   18ff8:	mov	r0, #1
   18ffc:	subs	r4, r4, r8
   19000:	lsl	r1, r0, sl
   19004:	orr	r1, r1, r0, lsr fp
   19008:	lsl	r0, r0, ip
   1900c:	sbc	r5, r5, r9
   19010:	cmp	ip, #0
   19014:	beq	190a0 <__assert_fail@plt+0x7958>
   19018:	lsr	r6, r8, #1
   1901c:	orr	r6, r6, r9, lsl #31
   19020:	lsr	r7, r9, #1
   19024:	mov	r2, ip
   19028:	b	1904c <__assert_fail@plt+0x7904>
   1902c:	subs	r3, r4, r6
   19030:	sbc	r8, r5, r7
   19034:	adds	r3, r3, r3
   19038:	adc	r8, r8, r8
   1903c:	adds	r4, r3, #1
   19040:	adc	r5, r8, #0
   19044:	subs	r2, r2, #1
   19048:	beq	19068 <__assert_fail@plt+0x7920>
   1904c:	cmp	r5, r7
   19050:	cmpeq	r4, r6
   19054:	bcs	1902c <__assert_fail@plt+0x78e4>
   19058:	adds	r4, r4, r4
   1905c:	adc	r5, r5, r5
   19060:	subs	r2, r2, #1
   19064:	bne	1904c <__assert_fail@plt+0x7904>
   19068:	lsr	r3, r4, ip
   1906c:	orr	r3, r3, r5, lsl fp
   19070:	lsr	r2, r5, ip
   19074:	orr	r3, r3, r5, lsr sl
   19078:	adds	r0, r0, r4
   1907c:	mov	r4, r3
   19080:	lsl	r3, r2, ip
   19084:	orr	r3, r3, r4, lsl sl
   19088:	lsl	ip, r4, ip
   1908c:	orr	r3, r3, r4, lsr fp
   19090:	adc	r1, r1, r5
   19094:	subs	r0, r0, ip
   19098:	mov	r5, r2
   1909c:	sbc	r1, r1, r3
   190a0:	cmp	lr, #0
   190a4:	strdne	r4, [lr]
   190a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190b0:	mov	r7, r0
   190b4:	ldr	r6, [pc, #72]	; 19104 <__assert_fail@plt+0x79bc>
   190b8:	ldr	r5, [pc, #72]	; 19108 <__assert_fail@plt+0x79c0>
   190bc:	add	r6, pc, r6
   190c0:	add	r5, pc, r5
   190c4:	sub	r6, r6, r5
   190c8:	mov	r8, r1
   190cc:	mov	r9, r2
   190d0:	bl	11380 <fdopen@plt-0x20>
   190d4:	asrs	r6, r6, #2
   190d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   190dc:	mov	r4, #0
   190e0:	add	r4, r4, #1
   190e4:	ldr	r3, [r5], #4
   190e8:	mov	r2, r9
   190ec:	mov	r1, r8
   190f0:	mov	r0, r7
   190f4:	blx	r3
   190f8:	cmp	r6, r4
   190fc:	bne	190e0 <__assert_fail@plt+0x7998>
   19100:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19104:	andeq	r1, r1, r8, asr #28
   19108:	andeq	r1, r1, r0, asr #28
   1910c:	bx	lr
   19110:	ldr	r3, [pc, #12]	; 19124 <__assert_fail@plt+0x79dc>
   19114:	mov	r1, #0
   19118:	add	r3, pc, r3
   1911c:	ldr	r2, [r3]
   19120:	b	11610 <__cxa_atexit@plt>
   19124:	andeq	r2, r1, r4, lsr r0
   19128:	mov	r2, r1
   1912c:	mov	r1, r0
   19130:	mov	r0, #3
   19134:	b	114a8 <__fxstat64@plt>

Disassembly of section .fini:

00019138 <.fini>:
   19138:	push	{r3, lr}
   1913c:	pop	{r3, pc}
