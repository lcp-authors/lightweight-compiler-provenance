
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010c8c <.init>:
   10c8c:	push	{r3, lr}
   10c90:	bl	10f64 <__assert_fail@plt+0x48>
   10c94:	pop	{r3, pc}

Disassembly of section .plt:

00010c98 <calloc@plt-0x14>:
   10c98:	push	{lr}		; (str lr, [sp, #-4]!)
   10c9c:	ldr	lr, [pc, #4]	; 10ca8 <calloc@plt-0x4>
   10ca0:	add	lr, pc, lr
   10ca4:	ldr	pc, [lr, #8]!
   10ca8:	andeq	r9, r1, r8, asr r3

00010cac <calloc@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #102400	; 0x19000
   10cb4:	ldr	pc, [ip, #856]!	; 0x358

00010cb8 <fputs_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #102400	; 0x19000
   10cc0:	ldr	pc, [ip, #848]!	; 0x350

00010cc4 <strcmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #102400	; 0x19000
   10ccc:	ldr	pc, [ip, #840]!	; 0x348

00010cd0 <posix_fadvise64@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #102400	; 0x19000
   10cd8:	ldr	pc, [ip, #832]!	; 0x340

00010cdc <printf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #102400	; 0x19000
   10ce4:	ldr	pc, [ip, #824]!	; 0x338

00010ce8 <fflush@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #102400	; 0x19000
   10cf0:	ldr	pc, [ip, #816]!	; 0x330

00010cf4 <memmove@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #102400	; 0x19000
   10cfc:	ldr	pc, [ip, #808]!	; 0x328

00010d00 <free@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #102400	; 0x19000
   10d08:	ldr	pc, [ip, #800]!	; 0x320

00010d0c <_exit@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #102400	; 0x19000
   10d14:	ldr	pc, [ip, #792]!	; 0x318

00010d18 <memcpy@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #102400	; 0x19000
   10d20:	ldr	pc, [ip, #784]!	; 0x310

00010d24 <mbsinit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #102400	; 0x19000
   10d2c:	ldr	pc, [ip, #776]!	; 0x308

00010d30 <fwrite_unlocked@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #102400	; 0x19000
   10d38:	ldr	pc, [ip, #768]!	; 0x300

00010d3c <memcmp@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #102400	; 0x19000
   10d44:	ldr	pc, [ip, #760]!	; 0x2f8

00010d48 <fputc_unlocked@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #102400	; 0x19000
   10d50:	ldr	pc, [ip, #752]!	; 0x2f0

00010d54 <realloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #102400	; 0x19000
   10d5c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d60 <textdomain@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #102400	; 0x19000
   10d68:	ldr	pc, [ip, #736]!	; 0x2e0

00010d6c <iswprint@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #102400	; 0x19000
   10d74:	ldr	pc, [ip, #728]!	; 0x2d8

00010d78 <fwrite@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #102400	; 0x19000
   10d80:	ldr	pc, [ip, #720]!	; 0x2d0

00010d84 <lseek64@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #102400	; 0x19000
   10d8c:	ldr	pc, [ip, #712]!	; 0x2c8

00010d90 <__ctype_get_mb_cur_max@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #102400	; 0x19000
   10d98:	ldr	pc, [ip, #704]!	; 0x2c0

00010d9c <__fpending@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #102400	; 0x19000
   10da4:	ldr	pc, [ip, #696]!	; 0x2b8

00010da8 <ferror_unlocked@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #102400	; 0x19000
   10db0:	ldr	pc, [ip, #688]!	; 0x2b0

00010db4 <mbrtowc@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #102400	; 0x19000
   10dbc:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc0 <error@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #102400	; 0x19000
   10dc8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dcc <malloc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #102400	; 0x19000
   10dd4:	ldr	pc, [ip, #664]!	; 0x298

00010dd8 <__libc_start_main@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #102400	; 0x19000
   10de0:	ldr	pc, [ip, #656]!	; 0x290

00010de4 <__freading@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #102400	; 0x19000
   10dec:	ldr	pc, [ip, #648]!	; 0x288

00010df0 <__gmon_start__@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #102400	; 0x19000
   10df8:	ldr	pc, [ip, #640]!	; 0x280

00010dfc <getopt_long@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #102400	; 0x19000
   10e04:	ldr	pc, [ip, #632]!	; 0x278

00010e08 <__ctype_b_loc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #102400	; 0x19000
   10e10:	ldr	pc, [ip, #624]!	; 0x270

00010e14 <exit@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #102400	; 0x19000
   10e1c:	ldr	pc, [ip, #616]!	; 0x268

00010e20 <gettext@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #102400	; 0x19000
   10e28:	ldr	pc, [ip, #608]!	; 0x260

00010e2c <strlen@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #102400	; 0x19000
   10e34:	ldr	pc, [ip, #600]!	; 0x258

00010e38 <strchr@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #102400	; 0x19000
   10e40:	ldr	pc, [ip, #592]!	; 0x250

00010e44 <fprintf@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #102400	; 0x19000
   10e4c:	ldr	pc, [ip, #584]!	; 0x248

00010e50 <__errno_location@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #102400	; 0x19000
   10e58:	ldr	pc, [ip, #576]!	; 0x240

00010e5c <__cxa_atexit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #102400	; 0x19000
   10e64:	ldr	pc, [ip, #568]!	; 0x238

00010e68 <memset@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #102400	; 0x19000
   10e70:	ldr	pc, [ip, #560]!	; 0x230

00010e74 <fileno@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #102400	; 0x19000
   10e7c:	ldr	pc, [ip, #552]!	; 0x228

00010e80 <memchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #102400	; 0x19000
   10e88:	ldr	pc, [ip, #544]!	; 0x220

00010e8c <strtoimax@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #102400	; 0x19000
   10e94:	ldr	pc, [ip, #536]!	; 0x218

00010e98 <fclose@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #102400	; 0x19000
   10ea0:	ldr	pc, [ip, #528]!	; 0x210

00010ea4 <fseeko64@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #102400	; 0x19000
   10eac:	ldr	pc, [ip, #520]!	; 0x208

00010eb0 <setlocale@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #102400	; 0x19000
   10eb8:	ldr	pc, [ip, #512]!	; 0x200

00010ebc <strrchr@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #102400	; 0x19000
   10ec4:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec8 <nl_langinfo@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #102400	; 0x19000
   10ed0:	ldr	pc, [ip, #496]!	; 0x1f0

00010ed4 <fopen64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #102400	; 0x19000
   10edc:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee0 <bindtextdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #102400	; 0x19000
   10ee8:	ldr	pc, [ip, #480]!	; 0x1e0

00010eec <fread_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #102400	; 0x19000
   10ef4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ef8 <strncmp@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #102400	; 0x19000
   10f00:	ldr	pc, [ip, #464]!	; 0x1d0

00010f04 <abort@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #102400	; 0x19000
   10f0c:	ldr	pc, [ip, #456]!	; 0x1c8

00010f10 <feof_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #102400	; 0x19000
   10f18:	ldr	pc, [ip, #448]!	; 0x1c0

00010f1c <__assert_fail@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #102400	; 0x19000
   10f24:	ldr	pc, [ip, #440]!	; 0x1b8

Disassembly of section .text:

00010f28 <.text>:
   10f28:	mov	fp, #0
   10f2c:	mov	lr, #0
   10f30:	pop	{r1}		; (ldr r1, [sp], #4)
   10f34:	mov	r2, sp
   10f38:	push	{r2}		; (str r2, [sp, #-4]!)
   10f3c:	push	{r0}		; (str r0, [sp, #-4]!)
   10f40:	ldr	ip, [pc, #16]	; 10f58 <__assert_fail@plt+0x3c>
   10f44:	push	{ip}		; (str ip, [sp, #-4]!)
   10f48:	ldr	r0, [pc, #12]	; 10f5c <__assert_fail@plt+0x40>
   10f4c:	ldr	r3, [pc, #12]	; 10f60 <__assert_fail@plt+0x44>
   10f50:	bl	10dd8 <__libc_start_main@plt>
   10f54:	bl	10f04 <abort@plt>
   10f58:	andeq	r8, r1, r4, ror r7
   10f5c:			; <UNDEFINED> instruction: 0x00011bb8
   10f60:	andeq	r8, r1, r4, lsl r7
   10f64:	ldr	r3, [pc, #20]	; 10f80 <__assert_fail@plt+0x64>
   10f68:	ldr	r2, [pc, #20]	; 10f84 <__assert_fail@plt+0x68>
   10f6c:	add	r3, pc, r3
   10f70:	ldr	r2, [r3, r2]
   10f74:	cmp	r2, #0
   10f78:	bxeq	lr
   10f7c:	b	10df0 <__gmon_start__@plt>
   10f80:	andeq	r9, r1, ip, lsl #1
   10f84:	andeq	r0, r0, r0, ror #1
   10f88:	ldr	r0, [pc, #24]	; 10fa8 <__assert_fail@plt+0x8c>
   10f8c:	ldr	r3, [pc, #24]	; 10fac <__assert_fail@plt+0x90>
   10f90:	cmp	r3, r0
   10f94:	bxeq	lr
   10f98:	ldr	r3, [pc, #16]	; 10fb0 <__assert_fail@plt+0x94>
   10f9c:	cmp	r3, #0
   10fa0:	bxeq	lr
   10fa4:	bx	r3
   10fa8:	andeq	sl, r2, r4, lsr r1
   10fac:	andeq	sl, r2, r4, lsr r1
   10fb0:	andeq	r0, r0, r0
   10fb4:	ldr	r0, [pc, #36]	; 10fe0 <__assert_fail@plt+0xc4>
   10fb8:	ldr	r1, [pc, #36]	; 10fe4 <__assert_fail@plt+0xc8>
   10fbc:	sub	r1, r1, r0
   10fc0:	asr	r1, r1, #2
   10fc4:	add	r1, r1, r1, lsr #31
   10fc8:	asrs	r1, r1, #1
   10fcc:	bxeq	lr
   10fd0:	ldr	r3, [pc, #16]	; 10fe8 <__assert_fail@plt+0xcc>
   10fd4:	cmp	r3, #0
   10fd8:	bxeq	lr
   10fdc:	bx	r3
   10fe0:	andeq	sl, r2, r4, lsr r1
   10fe4:	andeq	sl, r2, r4, lsr r1
   10fe8:	andeq	r0, r0, r0
   10fec:	push	{r4, lr}
   10ff0:	ldr	r4, [pc, #24]	; 11010 <__assert_fail@plt+0xf4>
   10ff4:	ldrb	r3, [r4]
   10ff8:	cmp	r3, #0
   10ffc:	popne	{r4, pc}
   11000:	bl	10f88 <__assert_fail@plt+0x6c>
   11004:	mov	r3, #1
   11008:	strb	r3, [r4]
   1100c:	pop	{r4, pc}
   11010:	andeq	sl, r2, ip, asr r1
   11014:	b	10fb4 <__assert_fail@plt+0x98>
   11018:	str	fp, [sp, #-8]!
   1101c:	str	lr, [sp, #4]
   11020:	add	fp, sp, #4
   11024:	movw	r0, #34716	; 0x879c
   11028:	movt	r0, #1
   1102c:	bl	10e20 <gettext@plt>
   11030:	mov	r2, r0
   11034:	movw	r3, #41300	; 0xa154
   11038:	movt	r3, #2
   1103c:	ldr	r3, [r3]
   11040:	mov	r1, r3
   11044:	mov	r0, r2
   11048:	bl	10cb8 <fputs_unlocked@plt>
   1104c:	nop	{0}
   11050:	sub	sp, fp, #4
   11054:	ldr	fp, [sp]
   11058:	add	sp, sp, #4
   1105c:	pop	{pc}		; (ldr pc, [sp], #4)
   11060:	str	fp, [sp, #-8]!
   11064:	str	lr, [sp, #4]
   11068:	add	fp, sp, #4
   1106c:	movw	r0, #34772	; 0x87d4
   11070:	movt	r0, #1
   11074:	bl	10e20 <gettext@plt>
   11078:	mov	r2, r0
   1107c:	movw	r3, #41300	; 0xa154
   11080:	movt	r3, #2
   11084:	ldr	r3, [r3]
   11088:	mov	r1, r3
   1108c:	mov	r0, r2
   11090:	bl	10cb8 <fputs_unlocked@plt>
   11094:	nop	{0}
   11098:	sub	sp, fp, #4
   1109c:	ldr	fp, [sp]
   110a0:	add	sp, sp, #4
   110a4:	pop	{pc}		; (ldr pc, [sp], #4)
   110a8:	str	fp, [sp, #-8]!
   110ac:	str	lr, [sp, #4]
   110b0:	add	fp, sp, #4
   110b4:	sub	sp, sp, #80	; 0x50
   110b8:	str	r0, [fp, #-80]	; 0xffffffb0
   110bc:	movw	r2, #35220	; 0x8994
   110c0:	movt	r2, #1
   110c4:	sub	r3, fp, #72	; 0x48
   110c8:	ldrd	r0, [r2]
   110cc:	strd	r0, [r3]
   110d0:	ldrd	r0, [r2, #8]
   110d4:	strd	r0, [r3, #8]
   110d8:	ldrd	r0, [r2, #16]
   110dc:	strd	r0, [r3, #16]
   110e0:	ldrd	r0, [r2, #24]
   110e4:	strd	r0, [r3, #24]
   110e8:	ldrd	r0, [r2, #32]
   110ec:	strd	r0, [r3, #32]
   110f0:	ldrd	r0, [r2, #40]	; 0x28
   110f4:	strd	r0, [r3, #40]	; 0x28
   110f8:	ldrd	r0, [r2, #48]	; 0x30
   110fc:	strd	r0, [r3, #48]	; 0x30
   11100:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11104:	str	r3, [fp, #-8]
   11108:	sub	r3, fp, #72	; 0x48
   1110c:	str	r3, [fp, #-12]
   11110:	b	11120 <__assert_fail@plt+0x204>
   11114:	ldr	r3, [fp, #-12]
   11118:	add	r3, r3, #8
   1111c:	str	r3, [fp, #-12]
   11120:	ldr	r3, [fp, #-12]
   11124:	ldr	r3, [r3]
   11128:	cmp	r3, #0
   1112c:	beq	11150 <__assert_fail@plt+0x234>
   11130:	ldr	r3, [fp, #-12]
   11134:	ldr	r3, [r3]
   11138:	mov	r1, r3
   1113c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11140:	bl	10cc4 <strcmp@plt>
   11144:	mov	r3, r0
   11148:	cmp	r3, #0
   1114c:	bne	11114 <__assert_fail@plt+0x1f8>
   11150:	ldr	r3, [fp, #-12]
   11154:	ldr	r3, [r3, #4]
   11158:	cmp	r3, #0
   1115c:	beq	1116c <__assert_fail@plt+0x250>
   11160:	ldr	r3, [fp, #-12]
   11164:	ldr	r3, [r3, #4]
   11168:	str	r3, [fp, #-8]
   1116c:	movw	r0, #34848	; 0x8820
   11170:	movt	r0, #1
   11174:	bl	10e20 <gettext@plt>
   11178:	mov	r3, r0
   1117c:	movw	r2, #34872	; 0x8838
   11180:	movt	r2, #1
   11184:	movw	r1, #34912	; 0x8860
   11188:	movt	r1, #1
   1118c:	mov	r0, r3
   11190:	bl	10cdc <printf@plt>
   11194:	mov	r1, #0
   11198:	mov	r0, #5
   1119c:	bl	10eb0 <setlocale@plt>
   111a0:	str	r0, [fp, #-16]
   111a4:	ldr	r3, [fp, #-16]
   111a8:	cmp	r3, #0
   111ac:	beq	111f8 <__assert_fail@plt+0x2dc>
   111b0:	mov	r2, #3
   111b4:	movw	r1, #34928	; 0x8870
   111b8:	movt	r1, #1
   111bc:	ldr	r0, [fp, #-16]
   111c0:	bl	10ef8 <strncmp@plt>
   111c4:	mov	r3, r0
   111c8:	cmp	r3, #0
   111cc:	beq	111f8 <__assert_fail@plt+0x2dc>
   111d0:	movw	r0, #34932	; 0x8874
   111d4:	movt	r0, #1
   111d8:	bl	10e20 <gettext@plt>
   111dc:	mov	r2, r0
   111e0:	movw	r3, #41300	; 0xa154
   111e4:	movt	r3, #2
   111e8:	ldr	r3, [r3]
   111ec:	mov	r1, r3
   111f0:	mov	r0, r2
   111f4:	bl	10cb8 <fputs_unlocked@plt>
   111f8:	movw	r0, #35004	; 0x88bc
   111fc:	movt	r0, #1
   11200:	bl	10e20 <gettext@plt>
   11204:	mov	r3, r0
   11208:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1120c:	movw	r1, #34872	; 0x8838
   11210:	movt	r1, #1
   11214:	mov	r0, r3
   11218:	bl	10cdc <printf@plt>
   1121c:	movw	r0, #35032	; 0x88d8
   11220:	movt	r0, #1
   11224:	bl	10e20 <gettext@plt>
   11228:	ldr	r2, [fp, #-8]
   1122c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11230:	cmp	r2, r3
   11234:	bne	11244 <__assert_fail@plt+0x328>
   11238:	movw	r3, #35084	; 0x890c
   1123c:	movt	r3, #1
   11240:	b	1124c <__assert_fail@plt+0x330>
   11244:	movw	r3, #35096	; 0x8918
   11248:	movt	r3, #1
   1124c:	mov	r2, r3
   11250:	ldr	r1, [fp, #-8]
   11254:	bl	10cdc <printf@plt>
   11258:	nop	{0}
   1125c:	sub	sp, fp, #4
   11260:	ldr	fp, [sp]
   11264:	add	sp, sp, #4
   11268:	pop	{pc}		; (ldr pc, [sp], #4)
   1126c:	str	r4, [sp, #-12]!
   11270:	str	fp, [sp, #4]
   11274:	str	lr, [sp, #8]
   11278:	add	fp, sp, #8
   1127c:	sub	sp, sp, #12
   11280:	str	r0, [fp, #-16]
   11284:	ldr	r3, [fp, #-16]
   11288:	cmp	r3, #0
   1128c:	beq	112c8 <__assert_fail@plt+0x3ac>
   11290:	movw	r3, #41288	; 0xa148
   11294:	movt	r3, #2
   11298:	ldr	r4, [r3]
   1129c:	movw	r0, #35420	; 0x8a5c
   112a0:	movt	r0, #1
   112a4:	bl	10e20 <gettext@plt>
   112a8:	mov	r1, r0
   112ac:	movw	r3, #41320	; 0xa168
   112b0:	movt	r3, #2
   112b4:	ldr	r3, [r3]
   112b8:	mov	r2, r3
   112bc:	mov	r0, r4
   112c0:	bl	10e44 <fprintf@plt>
   112c4:	b	113c0 <__assert_fail@plt+0x4a4>
   112c8:	movw	r0, #35460	; 0x8a84
   112cc:	movt	r0, #1
   112d0:	bl	10e20 <gettext@plt>
   112d4:	mov	r2, r0
   112d8:	movw	r3, #41320	; 0xa168
   112dc:	movt	r3, #2
   112e0:	ldr	r3, [r3]
   112e4:	mov	r1, r3
   112e8:	mov	r0, r2
   112ec:	bl	10cdc <printf@plt>
   112f0:	movw	r0, #35492	; 0x8aa4
   112f4:	movt	r0, #1
   112f8:	bl	10e20 <gettext@plt>
   112fc:	mov	r3, r0
   11300:	mov	r1, #64	; 0x40
   11304:	mov	r0, r3
   11308:	bl	10cdc <printf@plt>
   1130c:	bl	11018 <__assert_fail@plt+0xfc>
   11310:	bl	11060 <__assert_fail@plt+0x144>
   11314:	movw	r0, #35564	; 0x8aec
   11318:	movt	r0, #1
   1131c:	bl	10e20 <gettext@plt>
   11320:	mov	r2, r0
   11324:	movw	r3, #41300	; 0xa154
   11328:	movt	r3, #2
   1132c:	ldr	r3, [r3]
   11330:	mov	r1, r3
   11334:	mov	r0, r2
   11338:	bl	10cb8 <fputs_unlocked@plt>
   1133c:	movw	r0, #35808	; 0x8be0
   11340:	movt	r0, #1
   11344:	bl	10e20 <gettext@plt>
   11348:	mov	r2, r0
   1134c:	movw	r3, #41300	; 0xa154
   11350:	movt	r3, #2
   11354:	ldr	r3, [r3]
   11358:	mov	r1, r3
   1135c:	mov	r0, r2
   11360:	bl	10cb8 <fputs_unlocked@plt>
   11364:	movw	r0, #35856	; 0x8c10
   11368:	movt	r0, #1
   1136c:	bl	10e20 <gettext@plt>
   11370:	mov	r2, r0
   11374:	movw	r3, #41300	; 0xa154
   11378:	movt	r3, #2
   1137c:	ldr	r3, [r3]
   11380:	mov	r1, r3
   11384:	mov	r0, r2
   11388:	bl	10cb8 <fputs_unlocked@plt>
   1138c:	movw	r0, #35912	; 0x8c48
   11390:	movt	r0, #1
   11394:	bl	10e20 <gettext@plt>
   11398:	mov	r3, r0
   1139c:	movw	r2, #36180	; 0x8d54
   113a0:	movt	r2, #1
   113a4:	movw	r1, #36180	; 0x8d54
   113a8:	movt	r1, #1
   113ac:	mov	r0, r3
   113b0:	bl	10cdc <printf@plt>
   113b4:	movw	r0, #36180	; 0x8d54
   113b8:	movt	r0, #1
   113bc:	bl	110a8 <__assert_fail@plt+0x18c>
   113c0:	ldr	r0, [fp, #-16]
   113c4:	bl	10e14 <exit@plt>
   113c8:	str	r4, [sp, #-12]!
   113cc:	str	fp, [sp, #4]
   113d0:	str	lr, [sp, #8]
   113d4:	add	fp, sp, #8
   113d8:	sub	sp, sp, #28
   113dc:	str	r0, [fp, #-24]	; 0xffffffe8
   113e0:	str	r1, [fp, #-28]	; 0xffffffe4
   113e4:	str	r2, [fp, #-32]	; 0xffffffe0
   113e8:	str	r3, [fp, #-36]	; 0xffffffdc
   113ec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   113f0:	cmp	r3, #0
   113f4:	bne	11450 <__assert_fail@plt+0x534>
   113f8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   113fc:	movw	r3, #41300	; 0xa154
   11400:	movt	r3, #2
   11404:	ldr	r3, [r3]
   11408:	mov	r1, #1
   1140c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11410:	bl	10d30 <fwrite_unlocked@plt>
   11414:	mov	r2, r0
   11418:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1141c:	cmp	r2, r3
   11420:	bcs	11580 <__assert_fail@plt+0x664>
   11424:	bl	10e50 <__errno_location@plt>
   11428:	mov	r3, r0
   1142c:	ldr	r4, [r3]
   11430:	movw	r0, #36188	; 0x8d5c
   11434:	movt	r0, #1
   11438:	bl	10e20 <gettext@plt>
   1143c:	mov	r3, r0
   11440:	mov	r2, r3
   11444:	mov	r1, r4
   11448:	mov	r0, #1
   1144c:	bl	10dc0 <error@plt>
   11450:	mov	r3, #0
   11454:	str	r3, [fp, #-16]
   11458:	b	11570 <__assert_fail@plt+0x654>
   1145c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   11460:	ldr	r3, [fp, #-16]
   11464:	sub	r2, r2, r3
   11468:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1146c:	ldr	r3, [r3]
   11470:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11474:	sub	r3, r1, r3
   11478:	cmp	r2, r3
   1147c:	movlt	r3, r2
   11480:	movge	r3, r3
   11484:	str	r3, [fp, #-20]	; 0xffffffec
   11488:	ldr	r3, [fp, #-20]	; 0xffffffec
   1148c:	cmp	r3, #0
   11490:	bne	114e8 <__assert_fail@plt+0x5cc>
   11494:	ldr	r1, [fp, #4]
   11498:	mov	r0, #10
   1149c:	bl	10d48 <fputc_unlocked@plt>
   114a0:	mov	r3, r0
   114a4:	cmn	r3, #1
   114a8:	bne	114d8 <__assert_fail@plt+0x5bc>
   114ac:	bl	10e50 <__errno_location@plt>
   114b0:	mov	r3, r0
   114b4:	ldr	r4, [r3]
   114b8:	movw	r0, #36188	; 0x8d5c
   114bc:	movt	r0, #1
   114c0:	bl	10e20 <gettext@plt>
   114c4:	mov	r3, r0
   114c8:	mov	r2, r3
   114cc:	mov	r1, r4
   114d0:	mov	r0, #1
   114d4:	bl	10dc0 <error@plt>
   114d8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   114dc:	mov	r2, #0
   114e0:	str	r2, [r3]
   114e4:	b	11570 <__assert_fail@plt+0x654>
   114e8:	ldr	r3, [fp, #-16]
   114ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   114f0:	add	r0, r2, r3
   114f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   114f8:	movw	r3, #41300	; 0xa154
   114fc:	movt	r3, #2
   11500:	ldr	r3, [r3]
   11504:	mov	r1, #1
   11508:	bl	10d30 <fwrite_unlocked@plt>
   1150c:	mov	r2, r0
   11510:	ldr	r3, [fp, #-20]	; 0xffffffec
   11514:	cmp	r2, r3
   11518:	bcs	11548 <__assert_fail@plt+0x62c>
   1151c:	bl	10e50 <__errno_location@plt>
   11520:	mov	r3, r0
   11524:	ldr	r4, [r3]
   11528:	movw	r0, #36188	; 0x8d5c
   1152c:	movt	r0, #1
   11530:	bl	10e20 <gettext@plt>
   11534:	mov	r3, r0
   11538:	mov	r2, r3
   1153c:	mov	r1, r4
   11540:	mov	r0, #1
   11544:	bl	10dc0 <error@plt>
   11548:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1154c:	ldr	r2, [r3]
   11550:	ldr	r3, [fp, #-20]	; 0xffffffec
   11554:	add	r2, r2, r3
   11558:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1155c:	str	r2, [r3]
   11560:	ldr	r2, [fp, #-16]
   11564:	ldr	r3, [fp, #-20]	; 0xffffffec
   11568:	add	r3, r2, r3
   1156c:	str	r3, [fp, #-16]
   11570:	ldr	r2, [fp, #-16]
   11574:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11578:	cmp	r2, r3
   1157c:	blt	1145c <__assert_fail@plt+0x540>
   11580:	nop	{0}
   11584:	sub	sp, fp, #8
   11588:	ldr	r4, [sp]
   1158c:	ldr	fp, [sp, #4]
   11590:	add	sp, sp, #8
   11594:	pop	{pc}		; (ldr pc, [sp], #4)
   11598:	str	r4, [sp, #-12]!
   1159c:	str	fp, [sp, #4]
   115a0:	str	lr, [sp, #8]
   115a4:	add	fp, sp, #8
   115a8:	sub	sp, sp, #12
   115ac:	str	r0, [fp, #-16]
   115b0:	str	r1, [fp, #-20]	; 0xffffffec
   115b4:	ldr	r0, [fp, #-16]
   115b8:	bl	1319c <__assert_fail@plt+0x2280>
   115bc:	mov	r3, r0
   115c0:	cmp	r3, #0
   115c4:	beq	11644 <__assert_fail@plt+0x728>
   115c8:	movw	r1, #36200	; 0x8d68
   115cc:	movt	r1, #1
   115d0:	ldr	r0, [fp, #-20]	; 0xffffffec
   115d4:	bl	10cc4 <strcmp@plt>
   115d8:	mov	r3, r0
   115dc:	cmp	r3, #0
   115e0:	bne	11610 <__assert_fail@plt+0x6f4>
   115e4:	bl	10e50 <__errno_location@plt>
   115e8:	mov	r3, r0
   115ec:	ldr	r4, [r3]
   115f0:	movw	r0, #36204	; 0x8d6c
   115f4:	movt	r0, #1
   115f8:	bl	10e20 <gettext@plt>
   115fc:	mov	r3, r0
   11600:	mov	r2, r3
   11604:	mov	r1, r4
   11608:	mov	r0, #1
   1160c:	bl	10dc0 <error@plt>
   11610:	bl	10e50 <__errno_location@plt>
   11614:	mov	r3, r0
   11618:	ldr	r4, [r3]
   1161c:	ldr	r2, [fp, #-20]	; 0xffffffec
   11620:	mov	r1, #3
   11624:	mov	r0, #0
   11628:	bl	15cd4 <__assert_fail@plt+0x4db8>
   1162c:	mov	r3, r0
   11630:	movw	r2, #36228	; 0x8d84
   11634:	movt	r2, #1
   11638:	mov	r1, r4
   1163c:	mov	r0, #1
   11640:	bl	10dc0 <error@plt>
   11644:	mov	r0, #0
   11648:	bl	10e14 <exit@plt>
   1164c:	str	r4, [sp, #-12]!
   11650:	str	fp, [sp, #4]
   11654:	str	lr, [sp, #8]
   11658:	add	fp, sp, #8
   1165c:	sub	sp, sp, #52	; 0x34
   11660:	str	r0, [fp, #-40]	; 0xffffffd8
   11664:	str	r1, [fp, #-44]	; 0xffffffd4
   11668:	str	r2, [fp, #-48]	; 0xffffffd0
   1166c:	str	r3, [fp, #-52]	; 0xffffffcc
   11670:	mov	r3, #0
   11674:	str	r3, [fp, #-32]	; 0xffffffe0
   11678:	mov	r0, #30720	; 0x7800
   1167c:	bl	168fc <__assert_fail@plt+0x59e0>
   11680:	mov	r3, r0
   11684:	str	r3, [fp, #-20]	; 0xffffffec
   11688:	mov	r0, #40960	; 0xa000
   1168c:	bl	168fc <__assert_fail@plt+0x59e0>
   11690:	mov	r3, r0
   11694:	str	r3, [fp, #-24]	; 0xffffffe8
   11698:	mov	r3, #0
   1169c:	str	r3, [fp, #-16]
   116a0:	ldr	r3, [fp, #-16]
   116a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   116a8:	add	r0, r2, r3
   116ac:	ldr	r3, [fp, #-16]
   116b0:	rsb	r3, r3, #30720	; 0x7800
   116b4:	mov	r2, r3
   116b8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   116bc:	mov	r1, #1
   116c0:	bl	10eec <fread_unlocked@plt>
   116c4:	mov	r3, r0
   116c8:	str	r3, [fp, #-28]	; 0xffffffe4
   116cc:	ldr	r2, [fp, #-16]
   116d0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   116d4:	add	r3, r2, r3
   116d8:	str	r3, [fp, #-16]
   116dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116e0:	bl	10f10 <feof_unlocked@plt>
   116e4:	mov	r3, r0
   116e8:	cmp	r3, #0
   116ec:	bne	11710 <__assert_fail@plt+0x7f4>
   116f0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   116f4:	bl	10da8 <ferror_unlocked@plt>
   116f8:	mov	r3, r0
   116fc:	cmp	r3, #0
   11700:	bne	11710 <__assert_fail@plt+0x7f4>
   11704:	ldr	r3, [fp, #-16]
   11708:	cmp	r3, #30720	; 0x7800
   1170c:	blt	116a0 <__assert_fail@plt+0x784>
   11710:	ldr	r3, [fp, #-16]
   11714:	cmp	r3, #0
   11718:	ble	11788 <__assert_fail@plt+0x86c>
   1171c:	ldr	r3, [fp, #-16]
   11720:	add	r2, r3, #2
   11724:	movw	r3, #21846	; 0x5556
   11728:	movt	r3, #21845	; 0x5555
   1172c:	smull	r3, r1, r3, r2
   11730:	asr	r3, r2, #31
   11734:	sub	r3, r1, r3
   11738:	lsl	r3, r3, #2
   1173c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   11740:	ldr	r1, [fp, #-16]
   11744:	ldr	r0, [fp, #-20]	; 0xffffffec
   11748:	bl	12170 <__assert_fail@plt+0x1254>
   1174c:	ldr	r3, [fp, #-16]
   11750:	add	r2, r3, #2
   11754:	movw	r3, #21846	; 0x5556
   11758:	movt	r3, #21845	; 0x5555
   1175c:	smull	r3, r1, r3, r2
   11760:	asr	r3, r2, #31
   11764:	sub	r3, r1, r3
   11768:	lsl	r1, r3, #2
   1176c:	sub	r2, fp, #32
   11770:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11774:	str	r3, [sp]
   11778:	mov	r3, r2
   1177c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11780:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11784:	bl	113c8 <__assert_fail@plt+0x4ac>
   11788:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1178c:	bl	10f10 <feof_unlocked@plt>
   11790:	mov	r3, r0
   11794:	cmp	r3, #0
   11798:	bne	117bc <__assert_fail@plt+0x8a0>
   1179c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   117a0:	bl	10da8 <ferror_unlocked@plt>
   117a4:	mov	r3, r0
   117a8:	cmp	r3, #0
   117ac:	bne	117bc <__assert_fail@plt+0x8a0>
   117b0:	ldr	r3, [fp, #-16]
   117b4:	cmp	r3, #30720	; 0x7800
   117b8:	beq	11698 <__assert_fail@plt+0x77c>
   117bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   117c0:	cmp	r3, #0
   117c4:	beq	11818 <__assert_fail@plt+0x8fc>
   117c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   117cc:	cmp	r3, #0
   117d0:	ble	11818 <__assert_fail@plt+0x8fc>
   117d4:	ldr	r1, [fp, #-48]	; 0xffffffd0
   117d8:	mov	r0, #10
   117dc:	bl	10d48 <fputc_unlocked@plt>
   117e0:	mov	r3, r0
   117e4:	cmn	r3, #1
   117e8:	bne	11818 <__assert_fail@plt+0x8fc>
   117ec:	bl	10e50 <__errno_location@plt>
   117f0:	mov	r3, r0
   117f4:	ldr	r4, [r3]
   117f8:	movw	r0, #36188	; 0x8d5c
   117fc:	movt	r0, #1
   11800:	bl	10e20 <gettext@plt>
   11804:	mov	r3, r0
   11808:	mov	r2, r3
   1180c:	mov	r1, r4
   11810:	mov	r0, #1
   11814:	bl	10dc0 <error@plt>
   11818:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1181c:	bl	10da8 <ferror_unlocked@plt>
   11820:	mov	r3, r0
   11824:	cmp	r3, #0
   11828:	beq	11858 <__assert_fail@plt+0x93c>
   1182c:	bl	10e50 <__errno_location@plt>
   11830:	mov	r3, r0
   11834:	ldr	r4, [r3]
   11838:	movw	r0, #36232	; 0x8d88
   1183c:	movt	r0, #1
   11840:	bl	10e20 <gettext@plt>
   11844:	mov	r3, r0
   11848:	mov	r2, r3
   1184c:	mov	r1, r4
   11850:	mov	r0, #1
   11854:	bl	10dc0 <error@plt>
   11858:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1185c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11860:	bl	11598 <__assert_fail@plt+0x67c>
   11864:	nop	{0}
   11868:	sub	sp, fp, #8
   1186c:	ldr	r4, [sp]
   11870:	ldr	fp, [sp, #4]
   11874:	add	sp, sp, #8
   11878:	pop	{pc}		; (ldr pc, [sp], #4)
   1187c:	str	r4, [sp, #-12]!
   11880:	str	fp, [sp, #4]
   11884:	str	lr, [sp, #8]
   11888:	add	fp, sp, #8
   1188c:	sub	sp, sp, #68	; 0x44
   11890:	str	r0, [fp, #-56]	; 0xffffffc8
   11894:	str	r1, [fp, #-60]	; 0xffffffc4
   11898:	str	r2, [fp, #-64]	; 0xffffffc0
   1189c:	strb	r3, [fp, #-65]	; 0xffffffbf
   118a0:	mov	r0, #4096	; 0x1000
   118a4:	bl	168fc <__assert_fail@plt+0x59e0>
   118a8:	mov	r3, r0
   118ac:	str	r3, [fp, #-32]	; 0xffffffe0
   118b0:	mov	r0, #3072	; 0xc00
   118b4:	bl	168fc <__assert_fail@plt+0x59e0>
   118b8:	mov	r3, r0
   118bc:	str	r3, [fp, #-36]	; 0xffffffdc
   118c0:	sub	r3, fp, #48	; 0x30
   118c4:	mov	r0, r3
   118c8:	bl	12630 <__assert_fail@plt+0x1714>
   118cc:	mov	r3, #0
   118d0:	str	r3, [fp, #-16]
   118d4:	ldr	r3, [fp, #-16]
   118d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   118dc:	add	r0, r2, r3
   118e0:	ldr	r3, [fp, #-16]
   118e4:	rsb	r3, r3, #4096	; 0x1000
   118e8:	mov	r2, r3
   118ec:	ldr	r3, [fp, #-56]	; 0xffffffc8
   118f0:	mov	r1, #1
   118f4:	bl	10eec <fread_unlocked@plt>
   118f8:	mov	r3, r0
   118fc:	str	r3, [fp, #-20]	; 0xffffffec
   11900:	ldrb	r3, [fp, #-65]	; 0xffffffbf
   11904:	cmp	r3, #0
   11908:	beq	119e4 <__assert_fail@plt+0xac8>
   1190c:	mov	r3, #0
   11910:	str	r3, [fp, #-24]	; 0xffffffe8
   11914:	b	119c8 <__assert_fail@plt+0xaac>
   11918:	ldr	r2, [fp, #-16]
   1191c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11920:	add	r3, r2, r3
   11924:	mov	r2, r3
   11928:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1192c:	add	r3, r3, r2
   11930:	ldrb	r3, [r3]
   11934:	mov	r0, r3
   11938:	bl	125d4 <__assert_fail@plt+0x16b8>
   1193c:	mov	r3, r0
   11940:	cmp	r3, #0
   11944:	bne	1196c <__assert_fail@plt+0xa50>
   11948:	ldr	r2, [fp, #-16]
   1194c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11950:	add	r3, r2, r3
   11954:	mov	r2, r3
   11958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1195c:	add	r3, r3, r2
   11960:	ldrb	r3, [r3]
   11964:	cmp	r3, #61	; 0x3d
   11968:	bne	1197c <__assert_fail@plt+0xa60>
   1196c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11970:	add	r3, r3, #1
   11974:	str	r3, [fp, #-24]	; 0xffffffe8
   11978:	b	119c8 <__assert_fail@plt+0xaac>
   1197c:	ldr	r2, [fp, #-16]
   11980:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11984:	add	r3, r2, r3
   11988:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1198c:	add	r0, r2, r3
   11990:	ldr	r2, [fp, #-16]
   11994:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11998:	add	r3, r2, r3
   1199c:	add	r3, r3, #1
   119a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   119a4:	add	r1, r2, r3
   119a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119ac:	sub	r3, r3, #1
   119b0:	str	r3, [fp, #-20]	; 0xffffffec
   119b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   119b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   119bc:	sub	r3, r2, r3
   119c0:	mov	r2, r3
   119c4:	bl	10cf4 <memmove@plt>
   119c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119cc:	cmp	r3, #0
   119d0:	ble	119e4 <__assert_fail@plt+0xac8>
   119d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   119d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119dc:	cmp	r2, r3
   119e0:	blt	11918 <__assert_fail@plt+0x9fc>
   119e4:	ldr	r2, [fp, #-16]
   119e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   119ec:	add	r3, r2, r3
   119f0:	str	r3, [fp, #-16]
   119f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   119f8:	bl	10da8 <ferror_unlocked@plt>
   119fc:	mov	r3, r0
   11a00:	cmp	r3, #0
   11a04:	beq	11a34 <__assert_fail@plt+0xb18>
   11a08:	bl	10e50 <__errno_location@plt>
   11a0c:	mov	r3, r0
   11a10:	ldr	r4, [r3]
   11a14:	movw	r0, #36232	; 0x8d88
   11a18:	movt	r0, #1
   11a1c:	bl	10e20 <gettext@plt>
   11a20:	mov	r3, r0
   11a24:	mov	r2, r3
   11a28:	mov	r1, r4
   11a2c:	mov	r0, #1
   11a30:	bl	10dc0 <error@plt>
   11a34:	ldr	r3, [fp, #-16]
   11a38:	cmp	r3, #4096	; 0x1000
   11a3c:	bge	11a54 <__assert_fail@plt+0xb38>
   11a40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11a44:	bl	10f10 <feof_unlocked@plt>
   11a48:	mov	r3, r0
   11a4c:	cmp	r3, #0
   11a50:	beq	118d4 <__assert_fail@plt+0x9b8>
   11a54:	mov	r3, #0
   11a58:	str	r3, [fp, #-28]	; 0xffffffe4
   11a5c:	b	11b4c <__assert_fail@plt+0xc30>
   11a60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a64:	cmp	r3, #1
   11a68:	bne	11a78 <__assert_fail@plt+0xb5c>
   11a6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11a70:	cmp	r3, #0
   11a74:	beq	11b7c <__assert_fail@plt+0xc60>
   11a78:	mov	r3, #3072	; 0xc00
   11a7c:	str	r3, [fp, #-52]	; 0xffffffcc
   11a80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a84:	cmp	r3, #0
   11a88:	bne	11a94 <__assert_fail@plt+0xb78>
   11a8c:	ldr	r2, [fp, #-16]
   11a90:	b	11a98 <__assert_fail@plt+0xb7c>
   11a94:	mov	r2, #0
   11a98:	sub	r0, fp, #48	; 0x30
   11a9c:	sub	r3, fp, #52	; 0x34
   11aa0:	str	r3, [sp]
   11aa4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11aa8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   11aac:	bl	12bb0 <__assert_fail@plt+0x1c94>
   11ab0:	mov	r3, r0
   11ab4:	strb	r3, [fp, #-37]	; 0xffffffdb
   11ab8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11abc:	mov	r2, r3
   11ac0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11ac4:	mov	r1, #1
   11ac8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11acc:	bl	10d30 <fwrite_unlocked@plt>
   11ad0:	mov	r2, r0
   11ad4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11ad8:	cmp	r2, r3
   11adc:	bcs	11b0c <__assert_fail@plt+0xbf0>
   11ae0:	bl	10e50 <__errno_location@plt>
   11ae4:	mov	r3, r0
   11ae8:	ldr	r4, [r3]
   11aec:	movw	r0, #36188	; 0x8d5c
   11af0:	movt	r0, #1
   11af4:	bl	10e20 <gettext@plt>
   11af8:	mov	r3, r0
   11afc:	mov	r2, r3
   11b00:	mov	r1, r4
   11b04:	mov	r0, #1
   11b08:	bl	10dc0 <error@plt>
   11b0c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11b10:	eor	r3, r3, #1
   11b14:	uxtb	r3, r3
   11b18:	cmp	r3, #0
   11b1c:	beq	11b40 <__assert_fail@plt+0xc24>
   11b20:	movw	r0, #36244	; 0x8d94
   11b24:	movt	r0, #1
   11b28:	bl	10e20 <gettext@plt>
   11b2c:	mov	r3, r0
   11b30:	mov	r2, r3
   11b34:	mov	r1, #0
   11b38:	mov	r0, #1
   11b3c:	bl	10dc0 <error@plt>
   11b40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b44:	add	r3, r3, #1
   11b48:	str	r3, [fp, #-28]	; 0xffffffe4
   11b4c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b50:	bl	10f10 <feof_unlocked@plt>
   11b54:	mov	r3, r0
   11b58:	cmp	r3, #0
   11b5c:	beq	11b68 <__assert_fail@plt+0xc4c>
   11b60:	mov	r2, #2
   11b64:	b	11b6c <__assert_fail@plt+0xc50>
   11b68:	mov	r2, #1
   11b6c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b70:	cmp	r2, r3
   11b74:	bgt	11a60 <__assert_fail@plt+0xb44>
   11b78:	b	11b80 <__assert_fail@plt+0xc64>
   11b7c:	nop	{0}
   11b80:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b84:	bl	10f10 <feof_unlocked@plt>
   11b88:	mov	r3, r0
   11b8c:	cmp	r3, #0
   11b90:	beq	118cc <__assert_fail@plt+0x9b0>
   11b94:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11b98:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11b9c:	bl	11598 <__assert_fail@plt+0x67c>
   11ba0:	nop	{0}
   11ba4:	sub	sp, fp, #8
   11ba8:	ldr	r4, [sp]
   11bac:	ldr	fp, [sp, #4]
   11bb0:	add	sp, sp, #8
   11bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11bb8:	str	r4, [sp, #-12]!
   11bbc:	str	fp, [sp, #4]
   11bc0:	str	lr, [sp, #8]
   11bc4:	add	fp, sp, #8
   11bc8:	sub	sp, sp, #52	; 0x34
   11bcc:	str	r0, [fp, #-48]	; 0xffffffd0
   11bd0:	str	r1, [fp, #-52]	; 0xffffffcc
   11bd4:	mov	r3, #0
   11bd8:	strb	r3, [fp, #-21]	; 0xffffffeb
   11bdc:	mov	r3, #0
   11be0:	strb	r3, [fp, #-22]	; 0xffffffea
   11be4:	mov	r3, #76	; 0x4c
   11be8:	str	r3, [fp, #-28]	; 0xffffffe4
   11bec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11bf0:	ldr	r3, [r3]
   11bf4:	mov	r0, r3
   11bf8:	bl	13670 <__assert_fail@plt+0x2754>
   11bfc:	movw	r1, #35096	; 0x8918
   11c00:	movt	r1, #1
   11c04:	mov	r0, #6
   11c08:	bl	10eb0 <setlocale@plt>
   11c0c:	movw	r1, #36260	; 0x8da4
   11c10:	movt	r1, #1
   11c14:	movw	r0, #35120	; 0x8930
   11c18:	movt	r0, #1
   11c1c:	bl	10ee0 <bindtextdomain@plt>
   11c20:	movw	r0, #35120	; 0x8930
   11c24:	movt	r0, #1
   11c28:	bl	10d60 <textdomain@plt>
   11c2c:	movw	r0, #12184	; 0x2f98
   11c30:	movt	r0, #1
   11c34:	bl	18778 <__assert_fail@plt+0x785c>
   11c38:	b	11dcc <__assert_fail@plt+0xeb0>
   11c3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c40:	cmp	r3, #100	; 0x64
   11c44:	beq	11c8c <__assert_fail@plt+0xd70>
   11c48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c4c:	cmp	r3, #100	; 0x64
   11c50:	bgt	11c70 <__assert_fail@plt+0xd54>
   11c54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c58:	cmn	r3, #3
   11c5c:	beq	11d78 <__assert_fail@plt+0xe5c>
   11c60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c64:	cmn	r3, #2
   11c68:	beq	11d70 <__assert_fail@plt+0xe54>
   11c6c:	b	11dc4 <__assert_fail@plt+0xea8>
   11c70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c74:	cmp	r3, #105	; 0x69
   11c78:	beq	11d64 <__assert_fail@plt+0xe48>
   11c7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11c80:	cmp	r3, #119	; 0x77
   11c84:	beq	11c98 <__assert_fail@plt+0xd7c>
   11c88:	b	11dc4 <__assert_fail@plt+0xea8>
   11c8c:	mov	r3, #1
   11c90:	strb	r3, [fp, #-21]	; 0xffffffeb
   11c94:	b	11dcc <__assert_fail@plt+0xeb0>
   11c98:	movw	r3, #41304	; 0xa158
   11c9c:	movt	r3, #2
   11ca0:	ldr	r0, [r3]
   11ca4:	sub	r2, fp, #44	; 0x2c
   11ca8:	movw	r3, #35096	; 0x8918
   11cac:	movt	r3, #1
   11cb0:	str	r3, [sp]
   11cb4:	mov	r3, r2
   11cb8:	mov	r2, #10
   11cbc:	mov	r1, #0
   11cc0:	bl	1749c <__assert_fail@plt+0x6580>
   11cc4:	str	r0, [fp, #-36]	; 0xffffffdc
   11cc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11ccc:	cmp	r3, #1
   11cd0:	bhi	11ce4 <__assert_fail@plt+0xdc8>
   11cd4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11cd8:	cmp	r2, #0
   11cdc:	sbcs	r3, r3, #0
   11ce0:	bge	11d28 <__assert_fail@plt+0xe0c>
   11ce4:	movw	r0, #36284	; 0x8dbc
   11ce8:	movt	r0, #1
   11cec:	bl	10e20 <gettext@plt>
   11cf0:	mov	r4, r0
   11cf4:	movw	r3, #41304	; 0xa158
   11cf8:	movt	r3, #2
   11cfc:	ldr	r3, [r3]
   11d00:	mov	r0, r3
   11d04:	bl	15fd0 <__assert_fail@plt+0x50b4>
   11d08:	mov	r3, r0
   11d0c:	str	r3, [sp]
   11d10:	mov	r3, r4
   11d14:	movw	r2, #36304	; 0x8dd0
   11d18:	movt	r2, #1
   11d1c:	mov	r1, #0
   11d20:	mov	r0, #1
   11d24:	bl	10dc0 <error@plt>
   11d28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d2c:	cmp	r3, #1
   11d30:	beq	11d58 <__assert_fail@plt+0xe3c>
   11d34:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d38:	mvn	r0, #-2147483648	; 0x80000000
   11d3c:	mov	r1, #0
   11d40:	cmp	r0, r2
   11d44:	sbcs	r3, r1, r3
   11d48:	blt	11d58 <__assert_fail@plt+0xe3c>
   11d4c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11d50:	mov	r3, r2
   11d54:	b	11d5c <__assert_fail@plt+0xe40>
   11d58:	mov	r3, #0
   11d5c:	str	r3, [fp, #-28]	; 0xffffffe4
   11d60:	b	11dcc <__assert_fail@plt+0xeb0>
   11d64:	mov	r3, #1
   11d68:	strb	r3, [fp, #-22]	; 0xffffffea
   11d6c:	b	11dcc <__assert_fail@plt+0xeb0>
   11d70:	mov	r0, #0
   11d74:	bl	1126c <__assert_fail@plt+0x350>
   11d78:	movw	r3, #41300	; 0xa154
   11d7c:	movt	r3, #2
   11d80:	ldr	r0, [r3]
   11d84:	movw	r3, #41196	; 0xa0ec
   11d88:	movt	r3, #2
   11d8c:	ldr	r2, [r3]
   11d90:	mov	r3, #0
   11d94:	str	r3, [sp, #4]
   11d98:	movw	r3, #36312	; 0x8dd8
   11d9c:	movt	r3, #1
   11da0:	str	r3, [sp]
   11da4:	mov	r3, r2
   11da8:	movw	r2, #34912	; 0x8860
   11dac:	movt	r2, #1
   11db0:	movw	r1, #36180	; 0x8d54
   11db4:	movt	r1, #1
   11db8:	bl	1677c <__assert_fail@plt+0x5860>
   11dbc:	mov	r0, #0
   11dc0:	bl	10e14 <exit@plt>
   11dc4:	mov	r0, #1
   11dc8:	bl	1126c <__assert_fail@plt+0x350>
   11dcc:	mov	r3, #0
   11dd0:	str	r3, [sp]
   11dd4:	movw	r3, #35324	; 0x89fc
   11dd8:	movt	r3, #1
   11ddc:	movw	r2, #36328	; 0x8de8
   11de0:	movt	r2, #1
   11de4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   11de8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11dec:	bl	10dfc <getopt_long@plt>
   11df0:	str	r0, [fp, #-32]	; 0xffffffe0
   11df4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11df8:	cmn	r3, #1
   11dfc:	bne	11c3c <__assert_fail@plt+0xd20>
   11e00:	movw	r3, #41280	; 0xa140
   11e04:	movt	r3, #2
   11e08:	ldr	r3, [r3]
   11e0c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e10:	sub	r3, r2, r3
   11e14:	cmp	r3, #1
   11e18:	ble	11e70 <__assert_fail@plt+0xf54>
   11e1c:	movw	r0, #36336	; 0x8df0
   11e20:	movt	r0, #1
   11e24:	bl	10e20 <gettext@plt>
   11e28:	mov	r4, r0
   11e2c:	movw	r3, #41280	; 0xa140
   11e30:	movt	r3, #2
   11e34:	ldr	r3, [r3]
   11e38:	add	r3, r3, #1
   11e3c:	lsl	r3, r3, #2
   11e40:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e44:	add	r3, r2, r3
   11e48:	ldr	r3, [r3]
   11e4c:	mov	r0, r3
   11e50:	bl	15fd0 <__assert_fail@plt+0x50b4>
   11e54:	mov	r3, r0
   11e58:	mov	r2, r4
   11e5c:	mov	r1, #0
   11e60:	mov	r0, #0
   11e64:	bl	10dc0 <error@plt>
   11e68:	mov	r0, #1
   11e6c:	bl	1126c <__assert_fail@plt+0x350>
   11e70:	movw	r3, #41280	; 0xa140
   11e74:	movt	r3, #2
   11e78:	ldr	r3, [r3]
   11e7c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   11e80:	cmp	r2, r3
   11e84:	ble	11eac <__assert_fail@plt+0xf90>
   11e88:	movw	r3, #41280	; 0xa140
   11e8c:	movt	r3, #2
   11e90:	ldr	r3, [r3]
   11e94:	lsl	r3, r3, #2
   11e98:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e9c:	add	r3, r2, r3
   11ea0:	ldr	r3, [r3]
   11ea4:	str	r3, [fp, #-20]	; 0xffffffec
   11ea8:	b	11eb8 <__assert_fail@plt+0xf9c>
   11eac:	movw	r3, #36200	; 0x8d68
   11eb0:	movt	r3, #1
   11eb4:	str	r3, [fp, #-20]	; 0xffffffec
   11eb8:	movw	r1, #36200	; 0x8d68
   11ebc:	movt	r1, #1
   11ec0:	ldr	r0, [fp, #-20]	; 0xffffffec
   11ec4:	bl	10cc4 <strcmp@plt>
   11ec8:	mov	r3, r0
   11ecc:	cmp	r3, #0
   11ed0:	bne	11ef4 <__assert_fail@plt+0xfd8>
   11ed4:	mov	r1, #0
   11ed8:	mov	r0, #0
   11edc:	bl	171cc <__assert_fail@plt+0x62b0>
   11ee0:	movw	r3, #41296	; 0xa150
   11ee4:	movt	r3, #2
   11ee8:	ldr	r3, [r3]
   11eec:	str	r3, [fp, #-16]
   11ef0:	b	11f48 <__assert_fail@plt+0x102c>
   11ef4:	movw	r1, #36356	; 0x8e04
   11ef8:	movt	r1, #1
   11efc:	ldr	r0, [fp, #-20]	; 0xffffffec
   11f00:	bl	10ed4 <fopen64@plt>
   11f04:	str	r0, [fp, #-16]
   11f08:	ldr	r3, [fp, #-16]
   11f0c:	cmp	r3, #0
   11f10:	bne	11f48 <__assert_fail@plt+0x102c>
   11f14:	bl	10e50 <__errno_location@plt>
   11f18:	mov	r3, r0
   11f1c:	ldr	r4, [r3]
   11f20:	ldr	r2, [fp, #-20]	; 0xffffffec
   11f24:	mov	r1, #3
   11f28:	mov	r0, #0
   11f2c:	bl	15cd4 <__assert_fail@plt+0x4db8>
   11f30:	mov	r3, r0
   11f34:	movw	r2, #36228	; 0x8d84
   11f38:	movt	r2, #1
   11f3c:	mov	r1, r4
   11f40:	mov	r0, #1
   11f44:	bl	10dc0 <error@plt>
   11f48:	mov	r1, #2
   11f4c:	ldr	r0, [fp, #-16]
   11f50:	bl	13134 <__assert_fail@plt+0x2218>
   11f54:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11f58:	cmp	r3, #0
   11f5c:	beq	11f80 <__assert_fail@plt+0x1064>
   11f60:	movw	r3, #41300	; 0xa154
   11f64:	movt	r3, #2
   11f68:	ldr	r2, [r3]
   11f6c:	ldrb	r3, [fp, #-22]	; 0xffffffea
   11f70:	ldr	r1, [fp, #-20]	; 0xffffffec
   11f74:	ldr	r0, [fp, #-16]
   11f78:	bl	1187c <__assert_fail@plt+0x960>
   11f7c:	b	11f9c <__assert_fail@plt+0x1080>
   11f80:	movw	r3, #41300	; 0xa154
   11f84:	movt	r3, #2
   11f88:	ldr	r2, [r3]
   11f8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11f90:	ldr	r1, [fp, #-20]	; 0xffffffec
   11f94:	ldr	r0, [fp, #-16]
   11f98:	bl	1164c <__assert_fail@plt+0x730>
   11f9c:	mov	r3, #0
   11fa0:	mov	r0, r3
   11fa4:	sub	sp, fp, #8
   11fa8:	ldr	r4, [sp]
   11fac:	ldr	fp, [sp, #4]
   11fb0:	add	sp, sp, #8
   11fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fb8:	push	{fp}		; (str fp, [sp, #-4]!)
   11fbc:	add	fp, sp, #0
   11fc0:	sub	sp, sp, #12
   11fc4:	mov	r3, r0
   11fc8:	strb	r3, [fp, #-5]
   11fcc:	ldrb	r3, [fp, #-5]
   11fd0:	mov	r0, r3
   11fd4:	add	sp, fp, #0
   11fd8:	pop	{fp}		; (ldr fp, [sp], #4)
   11fdc:	bx	lr
   11fe0:	str	r4, [sp, #-12]!
   11fe4:	str	fp, [sp, #4]
   11fe8:	str	lr, [sp, #8]
   11fec:	add	fp, sp, #8
   11ff0:	sub	sp, sp, #20
   11ff4:	str	r0, [fp, #-16]
   11ff8:	str	r1, [fp, #-20]	; 0xffffffec
   11ffc:	str	r2, [fp, #-24]	; 0xffffffe8
   12000:	b	1214c <__assert_fail@plt+0x1230>
   12004:	ldr	r3, [fp, #-16]
   12008:	ldrb	r3, [r3]
   1200c:	mov	r0, r3
   12010:	bl	11fb8 <__assert_fail@plt+0x109c>
   12014:	mov	r3, r0
   12018:	lsr	r3, r3, #2
   1201c:	uxtb	r3, r3
   12020:	and	r1, r3, #63	; 0x3f
   12024:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12028:	add	r3, r2, #1
   1202c:	str	r3, [fp, #-24]	; 0xffffffe8
   12030:	movw	r3, #36376	; 0x8e18
   12034:	movt	r3, #1
   12038:	ldrb	r3, [r3, r1]
   1203c:	strb	r3, [r2]
   12040:	ldr	r3, [fp, #-16]
   12044:	ldrb	r3, [r3]
   12048:	mov	r0, r3
   1204c:	bl	11fb8 <__assert_fail@plt+0x109c>
   12050:	mov	r3, r0
   12054:	lsl	r4, r3, #4
   12058:	ldr	r3, [fp, #-16]
   1205c:	add	r3, r3, #1
   12060:	ldrb	r3, [r3]
   12064:	mov	r0, r3
   12068:	bl	11fb8 <__assert_fail@plt+0x109c>
   1206c:	mov	r3, r0
   12070:	lsr	r3, r3, #4
   12074:	uxtb	r3, r3
   12078:	add	r3, r4, r3
   1207c:	and	r1, r3, #63	; 0x3f
   12080:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12084:	add	r3, r2, #1
   12088:	str	r3, [fp, #-24]	; 0xffffffe8
   1208c:	movw	r3, #36376	; 0x8e18
   12090:	movt	r3, #1
   12094:	ldrb	r3, [r3, r1]
   12098:	strb	r3, [r2]
   1209c:	ldr	r3, [fp, #-16]
   120a0:	add	r3, r3, #1
   120a4:	ldrb	r3, [r3]
   120a8:	mov	r0, r3
   120ac:	bl	11fb8 <__assert_fail@plt+0x109c>
   120b0:	mov	r3, r0
   120b4:	lsl	r4, r3, #2
   120b8:	ldr	r3, [fp, #-16]
   120bc:	add	r3, r3, #2
   120c0:	ldrb	r3, [r3]
   120c4:	mov	r0, r3
   120c8:	bl	11fb8 <__assert_fail@plt+0x109c>
   120cc:	mov	r3, r0
   120d0:	lsr	r3, r3, #6
   120d4:	uxtb	r3, r3
   120d8:	add	r3, r4, r3
   120dc:	and	r1, r3, #63	; 0x3f
   120e0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   120e4:	add	r3, r2, #1
   120e8:	str	r3, [fp, #-24]	; 0xffffffe8
   120ec:	movw	r3, #36376	; 0x8e18
   120f0:	movt	r3, #1
   120f4:	ldrb	r3, [r3, r1]
   120f8:	strb	r3, [r2]
   120fc:	ldr	r3, [fp, #-16]
   12100:	add	r3, r3, #2
   12104:	ldrb	r3, [r3]
   12108:	mov	r0, r3
   1210c:	bl	11fb8 <__assert_fail@plt+0x109c>
   12110:	mov	r3, r0
   12114:	and	r1, r3, #63	; 0x3f
   12118:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1211c:	add	r3, r2, #1
   12120:	str	r3, [fp, #-24]	; 0xffffffe8
   12124:	movw	r3, #36376	; 0x8e18
   12128:	movt	r3, #1
   1212c:	ldrb	r3, [r3, r1]
   12130:	strb	r3, [r2]
   12134:	ldr	r3, [fp, #-20]	; 0xffffffec
   12138:	sub	r3, r3, #3
   1213c:	str	r3, [fp, #-20]	; 0xffffffec
   12140:	ldr	r3, [fp, #-16]
   12144:	add	r3, r3, #3
   12148:	str	r3, [fp, #-16]
   1214c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12150:	cmp	r3, #0
   12154:	bne	12004 <__assert_fail@plt+0x10e8>
   12158:	nop	{0}
   1215c:	sub	sp, fp, #8
   12160:	ldr	r4, [sp]
   12164:	ldr	fp, [sp, #4]
   12168:	add	sp, sp, #8
   1216c:	pop	{pc}		; (ldr pc, [sp], #4)
   12170:	str	r4, [sp, #-12]!
   12174:	str	fp, [sp, #4]
   12178:	str	lr, [sp, #8]
   1217c:	add	fp, sp, #8
   12180:	sub	sp, sp, #20
   12184:	str	r0, [fp, #-16]
   12188:	str	r1, [fp, #-20]	; 0xffffffec
   1218c:	str	r2, [fp, #-24]	; 0xffffffe8
   12190:	str	r3, [fp, #-28]	; 0xffffffe4
   12194:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12198:	and	r3, r3, #3
   1219c:	cmp	r3, #0
   121a0:	bne	12408 <__assert_fail@plt+0x14ec>
   121a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   121a8:	asr	r2, r3, #2
   121ac:	mov	r3, r2
   121b0:	lsl	r3, r3, #1
   121b4:	add	r3, r3, r2
   121b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   121bc:	cmp	r2, r3
   121c0:	bne	12408 <__assert_fail@plt+0x14ec>
   121c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   121c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   121cc:	ldr	r0, [fp, #-16]
   121d0:	bl	11fe0 <__assert_fail@plt+0x10c4>
   121d4:	b	12458 <__assert_fail@plt+0x153c>
   121d8:	ldr	r3, [fp, #-16]
   121dc:	ldrb	r3, [r3]
   121e0:	mov	r0, r3
   121e4:	bl	11fb8 <__assert_fail@plt+0x109c>
   121e8:	mov	r3, r0
   121ec:	lsr	r3, r3, #2
   121f0:	uxtb	r3, r3
   121f4:	and	r1, r3, #63	; 0x3f
   121f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   121fc:	add	r3, r2, #1
   12200:	str	r3, [fp, #-24]	; 0xffffffe8
   12204:	movw	r3, #36376	; 0x8e18
   12208:	movt	r3, #1
   1220c:	ldrb	r3, [r3, r1]
   12210:	strb	r3, [r2]
   12214:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12218:	sub	r3, r3, #1
   1221c:	str	r3, [fp, #-28]	; 0xffffffe4
   12220:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12224:	cmp	r3, #0
   12228:	beq	12424 <__assert_fail@plt+0x1508>
   1222c:	ldr	r3, [fp, #-16]
   12230:	ldrb	r3, [r3]
   12234:	mov	r0, r3
   12238:	bl	11fb8 <__assert_fail@plt+0x109c>
   1223c:	mov	r3, r0
   12240:	lsl	r4, r3, #4
   12244:	ldr	r3, [fp, #-20]	; 0xffffffec
   12248:	sub	r3, r3, #1
   1224c:	str	r3, [fp, #-20]	; 0xffffffec
   12250:	ldr	r3, [fp, #-20]	; 0xffffffec
   12254:	cmp	r3, #0
   12258:	beq	12280 <__assert_fail@plt+0x1364>
   1225c:	ldr	r3, [fp, #-16]
   12260:	add	r3, r3, #1
   12264:	ldrb	r3, [r3]
   12268:	mov	r0, r3
   1226c:	bl	11fb8 <__assert_fail@plt+0x109c>
   12270:	mov	r3, r0
   12274:	lsr	r3, r3, #4
   12278:	uxtb	r3, r3
   1227c:	b	12284 <__assert_fail@plt+0x1368>
   12280:	mov	r3, #0
   12284:	add	r3, r3, r4
   12288:	and	r1, r3, #63	; 0x3f
   1228c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12290:	add	r3, r2, #1
   12294:	str	r3, [fp, #-24]	; 0xffffffe8
   12298:	movw	r3, #36376	; 0x8e18
   1229c:	movt	r3, #1
   122a0:	ldrb	r3, [r3, r1]
   122a4:	strb	r3, [r2]
   122a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122ac:	sub	r3, r3, #1
   122b0:	str	r3, [fp, #-28]	; 0xffffffe4
   122b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122b8:	cmp	r3, #0
   122bc:	beq	1242c <__assert_fail@plt+0x1510>
   122c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   122c4:	cmp	r3, #0
   122c8:	beq	12340 <__assert_fail@plt+0x1424>
   122cc:	ldr	r3, [fp, #-16]
   122d0:	add	r3, r3, #1
   122d4:	ldrb	r3, [r3]
   122d8:	mov	r0, r3
   122dc:	bl	11fb8 <__assert_fail@plt+0x109c>
   122e0:	mov	r3, r0
   122e4:	lsl	r4, r3, #2
   122e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   122ec:	sub	r3, r3, #1
   122f0:	str	r3, [fp, #-20]	; 0xffffffec
   122f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   122f8:	cmp	r3, #0
   122fc:	beq	12324 <__assert_fail@plt+0x1408>
   12300:	ldr	r3, [fp, #-16]
   12304:	add	r3, r3, #2
   12308:	ldrb	r3, [r3]
   1230c:	mov	r0, r3
   12310:	bl	11fb8 <__assert_fail@plt+0x109c>
   12314:	mov	r3, r0
   12318:	lsr	r3, r3, #6
   1231c:	uxtb	r3, r3
   12320:	b	12328 <__assert_fail@plt+0x140c>
   12324:	mov	r3, #0
   12328:	add	r3, r3, r4
   1232c:	and	r2, r3, #63	; 0x3f
   12330:	movw	r3, #36376	; 0x8e18
   12334:	movt	r3, #1
   12338:	ldrb	r1, [r3, r2]
   1233c:	b	12344 <__assert_fail@plt+0x1428>
   12340:	mov	r1, #61	; 0x3d
   12344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12348:	add	r2, r3, #1
   1234c:	str	r2, [fp, #-24]	; 0xffffffe8
   12350:	mov	r2, r1
   12354:	strb	r2, [r3]
   12358:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1235c:	sub	r3, r3, #1
   12360:	str	r3, [fp, #-28]	; 0xffffffe4
   12364:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12368:	cmp	r3, #0
   1236c:	beq	12434 <__assert_fail@plt+0x1518>
   12370:	ldr	r3, [fp, #-20]	; 0xffffffec
   12374:	cmp	r3, #0
   12378:	beq	123a8 <__assert_fail@plt+0x148c>
   1237c:	ldr	r3, [fp, #-16]
   12380:	add	r3, r3, #2
   12384:	ldrb	r3, [r3]
   12388:	mov	r0, r3
   1238c:	bl	11fb8 <__assert_fail@plt+0x109c>
   12390:	mov	r3, r0
   12394:	and	r2, r3, #63	; 0x3f
   12398:	movw	r3, #36376	; 0x8e18
   1239c:	movt	r3, #1
   123a0:	ldrb	r1, [r3, r2]
   123a4:	b	123ac <__assert_fail@plt+0x1490>
   123a8:	mov	r1, #61	; 0x3d
   123ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123b0:	add	r2, r3, #1
   123b4:	str	r2, [fp, #-24]	; 0xffffffe8
   123b8:	mov	r2, r1
   123bc:	strb	r2, [r3]
   123c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123c4:	sub	r3, r3, #1
   123c8:	str	r3, [fp, #-28]	; 0xffffffe4
   123cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   123d0:	cmp	r3, #0
   123d4:	beq	1243c <__assert_fail@plt+0x1520>
   123d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   123dc:	cmp	r3, #0
   123e0:	beq	123f0 <__assert_fail@plt+0x14d4>
   123e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   123e8:	sub	r3, r3, #1
   123ec:	str	r3, [fp, #-20]	; 0xffffffec
   123f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   123f4:	cmp	r3, #0
   123f8:	beq	12408 <__assert_fail@plt+0x14ec>
   123fc:	ldr	r3, [fp, #-16]
   12400:	add	r3, r3, #3
   12404:	str	r3, [fp, #-16]
   12408:	ldr	r3, [fp, #-20]	; 0xffffffec
   1240c:	cmp	r3, #0
   12410:	beq	12440 <__assert_fail@plt+0x1524>
   12414:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12418:	cmp	r3, #0
   1241c:	bne	121d8 <__assert_fail@plt+0x12bc>
   12420:	b	12440 <__assert_fail@plt+0x1524>
   12424:	nop	{0}
   12428:	b	12440 <__assert_fail@plt+0x1524>
   1242c:	nop	{0}
   12430:	b	12440 <__assert_fail@plt+0x1524>
   12434:	nop	{0}
   12438:	b	12440 <__assert_fail@plt+0x1524>
   1243c:	nop	{0}
   12440:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12444:	cmp	r3, #0
   12448:	beq	12458 <__assert_fail@plt+0x153c>
   1244c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12450:	mov	r2, #0
   12454:	strb	r2, [r3]
   12458:	sub	sp, fp, #8
   1245c:	ldr	r4, [sp]
   12460:	ldr	fp, [sp, #4]
   12464:	add	sp, sp, #8
   12468:	pop	{pc}		; (ldr pc, [sp], #4)
   1246c:	str	fp, [sp, #-8]!
   12470:	str	lr, [sp, #4]
   12474:	add	fp, sp, #4
   12478:	sub	sp, sp, #24
   1247c:	str	r0, [fp, #-16]
   12480:	str	r1, [fp, #-20]	; 0xffffffec
   12484:	str	r2, [fp, #-24]	; 0xffffffe8
   12488:	ldr	r2, [fp, #-20]	; 0xffffffec
   1248c:	movw	r3, #21846	; 0x5556
   12490:	movt	r3, #21845	; 0x5555
   12494:	smull	r3, r1, r3, r2
   12498:	asr	r3, r2, #31
   1249c:	sub	r0, r1, r3
   124a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   124a4:	movw	r3, #21846	; 0x5556
   124a8:	movt	r3, #21845	; 0x5555
   124ac:	smull	r3, r2, r3, r1
   124b0:	asr	r3, r1, #31
   124b4:	sub	r2, r2, r3
   124b8:	mov	r3, r2
   124bc:	lsl	r3, r3, #1
   124c0:	add	r3, r3, r2
   124c4:	sub	r2, r1, r3
   124c8:	cmp	r2, #0
   124cc:	movne	r3, #1
   124d0:	moveq	r3, #0
   124d4:	uxtb	r3, r3
   124d8:	add	r3, r0, r3
   124dc:	str	r3, [fp, #-8]
   124e0:	mov	lr, #0
   124e4:	ldr	r3, [fp, #-8]
   124e8:	mov	r0, r3
   124ec:	asr	r1, r0, #31
   124f0:	mov	r2, #0
   124f4:	mov	r3, #0
   124f8:	lsl	r3, r1, #2
   124fc:	orr	r3, r3, r0, lsr #30
   12500:	lsl	r2, r0, #2
   12504:	mov	r0, #0
   12508:	mov	r1, #0
   1250c:	mov	r0, r3
   12510:	asr	r1, r3, #31
   12514:	asr	ip, r2, #31
   12518:	cmp	ip, r0
   1251c:	beq	12524 <__assert_fail@plt+0x1608>
   12520:	mov	lr, #1
   12524:	mov	r3, r2
   12528:	str	r3, [fp, #-12]
   1252c:	mov	r3, lr
   12530:	and	r3, r3, #1
   12534:	uxtb	r3, r3
   12538:	cmp	r3, #0
   1253c:	bne	1254c <__assert_fail@plt+0x1630>
   12540:	ldr	r3, [fp, #-20]	; 0xffffffec
   12544:	cmp	r3, #0
   12548:	bge	12560 <__assert_fail@plt+0x1644>
   1254c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12550:	mov	r2, #0
   12554:	str	r2, [r3]
   12558:	mov	r3, #0
   1255c:	b	125c0 <__assert_fail@plt+0x16a4>
   12560:	ldr	r3, [fp, #-12]
   12564:	add	r3, r3, #1
   12568:	str	r3, [fp, #-12]
   1256c:	ldr	r3, [fp, #-12]
   12570:	mov	r0, r3
   12574:	bl	13528 <__assert_fail@plt+0x260c>
   12578:	mov	r3, r0
   1257c:	mov	r2, r3
   12580:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12584:	str	r2, [r3]
   12588:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1258c:	ldr	r3, [r3]
   12590:	cmp	r3, #0
   12594:	bne	125a0 <__assert_fail@plt+0x1684>
   12598:	ldr	r3, [fp, #-12]
   1259c:	b	125c0 <__assert_fail@plt+0x16a4>
   125a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   125a4:	ldr	r2, [r3]
   125a8:	ldr	r3, [fp, #-12]
   125ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   125b0:	ldr	r0, [fp, #-16]
   125b4:	bl	12170 <__assert_fail@plt+0x1254>
   125b8:	ldr	r3, [fp, #-12]
   125bc:	sub	r3, r3, #1
   125c0:	mov	r0, r3
   125c4:	sub	sp, fp, #4
   125c8:	ldr	fp, [sp]
   125cc:	add	sp, sp, #4
   125d0:	pop	{pc}		; (ldr pc, [sp], #4)
   125d4:	str	fp, [sp, #-8]!
   125d8:	str	lr, [sp, #4]
   125dc:	add	fp, sp, #4
   125e0:	sub	sp, sp, #8
   125e4:	mov	r3, r0
   125e8:	strb	r3, [fp, #-5]
   125ec:	ldrb	r3, [fp, #-5]
   125f0:	mov	r0, r3
   125f4:	bl	11fb8 <__assert_fail@plt+0x109c>
   125f8:	mov	r3, r0
   125fc:	mov	r2, r3
   12600:	movw	r3, #36440	; 0x8e58
   12604:	movt	r3, #1
   12608:	ldrsb	r3, [r3, r2]
   1260c:	mvn	r3, r3
   12610:	uxtb	r3, r3
   12614:	lsr	r3, r3, #7
   12618:	uxtb	r3, r3
   1261c:	mov	r0, r3
   12620:	sub	sp, fp, #4
   12624:	ldr	fp, [sp]
   12628:	add	sp, sp, #4
   1262c:	pop	{pc}		; (ldr pc, [sp], #4)
   12630:	push	{fp}		; (str fp, [sp, #-4]!)
   12634:	add	fp, sp, #0
   12638:	sub	sp, sp, #12
   1263c:	str	r0, [fp, #-8]
   12640:	ldr	r3, [fp, #-8]
   12644:	mov	r2, #0
   12648:	str	r2, [r3]
   1264c:	nop	{0}
   12650:	add	sp, fp, #0
   12654:	pop	{fp}		; (ldr fp, [sp], #4)
   12658:	bx	lr
   1265c:	str	fp, [sp, #-8]!
   12660:	str	lr, [sp, #4]
   12664:	add	fp, sp, #4
   12668:	sub	sp, sp, #32
   1266c:	str	r0, [fp, #-24]	; 0xffffffe8
   12670:	str	r1, [fp, #-28]	; 0xffffffe4
   12674:	str	r2, [fp, #-32]	; 0xffffffe0
   12678:	str	r3, [fp, #-36]	; 0xffffffdc
   1267c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12680:	ldr	r3, [r3]
   12684:	cmp	r3, #4
   12688:	bne	12698 <__assert_fail@plt+0x177c>
   1268c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12690:	mov	r2, #0
   12694:	str	r2, [r3]
   12698:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1269c:	ldr	r3, [r3]
   126a0:	cmp	r3, #0
   126a4:	bne	12710 <__assert_fail@plt+0x17f4>
   126a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126ac:	ldr	r3, [r3]
   126b0:	str	r3, [fp, #-12]
   126b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126b8:	ldr	r3, [r3]
   126bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   126c0:	sub	r3, r2, r3
   126c4:	cmp	r3, #3
   126c8:	ble	12710 <__assert_fail@plt+0x17f4>
   126cc:	mov	r2, #4
   126d0:	mov	r1, #10
   126d4:	ldr	r0, [fp, #-12]
   126d8:	bl	10e80 <memchr@plt>
   126dc:	mov	r3, r0
   126e0:	cmp	r3, #0
   126e4:	bne	12710 <__assert_fail@plt+0x17f4>
   126e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126ec:	ldr	r3, [r3]
   126f0:	add	r2, r3, #4
   126f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   126f8:	str	r2, [r3]
   126fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12700:	mov	r2, #4
   12704:	str	r2, [r3]
   12708:	ldr	r3, [fp, #-12]
   1270c:	b	127b0 <__assert_fail@plt+0x1894>
   12710:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12714:	ldr	r3, [r3]
   12718:	str	r3, [fp, #-8]
   1271c:	b	12774 <__assert_fail@plt+0x1858>
   12720:	ldr	r3, [fp, #-8]
   12724:	add	r2, r3, #1
   12728:	str	r2, [fp, #-8]
   1272c:	ldrb	r3, [r3]
   12730:	strb	r3, [fp, #-13]
   12734:	ldrb	r3, [fp, #-13]
   12738:	cmp	r3, #10
   1273c:	beq	12774 <__assert_fail@plt+0x1858>
   12740:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12744:	ldr	r3, [r3]
   12748:	add	r1, r3, #1
   1274c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12750:	str	r1, [r2]
   12754:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12758:	add	r3, r2, r3
   1275c:	ldrb	r2, [fp, #-13]
   12760:	strb	r2, [r3, #4]
   12764:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12768:	ldr	r3, [r3]
   1276c:	cmp	r3, #4
   12770:	beq	12788 <__assert_fail@plt+0x186c>
   12774:	ldr	r2, [fp, #-8]
   12778:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1277c:	cmp	r2, r3
   12780:	bcc	12720 <__assert_fail@plt+0x1804>
   12784:	b	1278c <__assert_fail@plt+0x1870>
   12788:	nop	{0}
   1278c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12790:	ldr	r2, [fp, #-8]
   12794:	str	r2, [r3]
   12798:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1279c:	ldr	r2, [r3]
   127a0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   127a4:	str	r2, [r3]
   127a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127ac:	add	r3, r3, #4
   127b0:	mov	r0, r3
   127b4:	sub	sp, fp, #4
   127b8:	ldr	fp, [sp]
   127bc:	add	sp, sp, #4
   127c0:	pop	{pc}		; (ldr pc, [sp], #4)
   127c4:	str	r4, [sp, #-12]!
   127c8:	str	fp, [sp, #4]
   127cc:	str	lr, [sp, #8]
   127d0:	add	fp, sp, #8
   127d4:	sub	sp, sp, #28
   127d8:	str	r0, [fp, #-24]	; 0xffffffe8
   127dc:	str	r1, [fp, #-28]	; 0xffffffe4
   127e0:	str	r2, [fp, #-32]	; 0xffffffe0
   127e4:	str	r3, [fp, #-36]	; 0xffffffdc
   127e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   127ec:	ldr	r3, [r3]
   127f0:	str	r3, [fp, #-16]
   127f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   127f8:	cmp	r3, #1
   127fc:	bgt	12808 <__assert_fail@plt+0x18ec>
   12800:	mov	r3, #0
   12804:	b	12b98 <__assert_fail@plt+0x1c7c>
   12808:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1280c:	ldrb	r3, [r3]
   12810:	mov	r0, r3
   12814:	bl	125d4 <__assert_fail@plt+0x16b8>
   12818:	mov	r3, r0
   1281c:	eor	r3, r3, #1
   12820:	uxtb	r3, r3
   12824:	cmp	r3, #0
   12828:	bne	12854 <__assert_fail@plt+0x1938>
   1282c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12830:	add	r3, r3, #1
   12834:	ldrb	r3, [r3]
   12838:	mov	r0, r3
   1283c:	bl	125d4 <__assert_fail@plt+0x16b8>
   12840:	mov	r3, r0
   12844:	eor	r3, r3, #1
   12848:	uxtb	r3, r3
   1284c:	cmp	r3, #0
   12850:	beq	1285c <__assert_fail@plt+0x1940>
   12854:	mov	r3, #0
   12858:	b	12b98 <__assert_fail@plt+0x1c7c>
   1285c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12860:	ldr	r3, [r3]
   12864:	cmp	r3, #0
   12868:	beq	128f8 <__assert_fail@plt+0x19dc>
   1286c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12870:	ldrb	r3, [r3]
   12874:	mov	r0, r3
   12878:	bl	11fb8 <__assert_fail@plt+0x109c>
   1287c:	mov	r3, r0
   12880:	mov	r2, r3
   12884:	movw	r3, #36440	; 0x8e58
   12888:	movt	r3, #1
   1288c:	ldrsb	r3, [r3, r2]
   12890:	lsl	r3, r3, #2
   12894:	sxtb	r4, r3
   12898:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1289c:	add	r3, r3, #1
   128a0:	ldrb	r3, [r3]
   128a4:	mov	r0, r3
   128a8:	bl	11fb8 <__assert_fail@plt+0x109c>
   128ac:	mov	r3, r0
   128b0:	mov	r2, r3
   128b4:	movw	r3, #36440	; 0x8e58
   128b8:	movt	r3, #1
   128bc:	ldrsb	r3, [r3, r2]
   128c0:	asr	r3, r3, #4
   128c4:	sxtb	r3, r3
   128c8:	orr	r3, r4, r3
   128cc:	sxtb	r1, r3
   128d0:	ldr	r3, [fp, #-16]
   128d4:	add	r2, r3, #1
   128d8:	str	r2, [fp, #-16]
   128dc:	uxtb	r2, r1
   128e0:	strb	r2, [r3]
   128e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   128e8:	ldr	r3, [r3]
   128ec:	sub	r2, r3, #1
   128f0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   128f4:	str	r2, [r3]
   128f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   128fc:	cmp	r3, #2
   12900:	bne	12918 <__assert_fail@plt+0x19fc>
   12904:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12908:	ldr	r2, [fp, #-16]
   1290c:	str	r2, [r3]
   12910:	mov	r3, #0
   12914:	b	12b98 <__assert_fail@plt+0x1c7c>
   12918:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1291c:	add	r3, r3, #2
   12920:	ldrb	r3, [r3]
   12924:	cmp	r3, #61	; 0x3d
   12928:	bne	12974 <__assert_fail@plt+0x1a58>
   1292c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12930:	cmp	r3, #4
   12934:	beq	1294c <__assert_fail@plt+0x1a30>
   12938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1293c:	ldr	r2, [fp, #-16]
   12940:	str	r2, [r3]
   12944:	mov	r3, #0
   12948:	b	12b98 <__assert_fail@plt+0x1c7c>
   1294c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12950:	add	r3, r3, #3
   12954:	ldrb	r3, [r3]
   12958:	cmp	r3, #61	; 0x3d
   1295c:	beq	12b88 <__assert_fail@plt+0x1c6c>
   12960:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12964:	ldr	r2, [fp, #-16]
   12968:	str	r2, [r3]
   1296c:	mov	r3, #0
   12970:	b	12b98 <__assert_fail@plt+0x1c7c>
   12974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12978:	add	r3, r3, #2
   1297c:	ldrb	r3, [r3]
   12980:	mov	r0, r3
   12984:	bl	125d4 <__assert_fail@plt+0x16b8>
   12988:	mov	r3, r0
   1298c:	eor	r3, r3, #1
   12990:	uxtb	r3, r3
   12994:	cmp	r3, #0
   12998:	beq	129b0 <__assert_fail@plt+0x1a94>
   1299c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   129a0:	ldr	r2, [fp, #-16]
   129a4:	str	r2, [r3]
   129a8:	mov	r3, #0
   129ac:	b	12b98 <__assert_fail@plt+0x1c7c>
   129b0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   129b4:	ldr	r3, [r3]
   129b8:	cmp	r3, #0
   129bc:	beq	12a58 <__assert_fail@plt+0x1b3c>
   129c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129c4:	add	r3, r3, #1
   129c8:	ldrb	r3, [r3]
   129cc:	mov	r0, r3
   129d0:	bl	11fb8 <__assert_fail@plt+0x109c>
   129d4:	mov	r3, r0
   129d8:	mov	r2, r3
   129dc:	movw	r3, #36440	; 0x8e58
   129e0:	movt	r3, #1
   129e4:	ldrsb	r3, [r3, r2]
   129e8:	lsl	r3, r3, #4
   129ec:	sxtb	r3, r3
   129f0:	bic	r3, r3, #15
   129f4:	sxtb	r4, r3
   129f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   129fc:	add	r3, r3, #2
   12a00:	ldrb	r3, [r3]
   12a04:	mov	r0, r3
   12a08:	bl	11fb8 <__assert_fail@plt+0x109c>
   12a0c:	mov	r3, r0
   12a10:	mov	r2, r3
   12a14:	movw	r3, #36440	; 0x8e58
   12a18:	movt	r3, #1
   12a1c:	ldrsb	r3, [r3, r2]
   12a20:	asr	r3, r3, #2
   12a24:	sxtb	r3, r3
   12a28:	orr	r3, r4, r3
   12a2c:	sxtb	r1, r3
   12a30:	ldr	r3, [fp, #-16]
   12a34:	add	r2, r3, #1
   12a38:	str	r2, [fp, #-16]
   12a3c:	uxtb	r2, r1
   12a40:	strb	r2, [r3]
   12a44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a48:	ldr	r3, [r3]
   12a4c:	sub	r2, r3, #1
   12a50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12a54:	str	r2, [r3]
   12a58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a5c:	cmp	r3, #3
   12a60:	bne	12a78 <__assert_fail@plt+0x1b5c>
   12a64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a68:	ldr	r2, [fp, #-16]
   12a6c:	str	r2, [r3]
   12a70:	mov	r3, #0
   12a74:	b	12b98 <__assert_fail@plt+0x1c7c>
   12a78:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a7c:	add	r3, r3, #3
   12a80:	ldrb	r3, [r3]
   12a84:	cmp	r3, #61	; 0x3d
   12a88:	bne	12aac <__assert_fail@plt+0x1b90>
   12a8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a90:	cmp	r3, #4
   12a94:	beq	12b88 <__assert_fail@plt+0x1c6c>
   12a98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a9c:	ldr	r2, [fp, #-16]
   12aa0:	str	r2, [r3]
   12aa4:	mov	r3, #0
   12aa8:	b	12b98 <__assert_fail@plt+0x1c7c>
   12aac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ab0:	add	r3, r3, #3
   12ab4:	ldrb	r3, [r3]
   12ab8:	mov	r0, r3
   12abc:	bl	125d4 <__assert_fail@plt+0x16b8>
   12ac0:	mov	r3, r0
   12ac4:	eor	r3, r3, #1
   12ac8:	uxtb	r3, r3
   12acc:	cmp	r3, #0
   12ad0:	beq	12ae8 <__assert_fail@plt+0x1bcc>
   12ad4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12ad8:	ldr	r2, [fp, #-16]
   12adc:	str	r2, [r3]
   12ae0:	mov	r3, #0
   12ae4:	b	12b98 <__assert_fail@plt+0x1c7c>
   12ae8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12aec:	ldr	r3, [r3]
   12af0:	cmp	r3, #0
   12af4:	beq	12b88 <__assert_fail@plt+0x1c6c>
   12af8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12afc:	add	r3, r3, #2
   12b00:	ldrb	r3, [r3]
   12b04:	mov	r0, r3
   12b08:	bl	11fb8 <__assert_fail@plt+0x109c>
   12b0c:	mov	r3, r0
   12b10:	mov	r2, r3
   12b14:	movw	r3, #36440	; 0x8e58
   12b18:	movt	r3, #1
   12b1c:	ldrsb	r3, [r3, r2]
   12b20:	lsl	r3, r3, #6
   12b24:	sxtb	r3, r3
   12b28:	bic	r3, r3, #63	; 0x3f
   12b2c:	sxtb	r4, r3
   12b30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12b34:	add	r3, r3, #3
   12b38:	ldrb	r3, [r3]
   12b3c:	mov	r0, r3
   12b40:	bl	11fb8 <__assert_fail@plt+0x109c>
   12b44:	mov	r3, r0
   12b48:	mov	r2, r3
   12b4c:	movw	r3, #36440	; 0x8e58
   12b50:	movt	r3, #1
   12b54:	ldrsb	r3, [r3, r2]
   12b58:	orr	r3, r4, r3
   12b5c:	sxtb	r1, r3
   12b60:	ldr	r3, [fp, #-16]
   12b64:	add	r2, r3, #1
   12b68:	str	r2, [fp, #-16]
   12b6c:	uxtb	r2, r1
   12b70:	strb	r2, [r3]
   12b74:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b78:	ldr	r3, [r3]
   12b7c:	sub	r2, r3, #1
   12b80:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b84:	str	r2, [r3]
   12b88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b8c:	ldr	r2, [fp, #-16]
   12b90:	str	r2, [r3]
   12b94:	mov	r3, #1
   12b98:	mov	r0, r3
   12b9c:	sub	sp, fp, #8
   12ba0:	ldr	r4, [sp]
   12ba4:	ldr	fp, [sp, #4]
   12ba8:	add	sp, sp, #8
   12bac:	pop	{pc}		; (ldr pc, [sp], #4)
   12bb0:	str	fp, [sp, #-8]!
   12bb4:	str	lr, [sp, #4]
   12bb8:	add	fp, sp, #4
   12bbc:	sub	sp, sp, #48	; 0x30
   12bc0:	str	r0, [fp, #-40]	; 0xffffffd8
   12bc4:	str	r1, [fp, #-44]	; 0xffffffd4
   12bc8:	str	r2, [fp, #-48]	; 0xffffffd0
   12bcc:	str	r3, [fp, #-52]	; 0xffffffcc
   12bd0:	ldr	r3, [fp, #4]
   12bd4:	ldr	r3, [r3]
   12bd8:	str	r3, [fp, #-32]	; 0xffffffe0
   12bdc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12be0:	cmp	r3, #0
   12be4:	movne	r3, #1
   12be8:	moveq	r3, #0
   12bec:	strb	r3, [fp, #-21]	; 0xffffffeb
   12bf0:	mov	r3, #0
   12bf4:	strb	r3, [fp, #-5]
   12bf8:	mov	r3, #0
   12bfc:	str	r3, [fp, #-12]
   12c00:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12c04:	cmp	r3, #0
   12c08:	beq	12c2c <__assert_fail@plt+0x1d10>
   12c0c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12c10:	ldr	r3, [r3]
   12c14:	str	r3, [fp, #-12]
   12c18:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c1c:	cmp	r3, #0
   12c20:	moveq	r3, #1
   12c24:	movne	r3, #0
   12c28:	strb	r3, [fp, #-5]
   12c2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c30:	str	r3, [fp, #-16]
   12c34:	ldr	r3, [fp, #-12]
   12c38:	cmp	r3, #0
   12c3c:	bne	12ca4 <__assert_fail@plt+0x1d88>
   12c40:	ldrb	r3, [fp, #-5]
   12c44:	eor	r3, r3, #1
   12c48:	uxtb	r3, r3
   12c4c:	cmp	r3, #0
   12c50:	beq	12ca4 <__assert_fail@plt+0x1d88>
   12c54:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12c58:	str	r3, [fp, #-16]
   12c5c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12c60:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12c64:	sub	r3, fp, #32
   12c68:	sub	r2, fp, #52	; 0x34
   12c6c:	bl	127c4 <__assert_fail@plt+0x18a8>
   12c70:	mov	r3, r0
   12c74:	eor	r3, r3, #1
   12c78:	uxtb	r3, r3
   12c7c:	cmp	r3, #0
   12c80:	bne	12ca0 <__assert_fail@plt+0x1d84>
   12c84:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12c88:	add	r3, r3, #4
   12c8c:	str	r3, [fp, #-44]	; 0xffffffd4
   12c90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c94:	sub	r3, r3, #4
   12c98:	str	r3, [fp, #-48]	; 0xffffffd0
   12c9c:	b	12c54 <__assert_fail@plt+0x1d38>
   12ca0:	nop	{0}
   12ca4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ca8:	cmp	r3, #0
   12cac:	bne	12cc4 <__assert_fail@plt+0x1da8>
   12cb0:	ldrb	r3, [fp, #-5]
   12cb4:	eor	r3, r3, #1
   12cb8:	uxtb	r3, r3
   12cbc:	cmp	r3, #0
   12cc0:	bne	12dec <__assert_fail@plt+0x1ed0>
   12cc4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12cc8:	cmp	r3, #0
   12ccc:	beq	12d08 <__assert_fail@plt+0x1dec>
   12cd0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12cd4:	ldrb	r3, [r3]
   12cd8:	cmp	r3, #10
   12cdc:	bne	12d08 <__assert_fail@plt+0x1dec>
   12ce0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12ce4:	cmp	r3, #0
   12ce8:	beq	12d08 <__assert_fail@plt+0x1dec>
   12cec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12cf0:	add	r3, r3, #1
   12cf4:	str	r3, [fp, #-44]	; 0xffffffd4
   12cf8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12cfc:	sub	r3, r3, #1
   12d00:	str	r3, [fp, #-48]	; 0xffffffd0
   12d04:	b	12de8 <__assert_fail@plt+0x1ecc>
   12d08:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12d10:	ldr	r1, [fp, #-16]
   12d14:	sub	r3, r1, r3
   12d18:	rsb	r3, r3, #0
   12d1c:	add	r3, r2, r3
   12d20:	str	r3, [fp, #-52]	; 0xffffffcc
   12d24:	ldr	r3, [fp, #-16]
   12d28:	str	r3, [fp, #-32]	; 0xffffffe0
   12d2c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12d30:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12d34:	add	r3, r3, r2
   12d38:	str	r3, [fp, #-28]	; 0xffffffe4
   12d3c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12d40:	cmp	r3, #0
   12d44:	beq	12d64 <__assert_fail@plt+0x1e48>
   12d48:	sub	r3, fp, #48	; 0x30
   12d4c:	sub	r1, fp, #44	; 0x2c
   12d50:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12d54:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12d58:	bl	1265c <__assert_fail@plt+0x1740>
   12d5c:	str	r0, [fp, #-20]	; 0xffffffec
   12d60:	b	12d6c <__assert_fail@plt+0x1e50>
   12d64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12d68:	str	r3, [fp, #-20]	; 0xffffffec
   12d6c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d70:	cmp	r3, #0
   12d74:	beq	12da4 <__assert_fail@plt+0x1e88>
   12d78:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12d7c:	cmp	r3, #3
   12d80:	bgt	12db0 <__assert_fail@plt+0x1e94>
   12d84:	ldrb	r3, [fp, #-5]
   12d88:	eor	r3, r3, #1
   12d8c:	uxtb	r3, r3
   12d90:	cmp	r3, #0
   12d94:	beq	12db0 <__assert_fail@plt+0x1e94>
   12d98:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   12d9c:	cmp	r3, #0
   12da0:	beq	12db0 <__assert_fail@plt+0x1e94>
   12da4:	mov	r3, #0
   12da8:	str	r3, [fp, #-48]	; 0xffffffd0
   12dac:	b	12df8 <__assert_fail@plt+0x1edc>
   12db0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12db4:	sub	r3, fp, #32
   12db8:	sub	r2, fp, #52	; 0x34
   12dbc:	ldr	r0, [fp, #-20]	; 0xffffffec
   12dc0:	bl	127c4 <__assert_fail@plt+0x18a8>
   12dc4:	mov	r3, r0
   12dc8:	eor	r3, r3, #1
   12dcc:	uxtb	r3, r3
   12dd0:	cmp	r3, #0
   12dd4:	bne	12df4 <__assert_fail@plt+0x1ed8>
   12dd8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12ddc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12de0:	sub	r3, r2, r3
   12de4:	str	r3, [fp, #-48]	; 0xffffffd0
   12de8:	b	12c2c <__assert_fail@plt+0x1d10>
   12dec:	nop	{0}
   12df0:	b	12df8 <__assert_fail@plt+0x1edc>
   12df4:	nop	{0}
   12df8:	ldr	r3, [fp, #4]
   12dfc:	ldr	r2, [r3]
   12e00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e04:	sub	r2, r2, r3
   12e08:	ldr	r3, [fp, #4]
   12e0c:	str	r2, [r3]
   12e10:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e14:	cmp	r3, #0
   12e18:	moveq	r3, #1
   12e1c:	movne	r3, #0
   12e20:	uxtb	r3, r3
   12e24:	mov	r0, r3
   12e28:	sub	sp, fp, #4
   12e2c:	ldr	fp, [sp]
   12e30:	add	sp, sp, #4
   12e34:	pop	{pc}		; (ldr pc, [sp], #4)
   12e38:	str	fp, [sp, #-8]!
   12e3c:	str	lr, [sp, #4]
   12e40:	add	fp, sp, #4
   12e44:	sub	sp, sp, #32
   12e48:	str	r0, [fp, #-16]
   12e4c:	str	r1, [fp, #-20]	; 0xffffffec
   12e50:	str	r2, [fp, #-24]	; 0xffffffe8
   12e54:	str	r3, [fp, #-28]	; 0xffffffe4
   12e58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e5c:	asr	r3, r3, #2
   12e60:	add	r2, r3, #1
   12e64:	mov	r3, r2
   12e68:	lsl	r3, r3, #1
   12e6c:	add	r3, r3, r2
   12e70:	str	r3, [fp, #-8]
   12e74:	ldr	r3, [fp, #-8]
   12e78:	mov	r0, r3
   12e7c:	bl	13528 <__assert_fail@plt+0x260c>
   12e80:	mov	r3, r0
   12e84:	mov	r2, r3
   12e88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12e8c:	str	r2, [r3]
   12e90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12e94:	ldr	r3, [r3]
   12e98:	cmp	r3, #0
   12e9c:	bne	12ea8 <__assert_fail@plt+0x1f8c>
   12ea0:	mov	r3, #1
   12ea4:	b	12f20 <__assert_fail@plt+0x2004>
   12ea8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12eac:	ldr	r2, [r3]
   12eb0:	sub	r3, fp, #8
   12eb4:	str	r3, [sp]
   12eb8:	mov	r3, r2
   12ebc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ec0:	ldr	r1, [fp, #-20]	; 0xffffffec
   12ec4:	ldr	r0, [fp, #-16]
   12ec8:	bl	12bb0 <__assert_fail@plt+0x1c94>
   12ecc:	mov	r3, r0
   12ed0:	eor	r3, r3, #1
   12ed4:	uxtb	r3, r3
   12ed8:	cmp	r3, #0
   12edc:	beq	12f04 <__assert_fail@plt+0x1fe8>
   12ee0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ee4:	ldr	r3, [r3]
   12ee8:	mov	r0, r3
   12eec:	bl	13360 <__assert_fail@plt+0x2444>
   12ef0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ef4:	mov	r2, #0
   12ef8:	str	r2, [r3]
   12efc:	mov	r3, #0
   12f00:	b	12f20 <__assert_fail@plt+0x2004>
   12f04:	ldr	r3, [fp, #4]
   12f08:	cmp	r3, #0
   12f0c:	beq	12f1c <__assert_fail@plt+0x2000>
   12f10:	ldr	r2, [fp, #-8]
   12f14:	ldr	r3, [fp, #4]
   12f18:	str	r2, [r3]
   12f1c:	mov	r3, #1
   12f20:	mov	r0, r3
   12f24:	sub	sp, fp, #4
   12f28:	ldr	fp, [sp]
   12f2c:	add	sp, sp, #4
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	push	{fp}		; (str fp, [sp, #-4]!)
   12f38:	add	fp, sp, #0
   12f3c:	sub	sp, sp, #12
   12f40:	str	r0, [fp, #-8]
   12f44:	movw	r3, #41312	; 0xa160
   12f48:	movt	r3, #2
   12f4c:	ldr	r2, [fp, #-8]
   12f50:	str	r2, [r3]
   12f54:	nop	{0}
   12f58:	add	sp, fp, #0
   12f5c:	pop	{fp}		; (ldr fp, [sp], #4)
   12f60:	bx	lr
   12f64:	push	{fp}		; (str fp, [sp, #-4]!)
   12f68:	add	fp, sp, #0
   12f6c:	sub	sp, sp, #12
   12f70:	mov	r3, r0
   12f74:	strb	r3, [fp, #-5]
   12f78:	movw	r3, #41316	; 0xa164
   12f7c:	movt	r3, #2
   12f80:	ldrb	r2, [fp, #-5]
   12f84:	strb	r2, [r3]
   12f88:	nop	{0}
   12f8c:	add	sp, fp, #0
   12f90:	pop	{fp}		; (ldr fp, [sp], #4)
   12f94:	bx	lr
   12f98:	str	r4, [sp, #-12]!
   12f9c:	str	fp, [sp, #4]
   12fa0:	str	lr, [sp, #8]
   12fa4:	add	fp, sp, #8
   12fa8:	sub	sp, sp, #20
   12fac:	movw	r3, #41300	; 0xa154
   12fb0:	movt	r3, #2
   12fb4:	ldr	r3, [r3]
   12fb8:	mov	r0, r3
   12fbc:	bl	17dac <__assert_fail@plt+0x6e90>
   12fc0:	mov	r3, r0
   12fc4:	cmp	r3, #0
   12fc8:	beq	1309c <__assert_fail@plt+0x2180>
   12fcc:	movw	r3, #41316	; 0xa164
   12fd0:	movt	r3, #2
   12fd4:	ldrb	r3, [r3]
   12fd8:	eor	r3, r3, #1
   12fdc:	uxtb	r3, r3
   12fe0:	cmp	r3, #0
   12fe4:	bne	12ffc <__assert_fail@plt+0x20e0>
   12fe8:	bl	10e50 <__errno_location@plt>
   12fec:	mov	r3, r0
   12ff0:	ldr	r3, [r3]
   12ff4:	cmp	r3, #32
   12ff8:	beq	1309c <__assert_fail@plt+0x2180>
   12ffc:	movw	r0, #36696	; 0x8f58
   13000:	movt	r0, #1
   13004:	bl	10e20 <gettext@plt>
   13008:	str	r0, [fp, #-16]
   1300c:	movw	r3, #41312	; 0xa160
   13010:	movt	r3, #2
   13014:	ldr	r3, [r3]
   13018:	cmp	r3, #0
   1301c:	beq	13068 <__assert_fail@plt+0x214c>
   13020:	bl	10e50 <__errno_location@plt>
   13024:	mov	r3, r0
   13028:	ldr	r4, [r3]
   1302c:	movw	r3, #41312	; 0xa160
   13030:	movt	r3, #2
   13034:	ldr	r3, [r3]
   13038:	mov	r0, r3
   1303c:	bl	15c5c <__assert_fail@plt+0x4d40>
   13040:	mov	r2, r0
   13044:	ldr	r3, [fp, #-16]
   13048:	str	r3, [sp]
   1304c:	mov	r3, r2
   13050:	movw	r2, #36708	; 0x8f64
   13054:	movt	r2, #1
   13058:	mov	r1, r4
   1305c:	mov	r0, #0
   13060:	bl	10dc0 <error@plt>
   13064:	b	13088 <__assert_fail@plt+0x216c>
   13068:	bl	10e50 <__errno_location@plt>
   1306c:	mov	r3, r0
   13070:	ldr	r1, [r3]
   13074:	ldr	r3, [fp, #-16]
   13078:	movw	r2, #36716	; 0x8f6c
   1307c:	movt	r2, #1
   13080:	mov	r0, #0
   13084:	bl	10dc0 <error@plt>
   13088:	movw	r3, #41200	; 0xa0f0
   1308c:	movt	r3, #2
   13090:	ldr	r3, [r3]
   13094:	mov	r0, r3
   13098:	bl	10d0c <_exit@plt>
   1309c:	movw	r3, #41288	; 0xa148
   130a0:	movt	r3, #2
   130a4:	ldr	r3, [r3]
   130a8:	mov	r0, r3
   130ac:	bl	17dac <__assert_fail@plt+0x6e90>
   130b0:	mov	r3, r0
   130b4:	cmp	r3, #0
   130b8:	beq	130d0 <__assert_fail@plt+0x21b4>
   130bc:	movw	r3, #41200	; 0xa0f0
   130c0:	movt	r3, #2
   130c4:	ldr	r3, [r3]
   130c8:	mov	r0, r3
   130cc:	bl	10d0c <_exit@plt>
   130d0:	nop	{0}
   130d4:	sub	sp, fp, #8
   130d8:	ldr	r4, [sp]
   130dc:	ldr	fp, [sp, #4]
   130e0:	add	sp, sp, #8
   130e4:	pop	{pc}		; (ldr pc, [sp], #4)
   130e8:	str	fp, [sp, #-8]!
   130ec:	str	lr, [sp, #4]
   130f0:	add	fp, sp, #4
   130f4:	sub	sp, sp, #40	; 0x28
   130f8:	str	r0, [fp, #-16]
   130fc:	strd	r2, [fp, #-28]	; 0xffffffe4
   13100:	ldr	r3, [fp, #12]
   13104:	str	r3, [sp, #8]
   13108:	ldrd	r2, [fp, #4]
   1310c:	strd	r2, [sp]
   13110:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13114:	ldr	r0, [fp, #-16]
   13118:	bl	10cd0 <posix_fadvise64@plt>
   1311c:	str	r0, [fp, #-8]
   13120:	nop	{0}
   13124:	sub	sp, fp, #4
   13128:	ldr	fp, [sp]
   1312c:	add	sp, sp, #4
   13130:	pop	{pc}		; (ldr pc, [sp], #4)
   13134:	str	fp, [sp, #-8]!
   13138:	str	lr, [sp, #4]
   1313c:	add	fp, sp, #4
   13140:	sub	sp, sp, #24
   13144:	str	r0, [fp, #-8]
   13148:	str	r1, [fp, #-12]
   1314c:	ldr	r3, [fp, #-8]
   13150:	cmp	r3, #0
   13154:	beq	13188 <__assert_fail@plt+0x226c>
   13158:	ldr	r0, [fp, #-8]
   1315c:	bl	10e74 <fileno@plt>
   13160:	mov	r1, r0
   13164:	ldr	r3, [fp, #-12]
   13168:	str	r3, [sp, #8]
   1316c:	mov	r2, #0
   13170:	mov	r3, #0
   13174:	strd	r2, [sp]
   13178:	mov	r2, #0
   1317c:	mov	r3, #0
   13180:	mov	r0, r1
   13184:	bl	130e8 <__assert_fail@plt+0x21cc>
   13188:	nop	{0}
   1318c:	sub	sp, fp, #4
   13190:	ldr	fp, [sp]
   13194:	add	sp, sp, #4
   13198:	pop	{pc}		; (ldr pc, [sp], #4)
   1319c:	str	fp, [sp, #-8]!
   131a0:	str	lr, [sp, #4]
   131a4:	add	fp, sp, #4
   131a8:	sub	sp, sp, #32
   131ac:	str	r0, [fp, #-24]	; 0xffffffe8
   131b0:	mov	r3, #0
   131b4:	str	r3, [fp, #-8]
   131b8:	mov	r3, #0
   131bc:	str	r3, [fp, #-12]
   131c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131c4:	bl	10e74 <fileno@plt>
   131c8:	str	r0, [fp, #-16]
   131cc:	ldr	r3, [fp, #-16]
   131d0:	cmp	r3, #0
   131d4:	bge	131e8 <__assert_fail@plt+0x22cc>
   131d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131dc:	bl	10e98 <fclose@plt>
   131e0:	mov	r3, r0
   131e4:	b	1328c <__assert_fail@plt+0x2370>
   131e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   131ec:	bl	10de4 <__freading@plt>
   131f0:	mov	r3, r0
   131f4:	cmp	r3, #0
   131f8:	beq	13234 <__assert_fail@plt+0x2318>
   131fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13200:	bl	10e74 <fileno@plt>
   13204:	mov	r1, r0
   13208:	mov	r3, #1
   1320c:	str	r3, [sp]
   13210:	mov	r2, #0
   13214:	mov	r3, #0
   13218:	mov	r0, r1
   1321c:	bl	10d84 <lseek64@plt>
   13220:	mvn	r2, #0
   13224:	mvn	r3, #0
   13228:	cmp	r1, r3
   1322c:	cmpeq	r0, r2
   13230:	beq	13258 <__assert_fail@plt+0x233c>
   13234:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13238:	bl	132f4 <__assert_fail@plt+0x23d8>
   1323c:	mov	r3, r0
   13240:	cmp	r3, #0
   13244:	beq	13258 <__assert_fail@plt+0x233c>
   13248:	bl	10e50 <__errno_location@plt>
   1324c:	mov	r3, r0
   13250:	ldr	r3, [r3]
   13254:	str	r3, [fp, #-8]
   13258:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1325c:	bl	10e98 <fclose@plt>
   13260:	str	r0, [fp, #-12]
   13264:	ldr	r3, [fp, #-8]
   13268:	cmp	r3, #0
   1326c:	beq	13288 <__assert_fail@plt+0x236c>
   13270:	bl	10e50 <__errno_location@plt>
   13274:	mov	r2, r0
   13278:	ldr	r3, [fp, #-8]
   1327c:	str	r3, [r2]
   13280:	mvn	r3, #0
   13284:	str	r3, [fp, #-12]
   13288:	ldr	r3, [fp, #-12]
   1328c:	mov	r0, r3
   13290:	sub	sp, fp, #4
   13294:	ldr	fp, [sp]
   13298:	add	sp, sp, #4
   1329c:	pop	{pc}		; (ldr pc, [sp], #4)
   132a0:	str	fp, [sp, #-8]!
   132a4:	str	lr, [sp, #4]
   132a8:	add	fp, sp, #4
   132ac:	sub	sp, sp, #16
   132b0:	str	r0, [fp, #-8]
   132b4:	ldr	r3, [fp, #-8]
   132b8:	ldr	r3, [r3]
   132bc:	and	r3, r3, #256	; 0x100
   132c0:	cmp	r3, #0
   132c4:	beq	132e0 <__assert_fail@plt+0x23c4>
   132c8:	mov	r3, #1
   132cc:	str	r3, [sp]
   132d0:	mov	r2, #0
   132d4:	mov	r3, #0
   132d8:	ldr	r0, [fp, #-8]
   132dc:	bl	13404 <__assert_fail@plt+0x24e8>
   132e0:	nop	{0}
   132e4:	sub	sp, fp, #4
   132e8:	ldr	fp, [sp]
   132ec:	add	sp, sp, #4
   132f0:	pop	{pc}		; (ldr pc, [sp], #4)
   132f4:	str	fp, [sp, #-8]!
   132f8:	str	lr, [sp, #4]
   132fc:	add	fp, sp, #4
   13300:	sub	sp, sp, #8
   13304:	str	r0, [fp, #-8]
   13308:	ldr	r3, [fp, #-8]
   1330c:	cmp	r3, #0
   13310:	beq	13328 <__assert_fail@plt+0x240c>
   13314:	ldr	r0, [fp, #-8]
   13318:	bl	10de4 <__freading@plt>
   1331c:	mov	r3, r0
   13320:	cmp	r3, #0
   13324:	bne	13338 <__assert_fail@plt+0x241c>
   13328:	ldr	r0, [fp, #-8]
   1332c:	bl	10ce8 <fflush@plt>
   13330:	mov	r3, r0
   13334:	b	1334c <__assert_fail@plt+0x2430>
   13338:	ldr	r0, [fp, #-8]
   1333c:	bl	132a0 <__assert_fail@plt+0x2384>
   13340:	ldr	r0, [fp, #-8]
   13344:	bl	10ce8 <fflush@plt>
   13348:	mov	r3, r0
   1334c:	mov	r0, r3
   13350:	sub	sp, fp, #4
   13354:	ldr	fp, [sp]
   13358:	add	sp, sp, #4
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	str	r4, [sp, #-12]!
   13364:	str	fp, [sp, #4]
   13368:	str	lr, [sp, #8]
   1336c:	add	fp, sp, #8
   13370:	sub	sp, sp, #20
   13374:	str	r0, [fp, #-24]	; 0xffffffe8
   13378:	bl	10e50 <__errno_location@plt>
   1337c:	mov	r3, r0
   13380:	ldr	r3, [r3]
   13384:	str	r3, [fp, #-20]	; 0xffffffec
   13388:	bl	10e50 <__errno_location@plt>
   1338c:	mov	r3, r0
   13390:	ldr	r3, [r3]
   13394:	str	r3, [fp, #-16]
   13398:	bl	10e50 <__errno_location@plt>
   1339c:	mov	r2, r0
   133a0:	mov	r3, #0
   133a4:	str	r3, [r2]
   133a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133ac:	bl	10d00 <free@plt>
   133b0:	bl	10e50 <__errno_location@plt>
   133b4:	mov	r3, r0
   133b8:	ldr	r3, [r3]
   133bc:	cmp	r3, #0
   133c0:	moveq	r3, #1
   133c4:	movne	r3, #0
   133c8:	uxtb	r3, r3
   133cc:	mov	r4, r3
   133d0:	bl	10e50 <__errno_location@plt>
   133d4:	mov	r2, r0
   133d8:	lsl	r3, r4, #2
   133dc:	sub	r1, fp, #12
   133e0:	add	r3, r1, r3
   133e4:	ldr	r3, [r3, #-8]
   133e8:	str	r3, [r2]
   133ec:	nop	{0}
   133f0:	sub	sp, fp, #8
   133f4:	ldr	r4, [sp]
   133f8:	ldr	fp, [sp, #4]
   133fc:	add	sp, sp, #8
   13400:	pop	{pc}		; (ldr pc, [sp], #4)
   13404:	str	fp, [sp, #-8]!
   13408:	str	lr, [sp, #4]
   1340c:	add	fp, sp, #4
   13410:	sub	sp, sp, #32
   13414:	str	r0, [fp, #-16]
   13418:	strd	r2, [fp, #-28]	; 0xffffffe4
   1341c:	ldr	r3, [fp, #-16]
   13420:	ldr	r2, [r3, #8]
   13424:	ldr	r3, [fp, #-16]
   13428:	ldr	r3, [r3, #4]
   1342c:	cmp	r2, r3
   13430:	bne	134c8 <__assert_fail@plt+0x25ac>
   13434:	ldr	r3, [fp, #-16]
   13438:	ldr	r2, [r3, #20]
   1343c:	ldr	r3, [fp, #-16]
   13440:	ldr	r3, [r3, #16]
   13444:	cmp	r2, r3
   13448:	bne	134c8 <__assert_fail@plt+0x25ac>
   1344c:	ldr	r3, [fp, #-16]
   13450:	ldr	r3, [r3, #36]	; 0x24
   13454:	cmp	r3, #0
   13458:	bne	134c8 <__assert_fail@plt+0x25ac>
   1345c:	ldr	r0, [fp, #-16]
   13460:	bl	10e74 <fileno@plt>
   13464:	mov	r1, r0
   13468:	ldr	r3, [fp, #4]
   1346c:	str	r3, [sp]
   13470:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13474:	mov	r0, r1
   13478:	bl	10d84 <lseek64@plt>
   1347c:	strd	r0, [fp, #-12]
   13480:	ldrd	r2, [fp, #-12]
   13484:	mvn	r0, #0
   13488:	mvn	r1, #0
   1348c:	cmp	r3, r1
   13490:	cmpeq	r2, r0
   13494:	bne	134a0 <__assert_fail@plt+0x2584>
   13498:	mvn	r3, #0
   1349c:	b	134e0 <__assert_fail@plt+0x25c4>
   134a0:	ldr	r3, [fp, #-16]
   134a4:	ldr	r3, [r3]
   134a8:	bic	r2, r3, #16
   134ac:	ldr	r3, [fp, #-16]
   134b0:	str	r2, [r3]
   134b4:	ldr	r1, [fp, #-16]
   134b8:	ldrd	r2, [fp, #-12]
   134bc:	strd	r2, [r1, #80]	; 0x50
   134c0:	mov	r3, #0
   134c4:	b	134e0 <__assert_fail@plt+0x25c4>
   134c8:	ldr	r3, [fp, #4]
   134cc:	str	r3, [sp]
   134d0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   134d4:	ldr	r0, [fp, #-16]
   134d8:	bl	10ea4 <fseeko64@plt>
   134dc:	mov	r3, r0
   134e0:	mov	r0, r3
   134e4:	sub	sp, fp, #4
   134e8:	ldr	fp, [sp]
   134ec:	add	sp, sp, #4
   134f0:	pop	{pc}		; (ldr pc, [sp], #4)
   134f4:	str	fp, [sp, #-8]!
   134f8:	str	lr, [sp, #4]
   134fc:	add	fp, sp, #4
   13500:	bl	10e50 <__errno_location@plt>
   13504:	mov	r2, r0
   13508:	mov	r3, #12
   1350c:	str	r3, [r2]
   13510:	mov	r3, #0
   13514:	mov	r0, r3
   13518:	sub	sp, fp, #4
   1351c:	ldr	fp, [sp]
   13520:	add	sp, sp, #4
   13524:	pop	{pc}		; (ldr pc, [sp], #4)
   13528:	str	fp, [sp, #-8]!
   1352c:	str	lr, [sp, #4]
   13530:	add	fp, sp, #4
   13534:	sub	sp, sp, #8
   13538:	str	r0, [fp, #-8]
   1353c:	ldr	r3, [fp, #-8]
   13540:	mov	r0, r3
   13544:	bl	17b54 <__assert_fail@plt+0x6c38>
   13548:	mov	r3, r0
   1354c:	mov	r0, r3
   13550:	sub	sp, fp, #4
   13554:	ldr	fp, [sp]
   13558:	add	sp, sp, #4
   1355c:	pop	{pc}		; (ldr pc, [sp], #4)
   13560:	str	fp, [sp, #-8]!
   13564:	str	lr, [sp, #4]
   13568:	add	fp, sp, #4
   1356c:	sub	sp, sp, #8
   13570:	str	r0, [fp, #-8]
   13574:	str	r1, [fp, #-12]
   13578:	ldr	r3, [fp, #-12]
   1357c:	cmp	r3, #0
   13580:	moveq	r3, #1
   13584:	movne	r3, #0
   13588:	uxtb	r3, r3
   1358c:	mov	r2, r3
   13590:	ldr	r3, [fp, #-12]
   13594:	orr	r3, r2, r3
   13598:	mov	r1, r3
   1359c:	ldr	r0, [fp, #-8]
   135a0:	bl	17be4 <__assert_fail@plt+0x6cc8>
   135a4:	mov	r3, r0
   135a8:	mov	r0, r3
   135ac:	sub	sp, fp, #4
   135b0:	ldr	fp, [sp]
   135b4:	add	sp, sp, #4
   135b8:	pop	{pc}		; (ldr pc, [sp], #4)
   135bc:	str	fp, [sp, #-8]!
   135c0:	str	lr, [sp, #4]
   135c4:	add	fp, sp, #4
   135c8:	sub	sp, sp, #8
   135cc:	str	r0, [fp, #-8]
   135d0:	str	r1, [fp, #-12]
   135d4:	ldr	r3, [fp, #-8]
   135d8:	ldr	r2, [fp, #-12]
   135dc:	mov	r1, r2
   135e0:	mov	r0, r3
   135e4:	bl	17a84 <__assert_fail@plt+0x6b68>
   135e8:	mov	r3, r0
   135ec:	mov	r0, r3
   135f0:	sub	sp, fp, #4
   135f4:	ldr	fp, [sp]
   135f8:	add	sp, sp, #4
   135fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13600:	str	fp, [sp, #-8]!
   13604:	str	lr, [sp, #4]
   13608:	add	fp, sp, #4
   1360c:	sub	sp, sp, #16
   13610:	str	r0, [fp, #-8]
   13614:	str	r1, [fp, #-12]
   13618:	str	r2, [fp, #-16]
   1361c:	ldr	r3, [fp, #-12]
   13620:	cmp	r3, #0
   13624:	beq	13634 <__assert_fail@plt+0x2718>
   13628:	ldr	r3, [fp, #-16]
   1362c:	cmp	r3, #0
   13630:	bne	13644 <__assert_fail@plt+0x2728>
   13634:	mov	r3, #1
   13638:	str	r3, [fp, #-16]
   1363c:	ldr	r3, [fp, #-16]
   13640:	str	r3, [fp, #-12]
   13644:	ldr	r3, [fp, #-12]
   13648:	ldr	r2, [fp, #-16]
   1364c:	mov	r1, r3
   13650:	ldr	r0, [fp, #-8]
   13654:	bl	16008 <__assert_fail@plt+0x50ec>
   13658:	mov	r3, r0
   1365c:	mov	r0, r3
   13660:	sub	sp, fp, #4
   13664:	ldr	fp, [sp]
   13668:	add	sp, sp, #4
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	str	fp, [sp, #-8]!
   13674:	str	lr, [sp, #4]
   13678:	add	fp, sp, #4
   1367c:	sub	sp, sp, #16
   13680:	str	r0, [fp, #-16]
   13684:	ldr	r3, [fp, #-16]
   13688:	cmp	r3, #0
   1368c:	bne	136b4 <__assert_fail@plt+0x2798>
   13690:	movw	r3, #41288	; 0xa148
   13694:	movt	r3, #2
   13698:	ldr	r3, [r3]
   1369c:	mov	r2, #55	; 0x37
   136a0:	mov	r1, #1
   136a4:	movw	r0, #36720	; 0x8f70
   136a8:	movt	r0, #1
   136ac:	bl	10d78 <fwrite@plt>
   136b0:	bl	10f04 <abort@plt>
   136b4:	mov	r1, #47	; 0x2f
   136b8:	ldr	r0, [fp, #-16]
   136bc:	bl	10ebc <strrchr@plt>
   136c0:	str	r0, [fp, #-8]
   136c4:	ldr	r3, [fp, #-8]
   136c8:	cmp	r3, #0
   136cc:	beq	136dc <__assert_fail@plt+0x27c0>
   136d0:	ldr	r3, [fp, #-8]
   136d4:	add	r3, r3, #1
   136d8:	b	136e0 <__assert_fail@plt+0x27c4>
   136dc:	ldr	r3, [fp, #-16]
   136e0:	str	r3, [fp, #-12]
   136e4:	ldr	r2, [fp, #-12]
   136e8:	ldr	r3, [fp, #-16]
   136ec:	sub	r3, r2, r3
   136f0:	cmp	r3, #6
   136f4:	ble	13764 <__assert_fail@plt+0x2848>
   136f8:	ldr	r3, [fp, #-12]
   136fc:	sub	r3, r3, #7
   13700:	mov	r2, #7
   13704:	movw	r1, #36776	; 0x8fa8
   13708:	movt	r1, #1
   1370c:	mov	r0, r3
   13710:	bl	10ef8 <strncmp@plt>
   13714:	mov	r3, r0
   13718:	cmp	r3, #0
   1371c:	bne	13764 <__assert_fail@plt+0x2848>
   13720:	ldr	r3, [fp, #-12]
   13724:	str	r3, [fp, #-16]
   13728:	mov	r2, #3
   1372c:	movw	r1, #36784	; 0x8fb0
   13730:	movt	r1, #1
   13734:	ldr	r0, [fp, #-12]
   13738:	bl	10ef8 <strncmp@plt>
   1373c:	mov	r3, r0
   13740:	cmp	r3, #0
   13744:	bne	13764 <__assert_fail@plt+0x2848>
   13748:	ldr	r3, [fp, #-12]
   1374c:	add	r3, r3, #3
   13750:	str	r3, [fp, #-16]
   13754:	movw	r3, #41272	; 0xa138
   13758:	movt	r3, #2
   1375c:	ldr	r2, [fp, #-16]
   13760:	str	r2, [r3]
   13764:	movw	r3, #41320	; 0xa168
   13768:	movt	r3, #2
   1376c:	ldr	r2, [fp, #-16]
   13770:	str	r2, [r3]
   13774:	movw	r3, #41276	; 0xa13c
   13778:	movt	r3, #2
   1377c:	ldr	r2, [fp, #-16]
   13780:	str	r2, [r3]
   13784:	nop	{0}
   13788:	sub	sp, fp, #4
   1378c:	ldr	fp, [sp]
   13790:	add	sp, sp, #4
   13794:	pop	{pc}		; (ldr pc, [sp], #4)
   13798:	str	fp, [sp, #-8]!
   1379c:	str	lr, [sp, #4]
   137a0:	add	fp, sp, #4
   137a4:	sub	sp, sp, #16
   137a8:	str	r0, [fp, #-16]
   137ac:	bl	10e50 <__errno_location@plt>
   137b0:	mov	r3, r0
   137b4:	ldr	r3, [r3]
   137b8:	str	r3, [fp, #-8]
   137bc:	ldr	r3, [fp, #-16]
   137c0:	cmp	r3, #0
   137c4:	beq	137d0 <__assert_fail@plt+0x28b4>
   137c8:	ldr	r3, [fp, #-16]
   137cc:	b	137d8 <__assert_fail@plt+0x28bc>
   137d0:	movw	r3, #41324	; 0xa16c
   137d4:	movt	r3, #2
   137d8:	mov	r1, #48	; 0x30
   137dc:	mov	r0, r3
   137e0:	bl	1701c <__assert_fail@plt+0x6100>
   137e4:	mov	r3, r0
   137e8:	str	r3, [fp, #-12]
   137ec:	bl	10e50 <__errno_location@plt>
   137f0:	mov	r2, r0
   137f4:	ldr	r3, [fp, #-8]
   137f8:	str	r3, [r2]
   137fc:	ldr	r3, [fp, #-12]
   13800:	mov	r0, r3
   13804:	sub	sp, fp, #4
   13808:	ldr	fp, [sp]
   1380c:	add	sp, sp, #4
   13810:	pop	{pc}		; (ldr pc, [sp], #4)
   13814:	push	{fp}		; (str fp, [sp, #-4]!)
   13818:	add	fp, sp, #0
   1381c:	sub	sp, sp, #12
   13820:	str	r0, [fp, #-8]
   13824:	ldr	r3, [fp, #-8]
   13828:	cmp	r3, #0
   1382c:	beq	13838 <__assert_fail@plt+0x291c>
   13830:	ldr	r3, [fp, #-8]
   13834:	b	13840 <__assert_fail@plt+0x2924>
   13838:	movw	r3, #41324	; 0xa16c
   1383c:	movt	r3, #2
   13840:	ldr	r3, [r3]
   13844:	mov	r0, r3
   13848:	add	sp, fp, #0
   1384c:	pop	{fp}		; (ldr fp, [sp], #4)
   13850:	bx	lr
   13854:	push	{fp}		; (str fp, [sp, #-4]!)
   13858:	add	fp, sp, #0
   1385c:	sub	sp, sp, #12
   13860:	str	r0, [fp, #-8]
   13864:	str	r1, [fp, #-12]
   13868:	ldr	r3, [fp, #-8]
   1386c:	cmp	r3, #0
   13870:	beq	1387c <__assert_fail@plt+0x2960>
   13874:	ldr	r3, [fp, #-8]
   13878:	b	13884 <__assert_fail@plt+0x2968>
   1387c:	movw	r3, #41324	; 0xa16c
   13880:	movt	r3, #2
   13884:	ldr	r2, [fp, #-12]
   13888:	str	r2, [r3]
   1388c:	nop	{0}
   13890:	add	sp, fp, #0
   13894:	pop	{fp}		; (ldr fp, [sp], #4)
   13898:	bx	lr
   1389c:	push	{fp}		; (str fp, [sp, #-4]!)
   138a0:	add	fp, sp, #0
   138a4:	sub	sp, sp, #36	; 0x24
   138a8:	str	r0, [fp, #-24]	; 0xffffffe8
   138ac:	mov	r3, r1
   138b0:	str	r2, [fp, #-32]	; 0xffffffe0
   138b4:	strb	r3, [fp, #-25]	; 0xffffffe7
   138b8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   138bc:	strb	r3, [fp, #-5]
   138c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   138c4:	cmp	r3, #0
   138c8:	beq	138d4 <__assert_fail@plt+0x29b8>
   138cc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   138d0:	b	138dc <__assert_fail@plt+0x29c0>
   138d4:	movw	r3, #41324	; 0xa16c
   138d8:	movt	r3, #2
   138dc:	add	r2, r3, #8
   138e0:	ldrb	r3, [fp, #-5]
   138e4:	lsr	r3, r3, #5
   138e8:	uxtb	r3, r3
   138ec:	lsl	r3, r3, #2
   138f0:	add	r3, r2, r3
   138f4:	str	r3, [fp, #-12]
   138f8:	ldrb	r3, [fp, #-5]
   138fc:	and	r3, r3, #31
   13900:	str	r3, [fp, #-16]
   13904:	ldr	r3, [fp, #-12]
   13908:	ldr	r2, [r3]
   1390c:	ldr	r3, [fp, #-16]
   13910:	lsr	r3, r2, r3
   13914:	and	r3, r3, #1
   13918:	str	r3, [fp, #-20]	; 0xffffffec
   1391c:	ldr	r3, [fp, #-12]
   13920:	ldr	r3, [r3]
   13924:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13928:	and	r1, r2, #1
   1392c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13930:	eor	r1, r1, r2
   13934:	ldr	r2, [fp, #-16]
   13938:	lsl	r2, r1, r2
   1393c:	eor	r2, r2, r3
   13940:	ldr	r3, [fp, #-12]
   13944:	str	r2, [r3]
   13948:	ldr	r3, [fp, #-20]	; 0xffffffec
   1394c:	mov	r0, r3
   13950:	add	sp, fp, #0
   13954:	pop	{fp}		; (ldr fp, [sp], #4)
   13958:	bx	lr
   1395c:	push	{fp}		; (str fp, [sp, #-4]!)
   13960:	add	fp, sp, #0
   13964:	sub	sp, sp, #20
   13968:	str	r0, [fp, #-16]
   1396c:	str	r1, [fp, #-20]	; 0xffffffec
   13970:	ldr	r3, [fp, #-16]
   13974:	cmp	r3, #0
   13978:	bne	13988 <__assert_fail@plt+0x2a6c>
   1397c:	movw	r3, #41324	; 0xa16c
   13980:	movt	r3, #2
   13984:	str	r3, [fp, #-16]
   13988:	ldr	r3, [fp, #-16]
   1398c:	ldr	r3, [r3, #4]
   13990:	str	r3, [fp, #-8]
   13994:	ldr	r3, [fp, #-16]
   13998:	ldr	r2, [fp, #-20]	; 0xffffffec
   1399c:	str	r2, [r3, #4]
   139a0:	ldr	r3, [fp, #-8]
   139a4:	mov	r0, r3
   139a8:	add	sp, fp, #0
   139ac:	pop	{fp}		; (ldr fp, [sp], #4)
   139b0:	bx	lr
   139b4:	str	fp, [sp, #-8]!
   139b8:	str	lr, [sp, #4]
   139bc:	add	fp, sp, #4
   139c0:	sub	sp, sp, #16
   139c4:	str	r0, [fp, #-8]
   139c8:	str	r1, [fp, #-12]
   139cc:	str	r2, [fp, #-16]
   139d0:	ldr	r3, [fp, #-8]
   139d4:	cmp	r3, #0
   139d8:	bne	139e8 <__assert_fail@plt+0x2acc>
   139dc:	movw	r3, #41324	; 0xa16c
   139e0:	movt	r3, #2
   139e4:	str	r3, [fp, #-8]
   139e8:	ldr	r3, [fp, #-8]
   139ec:	mov	r2, #10
   139f0:	str	r2, [r3]
   139f4:	ldr	r3, [fp, #-12]
   139f8:	cmp	r3, #0
   139fc:	beq	13a0c <__assert_fail@plt+0x2af0>
   13a00:	ldr	r3, [fp, #-16]
   13a04:	cmp	r3, #0
   13a08:	bne	13a10 <__assert_fail@plt+0x2af4>
   13a0c:	bl	10f04 <abort@plt>
   13a10:	ldr	r3, [fp, #-8]
   13a14:	ldr	r2, [fp, #-12]
   13a18:	str	r2, [r3, #40]	; 0x28
   13a1c:	ldr	r3, [fp, #-8]
   13a20:	ldr	r2, [fp, #-16]
   13a24:	str	r2, [r3, #44]	; 0x2c
   13a28:	nop	{0}
   13a2c:	sub	sp, fp, #4
   13a30:	ldr	fp, [sp]
   13a34:	add	sp, sp, #4
   13a38:	pop	{pc}		; (ldr pc, [sp], #4)
   13a3c:	str	fp, [sp, #-8]!
   13a40:	str	lr, [sp, #4]
   13a44:	add	fp, sp, #4
   13a48:	sub	sp, sp, #56	; 0x38
   13a4c:	str	r0, [fp, #-56]	; 0xffffffc8
   13a50:	str	r1, [fp, #-60]	; 0xffffffc4
   13a54:	sub	r1, fp, #52	; 0x34
   13a58:	mov	r2, #0
   13a5c:	mov	r3, #0
   13a60:	strd	r2, [r1]
   13a64:	strd	r2, [r1, #8]
   13a68:	strd	r2, [r1, #16]
   13a6c:	strd	r2, [r1, #24]
   13a70:	strd	r2, [r1, #32]
   13a74:	strd	r2, [r1, #40]	; 0x28
   13a78:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13a7c:	cmp	r3, #10
   13a80:	bne	13a88 <__assert_fail@plt+0x2b6c>
   13a84:	bl	10f04 <abort@plt>
   13a88:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13a8c:	str	r3, [fp, #-52]	; 0xffffffcc
   13a90:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13a94:	mov	r2, r3
   13a98:	sub	r3, fp, #52	; 0x34
   13a9c:	ldrd	r0, [r3]
   13aa0:	strd	r0, [r2]
   13aa4:	ldrd	r0, [r3, #8]
   13aa8:	strd	r0, [r2, #8]
   13aac:	ldrd	r0, [r3, #16]
   13ab0:	strd	r0, [r2, #16]
   13ab4:	ldrd	r0, [r3, #24]
   13ab8:	strd	r0, [r2, #24]
   13abc:	ldrd	r0, [r3, #32]
   13ac0:	strd	r0, [r2, #32]
   13ac4:	ldrd	r0, [r3, #40]	; 0x28
   13ac8:	strd	r0, [r2, #40]	; 0x28
   13acc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ad0:	sub	sp, fp, #4
   13ad4:	ldr	fp, [sp]
   13ad8:	add	sp, sp, #4
   13adc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae0:	str	fp, [sp, #-8]!
   13ae4:	str	lr, [sp, #4]
   13ae8:	add	fp, sp, #4
   13aec:	sub	sp, sp, #16
   13af0:	str	r0, [fp, #-16]
   13af4:	str	r1, [fp, #-20]	; 0xffffffec
   13af8:	ldr	r0, [fp, #-16]
   13afc:	bl	10e20 <gettext@plt>
   13b00:	str	r0, [fp, #-8]
   13b04:	ldr	r2, [fp, #-8]
   13b08:	ldr	r3, [fp, #-16]
   13b0c:	cmp	r2, r3
   13b10:	beq	13b1c <__assert_fail@plt+0x2c00>
   13b14:	ldr	r3, [fp, #-8]
   13b18:	b	13bcc <__assert_fail@plt+0x2cb0>
   13b1c:	bl	17e90 <__assert_fail@plt+0x6f74>
   13b20:	str	r0, [fp, #-12]
   13b24:	movw	r1, #36976	; 0x9070
   13b28:	movt	r1, #1
   13b2c:	ldr	r0, [fp, #-12]
   13b30:	bl	17d00 <__assert_fail@plt+0x6de4>
   13b34:	mov	r3, r0
   13b38:	cmp	r3, #0
   13b3c:	bne	13b68 <__assert_fail@plt+0x2c4c>
   13b40:	ldr	r3, [fp, #-16]
   13b44:	ldrb	r3, [r3]
   13b48:	cmp	r3, #96	; 0x60
   13b4c:	bne	13b5c <__assert_fail@plt+0x2c40>
   13b50:	movw	r3, #36984	; 0x9078
   13b54:	movt	r3, #1
   13b58:	b	13bcc <__assert_fail@plt+0x2cb0>
   13b5c:	movw	r3, #36988	; 0x907c
   13b60:	movt	r3, #1
   13b64:	b	13bcc <__assert_fail@plt+0x2cb0>
   13b68:	movw	r1, #36992	; 0x9080
   13b6c:	movt	r1, #1
   13b70:	ldr	r0, [fp, #-12]
   13b74:	bl	17d00 <__assert_fail@plt+0x6de4>
   13b78:	mov	r3, r0
   13b7c:	cmp	r3, #0
   13b80:	bne	13bac <__assert_fail@plt+0x2c90>
   13b84:	ldr	r3, [fp, #-16]
   13b88:	ldrb	r3, [r3]
   13b8c:	cmp	r3, #96	; 0x60
   13b90:	bne	13ba0 <__assert_fail@plt+0x2c84>
   13b94:	movw	r3, #37000	; 0x9088
   13b98:	movt	r3, #1
   13b9c:	b	13bcc <__assert_fail@plt+0x2cb0>
   13ba0:	movw	r3, #37004	; 0x908c
   13ba4:	movt	r3, #1
   13ba8:	b	13bcc <__assert_fail@plt+0x2cb0>
   13bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bb0:	cmp	r3, #9
   13bb4:	bne	13bc4 <__assert_fail@plt+0x2ca8>
   13bb8:	movw	r3, #37008	; 0x9090
   13bbc:	movt	r3, #1
   13bc0:	b	13bcc <__assert_fail@plt+0x2cb0>
   13bc4:	movw	r3, #37012	; 0x9094
   13bc8:	movt	r3, #1
   13bcc:	mov	r0, r3
   13bd0:	sub	sp, fp, #4
   13bd4:	ldr	fp, [sp]
   13bd8:	add	sp, sp, #4
   13bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   13be0:	str	r4, [sp, #-12]!
   13be4:	str	fp, [sp, #4]
   13be8:	str	lr, [sp, #8]
   13bec:	add	fp, sp, #8
   13bf0:	sub	sp, sp, #116	; 0x74
   13bf4:	str	r0, [fp, #-88]	; 0xffffffa8
   13bf8:	str	r1, [fp, #-92]	; 0xffffffa4
   13bfc:	str	r2, [fp, #-96]	; 0xffffffa0
   13c00:	str	r3, [fp, #-100]	; 0xffffff9c
   13c04:	mov	r3, #0
   13c08:	str	r3, [fp, #-20]	; 0xffffffec
   13c0c:	mov	r3, #0
   13c10:	str	r3, [fp, #-24]	; 0xffffffe8
   13c14:	mov	r3, #0
   13c18:	str	r3, [fp, #-28]	; 0xffffffe4
   13c1c:	mov	r3, #0
   13c20:	str	r3, [fp, #-32]	; 0xffffffe0
   13c24:	mov	r3, #0
   13c28:	strb	r3, [fp, #-33]	; 0xffffffdf
   13c2c:	bl	10d90 <__ctype_get_mb_cur_max@plt>
   13c30:	mov	r3, r0
   13c34:	cmp	r3, #1
   13c38:	moveq	r3, #1
   13c3c:	movne	r3, #0
   13c40:	strb	r3, [fp, #-57]	; 0xffffffc7
   13c44:	ldr	r3, [fp, #8]
   13c48:	and	r3, r3, #2
   13c4c:	cmp	r3, #0
   13c50:	movne	r3, #1
   13c54:	moveq	r3, #0
   13c58:	strb	r3, [fp, #-34]	; 0xffffffde
   13c5c:	mov	r3, #0
   13c60:	strb	r3, [fp, #-35]	; 0xffffffdd
   13c64:	mov	r3, #0
   13c68:	strb	r3, [fp, #-36]	; 0xffffffdc
   13c6c:	mov	r3, #1
   13c70:	strb	r3, [fp, #-37]	; 0xffffffdb
   13c74:	ldr	r3, [fp, #4]
   13c78:	cmp	r3, #10
   13c7c:	ldrls	pc, [pc, r3, lsl #2]
   13c80:	b	13e98 <__assert_fail@plt+0x2f7c>
   13c84:	andeq	r3, r1, ip, lsl #29
   13c88:	andeq	r3, r1, r4, lsl #28
   13c8c:	andeq	r3, r1, r8, lsr #28
   13c90:	strdeq	r3, [r1], -ip
   13c94:	andeq	r3, r1, ip, lsl #28
   13c98:	andeq	r3, r1, r0, asr #25
   13c9c:			; <UNDEFINED> instruction: 0x00013cb0
   13ca0:	andeq	r3, r1, r4, lsr #26
   13ca4:	andeq	r3, r1, r8, lsr sp
   13ca8:	andeq	r3, r1, r8, lsr sp
   13cac:	andeq	r3, r1, r8, lsr sp
   13cb0:	mov	r3, #5
   13cb4:	str	r3, [fp, #4]
   13cb8:	mov	r3, #1
   13cbc:	strb	r3, [fp, #-34]	; 0xffffffde
   13cc0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13cc4:	eor	r3, r3, #1
   13cc8:	uxtb	r3, r3
   13ccc:	cmp	r3, #0
   13cd0:	beq	13d04 <__assert_fail@plt+0x2de8>
   13cd4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cdc:	cmp	r2, r3
   13ce0:	bcs	13cf8 <__assert_fail@plt+0x2ddc>
   13ce4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ce8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cec:	add	r3, r2, r3
   13cf0:	mov	r2, #34	; 0x22
   13cf4:	strb	r2, [r3]
   13cf8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cfc:	add	r3, r3, #1
   13d00:	str	r3, [fp, #-20]	; 0xffffffec
   13d04:	mov	r3, #1
   13d08:	strb	r3, [fp, #-33]	; 0xffffffdf
   13d0c:	movw	r3, #37008	; 0x9090
   13d10:	movt	r3, #1
   13d14:	str	r3, [fp, #-28]	; 0xffffffe4
   13d18:	mov	r3, #1
   13d1c:	str	r3, [fp, #-32]	; 0xffffffe0
   13d20:	b	13e9c <__assert_fail@plt+0x2f80>
   13d24:	mov	r3, #1
   13d28:	strb	r3, [fp, #-33]	; 0xffffffdf
   13d2c:	mov	r3, #0
   13d30:	strb	r3, [fp, #-34]	; 0xffffffde
   13d34:	b	13e9c <__assert_fail@plt+0x2f80>
   13d38:	ldr	r3, [fp, #4]
   13d3c:	cmp	r3, #10
   13d40:	beq	13d6c <__assert_fail@plt+0x2e50>
   13d44:	ldr	r1, [fp, #4]
   13d48:	movw	r0, #37016	; 0x9098
   13d4c:	movt	r0, #1
   13d50:	bl	13ae0 <__assert_fail@plt+0x2bc4>
   13d54:	str	r0, [fp, #16]
   13d58:	ldr	r1, [fp, #4]
   13d5c:	movw	r0, #37012	; 0x9094
   13d60:	movt	r0, #1
   13d64:	bl	13ae0 <__assert_fail@plt+0x2bc4>
   13d68:	str	r0, [fp, #20]
   13d6c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d70:	eor	r3, r3, #1
   13d74:	uxtb	r3, r3
   13d78:	cmp	r3, #0
   13d7c:	beq	13ddc <__assert_fail@plt+0x2ec0>
   13d80:	ldr	r3, [fp, #16]
   13d84:	str	r3, [fp, #-28]	; 0xffffffe4
   13d88:	b	13dcc <__assert_fail@plt+0x2eb0>
   13d8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13d94:	cmp	r2, r3
   13d98:	bcs	13db4 <__assert_fail@plt+0x2e98>
   13d9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13da4:	add	r3, r2, r3
   13da8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13dac:	ldrb	r2, [r2]
   13db0:	strb	r2, [r3]
   13db4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13db8:	add	r3, r3, #1
   13dbc:	str	r3, [fp, #-20]	; 0xffffffec
   13dc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dc4:	add	r3, r3, #1
   13dc8:	str	r3, [fp, #-28]	; 0xffffffe4
   13dcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13dd0:	ldrb	r3, [r3]
   13dd4:	cmp	r3, #0
   13dd8:	bne	13d8c <__assert_fail@plt+0x2e70>
   13ddc:	mov	r3, #1
   13de0:	strb	r3, [fp, #-33]	; 0xffffffdf
   13de4:	ldr	r3, [fp, #20]
   13de8:	str	r3, [fp, #-28]	; 0xffffffe4
   13dec:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13df0:	bl	10e2c <strlen@plt>
   13df4:	str	r0, [fp, #-32]	; 0xffffffe0
   13df8:	b	13e9c <__assert_fail@plt+0x2f80>
   13dfc:	mov	r3, #1
   13e00:	strb	r3, [fp, #-33]	; 0xffffffdf
   13e04:	mov	r3, #1
   13e08:	strb	r3, [fp, #-34]	; 0xffffffde
   13e0c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e10:	eor	r3, r3, #1
   13e14:	uxtb	r3, r3
   13e18:	cmp	r3, #0
   13e1c:	beq	13e28 <__assert_fail@plt+0x2f0c>
   13e20:	mov	r3, #1
   13e24:	strb	r3, [fp, #-33]	; 0xffffffdf
   13e28:	mov	r3, #2
   13e2c:	str	r3, [fp, #4]
   13e30:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e34:	eor	r3, r3, #1
   13e38:	uxtb	r3, r3
   13e3c:	cmp	r3, #0
   13e40:	beq	13e74 <__assert_fail@plt+0x2f58>
   13e44:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e4c:	cmp	r2, r3
   13e50:	bcs	13e68 <__assert_fail@plt+0x2f4c>
   13e54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e58:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e5c:	add	r3, r2, r3
   13e60:	mov	r2, #39	; 0x27
   13e64:	strb	r2, [r3]
   13e68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e6c:	add	r3, r3, #1
   13e70:	str	r3, [fp, #-20]	; 0xffffffec
   13e74:	movw	r3, #37012	; 0x9094
   13e78:	movt	r3, #1
   13e7c:	str	r3, [fp, #-28]	; 0xffffffe4
   13e80:	mov	r3, #1
   13e84:	str	r3, [fp, #-32]	; 0xffffffe0
   13e88:	b	13e9c <__assert_fail@plt+0x2f80>
   13e8c:	mov	r3, #0
   13e90:	strb	r3, [fp, #-34]	; 0xffffffde
   13e94:	b	13e9c <__assert_fail@plt+0x2f80>
   13e98:	bl	10f04 <abort@plt>
   13e9c:	mov	r3, #0
   13ea0:	str	r3, [fp, #-16]
   13ea4:	b	15040 <__assert_fail@plt+0x4124>
   13ea8:	mov	r3, #0
   13eac:	strb	r3, [fp, #-40]	; 0xffffffd8
   13eb0:	mov	r3, #0
   13eb4:	strb	r3, [fp, #-41]	; 0xffffffd7
   13eb8:	mov	r3, #0
   13ebc:	strb	r3, [fp, #-42]	; 0xffffffd6
   13ec0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13ec4:	cmp	r3, #0
   13ec8:	beq	13f64 <__assert_fail@plt+0x3048>
   13ecc:	ldr	r3, [fp, #4]
   13ed0:	cmp	r3, #2
   13ed4:	beq	13f64 <__assert_fail@plt+0x3048>
   13ed8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13edc:	cmp	r3, #0
   13ee0:	beq	13f64 <__assert_fail@plt+0x3048>
   13ee4:	ldr	r2, [fp, #-16]
   13ee8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13eec:	add	r4, r2, r3
   13ef0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13ef4:	cmn	r3, #1
   13ef8:	bne	13f1c <__assert_fail@plt+0x3000>
   13efc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13f00:	cmp	r3, #1
   13f04:	bls	13f1c <__assert_fail@plt+0x3000>
   13f08:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13f0c:	bl	10e2c <strlen@plt>
   13f10:	str	r0, [fp, #-100]	; 0xffffff9c
   13f14:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13f18:	b	13f20 <__assert_fail@plt+0x3004>
   13f1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13f20:	cmp	r3, r4
   13f24:	bcc	13f64 <__assert_fail@plt+0x3048>
   13f28:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f2c:	ldr	r3, [fp, #-16]
   13f30:	add	r3, r2, r3
   13f34:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f38:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13f3c:	mov	r0, r3
   13f40:	bl	10d3c <memcmp@plt>
   13f44:	mov	r3, r0
   13f48:	cmp	r3, #0
   13f4c:	bne	13f64 <__assert_fail@plt+0x3048>
   13f50:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13f54:	cmp	r3, #0
   13f58:	bne	151fc <__assert_fail@plt+0x42e0>
   13f5c:	mov	r3, #1
   13f60:	strb	r3, [fp, #-40]	; 0xffffffd8
   13f64:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f68:	ldr	r3, [fp, #-16]
   13f6c:	add	r3, r2, r3
   13f70:	ldrb	r3, [r3]
   13f74:	strb	r3, [fp, #-38]	; 0xffffffda
   13f78:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13f7c:	cmp	r3, #126	; 0x7e
   13f80:	ldrls	pc, [pc, r3, lsl #2]
   13f84:	b	147bc <__assert_fail@plt+0x38a0>
   13f88:	andeq	r4, r1, r4, lsl #3
   13f8c:			; <UNDEFINED> instruction: 0x000147bc
   13f90:			; <UNDEFINED> instruction: 0x000147bc
   13f94:			; <UNDEFINED> instruction: 0x000147bc
   13f98:			; <UNDEFINED> instruction: 0x000147bc
   13f9c:			; <UNDEFINED> instruction: 0x000147bc
   13fa0:			; <UNDEFINED> instruction: 0x000147bc
   13fa4:	andeq	r4, r1, r8, ror r5
   13fa8:	andeq	r4, r1, r4, lsl #11
   13fac:			; <UNDEFINED> instruction: 0x000145b4
   13fb0:	muleq	r1, ip, r5
   13fb4:	andeq	r4, r1, r0, asr #11
   13fb8:	muleq	r1, r0, r5
   13fbc:	andeq	r4, r1, r8, lsr #11
   13fc0:			; <UNDEFINED> instruction: 0x000147bc
   13fc4:			; <UNDEFINED> instruction: 0x000147bc
   13fc8:			; <UNDEFINED> instruction: 0x000147bc
   13fcc:			; <UNDEFINED> instruction: 0x000147bc
   13fd0:			; <UNDEFINED> instruction: 0x000147bc
   13fd4:			; <UNDEFINED> instruction: 0x000147bc
   13fd8:			; <UNDEFINED> instruction: 0x000147bc
   13fdc:			; <UNDEFINED> instruction: 0x000147bc
   13fe0:			; <UNDEFINED> instruction: 0x000147bc
   13fe4:			; <UNDEFINED> instruction: 0x000147bc
   13fe8:			; <UNDEFINED> instruction: 0x000147bc
   13fec:			; <UNDEFINED> instruction: 0x000147bc
   13ff0:			; <UNDEFINED> instruction: 0x000147bc
   13ff4:			; <UNDEFINED> instruction: 0x000147bc
   13ff8:			; <UNDEFINED> instruction: 0x000147bc
   13ffc:			; <UNDEFINED> instruction: 0x000147bc
   14000:			; <UNDEFINED> instruction: 0x000147bc
   14004:			; <UNDEFINED> instruction: 0x000147bc
   14008:	andeq	r4, r1, r0, lsr #13
   1400c:	andeq	r4, r1, r8, lsr #13
   14010:	andeq	r4, r1, r8, lsr #13
   14014:	muleq	r1, r4, r6
   14018:	andeq	r4, r1, r8, lsr #13
   1401c:			; <UNDEFINED> instruction: 0x000147b0
   14020:	andeq	r4, r1, r8, lsr #13
   14024:	andeq	r4, r1, r4, asr #13
   14028:	andeq	r4, r1, r8, lsr #13
   1402c:	andeq	r4, r1, r8, lsr #13
   14030:	andeq	r4, r1, r8, lsr #13
   14034:			; <UNDEFINED> instruction: 0x000147b0
   14038:			; <UNDEFINED> instruction: 0x000147b0
   1403c:			; <UNDEFINED> instruction: 0x000147b0
   14040:			; <UNDEFINED> instruction: 0x000147b0
   14044:			; <UNDEFINED> instruction: 0x000147b0
   14048:			; <UNDEFINED> instruction: 0x000147b0
   1404c:			; <UNDEFINED> instruction: 0x000147b0
   14050:			; <UNDEFINED> instruction: 0x000147b0
   14054:			; <UNDEFINED> instruction: 0x000147b0
   14058:			; <UNDEFINED> instruction: 0x000147b0
   1405c:			; <UNDEFINED> instruction: 0x000147b0
   14060:			; <UNDEFINED> instruction: 0x000147b0
   14064:			; <UNDEFINED> instruction: 0x000147b0
   14068:			; <UNDEFINED> instruction: 0x000147b0
   1406c:			; <UNDEFINED> instruction: 0x000147b0
   14070:			; <UNDEFINED> instruction: 0x000147b0
   14074:	andeq	r4, r1, r8, lsr #13
   14078:	andeq	r4, r1, r8, lsr #13
   1407c:	andeq	r4, r1, r8, lsr #13
   14080:	andeq	r4, r1, r8, lsr #13
   14084:	andeq	r4, r1, r4, ror #6
   14088:			; <UNDEFINED> instruction: 0x000147bc
   1408c:			; <UNDEFINED> instruction: 0x000147b0
   14090:			; <UNDEFINED> instruction: 0x000147b0
   14094:			; <UNDEFINED> instruction: 0x000147b0
   14098:			; <UNDEFINED> instruction: 0x000147b0
   1409c:			; <UNDEFINED> instruction: 0x000147b0
   140a0:			; <UNDEFINED> instruction: 0x000147b0
   140a4:			; <UNDEFINED> instruction: 0x000147b0
   140a8:			; <UNDEFINED> instruction: 0x000147b0
   140ac:			; <UNDEFINED> instruction: 0x000147b0
   140b0:			; <UNDEFINED> instruction: 0x000147b0
   140b4:			; <UNDEFINED> instruction: 0x000147b0
   140b8:			; <UNDEFINED> instruction: 0x000147b0
   140bc:			; <UNDEFINED> instruction: 0x000147b0
   140c0:			; <UNDEFINED> instruction: 0x000147b0
   140c4:			; <UNDEFINED> instruction: 0x000147b0
   140c8:			; <UNDEFINED> instruction: 0x000147b0
   140cc:			; <UNDEFINED> instruction: 0x000147b0
   140d0:			; <UNDEFINED> instruction: 0x000147b0
   140d4:			; <UNDEFINED> instruction: 0x000147b0
   140d8:			; <UNDEFINED> instruction: 0x000147b0
   140dc:			; <UNDEFINED> instruction: 0x000147b0
   140e0:			; <UNDEFINED> instruction: 0x000147b0
   140e4:			; <UNDEFINED> instruction: 0x000147b0
   140e8:			; <UNDEFINED> instruction: 0x000147b0
   140ec:			; <UNDEFINED> instruction: 0x000147b0
   140f0:			; <UNDEFINED> instruction: 0x000147b0
   140f4:	andeq	r4, r1, r8, lsr #13
   140f8:	andeq	r4, r1, ip, asr #11
   140fc:			; <UNDEFINED> instruction: 0x000147b0
   14100:	andeq	r4, r1, r8, lsr #13
   14104:			; <UNDEFINED> instruction: 0x000147b0
   14108:	andeq	r4, r1, r8, lsr #13
   1410c:			; <UNDEFINED> instruction: 0x000147b0
   14110:			; <UNDEFINED> instruction: 0x000147b0
   14114:			; <UNDEFINED> instruction: 0x000147b0
   14118:			; <UNDEFINED> instruction: 0x000147b0
   1411c:			; <UNDEFINED> instruction: 0x000147b0
   14120:			; <UNDEFINED> instruction: 0x000147b0
   14124:			; <UNDEFINED> instruction: 0x000147b0
   14128:			; <UNDEFINED> instruction: 0x000147b0
   1412c:			; <UNDEFINED> instruction: 0x000147b0
   14130:			; <UNDEFINED> instruction: 0x000147b0
   14134:			; <UNDEFINED> instruction: 0x000147b0
   14138:			; <UNDEFINED> instruction: 0x000147b0
   1413c:			; <UNDEFINED> instruction: 0x000147b0
   14140:			; <UNDEFINED> instruction: 0x000147b0
   14144:			; <UNDEFINED> instruction: 0x000147b0
   14148:			; <UNDEFINED> instruction: 0x000147b0
   1414c:			; <UNDEFINED> instruction: 0x000147b0
   14150:			; <UNDEFINED> instruction: 0x000147b0
   14154:			; <UNDEFINED> instruction: 0x000147b0
   14158:			; <UNDEFINED> instruction: 0x000147b0
   1415c:			; <UNDEFINED> instruction: 0x000147b0
   14160:			; <UNDEFINED> instruction: 0x000147b0
   14164:			; <UNDEFINED> instruction: 0x000147b0
   14168:			; <UNDEFINED> instruction: 0x000147b0
   1416c:			; <UNDEFINED> instruction: 0x000147b0
   14170:			; <UNDEFINED> instruction: 0x000147b0
   14174:	andeq	r4, r1, ip, asr #12
   14178:	andeq	r4, r1, r8, lsr #13
   1417c:	andeq	r4, r1, ip, asr #12
   14180:	muleq	r1, r4, r6
   14184:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14188:	cmp	r3, #0
   1418c:	beq	14350 <__assert_fail@plt+0x3434>
   14190:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14194:	cmp	r3, #0
   14198:	bne	15204 <__assert_fail@plt+0x42e8>
   1419c:	mov	r3, #1
   141a0:	strb	r3, [fp, #-41]	; 0xffffffd7
   141a4:	ldr	r3, [fp, #4]
   141a8:	cmp	r3, #2
   141ac:	bne	1425c <__assert_fail@plt+0x3340>
   141b0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   141b4:	eor	r3, r3, #1
   141b8:	uxtb	r3, r3
   141bc:	cmp	r3, #0
   141c0:	beq	1425c <__assert_fail@plt+0x3340>
   141c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   141c8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141cc:	cmp	r2, r3
   141d0:	bcs	141e8 <__assert_fail@plt+0x32cc>
   141d4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141dc:	add	r3, r2, r3
   141e0:	mov	r2, #39	; 0x27
   141e4:	strb	r2, [r3]
   141e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   141ec:	add	r3, r3, #1
   141f0:	str	r3, [fp, #-20]	; 0xffffffec
   141f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   141f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   141fc:	cmp	r2, r3
   14200:	bcs	14218 <__assert_fail@plt+0x32fc>
   14204:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1420c:	add	r3, r2, r3
   14210:	mov	r2, #36	; 0x24
   14214:	strb	r2, [r3]
   14218:	ldr	r3, [fp, #-20]	; 0xffffffec
   1421c:	add	r3, r3, #1
   14220:	str	r3, [fp, #-20]	; 0xffffffec
   14224:	ldr	r2, [fp, #-20]	; 0xffffffec
   14228:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1422c:	cmp	r2, r3
   14230:	bcs	14248 <__assert_fail@plt+0x332c>
   14234:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1423c:	add	r3, r2, r3
   14240:	mov	r2, #39	; 0x27
   14244:	strb	r2, [r3]
   14248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1424c:	add	r3, r3, #1
   14250:	str	r3, [fp, #-20]	; 0xffffffec
   14254:	mov	r3, #1
   14258:	strb	r3, [fp, #-35]	; 0xffffffdd
   1425c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14260:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14264:	cmp	r2, r3
   14268:	bcs	14280 <__assert_fail@plt+0x3364>
   1426c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14270:	ldr	r3, [fp, #-20]	; 0xffffffec
   14274:	add	r3, r2, r3
   14278:	mov	r2, #92	; 0x5c
   1427c:	strb	r2, [r3]
   14280:	ldr	r3, [fp, #-20]	; 0xffffffec
   14284:	add	r3, r3, #1
   14288:	str	r3, [fp, #-20]	; 0xffffffec
   1428c:	ldr	r3, [fp, #4]
   14290:	cmp	r3, #2
   14294:	beq	14344 <__assert_fail@plt+0x3428>
   14298:	ldr	r3, [fp, #-16]
   1429c:	add	r3, r3, #1
   142a0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   142a4:	cmp	r2, r3
   142a8:	bls	14344 <__assert_fail@plt+0x3428>
   142ac:	ldr	r3, [fp, #-16]
   142b0:	add	r3, r3, #1
   142b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   142b8:	add	r3, r2, r3
   142bc:	ldrb	r3, [r3]
   142c0:	cmp	r3, #47	; 0x2f
   142c4:	bls	14344 <__assert_fail@plt+0x3428>
   142c8:	ldr	r3, [fp, #-16]
   142cc:	add	r3, r3, #1
   142d0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   142d4:	add	r3, r2, r3
   142d8:	ldrb	r3, [r3]
   142dc:	cmp	r3, #57	; 0x39
   142e0:	bhi	14344 <__assert_fail@plt+0x3428>
   142e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   142e8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   142ec:	cmp	r2, r3
   142f0:	bcs	14308 <__assert_fail@plt+0x33ec>
   142f4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   142f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   142fc:	add	r3, r2, r3
   14300:	mov	r2, #48	; 0x30
   14304:	strb	r2, [r3]
   14308:	ldr	r3, [fp, #-20]	; 0xffffffec
   1430c:	add	r3, r3, #1
   14310:	str	r3, [fp, #-20]	; 0xffffffec
   14314:	ldr	r2, [fp, #-20]	; 0xffffffec
   14318:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1431c:	cmp	r2, r3
   14320:	bcs	14338 <__assert_fail@plt+0x341c>
   14324:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14328:	ldr	r3, [fp, #-20]	; 0xffffffec
   1432c:	add	r3, r2, r3
   14330:	mov	r2, #48	; 0x30
   14334:	strb	r2, [r3]
   14338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1433c:	add	r3, r3, #1
   14340:	str	r3, [fp, #-20]	; 0xffffffec
   14344:	mov	r3, #48	; 0x30
   14348:	strb	r3, [fp, #-38]	; 0xffffffda
   1434c:	b	14d8c <__assert_fail@plt+0x3e70>
   14350:	ldr	r3, [fp, #8]
   14354:	and	r3, r3, #1
   14358:	cmp	r3, #0
   1435c:	beq	14d8c <__assert_fail@plt+0x3e70>
   14360:	b	15034 <__assert_fail@plt+0x4118>
   14364:	ldr	r3, [fp, #4]
   14368:	cmp	r3, #2
   1436c:	beq	14380 <__assert_fail@plt+0x3464>
   14370:	ldr	r3, [fp, #4]
   14374:	cmp	r3, #5
   14378:	beq	14390 <__assert_fail@plt+0x3474>
   1437c:	b	14574 <__assert_fail@plt+0x3658>
   14380:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14384:	cmp	r3, #0
   14388:	beq	14568 <__assert_fail@plt+0x364c>
   1438c:	b	15238 <__assert_fail@plt+0x431c>
   14390:	ldr	r3, [fp, #8]
   14394:	and	r3, r3, #4
   14398:	cmp	r3, #0
   1439c:	beq	14570 <__assert_fail@plt+0x3654>
   143a0:	ldr	r3, [fp, #-16]
   143a4:	add	r3, r3, #2
   143a8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   143ac:	cmp	r2, r3
   143b0:	bls	14570 <__assert_fail@plt+0x3654>
   143b4:	ldr	r3, [fp, #-16]
   143b8:	add	r3, r3, #1
   143bc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143c0:	add	r3, r2, r3
   143c4:	ldrb	r3, [r3]
   143c8:	cmp	r3, #63	; 0x3f
   143cc:	bne	14570 <__assert_fail@plt+0x3654>
   143d0:	ldr	r3, [fp, #-16]
   143d4:	add	r3, r3, #2
   143d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   143dc:	add	r3, r2, r3
   143e0:	ldrb	r3, [r3]
   143e4:	sub	r3, r3, #33	; 0x21
   143e8:	cmp	r3, #29
   143ec:	ldrls	pc, [pc, r3, lsl #2]
   143f0:	b	14560 <__assert_fail@plt+0x3644>
   143f4:	andeq	r4, r1, ip, ror #8
   143f8:	andeq	r4, r1, r0, ror #10
   143fc:	andeq	r4, r1, r0, ror #10
   14400:	andeq	r4, r1, r0, ror #10
   14404:	andeq	r4, r1, r0, ror #10
   14408:	andeq	r4, r1, r0, ror #10
   1440c:	andeq	r4, r1, ip, ror #8
   14410:	andeq	r4, r1, ip, ror #8
   14414:	andeq	r4, r1, ip, ror #8
   14418:	andeq	r4, r1, r0, ror #10
   1441c:	andeq	r4, r1, r0, ror #10
   14420:	andeq	r4, r1, r0, ror #10
   14424:	andeq	r4, r1, ip, ror #8
   14428:	andeq	r4, r1, r0, ror #10
   1442c:	andeq	r4, r1, ip, ror #8
   14430:	andeq	r4, r1, r0, ror #10
   14434:	andeq	r4, r1, r0, ror #10
   14438:	andeq	r4, r1, r0, ror #10
   1443c:	andeq	r4, r1, r0, ror #10
   14440:	andeq	r4, r1, r0, ror #10
   14444:	andeq	r4, r1, r0, ror #10
   14448:	andeq	r4, r1, r0, ror #10
   1444c:	andeq	r4, r1, r0, ror #10
   14450:	andeq	r4, r1, r0, ror #10
   14454:	andeq	r4, r1, r0, ror #10
   14458:	andeq	r4, r1, r0, ror #10
   1445c:	andeq	r4, r1, r0, ror #10
   14460:	andeq	r4, r1, ip, ror #8
   14464:	andeq	r4, r1, ip, ror #8
   14468:	andeq	r4, r1, ip, ror #8
   1446c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14470:	cmp	r3, #0
   14474:	bne	1520c <__assert_fail@plt+0x42f0>
   14478:	ldr	r3, [fp, #-16]
   1447c:	add	r3, r3, #2
   14480:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14484:	add	r3, r2, r3
   14488:	ldrb	r3, [r3]
   1448c:	strb	r3, [fp, #-38]	; 0xffffffda
   14490:	ldr	r3, [fp, #-16]
   14494:	add	r3, r3, #2
   14498:	str	r3, [fp, #-16]
   1449c:	ldr	r2, [fp, #-20]	; 0xffffffec
   144a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144a4:	cmp	r2, r3
   144a8:	bcs	144c0 <__assert_fail@plt+0x35a4>
   144ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144b4:	add	r3, r2, r3
   144b8:	mov	r2, #63	; 0x3f
   144bc:	strb	r2, [r3]
   144c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c4:	add	r3, r3, #1
   144c8:	str	r3, [fp, #-20]	; 0xffffffec
   144cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   144d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144d4:	cmp	r2, r3
   144d8:	bcs	144f0 <__assert_fail@plt+0x35d4>
   144dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144e4:	add	r3, r2, r3
   144e8:	mov	r2, #34	; 0x22
   144ec:	strb	r2, [r3]
   144f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   144f4:	add	r3, r3, #1
   144f8:	str	r3, [fp, #-20]	; 0xffffffec
   144fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14500:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14504:	cmp	r2, r3
   14508:	bcs	14520 <__assert_fail@plt+0x3604>
   1450c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14510:	ldr	r3, [fp, #-20]	; 0xffffffec
   14514:	add	r3, r2, r3
   14518:	mov	r2, #34	; 0x22
   1451c:	strb	r2, [r3]
   14520:	ldr	r3, [fp, #-20]	; 0xffffffec
   14524:	add	r3, r3, #1
   14528:	str	r3, [fp, #-20]	; 0xffffffec
   1452c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14530:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14534:	cmp	r2, r3
   14538:	bcs	14550 <__assert_fail@plt+0x3634>
   1453c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14540:	ldr	r3, [fp, #-20]	; 0xffffffec
   14544:	add	r3, r2, r3
   14548:	mov	r2, #63	; 0x3f
   1454c:	strb	r2, [r3]
   14550:	ldr	r3, [fp, #-20]	; 0xffffffec
   14554:	add	r3, r3, #1
   14558:	str	r3, [fp, #-20]	; 0xffffffec
   1455c:	b	14564 <__assert_fail@plt+0x3648>
   14560:	nop	{0}
   14564:	b	14570 <__assert_fail@plt+0x3654>
   14568:	nop	{0}
   1456c:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14570:	nop	{0}
   14574:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14578:	mov	r3, #97	; 0x61
   1457c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14580:	b	14634 <__assert_fail@plt+0x3718>
   14584:	mov	r3, #98	; 0x62
   14588:	strb	r3, [fp, #-39]	; 0xffffffd9
   1458c:	b	14634 <__assert_fail@plt+0x3718>
   14590:	mov	r3, #102	; 0x66
   14594:	strb	r3, [fp, #-39]	; 0xffffffd9
   14598:	b	14634 <__assert_fail@plt+0x3718>
   1459c:	mov	r3, #110	; 0x6e
   145a0:	strb	r3, [fp, #-39]	; 0xffffffd9
   145a4:	b	14618 <__assert_fail@plt+0x36fc>
   145a8:	mov	r3, #114	; 0x72
   145ac:	strb	r3, [fp, #-39]	; 0xffffffd9
   145b0:	b	14618 <__assert_fail@plt+0x36fc>
   145b4:	mov	r3, #116	; 0x74
   145b8:	strb	r3, [fp, #-39]	; 0xffffffd9
   145bc:	b	14618 <__assert_fail@plt+0x36fc>
   145c0:	mov	r3, #118	; 0x76
   145c4:	strb	r3, [fp, #-39]	; 0xffffffd9
   145c8:	b	14634 <__assert_fail@plt+0x3718>
   145cc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   145d0:	strb	r3, [fp, #-39]	; 0xffffffd9
   145d4:	ldr	r3, [fp, #4]
   145d8:	cmp	r3, #2
   145dc:	bne	145f0 <__assert_fail@plt+0x36d4>
   145e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   145e4:	cmp	r3, #0
   145e8:	beq	14f4c <__assert_fail@plt+0x4030>
   145ec:	b	15238 <__assert_fail@plt+0x431c>
   145f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   145f4:	cmp	r3, #0
   145f8:	beq	14614 <__assert_fail@plt+0x36f8>
   145fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14600:	cmp	r3, #0
   14604:	beq	14614 <__assert_fail@plt+0x36f8>
   14608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1460c:	cmp	r3, #0
   14610:	bne	14f54 <__assert_fail@plt+0x4038>
   14614:	nop	{0}
   14618:	ldr	r3, [fp, #4]
   1461c:	cmp	r3, #2
   14620:	bne	14630 <__assert_fail@plt+0x3714>
   14624:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14628:	cmp	r3, #0
   1462c:	bne	15214 <__assert_fail@plt+0x42f8>
   14630:	nop	{0}
   14634:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14638:	cmp	r3, #0
   1463c:	beq	14d94 <__assert_fail@plt+0x3e78>
   14640:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   14644:	strb	r3, [fp, #-38]	; 0xffffffda
   14648:	b	14e4c <__assert_fail@plt+0x3f30>
   1464c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14650:	cmn	r3, #1
   14654:	bne	14678 <__assert_fail@plt+0x375c>
   14658:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1465c:	add	r3, r3, #1
   14660:	ldrb	r3, [r3]
   14664:	cmp	r3, #0
   14668:	movne	r3, #1
   1466c:	moveq	r3, #0
   14670:	uxtb	r3, r3
   14674:	b	1468c <__assert_fail@plt+0x3770>
   14678:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1467c:	cmp	r3, #1
   14680:	movne	r3, #1
   14684:	moveq	r3, #0
   14688:	uxtb	r3, r3
   1468c:	cmp	r3, #0
   14690:	bne	14d9c <__assert_fail@plt+0x3e80>
   14694:	ldr	r3, [fp, #-16]
   14698:	cmp	r3, #0
   1469c:	bne	14da4 <__assert_fail@plt+0x3e88>
   146a0:	mov	r3, #1
   146a4:	strb	r3, [fp, #-42]	; 0xffffffd6
   146a8:	ldr	r3, [fp, #4]
   146ac:	cmp	r3, #2
   146b0:	bne	14dac <__assert_fail@plt+0x3e90>
   146b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   146b8:	cmp	r3, #0
   146bc:	beq	14dac <__assert_fail@plt+0x3e90>
   146c0:	b	15238 <__assert_fail@plt+0x431c>
   146c4:	mov	r3, #1
   146c8:	strb	r3, [fp, #-36]	; 0xffffffdc
   146cc:	mov	r3, #1
   146d0:	strb	r3, [fp, #-42]	; 0xffffffd6
   146d4:	ldr	r3, [fp, #4]
   146d8:	cmp	r3, #2
   146dc:	bne	14db4 <__assert_fail@plt+0x3e98>
   146e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   146e4:	cmp	r3, #0
   146e8:	bne	1521c <__assert_fail@plt+0x4300>
   146ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146f0:	cmp	r3, #0
   146f4:	beq	14714 <__assert_fail@plt+0x37f8>
   146f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146fc:	cmp	r3, #0
   14700:	bne	14714 <__assert_fail@plt+0x37f8>
   14704:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14708:	str	r3, [fp, #-24]	; 0xffffffe8
   1470c:	mov	r3, #0
   14710:	str	r3, [fp, #-92]	; 0xffffffa4
   14714:	ldr	r2, [fp, #-20]	; 0xffffffec
   14718:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1471c:	cmp	r2, r3
   14720:	bcs	14738 <__assert_fail@plt+0x381c>
   14724:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14728:	ldr	r3, [fp, #-20]	; 0xffffffec
   1472c:	add	r3, r2, r3
   14730:	mov	r2, #39	; 0x27
   14734:	strb	r2, [r3]
   14738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1473c:	add	r3, r3, #1
   14740:	str	r3, [fp, #-20]	; 0xffffffec
   14744:	ldr	r2, [fp, #-20]	; 0xffffffec
   14748:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1474c:	cmp	r2, r3
   14750:	bcs	14768 <__assert_fail@plt+0x384c>
   14754:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14758:	ldr	r3, [fp, #-20]	; 0xffffffec
   1475c:	add	r3, r2, r3
   14760:	mov	r2, #92	; 0x5c
   14764:	strb	r2, [r3]
   14768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1476c:	add	r3, r3, #1
   14770:	str	r3, [fp, #-20]	; 0xffffffec
   14774:	ldr	r2, [fp, #-20]	; 0xffffffec
   14778:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1477c:	cmp	r2, r3
   14780:	bcs	14798 <__assert_fail@plt+0x387c>
   14784:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14788:	ldr	r3, [fp, #-20]	; 0xffffffec
   1478c:	add	r3, r2, r3
   14790:	mov	r2, #39	; 0x27
   14794:	strb	r2, [r3]
   14798:	ldr	r3, [fp, #-20]	; 0xffffffec
   1479c:	add	r3, r3, #1
   147a0:	str	r3, [fp, #-20]	; 0xffffffec
   147a4:	mov	r3, #0
   147a8:	strb	r3, [fp, #-35]	; 0xffffffdd
   147ac:	b	14db4 <__assert_fail@plt+0x3e98>
   147b0:	mov	r3, #1
   147b4:	strb	r3, [fp, #-42]	; 0xffffffd6
   147b8:	b	14dc0 <__assert_fail@plt+0x3ea4>
   147bc:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   147c0:	cmp	r3, #0
   147c4:	beq	14804 <__assert_fail@plt+0x38e8>
   147c8:	mov	r3, #1
   147cc:	str	r3, [fp, #-48]	; 0xffffffd0
   147d0:	bl	10e08 <__ctype_b_loc@plt>
   147d4:	mov	r3, r0
   147d8:	ldr	r2, [r3]
   147dc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   147e0:	lsl	r3, r3, #1
   147e4:	add	r3, r2, r3
   147e8:	ldrh	r3, [r3]
   147ec:	and	r3, r3, #16384	; 0x4000
   147f0:	cmp	r3, #0
   147f4:	movne	r3, #1
   147f8:	moveq	r3, #0
   147fc:	strb	r3, [fp, #-49]	; 0xffffffcf
   14800:	b	14a50 <__assert_fail@plt+0x3b34>
   14804:	sub	r3, fp, #76	; 0x4c
   14808:	mov	r2, #8
   1480c:	mov	r1, #0
   14810:	mov	r0, r3
   14814:	bl	10e68 <memset@plt>
   14818:	mov	r3, #0
   1481c:	str	r3, [fp, #-48]	; 0xffffffd0
   14820:	mov	r3, #1
   14824:	strb	r3, [fp, #-49]	; 0xffffffcf
   14828:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1482c:	cmn	r3, #1
   14830:	bne	14840 <__assert_fail@plt+0x3924>
   14834:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14838:	bl	10e2c <strlen@plt>
   1483c:	str	r0, [fp, #-100]	; 0xffffff9c
   14840:	ldr	r2, [fp, #-16]
   14844:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14848:	add	r3, r2, r3
   1484c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14850:	add	r1, r2, r3
   14854:	ldr	r2, [fp, #-16]
   14858:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1485c:	add	r3, r2, r3
   14860:	ldr	r2, [fp, #-100]	; 0xffffff9c
   14864:	sub	r2, r2, r3
   14868:	sub	r3, fp, #76	; 0x4c
   1486c:	sub	r0, fp, #80	; 0x50
   14870:	bl	17ef8 <__assert_fail@plt+0x6fdc>
   14874:	str	r0, [fp, #-64]	; 0xffffffc0
   14878:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1487c:	cmp	r3, #0
   14880:	beq	14a44 <__assert_fail@plt+0x3b28>
   14884:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14888:	cmn	r3, #1
   1488c:	bne	1489c <__assert_fail@plt+0x3980>
   14890:	mov	r3, #0
   14894:	strb	r3, [fp, #-49]	; 0xffffffcf
   14898:	b	14a50 <__assert_fail@plt+0x3b34>
   1489c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   148a0:	cmn	r3, #2
   148a4:	bne	148fc <__assert_fail@plt+0x39e0>
   148a8:	mov	r3, #0
   148ac:	strb	r3, [fp, #-49]	; 0xffffffcf
   148b0:	b	148c0 <__assert_fail@plt+0x39a4>
   148b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148b8:	add	r3, r3, #1
   148bc:	str	r3, [fp, #-48]	; 0xffffffd0
   148c0:	ldr	r2, [fp, #-16]
   148c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148c8:	add	r3, r2, r3
   148cc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   148d0:	cmp	r2, r3
   148d4:	bls	14a4c <__assert_fail@plt+0x3b30>
   148d8:	ldr	r2, [fp, #-16]
   148dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   148e0:	add	r3, r2, r3
   148e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   148e8:	add	r3, r2, r3
   148ec:	ldrb	r3, [r3]
   148f0:	cmp	r3, #0
   148f4:	bne	148b4 <__assert_fail@plt+0x3998>
   148f8:	b	14a4c <__assert_fail@plt+0x3b30>
   148fc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14900:	cmp	r3, #0
   14904:	beq	149f8 <__assert_fail@plt+0x3adc>
   14908:	ldr	r3, [fp, #4]
   1490c:	cmp	r3, #2
   14910:	bne	149f8 <__assert_fail@plt+0x3adc>
   14914:	mov	r3, #1
   14918:	str	r3, [fp, #-56]	; 0xffffffc8
   1491c:	b	149e8 <__assert_fail@plt+0x3acc>
   14920:	ldr	r2, [fp, #-16]
   14924:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14928:	add	r2, r2, r3
   1492c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14930:	add	r3, r2, r3
   14934:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14938:	add	r3, r2, r3
   1493c:	ldrb	r3, [r3]
   14940:	sub	r3, r3, #91	; 0x5b
   14944:	cmp	r3, #33	; 0x21
   14948:	ldrls	pc, [pc, r3, lsl #2]
   1494c:	b	149d8 <__assert_fail@plt+0x3abc>
   14950:	andeq	r5, r1, r8, lsr r2
   14954:	andeq	r5, r1, r8, lsr r2
   14958:	ldrdeq	r4, [r1], -r8
   1495c:	andeq	r5, r1, r8, lsr r2
   14960:	ldrdeq	r4, [r1], -r8
   14964:	andeq	r5, r1, r8, lsr r2
   14968:	ldrdeq	r4, [r1], -r8
   1496c:	ldrdeq	r4, [r1], -r8
   14970:	ldrdeq	r4, [r1], -r8
   14974:	ldrdeq	r4, [r1], -r8
   14978:	ldrdeq	r4, [r1], -r8
   1497c:	ldrdeq	r4, [r1], -r8
   14980:	ldrdeq	r4, [r1], -r8
   14984:	ldrdeq	r4, [r1], -r8
   14988:	ldrdeq	r4, [r1], -r8
   1498c:	ldrdeq	r4, [r1], -r8
   14990:	ldrdeq	r4, [r1], -r8
   14994:	ldrdeq	r4, [r1], -r8
   14998:	ldrdeq	r4, [r1], -r8
   1499c:	ldrdeq	r4, [r1], -r8
   149a0:	ldrdeq	r4, [r1], -r8
   149a4:	ldrdeq	r4, [r1], -r8
   149a8:	ldrdeq	r4, [r1], -r8
   149ac:	ldrdeq	r4, [r1], -r8
   149b0:	ldrdeq	r4, [r1], -r8
   149b4:	ldrdeq	r4, [r1], -r8
   149b8:	ldrdeq	r4, [r1], -r8
   149bc:	ldrdeq	r4, [r1], -r8
   149c0:	ldrdeq	r4, [r1], -r8
   149c4:	ldrdeq	r4, [r1], -r8
   149c8:	ldrdeq	r4, [r1], -r8
   149cc:	ldrdeq	r4, [r1], -r8
   149d0:	ldrdeq	r4, [r1], -r8
   149d4:	andeq	r5, r1, r8, lsr r2
   149d8:	nop	{0}
   149dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   149e0:	add	r3, r3, #1
   149e4:	str	r3, [fp, #-56]	; 0xffffffc8
   149e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149ec:	ldr	r3, [fp, #-64]	; 0xffffffc0
   149f0:	cmp	r2, r3
   149f4:	bcc	14920 <__assert_fail@plt+0x3a04>
   149f8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   149fc:	mov	r0, r3
   14a00:	bl	10d6c <iswprint@plt>
   14a04:	mov	r3, r0
   14a08:	cmp	r3, #0
   14a0c:	bne	14a18 <__assert_fail@plt+0x3afc>
   14a10:	mov	r3, #0
   14a14:	strb	r3, [fp, #-49]	; 0xffffffcf
   14a18:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14a1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14a20:	add	r3, r2, r3
   14a24:	str	r3, [fp, #-48]	; 0xffffffd0
   14a28:	sub	r3, fp, #76	; 0x4c
   14a2c:	mov	r0, r3
   14a30:	bl	10d24 <mbsinit@plt>
   14a34:	mov	r3, r0
   14a38:	cmp	r3, #0
   14a3c:	beq	14840 <__assert_fail@plt+0x3924>
   14a40:	b	14a50 <__assert_fail@plt+0x3b34>
   14a44:	nop	{0}
   14a48:	b	14a50 <__assert_fail@plt+0x3b34>
   14a4c:	nop	{0}
   14a50:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14a54:	strb	r3, [fp, #-42]	; 0xffffffd6
   14a58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a5c:	cmp	r3, #1
   14a60:	bhi	14a84 <__assert_fail@plt+0x3b68>
   14a64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14a68:	cmp	r3, #0
   14a6c:	beq	14dbc <__assert_fail@plt+0x3ea0>
   14a70:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14a74:	eor	r3, r3, #1
   14a78:	uxtb	r3, r3
   14a7c:	cmp	r3, #0
   14a80:	beq	14dbc <__assert_fail@plt+0x3ea0>
   14a84:	ldr	r2, [fp, #-16]
   14a88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14a8c:	add	r3, r2, r3
   14a90:	str	r3, [fp, #-68]	; 0xffffffbc
   14a94:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14a98:	cmp	r3, #0
   14a9c:	beq	14c50 <__assert_fail@plt+0x3d34>
   14aa0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   14aa4:	eor	r3, r3, #1
   14aa8:	uxtb	r3, r3
   14aac:	cmp	r3, #0
   14ab0:	beq	14c50 <__assert_fail@plt+0x3d34>
   14ab4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14ab8:	cmp	r3, #0
   14abc:	bne	15224 <__assert_fail@plt+0x4308>
   14ac0:	mov	r3, #1
   14ac4:	strb	r3, [fp, #-41]	; 0xffffffd7
   14ac8:	ldr	r3, [fp, #4]
   14acc:	cmp	r3, #2
   14ad0:	bne	14b80 <__assert_fail@plt+0x3c64>
   14ad4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14ad8:	eor	r3, r3, #1
   14adc:	uxtb	r3, r3
   14ae0:	cmp	r3, #0
   14ae4:	beq	14b80 <__assert_fail@plt+0x3c64>
   14ae8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14aec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14af0:	cmp	r2, r3
   14af4:	bcs	14b0c <__assert_fail@plt+0x3bf0>
   14af8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b00:	add	r3, r2, r3
   14b04:	mov	r2, #39	; 0x27
   14b08:	strb	r2, [r3]
   14b0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b10:	add	r3, r3, #1
   14b14:	str	r3, [fp, #-20]	; 0xffffffec
   14b18:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b20:	cmp	r2, r3
   14b24:	bcs	14b3c <__assert_fail@plt+0x3c20>
   14b28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b30:	add	r3, r2, r3
   14b34:	mov	r2, #36	; 0x24
   14b38:	strb	r2, [r3]
   14b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b40:	add	r3, r3, #1
   14b44:	str	r3, [fp, #-20]	; 0xffffffec
   14b48:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b4c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b50:	cmp	r2, r3
   14b54:	bcs	14b6c <__assert_fail@plt+0x3c50>
   14b58:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b60:	add	r3, r2, r3
   14b64:	mov	r2, #39	; 0x27
   14b68:	strb	r2, [r3]
   14b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b70:	add	r3, r3, #1
   14b74:	str	r3, [fp, #-20]	; 0xffffffec
   14b78:	mov	r3, #1
   14b7c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14b80:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14b88:	cmp	r2, r3
   14b8c:	bcs	14ba4 <__assert_fail@plt+0x3c88>
   14b90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14b94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b98:	add	r3, r2, r3
   14b9c:	mov	r2, #92	; 0x5c
   14ba0:	strb	r2, [r3]
   14ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ba8:	add	r3, r3, #1
   14bac:	str	r3, [fp, #-20]	; 0xffffffec
   14bb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bb8:	cmp	r2, r3
   14bbc:	bcs	14be4 <__assert_fail@plt+0x3cc8>
   14bc0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14bc4:	lsr	r3, r3, #6
   14bc8:	uxtb	r2, r3
   14bcc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bd4:	add	r3, r1, r3
   14bd8:	add	r2, r2, #48	; 0x30
   14bdc:	uxtb	r2, r2
   14be0:	strb	r2, [r3]
   14be4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14be8:	add	r3, r3, #1
   14bec:	str	r3, [fp, #-20]	; 0xffffffec
   14bf0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bf4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bf8:	cmp	r2, r3
   14bfc:	bcs	14c2c <__assert_fail@plt+0x3d10>
   14c00:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14c04:	lsr	r3, r3, #3
   14c08:	uxtb	r3, r3
   14c0c:	and	r3, r3, #7
   14c10:	uxtb	r2, r3
   14c14:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c1c:	add	r3, r1, r3
   14c20:	add	r2, r2, #48	; 0x30
   14c24:	uxtb	r2, r2
   14c28:	strb	r2, [r3]
   14c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c30:	add	r3, r3, #1
   14c34:	str	r3, [fp, #-20]	; 0xffffffec
   14c38:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14c3c:	and	r3, r3, #7
   14c40:	uxtb	r3, r3
   14c44:	add	r3, r3, #48	; 0x30
   14c48:	strb	r3, [fp, #-38]	; 0xffffffda
   14c4c:	b	14c94 <__assert_fail@plt+0x3d78>
   14c50:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14c54:	cmp	r3, #0
   14c58:	beq	14c94 <__assert_fail@plt+0x3d78>
   14c5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c64:	cmp	r2, r3
   14c68:	bcs	14c80 <__assert_fail@plt+0x3d64>
   14c6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c70:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c74:	add	r3, r2, r3
   14c78:	mov	r2, #92	; 0x5c
   14c7c:	strb	r2, [r3]
   14c80:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c84:	add	r3, r3, #1
   14c88:	str	r3, [fp, #-20]	; 0xffffffec
   14c8c:	mov	r3, #0
   14c90:	strb	r3, [fp, #-40]	; 0xffffffd8
   14c94:	ldr	r3, [fp, #-16]
   14c98:	add	r3, r3, #1
   14c9c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14ca0:	cmp	r2, r3
   14ca4:	bls	14d84 <__assert_fail@plt+0x3e68>
   14ca8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14cac:	cmp	r3, #0
   14cb0:	beq	14d30 <__assert_fail@plt+0x3e14>
   14cb4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14cb8:	eor	r3, r3, #1
   14cbc:	uxtb	r3, r3
   14cc0:	cmp	r3, #0
   14cc4:	beq	14d30 <__assert_fail@plt+0x3e14>
   14cc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ccc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14cd0:	cmp	r2, r3
   14cd4:	bcs	14cec <__assert_fail@plt+0x3dd0>
   14cd8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ce0:	add	r3, r2, r3
   14ce4:	mov	r2, #39	; 0x27
   14ce8:	strb	r2, [r3]
   14cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cf0:	add	r3, r3, #1
   14cf4:	str	r3, [fp, #-20]	; 0xffffffec
   14cf8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d00:	cmp	r2, r3
   14d04:	bcs	14d1c <__assert_fail@plt+0x3e00>
   14d08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d10:	add	r3, r2, r3
   14d14:	mov	r2, #39	; 0x27
   14d18:	strb	r2, [r3]
   14d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d20:	add	r3, r3, #1
   14d24:	str	r3, [fp, #-20]	; 0xffffffec
   14d28:	mov	r3, #0
   14d2c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14d30:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d38:	cmp	r2, r3
   14d3c:	bcs	14d54 <__assert_fail@plt+0x3e38>
   14d40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d44:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d48:	add	r3, r2, r3
   14d4c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14d50:	strb	r2, [r3]
   14d54:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d58:	add	r3, r3, #1
   14d5c:	str	r3, [fp, #-20]	; 0xffffffec
   14d60:	ldr	r3, [fp, #-16]
   14d64:	add	r3, r3, #1
   14d68:	str	r3, [fp, #-16]
   14d6c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14d70:	ldr	r3, [fp, #-16]
   14d74:	add	r3, r2, r3
   14d78:	ldrb	r3, [r3]
   14d7c:	strb	r3, [fp, #-38]	; 0xffffffda
   14d80:	b	14a94 <__assert_fail@plt+0x3b78>
   14d84:	nop	{0}
   14d88:	b	14f60 <__assert_fail@plt+0x4044>
   14d8c:	nop	{0}
   14d90:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14d94:	nop	{0}
   14d98:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14d9c:	nop	{0}
   14da0:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14da4:	nop	{0}
   14da8:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14dac:	nop	{0}
   14db0:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14db4:	nop	{0}
   14db8:	b	14dc0 <__assert_fail@plt+0x3ea4>
   14dbc:	nop	{0}
   14dc0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14dc4:	eor	r3, r3, #1
   14dc8:	uxtb	r3, r3
   14dcc:	cmp	r3, #0
   14dd0:	bne	14de0 <__assert_fail@plt+0x3ec4>
   14dd4:	ldr	r3, [fp, #4]
   14dd8:	cmp	r3, #2
   14ddc:	bne	14df4 <__assert_fail@plt+0x3ed8>
   14de0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14de4:	eor	r3, r3, #1
   14de8:	uxtb	r3, r3
   14dec:	cmp	r3, #0
   14df0:	bne	14e34 <__assert_fail@plt+0x3f18>
   14df4:	ldr	r3, [fp, #12]
   14df8:	cmp	r3, #0
   14dfc:	beq	14e34 <__assert_fail@plt+0x3f18>
   14e00:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14e04:	lsr	r3, r3, #5
   14e08:	uxtb	r3, r3
   14e0c:	lsl	r3, r3, #2
   14e10:	ldr	r2, [fp, #12]
   14e14:	add	r3, r2, r3
   14e18:	ldr	r2, [r3]
   14e1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14e20:	and	r3, r3, #31
   14e24:	lsr	r3, r2, r3
   14e28:	and	r3, r3, #1
   14e2c:	cmp	r3, #0
   14e30:	bne	14e48 <__assert_fail@plt+0x3f2c>
   14e34:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14e38:	eor	r3, r3, #1
   14e3c:	uxtb	r3, r3
   14e40:	cmp	r3, #0
   14e44:	bne	14f5c <__assert_fail@plt+0x4040>
   14e48:	nop	{0}
   14e4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e50:	cmp	r3, #0
   14e54:	bne	1522c <__assert_fail@plt+0x4310>
   14e58:	mov	r3, #1
   14e5c:	strb	r3, [fp, #-41]	; 0xffffffd7
   14e60:	ldr	r3, [fp, #4]
   14e64:	cmp	r3, #2
   14e68:	bne	14f18 <__assert_fail@plt+0x3ffc>
   14e6c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14e70:	eor	r3, r3, #1
   14e74:	uxtb	r3, r3
   14e78:	cmp	r3, #0
   14e7c:	beq	14f18 <__assert_fail@plt+0x3ffc>
   14e80:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e88:	cmp	r2, r3
   14e8c:	bcs	14ea4 <__assert_fail@plt+0x3f88>
   14e90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14e94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e98:	add	r3, r2, r3
   14e9c:	mov	r2, #39	; 0x27
   14ea0:	strb	r2, [r3]
   14ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ea8:	add	r3, r3, #1
   14eac:	str	r3, [fp, #-20]	; 0xffffffec
   14eb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14eb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14eb8:	cmp	r2, r3
   14ebc:	bcs	14ed4 <__assert_fail@plt+0x3fb8>
   14ec0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ec4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ec8:	add	r3, r2, r3
   14ecc:	mov	r2, #36	; 0x24
   14ed0:	strb	r2, [r3]
   14ed4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ed8:	add	r3, r3, #1
   14edc:	str	r3, [fp, #-20]	; 0xffffffec
   14ee0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ee4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ee8:	cmp	r2, r3
   14eec:	bcs	14f04 <__assert_fail@plt+0x3fe8>
   14ef0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ef4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ef8:	add	r3, r2, r3
   14efc:	mov	r2, #39	; 0x27
   14f00:	strb	r2, [r3]
   14f04:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f08:	add	r3, r3, #1
   14f0c:	str	r3, [fp, #-20]	; 0xffffffec
   14f10:	mov	r3, #1
   14f14:	strb	r3, [fp, #-35]	; 0xffffffdd
   14f18:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f20:	cmp	r2, r3
   14f24:	bcs	14f3c <__assert_fail@plt+0x4020>
   14f28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f30:	add	r3, r2, r3
   14f34:	mov	r2, #92	; 0x5c
   14f38:	strb	r2, [r3]
   14f3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f40:	add	r3, r3, #1
   14f44:	str	r3, [fp, #-20]	; 0xffffffec
   14f48:	b	14f60 <__assert_fail@plt+0x4044>
   14f4c:	nop	{0}
   14f50:	b	14f60 <__assert_fail@plt+0x4044>
   14f54:	nop	{0}
   14f58:	b	14f60 <__assert_fail@plt+0x4044>
   14f5c:	nop	{0}
   14f60:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14f64:	cmp	r3, #0
   14f68:	beq	14fe8 <__assert_fail@plt+0x40cc>
   14f6c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   14f70:	eor	r3, r3, #1
   14f74:	uxtb	r3, r3
   14f78:	cmp	r3, #0
   14f7c:	beq	14fe8 <__assert_fail@plt+0x40cc>
   14f80:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f88:	cmp	r2, r3
   14f8c:	bcs	14fa4 <__assert_fail@plt+0x4088>
   14f90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f98:	add	r3, r2, r3
   14f9c:	mov	r2, #39	; 0x27
   14fa0:	strb	r2, [r3]
   14fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fa8:	add	r3, r3, #1
   14fac:	str	r3, [fp, #-20]	; 0xffffffec
   14fb0:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fb4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14fb8:	cmp	r2, r3
   14fbc:	bcs	14fd4 <__assert_fail@plt+0x40b8>
   14fc0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc8:	add	r3, r2, r3
   14fcc:	mov	r2, #39	; 0x27
   14fd0:	strb	r2, [r3]
   14fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fd8:	add	r3, r3, #1
   14fdc:	str	r3, [fp, #-20]	; 0xffffffec
   14fe0:	mov	r3, #0
   14fe4:	strb	r3, [fp, #-35]	; 0xffffffdd
   14fe8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14fec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ff0:	cmp	r2, r3
   14ff4:	bcs	1500c <__assert_fail@plt+0x40f0>
   14ff8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ffc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15000:	add	r3, r2, r3
   15004:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15008:	strb	r2, [r3]
   1500c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15010:	add	r3, r3, #1
   15014:	str	r3, [fp, #-20]	; 0xffffffec
   15018:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1501c:	eor	r3, r3, #1
   15020:	uxtb	r3, r3
   15024:	cmp	r3, #0
   15028:	beq	15034 <__assert_fail@plt+0x4118>
   1502c:	mov	r3, #0
   15030:	strb	r3, [fp, #-37]	; 0xffffffdb
   15034:	ldr	r3, [fp, #-16]
   15038:	add	r3, r3, #1
   1503c:	str	r3, [fp, #-16]
   15040:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15044:	cmn	r3, #1
   15048:	bne	15070 <__assert_fail@plt+0x4154>
   1504c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15050:	ldr	r3, [fp, #-16]
   15054:	add	r3, r2, r3
   15058:	ldrb	r3, [r3]
   1505c:	cmp	r3, #0
   15060:	movne	r3, #1
   15064:	moveq	r3, #0
   15068:	uxtb	r3, r3
   1506c:	b	15088 <__assert_fail@plt+0x416c>
   15070:	ldr	r2, [fp, #-16]
   15074:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15078:	cmp	r2, r3
   1507c:	movne	r3, #1
   15080:	moveq	r3, #0
   15084:	uxtb	r3, r3
   15088:	cmp	r3, #0
   1508c:	bne	13ea8 <__assert_fail@plt+0x2f8c>
   15090:	ldr	r3, [fp, #-20]	; 0xffffffec
   15094:	cmp	r3, #0
   15098:	bne	150b4 <__assert_fail@plt+0x4198>
   1509c:	ldr	r3, [fp, #4]
   150a0:	cmp	r3, #2
   150a4:	bne	150b4 <__assert_fail@plt+0x4198>
   150a8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   150ac:	cmp	r3, #0
   150b0:	bne	15234 <__assert_fail@plt+0x4318>
   150b4:	ldr	r3, [fp, #4]
   150b8:	cmp	r3, #2
   150bc:	bne	1515c <__assert_fail@plt+0x4240>
   150c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   150c4:	eor	r3, r3, #1
   150c8:	uxtb	r3, r3
   150cc:	cmp	r3, #0
   150d0:	beq	1515c <__assert_fail@plt+0x4240>
   150d4:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   150d8:	cmp	r3, #0
   150dc:	beq	1515c <__assert_fail@plt+0x4240>
   150e0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   150e4:	cmp	r3, #0
   150e8:	beq	15130 <__assert_fail@plt+0x4214>
   150ec:	ldr	r3, [fp, #20]
   150f0:	str	r3, [sp, #16]
   150f4:	ldr	r3, [fp, #16]
   150f8:	str	r3, [sp, #12]
   150fc:	ldr	r3, [fp, #12]
   15100:	str	r3, [sp, #8]
   15104:	ldr	r3, [fp, #8]
   15108:	str	r3, [sp, #4]
   1510c:	mov	r3, #5
   15110:	str	r3, [sp]
   15114:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15118:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1511c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15120:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15124:	bl	13be0 <__assert_fail@plt+0x2cc4>
   15128:	mov	r3, r0
   1512c:	b	1529c <__assert_fail@plt+0x4380>
   15130:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15134:	cmp	r3, #0
   15138:	bne	1515c <__assert_fail@plt+0x4240>
   1513c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15140:	cmp	r3, #0
   15144:	beq	1515c <__assert_fail@plt+0x4240>
   15148:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1514c:	str	r3, [fp, #-92]	; 0xffffffa4
   15150:	mov	r3, #0
   15154:	str	r3, [fp, #-20]	; 0xffffffec
   15158:	b	13c74 <__assert_fail@plt+0x2d58>
   1515c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15160:	cmp	r3, #0
   15164:	beq	151d0 <__assert_fail@plt+0x42b4>
   15168:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1516c:	eor	r3, r3, #1
   15170:	uxtb	r3, r3
   15174:	cmp	r3, #0
   15178:	beq	151d0 <__assert_fail@plt+0x42b4>
   1517c:	b	151c0 <__assert_fail@plt+0x42a4>
   15180:	ldr	r2, [fp, #-20]	; 0xffffffec
   15184:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15188:	cmp	r2, r3
   1518c:	bcs	151a8 <__assert_fail@plt+0x428c>
   15190:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15194:	ldr	r3, [fp, #-20]	; 0xffffffec
   15198:	add	r3, r2, r3
   1519c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   151a0:	ldrb	r2, [r2]
   151a4:	strb	r2, [r3]
   151a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   151ac:	add	r3, r3, #1
   151b0:	str	r3, [fp, #-20]	; 0xffffffec
   151b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151b8:	add	r3, r3, #1
   151bc:	str	r3, [fp, #-28]	; 0xffffffe4
   151c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151c4:	ldrb	r3, [r3]
   151c8:	cmp	r3, #0
   151cc:	bne	15180 <__assert_fail@plt+0x4264>
   151d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   151d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   151d8:	cmp	r2, r3
   151dc:	bcs	151f4 <__assert_fail@plt+0x42d8>
   151e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   151e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151e8:	add	r3, r2, r3
   151ec:	mov	r2, #0
   151f0:	strb	r2, [r3]
   151f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   151f8:	b	1529c <__assert_fail@plt+0x4380>
   151fc:	nop	{0}
   15200:	b	15238 <__assert_fail@plt+0x431c>
   15204:	nop	{0}
   15208:	b	15238 <__assert_fail@plt+0x431c>
   1520c:	nop	{0}
   15210:	b	15238 <__assert_fail@plt+0x431c>
   15214:	nop	{0}
   15218:	b	15238 <__assert_fail@plt+0x431c>
   1521c:	nop	{0}
   15220:	b	15238 <__assert_fail@plt+0x431c>
   15224:	nop	{0}
   15228:	b	15238 <__assert_fail@plt+0x431c>
   1522c:	nop	{0}
   15230:	b	15238 <__assert_fail@plt+0x431c>
   15234:	nop	{0}
   15238:	ldr	r3, [fp, #4]
   1523c:	cmp	r3, #2
   15240:	bne	15258 <__assert_fail@plt+0x433c>
   15244:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15248:	cmp	r3, #0
   1524c:	beq	15258 <__assert_fail@plt+0x433c>
   15250:	mov	r3, #4
   15254:	str	r3, [fp, #4]
   15258:	ldr	r3, [fp, #8]
   1525c:	bic	r3, r3, #2
   15260:	ldr	r2, [fp, #20]
   15264:	str	r2, [sp, #16]
   15268:	ldr	r2, [fp, #16]
   1526c:	str	r2, [sp, #12]
   15270:	mov	r2, #0
   15274:	str	r2, [sp, #8]
   15278:	str	r3, [sp, #4]
   1527c:	ldr	r3, [fp, #4]
   15280:	str	r3, [sp]
   15284:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15288:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1528c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15290:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15294:	bl	13be0 <__assert_fail@plt+0x2cc4>
   15298:	mov	r3, r0
   1529c:	mov	r0, r3
   152a0:	sub	sp, fp, #8
   152a4:	ldr	r4, [sp]
   152a8:	ldr	fp, [sp, #4]
   152ac:	add	sp, sp, #8
   152b0:	pop	{pc}		; (ldr pc, [sp], #4)
   152b4:	str	fp, [sp, #-8]!
   152b8:	str	lr, [sp, #4]
   152bc:	add	fp, sp, #4
   152c0:	sub	sp, sp, #56	; 0x38
   152c4:	str	r0, [fp, #-24]	; 0xffffffe8
   152c8:	str	r1, [fp, #-28]	; 0xffffffe4
   152cc:	str	r2, [fp, #-32]	; 0xffffffe0
   152d0:	str	r3, [fp, #-36]	; 0xffffffdc
   152d4:	ldr	r3, [fp, #4]
   152d8:	cmp	r3, #0
   152dc:	beq	152e8 <__assert_fail@plt+0x43cc>
   152e0:	ldr	r3, [fp, #4]
   152e4:	b	152f0 <__assert_fail@plt+0x43d4>
   152e8:	movw	r3, #41324	; 0xa16c
   152ec:	movt	r3, #2
   152f0:	str	r3, [fp, #-8]
   152f4:	bl	10e50 <__errno_location@plt>
   152f8:	mov	r3, r0
   152fc:	ldr	r3, [r3]
   15300:	str	r3, [fp, #-12]
   15304:	ldr	r3, [fp, #-8]
   15308:	ldr	r3, [r3]
   1530c:	ldr	r2, [fp, #-8]
   15310:	ldr	r2, [r2, #4]
   15314:	ldr	r1, [fp, #-8]
   15318:	add	r1, r1, #8
   1531c:	ldr	r0, [fp, #-8]
   15320:	ldr	r0, [r0, #40]	; 0x28
   15324:	ldr	ip, [fp, #-8]
   15328:	ldr	ip, [ip, #44]	; 0x2c
   1532c:	str	ip, [sp, #16]
   15330:	str	r0, [sp, #12]
   15334:	str	r1, [sp, #8]
   15338:	str	r2, [sp, #4]
   1533c:	str	r3, [sp]
   15340:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15344:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15348:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1534c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15350:	bl	13be0 <__assert_fail@plt+0x2cc4>
   15354:	str	r0, [fp, #-16]
   15358:	bl	10e50 <__errno_location@plt>
   1535c:	mov	r2, r0
   15360:	ldr	r3, [fp, #-12]
   15364:	str	r3, [r2]
   15368:	ldr	r3, [fp, #-16]
   1536c:	mov	r0, r3
   15370:	sub	sp, fp, #4
   15374:	ldr	fp, [sp]
   15378:	add	sp, sp, #4
   1537c:	pop	{pc}		; (ldr pc, [sp], #4)
   15380:	str	fp, [sp, #-8]!
   15384:	str	lr, [sp, #4]
   15388:	add	fp, sp, #4
   1538c:	sub	sp, sp, #16
   15390:	str	r0, [fp, #-8]
   15394:	str	r1, [fp, #-12]
   15398:	str	r2, [fp, #-16]
   1539c:	ldr	r3, [fp, #-16]
   153a0:	mov	r2, #0
   153a4:	ldr	r1, [fp, #-12]
   153a8:	ldr	r0, [fp, #-8]
   153ac:	bl	153c8 <__assert_fail@plt+0x44ac>
   153b0:	mov	r3, r0
   153b4:	mov	r0, r3
   153b8:	sub	sp, fp, #4
   153bc:	ldr	fp, [sp]
   153c0:	add	sp, sp, #4
   153c4:	pop	{pc}		; (ldr pc, [sp], #4)
   153c8:	str	fp, [sp, #-8]!
   153cc:	str	lr, [sp, #4]
   153d0:	add	fp, sp, #4
   153d4:	sub	sp, sp, #64	; 0x40
   153d8:	str	r0, [fp, #-32]	; 0xffffffe0
   153dc:	str	r1, [fp, #-36]	; 0xffffffdc
   153e0:	str	r2, [fp, #-40]	; 0xffffffd8
   153e4:	str	r3, [fp, #-44]	; 0xffffffd4
   153e8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153ec:	cmp	r3, #0
   153f0:	beq	153fc <__assert_fail@plt+0x44e0>
   153f4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   153f8:	b	15404 <__assert_fail@plt+0x44e8>
   153fc:	movw	r3, #41324	; 0xa16c
   15400:	movt	r3, #2
   15404:	str	r3, [fp, #-8]
   15408:	bl	10e50 <__errno_location@plt>
   1540c:	mov	r3, r0
   15410:	ldr	r3, [r3]
   15414:	str	r3, [fp, #-12]
   15418:	ldr	r3, [fp, #-8]
   1541c:	ldr	r3, [r3, #4]
   15420:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15424:	cmp	r2, #0
   15428:	moveq	r2, #1
   1542c:	movne	r2, #0
   15430:	uxtb	r2, r2
   15434:	orr	r3, r3, r2
   15438:	str	r3, [fp, #-16]
   1543c:	ldr	r3, [fp, #-8]
   15440:	ldr	r3, [r3]
   15444:	ldr	r2, [fp, #-8]
   15448:	add	r2, r2, #8
   1544c:	ldr	r1, [fp, #-8]
   15450:	ldr	r1, [r1, #40]	; 0x28
   15454:	ldr	r0, [fp, #-8]
   15458:	ldr	r0, [r0, #44]	; 0x2c
   1545c:	str	r0, [sp, #16]
   15460:	str	r1, [sp, #12]
   15464:	str	r2, [sp, #8]
   15468:	ldr	r2, [fp, #-16]
   1546c:	str	r2, [sp, #4]
   15470:	str	r3, [sp]
   15474:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15478:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1547c:	mov	r1, #0
   15480:	mov	r0, #0
   15484:	bl	13be0 <__assert_fail@plt+0x2cc4>
   15488:	mov	r3, r0
   1548c:	add	r3, r3, #1
   15490:	str	r3, [fp, #-20]	; 0xffffffec
   15494:	ldr	r0, [fp, #-20]	; 0xffffffec
   15498:	bl	1697c <__assert_fail@plt+0x5a60>
   1549c:	mov	r3, r0
   154a0:	str	r3, [fp, #-24]	; 0xffffffe8
   154a4:	ldr	r3, [fp, #-8]
   154a8:	ldr	r3, [r3]
   154ac:	ldr	r2, [fp, #-8]
   154b0:	add	r2, r2, #8
   154b4:	ldr	r1, [fp, #-8]
   154b8:	ldr	r1, [r1, #40]	; 0x28
   154bc:	ldr	r0, [fp, #-8]
   154c0:	ldr	r0, [r0, #44]	; 0x2c
   154c4:	str	r0, [sp, #16]
   154c8:	str	r1, [sp, #12]
   154cc:	str	r2, [sp, #8]
   154d0:	ldr	r2, [fp, #-16]
   154d4:	str	r2, [sp, #4]
   154d8:	str	r3, [sp]
   154dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   154e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   154e4:	ldr	r1, [fp, #-20]	; 0xffffffec
   154e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154ec:	bl	13be0 <__assert_fail@plt+0x2cc4>
   154f0:	bl	10e50 <__errno_location@plt>
   154f4:	mov	r2, r0
   154f8:	ldr	r3, [fp, #-12]
   154fc:	str	r3, [r2]
   15500:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15504:	cmp	r3, #0
   15508:	beq	1551c <__assert_fail@plt+0x4600>
   1550c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15510:	sub	r2, r3, #1
   15514:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15518:	str	r2, [r3]
   1551c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15520:	mov	r0, r3
   15524:	sub	sp, fp, #4
   15528:	ldr	fp, [sp]
   1552c:	add	sp, sp, #4
   15530:	pop	{pc}		; (ldr pc, [sp], #4)
   15534:	str	fp, [sp, #-8]!
   15538:	str	lr, [sp, #4]
   1553c:	add	fp, sp, #4
   15540:	sub	sp, sp, #8
   15544:	movw	r3, #41216	; 0xa100
   15548:	movt	r3, #2
   1554c:	ldr	r3, [r3]
   15550:	str	r3, [fp, #-12]
   15554:	mov	r3, #1
   15558:	str	r3, [fp, #-8]
   1555c:	b	15588 <__assert_fail@plt+0x466c>
   15560:	ldr	r3, [fp, #-8]
   15564:	lsl	r3, r3, #3
   15568:	ldr	r2, [fp, #-12]
   1556c:	add	r3, r2, r3
   15570:	ldr	r3, [r3, #4]
   15574:	mov	r0, r3
   15578:	bl	13360 <__assert_fail@plt+0x2444>
   1557c:	ldr	r3, [fp, #-8]
   15580:	add	r3, r3, #1
   15584:	str	r3, [fp, #-8]
   15588:	movw	r3, #41204	; 0xa0f4
   1558c:	movt	r3, #2
   15590:	ldr	r3, [r3]
   15594:	ldr	r2, [fp, #-8]
   15598:	cmp	r2, r3
   1559c:	blt	15560 <__assert_fail@plt+0x4644>
   155a0:	ldr	r3, [fp, #-12]
   155a4:	ldr	r2, [r3, #4]
   155a8:	movw	r3, #41372	; 0xa19c
   155ac:	movt	r3, #2
   155b0:	cmp	r2, r3
   155b4:	beq	155ec <__assert_fail@plt+0x46d0>
   155b8:	ldr	r3, [fp, #-12]
   155bc:	ldr	r3, [r3, #4]
   155c0:	mov	r0, r3
   155c4:	bl	13360 <__assert_fail@plt+0x2444>
   155c8:	movw	r3, #41208	; 0xa0f8
   155cc:	movt	r3, #2
   155d0:	mov	r2, #256	; 0x100
   155d4:	str	r2, [r3]
   155d8:	movw	r3, #41208	; 0xa0f8
   155dc:	movt	r3, #2
   155e0:	movw	r2, #41372	; 0xa19c
   155e4:	movt	r2, #2
   155e8:	str	r2, [r3, #4]
   155ec:	ldr	r2, [fp, #-12]
   155f0:	movw	r3, #41208	; 0xa0f8
   155f4:	movt	r3, #2
   155f8:	cmp	r2, r3
   155fc:	beq	1561c <__assert_fail@plt+0x4700>
   15600:	ldr	r0, [fp, #-12]
   15604:	bl	13360 <__assert_fail@plt+0x2444>
   15608:	movw	r3, #41216	; 0xa100
   1560c:	movt	r3, #2
   15610:	movw	r2, #41208	; 0xa0f8
   15614:	movt	r2, #2
   15618:	str	r2, [r3]
   1561c:	movw	r3, #41204	; 0xa0f4
   15620:	movt	r3, #2
   15624:	mov	r2, #1
   15628:	str	r2, [r3]
   1562c:	nop	{0}
   15630:	sub	sp, fp, #4
   15634:	ldr	fp, [sp]
   15638:	add	sp, sp, #4
   1563c:	pop	{pc}		; (ldr pc, [sp], #4)
   15640:	str	fp, [sp, #-8]!
   15644:	str	lr, [sp, #4]
   15648:	add	fp, sp, #4
   1564c:	sub	sp, sp, #80	; 0x50
   15650:	str	r0, [fp, #-48]	; 0xffffffd0
   15654:	str	r1, [fp, #-52]	; 0xffffffcc
   15658:	str	r2, [fp, #-56]	; 0xffffffc8
   1565c:	str	r3, [fp, #-60]	; 0xffffffc4
   15660:	bl	10e50 <__errno_location@plt>
   15664:	mov	r3, r0
   15668:	ldr	r3, [r3]
   1566c:	str	r3, [fp, #-16]
   15670:	movw	r3, #41216	; 0xa100
   15674:	movt	r3, #2
   15678:	ldr	r3, [r3]
   1567c:	str	r3, [fp, #-8]
   15680:	mvn	r3, #-2147483648	; 0x80000000
   15684:	str	r3, [fp, #-20]	; 0xffffffec
   15688:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1568c:	cmp	r3, #0
   15690:	blt	156a4 <__assert_fail@plt+0x4788>
   15694:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1569c:	cmp	r2, r3
   156a0:	blt	156a8 <__assert_fail@plt+0x478c>
   156a4:	bl	10f04 <abort@plt>
   156a8:	movw	r3, #41204	; 0xa0f4
   156ac:	movt	r3, #2
   156b0:	ldr	r3, [r3]
   156b4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   156b8:	cmp	r2, r3
   156bc:	blt	157b4 <__assert_fail@plt+0x4898>
   156c0:	ldr	r2, [fp, #-8]
   156c4:	movw	r3, #41208	; 0xa0f8
   156c8:	movt	r3, #2
   156cc:	cmp	r2, r3
   156d0:	moveq	r3, #1
   156d4:	movne	r3, #0
   156d8:	strb	r3, [fp, #-21]	; 0xffffffeb
   156dc:	movw	r3, #41204	; 0xa0f4
   156e0:	movt	r3, #2
   156e4:	ldr	r3, [r3]
   156e8:	str	r3, [fp, #-40]	; 0xffffffd8
   156ec:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   156f0:	cmp	r3, #0
   156f4:	beq	15700 <__assert_fail@plt+0x47e4>
   156f8:	mov	r0, #0
   156fc:	b	15704 <__assert_fail@plt+0x47e8>
   15700:	ldr	r0, [fp, #-8]
   15704:	movw	r3, #41204	; 0xa0f4
   15708:	movt	r3, #2
   1570c:	ldr	r3, [r3]
   15710:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15714:	sub	r3, r2, r3
   15718:	add	r2, r3, #1
   1571c:	sub	r1, fp, #40	; 0x28
   15720:	mov	r3, #8
   15724:	str	r3, [sp]
   15728:	ldr	r3, [fp, #-20]	; 0xffffffec
   1572c:	bl	16cdc <__assert_fail@plt+0x5dc0>
   15730:	str	r0, [fp, #-8]
   15734:	movw	r3, #41216	; 0xa100
   15738:	movt	r3, #2
   1573c:	ldr	r2, [fp, #-8]
   15740:	str	r2, [r3]
   15744:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15748:	cmp	r3, #0
   1574c:	beq	15768 <__assert_fail@plt+0x484c>
   15750:	ldr	r2, [fp, #-8]
   15754:	movw	r3, #41208	; 0xa0f8
   15758:	movt	r3, #2
   1575c:	mov	r1, r2
   15760:	ldrd	r2, [r3]
   15764:	strd	r2, [r1]
   15768:	movw	r3, #41204	; 0xa0f4
   1576c:	movt	r3, #2
   15770:	ldr	r3, [r3]
   15774:	lsl	r3, r3, #3
   15778:	ldr	r2, [fp, #-8]
   1577c:	add	r0, r2, r3
   15780:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15784:	movw	r3, #41204	; 0xa0f4
   15788:	movt	r3, #2
   1578c:	ldr	r3, [r3]
   15790:	sub	r3, r2, r3
   15794:	lsl	r3, r3, #3
   15798:	mov	r2, r3
   1579c:	mov	r1, #0
   157a0:	bl	10e68 <memset@plt>
   157a4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   157a8:	movw	r3, #41204	; 0xa0f4
   157ac:	movt	r3, #2
   157b0:	str	r2, [r3]
   157b4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   157b8:	lsl	r3, r3, #3
   157bc:	ldr	r2, [fp, #-8]
   157c0:	add	r3, r2, r3
   157c4:	ldr	r3, [r3]
   157c8:	str	r3, [fp, #-28]	; 0xffffffe4
   157cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   157d0:	lsl	r3, r3, #3
   157d4:	ldr	r2, [fp, #-8]
   157d8:	add	r3, r2, r3
   157dc:	ldr	r3, [r3, #4]
   157e0:	str	r3, [fp, #-12]
   157e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   157e8:	ldr	r3, [r3, #4]
   157ec:	orr	r3, r3, #1
   157f0:	str	r3, [fp, #-32]	; 0xffffffe0
   157f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   157f8:	ldr	r3, [r3]
   157fc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15800:	add	r2, r2, #8
   15804:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15808:	ldr	r1, [r1, #40]	; 0x28
   1580c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15810:	ldr	r0, [r0, #44]	; 0x2c
   15814:	str	r0, [sp, #16]
   15818:	str	r1, [sp, #12]
   1581c:	str	r2, [sp, #8]
   15820:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15824:	str	r2, [sp, #4]
   15828:	str	r3, [sp]
   1582c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15830:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15834:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15838:	ldr	r0, [fp, #-12]
   1583c:	bl	13be0 <__assert_fail@plt+0x2cc4>
   15840:	str	r0, [fp, #-36]	; 0xffffffdc
   15844:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15848:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1584c:	cmp	r2, r3
   15850:	bhi	15908 <__assert_fail@plt+0x49ec>
   15854:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15858:	add	r3, r3, #1
   1585c:	str	r3, [fp, #-28]	; 0xffffffe4
   15860:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15864:	lsl	r3, r3, #3
   15868:	ldr	r2, [fp, #-8]
   1586c:	add	r3, r2, r3
   15870:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15874:	str	r2, [r3]
   15878:	ldr	r2, [fp, #-12]
   1587c:	movw	r3, #41372	; 0xa19c
   15880:	movt	r3, #2
   15884:	cmp	r2, r3
   15888:	beq	15894 <__assert_fail@plt+0x4978>
   1588c:	ldr	r0, [fp, #-12]
   15890:	bl	13360 <__assert_fail@plt+0x2444>
   15894:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15898:	bl	1697c <__assert_fail@plt+0x5a60>
   1589c:	mov	r3, r0
   158a0:	str	r3, [fp, #-12]
   158a4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   158a8:	lsl	r3, r3, #3
   158ac:	ldr	r2, [fp, #-8]
   158b0:	add	r3, r2, r3
   158b4:	ldr	r2, [fp, #-12]
   158b8:	str	r2, [r3, #4]
   158bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   158c0:	ldr	r3, [r3]
   158c4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   158c8:	add	r2, r2, #8
   158cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   158d0:	ldr	r1, [r1, #40]	; 0x28
   158d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   158d8:	ldr	r0, [r0, #44]	; 0x2c
   158dc:	str	r0, [sp, #16]
   158e0:	str	r1, [sp, #12]
   158e4:	str	r2, [sp, #8]
   158e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158ec:	str	r2, [sp, #4]
   158f0:	str	r3, [sp]
   158f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   158f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   158fc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15900:	ldr	r0, [fp, #-12]
   15904:	bl	13be0 <__assert_fail@plt+0x2cc4>
   15908:	bl	10e50 <__errno_location@plt>
   1590c:	mov	r2, r0
   15910:	ldr	r3, [fp, #-16]
   15914:	str	r3, [r2]
   15918:	ldr	r3, [fp, #-12]
   1591c:	mov	r0, r3
   15920:	sub	sp, fp, #4
   15924:	ldr	fp, [sp]
   15928:	add	sp, sp, #4
   1592c:	pop	{pc}		; (ldr pc, [sp], #4)
   15930:	str	fp, [sp, #-8]!
   15934:	str	lr, [sp, #4]
   15938:	add	fp, sp, #4
   1593c:	sub	sp, sp, #8
   15940:	str	r0, [fp, #-8]
   15944:	str	r1, [fp, #-12]
   15948:	movw	r3, #41324	; 0xa16c
   1594c:	movt	r3, #2
   15950:	mvn	r2, #0
   15954:	ldr	r1, [fp, #-12]
   15958:	ldr	r0, [fp, #-8]
   1595c:	bl	15640 <__assert_fail@plt+0x4724>
   15960:	mov	r3, r0
   15964:	mov	r0, r3
   15968:	sub	sp, fp, #4
   1596c:	ldr	fp, [sp]
   15970:	add	sp, sp, #4
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	str	fp, [sp, #-8]!
   1597c:	str	lr, [sp, #4]
   15980:	add	fp, sp, #4
   15984:	sub	sp, sp, #16
   15988:	str	r0, [fp, #-8]
   1598c:	str	r1, [fp, #-12]
   15990:	str	r2, [fp, #-16]
   15994:	movw	r3, #41324	; 0xa16c
   15998:	movt	r3, #2
   1599c:	ldr	r2, [fp, #-16]
   159a0:	ldr	r1, [fp, #-12]
   159a4:	ldr	r0, [fp, #-8]
   159a8:	bl	15640 <__assert_fail@plt+0x4724>
   159ac:	mov	r3, r0
   159b0:	mov	r0, r3
   159b4:	sub	sp, fp, #4
   159b8:	ldr	fp, [sp]
   159bc:	add	sp, sp, #4
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	str	fp, [sp, #-8]!
   159c8:	str	lr, [sp, #4]
   159cc:	add	fp, sp, #4
   159d0:	sub	sp, sp, #8
   159d4:	str	r0, [fp, #-8]
   159d8:	ldr	r1, [fp, #-8]
   159dc:	mov	r0, #0
   159e0:	bl	15930 <__assert_fail@plt+0x4a14>
   159e4:	mov	r3, r0
   159e8:	mov	r0, r3
   159ec:	sub	sp, fp, #4
   159f0:	ldr	fp, [sp]
   159f4:	add	sp, sp, #4
   159f8:	pop	{pc}		; (ldr pc, [sp], #4)
   159fc:	str	fp, [sp, #-8]!
   15a00:	str	lr, [sp, #4]
   15a04:	add	fp, sp, #4
   15a08:	sub	sp, sp, #8
   15a0c:	str	r0, [fp, #-8]
   15a10:	str	r1, [fp, #-12]
   15a14:	ldr	r2, [fp, #-12]
   15a18:	ldr	r1, [fp, #-8]
   15a1c:	mov	r0, #0
   15a20:	bl	15978 <__assert_fail@plt+0x4a5c>
   15a24:	mov	r3, r0
   15a28:	mov	r0, r3
   15a2c:	sub	sp, fp, #4
   15a30:	ldr	fp, [sp]
   15a34:	add	sp, sp, #4
   15a38:	pop	{pc}		; (ldr pc, [sp], #4)
   15a3c:	str	fp, [sp, #-8]!
   15a40:	str	lr, [sp, #4]
   15a44:	add	fp, sp, #4
   15a48:	sub	sp, sp, #64	; 0x40
   15a4c:	str	r0, [fp, #-56]	; 0xffffffc8
   15a50:	str	r1, [fp, #-60]	; 0xffffffc4
   15a54:	str	r2, [fp, #-64]	; 0xffffffc0
   15a58:	sub	r3, fp, #52	; 0x34
   15a5c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15a60:	mov	r0, r3
   15a64:	bl	13a3c <__assert_fail@plt+0x2b20>
   15a68:	sub	r3, fp, #52	; 0x34
   15a6c:	mvn	r2, #0
   15a70:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15a74:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15a78:	bl	15640 <__assert_fail@plt+0x4724>
   15a7c:	mov	r3, r0
   15a80:	mov	r0, r3
   15a84:	sub	sp, fp, #4
   15a88:	ldr	fp, [sp]
   15a8c:	add	sp, sp, #4
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	str	fp, [sp, #-8]!
   15a98:	str	lr, [sp, #4]
   15a9c:	add	fp, sp, #4
   15aa0:	sub	sp, sp, #64	; 0x40
   15aa4:	str	r0, [fp, #-56]	; 0xffffffc8
   15aa8:	str	r1, [fp, #-60]	; 0xffffffc4
   15aac:	str	r2, [fp, #-64]	; 0xffffffc0
   15ab0:	str	r3, [fp, #-68]	; 0xffffffbc
   15ab4:	sub	r3, fp, #52	; 0x34
   15ab8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15abc:	mov	r0, r3
   15ac0:	bl	13a3c <__assert_fail@plt+0x2b20>
   15ac4:	sub	r3, fp, #52	; 0x34
   15ac8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15acc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15ad0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15ad4:	bl	15640 <__assert_fail@plt+0x4724>
   15ad8:	mov	r3, r0
   15adc:	mov	r0, r3
   15ae0:	sub	sp, fp, #4
   15ae4:	ldr	fp, [sp]
   15ae8:	add	sp, sp, #4
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	str	fp, [sp, #-8]!
   15af4:	str	lr, [sp, #4]
   15af8:	add	fp, sp, #4
   15afc:	sub	sp, sp, #8
   15b00:	str	r0, [fp, #-8]
   15b04:	str	r1, [fp, #-12]
   15b08:	ldr	r2, [fp, #-12]
   15b0c:	ldr	r1, [fp, #-8]
   15b10:	mov	r0, #0
   15b14:	bl	15a3c <__assert_fail@plt+0x4b20>
   15b18:	mov	r3, r0
   15b1c:	mov	r0, r3
   15b20:	sub	sp, fp, #4
   15b24:	ldr	fp, [sp]
   15b28:	add	sp, sp, #4
   15b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b30:	str	fp, [sp, #-8]!
   15b34:	str	lr, [sp, #4]
   15b38:	add	fp, sp, #4
   15b3c:	sub	sp, sp, #16
   15b40:	str	r0, [fp, #-8]
   15b44:	str	r1, [fp, #-12]
   15b48:	str	r2, [fp, #-16]
   15b4c:	ldr	r3, [fp, #-16]
   15b50:	ldr	r2, [fp, #-12]
   15b54:	ldr	r1, [fp, #-8]
   15b58:	mov	r0, #0
   15b5c:	bl	15a94 <__assert_fail@plt+0x4b78>
   15b60:	mov	r3, r0
   15b64:	mov	r0, r3
   15b68:	sub	sp, fp, #4
   15b6c:	ldr	fp, [sp]
   15b70:	add	sp, sp, #4
   15b74:	pop	{pc}		; (ldr pc, [sp], #4)
   15b78:	str	fp, [sp, #-8]!
   15b7c:	str	lr, [sp, #4]
   15b80:	add	fp, sp, #4
   15b84:	sub	sp, sp, #64	; 0x40
   15b88:	str	r0, [fp, #-56]	; 0xffffffc8
   15b8c:	str	r1, [fp, #-60]	; 0xffffffc4
   15b90:	mov	r3, r2
   15b94:	strb	r3, [fp, #-61]	; 0xffffffc3
   15b98:	movw	r2, #41324	; 0xa16c
   15b9c:	movt	r2, #2
   15ba0:	sub	r3, fp, #52	; 0x34
   15ba4:	ldrd	r0, [r2]
   15ba8:	strd	r0, [r3]
   15bac:	ldrd	r0, [r2, #8]
   15bb0:	strd	r0, [r3, #8]
   15bb4:	ldrd	r0, [r2, #16]
   15bb8:	strd	r0, [r3, #16]
   15bbc:	ldrd	r0, [r2, #24]
   15bc0:	strd	r0, [r3, #24]
   15bc4:	ldrd	r0, [r2, #32]
   15bc8:	strd	r0, [r3, #32]
   15bcc:	ldrd	r0, [r2, #40]	; 0x28
   15bd0:	strd	r0, [r3, #40]	; 0x28
   15bd4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15bd8:	sub	r3, fp, #52	; 0x34
   15bdc:	mov	r2, #1
   15be0:	mov	r0, r3
   15be4:	bl	1389c <__assert_fail@plt+0x2980>
   15be8:	sub	r3, fp, #52	; 0x34
   15bec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15bf0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15bf4:	mov	r0, #0
   15bf8:	bl	15640 <__assert_fail@plt+0x4724>
   15bfc:	mov	r3, r0
   15c00:	mov	r0, r3
   15c04:	sub	sp, fp, #4
   15c08:	ldr	fp, [sp]
   15c0c:	add	sp, sp, #4
   15c10:	pop	{pc}		; (ldr pc, [sp], #4)
   15c14:	str	fp, [sp, #-8]!
   15c18:	str	lr, [sp, #4]
   15c1c:	add	fp, sp, #4
   15c20:	sub	sp, sp, #8
   15c24:	str	r0, [fp, #-8]
   15c28:	mov	r3, r1
   15c2c:	strb	r3, [fp, #-9]
   15c30:	ldrb	r3, [fp, #-9]
   15c34:	mov	r2, r3
   15c38:	mvn	r1, #0
   15c3c:	ldr	r0, [fp, #-8]
   15c40:	bl	15b78 <__assert_fail@plt+0x4c5c>
   15c44:	mov	r3, r0
   15c48:	mov	r0, r3
   15c4c:	sub	sp, fp, #4
   15c50:	ldr	fp, [sp]
   15c54:	add	sp, sp, #4
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:	str	fp, [sp, #-8]!
   15c60:	str	lr, [sp, #4]
   15c64:	add	fp, sp, #4
   15c68:	sub	sp, sp, #8
   15c6c:	str	r0, [fp, #-8]
   15c70:	mov	r1, #58	; 0x3a
   15c74:	ldr	r0, [fp, #-8]
   15c78:	bl	15c14 <__assert_fail@plt+0x4cf8>
   15c7c:	mov	r3, r0
   15c80:	mov	r0, r3
   15c84:	sub	sp, fp, #4
   15c88:	ldr	fp, [sp]
   15c8c:	add	sp, sp, #4
   15c90:	pop	{pc}		; (ldr pc, [sp], #4)
   15c94:	str	fp, [sp, #-8]!
   15c98:	str	lr, [sp, #4]
   15c9c:	add	fp, sp, #4
   15ca0:	sub	sp, sp, #8
   15ca4:	str	r0, [fp, #-8]
   15ca8:	str	r1, [fp, #-12]
   15cac:	mov	r2, #58	; 0x3a
   15cb0:	ldr	r1, [fp, #-12]
   15cb4:	ldr	r0, [fp, #-8]
   15cb8:	bl	15b78 <__assert_fail@plt+0x4c5c>
   15cbc:	mov	r3, r0
   15cc0:	mov	r0, r3
   15cc4:	sub	sp, fp, #4
   15cc8:	ldr	fp, [sp]
   15ccc:	add	sp, sp, #4
   15cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd4:	str	fp, [sp, #-8]!
   15cd8:	str	lr, [sp, #4]
   15cdc:	add	fp, sp, #4
   15ce0:	sub	sp, sp, #112	; 0x70
   15ce4:	str	r0, [fp, #-56]	; 0xffffffc8
   15ce8:	str	r1, [fp, #-60]	; 0xffffffc4
   15cec:	str	r2, [fp, #-64]	; 0xffffffc0
   15cf0:	sub	r3, fp, #116	; 0x74
   15cf4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15cf8:	mov	r0, r3
   15cfc:	bl	13a3c <__assert_fail@plt+0x2b20>
   15d00:	sub	r3, fp, #52	; 0x34
   15d04:	sub	r2, fp, #116	; 0x74
   15d08:	ldrd	r0, [r2]
   15d0c:	strd	r0, [r3]
   15d10:	ldrd	r0, [r2, #8]
   15d14:	strd	r0, [r3, #8]
   15d18:	ldrd	r0, [r2, #16]
   15d1c:	strd	r0, [r3, #16]
   15d20:	ldrd	r0, [r2, #24]
   15d24:	strd	r0, [r3, #24]
   15d28:	ldrd	r0, [r2, #32]
   15d2c:	strd	r0, [r3, #32]
   15d30:	ldrd	r0, [r2, #40]	; 0x28
   15d34:	strd	r0, [r3, #40]	; 0x28
   15d38:	sub	r3, fp, #52	; 0x34
   15d3c:	mov	r2, #1
   15d40:	mov	r1, #58	; 0x3a
   15d44:	mov	r0, r3
   15d48:	bl	1389c <__assert_fail@plt+0x2980>
   15d4c:	sub	r3, fp, #52	; 0x34
   15d50:	mvn	r2, #0
   15d54:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15d58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15d5c:	bl	15640 <__assert_fail@plt+0x4724>
   15d60:	mov	r3, r0
   15d64:	mov	r0, r3
   15d68:	sub	sp, fp, #4
   15d6c:	ldr	fp, [sp]
   15d70:	add	sp, sp, #4
   15d74:	pop	{pc}		; (ldr pc, [sp], #4)
   15d78:	str	fp, [sp, #-8]!
   15d7c:	str	lr, [sp, #4]
   15d80:	add	fp, sp, #4
   15d84:	sub	sp, sp, #24
   15d88:	str	r0, [fp, #-8]
   15d8c:	str	r1, [fp, #-12]
   15d90:	str	r2, [fp, #-16]
   15d94:	str	r3, [fp, #-20]	; 0xffffffec
   15d98:	mvn	r3, #0
   15d9c:	str	r3, [sp]
   15da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15da4:	ldr	r2, [fp, #-16]
   15da8:	ldr	r1, [fp, #-12]
   15dac:	ldr	r0, [fp, #-8]
   15db0:	bl	15dcc <__assert_fail@plt+0x4eb0>
   15db4:	mov	r3, r0
   15db8:	mov	r0, r3
   15dbc:	sub	sp, fp, #4
   15dc0:	ldr	fp, [sp]
   15dc4:	add	sp, sp, #4
   15dc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dcc:	str	fp, [sp, #-8]!
   15dd0:	str	lr, [sp, #4]
   15dd4:	add	fp, sp, #4
   15dd8:	sub	sp, sp, #64	; 0x40
   15ddc:	str	r0, [fp, #-56]	; 0xffffffc8
   15de0:	str	r1, [fp, #-60]	; 0xffffffc4
   15de4:	str	r2, [fp, #-64]	; 0xffffffc0
   15de8:	str	r3, [fp, #-68]	; 0xffffffbc
   15dec:	movw	r2, #41324	; 0xa16c
   15df0:	movt	r2, #2
   15df4:	sub	r3, fp, #52	; 0x34
   15df8:	ldrd	r0, [r2]
   15dfc:	strd	r0, [r3]
   15e00:	ldrd	r0, [r2, #8]
   15e04:	strd	r0, [r3, #8]
   15e08:	ldrd	r0, [r2, #16]
   15e0c:	strd	r0, [r3, #16]
   15e10:	ldrd	r0, [r2, #24]
   15e14:	strd	r0, [r3, #24]
   15e18:	ldrd	r0, [r2, #32]
   15e1c:	strd	r0, [r3, #32]
   15e20:	ldrd	r0, [r2, #40]	; 0x28
   15e24:	strd	r0, [r3, #40]	; 0x28
   15e28:	sub	r3, fp, #52	; 0x34
   15e2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15e30:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15e34:	mov	r0, r3
   15e38:	bl	139b4 <__assert_fail@plt+0x2a98>
   15e3c:	sub	r3, fp, #52	; 0x34
   15e40:	ldr	r2, [fp, #4]
   15e44:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15e48:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15e4c:	bl	15640 <__assert_fail@plt+0x4724>
   15e50:	mov	r3, r0
   15e54:	mov	r0, r3
   15e58:	sub	sp, fp, #4
   15e5c:	ldr	fp, [sp]
   15e60:	add	sp, sp, #4
   15e64:	pop	{pc}		; (ldr pc, [sp], #4)
   15e68:	str	fp, [sp, #-8]!
   15e6c:	str	lr, [sp, #4]
   15e70:	add	fp, sp, #4
   15e74:	sub	sp, sp, #16
   15e78:	str	r0, [fp, #-8]
   15e7c:	str	r1, [fp, #-12]
   15e80:	str	r2, [fp, #-16]
   15e84:	ldr	r3, [fp, #-16]
   15e88:	ldr	r2, [fp, #-12]
   15e8c:	ldr	r1, [fp, #-8]
   15e90:	mov	r0, #0
   15e94:	bl	15d78 <__assert_fail@plt+0x4e5c>
   15e98:	mov	r3, r0
   15e9c:	mov	r0, r3
   15ea0:	sub	sp, fp, #4
   15ea4:	ldr	fp, [sp]
   15ea8:	add	sp, sp, #4
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	str	fp, [sp, #-8]!
   15eb4:	str	lr, [sp, #4]
   15eb8:	add	fp, sp, #4
   15ebc:	sub	sp, sp, #24
   15ec0:	str	r0, [fp, #-8]
   15ec4:	str	r1, [fp, #-12]
   15ec8:	str	r2, [fp, #-16]
   15ecc:	str	r3, [fp, #-20]	; 0xffffffec
   15ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ed4:	str	r3, [sp]
   15ed8:	ldr	r3, [fp, #-16]
   15edc:	ldr	r2, [fp, #-12]
   15ee0:	ldr	r1, [fp, #-8]
   15ee4:	mov	r0, #0
   15ee8:	bl	15dcc <__assert_fail@plt+0x4eb0>
   15eec:	mov	r3, r0
   15ef0:	mov	r0, r3
   15ef4:	sub	sp, fp, #4
   15ef8:	ldr	fp, [sp]
   15efc:	add	sp, sp, #4
   15f00:	pop	{pc}		; (ldr pc, [sp], #4)
   15f04:	str	fp, [sp, #-8]!
   15f08:	str	lr, [sp, #4]
   15f0c:	add	fp, sp, #4
   15f10:	sub	sp, sp, #16
   15f14:	str	r0, [fp, #-8]
   15f18:	str	r1, [fp, #-12]
   15f1c:	str	r2, [fp, #-16]
   15f20:	movw	r3, #41220	; 0xa104
   15f24:	movt	r3, #2
   15f28:	ldr	r2, [fp, #-16]
   15f2c:	ldr	r1, [fp, #-12]
   15f30:	ldr	r0, [fp, #-8]
   15f34:	bl	15640 <__assert_fail@plt+0x4724>
   15f38:	mov	r3, r0
   15f3c:	mov	r0, r3
   15f40:	sub	sp, fp, #4
   15f44:	ldr	fp, [sp]
   15f48:	add	sp, sp, #4
   15f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f50:	str	fp, [sp, #-8]!
   15f54:	str	lr, [sp, #4]
   15f58:	add	fp, sp, #4
   15f5c:	sub	sp, sp, #8
   15f60:	str	r0, [fp, #-8]
   15f64:	str	r1, [fp, #-12]
   15f68:	ldr	r2, [fp, #-12]
   15f6c:	ldr	r1, [fp, #-8]
   15f70:	mov	r0, #0
   15f74:	bl	15f04 <__assert_fail@plt+0x4fe8>
   15f78:	mov	r3, r0
   15f7c:	mov	r0, r3
   15f80:	sub	sp, fp, #4
   15f84:	ldr	fp, [sp]
   15f88:	add	sp, sp, #4
   15f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f90:	str	fp, [sp, #-8]!
   15f94:	str	lr, [sp, #4]
   15f98:	add	fp, sp, #4
   15f9c:	sub	sp, sp, #8
   15fa0:	str	r0, [fp, #-8]
   15fa4:	str	r1, [fp, #-12]
   15fa8:	mvn	r2, #0
   15fac:	ldr	r1, [fp, #-12]
   15fb0:	ldr	r0, [fp, #-8]
   15fb4:	bl	15f04 <__assert_fail@plt+0x4fe8>
   15fb8:	mov	r3, r0
   15fbc:	mov	r0, r3
   15fc0:	sub	sp, fp, #4
   15fc4:	ldr	fp, [sp]
   15fc8:	add	sp, sp, #4
   15fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd0:	str	fp, [sp, #-8]!
   15fd4:	str	lr, [sp, #4]
   15fd8:	add	fp, sp, #4
   15fdc:	sub	sp, sp, #8
   15fe0:	str	r0, [fp, #-8]
   15fe4:	ldr	r1, [fp, #-8]
   15fe8:	mov	r0, #0
   15fec:	bl	15f90 <__assert_fail@plt+0x5074>
   15ff0:	mov	r3, r0
   15ff4:	mov	r0, r3
   15ff8:	sub	sp, fp, #4
   15ffc:	ldr	fp, [sp]
   16000:	add	sp, sp, #4
   16004:	pop	{pc}		; (ldr pc, [sp], #4)
   16008:	str	fp, [sp, #-8]!
   1600c:	str	lr, [sp, #4]
   16010:	add	fp, sp, #4
   16014:	sub	sp, sp, #24
   16018:	str	r0, [fp, #-16]
   1601c:	str	r1, [fp, #-20]	; 0xffffffec
   16020:	str	r2, [fp, #-24]	; 0xffffffe8
   16024:	mov	ip, #0
   16028:	ldr	r2, [fp, #-20]	; 0xffffffec
   1602c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16030:	umull	r0, r1, r2, r3
   16034:	mov	r2, #0
   16038:	mov	r3, #0
   1603c:	mov	r2, r1
   16040:	mov	r3, #0
   16044:	cmp	r2, #0
   16048:	beq	16050 <__assert_fail@plt+0x5134>
   1604c:	mov	ip, #1
   16050:	mov	r3, r0
   16054:	str	r3, [fp, #-8]
   16058:	mov	r3, ip
   1605c:	and	r3, r3, #1
   16060:	uxtb	r3, r3
   16064:	cmp	r3, #0
   16068:	beq	16084 <__assert_fail@plt+0x5168>
   1606c:	bl	10e50 <__errno_location@plt>
   16070:	mov	r2, r0
   16074:	mov	r3, #12
   16078:	str	r3, [r2]
   1607c:	mov	r3, #0
   16080:	b	16098 <__assert_fail@plt+0x517c>
   16084:	ldr	r3, [fp, #-8]
   16088:	mov	r1, r3
   1608c:	ldr	r0, [fp, #-16]
   16090:	bl	17be4 <__assert_fail@plt+0x6cc8>
   16094:	mov	r3, r0
   16098:	mov	r0, r3
   1609c:	sub	sp, fp, #4
   160a0:	ldr	fp, [sp]
   160a4:	add	sp, sp, #4
   160a8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   160b0:	strd	r6, [sp, #8]
   160b4:	str	fp, [sp, #16]
   160b8:	str	lr, [sp, #20]
   160bc:	add	fp, sp, #20
   160c0:	sub	sp, sp, #48	; 0x30
   160c4:	str	r0, [fp, #-24]	; 0xffffffe8
   160c8:	str	r1, [fp, #-28]	; 0xffffffe4
   160cc:	str	r2, [fp, #-32]	; 0xffffffe0
   160d0:	str	r3, [fp, #-36]	; 0xffffffdc
   160d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   160d8:	cmp	r3, #0
   160dc:	beq	16104 <__assert_fail@plt+0x51e8>
   160e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   160e4:	str	r3, [sp]
   160e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   160ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   160f0:	movw	r1, #37020	; 0x909c
   160f4:	movt	r1, #1
   160f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   160fc:	bl	10e44 <fprintf@plt>
   16100:	b	1611c <__assert_fail@plt+0x5200>
   16104:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16108:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1610c:	movw	r1, #37032	; 0x90a8
   16110:	movt	r1, #1
   16114:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16118:	bl	10e44 <fprintf@plt>
   1611c:	movw	r0, #37040	; 0x90b0
   16120:	movt	r0, #1
   16124:	bl	10e20 <gettext@plt>
   16128:	mov	r2, r0
   1612c:	movw	r3, #2022	; 0x7e6
   16130:	movw	r1, #37824	; 0x93c0
   16134:	movt	r1, #1
   16138:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1613c:	bl	10e44 <fprintf@plt>
   16140:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16144:	mov	r0, #10
   16148:	bl	10d48 <fputc_unlocked@plt>
   1614c:	movw	r0, #37044	; 0x90b4
   16150:	movt	r0, #1
   16154:	bl	10e20 <gettext@plt>
   16158:	mov	r3, r0
   1615c:	movw	r2, #37216	; 0x9160
   16160:	movt	r2, #1
   16164:	mov	r1, r3
   16168:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1616c:	bl	10e44 <fprintf@plt>
   16170:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16174:	mov	r0, #10
   16178:	bl	10d48 <fputc_unlocked@plt>
   1617c:	ldr	r3, [fp, #8]
   16180:	cmp	r3, #9
   16184:	ldrls	pc, [pc, r3, lsl #2]
   16188:	b	16568 <__assert_fail@plt+0x564c>
   1618c:	andeq	r6, r1, r4, lsl r6
   16190:			; <UNDEFINED> instruction: 0x000161b4
   16194:	ldrdeq	r6, [r1], -ip
   16198:	andeq	r6, r1, ip, lsl #4
   1619c:	andeq	r6, r1, r0, asr r2
   161a0:	andeq	r6, r1, ip, lsr #5
   161a4:	andeq	r6, r1, r8, lsl r3
   161a8:	muleq	r1, r4, r3
   161ac:	andeq	r6, r1, r0, lsr #8
   161b0:			; <UNDEFINED> instruction: 0x000164bc
   161b4:	movw	r0, #37252	; 0x9184
   161b8:	movt	r0, #1
   161bc:	bl	10e20 <gettext@plt>
   161c0:	mov	r1, r0
   161c4:	ldr	r3, [fp, #4]
   161c8:	ldr	r3, [r3]
   161cc:	mov	r2, r3
   161d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   161d4:	bl	10e44 <fprintf@plt>
   161d8:	b	16618 <__assert_fail@plt+0x56fc>
   161dc:	movw	r0, #37268	; 0x9194
   161e0:	movt	r0, #1
   161e4:	bl	10e20 <gettext@plt>
   161e8:	mov	r1, r0
   161ec:	ldr	r3, [fp, #4]
   161f0:	ldr	r2, [r3]
   161f4:	ldr	r3, [fp, #4]
   161f8:	add	r3, r3, #4
   161fc:	ldr	r3, [r3]
   16200:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16204:	bl	10e44 <fprintf@plt>
   16208:	b	16618 <__assert_fail@plt+0x56fc>
   1620c:	movw	r0, #37292	; 0x91ac
   16210:	movt	r0, #1
   16214:	bl	10e20 <gettext@plt>
   16218:	ldr	r3, [fp, #4]
   1621c:	ldr	r2, [r3]
   16220:	ldr	r3, [fp, #4]
   16224:	add	r3, r3, #4
   16228:	ldr	r1, [r3]
   1622c:	ldr	r3, [fp, #4]
   16230:	add	r3, r3, #8
   16234:	ldr	r3, [r3]
   16238:	str	r3, [sp]
   1623c:	mov	r3, r1
   16240:	mov	r1, r0
   16244:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16248:	bl	10e44 <fprintf@plt>
   1624c:	b	16618 <__assert_fail@plt+0x56fc>
   16250:	movw	r0, #37320	; 0x91c8
   16254:	movt	r0, #1
   16258:	bl	10e20 <gettext@plt>
   1625c:	mov	ip, r0
   16260:	ldr	r3, [fp, #4]
   16264:	ldr	r1, [r3]
   16268:	ldr	r3, [fp, #4]
   1626c:	add	r3, r3, #4
   16270:	ldr	r0, [r3]
   16274:	ldr	r3, [fp, #4]
   16278:	add	r3, r3, #8
   1627c:	ldr	r3, [r3]
   16280:	ldr	r2, [fp, #4]
   16284:	add	r2, r2, #12
   16288:	ldr	r2, [r2]
   1628c:	str	r2, [sp, #4]
   16290:	str	r3, [sp]
   16294:	mov	r3, r0
   16298:	mov	r2, r1
   1629c:	mov	r1, ip
   162a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   162a4:	bl	10e44 <fprintf@plt>
   162a8:	b	16618 <__assert_fail@plt+0x56fc>
   162ac:	movw	r0, #37352	; 0x91e8
   162b0:	movt	r0, #1
   162b4:	bl	10e20 <gettext@plt>
   162b8:	mov	lr, r0
   162bc:	ldr	r3, [fp, #4]
   162c0:	ldr	r0, [r3]
   162c4:	ldr	r3, [fp, #4]
   162c8:	add	r3, r3, #4
   162cc:	ldr	ip, [r3]
   162d0:	ldr	r3, [fp, #4]
   162d4:	add	r3, r3, #8
   162d8:	ldr	r3, [r3]
   162dc:	ldr	r2, [fp, #4]
   162e0:	add	r2, r2, #12
   162e4:	ldr	r2, [r2]
   162e8:	ldr	r1, [fp, #4]
   162ec:	add	r1, r1, #16
   162f0:	ldr	r1, [r1]
   162f4:	str	r1, [sp, #8]
   162f8:	str	r2, [sp, #4]
   162fc:	str	r3, [sp]
   16300:	mov	r3, ip
   16304:	mov	r2, r0
   16308:	mov	r1, lr
   1630c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16310:	bl	10e44 <fprintf@plt>
   16314:	b	16618 <__assert_fail@plt+0x56fc>
   16318:	movw	r0, #37388	; 0x920c
   1631c:	movt	r0, #1
   16320:	bl	10e20 <gettext@plt>
   16324:	mov	r4, r0
   16328:	ldr	r3, [fp, #4]
   1632c:	ldr	ip, [r3]
   16330:	ldr	r3, [fp, #4]
   16334:	add	r3, r3, #4
   16338:	ldr	lr, [r3]
   1633c:	ldr	r3, [fp, #4]
   16340:	add	r3, r3, #8
   16344:	ldr	r3, [r3]
   16348:	ldr	r2, [fp, #4]
   1634c:	add	r2, r2, #12
   16350:	ldr	r2, [r2]
   16354:	ldr	r1, [fp, #4]
   16358:	add	r1, r1, #16
   1635c:	ldr	r1, [r1]
   16360:	ldr	r0, [fp, #4]
   16364:	add	r0, r0, #20
   16368:	ldr	r0, [r0]
   1636c:	str	r0, [sp, #12]
   16370:	str	r1, [sp, #8]
   16374:	str	r2, [sp, #4]
   16378:	str	r3, [sp]
   1637c:	mov	r3, lr
   16380:	mov	r2, ip
   16384:	mov	r1, r4
   16388:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1638c:	bl	10e44 <fprintf@plt>
   16390:	b	16618 <__assert_fail@plt+0x56fc>
   16394:	movw	r0, #37428	; 0x9234
   16398:	movt	r0, #1
   1639c:	bl	10e20 <gettext@plt>
   163a0:	mov	r5, r0
   163a4:	ldr	r3, [fp, #4]
   163a8:	ldr	lr, [r3]
   163ac:	ldr	r3, [fp, #4]
   163b0:	add	r3, r3, #4
   163b4:	ldr	r4, [r3]
   163b8:	ldr	r3, [fp, #4]
   163bc:	add	r3, r3, #8
   163c0:	ldr	r3, [r3]
   163c4:	ldr	r2, [fp, #4]
   163c8:	add	r2, r2, #12
   163cc:	ldr	r2, [r2]
   163d0:	ldr	r1, [fp, #4]
   163d4:	add	r1, r1, #16
   163d8:	ldr	r1, [r1]
   163dc:	ldr	r0, [fp, #4]
   163e0:	add	r0, r0, #20
   163e4:	ldr	r0, [r0]
   163e8:	ldr	ip, [fp, #4]
   163ec:	add	ip, ip, #24
   163f0:	ldr	ip, [ip]
   163f4:	str	ip, [sp, #16]
   163f8:	str	r0, [sp, #12]
   163fc:	str	r1, [sp, #8]
   16400:	str	r2, [sp, #4]
   16404:	str	r3, [sp]
   16408:	mov	r3, r4
   1640c:	mov	r2, lr
   16410:	mov	r1, r5
   16414:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16418:	bl	10e44 <fprintf@plt>
   1641c:	b	16618 <__assert_fail@plt+0x56fc>
   16420:	movw	r0, #37472	; 0x9260
   16424:	movt	r0, #1
   16428:	bl	10e20 <gettext@plt>
   1642c:	mov	r6, r0
   16430:	ldr	r3, [fp, #4]
   16434:	ldr	r4, [r3]
   16438:	ldr	r3, [fp, #4]
   1643c:	add	r3, r3, #4
   16440:	ldr	r5, [r3]
   16444:	ldr	r3, [fp, #4]
   16448:	add	r3, r3, #8
   1644c:	ldr	r3, [r3]
   16450:	ldr	r2, [fp, #4]
   16454:	add	r2, r2, #12
   16458:	ldr	r2, [r2]
   1645c:	ldr	r1, [fp, #4]
   16460:	add	r1, r1, #16
   16464:	ldr	r1, [r1]
   16468:	ldr	r0, [fp, #4]
   1646c:	add	r0, r0, #20
   16470:	ldr	r0, [r0]
   16474:	ldr	ip, [fp, #4]
   16478:	add	ip, ip, #24
   1647c:	ldr	ip, [ip]
   16480:	ldr	lr, [fp, #4]
   16484:	add	lr, lr, #28
   16488:	ldr	lr, [lr]
   1648c:	str	lr, [sp, #20]
   16490:	str	ip, [sp, #16]
   16494:	str	r0, [sp, #12]
   16498:	str	r1, [sp, #8]
   1649c:	str	r2, [sp, #4]
   164a0:	str	r3, [sp]
   164a4:	mov	r3, r5
   164a8:	mov	r2, r4
   164ac:	mov	r1, r6
   164b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   164b4:	bl	10e44 <fprintf@plt>
   164b8:	b	16618 <__assert_fail@plt+0x56fc>
   164bc:	movw	r0, #37520	; 0x9290
   164c0:	movt	r0, #1
   164c4:	bl	10e20 <gettext@plt>
   164c8:	mov	r7, r0
   164cc:	ldr	r3, [fp, #4]
   164d0:	ldr	r5, [r3]
   164d4:	ldr	r3, [fp, #4]
   164d8:	add	r3, r3, #4
   164dc:	ldr	r6, [r3]
   164e0:	ldr	r3, [fp, #4]
   164e4:	add	r3, r3, #8
   164e8:	ldr	r3, [r3]
   164ec:	ldr	r2, [fp, #4]
   164f0:	add	r2, r2, #12
   164f4:	ldr	r2, [r2]
   164f8:	ldr	r1, [fp, #4]
   164fc:	add	r1, r1, #16
   16500:	ldr	r1, [r1]
   16504:	ldr	r0, [fp, #4]
   16508:	add	r0, r0, #20
   1650c:	ldr	r0, [r0]
   16510:	ldr	ip, [fp, #4]
   16514:	add	ip, ip, #24
   16518:	ldr	ip, [ip]
   1651c:	ldr	lr, [fp, #4]
   16520:	add	lr, lr, #28
   16524:	ldr	lr, [lr]
   16528:	ldr	r4, [fp, #4]
   1652c:	add	r4, r4, #32
   16530:	ldr	r4, [r4]
   16534:	str	r4, [sp, #24]
   16538:	str	lr, [sp, #20]
   1653c:	str	ip, [sp, #16]
   16540:	str	r0, [sp, #12]
   16544:	str	r1, [sp, #8]
   16548:	str	r2, [sp, #4]
   1654c:	str	r3, [sp]
   16550:	mov	r3, r6
   16554:	mov	r2, r5
   16558:	mov	r1, r7
   1655c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16560:	bl	10e44 <fprintf@plt>
   16564:	b	16618 <__assert_fail@plt+0x56fc>
   16568:	movw	r0, #37572	; 0x92c4
   1656c:	movt	r0, #1
   16570:	bl	10e20 <gettext@plt>
   16574:	mov	r7, r0
   16578:	ldr	r3, [fp, #4]
   1657c:	ldr	r5, [r3]
   16580:	ldr	r3, [fp, #4]
   16584:	add	r3, r3, #4
   16588:	ldr	r6, [r3]
   1658c:	ldr	r3, [fp, #4]
   16590:	add	r3, r3, #8
   16594:	ldr	r3, [r3]
   16598:	ldr	r2, [fp, #4]
   1659c:	add	r2, r2, #12
   165a0:	ldr	r2, [r2]
   165a4:	ldr	r1, [fp, #4]
   165a8:	add	r1, r1, #16
   165ac:	ldr	r1, [r1]
   165b0:	ldr	r0, [fp, #4]
   165b4:	add	r0, r0, #20
   165b8:	ldr	r0, [r0]
   165bc:	ldr	ip, [fp, #4]
   165c0:	add	ip, ip, #24
   165c4:	ldr	ip, [ip]
   165c8:	ldr	lr, [fp, #4]
   165cc:	add	lr, lr, #28
   165d0:	ldr	lr, [lr]
   165d4:	ldr	r4, [fp, #4]
   165d8:	add	r4, r4, #32
   165dc:	ldr	r4, [r4]
   165e0:	str	r4, [sp, #24]
   165e4:	str	lr, [sp, #20]
   165e8:	str	ip, [sp, #16]
   165ec:	str	r0, [sp, #12]
   165f0:	str	r1, [sp, #8]
   165f4:	str	r2, [sp, #4]
   165f8:	str	r3, [sp]
   165fc:	mov	r3, r6
   16600:	mov	r2, r5
   16604:	mov	r1, r7
   16608:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1660c:	bl	10e44 <fprintf@plt>
   16610:	b	16618 <__assert_fail@plt+0x56fc>
   16614:	nop	{0}
   16618:	nop	{0}
   1661c:	sub	sp, fp, #20
   16620:	ldrd	r4, [sp]
   16624:	ldrd	r6, [sp, #8]
   16628:	ldr	fp, [sp, #16]
   1662c:	add	sp, sp, #20
   16630:	pop	{pc}		; (ldr pc, [sp], #4)
   16634:	str	fp, [sp, #-8]!
   16638:	str	lr, [sp, #4]
   1663c:	add	fp, sp, #4
   16640:	sub	sp, sp, #32
   16644:	str	r0, [fp, #-16]
   16648:	str	r1, [fp, #-20]	; 0xffffffec
   1664c:	str	r2, [fp, #-24]	; 0xffffffe8
   16650:	str	r3, [fp, #-28]	; 0xffffffe4
   16654:	mov	r3, #0
   16658:	str	r3, [fp, #-8]
   1665c:	b	1666c <__assert_fail@plt+0x5750>
   16660:	ldr	r3, [fp, #-8]
   16664:	add	r3, r3, #1
   16668:	str	r3, [fp, #-8]
   1666c:	ldr	r3, [fp, #-8]
   16670:	lsl	r3, r3, #2
   16674:	ldr	r2, [fp, #4]
   16678:	add	r3, r2, r3
   1667c:	ldr	r3, [r3]
   16680:	cmp	r3, #0
   16684:	bne	16660 <__assert_fail@plt+0x5744>
   16688:	ldr	r3, [fp, #-8]
   1668c:	str	r3, [sp, #4]
   16690:	ldr	r3, [fp, #4]
   16694:	str	r3, [sp]
   16698:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1669c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   166a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   166a4:	ldr	r0, [fp, #-16]
   166a8:	bl	160ac <__assert_fail@plt+0x5190>
   166ac:	nop	{0}
   166b0:	sub	sp, fp, #4
   166b4:	ldr	fp, [sp]
   166b8:	add	sp, sp, #4
   166bc:	pop	{pc}		; (ldr pc, [sp], #4)
   166c0:	str	fp, [sp, #-8]!
   166c4:	str	lr, [sp, #4]
   166c8:	add	fp, sp, #4
   166cc:	sub	sp, sp, #72	; 0x48
   166d0:	str	r0, [fp, #-56]	; 0xffffffc8
   166d4:	str	r1, [fp, #-60]	; 0xffffffc4
   166d8:	str	r2, [fp, #-64]	; 0xffffffc0
   166dc:	str	r3, [fp, #-68]	; 0xffffffbc
   166e0:	mov	r3, #0
   166e4:	str	r3, [fp, #-8]
   166e8:	b	166f8 <__assert_fail@plt+0x57dc>
   166ec:	ldr	r3, [fp, #-8]
   166f0:	add	r3, r3, #1
   166f4:	str	r3, [fp, #-8]
   166f8:	ldr	r3, [fp, #-8]
   166fc:	cmp	r3, #9
   16700:	bhi	16744 <__assert_fail@plt+0x5828>
   16704:	ldr	r3, [fp, #4]
   16708:	add	r2, r3, #4
   1670c:	str	r2, [fp, #4]
   16710:	ldr	r2, [r3]
   16714:	ldr	r3, [fp, #-8]
   16718:	lsl	r3, r3, #2
   1671c:	sub	r1, fp, #4
   16720:	add	r3, r1, r3
   16724:	str	r2, [r3, #-44]	; 0xffffffd4
   16728:	ldr	r3, [fp, #-8]
   1672c:	lsl	r3, r3, #2
   16730:	sub	r2, fp, #4
   16734:	add	r3, r2, r3
   16738:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1673c:	cmp	r3, #0
   16740:	bne	166ec <__assert_fail@plt+0x57d0>
   16744:	ldr	r3, [fp, #-8]
   16748:	str	r3, [sp, #4]
   1674c:	sub	r3, fp, #48	; 0x30
   16750:	str	r3, [sp]
   16754:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16758:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1675c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16760:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16764:	bl	160ac <__assert_fail@plt+0x5190>
   16768:	nop	{0}
   1676c:	sub	sp, fp, #4
   16770:	ldr	fp, [sp]
   16774:	add	sp, sp, #4
   16778:	pop	{pc}		; (ldr pc, [sp], #4)
   1677c:	push	{r3}		; (str r3, [sp, #-4]!)
   16780:	str	fp, [sp, #-8]!
   16784:	str	lr, [sp, #4]
   16788:	add	fp, sp, #4
   1678c:	sub	sp, sp, #36	; 0x24
   16790:	str	r0, [fp, #-20]	; 0xffffffec
   16794:	str	r1, [fp, #-24]	; 0xffffffe8
   16798:	str	r2, [fp, #-28]	; 0xffffffe4
   1679c:	add	r3, fp, #8
   167a0:	str	r3, [fp, #-12]
   167a4:	ldr	r3, [fp, #-12]
   167a8:	str	r3, [sp]
   167ac:	ldr	r3, [fp, #4]
   167b0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   167b4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   167b8:	ldr	r0, [fp, #-20]	; 0xffffffec
   167bc:	bl	166c0 <__assert_fail@plt+0x57a4>
   167c0:	nop	{0}
   167c4:	sub	sp, fp, #4
   167c8:	ldr	fp, [sp]
   167cc:	ldr	lr, [sp, #4]
   167d0:	add	sp, sp, #8
   167d4:	add	sp, sp, #4
   167d8:	bx	lr
   167dc:	str	fp, [sp, #-8]!
   167e0:	str	lr, [sp, #4]
   167e4:	add	fp, sp, #4
   167e8:	movw	r3, #41300	; 0xa154
   167ec:	movt	r3, #2
   167f0:	ldr	r3, [r3]
   167f4:	mov	r1, r3
   167f8:	mov	r0, #10
   167fc:	bl	10d48 <fputc_unlocked@plt>
   16800:	movw	r0, #37632	; 0x9300
   16804:	movt	r0, #1
   16808:	bl	10e20 <gettext@plt>
   1680c:	mov	r3, r0
   16810:	movw	r1, #37652	; 0x9314
   16814:	movt	r1, #1
   16818:	mov	r0, r3
   1681c:	bl	10cdc <printf@plt>
   16820:	movw	r0, #37676	; 0x932c
   16824:	movt	r0, #1
   16828:	bl	10e20 <gettext@plt>
   1682c:	mov	r3, r0
   16830:	movw	r2, #37696	; 0x9340
   16834:	movt	r2, #1
   16838:	movw	r1, #37736	; 0x9368
   1683c:	movt	r1, #1
   16840:	mov	r0, r3
   16844:	bl	10cdc <printf@plt>
   16848:	movw	r0, #37752	; 0x9378
   1684c:	movt	r0, #1
   16850:	bl	10e20 <gettext@plt>
   16854:	mov	r3, r0
   16858:	movw	r1, #37792	; 0x93a0
   1685c:	movt	r1, #1
   16860:	mov	r0, r3
   16864:	bl	10cdc <printf@plt>
   16868:	nop	{0}
   1686c:	sub	sp, fp, #4
   16870:	ldr	fp, [sp]
   16874:	add	sp, sp, #4
   16878:	pop	{pc}		; (ldr pc, [sp], #4)
   1687c:	str	fp, [sp, #-8]!
   16880:	str	lr, [sp, #4]
   16884:	add	fp, sp, #4
   16888:	sub	sp, sp, #16
   1688c:	str	r0, [fp, #-8]
   16890:	str	r1, [fp, #-12]
   16894:	str	r2, [fp, #-16]
   16898:	ldr	r2, [fp, #-16]
   1689c:	ldr	r1, [fp, #-12]
   168a0:	ldr	r0, [fp, #-8]
   168a4:	bl	16a60 <__assert_fail@plt+0x5b44>
   168a8:	mov	r3, r0
   168ac:	mov	r0, r3
   168b0:	sub	sp, fp, #4
   168b4:	ldr	fp, [sp]
   168b8:	add	sp, sp, #4
   168bc:	pop	{pc}		; (ldr pc, [sp], #4)
   168c0:	str	fp, [sp, #-8]!
   168c4:	str	lr, [sp, #4]
   168c8:	add	fp, sp, #4
   168cc:	sub	sp, sp, #8
   168d0:	str	r0, [fp, #-8]
   168d4:	ldr	r3, [fp, #-8]
   168d8:	cmp	r3, #0
   168dc:	bne	168e4 <__assert_fail@plt+0x59c8>
   168e0:	bl	17170 <__assert_fail@plt+0x6254>
   168e4:	ldr	r3, [fp, #-8]
   168e8:	mov	r0, r3
   168ec:	sub	sp, fp, #4
   168f0:	ldr	fp, [sp]
   168f4:	add	sp, sp, #4
   168f8:	pop	{pc}		; (ldr pc, [sp], #4)
   168fc:	str	fp, [sp, #-8]!
   16900:	str	lr, [sp, #4]
   16904:	add	fp, sp, #4
   16908:	sub	sp, sp, #8
   1690c:	str	r0, [fp, #-8]
   16910:	ldr	r0, [fp, #-8]
   16914:	bl	17b54 <__assert_fail@plt+0x6c38>
   16918:	mov	r3, r0
   1691c:	mov	r0, r3
   16920:	bl	168c0 <__assert_fail@plt+0x59a4>
   16924:	mov	r3, r0
   16928:	mov	r0, r3
   1692c:	sub	sp, fp, #4
   16930:	ldr	fp, [sp]
   16934:	add	sp, sp, #4
   16938:	pop	{pc}		; (ldr pc, [sp], #4)
   1693c:	str	fp, [sp, #-8]!
   16940:	str	lr, [sp, #4]
   16944:	add	fp, sp, #4
   16948:	sub	sp, sp, #8
   1694c:	str	r0, [fp, #-8]
   16950:	ldr	r0, [fp, #-8]
   16954:	bl	13528 <__assert_fail@plt+0x260c>
   16958:	mov	r3, r0
   1695c:	mov	r0, r3
   16960:	bl	168c0 <__assert_fail@plt+0x59a4>
   16964:	mov	r3, r0
   16968:	mov	r0, r3
   1696c:	sub	sp, fp, #4
   16970:	ldr	fp, [sp]
   16974:	add	sp, sp, #4
   16978:	pop	{pc}		; (ldr pc, [sp], #4)
   1697c:	str	fp, [sp, #-8]!
   16980:	str	lr, [sp, #4]
   16984:	add	fp, sp, #4
   16988:	sub	sp, sp, #8
   1698c:	str	r0, [fp, #-8]
   16990:	ldr	r0, [fp, #-8]
   16994:	bl	168fc <__assert_fail@plt+0x59e0>
   16998:	mov	r3, r0
   1699c:	mov	r0, r3
   169a0:	sub	sp, fp, #4
   169a4:	ldr	fp, [sp]
   169a8:	add	sp, sp, #4
   169ac:	pop	{pc}		; (ldr pc, [sp], #4)
   169b0:	str	fp, [sp, #-8]!
   169b4:	str	lr, [sp, #4]
   169b8:	add	fp, sp, #4
   169bc:	sub	sp, sp, #16
   169c0:	str	r0, [fp, #-16]
   169c4:	str	r1, [fp, #-20]	; 0xffffffec
   169c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   169cc:	ldr	r0, [fp, #-16]
   169d0:	bl	17be4 <__assert_fail@plt+0x6cc8>
   169d4:	str	r0, [fp, #-8]
   169d8:	ldr	r3, [fp, #-8]
   169dc:	cmp	r3, #0
   169e0:	bne	16a00 <__assert_fail@plt+0x5ae4>
   169e4:	ldr	r3, [fp, #-16]
   169e8:	cmp	r3, #0
   169ec:	beq	169fc <__assert_fail@plt+0x5ae0>
   169f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   169f4:	cmp	r3, #0
   169f8:	beq	16a00 <__assert_fail@plt+0x5ae4>
   169fc:	bl	17170 <__assert_fail@plt+0x6254>
   16a00:	ldr	r3, [fp, #-8]
   16a04:	mov	r0, r3
   16a08:	sub	sp, fp, #4
   16a0c:	ldr	fp, [sp]
   16a10:	add	sp, sp, #4
   16a14:	pop	{pc}		; (ldr pc, [sp], #4)
   16a18:	str	fp, [sp, #-8]!
   16a1c:	str	lr, [sp, #4]
   16a20:	add	fp, sp, #4
   16a24:	sub	sp, sp, #8
   16a28:	str	r0, [fp, #-8]
   16a2c:	str	r1, [fp, #-12]
   16a30:	ldr	r1, [fp, #-12]
   16a34:	ldr	r0, [fp, #-8]
   16a38:	bl	13560 <__assert_fail@plt+0x2644>
   16a3c:	mov	r3, r0
   16a40:	mov	r0, r3
   16a44:	bl	168c0 <__assert_fail@plt+0x59a4>
   16a48:	mov	r3, r0
   16a4c:	mov	r0, r3
   16a50:	sub	sp, fp, #4
   16a54:	ldr	fp, [sp]
   16a58:	add	sp, sp, #4
   16a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a60:	str	fp, [sp, #-8]!
   16a64:	str	lr, [sp, #4]
   16a68:	add	fp, sp, #4
   16a6c:	sub	sp, sp, #24
   16a70:	str	r0, [fp, #-16]
   16a74:	str	r1, [fp, #-20]	; 0xffffffec
   16a78:	str	r2, [fp, #-24]	; 0xffffffe8
   16a7c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16a80:	ldr	r1, [fp, #-20]	; 0xffffffec
   16a84:	ldr	r0, [fp, #-16]
   16a88:	bl	16008 <__assert_fail@plt+0x50ec>
   16a8c:	str	r0, [fp, #-8]
   16a90:	ldr	r3, [fp, #-8]
   16a94:	cmp	r3, #0
   16a98:	bne	16ac4 <__assert_fail@plt+0x5ba8>
   16a9c:	ldr	r3, [fp, #-16]
   16aa0:	cmp	r3, #0
   16aa4:	beq	16ac0 <__assert_fail@plt+0x5ba4>
   16aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16aac:	cmp	r3, #0
   16ab0:	beq	16ac4 <__assert_fail@plt+0x5ba8>
   16ab4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ab8:	cmp	r3, #0
   16abc:	beq	16ac4 <__assert_fail@plt+0x5ba8>
   16ac0:	bl	17170 <__assert_fail@plt+0x6254>
   16ac4:	ldr	r3, [fp, #-8]
   16ac8:	mov	r0, r3
   16acc:	sub	sp, fp, #4
   16ad0:	ldr	fp, [sp]
   16ad4:	add	sp, sp, #4
   16ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   16adc:	str	fp, [sp, #-8]!
   16ae0:	str	lr, [sp, #4]
   16ae4:	add	fp, sp, #4
   16ae8:	sub	sp, sp, #16
   16aec:	str	r0, [fp, #-8]
   16af0:	str	r1, [fp, #-12]
   16af4:	str	r2, [fp, #-16]
   16af8:	ldr	r2, [fp, #-16]
   16afc:	ldr	r1, [fp, #-12]
   16b00:	ldr	r0, [fp, #-8]
   16b04:	bl	13600 <__assert_fail@plt+0x26e4>
   16b08:	mov	r3, r0
   16b0c:	mov	r0, r3
   16b10:	bl	168c0 <__assert_fail@plt+0x59a4>
   16b14:	mov	r3, r0
   16b18:	mov	r0, r3
   16b1c:	sub	sp, fp, #4
   16b20:	ldr	fp, [sp]
   16b24:	add	sp, sp, #4
   16b28:	pop	{pc}		; (ldr pc, [sp], #4)
   16b2c:	str	fp, [sp, #-8]!
   16b30:	str	lr, [sp, #4]
   16b34:	add	fp, sp, #4
   16b38:	sub	sp, sp, #8
   16b3c:	str	r0, [fp, #-8]
   16b40:	str	r1, [fp, #-12]
   16b44:	ldr	r2, [fp, #-12]
   16b48:	ldr	r1, [fp, #-8]
   16b4c:	mov	r0, #0
   16b50:	bl	16a60 <__assert_fail@plt+0x5b44>
   16b54:	mov	r3, r0
   16b58:	mov	r0, r3
   16b5c:	sub	sp, fp, #4
   16b60:	ldr	fp, [sp]
   16b64:	add	sp, sp, #4
   16b68:	pop	{pc}		; (ldr pc, [sp], #4)
   16b6c:	str	fp, [sp, #-8]!
   16b70:	str	lr, [sp, #4]
   16b74:	add	fp, sp, #4
   16b78:	sub	sp, sp, #8
   16b7c:	str	r0, [fp, #-8]
   16b80:	str	r1, [fp, #-12]
   16b84:	ldr	r2, [fp, #-12]
   16b88:	ldr	r1, [fp, #-8]
   16b8c:	mov	r0, #0
   16b90:	bl	16adc <__assert_fail@plt+0x5bc0>
   16b94:	mov	r3, r0
   16b98:	mov	r0, r3
   16b9c:	sub	sp, fp, #4
   16ba0:	ldr	fp, [sp]
   16ba4:	add	sp, sp, #4
   16ba8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bac:	str	fp, [sp, #-8]!
   16bb0:	str	lr, [sp, #4]
   16bb4:	add	fp, sp, #4
   16bb8:	sub	sp, sp, #8
   16bbc:	str	r0, [fp, #-8]
   16bc0:	str	r1, [fp, #-12]
   16bc4:	mov	r2, #1
   16bc8:	ldr	r1, [fp, #-12]
   16bcc:	ldr	r0, [fp, #-8]
   16bd0:	bl	16bec <__assert_fail@plt+0x5cd0>
   16bd4:	mov	r3, r0
   16bd8:	mov	r0, r3
   16bdc:	sub	sp, fp, #4
   16be0:	ldr	fp, [sp]
   16be4:	add	sp, sp, #4
   16be8:	pop	{pc}		; (ldr pc, [sp], #4)
   16bec:	str	fp, [sp, #-8]!
   16bf0:	str	lr, [sp, #4]
   16bf4:	add	fp, sp, #4
   16bf8:	sub	sp, sp, #24
   16bfc:	str	r0, [fp, #-16]
   16c00:	str	r1, [fp, #-20]	; 0xffffffec
   16c04:	str	r2, [fp, #-24]	; 0xffffffe8
   16c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   16c0c:	ldr	r3, [r3]
   16c10:	str	r3, [fp, #-8]
   16c14:	ldr	r3, [fp, #-16]
   16c18:	cmp	r3, #0
   16c1c:	bne	16c64 <__assert_fail@plt+0x5d48>
   16c20:	ldr	r3, [fp, #-8]
   16c24:	cmp	r3, #0
   16c28:	bne	16ca0 <__assert_fail@plt+0x5d84>
   16c2c:	mov	r2, #64	; 0x40
   16c30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c34:	udiv	r3, r2, r3
   16c38:	str	r3, [fp, #-8]
   16c3c:	ldr	r3, [fp, #-8]
   16c40:	cmp	r3, #0
   16c44:	moveq	r3, #1
   16c48:	movne	r3, #0
   16c4c:	uxtb	r3, r3
   16c50:	mov	r2, r3
   16c54:	ldr	r3, [fp, #-8]
   16c58:	add	r3, r2, r3
   16c5c:	str	r3, [fp, #-8]
   16c60:	b	16ca0 <__assert_fail@plt+0x5d84>
   16c64:	ldr	r2, [fp, #-8]
   16c68:	ldr	r3, [fp, #-8]
   16c6c:	lsr	r3, r3, #1
   16c70:	add	r3, r3, #1
   16c74:	mov	r1, #0
   16c78:	adds	r3, r2, r3
   16c7c:	bcc	16c84 <__assert_fail@plt+0x5d68>
   16c80:	mov	r1, #1
   16c84:	str	r3, [fp, #-8]
   16c88:	mov	r3, r1
   16c8c:	and	r3, r3, #1
   16c90:	uxtb	r3, r3
   16c94:	cmp	r3, #0
   16c98:	beq	16ca0 <__assert_fail@plt+0x5d84>
   16c9c:	bl	17170 <__assert_fail@plt+0x6254>
   16ca0:	ldr	r3, [fp, #-8]
   16ca4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16ca8:	mov	r1, r3
   16cac:	ldr	r0, [fp, #-16]
   16cb0:	bl	16a60 <__assert_fail@plt+0x5b44>
   16cb4:	str	r0, [fp, #-16]
   16cb8:	ldr	r2, [fp, #-8]
   16cbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cc0:	str	r2, [r3]
   16cc4:	ldr	r3, [fp, #-16]
   16cc8:	mov	r0, r3
   16ccc:	sub	sp, fp, #4
   16cd0:	ldr	fp, [sp]
   16cd4:	add	sp, sp, #4
   16cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16cdc:	str	fp, [sp, #-8]!
   16ce0:	str	lr, [sp, #4]
   16ce4:	add	fp, sp, #4
   16ce8:	sub	sp, sp, #32
   16cec:	str	r0, [fp, #-24]	; 0xffffffe8
   16cf0:	str	r1, [fp, #-28]	; 0xffffffe4
   16cf4:	str	r2, [fp, #-32]	; 0xffffffe0
   16cf8:	str	r3, [fp, #-36]	; 0xffffffdc
   16cfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d00:	ldr	r3, [r3]
   16d04:	str	r3, [fp, #-8]
   16d08:	ldr	r3, [fp, #-8]
   16d0c:	asr	r3, r3, #1
   16d10:	mov	r1, #0
   16d14:	ldr	r2, [fp, #-8]
   16d18:	adds	r3, r2, r3
   16d1c:	bvc	16d24 <__assert_fail@plt+0x5e08>
   16d20:	mov	r1, #1
   16d24:	str	r3, [fp, #-16]
   16d28:	mov	r3, r1
   16d2c:	and	r3, r3, #1
   16d30:	uxtb	r3, r3
   16d34:	cmp	r3, #0
   16d38:	beq	16d44 <__assert_fail@plt+0x5e28>
   16d3c:	mvn	r3, #-2147483648	; 0x80000000
   16d40:	str	r3, [fp, #-16]
   16d44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16d48:	cmp	r3, #0
   16d4c:	blt	16d68 <__assert_fail@plt+0x5e4c>
   16d50:	ldr	r3, [fp, #-16]
   16d54:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16d58:	cmp	r2, r3
   16d5c:	bge	16d68 <__assert_fail@plt+0x5e4c>
   16d60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16d64:	str	r3, [fp, #-16]
   16d68:	ldr	r2, [fp, #-16]
   16d6c:	mov	lr, #0
   16d70:	ldr	r3, [fp, #4]
   16d74:	smull	r2, r3, r2, r3
   16d78:	mov	r0, #0
   16d7c:	mov	r1, #0
   16d80:	mov	r0, r3
   16d84:	asr	r1, r3, #31
   16d88:	asr	ip, r2, #31
   16d8c:	cmp	ip, r0
   16d90:	beq	16d98 <__assert_fail@plt+0x5e7c>
   16d94:	mov	lr, #1
   16d98:	mov	r3, r2
   16d9c:	str	r3, [fp, #-20]	; 0xffffffec
   16da0:	mov	r3, lr
   16da4:	and	r3, r3, #1
   16da8:	uxtb	r3, r3
   16dac:	cmp	r3, #0
   16db0:	beq	16dbc <__assert_fail@plt+0x5ea0>
   16db4:	mvn	r3, #-2147483648	; 0x80000000
   16db8:	b	16dd4 <__assert_fail@plt+0x5eb8>
   16dbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16dc0:	cmp	r3, #63	; 0x3f
   16dc4:	bgt	16dd0 <__assert_fail@plt+0x5eb4>
   16dc8:	mov	r3, #64	; 0x40
   16dcc:	b	16dd4 <__assert_fail@plt+0x5eb8>
   16dd0:	mov	r3, #0
   16dd4:	str	r3, [fp, #-12]
   16dd8:	ldr	r3, [fp, #-12]
   16ddc:	cmp	r3, #0
   16de0:	beq	16e18 <__assert_fail@plt+0x5efc>
   16de4:	ldr	r2, [fp, #-12]
   16de8:	ldr	r3, [fp, #4]
   16dec:	sdiv	r3, r2, r3
   16df0:	str	r3, [fp, #-16]
   16df4:	ldr	r3, [fp, #-12]
   16df8:	ldr	r2, [fp, #4]
   16dfc:	sdiv	r2, r3, r2
   16e00:	ldr	r1, [fp, #4]
   16e04:	mul	r2, r1, r2
   16e08:	sub	r3, r3, r2
   16e0c:	ldr	r2, [fp, #-12]
   16e10:	sub	r3, r2, r3
   16e14:	str	r3, [fp, #-20]	; 0xffffffec
   16e18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e1c:	cmp	r3, #0
   16e20:	bne	16e30 <__assert_fail@plt+0x5f14>
   16e24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16e28:	mov	r2, #0
   16e2c:	str	r2, [r3]
   16e30:	ldr	r2, [fp, #-16]
   16e34:	ldr	r3, [fp, #-8]
   16e38:	sub	r3, r2, r3
   16e3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e40:	cmp	r2, r3
   16e44:	ble	16ee4 <__assert_fail@plt+0x5fc8>
   16e48:	mov	r1, #0
   16e4c:	ldr	r2, [fp, #-8]
   16e50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16e54:	adds	r3, r2, r3
   16e58:	bvc	16e60 <__assert_fail@plt+0x5f44>
   16e5c:	mov	r1, #1
   16e60:	str	r3, [fp, #-16]
   16e64:	mov	r3, r1
   16e68:	and	r3, r3, #1
   16e6c:	uxtb	r3, r3
   16e70:	cmp	r3, #0
   16e74:	bne	16ee0 <__assert_fail@plt+0x5fc4>
   16e78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16e7c:	cmp	r3, #0
   16e80:	blt	16e94 <__assert_fail@plt+0x5f78>
   16e84:	ldr	r3, [fp, #-16]
   16e88:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16e8c:	cmp	r2, r3
   16e90:	blt	16ee0 <__assert_fail@plt+0x5fc4>
   16e94:	ldr	r2, [fp, #-16]
   16e98:	mov	lr, #0
   16e9c:	ldr	r3, [fp, #4]
   16ea0:	smull	r2, r3, r2, r3
   16ea4:	mov	r0, #0
   16ea8:	mov	r1, #0
   16eac:	mov	r0, r3
   16eb0:	asr	r1, r3, #31
   16eb4:	asr	ip, r2, #31
   16eb8:	cmp	ip, r0
   16ebc:	beq	16ec4 <__assert_fail@plt+0x5fa8>
   16ec0:	mov	lr, #1
   16ec4:	mov	r3, r2
   16ec8:	str	r3, [fp, #-20]	; 0xffffffec
   16ecc:	mov	r3, lr
   16ed0:	and	r3, r3, #1
   16ed4:	uxtb	r3, r3
   16ed8:	cmp	r3, #0
   16edc:	beq	16ee4 <__assert_fail@plt+0x5fc8>
   16ee0:	bl	17170 <__assert_fail@plt+0x6254>
   16ee4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ee8:	mov	r1, r3
   16eec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ef0:	bl	169b0 <__assert_fail@plt+0x5a94>
   16ef4:	str	r0, [fp, #-24]	; 0xffffffe8
   16ef8:	ldr	r2, [fp, #-16]
   16efc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16f00:	str	r2, [r3]
   16f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16f08:	mov	r0, r3
   16f0c:	sub	sp, fp, #4
   16f10:	ldr	fp, [sp]
   16f14:	add	sp, sp, #4
   16f18:	pop	{pc}		; (ldr pc, [sp], #4)
   16f1c:	str	fp, [sp, #-8]!
   16f20:	str	lr, [sp, #4]
   16f24:	add	fp, sp, #4
   16f28:	sub	sp, sp, #8
   16f2c:	str	r0, [fp, #-8]
   16f30:	mov	r1, #1
   16f34:	ldr	r0, [fp, #-8]
   16f38:	bl	16f8c <__assert_fail@plt+0x6070>
   16f3c:	mov	r3, r0
   16f40:	mov	r0, r3
   16f44:	sub	sp, fp, #4
   16f48:	ldr	fp, [sp]
   16f4c:	add	sp, sp, #4
   16f50:	pop	{pc}		; (ldr pc, [sp], #4)
   16f54:	str	fp, [sp, #-8]!
   16f58:	str	lr, [sp, #4]
   16f5c:	add	fp, sp, #4
   16f60:	sub	sp, sp, #8
   16f64:	str	r0, [fp, #-8]
   16f68:	mov	r1, #1
   16f6c:	ldr	r0, [fp, #-8]
   16f70:	bl	16fd4 <__assert_fail@plt+0x60b8>
   16f74:	mov	r3, r0
   16f78:	mov	r0, r3
   16f7c:	sub	sp, fp, #4
   16f80:	ldr	fp, [sp]
   16f84:	add	sp, sp, #4
   16f88:	pop	{pc}		; (ldr pc, [sp], #4)
   16f8c:	str	fp, [sp, #-8]!
   16f90:	str	lr, [sp, #4]
   16f94:	add	fp, sp, #4
   16f98:	sub	sp, sp, #8
   16f9c:	str	r0, [fp, #-8]
   16fa0:	str	r1, [fp, #-12]
   16fa4:	ldr	r1, [fp, #-12]
   16fa8:	ldr	r0, [fp, #-8]
   16fac:	bl	17a84 <__assert_fail@plt+0x6b68>
   16fb0:	mov	r3, r0
   16fb4:	mov	r0, r3
   16fb8:	bl	168c0 <__assert_fail@plt+0x59a4>
   16fbc:	mov	r3, r0
   16fc0:	mov	r0, r3
   16fc4:	sub	sp, fp, #4
   16fc8:	ldr	fp, [sp]
   16fcc:	add	sp, sp, #4
   16fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd4:	str	fp, [sp, #-8]!
   16fd8:	str	lr, [sp, #4]
   16fdc:	add	fp, sp, #4
   16fe0:	sub	sp, sp, #8
   16fe4:	str	r0, [fp, #-8]
   16fe8:	str	r1, [fp, #-12]
   16fec:	ldr	r1, [fp, #-12]
   16ff0:	ldr	r0, [fp, #-8]
   16ff4:	bl	135bc <__assert_fail@plt+0x26a0>
   16ff8:	mov	r3, r0
   16ffc:	mov	r0, r3
   17000:	bl	168c0 <__assert_fail@plt+0x59a4>
   17004:	mov	r3, r0
   17008:	mov	r0, r3
   1700c:	sub	sp, fp, #4
   17010:	ldr	fp, [sp]
   17014:	add	sp, sp, #4
   17018:	pop	{pc}		; (ldr pc, [sp], #4)
   1701c:	str	fp, [sp, #-8]!
   17020:	str	lr, [sp, #4]
   17024:	add	fp, sp, #4
   17028:	sub	sp, sp, #8
   1702c:	str	r0, [fp, #-8]
   17030:	str	r1, [fp, #-12]
   17034:	ldr	r0, [fp, #-12]
   17038:	bl	168fc <__assert_fail@plt+0x59e0>
   1703c:	mov	r3, r0
   17040:	ldr	r2, [fp, #-12]
   17044:	ldr	r1, [fp, #-8]
   17048:	mov	r0, r3
   1704c:	bl	10d18 <memcpy@plt>
   17050:	mov	r3, r0
   17054:	mov	r0, r3
   17058:	sub	sp, fp, #4
   1705c:	ldr	fp, [sp]
   17060:	add	sp, sp, #4
   17064:	pop	{pc}		; (ldr pc, [sp], #4)
   17068:	str	fp, [sp, #-8]!
   1706c:	str	lr, [sp, #4]
   17070:	add	fp, sp, #4
   17074:	sub	sp, sp, #8
   17078:	str	r0, [fp, #-8]
   1707c:	str	r1, [fp, #-12]
   17080:	ldr	r0, [fp, #-12]
   17084:	bl	1693c <__assert_fail@plt+0x5a20>
   17088:	mov	r3, r0
   1708c:	mov	r0, r3
   17090:	ldr	r3, [fp, #-12]
   17094:	mov	r2, r3
   17098:	ldr	r1, [fp, #-8]
   1709c:	bl	10d18 <memcpy@plt>
   170a0:	mov	r3, r0
   170a4:	mov	r0, r3
   170a8:	sub	sp, fp, #4
   170ac:	ldr	fp, [sp]
   170b0:	add	sp, sp, #4
   170b4:	pop	{pc}		; (ldr pc, [sp], #4)
   170b8:	str	fp, [sp, #-8]!
   170bc:	str	lr, [sp, #4]
   170c0:	add	fp, sp, #4
   170c4:	sub	sp, sp, #16
   170c8:	str	r0, [fp, #-16]
   170cc:	str	r1, [fp, #-20]	; 0xffffffec
   170d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170d4:	add	r3, r3, #1
   170d8:	mov	r0, r3
   170dc:	bl	1693c <__assert_fail@plt+0x5a20>
   170e0:	mov	r3, r0
   170e4:	str	r3, [fp, #-8]
   170e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   170ec:	ldr	r2, [fp, #-8]
   170f0:	add	r3, r2, r3
   170f4:	mov	r2, #0
   170f8:	strb	r2, [r3]
   170fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17100:	mov	r2, r3
   17104:	ldr	r1, [fp, #-16]
   17108:	ldr	r0, [fp, #-8]
   1710c:	bl	10d18 <memcpy@plt>
   17110:	mov	r3, r0
   17114:	mov	r0, r3
   17118:	sub	sp, fp, #4
   1711c:	ldr	fp, [sp]
   17120:	add	sp, sp, #4
   17124:	pop	{pc}		; (ldr pc, [sp], #4)
   17128:	str	fp, [sp, #-8]!
   1712c:	str	lr, [sp, #4]
   17130:	add	fp, sp, #4
   17134:	sub	sp, sp, #8
   17138:	str	r0, [fp, #-8]
   1713c:	ldr	r0, [fp, #-8]
   17140:	bl	10e2c <strlen@plt>
   17144:	mov	r3, r0
   17148:	add	r3, r3, #1
   1714c:	mov	r1, r3
   17150:	ldr	r0, [fp, #-8]
   17154:	bl	1701c <__assert_fail@plt+0x6100>
   17158:	mov	r3, r0
   1715c:	mov	r0, r3
   17160:	sub	sp, fp, #4
   17164:	ldr	fp, [sp]
   17168:	add	sp, sp, #4
   1716c:	pop	{pc}		; (ldr pc, [sp], #4)
   17170:	strd	r4, [sp, #-16]!
   17174:	str	fp, [sp, #8]
   17178:	str	lr, [sp, #12]
   1717c:	add	fp, sp, #12
   17180:	movw	r3, #41200	; 0xa0f0
   17184:	movt	r3, #2
   17188:	ldr	r4, [r3]
   1718c:	movw	r0, #37872	; 0x93f0
   17190:	movt	r0, #1
   17194:	bl	10e20 <gettext@plt>
   17198:	mov	r3, r0
   1719c:	movw	r2, #37892	; 0x9404
   171a0:	movt	r2, #1
   171a4:	mov	r1, #0
   171a8:	mov	r0, r4
   171ac:	bl	10dc0 <error@plt>
   171b0:	bl	10f04 <abort@plt>
   171b4:	push	{fp}		; (str fp, [sp, #-4]!)
   171b8:	add	fp, sp, #0
   171bc:	nop	{0}
   171c0:	add	sp, fp, #0
   171c4:	pop	{fp}		; (ldr fp, [sp], #4)
   171c8:	bx	lr
   171cc:	str	fp, [sp, #-8]!
   171d0:	str	lr, [sp, #4]
   171d4:	add	fp, sp, #4
   171d8:	sub	sp, sp, #8
   171dc:	str	r0, [fp, #-8]
   171e0:	str	r1, [fp, #-12]
   171e4:	ldr	r1, [fp, #-12]
   171e8:	ldr	r0, [fp, #-8]
   171ec:	bl	17cc4 <__assert_fail@plt+0x6da8>
   171f0:	mov	r3, r0
   171f4:	cmp	r3, #0
   171f8:	bge	17200 <__assert_fail@plt+0x62e4>
   171fc:	bl	171b4 <__assert_fail@plt+0x6298>
   17200:	nop	{0}
   17204:	sub	sp, fp, #4
   17208:	ldr	fp, [sp]
   1720c:	add	sp, sp, #4
   17210:	pop	{pc}		; (ldr pc, [sp], #4)
   17214:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17218:	strd	r6, [sp, #8]
   1721c:	strd	r8, [sp, #16]
   17220:	str	fp, [sp, #24]
   17224:	str	lr, [sp, #28]
   17228:	add	fp, sp, #28
   1722c:	sub	sp, sp, #72	; 0x48
   17230:	str	r0, [fp, #-40]	; 0xffffffd8
   17234:	str	r1, [fp, #-44]	; 0xffffffd4
   17238:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1723c:	ldrd	r6, [r3]
   17240:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17244:	mov	r8, r3
   17248:	asr	r9, r8, #31
   1724c:	mov	r2, #0
   17250:	mov	r3, #0
   17254:	strd	r2, [fp, #-60]	; 0xffffffc4
   17258:	mov	r0, #0
   1725c:	mov	r1, #0
   17260:	mov	r0, r7
   17264:	asr	r1, r7, #31
   17268:	asr	ip, r6, #31
   1726c:	mov	r2, #0
   17270:	mov	r3, #0
   17274:	mov	r2, r9
   17278:	asr	r3, r9, #31
   1727c:	cmp	ip, r0
   17280:	bne	17290 <__assert_fail@plt+0x6374>
   17284:	smull	r2, r3, r6, r8
   17288:	strd	r2, [fp, #-52]	; 0xffffffcc
   1728c:	b	173a4 <__assert_fail@plt+0x6488>
   17290:	strd	r6, [fp, #-92]	; 0xffffffa4
   17294:	mov	ip, r0
   17298:	mov	lr, r8
   1729c:	umull	r2, r3, r6, r8
   172a0:	strd	r2, [fp, #-100]	; 0xffffff9c
   172a4:	umull	r2, r3, lr, ip
   172a8:	mov	r0, r2
   172ac:	mov	r1, r3
   172b0:	cmp	ip, #0
   172b4:	bge	172e4 <__assert_fail@plt+0x63c8>
   172b8:	mov	r2, lr
   172bc:	mov	r3, #0
   172c0:	mov	r4, #0
   172c4:	mov	r5, #0
   172c8:	mov	r5, r2
   172cc:	mov	r4, #0
   172d0:	subs	r3, r0, r4
   172d4:	str	r3, [fp, #-68]	; 0xffffffbc
   172d8:	sbc	r3, r1, r5
   172dc:	str	r3, [fp, #-64]	; 0xffffffc0
   172e0:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   172e4:	cmp	lr, #0
   172e8:	bge	17308 <__assert_fail@plt+0x63ec>
   172ec:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   172f0:	mov	ip, r2
   172f4:	subs	ip, r0, ip
   172f8:	str	ip, [fp, #-76]	; 0xffffffb4
   172fc:	sbc	r3, r1, r3
   17300:	str	r3, [fp, #-72]	; 0xffffffb8
   17304:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   17308:	mov	r2, #0
   1730c:	mov	r3, #0
   17310:	ldrd	r4, [fp, #-100]	; 0xffffff9c
   17314:	mov	ip, r5
   17318:	mov	r2, ip
   1731c:	mov	r3, #0
   17320:	adds	ip, r0, r2
   17324:	str	ip, [fp, #-84]	; 0xffffffac
   17328:	adc	r3, r1, r3
   1732c:	str	r3, [fp, #-80]	; 0xffffffb0
   17330:	ldrd	r0, [fp, #-84]	; 0xffffffac
   17334:	mov	r2, #0
   17338:	mov	r3, #0
   1733c:	mov	r2, r1
   17340:	asr	r3, r1, #31
   17344:	asr	ip, r0, #31
   17348:	cmp	ip, r2
   1734c:	bne	1737c <__assert_fail@plt+0x6460>
   17350:	mov	r2, #0
   17354:	mov	r3, #0
   17358:	mov	r3, r0
   1735c:	mov	r2, #0
   17360:	mov	r0, r4
   17364:	mov	r1, #0
   17368:	orr	ip, r2, r0
   1736c:	str	ip, [fp, #-52]	; 0xffffffcc
   17370:	orr	r3, r3, r1
   17374:	str	r3, [fp, #-48]	; 0xffffffd0
   17378:	b	173a4 <__assert_fail@plt+0x6488>
   1737c:	mul	r2, r8, r7
   17380:	mul	r3, r6, r9
   17384:	add	r1, r2, r3
   17388:	umull	r2, r3, r6, r8
   1738c:	add	r1, r1, r3
   17390:	mov	r3, r1
   17394:	strd	r2, [fp, #-52]	; 0xffffffcc
   17398:	mov	r2, #1
   1739c:	mov	r3, #0
   173a0:	strd	r2, [fp, #-60]	; 0xffffffc4
   173a4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   173a8:	strd	r2, [fp, #-36]	; 0xffffffdc
   173ac:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   173b0:	mov	r3, r2
   173b4:	and	r3, r3, #1
   173b8:	uxtb	r3, r3
   173bc:	cmp	r3, #0
   173c0:	beq	173fc <__assert_fail@plt+0x64e0>
   173c4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   173c8:	ldrd	r2, [r3]
   173cc:	cmp	r2, #0
   173d0:	sbcs	r3, r3, #0
   173d4:	bge	173e4 <__assert_fail@plt+0x64c8>
   173d8:	mov	r2, #0
   173dc:	mov	r3, #-2147483648	; 0x80000000
   173e0:	b	173ec <__assert_fail@plt+0x64d0>
   173e4:	mvn	r2, #0
   173e8:	mvn	r3, #-2147483648	; 0x80000000
   173ec:	ldr	r1, [fp, #-40]	; 0xffffffd8
   173f0:	strd	r2, [r1]
   173f4:	mov	r3, #1
   173f8:	b	1740c <__assert_fail@plt+0x64f0>
   173fc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17400:	ldr	r1, [fp, #-40]	; 0xffffffd8
   17404:	strd	r2, [r1]
   17408:	mov	r3, #0
   1740c:	mov	r0, r3
   17410:	sub	sp, fp, #28
   17414:	ldrd	r4, [sp]
   17418:	ldrd	r6, [sp, #8]
   1741c:	ldrd	r8, [sp, #16]
   17420:	ldr	fp, [sp, #24]
   17424:	add	sp, sp, #28
   17428:	pop	{pc}		; (ldr pc, [sp], #4)
   1742c:	str	fp, [sp, #-8]!
   17430:	str	lr, [sp, #4]
   17434:	add	fp, sp, #4
   17438:	sub	sp, sp, #24
   1743c:	str	r0, [fp, #-16]
   17440:	str	r1, [fp, #-20]	; 0xffffffec
   17444:	str	r2, [fp, #-24]	; 0xffffffe8
   17448:	mov	r3, #0
   1744c:	str	r3, [fp, #-8]
   17450:	b	17470 <__assert_fail@plt+0x6554>
   17454:	ldr	r1, [fp, #-20]	; 0xffffffec
   17458:	ldr	r0, [fp, #-16]
   1745c:	bl	17214 <__assert_fail@plt+0x62f8>
   17460:	mov	r2, r0
   17464:	ldr	r3, [fp, #-8]
   17468:	orr	r3, r3, r2
   1746c:	str	r3, [fp, #-8]
   17470:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17474:	sub	r2, r3, #1
   17478:	str	r2, [fp, #-24]	; 0xffffffe8
   1747c:	cmp	r3, #0
   17480:	bne	17454 <__assert_fail@plt+0x6538>
   17484:	ldr	r3, [fp, #-8]
   17488:	mov	r0, r3
   1748c:	sub	sp, fp, #4
   17490:	ldr	fp, [sp]
   17494:	add	sp, sp, #4
   17498:	pop	{pc}		; (ldr pc, [sp], #4)
   1749c:	str	fp, [sp, #-8]!
   174a0:	str	lr, [sp, #4]
   174a4:	add	fp, sp, #4
   174a8:	sub	sp, sp, #48	; 0x30
   174ac:	str	r0, [fp, #-40]	; 0xffffffd8
   174b0:	str	r1, [fp, #-44]	; 0xffffffd4
   174b4:	str	r2, [fp, #-48]	; 0xffffffd0
   174b8:	str	r3, [fp, #-52]	; 0xffffffcc
   174bc:	mov	r3, #0
   174c0:	str	r3, [fp, #-8]
   174c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   174c8:	cmp	r3, #0
   174cc:	blt	174dc <__assert_fail@plt+0x65c0>
   174d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   174d4:	cmp	r3, #36	; 0x24
   174d8:	ble	174fc <__assert_fail@plt+0x65e0>
   174dc:	movw	r3, #37952	; 0x9440
   174e0:	movt	r3, #1
   174e4:	mov	r2, #85	; 0x55
   174e8:	movw	r1, #37896	; 0x9408
   174ec:	movt	r1, #1
   174f0:	movw	r0, #37912	; 0x9418
   174f4:	movt	r0, #1
   174f8:	bl	10f1c <__assert_fail@plt>
   174fc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17500:	cmp	r3, #0
   17504:	bne	17510 <__assert_fail@plt+0x65f4>
   17508:	sub	r3, fp, #28
   1750c:	b	17514 <__assert_fail@plt+0x65f8>
   17510:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17514:	str	r3, [fp, #-24]	; 0xffffffe8
   17518:	bl	10e50 <__errno_location@plt>
   1751c:	mov	r2, r0
   17520:	mov	r3, #0
   17524:	str	r3, [r2]
   17528:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1752c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17530:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17534:	bl	10e8c <strtoimax@plt>
   17538:	mov	r2, r0
   1753c:	mov	r3, r1
   17540:	strd	r2, [fp, #-36]	; 0xffffffdc
   17544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17548:	ldr	r3, [r3]
   1754c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17550:	cmp	r2, r3
   17554:	bne	175b4 <__assert_fail@plt+0x6698>
   17558:	ldr	r3, [fp, #4]
   1755c:	cmp	r3, #0
   17560:	beq	175ac <__assert_fail@plt+0x6690>
   17564:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17568:	ldr	r3, [r3]
   1756c:	ldrb	r3, [r3]
   17570:	cmp	r3, #0
   17574:	beq	175ac <__assert_fail@plt+0x6690>
   17578:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1757c:	ldr	r3, [r3]
   17580:	ldrb	r3, [r3]
   17584:	mov	r1, r3
   17588:	ldr	r0, [fp, #4]
   1758c:	bl	10e38 <strchr@plt>
   17590:	mov	r3, r0
   17594:	cmp	r3, #0
   17598:	beq	175ac <__assert_fail@plt+0x6690>
   1759c:	mov	r2, #1
   175a0:	mov	r3, #0
   175a4:	strd	r2, [fp, #-36]	; 0xffffffdc
   175a8:	b	175ec <__assert_fail@plt+0x66d0>
   175ac:	mov	r3, #4
   175b0:	b	17a70 <__assert_fail@plt+0x6b54>
   175b4:	bl	10e50 <__errno_location@plt>
   175b8:	mov	r3, r0
   175bc:	ldr	r3, [r3]
   175c0:	cmp	r3, #0
   175c4:	beq	175ec <__assert_fail@plt+0x66d0>
   175c8:	bl	10e50 <__errno_location@plt>
   175cc:	mov	r3, r0
   175d0:	ldr	r3, [r3]
   175d4:	cmp	r3, #34	; 0x22
   175d8:	beq	175e4 <__assert_fail@plt+0x66c8>
   175dc:	mov	r3, #4
   175e0:	b	17a70 <__assert_fail@plt+0x6b54>
   175e4:	mov	r3, #1
   175e8:	str	r3, [fp, #-8]
   175ec:	ldr	r3, [fp, #4]
   175f0:	cmp	r3, #0
   175f4:	bne	1760c <__assert_fail@plt+0x66f0>
   175f8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   175fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17600:	strd	r2, [r1]
   17604:	ldr	r3, [fp, #-8]
   17608:	b	17a70 <__assert_fail@plt+0x6b54>
   1760c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17610:	ldr	r3, [r3]
   17614:	ldrb	r3, [r3]
   17618:	cmp	r3, #0
   1761c:	beq	17a60 <__assert_fail@plt+0x6b44>
   17620:	mov	r3, #1024	; 0x400
   17624:	str	r3, [fp, #-12]
   17628:	mov	r3, #1
   1762c:	str	r3, [fp, #-16]
   17630:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17634:	ldr	r3, [r3]
   17638:	ldrb	r3, [r3]
   1763c:	mov	r1, r3
   17640:	ldr	r0, [fp, #4]
   17644:	bl	10e38 <strchr@plt>
   17648:	mov	r3, r0
   1764c:	cmp	r3, #0
   17650:	bne	1766c <__assert_fail@plt+0x6750>
   17654:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17658:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1765c:	strd	r2, [r1]
   17660:	ldr	r3, [fp, #-8]
   17664:	orr	r3, r3, #2
   17668:	b	17a70 <__assert_fail@plt+0x6b54>
   1766c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17670:	ldr	r3, [r3]
   17674:	ldrb	r3, [r3]
   17678:	sub	r3, r3, #69	; 0x45
   1767c:	cmp	r3, #47	; 0x2f
   17680:	ldrls	pc, [pc, r3, lsl #2]
   17684:	b	177d8 <__assert_fail@plt+0x68bc>
   17688:	andeq	r7, r1, r8, asr #14
   1768c:	ldrdeq	r7, [r1], -r8
   17690:	andeq	r7, r1, r8, asr #14
   17694:	ldrdeq	r7, [r1], -r8
   17698:	ldrdeq	r7, [r1], -r8
   1769c:	ldrdeq	r7, [r1], -r8
   176a0:	andeq	r7, r1, r8, asr #14
   176a4:	ldrdeq	r7, [r1], -r8
   176a8:	andeq	r7, r1, r8, asr #14
   176ac:	ldrdeq	r7, [r1], -r8
   176b0:	ldrdeq	r7, [r1], -r8
   176b4:	andeq	r7, r1, r8, asr #14
   176b8:	ldrdeq	r7, [r1], -r8
   176bc:	ldrdeq	r7, [r1], -r8
   176c0:	ldrdeq	r7, [r1], -r8
   176c4:	andeq	r7, r1, r8, asr #14
   176c8:	ldrdeq	r7, [r1], -r8
   176cc:	ldrdeq	r7, [r1], -r8
   176d0:	ldrdeq	r7, [r1], -r8
   176d4:	ldrdeq	r7, [r1], -r8
   176d8:	andeq	r7, r1, r8, asr #14
   176dc:	andeq	r7, r1, r8, asr #14
   176e0:	ldrdeq	r7, [r1], -r8
   176e4:	ldrdeq	r7, [r1], -r8
   176e8:	ldrdeq	r7, [r1], -r8
   176ec:	ldrdeq	r7, [r1], -r8
   176f0:	ldrdeq	r7, [r1], -r8
   176f4:	ldrdeq	r7, [r1], -r8
   176f8:	ldrdeq	r7, [r1], -r8
   176fc:	ldrdeq	r7, [r1], -r8
   17700:	ldrdeq	r7, [r1], -r8
   17704:	ldrdeq	r7, [r1], -r8
   17708:	ldrdeq	r7, [r1], -r8
   1770c:	ldrdeq	r7, [r1], -r8
   17710:	andeq	r7, r1, r8, asr #14
   17714:	ldrdeq	r7, [r1], -r8
   17718:	ldrdeq	r7, [r1], -r8
   1771c:	ldrdeq	r7, [r1], -r8
   17720:	andeq	r7, r1, r8, asr #14
   17724:	ldrdeq	r7, [r1], -r8
   17728:	andeq	r7, r1, r8, asr #14
   1772c:	ldrdeq	r7, [r1], -r8
   17730:	ldrdeq	r7, [r1], -r8
   17734:	ldrdeq	r7, [r1], -r8
   17738:	ldrdeq	r7, [r1], -r8
   1773c:	ldrdeq	r7, [r1], -r8
   17740:	ldrdeq	r7, [r1], -r8
   17744:	andeq	r7, r1, r8, asr #14
   17748:	mov	r1, #48	; 0x30
   1774c:	ldr	r0, [fp, #4]
   17750:	bl	10e38 <strchr@plt>
   17754:	mov	r3, r0
   17758:	cmp	r3, #0
   1775c:	beq	177cc <__assert_fail@plt+0x68b0>
   17760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17764:	ldr	r3, [r3]
   17768:	add	r3, r3, #1
   1776c:	ldrb	r3, [r3]
   17770:	cmp	r3, #68	; 0x44
   17774:	beq	177b4 <__assert_fail@plt+0x6898>
   17778:	cmp	r3, #105	; 0x69
   1777c:	beq	1778c <__assert_fail@plt+0x6870>
   17780:	cmp	r3, #66	; 0x42
   17784:	beq	177b4 <__assert_fail@plt+0x6898>
   17788:	b	177d8 <__assert_fail@plt+0x68bc>
   1778c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17790:	ldr	r3, [r3]
   17794:	add	r3, r3, #2
   17798:	ldrb	r3, [r3]
   1779c:	cmp	r3, #66	; 0x42
   177a0:	bne	177d4 <__assert_fail@plt+0x68b8>
   177a4:	ldr	r3, [fp, #-16]
   177a8:	add	r3, r3, #2
   177ac:	str	r3, [fp, #-16]
   177b0:	b	177d4 <__assert_fail@plt+0x68b8>
   177b4:	mov	r3, #1000	; 0x3e8
   177b8:	str	r3, [fp, #-12]
   177bc:	ldr	r3, [fp, #-16]
   177c0:	add	r3, r3, #1
   177c4:	str	r3, [fp, #-16]
   177c8:	b	177d8 <__assert_fail@plt+0x68bc>
   177cc:	nop	{0}
   177d0:	b	177d8 <__assert_fail@plt+0x68bc>
   177d4:	nop	{0}
   177d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177dc:	ldr	r3, [r3]
   177e0:	ldrb	r3, [r3]
   177e4:	sub	r3, r3, #66	; 0x42
   177e8:	cmp	r3, #53	; 0x35
   177ec:	ldrls	pc, [pc, r3, lsl #2]
   177f0:	b	17a00 <__assert_fail@plt+0x6ae4>
   177f4:	andeq	r7, r1, r4, ror #17
   177f8:	andeq	r7, r1, r0, lsl #20
   177fc:	andeq	r7, r1, r0, lsl #20
   17800:	andeq	r7, r1, r8, lsl #18
   17804:	andeq	r7, r1, r0, lsl #20
   17808:	andeq	r7, r1, r4, lsr #18
   1780c:	andeq	r7, r1, r0, lsl #20
   17810:	andeq	r7, r1, r0, lsl #20
   17814:	andeq	r7, r1, r0, lsl #20
   17818:	andeq	r7, r1, r0, asr #18
   1781c:	andeq	r7, r1, r0, lsl #20
   17820:	andeq	r7, r1, ip, asr r9
   17824:	andeq	r7, r1, r0, lsl #20
   17828:	andeq	r7, r1, r0, lsl #20
   1782c:	andeq	r7, r1, r8, ror r9
   17830:	andeq	r7, r1, r0, lsl #20
   17834:	andeq	r7, r1, r0, lsl #20
   17838:	andeq	r7, r1, r0, lsl #20
   1783c:	muleq	r1, r4, r9
   17840:	andeq	r7, r1, r0, lsl #20
   17844:	andeq	r7, r1, r0, lsl #20
   17848:	andeq	r7, r1, r0, lsl #20
   1784c:	andeq	r7, r1, r0, lsl #20
   17850:	andeq	r7, r1, r8, asr #19
   17854:	andeq	r7, r1, r4, ror #19
   17858:	andeq	r7, r1, r0, lsl #20
   1785c:	andeq	r7, r1, r0, lsl #20
   17860:	andeq	r7, r1, r0, lsl #20
   17864:	andeq	r7, r1, r0, lsl #20
   17868:	andeq	r7, r1, r0, lsl #20
   1786c:	andeq	r7, r1, r0, lsl #20
   17870:	andeq	r7, r1, r0, lsl #20
   17874:	andeq	r7, r1, ip, asr #17
   17878:	strdeq	r7, [r1], -ip
   1787c:	andeq	r7, r1, r0, lsl #20
   17880:	andeq	r7, r1, r0, lsl #20
   17884:	andeq	r7, r1, r0, lsl #20
   17888:	andeq	r7, r1, r4, lsr #18
   1788c:	andeq	r7, r1, r0, lsl #20
   17890:	andeq	r7, r1, r0, lsl #20
   17894:	andeq	r7, r1, r0, lsl #20
   17898:	andeq	r7, r1, r0, asr #18
   1789c:	andeq	r7, r1, r0, lsl #20
   178a0:	andeq	r7, r1, ip, asr r9
   178a4:	andeq	r7, r1, r0, lsl #20
   178a8:	andeq	r7, r1, r0, lsl #20
   178ac:	andeq	r7, r1, r0, lsl #20
   178b0:	andeq	r7, r1, r0, lsl #20
   178b4:	andeq	r7, r1, r0, lsl #20
   178b8:	andeq	r7, r1, r0, lsl #20
   178bc:	muleq	r1, r4, r9
   178c0:	andeq	r7, r1, r0, lsl #20
   178c4:	andeq	r7, r1, r0, lsl #20
   178c8:			; <UNDEFINED> instruction: 0x000179b0
   178cc:	sub	r3, fp, #36	; 0x24
   178d0:	mov	r1, #512	; 0x200
   178d4:	mov	r0, r3
   178d8:	bl	17214 <__assert_fail@plt+0x62f8>
   178dc:	str	r0, [fp, #-20]	; 0xffffffec
   178e0:	b	17a18 <__assert_fail@plt+0x6afc>
   178e4:	sub	r3, fp, #36	; 0x24
   178e8:	mov	r1, #1024	; 0x400
   178ec:	mov	r0, r3
   178f0:	bl	17214 <__assert_fail@plt+0x62f8>
   178f4:	str	r0, [fp, #-20]	; 0xffffffec
   178f8:	b	17a18 <__assert_fail@plt+0x6afc>
   178fc:	mov	r3, #0
   17900:	str	r3, [fp, #-20]	; 0xffffffec
   17904:	b	17a18 <__assert_fail@plt+0x6afc>
   17908:	sub	r3, fp, #36	; 0x24
   1790c:	mov	r2, #6
   17910:	ldr	r1, [fp, #-12]
   17914:	mov	r0, r3
   17918:	bl	1742c <__assert_fail@plt+0x6510>
   1791c:	str	r0, [fp, #-20]	; 0xffffffec
   17920:	b	17a18 <__assert_fail@plt+0x6afc>
   17924:	sub	r3, fp, #36	; 0x24
   17928:	mov	r2, #3
   1792c:	ldr	r1, [fp, #-12]
   17930:	mov	r0, r3
   17934:	bl	1742c <__assert_fail@plt+0x6510>
   17938:	str	r0, [fp, #-20]	; 0xffffffec
   1793c:	b	17a18 <__assert_fail@plt+0x6afc>
   17940:	sub	r3, fp, #36	; 0x24
   17944:	mov	r2, #1
   17948:	ldr	r1, [fp, #-12]
   1794c:	mov	r0, r3
   17950:	bl	1742c <__assert_fail@plt+0x6510>
   17954:	str	r0, [fp, #-20]	; 0xffffffec
   17958:	b	17a18 <__assert_fail@plt+0x6afc>
   1795c:	sub	r3, fp, #36	; 0x24
   17960:	mov	r2, #2
   17964:	ldr	r1, [fp, #-12]
   17968:	mov	r0, r3
   1796c:	bl	1742c <__assert_fail@plt+0x6510>
   17970:	str	r0, [fp, #-20]	; 0xffffffec
   17974:	b	17a18 <__assert_fail@plt+0x6afc>
   17978:	sub	r3, fp, #36	; 0x24
   1797c:	mov	r2, #5
   17980:	ldr	r1, [fp, #-12]
   17984:	mov	r0, r3
   17988:	bl	1742c <__assert_fail@plt+0x6510>
   1798c:	str	r0, [fp, #-20]	; 0xffffffec
   17990:	b	17a18 <__assert_fail@plt+0x6afc>
   17994:	sub	r3, fp, #36	; 0x24
   17998:	mov	r2, #4
   1799c:	ldr	r1, [fp, #-12]
   179a0:	mov	r0, r3
   179a4:	bl	1742c <__assert_fail@plt+0x6510>
   179a8:	str	r0, [fp, #-20]	; 0xffffffec
   179ac:	b	17a18 <__assert_fail@plt+0x6afc>
   179b0:	sub	r3, fp, #36	; 0x24
   179b4:	mov	r1, #2
   179b8:	mov	r0, r3
   179bc:	bl	17214 <__assert_fail@plt+0x62f8>
   179c0:	str	r0, [fp, #-20]	; 0xffffffec
   179c4:	b	17a18 <__assert_fail@plt+0x6afc>
   179c8:	sub	r3, fp, #36	; 0x24
   179cc:	mov	r2, #8
   179d0:	ldr	r1, [fp, #-12]
   179d4:	mov	r0, r3
   179d8:	bl	1742c <__assert_fail@plt+0x6510>
   179dc:	str	r0, [fp, #-20]	; 0xffffffec
   179e0:	b	17a18 <__assert_fail@plt+0x6afc>
   179e4:	sub	r3, fp, #36	; 0x24
   179e8:	mov	r2, #7
   179ec:	ldr	r1, [fp, #-12]
   179f0:	mov	r0, r3
   179f4:	bl	1742c <__assert_fail@plt+0x6510>
   179f8:	str	r0, [fp, #-20]	; 0xffffffec
   179fc:	b	17a18 <__assert_fail@plt+0x6afc>
   17a00:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17a04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17a08:	strd	r2, [r1]
   17a0c:	ldr	r3, [fp, #-8]
   17a10:	orr	r3, r3, #2
   17a14:	b	17a70 <__assert_fail@plt+0x6b54>
   17a18:	ldr	r2, [fp, #-8]
   17a1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a20:	orr	r3, r2, r3
   17a24:	str	r3, [fp, #-8]
   17a28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a2c:	ldr	r2, [r3]
   17a30:	ldr	r3, [fp, #-16]
   17a34:	add	r2, r2, r3
   17a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a3c:	str	r2, [r3]
   17a40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a44:	ldr	r3, [r3]
   17a48:	ldrb	r3, [r3]
   17a4c:	cmp	r3, #0
   17a50:	beq	17a60 <__assert_fail@plt+0x6b44>
   17a54:	ldr	r3, [fp, #-8]
   17a58:	orr	r3, r3, #2
   17a5c:	str	r3, [fp, #-8]
   17a60:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   17a64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17a68:	strd	r2, [r1]
   17a6c:	ldr	r3, [fp, #-8]
   17a70:	mov	r0, r3
   17a74:	sub	sp, fp, #4
   17a78:	ldr	fp, [sp]
   17a7c:	add	sp, sp, #4
   17a80:	pop	{pc}		; (ldr pc, [sp], #4)
   17a84:	str	fp, [sp, #-8]!
   17a88:	str	lr, [sp, #4]
   17a8c:	add	fp, sp, #4
   17a90:	sub	sp, sp, #16
   17a94:	str	r0, [fp, #-16]
   17a98:	str	r1, [fp, #-20]	; 0xffffffec
   17a9c:	ldr	r3, [fp, #-16]
   17aa0:	cmp	r3, #0
   17aa4:	beq	17ab4 <__assert_fail@plt+0x6b98>
   17aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17aac:	cmp	r3, #0
   17ab0:	bne	17ac4 <__assert_fail@plt+0x6ba8>
   17ab4:	mov	r3, #1
   17ab8:	str	r3, [fp, #-20]	; 0xffffffec
   17abc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ac0:	str	r3, [fp, #-16]
   17ac4:	mov	ip, #0
   17ac8:	ldr	r2, [fp, #-16]
   17acc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ad0:	umull	r0, r1, r2, r3
   17ad4:	mov	r2, #0
   17ad8:	mov	r3, #0
   17adc:	mov	r2, r1
   17ae0:	mov	r3, #0
   17ae4:	cmp	r2, #0
   17ae8:	beq	17af0 <__assert_fail@plt+0x6bd4>
   17aec:	mov	ip, #1
   17af0:	cmp	r0, #0
   17af4:	bge	17afc <__assert_fail@plt+0x6be0>
   17af8:	mov	ip, #1
   17afc:	mov	r3, ip
   17b00:	and	r3, r3, #1
   17b04:	uxtb	r3, r3
   17b08:	cmp	r3, #0
   17b0c:	beq	17b28 <__assert_fail@plt+0x6c0c>
   17b10:	bl	10e50 <__errno_location@plt>
   17b14:	mov	r2, r0
   17b18:	mov	r3, #12
   17b1c:	str	r3, [r2]
   17b20:	mov	r3, #0
   17b24:	b	17b40 <__assert_fail@plt+0x6c24>
   17b28:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b2c:	ldr	r0, [fp, #-16]
   17b30:	bl	10cac <calloc@plt>
   17b34:	mov	r3, r0
   17b38:	str	r3, [fp, #-8]
   17b3c:	ldr	r3, [fp, #-8]
   17b40:	mov	r0, r3
   17b44:	sub	sp, fp, #4
   17b48:	ldr	fp, [sp]
   17b4c:	add	sp, sp, #4
   17b50:	pop	{pc}		; (ldr pc, [sp], #4)
   17b54:	str	fp, [sp, #-8]!
   17b58:	str	lr, [sp, #4]
   17b5c:	add	fp, sp, #4
   17b60:	sub	sp, sp, #16
   17b64:	str	r0, [fp, #-16]
   17b68:	ldr	r3, [fp, #-16]
   17b6c:	cmp	r3, #0
   17b70:	bne	17b7c <__assert_fail@plt+0x6c60>
   17b74:	mov	r3, #1
   17b78:	str	r3, [fp, #-16]
   17b7c:	mov	r2, #0
   17b80:	ldr	r3, [fp, #-16]
   17b84:	cmp	r3, #0
   17b88:	bge	17b90 <__assert_fail@plt+0x6c74>
   17b8c:	mov	r2, #1
   17b90:	mov	r3, r2
   17b94:	and	r3, r3, #1
   17b98:	uxtb	r3, r3
   17b9c:	cmp	r3, #0
   17ba0:	beq	17bbc <__assert_fail@plt+0x6ca0>
   17ba4:	bl	10e50 <__errno_location@plt>
   17ba8:	mov	r2, r0
   17bac:	mov	r3, #12
   17bb0:	str	r3, [r2]
   17bb4:	mov	r3, #0
   17bb8:	b	17bd0 <__assert_fail@plt+0x6cb4>
   17bbc:	ldr	r0, [fp, #-16]
   17bc0:	bl	10dcc <malloc@plt>
   17bc4:	mov	r3, r0
   17bc8:	str	r3, [fp, #-8]
   17bcc:	ldr	r3, [fp, #-8]
   17bd0:	mov	r0, r3
   17bd4:	sub	sp, fp, #4
   17bd8:	ldr	fp, [sp]
   17bdc:	add	sp, sp, #4
   17be0:	pop	{pc}		; (ldr pc, [sp], #4)
   17be4:	str	fp, [sp, #-8]!
   17be8:	str	lr, [sp, #4]
   17bec:	add	fp, sp, #4
   17bf0:	sub	sp, sp, #16
   17bf4:	str	r0, [fp, #-16]
   17bf8:	str	r1, [fp, #-20]	; 0xffffffec
   17bfc:	ldr	r3, [fp, #-16]
   17c00:	cmp	r3, #0
   17c04:	bne	17c18 <__assert_fail@plt+0x6cfc>
   17c08:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c0c:	bl	17b54 <__assert_fail@plt+0x6c38>
   17c10:	mov	r3, r0
   17c14:	b	17c88 <__assert_fail@plt+0x6d6c>
   17c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c1c:	cmp	r3, #0
   17c20:	bne	17c34 <__assert_fail@plt+0x6d18>
   17c24:	ldr	r0, [fp, #-16]
   17c28:	bl	13360 <__assert_fail@plt+0x2444>
   17c2c:	mov	r3, #0
   17c30:	b	17c88 <__assert_fail@plt+0x6d6c>
   17c34:	mov	r2, #0
   17c38:	ldr	r3, [fp, #-20]	; 0xffffffec
   17c3c:	cmp	r3, #0
   17c40:	bge	17c48 <__assert_fail@plt+0x6d2c>
   17c44:	mov	r2, #1
   17c48:	mov	r3, r2
   17c4c:	and	r3, r3, #1
   17c50:	uxtb	r3, r3
   17c54:	cmp	r3, #0
   17c58:	beq	17c74 <__assert_fail@plt+0x6d58>
   17c5c:	bl	10e50 <__errno_location@plt>
   17c60:	mov	r2, r0
   17c64:	mov	r3, #12
   17c68:	str	r3, [r2]
   17c6c:	mov	r3, #0
   17c70:	b	17c88 <__assert_fail@plt+0x6d6c>
   17c74:	ldr	r1, [fp, #-20]	; 0xffffffec
   17c78:	ldr	r0, [fp, #-16]
   17c7c:	bl	10d54 <realloc@plt>
   17c80:	str	r0, [fp, #-8]
   17c84:	ldr	r3, [fp, #-8]
   17c88:	mov	r0, r3
   17c8c:	sub	sp, fp, #4
   17c90:	ldr	fp, [sp]
   17c94:	add	sp, sp, #4
   17c98:	pop	{pc}		; (ldr pc, [sp], #4)
   17c9c:	push	{fp}		; (str fp, [sp, #-4]!)
   17ca0:	add	fp, sp, #0
   17ca4:	sub	sp, sp, #12
   17ca8:	str	r0, [fp, #-8]
   17cac:	str	r1, [fp, #-12]
   17cb0:	mov	r3, #0
   17cb4:	mov	r0, r3
   17cb8:	add	sp, fp, #0
   17cbc:	pop	{fp}		; (ldr fp, [sp], #4)
   17cc0:	bx	lr
   17cc4:	str	fp, [sp, #-8]!
   17cc8:	str	lr, [sp, #4]
   17ccc:	add	fp, sp, #4
   17cd0:	sub	sp, sp, #8
   17cd4:	str	r0, [fp, #-8]
   17cd8:	str	r1, [fp, #-12]
   17cdc:	ldr	r1, [fp, #-12]
   17ce0:	ldr	r0, [fp, #-8]
   17ce4:	bl	17c9c <__assert_fail@plt+0x6d80>
   17ce8:	mov	r3, r0
   17cec:	mov	r0, r3
   17cf0:	sub	sp, fp, #4
   17cf4:	ldr	fp, [sp]
   17cf8:	add	sp, sp, #4
   17cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17d00:	strd	r4, [sp, #-16]!
   17d04:	str	fp, [sp, #8]
   17d08:	str	lr, [sp, #12]
   17d0c:	add	fp, sp, #12
   17d10:	sub	sp, sp, #16
   17d14:	str	r0, [fp, #-24]	; 0xffffffe8
   17d18:	str	r1, [fp, #-28]	; 0xffffffe4
   17d1c:	ldr	r5, [fp, #-24]	; 0xffffffe8
   17d20:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17d24:	cmp	r5, r4
   17d28:	bne	17d34 <__assert_fail@plt+0x6e18>
   17d2c:	mov	r3, #0
   17d30:	b	17d94 <__assert_fail@plt+0x6e78>
   17d34:	ldrb	r3, [r5]
   17d38:	mov	r0, r3
   17d3c:	bl	18458 <__assert_fail@plt+0x753c>
   17d40:	mov	r3, r0
   17d44:	strb	r3, [fp, #-13]
   17d48:	ldrb	r3, [r4]
   17d4c:	mov	r0, r3
   17d50:	bl	18458 <__assert_fail@plt+0x753c>
   17d54:	mov	r3, r0
   17d58:	strb	r3, [fp, #-14]
   17d5c:	ldrb	r3, [fp, #-13]
   17d60:	cmp	r3, #0
   17d64:	beq	17d84 <__assert_fail@plt+0x6e68>
   17d68:	add	r5, r5, #1
   17d6c:	add	r4, r4, #1
   17d70:	ldrb	r2, [fp, #-13]
   17d74:	ldrb	r3, [fp, #-14]
   17d78:	cmp	r2, r3
   17d7c:	beq	17d34 <__assert_fail@plt+0x6e18>
   17d80:	b	17d88 <__assert_fail@plt+0x6e6c>
   17d84:	nop	{0}
   17d88:	ldrb	r2, [fp, #-13]
   17d8c:	ldrb	r3, [fp, #-14]
   17d90:	sub	r3, r2, r3
   17d94:	mov	r0, r3
   17d98:	sub	sp, fp, #12
   17d9c:	ldrd	r4, [sp]
   17da0:	ldr	fp, [sp, #8]
   17da4:	add	sp, sp, #12
   17da8:	pop	{pc}		; (ldr pc, [sp], #4)
   17dac:	str	fp, [sp, #-8]!
   17db0:	str	lr, [sp, #4]
   17db4:	add	fp, sp, #4
   17db8:	sub	sp, sp, #16
   17dbc:	str	r0, [fp, #-16]
   17dc0:	ldr	r0, [fp, #-16]
   17dc4:	bl	10d9c <__fpending@plt>
   17dc8:	mov	r3, r0
   17dcc:	cmp	r3, #0
   17dd0:	movne	r3, #1
   17dd4:	moveq	r3, #0
   17dd8:	strb	r3, [fp, #-5]
   17ddc:	ldr	r0, [fp, #-16]
   17de0:	bl	10da8 <ferror_unlocked@plt>
   17de4:	mov	r3, r0
   17de8:	cmp	r3, #0
   17dec:	movne	r3, #1
   17df0:	moveq	r3, #0
   17df4:	strb	r3, [fp, #-6]
   17df8:	ldr	r0, [fp, #-16]
   17dfc:	bl	1319c <__assert_fail@plt+0x2280>
   17e00:	mov	r3, r0
   17e04:	cmp	r3, #0
   17e08:	movne	r3, #1
   17e0c:	moveq	r3, #0
   17e10:	strb	r3, [fp, #-7]
   17e14:	ldrb	r3, [fp, #-6]
   17e18:	cmp	r3, #0
   17e1c:	bne	17e4c <__assert_fail@plt+0x6f30>
   17e20:	ldrb	r3, [fp, #-7]
   17e24:	cmp	r3, #0
   17e28:	beq	17e78 <__assert_fail@plt+0x6f5c>
   17e2c:	ldrb	r3, [fp, #-5]
   17e30:	cmp	r3, #0
   17e34:	bne	17e4c <__assert_fail@plt+0x6f30>
   17e38:	bl	10e50 <__errno_location@plt>
   17e3c:	mov	r3, r0
   17e40:	ldr	r3, [r3]
   17e44:	cmp	r3, #9
   17e48:	beq	17e78 <__assert_fail@plt+0x6f5c>
   17e4c:	ldrb	r3, [fp, #-7]
   17e50:	eor	r3, r3, #1
   17e54:	uxtb	r3, r3
   17e58:	cmp	r3, #0
   17e5c:	beq	17e70 <__assert_fail@plt+0x6f54>
   17e60:	bl	10e50 <__errno_location@plt>
   17e64:	mov	r2, r0
   17e68:	mov	r3, #0
   17e6c:	str	r3, [r2]
   17e70:	mvn	r3, #0
   17e74:	b	17e7c <__assert_fail@plt+0x6f60>
   17e78:	mov	r3, #0
   17e7c:	mov	r0, r3
   17e80:	sub	sp, fp, #4
   17e84:	ldr	fp, [sp]
   17e88:	add	sp, sp, #4
   17e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e90:	str	fp, [sp, #-8]!
   17e94:	str	lr, [sp, #4]
   17e98:	add	fp, sp, #4
   17e9c:	sub	sp, sp, #8
   17ea0:	mov	r0, #14
   17ea4:	bl	10ec8 <nl_langinfo@plt>
   17ea8:	str	r0, [fp, #-8]
   17eac:	ldr	r3, [fp, #-8]
   17eb0:	cmp	r3, #0
   17eb4:	bne	17ec4 <__assert_fail@plt+0x6fa8>
   17eb8:	movw	r3, #37964	; 0x944c
   17ebc:	movt	r3, #1
   17ec0:	str	r3, [fp, #-8]
   17ec4:	ldr	r3, [fp, #-8]
   17ec8:	ldrb	r3, [r3]
   17ecc:	cmp	r3, #0
   17ed0:	bne	17ee0 <__assert_fail@plt+0x6fc4>
   17ed4:	movw	r3, #37968	; 0x9450
   17ed8:	movt	r3, #1
   17edc:	str	r3, [fp, #-8]
   17ee0:	ldr	r3, [fp, #-8]
   17ee4:	mov	r0, r3
   17ee8:	sub	sp, fp, #4
   17eec:	ldr	fp, [sp]
   17ef0:	add	sp, sp, #4
   17ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ef8:	str	fp, [sp, #-8]!
   17efc:	str	lr, [sp, #4]
   17f00:	add	fp, sp, #4
   17f04:	sub	sp, sp, #32
   17f08:	str	r0, [fp, #-24]	; 0xffffffe8
   17f0c:	str	r1, [fp, #-28]	; 0xffffffe4
   17f10:	str	r2, [fp, #-32]	; 0xffffffe0
   17f14:	str	r3, [fp, #-36]	; 0xffffffdc
   17f18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f1c:	cmp	r3, #0
   17f20:	bne	17f2c <__assert_fail@plt+0x7010>
   17f24:	sub	r3, fp, #16
   17f28:	str	r3, [fp, #-24]	; 0xffffffe8
   17f2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17f34:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17f3c:	bl	10db4 <mbrtowc@plt>
   17f40:	str	r0, [fp, #-8]
   17f44:	ldr	r3, [fp, #-8]
   17f48:	cmn	r3, #3
   17f4c:	bls	17f98 <__assert_fail@plt+0x707c>
   17f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f54:	cmp	r3, #0
   17f58:	beq	17f98 <__assert_fail@plt+0x707c>
   17f5c:	mov	r0, #0
   17f60:	bl	184d8 <__assert_fail@plt+0x75bc>
   17f64:	mov	r3, r0
   17f68:	eor	r3, r3, #1
   17f6c:	uxtb	r3, r3
   17f70:	cmp	r3, #0
   17f74:	beq	17f98 <__assert_fail@plt+0x707c>
   17f78:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f7c:	ldrb	r3, [r3]
   17f80:	strb	r3, [fp, #-9]
   17f84:	ldrb	r2, [fp, #-9]
   17f88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f8c:	str	r2, [r3]
   17f90:	mov	r3, #1
   17f94:	b	17f9c <__assert_fail@plt+0x7080>
   17f98:	ldr	r3, [fp, #-8]
   17f9c:	mov	r0, r3
   17fa0:	sub	sp, fp, #4
   17fa4:	ldr	fp, [sp]
   17fa8:	add	sp, sp, #4
   17fac:	pop	{pc}		; (ldr pc, [sp], #4)
   17fb0:	push	{fp}		; (str fp, [sp, #-4]!)
   17fb4:	add	fp, sp, #0
   17fb8:	sub	sp, sp, #12
   17fbc:	str	r0, [fp, #-8]
   17fc0:	ldr	r3, [fp, #-8]
   17fc4:	cmp	r3, #90	; 0x5a
   17fc8:	bgt	17fec <__assert_fail@plt+0x70d0>
   17fcc:	ldr	r3, [fp, #-8]
   17fd0:	cmp	r3, #65	; 0x41
   17fd4:	bge	17ffc <__assert_fail@plt+0x70e0>
   17fd8:	ldr	r3, [fp, #-8]
   17fdc:	sub	r3, r3, #48	; 0x30
   17fe0:	cmp	r3, #9
   17fe4:	bhi	18004 <__assert_fail@plt+0x70e8>
   17fe8:	b	17ffc <__assert_fail@plt+0x70e0>
   17fec:	ldr	r3, [fp, #-8]
   17ff0:	sub	r3, r3, #97	; 0x61
   17ff4:	cmp	r3, #25
   17ff8:	bhi	18004 <__assert_fail@plt+0x70e8>
   17ffc:	mov	r3, #1
   18000:	b	18008 <__assert_fail@plt+0x70ec>
   18004:	mov	r3, #0
   18008:	mov	r0, r3
   1800c:	add	sp, fp, #0
   18010:	pop	{fp}		; (ldr fp, [sp], #4)
   18014:	bx	lr
   18018:	push	{fp}		; (str fp, [sp, #-4]!)
   1801c:	add	fp, sp, #0
   18020:	sub	sp, sp, #12
   18024:	str	r0, [fp, #-8]
   18028:	ldr	r3, [fp, #-8]
   1802c:	cmp	r3, #65	; 0x41
   18030:	blt	18058 <__assert_fail@plt+0x713c>
   18034:	ldr	r3, [fp, #-8]
   18038:	cmp	r3, #90	; 0x5a
   1803c:	ble	18050 <__assert_fail@plt+0x7134>
   18040:	ldr	r3, [fp, #-8]
   18044:	sub	r3, r3, #97	; 0x61
   18048:	cmp	r3, #25
   1804c:	bhi	18058 <__assert_fail@plt+0x713c>
   18050:	mov	r3, #1
   18054:	b	1805c <__assert_fail@plt+0x7140>
   18058:	mov	r3, #0
   1805c:	mov	r0, r3
   18060:	add	sp, fp, #0
   18064:	pop	{fp}		; (ldr fp, [sp], #4)
   18068:	bx	lr
   1806c:	push	{fp}		; (str fp, [sp, #-4]!)
   18070:	add	fp, sp, #0
   18074:	sub	sp, sp, #12
   18078:	str	r0, [fp, #-8]
   1807c:	ldr	r3, [fp, #-8]
   18080:	cmp	r3, #127	; 0x7f
   18084:	bhi	18090 <__assert_fail@plt+0x7174>
   18088:	mov	r3, #1
   1808c:	b	18094 <__assert_fail@plt+0x7178>
   18090:	mov	r3, #0
   18094:	mov	r0, r3
   18098:	add	sp, fp, #0
   1809c:	pop	{fp}		; (ldr fp, [sp], #4)
   180a0:	bx	lr
   180a4:	push	{fp}		; (str fp, [sp, #-4]!)
   180a8:	add	fp, sp, #0
   180ac:	sub	sp, sp, #12
   180b0:	str	r0, [fp, #-8]
   180b4:	ldr	r3, [fp, #-8]
   180b8:	cmp	r3, #32
   180bc:	beq	180cc <__assert_fail@plt+0x71b0>
   180c0:	ldr	r3, [fp, #-8]
   180c4:	cmp	r3, #9
   180c8:	bne	180d4 <__assert_fail@plt+0x71b8>
   180cc:	mov	r3, #1
   180d0:	b	180d8 <__assert_fail@plt+0x71bc>
   180d4:	mov	r3, #0
   180d8:	and	r3, r3, #1
   180dc:	uxtb	r3, r3
   180e0:	mov	r0, r3
   180e4:	add	sp, fp, #0
   180e8:	pop	{fp}		; (ldr fp, [sp], #4)
   180ec:	bx	lr
   180f0:	push	{fp}		; (str fp, [sp, #-4]!)
   180f4:	add	fp, sp, #0
   180f8:	sub	sp, sp, #12
   180fc:	str	r0, [fp, #-8]
   18100:	ldr	r3, [fp, #-8]
   18104:	cmp	r3, #0
   18108:	blt	1812c <__assert_fail@plt+0x7210>
   1810c:	ldr	r3, [fp, #-8]
   18110:	cmp	r3, #31
   18114:	ble	18124 <__assert_fail@plt+0x7208>
   18118:	ldr	r3, [fp, #-8]
   1811c:	cmp	r3, #127	; 0x7f
   18120:	bne	1812c <__assert_fail@plt+0x7210>
   18124:	mov	r3, #1
   18128:	b	18130 <__assert_fail@plt+0x7214>
   1812c:	mov	r3, #0
   18130:	mov	r0, r3
   18134:	add	sp, fp, #0
   18138:	pop	{fp}		; (ldr fp, [sp], #4)
   1813c:	bx	lr
   18140:	push	{fp}		; (str fp, [sp, #-4]!)
   18144:	add	fp, sp, #0
   18148:	sub	sp, sp, #12
   1814c:	str	r0, [fp, #-8]
   18150:	ldr	r3, [fp, #-8]
   18154:	sub	r3, r3, #48	; 0x30
   18158:	cmp	r3, #9
   1815c:	bhi	18168 <__assert_fail@plt+0x724c>
   18160:	mov	r3, #1
   18164:	b	1816c <__assert_fail@plt+0x7250>
   18168:	mov	r3, #0
   1816c:	mov	r0, r3
   18170:	add	sp, fp, #0
   18174:	pop	{fp}		; (ldr fp, [sp], #4)
   18178:	bx	lr
   1817c:	push	{fp}		; (str fp, [sp, #-4]!)
   18180:	add	fp, sp, #0
   18184:	sub	sp, sp, #12
   18188:	str	r0, [fp, #-8]
   1818c:	ldr	r3, [fp, #-8]
   18190:	sub	r3, r3, #33	; 0x21
   18194:	cmp	r3, #93	; 0x5d
   18198:	bhi	181a4 <__assert_fail@plt+0x7288>
   1819c:	mov	r3, #1
   181a0:	b	181a8 <__assert_fail@plt+0x728c>
   181a4:	mov	r3, #0
   181a8:	mov	r0, r3
   181ac:	add	sp, fp, #0
   181b0:	pop	{fp}		; (ldr fp, [sp], #4)
   181b4:	bx	lr
   181b8:	push	{fp}		; (str fp, [sp, #-4]!)
   181bc:	add	fp, sp, #0
   181c0:	sub	sp, sp, #12
   181c4:	str	r0, [fp, #-8]
   181c8:	ldr	r3, [fp, #-8]
   181cc:	sub	r3, r3, #97	; 0x61
   181d0:	cmp	r3, #25
   181d4:	bhi	181e0 <__assert_fail@plt+0x72c4>
   181d8:	mov	r3, #1
   181dc:	b	181e4 <__assert_fail@plt+0x72c8>
   181e0:	mov	r3, #0
   181e4:	mov	r0, r3
   181e8:	add	sp, fp, #0
   181ec:	pop	{fp}		; (ldr fp, [sp], #4)
   181f0:	bx	lr
   181f4:	push	{fp}		; (str fp, [sp, #-4]!)
   181f8:	add	fp, sp, #0
   181fc:	sub	sp, sp, #12
   18200:	str	r0, [fp, #-8]
   18204:	ldr	r3, [fp, #-8]
   18208:	sub	r3, r3, #32
   1820c:	cmp	r3, #94	; 0x5e
   18210:	bhi	1821c <__assert_fail@plt+0x7300>
   18214:	mov	r3, #1
   18218:	b	18220 <__assert_fail@plt+0x7304>
   1821c:	mov	r3, #0
   18220:	mov	r0, r3
   18224:	add	sp, fp, #0
   18228:	pop	{fp}		; (ldr fp, [sp], #4)
   1822c:	bx	lr
   18230:	push	{fp}		; (str fp, [sp, #-4]!)
   18234:	add	fp, sp, #0
   18238:	sub	sp, sp, #12
   1823c:	str	r0, [fp, #-8]
   18240:	ldr	r3, [fp, #-8]
   18244:	cmp	r3, #64	; 0x40
   18248:	bgt	1826c <__assert_fail@plt+0x7350>
   1824c:	ldr	r3, [fp, #-8]
   18250:	cmp	r3, #58	; 0x3a
   18254:	bge	18294 <__assert_fail@plt+0x7378>
   18258:	ldr	r3, [fp, #-8]
   1825c:	sub	r3, r3, #33	; 0x21
   18260:	cmp	r3, #14
   18264:	bhi	1829c <__assert_fail@plt+0x7380>
   18268:	b	18294 <__assert_fail@plt+0x7378>
   1826c:	ldr	r3, [fp, #-8]
   18270:	cmp	r3, #91	; 0x5b
   18274:	blt	1829c <__assert_fail@plt+0x7380>
   18278:	ldr	r3, [fp, #-8]
   1827c:	cmp	r3, #96	; 0x60
   18280:	ble	18294 <__assert_fail@plt+0x7378>
   18284:	ldr	r3, [fp, #-8]
   18288:	sub	r3, r3, #123	; 0x7b
   1828c:	cmp	r3, #3
   18290:	bhi	1829c <__assert_fail@plt+0x7380>
   18294:	mov	r3, #1
   18298:	b	182a0 <__assert_fail@plt+0x7384>
   1829c:	mov	r3, #0
   182a0:	mov	r0, r3
   182a4:	add	sp, fp, #0
   182a8:	pop	{fp}		; (ldr fp, [sp], #4)
   182ac:	bx	lr
   182b0:	push	{fp}		; (str fp, [sp, #-4]!)
   182b4:	add	fp, sp, #0
   182b8:	sub	sp, sp, #12
   182bc:	str	r0, [fp, #-8]
   182c0:	ldr	r3, [fp, #-8]
   182c4:	cmp	r3, #9
   182c8:	blt	182ec <__assert_fail@plt+0x73d0>
   182cc:	ldr	r3, [fp, #-8]
   182d0:	cmp	r3, #13
   182d4:	ble	182e4 <__assert_fail@plt+0x73c8>
   182d8:	ldr	r3, [fp, #-8]
   182dc:	cmp	r3, #32
   182e0:	bne	182ec <__assert_fail@plt+0x73d0>
   182e4:	mov	r3, #1
   182e8:	b	182f0 <__assert_fail@plt+0x73d4>
   182ec:	mov	r3, #0
   182f0:	mov	r0, r3
   182f4:	add	sp, fp, #0
   182f8:	pop	{fp}		; (ldr fp, [sp], #4)
   182fc:	bx	lr
   18300:	push	{fp}		; (str fp, [sp, #-4]!)
   18304:	add	fp, sp, #0
   18308:	sub	sp, sp, #12
   1830c:	str	r0, [fp, #-8]
   18310:	ldr	r3, [fp, #-8]
   18314:	sub	r3, r3, #65	; 0x41
   18318:	cmp	r3, #25
   1831c:	bhi	18328 <__assert_fail@plt+0x740c>
   18320:	mov	r3, #1
   18324:	b	1832c <__assert_fail@plt+0x7410>
   18328:	mov	r3, #0
   1832c:	mov	r0, r3
   18330:	add	sp, fp, #0
   18334:	pop	{fp}		; (ldr fp, [sp], #4)
   18338:	bx	lr
   1833c:	push	{fp}		; (str fp, [sp, #-4]!)
   18340:	add	fp, sp, #0
   18344:	sub	sp, sp, #12
   18348:	str	r0, [fp, #-8]
   1834c:	ldr	r3, [fp, #-8]
   18350:	sub	r3, r3, #48	; 0x30
   18354:	cmp	r3, #54	; 0x36
   18358:	ldrls	pc, [pc, r3, lsl #2]
   1835c:	b	18444 <__assert_fail@plt+0x7528>
   18360:	andeq	r8, r1, ip, lsr r4
   18364:	andeq	r8, r1, ip, lsr r4
   18368:	andeq	r8, r1, ip, lsr r4
   1836c:	andeq	r8, r1, ip, lsr r4
   18370:	andeq	r8, r1, ip, lsr r4
   18374:	andeq	r8, r1, ip, lsr r4
   18378:	andeq	r8, r1, ip, lsr r4
   1837c:	andeq	r8, r1, ip, lsr r4
   18380:	andeq	r8, r1, ip, lsr r4
   18384:	andeq	r8, r1, ip, lsr r4
   18388:	andeq	r8, r1, r4, asr #8
   1838c:	andeq	r8, r1, r4, asr #8
   18390:	andeq	r8, r1, r4, asr #8
   18394:	andeq	r8, r1, r4, asr #8
   18398:	andeq	r8, r1, r4, asr #8
   1839c:	andeq	r8, r1, r4, asr #8
   183a0:	andeq	r8, r1, r4, asr #8
   183a4:	andeq	r8, r1, ip, lsr r4
   183a8:	andeq	r8, r1, ip, lsr r4
   183ac:	andeq	r8, r1, ip, lsr r4
   183b0:	andeq	r8, r1, ip, lsr r4
   183b4:	andeq	r8, r1, ip, lsr r4
   183b8:	andeq	r8, r1, ip, lsr r4
   183bc:	andeq	r8, r1, r4, asr #8
   183c0:	andeq	r8, r1, r4, asr #8
   183c4:	andeq	r8, r1, r4, asr #8
   183c8:	andeq	r8, r1, r4, asr #8
   183cc:	andeq	r8, r1, r4, asr #8
   183d0:	andeq	r8, r1, r4, asr #8
   183d4:	andeq	r8, r1, r4, asr #8
   183d8:	andeq	r8, r1, r4, asr #8
   183dc:	andeq	r8, r1, r4, asr #8
   183e0:	andeq	r8, r1, r4, asr #8
   183e4:	andeq	r8, r1, r4, asr #8
   183e8:	andeq	r8, r1, r4, asr #8
   183ec:	andeq	r8, r1, r4, asr #8
   183f0:	andeq	r8, r1, r4, asr #8
   183f4:	andeq	r8, r1, r4, asr #8
   183f8:	andeq	r8, r1, r4, asr #8
   183fc:	andeq	r8, r1, r4, asr #8
   18400:	andeq	r8, r1, r4, asr #8
   18404:	andeq	r8, r1, r4, asr #8
   18408:	andeq	r8, r1, r4, asr #8
   1840c:	andeq	r8, r1, r4, asr #8
   18410:	andeq	r8, r1, r4, asr #8
   18414:	andeq	r8, r1, r4, asr #8
   18418:	andeq	r8, r1, r4, asr #8
   1841c:	andeq	r8, r1, r4, asr #8
   18420:	andeq	r8, r1, r4, asr #8
   18424:	andeq	r8, r1, ip, lsr r4
   18428:	andeq	r8, r1, ip, lsr r4
   1842c:	andeq	r8, r1, ip, lsr r4
   18430:	andeq	r8, r1, ip, lsr r4
   18434:	andeq	r8, r1, ip, lsr r4
   18438:	andeq	r8, r1, ip, lsr r4
   1843c:	mov	r3, #1
   18440:	b	18448 <__assert_fail@plt+0x752c>
   18444:	mov	r3, #0
   18448:	mov	r0, r3
   1844c:	add	sp, fp, #0
   18450:	pop	{fp}		; (ldr fp, [sp], #4)
   18454:	bx	lr
   18458:	push	{fp}		; (str fp, [sp, #-4]!)
   1845c:	add	fp, sp, #0
   18460:	sub	sp, sp, #12
   18464:	str	r0, [fp, #-8]
   18468:	ldr	r3, [fp, #-8]
   1846c:	sub	r3, r3, #65	; 0x41
   18470:	cmp	r3, #25
   18474:	bhi	18484 <__assert_fail@plt+0x7568>
   18478:	ldr	r3, [fp, #-8]
   1847c:	add	r3, r3, #32
   18480:	b	18488 <__assert_fail@plt+0x756c>
   18484:	ldr	r3, [fp, #-8]
   18488:	mov	r0, r3
   1848c:	add	sp, fp, #0
   18490:	pop	{fp}		; (ldr fp, [sp], #4)
   18494:	bx	lr
   18498:	push	{fp}		; (str fp, [sp, #-4]!)
   1849c:	add	fp, sp, #0
   184a0:	sub	sp, sp, #12
   184a4:	str	r0, [fp, #-8]
   184a8:	ldr	r3, [fp, #-8]
   184ac:	sub	r3, r3, #97	; 0x61
   184b0:	cmp	r3, #25
   184b4:	bhi	184c4 <__assert_fail@plt+0x75a8>
   184b8:	ldr	r3, [fp, #-8]
   184bc:	sub	r3, r3, #32
   184c0:	b	184c8 <__assert_fail@plt+0x75ac>
   184c4:	ldr	r3, [fp, #-8]
   184c8:	mov	r0, r3
   184cc:	add	sp, fp, #0
   184d0:	pop	{fp}		; (ldr fp, [sp], #4)
   184d4:	bx	lr
   184d8:	str	fp, [sp, #-8]!
   184dc:	str	lr, [sp, #4]
   184e0:	add	fp, sp, #4
   184e4:	sub	sp, sp, #272	; 0x110
   184e8:	str	r0, [fp, #-272]	; 0xfffffef0
   184ec:	sub	r3, fp, #264	; 0x108
   184f0:	movw	r2, #257	; 0x101
   184f4:	mov	r1, r3
   184f8:	ldr	r0, [fp, #-272]	; 0xfffffef0
   184fc:	bl	1869c <__assert_fail@plt+0x7780>
   18500:	mov	r3, r0
   18504:	cmp	r3, #0
   18508:	beq	18514 <__assert_fail@plt+0x75f8>
   1850c:	mov	r3, #0
   18510:	b	18568 <__assert_fail@plt+0x764c>
   18514:	sub	r3, fp, #264	; 0x108
   18518:	movw	r1, #37976	; 0x9458
   1851c:	movt	r1, #1
   18520:	mov	r0, r3
   18524:	bl	10cc4 <strcmp@plt>
   18528:	mov	r3, r0
   1852c:	cmp	r3, #0
   18530:	beq	1855c <__assert_fail@plt+0x7640>
   18534:	sub	r3, fp, #264	; 0x108
   18538:	movw	r1, #37980	; 0x945c
   1853c:	movt	r1, #1
   18540:	mov	r0, r3
   18544:	bl	10cc4 <strcmp@plt>
   18548:	mov	r3, r0
   1854c:	cmp	r3, #0
   18550:	beq	1855c <__assert_fail@plt+0x7640>
   18554:	mov	r3, #1
   18558:	b	18560 <__assert_fail@plt+0x7644>
   1855c:	mov	r3, #0
   18560:	and	r3, r3, #1
   18564:	uxtb	r3, r3
   18568:	mov	r0, r3
   1856c:	sub	sp, fp, #4
   18570:	ldr	fp, [sp]
   18574:	add	sp, sp, #4
   18578:	pop	{pc}		; (ldr pc, [sp], #4)
   1857c:	str	fp, [sp, #-8]!
   18580:	str	lr, [sp, #4]
   18584:	add	fp, sp, #4
   18588:	sub	sp, sp, #16
   1858c:	str	r0, [fp, #-16]
   18590:	mov	r1, #0
   18594:	ldr	r0, [fp, #-16]
   18598:	bl	10eb0 <setlocale@plt>
   1859c:	str	r0, [fp, #-8]
   185a0:	ldr	r3, [fp, #-8]
   185a4:	mov	r0, r3
   185a8:	sub	sp, fp, #4
   185ac:	ldr	fp, [sp]
   185b0:	add	sp, sp, #4
   185b4:	pop	{pc}		; (ldr pc, [sp], #4)
   185b8:	str	fp, [sp, #-8]!
   185bc:	str	lr, [sp, #4]
   185c0:	add	fp, sp, #4
   185c4:	sub	sp, sp, #24
   185c8:	str	r0, [fp, #-16]
   185cc:	str	r1, [fp, #-20]	; 0xffffffec
   185d0:	str	r2, [fp, #-24]	; 0xffffffe8
   185d4:	ldr	r0, [fp, #-16]
   185d8:	bl	1857c <__assert_fail@plt+0x7660>
   185dc:	str	r0, [fp, #-8]
   185e0:	ldr	r3, [fp, #-8]
   185e4:	cmp	r3, #0
   185e8:	bne	1860c <__assert_fail@plt+0x76f0>
   185ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   185f0:	cmp	r3, #0
   185f4:	beq	18604 <__assert_fail@plt+0x76e8>
   185f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   185fc:	mov	r2, #0
   18600:	strb	r2, [r3]
   18604:	mov	r3, #22
   18608:	b	18688 <__assert_fail@plt+0x776c>
   1860c:	ldr	r0, [fp, #-8]
   18610:	bl	10e2c <strlen@plt>
   18614:	str	r0, [fp, #-12]
   18618:	ldr	r2, [fp, #-12]
   1861c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18620:	cmp	r2, r3
   18624:	bcs	18648 <__assert_fail@plt+0x772c>
   18628:	ldr	r3, [fp, #-12]
   1862c:	add	r3, r3, #1
   18630:	mov	r2, r3
   18634:	ldr	r1, [fp, #-8]
   18638:	ldr	r0, [fp, #-20]	; 0xffffffec
   1863c:	bl	10d18 <memcpy@plt>
   18640:	mov	r3, #0
   18644:	b	18688 <__assert_fail@plt+0x776c>
   18648:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1864c:	cmp	r3, #0
   18650:	beq	18684 <__assert_fail@plt+0x7768>
   18654:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18658:	sub	r3, r3, #1
   1865c:	mov	r2, r3
   18660:	ldr	r1, [fp, #-8]
   18664:	ldr	r0, [fp, #-20]	; 0xffffffec
   18668:	bl	10d18 <memcpy@plt>
   1866c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18670:	sub	r3, r3, #1
   18674:	ldr	r2, [fp, #-20]	; 0xffffffec
   18678:	add	r3, r2, r3
   1867c:	mov	r2, #0
   18680:	strb	r2, [r3]
   18684:	mov	r3, #34	; 0x22
   18688:	mov	r0, r3
   1868c:	sub	sp, fp, #4
   18690:	ldr	fp, [sp]
   18694:	add	sp, sp, #4
   18698:	pop	{pc}		; (ldr pc, [sp], #4)
   1869c:	str	fp, [sp, #-8]!
   186a0:	str	lr, [sp, #4]
   186a4:	add	fp, sp, #4
   186a8:	sub	sp, sp, #16
   186ac:	str	r0, [fp, #-8]
   186b0:	str	r1, [fp, #-12]
   186b4:	str	r2, [fp, #-16]
   186b8:	ldr	r2, [fp, #-16]
   186bc:	ldr	r1, [fp, #-12]
   186c0:	ldr	r0, [fp, #-8]
   186c4:	bl	185b8 <__assert_fail@plt+0x769c>
   186c8:	mov	r3, r0
   186cc:	mov	r0, r3
   186d0:	sub	sp, fp, #4
   186d4:	ldr	fp, [sp]
   186d8:	add	sp, sp, #4
   186dc:	pop	{pc}		; (ldr pc, [sp], #4)
   186e0:	str	fp, [sp, #-8]!
   186e4:	str	lr, [sp, #4]
   186e8:	add	fp, sp, #4
   186ec:	sub	sp, sp, #8
   186f0:	str	r0, [fp, #-8]
   186f4:	ldr	r0, [fp, #-8]
   186f8:	bl	1857c <__assert_fail@plt+0x7660>
   186fc:	mov	r3, r0
   18700:	mov	r0, r3
   18704:	sub	sp, fp, #4
   18708:	ldr	fp, [sp]
   1870c:	add	sp, sp, #4
   18710:	pop	{pc}		; (ldr pc, [sp], #4)
   18714:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18718:	mov	r7, r0
   1871c:	ldr	r6, [pc, #72]	; 1876c <__assert_fail@plt+0x7850>
   18720:	ldr	r5, [pc, #72]	; 18770 <__assert_fail@plt+0x7854>
   18724:	add	r6, pc, r6
   18728:	add	r5, pc, r5
   1872c:	sub	r6, r6, r5
   18730:	mov	r8, r1
   18734:	mov	r9, r2
   18738:	bl	10c8c <calloc@plt-0x20>
   1873c:	asrs	r6, r6, #2
   18740:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18744:	mov	r4, #0
   18748:	add	r4, r4, #1
   1874c:	ldr	r3, [r5], #4
   18750:	mov	r2, r9
   18754:	mov	r1, r8
   18758:	mov	r0, r7
   1875c:	blx	r3
   18760:	cmp	r6, r4
   18764:	bne	18748 <__assert_fail@plt+0x782c>
   18768:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1876c:	andeq	r1, r1, r8, ror #15
   18770:	andeq	r1, r1, r0, ror #15
   18774:	bx	lr
   18778:	ldr	r3, [pc, #12]	; 1878c <__assert_fail@plt+0x7870>
   1877c:	mov	r1, #0
   18780:	add	r3, pc, r3
   18784:	ldr	r2, [r3]
   18788:	b	10e5c <__cxa_atexit@plt>
   1878c:	andeq	r1, r1, r0, ror #18

Disassembly of section .fini:

00018790 <.fini>:
   18790:	push	{r3, lr}
   18794:	pop	{r3, pc}
