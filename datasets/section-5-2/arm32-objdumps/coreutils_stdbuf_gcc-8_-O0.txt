
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010cc0 <.init>:
   10cc0:	push	{r3, lr}
   10cc4:	bl	10fbc <__assert_fail@plt+0x48>
   10cc8:	pop	{r3, pc}

Disassembly of section .plt:

00010ccc <calloc@plt-0x14>:
   10ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd0:	ldr	lr, [pc, #4]	; 10cdc <calloc@plt-0x4>
   10cd4:	add	lr, pc, lr
   10cd8:	ldr	pc, [lr, #8]!
   10cdc:	andeq	r9, r1, r4, lsr #6

00010ce0 <calloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #804]!	; 0x324

00010cec <fputs_unlocked@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #796]!	; 0x31c

00010cf8 <strcmp@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #788]!	; 0x314

00010d04 <printf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #780]!	; 0x30c

00010d10 <fflush@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #772]!	; 0x304

00010d1c <free@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #764]!	; 0x2fc

00010d28 <_exit@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #756]!	; 0x2f4

00010d34 <memcpy@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d40 <execvp@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #740]!	; 0x2e4

00010d4c <mbsinit@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #732]!	; 0x2dc

00010d58 <memcmp@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #724]!	; 0x2d4

00010d64 <fputc_unlocked@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d70 <realloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #708]!	; 0x2c4

00010d7c <textdomain@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #700]!	; 0x2bc

00010d88 <iswprint@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #692]!	; 0x2b4

00010d94 <readlink@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #684]!	; 0x2ac

00010da0 <fwrite@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dac <lseek64@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #668]!	; 0x29c

00010db8 <__ctype_get_mb_cur_max@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #660]!	; 0x294

00010dc4 <__fpending@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #652]!	; 0x28c

00010dd0 <ferror_unlocked@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #644]!	; 0x284

00010ddc <mbrtowc@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #636]!	; 0x27c

00010de8 <error@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #628]!	; 0x274

00010df4 <getenv@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #620]!	; 0x26c

00010e00 <malloc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #612]!	; 0x264

00010e0c <__libc_start_main@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #604]!	; 0x25c

00010e18 <__freading@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #596]!	; 0x254

00010e24 <__gmon_start__@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #588]!	; 0x24c

00010e30 <mempcpy@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #580]!	; 0x244

00010e3c <getopt_long@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #572]!	; 0x23c

00010e48 <__ctype_b_loc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #564]!	; 0x234

00010e54 <exit@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #556]!	; 0x22c

00010e60 <gettext@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #548]!	; 0x224

00010e6c <strlen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #540]!	; 0x21c

00010e78 <strchr@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #532]!	; 0x214

00010e84 <fprintf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #524]!	; 0x20c

00010e90 <__errno_location@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #516]!	; 0x204

00010e9c <__cxa_atexit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ea8 <memset@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb4 <fileno@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec0 <strtoumax@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #484]!	; 0x1e4

00010ecc <asprintf@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ed8 <access@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee4 <fclose@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef0 <fseeko64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #452]!	; 0x1c4

00010efc <strtok@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #444]!	; 0x1bc

00010f08 <setlocale@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #436]!	; 0x1b4

00010f14 <putenv@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f20 <toupper@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #420]!	; 0x1a4

00010f2c <strrchr@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #412]!	; 0x19c

00010f38 <nl_langinfo@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #404]!	; 0x194

00010f44 <bindtextdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #396]!	; 0x18c

00010f50 <__xstat64@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #388]!	; 0x184

00010f5c <strncmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #380]!	; 0x17c

00010f68 <abort@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #372]!	; 0x174

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #364]!	; 0x16c

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e0c <__libc_start_main@plt>
   10fac:	bl	10f68 <abort@plt>
   10fb0:	andeq	r8, r1, r4, lsl #1
   10fb4:	andeq	r1, r1, r0, ror fp
   10fb8:	andeq	r8, r1, r4, lsr #32
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e24 <__gmon_start__@plt>
   10fd8:	andeq	r9, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, ip, ror #1
   10fe0:	ldr	r0, [pc, #24]	; 11000 <__assert_fail@plt+0x8c>
   10fe4:	ldr	r3, [pc, #24]	; 11004 <__assert_fail@plt+0x90>
   10fe8:	cmp	r3, r0
   10fec:	bxeq	lr
   10ff0:	ldr	r3, [pc, #16]	; 11008 <__assert_fail@plt+0x94>
   10ff4:	cmp	r3, #0
   10ff8:	bxeq	lr
   10ffc:	bx	r3
   11000:	andeq	sl, r2, r0, asr #2
   11004:	andeq	sl, r2, r0, asr #2
   11008:	andeq	r0, r0, r0
   1100c:	ldr	r0, [pc, #36]	; 11038 <__assert_fail@plt+0xc4>
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	sub	r1, r1, r0
   11018:	asr	r1, r1, #2
   1101c:	add	r1, r1, r1, lsr #31
   11020:	asrs	r1, r1, #1
   11024:	bxeq	lr
   11028:	ldr	r3, [pc, #16]	; 11040 <__assert_fail@plt+0xcc>
   1102c:	cmp	r3, #0
   11030:	bxeq	lr
   11034:	bx	r3
   11038:	andeq	sl, r2, r0, asr #2
   1103c:	andeq	sl, r2, r0, asr #2
   11040:	andeq	r0, r0, r0
   11044:	push	{r4, lr}
   11048:	ldr	r4, [pc, #24]	; 11068 <__assert_fail@plt+0xf4>
   1104c:	ldrb	r3, [r4]
   11050:	cmp	r3, #0
   11054:	popne	{r4, pc}
   11058:	bl	10fe0 <__assert_fail@plt+0x6c>
   1105c:	mov	r3, #1
   11060:	strb	r3, [r4]
   11064:	pop	{r4, pc}
   11068:	andeq	sl, r2, ip, asr r1
   1106c:	b	1100c <__assert_fail@plt+0x98>
   11070:	push	{fp}		; (str fp, [sp, #-4]!)
   11074:	add	fp, sp, #0
   11078:	sub	sp, sp, #12
   1107c:	str	r0, [fp, #-8]
   11080:	ldr	r3, [fp, #-8]
   11084:	cmp	r3, #1
   11088:	beq	1109c <__assert_fail@plt+0x128>
   1108c:	movw	r3, #41212	; 0xa0fc
   11090:	movt	r3, #2
   11094:	ldr	r2, [fp, #-8]
   11098:	str	r2, [r3]
   1109c:	nop	{0}
   110a0:	add	sp, fp, #0
   110a4:	pop	{fp}		; (ldr fp, [sp], #4)
   110a8:	bx	lr
   110ac:	str	fp, [sp, #-8]!
   110b0:	str	lr, [sp, #4]
   110b4:	add	fp, sp, #4
   110b8:	movw	r0, #32956	; 0x80bc
   110bc:	movt	r0, #1
   110c0:	bl	10e60 <gettext@plt>
   110c4:	mov	r2, r0
   110c8:	movw	r3, #41300	; 0xa154
   110cc:	movt	r3, #2
   110d0:	ldr	r3, [r3]
   110d4:	mov	r1, r3
   110d8:	mov	r0, r2
   110dc:	bl	10cec <fputs_unlocked@plt>
   110e0:	nop	{0}
   110e4:	sub	sp, fp, #4
   110e8:	ldr	fp, [sp]
   110ec:	add	sp, sp, #4
   110f0:	pop	{pc}		; (ldr pc, [sp], #4)
   110f4:	str	fp, [sp, #-8]!
   110f8:	str	lr, [sp, #4]
   110fc:	add	fp, sp, #4
   11100:	sub	sp, sp, #80	; 0x50
   11104:	str	r0, [fp, #-80]	; 0xffffffb0
   11108:	movw	r2, #33404	; 0x827c
   1110c:	movt	r2, #1
   11110:	sub	r3, fp, #72	; 0x48
   11114:	ldrd	r0, [r2]
   11118:	strd	r0, [r3]
   1111c:	ldrd	r0, [r2, #8]
   11120:	strd	r0, [r3, #8]
   11124:	ldrd	r0, [r2, #16]
   11128:	strd	r0, [r3, #16]
   1112c:	ldrd	r0, [r2, #24]
   11130:	strd	r0, [r3, #24]
   11134:	ldrd	r0, [r2, #32]
   11138:	strd	r0, [r3, #32]
   1113c:	ldrd	r0, [r2, #40]	; 0x28
   11140:	strd	r0, [r3, #40]	; 0x28
   11144:	ldrd	r0, [r2, #48]	; 0x30
   11148:	strd	r0, [r3, #48]	; 0x30
   1114c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11150:	str	r3, [fp, #-8]
   11154:	sub	r3, fp, #72	; 0x48
   11158:	str	r3, [fp, #-12]
   1115c:	b	1116c <__assert_fail@plt+0x1f8>
   11160:	ldr	r3, [fp, #-12]
   11164:	add	r3, r3, #8
   11168:	str	r3, [fp, #-12]
   1116c:	ldr	r3, [fp, #-12]
   11170:	ldr	r3, [r3]
   11174:	cmp	r3, #0
   11178:	beq	1119c <__assert_fail@plt+0x228>
   1117c:	ldr	r3, [fp, #-12]
   11180:	ldr	r3, [r3]
   11184:	mov	r1, r3
   11188:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1118c:	bl	10cf8 <strcmp@plt>
   11190:	mov	r3, r0
   11194:	cmp	r3, #0
   11198:	bne	11160 <__assert_fail@plt+0x1ec>
   1119c:	ldr	r3, [fp, #-12]
   111a0:	ldr	r3, [r3, #4]
   111a4:	cmp	r3, #0
   111a8:	beq	111b8 <__assert_fail@plt+0x244>
   111ac:	ldr	r3, [fp, #-12]
   111b0:	ldr	r3, [r3, #4]
   111b4:	str	r3, [fp, #-8]
   111b8:	movw	r0, #33032	; 0x8108
   111bc:	movt	r0, #1
   111c0:	bl	10e60 <gettext@plt>
   111c4:	mov	r3, r0
   111c8:	movw	r2, #33056	; 0x8120
   111cc:	movt	r2, #1
   111d0:	movw	r1, #33096	; 0x8148
   111d4:	movt	r1, #1
   111d8:	mov	r0, r3
   111dc:	bl	10d04 <printf@plt>
   111e0:	mov	r1, #0
   111e4:	mov	r0, #5
   111e8:	bl	10f08 <setlocale@plt>
   111ec:	str	r0, [fp, #-16]
   111f0:	ldr	r3, [fp, #-16]
   111f4:	cmp	r3, #0
   111f8:	beq	11244 <__assert_fail@plt+0x2d0>
   111fc:	mov	r2, #3
   11200:	movw	r1, #33112	; 0x8158
   11204:	movt	r1, #1
   11208:	ldr	r0, [fp, #-16]
   1120c:	bl	10f5c <strncmp@plt>
   11210:	mov	r3, r0
   11214:	cmp	r3, #0
   11218:	beq	11244 <__assert_fail@plt+0x2d0>
   1121c:	movw	r0, #33116	; 0x815c
   11220:	movt	r0, #1
   11224:	bl	10e60 <gettext@plt>
   11228:	mov	r2, r0
   1122c:	movw	r3, #41300	; 0xa154
   11230:	movt	r3, #2
   11234:	ldr	r3, [r3]
   11238:	mov	r1, r3
   1123c:	mov	r0, r2
   11240:	bl	10cec <fputs_unlocked@plt>
   11244:	movw	r0, #33188	; 0x81a4
   11248:	movt	r0, #1
   1124c:	bl	10e60 <gettext@plt>
   11250:	mov	r3, r0
   11254:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11258:	movw	r1, #33056	; 0x8120
   1125c:	movt	r1, #1
   11260:	mov	r0, r3
   11264:	bl	10d04 <printf@plt>
   11268:	movw	r0, #33216	; 0x81c0
   1126c:	movt	r0, #1
   11270:	bl	10e60 <gettext@plt>
   11274:	ldr	r2, [fp, #-8]
   11278:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1127c:	cmp	r2, r3
   11280:	bne	11290 <__assert_fail@plt+0x31c>
   11284:	movw	r3, #33268	; 0x81f4
   11288:	movt	r3, #1
   1128c:	b	11298 <__assert_fail@plt+0x324>
   11290:	movw	r3, #33280	; 0x8200
   11294:	movt	r3, #1
   11298:	mov	r2, r3
   1129c:	ldr	r1, [fp, #-8]
   112a0:	bl	10d04 <printf@plt>
   112a4:	nop	{0}
   112a8:	sub	sp, fp, #4
   112ac:	ldr	fp, [sp]
   112b0:	add	sp, sp, #4
   112b4:	pop	{pc}		; (ldr pc, [sp], #4)
   112b8:	str	r4, [sp, #-12]!
   112bc:	str	fp, [sp, #4]
   112c0:	str	lr, [sp, #8]
   112c4:	add	fp, sp, #8
   112c8:	sub	sp, sp, #36	; 0x24
   112cc:	str	r0, [fp, #-32]	; 0xffffffe0
   112d0:	str	r1, [fp, #-36]	; 0xffffffdc
   112d4:	sub	r2, fp, #28
   112d8:	movw	r3, #33596	; 0x833c
   112dc:	movt	r3, #1
   112e0:	str	r3, [sp]
   112e4:	mov	r3, r2
   112e8:	mov	r2, #10
   112ec:	mov	r1, #0
   112f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   112f4:	bl	168e8 <__assert_fail@plt+0x5974>
   112f8:	str	r0, [fp, #-16]
   112fc:	ldr	r3, [fp, #-16]
   11300:	cmp	r3, #0
   11304:	bne	11328 <__assert_fail@plt+0x3b4>
   11308:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1130c:	mvn	r0, #0
   11310:	mov	r1, #0
   11314:	cmp	r3, r1
   11318:	cmpeq	r2, r0
   1131c:	bls	11328 <__assert_fail@plt+0x3b4>
   11320:	mov	r3, #1
   11324:	str	r3, [fp, #-16]
   11328:	ldr	r3, [fp, #-16]
   1132c:	cmp	r3, #0
   11330:	bne	11358 <__assert_fail@plt+0x3e4>
   11334:	bl	10e90 <__errno_location@plt>
   11338:	mov	r2, r0
   1133c:	mov	r3, #0
   11340:	str	r3, [r2]
   11344:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11348:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1134c:	str	r2, [r3]
   11350:	mov	r3, #0
   11354:	b	11388 <__assert_fail@plt+0x414>
   11358:	ldr	r3, [fp, #-16]
   1135c:	cmp	r3, #1
   11360:	beq	11374 <__assert_fail@plt+0x400>
   11364:	bl	10e90 <__errno_location@plt>
   11368:	mov	r3, r0
   1136c:	ldr	r4, [r3]
   11370:	b	11378 <__assert_fail@plt+0x404>
   11374:	mov	r4, #75	; 0x4b
   11378:	bl	10e90 <__errno_location@plt>
   1137c:	mov	r3, r0
   11380:	str	r4, [r3]
   11384:	mvn	r3, #0
   11388:	mov	r0, r3
   1138c:	sub	sp, fp, #8
   11390:	ldr	r4, [sp]
   11394:	ldr	fp, [sp, #4]
   11398:	add	sp, sp, #8
   1139c:	pop	{pc}		; (ldr pc, [sp], #4)
   113a0:	str	r4, [sp, #-12]!
   113a4:	str	fp, [sp, #4]
   113a8:	str	lr, [sp, #8]
   113ac:	add	fp, sp, #8
   113b0:	sub	sp, sp, #12
   113b4:	str	r0, [fp, #-16]
   113b8:	ldr	r3, [fp, #-16]
   113bc:	cmp	r3, #0
   113c0:	beq	113fc <__assert_fail@plt+0x488>
   113c4:	movw	r3, #41296	; 0xa150
   113c8:	movt	r3, #2
   113cc:	ldr	r4, [r3]
   113d0:	movw	r0, #33608	; 0x8348
   113d4:	movt	r0, #1
   113d8:	bl	10e60 <gettext@plt>
   113dc:	mov	r1, r0
   113e0:	movw	r3, #41360	; 0xa190
   113e4:	movt	r3, #2
   113e8:	ldr	r3, [r3]
   113ec:	mov	r2, r3
   113f0:	mov	r0, r4
   113f4:	bl	10e84 <fprintf@plt>
   113f8:	b	11574 <__assert_fail@plt+0x600>
   113fc:	movw	r0, #33648	; 0x8370
   11400:	movt	r0, #1
   11404:	bl	10e60 <gettext@plt>
   11408:	mov	r2, r0
   1140c:	movw	r3, #41360	; 0xa190
   11410:	movt	r3, #2
   11414:	ldr	r3, [r3]
   11418:	mov	r1, r3
   1141c:	mov	r0, r2
   11420:	bl	10d04 <printf@plt>
   11424:	movw	r0, #33680	; 0x8390
   11428:	movt	r0, #1
   1142c:	bl	10e60 <gettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r3, #41300	; 0xa154
   11438:	movt	r3, #2
   1143c:	ldr	r3, [r3]
   11440:	mov	r1, r3
   11444:	mov	r0, r2
   11448:	bl	10cec <fputs_unlocked@plt>
   1144c:	bl	110ac <__assert_fail@plt+0x138>
   11450:	movw	r0, #33756	; 0x83dc
   11454:	movt	r0, #1
   11458:	bl	10e60 <gettext@plt>
   1145c:	mov	r2, r0
   11460:	movw	r3, #41300	; 0xa154
   11464:	movt	r3, #2
   11468:	ldr	r3, [r3]
   1146c:	mov	r1, r3
   11470:	mov	r0, r2
   11474:	bl	10cec <fputs_unlocked@plt>
   11478:	movw	r0, #33940	; 0x8494
   1147c:	movt	r0, #1
   11480:	bl	10e60 <gettext@plt>
   11484:	mov	r2, r0
   11488:	movw	r3, #41300	; 0xa154
   1148c:	movt	r3, #2
   11490:	ldr	r3, [r3]
   11494:	mov	r1, r3
   11498:	mov	r0, r2
   1149c:	bl	10cec <fputs_unlocked@plt>
   114a0:	movw	r0, #33988	; 0x84c4
   114a4:	movt	r0, #1
   114a8:	bl	10e60 <gettext@plt>
   114ac:	mov	r2, r0
   114b0:	movw	r3, #41300	; 0xa154
   114b4:	movt	r3, #2
   114b8:	ldr	r3, [r3]
   114bc:	mov	r1, r3
   114c0:	mov	r0, r2
   114c4:	bl	10cec <fputs_unlocked@plt>
   114c8:	movw	r0, #34044	; 0x84fc
   114cc:	movt	r0, #1
   114d0:	bl	10e60 <gettext@plt>
   114d4:	mov	r2, r0
   114d8:	movw	r3, #41300	; 0xa154
   114dc:	movt	r3, #2
   114e0:	ldr	r3, [r3]
   114e4:	mov	r1, r3
   114e8:	mov	r0, r2
   114ec:	bl	10cec <fputs_unlocked@plt>
   114f0:	movw	r0, #34156	; 0x856c
   114f4:	movt	r0, #1
   114f8:	bl	10e60 <gettext@plt>
   114fc:	mov	r2, r0
   11500:	movw	r3, #41300	; 0xa154
   11504:	movt	r3, #2
   11508:	ldr	r3, [r3]
   1150c:	mov	r1, r3
   11510:	mov	r0, r2
   11514:	bl	10cec <fputs_unlocked@plt>
   11518:	movw	r0, #34220	; 0x85ac
   1151c:	movt	r0, #1
   11520:	bl	10e60 <gettext@plt>
   11524:	mov	r2, r0
   11528:	movw	r3, #41300	; 0xa154
   1152c:	movt	r3, #2
   11530:	ldr	r3, [r3]
   11534:	mov	r1, r3
   11538:	mov	r0, r2
   1153c:	bl	10cec <fputs_unlocked@plt>
   11540:	movw	r0, #34532	; 0x86e4
   11544:	movt	r0, #1
   11548:	bl	10e60 <gettext@plt>
   1154c:	mov	r2, r0
   11550:	movw	r3, #41300	; 0xa154
   11554:	movt	r3, #2
   11558:	ldr	r3, [r3]
   1155c:	mov	r1, r3
   11560:	mov	r0, r2
   11564:	bl	10cec <fputs_unlocked@plt>
   11568:	movw	r0, #34800	; 0x87f0
   1156c:	movt	r0, #1
   11570:	bl	110f4 <__assert_fail@plt+0x180>
   11574:	ldr	r0, [fp, #-16]
   11578:	bl	10e54 <exit@plt>
   1157c:	str	fp, [sp, #-8]!
   11580:	str	lr, [sp, #4]
   11584:	add	fp, sp, #4
   11588:	sub	sp, sp, #24
   1158c:	str	r0, [fp, #-24]	; 0xffffffe8
   11590:	mov	r1, #47	; 0x2f
   11594:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11598:	bl	10e78 <strchr@plt>
   1159c:	mov	r3, r0
   115a0:	cmp	r3, #0
   115a4:	beq	115c8 <__assert_fail@plt+0x654>
   115a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   115ac:	bl	12718 <__assert_fail@plt+0x17a4>
   115b0:	mov	r3, r0
   115b4:	mov	r2, r3
   115b8:	movw	r3, #41312	; 0xa160
   115bc:	movt	r3, #2
   115c0:	str	r2, [r3]
   115c4:	b	116d4 <__assert_fail@plt+0x760>
   115c8:	movw	r0, #34808	; 0x87f8
   115cc:	movt	r0, #1
   115d0:	bl	16640 <__assert_fail@plt+0x56cc>
   115d4:	mov	r3, r0
   115d8:	str	r3, [fp, #-8]
   115dc:	ldr	r3, [fp, #-8]
   115e0:	cmp	r3, #0
   115e4:	beq	11608 <__assert_fail@plt+0x694>
   115e8:	ldr	r0, [fp, #-8]
   115ec:	bl	12718 <__assert_fail@plt+0x17a4>
   115f0:	mov	r3, r0
   115f4:	mov	r2, r3
   115f8:	movw	r3, #41312	; 0xa160
   115fc:	movt	r3, #2
   11600:	str	r2, [r3]
   11604:	b	116cc <__assert_fail@plt+0x758>
   11608:	movw	r0, #34824	; 0x8808
   1160c:	movt	r0, #1
   11610:	bl	10df4 <getenv@plt>
   11614:	str	r0, [fp, #-8]
   11618:	ldr	r3, [fp, #-8]
   1161c:	cmp	r3, #0
   11620:	beq	116cc <__assert_fail@plt+0x758>
   11624:	ldr	r0, [fp, #-8]
   11628:	bl	165b4 <__assert_fail@plt+0x5640>
   1162c:	mov	r3, r0
   11630:	str	r3, [fp, #-8]
   11634:	movw	r1, #34832	; 0x8810
   11638:	movt	r1, #1
   1163c:	ldr	r0, [fp, #-8]
   11640:	bl	10efc <strtok@plt>
   11644:	str	r0, [fp, #-12]
   11648:	b	116c0 <__assert_fail@plt+0x74c>
   1164c:	mov	r2, #0
   11650:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11654:	ldr	r0, [fp, #-12]
   11658:	bl	128fc <__assert_fail@plt+0x1988>
   1165c:	mov	r3, r0
   11660:	str	r3, [fp, #-16]
   11664:	mov	r1, #1
   11668:	ldr	r0, [fp, #-16]
   1166c:	bl	10ed8 <access@plt>
   11670:	mov	r3, r0
   11674:	cmp	r3, #0
   11678:	bne	116a4 <__assert_fail@plt+0x730>
   1167c:	ldr	r0, [fp, #-16]
   11680:	bl	12718 <__assert_fail@plt+0x17a4>
   11684:	mov	r3, r0
   11688:	mov	r2, r3
   1168c:	movw	r3, #41312	; 0xa160
   11690:	movt	r3, #2
   11694:	str	r2, [r3]
   11698:	ldr	r0, [fp, #-16]
   1169c:	bl	12afc <__assert_fail@plt+0x1b88>
   116a0:	b	116cc <__assert_fail@plt+0x758>
   116a4:	ldr	r0, [fp, #-16]
   116a8:	bl	12afc <__assert_fail@plt+0x1b88>
   116ac:	movw	r1, #34832	; 0x8810
   116b0:	movt	r1, #1
   116b4:	mov	r0, #0
   116b8:	bl	10efc <strtok@plt>
   116bc:	str	r0, [fp, #-12]
   116c0:	ldr	r3, [fp, #-12]
   116c4:	cmp	r3, #0
   116c8:	bne	1164c <__assert_fail@plt+0x6d8>
   116cc:	ldr	r0, [fp, #-8]
   116d0:	bl	12afc <__assert_fail@plt+0x1b88>
   116d4:	nop	{0}
   116d8:	sub	sp, fp, #4
   116dc:	ldr	fp, [sp]
   116e0:	add	sp, sp, #4
   116e4:	pop	{pc}		; (ldr pc, [sp], #4)
   116e8:	push	{fp}		; (str fp, [sp, #-4]!)
   116ec:	add	fp, sp, #0
   116f0:	sub	sp, sp, #20
   116f4:	str	r0, [fp, #-16]
   116f8:	mvn	r3, #0
   116fc:	str	r3, [fp, #-8]
   11700:	ldr	r3, [fp, #-16]
   11704:	cmp	r3, #105	; 0x69
   11708:	beq	11730 <__assert_fail@plt+0x7bc>
   1170c:	ldr	r3, [fp, #-16]
   11710:	cmp	r3, #111	; 0x6f
   11714:	beq	1173c <__assert_fail@plt+0x7c8>
   11718:	ldr	r3, [fp, #-16]
   1171c:	cmp	r3, #101	; 0x65
   11720:	bne	11748 <__assert_fail@plt+0x7d4>
   11724:	mov	r3, #2
   11728:	str	r3, [fp, #-8]
   1172c:	b	11748 <__assert_fail@plt+0x7d4>
   11730:	mov	r3, #0
   11734:	str	r3, [fp, #-8]
   11738:	b	11748 <__assert_fail@plt+0x7d4>
   1173c:	mov	r3, #1
   11740:	str	r3, [fp, #-8]
   11744:	nop	{0}
   11748:	ldr	r3, [fp, #-8]
   1174c:	mov	r0, r3
   11750:	add	sp, fp, #0
   11754:	pop	{fp}		; (ldr fp, [sp], #4)
   11758:	bx	lr
   1175c:	strd	r4, [sp, #-16]!
   11760:	str	fp, [sp, #8]
   11764:	str	lr, [sp, #12]
   11768:	add	fp, sp, #12
   1176c:	sub	sp, sp, #152	; 0x98
   11770:	movw	r3, #34836	; 0x8814
   11774:	movt	r3, #1
   11778:	str	r3, [fp, #-24]	; 0xffffffe8
   1177c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11780:	bl	10df4 <getenv@plt>
   11784:	str	r0, [fp, #-28]	; 0xffffffe4
   11788:	movw	r3, #41312	; 0xa160
   1178c:	movt	r3, #2
   11790:	ldr	r3, [r3]
   11794:	str	r3, [fp, #-44]	; 0xffffffd4
   11798:	movw	r3, #34848	; 0x8820
   1179c:	movt	r3, #1
   117a0:	str	r3, [fp, #-40]	; 0xffffffd8
   117a4:	mov	r3, #0
   117a8:	str	r3, [fp, #-36]	; 0xffffffdc
   117ac:	sub	r3, fp, #44	; 0x2c
   117b0:	str	r3, [fp, #-20]	; 0xffffffec
   117b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   117b8:	ldr	r3, [r3]
   117bc:	ldrb	r3, [r3]
   117c0:	cmp	r3, #0
   117c4:	bne	117e0 <__assert_fail@plt+0x86c>
   117c8:	movw	r0, #34880	; 0x8840
   117cc:	movt	r0, #1
   117d0:	bl	165b4 <__assert_fail@plt+0x5640>
   117d4:	mov	r3, r0
   117d8:	str	r3, [fp, #-48]	; 0xffffffd0
   117dc:	b	11890 <__assert_fail@plt+0x91c>
   117e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117e4:	ldr	r2, [r3]
   117e8:	sub	r0, fp, #48	; 0x30
   117ec:	movw	r3, #34880	; 0x8840
   117f0:	movt	r3, #1
   117f4:	movw	r1, #34896	; 0x8850
   117f8:	movt	r1, #1
   117fc:	bl	10ecc <asprintf@plt>
   11800:	str	r0, [fp, #-16]
   11804:	ldr	r3, [fp, #-16]
   11808:	cmp	r3, #0
   1180c:	bge	11814 <__assert_fail@plt+0x8a0>
   11810:	bl	165fc <__assert_fail@plt+0x5688>
   11814:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11818:	sub	r2, fp, #156	; 0x9c
   1181c:	mov	r1, r2
   11820:	mov	r0, r3
   11824:	bl	180a0 <__assert_fail@plt+0x712c>
   11828:	mov	r3, r0
   1182c:	cmp	r3, #0
   11830:	beq	1188c <__assert_fail@plt+0x918>
   11834:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11838:	mov	r0, r3
   1183c:	bl	12afc <__assert_fail@plt+0x1b88>
   11840:	ldr	r3, [fp, #-20]	; 0xffffffec
   11844:	add	r3, r3, #4
   11848:	str	r3, [fp, #-20]	; 0xffffffec
   1184c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11850:	ldr	r3, [r3]
   11854:	cmp	r3, #0
   11858:	bne	117b4 <__assert_fail@plt+0x840>
   1185c:	movw	r0, #34904	; 0x8858
   11860:	movt	r0, #1
   11864:	bl	10e60 <gettext@plt>
   11868:	mov	r4, r0
   1186c:	movw	r0, #34880	; 0x8840
   11870:	movt	r0, #1
   11874:	bl	15500 <__assert_fail@plt+0x458c>
   11878:	mov	r3, r0
   1187c:	mov	r2, r4
   11880:	mov	r1, #0
   11884:	mov	r0, #125	; 0x7d
   11888:	bl	10de8 <error@plt>
   1188c:	nop	{0}
   11890:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11894:	cmp	r3, #0
   11898:	beq	118c4 <__assert_fail@plt+0x950>
   1189c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   118a0:	sub	r0, fp, #32
   118a4:	str	r3, [sp]
   118a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   118ac:	ldr	r2, [fp, #-24]	; 0xffffffe8
   118b0:	movw	r1, #34924	; 0x886c
   118b4:	movt	r1, #1
   118b8:	bl	10ecc <asprintf@plt>
   118bc:	str	r0, [fp, #-16]
   118c0:	b	118e0 <__assert_fail@plt+0x96c>
   118c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   118c8:	sub	r0, fp, #32
   118cc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   118d0:	movw	r1, #34936	; 0x8878
   118d4:	movt	r1, #1
   118d8:	bl	10ecc <asprintf@plt>
   118dc:	str	r0, [fp, #-16]
   118e0:	ldr	r3, [fp, #-16]
   118e4:	cmp	r3, #0
   118e8:	bge	118f0 <__assert_fail@plt+0x97c>
   118ec:	bl	165fc <__assert_fail@plt+0x5688>
   118f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   118f4:	mov	r0, r3
   118f8:	bl	12afc <__assert_fail@plt+0x1b88>
   118fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11900:	mov	r0, r3
   11904:	bl	10f14 <putenv@plt>
   11908:	str	r0, [fp, #-16]
   1190c:	ldr	r3, [fp, #-16]
   11910:	cmp	r3, #0
   11914:	beq	11954 <__assert_fail@plt+0x9e0>
   11918:	bl	10e90 <__errno_location@plt>
   1191c:	mov	r3, r0
   11920:	ldr	r4, [r3]
   11924:	movw	r0, #34944	; 0x8880
   11928:	movt	r0, #1
   1192c:	bl	10e60 <gettext@plt>
   11930:	mov	r5, r0
   11934:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11938:	mov	r0, r3
   1193c:	bl	15500 <__assert_fail@plt+0x458c>
   11940:	mov	r3, r0
   11944:	mov	r2, r5
   11948:	mov	r1, r4
   1194c:	mov	r0, #125	; 0x7d
   11950:	bl	10de8 <error@plt>
   11954:	nop	{0}
   11958:	sub	sp, fp, #12
   1195c:	ldrd	r4, [sp]
   11960:	ldr	fp, [sp, #8]
   11964:	add	sp, sp, #12
   11968:	pop	{pc}		; (ldr pc, [sp], #4)
   1196c:	strd	r4, [sp, #-16]!
   11970:	str	fp, [sp, #8]
   11974:	str	lr, [sp, #12]
   11978:	add	fp, sp, #12
   1197c:	sub	sp, sp, #24
   11980:	mov	r3, #0
   11984:	strb	r3, [fp, #-13]
   11988:	mov	r3, #0
   1198c:	str	r3, [fp, #-20]	; 0xffffffec
   11990:	b	11b48 <__assert_fail@plt+0xbd4>
   11994:	movw	r2, #41316	; 0xa164
   11998:	movt	r2, #2
   1199c:	ldr	r1, [fp, #-20]	; 0xffffffec
   119a0:	mov	r3, r1
   119a4:	lsl	r3, r3, #1
   119a8:	add	r3, r3, r1
   119ac:	lsl	r3, r3, #2
   119b0:	add	r3, r2, r3
   119b4:	add	r3, r3, #8
   119b8:	ldr	r3, [r3]
   119bc:	cmp	r3, #0
   119c0:	beq	11b3c <__assert_fail@plt+0xbc8>
   119c4:	movw	r2, #41316	; 0xa164
   119c8:	movt	r2, #2
   119cc:	ldr	r1, [fp, #-20]	; 0xffffffec
   119d0:	mov	r3, r1
   119d4:	lsl	r3, r3, #1
   119d8:	add	r3, r3, r1
   119dc:	lsl	r3, r3, #2
   119e0:	add	r3, r2, r3
   119e4:	add	r3, r3, #8
   119e8:	ldr	r3, [r3]
   119ec:	ldrb	r3, [r3]
   119f0:	cmp	r3, #76	; 0x4c
   119f4:	bne	11a4c <__assert_fail@plt+0xad8>
   119f8:	movw	r2, #41316	; 0xa164
   119fc:	movt	r2, #2
   11a00:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a04:	mov	r3, r1
   11a08:	lsl	r3, r3, #1
   11a0c:	add	r3, r3, r1
   11a10:	lsl	r3, r3, #2
   11a14:	add	r3, r2, r3
   11a18:	add	r3, r3, #4
   11a1c:	ldr	r3, [r3]
   11a20:	mov	r0, r3
   11a24:	bl	10f20 <toupper@plt>
   11a28:	mov	r3, r0
   11a2c:	sub	r0, fp, #28
   11a30:	movw	r2, #34988	; 0x88ac
   11a34:	movt	r2, #1
   11a38:	movw	r1, #35000	; 0x88b8
   11a3c:	movt	r1, #1
   11a40:	bl	10ecc <asprintf@plt>
   11a44:	str	r0, [fp, #-24]	; 0xffffffe8
   11a48:	b	11ad0 <__assert_fail@plt+0xb5c>
   11a4c:	movw	r2, #41316	; 0xa164
   11a50:	movt	r2, #2
   11a54:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a58:	mov	r3, r1
   11a5c:	lsl	r3, r3, #1
   11a60:	add	r3, r3, r1
   11a64:	lsl	r3, r3, #2
   11a68:	add	r3, r2, r3
   11a6c:	add	r3, r3, #4
   11a70:	ldr	r3, [r3]
   11a74:	mov	r0, r3
   11a78:	bl	10f20 <toupper@plt>
   11a7c:	mov	ip, r0
   11a80:	movw	r2, #41316	; 0xa164
   11a84:	movt	r2, #2
   11a88:	ldr	r1, [fp, #-20]	; 0xffffffec
   11a8c:	mov	r3, r1
   11a90:	lsl	r3, r3, #1
   11a94:	add	r3, r3, r1
   11a98:	lsl	r3, r3, #2
   11a9c:	add	r3, r2, r3
   11aa0:	ldr	r3, [r3]
   11aa4:	mov	r2, r3
   11aa8:	mov	r3, #0
   11aac:	sub	r0, fp, #28
   11ab0:	strd	r2, [sp]
   11ab4:	mov	r3, ip
   11ab8:	movw	r2, #34988	; 0x88ac
   11abc:	movt	r2, #1
   11ac0:	movw	r1, #35008	; 0x88c0
   11ac4:	movt	r1, #1
   11ac8:	bl	10ecc <asprintf@plt>
   11acc:	str	r0, [fp, #-24]	; 0xffffffe8
   11ad0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11ad4:	cmp	r3, #0
   11ad8:	bge	11ae0 <__assert_fail@plt+0xb6c>
   11adc:	bl	165fc <__assert_fail@plt+0x5688>
   11ae0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11ae4:	mov	r0, r3
   11ae8:	bl	10f14 <putenv@plt>
   11aec:	mov	r3, r0
   11af0:	cmp	r3, #0
   11af4:	beq	11b34 <__assert_fail@plt+0xbc0>
   11af8:	bl	10e90 <__errno_location@plt>
   11afc:	mov	r3, r0
   11b00:	ldr	r4, [r3]
   11b04:	movw	r0, #34944	; 0x8880
   11b08:	movt	r0, #1
   11b0c:	bl	10e60 <gettext@plt>
   11b10:	mov	r5, r0
   11b14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11b18:	mov	r0, r3
   11b1c:	bl	15500 <__assert_fail@plt+0x458c>
   11b20:	mov	r3, r0
   11b24:	mov	r2, r5
   11b28:	mov	r1, r4
   11b2c:	mov	r0, #125	; 0x7d
   11b30:	bl	10de8 <error@plt>
   11b34:	mov	r3, #1
   11b38:	strb	r3, [fp, #-13]
   11b3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b40:	add	r3, r3, #1
   11b44:	str	r3, [fp, #-20]	; 0xffffffec
   11b48:	ldr	r3, [fp, #-20]	; 0xffffffec
   11b4c:	cmp	r3, #2
   11b50:	bls	11994 <__assert_fail@plt+0xa20>
   11b54:	ldrb	r3, [fp, #-13]
   11b58:	mov	r0, r3
   11b5c:	sub	sp, fp, #12
   11b60:	ldrd	r4, [sp]
   11b64:	ldr	fp, [sp, #8]
   11b68:	add	sp, sp, #12
   11b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b70:	strd	r4, [sp, #-16]!
   11b74:	str	fp, [sp, #8]
   11b78:	str	lr, [sp, #12]
   11b7c:	add	fp, sp, #12
   11b80:	sub	sp, sp, #32
   11b84:	str	r0, [fp, #-32]	; 0xffffffe0
   11b88:	str	r1, [fp, #-36]	; 0xffffffdc
   11b8c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11b90:	ldr	r3, [r3]
   11b94:	mov	r0, r3
   11b98:	bl	12ba0 <__assert_fail@plt+0x1c2c>
   11b9c:	movw	r1, #33280	; 0x8200
   11ba0:	movt	r1, #1
   11ba4:	mov	r0, #6
   11ba8:	bl	10f08 <setlocale@plt>
   11bac:	movw	r1, #35020	; 0x88cc
   11bb0:	movt	r1, #1
   11bb4:	movw	r0, #33304	; 0x8218
   11bb8:	movt	r0, #1
   11bbc:	bl	10f44 <bindtextdomain@plt>
   11bc0:	movw	r0, #33304	; 0x8218
   11bc4:	movt	r0, #1
   11bc8:	bl	10d7c <textdomain@plt>
   11bcc:	mov	r0, #125	; 0x7d
   11bd0:	bl	11070 <__assert_fail@plt+0xfc>
   11bd4:	movw	r0, #9672	; 0x25c8
   11bd8:	movt	r0, #1
   11bdc:	bl	18088 <__assert_fail@plt+0x7114>
   11be0:	b	11e6c <__assert_fail@plt+0xef8>
   11be4:	ldr	r3, [fp, #-16]
   11be8:	cmp	r3, #101	; 0x65
   11bec:	beq	11c30 <__assert_fail@plt+0xcbc>
   11bf0:	ldr	r3, [fp, #-16]
   11bf4:	cmp	r3, #101	; 0x65
   11bf8:	bgt	11c18 <__assert_fail@plt+0xca4>
   11bfc:	ldr	r3, [fp, #-16]
   11c00:	cmn	r3, #3
   11c04:	beq	11e18 <__assert_fail@plt+0xea4>
   11c08:	ldr	r3, [fp, #-16]
   11c0c:	cmn	r3, #2
   11c10:	beq	11e10 <__assert_fail@plt+0xe9c>
   11c14:	b	11e64 <__assert_fail@plt+0xef0>
   11c18:	ldr	r3, [fp, #-16]
   11c1c:	cmp	r3, #105	; 0x69
   11c20:	beq	11c30 <__assert_fail@plt+0xcbc>
   11c24:	ldr	r3, [fp, #-16]
   11c28:	cmp	r3, #111	; 0x6f
   11c2c:	bne	11e64 <__assert_fail@plt+0xef0>
   11c30:	ldr	r0, [fp, #-16]
   11c34:	bl	116e8 <__assert_fail@plt+0x774>
   11c38:	str	r0, [fp, #-20]	; 0xffffffec
   11c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c40:	cmp	r3, #0
   11c44:	blt	11c54 <__assert_fail@plt+0xce0>
   11c48:	ldr	r3, [fp, #-20]	; 0xffffffec
   11c4c:	cmp	r3, #2
   11c50:	bls	11c74 <__assert_fail@plt+0xd00>
   11c54:	movw	r3, #35316	; 0x89f4
   11c58:	movt	r3, #1
   11c5c:	mov	r2, #336	; 0x150
   11c60:	movw	r1, #35044	; 0x88e4
   11c64:	movt	r1, #1
   11c68:	movw	r0, #35060	; 0x88f4
   11c6c:	movt	r0, #1
   11c70:	bl	10f74 <__assert_fail@plt>
   11c74:	movw	r2, #41316	; 0xa164
   11c78:	movt	r2, #2
   11c7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   11c80:	mov	r3, r1
   11c84:	lsl	r3, r3, #1
   11c88:	add	r3, r3, r1
   11c8c:	lsl	r3, r3, #2
   11c90:	add	r3, r2, r3
   11c94:	add	r3, r3, #4
   11c98:	ldr	r2, [fp, #-16]
   11c9c:	str	r2, [r3]
   11ca0:	b	11cc0 <__assert_fail@plt+0xd4c>
   11ca4:	movw	r3, #41304	; 0xa158
   11ca8:	movt	r3, #2
   11cac:	ldr	r3, [r3]
   11cb0:	add	r2, r3, #1
   11cb4:	movw	r3, #41304	; 0xa158
   11cb8:	movt	r3, #2
   11cbc:	str	r2, [r3]
   11cc0:	movw	r3, #41304	; 0xa158
   11cc4:	movt	r3, #2
   11cc8:	ldr	r3, [r3]
   11ccc:	ldrb	r3, [r3]
   11cd0:	mov	r0, r3
   11cd4:	bl	1233c <__assert_fail@plt+0x13c8>
   11cd8:	mov	r3, r0
   11cdc:	cmp	r3, #0
   11ce0:	bne	11ca4 <__assert_fail@plt+0xd30>
   11ce4:	movw	r3, #41304	; 0xa158
   11ce8:	movt	r3, #2
   11cec:	ldr	r0, [r3]
   11cf0:	movw	r2, #41316	; 0xa164
   11cf4:	movt	r2, #2
   11cf8:	ldr	r1, [fp, #-20]	; 0xffffffec
   11cfc:	mov	r3, r1
   11d00:	lsl	r3, r3, #1
   11d04:	add	r3, r3, r1
   11d08:	lsl	r3, r3, #2
   11d0c:	add	r3, r2, r3
   11d10:	add	r3, r3, #8
   11d14:	str	r0, [r3]
   11d18:	ldr	r3, [fp, #-16]
   11d1c:	cmp	r3, #105	; 0x69
   11d20:	bne	11d64 <__assert_fail@plt+0xdf0>
   11d24:	movw	r3, #41304	; 0xa158
   11d28:	movt	r3, #2
   11d2c:	ldr	r3, [r3]
   11d30:	ldrb	r3, [r3]
   11d34:	cmp	r3, #76	; 0x4c
   11d38:	bne	11d64 <__assert_fail@plt+0xdf0>
   11d3c:	movw	r0, #35120	; 0x8930
   11d40:	movt	r0, #1
   11d44:	bl	10e60 <gettext@plt>
   11d48:	mov	r3, r0
   11d4c:	mov	r2, r3
   11d50:	mov	r1, #0
   11d54:	mov	r0, #0
   11d58:	bl	10de8 <error@plt>
   11d5c:	mov	r0, #125	; 0x7d
   11d60:	bl	113a0 <__assert_fail@plt+0x42c>
   11d64:	movw	r3, #41304	; 0xa158
   11d68:	movt	r3, #2
   11d6c:	ldr	r3, [r3]
   11d70:	movw	r1, #35156	; 0x8954
   11d74:	movt	r1, #1
   11d78:	mov	r0, r3
   11d7c:	bl	10cf8 <strcmp@plt>
   11d80:	mov	r3, r0
   11d84:	cmp	r3, #0
   11d88:	beq	11e6c <__assert_fail@plt+0xef8>
   11d8c:	movw	r3, #41304	; 0xa158
   11d90:	movt	r3, #2
   11d94:	ldr	r0, [r3]
   11d98:	ldr	r2, [fp, #-20]	; 0xffffffec
   11d9c:	mov	r3, r2
   11da0:	lsl	r3, r3, #1
   11da4:	add	r3, r3, r2
   11da8:	lsl	r3, r3, #2
   11dac:	movw	r2, #41316	; 0xa164
   11db0:	movt	r2, #2
   11db4:	add	r3, r3, r2
   11db8:	mov	r1, r3
   11dbc:	bl	112b8 <__assert_fail@plt+0x344>
   11dc0:	mov	r3, r0
   11dc4:	cmn	r3, #1
   11dc8:	bne	11e6c <__assert_fail@plt+0xef8>
   11dcc:	bl	10e90 <__errno_location@plt>
   11dd0:	mov	r3, r0
   11dd4:	ldr	r4, [r3]
   11dd8:	movw	r0, #35160	; 0x8958
   11ddc:	movt	r0, #1
   11de0:	bl	10e60 <gettext@plt>
   11de4:	mov	r5, r0
   11de8:	movw	r3, #41304	; 0xa158
   11dec:	movt	r3, #2
   11df0:	ldr	r3, [r3]
   11df4:	mov	r0, r3
   11df8:	bl	15500 <__assert_fail@plt+0x458c>
   11dfc:	mov	r3, r0
   11e00:	mov	r2, r5
   11e04:	mov	r1, r4
   11e08:	mov	r0, #125	; 0x7d
   11e0c:	bl	10de8 <error@plt>
   11e10:	mov	r0, #0
   11e14:	bl	113a0 <__assert_fail@plt+0x42c>
   11e18:	movw	r3, #41300	; 0xa154
   11e1c:	movt	r3, #2
   11e20:	ldr	r0, [r3]
   11e24:	movw	r3, #41208	; 0xa0f8
   11e28:	movt	r3, #2
   11e2c:	ldr	r2, [r3]
   11e30:	mov	r3, #0
   11e34:	str	r3, [sp, #4]
   11e38:	movw	r3, #35176	; 0x8968
   11e3c:	movt	r3, #1
   11e40:	str	r3, [sp]
   11e44:	mov	r3, r2
   11e48:	movw	r2, #33096	; 0x8148
   11e4c:	movt	r2, #1
   11e50:	movw	r1, #34800	; 0x87f0
   11e54:	movt	r1, #1
   11e58:	bl	15c08 <__assert_fail@plt+0x4c94>
   11e5c:	mov	r0, #0
   11e60:	bl	10e54 <exit@plt>
   11e64:	mov	r0, #125	; 0x7d
   11e68:	bl	113a0 <__assert_fail@plt+0x42c>
   11e6c:	mov	r3, #0
   11e70:	str	r3, [sp]
   11e74:	movw	r3, #33500	; 0x82dc
   11e78:	movt	r3, #1
   11e7c:	movw	r2, #35192	; 0x8978
   11e80:	movt	r2, #1
   11e84:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11e88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e8c:	bl	10e3c <getopt_long@plt>
   11e90:	str	r0, [fp, #-16]
   11e94:	ldr	r3, [fp, #-16]
   11e98:	cmn	r3, #1
   11e9c:	bne	11be4 <__assert_fail@plt+0xc70>
   11ea0:	movw	r3, #41288	; 0xa148
   11ea4:	movt	r3, #2
   11ea8:	ldr	r3, [r3]
   11eac:	lsl	r3, r3, #2
   11eb0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11eb4:	add	r3, r2, r3
   11eb8:	str	r3, [fp, #-36]	; 0xffffffdc
   11ebc:	movw	r3, #41288	; 0xa148
   11ec0:	movt	r3, #2
   11ec4:	ldr	r3, [r3]
   11ec8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11ecc:	sub	r3, r2, r3
   11ed0:	str	r3, [fp, #-32]	; 0xffffffe0
   11ed4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   11ed8:	cmp	r3, #0
   11edc:	bgt	11f08 <__assert_fail@plt+0xf94>
   11ee0:	movw	r0, #35200	; 0x8980
   11ee4:	movt	r0, #1
   11ee8:	bl	10e60 <gettext@plt>
   11eec:	mov	r3, r0
   11ef0:	mov	r2, r3
   11ef4:	mov	r1, #0
   11ef8:	mov	r0, #0
   11efc:	bl	10de8 <error@plt>
   11f00:	mov	r0, #125	; 0x7d
   11f04:	bl	113a0 <__assert_fail@plt+0x42c>
   11f08:	bl	1196c <__assert_fail@plt+0x9f8>
   11f0c:	mov	r3, r0
   11f10:	eor	r3, r3, #1
   11f14:	uxtb	r3, r3
   11f18:	cmp	r3, #0
   11f1c:	beq	11f48 <__assert_fail@plt+0xfd4>
   11f20:	movw	r0, #35216	; 0x8990
   11f24:	movt	r0, #1
   11f28:	bl	10e60 <gettext@plt>
   11f2c:	mov	r3, r0
   11f30:	mov	r2, r3
   11f34:	mov	r1, #0
   11f38:	mov	r0, #0
   11f3c:	bl	10de8 <error@plt>
   11f40:	mov	r0, #125	; 0x7d
   11f44:	bl	113a0 <__assert_fail@plt+0x42c>
   11f48:	movw	r3, #41360	; 0xa190
   11f4c:	movt	r3, #2
   11f50:	ldr	r3, [r3]
   11f54:	mov	r0, r3
   11f58:	bl	1157c <__assert_fail@plt+0x608>
   11f5c:	movw	r3, #41312	; 0xa160
   11f60:	movt	r3, #2
   11f64:	ldr	r3, [r3]
   11f68:	cmp	r3, #0
   11f6c:	bne	11f90 <__assert_fail@plt+0x101c>
   11f70:	movw	r0, #35260	; 0x89bc
   11f74:	movt	r0, #1
   11f78:	bl	165b4 <__assert_fail@plt+0x5640>
   11f7c:	mov	r3, r0
   11f80:	mov	r2, r3
   11f84:	movw	r3, #41312	; 0xa160
   11f88:	movt	r3, #2
   11f8c:	str	r2, [r3]
   11f90:	bl	1175c <__assert_fail@plt+0x7e8>
   11f94:	movw	r3, #41312	; 0xa160
   11f98:	movt	r3, #2
   11f9c:	ldr	r3, [r3]
   11fa0:	mov	r0, r3
   11fa4:	bl	12afc <__assert_fail@plt+0x1b88>
   11fa8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11fac:	ldr	r3, [r3]
   11fb0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11fb4:	mov	r0, r3
   11fb8:	bl	10d40 <execvp@plt>
   11fbc:	bl	10e90 <__errno_location@plt>
   11fc0:	mov	r3, r0
   11fc4:	ldr	r3, [r3]
   11fc8:	cmp	r3, #2
   11fcc:	bne	11fd8 <__assert_fail@plt+0x1064>
   11fd0:	mov	r3, #127	; 0x7f
   11fd4:	b	11fdc <__assert_fail@plt+0x1068>
   11fd8:	mov	r3, #126	; 0x7e
   11fdc:	str	r3, [fp, #-24]	; 0xffffffe8
   11fe0:	bl	10e90 <__errno_location@plt>
   11fe4:	mov	r3, r0
   11fe8:	ldr	r4, [r3]
   11fec:	movw	r0, #35288	; 0x89d8
   11ff0:	movt	r0, #1
   11ff4:	bl	10e60 <gettext@plt>
   11ff8:	mov	r5, r0
   11ffc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12000:	ldr	r3, [r3]
   12004:	mov	r0, r3
   12008:	bl	15500 <__assert_fail@plt+0x458c>
   1200c:	mov	r3, r0
   12010:	mov	r2, r5
   12014:	mov	r1, r4
   12018:	mov	r0, #0
   1201c:	bl	10de8 <error@plt>
   12020:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12024:	mov	r0, r3
   12028:	sub	sp, fp, #12
   1202c:	ldrd	r4, [sp]
   12030:	ldr	fp, [sp, #8]
   12034:	add	sp, sp, #12
   12038:	pop	{pc}		; (ldr pc, [sp], #4)
   1203c:	push	{fp}		; (str fp, [sp, #-4]!)
   12040:	add	fp, sp, #0
   12044:	sub	sp, sp, #12
   12048:	str	r0, [fp, #-8]
   1204c:	ldr	r3, [fp, #-8]
   12050:	cmp	r3, #90	; 0x5a
   12054:	bgt	12078 <__assert_fail@plt+0x1104>
   12058:	ldr	r3, [fp, #-8]
   1205c:	cmp	r3, #65	; 0x41
   12060:	bge	12088 <__assert_fail@plt+0x1114>
   12064:	ldr	r3, [fp, #-8]
   12068:	sub	r3, r3, #48	; 0x30
   1206c:	cmp	r3, #9
   12070:	bhi	12090 <__assert_fail@plt+0x111c>
   12074:	b	12088 <__assert_fail@plt+0x1114>
   12078:	ldr	r3, [fp, #-8]
   1207c:	sub	r3, r3, #97	; 0x61
   12080:	cmp	r3, #25
   12084:	bhi	12090 <__assert_fail@plt+0x111c>
   12088:	mov	r3, #1
   1208c:	b	12094 <__assert_fail@plt+0x1120>
   12090:	mov	r3, #0
   12094:	mov	r0, r3
   12098:	add	sp, fp, #0
   1209c:	pop	{fp}		; (ldr fp, [sp], #4)
   120a0:	bx	lr
   120a4:	push	{fp}		; (str fp, [sp, #-4]!)
   120a8:	add	fp, sp, #0
   120ac:	sub	sp, sp, #12
   120b0:	str	r0, [fp, #-8]
   120b4:	ldr	r3, [fp, #-8]
   120b8:	cmp	r3, #65	; 0x41
   120bc:	blt	120e4 <__assert_fail@plt+0x1170>
   120c0:	ldr	r3, [fp, #-8]
   120c4:	cmp	r3, #90	; 0x5a
   120c8:	ble	120dc <__assert_fail@plt+0x1168>
   120cc:	ldr	r3, [fp, #-8]
   120d0:	sub	r3, r3, #97	; 0x61
   120d4:	cmp	r3, #25
   120d8:	bhi	120e4 <__assert_fail@plt+0x1170>
   120dc:	mov	r3, #1
   120e0:	b	120e8 <__assert_fail@plt+0x1174>
   120e4:	mov	r3, #0
   120e8:	mov	r0, r3
   120ec:	add	sp, fp, #0
   120f0:	pop	{fp}		; (ldr fp, [sp], #4)
   120f4:	bx	lr
   120f8:	push	{fp}		; (str fp, [sp, #-4]!)
   120fc:	add	fp, sp, #0
   12100:	sub	sp, sp, #12
   12104:	str	r0, [fp, #-8]
   12108:	ldr	r3, [fp, #-8]
   1210c:	cmp	r3, #127	; 0x7f
   12110:	bhi	1211c <__assert_fail@plt+0x11a8>
   12114:	mov	r3, #1
   12118:	b	12120 <__assert_fail@plt+0x11ac>
   1211c:	mov	r3, #0
   12120:	mov	r0, r3
   12124:	add	sp, fp, #0
   12128:	pop	{fp}		; (ldr fp, [sp], #4)
   1212c:	bx	lr
   12130:	push	{fp}		; (str fp, [sp, #-4]!)
   12134:	add	fp, sp, #0
   12138:	sub	sp, sp, #12
   1213c:	str	r0, [fp, #-8]
   12140:	ldr	r3, [fp, #-8]
   12144:	cmp	r3, #32
   12148:	beq	12158 <__assert_fail@plt+0x11e4>
   1214c:	ldr	r3, [fp, #-8]
   12150:	cmp	r3, #9
   12154:	bne	12160 <__assert_fail@plt+0x11ec>
   12158:	mov	r3, #1
   1215c:	b	12164 <__assert_fail@plt+0x11f0>
   12160:	mov	r3, #0
   12164:	and	r3, r3, #1
   12168:	uxtb	r3, r3
   1216c:	mov	r0, r3
   12170:	add	sp, fp, #0
   12174:	pop	{fp}		; (ldr fp, [sp], #4)
   12178:	bx	lr
   1217c:	push	{fp}		; (str fp, [sp, #-4]!)
   12180:	add	fp, sp, #0
   12184:	sub	sp, sp, #12
   12188:	str	r0, [fp, #-8]
   1218c:	ldr	r3, [fp, #-8]
   12190:	cmp	r3, #0
   12194:	blt	121b8 <__assert_fail@plt+0x1244>
   12198:	ldr	r3, [fp, #-8]
   1219c:	cmp	r3, #31
   121a0:	ble	121b0 <__assert_fail@plt+0x123c>
   121a4:	ldr	r3, [fp, #-8]
   121a8:	cmp	r3, #127	; 0x7f
   121ac:	bne	121b8 <__assert_fail@plt+0x1244>
   121b0:	mov	r3, #1
   121b4:	b	121bc <__assert_fail@plt+0x1248>
   121b8:	mov	r3, #0
   121bc:	mov	r0, r3
   121c0:	add	sp, fp, #0
   121c4:	pop	{fp}		; (ldr fp, [sp], #4)
   121c8:	bx	lr
   121cc:	push	{fp}		; (str fp, [sp, #-4]!)
   121d0:	add	fp, sp, #0
   121d4:	sub	sp, sp, #12
   121d8:	str	r0, [fp, #-8]
   121dc:	ldr	r3, [fp, #-8]
   121e0:	sub	r3, r3, #48	; 0x30
   121e4:	cmp	r3, #9
   121e8:	bhi	121f4 <__assert_fail@plt+0x1280>
   121ec:	mov	r3, #1
   121f0:	b	121f8 <__assert_fail@plt+0x1284>
   121f4:	mov	r3, #0
   121f8:	mov	r0, r3
   121fc:	add	sp, fp, #0
   12200:	pop	{fp}		; (ldr fp, [sp], #4)
   12204:	bx	lr
   12208:	push	{fp}		; (str fp, [sp, #-4]!)
   1220c:	add	fp, sp, #0
   12210:	sub	sp, sp, #12
   12214:	str	r0, [fp, #-8]
   12218:	ldr	r3, [fp, #-8]
   1221c:	sub	r3, r3, #33	; 0x21
   12220:	cmp	r3, #93	; 0x5d
   12224:	bhi	12230 <__assert_fail@plt+0x12bc>
   12228:	mov	r3, #1
   1222c:	b	12234 <__assert_fail@plt+0x12c0>
   12230:	mov	r3, #0
   12234:	mov	r0, r3
   12238:	add	sp, fp, #0
   1223c:	pop	{fp}		; (ldr fp, [sp], #4)
   12240:	bx	lr
   12244:	push	{fp}		; (str fp, [sp, #-4]!)
   12248:	add	fp, sp, #0
   1224c:	sub	sp, sp, #12
   12250:	str	r0, [fp, #-8]
   12254:	ldr	r3, [fp, #-8]
   12258:	sub	r3, r3, #97	; 0x61
   1225c:	cmp	r3, #25
   12260:	bhi	1226c <__assert_fail@plt+0x12f8>
   12264:	mov	r3, #1
   12268:	b	12270 <__assert_fail@plt+0x12fc>
   1226c:	mov	r3, #0
   12270:	mov	r0, r3
   12274:	add	sp, fp, #0
   12278:	pop	{fp}		; (ldr fp, [sp], #4)
   1227c:	bx	lr
   12280:	push	{fp}		; (str fp, [sp, #-4]!)
   12284:	add	fp, sp, #0
   12288:	sub	sp, sp, #12
   1228c:	str	r0, [fp, #-8]
   12290:	ldr	r3, [fp, #-8]
   12294:	sub	r3, r3, #32
   12298:	cmp	r3, #94	; 0x5e
   1229c:	bhi	122a8 <__assert_fail@plt+0x1334>
   122a0:	mov	r3, #1
   122a4:	b	122ac <__assert_fail@plt+0x1338>
   122a8:	mov	r3, #0
   122ac:	mov	r0, r3
   122b0:	add	sp, fp, #0
   122b4:	pop	{fp}		; (ldr fp, [sp], #4)
   122b8:	bx	lr
   122bc:	push	{fp}		; (str fp, [sp, #-4]!)
   122c0:	add	fp, sp, #0
   122c4:	sub	sp, sp, #12
   122c8:	str	r0, [fp, #-8]
   122cc:	ldr	r3, [fp, #-8]
   122d0:	cmp	r3, #64	; 0x40
   122d4:	bgt	122f8 <__assert_fail@plt+0x1384>
   122d8:	ldr	r3, [fp, #-8]
   122dc:	cmp	r3, #58	; 0x3a
   122e0:	bge	12320 <__assert_fail@plt+0x13ac>
   122e4:	ldr	r3, [fp, #-8]
   122e8:	sub	r3, r3, #33	; 0x21
   122ec:	cmp	r3, #14
   122f0:	bhi	12328 <__assert_fail@plt+0x13b4>
   122f4:	b	12320 <__assert_fail@plt+0x13ac>
   122f8:	ldr	r3, [fp, #-8]
   122fc:	cmp	r3, #91	; 0x5b
   12300:	blt	12328 <__assert_fail@plt+0x13b4>
   12304:	ldr	r3, [fp, #-8]
   12308:	cmp	r3, #96	; 0x60
   1230c:	ble	12320 <__assert_fail@plt+0x13ac>
   12310:	ldr	r3, [fp, #-8]
   12314:	sub	r3, r3, #123	; 0x7b
   12318:	cmp	r3, #3
   1231c:	bhi	12328 <__assert_fail@plt+0x13b4>
   12320:	mov	r3, #1
   12324:	b	1232c <__assert_fail@plt+0x13b8>
   12328:	mov	r3, #0
   1232c:	mov	r0, r3
   12330:	add	sp, fp, #0
   12334:	pop	{fp}		; (ldr fp, [sp], #4)
   12338:	bx	lr
   1233c:	push	{fp}		; (str fp, [sp, #-4]!)
   12340:	add	fp, sp, #0
   12344:	sub	sp, sp, #12
   12348:	str	r0, [fp, #-8]
   1234c:	ldr	r3, [fp, #-8]
   12350:	cmp	r3, #9
   12354:	blt	12378 <__assert_fail@plt+0x1404>
   12358:	ldr	r3, [fp, #-8]
   1235c:	cmp	r3, #13
   12360:	ble	12370 <__assert_fail@plt+0x13fc>
   12364:	ldr	r3, [fp, #-8]
   12368:	cmp	r3, #32
   1236c:	bne	12378 <__assert_fail@plt+0x1404>
   12370:	mov	r3, #1
   12374:	b	1237c <__assert_fail@plt+0x1408>
   12378:	mov	r3, #0
   1237c:	mov	r0, r3
   12380:	add	sp, fp, #0
   12384:	pop	{fp}		; (ldr fp, [sp], #4)
   12388:	bx	lr
   1238c:	push	{fp}		; (str fp, [sp, #-4]!)
   12390:	add	fp, sp, #0
   12394:	sub	sp, sp, #12
   12398:	str	r0, [fp, #-8]
   1239c:	ldr	r3, [fp, #-8]
   123a0:	sub	r3, r3, #65	; 0x41
   123a4:	cmp	r3, #25
   123a8:	bhi	123b4 <__assert_fail@plt+0x1440>
   123ac:	mov	r3, #1
   123b0:	b	123b8 <__assert_fail@plt+0x1444>
   123b4:	mov	r3, #0
   123b8:	mov	r0, r3
   123bc:	add	sp, fp, #0
   123c0:	pop	{fp}		; (ldr fp, [sp], #4)
   123c4:	bx	lr
   123c8:	push	{fp}		; (str fp, [sp, #-4]!)
   123cc:	add	fp, sp, #0
   123d0:	sub	sp, sp, #12
   123d4:	str	r0, [fp, #-8]
   123d8:	ldr	r3, [fp, #-8]
   123dc:	sub	r3, r3, #48	; 0x30
   123e0:	cmp	r3, #54	; 0x36
   123e4:	ldrls	pc, [pc, r3, lsl #2]
   123e8:	b	124d0 <__assert_fail@plt+0x155c>
   123ec:	andeq	r2, r1, r8, asr #9
   123f0:	andeq	r2, r1, r8, asr #9
   123f4:	andeq	r2, r1, r8, asr #9
   123f8:	andeq	r2, r1, r8, asr #9
   123fc:	andeq	r2, r1, r8, asr #9
   12400:	andeq	r2, r1, r8, asr #9
   12404:	andeq	r2, r1, r8, asr #9
   12408:	andeq	r2, r1, r8, asr #9
   1240c:	andeq	r2, r1, r8, asr #9
   12410:	andeq	r2, r1, r8, asr #9
   12414:	ldrdeq	r2, [r1], -r0
   12418:	ldrdeq	r2, [r1], -r0
   1241c:	ldrdeq	r2, [r1], -r0
   12420:	ldrdeq	r2, [r1], -r0
   12424:	ldrdeq	r2, [r1], -r0
   12428:	ldrdeq	r2, [r1], -r0
   1242c:	ldrdeq	r2, [r1], -r0
   12430:	andeq	r2, r1, r8, asr #9
   12434:	andeq	r2, r1, r8, asr #9
   12438:	andeq	r2, r1, r8, asr #9
   1243c:	andeq	r2, r1, r8, asr #9
   12440:	andeq	r2, r1, r8, asr #9
   12444:	andeq	r2, r1, r8, asr #9
   12448:	ldrdeq	r2, [r1], -r0
   1244c:	ldrdeq	r2, [r1], -r0
   12450:	ldrdeq	r2, [r1], -r0
   12454:	ldrdeq	r2, [r1], -r0
   12458:	ldrdeq	r2, [r1], -r0
   1245c:	ldrdeq	r2, [r1], -r0
   12460:	ldrdeq	r2, [r1], -r0
   12464:	ldrdeq	r2, [r1], -r0
   12468:	ldrdeq	r2, [r1], -r0
   1246c:	ldrdeq	r2, [r1], -r0
   12470:	ldrdeq	r2, [r1], -r0
   12474:	ldrdeq	r2, [r1], -r0
   12478:	ldrdeq	r2, [r1], -r0
   1247c:	ldrdeq	r2, [r1], -r0
   12480:	ldrdeq	r2, [r1], -r0
   12484:	ldrdeq	r2, [r1], -r0
   12488:	ldrdeq	r2, [r1], -r0
   1248c:	ldrdeq	r2, [r1], -r0
   12490:	ldrdeq	r2, [r1], -r0
   12494:	ldrdeq	r2, [r1], -r0
   12498:	ldrdeq	r2, [r1], -r0
   1249c:	ldrdeq	r2, [r1], -r0
   124a0:	ldrdeq	r2, [r1], -r0
   124a4:	ldrdeq	r2, [r1], -r0
   124a8:	ldrdeq	r2, [r1], -r0
   124ac:	ldrdeq	r2, [r1], -r0
   124b0:	andeq	r2, r1, r8, asr #9
   124b4:	andeq	r2, r1, r8, asr #9
   124b8:	andeq	r2, r1, r8, asr #9
   124bc:	andeq	r2, r1, r8, asr #9
   124c0:	andeq	r2, r1, r8, asr #9
   124c4:	andeq	r2, r1, r8, asr #9
   124c8:	mov	r3, #1
   124cc:	b	124d4 <__assert_fail@plt+0x1560>
   124d0:	mov	r3, #0
   124d4:	mov	r0, r3
   124d8:	add	sp, fp, #0
   124dc:	pop	{fp}		; (ldr fp, [sp], #4)
   124e0:	bx	lr
   124e4:	push	{fp}		; (str fp, [sp, #-4]!)
   124e8:	add	fp, sp, #0
   124ec:	sub	sp, sp, #12
   124f0:	str	r0, [fp, #-8]
   124f4:	ldr	r3, [fp, #-8]
   124f8:	sub	r3, r3, #65	; 0x41
   124fc:	cmp	r3, #25
   12500:	bhi	12510 <__assert_fail@plt+0x159c>
   12504:	ldr	r3, [fp, #-8]
   12508:	add	r3, r3, #32
   1250c:	b	12514 <__assert_fail@plt+0x15a0>
   12510:	ldr	r3, [fp, #-8]
   12514:	mov	r0, r3
   12518:	add	sp, fp, #0
   1251c:	pop	{fp}		; (ldr fp, [sp], #4)
   12520:	bx	lr
   12524:	push	{fp}		; (str fp, [sp, #-4]!)
   12528:	add	fp, sp, #0
   1252c:	sub	sp, sp, #12
   12530:	str	r0, [fp, #-8]
   12534:	ldr	r3, [fp, #-8]
   12538:	sub	r3, r3, #97	; 0x61
   1253c:	cmp	r3, #25
   12540:	bhi	12550 <__assert_fail@plt+0x15dc>
   12544:	ldr	r3, [fp, #-8]
   12548:	sub	r3, r3, #32
   1254c:	b	12554 <__assert_fail@plt+0x15e0>
   12550:	ldr	r3, [fp, #-8]
   12554:	mov	r0, r3
   12558:	add	sp, fp, #0
   1255c:	pop	{fp}		; (ldr fp, [sp], #4)
   12560:	bx	lr
   12564:	push	{fp}		; (str fp, [sp, #-4]!)
   12568:	add	fp, sp, #0
   1256c:	sub	sp, sp, #12
   12570:	str	r0, [fp, #-8]
   12574:	movw	r3, #41352	; 0xa188
   12578:	movt	r3, #2
   1257c:	ldr	r2, [fp, #-8]
   12580:	str	r2, [r3]
   12584:	nop	{0}
   12588:	add	sp, fp, #0
   1258c:	pop	{fp}		; (ldr fp, [sp], #4)
   12590:	bx	lr
   12594:	push	{fp}		; (str fp, [sp, #-4]!)
   12598:	add	fp, sp, #0
   1259c:	sub	sp, sp, #12
   125a0:	mov	r3, r0
   125a4:	strb	r3, [fp, #-5]
   125a8:	movw	r3, #41356	; 0xa18c
   125ac:	movt	r3, #2
   125b0:	ldrb	r2, [fp, #-5]
   125b4:	strb	r2, [r3]
   125b8:	nop	{0}
   125bc:	add	sp, fp, #0
   125c0:	pop	{fp}		; (ldr fp, [sp], #4)
   125c4:	bx	lr
   125c8:	str	r4, [sp, #-12]!
   125cc:	str	fp, [sp, #4]
   125d0:	str	lr, [sp, #8]
   125d4:	add	fp, sp, #8
   125d8:	sub	sp, sp, #20
   125dc:	movw	r3, #41300	; 0xa154
   125e0:	movt	r3, #2
   125e4:	ldr	r3, [r3]
   125e8:	mov	r0, r3
   125ec:	bl	17710 <__assert_fail@plt+0x679c>
   125f0:	mov	r3, r0
   125f4:	cmp	r3, #0
   125f8:	beq	126cc <__assert_fail@plt+0x1758>
   125fc:	movw	r3, #41356	; 0xa18c
   12600:	movt	r3, #2
   12604:	ldrb	r3, [r3]
   12608:	eor	r3, r3, #1
   1260c:	uxtb	r3, r3
   12610:	cmp	r3, #0
   12614:	bne	1262c <__assert_fail@plt+0x16b8>
   12618:	bl	10e90 <__errno_location@plt>
   1261c:	mov	r3, r0
   12620:	ldr	r3, [r3]
   12624:	cmp	r3, #32
   12628:	beq	126cc <__assert_fail@plt+0x1758>
   1262c:	movw	r0, #35340	; 0x8a0c
   12630:	movt	r0, #1
   12634:	bl	10e60 <gettext@plt>
   12638:	str	r0, [fp, #-16]
   1263c:	movw	r3, #41352	; 0xa188
   12640:	movt	r3, #2
   12644:	ldr	r3, [r3]
   12648:	cmp	r3, #0
   1264c:	beq	12698 <__assert_fail@plt+0x1724>
   12650:	bl	10e90 <__errno_location@plt>
   12654:	mov	r3, r0
   12658:	ldr	r4, [r3]
   1265c:	movw	r3, #41352	; 0xa188
   12660:	movt	r3, #2
   12664:	ldr	r3, [r3]
   12668:	mov	r0, r3
   1266c:	bl	1518c <__assert_fail@plt+0x4218>
   12670:	mov	r2, r0
   12674:	ldr	r3, [fp, #-16]
   12678:	str	r3, [sp]
   1267c:	mov	r3, r2
   12680:	movw	r2, #35352	; 0x8a18
   12684:	movt	r2, #1
   12688:	mov	r1, r4
   1268c:	mov	r0, #0
   12690:	bl	10de8 <error@plt>
   12694:	b	126b8 <__assert_fail@plt+0x1744>
   12698:	bl	10e90 <__errno_location@plt>
   1269c:	mov	r3, r0
   126a0:	ldr	r1, [r3]
   126a4:	ldr	r3, [fp, #-16]
   126a8:	movw	r2, #35360	; 0x8a20
   126ac:	movt	r2, #1
   126b0:	mov	r0, #0
   126b4:	bl	10de8 <error@plt>
   126b8:	movw	r3, #41212	; 0xa0fc
   126bc:	movt	r3, #2
   126c0:	ldr	r3, [r3]
   126c4:	mov	r0, r3
   126c8:	bl	10d28 <_exit@plt>
   126cc:	movw	r3, #41296	; 0xa150
   126d0:	movt	r3, #2
   126d4:	ldr	r3, [r3]
   126d8:	mov	r0, r3
   126dc:	bl	17710 <__assert_fail@plt+0x679c>
   126e0:	mov	r3, r0
   126e4:	cmp	r3, #0
   126e8:	beq	12700 <__assert_fail@plt+0x178c>
   126ec:	movw	r3, #41212	; 0xa0fc
   126f0:	movt	r3, #2
   126f4:	ldr	r3, [r3]
   126f8:	mov	r0, r3
   126fc:	bl	10d28 <_exit@plt>
   12700:	nop	{0}
   12704:	sub	sp, fp, #8
   12708:	ldr	r4, [sp]
   1270c:	ldr	fp, [sp, #4]
   12710:	add	sp, sp, #8
   12714:	pop	{pc}		; (ldr pc, [sp], #4)
   12718:	str	fp, [sp, #-8]!
   1271c:	str	lr, [sp, #4]
   12720:	add	fp, sp, #4
   12724:	sub	sp, sp, #16
   12728:	str	r0, [fp, #-16]
   1272c:	ldr	r0, [fp, #-16]
   12730:	bl	12830 <__assert_fail@plt+0x18bc>
   12734:	mov	r3, r0
   12738:	str	r3, [fp, #-8]
   1273c:	ldr	r3, [fp, #-8]
   12740:	cmp	r3, #0
   12744:	bne	1274c <__assert_fail@plt+0x17d8>
   12748:	bl	165fc <__assert_fail@plt+0x5688>
   1274c:	ldr	r3, [fp, #-8]
   12750:	mov	r0, r3
   12754:	sub	sp, fp, #4
   12758:	ldr	fp, [sp]
   1275c:	add	sp, sp, #4
   12760:	pop	{pc}		; (ldr pc, [sp], #4)
   12764:	str	fp, [sp, #-8]!
   12768:	str	lr, [sp, #4]
   1276c:	add	fp, sp, #4
   12770:	sub	sp, sp, #16
   12774:	str	r0, [fp, #-16]
   12778:	mov	r3, #0
   1277c:	str	r3, [fp, #-12]
   12780:	ldr	r3, [fp, #-12]
   12784:	cmp	r3, #0
   12788:	bne	127ac <__assert_fail@plt+0x1838>
   1278c:	ldr	r3, [fp, #-16]
   12790:	ldrb	r3, [r3]
   12794:	cmp	r3, #47	; 0x2f
   12798:	bne	127a4 <__assert_fail@plt+0x1830>
   1279c:	mov	r3, #1
   127a0:	b	127b0 <__assert_fail@plt+0x183c>
   127a4:	mov	r3, #0
   127a8:	b	127b0 <__assert_fail@plt+0x183c>
   127ac:	mov	r3, #0
   127b0:	ldr	r2, [fp, #-12]
   127b4:	add	r3, r2, r3
   127b8:	str	r3, [fp, #-12]
   127bc:	ldr	r0, [fp, #-16]
   127c0:	bl	17200 <__assert_fail@plt+0x628c>
   127c4:	mov	r2, r0
   127c8:	ldr	r3, [fp, #-16]
   127cc:	sub	r3, r2, r3
   127d0:	str	r3, [fp, #-8]
   127d4:	b	12800 <__assert_fail@plt+0x188c>
   127d8:	ldr	r3, [fp, #-8]
   127dc:	sub	r3, r3, #1
   127e0:	ldr	r2, [fp, #-16]
   127e4:	add	r3, r2, r3
   127e8:	ldrb	r3, [r3]
   127ec:	cmp	r3, #47	; 0x2f
   127f0:	bne	12814 <__assert_fail@plt+0x18a0>
   127f4:	ldr	r3, [fp, #-8]
   127f8:	sub	r3, r3, #1
   127fc:	str	r3, [fp, #-8]
   12800:	ldr	r2, [fp, #-12]
   12804:	ldr	r3, [fp, #-8]
   12808:	cmp	r2, r3
   1280c:	bcc	127d8 <__assert_fail@plt+0x1864>
   12810:	b	12818 <__assert_fail@plt+0x18a4>
   12814:	nop	{0}
   12818:	ldr	r3, [fp, #-8]
   1281c:	mov	r0, r3
   12820:	sub	sp, fp, #4
   12824:	ldr	fp, [sp]
   12828:	add	sp, sp, #4
   1282c:	pop	{pc}		; (ldr pc, [sp], #4)
   12830:	str	fp, [sp, #-8]!
   12834:	str	lr, [sp, #4]
   12838:	add	fp, sp, #4
   1283c:	sub	sp, sp, #24
   12840:	str	r0, [fp, #-24]	; 0xffffffe8
   12844:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12848:	bl	12764 <__assert_fail@plt+0x17f0>
   1284c:	str	r0, [fp, #-8]
   12850:	ldr	r3, [fp, #-8]
   12854:	cmp	r3, #0
   12858:	moveq	r3, #1
   1285c:	movne	r3, #0
   12860:	strb	r3, [fp, #-9]
   12864:	ldrb	r2, [fp, #-9]
   12868:	ldr	r3, [fp, #-8]
   1286c:	add	r3, r2, r3
   12870:	add	r3, r3, #1
   12874:	mov	r0, r3
   12878:	bl	1700c <__assert_fail@plt+0x6098>
   1287c:	mov	r3, r0
   12880:	str	r3, [fp, #-16]
   12884:	ldr	r3, [fp, #-16]
   12888:	cmp	r3, #0
   1288c:	bne	12898 <__assert_fail@plt+0x1924>
   12890:	mov	r3, #0
   12894:	b	128e8 <__assert_fail@plt+0x1974>
   12898:	ldr	r2, [fp, #-8]
   1289c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   128a0:	ldr	r0, [fp, #-16]
   128a4:	bl	10d34 <memcpy@plt>
   128a8:	ldrb	r3, [fp, #-9]
   128ac:	cmp	r3, #0
   128b0:	beq	128d0 <__assert_fail@plt+0x195c>
   128b4:	ldr	r3, [fp, #-8]
   128b8:	add	r2, r3, #1
   128bc:	str	r2, [fp, #-8]
   128c0:	ldr	r2, [fp, #-16]
   128c4:	add	r3, r2, r3
   128c8:	mov	r2, #46	; 0x2e
   128cc:	strb	r2, [r3]
   128d0:	ldr	r2, [fp, #-16]
   128d4:	ldr	r3, [fp, #-8]
   128d8:	add	r3, r2, r3
   128dc:	mov	r2, #0
   128e0:	strb	r2, [r3]
   128e4:	ldr	r3, [fp, #-16]
   128e8:	mov	r0, r3
   128ec:	sub	sp, fp, #4
   128f0:	ldr	fp, [sp]
   128f4:	add	sp, sp, #4
   128f8:	pop	{pc}		; (ldr pc, [sp], #4)
   128fc:	str	fp, [sp, #-8]!
   12900:	str	lr, [sp, #4]
   12904:	add	fp, sp, #4
   12908:	sub	sp, sp, #24
   1290c:	str	r0, [fp, #-16]
   12910:	str	r1, [fp, #-20]	; 0xffffffec
   12914:	str	r2, [fp, #-24]	; 0xffffffe8
   12918:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1291c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12920:	ldr	r0, [fp, #-16]
   12924:	bl	12958 <__assert_fail@plt+0x19e4>
   12928:	mov	r3, r0
   1292c:	str	r3, [fp, #-8]
   12930:	ldr	r3, [fp, #-8]
   12934:	cmp	r3, #0
   12938:	bne	12940 <__assert_fail@plt+0x19cc>
   1293c:	bl	165fc <__assert_fail@plt+0x5688>
   12940:	ldr	r3, [fp, #-8]
   12944:	mov	r0, r3
   12948:	sub	sp, fp, #4
   1294c:	ldr	fp, [sp]
   12950:	add	sp, sp, #4
   12954:	pop	{pc}		; (ldr pc, [sp], #4)
   12958:	str	fp, [sp, #-8]!
   1295c:	str	lr, [sp, #4]
   12960:	add	fp, sp, #4
   12964:	sub	sp, sp, #48	; 0x30
   12968:	str	r0, [fp, #-40]	; 0xffffffd8
   1296c:	str	r1, [fp, #-44]	; 0xffffffd4
   12970:	str	r2, [fp, #-48]	; 0xffffffd0
   12974:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12978:	bl	17200 <__assert_fail@plt+0x628c>
   1297c:	str	r0, [fp, #-12]
   12980:	ldr	r0, [fp, #-12]
   12984:	bl	172b4 <__assert_fail@plt+0x6340>
   12988:	str	r0, [fp, #-16]
   1298c:	ldr	r2, [fp, #-12]
   12990:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12994:	sub	r3, r2, r3
   12998:	mov	r2, r3
   1299c:	ldr	r3, [fp, #-16]
   129a0:	add	r3, r3, r2
   129a4:	str	r3, [fp, #-20]	; 0xffffffec
   129a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129ac:	bl	10e6c <strlen@plt>
   129b0:	str	r0, [fp, #-24]	; 0xffffffe8
   129b4:	mov	r3, #0
   129b8:	strb	r3, [fp, #-5]
   129bc:	ldr	r3, [fp, #-16]
   129c0:	cmp	r3, #0
   129c4:	beq	12a00 <__assert_fail@plt+0x1a8c>
   129c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   129cc:	sub	r3, r3, #1
   129d0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   129d4:	add	r3, r2, r3
   129d8:	ldrb	r3, [r3]
   129dc:	cmp	r3, #47	; 0x2f
   129e0:	beq	12a18 <__assert_fail@plt+0x1aa4>
   129e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   129e8:	ldrb	r3, [r3]
   129ec:	cmp	r3, #47	; 0x2f
   129f0:	beq	12a18 <__assert_fail@plt+0x1aa4>
   129f4:	mov	r3, #47	; 0x2f
   129f8:	strb	r3, [fp, #-5]
   129fc:	b	12a18 <__assert_fail@plt+0x1aa4>
   12a00:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12a04:	ldrb	r3, [r3]
   12a08:	cmp	r3, #47	; 0x2f
   12a0c:	bne	12a18 <__assert_fail@plt+0x1aa4>
   12a10:	mov	r3, #46	; 0x2e
   12a14:	strb	r3, [fp, #-5]
   12a18:	ldrb	r3, [fp, #-5]
   12a1c:	cmp	r3, #0
   12a20:	movne	r3, #1
   12a24:	moveq	r3, #0
   12a28:	uxtb	r3, r3
   12a2c:	mov	r2, r3
   12a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   12a34:	add	r2, r2, r3
   12a38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12a3c:	add	r3, r2, r3
   12a40:	add	r3, r3, #1
   12a44:	mov	r0, r3
   12a48:	bl	1700c <__assert_fail@plt+0x6098>
   12a4c:	mov	r3, r0
   12a50:	str	r3, [fp, #-28]	; 0xffffffe4
   12a54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12a58:	cmp	r3, #0
   12a5c:	bne	12a68 <__assert_fail@plt+0x1af4>
   12a60:	mov	r3, #0
   12a64:	b	12ae8 <__assert_fail@plt+0x1b74>
   12a68:	ldr	r2, [fp, #-20]	; 0xffffffec
   12a6c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   12a70:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12a74:	bl	10e30 <mempcpy@plt>
   12a78:	str	r0, [fp, #-32]	; 0xffffffe0
   12a7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12a80:	ldrb	r2, [fp, #-5]
   12a84:	strb	r2, [r3]
   12a88:	ldrb	r3, [fp, #-5]
   12a8c:	cmp	r3, #0
   12a90:	movne	r3, #1
   12a94:	moveq	r3, #0
   12a98:	uxtb	r3, r3
   12a9c:	mov	r2, r3
   12aa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12aa4:	add	r3, r3, r2
   12aa8:	str	r3, [fp, #-32]	; 0xffffffe0
   12aac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ab0:	cmp	r3, #0
   12ab4:	beq	12ac4 <__assert_fail@plt+0x1b50>
   12ab8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12abc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12ac0:	str	r2, [r3]
   12ac4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12ac8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12acc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ad0:	bl	10e30 <mempcpy@plt>
   12ad4:	str	r0, [fp, #-32]	; 0xffffffe0
   12ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12adc:	mov	r2, #0
   12ae0:	strb	r2, [r3]
   12ae4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12ae8:	mov	r0, r3
   12aec:	sub	sp, fp, #4
   12af0:	ldr	fp, [sp]
   12af4:	add	sp, sp, #4
   12af8:	pop	{pc}		; (ldr pc, [sp], #4)
   12afc:	str	r4, [sp, #-12]!
   12b00:	str	fp, [sp, #4]
   12b04:	str	lr, [sp, #8]
   12b08:	add	fp, sp, #8
   12b0c:	sub	sp, sp, #20
   12b10:	str	r0, [fp, #-24]	; 0xffffffe8
   12b14:	bl	10e90 <__errno_location@plt>
   12b18:	mov	r3, r0
   12b1c:	ldr	r3, [r3]
   12b20:	str	r3, [fp, #-20]	; 0xffffffec
   12b24:	bl	10e90 <__errno_location@plt>
   12b28:	mov	r3, r0
   12b2c:	ldr	r3, [r3]
   12b30:	str	r3, [fp, #-16]
   12b34:	bl	10e90 <__errno_location@plt>
   12b38:	mov	r2, r0
   12b3c:	mov	r3, #0
   12b40:	str	r3, [r2]
   12b44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12b48:	bl	10d1c <free@plt>
   12b4c:	bl	10e90 <__errno_location@plt>
   12b50:	mov	r3, r0
   12b54:	ldr	r3, [r3]
   12b58:	cmp	r3, #0
   12b5c:	moveq	r3, #1
   12b60:	movne	r3, #0
   12b64:	uxtb	r3, r3
   12b68:	mov	r4, r3
   12b6c:	bl	10e90 <__errno_location@plt>
   12b70:	mov	r2, r0
   12b74:	lsl	r3, r4, #2
   12b78:	sub	r1, fp, #12
   12b7c:	add	r3, r1, r3
   12b80:	ldr	r3, [r3, #-8]
   12b84:	str	r3, [r2]
   12b88:	nop	{0}
   12b8c:	sub	sp, fp, #8
   12b90:	ldr	r4, [sp]
   12b94:	ldr	fp, [sp, #4]
   12b98:	add	sp, sp, #8
   12b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba0:	str	fp, [sp, #-8]!
   12ba4:	str	lr, [sp, #4]
   12ba8:	add	fp, sp, #4
   12bac:	sub	sp, sp, #16
   12bb0:	str	r0, [fp, #-16]
   12bb4:	ldr	r3, [fp, #-16]
   12bb8:	cmp	r3, #0
   12bbc:	bne	12be4 <__assert_fail@plt+0x1c70>
   12bc0:	movw	r3, #41296	; 0xa150
   12bc4:	movt	r3, #2
   12bc8:	ldr	r3, [r3]
   12bcc:	mov	r2, #55	; 0x37
   12bd0:	mov	r1, #1
   12bd4:	movw	r0, #35364	; 0x8a24
   12bd8:	movt	r0, #1
   12bdc:	bl	10da0 <fwrite@plt>
   12be0:	bl	10f68 <abort@plt>
   12be4:	mov	r1, #47	; 0x2f
   12be8:	ldr	r0, [fp, #-16]
   12bec:	bl	10f2c <strrchr@plt>
   12bf0:	str	r0, [fp, #-8]
   12bf4:	ldr	r3, [fp, #-8]
   12bf8:	cmp	r3, #0
   12bfc:	beq	12c0c <__assert_fail@plt+0x1c98>
   12c00:	ldr	r3, [fp, #-8]
   12c04:	add	r3, r3, #1
   12c08:	b	12c10 <__assert_fail@plt+0x1c9c>
   12c0c:	ldr	r3, [fp, #-16]
   12c10:	str	r3, [fp, #-12]
   12c14:	ldr	r2, [fp, #-12]
   12c18:	ldr	r3, [fp, #-16]
   12c1c:	sub	r3, r2, r3
   12c20:	cmp	r3, #6
   12c24:	ble	12c94 <__assert_fail@plt+0x1d20>
   12c28:	ldr	r3, [fp, #-12]
   12c2c:	sub	r3, r3, #7
   12c30:	mov	r2, #7
   12c34:	movw	r1, #35420	; 0x8a5c
   12c38:	movt	r1, #1
   12c3c:	mov	r0, r3
   12c40:	bl	10f5c <strncmp@plt>
   12c44:	mov	r3, r0
   12c48:	cmp	r3, #0
   12c4c:	bne	12c94 <__assert_fail@plt+0x1d20>
   12c50:	ldr	r3, [fp, #-12]
   12c54:	str	r3, [fp, #-16]
   12c58:	mov	r2, #3
   12c5c:	movw	r1, #35428	; 0x8a64
   12c60:	movt	r1, #1
   12c64:	ldr	r0, [fp, #-12]
   12c68:	bl	10f5c <strncmp@plt>
   12c6c:	mov	r3, r0
   12c70:	cmp	r3, #0
   12c74:	bne	12c94 <__assert_fail@plt+0x1d20>
   12c78:	ldr	r3, [fp, #-12]
   12c7c:	add	r3, r3, #3
   12c80:	str	r3, [fp, #-16]
   12c84:	movw	r3, #41280	; 0xa140
   12c88:	movt	r3, #2
   12c8c:	ldr	r2, [fp, #-16]
   12c90:	str	r2, [r3]
   12c94:	movw	r3, #41360	; 0xa190
   12c98:	movt	r3, #2
   12c9c:	ldr	r2, [fp, #-16]
   12ca0:	str	r2, [r3]
   12ca4:	movw	r3, #41284	; 0xa144
   12ca8:	movt	r3, #2
   12cac:	ldr	r2, [fp, #-16]
   12cb0:	str	r2, [r3]
   12cb4:	nop	{0}
   12cb8:	sub	sp, fp, #4
   12cbc:	ldr	fp, [sp]
   12cc0:	add	sp, sp, #4
   12cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cc8:	str	fp, [sp, #-8]!
   12ccc:	str	lr, [sp, #4]
   12cd0:	add	fp, sp, #4
   12cd4:	sub	sp, sp, #16
   12cd8:	str	r0, [fp, #-16]
   12cdc:	bl	10e90 <__errno_location@plt>
   12ce0:	mov	r3, r0
   12ce4:	ldr	r3, [r3]
   12ce8:	str	r3, [fp, #-8]
   12cec:	ldr	r3, [fp, #-16]
   12cf0:	cmp	r3, #0
   12cf4:	beq	12d00 <__assert_fail@plt+0x1d8c>
   12cf8:	ldr	r3, [fp, #-16]
   12cfc:	b	12d08 <__assert_fail@plt+0x1d94>
   12d00:	movw	r3, #41364	; 0xa194
   12d04:	movt	r3, #2
   12d08:	mov	r1, #48	; 0x30
   12d0c:	mov	r0, r3
   12d10:	bl	164a8 <__assert_fail@plt+0x5534>
   12d14:	mov	r3, r0
   12d18:	str	r3, [fp, #-12]
   12d1c:	bl	10e90 <__errno_location@plt>
   12d20:	mov	r2, r0
   12d24:	ldr	r3, [fp, #-8]
   12d28:	str	r3, [r2]
   12d2c:	ldr	r3, [fp, #-12]
   12d30:	mov	r0, r3
   12d34:	sub	sp, fp, #4
   12d38:	ldr	fp, [sp]
   12d3c:	add	sp, sp, #4
   12d40:	pop	{pc}		; (ldr pc, [sp], #4)
   12d44:	push	{fp}		; (str fp, [sp, #-4]!)
   12d48:	add	fp, sp, #0
   12d4c:	sub	sp, sp, #12
   12d50:	str	r0, [fp, #-8]
   12d54:	ldr	r3, [fp, #-8]
   12d58:	cmp	r3, #0
   12d5c:	beq	12d68 <__assert_fail@plt+0x1df4>
   12d60:	ldr	r3, [fp, #-8]
   12d64:	b	12d70 <__assert_fail@plt+0x1dfc>
   12d68:	movw	r3, #41364	; 0xa194
   12d6c:	movt	r3, #2
   12d70:	ldr	r3, [r3]
   12d74:	mov	r0, r3
   12d78:	add	sp, fp, #0
   12d7c:	pop	{fp}		; (ldr fp, [sp], #4)
   12d80:	bx	lr
   12d84:	push	{fp}		; (str fp, [sp, #-4]!)
   12d88:	add	fp, sp, #0
   12d8c:	sub	sp, sp, #12
   12d90:	str	r0, [fp, #-8]
   12d94:	str	r1, [fp, #-12]
   12d98:	ldr	r3, [fp, #-8]
   12d9c:	cmp	r3, #0
   12da0:	beq	12dac <__assert_fail@plt+0x1e38>
   12da4:	ldr	r3, [fp, #-8]
   12da8:	b	12db4 <__assert_fail@plt+0x1e40>
   12dac:	movw	r3, #41364	; 0xa194
   12db0:	movt	r3, #2
   12db4:	ldr	r2, [fp, #-12]
   12db8:	str	r2, [r3]
   12dbc:	nop	{0}
   12dc0:	add	sp, fp, #0
   12dc4:	pop	{fp}		; (ldr fp, [sp], #4)
   12dc8:	bx	lr
   12dcc:	push	{fp}		; (str fp, [sp, #-4]!)
   12dd0:	add	fp, sp, #0
   12dd4:	sub	sp, sp, #36	; 0x24
   12dd8:	str	r0, [fp, #-24]	; 0xffffffe8
   12ddc:	mov	r3, r1
   12de0:	str	r2, [fp, #-32]	; 0xffffffe0
   12de4:	strb	r3, [fp, #-25]	; 0xffffffe7
   12de8:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12dec:	strb	r3, [fp, #-5]
   12df0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12df4:	cmp	r3, #0
   12df8:	beq	12e04 <__assert_fail@plt+0x1e90>
   12dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12e00:	b	12e0c <__assert_fail@plt+0x1e98>
   12e04:	movw	r3, #41364	; 0xa194
   12e08:	movt	r3, #2
   12e0c:	add	r2, r3, #8
   12e10:	ldrb	r3, [fp, #-5]
   12e14:	lsr	r3, r3, #5
   12e18:	uxtb	r3, r3
   12e1c:	lsl	r3, r3, #2
   12e20:	add	r3, r2, r3
   12e24:	str	r3, [fp, #-12]
   12e28:	ldrb	r3, [fp, #-5]
   12e2c:	and	r3, r3, #31
   12e30:	str	r3, [fp, #-16]
   12e34:	ldr	r3, [fp, #-12]
   12e38:	ldr	r2, [r3]
   12e3c:	ldr	r3, [fp, #-16]
   12e40:	lsr	r3, r2, r3
   12e44:	and	r3, r3, #1
   12e48:	str	r3, [fp, #-20]	; 0xffffffec
   12e4c:	ldr	r3, [fp, #-12]
   12e50:	ldr	r3, [r3]
   12e54:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12e58:	and	r1, r2, #1
   12e5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e60:	eor	r1, r1, r2
   12e64:	ldr	r2, [fp, #-16]
   12e68:	lsl	r2, r1, r2
   12e6c:	eor	r2, r2, r3
   12e70:	ldr	r3, [fp, #-12]
   12e74:	str	r2, [r3]
   12e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e7c:	mov	r0, r3
   12e80:	add	sp, fp, #0
   12e84:	pop	{fp}		; (ldr fp, [sp], #4)
   12e88:	bx	lr
   12e8c:	push	{fp}		; (str fp, [sp, #-4]!)
   12e90:	add	fp, sp, #0
   12e94:	sub	sp, sp, #20
   12e98:	str	r0, [fp, #-16]
   12e9c:	str	r1, [fp, #-20]	; 0xffffffec
   12ea0:	ldr	r3, [fp, #-16]
   12ea4:	cmp	r3, #0
   12ea8:	bne	12eb8 <__assert_fail@plt+0x1f44>
   12eac:	movw	r3, #41364	; 0xa194
   12eb0:	movt	r3, #2
   12eb4:	str	r3, [fp, #-16]
   12eb8:	ldr	r3, [fp, #-16]
   12ebc:	ldr	r3, [r3, #4]
   12ec0:	str	r3, [fp, #-8]
   12ec4:	ldr	r3, [fp, #-16]
   12ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ecc:	str	r2, [r3, #4]
   12ed0:	ldr	r3, [fp, #-8]
   12ed4:	mov	r0, r3
   12ed8:	add	sp, fp, #0
   12edc:	pop	{fp}		; (ldr fp, [sp], #4)
   12ee0:	bx	lr
   12ee4:	str	fp, [sp, #-8]!
   12ee8:	str	lr, [sp, #4]
   12eec:	add	fp, sp, #4
   12ef0:	sub	sp, sp, #16
   12ef4:	str	r0, [fp, #-8]
   12ef8:	str	r1, [fp, #-12]
   12efc:	str	r2, [fp, #-16]
   12f00:	ldr	r3, [fp, #-8]
   12f04:	cmp	r3, #0
   12f08:	bne	12f18 <__assert_fail@plt+0x1fa4>
   12f0c:	movw	r3, #41364	; 0xa194
   12f10:	movt	r3, #2
   12f14:	str	r3, [fp, #-8]
   12f18:	ldr	r3, [fp, #-8]
   12f1c:	mov	r2, #10
   12f20:	str	r2, [r3]
   12f24:	ldr	r3, [fp, #-12]
   12f28:	cmp	r3, #0
   12f2c:	beq	12f3c <__assert_fail@plt+0x1fc8>
   12f30:	ldr	r3, [fp, #-16]
   12f34:	cmp	r3, #0
   12f38:	bne	12f40 <__assert_fail@plt+0x1fcc>
   12f3c:	bl	10f68 <abort@plt>
   12f40:	ldr	r3, [fp, #-8]
   12f44:	ldr	r2, [fp, #-12]
   12f48:	str	r2, [r3, #40]	; 0x28
   12f4c:	ldr	r3, [fp, #-8]
   12f50:	ldr	r2, [fp, #-16]
   12f54:	str	r2, [r3, #44]	; 0x2c
   12f58:	nop	{0}
   12f5c:	sub	sp, fp, #4
   12f60:	ldr	fp, [sp]
   12f64:	add	sp, sp, #4
   12f68:	pop	{pc}		; (ldr pc, [sp], #4)
   12f6c:	str	fp, [sp, #-8]!
   12f70:	str	lr, [sp, #4]
   12f74:	add	fp, sp, #4
   12f78:	sub	sp, sp, #56	; 0x38
   12f7c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f80:	str	r1, [fp, #-60]	; 0xffffffc4
   12f84:	sub	r1, fp, #52	; 0x34
   12f88:	mov	r2, #0
   12f8c:	mov	r3, #0
   12f90:	strd	r2, [r1]
   12f94:	strd	r2, [r1, #8]
   12f98:	strd	r2, [r1, #16]
   12f9c:	strd	r2, [r1, #24]
   12fa0:	strd	r2, [r1, #32]
   12fa4:	strd	r2, [r1, #40]	; 0x28
   12fa8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12fac:	cmp	r3, #10
   12fb0:	bne	12fb8 <__assert_fail@plt+0x2044>
   12fb4:	bl	10f68 <abort@plt>
   12fb8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12fbc:	str	r3, [fp, #-52]	; 0xffffffcc
   12fc0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12fc4:	mov	r2, r3
   12fc8:	sub	r3, fp, #52	; 0x34
   12fcc:	ldrd	r0, [r3]
   12fd0:	strd	r0, [r2]
   12fd4:	ldrd	r0, [r3, #8]
   12fd8:	strd	r0, [r2, #8]
   12fdc:	ldrd	r0, [r3, #16]
   12fe0:	strd	r0, [r2, #16]
   12fe4:	ldrd	r0, [r3, #24]
   12fe8:	strd	r0, [r2, #24]
   12fec:	ldrd	r0, [r3, #32]
   12ff0:	strd	r0, [r2, #32]
   12ff4:	ldrd	r0, [r3, #40]	; 0x28
   12ff8:	strd	r0, [r2, #40]	; 0x28
   12ffc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13000:	sub	sp, fp, #4
   13004:	ldr	fp, [sp]
   13008:	add	sp, sp, #4
   1300c:	pop	{pc}		; (ldr pc, [sp], #4)
   13010:	str	fp, [sp, #-8]!
   13014:	str	lr, [sp, #4]
   13018:	add	fp, sp, #4
   1301c:	sub	sp, sp, #16
   13020:	str	r0, [fp, #-16]
   13024:	str	r1, [fp, #-20]	; 0xffffffec
   13028:	ldr	r0, [fp, #-16]
   1302c:	bl	10e60 <gettext@plt>
   13030:	str	r0, [fp, #-8]
   13034:	ldr	r2, [fp, #-8]
   13038:	ldr	r3, [fp, #-16]
   1303c:	cmp	r2, r3
   13040:	beq	1304c <__assert_fail@plt+0x20d8>
   13044:	ldr	r3, [fp, #-8]
   13048:	b	130fc <__assert_fail@plt+0x2188>
   1304c:	bl	17c24 <__assert_fail@plt+0x6cb0>
   13050:	str	r0, [fp, #-12]
   13054:	movw	r1, #35620	; 0x8b24
   13058:	movt	r1, #1
   1305c:	ldr	r0, [fp, #-12]
   13060:	bl	1732c <__assert_fail@plt+0x63b8>
   13064:	mov	r3, r0
   13068:	cmp	r3, #0
   1306c:	bne	13098 <__assert_fail@plt+0x2124>
   13070:	ldr	r3, [fp, #-16]
   13074:	ldrb	r3, [r3]
   13078:	cmp	r3, #96	; 0x60
   1307c:	bne	1308c <__assert_fail@plt+0x2118>
   13080:	movw	r3, #35628	; 0x8b2c
   13084:	movt	r3, #1
   13088:	b	130fc <__assert_fail@plt+0x2188>
   1308c:	movw	r3, #35632	; 0x8b30
   13090:	movt	r3, #1
   13094:	b	130fc <__assert_fail@plt+0x2188>
   13098:	movw	r1, #35636	; 0x8b34
   1309c:	movt	r1, #1
   130a0:	ldr	r0, [fp, #-12]
   130a4:	bl	1732c <__assert_fail@plt+0x63b8>
   130a8:	mov	r3, r0
   130ac:	cmp	r3, #0
   130b0:	bne	130dc <__assert_fail@plt+0x2168>
   130b4:	ldr	r3, [fp, #-16]
   130b8:	ldrb	r3, [r3]
   130bc:	cmp	r3, #96	; 0x60
   130c0:	bne	130d0 <__assert_fail@plt+0x215c>
   130c4:	movw	r3, #35644	; 0x8b3c
   130c8:	movt	r3, #1
   130cc:	b	130fc <__assert_fail@plt+0x2188>
   130d0:	movw	r3, #35648	; 0x8b40
   130d4:	movt	r3, #1
   130d8:	b	130fc <__assert_fail@plt+0x2188>
   130dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   130e0:	cmp	r3, #9
   130e4:	bne	130f4 <__assert_fail@plt+0x2180>
   130e8:	movw	r3, #35652	; 0x8b44
   130ec:	movt	r3, #1
   130f0:	b	130fc <__assert_fail@plt+0x2188>
   130f4:	movw	r3, #35656	; 0x8b48
   130f8:	movt	r3, #1
   130fc:	mov	r0, r3
   13100:	sub	sp, fp, #4
   13104:	ldr	fp, [sp]
   13108:	add	sp, sp, #4
   1310c:	pop	{pc}		; (ldr pc, [sp], #4)
   13110:	str	r4, [sp, #-12]!
   13114:	str	fp, [sp, #4]
   13118:	str	lr, [sp, #8]
   1311c:	add	fp, sp, #8
   13120:	sub	sp, sp, #116	; 0x74
   13124:	str	r0, [fp, #-88]	; 0xffffffa8
   13128:	str	r1, [fp, #-92]	; 0xffffffa4
   1312c:	str	r2, [fp, #-96]	; 0xffffffa0
   13130:	str	r3, [fp, #-100]	; 0xffffff9c
   13134:	mov	r3, #0
   13138:	str	r3, [fp, #-20]	; 0xffffffec
   1313c:	mov	r3, #0
   13140:	str	r3, [fp, #-24]	; 0xffffffe8
   13144:	mov	r3, #0
   13148:	str	r3, [fp, #-28]	; 0xffffffe4
   1314c:	mov	r3, #0
   13150:	str	r3, [fp, #-32]	; 0xffffffe0
   13154:	mov	r3, #0
   13158:	strb	r3, [fp, #-33]	; 0xffffffdf
   1315c:	bl	10db8 <__ctype_get_mb_cur_max@plt>
   13160:	mov	r3, r0
   13164:	cmp	r3, #1
   13168:	moveq	r3, #1
   1316c:	movne	r3, #0
   13170:	strb	r3, [fp, #-57]	; 0xffffffc7
   13174:	ldr	r3, [fp, #8]
   13178:	and	r3, r3, #2
   1317c:	cmp	r3, #0
   13180:	movne	r3, #1
   13184:	moveq	r3, #0
   13188:	strb	r3, [fp, #-34]	; 0xffffffde
   1318c:	mov	r3, #0
   13190:	strb	r3, [fp, #-35]	; 0xffffffdd
   13194:	mov	r3, #0
   13198:	strb	r3, [fp, #-36]	; 0xffffffdc
   1319c:	mov	r3, #1
   131a0:	strb	r3, [fp, #-37]	; 0xffffffdb
   131a4:	ldr	r3, [fp, #4]
   131a8:	cmp	r3, #10
   131ac:	ldrls	pc, [pc, r3, lsl #2]
   131b0:	b	133c8 <__assert_fail@plt+0x2454>
   131b4:			; <UNDEFINED> instruction: 0x000133bc
   131b8:	andeq	r3, r1, r4, lsr r3
   131bc:	andeq	r3, r1, r8, asr r3
   131c0:	andeq	r3, r1, ip, lsr #6
   131c4:	andeq	r3, r1, ip, lsr r3
   131c8:	strdeq	r3, [r1], -r0
   131cc:	andeq	r3, r1, r0, ror #3
   131d0:	andeq	r3, r1, r4, asr r2
   131d4:	andeq	r3, r1, r8, ror #4
   131d8:	andeq	r3, r1, r8, ror #4
   131dc:	andeq	r3, r1, r8, ror #4
   131e0:	mov	r3, #5
   131e4:	str	r3, [fp, #4]
   131e8:	mov	r3, #1
   131ec:	strb	r3, [fp, #-34]	; 0xffffffde
   131f0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131f4:	eor	r3, r3, #1
   131f8:	uxtb	r3, r3
   131fc:	cmp	r3, #0
   13200:	beq	13234 <__assert_fail@plt+0x22c0>
   13204:	ldr	r2, [fp, #-20]	; 0xffffffec
   13208:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1320c:	cmp	r2, r3
   13210:	bcs	13228 <__assert_fail@plt+0x22b4>
   13214:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13218:	ldr	r3, [fp, #-20]	; 0xffffffec
   1321c:	add	r3, r2, r3
   13220:	mov	r2, #34	; 0x22
   13224:	strb	r2, [r3]
   13228:	ldr	r3, [fp, #-20]	; 0xffffffec
   1322c:	add	r3, r3, #1
   13230:	str	r3, [fp, #-20]	; 0xffffffec
   13234:	mov	r3, #1
   13238:	strb	r3, [fp, #-33]	; 0xffffffdf
   1323c:	movw	r3, #35652	; 0x8b44
   13240:	movt	r3, #1
   13244:	str	r3, [fp, #-28]	; 0xffffffe4
   13248:	mov	r3, #1
   1324c:	str	r3, [fp, #-32]	; 0xffffffe0
   13250:	b	133cc <__assert_fail@plt+0x2458>
   13254:	mov	r3, #1
   13258:	strb	r3, [fp, #-33]	; 0xffffffdf
   1325c:	mov	r3, #0
   13260:	strb	r3, [fp, #-34]	; 0xffffffde
   13264:	b	133cc <__assert_fail@plt+0x2458>
   13268:	ldr	r3, [fp, #4]
   1326c:	cmp	r3, #10
   13270:	beq	1329c <__assert_fail@plt+0x2328>
   13274:	ldr	r1, [fp, #4]
   13278:	movw	r0, #35660	; 0x8b4c
   1327c:	movt	r0, #1
   13280:	bl	13010 <__assert_fail@plt+0x209c>
   13284:	str	r0, [fp, #16]
   13288:	ldr	r1, [fp, #4]
   1328c:	movw	r0, #35656	; 0x8b48
   13290:	movt	r0, #1
   13294:	bl	13010 <__assert_fail@plt+0x209c>
   13298:	str	r0, [fp, #20]
   1329c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132a0:	eor	r3, r3, #1
   132a4:	uxtb	r3, r3
   132a8:	cmp	r3, #0
   132ac:	beq	1330c <__assert_fail@plt+0x2398>
   132b0:	ldr	r3, [fp, #16]
   132b4:	str	r3, [fp, #-28]	; 0xffffffe4
   132b8:	b	132fc <__assert_fail@plt+0x2388>
   132bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   132c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132c4:	cmp	r2, r3
   132c8:	bcs	132e4 <__assert_fail@plt+0x2370>
   132cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132d4:	add	r3, r2, r3
   132d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   132dc:	ldrb	r2, [r2]
   132e0:	strb	r2, [r3]
   132e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132e8:	add	r3, r3, #1
   132ec:	str	r3, [fp, #-20]	; 0xffffffec
   132f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   132f4:	add	r3, r3, #1
   132f8:	str	r3, [fp, #-28]	; 0xffffffe4
   132fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13300:	ldrb	r3, [r3]
   13304:	cmp	r3, #0
   13308:	bne	132bc <__assert_fail@plt+0x2348>
   1330c:	mov	r3, #1
   13310:	strb	r3, [fp, #-33]	; 0xffffffdf
   13314:	ldr	r3, [fp, #20]
   13318:	str	r3, [fp, #-28]	; 0xffffffe4
   1331c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13320:	bl	10e6c <strlen@plt>
   13324:	str	r0, [fp, #-32]	; 0xffffffe0
   13328:	b	133cc <__assert_fail@plt+0x2458>
   1332c:	mov	r3, #1
   13330:	strb	r3, [fp, #-33]	; 0xffffffdf
   13334:	mov	r3, #1
   13338:	strb	r3, [fp, #-34]	; 0xffffffde
   1333c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13340:	eor	r3, r3, #1
   13344:	uxtb	r3, r3
   13348:	cmp	r3, #0
   1334c:	beq	13358 <__assert_fail@plt+0x23e4>
   13350:	mov	r3, #1
   13354:	strb	r3, [fp, #-33]	; 0xffffffdf
   13358:	mov	r3, #2
   1335c:	str	r3, [fp, #4]
   13360:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13364:	eor	r3, r3, #1
   13368:	uxtb	r3, r3
   1336c:	cmp	r3, #0
   13370:	beq	133a4 <__assert_fail@plt+0x2430>
   13374:	ldr	r2, [fp, #-20]	; 0xffffffec
   13378:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1337c:	cmp	r2, r3
   13380:	bcs	13398 <__assert_fail@plt+0x2424>
   13384:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13388:	ldr	r3, [fp, #-20]	; 0xffffffec
   1338c:	add	r3, r2, r3
   13390:	mov	r2, #39	; 0x27
   13394:	strb	r2, [r3]
   13398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1339c:	add	r3, r3, #1
   133a0:	str	r3, [fp, #-20]	; 0xffffffec
   133a4:	movw	r3, #35656	; 0x8b48
   133a8:	movt	r3, #1
   133ac:	str	r3, [fp, #-28]	; 0xffffffe4
   133b0:	mov	r3, #1
   133b4:	str	r3, [fp, #-32]	; 0xffffffe0
   133b8:	b	133cc <__assert_fail@plt+0x2458>
   133bc:	mov	r3, #0
   133c0:	strb	r3, [fp, #-34]	; 0xffffffde
   133c4:	b	133cc <__assert_fail@plt+0x2458>
   133c8:	bl	10f68 <abort@plt>
   133cc:	mov	r3, #0
   133d0:	str	r3, [fp, #-16]
   133d4:	b	14570 <__assert_fail@plt+0x35fc>
   133d8:	mov	r3, #0
   133dc:	strb	r3, [fp, #-40]	; 0xffffffd8
   133e0:	mov	r3, #0
   133e4:	strb	r3, [fp, #-41]	; 0xffffffd7
   133e8:	mov	r3, #0
   133ec:	strb	r3, [fp, #-42]	; 0xffffffd6
   133f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   133f4:	cmp	r3, #0
   133f8:	beq	13494 <__assert_fail@plt+0x2520>
   133fc:	ldr	r3, [fp, #4]
   13400:	cmp	r3, #2
   13404:	beq	13494 <__assert_fail@plt+0x2520>
   13408:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1340c:	cmp	r3, #0
   13410:	beq	13494 <__assert_fail@plt+0x2520>
   13414:	ldr	r2, [fp, #-16]
   13418:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1341c:	add	r4, r2, r3
   13420:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13424:	cmn	r3, #1
   13428:	bne	1344c <__assert_fail@plt+0x24d8>
   1342c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13430:	cmp	r3, #1
   13434:	bls	1344c <__assert_fail@plt+0x24d8>
   13438:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1343c:	bl	10e6c <strlen@plt>
   13440:	str	r0, [fp, #-100]	; 0xffffff9c
   13444:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13448:	b	13450 <__assert_fail@plt+0x24dc>
   1344c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13450:	cmp	r3, r4
   13454:	bcc	13494 <__assert_fail@plt+0x2520>
   13458:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1345c:	ldr	r3, [fp, #-16]
   13460:	add	r3, r2, r3
   13464:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13468:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1346c:	mov	r0, r3
   13470:	bl	10d58 <memcmp@plt>
   13474:	mov	r3, r0
   13478:	cmp	r3, #0
   1347c:	bne	13494 <__assert_fail@plt+0x2520>
   13480:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13484:	cmp	r3, #0
   13488:	bne	1472c <__assert_fail@plt+0x37b8>
   1348c:	mov	r3, #1
   13490:	strb	r3, [fp, #-40]	; 0xffffffd8
   13494:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13498:	ldr	r3, [fp, #-16]
   1349c:	add	r3, r2, r3
   134a0:	ldrb	r3, [r3]
   134a4:	strb	r3, [fp, #-38]	; 0xffffffda
   134a8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   134ac:	cmp	r3, #126	; 0x7e
   134b0:	ldrls	pc, [pc, r3, lsl #2]
   134b4:	b	13cec <__assert_fail@plt+0x2d78>
   134b8:			; <UNDEFINED> instruction: 0x000136b4
   134bc:	andeq	r3, r1, ip, ror #25
   134c0:	andeq	r3, r1, ip, ror #25
   134c4:	andeq	r3, r1, ip, ror #25
   134c8:	andeq	r3, r1, ip, ror #25
   134cc:	andeq	r3, r1, ip, ror #25
   134d0:	andeq	r3, r1, ip, ror #25
   134d4:	andeq	r3, r1, r8, lsr #21
   134d8:			; <UNDEFINED> instruction: 0x00013ab4
   134dc:	andeq	r3, r1, r4, ror #21
   134e0:	andeq	r3, r1, ip, asr #21
   134e4:	strdeq	r3, [r1], -r0
   134e8:	andeq	r3, r1, r0, asr #21
   134ec:	ldrdeq	r3, [r1], -r8
   134f0:	andeq	r3, r1, ip, ror #25
   134f4:	andeq	r3, r1, ip, ror #25
   134f8:	andeq	r3, r1, ip, ror #25
   134fc:	andeq	r3, r1, ip, ror #25
   13500:	andeq	r3, r1, ip, ror #25
   13504:	andeq	r3, r1, ip, ror #25
   13508:	andeq	r3, r1, ip, ror #25
   1350c:	andeq	r3, r1, ip, ror #25
   13510:	andeq	r3, r1, ip, ror #25
   13514:	andeq	r3, r1, ip, ror #25
   13518:	andeq	r3, r1, ip, ror #25
   1351c:	andeq	r3, r1, ip, ror #25
   13520:	andeq	r3, r1, ip, ror #25
   13524:	andeq	r3, r1, ip, ror #25
   13528:	andeq	r3, r1, ip, ror #25
   1352c:	andeq	r3, r1, ip, ror #25
   13530:	andeq	r3, r1, ip, ror #25
   13534:	andeq	r3, r1, ip, ror #25
   13538:	ldrdeq	r3, [r1], -r0
   1353c:	ldrdeq	r3, [r1], -r8
   13540:	ldrdeq	r3, [r1], -r8
   13544:	andeq	r3, r1, r4, asr #23
   13548:	ldrdeq	r3, [r1], -r8
   1354c:	andeq	r3, r1, r0, ror #25
   13550:	ldrdeq	r3, [r1], -r8
   13554:	strdeq	r3, [r1], -r4
   13558:	ldrdeq	r3, [r1], -r8
   1355c:	ldrdeq	r3, [r1], -r8
   13560:	ldrdeq	r3, [r1], -r8
   13564:	andeq	r3, r1, r0, ror #25
   13568:	andeq	r3, r1, r0, ror #25
   1356c:	andeq	r3, r1, r0, ror #25
   13570:	andeq	r3, r1, r0, ror #25
   13574:	andeq	r3, r1, r0, ror #25
   13578:	andeq	r3, r1, r0, ror #25
   1357c:	andeq	r3, r1, r0, ror #25
   13580:	andeq	r3, r1, r0, ror #25
   13584:	andeq	r3, r1, r0, ror #25
   13588:	andeq	r3, r1, r0, ror #25
   1358c:	andeq	r3, r1, r0, ror #25
   13590:	andeq	r3, r1, r0, ror #25
   13594:	andeq	r3, r1, r0, ror #25
   13598:	andeq	r3, r1, r0, ror #25
   1359c:	andeq	r3, r1, r0, ror #25
   135a0:	andeq	r3, r1, r0, ror #25
   135a4:	ldrdeq	r3, [r1], -r8
   135a8:	ldrdeq	r3, [r1], -r8
   135ac:	ldrdeq	r3, [r1], -r8
   135b0:	ldrdeq	r3, [r1], -r8
   135b4:	muleq	r1, r4, r8
   135b8:	andeq	r3, r1, ip, ror #25
   135bc:	andeq	r3, r1, r0, ror #25
   135c0:	andeq	r3, r1, r0, ror #25
   135c4:	andeq	r3, r1, r0, ror #25
   135c8:	andeq	r3, r1, r0, ror #25
   135cc:	andeq	r3, r1, r0, ror #25
   135d0:	andeq	r3, r1, r0, ror #25
   135d4:	andeq	r3, r1, r0, ror #25
   135d8:	andeq	r3, r1, r0, ror #25
   135dc:	andeq	r3, r1, r0, ror #25
   135e0:	andeq	r3, r1, r0, ror #25
   135e4:	andeq	r3, r1, r0, ror #25
   135e8:	andeq	r3, r1, r0, ror #25
   135ec:	andeq	r3, r1, r0, ror #25
   135f0:	andeq	r3, r1, r0, ror #25
   135f4:	andeq	r3, r1, r0, ror #25
   135f8:	andeq	r3, r1, r0, ror #25
   135fc:	andeq	r3, r1, r0, ror #25
   13600:	andeq	r3, r1, r0, ror #25
   13604:	andeq	r3, r1, r0, ror #25
   13608:	andeq	r3, r1, r0, ror #25
   1360c:	andeq	r3, r1, r0, ror #25
   13610:	andeq	r3, r1, r0, ror #25
   13614:	andeq	r3, r1, r0, ror #25
   13618:	andeq	r3, r1, r0, ror #25
   1361c:	andeq	r3, r1, r0, ror #25
   13620:	andeq	r3, r1, r0, ror #25
   13624:	ldrdeq	r3, [r1], -r8
   13628:	strdeq	r3, [r1], -ip
   1362c:	andeq	r3, r1, r0, ror #25
   13630:	ldrdeq	r3, [r1], -r8
   13634:	andeq	r3, r1, r0, ror #25
   13638:	ldrdeq	r3, [r1], -r8
   1363c:	andeq	r3, r1, r0, ror #25
   13640:	andeq	r3, r1, r0, ror #25
   13644:	andeq	r3, r1, r0, ror #25
   13648:	andeq	r3, r1, r0, ror #25
   1364c:	andeq	r3, r1, r0, ror #25
   13650:	andeq	r3, r1, r0, ror #25
   13654:	andeq	r3, r1, r0, ror #25
   13658:	andeq	r3, r1, r0, ror #25
   1365c:	andeq	r3, r1, r0, ror #25
   13660:	andeq	r3, r1, r0, ror #25
   13664:	andeq	r3, r1, r0, ror #25
   13668:	andeq	r3, r1, r0, ror #25
   1366c:	andeq	r3, r1, r0, ror #25
   13670:	andeq	r3, r1, r0, ror #25
   13674:	andeq	r3, r1, r0, ror #25
   13678:	andeq	r3, r1, r0, ror #25
   1367c:	andeq	r3, r1, r0, ror #25
   13680:	andeq	r3, r1, r0, ror #25
   13684:	andeq	r3, r1, r0, ror #25
   13688:	andeq	r3, r1, r0, ror #25
   1368c:	andeq	r3, r1, r0, ror #25
   13690:	andeq	r3, r1, r0, ror #25
   13694:	andeq	r3, r1, r0, ror #25
   13698:	andeq	r3, r1, r0, ror #25
   1369c:	andeq	r3, r1, r0, ror #25
   136a0:	andeq	r3, r1, r0, ror #25
   136a4:	andeq	r3, r1, ip, ror fp
   136a8:	ldrdeq	r3, [r1], -r8
   136ac:	andeq	r3, r1, ip, ror fp
   136b0:	andeq	r3, r1, r4, asr #23
   136b4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   136b8:	cmp	r3, #0
   136bc:	beq	13880 <__assert_fail@plt+0x290c>
   136c0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   136c4:	cmp	r3, #0
   136c8:	bne	14734 <__assert_fail@plt+0x37c0>
   136cc:	mov	r3, #1
   136d0:	strb	r3, [fp, #-41]	; 0xffffffd7
   136d4:	ldr	r3, [fp, #4]
   136d8:	cmp	r3, #2
   136dc:	bne	1378c <__assert_fail@plt+0x2818>
   136e0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   136e4:	eor	r3, r3, #1
   136e8:	uxtb	r3, r3
   136ec:	cmp	r3, #0
   136f0:	beq	1378c <__assert_fail@plt+0x2818>
   136f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   136f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136fc:	cmp	r2, r3
   13700:	bcs	13718 <__assert_fail@plt+0x27a4>
   13704:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13708:	ldr	r3, [fp, #-20]	; 0xffffffec
   1370c:	add	r3, r2, r3
   13710:	mov	r2, #39	; 0x27
   13714:	strb	r2, [r3]
   13718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1371c:	add	r3, r3, #1
   13720:	str	r3, [fp, #-20]	; 0xffffffec
   13724:	ldr	r2, [fp, #-20]	; 0xffffffec
   13728:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1372c:	cmp	r2, r3
   13730:	bcs	13748 <__assert_fail@plt+0x27d4>
   13734:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1373c:	add	r3, r2, r3
   13740:	mov	r2, #36	; 0x24
   13744:	strb	r2, [r3]
   13748:	ldr	r3, [fp, #-20]	; 0xffffffec
   1374c:	add	r3, r3, #1
   13750:	str	r3, [fp, #-20]	; 0xffffffec
   13754:	ldr	r2, [fp, #-20]	; 0xffffffec
   13758:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1375c:	cmp	r2, r3
   13760:	bcs	13778 <__assert_fail@plt+0x2804>
   13764:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13768:	ldr	r3, [fp, #-20]	; 0xffffffec
   1376c:	add	r3, r2, r3
   13770:	mov	r2, #39	; 0x27
   13774:	strb	r2, [r3]
   13778:	ldr	r3, [fp, #-20]	; 0xffffffec
   1377c:	add	r3, r3, #1
   13780:	str	r3, [fp, #-20]	; 0xffffffec
   13784:	mov	r3, #1
   13788:	strb	r3, [fp, #-35]	; 0xffffffdd
   1378c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13790:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13794:	cmp	r2, r3
   13798:	bcs	137b0 <__assert_fail@plt+0x283c>
   1379c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   137a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   137a4:	add	r3, r2, r3
   137a8:	mov	r2, #92	; 0x5c
   137ac:	strb	r2, [r3]
   137b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   137b4:	add	r3, r3, #1
   137b8:	str	r3, [fp, #-20]	; 0xffffffec
   137bc:	ldr	r3, [fp, #4]
   137c0:	cmp	r3, #2
   137c4:	beq	13874 <__assert_fail@plt+0x2900>
   137c8:	ldr	r3, [fp, #-16]
   137cc:	add	r3, r3, #1
   137d0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   137d4:	cmp	r2, r3
   137d8:	bls	13874 <__assert_fail@plt+0x2900>
   137dc:	ldr	r3, [fp, #-16]
   137e0:	add	r3, r3, #1
   137e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137e8:	add	r3, r2, r3
   137ec:	ldrb	r3, [r3]
   137f0:	cmp	r3, #47	; 0x2f
   137f4:	bls	13874 <__assert_fail@plt+0x2900>
   137f8:	ldr	r3, [fp, #-16]
   137fc:	add	r3, r3, #1
   13800:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13804:	add	r3, r2, r3
   13808:	ldrb	r3, [r3]
   1380c:	cmp	r3, #57	; 0x39
   13810:	bhi	13874 <__assert_fail@plt+0x2900>
   13814:	ldr	r2, [fp, #-20]	; 0xffffffec
   13818:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1381c:	cmp	r2, r3
   13820:	bcs	13838 <__assert_fail@plt+0x28c4>
   13824:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13828:	ldr	r3, [fp, #-20]	; 0xffffffec
   1382c:	add	r3, r2, r3
   13830:	mov	r2, #48	; 0x30
   13834:	strb	r2, [r3]
   13838:	ldr	r3, [fp, #-20]	; 0xffffffec
   1383c:	add	r3, r3, #1
   13840:	str	r3, [fp, #-20]	; 0xffffffec
   13844:	ldr	r2, [fp, #-20]	; 0xffffffec
   13848:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1384c:	cmp	r2, r3
   13850:	bcs	13868 <__assert_fail@plt+0x28f4>
   13854:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13858:	ldr	r3, [fp, #-20]	; 0xffffffec
   1385c:	add	r3, r2, r3
   13860:	mov	r2, #48	; 0x30
   13864:	strb	r2, [r3]
   13868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1386c:	add	r3, r3, #1
   13870:	str	r3, [fp, #-20]	; 0xffffffec
   13874:	mov	r3, #48	; 0x30
   13878:	strb	r3, [fp, #-38]	; 0xffffffda
   1387c:	b	142bc <__assert_fail@plt+0x3348>
   13880:	ldr	r3, [fp, #8]
   13884:	and	r3, r3, #1
   13888:	cmp	r3, #0
   1388c:	beq	142bc <__assert_fail@plt+0x3348>
   13890:	b	14564 <__assert_fail@plt+0x35f0>
   13894:	ldr	r3, [fp, #4]
   13898:	cmp	r3, #2
   1389c:	beq	138b0 <__assert_fail@plt+0x293c>
   138a0:	ldr	r3, [fp, #4]
   138a4:	cmp	r3, #5
   138a8:	beq	138c0 <__assert_fail@plt+0x294c>
   138ac:	b	13aa4 <__assert_fail@plt+0x2b30>
   138b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   138b4:	cmp	r3, #0
   138b8:	beq	13a98 <__assert_fail@plt+0x2b24>
   138bc:	b	14768 <__assert_fail@plt+0x37f4>
   138c0:	ldr	r3, [fp, #8]
   138c4:	and	r3, r3, #4
   138c8:	cmp	r3, #0
   138cc:	beq	13aa0 <__assert_fail@plt+0x2b2c>
   138d0:	ldr	r3, [fp, #-16]
   138d4:	add	r3, r3, #2
   138d8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   138dc:	cmp	r2, r3
   138e0:	bls	13aa0 <__assert_fail@plt+0x2b2c>
   138e4:	ldr	r3, [fp, #-16]
   138e8:	add	r3, r3, #1
   138ec:	ldr	r2, [fp, #-96]	; 0xffffffa0
   138f0:	add	r3, r2, r3
   138f4:	ldrb	r3, [r3]
   138f8:	cmp	r3, #63	; 0x3f
   138fc:	bne	13aa0 <__assert_fail@plt+0x2b2c>
   13900:	ldr	r3, [fp, #-16]
   13904:	add	r3, r3, #2
   13908:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1390c:	add	r3, r2, r3
   13910:	ldrb	r3, [r3]
   13914:	sub	r3, r3, #33	; 0x21
   13918:	cmp	r3, #29
   1391c:	ldrls	pc, [pc, r3, lsl #2]
   13920:	b	13a90 <__assert_fail@plt+0x2b1c>
   13924:	muleq	r1, ip, r9
   13928:	muleq	r1, r0, sl
   1392c:	muleq	r1, r0, sl
   13930:	muleq	r1, r0, sl
   13934:	muleq	r1, r0, sl
   13938:	muleq	r1, r0, sl
   1393c:	muleq	r1, ip, r9
   13940:	muleq	r1, ip, r9
   13944:	muleq	r1, ip, r9
   13948:	muleq	r1, r0, sl
   1394c:	muleq	r1, r0, sl
   13950:	muleq	r1, r0, sl
   13954:	muleq	r1, ip, r9
   13958:	muleq	r1, r0, sl
   1395c:	muleq	r1, ip, r9
   13960:	muleq	r1, r0, sl
   13964:	muleq	r1, r0, sl
   13968:	muleq	r1, r0, sl
   1396c:	muleq	r1, r0, sl
   13970:	muleq	r1, r0, sl
   13974:	muleq	r1, r0, sl
   13978:	muleq	r1, r0, sl
   1397c:	muleq	r1, r0, sl
   13980:	muleq	r1, r0, sl
   13984:	muleq	r1, r0, sl
   13988:	muleq	r1, r0, sl
   1398c:	muleq	r1, r0, sl
   13990:	muleq	r1, ip, r9
   13994:	muleq	r1, ip, r9
   13998:	muleq	r1, ip, r9
   1399c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   139a0:	cmp	r3, #0
   139a4:	bne	1473c <__assert_fail@plt+0x37c8>
   139a8:	ldr	r3, [fp, #-16]
   139ac:	add	r3, r3, #2
   139b0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   139b4:	add	r3, r2, r3
   139b8:	ldrb	r3, [r3]
   139bc:	strb	r3, [fp, #-38]	; 0xffffffda
   139c0:	ldr	r3, [fp, #-16]
   139c4:	add	r3, r3, #2
   139c8:	str	r3, [fp, #-16]
   139cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   139d0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   139d4:	cmp	r2, r3
   139d8:	bcs	139f0 <__assert_fail@plt+0x2a7c>
   139dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   139e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139e4:	add	r3, r2, r3
   139e8:	mov	r2, #63	; 0x3f
   139ec:	strb	r2, [r3]
   139f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f4:	add	r3, r3, #1
   139f8:	str	r3, [fp, #-20]	; 0xffffffec
   139fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a04:	cmp	r2, r3
   13a08:	bcs	13a20 <__assert_fail@plt+0x2aac>
   13a0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a14:	add	r3, r2, r3
   13a18:	mov	r2, #34	; 0x22
   13a1c:	strb	r2, [r3]
   13a20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a24:	add	r3, r3, #1
   13a28:	str	r3, [fp, #-20]	; 0xffffffec
   13a2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a30:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a34:	cmp	r2, r3
   13a38:	bcs	13a50 <__assert_fail@plt+0x2adc>
   13a3c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a44:	add	r3, r2, r3
   13a48:	mov	r2, #34	; 0x22
   13a4c:	strb	r2, [r3]
   13a50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a54:	add	r3, r3, #1
   13a58:	str	r3, [fp, #-20]	; 0xffffffec
   13a5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a64:	cmp	r2, r3
   13a68:	bcs	13a80 <__assert_fail@plt+0x2b0c>
   13a6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a70:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a74:	add	r3, r2, r3
   13a78:	mov	r2, #63	; 0x3f
   13a7c:	strb	r2, [r3]
   13a80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a84:	add	r3, r3, #1
   13a88:	str	r3, [fp, #-20]	; 0xffffffec
   13a8c:	b	13a94 <__assert_fail@plt+0x2b20>
   13a90:	nop	{0}
   13a94:	b	13aa0 <__assert_fail@plt+0x2b2c>
   13a98:	nop	{0}
   13a9c:	b	142f0 <__assert_fail@plt+0x337c>
   13aa0:	nop	{0}
   13aa4:	b	142f0 <__assert_fail@plt+0x337c>
   13aa8:	mov	r3, #97	; 0x61
   13aac:	strb	r3, [fp, #-39]	; 0xffffffd9
   13ab0:	b	13b64 <__assert_fail@plt+0x2bf0>
   13ab4:	mov	r3, #98	; 0x62
   13ab8:	strb	r3, [fp, #-39]	; 0xffffffd9
   13abc:	b	13b64 <__assert_fail@plt+0x2bf0>
   13ac0:	mov	r3, #102	; 0x66
   13ac4:	strb	r3, [fp, #-39]	; 0xffffffd9
   13ac8:	b	13b64 <__assert_fail@plt+0x2bf0>
   13acc:	mov	r3, #110	; 0x6e
   13ad0:	strb	r3, [fp, #-39]	; 0xffffffd9
   13ad4:	b	13b48 <__assert_fail@plt+0x2bd4>
   13ad8:	mov	r3, #114	; 0x72
   13adc:	strb	r3, [fp, #-39]	; 0xffffffd9
   13ae0:	b	13b48 <__assert_fail@plt+0x2bd4>
   13ae4:	mov	r3, #116	; 0x74
   13ae8:	strb	r3, [fp, #-39]	; 0xffffffd9
   13aec:	b	13b48 <__assert_fail@plt+0x2bd4>
   13af0:	mov	r3, #118	; 0x76
   13af4:	strb	r3, [fp, #-39]	; 0xffffffd9
   13af8:	b	13b64 <__assert_fail@plt+0x2bf0>
   13afc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13b00:	strb	r3, [fp, #-39]	; 0xffffffd9
   13b04:	ldr	r3, [fp, #4]
   13b08:	cmp	r3, #2
   13b0c:	bne	13b20 <__assert_fail@plt+0x2bac>
   13b10:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b14:	cmp	r3, #0
   13b18:	beq	1447c <__assert_fail@plt+0x3508>
   13b1c:	b	14768 <__assert_fail@plt+0x37f4>
   13b20:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13b24:	cmp	r3, #0
   13b28:	beq	13b44 <__assert_fail@plt+0x2bd0>
   13b2c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b30:	cmp	r3, #0
   13b34:	beq	13b44 <__assert_fail@plt+0x2bd0>
   13b38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13b3c:	cmp	r3, #0
   13b40:	bne	14484 <__assert_fail@plt+0x3510>
   13b44:	nop	{0}
   13b48:	ldr	r3, [fp, #4]
   13b4c:	cmp	r3, #2
   13b50:	bne	13b60 <__assert_fail@plt+0x2bec>
   13b54:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13b58:	cmp	r3, #0
   13b5c:	bne	14744 <__assert_fail@plt+0x37d0>
   13b60:	nop	{0}
   13b64:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13b68:	cmp	r3, #0
   13b6c:	beq	142c4 <__assert_fail@plt+0x3350>
   13b70:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   13b74:	strb	r3, [fp, #-38]	; 0xffffffda
   13b78:	b	1437c <__assert_fail@plt+0x3408>
   13b7c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13b80:	cmn	r3, #1
   13b84:	bne	13ba8 <__assert_fail@plt+0x2c34>
   13b88:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13b8c:	add	r3, r3, #1
   13b90:	ldrb	r3, [r3]
   13b94:	cmp	r3, #0
   13b98:	movne	r3, #1
   13b9c:	moveq	r3, #0
   13ba0:	uxtb	r3, r3
   13ba4:	b	13bbc <__assert_fail@plt+0x2c48>
   13ba8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13bac:	cmp	r3, #1
   13bb0:	movne	r3, #1
   13bb4:	moveq	r3, #0
   13bb8:	uxtb	r3, r3
   13bbc:	cmp	r3, #0
   13bc0:	bne	142cc <__assert_fail@plt+0x3358>
   13bc4:	ldr	r3, [fp, #-16]
   13bc8:	cmp	r3, #0
   13bcc:	bne	142d4 <__assert_fail@plt+0x3360>
   13bd0:	mov	r3, #1
   13bd4:	strb	r3, [fp, #-42]	; 0xffffffd6
   13bd8:	ldr	r3, [fp, #4]
   13bdc:	cmp	r3, #2
   13be0:	bne	142dc <__assert_fail@plt+0x3368>
   13be4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13be8:	cmp	r3, #0
   13bec:	beq	142dc <__assert_fail@plt+0x3368>
   13bf0:	b	14768 <__assert_fail@plt+0x37f4>
   13bf4:	mov	r3, #1
   13bf8:	strb	r3, [fp, #-36]	; 0xffffffdc
   13bfc:	mov	r3, #1
   13c00:	strb	r3, [fp, #-42]	; 0xffffffd6
   13c04:	ldr	r3, [fp, #4]
   13c08:	cmp	r3, #2
   13c0c:	bne	142e4 <__assert_fail@plt+0x3370>
   13c10:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13c14:	cmp	r3, #0
   13c18:	bne	1474c <__assert_fail@plt+0x37d8>
   13c1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c20:	cmp	r3, #0
   13c24:	beq	13c44 <__assert_fail@plt+0x2cd0>
   13c28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c2c:	cmp	r3, #0
   13c30:	bne	13c44 <__assert_fail@plt+0x2cd0>
   13c34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c38:	str	r3, [fp, #-24]	; 0xffffffe8
   13c3c:	mov	r3, #0
   13c40:	str	r3, [fp, #-92]	; 0xffffffa4
   13c44:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c48:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c4c:	cmp	r2, r3
   13c50:	bcs	13c68 <__assert_fail@plt+0x2cf4>
   13c54:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c5c:	add	r3, r2, r3
   13c60:	mov	r2, #39	; 0x27
   13c64:	strb	r2, [r3]
   13c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c6c:	add	r3, r3, #1
   13c70:	str	r3, [fp, #-20]	; 0xffffffec
   13c74:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c7c:	cmp	r2, r3
   13c80:	bcs	13c98 <__assert_fail@plt+0x2d24>
   13c84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c8c:	add	r3, r2, r3
   13c90:	mov	r2, #92	; 0x5c
   13c94:	strb	r2, [r3]
   13c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c9c:	add	r3, r3, #1
   13ca0:	str	r3, [fp, #-20]	; 0xffffffec
   13ca4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ca8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cac:	cmp	r2, r3
   13cb0:	bcs	13cc8 <__assert_fail@plt+0x2d54>
   13cb4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13cb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cbc:	add	r3, r2, r3
   13cc0:	mov	r2, #39	; 0x27
   13cc4:	strb	r2, [r3]
   13cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ccc:	add	r3, r3, #1
   13cd0:	str	r3, [fp, #-20]	; 0xffffffec
   13cd4:	mov	r3, #0
   13cd8:	strb	r3, [fp, #-35]	; 0xffffffdd
   13cdc:	b	142e4 <__assert_fail@plt+0x3370>
   13ce0:	mov	r3, #1
   13ce4:	strb	r3, [fp, #-42]	; 0xffffffd6
   13ce8:	b	142f0 <__assert_fail@plt+0x337c>
   13cec:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   13cf0:	cmp	r3, #0
   13cf4:	beq	13d34 <__assert_fail@plt+0x2dc0>
   13cf8:	mov	r3, #1
   13cfc:	str	r3, [fp, #-48]	; 0xffffffd0
   13d00:	bl	10e48 <__ctype_b_loc@plt>
   13d04:	mov	r3, r0
   13d08:	ldr	r2, [r3]
   13d0c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d10:	lsl	r3, r3, #1
   13d14:	add	r3, r2, r3
   13d18:	ldrh	r3, [r3]
   13d1c:	and	r3, r3, #16384	; 0x4000
   13d20:	cmp	r3, #0
   13d24:	movne	r3, #1
   13d28:	moveq	r3, #0
   13d2c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d30:	b	13f80 <__assert_fail@plt+0x300c>
   13d34:	sub	r3, fp, #76	; 0x4c
   13d38:	mov	r2, #8
   13d3c:	mov	r1, #0
   13d40:	mov	r0, r3
   13d44:	bl	10ea8 <memset@plt>
   13d48:	mov	r3, #0
   13d4c:	str	r3, [fp, #-48]	; 0xffffffd0
   13d50:	mov	r3, #1
   13d54:	strb	r3, [fp, #-49]	; 0xffffffcf
   13d58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13d5c:	cmn	r3, #1
   13d60:	bne	13d70 <__assert_fail@plt+0x2dfc>
   13d64:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13d68:	bl	10e6c <strlen@plt>
   13d6c:	str	r0, [fp, #-100]	; 0xffffff9c
   13d70:	ldr	r2, [fp, #-16]
   13d74:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d78:	add	r3, r2, r3
   13d7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13d80:	add	r1, r2, r3
   13d84:	ldr	r2, [fp, #-16]
   13d88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13d8c:	add	r3, r2, r3
   13d90:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13d94:	sub	r2, r2, r3
   13d98:	sub	r3, fp, #76	; 0x4c
   13d9c:	sub	r0, fp, #80	; 0x50
   13da0:	bl	17c8c <__assert_fail@plt+0x6d18>
   13da4:	str	r0, [fp, #-64]	; 0xffffffc0
   13da8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13dac:	cmp	r3, #0
   13db0:	beq	13f74 <__assert_fail@plt+0x3000>
   13db4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13db8:	cmn	r3, #1
   13dbc:	bne	13dcc <__assert_fail@plt+0x2e58>
   13dc0:	mov	r3, #0
   13dc4:	strb	r3, [fp, #-49]	; 0xffffffcf
   13dc8:	b	13f80 <__assert_fail@plt+0x300c>
   13dcc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13dd0:	cmn	r3, #2
   13dd4:	bne	13e2c <__assert_fail@plt+0x2eb8>
   13dd8:	mov	r3, #0
   13ddc:	strb	r3, [fp, #-49]	; 0xffffffcf
   13de0:	b	13df0 <__assert_fail@plt+0x2e7c>
   13de4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13de8:	add	r3, r3, #1
   13dec:	str	r3, [fp, #-48]	; 0xffffffd0
   13df0:	ldr	r2, [fp, #-16]
   13df4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13df8:	add	r3, r2, r3
   13dfc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13e00:	cmp	r2, r3
   13e04:	bls	13f7c <__assert_fail@plt+0x3008>
   13e08:	ldr	r2, [fp, #-16]
   13e0c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e10:	add	r3, r2, r3
   13e14:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e18:	add	r3, r2, r3
   13e1c:	ldrb	r3, [r3]
   13e20:	cmp	r3, #0
   13e24:	bne	13de4 <__assert_fail@plt+0x2e70>
   13e28:	b	13f7c <__assert_fail@plt+0x3008>
   13e2c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13e30:	cmp	r3, #0
   13e34:	beq	13f28 <__assert_fail@plt+0x2fb4>
   13e38:	ldr	r3, [fp, #4]
   13e3c:	cmp	r3, #2
   13e40:	bne	13f28 <__assert_fail@plt+0x2fb4>
   13e44:	mov	r3, #1
   13e48:	str	r3, [fp, #-56]	; 0xffffffc8
   13e4c:	b	13f18 <__assert_fail@plt+0x2fa4>
   13e50:	ldr	r2, [fp, #-16]
   13e54:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e58:	add	r2, r2, r3
   13e5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13e60:	add	r3, r2, r3
   13e64:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13e68:	add	r3, r2, r3
   13e6c:	ldrb	r3, [r3]
   13e70:	sub	r3, r3, #91	; 0x5b
   13e74:	cmp	r3, #33	; 0x21
   13e78:	ldrls	pc, [pc, r3, lsl #2]
   13e7c:	b	13f08 <__assert_fail@plt+0x2f94>
   13e80:	andeq	r4, r1, r8, ror #14
   13e84:	andeq	r4, r1, r8, ror #14
   13e88:	andeq	r3, r1, r8, lsl #30
   13e8c:	andeq	r4, r1, r8, ror #14
   13e90:	andeq	r3, r1, r8, lsl #30
   13e94:	andeq	r4, r1, r8, ror #14
   13e98:	andeq	r3, r1, r8, lsl #30
   13e9c:	andeq	r3, r1, r8, lsl #30
   13ea0:	andeq	r3, r1, r8, lsl #30
   13ea4:	andeq	r3, r1, r8, lsl #30
   13ea8:	andeq	r3, r1, r8, lsl #30
   13eac:	andeq	r3, r1, r8, lsl #30
   13eb0:	andeq	r3, r1, r8, lsl #30
   13eb4:	andeq	r3, r1, r8, lsl #30
   13eb8:	andeq	r3, r1, r8, lsl #30
   13ebc:	andeq	r3, r1, r8, lsl #30
   13ec0:	andeq	r3, r1, r8, lsl #30
   13ec4:	andeq	r3, r1, r8, lsl #30
   13ec8:	andeq	r3, r1, r8, lsl #30
   13ecc:	andeq	r3, r1, r8, lsl #30
   13ed0:	andeq	r3, r1, r8, lsl #30
   13ed4:	andeq	r3, r1, r8, lsl #30
   13ed8:	andeq	r3, r1, r8, lsl #30
   13edc:	andeq	r3, r1, r8, lsl #30
   13ee0:	andeq	r3, r1, r8, lsl #30
   13ee4:	andeq	r3, r1, r8, lsl #30
   13ee8:	andeq	r3, r1, r8, lsl #30
   13eec:	andeq	r3, r1, r8, lsl #30
   13ef0:	andeq	r3, r1, r8, lsl #30
   13ef4:	andeq	r3, r1, r8, lsl #30
   13ef8:	andeq	r3, r1, r8, lsl #30
   13efc:	andeq	r3, r1, r8, lsl #30
   13f00:	andeq	r3, r1, r8, lsl #30
   13f04:	andeq	r4, r1, r8, ror #14
   13f08:	nop	{0}
   13f0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13f10:	add	r3, r3, #1
   13f14:	str	r3, [fp, #-56]	; 0xffffffc8
   13f18:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f1c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f20:	cmp	r2, r3
   13f24:	bcc	13e50 <__assert_fail@plt+0x2edc>
   13f28:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13f2c:	mov	r0, r3
   13f30:	bl	10d88 <iswprint@plt>
   13f34:	mov	r3, r0
   13f38:	cmp	r3, #0
   13f3c:	bne	13f48 <__assert_fail@plt+0x2fd4>
   13f40:	mov	r3, #0
   13f44:	strb	r3, [fp, #-49]	; 0xffffffcf
   13f48:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13f4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13f50:	add	r3, r2, r3
   13f54:	str	r3, [fp, #-48]	; 0xffffffd0
   13f58:	sub	r3, fp, #76	; 0x4c
   13f5c:	mov	r0, r3
   13f60:	bl	10d4c <mbsinit@plt>
   13f64:	mov	r3, r0
   13f68:	cmp	r3, #0
   13f6c:	beq	13d70 <__assert_fail@plt+0x2dfc>
   13f70:	b	13f80 <__assert_fail@plt+0x300c>
   13f74:	nop	{0}
   13f78:	b	13f80 <__assert_fail@plt+0x300c>
   13f7c:	nop	{0}
   13f80:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13f84:	strb	r3, [fp, #-42]	; 0xffffffd6
   13f88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13f8c:	cmp	r3, #1
   13f90:	bhi	13fb4 <__assert_fail@plt+0x3040>
   13f94:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13f98:	cmp	r3, #0
   13f9c:	beq	142ec <__assert_fail@plt+0x3378>
   13fa0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13fa4:	eor	r3, r3, #1
   13fa8:	uxtb	r3, r3
   13fac:	cmp	r3, #0
   13fb0:	beq	142ec <__assert_fail@plt+0x3378>
   13fb4:	ldr	r2, [fp, #-16]
   13fb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fbc:	add	r3, r2, r3
   13fc0:	str	r3, [fp, #-68]	; 0xffffffbc
   13fc4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13fc8:	cmp	r3, #0
   13fcc:	beq	14180 <__assert_fail@plt+0x320c>
   13fd0:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13fd4:	eor	r3, r3, #1
   13fd8:	uxtb	r3, r3
   13fdc:	cmp	r3, #0
   13fe0:	beq	14180 <__assert_fail@plt+0x320c>
   13fe4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13fe8:	cmp	r3, #0
   13fec:	bne	14754 <__assert_fail@plt+0x37e0>
   13ff0:	mov	r3, #1
   13ff4:	strb	r3, [fp, #-41]	; 0xffffffd7
   13ff8:	ldr	r3, [fp, #4]
   13ffc:	cmp	r3, #2
   14000:	bne	140b0 <__assert_fail@plt+0x313c>
   14004:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14008:	eor	r3, r3, #1
   1400c:	uxtb	r3, r3
   14010:	cmp	r3, #0
   14014:	beq	140b0 <__assert_fail@plt+0x313c>
   14018:	ldr	r2, [fp, #-20]	; 0xffffffec
   1401c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14020:	cmp	r2, r3
   14024:	bcs	1403c <__assert_fail@plt+0x30c8>
   14028:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1402c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14030:	add	r3, r2, r3
   14034:	mov	r2, #39	; 0x27
   14038:	strb	r2, [r3]
   1403c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14040:	add	r3, r3, #1
   14044:	str	r3, [fp, #-20]	; 0xffffffec
   14048:	ldr	r2, [fp, #-20]	; 0xffffffec
   1404c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14050:	cmp	r2, r3
   14054:	bcs	1406c <__assert_fail@plt+0x30f8>
   14058:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1405c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14060:	add	r3, r2, r3
   14064:	mov	r2, #36	; 0x24
   14068:	strb	r2, [r3]
   1406c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14070:	add	r3, r3, #1
   14074:	str	r3, [fp, #-20]	; 0xffffffec
   14078:	ldr	r2, [fp, #-20]	; 0xffffffec
   1407c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14080:	cmp	r2, r3
   14084:	bcs	1409c <__assert_fail@plt+0x3128>
   14088:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1408c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14090:	add	r3, r2, r3
   14094:	mov	r2, #39	; 0x27
   14098:	strb	r2, [r3]
   1409c:	ldr	r3, [fp, #-20]	; 0xffffffec
   140a0:	add	r3, r3, #1
   140a4:	str	r3, [fp, #-20]	; 0xffffffec
   140a8:	mov	r3, #1
   140ac:	strb	r3, [fp, #-35]	; 0xffffffdd
   140b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   140b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140b8:	cmp	r2, r3
   140bc:	bcs	140d4 <__assert_fail@plt+0x3160>
   140c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140c8:	add	r3, r2, r3
   140cc:	mov	r2, #92	; 0x5c
   140d0:	strb	r2, [r3]
   140d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   140d8:	add	r3, r3, #1
   140dc:	str	r3, [fp, #-20]	; 0xffffffec
   140e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   140e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140e8:	cmp	r2, r3
   140ec:	bcs	14114 <__assert_fail@plt+0x31a0>
   140f0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   140f4:	lsr	r3, r3, #6
   140f8:	uxtb	r2, r3
   140fc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14100:	ldr	r3, [fp, #-20]	; 0xffffffec
   14104:	add	r3, r1, r3
   14108:	add	r2, r2, #48	; 0x30
   1410c:	uxtb	r2, r2
   14110:	strb	r2, [r3]
   14114:	ldr	r3, [fp, #-20]	; 0xffffffec
   14118:	add	r3, r3, #1
   1411c:	str	r3, [fp, #-20]	; 0xffffffec
   14120:	ldr	r2, [fp, #-20]	; 0xffffffec
   14124:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14128:	cmp	r2, r3
   1412c:	bcs	1415c <__assert_fail@plt+0x31e8>
   14130:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14134:	lsr	r3, r3, #3
   14138:	uxtb	r3, r3
   1413c:	and	r3, r3, #7
   14140:	uxtb	r2, r3
   14144:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14148:	ldr	r3, [fp, #-20]	; 0xffffffec
   1414c:	add	r3, r1, r3
   14150:	add	r2, r2, #48	; 0x30
   14154:	uxtb	r2, r2
   14158:	strb	r2, [r3]
   1415c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14160:	add	r3, r3, #1
   14164:	str	r3, [fp, #-20]	; 0xffffffec
   14168:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1416c:	and	r3, r3, #7
   14170:	uxtb	r3, r3
   14174:	add	r3, r3, #48	; 0x30
   14178:	strb	r3, [fp, #-38]	; 0xffffffda
   1417c:	b	141c4 <__assert_fail@plt+0x3250>
   14180:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14184:	cmp	r3, #0
   14188:	beq	141c4 <__assert_fail@plt+0x3250>
   1418c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14190:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14194:	cmp	r2, r3
   14198:	bcs	141b0 <__assert_fail@plt+0x323c>
   1419c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   141a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141a4:	add	r3, r2, r3
   141a8:	mov	r2, #92	; 0x5c
   141ac:	strb	r2, [r3]
   141b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   141b4:	add	r3, r3, #1
   141b8:	str	r3, [fp, #-20]	; 0xffffffec
   141bc:	mov	r3, #0
   141c0:	strb	r3, [fp, #-40]	; 0xffffffd8
   141c4:	ldr	r3, [fp, #-16]
   141c8:	add	r3, r3, #1
   141cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   141d0:	cmp	r2, r3
   141d4:	bls	142b4 <__assert_fail@plt+0x3340>
   141d8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   141dc:	cmp	r3, #0
   141e0:	beq	14260 <__assert_fail@plt+0x32ec>
   141e4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   141e8:	eor	r3, r3, #1
   141ec:	uxtb	r3, r3
   141f0:	cmp	r3, #0
   141f4:	beq	14260 <__assert_fail@plt+0x32ec>
   141f8:	ldr	r2, [fp, #-20]	; 0xffffffec
   141fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14200:	cmp	r2, r3
   14204:	bcs	1421c <__assert_fail@plt+0x32a8>
   14208:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1420c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14210:	add	r3, r2, r3
   14214:	mov	r2, #39	; 0x27
   14218:	strb	r2, [r3]
   1421c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14220:	add	r3, r3, #1
   14224:	str	r3, [fp, #-20]	; 0xffffffec
   14228:	ldr	r2, [fp, #-20]	; 0xffffffec
   1422c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14230:	cmp	r2, r3
   14234:	bcs	1424c <__assert_fail@plt+0x32d8>
   14238:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1423c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14240:	add	r3, r2, r3
   14244:	mov	r2, #39	; 0x27
   14248:	strb	r2, [r3]
   1424c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14250:	add	r3, r3, #1
   14254:	str	r3, [fp, #-20]	; 0xffffffec
   14258:	mov	r3, #0
   1425c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14260:	ldr	r2, [fp, #-20]	; 0xffffffec
   14264:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14268:	cmp	r2, r3
   1426c:	bcs	14284 <__assert_fail@plt+0x3310>
   14270:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14274:	ldr	r3, [fp, #-20]	; 0xffffffec
   14278:	add	r3, r2, r3
   1427c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14280:	strb	r2, [r3]
   14284:	ldr	r3, [fp, #-20]	; 0xffffffec
   14288:	add	r3, r3, #1
   1428c:	str	r3, [fp, #-20]	; 0xffffffec
   14290:	ldr	r3, [fp, #-16]
   14294:	add	r3, r3, #1
   14298:	str	r3, [fp, #-16]
   1429c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   142a0:	ldr	r3, [fp, #-16]
   142a4:	add	r3, r2, r3
   142a8:	ldrb	r3, [r3]
   142ac:	strb	r3, [fp, #-38]	; 0xffffffda
   142b0:	b	13fc4 <__assert_fail@plt+0x3050>
   142b4:	nop	{0}
   142b8:	b	14490 <__assert_fail@plt+0x351c>
   142bc:	nop	{0}
   142c0:	b	142f0 <__assert_fail@plt+0x337c>
   142c4:	nop	{0}
   142c8:	b	142f0 <__assert_fail@plt+0x337c>
   142cc:	nop	{0}
   142d0:	b	142f0 <__assert_fail@plt+0x337c>
   142d4:	nop	{0}
   142d8:	b	142f0 <__assert_fail@plt+0x337c>
   142dc:	nop	{0}
   142e0:	b	142f0 <__assert_fail@plt+0x337c>
   142e4:	nop	{0}
   142e8:	b	142f0 <__assert_fail@plt+0x337c>
   142ec:	nop	{0}
   142f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   142f4:	eor	r3, r3, #1
   142f8:	uxtb	r3, r3
   142fc:	cmp	r3, #0
   14300:	bne	14310 <__assert_fail@plt+0x339c>
   14304:	ldr	r3, [fp, #4]
   14308:	cmp	r3, #2
   1430c:	bne	14324 <__assert_fail@plt+0x33b0>
   14310:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14314:	eor	r3, r3, #1
   14318:	uxtb	r3, r3
   1431c:	cmp	r3, #0
   14320:	bne	14364 <__assert_fail@plt+0x33f0>
   14324:	ldr	r3, [fp, #12]
   14328:	cmp	r3, #0
   1432c:	beq	14364 <__assert_fail@plt+0x33f0>
   14330:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14334:	lsr	r3, r3, #5
   14338:	uxtb	r3, r3
   1433c:	lsl	r3, r3, #2
   14340:	ldr	r2, [fp, #12]
   14344:	add	r3, r2, r3
   14348:	ldr	r2, [r3]
   1434c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14350:	and	r3, r3, #31
   14354:	lsr	r3, r2, r3
   14358:	and	r3, r3, #1
   1435c:	cmp	r3, #0
   14360:	bne	14378 <__assert_fail@plt+0x3404>
   14364:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   14368:	eor	r3, r3, #1
   1436c:	uxtb	r3, r3
   14370:	cmp	r3, #0
   14374:	bne	1448c <__assert_fail@plt+0x3518>
   14378:	nop	{0}
   1437c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14380:	cmp	r3, #0
   14384:	bne	1475c <__assert_fail@plt+0x37e8>
   14388:	mov	r3, #1
   1438c:	strb	r3, [fp, #-41]	; 0xffffffd7
   14390:	ldr	r3, [fp, #4]
   14394:	cmp	r3, #2
   14398:	bne	14448 <__assert_fail@plt+0x34d4>
   1439c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   143a0:	eor	r3, r3, #1
   143a4:	uxtb	r3, r3
   143a8:	cmp	r3, #0
   143ac:	beq	14448 <__assert_fail@plt+0x34d4>
   143b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   143b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143b8:	cmp	r2, r3
   143bc:	bcs	143d4 <__assert_fail@plt+0x3460>
   143c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143c8:	add	r3, r2, r3
   143cc:	mov	r2, #39	; 0x27
   143d0:	strb	r2, [r3]
   143d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143d8:	add	r3, r3, #1
   143dc:	str	r3, [fp, #-20]	; 0xffffffec
   143e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   143e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   143e8:	cmp	r2, r3
   143ec:	bcs	14404 <__assert_fail@plt+0x3490>
   143f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   143f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   143f8:	add	r3, r2, r3
   143fc:	mov	r2, #36	; 0x24
   14400:	strb	r2, [r3]
   14404:	ldr	r3, [fp, #-20]	; 0xffffffec
   14408:	add	r3, r3, #1
   1440c:	str	r3, [fp, #-20]	; 0xffffffec
   14410:	ldr	r2, [fp, #-20]	; 0xffffffec
   14414:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14418:	cmp	r2, r3
   1441c:	bcs	14434 <__assert_fail@plt+0x34c0>
   14420:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14424:	ldr	r3, [fp, #-20]	; 0xffffffec
   14428:	add	r3, r2, r3
   1442c:	mov	r2, #39	; 0x27
   14430:	strb	r2, [r3]
   14434:	ldr	r3, [fp, #-20]	; 0xffffffec
   14438:	add	r3, r3, #1
   1443c:	str	r3, [fp, #-20]	; 0xffffffec
   14440:	mov	r3, #1
   14444:	strb	r3, [fp, #-35]	; 0xffffffdd
   14448:	ldr	r2, [fp, #-20]	; 0xffffffec
   1444c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14450:	cmp	r2, r3
   14454:	bcs	1446c <__assert_fail@plt+0x34f8>
   14458:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1445c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14460:	add	r3, r2, r3
   14464:	mov	r2, #92	; 0x5c
   14468:	strb	r2, [r3]
   1446c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14470:	add	r3, r3, #1
   14474:	str	r3, [fp, #-20]	; 0xffffffec
   14478:	b	14490 <__assert_fail@plt+0x351c>
   1447c:	nop	{0}
   14480:	b	14490 <__assert_fail@plt+0x351c>
   14484:	nop	{0}
   14488:	b	14490 <__assert_fail@plt+0x351c>
   1448c:	nop	{0}
   14490:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14494:	cmp	r3, #0
   14498:	beq	14518 <__assert_fail@plt+0x35a4>
   1449c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   144a0:	eor	r3, r3, #1
   144a4:	uxtb	r3, r3
   144a8:	cmp	r3, #0
   144ac:	beq	14518 <__assert_fail@plt+0x35a4>
   144b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   144b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144b8:	cmp	r2, r3
   144bc:	bcs	144d4 <__assert_fail@plt+0x3560>
   144c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144c8:	add	r3, r2, r3
   144cc:	mov	r2, #39	; 0x27
   144d0:	strb	r2, [r3]
   144d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d8:	add	r3, r3, #1
   144dc:	str	r3, [fp, #-20]	; 0xffffffec
   144e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   144e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   144e8:	cmp	r2, r3
   144ec:	bcs	14504 <__assert_fail@plt+0x3590>
   144f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   144f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144f8:	add	r3, r2, r3
   144fc:	mov	r2, #39	; 0x27
   14500:	strb	r2, [r3]
   14504:	ldr	r3, [fp, #-20]	; 0xffffffec
   14508:	add	r3, r3, #1
   1450c:	str	r3, [fp, #-20]	; 0xffffffec
   14510:	mov	r3, #0
   14514:	strb	r3, [fp, #-35]	; 0xffffffdd
   14518:	ldr	r2, [fp, #-20]	; 0xffffffec
   1451c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14520:	cmp	r2, r3
   14524:	bcs	1453c <__assert_fail@plt+0x35c8>
   14528:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1452c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14530:	add	r3, r2, r3
   14534:	ldrb	r2, [fp, #-38]	; 0xffffffda
   14538:	strb	r2, [r3]
   1453c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14540:	add	r3, r3, #1
   14544:	str	r3, [fp, #-20]	; 0xffffffec
   14548:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   1454c:	eor	r3, r3, #1
   14550:	uxtb	r3, r3
   14554:	cmp	r3, #0
   14558:	beq	14564 <__assert_fail@plt+0x35f0>
   1455c:	mov	r3, #0
   14560:	strb	r3, [fp, #-37]	; 0xffffffdb
   14564:	ldr	r3, [fp, #-16]
   14568:	add	r3, r3, #1
   1456c:	str	r3, [fp, #-16]
   14570:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14574:	cmn	r3, #1
   14578:	bne	145a0 <__assert_fail@plt+0x362c>
   1457c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14580:	ldr	r3, [fp, #-16]
   14584:	add	r3, r2, r3
   14588:	ldrb	r3, [r3]
   1458c:	cmp	r3, #0
   14590:	movne	r3, #1
   14594:	moveq	r3, #0
   14598:	uxtb	r3, r3
   1459c:	b	145b8 <__assert_fail@plt+0x3644>
   145a0:	ldr	r2, [fp, #-16]
   145a4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   145a8:	cmp	r2, r3
   145ac:	movne	r3, #1
   145b0:	moveq	r3, #0
   145b4:	uxtb	r3, r3
   145b8:	cmp	r3, #0
   145bc:	bne	133d8 <__assert_fail@plt+0x2464>
   145c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   145c4:	cmp	r3, #0
   145c8:	bne	145e4 <__assert_fail@plt+0x3670>
   145cc:	ldr	r3, [fp, #4]
   145d0:	cmp	r3, #2
   145d4:	bne	145e4 <__assert_fail@plt+0x3670>
   145d8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   145dc:	cmp	r3, #0
   145e0:	bne	14764 <__assert_fail@plt+0x37f0>
   145e4:	ldr	r3, [fp, #4]
   145e8:	cmp	r3, #2
   145ec:	bne	1468c <__assert_fail@plt+0x3718>
   145f0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   145f4:	eor	r3, r3, #1
   145f8:	uxtb	r3, r3
   145fc:	cmp	r3, #0
   14600:	beq	1468c <__assert_fail@plt+0x3718>
   14604:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14608:	cmp	r3, #0
   1460c:	beq	1468c <__assert_fail@plt+0x3718>
   14610:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14614:	cmp	r3, #0
   14618:	beq	14660 <__assert_fail@plt+0x36ec>
   1461c:	ldr	r3, [fp, #20]
   14620:	str	r3, [sp, #16]
   14624:	ldr	r3, [fp, #16]
   14628:	str	r3, [sp, #12]
   1462c:	ldr	r3, [fp, #12]
   14630:	str	r3, [sp, #8]
   14634:	ldr	r3, [fp, #8]
   14638:	str	r3, [sp, #4]
   1463c:	mov	r3, #5
   14640:	str	r3, [sp]
   14644:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14648:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1464c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14650:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14654:	bl	13110 <__assert_fail@plt+0x219c>
   14658:	mov	r3, r0
   1465c:	b	147cc <__assert_fail@plt+0x3858>
   14660:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14664:	cmp	r3, #0
   14668:	bne	1468c <__assert_fail@plt+0x3718>
   1466c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14670:	cmp	r3, #0
   14674:	beq	1468c <__assert_fail@plt+0x3718>
   14678:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1467c:	str	r3, [fp, #-92]	; 0xffffffa4
   14680:	mov	r3, #0
   14684:	str	r3, [fp, #-20]	; 0xffffffec
   14688:	b	131a4 <__assert_fail@plt+0x2230>
   1468c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14690:	cmp	r3, #0
   14694:	beq	14700 <__assert_fail@plt+0x378c>
   14698:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1469c:	eor	r3, r3, #1
   146a0:	uxtb	r3, r3
   146a4:	cmp	r3, #0
   146a8:	beq	14700 <__assert_fail@plt+0x378c>
   146ac:	b	146f0 <__assert_fail@plt+0x377c>
   146b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   146b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146b8:	cmp	r2, r3
   146bc:	bcs	146d8 <__assert_fail@plt+0x3764>
   146c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146c8:	add	r3, r2, r3
   146cc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   146d0:	ldrb	r2, [r2]
   146d4:	strb	r2, [r3]
   146d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   146dc:	add	r3, r3, #1
   146e0:	str	r3, [fp, #-20]	; 0xffffffec
   146e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   146e8:	add	r3, r3, #1
   146ec:	str	r3, [fp, #-28]	; 0xffffffe4
   146f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   146f4:	ldrb	r3, [r3]
   146f8:	cmp	r3, #0
   146fc:	bne	146b0 <__assert_fail@plt+0x373c>
   14700:	ldr	r2, [fp, #-20]	; 0xffffffec
   14704:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14708:	cmp	r2, r3
   1470c:	bcs	14724 <__assert_fail@plt+0x37b0>
   14710:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14714:	ldr	r3, [fp, #-20]	; 0xffffffec
   14718:	add	r3, r2, r3
   1471c:	mov	r2, #0
   14720:	strb	r2, [r3]
   14724:	ldr	r3, [fp, #-20]	; 0xffffffec
   14728:	b	147cc <__assert_fail@plt+0x3858>
   1472c:	nop	{0}
   14730:	b	14768 <__assert_fail@plt+0x37f4>
   14734:	nop	{0}
   14738:	b	14768 <__assert_fail@plt+0x37f4>
   1473c:	nop	{0}
   14740:	b	14768 <__assert_fail@plt+0x37f4>
   14744:	nop	{0}
   14748:	b	14768 <__assert_fail@plt+0x37f4>
   1474c:	nop	{0}
   14750:	b	14768 <__assert_fail@plt+0x37f4>
   14754:	nop	{0}
   14758:	b	14768 <__assert_fail@plt+0x37f4>
   1475c:	nop	{0}
   14760:	b	14768 <__assert_fail@plt+0x37f4>
   14764:	nop	{0}
   14768:	ldr	r3, [fp, #4]
   1476c:	cmp	r3, #2
   14770:	bne	14788 <__assert_fail@plt+0x3814>
   14774:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14778:	cmp	r3, #0
   1477c:	beq	14788 <__assert_fail@plt+0x3814>
   14780:	mov	r3, #4
   14784:	str	r3, [fp, #4]
   14788:	ldr	r3, [fp, #8]
   1478c:	bic	r3, r3, #2
   14790:	ldr	r2, [fp, #20]
   14794:	str	r2, [sp, #16]
   14798:	ldr	r2, [fp, #16]
   1479c:	str	r2, [sp, #12]
   147a0:	mov	r2, #0
   147a4:	str	r2, [sp, #8]
   147a8:	str	r3, [sp, #4]
   147ac:	ldr	r3, [fp, #4]
   147b0:	str	r3, [sp]
   147b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   147b8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   147bc:	ldr	r1, [fp, #-92]	; 0xffffffa4
   147c0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   147c4:	bl	13110 <__assert_fail@plt+0x219c>
   147c8:	mov	r3, r0
   147cc:	mov	r0, r3
   147d0:	sub	sp, fp, #8
   147d4:	ldr	r4, [sp]
   147d8:	ldr	fp, [sp, #4]
   147dc:	add	sp, sp, #8
   147e0:	pop	{pc}		; (ldr pc, [sp], #4)
   147e4:	str	fp, [sp, #-8]!
   147e8:	str	lr, [sp, #4]
   147ec:	add	fp, sp, #4
   147f0:	sub	sp, sp, #56	; 0x38
   147f4:	str	r0, [fp, #-24]	; 0xffffffe8
   147f8:	str	r1, [fp, #-28]	; 0xffffffe4
   147fc:	str	r2, [fp, #-32]	; 0xffffffe0
   14800:	str	r3, [fp, #-36]	; 0xffffffdc
   14804:	ldr	r3, [fp, #4]
   14808:	cmp	r3, #0
   1480c:	beq	14818 <__assert_fail@plt+0x38a4>
   14810:	ldr	r3, [fp, #4]
   14814:	b	14820 <__assert_fail@plt+0x38ac>
   14818:	movw	r3, #41364	; 0xa194
   1481c:	movt	r3, #2
   14820:	str	r3, [fp, #-8]
   14824:	bl	10e90 <__errno_location@plt>
   14828:	mov	r3, r0
   1482c:	ldr	r3, [r3]
   14830:	str	r3, [fp, #-12]
   14834:	ldr	r3, [fp, #-8]
   14838:	ldr	r3, [r3]
   1483c:	ldr	r2, [fp, #-8]
   14840:	ldr	r2, [r2, #4]
   14844:	ldr	r1, [fp, #-8]
   14848:	add	r1, r1, #8
   1484c:	ldr	r0, [fp, #-8]
   14850:	ldr	r0, [r0, #40]	; 0x28
   14854:	ldr	ip, [fp, #-8]
   14858:	ldr	ip, [ip, #44]	; 0x2c
   1485c:	str	ip, [sp, #16]
   14860:	str	r0, [sp, #12]
   14864:	str	r1, [sp, #8]
   14868:	str	r2, [sp, #4]
   1486c:	str	r3, [sp]
   14870:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14874:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14878:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1487c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14880:	bl	13110 <__assert_fail@plt+0x219c>
   14884:	str	r0, [fp, #-16]
   14888:	bl	10e90 <__errno_location@plt>
   1488c:	mov	r2, r0
   14890:	ldr	r3, [fp, #-12]
   14894:	str	r3, [r2]
   14898:	ldr	r3, [fp, #-16]
   1489c:	mov	r0, r3
   148a0:	sub	sp, fp, #4
   148a4:	ldr	fp, [sp]
   148a8:	add	sp, sp, #4
   148ac:	pop	{pc}		; (ldr pc, [sp], #4)
   148b0:	str	fp, [sp, #-8]!
   148b4:	str	lr, [sp, #4]
   148b8:	add	fp, sp, #4
   148bc:	sub	sp, sp, #16
   148c0:	str	r0, [fp, #-8]
   148c4:	str	r1, [fp, #-12]
   148c8:	str	r2, [fp, #-16]
   148cc:	ldr	r3, [fp, #-16]
   148d0:	mov	r2, #0
   148d4:	ldr	r1, [fp, #-12]
   148d8:	ldr	r0, [fp, #-8]
   148dc:	bl	148f8 <__assert_fail@plt+0x3984>
   148e0:	mov	r3, r0
   148e4:	mov	r0, r3
   148e8:	sub	sp, fp, #4
   148ec:	ldr	fp, [sp]
   148f0:	add	sp, sp, #4
   148f4:	pop	{pc}		; (ldr pc, [sp], #4)
   148f8:	str	fp, [sp, #-8]!
   148fc:	str	lr, [sp, #4]
   14900:	add	fp, sp, #4
   14904:	sub	sp, sp, #64	; 0x40
   14908:	str	r0, [fp, #-32]	; 0xffffffe0
   1490c:	str	r1, [fp, #-36]	; 0xffffffdc
   14910:	str	r2, [fp, #-40]	; 0xffffffd8
   14914:	str	r3, [fp, #-44]	; 0xffffffd4
   14918:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1491c:	cmp	r3, #0
   14920:	beq	1492c <__assert_fail@plt+0x39b8>
   14924:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14928:	b	14934 <__assert_fail@plt+0x39c0>
   1492c:	movw	r3, #41364	; 0xa194
   14930:	movt	r3, #2
   14934:	str	r3, [fp, #-8]
   14938:	bl	10e90 <__errno_location@plt>
   1493c:	mov	r3, r0
   14940:	ldr	r3, [r3]
   14944:	str	r3, [fp, #-12]
   14948:	ldr	r3, [fp, #-8]
   1494c:	ldr	r3, [r3, #4]
   14950:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14954:	cmp	r2, #0
   14958:	moveq	r2, #1
   1495c:	movne	r2, #0
   14960:	uxtb	r2, r2
   14964:	orr	r3, r3, r2
   14968:	str	r3, [fp, #-16]
   1496c:	ldr	r3, [fp, #-8]
   14970:	ldr	r3, [r3]
   14974:	ldr	r2, [fp, #-8]
   14978:	add	r2, r2, #8
   1497c:	ldr	r1, [fp, #-8]
   14980:	ldr	r1, [r1, #40]	; 0x28
   14984:	ldr	r0, [fp, #-8]
   14988:	ldr	r0, [r0, #44]	; 0x2c
   1498c:	str	r0, [sp, #16]
   14990:	str	r1, [sp, #12]
   14994:	str	r2, [sp, #8]
   14998:	ldr	r2, [fp, #-16]
   1499c:	str	r2, [sp, #4]
   149a0:	str	r3, [sp]
   149a4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   149a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   149ac:	mov	r1, #0
   149b0:	mov	r0, #0
   149b4:	bl	13110 <__assert_fail@plt+0x219c>
   149b8:	mov	r3, r0
   149bc:	add	r3, r3, #1
   149c0:	str	r3, [fp, #-20]	; 0xffffffec
   149c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   149c8:	bl	15e08 <__assert_fail@plt+0x4e94>
   149cc:	mov	r3, r0
   149d0:	str	r3, [fp, #-24]	; 0xffffffe8
   149d4:	ldr	r3, [fp, #-8]
   149d8:	ldr	r3, [r3]
   149dc:	ldr	r2, [fp, #-8]
   149e0:	add	r2, r2, #8
   149e4:	ldr	r1, [fp, #-8]
   149e8:	ldr	r1, [r1, #40]	; 0x28
   149ec:	ldr	r0, [fp, #-8]
   149f0:	ldr	r0, [r0, #44]	; 0x2c
   149f4:	str	r0, [sp, #16]
   149f8:	str	r1, [sp, #12]
   149fc:	str	r2, [sp, #8]
   14a00:	ldr	r2, [fp, #-16]
   14a04:	str	r2, [sp, #4]
   14a08:	str	r3, [sp]
   14a0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14a10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a14:	ldr	r1, [fp, #-20]	; 0xffffffec
   14a18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a1c:	bl	13110 <__assert_fail@plt+0x219c>
   14a20:	bl	10e90 <__errno_location@plt>
   14a24:	mov	r2, r0
   14a28:	ldr	r3, [fp, #-12]
   14a2c:	str	r3, [r2]
   14a30:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14a34:	cmp	r3, #0
   14a38:	beq	14a4c <__assert_fail@plt+0x3ad8>
   14a3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a40:	sub	r2, r3, #1
   14a44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14a48:	str	r2, [r3]
   14a4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14a50:	mov	r0, r3
   14a54:	sub	sp, fp, #4
   14a58:	ldr	fp, [sp]
   14a5c:	add	sp, sp, #4
   14a60:	pop	{pc}		; (ldr pc, [sp], #4)
   14a64:	str	fp, [sp, #-8]!
   14a68:	str	lr, [sp, #4]
   14a6c:	add	fp, sp, #4
   14a70:	sub	sp, sp, #8
   14a74:	movw	r3, #41228	; 0xa10c
   14a78:	movt	r3, #2
   14a7c:	ldr	r3, [r3]
   14a80:	str	r3, [fp, #-12]
   14a84:	mov	r3, #1
   14a88:	str	r3, [fp, #-8]
   14a8c:	b	14ab8 <__assert_fail@plt+0x3b44>
   14a90:	ldr	r3, [fp, #-8]
   14a94:	lsl	r3, r3, #3
   14a98:	ldr	r2, [fp, #-12]
   14a9c:	add	r3, r2, r3
   14aa0:	ldr	r3, [r3, #4]
   14aa4:	mov	r0, r3
   14aa8:	bl	12afc <__assert_fail@plt+0x1b88>
   14aac:	ldr	r3, [fp, #-8]
   14ab0:	add	r3, r3, #1
   14ab4:	str	r3, [fp, #-8]
   14ab8:	movw	r3, #41216	; 0xa100
   14abc:	movt	r3, #2
   14ac0:	ldr	r3, [r3]
   14ac4:	ldr	r2, [fp, #-8]
   14ac8:	cmp	r2, r3
   14acc:	blt	14a90 <__assert_fail@plt+0x3b1c>
   14ad0:	ldr	r3, [fp, #-12]
   14ad4:	ldr	r2, [r3, #4]
   14ad8:	movw	r3, #41412	; 0xa1c4
   14adc:	movt	r3, #2
   14ae0:	cmp	r2, r3
   14ae4:	beq	14b1c <__assert_fail@plt+0x3ba8>
   14ae8:	ldr	r3, [fp, #-12]
   14aec:	ldr	r3, [r3, #4]
   14af0:	mov	r0, r3
   14af4:	bl	12afc <__assert_fail@plt+0x1b88>
   14af8:	movw	r3, #41220	; 0xa104
   14afc:	movt	r3, #2
   14b00:	mov	r2, #256	; 0x100
   14b04:	str	r2, [r3]
   14b08:	movw	r3, #41220	; 0xa104
   14b0c:	movt	r3, #2
   14b10:	movw	r2, #41412	; 0xa1c4
   14b14:	movt	r2, #2
   14b18:	str	r2, [r3, #4]
   14b1c:	ldr	r2, [fp, #-12]
   14b20:	movw	r3, #41220	; 0xa104
   14b24:	movt	r3, #2
   14b28:	cmp	r2, r3
   14b2c:	beq	14b4c <__assert_fail@plt+0x3bd8>
   14b30:	ldr	r0, [fp, #-12]
   14b34:	bl	12afc <__assert_fail@plt+0x1b88>
   14b38:	movw	r3, #41228	; 0xa10c
   14b3c:	movt	r3, #2
   14b40:	movw	r2, #41220	; 0xa104
   14b44:	movt	r2, #2
   14b48:	str	r2, [r3]
   14b4c:	movw	r3, #41216	; 0xa100
   14b50:	movt	r3, #2
   14b54:	mov	r2, #1
   14b58:	str	r2, [r3]
   14b5c:	nop	{0}
   14b60:	sub	sp, fp, #4
   14b64:	ldr	fp, [sp]
   14b68:	add	sp, sp, #4
   14b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b70:	str	fp, [sp, #-8]!
   14b74:	str	lr, [sp, #4]
   14b78:	add	fp, sp, #4
   14b7c:	sub	sp, sp, #80	; 0x50
   14b80:	str	r0, [fp, #-48]	; 0xffffffd0
   14b84:	str	r1, [fp, #-52]	; 0xffffffcc
   14b88:	str	r2, [fp, #-56]	; 0xffffffc8
   14b8c:	str	r3, [fp, #-60]	; 0xffffffc4
   14b90:	bl	10e90 <__errno_location@plt>
   14b94:	mov	r3, r0
   14b98:	ldr	r3, [r3]
   14b9c:	str	r3, [fp, #-16]
   14ba0:	movw	r3, #41228	; 0xa10c
   14ba4:	movt	r3, #2
   14ba8:	ldr	r3, [r3]
   14bac:	str	r3, [fp, #-8]
   14bb0:	mvn	r3, #-2147483648	; 0x80000000
   14bb4:	str	r3, [fp, #-20]	; 0xffffffec
   14bb8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14bbc:	cmp	r3, #0
   14bc0:	blt	14bd4 <__assert_fail@plt+0x3c60>
   14bc4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bcc:	cmp	r2, r3
   14bd0:	blt	14bd8 <__assert_fail@plt+0x3c64>
   14bd4:	bl	10f68 <abort@plt>
   14bd8:	movw	r3, #41216	; 0xa100
   14bdc:	movt	r3, #2
   14be0:	ldr	r3, [r3]
   14be4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14be8:	cmp	r2, r3
   14bec:	blt	14ce4 <__assert_fail@plt+0x3d70>
   14bf0:	ldr	r2, [fp, #-8]
   14bf4:	movw	r3, #41220	; 0xa104
   14bf8:	movt	r3, #2
   14bfc:	cmp	r2, r3
   14c00:	moveq	r3, #1
   14c04:	movne	r3, #0
   14c08:	strb	r3, [fp, #-21]	; 0xffffffeb
   14c0c:	movw	r3, #41216	; 0xa100
   14c10:	movt	r3, #2
   14c14:	ldr	r3, [r3]
   14c18:	str	r3, [fp, #-40]	; 0xffffffd8
   14c1c:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14c20:	cmp	r3, #0
   14c24:	beq	14c30 <__assert_fail@plt+0x3cbc>
   14c28:	mov	r0, #0
   14c2c:	b	14c34 <__assert_fail@plt+0x3cc0>
   14c30:	ldr	r0, [fp, #-8]
   14c34:	movw	r3, #41216	; 0xa100
   14c38:	movt	r3, #2
   14c3c:	ldr	r3, [r3]
   14c40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14c44:	sub	r3, r2, r3
   14c48:	add	r2, r3, #1
   14c4c:	sub	r1, fp, #40	; 0x28
   14c50:	mov	r3, #8
   14c54:	str	r3, [sp]
   14c58:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c5c:	bl	16168 <__assert_fail@plt+0x51f4>
   14c60:	str	r0, [fp, #-8]
   14c64:	movw	r3, #41228	; 0xa10c
   14c68:	movt	r3, #2
   14c6c:	ldr	r2, [fp, #-8]
   14c70:	str	r2, [r3]
   14c74:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14c78:	cmp	r3, #0
   14c7c:	beq	14c98 <__assert_fail@plt+0x3d24>
   14c80:	ldr	r2, [fp, #-8]
   14c84:	movw	r3, #41220	; 0xa104
   14c88:	movt	r3, #2
   14c8c:	mov	r1, r2
   14c90:	ldrd	r2, [r3]
   14c94:	strd	r2, [r1]
   14c98:	movw	r3, #41216	; 0xa100
   14c9c:	movt	r3, #2
   14ca0:	ldr	r3, [r3]
   14ca4:	lsl	r3, r3, #3
   14ca8:	ldr	r2, [fp, #-8]
   14cac:	add	r0, r2, r3
   14cb0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14cb4:	movw	r3, #41216	; 0xa100
   14cb8:	movt	r3, #2
   14cbc:	ldr	r3, [r3]
   14cc0:	sub	r3, r2, r3
   14cc4:	lsl	r3, r3, #3
   14cc8:	mov	r2, r3
   14ccc:	mov	r1, #0
   14cd0:	bl	10ea8 <memset@plt>
   14cd4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14cd8:	movw	r3, #41216	; 0xa100
   14cdc:	movt	r3, #2
   14ce0:	str	r2, [r3]
   14ce4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14ce8:	lsl	r3, r3, #3
   14cec:	ldr	r2, [fp, #-8]
   14cf0:	add	r3, r2, r3
   14cf4:	ldr	r3, [r3]
   14cf8:	str	r3, [fp, #-28]	; 0xffffffe4
   14cfc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d00:	lsl	r3, r3, #3
   14d04:	ldr	r2, [fp, #-8]
   14d08:	add	r3, r2, r3
   14d0c:	ldr	r3, [r3, #4]
   14d10:	str	r3, [fp, #-12]
   14d14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14d18:	ldr	r3, [r3, #4]
   14d1c:	orr	r3, r3, #1
   14d20:	str	r3, [fp, #-32]	; 0xffffffe0
   14d24:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14d28:	ldr	r3, [r3]
   14d2c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14d30:	add	r2, r2, #8
   14d34:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14d38:	ldr	r1, [r1, #40]	; 0x28
   14d3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14d40:	ldr	r0, [r0, #44]	; 0x2c
   14d44:	str	r0, [sp, #16]
   14d48:	str	r1, [sp, #12]
   14d4c:	str	r2, [sp, #8]
   14d50:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14d54:	str	r2, [sp, #4]
   14d58:	str	r3, [sp]
   14d5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14d60:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14d64:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14d68:	ldr	r0, [fp, #-12]
   14d6c:	bl	13110 <__assert_fail@plt+0x219c>
   14d70:	str	r0, [fp, #-36]	; 0xffffffdc
   14d74:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14d78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d7c:	cmp	r2, r3
   14d80:	bhi	14e38 <__assert_fail@plt+0x3ec4>
   14d84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d88:	add	r3, r3, #1
   14d8c:	str	r3, [fp, #-28]	; 0xffffffe4
   14d90:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14d94:	lsl	r3, r3, #3
   14d98:	ldr	r2, [fp, #-8]
   14d9c:	add	r3, r2, r3
   14da0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14da4:	str	r2, [r3]
   14da8:	ldr	r2, [fp, #-12]
   14dac:	movw	r3, #41412	; 0xa1c4
   14db0:	movt	r3, #2
   14db4:	cmp	r2, r3
   14db8:	beq	14dc4 <__assert_fail@plt+0x3e50>
   14dbc:	ldr	r0, [fp, #-12]
   14dc0:	bl	12afc <__assert_fail@plt+0x1b88>
   14dc4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14dc8:	bl	15e08 <__assert_fail@plt+0x4e94>
   14dcc:	mov	r3, r0
   14dd0:	str	r3, [fp, #-12]
   14dd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14dd8:	lsl	r3, r3, #3
   14ddc:	ldr	r2, [fp, #-8]
   14de0:	add	r3, r2, r3
   14de4:	ldr	r2, [fp, #-12]
   14de8:	str	r2, [r3, #4]
   14dec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14df0:	ldr	r3, [r3]
   14df4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14df8:	add	r2, r2, #8
   14dfc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14e00:	ldr	r1, [r1, #40]	; 0x28
   14e04:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14e08:	ldr	r0, [r0, #44]	; 0x2c
   14e0c:	str	r0, [sp, #16]
   14e10:	str	r1, [sp, #12]
   14e14:	str	r2, [sp, #8]
   14e18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14e1c:	str	r2, [sp, #4]
   14e20:	str	r3, [sp]
   14e24:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14e28:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14e2c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14e30:	ldr	r0, [fp, #-12]
   14e34:	bl	13110 <__assert_fail@plt+0x219c>
   14e38:	bl	10e90 <__errno_location@plt>
   14e3c:	mov	r2, r0
   14e40:	ldr	r3, [fp, #-16]
   14e44:	str	r3, [r2]
   14e48:	ldr	r3, [fp, #-12]
   14e4c:	mov	r0, r3
   14e50:	sub	sp, fp, #4
   14e54:	ldr	fp, [sp]
   14e58:	add	sp, sp, #4
   14e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e60:	str	fp, [sp, #-8]!
   14e64:	str	lr, [sp, #4]
   14e68:	add	fp, sp, #4
   14e6c:	sub	sp, sp, #8
   14e70:	str	r0, [fp, #-8]
   14e74:	str	r1, [fp, #-12]
   14e78:	movw	r3, #41364	; 0xa194
   14e7c:	movt	r3, #2
   14e80:	mvn	r2, #0
   14e84:	ldr	r1, [fp, #-12]
   14e88:	ldr	r0, [fp, #-8]
   14e8c:	bl	14b70 <__assert_fail@plt+0x3bfc>
   14e90:	mov	r3, r0
   14e94:	mov	r0, r3
   14e98:	sub	sp, fp, #4
   14e9c:	ldr	fp, [sp]
   14ea0:	add	sp, sp, #4
   14ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea8:	str	fp, [sp, #-8]!
   14eac:	str	lr, [sp, #4]
   14eb0:	add	fp, sp, #4
   14eb4:	sub	sp, sp, #16
   14eb8:	str	r0, [fp, #-8]
   14ebc:	str	r1, [fp, #-12]
   14ec0:	str	r2, [fp, #-16]
   14ec4:	movw	r3, #41364	; 0xa194
   14ec8:	movt	r3, #2
   14ecc:	ldr	r2, [fp, #-16]
   14ed0:	ldr	r1, [fp, #-12]
   14ed4:	ldr	r0, [fp, #-8]
   14ed8:	bl	14b70 <__assert_fail@plt+0x3bfc>
   14edc:	mov	r3, r0
   14ee0:	mov	r0, r3
   14ee4:	sub	sp, fp, #4
   14ee8:	ldr	fp, [sp]
   14eec:	add	sp, sp, #4
   14ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef4:	str	fp, [sp, #-8]!
   14ef8:	str	lr, [sp, #4]
   14efc:	add	fp, sp, #4
   14f00:	sub	sp, sp, #8
   14f04:	str	r0, [fp, #-8]
   14f08:	ldr	r1, [fp, #-8]
   14f0c:	mov	r0, #0
   14f10:	bl	14e60 <__assert_fail@plt+0x3eec>
   14f14:	mov	r3, r0
   14f18:	mov	r0, r3
   14f1c:	sub	sp, fp, #4
   14f20:	ldr	fp, [sp]
   14f24:	add	sp, sp, #4
   14f28:	pop	{pc}		; (ldr pc, [sp], #4)
   14f2c:	str	fp, [sp, #-8]!
   14f30:	str	lr, [sp, #4]
   14f34:	add	fp, sp, #4
   14f38:	sub	sp, sp, #8
   14f3c:	str	r0, [fp, #-8]
   14f40:	str	r1, [fp, #-12]
   14f44:	ldr	r2, [fp, #-12]
   14f48:	ldr	r1, [fp, #-8]
   14f4c:	mov	r0, #0
   14f50:	bl	14ea8 <__assert_fail@plt+0x3f34>
   14f54:	mov	r3, r0
   14f58:	mov	r0, r3
   14f5c:	sub	sp, fp, #4
   14f60:	ldr	fp, [sp]
   14f64:	add	sp, sp, #4
   14f68:	pop	{pc}		; (ldr pc, [sp], #4)
   14f6c:	str	fp, [sp, #-8]!
   14f70:	str	lr, [sp, #4]
   14f74:	add	fp, sp, #4
   14f78:	sub	sp, sp, #64	; 0x40
   14f7c:	str	r0, [fp, #-56]	; 0xffffffc8
   14f80:	str	r1, [fp, #-60]	; 0xffffffc4
   14f84:	str	r2, [fp, #-64]	; 0xffffffc0
   14f88:	sub	r3, fp, #52	; 0x34
   14f8c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14f90:	mov	r0, r3
   14f94:	bl	12f6c <__assert_fail@plt+0x1ff8>
   14f98:	sub	r3, fp, #52	; 0x34
   14f9c:	mvn	r2, #0
   14fa0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14fa4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14fa8:	bl	14b70 <__assert_fail@plt+0x3bfc>
   14fac:	mov	r3, r0
   14fb0:	mov	r0, r3
   14fb4:	sub	sp, fp, #4
   14fb8:	ldr	fp, [sp]
   14fbc:	add	sp, sp, #4
   14fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc4:	str	fp, [sp, #-8]!
   14fc8:	str	lr, [sp, #4]
   14fcc:	add	fp, sp, #4
   14fd0:	sub	sp, sp, #64	; 0x40
   14fd4:	str	r0, [fp, #-56]	; 0xffffffc8
   14fd8:	str	r1, [fp, #-60]	; 0xffffffc4
   14fdc:	str	r2, [fp, #-64]	; 0xffffffc0
   14fe0:	str	r3, [fp, #-68]	; 0xffffffbc
   14fe4:	sub	r3, fp, #52	; 0x34
   14fe8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14fec:	mov	r0, r3
   14ff0:	bl	12f6c <__assert_fail@plt+0x1ff8>
   14ff4:	sub	r3, fp, #52	; 0x34
   14ff8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14ffc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15000:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15004:	bl	14b70 <__assert_fail@plt+0x3bfc>
   15008:	mov	r3, r0
   1500c:	mov	r0, r3
   15010:	sub	sp, fp, #4
   15014:	ldr	fp, [sp]
   15018:	add	sp, sp, #4
   1501c:	pop	{pc}		; (ldr pc, [sp], #4)
   15020:	str	fp, [sp, #-8]!
   15024:	str	lr, [sp, #4]
   15028:	add	fp, sp, #4
   1502c:	sub	sp, sp, #8
   15030:	str	r0, [fp, #-8]
   15034:	str	r1, [fp, #-12]
   15038:	ldr	r2, [fp, #-12]
   1503c:	ldr	r1, [fp, #-8]
   15040:	mov	r0, #0
   15044:	bl	14f6c <__assert_fail@plt+0x3ff8>
   15048:	mov	r3, r0
   1504c:	mov	r0, r3
   15050:	sub	sp, fp, #4
   15054:	ldr	fp, [sp]
   15058:	add	sp, sp, #4
   1505c:	pop	{pc}		; (ldr pc, [sp], #4)
   15060:	str	fp, [sp, #-8]!
   15064:	str	lr, [sp, #4]
   15068:	add	fp, sp, #4
   1506c:	sub	sp, sp, #16
   15070:	str	r0, [fp, #-8]
   15074:	str	r1, [fp, #-12]
   15078:	str	r2, [fp, #-16]
   1507c:	ldr	r3, [fp, #-16]
   15080:	ldr	r2, [fp, #-12]
   15084:	ldr	r1, [fp, #-8]
   15088:	mov	r0, #0
   1508c:	bl	14fc4 <__assert_fail@plt+0x4050>
   15090:	mov	r3, r0
   15094:	mov	r0, r3
   15098:	sub	sp, fp, #4
   1509c:	ldr	fp, [sp]
   150a0:	add	sp, sp, #4
   150a4:	pop	{pc}		; (ldr pc, [sp], #4)
   150a8:	str	fp, [sp, #-8]!
   150ac:	str	lr, [sp, #4]
   150b0:	add	fp, sp, #4
   150b4:	sub	sp, sp, #64	; 0x40
   150b8:	str	r0, [fp, #-56]	; 0xffffffc8
   150bc:	str	r1, [fp, #-60]	; 0xffffffc4
   150c0:	mov	r3, r2
   150c4:	strb	r3, [fp, #-61]	; 0xffffffc3
   150c8:	movw	r2, #41364	; 0xa194
   150cc:	movt	r2, #2
   150d0:	sub	r3, fp, #52	; 0x34
   150d4:	ldrd	r0, [r2]
   150d8:	strd	r0, [r3]
   150dc:	ldrd	r0, [r2, #8]
   150e0:	strd	r0, [r3, #8]
   150e4:	ldrd	r0, [r2, #16]
   150e8:	strd	r0, [r3, #16]
   150ec:	ldrd	r0, [r2, #24]
   150f0:	strd	r0, [r3, #24]
   150f4:	ldrd	r0, [r2, #32]
   150f8:	strd	r0, [r3, #32]
   150fc:	ldrd	r0, [r2, #40]	; 0x28
   15100:	strd	r0, [r3, #40]	; 0x28
   15104:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   15108:	sub	r3, fp, #52	; 0x34
   1510c:	mov	r2, #1
   15110:	mov	r0, r3
   15114:	bl	12dcc <__assert_fail@plt+0x1e58>
   15118:	sub	r3, fp, #52	; 0x34
   1511c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   15120:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15124:	mov	r0, #0
   15128:	bl	14b70 <__assert_fail@plt+0x3bfc>
   1512c:	mov	r3, r0
   15130:	mov	r0, r3
   15134:	sub	sp, fp, #4
   15138:	ldr	fp, [sp]
   1513c:	add	sp, sp, #4
   15140:	pop	{pc}		; (ldr pc, [sp], #4)
   15144:	str	fp, [sp, #-8]!
   15148:	str	lr, [sp, #4]
   1514c:	add	fp, sp, #4
   15150:	sub	sp, sp, #8
   15154:	str	r0, [fp, #-8]
   15158:	mov	r3, r1
   1515c:	strb	r3, [fp, #-9]
   15160:	ldrb	r3, [fp, #-9]
   15164:	mov	r2, r3
   15168:	mvn	r1, #0
   1516c:	ldr	r0, [fp, #-8]
   15170:	bl	150a8 <__assert_fail@plt+0x4134>
   15174:	mov	r3, r0
   15178:	mov	r0, r3
   1517c:	sub	sp, fp, #4
   15180:	ldr	fp, [sp]
   15184:	add	sp, sp, #4
   15188:	pop	{pc}		; (ldr pc, [sp], #4)
   1518c:	str	fp, [sp, #-8]!
   15190:	str	lr, [sp, #4]
   15194:	add	fp, sp, #4
   15198:	sub	sp, sp, #8
   1519c:	str	r0, [fp, #-8]
   151a0:	mov	r1, #58	; 0x3a
   151a4:	ldr	r0, [fp, #-8]
   151a8:	bl	15144 <__assert_fail@plt+0x41d0>
   151ac:	mov	r3, r0
   151b0:	mov	r0, r3
   151b4:	sub	sp, fp, #4
   151b8:	ldr	fp, [sp]
   151bc:	add	sp, sp, #4
   151c0:	pop	{pc}		; (ldr pc, [sp], #4)
   151c4:	str	fp, [sp, #-8]!
   151c8:	str	lr, [sp, #4]
   151cc:	add	fp, sp, #4
   151d0:	sub	sp, sp, #8
   151d4:	str	r0, [fp, #-8]
   151d8:	str	r1, [fp, #-12]
   151dc:	mov	r2, #58	; 0x3a
   151e0:	ldr	r1, [fp, #-12]
   151e4:	ldr	r0, [fp, #-8]
   151e8:	bl	150a8 <__assert_fail@plt+0x4134>
   151ec:	mov	r3, r0
   151f0:	mov	r0, r3
   151f4:	sub	sp, fp, #4
   151f8:	ldr	fp, [sp]
   151fc:	add	sp, sp, #4
   15200:	pop	{pc}		; (ldr pc, [sp], #4)
   15204:	str	fp, [sp, #-8]!
   15208:	str	lr, [sp, #4]
   1520c:	add	fp, sp, #4
   15210:	sub	sp, sp, #112	; 0x70
   15214:	str	r0, [fp, #-56]	; 0xffffffc8
   15218:	str	r1, [fp, #-60]	; 0xffffffc4
   1521c:	str	r2, [fp, #-64]	; 0xffffffc0
   15220:	sub	r3, fp, #116	; 0x74
   15224:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15228:	mov	r0, r3
   1522c:	bl	12f6c <__assert_fail@plt+0x1ff8>
   15230:	sub	r3, fp, #52	; 0x34
   15234:	sub	r2, fp, #116	; 0x74
   15238:	ldrd	r0, [r2]
   1523c:	strd	r0, [r3]
   15240:	ldrd	r0, [r2, #8]
   15244:	strd	r0, [r3, #8]
   15248:	ldrd	r0, [r2, #16]
   1524c:	strd	r0, [r3, #16]
   15250:	ldrd	r0, [r2, #24]
   15254:	strd	r0, [r3, #24]
   15258:	ldrd	r0, [r2, #32]
   1525c:	strd	r0, [r3, #32]
   15260:	ldrd	r0, [r2, #40]	; 0x28
   15264:	strd	r0, [r3, #40]	; 0x28
   15268:	sub	r3, fp, #52	; 0x34
   1526c:	mov	r2, #1
   15270:	mov	r1, #58	; 0x3a
   15274:	mov	r0, r3
   15278:	bl	12dcc <__assert_fail@plt+0x1e58>
   1527c:	sub	r3, fp, #52	; 0x34
   15280:	mvn	r2, #0
   15284:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15288:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1528c:	bl	14b70 <__assert_fail@plt+0x3bfc>
   15290:	mov	r3, r0
   15294:	mov	r0, r3
   15298:	sub	sp, fp, #4
   1529c:	ldr	fp, [sp]
   152a0:	add	sp, sp, #4
   152a4:	pop	{pc}		; (ldr pc, [sp], #4)
   152a8:	str	fp, [sp, #-8]!
   152ac:	str	lr, [sp, #4]
   152b0:	add	fp, sp, #4
   152b4:	sub	sp, sp, #24
   152b8:	str	r0, [fp, #-8]
   152bc:	str	r1, [fp, #-12]
   152c0:	str	r2, [fp, #-16]
   152c4:	str	r3, [fp, #-20]	; 0xffffffec
   152c8:	mvn	r3, #0
   152cc:	str	r3, [sp]
   152d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152d4:	ldr	r2, [fp, #-16]
   152d8:	ldr	r1, [fp, #-12]
   152dc:	ldr	r0, [fp, #-8]
   152e0:	bl	152fc <__assert_fail@plt+0x4388>
   152e4:	mov	r3, r0
   152e8:	mov	r0, r3
   152ec:	sub	sp, fp, #4
   152f0:	ldr	fp, [sp]
   152f4:	add	sp, sp, #4
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	str	fp, [sp, #-8]!
   15300:	str	lr, [sp, #4]
   15304:	add	fp, sp, #4
   15308:	sub	sp, sp, #64	; 0x40
   1530c:	str	r0, [fp, #-56]	; 0xffffffc8
   15310:	str	r1, [fp, #-60]	; 0xffffffc4
   15314:	str	r2, [fp, #-64]	; 0xffffffc0
   15318:	str	r3, [fp, #-68]	; 0xffffffbc
   1531c:	movw	r2, #41364	; 0xa194
   15320:	movt	r2, #2
   15324:	sub	r3, fp, #52	; 0x34
   15328:	ldrd	r0, [r2]
   1532c:	strd	r0, [r3]
   15330:	ldrd	r0, [r2, #8]
   15334:	strd	r0, [r3, #8]
   15338:	ldrd	r0, [r2, #16]
   1533c:	strd	r0, [r3, #16]
   15340:	ldrd	r0, [r2, #24]
   15344:	strd	r0, [r3, #24]
   15348:	ldrd	r0, [r2, #32]
   1534c:	strd	r0, [r3, #32]
   15350:	ldrd	r0, [r2, #40]	; 0x28
   15354:	strd	r0, [r3, #40]	; 0x28
   15358:	sub	r3, fp, #52	; 0x34
   1535c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15360:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15364:	mov	r0, r3
   15368:	bl	12ee4 <__assert_fail@plt+0x1f70>
   1536c:	sub	r3, fp, #52	; 0x34
   15370:	ldr	r2, [fp, #4]
   15374:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15378:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1537c:	bl	14b70 <__assert_fail@plt+0x3bfc>
   15380:	mov	r3, r0
   15384:	mov	r0, r3
   15388:	sub	sp, fp, #4
   1538c:	ldr	fp, [sp]
   15390:	add	sp, sp, #4
   15394:	pop	{pc}		; (ldr pc, [sp], #4)
   15398:	str	fp, [sp, #-8]!
   1539c:	str	lr, [sp, #4]
   153a0:	add	fp, sp, #4
   153a4:	sub	sp, sp, #16
   153a8:	str	r0, [fp, #-8]
   153ac:	str	r1, [fp, #-12]
   153b0:	str	r2, [fp, #-16]
   153b4:	ldr	r3, [fp, #-16]
   153b8:	ldr	r2, [fp, #-12]
   153bc:	ldr	r1, [fp, #-8]
   153c0:	mov	r0, #0
   153c4:	bl	152a8 <__assert_fail@plt+0x4334>
   153c8:	mov	r3, r0
   153cc:	mov	r0, r3
   153d0:	sub	sp, fp, #4
   153d4:	ldr	fp, [sp]
   153d8:	add	sp, sp, #4
   153dc:	pop	{pc}		; (ldr pc, [sp], #4)
   153e0:	str	fp, [sp, #-8]!
   153e4:	str	lr, [sp, #4]
   153e8:	add	fp, sp, #4
   153ec:	sub	sp, sp, #24
   153f0:	str	r0, [fp, #-8]
   153f4:	str	r1, [fp, #-12]
   153f8:	str	r2, [fp, #-16]
   153fc:	str	r3, [fp, #-20]	; 0xffffffec
   15400:	ldr	r3, [fp, #-20]	; 0xffffffec
   15404:	str	r3, [sp]
   15408:	ldr	r3, [fp, #-16]
   1540c:	ldr	r2, [fp, #-12]
   15410:	ldr	r1, [fp, #-8]
   15414:	mov	r0, #0
   15418:	bl	152fc <__assert_fail@plt+0x4388>
   1541c:	mov	r3, r0
   15420:	mov	r0, r3
   15424:	sub	sp, fp, #4
   15428:	ldr	fp, [sp]
   1542c:	add	sp, sp, #4
   15430:	pop	{pc}		; (ldr pc, [sp], #4)
   15434:	str	fp, [sp, #-8]!
   15438:	str	lr, [sp, #4]
   1543c:	add	fp, sp, #4
   15440:	sub	sp, sp, #16
   15444:	str	r0, [fp, #-8]
   15448:	str	r1, [fp, #-12]
   1544c:	str	r2, [fp, #-16]
   15450:	movw	r3, #41232	; 0xa110
   15454:	movt	r3, #2
   15458:	ldr	r2, [fp, #-16]
   1545c:	ldr	r1, [fp, #-12]
   15460:	ldr	r0, [fp, #-8]
   15464:	bl	14b70 <__assert_fail@plt+0x3bfc>
   15468:	mov	r3, r0
   1546c:	mov	r0, r3
   15470:	sub	sp, fp, #4
   15474:	ldr	fp, [sp]
   15478:	add	sp, sp, #4
   1547c:	pop	{pc}		; (ldr pc, [sp], #4)
   15480:	str	fp, [sp, #-8]!
   15484:	str	lr, [sp, #4]
   15488:	add	fp, sp, #4
   1548c:	sub	sp, sp, #8
   15490:	str	r0, [fp, #-8]
   15494:	str	r1, [fp, #-12]
   15498:	ldr	r2, [fp, #-12]
   1549c:	ldr	r1, [fp, #-8]
   154a0:	mov	r0, #0
   154a4:	bl	15434 <__assert_fail@plt+0x44c0>
   154a8:	mov	r3, r0
   154ac:	mov	r0, r3
   154b0:	sub	sp, fp, #4
   154b4:	ldr	fp, [sp]
   154b8:	add	sp, sp, #4
   154bc:	pop	{pc}		; (ldr pc, [sp], #4)
   154c0:	str	fp, [sp, #-8]!
   154c4:	str	lr, [sp, #4]
   154c8:	add	fp, sp, #4
   154cc:	sub	sp, sp, #8
   154d0:	str	r0, [fp, #-8]
   154d4:	str	r1, [fp, #-12]
   154d8:	mvn	r2, #0
   154dc:	ldr	r1, [fp, #-12]
   154e0:	ldr	r0, [fp, #-8]
   154e4:	bl	15434 <__assert_fail@plt+0x44c0>
   154e8:	mov	r3, r0
   154ec:	mov	r0, r3
   154f0:	sub	sp, fp, #4
   154f4:	ldr	fp, [sp]
   154f8:	add	sp, sp, #4
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:	str	fp, [sp, #-8]!
   15504:	str	lr, [sp, #4]
   15508:	add	fp, sp, #4
   1550c:	sub	sp, sp, #8
   15510:	str	r0, [fp, #-8]
   15514:	ldr	r1, [fp, #-8]
   15518:	mov	r0, #0
   1551c:	bl	154c0 <__assert_fail@plt+0x454c>
   15520:	mov	r3, r0
   15524:	mov	r0, r3
   15528:	sub	sp, fp, #4
   1552c:	ldr	fp, [sp]
   15530:	add	sp, sp, #4
   15534:	pop	{pc}		; (ldr pc, [sp], #4)
   15538:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1553c:	strd	r6, [sp, #8]
   15540:	str	fp, [sp, #16]
   15544:	str	lr, [sp, #20]
   15548:	add	fp, sp, #20
   1554c:	sub	sp, sp, #48	; 0x30
   15550:	str	r0, [fp, #-24]	; 0xffffffe8
   15554:	str	r1, [fp, #-28]	; 0xffffffe4
   15558:	str	r2, [fp, #-32]	; 0xffffffe0
   1555c:	str	r3, [fp, #-36]	; 0xffffffdc
   15560:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15564:	cmp	r3, #0
   15568:	beq	15590 <__assert_fail@plt+0x461c>
   1556c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15570:	str	r3, [sp]
   15574:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15578:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1557c:	movw	r1, #35664	; 0x8b50
   15580:	movt	r1, #1
   15584:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15588:	bl	10e84 <fprintf@plt>
   1558c:	b	155a8 <__assert_fail@plt+0x4634>
   15590:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15594:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15598:	movw	r1, #35676	; 0x8b5c
   1559c:	movt	r1, #1
   155a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155a4:	bl	10e84 <fprintf@plt>
   155a8:	movw	r0, #35684	; 0x8b64
   155ac:	movt	r0, #1
   155b0:	bl	10e60 <gettext@plt>
   155b4:	mov	r2, r0
   155b8:	movw	r3, #2022	; 0x7e6
   155bc:	movw	r1, #36468	; 0x8e74
   155c0:	movt	r1, #1
   155c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155c8:	bl	10e84 <fprintf@plt>
   155cc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   155d0:	mov	r0, #10
   155d4:	bl	10d64 <fputc_unlocked@plt>
   155d8:	movw	r0, #35688	; 0x8b68
   155dc:	movt	r0, #1
   155e0:	bl	10e60 <gettext@plt>
   155e4:	mov	r3, r0
   155e8:	movw	r2, #35860	; 0x8c14
   155ec:	movt	r2, #1
   155f0:	mov	r1, r3
   155f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   155f8:	bl	10e84 <fprintf@plt>
   155fc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15600:	mov	r0, #10
   15604:	bl	10d64 <fputc_unlocked@plt>
   15608:	ldr	r3, [fp, #8]
   1560c:	cmp	r3, #9
   15610:	ldrls	pc, [pc, r3, lsl #2]
   15614:	b	159f4 <__assert_fail@plt+0x4a80>
   15618:	andeq	r5, r1, r0, lsr #21
   1561c:	andeq	r5, r1, r0, asr #12
   15620:	andeq	r5, r1, r8, ror #12
   15624:	muleq	r1, r8, r6
   15628:	ldrdeq	r5, [r1], -ip
   1562c:	andeq	r5, r1, r8, lsr r7
   15630:	andeq	r5, r1, r4, lsr #15
   15634:	andeq	r5, r1, r0, lsr #16
   15638:	andeq	r5, r1, ip, lsr #17
   1563c:	andeq	r5, r1, r8, asr #18
   15640:	movw	r0, #35896	; 0x8c38
   15644:	movt	r0, #1
   15648:	bl	10e60 <gettext@plt>
   1564c:	mov	r1, r0
   15650:	ldr	r3, [fp, #4]
   15654:	ldr	r3, [r3]
   15658:	mov	r2, r3
   1565c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15660:	bl	10e84 <fprintf@plt>
   15664:	b	15aa4 <__assert_fail@plt+0x4b30>
   15668:	movw	r0, #35912	; 0x8c48
   1566c:	movt	r0, #1
   15670:	bl	10e60 <gettext@plt>
   15674:	mov	r1, r0
   15678:	ldr	r3, [fp, #4]
   1567c:	ldr	r2, [r3]
   15680:	ldr	r3, [fp, #4]
   15684:	add	r3, r3, #4
   15688:	ldr	r3, [r3]
   1568c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15690:	bl	10e84 <fprintf@plt>
   15694:	b	15aa4 <__assert_fail@plt+0x4b30>
   15698:	movw	r0, #35936	; 0x8c60
   1569c:	movt	r0, #1
   156a0:	bl	10e60 <gettext@plt>
   156a4:	ldr	r3, [fp, #4]
   156a8:	ldr	r2, [r3]
   156ac:	ldr	r3, [fp, #4]
   156b0:	add	r3, r3, #4
   156b4:	ldr	r1, [r3]
   156b8:	ldr	r3, [fp, #4]
   156bc:	add	r3, r3, #8
   156c0:	ldr	r3, [r3]
   156c4:	str	r3, [sp]
   156c8:	mov	r3, r1
   156cc:	mov	r1, r0
   156d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   156d4:	bl	10e84 <fprintf@plt>
   156d8:	b	15aa4 <__assert_fail@plt+0x4b30>
   156dc:	movw	r0, #35964	; 0x8c7c
   156e0:	movt	r0, #1
   156e4:	bl	10e60 <gettext@plt>
   156e8:	mov	ip, r0
   156ec:	ldr	r3, [fp, #4]
   156f0:	ldr	r1, [r3]
   156f4:	ldr	r3, [fp, #4]
   156f8:	add	r3, r3, #4
   156fc:	ldr	r0, [r3]
   15700:	ldr	r3, [fp, #4]
   15704:	add	r3, r3, #8
   15708:	ldr	r3, [r3]
   1570c:	ldr	r2, [fp, #4]
   15710:	add	r2, r2, #12
   15714:	ldr	r2, [r2]
   15718:	str	r2, [sp, #4]
   1571c:	str	r3, [sp]
   15720:	mov	r3, r0
   15724:	mov	r2, r1
   15728:	mov	r1, ip
   1572c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15730:	bl	10e84 <fprintf@plt>
   15734:	b	15aa4 <__assert_fail@plt+0x4b30>
   15738:	movw	r0, #35996	; 0x8c9c
   1573c:	movt	r0, #1
   15740:	bl	10e60 <gettext@plt>
   15744:	mov	lr, r0
   15748:	ldr	r3, [fp, #4]
   1574c:	ldr	r0, [r3]
   15750:	ldr	r3, [fp, #4]
   15754:	add	r3, r3, #4
   15758:	ldr	ip, [r3]
   1575c:	ldr	r3, [fp, #4]
   15760:	add	r3, r3, #8
   15764:	ldr	r3, [r3]
   15768:	ldr	r2, [fp, #4]
   1576c:	add	r2, r2, #12
   15770:	ldr	r2, [r2]
   15774:	ldr	r1, [fp, #4]
   15778:	add	r1, r1, #16
   1577c:	ldr	r1, [r1]
   15780:	str	r1, [sp, #8]
   15784:	str	r2, [sp, #4]
   15788:	str	r3, [sp]
   1578c:	mov	r3, ip
   15790:	mov	r2, r0
   15794:	mov	r1, lr
   15798:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1579c:	bl	10e84 <fprintf@plt>
   157a0:	b	15aa4 <__assert_fail@plt+0x4b30>
   157a4:	movw	r0, #36032	; 0x8cc0
   157a8:	movt	r0, #1
   157ac:	bl	10e60 <gettext@plt>
   157b0:	mov	r4, r0
   157b4:	ldr	r3, [fp, #4]
   157b8:	ldr	ip, [r3]
   157bc:	ldr	r3, [fp, #4]
   157c0:	add	r3, r3, #4
   157c4:	ldr	lr, [r3]
   157c8:	ldr	r3, [fp, #4]
   157cc:	add	r3, r3, #8
   157d0:	ldr	r3, [r3]
   157d4:	ldr	r2, [fp, #4]
   157d8:	add	r2, r2, #12
   157dc:	ldr	r2, [r2]
   157e0:	ldr	r1, [fp, #4]
   157e4:	add	r1, r1, #16
   157e8:	ldr	r1, [r1]
   157ec:	ldr	r0, [fp, #4]
   157f0:	add	r0, r0, #20
   157f4:	ldr	r0, [r0]
   157f8:	str	r0, [sp, #12]
   157fc:	str	r1, [sp, #8]
   15800:	str	r2, [sp, #4]
   15804:	str	r3, [sp]
   15808:	mov	r3, lr
   1580c:	mov	r2, ip
   15810:	mov	r1, r4
   15814:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15818:	bl	10e84 <fprintf@plt>
   1581c:	b	15aa4 <__assert_fail@plt+0x4b30>
   15820:	movw	r0, #36072	; 0x8ce8
   15824:	movt	r0, #1
   15828:	bl	10e60 <gettext@plt>
   1582c:	mov	r5, r0
   15830:	ldr	r3, [fp, #4]
   15834:	ldr	lr, [r3]
   15838:	ldr	r3, [fp, #4]
   1583c:	add	r3, r3, #4
   15840:	ldr	r4, [r3]
   15844:	ldr	r3, [fp, #4]
   15848:	add	r3, r3, #8
   1584c:	ldr	r3, [r3]
   15850:	ldr	r2, [fp, #4]
   15854:	add	r2, r2, #12
   15858:	ldr	r2, [r2]
   1585c:	ldr	r1, [fp, #4]
   15860:	add	r1, r1, #16
   15864:	ldr	r1, [r1]
   15868:	ldr	r0, [fp, #4]
   1586c:	add	r0, r0, #20
   15870:	ldr	r0, [r0]
   15874:	ldr	ip, [fp, #4]
   15878:	add	ip, ip, #24
   1587c:	ldr	ip, [ip]
   15880:	str	ip, [sp, #16]
   15884:	str	r0, [sp, #12]
   15888:	str	r1, [sp, #8]
   1588c:	str	r2, [sp, #4]
   15890:	str	r3, [sp]
   15894:	mov	r3, r4
   15898:	mov	r2, lr
   1589c:	mov	r1, r5
   158a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   158a4:	bl	10e84 <fprintf@plt>
   158a8:	b	15aa4 <__assert_fail@plt+0x4b30>
   158ac:	movw	r0, #36116	; 0x8d14
   158b0:	movt	r0, #1
   158b4:	bl	10e60 <gettext@plt>
   158b8:	mov	r6, r0
   158bc:	ldr	r3, [fp, #4]
   158c0:	ldr	r4, [r3]
   158c4:	ldr	r3, [fp, #4]
   158c8:	add	r3, r3, #4
   158cc:	ldr	r5, [r3]
   158d0:	ldr	r3, [fp, #4]
   158d4:	add	r3, r3, #8
   158d8:	ldr	r3, [r3]
   158dc:	ldr	r2, [fp, #4]
   158e0:	add	r2, r2, #12
   158e4:	ldr	r2, [r2]
   158e8:	ldr	r1, [fp, #4]
   158ec:	add	r1, r1, #16
   158f0:	ldr	r1, [r1]
   158f4:	ldr	r0, [fp, #4]
   158f8:	add	r0, r0, #20
   158fc:	ldr	r0, [r0]
   15900:	ldr	ip, [fp, #4]
   15904:	add	ip, ip, #24
   15908:	ldr	ip, [ip]
   1590c:	ldr	lr, [fp, #4]
   15910:	add	lr, lr, #28
   15914:	ldr	lr, [lr]
   15918:	str	lr, [sp, #20]
   1591c:	str	ip, [sp, #16]
   15920:	str	r0, [sp, #12]
   15924:	str	r1, [sp, #8]
   15928:	str	r2, [sp, #4]
   1592c:	str	r3, [sp]
   15930:	mov	r3, r5
   15934:	mov	r2, r4
   15938:	mov	r1, r6
   1593c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15940:	bl	10e84 <fprintf@plt>
   15944:	b	15aa4 <__assert_fail@plt+0x4b30>
   15948:	movw	r0, #36164	; 0x8d44
   1594c:	movt	r0, #1
   15950:	bl	10e60 <gettext@plt>
   15954:	mov	r7, r0
   15958:	ldr	r3, [fp, #4]
   1595c:	ldr	r5, [r3]
   15960:	ldr	r3, [fp, #4]
   15964:	add	r3, r3, #4
   15968:	ldr	r6, [r3]
   1596c:	ldr	r3, [fp, #4]
   15970:	add	r3, r3, #8
   15974:	ldr	r3, [r3]
   15978:	ldr	r2, [fp, #4]
   1597c:	add	r2, r2, #12
   15980:	ldr	r2, [r2]
   15984:	ldr	r1, [fp, #4]
   15988:	add	r1, r1, #16
   1598c:	ldr	r1, [r1]
   15990:	ldr	r0, [fp, #4]
   15994:	add	r0, r0, #20
   15998:	ldr	r0, [r0]
   1599c:	ldr	ip, [fp, #4]
   159a0:	add	ip, ip, #24
   159a4:	ldr	ip, [ip]
   159a8:	ldr	lr, [fp, #4]
   159ac:	add	lr, lr, #28
   159b0:	ldr	lr, [lr]
   159b4:	ldr	r4, [fp, #4]
   159b8:	add	r4, r4, #32
   159bc:	ldr	r4, [r4]
   159c0:	str	r4, [sp, #24]
   159c4:	str	lr, [sp, #20]
   159c8:	str	ip, [sp, #16]
   159cc:	str	r0, [sp, #12]
   159d0:	str	r1, [sp, #8]
   159d4:	str	r2, [sp, #4]
   159d8:	str	r3, [sp]
   159dc:	mov	r3, r6
   159e0:	mov	r2, r5
   159e4:	mov	r1, r7
   159e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   159ec:	bl	10e84 <fprintf@plt>
   159f0:	b	15aa4 <__assert_fail@plt+0x4b30>
   159f4:	movw	r0, #36216	; 0x8d78
   159f8:	movt	r0, #1
   159fc:	bl	10e60 <gettext@plt>
   15a00:	mov	r7, r0
   15a04:	ldr	r3, [fp, #4]
   15a08:	ldr	r5, [r3]
   15a0c:	ldr	r3, [fp, #4]
   15a10:	add	r3, r3, #4
   15a14:	ldr	r6, [r3]
   15a18:	ldr	r3, [fp, #4]
   15a1c:	add	r3, r3, #8
   15a20:	ldr	r3, [r3]
   15a24:	ldr	r2, [fp, #4]
   15a28:	add	r2, r2, #12
   15a2c:	ldr	r2, [r2]
   15a30:	ldr	r1, [fp, #4]
   15a34:	add	r1, r1, #16
   15a38:	ldr	r1, [r1]
   15a3c:	ldr	r0, [fp, #4]
   15a40:	add	r0, r0, #20
   15a44:	ldr	r0, [r0]
   15a48:	ldr	ip, [fp, #4]
   15a4c:	add	ip, ip, #24
   15a50:	ldr	ip, [ip]
   15a54:	ldr	lr, [fp, #4]
   15a58:	add	lr, lr, #28
   15a5c:	ldr	lr, [lr]
   15a60:	ldr	r4, [fp, #4]
   15a64:	add	r4, r4, #32
   15a68:	ldr	r4, [r4]
   15a6c:	str	r4, [sp, #24]
   15a70:	str	lr, [sp, #20]
   15a74:	str	ip, [sp, #16]
   15a78:	str	r0, [sp, #12]
   15a7c:	str	r1, [sp, #8]
   15a80:	str	r2, [sp, #4]
   15a84:	str	r3, [sp]
   15a88:	mov	r3, r6
   15a8c:	mov	r2, r5
   15a90:	mov	r1, r7
   15a94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15a98:	bl	10e84 <fprintf@plt>
   15a9c:	b	15aa4 <__assert_fail@plt+0x4b30>
   15aa0:	nop	{0}
   15aa4:	nop	{0}
   15aa8:	sub	sp, fp, #20
   15aac:	ldrd	r4, [sp]
   15ab0:	ldrd	r6, [sp, #8]
   15ab4:	ldr	fp, [sp, #16]
   15ab8:	add	sp, sp, #20
   15abc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac0:	str	fp, [sp, #-8]!
   15ac4:	str	lr, [sp, #4]
   15ac8:	add	fp, sp, #4
   15acc:	sub	sp, sp, #32
   15ad0:	str	r0, [fp, #-16]
   15ad4:	str	r1, [fp, #-20]	; 0xffffffec
   15ad8:	str	r2, [fp, #-24]	; 0xffffffe8
   15adc:	str	r3, [fp, #-28]	; 0xffffffe4
   15ae0:	mov	r3, #0
   15ae4:	str	r3, [fp, #-8]
   15ae8:	b	15af8 <__assert_fail@plt+0x4b84>
   15aec:	ldr	r3, [fp, #-8]
   15af0:	add	r3, r3, #1
   15af4:	str	r3, [fp, #-8]
   15af8:	ldr	r3, [fp, #-8]
   15afc:	lsl	r3, r3, #2
   15b00:	ldr	r2, [fp, #4]
   15b04:	add	r3, r2, r3
   15b08:	ldr	r3, [r3]
   15b0c:	cmp	r3, #0
   15b10:	bne	15aec <__assert_fail@plt+0x4b78>
   15b14:	ldr	r3, [fp, #-8]
   15b18:	str	r3, [sp, #4]
   15b1c:	ldr	r3, [fp, #4]
   15b20:	str	r3, [sp]
   15b24:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b28:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15b2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15b30:	ldr	r0, [fp, #-16]
   15b34:	bl	15538 <__assert_fail@plt+0x45c4>
   15b38:	nop	{0}
   15b3c:	sub	sp, fp, #4
   15b40:	ldr	fp, [sp]
   15b44:	add	sp, sp, #4
   15b48:	pop	{pc}		; (ldr pc, [sp], #4)
   15b4c:	str	fp, [sp, #-8]!
   15b50:	str	lr, [sp, #4]
   15b54:	add	fp, sp, #4
   15b58:	sub	sp, sp, #72	; 0x48
   15b5c:	str	r0, [fp, #-56]	; 0xffffffc8
   15b60:	str	r1, [fp, #-60]	; 0xffffffc4
   15b64:	str	r2, [fp, #-64]	; 0xffffffc0
   15b68:	str	r3, [fp, #-68]	; 0xffffffbc
   15b6c:	mov	r3, #0
   15b70:	str	r3, [fp, #-8]
   15b74:	b	15b84 <__assert_fail@plt+0x4c10>
   15b78:	ldr	r3, [fp, #-8]
   15b7c:	add	r3, r3, #1
   15b80:	str	r3, [fp, #-8]
   15b84:	ldr	r3, [fp, #-8]
   15b88:	cmp	r3, #9
   15b8c:	bhi	15bd0 <__assert_fail@plt+0x4c5c>
   15b90:	ldr	r3, [fp, #4]
   15b94:	add	r2, r3, #4
   15b98:	str	r2, [fp, #4]
   15b9c:	ldr	r2, [r3]
   15ba0:	ldr	r3, [fp, #-8]
   15ba4:	lsl	r3, r3, #2
   15ba8:	sub	r1, fp, #4
   15bac:	add	r3, r1, r3
   15bb0:	str	r2, [r3, #-44]	; 0xffffffd4
   15bb4:	ldr	r3, [fp, #-8]
   15bb8:	lsl	r3, r3, #2
   15bbc:	sub	r2, fp, #4
   15bc0:	add	r3, r2, r3
   15bc4:	ldr	r3, [r3, #-44]	; 0xffffffd4
   15bc8:	cmp	r3, #0
   15bcc:	bne	15b78 <__assert_fail@plt+0x4c04>
   15bd0:	ldr	r3, [fp, #-8]
   15bd4:	str	r3, [sp, #4]
   15bd8:	sub	r3, fp, #48	; 0x30
   15bdc:	str	r3, [sp]
   15be0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15be4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15be8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15bec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15bf0:	bl	15538 <__assert_fail@plt+0x45c4>
   15bf4:	nop	{0}
   15bf8:	sub	sp, fp, #4
   15bfc:	ldr	fp, [sp]
   15c00:	add	sp, sp, #4
   15c04:	pop	{pc}		; (ldr pc, [sp], #4)
   15c08:	push	{r3}		; (str r3, [sp, #-4]!)
   15c0c:	str	fp, [sp, #-8]!
   15c10:	str	lr, [sp, #4]
   15c14:	add	fp, sp, #4
   15c18:	sub	sp, sp, #36	; 0x24
   15c1c:	str	r0, [fp, #-20]	; 0xffffffec
   15c20:	str	r1, [fp, #-24]	; 0xffffffe8
   15c24:	str	r2, [fp, #-28]	; 0xffffffe4
   15c28:	add	r3, fp, #8
   15c2c:	str	r3, [fp, #-12]
   15c30:	ldr	r3, [fp, #-12]
   15c34:	str	r3, [sp]
   15c38:	ldr	r3, [fp, #4]
   15c3c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15c40:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15c44:	ldr	r0, [fp, #-20]	; 0xffffffec
   15c48:	bl	15b4c <__assert_fail@plt+0x4bd8>
   15c4c:	nop	{0}
   15c50:	sub	sp, fp, #4
   15c54:	ldr	fp, [sp]
   15c58:	ldr	lr, [sp, #4]
   15c5c:	add	sp, sp, #8
   15c60:	add	sp, sp, #4
   15c64:	bx	lr
   15c68:	str	fp, [sp, #-8]!
   15c6c:	str	lr, [sp, #4]
   15c70:	add	fp, sp, #4
   15c74:	movw	r3, #41300	; 0xa154
   15c78:	movt	r3, #2
   15c7c:	ldr	r3, [r3]
   15c80:	mov	r1, r3
   15c84:	mov	r0, #10
   15c88:	bl	10d64 <fputc_unlocked@plt>
   15c8c:	movw	r0, #36276	; 0x8db4
   15c90:	movt	r0, #1
   15c94:	bl	10e60 <gettext@plt>
   15c98:	mov	r3, r0
   15c9c:	movw	r1, #36296	; 0x8dc8
   15ca0:	movt	r1, #1
   15ca4:	mov	r0, r3
   15ca8:	bl	10d04 <printf@plt>
   15cac:	movw	r0, #36320	; 0x8de0
   15cb0:	movt	r0, #1
   15cb4:	bl	10e60 <gettext@plt>
   15cb8:	mov	r3, r0
   15cbc:	movw	r2, #36340	; 0x8df4
   15cc0:	movt	r2, #1
   15cc4:	movw	r1, #36380	; 0x8e1c
   15cc8:	movt	r1, #1
   15ccc:	mov	r0, r3
   15cd0:	bl	10d04 <printf@plt>
   15cd4:	movw	r0, #36396	; 0x8e2c
   15cd8:	movt	r0, #1
   15cdc:	bl	10e60 <gettext@plt>
   15ce0:	mov	r3, r0
   15ce4:	movw	r1, #36436	; 0x8e54
   15ce8:	movt	r1, #1
   15cec:	mov	r0, r3
   15cf0:	bl	10d04 <printf@plt>
   15cf4:	nop	{0}
   15cf8:	sub	sp, fp, #4
   15cfc:	ldr	fp, [sp]
   15d00:	add	sp, sp, #4
   15d04:	pop	{pc}		; (ldr pc, [sp], #4)
   15d08:	str	fp, [sp, #-8]!
   15d0c:	str	lr, [sp, #4]
   15d10:	add	fp, sp, #4
   15d14:	sub	sp, sp, #16
   15d18:	str	r0, [fp, #-8]
   15d1c:	str	r1, [fp, #-12]
   15d20:	str	r2, [fp, #-16]
   15d24:	ldr	r2, [fp, #-16]
   15d28:	ldr	r1, [fp, #-12]
   15d2c:	ldr	r0, [fp, #-8]
   15d30:	bl	15eec <__assert_fail@plt+0x4f78>
   15d34:	mov	r3, r0
   15d38:	mov	r0, r3
   15d3c:	sub	sp, fp, #4
   15d40:	ldr	fp, [sp]
   15d44:	add	sp, sp, #4
   15d48:	pop	{pc}		; (ldr pc, [sp], #4)
   15d4c:	str	fp, [sp, #-8]!
   15d50:	str	lr, [sp, #4]
   15d54:	add	fp, sp, #4
   15d58:	sub	sp, sp, #8
   15d5c:	str	r0, [fp, #-8]
   15d60:	ldr	r3, [fp, #-8]
   15d64:	cmp	r3, #0
   15d68:	bne	15d70 <__assert_fail@plt+0x4dfc>
   15d6c:	bl	165fc <__assert_fail@plt+0x5688>
   15d70:	ldr	r3, [fp, #-8]
   15d74:	mov	r0, r3
   15d78:	sub	sp, fp, #4
   15d7c:	ldr	fp, [sp]
   15d80:	add	sp, sp, #4
   15d84:	pop	{pc}		; (ldr pc, [sp], #4)
   15d88:	str	fp, [sp, #-8]!
   15d8c:	str	lr, [sp, #4]
   15d90:	add	fp, sp, #4
   15d94:	sub	sp, sp, #8
   15d98:	str	r0, [fp, #-8]
   15d9c:	ldr	r0, [fp, #-8]
   15da0:	bl	1700c <__assert_fail@plt+0x6098>
   15da4:	mov	r3, r0
   15da8:	mov	r0, r3
   15dac:	bl	15d4c <__assert_fail@plt+0x4dd8>
   15db0:	mov	r3, r0
   15db4:	mov	r0, r3
   15db8:	sub	sp, fp, #4
   15dbc:	ldr	fp, [sp]
   15dc0:	add	sp, sp, #4
   15dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc8:	str	fp, [sp, #-8]!
   15dcc:	str	lr, [sp, #4]
   15dd0:	add	fp, sp, #4
   15dd4:	sub	sp, sp, #8
   15dd8:	str	r0, [fp, #-8]
   15ddc:	ldr	r0, [fp, #-8]
   15de0:	bl	17adc <__assert_fail@plt+0x6b68>
   15de4:	mov	r3, r0
   15de8:	mov	r0, r3
   15dec:	bl	15d4c <__assert_fail@plt+0x4dd8>
   15df0:	mov	r3, r0
   15df4:	mov	r0, r3
   15df8:	sub	sp, fp, #4
   15dfc:	ldr	fp, [sp]
   15e00:	add	sp, sp, #4
   15e04:	pop	{pc}		; (ldr pc, [sp], #4)
   15e08:	str	fp, [sp, #-8]!
   15e0c:	str	lr, [sp, #4]
   15e10:	add	fp, sp, #4
   15e14:	sub	sp, sp, #8
   15e18:	str	r0, [fp, #-8]
   15e1c:	ldr	r0, [fp, #-8]
   15e20:	bl	15d88 <__assert_fail@plt+0x4e14>
   15e24:	mov	r3, r0
   15e28:	mov	r0, r3
   15e2c:	sub	sp, fp, #4
   15e30:	ldr	fp, [sp]
   15e34:	add	sp, sp, #4
   15e38:	pop	{pc}		; (ldr pc, [sp], #4)
   15e3c:	str	fp, [sp, #-8]!
   15e40:	str	lr, [sp, #4]
   15e44:	add	fp, sp, #4
   15e48:	sub	sp, sp, #16
   15e4c:	str	r0, [fp, #-16]
   15e50:	str	r1, [fp, #-20]	; 0xffffffec
   15e54:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e58:	ldr	r0, [fp, #-16]
   15e5c:	bl	1709c <__assert_fail@plt+0x6128>
   15e60:	str	r0, [fp, #-8]
   15e64:	ldr	r3, [fp, #-8]
   15e68:	cmp	r3, #0
   15e6c:	bne	15e8c <__assert_fail@plt+0x4f18>
   15e70:	ldr	r3, [fp, #-16]
   15e74:	cmp	r3, #0
   15e78:	beq	15e88 <__assert_fail@plt+0x4f14>
   15e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e80:	cmp	r3, #0
   15e84:	beq	15e8c <__assert_fail@plt+0x4f18>
   15e88:	bl	165fc <__assert_fail@plt+0x5688>
   15e8c:	ldr	r3, [fp, #-8]
   15e90:	mov	r0, r3
   15e94:	sub	sp, fp, #4
   15e98:	ldr	fp, [sp]
   15e9c:	add	sp, sp, #4
   15ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea4:	str	fp, [sp, #-8]!
   15ea8:	str	lr, [sp, #4]
   15eac:	add	fp, sp, #4
   15eb0:	sub	sp, sp, #8
   15eb4:	str	r0, [fp, #-8]
   15eb8:	str	r1, [fp, #-12]
   15ebc:	ldr	r1, [fp, #-12]
   15ec0:	ldr	r0, [fp, #-8]
   15ec4:	bl	17b14 <__assert_fail@plt+0x6ba0>
   15ec8:	mov	r3, r0
   15ecc:	mov	r0, r3
   15ed0:	bl	15d4c <__assert_fail@plt+0x4dd8>
   15ed4:	mov	r3, r0
   15ed8:	mov	r0, r3
   15edc:	sub	sp, fp, #4
   15ee0:	ldr	fp, [sp]
   15ee4:	add	sp, sp, #4
   15ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   15eec:	str	fp, [sp, #-8]!
   15ef0:	str	lr, [sp, #4]
   15ef4:	add	fp, sp, #4
   15ef8:	sub	sp, sp, #24
   15efc:	str	r0, [fp, #-16]
   15f00:	str	r1, [fp, #-20]	; 0xffffffec
   15f04:	str	r2, [fp, #-24]	; 0xffffffe8
   15f08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15f0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15f10:	ldr	r0, [fp, #-16]
   15f14:	bl	17d44 <__assert_fail@plt+0x6dd0>
   15f18:	str	r0, [fp, #-8]
   15f1c:	ldr	r3, [fp, #-8]
   15f20:	cmp	r3, #0
   15f24:	bne	15f50 <__assert_fail@plt+0x4fdc>
   15f28:	ldr	r3, [fp, #-16]
   15f2c:	cmp	r3, #0
   15f30:	beq	15f4c <__assert_fail@plt+0x4fd8>
   15f34:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f38:	cmp	r3, #0
   15f3c:	beq	15f50 <__assert_fail@plt+0x4fdc>
   15f40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f44:	cmp	r3, #0
   15f48:	beq	15f50 <__assert_fail@plt+0x4fdc>
   15f4c:	bl	165fc <__assert_fail@plt+0x5688>
   15f50:	ldr	r3, [fp, #-8]
   15f54:	mov	r0, r3
   15f58:	sub	sp, fp, #4
   15f5c:	ldr	fp, [sp]
   15f60:	add	sp, sp, #4
   15f64:	pop	{pc}		; (ldr pc, [sp], #4)
   15f68:	str	fp, [sp, #-8]!
   15f6c:	str	lr, [sp, #4]
   15f70:	add	fp, sp, #4
   15f74:	sub	sp, sp, #16
   15f78:	str	r0, [fp, #-8]
   15f7c:	str	r1, [fp, #-12]
   15f80:	str	r2, [fp, #-16]
   15f84:	ldr	r2, [fp, #-16]
   15f88:	ldr	r1, [fp, #-12]
   15f8c:	ldr	r0, [fp, #-8]
   15f90:	bl	17bb4 <__assert_fail@plt+0x6c40>
   15f94:	mov	r3, r0
   15f98:	mov	r0, r3
   15f9c:	bl	15d4c <__assert_fail@plt+0x4dd8>
   15fa0:	mov	r3, r0
   15fa4:	mov	r0, r3
   15fa8:	sub	sp, fp, #4
   15fac:	ldr	fp, [sp]
   15fb0:	add	sp, sp, #4
   15fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb8:	str	fp, [sp, #-8]!
   15fbc:	str	lr, [sp, #4]
   15fc0:	add	fp, sp, #4
   15fc4:	sub	sp, sp, #8
   15fc8:	str	r0, [fp, #-8]
   15fcc:	str	r1, [fp, #-12]
   15fd0:	ldr	r2, [fp, #-12]
   15fd4:	ldr	r1, [fp, #-8]
   15fd8:	mov	r0, #0
   15fdc:	bl	15eec <__assert_fail@plt+0x4f78>
   15fe0:	mov	r3, r0
   15fe4:	mov	r0, r3
   15fe8:	sub	sp, fp, #4
   15fec:	ldr	fp, [sp]
   15ff0:	add	sp, sp, #4
   15ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff8:	str	fp, [sp, #-8]!
   15ffc:	str	lr, [sp, #4]
   16000:	add	fp, sp, #4
   16004:	sub	sp, sp, #8
   16008:	str	r0, [fp, #-8]
   1600c:	str	r1, [fp, #-12]
   16010:	ldr	r2, [fp, #-12]
   16014:	ldr	r1, [fp, #-8]
   16018:	mov	r0, #0
   1601c:	bl	15f68 <__assert_fail@plt+0x4ff4>
   16020:	mov	r3, r0
   16024:	mov	r0, r3
   16028:	sub	sp, fp, #4
   1602c:	ldr	fp, [sp]
   16030:	add	sp, sp, #4
   16034:	pop	{pc}		; (ldr pc, [sp], #4)
   16038:	str	fp, [sp, #-8]!
   1603c:	str	lr, [sp, #4]
   16040:	add	fp, sp, #4
   16044:	sub	sp, sp, #8
   16048:	str	r0, [fp, #-8]
   1604c:	str	r1, [fp, #-12]
   16050:	mov	r2, #1
   16054:	ldr	r1, [fp, #-12]
   16058:	ldr	r0, [fp, #-8]
   1605c:	bl	16078 <__assert_fail@plt+0x5104>
   16060:	mov	r3, r0
   16064:	mov	r0, r3
   16068:	sub	sp, fp, #4
   1606c:	ldr	fp, [sp]
   16070:	add	sp, sp, #4
   16074:	pop	{pc}		; (ldr pc, [sp], #4)
   16078:	str	fp, [sp, #-8]!
   1607c:	str	lr, [sp, #4]
   16080:	add	fp, sp, #4
   16084:	sub	sp, sp, #24
   16088:	str	r0, [fp, #-16]
   1608c:	str	r1, [fp, #-20]	; 0xffffffec
   16090:	str	r2, [fp, #-24]	; 0xffffffe8
   16094:	ldr	r3, [fp, #-20]	; 0xffffffec
   16098:	ldr	r3, [r3]
   1609c:	str	r3, [fp, #-8]
   160a0:	ldr	r3, [fp, #-16]
   160a4:	cmp	r3, #0
   160a8:	bne	160f0 <__assert_fail@plt+0x517c>
   160ac:	ldr	r3, [fp, #-8]
   160b0:	cmp	r3, #0
   160b4:	bne	1612c <__assert_fail@plt+0x51b8>
   160b8:	mov	r2, #64	; 0x40
   160bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   160c0:	udiv	r3, r2, r3
   160c4:	str	r3, [fp, #-8]
   160c8:	ldr	r3, [fp, #-8]
   160cc:	cmp	r3, #0
   160d0:	moveq	r3, #1
   160d4:	movne	r3, #0
   160d8:	uxtb	r3, r3
   160dc:	mov	r2, r3
   160e0:	ldr	r3, [fp, #-8]
   160e4:	add	r3, r2, r3
   160e8:	str	r3, [fp, #-8]
   160ec:	b	1612c <__assert_fail@plt+0x51b8>
   160f0:	ldr	r2, [fp, #-8]
   160f4:	ldr	r3, [fp, #-8]
   160f8:	lsr	r3, r3, #1
   160fc:	add	r3, r3, #1
   16100:	mov	r1, #0
   16104:	adds	r3, r2, r3
   16108:	bcc	16110 <__assert_fail@plt+0x519c>
   1610c:	mov	r1, #1
   16110:	str	r3, [fp, #-8]
   16114:	mov	r3, r1
   16118:	and	r3, r3, #1
   1611c:	uxtb	r3, r3
   16120:	cmp	r3, #0
   16124:	beq	1612c <__assert_fail@plt+0x51b8>
   16128:	bl	165fc <__assert_fail@plt+0x5688>
   1612c:	ldr	r3, [fp, #-8]
   16130:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16134:	mov	r1, r3
   16138:	ldr	r0, [fp, #-16]
   1613c:	bl	15eec <__assert_fail@plt+0x4f78>
   16140:	str	r0, [fp, #-16]
   16144:	ldr	r2, [fp, #-8]
   16148:	ldr	r3, [fp, #-20]	; 0xffffffec
   1614c:	str	r2, [r3]
   16150:	ldr	r3, [fp, #-16]
   16154:	mov	r0, r3
   16158:	sub	sp, fp, #4
   1615c:	ldr	fp, [sp]
   16160:	add	sp, sp, #4
   16164:	pop	{pc}		; (ldr pc, [sp], #4)
   16168:	str	fp, [sp, #-8]!
   1616c:	str	lr, [sp, #4]
   16170:	add	fp, sp, #4
   16174:	sub	sp, sp, #32
   16178:	str	r0, [fp, #-24]	; 0xffffffe8
   1617c:	str	r1, [fp, #-28]	; 0xffffffe4
   16180:	str	r2, [fp, #-32]	; 0xffffffe0
   16184:	str	r3, [fp, #-36]	; 0xffffffdc
   16188:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1618c:	ldr	r3, [r3]
   16190:	str	r3, [fp, #-8]
   16194:	ldr	r3, [fp, #-8]
   16198:	asr	r3, r3, #1
   1619c:	mov	r1, #0
   161a0:	ldr	r2, [fp, #-8]
   161a4:	adds	r3, r2, r3
   161a8:	bvc	161b0 <__assert_fail@plt+0x523c>
   161ac:	mov	r1, #1
   161b0:	str	r3, [fp, #-16]
   161b4:	mov	r3, r1
   161b8:	and	r3, r3, #1
   161bc:	uxtb	r3, r3
   161c0:	cmp	r3, #0
   161c4:	beq	161d0 <__assert_fail@plt+0x525c>
   161c8:	mvn	r3, #-2147483648	; 0x80000000
   161cc:	str	r3, [fp, #-16]
   161d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   161d4:	cmp	r3, #0
   161d8:	blt	161f4 <__assert_fail@plt+0x5280>
   161dc:	ldr	r3, [fp, #-16]
   161e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   161e4:	cmp	r2, r3
   161e8:	bge	161f4 <__assert_fail@plt+0x5280>
   161ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   161f0:	str	r3, [fp, #-16]
   161f4:	ldr	r2, [fp, #-16]
   161f8:	mov	lr, #0
   161fc:	ldr	r3, [fp, #4]
   16200:	smull	r2, r3, r2, r3
   16204:	mov	r0, #0
   16208:	mov	r1, #0
   1620c:	mov	r0, r3
   16210:	asr	r1, r3, #31
   16214:	asr	ip, r2, #31
   16218:	cmp	ip, r0
   1621c:	beq	16224 <__assert_fail@plt+0x52b0>
   16220:	mov	lr, #1
   16224:	mov	r3, r2
   16228:	str	r3, [fp, #-20]	; 0xffffffec
   1622c:	mov	r3, lr
   16230:	and	r3, r3, #1
   16234:	uxtb	r3, r3
   16238:	cmp	r3, #0
   1623c:	beq	16248 <__assert_fail@plt+0x52d4>
   16240:	mvn	r3, #-2147483648	; 0x80000000
   16244:	b	16260 <__assert_fail@plt+0x52ec>
   16248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1624c:	cmp	r3, #63	; 0x3f
   16250:	bgt	1625c <__assert_fail@plt+0x52e8>
   16254:	mov	r3, #64	; 0x40
   16258:	b	16260 <__assert_fail@plt+0x52ec>
   1625c:	mov	r3, #0
   16260:	str	r3, [fp, #-12]
   16264:	ldr	r3, [fp, #-12]
   16268:	cmp	r3, #0
   1626c:	beq	162a4 <__assert_fail@plt+0x5330>
   16270:	ldr	r2, [fp, #-12]
   16274:	ldr	r3, [fp, #4]
   16278:	sdiv	r3, r2, r3
   1627c:	str	r3, [fp, #-16]
   16280:	ldr	r3, [fp, #-12]
   16284:	ldr	r2, [fp, #4]
   16288:	sdiv	r2, r3, r2
   1628c:	ldr	r1, [fp, #4]
   16290:	mul	r2, r1, r2
   16294:	sub	r3, r3, r2
   16298:	ldr	r2, [fp, #-12]
   1629c:	sub	r3, r2, r3
   162a0:	str	r3, [fp, #-20]	; 0xffffffec
   162a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162a8:	cmp	r3, #0
   162ac:	bne	162bc <__assert_fail@plt+0x5348>
   162b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   162b4:	mov	r2, #0
   162b8:	str	r2, [r3]
   162bc:	ldr	r2, [fp, #-16]
   162c0:	ldr	r3, [fp, #-8]
   162c4:	sub	r3, r2, r3
   162c8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   162cc:	cmp	r2, r3
   162d0:	ble	16370 <__assert_fail@plt+0x53fc>
   162d4:	mov	r1, #0
   162d8:	ldr	r2, [fp, #-8]
   162dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   162e0:	adds	r3, r2, r3
   162e4:	bvc	162ec <__assert_fail@plt+0x5378>
   162e8:	mov	r1, #1
   162ec:	str	r3, [fp, #-16]
   162f0:	mov	r3, r1
   162f4:	and	r3, r3, #1
   162f8:	uxtb	r3, r3
   162fc:	cmp	r3, #0
   16300:	bne	1636c <__assert_fail@plt+0x53f8>
   16304:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16308:	cmp	r3, #0
   1630c:	blt	16320 <__assert_fail@plt+0x53ac>
   16310:	ldr	r3, [fp, #-16]
   16314:	ldr	r2, [fp, #-36]	; 0xffffffdc
   16318:	cmp	r2, r3
   1631c:	blt	1636c <__assert_fail@plt+0x53f8>
   16320:	ldr	r2, [fp, #-16]
   16324:	mov	lr, #0
   16328:	ldr	r3, [fp, #4]
   1632c:	smull	r2, r3, r2, r3
   16330:	mov	r0, #0
   16334:	mov	r1, #0
   16338:	mov	r0, r3
   1633c:	asr	r1, r3, #31
   16340:	asr	ip, r2, #31
   16344:	cmp	ip, r0
   16348:	beq	16350 <__assert_fail@plt+0x53dc>
   1634c:	mov	lr, #1
   16350:	mov	r3, r2
   16354:	str	r3, [fp, #-20]	; 0xffffffec
   16358:	mov	r3, lr
   1635c:	and	r3, r3, #1
   16360:	uxtb	r3, r3
   16364:	cmp	r3, #0
   16368:	beq	16370 <__assert_fail@plt+0x53fc>
   1636c:	bl	165fc <__assert_fail@plt+0x5688>
   16370:	ldr	r3, [fp, #-20]	; 0xffffffec
   16374:	mov	r1, r3
   16378:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1637c:	bl	15e3c <__assert_fail@plt+0x4ec8>
   16380:	str	r0, [fp, #-24]	; 0xffffffe8
   16384:	ldr	r2, [fp, #-16]
   16388:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1638c:	str	r2, [r3]
   16390:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16394:	mov	r0, r3
   16398:	sub	sp, fp, #4
   1639c:	ldr	fp, [sp]
   163a0:	add	sp, sp, #4
   163a4:	pop	{pc}		; (ldr pc, [sp], #4)
   163a8:	str	fp, [sp, #-8]!
   163ac:	str	lr, [sp, #4]
   163b0:	add	fp, sp, #4
   163b4:	sub	sp, sp, #8
   163b8:	str	r0, [fp, #-8]
   163bc:	mov	r1, #1
   163c0:	ldr	r0, [fp, #-8]
   163c4:	bl	16418 <__assert_fail@plt+0x54a4>
   163c8:	mov	r3, r0
   163cc:	mov	r0, r3
   163d0:	sub	sp, fp, #4
   163d4:	ldr	fp, [sp]
   163d8:	add	sp, sp, #4
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	str	fp, [sp, #-8]!
   163e4:	str	lr, [sp, #4]
   163e8:	add	fp, sp, #4
   163ec:	sub	sp, sp, #8
   163f0:	str	r0, [fp, #-8]
   163f4:	mov	r1, #1
   163f8:	ldr	r0, [fp, #-8]
   163fc:	bl	16460 <__assert_fail@plt+0x54ec>
   16400:	mov	r3, r0
   16404:	mov	r0, r3
   16408:	sub	sp, fp, #4
   1640c:	ldr	fp, [sp]
   16410:	add	sp, sp, #4
   16414:	pop	{pc}		; (ldr pc, [sp], #4)
   16418:	str	fp, [sp, #-8]!
   1641c:	str	lr, [sp, #4]
   16420:	add	fp, sp, #4
   16424:	sub	sp, sp, #8
   16428:	str	r0, [fp, #-8]
   1642c:	str	r1, [fp, #-12]
   16430:	ldr	r1, [fp, #-12]
   16434:	ldr	r0, [fp, #-8]
   16438:	bl	16f3c <__assert_fail@plt+0x5fc8>
   1643c:	mov	r3, r0
   16440:	mov	r0, r3
   16444:	bl	15d4c <__assert_fail@plt+0x4dd8>
   16448:	mov	r3, r0
   1644c:	mov	r0, r3
   16450:	sub	sp, fp, #4
   16454:	ldr	fp, [sp]
   16458:	add	sp, sp, #4
   1645c:	pop	{pc}		; (ldr pc, [sp], #4)
   16460:	str	fp, [sp, #-8]!
   16464:	str	lr, [sp, #4]
   16468:	add	fp, sp, #4
   1646c:	sub	sp, sp, #8
   16470:	str	r0, [fp, #-8]
   16474:	str	r1, [fp, #-12]
   16478:	ldr	r1, [fp, #-12]
   1647c:	ldr	r0, [fp, #-8]
   16480:	bl	17b70 <__assert_fail@plt+0x6bfc>
   16484:	mov	r3, r0
   16488:	mov	r0, r3
   1648c:	bl	15d4c <__assert_fail@plt+0x4dd8>
   16490:	mov	r3, r0
   16494:	mov	r0, r3
   16498:	sub	sp, fp, #4
   1649c:	ldr	fp, [sp]
   164a0:	add	sp, sp, #4
   164a4:	pop	{pc}		; (ldr pc, [sp], #4)
   164a8:	str	fp, [sp, #-8]!
   164ac:	str	lr, [sp, #4]
   164b0:	add	fp, sp, #4
   164b4:	sub	sp, sp, #8
   164b8:	str	r0, [fp, #-8]
   164bc:	str	r1, [fp, #-12]
   164c0:	ldr	r0, [fp, #-12]
   164c4:	bl	15d88 <__assert_fail@plt+0x4e14>
   164c8:	mov	r3, r0
   164cc:	ldr	r2, [fp, #-12]
   164d0:	ldr	r1, [fp, #-8]
   164d4:	mov	r0, r3
   164d8:	bl	10d34 <memcpy@plt>
   164dc:	mov	r3, r0
   164e0:	mov	r0, r3
   164e4:	sub	sp, fp, #4
   164e8:	ldr	fp, [sp]
   164ec:	add	sp, sp, #4
   164f0:	pop	{pc}		; (ldr pc, [sp], #4)
   164f4:	str	fp, [sp, #-8]!
   164f8:	str	lr, [sp, #4]
   164fc:	add	fp, sp, #4
   16500:	sub	sp, sp, #8
   16504:	str	r0, [fp, #-8]
   16508:	str	r1, [fp, #-12]
   1650c:	ldr	r0, [fp, #-12]
   16510:	bl	15dc8 <__assert_fail@plt+0x4e54>
   16514:	mov	r3, r0
   16518:	mov	r0, r3
   1651c:	ldr	r3, [fp, #-12]
   16520:	mov	r2, r3
   16524:	ldr	r1, [fp, #-8]
   16528:	bl	10d34 <memcpy@plt>
   1652c:	mov	r3, r0
   16530:	mov	r0, r3
   16534:	sub	sp, fp, #4
   16538:	ldr	fp, [sp]
   1653c:	add	sp, sp, #4
   16540:	pop	{pc}		; (ldr pc, [sp], #4)
   16544:	str	fp, [sp, #-8]!
   16548:	str	lr, [sp, #4]
   1654c:	add	fp, sp, #4
   16550:	sub	sp, sp, #16
   16554:	str	r0, [fp, #-16]
   16558:	str	r1, [fp, #-20]	; 0xffffffec
   1655c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16560:	add	r3, r3, #1
   16564:	mov	r0, r3
   16568:	bl	15dc8 <__assert_fail@plt+0x4e54>
   1656c:	mov	r3, r0
   16570:	str	r3, [fp, #-8]
   16574:	ldr	r3, [fp, #-20]	; 0xffffffec
   16578:	ldr	r2, [fp, #-8]
   1657c:	add	r3, r2, r3
   16580:	mov	r2, #0
   16584:	strb	r2, [r3]
   16588:	ldr	r3, [fp, #-20]	; 0xffffffec
   1658c:	mov	r2, r3
   16590:	ldr	r1, [fp, #-16]
   16594:	ldr	r0, [fp, #-8]
   16598:	bl	10d34 <memcpy@plt>
   1659c:	mov	r3, r0
   165a0:	mov	r0, r3
   165a4:	sub	sp, fp, #4
   165a8:	ldr	fp, [sp]
   165ac:	add	sp, sp, #4
   165b0:	pop	{pc}		; (ldr pc, [sp], #4)
   165b4:	str	fp, [sp, #-8]!
   165b8:	str	lr, [sp, #4]
   165bc:	add	fp, sp, #4
   165c0:	sub	sp, sp, #8
   165c4:	str	r0, [fp, #-8]
   165c8:	ldr	r0, [fp, #-8]
   165cc:	bl	10e6c <strlen@plt>
   165d0:	mov	r3, r0
   165d4:	add	r3, r3, #1
   165d8:	mov	r1, r3
   165dc:	ldr	r0, [fp, #-8]
   165e0:	bl	164a8 <__assert_fail@plt+0x5534>
   165e4:	mov	r3, r0
   165e8:	mov	r0, r3
   165ec:	sub	sp, fp, #4
   165f0:	ldr	fp, [sp]
   165f4:	add	sp, sp, #4
   165f8:	pop	{pc}		; (ldr pc, [sp], #4)
   165fc:	strd	r4, [sp, #-16]!
   16600:	str	fp, [sp, #8]
   16604:	str	lr, [sp, #12]
   16608:	add	fp, sp, #12
   1660c:	movw	r3, #41212	; 0xa0fc
   16610:	movt	r3, #2
   16614:	ldr	r4, [r3]
   16618:	movw	r0, #36516	; 0x8ea4
   1661c:	movt	r0, #1
   16620:	bl	10e60 <gettext@plt>
   16624:	mov	r3, r0
   16628:	movw	r2, #36536	; 0x8eb8
   1662c:	movt	r2, #1
   16630:	mov	r1, #0
   16634:	mov	r0, r4
   16638:	bl	10de8 <error@plt>
   1663c:	bl	10f68 <abort@plt>
   16640:	str	fp, [sp, #-8]!
   16644:	str	lr, [sp, #4]
   16648:	add	fp, sp, #4
   1664c:	sub	sp, sp, #16
   16650:	str	r0, [fp, #-16]
   16654:	ldr	r0, [fp, #-16]
   16658:	bl	171ac <__assert_fail@plt+0x6238>
   1665c:	str	r0, [fp, #-8]
   16660:	ldr	r3, [fp, #-8]
   16664:	cmp	r3, #0
   16668:	bne	16684 <__assert_fail@plt+0x5710>
   1666c:	bl	10e90 <__errno_location@plt>
   16670:	mov	r3, r0
   16674:	ldr	r3, [r3]
   16678:	cmp	r3, #12
   1667c:	bne	16684 <__assert_fail@plt+0x5710>
   16680:	bl	165fc <__assert_fail@plt+0x5688>
   16684:	ldr	r3, [fp, #-8]
   16688:	mov	r0, r3
   1668c:	sub	sp, fp, #4
   16690:	ldr	fp, [sp]
   16694:	add	sp, sp, #4
   16698:	pop	{pc}		; (ldr pc, [sp], #4)
   1669c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   166a0:	strd	r6, [sp, #8]
   166a4:	strd	r8, [sp, #16]
   166a8:	str	fp, [sp, #24]
   166ac:	add	fp, sp, #24
   166b0:	sub	sp, sp, #44	; 0x2c
   166b4:	str	r0, [fp, #-40]	; 0xffffffd8
   166b8:	str	r1, [fp, #-44]	; 0xffffffd4
   166bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   166c0:	ldrd	r4, [r3]
   166c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   166c8:	mov	r6, r3
   166cc:	asr	r7, r6, #31
   166d0:	mov	r2, #0
   166d4:	mov	r3, #0
   166d8:	strd	r2, [fp, #-60]	; 0xffffffc4
   166dc:	cmp	r6, #0
   166e0:	sbcs	r3, r7, #0
   166e4:	bge	166fc <__assert_fail@plt+0x5788>
   166e8:	orrs	r3, r4, r5
   166ec:	beq	166fc <__assert_fail@plt+0x5788>
   166f0:	mov	r2, #1
   166f4:	mov	r3, #0
   166f8:	strd	r2, [fp, #-60]	; 0xffffffc4
   166fc:	mov	r0, #0
   16700:	mov	r1, #0
   16704:	mov	r0, r7
   16708:	mov	r1, #0
   1670c:	mov	r2, #0
   16710:	mov	r3, #0
   16714:	mov	r2, r5
   16718:	mov	r3, #0
   1671c:	cmp	r0, #0
   16720:	bne	16744 <__assert_fail@plt+0x57d0>
   16724:	cmp	r2, #0
   16728:	bne	16738 <__assert_fail@plt+0x57c4>
   1672c:	umull	r2, r3, r6, r4
   16730:	strd	r2, [fp, #-52]	; 0xffffffcc
   16734:	b	16810 <__assert_fail@plt+0x589c>
   16738:	mov	r3, r2
   1673c:	mov	r2, r6
   16740:	b	16754 <__assert_fail@plt+0x57e0>
   16744:	cmp	r2, #0
   16748:	bne	167cc <__assert_fail@plt+0x5858>
   1674c:	mov	r3, r0
   16750:	mov	r2, r4
   16754:	umull	r8, r9, r6, r4
   16758:	umull	r2, r3, r2, r3
   1675c:	mov	r0, r2
   16760:	mov	r1, r3
   16764:	mov	r2, #0
   16768:	mov	r3, #0
   1676c:	mov	r2, r9
   16770:	mov	r3, #0
   16774:	adds	ip, r0, r2
   16778:	str	ip, [fp, #-68]	; 0xffffffbc
   1677c:	adc	r3, r1, r3
   16780:	str	r3, [fp, #-64]	; 0xffffffc0
   16784:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   16788:	mov	r2, #0
   1678c:	mov	r3, #0
   16790:	mov	r2, r1
   16794:	asr	r3, r1, #31
   16798:	cmp	r2, #0
   1679c:	bne	167e8 <__assert_fail@plt+0x5874>
   167a0:	mov	r2, #0
   167a4:	mov	r3, #0
   167a8:	mov	r3, r0
   167ac:	mov	r2, #0
   167b0:	mov	r0, r8
   167b4:	mov	r1, #0
   167b8:	orr	ip, r2, r0
   167bc:	str	ip, [fp, #-52]	; 0xffffffcc
   167c0:	orr	r3, r3, r1
   167c4:	str	r3, [fp, #-48]	; 0xffffffd0
   167c8:	b	16810 <__assert_fail@plt+0x589c>
   167cc:	mul	r2, r4, r7
   167d0:	mul	r3, r6, r5
   167d4:	add	r1, r2, r3
   167d8:	umull	r2, r3, r6, r4
   167dc:	add	r1, r1, r3
   167e0:	mov	r3, r1
   167e4:	strd	r2, [fp, #-52]	; 0xffffffcc
   167e8:	mul	r2, r4, r7
   167ec:	mul	r3, r6, r5
   167f0:	add	r1, r2, r3
   167f4:	umull	r2, r3, r6, r4
   167f8:	add	r1, r1, r3
   167fc:	mov	r3, r1
   16800:	strd	r2, [fp, #-52]	; 0xffffffcc
   16804:	mov	r2, #1
   16808:	mov	r3, #0
   1680c:	strd	r2, [fp, #-60]	; 0xffffffc4
   16810:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   16814:	strd	r2, [fp, #-36]	; 0xffffffdc
   16818:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1681c:	mov	r3, r2
   16820:	and	r3, r3, #1
   16824:	uxtb	r3, r3
   16828:	cmp	r3, #0
   1682c:	beq	16848 <__assert_fail@plt+0x58d4>
   16830:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16834:	mvn	r2, #0
   16838:	mvn	r3, #0
   1683c:	strd	r2, [r1]
   16840:	mov	r3, #1
   16844:	b	16858 <__assert_fail@plt+0x58e4>
   16848:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1684c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16850:	strd	r2, [r1]
   16854:	mov	r3, #0
   16858:	mov	r0, r3
   1685c:	sub	sp, fp, #24
   16860:	ldrd	r4, [sp]
   16864:	ldrd	r6, [sp, #8]
   16868:	ldrd	r8, [sp, #16]
   1686c:	ldr	fp, [sp, #24]
   16870:	add	sp, sp, #28
   16874:	bx	lr
   16878:	str	fp, [sp, #-8]!
   1687c:	str	lr, [sp, #4]
   16880:	add	fp, sp, #4
   16884:	sub	sp, sp, #24
   16888:	str	r0, [fp, #-16]
   1688c:	str	r1, [fp, #-20]	; 0xffffffec
   16890:	str	r2, [fp, #-24]	; 0xffffffe8
   16894:	mov	r3, #0
   16898:	str	r3, [fp, #-8]
   1689c:	b	168bc <__assert_fail@plt+0x5948>
   168a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   168a4:	ldr	r0, [fp, #-16]
   168a8:	bl	1669c <__assert_fail@plt+0x5728>
   168ac:	mov	r2, r0
   168b0:	ldr	r3, [fp, #-8]
   168b4:	orr	r3, r3, r2
   168b8:	str	r3, [fp, #-8]
   168bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168c0:	sub	r2, r3, #1
   168c4:	str	r2, [fp, #-24]	; 0xffffffe8
   168c8:	cmp	r3, #0
   168cc:	bne	168a0 <__assert_fail@plt+0x592c>
   168d0:	ldr	r3, [fp, #-8]
   168d4:	mov	r0, r3
   168d8:	sub	sp, fp, #4
   168dc:	ldr	fp, [sp]
   168e0:	add	sp, sp, #4
   168e4:	pop	{pc}		; (ldr pc, [sp], #4)
   168e8:	str	fp, [sp, #-8]!
   168ec:	str	lr, [sp, #4]
   168f0:	add	fp, sp, #4
   168f4:	sub	sp, sp, #56	; 0x38
   168f8:	str	r0, [fp, #-48]	; 0xffffffd0
   168fc:	str	r1, [fp, #-52]	; 0xffffffcc
   16900:	str	r2, [fp, #-56]	; 0xffffffc8
   16904:	str	r3, [fp, #-60]	; 0xffffffc4
   16908:	mov	r3, #0
   1690c:	str	r3, [fp, #-8]
   16910:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16914:	cmp	r3, #0
   16918:	blt	16928 <__assert_fail@plt+0x59b4>
   1691c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16920:	cmp	r3, #36	; 0x24
   16924:	ble	16948 <__assert_fail@plt+0x59d4>
   16928:	movw	r3, #36596	; 0x8ef4
   1692c:	movt	r3, #1
   16930:	mov	r2, #85	; 0x55
   16934:	movw	r1, #36540	; 0x8ebc
   16938:	movt	r1, #1
   1693c:	movw	r0, #36556	; 0x8ecc
   16940:	movt	r0, #1
   16944:	bl	10f74 <__assert_fail@plt>
   16948:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1694c:	cmp	r3, #0
   16950:	bne	1695c <__assert_fail@plt+0x59e8>
   16954:	sub	r3, fp, #36	; 0x24
   16958:	b	16960 <__assert_fail@plt+0x59ec>
   1695c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   16960:	str	r3, [fp, #-32]	; 0xffffffe0
   16964:	bl	10e90 <__errno_location@plt>
   16968:	mov	r2, r0
   1696c:	mov	r3, #0
   16970:	str	r3, [r2]
   16974:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16978:	str	r3, [fp, #-12]
   1697c:	ldr	r3, [fp, #-12]
   16980:	ldrb	r3, [r3]
   16984:	strb	r3, [fp, #-13]
   16988:	b	169a4 <__assert_fail@plt+0x5a30>
   1698c:	ldr	r3, [fp, #-12]
   16990:	add	r3, r3, #1
   16994:	str	r3, [fp, #-12]
   16998:	ldr	r3, [fp, #-12]
   1699c:	ldrb	r3, [r3]
   169a0:	strb	r3, [fp, #-13]
   169a4:	bl	10e48 <__ctype_b_loc@plt>
   169a8:	mov	r3, r0
   169ac:	ldr	r2, [r3]
   169b0:	ldrb	r3, [fp, #-13]
   169b4:	lsl	r3, r3, #1
   169b8:	add	r3, r2, r3
   169bc:	ldrh	r3, [r3]
   169c0:	and	r3, r3, #8192	; 0x2000
   169c4:	cmp	r3, #0
   169c8:	bne	1698c <__assert_fail@plt+0x5a18>
   169cc:	ldrb	r3, [fp, #-13]
   169d0:	cmp	r3, #45	; 0x2d
   169d4:	bne	169e0 <__assert_fail@plt+0x5a6c>
   169d8:	mov	r3, #4
   169dc:	b	16f28 <__assert_fail@plt+0x5fb4>
   169e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   169e4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   169e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   169ec:	bl	10ec0 <strtoumax@plt>
   169f0:	mov	r2, r0
   169f4:	mov	r3, r1
   169f8:	strd	r2, [fp, #-44]	; 0xffffffd4
   169fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a00:	ldr	r3, [r3]
   16a04:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16a08:	cmp	r2, r3
   16a0c:	bne	16a6c <__assert_fail@plt+0x5af8>
   16a10:	ldr	r3, [fp, #4]
   16a14:	cmp	r3, #0
   16a18:	beq	16a64 <__assert_fail@plt+0x5af0>
   16a1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a20:	ldr	r3, [r3]
   16a24:	ldrb	r3, [r3]
   16a28:	cmp	r3, #0
   16a2c:	beq	16a64 <__assert_fail@plt+0x5af0>
   16a30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a34:	ldr	r3, [r3]
   16a38:	ldrb	r3, [r3]
   16a3c:	mov	r1, r3
   16a40:	ldr	r0, [fp, #4]
   16a44:	bl	10e78 <strchr@plt>
   16a48:	mov	r3, r0
   16a4c:	cmp	r3, #0
   16a50:	beq	16a64 <__assert_fail@plt+0x5af0>
   16a54:	mov	r2, #1
   16a58:	mov	r3, #0
   16a5c:	strd	r2, [fp, #-44]	; 0xffffffd4
   16a60:	b	16aa4 <__assert_fail@plt+0x5b30>
   16a64:	mov	r3, #4
   16a68:	b	16f28 <__assert_fail@plt+0x5fb4>
   16a6c:	bl	10e90 <__errno_location@plt>
   16a70:	mov	r3, r0
   16a74:	ldr	r3, [r3]
   16a78:	cmp	r3, #0
   16a7c:	beq	16aa4 <__assert_fail@plt+0x5b30>
   16a80:	bl	10e90 <__errno_location@plt>
   16a84:	mov	r3, r0
   16a88:	ldr	r3, [r3]
   16a8c:	cmp	r3, #34	; 0x22
   16a90:	beq	16a9c <__assert_fail@plt+0x5b28>
   16a94:	mov	r3, #4
   16a98:	b	16f28 <__assert_fail@plt+0x5fb4>
   16a9c:	mov	r3, #1
   16aa0:	str	r3, [fp, #-8]
   16aa4:	ldr	r3, [fp, #4]
   16aa8:	cmp	r3, #0
   16aac:	bne	16ac4 <__assert_fail@plt+0x5b50>
   16ab0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16ab4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16ab8:	strd	r2, [r1]
   16abc:	ldr	r3, [fp, #-8]
   16ac0:	b	16f28 <__assert_fail@plt+0x5fb4>
   16ac4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ac8:	ldr	r3, [r3]
   16acc:	ldrb	r3, [r3]
   16ad0:	cmp	r3, #0
   16ad4:	beq	16f18 <__assert_fail@plt+0x5fa4>
   16ad8:	mov	r3, #1024	; 0x400
   16adc:	str	r3, [fp, #-20]	; 0xffffffec
   16ae0:	mov	r3, #1
   16ae4:	str	r3, [fp, #-24]	; 0xffffffe8
   16ae8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16aec:	ldr	r3, [r3]
   16af0:	ldrb	r3, [r3]
   16af4:	mov	r1, r3
   16af8:	ldr	r0, [fp, #4]
   16afc:	bl	10e78 <strchr@plt>
   16b00:	mov	r3, r0
   16b04:	cmp	r3, #0
   16b08:	bne	16b24 <__assert_fail@plt+0x5bb0>
   16b0c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16b10:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16b14:	strd	r2, [r1]
   16b18:	ldr	r3, [fp, #-8]
   16b1c:	orr	r3, r3, #2
   16b20:	b	16f28 <__assert_fail@plt+0x5fb4>
   16b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16b28:	ldr	r3, [r3]
   16b2c:	ldrb	r3, [r3]
   16b30:	sub	r3, r3, #69	; 0x45
   16b34:	cmp	r3, #47	; 0x2f
   16b38:	ldrls	pc, [pc, r3, lsl #2]
   16b3c:	b	16c90 <__assert_fail@plt+0x5d1c>
   16b40:	andeq	r6, r1, r0, lsl #24
   16b44:	muleq	r1, r0, ip
   16b48:	andeq	r6, r1, r0, lsl #24
   16b4c:	muleq	r1, r0, ip
   16b50:	muleq	r1, r0, ip
   16b54:	muleq	r1, r0, ip
   16b58:	andeq	r6, r1, r0, lsl #24
   16b5c:	muleq	r1, r0, ip
   16b60:	andeq	r6, r1, r0, lsl #24
   16b64:	muleq	r1, r0, ip
   16b68:	muleq	r1, r0, ip
   16b6c:	andeq	r6, r1, r0, lsl #24
   16b70:	muleq	r1, r0, ip
   16b74:	muleq	r1, r0, ip
   16b78:	muleq	r1, r0, ip
   16b7c:	andeq	r6, r1, r0, lsl #24
   16b80:	muleq	r1, r0, ip
   16b84:	muleq	r1, r0, ip
   16b88:	muleq	r1, r0, ip
   16b8c:	muleq	r1, r0, ip
   16b90:	andeq	r6, r1, r0, lsl #24
   16b94:	andeq	r6, r1, r0, lsl #24
   16b98:	muleq	r1, r0, ip
   16b9c:	muleq	r1, r0, ip
   16ba0:	muleq	r1, r0, ip
   16ba4:	muleq	r1, r0, ip
   16ba8:	muleq	r1, r0, ip
   16bac:	muleq	r1, r0, ip
   16bb0:	muleq	r1, r0, ip
   16bb4:	muleq	r1, r0, ip
   16bb8:	muleq	r1, r0, ip
   16bbc:	muleq	r1, r0, ip
   16bc0:	muleq	r1, r0, ip
   16bc4:	muleq	r1, r0, ip
   16bc8:	andeq	r6, r1, r0, lsl #24
   16bcc:	muleq	r1, r0, ip
   16bd0:	muleq	r1, r0, ip
   16bd4:	muleq	r1, r0, ip
   16bd8:	andeq	r6, r1, r0, lsl #24
   16bdc:	muleq	r1, r0, ip
   16be0:	andeq	r6, r1, r0, lsl #24
   16be4:	muleq	r1, r0, ip
   16be8:	muleq	r1, r0, ip
   16bec:	muleq	r1, r0, ip
   16bf0:	muleq	r1, r0, ip
   16bf4:	muleq	r1, r0, ip
   16bf8:	muleq	r1, r0, ip
   16bfc:	andeq	r6, r1, r0, lsl #24
   16c00:	mov	r1, #48	; 0x30
   16c04:	ldr	r0, [fp, #4]
   16c08:	bl	10e78 <strchr@plt>
   16c0c:	mov	r3, r0
   16c10:	cmp	r3, #0
   16c14:	beq	16c84 <__assert_fail@plt+0x5d10>
   16c18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c1c:	ldr	r3, [r3]
   16c20:	add	r3, r3, #1
   16c24:	ldrb	r3, [r3]
   16c28:	cmp	r3, #68	; 0x44
   16c2c:	beq	16c6c <__assert_fail@plt+0x5cf8>
   16c30:	cmp	r3, #105	; 0x69
   16c34:	beq	16c44 <__assert_fail@plt+0x5cd0>
   16c38:	cmp	r3, #66	; 0x42
   16c3c:	beq	16c6c <__assert_fail@plt+0x5cf8>
   16c40:	b	16c90 <__assert_fail@plt+0x5d1c>
   16c44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c48:	ldr	r3, [r3]
   16c4c:	add	r3, r3, #2
   16c50:	ldrb	r3, [r3]
   16c54:	cmp	r3, #66	; 0x42
   16c58:	bne	16c8c <__assert_fail@plt+0x5d18>
   16c5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c60:	add	r3, r3, #2
   16c64:	str	r3, [fp, #-24]	; 0xffffffe8
   16c68:	b	16c8c <__assert_fail@plt+0x5d18>
   16c6c:	mov	r3, #1000	; 0x3e8
   16c70:	str	r3, [fp, #-20]	; 0xffffffec
   16c74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c78:	add	r3, r3, #1
   16c7c:	str	r3, [fp, #-24]	; 0xffffffe8
   16c80:	b	16c90 <__assert_fail@plt+0x5d1c>
   16c84:	nop	{0}
   16c88:	b	16c90 <__assert_fail@plt+0x5d1c>
   16c8c:	nop	{0}
   16c90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16c94:	ldr	r3, [r3]
   16c98:	ldrb	r3, [r3]
   16c9c:	sub	r3, r3, #66	; 0x42
   16ca0:	cmp	r3, #53	; 0x35
   16ca4:	ldrls	pc, [pc, r3, lsl #2]
   16ca8:	b	16eb8 <__assert_fail@plt+0x5f44>
   16cac:	muleq	r1, ip, sp
   16cb0:			; <UNDEFINED> instruction: 0x00016eb8
   16cb4:			; <UNDEFINED> instruction: 0x00016eb8
   16cb8:	andeq	r6, r1, r0, asr #27
   16cbc:			; <UNDEFINED> instruction: 0x00016eb8
   16cc0:	ldrdeq	r6, [r1], -ip
   16cc4:			; <UNDEFINED> instruction: 0x00016eb8
   16cc8:			; <UNDEFINED> instruction: 0x00016eb8
   16ccc:			; <UNDEFINED> instruction: 0x00016eb8
   16cd0:	strdeq	r6, [r1], -r8
   16cd4:			; <UNDEFINED> instruction: 0x00016eb8
   16cd8:	andeq	r6, r1, r4, lsl lr
   16cdc:			; <UNDEFINED> instruction: 0x00016eb8
   16ce0:			; <UNDEFINED> instruction: 0x00016eb8
   16ce4:	andeq	r6, r1, r0, lsr lr
   16ce8:			; <UNDEFINED> instruction: 0x00016eb8
   16cec:			; <UNDEFINED> instruction: 0x00016eb8
   16cf0:			; <UNDEFINED> instruction: 0x00016eb8
   16cf4:	andeq	r6, r1, ip, asr #28
   16cf8:			; <UNDEFINED> instruction: 0x00016eb8
   16cfc:			; <UNDEFINED> instruction: 0x00016eb8
   16d00:			; <UNDEFINED> instruction: 0x00016eb8
   16d04:			; <UNDEFINED> instruction: 0x00016eb8
   16d08:	andeq	r6, r1, r0, lsl #29
   16d0c:	muleq	r1, ip, lr
   16d10:			; <UNDEFINED> instruction: 0x00016eb8
   16d14:			; <UNDEFINED> instruction: 0x00016eb8
   16d18:			; <UNDEFINED> instruction: 0x00016eb8
   16d1c:			; <UNDEFINED> instruction: 0x00016eb8
   16d20:			; <UNDEFINED> instruction: 0x00016eb8
   16d24:			; <UNDEFINED> instruction: 0x00016eb8
   16d28:			; <UNDEFINED> instruction: 0x00016eb8
   16d2c:	andeq	r6, r1, r4, lsl #27
   16d30:			; <UNDEFINED> instruction: 0x00016db4
   16d34:			; <UNDEFINED> instruction: 0x00016eb8
   16d38:			; <UNDEFINED> instruction: 0x00016eb8
   16d3c:			; <UNDEFINED> instruction: 0x00016eb8
   16d40:	ldrdeq	r6, [r1], -ip
   16d44:			; <UNDEFINED> instruction: 0x00016eb8
   16d48:			; <UNDEFINED> instruction: 0x00016eb8
   16d4c:			; <UNDEFINED> instruction: 0x00016eb8
   16d50:	strdeq	r6, [r1], -r8
   16d54:			; <UNDEFINED> instruction: 0x00016eb8
   16d58:	andeq	r6, r1, r4, lsl lr
   16d5c:			; <UNDEFINED> instruction: 0x00016eb8
   16d60:			; <UNDEFINED> instruction: 0x00016eb8
   16d64:			; <UNDEFINED> instruction: 0x00016eb8
   16d68:			; <UNDEFINED> instruction: 0x00016eb8
   16d6c:			; <UNDEFINED> instruction: 0x00016eb8
   16d70:			; <UNDEFINED> instruction: 0x00016eb8
   16d74:	andeq	r6, r1, ip, asr #28
   16d78:			; <UNDEFINED> instruction: 0x00016eb8
   16d7c:			; <UNDEFINED> instruction: 0x00016eb8
   16d80:	andeq	r6, r1, r8, ror #28
   16d84:	sub	r3, fp, #44	; 0x2c
   16d88:	mov	r1, #512	; 0x200
   16d8c:	mov	r0, r3
   16d90:	bl	1669c <__assert_fail@plt+0x5728>
   16d94:	str	r0, [fp, #-28]	; 0xffffffe4
   16d98:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16d9c:	sub	r3, fp, #44	; 0x2c
   16da0:	mov	r1, #1024	; 0x400
   16da4:	mov	r0, r3
   16da8:	bl	1669c <__assert_fail@plt+0x5728>
   16dac:	str	r0, [fp, #-28]	; 0xffffffe4
   16db0:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16db4:	mov	r3, #0
   16db8:	str	r3, [fp, #-28]	; 0xffffffe4
   16dbc:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16dc0:	sub	r3, fp, #44	; 0x2c
   16dc4:	mov	r2, #6
   16dc8:	ldr	r1, [fp, #-20]	; 0xffffffec
   16dcc:	mov	r0, r3
   16dd0:	bl	16878 <__assert_fail@plt+0x5904>
   16dd4:	str	r0, [fp, #-28]	; 0xffffffe4
   16dd8:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16ddc:	sub	r3, fp, #44	; 0x2c
   16de0:	mov	r2, #3
   16de4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16de8:	mov	r0, r3
   16dec:	bl	16878 <__assert_fail@plt+0x5904>
   16df0:	str	r0, [fp, #-28]	; 0xffffffe4
   16df4:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16df8:	sub	r3, fp, #44	; 0x2c
   16dfc:	mov	r2, #1
   16e00:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e04:	mov	r0, r3
   16e08:	bl	16878 <__assert_fail@plt+0x5904>
   16e0c:	str	r0, [fp, #-28]	; 0xffffffe4
   16e10:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16e14:	sub	r3, fp, #44	; 0x2c
   16e18:	mov	r2, #2
   16e1c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e20:	mov	r0, r3
   16e24:	bl	16878 <__assert_fail@plt+0x5904>
   16e28:	str	r0, [fp, #-28]	; 0xffffffe4
   16e2c:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16e30:	sub	r3, fp, #44	; 0x2c
   16e34:	mov	r2, #5
   16e38:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e3c:	mov	r0, r3
   16e40:	bl	16878 <__assert_fail@plt+0x5904>
   16e44:	str	r0, [fp, #-28]	; 0xffffffe4
   16e48:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16e4c:	sub	r3, fp, #44	; 0x2c
   16e50:	mov	r2, #4
   16e54:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e58:	mov	r0, r3
   16e5c:	bl	16878 <__assert_fail@plt+0x5904>
   16e60:	str	r0, [fp, #-28]	; 0xffffffe4
   16e64:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16e68:	sub	r3, fp, #44	; 0x2c
   16e6c:	mov	r1, #2
   16e70:	mov	r0, r3
   16e74:	bl	1669c <__assert_fail@plt+0x5728>
   16e78:	str	r0, [fp, #-28]	; 0xffffffe4
   16e7c:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16e80:	sub	r3, fp, #44	; 0x2c
   16e84:	mov	r2, #8
   16e88:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e8c:	mov	r0, r3
   16e90:	bl	16878 <__assert_fail@plt+0x5904>
   16e94:	str	r0, [fp, #-28]	; 0xffffffe4
   16e98:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16e9c:	sub	r3, fp, #44	; 0x2c
   16ea0:	mov	r2, #7
   16ea4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ea8:	mov	r0, r3
   16eac:	bl	16878 <__assert_fail@plt+0x5904>
   16eb0:	str	r0, [fp, #-28]	; 0xffffffe4
   16eb4:	b	16ed0 <__assert_fail@plt+0x5f5c>
   16eb8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16ebc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16ec0:	strd	r2, [r1]
   16ec4:	ldr	r3, [fp, #-8]
   16ec8:	orr	r3, r3, #2
   16ecc:	b	16f28 <__assert_fail@plt+0x5fb4>
   16ed0:	ldr	r2, [fp, #-8]
   16ed4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16ed8:	orr	r3, r2, r3
   16edc:	str	r3, [fp, #-8]
   16ee0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ee4:	ldr	r2, [r3]
   16ee8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eec:	add	r2, r2, r3
   16ef0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ef4:	str	r2, [r3]
   16ef8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16efc:	ldr	r3, [r3]
   16f00:	ldrb	r3, [r3]
   16f04:	cmp	r3, #0
   16f08:	beq	16f18 <__assert_fail@plt+0x5fa4>
   16f0c:	ldr	r3, [fp, #-8]
   16f10:	orr	r3, r3, #2
   16f14:	str	r3, [fp, #-8]
   16f18:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16f1c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16f20:	strd	r2, [r1]
   16f24:	ldr	r3, [fp, #-8]
   16f28:	mov	r0, r3
   16f2c:	sub	sp, fp, #4
   16f30:	ldr	fp, [sp]
   16f34:	add	sp, sp, #4
   16f38:	pop	{pc}		; (ldr pc, [sp], #4)
   16f3c:	str	fp, [sp, #-8]!
   16f40:	str	lr, [sp, #4]
   16f44:	add	fp, sp, #4
   16f48:	sub	sp, sp, #16
   16f4c:	str	r0, [fp, #-16]
   16f50:	str	r1, [fp, #-20]	; 0xffffffec
   16f54:	ldr	r3, [fp, #-16]
   16f58:	cmp	r3, #0
   16f5c:	beq	16f6c <__assert_fail@plt+0x5ff8>
   16f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f64:	cmp	r3, #0
   16f68:	bne	16f7c <__assert_fail@plt+0x6008>
   16f6c:	mov	r3, #1
   16f70:	str	r3, [fp, #-20]	; 0xffffffec
   16f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f78:	str	r3, [fp, #-16]
   16f7c:	mov	ip, #0
   16f80:	ldr	r2, [fp, #-16]
   16f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   16f88:	umull	r0, r1, r2, r3
   16f8c:	mov	r2, #0
   16f90:	mov	r3, #0
   16f94:	mov	r2, r1
   16f98:	mov	r3, #0
   16f9c:	cmp	r2, #0
   16fa0:	beq	16fa8 <__assert_fail@plt+0x6034>
   16fa4:	mov	ip, #1
   16fa8:	cmp	r0, #0
   16fac:	bge	16fb4 <__assert_fail@plt+0x6040>
   16fb0:	mov	ip, #1
   16fb4:	mov	r3, ip
   16fb8:	and	r3, r3, #1
   16fbc:	uxtb	r3, r3
   16fc0:	cmp	r3, #0
   16fc4:	beq	16fe0 <__assert_fail@plt+0x606c>
   16fc8:	bl	10e90 <__errno_location@plt>
   16fcc:	mov	r2, r0
   16fd0:	mov	r3, #12
   16fd4:	str	r3, [r2]
   16fd8:	mov	r3, #0
   16fdc:	b	16ff8 <__assert_fail@plt+0x6084>
   16fe0:	ldr	r1, [fp, #-20]	; 0xffffffec
   16fe4:	ldr	r0, [fp, #-16]
   16fe8:	bl	10ce0 <calloc@plt>
   16fec:	mov	r3, r0
   16ff0:	str	r3, [fp, #-8]
   16ff4:	ldr	r3, [fp, #-8]
   16ff8:	mov	r0, r3
   16ffc:	sub	sp, fp, #4
   17000:	ldr	fp, [sp]
   17004:	add	sp, sp, #4
   17008:	pop	{pc}		; (ldr pc, [sp], #4)
   1700c:	str	fp, [sp, #-8]!
   17010:	str	lr, [sp, #4]
   17014:	add	fp, sp, #4
   17018:	sub	sp, sp, #16
   1701c:	str	r0, [fp, #-16]
   17020:	ldr	r3, [fp, #-16]
   17024:	cmp	r3, #0
   17028:	bne	17034 <__assert_fail@plt+0x60c0>
   1702c:	mov	r3, #1
   17030:	str	r3, [fp, #-16]
   17034:	mov	r2, #0
   17038:	ldr	r3, [fp, #-16]
   1703c:	cmp	r3, #0
   17040:	bge	17048 <__assert_fail@plt+0x60d4>
   17044:	mov	r2, #1
   17048:	mov	r3, r2
   1704c:	and	r3, r3, #1
   17050:	uxtb	r3, r3
   17054:	cmp	r3, #0
   17058:	beq	17074 <__assert_fail@plt+0x6100>
   1705c:	bl	10e90 <__errno_location@plt>
   17060:	mov	r2, r0
   17064:	mov	r3, #12
   17068:	str	r3, [r2]
   1706c:	mov	r3, #0
   17070:	b	17088 <__assert_fail@plt+0x6114>
   17074:	ldr	r0, [fp, #-16]
   17078:	bl	10e00 <malloc@plt>
   1707c:	mov	r3, r0
   17080:	str	r3, [fp, #-8]
   17084:	ldr	r3, [fp, #-8]
   17088:	mov	r0, r3
   1708c:	sub	sp, fp, #4
   17090:	ldr	fp, [sp]
   17094:	add	sp, sp, #4
   17098:	pop	{pc}		; (ldr pc, [sp], #4)
   1709c:	str	fp, [sp, #-8]!
   170a0:	str	lr, [sp, #4]
   170a4:	add	fp, sp, #4
   170a8:	sub	sp, sp, #16
   170ac:	str	r0, [fp, #-16]
   170b0:	str	r1, [fp, #-20]	; 0xffffffec
   170b4:	ldr	r3, [fp, #-16]
   170b8:	cmp	r3, #0
   170bc:	bne	170d0 <__assert_fail@plt+0x615c>
   170c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   170c4:	bl	1700c <__assert_fail@plt+0x6098>
   170c8:	mov	r3, r0
   170cc:	b	17140 <__assert_fail@plt+0x61cc>
   170d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170d4:	cmp	r3, #0
   170d8:	bne	170ec <__assert_fail@plt+0x6178>
   170dc:	ldr	r0, [fp, #-16]
   170e0:	bl	12afc <__assert_fail@plt+0x1b88>
   170e4:	mov	r3, #0
   170e8:	b	17140 <__assert_fail@plt+0x61cc>
   170ec:	mov	r2, #0
   170f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170f4:	cmp	r3, #0
   170f8:	bge	17100 <__assert_fail@plt+0x618c>
   170fc:	mov	r2, #1
   17100:	mov	r3, r2
   17104:	and	r3, r3, #1
   17108:	uxtb	r3, r3
   1710c:	cmp	r3, #0
   17110:	beq	1712c <__assert_fail@plt+0x61b8>
   17114:	bl	10e90 <__errno_location@plt>
   17118:	mov	r2, r0
   1711c:	mov	r3, #12
   17120:	str	r3, [r2]
   17124:	mov	r3, #0
   17128:	b	17140 <__assert_fail@plt+0x61cc>
   1712c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17130:	ldr	r0, [fp, #-16]
   17134:	bl	10d70 <realloc@plt>
   17138:	str	r0, [fp, #-8]
   1713c:	ldr	r3, [fp, #-8]
   17140:	mov	r0, r3
   17144:	sub	sp, fp, #4
   17148:	ldr	fp, [sp]
   1714c:	add	sp, sp, #4
   17150:	pop	{pc}		; (ldr pc, [sp], #4)
   17154:	str	fp, [sp, #-8]!
   17158:	str	lr, [sp, #4]
   1715c:	add	fp, sp, #4
   17160:	sub	sp, sp, #16
   17164:	str	r0, [fp, #-8]
   17168:	str	r1, [fp, #-12]
   1716c:	str	r2, [fp, #-16]
   17170:	str	r3, [fp, #-20]	; 0xffffffec
   17174:	ldr	r3, [fp, #-8]
   17178:	cmn	r3, #100	; 0x64
   1717c:	beq	17184 <__assert_fail@plt+0x6210>
   17180:	bl	10f68 <abort@plt>
   17184:	ldr	r2, [fp, #-20]	; 0xffffffec
   17188:	ldr	r1, [fp, #-16]
   1718c:	ldr	r0, [fp, #-12]
   17190:	bl	10d94 <readlink@plt>
   17194:	mov	r3, r0
   17198:	mov	r0, r3
   1719c:	sub	sp, fp, #4
   171a0:	ldr	fp, [sp]
   171a4:	add	sp, sp, #4
   171a8:	pop	{pc}		; (ldr pc, [sp], #4)
   171ac:	str	fp, [sp, #-8]!
   171b0:	str	lr, [sp, #4]
   171b4:	add	fp, sp, #4
   171b8:	sub	sp, sp, #16
   171bc:	str	r0, [fp, #-8]
   171c0:	movw	r3, #29012	; 0x7154
   171c4:	movt	r3, #1
   171c8:	str	r3, [sp, #4]
   171cc:	mov	r3, #0
   171d0:	str	r3, [sp]
   171d4:	mov	r3, #0
   171d8:	mov	r2, #0
   171dc:	ldr	r1, [fp, #-8]
   171e0:	mvn	r0, #99	; 0x63
   171e4:	bl	176a8 <__assert_fail@plt+0x6734>
   171e8:	mov	r3, r0
   171ec:	mov	r0, r3
   171f0:	sub	sp, fp, #4
   171f4:	ldr	fp, [sp]
   171f8:	add	sp, sp, #4
   171fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17200:	push	{fp}		; (str fp, [sp, #-4]!)
   17204:	add	fp, sp, #0
   17208:	sub	sp, sp, #28
   1720c:	str	r0, [fp, #-24]	; 0xffffffe8
   17210:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17214:	str	r3, [fp, #-8]
   17218:	mov	r3, #0
   1721c:	strb	r3, [fp, #-13]
   17220:	b	17230 <__assert_fail@plt+0x62bc>
   17224:	ldr	r3, [fp, #-8]
   17228:	add	r3, r3, #1
   1722c:	str	r3, [fp, #-8]
   17230:	ldr	r3, [fp, #-8]
   17234:	ldrb	r3, [r3]
   17238:	cmp	r3, #47	; 0x2f
   1723c:	beq	17224 <__assert_fail@plt+0x62b0>
   17240:	ldr	r3, [fp, #-8]
   17244:	str	r3, [fp, #-12]
   17248:	b	17290 <__assert_fail@plt+0x631c>
   1724c:	ldr	r3, [fp, #-12]
   17250:	ldrb	r3, [r3]
   17254:	cmp	r3, #47	; 0x2f
   17258:	bne	17268 <__assert_fail@plt+0x62f4>
   1725c:	mov	r3, #1
   17260:	strb	r3, [fp, #-13]
   17264:	b	17284 <__assert_fail@plt+0x6310>
   17268:	ldrb	r3, [fp, #-13]
   1726c:	cmp	r3, #0
   17270:	beq	17284 <__assert_fail@plt+0x6310>
   17274:	ldr	r3, [fp, #-12]
   17278:	str	r3, [fp, #-8]
   1727c:	mov	r3, #0
   17280:	strb	r3, [fp, #-13]
   17284:	ldr	r3, [fp, #-12]
   17288:	add	r3, r3, #1
   1728c:	str	r3, [fp, #-12]
   17290:	ldr	r3, [fp, #-12]
   17294:	ldrb	r3, [r3]
   17298:	cmp	r3, #0
   1729c:	bne	1724c <__assert_fail@plt+0x62d8>
   172a0:	ldr	r3, [fp, #-8]
   172a4:	mov	r0, r3
   172a8:	add	sp, fp, #0
   172ac:	pop	{fp}		; (ldr fp, [sp], #4)
   172b0:	bx	lr
   172b4:	str	fp, [sp, #-8]!
   172b8:	str	lr, [sp, #4]
   172bc:	add	fp, sp, #4
   172c0:	sub	sp, sp, #16
   172c4:	str	r0, [fp, #-16]
   172c8:	mov	r3, #0
   172cc:	str	r3, [fp, #-12]
   172d0:	ldr	r0, [fp, #-16]
   172d4:	bl	10e6c <strlen@plt>
   172d8:	str	r0, [fp, #-8]
   172dc:	b	172ec <__assert_fail@plt+0x6378>
   172e0:	ldr	r3, [fp, #-8]
   172e4:	sub	r3, r3, #1
   172e8:	str	r3, [fp, #-8]
   172ec:	ldr	r3, [fp, #-8]
   172f0:	cmp	r3, #1
   172f4:	bls	17314 <__assert_fail@plt+0x63a0>
   172f8:	ldr	r3, [fp, #-8]
   172fc:	sub	r3, r3, #1
   17300:	ldr	r2, [fp, #-16]
   17304:	add	r3, r2, r3
   17308:	ldrb	r3, [r3]
   1730c:	cmp	r3, #47	; 0x2f
   17310:	beq	172e0 <__assert_fail@plt+0x636c>
   17314:	ldr	r3, [fp, #-8]
   17318:	mov	r0, r3
   1731c:	sub	sp, fp, #4
   17320:	ldr	fp, [sp]
   17324:	add	sp, sp, #4
   17328:	pop	{pc}		; (ldr pc, [sp], #4)
   1732c:	strd	r4, [sp, #-16]!
   17330:	str	fp, [sp, #8]
   17334:	str	lr, [sp, #12]
   17338:	add	fp, sp, #12
   1733c:	sub	sp, sp, #16
   17340:	str	r0, [fp, #-24]	; 0xffffffe8
   17344:	str	r1, [fp, #-28]	; 0xffffffe4
   17348:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1734c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   17350:	cmp	r5, r4
   17354:	bne	17360 <__assert_fail@plt+0x63ec>
   17358:	mov	r3, #0
   1735c:	b	173c0 <__assert_fail@plt+0x644c>
   17360:	ldrb	r3, [r5]
   17364:	mov	r0, r3
   17368:	bl	124e4 <__assert_fail@plt+0x1570>
   1736c:	mov	r3, r0
   17370:	strb	r3, [fp, #-13]
   17374:	ldrb	r3, [r4]
   17378:	mov	r0, r3
   1737c:	bl	124e4 <__assert_fail@plt+0x1570>
   17380:	mov	r3, r0
   17384:	strb	r3, [fp, #-14]
   17388:	ldrb	r3, [fp, #-13]
   1738c:	cmp	r3, #0
   17390:	beq	173b0 <__assert_fail@plt+0x643c>
   17394:	add	r5, r5, #1
   17398:	add	r4, r4, #1
   1739c:	ldrb	r2, [fp, #-13]
   173a0:	ldrb	r3, [fp, #-14]
   173a4:	cmp	r2, r3
   173a8:	beq	17360 <__assert_fail@plt+0x63ec>
   173ac:	b	173b4 <__assert_fail@plt+0x6440>
   173b0:	nop	{0}
   173b4:	ldrb	r2, [fp, #-13]
   173b8:	ldrb	r3, [fp, #-14]
   173bc:	sub	r3, r2, r3
   173c0:	mov	r0, r3
   173c4:	sub	sp, fp, #12
   173c8:	ldrd	r4, [sp]
   173cc:	ldr	fp, [sp, #8]
   173d0:	add	sp, sp, #12
   173d4:	pop	{pc}		; (ldr pc, [sp], #4)
   173d8:	str	r4, [sp, #-12]!
   173dc:	str	fp, [sp, #4]
   173e0:	str	lr, [sp, #8]
   173e4:	add	fp, sp, #8
   173e8:	sub	sp, sp, #52	; 0x34
   173ec:	str	r0, [fp, #-48]	; 0xffffffd0
   173f0:	str	r1, [fp, #-52]	; 0xffffffcc
   173f4:	str	r2, [fp, #-56]	; 0xffffffc8
   173f8:	str	r3, [fp, #-60]	; 0xffffffc4
   173fc:	ldr	r3, [fp, #4]
   17400:	cmp	r3, #0
   17404:	bne	17414 <__assert_fail@plt+0x64a0>
   17408:	movw	r3, #36620	; 0x8f0c
   1740c:	movt	r3, #1
   17410:	str	r3, [fp, #4]
   17414:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17418:	cmp	r3, #0
   1741c:	bne	17430 <__assert_fail@plt+0x64bc>
   17420:	ldr	r3, [fp, #12]
   17424:	str	r3, [fp, #-56]	; 0xffffffc8
   17428:	mov	r3, #1024	; 0x400
   1742c:	str	r3, [fp, #-60]	; 0xffffffc4
   17430:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17434:	str	r3, [fp, #-16]
   17438:	mvn	r3, #-2147483648	; 0x80000000
   1743c:	str	r3, [fp, #-24]	; 0xffffffe8
   17440:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17444:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17448:	cmp	r2, r3
   1744c:	movcc	r3, r2
   17450:	movcs	r3, r3
   17454:	str	r3, [fp, #-20]	; 0xffffffec
   17458:	b	17644 <__assert_fail@plt+0x66d0>
   1745c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17460:	ldr	r4, [fp, #8]
   17464:	ldr	r2, [fp, #-16]
   17468:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1746c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17470:	blx	r4
   17474:	str	r0, [fp, #-28]	; 0xffffffe4
   17478:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1747c:	cmp	r3, #0
   17480:	bge	174cc <__assert_fail@plt+0x6558>
   17484:	ldr	r2, [fp, #-16]
   17488:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1748c:	cmp	r2, r3
   17490:	beq	174c4 <__assert_fail@plt+0x6550>
   17494:	bl	10e90 <__errno_location@plt>
   17498:	mov	r3, r0
   1749c:	ldr	r3, [r3]
   174a0:	str	r3, [fp, #-32]	; 0xffffffe0
   174a4:	ldr	r3, [fp, #4]
   174a8:	ldr	r3, [r3, #8]
   174ac:	ldr	r0, [fp, #-16]
   174b0:	blx	r3
   174b4:	bl	10e90 <__errno_location@plt>
   174b8:	mov	r2, r0
   174bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   174c0:	str	r3, [r2]
   174c4:	mov	r3, #0
   174c8:	b	17690 <__assert_fail@plt+0x671c>
   174cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   174d0:	str	r3, [fp, #-36]	; 0xffffffdc
   174d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   174d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   174dc:	cmp	r2, r3
   174e0:	bge	175c4 <__assert_fail@plt+0x6650>
   174e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   174e8:	add	r2, r3, #1
   174ec:	str	r2, [fp, #-36]	; 0xffffffdc
   174f0:	mov	r2, r3
   174f4:	ldr	r3, [fp, #-16]
   174f8:	add	r3, r3, r2
   174fc:	mov	r2, #0
   17500:	strb	r2, [r3]
   17504:	ldr	r2, [fp, #-16]
   17508:	ldr	r3, [fp, #12]
   1750c:	cmp	r2, r3
   17510:	bne	1755c <__assert_fail@plt+0x65e8>
   17514:	ldr	r3, [fp, #4]
   17518:	ldr	r3, [r3]
   1751c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17520:	mov	r0, r2
   17524:	blx	r3
   17528:	str	r0, [fp, #-40]	; 0xffffffd8
   1752c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17530:	str	r3, [fp, #-20]	; 0xffffffec
   17534:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17538:	cmp	r3, #0
   1753c:	beq	17654 <__assert_fail@plt+0x66e0>
   17540:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17544:	mov	r2, r3
   17548:	ldr	r1, [fp, #-16]
   1754c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17550:	bl	10d34 <memcpy@plt>
   17554:	mov	r3, r0
   17558:	b	17690 <__assert_fail@plt+0x671c>
   1755c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17560:	ldr	r3, [fp, #-20]	; 0xffffffec
   17564:	cmp	r2, r3
   17568:	bge	175bc <__assert_fail@plt+0x6648>
   1756c:	ldr	r2, [fp, #-16]
   17570:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17574:	cmp	r2, r3
   17578:	beq	175bc <__assert_fail@plt+0x6648>
   1757c:	ldr	r3, [fp, #4]
   17580:	ldr	r3, [r3, #4]
   17584:	cmp	r3, #0
   17588:	beq	175bc <__assert_fail@plt+0x6648>
   1758c:	ldr	r3, [fp, #4]
   17590:	ldr	r3, [r3, #4]
   17594:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17598:	mov	r1, r2
   1759c:	ldr	r0, [fp, #-16]
   175a0:	blx	r3
   175a4:	str	r0, [fp, #-44]	; 0xffffffd4
   175a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   175ac:	cmp	r3, #0
   175b0:	beq	175bc <__assert_fail@plt+0x6648>
   175b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   175b8:	b	17690 <__assert_fail@plt+0x671c>
   175bc:	ldr	r3, [fp, #-16]
   175c0:	b	17690 <__assert_fail@plt+0x671c>
   175c4:	ldr	r2, [fp, #-16]
   175c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   175cc:	cmp	r2, r3
   175d0:	beq	175e4 <__assert_fail@plt+0x6670>
   175d4:	ldr	r3, [fp, #4]
   175d8:	ldr	r3, [r3, #8]
   175dc:	ldr	r0, [fp, #-16]
   175e0:	blx	r3
   175e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   175e8:	lsr	r2, r3, #31
   175ec:	add	r3, r2, r3
   175f0:	asr	r3, r3, #1
   175f4:	mov	r2, r3
   175f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   175fc:	cmp	r3, r2
   17600:	blt	1761c <__assert_fail@plt+0x66a8>
   17604:	bl	10e90 <__errno_location@plt>
   17608:	mov	r2, r0
   1760c:	mov	r3, #36	; 0x24
   17610:	str	r3, [r2]
   17614:	mov	r3, #0
   17618:	b	17690 <__assert_fail@plt+0x671c>
   1761c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17620:	lsl	r3, r3, #1
   17624:	add	r3, r3, #1
   17628:	str	r3, [fp, #-20]	; 0xffffffec
   1762c:	ldr	r3, [fp, #4]
   17630:	ldr	r3, [r3]
   17634:	ldr	r2, [fp, #-20]	; 0xffffffec
   17638:	mov	r0, r2
   1763c:	blx	r3
   17640:	str	r0, [fp, #-16]
   17644:	ldr	r3, [fp, #-16]
   17648:	cmp	r3, #0
   1764c:	bne	1745c <__assert_fail@plt+0x64e8>
   17650:	b	17658 <__assert_fail@plt+0x66e4>
   17654:	nop	{0}
   17658:	ldr	r3, [fp, #4]
   1765c:	ldr	r3, [r3, #12]
   17660:	cmp	r3, #0
   17664:	beq	1767c <__assert_fail@plt+0x6708>
   17668:	ldr	r3, [fp, #4]
   1766c:	ldr	r3, [r3, #12]
   17670:	ldr	r2, [fp, #-20]	; 0xffffffec
   17674:	mov	r0, r2
   17678:	blx	r3
   1767c:	bl	10e90 <__errno_location@plt>
   17680:	mov	r2, r0
   17684:	mov	r3, #12
   17688:	str	r3, [r2]
   1768c:	mov	r3, #0
   17690:	mov	r0, r3
   17694:	sub	sp, fp, #8
   17698:	ldr	r4, [sp]
   1769c:	ldr	fp, [sp, #4]
   176a0:	add	sp, sp, #8
   176a4:	pop	{pc}		; (ldr pc, [sp], #4)
   176a8:	str	fp, [sp, #-8]!
   176ac:	str	lr, [sp, #4]
   176b0:	add	fp, sp, #4
   176b4:	sub	sp, sp, #1056	; 0x420
   176b8:	str	r0, [fp, #-1032]	; 0xfffffbf8
   176bc:	str	r1, [fp, #-1036]	; 0xfffffbf4
   176c0:	str	r2, [fp, #-1040]	; 0xfffffbf0
   176c4:	str	r3, [fp, #-1044]	; 0xfffffbec
   176c8:	sub	r3, fp, #1024	; 0x400
   176cc:	sub	r3, r3, #4
   176d0:	str	r3, [sp, #8]
   176d4:	ldr	r3, [fp, #8]
   176d8:	str	r3, [sp, #4]
   176dc:	ldr	r3, [fp, #4]
   176e0:	str	r3, [sp]
   176e4:	ldr	r3, [fp, #-1044]	; 0xfffffbec
   176e8:	ldr	r2, [fp, #-1040]	; 0xfffffbf0
   176ec:	ldr	r1, [fp, #-1036]	; 0xfffffbf4
   176f0:	ldr	r0, [fp, #-1032]	; 0xfffffbf8
   176f4:	bl	173d8 <__assert_fail@plt+0x6464>
   176f8:	mov	r3, r0
   176fc:	mov	r0, r3
   17700:	sub	sp, fp, #4
   17704:	ldr	fp, [sp]
   17708:	add	sp, sp, #4
   1770c:	pop	{pc}		; (ldr pc, [sp], #4)
   17710:	str	fp, [sp, #-8]!
   17714:	str	lr, [sp, #4]
   17718:	add	fp, sp, #4
   1771c:	sub	sp, sp, #16
   17720:	str	r0, [fp, #-16]
   17724:	ldr	r0, [fp, #-16]
   17728:	bl	10dc4 <__fpending@plt>
   1772c:	mov	r3, r0
   17730:	cmp	r3, #0
   17734:	movne	r3, #1
   17738:	moveq	r3, #0
   1773c:	strb	r3, [fp, #-5]
   17740:	ldr	r0, [fp, #-16]
   17744:	bl	10dd0 <ferror_unlocked@plt>
   17748:	mov	r3, r0
   1774c:	cmp	r3, #0
   17750:	movne	r3, #1
   17754:	moveq	r3, #0
   17758:	strb	r3, [fp, #-6]
   1775c:	ldr	r0, [fp, #-16]
   17760:	bl	177f4 <__assert_fail@plt+0x6880>
   17764:	mov	r3, r0
   17768:	cmp	r3, #0
   1776c:	movne	r3, #1
   17770:	moveq	r3, #0
   17774:	strb	r3, [fp, #-7]
   17778:	ldrb	r3, [fp, #-6]
   1777c:	cmp	r3, #0
   17780:	bne	177b0 <__assert_fail@plt+0x683c>
   17784:	ldrb	r3, [fp, #-7]
   17788:	cmp	r3, #0
   1778c:	beq	177dc <__assert_fail@plt+0x6868>
   17790:	ldrb	r3, [fp, #-5]
   17794:	cmp	r3, #0
   17798:	bne	177b0 <__assert_fail@plt+0x683c>
   1779c:	bl	10e90 <__errno_location@plt>
   177a0:	mov	r3, r0
   177a4:	ldr	r3, [r3]
   177a8:	cmp	r3, #9
   177ac:	beq	177dc <__assert_fail@plt+0x6868>
   177b0:	ldrb	r3, [fp, #-7]
   177b4:	eor	r3, r3, #1
   177b8:	uxtb	r3, r3
   177bc:	cmp	r3, #0
   177c0:	beq	177d4 <__assert_fail@plt+0x6860>
   177c4:	bl	10e90 <__errno_location@plt>
   177c8:	mov	r2, r0
   177cc:	mov	r3, #0
   177d0:	str	r3, [r2]
   177d4:	mvn	r3, #0
   177d8:	b	177e0 <__assert_fail@plt+0x686c>
   177dc:	mov	r3, #0
   177e0:	mov	r0, r3
   177e4:	sub	sp, fp, #4
   177e8:	ldr	fp, [sp]
   177ec:	add	sp, sp, #4
   177f0:	pop	{pc}		; (ldr pc, [sp], #4)
   177f4:	str	fp, [sp, #-8]!
   177f8:	str	lr, [sp, #4]
   177fc:	add	fp, sp, #4
   17800:	sub	sp, sp, #32
   17804:	str	r0, [fp, #-24]	; 0xffffffe8
   17808:	mov	r3, #0
   1780c:	str	r3, [fp, #-8]
   17810:	mov	r3, #0
   17814:	str	r3, [fp, #-12]
   17818:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1781c:	bl	10eb4 <fileno@plt>
   17820:	str	r0, [fp, #-16]
   17824:	ldr	r3, [fp, #-16]
   17828:	cmp	r3, #0
   1782c:	bge	17840 <__assert_fail@plt+0x68cc>
   17830:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17834:	bl	10ee4 <fclose@plt>
   17838:	mov	r3, r0
   1783c:	b	178e4 <__assert_fail@plt+0x6970>
   17840:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17844:	bl	10e18 <__freading@plt>
   17848:	mov	r3, r0
   1784c:	cmp	r3, #0
   17850:	beq	1788c <__assert_fail@plt+0x6918>
   17854:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17858:	bl	10eb4 <fileno@plt>
   1785c:	mov	r1, r0
   17860:	mov	r3, #1
   17864:	str	r3, [sp]
   17868:	mov	r2, #0
   1786c:	mov	r3, #0
   17870:	mov	r0, r1
   17874:	bl	10dac <lseek64@plt>
   17878:	mvn	r2, #0
   1787c:	mvn	r3, #0
   17880:	cmp	r1, r3
   17884:	cmpeq	r0, r2
   17888:	beq	178b0 <__assert_fail@plt+0x693c>
   1788c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17890:	bl	1794c <__assert_fail@plt+0x69d8>
   17894:	mov	r3, r0
   17898:	cmp	r3, #0
   1789c:	beq	178b0 <__assert_fail@plt+0x693c>
   178a0:	bl	10e90 <__errno_location@plt>
   178a4:	mov	r3, r0
   178a8:	ldr	r3, [r3]
   178ac:	str	r3, [fp, #-8]
   178b0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   178b4:	bl	10ee4 <fclose@plt>
   178b8:	str	r0, [fp, #-12]
   178bc:	ldr	r3, [fp, #-8]
   178c0:	cmp	r3, #0
   178c4:	beq	178e0 <__assert_fail@plt+0x696c>
   178c8:	bl	10e90 <__errno_location@plt>
   178cc:	mov	r2, r0
   178d0:	ldr	r3, [fp, #-8]
   178d4:	str	r3, [r2]
   178d8:	mvn	r3, #0
   178dc:	str	r3, [fp, #-12]
   178e0:	ldr	r3, [fp, #-12]
   178e4:	mov	r0, r3
   178e8:	sub	sp, fp, #4
   178ec:	ldr	fp, [sp]
   178f0:	add	sp, sp, #4
   178f4:	pop	{pc}		; (ldr pc, [sp], #4)
   178f8:	str	fp, [sp, #-8]!
   178fc:	str	lr, [sp, #4]
   17900:	add	fp, sp, #4
   17904:	sub	sp, sp, #16
   17908:	str	r0, [fp, #-8]
   1790c:	ldr	r3, [fp, #-8]
   17910:	ldr	r3, [r3]
   17914:	and	r3, r3, #256	; 0x100
   17918:	cmp	r3, #0
   1791c:	beq	17938 <__assert_fail@plt+0x69c4>
   17920:	mov	r3, #1
   17924:	str	r3, [sp]
   17928:	mov	r2, #0
   1792c:	mov	r3, #0
   17930:	ldr	r0, [fp, #-8]
   17934:	bl	179b8 <__assert_fail@plt+0x6a44>
   17938:	nop	{0}
   1793c:	sub	sp, fp, #4
   17940:	ldr	fp, [sp]
   17944:	add	sp, sp, #4
   17948:	pop	{pc}		; (ldr pc, [sp], #4)
   1794c:	str	fp, [sp, #-8]!
   17950:	str	lr, [sp, #4]
   17954:	add	fp, sp, #4
   17958:	sub	sp, sp, #8
   1795c:	str	r0, [fp, #-8]
   17960:	ldr	r3, [fp, #-8]
   17964:	cmp	r3, #0
   17968:	beq	17980 <__assert_fail@plt+0x6a0c>
   1796c:	ldr	r0, [fp, #-8]
   17970:	bl	10e18 <__freading@plt>
   17974:	mov	r3, r0
   17978:	cmp	r3, #0
   1797c:	bne	17990 <__assert_fail@plt+0x6a1c>
   17980:	ldr	r0, [fp, #-8]
   17984:	bl	10d10 <fflush@plt>
   17988:	mov	r3, r0
   1798c:	b	179a4 <__assert_fail@plt+0x6a30>
   17990:	ldr	r0, [fp, #-8]
   17994:	bl	178f8 <__assert_fail@plt+0x6984>
   17998:	ldr	r0, [fp, #-8]
   1799c:	bl	10d10 <fflush@plt>
   179a0:	mov	r3, r0
   179a4:	mov	r0, r3
   179a8:	sub	sp, fp, #4
   179ac:	ldr	fp, [sp]
   179b0:	add	sp, sp, #4
   179b4:	pop	{pc}		; (ldr pc, [sp], #4)
   179b8:	str	fp, [sp, #-8]!
   179bc:	str	lr, [sp, #4]
   179c0:	add	fp, sp, #4
   179c4:	sub	sp, sp, #32
   179c8:	str	r0, [fp, #-16]
   179cc:	strd	r2, [fp, #-28]	; 0xffffffe4
   179d0:	ldr	r3, [fp, #-16]
   179d4:	ldr	r2, [r3, #8]
   179d8:	ldr	r3, [fp, #-16]
   179dc:	ldr	r3, [r3, #4]
   179e0:	cmp	r2, r3
   179e4:	bne	17a7c <__assert_fail@plt+0x6b08>
   179e8:	ldr	r3, [fp, #-16]
   179ec:	ldr	r2, [r3, #20]
   179f0:	ldr	r3, [fp, #-16]
   179f4:	ldr	r3, [r3, #16]
   179f8:	cmp	r2, r3
   179fc:	bne	17a7c <__assert_fail@plt+0x6b08>
   17a00:	ldr	r3, [fp, #-16]
   17a04:	ldr	r3, [r3, #36]	; 0x24
   17a08:	cmp	r3, #0
   17a0c:	bne	17a7c <__assert_fail@plt+0x6b08>
   17a10:	ldr	r0, [fp, #-16]
   17a14:	bl	10eb4 <fileno@plt>
   17a18:	mov	r1, r0
   17a1c:	ldr	r3, [fp, #4]
   17a20:	str	r3, [sp]
   17a24:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17a28:	mov	r0, r1
   17a2c:	bl	10dac <lseek64@plt>
   17a30:	strd	r0, [fp, #-12]
   17a34:	ldrd	r2, [fp, #-12]
   17a38:	mvn	r0, #0
   17a3c:	mvn	r1, #0
   17a40:	cmp	r3, r1
   17a44:	cmpeq	r2, r0
   17a48:	bne	17a54 <__assert_fail@plt+0x6ae0>
   17a4c:	mvn	r3, #0
   17a50:	b	17a94 <__assert_fail@plt+0x6b20>
   17a54:	ldr	r3, [fp, #-16]
   17a58:	ldr	r3, [r3]
   17a5c:	bic	r2, r3, #16
   17a60:	ldr	r3, [fp, #-16]
   17a64:	str	r2, [r3]
   17a68:	ldr	r1, [fp, #-16]
   17a6c:	ldrd	r2, [fp, #-12]
   17a70:	strd	r2, [r1, #80]	; 0x50
   17a74:	mov	r3, #0
   17a78:	b	17a94 <__assert_fail@plt+0x6b20>
   17a7c:	ldr	r3, [fp, #4]
   17a80:	str	r3, [sp]
   17a84:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17a88:	ldr	r0, [fp, #-16]
   17a8c:	bl	10ef0 <fseeko64@plt>
   17a90:	mov	r3, r0
   17a94:	mov	r0, r3
   17a98:	sub	sp, fp, #4
   17a9c:	ldr	fp, [sp]
   17aa0:	add	sp, sp, #4
   17aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17aa8:	str	fp, [sp, #-8]!
   17aac:	str	lr, [sp, #4]
   17ab0:	add	fp, sp, #4
   17ab4:	bl	10e90 <__errno_location@plt>
   17ab8:	mov	r2, r0
   17abc:	mov	r3, #12
   17ac0:	str	r3, [r2]
   17ac4:	mov	r3, #0
   17ac8:	mov	r0, r3
   17acc:	sub	sp, fp, #4
   17ad0:	ldr	fp, [sp]
   17ad4:	add	sp, sp, #4
   17ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   17adc:	str	fp, [sp, #-8]!
   17ae0:	str	lr, [sp, #4]
   17ae4:	add	fp, sp, #4
   17ae8:	sub	sp, sp, #8
   17aec:	str	r0, [fp, #-8]
   17af0:	ldr	r3, [fp, #-8]
   17af4:	mov	r0, r3
   17af8:	bl	1700c <__assert_fail@plt+0x6098>
   17afc:	mov	r3, r0
   17b00:	mov	r0, r3
   17b04:	sub	sp, fp, #4
   17b08:	ldr	fp, [sp]
   17b0c:	add	sp, sp, #4
   17b10:	pop	{pc}		; (ldr pc, [sp], #4)
   17b14:	str	fp, [sp, #-8]!
   17b18:	str	lr, [sp, #4]
   17b1c:	add	fp, sp, #4
   17b20:	sub	sp, sp, #8
   17b24:	str	r0, [fp, #-8]
   17b28:	str	r1, [fp, #-12]
   17b2c:	ldr	r3, [fp, #-12]
   17b30:	cmp	r3, #0
   17b34:	moveq	r3, #1
   17b38:	movne	r3, #0
   17b3c:	uxtb	r3, r3
   17b40:	mov	r2, r3
   17b44:	ldr	r3, [fp, #-12]
   17b48:	orr	r3, r2, r3
   17b4c:	mov	r1, r3
   17b50:	ldr	r0, [fp, #-8]
   17b54:	bl	1709c <__assert_fail@plt+0x6128>
   17b58:	mov	r3, r0
   17b5c:	mov	r0, r3
   17b60:	sub	sp, fp, #4
   17b64:	ldr	fp, [sp]
   17b68:	add	sp, sp, #4
   17b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17b70:	str	fp, [sp, #-8]!
   17b74:	str	lr, [sp, #4]
   17b78:	add	fp, sp, #4
   17b7c:	sub	sp, sp, #8
   17b80:	str	r0, [fp, #-8]
   17b84:	str	r1, [fp, #-12]
   17b88:	ldr	r3, [fp, #-8]
   17b8c:	ldr	r2, [fp, #-12]
   17b90:	mov	r1, r2
   17b94:	mov	r0, r3
   17b98:	bl	16f3c <__assert_fail@plt+0x5fc8>
   17b9c:	mov	r3, r0
   17ba0:	mov	r0, r3
   17ba4:	sub	sp, fp, #4
   17ba8:	ldr	fp, [sp]
   17bac:	add	sp, sp, #4
   17bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bb4:	str	fp, [sp, #-8]!
   17bb8:	str	lr, [sp, #4]
   17bbc:	add	fp, sp, #4
   17bc0:	sub	sp, sp, #16
   17bc4:	str	r0, [fp, #-8]
   17bc8:	str	r1, [fp, #-12]
   17bcc:	str	r2, [fp, #-16]
   17bd0:	ldr	r3, [fp, #-12]
   17bd4:	cmp	r3, #0
   17bd8:	beq	17be8 <__assert_fail@plt+0x6c74>
   17bdc:	ldr	r3, [fp, #-16]
   17be0:	cmp	r3, #0
   17be4:	bne	17bf8 <__assert_fail@plt+0x6c84>
   17be8:	mov	r3, #1
   17bec:	str	r3, [fp, #-16]
   17bf0:	ldr	r3, [fp, #-16]
   17bf4:	str	r3, [fp, #-12]
   17bf8:	ldr	r3, [fp, #-12]
   17bfc:	ldr	r2, [fp, #-16]
   17c00:	mov	r1, r3
   17c04:	ldr	r0, [fp, #-8]
   17c08:	bl	17d44 <__assert_fail@plt+0x6dd0>
   17c0c:	mov	r3, r0
   17c10:	mov	r0, r3
   17c14:	sub	sp, fp, #4
   17c18:	ldr	fp, [sp]
   17c1c:	add	sp, sp, #4
   17c20:	pop	{pc}		; (ldr pc, [sp], #4)
   17c24:	str	fp, [sp, #-8]!
   17c28:	str	lr, [sp, #4]
   17c2c:	add	fp, sp, #4
   17c30:	sub	sp, sp, #8
   17c34:	mov	r0, #14
   17c38:	bl	10f38 <nl_langinfo@plt>
   17c3c:	str	r0, [fp, #-8]
   17c40:	ldr	r3, [fp, #-8]
   17c44:	cmp	r3, #0
   17c48:	bne	17c58 <__assert_fail@plt+0x6ce4>
   17c4c:	movw	r3, #36608	; 0x8f00
   17c50:	movt	r3, #1
   17c54:	str	r3, [fp, #-8]
   17c58:	ldr	r3, [fp, #-8]
   17c5c:	ldrb	r3, [r3]
   17c60:	cmp	r3, #0
   17c64:	bne	17c74 <__assert_fail@plt+0x6d00>
   17c68:	movw	r3, #36612	; 0x8f04
   17c6c:	movt	r3, #1
   17c70:	str	r3, [fp, #-8]
   17c74:	ldr	r3, [fp, #-8]
   17c78:	mov	r0, r3
   17c7c:	sub	sp, fp, #4
   17c80:	ldr	fp, [sp]
   17c84:	add	sp, sp, #4
   17c88:	pop	{pc}		; (ldr pc, [sp], #4)
   17c8c:	str	fp, [sp, #-8]!
   17c90:	str	lr, [sp, #4]
   17c94:	add	fp, sp, #4
   17c98:	sub	sp, sp, #32
   17c9c:	str	r0, [fp, #-24]	; 0xffffffe8
   17ca0:	str	r1, [fp, #-28]	; 0xffffffe4
   17ca4:	str	r2, [fp, #-32]	; 0xffffffe0
   17ca8:	str	r3, [fp, #-36]	; 0xffffffdc
   17cac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cb0:	cmp	r3, #0
   17cb4:	bne	17cc0 <__assert_fail@plt+0x6d4c>
   17cb8:	sub	r3, fp, #16
   17cbc:	str	r3, [fp, #-24]	; 0xffffffe8
   17cc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17cc4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17cc8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17ccc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17cd0:	bl	10ddc <mbrtowc@plt>
   17cd4:	str	r0, [fp, #-8]
   17cd8:	ldr	r3, [fp, #-8]
   17cdc:	cmn	r3, #3
   17ce0:	bls	17d2c <__assert_fail@plt+0x6db8>
   17ce4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ce8:	cmp	r3, #0
   17cec:	beq	17d2c <__assert_fail@plt+0x6db8>
   17cf0:	mov	r0, #0
   17cf4:	bl	17de8 <__assert_fail@plt+0x6e74>
   17cf8:	mov	r3, r0
   17cfc:	eor	r3, r3, #1
   17d00:	uxtb	r3, r3
   17d04:	cmp	r3, #0
   17d08:	beq	17d2c <__assert_fail@plt+0x6db8>
   17d0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17d10:	ldrb	r3, [r3]
   17d14:	strb	r3, [fp, #-9]
   17d18:	ldrb	r2, [fp, #-9]
   17d1c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d20:	str	r2, [r3]
   17d24:	mov	r3, #1
   17d28:	b	17d30 <__assert_fail@plt+0x6dbc>
   17d2c:	ldr	r3, [fp, #-8]
   17d30:	mov	r0, r3
   17d34:	sub	sp, fp, #4
   17d38:	ldr	fp, [sp]
   17d3c:	add	sp, sp, #4
   17d40:	pop	{pc}		; (ldr pc, [sp], #4)
   17d44:	str	fp, [sp, #-8]!
   17d48:	str	lr, [sp, #4]
   17d4c:	add	fp, sp, #4
   17d50:	sub	sp, sp, #24
   17d54:	str	r0, [fp, #-16]
   17d58:	str	r1, [fp, #-20]	; 0xffffffec
   17d5c:	str	r2, [fp, #-24]	; 0xffffffe8
   17d60:	mov	ip, #0
   17d64:	ldr	r2, [fp, #-20]	; 0xffffffec
   17d68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d6c:	umull	r0, r1, r2, r3
   17d70:	mov	r2, #0
   17d74:	mov	r3, #0
   17d78:	mov	r2, r1
   17d7c:	mov	r3, #0
   17d80:	cmp	r2, #0
   17d84:	beq	17d8c <__assert_fail@plt+0x6e18>
   17d88:	mov	ip, #1
   17d8c:	mov	r3, r0
   17d90:	str	r3, [fp, #-8]
   17d94:	mov	r3, ip
   17d98:	and	r3, r3, #1
   17d9c:	uxtb	r3, r3
   17da0:	cmp	r3, #0
   17da4:	beq	17dc0 <__assert_fail@plt+0x6e4c>
   17da8:	bl	10e90 <__errno_location@plt>
   17dac:	mov	r2, r0
   17db0:	mov	r3, #12
   17db4:	str	r3, [r2]
   17db8:	mov	r3, #0
   17dbc:	b	17dd4 <__assert_fail@plt+0x6e60>
   17dc0:	ldr	r3, [fp, #-8]
   17dc4:	mov	r1, r3
   17dc8:	ldr	r0, [fp, #-16]
   17dcc:	bl	1709c <__assert_fail@plt+0x6128>
   17dd0:	mov	r3, r0
   17dd4:	mov	r0, r3
   17dd8:	sub	sp, fp, #4
   17ddc:	ldr	fp, [sp]
   17de0:	add	sp, sp, #4
   17de4:	pop	{pc}		; (ldr pc, [sp], #4)
   17de8:	str	fp, [sp, #-8]!
   17dec:	str	lr, [sp, #4]
   17df0:	add	fp, sp, #4
   17df4:	sub	sp, sp, #272	; 0x110
   17df8:	str	r0, [fp, #-272]	; 0xfffffef0
   17dfc:	sub	r3, fp, #264	; 0x108
   17e00:	movw	r2, #257	; 0x101
   17e04:	mov	r1, r3
   17e08:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17e0c:	bl	17fac <__assert_fail@plt+0x7038>
   17e10:	mov	r3, r0
   17e14:	cmp	r3, #0
   17e18:	beq	17e24 <__assert_fail@plt+0x6eb0>
   17e1c:	mov	r3, #0
   17e20:	b	17e78 <__assert_fail@plt+0x6f04>
   17e24:	sub	r3, fp, #264	; 0x108
   17e28:	movw	r1, #36636	; 0x8f1c
   17e2c:	movt	r1, #1
   17e30:	mov	r0, r3
   17e34:	bl	10cf8 <strcmp@plt>
   17e38:	mov	r3, r0
   17e3c:	cmp	r3, #0
   17e40:	beq	17e6c <__assert_fail@plt+0x6ef8>
   17e44:	sub	r3, fp, #264	; 0x108
   17e48:	movw	r1, #36640	; 0x8f20
   17e4c:	movt	r1, #1
   17e50:	mov	r0, r3
   17e54:	bl	10cf8 <strcmp@plt>
   17e58:	mov	r3, r0
   17e5c:	cmp	r3, #0
   17e60:	beq	17e6c <__assert_fail@plt+0x6ef8>
   17e64:	mov	r3, #1
   17e68:	b	17e70 <__assert_fail@plt+0x6efc>
   17e6c:	mov	r3, #0
   17e70:	and	r3, r3, #1
   17e74:	uxtb	r3, r3
   17e78:	mov	r0, r3
   17e7c:	sub	sp, fp, #4
   17e80:	ldr	fp, [sp]
   17e84:	add	sp, sp, #4
   17e88:	pop	{pc}		; (ldr pc, [sp], #4)
   17e8c:	str	fp, [sp, #-8]!
   17e90:	str	lr, [sp, #4]
   17e94:	add	fp, sp, #4
   17e98:	sub	sp, sp, #16
   17e9c:	str	r0, [fp, #-16]
   17ea0:	mov	r1, #0
   17ea4:	ldr	r0, [fp, #-16]
   17ea8:	bl	10f08 <setlocale@plt>
   17eac:	str	r0, [fp, #-8]
   17eb0:	ldr	r3, [fp, #-8]
   17eb4:	mov	r0, r3
   17eb8:	sub	sp, fp, #4
   17ebc:	ldr	fp, [sp]
   17ec0:	add	sp, sp, #4
   17ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ec8:	str	fp, [sp, #-8]!
   17ecc:	str	lr, [sp, #4]
   17ed0:	add	fp, sp, #4
   17ed4:	sub	sp, sp, #24
   17ed8:	str	r0, [fp, #-16]
   17edc:	str	r1, [fp, #-20]	; 0xffffffec
   17ee0:	str	r2, [fp, #-24]	; 0xffffffe8
   17ee4:	ldr	r0, [fp, #-16]
   17ee8:	bl	17e8c <__assert_fail@plt+0x6f18>
   17eec:	str	r0, [fp, #-8]
   17ef0:	ldr	r3, [fp, #-8]
   17ef4:	cmp	r3, #0
   17ef8:	bne	17f1c <__assert_fail@plt+0x6fa8>
   17efc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f00:	cmp	r3, #0
   17f04:	beq	17f14 <__assert_fail@plt+0x6fa0>
   17f08:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f0c:	mov	r2, #0
   17f10:	strb	r2, [r3]
   17f14:	mov	r3, #22
   17f18:	b	17f98 <__assert_fail@plt+0x7024>
   17f1c:	ldr	r0, [fp, #-8]
   17f20:	bl	10e6c <strlen@plt>
   17f24:	str	r0, [fp, #-12]
   17f28:	ldr	r2, [fp, #-12]
   17f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f30:	cmp	r2, r3
   17f34:	bcs	17f58 <__assert_fail@plt+0x6fe4>
   17f38:	ldr	r3, [fp, #-12]
   17f3c:	add	r3, r3, #1
   17f40:	mov	r2, r3
   17f44:	ldr	r1, [fp, #-8]
   17f48:	ldr	r0, [fp, #-20]	; 0xffffffec
   17f4c:	bl	10d34 <memcpy@plt>
   17f50:	mov	r3, #0
   17f54:	b	17f98 <__assert_fail@plt+0x7024>
   17f58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f5c:	cmp	r3, #0
   17f60:	beq	17f94 <__assert_fail@plt+0x7020>
   17f64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f68:	sub	r3, r3, #1
   17f6c:	mov	r2, r3
   17f70:	ldr	r1, [fp, #-8]
   17f74:	ldr	r0, [fp, #-20]	; 0xffffffec
   17f78:	bl	10d34 <memcpy@plt>
   17f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17f80:	sub	r3, r3, #1
   17f84:	ldr	r2, [fp, #-20]	; 0xffffffec
   17f88:	add	r3, r2, r3
   17f8c:	mov	r2, #0
   17f90:	strb	r2, [r3]
   17f94:	mov	r3, #34	; 0x22
   17f98:	mov	r0, r3
   17f9c:	sub	sp, fp, #4
   17fa0:	ldr	fp, [sp]
   17fa4:	add	sp, sp, #4
   17fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fac:	str	fp, [sp, #-8]!
   17fb0:	str	lr, [sp, #4]
   17fb4:	add	fp, sp, #4
   17fb8:	sub	sp, sp, #16
   17fbc:	str	r0, [fp, #-8]
   17fc0:	str	r1, [fp, #-12]
   17fc4:	str	r2, [fp, #-16]
   17fc8:	ldr	r2, [fp, #-16]
   17fcc:	ldr	r1, [fp, #-12]
   17fd0:	ldr	r0, [fp, #-8]
   17fd4:	bl	17ec8 <__assert_fail@plt+0x6f54>
   17fd8:	mov	r3, r0
   17fdc:	mov	r0, r3
   17fe0:	sub	sp, fp, #4
   17fe4:	ldr	fp, [sp]
   17fe8:	add	sp, sp, #4
   17fec:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff0:	str	fp, [sp, #-8]!
   17ff4:	str	lr, [sp, #4]
   17ff8:	add	fp, sp, #4
   17ffc:	sub	sp, sp, #8
   18000:	str	r0, [fp, #-8]
   18004:	ldr	r0, [fp, #-8]
   18008:	bl	17e8c <__assert_fail@plt+0x6f18>
   1800c:	mov	r3, r0
   18010:	mov	r0, r3
   18014:	sub	sp, fp, #4
   18018:	ldr	fp, [sp]
   1801c:	add	sp, sp, #4
   18020:	pop	{pc}		; (ldr pc, [sp], #4)
   18024:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18028:	mov	r7, r0
   1802c:	ldr	r6, [pc, #72]	; 1807c <__assert_fail@plt+0x7108>
   18030:	ldr	r5, [pc, #72]	; 18080 <__assert_fail@plt+0x710c>
   18034:	add	r6, pc, r6
   18038:	add	r5, pc, r5
   1803c:	sub	r6, r6, r5
   18040:	mov	r8, r1
   18044:	mov	r9, r2
   18048:	bl	10cc0 <calloc@plt-0x20>
   1804c:	asrs	r6, r6, #2
   18050:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18054:	mov	r4, #0
   18058:	add	r4, r4, #1
   1805c:	ldr	r3, [r5], #4
   18060:	mov	r2, r9
   18064:	mov	r1, r8
   18068:	mov	r0, r7
   1806c:	blx	r3
   18070:	cmp	r6, r4
   18074:	bne	18058 <__assert_fail@plt+0x70e4>
   18078:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1807c:	ldrdeq	r1, [r1], -r8
   18080:	ldrdeq	r1, [r1], -r0
   18084:	bx	lr
   18088:	ldr	r3, [pc, #12]	; 1809c <__assert_fail@plt+0x7128>
   1808c:	mov	r1, #0
   18090:	add	r3, pc, r3
   18094:	ldr	r2, [r3]
   18098:	b	10e9c <__cxa_atexit@plt>
   1809c:	andeq	r2, r1, ip, asr r0
   180a0:	mov	r2, r1
   180a4:	mov	r1, r0
   180a8:	mov	r0, #3
   180ac:	b	10f50 <__xstat64@plt>

Disassembly of section .fini:

000180b0 <.fini>:
   180b0:	push	{r3, lr}
   180b4:	pop	{r3, pc}
