
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

00011338 <.init>:
   11338:	push	{r3, lr}
   1133c:	bl	1171c <__assert_fail@plt+0x4c>
   11340:	pop	{r3, pc}

Disassembly of section .plt:

00011344 <calloc@plt-0x14>:
   11344:	push	{lr}		; (str lr, [sp, #-4]!)
   11348:	ldr	lr, [pc, #4]	; 11354 <calloc@plt-0x4>
   1134c:	add	lr, pc, lr
   11350:	ldr	pc, [lr, #8]!
   11354:	andeq	sp, r1, ip, lsr #25

00011358 <calloc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #118784	; 0x1d000
   11360:	ldr	pc, [ip, #3244]!	; 0xcac

00011364 <fputs_unlocked@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #118784	; 0x1d000
   1136c:	ldr	pc, [ip, #3236]!	; 0xca4

00011370 <raise@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #118784	; 0x1d000
   11378:	ldr	pc, [ip, #3228]!	; 0xc9c

0001137c <fsync@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #118784	; 0x1d000
   11384:	ldr	pc, [ip, #3220]!	; 0xc94

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #118784	; 0x1d000
   11390:	ldr	pc, [ip, #3212]!	; 0xc8c

00011394 <posix_fadvise64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #118784	; 0x1d000
   1139c:	ldr	pc, [ip, #3204]!	; 0xc84

000113a0 <read@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #118784	; 0x1d000
   113a8:	ldr	pc, [ip, #3196]!	; 0xc7c

000113ac <fflush@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #118784	; 0x1d000
   113b4:	ldr	pc, [ip, #3188]!	; 0xc74

000113b8 <sigprocmask@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #118784	; 0x1d000
   113c0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #118784	; 0x1d000
   113cc:	ldr	pc, [ip, #3172]!	; 0xc64

000113d0 <free@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #118784	; 0x1d000
   113d8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113dc <clock_gettime@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #118784	; 0x1d000
   113e4:	ldr	pc, [ip, #3156]!	; 0xc54

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #118784	; 0x1d000
   113f0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #118784	; 0x1d000
   113fc:	ldr	pc, [ip, #3140]!	; 0xc44

00011400 <__strtoull_internal@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #118784	; 0x1d000
   11408:	ldr	pc, [ip, #3132]!	; 0xc3c

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #118784	; 0x1d000
   11414:	ldr	pc, [ip, #3124]!	; 0xc34

00011418 <ftruncate64@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #118784	; 0x1d000
   11420:	ldr	pc, [ip, #3116]!	; 0xc2c

00011424 <dcgettext@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #118784	; 0x1d000
   1142c:	ldr	pc, [ip, #3108]!	; 0xc24

00011430 <dup2@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #118784	; 0x1d000
   11438:	ldr	pc, [ip, #3100]!	; 0xc1c

0001143c <realloc@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #118784	; 0x1d000
   11444:	ldr	pc, [ip, #3092]!	; 0xc14

00011448 <sigismember@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #118784	; 0x1d000
   11450:	ldr	pc, [ip, #3084]!	; 0xc0c

00011454 <textdomain@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #118784	; 0x1d000
   1145c:	ldr	pc, [ip, #3076]!	; 0xc04

00011460 <iswprint@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #118784	; 0x1d000
   11468:	ldr	pc, [ip, #3068]!	; 0xbfc

0001146c <__fxstat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #118784	; 0x1d000
   11474:	ldr	pc, [ip, #3060]!	; 0xbf4

00011478 <sigaction@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #118784	; 0x1d000
   11480:	ldr	pc, [ip, #3052]!	; 0xbec

00011484 <fwrite@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #118784	; 0x1d000
   1148c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011490 <lseek64@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #118784	; 0x1d000
   11498:	ldr	pc, [ip, #3036]!	; 0xbdc

0001149c <__ctype_get_mb_cur_max@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #118784	; 0x1d000
   114a4:	ldr	pc, [ip, #3028]!	; 0xbd4

000114a8 <__fpending@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #118784	; 0x1d000
   114b0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114b4 <mbrtowc@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #118784	; 0x1d000
   114bc:	ldr	pc, [ip, #3012]!	; 0xbc4

000114c0 <error@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #118784	; 0x1d000
   114c8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114cc <open64@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #118784	; 0x1d000
   114d4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114d8 <getenv@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #118784	; 0x1d000
   114e0:	ldr	pc, [ip, #2988]!	; 0xbac

000114e4 <malloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #118784	; 0x1d000
   114ec:	ldr	pc, [ip, #2980]!	; 0xba4

000114f0 <error_at_line@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #118784	; 0x1d000
   114f8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114fc <sigaddset@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #118784	; 0x1d000
   11504:	ldr	pc, [ip, #2964]!	; 0xb94

00011508 <__libc_start_main@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #118784	; 0x1d000
   11510:	ldr	pc, [ip, #2956]!	; 0xb8c

00011514 <__freading@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #118784	; 0x1d000
   1151c:	ldr	pc, [ip, #2948]!	; 0xb84

00011520 <__ctype_tolower_loc@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #118784	; 0x1d000
   11528:	ldr	pc, [ip, #2940]!	; 0xb7c

0001152c <__ctype_toupper_loc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #2932]!	; 0xb74

00011538 <__gmon_start__@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #2924]!	; 0xb6c

00011544 <getopt_long@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #2916]!	; 0xb64

00011550 <__ctype_b_loc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #2908]!	; 0xb5c

0001155c <exit@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #2900]!	; 0xb54

00011568 <bcmp@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2892]!	; 0xb4c

00011574 <strlen@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2884]!	; 0xb44

00011580 <strchr@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2876]!	; 0xb3c

0001158c <getpagesize@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2868]!	; 0xb34

00011598 <__errno_location@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2860]!	; 0xb2c

000115a4 <__sprintf_chk@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2852]!	; 0xb24

000115b0 <__cxa_atexit@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115bc <__vasprintf_chk@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2836]!	; 0xb14

000115c8 <memset@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115d4 <__printf_chk@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2820]!	; 0xb04

000115e0 <write@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2812]!	; 0xafc

000115ec <fileno@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115f8 <__fprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2796]!	; 0xaec

00011604 <fclose@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2788]!	; 0xae4

00011610 <fseeko64@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #118784	; 0x1d000
   11618:	ldr	pc, [ip, #2780]!	; 0xadc

0001161c <fcntl64@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #118784	; 0x1d000
   11624:	ldr	pc, [ip, #2772]!	; 0xad4

00011628 <__overflow@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #118784	; 0x1d000
   11630:	ldr	pc, [ip, #2764]!	; 0xacc

00011634 <setlocale@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #118784	; 0x1d000
   1163c:	ldr	pc, [ip, #2756]!	; 0xac4

00011640 <sigemptyset@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #118784	; 0x1d000
   11648:	ldr	pc, [ip, #2748]!	; 0xabc

0001164c <strrchr@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #118784	; 0x1d000
   11654:	ldr	pc, [ip, #2740]!	; 0xab4

00011658 <nl_langinfo@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #118784	; 0x1d000
   11660:	ldr	pc, [ip, #2732]!	; 0xaac

00011664 <localeconv@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #118784	; 0x1d000
   1166c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011670 <bindtextdomain@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #118784	; 0x1d000
   11678:	ldr	pc, [ip, #2716]!	; 0xa9c

0001167c <aligned_alloc@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #118784	; 0x1d000
   11684:	ldr	pc, [ip, #2708]!	; 0xa94

00011688 <strncmp@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #118784	; 0x1d000
   11690:	ldr	pc, [ip, #2700]!	; 0xa8c

00011694 <fdatasync@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #118784	; 0x1d000
   1169c:	ldr	pc, [ip, #2692]!	; 0xa84

000116a0 <abort@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #118784	; 0x1d000
   116a8:	ldr	pc, [ip, #2684]!	; 0xa7c

000116ac <close@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #118784	; 0x1d000
   116b4:	ldr	pc, [ip, #2676]!	; 0xa74

000116b8 <dcngettext@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #118784	; 0x1d000
   116c0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116c4 <__snprintf_chk@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #118784	; 0x1d000
   116cc:	ldr	pc, [ip, #2660]!	; 0xa64

000116d0 <__assert_fail@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #118784	; 0x1d000
   116d8:	ldr	pc, [ip, #2652]!	; 0xa5c

Disassembly of section .text:

000116e0 <.text>:
   116e0:	mov	fp, #0
   116e4:	mov	lr, #0
   116e8:	pop	{r1}		; (ldr r1, [sp], #4)
   116ec:	mov	r2, sp
   116f0:	push	{r2}		; (str r2, [sp, #-4]!)
   116f4:	push	{r0}		; (str r0, [sp, #-4]!)
   116f8:	ldr	ip, [pc, #16]	; 11710 <__assert_fail@plt+0x40>
   116fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11700:	ldr	r0, [pc, #12]	; 11714 <__assert_fail@plt+0x44>
   11704:	ldr	r3, [pc, #12]	; 11718 <__assert_fail@plt+0x48>
   11708:	bl	11508 <__libc_start_main@plt>
   1170c:	bl	116a0 <abort@plt>
   11710:	andeq	ip, r1, r0, lsl #9
   11714:	andeq	r1, r1, r0, asr #24
   11718:	andeq	ip, r1, r0, lsr #8
   1171c:	ldr	r3, [pc, #20]	; 11738 <__assert_fail@plt+0x68>
   11720:	ldr	r2, [pc, #20]	; 1173c <__assert_fail@plt+0x6c>
   11724:	add	r3, pc, r3
   11728:	ldr	r2, [r3, r2]
   1172c:	cmp	r2, #0
   11730:	bxeq	lr
   11734:	b	11538 <__gmon_start__@plt>
   11738:	ldrdeq	sp, [r1], -r4
   1173c:	andeq	r0, r0, r8, lsr r1
   11740:	ldr	r0, [pc, #24]	; 11760 <__assert_fail@plt+0x90>
   11744:	ldr	r3, [pc, #24]	; 11764 <__assert_fail@plt+0x94>
   11748:	cmp	r3, r0
   1174c:	bxeq	lr
   11750:	ldr	r3, [pc, #16]	; 11768 <__assert_fail@plt+0x98>
   11754:	cmp	r3, #0
   11758:	bxeq	lr
   1175c:	bx	r3
   11760:			; <UNDEFINED> instruction: 0x0002f1b4
   11764:			; <UNDEFINED> instruction: 0x0002f1b4
   11768:	andeq	r0, r0, r0
   1176c:	ldr	r0, [pc, #36]	; 11798 <__assert_fail@plt+0xc8>
   11770:	ldr	r1, [pc, #36]	; 1179c <__assert_fail@plt+0xcc>
   11774:	sub	r1, r1, r0
   11778:	asr	r1, r1, #2
   1177c:	add	r1, r1, r1, lsr #31
   11780:	asrs	r1, r1, #1
   11784:	bxeq	lr
   11788:	ldr	r3, [pc, #16]	; 117a0 <__assert_fail@plt+0xd0>
   1178c:	cmp	r3, #0
   11790:	bxeq	lr
   11794:	bx	r3
   11798:			; <UNDEFINED> instruction: 0x0002f1b4
   1179c:			; <UNDEFINED> instruction: 0x0002f1b4
   117a0:	andeq	r0, r0, r0
   117a4:	push	{r4, lr}
   117a8:	ldr	r4, [pc, #24]	; 117c8 <__assert_fail@plt+0xf8>
   117ac:	ldrb	r3, [r4]
   117b0:	cmp	r3, #0
   117b4:	popne	{r4, pc}
   117b8:	bl	11740 <__assert_fail@plt+0x70>
   117bc:	mov	r3, #1
   117c0:	strb	r3, [r4]
   117c4:	pop	{r4, pc}
   117c8:	ldrdeq	pc, [r2], -ip
   117cc:	b	1176c <__assert_fail@plt+0x9c>
   117d0:	push	{fp, lr}
   117d4:	mov	fp, sp
   117d8:	sub	sp, sp, #56	; 0x38
   117dc:	mov	r4, r0
   117e0:	cmp	r0, #0
   117e4:	bne	11bf4 <__assert_fail@plt+0x524>
   117e8:	movw	r1, #50387	; 0xc4d3
   117ec:	mov	r0, #0
   117f0:	mov	r2, #5
   117f4:	movt	r1, #1
   117f8:	bl	11424 <dcgettext@plt>
   117fc:	mov	r1, r0
   11800:	movw	r0, #62564	; 0xf464
   11804:	movt	r0, #2
   11808:	ldr	r2, [r0]
   1180c:	mov	r0, #1
   11810:	mov	r3, r2
   11814:	bl	115d4 <__printf_chk@plt>
   11818:	movw	r1, #50428	; 0xc4fc
   1181c:	mov	r0, #0
   11820:	mov	r2, #5
   11824:	movt	r1, #1
   11828:	bl	11424 <dcgettext@plt>
   1182c:	movw	r7, #61908	; 0xf1d4
   11830:	movt	r7, #2
   11834:	ldr	r1, [r7]
   11838:	bl	11364 <fputs_unlocked@plt>
   1183c:	movw	r1, #50844	; 0xc69c
   11840:	mov	r0, #0
   11844:	mov	r2, #5
   11848:	movt	r1, #1
   1184c:	bl	11424 <dcgettext@plt>
   11850:	ldr	r1, [r7]
   11854:	bl	11364 <fputs_unlocked@plt>
   11858:	movw	r1, #51515	; 0xc93b
   1185c:	mov	r0, #0
   11860:	mov	r2, #5
   11864:	movt	r1, #1
   11868:	bl	11424 <dcgettext@plt>
   1186c:	ldr	r1, [r7]
   11870:	bl	11364 <fputs_unlocked@plt>
   11874:	movw	r1, #51806	; 0xca5e
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	11424 <dcgettext@plt>
   11888:	ldr	r1, [r7]
   1188c:	bl	11364 <fputs_unlocked@plt>
   11890:	movw	r1, #52382	; 0xcc9e
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	11424 <dcgettext@plt>
   118a4:	ldr	r1, [r7]
   118a8:	bl	11364 <fputs_unlocked@plt>
   118ac:	movw	r1, #52669	; 0xcdbd
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #1
   118bc:	bl	11424 <dcgettext@plt>
   118c0:	ldr	r1, [r7]
   118c4:	bl	11364 <fputs_unlocked@plt>
   118c8:	movw	r1, #52775	; 0xce27
   118cc:	mov	r0, #0
   118d0:	mov	r2, #5
   118d4:	movt	r1, #1
   118d8:	bl	11424 <dcgettext@plt>
   118dc:	ldr	r1, [r7]
   118e0:	bl	11364 <fputs_unlocked@plt>
   118e4:	movw	r1, #52812	; 0xce4c
   118e8:	mov	r0, #0
   118ec:	mov	r2, #5
   118f0:	movt	r1, #1
   118f4:	bl	11424 <dcgettext@plt>
   118f8:	ldr	r1, [r7]
   118fc:	bl	11364 <fputs_unlocked@plt>
   11900:	movw	r1, #52850	; 0xce72
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #1
   11910:	bl	11424 <dcgettext@plt>
   11914:	ldr	r1, [r7]
   11918:	bl	11364 <fputs_unlocked@plt>
   1191c:	movw	r1, #52893	; 0xce9d
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #1
   1192c:	bl	11424 <dcgettext@plt>
   11930:	ldr	r1, [r7]
   11934:	bl	11364 <fputs_unlocked@plt>
   11938:	movw	r1, #52938	; 0xceca
   1193c:	mov	r0, #0
   11940:	mov	r2, #5
   11944:	movt	r1, #1
   11948:	bl	11424 <dcgettext@plt>
   1194c:	ldr	r1, [r7]
   11950:	bl	11364 <fputs_unlocked@plt>
   11954:	movw	r1, #52997	; 0xcf05
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	movt	r1, #1
   11964:	bl	11424 <dcgettext@plt>
   11968:	ldr	r1, [r7]
   1196c:	bl	11364 <fputs_unlocked@plt>
   11970:	movw	r1, #53031	; 0xcf27
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #1
   11980:	bl	11424 <dcgettext@plt>
   11984:	ldr	r1, [r7]
   11988:	bl	11364 <fputs_unlocked@plt>
   1198c:	movw	r1, #53070	; 0xcf4e
   11990:	mov	r0, #0
   11994:	mov	r2, #5
   11998:	movt	r1, #1
   1199c:	bl	11424 <dcgettext@plt>
   119a0:	ldr	r1, [r7]
   119a4:	bl	11364 <fputs_unlocked@plt>
   119a8:	movw	r1, #53127	; 0xcf87
   119ac:	mov	r0, #0
   119b0:	mov	r2, #5
   119b4:	movt	r1, #1
   119b8:	bl	11424 <dcgettext@plt>
   119bc:	ldr	r1, [r7]
   119c0:	bl	11364 <fputs_unlocked@plt>
   119c4:	movw	r1, #53185	; 0xcfc1
   119c8:	mov	r0, #0
   119cc:	mov	r2, #5
   119d0:	movt	r1, #1
   119d4:	bl	11424 <dcgettext@plt>
   119d8:	ldr	r1, [r7]
   119dc:	bl	11364 <fputs_unlocked@plt>
   119e0:	movw	r1, #53221	; 0xcfe5
   119e4:	mov	r0, #0
   119e8:	mov	r2, #5
   119ec:	movt	r1, #1
   119f0:	bl	11424 <dcgettext@plt>
   119f4:	ldr	r1, [r7]
   119f8:	bl	11364 <fputs_unlocked@plt>
   119fc:	movw	r1, #53282	; 0xd022
   11a00:	mov	r0, #0
   11a04:	mov	r2, #5
   11a08:	movt	r1, #1
   11a0c:	bl	11424 <dcgettext@plt>
   11a10:	ldr	r1, [r7]
   11a14:	bl	11364 <fputs_unlocked@plt>
   11a18:	movw	r1, #53341	; 0xd05d
   11a1c:	mov	r0, #0
   11a20:	mov	r2, #5
   11a24:	movt	r1, #1
   11a28:	bl	11424 <dcgettext@plt>
   11a2c:	ldr	r1, [r7]
   11a30:	bl	11364 <fputs_unlocked@plt>
   11a34:	movw	r1, #53400	; 0xd098
   11a38:	mov	r0, #0
   11a3c:	mov	r2, #5
   11a40:	movt	r1, #1
   11a44:	bl	11424 <dcgettext@plt>
   11a48:	movw	r2, #53536	; 0xd120
   11a4c:	mov	r1, r0
   11a50:	mov	r0, #1
   11a54:	movt	r2, #1
   11a58:	bl	115d4 <__printf_chk@plt>
   11a5c:	movw	r1, #53541	; 0xd125
   11a60:	mov	r0, #0
   11a64:	mov	r2, #5
   11a68:	movt	r1, #1
   11a6c:	bl	11424 <dcgettext@plt>
   11a70:	ldr	r1, [r7]
   11a74:	bl	11364 <fputs_unlocked@plt>
   11a78:	movw	r1, #53586	; 0xd152
   11a7c:	mov	r0, #0
   11a80:	mov	r2, #5
   11a84:	movt	r1, #1
   11a88:	bl	11424 <dcgettext@plt>
   11a8c:	ldr	r1, [r7]
   11a90:	bl	11364 <fputs_unlocked@plt>
   11a94:	movw	r0, #55544	; 0xd8f8
   11a98:	mov	r2, #48	; 0x30
   11a9c:	mov	r6, sp
   11aa0:	movw	r5, #53640	; 0xd188
   11aa4:	movt	r0, #1
   11aa8:	movt	r5, #1
   11aac:	add	r1, r0, #32
   11ab0:	add	r3, r0, #16
   11ab4:	vld1.64	{d18-d19}, [r0], r2
   11ab8:	vld1.64	{d16-d17}, [r1]
   11abc:	vld1.64	{d20-d21}, [r3]
   11ac0:	vldr	d22, [r0]
   11ac4:	add	r1, r6, #32
   11ac8:	add	r0, r6, #16
   11acc:	vst1.64	{d16-d17}, [r1]
   11ad0:	movw	r1, #53931	; 0xd2ab
   11ad4:	vst1.64	{d20-d21}, [r0]
   11ad8:	mov	r0, r6
   11adc:	movt	r1, #1
   11ae0:	vst1.64	{d18-d19}, [r0], r2
   11ae4:	vstr	d22, [r0]
   11ae8:	mov	r0, r5
   11aec:	bl	11388 <strcmp@plt>
   11af0:	cmp	r0, #0
   11af4:	ldrne	r1, [r6, #8]!
   11af8:	cmpne	r1, #0
   11afc:	bne	11ae8 <__assert_fail@plt+0x418>
   11b00:	movw	r1, #54026	; 0xd30a
   11b04:	ldr	r6, [r6, #4]
   11b08:	mov	r0, #0
   11b0c:	mov	r2, #5
   11b10:	movt	r1, #1
   11b14:	bl	11424 <dcgettext@plt>
   11b18:	movw	r2, #54049	; 0xd321
   11b1c:	movw	r3, #54063	; 0xd32f
   11b20:	mov	r1, r0
   11b24:	mov	r0, #1
   11b28:	movt	r2, #1
   11b2c:	movt	r3, #1
   11b30:	bl	115d4 <__printf_chk@plt>
   11b34:	cmp	r6, #0
   11b38:	mov	r0, #5
   11b3c:	mov	r1, #0
   11b40:	moveq	r6, r5
   11b44:	bl	11634 <setlocale@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b50:	movw	r1, #54103	; 0xd357
   11b54:	mov	r2, #3
   11b58:	movt	r1, #1
   11b5c:	bl	11688 <strncmp@plt>
   11b60:	cmp	r0, #0
   11b64:	beq	11b84 <__assert_fail@plt+0x4b4>
   11b68:	movw	r1, #54107	; 0xd35b
   11b6c:	mov	r0, #0
   11b70:	mov	r2, #5
   11b74:	movt	r1, #1
   11b78:	bl	11424 <dcgettext@plt>
   11b7c:	ldr	r1, [r7]
   11b80:	bl	11364 <fputs_unlocked@plt>
   11b84:	movw	r1, #54178	; 0xd3a2
   11b88:	mov	r0, #0
   11b8c:	mov	r2, #5
   11b90:	movt	r1, #1
   11b94:	bl	11424 <dcgettext@plt>
   11b98:	movw	r2, #54063	; 0xd32f
   11b9c:	mov	r1, r0
   11ba0:	mov	r0, #1
   11ba4:	mov	r3, r5
   11ba8:	movt	r2, #1
   11bac:	bl	115d4 <__printf_chk@plt>
   11bb0:	movw	r1, #54205	; 0xd3bd
   11bb4:	mov	r0, #0
   11bb8:	mov	r2, #5
   11bbc:	movt	r1, #1
   11bc0:	bl	11424 <dcgettext@plt>
   11bc4:	mov	r1, r0
   11bc8:	movw	r0, #53959	; 0xd2c7
   11bcc:	movw	r3, #51805	; 0xca5d
   11bd0:	cmp	r6, r5
   11bd4:	mov	r2, r6
   11bd8:	movt	r0, #1
   11bdc:	movt	r3, #1
   11be0:	moveq	r3, r0
   11be4:	mov	r0, #1
   11be8:	bl	115d4 <__printf_chk@plt>
   11bec:	mov	r0, r4
   11bf0:	bl	1155c <exit@plt>
   11bf4:	movw	r0, #61904	; 0xf1d0
   11bf8:	movw	r1, #50348	; 0xc4ac
   11bfc:	mov	r2, #5
   11c00:	movt	r0, #2
   11c04:	movt	r1, #1
   11c08:	ldr	r5, [r0]
   11c0c:	mov	r0, #0
   11c10:	bl	11424 <dcgettext@plt>
   11c14:	mov	r2, r0
   11c18:	movw	r0, #62564	; 0xf464
   11c1c:	mov	r1, #1
   11c20:	movt	r0, #2
   11c24:	ldr	r3, [r0]
   11c28:	mov	r0, r5
   11c2c:	bl	115f8 <__fprintf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	1155c <exit@plt>
   11c38:	nop	{0}
   11c3c:	nop	{0}
   11c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c44:	add	fp, sp, #28
   11c48:	sub	sp, sp, #196	; 0xc4
   11c4c:	mov	r8, r0
   11c50:	movw	r0, #54256	; 0xd3f0
   11c54:	mov	r9, r1
   11c58:	movt	r0, #1
   11c5c:	bl	114d8 <getenv@plt>
   11c60:	mov	r5, r0
   11c64:	movw	r0, #62280	; 0xf348
   11c68:	movt	r0, #2
   11c6c:	bl	11640 <sigemptyset@plt>
   11c70:	cmp	r5, #0
   11c74:	bne	11c88 <__assert_fail@plt+0x5b8>
   11c78:	movw	r0, #62280	; 0xf348
   11c7c:	mov	r1, #10
   11c80:	movt	r0, #2
   11c84:	bl	114fc <sigaddset@plt>
   11c88:	add	r2, sp, #48	; 0x30
   11c8c:	mov	r0, #2
   11c90:	mov	r1, #0
   11c94:	bl	11478 <sigaction@plt>
   11c98:	ldr	r0, [sp, #48]	; 0x30
   11c9c:	cmp	r0, #1
   11ca0:	beq	11cb4 <__assert_fail@plt+0x5e4>
   11ca4:	movw	r0, #62280	; 0xf348
   11ca8:	mov	r1, #2
   11cac:	movt	r0, #2
   11cb0:	bl	114fc <sigaddset@plt>
   11cb4:	movw	r5, #62280	; 0xf348
   11cb8:	add	r0, sp, #48	; 0x30
   11cbc:	mov	r2, #128	; 0x80
   11cc0:	movt	r5, #2
   11cc4:	add	r0, r0, #4
   11cc8:	mov	r1, r5
   11ccc:	bl	113f4 <memcpy@plt>
   11cd0:	mov	r0, r5
   11cd4:	mov	r1, #10
   11cd8:	bl	11448 <sigismember@plt>
   11cdc:	cmp	r0, #0
   11ce0:	beq	11d08 <__assert_fail@plt+0x638>
   11ce4:	mov	r0, #0
   11ce8:	add	r1, sp, #48	; 0x30
   11cec:	mov	r2, #0
   11cf0:	str	r0, [sp, #180]	; 0xb4
   11cf4:	movw	r0, #20208	; 0x4ef0
   11cf8:	movt	r0, #1
   11cfc:	str	r0, [sp, #48]	; 0x30
   11d00:	mov	r0, #10
   11d04:	bl	11478 <sigaction@plt>
   11d08:	movw	r0, #62280	; 0xf348
   11d0c:	mov	r1, #2
   11d10:	movt	r0, #2
   11d14:	bl	11448 <sigismember@plt>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d44 <__assert_fail@plt+0x674>
   11d20:	mov	r0, #-1073741824	; 0xc0000000
   11d24:	add	r1, sp, #48	; 0x30
   11d28:	mov	r2, #0
   11d2c:	str	r0, [sp, #180]	; 0xb4
   11d30:	movw	r0, #20232	; 0x4f08
   11d34:	movt	r0, #1
   11d38:	str	r0, [sp, #48]	; 0x30
   11d3c:	mov	r0, #2
   11d40:	bl	11478 <sigaction@plt>
   11d44:	ldr	r0, [r9]
   11d48:	bl	17cd4 <__assert_fail@plt+0x6604>
   11d4c:	movw	r1, #51805	; 0xca5d
   11d50:	mov	r0, #6
   11d54:	movt	r1, #1
   11d58:	bl	11634 <setlocale@plt>
   11d5c:	movw	r5, #54053	; 0xd325
   11d60:	movw	r1, #53643	; 0xd18b
   11d64:	movt	r5, #1
   11d68:	movt	r1, #1
   11d6c:	mov	r0, r5
   11d70:	bl	11670 <bindtextdomain@plt>
   11d74:	mov	r0, r5
   11d78:	bl	11454 <textdomain@plt>
   11d7c:	movw	r0, #18708	; 0x4914
   11d80:	movt	r0, #1
   11d84:	bl	1c484 <__assert_fail@plt+0xadb4>
   11d88:	bl	1158c <getpagesize@plt>
   11d8c:	movw	r1, #61920	; 0xf1e0
   11d90:	movw	r2, #53678	; 0xd1ae
   11d94:	movw	r3, #53667	; 0xd1a3
   11d98:	movw	r4, #6096	; 0x17d0
   11d9c:	mov	r7, #1
   11da0:	mov	r6, #0
   11da4:	movt	r1, #2
   11da8:	movt	r2, #1
   11dac:	movt	r3, #1
   11db0:	movt	r4, #1
   11db4:	str	r0, [r1]
   11db8:	movw	r0, #61800	; 0xf168
   11dbc:	movw	r1, #53694	; 0xd1be
   11dc0:	movt	r0, #2
   11dc4:	movt	r1, #1
   11dc8:	ldr	r0, [r0]
   11dcc:	stm	sp, {r0, r7}
   11dd0:	str	r2, [sp, #16]
   11dd4:	movw	r2, #53640	; 0xd188
   11dd8:	str	r3, [sp, #12]
   11ddc:	str	r1, [sp, #20]
   11de0:	mov	r0, r8
   11de4:	mov	r1, r9
   11de8:	mov	r3, r5
   11dec:	str	r4, [sp, #8]
   11df0:	str	r6, [sp, #24]
   11df4:	movt	r2, #1
   11df8:	bl	17c10 <__assert_fail@plt+0x6540>
   11dfc:	add	r0, pc, #908	; 0x38c
   11e00:	add	r1, pc, #920	; 0x398
   11e04:	add	r2, pc, #932	; 0x3a4
   11e08:	add	r3, pc, #944	; 0x3b0
   11e0c:	movw	r5, #61936	; 0xf1f0
   11e10:	vld1.64	{d18-d19}, [r3 :128]
   11e14:	add	r3, pc, #948	; 0x3b4
   11e18:	vld1.64	{d16-d17}, [r0 :128]
   11e1c:	movt	r5, #2
   11e20:	vld1.64	{d2-d3}, [r1 :128]
   11e24:	vld1.64	{d0-d1}, [r2 :128]
   11e28:	vld1.64	{d20-d21}, [r3 :128]
   11e2c:	add	r3, pc, #940	; 0x3ac
   11e30:	vld1.64	{d22-d23}, [r3 :128]
   11e34:	add	r3, pc, #948	; 0x3b4
   11e38:	add	r0, r5, #224	; 0xe0
   11e3c:	vld1.64	{d24-d25}, [r3 :128]
   11e40:	add	r3, pc, #952	; 0x3b8
   11e44:	vld1.64	{d26-d27}, [r3 :128]
   11e48:	add	r3, pc, #960	; 0x3c0
   11e4c:	vld1.64	{d28-d29}, [r3 :128]
   11e50:	add	r3, pc, #968	; 0x3c8
   11e54:	vst1.64	{d16-d17}, [r0 :128]
   11e58:	add	r0, r5, #208	; 0xd0
   11e5c:	add	r1, pc, #972	; 0x3cc
   11e60:	vst1.64	{d18-d19}, [r0 :128]
   11e64:	add	r0, r5, #192	; 0xc0
   11e68:	vld1.64	{d16-d17}, [r1 :128]
   11e6c:	add	r1, pc, #972	; 0x3cc
   11e70:	vld1.64	{d30-d31}, [r3 :128]
   11e74:	vst1.64	{d20-d21}, [r0 :128]
   11e78:	add	r0, r5, #176	; 0xb0
   11e7c:	vld1.64	{d18-d19}, [r1 :128]
   11e80:	add	r1, pc, #968	; 0x3c8
   11e84:	vst1.64	{d22-d23}, [r0 :128]
   11e88:	add	r0, r5, #160	; 0xa0
   11e8c:	vld1.64	{d20-d21}, [r1 :128]
   11e90:	add	r1, pc, #968	; 0x3c8
   11e94:	vst1.64	{d24-d25}, [r0 :128]
   11e98:	add	r0, r5, #144	; 0x90
   11e9c:	vld1.64	{d22-d23}, [r1 :128]
   11ea0:	add	r1, pc, #968	; 0x3c8
   11ea4:	vst1.64	{d26-d27}, [r0 :128]
   11ea8:	add	r0, r5, #128	; 0x80
   11eac:	vld1.64	{d24-d25}, [r1 :128]
   11eb0:	add	r1, pc, #968	; 0x3c8
   11eb4:	str	r6, [sp, #48]	; 0x30
   11eb8:	vst1.64	{d28-d29}, [r0 :128]
   11ebc:	add	r0, r5, #112	; 0x70
   11ec0:	vld1.64	{d26-d27}, [r1 :128]
   11ec4:	mov	r1, r5
   11ec8:	vst1.64	{d30-d31}, [r0 :128]
   11ecc:	add	r0, r5, #96	; 0x60
   11ed0:	vst1.64	{d0-d1}, [r0 :128]
   11ed4:	add	r0, r5, #80	; 0x50
   11ed8:	vst1.64	{d2-d3}, [r0 :128]
   11edc:	add	r0, r5, #64	; 0x40
   11ee0:	vst1.64	{d16-d17}, [r0 :128]
   11ee4:	add	r0, r5, #48	; 0x30
   11ee8:	vst1.64	{d18-d19}, [r0 :128]
   11eec:	add	r0, r5, #32
   11ef0:	vst1.64	{d20-d21}, [r0 :128]
   11ef4:	add	r0, r5, #16
   11ef8:	vst1.64	{d22-d23}, [r0 :128]
   11efc:	movw	r0, #61924	; 0xf1e4
   11f00:	movt	r0, #2
   11f04:	strb	r7, [r0]
   11f08:	mov	r0, #240	; 0xf0
   11f0c:	vst1.8	{d24-d25}, [r1 :128], r0
   11f10:	mov	r0, #0
   11f14:	str	r0, [sp, #40]	; 0x28
   11f18:	movw	r0, #61896	; 0xf1c8
   11f1c:	vst1.64	{d26-d27}, [r1 :128]
   11f20:	movt	r0, #2
   11f24:	ldr	r0, [r0]
   11f28:	cmp	r0, r8
   11f2c:	bge	11f68 <__assert_fail@plt+0x898>
   11f30:	add	r5, r9, r0, lsl #2
   11f34:	sub	r4, r8, r0
   11f38:	mvn	r0, #-2147483648	; 0x80000000
   11f3c:	mvn	sl, #0
   11f40:	str	r0, [sp, #44]	; 0x2c
   11f44:	mov	r0, #0
   11f48:	str	r0, [sp, #40]	; 0x28
   11f4c:	mov	r0, #0
   11f50:	str	r0, [sp, #36]	; 0x24
   11f54:	mov	r0, #0
   11f58:	str	r0, [sp, #32]
   11f5c:	mov	r0, #0
   11f60:	str	r0, [sp, #28]
   11f64:	b	120b4 <__assert_fail@plt+0x9e4>
   11f68:	mvn	r0, #-2147483648	; 0x80000000
   11f6c:	mvn	r4, #0
   11f70:	str	r0, [sp, #44]	; 0x2c
   11f74:	mov	r0, #0
   11f78:	str	r0, [sp, #36]	; 0x24
   11f7c:	mov	r0, #0
   11f80:	str	r0, [sp, #32]
   11f84:	mov	r0, #0
   11f88:	str	r0, [sp, #28]
   11f8c:	movw	r0, #62228	; 0xf314
   11f90:	movt	r0, #2
   11f94:	mov	r1, r0
   11f98:	ldr	r0, [r0]
   11f9c:	orr	r0, r0, #2048	; 0x800
   11fa0:	str	r0, [r1]
   11fa4:	movw	r0, #62416	; 0xf3d0
   11fa8:	movt	r0, #2
   11fac:	ldr	r5, [r0]
   11fb0:	cmp	r5, #0
   11fb4:	bne	11fc8 <__assert_fail@plt+0x8f8>
   11fb8:	movw	r0, #62416	; 0xf3d0
   11fbc:	mov	r5, #512	; 0x200
   11fc0:	movt	r0, #2
   11fc4:	str	r5, [r0]
   11fc8:	movw	r0, #62240	; 0xf320
   11fcc:	movt	r0, #2
   11fd0:	ldr	sl, [r0]
   11fd4:	cmp	sl, #0
   11fd8:	moveq	sl, #512	; 0x200
   11fdc:	streq	sl, [r0]
   11fe0:	movw	r0, #62420	; 0xf3d4
   11fe4:	movt	r0, #2
   11fe8:	ldr	r0, [r0]
   11fec:	cmp	r0, #0
   11ff0:	bne	1200c <__assert_fail@plt+0x93c>
   11ff4:	movw	r0, #62228	; 0xf314
   11ff8:	movt	r0, #2
   11ffc:	mov	r1, r0
   12000:	ldr	r0, [r0]
   12004:	bic	r0, r0, #24
   12008:	str	r0, [r1]
   1200c:	movw	r1, #62196	; 0xf2f4
   12010:	movw	r0, #4096	; 0x1000
   12014:	movt	r1, #2
   12018:	movt	r0, #16
   1201c:	ldr	r6, [r1]
   12020:	tst	r6, r0
   12024:	orrne	r6, r6, r0
   12028:	movw	r0, #62224	; 0xf310
   1202c:	movt	r0, #2
   12030:	strne	r6, [r1]
   12034:	ldr	r9, [r0]
   12038:	tst	r9, #1
   1203c:	bne	147f0 <__assert_fail@plt+0x3120>
   12040:	tst	r6, #16
   12044:	bne	14814 <__assert_fail@plt+0x3144>
   12048:	tst	r9, #12
   1204c:	bne	14838 <__assert_fail@plt+0x3168>
   12050:	ldr	r0, [sp, #40]	; 0x28
   12054:	ldr	r1, [sp, #36]	; 0x24
   12058:	movw	r8, #62432	; 0xf3e0
   1205c:	movt	r8, #2
   12060:	orrs	r0, r0, r1
   12064:	andsne	r1, r6, #8
   12068:	bne	12704 <__assert_fail@plt+0x1034>
   1206c:	cmp	r0, #0
   12070:	beq	12730 <__assert_fail@plt+0x1060>
   12074:	ldr	r0, [sp, #40]	; 0x28
   12078:	ldr	r1, [sp, #36]	; 0x24
   1207c:	movw	r2, #62424	; 0xf3d8
   12080:	movt	r2, #2
   12084:	strd	r0, [r2]
   12088:	b	12730 <__assert_fail@plt+0x1060>
   1208c:	ldrb	r0, [r8, #2]
   12090:	cmp	r0, #0
   12094:	cmpne	r0, #61	; 0x3d
   12098:	bne	120e8 <__assert_fail@plt+0xa18>
   1209c:	movw	r0, #62192	; 0xf2f0
   120a0:	movt	r0, #2
   120a4:	str	r9, [r0]
   120a8:	add	r5, r5, #4
   120ac:	subs	r4, r4, #1
   120b0:	beq	14018 <__assert_fail@plt+0x2948>
   120b4:	ldr	r8, [r5]
   120b8:	mov	r1, #61	; 0x3d
   120bc:	mov	r0, r8
   120c0:	bl	11580 <strchr@plt>
   120c4:	cmp	r0, #0
   120c8:	beq	126c8 <__assert_fail@plt+0xff8>
   120cc:	ldrb	r1, [r8]
   120d0:	add	r9, r0, #1
   120d4:	cmp	r1, #105	; 0x69
   120d8:	bne	120e8 <__assert_fail@plt+0xa18>
   120dc:	ldrb	r0, [r8, #1]
   120e0:	cmp	r0, #102	; 0x66
   120e4:	beq	1208c <__assert_fail@plt+0x9bc>
   120e8:	ldrb	r0, [r8]
   120ec:	cmp	r0, #111	; 0x6f
   120f0:	bne	1211c <__assert_fail@plt+0xa4c>
   120f4:	ldrb	r0, [r8, #1]
   120f8:	cmp	r0, #102	; 0x66
   120fc:	bne	1211c <__assert_fail@plt+0xa4c>
   12100:	ldrb	r0, [r8, #2]
   12104:	cmp	r0, #0
   12108:	cmpne	r0, #61	; 0x3d
   1210c:	bne	1211c <__assert_fail@plt+0xa4c>
   12110:	movw	r0, #62220	; 0xf30c
   12114:	movt	r0, #2
   12118:	b	120a4 <__assert_fail@plt+0x9d4>
   1211c:	ldrb	r0, [r8]
   12120:	cmp	r0, #99	; 0x63
   12124:	bne	12290 <__assert_fail@plt+0xbc0>
   12128:	ldrb	r0, [r8, #1]
   1212c:	cmp	r0, #111	; 0x6f
   12130:	bne	12290 <__assert_fail@plt+0xbc0>
   12134:	ldrb	r0, [r8, #2]
   12138:	cmp	r0, #110	; 0x6e
   1213c:	bne	12290 <__assert_fail@plt+0xbc0>
   12140:	ldrb	r0, [r8, #3]
   12144:	cmp	r0, #118	; 0x76
   12148:	bne	12290 <__assert_fail@plt+0xbc0>
   1214c:	ldrb	r0, [r8, #4]
   12150:	cmp	r0, #0
   12154:	cmpne	r0, #61	; 0x3d
   12158:	bne	12290 <__assert_fail@plt+0xbc0>
   1215c:	movw	r1, #55600	; 0xd930
   12160:	movw	r3, #54296	; 0xd418
   12164:	mov	r0, r9
   12168:	mov	r2, #0
   1216c:	movt	r1, #1
   12170:	movt	r3, #1
   12174:	bl	14f18 <__assert_fail@plt+0x3848>
   12178:	movw	r1, #62228	; 0xf314
   1217c:	movt	r1, #2
   12180:	b	12374 <__assert_fail@plt+0xca4>
   12184:	nop	{0}
   12188:	nop	{0}
   1218c:	nop	{0}
   12190:	mvn	lr, #224, 2	; 0x38
   12194:	strb	lr, [r6, r4, ror #11]!
   12198:	bl	ffacc940 <opterr@@GLIBC_2.4+0xffa9d768>
   1219c:	svc	0x00eeedec
   121a0:	cmppl	r2, #80, 2
   121a4:			; <UNDEFINED> instruction: 0x57565554
   121a8:	blpl	16a8710 <opterr@@GLIBC_2.4+0x1679538>
   121ac:	svcpl	0x005e5d5c
   121b0:	cmnvs	r2, #96, 2
   121b4:	strbvs	r6, [r6, -r4, ror #10]!
   121b8:	blvs	1aac760 <opterr@@GLIBC_2.4+0x1a7d588>
   121bc:	svcvs	0x006e6d6c
   121c0:	bicsle	sp, r2, #208, 2	; 0x34
   121c4:			; <UNDEFINED> instruction: 0xd7d6d5d4
   121c8:	blle	ff6c8930 <opterr@@GLIBC_2.4+0xff699758>
   121cc:	svcle	0x00dedddc
   121d0:	bicgt	ip, r2, #192, 2	; 0x30
   121d4:	strbgt	ip, [r6, r4, asr #11]
   121d8:	blgt	ff2c4900 <opterr@@GLIBC_2.4+0xff295728>
   121dc:	svcgt	0x00cecdcc
   121e0:			; <UNDEFINED> instruction: 0xb3b2b1b0
   121e4:			; <UNDEFINED> instruction: 0xb7b6b5b4
   121e8:	bllt	feec08d0 <opterr@@GLIBC_2.4+0xfee916f8>
   121ec:	svclt	0x00bebdbc
   121f0:			; <UNDEFINED> instruction: 0xa3a2a1a0
   121f4:	strge	sl, [r6, r4, lsr #11]!
   121f8:	blge	feabc8a0 <opterr@@GLIBC_2.4+0xfea8d6c8>
   121fc:	svcge	0x00aeadac
   12200:	orrsls	r9, r2, #144, 2	; 0x24
   12204:			; <UNDEFINED> instruction: 0x97969594
   12208:	blls	fe6b8870 <opterr@@GLIBC_2.4+0xfe689698>
   1220c:	svcls	0x009e9d9c
   12210:	orrhi	r8, r2, #128, 2
   12214:	strhi	r8, [r6, r4, lsl #11]
   12218:	blhi	fe2b4840 <opterr@@GLIBC_2.4+0xfe285668>
   1221c:	svchi	0x008e8d8c
   12220:	cmnvc	r2, #112, 2
   12224:			; <UNDEFINED> instruction: 0x77767574
   12228:	blvc	1eb0810 <opterr@@GLIBC_2.4+0x1e81638>
   1222c:	svcvc	0x007e7d7c
   12230:	movtmi	r4, #8512	; 0x2140
   12234:	strbmi	r4, [r6, -r4, asr #10]
   12238:	blmi	12a4760 <opterr@@GLIBC_2.4+0x1275588>
   1223c:	svcmi	0x004e4d4c
   12240:	teqcc	r2, #48, 2
   12244:			; <UNDEFINED> instruction: 0x37363534
   12248:	blcc	ea0730 <opterr@@GLIBC_2.4+0xe71558>
   1224c:	svccc	0x003e3d3c
   12250:			; <UNDEFINED> instruction: 0x23222120
   12254:	strcs	r2, [r6, -r4, lsr #10]!
   12258:	blcs	a9c700 <opterr@@GLIBC_2.4+0xa6d528>
   1225c:	svccs	0x002e2d2c
   12260:	tstne	r2, #16, 2
   12264:			; <UNDEFINED> instruction: 0x17161514
   12268:	blne	6986d0 <opterr@@GLIBC_2.4+0x6694f8>
   1226c:	svcne	0x001e1d1c
   12270:	movweq	r0, #8448	; 0x2100
   12274:	streq	r0, [r6, -r4, lsl #10]
   12278:	bleq	2946a0 <opterr@@GLIBC_2.4+0x2654c8>
   1227c:	svceq	0x000e0d0c
   12280:	vsra.u64	<illegal reg q15.5>, q8, #14
   12284:			; <UNDEFINED> instruction: 0xf7f6f5f4
   12288:	blx	ffed0a72 <opterr@@GLIBC_2.4+0xffea189a>
   1228c:			; <UNDEFINED> instruction: 0xfffefdfc
   12290:	ldrb	r0, [r8]
   12294:	cmp	r0, #105	; 0x69
   12298:	bne	12304 <__assert_fail@plt+0xc34>
   1229c:	ldrb	r0, [r8, #1]
   122a0:	cmp	r0, #102	; 0x66
   122a4:	bne	12304 <__assert_fail@plt+0xc34>
   122a8:	ldrb	r0, [r8, #2]
   122ac:	cmp	r0, #108	; 0x6c
   122b0:	bne	12304 <__assert_fail@plt+0xc34>
   122b4:	ldrb	r0, [r8, #3]
   122b8:	cmp	r0, #97	; 0x61
   122bc:	bne	12304 <__assert_fail@plt+0xc34>
   122c0:	ldrb	r0, [r8, #4]
   122c4:	cmp	r0, #103	; 0x67
   122c8:	bne	12304 <__assert_fail@plt+0xc34>
   122cc:	ldrb	r0, [r8, #5]
   122d0:	cmp	r0, #0
   122d4:	cmpne	r0, #61	; 0x3d
   122d8:	bne	12304 <__assert_fail@plt+0xc34>
   122dc:	movw	r1, #55872	; 0xda40
   122e0:	movw	r3, #54315	; 0xd42b
   122e4:	mov	r0, r9
   122e8:	mov	r2, #0
   122ec:	movt	r1, #1
   122f0:	movt	r3, #1
   122f4:	bl	14f18 <__assert_fail@plt+0x3848>
   122f8:	movw	r1, #62196	; 0xf2f4
   122fc:	movt	r1, #2
   12300:	b	12374 <__assert_fail@plt+0xca4>
   12304:	ldrb	r0, [r8]
   12308:	cmp	r0, #111	; 0x6f
   1230c:	bne	12388 <__assert_fail@plt+0xcb8>
   12310:	ldrb	r0, [r8, #1]
   12314:	cmp	r0, #102	; 0x66
   12318:	bne	12388 <__assert_fail@plt+0xcb8>
   1231c:	ldrb	r0, [r8, #2]
   12320:	cmp	r0, #108	; 0x6c
   12324:	bne	12388 <__assert_fail@plt+0xcb8>
   12328:	ldrb	r0, [r8, #3]
   1232c:	cmp	r0, #97	; 0x61
   12330:	bne	12388 <__assert_fail@plt+0xcb8>
   12334:	ldrb	r0, [r8, #4]
   12338:	cmp	r0, #103	; 0x67
   1233c:	bne	12388 <__assert_fail@plt+0xcb8>
   12340:	ldrb	r0, [r8, #5]
   12344:	cmp	r0, #0
   12348:	cmpne	r0, #61	; 0x3d
   1234c:	bne	12388 <__assert_fail@plt+0xcb8>
   12350:	movw	r1, #55872	; 0xda40
   12354:	movw	r3, #54334	; 0xd43e
   12358:	mov	r0, r9
   1235c:	mov	r2, #0
   12360:	movt	r1, #1
   12364:	movt	r3, #1
   12368:	bl	14f18 <__assert_fail@plt+0x3848>
   1236c:	movw	r1, #62224	; 0xf310
   12370:	movt	r1, #2
   12374:	mov	r2, r1
   12378:	ldr	r1, [r1]
   1237c:	orr	r0, r1, r0
   12380:	str	r0, [r2]
   12384:	b	120a8 <__assert_fail@plt+0x9d8>
   12388:	ldrb	r0, [r8]
   1238c:	cmp	r0, #115	; 0x73
   12390:	bne	1240c <__assert_fail@plt+0xd3c>
   12394:	ldrb	r0, [r8, #1]
   12398:	cmp	r0, #116	; 0x74
   1239c:	bne	1240c <__assert_fail@plt+0xd3c>
   123a0:	ldrb	r0, [r8, #2]
   123a4:	cmp	r0, #97	; 0x61
   123a8:	bne	1240c <__assert_fail@plt+0xd3c>
   123ac:	ldrb	r0, [r8, #3]
   123b0:	cmp	r0, #116	; 0x74
   123b4:	bne	1240c <__assert_fail@plt+0xd3c>
   123b8:	ldrb	r0, [r8, #4]
   123bc:	cmp	r0, #117	; 0x75
   123c0:	bne	1240c <__assert_fail@plt+0xd3c>
   123c4:	ldrb	r0, [r8, #5]
   123c8:	cmp	r0, #115	; 0x73
   123cc:	bne	1240c <__assert_fail@plt+0xd3c>
   123d0:	ldrb	r0, [r8, #6]
   123d4:	cmp	r0, #0
   123d8:	cmpne	r0, #61	; 0x3d
   123dc:	bne	1240c <__assert_fail@plt+0xd3c>
   123e0:	movw	r1, #56176	; 0xdb70
   123e4:	movw	r3, #54354	; 0xd452
   123e8:	mov	r0, r9
   123ec:	mov	r2, #1
   123f0:	movt	r1, #1
   123f4:	movt	r3, #1
   123f8:	bl	14f18 <__assert_fail@plt+0x3848>
   123fc:	movw	r1, #61776	; 0xf150
   12400:	movt	r1, #2
   12404:	str	r0, [r1]
   12408:	b	120a8 <__assert_fail@plt+0x9d8>
   1240c:	mov	r0, #0
   12410:	sub	r1, fp, #32
   12414:	str	r0, [fp, #-32]	; 0xffffffe0
   12418:	mov	r0, r9
   1241c:	bl	15024 <__assert_fail@plt+0x3954>
   12420:	ldrb	r2, [r8]
   12424:	cmp	r2, #105	; 0x69
   12428:	bne	12474 <__assert_fail@plt+0xda4>
   1242c:	ldrb	r2, [r8, #1]
   12430:	cmp	r2, #98	; 0x62
   12434:	bne	12474 <__assert_fail@plt+0xda4>
   12438:	ldrb	r2, [r8, #2]
   1243c:	cmp	r2, #115	; 0x73
   12440:	bne	12474 <__assert_fail@plt+0xda4>
   12444:	ldrb	r2, [r8, #3]
   12448:	mov	r6, #0
   1244c:	mvn	ip, #-2147483647	; 0x80000001
   12450:	mov	r3, #1
   12454:	cmp	r2, #0
   12458:	beq	12464 <__assert_fail@plt+0xd94>
   1245c:	cmp	r2, #61	; 0x3d
   12460:	bne	12474 <__assert_fail@plt+0xda4>
   12464:	movw	r2, #62416	; 0xf3d0
   12468:	mov	r7, #0
   1246c:	movt	r2, #2
   12470:	b	12698 <__assert_fail@plt+0xfc8>
   12474:	ldrb	r2, [r8]
   12478:	cmp	r2, #111	; 0x6f
   1247c:	bne	124c8 <__assert_fail@plt+0xdf8>
   12480:	ldrb	r2, [r8, #1]
   12484:	cmp	r2, #98	; 0x62
   12488:	bne	124c8 <__assert_fail@plt+0xdf8>
   1248c:	ldrb	r2, [r8, #2]
   12490:	cmp	r2, #115	; 0x73
   12494:	bne	124c8 <__assert_fail@plt+0xdf8>
   12498:	ldrb	r2, [r8, #3]
   1249c:	mov	r6, #0
   124a0:	mvn	ip, #-2147483647	; 0x80000001
   124a4:	mov	r3, #1
   124a8:	cmp	r2, #0
   124ac:	beq	124b8 <__assert_fail@plt+0xde8>
   124b0:	cmp	r2, #61	; 0x3d
   124b4:	bne	124c8 <__assert_fail@plt+0xdf8>
   124b8:	movw	r2, #62240	; 0xf320
   124bc:	mov	r7, #0
   124c0:	movt	r2, #2
   124c4:	b	12698 <__assert_fail@plt+0xfc8>
   124c8:	ldrb	r2, [r8]
   124cc:	cmp	r2, #98	; 0x62
   124d0:	bne	1250c <__assert_fail@plt+0xe3c>
   124d4:	ldrb	r2, [r8, #1]
   124d8:	cmp	r2, #115	; 0x73
   124dc:	bne	1250c <__assert_fail@plt+0xe3c>
   124e0:	ldrb	r2, [r8, #2]
   124e4:	mov	r6, #0
   124e8:	mvn	ip, #-2147483647	; 0x80000001
   124ec:	mov	r3, #1
   124f0:	cmp	r2, #0
   124f4:	beq	12500 <__assert_fail@plt+0xe30>
   124f8:	cmp	r2, #61	; 0x3d
   124fc:	bne	1250c <__assert_fail@plt+0xe3c>
   12500:	mov	r7, #0
   12504:	add	r2, sp, #48	; 0x30
   12508:	b	12698 <__assert_fail@plt+0xfc8>
   1250c:	ldrb	r2, [r8]
   12510:	cmp	r2, #99	; 0x63
   12514:	bne	12560 <__assert_fail@plt+0xe90>
   12518:	ldrb	r2, [r8, #1]
   1251c:	cmp	r2, #98	; 0x62
   12520:	bne	12560 <__assert_fail@plt+0xe90>
   12524:	ldrb	r2, [r8, #2]
   12528:	cmp	r2, #115	; 0x73
   1252c:	bne	12560 <__assert_fail@plt+0xe90>
   12530:	ldrb	r2, [r8, #3]
   12534:	mov	r6, #0
   12538:	mvn	ip, #-2147483648	; 0x80000000
   1253c:	mov	r3, #1
   12540:	cmp	r2, #0
   12544:	beq	12550 <__assert_fail@plt+0xe80>
   12548:	cmp	r2, #61	; 0x3d
   1254c:	bne	12560 <__assert_fail@plt+0xe90>
   12550:	movw	r2, #62420	; 0xf3d4
   12554:	mov	r7, #0
   12558:	movt	r2, #2
   1255c:	b	12698 <__assert_fail@plt+0xfc8>
   12560:	ldrb	r2, [r8]
   12564:	cmp	r2, #115	; 0x73
   12568:	bne	125bc <__assert_fail@plt+0xeec>
   1256c:	ldrb	r2, [r8, #1]
   12570:	cmp	r2, #107	; 0x6b
   12574:	bne	125bc <__assert_fail@plt+0xeec>
   12578:	ldrb	r2, [r8, #2]
   1257c:	cmp	r2, #105	; 0x69
   12580:	bne	125bc <__assert_fail@plt+0xeec>
   12584:	ldrb	r2, [r8, #3]
   12588:	cmp	r2, #112	; 0x70
   1258c:	bne	125bc <__assert_fail@plt+0xeec>
   12590:	ldrb	r2, [r8, #4]
   12594:	mvn	r7, #-2147483648	; 0x80000000
   12598:	mvn	ip, #0
   1259c:	mov	r3, #0
   125a0:	cmp	r2, #0
   125a4:	beq	125b0 <__assert_fail@plt+0xee0>
   125a8:	cmp	r2, #61	; 0x3d
   125ac:	bne	125bc <__assert_fail@plt+0xeec>
   125b0:	str	r0, [sp, #40]	; 0x28
   125b4:	str	r1, [sp, #36]	; 0x24
   125b8:	b	12614 <__assert_fail@plt+0xf44>
   125bc:	ldrb	r2, [r8]
   125c0:	cmp	r2, #115	; 0x73
   125c4:	bne	12620 <__assert_fail@plt+0xf50>
   125c8:	ldrb	r2, [r8, #1]
   125cc:	cmp	r2, #101	; 0x65
   125d0:	bne	12620 <__assert_fail@plt+0xf50>
   125d4:	ldrb	r2, [r8, #2]
   125d8:	cmp	r2, #101	; 0x65
   125dc:	bne	12620 <__assert_fail@plt+0xf50>
   125e0:	ldrb	r2, [r8, #3]
   125e4:	cmp	r2, #107	; 0x6b
   125e8:	bne	12620 <__assert_fail@plt+0xf50>
   125ec:	ldrb	r2, [r8, #4]
   125f0:	mvn	r7, #-2147483648	; 0x80000000
   125f4:	mvn	ip, #0
   125f8:	mov	r3, #0
   125fc:	cmp	r2, #0
   12600:	beq	1260c <__assert_fail@plt+0xf3c>
   12604:	cmp	r2, #61	; 0x3d
   12608:	bne	12620 <__assert_fail@plt+0xf50>
   1260c:	str	r0, [sp, #32]
   12610:	str	r1, [sp, #28]
   12614:	mov	r6, #0
   12618:	mov	r2, #0
   1261c:	b	12698 <__assert_fail@plt+0xfc8>
   12620:	ldrb	r2, [r8]
   12624:	cmp	r2, #99	; 0x63
   12628:	bne	126c8 <__assert_fail@plt+0xff8>
   1262c:	ldrb	r2, [r8, #1]
   12630:	cmp	r2, #111	; 0x6f
   12634:	ldrbeq	r2, [r8, #2]
   12638:	cmpeq	r2, #117	; 0x75
   1263c:	bne	126c8 <__assert_fail@plt+0xff8>
   12640:	ldrb	r2, [r8, #3]
   12644:	cmp	r2, #110	; 0x6e
   12648:	ldrbeq	r2, [r8, #4]
   1264c:	cmpeq	r2, #116	; 0x74
   12650:	bne	126c8 <__assert_fail@plt+0xff8>
   12654:	ldrb	r2, [r8, #5]
   12658:	mvn	r7, #-2147483648	; 0x80000000
   1265c:	mvn	ip, #0
   12660:	mov	r3, #0
   12664:	cmp	r2, #0
   12668:	beq	12688 <__assert_fail@plt+0xfb8>
   1266c:	cmp	r2, #61	; 0x3d
   12670:	mov	r6, #0
   12674:	mov	r2, #0
   12678:	mov	sl, r0
   1267c:	str	r1, [sp, #44]	; 0x2c
   12680:	beq	12698 <__assert_fail@plt+0xfc8>
   12684:	b	126c8 <__assert_fail@plt+0xff8>
   12688:	mov	r6, #0
   1268c:	mov	r2, #0
   12690:	mov	sl, r0
   12694:	str	r1, [sp, #44]	; 0x2c
   12698:	subs	r3, r0, r3
   1269c:	sbcs	r3, r1, r6
   126a0:	blt	14788 <__assert_fail@plt+0x30b8>
   126a4:	subs	r3, ip, r0
   126a8:	sbcs	r1, r7, r1
   126ac:	blt	14794 <__assert_fail@plt+0x30c4>
   126b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   126b4:	cmp	r1, #0
   126b8:	bne	147a0 <__assert_fail@plt+0x30d0>
   126bc:	cmp	r2, #0
   126c0:	strne	r0, [r2]
   126c4:	b	120a8 <__assert_fail@plt+0x9d8>
   126c8:	movw	r1, #54272	; 0xd400
   126cc:	mov	r0, #0
   126d0:	mov	r2, #5
   126d4:	movt	r1, #1
   126d8:	bl	11424 <dcgettext@plt>
   126dc:	mov	r4, r0
   126e0:	mov	r0, r8
   126e4:	bl	19928 <__assert_fail@plt+0x8258>
   126e8:	mov	r3, r0
   126ec:	mov	r0, #0
   126f0:	mov	r1, #0
   126f4:	mov	r2, r4
   126f8:	bl	14a64 <__assert_fail@plt+0x3394>
   126fc:	mov	r0, #1
   12700:	bl	117d0 <__assert_fail@plt+0x100>
   12704:	ldr	r7, [sp, #40]	; 0x28
   12708:	ldr	r1, [sp, #36]	; 0x24
   1270c:	asr	r3, r5, #31
   12710:	mov	r2, r5
   12714:	mov	r0, r7
   12718:	bl	1c194 <__assert_fail@plt+0xaac4>
   1271c:	movw	r2, #62424	; 0xf3d8
   12720:	movt	r2, #2
   12724:	strd	r0, [r2]
   12728:	mls	r0, r0, r5, r7
   1272c:	str	r0, [r8]
   12730:	ldr	r1, [sp, #44]	; 0x2c
   12734:	mvn	r0, #-2147483648	; 0x80000000
   12738:	eor	r0, r1, r0
   1273c:	mvn	r1, r4
   12740:	orrs	r0, r1, r0
   12744:	andsne	r1, r6, #4
   12748:	bne	1276c <__assert_fail@plt+0x109c>
   1274c:	cmp	r0, #0
   12750:	beq	1279c <__assert_fail@plt+0x10cc>
   12754:	ldr	r1, [sp, #44]	; 0x2c
   12758:	movw	r0, #61768	; 0xf148
   1275c:	movt	r0, #2
   12760:	str	r4, [r0]
   12764:	str	r1, [r0, #4]
   12768:	b	1279c <__assert_fail@plt+0x10cc>
   1276c:	ldr	r1, [sp, #44]	; 0x2c
   12770:	asr	r3, r5, #31
   12774:	mov	r0, r4
   12778:	mov	r2, r5
   1277c:	bl	1c194 <__assert_fail@plt+0xaac4>
   12780:	movw	r2, #61768	; 0xf148
   12784:	movt	r2, #2
   12788:	strd	r0, [r2]
   1278c:	movw	r1, #62272	; 0xf340
   12790:	mls	r0, r0, r5, r4
   12794:	movt	r1, #2
   12798:	str	r0, [r1]
   1279c:	ldr	r0, [sp, #32]
   127a0:	ldr	r1, [sp, #28]
   127a4:	movw	r8, #62248	; 0xf328
   127a8:	movt	r8, #2
   127ac:	orrs	r0, r0, r1
   127b0:	andsne	r1, r9, #16
   127b4:	bne	127e8 <__assert_fail@plt+0x1118>
   127b8:	movw	r8, #62220	; 0xf30c
   127bc:	movw	sl, #62240	; 0xf320
   127c0:	cmp	r0, #0
   127c4:	movt	r8, #2
   127c8:	movt	sl, #2
   127cc:	beq	1283c <__assert_fail@plt+0x116c>
   127d0:	ldr	r1, [sp, #32]
   127d4:	movw	r0, #62232	; 0xf318
   127d8:	ldr	r2, [sp, #28]
   127dc:	movt	r0, #2
   127e0:	stm	r0, {r1, r2}
   127e4:	b	1283c <__assert_fail@plt+0x116c>
   127e8:	ldr	r7, [sp, #32]
   127ec:	ldr	r4, [sp, #28]
   127f0:	asr	r5, sl, #31
   127f4:	mov	r2, sl
   127f8:	mov	r3, r5
   127fc:	mov	r0, r7
   12800:	mov	r1, r4
   12804:	bl	1c194 <__assert_fail@plt+0xaac4>
   12808:	movw	r2, #62232	; 0xf318
   1280c:	movt	r2, #2
   12810:	strd	r0, [r2]
   12814:	umull	r2, r3, r0, sl
   12818:	mla	r0, r0, r5, r3
   1281c:	mla	r0, r1, sl, r0
   12820:	movw	sl, #62240	; 0xf320
   12824:	subs	r2, r7, r2
   12828:	movt	sl, #2
   1282c:	sbc	r3, r4, r0
   12830:	strd	r2, [r8]
   12834:	movw	r8, #62220	; 0xf30c
   12838:	movt	r8, #2
   1283c:	movw	r1, #62228	; 0xf314
   12840:	and	r0, r6, #1
   12844:	movt	r1, #2
   12848:	ldr	r5, [r1]
   1284c:	and	r1, r5, #2048	; 0x800
   12850:	orrs	r1, r1, r0
   12854:	mov	r1, #0
   12858:	bne	128a8 <__assert_fail@plt+0x11d8>
   1285c:	movw	r1, #62424	; 0xf3d8
   12860:	movt	r1, #2
   12864:	ldrd	r2, [r1]
   12868:	orrs	r1, r2, r3
   1286c:	mov	r1, #1
   12870:	bne	128a8 <__assert_fail@plt+0x11d8>
   12874:	movw	r2, #61768	; 0xf148
   12878:	movt	r2, #2
   1287c:	ldrd	r2, [r2]
   12880:	subs	r4, r2, #1
   12884:	sbcs	r4, r3, #0
   12888:	blt	128a0 <__assert_fail@plt+0x11d0>
   1288c:	mvn	r4, #-2147483648	; 0x80000000
   12890:	mvn	r2, r2
   12894:	eor	r3, r3, r4
   12898:	orrs	r2, r2, r3
   1289c:	bne	128a8 <__assert_fail@plt+0x11d8>
   128a0:	orr	r1, r9, r6
   128a4:	ubfx	r1, r1, #16, #1
   128a8:	movw	r2, #62436	; 0xf3e4
   128ac:	cmp	r0, #0
   128b0:	movw	r0, #62440	; 0xf3e8
   128b4:	bic	r4, r6, #1
   128b8:	movt	r2, #2
   128bc:	movt	r0, #2
   128c0:	strb	r1, [r2]
   128c4:	movw	r1, #21184	; 0x52c0
   128c8:	movw	r2, #21084	; 0x525c
   128cc:	movt	r1, #1
   128d0:	movt	r2, #1
   128d4:	moveq	r2, r1
   128d8:	str	r2, [r0]
   128dc:	movw	r0, #62196	; 0xf2f4
   128e0:	movt	r0, #2
   128e4:	str	r4, [r0]
   128e8:	and	r0, r5, #7
   128ec:	sub	r1, r0, #1
   128f0:	tst	r0, r1
   128f4:	bne	14894 <__assert_fail@plt+0x31c4>
   128f8:	and	r0, r5, #24
   128fc:	sub	r1, r0, #1
   12900:	tst	r0, r1
   12904:	bne	148a0 <__assert_fail@plt+0x31d0>
   12908:	and	r0, r5, #96	; 0x60
   1290c:	sub	r1, r0, #1
   12910:	tst	r0, r1
   12914:	bne	148ac <__assert_fail@plt+0x31dc>
   12918:	and	r0, r5, #12288	; 0x3000
   1291c:	sub	r1, r0, #1
   12920:	tst	r0, r1
   12924:	bne	148b8 <__assert_fail@plt+0x31e8>
   12928:	movw	r0, #2
   1292c:	movt	r0, #1
   12930:	and	r1, r6, r0
   12934:	sub	r2, r1, #1
   12938:	tst	r1, r2
   1293c:	andeq	r0, r9, r0
   12940:	subeq	r1, r0, #1
   12944:	tsteq	r0, r1
   12948:	bne	1477c <__assert_fail@plt+0x30ac>
   1294c:	movw	r1, #62276	; 0xf344
   12950:	tst	r6, #2
   12954:	movt	r1, #2
   12958:	beq	129a8 <__assert_fail@plt+0x12d8>
   1295c:	mov	r0, #1
   12960:	bic	r4, r6, #3
   12964:	strb	r0, [r1]
   12968:	movw	r0, #62196	; 0xf2f4
   1296c:	movw	r1, #61768	; 0xf148
   12970:	movt	r0, #2
   12974:	movt	r1, #2
   12978:	str	r4, [r0]
   1297c:	movw	r0, #62272	; 0xf340
   12980:	ldrd	r2, [r1]
   12984:	movt	r0, #2
   12988:	ldr	r0, [r0]
   1298c:	orr	r1, r2, r3
   12990:	orr	r0, r1, r0
   12994:	movw	r1, #62278	; 0xf346
   12998:	clz	r0, r0
   1299c:	movt	r1, #2
   129a0:	lsr	r0, r0, #5
   129a4:	strb	r0, [r1]
   129a8:	tst	r9, #2
   129ac:	beq	12a04 <__assert_fail@plt+0x1334>
   129b0:	movw	r0, #62277	; 0xf345
   129b4:	mov	r1, #1
   129b8:	movt	r0, #2
   129bc:	strb	r1, [r0]
   129c0:	movw	r1, #62224	; 0xf310
   129c4:	bic	r0, r9, #2
   129c8:	movt	r1, #2
   129cc:	str	r0, [r1]
   129d0:	movw	r1, #61768	; 0xf148
   129d4:	movw	r0, #62272	; 0xf340
   129d8:	movt	r1, #2
   129dc:	movt	r0, #2
   129e0:	ldrd	r2, [r1]
   129e4:	ldr	r0, [r0]
   129e8:	orr	r1, r2, r3
   129ec:	orr	r0, r1, r0
   129f0:	movw	r1, #62279	; 0xf347
   129f4:	clz	r0, r0
   129f8:	movt	r1, #2
   129fc:	lsr	r0, r0, #5
   12a00:	strb	r0, [r1]
   12a04:	movw	r7, #62504	; 0xf428
   12a08:	movw	r6, #61936	; 0xf1f0
   12a0c:	tst	r5, #1
   12a10:	movt	r7, #2
   12a14:	movt	r6, #2
   12a18:	beq	12a58 <__assert_fail@plt+0x1388>
   12a1c:	movw	r1, #56240	; 0xdbb0
   12a20:	mov	r0, #0
   12a24:	movt	r1, #1
   12a28:	mov	r2, r6
   12a2c:	ldrb	r3, [r2, r0]!
   12a30:	add	r0, r0, #2
   12a34:	cmp	r0, #256	; 0x100
   12a38:	ldrb	r3, [r1, r3]
   12a3c:	strb	r3, [r2]
   12a40:	ldrb	r3, [r2, #1]
   12a44:	ldrb	r3, [r1, r3]
   12a48:	strb	r3, [r2, #1]
   12a4c:	bne	12a28 <__assert_fail@plt+0x1358>
   12a50:	mov	r0, #1
   12a54:	strb	r0, [r7]
   12a58:	tst	r5, #64	; 0x40
   12a5c:	bne	12aa0 <__assert_fail@plt+0x13d0>
   12a60:	tst	r5, #32
   12a64:	beq	12adc <__assert_fail@plt+0x140c>
   12a68:	bl	11520 <__ctype_tolower_loc@plt>
   12a6c:	ldr	r0, [r0]
   12a70:	mov	r1, #0
   12a74:	mov	r2, r6
   12a78:	ldrb	r3, [r2, r1]!
   12a7c:	add	r1, r1, #2
   12a80:	cmp	r1, #256	; 0x100
   12a84:	ldr	r3, [r0, r3, lsl #2]
   12a88:	strb	r3, [r2]
   12a8c:	ldrb	r3, [r2, #1]
   12a90:	ldr	r3, [r0, r3, lsl #2]
   12a94:	strb	r3, [r2, #1]
   12a98:	bne	12a74 <__assert_fail@plt+0x13a4>
   12a9c:	b	12ad4 <__assert_fail@plt+0x1404>
   12aa0:	bl	1152c <__ctype_toupper_loc@plt>
   12aa4:	ldr	r0, [r0]
   12aa8:	mov	r1, #0
   12aac:	mov	r2, r6
   12ab0:	ldrb	r3, [r2, r1]!
   12ab4:	add	r1, r1, #2
   12ab8:	cmp	r1, #256	; 0x100
   12abc:	ldr	r3, [r0, r3, lsl #2]
   12ac0:	strb	r3, [r2]
   12ac4:	ldrb	r3, [r2, #1]
   12ac8:	ldr	r3, [r0, r3, lsl #2]
   12acc:	strb	r3, [r2, #1]
   12ad0:	bne	12aac <__assert_fail@plt+0x13dc>
   12ad4:	mov	r0, #1
   12ad8:	strb	r0, [r7]
   12adc:	tst	r5, #2
   12ae0:	bne	12b24 <__assert_fail@plt+0x1454>
   12ae4:	tst	r5, #4
   12ae8:	beq	12b78 <__assert_fail@plt+0x14a8>
   12aec:	movw	r1, #56752	; 0xddb0
   12af0:	mov	r0, #0
   12af4:	movt	r1, #1
   12af8:	mov	r2, r6
   12afc:	ldrb	r3, [r2, r0]!
   12b00:	add	r0, r0, #2
   12b04:	cmp	r0, #256	; 0x100
   12b08:	ldrb	r3, [r1, r3]
   12b0c:	strb	r3, [r2]
   12b10:	ldrb	r3, [r2, #1]
   12b14:	ldrb	r3, [r1, r3]
   12b18:	strb	r3, [r2, #1]
   12b1c:	bne	12af8 <__assert_fail@plt+0x1428>
   12b20:	b	12b58 <__assert_fail@plt+0x1488>
   12b24:	movw	r1, #56496	; 0xdcb0
   12b28:	mov	r0, #0
   12b2c:	movt	r1, #1
   12b30:	mov	r2, r6
   12b34:	ldrb	r3, [r2, r0]!
   12b38:	add	r0, r0, #2
   12b3c:	cmp	r0, #256	; 0x100
   12b40:	ldrb	r3, [r1, r3]
   12b44:	strb	r3, [r2]
   12b48:	ldrb	r3, [r2, #1]
   12b4c:	ldrb	r3, [r1, r3]
   12b50:	strb	r3, [r2, #1]
   12b54:	bne	12b30 <__assert_fail@plt+0x1460>
   12b58:	movw	r0, #62505	; 0xf429
   12b5c:	mov	r1, #1
   12b60:	movt	r0, #2
   12b64:	strb	r1, [r7]
   12b68:	strb	r1, [r0]
   12b6c:	movw	r0, #62506	; 0xf42a
   12b70:	movt	r0, #2
   12b74:	strb	r1, [r0]
   12b78:	movw	r6, #62192	; 0xf2f0
   12b7c:	movt	r6, #2
   12b80:	ldr	r5, [r6]
   12b84:	cmp	r5, #0
   12b88:	beq	12bfc <__assert_fail@plt+0x152c>
   12b8c:	bl	15414 <__assert_fail@plt+0x3d44>
   12b90:	mov	r0, #0
   12b94:	mov	r1, r5
   12b98:	mov	r2, r4
   12b9c:	mov	r3, #0
   12ba0:	bl	16cc8 <__assert_fail@plt+0x55f8>
   12ba4:	cmn	r0, #1
   12ba8:	bgt	12c2c <__assert_fail@plt+0x155c>
   12bac:	bl	11598 <__errno_location@plt>
   12bb0:	ldr	r6, [r0]
   12bb4:	cmp	r6, #4
   12bb8:	beq	12b8c <__assert_fail@plt+0x14bc>
   12bbc:	movw	r1, #53721	; 0xd1d9
   12bc0:	mov	r0, #0
   12bc4:	mov	r2, #5
   12bc8:	movt	r1, #1
   12bcc:	bl	11424 <dcgettext@plt>
   12bd0:	mov	r4, r0
   12bd4:	movw	r0, #62192	; 0xf2f0
   12bd8:	movt	r0, #2
   12bdc:	ldr	r1, [r0]
   12be0:	mov	r0, #4
   12be4:	bl	19400 <__assert_fail@plt+0x7d30>
   12be8:	mov	r3, r0
   12bec:	mov	r0, #1
   12bf0:	mov	r1, r6
   12bf4:	mov	r2, r4
   12bf8:	bl	14a64 <__assert_fail@plt+0x3394>
   12bfc:	movw	r1, #53706	; 0xd1ca
   12c00:	mov	r0, #0
   12c04:	mov	r2, #5
   12c08:	movt	r1, #1
   12c0c:	bl	11424 <dcgettext@plt>
   12c10:	mov	r2, r0
   12c14:	str	r0, [r6]
   12c18:	movw	r0, #62196	; 0xf2f4
   12c1c:	movt	r0, #2
   12c20:	ldr	r1, [r0]
   12c24:	mov	r0, #0
   12c28:	bl	14958 <__assert_fail@plt+0x3288>
   12c2c:	mov	r0, #1
   12c30:	mov	r2, #0
   12c34:	mov	r3, #0
   12c38:	mov	r4, #0
   12c3c:	str	r0, [sp]
   12c40:	mov	r0, #0
   12c44:	bl	11490 <lseek64@plt>
   12c48:	movw	r2, #62200	; 0xf2f8
   12c4c:	mov	r5, r1
   12c50:	mvn	r1, r1
   12c54:	movt	r2, #2
   12c58:	lsr	r1, r1, #31
   12c5c:	strb	r1, [r2]
   12c60:	rsbs	r1, r0, #0
   12c64:	rscs	r1, r5, #0
   12c68:	movw	r1, #62208	; 0xf300
   12c6c:	movwlt	r4, #1
   12c70:	movt	r1, #2
   12c74:	cmp	r4, #0
   12c78:	moveq	r5, r4
   12c7c:	movne	r4, r0
   12c80:	strd	r4, [r1]
   12c84:	bl	11598 <__errno_location@plt>
   12c88:	ldr	r6, [r8]
   12c8c:	mov	r9, r0
   12c90:	ldr	r0, [r0]
   12c94:	movw	r1, #62216	; 0xf308
   12c98:	movt	r1, #2
   12c9c:	str	r9, [sp, #44]	; 0x2c
   12ca0:	cmp	r6, #0
   12ca4:	str	r0, [r1]
   12ca8:	beq	12d28 <__assert_fail@plt+0x1658>
   12cac:	movw	r0, #62228	; 0xf314
   12cb0:	movw	r3, #62224	; 0xf310
   12cb4:	mov	r2, #128	; 0x80
   12cb8:	mov	r1, #64	; 0x40
   12cbc:	ldr	r5, [sl]
   12cc0:	movt	r0, #2
   12cc4:	movt	r3, #2
   12cc8:	ldr	r0, [r0]
   12ccc:	ldr	r3, [r3]
   12cd0:	and	r2, r2, r0, lsr #6
   12cd4:	bic	r1, r1, r0, lsr #6
   12cd8:	orr	r2, r2, r3
   12cdc:	orr	r1, r2, r1
   12ce0:	movw	r2, #62232	; 0xf318
   12ce4:	movt	r2, #2
   12ce8:	mov	r8, r1
   12cec:	ldm	r2, {r4, r9}
   12cf0:	orrs	ip, r4, r9
   12cf4:	orreq	r8, r8, #512	; 0x200
   12cf8:	ands	lr, r0, #512	; 0x200
   12cfc:	movne	r8, r1
   12d00:	cmn	r5, #1
   12d04:	ble	12d64 <__assert_fail@plt+0x1694>
   12d08:	cmp	r5, #0
   12d0c:	beq	12e54 <__assert_fail@plt+0x1784>
   12d10:	cmn	r9, #1
   12d14:	ble	12db0 <__assert_fail@plt+0x16e0>
   12d18:	asr	r3, r5, #31
   12d1c:	mvn	r0, #0
   12d20:	mvn	r1, #-2147483648	; 0x80000000
   12d24:	b	12d80 <__assert_fail@plt+0x16b0>
   12d28:	movw	r1, #53739	; 0xd1eb
   12d2c:	mov	r0, #0
   12d30:	mov	r2, #5
   12d34:	movt	r1, #1
   12d38:	bl	11424 <dcgettext@plt>
   12d3c:	mov	r2, r0
   12d40:	str	r0, [r8]
   12d44:	movw	r0, #62224	; 0xf310
   12d48:	movt	r0, #2
   12d4c:	ldr	r1, [r0]
   12d50:	mov	r0, #1
   12d54:	bl	14958 <__assert_fail@plt+0x3288>
   12d58:	movw	r8, #62432	; 0xf3e0
   12d5c:	movt	r8, #2
   12d60:	b	13060 <__assert_fail@plt+0x1990>
   12d64:	cmn	r9, #1
   12d68:	ble	12e00 <__assert_fail@plt+0x1730>
   12d6c:	cmn	r5, #1
   12d70:	beq	12e54 <__assert_fail@plt+0x1784>
   12d74:	asr	r3, r5, #31
   12d78:	mov	r0, #0
   12d7c:	mov	r1, #-2147483648	; 0x80000000
   12d80:	mov	r2, r5
   12d84:	mov	r7, r3
   12d88:	str	r3, [sp, #36]	; 0x24
   12d8c:	str	ip, [sp, #40]	; 0x28
   12d90:	mov	sl, lr
   12d94:	bl	1c194 <__assert_fail@plt+0xaac4>
   12d98:	ldr	ip, [sp, #40]	; 0x28
   12d9c:	subs	r0, r0, r4
   12da0:	mov	lr, sl
   12da4:	sbcs	r0, r1, r9
   12da8:	blt	12e38 <__assert_fail@plt+0x1768>
   12dac:	b	12e54 <__assert_fail@plt+0x1784>
   12db0:	mvn	r1, #0
   12db4:	eor	r0, r4, r1
   12db8:	eor	r1, r9, r1
   12dbc:	orrs	r0, r0, r1
   12dc0:	beq	12e54 <__assert_fail@plt+0x1784>
   12dc4:	mov	r0, #0
   12dc8:	mov	r1, #-2147483648	; 0x80000000
   12dcc:	mov	r2, r4
   12dd0:	mov	r3, r9
   12dd4:	str	ip, [sp, #40]	; 0x28
   12dd8:	mov	sl, lr
   12ddc:	bl	1c194 <__assert_fail@plt+0xaac4>
   12de0:	ldr	ip, [sp, #40]	; 0x28
   12de4:	subs	r0, r0, r5
   12de8:	mov	lr, sl
   12dec:	sbcs	r0, r1, r5, asr #31
   12df0:	bge	12e54 <__assert_fail@plt+0x1784>
   12df4:	asr	r0, r5, #31
   12df8:	str	r0, [sp, #36]	; 0x24
   12dfc:	b	12e38 <__assert_fail@plt+0x1768>
   12e00:	asr	r3, r5, #31
   12e04:	mvn	r0, #0
   12e08:	mvn	r1, #-2147483648	; 0x80000000
   12e0c:	mov	r2, r5
   12e10:	str	ip, [sp, #40]	; 0x28
   12e14:	mov	sl, lr
   12e18:	mov	r7, r3
   12e1c:	str	r3, [sp, #36]	; 0x24
   12e20:	bl	1c194 <__assert_fail@plt+0xaac4>
   12e24:	ldr	ip, [sp, #40]	; 0x28
   12e28:	subs	r0, r4, r0
   12e2c:	mov	lr, sl
   12e30:	sbcs	r0, r9, r1
   12e34:	bge	12e54 <__assert_fail@plt+0x1784>
   12e38:	ldr	r1, [sp, #36]	; 0x24
   12e3c:	umull	sl, r0, r4, r5
   12e40:	mla	r0, r4, r1, r0
   12e44:	mla	r5, r9, r5, r0
   12e48:	cmp	lr, #0
   12e4c:	bne	12ec4 <__assert_fail@plt+0x17f4>
   12e50:	b	148dc <__assert_fail@plt+0x320c>
   12e54:	umull	r0, r1, r4, r5
   12e58:	asr	r2, r5, #31
   12e5c:	mla	r1, r4, r2, r1
   12e60:	movw	r2, #62248	; 0xf328
   12e64:	movt	r2, #2
   12e68:	mla	r1, r9, r5, r1
   12e6c:	ldrd	r2, [r2]
   12e70:	adds	sl, r2, r0
   12e74:	mov	r2, #0
   12e78:	mov	r0, #0
   12e7c:	adc	r5, r3, r1
   12e80:	cmn	r5, #1
   12e84:	movwgt	r2, #1
   12e88:	cmn	r3, #1
   12e8c:	mov	r3, #0
   12e90:	movwgt	r3, #1
   12e94:	subs	r2, r3, r2
   12e98:	movwne	r2, #1
   12e9c:	cmn	r1, #1
   12ea0:	movwgt	r0, #1
   12ea4:	sub	r0, r3, r0
   12ea8:	clz	r0, r0
   12eac:	lsr	r0, r0, #5
   12eb0:	and	r0, r0, r2
   12eb4:	cmp	r0, #1
   12eb8:	bne	12ec4 <__assert_fail@plt+0x17f4>
   12ebc:	cmp	lr, #0
   12ec0:	beq	148dc <__assert_fail@plt+0x320c>
   12ec4:	ldr	r9, [sp, #44]	; 0x2c
   12ec8:	cmp	ip, #0
   12ecc:	beq	12f0c <__assert_fail@plt+0x183c>
   12ed0:	orr	r4, r8, #2
   12ed4:	bl	15414 <__assert_fail@plt+0x3d44>
   12ed8:	mov	r0, #1
   12edc:	mov	r1, r6
   12ee0:	mov	r2, r4
   12ee4:	movw	r3, #438	; 0x1b6
   12ee8:	bl	16cc8 <__assert_fail@plt+0x55f8>
   12eec:	cmn	r0, #1
   12ef0:	bgt	12f7c <__assert_fail@plt+0x18ac>
   12ef4:	ldr	r0, [r9]
   12ef8:	cmp	r0, #4
   12efc:	beq	12ed4 <__assert_fail@plt+0x1804>
   12f00:	movw	r0, #62220	; 0xf30c
   12f04:	movt	r0, #2
   12f08:	ldr	r6, [r0]
   12f0c:	orr	r7, r8, #1
   12f10:	bl	15414 <__assert_fail@plt+0x3d44>
   12f14:	mov	r0, #1
   12f18:	mov	r1, r6
   12f1c:	mov	r2, r7
   12f20:	movw	r3, #438	; 0x1b6
   12f24:	bl	16cc8 <__assert_fail@plt+0x55f8>
   12f28:	cmn	r0, #1
   12f2c:	bgt	12f7c <__assert_fail@plt+0x18ac>
   12f30:	ldr	r4, [r9]
   12f34:	cmp	r4, #4
   12f38:	beq	12f10 <__assert_fail@plt+0x1840>
   12f3c:	movw	r1, #53721	; 0xd1d9
   12f40:	mov	r0, #0
   12f44:	mov	r2, #5
   12f48:	movt	r1, #1
   12f4c:	bl	11424 <dcgettext@plt>
   12f50:	mov	r5, r0
   12f54:	movw	r0, #62220	; 0xf30c
   12f58:	movt	r0, #2
   12f5c:	ldr	r1, [r0]
   12f60:	mov	r0, #4
   12f64:	bl	19400 <__assert_fail@plt+0x7d30>
   12f68:	mov	r3, r0
   12f6c:	mov	r0, #1
   12f70:	mov	r1, r4
   12f74:	mov	r2, r5
   12f78:	bl	14a64 <__assert_fail@plt+0x3394>
   12f7c:	movw	r0, #62232	; 0xf318
   12f80:	movw	r8, #62432	; 0xf3e0
   12f84:	movt	r0, #2
   12f88:	movt	r8, #2
   12f8c:	ldrd	r0, [r0]
   12f90:	orrs	r0, r0, r1
   12f94:	beq	13060 <__assert_fail@plt+0x1990>
   12f98:	movw	r0, #62228	; 0xf314
   12f9c:	movt	r0, #2
   12fa0:	ldrb	r0, [r0, #1]
   12fa4:	tst	r0, #2
   12fa8:	bne	13060 <__assert_fail@plt+0x1990>
   12fac:	bl	15414 <__assert_fail@plt+0x3d44>
   12fb0:	mov	r0, #1
   12fb4:	mov	r2, sl
   12fb8:	mov	r3, r5
   12fbc:	bl	11418 <ftruncate64@plt>
   12fc0:	cmn	r0, #1
   12fc4:	bgt	12fd8 <__assert_fail@plt+0x1908>
   12fc8:	ldr	r6, [r9]
   12fcc:	cmp	r6, #4
   12fd0:	beq	12fac <__assert_fail@plt+0x18dc>
   12fd4:	b	12fe4 <__assert_fail@plt+0x1914>
   12fd8:	cmp	r0, #0
   12fdc:	beq	13060 <__assert_fail@plt+0x1990>
   12fe0:	ldr	r6, [r9]
   12fe4:	add	r7, sp, #48	; 0x30
   12fe8:	bl	15414 <__assert_fail@plt+0x3d44>
   12fec:	mov	r0, #3
   12ff0:	mov	r1, #1
   12ff4:	mov	r2, r7
   12ff8:	bl	1146c <__fxstat64@plt>
   12ffc:	cmn	r0, #1
   13000:	bgt	13014 <__assert_fail@plt+0x1944>
   13004:	ldr	r4, [r9]
   13008:	cmp	r4, #4
   1300c:	beq	12fe8 <__assert_fail@plt+0x1918>
   13010:	b	13020 <__assert_fail@plt+0x1950>
   13014:	cmp	r0, #0
   13018:	beq	140c8 <__assert_fail@plt+0x29f8>
   1301c:	ldr	r4, [r9]
   13020:	movw	r1, #53832	; 0xd248
   13024:	mov	r0, #0
   13028:	mov	r2, #5
   1302c:	movt	r1, #1
   13030:	bl	11424 <dcgettext@plt>
   13034:	mov	r5, r0
   13038:	movw	r0, #62220	; 0xf30c
   1303c:	movt	r0, #2
   13040:	ldr	r1, [r0]
   13044:	mov	r0, #4
   13048:	bl	19400 <__assert_fail@plt+0x7d30>
   1304c:	mov	r3, r0
   13050:	mov	r0, #0
   13054:	mov	r1, r4
   13058:	mov	r2, r5
   1305c:	bl	14a64 <__assert_fail@plt+0x3394>
   13060:	bl	16e34 <__assert_fail@plt+0x5764>
   13064:	movw	r2, #62256	; 0xf330
   13068:	movw	r3, #51712	; 0xca00
   1306c:	ldr	r6, [r8]
   13070:	movt	r2, #2
   13074:	movt	r3, #15258	; 0x3b9a
   13078:	strd	r0, [r2]
   1307c:	movw	r2, #62264	; 0xf338
   13080:	adds	r0, r0, r3
   13084:	movt	r2, #2
   13088:	adc	r1, r1, #0
   1308c:	strd	r0, [r2]
   13090:	movw	r0, #62424	; 0xf3d8
   13094:	movt	r0, #2
   13098:	ldm	r0, {r4, r7}
   1309c:	orrs	r0, r4, r7
   130a0:	cmpeq	r6, #0
   130a4:	beq	132f0 <__assert_fail@plt+0x1c20>
   130a8:	movw	r0, #62416	; 0xf3d0
   130ac:	movt	r0, #2
   130b0:	ldr	r5, [r0]
   130b4:	cmn	r5, #1
   130b8:	ble	130e4 <__assert_fail@plt+0x1a14>
   130bc:	movw	ip, #62208	; 0xf300
   130c0:	cmp	r5, #0
   130c4:	movt	ip, #2
   130c8:	beq	131b4 <__assert_fail@plt+0x1ae4>
   130cc:	cmn	r7, #1
   130d0:	ble	1312c <__assert_fail@plt+0x1a5c>
   130d4:	asr	r8, r5, #31
   130d8:	mvn	r0, #0
   130dc:	mvn	r1, #-2147483648	; 0x80000000
   130e0:	b	13108 <__assert_fail@plt+0x1a38>
   130e4:	movw	ip, #62208	; 0xf300
   130e8:	cmn	r7, #1
   130ec:	movt	ip, #2
   130f0:	ble	13170 <__assert_fail@plt+0x1aa0>
   130f4:	cmn	r5, #1
   130f8:	beq	131b4 <__assert_fail@plt+0x1ae4>
   130fc:	asr	r8, r5, #31
   13100:	mov	r0, #0
   13104:	mov	r1, #-2147483648	; 0x80000000
   13108:	mov	r2, r5
   1310c:	mov	r3, r8
   13110:	bl	1c194 <__assert_fail@plt+0xaac4>
   13114:	movw	ip, #62208	; 0xf300
   13118:	subs	r0, r0, r4
   1311c:	movt	ip, #2
   13120:	sbcs	r0, r1, r7
   13124:	blt	1319c <__assert_fail@plt+0x1acc>
   13128:	b	131b4 <__assert_fail@plt+0x1ae4>
   1312c:	mvn	r1, #0
   13130:	eor	r0, r4, r1
   13134:	eor	r1, r7, r1
   13138:	orrs	r0, r0, r1
   1313c:	beq	131b4 <__assert_fail@plt+0x1ae4>
   13140:	mov	r0, #0
   13144:	mov	r1, #-2147483648	; 0x80000000
   13148:	mov	r2, r4
   1314c:	mov	r3, r7
   13150:	bl	1c194 <__assert_fail@plt+0xaac4>
   13154:	movw	ip, #62208	; 0xf300
   13158:	subs	r0, r0, r5
   1315c:	movt	ip, #2
   13160:	sbcs	r0, r1, r5, asr #31
   13164:	bge	131b4 <__assert_fail@plt+0x1ae4>
   13168:	asr	r8, r5, #31
   1316c:	b	1319c <__assert_fail@plt+0x1acc>
   13170:	asr	r8, r5, #31
   13174:	mvn	r0, #0
   13178:	mvn	r1, #-2147483648	; 0x80000000
   1317c:	mov	r2, r5
   13180:	mov	r3, r8
   13184:	bl	1c194 <__assert_fail@plt+0xaac4>
   13188:	movw	ip, #62208	; 0xf300
   1318c:	subs	r0, r4, r0
   13190:	movt	ip, #2
   13194:	sbcs	r0, r7, r1
   13198:	bge	131b4 <__assert_fail@plt+0x1ae4>
   1319c:	umull	r1, r0, r5, r4
   131a0:	mla	r0, r5, r7, r0
   131a4:	mla	r6, r8, r4, r0
   131a8:	mov	r0, #1
   131ac:	str	r1, [sp, #40]	; 0x28
   131b0:	b	13210 <__assert_fail@plt+0x1b40>
   131b4:	umull	r0, r1, r4, r5
   131b8:	asr	r2, r5, #31
   131bc:	mov	r3, #0
   131c0:	mla	r1, r4, r2, r1
   131c4:	asr	r2, r6, #31
   131c8:	mla	r1, r7, r5, r1
   131cc:	adds	r0, r6, r0
   131d0:	str	r0, [sp, #40]	; 0x28
   131d4:	mov	r0, #0
   131d8:	adc	r6, r2, r1
   131dc:	cmn	r6, #1
   131e0:	movwgt	r3, #1
   131e4:	cmn	r2, #1
   131e8:	mov	r2, #0
   131ec:	movwgt	r2, #1
   131f0:	subs	r3, r2, r3
   131f4:	movwne	r3, #1
   131f8:	cmn	r1, #1
   131fc:	movwgt	r0, #1
   13200:	sub	r0, r2, r0
   13204:	clz	r0, r0
   13208:	lsr	r0, r0, #5
   1320c:	and	r0, r0, r3
   13210:	str	r0, [sp, #36]	; 0x24
   13214:	movw	r0, #62192	; 0xf2f0
   13218:	ldr	sl, [ip]
   1321c:	ldr	r8, [ip, #4]
   13220:	mov	r2, r4
   13224:	mov	r3, r7
   13228:	str	r5, [sp]
   1322c:	movt	r0, #2
   13230:	ldr	r1, [r0]
   13234:	movw	r0, #62432	; 0xf3e0
   13238:	movt	r0, #2
   1323c:	str	r0, [sp, #4]
   13240:	mov	r0, #0
   13244:	bl	15af0 <__assert_fail@plt+0x4420>
   13248:	orrs	r0, r0, r1
   1324c:	beq	132ac <__assert_fail@plt+0x1bdc>
   13250:	movw	r0, #61776	; 0xf150
   13254:	movt	r0, #2
   13258:	ldr	r0, [r0]
   1325c:	cmp	r0, #1
   13260:	beq	132f0 <__assert_fail@plt+0x1c20>
   13264:	movw	r1, #55108	; 0xd744
   13268:	mov	r0, #0
   1326c:	mov	r2, #5
   13270:	movt	r1, #1
   13274:	bl	11424 <dcgettext@plt>
   13278:	mov	r4, r0
   1327c:	movw	r0, #62192	; 0xf2f0
   13280:	mov	r1, #3
   13284:	movt	r0, #2
   13288:	ldr	r2, [r0]
   1328c:	mov	r0, #0
   13290:	bl	1967c <__assert_fail@plt+0x7fac>
   13294:	mov	r3, r0
   13298:	mov	r0, #0
   1329c:	mov	r1, #0
   132a0:	mov	r2, r4
   132a4:	bl	14a64 <__assert_fail@plt+0x3394>
   132a8:	b	132f0 <__assert_fail@plt+0x1c20>
   132ac:	movw	r0, #62208	; 0xf300
   132b0:	mvn	r3, #0
   132b4:	movt	r0, #2
   132b8:	ldrd	r0, [r0]
   132bc:	subs	r2, r3, r0
   132c0:	sbcs	r2, r3, r1
   132c4:	bge	132f0 <__assert_fail@plt+0x1c20>
   132c8:	ldr	r2, [sp, #40]	; 0x28
   132cc:	subs	r0, r0, sl
   132d0:	sbc	r1, r1, r8
   132d4:	eor	r1, r6, r1
   132d8:	eor	r0, r2, r0
   132dc:	orrs	r0, r0, r1
   132e0:	bne	13250 <__assert_fail@plt+0x1b80>
   132e4:	ldr	r0, [sp, #36]	; 0x24
   132e8:	eors	r0, r0, #1
   132ec:	beq	13250 <__assert_fail@plt+0x1b80>
   132f0:	movw	r0, #62232	; 0xf318
   132f4:	movw	r8, #62220	; 0xf30c
   132f8:	movw	r4, #62240	; 0xf320
   132fc:	movt	r0, #2
   13300:	movt	r8, #2
   13304:	movt	r4, #2
   13308:	ldrd	r2, [r0]
   1330c:	movw	r0, #62248	; 0xf328
   13310:	mov	sl, r8
   13314:	movt	r0, #2
   13318:	ldrd	r0, [r0]
   1331c:	orr	r1, r1, r3
   13320:	orr	r7, r0, r2
   13324:	orrs	r1, r7, r1
   13328:	beq	133ec <__assert_fail@plt+0x1d1c>
   1332c:	str	r0, [sp, #48]	; 0x30
   13330:	ldr	r0, [r4]
   13334:	ldr	r1, [sl]
   13338:	str	r0, [sp]
   1333c:	add	r0, sp, #48	; 0x30
   13340:	str	r0, [sp, #4]
   13344:	mov	r0, #1
   13348:	bl	15af0 <__assert_fail@plt+0x4420>
   1334c:	ldr	r7, [sp, #48]	; 0x30
   13350:	mov	r5, r0
   13354:	orrs	r0, r0, r1
   13358:	mov	r6, r1
   1335c:	cmpeq	r7, #0
   13360:	beq	133ec <__assert_fail@plt+0x1d1c>
   13364:	movw	r8, #62508	; 0xf42c
   13368:	cmp	r0, #0
   1336c:	ldr	r2, [r4]
   13370:	mov	r1, #0
   13374:	mov	sl, #0
   13378:	movt	r8, #2
   1337c:	moveq	r2, r7
   13380:	ldr	r0, [r8]
   13384:	bl	115c8 <memset@plt>
   13388:	orrs	r0, r5, r6
   1338c:	movw	r0, #62240	; 0xf320
   13390:	movt	r0, #2
   13394:	ldr	r4, [r0]
   13398:	ldr	r0, [r8]
   1339c:	moveq	r4, r7
   133a0:	mov	r1, r4
   133a4:	bl	1605c <__assert_fail@plt+0x498c>
   133a8:	cmp	r0, r4
   133ac:	bne	14734 <__assert_fail@plt+0x3064>
   133b0:	subs	r5, r5, #1
   133b4:	sbcs	r6, r6, #0
   133b8:	adcs	r0, sl, #0
   133bc:	moveq	r6, r0
   133c0:	moveq	r5, r0
   133c4:	moveq	r7, r0
   133c8:	orr	r1, r5, r6
   133cc:	cmp	r1, #0
   133d0:	cmpeq	r7, #0
   133d4:	bne	13388 <__assert_fail@plt+0x1cb8>
   133d8:	movw	r8, #62220	; 0xf30c
   133dc:	mov	r0, #0
   133e0:	movt	r8, #2
   133e4:	str	r0, [sp, #48]	; 0x30
   133e8:	mov	sl, r8
   133ec:	movw	r0, #61768	; 0xf148
   133f0:	movt	r0, #2
   133f4:	ldrd	r0, [r0]
   133f8:	orrs	r0, r0, r1
   133fc:	bne	13418 <__assert_fail@plt+0x1d48>
   13400:	movw	r0, #62272	; 0xf340
   13404:	mov	r8, #0
   13408:	movt	r0, #2
   1340c:	ldr	r0, [r0]
   13410:	cmp	r0, #0
   13414:	beq	1420c <__assert_fail@plt+0x2b3c>
   13418:	bl	16354 <__assert_fail@plt+0x4c84>
   1341c:	bl	16414 <__assert_fail@plt+0x4d44>
   13420:	mvn	r0, #0
   13424:	mov	sl, #0
   13428:	str	r0, [sp, #36]	; 0x24
   1342c:	mov	r0, #0
   13430:	str	r0, [sp, #40]	; 0x28
   13434:	b	13460 <__assert_fail@plt+0x1d90>
   13438:	ldr	r9, [sp, #44]	; 0x2c
   1343c:	movw	r6, #61936	; 0xf1f0
   13440:	movt	r6, #2
   13444:	cmp	sl, #0
   13448:	bne	13460 <__assert_fail@plt+0x1d90>
   1344c:	movw	r0, #62228	; 0xf314
   13450:	movt	r0, #2
   13454:	ldr	r0, [r0]
   13458:	ands	r0, r0, #1024	; 0x400
   1345c:	bne	13974 <__assert_fail@plt+0x22a4>
   13460:	movw	r0, #61776	; 0xf150
   13464:	movt	r0, #2
   13468:	ldr	r0, [r0]
   1346c:	cmp	r0, #4
   13470:	bne	134b8 <__assert_fail@plt+0x1de8>
   13474:	bl	16e34 <__assert_fail@plt+0x5764>
   13478:	movw	r2, #62264	; 0xf338
   1347c:	movt	r2, #2
   13480:	ldrd	r2, [r2]
   13484:	subs	r2, r0, r2
   13488:	sbcs	r2, r1, r3
   1348c:	blt	134b8 <__assert_fail@plt+0x1de8>
   13490:	bl	15750 <__assert_fail@plt+0x4080>
   13494:	movw	r0, #62264	; 0xf338
   13498:	movw	r3, #51712	; 0xca00
   1349c:	movt	r0, #2
   134a0:	movt	r3, #15258	; 0x3b9a
   134a4:	mov	r2, r0
   134a8:	ldrd	r0, [r0]
   134ac:	adds	r0, r0, r3
   134b0:	adc	r1, r1, #0
   134b4:	strd	r0, [r2]
   134b8:	movw	r0, #61768	; 0xf148
   134bc:	movw	r7, #62272	; 0xf340
   134c0:	movw	r2, #62456	; 0xf3f8
   134c4:	movw	r3, #62464	; 0xf400
   134c8:	movt	r0, #2
   134cc:	movt	r7, #2
   134d0:	movt	r2, #2
   134d4:	movt	r3, #2
   134d8:	ldrd	r4, [r0]
   134dc:	ldr	r7, [r7]
   134e0:	ldr	r6, [r3]
   134e4:	ldm	r2, {r2, ip}
   134e8:	ldr	r3, [r3, #4]
   134ec:	adds	r0, r4, #1
   134f0:	adc	r1, r5, #0
   134f4:	cmp	r7, #0
   134f8:	moveq	r0, r4
   134fc:	adds	r6, r2, r6
   13500:	adc	r8, ip, r3
   13504:	cmp	r7, #0
   13508:	moveq	r1, r5
   1350c:	subs	r0, r6, r0
   13510:	sbcs	r0, r8, r1
   13514:	bge	13cc8 <__assert_fail@plt+0x25f8>
   13518:	movw	r0, #62228	; 0xf314
   1351c:	movt	r0, #2
   13520:	ldr	r1, [r0]
   13524:	and	r0, r1, #1280	; 0x500
   13528:	cmp	r0, #1280	; 0x500
   1352c:	bne	13558 <__assert_fail@plt+0x1e88>
   13530:	movw	r0, #62416	; 0xf3d0
   13534:	ands	r1, r1, #24
   13538:	movt	r0, #2
   1353c:	movwne	r1, #1
   13540:	lsl	r1, r1, #5
   13544:	ldr	r2, [r0]
   13548:	movw	r0, #62512	; 0xf430
   1354c:	movt	r0, #2
   13550:	ldr	r0, [r0]
   13554:	bl	115c8 <memset@plt>
   13558:	movw	r0, #62416	; 0xf3d0
   1355c:	subs	r1, r6, r4
   13560:	movt	r0, #2
   13564:	sbcs	r1, r8, r5
   13568:	ldr	r0, [r0]
   1356c:	movlt	r7, r0
   13570:	movw	r0, #62512	; 0xf430
   13574:	movt	r0, #2
   13578:	mov	r2, r7
   1357c:	ldr	r1, [r0]
   13580:	movw	r0, #62440	; 0xf3e8
   13584:	movt	r0, #2
   13588:	ldr	r3, [r0]
   1358c:	mov	r0, #0
   13590:	blx	r3
   13594:	mov	r8, r0
   13598:	cmp	r0, #1
   1359c:	bge	138d4 <__assert_fail@plt+0x2204>
   135a0:	movw	r6, #61936	; 0xf1f0
   135a4:	cmp	r8, #0
   135a8:	movt	r6, #2
   135ac:	beq	13cdc <__assert_fail@plt+0x260c>
   135b0:	movw	r0, #62228	; 0xf314
   135b4:	movt	r0, #2
   135b8:	ldrb	r0, [r0, #1]
   135bc:	tst	r0, #1
   135c0:	beq	135d8 <__assert_fail@plt+0x1f08>
   135c4:	movw	r0, #61776	; 0xf150
   135c8:	movt	r0, #2
   135cc:	ldr	r0, [r0]
   135d0:	cmp	r0, #1
   135d4:	beq	13630 <__assert_fail@plt+0x1f60>
   135d8:	movw	r1, #55158	; 0xd776
   135dc:	ldr	r4, [r9]
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	movt	r1, #1
   135ec:	bl	11424 <dcgettext@plt>
   135f0:	mov	r5, r0
   135f4:	movw	r0, #62192	; 0xf2f0
   135f8:	movt	r0, #2
   135fc:	ldr	r1, [r0]
   13600:	mov	r0, #4
   13604:	bl	19400 <__assert_fail@plt+0x7d30>
   13608:	mov	r3, r0
   1360c:	mov	r0, #0
   13610:	mov	r1, r4
   13614:	mov	r2, r5
   13618:	bl	14a64 <__assert_fail@plt+0x3394>
   1361c:	movw	r0, #62228	; 0xf314
   13620:	movt	r0, #2
   13624:	ldrb	r0, [r0, #1]
   13628:	tst	r0, #1
   1362c:	beq	13d64 <__assert_fail@plt+0x2694>
   13630:	bl	155c0 <__assert_fail@plt+0x3ef0>
   13634:	movw	r0, #62416	; 0xf3d0
   13638:	movt	r0, #2
   1363c:	ldr	r0, [r0]
   13640:	sub	r7, r0, sl
   13644:	mov	r0, #0
   13648:	asr	r5, r7, #31
   1364c:	mov	r2, r7
   13650:	mov	r3, r5
   13654:	bl	14c44 <__assert_fail@plt+0x3574>
   13658:	movw	r0, #62200	; 0xf2f8
   1365c:	movt	r0, #2
   13660:	ldrb	r0, [r0]
   13664:	cmp	r0, #0
   13668:	beq	1383c <__assert_fail@plt+0x216c>
   1366c:	movw	r4, #62208	; 0xf300
   13670:	mvn	r9, #0
   13674:	movt	r4, #2
   13678:	ldrd	r0, [r4]
   1367c:	subs	r2, r9, r0
   13680:	sbcs	r2, r9, r1
   13684:	bge	137f4 <__assert_fail@plt+0x2124>
   13688:	cmn	r1, #1
   1368c:	mov	r2, #0
   13690:	mov	r3, #0
   13694:	mov	r6, #0
   13698:	movwgt	r2, #1
   1369c:	adds	r0, r0, r7
   136a0:	adc	r1, r1, r7, asr #31
   136a4:	cmn	r1, #1
   136a8:	movwgt	r3, #1
   136ac:	subs	r3, r2, r3
   136b0:	movwne	r3, #1
   136b4:	cmn	r5, #1
   136b8:	movwgt	r6, #1
   136bc:	sub	r2, r2, r6
   136c0:	movw	r6, #61936	; 0xf1f0
   136c4:	clz	r2, r2
   136c8:	movt	r6, #2
   136cc:	lsr	r2, r2, #5
   136d0:	ands	r2, r2, r3
   136d4:	movne	r1, r9
   136d8:	movne	r0, r9
   136dc:	cmn	r1, #1
   136e0:	strd	r0, [r4]
   136e4:	ble	137f4 <__assert_fail@plt+0x2124>
   136e8:	mov	r0, #1
   136ec:	mov	r2, #0
   136f0:	mov	r3, #0
   136f4:	str	r0, [sp]
   136f8:	mov	r0, #0
   136fc:	bl	11490 <lseek64@plt>
   13700:	subs	r2, r9, r0
   13704:	sbcs	r2, r9, r1
   13708:	bge	13854 <__assert_fail@plt+0x2184>
   1370c:	movw	r2, #62208	; 0xf300
   13710:	movt	r2, #2
   13714:	ldrd	r2, [r2]
   13718:	eor	r6, r3, r1
   1371c:	eor	r5, r2, r0
   13720:	orrs	r6, r5, r6
   13724:	beq	13438 <__assert_fail@plt+0x1d68>
   13728:	subs	r8, r2, r0
   1372c:	movw	r6, #61936	; 0xf1f0
   13730:	sbc	r5, r3, r1
   13734:	subs	r0, r9, r8
   13738:	movt	r6, #2
   1373c:	sbcs	r0, r9, r5
   13740:	mov	r0, #0
   13744:	movwlt	r0, #1
   13748:	subs	r1, r7, r8
   1374c:	rscs	r1, r5, r7, asr #31
   13750:	mov	r1, #0
   13754:	movwge	r1, #1
   13758:	tst	r1, r0
   1375c:	bne	13798 <__assert_fail@plt+0x20c8>
   13760:	movw	r0, #61776	; 0xf150
   13764:	movt	r0, #2
   13768:	ldr	r0, [r0]
   1376c:	cmp	r0, #1
   13770:	beq	13798 <__assert_fail@plt+0x20c8>
   13774:	movw	r1, #55407	; 0xd86f
   13778:	mov	r0, #0
   1377c:	mov	r2, #5
   13780:	movt	r1, #1
   13784:	bl	11424 <dcgettext@plt>
   13788:	mov	r2, r0
   1378c:	mov	r0, #0
   13790:	mov	r1, #0
   13794:	bl	14a64 <__assert_fail@plt+0x3394>
   13798:	mov	r0, #1
   1379c:	mov	r2, r8
   137a0:	mov	r3, r5
   137a4:	str	r0, [sp]
   137a8:	mov	r0, #0
   137ac:	bl	11490 <lseek64@plt>
   137b0:	subs	r0, r9, r0
   137b4:	sbcs	r0, r9, r1
   137b8:	ldr	r9, [sp, #44]	; 0x2c
   137bc:	blt	138c8 <__assert_fail@plt+0x21f8>
   137c0:	ldr	r0, [r9]
   137c4:	cmp	r0, #0
   137c8:	bne	13854 <__assert_fail@plt+0x2184>
   137cc:	movw	r1, #55454	; 0xd89e
   137d0:	mov	r0, #0
   137d4:	mov	r2, #5
   137d8:	movt	r1, #1
   137dc:	bl	11424 <dcgettext@plt>
   137e0:	mov	r2, r0
   137e4:	mov	r0, #0
   137e8:	mov	r1, #0
   137ec:	bl	14a64 <__assert_fail@plt+0x3394>
   137f0:	b	13854 <__assert_fail@plt+0x2184>
   137f4:	movw	r1, #55369	; 0xd849
   137f8:	mov	r0, #0
   137fc:	mov	r2, #5
   13800:	movt	r1, #1
   13804:	bl	11424 <dcgettext@plt>
   13808:	mov	r4, r0
   1380c:	movw	r0, #62192	; 0xf2f0
   13810:	movt	r0, #2
   13814:	ldr	r1, [r0]
   13818:	mov	r0, #4
   1381c:	bl	19400 <__assert_fail@plt+0x7d30>
   13820:	mov	r3, r0
   13824:	mov	r0, #0
   13828:	mov	r1, #0
   1382c:	mov	r2, r4
   13830:	bl	14a64 <__assert_fail@plt+0x3394>
   13834:	ldr	r9, [sp, #44]	; 0x2c
   13838:	b	138a0 <__assert_fail@plt+0x21d0>
   1383c:	movw	r0, #62216	; 0xf308
   13840:	movt	r0, #2
   13844:	ldr	r0, [r0]
   13848:	cmp	r0, #29
   1384c:	beq	138c8 <__assert_fail@plt+0x21f8>
   13850:	str	r0, [r9]
   13854:	ldr	r9, [sp, #44]	; 0x2c
   13858:	movw	r1, #55208	; 0xd7a8
   1385c:	mov	r0, #0
   13860:	mov	r2, #5
   13864:	movt	r1, #1
   13868:	ldr	r4, [r9]
   1386c:	bl	11424 <dcgettext@plt>
   13870:	mov	r5, r0
   13874:	movw	r0, #62192	; 0xf2f0
   13878:	mov	r1, #3
   1387c:	movt	r0, #2
   13880:	ldr	r2, [r0]
   13884:	mov	r0, #0
   13888:	bl	1967c <__assert_fail@plt+0x7fac>
   1388c:	mov	r3, r0
   13890:	mov	r0, #0
   13894:	mov	r1, r4
   13898:	mov	r2, r5
   1389c:	bl	14a64 <__assert_fail@plt+0x3394>
   138a0:	movw	r0, #62216	; 0xf308
   138a4:	mov	r1, #29
   138a8:	movt	r0, #2
   138ac:	str	r1, [r0]
   138b0:	movw	r0, #62200	; 0xf2f8
   138b4:	mov	r1, #0
   138b8:	movt	r0, #2
   138bc:	strb	r1, [r0]
   138c0:	mov	r0, #1
   138c4:	str	r0, [sp, #40]	; 0x28
   138c8:	cmp	sl, #0
   138cc:	beq	1344c <__assert_fail@plt+0x1d7c>
   138d0:	b	13460 <__assert_fail@plt+0x1d90>
   138d4:	movw	r4, #62208	; 0xf300
   138d8:	movw	r6, #61936	; 0xf1f0
   138dc:	mvn	r5, #0
   138e0:	movt	r4, #2
   138e4:	movt	r6, #2
   138e8:	ldrd	r0, [r4]
   138ec:	subs	r2, r5, r0
   138f0:	sbcs	r2, r5, r1
   138f4:	bge	1394c <__assert_fail@plt+0x227c>
   138f8:	cmn	r1, #1
   138fc:	mov	r2, #0
   13900:	mov	r3, #0
   13904:	asr	r7, r8, #31
   13908:	movwgt	r2, #1
   1390c:	adds	r0, r0, r8
   13910:	adc	r1, r1, r8, asr #31
   13914:	cmn	r1, #1
   13918:	movwgt	r3, #1
   1391c:	subs	r3, r2, r3
   13920:	movwne	r3, #1
   13924:	cmn	r7, #1
   13928:	mov	r7, #0
   1392c:	movwgt	r7, #1
   13930:	sub	r2, r2, r7
   13934:	clz	r2, r2
   13938:	lsr	r2, r2, #5
   1393c:	ands	r2, r2, r3
   13940:	movne	r1, r5
   13944:	movne	r0, r5
   13948:	strd	r0, [r4]
   1394c:	movw	r0, #62276	; 0xf344
   13950:	movt	r0, #2
   13954:	ldrb	r0, [r0]
   13958:	cmp	r0, #1
   1395c:	bne	13978 <__assert_fail@plt+0x22a8>
   13960:	asr	r3, r8, #31
   13964:	mov	r0, #0
   13968:	mov	r2, r8
   1396c:	bl	14c44 <__assert_fail@plt+0x3574>
   13970:	b	13978 <__assert_fail@plt+0x22a8>
   13974:	mov	r8, #0
   13978:	movw	r0, #62416	; 0xf3d0
   1397c:	movt	r0, #2
   13980:	ldr	r4, [r0]
   13984:	cmp	r4, r8
   13988:	ble	139c4 <__assert_fail@plt+0x22f4>
   1398c:	movw	r0, #62464	; 0xf400
   13990:	movt	r0, #2
   13994:	mov	r2, r0
   13998:	ldrd	r0, [r0]
   1399c:	adds	r0, r0, #1
   139a0:	adc	r1, r1, #0
   139a4:	strd	r0, [r2]
   139a8:	movw	r0, #62228	; 0xf314
   139ac:	movt	r0, #2
   139b0:	ldr	r1, [r0]
   139b4:	tst	r1, #1024	; 0x400
   139b8:	bne	13a70 <__assert_fail@plt+0x23a0>
   139bc:	mov	r4, r8
   139c0:	b	139e8 <__assert_fail@plt+0x2318>
   139c4:	movw	r0, #62456	; 0xf3f8
   139c8:	mov	r4, r8
   139cc:	mov	r8, #0
   139d0:	movt	r0, #2
   139d4:	mov	r2, r0
   139d8:	ldrd	r0, [r0]
   139dc:	adds	r0, r0, #1
   139e0:	adc	r1, r1, #0
   139e4:	strd	r0, [r2]
   139e8:	movw	r0, #62512	; 0xf430
   139ec:	movt	r0, #2
   139f0:	ldr	sl, [r0]
   139f4:	movw	r0, #62508	; 0xf42c
   139f8:	movt	r0, #2
   139fc:	ldr	r0, [r0]
   13a00:	cmp	sl, r0
   13a04:	bne	13aac <__assert_fail@plt+0x23dc>
   13a08:	mov	r0, sl
   13a0c:	mov	r1, r4
   13a10:	bl	1605c <__assert_fail@plt+0x498c>
   13a14:	movw	r1, #62496	; 0xf420
   13a18:	movt	r1, #2
   13a1c:	ldrd	r2, [r1]
   13a20:	adds	r2, r2, r0
   13a24:	adc	r3, r3, r0, asr #31
   13a28:	cmp	r0, r4
   13a2c:	strd	r2, [r1]
   13a30:	bne	14128 <__assert_fail@plt+0x2a58>
   13a34:	movw	r0, #62416	; 0xf3d0
   13a38:	movw	r1, #62472	; 0xf408
   13a3c:	mov	sl, r8
   13a40:	movt	r0, #2
   13a44:	movt	r1, #2
   13a48:	ldr	r0, [r0]
   13a4c:	cmp	r4, r0
   13a50:	movw	r0, #62480	; 0xf410
   13a54:	movt	r0, #2
   13a58:	moveq	r0, r1
   13a5c:	ldrd	r2, [r0]
   13a60:	adds	r2, r2, #1
   13a64:	adc	r3, r3, #0
   13a68:	strd	r2, [r0]
   13a6c:	b	13460 <__assert_fail@plt+0x1d90>
   13a70:	tst	r1, #256	; 0x100
   13a74:	bne	139e8 <__assert_fail@plt+0x2318>
   13a78:	movw	r0, #62512	; 0xf430
   13a7c:	ands	r1, r1, #24
   13a80:	sub	r2, r4, r8
   13a84:	movt	r0, #2
   13a88:	movwne	r1, #1
   13a8c:	lsl	r1, r1, #5
   13a90:	ldr	r0, [r0]
   13a94:	add	r0, r0, r8
   13a98:	bl	115c8 <memset@plt>
   13a9c:	movw	r0, #62416	; 0xf3d0
   13aa0:	movt	r0, #2
   13aa4:	ldr	r4, [r0]
   13aa8:	b	139e8 <__assert_fail@plt+0x2318>
   13aac:	cmp	r4, #0
   13ab0:	beq	13b0c <__assert_fail@plt+0x243c>
   13ab4:	movw	r0, #62504	; 0xf428
   13ab8:	movt	r0, #2
   13abc:	ldrb	r0, [r0]
   13ac0:	cmp	r0, #0
   13ac4:	beq	13b0c <__assert_fail@plt+0x243c>
   13ac8:	tst	r4, #1
   13acc:	bne	13be8 <__assert_fail@plt+0x2518>
   13ad0:	mov	r0, r4
   13ad4:	cmp	r4, #1
   13ad8:	beq	13b00 <__assert_fail@plt+0x2430>
   13adc:	ldrb	r1, [sl]
   13ae0:	ldrb	r2, [sl, #1]
   13ae4:	subs	r0, r0, #2
   13ae8:	ldrb	r1, [r6, r1]
   13aec:	strb	r1, [sl]
   13af0:	ldrb	r1, [r6, r2]
   13af4:	strb	r1, [sl, #1]
   13af8:	add	sl, sl, #2
   13afc:	bne	13adc <__assert_fail@plt+0x240c>
   13b00:	movw	r0, #62512	; 0xf430
   13b04:	movt	r0, #2
   13b08:	ldr	sl, [r0]
   13b0c:	movw	r0, #62228	; 0xf314
   13b10:	mov	r1, #0
   13b14:	movt	r0, #2
   13b18:	ldr	ip, [r0]
   13b1c:	ldr	r0, [sp, #36]	; 0x24
   13b20:	ands	r2, ip, #128	; 0x80
   13b24:	moveq	r1, r4
   13b28:	cmp	r4, #0
   13b2c:	cmpne	r2, #0
   13b30:	bne	13bc8 <__assert_fail@plt+0x24f8>
   13b34:	mov	r4, r1
   13b38:	mov	r5, r0
   13b3c:	tst	ip, #8
   13b40:	bne	13cb0 <__assert_fail@plt+0x25e0>
   13b44:	tst	ip, #16
   13b48:	bne	13c04 <__assert_fail@plt+0x2534>
   13b4c:	str	r5, [sp, #36]	; 0x24
   13b50:	movw	r0, #62516	; 0xf434
   13b54:	movw	r1, #62240	; 0xf320
   13b58:	movt	r0, #2
   13b5c:	movt	r1, #2
   13b60:	ldr	r6, [r0]
   13b64:	movw	r0, #62508	; 0xf42c
   13b68:	mov	r7, r1
   13b6c:	ldr	r1, [r1]
   13b70:	movt	r0, #2
   13b74:	ldr	r0, [r0]
   13b78:	sub	r5, r1, r6
   13b7c:	mov	r1, sl
   13b80:	cmp	r4, r5
   13b84:	movlt	r5, r4
   13b88:	add	r0, r0, r6
   13b8c:	mov	r2, r5
   13b90:	bl	113f4 <memcpy@plt>
   13b94:	movw	r1, #62516	; 0xf434
   13b98:	add	r0, r5, r6
   13b9c:	sub	r4, r4, r5
   13ba0:	movt	r1, #2
   13ba4:	str	r0, [r1]
   13ba8:	ldr	r1, [r7]
   13bac:	cmp	r0, r1
   13bb0:	blge	167dc <__assert_fail@plt+0x510c>
   13bb4:	add	sl, sl, r5
   13bb8:	cmp	r4, #0
   13bbc:	bne	13b50 <__assert_fail@plt+0x2480>
   13bc0:	mov	sl, r8
   13bc4:	b	13460 <__assert_fail@plt+0x1d90>
   13bc8:	and	r1, r4, #1
   13bcc:	cmp	r1, r0, lsr #31
   13bd0:	bne	13c14 <__assert_fail@plt+0x2544>
   13bd4:	sub	r4, r4, #1
   13bd8:	ldrb	lr, [sl, r4]
   13bdc:	cmp	r4, #2
   13be0:	bge	13c20 <__assert_fail@plt+0x2550>
   13be4:	b	13c90 <__assert_fail@plt+0x25c0>
   13be8:	ldrb	r0, [sl]
   13bec:	ldrb	r0, [r6, r0]
   13bf0:	strb	r0, [sl], #1
   13bf4:	sub	r0, r4, #1
   13bf8:	cmp	r4, #1
   13bfc:	beq	13b00 <__assert_fail@plt+0x2430>
   13c00:	b	13adc <__assert_fail@plt+0x240c>
   13c04:	mov	r0, sl
   13c08:	mov	r1, r4
   13c0c:	bl	1664c <__assert_fail@plt+0x4f7c>
   13c10:	b	13cbc <__assert_fail@plt+0x25ec>
   13c14:	mvn	lr, #0
   13c18:	cmp	r4, #2
   13c1c:	blt	13c90 <__assert_fail@plt+0x25c0>
   13c20:	sub	r2, r4, #2
   13c24:	mov	r0, #1
   13c28:	add	r1, r0, r2, lsr #1
   13c2c:	ands	r3, r1, #3
   13c30:	mov	r1, r4
   13c34:	beq	13c54 <__assert_fail@plt+0x2584>
   13c38:	mov	r1, r4
   13c3c:	add	r7, sl, r1
   13c40:	subs	r3, r3, #1
   13c44:	ldrb	r7, [r7, #-2]
   13c48:	strb	r7, [sl, r1]
   13c4c:	sub	r1, r1, #2
   13c50:	bne	13c3c <__assert_fail@plt+0x256c>
   13c54:	cmp	r2, #6
   13c58:	bcc	13c90 <__assert_fail@plt+0x25c0>
   13c5c:	sub	r2, sl, #4
   13c60:	mov	r3, r2
   13c64:	ldrb	r7, [r3, r1]!
   13c68:	sub	r1, r1, #8
   13c6c:	cmp	r1, #1
   13c70:	ldrb	r5, [r3, #-4]
   13c74:	ldrb	r6, [r3, #-2]
   13c78:	ldrb	r0, [r3, #2]
   13c7c:	strb	r0, [r3, #4]
   13c80:	strb	r6, [r3]
   13c84:	strb	r5, [r3, #-2]
   13c88:	strb	r7, [r3, #2]
   13c8c:	bgt	13c60 <__assert_fail@plt+0x2590>
   13c90:	ldr	r0, [sp, #36]	; 0x24
   13c94:	mov	r5, lr
   13c98:	cmp	r0, #0
   13c9c:	strbpl	r0, [sl, #1]
   13ca0:	addpl	r4, r4, #1
   13ca4:	addmi	sl, sl, #1
   13ca8:	tst	ip, #8
   13cac:	beq	13b44 <__assert_fail@plt+0x2474>
   13cb0:	mov	r0, sl
   13cb4:	mov	r1, r4
   13cb8:	bl	164f0 <__assert_fail@plt+0x4e20>
   13cbc:	str	r5, [sp, #36]	; 0x24
   13cc0:	mov	sl, r8
   13cc4:	b	13460 <__assert_fail@plt+0x1d90>
   13cc8:	ldr	sl, [sp, #40]	; 0x28
   13ccc:	ldr	r3, [sp, #36]	; 0x24
   13cd0:	movw	r7, #62240	; 0xf320
   13cd4:	movw	r5, #62420	; 0xf3d4
   13cd8:	b	13d74 <__assert_fail@plt+0x26a4>
   13cdc:	movw	r0, #62276	; 0xf344
   13ce0:	movw	r1, #62278	; 0xf346
   13ce4:	ldr	r3, [sp, #36]	; 0x24
   13ce8:	movw	r7, #62240	; 0xf320
   13cec:	movw	r5, #62420	; 0xf3d4
   13cf0:	movt	r0, #2
   13cf4:	movt	r1, #2
   13cf8:	movt	r7, #2
   13cfc:	movt	r5, #2
   13d00:	ldrb	r0, [r0]
   13d04:	ldrb	r2, [r1]
   13d08:	orr	r0, r2, r0
   13d0c:	strb	r0, [r1]
   13d10:	movw	r0, #62277	; 0xf345
   13d14:	movt	r0, #2
   13d18:	ldrb	r1, [r0]
   13d1c:	mov	r0, #0
   13d20:	cmp	r1, #1
   13d24:	bne	13d40 <__assert_fail@plt+0x2670>
   13d28:	movw	r0, #62228	; 0xf314
   13d2c:	mov	r1, #1
   13d30:	movt	r0, #2
   13d34:	ldrb	r0, [r0, #1]
   13d38:	and	r0, r0, #2
   13d3c:	eor	r0, r1, r0, lsr #1
   13d40:	movw	r1, #62279	; 0xf347
   13d44:	ldr	sl, [sp, #40]	; 0x28
   13d48:	movt	r1, #2
   13d4c:	ldrb	r2, [r1]
   13d50:	orr	r0, r2, r0
   13d54:	strb	r0, [r1]
   13d58:	cmp	r3, #0
   13d5c:	bpl	13d84 <__assert_fail@plt+0x26b4>
   13d60:	b	13df8 <__assert_fail@plt+0x2728>
   13d64:	ldr	r3, [sp, #36]	; 0x24
   13d68:	movw	r7, #62240	; 0xf320
   13d6c:	movw	r5, #62420	; 0xf3d4
   13d70:	mov	sl, #1
   13d74:	movt	r7, #2
   13d78:	movt	r5, #2
   13d7c:	cmp	r3, #0
   13d80:	bmi	13df8 <__assert_fail@plt+0x2728>
   13d84:	movw	r0, #62228	; 0xf314
   13d88:	strb	r3, [sp, #48]	; 0x30
   13d8c:	movt	r0, #2
   13d90:	ldr	r0, [r0]
   13d94:	tst	r0, #8
   13d98:	bne	13ddc <__assert_fail@plt+0x270c>
   13d9c:	tst	r0, #16
   13da0:	bne	13dec <__assert_fail@plt+0x271c>
   13da4:	movw	r0, #62516	; 0xf434
   13da8:	movt	r0, #2
   13dac:	mov	r2, r0
   13db0:	ldr	r0, [r0]
   13db4:	add	r1, r0, #1
   13db8:	str	r1, [r2]
   13dbc:	movw	r2, #62508	; 0xf42c
   13dc0:	movt	r2, #2
   13dc4:	ldr	r2, [r2]
   13dc8:	strb	r3, [r2, r0]
   13dcc:	ldr	r0, [r7]
   13dd0:	cmp	r1, r0
   13dd4:	blge	167dc <__assert_fail@plt+0x510c>
   13dd8:	b	13df8 <__assert_fail@plt+0x2728>
   13ddc:	add	r0, sp, #48	; 0x30
   13de0:	mov	r1, #1
   13de4:	bl	164f0 <__assert_fail@plt+0x4e20>
   13de8:	b	13df8 <__assert_fail@plt+0x2728>
   13dec:	add	r0, sp, #48	; 0x30
   13df0:	mov	r1, #1
   13df4:	bl	1664c <__assert_fail@plt+0x4f7c>
   13df8:	movw	r0, #62228	; 0xf314
   13dfc:	movw	r8, #62520	; 0xf438
   13e00:	movt	r0, #2
   13e04:	movt	r8, #2
   13e08:	ldr	r0, [r0]
   13e0c:	ldr	r4, [r8]
   13e10:	tst	r0, #8
   13e14:	beq	13e8c <__assert_fail@plt+0x27bc>
   13e18:	cmp	r4, #1
   13e1c:	blt	13e8c <__assert_fail@plt+0x27bc>
   13e20:	ldr	r1, [r5]
   13e24:	cmp	r4, r1
   13e28:	bge	13ea4 <__assert_fail@plt+0x27d4>
   13e2c:	movw	r6, #62506	; 0xf42a
   13e30:	movt	r6, #2
   13e34:	movw	r0, #62516	; 0xf434
   13e38:	movw	r3, #62508	; 0xf42c
   13e3c:	movt	r0, #2
   13e40:	movt	r3, #2
   13e44:	mov	r2, r0
   13e48:	ldr	r0, [r0]
   13e4c:	ldr	r3, [r3]
   13e50:	add	r1, r0, #1
   13e54:	str	r1, [r2]
   13e58:	ldrb	r2, [r6]
   13e5c:	cmp	r2, #0
   13e60:	mov	r2, #32
   13e64:	movwne	r2, #64	; 0x40
   13e68:	strb	r2, [r3, r0]
   13e6c:	ldr	r0, [r7]
   13e70:	cmp	r1, r0
   13e74:	blge	167dc <__assert_fail@plt+0x510c>
   13e78:	ldr	r0, [r5]
   13e7c:	add	r4, r4, #1
   13e80:	cmp	r4, r0
   13e84:	blt	13e34 <__assert_fail@plt+0x2764>
   13e88:	ldr	r4, [r8]
   13e8c:	mov	r8, sl
   13e90:	cmp	r4, #0
   13e94:	beq	13f00 <__assert_fail@plt+0x2830>
   13e98:	movw	r0, #62228	; 0xf314
   13e9c:	movt	r0, #2
   13ea0:	ldr	r0, [r0]
   13ea4:	tst	r0, #16
   13ea8:	mov	r8, sl
   13eac:	beq	13f00 <__assert_fail@plt+0x2830>
   13eb0:	movw	r0, #62516	; 0xf434
   13eb4:	mov	r3, #10
   13eb8:	movt	r0, #2
   13ebc:	mov	r2, r0
   13ec0:	ldr	r0, [r0]
   13ec4:	add	r1, r0, #1
   13ec8:	str	r1, [r2]
   13ecc:	movw	r2, #62505	; 0xf429
   13ed0:	movt	r2, #2
   13ed4:	ldrb	r2, [r2]
   13ed8:	cmp	r2, #0
   13edc:	movw	r2, #62508	; 0xf42c
   13ee0:	movt	r2, #2
   13ee4:	movwne	r3, #37	; 0x25
   13ee8:	ldr	r2, [r2]
   13eec:	strb	r3, [r2, r0]
   13ef0:	ldr	r0, [r7]
   13ef4:	cmp	r1, r0
   13ef8:	blt	13f0c <__assert_fail@plt+0x283c>
   13efc:	bl	167dc <__assert_fail@plt+0x510c>
   13f00:	movw	r0, #62516	; 0xf434
   13f04:	movt	r0, #2
   13f08:	ldr	r1, [r0]
   13f0c:	movw	sl, #62220	; 0xf30c
   13f10:	cmp	r1, #0
   13f14:	movt	sl, #2
   13f18:	beq	13f78 <__assert_fail@plt+0x28a8>
   13f1c:	movw	r0, #62508	; 0xf42c
   13f20:	movt	r0, #2
   13f24:	ldr	r0, [r0]
   13f28:	bl	1605c <__assert_fail@plt+0x498c>
   13f2c:	movw	r1, #62496	; 0xf420
   13f30:	movt	r1, #2
   13f34:	ldrd	r2, [r1]
   13f38:	adds	r2, r2, r0
   13f3c:	adc	r3, r3, r0, asr #31
   13f40:	cmp	r0, #0
   13f44:	strd	r2, [r1]
   13f48:	beq	13f64 <__assert_fail@plt+0x2894>
   13f4c:	movw	r1, #62480	; 0xf410
   13f50:	movt	r1, #2
   13f54:	ldrd	r2, [r1]
   13f58:	adds	r2, r2, #1
   13f5c:	adc	r3, r3, #0
   13f60:	strd	r2, [r1]
   13f64:	movw	r1, #62516	; 0xf434
   13f68:	movt	r1, #2
   13f6c:	ldr	r1, [r1]
   13f70:	cmp	r0, r1
   13f74:	bne	13fbc <__assert_fail@plt+0x28ec>
   13f78:	movw	r0, #62524	; 0xf43c
   13f7c:	movt	r0, #2
   13f80:	ldrb	r0, [r0]
   13f84:	cmp	r0, #1
   13f88:	bne	141a8 <__assert_fail@plt+0x2ad8>
   13f8c:	add	r5, sp, #48	; 0x30
   13f90:	bl	15414 <__assert_fail@plt+0x3d44>
   13f94:	mov	r0, #3
   13f98:	mov	r1, #1
   13f9c:	mov	r2, r5
   13fa0:	bl	1146c <__fxstat64@plt>
   13fa4:	cmn	r0, #1
   13fa8:	bgt	13fcc <__assert_fail@plt+0x28fc>
   13fac:	ldr	r4, [r9]
   13fb0:	cmp	r4, #4
   13fb4:	beq	13f90 <__assert_fail@plt+0x28c0>
   13fb8:	b	13fd8 <__assert_fail@plt+0x2908>
   13fbc:	ldr	r4, [r9]
   13fc0:	movw	r1, #55175	; 0xd787
   13fc4:	movt	r1, #1
   13fc8:	b	13fe0 <__assert_fail@plt+0x2910>
   13fcc:	cmp	r0, #0
   13fd0:	beq	14048 <__assert_fail@plt+0x2978>
   13fd4:	ldr	r4, [r9]
   13fd8:	movw	r1, #53832	; 0xd248
   13fdc:	movt	r1, #1
   13fe0:	mov	r0, #0
   13fe4:	mov	r2, #5
   13fe8:	bl	11424 <dcgettext@plt>
   13fec:	ldr	r1, [sl]
   13ff0:	mov	r5, r0
   13ff4:	mov	r0, #4
   13ff8:	bl	19400 <__assert_fail@plt+0x7d30>
   13ffc:	mov	r3, r0
   14000:	mov	r0, #0
   14004:	mov	r1, r4
   14008:	mov	r2, r5
   1400c:	bl	14a64 <__assert_fail@plt+0x3394>
   14010:	mov	r8, #1
   14014:	b	1420c <__assert_fail@plt+0x2b3c>
   14018:	mov	r4, sl
   1401c:	ldr	sl, [sp, #48]	; 0x30
   14020:	cmp	sl, #0
   14024:	beq	11f8c <__assert_fail@plt+0x8bc>
   14028:	movw	r0, #62416	; 0xf3d0
   1402c:	mov	r5, sl
   14030:	movt	r0, #2
   14034:	str	sl, [r0]
   14038:	movw	r0, #62240	; 0xf320
   1403c:	movt	r0, #2
   14040:	str	sl, [r0]
   14044:	b	11fe0 <__assert_fail@plt+0x910>
   14048:	ldr	r0, [sp, #64]	; 0x40
   1404c:	and	r0, r0, #61440	; 0xf000
   14050:	cmp	r0, #32768	; 0x8000
   14054:	bne	141a8 <__assert_fail@plt+0x2ad8>
   14058:	mov	r0, #1
   1405c:	mov	r2, #0
   14060:	mov	r3, #0
   14064:	str	r0, [sp]
   14068:	mov	r0, #1
   1406c:	bl	11490 <lseek64@plt>
   14070:	mov	r7, r1
   14074:	mvn	r1, #0
   14078:	mov	r6, r0
   1407c:	subs	r0, r1, r0
   14080:	sbcs	r0, r1, r7
   14084:	bge	141a8 <__assert_fail@plt+0x2ad8>
   14088:	ldr	r0, [sp, #96]	; 0x60
   1408c:	ldr	r1, [sp, #100]	; 0x64
   14090:	subs	r0, r0, r6
   14094:	sbcs	r0, r1, r7
   14098:	bge	141a8 <__assert_fail@plt+0x2ad8>
   1409c:	bl	15414 <__assert_fail@plt+0x3d44>
   140a0:	mov	r0, #1
   140a4:	mov	r2, r6
   140a8:	mov	r3, r7
   140ac:	bl	11418 <ftruncate64@plt>
   140b0:	cmn	r0, #1
   140b4:	bgt	14158 <__assert_fail@plt+0x2a88>
   140b8:	ldr	r5, [r9]
   140bc:	cmp	r5, #4
   140c0:	beq	1409c <__assert_fail@plt+0x29cc>
   140c4:	b	14164 <__assert_fail@plt+0x2a94>
   140c8:	ldr	r0, [sp, #64]	; 0x40
   140cc:	and	r0, r0, #61440	; 0xf000
   140d0:	cmp	r0, #32768	; 0x8000
   140d4:	cmpne	r0, #16384	; 0x4000
   140d8:	bne	13060 <__assert_fail@plt+0x1990>
   140dc:	movw	r1, #53848	; 0xd258
   140e0:	mov	r0, #0
   140e4:	mov	r2, #5
   140e8:	movt	r1, #1
   140ec:	bl	11424 <dcgettext@plt>
   140f0:	mov	r4, r0
   140f4:	movw	r0, #62220	; 0xf30c
   140f8:	movt	r0, #2
   140fc:	ldr	r1, [r0]
   14100:	mov	r0, #4
   14104:	bl	19400 <__assert_fail@plt+0x7d30>
   14108:	str	r0, [sp, #8]
   1410c:	mov	r0, #0
   14110:	mov	r1, r6
   14114:	mov	r2, r4
   14118:	str	sl, [sp]
   1411c:	str	r5, [sp, #4]
   14120:	bl	14a64 <__assert_fail@plt+0x3394>
   14124:	b	13060 <__assert_fail@plt+0x1990>
   14128:	movw	r1, #55175	; 0xd787
   1412c:	ldr	r4, [r9]
   14130:	mov	r0, #0
   14134:	mov	r2, #5
   14138:	movt	r1, #1
   1413c:	bl	11424 <dcgettext@plt>
   14140:	movw	r8, #62220	; 0xf30c
   14144:	mov	r5, r0
   14148:	movt	r8, #2
   1414c:	ldr	r1, [r8]
   14150:	mov	sl, r8
   14154:	b	13ff4 <__assert_fail@plt+0x2924>
   14158:	cmp	r0, #0
   1415c:	beq	141a8 <__assert_fail@plt+0x2ad8>
   14160:	ldr	r5, [r9]
   14164:	movw	r1, #53848	; 0xd258
   14168:	mov	r0, #0
   1416c:	mov	r2, #5
   14170:	movt	r1, #1
   14174:	bl	11424 <dcgettext@plt>
   14178:	ldr	r1, [sl]
   1417c:	mov	r4, r0
   14180:	mov	r0, #4
   14184:	bl	19400 <__assert_fail@plt+0x7d30>
   14188:	stm	sp, {r6, r7}
   1418c:	str	r0, [sp, #8]
   14190:	mov	r0, #0
   14194:	mov	r1, r5
   14198:	mov	r2, r4
   1419c:	bl	14a64 <__assert_fail@plt+0x3394>
   141a0:	mov	r8, #1
   141a4:	b	1420c <__assert_fail@plt+0x2b3c>
   141a8:	movw	r0, #62228	; 0xf314
   141ac:	movt	r0, #2
   141b0:	ldrb	r0, [r0, #1]
   141b4:	tst	r0, #192	; 0xc0
   141b8:	beq	1420c <__assert_fail@plt+0x2b3c>
   141bc:	movw	r0, #61776	; 0xf150
   141c0:	movt	r0, #2
   141c4:	ldr	r0, [r0]
   141c8:	cmp	r0, #4
   141cc:	bne	1420c <__assert_fail@plt+0x2b3c>
   141d0:	movw	r0, #61784	; 0xf158
   141d4:	mvn	r3, #0
   141d8:	movt	r0, #2
   141dc:	ldrd	r0, [r0]
   141e0:	subs	r2, r3, r0
   141e4:	sbcs	r2, r3, r1
   141e8:	bge	1420c <__assert_fail@plt+0x2b3c>
   141ec:	movw	r2, #62496	; 0xf420
   141f0:	movt	r2, #2
   141f4:	ldrd	r2, [r2]
   141f8:	subs	r0, r0, r2
   141fc:	sbcs	r0, r1, r3
   14200:	movlt	r0, #0
   14204:	movlt	r1, #0
   14208:	bllt	15750 <__assert_fail@plt+0x4080>
   1420c:	bl	14b00 <__assert_fail@plt+0x3430>
   14210:	cmp	r0, #0
   14214:	movne	r8, r0
   14218:	movw	r0, #62276	; 0xf344
   1421c:	movt	r0, #2
   14220:	ldrb	r1, [r0]
   14224:	movw	r0, #61768	; 0xf148
   14228:	movt	r0, #2
   1422c:	ldm	r0, {r0, r3}
   14230:	orrs	r0, r0, r3
   14234:	bne	14344 <__assert_fail@plt+0x2c74>
   14238:	movw	r0, #62272	; 0xf340
   1423c:	movt	r0, #2
   14240:	ldr	r0, [r0]
   14244:	cmp	r0, #0
   14248:	bne	14344 <__assert_fail@plt+0x2c74>
   1424c:	movw	r7, #62208	; 0xf300
   14250:	cmp	r1, #0
   14254:	movt	r7, #2
   14258:	beq	145b8 <__assert_fail@plt+0x2ee8>
   1425c:	movw	r2, #62278	; 0xf346
   14260:	movw	r0, #62536	; 0xf448
   14264:	movt	r2, #2
   14268:	movt	r0, #2
   1426c:	ldrb	r2, [r2]
   14270:	ldrd	r0, [r0]
   14274:	cmp	r2, #0
   14278:	orrseq	r3, r0, r1
   1427c:	beq	145b8 <__assert_fail@plt+0x2ee8>
   14280:	movw	r3, #62200	; 0xf2f8
   14284:	movt	r3, #2
   14288:	ldrb	r3, [r3]
   1428c:	cmp	r3, #0
   14290:	beq	14564 <__assert_fail@plt+0x2e94>
   14294:	ldr	r6, [r7]
   14298:	ldr	r3, [r7, #4]
   1429c:	mvn	r5, #0
   142a0:	subs	r7, r5, r6
   142a4:	sbcs	r7, r5, r3
   142a8:	bge	1456c <__assert_fail@plt+0x2e9c>
   142ac:	orrs	r7, r0, r1
   142b0:	mov	r5, r0
   142b4:	mov	r4, r1
   142b8:	movwne	r7, #1
   142bc:	cmp	r2, #0
   142c0:	movwne	r2, #1
   142c4:	ands	ip, r2, r7
   142c8:	movwne	r5, #0
   142cc:	movwne	r4, #0
   142d0:	subs	r2, r6, r5
   142d4:	sbc	r3, r3, r4
   142d8:	subs	r6, r2, r0
   142dc:	sbc	r7, r3, r1
   142e0:	cmp	ip, #0
   142e4:	moveq	r6, r2
   142e8:	moveq	r7, r3
   142ec:	orrs	r0, r5, r4
   142f0:	bne	14318 <__assert_fail@plt+0x2c48>
   142f4:	movw	r0, #61920	; 0xf1e0
   142f8:	mov	r1, r7
   142fc:	movt	r0, #2
   14300:	ldr	r2, [r0]
   14304:	mov	r0, r6
   14308:	asr	r3, r2, #31
   1430c:	bl	1c194 <__assert_fail@plt+0xaac4>
   14310:	subs	r6, r6, r2
   14314:	sbc	r7, r7, r3
   14318:	mov	r0, #4
   1431c:	mov	r2, r6
   14320:	mov	r3, r7
   14324:	str	r5, [sp]
   14328:	str	r4, [sp, #4]
   1432c:	str	r0, [sp, #8]
   14330:	mov	r0, #0
   14334:	bl	11394 <posix_fadvise64@plt>
   14338:	cmn	r0, #1
   1433c:	bne	145b8 <__assert_fail@plt+0x2ee8>
   14340:	b	1456c <__assert_fail@plt+0x2e9c>
   14344:	movw	r0, #62278	; 0xf346
   14348:	movw	r7, #62208	; 0xf300
   1434c:	mvn	sl, #0
   14350:	movt	r0, #2
   14354:	movt	r7, #2
   14358:	ldrb	r0, [r0]
   1435c:	cmp	r0, #0
   14360:	bne	1436c <__assert_fail@plt+0x2c9c>
   14364:	eors	r1, r1, #1
   14368:	bne	14448 <__assert_fail@plt+0x2d78>
   1436c:	movw	r1, #62536	; 0xf448
   14370:	cmp	r0, #0
   14374:	movt	r1, #2
   14378:	ldr	r2, [r1]
   1437c:	ldr	r1, [r1, #4]
   14380:	orrseq	r3, r2, r1
   14384:	beq	14448 <__assert_fail@plt+0x2d78>
   14388:	movw	r3, #62200	; 0xf2f8
   1438c:	movt	r3, #2
   14390:	ldrb	r3, [r3]
   14394:	cmp	r3, #0
   14398:	beq	14440 <__assert_fail@plt+0x2d70>
   1439c:	ldr	r4, [r7]
   143a0:	ldr	r3, [r7, #4]
   143a4:	subs	r7, sl, r4
   143a8:	sbcs	r7, sl, r3
   143ac:	bge	14448 <__assert_fail@plt+0x2d78>
   143b0:	orrs	r7, r2, r1
   143b4:	mov	r5, r1
   143b8:	movwne	r7, #1
   143bc:	cmp	r0, #0
   143c0:	movwne	r0, #1
   143c4:	ands	ip, r0, r7
   143c8:	mov	r7, r2
   143cc:	movwne	r7, #0
   143d0:	movwne	r5, #0
   143d4:	subs	r0, r4, r7
   143d8:	sbc	r3, r3, r5
   143dc:	subs	r4, r0, r2
   143e0:	sbc	r6, r3, r1
   143e4:	cmp	ip, #0
   143e8:	moveq	r4, r0
   143ec:	moveq	r6, r3
   143f0:	orrs	r0, r7, r5
   143f4:	bne	1441c <__assert_fail@plt+0x2d4c>
   143f8:	movw	r0, #61920	; 0xf1e0
   143fc:	mov	r1, r6
   14400:	movt	r0, #2
   14404:	ldr	r2, [r0]
   14408:	mov	r0, r4
   1440c:	asr	r3, r2, #31
   14410:	bl	1c194 <__assert_fail@plt+0xaac4>
   14414:	subs	r4, r4, r2
   14418:	sbc	r6, r6, r3
   1441c:	mov	r0, #4
   14420:	mov	r2, r4
   14424:	mov	r3, r6
   14428:	str	r7, [sp]
   1442c:	str	r5, [sp, #4]
   14430:	str	r0, [sp, #8]
   14434:	mov	r0, #0
   14438:	bl	11394 <posix_fadvise64@plt>
   1443c:	b	14448 <__assert_fail@plt+0x2d78>
   14440:	mov	r0, #29
   14444:	str	r0, [r9]
   14448:	movw	r0, #62279	; 0xf347
   1444c:	movt	r0, #2
   14450:	ldrb	r4, [r0]
   14454:	cmp	r4, #0
   14458:	bne	14470 <__assert_fail@plt+0x2da0>
   1445c:	movw	r0, #62277	; 0xf345
   14460:	movt	r0, #2
   14464:	ldrb	r0, [r0]
   14468:	cmp	r0, #0
   1446c:	beq	1471c <__assert_fail@plt+0x304c>
   14470:	movw	r0, #62544	; 0xf450
   14474:	cmp	r4, #0
   14478:	movt	r0, #2
   1447c:	ldr	r6, [r0]
   14480:	ldr	r5, [r0, #4]
   14484:	orrseq	r0, r6, r5
   14488:	beq	1471c <__assert_fail@plt+0x304c>
   1448c:	movw	r7, #61792	; 0xf160
   14490:	movt	r7, #2
   14494:	ldrd	r0, [r7]
   14498:	eor	r2, r1, sl
   1449c:	eor	r3, r0, sl
   144a0:	orrs	r2, r3, r2
   144a4:	beq	1471c <__assert_fail@plt+0x304c>
   144a8:	cmn	r1, #1
   144ac:	bgt	144d8 <__assert_fail@plt+0x2e08>
   144b0:	mov	r0, #1
   144b4:	mov	r2, #0
   144b8:	mov	r3, #0
   144bc:	str	r0, [sp]
   144c0:	mov	r0, #1
   144c4:	bl	11490 <lseek64@plt>
   144c8:	subs	r2, sl, r0
   144cc:	strd	r0, [r7]
   144d0:	sbcs	r2, sl, r1
   144d4:	bge	1471c <__assert_fail@plt+0x304c>
   144d8:	orrs	r2, r6, r5
   144dc:	mov	r7, r5
   144e0:	movwne	r2, #1
   144e4:	cmp	r4, #0
   144e8:	movwne	r4, #1
   144ec:	ands	r2, r4, r2
   144f0:	mov	r4, r6
   144f4:	movwne	r4, #0
   144f8:	movwne	r7, #0
   144fc:	subs	r0, r0, r4
   14500:	sbc	r1, r1, r7
   14504:	subs	r9, r0, r6
   14508:	sbc	r6, r1, r5
   1450c:	cmp	r2, #0
   14510:	moveq	r9, r0
   14514:	moveq	r6, r1
   14518:	orrs	r0, r4, r7
   1451c:	bne	14544 <__assert_fail@plt+0x2e74>
   14520:	movw	r0, #61920	; 0xf1e0
   14524:	mov	r1, r6
   14528:	movt	r0, #2
   1452c:	ldr	r2, [r0]
   14530:	mov	r0, r9
   14534:	asr	r3, r2, #31
   14538:	bl	1c194 <__assert_fail@plt+0xaac4>
   1453c:	subs	r9, r9, r2
   14540:	sbc	r6, r6, r3
   14544:	mov	r0, #4
   14548:	stm	sp, {r4, r7}
   1454c:	mov	r2, r9
   14550:	mov	r3, r6
   14554:	str	r0, [sp, #8]
   14558:	mov	r0, #1
   1455c:	bl	11394 <posix_fadvise64@plt>
   14560:	b	1471c <__assert_fail@plt+0x304c>
   14564:	mov	r0, #29
   14568:	str	r0, [r9]
   1456c:	movw	r1, #53899	; 0xd28b
   14570:	ldr	r4, [r9]
   14574:	mov	r0, #0
   14578:	mov	r2, #5
   1457c:	movt	r1, #1
   14580:	bl	11424 <dcgettext@plt>
   14584:	mov	r5, r0
   14588:	movw	r0, #62192	; 0xf2f0
   1458c:	mov	r1, #3
   14590:	movt	r0, #2
   14594:	ldr	r2, [r0]
   14598:	mov	r0, #0
   1459c:	bl	1967c <__assert_fail@plt+0x7fac>
   145a0:	mov	r3, r0
   145a4:	mov	r0, #0
   145a8:	mov	r1, r4
   145ac:	mov	r2, r5
   145b0:	bl	14a64 <__assert_fail@plt+0x3394>
   145b4:	mov	r8, #1
   145b8:	movw	r0, #62277	; 0xf345
   145bc:	movt	r0, #2
   145c0:	ldrb	r0, [r0]
   145c4:	cmp	r0, #1
   145c8:	bne	1471c <__assert_fail@plt+0x304c>
   145cc:	movw	r0, #62544	; 0xf450
   145d0:	movt	r0, #2
   145d4:	ldrd	r4, [r0]
   145d8:	movw	r0, #62279	; 0xf347
   145dc:	movt	r0, #2
   145e0:	ldrb	r6, [r0]
   145e4:	cmp	r6, #0
   145e8:	orrseq	r0, r4, r5
   145ec:	beq	1471c <__assert_fail@plt+0x304c>
   145f0:	movw	r7, #61792	; 0xf160
   145f4:	mvn	r3, #0
   145f8:	movt	r7, #2
   145fc:	ldrd	r0, [r7]
   14600:	eor	r2, r1, r3
   14604:	eor	r3, r0, r3
   14608:	orrs	r2, r3, r2
   1460c:	beq	146d8 <__assert_fail@plt+0x3008>
   14610:	cmn	r1, #1
   14614:	bgt	14644 <__assert_fail@plt+0x2f74>
   14618:	mov	r0, #1
   1461c:	mov	r2, #0
   14620:	mov	r3, #0
   14624:	str	r0, [sp]
   14628:	mov	r0, #1
   1462c:	bl	11490 <lseek64@plt>
   14630:	mvn	r3, #0
   14634:	strd	r0, [r7]
   14638:	subs	r2, r3, r0
   1463c:	sbcs	r2, r3, r1
   14640:	bge	146d8 <__assert_fail@plt+0x3008>
   14644:	orrs	r2, r4, r5
   14648:	mov	r7, r4
   1464c:	movwne	r2, #1
   14650:	cmp	r6, #0
   14654:	movwne	r6, #1
   14658:	ands	r2, r6, r2
   1465c:	mov	r6, r5
   14660:	movwne	r7, #0
   14664:	movwne	r6, #0
   14668:	subs	r0, r0, r7
   1466c:	sbc	r1, r1, r6
   14670:	subs	r4, r0, r4
   14674:	sbc	r5, r1, r5
   14678:	cmp	r2, #0
   1467c:	moveq	r4, r0
   14680:	moveq	r5, r1
   14684:	orrs	r0, r7, r6
   14688:	bne	146b0 <__assert_fail@plt+0x2fe0>
   1468c:	movw	r0, #61920	; 0xf1e0
   14690:	mov	r1, r5
   14694:	movt	r0, #2
   14698:	ldr	r2, [r0]
   1469c:	mov	r0, r4
   146a0:	asr	r3, r2, #31
   146a4:	bl	1c194 <__assert_fail@plt+0xaac4>
   146a8:	subs	r4, r4, r2
   146ac:	sbc	r5, r5, r3
   146b0:	mov	r0, #4
   146b4:	mov	r2, r4
   146b8:	mov	r3, r5
   146bc:	str	r7, [sp]
   146c0:	str	r6, [sp, #4]
   146c4:	str	r0, [sp, #8]
   146c8:	mov	r0, #1
   146cc:	bl	11394 <posix_fadvise64@plt>
   146d0:	cmn	r0, #1
   146d4:	bne	1471c <__assert_fail@plt+0x304c>
   146d8:	movw	r1, #53899	; 0xd28b
   146dc:	ldr	r4, [r9]
   146e0:	mov	r0, #0
   146e4:	mov	r2, #5
   146e8:	movt	r1, #1
   146ec:	bl	11424 <dcgettext@plt>
   146f0:	ldr	r2, [sl]
   146f4:	mov	r5, r0
   146f8:	mov	r0, #0
   146fc:	mov	r1, #3
   14700:	bl	1967c <__assert_fail@plt+0x7fac>
   14704:	mov	r3, r0
   14708:	mov	r0, #0
   1470c:	mov	r1, r4
   14710:	mov	r2, r5
   14714:	bl	14a64 <__assert_fail@plt+0x3394>
   14718:	mov	r8, #1
   1471c:	bl	15414 <__assert_fail@plt+0x3d44>
   14720:	bl	154b4 <__assert_fail@plt+0x3de4>
   14724:	bl	155c0 <__assert_fail@plt+0x3ef0>
   14728:	mov	r0, r8
   1472c:	sub	sp, fp, #28
   14730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14734:	movw	r1, #55144	; 0xd768
   14738:	ldr	r4, [r9]
   1473c:	mov	r0, #0
   14740:	mov	r2, #5
   14744:	movt	r1, #1
   14748:	bl	11424 <dcgettext@plt>
   1474c:	mov	r5, r0
   14750:	movw	r0, #62220	; 0xf30c
   14754:	movt	r0, #2
   14758:	ldr	r1, [r0]
   1475c:	mov	r0, #4
   14760:	bl	19400 <__assert_fail@plt+0x7d30>
   14764:	mov	r3, r0
   14768:	mov	r0, #0
   1476c:	mov	r1, r4
   14770:	mov	r2, r5
   14774:	bl	14a64 <__assert_fail@plt+0x3394>
   14778:	bl	16340 <__assert_fail@plt+0x4c70>
   1477c:	movw	r1, #54572	; 0xd52c
   14780:	movt	r1, #1
   14784:	b	148c0 <__assert_fail@plt+0x31f0>
   14788:	mov	r0, #4
   1478c:	str	r0, [fp, #-32]	; 0xffffffe0
   14790:	b	147b0 <__assert_fail@plt+0x30e0>
   14794:	mov	r0, #1
   14798:	str	r0, [fp, #-32]	; 0xffffffe0
   1479c:	b	147a8 <__assert_fail@plt+0x30d8>
   147a0:	cmp	r1, #1
   147a4:	bne	147b0 <__assert_fail@plt+0x30e0>
   147a8:	mov	r4, #75	; 0x4b
   147ac:	b	147b4 <__assert_fail@plt+0x30e4>
   147b0:	mov	r4, #0
   147b4:	movw	r1, #54382	; 0xd46e
   147b8:	mov	r0, #0
   147bc:	mov	r2, #5
   147c0:	movt	r1, #1
   147c4:	bl	11424 <dcgettext@plt>
   147c8:	mov	r5, r0
   147cc:	mov	r0, r9
   147d0:	bl	19928 <__assert_fail@plt+0x8258>
   147d4:	movw	r2, #54375	; 0xd467
   147d8:	str	r0, [sp]
   147dc:	mov	r0, #1
   147e0:	mov	r1, r4
   147e4:	mov	r3, r5
   147e8:	movt	r2, #1
   147ec:	bl	14a64 <__assert_fail@plt+0x3394>
   147f0:	movw	r1, #54334	; 0xd43e
   147f4:	mov	r0, #0
   147f8:	mov	r2, #5
   147fc:	movt	r1, #1
   14800:	bl	11424 <dcgettext@plt>
   14804:	mov	r4, r0
   14808:	movw	r0, #54733	; 0xd5cd
   1480c:	movt	r0, #1
   14810:	b	14874 <__assert_fail@plt+0x31a4>
   14814:	movw	r1, #54315	; 0xd42b
   14818:	mov	r0, #0
   1481c:	mov	r2, #5
   14820:	movt	r1, #1
   14824:	bl	11424 <dcgettext@plt>
   14828:	mov	r4, r0
   1482c:	movw	r0, #54397	; 0xd47d
   14830:	movt	r0, #1
   14834:	b	14874 <__assert_fail@plt+0x31a4>
   14838:	movw	r1, #54334	; 0xd43e
   1483c:	mov	r0, #0
   14840:	mov	r2, #5
   14844:	movt	r1, #1
   14848:	bl	11424 <dcgettext@plt>
   1484c:	mov	r4, r0
   14850:	movw	r0, #62224	; 0xf310
   14854:	movw	r2, #54420	; 0xd494
   14858:	movt	r0, #2
   1485c:	movt	r2, #1
   14860:	ldr	r1, [r0]
   14864:	movw	r0, #54408	; 0xd488
   14868:	movt	r0, #1
   1486c:	tst	r1, #4
   14870:	moveq	r0, r2
   14874:	bl	19928 <__assert_fail@plt+0x8258>
   14878:	movw	r2, #54375	; 0xd467
   1487c:	str	r0, [sp]
   14880:	mov	r0, #0
   14884:	mov	r1, #0
   14888:	mov	r3, r4
   1488c:	movt	r2, #1
   14890:	b	126f8 <__assert_fail@plt+0x1028>
   14894:	movw	r1, #54431	; 0xd49f
   14898:	movt	r1, #1
   1489c:	b	148c0 <__assert_fail@plt+0x31f0>
   148a0:	movw	r1, #54476	; 0xd4cc
   148a4:	movt	r1, #1
   148a8:	b	148c0 <__assert_fail@plt+0x31f0>
   148ac:	movw	r1, #54509	; 0xd4ed
   148b0:	movt	r1, #1
   148b4:	b	148c0 <__assert_fail@plt+0x31f0>
   148b8:	movw	r1, #54540	; 0xd50c
   148bc:	movt	r1, #1
   148c0:	mov	r0, #0
   148c4:	mov	r2, #5
   148c8:	bl	11424 <dcgettext@plt>
   148cc:	mov	r2, r0
   148d0:	mov	r0, #1
   148d4:	mov	r1, #0
   148d8:	bl	14a64 <__assert_fail@plt+0x3394>
   148dc:	movw	r1, #53755	; 0xd1fb
   148e0:	mov	r0, #0
   148e4:	mov	r2, #5
   148e8:	movt	r1, #1
   148ec:	bl	11424 <dcgettext@plt>
   148f0:	mov	r2, r0
   148f4:	movw	r0, #62232	; 0xf318
   148f8:	movw	r3, #62240	; 0xf320
   148fc:	movt	r0, #2
   14900:	movt	r3, #2
   14904:	ldrd	r0, [r0]
   14908:	ldr	r3, [r3]
   1490c:	stm	sp, {r0, r1, r3}
   14910:	b	148d0 <__assert_fail@plt+0x3200>
   14914:	push	{fp, lr}
   14918:	mov	fp, sp
   1491c:	movw	r0, #61924	; 0xf1e4
   14920:	movt	r0, #2
   14924:	ldrb	r0, [r0]
   14928:	cmp	r0, #0
   1492c:	beq	14950 <__assert_fail@plt+0x3280>
   14930:	movw	r0, #61904	; 0xf1d0
   14934:	movt	r0, #2
   14938:	ldr	r0, [r0]
   1493c:	bl	168c0 <__assert_fail@plt+0x51f0>
   14940:	cmp	r0, #0
   14944:	popeq	{fp, pc}
   14948:	mov	r0, #1
   1494c:	bl	113e8 <_exit@plt>
   14950:	pop	{fp, lr}
   14954:	b	16964 <__assert_fail@plt+0x5294>
   14958:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1495c:	add	fp, sp, #24
   14960:	sub	sp, sp, #104	; 0x68
   14964:	bic	r4, r1, #33024	; 0x8100
   14968:	cmp	r4, #0
   1496c:	beq	14a4c <__assert_fail@plt+0x337c>
   14970:	mov	r1, #3
   14974:	mov	r8, r2
   14978:	mov	r5, r0
   1497c:	bl	16ae8 <__assert_fail@plt+0x5418>
   14980:	cmp	r0, #0
   14984:	bmi	149d0 <__assert_fail@plt+0x3300>
   14988:	orr	r6, r0, r4
   1498c:	mov	r7, r0
   14990:	cmp	r0, r6
   14994:	beq	14a4c <__assert_fail@plt+0x337c>
   14998:	tst	r6, #16384	; 0x4000
   1499c:	beq	14a2c <__assert_fail@plt+0x335c>
   149a0:	mov	r4, sp
   149a4:	bl	15414 <__assert_fail@plt+0x3d44>
   149a8:	mov	r0, #3
   149ac:	mov	r1, r5
   149b0:	mov	r2, r4
   149b4:	bl	1146c <__fxstat64@plt>
   149b8:	cmn	r0, #1
   149bc:	bgt	14a10 <__assert_fail@plt+0x3340>
   149c0:	bl	11598 <__errno_location@plt>
   149c4:	ldr	r0, [r0]
   149c8:	cmp	r0, #4
   149cc:	beq	149a4 <__assert_fail@plt+0x32d4>
   149d0:	bl	11598 <__errno_location@plt>
   149d4:	movw	r1, #55087	; 0xd72f
   149d8:	ldr	r4, [r0]
   149dc:	mov	r0, #0
   149e0:	mov	r2, #5
   149e4:	movt	r1, #1
   149e8:	bl	11424 <dcgettext@plt>
   149ec:	mov	r5, r0
   149f0:	mov	r0, #4
   149f4:	mov	r1, r8
   149f8:	bl	19400 <__assert_fail@plt+0x7d30>
   149fc:	mov	r3, r0
   14a00:	mov	r0, #1
   14a04:	mov	r1, r4
   14a08:	mov	r2, r5
   14a0c:	bl	14a64 <__assert_fail@plt+0x3394>
   14a10:	cmp	r0, #0
   14a14:	bne	149d0 <__assert_fail@plt+0x3300>
   14a18:	ldr	r0, [sp, #16]
   14a1c:	and	r0, r0, #61440	; 0xf000
   14a20:	cmp	r0, #16384	; 0x4000
   14a24:	bne	14a54 <__assert_fail@plt+0x3384>
   14a28:	bic	r6, r6, #16384	; 0x4000
   14a2c:	cmp	r7, r6
   14a30:	beq	14a4c <__assert_fail@plt+0x337c>
   14a34:	mov	r0, r5
   14a38:	mov	r1, #4
   14a3c:	mov	r2, r6
   14a40:	bl	16ae8 <__assert_fail@plt+0x5418>
   14a44:	cmn	r0, #1
   14a48:	beq	149d0 <__assert_fail@plt+0x3300>
   14a4c:	sub	sp, fp, #24
   14a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a54:	bl	11598 <__errno_location@plt>
   14a58:	mov	r1, #20
   14a5c:	str	r1, [r0]
   14a60:	b	149d0 <__assert_fail@plt+0x3300>
   14a64:	sub	sp, sp, #4
   14a68:	push	{r4, r5, r6, r7, fp, lr}
   14a6c:	add	fp, sp, #16
   14a70:	sub	sp, sp, #4
   14a74:	movw	r7, #62448	; 0xf3f0
   14a78:	mov	r6, r0
   14a7c:	mov	r4, r2
   14a80:	mov	r5, r1
   14a84:	str	r3, [fp, #8]
   14a88:	movt	r7, #2
   14a8c:	ldr	r0, [r7]
   14a90:	cmp	r0, #1
   14a94:	blt	14acc <__assert_fail@plt+0x33fc>
   14a98:	movw	r0, #61904	; 0xf1d0
   14a9c:	movt	r0, #2
   14aa0:	ldr	r0, [r0]
   14aa4:	ldr	r1, [r0, #20]
   14aa8:	ldr	r2, [r0, #24]
   14aac:	cmp	r1, r2
   14ab0:	bcs	14af4 <__assert_fail@plt+0x3424>
   14ab4:	add	r2, r1, #1
   14ab8:	str	r2, [r0, #20]
   14abc:	mov	r0, #10
   14ac0:	strb	r0, [r1]
   14ac4:	mov	r0, #0
   14ac8:	str	r0, [r7]
   14acc:	add	r3, fp, #8
   14ad0:	mov	r0, r6
   14ad4:	mov	r1, r5
   14ad8:	mov	r2, r4
   14adc:	str	r3, [sp]
   14ae0:	bl	19a74 <__assert_fail@plt+0x83a4>
   14ae4:	sub	sp, fp, #16
   14ae8:	pop	{r4, r5, r6, r7, fp, lr}
   14aec:	add	sp, sp, #4
   14af0:	bx	lr
   14af4:	mov	r1, #10
   14af8:	bl	11628 <__overflow@plt>
   14afc:	b	14ac4 <__assert_fail@plt+0x33f4>
   14b00:	push	{r4, r5, r6, sl, fp, lr}
   14b04:	add	fp, sp, #16
   14b08:	movw	r0, #62228	; 0xf314
   14b0c:	movt	r0, #2
   14b10:	ldr	r6, [r0]
   14b14:	bic	r1, r6, #49152	; 0xc000
   14b18:	tst	r6, #16384	; 0x4000
   14b1c:	str	r1, [r0]
   14b20:	bne	14b34 <__assert_fail@plt+0x3464>
   14b24:	mov	r4, #0
   14b28:	tst	r6, #32768	; 0x8000
   14b2c:	bne	14bc0 <__assert_fail@plt+0x34f0>
   14b30:	b	14c3c <__assert_fail@plt+0x356c>
   14b34:	bl	15414 <__assert_fail@plt+0x3d44>
   14b38:	mov	r0, #1
   14b3c:	bl	11694 <fdatasync@plt>
   14b40:	cmn	r0, #1
   14b44:	bgt	14b5c <__assert_fail@plt+0x348c>
   14b48:	bl	11598 <__errno_location@plt>
   14b4c:	ldr	r5, [r0]
   14b50:	cmp	r5, #4
   14b54:	beq	14b34 <__assert_fail@plt+0x3464>
   14b58:	b	14b6c <__assert_fail@plt+0x349c>
   14b5c:	cmp	r0, #0
   14b60:	beq	14b24 <__assert_fail@plt+0x3454>
   14b64:	bl	11598 <__errno_location@plt>
   14b68:	ldr	r5, [r0]
   14b6c:	cmp	r5, #22
   14b70:	mov	r4, #0
   14b74:	cmpne	r5, #38	; 0x26
   14b78:	beq	14bc0 <__assert_fail@plt+0x34f0>
   14b7c:	movw	r1, #55494	; 0xd8c6
   14b80:	mov	r0, #0
   14b84:	mov	r2, #5
   14b88:	movt	r1, #1
   14b8c:	bl	11424 <dcgettext@plt>
   14b90:	mov	r4, r0
   14b94:	movw	r0, #62220	; 0xf30c
   14b98:	movt	r0, #2
   14b9c:	ldr	r1, [r0]
   14ba0:	mov	r0, #4
   14ba4:	bl	19400 <__assert_fail@plt+0x7d30>
   14ba8:	mov	r3, r0
   14bac:	mov	r0, #0
   14bb0:	mov	r1, r5
   14bb4:	mov	r2, r4
   14bb8:	bl	14a64 <__assert_fail@plt+0x3394>
   14bbc:	mov	r4, #1
   14bc0:	bl	15414 <__assert_fail@plt+0x3d44>
   14bc4:	mov	r0, #1
   14bc8:	bl	1137c <fsync@plt>
   14bcc:	cmn	r0, #1
   14bd0:	bgt	14be8 <__assert_fail@plt+0x3518>
   14bd4:	bl	11598 <__errno_location@plt>
   14bd8:	ldr	r1, [r0]
   14bdc:	cmp	r1, #4
   14be0:	beq	14bc0 <__assert_fail@plt+0x34f0>
   14be4:	b	14bf4 <__assert_fail@plt+0x3524>
   14be8:	cmp	r0, #0
   14bec:	beq	14c3c <__assert_fail@plt+0x356c>
   14bf0:	bl	11598 <__errno_location@plt>
   14bf4:	movw	r1, #55518	; 0xd8de
   14bf8:	ldr	r4, [r0]
   14bfc:	mov	r0, #0
   14c00:	mov	r2, #5
   14c04:	movt	r1, #1
   14c08:	bl	11424 <dcgettext@plt>
   14c0c:	mov	r5, r0
   14c10:	movw	r0, #62220	; 0xf30c
   14c14:	movt	r0, #2
   14c18:	ldr	r1, [r0]
   14c1c:	mov	r0, #4
   14c20:	bl	19400 <__assert_fail@plt+0x7d30>
   14c24:	mov	r3, r0
   14c28:	mov	r0, #0
   14c2c:	mov	r1, r4
   14c30:	mov	r2, r5
   14c34:	bl	14a64 <__assert_fail@plt+0x3394>
   14c38:	mov	r4, #1
   14c3c:	mov	r0, r4
   14c40:	pop	{r4, r5, r6, sl, fp, pc}
   14c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c48:	add	fp, sp, #28
   14c4c:	sub	sp, sp, #20
   14c50:	movw	r1, #62536	; 0xf448
   14c54:	mov	sl, r0
   14c58:	movw	r0, #62544	; 0xf450
   14c5c:	movw	r5, #62279	; 0xf347
   14c60:	movt	r1, #2
   14c64:	cmp	sl, #0
   14c68:	movt	r0, #2
   14c6c:	movt	r5, #2
   14c70:	moveq	r0, r1
   14c74:	movw	r1, #62278	; 0xf346
   14c78:	cmp	sl, #0
   14c7c:	movt	r1, #2
   14c80:	ldr	r8, [r0]
   14c84:	ldr	r7, [r0, #4]
   14c88:	moveq	r5, r1
   14c8c:	orrs	lr, r2, r3
   14c90:	ldrb	ip, [r5]
   14c94:	beq	14d24 <__assert_fail@plt+0x3654>
   14c98:	cmn	r7, #1
   14c9c:	mov	r6, #0
   14ca0:	mov	r5, #0
   14ca4:	mov	r9, #1
   14ca8:	movwgt	r6, #1
   14cac:	adds	r1, r8, r2
   14cb0:	adc	r4, r7, r3
   14cb4:	mov	r7, #0
   14cb8:	cmn	r4, #1
   14cbc:	movwgt	r7, #1
   14cc0:	subs	r7, r6, r7
   14cc4:	movwne	r7, #1
   14cc8:	cmn	r3, #1
   14ccc:	movwgt	r5, #1
   14cd0:	sub	r6, r6, r5
   14cd4:	clz	r6, r6
   14cd8:	lsr	r6, r6, #5
   14cdc:	ands	r7, r6, r7
   14ce0:	mvnne	r4, #-2147483648	; 0x80000000
   14ce4:	mvnne	r1, #0
   14ce8:	asr	r7, r4, #31
   14cec:	adds	r5, r1, r7, lsr #15
   14cf0:	adc	r6, r4, #0
   14cf4:	bfc	r5, #0, #17
   14cf8:	subs	r8, r1, r5
   14cfc:	sbc	r7, r4, r6
   14d00:	str	r8, [r0]
   14d04:	str	r7, [r0, #4]
   14d08:	orrs	r0, r5, r6
   14d0c:	beq	14da4 <__assert_fail@plt+0x36d4>
   14d10:	subs	r0, r8, r1
   14d14:	sbcs	r0, r7, r4
   14d18:	mov	r0, #1
   14d1c:	blt	14d34 <__assert_fail@plt+0x3664>
   14d20:	b	14eb8 <__assert_fail@plt+0x37e8>
   14d24:	orrs	r9, r8, r7
   14d28:	mov	r5, r8
   14d2c:	mov	r6, r7
   14d30:	movwne	r9, #1
   14d34:	tst	ip, #255	; 0xff
   14d38:	orreq	r1, r5, r2
   14d3c:	orreq	r2, r6, r3
   14d40:	moveq	r0, #1
   14d44:	orrseq	r1, r1, r2
   14d48:	beq	14eb8 <__assert_fail@plt+0x37e8>
   14d4c:	cmp	lr, #0
   14d50:	mvn	r4, #0
   14d54:	moveq	r7, lr
   14d58:	moveq	r8, lr
   14d5c:	cmp	sl, #0
   14d60:	beq	14db0 <__assert_fail@plt+0x36e0>
   14d64:	movw	r0, #61792	; 0xf160
   14d68:	movt	r0, #2
   14d6c:	ldrd	r0, [r0]
   14d70:	eor	r2, r1, r4
   14d74:	eor	r3, r0, r4
   14d78:	orrs	r2, r3, r2
   14d7c:	beq	14ecc <__assert_fail@plt+0x37fc>
   14d80:	cmn	r1, #1
   14d84:	ble	14dd4 <__assert_fail@plt+0x3704>
   14d88:	cmp	lr, #0
   14d8c:	beq	14e18 <__assert_fail@plt+0x3748>
   14d90:	adds	r2, r8, r5
   14d94:	adc	r3, r7, r6
   14d98:	adds	r0, r2, r0
   14d9c:	adc	r1, r3, r1
   14da0:	b	14e00 <__assert_fail@plt+0x3730>
   14da4:	mov	r0, #1
   14da8:	sub	sp, fp, #28
   14dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db0:	movw	r0, #62200	; 0xf2f8
   14db4:	movt	r0, #2
   14db8:	ldrb	r0, [r0]
   14dbc:	cmp	r0, #0
   14dc0:	beq	14ec0 <__assert_fail@plt+0x37f0>
   14dc4:	movw	r0, #62208	; 0xf300
   14dc8:	movt	r0, #2
   14dcc:	ldrd	r0, [r0]
   14dd0:	b	14e0c <__assert_fail@plt+0x373c>
   14dd4:	mov	r0, #1
   14dd8:	mov	r2, #0
   14ddc:	mov	r3, #0
   14de0:	str	ip, [sp, #16]
   14de4:	mov	r4, lr
   14de8:	str	r0, [sp]
   14dec:	mov	r0, sl
   14df0:	bl	11490 <lseek64@plt>
   14df4:	ldr	ip, [sp, #16]
   14df8:	mov	lr, r4
   14dfc:	mvn	r4, #0
   14e00:	movw	r2, #61792	; 0xf160
   14e04:	movt	r2, #2
   14e08:	strd	r0, [r2]
   14e0c:	subs	r2, r4, r0
   14e10:	sbcs	r2, r4, r1
   14e14:	bge	14ecc <__assert_fail@plt+0x37fc>
   14e18:	uxtb	r3, ip
   14e1c:	clz	r2, lr
   14e20:	mov	r4, r6
   14e24:	lsr	r2, r2, #5
   14e28:	cmp	r3, #0
   14e2c:	and	r2, r2, r9
   14e30:	mov	r9, r5
   14e34:	movwne	r3, #1
   14e38:	ands	r2, r3, r2
   14e3c:	movwne	r9, #0
   14e40:	movwne	r4, #0
   14e44:	subs	r0, r0, r9
   14e48:	sbc	r1, r1, r4
   14e4c:	cmp	r2, #0
   14e50:	movne	r8, r5
   14e54:	movne	r7, r6
   14e58:	subs	r5, r0, r8
   14e5c:	sbc	r6, r1, r7
   14e60:	orrs	r0, r9, r4
   14e64:	bne	14e8c <__assert_fail@plt+0x37bc>
   14e68:	movw	r0, #61920	; 0xf1e0
   14e6c:	mov	r1, r6
   14e70:	movt	r0, #2
   14e74:	ldr	r2, [r0]
   14e78:	mov	r0, r5
   14e7c:	asr	r3, r2, #31
   14e80:	bl	1c194 <__assert_fail@plt+0xaac4>
   14e84:	subs	r5, r5, r2
   14e88:	sbc	r6, r6, r3
   14e8c:	mov	r0, #4
   14e90:	mov	r2, r5
   14e94:	mov	r3, r6
   14e98:	str	r9, [sp]
   14e9c:	str	r4, [sp, #4]
   14ea0:	str	r0, [sp, #8]
   14ea4:	mov	r0, sl
   14ea8:	bl	11394 <posix_fadvise64@plt>
   14eac:	mvn	r1, #0
   14eb0:	subs	r0, r0, r1
   14eb4:	movwne	r0, #1
   14eb8:	sub	sp, fp, #28
   14ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec0:	bl	11598 <__errno_location@plt>
   14ec4:	mov	r1, #29
   14ec8:	str	r1, [r0]
   14ecc:	mov	r0, #0
   14ed0:	sub	sp, fp, #28
   14ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed8:	push	{fp, lr}
   14edc:	mov	fp, sp
   14ee0:	bl	15414 <__assert_fail@plt+0x3d44>
   14ee4:	bl	154b4 <__assert_fail@plt+0x3de4>
   14ee8:	pop	{fp, lr}
   14eec:	b	155c0 <__assert_fail@plt+0x3ef0>
   14ef0:	movw	r0, #62408	; 0xf3c8
   14ef4:	movt	r0, #2
   14ef8:	ldr	r1, [r0]
   14efc:	add	r1, r1, #1
   14f00:	str	r1, [r0]
   14f04:	bx	lr
   14f08:	movw	r1, #62412	; 0xf3cc
   14f0c:	movt	r1, #2
   14f10:	str	r0, [r1]
   14f14:	bx	lr
   14f18:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f1c:	add	fp, sp, #24
   14f20:	sub	sp, sp, #8
   14f24:	mov	r8, r3
   14f28:	mov	r9, r2
   14f2c:	mov	r7, r1
   14f30:	mov	r4, r0
   14f34:	mov	r5, #0
   14f38:	mov	r0, r4
   14f3c:	mov	r1, #44	; 0x2c
   14f40:	bl	11580 <strchr@plt>
   14f44:	mov	r2, r7
   14f48:	b	14f58 <__assert_fail@plt+0x3888>
   14f4c:	ldrb	r1, [r2], #16
   14f50:	cmp	r1, #0
   14f54:	beq	14fbc <__assert_fail@plt+0x38ec>
   14f58:	mov	r1, #0
   14f5c:	ldrb	r3, [r2, r1]
   14f60:	cmp	r3, #0
   14f64:	beq	14f7c <__assert_fail@plt+0x38ac>
   14f68:	ldrb	r6, [r4, r1]
   14f6c:	add	r1, r1, #1
   14f70:	cmp	r6, r3
   14f74:	beq	14f5c <__assert_fail@plt+0x388c>
   14f78:	b	14f4c <__assert_fail@plt+0x387c>
   14f7c:	ldrb	r1, [r4, r1]
   14f80:	cmp	r1, #44	; 0x2c
   14f84:	cmpne	r1, #0
   14f88:	bne	14f4c <__assert_fail@plt+0x387c>
   14f8c:	ldr	r1, [r2, #12]
   14f90:	cmp	r1, #0
   14f94:	beq	14f4c <__assert_fail@plt+0x387c>
   14f98:	cmp	r9, #0
   14f9c:	add	r4, r0, #1
   14fa0:	orreq	r1, r1, r5
   14fa4:	cmp	r0, #0
   14fa8:	mov	r5, r1
   14fac:	bne	14f38 <__assert_fail@plt+0x3868>
   14fb0:	mov	r0, r1
   14fb4:	sub	sp, fp, #24
   14fb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fbc:	cmp	r0, #0
   14fc0:	bne	14fd4 <__assert_fail@plt+0x3904>
   14fc4:	mov	r0, r4
   14fc8:	bl	11574 <strlen@plt>
   14fcc:	mov	r6, r0
   14fd0:	b	14fd8 <__assert_fail@plt+0x3908>
   14fd4:	sub	r6, r0, r4
   14fd8:	mov	r0, #0
   14fdc:	mov	r1, r8
   14fe0:	mov	r2, #5
   14fe4:	bl	11424 <dcgettext@plt>
   14fe8:	mov	r5, r0
   14fec:	mov	r0, #0
   14ff0:	mov	r1, #8
   14ff4:	mov	r2, r4
   14ff8:	mov	r3, r6
   14ffc:	bl	193ac <__assert_fail@plt+0x7cdc>
   15000:	movw	r2, #54375	; 0xd467
   15004:	str	r0, [sp]
   15008:	mov	r0, #0
   1500c:	mov	r1, #0
   15010:	mov	r3, r5
   15014:	movt	r2, #1
   15018:	bl	14a64 <__assert_fail@plt+0x3394>
   1501c:	mov	r0, #1
   15020:	bl	117d0 <__assert_fail@plt+0x100>
   15024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15028:	add	fp, sp, #28
   1502c:	sub	sp, sp, #36	; 0x24
   15030:	mov	r6, r0
   15034:	mov	r0, #0
   15038:	mov	r8, r1
   1503c:	add	r1, sp, #20
   15040:	add	r3, sp, #24
   15044:	mov	r2, #10
   15048:	str	r0, [sp, #28]
   1504c:	str	r0, [sp, #24]
   15050:	movw	r0, #54606	; 0xd54e
   15054:	movt	r0, #1
   15058:	str	r0, [sp]
   1505c:	mov	r0, r6
   15060:	bl	1a784 <__assert_fail@plt+0x90b4>
   15064:	mov	r7, r0
   15068:	bic	r0, r0, #1
   1506c:	cmp	r0, #2
   15070:	bne	150b8 <__assert_fail@plt+0x39e8>
   15074:	ldr	r0, [sp, #20]
   15078:	ldrb	r1, [r0]
   1507c:	cmp	r1, #120	; 0x78
   15080:	bne	150b8 <__assert_fail@plt+0x39e8>
   15084:	mov	r1, #0
   15088:	add	r0, r0, #1
   1508c:	str	r1, [sp, #16]
   15090:	add	r1, sp, #16
   15094:	bl	15024 <__assert_fail@plt+0x3954>
   15098:	ldr	sl, [sp, #16]
   1509c:	mov	r9, r0
   150a0:	mov	r5, r1
   150a4:	cmp	sl, #2
   150a8:	bcc	150dc <__assert_fail@plt+0x3a0c>
   150ac:	str	sl, [r8]
   150b0:	mov	r4, r9
   150b4:	b	151c8 <__assert_fail@plt+0x3af8>
   150b8:	ldr	r5, [sp, #28]
   150bc:	cmn	r5, #1
   150c0:	ble	150d4 <__assert_fail@plt+0x3a04>
   150c4:	ldr	r4, [sp, #24]
   150c8:	cmp	r7, #0
   150cc:	strne	r7, [r8]
   150d0:	b	151c8 <__assert_fail@plt+0x3af8>
   150d4:	orr	r0, r7, #1
   150d8:	b	151bc <__assert_fail@plt+0x3aec>
   150dc:	cmn	r5, #1
   150e0:	ble	15128 <__assert_fail@plt+0x3a58>
   150e4:	orrs	r0, r9, r5
   150e8:	ldr	r0, [sp, #24]
   150ec:	ldr	r2, [sp, #28]
   150f0:	str	r0, [sp, #12]
   150f4:	beq	15194 <__assert_fail@plt+0x3ac4>
   150f8:	mov	r4, r2
   150fc:	mvn	r0, #0
   15100:	mvn	r1, #-2147483648	; 0x80000000
   15104:	mov	r2, r9
   15108:	mov	r3, r5
   1510c:	bl	1c268 <__assert_fail@plt+0xab98>
   15110:	ldr	r3, [sp, #12]
   15114:	mov	r2, r4
   15118:	subs	r0, r0, r3
   1511c:	sbcs	r0, r1, r4
   15120:	bcs	15194 <__assert_fail@plt+0x3ac4>
   15124:	b	151b8 <__assert_fail@plt+0x3ae8>
   15128:	ldr	r1, [sp, #24]
   1512c:	ldr	r2, [sp, #28]
   15130:	and	r0, r9, r5
   15134:	cmn	r0, #1
   15138:	str	r1, [sp, #12]
   1513c:	beq	15170 <__assert_fail@plt+0x3aa0>
   15140:	str	r2, [sp, #8]
   15144:	mov	r0, #0
   15148:	mov	r1, #-2147483648	; 0x80000000
   1514c:	mov	r2, r9
   15150:	mov	r3, r5
   15154:	bl	1c194 <__assert_fail@plt+0xaac4>
   15158:	ldr	r3, [sp, #12]
   1515c:	ldr	r2, [sp, #8]
   15160:	subs	r0, r0, r3
   15164:	sbcs	r0, r1, r2
   15168:	bcs	15194 <__assert_fail@plt+0x3ac4>
   1516c:	b	151b8 <__assert_fail@plt+0x3ae8>
   15170:	ldr	r0, [sp, #12]
   15174:	mov	r1, #0
   15178:	subs	r0, r0, #1
   1517c:	sbcs	r0, r2, #0
   15180:	adc	r1, r1, #0
   15184:	cmp	r1, #1
   15188:	bne	15194 <__assert_fail@plt+0x3ac4>
   1518c:	cmp	r0, #0
   15190:	bmi	151b8 <__assert_fail@plt+0x3ae8>
   15194:	ldr	r1, [sp, #12]
   15198:	umull	r4, r0, r1, r9
   1519c:	mla	r0, r1, r5, r0
   151a0:	mla	r5, r2, r9, r0
   151a4:	orrs	r0, r4, r5
   151a8:	beq	151d8 <__assert_fail@plt+0x3b08>
   151ac:	orr	r0, sl, r7
   151b0:	tst	r0, #1
   151b4:	beq	151c8 <__assert_fail@plt+0x3af8>
   151b8:	mov	r0, #1
   151bc:	str	r0, [r8]
   151c0:	mvn	r5, #-2147483648	; 0x80000000
   151c4:	mvn	r4, #0
   151c8:	mov	r0, r4
   151cc:	mov	r1, r5
   151d0:	sub	sp, fp, #28
   151d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d8:	movw	r1, #54682	; 0xd59a
   151dc:	mov	r0, r6
   151e0:	mov	r2, #2
   151e4:	movt	r1, #1
   151e8:	bl	11688 <strncmp@plt>
   151ec:	mov	r4, #0
   151f0:	cmp	r0, #0
   151f4:	mov	r5, #0
   151f8:	bne	151c8 <__assert_fail@plt+0x3af8>
   151fc:	movw	r1, #54620	; 0xd55c
   15200:	mov	r0, #0
   15204:	mov	r2, #5
   15208:	mov	r4, #0
   1520c:	movt	r1, #1
   15210:	bl	11424 <dcgettext@plt>
   15214:	movw	r1, #54682	; 0xd59a
   15218:	mov	r5, r0
   1521c:	mov	r0, #0
   15220:	movt	r1, #1
   15224:	bl	19918 <__assert_fail@plt+0x8248>
   15228:	movw	r1, #54681	; 0xd599
   1522c:	mov	r6, r0
   15230:	mov	r0, #1
   15234:	movt	r1, #1
   15238:	bl	19918 <__assert_fail@plt+0x8248>
   1523c:	str	r0, [sp]
   15240:	mov	r0, #0
   15244:	mov	r1, #0
   15248:	mov	r2, r5
   1524c:	mov	r3, r6
   15250:	bl	14a64 <__assert_fail@plt+0x3394>
   15254:	mov	r5, #0
   15258:	b	151c8 <__assert_fail@plt+0x3af8>
   1525c:	push	{r4, r5, r6, r7, fp, lr}
   15260:	add	fp, sp, #16
   15264:	cmp	r2, #1
   15268:	blt	152b4 <__assert_fail@plt+0x3be4>
   1526c:	mov	r5, r2
   15270:	mov	r6, r1
   15274:	mov	r7, r0
   15278:	mov	r4, #0
   1527c:	mov	r0, r7
   15280:	mov	r1, r6
   15284:	mov	r2, r5
   15288:	bl	152c0 <__assert_fail@plt+0x3bf0>
   1528c:	cmp	r0, #0
   15290:	bmi	152bc <__assert_fail@plt+0x3bec>
   15294:	beq	152ac <__assert_fail@plt+0x3bdc>
   15298:	sub	r5, r5, r0
   1529c:	add	r6, r6, r0
   152a0:	add	r4, r0, r4
   152a4:	cmp	r5, #0
   152a8:	bgt	1527c <__assert_fail@plt+0x3bac>
   152ac:	mov	r0, r4
   152b0:	pop	{r4, r5, r6, r7, fp, pc}
   152b4:	mov	r4, #0
   152b8:	mov	r0, r4
   152bc:	pop	{r4, r5, r6, r7, fp, pc}
   152c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   152c4:	add	fp, sp, #24
   152c8:	sub	sp, sp, #8
   152cc:	movw	r8, #62444	; 0xf3ec
   152d0:	movw	r9, #62196	; 0xf2f4
   152d4:	mov	r5, r2
   152d8:	mov	r6, r1
   152dc:	mov	r7, r0
   152e0:	movt	r8, #2
   152e4:	movt	r9, #2
   152e8:	b	152f8 <__assert_fail@plt+0x3c28>
   152ec:	ldr	r0, [r0]
   152f0:	cmp	r0, #4
   152f4:	bne	15404 <__assert_fail@plt+0x3d34>
   152f8:	bl	15414 <__assert_fail@plt+0x3d44>
   152fc:	mov	r0, r7
   15300:	mov	r1, r6
   15304:	mov	r2, r5
   15308:	bl	113a0 <read@plt>
   1530c:	mov	r4, r0
   15310:	cmn	r0, #1
   15314:	beq	15324 <__assert_fail@plt+0x3c54>
   15318:	bgt	15360 <__assert_fail@plt+0x3c90>
   1531c:	bl	11598 <__errno_location@plt>
   15320:	b	152ec <__assert_fail@plt+0x3c1c>
   15324:	bl	11598 <__errno_location@plt>
   15328:	ldr	r1, [r8]
   1532c:	cmp	r1, r5
   15330:	bge	152ec <__assert_fail@plt+0x3c1c>
   15334:	ldr	r2, [r0]
   15338:	cmp	r2, #22
   1533c:	bne	152ec <__assert_fail@plt+0x3c1c>
   15340:	cmp	r1, #1
   15344:	blt	152ec <__assert_fail@plt+0x3c1c>
   15348:	ldrb	r1, [r9, #2]
   1534c:	tst	r1, #1
   15350:	beq	152ec <__assert_fail@plt+0x3c1c>
   15354:	mov	r4, #0
   15358:	str	r4, [r0]
   1535c:	b	15404 <__assert_fail@plt+0x3d34>
   15360:	cmp	r4, #0
   15364:	beq	15378 <__assert_fail@plt+0x3ca8>
   15368:	cmp	r4, r5
   1536c:	bge	15378 <__assert_fail@plt+0x3ca8>
   15370:	bl	15414 <__assert_fail@plt+0x3d44>
   15374:	b	15380 <__assert_fail@plt+0x3cb0>
   15378:	cmp	r4, #0
   1537c:	beq	15400 <__assert_fail@plt+0x3d30>
   15380:	ldr	r6, [r8]
   15384:	cmp	r6, r5
   15388:	bge	15404 <__assert_fail@plt+0x3d34>
   1538c:	movw	r5, #62436	; 0xf3e4
   15390:	movt	r5, #2
   15394:	ldrb	r0, [r5]
   15398:	cmp	r0, #0
   1539c:	beq	15404 <__assert_fail@plt+0x3d34>
   153a0:	cmp	r6, #1
   153a4:	blt	15404 <__assert_fail@plt+0x3d34>
   153a8:	movw	r0, #61776	; 0xf150
   153ac:	movt	r0, #2
   153b0:	ldr	r0, [r0]
   153b4:	cmp	r0, #1
   153b8:	beq	153f4 <__assert_fail@plt+0x3d24>
   153bc:	movw	r1, #54685	; 0xd59d
   153c0:	movw	r2, #54743	; 0xd5d7
   153c4:	mov	r0, #5
   153c8:	mov	r3, r6
   153cc:	movt	r1, #1
   153d0:	movt	r2, #1
   153d4:	str	r0, [sp]
   153d8:	mov	r0, #0
   153dc:	bl	116b8 <dcngettext@plt>
   153e0:	mov	r2, r0
   153e4:	mov	r0, #0
   153e8:	mov	r1, #0
   153ec:	mov	r3, r6
   153f0:	bl	14a64 <__assert_fail@plt+0x3394>
   153f4:	mov	r0, #0
   153f8:	strb	r0, [r5]
   153fc:	b	15404 <__assert_fail@plt+0x3d34>
   15400:	mov	r4, #0
   15404:	str	r4, [r8]
   15408:	mov	r0, r4
   1540c:	sub	sp, fp, #24
   15410:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15414:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15418:	add	fp, sp, #24
   1541c:	sub	sp, sp, #128	; 0x80
   15420:	movw	r7, #62412	; 0xf3cc
   15424:	movw	r4, #62408	; 0xf3c8
   15428:	movw	r8, #62280	; 0xf348
   1542c:	mov	r5, sp
   15430:	movt	r7, #2
   15434:	movt	r4, #2
   15438:	movt	r8, #2
   1543c:	b	15450 <__assert_fail@plt+0x3d80>
   15440:	bl	154b4 <__assert_fail@plt+0x3de4>
   15444:	bl	155c0 <__assert_fail@plt+0x3ef0>
   15448:	mov	r0, r6
   1544c:	bl	11370 <raise@plt>
   15450:	ldr	r0, [r7]
   15454:	cmp	r0, #0
   15458:	bne	15468 <__assert_fail@plt+0x3d98>
   1545c:	ldr	r0, [r4]
   15460:	cmp	r0, #0
   15464:	beq	154ac <__assert_fail@plt+0x3ddc>
   15468:	mov	r0, #0
   1546c:	mov	r1, r8
   15470:	mov	r2, r5
   15474:	bl	113b8 <sigprocmask@plt>
   15478:	ldr	r6, [r7]
   1547c:	ldr	r0, [r4]
   15480:	mov	r1, r5
   15484:	mov	r2, #0
   15488:	cmp	r0, #0
   1548c:	subne	r0, r0, #1
   15490:	strne	r0, [r4]
   15494:	mov	r0, #2
   15498:	bl	113b8 <sigprocmask@plt>
   1549c:	cmp	r6, #0
   154a0:	bne	15440 <__assert_fail@plt+0x3d70>
   154a4:	bl	155c0 <__assert_fail@plt+0x3ef0>
   154a8:	b	15450 <__assert_fail@plt+0x3d80>
   154ac:	sub	sp, fp, #24
   154b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   154b4:	push	{r4, r5, fp, lr}
   154b8:	add	fp, sp, #8
   154bc:	movw	r0, #62412	; 0xf3cc
   154c0:	movt	r0, #2
   154c4:	ldr	r0, [r0]
   154c8:	cmp	r0, #0
   154cc:	bne	154dc <__assert_fail@plt+0x3e0c>
   154d0:	bl	14b00 <__assert_fail@plt+0x3430>
   154d4:	cmp	r0, #0
   154d8:	bne	155bc <__assert_fail@plt+0x3eec>
   154dc:	mov	r0, #0
   154e0:	bl	116ac <close@plt>
   154e4:	cmp	r0, #0
   154e8:	beq	15518 <__assert_fail@plt+0x3e48>
   154ec:	bl	11598 <__errno_location@plt>
   154f0:	ldr	r4, [r0]
   154f4:	mov	r5, r0
   154f8:	cmp	r4, #4
   154fc:	bne	1557c <__assert_fail@plt+0x3eac>
   15500:	mov	r0, #0
   15504:	bl	116ac <close@plt>
   15508:	cmp	r0, #0
   1550c:	ldrne	r4, [r5]
   15510:	cmpne	r4, #9
   15514:	bne	154f8 <__assert_fail@plt+0x3e28>
   15518:	mov	r0, #1
   1551c:	bl	116ac <close@plt>
   15520:	cmp	r0, #0
   15524:	popeq	{r4, r5, fp, pc}
   15528:	bl	11598 <__errno_location@plt>
   1552c:	ldr	r4, [r0]
   15530:	mov	r5, r0
   15534:	cmp	r4, #4
   15538:	bne	15558 <__assert_fail@plt+0x3e88>
   1553c:	mov	r0, #1
   15540:	bl	116ac <close@plt>
   15544:	cmp	r0, #0
   15548:	ldrne	r4, [r5]
   1554c:	cmpne	r4, #9
   15550:	bne	15534 <__assert_fail@plt+0x3e64>
   15554:	pop	{r4, r5, fp, pc}
   15558:	movw	r1, #54824	; 0xd628
   1555c:	mov	r0, #0
   15560:	mov	r2, #5
   15564:	movt	r1, #1
   15568:	bl	11424 <dcgettext@plt>
   1556c:	mov	r5, r0
   15570:	movw	r0, #62220	; 0xf30c
   15574:	movt	r0, #2
   15578:	b	1559c <__assert_fail@plt+0x3ecc>
   1557c:	movw	r1, #54802	; 0xd612
   15580:	mov	r0, #0
   15584:	mov	r2, #5
   15588:	movt	r1, #1
   1558c:	bl	11424 <dcgettext@plt>
   15590:	mov	r5, r0
   15594:	movw	r0, #62192	; 0xf2f0
   15598:	movt	r0, #2
   1559c:	ldr	r1, [r0]
   155a0:	mov	r0, #4
   155a4:	bl	19400 <__assert_fail@plt+0x7d30>
   155a8:	mov	r3, r0
   155ac:	mov	r0, #1
   155b0:	mov	r1, r4
   155b4:	mov	r2, r5
   155b8:	bl	14a64 <__assert_fail@plt+0x3394>
   155bc:	bl	1155c <exit@plt>
   155c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155c4:	add	fp, sp, #28
   155c8:	sub	sp, sp, #36	; 0x24
   155cc:	movw	r0, #61776	; 0xf150
   155d0:	movt	r0, #2
   155d4:	ldr	r0, [r0]
   155d8:	cmp	r0, #1
   155dc:	beq	15728 <__assert_fail@plt+0x4058>
   155e0:	movw	r4, #62448	; 0xf3f0
   155e4:	movw	sl, #61904	; 0xf1d0
   155e8:	movt	r4, #2
   155ec:	movt	sl, #2
   155f0:	ldr	r0, [r4]
   155f4:	cmp	r0, #1
   155f8:	blt	15628 <__assert_fail@plt+0x3f58>
   155fc:	ldr	r0, [sl]
   15600:	ldr	r1, [r0, #20]
   15604:	ldr	r2, [r0, #24]
   15608:	cmp	r1, r2
   1560c:	bcs	15744 <__assert_fail@plt+0x4074>
   15610:	add	r2, r1, #1
   15614:	str	r2, [r0, #20]
   15618:	mov	r0, #10
   1561c:	strb	r0, [r1]
   15620:	mov	r0, #0
   15624:	str	r0, [r4]
   15628:	movw	r1, #54847	; 0xd63f
   1562c:	ldr	r4, [sl]
   15630:	mov	r0, #0
   15634:	mov	r2, #5
   15638:	movt	r1, #1
   1563c:	bl	11424 <dcgettext@plt>
   15640:	movw	r3, #62464	; 0xf400
   15644:	mov	r2, r0
   15648:	movw	r0, #62456	; 0xf3f8
   1564c:	movw	r6, #62480	; 0xf410
   15650:	movt	r3, #2
   15654:	movt	r0, #2
   15658:	movt	r6, #2
   1565c:	ldrd	r8, [r3]
   15660:	movw	r3, #62472	; 0xf408
   15664:	ldrd	r0, [r0]
   15668:	ldr	r5, [r6, #4]
   1566c:	ldr	r6, [r6]
   15670:	movt	r3, #2
   15674:	ldm	r3, {r3, r7}
   15678:	stm	sp, {r0, r1, r8, r9}
   1567c:	mov	r0, r4
   15680:	mov	r1, #1
   15684:	str	r7, [sp, #20]
   15688:	str	r6, [sp, #24]
   1568c:	str	r5, [sp, #28]
   15690:	str	r3, [sp, #16]
   15694:	bl	115f8 <__fprintf_chk@plt>
   15698:	movw	r7, #62488	; 0xf418
   1569c:	movt	r7, #2
   156a0:	ldrd	r8, [r7]
   156a4:	orrs	r0, r8, r9
   156a8:	beq	15714 <__assert_fail@plt+0x4044>
   156ac:	ldr	r4, [sl]
   156b0:	cmp	r9, #0
   156b4:	beq	156d8 <__assert_fail@plt+0x4008>
   156b8:	movw	r5, #16960	; 0x4240
   156bc:	mov	r0, r8
   156c0:	mov	r1, r9
   156c4:	mov	r3, #0
   156c8:	movt	r5, #15
   156cc:	mov	r2, r5
   156d0:	bl	1c268 <__assert_fail@plt+0xab98>
   156d4:	add	r8, r2, r5
   156d8:	movw	r1, #54891	; 0xd66b
   156dc:	movw	r2, #54914	; 0xd682
   156e0:	mov	r0, #5
   156e4:	mov	r3, r8
   156e8:	movt	r1, #1
   156ec:	movt	r2, #1
   156f0:	str	r0, [sp]
   156f4:	mov	r0, #0
   156f8:	bl	116b8 <dcngettext@plt>
   156fc:	mov	r2, r0
   15700:	ldrd	r0, [r7]
   15704:	stm	sp, {r0, r1}
   15708:	mov	r0, r4
   1570c:	mov	r1, #1
   15710:	bl	115f8 <__fprintf_chk@plt>
   15714:	movw	r0, #61776	; 0xf150
   15718:	movt	r0, #2
   1571c:	ldr	r0, [r0]
   15720:	cmp	r0, #2
   15724:	bne	15730 <__assert_fail@plt+0x4060>
   15728:	sub	sp, fp, #28
   1572c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15730:	mov	r0, #0
   15734:	mov	r1, #0
   15738:	sub	sp, fp, #28
   1573c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15740:	b	15750 <__assert_fail@plt+0x4080>
   15744:	mov	r1, #10
   15748:	bl	11628 <__overflow@plt>
   1574c:	b	15620 <__assert_fail@plt+0x3f50>
   15750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15754:	add	fp, sp, #28
   15758:	sub	sp, sp, #4
   1575c:	vpush	{d8-d9}
   15760:	sub	sp, sp, #2032	; 0x7f0
   15764:	mov	r6, r0
   15768:	orrs	r0, r0, r1
   1576c:	str	r0, [sp, #36]	; 0x24
   15770:	bne	1577c <__assert_fail@plt+0x40ac>
   15774:	bl	16e34 <__assert_fail@plt+0x5764>
   15778:	mov	r6, r0
   1577c:	movw	sl, #62496	; 0xf420
   15780:	mov	r7, r1
   15784:	add	r4, sp, #66	; 0x42
   15788:	mov	r8, #0
   1578c:	mov	r5, #1
   15790:	movw	r3, #465	; 0x1d1
   15794:	movt	sl, #2
   15798:	mov	r2, r4
   1579c:	stm	sp, {r5, r8}
   157a0:	str	r5, [sp, #8]
   157a4:	str	r8, [sp, #12]
   157a8:	ldrd	r0, [sl]
   157ac:	bl	16ea8 <__assert_fail@plt+0x57d8>
   157b0:	str	r0, [sp, #32]
   157b4:	ldrd	r0, [sl]
   157b8:	movw	r2, #654	; 0x28e
   157bc:	movw	r3, #497	; 0x1f1
   157c0:	stm	sp, {r5, r8}
   157c4:	str	r5, [sp, #8]
   157c8:	str	r8, [sp, #12]
   157cc:	add	r2, r4, r2
   157d0:	bl	16ea8 <__assert_fail@plt+0x57d8>
   157d4:	str	r0, [sp, #28]
   157d8:	movw	r0, #1308	; 0x51c
   157dc:	add	r9, r4, r0
   157e0:	movw	r0, #62256	; 0xf330
   157e4:	movt	r0, #2
   157e8:	ldrd	r0, [r0]
   157ec:	subs	r2, r0, r6
   157f0:	sbcs	r2, r1, r7
   157f4:	bge	1586c <__assert_fail@plt+0x419c>
   157f8:	subs	r6, r6, r0
   157fc:	sbc	r7, r7, r1
   15800:	mov	r0, r6
   15804:	mov	r1, r7
   15808:	bl	1c134 <__assert_fail@plt+0xaa64>
   1580c:	movw	r2, #51712	; 0xca00
   15810:	str	r0, [sp, #24]
   15814:	mov	r4, r1
   15818:	ldrd	r0, [sl]
   1581c:	movw	r3, #465	; 0x1d1
   15820:	mov	r5, sl
   15824:	movt	r2, #15258	; 0x3b9a
   15828:	stm	sp, {r2, r8}
   1582c:	mov	r2, r9
   15830:	str	r6, [sp, #8]
   15834:	str	r7, [sp, #12]
   15838:	bl	16ea8 <__assert_fail@plt+0x57d8>
   1583c:	mov	r9, r0
   15840:	ldr	r0, [sp, #24]
   15844:	vldr	d8, [pc, #668]	; 15ae8 <__assert_fail@plt+0x4418>
   15848:	movw	r6, #29487	; 0x732f
   1584c:	vmov	d9, r0, r4
   15850:	mov	r0, r9
   15854:	bl	11574 <strlen@plt>
   15858:	mov	r1, r9
   1585c:	vdiv.f64	d8, d9, d8
   15860:	strh	r6, [r1, r0]!
   15864:	strb	r8, [r1, #2]
   15868:	b	158ac <__assert_fail@plt+0x41dc>
   1586c:	movw	r1, #54945	; 0xd6a1
   15870:	mov	r0, #0
   15874:	mov	r2, #5
   15878:	mov	r5, sl
   1587c:	movt	r1, #1
   15880:	bl	11424 <dcgettext@plt>
   15884:	movw	r1, #54938	; 0xd69a
   15888:	str	r0, [sp, #4]
   1588c:	mov	r0, r9
   15890:	mov	r2, #1
   15894:	movw	r3, #654	; 0x28e
   15898:	movt	r1, #1
   1589c:	str	r1, [sp]
   158a0:	movw	r1, #654	; 0x28e
   158a4:	bl	116c4 <__snprintf_chk@plt>
   158a8:	vmov.i32	d8, #0	; 0x00000000
   158ac:	ldr	r7, [sp, #36]	; 0x24
   158b0:	mov	sl, r5
   158b4:	ldr	r5, [sp, #32]
   158b8:	ldr	r6, [sp, #28]
   158bc:	movw	r8, #61904	; 0xf1d0
   158c0:	movt	r8, #2
   158c4:	cmp	r7, #0
   158c8:	beq	158f0 <__assert_fail@plt+0x4220>
   158cc:	ldr	r0, [r8]
   158d0:	ldr	r1, [r0, #20]
   158d4:	ldr	r2, [r0, #24]
   158d8:	cmp	r1, r2
   158dc:	bcs	15acc <__assert_fail@plt+0x43fc>
   158e0:	add	r2, r1, #1
   158e4:	str	r2, [r0, #20]
   158e8:	mov	r0, #13
   158ec:	strb	r0, [r1]
   158f0:	movw	r0, #54954	; 0xd6aa
   158f4:	movw	r1, #54961	; 0xd6b1
   158f8:	cmp	r7, #0
   158fc:	add	r4, sp, #42	; 0x2a
   15900:	mov	r2, #1
   15904:	mov	r3, #24
   15908:	vstr	d8, [sp, #8]
   1590c:	movt	r0, #1
   15910:	movt	r1, #1
   15914:	movne	r1, r0
   15918:	mov	r0, r4
   1591c:	str	r1, [sp]
   15920:	mov	r1, #24
   15924:	bl	116c4 <__snprintf_chk@plt>
   15928:	mov	r0, r5
   1592c:	bl	11574 <strlen@plt>
   15930:	add	r0, r0, r5
   15934:	ldrb	r0, [r0, #-2]
   15938:	cmp	r0, #32
   1593c:	bne	159b0 <__assert_fail@plt+0x42e0>
   15940:	ldr	r1, [sl, #4]
   15944:	ldr	r6, [sl]
   15948:	ldr	r5, [r8]
   1594c:	cmp	r1, #0
   15950:	beq	15978 <__assert_fail@plt+0x42a8>
   15954:	movw	r8, #16960	; 0x4240
   15958:	mov	r0, r6
   1595c:	mov	r3, #0
   15960:	movt	r8, #15
   15964:	mov	r2, r8
   15968:	bl	1c268 <__assert_fail@plt+0xab98>
   1596c:	add	r6, r2, r8
   15970:	movw	r8, #61904	; 0xf1d0
   15974:	movt	r8, #2
   15978:	movw	r1, #54966	; 0xd6b6
   1597c:	movw	r2, #54991	; 0xd6cf
   15980:	mov	r0, #5
   15984:	mov	r3, r6
   15988:	movt	r1, #1
   1598c:	movt	r2, #1
   15990:	str	r0, [sp]
   15994:	mov	r0, #0
   15998:	bl	116b8 <dcngettext@plt>
   1599c:	mov	r2, r0
   159a0:	ldrd	r0, [sl]
   159a4:	stm	sp, {r0, r1, r4, r9}
   159a8:	mov	r0, r5
   159ac:	b	15a2c <__assert_fail@plt+0x435c>
   159b0:	mov	r0, r6
   159b4:	bl	11574 <strlen@plt>
   159b8:	add	r0, r0, r6
   159bc:	ldr	r4, [r8]
   159c0:	ldrb	r0, [r0, #-2]
   159c4:	cmp	r0, #32
   159c8:	bne	159fc <__assert_fail@plt+0x432c>
   159cc:	movw	r1, #55017	; 0xd6e9
   159d0:	mov	r0, #0
   159d4:	mov	r2, #5
   159d8:	movt	r1, #1
   159dc:	bl	11424 <dcgettext@plt>
   159e0:	mov	r2, r0
   159e4:	ldrd	r0, [sl]
   159e8:	stm	sp, {r0, r1, r5}
   159ec:	add	r0, sp, #42	; 0x2a
   159f0:	str	r9, [sp, #16]
   159f4:	str	r0, [sp, #12]
   159f8:	b	15a28 <__assert_fail@plt+0x4358>
   159fc:	movw	r1, #55048	; 0xd708
   15a00:	mov	r0, #0
   15a04:	mov	r2, #5
   15a08:	movt	r1, #1
   15a0c:	bl	11424 <dcgettext@plt>
   15a10:	mov	r2, r0
   15a14:	ldrd	r0, [sl]
   15a18:	stm	sp, {r0, r1, r5, r6}
   15a1c:	add	r0, sp, #42	; 0x2a
   15a20:	str	r9, [sp, #20]
   15a24:	str	r0, [sp, #16]
   15a28:	mov	r0, r4
   15a2c:	mov	r1, #1
   15a30:	bl	115f8 <__fprintf_chk@plt>
   15a34:	mov	r4, r0
   15a38:	cmp	r7, #0
   15a3c:	beq	15a88 <__assert_fail@plt+0x43b8>
   15a40:	movw	r5, #62448	; 0xf3f0
   15a44:	cmp	r4, #0
   15a48:	movt	r5, #2
   15a4c:	bmi	15a80 <__assert_fail@plt+0x43b0>
   15a50:	ldr	r1, [r5]
   15a54:	cmp	r1, r4
   15a58:	ble	15a80 <__assert_fail@plt+0x43b0>
   15a5c:	movw	r2, #51805	; 0xca5d
   15a60:	ldr	r0, [r8]
   15a64:	sub	r3, r1, r4
   15a68:	mov	r1, #1
   15a6c:	movt	r2, #1
   15a70:	str	r2, [sp]
   15a74:	movw	r2, #55083	; 0xd72b
   15a78:	movt	r2, #1
   15a7c:	bl	115f8 <__fprintf_chk@plt>
   15a80:	str	r4, [r5]
   15a84:	b	15aac <__assert_fail@plt+0x43dc>
   15a88:	ldr	r0, [r8]
   15a8c:	ldr	r1, [r0, #20]
   15a90:	ldr	r2, [r0, #24]
   15a94:	cmp	r1, r2
   15a98:	bcs	15ad8 <__assert_fail@plt+0x4408>
   15a9c:	add	r2, r1, #1
   15aa0:	str	r2, [r0, #20]
   15aa4:	mov	r0, #10
   15aa8:	strb	r0, [r1]
   15aac:	ldrd	r0, [sl]
   15ab0:	movw	r2, #61784	; 0xf158
   15ab4:	movt	r2, #2
   15ab8:	strd	r0, [r2]
   15abc:	sub	sp, fp, #48	; 0x30
   15ac0:	vpop	{d8-d9}
   15ac4:	add	sp, sp, #4
   15ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15acc:	mov	r1, #13
   15ad0:	bl	11628 <__overflow@plt>
   15ad4:	b	158f0 <__assert_fail@plt+0x4220>
   15ad8:	mov	r1, #10
   15adc:	bl	11628 <__overflow@plt>
   15ae0:	b	15aac <__assert_fail@plt+0x43dc>
   15ae4:	nop	{0}
   15ae8:	andeq	r0, r0, r0
   15aec:	bicmi	ip, sp, r5, ror #26
   15af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af4:	add	fp, sp, #28
   15af8:	sub	sp, sp, #124	; 0x7c
   15afc:	mov	r6, r3
   15b00:	mov	r4, r2
   15b04:	str	r1, [sp, #12]
   15b08:	mov	r8, r0
   15b0c:	bl	11598 <__errno_location@plt>
   15b10:	ldr	r9, [fp, #8]
   15b14:	mov	sl, r0
   15b18:	mov	r0, #0
   15b1c:	mvn	r5, #0
   15b20:	str	r0, [sl]
   15b24:	cmn	r9, #1
   15b28:	ble	15b4c <__assert_fail@plt+0x447c>
   15b2c:	cmp	r9, #0
   15b30:	beq	15be0 <__assert_fail@plt+0x4510>
   15b34:	cmn	r6, #1
   15b38:	ble	15b84 <__assert_fail@plt+0x44b4>
   15b3c:	asr	r3, r9, #31
   15b40:	mvn	r0, #0
   15b44:	mvn	r1, #-2147483648	; 0x80000000
   15b48:	b	15b68 <__assert_fail@plt+0x4498>
   15b4c:	cmn	r6, #1
   15b50:	ble	15bbc <__assert_fail@plt+0x44ec>
   15b54:	cmn	r9, #1
   15b58:	beq	15be0 <__assert_fail@plt+0x4510>
   15b5c:	asr	r3, r9, #31
   15b60:	mov	r0, #0
   15b64:	mov	r1, #-2147483648	; 0x80000000
   15b68:	mov	r2, r9
   15b6c:	bl	1c194 <__assert_fail@plt+0xaac4>
   15b70:	subs	r0, r0, r4
   15b74:	mov	ip, #0
   15b78:	sbcs	r0, r1, r6
   15b7c:	bge	15be0 <__assert_fail@plt+0x4510>
   15b80:	b	15ce0 <__assert_fail@plt+0x4610>
   15b84:	eor	r0, r4, r5
   15b88:	eor	r1, r6, r5
   15b8c:	orrs	r0, r0, r1
   15b90:	beq	15be0 <__assert_fail@plt+0x4510>
   15b94:	mov	r0, #0
   15b98:	mov	r1, #-2147483648	; 0x80000000
   15b9c:	mov	r2, r4
   15ba0:	mov	r3, r6
   15ba4:	bl	1c194 <__assert_fail@plt+0xaac4>
   15ba8:	subs	r0, r0, r9
   15bac:	mov	ip, #0
   15bb0:	sbcs	r0, r1, r9, asr #31
   15bb4:	bge	15be0 <__assert_fail@plt+0x4510>
   15bb8:	b	15ce0 <__assert_fail@plt+0x4610>
   15bbc:	asr	r3, r9, #31
   15bc0:	mvn	r0, #0
   15bc4:	mvn	r1, #-2147483648	; 0x80000000
   15bc8:	mov	r2, r9
   15bcc:	bl	1c194 <__assert_fail@plt+0xaac4>
   15bd0:	subs	r0, r4, r0
   15bd4:	mov	ip, #0
   15bd8:	sbcs	r0, r6, r1
   15bdc:	blt	15ce0 <__assert_fail@plt+0x4610>
   15be0:	ldr	r2, [fp, #12]
   15be4:	umull	r0, r1, r9, r4
   15be8:	asr	lr, r9, #31
   15bec:	mov	ip, #0
   15bf0:	mla	r1, r9, r6, r1
   15bf4:	mla	r1, lr, r4, r1
   15bf8:	ldr	r7, [r2]
   15bfc:	adds	r2, r0, r7
   15c00:	mov	r0, #0
   15c04:	adc	r3, r1, r7, asr #31
   15c08:	asr	r7, r7, #31
   15c0c:	cmn	r3, #1
   15c10:	movwgt	r0, #1
   15c14:	cmn	r1, #1
   15c18:	mov	r1, #0
   15c1c:	movwgt	r1, #1
   15c20:	subs	r0, r1, r0
   15c24:	movwne	r0, #1
   15c28:	cmn	r7, #1
   15c2c:	mov	r7, #0
   15c30:	movwgt	r7, #1
   15c34:	sub	r1, r1, r7
   15c38:	clz	r1, r1
   15c3c:	lsr	r1, r1, #5
   15c40:	tst	r1, r0
   15c44:	bne	15ce0 <__assert_fail@plt+0x4610>
   15c48:	mov	r0, #1
   15c4c:	str	lr, [sp, #4]
   15c50:	str	r2, [sp, #8]
   15c54:	mov	r7, r3
   15c58:	str	r0, [sp]
   15c5c:	mov	r0, r8
   15c60:	bl	11490 <lseek64@plt>
   15c64:	subs	r0, r5, r0
   15c68:	sbcs	r0, r5, r1
   15c6c:	bge	15cdc <__assert_fail@plt+0x460c>
   15c70:	cmp	r8, #0
   15c74:	bne	15e28 <__assert_fail@plt+0x4758>
   15c78:	add	r5, sp, #16
   15c7c:	bl	15414 <__assert_fail@plt+0x3d44>
   15c80:	mov	r0, #3
   15c84:	mov	r1, #0
   15c88:	mov	r2, r5
   15c8c:	bl	1146c <__fxstat64@plt>
   15c90:	cmn	r0, #1
   15c94:	bgt	15e48 <__assert_fail@plt+0x4778>
   15c98:	ldr	r4, [sl]
   15c9c:	cmp	r4, #4
   15ca0:	beq	15c7c <__assert_fail@plt+0x45ac>
   15ca4:	movw	r1, #53832	; 0xd248
   15ca8:	mov	r0, #0
   15cac:	mov	r2, #5
   15cb0:	movt	r1, #1
   15cb4:	bl	11424 <dcgettext@plt>
   15cb8:	ldr	r1, [sp, #12]
   15cbc:	mov	r5, r0
   15cc0:	mov	r0, #4
   15cc4:	bl	19400 <__assert_fail@plt+0x7d30>
   15cc8:	mov	r3, r0
   15ccc:	mov	r0, #1
   15cd0:	mov	r1, r4
   15cd4:	mov	r2, r5
   15cd8:	bl	14a64 <__assert_fail@plt+0x3394>
   15cdc:	ldr	ip, [sl]
   15ce0:	mov	r0, #2
   15ce4:	mov	r2, #0
   15ce8:	mov	r3, #0
   15cec:	str	ip, [sp, #4]
   15cf0:	str	r0, [sp]
   15cf4:	mov	r0, r8
   15cf8:	bl	11490 <lseek64@plt>
   15cfc:	subs	r0, r5, r0
   15d00:	sbcs	r0, r5, r1
   15d04:	blt	15ffc <__assert_fail@plt+0x492c>
   15d08:	cmp	r8, #0
   15d0c:	str	sl, [sp, #8]
   15d10:	beq	15d24 <__assert_fail@plt+0x4654>
   15d14:	bl	16414 <__assert_fail@plt+0x4d44>
   15d18:	movw	r0, #62508	; 0xf42c
   15d1c:	movt	r0, #2
   15d20:	b	15d30 <__assert_fail@plt+0x4660>
   15d24:	bl	16354 <__assert_fail@plt+0x4c84>
   15d28:	movw	r0, #62512	; 0xf430
   15d2c:	movt	r0, #2
   15d30:	ldr	r7, [r0]
   15d34:	movw	r0, #62440	; 0xf3e8
   15d38:	orrs	sl, r4, r6
   15d3c:	mov	r2, r9
   15d40:	movt	r0, #2
   15d44:	ldr	r3, [r0]
   15d48:	bne	15d54 <__assert_fail@plt+0x4684>
   15d4c:	ldr	r0, [fp, #12]
   15d50:	ldr	r2, [r0]
   15d54:	mov	r0, r8
   15d58:	mov	r1, r7
   15d5c:	blx	r3
   15d60:	cmn	r0, #1
   15d64:	ble	15f58 <__assert_fail@plt+0x4888>
   15d68:	cmp	r0, #0
   15d6c:	beq	15e38 <__assert_fail@plt+0x4768>
   15d70:	cmp	r8, #0
   15d74:	bne	15df8 <__assert_fail@plt+0x4728>
   15d78:	movw	r1, #62208	; 0xf300
   15d7c:	movt	r1, #2
   15d80:	ldr	r2, [r1]
   15d84:	ldr	r1, [r1, #4]
   15d88:	subs	r3, r5, r2
   15d8c:	sbcs	r3, r5, r1
   15d90:	bge	15df8 <__assert_fail@plt+0x4728>
   15d94:	cmn	r1, #1
   15d98:	mov	r3, #0
   15d9c:	mov	r5, #0
   15da0:	movwgt	r3, #1
   15da4:	adds	r2, r2, r0
   15da8:	adc	r1, r1, r0, asr #31
   15dac:	asr	r0, r0, #31
   15db0:	cmn	r1, #1
   15db4:	movwgt	r5, #1
   15db8:	subs	r5, r3, r5
   15dbc:	movwne	r5, #1
   15dc0:	cmn	r0, #1
   15dc4:	mov	r0, #0
   15dc8:	movwgt	r0, #1
   15dcc:	sub	r0, r3, r0
   15dd0:	clz	r0, r0
   15dd4:	lsr	r0, r0, #5
   15dd8:	ands	r0, r0, r5
   15ddc:	movw	r0, #62208	; 0xf300
   15de0:	mvn	r5, #0
   15de4:	movt	r0, #2
   15de8:	movne	r2, r5
   15dec:	movne	r1, r5
   15df0:	str	r2, [r0]
   15df4:	str	r1, [r0, #4]
   15df8:	cmp	sl, #0
   15dfc:	beq	15e28 <__assert_fail@plt+0x4758>
   15e00:	subs	r4, r4, #1
   15e04:	sbc	r6, r6, #0
   15e08:	orrs	r0, r4, r6
   15e0c:	bne	15d34 <__assert_fail@plt+0x4664>
   15e10:	ldr	r0, [fp, #12]
   15e14:	ldr	r0, [r0]
   15e18:	cmp	r0, #0
   15e1c:	bne	15d34 <__assert_fail@plt+0x4664>
   15e20:	mov	r4, #0
   15e24:	b	15e34 <__assert_fail@plt+0x4764>
   15e28:	ldr	r0, [fp, #12]
   15e2c:	mov	r4, #0
   15e30:	str	r4, [r0]
   15e34:	mov	r6, #0
   15e38:	mov	r0, r4
   15e3c:	mov	r1, r6
   15e40:	sub	sp, fp, #28
   15e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e48:	cmp	r0, #0
   15e4c:	bne	16054 <__assert_fail@plt+0x4984>
   15e50:	ldr	r0, [sp, #32]
   15e54:	ldr	lr, [sp, #8]
   15e58:	and	r0, r0, #53248	; 0xd000
   15e5c:	orr	r0, r0, #8192	; 0x2000
   15e60:	cmp	r0, #40960	; 0xa000
   15e64:	movw	r0, #62208	; 0xf300
   15e68:	movt	r0, #2
   15e6c:	bne	15ed0 <__assert_fail@plt+0x4800>
   15e70:	ldr	r8, [r0]
   15e74:	ldr	r5, [r0, #4]
   15e78:	mvn	r1, #0
   15e7c:	subs	r0, r1, r8
   15e80:	sbcs	r0, r1, r5
   15e84:	bge	15e20 <__assert_fail@plt+0x4750>
   15e88:	ldr	r0, [sp, #64]	; 0x40
   15e8c:	ldr	r1, [sp, #68]	; 0x44
   15e90:	mov	r2, r9
   15e94:	mov	r4, #0
   15e98:	subs	r9, r0, r8
   15e9c:	sbc	sl, r1, r5
   15ea0:	subs	r3, r9, lr
   15ea4:	sbcs	r3, sl, r7
   15ea8:	bge	15ef4 <__assert_fail@plt+0x4824>
   15eac:	ldr	r3, [sp, #4]
   15eb0:	subs	r0, lr, r0
   15eb4:	sbc	r1, r7, r1
   15eb8:	bl	1c194 <__assert_fail@plt+0xaac4>
   15ebc:	mov	r4, r0
   15ec0:	mov	r6, r1
   15ec4:	mov	lr, r9
   15ec8:	mov	r7, sl
   15ecc:	b	15ef8 <__assert_fail@plt+0x4828>
   15ed0:	ldr	r8, [r0]
   15ed4:	ldr	r5, [r0, #4]
   15ed8:	mvn	ip, #0
   15edc:	mov	r4, #0
   15ee0:	mov	r6, #0
   15ee4:	subs	r0, ip, r8
   15ee8:	sbcs	r0, ip, r5
   15eec:	blt	15efc <__assert_fail@plt+0x482c>
   15ef0:	b	15e38 <__assert_fail@plt+0x4768>
   15ef4:	mov	r6, #0
   15ef8:	mvn	ip, #0
   15efc:	cmn	r5, #1
   15f00:	mov	r1, #0
   15f04:	mov	r0, #0
   15f08:	movwgt	r1, #1
   15f0c:	adds	r2, r8, lr
   15f10:	adc	r3, r5, r7
   15f14:	mov	r5, #0
   15f18:	cmn	r3, #1
   15f1c:	movwgt	r5, #1
   15f20:	subs	r5, r1, r5
   15f24:	movwne	r5, #1
   15f28:	cmn	r7, #1
   15f2c:	movwgt	r0, #1
   15f30:	sub	r0, r1, r0
   15f34:	clz	r0, r0
   15f38:	lsr	r0, r0, #5
   15f3c:	ands	r0, r0, r5
   15f40:	movw	r0, #62208	; 0xf300
   15f44:	movt	r0, #2
   15f48:	movne	r3, ip
   15f4c:	movne	r2, ip
   15f50:	strd	r2, [r0]
   15f54:	b	15e38 <__assert_fail@plt+0x4768>
   15f58:	cmp	r8, #0
   15f5c:	bne	15fbc <__assert_fail@plt+0x48ec>
   15f60:	ldr	r0, [sp, #8]
   15f64:	movw	r1, #55158	; 0xd776
   15f68:	mov	r2, #5
   15f6c:	movt	r1, #1
   15f70:	ldr	r4, [r0]
   15f74:	mov	r0, #0
   15f78:	bl	11424 <dcgettext@plt>
   15f7c:	ldr	r1, [sp, #12]
   15f80:	mov	r5, r0
   15f84:	mov	r0, #4
   15f88:	bl	19400 <__assert_fail@plt+0x7d30>
   15f8c:	mov	r3, r0
   15f90:	mov	r0, #0
   15f94:	mov	r1, r4
   15f98:	mov	r2, r5
   15f9c:	bl	14a64 <__assert_fail@plt+0x3394>
   15fa0:	movw	r0, #62228	; 0xf314
   15fa4:	movt	r0, #2
   15fa8:	ldrb	r0, [r0, #1]
   15fac:	tst	r0, #1
   15fb0:	beq	15ff8 <__assert_fail@plt+0x4928>
   15fb4:	bl	155c0 <__assert_fail@plt+0x3ef0>
   15fb8:	bl	16340 <__assert_fail@plt+0x4c70>
   15fbc:	movw	r1, #55208	; 0xd7a8
   15fc0:	mov	r0, #0
   15fc4:	mov	r2, #5
   15fc8:	movt	r1, #1
   15fcc:	bl	11424 <dcgettext@plt>
   15fd0:	ldr	r2, [sp, #12]
   15fd4:	mov	r4, r0
   15fd8:	mov	r0, #0
   15fdc:	mov	r1, #3
   15fe0:	bl	1967c <__assert_fail@plt+0x7fac>
   15fe4:	ldr	r1, [sp, #4]
   15fe8:	mov	r3, r0
   15fec:	mov	r0, #0
   15ff0:	mov	r2, r4
   15ff4:	bl	14a64 <__assert_fail@plt+0x3394>
   15ff8:	bl	16340 <__assert_fail@plt+0x4c70>
   15ffc:	movw	r0, #55192	; 0xd798
   16000:	movw	r1, #55208	; 0xd7a8
   16004:	cmp	r8, #0
   16008:	mov	r2, #5
   1600c:	movt	r0, #1
   16010:	movt	r1, #1
   16014:	moveq	r1, r0
   16018:	mov	r0, #0
   1601c:	bl	11424 <dcgettext@plt>
   16020:	ldr	r2, [sp, #12]
   16024:	mov	r4, r0
   16028:	mov	r0, #0
   1602c:	mov	r1, #3
   16030:	bl	1967c <__assert_fail@plt+0x7fac>
   16034:	ldr	r1, [sp, #4]
   16038:	mov	r3, r0
   1603c:	mov	r0, #0
   16040:	mov	r2, r4
   16044:	cmp	r1, #0
   16048:	movweq	r1, #75	; 0x4b
   1604c:	bl	14a64 <__assert_fail@plt+0x3394>
   16050:	bl	16340 <__assert_fail@plt+0x4c70>
   16054:	ldr	r4, [sl]
   16058:	b	15ca4 <__assert_fail@plt+0x45d4>
   1605c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16060:	add	fp, sp, #28
   16064:	sub	sp, sp, #20
   16068:	mov	r8, r0
   1606c:	movw	r0, #62224	; 0xf310
   16070:	movw	r7, #62228	; 0xf314
   16074:	mov	r4, r1
   16078:	movt	r0, #2
   1607c:	movt	r7, #2
   16080:	ldrb	r0, [r0, #2]
   16084:	tst	r0, #1
   16088:	beq	161e4 <__assert_fail@plt+0x4b14>
   1608c:	movw	r0, #62240	; 0xf320
   16090:	movt	r0, #2
   16094:	ldr	r0, [r0]
   16098:	cmp	r0, r4
   1609c:	ble	161e4 <__assert_fail@plt+0x4b14>
   160a0:	mov	r0, #1
   160a4:	mov	r1, #3
   160a8:	mov	r9, #1
   160ac:	bl	16ae8 <__assert_fail@plt+0x5418>
   160b0:	bic	r2, r0, #65536	; 0x10000
   160b4:	mov	r0, #1
   160b8:	mov	r1, #4
   160bc:	bl	16ae8 <__assert_fail@plt+0x5418>
   160c0:	cmp	r0, #0
   160c4:	beq	16128 <__assert_fail@plt+0x4a58>
   160c8:	movw	r0, #61776	; 0xf150
   160cc:	movt	r0, #2
   160d0:	ldr	r0, [r0]
   160d4:	cmp	r0, #1
   160d8:	beq	16128 <__assert_fail@plt+0x4a58>
   160dc:	bl	11598 <__errno_location@plt>
   160e0:	movw	r1, #55224	; 0xd7b8
   160e4:	ldr	r5, [r0]
   160e8:	mov	r0, #0
   160ec:	mov	r2, #5
   160f0:	movt	r1, #1
   160f4:	bl	11424 <dcgettext@plt>
   160f8:	mov	r6, r0
   160fc:	movw	r0, #62220	; 0xf30c
   16100:	mov	r1, #3
   16104:	movt	r0, #2
   16108:	ldr	r2, [r0]
   1610c:	mov	r0, #0
   16110:	bl	1967c <__assert_fail@plt+0x7fac>
   16114:	mov	r3, r0
   16118:	mov	r0, #0
   1611c:	mov	r1, r5
   16120:	mov	r2, r6
   16124:	bl	14a64 <__assert_fail@plt+0x3394>
   16128:	movw	r0, #62279	; 0xf347
   1612c:	movw	r6, #61792	; 0xf160
   16130:	movt	r0, #2
   16134:	movt	r6, #2
   16138:	strb	r9, [r0]
   1613c:	ldrd	r0, [r6]
   16140:	and	r2, r0, r1
   16144:	cmn	r2, #1
   16148:	beq	161d8 <__assert_fail@plt+0x4b08>
   1614c:	movw	r2, #62544	; 0xf450
   16150:	cmn	r1, #1
   16154:	movt	r2, #2
   16158:	ldr	r9, [r2]
   1615c:	ldr	r5, [r2, #4]
   16160:	bgt	16190 <__assert_fail@plt+0x4ac0>
   16164:	mov	r0, #1
   16168:	mov	r2, #0
   1616c:	mov	r3, #0
   16170:	mvn	sl, #0
   16174:	str	r0, [sp]
   16178:	mov	r0, #1
   1617c:	bl	11490 <lseek64@plt>
   16180:	subs	r2, sl, r0
   16184:	strd	r0, [r6]
   16188:	sbcs	r2, sl, r1
   1618c:	bge	161d8 <__assert_fail@plt+0x4b08>
   16190:	subs	r6, r0, r9
   16194:	movw	r0, #61920	; 0xf1e0
   16198:	movt	r0, #2
   1619c:	sbc	r5, r1, r5
   161a0:	mov	r1, r5
   161a4:	ldr	r2, [r0]
   161a8:	mov	r0, r6
   161ac:	asr	r3, r2, #31
   161b0:	bl	1c194 <__assert_fail@plt+0xaac4>
   161b4:	mov	r0, #4
   161b8:	subs	r2, r6, r2
   161bc:	mov	r1, #0
   161c0:	str	r0, [sp, #8]
   161c4:	sbc	r3, r5, r3
   161c8:	mov	r0, #1
   161cc:	str	r1, [sp]
   161d0:	str	r1, [sp, #4]
   161d4:	bl	11394 <posix_fadvise64@plt>
   161d8:	ldr	r0, [r7]
   161dc:	orr	r0, r0, #32768	; 0x8000
   161e0:	str	r0, [r7]
   161e4:	cmp	r4, #1
   161e8:	blt	162f8 <__assert_fail@plt+0x4c28>
   161ec:	movw	r5, #62524	; 0xf43c
   161f0:	asr	r0, r4, #31
   161f4:	sub	r9, r4, #1
   161f8:	mov	sl, #0
   161fc:	mov	r6, #0
   16200:	movt	r5, #2
   16204:	str	r0, [sp, #16]
   16208:	b	16224 <__assert_fail@plt+0x4b54>
   1620c:	bl	11598 <__errno_location@plt>
   16210:	ldr	r0, [r0]
   16214:	cmp	r0, #4
   16218:	bne	1630c <__assert_fail@plt+0x4c3c>
   1621c:	cmp	r6, r4
   16220:	bge	1630c <__assert_fail@plt+0x4c3c>
   16224:	bl	15414 <__assert_fail@plt+0x3d44>
   16228:	ldrb	r0, [r7, #2]
   1622c:	strb	sl, [r5]
   16230:	tst	r0, #1
   16234:	beq	1627c <__assert_fail@plt+0x4bac>
   16238:	mov	r0, #0
   1623c:	ldrb	r1, [r8, -r0]
   16240:	cmp	r1, #0
   16244:	bne	1627c <__assert_fail@plt+0x4bac>
   16248:	add	r1, r4, r0
   1624c:	cmp	r1, #1
   16250:	beq	162ac <__assert_fail@plt+0x4bdc>
   16254:	add	r1, r9, r0
   16258:	sub	r0, r0, #1
   1625c:	tst	r1, #15
   16260:	bne	1623c <__assert_fail@plt+0x4b6c>
   16264:	sub	r1, r8, r0
   16268:	add	r2, r4, r0
   1626c:	mov	r0, r8
   16270:	bl	11568 <bcmp@plt>
   16274:	cmp	r0, #0
   16278:	beq	162ac <__assert_fail@plt+0x4bdc>
   1627c:	add	r1, r8, r6
   16280:	sub	r2, r4, r6
   16284:	mov	r0, #1
   16288:	bl	115e0 <write@plt>
   1628c:	cmn	r0, #1
   16290:	ble	1620c <__assert_fail@plt+0x4b3c>
   16294:	cmp	r0, #0
   16298:	beq	16300 <__assert_fail@plt+0x4c30>
   1629c:	add	r6, r0, r6
   162a0:	cmp	r6, r4
   162a4:	blt	16224 <__assert_fail@plt+0x4b54>
   162a8:	b	1630c <__assert_fail@plt+0x4c3c>
   162ac:	ldr	r3, [sp, #16]
   162b0:	mov	sl, #1
   162b4:	mov	r0, #1
   162b8:	mov	r2, r4
   162bc:	str	sl, [sp]
   162c0:	bl	11490 <lseek64@plt>
   162c4:	cmn	r1, #1
   162c8:	ble	162e4 <__assert_fail@plt+0x4c14>
   162cc:	strb	sl, [r5]
   162d0:	mov	r0, r4
   162d4:	mov	sl, #0
   162d8:	cmn	r0, #1
   162dc:	bgt	16294 <__assert_fail@plt+0x4bc4>
   162e0:	b	1620c <__assert_fail@plt+0x4b3c>
   162e4:	ldr	r0, [r7]
   162e8:	mov	sl, #0
   162ec:	bic	r0, r0, #65536	; 0x10000
   162f0:	str	r0, [r7]
   162f4:	b	1627c <__assert_fail@plt+0x4bac>
   162f8:	mov	r6, #0
   162fc:	b	16334 <__assert_fail@plt+0x4c64>
   16300:	bl	11598 <__errno_location@plt>
   16304:	mov	r1, #28
   16308:	str	r1, [r0]
   1630c:	cmp	r6, #0
   16310:	beq	16334 <__assert_fail@plt+0x4c64>
   16314:	movw	r0, #62277	; 0xf345
   16318:	movt	r0, #2
   1631c:	ldrb	r0, [r0]
   16320:	cmp	r0, #0
   16324:	asrne	r3, r6, #31
   16328:	movne	r0, #1
   1632c:	movne	r2, r6
   16330:	blne	14c44 <__assert_fail@plt+0x3574>
   16334:	mov	r0, r6
   16338:	sub	sp, fp, #28
   1633c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16340:	push	{fp, lr}
   16344:	mov	fp, sp
   16348:	bl	14ed8 <__assert_fail@plt+0x3808>
   1634c:	mov	r0, #1
   16350:	bl	1155c <exit@plt>
   16354:	push	{r4, r5, r6, sl, fp, lr}
   16358:	add	fp, sp, #16
   1635c:	sub	sp, sp, #672	; 0x2a0
   16360:	movw	r4, #62512	; 0xf430
   16364:	movt	r4, #2
   16368:	ldr	r0, [r4]
   1636c:	cmp	r0, #0
   16370:	bne	163b0 <__assert_fail@plt+0x4ce0>
   16374:	movw	r1, #62228	; 0xf314
   16378:	movw	r5, #62416	; 0xf3d0
   1637c:	movt	r1, #2
   16380:	movt	r5, #2
   16384:	ldr	r1, [r1]
   16388:	ldr	r0, [r5]
   1638c:	ubfx	r1, r1, #7, #1
   16390:	add	r1, r0, r1
   16394:	movw	r0, #61920	; 0xf1e0
   16398:	movt	r0, #2
   1639c:	ldr	r0, [r0]
   163a0:	bl	1167c <aligned_alloc@plt>
   163a4:	cmp	r0, #0
   163a8:	str	r0, [r4]
   163ac:	beq	163b8 <__assert_fail@plt+0x4ce8>
   163b0:	sub	sp, fp, #16
   163b4:	pop	{r4, r5, r6, sl, fp, pc}
   163b8:	movw	r1, #55256	; 0xd7d8
   163bc:	mov	r0, #0
   163c0:	mov	r2, #5
   163c4:	mov	r6, #0
   163c8:	movt	r1, #1
   163cc:	bl	11424 <dcgettext@plt>
   163d0:	ldr	r5, [r5]
   163d4:	mov	r4, r0
   163d8:	mov	r0, #1
   163dc:	add	r2, sp, #20
   163e0:	movw	r3, #497	; 0x1f1
   163e4:	stm	sp, {r0, r6}
   163e8:	str	r0, [sp, #8]
   163ec:	str	r6, [sp, #12]
   163f0:	asr	r1, r5, #31
   163f4:	mov	r0, r5
   163f8:	bl	16ea8 <__assert_fail@plt+0x57d8>
   163fc:	str	r0, [sp]
   16400:	mov	r0, #1
   16404:	mov	r1, #0
   16408:	mov	r2, r4
   1640c:	mov	r3, r5
   16410:	bl	14a64 <__assert_fail@plt+0x3394>
   16414:	push	{r4, r5, r6, sl, fp, lr}
   16418:	add	fp, sp, #16
   1641c:	sub	sp, sp, #672	; 0x2a0
   16420:	movw	r4, #62508	; 0xf42c
   16424:	movt	r4, #2
   16428:	ldr	r0, [r4]
   1642c:	cmp	r0, #0
   16430:	bne	1648c <__assert_fail@plt+0x4dbc>
   16434:	movw	r0, #62228	; 0xf314
   16438:	movt	r0, #2
   1643c:	ldrb	r0, [r0, #1]
   16440:	tst	r0, #8
   16444:	bne	16464 <__assert_fail@plt+0x4d94>
   16448:	bl	16354 <__assert_fail@plt+0x4c84>
   1644c:	movw	r0, #62512	; 0xf430
   16450:	movt	r0, #2
   16454:	ldr	r0, [r0]
   16458:	str	r0, [r4]
   1645c:	sub	sp, fp, #16
   16460:	pop	{r4, r5, r6, sl, fp, pc}
   16464:	movw	r5, #62240	; 0xf320
   16468:	movw	r0, #61920	; 0xf1e0
   1646c:	movt	r0, #2
   16470:	movt	r5, #2
   16474:	ldr	r1, [r5]
   16478:	ldr	r0, [r0]
   1647c:	bl	1167c <aligned_alloc@plt>
   16480:	cmp	r0, #0
   16484:	str	r0, [r4]
   16488:	beq	16494 <__assert_fail@plt+0x4dc4>
   1648c:	sub	sp, fp, #16
   16490:	pop	{r4, r5, r6, sl, fp, pc}
   16494:	movw	r1, #55312	; 0xd810
   16498:	mov	r0, #0
   1649c:	mov	r2, #5
   164a0:	mov	r6, #0
   164a4:	movt	r1, #1
   164a8:	bl	11424 <dcgettext@plt>
   164ac:	ldr	r5, [r5]
   164b0:	mov	r4, r0
   164b4:	mov	r0, #1
   164b8:	add	r2, sp, #20
   164bc:	movw	r3, #497	; 0x1f1
   164c0:	stm	sp, {r0, r6}
   164c4:	str	r0, [sp, #8]
   164c8:	str	r6, [sp, #12]
   164cc:	asr	r1, r5, #31
   164d0:	mov	r0, r5
   164d4:	bl	16ea8 <__assert_fail@plt+0x57d8>
   164d8:	str	r0, [sp]
   164dc:	mov	r0, #1
   164e0:	mov	r1, #0
   164e4:	mov	r2, r4
   164e8:	mov	r3, r5
   164ec:	bl	14a64 <__assert_fail@plt+0x3394>
   164f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164f4:	add	fp, sp, #28
   164f8:	sub	sp, sp, #4
   164fc:	cmp	r1, #0
   16500:	beq	16644 <__assert_fail@plt+0x4f74>
   16504:	movw	r3, #62520	; 0xf438
   16508:	movw	r7, #62420	; 0xf3d4
   1650c:	movw	r6, #62516	; 0xf434
   16510:	movw	r9, #62508	; 0xf42c
   16514:	movw	sl, #62240	; 0xf320
   16518:	mov	r4, r1
   1651c:	mov	r5, r0
   16520:	movt	r3, #2
   16524:	movt	r7, #2
   16528:	movt	r6, #2
   1652c:	movt	r9, #2
   16530:	movt	sl, #2
   16534:	ldr	r8, [r3]
   16538:	b	1656c <__assert_fail@plt+0x4e9c>
   1653c:	movw	r0, #62488	; 0xf418
   16540:	movt	r0, #2
   16544:	mov	r2, r0
   16548:	ldrd	r0, [r0]
   1654c:	adds	r0, r0, #1
   16550:	adc	r1, r1, #0
   16554:	strd	r0, [r2]
   16558:	add	r8, r8, #1
   1655c:	add	r5, r5, #1
   16560:	subs	r4, r4, #1
   16564:	str	r8, [r3]
   16568:	beq	16644 <__assert_fail@plt+0x4f74>
   1656c:	movw	r0, #62505	; 0xf429
   16570:	ldr	r1, [r7]
   16574:	mov	r2, #10
   16578:	movt	r0, #2
   1657c:	ldrb	r0, [r0]
   16580:	cmp	r0, #0
   16584:	ldrb	r0, [r5]
   16588:	movwne	r2, #37	; 0x25
   1658c:	cmp	r2, r0
   16590:	bne	165f4 <__assert_fail@plt+0x4f24>
   16594:	cmp	r8, r1
   16598:	bge	1663c <__assert_fail@plt+0x4f6c>
   1659c:	movw	r2, #62506	; 0xf42a
   165a0:	ldr	r0, [r6]
   165a4:	ldr	r3, [r9]
   165a8:	movt	r2, #2
   165ac:	ldrb	r2, [r2]
   165b0:	add	r1, r0, #1
   165b4:	str	r1, [r6]
   165b8:	cmp	r2, #0
   165bc:	mov	r2, #32
   165c0:	movwne	r2, #64	; 0x40
   165c4:	strb	r2, [r3, r0]
   165c8:	ldr	r0, [sl]
   165cc:	cmp	r1, r0
   165d0:	blge	167dc <__assert_fail@plt+0x510c>
   165d4:	ldr	r0, [r7]
   165d8:	add	r8, r8, #1
   165dc:	cmp	r8, r0
   165e0:	blt	1659c <__assert_fail@plt+0x4ecc>
   165e4:	movw	r3, #62520	; 0xf438
   165e8:	mov	r8, #0
   165ec:	movt	r3, #2
   165f0:	b	1655c <__assert_fail@plt+0x4e8c>
   165f4:	cmp	r8, r1
   165f8:	beq	1653c <__assert_fail@plt+0x4e6c>
   165fc:	bge	16558 <__assert_fail@plt+0x4e88>
   16600:	ldr	r1, [r6]
   16604:	ldr	r3, [r9]
   16608:	add	r2, r1, #1
   1660c:	str	r2, [r6]
   16610:	strb	r0, [r3, r1]
   16614:	movw	r3, #62520	; 0xf438
   16618:	ldr	r0, [sl]
   1661c:	movt	r3, #2
   16620:	cmp	r2, r0
   16624:	blt	16558 <__assert_fail@plt+0x4e88>
   16628:	bl	167dc <__assert_fail@plt+0x510c>
   1662c:	movw	r3, #62520	; 0xf438
   16630:	movt	r3, #2
   16634:	ldr	r8, [r3]
   16638:	b	16558 <__assert_fail@plt+0x4e88>
   1663c:	mov	r8, #0
   16640:	b	1655c <__assert_fail@plt+0x4e8c>
   16644:	sub	sp, fp, #28
   16648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1664c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16650:	add	fp, sp, #28
   16654:	sub	sp, sp, #12
   16658:	cmp	r1, #1
   1665c:	str	r0, [sp, #8]
   16660:	blt	167d4 <__assert_fail@plt+0x5104>
   16664:	movw	r3, #62520	; 0xf438
   16668:	movw	r5, #62528	; 0xf440
   1666c:	movw	r8, #62516	; 0xf434
   16670:	movw	r9, #62508	; 0xf42c
   16674:	movw	sl, #62240	; 0xf320
   16678:	mov	r6, r1
   1667c:	mov	r4, #0
   16680:	str	r1, [sp, #4]
   16684:	movt	r3, #2
   16688:	movt	r5, #2
   1668c:	movt	r8, #2
   16690:	movt	r9, #2
   16694:	movt	sl, #2
   16698:	b	166d4 <__assert_fail@plt+0x5004>
   1669c:	ldr	r0, [r8]
   166a0:	ldr	r2, [r9]
   166a4:	add	r1, r0, #1
   166a8:	str	r1, [r8]
   166ac:	strb	r7, [r2, r0]
   166b0:	ldr	r0, [sl]
   166b4:	cmp	r1, r0
   166b8:	blge	167dc <__assert_fail@plt+0x510c>
   166bc:	ldr	r6, [sp, #4]
   166c0:	movw	r3, #62520	; 0xf438
   166c4:	movt	r3, #2
   166c8:	add	r4, r4, #1
   166cc:	cmp	r4, r6
   166d0:	bge	167d4 <__assert_fail@plt+0x5104>
   166d4:	ldr	r0, [sp, #8]
   166d8:	ldrb	r7, [r0, r4]
   166dc:	ldr	r0, [r3]
   166e0:	add	r1, r0, #1
   166e4:	str	r1, [r3]
   166e8:	movw	r1, #62420	; 0xf3d4
   166ec:	movt	r1, #2
   166f0:	ldr	r1, [r1]
   166f4:	cmp	r0, r1
   166f8:	bge	1672c <__assert_fail@plt+0x505c>
   166fc:	movw	r0, #62506	; 0xf42a
   16700:	mov	r2, #32
   16704:	movt	r0, #2
   16708:	ldrb	r1, [r0]
   1670c:	ldr	r0, [r5]
   16710:	cmp	r1, #0
   16714:	movwne	r2, #64	; 0x40
   16718:	cmp	r2, r7
   1671c:	bne	1677c <__assert_fail@plt+0x50ac>
   16720:	add	r0, r0, #1
   16724:	str	r0, [r5]
   16728:	b	166c8 <__assert_fail@plt+0x4ff8>
   1672c:	movw	r2, #62505	; 0xf429
   16730:	mov	r0, #0
   16734:	sub	r4, r4, #1
   16738:	movt	r2, #2
   1673c:	str	r0, [r3]
   16740:	str	r0, [r5]
   16744:	ldr	r0, [r8]
   16748:	ldr	r3, [r9]
   1674c:	ldrb	r2, [r2]
   16750:	add	r1, r0, #1
   16754:	str	r1, [r8]
   16758:	cmp	r2, #0
   1675c:	mov	r2, #10
   16760:	movwne	r2, #37	; 0x25
   16764:	strb	r2, [r3, r0]
   16768:	ldr	r0, [sl]
   1676c:	cmp	r1, r0
   16770:	blt	166c0 <__assert_fail@plt+0x4ff0>
   16774:	bl	167dc <__assert_fail@plt+0x510c>
   16778:	b	166c0 <__assert_fail@plt+0x4ff0>
   1677c:	cmp	r0, #0
   16780:	beq	1669c <__assert_fail@plt+0x4fcc>
   16784:	ldr	r2, [r8]
   16788:	ldr	r6, [r9]
   1678c:	tst	r1, #1
   16790:	mov	r1, #32
   16794:	movwne	r1, #64	; 0x40
   16798:	add	r3, r2, #1
   1679c:	str	r3, [r8]
   167a0:	strb	r1, [r6, r2]
   167a4:	ldr	r1, [sl]
   167a8:	cmp	r3, r1
   167ac:	blt	167b8 <__assert_fail@plt+0x50e8>
   167b0:	bl	167dc <__assert_fail@plt+0x510c>
   167b4:	ldr	r0, [r5]
   167b8:	subs	r0, r0, #1
   167bc:	str	r0, [r5]
   167c0:	beq	1669c <__assert_fail@plt+0x4fcc>
   167c4:	movw	r1, #62506	; 0xf42a
   167c8:	movt	r1, #2
   167cc:	ldrb	r1, [r1]
   167d0:	b	16784 <__assert_fail@plt+0x50b4>
   167d4:	sub	sp, fp, #28
   167d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167dc:	push	{r4, r5, r6, sl, fp, lr}
   167e0:	add	fp, sp, #16
   167e4:	movw	r5, #62240	; 0xf320
   167e8:	movw	r0, #62508	; 0xf42c
   167ec:	movt	r0, #2
   167f0:	movt	r5, #2
   167f4:	ldr	r1, [r5]
   167f8:	ldr	r0, [r0]
   167fc:	bl	1605c <__assert_fail@plt+0x498c>
   16800:	mov	r4, r0
   16804:	movw	r0, #62496	; 0xf420
   16808:	movt	r0, #2
   1680c:	ldrd	r2, [r0]
   16810:	adds	r2, r2, r4
   16814:	adc	r3, r3, r4, asr #31
   16818:	strd	r2, [r0]
   1681c:	ldr	r0, [r5]
   16820:	cmp	r4, r0
   16824:	bne	16854 <__assert_fail@plt+0x5184>
   16828:	movw	r0, #62516	; 0xf434
   1682c:	mov	r1, #0
   16830:	movt	r0, #2
   16834:	str	r1, [r0]
   16838:	movw	r0, #62472	; 0xf408
   1683c:	movt	r0, #2
   16840:	ldrd	r2, [r0]
   16844:	adds	r2, r2, #1
   16848:	adc	r3, r3, #0
   1684c:	strd	r2, [r0]
   16850:	pop	{r4, r5, r6, sl, fp, pc}
   16854:	bl	11598 <__errno_location@plt>
   16858:	movw	r1, #55144	; 0xd768
   1685c:	ldr	r5, [r0]
   16860:	mov	r0, #0
   16864:	mov	r2, #5
   16868:	movt	r1, #1
   1686c:	bl	11424 <dcgettext@plt>
   16870:	mov	r6, r0
   16874:	movw	r0, #62220	; 0xf30c
   16878:	movt	r0, #2
   1687c:	ldr	r1, [r0]
   16880:	mov	r0, #4
   16884:	bl	19400 <__assert_fail@plt+0x7d30>
   16888:	mov	r3, r0
   1688c:	mov	r0, #0
   16890:	mov	r1, r5
   16894:	mov	r2, r6
   16898:	bl	14a64 <__assert_fail@plt+0x3394>
   1689c:	cmp	r4, #0
   168a0:	beq	168bc <__assert_fail@plt+0x51ec>
   168a4:	movw	r0, #62480	; 0xf410
   168a8:	movt	r0, #2
   168ac:	ldrd	r2, [r0]
   168b0:	adds	r2, r2, #1
   168b4:	adc	r3, r3, #0
   168b8:	strd	r2, [r0]
   168bc:	bl	16340 <__assert_fail@plt+0x4c70>
   168c0:	push	{r4, r5, r6, sl, fp, lr}
   168c4:	add	fp, sp, #16
   168c8:	mov	r4, r0
   168cc:	bl	114a8 <__fpending@plt>
   168d0:	ldr	r6, [r4]
   168d4:	mov	r5, r0
   168d8:	mov	r0, r4
   168dc:	bl	16a4c <__assert_fail@plt+0x537c>
   168e0:	tst	r6, #32
   168e4:	bne	1691c <__assert_fail@plt+0x524c>
   168e8:	cmp	r0, #0
   168ec:	mov	r4, r0
   168f0:	mvnne	r4, #0
   168f4:	cmp	r5, #0
   168f8:	bne	16928 <__assert_fail@plt+0x5258>
   168fc:	cmp	r0, #0
   16900:	beq	16928 <__assert_fail@plt+0x5258>
   16904:	bl	11598 <__errno_location@plt>
   16908:	ldr	r0, [r0]
   1690c:	subs	r4, r0, #9
   16910:	mvnne	r4, #0
   16914:	mov	r0, r4
   16918:	pop	{r4, r5, r6, sl, fp, pc}
   1691c:	mvn	r4, #0
   16920:	cmp	r0, #0
   16924:	beq	16930 <__assert_fail@plt+0x5260>
   16928:	mov	r0, r4
   1692c:	pop	{r4, r5, r6, sl, fp, pc}
   16930:	bl	11598 <__errno_location@plt>
   16934:	mov	r1, #0
   16938:	str	r1, [r0]
   1693c:	mov	r0, r4
   16940:	pop	{r4, r5, r6, sl, fp, pc}
   16944:	movw	r1, #62552	; 0xf458
   16948:	movt	r1, #2
   1694c:	str	r0, [r1]
   16950:	bx	lr
   16954:	movw	r1, #62556	; 0xf45c
   16958:	movt	r1, #2
   1695c:	strb	r0, [r1]
   16960:	bx	lr
   16964:	push	{r4, r5, r6, sl, fp, lr}
   16968:	add	fp, sp, #16
   1696c:	sub	sp, sp, #8
   16970:	movw	r0, #61908	; 0xf1d4
   16974:	movt	r0, #2
   16978:	ldr	r0, [r0]
   1697c:	bl	168c0 <__assert_fail@plt+0x51f0>
   16980:	cmp	r0, #0
   16984:	beq	169ac <__assert_fail@plt+0x52dc>
   16988:	movw	r0, #62556	; 0xf45c
   1698c:	movt	r0, #2
   16990:	ldrb	r0, [r0]
   16994:	cmp	r0, #0
   16998:	beq	169cc <__assert_fail@plt+0x52fc>
   1699c:	bl	11598 <__errno_location@plt>
   169a0:	ldr	r0, [r0]
   169a4:	cmp	r0, #32
   169a8:	bne	169cc <__assert_fail@plt+0x52fc>
   169ac:	movw	r0, #61904	; 0xf1d0
   169b0:	movt	r0, #2
   169b4:	ldr	r0, [r0]
   169b8:	bl	168c0 <__assert_fail@plt+0x51f0>
   169bc:	cmp	r0, #0
   169c0:	subeq	sp, fp, #16
   169c4:	popeq	{r4, r5, r6, sl, fp, pc}
   169c8:	b	16a3c <__assert_fail@plt+0x536c>
   169cc:	movw	r1, #57023	; 0xdebf
   169d0:	mov	r0, #0
   169d4:	mov	r2, #5
   169d8:	movt	r1, #1
   169dc:	bl	11424 <dcgettext@plt>
   169e0:	mov	r4, r0
   169e4:	movw	r0, #62552	; 0xf458
   169e8:	movt	r0, #2
   169ec:	ldr	r6, [r0]
   169f0:	bl	11598 <__errno_location@plt>
   169f4:	ldr	r5, [r0]
   169f8:	cmp	r6, #0
   169fc:	bne	16a18 <__assert_fail@plt+0x5348>
   16a00:	movw	r2, #55080	; 0xd728
   16a04:	mov	r0, #0
   16a08:	mov	r1, r5
   16a0c:	mov	r3, r4
   16a10:	movt	r2, #1
   16a14:	b	16a38 <__assert_fail@plt+0x5368>
   16a18:	mov	r0, r6
   16a1c:	bl	195a0 <__assert_fail@plt+0x7ed0>
   16a20:	movw	r2, #54375	; 0xd467
   16a24:	mov	r3, r0
   16a28:	str	r4, [sp]
   16a2c:	mov	r0, #0
   16a30:	mov	r1, r5
   16a34:	movt	r2, #1
   16a38:	bl	114c0 <error@plt>
   16a3c:	movw	r0, #61804	; 0xf16c
   16a40:	movt	r0, #2
   16a44:	ldr	r0, [r0]
   16a48:	bl	113e8 <_exit@plt>
   16a4c:	push	{r4, r5, r6, sl, fp, lr}
   16a50:	add	fp, sp, #16
   16a54:	sub	sp, sp, #8
   16a58:	mov	r4, r0
   16a5c:	bl	115ec <fileno@plt>
   16a60:	cmn	r0, #1
   16a64:	ble	16ad8 <__assert_fail@plt+0x5408>
   16a68:	mov	r0, r4
   16a6c:	bl	11514 <__freading@plt>
   16a70:	cmp	r0, #0
   16a74:	beq	16aa0 <__assert_fail@plt+0x53d0>
   16a78:	mov	r0, r4
   16a7c:	bl	115ec <fileno@plt>
   16a80:	mov	r1, #1
   16a84:	mov	r2, #0
   16a88:	mov	r3, #0
   16a8c:	str	r1, [sp]
   16a90:	bl	11490 <lseek64@plt>
   16a94:	and	r0, r0, r1
   16a98:	cmn	r0, #1
   16a9c:	beq	16ad8 <__assert_fail@plt+0x5408>
   16aa0:	mov	r0, r4
   16aa4:	bl	16d30 <__assert_fail@plt+0x5660>
   16aa8:	cmp	r0, #0
   16aac:	beq	16ad8 <__assert_fail@plt+0x5408>
   16ab0:	bl	11598 <__errno_location@plt>
   16ab4:	ldr	r6, [r0]
   16ab8:	mov	r5, r0
   16abc:	mov	r0, r4
   16ac0:	bl	11604 <fclose@plt>
   16ac4:	cmp	r6, #0
   16ac8:	strne	r6, [r5]
   16acc:	mvnne	r0, #0
   16ad0:	sub	sp, fp, #16
   16ad4:	pop	{r4, r5, r6, sl, fp, pc}
   16ad8:	mov	r0, r4
   16adc:	sub	sp, fp, #16
   16ae0:	pop	{r4, r5, r6, sl, fp, lr}
   16ae4:	b	11604 <fclose@plt>
   16ae8:	sub	sp, sp, #8
   16aec:	push	{r4, r5, r6, r7, fp, lr}
   16af0:	add	fp, sp, #16
   16af4:	sub	sp, sp, #8
   16af8:	mov	r5, r0
   16afc:	add	r0, fp, #8
   16b00:	cmp	r1, #11
   16b04:	str	r2, [fp, #8]
   16b08:	str	r3, [fp, #12]
   16b0c:	str	r0, [sp, #4]
   16b10:	bhi	16b4c <__assert_fail@plt+0x547c>
   16b14:	mov	r0, #1
   16b18:	movw	r2, #1300	; 0x514
   16b1c:	tst	r2, r0, lsl r1
   16b20:	bne	16c0c <__assert_fail@plt+0x553c>
   16b24:	movw	r2, #2570	; 0xa0a
   16b28:	tst	r2, r0, lsl r1
   16b2c:	bne	16b74 <__assert_fail@plt+0x54a4>
   16b30:	cmp	r1, #0
   16b34:	bne	16b4c <__assert_fail@plt+0x547c>
   16b38:	ldr	r0, [sp, #4]
   16b3c:	add	r1, r0, #4
   16b40:	str	r1, [sp, #4]
   16b44:	mov	r1, #0
   16b48:	b	16c18 <__assert_fail@plt+0x5548>
   16b4c:	sub	r0, r1, #1024	; 0x400
   16b50:	cmp	r0, #10
   16b54:	bhi	16c0c <__assert_fail@plt+0x553c>
   16b58:	mov	r2, #1
   16b5c:	movw	r3, #645	; 0x285
   16b60:	tst	r3, r2, lsl r0
   16b64:	bne	16c0c <__assert_fail@plt+0x553c>
   16b68:	movw	r3, #1282	; 0x502
   16b6c:	tst	r3, r2, lsl r0
   16b70:	beq	16b80 <__assert_fail@plt+0x54b0>
   16b74:	mov	r0, r5
   16b78:	bl	1161c <fcntl64@plt>
   16b7c:	b	16c24 <__assert_fail@plt+0x5554>
   16b80:	cmp	r0, #6
   16b84:	bne	16c0c <__assert_fail@plt+0x553c>
   16b88:	ldr	r0, [sp, #4]
   16b8c:	movw	r7, #62560	; 0xf460
   16b90:	movt	r7, #2
   16b94:	add	r1, r0, #4
   16b98:	str	r1, [sp, #4]
   16b9c:	ldr	r6, [r0]
   16ba0:	ldr	r0, [r7]
   16ba4:	cmp	r0, #0
   16ba8:	bmi	16c48 <__assert_fail@plt+0x5578>
   16bac:	mov	r0, r5
   16bb0:	movw	r1, #1030	; 0x406
   16bb4:	mov	r2, r6
   16bb8:	bl	1161c <fcntl64@plt>
   16bbc:	mov	r4, r0
   16bc0:	cmn	r0, #1
   16bc4:	bgt	16c3c <__assert_fail@plt+0x556c>
   16bc8:	bl	11598 <__errno_location@plt>
   16bcc:	ldr	r0, [r0]
   16bd0:	cmp	r0, #22
   16bd4:	bne	16c3c <__assert_fail@plt+0x556c>
   16bd8:	mov	r0, r5
   16bdc:	mov	r1, #0
   16be0:	mov	r2, r6
   16be4:	bl	1161c <fcntl64@plt>
   16be8:	mov	r4, r0
   16bec:	cmp	r0, #0
   16bf0:	bmi	16c28 <__assert_fail@plt+0x5558>
   16bf4:	mvn	r0, #0
   16bf8:	str	r0, [r7]
   16bfc:	mov	r0, #1
   16c00:	cmp	r0, #0
   16c04:	bne	16c74 <__assert_fail@plt+0x55a4>
   16c08:	b	16c28 <__assert_fail@plt+0x5558>
   16c0c:	ldr	r0, [sp, #4]
   16c10:	add	r2, r0, #4
   16c14:	str	r2, [sp, #4]
   16c18:	ldr	r2, [r0]
   16c1c:	mov	r0, r5
   16c20:	bl	1161c <fcntl64@plt>
   16c24:	mov	r4, r0
   16c28:	mov	r0, r4
   16c2c:	sub	sp, fp, #16
   16c30:	pop	{r4, r5, r6, r7, fp, lr}
   16c34:	add	sp, sp, #8
   16c38:	bx	lr
   16c3c:	mov	r0, #1
   16c40:	str	r0, [r7]
   16c44:	b	16c28 <__assert_fail@plt+0x5558>
   16c48:	mov	r0, r5
   16c4c:	mov	r1, #0
   16c50:	mov	r2, r6
   16c54:	bl	1161c <fcntl64@plt>
   16c58:	mov	r4, r0
   16c5c:	ldr	r0, [r7]
   16c60:	add	r0, r0, #1
   16c64:	clz	r0, r0
   16c68:	lsr	r0, r0, #5
   16c6c:	cmp	r0, #0
   16c70:	beq	16c28 <__assert_fail@plt+0x5558>
   16c74:	cmp	r4, #0
   16c78:	bmi	16c28 <__assert_fail@plt+0x5558>
   16c7c:	mov	r0, r4
   16c80:	mov	r1, #1
   16c84:	bl	1161c <fcntl64@plt>
   16c88:	cmp	r0, #0
   16c8c:	bmi	16ca8 <__assert_fail@plt+0x55d8>
   16c90:	orr	r2, r0, #1
   16c94:	mov	r0, r4
   16c98:	mov	r1, #2
   16c9c:	bl	1161c <fcntl64@plt>
   16ca0:	cmn	r0, #1
   16ca4:	bne	16c28 <__assert_fail@plt+0x5558>
   16ca8:	bl	11598 <__errno_location@plt>
   16cac:	ldr	r6, [r0]
   16cb0:	mov	r5, r0
   16cb4:	mov	r0, r4
   16cb8:	bl	116ac <close@plt>
   16cbc:	str	r6, [r5]
   16cc0:	mvn	r4, #0
   16cc4:	b	16c28 <__assert_fail@plt+0x5558>
   16cc8:	push	{r4, r5, r6, r7, fp, lr}
   16ccc:	add	fp, sp, #16
   16cd0:	mov	r5, r0
   16cd4:	mov	r0, r1
   16cd8:	mov	r1, r2
   16cdc:	mov	r2, r3
   16ce0:	bl	114cc <open64@plt>
   16ce4:	mov	r4, r0
   16ce8:	cmp	r0, r5
   16cec:	beq	16d28 <__assert_fail@plt+0x5658>
   16cf0:	cmp	r4, #0
   16cf4:	bmi	16d28 <__assert_fail@plt+0x5658>
   16cf8:	mov	r0, r4
   16cfc:	mov	r1, r5
   16d00:	bl	11430 <dup2@plt>
   16d04:	mov	r5, r0
   16d08:	bl	11598 <__errno_location@plt>
   16d0c:	ldr	r7, [r0]
   16d10:	mov	r6, r0
   16d14:	mov	r0, r4
   16d18:	bl	116ac <close@plt>
   16d1c:	mov	r0, r5
   16d20:	str	r7, [r6]
   16d24:	pop	{r4, r5, r6, r7, fp, pc}
   16d28:	mov	r0, r4
   16d2c:	pop	{r4, r5, r6, r7, fp, pc}
   16d30:	push	{r4, sl, fp, lr}
   16d34:	add	fp, sp, #8
   16d38:	sub	sp, sp, #8
   16d3c:	mov	r4, r0
   16d40:	cmp	r0, #0
   16d44:	beq	16d7c <__assert_fail@plt+0x56ac>
   16d48:	mov	r0, r4
   16d4c:	bl	11514 <__freading@plt>
   16d50:	cmp	r0, #0
   16d54:	beq	16d7c <__assert_fail@plt+0x56ac>
   16d58:	ldrb	r0, [r4, #1]
   16d5c:	tst	r0, #1
   16d60:	beq	16d7c <__assert_fail@plt+0x56ac>
   16d64:	mov	r0, #1
   16d68:	mov	r2, #0
   16d6c:	mov	r3, #0
   16d70:	str	r0, [sp]
   16d74:	mov	r0, r4
   16d78:	bl	16d8c <__assert_fail@plt+0x56bc>
   16d7c:	mov	r0, r4
   16d80:	sub	sp, fp, #8
   16d84:	pop	{r4, sl, fp, lr}
   16d88:	b	113ac <fflush@plt>
   16d8c:	push	{r4, r5, r6, r7, fp, lr}
   16d90:	add	fp, sp, #16
   16d94:	sub	sp, sp, #8
   16d98:	mov	r4, r0
   16d9c:	ldr	r0, [r0, #4]
   16da0:	mov	r5, r3
   16da4:	mov	r6, r2
   16da8:	ldr	r1, [r4, #8]
   16dac:	cmp	r1, r0
   16db0:	bne	16dcc <__assert_fail@plt+0x56fc>
   16db4:	ldrd	r0, [r4, #16]
   16db8:	cmp	r1, r0
   16dbc:	bne	16dcc <__assert_fail@plt+0x56fc>
   16dc0:	ldr	r0, [r4, #36]	; 0x24
   16dc4:	cmp	r0, #0
   16dc8:	beq	16de4 <__assert_fail@plt+0x5714>
   16dcc:	mov	r0, r4
   16dd0:	mov	r2, r6
   16dd4:	mov	r3, r5
   16dd8:	sub	sp, fp, #16
   16ddc:	pop	{r4, r5, r6, r7, fp, lr}
   16de0:	b	11610 <fseeko64@plt>
   16de4:	ldr	r7, [fp, #8]
   16de8:	mov	r0, r4
   16dec:	bl	115ec <fileno@plt>
   16df0:	mov	r2, r6
   16df4:	mov	r3, r5
   16df8:	str	r7, [sp]
   16dfc:	bl	11490 <lseek64@plt>
   16e00:	and	r2, r0, r1
   16e04:	cmn	r2, #1
   16e08:	beq	16e28 <__assert_fail@plt+0x5758>
   16e0c:	strd	r0, [r4, #80]	; 0x50
   16e10:	ldr	r0, [r4]
   16e14:	bic	r0, r0, #16
   16e18:	str	r0, [r4]
   16e1c:	mov	r0, #0
   16e20:	sub	sp, fp, #16
   16e24:	pop	{r4, r5, r6, r7, fp, pc}
   16e28:	mvn	r0, #0
   16e2c:	sub	sp, fp, #16
   16e30:	pop	{r4, r5, r6, r7, fp, pc}
   16e34:	push	{r4, sl, fp, lr}
   16e38:	add	fp, sp, #8
   16e3c:	sub	sp, sp, #8
   16e40:	mov	r4, sp
   16e44:	mov	r0, #1
   16e48:	mov	r1, r4
   16e4c:	bl	113dc <clock_gettime@plt>
   16e50:	cmp	r0, #0
   16e54:	beq	16e64 <__assert_fail@plt+0x5794>
   16e58:	mov	r4, sp
   16e5c:	mov	r0, r4
   16e60:	bl	16e84 <__assert_fail@plt+0x57b4>
   16e64:	ldr	r0, [r4, #4]
   16e68:	ldr	r2, [r4]
   16e6c:	movw	r3, #51712	; 0xca00
   16e70:	movt	r3, #15258	; 0x3b9a
   16e74:	asr	r1, r0, #31
   16e78:	smlal	r0, r1, r2, r3
   16e7c:	sub	sp, fp, #8
   16e80:	pop	{r4, sl, fp, pc}
   16e84:	mov	r1, r0
   16e88:	mov	r0, #0
   16e8c:	b	113dc <clock_gettime@plt>
   16e90:	push	{fp, lr}
   16e94:	mov	fp, sp
   16e98:	mov	r1, r0
   16e9c:	mov	r0, #0
   16ea0:	bl	113dc <clock_gettime@plt>
   16ea4:	pop	{fp, pc}
   16ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eac:	add	fp, sp, #28
   16eb0:	sub	sp, sp, #4
   16eb4:	vpush	{d8-d9}
   16eb8:	sub	sp, sp, #104	; 0x68
   16ebc:	mov	r7, r3
   16ec0:	mov	r5, r2
   16ec4:	mov	r8, r1
   16ec8:	mov	sl, r0
   16ecc:	bl	11664 <localeconv@plt>
   16ed0:	ldr	r6, [r0]
   16ed4:	mov	r4, r0
   16ed8:	mov	r0, r6
   16edc:	bl	11574 <strlen@plt>
   16ee0:	sub	r1, r0, #1
   16ee4:	movw	r2, #57035	; 0xdecb
   16ee8:	cmp	r1, #16
   16eec:	movt	r2, #1
   16ef0:	movcs	r0, #1
   16ef4:	movcc	r2, r6
   16ef8:	ldr	r6, [r4, #4]
   16efc:	str	r0, [sp, #48]	; 0x30
   16f00:	ldr	r0, [r4, #8]
   16f04:	str	r2, [sp, #16]
   16f08:	str	r0, [sp, #24]
   16f0c:	mov	r0, r6
   16f10:	bl	11574 <strlen@plt>
   16f14:	cmp	r0, #17
   16f18:	movw	r0, #647	; 0x287
   16f1c:	movw	r1, #51805	; 0xca5d
   16f20:	str	r5, [sp, #36]	; 0x24
   16f24:	str	r7, [sp, #40]	; 0x28
   16f28:	ldr	r4, [fp, #20]
   16f2c:	add	r0, r5, r0
   16f30:	movt	r1, #1
   16f34:	movcc	r1, r6
   16f38:	ldr	r5, [fp, #16]
   16f3c:	ldr	r6, [fp, #8]
   16f40:	str	r0, [sp, #32]
   16f44:	ands	r0, r7, #32
   16f48:	str	r1, [sp, #20]
   16f4c:	str	r0, [sp, #28]
   16f50:	mov	r0, #1000	; 0x3e8
   16f54:	movwne	r0, #1024	; 0x400
   16f58:	str	r0, [sp, #44]	; 0x2c
   16f5c:	and	r0, r7, #3
   16f60:	ldr	r7, [fp, #12]
   16f64:	str	r0, [sp, #52]	; 0x34
   16f68:	subs	r0, r6, r5
   16f6c:	sbcs	r0, r7, r4
   16f70:	bcs	17060 <__assert_fail@plt+0x5990>
   16f74:	orrs	r0, r6, r7
   16f78:	beq	171b4 <__assert_fail@plt+0x5ae4>
   16f7c:	ldr	r9, [fp, #16]
   16f80:	ldr	r5, [fp, #20]
   16f84:	mov	r2, r6
   16f88:	mov	r3, r7
   16f8c:	mov	r0, r9
   16f90:	mov	r1, r5
   16f94:	bl	1c268 <__assert_fail@plt+0xab98>
   16f98:	mov	r4, r0
   16f9c:	mov	r3, r1
   16fa0:	umull	r0, r1, r0, r6
   16fa4:	mla	r1, r4, r7, r1
   16fa8:	mla	r1, r3, r6, r1
   16fac:	subs	r0, r9, r0
   16fb0:	sbc	r1, r5, r1
   16fb4:	orrs	r0, r0, r1
   16fb8:	bne	171b4 <__assert_fail@plt+0x5ae4>
   16fbc:	mov	r0, sl
   16fc0:	mov	r1, r8
   16fc4:	mov	r2, r4
   16fc8:	mov	r6, r8
   16fcc:	mov	r8, r3
   16fd0:	bl	1c268 <__assert_fail@plt+0xab98>
   16fd4:	mov	r5, r0
   16fd8:	mov	r9, r1
   16fdc:	umull	r0, r1, r0, r4
   16fe0:	mov	r2, #10
   16fe4:	mov	r3, r8
   16fe8:	mla	r1, r5, r8, r1
   16fec:	mla	r1, r9, r4, r1
   16ff0:	subs	r0, sl, r0
   16ff4:	umull	sl, r0, r0, r2
   16ff8:	mov	r2, r4
   16ffc:	sbc	r1, r6, r1
   17000:	add	r1, r1, r1, lsl #2
   17004:	add	r7, r0, r1, lsl #1
   17008:	mov	r0, sl
   1700c:	mov	r1, r7
   17010:	bl	1c268 <__assert_fail@plt+0xab98>
   17014:	mov	r6, r0
   17018:	umull	r0, r2, r0, r4
   1701c:	mla	r2, r6, r8, r2
   17020:	mla	r1, r1, r4, r2
   17024:	mov	r2, #2
   17028:	subs	r0, sl, r0
   1702c:	sbc	r1, r7, r1
   17030:	subs	r3, r4, r0, lsl #1
   17034:	lsl	r1, r1, #1
   17038:	orr	r1, r1, r0, lsr #31
   1703c:	orr	r7, r1, r0, lsl #1
   17040:	sbcs	r3, r8, r1
   17044:	movwcc	r2, #3
   17048:	cmp	r7, #0
   1704c:	movwne	r7, #1
   17050:	rsbs	r0, r4, r0, lsl #1
   17054:	sbcs	r0, r1, r8
   17058:	movcs	r7, r2
   1705c:	b	170cc <__assert_fail@plt+0x59fc>
   17060:	mov	r0, r6
   17064:	mov	r1, r7
   17068:	mov	r2, r5
   1706c:	mov	r3, r4
   17070:	bl	1c268 <__assert_fail@plt+0xab98>
   17074:	mov	r2, r0
   17078:	mov	r3, r1
   1707c:	umull	r0, r1, r0, r5
   17080:	mla	r1, r2, r4, r1
   17084:	mla	r1, r3, r5, r1
   17088:	subs	r0, r6, r0
   1708c:	sbc	r1, r7, r1
   17090:	orrs	r0, r0, r1
   17094:	bne	171b4 <__assert_fail@plt+0x5ae4>
   17098:	umull	r5, r0, r2, sl
   1709c:	mov	r4, r8
   170a0:	mla	r0, r2, r8, r0
   170a4:	mla	r9, r3, sl, r0
   170a8:	mov	r0, r5
   170ac:	mov	r1, r9
   170b0:	bl	1c268 <__assert_fail@plt+0xab98>
   170b4:	eor	r1, r1, r8
   170b8:	eor	r0, r0, sl
   170bc:	orrs	r0, r0, r1
   170c0:	bne	171b4 <__assert_fail@plt+0x5ae4>
   170c4:	mov	r7, #0
   170c8:	mov	r6, #0
   170cc:	ldr	r0, [sp, #40]	; 0x28
   170d0:	ldr	r1, [sp, #32]
   170d4:	ldr	r2, [sp, #44]	; 0x2c
   170d8:	ands	r4, r0, #16
   170dc:	beq	17428 <__assert_fail@plt+0x5d58>
   170e0:	subs	r0, r5, r2
   170e4:	mov	r8, #0
   170e8:	sbcs	r0, r9, #0
   170ec:	bcs	17100 <__assert_fail@plt+0x5a30>
   170f0:	ldr	r0, [sp, #32]
   170f4:	mov	sl, r5
   170f8:	str	r0, [sp, #12]
   170fc:	b	17748 <__assert_fail@plt+0x6078>
   17100:	ldr	r2, [sp, #44]	; 0x2c
   17104:	mov	r0, r5
   17108:	mov	r1, r9
   1710c:	mov	r3, #0
   17110:	bl	1c268 <__assert_fail@plt+0xab98>
   17114:	ldr	r2, [sp, #44]	; 0x2c
   17118:	mov	sl, r0
   1711c:	mov	r9, r1
   17120:	mls	r0, r0, r2, r5
   17124:	add	r0, r0, r0, lsl #2
   17128:	add	r0, r6, r0, lsl #1
   1712c:	udiv	r6, r0, r2
   17130:	mls	r0, r6, r2, r0
   17134:	lsl	r0, r0, #1
   17138:	add	r0, r0, r7, lsr #1
   1713c:	cmp	r0, r2
   17140:	bcs	17154 <__assert_fail@plt+0x5a84>
   17144:	rsb	r1, r7, #0
   17148:	subs	r7, r0, r1
   1714c:	movwne	r7, #1
   17150:	b	17164 <__assert_fail@plt+0x5a94>
   17154:	add	r0, r0, r7
   17158:	mov	r7, #2
   1715c:	cmp	r2, r0
   17160:	movwcc	r7, #3
   17164:	mov	r0, r8
   17168:	add	r0, r8, #1
   1716c:	mov	r8, r0
   17170:	cmp	r0, #7
   17174:	bhi	17188 <__assert_fail@plt+0x5ab8>
   17178:	subs	r0, sl, r2
   1717c:	mov	r5, sl
   17180:	sbcs	r0, r9, #0
   17184:	bcs	17100 <__assert_fail@plt+0x5a30>
   17188:	rsbs	r0, sl, #9
   1718c:	rscs	r0, r9, #0
   17190:	bcc	176a8 <__assert_fail@plt+0x5fd8>
   17194:	ldr	r0, [sp, #52]	; 0x34
   17198:	cmp	r0, #1
   1719c:	bne	176b4 <__assert_fail@plt+0x5fe4>
   171a0:	and	r0, r6, #1
   171a4:	add	r0, r7, r0
   171a8:	cmp	r0, #2
   171ac:	bhi	176c4 <__assert_fail@plt+0x5ff4>
   171b0:	b	176fc <__assert_fail@plt+0x602c>
   171b4:	ldr	r9, [fp, #20]
   171b8:	ldr	r0, [fp, #16]
   171bc:	mov	r1, r9
   171c0:	bl	1c120 <__assert_fail@plt+0xaa50>
   171c4:	vmov	d8, r0, r1
   171c8:	mov	r0, sl
   171cc:	mov	r1, r8
   171d0:	bl	1c120 <__assert_fail@plt+0xaa50>
   171d4:	mov	r4, r0
   171d8:	mov	r5, r1
   171dc:	mov	r0, r6
   171e0:	mov	r1, r7
   171e4:	bl	1c120 <__assert_fail@plt+0xaa50>
   171e8:	vmov	d16, r0, r1
   171ec:	vmov	d17, r4, r5
   171f0:	ldr	r7, [sp, #40]	; 0x28
   171f4:	tst	r7, #16
   171f8:	vdiv.f64	d16, d16, d8
   171fc:	vmul.f64	d8, d16, d17
   17200:	bne	17280 <__assert_fail@plt+0x5bb0>
   17204:	ldr	r6, [sp, #52]	; 0x34
   17208:	cmp	r6, #1
   1720c:	beq	1743c <__assert_fail@plt+0x5d6c>
   17210:	vldr	d16, [pc, #568]	; 17450 <__assert_fail@plt+0x5d80>
   17214:	ldr	sl, [sp, #36]	; 0x24
   17218:	ldr	r8, [sp, #32]
   1721c:	vcmpe.f64	d8, d16
   17220:	vmrs	APSR_nzcv, fpscr
   17224:	bpl	17444 <__assert_fail@plt+0x5d74>
   17228:	vmov	r0, r1, d8
   1722c:	bl	1c2b8 <__assert_fail@plt+0xabe8>
   17230:	mov	r4, r0
   17234:	mov	r5, r1
   17238:	mov	r0, #0
   1723c:	cmp	r6, #0
   17240:	mov	r2, #0
   17244:	bne	1726c <__assert_fail@plt+0x5b9c>
   17248:	mov	r0, r4
   1724c:	mov	r1, r5
   17250:	bl	1c120 <__assert_fail@plt+0xaa50>
   17254:	vmov	d16, r0, r1
   17258:	mov	r2, #0
   1725c:	mov	r0, #0
   17260:	vcmp.f64	d8, d16
   17264:	vmrs	APSR_nzcv, fpscr
   17268:	movwne	r0, #1
   1726c:	adds	r0, r0, r4
   17270:	adc	r1, r2, r5
   17274:	bl	1c120 <__assert_fail@plt+0xaa50>
   17278:	vmov	d8, r0, r1
   1727c:	b	17444 <__assert_fail@plt+0x5d74>
   17280:	ldr	r0, [sp, #44]	; 0x2c
   17284:	mov	r6, #1
   17288:	vmov	s0, r0
   1728c:	vcvt.f64.u32	d16, s0
   17290:	vmul.f64	d17, d16, d16
   17294:	vcmpe.f64	d17, d8
   17298:	vmrs	APSR_nzcv, fpscr
   1729c:	bls	172b0 <__assert_fail@plt+0x5be0>
   172a0:	ldr	sl, [sp, #48]	; 0x30
   172a4:	ldr	r8, [sp, #32]
   172a8:	vmov.f64	d17, d16
   172ac:	b	17348 <__assert_fail@plt+0x5c78>
   172b0:	vmul.f64	d18, d17, d16
   172b4:	ldr	sl, [sp, #48]	; 0x30
   172b8:	ldr	r8, [sp, #32]
   172bc:	mov	r6, #2
   172c0:	vcmpe.f64	d18, d8
   172c4:	vmrs	APSR_nzcv, fpscr
   172c8:	bhi	17348 <__assert_fail@plt+0x5c78>
   172cc:	vmul.f64	d19, d18, d16
   172d0:	vmov.f64	d17, d18
   172d4:	mov	r6, #3
   172d8:	vcmpe.f64	d19, d8
   172dc:	vmrs	APSR_nzcv, fpscr
   172e0:	bhi	17348 <__assert_fail@plt+0x5c78>
   172e4:	vmul.f64	d18, d19, d16
   172e8:	vmov.f64	d17, d19
   172ec:	mov	r6, #4
   172f0:	vcmpe.f64	d18, d8
   172f4:	vmrs	APSR_nzcv, fpscr
   172f8:	bhi	17348 <__assert_fail@plt+0x5c78>
   172fc:	vmul.f64	d19, d18, d16
   17300:	vmov.f64	d17, d18
   17304:	mov	r6, #5
   17308:	vcmpe.f64	d19, d8
   1730c:	vmrs	APSR_nzcv, fpscr
   17310:	bhi	17348 <__assert_fail@plt+0x5c78>
   17314:	vmul.f64	d18, d19, d16
   17318:	vmov.f64	d17, d19
   1731c:	mov	r6, #6
   17320:	vcmpe.f64	d18, d8
   17324:	vmrs	APSR_nzcv, fpscr
   17328:	bhi	17348 <__assert_fail@plt+0x5c78>
   1732c:	vmul.f64	d16, d18, d16
   17330:	mov	r6, #7
   17334:	vmov.f64	d17, d18
   17338:	vcmpe.f64	d16, d8
   1733c:	vmrs	APSR_nzcv, fpscr
   17340:	movls	r6, #8
   17344:	vmovls.f64	d17, d16
   17348:	vdiv.f64	d8, d8, d17
   1734c:	ldr	r0, [sp, #52]	; 0x34
   17350:	cmp	r0, #1
   17354:	vmov.f64	d16, d8
   17358:	beq	173c8 <__assert_fail@plt+0x5cf8>
   1735c:	vldr	d16, [pc, #236]	; 17450 <__assert_fail@plt+0x5d80>
   17360:	vcmpe.f64	d8, d16
   17364:	vmov.f64	d16, d8
   17368:	vmrs	APSR_nzcv, fpscr
   1736c:	bpl	173c8 <__assert_fail@plt+0x5cf8>
   17370:	vmov	r0, r1, d8
   17374:	bl	1c2b8 <__assert_fail@plt+0xabe8>
   17378:	mov	r5, r1
   1737c:	ldr	r1, [sp, #52]	; 0x34
   17380:	mov	r4, r0
   17384:	mov	r0, #0
   17388:	mov	r2, #0
   1738c:	cmp	r1, #0
   17390:	bne	173b8 <__assert_fail@plt+0x5ce8>
   17394:	mov	r0, r4
   17398:	mov	r1, r5
   1739c:	bl	1c120 <__assert_fail@plt+0xaa50>
   173a0:	vmov	d16, r0, r1
   173a4:	mov	r2, #0
   173a8:	mov	r0, #0
   173ac:	vcmp.f64	d8, d16
   173b0:	vmrs	APSR_nzcv, fpscr
   173b4:	movwne	r0, #1
   173b8:	adds	r0, r0, r4
   173bc:	adc	r1, r2, r5
   173c0:	bl	1c120 <__assert_fail@plt+0xaa50>
   173c4:	vmov	d16, r0, r1
   173c8:	ldr	r5, [sp, #36]	; 0x24
   173cc:	movw	r3, #57043	; 0xded3
   173d0:	mov	r1, #1
   173d4:	mvn	r2, #0
   173d8:	vstr	d16, [sp]
   173dc:	movt	r3, #1
   173e0:	mov	r0, r5
   173e4:	bl	115a4 <__sprintf_chk@plt>
   173e8:	ldr	r1, [sp, #28]
   173ec:	mov	r0, #3
   173f0:	cmp	r1, #0
   173f4:	movwne	r0, #2
   173f8:	add	r4, r0, sl
   173fc:	mov	r0, r5
   17400:	bl	11574 <strlen@plt>
   17404:	cmp	r4, r0
   17408:	bcc	1746c <__assert_fail@plt+0x5d9c>
   1740c:	ldr	r7, [sp, #40]	; 0x28
   17410:	mov	r2, r0
   17414:	add	r5, sl, #1
   17418:	tst	r7, #8
   1741c:	bne	17458 <__assert_fail@plt+0x5d88>
   17420:	ldr	sl, [sp, #36]	; 0x24
   17424:	b	1751c <__assert_fail@plt+0x5e4c>
   17428:	mov	r0, r1
   1742c:	mvn	r8, #0
   17430:	str	r1, [sp, #12]
   17434:	mov	sl, r5
   17438:	b	17748 <__assert_fail@plt+0x6078>
   1743c:	ldr	sl, [sp, #36]	; 0x24
   17440:	ldr	r8, [sp, #32]
   17444:	vstr	d8, [sp]
   17448:	mvn	r6, #0
   1744c:	b	174f4 <__assert_fail@plt+0x5e24>
   17450:	andeq	r0, r0, r0
   17454:	mvnsmi	r0, #0
   17458:	ldr	r0, [sp, #36]	; 0x24
   1745c:	add	r0, r2, r0
   17460:	ldrb	r0, [r0, #-1]
   17464:	cmp	r0, #48	; 0x30
   17468:	bne	1769c <__assert_fail@plt+0x5fcc>
   1746c:	vmov.f64	d9, #36	; 0x41200000  10.0
   17470:	ldr	r4, [sp, #52]	; 0x34
   17474:	vmul.f64	d8, d8, d9
   17478:	cmp	r4, #1
   1747c:	beq	174e4 <__assert_fail@plt+0x5e14>
   17480:	vldr	d16, [pc, #-56]	; 17450 <__assert_fail@plt+0x5d80>
   17484:	vcmpe.f64	d8, d16
   17488:	vmrs	APSR_nzcv, fpscr
   1748c:	bpl	174e4 <__assert_fail@plt+0x5e14>
   17490:	vmov	r0, r1, d8
   17494:	bl	1c2b8 <__assert_fail@plt+0xabe8>
   17498:	mov	sl, r0
   1749c:	mov	r5, r1
   174a0:	mov	r0, #0
   174a4:	cmp	r4, #0
   174a8:	mov	r2, #0
   174ac:	bne	174d4 <__assert_fail@plt+0x5e04>
   174b0:	mov	r0, sl
   174b4:	mov	r1, r5
   174b8:	bl	1c120 <__assert_fail@plt+0xaa50>
   174bc:	vmov	d16, r0, r1
   174c0:	mov	r2, #0
   174c4:	mov	r0, #0
   174c8:	vcmp.f64	d8, d16
   174cc:	vmrs	APSR_nzcv, fpscr
   174d0:	movwne	r0, #1
   174d4:	adds	r0, r0, sl
   174d8:	adc	r1, r2, r5
   174dc:	bl	1c120 <__assert_fail@plt+0xaa50>
   174e0:	vmov	d8, r0, r1
   174e4:	vdiv.f64	d16, d8, d9
   174e8:	ldr	sl, [sp, #36]	; 0x24
   174ec:	ldr	r7, [sp, #40]	; 0x28
   174f0:	vstr	d16, [sp]
   174f4:	movw	r3, #57037	; 0xdecd
   174f8:	mov	r0, sl
   174fc:	mov	r1, #1
   17500:	mvn	r2, #0
   17504:	movt	r3, #1
   17508:	bl	115a4 <__sprintf_chk@plt>
   1750c:	mov	r0, sl
   17510:	bl	11574 <strlen@plt>
   17514:	mov	r2, r0
   17518:	mov	r5, #0
   1751c:	sub	r4, r8, r2
   17520:	mov	r1, sl
   17524:	mov	r0, r4
   17528:	bl	113c4 <memmove@plt>
   1752c:	sub	r5, r8, r5
   17530:	tst	r7, #4
   17534:	bne	17854 <__assert_fail@plt+0x6184>
   17538:	tst	r7, #128	; 0x80
   1753c:	beq	1796c <__assert_fail@plt+0x629c>
   17540:	cmn	r6, #1
   17544:	bgt	17630 <__assert_fail@plt+0x5f60>
   17548:	ldr	r0, [fp, #16]
   1754c:	mov	r6, #0
   17550:	subs	r0, r0, #2
   17554:	sbcs	r0, r9, #0
   17558:	bcc	17630 <__assert_fail@plt+0x5f60>
   1755c:	ldr	r0, [sp, #44]	; 0x2c
   17560:	ldr	r1, [fp, #16]
   17564:	mov	r6, #1
   17568:	subs	r0, r0, r1
   1756c:	rscs	r0, r9, #0
   17570:	bcs	17630 <__assert_fail@plt+0x5f60>
   17574:	ldr	r0, [sp, #44]	; 0x2c
   17578:	ldr	r2, [fp, #16]
   1757c:	mov	r6, #2
   17580:	umull	r1, r0, r0, r0
   17584:	subs	r2, r1, r2
   17588:	sbcs	r2, r0, r9
   1758c:	bcs	17630 <__assert_fail@plt+0x5f60>
   17590:	ldr	r3, [sp, #44]	; 0x2c
   17594:	mov	r6, #3
   17598:	umull	r1, r2, r1, r3
   1759c:	mla	r2, r0, r3, r2
   175a0:	ldr	r0, [fp, #16]
   175a4:	subs	r0, r1, r0
   175a8:	sbcs	r0, r2, r9
   175ac:	bcs	17630 <__assert_fail@plt+0x5f60>
   175b0:	ldr	r3, [sp, #44]	; 0x2c
   175b4:	mov	r6, #4
   175b8:	umull	r0, r1, r1, r3
   175bc:	mla	r1, r2, r3, r1
   175c0:	ldr	r2, [fp, #16]
   175c4:	subs	r2, r0, r2
   175c8:	sbcs	r2, r1, r9
   175cc:	bcs	17630 <__assert_fail@plt+0x5f60>
   175d0:	ldr	r3, [sp, #44]	; 0x2c
   175d4:	mov	r6, #5
   175d8:	umull	r0, r2, r0, r3
   175dc:	mla	r1, r1, r3, r2
   175e0:	ldr	r2, [fp, #16]
   175e4:	subs	r2, r0, r2
   175e8:	sbcs	r2, r1, r9
   175ec:	bcs	17630 <__assert_fail@plt+0x5f60>
   175f0:	ldr	r3, [sp, #44]	; 0x2c
   175f4:	mov	r6, #6
   175f8:	umull	r0, r2, r0, r3
   175fc:	mla	r1, r1, r3, r2
   17600:	ldr	r2, [fp, #16]
   17604:	subs	r2, r0, r2
   17608:	sbcs	r2, r1, r9
   1760c:	bcs	17630 <__assert_fail@plt+0x5f60>
   17610:	ldr	r3, [sp, #44]	; 0x2c
   17614:	mov	r6, #7
   17618:	umull	r0, r2, r0, r3
   1761c:	mla	r1, r1, r3, r2
   17620:	ldr	r2, [fp, #16]
   17624:	subs	r0, r0, r2
   17628:	sbcs	r0, r1, r9
   1762c:	movwcc	r6, #8
   17630:	and	r0, r7, #256	; 0x100
   17634:	tst	r7, #64	; 0x40
   17638:	orrsne	r1, r6, r0
   1763c:	movne	r1, #32
   17640:	addne	r8, sl, #648	; 0x288
   17644:	strbne	r1, [sl, #647]	; 0x287
   17648:	cmp	r6, #0
   1764c:	beq	17674 <__assert_fail@plt+0x5fa4>
   17650:	ldr	r1, [sp, #28]
   17654:	cmp	r1, #0
   17658:	moveq	r1, #107	; 0x6b
   1765c:	cmpeq	r6, #1
   17660:	beq	17670 <__assert_fail@plt+0x5fa0>
   17664:	movw	r1, #57108	; 0xdf14
   17668:	movt	r1, #1
   1766c:	ldrb	r1, [r1, r6]
   17670:	strb	r1, [r8], #1
   17674:	cmp	r0, #0
   17678:	beq	1796c <__assert_fail@plt+0x629c>
   1767c:	ldr	r0, [sp, #28]
   17680:	cmp	r0, #0
   17684:	cmpne	r6, #0
   17688:	movne	r0, #105	; 0x69
   1768c:	strbne	r0, [r8], #1
   17690:	mov	r0, #66	; 0x42
   17694:	strb	r0, [r8], #1
   17698:	b	1796c <__assert_fail@plt+0x629c>
   1769c:	ldr	sl, [sp, #36]	; 0x24
   176a0:	ldr	r7, [sp, #40]	; 0x28
   176a4:	b	1751c <__assert_fail@plt+0x5e4c>
   176a8:	ldr	r0, [sp, #32]
   176ac:	str	r0, [sp, #12]
   176b0:	b	17748 <__assert_fail@plt+0x6078>
   176b4:	cmp	r0, #0
   176b8:	bne	176fc <__assert_fail@plt+0x602c>
   176bc:	cmp	r7, #0
   176c0:	beq	176fc <__assert_fail@plt+0x602c>
   176c4:	adds	r0, sl, #1
   176c8:	add	r6, r6, #1
   176cc:	mov	r7, #0
   176d0:	adc	r1, r9, #0
   176d4:	cmp	r6, #10
   176d8:	bne	176fc <__assert_fail@plt+0x602c>
   176dc:	rsbs	r2, r0, #9
   176e0:	mov	r6, #0
   176e4:	mov	sl, r0
   176e8:	mov	r9, r1
   176ec:	mov	r7, #0
   176f0:	rscs	r2, r1, #0
   176f4:	ldr	r2, [sp, #44]	; 0x2c
   176f8:	bcc	17988 <__assert_fail@plt+0x62b8>
   176fc:	ldr	r0, [sp, #40]	; 0x28
   17700:	tst	r0, #8
   17704:	beq	1771c <__assert_fail@plt+0x604c>
   17708:	cmp	r6, #0
   1770c:	bne	1771c <__assert_fail@plt+0x604c>
   17710:	ldr	r0, [sp, #32]
   17714:	str	r0, [sp, #12]
   17718:	b	17744 <__assert_fail@plt+0x6074>
   1771c:	ldr	r1, [sp, #36]	; 0x24
   17720:	ldr	r2, [sp, #48]	; 0x30
   17724:	add	r0, r6, #48	; 0x30
   17728:	strb	r0, [r1, #646]!	; 0x286
   1772c:	sub	r0, r1, r2
   17730:	ldr	r1, [sp, #16]
   17734:	str	r0, [sp, #12]
   17738:	bl	113f4 <memcpy@plt>
   1773c:	ldr	r2, [sp, #44]	; 0x2c
   17740:	mov	r7, #0
   17744:	mov	r6, #0
   17748:	ldr	r0, [sp, #52]	; 0x34
   1774c:	cmp	r0, #0
   17750:	beq	17790 <__assert_fail@plt+0x60c0>
   17754:	cmp	r0, #1
   17758:	bne	17784 <__assert_fail@plt+0x60b4>
   1775c:	mov	r0, #0
   17760:	rsbs	r1, r7, #0
   17764:	and	r2, sl, #1
   17768:	eor	r1, r2, r1
   1776c:	sbc	r0, r0, #0
   17770:	ldr	r2, [sp, #44]	; 0x2c
   17774:	orrs	r0, r1, r0
   17778:	addne	r6, r6, #1
   1777c:	cmp	r6, #5
   17780:	bgt	1779c <__assert_fail@plt+0x60cc>
   17784:	ldr	r7, [sp, #36]	; 0x24
   17788:	ldr	r5, [sp, #40]	; 0x28
   1778c:	b	177f8 <__assert_fail@plt+0x6128>
   17790:	add	r0, r6, r7
   17794:	cmp	r0, #1
   17798:	blt	17784 <__assert_fail@plt+0x60b4>
   1779c:	ldr	r7, [sp, #36]	; 0x24
   177a0:	ldr	r5, [sp, #40]	; 0x28
   177a4:	adds	sl, sl, #1
   177a8:	adc	r9, r9, #0
   177ac:	cmp	r8, #7
   177b0:	bgt	177f8 <__assert_fail@plt+0x6128>
   177b4:	cmp	r4, #0
   177b8:	beq	177f8 <__assert_fail@plt+0x6128>
   177bc:	eor	r0, sl, r2
   177c0:	orrs	r0, r0, r9
   177c4:	addeq	r8, r8, #1
   177c8:	moveq	r9, #0
   177cc:	moveq	sl, #1
   177d0:	tsteq	r5, #8
   177d4:	bne	177f8 <__assert_fail@plt+0x6128>
   177d8:	ldr	r0, [sp, #12]
   177dc:	mov	r1, #48	; 0x30
   177e0:	ldr	r2, [sp, #48]	; 0x30
   177e4:	strb	r1, [r0, #-1]!
   177e8:	ldr	r1, [sp, #16]
   177ec:	sub	r0, r0, r2
   177f0:	str	r0, [sp, #12]
   177f4:	bl	113f4 <memcpy@plt>
   177f8:	ldr	r4, [sp, #12]
   177fc:	mov	r0, sl
   17800:	mov	r1, r9
   17804:	mov	r2, #10
   17808:	mov	r3, #0
   1780c:	bl	1c268 <__assert_fail@plt+0xab98>
   17810:	add	r2, r0, r0, lsl #2
   17814:	sub	r2, sl, r2, lsl #1
   17818:	orr	r2, r2, #48	; 0x30
   1781c:	strb	r2, [r4, #-1]!
   17820:	rsbs	r2, sl, #9
   17824:	mov	sl, r0
   17828:	rscs	r2, r9, #0
   1782c:	mov	r9, r1
   17830:	bcc	177fc <__assert_fail@plt+0x612c>
   17834:	mov	r6, r8
   17838:	mov	sl, r7
   1783c:	mov	r7, r5
   17840:	ldr	r9, [fp, #20]
   17844:	ldr	r8, [sp, #32]
   17848:	ldr	r5, [sp, #12]
   1784c:	tst	r7, #4
   17850:	beq	17538 <__assert_fail@plt+0x5e68>
   17854:	ldr	r9, [sp, #20]
   17858:	str	r6, [sp, #16]
   1785c:	sub	r7, r5, r4
   17860:	mov	r0, r9
   17864:	bl	11574 <strlen@plt>
   17868:	str	r0, [sp, #52]	; 0x34
   1786c:	add	r0, sp, #56	; 0x38
   17870:	mov	r1, r4
   17874:	mov	r2, r7
   17878:	bl	113f4 <memcpy@plt>
   1787c:	ldr	r6, [sp, #24]
   17880:	add	r0, sp, #56	; 0x38
   17884:	ldrb	r8, [r6]
   17888:	cmp	r8, #255	; 0xff
   1788c:	mov	sl, r8
   17890:	moveq	sl, r7
   17894:	cmp	r8, #0
   17898:	mvneq	sl, #0
   1789c:	cmp	sl, r7
   178a0:	movhi	sl, r7
   178a4:	sub	r4, r5, sl
   178a8:	sub	r5, r7, sl
   178ac:	mov	r2, sl
   178b0:	add	r1, r0, r5
   178b4:	mov	r0, r4
   178b8:	bl	113f4 <memcpy@plt>
   178bc:	cmp	r5, #0
   178c0:	beq	17950 <__assert_fail@plt+0x6280>
   178c4:	clz	r0, r8
   178c8:	lsr	r8, r0, #5
   178cc:	ldr	r0, [sp, #52]	; 0x34
   178d0:	rsb	r0, r0, #0
   178d4:	str	r0, [sp, #48]	; 0x30
   178d8:	ldr	r0, [sp, #48]	; 0x30
   178dc:	ldr	r2, [sp, #52]	; 0x34
   178e0:	mov	r1, r9
   178e4:	add	r4, r4, r0
   178e8:	mov	r0, r4
   178ec:	bl	113f4 <memcpy@plt>
   178f0:	tst	r8, #1
   178f4:	add	r0, sp, #56	; 0x38
   178f8:	addeq	r6, r6, #1
   178fc:	mov	r8, r6
   17900:	ldrb	r6, [r6]
   17904:	cmp	r6, #255	; 0xff
   17908:	mov	r7, r6
   1790c:	moveq	r7, r5
   17910:	cmp	r6, #0
   17914:	moveq	r7, sl
   17918:	cmp	r5, r7
   1791c:	movcc	r7, r5
   17920:	sub	r5, r5, r7
   17924:	sub	r4, r4, r7
   17928:	mov	r2, r7
   1792c:	add	r1, r0, r5
   17930:	mov	r0, r4
   17934:	bl	113f4 <memcpy@plt>
   17938:	clz	r0, r6
   1793c:	mov	r6, r8
   17940:	cmp	r5, #0
   17944:	mov	sl, r7
   17948:	lsr	r8, r0, #5
   1794c:	bne	178d8 <__assert_fail@plt+0x6208>
   17950:	ldr	r8, [sp, #32]
   17954:	ldr	sl, [sp, #36]	; 0x24
   17958:	ldr	r7, [sp, #40]	; 0x28
   1795c:	ldr	r9, [fp, #20]
   17960:	ldr	r6, [sp, #16]
   17964:	tst	r7, #128	; 0x80
   17968:	bne	17540 <__assert_fail@plt+0x5e70>
   1796c:	mov	r0, #0
   17970:	strb	r0, [r8]
   17974:	mov	r0, r4
   17978:	sub	sp, fp, #48	; 0x30
   1797c:	vpop	{d8-d9}
   17980:	add	sp, sp, #4
   17984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17988:	ldr	r0, [sp, #32]
   1798c:	mov	r7, #0
   17990:	mov	sl, #10
   17994:	mov	r9, #0
   17998:	str	r0, [sp, #12]
   1799c:	b	17748 <__assert_fail@plt+0x6078>
   179a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   179a4:	add	fp, sp, #24
   179a8:	sub	sp, sp, #8
   179ac:	mov	r4, r2
   179b0:	mov	r8, r1
   179b4:	cmp	r0, #0
   179b8:	bne	179e4 <__assert_fail@plt+0x6314>
   179bc:	movw	r0, #57049	; 0xded9
   179c0:	movt	r0, #1
   179c4:	bl	114d8 <getenv@plt>
   179c8:	cmp	r0, #0
   179cc:	bne	179e4 <__assert_fail@plt+0x6314>
   179d0:	movw	r0, #57060	; 0xdee4
   179d4:	movt	r0, #1
   179d8:	bl	114d8 <getenv@plt>
   179dc:	cmp	r0, #0
   179e0:	beq	17b08 <__assert_fail@plt+0x6438>
   179e4:	mov	r6, r0
   179e8:	movw	r7, #57132	; 0xdf2c
   179ec:	movw	r1, #57120	; 0xdf20
   179f0:	mov	r3, #4
   179f4:	ldrb	r5, [r6], #1
   179f8:	movt	r7, #1
   179fc:	movt	r1, #1
   17a00:	mov	r2, r7
   17a04:	cmp	r5, #39	; 0x27
   17a08:	movne	r6, r0
   17a0c:	mov	r0, r6
   17a10:	bl	1b648 <__assert_fail@plt+0x9f78>
   17a14:	sub	r1, r5, #39	; 0x27
   17a18:	cmp	r0, #0
   17a1c:	clz	r1, r1
   17a20:	lsr	r1, r1, #5
   17a24:	lsl	r5, r1, #2
   17a28:	bmi	17a50 <__assert_fail@plt+0x6380>
   17a2c:	ldr	r0, [r7, r0, lsl #2]
   17a30:	mov	r2, #1
   17a34:	mov	r1, #0
   17a38:	str	r2, [r4]
   17a3c:	str	r1, [r4, #4]
   17a40:	orr	r1, r0, r5
   17a44:	mov	r0, #0
   17a48:	str	r1, [r8]
   17a4c:	b	17a80 <__assert_fail@plt+0x63b0>
   17a50:	movw	r0, #57070	; 0xdeee
   17a54:	add	r1, sp, #4
   17a58:	mov	r2, #0
   17a5c:	mov	r3, r4
   17a60:	mov	r7, #0
   17a64:	movt	r0, #1
   17a68:	str	r0, [sp]
   17a6c:	mov	r0, r6
   17a70:	bl	1a784 <__assert_fail@plt+0x90b4>
   17a74:	cmp	r0, #0
   17a78:	beq	17ac4 <__assert_fail@plt+0x63f4>
   17a7c:	str	r7, [r8]
   17a80:	ldrd	r2, [r4]
   17a84:	orrs	r1, r2, r3
   17a88:	beq	17a94 <__assert_fail@plt+0x63c4>
   17a8c:	sub	sp, fp, #24
   17a90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a94:	movw	r0, #54256	; 0xd3f0
   17a98:	movt	r0, #1
   17a9c:	bl	114d8 <getenv@plt>
   17aa0:	cmp	r0, #0
   17aa4:	mov	r2, #512	; 0x200
   17aa8:	mov	r0, #4
   17aac:	mov	r1, #0
   17ab0:	movweq	r2, #1024	; 0x400
   17ab4:	str	r2, [r4]
   17ab8:	str	r1, [r4, #4]
   17abc:	sub	sp, fp, #24
   17ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ac4:	ldrb	r0, [r6]
   17ac8:	sub	r0, r0, #48	; 0x30
   17acc:	uxtb	r0, r0
   17ad0:	cmp	r0, #10
   17ad4:	bcc	17b00 <__assert_fail@plt+0x6430>
   17ad8:	ldr	r0, [sp, #4]
   17adc:	cmp	r0, r6
   17ae0:	beq	17b30 <__assert_fail@plt+0x6460>
   17ae4:	ldrb	r2, [r6, #1]
   17ae8:	add	r1, r6, #1
   17aec:	mov	r6, r1
   17af0:	sub	r2, r2, #48	; 0x30
   17af4:	uxtb	r2, r2
   17af8:	cmp	r2, #10
   17afc:	bcs	17adc <__assert_fail@plt+0x640c>
   17b00:	mov	r1, r5
   17b04:	b	17a44 <__assert_fail@plt+0x6374>
   17b08:	movw	r0, #54256	; 0xd3f0
   17b0c:	movt	r0, #1
   17b10:	bl	114d8 <getenv@plt>
   17b14:	cmp	r0, #0
   17b18:	mov	r2, #512	; 0x200
   17b1c:	mov	r1, #0
   17b20:	movweq	r2, #1024	; 0x400
   17b24:	str	r2, [r4]
   17b28:	str	r1, [r4, #4]
   17b2c:	b	17a44 <__assert_fail@plt+0x6374>
   17b30:	ldrb	r2, [r0, #-1]
   17b34:	orr	r1, r5, #384	; 0x180
   17b38:	cmp	r2, #66	; 0x42
   17b3c:	mov	r2, r1
   17b40:	orrne	r2, r5, #128	; 0x80
   17b44:	bne	17b58 <__assert_fail@plt+0x6488>
   17b48:	ldrb	r0, [r0, #-2]
   17b4c:	cmp	r0, #105	; 0x69
   17b50:	orreq	r1, r2, #32
   17b54:	b	17a44 <__assert_fail@plt+0x6374>
   17b58:	orr	r1, r2, #32
   17b5c:	b	17a44 <__assert_fail@plt+0x6374>
   17b60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17b64:	add	fp, sp, #24
   17b68:	sub	sp, sp, #8
   17b6c:	movw	r6, #61912	; 0xf1d8
   17b70:	mov	r4, #0
   17b74:	cmp	r0, #2
   17b78:	movt	r6, #2
   17b7c:	ldr	r7, [r6]
   17b80:	str	r4, [r6]
   17b84:	bne	17bf8 <__assert_fail@plt+0x6528>
   17b88:	mov	r8, r3
   17b8c:	movw	r3, #57148	; 0xdf3c
   17b90:	mov	r5, r2
   17b94:	movw	r2, #57140	; 0xdf34
   17b98:	mov	r0, #2
   17b9c:	str	r4, [sp]
   17ba0:	movt	r2, #1
   17ba4:	movt	r3, #1
   17ba8:	bl	11544 <getopt_long@plt>
   17bac:	cmp	r0, #104	; 0x68
   17bb0:	beq	17bec <__assert_fail@plt+0x651c>
   17bb4:	cmp	r0, #118	; 0x76
   17bb8:	bne	17bf8 <__assert_fail@plt+0x6528>
   17bbc:	movw	r0, #61908	; 0xf1d4
   17bc0:	ldr	r3, [fp, #8]
   17bc4:	add	r1, fp, #16
   17bc8:	mov	r2, r8
   17bcc:	movt	r0, #2
   17bd0:	str	r1, [sp, #4]
   17bd4:	str	r1, [sp]
   17bd8:	mov	r1, r5
   17bdc:	ldr	r0, [r0]
   17be0:	bl	19ebc <__assert_fail@plt+0x87ec>
   17be4:	mov	r0, #0
   17be8:	bl	1155c <exit@plt>
   17bec:	ldr	r1, [fp, #12]
   17bf0:	mov	r0, #0
   17bf4:	blx	r1
   17bf8:	movw	r0, #61896	; 0xf1c8
   17bfc:	str	r7, [r6]
   17c00:	movt	r0, #2
   17c04:	str	r4, [r0]
   17c08:	sub	sp, fp, #24
   17c0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17c14:	add	fp, sp, #24
   17c18:	sub	sp, sp, #8
   17c1c:	mov	r8, r3
   17c20:	ldr	r3, [fp, #12]
   17c24:	movw	r7, #61912	; 0xf1d8
   17c28:	movw	r5, #51805	; 0xca5d
   17c2c:	mov	r9, r2
   17c30:	mov	r2, #1
   17c34:	mov	r6, #0
   17c38:	movt	r7, #2
   17c3c:	movt	r5, #1
   17c40:	str	r6, [sp]
   17c44:	ldr	r4, [r7]
   17c48:	str	r2, [r7]
   17c4c:	movw	r2, #57140	; 0xdf34
   17c50:	cmp	r3, #0
   17c54:	movw	r3, #57148	; 0xdf3c
   17c58:	movt	r2, #1
   17c5c:	movt	r3, #1
   17c60:	movne	r2, r5
   17c64:	bl	11544 <getopt_long@plt>
   17c68:	cmn	r0, #1
   17c6c:	beq	17c98 <__assert_fail@plt+0x65c8>
   17c70:	cmp	r0, #104	; 0x68
   17c74:	beq	17c8c <__assert_fail@plt+0x65bc>
   17c78:	cmp	r0, #118	; 0x76
   17c7c:	beq	17ca4 <__assert_fail@plt+0x65d4>
   17c80:	movw	r0, #61804	; 0xf16c
   17c84:	movt	r0, #2
   17c88:	ldr	r6, [r0]
   17c8c:	ldr	r1, [fp, #16]
   17c90:	mov	r0, r6
   17c94:	blx	r1
   17c98:	str	r4, [r7]
   17c9c:	sub	sp, fp, #24
   17ca0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17ca4:	movw	r0, #61908	; 0xf1d4
   17ca8:	ldr	r3, [fp, #8]
   17cac:	add	r1, fp, #20
   17cb0:	mov	r2, r8
   17cb4:	movt	r0, #2
   17cb8:	str	r1, [sp, #4]
   17cbc:	str	r1, [sp]
   17cc0:	mov	r1, r9
   17cc4:	ldr	r0, [r0]
   17cc8:	bl	19ebc <__assert_fail@plt+0x87ec>
   17ccc:	mov	r0, #0
   17cd0:	bl	1155c <exit@plt>
   17cd4:	push	{r4, r5, fp, lr}
   17cd8:	add	fp, sp, #8
   17cdc:	cmp	r0, #0
   17ce0:	beq	17d74 <__assert_fail@plt+0x66a4>
   17ce4:	mov	r1, #47	; 0x2f
   17ce8:	mov	r4, r0
   17cec:	bl	1164c <strrchr@plt>
   17cf0:	cmp	r0, #0
   17cf4:	mov	r5, r4
   17cf8:	addne	r5, r0, #1
   17cfc:	sub	r0, r5, r4
   17d00:	cmp	r0, #7
   17d04:	blt	17d58 <__assert_fail@plt+0x6688>
   17d08:	movw	r1, #57252	; 0xdfa4
   17d0c:	sub	r0, r5, #7
   17d10:	mov	r2, #7
   17d14:	movt	r1, #1
   17d18:	bl	11688 <strncmp@plt>
   17d1c:	cmp	r0, #0
   17d20:	bne	17d58 <__assert_fail@plt+0x6688>
   17d24:	movw	r1, #57260	; 0xdfac
   17d28:	mov	r0, r5
   17d2c:	mov	r2, #3
   17d30:	movt	r1, #1
   17d34:	bl	11688 <strncmp@plt>
   17d38:	cmp	r0, #0
   17d3c:	beq	17d48 <__assert_fail@plt+0x6678>
   17d40:	mov	r4, r5
   17d44:	b	17d58 <__assert_fail@plt+0x6688>
   17d48:	movw	r0, #61888	; 0xf1c0
   17d4c:	add	r4, r5, #3
   17d50:	movt	r0, #2
   17d54:	str	r4, [r0]
   17d58:	movw	r0, #61892	; 0xf1c4
   17d5c:	movt	r0, #2
   17d60:	str	r4, [r0]
   17d64:	movw	r0, #62564	; 0xf464
   17d68:	movt	r0, #2
   17d6c:	str	r4, [r0]
   17d70:	pop	{r4, r5, fp, pc}
   17d74:	movw	r0, #61904	; 0xf1d0
   17d78:	mov	r1, #55	; 0x37
   17d7c:	mov	r2, #1
   17d80:	movt	r0, #2
   17d84:	ldr	r3, [r0]
   17d88:	movw	r0, #57196	; 0xdf6c
   17d8c:	movt	r0, #1
   17d90:	bl	11484 <fwrite@plt>
   17d94:	bl	116a0 <abort@plt>
   17d98:	push	{r4, r5, r6, sl, fp, lr}
   17d9c:	add	fp, sp, #16
   17da0:	mov	r4, r0
   17da4:	movw	r0, #62568	; 0xf468
   17da8:	movt	r0, #2
   17dac:	cmp	r4, #0
   17db0:	moveq	r4, r0
   17db4:	bl	11598 <__errno_location@plt>
   17db8:	ldr	r6, [r0]
   17dbc:	mov	r5, r0
   17dc0:	mov	r0, r4
   17dc4:	mov	r1, #48	; 0x30
   17dc8:	bl	1a664 <__assert_fail@plt+0x8f94>
   17dcc:	str	r6, [r5]
   17dd0:	pop	{r4, r5, r6, sl, fp, pc}
   17dd4:	movw	r1, #62568	; 0xf468
   17dd8:	cmp	r0, #0
   17ddc:	movt	r1, #2
   17de0:	movne	r1, r0
   17de4:	ldr	r0, [r1]
   17de8:	bx	lr
   17dec:	movw	r2, #62568	; 0xf468
   17df0:	cmp	r0, #0
   17df4:	movt	r2, #2
   17df8:	movne	r2, r0
   17dfc:	str	r1, [r2]
   17e00:	bx	lr
   17e04:	movw	r3, #62568	; 0xf468
   17e08:	cmp	r0, #0
   17e0c:	and	r2, r2, #1
   17e10:	movt	r3, #2
   17e14:	movne	r3, r0
   17e18:	ubfx	r0, r1, #5, #3
   17e1c:	and	r1, r1, #31
   17e20:	add	ip, r3, r0, lsl #2
   17e24:	mov	r0, #1
   17e28:	ldr	r3, [ip, #8]
   17e2c:	and	r0, r0, r3, lsr r1
   17e30:	eor	r2, r0, r2
   17e34:	eor	r1, r3, r2, lsl r1
   17e38:	str	r1, [ip, #8]
   17e3c:	bx	lr
   17e40:	movw	r2, #62568	; 0xf468
   17e44:	cmp	r0, #0
   17e48:	movt	r2, #2
   17e4c:	movne	r2, r0
   17e50:	ldr	r0, [r2, #4]
   17e54:	str	r1, [r2, #4]
   17e58:	bx	lr
   17e5c:	push	{fp, lr}
   17e60:	mov	fp, sp
   17e64:	movw	r3, #62568	; 0xf468
   17e68:	cmp	r0, #0
   17e6c:	movt	r3, #2
   17e70:	movne	r3, r0
   17e74:	cmp	r1, #0
   17e78:	mov	r0, #10
   17e7c:	cmpne	r2, #0
   17e80:	str	r0, [r3]
   17e84:	bne	17e8c <__assert_fail@plt+0x67bc>
   17e88:	bl	116a0 <abort@plt>
   17e8c:	str	r1, [r3, #40]	; 0x28
   17e90:	str	r2, [r3, #44]	; 0x2c
   17e94:	pop	{fp, pc}
   17e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e9c:	add	fp, sp, #28
   17ea0:	sub	sp, sp, #20
   17ea4:	mov	r7, r0
   17ea8:	ldr	r0, [fp, #8]
   17eac:	movw	r5, #62568	; 0xf468
   17eb0:	mov	r8, r3
   17eb4:	mov	r9, r2
   17eb8:	mov	sl, r1
   17ebc:	movt	r5, #2
   17ec0:	cmp	r0, #0
   17ec4:	movne	r5, r0
   17ec8:	bl	11598 <__errno_location@plt>
   17ecc:	ldr	r2, [r5, #40]	; 0x28
   17ed0:	ldr	r3, [r5, #44]	; 0x2c
   17ed4:	mov	r4, r0
   17ed8:	ldm	r5, {r0, r1}
   17edc:	add	r5, r5, #8
   17ee0:	ldr	r6, [r4]
   17ee4:	stm	sp, {r0, r1, r5}
   17ee8:	mov	r0, r7
   17eec:	mov	r1, sl
   17ef0:	str	r2, [sp, #12]
   17ef4:	str	r3, [sp, #16]
   17ef8:	mov	r2, r9
   17efc:	mov	r3, r8
   17f00:	bl	17f10 <__assert_fail@plt+0x6840>
   17f04:	str	r6, [r4]
   17f08:	sub	sp, fp, #28
   17f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f14:	add	fp, sp, #28
   17f18:	sub	sp, sp, #156	; 0x9c
   17f1c:	mov	r5, r0
   17f20:	add	r0, r2, #1
   17f24:	mov	r6, r1
   17f28:	mov	sl, r3
   17f2c:	str	r2, [fp, #-80]	; 0xffffffb0
   17f30:	str	r0, [sp, #72]	; 0x48
   17f34:	ldr	r0, [fp, #12]
   17f38:	and	r1, r0, #1
   17f3c:	str	r1, [sp, #36]	; 0x24
   17f40:	and	r1, r0, #4
   17f44:	str	r1, [sp, #32]
   17f48:	ubfx	r9, r0, #1, #1
   17f4c:	bl	1149c <__ctype_get_mb_cur_max@plt>
   17f50:	str	r0, [sp, #40]	; 0x28
   17f54:	ldr	r0, [fp, #24]
   17f58:	ldr	r7, [fp, #8]
   17f5c:	mov	r1, #0
   17f60:	str	r5, [fp, #-84]	; 0xffffffac
   17f64:	str	r1, [fp, #-56]	; 0xffffffc8
   17f68:	mov	r1, #0
   17f6c:	str	r1, [sp, #60]	; 0x3c
   17f70:	mov	r1, #1
   17f74:	str	r1, [fp, #-48]	; 0xffffffd0
   17f78:	str	r0, [sp, #80]	; 0x50
   17f7c:	ldr	r0, [fp, #20]
   17f80:	str	r0, [sp, #76]	; 0x4c
   17f84:	mov	r0, #0
   17f88:	str	r0, [sp, #56]	; 0x38
   17f8c:	mov	r0, #0
   17f90:	str	r0, [fp, #-88]	; 0xffffffa8
   17f94:	mov	r0, #0
   17f98:	str	r0, [fp, #-72]	; 0xffffffb8
   17f9c:	mov	r0, #0
   17fa0:	cmp	r7, #10
   17fa4:	bhi	18f38 <__assert_fail@plt+0x7868>
   17fa8:	add	r1, pc, #24
   17fac:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17fb0:	mov	r4, r6
   17fb4:	mov	r8, #0
   17fb8:	mov	r2, #1
   17fbc:	mov	r3, #0
   17fc0:	mov	lr, sl
   17fc4:	ldr	pc, [r1, r7, lsl #2]
   17fc8:	andeq	r8, r1, ip, lsl #1
   17fcc:	andeq	r8, r1, r0, ror #1
   17fd0:	andeq	r8, r1, r0, lsr #1
   17fd4:	andeq	r8, r1, r4, lsl #1
   17fd8:	ldrdeq	r8, [r1], -r4
   17fdc:	andeq	r8, r1, r8, lsl #2
   17fe0:	strheq	r8, [r1], -r0
   17fe4:	andeq	r8, r1, ip, lsl #3
   17fe8:	strdeq	r7, [r1], -r4
   17fec:	strdeq	r7, [r1], -r4
   17ff0:	andeq	r8, r1, ip, lsl r0
   17ff4:	movw	r0, #57342	; 0xdffe
   17ff8:	mov	r1, r7
   17ffc:	movt	r0, #1
   18000:	bl	19940 <__assert_fail@plt+0x8270>
   18004:	str	r0, [sp, #76]	; 0x4c
   18008:	movw	r0, #57344	; 0xe000
   1800c:	mov	r1, r7
   18010:	movt	r0, #1
   18014:	bl	19940 <__assert_fail@plt+0x8270>
   18018:	str	r0, [sp, #80]	; 0x50
   1801c:	mov	r8, #0
   18020:	tst	r9, #1
   18024:	bne	1805c <__assert_fail@plt+0x698c>
   18028:	ldr	r0, [sp, #76]	; 0x4c
   1802c:	ldrb	r0, [r0]
   18030:	cmp	r0, #0
   18034:	beq	1805c <__assert_fail@plt+0x698c>
   18038:	ldr	r1, [sp, #76]	; 0x4c
   1803c:	mov	r8, #0
   18040:	add	r1, r1, #1
   18044:	cmp	r8, r4
   18048:	strbcc	r0, [r5, r8]
   1804c:	ldrb	r0, [r1, r8]
   18050:	add	r8, r8, #1
   18054:	cmp	r0, #0
   18058:	bne	18044 <__assert_fail@plt+0x6974>
   1805c:	ldr	r6, [sp, #80]	; 0x50
   18060:	mov	r0, r6
   18064:	bl	11574 <strlen@plt>
   18068:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1806c:	str	r0, [fp, #-72]	; 0xffffffb8
   18070:	str	r6, [fp, #-88]	; 0xffffffa8
   18074:	mov	r2, #1
   18078:	mov	r3, r9
   1807c:	mov	lr, sl
   18080:	b	1818c <__assert_fail@plt+0x6abc>
   18084:	mov	r0, #1
   18088:	b	180e0 <__assert_fail@plt+0x6a10>
   1808c:	mov	r7, #0
   18090:	mov	r8, #0
   18094:	mov	r2, r0
   18098:	mov	r3, #0
   1809c:	b	1818c <__assert_fail@plt+0x6abc>
   180a0:	tst	r9, #1
   180a4:	bne	180e0 <__assert_fail@plt+0x6a10>
   180a8:	mov	r2, r0
   180ac:	b	18138 <__assert_fail@plt+0x6a68>
   180b0:	mov	r0, #1
   180b4:	mov	r8, #0
   180b8:	mov	r7, #5
   180bc:	mov	r2, #1
   180c0:	str	r0, [fp, #-72]	; 0xffffffb8
   180c4:	movw	r0, #57340	; 0xdffc
   180c8:	movt	r0, #1
   180cc:	str	r0, [fp, #-88]	; 0xffffffa8
   180d0:	b	18100 <__assert_fail@plt+0x6a30>
   180d4:	mov	r2, #1
   180d8:	tst	r9, #1
   180dc:	beq	18138 <__assert_fail@plt+0x6a68>
   180e0:	mov	r1, #1
   180e4:	mov	r8, #0
   180e8:	mov	r7, #2
   180ec:	mov	r2, r0
   180f0:	str	r1, [fp, #-72]	; 0xffffffb8
   180f4:	movw	r1, #57344	; 0xe000
   180f8:	movt	r1, #1
   180fc:	str	r1, [fp, #-88]	; 0xffffffa8
   18100:	mov	r3, #1
   18104:	b	1818c <__assert_fail@plt+0x6abc>
   18108:	tst	r9, #1
   1810c:	beq	1815c <__assert_fail@plt+0x6a8c>
   18110:	mov	r0, #1
   18114:	mov	r8, #0
   18118:	mov	r2, #1
   1811c:	mov	r3, #1
   18120:	mov	r7, #5
   18124:	str	r0, [fp, #-72]	; 0xffffffb8
   18128:	movw	r0, #57340	; 0xdffc
   1812c:	movt	r0, #1
   18130:	str	r0, [fp, #-88]	; 0xffffffa8
   18134:	b	1818c <__assert_fail@plt+0x6abc>
   18138:	cmp	r4, #0
   1813c:	mov	r8, #1
   18140:	mov	r3, #0
   18144:	mov	r7, #2
   18148:	movne	r0, #39	; 0x27
   1814c:	strbne	r0, [r5]
   18150:	movw	r0, #57344	; 0xe000
   18154:	movt	r0, #1
   18158:	b	18180 <__assert_fail@plt+0x6ab0>
   1815c:	cmp	r4, #0
   18160:	mov	r8, #1
   18164:	mov	r2, #1
   18168:	mov	r7, #5
   1816c:	mov	r3, #0
   18170:	movne	r0, #34	; 0x22
   18174:	strbne	r0, [r5]
   18178:	movw	r0, #57340	; 0xdffc
   1817c:	movt	r0, #1
   18180:	str	r0, [fp, #-88]	; 0xffffffa8
   18184:	mov	r0, #1
   18188:	str	r0, [fp, #-72]	; 0xffffffb8
   1818c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18190:	eor	r6, r3, #1
   18194:	str	r7, [fp, #-68]	; 0xffffffbc
   18198:	str	r3, [fp, #-76]	; 0xffffffb4
   1819c:	str	r2, [sp, #84]	; 0x54
   181a0:	str	r6, [sp, #92]	; 0x5c
   181a4:	cmp	r0, #0
   181a8:	movwne	r0, #1
   181ac:	and	r1, r0, r3
   181b0:	and	r1, r2, r1
   181b4:	str	r1, [sp, #48]	; 0x30
   181b8:	sub	r1, r7, #2
   181bc:	clz	r1, r1
   181c0:	lsr	r1, r1, #5
   181c4:	and	r1, r1, r3
   181c8:	str	r1, [sp, #64]	; 0x40
   181cc:	subs	r1, r7, #2
   181d0:	mov	r7, #0
   181d4:	movwne	r1, #1
   181d8:	orr	r6, r1, r6
   181dc:	and	r1, r1, r2
   181e0:	and	r0, r0, r1
   181e4:	str	r6, [sp, #68]	; 0x44
   181e8:	str	r0, [fp, #-60]	; 0xffffffc4
   181ec:	orr	r0, r1, r3
   181f0:	ldr	r1, [fp, #16]
   181f4:	eor	r0, r0, #1
   181f8:	clz	r1, r1
   181fc:	lsr	r1, r1, #5
   18200:	orr	r0, r1, r0
   18204:	str	r0, [fp, #-64]	; 0xffffffc0
   18208:	eor	r0, r2, #1
   1820c:	str	r0, [sp, #52]	; 0x34
   18210:	cmn	lr, #1
   18214:	beq	18224 <__assert_fail@plt+0x6b54>
   18218:	cmp	r7, lr
   1821c:	bne	18230 <__assert_fail@plt+0x6b60>
   18220:	b	18d78 <__assert_fail@plt+0x76a8>
   18224:	ldrb	r0, [ip, r7]
   18228:	cmp	r0, #0
   1822c:	beq	18d80 <__assert_fail@plt+0x76b0>
   18230:	ldr	r0, [fp, #-60]	; 0xffffffc4
   18234:	mov	sl, #0
   18238:	cmp	r0, #0
   1823c:	beq	18274 <__assert_fail@plt+0x6ba4>
   18240:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18244:	add	r5, r7, r0
   18248:	cmp	r0, #2
   1824c:	bcc	18268 <__assert_fail@plt+0x6b98>
   18250:	cmn	lr, #1
   18254:	bne	18268 <__assert_fail@plt+0x6b98>
   18258:	mov	r0, ip
   1825c:	bl	11574 <strlen@plt>
   18260:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18264:	mov	lr, r0
   18268:	cmp	r5, lr
   1826c:	bls	1827c <__assert_fail@plt+0x6bac>
   18270:	ldr	r5, [fp, #-84]	; 0xffffffac
   18274:	mov	r0, #0
   18278:	b	182c8 <__assert_fail@plt+0x6bf8>
   1827c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18280:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18284:	add	r0, ip, r7
   18288:	mov	r6, r4
   1828c:	mov	r4, lr
   18290:	bl	11568 <bcmp@plt>
   18294:	ldr	r2, [sp, #92]	; 0x5c
   18298:	cmp	r0, #0
   1829c:	ldr	r5, [fp, #-84]	; 0xffffffac
   182a0:	mov	r1, r0
   182a4:	movwne	r1, #1
   182a8:	orr	r1, r1, r2
   182ac:	tst	r1, #1
   182b0:	beq	18e08 <__assert_fail@plt+0x7738>
   182b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   182b8:	clz	r0, r0
   182bc:	mov	lr, r4
   182c0:	mov	r4, r6
   182c4:	lsr	r0, r0, #5
   182c8:	str	r0, [fp, #-52]	; 0xffffffcc
   182cc:	ldrb	r6, [ip, r7]
   182d0:	cmp	r6, #126	; 0x7e
   182d4:	bhi	18804 <__assert_fail@plt+0x7134>
   182d8:	add	r3, pc, #16
   182dc:	mov	r9, #1
   182e0:	mov	r2, #110	; 0x6e
   182e4:	mov	r0, #97	; 0x61
   182e8:	mov	r1, #0
   182ec:	ldr	pc, [r3, r6, lsl #2]
   182f0:	andeq	r8, r1, r4, ror #12
   182f4:	andeq	r8, r1, r4, lsl #16
   182f8:	andeq	r8, r1, r4, lsl #16
   182fc:	andeq	r8, r1, r4, lsl #16
   18300:	andeq	r8, r1, r4, lsl #16
   18304:	andeq	r8, r1, r4, lsl #16
   18308:	andeq	r8, r1, r4, lsl #16
   1830c:	andeq	r8, r1, r0, ror #17
   18310:	andeq	r8, r1, r4, asr #12
   18314:	andeq	r8, r1, ip, lsr r6
   18318:	andeq	r8, r1, r0, asr r6
   1831c:	andeq	r8, r1, ip, ror #14
   18320:	andeq	r8, r1, r4, lsr r6
   18324:	andeq	r8, r1, ip, asr #12
   18328:	andeq	r8, r1, r4, lsl #16
   1832c:	andeq	r8, r1, r4, lsl #16
   18330:	andeq	r8, r1, r4, lsl #16
   18334:	andeq	r8, r1, r4, lsl #16
   18338:	andeq	r8, r1, r4, lsl #16
   1833c:	andeq	r8, r1, r4, lsl #16
   18340:	andeq	r8, r1, r4, lsl #16
   18344:	andeq	r8, r1, r4, lsl #16
   18348:	andeq	r8, r1, r4, lsl #16
   1834c:	andeq	r8, r1, r4, lsl #16
   18350:	andeq	r8, r1, r4, lsl #16
   18354:	andeq	r8, r1, r4, lsl #16
   18358:	andeq	r8, r1, r4, lsl #16
   1835c:	andeq	r8, r1, r4, lsl #16
   18360:	andeq	r8, r1, r4, lsl #16
   18364:	andeq	r8, r1, r4, lsl #16
   18368:	andeq	r8, r1, r4, lsl #16
   1836c:	andeq	r8, r1, r4, lsl #16
   18370:	andeq	r8, r1, r8, ror #11
   18374:	andeq	r8, r1, ip, ror #11
   18378:	andeq	r8, r1, ip, ror #11
   1837c:	ldrdeq	r8, [r1], -r4
   18380:	andeq	r8, r1, ip, ror #11
   18384:	andeq	r8, r1, ip, ror #9
   18388:	andeq	r8, r1, ip, ror #11
   1838c:	andeq	r8, r1, r4, ror r7
   18390:	andeq	r8, r1, ip, ror #11
   18394:	andeq	r8, r1, ip, ror #11
   18398:	andeq	r8, r1, ip, ror #11
   1839c:	andeq	r8, r1, ip, ror #9
   183a0:	andeq	r8, r1, ip, ror #9
   183a4:	andeq	r8, r1, ip, ror #9
   183a8:	andeq	r8, r1, ip, ror #9
   183ac:	andeq	r8, r1, ip, ror #9
   183b0:	andeq	r8, r1, ip, ror #9
   183b4:	andeq	r8, r1, ip, ror #9
   183b8:	andeq	r8, r1, ip, ror #9
   183bc:	andeq	r8, r1, ip, ror #9
   183c0:	andeq	r8, r1, ip, ror #9
   183c4:	andeq	r8, r1, ip, ror #9
   183c8:	andeq	r8, r1, ip, ror #9
   183cc:	andeq	r8, r1, ip, ror #9
   183d0:	andeq	r8, r1, ip, ror #9
   183d4:	andeq	r8, r1, ip, ror #9
   183d8:	andeq	r8, r1, ip, ror #9
   183dc:	andeq	r8, r1, ip, ror #11
   183e0:	andeq	r8, r1, ip, ror #11
   183e4:	andeq	r8, r1, ip, ror #11
   183e8:	andeq	r8, r1, ip, ror #11
   183ec:	andeq	r8, r1, ip, lsr r7
   183f0:	andeq	r8, r1, r4, lsl #16
   183f4:	andeq	r8, r1, ip, ror #9
   183f8:	andeq	r8, r1, ip, ror #9
   183fc:	andeq	r8, r1, ip, ror #9
   18400:	andeq	r8, r1, ip, ror #9
   18404:	andeq	r8, r1, ip, ror #9
   18408:	andeq	r8, r1, ip, ror #9
   1840c:	andeq	r8, r1, ip, ror #9
   18410:	andeq	r8, r1, ip, ror #9
   18414:	andeq	r8, r1, ip, ror #9
   18418:	andeq	r8, r1, ip, ror #9
   1841c:	andeq	r8, r1, ip, ror #9
   18420:	andeq	r8, r1, ip, ror #9
   18424:	andeq	r8, r1, ip, ror #9
   18428:	andeq	r8, r1, ip, ror #9
   1842c:	andeq	r8, r1, ip, ror #9
   18430:	andeq	r8, r1, ip, ror #9
   18434:	andeq	r8, r1, ip, ror #9
   18438:	andeq	r8, r1, ip, ror #9
   1843c:	andeq	r8, r1, ip, ror #9
   18440:	andeq	r8, r1, ip, ror #9
   18444:	andeq	r8, r1, ip, ror #9
   18448:	andeq	r8, r1, ip, ror #9
   1844c:	andeq	r8, r1, ip, ror #9
   18450:	andeq	r8, r1, ip, ror #9
   18454:	andeq	r8, r1, ip, ror #9
   18458:	andeq	r8, r1, ip, ror #9
   1845c:	andeq	r8, r1, ip, ror #11
   18460:	andeq	r8, r1, r4, lsl r6
   18464:	andeq	r8, r1, ip, ror #9
   18468:	andeq	r8, r1, ip, ror #11
   1846c:	andeq	r8, r1, ip, ror #9
   18470:	andeq	r8, r1, ip, ror #11
   18474:	andeq	r8, r1, ip, ror #9
   18478:	andeq	r8, r1, ip, ror #9
   1847c:	andeq	r8, r1, ip, ror #9
   18480:	andeq	r8, r1, ip, ror #9
   18484:	andeq	r8, r1, ip, ror #9
   18488:	andeq	r8, r1, ip, ror #9
   1848c:	andeq	r8, r1, ip, ror #9
   18490:	andeq	r8, r1, ip, ror #9
   18494:	andeq	r8, r1, ip, ror #9
   18498:	andeq	r8, r1, ip, ror #9
   1849c:	andeq	r8, r1, ip, ror #9
   184a0:	andeq	r8, r1, ip, ror #9
   184a4:	andeq	r8, r1, ip, ror #9
   184a8:	andeq	r8, r1, ip, ror #9
   184ac:	andeq	r8, r1, ip, ror #9
   184b0:	andeq	r8, r1, ip, ror #9
   184b4:	andeq	r8, r1, ip, ror #9
   184b8:	andeq	r8, r1, ip, ror #9
   184bc:	andeq	r8, r1, ip, ror #9
   184c0:	andeq	r8, r1, ip, ror #9
   184c4:	andeq	r8, r1, ip, ror #9
   184c8:	andeq	r8, r1, ip, ror #9
   184cc:	andeq	r8, r1, ip, ror #9
   184d0:	andeq	r8, r1, ip, ror #9
   184d4:	andeq	r8, r1, ip, ror #9
   184d8:	andeq	r8, r1, ip, ror #9
   184dc:	andeq	r8, r1, r8, lsr #11
   184e0:	andeq	r8, r1, ip, ror #11
   184e4:	andeq	r8, r1, r8, lsr #11
   184e8:	ldrdeq	r8, [r1], -r4
   184ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   184f0:	tst	r0, #1
   184f4:	bne	18520 <__assert_fail@plt+0x6e50>
   184f8:	ldr	r1, [fp, #16]
   184fc:	ubfx	r0, r6, #5, #3
   18500:	mov	r2, #1
   18504:	ldr	r0, [r1, r0, lsl #2]
   18508:	and	r1, r6, #31
   1850c:	tst	r0, r2, lsl r1
   18510:	beq	18520 <__assert_fail@plt+0x6e50>
   18514:	mov	r0, r6
   18518:	mov	r1, r9
   1851c:	b	18534 <__assert_fail@plt+0x6e64>
   18520:	ldr	r0, [fp, #-52]	; 0xffffffcc
   18524:	mov	r1, r9
   18528:	cmp	r0, #0
   1852c:	mov	r0, r6
   18530:	beq	18874 <__assert_fail@plt+0x71a4>
   18534:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18538:	tst	r2, #1
   1853c:	bne	18e44 <__assert_fail@plt+0x7774>
   18540:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18544:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18548:	subs	r2, r2, #2
   1854c:	movwne	r2, #1
   18550:	orr	r2, r2, r3
   18554:	tst	r2, #1
   18558:	bne	18594 <__assert_fail@plt+0x6ec4>
   1855c:	cmp	r8, r4
   18560:	movcc	r2, #39	; 0x27
   18564:	strbcc	r2, [r5, r8]
   18568:	add	r2, r8, #1
   1856c:	cmp	r2, r4
   18570:	movcc	r3, #36	; 0x24
   18574:	strbcc	r3, [r5, r2]
   18578:	add	r2, r8, #2
   1857c:	add	r8, r8, #3
   18580:	cmp	r2, r4
   18584:	movcc	r3, #39	; 0x27
   18588:	strbcc	r3, [r5, r2]
   1858c:	mov	r2, #1
   18590:	str	r2, [fp, #-56]	; 0xffffffc8
   18594:	cmp	r8, r4
   18598:	movcc	r2, #92	; 0x5c
   1859c:	strbcc	r2, [r5, r8]
   185a0:	add	r8, r8, #1
   185a4:	b	188b8 <__assert_fail@plt+0x71e8>
   185a8:	cmp	lr, #1
   185ac:	beq	185d4 <__assert_fail@plt+0x6f04>
   185b0:	mov	r9, #0
   185b4:	cmn	lr, #1
   185b8:	bne	185e0 <__assert_fail@plt+0x6f10>
   185bc:	ldrb	r0, [ip, #1]
   185c0:	cmp	r0, #0
   185c4:	beq	185d4 <__assert_fail@plt+0x6f04>
   185c8:	mvn	lr, #0
   185cc:	mov	sl, #0
   185d0:	b	184ec <__assert_fail@plt+0x6e1c>
   185d4:	mov	r9, #0
   185d8:	cmp	r7, #0
   185dc:	beq	185e8 <__assert_fail@plt+0x6f18>
   185e0:	mov	sl, #0
   185e4:	b	184ec <__assert_fail@plt+0x6e1c>
   185e8:	mov	r1, #1
   185ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   185f0:	cmp	r0, #2
   185f4:	bne	1860c <__assert_fail@plt+0x6f3c>
   185f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   185fc:	mov	r9, r1
   18600:	tst	r0, #1
   18604:	beq	184ec <__assert_fail@plt+0x6e1c>
   18608:	b	18e44 <__assert_fail@plt+0x7774>
   1860c:	mov	r9, r1
   18610:	b	184ec <__assert_fail@plt+0x6e1c>
   18614:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18618:	cmp	r0, #2
   1861c:	bne	18858 <__assert_fail@plt+0x7188>
   18620:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18624:	tst	r0, #1
   18628:	bne	18e44 <__assert_fail@plt+0x7774>
   1862c:	mov	sl, #0
   18630:	b	1886c <__assert_fail@plt+0x719c>
   18634:	mov	r0, #102	; 0x66
   18638:	b	188e0 <__assert_fail@plt+0x7210>
   1863c:	mov	r2, #116	; 0x74
   18640:	b	18650 <__assert_fail@plt+0x6f80>
   18644:	mov	r0, #98	; 0x62
   18648:	b	188e0 <__assert_fail@plt+0x7210>
   1864c:	mov	r2, #114	; 0x72
   18650:	ldr	r0, [sp, #68]	; 0x44
   18654:	tst	r0, #1
   18658:	mov	r0, r2
   1865c:	bne	188e0 <__assert_fail@plt+0x7210>
   18660:	b	18e44 <__assert_fail@plt+0x7774>
   18664:	ldr	r0, [sp, #84]	; 0x54
   18668:	tst	r0, #1
   1866c:	beq	188fc <__assert_fail@plt+0x722c>
   18670:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18674:	tst	r0, #1
   18678:	bne	18f30 <__assert_fail@plt+0x7860>
   1867c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18680:	ldr	r1, [fp, #-56]	; 0xffffffc8
   18684:	subs	r0, r0, #2
   18688:	movwne	r0, #1
   1868c:	orr	r0, r0, r1
   18690:	tst	r0, #1
   18694:	bne	186d0 <__assert_fail@plt+0x7000>
   18698:	cmp	r8, r4
   1869c:	movcc	r0, #39	; 0x27
   186a0:	strbcc	r0, [r5, r8]
   186a4:	add	r0, r8, #1
   186a8:	cmp	r0, r4
   186ac:	movcc	r1, #36	; 0x24
   186b0:	strbcc	r1, [r5, r0]
   186b4:	add	r0, r8, #2
   186b8:	add	r8, r8, #3
   186bc:	cmp	r0, r4
   186c0:	movcc	r1, #39	; 0x27
   186c4:	strbcc	r1, [r5, r0]
   186c8:	mov	r0, #1
   186cc:	str	r0, [fp, #-56]	; 0xffffffc8
   186d0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   186d4:	cmp	r8, r4
   186d8:	mov	r9, #0
   186dc:	mov	sl, #1
   186e0:	mov	r6, #48	; 0x30
   186e4:	movcc	r0, #92	; 0x5c
   186e8:	strbcc	r0, [r5, r8]
   186ec:	add	r0, r8, #1
   186f0:	cmp	r1, #2
   186f4:	beq	18ac4 <__assert_fail@plt+0x73f4>
   186f8:	add	r1, r7, #1
   186fc:	cmp	r1, lr
   18700:	bcs	18ac4 <__assert_fail@plt+0x73f4>
   18704:	ldrb	r1, [ip, r1]
   18708:	sub	r1, r1, #48	; 0x30
   1870c:	uxtb	r1, r1
   18710:	cmp	r1, #9
   18714:	bhi	18ac4 <__assert_fail@plt+0x73f4>
   18718:	cmp	r0, r4
   1871c:	movcc	r1, #48	; 0x30
   18720:	strbcc	r1, [r5, r0]
   18724:	add	r0, r8, #2
   18728:	add	r8, r8, #3
   1872c:	cmp	r0, r4
   18730:	movcc	r1, #48	; 0x30
   18734:	strbcc	r1, [r5, r0]
   18738:	b	184ec <__assert_fail@plt+0x6e1c>
   1873c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18740:	mov	sl, #0
   18744:	mov	r6, #63	; 0x3f
   18748:	cmp	r0, #5
   1874c:	beq	18acc <__assert_fail@plt+0x73fc>
   18750:	cmp	r0, #2
   18754:	bne	18b74 <__assert_fail@plt+0x74a4>
   18758:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1875c:	mov	r9, #0
   18760:	tst	r0, #1
   18764:	beq	184ec <__assert_fail@plt+0x6e1c>
   18768:	b	18e44 <__assert_fail@plt+0x7774>
   1876c:	mov	r0, #118	; 0x76
   18770:	b	188e0 <__assert_fail@plt+0x7210>
   18774:	mov	r0, #1
   18778:	mov	r6, #39	; 0x27
   1877c:	str	r0, [sp, #60]	; 0x3c
   18780:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18784:	cmp	r0, #2
   18788:	bne	18918 <__assert_fail@plt+0x7248>
   1878c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18790:	tst	r0, #1
   18794:	bne	18e44 <__assert_fail@plt+0x7774>
   18798:	ldr	r2, [sp, #56]	; 0x38
   1879c:	clz	r1, r4
   187a0:	mov	sl, #0
   187a4:	mov	r9, #1
   187a8:	lsr	r1, r1, #5
   187ac:	cmp	r2, #0
   187b0:	mov	r0, r2
   187b4:	movwne	r0, #1
   187b8:	orrs	r0, r0, r1
   187bc:	moveq	r2, r4
   187c0:	moveq	r4, r0
   187c4:	cmp	r8, r4
   187c8:	str	r2, [sp, #56]	; 0x38
   187cc:	movcc	r0, #39	; 0x27
   187d0:	strbcc	r0, [r5, r8]
   187d4:	add	r0, r8, #1
   187d8:	cmp	r0, r4
   187dc:	movcc	r1, #92	; 0x5c
   187e0:	strbcc	r1, [r5, r0]
   187e4:	add	r0, r8, #2
   187e8:	add	r8, r8, #3
   187ec:	cmp	r0, r4
   187f0:	movcc	r1, #39	; 0x27
   187f4:	strbcc	r1, [r5, r0]
   187f8:	mov	r0, #0
   187fc:	str	r0, [fp, #-56]	; 0xffffffc8
   18800:	b	184ec <__assert_fail@plt+0x6e1c>
   18804:	ldr	r0, [sp, #40]	; 0x28
   18808:	str	r4, [sp, #88]	; 0x58
   1880c:	cmp	r0, #1
   18810:	bne	18920 <__assert_fail@plt+0x7250>
   18814:	str	lr, [sp, #28]
   18818:	bl	11550 <__ctype_b_loc@plt>
   1881c:	ldr	r0, [r0]
   18820:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18824:	mov	r2, #1
   18828:	add	r0, r0, r6, lsl #1
   1882c:	ldrb	r0, [r0, #1]
   18830:	ubfx	r9, r0, #6, #1
   18834:	ldr	r0, [sp, #52]	; 0x34
   18838:	cmp	r2, #1
   1883c:	orr	r0, r9, r0
   18840:	bhi	18b7c <__assert_fail@plt+0x74ac>
   18844:	tst	r0, #1
   18848:	beq	18b7c <__assert_fail@plt+0x74ac>
   1884c:	ldr	lr, [sp, #28]
   18850:	ldr	r4, [sp, #88]	; 0x58
   18854:	b	184ec <__assert_fail@plt+0x6e1c>
   18858:	ldr	r1, [sp, #48]	; 0x30
   1885c:	mov	sl, #0
   18860:	mov	r0, #92	; 0x5c
   18864:	cmp	r1, #0
   18868:	beq	188e0 <__assert_fail@plt+0x7210>
   1886c:	mov	r6, #92	; 0x5c
   18870:	mov	r9, #0
   18874:	cmp	sl, #0
   18878:	bne	188b0 <__assert_fail@plt+0x71e0>
   1887c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18880:	tst	r0, #1
   18884:	beq	188b0 <__assert_fail@plt+0x71e0>
   18888:	cmp	r8, r4
   1888c:	movcc	r0, #39	; 0x27
   18890:	strbcc	r0, [r5, r8]
   18894:	add	r0, r8, #1
   18898:	add	r8, r8, #2
   1889c:	cmp	r0, r4
   188a0:	movcc	r1, #39	; 0x27
   188a4:	strbcc	r1, [r5, r0]
   188a8:	mov	r0, #0
   188ac:	str	r0, [fp, #-56]	; 0xffffffc8
   188b0:	mov	r1, r9
   188b4:	mov	r0, r6
   188b8:	cmp	r8, r4
   188bc:	strbcc	r0, [r5, r8]
   188c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   188c4:	add	r8, r8, #1
   188c8:	and	r0, r0, r1
   188cc:	str	r0, [fp, #-48]	; 0xffffffd0
   188d0:	add	r7, r7, #1
   188d4:	cmn	lr, #1
   188d8:	bne	18218 <__assert_fail@plt+0x6b48>
   188dc:	b	18224 <__assert_fail@plt+0x6b54>
   188e0:	ldr	r1, [sp, #84]	; 0x54
   188e4:	mov	sl, #0
   188e8:	mov	r9, #0
   188ec:	tst	r1, #1
   188f0:	mov	r1, #0
   188f4:	beq	184ec <__assert_fail@plt+0x6e1c>
   188f8:	b	18534 <__assert_fail@plt+0x6e64>
   188fc:	ldr	r0, [sp, #36]	; 0x24
   18900:	mov	r6, #0
   18904:	mov	sl, #0
   18908:	mov	r9, #0
   1890c:	cmp	r0, #0
   18910:	beq	184ec <__assert_fail@plt+0x6e1c>
   18914:	b	188d0 <__assert_fail@plt+0x7200>
   18918:	mov	r9, #1
   1891c:	b	184ec <__assert_fail@plt+0x6e1c>
   18920:	mov	r0, #0
   18924:	cmn	lr, #1
   18928:	sub	r4, fp, #40	; 0x28
   1892c:	str	r0, [fp, #-36]	; 0xffffffdc
   18930:	str	r0, [fp, #-40]	; 0xffffffd8
   18934:	bne	18948 <__assert_fail@plt+0x7278>
   18938:	mov	r0, ip
   1893c:	bl	11574 <strlen@plt>
   18940:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18944:	mov	lr, r0
   18948:	ldr	r0, [sp, #72]	; 0x48
   1894c:	mov	r9, #1
   18950:	mov	r2, #0
   18954:	str	lr, [sp, #28]
   18958:	add	r0, r0, r7
   1895c:	str	r0, [sp, #20]
   18960:	b	189a4 <__assert_fail@plt+0x72d4>
   18964:	ldr	r5, [sp, #44]	; 0x2c
   18968:	add	r5, r0, r5
   1896c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18970:	bl	11460 <iswprint@plt>
   18974:	cmp	r0, #0
   18978:	sub	r4, fp, #40	; 0x28
   1897c:	movwne	r0, #1
   18980:	and	r9, r9, r0
   18984:	mov	r0, r4
   18988:	bl	1140c <mbsinit@plt>
   1898c:	mov	r2, r5
   18990:	ldr	lr, [sp, #28]
   18994:	ldr	r5, [fp, #-84]	; 0xffffffac
   18998:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1899c:	cmp	r0, #0
   189a0:	bne	18834 <__assert_fail@plt+0x7164>
   189a4:	add	r0, r2, r7
   189a8:	str	r2, [sp, #44]	; 0x2c
   189ac:	mov	r3, r4
   189b0:	add	r1, ip, r0
   189b4:	str	r0, [sp, #24]
   189b8:	sub	r2, lr, r0
   189bc:	sub	r0, fp, #44	; 0x2c
   189c0:	bl	1bc28 <__assert_fail@plt+0xa558>
   189c4:	cmp	r0, #0
   189c8:	beq	18d6c <__assert_fail@plt+0x769c>
   189cc:	cmn	r0, #1
   189d0:	beq	18d28 <__assert_fail@plt+0x7658>
   189d4:	ldr	lr, [sp, #28]
   189d8:	cmn	r0, #2
   189dc:	beq	18d30 <__assert_fail@plt+0x7660>
   189e0:	ldr	r2, [sp, #64]	; 0x40
   189e4:	ldr	r4, [sp, #88]	; 0x58
   189e8:	ldr	ip, [sp, #84]	; 0x54
   189ec:	cmp	r0, #2
   189f0:	mov	r1, #0
   189f4:	movwcc	r1, #1
   189f8:	eor	r2, r2, #1
   189fc:	orrs	r1, r2, r1
   18a00:	bne	18964 <__assert_fail@plt+0x7294>
   18a04:	ldr	r1, [sp, #44]	; 0x2c
   18a08:	ldr	r2, [sp, #20]
   18a0c:	add	r1, r2, r1
   18a10:	sub	r2, r0, #1
   18a14:	b	18a24 <__assert_fail@plt+0x7354>
   18a18:	add	r1, r1, #1
   18a1c:	subs	r2, r2, #1
   18a20:	beq	18964 <__assert_fail@plt+0x7294>
   18a24:	ldrb	r3, [r1]
   18a28:	sub	r3, r3, #91	; 0x5b
   18a2c:	cmp	r3, #33	; 0x21
   18a30:	bhi	18a18 <__assert_fail@plt+0x7348>
   18a34:	add	r5, pc, #0
   18a38:	ldr	pc, [r5, r3, lsl #2]
   18a3c:	andeq	r8, r1, r0, lsr #28
   18a40:	andeq	r8, r1, r0, lsr #28
   18a44:	andeq	r8, r1, r8, lsl sl
   18a48:	andeq	r8, r1, r0, lsr #28
   18a4c:	andeq	r8, r1, r8, lsl sl
   18a50:	andeq	r8, r1, r0, lsr #28
   18a54:	andeq	r8, r1, r8, lsl sl
   18a58:	andeq	r8, r1, r8, lsl sl
   18a5c:	andeq	r8, r1, r8, lsl sl
   18a60:	andeq	r8, r1, r8, lsl sl
   18a64:	andeq	r8, r1, r8, lsl sl
   18a68:	andeq	r8, r1, r8, lsl sl
   18a6c:	andeq	r8, r1, r8, lsl sl
   18a70:	andeq	r8, r1, r8, lsl sl
   18a74:	andeq	r8, r1, r8, lsl sl
   18a78:	andeq	r8, r1, r8, lsl sl
   18a7c:	andeq	r8, r1, r8, lsl sl
   18a80:	andeq	r8, r1, r8, lsl sl
   18a84:	andeq	r8, r1, r8, lsl sl
   18a88:	andeq	r8, r1, r8, lsl sl
   18a8c:	andeq	r8, r1, r8, lsl sl
   18a90:	andeq	r8, r1, r8, lsl sl
   18a94:	andeq	r8, r1, r8, lsl sl
   18a98:	andeq	r8, r1, r8, lsl sl
   18a9c:	andeq	r8, r1, r8, lsl sl
   18aa0:	andeq	r8, r1, r8, lsl sl
   18aa4:	andeq	r8, r1, r8, lsl sl
   18aa8:	andeq	r8, r1, r8, lsl sl
   18aac:	andeq	r8, r1, r8, lsl sl
   18ab0:	andeq	r8, r1, r8, lsl sl
   18ab4:	andeq	r8, r1, r8, lsl sl
   18ab8:	andeq	r8, r1, r8, lsl sl
   18abc:	andeq	r8, r1, r8, lsl sl
   18ac0:	andeq	r8, r1, r0, lsr #28
   18ac4:	mov	r8, r0
   18ac8:	b	184ec <__assert_fail@plt+0x6e1c>
   18acc:	ldr	r0, [sp, #32]
   18ad0:	cmp	r0, #0
   18ad4:	beq	18b74 <__assert_fail@plt+0x74a4>
   18ad8:	add	r0, r7, #2
   18adc:	cmp	r0, lr
   18ae0:	bcs	18b74 <__assert_fail@plt+0x74a4>
   18ae4:	add	r1, r7, ip
   18ae8:	ldrb	r1, [r1, #1]
   18aec:	cmp	r1, #63	; 0x3f
   18af0:	bne	18b74 <__assert_fail@plt+0x74a4>
   18af4:	ldrb	r9, [ip, r0]
   18af8:	sub	r2, r9, #33	; 0x21
   18afc:	cmp	r2, #29
   18b00:	bhi	18b74 <__assert_fail@plt+0x74a4>
   18b04:	movw	r1, #20929	; 0x51c1
   18b08:	mov	r3, #1
   18b0c:	movt	r1, #14336	; 0x3800
   18b10:	tst	r1, r3, lsl r2
   18b14:	beq	18b74 <__assert_fail@plt+0x74a4>
   18b18:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18b1c:	tst	r1, #1
   18b20:	bne	18e44 <__assert_fail@plt+0x7774>
   18b24:	cmp	r8, r4
   18b28:	add	r2, r8, #1
   18b2c:	mov	r6, r9
   18b30:	mov	r7, r0
   18b34:	mov	r9, #0
   18b38:	movcc	r1, #63	; 0x3f
   18b3c:	strbcc	r1, [r5, r8]
   18b40:	cmp	r2, r4
   18b44:	movcc	r1, #34	; 0x22
   18b48:	strbcc	r1, [r5, r2]
   18b4c:	add	r2, r8, #2
   18b50:	cmp	r2, r4
   18b54:	movcc	r1, #34	; 0x22
   18b58:	strbcc	r1, [r5, r2]
   18b5c:	add	r2, r8, #3
   18b60:	add	r8, r8, #4
   18b64:	cmp	r2, r4
   18b68:	movcc	r1, #63	; 0x3f
   18b6c:	strbcc	r1, [r5, r2]
   18b70:	b	184ec <__assert_fail@plt+0x6e1c>
   18b74:	mov	r9, #0
   18b78:	b	184ec <__assert_fail@plt+0x6e1c>
   18b7c:	ldr	lr, [sp, #28]
   18b80:	ldr	r4, [fp, #-56]	; 0xffffffc8
   18b84:	add	r1, r2, r7
   18b88:	mov	r2, #0
   18b8c:	str	r1, [sp, #44]	; 0x2c
   18b90:	tst	r0, #1
   18b94:	bne	18cb0 <__assert_fail@plt+0x75e0>
   18b98:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18b9c:	tst	r1, #1
   18ba0:	bne	18e40 <__assert_fail@plt+0x7770>
   18ba4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18ba8:	subs	r2, r1, #2
   18bac:	movwne	r2, #1
   18bb0:	orr	r2, r2, r4
   18bb4:	tst	r2, #1
   18bb8:	bne	18bfc <__assert_fail@plt+0x752c>
   18bbc:	ldr	r1, [sp, #88]	; 0x58
   18bc0:	add	r2, r8, #1
   18bc4:	mov	r4, #1
   18bc8:	cmp	r8, r1
   18bcc:	movcc	r1, #39	; 0x27
   18bd0:	strbcc	r1, [r5, r8]
   18bd4:	ldr	r1, [sp, #88]	; 0x58
   18bd8:	cmp	r2, r1
   18bdc:	movcc	r1, #36	; 0x24
   18be0:	strbcc	r1, [r5, r2]
   18be4:	ldr	r1, [sp, #88]	; 0x58
   18be8:	add	r2, r8, #2
   18bec:	add	r8, r8, #3
   18bf0:	cmp	r2, r1
   18bf4:	movcc	r1, #39	; 0x27
   18bf8:	strbcc	r1, [r5, r2]
   18bfc:	ldr	r1, [sp, #88]	; 0x58
   18c00:	add	r2, r8, #1
   18c04:	cmp	r8, r1
   18c08:	movcc	r1, #92	; 0x5c
   18c0c:	strbcc	r1, [r5, r8]
   18c10:	ldr	r1, [sp, #88]	; 0x58
   18c14:	cmp	r2, r1
   18c18:	bcs	18c2c <__assert_fail@plt+0x755c>
   18c1c:	uxtb	r3, r6
   18c20:	mov	r1, #48	; 0x30
   18c24:	orr	r3, r1, r3, lsr #6
   18c28:	strb	r3, [r5, r2]
   18c2c:	ldr	r1, [sp, #88]	; 0x58
   18c30:	add	r2, r8, #2
   18c34:	add	r8, r8, #3
   18c38:	cmp	r2, r1
   18c3c:	lsrcc	r3, r6, #3
   18c40:	movcc	r1, #6
   18c44:	bficc	r3, r1, #3, #29
   18c48:	mov	r1, #6
   18c4c:	bfi	r6, r1, #3, #29
   18c50:	strbcc	r3, [r5, r2]
   18c54:	mov	r2, #1
   18c58:	b	18cd8 <__assert_fail@plt+0x7608>
   18c5c:	ldr	r1, [sp, #88]	; 0x58
   18c60:	ldr	r5, [fp, #-84]	; 0xffffffac
   18c64:	ldr	r4, [sp, #88]	; 0x58
   18c68:	cmp	r8, r1
   18c6c:	movcc	r1, #39	; 0x27
   18c70:	strbcc	r1, [r5, r8]
   18c74:	add	r1, r8, #1
   18c78:	add	r8, r8, #2
   18c7c:	cmp	r1, r4
   18c80:	movcc	r4, #39	; 0x27
   18c84:	strbcc	r4, [r5, r1]
   18c88:	mov	r4, #0
   18c8c:	ldr	r1, [sp, #88]	; 0x58
   18c90:	cmp	r8, r1
   18c94:	ldr	r1, [sp, #72]	; 0x48
   18c98:	strbcc	r6, [r5, r8]
   18c9c:	add	r8, r8, #1
   18ca0:	ldrb	r6, [r1, r7]
   18ca4:	mov	r7, r3
   18ca8:	tst	r0, #1
   18cac:	beq	18b98 <__assert_fail@plt+0x74c8>
   18cb0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18cb4:	tst	r1, #1
   18cb8:	beq	18cd0 <__assert_fail@plt+0x7600>
   18cbc:	ldr	r1, [sp, #88]	; 0x58
   18cc0:	cmp	r8, r1
   18cc4:	movcc	r1, #92	; 0x5c
   18cc8:	strbcc	r1, [r5, r8]
   18ccc:	add	r8, r8, #1
   18cd0:	mov	r1, #0
   18cd4:	str	r1, [fp, #-52]	; 0xffffffcc
   18cd8:	ldr	r1, [sp, #44]	; 0x2c
   18cdc:	add	r3, r7, #1
   18ce0:	and	sl, r2, #1
   18ce4:	cmp	r1, r3
   18ce8:	bls	18d0c <__assert_fail@plt+0x763c>
   18cec:	cmp	sl, #0
   18cf0:	mvn	r5, r4
   18cf4:	movwne	sl, #1
   18cf8:	orr	r5, r5, sl
   18cfc:	tst	r5, #1
   18d00:	beq	18c5c <__assert_fail@plt+0x758c>
   18d04:	ldr	r5, [fp, #-84]	; 0xffffffac
   18d08:	b	18c8c <__assert_fail@plt+0x75bc>
   18d0c:	str	r4, [fp, #-56]	; 0xffffffc8
   18d10:	ldr	r4, [sp, #88]	; 0x58
   18d14:	cmp	sl, #0
   18d18:	movwne	sl, #1
   18d1c:	cmp	sl, #0
   18d20:	beq	1887c <__assert_fail@plt+0x71ac>
   18d24:	b	188b0 <__assert_fail@plt+0x71e0>
   18d28:	mov	r9, #0
   18d2c:	b	18d6c <__assert_fail@plt+0x769c>
   18d30:	ldr	r0, [sp, #24]
   18d34:	mov	r9, #0
   18d38:	cmp	lr, r0
   18d3c:	bls	18d6c <__assert_fail@plt+0x769c>
   18d40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18d44:	ldr	r2, [sp, #44]	; 0x2c
   18d48:	add	r0, ip, r7
   18d4c:	ldrb	r1, [r0, r2]
   18d50:	cmp	r1, #0
   18d54:	beq	18834 <__assert_fail@plt+0x7164>
   18d58:	add	r2, r2, #1
   18d5c:	add	r1, r7, r2
   18d60:	cmp	r1, lr
   18d64:	bcc	18d4c <__assert_fail@plt+0x767c>
   18d68:	b	18834 <__assert_fail@plt+0x7164>
   18d6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18d70:	ldr	r2, [sp, #44]	; 0x2c
   18d74:	b	18834 <__assert_fail@plt+0x7164>
   18d78:	mov	lr, r7
   18d7c:	b	18d84 <__assert_fail@plt+0x76b4>
   18d80:	mvn	lr, #0
   18d84:	ldr	r1, [fp, #-68]	; 0xffffffbc
   18d88:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18d8c:	eor	r0, r1, #2
   18d90:	orr	r0, r0, r8
   18d94:	clz	r0, r0
   18d98:	lsr	r0, r0, #5
   18d9c:	tst	r2, r0
   18da0:	bne	18e44 <__assert_fail@plt+0x7774>
   18da4:	subs	r0, r1, #2
   18da8:	movwne	r0, #1
   18dac:	orr	r0, r2, r0
   18db0:	tst	r0, #1
   18db4:	ldreq	r0, [sp, #60]	; 0x3c
   18db8:	eoreq	r0, r0, #1
   18dbc:	tsteq	r0, #1
   18dc0:	bne	18ed8 <__assert_fail@plt+0x7808>
   18dc4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   18dc8:	mov	sl, lr
   18dcc:	tst	r0, #1
   18dd0:	bne	18ea4 <__assert_fail@plt+0x77d4>
   18dd4:	ldr	r6, [sp, #56]	; 0x38
   18dd8:	mov	r9, #0
   18ddc:	cmp	r6, #0
   18de0:	beq	18ed0 <__assert_fail@plt+0x7800>
   18de4:	ldr	r0, [sp, #84]	; 0x54
   18de8:	mov	r1, #0
   18dec:	mov	r7, #2
   18df0:	cmp	r4, #0
   18df4:	str	r1, [fp, #-48]	; 0xffffffd0
   18df8:	mov	r1, #0
   18dfc:	str	r1, [fp, #-76]	; 0xffffffb4
   18e00:	beq	17fa0 <__assert_fail@plt+0x68d0>
   18e04:	b	18ed8 <__assert_fail@plt+0x7808>
   18e08:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18e0c:	ldr	r1, [fp, #12]
   18e10:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18e14:	mov	lr, r4
   18e18:	mov	r4, r6
   18e1c:	b	18e64 <__assert_fail@plt+0x7794>
   18e20:	tst	ip, #1
   18e24:	ldr	r5, [fp, #-84]	; 0xffffffac
   18e28:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18e2c:	ldr	r1, [fp, #12]
   18e30:	mov	r0, #2
   18e34:	movwne	r0, #4
   18e38:	mov	r2, r0
   18e3c:	b	18e64 <__assert_fail@plt+0x7794>
   18e40:	ldr	r4, [sp, #88]	; 0x58
   18e44:	ldr	r1, [sp, #84]	; 0x54
   18e48:	mov	r0, #2
   18e4c:	tst	r1, #1
   18e50:	movwne	r0, #4
   18e54:	ldr	r2, [fp, #-68]	; 0xffffffbc
   18e58:	ldr	r1, [fp, #12]
   18e5c:	cmp	r2, #2
   18e60:	moveq	r2, r0
   18e64:	mov	r0, #0
   18e68:	bic	r1, r1, #2
   18e6c:	str	r2, [sp]
   18e70:	mov	r2, ip
   18e74:	mov	r3, lr
   18e78:	str	r0, [sp, #8]
   18e7c:	ldr	r0, [sp, #76]	; 0x4c
   18e80:	str	r1, [sp, #4]
   18e84:	mov	r1, r4
   18e88:	str	r0, [sp, #12]
   18e8c:	ldr	r0, [sp, #80]	; 0x50
   18e90:	str	r0, [sp, #16]
   18e94:	mov	r0, r5
   18e98:	bl	17f10 <__assert_fail@plt+0x6840>
   18e9c:	mov	r8, r0
   18ea0:	b	18f24 <__assert_fail@plt+0x7854>
   18ea4:	mov	r0, #5
   18ea8:	ldr	r1, [sp, #56]	; 0x38
   18eac:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18eb0:	mov	r3, sl
   18eb4:	str	r0, [sp]
   18eb8:	ldr	r0, [fp, #12]
   18ebc:	str	r0, [sp, #4]
   18ec0:	ldr	r0, [fp, #16]
   18ec4:	str	r0, [sp, #8]
   18ec8:	ldr	r0, [sp, #76]	; 0x4c
   18ecc:	b	18e88 <__assert_fail@plt+0x77b8>
   18ed0:	mov	r0, #0
   18ed4:	str	r0, [fp, #-76]	; 0xffffffb4
   18ed8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   18edc:	cmp	r1, #0
   18ee0:	beq	18f18 <__assert_fail@plt+0x7848>
   18ee4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18ee8:	tst	r0, #1
   18eec:	bne	18f18 <__assert_fail@plt+0x7848>
   18ef0:	ldrb	r0, [r1]
   18ef4:	cmp	r0, #0
   18ef8:	beq	18f18 <__assert_fail@plt+0x7848>
   18efc:	add	r1, r1, #1
   18f00:	cmp	r8, r4
   18f04:	strbcc	r0, [r5, r8]
   18f08:	add	r8, r8, #1
   18f0c:	ldrb	r0, [r1], #1
   18f10:	cmp	r0, #0
   18f14:	bne	18f00 <__assert_fail@plt+0x7830>
   18f18:	cmp	r8, r4
   18f1c:	movcc	r0, #0
   18f20:	strbcc	r0, [r5, r8]
   18f24:	mov	r0, r8
   18f28:	sub	sp, fp, #28
   18f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f30:	mov	r0, #4
   18f34:	b	18e54 <__assert_fail@plt+0x7784>
   18f38:	bl	116a0 <abort@plt>
   18f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f40:	add	fp, sp, #28
   18f44:	sub	sp, sp, #28
   18f48:	movw	r5, #62568	; 0xf468
   18f4c:	cmp	r2, #0
   18f50:	mov	r4, r1
   18f54:	mov	r7, r0
   18f58:	str	r0, [sp, #20]
   18f5c:	movt	r5, #2
   18f60:	movne	r5, r2
   18f64:	bl	11598 <__errno_location@plt>
   18f68:	mov	sl, r0
   18f6c:	ldr	r2, [r5, #40]	; 0x28
   18f70:	ldr	r3, [r5, #44]	; 0x2c
   18f74:	ldm	r5, {r0, r1}
   18f78:	orr	r8, r1, #1
   18f7c:	add	r9, r5, #8
   18f80:	mov	r1, #0
   18f84:	ldr	r6, [sl]
   18f88:	stm	sp, {r0, r8, r9}
   18f8c:	mov	r0, #0
   18f90:	str	r2, [sp, #12]
   18f94:	str	r3, [sp, #16]
   18f98:	mov	r2, r7
   18f9c:	mov	r3, r4
   18fa0:	str	r6, [sp, #24]
   18fa4:	mov	r6, r4
   18fa8:	bl	17f10 <__assert_fail@plt+0x6840>
   18fac:	add	r7, r0, #1
   18fb0:	mov	r0, r7
   18fb4:	bl	1a234 <__assert_fail@plt+0x8b64>
   18fb8:	mov	r4, r0
   18fbc:	ldr	r0, [r5]
   18fc0:	ldr	r2, [r5, #44]	; 0x2c
   18fc4:	ldr	r1, [r5, #40]	; 0x28
   18fc8:	mov	r3, r6
   18fcc:	stm	sp, {r0, r8, r9}
   18fd0:	str	r2, [sp, #16]
   18fd4:	ldr	r2, [sp, #20]
   18fd8:	str	r1, [sp, #12]
   18fdc:	mov	r0, r4
   18fe0:	mov	r1, r7
   18fe4:	bl	17f10 <__assert_fail@plt+0x6840>
   18fe8:	ldr	r0, [sp, #24]
   18fec:	str	r0, [sl]
   18ff0:	mov	r0, r4
   18ff4:	sub	sp, fp, #28
   18ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19000:	add	fp, sp, #28
   19004:	sub	sp, sp, #36	; 0x24
   19008:	movw	r8, #62568	; 0xf468
   1900c:	cmp	r3, #0
   19010:	mov	r4, r2
   19014:	str	r2, [sp, #24]
   19018:	mov	r5, r1
   1901c:	mov	r6, r0
   19020:	str	r0, [sp, #20]
   19024:	movt	r8, #2
   19028:	movne	r8, r3
   1902c:	bl	11598 <__errno_location@plt>
   19030:	str	r0, [sp, #28]
   19034:	ldr	r1, [r8, #40]	; 0x28
   19038:	ldr	r2, [r8, #44]	; 0x2c
   1903c:	ldr	r7, [r0]
   19040:	cmp	r4, #0
   19044:	add	sl, r8, #8
   19048:	mov	r0, #0
   1904c:	ldm	r8, {r3, r9}
   19050:	orreq	r9, r9, #1
   19054:	stm	sp, {r3, r9, sl}
   19058:	str	r1, [sp, #12]
   1905c:	str	r2, [sp, #16]
   19060:	mov	r1, #0
   19064:	mov	r2, r6
   19068:	mov	r3, r5
   1906c:	str	r7, [sp, #32]
   19070:	mov	r7, r5
   19074:	bl	17f10 <__assert_fail@plt+0x6840>
   19078:	add	r4, r0, #1
   1907c:	mov	r5, r0
   19080:	mov	r0, r4
   19084:	bl	1a234 <__assert_fail@plt+0x8b64>
   19088:	mov	r6, r0
   1908c:	ldr	r0, [r8]
   19090:	ldr	r2, [r8, #44]	; 0x2c
   19094:	ldr	r1, [r8, #40]	; 0x28
   19098:	mov	r3, r7
   1909c:	stm	sp, {r0, r9, sl}
   190a0:	str	r2, [sp, #16]
   190a4:	ldr	r2, [sp, #20]
   190a8:	str	r1, [sp, #12]
   190ac:	mov	r0, r6
   190b0:	mov	r1, r4
   190b4:	bl	17f10 <__assert_fail@plt+0x6840>
   190b8:	ldr	r0, [sp, #24]
   190bc:	ldr	r1, [sp, #32]
   190c0:	ldr	r2, [sp, #28]
   190c4:	cmp	r0, #0
   190c8:	str	r1, [r2]
   190cc:	strne	r5, [r0]
   190d0:	mov	r0, r6
   190d4:	sub	sp, fp, #28
   190d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   190e0:	add	fp, sp, #24
   190e4:	movw	r5, #61812	; 0xf174
   190e8:	movw	r8, #61808	; 0xf170
   190ec:	movt	r5, #2
   190f0:	movt	r8, #2
   190f4:	ldr	r0, [r5]
   190f8:	ldr	r4, [r8]
   190fc:	cmp	r0, #2
   19100:	blt	1912c <__assert_fail@plt+0x7a5c>
   19104:	add	r7, r4, #12
   19108:	mov	r6, #0
   1910c:	ldr	r0, [r7, r6, lsl #3]
   19110:	bl	1bbc8 <__assert_fail@plt+0xa4f8>
   19114:	ldr	r1, [r5]
   19118:	add	r2, r6, #2
   1911c:	add	r0, r6, #1
   19120:	mov	r6, r0
   19124:	cmp	r2, r1
   19128:	blt	1910c <__assert_fail@plt+0x7a3c>
   1912c:	ldr	r0, [r4, #4]
   19130:	movw	r9, #62616	; 0xf498
   19134:	movw	r7, #61816	; 0xf178
   19138:	movt	r9, #2
   1913c:	movt	r7, #2
   19140:	cmp	r0, r9
   19144:	beq	19154 <__assert_fail@plt+0x7a84>
   19148:	bl	1bbc8 <__assert_fail@plt+0xa4f8>
   1914c:	mov	r0, #256	; 0x100
   19150:	stm	r7, {r0, r9}
   19154:	cmp	r4, r7
   19158:	beq	19168 <__assert_fail@plt+0x7a98>
   1915c:	mov	r0, r4
   19160:	bl	1bbc8 <__assert_fail@plt+0xa4f8>
   19164:	str	r7, [r8]
   19168:	mov	r0, #1
   1916c:	str	r0, [r5]
   19170:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19174:	movw	r3, #62568	; 0xf468
   19178:	mvn	r2, #0
   1917c:	movt	r3, #2
   19180:	b	19184 <__assert_fail@plt+0x7ab4>
   19184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19188:	add	fp, sp, #28
   1918c:	sub	sp, sp, #44	; 0x2c
   19190:	mov	r7, r3
   19194:	str	r2, [sp, #36]	; 0x24
   19198:	str	r1, [sp, #32]
   1919c:	mov	r5, r0
   191a0:	bl	11598 <__errno_location@plt>
   191a4:	cmp	r5, #0
   191a8:	bmi	19318 <__assert_fail@plt+0x7c48>
   191ac:	cmn	r5, #-2147483647	; 0x80000001
   191b0:	beq	19318 <__assert_fail@plt+0x7c48>
   191b4:	movw	r8, #61812	; 0xf174
   191b8:	movw	r4, #61808	; 0xf170
   191bc:	str	r0, [sp, #28]
   191c0:	ldr	r0, [r0]
   191c4:	movt	r8, #2
   191c8:	movt	r4, #2
   191cc:	ldr	r1, [r8]
   191d0:	ldr	r6, [r4]
   191d4:	str	r0, [sp, #24]
   191d8:	cmp	r1, r5
   191dc:	ble	191e8 <__assert_fail@plt+0x7b18>
   191e0:	mov	sl, r6
   191e4:	b	19254 <__assert_fail@plt+0x7b84>
   191e8:	movw	r9, #61816	; 0xf178
   191ec:	mov	r0, #8
   191f0:	str	r1, [fp, #-32]	; 0xffffffe0
   191f4:	sub	r1, r5, r1
   191f8:	mvn	r3, #-2147483648	; 0x80000000
   191fc:	movt	r9, #2
   19200:	str	r0, [sp]
   19204:	add	r2, r1, #1
   19208:	sub	r1, fp, #32
   1920c:	subs	r0, r6, r9
   19210:	movne	r0, r6
   19214:	bl	1a434 <__assert_fail@plt+0x8d64>
   19218:	mov	sl, r0
   1921c:	cmp	r6, r9
   19220:	str	r0, [r4]
   19224:	bne	19230 <__assert_fail@plt+0x7b60>
   19228:	ldrd	r0, [r9]
   1922c:	stm	sl, {r0, r1}
   19230:	ldr	r1, [r8]
   19234:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19238:	add	r0, sl, r1, lsl #3
   1923c:	sub	r1, r2, r1
   19240:	lsl	r2, r1, #3
   19244:	mov	r1, #0
   19248:	bl	115c8 <memset@plt>
   1924c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19250:	str	r0, [r8]
   19254:	mov	r9, sl
   19258:	ldm	r7, {r0, r1}
   1925c:	orr	r8, r1, #1
   19260:	add	r1, r7, #8
   19264:	ldr	r2, [r7, #40]	; 0x28
   19268:	ldr	r3, [r7, #44]	; 0x2c
   1926c:	ldr	r6, [r9, r5, lsl #3]!
   19270:	str	r1, [sp, #20]
   19274:	ldr	r4, [r9, #4]!
   19278:	stm	sp, {r0, r8}
   1927c:	add	r0, sp, #8
   19280:	stm	r0, {r1, r2, r3}
   19284:	ldr	r2, [sp, #32]
   19288:	ldr	r3, [sp, #36]	; 0x24
   1928c:	mov	r1, r6
   19290:	mov	r0, r4
   19294:	bl	17f10 <__assert_fail@plt+0x6840>
   19298:	cmp	r6, r0
   1929c:	bhi	19300 <__assert_fail@plt+0x7c30>
   192a0:	add	r6, r0, #1
   192a4:	movw	r0, #62616	; 0xf498
   192a8:	movt	r0, #2
   192ac:	str	r6, [sl, r5, lsl #3]
   192b0:	cmp	r4, r0
   192b4:	beq	192c0 <__assert_fail@plt+0x7bf0>
   192b8:	mov	r0, r4
   192bc:	bl	1bbc8 <__assert_fail@plt+0xa4f8>
   192c0:	mov	r0, r6
   192c4:	bl	1a234 <__assert_fail@plt+0x8b64>
   192c8:	str	r0, [r9]
   192cc:	mov	r4, r0
   192d0:	add	r3, sp, #8
   192d4:	ldr	r0, [r7]
   192d8:	ldr	r1, [r7, #40]	; 0x28
   192dc:	ldr	r2, [r7, #44]	; 0x2c
   192e0:	stm	sp, {r0, r8}
   192e4:	ldr	r0, [sp, #20]
   192e8:	stm	r3, {r0, r1, r2}
   192ec:	ldr	r2, [sp, #32]
   192f0:	ldr	r3, [sp, #36]	; 0x24
   192f4:	mov	r0, r4
   192f8:	mov	r1, r6
   192fc:	bl	17f10 <__assert_fail@plt+0x6840>
   19300:	ldr	r0, [sp, #28]
   19304:	ldr	r1, [sp, #24]
   19308:	str	r1, [r0]
   1930c:	mov	r0, r4
   19310:	sub	sp, fp, #28
   19314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19318:	bl	116a0 <abort@plt>
   1931c:	movw	r3, #62568	; 0xf468
   19320:	movt	r3, #2
   19324:	b	19184 <__assert_fail@plt+0x7ab4>
   19328:	movw	r3, #62568	; 0xf468
   1932c:	mov	r1, r0
   19330:	mov	r0, #0
   19334:	mvn	r2, #0
   19338:	movt	r3, #2
   1933c:	b	19184 <__assert_fail@plt+0x7ab4>
   19340:	movw	r3, #62568	; 0xf468
   19344:	mov	r2, r1
   19348:	mov	r1, r0
   1934c:	mov	r0, #0
   19350:	movt	r3, #2
   19354:	b	19184 <__assert_fail@plt+0x7ab4>
   19358:	push	{fp, lr}
   1935c:	mov	fp, sp
   19360:	sub	sp, sp, #48	; 0x30
   19364:	vmov.i32	q8, #0	; 0x00000000
   19368:	mov	ip, #32
   1936c:	mov	r3, sp
   19370:	mov	lr, r2
   19374:	cmp	r1, #10
   19378:	add	r2, r3, #16
   1937c:	vst1.64	{d16-d17}, [r3], ip
   19380:	vst1.64	{d16-d17}, [r2]
   19384:	vst1.64	{d16-d17}, [r3]
   19388:	beq	193a8 <__assert_fail@plt+0x7cd8>
   1938c:	str	r1, [sp]
   19390:	mov	r3, sp
   19394:	mov	r1, lr
   19398:	mvn	r2, #0
   1939c:	bl	19184 <__assert_fail@plt+0x7ab4>
   193a0:	mov	sp, fp
   193a4:	pop	{fp, pc}
   193a8:	bl	116a0 <abort@plt>
   193ac:	push	{r4, sl, fp, lr}
   193b0:	add	fp, sp, #8
   193b4:	sub	sp, sp, #48	; 0x30
   193b8:	vmov.i32	q8, #0	; 0x00000000
   193bc:	mov	ip, r3
   193c0:	mov	r3, sp
   193c4:	mov	lr, #32
   193c8:	cmp	r1, #10
   193cc:	add	r4, r3, #16
   193d0:	vst1.64	{d16-d17}, [r3], lr
   193d4:	vst1.64	{d16-d17}, [r4]
   193d8:	vst1.64	{d16-d17}, [r3]
   193dc:	beq	193fc <__assert_fail@plt+0x7d2c>
   193e0:	str	r1, [sp]
   193e4:	mov	r1, r2
   193e8:	mov	r3, sp
   193ec:	mov	r2, ip
   193f0:	bl	19184 <__assert_fail@plt+0x7ab4>
   193f4:	sub	sp, fp, #8
   193f8:	pop	{r4, sl, fp, pc}
   193fc:	bl	116a0 <abort@plt>
   19400:	push	{fp, lr}
   19404:	mov	fp, sp
   19408:	sub	sp, sp, #48	; 0x30
   1940c:	vmov.i32	q8, #0	; 0x00000000
   19410:	mov	r3, sp
   19414:	mov	ip, #32
   19418:	cmp	r0, #10
   1941c:	add	r2, r3, #16
   19420:	vst1.64	{d16-d17}, [r3], ip
   19424:	vst1.64	{d16-d17}, [r2]
   19428:	vst1.64	{d16-d17}, [r3]
   1942c:	beq	1944c <__assert_fail@plt+0x7d7c>
   19430:	str	r0, [sp]
   19434:	mov	r3, sp
   19438:	mov	r0, #0
   1943c:	mvn	r2, #0
   19440:	bl	19184 <__assert_fail@plt+0x7ab4>
   19444:	mov	sp, fp
   19448:	pop	{fp, pc}
   1944c:	bl	116a0 <abort@plt>
   19450:	push	{fp, lr}
   19454:	mov	fp, sp
   19458:	sub	sp, sp, #48	; 0x30
   1945c:	vmov.i32	q8, #0	; 0x00000000
   19460:	mov	r3, sp
   19464:	mov	ip, #32
   19468:	cmp	r0, #10
   1946c:	add	lr, r3, #16
   19470:	vst1.64	{d16-d17}, [r3], ip
   19474:	vst1.64	{d16-d17}, [lr]
   19478:	vst1.64	{d16-d17}, [r3]
   1947c:	beq	19498 <__assert_fail@plt+0x7dc8>
   19480:	str	r0, [sp]
   19484:	mov	r3, sp
   19488:	mov	r0, #0
   1948c:	bl	19184 <__assert_fail@plt+0x7ab4>
   19490:	mov	sp, fp
   19494:	pop	{fp, pc}
   19498:	bl	116a0 <abort@plt>
   1949c:	push	{r4, sl, fp, lr}
   194a0:	add	fp, sp, #8
   194a4:	sub	sp, sp, #48	; 0x30
   194a8:	mov	lr, r0
   194ac:	movw	r0, #62568	; 0xf468
   194b0:	mov	ip, r1
   194b4:	mov	r1, #32
   194b8:	mov	r4, #1
   194bc:	movt	r0, #2
   194c0:	add	r3, r0, #16
   194c4:	vld1.64	{d16-d17}, [r0], r1
   194c8:	vld1.64	{d20-d21}, [r0]
   194cc:	vld1.64	{d18-d19}, [r3]
   194d0:	mov	r3, sp
   194d4:	add	r0, r3, #32
   194d8:	add	r1, r3, #16
   194dc:	vst1.64	{d20-d21}, [r0]
   194e0:	mov	r0, #28
   194e4:	vst1.64	{d18-d19}, [r1]
   194e8:	mov	r1, r3
   194ec:	and	r0, r0, r2, lsr #3
   194f0:	and	r2, r2, #31
   194f4:	vst1.64	{d16-d17}, [r1], r0
   194f8:	ldr	r0, [r1, #8]
   194fc:	bic	r4, r4, r0, lsr r2
   19500:	eor	r0, r0, r4, lsl r2
   19504:	mov	r2, ip
   19508:	str	r0, [r1, #8]
   1950c:	mov	r0, #0
   19510:	mov	r1, lr
   19514:	bl	19184 <__assert_fail@plt+0x7ab4>
   19518:	sub	sp, fp, #8
   1951c:	pop	{r4, sl, fp, pc}
   19520:	push	{fp, lr}
   19524:	mov	fp, sp
   19528:	sub	sp, sp, #48	; 0x30
   1952c:	mov	ip, r0
   19530:	movw	r0, #62568	; 0xf468
   19534:	mov	r2, #32
   19538:	movt	r0, #2
   1953c:	add	r3, r0, #16
   19540:	vld1.64	{d16-d17}, [r0], r2
   19544:	vld1.64	{d20-d21}, [r0]
   19548:	vld1.64	{d18-d19}, [r3]
   1954c:	mov	r3, sp
   19550:	add	r0, r3, #32
   19554:	add	r2, r3, #16
   19558:	vst1.64	{d20-d21}, [r0]
   1955c:	mov	r0, #28
   19560:	vst1.64	{d18-d19}, [r2]
   19564:	mov	r2, r3
   19568:	and	r0, r0, r1, lsr #3
   1956c:	and	r1, r1, #31
   19570:	vst1.64	{d16-d17}, [r2], r0
   19574:	mov	r0, #1
   19578:	ldr	lr, [r2, #8]
   1957c:	bic	r0, r0, lr, lsr r1
   19580:	eor	r0, lr, r0, lsl r1
   19584:	mov	r1, ip
   19588:	str	r0, [r2, #8]
   1958c:	mov	r0, #0
   19590:	mvn	r2, #0
   19594:	bl	19184 <__assert_fail@plt+0x7ab4>
   19598:	mov	sp, fp
   1959c:	pop	{fp, pc}
   195a0:	push	{fp, lr}
   195a4:	mov	fp, sp
   195a8:	sub	sp, sp, #48	; 0x30
   195ac:	mov	r1, r0
   195b0:	movw	r0, #62568	; 0xf468
   195b4:	mov	r3, #32
   195b8:	movt	r0, #2
   195bc:	add	r2, r0, #16
   195c0:	vld1.64	{d16-d17}, [r0], r3
   195c4:	mov	r3, sp
   195c8:	vld1.64	{d18-d19}, [r2]
   195cc:	vld1.64	{d20-d21}, [r0]
   195d0:	add	r2, r3, #16
   195d4:	add	r0, r3, #32
   195d8:	vst1.64	{d18-d19}, [r2]
   195dc:	vst1.64	{d20-d21}, [r0]
   195e0:	mov	r0, #12
   195e4:	mov	r2, r3
   195e8:	vst1.64	{d16-d17}, [r2], r0
   195ec:	ldr	r0, [r2]
   195f0:	orr	r0, r0, #67108864	; 0x4000000
   195f4:	str	r0, [r2]
   195f8:	mov	r0, #0
   195fc:	mvn	r2, #0
   19600:	bl	19184 <__assert_fail@plt+0x7ab4>
   19604:	mov	sp, fp
   19608:	pop	{fp, pc}
   1960c:	push	{fp, lr}
   19610:	mov	fp, sp
   19614:	sub	sp, sp, #48	; 0x30
   19618:	mov	ip, r1
   1961c:	mov	r1, r0
   19620:	movw	r0, #62568	; 0xf468
   19624:	mov	r2, #32
   19628:	movt	r0, #2
   1962c:	add	r3, r0, #16
   19630:	vld1.64	{d16-d17}, [r0], r2
   19634:	vld1.64	{d18-d19}, [r3]
   19638:	vld1.64	{d20-d21}, [r0]
   1963c:	mov	r3, sp
   19640:	add	r2, r3, #16
   19644:	add	r0, r3, #32
   19648:	vst1.64	{d18-d19}, [r2]
   1964c:	vst1.64	{d20-d21}, [r0]
   19650:	mov	r0, #12
   19654:	mov	r2, r3
   19658:	vst1.64	{d16-d17}, [r2], r0
   1965c:	ldr	r0, [r2]
   19660:	orr	r0, r0, #67108864	; 0x4000000
   19664:	str	r0, [r2]
   19668:	mov	r0, #0
   1966c:	mov	r2, ip
   19670:	bl	19184 <__assert_fail@plt+0x7ab4>
   19674:	mov	sp, fp
   19678:	pop	{fp, pc}
   1967c:	push	{r4, sl, fp, lr}
   19680:	add	fp, sp, #8
   19684:	sub	sp, sp, #96	; 0x60
   19688:	vmov.i32	q8, #0	; 0x00000000
   1968c:	mov	ip, r2
   19690:	mov	r2, sp
   19694:	mov	r4, #28
   19698:	cmp	r1, #10
   1969c:	mov	r3, r2
   196a0:	add	lr, r2, #16
   196a4:	vst1.64	{d16-d17}, [r3], r4
   196a8:	vst1.64	{d16-d17}, [lr]
   196ac:	vst1.32	{d16-d17}, [r3]
   196b0:	beq	19700 <__assert_fail@plt+0x8030>
   196b4:	vld1.64	{d16-d17}, [r2], r4
   196b8:	vld1.64	{d18-d19}, [lr]
   196bc:	add	r3, sp, #48	; 0x30
   196c0:	vld1.32	{d20-d21}, [r2]
   196c4:	add	r2, r3, #20
   196c8:	add	r4, r3, #4
   196cc:	vst1.32	{d18-d19}, [r2]
   196d0:	add	r2, r3, #32
   196d4:	vst1.32	{d16-d17}, [r4]
   196d8:	vst1.32	{d20-d21}, [r2]
   196dc:	str	r1, [sp, #48]	; 0x30
   196e0:	mvn	r2, #0
   196e4:	ldr	r1, [sp, #60]	; 0x3c
   196e8:	orr	r1, r1, #67108864	; 0x4000000
   196ec:	str	r1, [sp, #60]	; 0x3c
   196f0:	mov	r1, ip
   196f4:	bl	19184 <__assert_fail@plt+0x7ab4>
   196f8:	sub	sp, fp, #8
   196fc:	pop	{r4, sl, fp, pc}
   19700:	bl	116a0 <abort@plt>
   19704:	push	{r4, r5, r6, sl, fp, lr}
   19708:	add	fp, sp, #16
   1970c:	sub	sp, sp, #48	; 0x30
   19710:	mov	ip, r3
   19714:	movw	r3, #62568	; 0xf468
   19718:	mov	r6, #32
   1971c:	cmp	r1, #0
   19720:	mov	r4, sp
   19724:	movt	r3, #2
   19728:	cmpne	r2, #0
   1972c:	add	r5, r4, #16
   19730:	add	lr, r3, #16
   19734:	vld1.64	{d16-d17}, [r3], r6
   19738:	vld1.64	{d18-d19}, [lr]
   1973c:	vld1.64	{d20-d21}, [r3]
   19740:	mov	r3, #10
   19744:	vst1.64	{d16-d17}, [r4], r6
   19748:	vst1.64	{d18-d19}, [r5]
   1974c:	vst1.64	{d20-d21}, [r4]
   19750:	str	r3, [sp]
   19754:	bne	1975c <__assert_fail@plt+0x808c>
   19758:	bl	116a0 <abort@plt>
   1975c:	str	r2, [sp, #44]	; 0x2c
   19760:	str	r1, [sp, #40]	; 0x28
   19764:	mov	r3, sp
   19768:	mov	r1, ip
   1976c:	mvn	r2, #0
   19770:	bl	19184 <__assert_fail@plt+0x7ab4>
   19774:	sub	sp, fp, #16
   19778:	pop	{r4, r5, r6, sl, fp, pc}
   1977c:	push	{r4, r5, r6, sl, fp, lr}
   19780:	add	fp, sp, #16
   19784:	sub	sp, sp, #48	; 0x30
   19788:	mov	lr, r3
   1978c:	movw	r3, #62568	; 0xf468
   19790:	mov	r6, #32
   19794:	cmp	r1, #0
   19798:	mov	r4, sp
   1979c:	movt	r3, #2
   197a0:	cmpne	r2, #0
   197a4:	add	r5, r4, #16
   197a8:	add	ip, r3, #16
   197ac:	vld1.64	{d16-d17}, [r3], r6
   197b0:	vld1.64	{d18-d19}, [ip]
   197b4:	vld1.64	{d20-d21}, [r3]
   197b8:	mov	r3, #10
   197bc:	vst1.64	{d16-d17}, [r4], r6
   197c0:	vst1.64	{d18-d19}, [r5]
   197c4:	vst1.64	{d20-d21}, [r4]
   197c8:	str	r3, [sp]
   197cc:	bne	197d4 <__assert_fail@plt+0x8104>
   197d0:	bl	116a0 <abort@plt>
   197d4:	ldr	ip, [fp, #8]
   197d8:	str	r2, [sp, #44]	; 0x2c
   197dc:	str	r1, [sp, #40]	; 0x28
   197e0:	mov	r3, sp
   197e4:	mov	r1, lr
   197e8:	mov	r2, ip
   197ec:	bl	19184 <__assert_fail@plt+0x7ab4>
   197f0:	sub	sp, fp, #16
   197f4:	pop	{r4, r5, r6, sl, fp, pc}
   197f8:	push	{r4, sl, fp, lr}
   197fc:	add	fp, sp, #8
   19800:	sub	sp, sp, #48	; 0x30
   19804:	movw	r3, #62568	; 0xf468
   19808:	mov	lr, #32
   1980c:	mov	ip, r2
   19810:	cmp	r0, #0
   19814:	movt	r3, #2
   19818:	cmpne	r1, #0
   1981c:	add	r2, r3, #16
   19820:	vld1.64	{d16-d17}, [r3], lr
   19824:	vld1.64	{d20-d21}, [r3]
   19828:	vld1.64	{d18-d19}, [r2]
   1982c:	mov	r2, sp
   19830:	add	r4, r2, #16
   19834:	vst1.64	{d16-d17}, [r2], lr
   19838:	vst1.64	{d20-d21}, [r2]
   1983c:	mov	r2, #10
   19840:	vst1.64	{d18-d19}, [r4]
   19844:	str	r2, [sp]
   19848:	bne	19850 <__assert_fail@plt+0x8180>
   1984c:	bl	116a0 <abort@plt>
   19850:	str	r1, [sp, #44]	; 0x2c
   19854:	str	r0, [sp, #40]	; 0x28
   19858:	mov	r3, sp
   1985c:	mov	r0, #0
   19860:	mov	r1, ip
   19864:	mvn	r2, #0
   19868:	bl	19184 <__assert_fail@plt+0x7ab4>
   1986c:	sub	sp, fp, #8
   19870:	pop	{r4, sl, fp, pc}
   19874:	push	{r4, r5, fp, lr}
   19878:	add	fp, sp, #8
   1987c:	sub	sp, sp, #48	; 0x30
   19880:	mov	ip, r3
   19884:	movw	r3, #62568	; 0xf468
   19888:	mov	r4, #32
   1988c:	mov	lr, r2
   19890:	cmp	r0, #0
   19894:	movt	r3, #2
   19898:	cmpne	r1, #0
   1989c:	add	r2, r3, #16
   198a0:	vld1.64	{d16-d17}, [r3], r4
   198a4:	vld1.64	{d20-d21}, [r3]
   198a8:	vld1.64	{d18-d19}, [r2]
   198ac:	mov	r2, sp
   198b0:	add	r5, r2, #16
   198b4:	vst1.64	{d16-d17}, [r2], r4
   198b8:	vst1.64	{d20-d21}, [r2]
   198bc:	mov	r2, #10
   198c0:	vst1.64	{d18-d19}, [r5]
   198c4:	str	r2, [sp]
   198c8:	bne	198d0 <__assert_fail@plt+0x8200>
   198cc:	bl	116a0 <abort@plt>
   198d0:	str	r1, [sp, #44]	; 0x2c
   198d4:	str	r0, [sp, #40]	; 0x28
   198d8:	mov	r3, sp
   198dc:	mov	r0, #0
   198e0:	mov	r1, lr
   198e4:	mov	r2, ip
   198e8:	bl	19184 <__assert_fail@plt+0x7ab4>
   198ec:	sub	sp, fp, #8
   198f0:	pop	{r4, r5, fp, pc}
   198f4:	movw	r3, #61824	; 0xf180
   198f8:	movt	r3, #2
   198fc:	b	19184 <__assert_fail@plt+0x7ab4>
   19900:	movw	r3, #61824	; 0xf180
   19904:	mov	r2, r1
   19908:	mov	r1, r0
   1990c:	mov	r0, #0
   19910:	movt	r3, #2
   19914:	b	19184 <__assert_fail@plt+0x7ab4>
   19918:	movw	r3, #61824	; 0xf180
   1991c:	mvn	r2, #0
   19920:	movt	r3, #2
   19924:	b	19184 <__assert_fail@plt+0x7ab4>
   19928:	movw	r3, #61824	; 0xf180
   1992c:	mov	r1, r0
   19930:	mov	r0, #0
   19934:	mvn	r2, #0
   19938:	movt	r3, #2
   1993c:	b	19184 <__assert_fail@plt+0x7ab4>
   19940:	push	{r4, r5, fp, lr}
   19944:	add	fp, sp, #8
   19948:	mov	r5, r0
   1994c:	mov	r4, r1
   19950:	mov	r0, #0
   19954:	mov	r2, #5
   19958:	mov	r1, r5
   1995c:	bl	11424 <dcgettext@plt>
   19960:	cmp	r0, r5
   19964:	popne	{r4, r5, fp, pc}
   19968:	bl	1bbf0 <__assert_fail@plt+0xa520>
   1996c:	ldrb	r1, [r0]
   19970:	and	r1, r1, #223	; 0xdf
   19974:	cmp	r1, #71	; 0x47
   19978:	beq	199e0 <__assert_fail@plt+0x8310>
   1997c:	cmp	r1, #85	; 0x55
   19980:	bne	19a38 <__assert_fail@plt+0x8368>
   19984:	ldrb	r1, [r0, #1]
   19988:	and	r1, r1, #223	; 0xdf
   1998c:	cmp	r1, #84	; 0x54
   19990:	bne	19a38 <__assert_fail@plt+0x8368>
   19994:	ldrb	r1, [r0, #2]
   19998:	and	r1, r1, #223	; 0xdf
   1999c:	cmp	r1, #70	; 0x46
   199a0:	bne	19a38 <__assert_fail@plt+0x8368>
   199a4:	ldrb	r1, [r0, #3]
   199a8:	cmp	r1, #45	; 0x2d
   199ac:	bne	19a38 <__assert_fail@plt+0x8368>
   199b0:	ldrb	r1, [r0, #4]
   199b4:	cmp	r1, #56	; 0x38
   199b8:	bne	19a38 <__assert_fail@plt+0x8368>
   199bc:	ldrb	r0, [r0, #5]
   199c0:	cmp	r0, #0
   199c4:	bne	19a38 <__assert_fail@plt+0x8368>
   199c8:	ldrb	r1, [r5]
   199cc:	movw	r2, #57346	; 0xe002
   199d0:	movw	r0, #57350	; 0xe006
   199d4:	movt	r2, #1
   199d8:	movt	r0, #1
   199dc:	b	19a68 <__assert_fail@plt+0x8398>
   199e0:	ldrb	r1, [r0, #1]
   199e4:	and	r1, r1, #223	; 0xdf
   199e8:	cmp	r1, #66	; 0x42
   199ec:	bne	19a38 <__assert_fail@plt+0x8368>
   199f0:	ldrb	r1, [r0, #2]
   199f4:	cmp	r1, #49	; 0x31
   199f8:	bne	19a38 <__assert_fail@plt+0x8368>
   199fc:	ldrb	r1, [r0, #3]
   19a00:	cmp	r1, #56	; 0x38
   19a04:	bne	19a38 <__assert_fail@plt+0x8368>
   19a08:	ldrb	r1, [r0, #4]
   19a0c:	cmp	r1, #48	; 0x30
   19a10:	bne	19a38 <__assert_fail@plt+0x8368>
   19a14:	ldrb	r1, [r0, #5]
   19a18:	cmp	r1, #51	; 0x33
   19a1c:	bne	19a38 <__assert_fail@plt+0x8368>
   19a20:	ldrb	r1, [r0, #6]
   19a24:	cmp	r1, #48	; 0x30
   19a28:	bne	19a38 <__assert_fail@plt+0x8368>
   19a2c:	ldrb	r0, [r0, #7]
   19a30:	cmp	r0, #0
   19a34:	beq	19a54 <__assert_fail@plt+0x8384>
   19a38:	movw	r1, #57340	; 0xdffc
   19a3c:	movw	r0, #57344	; 0xe000
   19a40:	cmp	r4, #9
   19a44:	movt	r1, #1
   19a48:	movt	r0, #1
   19a4c:	moveq	r0, r1
   19a50:	pop	{r4, r5, fp, pc}
   19a54:	ldrb	r1, [r5]
   19a58:	movw	r2, #57354	; 0xe00a
   19a5c:	movw	r0, #57358	; 0xe00e
   19a60:	movt	r2, #1
   19a64:	movt	r0, #1
   19a68:	cmp	r1, #96	; 0x60
   19a6c:	moveq	r0, r2
   19a70:	pop	{r4, r5, fp, pc}
   19a74:	push	{fp, lr}
   19a78:	mov	fp, sp
   19a7c:	push	{r2, r3}
   19a80:	mov	r2, #0
   19a84:	mov	r3, #0
   19a88:	bl	19a94 <__assert_fail@plt+0x83c4>
   19a8c:	mov	sp, fp
   19a90:	pop	{fp, pc}
   19a94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19a98:	add	fp, sp, #24
   19a9c:	sub	sp, sp, #8
   19aa0:	mov	r5, r1
   19aa4:	mov	r6, r0
   19aa8:	ldr	r0, [fp, #8]
   19aac:	ldr	r1, [fp, #12]
   19ab0:	mov	r8, r3
   19ab4:	mov	r7, r2
   19ab8:	bl	1b424 <__assert_fail@plt+0x9d54>
   19abc:	cmp	r0, #0
   19ac0:	beq	19b1c <__assert_fail@plt+0x844c>
   19ac4:	mov	r4, r0
   19ac8:	cmp	r7, #0
   19acc:	beq	19af4 <__assert_fail@plt+0x8424>
   19ad0:	movw	r0, #55080	; 0xd728
   19ad4:	mov	r1, r5
   19ad8:	mov	r2, r7
   19adc:	mov	r3, r8
   19ae0:	movt	r0, #1
   19ae4:	stm	sp, {r0, r4}
   19ae8:	mov	r0, r6
   19aec:	bl	114f0 <error_at_line@plt>
   19af0:	b	19b0c <__assert_fail@plt+0x843c>
   19af4:	movw	r2, #55080	; 0xd728
   19af8:	mov	r0, r6
   19afc:	mov	r1, r5
   19b00:	mov	r3, r4
   19b04:	movt	r2, #1
   19b08:	bl	114c0 <error@plt>
   19b0c:	mov	r0, r4
   19b10:	sub	sp, fp, #24
   19b14:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b18:	b	1bbc8 <__assert_fail@plt+0xa4f8>
   19b1c:	bl	11598 <__errno_location@plt>
   19b20:	movw	r1, #57448	; 0xe068
   19b24:	ldr	r4, [r0]
   19b28:	mov	r0, #0
   19b2c:	mov	r2, #5
   19b30:	movt	r1, #1
   19b34:	bl	11424 <dcgettext@plt>
   19b38:	mov	r2, r0
   19b3c:	mov	r0, #0
   19b40:	mov	r1, r4
   19b44:	bl	114c0 <error@plt>
   19b48:	bl	116a0 <abort@plt>
   19b4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b50:	add	fp, sp, #24
   19b54:	sub	sp, sp, #32
   19b58:	ldr	r6, [fp, #12]
   19b5c:	ldr	r7, [fp, #8]
   19b60:	mov	r4, r2
   19b64:	mov	r8, r0
   19b68:	cmp	r1, #0
   19b6c:	beq	19b94 <__assert_fail@plt+0x84c4>
   19b70:	movw	r2, #57480	; 0xe088
   19b74:	mov	r5, r1
   19b78:	str	r3, [sp, #4]
   19b7c:	str	r4, [sp]
   19b80:	mov	r0, r8
   19b84:	mov	r1, #1
   19b88:	movt	r2, #1
   19b8c:	mov	r3, r5
   19b90:	b	19bac <__assert_fail@plt+0x84dc>
   19b94:	movw	r2, #57492	; 0xe094
   19b98:	str	r3, [sp]
   19b9c:	mov	r0, r8
   19ba0:	mov	r1, #1
   19ba4:	mov	r3, r4
   19ba8:	movt	r2, #1
   19bac:	bl	115f8 <__fprintf_chk@plt>
   19bb0:	movw	r1, #57499	; 0xe09b
   19bb4:	mov	r0, #0
   19bb8:	mov	r2, #5
   19bbc:	movt	r1, #1
   19bc0:	bl	11424 <dcgettext@plt>
   19bc4:	movw	r2, #58217	; 0xe369
   19bc8:	mov	r3, r0
   19bcc:	movw	r0, #2022	; 0x7e6
   19bd0:	mov	r1, #1
   19bd4:	movt	r2, #1
   19bd8:	str	r0, [sp]
   19bdc:	mov	r0, r8
   19be0:	bl	115f8 <__fprintf_chk@plt>
   19be4:	movw	r4, #51804	; 0xca5c
   19be8:	mov	r1, r8
   19bec:	movt	r4, #1
   19bf0:	mov	r0, r4
   19bf4:	bl	11364 <fputs_unlocked@plt>
   19bf8:	movw	r1, #57503	; 0xe09f
   19bfc:	mov	r0, #0
   19c00:	mov	r2, #5
   19c04:	movt	r1, #1
   19c08:	bl	11424 <dcgettext@plt>
   19c0c:	movw	r3, #57674	; 0xe14a
   19c10:	mov	r2, r0
   19c14:	mov	r0, r8
   19c18:	mov	r1, #1
   19c1c:	movt	r3, #1
   19c20:	bl	115f8 <__fprintf_chk@plt>
   19c24:	mov	r0, r4
   19c28:	mov	r1, r8
   19c2c:	bl	11364 <fputs_unlocked@plt>
   19c30:	cmp	r6, #9
   19c34:	bhi	19c70 <__assert_fail@plt+0x85a0>
   19c38:	add	r0, pc, #0
   19c3c:	ldr	pc, [r0, r6, lsl #2]
   19c40:	andeq	r9, r1, r8, ror #24
   19c44:	andeq	r9, r1, ip, ror ip
   19c48:	andeq	r9, r1, ip, lsr #25
   19c4c:	ldrdeq	r9, [r1], -r4
   19c50:	strdeq	r9, [r1], -ip
   19c54:	andeq	r9, r1, r4, lsr #26
   19c58:	andeq	r9, r1, ip, asr #26
   19c5c:	andeq	r9, r1, r4, lsl #27
   19c60:	andeq	r9, r1, r4, lsr #28
   19c64:	andeq	r9, r1, ip, asr #27
   19c68:	sub	sp, fp, #24
   19c6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c70:	movw	r1, #58027	; 0xe2ab
   19c74:	movt	r1, #1
   19c78:	b	19dd4 <__assert_fail@plt+0x8704>
   19c7c:	movw	r1, #57708	; 0xe16c
   19c80:	mov	r0, #0
   19c84:	mov	r2, #5
   19c88:	movt	r1, #1
   19c8c:	bl	11424 <dcgettext@plt>
   19c90:	ldr	r3, [r7]
   19c94:	mov	r2, r0
   19c98:	mov	r0, r8
   19c9c:	mov	r1, #1
   19ca0:	sub	sp, fp, #24
   19ca4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ca8:	b	115f8 <__fprintf_chk@plt>
   19cac:	movw	r1, #57724	; 0xe17c
   19cb0:	mov	r0, #0
   19cb4:	mov	r2, #5
   19cb8:	movt	r1, #1
   19cbc:	bl	11424 <dcgettext@plt>
   19cc0:	mov	r2, r0
   19cc4:	ldr	r3, [r7]
   19cc8:	ldr	r0, [r7, #4]
   19ccc:	str	r0, [sp]
   19cd0:	b	19dc0 <__assert_fail@plt+0x86f0>
   19cd4:	movw	r1, #57747	; 0xe193
   19cd8:	mov	r0, #0
   19cdc:	mov	r2, #5
   19ce0:	movt	r1, #1
   19ce4:	bl	11424 <dcgettext@plt>
   19ce8:	mov	r2, r0
   19cec:	ldr	r3, [r7]
   19cf0:	ldmib	r7, {r0, r1}
   19cf4:	stm	sp, {r0, r1}
   19cf8:	b	19dc0 <__assert_fail@plt+0x86f0>
   19cfc:	movw	r1, #57775	; 0xe1af
   19d00:	mov	r0, #0
   19d04:	mov	r2, #5
   19d08:	movt	r1, #1
   19d0c:	bl	11424 <dcgettext@plt>
   19d10:	ldr	r3, [r7]
   19d14:	mov	r2, r0
   19d18:	ldmib	r7, {r0, r1, r7}
   19d1c:	stm	sp, {r0, r1, r7}
   19d20:	b	19dc0 <__assert_fail@plt+0x86f0>
   19d24:	movw	r1, #57807	; 0xe1cf
   19d28:	mov	r0, #0
   19d2c:	mov	r2, #5
   19d30:	movt	r1, #1
   19d34:	bl	11424 <dcgettext@plt>
   19d38:	ldr	r3, [r7]
   19d3c:	mov	r2, r0
   19d40:	ldmib	r7, {r0, r1, r6, r7}
   19d44:	stm	sp, {r0, r1, r6, r7}
   19d48:	b	19dc0 <__assert_fail@plt+0x86f0>
   19d4c:	movw	r1, #57843	; 0xe1f3
   19d50:	mov	r0, #0
   19d54:	mov	r2, #5
   19d58:	movt	r1, #1
   19d5c:	bl	11424 <dcgettext@plt>
   19d60:	mov	r2, r0
   19d64:	ldr	r3, [r7]
   19d68:	ldmib	r7, {r0, r1, r6}
   19d6c:	ldr	r5, [r7, #16]
   19d70:	ldr	r7, [r7, #20]
   19d74:	stm	sp, {r0, r1, r6}
   19d78:	str	r5, [sp, #12]
   19d7c:	str	r7, [sp, #16]
   19d80:	b	19dc0 <__assert_fail@plt+0x86f0>
   19d84:	movw	r1, #57883	; 0xe21b
   19d88:	mov	r0, #0
   19d8c:	mov	r2, #5
   19d90:	movt	r1, #1
   19d94:	bl	11424 <dcgettext@plt>
   19d98:	mov	r2, r0
   19d9c:	ldr	r3, [r7]
   19da0:	ldmib	r7, {r0, r1, r6}
   19da4:	ldr	r5, [r7, #16]
   19da8:	ldr	r4, [r7, #20]
   19dac:	ldr	r7, [r7, #24]
   19db0:	stm	sp, {r0, r1, r6}
   19db4:	str	r5, [sp, #12]
   19db8:	str	r4, [sp, #16]
   19dbc:	str	r7, [sp, #20]
   19dc0:	mov	r0, r8
   19dc4:	mov	r1, #1
   19dc8:	b	19e74 <__assert_fail@plt+0x87a4>
   19dcc:	movw	r1, #57975	; 0xe277
   19dd0:	movt	r1, #1
   19dd4:	mov	r0, #0
   19dd8:	mov	r2, #5
   19ddc:	bl	11424 <dcgettext@plt>
   19de0:	mov	ip, r0
   19de4:	ldr	r3, [r7]
   19de8:	ldr	r0, [r7, #4]
   19dec:	ldr	r1, [r7, #8]
   19df0:	ldr	r6, [r7, #12]
   19df4:	ldr	r5, [r7, #16]
   19df8:	ldr	r4, [r7, #20]
   19dfc:	ldr	r2, [r7, #24]
   19e00:	ldr	lr, [r7, #28]
   19e04:	ldr	r7, [r7, #32]
   19e08:	stm	sp, {r0, r1, r6}
   19e0c:	str	r5, [sp, #12]
   19e10:	str	r4, [sp, #16]
   19e14:	str	r2, [sp, #20]
   19e18:	str	lr, [sp, #24]
   19e1c:	str	r7, [sp, #28]
   19e20:	b	19e68 <__assert_fail@plt+0x8798>
   19e24:	movw	r1, #57927	; 0xe247
   19e28:	mov	r0, #0
   19e2c:	mov	r2, #5
   19e30:	movt	r1, #1
   19e34:	bl	11424 <dcgettext@plt>
   19e38:	mov	ip, r0
   19e3c:	ldr	r3, [r7]
   19e40:	ldmib	r7, {r0, r1, r6}
   19e44:	ldr	r5, [r7, #16]
   19e48:	ldr	r4, [r7, #20]
   19e4c:	ldr	r2, [r7, #24]
   19e50:	ldr	r7, [r7, #28]
   19e54:	stm	sp, {r0, r1, r6}
   19e58:	str	r5, [sp, #12]
   19e5c:	str	r4, [sp, #16]
   19e60:	str	r2, [sp, #20]
   19e64:	str	r7, [sp, #24]
   19e68:	mov	r0, r8
   19e6c:	mov	r1, #1
   19e70:	mov	r2, ip
   19e74:	bl	115f8 <__fprintf_chk@plt>
   19e78:	sub	sp, fp, #24
   19e7c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19e80:	push	{r4, sl, fp, lr}
   19e84:	add	fp, sp, #8
   19e88:	sub	sp, sp, #8
   19e8c:	ldr	ip, [fp, #8]
   19e90:	mov	lr, #0
   19e94:	ldr	r4, [ip, lr, lsl #2]
   19e98:	add	lr, lr, #1
   19e9c:	cmp	r4, #0
   19ea0:	bne	19e94 <__assert_fail@plt+0x87c4>
   19ea4:	sub	r4, lr, #1
   19ea8:	str	ip, [sp]
   19eac:	str	r4, [sp, #4]
   19eb0:	bl	19b4c <__assert_fail@plt+0x847c>
   19eb4:	sub	sp, fp, #8
   19eb8:	pop	{r4, sl, fp, pc}
   19ebc:	push	{fp, lr}
   19ec0:	mov	fp, sp
   19ec4:	sub	sp, sp, #48	; 0x30
   19ec8:	ldr	ip, [fp, #8]
   19ecc:	ldr	lr, [ip]
   19ed0:	cmp	lr, #0
   19ed4:	str	lr, [sp, #8]
   19ed8:	beq	19f74 <__assert_fail@plt+0x88a4>
   19edc:	ldr	lr, [ip, #4]
   19ee0:	cmp	lr, #0
   19ee4:	str	lr, [sp, #12]
   19ee8:	beq	19f7c <__assert_fail@plt+0x88ac>
   19eec:	ldr	lr, [ip, #8]
   19ef0:	cmp	lr, #0
   19ef4:	str	lr, [sp, #16]
   19ef8:	beq	19f84 <__assert_fail@plt+0x88b4>
   19efc:	ldr	lr, [ip, #12]
   19f00:	cmp	lr, #0
   19f04:	str	lr, [sp, #20]
   19f08:	beq	19f8c <__assert_fail@plt+0x88bc>
   19f0c:	ldr	lr, [ip, #16]
   19f10:	cmp	lr, #0
   19f14:	str	lr, [sp, #24]
   19f18:	beq	19f94 <__assert_fail@plt+0x88c4>
   19f1c:	ldr	lr, [ip, #20]
   19f20:	cmp	lr, #0
   19f24:	str	lr, [sp, #28]
   19f28:	beq	19f9c <__assert_fail@plt+0x88cc>
   19f2c:	ldr	lr, [ip, #24]
   19f30:	cmp	lr, #0
   19f34:	str	lr, [sp, #32]
   19f38:	beq	19fa4 <__assert_fail@plt+0x88d4>
   19f3c:	ldr	lr, [ip, #28]
   19f40:	cmp	lr, #0
   19f44:	str	lr, [sp, #36]	; 0x24
   19f48:	beq	19fac <__assert_fail@plt+0x88dc>
   19f4c:	ldr	lr, [ip, #32]
   19f50:	cmp	lr, #0
   19f54:	str	lr, [sp, #40]	; 0x28
   19f58:	beq	19fb4 <__assert_fail@plt+0x88e4>
   19f5c:	ldr	lr, [ip, #36]	; 0x24
   19f60:	mov	ip, #10
   19f64:	cmp	lr, #0
   19f68:	str	lr, [sp, #44]	; 0x2c
   19f6c:	movweq	ip, #9
   19f70:	b	19fb8 <__assert_fail@plt+0x88e8>
   19f74:	mov	ip, #0
   19f78:	b	19fb8 <__assert_fail@plt+0x88e8>
   19f7c:	mov	ip, #1
   19f80:	b	19fb8 <__assert_fail@plt+0x88e8>
   19f84:	mov	ip, #2
   19f88:	b	19fb8 <__assert_fail@plt+0x88e8>
   19f8c:	mov	ip, #3
   19f90:	b	19fb8 <__assert_fail@plt+0x88e8>
   19f94:	mov	ip, #4
   19f98:	b	19fb8 <__assert_fail@plt+0x88e8>
   19f9c:	mov	ip, #5
   19fa0:	b	19fb8 <__assert_fail@plt+0x88e8>
   19fa4:	mov	ip, #6
   19fa8:	b	19fb8 <__assert_fail@plt+0x88e8>
   19fac:	mov	ip, #7
   19fb0:	b	19fb8 <__assert_fail@plt+0x88e8>
   19fb4:	mov	ip, #8
   19fb8:	add	lr, sp, #8
   19fbc:	str	ip, [sp, #4]
   19fc0:	str	lr, [sp]
   19fc4:	bl	19b4c <__assert_fail@plt+0x847c>
   19fc8:	mov	sp, fp
   19fcc:	pop	{fp, pc}
   19fd0:	push	{fp, lr}
   19fd4:	mov	fp, sp
   19fd8:	sub	sp, sp, #56	; 0x38
   19fdc:	add	ip, fp, #8
   19fe0:	str	ip, [sp, #12]
   19fe4:	ldr	lr, [fp, #8]
   19fe8:	cmp	lr, #0
   19fec:	str	lr, [sp, #16]
   19ff0:	beq	1a08c <__assert_fail@plt+0x89bc>
   19ff4:	ldr	lr, [ip, #4]
   19ff8:	cmp	lr, #0
   19ffc:	str	lr, [sp, #20]
   1a000:	beq	1a094 <__assert_fail@plt+0x89c4>
   1a004:	ldr	lr, [ip, #8]
   1a008:	cmp	lr, #0
   1a00c:	str	lr, [sp, #24]
   1a010:	beq	1a09c <__assert_fail@plt+0x89cc>
   1a014:	ldr	lr, [ip, #12]
   1a018:	cmp	lr, #0
   1a01c:	str	lr, [sp, #28]
   1a020:	beq	1a0a4 <__assert_fail@plt+0x89d4>
   1a024:	ldr	lr, [ip, #16]
   1a028:	cmp	lr, #0
   1a02c:	str	lr, [sp, #32]
   1a030:	beq	1a0ac <__assert_fail@plt+0x89dc>
   1a034:	ldr	lr, [ip, #20]
   1a038:	cmp	lr, #0
   1a03c:	str	lr, [sp, #36]	; 0x24
   1a040:	beq	1a0b4 <__assert_fail@plt+0x89e4>
   1a044:	ldr	lr, [ip, #24]
   1a048:	cmp	lr, #0
   1a04c:	str	lr, [sp, #40]	; 0x28
   1a050:	beq	1a0bc <__assert_fail@plt+0x89ec>
   1a054:	ldr	lr, [ip, #28]
   1a058:	cmp	lr, #0
   1a05c:	str	lr, [sp, #44]	; 0x2c
   1a060:	beq	1a0c4 <__assert_fail@plt+0x89f4>
   1a064:	ldr	lr, [ip, #32]
   1a068:	cmp	lr, #0
   1a06c:	str	lr, [sp, #48]	; 0x30
   1a070:	beq	1a0cc <__assert_fail@plt+0x89fc>
   1a074:	ldr	lr, [ip, #36]	; 0x24
   1a078:	mov	ip, #10
   1a07c:	cmp	lr, #0
   1a080:	str	lr, [sp, #52]	; 0x34
   1a084:	movweq	ip, #9
   1a088:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a08c:	mov	ip, #0
   1a090:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a094:	mov	ip, #1
   1a098:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a09c:	mov	ip, #2
   1a0a0:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a0a4:	mov	ip, #3
   1a0a8:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a0ac:	mov	ip, #4
   1a0b0:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a0b4:	mov	ip, #5
   1a0b8:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a0bc:	mov	ip, #6
   1a0c0:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a0c4:	mov	ip, #7
   1a0c8:	b	1a0d0 <__assert_fail@plt+0x8a00>
   1a0cc:	mov	ip, #8
   1a0d0:	add	lr, sp, #16
   1a0d4:	str	ip, [sp, #4]
   1a0d8:	str	lr, [sp]
   1a0dc:	bl	19b4c <__assert_fail@plt+0x847c>
   1a0e0:	mov	sp, fp
   1a0e4:	pop	{fp, pc}
   1a0e8:	push	{fp, lr}
   1a0ec:	mov	fp, sp
   1a0f0:	movw	r0, #61908	; 0xf1d4
   1a0f4:	movt	r0, #2
   1a0f8:	ldr	r1, [r0]
   1a0fc:	movw	r0, #51804	; 0xca5c
   1a100:	movt	r0, #1
   1a104:	bl	11364 <fputs_unlocked@plt>
   1a108:	movw	r1, #58087	; 0xe2e7
   1a10c:	mov	r0, #0
   1a110:	mov	r2, #5
   1a114:	movt	r1, #1
   1a118:	bl	11424 <dcgettext@plt>
   1a11c:	movw	r2, #58107	; 0xe2fb
   1a120:	mov	r1, r0
   1a124:	mov	r0, #1
   1a128:	movt	r2, #1
   1a12c:	bl	115d4 <__printf_chk@plt>
   1a130:	movw	r1, #58129	; 0xe311
   1a134:	mov	r0, #0
   1a138:	mov	r2, #5
   1a13c:	movt	r1, #1
   1a140:	bl	11424 <dcgettext@plt>
   1a144:	movw	r2, #54049	; 0xd321
   1a148:	movw	r3, #54063	; 0xd32f
   1a14c:	mov	r1, r0
   1a150:	mov	r0, #1
   1a154:	movt	r2, #1
   1a158:	movt	r3, #1
   1a15c:	bl	115d4 <__printf_chk@plt>
   1a160:	movw	r1, #58149	; 0xe325
   1a164:	mov	r0, #0
   1a168:	mov	r2, #5
   1a16c:	movt	r1, #1
   1a170:	bl	11424 <dcgettext@plt>
   1a174:	movw	r2, #58188	; 0xe34c
   1a178:	mov	r1, r0
   1a17c:	mov	r0, #1
   1a180:	movt	r2, #1
   1a184:	pop	{fp, lr}
   1a188:	b	115d4 <__printf_chk@plt>
   1a18c:	push	{r4, r5, r6, sl, fp, lr}
   1a190:	add	fp, sp, #16
   1a194:	mov	r4, r2
   1a198:	mov	r5, r1
   1a19c:	mov	r6, r0
   1a1a0:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a1a4:	cmp	r0, #0
   1a1a8:	popne	{r4, r5, r6, sl, fp, pc}
   1a1ac:	cmp	r6, #0
   1a1b0:	beq	1a1c4 <__assert_fail@plt+0x8af4>
   1a1b4:	cmp	r5, #0
   1a1b8:	cmpne	r4, #0
   1a1bc:	bne	1a1c4 <__assert_fail@plt+0x8af4>
   1a1c0:	pop	{r4, r5, r6, sl, fp, pc}
   1a1c4:	bl	1a740 <__assert_fail@plt+0x9070>
   1a1c8:	push	{r4, r5, r6, sl, fp, lr}
   1a1cc:	add	fp, sp, #16
   1a1d0:	mov	r4, r2
   1a1d4:	mov	r5, r1
   1a1d8:	mov	r6, r0
   1a1dc:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a1e0:	cmp	r0, #0
   1a1e4:	popne	{r4, r5, r6, sl, fp, pc}
   1a1e8:	cmp	r6, #0
   1a1ec:	beq	1a200 <__assert_fail@plt+0x8b30>
   1a1f0:	cmp	r5, #0
   1a1f4:	cmpne	r4, #0
   1a1f8:	bne	1a200 <__assert_fail@plt+0x8b30>
   1a1fc:	pop	{r4, r5, r6, sl, fp, pc}
   1a200:	bl	1a740 <__assert_fail@plt+0x9070>
   1a204:	push	{fp, lr}
   1a208:	mov	fp, sp
   1a20c:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a210:	cmp	r0, #0
   1a214:	popne	{fp, pc}
   1a218:	bl	1a740 <__assert_fail@plt+0x9070>
   1a21c:	push	{fp, lr}
   1a220:	mov	fp, sp
   1a224:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a228:	cmp	r0, #0
   1a22c:	popne	{fp, pc}
   1a230:	bl	1a740 <__assert_fail@plt+0x9070>
   1a234:	push	{fp, lr}
   1a238:	mov	fp, sp
   1a23c:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a240:	cmp	r0, #0
   1a244:	popne	{fp, pc}
   1a248:	bl	1a740 <__assert_fail@plt+0x9070>
   1a24c:	push	{r4, r5, fp, lr}
   1a250:	add	fp, sp, #8
   1a254:	mov	r4, r1
   1a258:	mov	r5, r0
   1a25c:	bl	1b5ec <__assert_fail@plt+0x9f1c>
   1a260:	cmp	r0, #0
   1a264:	popne	{r4, r5, fp, pc}
   1a268:	cmp	r5, #0
   1a26c:	beq	1a27c <__assert_fail@plt+0x8bac>
   1a270:	cmp	r4, #0
   1a274:	bne	1a27c <__assert_fail@plt+0x8bac>
   1a278:	pop	{r4, r5, fp, pc}
   1a27c:	bl	1a740 <__assert_fail@plt+0x9070>
   1a280:	push	{fp, lr}
   1a284:	mov	fp, sp
   1a288:	cmp	r1, #0
   1a28c:	orreq	r1, r1, #1
   1a290:	bl	1b5ec <__assert_fail@plt+0x9f1c>
   1a294:	cmp	r0, #0
   1a298:	popne	{fp, pc}
   1a29c:	bl	1a740 <__assert_fail@plt+0x9070>
   1a2a0:	push	{fp, lr}
   1a2a4:	mov	fp, sp
   1a2a8:	clz	r3, r2
   1a2ac:	lsr	ip, r3, #5
   1a2b0:	clz	r3, r1
   1a2b4:	lsr	r3, r3, #5
   1a2b8:	orrs	r3, r3, ip
   1a2bc:	movwne	r1, #1
   1a2c0:	movwne	r2, #1
   1a2c4:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a2c8:	cmp	r0, #0
   1a2cc:	popne	{fp, pc}
   1a2d0:	bl	1a740 <__assert_fail@plt+0x9070>
   1a2d4:	push	{fp, lr}
   1a2d8:	mov	fp, sp
   1a2dc:	mov	r2, r1
   1a2e0:	mov	r1, r0
   1a2e4:	mov	r0, #0
   1a2e8:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a2ec:	cmp	r0, #0
   1a2f0:	popne	{fp, pc}
   1a2f4:	bl	1a740 <__assert_fail@plt+0x9070>
   1a2f8:	push	{fp, lr}
   1a2fc:	mov	fp, sp
   1a300:	mov	r2, r1
   1a304:	mov	r1, r0
   1a308:	clz	r0, r2
   1a30c:	clz	r3, r1
   1a310:	lsr	r0, r0, #5
   1a314:	lsr	r3, r3, #5
   1a318:	orrs	r0, r3, r0
   1a31c:	mov	r0, #0
   1a320:	movwne	r1, #1
   1a324:	movwne	r2, #1
   1a328:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a32c:	cmp	r0, #0
   1a330:	popne	{fp, pc}
   1a334:	bl	1a740 <__assert_fail@plt+0x9070>
   1a338:	push	{r4, r5, r6, sl, fp, lr}
   1a33c:	add	fp, sp, #16
   1a340:	ldr	r5, [r1]
   1a344:	mov	r4, r1
   1a348:	mov	r6, r0
   1a34c:	cmp	r0, #0
   1a350:	beq	1a368 <__assert_fail@plt+0x8c98>
   1a354:	mov	r0, #1
   1a358:	add	r0, r0, r5, lsr #1
   1a35c:	adds	r5, r5, r0
   1a360:	bcc	1a370 <__assert_fail@plt+0x8ca0>
   1a364:	b	1a3ac <__assert_fail@plt+0x8cdc>
   1a368:	cmp	r5, #0
   1a36c:	movweq	r5, #64	; 0x40
   1a370:	mov	r0, r6
   1a374:	mov	r1, r5
   1a378:	mov	r2, #1
   1a37c:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a380:	cmp	r5, #0
   1a384:	mov	r1, r5
   1a388:	movwne	r1, #1
   1a38c:	cmp	r0, #0
   1a390:	bne	1a3a4 <__assert_fail@plt+0x8cd4>
   1a394:	clz	r2, r6
   1a398:	lsr	r2, r2, #5
   1a39c:	orrs	r1, r2, r1
   1a3a0:	bne	1a3ac <__assert_fail@plt+0x8cdc>
   1a3a4:	str	r5, [r4]
   1a3a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a3ac:	bl	1a740 <__assert_fail@plt+0x9070>
   1a3b0:	push	{r4, r5, r6, r7, fp, lr}
   1a3b4:	add	fp, sp, #16
   1a3b8:	ldr	r5, [r1]
   1a3bc:	mov	r6, r2
   1a3c0:	mov	r4, r1
   1a3c4:	mov	r7, r0
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a3e4 <__assert_fail@plt+0x8d14>
   1a3d0:	mov	r0, #1
   1a3d4:	add	r0, r0, r5, lsr #1
   1a3d8:	adds	r5, r5, r0
   1a3dc:	bcc	1a3fc <__assert_fail@plt+0x8d2c>
   1a3e0:	b	1a430 <__assert_fail@plt+0x8d60>
   1a3e4:	cmp	r5, #0
   1a3e8:	bne	1a3fc <__assert_fail@plt+0x8d2c>
   1a3ec:	mov	r0, #64	; 0x40
   1a3f0:	cmp	r6, #64	; 0x40
   1a3f4:	udiv	r5, r0, r6
   1a3f8:	addhi	r5, r5, #1
   1a3fc:	mov	r0, r7
   1a400:	mov	r1, r5
   1a404:	mov	r2, r6
   1a408:	bl	1bc8c <__assert_fail@plt+0xa5bc>
   1a40c:	cmp	r0, #0
   1a410:	bne	1a428 <__assert_fail@plt+0x8d58>
   1a414:	cmp	r7, #0
   1a418:	beq	1a430 <__assert_fail@plt+0x8d60>
   1a41c:	cmp	r6, #0
   1a420:	cmpne	r5, #0
   1a424:	bne	1a430 <__assert_fail@plt+0x8d60>
   1a428:	str	r5, [r4]
   1a42c:	pop	{r4, r5, r6, r7, fp, pc}
   1a430:	bl	1a740 <__assert_fail@plt+0x9070>
   1a434:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a438:	add	fp, sp, #24
   1a43c:	mov	r8, r1
   1a440:	ldr	r1, [r1]
   1a444:	mov	r5, r0
   1a448:	add	r0, r1, r1, asr #1
   1a44c:	cmp	r0, r1
   1a450:	mvnvs	r0, #-2147483648	; 0x80000000
   1a454:	cmp	r0, r3
   1a458:	mov	r7, r0
   1a45c:	movgt	r7, r3
   1a460:	cmn	r3, #1
   1a464:	movle	r7, r0
   1a468:	ldr	r0, [fp, #8]
   1a46c:	cmn	r0, #1
   1a470:	ble	1a498 <__assert_fail@plt+0x8dc8>
   1a474:	cmp	r0, #0
   1a478:	beq	1a4ec <__assert_fail@plt+0x8e1c>
   1a47c:	cmn	r7, #1
   1a480:	ble	1a4c0 <__assert_fail@plt+0x8df0>
   1a484:	mvn	r4, #-2147483648	; 0x80000000
   1a488:	udiv	r6, r4, r0
   1a48c:	cmp	r6, r7
   1a490:	bge	1a4ec <__assert_fail@plt+0x8e1c>
   1a494:	b	1a4fc <__assert_fail@plt+0x8e2c>
   1a498:	cmn	r7, #1
   1a49c:	ble	1a4dc <__assert_fail@plt+0x8e0c>
   1a4a0:	cmn	r0, #1
   1a4a4:	beq	1a4ec <__assert_fail@plt+0x8e1c>
   1a4a8:	mov	r6, #-2147483648	; 0x80000000
   1a4ac:	mvn	r4, #-2147483648	; 0x80000000
   1a4b0:	sdiv	r6, r6, r0
   1a4b4:	cmp	r6, r7
   1a4b8:	bge	1a4ec <__assert_fail@plt+0x8e1c>
   1a4bc:	b	1a4fc <__assert_fail@plt+0x8e2c>
   1a4c0:	beq	1a4ec <__assert_fail@plt+0x8e1c>
   1a4c4:	mov	r6, #-2147483648	; 0x80000000
   1a4c8:	mvn	r4, #-2147483648	; 0x80000000
   1a4cc:	sdiv	r6, r6, r7
   1a4d0:	cmp	r6, r0
   1a4d4:	bge	1a4ec <__assert_fail@plt+0x8e1c>
   1a4d8:	b	1a4fc <__assert_fail@plt+0x8e2c>
   1a4dc:	mvn	r4, #-2147483648	; 0x80000000
   1a4e0:	sdiv	r6, r4, r0
   1a4e4:	cmp	r7, r6
   1a4e8:	blt	1a4fc <__assert_fail@plt+0x8e2c>
   1a4ec:	mul	r6, r7, r0
   1a4f0:	mov	r4, #64	; 0x40
   1a4f4:	cmp	r6, #63	; 0x3f
   1a4f8:	bgt	1a504 <__assert_fail@plt+0x8e34>
   1a4fc:	sdiv	r7, r4, r0
   1a500:	mul	r6, r7, r0
   1a504:	cmp	r5, #0
   1a508:	moveq	r4, #0
   1a50c:	streq	r4, [r8]
   1a510:	sub	r4, r7, r1
   1a514:	cmp	r4, r2
   1a518:	bge	1a5c4 <__assert_fail@plt+0x8ef4>
   1a51c:	add	r7, r1, r2
   1a520:	mov	r6, #0
   1a524:	mov	r2, #0
   1a528:	cmp	r7, r3
   1a52c:	movwgt	r6, #1
   1a530:	cmn	r3, #1
   1a534:	movwgt	r2, #1
   1a538:	cmp	r7, r1
   1a53c:	bvs	1a5f8 <__assert_fail@plt+0x8f28>
   1a540:	ands	r1, r2, r6
   1a544:	bne	1a5f8 <__assert_fail@plt+0x8f28>
   1a548:	cmn	r0, #1
   1a54c:	ble	1a574 <__assert_fail@plt+0x8ea4>
   1a550:	cmp	r0, #0
   1a554:	beq	1a5c0 <__assert_fail@plt+0x8ef0>
   1a558:	cmn	r7, #1
   1a55c:	ble	1a598 <__assert_fail@plt+0x8ec8>
   1a560:	mvn	r1, #-2147483648	; 0x80000000
   1a564:	udiv	r1, r1, r0
   1a568:	cmp	r1, r7
   1a56c:	bge	1a5c0 <__assert_fail@plt+0x8ef0>
   1a570:	b	1a5f8 <__assert_fail@plt+0x8f28>
   1a574:	cmn	r7, #1
   1a578:	ble	1a5b0 <__assert_fail@plt+0x8ee0>
   1a57c:	cmn	r0, #1
   1a580:	beq	1a5c0 <__assert_fail@plt+0x8ef0>
   1a584:	mov	r1, #-2147483648	; 0x80000000
   1a588:	sdiv	r1, r1, r0
   1a58c:	cmp	r1, r7
   1a590:	bge	1a5c0 <__assert_fail@plt+0x8ef0>
   1a594:	b	1a5f8 <__assert_fail@plt+0x8f28>
   1a598:	beq	1a5c0 <__assert_fail@plt+0x8ef0>
   1a59c:	mov	r1, #-2147483648	; 0x80000000
   1a5a0:	sdiv	r1, r1, r7
   1a5a4:	cmp	r1, r0
   1a5a8:	bge	1a5c0 <__assert_fail@plt+0x8ef0>
   1a5ac:	b	1a5f8 <__assert_fail@plt+0x8f28>
   1a5b0:	mvn	r1, #-2147483648	; 0x80000000
   1a5b4:	sdiv	r1, r1, r0
   1a5b8:	cmp	r7, r1
   1a5bc:	blt	1a5f8 <__assert_fail@plt+0x8f28>
   1a5c0:	mul	r6, r7, r0
   1a5c4:	mov	r0, r5
   1a5c8:	mov	r1, r6
   1a5cc:	bl	1b5ec <__assert_fail@plt+0x9f1c>
   1a5d0:	cmp	r6, #0
   1a5d4:	movwne	r6, #1
   1a5d8:	cmp	r0, #0
   1a5dc:	bne	1a5f0 <__assert_fail@plt+0x8f20>
   1a5e0:	clz	r1, r5
   1a5e4:	lsr	r1, r1, #5
   1a5e8:	orrs	r1, r1, r6
   1a5ec:	bne	1a5f8 <__assert_fail@plt+0x8f28>
   1a5f0:	str	r7, [r8]
   1a5f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a5f8:	bl	1a740 <__assert_fail@plt+0x9070>
   1a5fc:	push	{fp, lr}
   1a600:	mov	fp, sp
   1a604:	mov	r1, #1
   1a608:	bl	1b568 <__assert_fail@plt+0x9e98>
   1a60c:	cmp	r0, #0
   1a610:	popne	{fp, pc}
   1a614:	bl	1a740 <__assert_fail@plt+0x9070>
   1a618:	push	{fp, lr}
   1a61c:	mov	fp, sp
   1a620:	bl	1b568 <__assert_fail@plt+0x9e98>
   1a624:	cmp	r0, #0
   1a628:	popne	{fp, pc}
   1a62c:	bl	1a740 <__assert_fail@plt+0x9070>
   1a630:	push	{fp, lr}
   1a634:	mov	fp, sp
   1a638:	mov	r1, #1
   1a63c:	bl	1b568 <__assert_fail@plt+0x9e98>
   1a640:	cmp	r0, #0
   1a644:	popne	{fp, pc}
   1a648:	bl	1a740 <__assert_fail@plt+0x9070>
   1a64c:	push	{fp, lr}
   1a650:	mov	fp, sp
   1a654:	bl	1b568 <__assert_fail@plt+0x9e98>
   1a658:	cmp	r0, #0
   1a65c:	popne	{fp, pc}
   1a660:	bl	1a740 <__assert_fail@plt+0x9070>
   1a664:	push	{r4, r5, fp, lr}
   1a668:	add	fp, sp, #8
   1a66c:	mov	r5, r0
   1a670:	mov	r0, r1
   1a674:	mov	r4, r1
   1a678:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a67c:	cmp	r0, #0
   1a680:	beq	1a694 <__assert_fail@plt+0x8fc4>
   1a684:	mov	r1, r5
   1a688:	mov	r2, r4
   1a68c:	pop	{r4, r5, fp, lr}
   1a690:	b	113f4 <memcpy@plt>
   1a694:	bl	1a740 <__assert_fail@plt+0x9070>
   1a698:	push	{r4, r5, fp, lr}
   1a69c:	add	fp, sp, #8
   1a6a0:	mov	r5, r0
   1a6a4:	mov	r0, r1
   1a6a8:	mov	r4, r1
   1a6ac:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a6b0:	cmp	r0, #0
   1a6b4:	beq	1a6c8 <__assert_fail@plt+0x8ff8>
   1a6b8:	mov	r1, r5
   1a6bc:	mov	r2, r4
   1a6c0:	pop	{r4, r5, fp, lr}
   1a6c4:	b	113f4 <memcpy@plt>
   1a6c8:	bl	1a740 <__assert_fail@plt+0x9070>
   1a6cc:	push	{r4, r5, fp, lr}
   1a6d0:	add	fp, sp, #8
   1a6d4:	mov	r5, r0
   1a6d8:	add	r0, r1, #1
   1a6dc:	mov	r4, r1
   1a6e0:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a6e4:	cmp	r0, #0
   1a6e8:	beq	1a704 <__assert_fail@plt+0x9034>
   1a6ec:	mov	r1, #0
   1a6f0:	mov	r2, r4
   1a6f4:	strb	r1, [r0, r4]
   1a6f8:	mov	r1, r5
   1a6fc:	pop	{r4, r5, fp, lr}
   1a700:	b	113f4 <memcpy@plt>
   1a704:	bl	1a740 <__assert_fail@plt+0x9070>
   1a708:	push	{r4, r5, fp, lr}
   1a70c:	add	fp, sp, #8
   1a710:	mov	r4, r0
   1a714:	bl	11574 <strlen@plt>
   1a718:	add	r5, r0, #1
   1a71c:	mov	r0, r5
   1a720:	bl	1b5bc <__assert_fail@plt+0x9eec>
   1a724:	cmp	r0, #0
   1a728:	beq	1a73c <__assert_fail@plt+0x906c>
   1a72c:	mov	r1, r4
   1a730:	mov	r2, r5
   1a734:	pop	{r4, r5, fp, lr}
   1a738:	b	113f4 <memcpy@plt>
   1a73c:	bl	1a740 <__assert_fail@plt+0x9070>
   1a740:	push	{fp, lr}
   1a744:	mov	fp, sp
   1a748:	movw	r0, #61804	; 0xf16c
   1a74c:	movw	r1, #58264	; 0xe398
   1a750:	mov	r2, #5
   1a754:	movt	r0, #2
   1a758:	movt	r1, #1
   1a75c:	ldr	r4, [r0]
   1a760:	mov	r0, #0
   1a764:	bl	11424 <dcgettext@plt>
   1a768:	movw	r2, #55080	; 0xd728
   1a76c:	mov	r3, r0
   1a770:	mov	r0, r4
   1a774:	mov	r1, #0
   1a778:	movt	r2, #1
   1a77c:	bl	114c0 <error@plt>
   1a780:	bl	116a0 <abort@plt>
   1a784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a788:	add	fp, sp, #28
   1a78c:	sub	sp, sp, #44	; 0x2c
   1a790:	cmp	r2, #37	; 0x25
   1a794:	bcs	1b404 <__assert_fail@plt+0x9d34>
   1a798:	ldr	sl, [fp, #8]
   1a79c:	mov	r6, r2
   1a7a0:	mov	r7, r1
   1a7a4:	mov	r4, r0
   1a7a8:	str	r3, [sp, #36]	; 0x24
   1a7ac:	bl	11598 <__errno_location@plt>
   1a7b0:	mov	r5, r0
   1a7b4:	mov	r0, #0
   1a7b8:	str	r0, [r5]
   1a7bc:	bl	11550 <__ctype_b_loc@plt>
   1a7c0:	ldr	r1, [r0]
   1a7c4:	mov	r2, r4
   1a7c8:	ldrb	r0, [r2], #1
   1a7cc:	add	r3, r1, r0, lsl #1
   1a7d0:	ldrb	r3, [r3, #1]
   1a7d4:	tst	r3, #32
   1a7d8:	bne	1a7c8 <__assert_fail@plt+0x90f8>
   1a7dc:	cmp	r7, #0
   1a7e0:	sub	r9, fp, #32
   1a7e4:	mov	r8, #4
   1a7e8:	movne	r9, r7
   1a7ec:	cmp	r0, #45	; 0x2d
   1a7f0:	beq	1b3f8 <__assert_fail@plt+0x9d28>
   1a7f4:	mov	r0, r4
   1a7f8:	mov	r1, r9
   1a7fc:	mov	r2, r6
   1a800:	mov	r3, #0
   1a804:	bl	11400 <__strtoull_internal@plt>
   1a808:	mov	r7, r1
   1a80c:	ldr	r1, [r9]
   1a810:	cmp	r1, r4
   1a814:	beq	1a840 <__assert_fail@plt+0x9170>
   1a818:	mov	r6, r0
   1a81c:	ldr	r0, [r5]
   1a820:	cmp	r0, #0
   1a824:	beq	1a87c <__assert_fail@plt+0x91ac>
   1a828:	cmp	r0, #34	; 0x22
   1a82c:	bne	1b3f8 <__assert_fail@plt+0x9d28>
   1a830:	mov	r8, #1
   1a834:	cmp	sl, #0
   1a838:	bne	1a888 <__assert_fail@plt+0x91b8>
   1a83c:	b	1b3f0 <__assert_fail@plt+0x9d20>
   1a840:	cmp	sl, #0
   1a844:	beq	1b3f8 <__assert_fail@plt+0x9d28>
   1a848:	mov	r5, r1
   1a84c:	ldrb	r1, [r4]
   1a850:	cmp	r1, #0
   1a854:	beq	1b3f8 <__assert_fail@plt+0x9d28>
   1a858:	mov	r0, sl
   1a85c:	bl	11580 <strchr@plt>
   1a860:	cmp	r0, #0
   1a864:	beq	1b3f8 <__assert_fail@plt+0x9d28>
   1a868:	mov	r1, r5
   1a86c:	mov	r8, #0
   1a870:	mov	r6, #1
   1a874:	mov	r7, #0
   1a878:	b	1a888 <__assert_fail@plt+0x91b8>
   1a87c:	mov	r8, r0
   1a880:	cmp	sl, #0
   1a884:	beq	1b3f0 <__assert_fail@plt+0x9d20>
   1a888:	ldrb	r4, [r1]
   1a88c:	cmp	r4, #0
   1a890:	beq	1b3f0 <__assert_fail@plt+0x9d20>
   1a894:	str	r1, [sp, #32]
   1a898:	mov	r0, sl
   1a89c:	mov	r1, r4
   1a8a0:	bl	11580 <strchr@plt>
   1a8a4:	cmp	r0, #0
   1a8a8:	beq	1ab70 <__assert_fail@plt+0x94a0>
   1a8ac:	sub	r0, r4, #69	; 0x45
   1a8b0:	mov	r1, #1
   1a8b4:	mov	r3, #0
   1a8b8:	mov	r5, #1024	; 0x400
   1a8bc:	cmp	r0, #47	; 0x2f
   1a8c0:	str	r1, [sp, #28]
   1a8c4:	bhi	1a9c8 <__assert_fail@plt+0x92f8>
   1a8c8:	add	r1, pc, #0
   1a8cc:	ldr	pc, [r1, r0, lsl #2]
   1a8d0:	muleq	r1, r0, r9
   1a8d4:	andeq	sl, r1, r8, asr #19
   1a8d8:	muleq	r1, r0, r9
   1a8dc:	andeq	sl, r1, r8, asr #19
   1a8e0:	andeq	sl, r1, r8, asr #19
   1a8e4:	andeq	sl, r1, r8, asr #19
   1a8e8:	muleq	r1, r0, r9
   1a8ec:	andeq	sl, r1, r8, asr #19
   1a8f0:	muleq	r1, r0, r9
   1a8f4:	andeq	sl, r1, r8, asr #19
   1a8f8:	andeq	sl, r1, r8, asr #19
   1a8fc:	muleq	r1, r0, r9
   1a900:	andeq	sl, r1, r8, asr #19
   1a904:	andeq	sl, r1, r8, asr #19
   1a908:	andeq	sl, r1, r8, asr #19
   1a90c:	muleq	r1, r0, r9
   1a910:	andeq	sl, r1, r8, asr #19
   1a914:	andeq	sl, r1, r8, asr #19
   1a918:	andeq	sl, r1, r8, asr #19
   1a91c:	andeq	sl, r1, r8, asr #19
   1a920:	muleq	r1, r0, r9
   1a924:	muleq	r1, r0, r9
   1a928:	andeq	sl, r1, r8, asr #19
   1a92c:	andeq	sl, r1, r8, asr #19
   1a930:	andeq	sl, r1, r8, asr #19
   1a934:	andeq	sl, r1, r8, asr #19
   1a938:	andeq	sl, r1, r8, asr #19
   1a93c:	andeq	sl, r1, r8, asr #19
   1a940:	andeq	sl, r1, r8, asr #19
   1a944:	andeq	sl, r1, r8, asr #19
   1a948:	andeq	sl, r1, r8, asr #19
   1a94c:	andeq	sl, r1, r8, asr #19
   1a950:	andeq	sl, r1, r8, asr #19
   1a954:	andeq	sl, r1, r8, asr #19
   1a958:	muleq	r1, r0, r9
   1a95c:	andeq	sl, r1, r8, asr #19
   1a960:	andeq	sl, r1, r8, asr #19
   1a964:	andeq	sl, r1, r8, asr #19
   1a968:	muleq	r1, r0, r9
   1a96c:	andeq	sl, r1, r8, asr #19
   1a970:	muleq	r1, r0, r9
   1a974:	andeq	sl, r1, r8, asr #19
   1a978:	andeq	sl, r1, r8, asr #19
   1a97c:	andeq	sl, r1, r8, asr #19
   1a980:	andeq	sl, r1, r8, asr #19
   1a984:	andeq	sl, r1, r8, asr #19
   1a988:	andeq	sl, r1, r8, asr #19
   1a98c:	muleq	r1, r0, r9
   1a990:	mov	r0, sl
   1a994:	mov	r1, #48	; 0x30
   1a998:	bl	11580 <strchr@plt>
   1a99c:	cmp	r0, #0
   1a9a0:	beq	1a9c4 <__assert_fail@plt+0x92f4>
   1a9a4:	ldr	r1, [sp, #32]
   1a9a8:	ldrb	r0, [r1, #1]
   1a9ac:	cmp	r0, #66	; 0x42
   1a9b0:	cmpne	r0, #68	; 0x44
   1a9b4:	bne	1ab7c <__assert_fail@plt+0x94ac>
   1a9b8:	mov	r5, #1000	; 0x3e8
   1a9bc:	mov	r0, #2
   1a9c0:	str	r0, [sp, #28]
   1a9c4:	mov	r3, #0
   1a9c8:	sub	r0, r4, #66	; 0x42
   1a9cc:	cmp	r0, #53	; 0x35
   1a9d0:	bhi	1ab70 <__assert_fail@plt+0x94a0>
   1a9d4:	add	r1, pc, #0
   1a9d8:	ldr	pc, [r1, r0, lsl #2]
   1a9dc:	strdeq	sl, [r1], -r8
   1a9e0:	andeq	sl, r1, r0, ror fp
   1a9e4:	andeq	sl, r1, r0, ror fp
   1a9e8:	andeq	sl, r1, r0, lsr #30
   1a9ec:	andeq	sl, r1, r0, ror fp
   1a9f0:			; <UNDEFINED> instruction: 0x0001aab4
   1a9f4:	andeq	sl, r1, r0, ror fp
   1a9f8:	andeq	sl, r1, r0, ror fp
   1a9fc:	andeq	sl, r1, r0, ror fp
   1aa00:	andeq	sl, r1, r0, lsr #23
   1aa04:	andeq	sl, r1, r0, ror fp
   1aa08:	andeq	sl, r1, r8, ror #23
   1aa0c:	andeq	sl, r1, r0, ror fp
   1aa10:	andeq	sl, r1, r0, ror fp
   1aa14:	andeq	fp, r1, r8, ror r0
   1aa18:	andeq	sl, r1, r0, ror fp
   1aa1c:	andeq	sl, r1, r0, ror fp
   1aa20:	andeq	sl, r1, r0, ror fp
   1aa24:	andeq	sl, r1, r4, ror ip
   1aa28:	andeq	sl, r1, r0, ror fp
   1aa2c:	andeq	sl, r1, r0, ror fp
   1aa30:	andeq	sl, r1, r0, ror fp
   1aa34:	andeq	sl, r1, r0, ror fp
   1aa38:	andeq	fp, r1, r0, lsr #3
   1aa3c:	andeq	sl, r1, ip, asr sp
   1aa40:	andeq	sl, r1, r0, ror fp
   1aa44:	andeq	sl, r1, r0, ror fp
   1aa48:	andeq	sl, r1, r0, ror fp
   1aa4c:	andeq	sl, r1, r0, ror fp
   1aa50:	andeq	sl, r1, r0, ror fp
   1aa54:	andeq	sl, r1, r0, ror fp
   1aa58:	andeq	sl, r1, r0, ror fp
   1aa5c:	andeq	fp, r1, r8, ror r3
   1aa60:	ldrdeq	fp, [r1], -r0
   1aa64:	andeq	sl, r1, r0, ror fp
   1aa68:	andeq	sl, r1, r0, ror fp
   1aa6c:	andeq	sl, r1, r0, ror fp
   1aa70:			; <UNDEFINED> instruction: 0x0001aab4
   1aa74:	andeq	sl, r1, r0, ror fp
   1aa78:	andeq	sl, r1, r0, ror fp
   1aa7c:	andeq	sl, r1, r0, ror fp
   1aa80:	andeq	sl, r1, r0, lsr #23
   1aa84:	andeq	sl, r1, r0, ror fp
   1aa88:	andeq	sl, r1, r8, ror #23
   1aa8c:	andeq	sl, r1, r0, ror fp
   1aa90:	andeq	sl, r1, r0, ror fp
   1aa94:	andeq	sl, r1, r0, ror fp
   1aa98:	andeq	sl, r1, r0, ror fp
   1aa9c:	andeq	sl, r1, r0, ror fp
   1aaa0:	andeq	sl, r1, r0, ror fp
   1aaa4:	andeq	sl, r1, r4, ror ip
   1aaa8:	andeq	sl, r1, r0, ror fp
   1aaac:	andeq	sl, r1, r0, ror fp
   1aab0:	andeq	fp, r1, ip, lsr #7
   1aab4:	mvn	r0, #0
   1aab8:	mvn	r1, #0
   1aabc:	mov	r2, r5
   1aac0:	mov	sl, r3
   1aac4:	bl	1c268 <__assert_fail@plt+0xab98>
   1aac8:	subs	r3, r0, r6
   1aacc:	umull	r4, r2, r6, r5
   1aad0:	mov	lr, #0
   1aad4:	str	r1, [sp, #20]
   1aad8:	sbcs	r3, r1, r7
   1aadc:	movwcc	lr, #1
   1aae0:	mla	ip, r6, sl, r2
   1aae4:	mov	r2, r1
   1aae8:	mov	r2, #0
   1aaec:	cmp	lr, #0
   1aaf0:	mla	r7, r7, r5, ip
   1aaf4:	mvnne	r4, #0
   1aaf8:	mvnne	r7, #0
   1aafc:	subs	r6, r0, r4
   1ab00:	sbcs	r6, r1, r7
   1ab04:	umull	r3, r6, r4, r5
   1ab08:	movwcc	r2, #1
   1ab0c:	cmp	r2, #0
   1ab10:	mvnne	r3, #0
   1ab14:	cmp	r2, #0
   1ab18:	str	r6, [sp, #16]
   1ab1c:	umull	r6, ip, r3, r5
   1ab20:	mla	r1, r3, sl, ip
   1ab24:	ldr	ip, [sp, #16]
   1ab28:	str	r1, [sp, #12]
   1ab2c:	mla	r4, r4, sl, ip
   1ab30:	mla	r4, r7, r5, r4
   1ab34:	mvnne	r4, #0
   1ab38:	subs	r0, r0, r3
   1ab3c:	ldr	r0, [sp, #20]
   1ab40:	ldr	r7, [sp, #12]
   1ab44:	sbcs	r0, r0, r4
   1ab48:	mov	r0, #0
   1ab4c:	mla	r7, r4, r5, r7
   1ab50:	movwcc	r0, #1
   1ab54:	cmp	r0, #0
   1ab58:	mov	r1, r0
   1ab5c:	orr	r0, lr, r2
   1ab60:	mvnne	r7, #0
   1ab64:	mvnne	r6, #0
   1ab68:	orr	r3, r0, r1
   1ab6c:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1ab70:	ldr	r0, [sp, #36]	; 0x24
   1ab74:	orr	r8, r8, #2
   1ab78:	b	1b3f4 <__assert_fail@plt+0x9d24>
   1ab7c:	cmp	r0, #105	; 0x69
   1ab80:	mov	r3, #0
   1ab84:	bne	1a9c8 <__assert_fail@plt+0x92f8>
   1ab88:	ldrb	r0, [r1, #2]
   1ab8c:	mov	r1, #1
   1ab90:	cmp	r0, #66	; 0x42
   1ab94:	movweq	r1, #3
   1ab98:	str	r1, [sp, #28]
   1ab9c:	b	1a9c8 <__assert_fail@plt+0x92f8>
   1aba0:	mvn	r0, #0
   1aba4:	mvn	r1, #0
   1aba8:	mov	r2, r5
   1abac:	mov	r4, r3
   1abb0:	bl	1c268 <__assert_fail@plt+0xab98>
   1abb4:	subs	r0, r0, r6
   1abb8:	mov	r2, #0
   1abbc:	sbcs	r0, r1, r7
   1abc0:	umull	r0, r1, r6, r5
   1abc4:	movwcc	r2, #1
   1abc8:	cmp	r2, #0
   1abcc:	mla	r1, r6, r4, r1
   1abd0:	mov	r3, r2
   1abd4:	mvnne	r0, #0
   1abd8:	mla	r7, r7, r5, r1
   1abdc:	mvnne	r7, #0
   1abe0:	mov	r6, r0
   1abe4:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1abe8:	mvn	r0, #0
   1abec:	mvn	r1, #0
   1abf0:	mov	r2, r5
   1abf4:	str	r3, [sp, #24]
   1abf8:	bl	1c268 <__assert_fail@plt+0xab98>
   1abfc:	subs	r3, r0, r6
   1ac00:	mov	ip, r0
   1ac04:	umull	r4, r0, r6, r5
   1ac08:	mov	sl, #0
   1ac0c:	sbcs	r3, r1, r7
   1ac10:	mov	r3, #0
   1ac14:	movwcc	r3, #1
   1ac18:	cmp	r3, #0
   1ac1c:	str	r0, [sp, #20]
   1ac20:	ldr	r0, [sp, #24]
   1ac24:	mvnne	r4, #0
   1ac28:	cmp	r3, #0
   1ac2c:	umull	lr, r2, r4, r5
   1ac30:	mla	r2, r4, r0, r2
   1ac34:	str	r2, [sp, #16]
   1ac38:	ldr	r2, [sp, #20]
   1ac3c:	mla	r6, r6, r0, r2
   1ac40:	ldr	r0, [sp, #16]
   1ac44:	mla	r6, r7, r5, r6
   1ac48:	mvnne	r6, #0
   1ac4c:	mla	r7, r6, r5, r0
   1ac50:	subs	r0, ip, r4
   1ac54:	sbcs	r0, r1, r6
   1ac58:	movwcc	sl, #1
   1ac5c:	cmp	sl, #0
   1ac60:	orr	r3, r3, sl
   1ac64:	mvnne	lr, #0
   1ac68:	mvnne	r7, #0
   1ac6c:	mov	r6, lr
   1ac70:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1ac74:	mvn	r0, #0
   1ac78:	mvn	r1, #0
   1ac7c:	mov	r2, r5
   1ac80:	mov	sl, r3
   1ac84:	bl	1c268 <__assert_fail@plt+0xab98>
   1ac88:	subs	r3, r0, r6
   1ac8c:	mov	ip, r1
   1ac90:	umull	r2, lr, r6, r5
   1ac94:	str	r0, [sp, #20]
   1ac98:	sbcs	r3, r1, r7
   1ac9c:	mov	r1, #0
   1aca0:	str	ip, [sp, #16]
   1aca4:	movwcc	r1, #1
   1aca8:	mla	r6, r6, sl, lr
   1acac:	mov	lr, #0
   1acb0:	cmp	r1, #0
   1acb4:	mla	r7, r7, r5, r6
   1acb8:	mvnne	r2, #0
   1acbc:	cmp	r1, #0
   1acc0:	umull	r3, r4, r2, r5
   1acc4:	mvnne	r7, #0
   1acc8:	mla	r4, r2, sl, r4
   1accc:	subs	r2, r0, r2
   1acd0:	sbcs	r2, ip, r7
   1acd4:	mla	r4, r7, r5, r4
   1acd8:	mov	r2, #0
   1acdc:	movwcc	lr, #1
   1ace0:	cmp	lr, #0
   1ace4:	mvnne	r3, #0
   1ace8:	mvnne	r4, #0
   1acec:	subs	r7, r0, r3
   1acf0:	mov	r0, r5
   1acf4:	sbcs	r7, ip, r4
   1acf8:	umull	r5, r7, r3, r5
   1acfc:	movwcc	r2, #1
   1ad00:	cmp	r2, #0
   1ad04:	mla	r3, r3, sl, r7
   1ad08:	mvnne	r5, #0
   1ad0c:	cmp	r2, #0
   1ad10:	mla	r3, r4, r0, r3
   1ad14:	umull	r6, ip, r5, r0
   1ad18:	mvnne	r3, #0
   1ad1c:	mla	ip, r5, sl, ip
   1ad20:	mla	r7, r3, r0, ip
   1ad24:	ldr	r0, [sp, #20]
   1ad28:	subs	r0, r0, r5
   1ad2c:	ldr	r0, [sp, #16]
   1ad30:	sbcs	r0, r0, r3
   1ad34:	mov	r0, #0
   1ad38:	movwcc	r0, #1
   1ad3c:	cmp	r0, #0
   1ad40:	mov	r3, r0
   1ad44:	orr	r0, r1, lr
   1ad48:	orr	r0, r0, r2
   1ad4c:	mvnne	r7, #0
   1ad50:	mvnne	r6, #0
   1ad54:	orr	r3, r0, r3
   1ad58:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1ad5c:	mvn	r0, #0
   1ad60:	mvn	r1, #0
   1ad64:	mov	r2, r5
   1ad68:	mov	r4, r3
   1ad6c:	str	r3, [sp, #24]
   1ad70:	bl	1c268 <__assert_fail@plt+0xab98>
   1ad74:	umull	r3, r2, r6, r5
   1ad78:	mla	r2, r6, r4, r2
   1ad7c:	subs	r6, r0, r6
   1ad80:	sbcs	r6, r1, r7
   1ad84:	mov	r6, #0
   1ad88:	mla	ip, r7, r5, r2
   1ad8c:	ldr	r2, [sp, #24]
   1ad90:	movwcc	r6, #1
   1ad94:	cmp	r6, #0
   1ad98:	str	r6, [sp, #20]
   1ad9c:	mov	r6, #0
   1ada0:	mvnne	r3, #0
   1ada4:	mvnne	ip, #0
   1ada8:	subs	r4, r0, r3
   1adac:	umull	r7, lr, r3, r5
   1adb0:	sbcs	r4, r1, ip
   1adb4:	movwcc	r6, #1
   1adb8:	mla	r3, r3, r2, lr
   1adbc:	cmp	r6, #0
   1adc0:	str	r6, [sp, #16]
   1adc4:	mvnne	r7, #0
   1adc8:	cmp	r6, #0
   1adcc:	umull	sl, r4, r7, r5
   1add0:	mla	r4, r7, r2, r4
   1add4:	mla	r2, ip, r5, r3
   1add8:	mvnne	r2, #0
   1addc:	subs	r3, r0, r7
   1ade0:	mov	ip, #0
   1ade4:	mla	r6, r2, r5, r4
   1ade8:	sbcs	r2, r1, r2
   1adec:	mov	r4, r0
   1adf0:	mov	r0, #0
   1adf4:	movwcc	r0, #1
   1adf8:	mov	r3, r4
   1adfc:	cmp	r0, #0
   1ae00:	str	r0, [sp, #12]
   1ae04:	mov	r0, r1
   1ae08:	str	r3, [sp, #4]
   1ae0c:	mvnne	sl, #0
   1ae10:	mvnne	r6, #0
   1ae14:	str	r0, [sp, #8]
   1ae18:	subs	r2, r4, sl
   1ae1c:	ldr	r4, [sp, #24]
   1ae20:	sbcs	r2, r1, r6
   1ae24:	umull	r7, r2, sl, r5
   1ae28:	movwcc	ip, #1
   1ae2c:	cmp	ip, #0
   1ae30:	mvnne	r7, #0
   1ae34:	mla	r2, sl, r4, r2
   1ae38:	cmp	ip, #0
   1ae3c:	mov	sl, #0
   1ae40:	umull	r1, lr, r7, r5
   1ae44:	mla	r2, r6, r5, r2
   1ae48:	mvnne	r2, #0
   1ae4c:	subs	r6, r3, r7
   1ae50:	mla	lr, r7, r4, lr
   1ae54:	mla	lr, r2, r5, lr
   1ae58:	sbcs	r2, r0, r2
   1ae5c:	mov	r2, #0
   1ae60:	movwcc	sl, #1
   1ae64:	cmp	sl, #0
   1ae68:	mvnne	r1, #0
   1ae6c:	mvnne	lr, #0
   1ae70:	subs	r6, r3, r1
   1ae74:	ldr	r3, [sp, #24]
   1ae78:	sbcs	r6, r0, lr
   1ae7c:	umull	r0, r7, r1, r5
   1ae80:	movwcc	r2, #1
   1ae84:	cmp	r2, #0
   1ae88:	mvnne	r0, #0
   1ae8c:	mla	r1, r1, r3, r7
   1ae90:	cmp	r2, #0
   1ae94:	umull	r6, r4, r0, r5
   1ae98:	mla	r1, lr, r5, r1
   1ae9c:	mvnne	r1, #0
   1aea0:	mla	r4, r0, r3, r4
   1aea4:	ldr	r3, [sp, #4]
   1aea8:	mla	r7, r1, r5, r4
   1aeac:	ldr	r5, [sp, #16]
   1aeb0:	subs	r0, r3, r0
   1aeb4:	ldr	r0, [sp, #8]
   1aeb8:	sbcs	r0, r0, r1
   1aebc:	mov	r0, #0
   1aec0:	movwcc	r0, #1
   1aec4:	cmp	r0, #0
   1aec8:	mov	r1, r0
   1aecc:	ldr	r0, [sp, #20]
   1aed0:	mvnne	r7, #0
   1aed4:	mvnne	r6, #0
   1aed8:	orr	r0, r0, r5
   1aedc:	ldr	r5, [sp, #12]
   1aee0:	orr	r0, r0, r5
   1aee4:	orr	r0, r0, ip
   1aee8:	orr	r0, r0, sl
   1aeec:	orr	r0, r0, r2
   1aef0:	orr	r0, r0, r1
   1aef4:	b	1b370 <__assert_fail@plt+0x9ca0>
   1aef8:	mov	r1, #0
   1aefc:	lsl	r2, r7, #10
   1af00:	lsl	r0, r6, #10
   1af04:	lsr	r3, r7, #22
   1af08:	cmp	r1, r7, lsr #22
   1af0c:	orr	r2, r2, r6, lsr #22
   1af10:	mvnne	r0, #0
   1af14:	movwne	r3, #1
   1af18:	cmp	r1, r7, lsr #22
   1af1c:	b	1b39c <__assert_fail@plt+0x9ccc>
   1af20:	mvn	r0, #0
   1af24:	mvn	r1, #0
   1af28:	mov	r2, r5
   1af2c:	mov	sl, r3
   1af30:	bl	1c268 <__assert_fail@plt+0xab98>
   1af34:	subs	r2, r0, r6
   1af38:	mov	ip, r0
   1af3c:	mov	r0, #0
   1af40:	sbcs	r2, r1, r7
   1af44:	umull	r4, r2, r6, r5
   1af48:	movwcc	r0, #1
   1af4c:	cmp	r0, #0
   1af50:	mla	r2, r6, sl, r2
   1af54:	str	r0, [sp, #20]
   1af58:	mvnne	r4, #0
   1af5c:	cmp	r0, #0
   1af60:	mla	r2, r7, r5, r2
   1af64:	mov	r0, #0
   1af68:	umull	lr, r3, r4, r5
   1af6c:	mvnne	r2, #0
   1af70:	mla	r3, r4, sl, r3
   1af74:	mla	r6, r2, r5, r3
   1af78:	subs	r3, ip, r4
   1af7c:	mov	r3, r1
   1af80:	sbcs	r2, r1, r2
   1af84:	str	r3, [sp, #8]
   1af88:	movwcc	r0, #1
   1af8c:	cmp	r0, #0
   1af90:	str	r0, [sp, #16]
   1af94:	mov	r0, ip
   1af98:	mvnne	lr, #0
   1af9c:	mvnne	r6, #0
   1afa0:	str	r0, [sp, #12]
   1afa4:	subs	r2, ip, lr
   1afa8:	umull	r7, r4, lr, r5
   1afac:	sbcs	r2, r1, r6
   1afb0:	mov	r2, #0
   1afb4:	movwcc	r2, #1
   1afb8:	mla	r4, lr, sl, r4
   1afbc:	cmp	r2, #0
   1afc0:	mla	r6, r6, r5, r4
   1afc4:	mov	r4, #0
   1afc8:	mvnne	r7, #0
   1afcc:	cmp	r2, #0
   1afd0:	umull	r1, ip, r7, r5
   1afd4:	mvnne	r6, #0
   1afd8:	mla	ip, r7, sl, ip
   1afdc:	subs	r7, r0, r7
   1afe0:	sbcs	r7, r3, r6
   1afe4:	mla	lr, r6, r5, ip
   1afe8:	mov	ip, #0
   1afec:	movwcc	ip, #1
   1aff0:	cmp	ip, #0
   1aff4:	mvnne	r1, #0
   1aff8:	mvnne	lr, #0
   1affc:	subs	r7, r0, r1
   1b000:	sbcs	r7, r3, lr
   1b004:	umull	r0, r7, r1, r5
   1b008:	movwcc	r4, #1
   1b00c:	cmp	r4, #0
   1b010:	mla	r1, r1, sl, r7
   1b014:	mvnne	r0, #0
   1b018:	cmp	r4, #0
   1b01c:	mla	r1, lr, r5, r1
   1b020:	umull	r6, r3, r0, r5
   1b024:	mvnne	r1, #0
   1b028:	mla	r3, r0, sl, r3
   1b02c:	mla	r7, r1, r5, r3
   1b030:	ldr	r3, [sp, #12]
   1b034:	subs	r0, r3, r0
   1b038:	ldr	r0, [sp, #8]
   1b03c:	ldr	r3, [sp, #16]
   1b040:	sbcs	r0, r0, r1
   1b044:	mov	r0, #0
   1b048:	movwcc	r0, #1
   1b04c:	cmp	r0, #0
   1b050:	mov	r1, r0
   1b054:	ldr	r0, [sp, #20]
   1b058:	mvnne	r7, #0
   1b05c:	mvnne	r6, #0
   1b060:	orr	r0, r0, r3
   1b064:	orr	r0, r0, r2
   1b068:	orr	r0, r0, ip
   1b06c:	orr	r0, r0, r4
   1b070:	orr	r3, r0, r1
   1b074:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1b078:	mvn	r0, #0
   1b07c:	mvn	r1, #0
   1b080:	mov	r2, r5
   1b084:	mov	sl, r3
   1b088:	bl	1c268 <__assert_fail@plt+0xab98>
   1b08c:	umull	r3, r2, r6, r5
   1b090:	mov	lr, r1
   1b094:	mov	r1, r0
   1b098:	mla	r2, r6, sl, r2
   1b09c:	subs	r6, r0, r6
   1b0a0:	mov	r0, #0
   1b0a4:	sbcs	r6, lr, r7
   1b0a8:	mla	r2, r7, r5, r2
   1b0ac:	movwcc	r0, #1
   1b0b0:	cmp	r0, #0
   1b0b4:	str	r0, [sp, #20]
   1b0b8:	mov	r0, r1
   1b0bc:	mvnne	r3, #0
   1b0c0:	mvnne	r2, #0
   1b0c4:	str	r0, [sp, #16]
   1b0c8:	subs	r4, r1, r3
   1b0cc:	umull	r7, ip, r3, r5
   1b0d0:	sbcs	r4, lr, r2
   1b0d4:	mov	r4, #0
   1b0d8:	movwcc	r4, #1
   1b0dc:	mla	r3, r3, sl, ip
   1b0e0:	mov	ip, #0
   1b0e4:	cmp	r4, #0
   1b0e8:	mla	r2, r2, r5, r3
   1b0ec:	mvnne	r7, #0
   1b0f0:	cmp	r4, #0
   1b0f4:	umull	r1, r6, r7, r5
   1b0f8:	mvnne	r2, #0
   1b0fc:	mla	r6, r7, sl, r6
   1b100:	mla	r3, r2, r5, r6
   1b104:	subs	r6, r0, r7
   1b108:	sbcs	r2, lr, r2
   1b10c:	mov	r2, #0
   1b110:	movwcc	ip, #1
   1b114:	cmp	ip, #0
   1b118:	mvnne	r1, #0
   1b11c:	mvnne	r3, #0
   1b120:	subs	r6, r0, r1
   1b124:	sbcs	r6, lr, r3
   1b128:	umull	r0, r6, r1, r5
   1b12c:	movwcc	r2, #1
   1b130:	cmp	r2, #0
   1b134:	mvnne	r0, #0
   1b138:	cmp	r2, #0
   1b13c:	str	r6, [sp, #12]
   1b140:	umull	r6, r7, r0, r5
   1b144:	mla	r7, r0, sl, r7
   1b148:	str	r7, [sp, #8]
   1b14c:	ldr	r7, [sp, #12]
   1b150:	mla	r1, r1, sl, r7
   1b154:	mla	r1, r3, r5, r1
   1b158:	ldr	r3, [sp, #8]
   1b15c:	mvnne	r1, #0
   1b160:	mla	r7, r1, r5, r3
   1b164:	ldr	r3, [sp, #16]
   1b168:	subs	r0, r3, r0
   1b16c:	sbcs	r0, lr, r1
   1b170:	mov	r0, #0
   1b174:	movwcc	r0, #1
   1b178:	cmp	r0, #0
   1b17c:	mov	r1, r0
   1b180:	ldr	r0, [sp, #20]
   1b184:	mvnne	r7, #0
   1b188:	mvnne	r6, #0
   1b18c:	orr	r0, r0, r4
   1b190:	orr	r0, r0, ip
   1b194:	orr	r0, r0, r2
   1b198:	orr	r3, r0, r1
   1b19c:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1b1a0:	mvn	r0, #0
   1b1a4:	mvn	r1, #0
   1b1a8:	mov	r2, r5
   1b1ac:	mov	sl, r3
   1b1b0:	bl	1c268 <__assert_fail@plt+0xab98>
   1b1b4:	mov	lr, r0
   1b1b8:	subs	r0, r0, r6
   1b1bc:	mov	r2, #0
   1b1c0:	mov	ip, r1
   1b1c4:	str	sl, [sp, #24]
   1b1c8:	sbcs	r0, r1, r7
   1b1cc:	umull	r3, r1, r6, r5
   1b1d0:	str	lr, [sp, #4]
   1b1d4:	movwcc	r2, #1
   1b1d8:	cmp	r2, #0
   1b1dc:	mla	r6, r6, sl, r1
   1b1e0:	mov	r1, #0
   1b1e4:	str	r2, [sp, #20]
   1b1e8:	mvnne	r3, #0
   1b1ec:	cmp	r2, #0
   1b1f0:	mla	r7, r7, r5, r6
   1b1f4:	mov	r2, #0
   1b1f8:	umull	r0, r4, r3, r5
   1b1fc:	mvnne	r7, #0
   1b200:	mla	r4, r3, sl, r4
   1b204:	subs	r3, lr, r3
   1b208:	sbcs	r3, ip, r7
   1b20c:	mla	r4, r7, r5, r4
   1b210:	movwcc	r1, #1
   1b214:	cmp	r1, #0
   1b218:	str	r1, [sp, #16]
   1b21c:	mvnne	r0, #0
   1b220:	mvnne	r4, #0
   1b224:	subs	r3, lr, r0
   1b228:	sbcs	r3, ip, r4
   1b22c:	umull	r6, r3, r0, r5
   1b230:	movwcc	r2, #1
   1b234:	cmp	r2, #0
   1b238:	mla	r0, r0, sl, r3
   1b23c:	str	r2, [sp, #12]
   1b240:	mvnne	r6, #0
   1b244:	cmp	r2, #0
   1b248:	mla	r0, r4, r5, r0
   1b24c:	ldr	r4, [sp, #24]
   1b250:	umull	r1, r7, r6, r5
   1b254:	mvnne	r0, #0
   1b258:	subs	r3, lr, r6
   1b25c:	mov	r3, ip
   1b260:	str	r3, [sp]
   1b264:	mla	r7, r6, sl, r7
   1b268:	mla	r7, r0, r5, r7
   1b26c:	sbcs	r0, ip, r0
   1b270:	mov	r0, #0
   1b274:	movwcc	r0, #1
   1b278:	cmp	r0, #0
   1b27c:	str	r0, [sp, #8]
   1b280:	mvnne	r1, #0
   1b284:	mvnne	r7, #0
   1b288:	subs	r0, lr, r1
   1b28c:	sbcs	r0, ip, r7
   1b290:	mov	ip, #0
   1b294:	umull	r6, r0, r1, r5
   1b298:	movwcc	ip, #1
   1b29c:	cmp	ip, #0
   1b2a0:	mla	r1, r1, r4, r0
   1b2a4:	mov	r0, lr
   1b2a8:	mvnne	r6, #0
   1b2ac:	cmp	ip, #0
   1b2b0:	mla	r1, r7, r5, r1
   1b2b4:	umull	r2, sl, r6, r5
   1b2b8:	mvnne	r1, #0
   1b2bc:	mla	sl, r6, r4, sl
   1b2c0:	subs	r6, lr, r6
   1b2c4:	mov	lr, #0
   1b2c8:	mla	r7, r1, r5, sl
   1b2cc:	sbcs	r1, r3, r1
   1b2d0:	ldr	r1, [sp, #24]
   1b2d4:	movwcc	lr, #1
   1b2d8:	cmp	lr, #0
   1b2dc:	mvnne	r2, #0
   1b2e0:	mvnne	r7, #0
   1b2e4:	subs	r6, r0, r2
   1b2e8:	umull	r0, sl, r2, r5
   1b2ec:	sbcs	r6, r3, r7
   1b2f0:	mov	r3, #0
   1b2f4:	movwcc	r3, #1
   1b2f8:	mla	r2, r2, r1, sl
   1b2fc:	cmp	r3, #0
   1b300:	mla	r2, r7, r5, r2
   1b304:	mvnne	r0, #0
   1b308:	cmp	r3, #0
   1b30c:	umull	r6, r4, r0, r5
   1b310:	mvnne	r2, #0
   1b314:	mla	r4, r0, r1, r4
   1b318:	ldr	r1, [sp, #4]
   1b31c:	mla	r7, r2, r5, r4
   1b320:	ldr	r5, [sp, #16]
   1b324:	subs	r0, r1, r0
   1b328:	ldr	r0, [sp]
   1b32c:	sbcs	r0, r0, r2
   1b330:	mov	r0, #0
   1b334:	movwcc	r0, #1
   1b338:	cmp	r0, #0
   1b33c:	mov	r2, r0
   1b340:	ldr	r0, [sp, #20]
   1b344:	mvnne	r7, #0
   1b348:	mvnne	r6, #0
   1b34c:	orr	r0, r0, r5
   1b350:	ldr	r5, [sp, #12]
   1b354:	orr	r0, r0, r5
   1b358:	ldr	r5, [sp, #8]
   1b35c:	orr	r0, r0, r5
   1b360:	orr	r0, r0, ip
   1b364:	orr	r0, r0, lr
   1b368:	orr	r0, r0, r3
   1b36c:	orr	r0, r0, r2
   1b370:	and	r3, r0, #1
   1b374:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1b378:	mov	r1, #0
   1b37c:	lsl	r2, r7, #9
   1b380:	lsl	r0, r6, #9
   1b384:	lsr	r3, r7, #23
   1b388:	cmp	r1, r7, lsr #23
   1b38c:	orr	r2, r2, r6, lsr #23
   1b390:	mvnne	r0, #0
   1b394:	movwne	r3, #1
   1b398:	cmp	r1, r7, lsr #23
   1b39c:	mvnne	r2, #0
   1b3a0:	mov	r6, r0
   1b3a4:	mov	r7, r2
   1b3a8:	b	1b3d0 <__assert_fail@plt+0x9d00>
   1b3ac:	lsl	r1, r7, #1
   1b3b0:	cmp	r7, #0
   1b3b4:	lsl	r0, r6, #1
   1b3b8:	lsr	r3, r7, #31
   1b3bc:	orr	r1, r1, r6, lsr #31
   1b3c0:	mvnmi	r0, #0
   1b3c4:	mvnmi	r1, #0
   1b3c8:	mov	r6, r0
   1b3cc:	mov	r7, r1
   1b3d0:	ldr	r1, [sp, #32]
   1b3d4:	ldr	r2, [sp, #28]
   1b3d8:	orr	r8, r3, r8
   1b3dc:	add	r0, r1, r2
   1b3e0:	str	r0, [r9]
   1b3e4:	ldrb	r0, [r1, r2]
   1b3e8:	cmp	r0, #0
   1b3ec:	orrne	r8, r8, #2
   1b3f0:	ldr	r0, [sp, #36]	; 0x24
   1b3f4:	strd	r6, [r0]
   1b3f8:	mov	r0, r8
   1b3fc:	sub	sp, fp, #28
   1b400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b404:	movw	r0, #58281	; 0xe3a9
   1b408:	movw	r1, #58319	; 0xe3cf
   1b40c:	movw	r3, #58335	; 0xe3df
   1b410:	mov	r2, #85	; 0x55
   1b414:	movt	r0, #1
   1b418:	movt	r1, #1
   1b41c:	movt	r3, #1
   1b420:	bl	116d0 <__assert_fail@plt>
   1b424:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b428:	add	fp, sp, #24
   1b42c:	sub	sp, sp, #16
   1b430:	mov	r3, r1
   1b434:	mov	r2, r0
   1b438:	mov	r4, #0
   1b43c:	mov	r0, r2
   1b440:	ldrb	r1, [r0, -r4, lsl #1]!
   1b444:	cmp	r1, #37	; 0x25
   1b448:	bne	1b460 <__assert_fail@plt+0x9d90>
   1b44c:	ldrb	r0, [r0, #1]
   1b450:	cmp	r0, #115	; 0x73
   1b454:	bne	1b4fc <__assert_fail@plt+0x9e2c>
   1b458:	sub	r4, r4, #1
   1b45c:	b	1b43c <__assert_fail@plt+0x9d6c>
   1b460:	cmp	r1, #0
   1b464:	bne	1b4fc <__assert_fail@plt+0x9e2c>
   1b468:	cmp	r4, #0
   1b46c:	str	r3, [sp, #12]
   1b470:	str	r3, [sp, #8]
   1b474:	beq	1b530 <__assert_fail@plt+0x9e60>
   1b478:	ldr	r0, [sp, #8]
   1b47c:	mov	r5, #0
   1b480:	mov	r7, r4
   1b484:	add	r6, r0, #4
   1b488:	str	r6, [sp, #8]
   1b48c:	ldr	r0, [r6, #-4]
   1b490:	bl	11574 <strlen@plt>
   1b494:	adds	r5, r0, r5
   1b498:	add	r6, r6, #4
   1b49c:	mvncs	r5, #0
   1b4a0:	adds	r7, r7, #1
   1b4a4:	bcc	1b488 <__assert_fail@plt+0x9db8>
   1b4a8:	cmn	r5, #1
   1b4ac:	ble	1b54c <__assert_fail@plt+0x9e7c>
   1b4b0:	add	r0, r5, #1
   1b4b4:	bl	1a204 <__assert_fail@plt+0x8b34>
   1b4b8:	mov	r8, r0
   1b4bc:	mov	r5, r0
   1b4c0:	ldr	r0, [sp, #12]
   1b4c4:	add	r1, r0, #4
   1b4c8:	str	r1, [sp, #12]
   1b4cc:	ldr	r6, [r0]
   1b4d0:	mov	r0, r6
   1b4d4:	bl	11574 <strlen@plt>
   1b4d8:	mov	r7, r0
   1b4dc:	mov	r0, r5
   1b4e0:	mov	r1, r6
   1b4e4:	mov	r2, r7
   1b4e8:	bl	113f4 <memcpy@plt>
   1b4ec:	add	r5, r5, r7
   1b4f0:	adds	r4, r4, #1
   1b4f4:	bcc	1b4c0 <__assert_fail@plt+0x9df0>
   1b4f8:	b	1b540 <__assert_fail@plt+0x9e70>
   1b4fc:	add	r0, sp, #4
   1b500:	mov	r1, #1
   1b504:	bl	115bc <__vasprintf_chk@plt>
   1b508:	cmn	r0, #1
   1b50c:	ble	1b518 <__assert_fail@plt+0x9e48>
   1b510:	ldr	r8, [sp, #4]
   1b514:	b	1b55c <__assert_fail@plt+0x9e8c>
   1b518:	bl	11598 <__errno_location@plt>
   1b51c:	ldr	r0, [r0]
   1b520:	mov	r8, #0
   1b524:	cmp	r0, #12
   1b528:	bne	1b55c <__assert_fail@plt+0x9e8c>
   1b52c:	bl	1a740 <__assert_fail@plt+0x9070>
   1b530:	mov	r0, #1
   1b534:	bl	1a204 <__assert_fail@plt+0x8b34>
   1b538:	mov	r8, r0
   1b53c:	mov	r5, r0
   1b540:	mov	r0, #0
   1b544:	strb	r0, [r5]
   1b548:	b	1b55c <__assert_fail@plt+0x9e8c>
   1b54c:	bl	11598 <__errno_location@plt>
   1b550:	mov	r1, #75	; 0x4b
   1b554:	mov	r8, #0
   1b558:	str	r1, [r0]
   1b55c:	mov	r0, r8
   1b560:	sub	sp, fp, #24
   1b564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b568:	clz	r2, r1
   1b56c:	clz	r3, r0
   1b570:	lsr	r2, r2, #5
   1b574:	lsr	r3, r3, #5
   1b578:	orrs	r2, r3, r2
   1b57c:	movwne	r1, #1
   1b580:	movwne	r0, #1
   1b584:	cmp	r1, #0
   1b588:	beq	1b5b8 <__assert_fail@plt+0x9ee8>
   1b58c:	mvn	r2, #-2147483648	; 0x80000000
   1b590:	udiv	r2, r2, r1
   1b594:	cmp	r2, r0
   1b598:	bcs	1b5b8 <__assert_fail@plt+0x9ee8>
   1b59c:	push	{fp, lr}
   1b5a0:	mov	fp, sp
   1b5a4:	bl	11598 <__errno_location@plt>
   1b5a8:	mov	r1, #12
   1b5ac:	str	r1, [r0]
   1b5b0:	mov	r0, #0
   1b5b4:	pop	{fp, pc}
   1b5b8:	b	11358 <calloc@plt>
   1b5bc:	cmp	r0, #0
   1b5c0:	movweq	r0, #1
   1b5c4:	cmn	r0, #1
   1b5c8:	ble	1b5d0 <__assert_fail@plt+0x9f00>
   1b5cc:	b	114e4 <malloc@plt>
   1b5d0:	push	{fp, lr}
   1b5d4:	mov	fp, sp
   1b5d8:	bl	11598 <__errno_location@plt>
   1b5dc:	mov	r1, #12
   1b5e0:	str	r1, [r0]
   1b5e4:	mov	r0, #0
   1b5e8:	pop	{fp, pc}
   1b5ec:	push	{fp, lr}
   1b5f0:	mov	fp, sp
   1b5f4:	cmp	r0, #0
   1b5f8:	beq	1b614 <__assert_fail@plt+0x9f44>
   1b5fc:	cmp	r1, #0
   1b600:	beq	1b620 <__assert_fail@plt+0x9f50>
   1b604:	cmn	r1, #1
   1b608:	ble	1b62c <__assert_fail@plt+0x9f5c>
   1b60c:	pop	{fp, lr}
   1b610:	b	1143c <realloc@plt>
   1b614:	mov	r0, r1
   1b618:	pop	{fp, lr}
   1b61c:	b	1b5bc <__assert_fail@plt+0x9eec>
   1b620:	bl	1bbc8 <__assert_fail@plt+0xa4f8>
   1b624:	mov	r0, #0
   1b628:	pop	{fp, pc}
   1b62c:	bl	11598 <__errno_location@plt>
   1b630:	mov	r1, #12
   1b634:	str	r1, [r0]
   1b638:	mov	r0, #0
   1b63c:	pop	{fp, pc}
   1b640:	mov	r0, #1
   1b644:	b	117d0 <__assert_fail@plt+0x100>
   1b648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b64c:	add	fp, sp, #28
   1b650:	sub	sp, sp, #12
   1b654:	mov	r4, r3
   1b658:	mov	r6, r2
   1b65c:	mov	r5, r1
   1b660:	mov	sl, r0
   1b664:	bl	11574 <strlen@plt>
   1b668:	ldr	r8, [r5]
   1b66c:	cmp	r8, #0
   1b670:	beq	1b730 <__assert_fail@plt+0xa060>
   1b674:	mov	r7, r0
   1b678:	mov	r0, #0
   1b67c:	add	r9, r5, #4
   1b680:	mov	r5, #0
   1b684:	str	r6, [sp, #4]
   1b688:	str	r0, [sp]
   1b68c:	mvn	r0, #0
   1b690:	str	r0, [sp, #8]
   1b694:	b	1b6b0 <__assert_fail@plt+0x9fe0>
   1b698:	str	r5, [sp, #8]
   1b69c:	ldr	r8, [r9, r5, lsl #2]
   1b6a0:	add	r6, r6, r4
   1b6a4:	add	r5, r5, #1
   1b6a8:	cmp	r8, #0
   1b6ac:	beq	1b718 <__assert_fail@plt+0xa048>
   1b6b0:	mov	r0, r8
   1b6b4:	mov	r1, sl
   1b6b8:	mov	r2, r7
   1b6bc:	bl	11688 <strncmp@plt>
   1b6c0:	cmp	r0, #0
   1b6c4:	bne	1b69c <__assert_fail@plt+0x9fcc>
   1b6c8:	mov	r0, r8
   1b6cc:	bl	11574 <strlen@plt>
   1b6d0:	cmp	r0, r7
   1b6d4:	beq	1b734 <__assert_fail@plt+0xa064>
   1b6d8:	ldr	r0, [sp, #8]
   1b6dc:	cmn	r0, #1
   1b6e0:	beq	1b698 <__assert_fail@plt+0x9fc8>
   1b6e4:	ldr	r0, [sp, #4]
   1b6e8:	cmp	r0, #0
   1b6ec:	beq	1b70c <__assert_fail@plt+0xa03c>
   1b6f0:	ldr	r1, [sp, #8]
   1b6f4:	mov	r2, r4
   1b6f8:	mla	r0, r1, r4, r0
   1b6fc:	mov	r1, r6
   1b700:	bl	11568 <bcmp@plt>
   1b704:	cmp	r0, #0
   1b708:	beq	1b69c <__assert_fail@plt+0x9fcc>
   1b70c:	mov	r0, #1
   1b710:	str	r0, [sp]
   1b714:	b	1b69c <__assert_fail@plt+0x9fcc>
   1b718:	ldr	r0, [sp]
   1b71c:	tst	r0, #1
   1b720:	ldr	r0, [sp, #8]
   1b724:	mvnne	r0, #1
   1b728:	sub	sp, fp, #28
   1b72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b730:	mvn	r5, #0
   1b734:	mov	r0, r5
   1b738:	sub	sp, fp, #28
   1b73c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b740:	push	{r4, r5, r6, r7, fp, lr}
   1b744:	add	fp, sp, #16
   1b748:	mov	r5, r0
   1b74c:	ldr	r0, [r1]
   1b750:	mvn	r4, #0
   1b754:	cmp	r0, #0
   1b758:	beq	1b784 <__assert_fail@plt+0xa0b4>
   1b75c:	add	r7, r1, #4
   1b760:	mov	r6, #0
   1b764:	mov	r1, r5
   1b768:	bl	11388 <strcmp@plt>
   1b76c:	cmp	r0, #0
   1b770:	beq	1b78c <__assert_fail@plt+0xa0bc>
   1b774:	ldr	r0, [r7, r6, lsl #2]
   1b778:	add	r6, r6, #1
   1b77c:	cmp	r0, #0
   1b780:	bne	1b764 <__assert_fail@plt+0xa094>
   1b784:	mov	r0, r4
   1b788:	pop	{r4, r5, r6, r7, fp, pc}
   1b78c:	mov	r0, r6
   1b790:	pop	{r4, r5, r6, r7, fp, pc}
   1b794:	push	{r4, r5, r6, sl, fp, lr}
   1b798:	add	fp, sp, #16
   1b79c:	sub	sp, sp, #8
   1b7a0:	mov	r5, r0
   1b7a4:	movw	r0, #58414	; 0xe42e
   1b7a8:	mov	r4, r1
   1b7ac:	movw	r1, #58441	; 0xe449
   1b7b0:	cmn	r2, #1
   1b7b4:	mov	r2, #5
   1b7b8:	movt	r0, #1
   1b7bc:	movt	r1, #1
   1b7c0:	moveq	r1, r0
   1b7c4:	mov	r0, #0
   1b7c8:	bl	11424 <dcgettext@plt>
   1b7cc:	mov	r6, r0
   1b7d0:	mov	r0, #0
   1b7d4:	mov	r1, #8
   1b7d8:	mov	r2, r4
   1b7dc:	bl	19358 <__assert_fail@plt+0x7c88>
   1b7e0:	mov	r4, r0
   1b7e4:	mov	r0, #1
   1b7e8:	mov	r1, r5
   1b7ec:	bl	19918 <__assert_fail@plt+0x8248>
   1b7f0:	str	r0, [sp]
   1b7f4:	mov	r0, #0
   1b7f8:	mov	r1, #0
   1b7fc:	mov	r2, r6
   1b800:	mov	r3, r4
   1b804:	bl	114c0 <error@plt>
   1b808:	sub	sp, fp, #16
   1b80c:	pop	{r4, r5, r6, sl, fp, pc}
   1b810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b814:	add	fp, sp, #28
   1b818:	sub	sp, sp, #4
   1b81c:	mov	sl, r1
   1b820:	movw	r1, #58470	; 0xe466
   1b824:	mov	r4, r2
   1b828:	mov	r6, r0
   1b82c:	mov	r0, #0
   1b830:	mov	r2, #5
   1b834:	mov	r8, #0
   1b838:	movt	r1, #1
   1b83c:	bl	11424 <dcgettext@plt>
   1b840:	movw	r1, #61904	; 0xf1d0
   1b844:	movt	r1, #2
   1b848:	ldr	r1, [r1]
   1b84c:	bl	11364 <fputs_unlocked@plt>
   1b850:	ldr	r7, [r6]
   1b854:	cmp	r7, #0
   1b858:	beq	1b914 <__assert_fail@plt+0xa244>
   1b85c:	add	r0, r6, #4
   1b860:	mov	r9, #0
   1b864:	mov	r6, #0
   1b868:	str	r0, [sp]
   1b86c:	cmp	r9, #0
   1b870:	bne	1b8c8 <__assert_fail@plt+0xa1f8>
   1b874:	mov	r5, #0
   1b878:	movw	r0, #61904	; 0xf1d0
   1b87c:	movt	r0, #2
   1b880:	ldr	r6, [r0]
   1b884:	mov	r0, r7
   1b888:	bl	19928 <__assert_fail@plt+0x8258>
   1b88c:	movw	r2, #58491	; 0xe47b
   1b890:	mov	r3, r0
   1b894:	mov	r0, r6
   1b898:	mov	r1, #1
   1b89c:	movt	r2, #1
   1b8a0:	bl	115f8 <__fprintf_chk@plt>
   1b8a4:	add	r6, sl, r5
   1b8a8:	ldr	r0, [sp]
   1b8ac:	add	r8, r8, r4
   1b8b0:	ldr	r7, [r0, -r9, lsl #2]
   1b8b4:	sub	r9, r9, #1
   1b8b8:	cmp	r7, #0
   1b8bc:	beq	1b914 <__assert_fail@plt+0xa244>
   1b8c0:	cmp	r9, #0
   1b8c4:	beq	1b874 <__assert_fail@plt+0xa1a4>
   1b8c8:	add	r1, sl, r8
   1b8cc:	mov	r0, r6
   1b8d0:	mov	r2, r4
   1b8d4:	bl	11568 <bcmp@plt>
   1b8d8:	cmp	r0, #0
   1b8dc:	mov	r5, r8
   1b8e0:	bne	1b878 <__assert_fail@plt+0xa1a8>
   1b8e4:	movw	r0, #61904	; 0xf1d0
   1b8e8:	movt	r0, #2
   1b8ec:	ldr	r5, [r0]
   1b8f0:	mov	r0, r7
   1b8f4:	bl	19928 <__assert_fail@plt+0x8258>
   1b8f8:	movw	r2, #55078	; 0xd726
   1b8fc:	mov	r3, r0
   1b900:	mov	r0, r5
   1b904:	mov	r1, #1
   1b908:	movt	r2, #1
   1b90c:	bl	115f8 <__fprintf_chk@plt>
   1b910:	b	1b8a8 <__assert_fail@plt+0xa1d8>
   1b914:	movw	r0, #61904	; 0xf1d0
   1b918:	movt	r0, #2
   1b91c:	ldr	r0, [r0]
   1b920:	ldr	r1, [r0, #20]
   1b924:	ldr	r2, [r0, #24]
   1b928:	cmp	r1, r2
   1b92c:	addcc	r2, r1, #1
   1b930:	strcc	r2, [r0, #20]
   1b934:	movcc	r0, #10
   1b938:	strbcc	r0, [r1]
   1b93c:	subcc	sp, fp, #28
   1b940:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b944:	mov	r1, #10
   1b948:	sub	sp, fp, #28
   1b94c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b950:	b	11628 <__overflow@plt>
   1b954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b958:	add	fp, sp, #28
   1b95c:	sub	sp, sp, #20
   1b960:	mov	r9, r0
   1b964:	ldr	r0, [fp, #16]
   1b968:	mov	r8, r3
   1b96c:	mov	sl, r2
   1b970:	mov	r7, r1
   1b974:	cmp	r0, #0
   1b978:	beq	1ba38 <__assert_fail@plt+0xa368>
   1b97c:	mov	r0, r7
   1b980:	str	r9, [sp, #8]
   1b984:	str	r8, [sp, #16]
   1b988:	bl	11574 <strlen@plt>
   1b98c:	ldr	r9, [sl]
   1b990:	cmp	r9, #0
   1b994:	beq	1baa8 <__assert_fail@plt+0xa3d8>
   1b998:	str	sl, [sp, #4]
   1b99c:	add	r8, sl, #4
   1b9a0:	ldr	sl, [sp, #16]
   1b9a4:	mov	r4, r0
   1b9a8:	mov	r0, #0
   1b9ac:	mvn	r6, #0
   1b9b0:	mov	r5, #0
   1b9b4:	str	r0, [sp, #12]
   1b9b8:	b	1b9d8 <__assert_fail@plt+0xa308>
   1b9bc:	mov	r6, r5
   1b9c0:	ldr	r9, [r8, r5, lsl #2]
   1b9c4:	ldr	r0, [fp, #8]
   1b9c8:	add	r5, r5, #1
   1b9cc:	add	sl, sl, r0
   1b9d0:	cmp	r9, #0
   1b9d4:	beq	1ba78 <__assert_fail@plt+0xa3a8>
   1b9d8:	mov	r0, r9
   1b9dc:	mov	r1, r7
   1b9e0:	mov	r2, r4
   1b9e4:	bl	11688 <strncmp@plt>
   1b9e8:	cmp	r0, #0
   1b9ec:	bne	1b9c0 <__assert_fail@plt+0xa2f0>
   1b9f0:	mov	r0, r9
   1b9f4:	bl	11574 <strlen@plt>
   1b9f8:	cmp	r0, r4
   1b9fc:	beq	1bb2c <__assert_fail@plt+0xa45c>
   1ba00:	cmn	r6, #1
   1ba04:	beq	1b9bc <__assert_fail@plt+0xa2ec>
   1ba08:	ldr	r0, [sp, #16]
   1ba0c:	cmp	r0, #0
   1ba10:	beq	1ba2c <__assert_fail@plt+0xa35c>
   1ba14:	ldr	r2, [fp, #8]
   1ba18:	mov	r1, sl
   1ba1c:	mla	r0, r6, r2, r0
   1ba20:	bl	11568 <bcmp@plt>
   1ba24:	cmp	r0, #0
   1ba28:	beq	1b9c0 <__assert_fail@plt+0xa2f0>
   1ba2c:	mov	r0, #1
   1ba30:	str	r0, [sp, #12]
   1ba34:	b	1b9c0 <__assert_fail@plt+0xa2f0>
   1ba38:	ldr	r0, [sl]
   1ba3c:	movw	r4, #58414	; 0xe42e
   1ba40:	movt	r4, #1
   1ba44:	cmp	r0, #0
   1ba48:	beq	1bab8 <__assert_fail@plt+0xa3e8>
   1ba4c:	add	r5, sl, #4
   1ba50:	mov	r6, #0
   1ba54:	mov	r1, r7
   1ba58:	bl	11388 <strcmp@plt>
   1ba5c:	cmp	r0, #0
   1ba60:	beq	1ba90 <__assert_fail@plt+0xa3c0>
   1ba64:	ldr	r0, [r5, r6, lsl #2]
   1ba68:	add	r6, r6, #1
   1ba6c:	cmp	r0, #0
   1ba70:	bne	1ba54 <__assert_fail@plt+0xa384>
   1ba74:	b	1bab8 <__assert_fail@plt+0xa3e8>
   1ba78:	ldr	r0, [sp, #12]
   1ba7c:	ldr	r8, [sp, #16]
   1ba80:	ldr	sl, [sp, #4]
   1ba84:	ldr	r9, [sp, #8]
   1ba88:	tst	r0, #1
   1ba8c:	bne	1ba9c <__assert_fail@plt+0xa3cc>
   1ba90:	cmn	r6, #1
   1ba94:	bgt	1bb20 <__assert_fail@plt+0xa450>
   1ba98:	beq	1bab0 <__assert_fail@plt+0xa3e0>
   1ba9c:	movw	r4, #58441	; 0xe449
   1baa0:	movt	r4, #1
   1baa4:	b	1bab8 <__assert_fail@plt+0xa3e8>
   1baa8:	ldr	r8, [sp, #16]
   1baac:	ldr	r9, [sp, #8]
   1bab0:	movw	r4, #58414	; 0xe42e
   1bab4:	movt	r4, #1
   1bab8:	ldr	r6, [fp, #12]
   1babc:	mov	r0, #0
   1bac0:	mov	r1, r4
   1bac4:	mov	r2, #5
   1bac8:	bl	11424 <dcgettext@plt>
   1bacc:	mov	r4, r0
   1bad0:	mov	r0, #0
   1bad4:	mov	r1, #8
   1bad8:	mov	r2, r7
   1badc:	bl	19358 <__assert_fail@plt+0x7c88>
   1bae0:	mov	r5, r0
   1bae4:	mov	r0, #1
   1bae8:	mov	r1, r9
   1baec:	bl	19918 <__assert_fail@plt+0x8248>
   1baf0:	str	r0, [sp]
   1baf4:	mov	r0, #0
   1baf8:	mov	r1, #0
   1bafc:	mov	r2, r4
   1bb00:	mov	r3, r5
   1bb04:	bl	114c0 <error@plt>
   1bb08:	ldr	r2, [fp, #8]
   1bb0c:	mov	r0, sl
   1bb10:	mov	r1, r8
   1bb14:	bl	1b810 <__assert_fail@plt+0xa140>
   1bb18:	blx	r6
   1bb1c:	mvn	r6, #0
   1bb20:	mov	r0, r6
   1bb24:	sub	sp, fp, #28
   1bb28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb2c:	ldr	r8, [sp, #16]
   1bb30:	ldr	sl, [sp, #4]
   1bb34:	ldr	r9, [sp, #8]
   1bb38:	mov	r6, r5
   1bb3c:	cmn	r6, #1
   1bb40:	bgt	1bb20 <__assert_fail@plt+0xa450>
   1bb44:	b	1ba98 <__assert_fail@plt+0xa3c8>
   1bb48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1bb4c:	add	fp, sp, #24
   1bb50:	ldr	r6, [r1]
   1bb54:	cmp	r6, #0
   1bb58:	beq	1bbbc <__assert_fail@plt+0xa4ec>
   1bb5c:	mov	r8, r1
   1bb60:	mov	r7, r2
   1bb64:	mov	r1, r2
   1bb68:	mov	r2, r3
   1bb6c:	mov	r4, r3
   1bb70:	mov	r9, r0
   1bb74:	bl	11568 <bcmp@plt>
   1bb78:	cmp	r0, #0
   1bb7c:	beq	1bbb4 <__assert_fail@plt+0xa4e4>
   1bb80:	add	r7, r7, r4
   1bb84:	add	r5, r8, #4
   1bb88:	ldr	r6, [r5]
   1bb8c:	cmp	r6, #0
   1bb90:	beq	1bbbc <__assert_fail@plt+0xa4ec>
   1bb94:	mov	r0, r9
   1bb98:	mov	r1, r7
   1bb9c:	mov	r2, r4
   1bba0:	bl	11568 <bcmp@plt>
   1bba4:	add	r7, r7, r4
   1bba8:	add	r5, r5, #4
   1bbac:	cmp	r0, #0
   1bbb0:	bne	1bb88 <__assert_fail@plt+0xa4b8>
   1bbb4:	mov	r0, r6
   1bbb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bbbc:	mov	r6, #0
   1bbc0:	mov	r0, r6
   1bbc4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bbc8:	push	{r4, r5, r6, sl, fp, lr}
   1bbcc:	add	fp, sp, #16
   1bbd0:	mov	r4, r0
   1bbd4:	bl	11598 <__errno_location@plt>
   1bbd8:	ldr	r6, [r0]
   1bbdc:	mov	r5, r0
   1bbe0:	mov	r0, r4
   1bbe4:	bl	113d0 <free@plt>
   1bbe8:	str	r6, [r5]
   1bbec:	pop	{r4, r5, r6, sl, fp, pc}
   1bbf0:	push	{fp, lr}
   1bbf4:	mov	fp, sp
   1bbf8:	mov	r0, #14
   1bbfc:	bl	11658 <nl_langinfo@plt>
   1bc00:	movw	r1, #51805	; 0xca5d
   1bc04:	cmp	r0, #0
   1bc08:	movt	r1, #1
   1bc0c:	movne	r1, r0
   1bc10:	movw	r0, #58499	; 0xe483
   1bc14:	ldrb	r2, [r1]
   1bc18:	movt	r0, #1
   1bc1c:	cmp	r2, #0
   1bc20:	movne	r0, r1
   1bc24:	pop	{fp, pc}
   1bc28:	push	{r4, r5, r6, r7, fp, lr}
   1bc2c:	add	fp, sp, #16
   1bc30:	sub	sp, sp, #8
   1bc34:	cmp	r0, #0
   1bc38:	add	r5, sp, #4
   1bc3c:	mov	r7, r2
   1bc40:	mov	r4, r1
   1bc44:	movne	r5, r0
   1bc48:	mov	r0, r5
   1bc4c:	bl	114b4 <mbrtowc@plt>
   1bc50:	mov	r6, r0
   1bc54:	cmp	r7, #0
   1bc58:	beq	1bc80 <__assert_fail@plt+0xa5b0>
   1bc5c:	cmn	r6, #2
   1bc60:	bcc	1bc80 <__assert_fail@plt+0xa5b0>
   1bc64:	mov	r0, #0
   1bc68:	bl	1bcc8 <__assert_fail@plt+0xa5f8>
   1bc6c:	cmp	r0, #0
   1bc70:	bne	1bc80 <__assert_fail@plt+0xa5b0>
   1bc74:	ldrb	r0, [r4]
   1bc78:	mov	r6, #1
   1bc7c:	str	r0, [r5]
   1bc80:	mov	r0, r6
   1bc84:	sub	sp, fp, #16
   1bc88:	pop	{r4, r5, r6, r7, fp, pc}
   1bc8c:	cmp	r2, #0
   1bc90:	beq	1bcc0 <__assert_fail@plt+0xa5f0>
   1bc94:	mvn	r3, #0
   1bc98:	udiv	r3, r3, r2
   1bc9c:	cmp	r3, r1
   1bca0:	bcs	1bcc0 <__assert_fail@plt+0xa5f0>
   1bca4:	push	{fp, lr}
   1bca8:	mov	fp, sp
   1bcac:	bl	11598 <__errno_location@plt>
   1bcb0:	mov	r1, #12
   1bcb4:	str	r1, [r0]
   1bcb8:	mov	r0, #0
   1bcbc:	pop	{fp, pc}
   1bcc0:	mul	r1, r2, r1
   1bcc4:	b	1b5ec <__assert_fail@plt+0x9f1c>
   1bcc8:	push	{r4, sl, fp, lr}
   1bccc:	add	fp, sp, #8
   1bcd0:	sub	sp, sp, #264	; 0x108
   1bcd4:	add	r1, sp, #7
   1bcd8:	movw	r2, #257	; 0x101
   1bcdc:	bl	1bd34 <__assert_fail@plt+0xa664>
   1bce0:	mov	r4, #0
   1bce4:	cmp	r0, #0
   1bce8:	bne	1bd28 <__assert_fail@plt+0xa658>
   1bcec:	movw	r1, #58505	; 0xe489
   1bcf0:	add	r0, sp, #7
   1bcf4:	mov	r2, #2
   1bcf8:	movt	r1, #1
   1bcfc:	bl	11568 <bcmp@plt>
   1bd00:	cmp	r0, #0
   1bd04:	beq	1bd28 <__assert_fail@plt+0xa658>
   1bd08:	movw	r1, #58507	; 0xe48b
   1bd0c:	add	r0, sp, #7
   1bd10:	mov	r2, #6
   1bd14:	movt	r1, #1
   1bd18:	bl	11568 <bcmp@plt>
   1bd1c:	cmp	r0, #0
   1bd20:	mov	r4, r0
   1bd24:	movwne	r4, #1
   1bd28:	mov	r0, r4
   1bd2c:	sub	sp, fp, #8
   1bd30:	pop	{r4, sl, fp, pc}
   1bd34:	push	{r4, r5, r6, r7, fp, lr}
   1bd38:	add	fp, sp, #16
   1bd3c:	mov	r4, r1
   1bd40:	mov	r1, #0
   1bd44:	mov	r6, r2
   1bd48:	bl	11634 <setlocale@plt>
   1bd4c:	cmp	r0, #0
   1bd50:	beq	1bd80 <__assert_fail@plt+0xa6b0>
   1bd54:	mov	r7, r0
   1bd58:	bl	11574 <strlen@plt>
   1bd5c:	cmp	r0, r6
   1bd60:	bcs	1bd9c <__assert_fail@plt+0xa6cc>
   1bd64:	add	r2, r0, #1
   1bd68:	mov	r0, r4
   1bd6c:	mov	r1, r7
   1bd70:	bl	113f4 <memcpy@plt>
   1bd74:	mov	r5, #0
   1bd78:	mov	r0, r5
   1bd7c:	pop	{r4, r5, r6, r7, fp, pc}
   1bd80:	mov	r5, #22
   1bd84:	cmp	r6, #0
   1bd88:	beq	1bdc4 <__assert_fail@plt+0xa6f4>
   1bd8c:	mov	r0, #0
   1bd90:	strb	r0, [r4]
   1bd94:	mov	r0, r5
   1bd98:	pop	{r4, r5, r6, r7, fp, pc}
   1bd9c:	mov	r5, #34	; 0x22
   1bda0:	cmp	r6, #0
   1bda4:	beq	1bdc4 <__assert_fail@plt+0xa6f4>
   1bda8:	sub	r6, r6, #1
   1bdac:	mov	r0, r4
   1bdb0:	mov	r1, r7
   1bdb4:	mov	r2, r6
   1bdb8:	bl	113f4 <memcpy@plt>
   1bdbc:	mov	r0, #0
   1bdc0:	strb	r0, [r4, r6]
   1bdc4:	mov	r0, r5
   1bdc8:	pop	{r4, r5, r6, r7, fp, pc}
   1bdcc:	mov	r1, #0
   1bdd0:	b	11634 <setlocale@plt>
   1bdd4:	eor	r1, r1, #-2147483648	; 0x80000000
   1bdd8:	b	1bde0 <__assert_fail@plt+0xa710>
   1bddc:	eor	r3, r3, #-2147483648	; 0x80000000
   1bde0:	push	{r4, r5, lr}
   1bde4:	lsl	r4, r1, #1
   1bde8:	lsl	r5, r3, #1
   1bdec:	teq	r4, r5
   1bdf0:	teqeq	r0, r2
   1bdf4:	orrsne	ip, r4, r0
   1bdf8:	orrsne	ip, r5, r2
   1bdfc:	mvnsne	ip, r4, asr #21
   1be00:	mvnsne	ip, r5, asr #21
   1be04:	beq	1bff0 <__assert_fail@plt+0xa920>
   1be08:	lsr	r4, r4, #21
   1be0c:	rsbs	r5, r4, r5, lsr #21
   1be10:	rsblt	r5, r5, #0
   1be14:	ble	1be34 <__assert_fail@plt+0xa764>
   1be18:	add	r4, r4, r5
   1be1c:	eor	r2, r0, r2
   1be20:	eor	r3, r1, r3
   1be24:	eor	r0, r2, r0
   1be28:	eor	r1, r3, r1
   1be2c:	eor	r2, r0, r2
   1be30:	eor	r3, r1, r3
   1be34:	cmp	r5, #54	; 0x36
   1be38:	pophi	{r4, r5, pc}
   1be3c:	tst	r1, #-2147483648	; 0x80000000
   1be40:	lsl	r1, r1, #12
   1be44:	mov	ip, #1048576	; 0x100000
   1be48:	orr	r1, ip, r1, lsr #12
   1be4c:	beq	1be58 <__assert_fail@plt+0xa788>
   1be50:	rsbs	r0, r0, #0
   1be54:	rsc	r1, r1, #0
   1be58:	tst	r3, #-2147483648	; 0x80000000
   1be5c:	lsl	r3, r3, #12
   1be60:	orr	r3, ip, r3, lsr #12
   1be64:	beq	1be70 <__assert_fail@plt+0xa7a0>
   1be68:	rsbs	r2, r2, #0
   1be6c:	rsc	r3, r3, #0
   1be70:	teq	r4, r5
   1be74:	beq	1bfd8 <__assert_fail@plt+0xa908>
   1be78:	sub	r4, r4, #1
   1be7c:	rsbs	lr, r5, #32
   1be80:	blt	1be9c <__assert_fail@plt+0xa7cc>
   1be84:	lsl	ip, r2, lr
   1be88:	adds	r0, r0, r2, lsr r5
   1be8c:	adc	r1, r1, #0
   1be90:	adds	r0, r0, r3, lsl lr
   1be94:	adcs	r1, r1, r3, asr r5
   1be98:	b	1beb8 <__assert_fail@plt+0xa7e8>
   1be9c:	sub	r5, r5, #32
   1bea0:	add	lr, lr, #32
   1bea4:	cmp	r2, #1
   1bea8:	lsl	ip, r3, lr
   1beac:	orrcs	ip, ip, #2
   1beb0:	adds	r0, r0, r3, asr r5
   1beb4:	adcs	r1, r1, r3, asr #31
   1beb8:	and	r5, r1, #-2147483648	; 0x80000000
   1bebc:	bpl	1becc <__assert_fail@plt+0xa7fc>
   1bec0:	rsbs	ip, ip, #0
   1bec4:	rscs	r0, r0, #0
   1bec8:	rsc	r1, r1, #0
   1becc:	cmp	r1, #1048576	; 0x100000
   1bed0:	bcc	1bf10 <__assert_fail@plt+0xa840>
   1bed4:	cmp	r1, #2097152	; 0x200000
   1bed8:	bcc	1bef8 <__assert_fail@plt+0xa828>
   1bedc:	lsrs	r1, r1, #1
   1bee0:	rrxs	r0, r0
   1bee4:	rrx	ip, ip
   1bee8:	add	r4, r4, #1
   1beec:	lsl	r2, r4, #21
   1bef0:	cmn	r2, #4194304	; 0x400000
   1bef4:	bcs	1c050 <__assert_fail@plt+0xa980>
   1bef8:	cmp	ip, #-2147483648	; 0x80000000
   1befc:	lsrseq	ip, r0, #1
   1bf00:	adcs	r0, r0, #0
   1bf04:	adc	r1, r1, r4, lsl #20
   1bf08:	orr	r1, r1, r5
   1bf0c:	pop	{r4, r5, pc}
   1bf10:	lsls	ip, ip, #1
   1bf14:	adcs	r0, r0, r0
   1bf18:	adc	r1, r1, r1
   1bf1c:	tst	r1, #1048576	; 0x100000
   1bf20:	sub	r4, r4, #1
   1bf24:	bne	1bef8 <__assert_fail@plt+0xa828>
   1bf28:	teq	r1, #0
   1bf2c:	moveq	r1, r0
   1bf30:	moveq	r0, #0
   1bf34:	clz	r3, r1
   1bf38:	addeq	r3, r3, #32
   1bf3c:	sub	r3, r3, #11
   1bf40:	subs	r2, r3, #32
   1bf44:	bge	1bf68 <__assert_fail@plt+0xa898>
   1bf48:	adds	r2, r2, #12
   1bf4c:	ble	1bf64 <__assert_fail@plt+0xa894>
   1bf50:	add	ip, r2, #20
   1bf54:	rsb	r2, r2, #12
   1bf58:	lsl	r0, r1, ip
   1bf5c:	lsr	r1, r1, r2
   1bf60:	b	1bf78 <__assert_fail@plt+0xa8a8>
   1bf64:	add	r2, r2, #20
   1bf68:	rsble	ip, r2, #32
   1bf6c:	lsl	r1, r1, r2
   1bf70:	orrle	r1, r1, r0, lsr ip
   1bf74:	lslle	r0, r0, r2
   1bf78:	subs	r4, r4, r3
   1bf7c:	addge	r1, r1, r4, lsl #20
   1bf80:	orrge	r1, r1, r5
   1bf84:	popge	{r4, r5, pc}
   1bf88:	mvn	r4, r4
   1bf8c:	subs	r4, r4, #31
   1bf90:	bge	1bfcc <__assert_fail@plt+0xa8fc>
   1bf94:	adds	r4, r4, #12
   1bf98:	bgt	1bfb4 <__assert_fail@plt+0xa8e4>
   1bf9c:	add	r4, r4, #20
   1bfa0:	rsb	r2, r4, #32
   1bfa4:	lsr	r0, r0, r4
   1bfa8:	orr	r0, r0, r1, lsl r2
   1bfac:	orr	r1, r5, r1, lsr r4
   1bfb0:	pop	{r4, r5, pc}
   1bfb4:	rsb	r4, r4, #12
   1bfb8:	rsb	r2, r4, #32
   1bfbc:	lsr	r0, r0, r2
   1bfc0:	orr	r0, r0, r1, lsl r4
   1bfc4:	mov	r1, r5
   1bfc8:	pop	{r4, r5, pc}
   1bfcc:	lsr	r0, r1, r4
   1bfd0:	mov	r1, r5
   1bfd4:	pop	{r4, r5, pc}
   1bfd8:	teq	r4, #0
   1bfdc:	eor	r3, r3, #1048576	; 0x100000
   1bfe0:	eoreq	r1, r1, #1048576	; 0x100000
   1bfe4:	addeq	r4, r4, #1
   1bfe8:	subne	r5, r5, #1
   1bfec:	b	1be78 <__assert_fail@plt+0xa7a8>
   1bff0:	mvns	ip, r4, asr #21
   1bff4:	mvnsne	ip, r5, asr #21
   1bff8:	beq	1c060 <__assert_fail@plt+0xa990>
   1bffc:	teq	r4, r5
   1c000:	teqeq	r0, r2
   1c004:	beq	1c018 <__assert_fail@plt+0xa948>
   1c008:	orrs	ip, r4, r0
   1c00c:	moveq	r1, r3
   1c010:	moveq	r0, r2
   1c014:	pop	{r4, r5, pc}
   1c018:	teq	r1, r3
   1c01c:	movne	r1, #0
   1c020:	movne	r0, #0
   1c024:	popne	{r4, r5, pc}
   1c028:	lsrs	ip, r4, #21
   1c02c:	bne	1c040 <__assert_fail@plt+0xa970>
   1c030:	lsls	r0, r0, #1
   1c034:	adcs	r1, r1, r1
   1c038:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c03c:	pop	{r4, r5, pc}
   1c040:	adds	r4, r4, #4194304	; 0x400000
   1c044:	addcc	r1, r1, #1048576	; 0x100000
   1c048:	popcc	{r4, r5, pc}
   1c04c:	and	r5, r1, #-2147483648	; 0x80000000
   1c050:	orr	r1, r5, #2130706432	; 0x7f000000
   1c054:	orr	r1, r1, #15728640	; 0xf00000
   1c058:	mov	r0, #0
   1c05c:	pop	{r4, r5, pc}
   1c060:	mvns	ip, r4, asr #21
   1c064:	movne	r1, r3
   1c068:	movne	r0, r2
   1c06c:	mvnseq	ip, r5, asr #21
   1c070:	movne	r3, r1
   1c074:	movne	r2, r0
   1c078:	orrs	r4, r0, r1, lsl #12
   1c07c:	orrseq	r5, r2, r3, lsl #12
   1c080:	teqeq	r1, r3
   1c084:	orrne	r1, r1, #524288	; 0x80000
   1c088:	pop	{r4, r5, pc}
   1c08c:	teq	r0, #0
   1c090:	moveq	r1, #0
   1c094:	bxeq	lr
   1c098:	push	{r4, r5, lr}
   1c09c:	mov	r4, #1024	; 0x400
   1c0a0:	add	r4, r4, #50	; 0x32
   1c0a4:	mov	r5, #0
   1c0a8:	mov	r1, #0
   1c0ac:	b	1bf28 <__assert_fail@plt+0xa858>
   1c0b0:	teq	r0, #0
   1c0b4:	moveq	r1, #0
   1c0b8:	bxeq	lr
   1c0bc:	push	{r4, r5, lr}
   1c0c0:	mov	r4, #1024	; 0x400
   1c0c4:	add	r4, r4, #50	; 0x32
   1c0c8:	ands	r5, r0, #-2147483648	; 0x80000000
   1c0cc:	rsbmi	r0, r0, #0
   1c0d0:	mov	r1, #0
   1c0d4:	b	1bf28 <__assert_fail@plt+0xa858>
   1c0d8:	lsls	r2, r0, #1
   1c0dc:	asr	r1, r2, #3
   1c0e0:	rrx	r1, r1
   1c0e4:	lsl	r0, r2, #28
   1c0e8:	andsne	r3, r2, #-16777216	; 0xff000000
   1c0ec:	teqne	r3, #-16777216	; 0xff000000
   1c0f0:	eorne	r1, r1, #939524096	; 0x38000000
   1c0f4:	bxne	lr
   1c0f8:	bics	r2, r2, #-16777216	; 0xff000000
   1c0fc:	bxeq	lr
   1c100:	teq	r3, #-16777216	; 0xff000000
   1c104:	orreq	r1, r1, #524288	; 0x80000
   1c108:	bxeq	lr
   1c10c:	push	{r4, r5, lr}
   1c110:	mov	r4, #896	; 0x380
   1c114:	and	r5, r1, #-2147483648	; 0x80000000
   1c118:	bic	r1, r1, #-2147483648	; 0x80000000
   1c11c:	b	1bf28 <__assert_fail@plt+0xa858>
   1c120:	orrs	r2, r0, r1
   1c124:	bxeq	lr
   1c128:	push	{r4, r5, lr}
   1c12c:	mov	r5, #0
   1c130:	b	1c150 <__assert_fail@plt+0xaa80>
   1c134:	orrs	r2, r0, r1
   1c138:	bxeq	lr
   1c13c:	push	{r4, r5, lr}
   1c140:	ands	r5, r1, #-2147483648	; 0x80000000
   1c144:	bpl	1c150 <__assert_fail@plt+0xaa80>
   1c148:	rsbs	r0, r0, #0
   1c14c:	rsc	r1, r1, #0
   1c150:	mov	r4, #1024	; 0x400
   1c154:	add	r4, r4, #50	; 0x32
   1c158:	lsrs	ip, r1, #22
   1c15c:	beq	1becc <__assert_fail@plt+0xa7fc>
   1c160:	mov	r2, #3
   1c164:	lsrs	ip, ip, #3
   1c168:	addne	r2, r2, #3
   1c16c:	lsrs	ip, ip, #3
   1c170:	addne	r2, r2, #3
   1c174:	add	r2, r2, ip, lsr #3
   1c178:	rsb	r3, r2, #32
   1c17c:	lsl	ip, r0, r3
   1c180:	lsr	r0, r0, r2
   1c184:	orr	r0, r0, r1, lsl r3
   1c188:	lsr	r1, r1, r2
   1c18c:	add	r4, r4, r2
   1c190:	b	1becc <__assert_fail@plt+0xa7fc>
   1c194:	cmp	r3, #0
   1c198:	cmpeq	r2, #0
   1c19c:	bne	1c1c0 <__assert_fail@plt+0xaaf0>
   1c1a0:	cmp	r1, #0
   1c1a4:	movlt	r1, #-2147483648	; 0x80000000
   1c1a8:	movlt	r0, #0
   1c1ac:	blt	1c1bc <__assert_fail@plt+0xaaec>
   1c1b0:	cmpeq	r0, #0
   1c1b4:	mvnne	r1, #-2147483648	; 0x80000000
   1c1b8:	mvnne	r0, #0
   1c1bc:	b	1c2a4 <__assert_fail@plt+0xabd4>
   1c1c0:	sub	sp, sp, #8
   1c1c4:	push	{sp, lr}
   1c1c8:	cmp	r1, #0
   1c1cc:	blt	1c1ec <__assert_fail@plt+0xab1c>
   1c1d0:	cmp	r3, #0
   1c1d4:	blt	1c220 <__assert_fail@plt+0xab50>
   1c1d8:	bl	1c2f8 <__assert_fail@plt+0xac28>
   1c1dc:	ldr	lr, [sp, #4]
   1c1e0:	add	sp, sp, #8
   1c1e4:	pop	{r2, r3}
   1c1e8:	bx	lr
   1c1ec:	rsbs	r0, r0, #0
   1c1f0:	sbc	r1, r1, r1, lsl #1
   1c1f4:	cmp	r3, #0
   1c1f8:	blt	1c244 <__assert_fail@plt+0xab74>
   1c1fc:	bl	1c2f8 <__assert_fail@plt+0xac28>
   1c200:	ldr	lr, [sp, #4]
   1c204:	add	sp, sp, #8
   1c208:	pop	{r2, r3}
   1c20c:	rsbs	r0, r0, #0
   1c210:	sbc	r1, r1, r1, lsl #1
   1c214:	rsbs	r2, r2, #0
   1c218:	sbc	r3, r3, r3, lsl #1
   1c21c:	bx	lr
   1c220:	rsbs	r2, r2, #0
   1c224:	sbc	r3, r3, r3, lsl #1
   1c228:	bl	1c2f8 <__assert_fail@plt+0xac28>
   1c22c:	ldr	lr, [sp, #4]
   1c230:	add	sp, sp, #8
   1c234:	pop	{r2, r3}
   1c238:	rsbs	r0, r0, #0
   1c23c:	sbc	r1, r1, r1, lsl #1
   1c240:	bx	lr
   1c244:	rsbs	r2, r2, #0
   1c248:	sbc	r3, r3, r3, lsl #1
   1c24c:	bl	1c2f8 <__assert_fail@plt+0xac28>
   1c250:	ldr	lr, [sp, #4]
   1c254:	add	sp, sp, #8
   1c258:	pop	{r2, r3}
   1c25c:	rsbs	r2, r2, #0
   1c260:	sbc	r3, r3, r3, lsl #1
   1c264:	bx	lr
   1c268:	cmp	r3, #0
   1c26c:	cmpeq	r2, #0
   1c270:	bne	1c288 <__assert_fail@plt+0xabb8>
   1c274:	cmp	r1, #0
   1c278:	cmpeq	r0, #0
   1c27c:	mvnne	r1, #0
   1c280:	mvnne	r0, #0
   1c284:	b	1c2a4 <__assert_fail@plt+0xabd4>
   1c288:	sub	sp, sp, #8
   1c28c:	push	{sp, lr}
   1c290:	bl	1c2f8 <__assert_fail@plt+0xac28>
   1c294:	ldr	lr, [sp, #4]
   1c298:	add	sp, sp, #8
   1c29c:	pop	{r2, r3}
   1c2a0:	bx	lr
   1c2a4:	push	{r1, lr}
   1c2a8:	mov	r0, #8
   1c2ac:	bl	11370 <raise@plt>
   1c2b0:	pop	{r1, pc}
   1c2b4:	andeq	r0, r0, r0
   1c2b8:	vmov	d6, r0, r1
   1c2bc:	vldr	d7, [pc, #36]	; 1c2e8 <__assert_fail@plt+0xac18>
   1c2c0:	vldr	d5, [pc, #40]	; 1c2f0 <__assert_fail@plt+0xac20>
   1c2c4:	vmul.f64	d7, d6, d7
   1c2c8:	vcvt.u32.f64	s14, d7
   1c2cc:	vcvt.f64.u32	d4, s14
   1c2d0:	vmov	r1, s14
   1c2d4:	vmls.f64	d6, d4, d5
   1c2d8:	vcvt.u32.f64	s15, d6
   1c2dc:	vmov	r0, s15
   1c2e0:	bx	lr
   1c2e4:	nop			; (mov r0, r0)
   1c2e8:	andeq	r0, r0, r0
   1c2ec:	ldclcc	0, cr0, [r0]
   1c2f0:	andeq	r0, r0, r0
   1c2f4:	mvnsmi	r0, r0
   1c2f8:	cmp	r1, r3
   1c2fc:	cmpeq	r0, r2
   1c300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c304:	mov	r4, r0
   1c308:	movcc	r0, #0
   1c30c:	mov	r5, r1
   1c310:	ldr	lr, [sp, #36]	; 0x24
   1c314:	movcc	r1, r0
   1c318:	bcc	1c414 <__assert_fail@plt+0xad44>
   1c31c:	cmp	r3, #0
   1c320:	clzeq	ip, r2
   1c324:	clzne	ip, r3
   1c328:	addeq	ip, ip, #32
   1c32c:	cmp	r5, #0
   1c330:	clzeq	r1, r4
   1c334:	addeq	r1, r1, #32
   1c338:	clzne	r1, r5
   1c33c:	sub	ip, ip, r1
   1c340:	sub	sl, ip, #32
   1c344:	lsl	r9, r3, ip
   1c348:	rsb	fp, ip, #32
   1c34c:	orr	r9, r9, r2, lsl sl
   1c350:	orr	r9, r9, r2, lsr fp
   1c354:	lsl	r8, r2, ip
   1c358:	cmp	r5, r9
   1c35c:	cmpeq	r4, r8
   1c360:	movcc	r0, #0
   1c364:	movcc	r1, r0
   1c368:	bcc	1c384 <__assert_fail@plt+0xacb4>
   1c36c:	mov	r0, #1
   1c370:	subs	r4, r4, r8
   1c374:	lsl	r1, r0, sl
   1c378:	orr	r1, r1, r0, lsr fp
   1c37c:	lsl	r0, r0, ip
   1c380:	sbc	r5, r5, r9
   1c384:	cmp	ip, #0
   1c388:	beq	1c414 <__assert_fail@plt+0xad44>
   1c38c:	lsr	r6, r8, #1
   1c390:	orr	r6, r6, r9, lsl #31
   1c394:	lsr	r7, r9, #1
   1c398:	mov	r2, ip
   1c39c:	b	1c3c0 <__assert_fail@plt+0xacf0>
   1c3a0:	subs	r3, r4, r6
   1c3a4:	sbc	r8, r5, r7
   1c3a8:	adds	r3, r3, r3
   1c3ac:	adc	r8, r8, r8
   1c3b0:	adds	r4, r3, #1
   1c3b4:	adc	r5, r8, #0
   1c3b8:	subs	r2, r2, #1
   1c3bc:	beq	1c3dc <__assert_fail@plt+0xad0c>
   1c3c0:	cmp	r5, r7
   1c3c4:	cmpeq	r4, r6
   1c3c8:	bcs	1c3a0 <__assert_fail@plt+0xacd0>
   1c3cc:	adds	r4, r4, r4
   1c3d0:	adc	r5, r5, r5
   1c3d4:	subs	r2, r2, #1
   1c3d8:	bne	1c3c0 <__assert_fail@plt+0xacf0>
   1c3dc:	lsr	r3, r4, ip
   1c3e0:	orr	r3, r3, r5, lsl fp
   1c3e4:	lsr	r2, r5, ip
   1c3e8:	orr	r3, r3, r5, lsr sl
   1c3ec:	adds	r0, r0, r4
   1c3f0:	mov	r4, r3
   1c3f4:	lsl	r3, r2, ip
   1c3f8:	orr	r3, r3, r4, lsl sl
   1c3fc:	lsl	ip, r4, ip
   1c400:	orr	r3, r3, r4, lsr fp
   1c404:	adc	r1, r1, r5
   1c408:	subs	r0, r0, ip
   1c40c:	mov	r5, r2
   1c410:	sbc	r1, r1, r3
   1c414:	cmp	lr, #0
   1c418:	strdne	r4, [lr]
   1c41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c424:	mov	r7, r0
   1c428:	ldr	r6, [pc, #72]	; 1c478 <__assert_fail@plt+0xada8>
   1c42c:	ldr	r5, [pc, #72]	; 1c47c <__assert_fail@plt+0xadac>
   1c430:	add	r6, pc, r6
   1c434:	add	r5, pc, r5
   1c438:	sub	r6, r6, r5
   1c43c:	mov	r8, r1
   1c440:	mov	r9, r2
   1c444:	bl	11338 <calloc@plt-0x20>
   1c448:	asrs	r6, r6, #2
   1c44c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c450:	mov	r4, #0
   1c454:	add	r4, r4, #1
   1c458:	ldr	r3, [r5], #4
   1c45c:	mov	r2, r9
   1c460:	mov	r1, r8
   1c464:	mov	r0, r7
   1c468:	blx	r3
   1c46c:	cmp	r6, r4
   1c470:	bne	1c454 <__assert_fail@plt+0xad84>
   1c474:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c478:	ldrdeq	r2, [r1], -r4
   1c47c:	andeq	r2, r1, ip, asr #21
   1c480:	bx	lr
   1c484:	ldr	r3, [pc, #12]	; 1c498 <__assert_fail@plt+0xadc8>
   1c488:	mov	r1, #0
   1c48c:	add	r3, pc, r3
   1c490:	ldr	r2, [r3]
   1c494:	b	115b0 <__cxa_atexit@plt>
   1c498:			; <UNDEFINED> instruction: 0x00012cb0

Disassembly of section .fini:

0001c49c <.fini>:
   1c49c:	push	{r3, lr}
   1c4a0:	pop	{r3, pc}
