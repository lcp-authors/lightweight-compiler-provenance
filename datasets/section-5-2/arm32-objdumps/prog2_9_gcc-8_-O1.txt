
../repos/prog2/9:     file format elf32-littlearm


Disassembly of section .init:

000109a0 <.init>:
   109a0:	push	{r3, lr}
   109a4:	bl	10ad4 <_start@@Base+0x3c>
   109a8:	pop	{r3, pc}

Disassembly of section .plt:

000109ac <calloc@plt-0x14>:
   109ac:	push	{lr}		; (str lr, [sp, #-4]!)
   109b0:	ldr	lr, [pc, #4]	; 109bc <calloc@plt-0x4>
   109b4:	add	lr, pc, lr
   109b8:	ldr	pc, [lr, #8]!
   109bc:	andeq	r1, r1, r4, asr #12

000109c0 <calloc@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #69632	; 0x11000
   109c8:	ldr	pc, [ip, #1604]!	; 0x644

000109cc <strcmp@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #69632	; 0x11000
   109d4:	ldr	pc, [ip, #1596]!	; 0x63c

000109d8 <printf@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #69632	; 0x11000
   109e0:	ldr	pc, [ip, #1588]!	; 0x634

000109e4 <__isoc99_fscanf@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #69632	; 0x11000
   109ec:	ldr	pc, [ip, #1580]!	; 0x62c

000109f0 <fopen@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #69632	; 0x11000
   109f8:	ldr	pc, [ip, #1572]!	; 0x624

000109fc <fflush@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #69632	; 0x11000
   10a04:	ldr	pc, [ip, #1564]!	; 0x61c

00010a08 <free@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #69632	; 0x11000
   10a10:	ldr	pc, [ip, #1556]!	; 0x614

00010a14 <fgets@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #69632	; 0x11000
   10a1c:	ldr	pc, [ip, #1548]!	; 0x60c

00010a20 <strdup@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #69632	; 0x11000
   10a28:	ldr	pc, [ip, #1540]!	; 0x604

00010a2c <puts@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #69632	; 0x11000
   10a34:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a38 <malloc@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #69632	; 0x11000
   10a40:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a44 <__libc_start_main@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a50 <__gmon_start__@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a5c <feof@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a68 <strlen@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a74 <putchar@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a80 <fclose@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a8c <abort@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1468]!	; 0x5bc

Disassembly of section .text:

00010a98 <_start@@Base>:
   10a98:	mov	fp, #0
   10a9c:	mov	lr, #0
   10aa0:	pop	{r1}		; (ldr r1, [sp], #4)
   10aa4:	mov	r2, sp
   10aa8:	push	{r2}		; (str r2, [sp, #-4]!)
   10aac:	push	{r0}		; (str r0, [sp, #-4]!)
   10ab0:	ldr	ip, [pc, #16]	; 10ac8 <_start@@Base+0x30>
   10ab4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ab8:	ldr	r0, [pc, #12]	; 10acc <_start@@Base+0x34>
   10abc:	ldr	r3, [pc, #12]	; 10ad0 <_start@@Base+0x38>
   10ac0:	bl	10a44 <__libc_start_main@plt>
   10ac4:	bl	10a8c <abort@plt>
   10ac8:			; <UNDEFINED> instruction: 0x000115b4
   10acc:	andeq	r0, r1, r0, lsl pc
   10ad0:	andeq	r1, r1, r4, asr r5
   10ad4:	ldr	r3, [pc, #20]	; 10af0 <_start@@Base+0x58>
   10ad8:	ldr	r2, [pc, #20]	; 10af4 <_start@@Base+0x5c>
   10adc:	add	r3, pc, r3
   10ae0:	ldr	r2, [r3, r2]
   10ae4:	cmp	r2, #0
   10ae8:	bxeq	lr
   10aec:	b	10a50 <__gmon_start__@plt>
   10af0:	andeq	r1, r1, ip, lsl r5
   10af4:	andeq	r0, r0, r4, asr r0
   10af8:	ldr	r0, [pc, #24]	; 10b18 <_start@@Base+0x80>
   10afc:	ldr	r3, [pc, #24]	; 10b1c <_start@@Base+0x84>
   10b00:	cmp	r3, r0
   10b04:	bxeq	lr
   10b08:	ldr	r3, [pc, #16]	; 10b20 <_start@@Base+0x88>
   10b0c:	cmp	r3, #0
   10b10:	bxeq	lr
   10b14:	bx	r3
   10b18:	andeq	r2, r2, r0, rrx
   10b1c:	andeq	r2, r2, r0, rrx
   10b20:	andeq	r0, r0, r0
   10b24:	ldr	r0, [pc, #36]	; 10b50 <_start@@Base+0xb8>
   10b28:	ldr	r1, [pc, #36]	; 10b54 <_start@@Base+0xbc>
   10b2c:	sub	r1, r1, r0
   10b30:	asr	r1, r1, #2
   10b34:	add	r1, r1, r1, lsr #31
   10b38:	asrs	r1, r1, #1
   10b3c:	bxeq	lr
   10b40:	ldr	r3, [pc, #16]	; 10b58 <_start@@Base+0xc0>
   10b44:	cmp	r3, #0
   10b48:	bxeq	lr
   10b4c:	bx	r3
   10b50:	andeq	r2, r2, r0, rrx
   10b54:	andeq	r2, r2, r0, rrx
   10b58:	andeq	r0, r0, r0
   10b5c:	push	{r4, lr}
   10b60:	ldr	r4, [pc, #24]	; 10b80 <_start@@Base+0xe8>
   10b64:	ldrb	r3, [r4]
   10b68:	cmp	r3, #0
   10b6c:	popne	{r4, pc}
   10b70:	bl	10af8 <_start@@Base+0x60>
   10b74:	mov	r3, #1
   10b78:	strb	r3, [r4]
   10b7c:	pop	{r4, pc}
   10b80:	andeq	r2, r2, r4, rrx
   10b84:	b	10b24 <_start@@Base+0x8c>

00010b88 <fp_insere@@Base>:
   10b88:	strd	r4, [sp, #-16]!
   10b8c:	str	r6, [sp, #8]
   10b90:	str	lr, [sp, #12]
   10b94:	subs	r5, r0, #0
   10b98:	mvneq	r0, #0
   10b9c:	beq	10c40 <fp_insere@@Base+0xb8>
   10ba0:	ldr	r0, [r5]
   10ba4:	ldr	r3, [r5, #4]
   10ba8:	cmp	r0, r3
   10bac:	moveq	r0, #0
   10bb0:	beq	10c40 <fp_insere@@Base+0xb8>
   10bb4:	mov	r0, r2
   10bb8:	bl	112d8 <elemento_cria@@Base>
   10bbc:	mov	r6, r0
   10bc0:	ldr	r3, [r5]
   10bc4:	cmp	r3, #0
   10bc8:	ble	10c50 <fp_insere@@Base+0xc8>
   10bcc:	mov	r4, #0
   10bd0:	ldr	r3, [r5, #8]
   10bd4:	mov	r1, r6
   10bd8:	ldr	r0, [r3, r4, lsl #2]
   10bdc:	bl	11320 <maior_que@@Base>
   10be0:	cmp	r0, #0
   10be4:	beq	10bf8 <fp_insere@@Base+0x70>
   10be8:	add	r4, r4, #1
   10bec:	ldr	r3, [r5]
   10bf0:	cmp	r3, r4
   10bf4:	bgt	10bd0 <fp_insere@@Base+0x48>
   10bf8:	ldr	r2, [r5]
   10bfc:	cmp	r2, r4
   10c00:	blt	10c28 <fp_insere@@Base+0xa0>
   10c04:	lsl	r1, r2, #2
   10c08:	sub	ip, r4, #1
   10c0c:	ldr	r3, [r5, #8]
   10c10:	ldr	r0, [r3, r1]!
   10c14:	str	r0, [r3, #4]
   10c18:	sub	r2, r2, #1
   10c1c:	sub	r1, r1, #4
   10c20:	cmp	r2, ip
   10c24:	bne	10c0c <fp_insere@@Base+0x84>
   10c28:	ldr	r3, [r5, #8]
   10c2c:	str	r6, [r3, r4, lsl #2]
   10c30:	ldr	r3, [r5]
   10c34:	add	r3, r3, #1
   10c38:	str	r3, [r5]
   10c3c:	mov	r0, #1
   10c40:	ldrd	r4, [sp]
   10c44:	ldr	r6, [sp, #8]
   10c48:	add	sp, sp, #12
   10c4c:	pop	{pc}		; (ldr pc, [sp], #4)
   10c50:	mov	r4, #0
   10c54:	b	10bf8 <fp_insere@@Base+0x70>

00010c58 <fp_remove@@Base>:
   10c58:	cmp	r0, #0
   10c5c:	bxeq	lr
   10c60:	ldr	r1, [r0]
   10c64:	cmp	r1, #0
   10c68:	beq	10cb4 <fp_remove@@Base+0x5c>
   10c6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c70:	ldr	r3, [r0, #8]
   10c74:	ldr	lr, [r3]
   10c78:	ble	10ca4 <fp_remove@@Base+0x4c>
   10c7c:	mov	r2, #4
   10c80:	mov	r3, #0
   10c84:	ldr	r1, [r0, #8]
   10c88:	ldr	ip, [r1, r2]
   10c8c:	str	ip, [r1, r3, lsl #2]
   10c90:	add	r3, r3, #1
   10c94:	ldr	r1, [r0]
   10c98:	add	r2, r2, #4
   10c9c:	cmp	r1, r3
   10ca0:	bgt	10c84 <fp_remove@@Base+0x2c>
   10ca4:	sub	r1, r1, #1
   10ca8:	str	r1, [r0]
   10cac:	ldr	r0, [lr, #4]
   10cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   10cb4:	mov	r0, #0
   10cb8:	bx	lr

00010cbc <fp_carrega@@Base>:
   10cbc:	strd	r4, [sp, #-16]!
   10cc0:	str	r6, [sp, #8]
   10cc4:	str	lr, [sp, #12]
   10cc8:	sub	sp, sp, #264	; 0x108
   10ccc:	mov	r6, r0
   10cd0:	mov	r0, r1
   10cd4:	movw	r1, #5572	; 0x15c4
   10cd8:	movt	r1, #1
   10cdc:	bl	109f0 <fopen@plt>
   10ce0:	subs	r4, r0, #0
   10ce4:	beq	10d4c <fp_carrega@@Base+0x90>
   10ce8:	movw	r5, #5612	; 0x15ec
   10cec:	movt	r5, #1
   10cf0:	mov	r0, r4
   10cf4:	bl	10a5c <feof@plt>
   10cf8:	cmp	r0, #0
   10cfc:	bne	10d5c <fp_carrega@@Base+0xa0>
   10d00:	add	r2, sp, #4
   10d04:	mov	r1, r5
   10d08:	mov	r0, r4
   10d0c:	bl	109e4 <__isoc99_fscanf@plt>
   10d10:	mov	r2, r4
   10d14:	mov	r1, #256	; 0x100
   10d18:	add	r0, sp, #8
   10d1c:	bl	10a14 <fgets@plt>
   10d20:	add	r0, sp, #8
   10d24:	bl	10a68 <strlen@plt>
   10d28:	add	r3, sp, #264	; 0x108
   10d2c:	add	r0, r3, r0
   10d30:	mov	r3, #0
   10d34:	strb	r3, [r0, #-257]	; 0xfffffeff
   10d38:	ldr	r2, [sp, #4]
   10d3c:	add	r1, sp, #8
   10d40:	mov	r0, r6
   10d44:	bl	10b88 <fp_insere@@Base>
   10d48:	b	10cf0 <fp_carrega@@Base+0x34>
   10d4c:	movw	r0, #5576	; 0x15c8
   10d50:	movt	r0, #1
   10d54:	bl	10a2c <puts@plt>
   10d58:	b	10d64 <fp_carrega@@Base+0xa8>
   10d5c:	mov	r0, r4
   10d60:	bl	10a80 <fclose@plt>
   10d64:	add	sp, sp, #264	; 0x108
   10d68:	ldrd	r4, [sp]
   10d6c:	ldr	r6, [sp, #8]
   10d70:	add	sp, sp, #12
   10d74:	pop	{pc}		; (ldr pc, [sp], #4)

00010d78 <heap_insere@@Base>:
   10d78:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10d7c:	strd	r6, [sp, #8]
   10d80:	str	r8, [sp, #16]
   10d84:	str	lr, [sp, #20]
   10d88:	ldr	lr, [r0]
   10d8c:	ldr	ip, [r0, #4]
   10d90:	cmp	lr, ip
   10d94:	moveq	r4, #0
   10d98:	beq	10e2c <heap_insere@@Base+0xb4>
   10d9c:	mov	r7, r1
   10da0:	mov	r5, r0
   10da4:	mov	r1, r2
   10da8:	mov	r0, r3
   10dac:	bl	112d8 <elemento_cria@@Base>
   10db0:	mov	r6, r0
   10db4:	ldr	r3, [r5]
   10db8:	cmp	r3, #0
   10dbc:	movle	r4, #0
   10dc0:	ble	10e18 <heap_insere@@Base+0xa0>
   10dc4:	mov	r4, #0
   10dc8:	ldr	r3, [r5, #8]
   10dcc:	mov	r1, r6
   10dd0:	ldr	r0, [r3, r4, lsl #2]
   10dd4:	blx	r7
   10dd8:	cmp	r0, #1
   10ddc:	beq	10df0 <heap_insere@@Base+0x78>
   10de0:	add	r4, r4, #1
   10de4:	ldr	r3, [r5]
   10de8:	cmp	r3, r4
   10dec:	bgt	10dc8 <heap_insere@@Base+0x50>
   10df0:	cmp	r4, #0
   10df4:	ble	10e18 <heap_insere@@Base+0xa0>
   10df8:	lsl	r1, r4, #2
   10dfc:	mov	r2, r4
   10e00:	ldr	r3, [r5, #8]
   10e04:	ldr	r0, [r3, r1]!
   10e08:	str	r0, [r3, #4]
   10e0c:	sub	r1, r1, #4
   10e10:	subs	r2, r2, #1
   10e14:	bne	10e00 <heap_insere@@Base+0x88>
   10e18:	ldr	r3, [r5, #8]
   10e1c:	str	r6, [r3, r4, lsl #2]
   10e20:	ldr	r3, [r5]
   10e24:	add	r3, r3, #1
   10e28:	str	r3, [r5]
   10e2c:	mov	r0, r4
   10e30:	ldrd	r4, [sp]
   10e34:	ldrd	r6, [sp, #8]
   10e38:	ldr	r8, [sp, #16]
   10e3c:	add	sp, sp, #20
   10e40:	pop	{pc}		; (ldr pc, [sp], #4)

00010e44 <heap_remove@@Base>:
   10e44:	mov	r0, #0
   10e48:	bx	lr

00010e4c <heap_carrega@@Base>:
   10e4c:	strd	r4, [sp, #-20]!	; 0xffffffec
   10e50:	strd	r6, [sp, #8]
   10e54:	str	lr, [sp, #16]
   10e58:	sub	sp, sp, #268	; 0x10c
   10e5c:	mov	r6, r0
   10e60:	mov	r7, r1
   10e64:	movw	r1, #5572	; 0x15c4
   10e68:	movt	r1, #1
   10e6c:	mov	r0, r2
   10e70:	bl	109f0 <fopen@plt>
   10e74:	subs	r4, r0, #0
   10e78:	beq	10ee4 <heap_carrega@@Base+0x98>
   10e7c:	movw	r5, #5612	; 0x15ec
   10e80:	movt	r5, #1
   10e84:	mov	r0, r4
   10e88:	bl	10a5c <feof@plt>
   10e8c:	cmp	r0, #0
   10e90:	bne	10ef4 <heap_carrega@@Base+0xa8>
   10e94:	add	r2, sp, #4
   10e98:	mov	r1, r5
   10e9c:	mov	r0, r4
   10ea0:	bl	109e4 <__isoc99_fscanf@plt>
   10ea4:	mov	r2, r4
   10ea8:	mov	r1, #256	; 0x100
   10eac:	add	r0, sp, #8
   10eb0:	bl	10a14 <fgets@plt>
   10eb4:	add	r0, sp, #8
   10eb8:	bl	10a68 <strlen@plt>
   10ebc:	add	r3, sp, #264	; 0x108
   10ec0:	add	r0, r3, r0
   10ec4:	mov	r3, #0
   10ec8:	strb	r3, [r0, #-257]	; 0xfffffeff
   10ecc:	ldr	r3, [sp, #4]
   10ed0:	add	r2, sp, #8
   10ed4:	mov	r1, r7
   10ed8:	mov	r0, r6
   10edc:	bl	10d78 <heap_insere@@Base>
   10ee0:	b	10e84 <heap_carrega@@Base+0x38>
   10ee4:	movw	r0, #5576	; 0x15c8
   10ee8:	movt	r0, #1
   10eec:	bl	10a2c <puts@plt>
   10ef0:	b	10efc <heap_carrega@@Base+0xb0>
   10ef4:	mov	r0, r4
   10ef8:	bl	10a80 <fclose@plt>
   10efc:	add	sp, sp, #268	; 0x10c
   10f00:	ldrd	r4, [sp]
   10f04:	ldrd	r6, [sp, #8]
   10f08:	add	sp, sp, #16
   10f0c:	pop	{pc}		; (ldr pc, [sp], #4)

00010f10 <main@@Base>:
   10f10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   10f14:	strd	r6, [sp, #8]
   10f18:	strd	r8, [sp, #16]
   10f1c:	str	sl, [sp, #24]
   10f20:	str	lr, [sp, #28]
   10f24:	mov	r0, #42	; 0x2a
   10f28:	bl	11200 <vetor_cria@@Base>
   10f2c:	mov	r4, r0
   10f30:	movw	r0, #5616	; 0x15f0
   10f34:	movt	r0, #1
   10f38:	bl	10a2c <puts@plt>
   10f3c:	movw	r1, #5672	; 0x1628
   10f40:	movt	r1, #1
   10f44:	mov	r0, r4
   10f48:	bl	10cbc <fp_carrega@@Base>
   10f4c:	movw	r3, #8296	; 0x2068
   10f50:	movt	r3, #2
   10f54:	ldr	r1, [r3]
   10f58:	movw	r0, #5684	; 0x1634
   10f5c:	movt	r0, #1
   10f60:	bl	109d8 <printf@plt>
   10f64:	mov	r0, r4
   10f68:	bl	11414 <vetor_imprime@@Base>
   10f6c:	ldr	r3, [r4]
   10f70:	cmp	r3, #42	; 0x2a
   10f74:	beq	10fa4 <main@@Base+0x94>
   10f78:	movw	r0, #5740	; 0x166c
   10f7c:	movt	r0, #1
   10f80:	bl	10a2c <puts@plt>
   10f84:	mov	r6, #1
   10f88:	mov	r0, r6
   10f8c:	ldrd	r4, [sp]
   10f90:	ldrd	r6, [sp, #8]
   10f94:	ldrd	r8, [sp, #16]
   10f98:	ldr	sl, [sp, #24]
   10f9c:	add	sp, sp, #28
   10fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa4:	mov	r0, r4
   10fa8:	bl	10c58 <fp_remove@@Base>
   10fac:	mov	r1, r0
   10fb0:	movw	r0, #5780	; 0x1694
   10fb4:	movt	r0, #1
   10fb8:	bl	109cc <strcmp@plt>
   10fbc:	cmp	r0, #0
   10fc0:	bne	111c4 <main@@Base+0x2b4>
   10fc4:	movw	r5, #8296	; 0x2068
   10fc8:	movt	r5, #2
   10fcc:	mov	r7, #0
   10fd0:	str	r7, [r5]
   10fd4:	mov	r0, r4
   10fd8:	bl	10c58 <fp_remove@@Base>
   10fdc:	ldr	r1, [r5]
   10fe0:	movw	r0, #5868	; 0x16ec
   10fe4:	movt	r0, #1
   10fe8:	bl	109d8 <printf@plt>
   10fec:	str	r7, [r5]
   10ff0:	movw	r6, #5920	; 0x1720
   10ff4:	movt	r6, #1
   10ff8:	mov	r2, #99	; 0x63
   10ffc:	mov	r1, r6
   11000:	mov	r0, r4
   11004:	bl	10b88 <fp_insere@@Base>
   11008:	ldr	r1, [r5]
   1100c:	movw	r0, #5936	; 0x1730
   11010:	movt	r0, #1
   11014:	bl	109d8 <printf@plt>
   11018:	mov	r0, r4
   1101c:	bl	10c58 <fp_remove@@Base>
   11020:	str	r7, [r5]
   11024:	mov	r2, r7
   11028:	mov	r1, r6
   1102c:	mov	r0, r4
   11030:	bl	10b88 <fp_insere@@Base>
   11034:	ldr	r1, [r5]
   11038:	movw	r0, #6008	; 0x1778
   1103c:	movt	r0, #1
   11040:	bl	109d8 <printf@plt>
   11044:	mov	r0, r4
   11048:	bl	10c58 <fp_remove@@Base>
   1104c:	str	r7, [r5]
   11050:	mov	r2, #42	; 0x2a
   11054:	mov	r1, r6
   11058:	mov	r0, r4
   1105c:	bl	10b88 <fp_insere@@Base>
   11060:	ldr	r1, [r5]
   11064:	movw	r0, #6080	; 0x17c0
   11068:	movt	r0, #1
   1106c:	bl	109d8 <printf@plt>
   11070:	movw	r0, #6152	; 0x1808
   11074:	movt	r0, #1
   11078:	bl	10a2c <puts@plt>
   1107c:	mov	r0, #42	; 0x2a
   11080:	bl	1126c <vetor_criaHeap@@Base>
   11084:	mov	r7, r0
   11088:	movw	r2, #5672	; 0x1628
   1108c:	movt	r2, #1
   11090:	movw	r1, #4896	; 0x1320
   11094:	movt	r1, #1
   11098:	bl	10e4c <heap_carrega@@Base>
   1109c:	ldr	r1, [r5]
   110a0:	movw	r0, #6208	; 0x1840
   110a4:	movt	r0, #1
   110a8:	bl	109d8 <printf@plt>
   110ac:	mov	r0, r7
   110b0:	bl	114b4 <vetor_imprimeHeap@@Base>
   110b4:	ldr	r3, [r7]
   110b8:	cmp	r3, #42	; 0x2a
   110bc:	bne	111d8 <main@@Base+0x2c8>
   110c0:	mov	r1, #0
   110c4:	movw	r0, #5780	; 0x1694
   110c8:	movt	r0, #1
   110cc:	bl	109cc <strcmp@plt>
   110d0:	subs	r6, r0, #0
   110d4:	bne	111ec <main@@Base+0x2dc>
   110d8:	movw	r4, #8296	; 0x2068
   110dc:	movt	r4, #2
   110e0:	mov	r5, #0
   110e4:	str	r5, [r4]
   110e8:	mov	r1, r5
   110ec:	movw	r0, #6304	; 0x18a0
   110f0:	movt	r0, #1
   110f4:	bl	109d8 <printf@plt>
   110f8:	str	r5, [r4]
   110fc:	movw	r9, #5920	; 0x1720
   11100:	movt	r9, #1
   11104:	movw	r8, #4896	; 0x1320
   11108:	movt	r8, #1
   1110c:	mov	r3, #99	; 0x63
   11110:	mov	r2, r9
   11114:	mov	r1, r8
   11118:	mov	r0, r7
   1111c:	bl	10d78 <heap_insere@@Base>
   11120:	ldr	r1, [r4]
   11124:	movw	r0, #6356	; 0x18d4
   11128:	movt	r0, #1
   1112c:	bl	109d8 <printf@plt>
   11130:	str	r5, [r4]
   11134:	mov	r3, r5
   11138:	mov	r2, r9
   1113c:	mov	r1, r8
   11140:	mov	r0, r7
   11144:	bl	10d78 <heap_insere@@Base>
   11148:	ldr	r1, [r4]
   1114c:	movw	r0, #6428	; 0x191c
   11150:	movt	r0, #1
   11154:	bl	109d8 <printf@plt>
   11158:	str	r5, [r4]
   1115c:	mov	r3, #42	; 0x2a
   11160:	mov	r2, r9
   11164:	mov	r1, r8
   11168:	mov	r0, r7
   1116c:	bl	10d78 <heap_insere@@Base>
   11170:	ldr	r1, [r4]
   11174:	movw	r0, #6080	; 0x17c0
   11178:	movt	r0, #1
   1117c:	bl	109d8 <printf@plt>
   11180:	mov	r0, #42	; 0x2a
   11184:	bl	1126c <vetor_criaHeap@@Base>
   11188:	movw	r2, #5672	; 0x1628
   1118c:	movt	r2, #1
   11190:	movw	r1, #5020	; 0x139c
   11194:	movt	r1, #1
   11198:	bl	10e4c <heap_carrega@@Base>
   1119c:	ldr	r1, [r4]
   111a0:	movw	r0, #6208	; 0x1840
   111a4:	movt	r0, #1
   111a8:	bl	109d8 <printf@plt>
   111ac:	mov	r4, #42	; 0x2a
   111b0:	mov	r0, r5
   111b4:	bl	10a2c <puts@plt>
   111b8:	subs	r4, r4, #1
   111bc:	bne	111b0 <main@@Base+0x2a0>
   111c0:	b	10f88 <main@@Base+0x78>
   111c4:	movw	r0, #5800	; 0x16a8
   111c8:	movt	r0, #1
   111cc:	bl	10a2c <puts@plt>
   111d0:	mov	r6, #1
   111d4:	b	10f88 <main@@Base+0x78>
   111d8:	movw	r0, #6264	; 0x1878
   111dc:	movt	r0, #1
   111e0:	bl	10a2c <puts@plt>
   111e4:	mov	r6, #1
   111e8:	b	10f88 <main@@Base+0x78>
   111ec:	movw	r0, #5800	; 0x16a8
   111f0:	movt	r0, #1
   111f4:	bl	10a2c <puts@plt>
   111f8:	mov	r6, #1
   111fc:	b	10f88 <main@@Base+0x78>

00011200 <vetor_cria@@Base>:
   11200:	strd	r4, [sp, #-16]!
   11204:	str	r6, [sp, #8]
   11208:	str	lr, [sp, #12]
   1120c:	mov	r5, r0
   11210:	mov	r0, #12
   11214:	bl	10a38 <malloc@plt>
   11218:	subs	r4, r0, #0
   1121c:	beq	11248 <vetor_cria@@Base+0x48>
   11220:	mov	r3, #0
   11224:	str	r3, [r4]
   11228:	str	r5, [r4, #4]
   1122c:	mov	r1, #4
   11230:	mov	r0, r5
   11234:	bl	109c0 <calloc@plt>
   11238:	mov	r5, r0
   1123c:	str	r0, [r4, #8]
   11240:	cmp	r0, #0
   11244:	beq	1125c <vetor_cria@@Base+0x5c>
   11248:	mov	r0, r4
   1124c:	ldrd	r4, [sp]
   11250:	ldr	r6, [sp, #8]
   11254:	add	sp, sp, #12
   11258:	pop	{pc}		; (ldr pc, [sp], #4)
   1125c:	mov	r0, r4
   11260:	bl	10a08 <free@plt>
   11264:	mov	r4, r5
   11268:	b	11248 <vetor_cria@@Base+0x48>

0001126c <vetor_criaHeap@@Base>:
   1126c:	strd	r4, [sp, #-16]!
   11270:	str	r6, [sp, #8]
   11274:	str	lr, [sp, #12]
   11278:	mov	r5, r0
   1127c:	mov	r0, #12
   11280:	bl	10a38 <malloc@plt>
   11284:	subs	r4, r0, #0
   11288:	beq	112b4 <vetor_criaHeap@@Base+0x48>
   1128c:	mov	r3, #0
   11290:	str	r3, [r4]
   11294:	str	r5, [r4, #4]
   11298:	mov	r1, #4
   1129c:	add	r0, r5, #1
   112a0:	bl	109c0 <calloc@plt>
   112a4:	mov	r5, r0
   112a8:	str	r0, [r4, #8]
   112ac:	cmp	r0, #0
   112b0:	beq	112c8 <vetor_criaHeap@@Base+0x5c>
   112b4:	mov	r0, r4
   112b8:	ldrd	r4, [sp]
   112bc:	ldr	r6, [sp, #8]
   112c0:	add	sp, sp, #12
   112c4:	pop	{pc}		; (ldr pc, [sp], #4)
   112c8:	mov	r0, r4
   112cc:	bl	10a08 <free@plt>
   112d0:	mov	r4, r5
   112d4:	b	112b4 <vetor_criaHeap@@Base+0x48>

000112d8 <elemento_cria@@Base>:
   112d8:	strd	r4, [sp, #-16]!
   112dc:	str	r6, [sp, #8]
   112e0:	str	lr, [sp, #12]
   112e4:	mov	r5, r0
   112e8:	mov	r6, r1
   112ec:	mov	r0, #8
   112f0:	bl	10a38 <malloc@plt>
   112f4:	subs	r4, r0, #0
   112f8:	beq	1130c <elemento_cria@@Base+0x34>
   112fc:	mov	r0, r6
   11300:	bl	10a20 <strdup@plt>
   11304:	str	r0, [r4, #4]
   11308:	str	r5, [r4]
   1130c:	mov	r0, r4
   11310:	ldrd	r4, [sp]
   11314:	ldr	r6, [sp, #8]
   11318:	add	sp, sp, #12
   1131c:	pop	{pc}		; (ldr pc, [sp], #4)

00011320 <maior_que@@Base>:
   11320:	strd	r4, [sp, #-16]!
   11324:	str	r6, [sp, #8]
   11328:	str	lr, [sp, #12]
   1132c:	cmp	r1, #0
   11330:	cmpne	r0, #0
   11334:	beq	11388 <maior_que@@Base+0x68>
   11338:	mov	r5, r0
   1133c:	mov	r4, r1
   11340:	movw	r3, #8288	; 0x2060
   11344:	movt	r3, #2
   11348:	ldr	r0, [r3]
   1134c:	bl	109fc <fflush@plt>
   11350:	movw	r3, #8296	; 0x2068
   11354:	movt	r3, #2
   11358:	ldr	r2, [r3]
   1135c:	add	r2, r2, #1
   11360:	str	r2, [r3]
   11364:	ldr	r0, [r5]
   11368:	ldr	r3, [r4]
   1136c:	cmp	r0, r3
   11370:	movle	r0, #0
   11374:	movgt	r0, #1
   11378:	ldrd	r4, [sp]
   1137c:	ldr	r6, [sp, #8]
   11380:	add	sp, sp, #12
   11384:	pop	{pc}		; (ldr pc, [sp], #4)
   11388:	movw	r0, #6500	; 0x1964
   1138c:	movt	r0, #1
   11390:	bl	10a2c <puts@plt>
   11394:	mov	r0, #0
   11398:	b	11378 <maior_que@@Base+0x58>

0001139c <maior_que_HeapSort@@Base>:
   1139c:	strd	r4, [sp, #-16]!
   113a0:	str	r6, [sp, #8]
   113a4:	str	lr, [sp, #12]
   113a8:	cmp	r1, #0
   113ac:	cmpne	r0, #0
   113b0:	beq	11400 <maior_que_HeapSort@@Base+0x64>
   113b4:	mov	r4, r0
   113b8:	mov	r5, r1
   113bc:	movw	r3, #8288	; 0x2060
   113c0:	movt	r3, #2
   113c4:	ldr	r0, [r3]
   113c8:	bl	109fc <fflush@plt>
   113cc:	movw	r3, #8296	; 0x2068
   113d0:	movt	r3, #2
   113d4:	ldr	r2, [r3]
   113d8:	add	r2, r2, #1
   113dc:	str	r2, [r3]
   113e0:	ldr	r1, [r5, #4]
   113e4:	ldr	r0, [r4, #4]
   113e8:	bl	109cc <strcmp@plt>
   113ec:	lsr	r0, r0, #31
   113f0:	ldrd	r4, [sp]
   113f4:	ldr	r6, [sp, #8]
   113f8:	add	sp, sp, #12
   113fc:	pop	{pc}		; (ldr pc, [sp], #4)
   11400:	movw	r0, #6500	; 0x1964
   11404:	movt	r0, #1
   11408:	bl	10a2c <puts@plt>
   1140c:	mov	r0, #0
   11410:	b	113f0 <maior_que_HeapSort@@Base+0x54>

00011414 <vetor_imprime@@Base>:
   11414:	strd	r4, [sp, #-16]!
   11418:	str	r6, [sp, #8]
   1141c:	str	lr, [sp, #12]
   11420:	ldr	r3, [r0]
   11424:	cmp	r3, #0
   11428:	ble	114a4 <vetor_imprime@@Base+0x90>
   1142c:	mov	r5, r0
   11430:	ldr	r3, [r0, #8]
   11434:	ldr	r3, [r3]
   11438:	ldr	r2, [r3]
   1143c:	ldr	r1, [r3, #4]
   11440:	movw	r0, #6512	; 0x1970
   11444:	movt	r0, #1
   11448:	bl	109d8 <printf@plt>
   1144c:	ldr	r3, [r5]
   11450:	cmp	r3, #1
   11454:	movgt	r4, #1
   11458:	movwgt	r6, #6568	; 0x19a8
   1145c:	movtgt	r6, #1
   11460:	ble	1148c <vetor_imprime@@Base+0x78>
   11464:	ldr	r3, [r5, #8]
   11468:	ldr	r3, [r3, r4, lsl #2]
   1146c:	ldr	r2, [r3]
   11470:	ldr	r1, [r3, #4]
   11474:	mov	r0, r6
   11478:	bl	109d8 <printf@plt>
   1147c:	add	r4, r4, #1
   11480:	ldr	r3, [r5]
   11484:	cmp	r3, r4
   11488:	bgt	11464 <vetor_imprime@@Base+0x50>
   1148c:	mov	r0, #10
   11490:	bl	10a74 <putchar@plt>
   11494:	ldrd	r4, [sp]
   11498:	ldr	r6, [sp, #8]
   1149c:	add	sp, sp, #12
   114a0:	pop	{pc}		; (ldr pc, [sp], #4)
   114a4:	movw	r0, #6544	; 0x1990
   114a8:	movt	r0, #1
   114ac:	bl	10a2c <puts@plt>
   114b0:	b	11494 <vetor_imprime@@Base+0x80>

000114b4 <vetor_imprimeHeap@@Base>:
   114b4:	strd	r4, [sp, #-16]!
   114b8:	str	r6, [sp, #8]
   114bc:	str	lr, [sp, #12]
   114c0:	ldr	r3, [r0]
   114c4:	cmp	r3, #0
   114c8:	ble	11544 <vetor_imprimeHeap@@Base+0x90>
   114cc:	mov	r5, r0
   114d0:	ldr	r3, [r0, #8]
   114d4:	ldr	r3, [r3, #4]
   114d8:	ldr	r2, [r3]
   114dc:	ldr	r1, [r3, #4]
   114e0:	movw	r0, #6512	; 0x1970
   114e4:	movt	r0, #1
   114e8:	bl	109d8 <printf@plt>
   114ec:	ldr	r3, [r5]
   114f0:	cmp	r3, #2
   114f4:	movgt	r4, #2
   114f8:	movwgt	r6, #6568	; 0x19a8
   114fc:	movtgt	r6, #1
   11500:	ble	1152c <vetor_imprimeHeap@@Base+0x78>
   11504:	ldr	r3, [r5, #8]
   11508:	ldr	r3, [r3, r4, lsl #2]
   1150c:	ldr	r2, [r3]
   11510:	ldr	r1, [r3, #4]
   11514:	mov	r0, r6
   11518:	bl	109d8 <printf@plt>
   1151c:	add	r4, r4, #1
   11520:	ldr	r3, [r5]
   11524:	cmp	r3, r4
   11528:	bgt	11504 <vetor_imprimeHeap@@Base+0x50>
   1152c:	mov	r0, #10
   11530:	bl	10a74 <putchar@plt>
   11534:	ldrd	r4, [sp]
   11538:	ldr	r6, [sp, #8]
   1153c:	add	sp, sp, #12
   11540:	pop	{pc}		; (ldr pc, [sp], #4)
   11544:	movw	r0, #6544	; 0x1990
   11548:	movt	r0, #1
   1154c:	bl	10a2c <puts@plt>
   11550:	b	11534 <vetor_imprimeHeap@@Base+0x80>

00011554 <__libc_csu_init@@Base>:
   11554:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11558:	mov	r7, r0
   1155c:	ldr	r6, [pc, #72]	; 115ac <__libc_csu_init@@Base+0x58>
   11560:	ldr	r5, [pc, #72]	; 115b0 <__libc_csu_init@@Base+0x5c>
   11564:	add	r6, pc, r6
   11568:	add	r5, pc, r5
   1156c:	sub	r6, r6, r5
   11570:	mov	r8, r1
   11574:	mov	r9, r2
   11578:	bl	109a0 <calloc@plt-0x20>
   1157c:	asrs	r6, r6, #2
   11580:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11584:	mov	r4, #0
   11588:	add	r4, r4, #1
   1158c:	ldr	r3, [r5], #4
   11590:	mov	r2, r9
   11594:	mov	r1, r8
   11598:	mov	r0, r7
   1159c:	blx	r3
   115a0:	cmp	r6, r4
   115a4:	bne	11588 <__libc_csu_init@@Base+0x34>
   115a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   115ac:	andeq	r0, r1, r8, lsr #19
   115b0:	andeq	r0, r1, r0, lsr #19

000115b4 <__libc_csu_fini@@Base>:
   115b4:	bx	lr

Disassembly of section .fini:

000115b8 <.fini>:
   115b8:	push	{r3, lr}
   115bc:	pop	{r3, pc}
