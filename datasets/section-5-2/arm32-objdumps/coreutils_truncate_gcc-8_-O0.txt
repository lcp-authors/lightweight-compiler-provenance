
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	10ef0 <__assert_fail@plt+0x48>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r8, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #24, 20	; 0x18000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #24, 20	; 0x18000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <raise@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #24, 20	; 0x18000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <strcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #24, 20	; 0x18000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <printf@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #24, 20	; 0x18000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <fflush@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #24, 20	; 0x18000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <free@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #24, 20	; 0x18000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <_exit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #24, 20	; 0x18000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <memcpy@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #24, 20	; 0x18000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <mbsinit@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #24, 20	; 0x18000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <ftruncate64@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #24, 20	; 0x18000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <memcmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #24, 20	; 0x18000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <fputc_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #24, 20	; 0x18000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <realloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #24, 20	; 0x18000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <textdomain@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #24, 20	; 0x18000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <iswprint@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #24, 20	; 0x18000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <__fxstat64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #24, 20	; 0x18000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <fwrite@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #24, 20	; 0x18000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <lseek64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #24, 20	; 0x18000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <__ctype_get_mb_cur_max@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #24, 20	; 0x18000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <__fpending@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #24, 20	; 0x18000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <ferror_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #24, 20	; 0x18000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <mbrtowc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #24, 20	; 0x18000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <error@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #24, 20	; 0x18000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <open64@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #24, 20	; 0x18000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <malloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #24, 20	; 0x18000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <__libc_start_main@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #24, 20	; 0x18000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__freading@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #24, 20	; 0x18000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__gmon_start__@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #24, 20	; 0x18000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <getopt_long@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #24, 20	; 0x18000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <__ctype_b_loc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #24, 20	; 0x18000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <exit@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <gettext@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <strlen@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <strchr@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <fprintf@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <__errno_location@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <__cxa_atexit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <memset@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <fileno@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <strtoimax@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <fclose@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <fseeko64@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <setlocale@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

00010e54 <strrchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #608]!	; 0x260

00010e60 <nl_langinfo@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #600]!	; 0x258

00010e6c <bindtextdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #592]!	; 0x250

00010e78 <__xstat64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #584]!	; 0x248

00010e84 <strncmp@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #576]!	; 0x240

00010e90 <abort@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #568]!	; 0x238

00010e9c <close@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #560]!	; 0x230

00010ea8 <__assert_fail@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #552]!	; 0x228

Disassembly of section .text:

00010eb4 <.text>:
   10eb4:	mov	fp, #0
   10eb8:	mov	lr, #0
   10ebc:	pop	{r1}		; (ldr r1, [sp], #4)
   10ec0:	mov	r2, sp
   10ec4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ec8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ecc:	ldr	ip, [pc, #16]	; 10ee4 <__assert_fail@plt+0x3c>
   10ed0:	push	{ip}		; (str ip, [sp, #-4]!)
   10ed4:	ldr	r0, [pc, #12]	; 10ee8 <__assert_fail@plt+0x40>
   10ed8:	ldr	r3, [pc, #12]	; 10eec <__assert_fail@plt+0x44>
   10edc:	bl	10d7c <__libc_start_main@plt>
   10ee0:	bl	10e90 <abort@plt>
   10ee4:	andeq	r7, r1, r0, asr #30
   10ee8:	andeq	r1, r1, r0, asr #20
   10eec:	andeq	r7, r1, r0, ror #29
   10ef0:	ldr	r3, [pc, #20]	; 10f0c <__assert_fail@plt+0x64>
   10ef4:	ldr	r2, [pc, #20]	; 10f10 <__assert_fail@plt+0x68>
   10ef8:	add	r3, pc, r3
   10efc:	ldr	r2, [r3, r2]
   10f00:	cmp	r2, #0
   10f04:	bxeq	lr
   10f08:	b	10d94 <__gmon_start__@plt>
   10f0c:	andeq	r8, r1, r0, lsl #2
   10f10:	ldrdeq	r0, [r0], -ip
   10f14:	ldr	r0, [pc, #24]	; 10f34 <__assert_fail@plt+0x8c>
   10f18:	ldr	r3, [pc, #24]	; 10f38 <__assert_fail@plt+0x90>
   10f1c:	cmp	r3, r0
   10f20:	bxeq	lr
   10f24:	ldr	r3, [pc, #16]	; 10f3c <__assert_fail@plt+0x94>
   10f28:	cmp	r3, #0
   10f2c:	bxeq	lr
   10f30:	bx	r3
   10f34:	andeq	r9, r2, r0, lsr r1
   10f38:	andeq	r9, r2, r0, lsr r1
   10f3c:	andeq	r0, r0, r0
   10f40:	ldr	r0, [pc, #36]	; 10f6c <__assert_fail@plt+0xc4>
   10f44:	ldr	r1, [pc, #36]	; 10f70 <__assert_fail@plt+0xc8>
   10f48:	sub	r1, r1, r0
   10f4c:	asr	r1, r1, #2
   10f50:	add	r1, r1, r1, lsr #31
   10f54:	asrs	r1, r1, #1
   10f58:	bxeq	lr
   10f5c:	ldr	r3, [pc, #16]	; 10f74 <__assert_fail@plt+0xcc>
   10f60:	cmp	r3, #0
   10f64:	bxeq	lr
   10f68:	bx	r3
   10f6c:	andeq	r9, r2, r0, lsr r1
   10f70:	andeq	r9, r2, r0, lsr r1
   10f74:	andeq	r0, r0, r0
   10f78:	push	{r4, lr}
   10f7c:	ldr	r4, [pc, #24]	; 10f9c <__assert_fail@plt+0xf4>
   10f80:	ldrb	r3, [r4]
   10f84:	cmp	r3, #0
   10f88:	popne	{r4, pc}
   10f8c:	bl	10f14 <__assert_fail@plt+0x6c>
   10f90:	mov	r3, #1
   10f94:	strb	r3, [r4]
   10f98:	pop	{r4, pc}
   10f9c:	andeq	r9, r2, ip, asr #2
   10fa0:	b	10f40 <__assert_fail@plt+0x98>
   10fa4:	push	{fp}		; (str fp, [sp, #-4]!)
   10fa8:	add	fp, sp, #0
   10fac:	sub	sp, sp, #12
   10fb0:	mov	r3, r0
   10fb4:	strb	r3, [fp, #-5]
   10fb8:	ldrb	r3, [fp, #-5]
   10fbc:	mov	r0, r3
   10fc0:	add	sp, fp, #0
   10fc4:	pop	{fp}		; (ldr fp, [sp], #4)
   10fc8:	bx	lr
   10fcc:	str	fp, [sp, #-8]!
   10fd0:	str	lr, [sp, #4]
   10fd4:	add	fp, sp, #4
   10fd8:	movw	r0, #32648	; 0x7f88
   10fdc:	movt	r0, #1
   10fe0:	bl	10dc4 <gettext@plt>
   10fe4:	mov	r2, r0
   10fe8:	movw	r3, #37188	; 0x9144
   10fec:	movt	r3, #2
   10ff0:	ldr	r3, [r3]
   10ff4:	mov	r1, r3
   10ff8:	mov	r0, r2
   10ffc:	bl	10c50 <fputs_unlocked@plt>
   11000:	nop	{0}
   11004:	sub	sp, fp, #4
   11008:	ldr	fp, [sp]
   1100c:	add	sp, sp, #4
   11010:	pop	{pc}		; (ldr pc, [sp], #4)
   11014:	str	fp, [sp, #-8]!
   11018:	str	lr, [sp, #4]
   1101c:	add	fp, sp, #4
   11020:	movw	r0, #32724	; 0x7fd4
   11024:	movt	r0, #1
   11028:	bl	10dc4 <gettext@plt>
   1102c:	mov	r2, r0
   11030:	movw	r3, #37188	; 0x9144
   11034:	movt	r3, #2
   11038:	ldr	r3, [r3]
   1103c:	mov	r1, r3
   11040:	mov	r0, r2
   11044:	bl	10c50 <fputs_unlocked@plt>
   11048:	nop	{0}
   1104c:	sub	sp, fp, #4
   11050:	ldr	fp, [sp]
   11054:	add	sp, sp, #4
   11058:	pop	{pc}		; (ldr pc, [sp], #4)
   1105c:	str	fp, [sp, #-8]!
   11060:	str	lr, [sp, #4]
   11064:	add	fp, sp, #4
   11068:	sub	sp, sp, #80	; 0x50
   1106c:	str	r0, [fp, #-80]	; 0xffffffb0
   11070:	movw	r2, #33308	; 0x821c
   11074:	movt	r2, #1
   11078:	sub	r3, fp, #72	; 0x48
   1107c:	ldrd	r0, [r2]
   11080:	strd	r0, [r3]
   11084:	ldrd	r0, [r2, #8]
   11088:	strd	r0, [r3, #8]
   1108c:	ldrd	r0, [r2, #16]
   11090:	strd	r0, [r3, #16]
   11094:	ldrd	r0, [r2, #24]
   11098:	strd	r0, [r3, #24]
   1109c:	ldrd	r0, [r2, #32]
   110a0:	strd	r0, [r3, #32]
   110a4:	ldrd	r0, [r2, #40]	; 0x28
   110a8:	strd	r0, [r3, #40]	; 0x28
   110ac:	ldrd	r0, [r2, #48]	; 0x30
   110b0:	strd	r0, [r3, #48]	; 0x30
   110b4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110b8:	str	r3, [fp, #-8]
   110bc:	sub	r3, fp, #72	; 0x48
   110c0:	str	r3, [fp, #-12]
   110c4:	b	110d4 <__assert_fail@plt+0x22c>
   110c8:	ldr	r3, [fp, #-12]
   110cc:	add	r3, r3, #8
   110d0:	str	r3, [fp, #-12]
   110d4:	ldr	r3, [fp, #-12]
   110d8:	ldr	r3, [r3]
   110dc:	cmp	r3, #0
   110e0:	beq	11104 <__assert_fail@plt+0x25c>
   110e4:	ldr	r3, [fp, #-12]
   110e8:	ldr	r3, [r3]
   110ec:	mov	r1, r3
   110f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   110f4:	bl	10c68 <strcmp@plt>
   110f8:	mov	r3, r0
   110fc:	cmp	r3, #0
   11100:	bne	110c8 <__assert_fail@plt+0x220>
   11104:	ldr	r3, [fp, #-12]
   11108:	ldr	r3, [r3, #4]
   1110c:	cmp	r3, #0
   11110:	beq	11120 <__assert_fail@plt+0x278>
   11114:	ldr	r3, [fp, #-12]
   11118:	ldr	r3, [r3, #4]
   1111c:	str	r3, [fp, #-8]
   11120:	movw	r0, #32936	; 0x80a8
   11124:	movt	r0, #1
   11128:	bl	10dc4 <gettext@plt>
   1112c:	mov	r3, r0
   11130:	movw	r2, #32960	; 0x80c0
   11134:	movt	r2, #1
   11138:	movw	r1, #33000	; 0x80e8
   1113c:	movt	r1, #1
   11140:	mov	r0, r3
   11144:	bl	10c74 <printf@plt>
   11148:	mov	r1, #0
   1114c:	mov	r0, #5
   11150:	bl	10e48 <setlocale@plt>
   11154:	str	r0, [fp, #-16]
   11158:	ldr	r3, [fp, #-16]
   1115c:	cmp	r3, #0
   11160:	beq	111ac <__assert_fail@plt+0x304>
   11164:	mov	r2, #3
   11168:	movw	r1, #33016	; 0x80f8
   1116c:	movt	r1, #1
   11170:	ldr	r0, [fp, #-16]
   11174:	bl	10e84 <strncmp@plt>
   11178:	mov	r3, r0
   1117c:	cmp	r3, #0
   11180:	beq	111ac <__assert_fail@plt+0x304>
   11184:	movw	r0, #33020	; 0x80fc
   11188:	movt	r0, #1
   1118c:	bl	10dc4 <gettext@plt>
   11190:	mov	r2, r0
   11194:	movw	r3, #37188	; 0x9144
   11198:	movt	r3, #2
   1119c:	ldr	r3, [r3]
   111a0:	mov	r1, r3
   111a4:	mov	r0, r2
   111a8:	bl	10c50 <fputs_unlocked@plt>
   111ac:	movw	r0, #33092	; 0x8144
   111b0:	movt	r0, #1
   111b4:	bl	10dc4 <gettext@plt>
   111b8:	mov	r3, r0
   111bc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   111c0:	movw	r1, #32960	; 0x80c0
   111c4:	movt	r1, #1
   111c8:	mov	r0, r3
   111cc:	bl	10c74 <printf@plt>
   111d0:	movw	r0, #33120	; 0x8160
   111d4:	movt	r0, #1
   111d8:	bl	10dc4 <gettext@plt>
   111dc:	ldr	r2, [fp, #-8]
   111e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   111e4:	cmp	r2, r3
   111e8:	bne	111f8 <__assert_fail@plt+0x350>
   111ec:	movw	r3, #33172	; 0x8194
   111f0:	movt	r3, #1
   111f4:	b	11200 <__assert_fail@plt+0x358>
   111f8:	movw	r3, #33184	; 0x81a0
   111fc:	movt	r3, #1
   11200:	mov	r2, r3
   11204:	ldr	r1, [fp, #-8]
   11208:	bl	10c74 <printf@plt>
   1120c:	nop	{0}
   11210:	sub	sp, fp, #4
   11214:	ldr	fp, [sp]
   11218:	add	sp, sp, #4
   1121c:	pop	{pc}		; (ldr pc, [sp], #4)
   11220:	push	{fp}		; (str fp, [sp, #-4]!)
   11224:	add	fp, sp, #0
   11228:	sub	sp, sp, #12
   1122c:	str	r0, [fp, #-8]
   11230:	ldr	r3, [fp, #-8]
   11234:	ldr	r3, [r3, #16]
   11238:	and	r3, r3, #61440	; 0xf000
   1123c:	cmp	r3, #32768	; 0x8000
   11240:	beq	11258 <__assert_fail@plt+0x3b0>
   11244:	ldr	r3, [fp, #-8]
   11248:	ldr	r3, [r3, #16]
   1124c:	and	r3, r3, #61440	; 0xf000
   11250:	cmp	r3, #40960	; 0xa000
   11254:	bne	11260 <__assert_fail@plt+0x3b8>
   11258:	mov	r3, #1
   1125c:	b	11264 <__assert_fail@plt+0x3bc>
   11260:	mov	r3, #0
   11264:	and	r3, r3, #1
   11268:	uxtb	r3, r3
   1126c:	mov	r0, r3
   11270:	add	sp, fp, #0
   11274:	pop	{fp}		; (ldr fp, [sp], #4)
   11278:	bx	lr
   1127c:	str	r4, [sp, #-12]!
   11280:	str	fp, [sp, #4]
   11284:	str	lr, [sp, #8]
   11288:	add	fp, sp, #8
   1128c:	sub	sp, sp, #12
   11290:	str	r0, [fp, #-16]
   11294:	ldr	r3, [fp, #-16]
   11298:	cmp	r3, #0
   1129c:	beq	112d8 <__assert_fail@plt+0x430>
   112a0:	movw	r3, #37184	; 0x9140
   112a4:	movt	r3, #2
   112a8:	ldr	r4, [r3]
   112ac:	movw	r0, #33536	; 0x8300
   112b0:	movt	r0, #1
   112b4:	bl	10dc4 <gettext@plt>
   112b8:	mov	r1, r0
   112bc:	movw	r3, #37216	; 0x9160
   112c0:	movt	r3, #2
   112c4:	ldr	r3, [r3]
   112c8:	mov	r2, r3
   112cc:	mov	r0, r4
   112d0:	bl	10de8 <fprintf@plt>
   112d4:	b	1142c <__assert_fail@plt+0x584>
   112d8:	movw	r0, #33576	; 0x8328
   112dc:	movt	r0, #1
   112e0:	bl	10dc4 <gettext@plt>
   112e4:	mov	r2, r0
   112e8:	movw	r3, #37216	; 0x9160
   112ec:	movt	r3, #2
   112f0:	ldr	r3, [r3]
   112f4:	mov	r1, r3
   112f8:	mov	r0, r2
   112fc:	bl	10c74 <printf@plt>
   11300:	movw	r0, #33608	; 0x8348
   11304:	movt	r0, #1
   11308:	bl	10dc4 <gettext@plt>
   1130c:	mov	r2, r0
   11310:	movw	r3, #37188	; 0x9144
   11314:	movt	r3, #2
   11318:	ldr	r3, [r3]
   1131c:	mov	r1, r3
   11320:	mov	r0, r2
   11324:	bl	10c50 <fputs_unlocked@plt>
   11328:	bl	10fcc <__assert_fail@plt+0x124>
   1132c:	movw	r0, #33884	; 0x845c
   11330:	movt	r0, #1
   11334:	bl	10dc4 <gettext@plt>
   11338:	mov	r2, r0
   1133c:	movw	r3, #37188	; 0x9144
   11340:	movt	r3, #2
   11344:	ldr	r3, [r3]
   11348:	mov	r1, r3
   1134c:	mov	r0, r2
   11350:	bl	10c50 <fputs_unlocked@plt>
   11354:	movw	r0, #33936	; 0x8490
   11358:	movt	r0, #1
   1135c:	bl	10dc4 <gettext@plt>
   11360:	mov	r2, r0
   11364:	movw	r3, #37188	; 0x9144
   11368:	movt	r3, #2
   1136c:	ldr	r3, [r3]
   11370:	mov	r1, r3
   11374:	mov	r0, r2
   11378:	bl	10c50 <fputs_unlocked@plt>
   1137c:	movw	r0, #34016	; 0x84e0
   11380:	movt	r0, #1
   11384:	bl	10dc4 <gettext@plt>
   11388:	mov	r2, r0
   1138c:	movw	r3, #37188	; 0x9144
   11390:	movt	r3, #2
   11394:	ldr	r3, [r3]
   11398:	mov	r1, r3
   1139c:	mov	r0, r2
   113a0:	bl	10c50 <fputs_unlocked@plt>
   113a4:	movw	r0, #34128	; 0x8550
   113a8:	movt	r0, #1
   113ac:	bl	10dc4 <gettext@plt>
   113b0:	mov	r2, r0
   113b4:	movw	r3, #37188	; 0x9144
   113b8:	movt	r3, #2
   113bc:	ldr	r3, [r3]
   113c0:	mov	r1, r3
   113c4:	mov	r0, r2
   113c8:	bl	10c50 <fputs_unlocked@plt>
   113cc:	movw	r0, #34176	; 0x8580
   113d0:	movt	r0, #1
   113d4:	bl	10dc4 <gettext@plt>
   113d8:	mov	r2, r0
   113dc:	movw	r3, #37188	; 0x9144
   113e0:	movt	r3, #2
   113e4:	ldr	r3, [r3]
   113e8:	mov	r1, r3
   113ec:	mov	r0, r2
   113f0:	bl	10c50 <fputs_unlocked@plt>
   113f4:	bl	11014 <__assert_fail@plt+0x16c>
   113f8:	movw	r0, #34232	; 0x85b8
   113fc:	movt	r0, #1
   11400:	bl	10dc4 <gettext@plt>
   11404:	mov	r2, r0
   11408:	movw	r3, #37188	; 0x9144
   1140c:	movt	r3, #2
   11410:	ldr	r3, [r3]
   11414:	mov	r1, r3
   11418:	mov	r0, r2
   1141c:	bl	10c50 <fputs_unlocked@plt>
   11420:	movw	r0, #34424	; 0x8678
   11424:	movt	r0, #1
   11428:	bl	1105c <__assert_fail@plt+0x1b4>
   1142c:	ldr	r0, [fp, #-16]
   11430:	bl	10db8 <exit@plt>
   11434:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11438:	strd	r6, [sp, #8]
   1143c:	strd	r8, [sp, #16]
   11440:	str	fp, [sp, #24]
   11444:	str	lr, [sp, #28]
   11448:	add	fp, sp, #28
   1144c:	sub	sp, sp, #256	; 0x100
   11450:	str	r0, [fp, #-184]	; 0xffffff48
   11454:	str	r1, [fp, #-188]	; 0xffffff44
   11458:	strd	r2, [fp, #-196]	; 0xffffff3c
   1145c:	movw	r3, #37201	; 0x9151
   11460:	movt	r3, #2
   11464:	ldrb	r3, [r3]
   11468:	cmp	r3, #0
   1146c:	bne	1148c <__assert_fail@plt+0x5e4>
   11470:	ldr	r3, [fp, #12]
   11474:	cmp	r3, #0
   11478:	beq	114ec <__assert_fail@plt+0x644>
   1147c:	ldrd	r2, [fp, #4]
   11480:	cmp	r2, #0
   11484:	sbcs	r3, r3, #0
   11488:	bge	114ec <__assert_fail@plt+0x644>
   1148c:	sub	r3, fp, #172	; 0xac
   11490:	mov	r1, r3
   11494:	ldr	r0, [fp, #-184]	; 0xffffff48
   11498:	bl	17f6c <__assert_fail@plt+0x70c4>
   1149c:	mov	r3, r0
   114a0:	cmp	r3, #0
   114a4:	beq	114ec <__assert_fail@plt+0x644>
   114a8:	bl	10df4 <__errno_location@plt>
   114ac:	mov	r3, r0
   114b0:	ldr	r4, [r3]
   114b4:	movw	r0, #34436	; 0x8684
   114b8:	movt	r0, #1
   114bc:	bl	10dc4 <gettext@plt>
   114c0:	mov	r5, r0
   114c4:	ldr	r1, [fp, #-188]	; 0xffffff44
   114c8:	mov	r0, #4
   114cc:	bl	14a7c <__assert_fail@plt+0x3bd4>
   114d0:	mov	r3, r0
   114d4:	mov	r2, r5
   114d8:	mov	r1, r4
   114dc:	mov	r0, #0
   114e0:	bl	10d58 <error@plt>
   114e4:	mov	r3, #0
   114e8:	b	11a20 <__assert_fail@plt+0xb78>
   114ec:	movw	r3, #37201	; 0x9151
   114f0:	movt	r3, #2
   114f4:	ldrb	r3, [r3]
   114f8:	cmp	r3, #0
   114fc:	beq	1170c <__assert_fail@plt+0x864>
   11500:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11504:	cmp	r3, #0
   11508:	ble	11520 <__assert_fail@plt+0x678>
   1150c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   11510:	cmp	r3, #536870912	; 0x20000000
   11514:	bhi	11520 <__assert_fail@plt+0x678>
   11518:	ldr	r3, [fp, #-116]	; 0xffffff8c
   1151c:	b	11524 <__assert_fail@plt+0x67c>
   11520:	mov	r3, #512	; 0x200
   11524:	str	r3, [fp, #-40]	; 0xffffffd8
   11528:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   1152c:	strd	r2, [fp, #-52]	; 0xffffffcc
   11530:	ldrd	r6, [fp, #-196]	; 0xffffff3c
   11534:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11538:	mov	r8, r3
   1153c:	asr	r9, r8, #31
   11540:	mov	r2, #0
   11544:	mov	r3, #0
   11548:	strd	r2, [fp, #-228]	; 0xffffff1c
   1154c:	mov	r0, #0
   11550:	mov	r1, #0
   11554:	mov	r0, r7
   11558:	asr	r1, r7, #31
   1155c:	asr	ip, r6, #31
   11560:	mov	r2, #0
   11564:	mov	r3, #0
   11568:	mov	r2, r9
   1156c:	asr	r3, r9, #31
   11570:	cmp	ip, r0
   11574:	bne	11584 <__assert_fail@plt+0x6dc>
   11578:	smull	r2, r3, r6, r8
   1157c:	strd	r2, [fp, #-204]	; 0xffffff34
   11580:	b	116a0 <__assert_fail@plt+0x7f8>
   11584:	sub	r3, fp, #268	; 0x10c
   11588:	strd	r6, [r3]
   1158c:	mov	r1, r0
   11590:	mov	ip, r8
   11594:	umull	r2, r3, r6, r8
   11598:	strd	r2, [fp, #-236]	; 0xffffff14
   1159c:	umull	r2, r3, ip, r1
   115a0:	mov	r4, r2
   115a4:	mov	r5, r3
   115a8:	cmp	r1, #0
   115ac:	bge	115dc <__assert_fail@plt+0x734>
   115b0:	mov	r2, ip
   115b4:	mov	r3, #0
   115b8:	mov	r0, #0
   115bc:	mov	r1, #0
   115c0:	mov	r1, r2
   115c4:	mov	r0, #0
   115c8:	subs	r3, r4, r0
   115cc:	str	r3, [fp, #-244]	; 0xffffff0c
   115d0:	sbc	r3, r5, r1
   115d4:	str	r3, [fp, #-240]	; 0xffffff10
   115d8:	ldrd	r4, [fp, #-244]	; 0xffffff0c
   115dc:	cmp	ip, #0
   115e0:	bge	11604 <__assert_fail@plt+0x75c>
   115e4:	sub	r3, fp, #268	; 0x10c
   115e8:	ldrd	r2, [r3]
   115ec:	mov	r1, r2
   115f0:	subs	r1, r4, r1
   115f4:	str	r1, [fp, #-252]	; 0xffffff04
   115f8:	sbc	r3, r5, r3
   115fc:	str	r3, [fp, #-248]	; 0xffffff08
   11600:	ldrd	r4, [fp, #-252]	; 0xffffff04
   11604:	mov	r2, #0
   11608:	mov	r3, #0
   1160c:	ldr	r1, [fp, #-232]	; 0xffffff18
   11610:	mov	r2, r1
   11614:	mov	r3, #0
   11618:	adds	r1, r4, r2
   1161c:	str	r1, [fp, #-260]	; 0xfffffefc
   11620:	adc	r3, r5, r3
   11624:	str	r3, [fp, #-256]	; 0xffffff00
   11628:	sub	r3, fp, #260	; 0x104
   1162c:	ldrd	r4, [r3]
   11630:	mov	r2, #0
   11634:	mov	r3, #0
   11638:	mov	r2, r5
   1163c:	asr	r3, r5, #31
   11640:	asr	r1, r4, #31
   11644:	cmp	r1, r2
   11648:	bne	11678 <__assert_fail@plt+0x7d0>
   1164c:	mov	r2, #0
   11650:	mov	r3, #0
   11654:	mov	r3, r4
   11658:	mov	r2, #0
   1165c:	ldr	r0, [fp, #-236]	; 0xffffff14
   11660:	mov	r1, #0
   11664:	orr	ip, r2, r0
   11668:	str	ip, [fp, #-204]	; 0xffffff34
   1166c:	orr	r3, r3, r1
   11670:	str	r3, [fp, #-200]	; 0xffffff38
   11674:	b	116a0 <__assert_fail@plt+0x7f8>
   11678:	mul	r2, r8, r7
   1167c:	mul	r3, r6, r9
   11680:	add	r1, r2, r3
   11684:	umull	r2, r3, r6, r8
   11688:	add	r1, r1, r3
   1168c:	mov	r3, r1
   11690:	strd	r2, [fp, #-204]	; 0xffffff34
   11694:	mov	r2, #1
   11698:	mov	r3, #0
   1169c:	strd	r2, [fp, #-228]	; 0xffffff1c
   116a0:	ldrd	r2, [fp, #-204]	; 0xffffff34
   116a4:	strd	r2, [fp, #-196]	; 0xffffff3c
   116a8:	ldrd	r2, [fp, #-228]	; 0xffffff1c
   116ac:	mov	r3, r2
   116b0:	and	r3, r3, #1
   116b4:	uxtb	r3, r3
   116b8:	cmp	r3, #0
   116bc:	beq	1170c <__assert_fail@plt+0x864>
   116c0:	movw	r0, #34452	; 0x8694
   116c4:	movt	r0, #1
   116c8:	bl	10dc4 <gettext@plt>
   116cc:	mov	r4, r0
   116d0:	ldr	r1, [fp, #-188]	; 0xffffff44
   116d4:	mov	r0, #4
   116d8:	bl	14a7c <__assert_fail@plt+0x3bd4>
   116dc:	mov	r3, r0
   116e0:	str	r3, [sp, #12]
   116e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   116e8:	str	r3, [sp, #8]
   116ec:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   116f0:	strd	r2, [sp]
   116f4:	mov	r2, r4
   116f8:	mov	r1, #0
   116fc:	mov	r0, #0
   11700:	bl	10d58 <error@plt>
   11704:	mov	r3, #0
   11708:	b	11a20 <__assert_fail@plt+0xb78>
   1170c:	ldr	r3, [fp, #12]
   11710:	cmp	r3, #0
   11714:	beq	11988 <__assert_fail@plt+0xae0>
   11718:	ldrd	r2, [fp, #4]
   1171c:	cmp	r2, #0
   11720:	sbcs	r3, r3, #0
   11724:	blt	11734 <__assert_fail@plt+0x88c>
   11728:	ldrd	r2, [fp, #4]
   1172c:	strd	r2, [fp, #-36]	; 0xffffffdc
   11730:	b	1180c <__assert_fail@plt+0x964>
   11734:	sub	r3, fp, #172	; 0xac
   11738:	mov	r0, r3
   1173c:	bl	11220 <__assert_fail@plt+0x378>
   11740:	mov	r3, r0
   11744:	cmp	r3, #0
   11748:	beq	1179c <__assert_fail@plt+0x8f4>
   1174c:	ldrd	r2, [fp, #-124]	; 0xffffff84
   11750:	strd	r2, [fp, #-36]	; 0xffffffdc
   11754:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11758:	cmp	r2, #0
   1175c:	sbcs	r3, r3, #0
   11760:	bge	1180c <__assert_fail@plt+0x964>
   11764:	movw	r0, #34500	; 0x86c4
   11768:	movt	r0, #1
   1176c:	bl	10dc4 <gettext@plt>
   11770:	mov	r4, r0
   11774:	ldr	r1, [fp, #-188]	; 0xffffff44
   11778:	mov	r0, #4
   1177c:	bl	14a7c <__assert_fail@plt+0x3bd4>
   11780:	mov	r3, r0
   11784:	mov	r2, r4
   11788:	mov	r1, #0
   1178c:	mov	r0, #0
   11790:	bl	10d58 <error@plt>
   11794:	mov	r3, #0
   11798:	b	11a20 <__assert_fail@plt+0xb78>
   1179c:	mov	r3, #2
   117a0:	str	r3, [sp]
   117a4:	mov	r2, #0
   117a8:	mov	r3, #0
   117ac:	ldr	r0, [fp, #-184]	; 0xffffff48
   117b0:	bl	10d1c <lseek64@plt>
   117b4:	strd	r0, [fp, #-36]	; 0xffffffdc
   117b8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   117bc:	cmp	r2, #0
   117c0:	sbcs	r3, r3, #0
   117c4:	bge	1180c <__assert_fail@plt+0x964>
   117c8:	bl	10df4 <__errno_location@plt>
   117cc:	mov	r3, r0
   117d0:	ldr	r4, [r3]
   117d4:	movw	r0, #34544	; 0x86f0
   117d8:	movt	r0, #1
   117dc:	bl	10dc4 <gettext@plt>
   117e0:	mov	r5, r0
   117e4:	ldr	r1, [fp, #-188]	; 0xffffff44
   117e8:	mov	r0, #4
   117ec:	bl	14a7c <__assert_fail@plt+0x3bd4>
   117f0:	mov	r3, r0
   117f4:	mov	r2, r5
   117f8:	mov	r1, r4
   117fc:	mov	r0, #0
   11800:	bl	10d58 <error@plt>
   11804:	mov	r3, #0
   11808:	b	11a20 <__assert_fail@plt+0xb78>
   1180c:	ldr	r3, [fp, #12]
   11810:	cmp	r3, #2
   11814:	bne	1183c <__assert_fail@plt+0x994>
   11818:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   1181c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11820:	cmp	r2, r0
   11824:	sbcs	ip, r3, r1
   11828:	bge	11834 <__assert_fail@plt+0x98c>
   1182c:	mov	r2, r0
   11830:	mov	r3, r1
   11834:	strd	r2, [fp, #-180]	; 0xffffff4c
   11838:	b	11990 <__assert_fail@plt+0xae8>
   1183c:	ldr	r3, [fp, #12]
   11840:	cmp	r3, #3
   11844:	bne	1186c <__assert_fail@plt+0x9c4>
   11848:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   1184c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11850:	cmp	r0, r2
   11854:	sbcs	ip, r1, r3
   11858:	bge	11864 <__assert_fail@plt+0x9bc>
   1185c:	mov	r2, r0
   11860:	mov	r3, r1
   11864:	strd	r2, [fp, #-180]	; 0xffffff4c
   11868:	b	11990 <__assert_fail@plt+0xae8>
   1186c:	ldr	r3, [fp, #12]
   11870:	cmp	r3, #4
   11874:	bne	118ac <__assert_fail@plt+0xa04>
   11878:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   1187c:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11880:	bl	17cd4 <__assert_fail@plt+0x6e2c>
   11884:	mov	r0, r2
   11888:	mov	r1, r3
   1188c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11890:	subs	ip, r2, r0
   11894:	str	ip, [fp, #-220]	; 0xffffff24
   11898:	sbc	r3, r3, r1
   1189c:	str	r3, [fp, #-216]	; 0xffffff28
   118a0:	ldrd	r2, [fp, #-220]	; 0xffffff24
   118a4:	strd	r2, [fp, #-180]	; 0xffffff4c
   118a8:	b	11990 <__assert_fail@plt+0xae8>
   118ac:	ldr	r3, [fp, #12]
   118b0:	cmp	r3, #5
   118b4:	bne	11904 <__assert_fail@plt+0xa5c>
   118b8:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   118bc:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   118c0:	bl	17cd4 <__assert_fail@plt+0x6e2c>
   118c4:	strd	r2, [fp, #-60]	; 0xffffffc4
   118c8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   118cc:	orrs	r3, r2, r3
   118d0:	beq	118f0 <__assert_fail@plt+0xa48>
   118d4:	ldrd	r0, [fp, #-196]	; 0xffffff3c
   118d8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   118dc:	subs	ip, r0, r2
   118e0:	str	ip, [fp, #-212]	; 0xffffff2c
   118e4:	sbc	r3, r1, r3
   118e8:	str	r3, [fp, #-208]	; 0xffffff30
   118ec:	b	118fc <__assert_fail@plt+0xa54>
   118f0:	mov	r2, #0
   118f4:	mov	r3, #0
   118f8:	strd	r2, [fp, #-212]	; 0xffffff2c
   118fc:	ldrd	r2, [fp, #-212]	; 0xffffff2c
   11900:	strd	r2, [fp, #-196]	; 0xffffff3c
   11904:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   11908:	mov	r4, #0
   1190c:	mov	r5, #0
   11910:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11914:	adds	r6, r0, r2
   11918:	adcs	r7, r1, r3
   1191c:	bvc	11928 <__assert_fail@plt+0xa80>
   11920:	mov	r4, #1
   11924:	mov	r5, #0
   11928:	mov	r2, r6
   1192c:	mov	r3, r7
   11930:	strd	r2, [fp, #-180]	; 0xffffff4c
   11934:	mov	r2, r4
   11938:	mov	r3, r5
   1193c:	mov	r3, r2
   11940:	and	r3, r3, #1
   11944:	uxtb	r3, r3
   11948:	cmp	r3, #0
   1194c:	beq	11990 <__assert_fail@plt+0xae8>
   11950:	movw	r0, #34572	; 0x870c
   11954:	movt	r0, #1
   11958:	bl	10dc4 <gettext@plt>
   1195c:	mov	r4, r0
   11960:	ldr	r1, [fp, #-188]	; 0xffffff44
   11964:	mov	r0, #4
   11968:	bl	14a7c <__assert_fail@plt+0x3bd4>
   1196c:	mov	r3, r0
   11970:	mov	r2, r4
   11974:	mov	r1, #0
   11978:	mov	r0, #0
   1197c:	bl	10d58 <error@plt>
   11980:	mov	r3, #0
   11984:	b	11a20 <__assert_fail@plt+0xb78>
   11988:	ldrd	r2, [fp, #-196]	; 0xffffff3c
   1198c:	strd	r2, [fp, #-180]	; 0xffffff4c
   11990:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11994:	cmp	r2, #0
   11998:	sbcs	r3, r3, #0
   1199c:	bge	119ac <__assert_fail@plt+0xb04>
   119a0:	mov	r2, #0
   119a4:	mov	r3, #0
   119a8:	strd	r2, [fp, #-180]	; 0xffffff4c
   119ac:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   119b0:	ldr	r0, [fp, #-184]	; 0xffffff48
   119b4:	bl	10cbc <ftruncate64@plt>
   119b8:	mov	r3, r0
   119bc:	cmp	r3, #0
   119c0:	beq	11a1c <__assert_fail@plt+0xb74>
   119c4:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   119c8:	strd	r2, [fp, #-68]	; 0xffffffbc
   119cc:	bl	10df4 <__errno_location@plt>
   119d0:	mov	r3, r0
   119d4:	ldr	r4, [r3]
   119d8:	movw	r0, #34608	; 0x8730
   119dc:	movt	r0, #1
   119e0:	bl	10dc4 <gettext@plt>
   119e4:	mov	r5, r0
   119e8:	ldr	r1, [fp, #-188]	; 0xffffff44
   119ec:	mov	r0, #4
   119f0:	bl	14a7c <__assert_fail@plt+0x3bd4>
   119f4:	mov	r1, r0
   119f8:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   119fc:	strd	r2, [sp]
   11a00:	mov	r3, r1
   11a04:	mov	r2, r5
   11a08:	mov	r1, r4
   11a0c:	mov	r0, #0
   11a10:	bl	10d58 <error@plt>
   11a14:	mov	r3, #0
   11a18:	b	11a20 <__assert_fail@plt+0xb78>
   11a1c:	mov	r3, #1
   11a20:	mov	r0, r3
   11a24:	sub	sp, fp, #28
   11a28:	ldrd	r4, [sp]
   11a2c:	ldrd	r6, [sp, #8]
   11a30:	ldrd	r8, [sp, #16]
   11a34:	ldr	fp, [sp, #24]
   11a38:	add	sp, sp, #28
   11a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11a40:	strd	r4, [sp, #-16]!
   11a44:	str	fp, [sp, #8]
   11a48:	str	lr, [sp, #12]
   11a4c:	add	fp, sp, #12
   11a50:	sub	sp, sp, #216	; 0xd8
   11a54:	str	r0, [fp, #-200]	; 0xffffff38
   11a58:	str	r1, [fp, #-204]	; 0xffffff34
   11a5c:	mov	r3, #0
   11a60:	strb	r3, [fp, #-13]
   11a64:	mov	r2, #0
   11a68:	mov	r3, #0
   11a6c:	strd	r2, [fp, #-28]	; 0xffffffe4
   11a70:	mvn	r2, #0
   11a74:	mvn	r3, #0
   11a78:	strd	r2, [fp, #-36]	; 0xffffffdc
   11a7c:	mov	r3, #0
   11a80:	str	r3, [fp, #-40]	; 0xffffffd8
   11a84:	ldr	r3, [fp, #-204]	; 0xffffff34
   11a88:	ldr	r3, [r3]
   11a8c:	mov	r0, r3
   11a90:	bl	125fc <__assert_fail@plt+0x1754>
   11a94:	movw	r1, #33184	; 0x81a0
   11a98:	movt	r1, #1
   11a9c:	mov	r0, #6
   11aa0:	bl	10e48 <setlocale@plt>
   11aa4:	movw	r1, #34644	; 0x8754
   11aa8:	movt	r1, #1
   11aac:	movw	r0, #33208	; 0x81b8
   11ab0:	movt	r0, #1
   11ab4:	bl	10e6c <bindtextdomain@plt>
   11ab8:	movw	r0, #33208	; 0x81b8
   11abc:	movt	r0, #1
   11ac0:	bl	10cec <textdomain@plt>
   11ac4:	movw	r0, #9388	; 0x24ac
   11ac8:	movt	r0, #1
   11acc:	bl	17f44 <__assert_fail@plt+0x709c>
   11ad0:	b	11ec4 <__assert_fail@plt+0x101c>
   11ad4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ad8:	cmp	r3, #99	; 0x63
   11adc:	beq	11b30 <__assert_fail@plt+0xc88>
   11ae0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ae4:	cmp	r3, #99	; 0x63
   11ae8:	bgt	11b08 <__assert_fail@plt+0xc60>
   11aec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11af0:	cmn	r3, #3
   11af4:	beq	11e70 <__assert_fail@plt+0xfc8>
   11af8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11afc:	cmn	r3, #2
   11b00:	beq	11e68 <__assert_fail@plt+0xfc0>
   11b04:	b	11ebc <__assert_fail@plt+0x1014>
   11b08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11b0c:	cmp	r3, #114	; 0x72
   11b10:	beq	11b58 <__assert_fail@plt+0xcb0>
   11b14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11b18:	cmp	r3, #115	; 0x73
   11b1c:	beq	11b90 <__assert_fail@plt+0xce8>
   11b20:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11b24:	cmp	r3, #111	; 0x6f
   11b28:	beq	11b44 <__assert_fail@plt+0xc9c>
   11b2c:	b	11ebc <__assert_fail@plt+0x1014>
   11b30:	movw	r3, #37200	; 0x9150
   11b34:	movt	r3, #2
   11b38:	mov	r2, #1
   11b3c:	strb	r2, [r3]
   11b40:	b	11ec4 <__assert_fail@plt+0x101c>
   11b44:	movw	r3, #37201	; 0x9151
   11b48:	movt	r3, #2
   11b4c:	mov	r2, #1
   11b50:	strb	r2, [r3]
   11b54:	b	11ec4 <__assert_fail@plt+0x101c>
   11b58:	movw	r3, #37192	; 0x9148
   11b5c:	movt	r3, #2
   11b60:	ldr	r2, [r3]
   11b64:	movw	r3, #37204	; 0x9154
   11b68:	movt	r3, #2
   11b6c:	str	r2, [r3]
   11b70:	b	11ec4 <__assert_fail@plt+0x101c>
   11b74:	movw	r3, #37192	; 0x9148
   11b78:	movt	r3, #2
   11b7c:	ldr	r3, [r3]
   11b80:	add	r2, r3, #1
   11b84:	movw	r3, #37192	; 0x9148
   11b88:	movt	r3, #2
   11b8c:	str	r2, [r3]
   11b90:	bl	10dac <__ctype_b_loc@plt>
   11b94:	mov	r3, r0
   11b98:	ldr	r4, [r3]
   11b9c:	movw	r3, #37192	; 0x9148
   11ba0:	movt	r3, #2
   11ba4:	ldr	r3, [r3]
   11ba8:	ldrb	r3, [r3]
   11bac:	mov	r0, r3
   11bb0:	bl	10fa4 <__assert_fail@plt+0xfc>
   11bb4:	mov	r3, r0
   11bb8:	lsl	r3, r3, #1
   11bbc:	add	r3, r4, r3
   11bc0:	ldrh	r3, [r3]
   11bc4:	and	r3, r3, #8192	; 0x2000
   11bc8:	cmp	r3, #0
   11bcc:	bne	11b74 <__assert_fail@plt+0xccc>
   11bd0:	movw	r3, #37192	; 0x9148
   11bd4:	movt	r3, #2
   11bd8:	ldr	r3, [r3]
   11bdc:	ldrb	r3, [r3]
   11be0:	sub	r3, r3, #37	; 0x25
   11be4:	cmp	r3, #25
   11be8:	ldrls	pc, [pc, r3, lsl #2]
   11bec:	b	11d18 <__assert_fail@plt+0xe70>
   11bf0:	ldrdeq	r1, [r1], -r0
   11bf4:	andeq	r1, r1, r8, lsl sp
   11bf8:	andeq	r1, r1, r8, lsl sp
   11bfc:	andeq	r1, r1, r8, lsl sp
   11c00:	andeq	r1, r1, r8, lsl sp
   11c04:	andeq	r1, r1, r8, lsl sp
   11c08:	andeq	r1, r1, r8, lsl sp
   11c0c:	andeq	r1, r1, r8, lsl sp
   11c10:	andeq	r1, r1, r8, lsl sp
   11c14:	andeq	r1, r1, r8, lsl sp
   11c18:	andeq	r1, r1, r8, lsr #25
   11c1c:	andeq	r1, r1, r8, lsl sp
   11c20:	andeq	r1, r1, r8, lsl sp
   11c24:	andeq	r1, r1, r8, lsl sp
   11c28:	andeq	r1, r1, r8, lsl sp
   11c2c:	andeq	r1, r1, r8, lsl sp
   11c30:	andeq	r1, r1, r8, lsl sp
   11c34:	andeq	r1, r1, r8, lsl sp
   11c38:	andeq	r1, r1, r8, lsl sp
   11c3c:	andeq	r1, r1, r8, lsl sp
   11c40:	andeq	r1, r1, r8, lsl sp
   11c44:	andeq	r1, r1, r8, lsl sp
   11c48:	andeq	r1, r1, r8, lsl sp
   11c4c:	andeq	r1, r1, r8, asr ip
   11c50:	andeq	r1, r1, r8, lsl sp
   11c54:	andeq	r1, r1, r0, lsl #25
   11c58:	mov	r3, #3
   11c5c:	str	r3, [fp, #-40]	; 0xffffffd8
   11c60:	movw	r3, #37192	; 0x9148
   11c64:	movt	r3, #2
   11c68:	ldr	r3, [r3]
   11c6c:	add	r2, r3, #1
   11c70:	movw	r3, #37192	; 0x9148
   11c74:	movt	r3, #2
   11c78:	str	r2, [r3]
   11c7c:	b	11cf8 <__assert_fail@plt+0xe50>
   11c80:	mov	r3, #2
   11c84:	str	r3, [fp, #-40]	; 0xffffffd8
   11c88:	movw	r3, #37192	; 0x9148
   11c8c:	movt	r3, #2
   11c90:	ldr	r3, [r3]
   11c94:	add	r2, r3, #1
   11c98:	movw	r3, #37192	; 0x9148
   11c9c:	movt	r3, #2
   11ca0:	str	r2, [r3]
   11ca4:	b	11cf8 <__assert_fail@plt+0xe50>
   11ca8:	mov	r3, #4
   11cac:	str	r3, [fp, #-40]	; 0xffffffd8
   11cb0:	movw	r3, #37192	; 0x9148
   11cb4:	movt	r3, #2
   11cb8:	ldr	r3, [r3]
   11cbc:	add	r2, r3, #1
   11cc0:	movw	r3, #37192	; 0x9148
   11cc4:	movt	r3, #2
   11cc8:	str	r2, [r3]
   11ccc:	b	11cf8 <__assert_fail@plt+0xe50>
   11cd0:	mov	r3, #5
   11cd4:	str	r3, [fp, #-40]	; 0xffffffd8
   11cd8:	movw	r3, #37192	; 0x9148
   11cdc:	movt	r3, #2
   11ce0:	ldr	r3, [r3]
   11ce4:	add	r2, r3, #1
   11ce8:	movw	r3, #37192	; 0x9148
   11cec:	movt	r3, #2
   11cf0:	str	r2, [r3]
   11cf4:	nop	{0}
   11cf8:	b	11d18 <__assert_fail@plt+0xe70>
   11cfc:	movw	r3, #37192	; 0x9148
   11d00:	movt	r3, #2
   11d04:	ldr	r3, [r3]
   11d08:	add	r2, r3, #1
   11d0c:	movw	r3, #37192	; 0x9148
   11d10:	movt	r3, #2
   11d14:	str	r2, [r3]
   11d18:	bl	10dac <__ctype_b_loc@plt>
   11d1c:	mov	r3, r0
   11d20:	ldr	r4, [r3]
   11d24:	movw	r3, #37192	; 0x9148
   11d28:	movt	r3, #2
   11d2c:	ldr	r3, [r3]
   11d30:	ldrb	r3, [r3]
   11d34:	mov	r0, r3
   11d38:	bl	10fa4 <__assert_fail@plt+0xfc>
   11d3c:	mov	r3, r0
   11d40:	lsl	r3, r3, #1
   11d44:	add	r3, r4, r3
   11d48:	ldrh	r3, [r3]
   11d4c:	and	r3, r3, #8192	; 0x2000
   11d50:	cmp	r3, #0
   11d54:	bne	11cfc <__assert_fail@plt+0xe54>
   11d58:	movw	r3, #37192	; 0x9148
   11d5c:	movt	r3, #2
   11d60:	ldr	r3, [r3]
   11d64:	ldrb	r3, [r3]
   11d68:	cmp	r3, #43	; 0x2b
   11d6c:	beq	11d88 <__assert_fail@plt+0xee0>
   11d70:	movw	r3, #37192	; 0x9148
   11d74:	movt	r3, #2
   11d78:	ldr	r3, [r3]
   11d7c:	ldrb	r3, [r3]
   11d80:	cmp	r3, #45	; 0x2d
   11d84:	bne	11dc4 <__assert_fail@plt+0xf1c>
   11d88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11d8c:	cmp	r3, #0
   11d90:	beq	11dbc <__assert_fail@plt+0xf14>
   11d94:	movw	r0, #34668	; 0x876c
   11d98:	movt	r0, #1
   11d9c:	bl	10dc4 <gettext@plt>
   11da0:	mov	r3, r0
   11da4:	mov	r2, r3
   11da8:	mov	r1, #0
   11dac:	mov	r0, #0
   11db0:	bl	10d58 <error@plt>
   11db4:	mov	r0, #1
   11db8:	bl	1127c <__assert_fail@plt+0x3d4>
   11dbc:	mov	r3, #1
   11dc0:	str	r3, [fp, #-40]	; 0xffffffd8
   11dc4:	movw	r3, #37192	; 0x9148
   11dc8:	movt	r3, #2
   11dcc:	ldr	r4, [r3]
   11dd0:	movw	r0, #34708	; 0x8794
   11dd4:	movt	r0, #1
   11dd8:	bl	10dc4 <gettext@plt>
   11ddc:	mov	r2, r0
   11de0:	mov	r3, #0
   11de4:	str	r3, [sp, #16]
   11de8:	str	r2, [sp, #12]
   11dec:	movw	r3, #34724	; 0x87a4
   11df0:	movt	r3, #1
   11df4:	str	r3, [sp, #8]
   11df8:	mvn	r2, #0
   11dfc:	mvn	r3, #-2147483648	; 0x80000000
   11e00:	strd	r2, [sp]
   11e04:	mov	r2, #0
   11e08:	mov	r3, #-2147483648	; 0x80000000
   11e0c:	mov	r0, r4
   11e10:	bl	16258 <__assert_fail@plt+0x53b0>
   11e14:	strd	r0, [fp, #-28]	; 0xffffffe4
   11e18:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e1c:	cmp	r3, #5
   11e20:	beq	11e30 <__assert_fail@plt+0xf88>
   11e24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e28:	cmp	r3, #4
   11e2c:	bne	11e5c <__assert_fail@plt+0xfb4>
   11e30:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11e34:	orrs	r3, r2, r3
   11e38:	bne	11e5c <__assert_fail@plt+0xfb4>
   11e3c:	movw	r0, #34740	; 0x87b4
   11e40:	movt	r0, #1
   11e44:	bl	10dc4 <gettext@plt>
   11e48:	mov	r3, r0
   11e4c:	mov	r2, r3
   11e50:	mov	r1, #0
   11e54:	mov	r0, #1
   11e58:	bl	10d58 <error@plt>
   11e5c:	mov	r3, #1
   11e60:	strb	r3, [fp, #-13]
   11e64:	b	11ec4 <__assert_fail@plt+0x101c>
   11e68:	mov	r0, #0
   11e6c:	bl	1127c <__assert_fail@plt+0x3d4>
   11e70:	movw	r3, #37188	; 0x9144
   11e74:	movt	r3, #2
   11e78:	ldr	r0, [r3]
   11e7c:	movw	r3, #37096	; 0x90e8
   11e80:	movt	r3, #2
   11e84:	ldr	r2, [r3]
   11e88:	mov	r3, #0
   11e8c:	str	r3, [sp, #4]
   11e90:	movw	r3, #34760	; 0x87c8
   11e94:	movt	r3, #1
   11e98:	str	r3, [sp]
   11e9c:	mov	r3, r2
   11ea0:	movw	r2, #33000	; 0x80e8
   11ea4:	movt	r2, #1
   11ea8:	movw	r1, #34424	; 0x8678
   11eac:	movt	r1, #1
   11eb0:	bl	15664 <__assert_fail@plt+0x47bc>
   11eb4:	mov	r0, #0
   11eb8:	bl	10db8 <exit@plt>
   11ebc:	mov	r0, #1
   11ec0:	bl	1127c <__assert_fail@plt+0x3d4>
   11ec4:	mov	r3, #0
   11ec8:	str	r3, [sp]
   11ecc:	movw	r3, #33424	; 0x8290
   11ed0:	movt	r3, #1
   11ed4:	movw	r2, #34776	; 0x87d8
   11ed8:	movt	r2, #1
   11edc:	ldr	r1, [fp, #-204]	; 0xffffff34
   11ee0:	ldr	r0, [fp, #-200]	; 0xffffff38
   11ee4:	bl	10da0 <getopt_long@plt>
   11ee8:	str	r0, [fp, #-60]	; 0xffffffc4
   11eec:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11ef0:	cmn	r3, #1
   11ef4:	bne	11ad4 <__assert_fail@plt+0xc2c>
   11ef8:	movw	r3, #37176	; 0x9138
   11efc:	movt	r3, #2
   11f00:	ldr	r3, [r3]
   11f04:	lsl	r3, r3, #2
   11f08:	ldr	r2, [fp, #-204]	; 0xffffff34
   11f0c:	add	r3, r2, r3
   11f10:	str	r3, [fp, #-204]	; 0xffffff34
   11f14:	movw	r3, #37176	; 0x9138
   11f18:	movt	r3, #2
   11f1c:	ldr	r3, [r3]
   11f20:	ldr	r2, [fp, #-200]	; 0xffffff38
   11f24:	sub	r3, r2, r3
   11f28:	str	r3, [fp, #-200]	; 0xffffff38
   11f2c:	movw	r3, #37204	; 0x9154
   11f30:	movt	r3, #2
   11f34:	ldr	r3, [r3]
   11f38:	cmp	r3, #0
   11f3c:	bne	11fac <__assert_fail@plt+0x1104>
   11f40:	ldrb	r3, [fp, #-13]
   11f44:	eor	r3, r3, #1
   11f48:	uxtb	r3, r3
   11f4c:	cmp	r3, #0
   11f50:	beq	11fac <__assert_fail@plt+0x1104>
   11f54:	movw	r0, #34784	; 0x87e0
   11f58:	movt	r0, #1
   11f5c:	bl	10dc4 <gettext@plt>
   11f60:	mov	r4, r0
   11f64:	movw	r1, #34820	; 0x8804
   11f68:	movt	r1, #1
   11f6c:	mov	r0, #0
   11f70:	bl	14f1c <__assert_fail@plt+0x4074>
   11f74:	mov	r5, r0
   11f78:	movw	r1, #34828	; 0x880c
   11f7c:	movt	r1, #1
   11f80:	mov	r0, #1
   11f84:	bl	14f1c <__assert_fail@plt+0x4074>
   11f88:	mov	r3, r0
   11f8c:	str	r3, [sp]
   11f90:	mov	r3, r5
   11f94:	mov	r2, r4
   11f98:	mov	r1, #0
   11f9c:	mov	r0, #0
   11fa0:	bl	10d58 <error@plt>
   11fa4:	mov	r0, #1
   11fa8:	bl	1127c <__assert_fail@plt+0x3d4>
   11fac:	movw	r3, #37204	; 0x9154
   11fb0:	movt	r3, #2
   11fb4:	ldr	r3, [r3]
   11fb8:	cmp	r3, #0
   11fbc:	beq	12030 <__assert_fail@plt+0x1188>
   11fc0:	ldrb	r3, [fp, #-13]
   11fc4:	cmp	r3, #0
   11fc8:	beq	12030 <__assert_fail@plt+0x1188>
   11fcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11fd0:	cmp	r3, #0
   11fd4:	bne	12030 <__assert_fail@plt+0x1188>
   11fd8:	movw	r0, #34840	; 0x8818
   11fdc:	movt	r0, #1
   11fe0:	bl	10dc4 <gettext@plt>
   11fe4:	mov	r4, r0
   11fe8:	movw	r1, #34820	; 0x8804
   11fec:	movt	r1, #1
   11ff0:	mov	r0, #0
   11ff4:	bl	14f1c <__assert_fail@plt+0x4074>
   11ff8:	mov	r5, r0
   11ffc:	movw	r1, #34828	; 0x880c
   12000:	movt	r1, #1
   12004:	mov	r0, #1
   12008:	bl	14f1c <__assert_fail@plt+0x4074>
   1200c:	mov	r3, r0
   12010:	str	r3, [sp]
   12014:	mov	r3, r5
   12018:	mov	r2, r4
   1201c:	mov	r1, #0
   12020:	mov	r0, #0
   12024:	bl	10d58 <error@plt>
   12028:	mov	r0, #1
   1202c:	bl	1127c <__assert_fail@plt+0x3d4>
   12030:	movw	r3, #37201	; 0x9151
   12034:	movt	r3, #2
   12038:	ldrb	r3, [r3]
   1203c:	cmp	r3, #0
   12040:	beq	120b0 <__assert_fail@plt+0x1208>
   12044:	ldrb	r3, [fp, #-13]
   12048:	eor	r3, r3, #1
   1204c:	uxtb	r3, r3
   12050:	cmp	r3, #0
   12054:	beq	120b0 <__assert_fail@plt+0x1208>
   12058:	movw	r0, #34880	; 0x8840
   1205c:	movt	r0, #1
   12060:	bl	10dc4 <gettext@plt>
   12064:	mov	r4, r0
   12068:	movw	r1, #34912	; 0x8860
   1206c:	movt	r1, #1
   12070:	mov	r0, #0
   12074:	bl	14f1c <__assert_fail@plt+0x4074>
   12078:	mov	r5, r0
   1207c:	movw	r1, #34820	; 0x8804
   12080:	movt	r1, #1
   12084:	mov	r0, #1
   12088:	bl	14f1c <__assert_fail@plt+0x4074>
   1208c:	mov	r3, r0
   12090:	str	r3, [sp]
   12094:	mov	r3, r5
   12098:	mov	r2, r4
   1209c:	mov	r1, #0
   120a0:	mov	r0, #0
   120a4:	bl	10d58 <error@plt>
   120a8:	mov	r0, #1
   120ac:	bl	1127c <__assert_fail@plt+0x3d4>
   120b0:	ldr	r3, [fp, #-200]	; 0xffffff38
   120b4:	cmp	r3, #0
   120b8:	bgt	120e4 <__assert_fail@plt+0x123c>
   120bc:	movw	r0, #34924	; 0x886c
   120c0:	movt	r0, #1
   120c4:	bl	10dc4 <gettext@plt>
   120c8:	mov	r3, r0
   120cc:	mov	r2, r3
   120d0:	mov	r1, #0
   120d4:	mov	r0, #0
   120d8:	bl	10d58 <error@plt>
   120dc:	mov	r0, #1
   120e0:	bl	1127c <__assert_fail@plt+0x3d4>
   120e4:	movw	r3, #37204	; 0x9154
   120e8:	movt	r3, #2
   120ec:	ldr	r3, [r3]
   120f0:	cmp	r3, #0
   120f4:	beq	122a0 <__assert_fail@plt+0x13f8>
   120f8:	mvn	r2, #0
   120fc:	mvn	r3, #0
   12100:	strd	r2, [fp, #-52]	; 0xffffffcc
   12104:	movw	r3, #37204	; 0x9154
   12108:	movt	r3, #2
   1210c:	ldr	r3, [r3]
   12110:	sub	r2, fp, #196	; 0xc4
   12114:	mov	r1, r2
   12118:	mov	r0, r3
   1211c:	bl	17f5c <__assert_fail@plt+0x70b4>
   12120:	mov	r3, r0
   12124:	cmp	r3, #0
   12128:	beq	12174 <__assert_fail@plt+0x12cc>
   1212c:	bl	10df4 <__errno_location@plt>
   12130:	mov	r3, r0
   12134:	ldr	r4, [r3]
   12138:	movw	r0, #34948	; 0x8884
   1213c:	movt	r0, #1
   12140:	bl	10dc4 <gettext@plt>
   12144:	mov	r5, r0
   12148:	movw	r3, #37204	; 0x9154
   1214c:	movt	r3, #2
   12150:	ldr	r3, [r3]
   12154:	mov	r1, r3
   12158:	mov	r0, #4
   1215c:	bl	14a7c <__assert_fail@plt+0x3bd4>
   12160:	mov	r3, r0
   12164:	mov	r2, r5
   12168:	mov	r1, r4
   1216c:	mov	r0, #1
   12170:	bl	10d58 <error@plt>
   12174:	sub	r3, fp, #196	; 0xc4
   12178:	mov	r0, r3
   1217c:	bl	11220 <__assert_fail@plt+0x378>
   12180:	mov	r3, r0
   12184:	cmp	r3, #0
   12188:	beq	12198 <__assert_fail@plt+0x12f0>
   1218c:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   12190:	strd	r2, [fp, #-52]	; 0xffffffcc
   12194:	b	12220 <__assert_fail@plt+0x1378>
   12198:	movw	r3, #37204	; 0x9154
   1219c:	movt	r3, #2
   121a0:	ldr	r3, [r3]
   121a4:	mov	r1, #0
   121a8:	mov	r0, r3
   121ac:	bl	10d64 <open64@plt>
   121b0:	str	r0, [fp, #-64]	; 0xffffffc0
   121b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   121b8:	cmp	r3, #0
   121bc:	blt	12220 <__assert_fail@plt+0x1378>
   121c0:	mov	r3, #2
   121c4:	str	r3, [sp]
   121c8:	mov	r2, #0
   121cc:	mov	r3, #0
   121d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121d4:	bl	10d1c <lseek64@plt>
   121d8:	strd	r0, [fp, #-76]	; 0xffffffb4
   121dc:	bl	10df4 <__errno_location@plt>
   121e0:	mov	r3, r0
   121e4:	ldr	r3, [r3]
   121e8:	str	r3, [fp, #-80]	; 0xffffffb0
   121ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121f0:	bl	10e9c <close@plt>
   121f4:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   121f8:	cmp	r2, #0
   121fc:	sbcs	r3, r3, #0
   12200:	blt	12210 <__assert_fail@plt+0x1368>
   12204:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   12208:	strd	r2, [fp, #-52]	; 0xffffffcc
   1220c:	b	12220 <__assert_fail@plt+0x1378>
   12210:	bl	10df4 <__errno_location@plt>
   12214:	mov	r2, r0
   12218:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1221c:	str	r3, [r2]
   12220:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12224:	cmp	r2, #0
   12228:	sbcs	r3, r3, #0
   1222c:	bge	12278 <__assert_fail@plt+0x13d0>
   12230:	bl	10df4 <__errno_location@plt>
   12234:	mov	r3, r0
   12238:	ldr	r4, [r3]
   1223c:	movw	r0, #34544	; 0x86f0
   12240:	movt	r0, #1
   12244:	bl	10dc4 <gettext@plt>
   12248:	mov	r5, r0
   1224c:	movw	r3, #37204	; 0x9154
   12250:	movt	r3, #2
   12254:	ldr	r3, [r3]
   12258:	mov	r1, r3
   1225c:	mov	r0, #4
   12260:	bl	14a7c <__assert_fail@plt+0x3bd4>
   12264:	mov	r3, r0
   12268:	mov	r2, r5
   1226c:	mov	r1, r4
   12270:	mov	r0, #1
   12274:	bl	10d58 <error@plt>
   12278:	ldrb	r3, [fp, #-13]
   1227c:	eor	r3, r3, #1
   12280:	uxtb	r3, r3
   12284:	cmp	r3, #0
   12288:	beq	12298 <__assert_fail@plt+0x13f0>
   1228c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12290:	strd	r2, [fp, #-28]	; 0xffffffe4
   12294:	b	122a0 <__assert_fail@plt+0x13f8>
   12298:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1229c:	strd	r2, [fp, #-36]	; 0xffffffdc
   122a0:	movw	r3, #37200	; 0x9150
   122a4:	movt	r3, #2
   122a8:	ldrb	r3, [r3]
   122ac:	cmp	r3, #0
   122b0:	beq	122bc <__assert_fail@plt+0x1414>
   122b4:	movw	r3, #2049	; 0x801
   122b8:	b	122c0 <__assert_fail@plt+0x1418>
   122bc:	movw	r3, #2113	; 0x841
   122c0:	str	r3, [fp, #-84]	; 0xffffffac
   122c4:	mov	r3, #0
   122c8:	strb	r3, [fp, #-53]	; 0xffffffcb
   122cc:	b	12414 <__assert_fail@plt+0x156c>
   122d0:	movw	r2, #438	; 0x1b6
   122d4:	ldr	r1, [fp, #-84]	; 0xffffffac
   122d8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   122dc:	bl	10d64 <open64@plt>
   122e0:	str	r0, [fp, #-92]	; 0xffffffa4
   122e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   122e8:	cmp	r3, #0
   122ec:	bge	12368 <__assert_fail@plt+0x14c0>
   122f0:	movw	r3, #37200	; 0x9150
   122f4:	movt	r3, #2
   122f8:	ldrb	r3, [r3]
   122fc:	eor	r3, r3, #1
   12300:	uxtb	r3, r3
   12304:	cmp	r3, #0
   12308:	bne	12320 <__assert_fail@plt+0x1478>
   1230c:	bl	10df4 <__errno_location@plt>
   12310:	mov	r3, r0
   12314:	ldr	r3, [r3]
   12318:	cmp	r3, #2
   1231c:	beq	12408 <__assert_fail@plt+0x1560>
   12320:	bl	10df4 <__errno_location@plt>
   12324:	mov	r3, r0
   12328:	ldr	r4, [r3]
   1232c:	movw	r0, #34964	; 0x8894
   12330:	movt	r0, #1
   12334:	bl	10dc4 <gettext@plt>
   12338:	mov	r5, r0
   1233c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12340:	mov	r0, #4
   12344:	bl	14a7c <__assert_fail@plt+0x3bd4>
   12348:	mov	r3, r0
   1234c:	mov	r2, r5
   12350:	mov	r1, r4
   12354:	mov	r0, #0
   12358:	bl	10d58 <error@plt>
   1235c:	mov	r3, #1
   12360:	strb	r3, [fp, #-53]	; 0xffffffcb
   12364:	b	12408 <__assert_fail@plt+0x1560>
   12368:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1236c:	str	r3, [sp, #8]
   12370:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   12374:	strd	r2, [sp]
   12378:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1237c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12380:	ldr	r0, [fp, #-92]	; 0xffffffa4
   12384:	bl	11434 <__assert_fail@plt+0x58c>
   12388:	mov	r3, r0
   1238c:	eor	r3, r3, #1
   12390:	uxtb	r3, r3
   12394:	mov	r2, r3
   12398:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   1239c:	orr	r3, r2, r3
   123a0:	cmp	r3, #0
   123a4:	movne	r3, #1
   123a8:	moveq	r3, #0
   123ac:	strb	r3, [fp, #-53]	; 0xffffffcb
   123b0:	ldr	r0, [fp, #-92]	; 0xffffffa4
   123b4:	bl	10e9c <close@plt>
   123b8:	mov	r3, r0
   123bc:	cmp	r3, #0
   123c0:	beq	12408 <__assert_fail@plt+0x1560>
   123c4:	bl	10df4 <__errno_location@plt>
   123c8:	mov	r3, r0
   123cc:	ldr	r4, [r3]
   123d0:	movw	r0, #34992	; 0x88b0
   123d4:	movt	r0, #1
   123d8:	bl	10dc4 <gettext@plt>
   123dc:	mov	r5, r0
   123e0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   123e4:	mov	r0, #4
   123e8:	bl	14a7c <__assert_fail@plt+0x3bd4>
   123ec:	mov	r3, r0
   123f0:	mov	r2, r5
   123f4:	mov	r1, r4
   123f8:	mov	r0, #0
   123fc:	bl	10d58 <error@plt>
   12400:	mov	r3, #1
   12404:	strb	r3, [fp, #-53]	; 0xffffffcb
   12408:	ldr	r3, [fp, #-204]	; 0xffffff34
   1240c:	add	r3, r3, #4
   12410:	str	r3, [fp, #-204]	; 0xffffff34
   12414:	ldr	r3, [fp, #-204]	; 0xffffff34
   12418:	ldr	r3, [r3]
   1241c:	str	r3, [fp, #-88]	; 0xffffffa8
   12420:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12424:	cmp	r3, #0
   12428:	bne	122d0 <__assert_fail@plt+0x1428>
   1242c:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   12430:	mov	r0, r3
   12434:	sub	sp, fp, #12
   12438:	ldrd	r4, [sp]
   1243c:	ldr	fp, [sp, #8]
   12440:	add	sp, sp, #12
   12444:	pop	{pc}		; (ldr pc, [sp], #4)
   12448:	push	{fp}		; (str fp, [sp, #-4]!)
   1244c:	add	fp, sp, #0
   12450:	sub	sp, sp, #12
   12454:	str	r0, [fp, #-8]
   12458:	movw	r3, #37208	; 0x9158
   1245c:	movt	r3, #2
   12460:	ldr	r2, [fp, #-8]
   12464:	str	r2, [r3]
   12468:	nop	{0}
   1246c:	add	sp, fp, #0
   12470:	pop	{fp}		; (ldr fp, [sp], #4)
   12474:	bx	lr
   12478:	push	{fp}		; (str fp, [sp, #-4]!)
   1247c:	add	fp, sp, #0
   12480:	sub	sp, sp, #12
   12484:	mov	r3, r0
   12488:	strb	r3, [fp, #-5]
   1248c:	movw	r3, #37212	; 0x915c
   12490:	movt	r3, #2
   12494:	ldrb	r2, [fp, #-5]
   12498:	strb	r2, [r3]
   1249c:	nop	{0}
   124a0:	add	sp, fp, #0
   124a4:	pop	{fp}		; (ldr fp, [sp], #4)
   124a8:	bx	lr
   124ac:	str	r4, [sp, #-12]!
   124b0:	str	fp, [sp, #4]
   124b4:	str	lr, [sp, #8]
   124b8:	add	fp, sp, #8
   124bc:	sub	sp, sp, #20
   124c0:	movw	r3, #37188	; 0x9144
   124c4:	movt	r3, #2
   124c8:	ldr	r3, [r3]
   124cc:	mov	r0, r3
   124d0:	bl	16df4 <__assert_fail@plt+0x5f4c>
   124d4:	mov	r3, r0
   124d8:	cmp	r3, #0
   124dc:	beq	125b0 <__assert_fail@plt+0x1708>
   124e0:	movw	r3, #37212	; 0x915c
   124e4:	movt	r3, #2
   124e8:	ldrb	r3, [r3]
   124ec:	eor	r3, r3, #1
   124f0:	uxtb	r3, r3
   124f4:	cmp	r3, #0
   124f8:	bne	12510 <__assert_fail@plt+0x1668>
   124fc:	bl	10df4 <__errno_location@plt>
   12500:	mov	r3, r0
   12504:	ldr	r3, [r3]
   12508:	cmp	r3, #32
   1250c:	beq	125b0 <__assert_fail@plt+0x1708>
   12510:	movw	r0, #35028	; 0x88d4
   12514:	movt	r0, #1
   12518:	bl	10dc4 <gettext@plt>
   1251c:	str	r0, [fp, #-16]
   12520:	movw	r3, #37208	; 0x9158
   12524:	movt	r3, #2
   12528:	ldr	r3, [r3]
   1252c:	cmp	r3, #0
   12530:	beq	1257c <__assert_fail@plt+0x16d4>
   12534:	bl	10df4 <__errno_location@plt>
   12538:	mov	r3, r0
   1253c:	ldr	r4, [r3]
   12540:	movw	r3, #37208	; 0x9158
   12544:	movt	r3, #2
   12548:	ldr	r3, [r3]
   1254c:	mov	r0, r3
   12550:	bl	14be8 <__assert_fail@plt+0x3d40>
   12554:	mov	r2, r0
   12558:	ldr	r3, [fp, #-16]
   1255c:	str	r3, [sp]
   12560:	mov	r3, r2
   12564:	movw	r2, #35040	; 0x88e0
   12568:	movt	r2, #1
   1256c:	mov	r1, r4
   12570:	mov	r0, #0
   12574:	bl	10d58 <error@plt>
   12578:	b	1259c <__assert_fail@plt+0x16f4>
   1257c:	bl	10df4 <__errno_location@plt>
   12580:	mov	r3, r0
   12584:	ldr	r1, [r3]
   12588:	ldr	r3, [fp, #-16]
   1258c:	movw	r2, #35048	; 0x88e8
   12590:	movt	r2, #1
   12594:	mov	r0, #0
   12598:	bl	10d58 <error@plt>
   1259c:	movw	r3, #37100	; 0x90ec
   125a0:	movt	r3, #2
   125a4:	ldr	r3, [r3]
   125a8:	mov	r0, r3
   125ac:	bl	10c98 <_exit@plt>
   125b0:	movw	r3, #37184	; 0x9140
   125b4:	movt	r3, #2
   125b8:	ldr	r3, [r3]
   125bc:	mov	r0, r3
   125c0:	bl	16df4 <__assert_fail@plt+0x5f4c>
   125c4:	mov	r3, r0
   125c8:	cmp	r3, #0
   125cc:	beq	125e4 <__assert_fail@plt+0x173c>
   125d0:	movw	r3, #37100	; 0x90ec
   125d4:	movt	r3, #2
   125d8:	ldr	r3, [r3]
   125dc:	mov	r0, r3
   125e0:	bl	10c98 <_exit@plt>
   125e4:	nop	{0}
   125e8:	sub	sp, fp, #8
   125ec:	ldr	r4, [sp]
   125f0:	ldr	fp, [sp, #4]
   125f4:	add	sp, sp, #8
   125f8:	pop	{pc}		; (ldr pc, [sp], #4)
   125fc:	str	fp, [sp, #-8]!
   12600:	str	lr, [sp, #4]
   12604:	add	fp, sp, #4
   12608:	sub	sp, sp, #16
   1260c:	str	r0, [fp, #-16]
   12610:	ldr	r3, [fp, #-16]
   12614:	cmp	r3, #0
   12618:	bne	12640 <__assert_fail@plt+0x1798>
   1261c:	movw	r3, #37184	; 0x9140
   12620:	movt	r3, #2
   12624:	ldr	r3, [r3]
   12628:	mov	r2, #55	; 0x37
   1262c:	mov	r1, #1
   12630:	movw	r0, #35052	; 0x88ec
   12634:	movt	r0, #1
   12638:	bl	10d10 <fwrite@plt>
   1263c:	bl	10e90 <abort@plt>
   12640:	mov	r1, #47	; 0x2f
   12644:	ldr	r0, [fp, #-16]
   12648:	bl	10e54 <strrchr@plt>
   1264c:	str	r0, [fp, #-8]
   12650:	ldr	r3, [fp, #-8]
   12654:	cmp	r3, #0
   12658:	beq	12668 <__assert_fail@plt+0x17c0>
   1265c:	ldr	r3, [fp, #-8]
   12660:	add	r3, r3, #1
   12664:	b	1266c <__assert_fail@plt+0x17c4>
   12668:	ldr	r3, [fp, #-16]
   1266c:	str	r3, [fp, #-12]
   12670:	ldr	r2, [fp, #-12]
   12674:	ldr	r3, [fp, #-16]
   12678:	sub	r3, r2, r3
   1267c:	cmp	r3, #6
   12680:	ble	126f0 <__assert_fail@plt+0x1848>
   12684:	ldr	r3, [fp, #-12]
   12688:	sub	r3, r3, #7
   1268c:	mov	r2, #7
   12690:	movw	r1, #35108	; 0x8924
   12694:	movt	r1, #1
   12698:	mov	r0, r3
   1269c:	bl	10e84 <strncmp@plt>
   126a0:	mov	r3, r0
   126a4:	cmp	r3, #0
   126a8:	bne	126f0 <__assert_fail@plt+0x1848>
   126ac:	ldr	r3, [fp, #-12]
   126b0:	str	r3, [fp, #-16]
   126b4:	mov	r2, #3
   126b8:	movw	r1, #35116	; 0x892c
   126bc:	movt	r1, #1
   126c0:	ldr	r0, [fp, #-12]
   126c4:	bl	10e84 <strncmp@plt>
   126c8:	mov	r3, r0
   126cc:	cmp	r3, #0
   126d0:	bne	126f0 <__assert_fail@plt+0x1848>
   126d4:	ldr	r3, [fp, #-12]
   126d8:	add	r3, r3, #3
   126dc:	str	r3, [fp, #-16]
   126e0:	movw	r3, #37168	; 0x9130
   126e4:	movt	r3, #2
   126e8:	ldr	r2, [fp, #-16]
   126ec:	str	r2, [r3]
   126f0:	movw	r3, #37216	; 0x9160
   126f4:	movt	r3, #2
   126f8:	ldr	r2, [fp, #-16]
   126fc:	str	r2, [r3]
   12700:	movw	r3, #37172	; 0x9134
   12704:	movt	r3, #2
   12708:	ldr	r2, [fp, #-16]
   1270c:	str	r2, [r3]
   12710:	nop	{0}
   12714:	sub	sp, fp, #4
   12718:	ldr	fp, [sp]
   1271c:	add	sp, sp, #4
   12720:	pop	{pc}		; (ldr pc, [sp], #4)
   12724:	str	fp, [sp, #-8]!
   12728:	str	lr, [sp, #4]
   1272c:	add	fp, sp, #4
   12730:	sub	sp, sp, #16
   12734:	str	r0, [fp, #-16]
   12738:	bl	10df4 <__errno_location@plt>
   1273c:	mov	r3, r0
   12740:	ldr	r3, [r3]
   12744:	str	r3, [fp, #-8]
   12748:	ldr	r3, [fp, #-16]
   1274c:	cmp	r3, #0
   12750:	beq	1275c <__assert_fail@plt+0x18b4>
   12754:	ldr	r3, [fp, #-16]
   12758:	b	12764 <__assert_fail@plt+0x18bc>
   1275c:	movw	r3, #37220	; 0x9164
   12760:	movt	r3, #2
   12764:	mov	r1, #48	; 0x30
   12768:	mov	r0, r3
   1276c:	bl	15f04 <__assert_fail@plt+0x505c>
   12770:	mov	r3, r0
   12774:	str	r3, [fp, #-12]
   12778:	bl	10df4 <__errno_location@plt>
   1277c:	mov	r2, r0
   12780:	ldr	r3, [fp, #-8]
   12784:	str	r3, [r2]
   12788:	ldr	r3, [fp, #-12]
   1278c:	mov	r0, r3
   12790:	sub	sp, fp, #4
   12794:	ldr	fp, [sp]
   12798:	add	sp, sp, #4
   1279c:	pop	{pc}		; (ldr pc, [sp], #4)
   127a0:	push	{fp}		; (str fp, [sp, #-4]!)
   127a4:	add	fp, sp, #0
   127a8:	sub	sp, sp, #12
   127ac:	str	r0, [fp, #-8]
   127b0:	ldr	r3, [fp, #-8]
   127b4:	cmp	r3, #0
   127b8:	beq	127c4 <__assert_fail@plt+0x191c>
   127bc:	ldr	r3, [fp, #-8]
   127c0:	b	127cc <__assert_fail@plt+0x1924>
   127c4:	movw	r3, #37220	; 0x9164
   127c8:	movt	r3, #2
   127cc:	ldr	r3, [r3]
   127d0:	mov	r0, r3
   127d4:	add	sp, fp, #0
   127d8:	pop	{fp}		; (ldr fp, [sp], #4)
   127dc:	bx	lr
   127e0:	push	{fp}		; (str fp, [sp, #-4]!)
   127e4:	add	fp, sp, #0
   127e8:	sub	sp, sp, #12
   127ec:	str	r0, [fp, #-8]
   127f0:	str	r1, [fp, #-12]
   127f4:	ldr	r3, [fp, #-8]
   127f8:	cmp	r3, #0
   127fc:	beq	12808 <__assert_fail@plt+0x1960>
   12800:	ldr	r3, [fp, #-8]
   12804:	b	12810 <__assert_fail@plt+0x1968>
   12808:	movw	r3, #37220	; 0x9164
   1280c:	movt	r3, #2
   12810:	ldr	r2, [fp, #-12]
   12814:	str	r2, [r3]
   12818:	nop	{0}
   1281c:	add	sp, fp, #0
   12820:	pop	{fp}		; (ldr fp, [sp], #4)
   12824:	bx	lr
   12828:	push	{fp}		; (str fp, [sp, #-4]!)
   1282c:	add	fp, sp, #0
   12830:	sub	sp, sp, #36	; 0x24
   12834:	str	r0, [fp, #-24]	; 0xffffffe8
   12838:	mov	r3, r1
   1283c:	str	r2, [fp, #-32]	; 0xffffffe0
   12840:	strb	r3, [fp, #-25]	; 0xffffffe7
   12844:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12848:	strb	r3, [fp, #-5]
   1284c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12850:	cmp	r3, #0
   12854:	beq	12860 <__assert_fail@plt+0x19b8>
   12858:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1285c:	b	12868 <__assert_fail@plt+0x19c0>
   12860:	movw	r3, #37220	; 0x9164
   12864:	movt	r3, #2
   12868:	add	r2, r3, #8
   1286c:	ldrb	r3, [fp, #-5]
   12870:	lsr	r3, r3, #5
   12874:	uxtb	r3, r3
   12878:	lsl	r3, r3, #2
   1287c:	add	r3, r2, r3
   12880:	str	r3, [fp, #-12]
   12884:	ldrb	r3, [fp, #-5]
   12888:	and	r3, r3, #31
   1288c:	str	r3, [fp, #-16]
   12890:	ldr	r3, [fp, #-12]
   12894:	ldr	r2, [r3]
   12898:	ldr	r3, [fp, #-16]
   1289c:	lsr	r3, r2, r3
   128a0:	and	r3, r3, #1
   128a4:	str	r3, [fp, #-20]	; 0xffffffec
   128a8:	ldr	r3, [fp, #-12]
   128ac:	ldr	r3, [r3]
   128b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   128b4:	and	r1, r2, #1
   128b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   128bc:	eor	r1, r1, r2
   128c0:	ldr	r2, [fp, #-16]
   128c4:	lsl	r2, r1, r2
   128c8:	eor	r2, r2, r3
   128cc:	ldr	r3, [fp, #-12]
   128d0:	str	r2, [r3]
   128d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d8:	mov	r0, r3
   128dc:	add	sp, fp, #0
   128e0:	pop	{fp}		; (ldr fp, [sp], #4)
   128e4:	bx	lr
   128e8:	push	{fp}		; (str fp, [sp, #-4]!)
   128ec:	add	fp, sp, #0
   128f0:	sub	sp, sp, #20
   128f4:	str	r0, [fp, #-16]
   128f8:	str	r1, [fp, #-20]	; 0xffffffec
   128fc:	ldr	r3, [fp, #-16]
   12900:	cmp	r3, #0
   12904:	bne	12914 <__assert_fail@plt+0x1a6c>
   12908:	movw	r3, #37220	; 0x9164
   1290c:	movt	r3, #2
   12910:	str	r3, [fp, #-16]
   12914:	ldr	r3, [fp, #-16]
   12918:	ldr	r3, [r3, #4]
   1291c:	str	r3, [fp, #-8]
   12920:	ldr	r3, [fp, #-16]
   12924:	ldr	r2, [fp, #-20]	; 0xffffffec
   12928:	str	r2, [r3, #4]
   1292c:	ldr	r3, [fp, #-8]
   12930:	mov	r0, r3
   12934:	add	sp, fp, #0
   12938:	pop	{fp}		; (ldr fp, [sp], #4)
   1293c:	bx	lr
   12940:	str	fp, [sp, #-8]!
   12944:	str	lr, [sp, #4]
   12948:	add	fp, sp, #4
   1294c:	sub	sp, sp, #16
   12950:	str	r0, [fp, #-8]
   12954:	str	r1, [fp, #-12]
   12958:	str	r2, [fp, #-16]
   1295c:	ldr	r3, [fp, #-8]
   12960:	cmp	r3, #0
   12964:	bne	12974 <__assert_fail@plt+0x1acc>
   12968:	movw	r3, #37220	; 0x9164
   1296c:	movt	r3, #2
   12970:	str	r3, [fp, #-8]
   12974:	ldr	r3, [fp, #-8]
   12978:	mov	r2, #10
   1297c:	str	r2, [r3]
   12980:	ldr	r3, [fp, #-12]
   12984:	cmp	r3, #0
   12988:	beq	12998 <__assert_fail@plt+0x1af0>
   1298c:	ldr	r3, [fp, #-16]
   12990:	cmp	r3, #0
   12994:	bne	1299c <__assert_fail@plt+0x1af4>
   12998:	bl	10e90 <abort@plt>
   1299c:	ldr	r3, [fp, #-8]
   129a0:	ldr	r2, [fp, #-12]
   129a4:	str	r2, [r3, #40]	; 0x28
   129a8:	ldr	r3, [fp, #-8]
   129ac:	ldr	r2, [fp, #-16]
   129b0:	str	r2, [r3, #44]	; 0x2c
   129b4:	nop	{0}
   129b8:	sub	sp, fp, #4
   129bc:	ldr	fp, [sp]
   129c0:	add	sp, sp, #4
   129c4:	pop	{pc}		; (ldr pc, [sp], #4)
   129c8:	str	fp, [sp, #-8]!
   129cc:	str	lr, [sp, #4]
   129d0:	add	fp, sp, #4
   129d4:	sub	sp, sp, #56	; 0x38
   129d8:	str	r0, [fp, #-56]	; 0xffffffc8
   129dc:	str	r1, [fp, #-60]	; 0xffffffc4
   129e0:	sub	r1, fp, #52	; 0x34
   129e4:	mov	r2, #0
   129e8:	mov	r3, #0
   129ec:	strd	r2, [r1]
   129f0:	strd	r2, [r1, #8]
   129f4:	strd	r2, [r1, #16]
   129f8:	strd	r2, [r1, #24]
   129fc:	strd	r2, [r1, #32]
   12a00:	strd	r2, [r1, #40]	; 0x28
   12a04:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12a08:	cmp	r3, #10
   12a0c:	bne	12a14 <__assert_fail@plt+0x1b6c>
   12a10:	bl	10e90 <abort@plt>
   12a14:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12a18:	str	r3, [fp, #-52]	; 0xffffffcc
   12a1c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12a20:	mov	r2, r3
   12a24:	sub	r3, fp, #52	; 0x34
   12a28:	ldrd	r0, [r3]
   12a2c:	strd	r0, [r2]
   12a30:	ldrd	r0, [r3, #8]
   12a34:	strd	r0, [r2, #8]
   12a38:	ldrd	r0, [r3, #16]
   12a3c:	strd	r0, [r2, #16]
   12a40:	ldrd	r0, [r3, #24]
   12a44:	strd	r0, [r2, #24]
   12a48:	ldrd	r0, [r3, #32]
   12a4c:	strd	r0, [r2, #32]
   12a50:	ldrd	r0, [r3, #40]	; 0x28
   12a54:	strd	r0, [r2, #40]	; 0x28
   12a58:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12a5c:	sub	sp, fp, #4
   12a60:	ldr	fp, [sp]
   12a64:	add	sp, sp, #4
   12a68:	pop	{pc}		; (ldr pc, [sp], #4)
   12a6c:	str	fp, [sp, #-8]!
   12a70:	str	lr, [sp, #4]
   12a74:	add	fp, sp, #4
   12a78:	sub	sp, sp, #16
   12a7c:	str	r0, [fp, #-16]
   12a80:	str	r1, [fp, #-20]	; 0xffffffec
   12a84:	ldr	r0, [fp, #-16]
   12a88:	bl	10dc4 <gettext@plt>
   12a8c:	str	r0, [fp, #-8]
   12a90:	ldr	r2, [fp, #-8]
   12a94:	ldr	r3, [fp, #-16]
   12a98:	cmp	r2, r3
   12a9c:	beq	12aa8 <__assert_fail@plt+0x1c00>
   12aa0:	ldr	r3, [fp, #-8]
   12aa4:	b	12b58 <__assert_fail@plt+0x1cb0>
   12aa8:	bl	173ac <__assert_fail@plt+0x6504>
   12aac:	str	r0, [fp, #-12]
   12ab0:	movw	r1, #35308	; 0x89ec
   12ab4:	movt	r1, #1
   12ab8:	ldr	r0, [fp, #-12]
   12abc:	bl	16d48 <__assert_fail@plt+0x5ea0>
   12ac0:	mov	r3, r0
   12ac4:	cmp	r3, #0
   12ac8:	bne	12af4 <__assert_fail@plt+0x1c4c>
   12acc:	ldr	r3, [fp, #-16]
   12ad0:	ldrb	r3, [r3]
   12ad4:	cmp	r3, #96	; 0x60
   12ad8:	bne	12ae8 <__assert_fail@plt+0x1c40>
   12adc:	movw	r3, #35316	; 0x89f4
   12ae0:	movt	r3, #1
   12ae4:	b	12b58 <__assert_fail@plt+0x1cb0>
   12ae8:	movw	r3, #35320	; 0x89f8
   12aec:	movt	r3, #1
   12af0:	b	12b58 <__assert_fail@plt+0x1cb0>
   12af4:	movw	r1, #35324	; 0x89fc
   12af8:	movt	r1, #1
   12afc:	ldr	r0, [fp, #-12]
   12b00:	bl	16d48 <__assert_fail@plt+0x5ea0>
   12b04:	mov	r3, r0
   12b08:	cmp	r3, #0
   12b0c:	bne	12b38 <__assert_fail@plt+0x1c90>
   12b10:	ldr	r3, [fp, #-16]
   12b14:	ldrb	r3, [r3]
   12b18:	cmp	r3, #96	; 0x60
   12b1c:	bne	12b2c <__assert_fail@plt+0x1c84>
   12b20:	movw	r3, #35332	; 0x8a04
   12b24:	movt	r3, #1
   12b28:	b	12b58 <__assert_fail@plt+0x1cb0>
   12b2c:	movw	r3, #35336	; 0x8a08
   12b30:	movt	r3, #1
   12b34:	b	12b58 <__assert_fail@plt+0x1cb0>
   12b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b3c:	cmp	r3, #9
   12b40:	bne	12b50 <__assert_fail@plt+0x1ca8>
   12b44:	movw	r3, #35340	; 0x8a0c
   12b48:	movt	r3, #1
   12b4c:	b	12b58 <__assert_fail@plt+0x1cb0>
   12b50:	movw	r3, #35344	; 0x8a10
   12b54:	movt	r3, #1
   12b58:	mov	r0, r3
   12b5c:	sub	sp, fp, #4
   12b60:	ldr	fp, [sp]
   12b64:	add	sp, sp, #4
   12b68:	pop	{pc}		; (ldr pc, [sp], #4)
   12b6c:	str	r4, [sp, #-12]!
   12b70:	str	fp, [sp, #4]
   12b74:	str	lr, [sp, #8]
   12b78:	add	fp, sp, #8
   12b7c:	sub	sp, sp, #116	; 0x74
   12b80:	str	r0, [fp, #-88]	; 0xffffffa8
   12b84:	str	r1, [fp, #-92]	; 0xffffffa4
   12b88:	str	r2, [fp, #-96]	; 0xffffffa0
   12b8c:	str	r3, [fp, #-100]	; 0xffffff9c
   12b90:	mov	r3, #0
   12b94:	str	r3, [fp, #-20]	; 0xffffffec
   12b98:	mov	r3, #0
   12b9c:	str	r3, [fp, #-24]	; 0xffffffe8
   12ba0:	mov	r3, #0
   12ba4:	str	r3, [fp, #-28]	; 0xffffffe4
   12ba8:	mov	r3, #0
   12bac:	str	r3, [fp, #-32]	; 0xffffffe0
   12bb0:	mov	r3, #0
   12bb4:	strb	r3, [fp, #-33]	; 0xffffffdf
   12bb8:	bl	10d28 <__ctype_get_mb_cur_max@plt>
   12bbc:	mov	r3, r0
   12bc0:	cmp	r3, #1
   12bc4:	moveq	r3, #1
   12bc8:	movne	r3, #0
   12bcc:	strb	r3, [fp, #-57]	; 0xffffffc7
   12bd0:	ldr	r3, [fp, #8]
   12bd4:	and	r3, r3, #2
   12bd8:	cmp	r3, #0
   12bdc:	movne	r3, #1
   12be0:	moveq	r3, #0
   12be4:	strb	r3, [fp, #-34]	; 0xffffffde
   12be8:	mov	r3, #0
   12bec:	strb	r3, [fp, #-35]	; 0xffffffdd
   12bf0:	mov	r3, #0
   12bf4:	strb	r3, [fp, #-36]	; 0xffffffdc
   12bf8:	mov	r3, #1
   12bfc:	strb	r3, [fp, #-37]	; 0xffffffdb
   12c00:	ldr	r3, [fp, #4]
   12c04:	cmp	r3, #10
   12c08:	ldrls	pc, [pc, r3, lsl #2]
   12c0c:	b	12e24 <__assert_fail@plt+0x1f7c>
   12c10:	andeq	r2, r1, r8, lsl lr
   12c14:	muleq	r1, r0, sp
   12c18:			; <UNDEFINED> instruction: 0x00012db4
   12c1c:	andeq	r2, r1, r8, lsl #27
   12c20:	muleq	r1, r8, sp
   12c24:	andeq	r2, r1, ip, asr #24
   12c28:	andeq	r2, r1, ip, lsr ip
   12c2c:			; <UNDEFINED> instruction: 0x00012cb0
   12c30:	andeq	r2, r1, r4, asr #25
   12c34:	andeq	r2, r1, r4, asr #25
   12c38:	andeq	r2, r1, r4, asr #25
   12c3c:	mov	r3, #5
   12c40:	str	r3, [fp, #4]
   12c44:	mov	r3, #1
   12c48:	strb	r3, [fp, #-34]	; 0xffffffde
   12c4c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12c50:	eor	r3, r3, #1
   12c54:	uxtb	r3, r3
   12c58:	cmp	r3, #0
   12c5c:	beq	12c90 <__assert_fail@plt+0x1de8>
   12c60:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c68:	cmp	r2, r3
   12c6c:	bcs	12c84 <__assert_fail@plt+0x1ddc>
   12c70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c74:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c78:	add	r3, r2, r3
   12c7c:	mov	r2, #34	; 0x22
   12c80:	strb	r2, [r3]
   12c84:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c88:	add	r3, r3, #1
   12c8c:	str	r3, [fp, #-20]	; 0xffffffec
   12c90:	mov	r3, #1
   12c94:	strb	r3, [fp, #-33]	; 0xffffffdf
   12c98:	movw	r3, #35340	; 0x8a0c
   12c9c:	movt	r3, #1
   12ca0:	str	r3, [fp, #-28]	; 0xffffffe4
   12ca4:	mov	r3, #1
   12ca8:	str	r3, [fp, #-32]	; 0xffffffe0
   12cac:	b	12e28 <__assert_fail@plt+0x1f80>
   12cb0:	mov	r3, #1
   12cb4:	strb	r3, [fp, #-33]	; 0xffffffdf
   12cb8:	mov	r3, #0
   12cbc:	strb	r3, [fp, #-34]	; 0xffffffde
   12cc0:	b	12e28 <__assert_fail@plt+0x1f80>
   12cc4:	ldr	r3, [fp, #4]
   12cc8:	cmp	r3, #10
   12ccc:	beq	12cf8 <__assert_fail@plt+0x1e50>
   12cd0:	ldr	r1, [fp, #4]
   12cd4:	movw	r0, #35348	; 0x8a14
   12cd8:	movt	r0, #1
   12cdc:	bl	12a6c <__assert_fail@plt+0x1bc4>
   12ce0:	str	r0, [fp, #16]
   12ce4:	ldr	r1, [fp, #4]
   12ce8:	movw	r0, #35344	; 0x8a10
   12cec:	movt	r0, #1
   12cf0:	bl	12a6c <__assert_fail@plt+0x1bc4>
   12cf4:	str	r0, [fp, #20]
   12cf8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12cfc:	eor	r3, r3, #1
   12d00:	uxtb	r3, r3
   12d04:	cmp	r3, #0
   12d08:	beq	12d68 <__assert_fail@plt+0x1ec0>
   12d0c:	ldr	r3, [fp, #16]
   12d10:	str	r3, [fp, #-28]	; 0xffffffe4
   12d14:	b	12d58 <__assert_fail@plt+0x1eb0>
   12d18:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d20:	cmp	r2, r3
   12d24:	bcs	12d40 <__assert_fail@plt+0x1e98>
   12d28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d30:	add	r3, r2, r3
   12d34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12d38:	ldrb	r2, [r2]
   12d3c:	strb	r2, [r3]
   12d40:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d44:	add	r3, r3, #1
   12d48:	str	r3, [fp, #-20]	; 0xffffffec
   12d4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d50:	add	r3, r3, #1
   12d54:	str	r3, [fp, #-28]	; 0xffffffe4
   12d58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12d5c:	ldrb	r3, [r3]
   12d60:	cmp	r3, #0
   12d64:	bne	12d18 <__assert_fail@plt+0x1e70>
   12d68:	mov	r3, #1
   12d6c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d70:	ldr	r3, [fp, #20]
   12d74:	str	r3, [fp, #-28]	; 0xffffffe4
   12d78:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12d7c:	bl	10dd0 <strlen@plt>
   12d80:	str	r0, [fp, #-32]	; 0xffffffe0
   12d84:	b	12e28 <__assert_fail@plt+0x1f80>
   12d88:	mov	r3, #1
   12d8c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d90:	mov	r3, #1
   12d94:	strb	r3, [fp, #-34]	; 0xffffffde
   12d98:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d9c:	eor	r3, r3, #1
   12da0:	uxtb	r3, r3
   12da4:	cmp	r3, #0
   12da8:	beq	12db4 <__assert_fail@plt+0x1f0c>
   12dac:	mov	r3, #1
   12db0:	strb	r3, [fp, #-33]	; 0xffffffdf
   12db4:	mov	r3, #2
   12db8:	str	r3, [fp, #4]
   12dbc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12dc0:	eor	r3, r3, #1
   12dc4:	uxtb	r3, r3
   12dc8:	cmp	r3, #0
   12dcc:	beq	12e00 <__assert_fail@plt+0x1f58>
   12dd0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12dd4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12dd8:	cmp	r2, r3
   12ddc:	bcs	12df4 <__assert_fail@plt+0x1f4c>
   12de0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12de4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12de8:	add	r3, r2, r3
   12dec:	mov	r2, #39	; 0x27
   12df0:	strb	r2, [r3]
   12df4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12df8:	add	r3, r3, #1
   12dfc:	str	r3, [fp, #-20]	; 0xffffffec
   12e00:	movw	r3, #35344	; 0x8a10
   12e04:	movt	r3, #1
   12e08:	str	r3, [fp, #-28]	; 0xffffffe4
   12e0c:	mov	r3, #1
   12e10:	str	r3, [fp, #-32]	; 0xffffffe0
   12e14:	b	12e28 <__assert_fail@plt+0x1f80>
   12e18:	mov	r3, #0
   12e1c:	strb	r3, [fp, #-34]	; 0xffffffde
   12e20:	b	12e28 <__assert_fail@plt+0x1f80>
   12e24:	bl	10e90 <abort@plt>
   12e28:	mov	r3, #0
   12e2c:	str	r3, [fp, #-16]
   12e30:	b	13fcc <__assert_fail@plt+0x3124>
   12e34:	mov	r3, #0
   12e38:	strb	r3, [fp, #-40]	; 0xffffffd8
   12e3c:	mov	r3, #0
   12e40:	strb	r3, [fp, #-41]	; 0xffffffd7
   12e44:	mov	r3, #0
   12e48:	strb	r3, [fp, #-42]	; 0xffffffd6
   12e4c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12e50:	cmp	r3, #0
   12e54:	beq	12ef0 <__assert_fail@plt+0x2048>
   12e58:	ldr	r3, [fp, #4]
   12e5c:	cmp	r3, #2
   12e60:	beq	12ef0 <__assert_fail@plt+0x2048>
   12e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e68:	cmp	r3, #0
   12e6c:	beq	12ef0 <__assert_fail@plt+0x2048>
   12e70:	ldr	r2, [fp, #-16]
   12e74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e78:	add	r4, r2, r3
   12e7c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12e80:	cmn	r3, #1
   12e84:	bne	12ea8 <__assert_fail@plt+0x2000>
   12e88:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e8c:	cmp	r3, #1
   12e90:	bls	12ea8 <__assert_fail@plt+0x2000>
   12e94:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12e98:	bl	10dd0 <strlen@plt>
   12e9c:	str	r0, [fp, #-100]	; 0xffffff9c
   12ea0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12ea4:	b	12eac <__assert_fail@plt+0x2004>
   12ea8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12eac:	cmp	r3, r4
   12eb0:	bcc	12ef0 <__assert_fail@plt+0x2048>
   12eb4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12eb8:	ldr	r3, [fp, #-16]
   12ebc:	add	r3, r2, r3
   12ec0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12ec4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12ec8:	mov	r0, r3
   12ecc:	bl	10cc8 <memcmp@plt>
   12ed0:	mov	r3, r0
   12ed4:	cmp	r3, #0
   12ed8:	bne	12ef0 <__assert_fail@plt+0x2048>
   12edc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12ee0:	cmp	r3, #0
   12ee4:	bne	14188 <__assert_fail@plt+0x32e0>
   12ee8:	mov	r3, #1
   12eec:	strb	r3, [fp, #-40]	; 0xffffffd8
   12ef0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12ef4:	ldr	r3, [fp, #-16]
   12ef8:	add	r3, r2, r3
   12efc:	ldrb	r3, [r3]
   12f00:	strb	r3, [fp, #-38]	; 0xffffffda
   12f04:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12f08:	cmp	r3, #126	; 0x7e
   12f0c:	ldrls	pc, [pc, r3, lsl #2]
   12f10:	b	13748 <__assert_fail@plt+0x28a0>
   12f14:	andeq	r3, r1, r0, lsl r1
   12f18:	andeq	r3, r1, r8, asr #14
   12f1c:	andeq	r3, r1, r8, asr #14
   12f20:	andeq	r3, r1, r8, asr #14
   12f24:	andeq	r3, r1, r8, asr #14
   12f28:	andeq	r3, r1, r8, asr #14
   12f2c:	andeq	r3, r1, r8, asr #14
   12f30:	andeq	r3, r1, r4, lsl #10
   12f34:	andeq	r3, r1, r0, lsl r5
   12f38:	andeq	r3, r1, r0, asr #10
   12f3c:	andeq	r3, r1, r8, lsr #10
   12f40:	andeq	r3, r1, ip, asr #10
   12f44:	andeq	r3, r1, ip, lsl r5
   12f48:	andeq	r3, r1, r4, lsr r5
   12f4c:	andeq	r3, r1, r8, asr #14
   12f50:	andeq	r3, r1, r8, asr #14
   12f54:	andeq	r3, r1, r8, asr #14
   12f58:	andeq	r3, r1, r8, asr #14
   12f5c:	andeq	r3, r1, r8, asr #14
   12f60:	andeq	r3, r1, r8, asr #14
   12f64:	andeq	r3, r1, r8, asr #14
   12f68:	andeq	r3, r1, r8, asr #14
   12f6c:	andeq	r3, r1, r8, asr #14
   12f70:	andeq	r3, r1, r8, asr #14
   12f74:	andeq	r3, r1, r8, asr #14
   12f78:	andeq	r3, r1, r8, asr #14
   12f7c:	andeq	r3, r1, r8, asr #14
   12f80:	andeq	r3, r1, r8, asr #14
   12f84:	andeq	r3, r1, r8, asr #14
   12f88:	andeq	r3, r1, r8, asr #14
   12f8c:	andeq	r3, r1, r8, asr #14
   12f90:	andeq	r3, r1, r8, asr #14
   12f94:	andeq	r3, r1, ip, lsr #12
   12f98:	andeq	r3, r1, r4, lsr r6
   12f9c:	andeq	r3, r1, r4, lsr r6
   12fa0:	andeq	r3, r1, r0, lsr #12
   12fa4:	andeq	r3, r1, r4, lsr r6
   12fa8:	andeq	r3, r1, ip, lsr r7
   12fac:	andeq	r3, r1, r4, lsr r6
   12fb0:	andeq	r3, r1, r0, asr r6
   12fb4:	andeq	r3, r1, r4, lsr r6
   12fb8:	andeq	r3, r1, r4, lsr r6
   12fbc:	andeq	r3, r1, r4, lsr r6
   12fc0:	andeq	r3, r1, ip, lsr r7
   12fc4:	andeq	r3, r1, ip, lsr r7
   12fc8:	andeq	r3, r1, ip, lsr r7
   12fcc:	andeq	r3, r1, ip, lsr r7
   12fd0:	andeq	r3, r1, ip, lsr r7
   12fd4:	andeq	r3, r1, ip, lsr r7
   12fd8:	andeq	r3, r1, ip, lsr r7
   12fdc:	andeq	r3, r1, ip, lsr r7
   12fe0:	andeq	r3, r1, ip, lsr r7
   12fe4:	andeq	r3, r1, ip, lsr r7
   12fe8:	andeq	r3, r1, ip, lsr r7
   12fec:	andeq	r3, r1, ip, lsr r7
   12ff0:	andeq	r3, r1, ip, lsr r7
   12ff4:	andeq	r3, r1, ip, lsr r7
   12ff8:	andeq	r3, r1, ip, lsr r7
   12ffc:	andeq	r3, r1, ip, lsr r7
   13000:	andeq	r3, r1, r4, lsr r6
   13004:	andeq	r3, r1, r4, lsr r6
   13008:	andeq	r3, r1, r4, lsr r6
   1300c:	andeq	r3, r1, r4, lsr r6
   13010:	strdeq	r3, [r1], -r0
   13014:	andeq	r3, r1, r8, asr #14
   13018:	andeq	r3, r1, ip, lsr r7
   1301c:	andeq	r3, r1, ip, lsr r7
   13020:	andeq	r3, r1, ip, lsr r7
   13024:	andeq	r3, r1, ip, lsr r7
   13028:	andeq	r3, r1, ip, lsr r7
   1302c:	andeq	r3, r1, ip, lsr r7
   13030:	andeq	r3, r1, ip, lsr r7
   13034:	andeq	r3, r1, ip, lsr r7
   13038:	andeq	r3, r1, ip, lsr r7
   1303c:	andeq	r3, r1, ip, lsr r7
   13040:	andeq	r3, r1, ip, lsr r7
   13044:	andeq	r3, r1, ip, lsr r7
   13048:	andeq	r3, r1, ip, lsr r7
   1304c:	andeq	r3, r1, ip, lsr r7
   13050:	andeq	r3, r1, ip, lsr r7
   13054:	andeq	r3, r1, ip, lsr r7
   13058:	andeq	r3, r1, ip, lsr r7
   1305c:	andeq	r3, r1, ip, lsr r7
   13060:	andeq	r3, r1, ip, lsr r7
   13064:	andeq	r3, r1, ip, lsr r7
   13068:	andeq	r3, r1, ip, lsr r7
   1306c:	andeq	r3, r1, ip, lsr r7
   13070:	andeq	r3, r1, ip, lsr r7
   13074:	andeq	r3, r1, ip, lsr r7
   13078:	andeq	r3, r1, ip, lsr r7
   1307c:	andeq	r3, r1, ip, lsr r7
   13080:	andeq	r3, r1, r4, lsr r6
   13084:	andeq	r3, r1, r8, asr r5
   13088:	andeq	r3, r1, ip, lsr r7
   1308c:	andeq	r3, r1, r4, lsr r6
   13090:	andeq	r3, r1, ip, lsr r7
   13094:	andeq	r3, r1, r4, lsr r6
   13098:	andeq	r3, r1, ip, lsr r7
   1309c:	andeq	r3, r1, ip, lsr r7
   130a0:	andeq	r3, r1, ip, lsr r7
   130a4:	andeq	r3, r1, ip, lsr r7
   130a8:	andeq	r3, r1, ip, lsr r7
   130ac:	andeq	r3, r1, ip, lsr r7
   130b0:	andeq	r3, r1, ip, lsr r7
   130b4:	andeq	r3, r1, ip, lsr r7
   130b8:	andeq	r3, r1, ip, lsr r7
   130bc:	andeq	r3, r1, ip, lsr r7
   130c0:	andeq	r3, r1, ip, lsr r7
   130c4:	andeq	r3, r1, ip, lsr r7
   130c8:	andeq	r3, r1, ip, lsr r7
   130cc:	andeq	r3, r1, ip, lsr r7
   130d0:	andeq	r3, r1, ip, lsr r7
   130d4:	andeq	r3, r1, ip, lsr r7
   130d8:	andeq	r3, r1, ip, lsr r7
   130dc:	andeq	r3, r1, ip, lsr r7
   130e0:	andeq	r3, r1, ip, lsr r7
   130e4:	andeq	r3, r1, ip, lsr r7
   130e8:	andeq	r3, r1, ip, lsr r7
   130ec:	andeq	r3, r1, ip, lsr r7
   130f0:	andeq	r3, r1, ip, lsr r7
   130f4:	andeq	r3, r1, ip, lsr r7
   130f8:	andeq	r3, r1, ip, lsr r7
   130fc:	andeq	r3, r1, ip, lsr r7
   13100:	ldrdeq	r3, [r1], -r8
   13104:	andeq	r3, r1, r4, lsr r6
   13108:	ldrdeq	r3, [r1], -r8
   1310c:	andeq	r3, r1, r0, lsr #12
   13110:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13114:	cmp	r3, #0
   13118:	beq	132dc <__assert_fail@plt+0x2434>
   1311c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13120:	cmp	r3, #0
   13124:	bne	14190 <__assert_fail@plt+0x32e8>
   13128:	mov	r3, #1
   1312c:	strb	r3, [fp, #-41]	; 0xffffffd7
   13130:	ldr	r3, [fp, #4]
   13134:	cmp	r3, #2
   13138:	bne	131e8 <__assert_fail@plt+0x2340>
   1313c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13140:	eor	r3, r3, #1
   13144:	uxtb	r3, r3
   13148:	cmp	r3, #0
   1314c:	beq	131e8 <__assert_fail@plt+0x2340>
   13150:	ldr	r2, [fp, #-20]	; 0xffffffec
   13154:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13158:	cmp	r2, r3
   1315c:	bcs	13174 <__assert_fail@plt+0x22cc>
   13160:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13164:	ldr	r3, [fp, #-20]	; 0xffffffec
   13168:	add	r3, r2, r3
   1316c:	mov	r2, #39	; 0x27
   13170:	strb	r2, [r3]
   13174:	ldr	r3, [fp, #-20]	; 0xffffffec
   13178:	add	r3, r3, #1
   1317c:	str	r3, [fp, #-20]	; 0xffffffec
   13180:	ldr	r2, [fp, #-20]	; 0xffffffec
   13184:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13188:	cmp	r2, r3
   1318c:	bcs	131a4 <__assert_fail@plt+0x22fc>
   13190:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13194:	ldr	r3, [fp, #-20]	; 0xffffffec
   13198:	add	r3, r2, r3
   1319c:	mov	r2, #36	; 0x24
   131a0:	strb	r2, [r3]
   131a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131a8:	add	r3, r3, #1
   131ac:	str	r3, [fp, #-20]	; 0xffffffec
   131b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   131b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131b8:	cmp	r2, r3
   131bc:	bcs	131d4 <__assert_fail@plt+0x232c>
   131c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131c8:	add	r3, r2, r3
   131cc:	mov	r2, #39	; 0x27
   131d0:	strb	r2, [r3]
   131d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131d8:	add	r3, r3, #1
   131dc:	str	r3, [fp, #-20]	; 0xffffffec
   131e0:	mov	r3, #1
   131e4:	strb	r3, [fp, #-35]	; 0xffffffdd
   131e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   131ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   131f0:	cmp	r2, r3
   131f4:	bcs	1320c <__assert_fail@plt+0x2364>
   131f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   131fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13200:	add	r3, r2, r3
   13204:	mov	r2, #92	; 0x5c
   13208:	strb	r2, [r3]
   1320c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13210:	add	r3, r3, #1
   13214:	str	r3, [fp, #-20]	; 0xffffffec
   13218:	ldr	r3, [fp, #4]
   1321c:	cmp	r3, #2
   13220:	beq	132d0 <__assert_fail@plt+0x2428>
   13224:	ldr	r3, [fp, #-16]
   13228:	add	r3, r3, #1
   1322c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13230:	cmp	r2, r3
   13234:	bls	132d0 <__assert_fail@plt+0x2428>
   13238:	ldr	r3, [fp, #-16]
   1323c:	add	r3, r3, #1
   13240:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13244:	add	r3, r2, r3
   13248:	ldrb	r3, [r3]
   1324c:	cmp	r3, #47	; 0x2f
   13250:	bls	132d0 <__assert_fail@plt+0x2428>
   13254:	ldr	r3, [fp, #-16]
   13258:	add	r3, r3, #1
   1325c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13260:	add	r3, r2, r3
   13264:	ldrb	r3, [r3]
   13268:	cmp	r3, #57	; 0x39
   1326c:	bhi	132d0 <__assert_fail@plt+0x2428>
   13270:	ldr	r2, [fp, #-20]	; 0xffffffec
   13274:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13278:	cmp	r2, r3
   1327c:	bcs	13294 <__assert_fail@plt+0x23ec>
   13280:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13284:	ldr	r3, [fp, #-20]	; 0xffffffec
   13288:	add	r3, r2, r3
   1328c:	mov	r2, #48	; 0x30
   13290:	strb	r2, [r3]
   13294:	ldr	r3, [fp, #-20]	; 0xffffffec
   13298:	add	r3, r3, #1
   1329c:	str	r3, [fp, #-20]	; 0xffffffec
   132a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   132a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132a8:	cmp	r2, r3
   132ac:	bcs	132c4 <__assert_fail@plt+0x241c>
   132b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132b8:	add	r3, r2, r3
   132bc:	mov	r2, #48	; 0x30
   132c0:	strb	r2, [r3]
   132c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   132c8:	add	r3, r3, #1
   132cc:	str	r3, [fp, #-20]	; 0xffffffec
   132d0:	mov	r3, #48	; 0x30
   132d4:	strb	r3, [fp, #-38]	; 0xffffffda
   132d8:	b	13d18 <__assert_fail@plt+0x2e70>
   132dc:	ldr	r3, [fp, #8]
   132e0:	and	r3, r3, #1
   132e4:	cmp	r3, #0
   132e8:	beq	13d18 <__assert_fail@plt+0x2e70>
   132ec:	b	13fc0 <__assert_fail@plt+0x3118>
   132f0:	ldr	r3, [fp, #4]
   132f4:	cmp	r3, #2
   132f8:	beq	1330c <__assert_fail@plt+0x2464>
   132fc:	ldr	r3, [fp, #4]
   13300:	cmp	r3, #5
   13304:	beq	1331c <__assert_fail@plt+0x2474>
   13308:	b	13500 <__assert_fail@plt+0x2658>
   1330c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13310:	cmp	r3, #0
   13314:	beq	134f4 <__assert_fail@plt+0x264c>
   13318:	b	141c4 <__assert_fail@plt+0x331c>
   1331c:	ldr	r3, [fp, #8]
   13320:	and	r3, r3, #4
   13324:	cmp	r3, #0
   13328:	beq	134fc <__assert_fail@plt+0x2654>
   1332c:	ldr	r3, [fp, #-16]
   13330:	add	r3, r3, #2
   13334:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13338:	cmp	r2, r3
   1333c:	bls	134fc <__assert_fail@plt+0x2654>
   13340:	ldr	r3, [fp, #-16]
   13344:	add	r3, r3, #1
   13348:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1334c:	add	r3, r2, r3
   13350:	ldrb	r3, [r3]
   13354:	cmp	r3, #63	; 0x3f
   13358:	bne	134fc <__assert_fail@plt+0x2654>
   1335c:	ldr	r3, [fp, #-16]
   13360:	add	r3, r3, #2
   13364:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13368:	add	r3, r2, r3
   1336c:	ldrb	r3, [r3]
   13370:	sub	r3, r3, #33	; 0x21
   13374:	cmp	r3, #29
   13378:	ldrls	pc, [pc, r3, lsl #2]
   1337c:	b	134ec <__assert_fail@plt+0x2644>
   13380:	strdeq	r3, [r1], -r8
   13384:	andeq	r3, r1, ip, ror #9
   13388:	andeq	r3, r1, ip, ror #9
   1338c:	andeq	r3, r1, ip, ror #9
   13390:	andeq	r3, r1, ip, ror #9
   13394:	andeq	r3, r1, ip, ror #9
   13398:	strdeq	r3, [r1], -r8
   1339c:	strdeq	r3, [r1], -r8
   133a0:	strdeq	r3, [r1], -r8
   133a4:	andeq	r3, r1, ip, ror #9
   133a8:	andeq	r3, r1, ip, ror #9
   133ac:	andeq	r3, r1, ip, ror #9
   133b0:	strdeq	r3, [r1], -r8
   133b4:	andeq	r3, r1, ip, ror #9
   133b8:	strdeq	r3, [r1], -r8
   133bc:	andeq	r3, r1, ip, ror #9
   133c0:	andeq	r3, r1, ip, ror #9
   133c4:	andeq	r3, r1, ip, ror #9
   133c8:	andeq	r3, r1, ip, ror #9
   133cc:	andeq	r3, r1, ip, ror #9
   133d0:	andeq	r3, r1, ip, ror #9
   133d4:	andeq	r3, r1, ip, ror #9
   133d8:	andeq	r3, r1, ip, ror #9
   133dc:	andeq	r3, r1, ip, ror #9
   133e0:	andeq	r3, r1, ip, ror #9
   133e4:	andeq	r3, r1, ip, ror #9
   133e8:	andeq	r3, r1, ip, ror #9
   133ec:	strdeq	r3, [r1], -r8
   133f0:	strdeq	r3, [r1], -r8
   133f4:	strdeq	r3, [r1], -r8
   133f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   133fc:	cmp	r3, #0
   13400:	bne	14198 <__assert_fail@plt+0x32f0>
   13404:	ldr	r3, [fp, #-16]
   13408:	add	r3, r3, #2
   1340c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13410:	add	r3, r2, r3
   13414:	ldrb	r3, [r3]
   13418:	strb	r3, [fp, #-38]	; 0xffffffda
   1341c:	ldr	r3, [fp, #-16]
   13420:	add	r3, r3, #2
   13424:	str	r3, [fp, #-16]
   13428:	ldr	r2, [fp, #-20]	; 0xffffffec
   1342c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13430:	cmp	r2, r3
   13434:	bcs	1344c <__assert_fail@plt+0x25a4>
   13438:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1343c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13440:	add	r3, r2, r3
   13444:	mov	r2, #63	; 0x3f
   13448:	strb	r2, [r3]
   1344c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13450:	add	r3, r3, #1
   13454:	str	r3, [fp, #-20]	; 0xffffffec
   13458:	ldr	r2, [fp, #-20]	; 0xffffffec
   1345c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13460:	cmp	r2, r3
   13464:	bcs	1347c <__assert_fail@plt+0x25d4>
   13468:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1346c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13470:	add	r3, r2, r3
   13474:	mov	r2, #34	; 0x22
   13478:	strb	r2, [r3]
   1347c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13480:	add	r3, r3, #1
   13484:	str	r3, [fp, #-20]	; 0xffffffec
   13488:	ldr	r2, [fp, #-20]	; 0xffffffec
   1348c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13490:	cmp	r2, r3
   13494:	bcs	134ac <__assert_fail@plt+0x2604>
   13498:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1349c:	ldr	r3, [fp, #-20]	; 0xffffffec
   134a0:	add	r3, r2, r3
   134a4:	mov	r2, #34	; 0x22
   134a8:	strb	r2, [r3]
   134ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   134b0:	add	r3, r3, #1
   134b4:	str	r3, [fp, #-20]	; 0xffffffec
   134b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   134bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134c0:	cmp	r2, r3
   134c4:	bcs	134dc <__assert_fail@plt+0x2634>
   134c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   134cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   134d0:	add	r3, r2, r3
   134d4:	mov	r2, #63	; 0x3f
   134d8:	strb	r2, [r3]
   134dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   134e0:	add	r3, r3, #1
   134e4:	str	r3, [fp, #-20]	; 0xffffffec
   134e8:	b	134f0 <__assert_fail@plt+0x2648>
   134ec:	nop	{0}
   134f0:	b	134fc <__assert_fail@plt+0x2654>
   134f4:	nop	{0}
   134f8:	b	13d4c <__assert_fail@plt+0x2ea4>
   134fc:	nop	{0}
   13500:	b	13d4c <__assert_fail@plt+0x2ea4>
   13504:	mov	r3, #97	; 0x61
   13508:	strb	r3, [fp, #-39]	; 0xffffffd9
   1350c:	b	135c0 <__assert_fail@plt+0x2718>
   13510:	mov	r3, #98	; 0x62
   13514:	strb	r3, [fp, #-39]	; 0xffffffd9
   13518:	b	135c0 <__assert_fail@plt+0x2718>
   1351c:	mov	r3, #102	; 0x66
   13520:	strb	r3, [fp, #-39]	; 0xffffffd9
   13524:	b	135c0 <__assert_fail@plt+0x2718>
   13528:	mov	r3, #110	; 0x6e
   1352c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13530:	b	135a4 <__assert_fail@plt+0x26fc>
   13534:	mov	r3, #114	; 0x72
   13538:	strb	r3, [fp, #-39]	; 0xffffffd9
   1353c:	b	135a4 <__assert_fail@plt+0x26fc>
   13540:	mov	r3, #116	; 0x74
   13544:	strb	r3, [fp, #-39]	; 0xffffffd9
   13548:	b	135a4 <__assert_fail@plt+0x26fc>
   1354c:	mov	r3, #118	; 0x76
   13550:	strb	r3, [fp, #-39]	; 0xffffffd9
   13554:	b	135c0 <__assert_fail@plt+0x2718>
   13558:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1355c:	strb	r3, [fp, #-39]	; 0xffffffd9
   13560:	ldr	r3, [fp, #4]
   13564:	cmp	r3, #2
   13568:	bne	1357c <__assert_fail@plt+0x26d4>
   1356c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13570:	cmp	r3, #0
   13574:	beq	13ed8 <__assert_fail@plt+0x3030>
   13578:	b	141c4 <__assert_fail@plt+0x331c>
   1357c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13580:	cmp	r3, #0
   13584:	beq	135a0 <__assert_fail@plt+0x26f8>
   13588:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1358c:	cmp	r3, #0
   13590:	beq	135a0 <__assert_fail@plt+0x26f8>
   13594:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13598:	cmp	r3, #0
   1359c:	bne	13ee0 <__assert_fail@plt+0x3038>
   135a0:	nop	{0}
   135a4:	ldr	r3, [fp, #4]
   135a8:	cmp	r3, #2
   135ac:	bne	135bc <__assert_fail@plt+0x2714>
   135b0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135b4:	cmp	r3, #0
   135b8:	bne	141a0 <__assert_fail@plt+0x32f8>
   135bc:	nop	{0}
   135c0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   135c4:	cmp	r3, #0
   135c8:	beq	13d20 <__assert_fail@plt+0x2e78>
   135cc:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   135d0:	strb	r3, [fp, #-38]	; 0xffffffda
   135d4:	b	13dd8 <__assert_fail@plt+0x2f30>
   135d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   135dc:	cmn	r3, #1
   135e0:	bne	13604 <__assert_fail@plt+0x275c>
   135e4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   135e8:	add	r3, r3, #1
   135ec:	ldrb	r3, [r3]
   135f0:	cmp	r3, #0
   135f4:	movne	r3, #1
   135f8:	moveq	r3, #0
   135fc:	uxtb	r3, r3
   13600:	b	13618 <__assert_fail@plt+0x2770>
   13604:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13608:	cmp	r3, #1
   1360c:	movne	r3, #1
   13610:	moveq	r3, #0
   13614:	uxtb	r3, r3
   13618:	cmp	r3, #0
   1361c:	bne	13d28 <__assert_fail@plt+0x2e80>
   13620:	ldr	r3, [fp, #-16]
   13624:	cmp	r3, #0
   13628:	bne	13d30 <__assert_fail@plt+0x2e88>
   1362c:	mov	r3, #1
   13630:	strb	r3, [fp, #-42]	; 0xffffffd6
   13634:	ldr	r3, [fp, #4]
   13638:	cmp	r3, #2
   1363c:	bne	13d38 <__assert_fail@plt+0x2e90>
   13640:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13644:	cmp	r3, #0
   13648:	beq	13d38 <__assert_fail@plt+0x2e90>
   1364c:	b	141c4 <__assert_fail@plt+0x331c>
   13650:	mov	r3, #1
   13654:	strb	r3, [fp, #-36]	; 0xffffffdc
   13658:	mov	r3, #1
   1365c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13660:	ldr	r3, [fp, #4]
   13664:	cmp	r3, #2
   13668:	bne	13d40 <__assert_fail@plt+0x2e98>
   1366c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13670:	cmp	r3, #0
   13674:	bne	141a8 <__assert_fail@plt+0x3300>
   13678:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1367c:	cmp	r3, #0
   13680:	beq	136a0 <__assert_fail@plt+0x27f8>
   13684:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13688:	cmp	r3, #0
   1368c:	bne	136a0 <__assert_fail@plt+0x27f8>
   13690:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13694:	str	r3, [fp, #-24]	; 0xffffffe8
   13698:	mov	r3, #0
   1369c:	str	r3, [fp, #-92]	; 0xffffffa4
   136a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   136a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136a8:	cmp	r2, r3
   136ac:	bcs	136c4 <__assert_fail@plt+0x281c>
   136b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136b8:	add	r3, r2, r3
   136bc:	mov	r2, #39	; 0x27
   136c0:	strb	r2, [r3]
   136c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136c8:	add	r3, r3, #1
   136cc:	str	r3, [fp, #-20]	; 0xffffffec
   136d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   136d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   136d8:	cmp	r2, r3
   136dc:	bcs	136f4 <__assert_fail@plt+0x284c>
   136e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136e8:	add	r3, r2, r3
   136ec:	mov	r2, #92	; 0x5c
   136f0:	strb	r2, [r3]
   136f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   136f8:	add	r3, r3, #1
   136fc:	str	r3, [fp, #-20]	; 0xffffffec
   13700:	ldr	r2, [fp, #-20]	; 0xffffffec
   13704:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13708:	cmp	r2, r3
   1370c:	bcs	13724 <__assert_fail@plt+0x287c>
   13710:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13714:	ldr	r3, [fp, #-20]	; 0xffffffec
   13718:	add	r3, r2, r3
   1371c:	mov	r2, #39	; 0x27
   13720:	strb	r2, [r3]
   13724:	ldr	r3, [fp, #-20]	; 0xffffffec
   13728:	add	r3, r3, #1
   1372c:	str	r3, [fp, #-20]	; 0xffffffec
   13730:	mov	r3, #0
   13734:	strb	r3, [fp, #-35]	; 0xffffffdd
   13738:	b	13d40 <__assert_fail@plt+0x2e98>
   1373c:	mov	r3, #1
   13740:	strb	r3, [fp, #-42]	; 0xffffffd6
   13744:	b	13d4c <__assert_fail@plt+0x2ea4>
   13748:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   1374c:	cmp	r3, #0
   13750:	beq	13790 <__assert_fail@plt+0x28e8>
   13754:	mov	r3, #1
   13758:	str	r3, [fp, #-48]	; 0xffffffd0
   1375c:	bl	10dac <__ctype_b_loc@plt>
   13760:	mov	r3, r0
   13764:	ldr	r2, [r3]
   13768:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1376c:	lsl	r3, r3, #1
   13770:	add	r3, r2, r3
   13774:	ldrh	r3, [r3]
   13778:	and	r3, r3, #16384	; 0x4000
   1377c:	cmp	r3, #0
   13780:	movne	r3, #1
   13784:	moveq	r3, #0
   13788:	strb	r3, [fp, #-49]	; 0xffffffcf
   1378c:	b	139dc <__assert_fail@plt+0x2b34>
   13790:	sub	r3, fp, #76	; 0x4c
   13794:	mov	r2, #8
   13798:	mov	r1, #0
   1379c:	mov	r0, r3
   137a0:	bl	10e0c <memset@plt>
   137a4:	mov	r3, #0
   137a8:	str	r3, [fp, #-48]	; 0xffffffd0
   137ac:	mov	r3, #1
   137b0:	strb	r3, [fp, #-49]	; 0xffffffcf
   137b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   137b8:	cmn	r3, #1
   137bc:	bne	137cc <__assert_fail@plt+0x2924>
   137c0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   137c4:	bl	10dd0 <strlen@plt>
   137c8:	str	r0, [fp, #-100]	; 0xffffff9c
   137cc:	ldr	r2, [fp, #-16]
   137d0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137d4:	add	r3, r2, r3
   137d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   137dc:	add	r1, r2, r3
   137e0:	ldr	r2, [fp, #-16]
   137e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137e8:	add	r3, r2, r3
   137ec:	ldr	r2, [fp, #-100]	; 0xffffff9c
   137f0:	sub	r2, r2, r3
   137f4:	sub	r3, fp, #76	; 0x4c
   137f8:	sub	r0, fp, #80	; 0x50
   137fc:	bl	17414 <__assert_fail@plt+0x656c>
   13800:	str	r0, [fp, #-64]	; 0xffffffc0
   13804:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13808:	cmp	r3, #0
   1380c:	beq	139d0 <__assert_fail@plt+0x2b28>
   13810:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13814:	cmn	r3, #1
   13818:	bne	13828 <__assert_fail@plt+0x2980>
   1381c:	mov	r3, #0
   13820:	strb	r3, [fp, #-49]	; 0xffffffcf
   13824:	b	139dc <__assert_fail@plt+0x2b34>
   13828:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1382c:	cmn	r3, #2
   13830:	bne	13888 <__assert_fail@plt+0x29e0>
   13834:	mov	r3, #0
   13838:	strb	r3, [fp, #-49]	; 0xffffffcf
   1383c:	b	1384c <__assert_fail@plt+0x29a4>
   13840:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13844:	add	r3, r3, #1
   13848:	str	r3, [fp, #-48]	; 0xffffffd0
   1384c:	ldr	r2, [fp, #-16]
   13850:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13854:	add	r3, r2, r3
   13858:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1385c:	cmp	r2, r3
   13860:	bls	139d8 <__assert_fail@plt+0x2b30>
   13864:	ldr	r2, [fp, #-16]
   13868:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1386c:	add	r3, r2, r3
   13870:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13874:	add	r3, r2, r3
   13878:	ldrb	r3, [r3]
   1387c:	cmp	r3, #0
   13880:	bne	13840 <__assert_fail@plt+0x2998>
   13884:	b	139d8 <__assert_fail@plt+0x2b30>
   13888:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1388c:	cmp	r3, #0
   13890:	beq	13984 <__assert_fail@plt+0x2adc>
   13894:	ldr	r3, [fp, #4]
   13898:	cmp	r3, #2
   1389c:	bne	13984 <__assert_fail@plt+0x2adc>
   138a0:	mov	r3, #1
   138a4:	str	r3, [fp, #-56]	; 0xffffffc8
   138a8:	b	13974 <__assert_fail@plt+0x2acc>
   138ac:	ldr	r2, [fp, #-16]
   138b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   138b4:	add	r2, r2, r3
   138b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138bc:	add	r3, r2, r3
   138c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   138c4:	add	r3, r2, r3
   138c8:	ldrb	r3, [r3]
   138cc:	sub	r3, r3, #91	; 0x5b
   138d0:	cmp	r3, #33	; 0x21
   138d4:	ldrls	pc, [pc, r3, lsl #2]
   138d8:	b	13964 <__assert_fail@plt+0x2abc>
   138dc:	andeq	r4, r1, r4, asr #3
   138e0:	andeq	r4, r1, r4, asr #3
   138e4:	andeq	r3, r1, r4, ror #18
   138e8:	andeq	r4, r1, r4, asr #3
   138ec:	andeq	r3, r1, r4, ror #18
   138f0:	andeq	r4, r1, r4, asr #3
   138f4:	andeq	r3, r1, r4, ror #18
   138f8:	andeq	r3, r1, r4, ror #18
   138fc:	andeq	r3, r1, r4, ror #18
   13900:	andeq	r3, r1, r4, ror #18
   13904:	andeq	r3, r1, r4, ror #18
   13908:	andeq	r3, r1, r4, ror #18
   1390c:	andeq	r3, r1, r4, ror #18
   13910:	andeq	r3, r1, r4, ror #18
   13914:	andeq	r3, r1, r4, ror #18
   13918:	andeq	r3, r1, r4, ror #18
   1391c:	andeq	r3, r1, r4, ror #18
   13920:	andeq	r3, r1, r4, ror #18
   13924:	andeq	r3, r1, r4, ror #18
   13928:	andeq	r3, r1, r4, ror #18
   1392c:	andeq	r3, r1, r4, ror #18
   13930:	andeq	r3, r1, r4, ror #18
   13934:	andeq	r3, r1, r4, ror #18
   13938:	andeq	r3, r1, r4, ror #18
   1393c:	andeq	r3, r1, r4, ror #18
   13940:	andeq	r3, r1, r4, ror #18
   13944:	andeq	r3, r1, r4, ror #18
   13948:	andeq	r3, r1, r4, ror #18
   1394c:	andeq	r3, r1, r4, ror #18
   13950:	andeq	r3, r1, r4, ror #18
   13954:	andeq	r3, r1, r4, ror #18
   13958:	andeq	r3, r1, r4, ror #18
   1395c:	andeq	r3, r1, r4, ror #18
   13960:	andeq	r4, r1, r4, asr #3
   13964:	nop	{0}
   13968:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1396c:	add	r3, r3, #1
   13970:	str	r3, [fp, #-56]	; 0xffffffc8
   13974:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13978:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1397c:	cmp	r2, r3
   13980:	bcc	138ac <__assert_fail@plt+0x2a04>
   13984:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13988:	mov	r0, r3
   1398c:	bl	10cf8 <iswprint@plt>
   13990:	mov	r3, r0
   13994:	cmp	r3, #0
   13998:	bne	139a4 <__assert_fail@plt+0x2afc>
   1399c:	mov	r3, #0
   139a0:	strb	r3, [fp, #-49]	; 0xffffffcf
   139a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139a8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   139ac:	add	r3, r2, r3
   139b0:	str	r3, [fp, #-48]	; 0xffffffd0
   139b4:	sub	r3, fp, #76	; 0x4c
   139b8:	mov	r0, r3
   139bc:	bl	10cb0 <mbsinit@plt>
   139c0:	mov	r3, r0
   139c4:	cmp	r3, #0
   139c8:	beq	137cc <__assert_fail@plt+0x2924>
   139cc:	b	139dc <__assert_fail@plt+0x2b34>
   139d0:	nop	{0}
   139d4:	b	139dc <__assert_fail@plt+0x2b34>
   139d8:	nop	{0}
   139dc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   139e0:	strb	r3, [fp, #-42]	; 0xffffffd6
   139e4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139e8:	cmp	r3, #1
   139ec:	bhi	13a10 <__assert_fail@plt+0x2b68>
   139f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   139f4:	cmp	r3, #0
   139f8:	beq	13d48 <__assert_fail@plt+0x2ea0>
   139fc:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13a00:	eor	r3, r3, #1
   13a04:	uxtb	r3, r3
   13a08:	cmp	r3, #0
   13a0c:	beq	13d48 <__assert_fail@plt+0x2ea0>
   13a10:	ldr	r2, [fp, #-16]
   13a14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a18:	add	r3, r2, r3
   13a1c:	str	r3, [fp, #-68]	; 0xffffffbc
   13a20:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13a24:	cmp	r3, #0
   13a28:	beq	13bdc <__assert_fail@plt+0x2d34>
   13a2c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   13a30:	eor	r3, r3, #1
   13a34:	uxtb	r3, r3
   13a38:	cmp	r3, #0
   13a3c:	beq	13bdc <__assert_fail@plt+0x2d34>
   13a40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13a44:	cmp	r3, #0
   13a48:	bne	141b0 <__assert_fail@plt+0x3308>
   13a4c:	mov	r3, #1
   13a50:	strb	r3, [fp, #-41]	; 0xffffffd7
   13a54:	ldr	r3, [fp, #4]
   13a58:	cmp	r3, #2
   13a5c:	bne	13b0c <__assert_fail@plt+0x2c64>
   13a60:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13a64:	eor	r3, r3, #1
   13a68:	uxtb	r3, r3
   13a6c:	cmp	r3, #0
   13a70:	beq	13b0c <__assert_fail@plt+0x2c64>
   13a74:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a7c:	cmp	r2, r3
   13a80:	bcs	13a98 <__assert_fail@plt+0x2bf0>
   13a84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a8c:	add	r3, r2, r3
   13a90:	mov	r2, #39	; 0x27
   13a94:	strb	r2, [r3]
   13a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a9c:	add	r3, r3, #1
   13aa0:	str	r3, [fp, #-20]	; 0xffffffec
   13aa4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13aa8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13aac:	cmp	r2, r3
   13ab0:	bcs	13ac8 <__assert_fail@plt+0x2c20>
   13ab4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ab8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13abc:	add	r3, r2, r3
   13ac0:	mov	r2, #36	; 0x24
   13ac4:	strb	r2, [r3]
   13ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13acc:	add	r3, r3, #1
   13ad0:	str	r3, [fp, #-20]	; 0xffffffec
   13ad4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ad8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13adc:	cmp	r2, r3
   13ae0:	bcs	13af8 <__assert_fail@plt+0x2c50>
   13ae4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13aec:	add	r3, r2, r3
   13af0:	mov	r2, #39	; 0x27
   13af4:	strb	r2, [r3]
   13af8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13afc:	add	r3, r3, #1
   13b00:	str	r3, [fp, #-20]	; 0xffffffec
   13b04:	mov	r3, #1
   13b08:	strb	r3, [fp, #-35]	; 0xffffffdd
   13b0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b14:	cmp	r2, r3
   13b18:	bcs	13b30 <__assert_fail@plt+0x2c88>
   13b1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b24:	add	r3, r2, r3
   13b28:	mov	r2, #92	; 0x5c
   13b2c:	strb	r2, [r3]
   13b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b34:	add	r3, r3, #1
   13b38:	str	r3, [fp, #-20]	; 0xffffffec
   13b3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b44:	cmp	r2, r3
   13b48:	bcs	13b70 <__assert_fail@plt+0x2cc8>
   13b4c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13b50:	lsr	r3, r3, #6
   13b54:	uxtb	r2, r3
   13b58:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b60:	add	r3, r1, r3
   13b64:	add	r2, r2, #48	; 0x30
   13b68:	uxtb	r2, r2
   13b6c:	strb	r2, [r3]
   13b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b74:	add	r3, r3, #1
   13b78:	str	r3, [fp, #-20]	; 0xffffffec
   13b7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b84:	cmp	r2, r3
   13b88:	bcs	13bb8 <__assert_fail@plt+0x2d10>
   13b8c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13b90:	lsr	r3, r3, #3
   13b94:	uxtb	r3, r3
   13b98:	and	r3, r3, #7
   13b9c:	uxtb	r2, r3
   13ba0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ba8:	add	r3, r1, r3
   13bac:	add	r2, r2, #48	; 0x30
   13bb0:	uxtb	r2, r2
   13bb4:	strb	r2, [r3]
   13bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bbc:	add	r3, r3, #1
   13bc0:	str	r3, [fp, #-20]	; 0xffffffec
   13bc4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13bc8:	and	r3, r3, #7
   13bcc:	uxtb	r3, r3
   13bd0:	add	r3, r3, #48	; 0x30
   13bd4:	strb	r3, [fp, #-38]	; 0xffffffda
   13bd8:	b	13c20 <__assert_fail@plt+0x2d78>
   13bdc:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13be0:	cmp	r3, #0
   13be4:	beq	13c20 <__assert_fail@plt+0x2d78>
   13be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bf0:	cmp	r2, r3
   13bf4:	bcs	13c0c <__assert_fail@plt+0x2d64>
   13bf8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c00:	add	r3, r2, r3
   13c04:	mov	r2, #92	; 0x5c
   13c08:	strb	r2, [r3]
   13c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c10:	add	r3, r3, #1
   13c14:	str	r3, [fp, #-20]	; 0xffffffec
   13c18:	mov	r3, #0
   13c1c:	strb	r3, [fp, #-40]	; 0xffffffd8
   13c20:	ldr	r3, [fp, #-16]
   13c24:	add	r3, r3, #1
   13c28:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13c2c:	cmp	r2, r3
   13c30:	bls	13d10 <__assert_fail@plt+0x2e68>
   13c34:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13c38:	cmp	r3, #0
   13c3c:	beq	13cbc <__assert_fail@plt+0x2e14>
   13c40:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13c44:	eor	r3, r3, #1
   13c48:	uxtb	r3, r3
   13c4c:	cmp	r3, #0
   13c50:	beq	13cbc <__assert_fail@plt+0x2e14>
   13c54:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c5c:	cmp	r2, r3
   13c60:	bcs	13c78 <__assert_fail@plt+0x2dd0>
   13c64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c6c:	add	r3, r2, r3
   13c70:	mov	r2, #39	; 0x27
   13c74:	strb	r2, [r3]
   13c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c7c:	add	r3, r3, #1
   13c80:	str	r3, [fp, #-20]	; 0xffffffec
   13c84:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c8c:	cmp	r2, r3
   13c90:	bcs	13ca8 <__assert_fail@plt+0x2e00>
   13c94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c9c:	add	r3, r2, r3
   13ca0:	mov	r2, #39	; 0x27
   13ca4:	strb	r2, [r3]
   13ca8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cac:	add	r3, r3, #1
   13cb0:	str	r3, [fp, #-20]	; 0xffffffec
   13cb4:	mov	r3, #0
   13cb8:	strb	r3, [fp, #-35]	; 0xffffffdd
   13cbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   13cc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13cc4:	cmp	r2, r3
   13cc8:	bcs	13ce0 <__assert_fail@plt+0x2e38>
   13ccc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13cd4:	add	r3, r2, r3
   13cd8:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13cdc:	strb	r2, [r3]
   13ce0:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ce4:	add	r3, r3, #1
   13ce8:	str	r3, [fp, #-20]	; 0xffffffec
   13cec:	ldr	r3, [fp, #-16]
   13cf0:	add	r3, r3, #1
   13cf4:	str	r3, [fp, #-16]
   13cf8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13cfc:	ldr	r3, [fp, #-16]
   13d00:	add	r3, r2, r3
   13d04:	ldrb	r3, [r3]
   13d08:	strb	r3, [fp, #-38]	; 0xffffffda
   13d0c:	b	13a20 <__assert_fail@plt+0x2b78>
   13d10:	nop	{0}
   13d14:	b	13eec <__assert_fail@plt+0x3044>
   13d18:	nop	{0}
   13d1c:	b	13d4c <__assert_fail@plt+0x2ea4>
   13d20:	nop	{0}
   13d24:	b	13d4c <__assert_fail@plt+0x2ea4>
   13d28:	nop	{0}
   13d2c:	b	13d4c <__assert_fail@plt+0x2ea4>
   13d30:	nop	{0}
   13d34:	b	13d4c <__assert_fail@plt+0x2ea4>
   13d38:	nop	{0}
   13d3c:	b	13d4c <__assert_fail@plt+0x2ea4>
   13d40:	nop	{0}
   13d44:	b	13d4c <__assert_fail@plt+0x2ea4>
   13d48:	nop	{0}
   13d4c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13d50:	eor	r3, r3, #1
   13d54:	uxtb	r3, r3
   13d58:	cmp	r3, #0
   13d5c:	bne	13d6c <__assert_fail@plt+0x2ec4>
   13d60:	ldr	r3, [fp, #4]
   13d64:	cmp	r3, #2
   13d68:	bne	13d80 <__assert_fail@plt+0x2ed8>
   13d6c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d70:	eor	r3, r3, #1
   13d74:	uxtb	r3, r3
   13d78:	cmp	r3, #0
   13d7c:	bne	13dc0 <__assert_fail@plt+0x2f18>
   13d80:	ldr	r3, [fp, #12]
   13d84:	cmp	r3, #0
   13d88:	beq	13dc0 <__assert_fail@plt+0x2f18>
   13d8c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d90:	lsr	r3, r3, #5
   13d94:	uxtb	r3, r3
   13d98:	lsl	r3, r3, #2
   13d9c:	ldr	r2, [fp, #12]
   13da0:	add	r3, r2, r3
   13da4:	ldr	r2, [r3]
   13da8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13dac:	and	r3, r3, #31
   13db0:	lsr	r3, r2, r3
   13db4:	and	r3, r3, #1
   13db8:	cmp	r3, #0
   13dbc:	bne	13dd4 <__assert_fail@plt+0x2f2c>
   13dc0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13dc4:	eor	r3, r3, #1
   13dc8:	uxtb	r3, r3
   13dcc:	cmp	r3, #0
   13dd0:	bne	13ee8 <__assert_fail@plt+0x3040>
   13dd4:	nop	{0}
   13dd8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13ddc:	cmp	r3, #0
   13de0:	bne	141b8 <__assert_fail@plt+0x3310>
   13de4:	mov	r3, #1
   13de8:	strb	r3, [fp, #-41]	; 0xffffffd7
   13dec:	ldr	r3, [fp, #4]
   13df0:	cmp	r3, #2
   13df4:	bne	13ea4 <__assert_fail@plt+0x2ffc>
   13df8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13dfc:	eor	r3, r3, #1
   13e00:	uxtb	r3, r3
   13e04:	cmp	r3, #0
   13e08:	beq	13ea4 <__assert_fail@plt+0x2ffc>
   13e0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e14:	cmp	r2, r3
   13e18:	bcs	13e30 <__assert_fail@plt+0x2f88>
   13e1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e24:	add	r3, r2, r3
   13e28:	mov	r2, #39	; 0x27
   13e2c:	strb	r2, [r3]
   13e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e34:	add	r3, r3, #1
   13e38:	str	r3, [fp, #-20]	; 0xffffffec
   13e3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e44:	cmp	r2, r3
   13e48:	bcs	13e60 <__assert_fail@plt+0x2fb8>
   13e4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e54:	add	r3, r2, r3
   13e58:	mov	r2, #36	; 0x24
   13e5c:	strb	r2, [r3]
   13e60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e64:	add	r3, r3, #1
   13e68:	str	r3, [fp, #-20]	; 0xffffffec
   13e6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e74:	cmp	r2, r3
   13e78:	bcs	13e90 <__assert_fail@plt+0x2fe8>
   13e7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e84:	add	r3, r2, r3
   13e88:	mov	r2, #39	; 0x27
   13e8c:	strb	r2, [r3]
   13e90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e94:	add	r3, r3, #1
   13e98:	str	r3, [fp, #-20]	; 0xffffffec
   13e9c:	mov	r3, #1
   13ea0:	strb	r3, [fp, #-35]	; 0xffffffdd
   13ea4:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ea8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13eac:	cmp	r2, r3
   13eb0:	bcs	13ec8 <__assert_fail@plt+0x3020>
   13eb4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ebc:	add	r3, r2, r3
   13ec0:	mov	r2, #92	; 0x5c
   13ec4:	strb	r2, [r3]
   13ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ecc:	add	r3, r3, #1
   13ed0:	str	r3, [fp, #-20]	; 0xffffffec
   13ed4:	b	13eec <__assert_fail@plt+0x3044>
   13ed8:	nop	{0}
   13edc:	b	13eec <__assert_fail@plt+0x3044>
   13ee0:	nop	{0}
   13ee4:	b	13eec <__assert_fail@plt+0x3044>
   13ee8:	nop	{0}
   13eec:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13ef0:	cmp	r3, #0
   13ef4:	beq	13f74 <__assert_fail@plt+0x30cc>
   13ef8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13efc:	eor	r3, r3, #1
   13f00:	uxtb	r3, r3
   13f04:	cmp	r3, #0
   13f08:	beq	13f74 <__assert_fail@plt+0x30cc>
   13f0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f10:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f14:	cmp	r2, r3
   13f18:	bcs	13f30 <__assert_fail@plt+0x3088>
   13f1c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f24:	add	r3, r2, r3
   13f28:	mov	r2, #39	; 0x27
   13f2c:	strb	r2, [r3]
   13f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f34:	add	r3, r3, #1
   13f38:	str	r3, [fp, #-20]	; 0xffffffec
   13f3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f44:	cmp	r2, r3
   13f48:	bcs	13f60 <__assert_fail@plt+0x30b8>
   13f4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f50:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f54:	add	r3, r2, r3
   13f58:	mov	r2, #39	; 0x27
   13f5c:	strb	r2, [r3]
   13f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f64:	add	r3, r3, #1
   13f68:	str	r3, [fp, #-20]	; 0xffffffec
   13f6c:	mov	r3, #0
   13f70:	strb	r3, [fp, #-35]	; 0xffffffdd
   13f74:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f7c:	cmp	r2, r3
   13f80:	bcs	13f98 <__assert_fail@plt+0x30f0>
   13f84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f8c:	add	r3, r2, r3
   13f90:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13f94:	strb	r2, [r3]
   13f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f9c:	add	r3, r3, #1
   13fa0:	str	r3, [fp, #-20]	; 0xffffffec
   13fa4:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   13fa8:	eor	r3, r3, #1
   13fac:	uxtb	r3, r3
   13fb0:	cmp	r3, #0
   13fb4:	beq	13fc0 <__assert_fail@plt+0x3118>
   13fb8:	mov	r3, #0
   13fbc:	strb	r3, [fp, #-37]	; 0xffffffdb
   13fc0:	ldr	r3, [fp, #-16]
   13fc4:	add	r3, r3, #1
   13fc8:	str	r3, [fp, #-16]
   13fcc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13fd0:	cmn	r3, #1
   13fd4:	bne	13ffc <__assert_fail@plt+0x3154>
   13fd8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13fdc:	ldr	r3, [fp, #-16]
   13fe0:	add	r3, r2, r3
   13fe4:	ldrb	r3, [r3]
   13fe8:	cmp	r3, #0
   13fec:	movne	r3, #1
   13ff0:	moveq	r3, #0
   13ff4:	uxtb	r3, r3
   13ff8:	b	14014 <__assert_fail@plt+0x316c>
   13ffc:	ldr	r2, [fp, #-16]
   14000:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14004:	cmp	r2, r3
   14008:	movne	r3, #1
   1400c:	moveq	r3, #0
   14010:	uxtb	r3, r3
   14014:	cmp	r3, #0
   14018:	bne	12e34 <__assert_fail@plt+0x1f8c>
   1401c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14020:	cmp	r3, #0
   14024:	bne	14040 <__assert_fail@plt+0x3198>
   14028:	ldr	r3, [fp, #4]
   1402c:	cmp	r3, #2
   14030:	bne	14040 <__assert_fail@plt+0x3198>
   14034:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14038:	cmp	r3, #0
   1403c:	bne	141c0 <__assert_fail@plt+0x3318>
   14040:	ldr	r3, [fp, #4]
   14044:	cmp	r3, #2
   14048:	bne	140e8 <__assert_fail@plt+0x3240>
   1404c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14050:	eor	r3, r3, #1
   14054:	uxtb	r3, r3
   14058:	cmp	r3, #0
   1405c:	beq	140e8 <__assert_fail@plt+0x3240>
   14060:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   14064:	cmp	r3, #0
   14068:	beq	140e8 <__assert_fail@plt+0x3240>
   1406c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14070:	cmp	r3, #0
   14074:	beq	140bc <__assert_fail@plt+0x3214>
   14078:	ldr	r3, [fp, #20]
   1407c:	str	r3, [sp, #16]
   14080:	ldr	r3, [fp, #16]
   14084:	str	r3, [sp, #12]
   14088:	ldr	r3, [fp, #12]
   1408c:	str	r3, [sp, #8]
   14090:	ldr	r3, [fp, #8]
   14094:	str	r3, [sp, #4]
   14098:	mov	r3, #5
   1409c:	str	r3, [sp]
   140a0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   140a4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   140a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   140ac:	ldr	r0, [fp, #-88]	; 0xffffffa8
   140b0:	bl	12b6c <__assert_fail@plt+0x1cc4>
   140b4:	mov	r3, r0
   140b8:	b	14228 <__assert_fail@plt+0x3380>
   140bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140c0:	cmp	r3, #0
   140c4:	bne	140e8 <__assert_fail@plt+0x3240>
   140c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140cc:	cmp	r3, #0
   140d0:	beq	140e8 <__assert_fail@plt+0x3240>
   140d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140d8:	str	r3, [fp, #-92]	; 0xffffffa4
   140dc:	mov	r3, #0
   140e0:	str	r3, [fp, #-20]	; 0xffffffec
   140e4:	b	12c00 <__assert_fail@plt+0x1d58>
   140e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140ec:	cmp	r3, #0
   140f0:	beq	1415c <__assert_fail@plt+0x32b4>
   140f4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   140f8:	eor	r3, r3, #1
   140fc:	uxtb	r3, r3
   14100:	cmp	r3, #0
   14104:	beq	1415c <__assert_fail@plt+0x32b4>
   14108:	b	1414c <__assert_fail@plt+0x32a4>
   1410c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14110:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14114:	cmp	r2, r3
   14118:	bcs	14134 <__assert_fail@plt+0x328c>
   1411c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14120:	ldr	r3, [fp, #-20]	; 0xffffffec
   14124:	add	r3, r2, r3
   14128:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1412c:	ldrb	r2, [r2]
   14130:	strb	r2, [r3]
   14134:	ldr	r3, [fp, #-20]	; 0xffffffec
   14138:	add	r3, r3, #1
   1413c:	str	r3, [fp, #-20]	; 0xffffffec
   14140:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14144:	add	r3, r3, #1
   14148:	str	r3, [fp, #-28]	; 0xffffffe4
   1414c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14150:	ldrb	r3, [r3]
   14154:	cmp	r3, #0
   14158:	bne	1410c <__assert_fail@plt+0x3264>
   1415c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14160:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14164:	cmp	r2, r3
   14168:	bcs	14180 <__assert_fail@plt+0x32d8>
   1416c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14170:	ldr	r3, [fp, #-20]	; 0xffffffec
   14174:	add	r3, r2, r3
   14178:	mov	r2, #0
   1417c:	strb	r2, [r3]
   14180:	ldr	r3, [fp, #-20]	; 0xffffffec
   14184:	b	14228 <__assert_fail@plt+0x3380>
   14188:	nop	{0}
   1418c:	b	141c4 <__assert_fail@plt+0x331c>
   14190:	nop	{0}
   14194:	b	141c4 <__assert_fail@plt+0x331c>
   14198:	nop	{0}
   1419c:	b	141c4 <__assert_fail@plt+0x331c>
   141a0:	nop	{0}
   141a4:	b	141c4 <__assert_fail@plt+0x331c>
   141a8:	nop	{0}
   141ac:	b	141c4 <__assert_fail@plt+0x331c>
   141b0:	nop	{0}
   141b4:	b	141c4 <__assert_fail@plt+0x331c>
   141b8:	nop	{0}
   141bc:	b	141c4 <__assert_fail@plt+0x331c>
   141c0:	nop	{0}
   141c4:	ldr	r3, [fp, #4]
   141c8:	cmp	r3, #2
   141cc:	bne	141e4 <__assert_fail@plt+0x333c>
   141d0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   141d4:	cmp	r3, #0
   141d8:	beq	141e4 <__assert_fail@plt+0x333c>
   141dc:	mov	r3, #4
   141e0:	str	r3, [fp, #4]
   141e4:	ldr	r3, [fp, #8]
   141e8:	bic	r3, r3, #2
   141ec:	ldr	r2, [fp, #20]
   141f0:	str	r2, [sp, #16]
   141f4:	ldr	r2, [fp, #16]
   141f8:	str	r2, [sp, #12]
   141fc:	mov	r2, #0
   14200:	str	r2, [sp, #8]
   14204:	str	r3, [sp, #4]
   14208:	ldr	r3, [fp, #4]
   1420c:	str	r3, [sp]
   14210:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14214:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14218:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1421c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14220:	bl	12b6c <__assert_fail@plt+0x1cc4>
   14224:	mov	r3, r0
   14228:	mov	r0, r3
   1422c:	sub	sp, fp, #8
   14230:	ldr	r4, [sp]
   14234:	ldr	fp, [sp, #4]
   14238:	add	sp, sp, #8
   1423c:	pop	{pc}		; (ldr pc, [sp], #4)
   14240:	str	fp, [sp, #-8]!
   14244:	str	lr, [sp, #4]
   14248:	add	fp, sp, #4
   1424c:	sub	sp, sp, #56	; 0x38
   14250:	str	r0, [fp, #-24]	; 0xffffffe8
   14254:	str	r1, [fp, #-28]	; 0xffffffe4
   14258:	str	r2, [fp, #-32]	; 0xffffffe0
   1425c:	str	r3, [fp, #-36]	; 0xffffffdc
   14260:	ldr	r3, [fp, #4]
   14264:	cmp	r3, #0
   14268:	beq	14274 <__assert_fail@plt+0x33cc>
   1426c:	ldr	r3, [fp, #4]
   14270:	b	1427c <__assert_fail@plt+0x33d4>
   14274:	movw	r3, #37220	; 0x9164
   14278:	movt	r3, #2
   1427c:	str	r3, [fp, #-8]
   14280:	bl	10df4 <__errno_location@plt>
   14284:	mov	r3, r0
   14288:	ldr	r3, [r3]
   1428c:	str	r3, [fp, #-12]
   14290:	ldr	r3, [fp, #-8]
   14294:	ldr	r3, [r3]
   14298:	ldr	r2, [fp, #-8]
   1429c:	ldr	r2, [r2, #4]
   142a0:	ldr	r1, [fp, #-8]
   142a4:	add	r1, r1, #8
   142a8:	ldr	r0, [fp, #-8]
   142ac:	ldr	r0, [r0, #40]	; 0x28
   142b0:	ldr	ip, [fp, #-8]
   142b4:	ldr	ip, [ip, #44]	; 0x2c
   142b8:	str	ip, [sp, #16]
   142bc:	str	r0, [sp, #12]
   142c0:	str	r1, [sp, #8]
   142c4:	str	r2, [sp, #4]
   142c8:	str	r3, [sp]
   142cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   142d0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   142d4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   142d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   142dc:	bl	12b6c <__assert_fail@plt+0x1cc4>
   142e0:	str	r0, [fp, #-16]
   142e4:	bl	10df4 <__errno_location@plt>
   142e8:	mov	r2, r0
   142ec:	ldr	r3, [fp, #-12]
   142f0:	str	r3, [r2]
   142f4:	ldr	r3, [fp, #-16]
   142f8:	mov	r0, r3
   142fc:	sub	sp, fp, #4
   14300:	ldr	fp, [sp]
   14304:	add	sp, sp, #4
   14308:	pop	{pc}		; (ldr pc, [sp], #4)
   1430c:	str	fp, [sp, #-8]!
   14310:	str	lr, [sp, #4]
   14314:	add	fp, sp, #4
   14318:	sub	sp, sp, #16
   1431c:	str	r0, [fp, #-8]
   14320:	str	r1, [fp, #-12]
   14324:	str	r2, [fp, #-16]
   14328:	ldr	r3, [fp, #-16]
   1432c:	mov	r2, #0
   14330:	ldr	r1, [fp, #-12]
   14334:	ldr	r0, [fp, #-8]
   14338:	bl	14354 <__assert_fail@plt+0x34ac>
   1433c:	mov	r3, r0
   14340:	mov	r0, r3
   14344:	sub	sp, fp, #4
   14348:	ldr	fp, [sp]
   1434c:	add	sp, sp, #4
   14350:	pop	{pc}		; (ldr pc, [sp], #4)
   14354:	str	fp, [sp, #-8]!
   14358:	str	lr, [sp, #4]
   1435c:	add	fp, sp, #4
   14360:	sub	sp, sp, #64	; 0x40
   14364:	str	r0, [fp, #-32]	; 0xffffffe0
   14368:	str	r1, [fp, #-36]	; 0xffffffdc
   1436c:	str	r2, [fp, #-40]	; 0xffffffd8
   14370:	str	r3, [fp, #-44]	; 0xffffffd4
   14374:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14378:	cmp	r3, #0
   1437c:	beq	14388 <__assert_fail@plt+0x34e0>
   14380:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14384:	b	14390 <__assert_fail@plt+0x34e8>
   14388:	movw	r3, #37220	; 0x9164
   1438c:	movt	r3, #2
   14390:	str	r3, [fp, #-8]
   14394:	bl	10df4 <__errno_location@plt>
   14398:	mov	r3, r0
   1439c:	ldr	r3, [r3]
   143a0:	str	r3, [fp, #-12]
   143a4:	ldr	r3, [fp, #-8]
   143a8:	ldr	r3, [r3, #4]
   143ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   143b0:	cmp	r2, #0
   143b4:	moveq	r2, #1
   143b8:	movne	r2, #0
   143bc:	uxtb	r2, r2
   143c0:	orr	r3, r3, r2
   143c4:	str	r3, [fp, #-16]
   143c8:	ldr	r3, [fp, #-8]
   143cc:	ldr	r3, [r3]
   143d0:	ldr	r2, [fp, #-8]
   143d4:	add	r2, r2, #8
   143d8:	ldr	r1, [fp, #-8]
   143dc:	ldr	r1, [r1, #40]	; 0x28
   143e0:	ldr	r0, [fp, #-8]
   143e4:	ldr	r0, [r0, #44]	; 0x2c
   143e8:	str	r0, [sp, #16]
   143ec:	str	r1, [sp, #12]
   143f0:	str	r2, [sp, #8]
   143f4:	ldr	r2, [fp, #-16]
   143f8:	str	r2, [sp, #4]
   143fc:	str	r3, [sp]
   14400:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14404:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14408:	mov	r1, #0
   1440c:	mov	r0, #0
   14410:	bl	12b6c <__assert_fail@plt+0x1cc4>
   14414:	mov	r3, r0
   14418:	add	r3, r3, #1
   1441c:	str	r3, [fp, #-20]	; 0xffffffec
   14420:	ldr	r0, [fp, #-20]	; 0xffffffec
   14424:	bl	15864 <__assert_fail@plt+0x49bc>
   14428:	mov	r3, r0
   1442c:	str	r3, [fp, #-24]	; 0xffffffe8
   14430:	ldr	r3, [fp, #-8]
   14434:	ldr	r3, [r3]
   14438:	ldr	r2, [fp, #-8]
   1443c:	add	r2, r2, #8
   14440:	ldr	r1, [fp, #-8]
   14444:	ldr	r1, [r1, #40]	; 0x28
   14448:	ldr	r0, [fp, #-8]
   1444c:	ldr	r0, [r0, #44]	; 0x2c
   14450:	str	r0, [sp, #16]
   14454:	str	r1, [sp, #12]
   14458:	str	r2, [sp, #8]
   1445c:	ldr	r2, [fp, #-16]
   14460:	str	r2, [sp, #4]
   14464:	str	r3, [sp]
   14468:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1446c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14470:	ldr	r1, [fp, #-20]	; 0xffffffec
   14474:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14478:	bl	12b6c <__assert_fail@plt+0x1cc4>
   1447c:	bl	10df4 <__errno_location@plt>
   14480:	mov	r2, r0
   14484:	ldr	r3, [fp, #-12]
   14488:	str	r3, [r2]
   1448c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14490:	cmp	r3, #0
   14494:	beq	144a8 <__assert_fail@plt+0x3600>
   14498:	ldr	r3, [fp, #-20]	; 0xffffffec
   1449c:	sub	r2, r3, #1
   144a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   144a4:	str	r2, [r3]
   144a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   144ac:	mov	r0, r3
   144b0:	sub	sp, fp, #4
   144b4:	ldr	fp, [sp]
   144b8:	add	sp, sp, #4
   144bc:	pop	{pc}		; (ldr pc, [sp], #4)
   144c0:	str	fp, [sp, #-8]!
   144c4:	str	lr, [sp, #4]
   144c8:	add	fp, sp, #4
   144cc:	sub	sp, sp, #8
   144d0:	movw	r3, #37116	; 0x90fc
   144d4:	movt	r3, #2
   144d8:	ldr	r3, [r3]
   144dc:	str	r3, [fp, #-12]
   144e0:	mov	r3, #1
   144e4:	str	r3, [fp, #-8]
   144e8:	b	14514 <__assert_fail@plt+0x366c>
   144ec:	ldr	r3, [fp, #-8]
   144f0:	lsl	r3, r3, #3
   144f4:	ldr	r2, [fp, #-12]
   144f8:	add	r3, r2, r3
   144fc:	ldr	r3, [r3, #4]
   14500:	mov	r0, r3
   14504:	bl	1709c <__assert_fail@plt+0x61f4>
   14508:	ldr	r3, [fp, #-8]
   1450c:	add	r3, r3, #1
   14510:	str	r3, [fp, #-8]
   14514:	movw	r3, #37104	; 0x90f0
   14518:	movt	r3, #2
   1451c:	ldr	r3, [r3]
   14520:	ldr	r2, [fp, #-8]
   14524:	cmp	r2, r3
   14528:	blt	144ec <__assert_fail@plt+0x3644>
   1452c:	ldr	r3, [fp, #-12]
   14530:	ldr	r2, [r3, #4]
   14534:	movw	r3, #37268	; 0x9194
   14538:	movt	r3, #2
   1453c:	cmp	r2, r3
   14540:	beq	14578 <__assert_fail@plt+0x36d0>
   14544:	ldr	r3, [fp, #-12]
   14548:	ldr	r3, [r3, #4]
   1454c:	mov	r0, r3
   14550:	bl	1709c <__assert_fail@plt+0x61f4>
   14554:	movw	r3, #37108	; 0x90f4
   14558:	movt	r3, #2
   1455c:	mov	r2, #256	; 0x100
   14560:	str	r2, [r3]
   14564:	movw	r3, #37108	; 0x90f4
   14568:	movt	r3, #2
   1456c:	movw	r2, #37268	; 0x9194
   14570:	movt	r2, #2
   14574:	str	r2, [r3, #4]
   14578:	ldr	r2, [fp, #-12]
   1457c:	movw	r3, #37108	; 0x90f4
   14580:	movt	r3, #2
   14584:	cmp	r2, r3
   14588:	beq	145a8 <__assert_fail@plt+0x3700>
   1458c:	ldr	r0, [fp, #-12]
   14590:	bl	1709c <__assert_fail@plt+0x61f4>
   14594:	movw	r3, #37116	; 0x90fc
   14598:	movt	r3, #2
   1459c:	movw	r2, #37108	; 0x90f4
   145a0:	movt	r2, #2
   145a4:	str	r2, [r3]
   145a8:	movw	r3, #37104	; 0x90f0
   145ac:	movt	r3, #2
   145b0:	mov	r2, #1
   145b4:	str	r2, [r3]
   145b8:	nop	{0}
   145bc:	sub	sp, fp, #4
   145c0:	ldr	fp, [sp]
   145c4:	add	sp, sp, #4
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	str	fp, [sp, #-8]!
   145d0:	str	lr, [sp, #4]
   145d4:	add	fp, sp, #4
   145d8:	sub	sp, sp, #80	; 0x50
   145dc:	str	r0, [fp, #-48]	; 0xffffffd0
   145e0:	str	r1, [fp, #-52]	; 0xffffffcc
   145e4:	str	r2, [fp, #-56]	; 0xffffffc8
   145e8:	str	r3, [fp, #-60]	; 0xffffffc4
   145ec:	bl	10df4 <__errno_location@plt>
   145f0:	mov	r3, r0
   145f4:	ldr	r3, [r3]
   145f8:	str	r3, [fp, #-16]
   145fc:	movw	r3, #37116	; 0x90fc
   14600:	movt	r3, #2
   14604:	ldr	r3, [r3]
   14608:	str	r3, [fp, #-8]
   1460c:	mvn	r3, #-2147483648	; 0x80000000
   14610:	str	r3, [fp, #-20]	; 0xffffffec
   14614:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14618:	cmp	r3, #0
   1461c:	blt	14630 <__assert_fail@plt+0x3788>
   14620:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14624:	ldr	r3, [fp, #-20]	; 0xffffffec
   14628:	cmp	r2, r3
   1462c:	blt	14634 <__assert_fail@plt+0x378c>
   14630:	bl	10e90 <abort@plt>
   14634:	movw	r3, #37104	; 0x90f0
   14638:	movt	r3, #2
   1463c:	ldr	r3, [r3]
   14640:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14644:	cmp	r2, r3
   14648:	blt	14740 <__assert_fail@plt+0x3898>
   1464c:	ldr	r2, [fp, #-8]
   14650:	movw	r3, #37108	; 0x90f4
   14654:	movt	r3, #2
   14658:	cmp	r2, r3
   1465c:	moveq	r3, #1
   14660:	movne	r3, #0
   14664:	strb	r3, [fp, #-21]	; 0xffffffeb
   14668:	movw	r3, #37104	; 0x90f0
   1466c:	movt	r3, #2
   14670:	ldr	r3, [r3]
   14674:	str	r3, [fp, #-40]	; 0xffffffd8
   14678:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   1467c:	cmp	r3, #0
   14680:	beq	1468c <__assert_fail@plt+0x37e4>
   14684:	mov	r0, #0
   14688:	b	14690 <__assert_fail@plt+0x37e8>
   1468c:	ldr	r0, [fp, #-8]
   14690:	movw	r3, #37104	; 0x90f0
   14694:	movt	r3, #2
   14698:	ldr	r3, [r3]
   1469c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   146a0:	sub	r3, r2, r3
   146a4:	add	r2, r3, #1
   146a8:	sub	r1, fp, #40	; 0x28
   146ac:	mov	r3, #8
   146b0:	str	r3, [sp]
   146b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b8:	bl	15bc4 <__assert_fail@plt+0x4d1c>
   146bc:	str	r0, [fp, #-8]
   146c0:	movw	r3, #37116	; 0x90fc
   146c4:	movt	r3, #2
   146c8:	ldr	r2, [fp, #-8]
   146cc:	str	r2, [r3]
   146d0:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   146d4:	cmp	r3, #0
   146d8:	beq	146f4 <__assert_fail@plt+0x384c>
   146dc:	ldr	r2, [fp, #-8]
   146e0:	movw	r3, #37108	; 0x90f4
   146e4:	movt	r3, #2
   146e8:	mov	r1, r2
   146ec:	ldrd	r2, [r3]
   146f0:	strd	r2, [r1]
   146f4:	movw	r3, #37104	; 0x90f0
   146f8:	movt	r3, #2
   146fc:	ldr	r3, [r3]
   14700:	lsl	r3, r3, #3
   14704:	ldr	r2, [fp, #-8]
   14708:	add	r0, r2, r3
   1470c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14710:	movw	r3, #37104	; 0x90f0
   14714:	movt	r3, #2
   14718:	ldr	r3, [r3]
   1471c:	sub	r3, r2, r3
   14720:	lsl	r3, r3, #3
   14724:	mov	r2, r3
   14728:	mov	r1, #0
   1472c:	bl	10e0c <memset@plt>
   14730:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14734:	movw	r3, #37104	; 0x90f0
   14738:	movt	r3, #2
   1473c:	str	r2, [r3]
   14740:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14744:	lsl	r3, r3, #3
   14748:	ldr	r2, [fp, #-8]
   1474c:	add	r3, r2, r3
   14750:	ldr	r3, [r3]
   14754:	str	r3, [fp, #-28]	; 0xffffffe4
   14758:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1475c:	lsl	r3, r3, #3
   14760:	ldr	r2, [fp, #-8]
   14764:	add	r3, r2, r3
   14768:	ldr	r3, [r3, #4]
   1476c:	str	r3, [fp, #-12]
   14770:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14774:	ldr	r3, [r3, #4]
   14778:	orr	r3, r3, #1
   1477c:	str	r3, [fp, #-32]	; 0xffffffe0
   14780:	ldr	r3, [fp, #-60]	; 0xffffffc4
   14784:	ldr	r3, [r3]
   14788:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1478c:	add	r2, r2, #8
   14790:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14794:	ldr	r1, [r1, #40]	; 0x28
   14798:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1479c:	ldr	r0, [r0, #44]	; 0x2c
   147a0:	str	r0, [sp, #16]
   147a4:	str	r1, [sp, #12]
   147a8:	str	r2, [sp, #8]
   147ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147b0:	str	r2, [sp, #4]
   147b4:	str	r3, [sp]
   147b8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   147bc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   147c0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   147c4:	ldr	r0, [fp, #-12]
   147c8:	bl	12b6c <__assert_fail@plt+0x1cc4>
   147cc:	str	r0, [fp, #-36]	; 0xffffffdc
   147d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   147d4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147d8:	cmp	r2, r3
   147dc:	bhi	14894 <__assert_fail@plt+0x39ec>
   147e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147e4:	add	r3, r3, #1
   147e8:	str	r3, [fp, #-28]	; 0xffffffe4
   147ec:	ldr	r3, [fp, #-48]	; 0xffffffd0
   147f0:	lsl	r3, r3, #3
   147f4:	ldr	r2, [fp, #-8]
   147f8:	add	r3, r2, r3
   147fc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14800:	str	r2, [r3]
   14804:	ldr	r2, [fp, #-12]
   14808:	movw	r3, #37268	; 0x9194
   1480c:	movt	r3, #2
   14810:	cmp	r2, r3
   14814:	beq	14820 <__assert_fail@plt+0x3978>
   14818:	ldr	r0, [fp, #-12]
   1481c:	bl	1709c <__assert_fail@plt+0x61f4>
   14820:	ldr	r0, [fp, #-28]	; 0xffffffe4
   14824:	bl	15864 <__assert_fail@plt+0x49bc>
   14828:	mov	r3, r0
   1482c:	str	r3, [fp, #-12]
   14830:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14834:	lsl	r3, r3, #3
   14838:	ldr	r2, [fp, #-8]
   1483c:	add	r3, r2, r3
   14840:	ldr	r2, [fp, #-12]
   14844:	str	r2, [r3, #4]
   14848:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1484c:	ldr	r3, [r3]
   14850:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14854:	add	r2, r2, #8
   14858:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1485c:	ldr	r1, [r1, #40]	; 0x28
   14860:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14864:	ldr	r0, [r0, #44]	; 0x2c
   14868:	str	r0, [sp, #16]
   1486c:	str	r1, [sp, #12]
   14870:	str	r2, [sp, #8]
   14874:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14878:	str	r2, [sp, #4]
   1487c:	str	r3, [sp]
   14880:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14884:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14888:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1488c:	ldr	r0, [fp, #-12]
   14890:	bl	12b6c <__assert_fail@plt+0x1cc4>
   14894:	bl	10df4 <__errno_location@plt>
   14898:	mov	r2, r0
   1489c:	ldr	r3, [fp, #-16]
   148a0:	str	r3, [r2]
   148a4:	ldr	r3, [fp, #-12]
   148a8:	mov	r0, r3
   148ac:	sub	sp, fp, #4
   148b0:	ldr	fp, [sp]
   148b4:	add	sp, sp, #4
   148b8:	pop	{pc}		; (ldr pc, [sp], #4)
   148bc:	str	fp, [sp, #-8]!
   148c0:	str	lr, [sp, #4]
   148c4:	add	fp, sp, #4
   148c8:	sub	sp, sp, #8
   148cc:	str	r0, [fp, #-8]
   148d0:	str	r1, [fp, #-12]
   148d4:	movw	r3, #37220	; 0x9164
   148d8:	movt	r3, #2
   148dc:	mvn	r2, #0
   148e0:	ldr	r1, [fp, #-12]
   148e4:	ldr	r0, [fp, #-8]
   148e8:	bl	145cc <__assert_fail@plt+0x3724>
   148ec:	mov	r3, r0
   148f0:	mov	r0, r3
   148f4:	sub	sp, fp, #4
   148f8:	ldr	fp, [sp]
   148fc:	add	sp, sp, #4
   14900:	pop	{pc}		; (ldr pc, [sp], #4)
   14904:	str	fp, [sp, #-8]!
   14908:	str	lr, [sp, #4]
   1490c:	add	fp, sp, #4
   14910:	sub	sp, sp, #16
   14914:	str	r0, [fp, #-8]
   14918:	str	r1, [fp, #-12]
   1491c:	str	r2, [fp, #-16]
   14920:	movw	r3, #37220	; 0x9164
   14924:	movt	r3, #2
   14928:	ldr	r2, [fp, #-16]
   1492c:	ldr	r1, [fp, #-12]
   14930:	ldr	r0, [fp, #-8]
   14934:	bl	145cc <__assert_fail@plt+0x3724>
   14938:	mov	r3, r0
   1493c:	mov	r0, r3
   14940:	sub	sp, fp, #4
   14944:	ldr	fp, [sp]
   14948:	add	sp, sp, #4
   1494c:	pop	{pc}		; (ldr pc, [sp], #4)
   14950:	str	fp, [sp, #-8]!
   14954:	str	lr, [sp, #4]
   14958:	add	fp, sp, #4
   1495c:	sub	sp, sp, #8
   14960:	str	r0, [fp, #-8]
   14964:	ldr	r1, [fp, #-8]
   14968:	mov	r0, #0
   1496c:	bl	148bc <__assert_fail@plt+0x3a14>
   14970:	mov	r3, r0
   14974:	mov	r0, r3
   14978:	sub	sp, fp, #4
   1497c:	ldr	fp, [sp]
   14980:	add	sp, sp, #4
   14984:	pop	{pc}		; (ldr pc, [sp], #4)
   14988:	str	fp, [sp, #-8]!
   1498c:	str	lr, [sp, #4]
   14990:	add	fp, sp, #4
   14994:	sub	sp, sp, #8
   14998:	str	r0, [fp, #-8]
   1499c:	str	r1, [fp, #-12]
   149a0:	ldr	r2, [fp, #-12]
   149a4:	ldr	r1, [fp, #-8]
   149a8:	mov	r0, #0
   149ac:	bl	14904 <__assert_fail@plt+0x3a5c>
   149b0:	mov	r3, r0
   149b4:	mov	r0, r3
   149b8:	sub	sp, fp, #4
   149bc:	ldr	fp, [sp]
   149c0:	add	sp, sp, #4
   149c4:	pop	{pc}		; (ldr pc, [sp], #4)
   149c8:	str	fp, [sp, #-8]!
   149cc:	str	lr, [sp, #4]
   149d0:	add	fp, sp, #4
   149d4:	sub	sp, sp, #64	; 0x40
   149d8:	str	r0, [fp, #-56]	; 0xffffffc8
   149dc:	str	r1, [fp, #-60]	; 0xffffffc4
   149e0:	str	r2, [fp, #-64]	; 0xffffffc0
   149e4:	sub	r3, fp, #52	; 0x34
   149e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   149ec:	mov	r0, r3
   149f0:	bl	129c8 <__assert_fail@plt+0x1b20>
   149f4:	sub	r3, fp, #52	; 0x34
   149f8:	mvn	r2, #0
   149fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14a00:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a04:	bl	145cc <__assert_fail@plt+0x3724>
   14a08:	mov	r3, r0
   14a0c:	mov	r0, r3
   14a10:	sub	sp, fp, #4
   14a14:	ldr	fp, [sp]
   14a18:	add	sp, sp, #4
   14a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a20:	str	fp, [sp, #-8]!
   14a24:	str	lr, [sp, #4]
   14a28:	add	fp, sp, #4
   14a2c:	sub	sp, sp, #64	; 0x40
   14a30:	str	r0, [fp, #-56]	; 0xffffffc8
   14a34:	str	r1, [fp, #-60]	; 0xffffffc4
   14a38:	str	r2, [fp, #-64]	; 0xffffffc0
   14a3c:	str	r3, [fp, #-68]	; 0xffffffbc
   14a40:	sub	r3, fp, #52	; 0x34
   14a44:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14a48:	mov	r0, r3
   14a4c:	bl	129c8 <__assert_fail@plt+0x1b20>
   14a50:	sub	r3, fp, #52	; 0x34
   14a54:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14a58:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14a5c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a60:	bl	145cc <__assert_fail@plt+0x3724>
   14a64:	mov	r3, r0
   14a68:	mov	r0, r3
   14a6c:	sub	sp, fp, #4
   14a70:	ldr	fp, [sp]
   14a74:	add	sp, sp, #4
   14a78:	pop	{pc}		; (ldr pc, [sp], #4)
   14a7c:	str	fp, [sp, #-8]!
   14a80:	str	lr, [sp, #4]
   14a84:	add	fp, sp, #4
   14a88:	sub	sp, sp, #8
   14a8c:	str	r0, [fp, #-8]
   14a90:	str	r1, [fp, #-12]
   14a94:	ldr	r2, [fp, #-12]
   14a98:	ldr	r1, [fp, #-8]
   14a9c:	mov	r0, #0
   14aa0:	bl	149c8 <__assert_fail@plt+0x3b20>
   14aa4:	mov	r3, r0
   14aa8:	mov	r0, r3
   14aac:	sub	sp, fp, #4
   14ab0:	ldr	fp, [sp]
   14ab4:	add	sp, sp, #4
   14ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   14abc:	str	fp, [sp, #-8]!
   14ac0:	str	lr, [sp, #4]
   14ac4:	add	fp, sp, #4
   14ac8:	sub	sp, sp, #16
   14acc:	str	r0, [fp, #-8]
   14ad0:	str	r1, [fp, #-12]
   14ad4:	str	r2, [fp, #-16]
   14ad8:	ldr	r3, [fp, #-16]
   14adc:	ldr	r2, [fp, #-12]
   14ae0:	ldr	r1, [fp, #-8]
   14ae4:	mov	r0, #0
   14ae8:	bl	14a20 <__assert_fail@plt+0x3b78>
   14aec:	mov	r3, r0
   14af0:	mov	r0, r3
   14af4:	sub	sp, fp, #4
   14af8:	ldr	fp, [sp]
   14afc:	add	sp, sp, #4
   14b00:	pop	{pc}		; (ldr pc, [sp], #4)
   14b04:	str	fp, [sp, #-8]!
   14b08:	str	lr, [sp, #4]
   14b0c:	add	fp, sp, #4
   14b10:	sub	sp, sp, #64	; 0x40
   14b14:	str	r0, [fp, #-56]	; 0xffffffc8
   14b18:	str	r1, [fp, #-60]	; 0xffffffc4
   14b1c:	mov	r3, r2
   14b20:	strb	r3, [fp, #-61]	; 0xffffffc3
   14b24:	movw	r2, #37220	; 0x9164
   14b28:	movt	r2, #2
   14b2c:	sub	r3, fp, #52	; 0x34
   14b30:	ldrd	r0, [r2]
   14b34:	strd	r0, [r3]
   14b38:	ldrd	r0, [r2, #8]
   14b3c:	strd	r0, [r3, #8]
   14b40:	ldrd	r0, [r2, #16]
   14b44:	strd	r0, [r3, #16]
   14b48:	ldrd	r0, [r2, #24]
   14b4c:	strd	r0, [r3, #24]
   14b50:	ldrd	r0, [r2, #32]
   14b54:	strd	r0, [r3, #32]
   14b58:	ldrd	r0, [r2, #40]	; 0x28
   14b5c:	strd	r0, [r3, #40]	; 0x28
   14b60:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   14b64:	sub	r3, fp, #52	; 0x34
   14b68:	mov	r2, #1
   14b6c:	mov	r0, r3
   14b70:	bl	12828 <__assert_fail@plt+0x1980>
   14b74:	sub	r3, fp, #52	; 0x34
   14b78:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14b7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14b80:	mov	r0, #0
   14b84:	bl	145cc <__assert_fail@plt+0x3724>
   14b88:	mov	r3, r0
   14b8c:	mov	r0, r3
   14b90:	sub	sp, fp, #4
   14b94:	ldr	fp, [sp]
   14b98:	add	sp, sp, #4
   14b9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14ba0:	str	fp, [sp, #-8]!
   14ba4:	str	lr, [sp, #4]
   14ba8:	add	fp, sp, #4
   14bac:	sub	sp, sp, #8
   14bb0:	str	r0, [fp, #-8]
   14bb4:	mov	r3, r1
   14bb8:	strb	r3, [fp, #-9]
   14bbc:	ldrb	r3, [fp, #-9]
   14bc0:	mov	r2, r3
   14bc4:	mvn	r1, #0
   14bc8:	ldr	r0, [fp, #-8]
   14bcc:	bl	14b04 <__assert_fail@plt+0x3c5c>
   14bd0:	mov	r3, r0
   14bd4:	mov	r0, r3
   14bd8:	sub	sp, fp, #4
   14bdc:	ldr	fp, [sp]
   14be0:	add	sp, sp, #4
   14be4:	pop	{pc}		; (ldr pc, [sp], #4)
   14be8:	str	fp, [sp, #-8]!
   14bec:	str	lr, [sp, #4]
   14bf0:	add	fp, sp, #4
   14bf4:	sub	sp, sp, #8
   14bf8:	str	r0, [fp, #-8]
   14bfc:	mov	r1, #58	; 0x3a
   14c00:	ldr	r0, [fp, #-8]
   14c04:	bl	14ba0 <__assert_fail@plt+0x3cf8>
   14c08:	mov	r3, r0
   14c0c:	mov	r0, r3
   14c10:	sub	sp, fp, #4
   14c14:	ldr	fp, [sp]
   14c18:	add	sp, sp, #4
   14c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c20:	str	fp, [sp, #-8]!
   14c24:	str	lr, [sp, #4]
   14c28:	add	fp, sp, #4
   14c2c:	sub	sp, sp, #8
   14c30:	str	r0, [fp, #-8]
   14c34:	str	r1, [fp, #-12]
   14c38:	mov	r2, #58	; 0x3a
   14c3c:	ldr	r1, [fp, #-12]
   14c40:	ldr	r0, [fp, #-8]
   14c44:	bl	14b04 <__assert_fail@plt+0x3c5c>
   14c48:	mov	r3, r0
   14c4c:	mov	r0, r3
   14c50:	sub	sp, fp, #4
   14c54:	ldr	fp, [sp]
   14c58:	add	sp, sp, #4
   14c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c60:	str	fp, [sp, #-8]!
   14c64:	str	lr, [sp, #4]
   14c68:	add	fp, sp, #4
   14c6c:	sub	sp, sp, #112	; 0x70
   14c70:	str	r0, [fp, #-56]	; 0xffffffc8
   14c74:	str	r1, [fp, #-60]	; 0xffffffc4
   14c78:	str	r2, [fp, #-64]	; 0xffffffc0
   14c7c:	sub	r3, fp, #116	; 0x74
   14c80:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14c84:	mov	r0, r3
   14c88:	bl	129c8 <__assert_fail@plt+0x1b20>
   14c8c:	sub	r3, fp, #52	; 0x34
   14c90:	sub	r2, fp, #116	; 0x74
   14c94:	ldrd	r0, [r2]
   14c98:	strd	r0, [r3]
   14c9c:	ldrd	r0, [r2, #8]
   14ca0:	strd	r0, [r3, #8]
   14ca4:	ldrd	r0, [r2, #16]
   14ca8:	strd	r0, [r3, #16]
   14cac:	ldrd	r0, [r2, #24]
   14cb0:	strd	r0, [r3, #24]
   14cb4:	ldrd	r0, [r2, #32]
   14cb8:	strd	r0, [r3, #32]
   14cbc:	ldrd	r0, [r2, #40]	; 0x28
   14cc0:	strd	r0, [r3, #40]	; 0x28
   14cc4:	sub	r3, fp, #52	; 0x34
   14cc8:	mov	r2, #1
   14ccc:	mov	r1, #58	; 0x3a
   14cd0:	mov	r0, r3
   14cd4:	bl	12828 <__assert_fail@plt+0x1980>
   14cd8:	sub	r3, fp, #52	; 0x34
   14cdc:	mvn	r2, #0
   14ce0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14ce4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14ce8:	bl	145cc <__assert_fail@plt+0x3724>
   14cec:	mov	r3, r0
   14cf0:	mov	r0, r3
   14cf4:	sub	sp, fp, #4
   14cf8:	ldr	fp, [sp]
   14cfc:	add	sp, sp, #4
   14d00:	pop	{pc}		; (ldr pc, [sp], #4)
   14d04:	str	fp, [sp, #-8]!
   14d08:	str	lr, [sp, #4]
   14d0c:	add	fp, sp, #4
   14d10:	sub	sp, sp, #24
   14d14:	str	r0, [fp, #-8]
   14d18:	str	r1, [fp, #-12]
   14d1c:	str	r2, [fp, #-16]
   14d20:	str	r3, [fp, #-20]	; 0xffffffec
   14d24:	mvn	r3, #0
   14d28:	str	r3, [sp]
   14d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d30:	ldr	r2, [fp, #-16]
   14d34:	ldr	r1, [fp, #-12]
   14d38:	ldr	r0, [fp, #-8]
   14d3c:	bl	14d58 <__assert_fail@plt+0x3eb0>
   14d40:	mov	r3, r0
   14d44:	mov	r0, r3
   14d48:	sub	sp, fp, #4
   14d4c:	ldr	fp, [sp]
   14d50:	add	sp, sp, #4
   14d54:	pop	{pc}		; (ldr pc, [sp], #4)
   14d58:	str	fp, [sp, #-8]!
   14d5c:	str	lr, [sp, #4]
   14d60:	add	fp, sp, #4
   14d64:	sub	sp, sp, #64	; 0x40
   14d68:	str	r0, [fp, #-56]	; 0xffffffc8
   14d6c:	str	r1, [fp, #-60]	; 0xffffffc4
   14d70:	str	r2, [fp, #-64]	; 0xffffffc0
   14d74:	str	r3, [fp, #-68]	; 0xffffffbc
   14d78:	movw	r2, #37220	; 0x9164
   14d7c:	movt	r2, #2
   14d80:	sub	r3, fp, #52	; 0x34
   14d84:	ldrd	r0, [r2]
   14d88:	strd	r0, [r3]
   14d8c:	ldrd	r0, [r2, #8]
   14d90:	strd	r0, [r3, #8]
   14d94:	ldrd	r0, [r2, #16]
   14d98:	strd	r0, [r3, #16]
   14d9c:	ldrd	r0, [r2, #24]
   14da0:	strd	r0, [r3, #24]
   14da4:	ldrd	r0, [r2, #32]
   14da8:	strd	r0, [r3, #32]
   14dac:	ldrd	r0, [r2, #40]	; 0x28
   14db0:	strd	r0, [r3, #40]	; 0x28
   14db4:	sub	r3, fp, #52	; 0x34
   14db8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14dbc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14dc0:	mov	r0, r3
   14dc4:	bl	12940 <__assert_fail@plt+0x1a98>
   14dc8:	sub	r3, fp, #52	; 0x34
   14dcc:	ldr	r2, [fp, #4]
   14dd0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14dd4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14dd8:	bl	145cc <__assert_fail@plt+0x3724>
   14ddc:	mov	r3, r0
   14de0:	mov	r0, r3
   14de4:	sub	sp, fp, #4
   14de8:	ldr	fp, [sp]
   14dec:	add	sp, sp, #4
   14df0:	pop	{pc}		; (ldr pc, [sp], #4)
   14df4:	str	fp, [sp, #-8]!
   14df8:	str	lr, [sp, #4]
   14dfc:	add	fp, sp, #4
   14e00:	sub	sp, sp, #16
   14e04:	str	r0, [fp, #-8]
   14e08:	str	r1, [fp, #-12]
   14e0c:	str	r2, [fp, #-16]
   14e10:	ldr	r3, [fp, #-16]
   14e14:	ldr	r2, [fp, #-12]
   14e18:	ldr	r1, [fp, #-8]
   14e1c:	mov	r0, #0
   14e20:	bl	14d04 <__assert_fail@plt+0x3e5c>
   14e24:	mov	r3, r0
   14e28:	mov	r0, r3
   14e2c:	sub	sp, fp, #4
   14e30:	ldr	fp, [sp]
   14e34:	add	sp, sp, #4
   14e38:	pop	{pc}		; (ldr pc, [sp], #4)
   14e3c:	str	fp, [sp, #-8]!
   14e40:	str	lr, [sp, #4]
   14e44:	add	fp, sp, #4
   14e48:	sub	sp, sp, #24
   14e4c:	str	r0, [fp, #-8]
   14e50:	str	r1, [fp, #-12]
   14e54:	str	r2, [fp, #-16]
   14e58:	str	r3, [fp, #-20]	; 0xffffffec
   14e5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14e60:	str	r3, [sp]
   14e64:	ldr	r3, [fp, #-16]
   14e68:	ldr	r2, [fp, #-12]
   14e6c:	ldr	r1, [fp, #-8]
   14e70:	mov	r0, #0
   14e74:	bl	14d58 <__assert_fail@plt+0x3eb0>
   14e78:	mov	r3, r0
   14e7c:	mov	r0, r3
   14e80:	sub	sp, fp, #4
   14e84:	ldr	fp, [sp]
   14e88:	add	sp, sp, #4
   14e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e90:	str	fp, [sp, #-8]!
   14e94:	str	lr, [sp, #4]
   14e98:	add	fp, sp, #4
   14e9c:	sub	sp, sp, #16
   14ea0:	str	r0, [fp, #-8]
   14ea4:	str	r1, [fp, #-12]
   14ea8:	str	r2, [fp, #-16]
   14eac:	movw	r3, #37120	; 0x9100
   14eb0:	movt	r3, #2
   14eb4:	ldr	r2, [fp, #-16]
   14eb8:	ldr	r1, [fp, #-12]
   14ebc:	ldr	r0, [fp, #-8]
   14ec0:	bl	145cc <__assert_fail@plt+0x3724>
   14ec4:	mov	r3, r0
   14ec8:	mov	r0, r3
   14ecc:	sub	sp, fp, #4
   14ed0:	ldr	fp, [sp]
   14ed4:	add	sp, sp, #4
   14ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   14edc:	str	fp, [sp, #-8]!
   14ee0:	str	lr, [sp, #4]
   14ee4:	add	fp, sp, #4
   14ee8:	sub	sp, sp, #8
   14eec:	str	r0, [fp, #-8]
   14ef0:	str	r1, [fp, #-12]
   14ef4:	ldr	r2, [fp, #-12]
   14ef8:	ldr	r1, [fp, #-8]
   14efc:	mov	r0, #0
   14f00:	bl	14e90 <__assert_fail@plt+0x3fe8>
   14f04:	mov	r3, r0
   14f08:	mov	r0, r3
   14f0c:	sub	sp, fp, #4
   14f10:	ldr	fp, [sp]
   14f14:	add	sp, sp, #4
   14f18:	pop	{pc}		; (ldr pc, [sp], #4)
   14f1c:	str	fp, [sp, #-8]!
   14f20:	str	lr, [sp, #4]
   14f24:	add	fp, sp, #4
   14f28:	sub	sp, sp, #8
   14f2c:	str	r0, [fp, #-8]
   14f30:	str	r1, [fp, #-12]
   14f34:	mvn	r2, #0
   14f38:	ldr	r1, [fp, #-12]
   14f3c:	ldr	r0, [fp, #-8]
   14f40:	bl	14e90 <__assert_fail@plt+0x3fe8>
   14f44:	mov	r3, r0
   14f48:	mov	r0, r3
   14f4c:	sub	sp, fp, #4
   14f50:	ldr	fp, [sp]
   14f54:	add	sp, sp, #4
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	str	fp, [sp, #-8]!
   14f60:	str	lr, [sp, #4]
   14f64:	add	fp, sp, #4
   14f68:	sub	sp, sp, #8
   14f6c:	str	r0, [fp, #-8]
   14f70:	ldr	r1, [fp, #-8]
   14f74:	mov	r0, #0
   14f78:	bl	14f1c <__assert_fail@plt+0x4074>
   14f7c:	mov	r3, r0
   14f80:	mov	r0, r3
   14f84:	sub	sp, fp, #4
   14f88:	ldr	fp, [sp]
   14f8c:	add	sp, sp, #4
   14f90:	pop	{pc}		; (ldr pc, [sp], #4)
   14f94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f98:	strd	r6, [sp, #8]
   14f9c:	str	fp, [sp, #16]
   14fa0:	str	lr, [sp, #20]
   14fa4:	add	fp, sp, #20
   14fa8:	sub	sp, sp, #48	; 0x30
   14fac:	str	r0, [fp, #-24]	; 0xffffffe8
   14fb0:	str	r1, [fp, #-28]	; 0xffffffe4
   14fb4:	str	r2, [fp, #-32]	; 0xffffffe0
   14fb8:	str	r3, [fp, #-36]	; 0xffffffdc
   14fbc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fc0:	cmp	r3, #0
   14fc4:	beq	14fec <__assert_fail@plt+0x4144>
   14fc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14fcc:	str	r3, [sp]
   14fd0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fd4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14fd8:	movw	r1, #35352	; 0x8a18
   14fdc:	movt	r1, #1
   14fe0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14fe4:	bl	10de8 <fprintf@plt>
   14fe8:	b	15004 <__assert_fail@plt+0x415c>
   14fec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14ff0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14ff4:	movw	r1, #35364	; 0x8a24
   14ff8:	movt	r1, #1
   14ffc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15000:	bl	10de8 <fprintf@plt>
   15004:	movw	r0, #35372	; 0x8a2c
   15008:	movt	r0, #1
   1500c:	bl	10dc4 <gettext@plt>
   15010:	mov	r2, r0
   15014:	movw	r3, #2022	; 0x7e6
   15018:	movw	r1, #36156	; 0x8d3c
   1501c:	movt	r1, #1
   15020:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15024:	bl	10de8 <fprintf@plt>
   15028:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1502c:	mov	r0, #10
   15030:	bl	10cd4 <fputc_unlocked@plt>
   15034:	movw	r0, #35376	; 0x8a30
   15038:	movt	r0, #1
   1503c:	bl	10dc4 <gettext@plt>
   15040:	mov	r3, r0
   15044:	movw	r2, #35548	; 0x8adc
   15048:	movt	r2, #1
   1504c:	mov	r1, r3
   15050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15054:	bl	10de8 <fprintf@plt>
   15058:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1505c:	mov	r0, #10
   15060:	bl	10cd4 <fputc_unlocked@plt>
   15064:	ldr	r3, [fp, #8]
   15068:	cmp	r3, #9
   1506c:	ldrls	pc, [pc, r3, lsl #2]
   15070:	b	15450 <__assert_fail@plt+0x45a8>
   15074:	strdeq	r5, [r1], -ip
   15078:	muleq	r1, ip, r0
   1507c:	andeq	r5, r1, r4, asr #1
   15080:	strdeq	r5, [r1], -r4
   15084:	andeq	r5, r1, r8, lsr r1
   15088:	muleq	r1, r4, r1
   1508c:	andeq	r5, r1, r0, lsl #4
   15090:	andeq	r5, r1, ip, ror r2
   15094:	andeq	r5, r1, r8, lsl #6
   15098:	andeq	r5, r1, r4, lsr #7
   1509c:	movw	r0, #35584	; 0x8b00
   150a0:	movt	r0, #1
   150a4:	bl	10dc4 <gettext@plt>
   150a8:	mov	r1, r0
   150ac:	ldr	r3, [fp, #4]
   150b0:	ldr	r3, [r3]
   150b4:	mov	r2, r3
   150b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   150bc:	bl	10de8 <fprintf@plt>
   150c0:	b	15500 <__assert_fail@plt+0x4658>
   150c4:	movw	r0, #35600	; 0x8b10
   150c8:	movt	r0, #1
   150cc:	bl	10dc4 <gettext@plt>
   150d0:	mov	r1, r0
   150d4:	ldr	r3, [fp, #4]
   150d8:	ldr	r2, [r3]
   150dc:	ldr	r3, [fp, #4]
   150e0:	add	r3, r3, #4
   150e4:	ldr	r3, [r3]
   150e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   150ec:	bl	10de8 <fprintf@plt>
   150f0:	b	15500 <__assert_fail@plt+0x4658>
   150f4:	movw	r0, #35624	; 0x8b28
   150f8:	movt	r0, #1
   150fc:	bl	10dc4 <gettext@plt>
   15100:	ldr	r3, [fp, #4]
   15104:	ldr	r2, [r3]
   15108:	ldr	r3, [fp, #4]
   1510c:	add	r3, r3, #4
   15110:	ldr	r1, [r3]
   15114:	ldr	r3, [fp, #4]
   15118:	add	r3, r3, #8
   1511c:	ldr	r3, [r3]
   15120:	str	r3, [sp]
   15124:	mov	r3, r1
   15128:	mov	r1, r0
   1512c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15130:	bl	10de8 <fprintf@plt>
   15134:	b	15500 <__assert_fail@plt+0x4658>
   15138:	movw	r0, #35652	; 0x8b44
   1513c:	movt	r0, #1
   15140:	bl	10dc4 <gettext@plt>
   15144:	mov	ip, r0
   15148:	ldr	r3, [fp, #4]
   1514c:	ldr	r1, [r3]
   15150:	ldr	r3, [fp, #4]
   15154:	add	r3, r3, #4
   15158:	ldr	r0, [r3]
   1515c:	ldr	r3, [fp, #4]
   15160:	add	r3, r3, #8
   15164:	ldr	r3, [r3]
   15168:	ldr	r2, [fp, #4]
   1516c:	add	r2, r2, #12
   15170:	ldr	r2, [r2]
   15174:	str	r2, [sp, #4]
   15178:	str	r3, [sp]
   1517c:	mov	r3, r0
   15180:	mov	r2, r1
   15184:	mov	r1, ip
   15188:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1518c:	bl	10de8 <fprintf@plt>
   15190:	b	15500 <__assert_fail@plt+0x4658>
   15194:	movw	r0, #35684	; 0x8b64
   15198:	movt	r0, #1
   1519c:	bl	10dc4 <gettext@plt>
   151a0:	mov	lr, r0
   151a4:	ldr	r3, [fp, #4]
   151a8:	ldr	r0, [r3]
   151ac:	ldr	r3, [fp, #4]
   151b0:	add	r3, r3, #4
   151b4:	ldr	ip, [r3]
   151b8:	ldr	r3, [fp, #4]
   151bc:	add	r3, r3, #8
   151c0:	ldr	r3, [r3]
   151c4:	ldr	r2, [fp, #4]
   151c8:	add	r2, r2, #12
   151cc:	ldr	r2, [r2]
   151d0:	ldr	r1, [fp, #4]
   151d4:	add	r1, r1, #16
   151d8:	ldr	r1, [r1]
   151dc:	str	r1, [sp, #8]
   151e0:	str	r2, [sp, #4]
   151e4:	str	r3, [sp]
   151e8:	mov	r3, ip
   151ec:	mov	r2, r0
   151f0:	mov	r1, lr
   151f4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151f8:	bl	10de8 <fprintf@plt>
   151fc:	b	15500 <__assert_fail@plt+0x4658>
   15200:	movw	r0, #35720	; 0x8b88
   15204:	movt	r0, #1
   15208:	bl	10dc4 <gettext@plt>
   1520c:	mov	r4, r0
   15210:	ldr	r3, [fp, #4]
   15214:	ldr	ip, [r3]
   15218:	ldr	r3, [fp, #4]
   1521c:	add	r3, r3, #4
   15220:	ldr	lr, [r3]
   15224:	ldr	r3, [fp, #4]
   15228:	add	r3, r3, #8
   1522c:	ldr	r3, [r3]
   15230:	ldr	r2, [fp, #4]
   15234:	add	r2, r2, #12
   15238:	ldr	r2, [r2]
   1523c:	ldr	r1, [fp, #4]
   15240:	add	r1, r1, #16
   15244:	ldr	r1, [r1]
   15248:	ldr	r0, [fp, #4]
   1524c:	add	r0, r0, #20
   15250:	ldr	r0, [r0]
   15254:	str	r0, [sp, #12]
   15258:	str	r1, [sp, #8]
   1525c:	str	r2, [sp, #4]
   15260:	str	r3, [sp]
   15264:	mov	r3, lr
   15268:	mov	r2, ip
   1526c:	mov	r1, r4
   15270:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15274:	bl	10de8 <fprintf@plt>
   15278:	b	15500 <__assert_fail@plt+0x4658>
   1527c:	movw	r0, #35760	; 0x8bb0
   15280:	movt	r0, #1
   15284:	bl	10dc4 <gettext@plt>
   15288:	mov	r5, r0
   1528c:	ldr	r3, [fp, #4]
   15290:	ldr	lr, [r3]
   15294:	ldr	r3, [fp, #4]
   15298:	add	r3, r3, #4
   1529c:	ldr	r4, [r3]
   152a0:	ldr	r3, [fp, #4]
   152a4:	add	r3, r3, #8
   152a8:	ldr	r3, [r3]
   152ac:	ldr	r2, [fp, #4]
   152b0:	add	r2, r2, #12
   152b4:	ldr	r2, [r2]
   152b8:	ldr	r1, [fp, #4]
   152bc:	add	r1, r1, #16
   152c0:	ldr	r1, [r1]
   152c4:	ldr	r0, [fp, #4]
   152c8:	add	r0, r0, #20
   152cc:	ldr	r0, [r0]
   152d0:	ldr	ip, [fp, #4]
   152d4:	add	ip, ip, #24
   152d8:	ldr	ip, [ip]
   152dc:	str	ip, [sp, #16]
   152e0:	str	r0, [sp, #12]
   152e4:	str	r1, [sp, #8]
   152e8:	str	r2, [sp, #4]
   152ec:	str	r3, [sp]
   152f0:	mov	r3, r4
   152f4:	mov	r2, lr
   152f8:	mov	r1, r5
   152fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15300:	bl	10de8 <fprintf@plt>
   15304:	b	15500 <__assert_fail@plt+0x4658>
   15308:	movw	r0, #35804	; 0x8bdc
   1530c:	movt	r0, #1
   15310:	bl	10dc4 <gettext@plt>
   15314:	mov	r6, r0
   15318:	ldr	r3, [fp, #4]
   1531c:	ldr	r4, [r3]
   15320:	ldr	r3, [fp, #4]
   15324:	add	r3, r3, #4
   15328:	ldr	r5, [r3]
   1532c:	ldr	r3, [fp, #4]
   15330:	add	r3, r3, #8
   15334:	ldr	r3, [r3]
   15338:	ldr	r2, [fp, #4]
   1533c:	add	r2, r2, #12
   15340:	ldr	r2, [r2]
   15344:	ldr	r1, [fp, #4]
   15348:	add	r1, r1, #16
   1534c:	ldr	r1, [r1]
   15350:	ldr	r0, [fp, #4]
   15354:	add	r0, r0, #20
   15358:	ldr	r0, [r0]
   1535c:	ldr	ip, [fp, #4]
   15360:	add	ip, ip, #24
   15364:	ldr	ip, [ip]
   15368:	ldr	lr, [fp, #4]
   1536c:	add	lr, lr, #28
   15370:	ldr	lr, [lr]
   15374:	str	lr, [sp, #20]
   15378:	str	ip, [sp, #16]
   1537c:	str	r0, [sp, #12]
   15380:	str	r1, [sp, #8]
   15384:	str	r2, [sp, #4]
   15388:	str	r3, [sp]
   1538c:	mov	r3, r5
   15390:	mov	r2, r4
   15394:	mov	r1, r6
   15398:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1539c:	bl	10de8 <fprintf@plt>
   153a0:	b	15500 <__assert_fail@plt+0x4658>
   153a4:	movw	r0, #35852	; 0x8c0c
   153a8:	movt	r0, #1
   153ac:	bl	10dc4 <gettext@plt>
   153b0:	mov	r7, r0
   153b4:	ldr	r3, [fp, #4]
   153b8:	ldr	r5, [r3]
   153bc:	ldr	r3, [fp, #4]
   153c0:	add	r3, r3, #4
   153c4:	ldr	r6, [r3]
   153c8:	ldr	r3, [fp, #4]
   153cc:	add	r3, r3, #8
   153d0:	ldr	r3, [r3]
   153d4:	ldr	r2, [fp, #4]
   153d8:	add	r2, r2, #12
   153dc:	ldr	r2, [r2]
   153e0:	ldr	r1, [fp, #4]
   153e4:	add	r1, r1, #16
   153e8:	ldr	r1, [r1]
   153ec:	ldr	r0, [fp, #4]
   153f0:	add	r0, r0, #20
   153f4:	ldr	r0, [r0]
   153f8:	ldr	ip, [fp, #4]
   153fc:	add	ip, ip, #24
   15400:	ldr	ip, [ip]
   15404:	ldr	lr, [fp, #4]
   15408:	add	lr, lr, #28
   1540c:	ldr	lr, [lr]
   15410:	ldr	r4, [fp, #4]
   15414:	add	r4, r4, #32
   15418:	ldr	r4, [r4]
   1541c:	str	r4, [sp, #24]
   15420:	str	lr, [sp, #20]
   15424:	str	ip, [sp, #16]
   15428:	str	r0, [sp, #12]
   1542c:	str	r1, [sp, #8]
   15430:	str	r2, [sp, #4]
   15434:	str	r3, [sp]
   15438:	mov	r3, r6
   1543c:	mov	r2, r5
   15440:	mov	r1, r7
   15444:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15448:	bl	10de8 <fprintf@plt>
   1544c:	b	15500 <__assert_fail@plt+0x4658>
   15450:	movw	r0, #35904	; 0x8c40
   15454:	movt	r0, #1
   15458:	bl	10dc4 <gettext@plt>
   1545c:	mov	r7, r0
   15460:	ldr	r3, [fp, #4]
   15464:	ldr	r5, [r3]
   15468:	ldr	r3, [fp, #4]
   1546c:	add	r3, r3, #4
   15470:	ldr	r6, [r3]
   15474:	ldr	r3, [fp, #4]
   15478:	add	r3, r3, #8
   1547c:	ldr	r3, [r3]
   15480:	ldr	r2, [fp, #4]
   15484:	add	r2, r2, #12
   15488:	ldr	r2, [r2]
   1548c:	ldr	r1, [fp, #4]
   15490:	add	r1, r1, #16
   15494:	ldr	r1, [r1]
   15498:	ldr	r0, [fp, #4]
   1549c:	add	r0, r0, #20
   154a0:	ldr	r0, [r0]
   154a4:	ldr	ip, [fp, #4]
   154a8:	add	ip, ip, #24
   154ac:	ldr	ip, [ip]
   154b0:	ldr	lr, [fp, #4]
   154b4:	add	lr, lr, #28
   154b8:	ldr	lr, [lr]
   154bc:	ldr	r4, [fp, #4]
   154c0:	add	r4, r4, #32
   154c4:	ldr	r4, [r4]
   154c8:	str	r4, [sp, #24]
   154cc:	str	lr, [sp, #20]
   154d0:	str	ip, [sp, #16]
   154d4:	str	r0, [sp, #12]
   154d8:	str	r1, [sp, #8]
   154dc:	str	r2, [sp, #4]
   154e0:	str	r3, [sp]
   154e4:	mov	r3, r6
   154e8:	mov	r2, r5
   154ec:	mov	r1, r7
   154f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   154f4:	bl	10de8 <fprintf@plt>
   154f8:	b	15500 <__assert_fail@plt+0x4658>
   154fc:	nop	{0}
   15500:	nop	{0}
   15504:	sub	sp, fp, #20
   15508:	ldrd	r4, [sp]
   1550c:	ldrd	r6, [sp, #8]
   15510:	ldr	fp, [sp, #16]
   15514:	add	sp, sp, #20
   15518:	pop	{pc}		; (ldr pc, [sp], #4)
   1551c:	str	fp, [sp, #-8]!
   15520:	str	lr, [sp, #4]
   15524:	add	fp, sp, #4
   15528:	sub	sp, sp, #32
   1552c:	str	r0, [fp, #-16]
   15530:	str	r1, [fp, #-20]	; 0xffffffec
   15534:	str	r2, [fp, #-24]	; 0xffffffe8
   15538:	str	r3, [fp, #-28]	; 0xffffffe4
   1553c:	mov	r3, #0
   15540:	str	r3, [fp, #-8]
   15544:	b	15554 <__assert_fail@plt+0x46ac>
   15548:	ldr	r3, [fp, #-8]
   1554c:	add	r3, r3, #1
   15550:	str	r3, [fp, #-8]
   15554:	ldr	r3, [fp, #-8]
   15558:	lsl	r3, r3, #2
   1555c:	ldr	r2, [fp, #4]
   15560:	add	r3, r2, r3
   15564:	ldr	r3, [r3]
   15568:	cmp	r3, #0
   1556c:	bne	15548 <__assert_fail@plt+0x46a0>
   15570:	ldr	r3, [fp, #-8]
   15574:	str	r3, [sp, #4]
   15578:	ldr	r3, [fp, #4]
   1557c:	str	r3, [sp]
   15580:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15584:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15588:	ldr	r1, [fp, #-20]	; 0xffffffec
   1558c:	ldr	r0, [fp, #-16]
   15590:	bl	14f94 <__assert_fail@plt+0x40ec>
   15594:	nop	{0}
   15598:	sub	sp, fp, #4
   1559c:	ldr	fp, [sp]
   155a0:	add	sp, sp, #4
   155a4:	pop	{pc}		; (ldr pc, [sp], #4)
   155a8:	str	fp, [sp, #-8]!
   155ac:	str	lr, [sp, #4]
   155b0:	add	fp, sp, #4
   155b4:	sub	sp, sp, #72	; 0x48
   155b8:	str	r0, [fp, #-56]	; 0xffffffc8
   155bc:	str	r1, [fp, #-60]	; 0xffffffc4
   155c0:	str	r2, [fp, #-64]	; 0xffffffc0
   155c4:	str	r3, [fp, #-68]	; 0xffffffbc
   155c8:	mov	r3, #0
   155cc:	str	r3, [fp, #-8]
   155d0:	b	155e0 <__assert_fail@plt+0x4738>
   155d4:	ldr	r3, [fp, #-8]
   155d8:	add	r3, r3, #1
   155dc:	str	r3, [fp, #-8]
   155e0:	ldr	r3, [fp, #-8]
   155e4:	cmp	r3, #9
   155e8:	bhi	1562c <__assert_fail@plt+0x4784>
   155ec:	ldr	r3, [fp, #4]
   155f0:	add	r2, r3, #4
   155f4:	str	r2, [fp, #4]
   155f8:	ldr	r2, [r3]
   155fc:	ldr	r3, [fp, #-8]
   15600:	lsl	r3, r3, #2
   15604:	sub	r1, fp, #4
   15608:	add	r3, r1, r3
   1560c:	str	r2, [r3, #-44]	; 0xffffffd4
   15610:	ldr	r3, [fp, #-8]
   15614:	lsl	r3, r3, #2
   15618:	sub	r2, fp, #4
   1561c:	add	r3, r2, r3
   15620:	ldr	r3, [r3, #-44]	; 0xffffffd4
   15624:	cmp	r3, #0
   15628:	bne	155d4 <__assert_fail@plt+0x472c>
   1562c:	ldr	r3, [fp, #-8]
   15630:	str	r3, [sp, #4]
   15634:	sub	r3, fp, #48	; 0x30
   15638:	str	r3, [sp]
   1563c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15640:	ldr	r2, [fp, #-64]	; 0xffffffc0
   15644:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15648:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1564c:	bl	14f94 <__assert_fail@plt+0x40ec>
   15650:	nop	{0}
   15654:	sub	sp, fp, #4
   15658:	ldr	fp, [sp]
   1565c:	add	sp, sp, #4
   15660:	pop	{pc}		; (ldr pc, [sp], #4)
   15664:	push	{r3}		; (str r3, [sp, #-4]!)
   15668:	str	fp, [sp, #-8]!
   1566c:	str	lr, [sp, #4]
   15670:	add	fp, sp, #4
   15674:	sub	sp, sp, #36	; 0x24
   15678:	str	r0, [fp, #-20]	; 0xffffffec
   1567c:	str	r1, [fp, #-24]	; 0xffffffe8
   15680:	str	r2, [fp, #-28]	; 0xffffffe4
   15684:	add	r3, fp, #8
   15688:	str	r3, [fp, #-12]
   1568c:	ldr	r3, [fp, #-12]
   15690:	str	r3, [sp]
   15694:	ldr	r3, [fp, #4]
   15698:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1569c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   156a0:	ldr	r0, [fp, #-20]	; 0xffffffec
   156a4:	bl	155a8 <__assert_fail@plt+0x4700>
   156a8:	nop	{0}
   156ac:	sub	sp, fp, #4
   156b0:	ldr	fp, [sp]
   156b4:	ldr	lr, [sp, #4]
   156b8:	add	sp, sp, #8
   156bc:	add	sp, sp, #4
   156c0:	bx	lr
   156c4:	str	fp, [sp, #-8]!
   156c8:	str	lr, [sp, #4]
   156cc:	add	fp, sp, #4
   156d0:	movw	r3, #37188	; 0x9144
   156d4:	movt	r3, #2
   156d8:	ldr	r3, [r3]
   156dc:	mov	r1, r3
   156e0:	mov	r0, #10
   156e4:	bl	10cd4 <fputc_unlocked@plt>
   156e8:	movw	r0, #35964	; 0x8c7c
   156ec:	movt	r0, #1
   156f0:	bl	10dc4 <gettext@plt>
   156f4:	mov	r3, r0
   156f8:	movw	r1, #35984	; 0x8c90
   156fc:	movt	r1, #1
   15700:	mov	r0, r3
   15704:	bl	10c74 <printf@plt>
   15708:	movw	r0, #36008	; 0x8ca8
   1570c:	movt	r0, #1
   15710:	bl	10dc4 <gettext@plt>
   15714:	mov	r3, r0
   15718:	movw	r2, #36028	; 0x8cbc
   1571c:	movt	r2, #1
   15720:	movw	r1, #36068	; 0x8ce4
   15724:	movt	r1, #1
   15728:	mov	r0, r3
   1572c:	bl	10c74 <printf@plt>
   15730:	movw	r0, #36084	; 0x8cf4
   15734:	movt	r0, #1
   15738:	bl	10dc4 <gettext@plt>
   1573c:	mov	r3, r0
   15740:	movw	r1, #36124	; 0x8d1c
   15744:	movt	r1, #1
   15748:	mov	r0, r3
   1574c:	bl	10c74 <printf@plt>
   15750:	nop	{0}
   15754:	sub	sp, fp, #4
   15758:	ldr	fp, [sp]
   1575c:	add	sp, sp, #4
   15760:	pop	{pc}		; (ldr pc, [sp], #4)
   15764:	str	fp, [sp, #-8]!
   15768:	str	lr, [sp, #4]
   1576c:	add	fp, sp, #4
   15770:	sub	sp, sp, #16
   15774:	str	r0, [fp, #-8]
   15778:	str	r1, [fp, #-12]
   1577c:	str	r2, [fp, #-16]
   15780:	ldr	r2, [fp, #-16]
   15784:	ldr	r1, [fp, #-12]
   15788:	ldr	r0, [fp, #-8]
   1578c:	bl	15948 <__assert_fail@plt+0x4aa0>
   15790:	mov	r3, r0
   15794:	mov	r0, r3
   15798:	sub	sp, fp, #4
   1579c:	ldr	fp, [sp]
   157a0:	add	sp, sp, #4
   157a4:	pop	{pc}		; (ldr pc, [sp], #4)
   157a8:	str	fp, [sp, #-8]!
   157ac:	str	lr, [sp, #4]
   157b0:	add	fp, sp, #4
   157b4:	sub	sp, sp, #8
   157b8:	str	r0, [fp, #-8]
   157bc:	ldr	r3, [fp, #-8]
   157c0:	cmp	r3, #0
   157c4:	bne	157cc <__assert_fail@plt+0x4924>
   157c8:	bl	16058 <__assert_fail@plt+0x51b0>
   157cc:	ldr	r3, [fp, #-8]
   157d0:	mov	r0, r3
   157d4:	sub	sp, fp, #4
   157d8:	ldr	fp, [sp]
   157dc:	add	sp, sp, #4
   157e0:	pop	{pc}		; (ldr pc, [sp], #4)
   157e4:	str	fp, [sp, #-8]!
   157e8:	str	lr, [sp, #4]
   157ec:	add	fp, sp, #4
   157f0:	sub	sp, sp, #8
   157f4:	str	r0, [fp, #-8]
   157f8:	ldr	r0, [fp, #-8]
   157fc:	bl	16c00 <__assert_fail@plt+0x5d58>
   15800:	mov	r3, r0
   15804:	mov	r0, r3
   15808:	bl	157a8 <__assert_fail@plt+0x4900>
   1580c:	mov	r3, r0
   15810:	mov	r0, r3
   15814:	sub	sp, fp, #4
   15818:	ldr	fp, [sp]
   1581c:	add	sp, sp, #4
   15820:	pop	{pc}		; (ldr pc, [sp], #4)
   15824:	str	fp, [sp, #-8]!
   15828:	str	lr, [sp, #4]
   1582c:	add	fp, sp, #4
   15830:	sub	sp, sp, #8
   15834:	str	r0, [fp, #-8]
   15838:	ldr	r0, [fp, #-8]
   1583c:	bl	17264 <__assert_fail@plt+0x63bc>
   15840:	mov	r3, r0
   15844:	mov	r0, r3
   15848:	bl	157a8 <__assert_fail@plt+0x4900>
   1584c:	mov	r3, r0
   15850:	mov	r0, r3
   15854:	sub	sp, fp, #4
   15858:	ldr	fp, [sp]
   1585c:	add	sp, sp, #4
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	str	fp, [sp, #-8]!
   15868:	str	lr, [sp, #4]
   1586c:	add	fp, sp, #4
   15870:	sub	sp, sp, #8
   15874:	str	r0, [fp, #-8]
   15878:	ldr	r0, [fp, #-8]
   1587c:	bl	157e4 <__assert_fail@plt+0x493c>
   15880:	mov	r3, r0
   15884:	mov	r0, r3
   15888:	sub	sp, fp, #4
   1588c:	ldr	fp, [sp]
   15890:	add	sp, sp, #4
   15894:	pop	{pc}		; (ldr pc, [sp], #4)
   15898:	str	fp, [sp, #-8]!
   1589c:	str	lr, [sp, #4]
   158a0:	add	fp, sp, #4
   158a4:	sub	sp, sp, #16
   158a8:	str	r0, [fp, #-16]
   158ac:	str	r1, [fp, #-20]	; 0xffffffec
   158b0:	ldr	r1, [fp, #-20]	; 0xffffffec
   158b4:	ldr	r0, [fp, #-16]
   158b8:	bl	16c90 <__assert_fail@plt+0x5de8>
   158bc:	str	r0, [fp, #-8]
   158c0:	ldr	r3, [fp, #-8]
   158c4:	cmp	r3, #0
   158c8:	bne	158e8 <__assert_fail@plt+0x4a40>
   158cc:	ldr	r3, [fp, #-16]
   158d0:	cmp	r3, #0
   158d4:	beq	158e4 <__assert_fail@plt+0x4a3c>
   158d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   158dc:	cmp	r3, #0
   158e0:	beq	158e8 <__assert_fail@plt+0x4a40>
   158e4:	bl	16058 <__assert_fail@plt+0x51b0>
   158e8:	ldr	r3, [fp, #-8]
   158ec:	mov	r0, r3
   158f0:	sub	sp, fp, #4
   158f4:	ldr	fp, [sp]
   158f8:	add	sp, sp, #4
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	str	fp, [sp, #-8]!
   15904:	str	lr, [sp, #4]
   15908:	add	fp, sp, #4
   1590c:	sub	sp, sp, #8
   15910:	str	r0, [fp, #-8]
   15914:	str	r1, [fp, #-12]
   15918:	ldr	r1, [fp, #-12]
   1591c:	ldr	r0, [fp, #-8]
   15920:	bl	1729c <__assert_fail@plt+0x63f4>
   15924:	mov	r3, r0
   15928:	mov	r0, r3
   1592c:	bl	157a8 <__assert_fail@plt+0x4900>
   15930:	mov	r3, r0
   15934:	mov	r0, r3
   15938:	sub	sp, fp, #4
   1593c:	ldr	fp, [sp]
   15940:	add	sp, sp, #4
   15944:	pop	{pc}		; (ldr pc, [sp], #4)
   15948:	str	fp, [sp, #-8]!
   1594c:	str	lr, [sp, #4]
   15950:	add	fp, sp, #4
   15954:	sub	sp, sp, #24
   15958:	str	r0, [fp, #-16]
   1595c:	str	r1, [fp, #-20]	; 0xffffffec
   15960:	str	r2, [fp, #-24]	; 0xffffffe8
   15964:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15968:	ldr	r1, [fp, #-20]	; 0xffffffec
   1596c:	ldr	r0, [fp, #-16]
   15970:	bl	174cc <__assert_fail@plt+0x6624>
   15974:	str	r0, [fp, #-8]
   15978:	ldr	r3, [fp, #-8]
   1597c:	cmp	r3, #0
   15980:	bne	159ac <__assert_fail@plt+0x4b04>
   15984:	ldr	r3, [fp, #-16]
   15988:	cmp	r3, #0
   1598c:	beq	159a8 <__assert_fail@plt+0x4b00>
   15990:	ldr	r3, [fp, #-20]	; 0xffffffec
   15994:	cmp	r3, #0
   15998:	beq	159ac <__assert_fail@plt+0x4b04>
   1599c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   159a0:	cmp	r3, #0
   159a4:	beq	159ac <__assert_fail@plt+0x4b04>
   159a8:	bl	16058 <__assert_fail@plt+0x51b0>
   159ac:	ldr	r3, [fp, #-8]
   159b0:	mov	r0, r3
   159b4:	sub	sp, fp, #4
   159b8:	ldr	fp, [sp]
   159bc:	add	sp, sp, #4
   159c0:	pop	{pc}		; (ldr pc, [sp], #4)
   159c4:	str	fp, [sp, #-8]!
   159c8:	str	lr, [sp, #4]
   159cc:	add	fp, sp, #4
   159d0:	sub	sp, sp, #16
   159d4:	str	r0, [fp, #-8]
   159d8:	str	r1, [fp, #-12]
   159dc:	str	r2, [fp, #-16]
   159e0:	ldr	r2, [fp, #-16]
   159e4:	ldr	r1, [fp, #-12]
   159e8:	ldr	r0, [fp, #-8]
   159ec:	bl	1733c <__assert_fail@plt+0x6494>
   159f0:	mov	r3, r0
   159f4:	mov	r0, r3
   159f8:	bl	157a8 <__assert_fail@plt+0x4900>
   159fc:	mov	r3, r0
   15a00:	mov	r0, r3
   15a04:	sub	sp, fp, #4
   15a08:	ldr	fp, [sp]
   15a0c:	add	sp, sp, #4
   15a10:	pop	{pc}		; (ldr pc, [sp], #4)
   15a14:	str	fp, [sp, #-8]!
   15a18:	str	lr, [sp, #4]
   15a1c:	add	fp, sp, #4
   15a20:	sub	sp, sp, #8
   15a24:	str	r0, [fp, #-8]
   15a28:	str	r1, [fp, #-12]
   15a2c:	ldr	r2, [fp, #-12]
   15a30:	ldr	r1, [fp, #-8]
   15a34:	mov	r0, #0
   15a38:	bl	15948 <__assert_fail@plt+0x4aa0>
   15a3c:	mov	r3, r0
   15a40:	mov	r0, r3
   15a44:	sub	sp, fp, #4
   15a48:	ldr	fp, [sp]
   15a4c:	add	sp, sp, #4
   15a50:	pop	{pc}		; (ldr pc, [sp], #4)
   15a54:	str	fp, [sp, #-8]!
   15a58:	str	lr, [sp, #4]
   15a5c:	add	fp, sp, #4
   15a60:	sub	sp, sp, #8
   15a64:	str	r0, [fp, #-8]
   15a68:	str	r1, [fp, #-12]
   15a6c:	ldr	r2, [fp, #-12]
   15a70:	ldr	r1, [fp, #-8]
   15a74:	mov	r0, #0
   15a78:	bl	159c4 <__assert_fail@plt+0x4b1c>
   15a7c:	mov	r3, r0
   15a80:	mov	r0, r3
   15a84:	sub	sp, fp, #4
   15a88:	ldr	fp, [sp]
   15a8c:	add	sp, sp, #4
   15a90:	pop	{pc}		; (ldr pc, [sp], #4)
   15a94:	str	fp, [sp, #-8]!
   15a98:	str	lr, [sp, #4]
   15a9c:	add	fp, sp, #4
   15aa0:	sub	sp, sp, #8
   15aa4:	str	r0, [fp, #-8]
   15aa8:	str	r1, [fp, #-12]
   15aac:	mov	r2, #1
   15ab0:	ldr	r1, [fp, #-12]
   15ab4:	ldr	r0, [fp, #-8]
   15ab8:	bl	15ad4 <__assert_fail@plt+0x4c2c>
   15abc:	mov	r3, r0
   15ac0:	mov	r0, r3
   15ac4:	sub	sp, fp, #4
   15ac8:	ldr	fp, [sp]
   15acc:	add	sp, sp, #4
   15ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ad4:	str	fp, [sp, #-8]!
   15ad8:	str	lr, [sp, #4]
   15adc:	add	fp, sp, #4
   15ae0:	sub	sp, sp, #24
   15ae4:	str	r0, [fp, #-16]
   15ae8:	str	r1, [fp, #-20]	; 0xffffffec
   15aec:	str	r2, [fp, #-24]	; 0xffffffe8
   15af0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15af4:	ldr	r3, [r3]
   15af8:	str	r3, [fp, #-8]
   15afc:	ldr	r3, [fp, #-16]
   15b00:	cmp	r3, #0
   15b04:	bne	15b4c <__assert_fail@plt+0x4ca4>
   15b08:	ldr	r3, [fp, #-8]
   15b0c:	cmp	r3, #0
   15b10:	bne	15b88 <__assert_fail@plt+0x4ce0>
   15b14:	mov	r2, #64	; 0x40
   15b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b1c:	udiv	r3, r2, r3
   15b20:	str	r3, [fp, #-8]
   15b24:	ldr	r3, [fp, #-8]
   15b28:	cmp	r3, #0
   15b2c:	moveq	r3, #1
   15b30:	movne	r3, #0
   15b34:	uxtb	r3, r3
   15b38:	mov	r2, r3
   15b3c:	ldr	r3, [fp, #-8]
   15b40:	add	r3, r2, r3
   15b44:	str	r3, [fp, #-8]
   15b48:	b	15b88 <__assert_fail@plt+0x4ce0>
   15b4c:	ldr	r2, [fp, #-8]
   15b50:	ldr	r3, [fp, #-8]
   15b54:	lsr	r3, r3, #1
   15b58:	add	r3, r3, #1
   15b5c:	mov	r1, #0
   15b60:	adds	r3, r2, r3
   15b64:	bcc	15b6c <__assert_fail@plt+0x4cc4>
   15b68:	mov	r1, #1
   15b6c:	str	r3, [fp, #-8]
   15b70:	mov	r3, r1
   15b74:	and	r3, r3, #1
   15b78:	uxtb	r3, r3
   15b7c:	cmp	r3, #0
   15b80:	beq	15b88 <__assert_fail@plt+0x4ce0>
   15b84:	bl	16058 <__assert_fail@plt+0x51b0>
   15b88:	ldr	r3, [fp, #-8]
   15b8c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15b90:	mov	r1, r3
   15b94:	ldr	r0, [fp, #-16]
   15b98:	bl	15948 <__assert_fail@plt+0x4aa0>
   15b9c:	str	r0, [fp, #-16]
   15ba0:	ldr	r2, [fp, #-8]
   15ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ba8:	str	r2, [r3]
   15bac:	ldr	r3, [fp, #-16]
   15bb0:	mov	r0, r3
   15bb4:	sub	sp, fp, #4
   15bb8:	ldr	fp, [sp]
   15bbc:	add	sp, sp, #4
   15bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bc4:	str	fp, [sp, #-8]!
   15bc8:	str	lr, [sp, #4]
   15bcc:	add	fp, sp, #4
   15bd0:	sub	sp, sp, #32
   15bd4:	str	r0, [fp, #-24]	; 0xffffffe8
   15bd8:	str	r1, [fp, #-28]	; 0xffffffe4
   15bdc:	str	r2, [fp, #-32]	; 0xffffffe0
   15be0:	str	r3, [fp, #-36]	; 0xffffffdc
   15be4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15be8:	ldr	r3, [r3]
   15bec:	str	r3, [fp, #-8]
   15bf0:	ldr	r3, [fp, #-8]
   15bf4:	asr	r3, r3, #1
   15bf8:	mov	r1, #0
   15bfc:	ldr	r2, [fp, #-8]
   15c00:	adds	r3, r2, r3
   15c04:	bvc	15c0c <__assert_fail@plt+0x4d64>
   15c08:	mov	r1, #1
   15c0c:	str	r3, [fp, #-16]
   15c10:	mov	r3, r1
   15c14:	and	r3, r3, #1
   15c18:	uxtb	r3, r3
   15c1c:	cmp	r3, #0
   15c20:	beq	15c2c <__assert_fail@plt+0x4d84>
   15c24:	mvn	r3, #-2147483648	; 0x80000000
   15c28:	str	r3, [fp, #-16]
   15c2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15c30:	cmp	r3, #0
   15c34:	blt	15c50 <__assert_fail@plt+0x4da8>
   15c38:	ldr	r3, [fp, #-16]
   15c3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15c40:	cmp	r2, r3
   15c44:	bge	15c50 <__assert_fail@plt+0x4da8>
   15c48:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15c4c:	str	r3, [fp, #-16]
   15c50:	ldr	r2, [fp, #-16]
   15c54:	mov	lr, #0
   15c58:	ldr	r3, [fp, #4]
   15c5c:	smull	r2, r3, r2, r3
   15c60:	mov	r0, #0
   15c64:	mov	r1, #0
   15c68:	mov	r0, r3
   15c6c:	asr	r1, r3, #31
   15c70:	asr	ip, r2, #31
   15c74:	cmp	ip, r0
   15c78:	beq	15c80 <__assert_fail@plt+0x4dd8>
   15c7c:	mov	lr, #1
   15c80:	mov	r3, r2
   15c84:	str	r3, [fp, #-20]	; 0xffffffec
   15c88:	mov	r3, lr
   15c8c:	and	r3, r3, #1
   15c90:	uxtb	r3, r3
   15c94:	cmp	r3, #0
   15c98:	beq	15ca4 <__assert_fail@plt+0x4dfc>
   15c9c:	mvn	r3, #-2147483648	; 0x80000000
   15ca0:	b	15cbc <__assert_fail@plt+0x4e14>
   15ca4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ca8:	cmp	r3, #63	; 0x3f
   15cac:	bgt	15cb8 <__assert_fail@plt+0x4e10>
   15cb0:	mov	r3, #64	; 0x40
   15cb4:	b	15cbc <__assert_fail@plt+0x4e14>
   15cb8:	mov	r3, #0
   15cbc:	str	r3, [fp, #-12]
   15cc0:	ldr	r3, [fp, #-12]
   15cc4:	cmp	r3, #0
   15cc8:	beq	15d00 <__assert_fail@plt+0x4e58>
   15ccc:	ldr	r2, [fp, #-12]
   15cd0:	ldr	r3, [fp, #4]
   15cd4:	sdiv	r3, r2, r3
   15cd8:	str	r3, [fp, #-16]
   15cdc:	ldr	r3, [fp, #-12]
   15ce0:	ldr	r2, [fp, #4]
   15ce4:	sdiv	r2, r3, r2
   15ce8:	ldr	r1, [fp, #4]
   15cec:	mul	r2, r1, r2
   15cf0:	sub	r3, r3, r2
   15cf4:	ldr	r2, [fp, #-12]
   15cf8:	sub	r3, r2, r3
   15cfc:	str	r3, [fp, #-20]	; 0xffffffec
   15d00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15d04:	cmp	r3, #0
   15d08:	bne	15d18 <__assert_fail@plt+0x4e70>
   15d0c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15d10:	mov	r2, #0
   15d14:	str	r2, [r3]
   15d18:	ldr	r2, [fp, #-16]
   15d1c:	ldr	r3, [fp, #-8]
   15d20:	sub	r3, r2, r3
   15d24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15d28:	cmp	r2, r3
   15d2c:	ble	15dcc <__assert_fail@plt+0x4f24>
   15d30:	mov	r1, #0
   15d34:	ldr	r2, [fp, #-8]
   15d38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15d3c:	adds	r3, r2, r3
   15d40:	bvc	15d48 <__assert_fail@plt+0x4ea0>
   15d44:	mov	r1, #1
   15d48:	str	r3, [fp, #-16]
   15d4c:	mov	r3, r1
   15d50:	and	r3, r3, #1
   15d54:	uxtb	r3, r3
   15d58:	cmp	r3, #0
   15d5c:	bne	15dc8 <__assert_fail@plt+0x4f20>
   15d60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15d64:	cmp	r3, #0
   15d68:	blt	15d7c <__assert_fail@plt+0x4ed4>
   15d6c:	ldr	r3, [fp, #-16]
   15d70:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15d74:	cmp	r2, r3
   15d78:	blt	15dc8 <__assert_fail@plt+0x4f20>
   15d7c:	ldr	r2, [fp, #-16]
   15d80:	mov	lr, #0
   15d84:	ldr	r3, [fp, #4]
   15d88:	smull	r2, r3, r2, r3
   15d8c:	mov	r0, #0
   15d90:	mov	r1, #0
   15d94:	mov	r0, r3
   15d98:	asr	r1, r3, #31
   15d9c:	asr	ip, r2, #31
   15da0:	cmp	ip, r0
   15da4:	beq	15dac <__assert_fail@plt+0x4f04>
   15da8:	mov	lr, #1
   15dac:	mov	r3, r2
   15db0:	str	r3, [fp, #-20]	; 0xffffffec
   15db4:	mov	r3, lr
   15db8:	and	r3, r3, #1
   15dbc:	uxtb	r3, r3
   15dc0:	cmp	r3, #0
   15dc4:	beq	15dcc <__assert_fail@plt+0x4f24>
   15dc8:	bl	16058 <__assert_fail@plt+0x51b0>
   15dcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15dd0:	mov	r1, r3
   15dd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15dd8:	bl	15898 <__assert_fail@plt+0x49f0>
   15ddc:	str	r0, [fp, #-24]	; 0xffffffe8
   15de0:	ldr	r2, [fp, #-16]
   15de4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15de8:	str	r2, [r3]
   15dec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15df0:	mov	r0, r3
   15df4:	sub	sp, fp, #4
   15df8:	ldr	fp, [sp]
   15dfc:	add	sp, sp, #4
   15e00:	pop	{pc}		; (ldr pc, [sp], #4)
   15e04:	str	fp, [sp, #-8]!
   15e08:	str	lr, [sp, #4]
   15e0c:	add	fp, sp, #4
   15e10:	sub	sp, sp, #8
   15e14:	str	r0, [fp, #-8]
   15e18:	mov	r1, #1
   15e1c:	ldr	r0, [fp, #-8]
   15e20:	bl	15e74 <__assert_fail@plt+0x4fcc>
   15e24:	mov	r3, r0
   15e28:	mov	r0, r3
   15e2c:	sub	sp, fp, #4
   15e30:	ldr	fp, [sp]
   15e34:	add	sp, sp, #4
   15e38:	pop	{pc}		; (ldr pc, [sp], #4)
   15e3c:	str	fp, [sp, #-8]!
   15e40:	str	lr, [sp, #4]
   15e44:	add	fp, sp, #4
   15e48:	sub	sp, sp, #8
   15e4c:	str	r0, [fp, #-8]
   15e50:	mov	r1, #1
   15e54:	ldr	r0, [fp, #-8]
   15e58:	bl	15ebc <__assert_fail@plt+0x5014>
   15e5c:	mov	r3, r0
   15e60:	mov	r0, r3
   15e64:	sub	sp, fp, #4
   15e68:	ldr	fp, [sp]
   15e6c:	add	sp, sp, #4
   15e70:	pop	{pc}		; (ldr pc, [sp], #4)
   15e74:	str	fp, [sp, #-8]!
   15e78:	str	lr, [sp, #4]
   15e7c:	add	fp, sp, #4
   15e80:	sub	sp, sp, #8
   15e84:	str	r0, [fp, #-8]
   15e88:	str	r1, [fp, #-12]
   15e8c:	ldr	r1, [fp, #-12]
   15e90:	ldr	r0, [fp, #-8]
   15e94:	bl	16b30 <__assert_fail@plt+0x5c88>
   15e98:	mov	r3, r0
   15e9c:	mov	r0, r3
   15ea0:	bl	157a8 <__assert_fail@plt+0x4900>
   15ea4:	mov	r3, r0
   15ea8:	mov	r0, r3
   15eac:	sub	sp, fp, #4
   15eb0:	ldr	fp, [sp]
   15eb4:	add	sp, sp, #4
   15eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ebc:	str	fp, [sp, #-8]!
   15ec0:	str	lr, [sp, #4]
   15ec4:	add	fp, sp, #4
   15ec8:	sub	sp, sp, #8
   15ecc:	str	r0, [fp, #-8]
   15ed0:	str	r1, [fp, #-12]
   15ed4:	ldr	r1, [fp, #-12]
   15ed8:	ldr	r0, [fp, #-8]
   15edc:	bl	172f8 <__assert_fail@plt+0x6450>
   15ee0:	mov	r3, r0
   15ee4:	mov	r0, r3
   15ee8:	bl	157a8 <__assert_fail@plt+0x4900>
   15eec:	mov	r3, r0
   15ef0:	mov	r0, r3
   15ef4:	sub	sp, fp, #4
   15ef8:	ldr	fp, [sp]
   15efc:	add	sp, sp, #4
   15f00:	pop	{pc}		; (ldr pc, [sp], #4)
   15f04:	str	fp, [sp, #-8]!
   15f08:	str	lr, [sp, #4]
   15f0c:	add	fp, sp, #4
   15f10:	sub	sp, sp, #8
   15f14:	str	r0, [fp, #-8]
   15f18:	str	r1, [fp, #-12]
   15f1c:	ldr	r0, [fp, #-12]
   15f20:	bl	157e4 <__assert_fail@plt+0x493c>
   15f24:	mov	r3, r0
   15f28:	ldr	r2, [fp, #-12]
   15f2c:	ldr	r1, [fp, #-8]
   15f30:	mov	r0, r3
   15f34:	bl	10ca4 <memcpy@plt>
   15f38:	mov	r3, r0
   15f3c:	mov	r0, r3
   15f40:	sub	sp, fp, #4
   15f44:	ldr	fp, [sp]
   15f48:	add	sp, sp, #4
   15f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f50:	str	fp, [sp, #-8]!
   15f54:	str	lr, [sp, #4]
   15f58:	add	fp, sp, #4
   15f5c:	sub	sp, sp, #8
   15f60:	str	r0, [fp, #-8]
   15f64:	str	r1, [fp, #-12]
   15f68:	ldr	r0, [fp, #-12]
   15f6c:	bl	15824 <__assert_fail@plt+0x497c>
   15f70:	mov	r3, r0
   15f74:	mov	r0, r3
   15f78:	ldr	r3, [fp, #-12]
   15f7c:	mov	r2, r3
   15f80:	ldr	r1, [fp, #-8]
   15f84:	bl	10ca4 <memcpy@plt>
   15f88:	mov	r3, r0
   15f8c:	mov	r0, r3
   15f90:	sub	sp, fp, #4
   15f94:	ldr	fp, [sp]
   15f98:	add	sp, sp, #4
   15f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa0:	str	fp, [sp, #-8]!
   15fa4:	str	lr, [sp, #4]
   15fa8:	add	fp, sp, #4
   15fac:	sub	sp, sp, #16
   15fb0:	str	r0, [fp, #-16]
   15fb4:	str	r1, [fp, #-20]	; 0xffffffec
   15fb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fbc:	add	r3, r3, #1
   15fc0:	mov	r0, r3
   15fc4:	bl	15824 <__assert_fail@plt+0x497c>
   15fc8:	mov	r3, r0
   15fcc:	str	r3, [fp, #-8]
   15fd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fd4:	ldr	r2, [fp, #-8]
   15fd8:	add	r3, r2, r3
   15fdc:	mov	r2, #0
   15fe0:	strb	r2, [r3]
   15fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fe8:	mov	r2, r3
   15fec:	ldr	r1, [fp, #-16]
   15ff0:	ldr	r0, [fp, #-8]
   15ff4:	bl	10ca4 <memcpy@plt>
   15ff8:	mov	r3, r0
   15ffc:	mov	r0, r3
   16000:	sub	sp, fp, #4
   16004:	ldr	fp, [sp]
   16008:	add	sp, sp, #4
   1600c:	pop	{pc}		; (ldr pc, [sp], #4)
   16010:	str	fp, [sp, #-8]!
   16014:	str	lr, [sp, #4]
   16018:	add	fp, sp, #4
   1601c:	sub	sp, sp, #8
   16020:	str	r0, [fp, #-8]
   16024:	ldr	r0, [fp, #-8]
   16028:	bl	10dd0 <strlen@plt>
   1602c:	mov	r3, r0
   16030:	add	r3, r3, #1
   16034:	mov	r1, r3
   16038:	ldr	r0, [fp, #-8]
   1603c:	bl	15f04 <__assert_fail@plt+0x505c>
   16040:	mov	r3, r0
   16044:	mov	r0, r3
   16048:	sub	sp, fp, #4
   1604c:	ldr	fp, [sp]
   16050:	add	sp, sp, #4
   16054:	pop	{pc}		; (ldr pc, [sp], #4)
   16058:	strd	r4, [sp, #-16]!
   1605c:	str	fp, [sp, #8]
   16060:	str	lr, [sp, #12]
   16064:	add	fp, sp, #12
   16068:	movw	r3, #37100	; 0x90ec
   1606c:	movt	r3, #2
   16070:	ldr	r4, [r3]
   16074:	movw	r0, #36204	; 0x8d6c
   16078:	movt	r0, #1
   1607c:	bl	10dc4 <gettext@plt>
   16080:	mov	r3, r0
   16084:	movw	r2, #36224	; 0x8d80
   16088:	movt	r2, #1
   1608c:	mov	r1, #0
   16090:	mov	r0, r4
   16094:	bl	10d58 <error@plt>
   16098:	bl	10e90 <abort@plt>
   1609c:	strd	r4, [sp, #-16]!
   160a0:	str	fp, [sp, #8]
   160a4:	str	lr, [sp, #12]
   160a8:	add	fp, sp, #12
   160ac:	sub	sp, sp, #40	; 0x28
   160b0:	str	r0, [fp, #-32]	; 0xffffffe0
   160b4:	str	r1, [fp, #-36]	; 0xffffffdc
   160b8:	strd	r2, [fp, #-44]	; 0xffffffd4
   160bc:	sub	r2, fp, #28
   160c0:	ldr	r3, [fp, #12]
   160c4:	str	r3, [sp]
   160c8:	mov	r3, r2
   160cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   160d0:	mov	r1, #0
   160d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   160d8:	bl	16548 <__assert_fail@plt+0x56a0>
   160dc:	str	r0, [fp, #-16]
   160e0:	ldr	r3, [fp, #-16]
   160e4:	cmp	r3, #0
   160e8:	bne	16188 <__assert_fail@plt+0x52e0>
   160ec:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   160f0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   160f4:	cmp	r0, r2
   160f8:	sbcs	r3, r1, r3
   160fc:	blt	16114 <__assert_fail@plt+0x526c>
   16100:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16104:	ldrd	r0, [fp, #4]
   16108:	cmp	r0, r2
   1610c:	sbcs	r3, r1, r3
   16110:	bge	161c4 <__assert_fail@plt+0x531c>
   16114:	mov	r3, #1
   16118:	str	r3, [fp, #-16]
   1611c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16120:	mvn	r0, #-1073741824	; 0xc0000000
   16124:	mov	r1, #0
   16128:	cmp	r0, r2
   1612c:	sbcs	r3, r1, r3
   16130:	bge	16148 <__assert_fail@plt+0x52a0>
   16134:	bl	10df4 <__errno_location@plt>
   16138:	mov	r2, r0
   1613c:	mov	r3, #75	; 0x4b
   16140:	str	r3, [r2]
   16144:	b	161c4 <__assert_fail@plt+0x531c>
   16148:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1614c:	mov	r0, #-1073741824	; 0xc0000000
   16150:	mvn	r1, #0
   16154:	cmp	r2, r0
   16158:	sbcs	r3, r3, r1
   1615c:	bge	16174 <__assert_fail@plt+0x52cc>
   16160:	bl	10df4 <__errno_location@plt>
   16164:	mov	r2, r0
   16168:	mov	r3, #75	; 0x4b
   1616c:	str	r3, [r2]
   16170:	b	161c4 <__assert_fail@plt+0x531c>
   16174:	bl	10df4 <__errno_location@plt>
   16178:	mov	r2, r0
   1617c:	mov	r3, #34	; 0x22
   16180:	str	r3, [r2]
   16184:	b	161c4 <__assert_fail@plt+0x531c>
   16188:	ldr	r3, [fp, #-16]
   1618c:	cmp	r3, #1
   16190:	bne	161a8 <__assert_fail@plt+0x5300>
   16194:	bl	10df4 <__errno_location@plt>
   16198:	mov	r2, r0
   1619c:	mov	r3, #75	; 0x4b
   161a0:	str	r3, [r2]
   161a4:	b	161c4 <__assert_fail@plt+0x531c>
   161a8:	ldr	r3, [fp, #-16]
   161ac:	cmp	r3, #3
   161b0:	bne	161c4 <__assert_fail@plt+0x531c>
   161b4:	bl	10df4 <__errno_location@plt>
   161b8:	mov	r2, r0
   161bc:	mov	r3, #0
   161c0:	str	r3, [r2]
   161c4:	ldr	r3, [fp, #-16]
   161c8:	cmp	r3, #0
   161cc:	beq	16238 <__assert_fail@plt+0x5390>
   161d0:	ldr	r3, [fp, #20]
   161d4:	cmp	r3, #0
   161d8:	beq	161e4 <__assert_fail@plt+0x533c>
   161dc:	ldr	r4, [fp, #20]
   161e0:	b	161e8 <__assert_fail@plt+0x5340>
   161e4:	mov	r4, #1
   161e8:	bl	10df4 <__errno_location@plt>
   161ec:	mov	r3, r0
   161f0:	ldr	r3, [r3]
   161f4:	cmp	r3, #22
   161f8:	beq	1620c <__assert_fail@plt+0x5364>
   161fc:	bl	10df4 <__errno_location@plt>
   16200:	mov	r3, r0
   16204:	ldr	r5, [r3]
   16208:	b	16210 <__assert_fail@plt+0x5368>
   1620c:	mov	r5, #0
   16210:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16214:	bl	14f5c <__assert_fail@plt+0x40b4>
   16218:	mov	r3, r0
   1621c:	str	r3, [sp]
   16220:	ldr	r3, [fp, #16]
   16224:	movw	r2, #36228	; 0x8d84
   16228:	movt	r2, #1
   1622c:	mov	r1, r5
   16230:	mov	r0, r4
   16234:	bl	10d58 <error@plt>
   16238:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1623c:	mov	r0, r2
   16240:	mov	r1, r3
   16244:	sub	sp, fp, #12
   16248:	ldrd	r4, [sp]
   1624c:	ldr	fp, [sp, #8]
   16250:	add	sp, sp, #12
   16254:	pop	{pc}		; (ldr pc, [sp], #4)
   16258:	str	fp, [sp, #-8]!
   1625c:	str	lr, [sp, #4]
   16260:	add	fp, sp, #4
   16264:	sub	sp, sp, #40	; 0x28
   16268:	str	r0, [fp, #-8]
   1626c:	strd	r2, [fp, #-20]	; 0xffffffec
   16270:	ldr	r3, [fp, #20]
   16274:	str	r3, [sp, #16]
   16278:	ldr	r3, [fp, #16]
   1627c:	str	r3, [sp, #12]
   16280:	ldr	r3, [fp, #12]
   16284:	str	r3, [sp, #8]
   16288:	ldrd	r2, [fp, #4]
   1628c:	strd	r2, [sp]
   16290:	ldrd	r2, [fp, #-20]	; 0xffffffec
   16294:	mov	r1, #10
   16298:	ldr	r0, [fp, #-8]
   1629c:	bl	1609c <__assert_fail@plt+0x51f4>
   162a0:	mov	r2, r0
   162a4:	mov	r3, r1
   162a8:	mov	r0, r2
   162ac:	mov	r1, r3
   162b0:	sub	sp, fp, #4
   162b4:	ldr	fp, [sp]
   162b8:	add	sp, sp, #4
   162bc:	pop	{pc}		; (ldr pc, [sp], #4)
   162c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   162c4:	strd	r6, [sp, #8]
   162c8:	strd	r8, [sp, #16]
   162cc:	str	fp, [sp, #24]
   162d0:	str	lr, [sp, #28]
   162d4:	add	fp, sp, #28
   162d8:	sub	sp, sp, #72	; 0x48
   162dc:	str	r0, [fp, #-40]	; 0xffffffd8
   162e0:	str	r1, [fp, #-44]	; 0xffffffd4
   162e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   162e8:	ldrd	r6, [r3]
   162ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   162f0:	mov	r8, r3
   162f4:	asr	r9, r8, #31
   162f8:	mov	r2, #0
   162fc:	mov	r3, #0
   16300:	strd	r2, [fp, #-60]	; 0xffffffc4
   16304:	mov	r0, #0
   16308:	mov	r1, #0
   1630c:	mov	r0, r7
   16310:	asr	r1, r7, #31
   16314:	asr	ip, r6, #31
   16318:	mov	r2, #0
   1631c:	mov	r3, #0
   16320:	mov	r2, r9
   16324:	asr	r3, r9, #31
   16328:	cmp	ip, r0
   1632c:	bne	1633c <__assert_fail@plt+0x5494>
   16330:	smull	r2, r3, r6, r8
   16334:	strd	r2, [fp, #-52]	; 0xffffffcc
   16338:	b	16450 <__assert_fail@plt+0x55a8>
   1633c:	strd	r6, [fp, #-92]	; 0xffffffa4
   16340:	mov	ip, r0
   16344:	mov	lr, r8
   16348:	umull	r2, r3, r6, r8
   1634c:	strd	r2, [fp, #-100]	; 0xffffff9c
   16350:	umull	r2, r3, lr, ip
   16354:	mov	r0, r2
   16358:	mov	r1, r3
   1635c:	cmp	ip, #0
   16360:	bge	16390 <__assert_fail@plt+0x54e8>
   16364:	mov	r2, lr
   16368:	mov	r3, #0
   1636c:	mov	r4, #0
   16370:	mov	r5, #0
   16374:	mov	r5, r2
   16378:	mov	r4, #0
   1637c:	subs	r3, r0, r4
   16380:	str	r3, [fp, #-68]	; 0xffffffbc
   16384:	sbc	r3, r1, r5
   16388:	str	r3, [fp, #-64]	; 0xffffffc0
   1638c:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   16390:	cmp	lr, #0
   16394:	bge	163b4 <__assert_fail@plt+0x550c>
   16398:	ldrd	r2, [fp, #-92]	; 0xffffffa4
   1639c:	mov	ip, r2
   163a0:	subs	ip, r0, ip
   163a4:	str	ip, [fp, #-76]	; 0xffffffb4
   163a8:	sbc	r3, r1, r3
   163ac:	str	r3, [fp, #-72]	; 0xffffffb8
   163b0:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   163b4:	mov	r2, #0
   163b8:	mov	r3, #0
   163bc:	ldrd	r4, [fp, #-100]	; 0xffffff9c
   163c0:	mov	ip, r5
   163c4:	mov	r2, ip
   163c8:	mov	r3, #0
   163cc:	adds	ip, r0, r2
   163d0:	str	ip, [fp, #-84]	; 0xffffffac
   163d4:	adc	r3, r1, r3
   163d8:	str	r3, [fp, #-80]	; 0xffffffb0
   163dc:	ldrd	r0, [fp, #-84]	; 0xffffffac
   163e0:	mov	r2, #0
   163e4:	mov	r3, #0
   163e8:	mov	r2, r1
   163ec:	asr	r3, r1, #31
   163f0:	asr	ip, r0, #31
   163f4:	cmp	ip, r2
   163f8:	bne	16428 <__assert_fail@plt+0x5580>
   163fc:	mov	r2, #0
   16400:	mov	r3, #0
   16404:	mov	r3, r0
   16408:	mov	r2, #0
   1640c:	mov	r0, r4
   16410:	mov	r1, #0
   16414:	orr	ip, r2, r0
   16418:	str	ip, [fp, #-52]	; 0xffffffcc
   1641c:	orr	r3, r3, r1
   16420:	str	r3, [fp, #-48]	; 0xffffffd0
   16424:	b	16450 <__assert_fail@plt+0x55a8>
   16428:	mul	r2, r8, r7
   1642c:	mul	r3, r6, r9
   16430:	add	r1, r2, r3
   16434:	umull	r2, r3, r6, r8
   16438:	add	r1, r1, r3
   1643c:	mov	r3, r1
   16440:	strd	r2, [fp, #-52]	; 0xffffffcc
   16444:	mov	r2, #1
   16448:	mov	r3, #0
   1644c:	strd	r2, [fp, #-60]	; 0xffffffc4
   16450:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   16454:	strd	r2, [fp, #-36]	; 0xffffffdc
   16458:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   1645c:	mov	r3, r2
   16460:	and	r3, r3, #1
   16464:	uxtb	r3, r3
   16468:	cmp	r3, #0
   1646c:	beq	164a8 <__assert_fail@plt+0x5600>
   16470:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16474:	ldrd	r2, [r3]
   16478:	cmp	r2, #0
   1647c:	sbcs	r3, r3, #0
   16480:	bge	16490 <__assert_fail@plt+0x55e8>
   16484:	mov	r2, #0
   16488:	mov	r3, #-2147483648	; 0x80000000
   1648c:	b	16498 <__assert_fail@plt+0x55f0>
   16490:	mvn	r2, #0
   16494:	mvn	r3, #-2147483648	; 0x80000000
   16498:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1649c:	strd	r2, [r1]
   164a0:	mov	r3, #1
   164a4:	b	164b8 <__assert_fail@plt+0x5610>
   164a8:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   164ac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   164b0:	strd	r2, [r1]
   164b4:	mov	r3, #0
   164b8:	mov	r0, r3
   164bc:	sub	sp, fp, #28
   164c0:	ldrd	r4, [sp]
   164c4:	ldrd	r6, [sp, #8]
   164c8:	ldrd	r8, [sp, #16]
   164cc:	ldr	fp, [sp, #24]
   164d0:	add	sp, sp, #28
   164d4:	pop	{pc}		; (ldr pc, [sp], #4)
   164d8:	str	fp, [sp, #-8]!
   164dc:	str	lr, [sp, #4]
   164e0:	add	fp, sp, #4
   164e4:	sub	sp, sp, #24
   164e8:	str	r0, [fp, #-16]
   164ec:	str	r1, [fp, #-20]	; 0xffffffec
   164f0:	str	r2, [fp, #-24]	; 0xffffffe8
   164f4:	mov	r3, #0
   164f8:	str	r3, [fp, #-8]
   164fc:	b	1651c <__assert_fail@plt+0x5674>
   16500:	ldr	r1, [fp, #-20]	; 0xffffffec
   16504:	ldr	r0, [fp, #-16]
   16508:	bl	162c0 <__assert_fail@plt+0x5418>
   1650c:	mov	r2, r0
   16510:	ldr	r3, [fp, #-8]
   16514:	orr	r3, r3, r2
   16518:	str	r3, [fp, #-8]
   1651c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16520:	sub	r2, r3, #1
   16524:	str	r2, [fp, #-24]	; 0xffffffe8
   16528:	cmp	r3, #0
   1652c:	bne	16500 <__assert_fail@plt+0x5658>
   16530:	ldr	r3, [fp, #-8]
   16534:	mov	r0, r3
   16538:	sub	sp, fp, #4
   1653c:	ldr	fp, [sp]
   16540:	add	sp, sp, #4
   16544:	pop	{pc}		; (ldr pc, [sp], #4)
   16548:	str	fp, [sp, #-8]!
   1654c:	str	lr, [sp, #4]
   16550:	add	fp, sp, #4
   16554:	sub	sp, sp, #48	; 0x30
   16558:	str	r0, [fp, #-40]	; 0xffffffd8
   1655c:	str	r1, [fp, #-44]	; 0xffffffd4
   16560:	str	r2, [fp, #-48]	; 0xffffffd0
   16564:	str	r3, [fp, #-52]	; 0xffffffcc
   16568:	mov	r3, #0
   1656c:	str	r3, [fp, #-8]
   16570:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16574:	cmp	r3, #0
   16578:	blt	16588 <__assert_fail@plt+0x56e0>
   1657c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16580:	cmp	r3, #36	; 0x24
   16584:	ble	165a8 <__assert_fail@plt+0x5700>
   16588:	movw	r3, #36292	; 0x8dc4
   1658c:	movt	r3, #1
   16590:	mov	r2, #85	; 0x55
   16594:	movw	r1, #36236	; 0x8d8c
   16598:	movt	r1, #1
   1659c:	movw	r0, #36252	; 0x8d9c
   165a0:	movt	r0, #1
   165a4:	bl	10ea8 <__assert_fail@plt>
   165a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   165ac:	cmp	r3, #0
   165b0:	bne	165bc <__assert_fail@plt+0x5714>
   165b4:	sub	r3, fp, #28
   165b8:	b	165c0 <__assert_fail@plt+0x5718>
   165bc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   165c0:	str	r3, [fp, #-24]	; 0xffffffe8
   165c4:	bl	10df4 <__errno_location@plt>
   165c8:	mov	r2, r0
   165cc:	mov	r3, #0
   165d0:	str	r3, [r2]
   165d4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   165d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   165dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   165e0:	bl	10e24 <strtoimax@plt>
   165e4:	mov	r2, r0
   165e8:	mov	r3, r1
   165ec:	strd	r2, [fp, #-36]	; 0xffffffdc
   165f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165f4:	ldr	r3, [r3]
   165f8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   165fc:	cmp	r2, r3
   16600:	bne	16660 <__assert_fail@plt+0x57b8>
   16604:	ldr	r3, [fp, #4]
   16608:	cmp	r3, #0
   1660c:	beq	16658 <__assert_fail@plt+0x57b0>
   16610:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16614:	ldr	r3, [r3]
   16618:	ldrb	r3, [r3]
   1661c:	cmp	r3, #0
   16620:	beq	16658 <__assert_fail@plt+0x57b0>
   16624:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16628:	ldr	r3, [r3]
   1662c:	ldrb	r3, [r3]
   16630:	mov	r1, r3
   16634:	ldr	r0, [fp, #4]
   16638:	bl	10ddc <strchr@plt>
   1663c:	mov	r3, r0
   16640:	cmp	r3, #0
   16644:	beq	16658 <__assert_fail@plt+0x57b0>
   16648:	mov	r2, #1
   1664c:	mov	r3, #0
   16650:	strd	r2, [fp, #-36]	; 0xffffffdc
   16654:	b	16698 <__assert_fail@plt+0x57f0>
   16658:	mov	r3, #4
   1665c:	b	16b1c <__assert_fail@plt+0x5c74>
   16660:	bl	10df4 <__errno_location@plt>
   16664:	mov	r3, r0
   16668:	ldr	r3, [r3]
   1666c:	cmp	r3, #0
   16670:	beq	16698 <__assert_fail@plt+0x57f0>
   16674:	bl	10df4 <__errno_location@plt>
   16678:	mov	r3, r0
   1667c:	ldr	r3, [r3]
   16680:	cmp	r3, #34	; 0x22
   16684:	beq	16690 <__assert_fail@plt+0x57e8>
   16688:	mov	r3, #4
   1668c:	b	16b1c <__assert_fail@plt+0x5c74>
   16690:	mov	r3, #1
   16694:	str	r3, [fp, #-8]
   16698:	ldr	r3, [fp, #4]
   1669c:	cmp	r3, #0
   166a0:	bne	166b8 <__assert_fail@plt+0x5810>
   166a4:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   166a8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   166ac:	strd	r2, [r1]
   166b0:	ldr	r3, [fp, #-8]
   166b4:	b	16b1c <__assert_fail@plt+0x5c74>
   166b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166bc:	ldr	r3, [r3]
   166c0:	ldrb	r3, [r3]
   166c4:	cmp	r3, #0
   166c8:	beq	16b0c <__assert_fail@plt+0x5c64>
   166cc:	mov	r3, #1024	; 0x400
   166d0:	str	r3, [fp, #-12]
   166d4:	mov	r3, #1
   166d8:	str	r3, [fp, #-16]
   166dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166e0:	ldr	r3, [r3]
   166e4:	ldrb	r3, [r3]
   166e8:	mov	r1, r3
   166ec:	ldr	r0, [fp, #4]
   166f0:	bl	10ddc <strchr@plt>
   166f4:	mov	r3, r0
   166f8:	cmp	r3, #0
   166fc:	bne	16718 <__assert_fail@plt+0x5870>
   16700:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16704:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16708:	strd	r2, [r1]
   1670c:	ldr	r3, [fp, #-8]
   16710:	orr	r3, r3, #2
   16714:	b	16b1c <__assert_fail@plt+0x5c74>
   16718:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1671c:	ldr	r3, [r3]
   16720:	ldrb	r3, [r3]
   16724:	sub	r3, r3, #69	; 0x45
   16728:	cmp	r3, #47	; 0x2f
   1672c:	ldrls	pc, [pc, r3, lsl #2]
   16730:	b	16884 <__assert_fail@plt+0x59dc>
   16734:	strdeq	r6, [r1], -r4
   16738:	andeq	r6, r1, r4, lsl #17
   1673c:	strdeq	r6, [r1], -r4
   16740:	andeq	r6, r1, r4, lsl #17
   16744:	andeq	r6, r1, r4, lsl #17
   16748:	andeq	r6, r1, r4, lsl #17
   1674c:	strdeq	r6, [r1], -r4
   16750:	andeq	r6, r1, r4, lsl #17
   16754:	strdeq	r6, [r1], -r4
   16758:	andeq	r6, r1, r4, lsl #17
   1675c:	andeq	r6, r1, r4, lsl #17
   16760:	strdeq	r6, [r1], -r4
   16764:	andeq	r6, r1, r4, lsl #17
   16768:	andeq	r6, r1, r4, lsl #17
   1676c:	andeq	r6, r1, r4, lsl #17
   16770:	strdeq	r6, [r1], -r4
   16774:	andeq	r6, r1, r4, lsl #17
   16778:	andeq	r6, r1, r4, lsl #17
   1677c:	andeq	r6, r1, r4, lsl #17
   16780:	andeq	r6, r1, r4, lsl #17
   16784:	strdeq	r6, [r1], -r4
   16788:	strdeq	r6, [r1], -r4
   1678c:	andeq	r6, r1, r4, lsl #17
   16790:	andeq	r6, r1, r4, lsl #17
   16794:	andeq	r6, r1, r4, lsl #17
   16798:	andeq	r6, r1, r4, lsl #17
   1679c:	andeq	r6, r1, r4, lsl #17
   167a0:	andeq	r6, r1, r4, lsl #17
   167a4:	andeq	r6, r1, r4, lsl #17
   167a8:	andeq	r6, r1, r4, lsl #17
   167ac:	andeq	r6, r1, r4, lsl #17
   167b0:	andeq	r6, r1, r4, lsl #17
   167b4:	andeq	r6, r1, r4, lsl #17
   167b8:	andeq	r6, r1, r4, lsl #17
   167bc:	strdeq	r6, [r1], -r4
   167c0:	andeq	r6, r1, r4, lsl #17
   167c4:	andeq	r6, r1, r4, lsl #17
   167c8:	andeq	r6, r1, r4, lsl #17
   167cc:	strdeq	r6, [r1], -r4
   167d0:	andeq	r6, r1, r4, lsl #17
   167d4:	strdeq	r6, [r1], -r4
   167d8:	andeq	r6, r1, r4, lsl #17
   167dc:	andeq	r6, r1, r4, lsl #17
   167e0:	andeq	r6, r1, r4, lsl #17
   167e4:	andeq	r6, r1, r4, lsl #17
   167e8:	andeq	r6, r1, r4, lsl #17
   167ec:	andeq	r6, r1, r4, lsl #17
   167f0:	strdeq	r6, [r1], -r4
   167f4:	mov	r1, #48	; 0x30
   167f8:	ldr	r0, [fp, #4]
   167fc:	bl	10ddc <strchr@plt>
   16800:	mov	r3, r0
   16804:	cmp	r3, #0
   16808:	beq	16878 <__assert_fail@plt+0x59d0>
   1680c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16810:	ldr	r3, [r3]
   16814:	add	r3, r3, #1
   16818:	ldrb	r3, [r3]
   1681c:	cmp	r3, #68	; 0x44
   16820:	beq	16860 <__assert_fail@plt+0x59b8>
   16824:	cmp	r3, #105	; 0x69
   16828:	beq	16838 <__assert_fail@plt+0x5990>
   1682c:	cmp	r3, #66	; 0x42
   16830:	beq	16860 <__assert_fail@plt+0x59b8>
   16834:	b	16884 <__assert_fail@plt+0x59dc>
   16838:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1683c:	ldr	r3, [r3]
   16840:	add	r3, r3, #2
   16844:	ldrb	r3, [r3]
   16848:	cmp	r3, #66	; 0x42
   1684c:	bne	16880 <__assert_fail@plt+0x59d8>
   16850:	ldr	r3, [fp, #-16]
   16854:	add	r3, r3, #2
   16858:	str	r3, [fp, #-16]
   1685c:	b	16880 <__assert_fail@plt+0x59d8>
   16860:	mov	r3, #1000	; 0x3e8
   16864:	str	r3, [fp, #-12]
   16868:	ldr	r3, [fp, #-16]
   1686c:	add	r3, r3, #1
   16870:	str	r3, [fp, #-16]
   16874:	b	16884 <__assert_fail@plt+0x59dc>
   16878:	nop	{0}
   1687c:	b	16884 <__assert_fail@plt+0x59dc>
   16880:	nop	{0}
   16884:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16888:	ldr	r3, [r3]
   1688c:	ldrb	r3, [r3]
   16890:	sub	r3, r3, #66	; 0x42
   16894:	cmp	r3, #53	; 0x35
   16898:	ldrls	pc, [pc, r3, lsl #2]
   1689c:	b	16aac <__assert_fail@plt+0x5c04>
   168a0:	muleq	r1, r0, r9
   168a4:	andeq	r6, r1, ip, lsr #21
   168a8:	andeq	r6, r1, ip, lsr #21
   168ac:			; <UNDEFINED> instruction: 0x000169b4
   168b0:	andeq	r6, r1, ip, lsr #21
   168b4:	ldrdeq	r6, [r1], -r0
   168b8:	andeq	r6, r1, ip, lsr #21
   168bc:	andeq	r6, r1, ip, lsr #21
   168c0:	andeq	r6, r1, ip, lsr #21
   168c4:	andeq	r6, r1, ip, ror #19
   168c8:	andeq	r6, r1, ip, lsr #21
   168cc:	andeq	r6, r1, r8, lsl #20
   168d0:	andeq	r6, r1, ip, lsr #21
   168d4:	andeq	r6, r1, ip, lsr #21
   168d8:	andeq	r6, r1, r4, lsr #20
   168dc:	andeq	r6, r1, ip, lsr #21
   168e0:	andeq	r6, r1, ip, lsr #21
   168e4:	andeq	r6, r1, ip, lsr #21
   168e8:	andeq	r6, r1, r0, asr #20
   168ec:	andeq	r6, r1, ip, lsr #21
   168f0:	andeq	r6, r1, ip, lsr #21
   168f4:	andeq	r6, r1, ip, lsr #21
   168f8:	andeq	r6, r1, ip, lsr #21
   168fc:	andeq	r6, r1, r4, ror sl
   16900:	muleq	r1, r0, sl
   16904:	andeq	r6, r1, ip, lsr #21
   16908:	andeq	r6, r1, ip, lsr #21
   1690c:	andeq	r6, r1, ip, lsr #21
   16910:	andeq	r6, r1, ip, lsr #21
   16914:	andeq	r6, r1, ip, lsr #21
   16918:	andeq	r6, r1, ip, lsr #21
   1691c:	andeq	r6, r1, ip, lsr #21
   16920:	andeq	r6, r1, r8, ror r9
   16924:	andeq	r6, r1, r8, lsr #19
   16928:	andeq	r6, r1, ip, lsr #21
   1692c:	andeq	r6, r1, ip, lsr #21
   16930:	andeq	r6, r1, ip, lsr #21
   16934:	ldrdeq	r6, [r1], -r0
   16938:	andeq	r6, r1, ip, lsr #21
   1693c:	andeq	r6, r1, ip, lsr #21
   16940:	andeq	r6, r1, ip, lsr #21
   16944:	andeq	r6, r1, ip, ror #19
   16948:	andeq	r6, r1, ip, lsr #21
   1694c:	andeq	r6, r1, r8, lsl #20
   16950:	andeq	r6, r1, ip, lsr #21
   16954:	andeq	r6, r1, ip, lsr #21
   16958:	andeq	r6, r1, ip, lsr #21
   1695c:	andeq	r6, r1, ip, lsr #21
   16960:	andeq	r6, r1, ip, lsr #21
   16964:	andeq	r6, r1, ip, lsr #21
   16968:	andeq	r6, r1, r0, asr #20
   1696c:	andeq	r6, r1, ip, lsr #21
   16970:	andeq	r6, r1, ip, lsr #21
   16974:	andeq	r6, r1, ip, asr sl
   16978:	sub	r3, fp, #36	; 0x24
   1697c:	mov	r1, #512	; 0x200
   16980:	mov	r0, r3
   16984:	bl	162c0 <__assert_fail@plt+0x5418>
   16988:	str	r0, [fp, #-20]	; 0xffffffec
   1698c:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16990:	sub	r3, fp, #36	; 0x24
   16994:	mov	r1, #1024	; 0x400
   16998:	mov	r0, r3
   1699c:	bl	162c0 <__assert_fail@plt+0x5418>
   169a0:	str	r0, [fp, #-20]	; 0xffffffec
   169a4:	b	16ac4 <__assert_fail@plt+0x5c1c>
   169a8:	mov	r3, #0
   169ac:	str	r3, [fp, #-20]	; 0xffffffec
   169b0:	b	16ac4 <__assert_fail@plt+0x5c1c>
   169b4:	sub	r3, fp, #36	; 0x24
   169b8:	mov	r2, #6
   169bc:	ldr	r1, [fp, #-12]
   169c0:	mov	r0, r3
   169c4:	bl	164d8 <__assert_fail@plt+0x5630>
   169c8:	str	r0, [fp, #-20]	; 0xffffffec
   169cc:	b	16ac4 <__assert_fail@plt+0x5c1c>
   169d0:	sub	r3, fp, #36	; 0x24
   169d4:	mov	r2, #3
   169d8:	ldr	r1, [fp, #-12]
   169dc:	mov	r0, r3
   169e0:	bl	164d8 <__assert_fail@plt+0x5630>
   169e4:	str	r0, [fp, #-20]	; 0xffffffec
   169e8:	b	16ac4 <__assert_fail@plt+0x5c1c>
   169ec:	sub	r3, fp, #36	; 0x24
   169f0:	mov	r2, #1
   169f4:	ldr	r1, [fp, #-12]
   169f8:	mov	r0, r3
   169fc:	bl	164d8 <__assert_fail@plt+0x5630>
   16a00:	str	r0, [fp, #-20]	; 0xffffffec
   16a04:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16a08:	sub	r3, fp, #36	; 0x24
   16a0c:	mov	r2, #2
   16a10:	ldr	r1, [fp, #-12]
   16a14:	mov	r0, r3
   16a18:	bl	164d8 <__assert_fail@plt+0x5630>
   16a1c:	str	r0, [fp, #-20]	; 0xffffffec
   16a20:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16a24:	sub	r3, fp, #36	; 0x24
   16a28:	mov	r2, #5
   16a2c:	ldr	r1, [fp, #-12]
   16a30:	mov	r0, r3
   16a34:	bl	164d8 <__assert_fail@plt+0x5630>
   16a38:	str	r0, [fp, #-20]	; 0xffffffec
   16a3c:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16a40:	sub	r3, fp, #36	; 0x24
   16a44:	mov	r2, #4
   16a48:	ldr	r1, [fp, #-12]
   16a4c:	mov	r0, r3
   16a50:	bl	164d8 <__assert_fail@plt+0x5630>
   16a54:	str	r0, [fp, #-20]	; 0xffffffec
   16a58:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16a5c:	sub	r3, fp, #36	; 0x24
   16a60:	mov	r1, #2
   16a64:	mov	r0, r3
   16a68:	bl	162c0 <__assert_fail@plt+0x5418>
   16a6c:	str	r0, [fp, #-20]	; 0xffffffec
   16a70:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16a74:	sub	r3, fp, #36	; 0x24
   16a78:	mov	r2, #8
   16a7c:	ldr	r1, [fp, #-12]
   16a80:	mov	r0, r3
   16a84:	bl	164d8 <__assert_fail@plt+0x5630>
   16a88:	str	r0, [fp, #-20]	; 0xffffffec
   16a8c:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16a90:	sub	r3, fp, #36	; 0x24
   16a94:	mov	r2, #7
   16a98:	ldr	r1, [fp, #-12]
   16a9c:	mov	r0, r3
   16aa0:	bl	164d8 <__assert_fail@plt+0x5630>
   16aa4:	str	r0, [fp, #-20]	; 0xffffffec
   16aa8:	b	16ac4 <__assert_fail@plt+0x5c1c>
   16aac:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16ab0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16ab4:	strd	r2, [r1]
   16ab8:	ldr	r3, [fp, #-8]
   16abc:	orr	r3, r3, #2
   16ac0:	b	16b1c <__assert_fail@plt+0x5c74>
   16ac4:	ldr	r2, [fp, #-8]
   16ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16acc:	orr	r3, r2, r3
   16ad0:	str	r3, [fp, #-8]
   16ad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ad8:	ldr	r2, [r3]
   16adc:	ldr	r3, [fp, #-16]
   16ae0:	add	r2, r2, r3
   16ae4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ae8:	str	r2, [r3]
   16aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16af0:	ldr	r3, [r3]
   16af4:	ldrb	r3, [r3]
   16af8:	cmp	r3, #0
   16afc:	beq	16b0c <__assert_fail@plt+0x5c64>
   16b00:	ldr	r3, [fp, #-8]
   16b04:	orr	r3, r3, #2
   16b08:	str	r3, [fp, #-8]
   16b0c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16b10:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16b14:	strd	r2, [r1]
   16b18:	ldr	r3, [fp, #-8]
   16b1c:	mov	r0, r3
   16b20:	sub	sp, fp, #4
   16b24:	ldr	fp, [sp]
   16b28:	add	sp, sp, #4
   16b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b30:	str	fp, [sp, #-8]!
   16b34:	str	lr, [sp, #4]
   16b38:	add	fp, sp, #4
   16b3c:	sub	sp, sp, #16
   16b40:	str	r0, [fp, #-16]
   16b44:	str	r1, [fp, #-20]	; 0xffffffec
   16b48:	ldr	r3, [fp, #-16]
   16b4c:	cmp	r3, #0
   16b50:	beq	16b60 <__assert_fail@plt+0x5cb8>
   16b54:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b58:	cmp	r3, #0
   16b5c:	bne	16b70 <__assert_fail@plt+0x5cc8>
   16b60:	mov	r3, #1
   16b64:	str	r3, [fp, #-20]	; 0xffffffec
   16b68:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b6c:	str	r3, [fp, #-16]
   16b70:	mov	ip, #0
   16b74:	ldr	r2, [fp, #-16]
   16b78:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b7c:	umull	r0, r1, r2, r3
   16b80:	mov	r2, #0
   16b84:	mov	r3, #0
   16b88:	mov	r2, r1
   16b8c:	mov	r3, #0
   16b90:	cmp	r2, #0
   16b94:	beq	16b9c <__assert_fail@plt+0x5cf4>
   16b98:	mov	ip, #1
   16b9c:	cmp	r0, #0
   16ba0:	bge	16ba8 <__assert_fail@plt+0x5d00>
   16ba4:	mov	ip, #1
   16ba8:	mov	r3, ip
   16bac:	and	r3, r3, #1
   16bb0:	uxtb	r3, r3
   16bb4:	cmp	r3, #0
   16bb8:	beq	16bd4 <__assert_fail@plt+0x5d2c>
   16bbc:	bl	10df4 <__errno_location@plt>
   16bc0:	mov	r2, r0
   16bc4:	mov	r3, #12
   16bc8:	str	r3, [r2]
   16bcc:	mov	r3, #0
   16bd0:	b	16bec <__assert_fail@plt+0x5d44>
   16bd4:	ldr	r1, [fp, #-20]	; 0xffffffec
   16bd8:	ldr	r0, [fp, #-16]
   16bdc:	bl	10c44 <calloc@plt>
   16be0:	mov	r3, r0
   16be4:	str	r3, [fp, #-8]
   16be8:	ldr	r3, [fp, #-8]
   16bec:	mov	r0, r3
   16bf0:	sub	sp, fp, #4
   16bf4:	ldr	fp, [sp]
   16bf8:	add	sp, sp, #4
   16bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16c00:	str	fp, [sp, #-8]!
   16c04:	str	lr, [sp, #4]
   16c08:	add	fp, sp, #4
   16c0c:	sub	sp, sp, #16
   16c10:	str	r0, [fp, #-16]
   16c14:	ldr	r3, [fp, #-16]
   16c18:	cmp	r3, #0
   16c1c:	bne	16c28 <__assert_fail@plt+0x5d80>
   16c20:	mov	r3, #1
   16c24:	str	r3, [fp, #-16]
   16c28:	mov	r2, #0
   16c2c:	ldr	r3, [fp, #-16]
   16c30:	cmp	r3, #0
   16c34:	bge	16c3c <__assert_fail@plt+0x5d94>
   16c38:	mov	r2, #1
   16c3c:	mov	r3, r2
   16c40:	and	r3, r3, #1
   16c44:	uxtb	r3, r3
   16c48:	cmp	r3, #0
   16c4c:	beq	16c68 <__assert_fail@plt+0x5dc0>
   16c50:	bl	10df4 <__errno_location@plt>
   16c54:	mov	r2, r0
   16c58:	mov	r3, #12
   16c5c:	str	r3, [r2]
   16c60:	mov	r3, #0
   16c64:	b	16c7c <__assert_fail@plt+0x5dd4>
   16c68:	ldr	r0, [fp, #-16]
   16c6c:	bl	10d70 <malloc@plt>
   16c70:	mov	r3, r0
   16c74:	str	r3, [fp, #-8]
   16c78:	ldr	r3, [fp, #-8]
   16c7c:	mov	r0, r3
   16c80:	sub	sp, fp, #4
   16c84:	ldr	fp, [sp]
   16c88:	add	sp, sp, #4
   16c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c90:	str	fp, [sp, #-8]!
   16c94:	str	lr, [sp, #4]
   16c98:	add	fp, sp, #4
   16c9c:	sub	sp, sp, #16
   16ca0:	str	r0, [fp, #-16]
   16ca4:	str	r1, [fp, #-20]	; 0xffffffec
   16ca8:	ldr	r3, [fp, #-16]
   16cac:	cmp	r3, #0
   16cb0:	bne	16cc4 <__assert_fail@plt+0x5e1c>
   16cb4:	ldr	r0, [fp, #-20]	; 0xffffffec
   16cb8:	bl	16c00 <__assert_fail@plt+0x5d58>
   16cbc:	mov	r3, r0
   16cc0:	b	16d34 <__assert_fail@plt+0x5e8c>
   16cc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16cc8:	cmp	r3, #0
   16ccc:	bne	16ce0 <__assert_fail@plt+0x5e38>
   16cd0:	ldr	r0, [fp, #-16]
   16cd4:	bl	1709c <__assert_fail@plt+0x61f4>
   16cd8:	mov	r3, #0
   16cdc:	b	16d34 <__assert_fail@plt+0x5e8c>
   16ce0:	mov	r2, #0
   16ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ce8:	cmp	r3, #0
   16cec:	bge	16cf4 <__assert_fail@plt+0x5e4c>
   16cf0:	mov	r2, #1
   16cf4:	mov	r3, r2
   16cf8:	and	r3, r3, #1
   16cfc:	uxtb	r3, r3
   16d00:	cmp	r3, #0
   16d04:	beq	16d20 <__assert_fail@plt+0x5e78>
   16d08:	bl	10df4 <__errno_location@plt>
   16d0c:	mov	r2, r0
   16d10:	mov	r3, #12
   16d14:	str	r3, [r2]
   16d18:	mov	r3, #0
   16d1c:	b	16d34 <__assert_fail@plt+0x5e8c>
   16d20:	ldr	r1, [fp, #-20]	; 0xffffffec
   16d24:	ldr	r0, [fp, #-16]
   16d28:	bl	10ce0 <realloc@plt>
   16d2c:	str	r0, [fp, #-8]
   16d30:	ldr	r3, [fp, #-8]
   16d34:	mov	r0, r3
   16d38:	sub	sp, fp, #4
   16d3c:	ldr	fp, [sp]
   16d40:	add	sp, sp, #4
   16d44:	pop	{pc}		; (ldr pc, [sp], #4)
   16d48:	strd	r4, [sp, #-16]!
   16d4c:	str	fp, [sp, #8]
   16d50:	str	lr, [sp, #12]
   16d54:	add	fp, sp, #12
   16d58:	sub	sp, sp, #16
   16d5c:	str	r0, [fp, #-24]	; 0xffffffe8
   16d60:	str	r1, [fp, #-28]	; 0xffffffe4
   16d64:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16d68:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16d6c:	cmp	r5, r4
   16d70:	bne	16d7c <__assert_fail@plt+0x5ed4>
   16d74:	mov	r3, #0
   16d78:	b	16ddc <__assert_fail@plt+0x5f34>
   16d7c:	ldrb	r3, [r5]
   16d80:	mov	r0, r3
   16d84:	bl	17a18 <__assert_fail@plt+0x6b70>
   16d88:	mov	r3, r0
   16d8c:	strb	r3, [fp, #-13]
   16d90:	ldrb	r3, [r4]
   16d94:	mov	r0, r3
   16d98:	bl	17a18 <__assert_fail@plt+0x6b70>
   16d9c:	mov	r3, r0
   16da0:	strb	r3, [fp, #-14]
   16da4:	ldrb	r3, [fp, #-13]
   16da8:	cmp	r3, #0
   16dac:	beq	16dcc <__assert_fail@plt+0x5f24>
   16db0:	add	r5, r5, #1
   16db4:	add	r4, r4, #1
   16db8:	ldrb	r2, [fp, #-13]
   16dbc:	ldrb	r3, [fp, #-14]
   16dc0:	cmp	r2, r3
   16dc4:	beq	16d7c <__assert_fail@plt+0x5ed4>
   16dc8:	b	16dd0 <__assert_fail@plt+0x5f28>
   16dcc:	nop	{0}
   16dd0:	ldrb	r2, [fp, #-13]
   16dd4:	ldrb	r3, [fp, #-14]
   16dd8:	sub	r3, r2, r3
   16ddc:	mov	r0, r3
   16de0:	sub	sp, fp, #12
   16de4:	ldrd	r4, [sp]
   16de8:	ldr	fp, [sp, #8]
   16dec:	add	sp, sp, #12
   16df0:	pop	{pc}		; (ldr pc, [sp], #4)
   16df4:	str	fp, [sp, #-8]!
   16df8:	str	lr, [sp, #4]
   16dfc:	add	fp, sp, #4
   16e00:	sub	sp, sp, #16
   16e04:	str	r0, [fp, #-16]
   16e08:	ldr	r0, [fp, #-16]
   16e0c:	bl	10d34 <__fpending@plt>
   16e10:	mov	r3, r0
   16e14:	cmp	r3, #0
   16e18:	movne	r3, #1
   16e1c:	moveq	r3, #0
   16e20:	strb	r3, [fp, #-5]
   16e24:	ldr	r0, [fp, #-16]
   16e28:	bl	10d40 <ferror_unlocked@plt>
   16e2c:	mov	r3, r0
   16e30:	cmp	r3, #0
   16e34:	movne	r3, #1
   16e38:	moveq	r3, #0
   16e3c:	strb	r3, [fp, #-6]
   16e40:	ldr	r0, [fp, #-16]
   16e44:	bl	16ed8 <__assert_fail@plt+0x6030>
   16e48:	mov	r3, r0
   16e4c:	cmp	r3, #0
   16e50:	movne	r3, #1
   16e54:	moveq	r3, #0
   16e58:	strb	r3, [fp, #-7]
   16e5c:	ldrb	r3, [fp, #-6]
   16e60:	cmp	r3, #0
   16e64:	bne	16e94 <__assert_fail@plt+0x5fec>
   16e68:	ldrb	r3, [fp, #-7]
   16e6c:	cmp	r3, #0
   16e70:	beq	16ec0 <__assert_fail@plt+0x6018>
   16e74:	ldrb	r3, [fp, #-5]
   16e78:	cmp	r3, #0
   16e7c:	bne	16e94 <__assert_fail@plt+0x5fec>
   16e80:	bl	10df4 <__errno_location@plt>
   16e84:	mov	r3, r0
   16e88:	ldr	r3, [r3]
   16e8c:	cmp	r3, #9
   16e90:	beq	16ec0 <__assert_fail@plt+0x6018>
   16e94:	ldrb	r3, [fp, #-7]
   16e98:	eor	r3, r3, #1
   16e9c:	uxtb	r3, r3
   16ea0:	cmp	r3, #0
   16ea4:	beq	16eb8 <__assert_fail@plt+0x6010>
   16ea8:	bl	10df4 <__errno_location@plt>
   16eac:	mov	r2, r0
   16eb0:	mov	r3, #0
   16eb4:	str	r3, [r2]
   16eb8:	mvn	r3, #0
   16ebc:	b	16ec4 <__assert_fail@plt+0x601c>
   16ec0:	mov	r3, #0
   16ec4:	mov	r0, r3
   16ec8:	sub	sp, fp, #4
   16ecc:	ldr	fp, [sp]
   16ed0:	add	sp, sp, #4
   16ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ed8:	str	fp, [sp, #-8]!
   16edc:	str	lr, [sp, #4]
   16ee0:	add	fp, sp, #4
   16ee4:	sub	sp, sp, #32
   16ee8:	str	r0, [fp, #-24]	; 0xffffffe8
   16eec:	mov	r3, #0
   16ef0:	str	r3, [fp, #-8]
   16ef4:	mov	r3, #0
   16ef8:	str	r3, [fp, #-12]
   16efc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f00:	bl	10e18 <fileno@plt>
   16f04:	str	r0, [fp, #-16]
   16f08:	ldr	r3, [fp, #-16]
   16f0c:	cmp	r3, #0
   16f10:	bge	16f24 <__assert_fail@plt+0x607c>
   16f14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f18:	bl	10e30 <fclose@plt>
   16f1c:	mov	r3, r0
   16f20:	b	16fc8 <__assert_fail@plt+0x6120>
   16f24:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f28:	bl	10d88 <__freading@plt>
   16f2c:	mov	r3, r0
   16f30:	cmp	r3, #0
   16f34:	beq	16f70 <__assert_fail@plt+0x60c8>
   16f38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f3c:	bl	10e18 <fileno@plt>
   16f40:	mov	r1, r0
   16f44:	mov	r3, #1
   16f48:	str	r3, [sp]
   16f4c:	mov	r2, #0
   16f50:	mov	r3, #0
   16f54:	mov	r0, r1
   16f58:	bl	10d1c <lseek64@plt>
   16f5c:	mvn	r2, #0
   16f60:	mvn	r3, #0
   16f64:	cmp	r1, r3
   16f68:	cmpeq	r0, r2
   16f6c:	beq	16f94 <__assert_fail@plt+0x60ec>
   16f70:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f74:	bl	17030 <__assert_fail@plt+0x6188>
   16f78:	mov	r3, r0
   16f7c:	cmp	r3, #0
   16f80:	beq	16f94 <__assert_fail@plt+0x60ec>
   16f84:	bl	10df4 <__errno_location@plt>
   16f88:	mov	r3, r0
   16f8c:	ldr	r3, [r3]
   16f90:	str	r3, [fp, #-8]
   16f94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f98:	bl	10e30 <fclose@plt>
   16f9c:	str	r0, [fp, #-12]
   16fa0:	ldr	r3, [fp, #-8]
   16fa4:	cmp	r3, #0
   16fa8:	beq	16fc4 <__assert_fail@plt+0x611c>
   16fac:	bl	10df4 <__errno_location@plt>
   16fb0:	mov	r2, r0
   16fb4:	ldr	r3, [fp, #-8]
   16fb8:	str	r3, [r2]
   16fbc:	mvn	r3, #0
   16fc0:	str	r3, [fp, #-12]
   16fc4:	ldr	r3, [fp, #-12]
   16fc8:	mov	r0, r3
   16fcc:	sub	sp, fp, #4
   16fd0:	ldr	fp, [sp]
   16fd4:	add	sp, sp, #4
   16fd8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fdc:	str	fp, [sp, #-8]!
   16fe0:	str	lr, [sp, #4]
   16fe4:	add	fp, sp, #4
   16fe8:	sub	sp, sp, #16
   16fec:	str	r0, [fp, #-8]
   16ff0:	ldr	r3, [fp, #-8]
   16ff4:	ldr	r3, [r3]
   16ff8:	and	r3, r3, #256	; 0x100
   16ffc:	cmp	r3, #0
   17000:	beq	1701c <__assert_fail@plt+0x6174>
   17004:	mov	r3, #1
   17008:	str	r3, [sp]
   1700c:	mov	r2, #0
   17010:	mov	r3, #0
   17014:	ldr	r0, [fp, #-8]
   17018:	bl	17140 <__assert_fail@plt+0x6298>
   1701c:	nop	{0}
   17020:	sub	sp, fp, #4
   17024:	ldr	fp, [sp]
   17028:	add	sp, sp, #4
   1702c:	pop	{pc}		; (ldr pc, [sp], #4)
   17030:	str	fp, [sp, #-8]!
   17034:	str	lr, [sp, #4]
   17038:	add	fp, sp, #4
   1703c:	sub	sp, sp, #8
   17040:	str	r0, [fp, #-8]
   17044:	ldr	r3, [fp, #-8]
   17048:	cmp	r3, #0
   1704c:	beq	17064 <__assert_fail@plt+0x61bc>
   17050:	ldr	r0, [fp, #-8]
   17054:	bl	10d88 <__freading@plt>
   17058:	mov	r3, r0
   1705c:	cmp	r3, #0
   17060:	bne	17074 <__assert_fail@plt+0x61cc>
   17064:	ldr	r0, [fp, #-8]
   17068:	bl	10c80 <fflush@plt>
   1706c:	mov	r3, r0
   17070:	b	17088 <__assert_fail@plt+0x61e0>
   17074:	ldr	r0, [fp, #-8]
   17078:	bl	16fdc <__assert_fail@plt+0x6134>
   1707c:	ldr	r0, [fp, #-8]
   17080:	bl	10c80 <fflush@plt>
   17084:	mov	r3, r0
   17088:	mov	r0, r3
   1708c:	sub	sp, fp, #4
   17090:	ldr	fp, [sp]
   17094:	add	sp, sp, #4
   17098:	pop	{pc}		; (ldr pc, [sp], #4)
   1709c:	str	r4, [sp, #-12]!
   170a0:	str	fp, [sp, #4]
   170a4:	str	lr, [sp, #8]
   170a8:	add	fp, sp, #8
   170ac:	sub	sp, sp, #20
   170b0:	str	r0, [fp, #-24]	; 0xffffffe8
   170b4:	bl	10df4 <__errno_location@plt>
   170b8:	mov	r3, r0
   170bc:	ldr	r3, [r3]
   170c0:	str	r3, [fp, #-20]	; 0xffffffec
   170c4:	bl	10df4 <__errno_location@plt>
   170c8:	mov	r3, r0
   170cc:	ldr	r3, [r3]
   170d0:	str	r3, [fp, #-16]
   170d4:	bl	10df4 <__errno_location@plt>
   170d8:	mov	r2, r0
   170dc:	mov	r3, #0
   170e0:	str	r3, [r2]
   170e4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   170e8:	bl	10c8c <free@plt>
   170ec:	bl	10df4 <__errno_location@plt>
   170f0:	mov	r3, r0
   170f4:	ldr	r3, [r3]
   170f8:	cmp	r3, #0
   170fc:	moveq	r3, #1
   17100:	movne	r3, #0
   17104:	uxtb	r3, r3
   17108:	mov	r4, r3
   1710c:	bl	10df4 <__errno_location@plt>
   17110:	mov	r2, r0
   17114:	lsl	r3, r4, #2
   17118:	sub	r1, fp, #12
   1711c:	add	r3, r1, r3
   17120:	ldr	r3, [r3, #-8]
   17124:	str	r3, [r2]
   17128:	nop	{0}
   1712c:	sub	sp, fp, #8
   17130:	ldr	r4, [sp]
   17134:	ldr	fp, [sp, #4]
   17138:	add	sp, sp, #8
   1713c:	pop	{pc}		; (ldr pc, [sp], #4)
   17140:	str	fp, [sp, #-8]!
   17144:	str	lr, [sp, #4]
   17148:	add	fp, sp, #4
   1714c:	sub	sp, sp, #32
   17150:	str	r0, [fp, #-16]
   17154:	strd	r2, [fp, #-28]	; 0xffffffe4
   17158:	ldr	r3, [fp, #-16]
   1715c:	ldr	r2, [r3, #8]
   17160:	ldr	r3, [fp, #-16]
   17164:	ldr	r3, [r3, #4]
   17168:	cmp	r2, r3
   1716c:	bne	17204 <__assert_fail@plt+0x635c>
   17170:	ldr	r3, [fp, #-16]
   17174:	ldr	r2, [r3, #20]
   17178:	ldr	r3, [fp, #-16]
   1717c:	ldr	r3, [r3, #16]
   17180:	cmp	r2, r3
   17184:	bne	17204 <__assert_fail@plt+0x635c>
   17188:	ldr	r3, [fp, #-16]
   1718c:	ldr	r3, [r3, #36]	; 0x24
   17190:	cmp	r3, #0
   17194:	bne	17204 <__assert_fail@plt+0x635c>
   17198:	ldr	r0, [fp, #-16]
   1719c:	bl	10e18 <fileno@plt>
   171a0:	mov	r1, r0
   171a4:	ldr	r3, [fp, #4]
   171a8:	str	r3, [sp]
   171ac:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   171b0:	mov	r0, r1
   171b4:	bl	10d1c <lseek64@plt>
   171b8:	strd	r0, [fp, #-12]
   171bc:	ldrd	r2, [fp, #-12]
   171c0:	mvn	r0, #0
   171c4:	mvn	r1, #0
   171c8:	cmp	r3, r1
   171cc:	cmpeq	r2, r0
   171d0:	bne	171dc <__assert_fail@plt+0x6334>
   171d4:	mvn	r3, #0
   171d8:	b	1721c <__assert_fail@plt+0x6374>
   171dc:	ldr	r3, [fp, #-16]
   171e0:	ldr	r3, [r3]
   171e4:	bic	r2, r3, #16
   171e8:	ldr	r3, [fp, #-16]
   171ec:	str	r2, [r3]
   171f0:	ldr	r1, [fp, #-16]
   171f4:	ldrd	r2, [fp, #-12]
   171f8:	strd	r2, [r1, #80]	; 0x50
   171fc:	mov	r3, #0
   17200:	b	1721c <__assert_fail@plt+0x6374>
   17204:	ldr	r3, [fp, #4]
   17208:	str	r3, [sp]
   1720c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17210:	ldr	r0, [fp, #-16]
   17214:	bl	10e3c <fseeko64@plt>
   17218:	mov	r3, r0
   1721c:	mov	r0, r3
   17220:	sub	sp, fp, #4
   17224:	ldr	fp, [sp]
   17228:	add	sp, sp, #4
   1722c:	pop	{pc}		; (ldr pc, [sp], #4)
   17230:	str	fp, [sp, #-8]!
   17234:	str	lr, [sp, #4]
   17238:	add	fp, sp, #4
   1723c:	bl	10df4 <__errno_location@plt>
   17240:	mov	r2, r0
   17244:	mov	r3, #12
   17248:	str	r3, [r2]
   1724c:	mov	r3, #0
   17250:	mov	r0, r3
   17254:	sub	sp, fp, #4
   17258:	ldr	fp, [sp]
   1725c:	add	sp, sp, #4
   17260:	pop	{pc}		; (ldr pc, [sp], #4)
   17264:	str	fp, [sp, #-8]!
   17268:	str	lr, [sp, #4]
   1726c:	add	fp, sp, #4
   17270:	sub	sp, sp, #8
   17274:	str	r0, [fp, #-8]
   17278:	ldr	r3, [fp, #-8]
   1727c:	mov	r0, r3
   17280:	bl	16c00 <__assert_fail@plt+0x5d58>
   17284:	mov	r3, r0
   17288:	mov	r0, r3
   1728c:	sub	sp, fp, #4
   17290:	ldr	fp, [sp]
   17294:	add	sp, sp, #4
   17298:	pop	{pc}		; (ldr pc, [sp], #4)
   1729c:	str	fp, [sp, #-8]!
   172a0:	str	lr, [sp, #4]
   172a4:	add	fp, sp, #4
   172a8:	sub	sp, sp, #8
   172ac:	str	r0, [fp, #-8]
   172b0:	str	r1, [fp, #-12]
   172b4:	ldr	r3, [fp, #-12]
   172b8:	cmp	r3, #0
   172bc:	moveq	r3, #1
   172c0:	movne	r3, #0
   172c4:	uxtb	r3, r3
   172c8:	mov	r2, r3
   172cc:	ldr	r3, [fp, #-12]
   172d0:	orr	r3, r2, r3
   172d4:	mov	r1, r3
   172d8:	ldr	r0, [fp, #-8]
   172dc:	bl	16c90 <__assert_fail@plt+0x5de8>
   172e0:	mov	r3, r0
   172e4:	mov	r0, r3
   172e8:	sub	sp, fp, #4
   172ec:	ldr	fp, [sp]
   172f0:	add	sp, sp, #4
   172f4:	pop	{pc}		; (ldr pc, [sp], #4)
   172f8:	str	fp, [sp, #-8]!
   172fc:	str	lr, [sp, #4]
   17300:	add	fp, sp, #4
   17304:	sub	sp, sp, #8
   17308:	str	r0, [fp, #-8]
   1730c:	str	r1, [fp, #-12]
   17310:	ldr	r3, [fp, #-8]
   17314:	ldr	r2, [fp, #-12]
   17318:	mov	r1, r2
   1731c:	mov	r0, r3
   17320:	bl	16b30 <__assert_fail@plt+0x5c88>
   17324:	mov	r3, r0
   17328:	mov	r0, r3
   1732c:	sub	sp, fp, #4
   17330:	ldr	fp, [sp]
   17334:	add	sp, sp, #4
   17338:	pop	{pc}		; (ldr pc, [sp], #4)
   1733c:	str	fp, [sp, #-8]!
   17340:	str	lr, [sp, #4]
   17344:	add	fp, sp, #4
   17348:	sub	sp, sp, #16
   1734c:	str	r0, [fp, #-8]
   17350:	str	r1, [fp, #-12]
   17354:	str	r2, [fp, #-16]
   17358:	ldr	r3, [fp, #-12]
   1735c:	cmp	r3, #0
   17360:	beq	17370 <__assert_fail@plt+0x64c8>
   17364:	ldr	r3, [fp, #-16]
   17368:	cmp	r3, #0
   1736c:	bne	17380 <__assert_fail@plt+0x64d8>
   17370:	mov	r3, #1
   17374:	str	r3, [fp, #-16]
   17378:	ldr	r3, [fp, #-16]
   1737c:	str	r3, [fp, #-12]
   17380:	ldr	r3, [fp, #-12]
   17384:	ldr	r2, [fp, #-16]
   17388:	mov	r1, r3
   1738c:	ldr	r0, [fp, #-8]
   17390:	bl	174cc <__assert_fail@plt+0x6624>
   17394:	mov	r3, r0
   17398:	mov	r0, r3
   1739c:	sub	sp, fp, #4
   173a0:	ldr	fp, [sp]
   173a4:	add	sp, sp, #4
   173a8:	pop	{pc}		; (ldr pc, [sp], #4)
   173ac:	str	fp, [sp, #-8]!
   173b0:	str	lr, [sp, #4]
   173b4:	add	fp, sp, #4
   173b8:	sub	sp, sp, #8
   173bc:	mov	r0, #14
   173c0:	bl	10e60 <nl_langinfo@plt>
   173c4:	str	r0, [fp, #-8]
   173c8:	ldr	r3, [fp, #-8]
   173cc:	cmp	r3, #0
   173d0:	bne	173e0 <__assert_fail@plt+0x6538>
   173d4:	movw	r3, #36304	; 0x8dd0
   173d8:	movt	r3, #1
   173dc:	str	r3, [fp, #-8]
   173e0:	ldr	r3, [fp, #-8]
   173e4:	ldrb	r3, [r3]
   173e8:	cmp	r3, #0
   173ec:	bne	173fc <__assert_fail@plt+0x6554>
   173f0:	movw	r3, #36308	; 0x8dd4
   173f4:	movt	r3, #1
   173f8:	str	r3, [fp, #-8]
   173fc:	ldr	r3, [fp, #-8]
   17400:	mov	r0, r3
   17404:	sub	sp, fp, #4
   17408:	ldr	fp, [sp]
   1740c:	add	sp, sp, #4
   17410:	pop	{pc}		; (ldr pc, [sp], #4)
   17414:	str	fp, [sp, #-8]!
   17418:	str	lr, [sp, #4]
   1741c:	add	fp, sp, #4
   17420:	sub	sp, sp, #32
   17424:	str	r0, [fp, #-24]	; 0xffffffe8
   17428:	str	r1, [fp, #-28]	; 0xffffffe4
   1742c:	str	r2, [fp, #-32]	; 0xffffffe0
   17430:	str	r3, [fp, #-36]	; 0xffffffdc
   17434:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17438:	cmp	r3, #0
   1743c:	bne	17448 <__assert_fail@plt+0x65a0>
   17440:	sub	r3, fp, #16
   17444:	str	r3, [fp, #-24]	; 0xffffffe8
   17448:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1744c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17450:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17454:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17458:	bl	10d4c <mbrtowc@plt>
   1745c:	str	r0, [fp, #-8]
   17460:	ldr	r3, [fp, #-8]
   17464:	cmn	r3, #3
   17468:	bls	174b4 <__assert_fail@plt+0x660c>
   1746c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17470:	cmp	r3, #0
   17474:	beq	174b4 <__assert_fail@plt+0x660c>
   17478:	mov	r0, #0
   1747c:	bl	17a98 <__assert_fail@plt+0x6bf0>
   17480:	mov	r3, r0
   17484:	eor	r3, r3, #1
   17488:	uxtb	r3, r3
   1748c:	cmp	r3, #0
   17490:	beq	174b4 <__assert_fail@plt+0x660c>
   17494:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17498:	ldrb	r3, [r3]
   1749c:	strb	r3, [fp, #-9]
   174a0:	ldrb	r2, [fp, #-9]
   174a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174a8:	str	r2, [r3]
   174ac:	mov	r3, #1
   174b0:	b	174b8 <__assert_fail@plt+0x6610>
   174b4:	ldr	r3, [fp, #-8]
   174b8:	mov	r0, r3
   174bc:	sub	sp, fp, #4
   174c0:	ldr	fp, [sp]
   174c4:	add	sp, sp, #4
   174c8:	pop	{pc}		; (ldr pc, [sp], #4)
   174cc:	str	fp, [sp, #-8]!
   174d0:	str	lr, [sp, #4]
   174d4:	add	fp, sp, #4
   174d8:	sub	sp, sp, #24
   174dc:	str	r0, [fp, #-16]
   174e0:	str	r1, [fp, #-20]	; 0xffffffec
   174e4:	str	r2, [fp, #-24]	; 0xffffffe8
   174e8:	mov	ip, #0
   174ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   174f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174f4:	umull	r0, r1, r2, r3
   174f8:	mov	r2, #0
   174fc:	mov	r3, #0
   17500:	mov	r2, r1
   17504:	mov	r3, #0
   17508:	cmp	r2, #0
   1750c:	beq	17514 <__assert_fail@plt+0x666c>
   17510:	mov	ip, #1
   17514:	mov	r3, r0
   17518:	str	r3, [fp, #-8]
   1751c:	mov	r3, ip
   17520:	and	r3, r3, #1
   17524:	uxtb	r3, r3
   17528:	cmp	r3, #0
   1752c:	beq	17548 <__assert_fail@plt+0x66a0>
   17530:	bl	10df4 <__errno_location@plt>
   17534:	mov	r2, r0
   17538:	mov	r3, #12
   1753c:	str	r3, [r2]
   17540:	mov	r3, #0
   17544:	b	1755c <__assert_fail@plt+0x66b4>
   17548:	ldr	r3, [fp, #-8]
   1754c:	mov	r1, r3
   17550:	ldr	r0, [fp, #-16]
   17554:	bl	16c90 <__assert_fail@plt+0x5de8>
   17558:	mov	r3, r0
   1755c:	mov	r0, r3
   17560:	sub	sp, fp, #4
   17564:	ldr	fp, [sp]
   17568:	add	sp, sp, #4
   1756c:	pop	{pc}		; (ldr pc, [sp], #4)
   17570:	push	{fp}		; (str fp, [sp, #-4]!)
   17574:	add	fp, sp, #0
   17578:	sub	sp, sp, #12
   1757c:	str	r0, [fp, #-8]
   17580:	ldr	r3, [fp, #-8]
   17584:	cmp	r3, #90	; 0x5a
   17588:	bgt	175ac <__assert_fail@plt+0x6704>
   1758c:	ldr	r3, [fp, #-8]
   17590:	cmp	r3, #65	; 0x41
   17594:	bge	175bc <__assert_fail@plt+0x6714>
   17598:	ldr	r3, [fp, #-8]
   1759c:	sub	r3, r3, #48	; 0x30
   175a0:	cmp	r3, #9
   175a4:	bhi	175c4 <__assert_fail@plt+0x671c>
   175a8:	b	175bc <__assert_fail@plt+0x6714>
   175ac:	ldr	r3, [fp, #-8]
   175b0:	sub	r3, r3, #97	; 0x61
   175b4:	cmp	r3, #25
   175b8:	bhi	175c4 <__assert_fail@plt+0x671c>
   175bc:	mov	r3, #1
   175c0:	b	175c8 <__assert_fail@plt+0x6720>
   175c4:	mov	r3, #0
   175c8:	mov	r0, r3
   175cc:	add	sp, fp, #0
   175d0:	pop	{fp}		; (ldr fp, [sp], #4)
   175d4:	bx	lr
   175d8:	push	{fp}		; (str fp, [sp, #-4]!)
   175dc:	add	fp, sp, #0
   175e0:	sub	sp, sp, #12
   175e4:	str	r0, [fp, #-8]
   175e8:	ldr	r3, [fp, #-8]
   175ec:	cmp	r3, #65	; 0x41
   175f0:	blt	17618 <__assert_fail@plt+0x6770>
   175f4:	ldr	r3, [fp, #-8]
   175f8:	cmp	r3, #90	; 0x5a
   175fc:	ble	17610 <__assert_fail@plt+0x6768>
   17600:	ldr	r3, [fp, #-8]
   17604:	sub	r3, r3, #97	; 0x61
   17608:	cmp	r3, #25
   1760c:	bhi	17618 <__assert_fail@plt+0x6770>
   17610:	mov	r3, #1
   17614:	b	1761c <__assert_fail@plt+0x6774>
   17618:	mov	r3, #0
   1761c:	mov	r0, r3
   17620:	add	sp, fp, #0
   17624:	pop	{fp}		; (ldr fp, [sp], #4)
   17628:	bx	lr
   1762c:	push	{fp}		; (str fp, [sp, #-4]!)
   17630:	add	fp, sp, #0
   17634:	sub	sp, sp, #12
   17638:	str	r0, [fp, #-8]
   1763c:	ldr	r3, [fp, #-8]
   17640:	cmp	r3, #127	; 0x7f
   17644:	bhi	17650 <__assert_fail@plt+0x67a8>
   17648:	mov	r3, #1
   1764c:	b	17654 <__assert_fail@plt+0x67ac>
   17650:	mov	r3, #0
   17654:	mov	r0, r3
   17658:	add	sp, fp, #0
   1765c:	pop	{fp}		; (ldr fp, [sp], #4)
   17660:	bx	lr
   17664:	push	{fp}		; (str fp, [sp, #-4]!)
   17668:	add	fp, sp, #0
   1766c:	sub	sp, sp, #12
   17670:	str	r0, [fp, #-8]
   17674:	ldr	r3, [fp, #-8]
   17678:	cmp	r3, #32
   1767c:	beq	1768c <__assert_fail@plt+0x67e4>
   17680:	ldr	r3, [fp, #-8]
   17684:	cmp	r3, #9
   17688:	bne	17694 <__assert_fail@plt+0x67ec>
   1768c:	mov	r3, #1
   17690:	b	17698 <__assert_fail@plt+0x67f0>
   17694:	mov	r3, #0
   17698:	and	r3, r3, #1
   1769c:	uxtb	r3, r3
   176a0:	mov	r0, r3
   176a4:	add	sp, fp, #0
   176a8:	pop	{fp}		; (ldr fp, [sp], #4)
   176ac:	bx	lr
   176b0:	push	{fp}		; (str fp, [sp, #-4]!)
   176b4:	add	fp, sp, #0
   176b8:	sub	sp, sp, #12
   176bc:	str	r0, [fp, #-8]
   176c0:	ldr	r3, [fp, #-8]
   176c4:	cmp	r3, #0
   176c8:	blt	176ec <__assert_fail@plt+0x6844>
   176cc:	ldr	r3, [fp, #-8]
   176d0:	cmp	r3, #31
   176d4:	ble	176e4 <__assert_fail@plt+0x683c>
   176d8:	ldr	r3, [fp, #-8]
   176dc:	cmp	r3, #127	; 0x7f
   176e0:	bne	176ec <__assert_fail@plt+0x6844>
   176e4:	mov	r3, #1
   176e8:	b	176f0 <__assert_fail@plt+0x6848>
   176ec:	mov	r3, #0
   176f0:	mov	r0, r3
   176f4:	add	sp, fp, #0
   176f8:	pop	{fp}		; (ldr fp, [sp], #4)
   176fc:	bx	lr
   17700:	push	{fp}		; (str fp, [sp, #-4]!)
   17704:	add	fp, sp, #0
   17708:	sub	sp, sp, #12
   1770c:	str	r0, [fp, #-8]
   17710:	ldr	r3, [fp, #-8]
   17714:	sub	r3, r3, #48	; 0x30
   17718:	cmp	r3, #9
   1771c:	bhi	17728 <__assert_fail@plt+0x6880>
   17720:	mov	r3, #1
   17724:	b	1772c <__assert_fail@plt+0x6884>
   17728:	mov	r3, #0
   1772c:	mov	r0, r3
   17730:	add	sp, fp, #0
   17734:	pop	{fp}		; (ldr fp, [sp], #4)
   17738:	bx	lr
   1773c:	push	{fp}		; (str fp, [sp, #-4]!)
   17740:	add	fp, sp, #0
   17744:	sub	sp, sp, #12
   17748:	str	r0, [fp, #-8]
   1774c:	ldr	r3, [fp, #-8]
   17750:	sub	r3, r3, #33	; 0x21
   17754:	cmp	r3, #93	; 0x5d
   17758:	bhi	17764 <__assert_fail@plt+0x68bc>
   1775c:	mov	r3, #1
   17760:	b	17768 <__assert_fail@plt+0x68c0>
   17764:	mov	r3, #0
   17768:	mov	r0, r3
   1776c:	add	sp, fp, #0
   17770:	pop	{fp}		; (ldr fp, [sp], #4)
   17774:	bx	lr
   17778:	push	{fp}		; (str fp, [sp, #-4]!)
   1777c:	add	fp, sp, #0
   17780:	sub	sp, sp, #12
   17784:	str	r0, [fp, #-8]
   17788:	ldr	r3, [fp, #-8]
   1778c:	sub	r3, r3, #97	; 0x61
   17790:	cmp	r3, #25
   17794:	bhi	177a0 <__assert_fail@plt+0x68f8>
   17798:	mov	r3, #1
   1779c:	b	177a4 <__assert_fail@plt+0x68fc>
   177a0:	mov	r3, #0
   177a4:	mov	r0, r3
   177a8:	add	sp, fp, #0
   177ac:	pop	{fp}		; (ldr fp, [sp], #4)
   177b0:	bx	lr
   177b4:	push	{fp}		; (str fp, [sp, #-4]!)
   177b8:	add	fp, sp, #0
   177bc:	sub	sp, sp, #12
   177c0:	str	r0, [fp, #-8]
   177c4:	ldr	r3, [fp, #-8]
   177c8:	sub	r3, r3, #32
   177cc:	cmp	r3, #94	; 0x5e
   177d0:	bhi	177dc <__assert_fail@plt+0x6934>
   177d4:	mov	r3, #1
   177d8:	b	177e0 <__assert_fail@plt+0x6938>
   177dc:	mov	r3, #0
   177e0:	mov	r0, r3
   177e4:	add	sp, fp, #0
   177e8:	pop	{fp}		; (ldr fp, [sp], #4)
   177ec:	bx	lr
   177f0:	push	{fp}		; (str fp, [sp, #-4]!)
   177f4:	add	fp, sp, #0
   177f8:	sub	sp, sp, #12
   177fc:	str	r0, [fp, #-8]
   17800:	ldr	r3, [fp, #-8]
   17804:	cmp	r3, #64	; 0x40
   17808:	bgt	1782c <__assert_fail@plt+0x6984>
   1780c:	ldr	r3, [fp, #-8]
   17810:	cmp	r3, #58	; 0x3a
   17814:	bge	17854 <__assert_fail@plt+0x69ac>
   17818:	ldr	r3, [fp, #-8]
   1781c:	sub	r3, r3, #33	; 0x21
   17820:	cmp	r3, #14
   17824:	bhi	1785c <__assert_fail@plt+0x69b4>
   17828:	b	17854 <__assert_fail@plt+0x69ac>
   1782c:	ldr	r3, [fp, #-8]
   17830:	cmp	r3, #91	; 0x5b
   17834:	blt	1785c <__assert_fail@plt+0x69b4>
   17838:	ldr	r3, [fp, #-8]
   1783c:	cmp	r3, #96	; 0x60
   17840:	ble	17854 <__assert_fail@plt+0x69ac>
   17844:	ldr	r3, [fp, #-8]
   17848:	sub	r3, r3, #123	; 0x7b
   1784c:	cmp	r3, #3
   17850:	bhi	1785c <__assert_fail@plt+0x69b4>
   17854:	mov	r3, #1
   17858:	b	17860 <__assert_fail@plt+0x69b8>
   1785c:	mov	r3, #0
   17860:	mov	r0, r3
   17864:	add	sp, fp, #0
   17868:	pop	{fp}		; (ldr fp, [sp], #4)
   1786c:	bx	lr
   17870:	push	{fp}		; (str fp, [sp, #-4]!)
   17874:	add	fp, sp, #0
   17878:	sub	sp, sp, #12
   1787c:	str	r0, [fp, #-8]
   17880:	ldr	r3, [fp, #-8]
   17884:	cmp	r3, #9
   17888:	blt	178ac <__assert_fail@plt+0x6a04>
   1788c:	ldr	r3, [fp, #-8]
   17890:	cmp	r3, #13
   17894:	ble	178a4 <__assert_fail@plt+0x69fc>
   17898:	ldr	r3, [fp, #-8]
   1789c:	cmp	r3, #32
   178a0:	bne	178ac <__assert_fail@plt+0x6a04>
   178a4:	mov	r3, #1
   178a8:	b	178b0 <__assert_fail@plt+0x6a08>
   178ac:	mov	r3, #0
   178b0:	mov	r0, r3
   178b4:	add	sp, fp, #0
   178b8:	pop	{fp}		; (ldr fp, [sp], #4)
   178bc:	bx	lr
   178c0:	push	{fp}		; (str fp, [sp, #-4]!)
   178c4:	add	fp, sp, #0
   178c8:	sub	sp, sp, #12
   178cc:	str	r0, [fp, #-8]
   178d0:	ldr	r3, [fp, #-8]
   178d4:	sub	r3, r3, #65	; 0x41
   178d8:	cmp	r3, #25
   178dc:	bhi	178e8 <__assert_fail@plt+0x6a40>
   178e0:	mov	r3, #1
   178e4:	b	178ec <__assert_fail@plt+0x6a44>
   178e8:	mov	r3, #0
   178ec:	mov	r0, r3
   178f0:	add	sp, fp, #0
   178f4:	pop	{fp}		; (ldr fp, [sp], #4)
   178f8:	bx	lr
   178fc:	push	{fp}		; (str fp, [sp, #-4]!)
   17900:	add	fp, sp, #0
   17904:	sub	sp, sp, #12
   17908:	str	r0, [fp, #-8]
   1790c:	ldr	r3, [fp, #-8]
   17910:	sub	r3, r3, #48	; 0x30
   17914:	cmp	r3, #54	; 0x36
   17918:	ldrls	pc, [pc, r3, lsl #2]
   1791c:	b	17a04 <__assert_fail@plt+0x6b5c>
   17920:	strdeq	r7, [r1], -ip
   17924:	strdeq	r7, [r1], -ip
   17928:	strdeq	r7, [r1], -ip
   1792c:	strdeq	r7, [r1], -ip
   17930:	strdeq	r7, [r1], -ip
   17934:	strdeq	r7, [r1], -ip
   17938:	strdeq	r7, [r1], -ip
   1793c:	strdeq	r7, [r1], -ip
   17940:	strdeq	r7, [r1], -ip
   17944:	strdeq	r7, [r1], -ip
   17948:	andeq	r7, r1, r4, lsl #20
   1794c:	andeq	r7, r1, r4, lsl #20
   17950:	andeq	r7, r1, r4, lsl #20
   17954:	andeq	r7, r1, r4, lsl #20
   17958:	andeq	r7, r1, r4, lsl #20
   1795c:	andeq	r7, r1, r4, lsl #20
   17960:	andeq	r7, r1, r4, lsl #20
   17964:	strdeq	r7, [r1], -ip
   17968:	strdeq	r7, [r1], -ip
   1796c:	strdeq	r7, [r1], -ip
   17970:	strdeq	r7, [r1], -ip
   17974:	strdeq	r7, [r1], -ip
   17978:	strdeq	r7, [r1], -ip
   1797c:	andeq	r7, r1, r4, lsl #20
   17980:	andeq	r7, r1, r4, lsl #20
   17984:	andeq	r7, r1, r4, lsl #20
   17988:	andeq	r7, r1, r4, lsl #20
   1798c:	andeq	r7, r1, r4, lsl #20
   17990:	andeq	r7, r1, r4, lsl #20
   17994:	andeq	r7, r1, r4, lsl #20
   17998:	andeq	r7, r1, r4, lsl #20
   1799c:	andeq	r7, r1, r4, lsl #20
   179a0:	andeq	r7, r1, r4, lsl #20
   179a4:	andeq	r7, r1, r4, lsl #20
   179a8:	andeq	r7, r1, r4, lsl #20
   179ac:	andeq	r7, r1, r4, lsl #20
   179b0:	andeq	r7, r1, r4, lsl #20
   179b4:	andeq	r7, r1, r4, lsl #20
   179b8:	andeq	r7, r1, r4, lsl #20
   179bc:	andeq	r7, r1, r4, lsl #20
   179c0:	andeq	r7, r1, r4, lsl #20
   179c4:	andeq	r7, r1, r4, lsl #20
   179c8:	andeq	r7, r1, r4, lsl #20
   179cc:	andeq	r7, r1, r4, lsl #20
   179d0:	andeq	r7, r1, r4, lsl #20
   179d4:	andeq	r7, r1, r4, lsl #20
   179d8:	andeq	r7, r1, r4, lsl #20
   179dc:	andeq	r7, r1, r4, lsl #20
   179e0:	andeq	r7, r1, r4, lsl #20
   179e4:	strdeq	r7, [r1], -ip
   179e8:	strdeq	r7, [r1], -ip
   179ec:	strdeq	r7, [r1], -ip
   179f0:	strdeq	r7, [r1], -ip
   179f4:	strdeq	r7, [r1], -ip
   179f8:	strdeq	r7, [r1], -ip
   179fc:	mov	r3, #1
   17a00:	b	17a08 <__assert_fail@plt+0x6b60>
   17a04:	mov	r3, #0
   17a08:	mov	r0, r3
   17a0c:	add	sp, fp, #0
   17a10:	pop	{fp}		; (ldr fp, [sp], #4)
   17a14:	bx	lr
   17a18:	push	{fp}		; (str fp, [sp, #-4]!)
   17a1c:	add	fp, sp, #0
   17a20:	sub	sp, sp, #12
   17a24:	str	r0, [fp, #-8]
   17a28:	ldr	r3, [fp, #-8]
   17a2c:	sub	r3, r3, #65	; 0x41
   17a30:	cmp	r3, #25
   17a34:	bhi	17a44 <__assert_fail@plt+0x6b9c>
   17a38:	ldr	r3, [fp, #-8]
   17a3c:	add	r3, r3, #32
   17a40:	b	17a48 <__assert_fail@plt+0x6ba0>
   17a44:	ldr	r3, [fp, #-8]
   17a48:	mov	r0, r3
   17a4c:	add	sp, fp, #0
   17a50:	pop	{fp}		; (ldr fp, [sp], #4)
   17a54:	bx	lr
   17a58:	push	{fp}		; (str fp, [sp, #-4]!)
   17a5c:	add	fp, sp, #0
   17a60:	sub	sp, sp, #12
   17a64:	str	r0, [fp, #-8]
   17a68:	ldr	r3, [fp, #-8]
   17a6c:	sub	r3, r3, #97	; 0x61
   17a70:	cmp	r3, #25
   17a74:	bhi	17a84 <__assert_fail@plt+0x6bdc>
   17a78:	ldr	r3, [fp, #-8]
   17a7c:	sub	r3, r3, #32
   17a80:	b	17a88 <__assert_fail@plt+0x6be0>
   17a84:	ldr	r3, [fp, #-8]
   17a88:	mov	r0, r3
   17a8c:	add	sp, fp, #0
   17a90:	pop	{fp}		; (ldr fp, [sp], #4)
   17a94:	bx	lr
   17a98:	str	fp, [sp, #-8]!
   17a9c:	str	lr, [sp, #4]
   17aa0:	add	fp, sp, #4
   17aa4:	sub	sp, sp, #272	; 0x110
   17aa8:	str	r0, [fp, #-272]	; 0xfffffef0
   17aac:	sub	r3, fp, #264	; 0x108
   17ab0:	movw	r2, #257	; 0x101
   17ab4:	mov	r1, r3
   17ab8:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17abc:	bl	17c5c <__assert_fail@plt+0x6db4>
   17ac0:	mov	r3, r0
   17ac4:	cmp	r3, #0
   17ac8:	beq	17ad4 <__assert_fail@plt+0x6c2c>
   17acc:	mov	r3, #0
   17ad0:	b	17b28 <__assert_fail@plt+0x6c80>
   17ad4:	sub	r3, fp, #264	; 0x108
   17ad8:	movw	r1, #36316	; 0x8ddc
   17adc:	movt	r1, #1
   17ae0:	mov	r0, r3
   17ae4:	bl	10c68 <strcmp@plt>
   17ae8:	mov	r3, r0
   17aec:	cmp	r3, #0
   17af0:	beq	17b1c <__assert_fail@plt+0x6c74>
   17af4:	sub	r3, fp, #264	; 0x108
   17af8:	movw	r1, #36320	; 0x8de0
   17afc:	movt	r1, #1
   17b00:	mov	r0, r3
   17b04:	bl	10c68 <strcmp@plt>
   17b08:	mov	r3, r0
   17b0c:	cmp	r3, #0
   17b10:	beq	17b1c <__assert_fail@plt+0x6c74>
   17b14:	mov	r3, #1
   17b18:	b	17b20 <__assert_fail@plt+0x6c78>
   17b1c:	mov	r3, #0
   17b20:	and	r3, r3, #1
   17b24:	uxtb	r3, r3
   17b28:	mov	r0, r3
   17b2c:	sub	sp, fp, #4
   17b30:	ldr	fp, [sp]
   17b34:	add	sp, sp, #4
   17b38:	pop	{pc}		; (ldr pc, [sp], #4)
   17b3c:	str	fp, [sp, #-8]!
   17b40:	str	lr, [sp, #4]
   17b44:	add	fp, sp, #4
   17b48:	sub	sp, sp, #16
   17b4c:	str	r0, [fp, #-16]
   17b50:	mov	r1, #0
   17b54:	ldr	r0, [fp, #-16]
   17b58:	bl	10e48 <setlocale@plt>
   17b5c:	str	r0, [fp, #-8]
   17b60:	ldr	r3, [fp, #-8]
   17b64:	mov	r0, r3
   17b68:	sub	sp, fp, #4
   17b6c:	ldr	fp, [sp]
   17b70:	add	sp, sp, #4
   17b74:	pop	{pc}		; (ldr pc, [sp], #4)
   17b78:	str	fp, [sp, #-8]!
   17b7c:	str	lr, [sp, #4]
   17b80:	add	fp, sp, #4
   17b84:	sub	sp, sp, #24
   17b88:	str	r0, [fp, #-16]
   17b8c:	str	r1, [fp, #-20]	; 0xffffffec
   17b90:	str	r2, [fp, #-24]	; 0xffffffe8
   17b94:	ldr	r0, [fp, #-16]
   17b98:	bl	17b3c <__assert_fail@plt+0x6c94>
   17b9c:	str	r0, [fp, #-8]
   17ba0:	ldr	r3, [fp, #-8]
   17ba4:	cmp	r3, #0
   17ba8:	bne	17bcc <__assert_fail@plt+0x6d24>
   17bac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bb0:	cmp	r3, #0
   17bb4:	beq	17bc4 <__assert_fail@plt+0x6d1c>
   17bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17bbc:	mov	r2, #0
   17bc0:	strb	r2, [r3]
   17bc4:	mov	r3, #22
   17bc8:	b	17c48 <__assert_fail@plt+0x6da0>
   17bcc:	ldr	r0, [fp, #-8]
   17bd0:	bl	10dd0 <strlen@plt>
   17bd4:	str	r0, [fp, #-12]
   17bd8:	ldr	r2, [fp, #-12]
   17bdc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17be0:	cmp	r2, r3
   17be4:	bcs	17c08 <__assert_fail@plt+0x6d60>
   17be8:	ldr	r3, [fp, #-12]
   17bec:	add	r3, r3, #1
   17bf0:	mov	r2, r3
   17bf4:	ldr	r1, [fp, #-8]
   17bf8:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bfc:	bl	10ca4 <memcpy@plt>
   17c00:	mov	r3, #0
   17c04:	b	17c48 <__assert_fail@plt+0x6da0>
   17c08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c0c:	cmp	r3, #0
   17c10:	beq	17c44 <__assert_fail@plt+0x6d9c>
   17c14:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c18:	sub	r3, r3, #1
   17c1c:	mov	r2, r3
   17c20:	ldr	r1, [fp, #-8]
   17c24:	ldr	r0, [fp, #-20]	; 0xffffffec
   17c28:	bl	10ca4 <memcpy@plt>
   17c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17c30:	sub	r3, r3, #1
   17c34:	ldr	r2, [fp, #-20]	; 0xffffffec
   17c38:	add	r3, r2, r3
   17c3c:	mov	r2, #0
   17c40:	strb	r2, [r3]
   17c44:	mov	r3, #34	; 0x22
   17c48:	mov	r0, r3
   17c4c:	sub	sp, fp, #4
   17c50:	ldr	fp, [sp]
   17c54:	add	sp, sp, #4
   17c58:	pop	{pc}		; (ldr pc, [sp], #4)
   17c5c:	str	fp, [sp, #-8]!
   17c60:	str	lr, [sp, #4]
   17c64:	add	fp, sp, #4
   17c68:	sub	sp, sp, #16
   17c6c:	str	r0, [fp, #-8]
   17c70:	str	r1, [fp, #-12]
   17c74:	str	r2, [fp, #-16]
   17c78:	ldr	r2, [fp, #-16]
   17c7c:	ldr	r1, [fp, #-12]
   17c80:	ldr	r0, [fp, #-8]
   17c84:	bl	17b78 <__assert_fail@plt+0x6cd0>
   17c88:	mov	r3, r0
   17c8c:	mov	r0, r3
   17c90:	sub	sp, fp, #4
   17c94:	ldr	fp, [sp]
   17c98:	add	sp, sp, #4
   17c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   17ca0:	str	fp, [sp, #-8]!
   17ca4:	str	lr, [sp, #4]
   17ca8:	add	fp, sp, #4
   17cac:	sub	sp, sp, #8
   17cb0:	str	r0, [fp, #-8]
   17cb4:	ldr	r0, [fp, #-8]
   17cb8:	bl	17b3c <__assert_fail@plt+0x6c94>
   17cbc:	mov	r3, r0
   17cc0:	mov	r0, r3
   17cc4:	sub	sp, fp, #4
   17cc8:	ldr	fp, [sp]
   17ccc:	add	sp, sp, #4
   17cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd4:	cmp	r3, #0
   17cd8:	cmpeq	r2, #0
   17cdc:	bne	17d00 <__assert_fail@plt+0x6e58>
   17ce0:	cmp	r1, #0
   17ce4:	movlt	r1, #-2147483648	; 0x80000000
   17ce8:	movlt	r0, #0
   17cec:	blt	17cfc <__assert_fail@plt+0x6e54>
   17cf0:	cmpeq	r0, #0
   17cf4:	mvnne	r1, #-2147483648	; 0x80000000
   17cf8:	mvnne	r0, #0
   17cfc:	b	17da8 <__assert_fail@plt+0x6f00>
   17d00:	sub	sp, sp, #8
   17d04:	push	{sp, lr}
   17d08:	cmp	r1, #0
   17d0c:	blt	17d2c <__assert_fail@plt+0x6e84>
   17d10:	cmp	r3, #0
   17d14:	blt	17d60 <__assert_fail@plt+0x6eb8>
   17d18:	bl	17db8 <__assert_fail@plt+0x6f10>
   17d1c:	ldr	lr, [sp, #4]
   17d20:	add	sp, sp, #8
   17d24:	pop	{r2, r3}
   17d28:	bx	lr
   17d2c:	rsbs	r0, r0, #0
   17d30:	sbc	r1, r1, r1, lsl #1
   17d34:	cmp	r3, #0
   17d38:	blt	17d84 <__assert_fail@plt+0x6edc>
   17d3c:	bl	17db8 <__assert_fail@plt+0x6f10>
   17d40:	ldr	lr, [sp, #4]
   17d44:	add	sp, sp, #8
   17d48:	pop	{r2, r3}
   17d4c:	rsbs	r0, r0, #0
   17d50:	sbc	r1, r1, r1, lsl #1
   17d54:	rsbs	r2, r2, #0
   17d58:	sbc	r3, r3, r3, lsl #1
   17d5c:	bx	lr
   17d60:	rsbs	r2, r2, #0
   17d64:	sbc	r3, r3, r3, lsl #1
   17d68:	bl	17db8 <__assert_fail@plt+0x6f10>
   17d6c:	ldr	lr, [sp, #4]
   17d70:	add	sp, sp, #8
   17d74:	pop	{r2, r3}
   17d78:	rsbs	r0, r0, #0
   17d7c:	sbc	r1, r1, r1, lsl #1
   17d80:	bx	lr
   17d84:	rsbs	r2, r2, #0
   17d88:	sbc	r3, r3, r3, lsl #1
   17d8c:	bl	17db8 <__assert_fail@plt+0x6f10>
   17d90:	ldr	lr, [sp, #4]
   17d94:	add	sp, sp, #8
   17d98:	pop	{r2, r3}
   17d9c:	rsbs	r2, r2, #0
   17da0:	sbc	r3, r3, r3, lsl #1
   17da4:	bx	lr
   17da8:	push	{r1, lr}
   17dac:	mov	r0, #8
   17db0:	bl	10c5c <raise@plt>
   17db4:	pop	{r1, pc}
   17db8:	cmp	r1, r3
   17dbc:	cmpeq	r0, r2
   17dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dc4:	mov	r4, r0
   17dc8:	movcc	r0, #0
   17dcc:	mov	r5, r1
   17dd0:	ldr	lr, [sp, #36]	; 0x24
   17dd4:	movcc	r1, r0
   17dd8:	bcc	17ed4 <__assert_fail@plt+0x702c>
   17ddc:	cmp	r3, #0
   17de0:	clzeq	ip, r2
   17de4:	clzne	ip, r3
   17de8:	addeq	ip, ip, #32
   17dec:	cmp	r5, #0
   17df0:	clzeq	r1, r4
   17df4:	addeq	r1, r1, #32
   17df8:	clzne	r1, r5
   17dfc:	sub	ip, ip, r1
   17e00:	sub	sl, ip, #32
   17e04:	lsl	r9, r3, ip
   17e08:	rsb	fp, ip, #32
   17e0c:	orr	r9, r9, r2, lsl sl
   17e10:	orr	r9, r9, r2, lsr fp
   17e14:	lsl	r8, r2, ip
   17e18:	cmp	r5, r9
   17e1c:	cmpeq	r4, r8
   17e20:	movcc	r0, #0
   17e24:	movcc	r1, r0
   17e28:	bcc	17e44 <__assert_fail@plt+0x6f9c>
   17e2c:	mov	r0, #1
   17e30:	subs	r4, r4, r8
   17e34:	lsl	r1, r0, sl
   17e38:	orr	r1, r1, r0, lsr fp
   17e3c:	lsl	r0, r0, ip
   17e40:	sbc	r5, r5, r9
   17e44:	cmp	ip, #0
   17e48:	beq	17ed4 <__assert_fail@plt+0x702c>
   17e4c:	lsr	r6, r8, #1
   17e50:	orr	r6, r6, r9, lsl #31
   17e54:	lsr	r7, r9, #1
   17e58:	mov	r2, ip
   17e5c:	b	17e80 <__assert_fail@plt+0x6fd8>
   17e60:	subs	r3, r4, r6
   17e64:	sbc	r8, r5, r7
   17e68:	adds	r3, r3, r3
   17e6c:	adc	r8, r8, r8
   17e70:	adds	r4, r3, #1
   17e74:	adc	r5, r8, #0
   17e78:	subs	r2, r2, #1
   17e7c:	beq	17e9c <__assert_fail@plt+0x6ff4>
   17e80:	cmp	r5, r7
   17e84:	cmpeq	r4, r6
   17e88:	bcs	17e60 <__assert_fail@plt+0x6fb8>
   17e8c:	adds	r4, r4, r4
   17e90:	adc	r5, r5, r5
   17e94:	subs	r2, r2, #1
   17e98:	bne	17e80 <__assert_fail@plt+0x6fd8>
   17e9c:	lsr	r3, r4, ip
   17ea0:	orr	r3, r3, r5, lsl fp
   17ea4:	lsr	r2, r5, ip
   17ea8:	orr	r3, r3, r5, lsr sl
   17eac:	adds	r0, r0, r4
   17eb0:	mov	r4, r3
   17eb4:	lsl	r3, r2, ip
   17eb8:	orr	r3, r3, r4, lsl sl
   17ebc:	lsl	ip, r4, ip
   17ec0:	orr	r3, r3, r4, lsr fp
   17ec4:	adc	r1, r1, r5
   17ec8:	subs	r0, r0, ip
   17ecc:	mov	r5, r2
   17ed0:	sbc	r1, r1, r3
   17ed4:	cmp	lr, #0
   17ed8:	strdne	r4, [lr]
   17edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ee0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ee4:	mov	r7, r0
   17ee8:	ldr	r6, [pc, #72]	; 17f38 <__assert_fail@plt+0x7090>
   17eec:	ldr	r5, [pc, #72]	; 17f3c <__assert_fail@plt+0x7094>
   17ef0:	add	r6, pc, r6
   17ef4:	add	r5, pc, r5
   17ef8:	sub	r6, r6, r5
   17efc:	mov	r8, r1
   17f00:	mov	r9, r2
   17f04:	bl	10c24 <calloc@plt-0x20>
   17f08:	asrs	r6, r6, #2
   17f0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f10:	mov	r4, #0
   17f14:	add	r4, r4, #1
   17f18:	ldr	r3, [r5], #4
   17f1c:	mov	r2, r9
   17f20:	mov	r1, r8
   17f24:	mov	r0, r7
   17f28:	blx	r3
   17f2c:	cmp	r6, r4
   17f30:	bne	17f14 <__assert_fail@plt+0x706c>
   17f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f38:	andeq	r1, r1, ip, lsl r0
   17f3c:	andeq	r1, r1, r4, lsl r0
   17f40:	bx	lr
   17f44:	ldr	r3, [pc, #12]	; 17f58 <__assert_fail@plt+0x70b0>
   17f48:	mov	r1, #0
   17f4c:	add	r3, pc, r3
   17f50:	ldr	r2, [r3]
   17f54:	b	10e00 <__cxa_atexit@plt>
   17f58:	muleq	r1, r0, r1
   17f5c:	mov	r2, r1
   17f60:	mov	r1, r0
   17f64:	mov	r0, #3
   17f68:	b	10e78 <__xstat64@plt>
   17f6c:	mov	r2, r1
   17f70:	mov	r1, r0
   17f74:	mov	r0, #3
   17f78:	b	10d04 <__fxstat64@plt>

Disassembly of section .fini:

00017f7c <.fini>:
   17f7c:	push	{r3, lr}
   17f80:	pop	{r3, pc}
