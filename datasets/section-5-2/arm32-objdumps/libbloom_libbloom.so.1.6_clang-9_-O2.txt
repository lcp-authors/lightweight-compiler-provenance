
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

0000055c <.init>:
 55c:	push	{r3, lr}
 560:	bl	5e0 <memset@plt+0x10>
 564:	pop	{r3, pc}

Disassembly of section .plt:

00000568 <calloc@plt-0x14>:
 568:	push	{lr}		; (str lr, [sp, #-4]!)
 56c:	ldr	lr, [pc, #4]	; 578 <calloc@plt-0x4>
 570:	add	lr, pc, lr
 574:	ldr	pc, [lr, #8]!
 578:	andeq	r0, r1, r8, lsl #21

0000057c <calloc@plt>:
 57c:	add	ip, pc, #0, 12
 580:	add	ip, ip, #16, 20	; 0x10000
 584:	ldr	pc, [ip, #2696]!	; 0xa88

00000588 <log@plt>:
 588:	add	ip, pc, #0, 12
 58c:	add	ip, ip, #16, 20	; 0x10000
 590:	ldr	pc, [ip, #2688]!	; 0xa80

00000594 <__cxa_finalize@plt>:
 594:	add	ip, pc, #0, 12
 598:	add	ip, ip, #16, 20	; 0x10000
 59c:	ldr	pc, [ip, #2680]!	; 0xa78

000005a0 <printf@plt>:
 5a0:	add	ip, pc, #0, 12
 5a4:	add	ip, ip, #16, 20	; 0x10000
 5a8:	ldr	pc, [ip, #2672]!	; 0xa70

000005ac <murmurhash2@plt>:
 5ac:	add	ip, pc, #0, 12
 5b0:	add	ip, ip, #16, 20	; 0x10000
 5b4:	ldr	pc, [ip, #2664]!	; 0xa68

000005b8 <free@plt>:
 5b8:	add	ip, pc, #0, 12
 5bc:	add	ip, ip, #16, 20	; 0x10000
 5c0:	ldr	pc, [ip, #2656]!	; 0xa60

000005c4 <__gmon_start__@plt>:
 5c4:	add	ip, pc, #0, 12
 5c8:	add	ip, ip, #16, 20	; 0x10000
 5cc:	ldr	pc, [ip, #2648]!	; 0xa58

000005d0 <memset@plt>:
 5d0:	add	ip, pc, #0, 12
 5d4:	add	ip, ip, #16, 20	; 0x10000
 5d8:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000005e0 <bloom_init_size@@Base-0x128>:
 5e0:	ldr	r3, [pc, #20]	; 5fc <memset@plt+0x2c>
 5e4:	ldr	r2, [pc, #20]	; 600 <memset@plt+0x30>
 5e8:	add	r3, pc, r3
 5ec:	ldr	r2, [r3, r2]
 5f0:	cmp	r2, #0
 5f4:	bxeq	lr
 5f8:	b	5c4 <__gmon_start__@plt>
 5fc:	andeq	r0, r1, r0, lsl sl
 600:	andeq	r0, r0, r4, lsr r0
 604:	ldr	r0, [pc, #44]	; 638 <memset@plt+0x68>
 608:	ldr	r3, [pc, #44]	; 63c <memset@plt+0x6c>
 60c:	add	r0, pc, r0
 610:	add	r3, pc, r3
 614:	cmp	r3, r0
 618:	ldr	r3, [pc, #32]	; 640 <memset@plt+0x70>
 61c:	add	r3, pc, r3
 620:	bxeq	lr
 624:	ldr	r2, [pc, #24]	; 644 <memset@plt+0x74>
 628:	ldr	r3, [r3, r2]
 62c:	cmp	r3, #0
 630:	bxeq	lr
 634:	bx	r3
 638:	andeq	r0, r1, ip, lsr #20
 63c:	andeq	r0, r1, r8, lsr #20
 640:	ldrdeq	r0, [r1], -ip
 644:	andeq	r0, r0, r0, lsr r0
 648:	ldr	r0, [pc, #56]	; 688 <memset@plt+0xb8>
 64c:	ldr	r3, [pc, #56]	; 68c <memset@plt+0xbc>
 650:	add	r0, pc, r0
 654:	add	r3, pc, r3
 658:	sub	r1, r3, r0
 65c:	ldr	r3, [pc, #44]	; 690 <memset@plt+0xc0>
 660:	asr	r1, r1, #2
 664:	add	r3, pc, r3
 668:	add	r1, r1, r1, lsr #31
 66c:	asrs	r1, r1, #1
 670:	bxeq	lr
 674:	ldr	r2, [pc, #24]	; 694 <memset@plt+0xc4>
 678:	ldr	r3, [r3, r2]
 67c:	cmp	r3, #0
 680:	bxeq	lr
 684:	bx	r3
 688:	andeq	r0, r1, r8, ror #19
 68c:	andeq	r0, r1, r4, ror #19
 690:	muleq	r1, r4, r9
 694:	andeq	r0, r0, r8, lsr r0
 698:	ldr	r3, [pc, #76]	; 6ec <memset@plt+0x11c>
 69c:	ldr	r2, [pc, #76]	; 6f0 <memset@plt+0x120>
 6a0:	add	r3, pc, r3
 6a4:	add	r2, pc, r2
 6a8:	ldrb	r3, [r3]
 6ac:	cmp	r3, #0
 6b0:	bxne	lr
 6b4:	ldr	r3, [pc, #56]	; 6f4 <memset@plt+0x124>
 6b8:	push	{r4, lr}
 6bc:	ldr	r3, [r2, r3]
 6c0:	cmp	r3, #0
 6c4:	beq	6d4 <memset@plt+0x104>
 6c8:	ldr	r3, [pc, #40]	; 6f8 <memset@plt+0x128>
 6cc:	ldr	r0, [pc, r3]
 6d0:	bl	594 <__cxa_finalize@plt>
 6d4:	bl	604 <memset@plt+0x34>
 6d8:	ldr	r3, [pc, #28]	; 6fc <memset@plt+0x12c>
 6dc:	mov	r2, #1
 6e0:	add	r3, pc, r3
 6e4:	strb	r2, [r3]
 6e8:	pop	{r4, pc}
 6ec:	muleq	r1, r8, r9
 6f0:	andeq	r0, r1, r4, asr r9
 6f4:	andeq	r0, r0, ip, lsr #32
 6f8:	andeq	r0, r1, r8, ror #18
 6fc:	andeq	r0, r1, r8, asr r9
 700:	b	648 <memset@plt+0x78>
 704:	andeq	r0, r0, r0

00000708 <bloom_init_size@@Base>:
 708:	push	{r4, r5, r6, sl, fp, lr}
 70c:	add	fp, sp, #16
 710:	mov	r4, r0
 714:	mov	r0, #0
 718:	mov	r5, #1
 71c:	cmp	r1, #1000	; 0x3e8
 720:	str	r0, [r4, #44]	; 0x2c
 724:	blt	7b8 <bloom_init_size@@Base+0xb0>
 728:	vcmp.f64	d0, #0.0
 72c:	vmrs	APSR_nzcv, fpscr
 730:	beq	7b8 <bloom_init_size@@Base+0xb0>
 734:	vstr	d0, [r4, #8]
 738:	mov	r6, r1
 73c:	str	r1, [r4]
 740:	bl	588 <log@plt>
 744:	vldr	d16, [pc, #116]	; 7c0 <bloom_init_size@@Base+0xb8>
 748:	vmov	s2, r6
 74c:	vldr	d17, [pc, #116]	; 7c8 <bloom_init_size@@Base+0xc0>
 750:	mov	r5, #1
 754:	vdiv.f64	d16, d0, d16
 758:	vcvt.f64.s32	d18, s2
 75c:	vmul.f64	d17, d16, d17
 760:	vmul.f64	d18, d16, d18
 764:	vrintp.f64	d17, d17
 768:	vcvt.s32.f64	s0, d18
 76c:	vcvt.s32.f64	s2, d17
 770:	vcvt.s32.f64	s4, d18
 774:	vstr	d16, [r4, #32]
 778:	vstr	s0, [r4, #16]
 77c:	vmov	r1, s4
 780:	vstr	s2, [r4, #24]
 784:	asr	r0, r1, #31
 788:	tst	r1, #7
 78c:	add	r2, r1, r0, lsr #29
 790:	mov	r1, #1
 794:	asr	r0, r2, #3
 798:	addne	r0, r5, r2, asr #3
 79c:	str	r0, [r4, #20]
 7a0:	bl	57c <calloc@plt>
 7a4:	cmp	r0, #0
 7a8:	str	r0, [r4, #40]	; 0x28
 7ac:	movne	r0, #1
 7b0:	movne	r5, #0
 7b4:	strne	r0, [r4, #44]	; 0x2c
 7b8:	mov	r0, r5
 7bc:	pop	{r4, r5, r6, sl, fp, pc}
 7c0:			; <UNDEFINED> instruction: 0xff82c587
 7c4:	svclt	0x00debfbd
 7c8:			; <UNDEFINED> instruction: 0xfefa39ec
 7cc:	svccc	0x00e62e42

000007d0 <bloom_init@@Base>:
 7d0:	push	{r4, r5, r6, sl, fp, lr}
 7d4:	add	fp, sp, #16
 7d8:	mov	r4, r0
 7dc:	mov	r0, #0
 7e0:	mov	r5, #1
 7e4:	cmp	r1, #1000	; 0x3e8
 7e8:	str	r0, [r4, #44]	; 0x2c
 7ec:	blt	880 <bloom_init@@Base+0xb0>
 7f0:	vcmp.f64	d0, #0.0
 7f4:	vmrs	APSR_nzcv, fpscr
 7f8:	beq	880 <bloom_init@@Base+0xb0>
 7fc:	vstr	d0, [r4, #8]
 800:	mov	r6, r1
 804:	str	r1, [r4]
 808:	bl	588 <log@plt>
 80c:	vldr	d16, [pc, #116]	; 888 <bloom_init@@Base+0xb8>
 810:	vmov	s2, r6
 814:	vldr	d17, [pc, #116]	; 890 <bloom_init@@Base+0xc0>
 818:	mov	r5, #1
 81c:	vdiv.f64	d16, d0, d16
 820:	vcvt.f64.s32	d18, s2
 824:	vmul.f64	d17, d16, d17
 828:	vmul.f64	d18, d16, d18
 82c:	vrintp.f64	d17, d17
 830:	vcvt.s32.f64	s0, d18
 834:	vcvt.s32.f64	s2, d17
 838:	vcvt.s32.f64	s4, d18
 83c:	vstr	d16, [r4, #32]
 840:	vstr	s0, [r4, #16]
 844:	vmov	r1, s4
 848:	vstr	s2, [r4, #24]
 84c:	asr	r0, r1, #31
 850:	tst	r1, #7
 854:	add	r2, r1, r0, lsr #29
 858:	mov	r1, #1
 85c:	asr	r0, r2, #3
 860:	addne	r0, r5, r2, asr #3
 864:	str	r0, [r4, #20]
 868:	bl	57c <calloc@plt>
 86c:	cmp	r0, #0
 870:	str	r0, [r4, #40]	; 0x28
 874:	movne	r0, #1
 878:	movne	r5, #0
 87c:	strne	r0, [r4, #44]	; 0x2c
 880:	mov	r0, r5
 884:	pop	{r4, r5, r6, sl, fp, pc}
 888:			; <UNDEFINED> instruction: 0xff82c587
 88c:	svclt	0x00debfbd
 890:			; <UNDEFINED> instruction: 0xfefa39ec
 894:	svccc	0x00e62e42

00000898 <bloom_check@@Base>:
 898:	push	{r4, r5, r6, r7, fp, lr}
 89c:	add	fp, sp, #16
 8a0:	mov	r5, r0
 8a4:	ldr	r0, [r0, #44]	; 0x2c
 8a8:	cmp	r0, #0
 8ac:	beq	924 <bloom_check@@Base+0x8c>
 8b0:	mov	r6, r2
 8b4:	movw	r2, #45708	; 0xb28c
 8b8:	mov	r7, r1
 8bc:	mov	r0, r1
 8c0:	movt	r2, #38727	; 0x9747
 8c4:	mov	r1, r6
 8c8:	bl	5ac <murmurhash2@plt>
 8cc:	mov	r4, r0
 8d0:	mov	r0, r7
 8d4:	mov	r1, r6
 8d8:	mov	r2, r4
 8dc:	bl	5ac <murmurhash2@plt>
 8e0:	ldr	r1, [r5, #24]
 8e4:	cmp	r1, #0
 8e8:	beq	91c <bloom_check@@Base+0x84>
 8ec:	ldr	r2, [r5, #16]
 8f0:	ldr	r3, [r5, #40]	; 0x28
 8f4:	mov	r7, #1
 8f8:	udiv	r6, r4, r2
 8fc:	mls	r6, r6, r2, r4
 900:	ldrb	r5, [r3, r6, lsr #3]
 904:	and	r6, r6, #7
 908:	tst	r5, r7, lsl r6
 90c:	beq	93c <bloom_check@@Base+0xa4>
 910:	add	r4, r4, r0
 914:	subs	r1, r1, #1
 918:	bne	8f8 <bloom_check@@Base+0x60>
 91c:	mov	r0, #1
 920:	pop	{r4, r5, r6, r7, fp, pc}
 924:	ldr	r0, [pc, #24]	; 944 <bloom_check@@Base+0xac>
 928:	mov	r1, r5
 92c:	add	r0, pc, r0
 930:	bl	5a0 <printf@plt>
 934:	mvn	r0, #0
 938:	pop	{r4, r5, r6, r7, fp, pc}
 93c:	mov	r0, #0
 940:	pop	{r4, r5, r6, r7, fp, pc}
 944:	andeq	r0, r0, r5, lsr r3

00000948 <bloom_add@@Base>:
 948:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
 94c:	add	fp, sp, #24
 950:	mov	r4, r0
 954:	ldr	r0, [r0, #44]	; 0x2c
 958:	cmp	r0, #0
 95c:	beq	9f8 <bloom_add@@Base+0xb0>
 960:	mov	r6, r2
 964:	movw	r2, #45708	; 0xb28c
 968:	mov	r7, r1
 96c:	mov	r0, r1
 970:	movt	r2, #38727	; 0x9747
 974:	mov	r1, r6
 978:	bl	5ac <murmurhash2@plt>
 97c:	mov	r5, r0
 980:	mov	r0, r7
 984:	mov	r1, r6
 988:	mov	r2, r5
 98c:	bl	5ac <murmurhash2@plt>
 990:	ldr	r8, [r4, #24]
 994:	cmp	r8, #0
 998:	beq	a10 <bloom_add@@Base+0xc8>
 99c:	mov	r3, #0
 9a0:	mov	ip, #1
 9a4:	mov	lr, #0
 9a8:	b	9c0 <bloom_add@@Base+0x78>
 9ac:	add	lr, lr, #1
 9b0:	add	r3, r3, #1
 9b4:	add	r5, r5, r0
 9b8:	cmp	r3, r8
 9bc:	bcs	a18 <bloom_add@@Base+0xd0>
 9c0:	ldr	r1, [r4, #16]
 9c4:	ldr	r6, [r4, #40]	; 0x28
 9c8:	udiv	r2, r5, r1
 9cc:	mls	r7, r2, r1, r5
 9d0:	ldrb	r2, [r6, r7, lsr #3]
 9d4:	and	r1, r7, #7
 9d8:	tst	r2, ip, lsl r1
 9dc:	bne	9ac <bloom_add@@Base+0x64>
 9e0:	lsl	r1, ip, r1
 9e4:	lsr	r7, r7, #3
 9e8:	orr	r1, r2, r1
 9ec:	strb	r1, [r6, r7]
 9f0:	ldr	r8, [r4, #24]
 9f4:	b	9b0 <bloom_add@@Base+0x68>
 9f8:	ldr	r0, [pc, #40]	; a28 <bloom_add@@Base+0xe0>
 9fc:	mov	r1, r4
 a00:	add	r0, pc, r0
 a04:	bl	5a0 <printf@plt>
 a08:	mvn	r0, #0
 a0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 a10:	mov	lr, #0
 a14:	mov	r8, #0
 a18:	sub	r0, lr, r8
 a1c:	clz	r0, r0
 a20:	lsr	r0, r0, #5
 a24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
 a28:	andeq	r0, r0, r1, ror #4

00000a2c <bloom_print@@Base>:
 a2c:	push	{r4, sl, fp, lr}
 a30:	add	fp, sp, #8
 a34:	mov	r4, r0
 a38:	ldr	r0, [pc, #116]	; ab4 <bloom_print@@Base+0x88>
 a3c:	mov	r1, r4
 a40:	add	r0, pc, r0
 a44:	bl	5a0 <printf@plt>
 a48:	ldr	r1, [r4]
 a4c:	ldr	r0, [pc, #100]	; ab8 <bloom_print@@Base+0x8c>
 a50:	add	r0, pc, r0
 a54:	bl	5a0 <printf@plt>
 a58:	vldr	d16, [r4, #8]
 a5c:	ldr	r0, [pc, #88]	; abc <bloom_print@@Base+0x90>
 a60:	add	r0, pc, r0
 a64:	vmov	r2, r3, d16
 a68:	bl	5a0 <printf@plt>
 a6c:	ldr	r1, [r4, #16]
 a70:	ldr	r0, [pc, #72]	; ac0 <bloom_print@@Base+0x94>
 a74:	add	r0, pc, r0
 a78:	bl	5a0 <printf@plt>
 a7c:	vldr	d16, [r4, #32]
 a80:	ldr	r0, [pc, #60]	; ac4 <bloom_print@@Base+0x98>
 a84:	add	r0, pc, r0
 a88:	vmov	r2, r3, d16
 a8c:	bl	5a0 <printf@plt>
 a90:	ldr	r1, [r4, #20]
 a94:	ldr	r0, [pc, #44]	; ac8 <bloom_print@@Base+0x9c>
 a98:	add	r0, pc, r0
 a9c:	bl	5a0 <printf@plt>
 aa0:	ldr	r1, [r4, #24]
 aa4:	ldr	r0, [pc, #32]	; acc <bloom_print@@Base+0xa0>
 aa8:	add	r0, pc, r0
 aac:	pop	{r4, sl, fp, lr}
 ab0:	b	5a0 <printf@plt>
 ab4:	andeq	r0, r0, r4, lsr #3
 ab8:	andeq	r0, r0, r1, lsr #3
 abc:	andeq	r0, r0, r2, lsr #3
 ac0:	muleq	r0, sp, r1
 ac4:	muleq	r0, fp, r1
 ac8:	muleq	r0, lr, r1
 acc:	muleq	r0, sp, r1

00000ad0 <bloom_free@@Base>:
 ad0:	push	{r4, sl, fp, lr}
 ad4:	add	fp, sp, #8
 ad8:	mov	r4, r0
 adc:	ldr	r0, [r0, #44]	; 0x2c
 ae0:	cmp	r0, #0
 ae4:	beq	af0 <bloom_free@@Base+0x20>
 ae8:	ldr	r0, [r4, #40]	; 0x28
 aec:	bl	5b8 <free@plt>
 af0:	mov	r0, #0
 af4:	str	r0, [r4, #44]	; 0x2c
 af8:	pop	{r4, sl, fp, pc}

00000afc <bloom_reset@@Base>:
 afc:	push	{r4, sl, fp, lr}
 b00:	add	fp, sp, #8
 b04:	ldr	r1, [r0, #44]	; 0x2c
 b08:	cmp	r1, #0
 b0c:	beq	b2c <bloom_reset@@Base+0x30>
 b10:	ldr	r2, [r0, #20]
 b14:	ldr	r0, [r0, #40]	; 0x28
 b18:	mov	r1, #0
 b1c:	mov	r4, #0
 b20:	bl	5d0 <memset@plt>
 b24:	mov	r0, r4
 b28:	pop	{r4, sl, fp, pc}
 b2c:	mov	r4, #1
 b30:	mov	r0, r4
 b34:	pop	{r4, sl, fp, pc}

00000b38 <bloom_version@@Base>:
 b38:	ldr	r0, [pc, #4]	; b44 <bloom_version@@Base+0xc>
 b3c:	add	r0, pc, r0
 b40:	bx	lr
 b44:	andeq	r0, r0, r1, lsr #2

00000b48 <murmurhash2@@Base>:
 b48:	push	{r4, r5, r6, sl, fp, lr}
 b4c:	add	fp, sp, #16
 b50:	eor	r3, r2, r1
 b54:	movw	r2, #59797	; 0xe995
 b58:	cmp	r1, #4
 b5c:	movt	r2, #23505	; 0x5bd1
 b60:	blt	ba0 <murmurhash2@@Base+0x58>
 b64:	sub	ip, r1, #4
 b68:	mov	r5, r0
 b6c:	bic	lr, ip, #3
 b70:	add	r4, lr, #4
 b74:	ldr	r6, [r5], #4
 b78:	mul	r3, r3, r2
 b7c:	sub	r1, r1, #4
 b80:	cmp	r1, #3
 b84:	mul	r6, r6, r2
 b88:	eor	r6, r6, r6, lsr #24
 b8c:	mul	r6, r6, r2
 b90:	eor	r3, r6, r3
 b94:	bgt	b74 <murmurhash2@@Base+0x2c>
 b98:	sub	r1, ip, lr
 b9c:	add	r0, r0, r4
 ba0:	cmp	r1, #1
 ba4:	beq	bc8 <murmurhash2@@Base+0x80>
 ba8:	cmp	r1, #2
 bac:	beq	bc0 <murmurhash2@@Base+0x78>
 bb0:	cmp	r1, #3
 bb4:	bne	bd4 <murmurhash2@@Base+0x8c>
 bb8:	ldrb	r1, [r0, #2]
 bbc:	eor	r3, r3, r1, lsl #16
 bc0:	ldrb	r1, [r0, #1]
 bc4:	eor	r3, r3, r1, lsl #8
 bc8:	ldrb	r0, [r0]
 bcc:	eor	r0, r3, r0
 bd0:	mul	r3, r0, r2
 bd4:	eor	r0, r3, r3, lsr #13
 bd8:	mul	r0, r0, r2
 bdc:	eor	r0, r0, r0, lsr #15
 be0:	pop	{r4, r5, r6, sl, fp, pc}

Disassembly of section .fini:

00000be4 <.fini>:
 be4:	push	{r3, lr}
 be8:	pop	{r3, pc}
