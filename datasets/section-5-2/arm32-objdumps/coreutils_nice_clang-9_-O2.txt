
../repos/coreutils/src/nice:     file format elf32-littlearm


Disassembly of section .init:

00010cec <.init>:
   10cec:	push	{r3, lr}
   10cf0:	bl	10f7c <__assert_fail@plt+0x48>
   10cf4:	pop	{r3, pc}

Disassembly of section .plt:

00010cf8 <calloc@plt-0x14>:
   10cf8:	push	{lr}		; (str lr, [sp, #-4]!)
   10cfc:	ldr	lr, [pc, #4]	; 10d08 <calloc@plt-0x4>
   10d00:	add	lr, pc, lr
   10d04:	ldr	pc, [lr, #8]!
   10d08:	strdeq	r5, [r1], -r8

00010d0c <calloc@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #760]!	; 0x2f8

00010d18 <fputs_unlocked@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #752]!	; 0x2f0

00010d24 <strcmp@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d30 <strtol@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #736]!	; 0x2e0

00010d3c <fflush@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #728]!	; 0x2d8

00010d48 <free@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #720]!	; 0x2d0

00010d54 <_exit@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #712]!	; 0x2c8

00010d60 <memcpy@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #704]!	; 0x2c0

00010d6c <execvp@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #696]!	; 0x2b8

00010d78 <mbsinit@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #688]!	; 0x2b0

00010d84 <dcgettext@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #680]!	; 0x2a8

00010d90 <realloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #672]!	; 0x2a0

00010d9c <getpriority@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #664]!	; 0x298

00010da8 <textdomain@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #656]!	; 0x290

00010db4 <iswprint@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #648]!	; 0x288

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #640]!	; 0x280

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #632]!	; 0x278

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #624]!	; 0x270

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #616]!	; 0x268

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #608]!	; 0x260

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #600]!	; 0x258

00010e08 <setpriority@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #592]!	; 0x250

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #584]!	; 0x248

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #576]!	; 0x240

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #568]!	; 0x238

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #560]!	; 0x230

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #552]!	; 0x228

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #544]!	; 0x220

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #536]!	; 0x218

00010e68 <bcmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #528]!	; 0x210

00010e74 <strlen@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #520]!	; 0x208

00010e80 <strchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #512]!	; 0x200

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #504]!	; 0x1f8

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #496]!	; 0x1f0

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #488]!	; 0x1e8

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #480]!	; 0x1e0

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #472]!	; 0x1d8

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #464]!	; 0x1d0

00010ed4 <fclose@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #456]!	; 0x1c8

00010ee0 <fseeko64@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #448]!	; 0x1c0

00010eec <setlocale@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #440]!	; 0x1b8

00010ef8 <strrchr@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #432]!	; 0x1b0

00010f04 <nl_langinfo@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #424]!	; 0x1a8

00010f10 <bindtextdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #416]!	; 0x1a0

00010f1c <strncmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #408]!	; 0x198

00010f28 <abort@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #400]!	; 0x190

00010f34 <__assert_fail@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #392]!	; 0x188

Disassembly of section .text:

00010f40 <.text>:
   10f40:	mov	fp, #0
   10f44:	mov	lr, #0
   10f48:	pop	{r1}		; (ldr r1, [sp], #4)
   10f4c:	mov	r2, sp
   10f50:	push	{r2}		; (str r2, [sp, #-4]!)
   10f54:	push	{r0}		; (str r0, [sp, #-4]!)
   10f58:	ldr	ip, [pc, #16]	; 10f70 <__assert_fail@plt+0x3c>
   10f5c:	push	{ip}		; (str ip, [sp, #-4]!)
   10f60:	ldr	r0, [pc, #12]	; 10f74 <__assert_fail@plt+0x40>
   10f64:	ldr	r3, [pc, #12]	; 10f78 <__assert_fail@plt+0x44>
   10f68:	bl	10e20 <__libc_start_main@plt>
   10f6c:	bl	10f28 <abort@plt>
   10f70:	andeq	r5, r1, r8, lsr r2
   10f74:	ldrdeq	r1, [r1], -ip
   10f78:	ldrdeq	r5, [r1], -r8
   10f7c:	ldr	r3, [pc, #20]	; 10f98 <__assert_fail@plt+0x64>
   10f80:	ldr	r2, [pc, #20]	; 10f9c <__assert_fail@plt+0x68>
   10f84:	add	r3, pc, r3
   10f88:	ldr	r2, [r3, r2]
   10f8c:	cmp	r2, #0
   10f90:	bxeq	lr
   10f94:	b	10e38 <__gmon_start__@plt>
   10f98:	andeq	r5, r1, r4, ror r0
   10f9c:	andeq	r0, r0, r8, asr #1
   10fa0:	ldr	r0, [pc, #24]	; 10fc0 <__assert_fail@plt+0x8c>
   10fa4:	ldr	r3, [pc, #24]	; 10fc4 <__assert_fail@plt+0x90>
   10fa8:	cmp	r3, r0
   10fac:	bxeq	lr
   10fb0:	ldr	r3, [pc, #16]	; 10fc8 <__assert_fail@plt+0x94>
   10fb4:	cmp	r3, #0
   10fb8:	bxeq	lr
   10fbc:	bx	r3
   10fc0:	andeq	r6, r2, r0, lsr #2
   10fc4:	andeq	r6, r2, r0, lsr #2
   10fc8:	andeq	r0, r0, r0
   10fcc:	ldr	r0, [pc, #36]	; 10ff8 <__assert_fail@plt+0xc4>
   10fd0:	ldr	r1, [pc, #36]	; 10ffc <__assert_fail@plt+0xc8>
   10fd4:	sub	r1, r1, r0
   10fd8:	asr	r1, r1, #2
   10fdc:	add	r1, r1, r1, lsr #31
   10fe0:	asrs	r1, r1, #1
   10fe4:	bxeq	lr
   10fe8:	ldr	r3, [pc, #16]	; 11000 <__assert_fail@plt+0xcc>
   10fec:	cmp	r3, #0
   10ff0:	bxeq	lr
   10ff4:	bx	r3
   10ff8:	andeq	r6, r2, r0, lsr #2
   10ffc:	andeq	r6, r2, r0, lsr #2
   11000:	andeq	r0, r0, r0
   11004:	push	{r4, lr}
   11008:	ldr	r4, [pc, #24]	; 11028 <__assert_fail@plt+0xf4>
   1100c:	ldrb	r3, [r4]
   11010:	cmp	r3, #0
   11014:	popne	{r4, pc}
   11018:	bl	10fa0 <__assert_fail@plt+0x6c>
   1101c:	mov	r3, #1
   11020:	strb	r3, [r4]
   11024:	pop	{r4, pc}
   11028:	andeq	r6, r2, ip, lsr r1
   1102c:	b	10fcc <__assert_fail@plt+0x98>
   11030:	push	{fp, lr}
   11034:	mov	fp, sp
   11038:	sub	sp, sp, #56	; 0x38
   1103c:	mov	r4, r0
   11040:	cmp	r0, #0
   11044:	bne	11298 <__assert_fail@plt+0x364>
   11048:	movw	r1, #21131	; 0x528b
   1104c:	mov	r0, #0
   11050:	mov	r2, #5
   11054:	movt	r1, #1
   11058:	bl	10d84 <dcgettext@plt>
   1105c:	mov	r1, r0
   11060:	movw	r0, #24904	; 0x6148
   11064:	movt	r0, #2
   11068:	ldr	r2, [r0]
   1106c:	mov	r0, #1
   11070:	bl	10eb0 <__printf_chk@plt>
   11074:	movw	r1, #21170	; 0x52b2
   11078:	mov	r0, #0
   1107c:	mov	r2, #5
   11080:	movt	r1, #1
   11084:	bl	10d84 <dcgettext@plt>
   11088:	mov	r1, r0
   1108c:	mov	r0, #1
   11090:	mvn	r2, #19
   11094:	mov	r3, #19
   11098:	bl	10eb0 <__printf_chk@plt>
   1109c:	movw	r1, #21921	; 0x55a1
   110a0:	mov	r0, #0
   110a4:	mov	r2, #5
   110a8:	movt	r1, #1
   110ac:	bl	10d84 <dcgettext@plt>
   110b0:	movw	r7, #24884	; 0x6134
   110b4:	movt	r7, #2
   110b8:	ldr	r1, [r7]
   110bc:	bl	10d18 <fputs_unlocked@plt>
   110c0:	movw	r1, #21392	; 0x5390
   110c4:	mov	r0, #0
   110c8:	mov	r2, #5
   110cc:	movt	r1, #1
   110d0:	bl	10d84 <dcgettext@plt>
   110d4:	ldr	r1, [r7]
   110d8:	bl	10d18 <fputs_unlocked@plt>
   110dc:	movw	r1, #21459	; 0x53d3
   110e0:	mov	r0, #0
   110e4:	mov	r2, #5
   110e8:	movt	r1, #1
   110ec:	bl	10d84 <dcgettext@plt>
   110f0:	ldr	r1, [r7]
   110f4:	bl	10d18 <fputs_unlocked@plt>
   110f8:	movw	r1, #21504	; 0x5400
   110fc:	mov	r0, #0
   11100:	mov	r2, #5
   11104:	movt	r1, #1
   11108:	bl	10d84 <dcgettext@plt>
   1110c:	ldr	r1, [r7]
   11110:	bl	10d18 <fputs_unlocked@plt>
   11114:	movw	r1, #21558	; 0x5436
   11118:	mov	r0, #0
   1111c:	mov	r2, #5
   11120:	movt	r1, #1
   11124:	bl	10d84 <dcgettext@plt>
   11128:	movw	r5, #21749	; 0x54f5
   1112c:	mov	r1, r0
   11130:	mov	r0, #1
   11134:	movt	r5, #1
   11138:	mov	r2, r5
   1113c:	bl	10eb0 <__printf_chk@plt>
   11140:	movw	r0, #22384	; 0x5770
   11144:	mov	r2, #48	; 0x30
   11148:	mov	r6, sp
   1114c:	movt	r0, #1
   11150:	add	r1, r0, #32
   11154:	add	r3, r0, #16
   11158:	vld1.64	{d18-d19}, [r0], r2
   1115c:	vld1.64	{d16-d17}, [r1]
   11160:	vld1.64	{d20-d21}, [r3]
   11164:	vldr	d22, [r0]
   11168:	add	r1, r6, #32
   1116c:	add	r0, r6, #16
   11170:	vst1.64	{d16-d17}, [r1]
   11174:	movw	r1, #21996	; 0x55ec
   11178:	vst1.64	{d20-d21}, [r0]
   1117c:	mov	r0, r6
   11180:	movt	r1, #1
   11184:	vst1.64	{d18-d19}, [r0], r2
   11188:	vstr	d22, [r0]
   1118c:	mov	r0, r5
   11190:	bl	10d24 <strcmp@plt>
   11194:	cmp	r0, #0
   11198:	ldrne	r1, [r6, #8]!
   1119c:	cmpne	r1, #0
   111a0:	bne	1118c <__assert_fail@plt+0x258>
   111a4:	movw	r1, #22091	; 0x564b
   111a8:	ldr	r6, [r6, #4]
   111ac:	mov	r0, #0
   111b0:	mov	r2, #5
   111b4:	movt	r1, #1
   111b8:	bl	10d84 <dcgettext@plt>
   111bc:	movw	r2, #21782	; 0x5516
   111c0:	movw	r3, #22114	; 0x5662
   111c4:	mov	r1, r0
   111c8:	mov	r0, #1
   111cc:	movt	r2, #1
   111d0:	movt	r3, #1
   111d4:	bl	10eb0 <__printf_chk@plt>
   111d8:	cmp	r6, #0
   111dc:	mov	r0, #5
   111e0:	mov	r1, #0
   111e4:	moveq	r6, r5
   111e8:	bl	10eec <setlocale@plt>
   111ec:	cmp	r0, #0
   111f0:	beq	11228 <__assert_fail@plt+0x2f4>
   111f4:	movw	r1, #22154	; 0x568a
   111f8:	mov	r2, #3
   111fc:	movt	r1, #1
   11200:	bl	10f1c <strncmp@plt>
   11204:	cmp	r0, #0
   11208:	beq	11228 <__assert_fail@plt+0x2f4>
   1120c:	movw	r1, #22158	; 0x568e
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	movt	r1, #1
   1121c:	bl	10d84 <dcgettext@plt>
   11220:	ldr	r1, [r7]
   11224:	bl	10d18 <fputs_unlocked@plt>
   11228:	movw	r1, #22229	; 0x56d5
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	movt	r1, #1
   11238:	bl	10d84 <dcgettext@plt>
   1123c:	movw	r2, #22114	; 0x5662
   11240:	mov	r1, r0
   11244:	mov	r0, #1
   11248:	mov	r3, r5
   1124c:	movt	r2, #1
   11250:	bl	10eb0 <__printf_chk@plt>
   11254:	movw	r1, #22256	; 0x56f0
   11258:	mov	r0, #0
   1125c:	mov	r2, #5
   11260:	movt	r1, #1
   11264:	bl	10d84 <dcgettext@plt>
   11268:	mov	r1, r0
   1126c:	movw	r0, #22024	; 0x5608
   11270:	movw	r3, #22306	; 0x5722
   11274:	cmp	r6, r5
   11278:	mov	r2, r6
   1127c:	movt	r0, #1
   11280:	movt	r3, #1
   11284:	moveq	r3, r0
   11288:	mov	r0, #1
   1128c:	bl	10eb0 <__printf_chk@plt>
   11290:	mov	r0, r4
   11294:	bl	10e5c <exit@plt>
   11298:	movw	r0, #24880	; 0x6130
   1129c:	movw	r1, #21092	; 0x5264
   112a0:	mov	r2, #5
   112a4:	movt	r0, #2
   112a8:	movt	r1, #1
   112ac:	ldr	r5, [r0]
   112b0:	mov	r0, #0
   112b4:	bl	10d84 <dcgettext@plt>
   112b8:	mov	r2, r0
   112bc:	movw	r0, #24904	; 0x6148
   112c0:	mov	r1, #1
   112c4:	movt	r0, #2
   112c8:	ldr	r3, [r0]
   112cc:	mov	r0, r5
   112d0:	bl	10ec8 <__fprintf_chk@plt>
   112d4:	mov	r0, r4
   112d8:	bl	10e5c <exit@plt>
   112dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e0:	add	fp, sp, #28
   112e4:	sub	sp, sp, #12
   112e8:	mov	r9, r0
   112ec:	ldr	r0, [r1]
   112f0:	mov	r8, r1
   112f4:	bl	117fc <__assert_fail@plt+0x8c8>
   112f8:	movw	r1, #22306	; 0x5722
   112fc:	mov	r0, #6
   11300:	movt	r1, #1
   11304:	bl	10eec <setlocale@plt>
   11308:	movw	r7, #21786	; 0x551a
   1130c:	movw	r1, #21754	; 0x54fa
   11310:	movt	r7, #1
   11314:	movt	r1, #1
   11318:	mov	r0, r7
   1131c:	bl	10f10 <bindtextdomain@plt>
   11320:	mov	r0, r7
   11324:	bl	10da8 <textdomain@plt>
   11328:	movw	r0, #24796	; 0x60dc
   1132c:	mov	r1, #125	; 0x7d
   11330:	movt	r0, #2
   11334:	str	r1, [r0]
   11338:	movw	r0, #5908	; 0x1714
   1133c:	movt	r0, #1
   11340:	bl	1523c <__assert_fail@plt+0x4308>
   11344:	mov	r4, #10
   11348:	mov	r7, #1
   1134c:	cmp	r9, #2
   11350:	blt	11434 <__assert_fail@plt+0x500>
   11354:	movw	r2, #21778	; 0x5512
   11358:	movw	r3, #22320	; 0x5730
   1135c:	movw	sl, #24872	; 0x6128
   11360:	mov	ip, #0
   11364:	mov	r4, #0
   11368:	movt	r2, #1
   1136c:	movt	r3, #1
   11370:	movt	sl, #2
   11374:	ldr	r1, [r8, r7, lsl #2]
   11378:	ldrb	r0, [r1]
   1137c:	cmp	r0, #45	; 0x2d
   11380:	bne	113c0 <__assert_fail@plt+0x48c>
   11384:	mov	r0, r1
   11388:	ldrb	r5, [r0, #1]!
   1138c:	sub	r5, r5, #43	; 0x2b
   11390:	tst	r5, #253	; 0xfd
   11394:	mov	r5, #1
   11398:	movweq	r5, #2
   1139c:	ldrb	r1, [r1, r5]
   113a0:	sub	r1, r1, #48	; 0x30
   113a4:	cmp	r1, #9
   113a8:	bhi	113c0 <__assert_fail@plt+0x48c>
   113ac:	add	r7, r7, #1
   113b0:	mov	r4, r0
   113b4:	cmp	r7, r9
   113b8:	blt	11374 <__assert_fail@plt+0x440>
   113bc:	b	114a0 <__assert_fail@plt+0x56c>
   113c0:	ldr	r0, [r8]
   113c4:	sub	r7, r7, #1
   113c8:	mov	r5, r8
   113cc:	mov	r6, r9
   113d0:	str	r0, [r8, r7, lsl #2]!
   113d4:	sub	r0, r9, r7
   113d8:	str	ip, [sl]
   113dc:	str	ip, [sp]
   113e0:	mov	r9, r2
   113e4:	mov	r1, r8
   113e8:	mov	r8, r3
   113ec:	bl	10e44 <getopt_long@plt>
   113f0:	ldr	r1, [sl]
   113f4:	cmp	r0, #109	; 0x6d
   113f8:	add	r7, r7, r1
   113fc:	ble	11490 <__assert_fail@plt+0x55c>
   11400:	cmp	r0, #110	; 0x6e
   11404:	bne	11644 <__assert_fail@plt+0x710>
   11408:	movw	r0, #24888	; 0x6138
   1140c:	mov	r2, r9
   11410:	mov	r3, r8
   11414:	mov	ip, #0
   11418:	mov	r8, r5
   1141c:	mov	r9, r6
   11420:	movt	r0, #2
   11424:	ldr	r4, [r0]
   11428:	cmp	r7, r9
   1142c:	blt	11374 <__assert_fail@plt+0x440>
   11430:	b	114a0 <__assert_fail@plt+0x56c>
   11434:	mov	r0, #0
   11438:	cmp	r7, r9
   1143c:	bne	114f0 <__assert_fail@plt+0x5bc>
   11440:	cmp	r0, #0
   11444:	bne	1164c <__assert_fail@plt+0x718>
   11448:	bl	10e8c <__errno_location@plt>
   1144c:	mov	r6, #0
   11450:	mov	r4, r0
   11454:	mov	r1, #0
   11458:	str	r6, [r0]
   1145c:	mov	r0, #0
   11460:	bl	10d9c <getpriority@plt>
   11464:	mov	r2, r0
   11468:	cmn	r0, #1
   1146c:	bne	1147c <__assert_fail@plt+0x548>
   11470:	ldr	r4, [r4]
   11474:	cmp	r4, #0
   11478:	bne	116ac <__assert_fail@plt+0x778>
   1147c:	movw	r1, #21897	; 0x5589
   11480:	mov	r0, #1
   11484:	movt	r1, #1
   11488:	bl	10eb0 <__printf_chk@plt>
   1148c:	b	115c4 <__assert_fail@plt+0x690>
   11490:	cmn	r0, #1
   11494:	mov	r8, r5
   11498:	mov	r9, r6
   1149c:	bne	115e4 <__assert_fail@plt+0x6b0>
   114a0:	cmp	r4, #0
   114a4:	beq	115d0 <__assert_fail@plt+0x69c>
   114a8:	movw	r0, #22306	; 0x5722
   114ac:	add	r3, sp, #8
   114b0:	mov	r1, #0
   114b4:	mov	r2, #10
   114b8:	movt	r0, #1
   114bc:	str	r0, [sp]
   114c0:	mov	r0, r4
   114c4:	bl	141d4 <__assert_fail@plt+0x32a0>
   114c8:	cmp	r0, #2
   114cc:	bcs	11678 <__assert_fail@plt+0x744>
   114d0:	ldr	r4, [sp, #8]
   114d4:	mov	r0, #1
   114d8:	cmp	r4, #39	; 0x27
   114dc:	movge	r4, #39	; 0x27
   114e0:	cmn	r4, #39	; 0x27
   114e4:	mvnle	r4, #38	; 0x26
   114e8:	cmp	r7, r9
   114ec:	beq	11440 <__assert_fail@plt+0x50c>
   114f0:	bl	10e8c <__errno_location@plt>
   114f4:	mov	r5, r0
   114f8:	mov	r0, #0
   114fc:	mov	r1, #0
   11500:	str	r0, [r5]
   11504:	mov	r0, #0
   11508:	bl	10d9c <getpriority@plt>
   1150c:	cmn	r0, #1
   11510:	bne	11520 <__assert_fail@plt+0x5ec>
   11514:	ldr	r6, [r5]
   11518:	cmp	r6, #0
   1151c:	bne	116d0 <__assert_fail@plt+0x79c>
   11520:	add	r2, r0, r4
   11524:	mov	r0, #0
   11528:	mov	r1, #0
   1152c:	bl	10e08 <setpriority@plt>
   11530:	cmp	r0, #0
   11534:	beq	11588 <__assert_fail@plt+0x654>
   11538:	movw	r1, #21901	; 0x558d
   1153c:	ldr	r6, [r5]
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	10d84 <dcgettext@plt>
   11550:	subs	r1, r6, #1
   11554:	mov	r2, r0
   11558:	movwne	r1, #125	; 0x7d
   1155c:	subs	r0, r6, #13
   11560:	movne	r0, r1
   11564:	mov	r1, r6
   11568:	bl	10dfc <error@plt>
   1156c:	movw	r0, #24880	; 0x6130
   11570:	mov	r6, #125	; 0x7d
   11574:	movt	r0, #2
   11578:	ldr	r0, [r0]
   1157c:	ldrb	r0, [r0]
   11580:	tst	r0, #32
   11584:	bne	115c4 <__assert_fail@plt+0x690>
   11588:	ldr	r0, [r8, r7, lsl #2]!
   1158c:	mov	r1, r8
   11590:	bl	10d6c <execvp@plt>
   11594:	ldr	r0, [r8]
   11598:	ldr	r4, [r5]
   1159c:	bl	13450 <__assert_fail@plt+0x251c>
   115a0:	movw	r2, #22471	; 0x57c7
   115a4:	mov	r3, r0
   115a8:	mov	r0, #0
   115ac:	mov	r1, r4
   115b0:	movt	r2, #1
   115b4:	bl	10dfc <error@plt>
   115b8:	cmp	r4, #2
   115bc:	mov	r6, #126	; 0x7e
   115c0:	movweq	r6, #127	; 0x7f
   115c4:	mov	r0, r6
   115c8:	sub	sp, fp, #28
   115cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115d0:	mov	r0, #0
   115d4:	mov	r4, #10
   115d8:	cmp	r7, r9
   115dc:	beq	11440 <__assert_fail@plt+0x50c>
   115e0:	b	114f0 <__assert_fail@plt+0x5bc>
   115e4:	cmn	r0, #3
   115e8:	bne	11634 <__assert_fail@plt+0x700>
   115ec:	movw	r0, #24792	; 0x60d8
   115f0:	movw	r2, #21796	; 0x5524
   115f4:	mov	r1, #0
   115f8:	movt	r0, #2
   115fc:	movt	r2, #1
   11600:	str	r1, [sp, #4]
   11604:	movw	r1, #21749	; 0x54f5
   11608:	movt	r1, #1
   1160c:	ldr	r3, [r0]
   11610:	movw	r0, #24884	; 0x6134
   11614:	str	r2, [sp]
   11618:	movw	r2, #21782	; 0x5516
   1161c:	movt	r0, #2
   11620:	movt	r2, #1
   11624:	ldr	r0, [r0]
   11628:	bl	13a20 <__assert_fail@plt+0x2aec>
   1162c:	mov	r0, #0
   11630:	bl	10e5c <exit@plt>
   11634:	cmn	r0, #2
   11638:	bne	11644 <__assert_fail@plt+0x710>
   1163c:	mov	r0, #0
   11640:	bl	11030 <__assert_fail@plt+0xfc>
   11644:	mov	r0, #125	; 0x7d
   11648:	bl	11030 <__assert_fail@plt+0xfc>
   1164c:	movw	r1, #21834	; 0x554a
   11650:	mov	r0, #0
   11654:	mov	r2, #5
   11658:	movt	r1, #1
   1165c:	bl	10d84 <dcgettext@plt>
   11660:	mov	r2, r0
   11664:	mov	r0, #0
   11668:	mov	r1, #0
   1166c:	bl	10dfc <error@plt>
   11670:	mov	r0, #125	; 0x7d
   11674:	bl	11030 <__assert_fail@plt+0xfc>
   11678:	movw	r1, #21812	; 0x5534
   1167c:	mov	r0, #0
   11680:	mov	r2, #5
   11684:	movt	r1, #1
   11688:	bl	10d84 <dcgettext@plt>
   1168c:	mov	r5, r0
   11690:	mov	r0, r4
   11694:	bl	13450 <__assert_fail@plt+0x251c>
   11698:	mov	r3, r0
   1169c:	mov	r0, #125	; 0x7d
   116a0:	mov	r1, #0
   116a4:	mov	r2, r5
   116a8:	bl	10dfc <error@plt>
   116ac:	movw	r1, #21877	; 0x5575
   116b0:	mov	r0, #0
   116b4:	mov	r2, #5
   116b8:	movt	r1, #1
   116bc:	bl	10d84 <dcgettext@plt>
   116c0:	mov	r2, r0
   116c4:	mov	r0, #125	; 0x7d
   116c8:	mov	r1, r4
   116cc:	bl	10dfc <error@plt>
   116d0:	movw	r1, #21877	; 0x5575
   116d4:	mov	r0, #0
   116d8:	mov	r2, #5
   116dc:	movt	r1, #1
   116e0:	bl	10d84 <dcgettext@plt>
   116e4:	mov	r2, r0
   116e8:	mov	r0, #125	; 0x7d
   116ec:	mov	r1, r6
   116f0:	bl	10dfc <error@plt>
   116f4:	movw	r1, #24896	; 0x6140
   116f8:	movt	r1, #2
   116fc:	str	r0, [r1]
   11700:	bx	lr
   11704:	movw	r1, #24900	; 0x6144
   11708:	movt	r1, #2
   1170c:	strb	r0, [r1]
   11710:	bx	lr
   11714:	push	{r4, r5, r6, sl, fp, lr}
   11718:	add	fp, sp, #16
   1171c:	sub	sp, sp, #8
   11720:	movw	r0, #24884	; 0x6134
   11724:	movt	r0, #2
   11728:	ldr	r0, [r0]
   1172c:	bl	14da8 <__assert_fail@plt+0x3e74>
   11730:	cmp	r0, #0
   11734:	beq	1175c <__assert_fail@plt+0x828>
   11738:	movw	r0, #24900	; 0x6144
   1173c:	movt	r0, #2
   11740:	ldrb	r0, [r0]
   11744:	cmp	r0, #0
   11748:	beq	1177c <__assert_fail@plt+0x848>
   1174c:	bl	10e8c <__errno_location@plt>
   11750:	ldr	r0, [r0]
   11754:	cmp	r0, #32
   11758:	bne	1177c <__assert_fail@plt+0x848>
   1175c:	movw	r0, #24880	; 0x6130
   11760:	movt	r0, #2
   11764:	ldr	r0, [r0]
   11768:	bl	14da8 <__assert_fail@plt+0x3e74>
   1176c:	cmp	r0, #0
   11770:	subeq	sp, fp, #16
   11774:	popeq	{r4, r5, r6, sl, fp, pc}
   11778:	b	117ec <__assert_fail@plt+0x8b8>
   1177c:	movw	r1, #22455	; 0x57b7
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	movt	r1, #1
   1178c:	bl	10d84 <dcgettext@plt>
   11790:	mov	r4, r0
   11794:	movw	r0, #24896	; 0x6140
   11798:	movt	r0, #2
   1179c:	ldr	r6, [r0]
   117a0:	bl	10e8c <__errno_location@plt>
   117a4:	ldr	r5, [r0]
   117a8:	cmp	r6, #0
   117ac:	bne	117c8 <__assert_fail@plt+0x894>
   117b0:	movw	r2, #22471	; 0x57c7
   117b4:	mov	r0, #0
   117b8:	mov	r1, r5
   117bc:	mov	r3, r4
   117c0:	movt	r2, #1
   117c4:	b	117e8 <__assert_fail@plt+0x8b4>
   117c8:	mov	r0, r6
   117cc:	bl	130c8 <__assert_fail@plt+0x2194>
   117d0:	movw	r2, #22467	; 0x57c3
   117d4:	mov	r3, r0
   117d8:	str	r4, [sp]
   117dc:	mov	r0, #0
   117e0:	mov	r1, r5
   117e4:	movt	r2, #1
   117e8:	bl	10dfc <error@plt>
   117ec:	movw	r0, #24796	; 0x60dc
   117f0:	movt	r0, #2
   117f4:	ldr	r0, [r0]
   117f8:	bl	10d54 <_exit@plt>
   117fc:	push	{r4, r5, fp, lr}
   11800:	add	fp, sp, #8
   11804:	cmp	r0, #0
   11808:	beq	1189c <__assert_fail@plt+0x968>
   1180c:	mov	r1, #47	; 0x2f
   11810:	mov	r4, r0
   11814:	bl	10ef8 <strrchr@plt>
   11818:	cmp	r0, #0
   1181c:	mov	r5, r4
   11820:	addne	r5, r0, #1
   11824:	sub	r0, r5, r4
   11828:	cmp	r0, #7
   1182c:	blt	11880 <__assert_fail@plt+0x94c>
   11830:	movw	r1, #22530	; 0x5802
   11834:	sub	r0, r5, #7
   11838:	mov	r2, #7
   1183c:	movt	r1, #1
   11840:	bl	10f1c <strncmp@plt>
   11844:	cmp	r0, #0
   11848:	bne	11880 <__assert_fail@plt+0x94c>
   1184c:	movw	r1, #22538	; 0x580a
   11850:	mov	r0, r5
   11854:	mov	r2, #3
   11858:	movt	r1, #1
   1185c:	bl	10f1c <strncmp@plt>
   11860:	cmp	r0, #0
   11864:	beq	11870 <__assert_fail@plt+0x93c>
   11868:	mov	r4, r5
   1186c:	b	11880 <__assert_fail@plt+0x94c>
   11870:	movw	r0, #24864	; 0x6120
   11874:	add	r4, r5, #3
   11878:	movt	r0, #2
   1187c:	str	r4, [r0]
   11880:	movw	r0, #24868	; 0x6124
   11884:	movt	r0, #2
   11888:	str	r4, [r0]
   1188c:	movw	r0, #24904	; 0x6148
   11890:	movt	r0, #2
   11894:	str	r4, [r0]
   11898:	pop	{r4, r5, fp, pc}
   1189c:	movw	r0, #24880	; 0x6130
   118a0:	mov	r1, #55	; 0x37
   118a4:	mov	r2, #1
   118a8:	movt	r0, #2
   118ac:	ldr	r3, [r0]
   118b0:	movw	r0, #22474	; 0x57ca
   118b4:	movt	r0, #1
   118b8:	bl	10dc0 <fwrite@plt>
   118bc:	bl	10f28 <abort@plt>
   118c0:	push	{r4, r5, r6, sl, fp, lr}
   118c4:	add	fp, sp, #16
   118c8:	mov	r4, r0
   118cc:	movw	r0, #24912	; 0x6150
   118d0:	movt	r0, #2
   118d4:	cmp	r4, #0
   118d8:	moveq	r4, r0
   118dc:	bl	10e8c <__errno_location@plt>
   118e0:	ldr	r6, [r0]
   118e4:	mov	r5, r0
   118e8:	mov	r0, r4
   118ec:	mov	r1, #48	; 0x30
   118f0:	bl	140b4 <__assert_fail@plt+0x3180>
   118f4:	str	r6, [r5]
   118f8:	pop	{r4, r5, r6, sl, fp, pc}
   118fc:	movw	r1, #24912	; 0x6150
   11900:	cmp	r0, #0
   11904:	movt	r1, #2
   11908:	movne	r1, r0
   1190c:	ldr	r0, [r1]
   11910:	bx	lr
   11914:	movw	r2, #24912	; 0x6150
   11918:	cmp	r0, #0
   1191c:	movt	r2, #2
   11920:	movne	r2, r0
   11924:	str	r1, [r2]
   11928:	bx	lr
   1192c:	movw	r3, #24912	; 0x6150
   11930:	cmp	r0, #0
   11934:	and	r2, r2, #1
   11938:	movt	r3, #2
   1193c:	movne	r3, r0
   11940:	ubfx	r0, r1, #5, #3
   11944:	and	r1, r1, #31
   11948:	add	ip, r3, r0, lsl #2
   1194c:	mov	r0, #1
   11950:	ldr	r3, [ip, #8]
   11954:	and	r0, r0, r3, lsr r1
   11958:	eor	r2, r0, r2
   1195c:	eor	r1, r3, r2, lsl r1
   11960:	str	r1, [ip, #8]
   11964:	bx	lr
   11968:	movw	r2, #24912	; 0x6150
   1196c:	cmp	r0, #0
   11970:	movt	r2, #2
   11974:	movne	r2, r0
   11978:	ldr	r0, [r2, #4]
   1197c:	str	r1, [r2, #4]
   11980:	bx	lr
   11984:	push	{fp, lr}
   11988:	mov	fp, sp
   1198c:	movw	r3, #24912	; 0x6150
   11990:	cmp	r0, #0
   11994:	movt	r3, #2
   11998:	movne	r3, r0
   1199c:	cmp	r1, #0
   119a0:	mov	r0, #10
   119a4:	cmpne	r2, #0
   119a8:	str	r0, [r3]
   119ac:	bne	119b4 <__assert_fail@plt+0xa80>
   119b0:	bl	10f28 <abort@plt>
   119b4:	str	r1, [r3, #40]	; 0x28
   119b8:	str	r2, [r3, #44]	; 0x2c
   119bc:	pop	{fp, pc}
   119c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119c4:	add	fp, sp, #28
   119c8:	sub	sp, sp, #20
   119cc:	mov	r7, r0
   119d0:	ldr	r0, [fp, #8]
   119d4:	movw	r5, #24912	; 0x6150
   119d8:	mov	r8, r3
   119dc:	mov	r9, r2
   119e0:	mov	sl, r1
   119e4:	movt	r5, #2
   119e8:	cmp	r0, #0
   119ec:	movne	r5, r0
   119f0:	bl	10e8c <__errno_location@plt>
   119f4:	ldr	r2, [r5, #40]	; 0x28
   119f8:	ldr	r3, [r5, #44]	; 0x2c
   119fc:	mov	r4, r0
   11a00:	ldm	r5, {r0, r1}
   11a04:	add	r5, r5, #8
   11a08:	ldr	r6, [r4]
   11a0c:	stm	sp, {r0, r1, r5}
   11a10:	mov	r0, r7
   11a14:	mov	r1, sl
   11a18:	str	r2, [sp, #12]
   11a1c:	str	r3, [sp, #16]
   11a20:	mov	r2, r9
   11a24:	mov	r3, r8
   11a28:	bl	11a38 <__assert_fail@plt+0xb04>
   11a2c:	str	r6, [r4]
   11a30:	sub	sp, fp, #28
   11a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a3c:	add	fp, sp, #28
   11a40:	sub	sp, sp, #156	; 0x9c
   11a44:	mov	r5, r0
   11a48:	add	r0, r2, #1
   11a4c:	mov	r6, r1
   11a50:	mov	sl, r3
   11a54:	str	r2, [fp, #-80]	; 0xffffffb0
   11a58:	str	r0, [sp, #72]	; 0x48
   11a5c:	ldr	r0, [fp, #12]
   11a60:	and	r1, r0, #1
   11a64:	str	r1, [sp, #36]	; 0x24
   11a68:	and	r1, r0, #4
   11a6c:	str	r1, [sp, #32]
   11a70:	ubfx	r9, r0, #1, #1
   11a74:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   11a78:	str	r0, [sp, #40]	; 0x28
   11a7c:	ldr	r0, [fp, #24]
   11a80:	ldr	r7, [fp, #8]
   11a84:	mov	r1, #0
   11a88:	str	r5, [fp, #-84]	; 0xffffffac
   11a8c:	str	r1, [fp, #-56]	; 0xffffffc8
   11a90:	mov	r1, #0
   11a94:	str	r1, [sp, #60]	; 0x3c
   11a98:	mov	r1, #1
   11a9c:	str	r1, [fp, #-48]	; 0xffffffd0
   11aa0:	str	r0, [sp, #80]	; 0x50
   11aa4:	ldr	r0, [fp, #20]
   11aa8:	str	r0, [sp, #76]	; 0x4c
   11aac:	mov	r0, #0
   11ab0:	str	r0, [sp, #56]	; 0x38
   11ab4:	mov	r0, #0
   11ab8:	str	r0, [fp, #-88]	; 0xffffffa8
   11abc:	mov	r0, #0
   11ac0:	str	r0, [fp, #-72]	; 0xffffffb8
   11ac4:	mov	r0, #0
   11ac8:	cmp	r7, #10
   11acc:	bhi	12a60 <__assert_fail@plt+0x1b2c>
   11ad0:	add	r1, pc, #24
   11ad4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11ad8:	mov	r4, r6
   11adc:	mov	r8, #0
   11ae0:	mov	r2, #1
   11ae4:	mov	r3, #0
   11ae8:	mov	lr, sl
   11aec:	ldr	pc, [r1, r7, lsl #2]
   11af0:			; <UNDEFINED> instruction: 0x00011bb4
   11af4:	andeq	r1, r1, r8, lsl #24
   11af8:	andeq	r1, r1, r8, asr #23
   11afc:	andeq	r1, r1, ip, lsr #23
   11b00:	strdeq	r1, [r1], -ip
   11b04:	andeq	r1, r1, r0, lsr ip
   11b08:	ldrdeq	r1, [r1], -r8
   11b0c:			; <UNDEFINED> instruction: 0x00011cb4
   11b10:	andeq	r1, r1, ip, lsl fp
   11b14:	andeq	r1, r1, ip, lsl fp
   11b18:	andeq	r1, r1, r4, asr #22
   11b1c:	movw	r0, #22620	; 0x585c
   11b20:	mov	r1, r7
   11b24:	movt	r0, #1
   11b28:	bl	13468 <__assert_fail@plt+0x2534>
   11b2c:	str	r0, [sp, #76]	; 0x4c
   11b30:	movw	r0, #22622	; 0x585e
   11b34:	mov	r1, r7
   11b38:	movt	r0, #1
   11b3c:	bl	13468 <__assert_fail@plt+0x2534>
   11b40:	str	r0, [sp, #80]	; 0x50
   11b44:	mov	r8, #0
   11b48:	tst	r9, #1
   11b4c:	bne	11b84 <__assert_fail@plt+0xc50>
   11b50:	ldr	r0, [sp, #76]	; 0x4c
   11b54:	ldrb	r0, [r0]
   11b58:	cmp	r0, #0
   11b5c:	beq	11b84 <__assert_fail@plt+0xc50>
   11b60:	ldr	r1, [sp, #76]	; 0x4c
   11b64:	mov	r8, #0
   11b68:	add	r1, r1, #1
   11b6c:	cmp	r8, r4
   11b70:	strbcc	r0, [r5, r8]
   11b74:	ldrb	r0, [r1, r8]
   11b78:	add	r8, r8, #1
   11b7c:	cmp	r0, #0
   11b80:	bne	11b6c <__assert_fail@plt+0xc38>
   11b84:	ldr	r6, [sp, #80]	; 0x50
   11b88:	mov	r0, r6
   11b8c:	bl	10e74 <strlen@plt>
   11b90:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11b94:	str	r0, [fp, #-72]	; 0xffffffb8
   11b98:	str	r6, [fp, #-88]	; 0xffffffa8
   11b9c:	mov	r2, #1
   11ba0:	mov	r3, r9
   11ba4:	mov	lr, sl
   11ba8:	b	11cb4 <__assert_fail@plt+0xd80>
   11bac:	mov	r0, #1
   11bb0:	b	11c08 <__assert_fail@plt+0xcd4>
   11bb4:	mov	r7, #0
   11bb8:	mov	r8, #0
   11bbc:	mov	r2, r0
   11bc0:	mov	r3, #0
   11bc4:	b	11cb4 <__assert_fail@plt+0xd80>
   11bc8:	tst	r9, #1
   11bcc:	bne	11c08 <__assert_fail@plt+0xcd4>
   11bd0:	mov	r2, r0
   11bd4:	b	11c60 <__assert_fail@plt+0xd2c>
   11bd8:	mov	r0, #1
   11bdc:	mov	r8, #0
   11be0:	mov	r7, #5
   11be4:	mov	r2, #1
   11be8:	str	r0, [fp, #-72]	; 0xffffffb8
   11bec:	movw	r0, #22618	; 0x585a
   11bf0:	movt	r0, #1
   11bf4:	str	r0, [fp, #-88]	; 0xffffffa8
   11bf8:	b	11c28 <__assert_fail@plt+0xcf4>
   11bfc:	mov	r2, #1
   11c00:	tst	r9, #1
   11c04:	beq	11c60 <__assert_fail@plt+0xd2c>
   11c08:	mov	r1, #1
   11c0c:	mov	r8, #0
   11c10:	mov	r7, #2
   11c14:	mov	r2, r0
   11c18:	str	r1, [fp, #-72]	; 0xffffffb8
   11c1c:	movw	r1, #22622	; 0x585e
   11c20:	movt	r1, #1
   11c24:	str	r1, [fp, #-88]	; 0xffffffa8
   11c28:	mov	r3, #1
   11c2c:	b	11cb4 <__assert_fail@plt+0xd80>
   11c30:	tst	r9, #1
   11c34:	beq	11c84 <__assert_fail@plt+0xd50>
   11c38:	mov	r0, #1
   11c3c:	mov	r8, #0
   11c40:	mov	r2, #1
   11c44:	mov	r3, #1
   11c48:	mov	r7, #5
   11c4c:	str	r0, [fp, #-72]	; 0xffffffb8
   11c50:	movw	r0, #22618	; 0x585a
   11c54:	movt	r0, #1
   11c58:	str	r0, [fp, #-88]	; 0xffffffa8
   11c5c:	b	11cb4 <__assert_fail@plt+0xd80>
   11c60:	cmp	r4, #0
   11c64:	mov	r8, #1
   11c68:	mov	r3, #0
   11c6c:	mov	r7, #2
   11c70:	movne	r0, #39	; 0x27
   11c74:	strbne	r0, [r5]
   11c78:	movw	r0, #22622	; 0x585e
   11c7c:	movt	r0, #1
   11c80:	b	11ca8 <__assert_fail@plt+0xd74>
   11c84:	cmp	r4, #0
   11c88:	mov	r8, #1
   11c8c:	mov	r2, #1
   11c90:	mov	r7, #5
   11c94:	mov	r3, #0
   11c98:	movne	r0, #34	; 0x22
   11c9c:	strbne	r0, [r5]
   11ca0:	movw	r0, #22618	; 0x585a
   11ca4:	movt	r0, #1
   11ca8:	str	r0, [fp, #-88]	; 0xffffffa8
   11cac:	mov	r0, #1
   11cb0:	str	r0, [fp, #-72]	; 0xffffffb8
   11cb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11cb8:	eor	r6, r3, #1
   11cbc:	str	r7, [fp, #-68]	; 0xffffffbc
   11cc0:	str	r3, [fp, #-76]	; 0xffffffb4
   11cc4:	str	r2, [sp, #84]	; 0x54
   11cc8:	str	r6, [sp, #92]	; 0x5c
   11ccc:	cmp	r0, #0
   11cd0:	movwne	r0, #1
   11cd4:	and	r1, r0, r3
   11cd8:	and	r1, r2, r1
   11cdc:	str	r1, [sp, #48]	; 0x30
   11ce0:	sub	r1, r7, #2
   11ce4:	clz	r1, r1
   11ce8:	lsr	r1, r1, #5
   11cec:	and	r1, r1, r3
   11cf0:	str	r1, [sp, #64]	; 0x40
   11cf4:	subs	r1, r7, #2
   11cf8:	mov	r7, #0
   11cfc:	movwne	r1, #1
   11d00:	orr	r6, r1, r6
   11d04:	and	r1, r1, r2
   11d08:	and	r0, r0, r1
   11d0c:	str	r6, [sp, #68]	; 0x44
   11d10:	str	r0, [fp, #-60]	; 0xffffffc4
   11d14:	orr	r0, r1, r3
   11d18:	ldr	r1, [fp, #16]
   11d1c:	eor	r0, r0, #1
   11d20:	clz	r1, r1
   11d24:	lsr	r1, r1, #5
   11d28:	orr	r0, r1, r0
   11d2c:	str	r0, [fp, #-64]	; 0xffffffc0
   11d30:	eor	r0, r2, #1
   11d34:	str	r0, [sp, #52]	; 0x34
   11d38:	cmn	lr, #1
   11d3c:	beq	11d4c <__assert_fail@plt+0xe18>
   11d40:	cmp	r7, lr
   11d44:	bne	11d58 <__assert_fail@plt+0xe24>
   11d48:	b	128a0 <__assert_fail@plt+0x196c>
   11d4c:	ldrb	r0, [ip, r7]
   11d50:	cmp	r0, #0
   11d54:	beq	128a8 <__assert_fail@plt+0x1974>
   11d58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d5c:	mov	sl, #0
   11d60:	cmp	r0, #0
   11d64:	beq	11d9c <__assert_fail@plt+0xe68>
   11d68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11d6c:	add	r5, r7, r0
   11d70:	cmp	r0, #2
   11d74:	bcc	11d90 <__assert_fail@plt+0xe5c>
   11d78:	cmn	lr, #1
   11d7c:	bne	11d90 <__assert_fail@plt+0xe5c>
   11d80:	mov	r0, ip
   11d84:	bl	10e74 <strlen@plt>
   11d88:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11d8c:	mov	lr, r0
   11d90:	cmp	r5, lr
   11d94:	bls	11da4 <__assert_fail@plt+0xe70>
   11d98:	ldr	r5, [fp, #-84]	; 0xffffffac
   11d9c:	mov	r0, #0
   11da0:	b	11df0 <__assert_fail@plt+0xebc>
   11da4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11da8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11dac:	add	r0, ip, r7
   11db0:	mov	r6, r4
   11db4:	mov	r4, lr
   11db8:	bl	10e68 <bcmp@plt>
   11dbc:	ldr	r2, [sp, #92]	; 0x5c
   11dc0:	cmp	r0, #0
   11dc4:	ldr	r5, [fp, #-84]	; 0xffffffac
   11dc8:	mov	r1, r0
   11dcc:	movwne	r1, #1
   11dd0:	orr	r1, r1, r2
   11dd4:	tst	r1, #1
   11dd8:	beq	12930 <__assert_fail@plt+0x19fc>
   11ddc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   11de0:	clz	r0, r0
   11de4:	mov	lr, r4
   11de8:	mov	r4, r6
   11dec:	lsr	r0, r0, #5
   11df0:	str	r0, [fp, #-52]	; 0xffffffcc
   11df4:	ldrb	r6, [ip, r7]
   11df8:	cmp	r6, #126	; 0x7e
   11dfc:	bhi	1232c <__assert_fail@plt+0x13f8>
   11e00:	add	r3, pc, #16
   11e04:	mov	r9, #1
   11e08:	mov	r2, #110	; 0x6e
   11e0c:	mov	r0, #97	; 0x61
   11e10:	mov	r1, #0
   11e14:	ldr	pc, [r3, r6, lsl #2]
   11e18:	andeq	r2, r1, ip, lsl #3
   11e1c:	andeq	r2, r1, ip, lsr #6
   11e20:	andeq	r2, r1, ip, lsr #6
   11e24:	andeq	r2, r1, ip, lsr #6
   11e28:	andeq	r2, r1, ip, lsr #6
   11e2c:	andeq	r2, r1, ip, lsr #6
   11e30:	andeq	r2, r1, ip, lsr #6
   11e34:	andeq	r2, r1, r8, lsl #8
   11e38:	andeq	r2, r1, ip, ror #2
   11e3c:	andeq	r2, r1, r4, ror #2
   11e40:	andeq	r2, r1, r8, ror r1
   11e44:	muleq	r1, r4, r2
   11e48:	andeq	r2, r1, ip, asr r1
   11e4c:	andeq	r2, r1, r4, ror r1
   11e50:	andeq	r2, r1, ip, lsr #6
   11e54:	andeq	r2, r1, ip, lsr #6
   11e58:	andeq	r2, r1, ip, lsr #6
   11e5c:	andeq	r2, r1, ip, lsr #6
   11e60:	andeq	r2, r1, ip, lsr #6
   11e64:	andeq	r2, r1, ip, lsr #6
   11e68:	andeq	r2, r1, ip, lsr #6
   11e6c:	andeq	r2, r1, ip, lsr #6
   11e70:	andeq	r2, r1, ip, lsr #6
   11e74:	andeq	r2, r1, ip, lsr #6
   11e78:	andeq	r2, r1, ip, lsr #6
   11e7c:	andeq	r2, r1, ip, lsr #6
   11e80:	andeq	r2, r1, ip, lsr #6
   11e84:	andeq	r2, r1, ip, lsr #6
   11e88:	andeq	r2, r1, ip, lsr #6
   11e8c:	andeq	r2, r1, ip, lsr #6
   11e90:	andeq	r2, r1, ip, lsr #6
   11e94:	andeq	r2, r1, ip, lsr #6
   11e98:	andeq	r2, r1, r0, lsl r1
   11e9c:	andeq	r2, r1, r4, lsl r1
   11ea0:	andeq	r2, r1, r4, lsl r1
   11ea4:	strdeq	r2, [r1], -ip
   11ea8:	andeq	r2, r1, r4, lsl r1
   11eac:	andeq	r2, r1, r4, lsl r0
   11eb0:	andeq	r2, r1, r4, lsl r1
   11eb4:	muleq	r1, ip, r2
   11eb8:	andeq	r2, r1, r4, lsl r1
   11ebc:	andeq	r2, r1, r4, lsl r1
   11ec0:	andeq	r2, r1, r4, lsl r1
   11ec4:	andeq	r2, r1, r4, lsl r0
   11ec8:	andeq	r2, r1, r4, lsl r0
   11ecc:	andeq	r2, r1, r4, lsl r0
   11ed0:	andeq	r2, r1, r4, lsl r0
   11ed4:	andeq	r2, r1, r4, lsl r0
   11ed8:	andeq	r2, r1, r4, lsl r0
   11edc:	andeq	r2, r1, r4, lsl r0
   11ee0:	andeq	r2, r1, r4, lsl r0
   11ee4:	andeq	r2, r1, r4, lsl r0
   11ee8:	andeq	r2, r1, r4, lsl r0
   11eec:	andeq	r2, r1, r4, lsl r0
   11ef0:	andeq	r2, r1, r4, lsl r0
   11ef4:	andeq	r2, r1, r4, lsl r0
   11ef8:	andeq	r2, r1, r4, lsl r0
   11efc:	andeq	r2, r1, r4, lsl r0
   11f00:	andeq	r2, r1, r4, lsl r0
   11f04:	andeq	r2, r1, r4, lsl r1
   11f08:	andeq	r2, r1, r4, lsl r1
   11f0c:	andeq	r2, r1, r4, lsl r1
   11f10:	andeq	r2, r1, r4, lsl r1
   11f14:	andeq	r2, r1, r4, ror #4
   11f18:	andeq	r2, r1, ip, lsr #6
   11f1c:	andeq	r2, r1, r4, lsl r0
   11f20:	andeq	r2, r1, r4, lsl r0
   11f24:	andeq	r2, r1, r4, lsl r0
   11f28:	andeq	r2, r1, r4, lsl r0
   11f2c:	andeq	r2, r1, r4, lsl r0
   11f30:	andeq	r2, r1, r4, lsl r0
   11f34:	andeq	r2, r1, r4, lsl r0
   11f38:	andeq	r2, r1, r4, lsl r0
   11f3c:	andeq	r2, r1, r4, lsl r0
   11f40:	andeq	r2, r1, r4, lsl r0
   11f44:	andeq	r2, r1, r4, lsl r0
   11f48:	andeq	r2, r1, r4, lsl r0
   11f4c:	andeq	r2, r1, r4, lsl r0
   11f50:	andeq	r2, r1, r4, lsl r0
   11f54:	andeq	r2, r1, r4, lsl r0
   11f58:	andeq	r2, r1, r4, lsl r0
   11f5c:	andeq	r2, r1, r4, lsl r0
   11f60:	andeq	r2, r1, r4, lsl r0
   11f64:	andeq	r2, r1, r4, lsl r0
   11f68:	andeq	r2, r1, r4, lsl r0
   11f6c:	andeq	r2, r1, r4, lsl r0
   11f70:	andeq	r2, r1, r4, lsl r0
   11f74:	andeq	r2, r1, r4, lsl r0
   11f78:	andeq	r2, r1, r4, lsl r0
   11f7c:	andeq	r2, r1, r4, lsl r0
   11f80:	andeq	r2, r1, r4, lsl r0
   11f84:	andeq	r2, r1, r4, lsl r1
   11f88:	andeq	r2, r1, ip, lsr r1
   11f8c:	andeq	r2, r1, r4, lsl r0
   11f90:	andeq	r2, r1, r4, lsl r1
   11f94:	andeq	r2, r1, r4, lsl r0
   11f98:	andeq	r2, r1, r4, lsl r1
   11f9c:	andeq	r2, r1, r4, lsl r0
   11fa0:	andeq	r2, r1, r4, lsl r0
   11fa4:	andeq	r2, r1, r4, lsl r0
   11fa8:	andeq	r2, r1, r4, lsl r0
   11fac:	andeq	r2, r1, r4, lsl r0
   11fb0:	andeq	r2, r1, r4, lsl r0
   11fb4:	andeq	r2, r1, r4, lsl r0
   11fb8:	andeq	r2, r1, r4, lsl r0
   11fbc:	andeq	r2, r1, r4, lsl r0
   11fc0:	andeq	r2, r1, r4, lsl r0
   11fc4:	andeq	r2, r1, r4, lsl r0
   11fc8:	andeq	r2, r1, r4, lsl r0
   11fcc:	andeq	r2, r1, r4, lsl r0
   11fd0:	andeq	r2, r1, r4, lsl r0
   11fd4:	andeq	r2, r1, r4, lsl r0
   11fd8:	andeq	r2, r1, r4, lsl r0
   11fdc:	andeq	r2, r1, r4, lsl r0
   11fe0:	andeq	r2, r1, r4, lsl r0
   11fe4:	andeq	r2, r1, r4, lsl r0
   11fe8:	andeq	r2, r1, r4, lsl r0
   11fec:	andeq	r2, r1, r4, lsl r0
   11ff0:	andeq	r2, r1, r4, lsl r0
   11ff4:	andeq	r2, r1, r4, lsl r0
   11ff8:	andeq	r2, r1, r4, lsl r0
   11ffc:	andeq	r2, r1, r4, lsl r0
   12000:	andeq	r2, r1, r4, lsl r0
   12004:	ldrdeq	r2, [r1], -r0
   12008:	andeq	r2, r1, r4, lsl r1
   1200c:	ldrdeq	r2, [r1], -r0
   12010:	strdeq	r2, [r1], -ip
   12014:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12018:	tst	r0, #1
   1201c:	bne	12048 <__assert_fail@plt+0x1114>
   12020:	ldr	r1, [fp, #16]
   12024:	ubfx	r0, r6, #5, #3
   12028:	mov	r2, #1
   1202c:	ldr	r0, [r1, r0, lsl #2]
   12030:	and	r1, r6, #31
   12034:	tst	r0, r2, lsl r1
   12038:	beq	12048 <__assert_fail@plt+0x1114>
   1203c:	mov	r0, r6
   12040:	mov	r1, r9
   12044:	b	1205c <__assert_fail@plt+0x1128>
   12048:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1204c:	mov	r1, r9
   12050:	cmp	r0, #0
   12054:	mov	r0, r6
   12058:	beq	1239c <__assert_fail@plt+0x1468>
   1205c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12060:	tst	r2, #1
   12064:	bne	1296c <__assert_fail@plt+0x1a38>
   12068:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1206c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12070:	subs	r2, r2, #2
   12074:	movwne	r2, #1
   12078:	orr	r2, r2, r3
   1207c:	tst	r2, #1
   12080:	bne	120bc <__assert_fail@plt+0x1188>
   12084:	cmp	r8, r4
   12088:	movcc	r2, #39	; 0x27
   1208c:	strbcc	r2, [r5, r8]
   12090:	add	r2, r8, #1
   12094:	cmp	r2, r4
   12098:	movcc	r3, #36	; 0x24
   1209c:	strbcc	r3, [r5, r2]
   120a0:	add	r2, r8, #2
   120a4:	add	r8, r8, #3
   120a8:	cmp	r2, r4
   120ac:	movcc	r3, #39	; 0x27
   120b0:	strbcc	r3, [r5, r2]
   120b4:	mov	r2, #1
   120b8:	str	r2, [fp, #-56]	; 0xffffffc8
   120bc:	cmp	r8, r4
   120c0:	movcc	r2, #92	; 0x5c
   120c4:	strbcc	r2, [r5, r8]
   120c8:	add	r8, r8, #1
   120cc:	b	123e0 <__assert_fail@plt+0x14ac>
   120d0:	cmp	lr, #1
   120d4:	beq	120fc <__assert_fail@plt+0x11c8>
   120d8:	mov	r9, #0
   120dc:	cmn	lr, #1
   120e0:	bne	12108 <__assert_fail@plt+0x11d4>
   120e4:	ldrb	r0, [ip, #1]
   120e8:	cmp	r0, #0
   120ec:	beq	120fc <__assert_fail@plt+0x11c8>
   120f0:	mvn	lr, #0
   120f4:	mov	sl, #0
   120f8:	b	12014 <__assert_fail@plt+0x10e0>
   120fc:	mov	r9, #0
   12100:	cmp	r7, #0
   12104:	beq	12110 <__assert_fail@plt+0x11dc>
   12108:	mov	sl, #0
   1210c:	b	12014 <__assert_fail@plt+0x10e0>
   12110:	mov	r1, #1
   12114:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12118:	cmp	r0, #2
   1211c:	bne	12134 <__assert_fail@plt+0x1200>
   12120:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12124:	mov	r9, r1
   12128:	tst	r0, #1
   1212c:	beq	12014 <__assert_fail@plt+0x10e0>
   12130:	b	1296c <__assert_fail@plt+0x1a38>
   12134:	mov	r9, r1
   12138:	b	12014 <__assert_fail@plt+0x10e0>
   1213c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12140:	cmp	r0, #2
   12144:	bne	12380 <__assert_fail@plt+0x144c>
   12148:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1214c:	tst	r0, #1
   12150:	bne	1296c <__assert_fail@plt+0x1a38>
   12154:	mov	sl, #0
   12158:	b	12394 <__assert_fail@plt+0x1460>
   1215c:	mov	r0, #102	; 0x66
   12160:	b	12408 <__assert_fail@plt+0x14d4>
   12164:	mov	r2, #116	; 0x74
   12168:	b	12178 <__assert_fail@plt+0x1244>
   1216c:	mov	r0, #98	; 0x62
   12170:	b	12408 <__assert_fail@plt+0x14d4>
   12174:	mov	r2, #114	; 0x72
   12178:	ldr	r0, [sp, #68]	; 0x44
   1217c:	tst	r0, #1
   12180:	mov	r0, r2
   12184:	bne	12408 <__assert_fail@plt+0x14d4>
   12188:	b	1296c <__assert_fail@plt+0x1a38>
   1218c:	ldr	r0, [sp, #84]	; 0x54
   12190:	tst	r0, #1
   12194:	beq	12424 <__assert_fail@plt+0x14f0>
   12198:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1219c:	tst	r0, #1
   121a0:	bne	12a58 <__assert_fail@plt+0x1b24>
   121a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   121a8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   121ac:	subs	r0, r0, #2
   121b0:	movwne	r0, #1
   121b4:	orr	r0, r0, r1
   121b8:	tst	r0, #1
   121bc:	bne	121f8 <__assert_fail@plt+0x12c4>
   121c0:	cmp	r8, r4
   121c4:	movcc	r0, #39	; 0x27
   121c8:	strbcc	r0, [r5, r8]
   121cc:	add	r0, r8, #1
   121d0:	cmp	r0, r4
   121d4:	movcc	r1, #36	; 0x24
   121d8:	strbcc	r1, [r5, r0]
   121dc:	add	r0, r8, #2
   121e0:	add	r8, r8, #3
   121e4:	cmp	r0, r4
   121e8:	movcc	r1, #39	; 0x27
   121ec:	strbcc	r1, [r5, r0]
   121f0:	mov	r0, #1
   121f4:	str	r0, [fp, #-56]	; 0xffffffc8
   121f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   121fc:	cmp	r8, r4
   12200:	mov	r9, #0
   12204:	mov	sl, #1
   12208:	mov	r6, #48	; 0x30
   1220c:	movcc	r0, #92	; 0x5c
   12210:	strbcc	r0, [r5, r8]
   12214:	add	r0, r8, #1
   12218:	cmp	r1, #2
   1221c:	beq	125ec <__assert_fail@plt+0x16b8>
   12220:	add	r1, r7, #1
   12224:	cmp	r1, lr
   12228:	bcs	125ec <__assert_fail@plt+0x16b8>
   1222c:	ldrb	r1, [ip, r1]
   12230:	sub	r1, r1, #48	; 0x30
   12234:	uxtb	r1, r1
   12238:	cmp	r1, #9
   1223c:	bhi	125ec <__assert_fail@plt+0x16b8>
   12240:	cmp	r0, r4
   12244:	movcc	r1, #48	; 0x30
   12248:	strbcc	r1, [r5, r0]
   1224c:	add	r0, r8, #2
   12250:	add	r8, r8, #3
   12254:	cmp	r0, r4
   12258:	movcc	r1, #48	; 0x30
   1225c:	strbcc	r1, [r5, r0]
   12260:	b	12014 <__assert_fail@plt+0x10e0>
   12264:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12268:	mov	sl, #0
   1226c:	mov	r6, #63	; 0x3f
   12270:	cmp	r0, #5
   12274:	beq	125f4 <__assert_fail@plt+0x16c0>
   12278:	cmp	r0, #2
   1227c:	bne	1269c <__assert_fail@plt+0x1768>
   12280:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12284:	mov	r9, #0
   12288:	tst	r0, #1
   1228c:	beq	12014 <__assert_fail@plt+0x10e0>
   12290:	b	1296c <__assert_fail@plt+0x1a38>
   12294:	mov	r0, #118	; 0x76
   12298:	b	12408 <__assert_fail@plt+0x14d4>
   1229c:	mov	r0, #1
   122a0:	mov	r6, #39	; 0x27
   122a4:	str	r0, [sp, #60]	; 0x3c
   122a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   122ac:	cmp	r0, #2
   122b0:	bne	12440 <__assert_fail@plt+0x150c>
   122b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   122b8:	tst	r0, #1
   122bc:	bne	1296c <__assert_fail@plt+0x1a38>
   122c0:	ldr	r2, [sp, #56]	; 0x38
   122c4:	clz	r1, r4
   122c8:	mov	sl, #0
   122cc:	mov	r9, #1
   122d0:	lsr	r1, r1, #5
   122d4:	cmp	r2, #0
   122d8:	mov	r0, r2
   122dc:	movwne	r0, #1
   122e0:	orrs	r0, r0, r1
   122e4:	moveq	r2, r4
   122e8:	moveq	r4, r0
   122ec:	cmp	r8, r4
   122f0:	str	r2, [sp, #56]	; 0x38
   122f4:	movcc	r0, #39	; 0x27
   122f8:	strbcc	r0, [r5, r8]
   122fc:	add	r0, r8, #1
   12300:	cmp	r0, r4
   12304:	movcc	r1, #92	; 0x5c
   12308:	strbcc	r1, [r5, r0]
   1230c:	add	r0, r8, #2
   12310:	add	r8, r8, #3
   12314:	cmp	r0, r4
   12318:	movcc	r1, #39	; 0x27
   1231c:	strbcc	r1, [r5, r0]
   12320:	mov	r0, #0
   12324:	str	r0, [fp, #-56]	; 0xffffffc8
   12328:	b	12014 <__assert_fail@plt+0x10e0>
   1232c:	ldr	r0, [sp, #40]	; 0x28
   12330:	str	r4, [sp, #88]	; 0x58
   12334:	cmp	r0, #1
   12338:	bne	12448 <__assert_fail@plt+0x1514>
   1233c:	str	lr, [sp, #28]
   12340:	bl	10e50 <__ctype_b_loc@plt>
   12344:	ldr	r0, [r0]
   12348:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1234c:	mov	r2, #1
   12350:	add	r0, r0, r6, lsl #1
   12354:	ldrb	r0, [r0, #1]
   12358:	ubfx	r9, r0, #6, #1
   1235c:	ldr	r0, [sp, #52]	; 0x34
   12360:	cmp	r2, #1
   12364:	orr	r0, r9, r0
   12368:	bhi	126a4 <__assert_fail@plt+0x1770>
   1236c:	tst	r0, #1
   12370:	beq	126a4 <__assert_fail@plt+0x1770>
   12374:	ldr	lr, [sp, #28]
   12378:	ldr	r4, [sp, #88]	; 0x58
   1237c:	b	12014 <__assert_fail@plt+0x10e0>
   12380:	ldr	r1, [sp, #48]	; 0x30
   12384:	mov	sl, #0
   12388:	mov	r0, #92	; 0x5c
   1238c:	cmp	r1, #0
   12390:	beq	12408 <__assert_fail@plt+0x14d4>
   12394:	mov	r6, #92	; 0x5c
   12398:	mov	r9, #0
   1239c:	cmp	sl, #0
   123a0:	bne	123d8 <__assert_fail@plt+0x14a4>
   123a4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   123a8:	tst	r0, #1
   123ac:	beq	123d8 <__assert_fail@plt+0x14a4>
   123b0:	cmp	r8, r4
   123b4:	movcc	r0, #39	; 0x27
   123b8:	strbcc	r0, [r5, r8]
   123bc:	add	r0, r8, #1
   123c0:	add	r8, r8, #2
   123c4:	cmp	r0, r4
   123c8:	movcc	r1, #39	; 0x27
   123cc:	strbcc	r1, [r5, r0]
   123d0:	mov	r0, #0
   123d4:	str	r0, [fp, #-56]	; 0xffffffc8
   123d8:	mov	r1, r9
   123dc:	mov	r0, r6
   123e0:	cmp	r8, r4
   123e4:	strbcc	r0, [r5, r8]
   123e8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   123ec:	add	r8, r8, #1
   123f0:	and	r0, r0, r1
   123f4:	str	r0, [fp, #-48]	; 0xffffffd0
   123f8:	add	r7, r7, #1
   123fc:	cmn	lr, #1
   12400:	bne	11d40 <__assert_fail@plt+0xe0c>
   12404:	b	11d4c <__assert_fail@plt+0xe18>
   12408:	ldr	r1, [sp, #84]	; 0x54
   1240c:	mov	sl, #0
   12410:	mov	r9, #0
   12414:	tst	r1, #1
   12418:	mov	r1, #0
   1241c:	beq	12014 <__assert_fail@plt+0x10e0>
   12420:	b	1205c <__assert_fail@plt+0x1128>
   12424:	ldr	r0, [sp, #36]	; 0x24
   12428:	mov	r6, #0
   1242c:	mov	sl, #0
   12430:	mov	r9, #0
   12434:	cmp	r0, #0
   12438:	beq	12014 <__assert_fail@plt+0x10e0>
   1243c:	b	123f8 <__assert_fail@plt+0x14c4>
   12440:	mov	r9, #1
   12444:	b	12014 <__assert_fail@plt+0x10e0>
   12448:	mov	r0, #0
   1244c:	cmn	lr, #1
   12450:	sub	r4, fp, #40	; 0x28
   12454:	str	r0, [fp, #-36]	; 0xffffffdc
   12458:	str	r0, [fp, #-40]	; 0xffffffd8
   1245c:	bne	12470 <__assert_fail@plt+0x153c>
   12460:	mov	r0, ip
   12464:	bl	10e74 <strlen@plt>
   12468:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1246c:	mov	lr, r0
   12470:	ldr	r0, [sp, #72]	; 0x48
   12474:	mov	r9, #1
   12478:	mov	r2, #0
   1247c:	str	lr, [sp, #28]
   12480:	add	r0, r0, r7
   12484:	str	r0, [sp, #20]
   12488:	b	124cc <__assert_fail@plt+0x1598>
   1248c:	ldr	r5, [sp, #44]	; 0x2c
   12490:	add	r5, r0, r5
   12494:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12498:	bl	10db4 <iswprint@plt>
   1249c:	cmp	r0, #0
   124a0:	sub	r4, fp, #40	; 0x28
   124a4:	movwne	r0, #1
   124a8:	and	r9, r9, r0
   124ac:	mov	r0, r4
   124b0:	bl	10d78 <mbsinit@plt>
   124b4:	mov	r2, r5
   124b8:	ldr	lr, [sp, #28]
   124bc:	ldr	r5, [fp, #-84]	; 0xffffffac
   124c0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124c4:	cmp	r0, #0
   124c8:	bne	1235c <__assert_fail@plt+0x1428>
   124cc:	add	r0, r2, r7
   124d0:	str	r2, [sp, #44]	; 0x2c
   124d4:	mov	r3, r4
   124d8:	add	r1, ip, r0
   124dc:	str	r0, [sp, #24]
   124e0:	sub	r2, lr, r0
   124e4:	sub	r0, fp, #44	; 0x2c
   124e8:	bl	1502c <__assert_fail@plt+0x40f8>
   124ec:	cmp	r0, #0
   124f0:	beq	12894 <__assert_fail@plt+0x1960>
   124f4:	cmn	r0, #1
   124f8:	beq	12850 <__assert_fail@plt+0x191c>
   124fc:	ldr	lr, [sp, #28]
   12500:	cmn	r0, #2
   12504:	beq	12858 <__assert_fail@plt+0x1924>
   12508:	ldr	r2, [sp, #64]	; 0x40
   1250c:	ldr	r4, [sp, #88]	; 0x58
   12510:	ldr	ip, [sp, #84]	; 0x54
   12514:	cmp	r0, #2
   12518:	mov	r1, #0
   1251c:	movwcc	r1, #1
   12520:	eor	r2, r2, #1
   12524:	orrs	r1, r2, r1
   12528:	bne	1248c <__assert_fail@plt+0x1558>
   1252c:	ldr	r1, [sp, #44]	; 0x2c
   12530:	ldr	r2, [sp, #20]
   12534:	add	r1, r2, r1
   12538:	sub	r2, r0, #1
   1253c:	b	1254c <__assert_fail@plt+0x1618>
   12540:	add	r1, r1, #1
   12544:	subs	r2, r2, #1
   12548:	beq	1248c <__assert_fail@plt+0x1558>
   1254c:	ldrb	r3, [r1]
   12550:	sub	r3, r3, #91	; 0x5b
   12554:	cmp	r3, #33	; 0x21
   12558:	bhi	12540 <__assert_fail@plt+0x160c>
   1255c:	add	r5, pc, #0
   12560:	ldr	pc, [r5, r3, lsl #2]
   12564:	andeq	r2, r1, r8, asr #18
   12568:	andeq	r2, r1, r8, asr #18
   1256c:	andeq	r2, r1, r0, asr #10
   12570:	andeq	r2, r1, r8, asr #18
   12574:	andeq	r2, r1, r0, asr #10
   12578:	andeq	r2, r1, r8, asr #18
   1257c:	andeq	r2, r1, r0, asr #10
   12580:	andeq	r2, r1, r0, asr #10
   12584:	andeq	r2, r1, r0, asr #10
   12588:	andeq	r2, r1, r0, asr #10
   1258c:	andeq	r2, r1, r0, asr #10
   12590:	andeq	r2, r1, r0, asr #10
   12594:	andeq	r2, r1, r0, asr #10
   12598:	andeq	r2, r1, r0, asr #10
   1259c:	andeq	r2, r1, r0, asr #10
   125a0:	andeq	r2, r1, r0, asr #10
   125a4:	andeq	r2, r1, r0, asr #10
   125a8:	andeq	r2, r1, r0, asr #10
   125ac:	andeq	r2, r1, r0, asr #10
   125b0:	andeq	r2, r1, r0, asr #10
   125b4:	andeq	r2, r1, r0, asr #10
   125b8:	andeq	r2, r1, r0, asr #10
   125bc:	andeq	r2, r1, r0, asr #10
   125c0:	andeq	r2, r1, r0, asr #10
   125c4:	andeq	r2, r1, r0, asr #10
   125c8:	andeq	r2, r1, r0, asr #10
   125cc:	andeq	r2, r1, r0, asr #10
   125d0:	andeq	r2, r1, r0, asr #10
   125d4:	andeq	r2, r1, r0, asr #10
   125d8:	andeq	r2, r1, r0, asr #10
   125dc:	andeq	r2, r1, r0, asr #10
   125e0:	andeq	r2, r1, r0, asr #10
   125e4:	andeq	r2, r1, r0, asr #10
   125e8:	andeq	r2, r1, r8, asr #18
   125ec:	mov	r8, r0
   125f0:	b	12014 <__assert_fail@plt+0x10e0>
   125f4:	ldr	r0, [sp, #32]
   125f8:	cmp	r0, #0
   125fc:	beq	1269c <__assert_fail@plt+0x1768>
   12600:	add	r0, r7, #2
   12604:	cmp	r0, lr
   12608:	bcs	1269c <__assert_fail@plt+0x1768>
   1260c:	add	r1, r7, ip
   12610:	ldrb	r1, [r1, #1]
   12614:	cmp	r1, #63	; 0x3f
   12618:	bne	1269c <__assert_fail@plt+0x1768>
   1261c:	ldrb	r9, [ip, r0]
   12620:	sub	r2, r9, #33	; 0x21
   12624:	cmp	r2, #29
   12628:	bhi	1269c <__assert_fail@plt+0x1768>
   1262c:	movw	r1, #20929	; 0x51c1
   12630:	mov	r3, #1
   12634:	movt	r1, #14336	; 0x3800
   12638:	tst	r1, r3, lsl r2
   1263c:	beq	1269c <__assert_fail@plt+0x1768>
   12640:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12644:	tst	r1, #1
   12648:	bne	1296c <__assert_fail@plt+0x1a38>
   1264c:	cmp	r8, r4
   12650:	add	r2, r8, #1
   12654:	mov	r6, r9
   12658:	mov	r7, r0
   1265c:	mov	r9, #0
   12660:	movcc	r1, #63	; 0x3f
   12664:	strbcc	r1, [r5, r8]
   12668:	cmp	r2, r4
   1266c:	movcc	r1, #34	; 0x22
   12670:	strbcc	r1, [r5, r2]
   12674:	add	r2, r8, #2
   12678:	cmp	r2, r4
   1267c:	movcc	r1, #34	; 0x22
   12680:	strbcc	r1, [r5, r2]
   12684:	add	r2, r8, #3
   12688:	add	r8, r8, #4
   1268c:	cmp	r2, r4
   12690:	movcc	r1, #63	; 0x3f
   12694:	strbcc	r1, [r5, r2]
   12698:	b	12014 <__assert_fail@plt+0x10e0>
   1269c:	mov	r9, #0
   126a0:	b	12014 <__assert_fail@plt+0x10e0>
   126a4:	ldr	lr, [sp, #28]
   126a8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   126ac:	add	r1, r2, r7
   126b0:	mov	r2, #0
   126b4:	str	r1, [sp, #44]	; 0x2c
   126b8:	tst	r0, #1
   126bc:	bne	127d8 <__assert_fail@plt+0x18a4>
   126c0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   126c4:	tst	r1, #1
   126c8:	bne	12968 <__assert_fail@plt+0x1a34>
   126cc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   126d0:	subs	r2, r1, #2
   126d4:	movwne	r2, #1
   126d8:	orr	r2, r2, r4
   126dc:	tst	r2, #1
   126e0:	bne	12724 <__assert_fail@plt+0x17f0>
   126e4:	ldr	r1, [sp, #88]	; 0x58
   126e8:	add	r2, r8, #1
   126ec:	mov	r4, #1
   126f0:	cmp	r8, r1
   126f4:	movcc	r1, #39	; 0x27
   126f8:	strbcc	r1, [r5, r8]
   126fc:	ldr	r1, [sp, #88]	; 0x58
   12700:	cmp	r2, r1
   12704:	movcc	r1, #36	; 0x24
   12708:	strbcc	r1, [r5, r2]
   1270c:	ldr	r1, [sp, #88]	; 0x58
   12710:	add	r2, r8, #2
   12714:	add	r8, r8, #3
   12718:	cmp	r2, r1
   1271c:	movcc	r1, #39	; 0x27
   12720:	strbcc	r1, [r5, r2]
   12724:	ldr	r1, [sp, #88]	; 0x58
   12728:	add	r2, r8, #1
   1272c:	cmp	r8, r1
   12730:	movcc	r1, #92	; 0x5c
   12734:	strbcc	r1, [r5, r8]
   12738:	ldr	r1, [sp, #88]	; 0x58
   1273c:	cmp	r2, r1
   12740:	bcs	12754 <__assert_fail@plt+0x1820>
   12744:	uxtb	r3, r6
   12748:	mov	r1, #48	; 0x30
   1274c:	orr	r3, r1, r3, lsr #6
   12750:	strb	r3, [r5, r2]
   12754:	ldr	r1, [sp, #88]	; 0x58
   12758:	add	r2, r8, #2
   1275c:	add	r8, r8, #3
   12760:	cmp	r2, r1
   12764:	lsrcc	r3, r6, #3
   12768:	movcc	r1, #6
   1276c:	bficc	r3, r1, #3, #29
   12770:	mov	r1, #6
   12774:	bfi	r6, r1, #3, #29
   12778:	strbcc	r3, [r5, r2]
   1277c:	mov	r2, #1
   12780:	b	12800 <__assert_fail@plt+0x18cc>
   12784:	ldr	r1, [sp, #88]	; 0x58
   12788:	ldr	r5, [fp, #-84]	; 0xffffffac
   1278c:	ldr	r4, [sp, #88]	; 0x58
   12790:	cmp	r8, r1
   12794:	movcc	r1, #39	; 0x27
   12798:	strbcc	r1, [r5, r8]
   1279c:	add	r1, r8, #1
   127a0:	add	r8, r8, #2
   127a4:	cmp	r1, r4
   127a8:	movcc	r4, #39	; 0x27
   127ac:	strbcc	r4, [r5, r1]
   127b0:	mov	r4, #0
   127b4:	ldr	r1, [sp, #88]	; 0x58
   127b8:	cmp	r8, r1
   127bc:	ldr	r1, [sp, #72]	; 0x48
   127c0:	strbcc	r6, [r5, r8]
   127c4:	add	r8, r8, #1
   127c8:	ldrb	r6, [r1, r7]
   127cc:	mov	r7, r3
   127d0:	tst	r0, #1
   127d4:	beq	126c0 <__assert_fail@plt+0x178c>
   127d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   127dc:	tst	r1, #1
   127e0:	beq	127f8 <__assert_fail@plt+0x18c4>
   127e4:	ldr	r1, [sp, #88]	; 0x58
   127e8:	cmp	r8, r1
   127ec:	movcc	r1, #92	; 0x5c
   127f0:	strbcc	r1, [r5, r8]
   127f4:	add	r8, r8, #1
   127f8:	mov	r1, #0
   127fc:	str	r1, [fp, #-52]	; 0xffffffcc
   12800:	ldr	r1, [sp, #44]	; 0x2c
   12804:	add	r3, r7, #1
   12808:	and	sl, r2, #1
   1280c:	cmp	r1, r3
   12810:	bls	12834 <__assert_fail@plt+0x1900>
   12814:	cmp	sl, #0
   12818:	mvn	r5, r4
   1281c:	movwne	sl, #1
   12820:	orr	r5, r5, sl
   12824:	tst	r5, #1
   12828:	beq	12784 <__assert_fail@plt+0x1850>
   1282c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12830:	b	127b4 <__assert_fail@plt+0x1880>
   12834:	str	r4, [fp, #-56]	; 0xffffffc8
   12838:	ldr	r4, [sp, #88]	; 0x58
   1283c:	cmp	sl, #0
   12840:	movwne	sl, #1
   12844:	cmp	sl, #0
   12848:	beq	123a4 <__assert_fail@plt+0x1470>
   1284c:	b	123d8 <__assert_fail@plt+0x14a4>
   12850:	mov	r9, #0
   12854:	b	12894 <__assert_fail@plt+0x1960>
   12858:	ldr	r0, [sp, #24]
   1285c:	mov	r9, #0
   12860:	cmp	lr, r0
   12864:	bls	12894 <__assert_fail@plt+0x1960>
   12868:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1286c:	ldr	r2, [sp, #44]	; 0x2c
   12870:	add	r0, ip, r7
   12874:	ldrb	r1, [r0, r2]
   12878:	cmp	r1, #0
   1287c:	beq	1235c <__assert_fail@plt+0x1428>
   12880:	add	r2, r2, #1
   12884:	add	r1, r7, r2
   12888:	cmp	r1, lr
   1288c:	bcc	12874 <__assert_fail@plt+0x1940>
   12890:	b	1235c <__assert_fail@plt+0x1428>
   12894:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12898:	ldr	r2, [sp, #44]	; 0x2c
   1289c:	b	1235c <__assert_fail@plt+0x1428>
   128a0:	mov	lr, r7
   128a4:	b	128ac <__assert_fail@plt+0x1978>
   128a8:	mvn	lr, #0
   128ac:	ldr	r1, [fp, #-68]	; 0xffffffbc
   128b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128b4:	eor	r0, r1, #2
   128b8:	orr	r0, r0, r8
   128bc:	clz	r0, r0
   128c0:	lsr	r0, r0, #5
   128c4:	tst	r2, r0
   128c8:	bne	1296c <__assert_fail@plt+0x1a38>
   128cc:	subs	r0, r1, #2
   128d0:	movwne	r0, #1
   128d4:	orr	r0, r2, r0
   128d8:	tst	r0, #1
   128dc:	ldreq	r0, [sp, #60]	; 0x3c
   128e0:	eoreq	r0, r0, #1
   128e4:	tsteq	r0, #1
   128e8:	bne	12a00 <__assert_fail@plt+0x1acc>
   128ec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   128f0:	mov	sl, lr
   128f4:	tst	r0, #1
   128f8:	bne	129cc <__assert_fail@plt+0x1a98>
   128fc:	ldr	r6, [sp, #56]	; 0x38
   12900:	mov	r9, #0
   12904:	cmp	r6, #0
   12908:	beq	129f8 <__assert_fail@plt+0x1ac4>
   1290c:	ldr	r0, [sp, #84]	; 0x54
   12910:	mov	r1, #0
   12914:	mov	r7, #2
   12918:	cmp	r4, #0
   1291c:	str	r1, [fp, #-48]	; 0xffffffd0
   12920:	mov	r1, #0
   12924:	str	r1, [fp, #-76]	; 0xffffffb4
   12928:	beq	11ac8 <__assert_fail@plt+0xb94>
   1292c:	b	12a00 <__assert_fail@plt+0x1acc>
   12930:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12934:	ldr	r1, [fp, #12]
   12938:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1293c:	mov	lr, r4
   12940:	mov	r4, r6
   12944:	b	1298c <__assert_fail@plt+0x1a58>
   12948:	tst	ip, #1
   1294c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12950:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12954:	ldr	r1, [fp, #12]
   12958:	mov	r0, #2
   1295c:	movwne	r0, #4
   12960:	mov	r2, r0
   12964:	b	1298c <__assert_fail@plt+0x1a58>
   12968:	ldr	r4, [sp, #88]	; 0x58
   1296c:	ldr	r1, [sp, #84]	; 0x54
   12970:	mov	r0, #2
   12974:	tst	r1, #1
   12978:	movwne	r0, #4
   1297c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12980:	ldr	r1, [fp, #12]
   12984:	cmp	r2, #2
   12988:	moveq	r2, r0
   1298c:	mov	r0, #0
   12990:	bic	r1, r1, #2
   12994:	str	r2, [sp]
   12998:	mov	r2, ip
   1299c:	mov	r3, lr
   129a0:	str	r0, [sp, #8]
   129a4:	ldr	r0, [sp, #76]	; 0x4c
   129a8:	str	r1, [sp, #4]
   129ac:	mov	r1, r4
   129b0:	str	r0, [sp, #12]
   129b4:	ldr	r0, [sp, #80]	; 0x50
   129b8:	str	r0, [sp, #16]
   129bc:	mov	r0, r5
   129c0:	bl	11a38 <__assert_fail@plt+0xb04>
   129c4:	mov	r8, r0
   129c8:	b	12a4c <__assert_fail@plt+0x1b18>
   129cc:	mov	r0, #5
   129d0:	ldr	r1, [sp, #56]	; 0x38
   129d4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   129d8:	mov	r3, sl
   129dc:	str	r0, [sp]
   129e0:	ldr	r0, [fp, #12]
   129e4:	str	r0, [sp, #4]
   129e8:	ldr	r0, [fp, #16]
   129ec:	str	r0, [sp, #8]
   129f0:	ldr	r0, [sp, #76]	; 0x4c
   129f4:	b	129b0 <__assert_fail@plt+0x1a7c>
   129f8:	mov	r0, #0
   129fc:	str	r0, [fp, #-76]	; 0xffffffb4
   12a00:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12a04:	cmp	r1, #0
   12a08:	beq	12a40 <__assert_fail@plt+0x1b0c>
   12a0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a10:	tst	r0, #1
   12a14:	bne	12a40 <__assert_fail@plt+0x1b0c>
   12a18:	ldrb	r0, [r1]
   12a1c:	cmp	r0, #0
   12a20:	beq	12a40 <__assert_fail@plt+0x1b0c>
   12a24:	add	r1, r1, #1
   12a28:	cmp	r8, r4
   12a2c:	strbcc	r0, [r5, r8]
   12a30:	add	r8, r8, #1
   12a34:	ldrb	r0, [r1], #1
   12a38:	cmp	r0, #0
   12a3c:	bne	12a28 <__assert_fail@plt+0x1af4>
   12a40:	cmp	r8, r4
   12a44:	movcc	r0, #0
   12a48:	strbcc	r0, [r5, r8]
   12a4c:	mov	r0, r8
   12a50:	sub	sp, fp, #28
   12a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a58:	mov	r0, #4
   12a5c:	b	1297c <__assert_fail@plt+0x1a48>
   12a60:	bl	10f28 <abort@plt>
   12a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a68:	add	fp, sp, #28
   12a6c:	sub	sp, sp, #28
   12a70:	movw	r5, #24912	; 0x6150
   12a74:	cmp	r2, #0
   12a78:	mov	r4, r1
   12a7c:	mov	r7, r0
   12a80:	str	r0, [sp, #20]
   12a84:	movt	r5, #2
   12a88:	movne	r5, r2
   12a8c:	bl	10e8c <__errno_location@plt>
   12a90:	mov	sl, r0
   12a94:	ldr	r2, [r5, #40]	; 0x28
   12a98:	ldr	r3, [r5, #44]	; 0x2c
   12a9c:	ldm	r5, {r0, r1}
   12aa0:	orr	r8, r1, #1
   12aa4:	add	r9, r5, #8
   12aa8:	mov	r1, #0
   12aac:	ldr	r6, [sl]
   12ab0:	stm	sp, {r0, r8, r9}
   12ab4:	mov	r0, #0
   12ab8:	str	r2, [sp, #12]
   12abc:	str	r3, [sp, #16]
   12ac0:	mov	r2, r7
   12ac4:	mov	r3, r4
   12ac8:	str	r6, [sp, #24]
   12acc:	mov	r6, r4
   12ad0:	bl	11a38 <__assert_fail@plt+0xb04>
   12ad4:	add	r7, r0, #1
   12ad8:	mov	r0, r7
   12adc:	bl	13c84 <__assert_fail@plt+0x2d50>
   12ae0:	mov	r4, r0
   12ae4:	ldr	r0, [r5]
   12ae8:	ldr	r2, [r5, #44]	; 0x2c
   12aec:	ldr	r1, [r5, #40]	; 0x28
   12af0:	mov	r3, r6
   12af4:	stm	sp, {r0, r8, r9}
   12af8:	str	r2, [sp, #16]
   12afc:	ldr	r2, [sp, #20]
   12b00:	str	r1, [sp, #12]
   12b04:	mov	r0, r4
   12b08:	mov	r1, r7
   12b0c:	bl	11a38 <__assert_fail@plt+0xb04>
   12b10:	ldr	r0, [sp, #24]
   12b14:	str	r0, [sl]
   12b18:	mov	r0, r4
   12b1c:	sub	sp, fp, #28
   12b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b28:	add	fp, sp, #28
   12b2c:	sub	sp, sp, #36	; 0x24
   12b30:	movw	r8, #24912	; 0x6150
   12b34:	cmp	r3, #0
   12b38:	mov	r4, r2
   12b3c:	str	r2, [sp, #24]
   12b40:	mov	r5, r1
   12b44:	mov	r6, r0
   12b48:	str	r0, [sp, #20]
   12b4c:	movt	r8, #2
   12b50:	movne	r8, r3
   12b54:	bl	10e8c <__errno_location@plt>
   12b58:	str	r0, [sp, #28]
   12b5c:	ldr	r1, [r8, #40]	; 0x28
   12b60:	ldr	r2, [r8, #44]	; 0x2c
   12b64:	ldr	r7, [r0]
   12b68:	cmp	r4, #0
   12b6c:	add	sl, r8, #8
   12b70:	mov	r0, #0
   12b74:	ldm	r8, {r3, r9}
   12b78:	orreq	r9, r9, #1
   12b7c:	stm	sp, {r3, r9, sl}
   12b80:	str	r1, [sp, #12]
   12b84:	str	r2, [sp, #16]
   12b88:	mov	r1, #0
   12b8c:	mov	r2, r6
   12b90:	mov	r3, r5
   12b94:	str	r7, [sp, #32]
   12b98:	mov	r7, r5
   12b9c:	bl	11a38 <__assert_fail@plt+0xb04>
   12ba0:	add	r4, r0, #1
   12ba4:	mov	r5, r0
   12ba8:	mov	r0, r4
   12bac:	bl	13c84 <__assert_fail@plt+0x2d50>
   12bb0:	mov	r6, r0
   12bb4:	ldr	r0, [r8]
   12bb8:	ldr	r2, [r8, #44]	; 0x2c
   12bbc:	ldr	r1, [r8, #40]	; 0x28
   12bc0:	mov	r3, r7
   12bc4:	stm	sp, {r0, r9, sl}
   12bc8:	str	r2, [sp, #16]
   12bcc:	ldr	r2, [sp, #20]
   12bd0:	str	r1, [sp, #12]
   12bd4:	mov	r0, r6
   12bd8:	mov	r1, r4
   12bdc:	bl	11a38 <__assert_fail@plt+0xb04>
   12be0:	ldr	r0, [sp, #24]
   12be4:	ldr	r1, [sp, #32]
   12be8:	ldr	r2, [sp, #28]
   12bec:	cmp	r0, #0
   12bf0:	str	r1, [r2]
   12bf4:	strne	r5, [r0]
   12bf8:	mov	r0, r6
   12bfc:	sub	sp, fp, #28
   12c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c04:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c08:	add	fp, sp, #24
   12c0c:	movw	r5, #24804	; 0x60e4
   12c10:	movw	r8, #24800	; 0x60e0
   12c14:	movt	r5, #2
   12c18:	movt	r8, #2
   12c1c:	ldr	r0, [r5]
   12c20:	ldr	r4, [r8]
   12c24:	cmp	r0, #2
   12c28:	blt	12c54 <__assert_fail@plt+0x1d20>
   12c2c:	add	r7, r4, #12
   12c30:	mov	r6, #0
   12c34:	ldr	r0, [r7, r6, lsl #3]
   12c38:	bl	14f24 <__assert_fail@plt+0x3ff0>
   12c3c:	ldr	r1, [r5]
   12c40:	add	r2, r6, #2
   12c44:	add	r0, r6, #1
   12c48:	mov	r6, r0
   12c4c:	cmp	r2, r1
   12c50:	blt	12c34 <__assert_fail@plt+0x1d00>
   12c54:	ldr	r0, [r4, #4]
   12c58:	movw	r9, #24960	; 0x6180
   12c5c:	movw	r7, #24808	; 0x60e8
   12c60:	movt	r9, #2
   12c64:	movt	r7, #2
   12c68:	cmp	r0, r9
   12c6c:	beq	12c7c <__assert_fail@plt+0x1d48>
   12c70:	bl	14f24 <__assert_fail@plt+0x3ff0>
   12c74:	mov	r0, #256	; 0x100
   12c78:	stm	r7, {r0, r9}
   12c7c:	cmp	r4, r7
   12c80:	beq	12c90 <__assert_fail@plt+0x1d5c>
   12c84:	mov	r0, r4
   12c88:	bl	14f24 <__assert_fail@plt+0x3ff0>
   12c8c:	str	r7, [r8]
   12c90:	mov	r0, #1
   12c94:	str	r0, [r5]
   12c98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c9c:	movw	r3, #24912	; 0x6150
   12ca0:	mvn	r2, #0
   12ca4:	movt	r3, #2
   12ca8:	b	12cac <__assert_fail@plt+0x1d78>
   12cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cb0:	add	fp, sp, #28
   12cb4:	sub	sp, sp, #44	; 0x2c
   12cb8:	mov	r7, r3
   12cbc:	str	r2, [sp, #36]	; 0x24
   12cc0:	str	r1, [sp, #32]
   12cc4:	mov	r5, r0
   12cc8:	bl	10e8c <__errno_location@plt>
   12ccc:	cmp	r5, #0
   12cd0:	bmi	12e40 <__assert_fail@plt+0x1f0c>
   12cd4:	cmn	r5, #-2147483647	; 0x80000001
   12cd8:	beq	12e40 <__assert_fail@plt+0x1f0c>
   12cdc:	movw	r8, #24804	; 0x60e4
   12ce0:	movw	r4, #24800	; 0x60e0
   12ce4:	str	r0, [sp, #28]
   12ce8:	ldr	r0, [r0]
   12cec:	movt	r8, #2
   12cf0:	movt	r4, #2
   12cf4:	ldr	r1, [r8]
   12cf8:	ldr	r6, [r4]
   12cfc:	str	r0, [sp, #24]
   12d00:	cmp	r1, r5
   12d04:	ble	12d10 <__assert_fail@plt+0x1ddc>
   12d08:	mov	sl, r6
   12d0c:	b	12d7c <__assert_fail@plt+0x1e48>
   12d10:	movw	r9, #24808	; 0x60e8
   12d14:	mov	r0, #8
   12d18:	str	r1, [fp, #-32]	; 0xffffffe0
   12d1c:	sub	r1, r5, r1
   12d20:	mvn	r3, #-2147483648	; 0x80000000
   12d24:	movt	r9, #2
   12d28:	str	r0, [sp]
   12d2c:	add	r2, r1, #1
   12d30:	sub	r1, fp, #32
   12d34:	subs	r0, r6, r9
   12d38:	movne	r0, r6
   12d3c:	bl	13e84 <__assert_fail@plt+0x2f50>
   12d40:	mov	sl, r0
   12d44:	cmp	r6, r9
   12d48:	str	r0, [r4]
   12d4c:	bne	12d58 <__assert_fail@plt+0x1e24>
   12d50:	ldrd	r0, [r9]
   12d54:	stm	sl, {r0, r1}
   12d58:	ldr	r1, [r8]
   12d5c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d60:	add	r0, sl, r1, lsl #3
   12d64:	sub	r1, r2, r1
   12d68:	lsl	r2, r1, #3
   12d6c:	mov	r1, #0
   12d70:	bl	10ea4 <memset@plt>
   12d74:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d78:	str	r0, [r8]
   12d7c:	mov	r9, sl
   12d80:	ldm	r7, {r0, r1}
   12d84:	orr	r8, r1, #1
   12d88:	add	r1, r7, #8
   12d8c:	ldr	r2, [r7, #40]	; 0x28
   12d90:	ldr	r3, [r7, #44]	; 0x2c
   12d94:	ldr	r6, [r9, r5, lsl #3]!
   12d98:	str	r1, [sp, #20]
   12d9c:	ldr	r4, [r9, #4]!
   12da0:	stm	sp, {r0, r8}
   12da4:	add	r0, sp, #8
   12da8:	stm	r0, {r1, r2, r3}
   12dac:	ldr	r2, [sp, #32]
   12db0:	ldr	r3, [sp, #36]	; 0x24
   12db4:	mov	r1, r6
   12db8:	mov	r0, r4
   12dbc:	bl	11a38 <__assert_fail@plt+0xb04>
   12dc0:	cmp	r6, r0
   12dc4:	bhi	12e28 <__assert_fail@plt+0x1ef4>
   12dc8:	add	r6, r0, #1
   12dcc:	movw	r0, #24960	; 0x6180
   12dd0:	movt	r0, #2
   12dd4:	str	r6, [sl, r5, lsl #3]
   12dd8:	cmp	r4, r0
   12ddc:	beq	12de8 <__assert_fail@plt+0x1eb4>
   12de0:	mov	r0, r4
   12de4:	bl	14f24 <__assert_fail@plt+0x3ff0>
   12de8:	mov	r0, r6
   12dec:	bl	13c84 <__assert_fail@plt+0x2d50>
   12df0:	str	r0, [r9]
   12df4:	mov	r4, r0
   12df8:	add	r3, sp, #8
   12dfc:	ldr	r0, [r7]
   12e00:	ldr	r1, [r7, #40]	; 0x28
   12e04:	ldr	r2, [r7, #44]	; 0x2c
   12e08:	stm	sp, {r0, r8}
   12e0c:	ldr	r0, [sp, #20]
   12e10:	stm	r3, {r0, r1, r2}
   12e14:	ldr	r2, [sp, #32]
   12e18:	ldr	r3, [sp, #36]	; 0x24
   12e1c:	mov	r0, r4
   12e20:	mov	r1, r6
   12e24:	bl	11a38 <__assert_fail@plt+0xb04>
   12e28:	ldr	r0, [sp, #28]
   12e2c:	ldr	r1, [sp, #24]
   12e30:	str	r1, [r0]
   12e34:	mov	r0, r4
   12e38:	sub	sp, fp, #28
   12e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e40:	bl	10f28 <abort@plt>
   12e44:	movw	r3, #24912	; 0x6150
   12e48:	movt	r3, #2
   12e4c:	b	12cac <__assert_fail@plt+0x1d78>
   12e50:	movw	r3, #24912	; 0x6150
   12e54:	mov	r1, r0
   12e58:	mov	r0, #0
   12e5c:	mvn	r2, #0
   12e60:	movt	r3, #2
   12e64:	b	12cac <__assert_fail@plt+0x1d78>
   12e68:	movw	r3, #24912	; 0x6150
   12e6c:	mov	r2, r1
   12e70:	mov	r1, r0
   12e74:	mov	r0, #0
   12e78:	movt	r3, #2
   12e7c:	b	12cac <__assert_fail@plt+0x1d78>
   12e80:	push	{fp, lr}
   12e84:	mov	fp, sp
   12e88:	sub	sp, sp, #48	; 0x30
   12e8c:	vmov.i32	q8, #0	; 0x00000000
   12e90:	mov	ip, #32
   12e94:	mov	r3, sp
   12e98:	mov	lr, r2
   12e9c:	cmp	r1, #10
   12ea0:	add	r2, r3, #16
   12ea4:	vst1.64	{d16-d17}, [r3], ip
   12ea8:	vst1.64	{d16-d17}, [r2]
   12eac:	vst1.64	{d16-d17}, [r3]
   12eb0:	beq	12ed0 <__assert_fail@plt+0x1f9c>
   12eb4:	str	r1, [sp]
   12eb8:	mov	r3, sp
   12ebc:	mov	r1, lr
   12ec0:	mvn	r2, #0
   12ec4:	bl	12cac <__assert_fail@plt+0x1d78>
   12ec8:	mov	sp, fp
   12ecc:	pop	{fp, pc}
   12ed0:	bl	10f28 <abort@plt>
   12ed4:	push	{r4, sl, fp, lr}
   12ed8:	add	fp, sp, #8
   12edc:	sub	sp, sp, #48	; 0x30
   12ee0:	vmov.i32	q8, #0	; 0x00000000
   12ee4:	mov	ip, r3
   12ee8:	mov	r3, sp
   12eec:	mov	lr, #32
   12ef0:	cmp	r1, #10
   12ef4:	add	r4, r3, #16
   12ef8:	vst1.64	{d16-d17}, [r3], lr
   12efc:	vst1.64	{d16-d17}, [r4]
   12f00:	vst1.64	{d16-d17}, [r3]
   12f04:	beq	12f24 <__assert_fail@plt+0x1ff0>
   12f08:	str	r1, [sp]
   12f0c:	mov	r1, r2
   12f10:	mov	r3, sp
   12f14:	mov	r2, ip
   12f18:	bl	12cac <__assert_fail@plt+0x1d78>
   12f1c:	sub	sp, fp, #8
   12f20:	pop	{r4, sl, fp, pc}
   12f24:	bl	10f28 <abort@plt>
   12f28:	push	{fp, lr}
   12f2c:	mov	fp, sp
   12f30:	sub	sp, sp, #48	; 0x30
   12f34:	vmov.i32	q8, #0	; 0x00000000
   12f38:	mov	r3, sp
   12f3c:	mov	ip, #32
   12f40:	cmp	r0, #10
   12f44:	add	r2, r3, #16
   12f48:	vst1.64	{d16-d17}, [r3], ip
   12f4c:	vst1.64	{d16-d17}, [r2]
   12f50:	vst1.64	{d16-d17}, [r3]
   12f54:	beq	12f74 <__assert_fail@plt+0x2040>
   12f58:	str	r0, [sp]
   12f5c:	mov	r3, sp
   12f60:	mov	r0, #0
   12f64:	mvn	r2, #0
   12f68:	bl	12cac <__assert_fail@plt+0x1d78>
   12f6c:	mov	sp, fp
   12f70:	pop	{fp, pc}
   12f74:	bl	10f28 <abort@plt>
   12f78:	push	{fp, lr}
   12f7c:	mov	fp, sp
   12f80:	sub	sp, sp, #48	; 0x30
   12f84:	vmov.i32	q8, #0	; 0x00000000
   12f88:	mov	r3, sp
   12f8c:	mov	ip, #32
   12f90:	cmp	r0, #10
   12f94:	add	lr, r3, #16
   12f98:	vst1.64	{d16-d17}, [r3], ip
   12f9c:	vst1.64	{d16-d17}, [lr]
   12fa0:	vst1.64	{d16-d17}, [r3]
   12fa4:	beq	12fc0 <__assert_fail@plt+0x208c>
   12fa8:	str	r0, [sp]
   12fac:	mov	r3, sp
   12fb0:	mov	r0, #0
   12fb4:	bl	12cac <__assert_fail@plt+0x1d78>
   12fb8:	mov	sp, fp
   12fbc:	pop	{fp, pc}
   12fc0:	bl	10f28 <abort@plt>
   12fc4:	push	{r4, sl, fp, lr}
   12fc8:	add	fp, sp, #8
   12fcc:	sub	sp, sp, #48	; 0x30
   12fd0:	mov	lr, r0
   12fd4:	movw	r0, #24912	; 0x6150
   12fd8:	mov	ip, r1
   12fdc:	mov	r1, #32
   12fe0:	mov	r4, #1
   12fe4:	movt	r0, #2
   12fe8:	add	r3, r0, #16
   12fec:	vld1.64	{d16-d17}, [r0], r1
   12ff0:	vld1.64	{d20-d21}, [r0]
   12ff4:	vld1.64	{d18-d19}, [r3]
   12ff8:	mov	r3, sp
   12ffc:	add	r0, r3, #32
   13000:	add	r1, r3, #16
   13004:	vst1.64	{d20-d21}, [r0]
   13008:	mov	r0, #28
   1300c:	vst1.64	{d18-d19}, [r1]
   13010:	mov	r1, r3
   13014:	and	r0, r0, r2, lsr #3
   13018:	and	r2, r2, #31
   1301c:	vst1.64	{d16-d17}, [r1], r0
   13020:	ldr	r0, [r1, #8]
   13024:	bic	r4, r4, r0, lsr r2
   13028:	eor	r0, r0, r4, lsl r2
   1302c:	mov	r2, ip
   13030:	str	r0, [r1, #8]
   13034:	mov	r0, #0
   13038:	mov	r1, lr
   1303c:	bl	12cac <__assert_fail@plt+0x1d78>
   13040:	sub	sp, fp, #8
   13044:	pop	{r4, sl, fp, pc}
   13048:	push	{fp, lr}
   1304c:	mov	fp, sp
   13050:	sub	sp, sp, #48	; 0x30
   13054:	mov	ip, r0
   13058:	movw	r0, #24912	; 0x6150
   1305c:	mov	r2, #32
   13060:	movt	r0, #2
   13064:	add	r3, r0, #16
   13068:	vld1.64	{d16-d17}, [r0], r2
   1306c:	vld1.64	{d20-d21}, [r0]
   13070:	vld1.64	{d18-d19}, [r3]
   13074:	mov	r3, sp
   13078:	add	r0, r3, #32
   1307c:	add	r2, r3, #16
   13080:	vst1.64	{d20-d21}, [r0]
   13084:	mov	r0, #28
   13088:	vst1.64	{d18-d19}, [r2]
   1308c:	mov	r2, r3
   13090:	and	r0, r0, r1, lsr #3
   13094:	and	r1, r1, #31
   13098:	vst1.64	{d16-d17}, [r2], r0
   1309c:	mov	r0, #1
   130a0:	ldr	lr, [r2, #8]
   130a4:	bic	r0, r0, lr, lsr r1
   130a8:	eor	r0, lr, r0, lsl r1
   130ac:	mov	r1, ip
   130b0:	str	r0, [r2, #8]
   130b4:	mov	r0, #0
   130b8:	mvn	r2, #0
   130bc:	bl	12cac <__assert_fail@plt+0x1d78>
   130c0:	mov	sp, fp
   130c4:	pop	{fp, pc}
   130c8:	push	{fp, lr}
   130cc:	mov	fp, sp
   130d0:	sub	sp, sp, #48	; 0x30
   130d4:	mov	r1, r0
   130d8:	movw	r0, #24912	; 0x6150
   130dc:	mov	r3, #32
   130e0:	movt	r0, #2
   130e4:	add	r2, r0, #16
   130e8:	vld1.64	{d16-d17}, [r0], r3
   130ec:	mov	r3, sp
   130f0:	vld1.64	{d18-d19}, [r2]
   130f4:	vld1.64	{d20-d21}, [r0]
   130f8:	add	r2, r3, #16
   130fc:	add	r0, r3, #32
   13100:	vst1.64	{d18-d19}, [r2]
   13104:	vst1.64	{d20-d21}, [r0]
   13108:	mov	r0, #12
   1310c:	mov	r2, r3
   13110:	vst1.64	{d16-d17}, [r2], r0
   13114:	ldr	r0, [r2]
   13118:	orr	r0, r0, #67108864	; 0x4000000
   1311c:	str	r0, [r2]
   13120:	mov	r0, #0
   13124:	mvn	r2, #0
   13128:	bl	12cac <__assert_fail@plt+0x1d78>
   1312c:	mov	sp, fp
   13130:	pop	{fp, pc}
   13134:	push	{fp, lr}
   13138:	mov	fp, sp
   1313c:	sub	sp, sp, #48	; 0x30
   13140:	mov	ip, r1
   13144:	mov	r1, r0
   13148:	movw	r0, #24912	; 0x6150
   1314c:	mov	r2, #32
   13150:	movt	r0, #2
   13154:	add	r3, r0, #16
   13158:	vld1.64	{d16-d17}, [r0], r2
   1315c:	vld1.64	{d18-d19}, [r3]
   13160:	vld1.64	{d20-d21}, [r0]
   13164:	mov	r3, sp
   13168:	add	r2, r3, #16
   1316c:	add	r0, r3, #32
   13170:	vst1.64	{d18-d19}, [r2]
   13174:	vst1.64	{d20-d21}, [r0]
   13178:	mov	r0, #12
   1317c:	mov	r2, r3
   13180:	vst1.64	{d16-d17}, [r2], r0
   13184:	ldr	r0, [r2]
   13188:	orr	r0, r0, #67108864	; 0x4000000
   1318c:	str	r0, [r2]
   13190:	mov	r0, #0
   13194:	mov	r2, ip
   13198:	bl	12cac <__assert_fail@plt+0x1d78>
   1319c:	mov	sp, fp
   131a0:	pop	{fp, pc}
   131a4:	push	{r4, sl, fp, lr}
   131a8:	add	fp, sp, #8
   131ac:	sub	sp, sp, #96	; 0x60
   131b0:	vmov.i32	q8, #0	; 0x00000000
   131b4:	mov	ip, r2
   131b8:	mov	r2, sp
   131bc:	mov	r4, #28
   131c0:	cmp	r1, #10
   131c4:	mov	r3, r2
   131c8:	add	lr, r2, #16
   131cc:	vst1.64	{d16-d17}, [r3], r4
   131d0:	vst1.64	{d16-d17}, [lr]
   131d4:	vst1.32	{d16-d17}, [r3]
   131d8:	beq	13228 <__assert_fail@plt+0x22f4>
   131dc:	vld1.64	{d16-d17}, [r2], r4
   131e0:	vld1.64	{d18-d19}, [lr]
   131e4:	add	r3, sp, #48	; 0x30
   131e8:	vld1.32	{d20-d21}, [r2]
   131ec:	add	r2, r3, #20
   131f0:	add	r4, r3, #4
   131f4:	vst1.32	{d18-d19}, [r2]
   131f8:	add	r2, r3, #32
   131fc:	vst1.32	{d16-d17}, [r4]
   13200:	vst1.32	{d20-d21}, [r2]
   13204:	str	r1, [sp, #48]	; 0x30
   13208:	mvn	r2, #0
   1320c:	ldr	r1, [sp, #60]	; 0x3c
   13210:	orr	r1, r1, #67108864	; 0x4000000
   13214:	str	r1, [sp, #60]	; 0x3c
   13218:	mov	r1, ip
   1321c:	bl	12cac <__assert_fail@plt+0x1d78>
   13220:	sub	sp, fp, #8
   13224:	pop	{r4, sl, fp, pc}
   13228:	bl	10f28 <abort@plt>
   1322c:	push	{r4, r5, r6, sl, fp, lr}
   13230:	add	fp, sp, #16
   13234:	sub	sp, sp, #48	; 0x30
   13238:	mov	ip, r3
   1323c:	movw	r3, #24912	; 0x6150
   13240:	mov	r6, #32
   13244:	cmp	r1, #0
   13248:	mov	r4, sp
   1324c:	movt	r3, #2
   13250:	cmpne	r2, #0
   13254:	add	r5, r4, #16
   13258:	add	lr, r3, #16
   1325c:	vld1.64	{d16-d17}, [r3], r6
   13260:	vld1.64	{d18-d19}, [lr]
   13264:	vld1.64	{d20-d21}, [r3]
   13268:	mov	r3, #10
   1326c:	vst1.64	{d16-d17}, [r4], r6
   13270:	vst1.64	{d18-d19}, [r5]
   13274:	vst1.64	{d20-d21}, [r4]
   13278:	str	r3, [sp]
   1327c:	bne	13284 <__assert_fail@plt+0x2350>
   13280:	bl	10f28 <abort@plt>
   13284:	str	r2, [sp, #44]	; 0x2c
   13288:	str	r1, [sp, #40]	; 0x28
   1328c:	mov	r3, sp
   13290:	mov	r1, ip
   13294:	mvn	r2, #0
   13298:	bl	12cac <__assert_fail@plt+0x1d78>
   1329c:	sub	sp, fp, #16
   132a0:	pop	{r4, r5, r6, sl, fp, pc}
   132a4:	push	{r4, r5, r6, sl, fp, lr}
   132a8:	add	fp, sp, #16
   132ac:	sub	sp, sp, #48	; 0x30
   132b0:	mov	lr, r3
   132b4:	movw	r3, #24912	; 0x6150
   132b8:	mov	r6, #32
   132bc:	cmp	r1, #0
   132c0:	mov	r4, sp
   132c4:	movt	r3, #2
   132c8:	cmpne	r2, #0
   132cc:	add	r5, r4, #16
   132d0:	add	ip, r3, #16
   132d4:	vld1.64	{d16-d17}, [r3], r6
   132d8:	vld1.64	{d18-d19}, [ip]
   132dc:	vld1.64	{d20-d21}, [r3]
   132e0:	mov	r3, #10
   132e4:	vst1.64	{d16-d17}, [r4], r6
   132e8:	vst1.64	{d18-d19}, [r5]
   132ec:	vst1.64	{d20-d21}, [r4]
   132f0:	str	r3, [sp]
   132f4:	bne	132fc <__assert_fail@plt+0x23c8>
   132f8:	bl	10f28 <abort@plt>
   132fc:	ldr	ip, [fp, #8]
   13300:	str	r2, [sp, #44]	; 0x2c
   13304:	str	r1, [sp, #40]	; 0x28
   13308:	mov	r3, sp
   1330c:	mov	r1, lr
   13310:	mov	r2, ip
   13314:	bl	12cac <__assert_fail@plt+0x1d78>
   13318:	sub	sp, fp, #16
   1331c:	pop	{r4, r5, r6, sl, fp, pc}
   13320:	push	{r4, sl, fp, lr}
   13324:	add	fp, sp, #8
   13328:	sub	sp, sp, #48	; 0x30
   1332c:	movw	r3, #24912	; 0x6150
   13330:	mov	lr, #32
   13334:	mov	ip, r2
   13338:	cmp	r0, #0
   1333c:	movt	r3, #2
   13340:	cmpne	r1, #0
   13344:	add	r2, r3, #16
   13348:	vld1.64	{d16-d17}, [r3], lr
   1334c:	vld1.64	{d20-d21}, [r3]
   13350:	vld1.64	{d18-d19}, [r2]
   13354:	mov	r2, sp
   13358:	add	r4, r2, #16
   1335c:	vst1.64	{d16-d17}, [r2], lr
   13360:	vst1.64	{d20-d21}, [r2]
   13364:	mov	r2, #10
   13368:	vst1.64	{d18-d19}, [r4]
   1336c:	str	r2, [sp]
   13370:	bne	13378 <__assert_fail@plt+0x2444>
   13374:	bl	10f28 <abort@plt>
   13378:	str	r1, [sp, #44]	; 0x2c
   1337c:	str	r0, [sp, #40]	; 0x28
   13380:	mov	r3, sp
   13384:	mov	r0, #0
   13388:	mov	r1, ip
   1338c:	mvn	r2, #0
   13390:	bl	12cac <__assert_fail@plt+0x1d78>
   13394:	sub	sp, fp, #8
   13398:	pop	{r4, sl, fp, pc}
   1339c:	push	{r4, r5, fp, lr}
   133a0:	add	fp, sp, #8
   133a4:	sub	sp, sp, #48	; 0x30
   133a8:	mov	ip, r3
   133ac:	movw	r3, #24912	; 0x6150
   133b0:	mov	r4, #32
   133b4:	mov	lr, r2
   133b8:	cmp	r0, #0
   133bc:	movt	r3, #2
   133c0:	cmpne	r1, #0
   133c4:	add	r2, r3, #16
   133c8:	vld1.64	{d16-d17}, [r3], r4
   133cc:	vld1.64	{d20-d21}, [r3]
   133d0:	vld1.64	{d18-d19}, [r2]
   133d4:	mov	r2, sp
   133d8:	add	r5, r2, #16
   133dc:	vst1.64	{d16-d17}, [r2], r4
   133e0:	vst1.64	{d20-d21}, [r2]
   133e4:	mov	r2, #10
   133e8:	vst1.64	{d18-d19}, [r5]
   133ec:	str	r2, [sp]
   133f0:	bne	133f8 <__assert_fail@plt+0x24c4>
   133f4:	bl	10f28 <abort@plt>
   133f8:	str	r1, [sp, #44]	; 0x2c
   133fc:	str	r0, [sp, #40]	; 0x28
   13400:	mov	r3, sp
   13404:	mov	r0, #0
   13408:	mov	r1, lr
   1340c:	mov	r2, ip
   13410:	bl	12cac <__assert_fail@plt+0x1d78>
   13414:	sub	sp, fp, #8
   13418:	pop	{r4, r5, fp, pc}
   1341c:	movw	r3, #24816	; 0x60f0
   13420:	movt	r3, #2
   13424:	b	12cac <__assert_fail@plt+0x1d78>
   13428:	movw	r3, #24816	; 0x60f0
   1342c:	mov	r2, r1
   13430:	mov	r1, r0
   13434:	mov	r0, #0
   13438:	movt	r3, #2
   1343c:	b	12cac <__assert_fail@plt+0x1d78>
   13440:	movw	r3, #24816	; 0x60f0
   13444:	mvn	r2, #0
   13448:	movt	r3, #2
   1344c:	b	12cac <__assert_fail@plt+0x1d78>
   13450:	movw	r3, #24816	; 0x60f0
   13454:	mov	r1, r0
   13458:	mov	r0, #0
   1345c:	mvn	r2, #0
   13460:	movt	r3, #2
   13464:	b	12cac <__assert_fail@plt+0x1d78>
   13468:	push	{r4, r5, fp, lr}
   1346c:	add	fp, sp, #8
   13470:	mov	r5, r0
   13474:	mov	r4, r1
   13478:	mov	r0, #0
   1347c:	mov	r2, #5
   13480:	mov	r1, r5
   13484:	bl	10d84 <dcgettext@plt>
   13488:	cmp	r0, r5
   1348c:	popne	{r4, r5, fp, pc}
   13490:	bl	14ff4 <__assert_fail@plt+0x40c0>
   13494:	ldrb	r1, [r0]
   13498:	and	r1, r1, #223	; 0xdf
   1349c:	cmp	r1, #71	; 0x47
   134a0:	beq	13508 <__assert_fail@plt+0x25d4>
   134a4:	cmp	r1, #85	; 0x55
   134a8:	bne	13560 <__assert_fail@plt+0x262c>
   134ac:	ldrb	r1, [r0, #1]
   134b0:	and	r1, r1, #223	; 0xdf
   134b4:	cmp	r1, #84	; 0x54
   134b8:	bne	13560 <__assert_fail@plt+0x262c>
   134bc:	ldrb	r1, [r0, #2]
   134c0:	and	r1, r1, #223	; 0xdf
   134c4:	cmp	r1, #70	; 0x46
   134c8:	bne	13560 <__assert_fail@plt+0x262c>
   134cc:	ldrb	r1, [r0, #3]
   134d0:	cmp	r1, #45	; 0x2d
   134d4:	bne	13560 <__assert_fail@plt+0x262c>
   134d8:	ldrb	r1, [r0, #4]
   134dc:	cmp	r1, #56	; 0x38
   134e0:	bne	13560 <__assert_fail@plt+0x262c>
   134e4:	ldrb	r0, [r0, #5]
   134e8:	cmp	r0, #0
   134ec:	bne	13560 <__assert_fail@plt+0x262c>
   134f0:	ldrb	r1, [r5]
   134f4:	movw	r2, #22624	; 0x5860
   134f8:	movw	r0, #22628	; 0x5864
   134fc:	movt	r2, #1
   13500:	movt	r0, #1
   13504:	b	13590 <__assert_fail@plt+0x265c>
   13508:	ldrb	r1, [r0, #1]
   1350c:	and	r1, r1, #223	; 0xdf
   13510:	cmp	r1, #66	; 0x42
   13514:	bne	13560 <__assert_fail@plt+0x262c>
   13518:	ldrb	r1, [r0, #2]
   1351c:	cmp	r1, #49	; 0x31
   13520:	bne	13560 <__assert_fail@plt+0x262c>
   13524:	ldrb	r1, [r0, #3]
   13528:	cmp	r1, #56	; 0x38
   1352c:	bne	13560 <__assert_fail@plt+0x262c>
   13530:	ldrb	r1, [r0, #4]
   13534:	cmp	r1, #48	; 0x30
   13538:	bne	13560 <__assert_fail@plt+0x262c>
   1353c:	ldrb	r1, [r0, #5]
   13540:	cmp	r1, #51	; 0x33
   13544:	bne	13560 <__assert_fail@plt+0x262c>
   13548:	ldrb	r1, [r0, #6]
   1354c:	cmp	r1, #48	; 0x30
   13550:	bne	13560 <__assert_fail@plt+0x262c>
   13554:	ldrb	r0, [r0, #7]
   13558:	cmp	r0, #0
   1355c:	beq	1357c <__assert_fail@plt+0x2648>
   13560:	movw	r1, #22618	; 0x585a
   13564:	movw	r0, #22622	; 0x585e
   13568:	cmp	r4, #9
   1356c:	movt	r1, #1
   13570:	movt	r0, #1
   13574:	moveq	r0, r1
   13578:	pop	{r4, r5, fp, pc}
   1357c:	ldrb	r1, [r5]
   13580:	movw	r2, #22632	; 0x5868
   13584:	movw	r0, #22636	; 0x586c
   13588:	movt	r2, #1
   1358c:	movt	r0, #1
   13590:	cmp	r1, #96	; 0x60
   13594:	moveq	r0, r2
   13598:	pop	{r4, r5, fp, pc}
   1359c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135a0:	add	fp, sp, #24
   135a4:	sub	sp, sp, #32
   135a8:	ldr	r6, [fp, #12]
   135ac:	ldr	r7, [fp, #8]
   135b0:	mov	r4, r2
   135b4:	mov	r8, r0
   135b8:	cmp	r1, #0
   135bc:	beq	135e4 <__assert_fail@plt+0x26b0>
   135c0:	movw	r2, #22724	; 0x58c4
   135c4:	mov	r5, r1
   135c8:	str	r3, [sp, #4]
   135cc:	str	r4, [sp]
   135d0:	mov	r0, r8
   135d4:	mov	r1, #1
   135d8:	movt	r2, #1
   135dc:	mov	r3, r5
   135e0:	b	135fc <__assert_fail@plt+0x26c8>
   135e4:	movw	r2, #22736	; 0x58d0
   135e8:	str	r3, [sp]
   135ec:	mov	r0, r8
   135f0:	mov	r1, #1
   135f4:	mov	r3, r4
   135f8:	movt	r2, #1
   135fc:	bl	10ec8 <__fprintf_chk@plt>
   13600:	movw	r1, #22743	; 0x58d7
   13604:	mov	r0, #0
   13608:	mov	r2, #5
   1360c:	movt	r1, #1
   13610:	bl	10d84 <dcgettext@plt>
   13614:	movw	r2, #23461	; 0x5ba5
   13618:	mov	r3, r0
   1361c:	movw	r0, #2022	; 0x7e6
   13620:	mov	r1, #1
   13624:	movt	r2, #1
   13628:	str	r0, [sp]
   1362c:	mov	r0, r8
   13630:	bl	10ec8 <__fprintf_chk@plt>
   13634:	movw	r4, #22305	; 0x5721
   13638:	mov	r1, r8
   1363c:	movt	r4, #1
   13640:	mov	r0, r4
   13644:	bl	10d18 <fputs_unlocked@plt>
   13648:	movw	r1, #22747	; 0x58db
   1364c:	mov	r0, #0
   13650:	mov	r2, #5
   13654:	movt	r1, #1
   13658:	bl	10d84 <dcgettext@plt>
   1365c:	movw	r3, #22918	; 0x5986
   13660:	mov	r2, r0
   13664:	mov	r0, r8
   13668:	mov	r1, #1
   1366c:	movt	r3, #1
   13670:	bl	10ec8 <__fprintf_chk@plt>
   13674:	mov	r0, r4
   13678:	mov	r1, r8
   1367c:	bl	10d18 <fputs_unlocked@plt>
   13680:	cmp	r6, #9
   13684:	bhi	136c0 <__assert_fail@plt+0x278c>
   13688:	add	r0, pc, #0
   1368c:	ldr	pc, [r0, r6, lsl #2]
   13690:			; <UNDEFINED> instruction: 0x000136b8
   13694:	andeq	r3, r1, ip, asr #13
   13698:	strdeq	r3, [r1], -ip
   1369c:	andeq	r3, r1, r4, lsr #14
   136a0:	andeq	r3, r1, ip, asr #14
   136a4:	andeq	r3, r1, r4, ror r7
   136a8:	muleq	r1, ip, r7
   136ac:	ldrdeq	r3, [r1], -r4
   136b0:	andeq	r3, r1, r4, ror r8
   136b4:	andeq	r3, r1, ip, lsl r8
   136b8:	sub	sp, fp, #24
   136bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136c0:	movw	r1, #23271	; 0x5ae7
   136c4:	movt	r1, #1
   136c8:	b	13824 <__assert_fail@plt+0x28f0>
   136cc:	movw	r1, #22952	; 0x59a8
   136d0:	mov	r0, #0
   136d4:	mov	r2, #5
   136d8:	movt	r1, #1
   136dc:	bl	10d84 <dcgettext@plt>
   136e0:	ldr	r3, [r7]
   136e4:	mov	r2, r0
   136e8:	mov	r0, r8
   136ec:	mov	r1, #1
   136f0:	sub	sp, fp, #24
   136f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   136f8:	b	10ec8 <__fprintf_chk@plt>
   136fc:	movw	r1, #22968	; 0x59b8
   13700:	mov	r0, #0
   13704:	mov	r2, #5
   13708:	movt	r1, #1
   1370c:	bl	10d84 <dcgettext@plt>
   13710:	mov	r2, r0
   13714:	ldr	r3, [r7]
   13718:	ldr	r0, [r7, #4]
   1371c:	str	r0, [sp]
   13720:	b	13810 <__assert_fail@plt+0x28dc>
   13724:	movw	r1, #22991	; 0x59cf
   13728:	mov	r0, #0
   1372c:	mov	r2, #5
   13730:	movt	r1, #1
   13734:	bl	10d84 <dcgettext@plt>
   13738:	mov	r2, r0
   1373c:	ldr	r3, [r7]
   13740:	ldmib	r7, {r0, r1}
   13744:	stm	sp, {r0, r1}
   13748:	b	13810 <__assert_fail@plt+0x28dc>
   1374c:	movw	r1, #23019	; 0x59eb
   13750:	mov	r0, #0
   13754:	mov	r2, #5
   13758:	movt	r1, #1
   1375c:	bl	10d84 <dcgettext@plt>
   13760:	ldr	r3, [r7]
   13764:	mov	r2, r0
   13768:	ldmib	r7, {r0, r1, r7}
   1376c:	stm	sp, {r0, r1, r7}
   13770:	b	13810 <__assert_fail@plt+0x28dc>
   13774:	movw	r1, #23051	; 0x5a0b
   13778:	mov	r0, #0
   1377c:	mov	r2, #5
   13780:	movt	r1, #1
   13784:	bl	10d84 <dcgettext@plt>
   13788:	ldr	r3, [r7]
   1378c:	mov	r2, r0
   13790:	ldmib	r7, {r0, r1, r6, r7}
   13794:	stm	sp, {r0, r1, r6, r7}
   13798:	b	13810 <__assert_fail@plt+0x28dc>
   1379c:	movw	r1, #23087	; 0x5a2f
   137a0:	mov	r0, #0
   137a4:	mov	r2, #5
   137a8:	movt	r1, #1
   137ac:	bl	10d84 <dcgettext@plt>
   137b0:	mov	r2, r0
   137b4:	ldr	r3, [r7]
   137b8:	ldmib	r7, {r0, r1, r6}
   137bc:	ldr	r5, [r7, #16]
   137c0:	ldr	r7, [r7, #20]
   137c4:	stm	sp, {r0, r1, r6}
   137c8:	str	r5, [sp, #12]
   137cc:	str	r7, [sp, #16]
   137d0:	b	13810 <__assert_fail@plt+0x28dc>
   137d4:	movw	r1, #23127	; 0x5a57
   137d8:	mov	r0, #0
   137dc:	mov	r2, #5
   137e0:	movt	r1, #1
   137e4:	bl	10d84 <dcgettext@plt>
   137e8:	mov	r2, r0
   137ec:	ldr	r3, [r7]
   137f0:	ldmib	r7, {r0, r1, r6}
   137f4:	ldr	r5, [r7, #16]
   137f8:	ldr	r4, [r7, #20]
   137fc:	ldr	r7, [r7, #24]
   13800:	stm	sp, {r0, r1, r6}
   13804:	str	r5, [sp, #12]
   13808:	str	r4, [sp, #16]
   1380c:	str	r7, [sp, #20]
   13810:	mov	r0, r8
   13814:	mov	r1, #1
   13818:	b	138c4 <__assert_fail@plt+0x2990>
   1381c:	movw	r1, #23219	; 0x5ab3
   13820:	movt	r1, #1
   13824:	mov	r0, #0
   13828:	mov	r2, #5
   1382c:	bl	10d84 <dcgettext@plt>
   13830:	mov	ip, r0
   13834:	ldr	r3, [r7]
   13838:	ldr	r0, [r7, #4]
   1383c:	ldr	r1, [r7, #8]
   13840:	ldr	r6, [r7, #12]
   13844:	ldr	r5, [r7, #16]
   13848:	ldr	r4, [r7, #20]
   1384c:	ldr	r2, [r7, #24]
   13850:	ldr	lr, [r7, #28]
   13854:	ldr	r7, [r7, #32]
   13858:	stm	sp, {r0, r1, r6}
   1385c:	str	r5, [sp, #12]
   13860:	str	r4, [sp, #16]
   13864:	str	r2, [sp, #20]
   13868:	str	lr, [sp, #24]
   1386c:	str	r7, [sp, #28]
   13870:	b	138b8 <__assert_fail@plt+0x2984>
   13874:	movw	r1, #23171	; 0x5a83
   13878:	mov	r0, #0
   1387c:	mov	r2, #5
   13880:	movt	r1, #1
   13884:	bl	10d84 <dcgettext@plt>
   13888:	mov	ip, r0
   1388c:	ldr	r3, [r7]
   13890:	ldmib	r7, {r0, r1, r6}
   13894:	ldr	r5, [r7, #16]
   13898:	ldr	r4, [r7, #20]
   1389c:	ldr	r2, [r7, #24]
   138a0:	ldr	r7, [r7, #28]
   138a4:	stm	sp, {r0, r1, r6}
   138a8:	str	r5, [sp, #12]
   138ac:	str	r4, [sp, #16]
   138b0:	str	r2, [sp, #20]
   138b4:	str	r7, [sp, #24]
   138b8:	mov	r0, r8
   138bc:	mov	r1, #1
   138c0:	mov	r2, ip
   138c4:	bl	10ec8 <__fprintf_chk@plt>
   138c8:	sub	sp, fp, #24
   138cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138d0:	push	{r4, sl, fp, lr}
   138d4:	add	fp, sp, #8
   138d8:	sub	sp, sp, #8
   138dc:	ldr	ip, [fp, #8]
   138e0:	mov	lr, #0
   138e4:	ldr	r4, [ip, lr, lsl #2]
   138e8:	add	lr, lr, #1
   138ec:	cmp	r4, #0
   138f0:	bne	138e4 <__assert_fail@plt+0x29b0>
   138f4:	sub	r4, lr, #1
   138f8:	str	ip, [sp]
   138fc:	str	r4, [sp, #4]
   13900:	bl	1359c <__assert_fail@plt+0x2668>
   13904:	sub	sp, fp, #8
   13908:	pop	{r4, sl, fp, pc}
   1390c:	push	{fp, lr}
   13910:	mov	fp, sp
   13914:	sub	sp, sp, #48	; 0x30
   13918:	ldr	ip, [fp, #8]
   1391c:	ldr	lr, [ip]
   13920:	cmp	lr, #0
   13924:	str	lr, [sp, #8]
   13928:	beq	139c4 <__assert_fail@plt+0x2a90>
   1392c:	ldr	lr, [ip, #4]
   13930:	cmp	lr, #0
   13934:	str	lr, [sp, #12]
   13938:	beq	139cc <__assert_fail@plt+0x2a98>
   1393c:	ldr	lr, [ip, #8]
   13940:	cmp	lr, #0
   13944:	str	lr, [sp, #16]
   13948:	beq	139d4 <__assert_fail@plt+0x2aa0>
   1394c:	ldr	lr, [ip, #12]
   13950:	cmp	lr, #0
   13954:	str	lr, [sp, #20]
   13958:	beq	139dc <__assert_fail@plt+0x2aa8>
   1395c:	ldr	lr, [ip, #16]
   13960:	cmp	lr, #0
   13964:	str	lr, [sp, #24]
   13968:	beq	139e4 <__assert_fail@plt+0x2ab0>
   1396c:	ldr	lr, [ip, #20]
   13970:	cmp	lr, #0
   13974:	str	lr, [sp, #28]
   13978:	beq	139ec <__assert_fail@plt+0x2ab8>
   1397c:	ldr	lr, [ip, #24]
   13980:	cmp	lr, #0
   13984:	str	lr, [sp, #32]
   13988:	beq	139f4 <__assert_fail@plt+0x2ac0>
   1398c:	ldr	lr, [ip, #28]
   13990:	cmp	lr, #0
   13994:	str	lr, [sp, #36]	; 0x24
   13998:	beq	139fc <__assert_fail@plt+0x2ac8>
   1399c:	ldr	lr, [ip, #32]
   139a0:	cmp	lr, #0
   139a4:	str	lr, [sp, #40]	; 0x28
   139a8:	beq	13a04 <__assert_fail@plt+0x2ad0>
   139ac:	ldr	lr, [ip, #36]	; 0x24
   139b0:	mov	ip, #10
   139b4:	cmp	lr, #0
   139b8:	str	lr, [sp, #44]	; 0x2c
   139bc:	movweq	ip, #9
   139c0:	b	13a08 <__assert_fail@plt+0x2ad4>
   139c4:	mov	ip, #0
   139c8:	b	13a08 <__assert_fail@plt+0x2ad4>
   139cc:	mov	ip, #1
   139d0:	b	13a08 <__assert_fail@plt+0x2ad4>
   139d4:	mov	ip, #2
   139d8:	b	13a08 <__assert_fail@plt+0x2ad4>
   139dc:	mov	ip, #3
   139e0:	b	13a08 <__assert_fail@plt+0x2ad4>
   139e4:	mov	ip, #4
   139e8:	b	13a08 <__assert_fail@plt+0x2ad4>
   139ec:	mov	ip, #5
   139f0:	b	13a08 <__assert_fail@plt+0x2ad4>
   139f4:	mov	ip, #6
   139f8:	b	13a08 <__assert_fail@plt+0x2ad4>
   139fc:	mov	ip, #7
   13a00:	b	13a08 <__assert_fail@plt+0x2ad4>
   13a04:	mov	ip, #8
   13a08:	add	lr, sp, #8
   13a0c:	str	ip, [sp, #4]
   13a10:	str	lr, [sp]
   13a14:	bl	1359c <__assert_fail@plt+0x2668>
   13a18:	mov	sp, fp
   13a1c:	pop	{fp, pc}
   13a20:	push	{fp, lr}
   13a24:	mov	fp, sp
   13a28:	sub	sp, sp, #56	; 0x38
   13a2c:	add	ip, fp, #8
   13a30:	str	ip, [sp, #12]
   13a34:	ldr	lr, [fp, #8]
   13a38:	cmp	lr, #0
   13a3c:	str	lr, [sp, #16]
   13a40:	beq	13adc <__assert_fail@plt+0x2ba8>
   13a44:	ldr	lr, [ip, #4]
   13a48:	cmp	lr, #0
   13a4c:	str	lr, [sp, #20]
   13a50:	beq	13ae4 <__assert_fail@plt+0x2bb0>
   13a54:	ldr	lr, [ip, #8]
   13a58:	cmp	lr, #0
   13a5c:	str	lr, [sp, #24]
   13a60:	beq	13aec <__assert_fail@plt+0x2bb8>
   13a64:	ldr	lr, [ip, #12]
   13a68:	cmp	lr, #0
   13a6c:	str	lr, [sp, #28]
   13a70:	beq	13af4 <__assert_fail@plt+0x2bc0>
   13a74:	ldr	lr, [ip, #16]
   13a78:	cmp	lr, #0
   13a7c:	str	lr, [sp, #32]
   13a80:	beq	13afc <__assert_fail@plt+0x2bc8>
   13a84:	ldr	lr, [ip, #20]
   13a88:	cmp	lr, #0
   13a8c:	str	lr, [sp, #36]	; 0x24
   13a90:	beq	13b04 <__assert_fail@plt+0x2bd0>
   13a94:	ldr	lr, [ip, #24]
   13a98:	cmp	lr, #0
   13a9c:	str	lr, [sp, #40]	; 0x28
   13aa0:	beq	13b0c <__assert_fail@plt+0x2bd8>
   13aa4:	ldr	lr, [ip, #28]
   13aa8:	cmp	lr, #0
   13aac:	str	lr, [sp, #44]	; 0x2c
   13ab0:	beq	13b14 <__assert_fail@plt+0x2be0>
   13ab4:	ldr	lr, [ip, #32]
   13ab8:	cmp	lr, #0
   13abc:	str	lr, [sp, #48]	; 0x30
   13ac0:	beq	13b1c <__assert_fail@plt+0x2be8>
   13ac4:	ldr	lr, [ip, #36]	; 0x24
   13ac8:	mov	ip, #10
   13acc:	cmp	lr, #0
   13ad0:	str	lr, [sp, #52]	; 0x34
   13ad4:	movweq	ip, #9
   13ad8:	b	13b20 <__assert_fail@plt+0x2bec>
   13adc:	mov	ip, #0
   13ae0:	b	13b20 <__assert_fail@plt+0x2bec>
   13ae4:	mov	ip, #1
   13ae8:	b	13b20 <__assert_fail@plt+0x2bec>
   13aec:	mov	ip, #2
   13af0:	b	13b20 <__assert_fail@plt+0x2bec>
   13af4:	mov	ip, #3
   13af8:	b	13b20 <__assert_fail@plt+0x2bec>
   13afc:	mov	ip, #4
   13b00:	b	13b20 <__assert_fail@plt+0x2bec>
   13b04:	mov	ip, #5
   13b08:	b	13b20 <__assert_fail@plt+0x2bec>
   13b0c:	mov	ip, #6
   13b10:	b	13b20 <__assert_fail@plt+0x2bec>
   13b14:	mov	ip, #7
   13b18:	b	13b20 <__assert_fail@plt+0x2bec>
   13b1c:	mov	ip, #8
   13b20:	add	lr, sp, #16
   13b24:	str	ip, [sp, #4]
   13b28:	str	lr, [sp]
   13b2c:	bl	1359c <__assert_fail@plt+0x2668>
   13b30:	mov	sp, fp
   13b34:	pop	{fp, pc}
   13b38:	push	{fp, lr}
   13b3c:	mov	fp, sp
   13b40:	movw	r0, #24884	; 0x6134
   13b44:	movt	r0, #2
   13b48:	ldr	r1, [r0]
   13b4c:	movw	r0, #22305	; 0x5721
   13b50:	movt	r0, #1
   13b54:	bl	10d18 <fputs_unlocked@plt>
   13b58:	movw	r1, #23331	; 0x5b23
   13b5c:	mov	r0, #0
   13b60:	mov	r2, #5
   13b64:	movt	r1, #1
   13b68:	bl	10d84 <dcgettext@plt>
   13b6c:	movw	r2, #23351	; 0x5b37
   13b70:	mov	r1, r0
   13b74:	mov	r0, #1
   13b78:	movt	r2, #1
   13b7c:	bl	10eb0 <__printf_chk@plt>
   13b80:	movw	r1, #23373	; 0x5b4d
   13b84:	mov	r0, #0
   13b88:	mov	r2, #5
   13b8c:	movt	r1, #1
   13b90:	bl	10d84 <dcgettext@plt>
   13b94:	movw	r2, #21782	; 0x5516
   13b98:	movw	r3, #22114	; 0x5662
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #1
   13ba4:	movt	r2, #1
   13ba8:	movt	r3, #1
   13bac:	bl	10eb0 <__printf_chk@plt>
   13bb0:	movw	r1, #23393	; 0x5b61
   13bb4:	mov	r0, #0
   13bb8:	mov	r2, #5
   13bbc:	movt	r1, #1
   13bc0:	bl	10d84 <dcgettext@plt>
   13bc4:	movw	r2, #23432	; 0x5b88
   13bc8:	mov	r1, r0
   13bcc:	mov	r0, #1
   13bd0:	movt	r2, #1
   13bd4:	pop	{fp, lr}
   13bd8:	b	10eb0 <__printf_chk@plt>
   13bdc:	push	{r4, r5, r6, sl, fp, lr}
   13be0:	add	fp, sp, #16
   13be4:	mov	r4, r2
   13be8:	mov	r5, r1
   13bec:	mov	r6, r0
   13bf0:	bl	15090 <__assert_fail@plt+0x415c>
   13bf4:	cmp	r0, #0
   13bf8:	popne	{r4, r5, r6, sl, fp, pc}
   13bfc:	cmp	r6, #0
   13c00:	beq	13c14 <__assert_fail@plt+0x2ce0>
   13c04:	cmp	r5, #0
   13c08:	cmpne	r4, #0
   13c0c:	bne	13c14 <__assert_fail@plt+0x2ce0>
   13c10:	pop	{r4, r5, r6, sl, fp, pc}
   13c14:	bl	14190 <__assert_fail@plt+0x325c>
   13c18:	push	{r4, r5, r6, sl, fp, lr}
   13c1c:	add	fp, sp, #16
   13c20:	mov	r4, r2
   13c24:	mov	r5, r1
   13c28:	mov	r6, r0
   13c2c:	bl	15090 <__assert_fail@plt+0x415c>
   13c30:	cmp	r0, #0
   13c34:	popne	{r4, r5, r6, sl, fp, pc}
   13c38:	cmp	r6, #0
   13c3c:	beq	13c50 <__assert_fail@plt+0x2d1c>
   13c40:	cmp	r5, #0
   13c44:	cmpne	r4, #0
   13c48:	bne	13c50 <__assert_fail@plt+0x2d1c>
   13c4c:	pop	{r4, r5, r6, sl, fp, pc}
   13c50:	bl	14190 <__assert_fail@plt+0x325c>
   13c54:	push	{fp, lr}
   13c58:	mov	fp, sp
   13c5c:	bl	14d24 <__assert_fail@plt+0x3df0>
   13c60:	cmp	r0, #0
   13c64:	popne	{fp, pc}
   13c68:	bl	14190 <__assert_fail@plt+0x325c>
   13c6c:	push	{fp, lr}
   13c70:	mov	fp, sp
   13c74:	bl	14d24 <__assert_fail@plt+0x3df0>
   13c78:	cmp	r0, #0
   13c7c:	popne	{fp, pc}
   13c80:	bl	14190 <__assert_fail@plt+0x325c>
   13c84:	push	{fp, lr}
   13c88:	mov	fp, sp
   13c8c:	bl	14d24 <__assert_fail@plt+0x3df0>
   13c90:	cmp	r0, #0
   13c94:	popne	{fp, pc}
   13c98:	bl	14190 <__assert_fail@plt+0x325c>
   13c9c:	push	{r4, r5, fp, lr}
   13ca0:	add	fp, sp, #8
   13ca4:	mov	r4, r1
   13ca8:	mov	r5, r0
   13cac:	bl	14d54 <__assert_fail@plt+0x3e20>
   13cb0:	cmp	r0, #0
   13cb4:	popne	{r4, r5, fp, pc}
   13cb8:	cmp	r5, #0
   13cbc:	beq	13ccc <__assert_fail@plt+0x2d98>
   13cc0:	cmp	r4, #0
   13cc4:	bne	13ccc <__assert_fail@plt+0x2d98>
   13cc8:	pop	{r4, r5, fp, pc}
   13ccc:	bl	14190 <__assert_fail@plt+0x325c>
   13cd0:	push	{fp, lr}
   13cd4:	mov	fp, sp
   13cd8:	cmp	r1, #0
   13cdc:	orreq	r1, r1, #1
   13ce0:	bl	14d54 <__assert_fail@plt+0x3e20>
   13ce4:	cmp	r0, #0
   13ce8:	popne	{fp, pc}
   13cec:	bl	14190 <__assert_fail@plt+0x325c>
   13cf0:	push	{fp, lr}
   13cf4:	mov	fp, sp
   13cf8:	clz	r3, r2
   13cfc:	lsr	ip, r3, #5
   13d00:	clz	r3, r1
   13d04:	lsr	r3, r3, #5
   13d08:	orrs	r3, r3, ip
   13d0c:	movwne	r1, #1
   13d10:	movwne	r2, #1
   13d14:	bl	15090 <__assert_fail@plt+0x415c>
   13d18:	cmp	r0, #0
   13d1c:	popne	{fp, pc}
   13d20:	bl	14190 <__assert_fail@plt+0x325c>
   13d24:	push	{fp, lr}
   13d28:	mov	fp, sp
   13d2c:	mov	r2, r1
   13d30:	mov	r1, r0
   13d34:	mov	r0, #0
   13d38:	bl	15090 <__assert_fail@plt+0x415c>
   13d3c:	cmp	r0, #0
   13d40:	popne	{fp, pc}
   13d44:	bl	14190 <__assert_fail@plt+0x325c>
   13d48:	push	{fp, lr}
   13d4c:	mov	fp, sp
   13d50:	mov	r2, r1
   13d54:	mov	r1, r0
   13d58:	clz	r0, r2
   13d5c:	clz	r3, r1
   13d60:	lsr	r0, r0, #5
   13d64:	lsr	r3, r3, #5
   13d68:	orrs	r0, r3, r0
   13d6c:	mov	r0, #0
   13d70:	movwne	r1, #1
   13d74:	movwne	r2, #1
   13d78:	bl	15090 <__assert_fail@plt+0x415c>
   13d7c:	cmp	r0, #0
   13d80:	popne	{fp, pc}
   13d84:	bl	14190 <__assert_fail@plt+0x325c>
   13d88:	push	{r4, r5, r6, sl, fp, lr}
   13d8c:	add	fp, sp, #16
   13d90:	ldr	r5, [r1]
   13d94:	mov	r4, r1
   13d98:	mov	r6, r0
   13d9c:	cmp	r0, #0
   13da0:	beq	13db8 <__assert_fail@plt+0x2e84>
   13da4:	mov	r0, #1
   13da8:	add	r0, r0, r5, lsr #1
   13dac:	adds	r5, r5, r0
   13db0:	bcc	13dc0 <__assert_fail@plt+0x2e8c>
   13db4:	b	13dfc <__assert_fail@plt+0x2ec8>
   13db8:	cmp	r5, #0
   13dbc:	movweq	r5, #64	; 0x40
   13dc0:	mov	r0, r6
   13dc4:	mov	r1, r5
   13dc8:	mov	r2, #1
   13dcc:	bl	15090 <__assert_fail@plt+0x415c>
   13dd0:	cmp	r5, #0
   13dd4:	mov	r1, r5
   13dd8:	movwne	r1, #1
   13ddc:	cmp	r0, #0
   13de0:	bne	13df4 <__assert_fail@plt+0x2ec0>
   13de4:	clz	r2, r6
   13de8:	lsr	r2, r2, #5
   13dec:	orrs	r1, r2, r1
   13df0:	bne	13dfc <__assert_fail@plt+0x2ec8>
   13df4:	str	r5, [r4]
   13df8:	pop	{r4, r5, r6, sl, fp, pc}
   13dfc:	bl	14190 <__assert_fail@plt+0x325c>
   13e00:	push	{r4, r5, r6, r7, fp, lr}
   13e04:	add	fp, sp, #16
   13e08:	ldr	r5, [r1]
   13e0c:	mov	r6, r2
   13e10:	mov	r4, r1
   13e14:	mov	r7, r0
   13e18:	cmp	r0, #0
   13e1c:	beq	13e34 <__assert_fail@plt+0x2f00>
   13e20:	mov	r0, #1
   13e24:	add	r0, r0, r5, lsr #1
   13e28:	adds	r5, r5, r0
   13e2c:	bcc	13e4c <__assert_fail@plt+0x2f18>
   13e30:	b	13e80 <__assert_fail@plt+0x2f4c>
   13e34:	cmp	r5, #0
   13e38:	bne	13e4c <__assert_fail@plt+0x2f18>
   13e3c:	mov	r0, #64	; 0x40
   13e40:	cmp	r6, #64	; 0x40
   13e44:	udiv	r5, r0, r6
   13e48:	addhi	r5, r5, #1
   13e4c:	mov	r0, r7
   13e50:	mov	r1, r5
   13e54:	mov	r2, r6
   13e58:	bl	15090 <__assert_fail@plt+0x415c>
   13e5c:	cmp	r0, #0
   13e60:	bne	13e78 <__assert_fail@plt+0x2f44>
   13e64:	cmp	r7, #0
   13e68:	beq	13e80 <__assert_fail@plt+0x2f4c>
   13e6c:	cmp	r6, #0
   13e70:	cmpne	r5, #0
   13e74:	bne	13e80 <__assert_fail@plt+0x2f4c>
   13e78:	str	r5, [r4]
   13e7c:	pop	{r4, r5, r6, r7, fp, pc}
   13e80:	bl	14190 <__assert_fail@plt+0x325c>
   13e84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e88:	add	fp, sp, #24
   13e8c:	mov	r8, r1
   13e90:	ldr	r1, [r1]
   13e94:	mov	r5, r0
   13e98:	add	r0, r1, r1, asr #1
   13e9c:	cmp	r0, r1
   13ea0:	mvnvs	r0, #-2147483648	; 0x80000000
   13ea4:	cmp	r0, r3
   13ea8:	mov	r7, r0
   13eac:	movgt	r7, r3
   13eb0:	cmn	r3, #1
   13eb4:	movle	r7, r0
   13eb8:	ldr	r0, [fp, #8]
   13ebc:	cmn	r0, #1
   13ec0:	ble	13ee8 <__assert_fail@plt+0x2fb4>
   13ec4:	cmp	r0, #0
   13ec8:	beq	13f3c <__assert_fail@plt+0x3008>
   13ecc:	cmn	r7, #1
   13ed0:	ble	13f10 <__assert_fail@plt+0x2fdc>
   13ed4:	mvn	r4, #-2147483648	; 0x80000000
   13ed8:	udiv	r6, r4, r0
   13edc:	cmp	r6, r7
   13ee0:	bge	13f3c <__assert_fail@plt+0x3008>
   13ee4:	b	13f4c <__assert_fail@plt+0x3018>
   13ee8:	cmn	r7, #1
   13eec:	ble	13f2c <__assert_fail@plt+0x2ff8>
   13ef0:	cmn	r0, #1
   13ef4:	beq	13f3c <__assert_fail@plt+0x3008>
   13ef8:	mov	r6, #-2147483648	; 0x80000000
   13efc:	mvn	r4, #-2147483648	; 0x80000000
   13f00:	sdiv	r6, r6, r0
   13f04:	cmp	r6, r7
   13f08:	bge	13f3c <__assert_fail@plt+0x3008>
   13f0c:	b	13f4c <__assert_fail@plt+0x3018>
   13f10:	beq	13f3c <__assert_fail@plt+0x3008>
   13f14:	mov	r6, #-2147483648	; 0x80000000
   13f18:	mvn	r4, #-2147483648	; 0x80000000
   13f1c:	sdiv	r6, r6, r7
   13f20:	cmp	r6, r0
   13f24:	bge	13f3c <__assert_fail@plt+0x3008>
   13f28:	b	13f4c <__assert_fail@plt+0x3018>
   13f2c:	mvn	r4, #-2147483648	; 0x80000000
   13f30:	sdiv	r6, r4, r0
   13f34:	cmp	r7, r6
   13f38:	blt	13f4c <__assert_fail@plt+0x3018>
   13f3c:	mul	r6, r7, r0
   13f40:	mov	r4, #64	; 0x40
   13f44:	cmp	r6, #63	; 0x3f
   13f48:	bgt	13f54 <__assert_fail@plt+0x3020>
   13f4c:	sdiv	r7, r4, r0
   13f50:	mul	r6, r7, r0
   13f54:	cmp	r5, #0
   13f58:	moveq	r4, #0
   13f5c:	streq	r4, [r8]
   13f60:	sub	r4, r7, r1
   13f64:	cmp	r4, r2
   13f68:	bge	14014 <__assert_fail@plt+0x30e0>
   13f6c:	add	r7, r1, r2
   13f70:	mov	r6, #0
   13f74:	mov	r2, #0
   13f78:	cmp	r7, r3
   13f7c:	movwgt	r6, #1
   13f80:	cmn	r3, #1
   13f84:	movwgt	r2, #1
   13f88:	cmp	r7, r1
   13f8c:	bvs	14048 <__assert_fail@plt+0x3114>
   13f90:	ands	r1, r2, r6
   13f94:	bne	14048 <__assert_fail@plt+0x3114>
   13f98:	cmn	r0, #1
   13f9c:	ble	13fc4 <__assert_fail@plt+0x3090>
   13fa0:	cmp	r0, #0
   13fa4:	beq	14010 <__assert_fail@plt+0x30dc>
   13fa8:	cmn	r7, #1
   13fac:	ble	13fe8 <__assert_fail@plt+0x30b4>
   13fb0:	mvn	r1, #-2147483648	; 0x80000000
   13fb4:	udiv	r1, r1, r0
   13fb8:	cmp	r1, r7
   13fbc:	bge	14010 <__assert_fail@plt+0x30dc>
   13fc0:	b	14048 <__assert_fail@plt+0x3114>
   13fc4:	cmn	r7, #1
   13fc8:	ble	14000 <__assert_fail@plt+0x30cc>
   13fcc:	cmn	r0, #1
   13fd0:	beq	14010 <__assert_fail@plt+0x30dc>
   13fd4:	mov	r1, #-2147483648	; 0x80000000
   13fd8:	sdiv	r1, r1, r0
   13fdc:	cmp	r1, r7
   13fe0:	bge	14010 <__assert_fail@plt+0x30dc>
   13fe4:	b	14048 <__assert_fail@plt+0x3114>
   13fe8:	beq	14010 <__assert_fail@plt+0x30dc>
   13fec:	mov	r1, #-2147483648	; 0x80000000
   13ff0:	sdiv	r1, r1, r7
   13ff4:	cmp	r1, r0
   13ff8:	bge	14010 <__assert_fail@plt+0x30dc>
   13ffc:	b	14048 <__assert_fail@plt+0x3114>
   14000:	mvn	r1, #-2147483648	; 0x80000000
   14004:	sdiv	r1, r1, r0
   14008:	cmp	r7, r1
   1400c:	blt	14048 <__assert_fail@plt+0x3114>
   14010:	mul	r6, r7, r0
   14014:	mov	r0, r5
   14018:	mov	r1, r6
   1401c:	bl	14d54 <__assert_fail@plt+0x3e20>
   14020:	cmp	r6, #0
   14024:	movwne	r6, #1
   14028:	cmp	r0, #0
   1402c:	bne	14040 <__assert_fail@plt+0x310c>
   14030:	clz	r1, r5
   14034:	lsr	r1, r1, #5
   14038:	orrs	r1, r1, r6
   1403c:	bne	14048 <__assert_fail@plt+0x3114>
   14040:	str	r7, [r8]
   14044:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14048:	bl	14190 <__assert_fail@plt+0x325c>
   1404c:	push	{fp, lr}
   14050:	mov	fp, sp
   14054:	mov	r1, #1
   14058:	bl	14cd0 <__assert_fail@plt+0x3d9c>
   1405c:	cmp	r0, #0
   14060:	popne	{fp, pc}
   14064:	bl	14190 <__assert_fail@plt+0x325c>
   14068:	push	{fp, lr}
   1406c:	mov	fp, sp
   14070:	bl	14cd0 <__assert_fail@plt+0x3d9c>
   14074:	cmp	r0, #0
   14078:	popne	{fp, pc}
   1407c:	bl	14190 <__assert_fail@plt+0x325c>
   14080:	push	{fp, lr}
   14084:	mov	fp, sp
   14088:	mov	r1, #1
   1408c:	bl	14cd0 <__assert_fail@plt+0x3d9c>
   14090:	cmp	r0, #0
   14094:	popne	{fp, pc}
   14098:	bl	14190 <__assert_fail@plt+0x325c>
   1409c:	push	{fp, lr}
   140a0:	mov	fp, sp
   140a4:	bl	14cd0 <__assert_fail@plt+0x3d9c>
   140a8:	cmp	r0, #0
   140ac:	popne	{fp, pc}
   140b0:	bl	14190 <__assert_fail@plt+0x325c>
   140b4:	push	{r4, r5, fp, lr}
   140b8:	add	fp, sp, #8
   140bc:	mov	r5, r0
   140c0:	mov	r0, r1
   140c4:	mov	r4, r1
   140c8:	bl	14d24 <__assert_fail@plt+0x3df0>
   140cc:	cmp	r0, #0
   140d0:	beq	140e4 <__assert_fail@plt+0x31b0>
   140d4:	mov	r1, r5
   140d8:	mov	r2, r4
   140dc:	pop	{r4, r5, fp, lr}
   140e0:	b	10d60 <memcpy@plt>
   140e4:	bl	14190 <__assert_fail@plt+0x325c>
   140e8:	push	{r4, r5, fp, lr}
   140ec:	add	fp, sp, #8
   140f0:	mov	r5, r0
   140f4:	mov	r0, r1
   140f8:	mov	r4, r1
   140fc:	bl	14d24 <__assert_fail@plt+0x3df0>
   14100:	cmp	r0, #0
   14104:	beq	14118 <__assert_fail@plt+0x31e4>
   14108:	mov	r1, r5
   1410c:	mov	r2, r4
   14110:	pop	{r4, r5, fp, lr}
   14114:	b	10d60 <memcpy@plt>
   14118:	bl	14190 <__assert_fail@plt+0x325c>
   1411c:	push	{r4, r5, fp, lr}
   14120:	add	fp, sp, #8
   14124:	mov	r5, r0
   14128:	add	r0, r1, #1
   1412c:	mov	r4, r1
   14130:	bl	14d24 <__assert_fail@plt+0x3df0>
   14134:	cmp	r0, #0
   14138:	beq	14154 <__assert_fail@plt+0x3220>
   1413c:	mov	r1, #0
   14140:	mov	r2, r4
   14144:	strb	r1, [r0, r4]
   14148:	mov	r1, r5
   1414c:	pop	{r4, r5, fp, lr}
   14150:	b	10d60 <memcpy@plt>
   14154:	bl	14190 <__assert_fail@plt+0x325c>
   14158:	push	{r4, r5, fp, lr}
   1415c:	add	fp, sp, #8
   14160:	mov	r4, r0
   14164:	bl	10e74 <strlen@plt>
   14168:	add	r5, r0, #1
   1416c:	mov	r0, r5
   14170:	bl	14d24 <__assert_fail@plt+0x3df0>
   14174:	cmp	r0, #0
   14178:	beq	1418c <__assert_fail@plt+0x3258>
   1417c:	mov	r1, r4
   14180:	mov	r2, r5
   14184:	pop	{r4, r5, fp, lr}
   14188:	b	10d60 <memcpy@plt>
   1418c:	bl	14190 <__assert_fail@plt+0x325c>
   14190:	push	{fp, lr}
   14194:	mov	fp, sp
   14198:	movw	r0, #24796	; 0x60dc
   1419c:	movw	r1, #23508	; 0x5bd4
   141a0:	mov	r2, #5
   141a4:	movt	r0, #2
   141a8:	movt	r1, #1
   141ac:	ldr	r4, [r0]
   141b0:	mov	r0, #0
   141b4:	bl	10d84 <dcgettext@plt>
   141b8:	movw	r2, #22471	; 0x57c7
   141bc:	mov	r3, r0
   141c0:	mov	r0, r4
   141c4:	mov	r1, #0
   141c8:	movt	r2, #1
   141cc:	bl	10dfc <error@plt>
   141d0:	bl	10f28 <abort@plt>
   141d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d8:	add	fp, sp, #28
   141dc:	sub	sp, sp, #12
   141e0:	cmp	r2, #37	; 0x25
   141e4:	bcs	14cb0 <__assert_fail@plt+0x3d7c>
   141e8:	ldr	r8, [fp, #8]
   141ec:	mov	r9, r3
   141f0:	mov	r7, r2
   141f4:	mov	r4, r1
   141f8:	mov	r5, r0
   141fc:	bl	10e8c <__errno_location@plt>
   14200:	cmp	r4, #0
   14204:	add	sl, sp, #8
   14208:	mov	r6, r0
   1420c:	mov	r0, #0
   14210:	mov	r2, r7
   14214:	movne	sl, r4
   14218:	str	r0, [r6]
   1421c:	mov	r0, r5
   14220:	mov	r1, sl
   14224:	bl	10d30 <strtol@plt>
   14228:	ldr	r4, [sl]
   1422c:	str	r9, [sp, #4]
   14230:	cmp	r4, r5
   14234:	beq	14264 <__assert_fail@plt+0x3330>
   14238:	mov	r7, r0
   1423c:	ldr	r0, [r6]
   14240:	cmp	r0, #0
   14244:	beq	14298 <__assert_fail@plt+0x3364>
   14248:	mov	r9, #4
   1424c:	cmp	r0, #34	; 0x22
   14250:	bne	14c8c <__assert_fail@plt+0x3d58>
   14254:	mov	r9, #1
   14258:	cmp	r8, #0
   1425c:	bne	142a4 <__assert_fail@plt+0x3370>
   14260:	b	14c84 <__assert_fail@plt+0x3d50>
   14264:	mov	r9, #4
   14268:	cmp	r8, #0
   1426c:	beq	14c8c <__assert_fail@plt+0x3d58>
   14270:	ldrb	r1, [r5]
   14274:	cmp	r1, #0
   14278:	beq	14c8c <__assert_fail@plt+0x3d58>
   1427c:	mov	r0, r8
   14280:	bl	10e80 <strchr@plt>
   14284:	cmp	r0, #0
   14288:	beq	14c8c <__assert_fail@plt+0x3d58>
   1428c:	mov	r7, #1
   14290:	mov	r9, #0
   14294:	b	142a4 <__assert_fail@plt+0x3370>
   14298:	mov	r9, r0
   1429c:	cmp	r8, #0
   142a0:	beq	14c84 <__assert_fail@plt+0x3d50>
   142a4:	ldrb	r5, [r4]
   142a8:	cmp	r5, #0
   142ac:	beq	14c84 <__assert_fail@plt+0x3d50>
   142b0:	mov	r0, r8
   142b4:	mov	r1, r5
   142b8:	bl	10e80 <strchr@plt>
   142bc:	cmp	r0, #0
   142c0:	beq	14500 <__assert_fail@plt+0x35cc>
   142c4:	sub	r0, r5, #69	; 0x45
   142c8:	mov	ip, #1
   142cc:	mov	r6, #1024	; 0x400
   142d0:	cmp	r0, #47	; 0x2f
   142d4:	bhi	143f0 <__assert_fail@plt+0x34bc>
   142d8:	add	r1, pc, #0
   142dc:	ldr	pc, [r1, r0, lsl #2]
   142e0:	andeq	r4, r1, r0, lsr #7
   142e4:	strdeq	r4, [r1], -r0
   142e8:	andeq	r4, r1, r0, lsr #7
   142ec:	strdeq	r4, [r1], -r0
   142f0:	strdeq	r4, [r1], -r0
   142f4:	strdeq	r4, [r1], -r0
   142f8:	andeq	r4, r1, r0, lsr #7
   142fc:	strdeq	r4, [r1], -r0
   14300:	andeq	r4, r1, r0, lsr #7
   14304:	strdeq	r4, [r1], -r0
   14308:	strdeq	r4, [r1], -r0
   1430c:	andeq	r4, r1, r0, lsr #7
   14310:	strdeq	r4, [r1], -r0
   14314:	strdeq	r4, [r1], -r0
   14318:	strdeq	r4, [r1], -r0
   1431c:	andeq	r4, r1, r0, lsr #7
   14320:	strdeq	r4, [r1], -r0
   14324:	strdeq	r4, [r1], -r0
   14328:	strdeq	r4, [r1], -r0
   1432c:	strdeq	r4, [r1], -r0
   14330:	andeq	r4, r1, r0, lsr #7
   14334:	andeq	r4, r1, r0, lsr #7
   14338:	strdeq	r4, [r1], -r0
   1433c:	strdeq	r4, [r1], -r0
   14340:	strdeq	r4, [r1], -r0
   14344:	strdeq	r4, [r1], -r0
   14348:	strdeq	r4, [r1], -r0
   1434c:	strdeq	r4, [r1], -r0
   14350:	strdeq	r4, [r1], -r0
   14354:	strdeq	r4, [r1], -r0
   14358:	strdeq	r4, [r1], -r0
   1435c:	strdeq	r4, [r1], -r0
   14360:	strdeq	r4, [r1], -r0
   14364:	strdeq	r4, [r1], -r0
   14368:	andeq	r4, r1, r0, lsr #7
   1436c:	strdeq	r4, [r1], -r0
   14370:	strdeq	r4, [r1], -r0
   14374:	strdeq	r4, [r1], -r0
   14378:	andeq	r4, r1, r0, lsr #7
   1437c:	strdeq	r4, [r1], -r0
   14380:	andeq	r4, r1, r0, lsr #7
   14384:	strdeq	r4, [r1], -r0
   14388:	strdeq	r4, [r1], -r0
   1438c:	strdeq	r4, [r1], -r0
   14390:	strdeq	r4, [r1], -r0
   14394:	strdeq	r4, [r1], -r0
   14398:	strdeq	r4, [r1], -r0
   1439c:	andeq	r4, r1, r0, lsr #7
   143a0:	mov	r0, r8
   143a4:	mov	r1, #48	; 0x30
   143a8:	bl	10e80 <strchr@plt>
   143ac:	cmp	r0, #0
   143b0:	beq	143ec <__assert_fail@plt+0x34b8>
   143b4:	ldrb	r0, [r4, #1]
   143b8:	cmp	r0, #66	; 0x42
   143bc:	cmpne	r0, #68	; 0x44
   143c0:	bne	143d0 <__assert_fail@plt+0x349c>
   143c4:	mov	ip, #2
   143c8:	mov	r6, #1000	; 0x3e8
   143cc:	b	143f0 <__assert_fail@plt+0x34bc>
   143d0:	cmp	r0, #105	; 0x69
   143d4:	bne	143ec <__assert_fail@plt+0x34b8>
   143d8:	ldrb	r0, [r4, #2]
   143dc:	mov	ip, #1
   143e0:	cmp	r0, #66	; 0x42
   143e4:	movweq	ip, #3
   143e8:	b	143f0 <__assert_fail@plt+0x34bc>
   143ec:	mov	ip, #1
   143f0:	sub	r1, r5, #66	; 0x42
   143f4:	cmp	r1, #53	; 0x35
   143f8:	bhi	14500 <__assert_fail@plt+0x35cc>
   143fc:	add	r2, pc, #4
   14400:	mov	r0, #0
   14404:	ldr	pc, [r2, r1, lsl #2]
   14408:	andeq	r4, r1, r8, lsl #11
   1440c:	andeq	r4, r1, r0, lsl #10
   14410:	andeq	r4, r1, r0, lsl #10
   14414:	muleq	r1, ip, r5
   14418:	andeq	r4, r1, r0, lsl #10
   1441c:	andeq	r4, r1, r0, ror #9
   14420:	andeq	r4, r1, r0, lsl #10
   14424:	andeq	r4, r1, r0, lsl #10
   14428:	andeq	r4, r1, r0, lsl #10
   1442c:	andeq	r4, r1, ip, lsl #10
   14430:	andeq	r4, r1, r0, lsl #10
   14434:	andeq	r4, r1, r8, lsr #10
   14438:	andeq	r4, r1, r0, lsl #10
   1443c:	andeq	r4, r1, r0, lsl #10
   14440:			; <UNDEFINED> instruction: 0x000145bc
   14444:	andeq	r4, r1, r0, lsl #10
   14448:	andeq	r4, r1, r0, lsl #10
   1444c:	andeq	r4, r1, r0, lsl #10
   14450:	andeq	r4, r1, r8, asr #10
   14454:	andeq	r4, r1, r0, lsl #10
   14458:	andeq	r4, r1, r0, lsl #10
   1445c:	andeq	r4, r1, r0, lsl #10
   14460:	andeq	r4, r1, r0, lsl #10
   14464:	ldrdeq	r4, [r1], -ip
   14468:	andeq	r4, r1, r8, ror #10
   1446c:	andeq	r4, r1, r0, lsl #10
   14470:	andeq	r4, r1, r0, lsl #10
   14474:	andeq	r4, r1, r0, lsl #10
   14478:	andeq	r4, r1, r0, lsl #10
   1447c:	andeq	r4, r1, r0, lsl #10
   14480:	andeq	r4, r1, r0, lsl #10
   14484:	andeq	r4, r1, r0, lsl #10
   14488:	strdeq	r4, [r1], -ip
   1448c:	andeq	r4, r1, ip, ror #24
   14490:	andeq	r4, r1, r0, lsl #10
   14494:	andeq	r4, r1, r0, lsl #10
   14498:	andeq	r4, r1, r0, lsl #10
   1449c:	andeq	r4, r1, r0, ror #9
   144a0:	andeq	r4, r1, r0, lsl #10
   144a4:	andeq	r4, r1, r0, lsl #10
   144a8:	andeq	r4, r1, r0, lsl #10
   144ac:	andeq	r4, r1, ip, lsl #10
   144b0:	andeq	r4, r1, r0, lsl #10
   144b4:	andeq	r4, r1, r8, lsr #10
   144b8:	andeq	r4, r1, r0, lsl #10
   144bc:	andeq	r4, r1, r0, lsl #10
   144c0:	andeq	r4, r1, r0, lsl #10
   144c4:	andeq	r4, r1, r0, lsl #10
   144c8:	andeq	r4, r1, r0, lsl #10
   144cc:	andeq	r4, r1, r0, lsl #10
   144d0:	andeq	r4, r1, r8, asr #10
   144d4:	andeq	r4, r1, r0, lsl #10
   144d8:	andeq	r4, r1, r0, lsl #10
   144dc:	andeq	r4, r1, ip, lsl r6
   144e0:	cmn	r7, #1
   144e4:	ble	14630 <__assert_fail@plt+0x36fc>
   144e8:	mvn	r2, #-2147483648	; 0x80000000
   144ec:	mov	r3, #1
   144f0:	udiv	r0, r2, r6
   144f4:	cmp	r0, r7
   144f8:	bge	14648 <__assert_fail@plt+0x3714>
   144fc:	b	14708 <__assert_fail@plt+0x37d4>
   14500:	ldr	r0, [sp, #4]
   14504:	orr	r9, r9, #2
   14508:	b	14c88 <__assert_fail@plt+0x3d54>
   1450c:	cmn	r7, #1
   14510:	ble	1465c <__assert_fail@plt+0x3728>
   14514:	mvn	r1, #-2147483648	; 0x80000000
   14518:	udiv	r1, r1, r6
   1451c:	cmp	r1, r7
   14520:	bge	14670 <__assert_fail@plt+0x373c>
   14524:	b	148d8 <__assert_fail@plt+0x39a4>
   14528:	cmn	r7, #1
   1452c:	ble	14678 <__assert_fail@plt+0x3744>
   14530:	mvn	r1, #-2147483648	; 0x80000000
   14534:	mov	r0, #1
   14538:	udiv	r2, r1, r6
   1453c:	cmp	r2, r7
   14540:	bge	14690 <__assert_fail@plt+0x375c>
   14544:	b	14744 <__assert_fail@plt+0x3810>
   14548:	cmn	r7, #1
   1454c:	ble	146a4 <__assert_fail@plt+0x3770>
   14550:	mvn	r0, #-2147483648	; 0x80000000
   14554:	mov	r1, #1
   14558:	udiv	r2, r0, r6
   1455c:	cmp	r2, r7
   14560:	bge	146bc <__assert_fail@plt+0x3788>
   14564:	b	146cc <__assert_fail@plt+0x3798>
   14568:	cmp	r7, #0
   1456c:	bmi	1477c <__assert_fail@plt+0x3848>
   14570:	mvn	r0, #-2147483648	; 0x80000000
   14574:	mov	r3, #1
   14578:	udiv	r1, r0, r6
   1457c:	cmp	r1, r7
   14580:	bge	14798 <__assert_fail@plt+0x3864>
   14584:	b	147a8 <__assert_fail@plt+0x3874>
   14588:	cmn	r7, #1
   1458c:	ble	147c0 <__assert_fail@plt+0x388c>
   14590:	cmp	r7, #2097152	; 0x200000
   14594:	blt	147d4 <__assert_fail@plt+0x38a0>
   14598:	b	148d8 <__assert_fail@plt+0x39a4>
   1459c:	cmp	r7, #0
   145a0:	bmi	147dc <__assert_fail@plt+0x38a8>
   145a4:	mvn	r0, #-2147483648	; 0x80000000
   145a8:	mov	r3, #1
   145ac:	udiv	r1, r0, r6
   145b0:	cmp	r1, r7
   145b4:	bge	147f8 <__assert_fail@plt+0x38c4>
   145b8:	b	14808 <__assert_fail@plt+0x38d4>
   145bc:	cmp	r7, #0
   145c0:	bmi	14820 <__assert_fail@plt+0x38ec>
   145c4:	mvn	r0, #-2147483648	; 0x80000000
   145c8:	mov	r3, #1
   145cc:	udiv	r1, r0, r6
   145d0:	cmp	r1, r7
   145d4:	bge	1483c <__assert_fail@plt+0x3908>
   145d8:	b	1484c <__assert_fail@plt+0x3918>
   145dc:	cmp	r7, #0
   145e0:	bmi	14864 <__assert_fail@plt+0x3930>
   145e4:	mvn	r0, #-2147483648	; 0x80000000
   145e8:	mov	r3, #1
   145ec:	udiv	r1, r0, r6
   145f0:	cmp	r1, r7
   145f4:	bge	14880 <__assert_fail@plt+0x394c>
   145f8:	b	14890 <__assert_fail@plt+0x395c>
   145fc:	cmn	r7, #1
   14600:	ble	148a8 <__assert_fail@plt+0x3974>
   14604:	movw	r1, #65535	; 0xffff
   14608:	movt	r1, #31
   1460c:	orr	r1, r1, #2097152	; 0x200000
   14610:	cmp	r7, r1
   14614:	ble	148bc <__assert_fail@plt+0x3988>
   14618:	b	148d8 <__assert_fail@plt+0x39a4>
   1461c:	cmn	r7, #1
   14620:	ble	148c4 <__assert_fail@plt+0x3990>
   14624:	cmp	r7, #1073741824	; 0x40000000
   14628:	bge	148d8 <__assert_fail@plt+0x39a4>
   1462c:	b	148f0 <__assert_fail@plt+0x39bc>
   14630:	beq	14648 <__assert_fail@plt+0x3714>
   14634:	mov	r2, #-2147483648	; 0x80000000
   14638:	mov	r3, #1
   1463c:	sdiv	r0, r2, r7
   14640:	cmp	r0, r6
   14644:	blt	14720 <__assert_fail@plt+0x37ec>
   14648:	mul	r2, r7, r6
   1464c:	mov	r3, #0
   14650:	cmp	r2, #0
   14654:	bpl	14708 <__assert_fail@plt+0x37d4>
   14658:	b	14720 <__assert_fail@plt+0x37ec>
   1465c:	beq	14670 <__assert_fail@plt+0x373c>
   14660:	mov	r1, #-2147483648	; 0x80000000
   14664:	sdiv	r1, r1, r7
   14668:	cmp	r1, r6
   1466c:	blt	148d8 <__assert_fail@plt+0x39a4>
   14670:	mul	r7, r7, r6
   14674:	b	14c6c <__assert_fail@plt+0x3d38>
   14678:	beq	14690 <__assert_fail@plt+0x375c>
   1467c:	mov	r1, #-2147483648	; 0x80000000
   14680:	mov	r0, #1
   14684:	sdiv	r2, r1, r7
   14688:	cmp	r2, r6
   1468c:	blt	1475c <__assert_fail@plt+0x3828>
   14690:	mul	r1, r7, r6
   14694:	mov	r0, #0
   14698:	cmp	r1, #0
   1469c:	bpl	14744 <__assert_fail@plt+0x3810>
   146a0:	b	1475c <__assert_fail@plt+0x3828>
   146a4:	beq	146bc <__assert_fail@plt+0x3788>
   146a8:	mov	r0, #-2147483648	; 0x80000000
   146ac:	mov	r1, #1
   146b0:	sdiv	r2, r0, r7
   146b4:	cmp	r2, r6
   146b8:	blt	146e4 <__assert_fail@plt+0x37b0>
   146bc:	mul	r0, r7, r6
   146c0:	mov	r1, #0
   146c4:	cmp	r0, #0
   146c8:	bmi	146e4 <__assert_fail@plt+0x37b0>
   146cc:	mvn	r2, #-2147483648	; 0x80000000
   146d0:	mov	r3, #1
   146d4:	udiv	r7, r2, r6
   146d8:	cmp	r7, r0
   146dc:	blt	14708 <__assert_fail@plt+0x37d4>
   146e0:	b	146f8 <__assert_fail@plt+0x37c4>
   146e4:	mov	r2, #-2147483648	; 0x80000000
   146e8:	mov	r3, #1
   146ec:	sdiv	r7, r2, r0
   146f0:	cmp	r7, r6
   146f4:	blt	14720 <__assert_fail@plt+0x37ec>
   146f8:	mul	r2, r0, r6
   146fc:	mov	r3, r1
   14700:	cmp	r2, #0
   14704:	bmi	14720 <__assert_fail@plt+0x37ec>
   14708:	mvn	r1, #-2147483648	; 0x80000000
   1470c:	mov	r0, #1
   14710:	udiv	r7, r1, r6
   14714:	cmp	r7, r2
   14718:	blt	14744 <__assert_fail@plt+0x3810>
   1471c:	b	14734 <__assert_fail@plt+0x3800>
   14720:	mov	r1, #-2147483648	; 0x80000000
   14724:	mov	r0, #1
   14728:	sdiv	r7, r1, r2
   1472c:	cmp	r7, r6
   14730:	blt	1475c <__assert_fail@plt+0x3828>
   14734:	mul	r1, r2, r6
   14738:	mov	r0, r3
   1473c:	cmp	r1, #0
   14740:	bmi	1475c <__assert_fail@plt+0x3828>
   14744:	mvn	r7, #-2147483648	; 0x80000000
   14748:	mov	r2, #1
   1474c:	udiv	r3, r7, r6
   14750:	cmp	r3, r1
   14754:	blt	14c68 <__assert_fail@plt+0x3d34>
   14758:	b	14770 <__assert_fail@plt+0x383c>
   1475c:	mov	r7, #-2147483648	; 0x80000000
   14760:	mov	r2, #1
   14764:	sdiv	r3, r7, r1
   14768:	cmp	r3, r6
   1476c:	blt	14c68 <__assert_fail@plt+0x3d34>
   14770:	mov	r2, #0
   14774:	mul	r7, r1, r6
   14778:	b	14c68 <__assert_fail@plt+0x3d34>
   1477c:	cmn	r7, #1
   14780:	beq	14798 <__assert_fail@plt+0x3864>
   14784:	mov	r0, #-2147483648	; 0x80000000
   14788:	mov	r3, #1
   1478c:	sdiv	r1, r0, r7
   14790:	cmp	r1, r6
   14794:	blt	148f8 <__assert_fail@plt+0x39c4>
   14798:	mul	r0, r7, r6
   1479c:	mov	r3, #0
   147a0:	cmp	r0, #0
   147a4:	bmi	148f8 <__assert_fail@plt+0x39c4>
   147a8:	mvn	r1, #-2147483648	; 0x80000000
   147ac:	mov	r2, #1
   147b0:	udiv	r7, r1, r6
   147b4:	cmp	r7, r0
   147b8:	bge	1490c <__assert_fail@plt+0x39d8>
   147bc:	b	1491c <__assert_fail@plt+0x39e8>
   147c0:	beq	147d4 <__assert_fail@plt+0x38a0>
   147c4:	mov	r1, #-2147483648	; 0x80000000
   147c8:	sdiv	r1, r1, r7
   147cc:	cmp	r1, #1024	; 0x400
   147d0:	blt	148d8 <__assert_fail@plt+0x39a4>
   147d4:	lsl	r7, r7, #10
   147d8:	b	14c6c <__assert_fail@plt+0x3d38>
   147dc:	cmn	r7, #1
   147e0:	beq	147f8 <__assert_fail@plt+0x38c4>
   147e4:	mov	r0, #-2147483648	; 0x80000000
   147e8:	mov	r3, #1
   147ec:	sdiv	r1, r0, r7
   147f0:	cmp	r1, r6
   147f4:	blt	149c8 <__assert_fail@plt+0x3a94>
   147f8:	mul	r0, r7, r6
   147fc:	mov	r3, #0
   14800:	cmp	r0, #0
   14804:	bmi	149c8 <__assert_fail@plt+0x3a94>
   14808:	mvn	r1, #-2147483648	; 0x80000000
   1480c:	mov	r2, #1
   14810:	udiv	r7, r1, r6
   14814:	cmp	r7, r0
   14818:	bge	149dc <__assert_fail@plt+0x3aa8>
   1481c:	b	149ec <__assert_fail@plt+0x3ab8>
   14820:	cmn	r7, #1
   14824:	beq	1483c <__assert_fail@plt+0x3908>
   14828:	mov	r0, #-2147483648	; 0x80000000
   1482c:	mov	r3, #1
   14830:	sdiv	r1, r0, r7
   14834:	cmp	r1, r6
   14838:	blt	14a98 <__assert_fail@plt+0x3b64>
   1483c:	mul	r0, r7, r6
   14840:	mov	r3, #0
   14844:	cmp	r0, #0
   14848:	bmi	14a98 <__assert_fail@plt+0x3b64>
   1484c:	mvn	r1, #-2147483648	; 0x80000000
   14850:	mov	r2, #1
   14854:	udiv	r7, r1, r6
   14858:	cmp	r7, r0
   1485c:	bge	14aac <__assert_fail@plt+0x3b78>
   14860:	b	14abc <__assert_fail@plt+0x3b88>
   14864:	cmn	r7, #1
   14868:	beq	14880 <__assert_fail@plt+0x394c>
   1486c:	mov	r0, #-2147483648	; 0x80000000
   14870:	mov	r3, #1
   14874:	sdiv	r1, r0, r7
   14878:	cmp	r1, r6
   1487c:	blt	14afc <__assert_fail@plt+0x3bc8>
   14880:	mul	r0, r7, r6
   14884:	mov	r3, #0
   14888:	cmp	r0, #0
   1488c:	bmi	14afc <__assert_fail@plt+0x3bc8>
   14890:	mvn	r1, #-2147483648	; 0x80000000
   14894:	mov	r2, #1
   14898:	udiv	r7, r1, r6
   1489c:	cmp	r7, r0
   148a0:	bge	14b10 <__assert_fail@plt+0x3bdc>
   148a4:	b	14b20 <__assert_fail@plt+0x3bec>
   148a8:	beq	148bc <__assert_fail@plt+0x3988>
   148ac:	mov	r1, #-2147483648	; 0x80000000
   148b0:	sdiv	r1, r1, r7
   148b4:	cmp	r1, #512	; 0x200
   148b8:	blt	148d8 <__assert_fail@plt+0x39a4>
   148bc:	lsl	r7, r7, #9
   148c0:	b	14c6c <__assert_fail@plt+0x3d38>
   148c4:	beq	148f0 <__assert_fail@plt+0x39bc>
   148c8:	mov	r1, #-2147483648	; 0x80000000
   148cc:	sdiv	r1, r1, r7
   148d0:	cmp	r1, #2
   148d4:	bge	148f0 <__assert_fail@plt+0x39bc>
   148d8:	cmp	r7, #0
   148dc:	mvn	r1, #-2147483648	; 0x80000000
   148e0:	mov	r0, #1
   148e4:	movmi	r1, #-2147483648	; 0x80000000
   148e8:	mov	r7, r1
   148ec:	b	14c6c <__assert_fail@plt+0x3d38>
   148f0:	lsl	r7, r7, #1
   148f4:	b	14c6c <__assert_fail@plt+0x3d38>
   148f8:	mov	r1, #-2147483648	; 0x80000000
   148fc:	mov	r2, #1
   14900:	sdiv	r7, r1, r0
   14904:	cmp	r7, r6
   14908:	blt	14934 <__assert_fail@plt+0x3a00>
   1490c:	mul	r1, r0, r6
   14910:	mov	r2, r3
   14914:	cmp	r1, #0
   14918:	bmi	14934 <__assert_fail@plt+0x3a00>
   1491c:	mvn	r3, #-2147483648	; 0x80000000
   14920:	mov	r0, #1
   14924:	udiv	r7, r3, r6
   14928:	cmp	r7, r1
   1492c:	bge	14948 <__assert_fail@plt+0x3a14>
   14930:	b	14958 <__assert_fail@plt+0x3a24>
   14934:	mov	r3, #-2147483648	; 0x80000000
   14938:	mov	r0, #1
   1493c:	sdiv	r7, r3, r1
   14940:	cmp	r7, r6
   14944:	blt	14970 <__assert_fail@plt+0x3a3c>
   14948:	mul	r3, r1, r6
   1494c:	mov	r0, r2
   14950:	cmp	r3, #0
   14954:	bmi	14970 <__assert_fail@plt+0x3a3c>
   14958:	mvn	r1, #-2147483648	; 0x80000000
   1495c:	udiv	r2, r1, r6
   14960:	cmp	r2, r3
   14964:	bge	14988 <__assert_fail@plt+0x3a54>
   14968:	mov	r0, #1
   1496c:	b	14994 <__assert_fail@plt+0x3a60>
   14970:	mov	r1, #-2147483648	; 0x80000000
   14974:	sdiv	r2, r1, r3
   14978:	cmp	r2, r6
   1497c:	bge	14988 <__assert_fail@plt+0x3a54>
   14980:	mov	r0, #1
   14984:	b	149a8 <__assert_fail@plt+0x3a74>
   14988:	mul	r1, r3, r6
   1498c:	cmp	r1, #0
   14990:	bmi	149a8 <__assert_fail@plt+0x3a74>
   14994:	mvn	r2, #-2147483648	; 0x80000000
   14998:	udiv	r3, r2, r6
   1499c:	cmp	r3, r1
   149a0:	bge	149b8 <__assert_fail@plt+0x3a84>
   149a4:	b	14a38 <__assert_fail@plt+0x3b04>
   149a8:	mov	r2, #-2147483648	; 0x80000000
   149ac:	sdiv	r3, r2, r1
   149b0:	cmp	r3, r6
   149b4:	blt	14a50 <__assert_fail@plt+0x3b1c>
   149b8:	mul	r2, r1, r6
   149bc:	cmp	r2, #0
   149c0:	bpl	14a64 <__assert_fail@plt+0x3b30>
   149c4:	b	14a78 <__assert_fail@plt+0x3b44>
   149c8:	mov	r1, #-2147483648	; 0x80000000
   149cc:	mov	r2, #1
   149d0:	sdiv	r7, r1, r0
   149d4:	cmp	r7, r6
   149d8:	blt	14a04 <__assert_fail@plt+0x3ad0>
   149dc:	mul	r1, r0, r6
   149e0:	mov	r2, r3
   149e4:	cmp	r1, #0
   149e8:	bmi	14a04 <__assert_fail@plt+0x3ad0>
   149ec:	mvn	r3, #-2147483648	; 0x80000000
   149f0:	mov	r0, #1
   149f4:	udiv	r7, r3, r6
   149f8:	cmp	r7, r1
   149fc:	bge	14a18 <__assert_fail@plt+0x3ae4>
   14a00:	b	14a28 <__assert_fail@plt+0x3af4>
   14a04:	mov	r3, #-2147483648	; 0x80000000
   14a08:	mov	r0, #1
   14a0c:	sdiv	r7, r3, r1
   14a10:	cmp	r7, r6
   14a14:	blt	14a40 <__assert_fail@plt+0x3b0c>
   14a18:	mul	r3, r1, r6
   14a1c:	mov	r0, r2
   14a20:	cmp	r3, #0
   14a24:	bmi	14a40 <__assert_fail@plt+0x3b0c>
   14a28:	mvn	r2, #-2147483648	; 0x80000000
   14a2c:	udiv	r1, r2, r6
   14a30:	cmp	r1, r3
   14a34:	bge	14a58 <__assert_fail@plt+0x3b24>
   14a38:	mov	r0, #1
   14a3c:	b	14a64 <__assert_fail@plt+0x3b30>
   14a40:	mov	r2, #-2147483648	; 0x80000000
   14a44:	sdiv	r1, r2, r3
   14a48:	cmp	r1, r6
   14a4c:	bge	14a58 <__assert_fail@plt+0x3b24>
   14a50:	mov	r0, #1
   14a54:	b	14a78 <__assert_fail@plt+0x3b44>
   14a58:	mul	r2, r3, r6
   14a5c:	cmp	r2, #0
   14a60:	bmi	14a78 <__assert_fail@plt+0x3b44>
   14a64:	mvn	r1, #-2147483648	; 0x80000000
   14a68:	udiv	r3, r1, r6
   14a6c:	cmp	r3, r2
   14a70:	bge	14a88 <__assert_fail@plt+0x3b54>
   14a74:	b	14c20 <__assert_fail@plt+0x3cec>
   14a78:	mov	r1, #-2147483648	; 0x80000000
   14a7c:	sdiv	r3, r1, r2
   14a80:	cmp	r3, r6
   14a84:	blt	14c38 <__assert_fail@plt+0x3d04>
   14a88:	mul	r1, r2, r6
   14a8c:	cmp	r1, #0
   14a90:	bpl	14c4c <__assert_fail@plt+0x3d18>
   14a94:	b	14c98 <__assert_fail@plt+0x3d64>
   14a98:	mov	r1, #-2147483648	; 0x80000000
   14a9c:	mov	r2, #1
   14aa0:	sdiv	r7, r1, r0
   14aa4:	cmp	r7, r6
   14aa8:	blt	14ad4 <__assert_fail@plt+0x3ba0>
   14aac:	mul	r1, r0, r6
   14ab0:	mov	r2, r3
   14ab4:	cmp	r1, #0
   14ab8:	bmi	14ad4 <__assert_fail@plt+0x3ba0>
   14abc:	mvn	r3, #-2147483648	; 0x80000000
   14ac0:	mov	r0, #1
   14ac4:	udiv	r7, r3, r6
   14ac8:	cmp	r7, r1
   14acc:	bge	14ae8 <__assert_fail@plt+0x3bb4>
   14ad0:	b	14c10 <__assert_fail@plt+0x3cdc>
   14ad4:	mov	r3, #-2147483648	; 0x80000000
   14ad8:	mov	r0, #1
   14adc:	sdiv	r7, r3, r1
   14ae0:	cmp	r7, r6
   14ae4:	blt	14c28 <__assert_fail@plt+0x3cf4>
   14ae8:	mul	r3, r1, r6
   14aec:	mov	r0, r2
   14af0:	cmp	r3, #0
   14af4:	bpl	14c10 <__assert_fail@plt+0x3cdc>
   14af8:	b	14c28 <__assert_fail@plt+0x3cf4>
   14afc:	mov	r1, #-2147483648	; 0x80000000
   14b00:	mov	r2, #1
   14b04:	sdiv	r7, r1, r0
   14b08:	cmp	r7, r6
   14b0c:	blt	14b38 <__assert_fail@plt+0x3c04>
   14b10:	mul	r1, r0, r6
   14b14:	mov	r2, r3
   14b18:	cmp	r1, #0
   14b1c:	bmi	14b38 <__assert_fail@plt+0x3c04>
   14b20:	mvn	r3, #-2147483648	; 0x80000000
   14b24:	mov	r0, #1
   14b28:	udiv	r7, r3, r6
   14b2c:	cmp	r7, r1
   14b30:	bge	14b4c <__assert_fail@plt+0x3c18>
   14b34:	b	14b5c <__assert_fail@plt+0x3c28>
   14b38:	mov	r3, #-2147483648	; 0x80000000
   14b3c:	mov	r0, #1
   14b40:	sdiv	r7, r3, r1
   14b44:	cmp	r7, r6
   14b48:	blt	14b74 <__assert_fail@plt+0x3c40>
   14b4c:	mul	r3, r1, r6
   14b50:	mov	r0, r2
   14b54:	cmp	r3, #0
   14b58:	bmi	14b74 <__assert_fail@plt+0x3c40>
   14b5c:	mvn	r1, #-2147483648	; 0x80000000
   14b60:	udiv	r2, r1, r6
   14b64:	cmp	r2, r3
   14b68:	bge	14b8c <__assert_fail@plt+0x3c58>
   14b6c:	mov	r0, #1
   14b70:	b	14b98 <__assert_fail@plt+0x3c64>
   14b74:	mov	r1, #-2147483648	; 0x80000000
   14b78:	sdiv	r2, r1, r3
   14b7c:	cmp	r2, r6
   14b80:	bge	14b8c <__assert_fail@plt+0x3c58>
   14b84:	mov	r0, #1
   14b88:	b	14bb0 <__assert_fail@plt+0x3c7c>
   14b8c:	mul	r1, r3, r6
   14b90:	cmp	r1, #0
   14b94:	bmi	14bb0 <__assert_fail@plt+0x3c7c>
   14b98:	mvn	r2, #-2147483648	; 0x80000000
   14b9c:	udiv	r3, r2, r6
   14ba0:	cmp	r3, r1
   14ba4:	bge	14bc8 <__assert_fail@plt+0x3c94>
   14ba8:	mov	r0, #1
   14bac:	b	14bd4 <__assert_fail@plt+0x3ca0>
   14bb0:	mov	r2, #-2147483648	; 0x80000000
   14bb4:	sdiv	r3, r2, r1
   14bb8:	cmp	r3, r6
   14bbc:	bge	14bc8 <__assert_fail@plt+0x3c94>
   14bc0:	mov	r0, #1
   14bc4:	b	14bec <__assert_fail@plt+0x3cb8>
   14bc8:	mul	r2, r1, r6
   14bcc:	cmp	r2, #0
   14bd0:	bmi	14bec <__assert_fail@plt+0x3cb8>
   14bd4:	mvn	r3, #-2147483648	; 0x80000000
   14bd8:	udiv	r1, r3, r6
   14bdc:	cmp	r1, r2
   14be0:	bge	14c04 <__assert_fail@plt+0x3cd0>
   14be4:	mov	r0, #1
   14be8:	b	14c10 <__assert_fail@plt+0x3cdc>
   14bec:	mov	r3, #-2147483648	; 0x80000000
   14bf0:	sdiv	r1, r3, r2
   14bf4:	cmp	r1, r6
   14bf8:	bge	14c04 <__assert_fail@plt+0x3cd0>
   14bfc:	mov	r0, #1
   14c00:	b	14c28 <__assert_fail@plt+0x3cf4>
   14c04:	mul	r3, r2, r6
   14c08:	cmp	r3, #0
   14c0c:	bmi	14c28 <__assert_fail@plt+0x3cf4>
   14c10:	mvn	r1, #-2147483648	; 0x80000000
   14c14:	udiv	r2, r1, r6
   14c18:	cmp	r2, r3
   14c1c:	bge	14c40 <__assert_fail@plt+0x3d0c>
   14c20:	mov	r0, #1
   14c24:	b	14c4c <__assert_fail@plt+0x3d18>
   14c28:	mov	r1, #-2147483648	; 0x80000000
   14c2c:	sdiv	r2, r1, r3
   14c30:	cmp	r2, r6
   14c34:	bge	14c40 <__assert_fail@plt+0x3d0c>
   14c38:	mov	r0, #1
   14c3c:	b	14c98 <__assert_fail@plt+0x3d64>
   14c40:	mul	r1, r3, r6
   14c44:	cmp	r1, #0
   14c48:	bmi	14c98 <__assert_fail@plt+0x3d64>
   14c4c:	mvn	r7, #-2147483648	; 0x80000000
   14c50:	mov	r2, #1
   14c54:	udiv	r3, r7, r6
   14c58:	cmp	r3, r1
   14c5c:	blt	14c68 <__assert_fail@plt+0x3d34>
   14c60:	mul	r7, r1, r6
   14c64:	mov	r2, #0
   14c68:	orr	r0, r2, r0
   14c6c:	add	r1, r4, ip
   14c70:	orr	r9, r0, r9
   14c74:	str	r1, [sl]
   14c78:	ldrb	r1, [r4, ip]
   14c7c:	cmp	r1, #0
   14c80:	orrne	r9, r9, #2
   14c84:	ldr	r0, [sp, #4]
   14c88:	str	r7, [r0]
   14c8c:	mov	r0, r9
   14c90:	sub	sp, fp, #28
   14c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c98:	mov	r7, #-2147483648	; 0x80000000
   14c9c:	mov	r2, #1
   14ca0:	sdiv	r3, r7, r1
   14ca4:	cmp	r3, r6
   14ca8:	bge	14c60 <__assert_fail@plt+0x3d2c>
   14cac:	b	14c68 <__assert_fail@plt+0x3d34>
   14cb0:	movw	r0, #23525	; 0x5be5
   14cb4:	movw	r1, #23563	; 0x5c0b
   14cb8:	movw	r3, #23577	; 0x5c19
   14cbc:	mov	r2, #85	; 0x55
   14cc0:	movt	r0, #1
   14cc4:	movt	r1, #1
   14cc8:	movt	r3, #1
   14ccc:	bl	10f34 <__assert_fail@plt>
   14cd0:	clz	r2, r1
   14cd4:	clz	r3, r0
   14cd8:	lsr	r2, r2, #5
   14cdc:	lsr	r3, r3, #5
   14ce0:	orrs	r2, r3, r2
   14ce4:	movwne	r1, #1
   14ce8:	movwne	r0, #1
   14cec:	cmp	r1, #0
   14cf0:	beq	14d20 <__assert_fail@plt+0x3dec>
   14cf4:	mvn	r2, #-2147483648	; 0x80000000
   14cf8:	udiv	r2, r2, r1
   14cfc:	cmp	r2, r0
   14d00:	bcs	14d20 <__assert_fail@plt+0x3dec>
   14d04:	push	{fp, lr}
   14d08:	mov	fp, sp
   14d0c:	bl	10e8c <__errno_location@plt>
   14d10:	mov	r1, #12
   14d14:	str	r1, [r0]
   14d18:	mov	r0, #0
   14d1c:	pop	{fp, pc}
   14d20:	b	10d0c <calloc@plt>
   14d24:	cmp	r0, #0
   14d28:	movweq	r0, #1
   14d2c:	cmn	r0, #1
   14d30:	ble	14d38 <__assert_fail@plt+0x3e04>
   14d34:	b	10e14 <malloc@plt>
   14d38:	push	{fp, lr}
   14d3c:	mov	fp, sp
   14d40:	bl	10e8c <__errno_location@plt>
   14d44:	mov	r1, #12
   14d48:	str	r1, [r0]
   14d4c:	mov	r0, #0
   14d50:	pop	{fp, pc}
   14d54:	push	{fp, lr}
   14d58:	mov	fp, sp
   14d5c:	cmp	r0, #0
   14d60:	beq	14d7c <__assert_fail@plt+0x3e48>
   14d64:	cmp	r1, #0
   14d68:	beq	14d88 <__assert_fail@plt+0x3e54>
   14d6c:	cmn	r1, #1
   14d70:	ble	14d94 <__assert_fail@plt+0x3e60>
   14d74:	pop	{fp, lr}
   14d78:	b	10d90 <realloc@plt>
   14d7c:	mov	r0, r1
   14d80:	pop	{fp, lr}
   14d84:	b	14d24 <__assert_fail@plt+0x3df0>
   14d88:	bl	14f24 <__assert_fail@plt+0x3ff0>
   14d8c:	mov	r0, #0
   14d90:	pop	{fp, pc}
   14d94:	bl	10e8c <__errno_location@plt>
   14d98:	mov	r1, #12
   14d9c:	str	r1, [r0]
   14da0:	mov	r0, #0
   14da4:	pop	{fp, pc}
   14da8:	push	{r4, r5, r6, sl, fp, lr}
   14dac:	add	fp, sp, #16
   14db0:	mov	r4, r0
   14db4:	bl	10de4 <__fpending@plt>
   14db8:	ldr	r6, [r4]
   14dbc:	mov	r5, r0
   14dc0:	mov	r0, r4
   14dc4:	bl	14e2c <__assert_fail@plt+0x3ef8>
   14dc8:	tst	r6, #32
   14dcc:	bne	14e04 <__assert_fail@plt+0x3ed0>
   14dd0:	cmp	r0, #0
   14dd4:	mov	r4, r0
   14dd8:	mvnne	r4, #0
   14ddc:	cmp	r5, #0
   14de0:	bne	14e10 <__assert_fail@plt+0x3edc>
   14de4:	cmp	r0, #0
   14de8:	beq	14e10 <__assert_fail@plt+0x3edc>
   14dec:	bl	10e8c <__errno_location@plt>
   14df0:	ldr	r0, [r0]
   14df4:	subs	r4, r0, #9
   14df8:	mvnne	r4, #0
   14dfc:	mov	r0, r4
   14e00:	pop	{r4, r5, r6, sl, fp, pc}
   14e04:	mvn	r4, #0
   14e08:	cmp	r0, #0
   14e0c:	beq	14e18 <__assert_fail@plt+0x3ee4>
   14e10:	mov	r0, r4
   14e14:	pop	{r4, r5, r6, sl, fp, pc}
   14e18:	bl	10e8c <__errno_location@plt>
   14e1c:	mov	r1, #0
   14e20:	str	r1, [r0]
   14e24:	mov	r0, r4
   14e28:	pop	{r4, r5, r6, sl, fp, pc}
   14e2c:	push	{r4, r5, r6, sl, fp, lr}
   14e30:	add	fp, sp, #16
   14e34:	sub	sp, sp, #8
   14e38:	mov	r4, r0
   14e3c:	bl	10ebc <fileno@plt>
   14e40:	cmn	r0, #1
   14e44:	ble	14eb8 <__assert_fail@plt+0x3f84>
   14e48:	mov	r0, r4
   14e4c:	bl	10e2c <__freading@plt>
   14e50:	cmp	r0, #0
   14e54:	beq	14e80 <__assert_fail@plt+0x3f4c>
   14e58:	mov	r0, r4
   14e5c:	bl	10ebc <fileno@plt>
   14e60:	mov	r1, #1
   14e64:	mov	r2, #0
   14e68:	mov	r3, #0
   14e6c:	str	r1, [sp]
   14e70:	bl	10dcc <lseek64@plt>
   14e74:	and	r0, r0, r1
   14e78:	cmn	r0, #1
   14e7c:	beq	14eb8 <__assert_fail@plt+0x3f84>
   14e80:	mov	r0, r4
   14e84:	bl	14ec8 <__assert_fail@plt+0x3f94>
   14e88:	cmp	r0, #0
   14e8c:	beq	14eb8 <__assert_fail@plt+0x3f84>
   14e90:	bl	10e8c <__errno_location@plt>
   14e94:	ldr	r6, [r0]
   14e98:	mov	r5, r0
   14e9c:	mov	r0, r4
   14ea0:	bl	10ed4 <fclose@plt>
   14ea4:	cmp	r6, #0
   14ea8:	strne	r6, [r5]
   14eac:	mvnne	r0, #0
   14eb0:	sub	sp, fp, #16
   14eb4:	pop	{r4, r5, r6, sl, fp, pc}
   14eb8:	mov	r0, r4
   14ebc:	sub	sp, fp, #16
   14ec0:	pop	{r4, r5, r6, sl, fp, lr}
   14ec4:	b	10ed4 <fclose@plt>
   14ec8:	push	{r4, sl, fp, lr}
   14ecc:	add	fp, sp, #8
   14ed0:	sub	sp, sp, #8
   14ed4:	mov	r4, r0
   14ed8:	cmp	r0, #0
   14edc:	beq	14f14 <__assert_fail@plt+0x3fe0>
   14ee0:	mov	r0, r4
   14ee4:	bl	10e2c <__freading@plt>
   14ee8:	cmp	r0, #0
   14eec:	beq	14f14 <__assert_fail@plt+0x3fe0>
   14ef0:	ldrb	r0, [r4, #1]
   14ef4:	tst	r0, #1
   14ef8:	beq	14f14 <__assert_fail@plt+0x3fe0>
   14efc:	mov	r0, #1
   14f00:	mov	r2, #0
   14f04:	mov	r3, #0
   14f08:	str	r0, [sp]
   14f0c:	mov	r0, r4
   14f10:	bl	14f4c <__assert_fail@plt+0x4018>
   14f14:	mov	r0, r4
   14f18:	sub	sp, fp, #8
   14f1c:	pop	{r4, sl, fp, lr}
   14f20:	b	10d3c <fflush@plt>
   14f24:	push	{r4, r5, r6, sl, fp, lr}
   14f28:	add	fp, sp, #16
   14f2c:	mov	r4, r0
   14f30:	bl	10e8c <__errno_location@plt>
   14f34:	ldr	r6, [r0]
   14f38:	mov	r5, r0
   14f3c:	mov	r0, r4
   14f40:	bl	10d48 <free@plt>
   14f44:	str	r6, [r5]
   14f48:	pop	{r4, r5, r6, sl, fp, pc}
   14f4c:	push	{r4, r5, r6, r7, fp, lr}
   14f50:	add	fp, sp, #16
   14f54:	sub	sp, sp, #8
   14f58:	mov	r4, r0
   14f5c:	ldr	r0, [r0, #4]
   14f60:	mov	r5, r3
   14f64:	mov	r6, r2
   14f68:	ldr	r1, [r4, #8]
   14f6c:	cmp	r1, r0
   14f70:	bne	14f8c <__assert_fail@plt+0x4058>
   14f74:	ldrd	r0, [r4, #16]
   14f78:	cmp	r1, r0
   14f7c:	bne	14f8c <__assert_fail@plt+0x4058>
   14f80:	ldr	r0, [r4, #36]	; 0x24
   14f84:	cmp	r0, #0
   14f88:	beq	14fa4 <__assert_fail@plt+0x4070>
   14f8c:	mov	r0, r4
   14f90:	mov	r2, r6
   14f94:	mov	r3, r5
   14f98:	sub	sp, fp, #16
   14f9c:	pop	{r4, r5, r6, r7, fp, lr}
   14fa0:	b	10ee0 <fseeko64@plt>
   14fa4:	ldr	r7, [fp, #8]
   14fa8:	mov	r0, r4
   14fac:	bl	10ebc <fileno@plt>
   14fb0:	mov	r2, r6
   14fb4:	mov	r3, r5
   14fb8:	str	r7, [sp]
   14fbc:	bl	10dcc <lseek64@plt>
   14fc0:	and	r2, r0, r1
   14fc4:	cmn	r2, #1
   14fc8:	beq	14fe8 <__assert_fail@plt+0x40b4>
   14fcc:	strd	r0, [r4, #80]	; 0x50
   14fd0:	ldr	r0, [r4]
   14fd4:	bic	r0, r0, #16
   14fd8:	str	r0, [r4]
   14fdc:	mov	r0, #0
   14fe0:	sub	sp, fp, #16
   14fe4:	pop	{r4, r5, r6, r7, fp, pc}
   14fe8:	mvn	r0, #0
   14fec:	sub	sp, fp, #16
   14ff0:	pop	{r4, r5, r6, r7, fp, pc}
   14ff4:	push	{fp, lr}
   14ff8:	mov	fp, sp
   14ffc:	mov	r0, #14
   15000:	bl	10f04 <nl_langinfo@plt>
   15004:	movw	r1, #22306	; 0x5722
   15008:	cmp	r0, #0
   1500c:	movt	r1, #1
   15010:	movne	r1, r0
   15014:	movw	r0, #23648	; 0x5c60
   15018:	ldrb	r2, [r1]
   1501c:	movt	r0, #1
   15020:	cmp	r2, #0
   15024:	movne	r0, r1
   15028:	pop	{fp, pc}
   1502c:	push	{r4, r5, r6, r7, fp, lr}
   15030:	add	fp, sp, #16
   15034:	sub	sp, sp, #8
   15038:	cmp	r0, #0
   1503c:	add	r5, sp, #4
   15040:	mov	r7, r2
   15044:	mov	r4, r1
   15048:	movne	r5, r0
   1504c:	mov	r0, r5
   15050:	bl	10df0 <mbrtowc@plt>
   15054:	mov	r6, r0
   15058:	cmp	r7, #0
   1505c:	beq	15084 <__assert_fail@plt+0x4150>
   15060:	cmn	r6, #2
   15064:	bcc	15084 <__assert_fail@plt+0x4150>
   15068:	mov	r0, #0
   1506c:	bl	150cc <__assert_fail@plt+0x4198>
   15070:	cmp	r0, #0
   15074:	bne	15084 <__assert_fail@plt+0x4150>
   15078:	ldrb	r0, [r4]
   1507c:	mov	r6, #1
   15080:	str	r0, [r5]
   15084:	mov	r0, r6
   15088:	sub	sp, fp, #16
   1508c:	pop	{r4, r5, r6, r7, fp, pc}
   15090:	cmp	r2, #0
   15094:	beq	150c4 <__assert_fail@plt+0x4190>
   15098:	mvn	r3, #0
   1509c:	udiv	r3, r3, r2
   150a0:	cmp	r3, r1
   150a4:	bcs	150c4 <__assert_fail@plt+0x4190>
   150a8:	push	{fp, lr}
   150ac:	mov	fp, sp
   150b0:	bl	10e8c <__errno_location@plt>
   150b4:	mov	r1, #12
   150b8:	str	r1, [r0]
   150bc:	mov	r0, #0
   150c0:	pop	{fp, pc}
   150c4:	mul	r1, r2, r1
   150c8:	b	14d54 <__assert_fail@plt+0x3e20>
   150cc:	push	{r4, sl, fp, lr}
   150d0:	add	fp, sp, #8
   150d4:	sub	sp, sp, #264	; 0x108
   150d8:	add	r1, sp, #7
   150dc:	movw	r2, #257	; 0x101
   150e0:	bl	15138 <__assert_fail@plt+0x4204>
   150e4:	mov	r4, #0
   150e8:	cmp	r0, #0
   150ec:	bne	1512c <__assert_fail@plt+0x41f8>
   150f0:	movw	r1, #23654	; 0x5c66
   150f4:	add	r0, sp, #7
   150f8:	mov	r2, #2
   150fc:	movt	r1, #1
   15100:	bl	10e68 <bcmp@plt>
   15104:	cmp	r0, #0
   15108:	beq	1512c <__assert_fail@plt+0x41f8>
   1510c:	movw	r1, #23656	; 0x5c68
   15110:	add	r0, sp, #7
   15114:	mov	r2, #6
   15118:	movt	r1, #1
   1511c:	bl	10e68 <bcmp@plt>
   15120:	cmp	r0, #0
   15124:	mov	r4, r0
   15128:	movwne	r4, #1
   1512c:	mov	r0, r4
   15130:	sub	sp, fp, #8
   15134:	pop	{r4, sl, fp, pc}
   15138:	push	{r4, r5, r6, r7, fp, lr}
   1513c:	add	fp, sp, #16
   15140:	mov	r4, r1
   15144:	mov	r1, #0
   15148:	mov	r6, r2
   1514c:	bl	10eec <setlocale@plt>
   15150:	cmp	r0, #0
   15154:	beq	15184 <__assert_fail@plt+0x4250>
   15158:	mov	r7, r0
   1515c:	bl	10e74 <strlen@plt>
   15160:	cmp	r0, r6
   15164:	bcs	151a0 <__assert_fail@plt+0x426c>
   15168:	add	r2, r0, #1
   1516c:	mov	r0, r4
   15170:	mov	r1, r7
   15174:	bl	10d60 <memcpy@plt>
   15178:	mov	r5, #0
   1517c:	mov	r0, r5
   15180:	pop	{r4, r5, r6, r7, fp, pc}
   15184:	mov	r5, #22
   15188:	cmp	r6, #0
   1518c:	beq	151c8 <__assert_fail@plt+0x4294>
   15190:	mov	r0, #0
   15194:	strb	r0, [r4]
   15198:	mov	r0, r5
   1519c:	pop	{r4, r5, r6, r7, fp, pc}
   151a0:	mov	r5, #34	; 0x22
   151a4:	cmp	r6, #0
   151a8:	beq	151c8 <__assert_fail@plt+0x4294>
   151ac:	sub	r6, r6, #1
   151b0:	mov	r0, r4
   151b4:	mov	r1, r7
   151b8:	mov	r2, r6
   151bc:	bl	10d60 <memcpy@plt>
   151c0:	mov	r0, #0
   151c4:	strb	r0, [r4, r6]
   151c8:	mov	r0, r5
   151cc:	pop	{r4, r5, r6, r7, fp, pc}
   151d0:	mov	r1, #0
   151d4:	b	10eec <setlocale@plt>
   151d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151dc:	mov	r7, r0
   151e0:	ldr	r6, [pc, #72]	; 15230 <__assert_fail@plt+0x42fc>
   151e4:	ldr	r5, [pc, #72]	; 15234 <__assert_fail@plt+0x4300>
   151e8:	add	r6, pc, r6
   151ec:	add	r5, pc, r5
   151f0:	sub	r6, r6, r5
   151f4:	mov	r8, r1
   151f8:	mov	r9, r2
   151fc:	bl	10cec <calloc@plt-0x20>
   15200:	asrs	r6, r6, #2
   15204:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15208:	mov	r4, #0
   1520c:	add	r4, r4, #1
   15210:	ldr	r3, [r5], #4
   15214:	mov	r2, r9
   15218:	mov	r1, r8
   1521c:	mov	r0, r7
   15220:	blx	r3
   15224:	cmp	r6, r4
   15228:	bne	1520c <__assert_fail@plt+0x42d8>
   1522c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15230:	andeq	r0, r1, ip, lsl sp
   15234:	andeq	r0, r1, r4, lsl sp
   15238:	bx	lr
   1523c:	ldr	r3, [pc, #12]	; 15250 <__assert_fail@plt+0x431c>
   15240:	mov	r1, #0
   15244:	add	r3, pc, r3
   15248:	ldr	r2, [r3]
   1524c:	b	10e98 <__cxa_atexit@plt>
   15250:	andeq	r0, r1, r8, lsl #29

Disassembly of section .fini:

00015254 <.fini>:
   15254:	push	{r3, lr}
   15258:	pop	{r3, pc}
